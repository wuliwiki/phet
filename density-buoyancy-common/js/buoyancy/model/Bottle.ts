// Copyright 2019-2022, University of Colorado Boulder

/**
 * Models a 3-dimensional bottle that is borrowed from an approximate 2-liter bottle design (although it is increased
 * to a 10-liter volume).
 *
 * The bottle is mathematically modeled so that we can quickly compute cross-sections (we'll need those to display
 * "liquid" contents inside), and also to compute cross-sectional areas and cumulative volumes accurately (for the
 * buoyancy model, we need to quickly compute displaced area and volume). We'll also want to compute an accurate volume
 * for our model, so that we can apply a correction factor and scale things so that our model is an exact 10-liter
 * bottle.
 *
 * This means we have a coordinate separation from "logical coordinates" (x,r, center top of the cap is 0,0, and values
 * are unitless) to "model coordinates" (the bottle is scaled so that it is exactly 10 liters in volume, and the center
 * is the centroid of the 2d physics intersection shape).
 *
 * As part of this modeling, we'll precompute some expensive things (like the curve for displaced areas and volumes,
 * the exact multiplier to convert the bottle into 10 liters, and the 2d shape used for physics intersection). Some
 * auto-generated data is in the constants section, computed with
 * `copy( phet.densityBuoyancyCommon.Bottle.computeBottleData() )`.
 *
 * Terminology:
 * - Cap: On the left, with a rounded corner on the upper left. It will be included as a separate geometry, and is not
 *        part of the filled-in fluid content.
 * - Neck: Part of the main bottle, where the threads around the cap would go (up to the lip)
 * - Lip: The protrusion from the neck (before the taper) with rounded corners on each side
 * - Taper: The parametric surface going from the lip base and expanding to the full radius. Will have a rounded corner
 *          going from the taper down to the slightly-smaller body radius
 * - Body: The cylindrical part in the middle.
 * - Base: The complicated surface at the base of the bottle, not including the rounded corner between it and the body.
 *         It's composed of the combination of two curves (depending on the angle around the base) by the saddle and tip
 *         curves.
 * - Saddle curve: The curve that is the most "rounded" form of the bottle, in-between the "legs" the bottle stands on.
 * - Tip curve: The curve that takes on the shape of the "leg" the bottle will stand on, that is the furthest.
 *              This will be made of two curves, one going from the full radius to the tip (first curve), and one from
 *              the tip to the saddle point (second curve).
 * - Saddle point: The true mathematical saddle where the saddle/tip curves meet back up, at r=0
 *
 * Diagram in x,r coordinates, showing the "profile" (exactly half of the bottle, and the curves that the
 * three-dimensional form will be made from):
 *
 *                                                    +---+base+----+
 *
 *                           XXX\       body         /XXXXXXXXX
 *                        XXX   +--------------------+  XXX    XXX first tip curve
 *         lip     taper X                                 XX     XX
 *   cap   /-\          X                                    X      X <- tip
 * /-----+ | |         X                               saddle X    X
 * |     | | |       XX                                curve   X  X second tip curve
 * |     | | |    XXX                                           XX
 * + +-----+ +XXXX                                              X <- saddle point
 *   neck ^
 *        |
 *       gap
 *
 * Coordinate frame for this "non-scaled" version:
 *
 *   r
 *   ^
 *   |
 *   |
 *   +-----> x
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import StrictOmit from '../../../../phet-core/js/types/StrictOmit.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Property from '../../../../axon/js/Property.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Range from '../../../../dot/js/Range.js';
import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector3 from '../../../../dot/js/Vector3.js';
import { Shape } from '../../../../kite/js/imports.js';
import ThreeUtils from '../../../../mobius/js/ThreeUtils.js';
import optionize, { EmptySelfOptions } from '../../../../phet-core/js/optionize.js';
import Mass, { InstrumentedMassOptions } from '../../common/model/Mass.js';
import Material from '../../common/model/Material.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';
import PhysicsEngine from '../../common/model/PhysicsEngine.js';
import Ray3 from '../../../../dot/js/Ray3.js';
import Multilink from '../../../../axon/js/Multilink.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import { MassShape } from '../../common/model/MassShape.js';
import ReadOnlyProperty from '../../../../axon/js/ReadOnlyProperty.js';

// constants (in logical coordinates)
const BODY_CORNER_RADIUS = 0.02; // Used both between the taper/body and between the body/base
const CAP_CORNER_RADIUS = 0.03; // Used just at the top of the cap on the left
const LIP_CORNER_RADIUS = 0.02; // Used at the start and end of the lip
const CAP_RADIUS = 0.23;
const LIP_RADIUS = 0.285;
const NECK_RADIUS = 0.187;
const FULL_RADIUS = 0.85; // The largest extent of the bottle from the center-line
const BASE_TIP_RADIUS = 0.6; // Where the first and second tip curves join
const BODY_RADIUS = FULL_RADIUS - BODY_CORNER_RADIUS;
const CAP_LENGTH = 0.28;
const GAP_LENGTH = 0.03;
const LIP_LENGTH = LIP_CORNER_RADIUS * 2;
const TAPER_LENGTH = 1.35;
const BODY_LENGTH = 2.25;
const BASE_SADDLE_LENGTH = 0.7;
const BASE_TIP_LENGTH = 0.85;
const CAP_BODY_LENGTH = CAP_LENGTH - CAP_CORNER_RADIUS;
const CORNER_SEGMENTS = 8;
const TAPER_SEGMENTS = 20;
const BASE_SEGMENTS = 20;

// x positions in logical space
const LIP_START = CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH;
const LIP_END = LIP_START + LIP_LENGTH;
const TAPER_START = CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH + LIP_LENGTH;
const TAPER_END = TAPER_START + TAPER_LENGTH;
const BODY_START = TAPER_END + BODY_CORNER_RADIUS;
const BODY_END = BODY_START + BODY_LENGTH;
const BASE_START = CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH + LIP_LENGTH + TAPER_LENGTH + BODY_CORNER_RADIUS + BODY_LENGTH + BODY_CORNER_RADIUS;
const BASE_SADDLE = BASE_START + BASE_SADDLE_LENGTH;
const BASE_TIP = BASE_START + BASE_TIP_LENGTH;

// Controls the precision used for generated cross-sections (multiplies how many subdivisions are included by default)
const CROSS_SECTION_PRECISION = 1;

// {Array.<Vector2>} - Each vector is (x,r), control nets for the cubics for base/taper curves
const BASE_SADDLE_CONTROL_POINTS = [
  new Vector2( BASE_START, FULL_RADIUS ),
  new Vector2( BASE_START + 0.5 * ( BASE_SADDLE - BASE_START ), FULL_RADIUS ),
  new Vector2( BASE_SADDLE, 0.5 * FULL_RADIUS ),
  new Vector2( BASE_SADDLE, 0 )
];
const BASE_FIRST_TIP_CONTROL_POINTS = [
  new Vector2( BASE_START, FULL_RADIUS ),
  new Vector2( BASE_START + 0.5 * ( BASE_TIP - BASE_START ), FULL_RADIUS ),
  new Vector2( BASE_TIP, FULL_RADIUS + 0.4 * ( BASE_TIP_RADIUS - FULL_RADIUS ) ),
  new Vector2( BASE_TIP, BASE_TIP_RADIUS )
];
const BASE_SECOND_TIP_CONTROL_POINTS = [
  new Vector2( BASE_TIP, BASE_TIP_RADIUS ),
  new Vector2( BASE_TIP, 0.5 * BASE_TIP_RADIUS ),
  new Vector2( BASE_SADDLE, 0.7 * BASE_TIP_RADIUS ),
  new Vector2( BASE_SADDLE, 0 )
];
const TAPER_CONTROL_POINTS = [
  new Vector2( TAPER_START, NECK_RADIUS ),
  new Vector2( TAPER_START + 0.4 * ( TAPER_END - TAPER_START ), NECK_RADIUS ),
  new Vector2( TAPER_START + 0.2 * ( TAPER_END - TAPER_START ), FULL_RADIUS ),
  new Vector2( TAPER_END, FULL_RADIUS )
];

// NOTE: machine generated by copy( phet.densityBuoyancyCommon.Bottle.computeBottleData() );
// If any parameters about the bottle shape changes, this should be recomputed.
const MAX_CROSS_SECTION_VERTEX_COUNT = 840;
const TEN_LITER_SCALE_MULTIPLIER = 0.08495233866810234;
const TEN_LITER_INTERSECTION_CENTROID = new Vector2( 2.6705419248600877, -0.004634939286311409 );
const TEN_LITER_DISPLACED_AREAS = [ 0, 0.00025015203773057215, 0.0004973150291031281, 0.000742059264326629, 0.0009845032809382985, 0.001224728087493813, 0.0014627481632757233, 0.0016986141325263746, 0.0019322662011888227, 0.002163706738069064, 0.00239289668074375, 0.002619800459832798, 0.004560053842730774, 0.00691937582234066, 0.008456052840956699, 0.009716018531186114, 0.010821348059463744, 0.011823913488637155, 0.01275156683488878, 0.013621293401280245, 0.014444362529410115, 0.015228697656775446, 0.015980187455085854, 0.01670327961950427, 0.017401407295167707, 0.018077395757931096, 0.018733467589735434, 0.01937158390969812, 0.019993224071760202, 0.020599808659366302, 0.021192413876576024, 0.021772079403388437, 0.022339673807217107, 0.022895945855676038, 0.023441543426463287, 0.023977093498765933, 0.024503140905830098, 0.025020165200653473, 0.02552857921412517, 0.026028810300843464, 0.026521191140041058, 0.027006071673820017, 0.02748375702559898, 0.02795452123681206, 0.028418595343271177, 0.028876286117941734, 0.029327746119703037, 0.02977321132266258, 0.03021288097225422, 0.030646937217529882, 0.03107554821527034, 0.03149886811369499, 0.031917021926227356, 0.03233021817392043, 0.032738521687732655, 0.033142104248752025, 0.03354108164924628, 0.0339355520583308, 0.034325633821135224, 0.03471143084210756, 0.03509302672108759, 0.03547056751606983, 0.03584410845565918, 0.036213717203818274, 0.03657953530593309, 0.036941585204088995, 0.03729998887823804, 0.037654802433843164, 0.03800609384128815, 0.03835394050814545, 0.03869841227356632, 0.03903957544476858, 0.039377493475548114, 0.03971222707731951, 0.04004383352293498, 0.04037235419646785, 0.040697894483105596, 0.04102047337263005, 0.041340133219099025, 0.04165696681127013, 0.0419709803559656, 0.042282264332110873, 0.04259083588671785, 0.04289674779994161, 0.04320006962707407, 0.043500823849980504, 0.04379905520169492, 0.04409481080125752, 0.04438813395541838, 0.044679066356857255, 0.044967648480741175, 0.04525391971934652, 0.04553791841292576, 0.045819681745716836, 0.0460992450760108, 0.0463766342775373, 0.04665191886364413, 0.04692511078876393, 0.04719623887751565, 0.047465344203987715, 0.04773247012416714, 0.047997622874978926, 0.04826087201860853, 0.04852220788705579, 0.048781703594666284, 0.049039348816378364, 0.0492952091494292, 0.049549285152750255, 0.049801613060538395, 0.050052245961746226, 0.05030117705775572, 0.050548445720737856, 0.0507940913894896, 0.051038129319483844, 0.05128058226634039, 0.0515214792222056, 0.051760846181959974, 0.05199870825051773, 0.0522350899328096, 0.05247001522610632, 0.05270351323589815, 0.05293559731133411, 0.05316629158076688, 0.053395616634732655, 0.05362360436983312, 0.05385027056337325, 0.05407563627103441, 0.05429972214773554, 0.05452254842782816, 0.054744134856600984, 0.05496450038237766, 0.055183656405421166, 0.05540164453942505, 0.05561846947988434, 0.05583414892676443, 0.05604869765692469, 0.056262138684616776, 0.05647449458878816, 0.056685773641264356, 0.05689598938472586, 0.057105174258835656, 0.05731333084656811, 0.057520474031353415, 0.057726631933264355, 0.05793180055942196, 0.058136018944470735, 0.058339284622011905, 0.058541611751392664, 0.05874303921038858, 0.05894359659307898, 0.05914333095211987, 0.059342251044556905, 0.05954039804089487, 0.059737775678965314, 0.059934421408891825, 0.06013033761135149, 0.06032555737630148, 0.06052008419419944, 0.06071394498234319, 0.0609071478962275, 0.0610997068186819, 0.061291648804845146, 0.06148296930331185, 0.061673695901575905, 0.06186382980685207, 0.06205338512590534, 0.06224238350791798, 0.06243082025648696, 0.06261871538144838, 0.06280607636003915, 0.06299290823537601, 0.06317922787904677, 0.06336503682108031, 0.06355034325296526, 0.06373516090206784, 0.06391949091504226, 0.06410333995388787, 0.06428671573881217, 0.06446963176546043, 0.06465208113788536, 0.06483407425866254, 0.06501562227665415, 0.06519672036403584, 0.06537737598199204, 0.06555759746075901, 0.0657373842481443, 0.0659167390955192, 0.06609566650826046, 0.06627417530760528, 0.066452257673182, 0.0666299210322755, 0.066807167281548, 0.06698400349562898, 0.06716042236893158, 0.0673364288777843, 0.06751202593698839, 0.06768721562096167, 0.06786199344155634, 0.06803636268013262, 0.06821032937500716, 0.06838388233673429, 0.06855702862401385, 0.06872976687170683, 0.06890210197582873, 0.06907402280426399, 0.06924553496198498, 0.06941663681093743, 0.06958733151233568, 0.06975761017420717, 0.06992747504671173, 0.07009693011860171, 0.07026596225099109, 0.07043457755556082, 0.07060277758814353, 0.07077055003647394, 0.07093789982952318, 0.07110482362016184, 0.0712713227415297, 0.07143738812262902, 0.07160302061667463, 0.07176822114108265, 0.07193298064474714, 0.07209730280761002, 0.07226117870801595, 0.07242460871664247, 0.07258759523605966, 0.07275012275325946, 0.0729121978957848, 0.07307381846088422, 0.07323497557743124, 0.07339567425022678, 0.0735558986759063, 0.07371565555906127, 0.07387494222642263, 0.0740337498571053, 0.0741920808298642, 0.07434992640367473, 0.07450728880196231, 0.0746641594033115, 0.07482054030463355, 0.07497642296999311, 0.07513180945700602, 0.07528669126905065, 0.07544107047631944, 0.0755949386612249, 0.0757482978560578, 0.07590114440904593, 0.07605346652560034, 0.07620527245105788, 0.07635655461201937, 0.0765073072670665, 0.07665753289401972, 0.07680722510478581, 0.07695638125005215, 0.07710500106834409, 0.07725308225208068, 0.07740061364976486, 0.07754760397053564, 0.07769404625491783, 0.0778399388184487, 0.07798527874933188, 0.07813005983318982, 0.07827428805844582, 0.07841795782837939, 0.07856106738051233, 0.07870361507393343, 0.07884559939508423, 0.07898701896321754, 0.0791278725321921, 0.07926815898668595, 0.07940787733527246, 0.07954702670950671, 0.0796856063707364, 0.079823615717006, 0.0799610542845714, 0.08009792174493857, 0.08023421790035995, 0.08036994690253788, 0.08050509924680595, 0.08063968183570448, 0.08077369348932666, 0.08090713864483277, 0.0810400093735953, 0.08117231157267012, 0.08130404817889099, 0.08143521446913173, 0.08156581731379742, 0.08169585005958263, 0.08182532198327608, 0.08195422614933913, 0.08208257083391259, 0.08221035124841206, 0.08233757435520689, 0.08246423781580553, 0.08259034025504162, 0.08271588918334426, 0.08284088220622314, 0.08296532044630162, 0.08308920505782318, 0.0832125376821772, 0.08333531780408024, 0.08345754877418457, 0.08357923160892071, 0.08370036513481341, 0.0838209515290249, 0.08394099095921541, 0.08406048416110602, 0.08417943177241895, 0.0842978392389168, 0.08441569895234599, 0.08453301735137692, 0.08464979194507481, 0.08476602470288805, 0.08488171459270831, 0.08499686485376709, 0.08511146915975079, 0.08522553728018359, 0.08533906395534338, 0.08545204949040597, 0.08556449419114624, 0.08567639830669714, 0.08578776193635812, 0.08589858502090393, 0.08600886742033816, 0.08611861322023431, 0.08622781733014777, 0.08633647916638379, 0.08644460704594702, 0.0865521891534031, 0.0866592385131697, 0.08676574796498539, 0.08687171818588607, 0.08697715014546491, 0.0870932559071308, 0.08720864159523783, 0.08732305990626762, 0.08743649980862797, 0.08754895958862637, 0.08766041782971111, 0.08777087306210353, 0.08788030551974864, 0.08798869829987135, 0.08809604497757209, 0.08820232405096175, 0.08830750911539086, 0.08841168215103234, 0.08851498442434612, 0.08861747646448064, 0.08871921298460561, 0.08882022251967592, 0.08892053302005862, 0.08902016679753035, 0.08911915310029746, 0.08921749419810153, 0.08931521775569924, 0.08941233443005711, 0.08950886075949253, 0.08960480612056959, 0.08970018415580472, 0.08979500607572599, 0.08988928887364331, 0.08998303895695896, 0.09007627558047487, 0.09016900662817787, 0.09026124576142021, 0.09035301132117407, 0.09044431371755324, 0.09053516951045244, 0.0906255975648708, 0.09071561273717145, 0.09080523450943748, 0.09089448849673094, 0.09098338871111636, 0.09107197327592033, 0.0911602564917963, 0.09124828724568387, 0.09133608284673127, 0.091423702173737, 0.0915111820011477, 0.09159857888240022, 0.0916859644719922, 0.09177341722559561, 0.09186103335570082, 0.09194895119805263, 0.09203733020056833, 0.09212639329812516, 0.0922164825114805, 0.09230810914819475, 0.09240223554270846, 0.09250120181616381, 0.09274158908376383, 0.09295416311310042, 0.09312087139052273, 0.09326846788584855, 0.0934043134499268, 0.09353177002295, 0.09365272419191262, 0.09376836682543631, 0.09387950989047847, 0.093986738121056, 0.09409049016560841, 0.09419110567053288, 0.09428885434725162, 0.09438395481960483, 0.09447658734194046, 0.0945669026697561, 0.09465502842171888, 0.09474107375246008, 0.09482513285620246, 0.09490728764137402, 0.09498760980494486, 0.09506616246402062, 0.09514300145536282, 0.09521817638218871, 0.09529173146603313, 0.09536370624640896, 0.09543413616037259, 0.095503053026318, 0.09557048545077515, 0.09563645917271679, 0.09570099735685007, 0.09576412084488642, 0.09582584837206753, 0.0958861967547333, 0.09594518105378058, 0.09600281471773973, 0.09605910970875409, 0.0961140766141044, 0.09616772474549456, 0.09622006222789733, 0.0962710960797152, 0.09632083228550065, 0.09636927586218377, 0.09641643091997025, 0.09646230071855015, 0.09650688771981059, 0.09655019363687842, 0.09659221948028951, 0.09663296560180736, 0.09667243173648479, 0.09671061704233526, 0.09674752013846209, 0.09678313914244654, 0.09681747170568018, 0.09685051504776276, 0.09688226599061206, 0.09691272099055054, 0.09694187617059279, 0.09696972735169983, 0.09699627008296795, 0.09702149967240753, 0.09704541121577796, 0.09706799962658622, 0.09708925966427644, 0.09710918596345168, 0.09712777306173016, 0.09714501542845316, 0.09716090749229629, 0.09717544366982978, 0.09718861839291308, 0.09720042613741312, 0.09721086145052418, 0.09721991897974007, 0.09722759350052042, 0.09723387994523641, 0.09723877343193026, 0.09724226929300171, 0.09724436310516536, 0.09724505071868886, 0.09724432828771636, 0.09724219230121918, 0.09723863961370167, 0.09723366747716468, 0.09722727357378173, 0.09721945604868983, 0.09721021354408037, 0.09719954523420084, 0.09718745086126503, 0.09717393077232148, 0.09715898595766166, 0.097142618090676, 0.09712482956933967, 0.09710562355928298, 0.09708500403948661, 0.09706297585025626, 0.09703954474422329, 0.09701471744095976, 0.09698850168560297, 0.0969609063127274, 0.09693194131658152, 0.09690161792936096, 0.0968699487094612, 0.09683694764361213, 0.09680263026641768, 0.09676701380631537, 0.09673011736689174, 0.09669196216238708, 0.09665257181921723, 0.09661197274325573, 0.0965701950713808, 0.09652727704116776, 0.09648326462502574, 0.0964381978750604, 0.09639211023427441, 0.0963450327490473, 0.0962969948569113, 0.09624802471277319, 0.0961981493825508, 0.09614739502376365, 0.09609578701067294, 0.09604335001209899, 0.0959901080620161, 0.09593608461434425, 0.09588130258108847, 0.09582578436406172, 0.09576955188049491, 0.09571262658370758, 0.09565502947985592, 0.09559678114132697, 0.09553790171749736, 0.09547841094332836, 0.09541832814613667, 0.09535767225104361, 0.09529646178515856, 0.09523471488072534, 0.09517244927417895, 0.09510968230954132, 0.09504643093945274, 0.09498271172390041, 0.09491854082554874, 0.0948539340136901, 0.09478890665969382, 0.09472347373118484, 0.09465764979587499, 0.09459144901009862, 0.0945248851218027, 0.09445797146091846, 0.09439072093890517, 0.09432314603957352, 0.09425525881843039, 0.09418707089118394, 0.09411859343359016, 0.09404983716979042, 0.09398081236806322, 0.09391152883394319, 0.09384199589969205, 0.09377222241826758, 0.09370221675465916, 0.09363198677513879, 0.0935615398380214, 0.09349088278362269, 0.09342002192308796, 0.09334896302620163, 0.09327771130867657, 0.09320627141896747, 0.09313464742395215, 0.0930628427934444, 0.09299086038355493, 0.09291870241905285, 0.09284637047407512, 0.09277386545148933, 0.09270118756058685, 0.09262833629271947, 0.09255531039497397, 0.0924821078414981, 0.09240872580207907, 0.09233516060783903, 0.0922614077135963, 0.09218746165646163, 0.09211331601011986, 0.09203896333434335, 0.09196439511896098, 0.0918896017213738, 0.0918145722971806, 0.0917392947223866, 0.09166375550611068, 0.09158793969201545, 0.091511830746909, 0.09143541043479823, 0.09135865867306073, 0.09128155336737581, 0.09120407022294934, 0.09112618252632569, 0.09104786089139136, 0.09096907296432138, 0.09088978307665667, 0.0908099518355311, 0.09072953563780267, 0.09064848608690443, 0.09056674929108745, 0.09048426500797209, 0.09040096559549697, 0.09031677470887758, 0.09023160566676962, 0.09014535937346643, 0.09005792164208426, 0.08996915968777212, 0.08987891745244124, 0.08978700924019564, 0.08969321084392028, 0.0895972468250468, 0.08949877166373721, 0.08939734068950585, 0.08929236299566125, 0.08918302028980349, 0.08906811522313886, 0.08894575457205359, 0.08881256960165289, 0.0886611925064335, 0.08846486220059675, 0.08824162391930082, 0.08816070445231182, 0.08808551507647484, 0.08801370789656063, 0.08794431263633842, 0.08787680987795454, 0.08781084932118735, 0.0877461995811539, 0.08768269258938793, 0.08762018121786654, 0.08755856029015273, 0.08749774221437152, 0.08743764602761038, 0.0873782056957269, 0.08731937479158483, 0.08726108461185429, 0.08720330785190734, 0.08714598545854786, 0.08708909279559744, 0.08703258123537784, 0.08697642609431247, 0.08692059092002907, 0.08686504522864953, 0.08680976299972915, 0.08675471404370555, 0.0866998703176493, 0.0866452097725583, 0.08659070227516671, 0.0865363222211244, 0.08648204963558268, 0.08642785302821149, 0.08637371361471331, 0.08631960188688644, 0.08626549398497102, 0.08621136348668594, 0.08615718810913797, 0.08610293828530195, 0.08604859021144004, 0.08599410296246224, 0.08593946089938408, 0.08588462130067331, 0.08582954828215679, 0.08577420022712934, 0.08571853484569482, 0.0856624835866164, 0.08560597200517461, 0.08554884484765742, 0.08549100608087587, 0.08543246799676925, 0.08537323793103349, 0.0853133080952397, 0.08525268113815994, 0.08519136253782658, 0.08512933944855593, 0.08506661895085728, 0.08500318840882468, 0.08493904449801067, 0.08487442016645184, 0.08482069494236084, 0.08476664243041504, 0.0847122473519417, 0.08465749475166319, 0.08460237754988133, 0.08454686852865766, 0.08449096536409643, 0.0844346456623073, 0.08437789600047729, 0.08432070754135525, 0.08426306235844847, 0.08420494684615407, 0.08414634742151439, 0.08408725045474125, 0.08402764228623158, 0.08396750932780347, 0.0839068381279581, 0.0838456209441655, 0.08378383515639887, 0.0837214743997064, 0.08365852291008262, 0.08359496936827697, 0.08353079963350525, 0.08346600421155753, 0.08340056487054524, 0.08333447762267136, 0.08326772562798372, 0.08320029706053061, 0.08313218020579717, 0.08306336412955359, 0.08299383610237737, 0.08292358696111048, 0.0828526055688835, 0.08278087867057338, 0.08270839709192332, 0.08263514971508189, 0.08256112611976242, 0.08248631612427793, 0.08241071326682853, 0.08233430137848939, 0.08225707336809403, 0.08217902329366346, 0.08210013609132222, 0.08202040861973664, 0.08193982483654283, 0.08185838406658337, 0.081776069569355, 0.08169288067273672, 0.08160880331039846, 0.08152383513017403, 0.08143796623180882, 0.08135118385805881, 0.08126348917219171, 0.0811748710583965, 0.08108532409686302, 0.08099483485693156, 0.08090340637984553, 0.08081102810879193, 0.08071769388886264, 0.08062339774305315, 0.0805281338720252, 0.08043189665291031, 0.08033468063414864, 0.0802364805256167, 0.08013729118931028, 0.08003710763819108, 0.07993592504178913, 0.0798337387288074, 0.07973054418492964, 0.0796263370469963, 0.07952111309761117, 0.07941487197819798, 0.07930760177047658, 0.07919930278552963, 0.07908997205973577, 0.07897960543148827, 0.0788682040452559, 0.07875575340977733, 0.07864225892925031, 0.07852771720081039, 0.07841212281441576, 0.07829547278894326, 0.07817776792533887, 0.07805900020411922, 0.07793916987259118, 0.07781827905997779, 0.07769631412868373, 0.0775732815352341, 0.07744917964947229, 0.07732400121558056, 0.07719774948784214, 0.0770704172950224, 0.07694200809688735, 0.07681251486500365, 0.0766819412323085, 0.07655028026847237, 0.07641753583275991, 0.07628370101251981, 0.07614877993406785, 0.07601276567987543, 0.07587566260968069, 0.07573746901446625, 0.07559817388776238, 0.07545778881264387, 0.0753163046470965, 0.07517372620924162, 0.07503005173429851, 0.07488527071386947, 0.07473939486795586, 0.07459241808996794, 0.0744443363952855, 0.07429515518277716, 0.07414486734207934, 0.07399347858706612, 0.07384098475760953, 0.07368738185309824, 0.07353267589364303, 0.07337686259275249, 0.07321994244277583, 0.07306190775960959, 0.07290276820116247, 0.07274251965922779, 0.07258115357292001, 0.07241868073639834, 0.0722550949220496, 0.07209039174822382, 0.0719245780842184, 0.07175764885665373, 0.07158960390364938, 0.07142043593433355, 0.07125015451085591, 0.0710787532853346, 0.07090623229111778, 0.07073258326018932, 0.07055781629753799, 0.07038192440774901, 0.07020490348241859, 0.0700267573155711, 0.06984748327446515, 0.06966707802504517, 0.06948553631398925, 0.0693028653157158, 0.06911905797392612, 0.06893411256361824, 0.0687480219866534, 0.06856079455427823, 0.06837242210246425, 0.06818290095412785, 0.06799222936236907, 0.06780040906533885, 0.06760743310591563, 0.06741329558912808, 0.06721800310844728, 0.06702154648672859, 0.06682391750632861, 0.06662512546880914, 0.06642515951281701, 0.06622401478963223, 0.06602168775498396, 0.06581818063588712, 0.0656134833449511, 0.0654075916080871, 0.06520050810208865, 0.06499222046454298, 0.06478272847787364, 0.06457202982201352, 0.0643601099925837, 0.06414697955804788, 0.06393262312811014, 0.06371703326421382, 0.06350021586187764, 0.06328215089935357, 0.06306285098929913, 0.06284229767089376, 0.0626204862326151, 0.06239741831953336, 0.062173077507514767, 0.06194747157052701, 0.06172057955471161, 0.06149241222031282, 0.061262946447968814, 0.06103219429518903, 0.06080013230036857, 0.06056677218846168, 0.06033209249204848, 0.060096102352992994, 0.05985878688682251, 0.05962014204353381, 0.05938018048977609, 0.05913887350863544, 0.05889623552822963, 0.058652248981275384, 0.05840690965473292, 0.058160225753680614, 0.05791217574423968, 0.05766275710731995, 0.05741197271258184, 0.05715981124054189, 0.05690626105449391, 0.056651318873300674, 0.05639497861099859, 0.056137247304485154, 0.055878095190952444, 0.05561752283962579, 0.055355523390378435, 0.05509208930493532, 0.054827212674871964, 0.05456088529021406, 0.0542930986593264, 0.05402384968814348, 0.053753119282569053, 0.05348089977390346, 0.05320718007501947, 0.052931959997424005, 0.05265522371573687, 0.05237696063226783, 0.052097159761126444, 0.05181580963587329, 0.05153289801948837, 0.051248409797002174, 0.050962336209186686, 0.05067467611605489, 0.05038540431323345, 0.05009449578172923, 0.04980197179187019, 0.04950779384469129, 0.04921194041396667, 0.04891442576638418, 0.048615199247594464, 0.048314286242391265, 0.048011628812534096, 0.04770725191797385, 0.04740110140374539, 0.0470931865547764, 0.04678347965086946, 0.04647195536690821, 0.04615860073960137, 0.045843419787307306, 0.04552635907997468, 0.04520740893664414, 0.04488655030019863, 0.04456376239483663, 0.04423902339483754, 0.043912310527326075, 0.043583600040148815, 0.04325286706594622, 0.04292008522426184, 0.0425852244219446, 0.042248257050038436, 0.04190917784749806, 0.04156793457512458, 0.04122449186262404, 0.040878850065076903, 0.04053093629631956, 0.040180762031375564, 0.039828252250799036, 0.03947338245567185, 0.0391161515955163, 0.038756472306928615, 0.03839432130839146, 0.03802965950865699, 0.03766244445521056, 0.03729263102869827, 0.03692017133009509, 0.03654501400040634, 0.03616710018235872, 0.03578638052419555, 0.035402817605563075, 0.03501630819625748, 0.034626848666715185, 0.03423431634498376, 0.033838662499560176, 0.03343985089144331, 0.03303775450749593, 0.032632308846085624, 0.03222342915241996, 0.03181101628056694, 0.031394991308230764, 0.03097525773567444, 0.030551663118123785, 0.030124162002800905, 0.029692565286762892, 0.02925676741269416, 0.028816633724547455, 0.028372015591825336, 0.027922750423923483, 0.02746865856405559, 0.027009523654983915, 0.02654521278093606, 0.02607543883627525, 0.02559999047470897, 0.025118613364448178, 0.024631022109743942, 0.02413688651204096, 0.023635893649327562, 0.02312763593562739, 0.022611720317723023, 0.022087687026880243, 0.021555011018131086, 0.021013085101860292, 0.020461281188330013, 0.019898870293164925, 0.019325003624091452, 0.018738661264476025, 0.01813878675778835, 0.01752397924777557, 0.01689277908229113, 0.016243244812902038, 0.015573173490713844, 0.014879759427768747, 0.014159589012953007, 0.013408234021034587, 0.012619825174064517, 0.011786458337737392, 0.010896883365747888, 0.009934134021374916, 0.008870377199971547, 0.007653759563324377, 0.006162224442382122, 0.0038498564232397874, 0.0019583869370225467, 0.00178211443111276, 0.0016054200268707317, 0.0014283554671418995, 0.0012509750387541476, 0.001073290301067111, 0.0008953731375871297, 0.0007171822677434004, 0.000538708142287985, 0.00035986672686081744, 0.00018051881776684977, 0 ];
const TEN_LITER_DISPLACED_VOLUMES = [ 0, 3.6126701067265914e-8, 1.079484281883463e-7, 2.1511586707764002e-7, 3.5729682251925805e-7, 5.341707984699479e-7, 7.454193899696125e-7, 9.907315031593817e-7, 0.0000012697874087839264, 0.0000015822677196884531, 0.0000019278474073629986, 0.000002306196306404161, 0.0000029647546116713195, 0.000003964043780664637, 0.000005185258270723185, 0.000006588435715226882, 0.000008151243718054942, 0.000009858841193272322, 0.000011700409414593226, 0.000013667582655802576, 0.00001575362269745618, 0.00001795293561483747, 0.000020260777919166634, 0.000022673048453243667, 0.000025186141871172812, 0.000027796860850503447, 0.000030502329051792355, 0.000033299953358410554, 0.00003618735430050998, 0.00003916235756744859, 0.000042222944272872307, 0.000045367245679947606, 0.0000485935184894572, 0.00005190012753843567, 0.000055285531229751164, 0.000058748278513963825, 0.00006228699702589315, 0.00006590038365691138, 0.00006958719491900491, 0.00007334624904227348, 0.0000771764123020109, 0.00008107660151179089, 0.00008504577755079878, 0.00008908294087500312, 0.00009318712530632779, 0.00009735740897053408, 0.00010159289202578042, 0.0001058927087093641, 0.0001102560220334039, 0.00011468202131579814, 0.00011916992015947514, 0.0001237189544292912, 0.0001283283780444132, 0.0001329974750384049, 0.00013772553880765068, 0.0001425118875569837, 0.00014735585621383781, 0.00015225679388312997, 0.00015721406676105957, 0.0001622270560495999, 0.00016729515502412752, 0.00017241777805356495, 0.00017759434748289323, 0.00018282429542905364, 0.0001881070744508271, 0.00019344214034805744, 0.00019882896653680834, 0.0002042670345358369, 0.00020975583568011343, 0.00021529487248373062, 0.00022088365754687977, 0.00022652171304577272, 0.0002322085703205535, 0.00023794376947924644, 0.00024372685890116256, 0.00024955739294225834, 0.00025543494117811105, 0.0002613590759267829, 0.0002673293756230656, 0.0002733454321022084, 0.0002794068380958432, 0.0002855131994024759, 0.00029166412429696613, 0.00029785922867662953, 0.0003040981384838857, 0.00031038048290796223, 0.0003167058975983856, 0.000323074025009566, 0.00032948451385022984, 0.00033593701885031786, 0.00034243120058515285, 0.0003489667253190498, 0.0003555432648533838, 0.00036216049635963936, 0.00036881810211570926, 0.00037551576813614376, 0.00038225319047453967, 0.00038903006691094066, 0.0003958460993882124, 0.00040270099578109823, 0.0004095944702257689, 0.00041652623775912534, 0.00042349602346416804, 0.0004305035510276549, 0.00043754855469544274, 0.00044463076722225345, 0.00045174993083629475, 0.00045890578784649476, 0.0004660980857946871, 0.0004733265798897575, 0.0004805910243587424, 0.0004878911791147667, 0.0004952268097666661, 0.0005025976841264559, 0.0005100035732924949, 0.0005174442525501578, 0.0005249195009389735, 0.0005324291011240966, 0.000539972839309659, 0.0005475505051654537, 0.0005551618925646589, 0.0005628067973083231, 0.0005704850186820869, 0.000578196358945255, 0.0005859406249636067, 0.0005937176258814633, 0.0006015271738839863, 0.0006093690841392994, 0.0006172431747377505, 0.0006251492666212819, 0.0006330871834683335, 0.0006410567506037593, 0.0006490577993622205, 0.0006570901617564968, 0.0006651536723555788, 0.000673248167862516, 0.0006813734883040524, 0.0006895294769677608, 0.0006977159783358221, 0.0007059328388462376, 0.0007141799096219115, 0.0007224570421587784, 0.0007307640901022227, 0.0007391009111587008, 0.0007474673624580216, 0.0007558633067673376, 0.0007642886064976064, 0.0007727431261046638, 0.0007812267356590345, 0.0007897393095051896, 0.0007982807287828967, 0.0008068508758966068, 0.000815449639196573, 0.0008240769075728626, 0.0008327325753240511, 0.0008414165370925288, 0.0008501286922995039, 0.000858868940870273, 0.0008676371866175012, 0.0008764333345316616, 0.0008852572916081717, 0.0008941089687497242, 0.0009029882762017025, 0.0009118951281936478, 0.0009208294391294456, 0.0009297911254502663, 0.0009387801067238331, 0.0009477963018396192, 0.0009568396325768979, 0.0009659100217947976, 0.0009750073930807682, 0.0009841316724588372, 0.0009932827861739973, 0.0010024606616542474, 0.0010116652283100789, 0.0010208964157175813, 0.001030154154414964, 0.0010394383760553801, 0.0010487490142410104, 0.00105808600157813, 0.001067449272175343, 0.0010768387617513615, 0.0010862544053276673, 0.0010956961390032791, 0.00110516390008026, 0.001114657625780926, 0.001124177253724943, 0.0011337227221826394, 0.0011432939706982968, 0.0011528909376867875, 0.0011625135626356243, 0.001172161785306234, 0.0011818355464817542, 0.0011915347858902571, 0.0012012594439784914, 0.0012110094616141582, 0.001220784779964544, 0.0012305853395487615, 0.001240411081359814, 0.0012502619472627523, 0.001260137877506659, 0.0012700388133600274, 0.0012799646958941977, 0.0012899154668875887, 0.00129989106651093, 0.0013098914357444157, 0.0013199165153316736, 0.001329966246472871, 0.0013400405690840052, 0.0013501394234060402, 0.001360262750255991, 0.0013704104885533675, 0.0013805825781003235, 0.0013907789589237037, 0.0014009995692722287, 0.0014112443481064554, 0.001421513233903552, 0.0014318061653332175, 0.0014421230797551266, 0.0014524639146521743, 0.001462828607639748, 0.0014732170950260835, 0.0014836293136508704, 0.0014940651990653418, 0.0015045246868742636, 0.0015150077130293782, 0.0015255142112420557, 0.001536044116180809, 0.0015465973621960317, 0.0015571738823569588, 0.001567773610455613, 0.001578396478001712, 0.0015890424174732428, 0.0015997113609621221, 0.0016104032392863638, 0.0016211179836075186, 0.0016318555238247674, 0.0016426157901583962, 0.001653398711583595, 0.0016642042173783873, 0.001675032235588046, 0.0016858826945550021, 0.0016967555213946138, 0.0017076506435212142, 0.001718567987133477, 0.0017295074787235772, 0.0017404690442563047, 0.0017514526079930868, 0.001762458095386134, 0.0017734854307939146, 0.0017845345377457266, 0.0017956053401287123, 0.0018066977609074526, 0.001817811722663917, 0.001828947147942313, 0.00184010395895359, 0.0018512820762982094, 0.0018624814218343975, 0.0018737019164153006, 0.0018849434806507963, 0.0018962060347302437, 0.0019074894979455278, 0.0019187937904533755, 0.0019301188316022413, 0.001941464540486044, 0.001952830835961724, 0.001964217636667635, 0.001975624861042725, 0.001987052427345975, 0.001998500253675293, 0.0020099682579854047, 0.002021456358105618, 0.002032964471758564, 0.00204449251657994, 0.0020560404101384704, 0.0020676080699554384, 0.0020791954135235694, 0.0020908023589351725, 0.002102428822909903, 0.002114074723164274, 0.002125739977244398, 0.002137424503337197, 0.002149128218484549, 0.002160851040579979, 0.0021725928879411465, 0.0021843536782036018, 0.002196133329995112, 0.00220793176098258, 0.002219748890172655, 0.0022315846355703602, 0.002243438916375953, 0.0022553116510981267, 0.0022672027592510738, 0.0022791121600112636, 0.0022910397723565658, 0.0023029855163494983, 0.002314949311706769, 0.0023269310783072144, 0.002338930736196365, 0.0023509482056567996, 0.00236298340689668, 0.002375036260608066, 0.0023871066876298094, 0.0023991946086312894, 0.002411299944596309, 0.002423422616532885, 0.002435562545555285, 0.002447719652869877, 0.0024598938604695007, 0.002472085089248218, 0.0024842932610299583, 0.0024965182972789125, 0.002508760119743697, 0.002521018650023872, 0.002533293810186805, 0.002545585521386223, 0.0025578937061867583, 0.0025702182863934385, 0.0025825591838553657, 0.0025949163204658007, 0.002607289618153984, 0.0026196789988634974, 0.0026320843845293687, 0.0026445056970664078, 0.0026569428589794594, 0.002669395792038211, 0.002681864417928053, 0.00269434865953551, 0.0027068484380407334, 0.0027193636765048476, 0.002731894296954899, 0.0027444402215157115, 0.002757001372452136, 0.002769579291263738, 0.00278217387395823, 0.002794784980828007, 0.0028074124705722904, 0.0028200562016428123, 0.002832716029398349, 0.0028453918089854126, 0.0028580833926959218, 0.002870790630380713, 0.002883513370962747, 0.0028962514602597017, 0.002909004740275924, 0.002921773064855253, 0.002934556308243085, 0.0029473543534263747, 0.0029601670912936954, 0.0029729944168546104, 0.0029858362291552464, 0.0029986924304639733, 0.0030115629272731577, 0.00302444762640296, 0.0030373464386688554, 0.0030502592764253887, 0.0030631860544155505, 0.0030761266887364856, 0.003089081097455577, 0.003102049200259221, 0.00311503091928797, 0.003128026177607726, 0.0031410349010651518, 0.0031540570166455053, 0.0031670924533070046, 0.0031801411426566513, 0.003193203017804865, 0.0032062780142536294, 0.0032193660702293904, 0.003232467126104136, 0.0032455811250634357, 0.0032587080139921606, 0.00327184774179879, 0.003285000262897534, 0.0032981655337678897, 0.0033113435179495552, 0.003324534181481998, 0.0033377374989079014, 0.0033509534500808773, 0.0033641820230219262, 0.003377423216100318, 0.00339067703901581, 0.00340394351536307, 0.0034172226887150712, 0.0034305146256720927, 0.003443819425030439, 0.003457137234980703, 0.0034704682775559916, 0.0034838129137687653, 0.0034971718425893836, 0.003510565487892969, 0.003523989832920139, 0.003537438253785981, 0.0035509079903865, 0.0035643973456642416, 0.00357790510808971, 0.003591430338592371, 0.003604972270085717, 0.0036185302527466765, 0.0036321037211988656, 0.0036456921734150595, 0.003659295156419418, 0.0036729122561875477, 0.0036865430902684867, 0.003700187302243421, 0.0037138445574654917, 0.003727514539718397, 0.0037411969485498346, 0.003754891497110936, 0.0037685979103819637, 0.0037823159236975833, 0.0037960452815077677, 0.0038097857363263783, 0.0038235370478309225, 0.0038372989820853356, 0.0038510713108638093, 0.0038648538110583187, 0.003878646264156019, 0.0038924484557753907, 0.0039062601752521105, 0.003920081215267279, 0.003933911371511934, 0.003947750442382839, 0.003961598228705357, 0.0039754545334799276, 0.003989319161649215, 0.004003191919883443, 0.004017072616381842, 0.004030961060688426, 0.004044857063520611, 0.004058760436609404, 0.004072670992550093, 0.004086588544662508, 0.004100512906860069, 0.004114443893526959, 0.004128381319402901, 0.00414232499947503, 0.004156274748876418, 0.004170230382790942, 0.004184191716364211, 0.00419815856462024, 0.004212130742383613, 0.004226108064207057, 0.004240090344304119, 0.004254077396486799, 0.0042680690341081245, 0.004282065070009346, 0.004296065316471808, 0.0043100695851733175, 0.00432407768714889, 0.004338089432755927, 0.004352104631643567, 0.004366123092726359, 0.004380144624162019, 0.004394169033333395, 0.004408196126834467, 0.0044222257104604805, 0.004436257589202076, 0.004450291567243542, 0.0044643274479650216, 0.004478365033948868, 0.004492404126989945, 0.004506444528110114, 0.004520486037576713, 0.004534528454925219, 0.004548571578986062, 0.00456261520791558, 0.004576659139231306, 0.004590703169851472, 0.004604747096138897, 0.004618790713949341, 0.004632833818684292, 0.004646876205348377, 0.004660917668611484, 0.004674958002875625, 0.004688997002346717, 0.004703034461111423, 0.004717070173219178, 0.004731103932769536, 0.004745135534005068, 0.004759164771410015, 0.0047731914398149305, 0.004787215334507546, 0.004801236251350232, 0.004815253986904392, 0.0048292683385622185, 0.0048432791046863375, 0.00485728608475792, 0.0048712890795340165, 0.004885287891215037, 0.004899282323623535, 0.004913272182395732, 0.004927257275187801, 0.004941237411899406, 0.004955212404918324, 0.004969182069391252, 0.004983146223528626, 0.004997104688952985, 0.005011057291100379, 0.005025003859759192, 0.005038944230240041, 0.005052878244492831, 0.005066805750251751, 0.005080726600080795, 0.005094640651027642, 0.0051085477643913095, 0.00512244780553692, 0.005136340643738425, 0.00515022615204742, 0.005164104207180024, 0.0051779746894150035, 0.005191837482502086, 0.00520569247357819, 0.005219539553089163, 0.005233378614716098, 0.005247209555305353, 0.005261032274801553, 0.005274846676183009, 0.005288652665399076, 0.005302450151309062, 0.005316239045622377, 0.005330019262839662, 0.005343790720194705, 0.005357553337596961, 0.005371307037574524, 0.0053850517452169655, 0.005398787388118664, 0.005412513896322281, 0.005426231202262053, 0.005439939240706413, 0.005453637948701178, 0.0054673272655120855, 0.005481007132566477, 0.0054946774933955535, 0.005508338293574955, 0.005521989480665787, 0.005535631004154252, 0.0055492628153912095, 0.0055628848675304205, 0.005576497115466689, 0.005590099515772346, 0.005603692026633717, 0.005617274607785895, 0.005630847220446906, 0.0056444098272508845, 0.005657962392179719, 0.005671504880493832, 0.005685037258661711, 0.005698559494287882, 0.005712071556039551, 0.005725573413571795, 0.005739065037451141, 0.005752546399077381, 0.005766017470603558, 0.005779478224854036, 0.005792928635240516, 0.0058063686756758045, 0.005819798320485185, 0.005833217544315242, 0.005846626322039892, 0.005860024628663444, 0.005873412439220434, 0.005886789728671938, 0.005900156471798087, 0.005913512643086441, 0.005926858216615825, 0.005940193165935207, 0.005953517463937146, 0.0059668310827252526, 0.0059801339934750595, 0.0059934261662875875, 0.0060067075700348275, 0.006019978172196196, 0.006033237938684973, 0.006046486833663502, 0.006059724819345789, 0.00607295185578586, 0.006086167900650034, 0.0060993729089710074, 0.006112566832881165, 0.006125749621322052, 0.006138921219726584, 0.0061520815696697465, 0.006165230608482615, 0.006178368268823755, 0.006191494478200533, 0.006204609158431235, 0.006217712225037029, 0.006230803586549699, 0.006243883143718036, 0.006256950788590692, 0.006270006403447518, 0.006283049859542733, 0.006296081015612122, 0.006309099716080171, 0.006322105788880613, 0.00633509904277053, 0.006348079263969251, 0.006361046211878099, 0.006373999613518631, 0.006386939156133849, 0.006399864477067136, 0.006412775149443016, 0.006425670661047877, 0.006438550381491153, 0.006451413507462395, 0.006464258962233736, 0.006477085182568069, 0.00648988954117736, 0.006502665545964977, 0.006515409310908663, 0.00652814138954581, 0.006540862609410313, 0.006553573458955441, 0.006566274286508168, 0.00657896536538167, 0.006591646918299125, 0.006604319134567342, 0.006616982179220856, 0.006629636196046122, 0.006642281313640125, 0.0066549176479499175, 0.006667545303229972, 0.006680164374198178, 0.006692774948867467, 0.0067053771053287034, 0.006717970917729447, 0.006730556451688855, 0.006743133769268153, 0.006755702925505806, 0.0067682639718755055, 0.006780816954586525, 0.0067933619154456875, 0.006805898892501974, 0.006818427919444416, 0.006830949025912115, 0.0068434622383598785, 0.006855967578890699, 0.006868465065909815, 0.006880954714937716, 0.006893436536947092, 0.006905910540197824, 0.006918376728688248, 0.006930835102970898, 0.00694328565978243, 0.006955728392641426, 0.00696816329079643, 0.006980590340058273, 0.006993009520327428, 0.007005420809245802, 0.007017824178285501, 0.0070302195937362736, 0.007042607015877631, 0.007054986398881618, 0.007067357687020179, 0.007079720813814032, 0.00709207569036231, 0.007104422213895131, 0.007116760283417804, 0.00712908979899505, 0.007141410659566794, 0.007153722764455496, 0.007166026013774743, 0.007178320305782967, 0.007190605539761155, 0.007202881613165433, 0.007215148422971811, 0.007227405899798417, 0.0072396556176831895, 0.00725189752935955, 0.0072641315853543935, 0.007276357734034785, 0.00728857592274535, 0.007300786094899926, 0.007312988193576735, 0.007325182158619898, 0.007337367927935027, 0.007349545438151465, 0.0073617146233096314, 0.007373875415485038, 0.00738602774479156, 0.007398171539374671, 0.007410306725407141, 0.007422433227099346, 0.007434550966719014, 0.0074466598654157005, 0.007458759841072203, 0.007470850810652097, 0.0074829326888423385, 0.007495005388695169, 0.00750706882122063, 0.007519122896057621, 0.00753116752021201, 0.007543202600113752, 0.0075552280397607925, 0.007567243741443187, 0.00757924960575919, 0.007591245531727948, 0.007603231416530236, 0.007615207156023496, 0.007627172644456794, 0.007639127774164906, 0.007651072436157669, 0.007663006519839293, 0.007674929913109101, 0.007686842502395986, 0.007698744173195636, 0.007710634808668638, 0.0077225142909514806, 0.007734382501322518, 0.007746239318884594, 0.007758084622286886, 0.007769918287861748, 0.00778174019184403, 0.007793550208050934, 0.007805348210202595, 0.007817134069987705, 0.007828907658755256, 0.007840668846424459, 0.007852417501072132, 0.007864153490943096, 0.007875876682676832, 0.007887586942130105, 0.007899284133220032, 0.007910968120302944, 0.00792263876621057, 0.007934295932885754, 0.007945939481408143, 0.007957569272019854, 0.007969185164150953, 0.007980787016444198, 0.007992374686778351, 0.00800394803229015, 0.00801550690939611, 0.008027051173815138, 0.00803858068059151, 0.008050095284117554, 0.008061594838155472, 0.008073079195858398, 0.008084548210327676, 0.008096001732943428, 0.008107439615130703, 0.00811886170788654, 0.008130267861606972, 0.008141657926853308, 0.008153031752094047, 0.008164389186578157, 0.008175730079063167, 0.008187054277525292, 0.00819836162951022, 0.008209651982679306, 0.008220925183535744, 0.00823218107861844, 0.008243419514773802, 0.008254640336878711, 0.008265843390742492, 0.008277028521939045, 0.00828819557499439, 0.008299344394904531, 0.008310474825629808, 0.008321586711630214, 0.008332679896350706, 0.008343754223760907, 0.008354809536829566, 0.008365845679082785, 0.008376862493048347, 0.008387859821849954, 0.008398837507612285, 0.008409795393089649, 0.008420733320789539, 0.008431651131629905, 0.008442548668201513, 0.00845342577177485, 0.00846428228431623, 0.0084751180475371, 0.008485932901631292, 0.008496726688485234, 0.008507499249103441, 0.008518250423914978, 0.008528980054128605, 0.008539687979926212, 0.008550374042314884, 0.008561038081700898, 0.008571679937912772, 0.008582299451648442, 0.008592896462986792, 0.00860347081207781, 0.008614022337961755, 0.008624550881073669, 0.008635056281255294, 0.008645538377112016, 0.008655997008808104, 0.008666432015608438, 0.008676843236145107, 0.008687230510042257, 0.008697593676191342, 0.008707932573460437, 0.008718247039664676, 0.00872853691400015, 0.008738802034746194, 0.008749042240186961, 0.008759257367412543, 0.008769447254972387, 0.008779611740405667, 0.008789750660658227, 0.008799863853223839, 0.008809951155216059, 0.00882001240326694, 0.008830047433249857, 0.008840056082074306, 0.008850038185630722, 0.008859993579560414, 0.008869922098479586, 0.008879823578204746, 0.008889697853373358, 0.008899544758091847, 0.008909364126214353, 0.008919155791846035, 0.008928919588087315, 0.00893865534718727, 0.008948362902347197, 0.008958042085443037, 0.008967692727163953, 0.008977314659542426, 0.008986907713042353, 0.008996471717427382, 0.009006006501949304, 0.00901551189618153, 0.009024987728240664, 0.009034433825626048, 0.009043850016223603, 0.009053236126133886, 0.009062591981426029, 0.009071917407834104, 0.009081212228997474, 0.00909047627008179, 0.009099709354030053, 0.009108911302710992, 0.009118081938844766, 0.009127221082260007, 0.00913632855460686, 0.009145404174869372, 0.009154447761351162, 0.009163459132593426, 0.009172438104765403, 0.00918138449515904, 0.00919029811804015, 0.00919917878922853, 0.009208026321205102, 0.009216840528192119, 0.009225621221023538, 0.009234368212226618, 0.009243081311228316, 0.009251760328775848, 0.00926040507346683, 0.009269015353313977, 0.009277590978159316, 0.0092861317536976, 0.00929463748770728, 0.009303107985429757, 0.009311543051497985, 0.009319942491729892, 0.009328306108833506, 0.009336633705153046, 0.009344925083447166, 0.009353180044839775, 0.009361398388774218, 0.00936957991421998, 0.009377724419267621, 0.009385831703023961, 0.009393901560297504, 0.009401933785978964, 0.00940992817396832, 0.009417884517076883, 0.009425802606973835, 0.009433682234142685, 0.009441523187840585, 0.00944932525687785, 0.009457088227307241, 0.009464811884074015, 0.009472496010522238, 0.009480140389968753, 0.009487744803444918, 0.009495309030451583, 0.009502832848903027, 0.009510316035057559, 0.00951775836340623, 0.0095251596062572, 0.009532519534653634, 0.009539837919474057, 0.009547114527957007, 0.009554349123727804, 0.009561541473483608, 0.009568691338361596, 0.009575798476390151, 0.009582862647658036, 0.009589883604938563, 0.009596861104671095, 0.009603794894927607, 0.009610684727384768, 0.009617530345898245, 0.00962433149566462, 0.009631087917877154, 0.009637799350071682, 0.009644465527911893, 0.009651086187641801, 0.00965766105778911, 0.009664189865483409, 0.009670672335102076, 0.00967710818802207, 0.009683497142468304, 0.00968983891337685, 0.009696133212253526, 0.009702379747012825, 0.009708578221759405, 0.0097147283362519, 0.009720829786261688, 0.009726882266800352, 0.009732885465335144, 0.009738839064225171, 0.009744742745880827, 0.009750596182186353, 0.009756399046683207, 0.009762151002078613, 0.009767851707541688, 0.009773500822089838, 0.009779097992123537, 0.009784642860680965, 0.009790135065154786, 0.009795574236806713, 0.009800960000382369, 0.00980629197370985, 0.009811569767200039, 0.009816792982763708, 0.009821961215184303, 0.009827074053841058, 0.00983213107320481, 0.009837131847222215, 0.009842075932123773, 0.009846962877102228, 0.009851792226116728, 0.00985656350478331, 0.009861276229402754, 0.00986592990403564, 0.009870524018423994, 0.009875058050911961, 0.0098795314659073, 0.009883943705801843, 0.009888294206423186, 0.009892582376288869, 0.00989680760867195, 0.009900969277398603, 0.009905066734829934, 0.009909099309845883, 0.009913066305380538, 0.009916966993121902, 0.009920800625562413, 0.009924566413731009, 0.009928263538134212, 0.00993189114254821, 0.009935448329532623, 0.009938934153960143, 0.009942347625511579, 0.009945687695004592, 0.0099489532564925, 0.009952143137629295, 0.009955256090242507, 0.009958290778469967, 0.009961245775741428, 0.009964119550207467, 0.009966910447436948, 0.009969616665703424, 0.009972236250708073, 0.009974767045841852, 0.009977206683694248, 0.009979552516472753, 0.009981801578237238, 0.009983950497852992, 0.009985995411195082, 0.009987931814618826, 0.009989754356844429, 0.009991456545085117, 0.00999303026181951, 0.009994464939279699, 0.009995745990069308, 0.009996851338185972, 0.009997741280328194, 0.009998297272649568, 0.009998580100885108, 0.009998837472025892, 0.009999069325141798, 0.009999275606775349, 0.009999456271309116, 0.009999611274795064, 0.009999740583666495, 0.009999844158395018, 0.009999921958073149, 0.009999973929657244, 0.01, 0.01 ];
const FLAT_INTERSECTION_VERTICES = [ new Vector2( 0, 0.23 ), new Vector2( 0.28, 0.23 ), new Vector2( 0.28, 0.187 ), new Vector2( 0.31000000000000005, 0.187 ), new Vector2( 0.31000000000000005, 0.285 ), new Vector2( 0.35000000000000003, 0.285 ), new Vector2( 0.35000000000000003, 0.187 ), new Vector2( 0.44784000000000007, 0.19544711111111113 ), new Vector2( 0.5279200000000001, 0.2192168888888889 ), new Vector2( 0.5940800000000003, 0.25595200000000007 ), new Vector2( 0.6501600000000002, 0.3032951111111112 ), new Vector2( 0.7000000000000002, 0.3588888888888889 ), new Vector2( 0.74744, 0.42037599999999997 ), new Vector2( 0.7963200000000001, 0.48539911111111106 ), new Vector2( 0.8504800000000001, 0.5516008888888888 ), new Vector2( 0.9137600000000001, 0.6166240000000001 ), new Vector2( 0.9900000000000002, 0.6781111111111111 ), new Vector2( 1.08304, 0.7337048888888889 ), new Vector2( 1.1967200000000002, 0.781048 ), new Vector2( 1.3348800000000003, 0.8177831111111112 ), new Vector2( 1.5013600000000002, 0.8415528888888888 ), new Vector2( 1.7000000000000002, 0.85 ), new Vector2( 1.7200000000000002, 0.85 ), new Vector2( 1.7200000000000002, 0.83 ), new Vector2( 3.97, 0.83 ), new Vector2( 3.97, 0.85 ), new Vector2( 3.99, 0.85 ), new Vector2( 4.142247041090831, 0.8271794713979824 ), new Vector2( 4.2472490457844145, 0.8040396711529062 ), new Vector2( 4.347115057073223, 0.7805619443862887 ), new Vector2( 4.438383622755083, 0.7567256407251051 ), new Vector2( 4.519970594235027, 0.7325077946108405 ), new Vector2( 4.591741531784853, 0.7078827356407251 ), new Vector2( 4.653959670471741, 0.6828216090838128 ), new Vector2( 4.706837084150024, 0.6572917796430003 ), new Vector2( 4.750640541972999, 0.6312560813713379 ), new Vector2( 4.785484071011348, 0.6046718617633107 ), new Vector2( 4.811490355298491, 0.5774897457622157 ), new Vector2( 4.828810662967286, 0.5496520112765728 ), new Vector2( 4.837788203527058, 0.521090414027616 ), new Vector2( 4.839986954887495, 0.49172321223957816 ), new Vector2( 4.83978127026751, 0.46145099482113416 ), new Vector2( 4.838234235181457, 0.4301506593038921 ), new Vector2( 4.834375088218855, 0.3976664123969497 ), new Vector2( 4.8268805597505215, 0.3637957433921271 ), new Vector2( 4.813706029085885, 0.32826639076591413 ), new Vector2( 4.792042515547641, 0.29069591093503844 ), new Vector2( 4.760687216087368, 0.25051414190754634 ), new Vector2( 4.728632136243961, 0.2067948678494956 ), new Vector2( 4.707742061663517, 0.15781402034283445 ), new Vector2( 4.695701134025519, 0.09941660309923751 ), new Vector2( 4.733289552989882, 0 ), new Vector2( 4.830031818846547, -0.09941660309923751 ), new Vector2( 4.839752145416904, -0.1578140203428346 ), new Vector2( 4.8398615669050695, -0.20679486784949574 ), new Vector2( 4.835081202703754, -0.2505141419075462 ), new Vector2( 4.817605008240454, -0.29069591093503844 ), new Vector2( 4.785027292836207, -0.32826639076591413 ), new Vector2( 4.776942585243684, -0.3637957433921271 ), new Vector2( 4.797458721162407, -0.39766641239694983 ), new Vector2( 4.813186478075962, -0.43015065930389224 ), new Vector2( 4.8240439105368935, -0.46145099482113405 ), new Vector2( 4.831201614539012, -0.49172321223957816 ), new Vector2( 4.835734818362881, -0.521090414027616 ), new Vector2( 4.83839918578492, -0.5496520112765728 ), new Vector2( 4.8397025656587385, -0.5774897457622157 ), new Vector2( 4.839862092954796, -0.6046718617633107 ), new Vector2( 4.833692097513756, -0.6312560813713378 ), new Vector2( 4.818280737052056, -0.6572917796430003 ), new Vector2( 4.7933253517539685, -0.6828216090838128 ), new Vector2( 4.7582142124209135, -0.7078827356407251 ), new Vector2( 4.711881036298718, -0.7325077946108405 ), new Vector2( 4.652510249362006, -0.7567256407251052 ), new Vector2( 4.576871517368001, -0.7805619443862886 ), new Vector2( 4.4785047893321, -0.8040396711529061 ), new Vector2( 4.340649826735966, -0.8271794713979824 ), new Vector2( 3.99, -0.85 ), new Vector2( 3.97, -0.85 ), new Vector2( 3.97, -0.83 ), new Vector2( 1.7200000000000002, -0.83 ), new Vector2( 1.7200000000000002, -0.85 ), new Vector2( 1.7000000000000002, -0.85 ), new Vector2( 1.5013600000000002, -0.8415528888888888 ), new Vector2( 1.3348800000000003, -0.8177831111111112 ), new Vector2( 1.1967200000000002, -0.781048 ), new Vector2( 1.0830400000000002, -0.7337048888888889 ), new Vector2( 0.9900000000000002, -0.6781111111111111 ), new Vector2( 0.9137600000000001, -0.6166240000000001 ), new Vector2( 0.8504800000000001, -0.5516008888888888 ), new Vector2( 0.7963200000000001, -0.48539911111111106 ), new Vector2( 0.74744, -0.42037599999999997 ), new Vector2( 0.7000000000000003, -0.358888888888889 ), new Vector2( 0.6501600000000002, -0.3032951111111111 ), new Vector2( 0.59408, -0.255952 ), new Vector2( 0.5279200000000001, -0.21921688888888888 ), new Vector2( 0.44784, -0.19544711111111113 ), new Vector2( 0.35000000000000003, -0.187 ), new Vector2( 0.35000000000000003, -0.285 ), new Vector2( 0.31000000000000005, -0.285 ), new Vector2( 0.31000000000000005, -0.187 ), new Vector2( 0.28, -0.187 ), new Vector2( 0.28, -0.23 ), new Vector2( 0, -0.23 ) ];

// {number} - in kg, 100g bottle total
const BOTTLE_MASS = 0.1;

// {number} - in m^3, 10L bottle
const BOTTLE_VOLUME = 0.01;

// {number} - m^3
const BOTTLE_INITIAL_INTERIOR_VOLUME = 0.004;

// {Material}
const BOTTLE_INITIAL_INTERIOR_MATERIAL = Material.WATER;

export type BottleOptions = StrictOmit<InstrumentedMassOptions, 'body' | 'shape' | 'volume' | 'material' | 'massShape'>;

export default class Bottle extends Mass {

  // model-coordinate bounds in x,y
  private readonly bottleBounds: Bounds2;

  public readonly interiorMaterialProperty: Property<Material>;
  public readonly interiorVolumeProperty: Property<number>;

  // In kg (kilograms)
  public interiorMassProperty: ReadOnlyProperty<number>;

  public readonly primaryGeometry: THREE.BufferGeometry;
  public readonly capGeometry: THREE.BufferGeometry;
  public readonly intersectionGroup: THREE.Group;

  public constructor( engine: PhysicsEngine, providedConfig: BottleOptions ) {

    const vertices = Bottle.getFlatIntersectionVertices();

    const config = optionize<BottleOptions, EmptySelfOptions, InstrumentedMassOptions>()( {
      body: engine.createFromVertices( vertices, true ),
      shape: Shape.polygon( vertices ),
      volume: BOTTLE_VOLUME,
      material: Material.createCustomMaterial( {
        density: ( BOTTLE_MASS + BOTTLE_INITIAL_INTERIOR_MATERIAL.density * BOTTLE_INITIAL_INTERIOR_VOLUME ) / BOTTLE_VOLUME
      } ),
      massShape: MassShape.BLOCK
    }, providedConfig );

    assert && assert( !config.canRotate );

    // TODO: Ask MK about why the parent options seem to be made optional, this cast shouldn't be needed
    super( engine, config as InstrumentedMassOptions );

    this.bottleBounds = Bounds2.NOTHING.copy();
    Bottle.getFlatIntersectionVertices().forEach( p => this.bottleBounds.addPoint( p ) );

    this.interiorMaterialProperty = new Property( BOTTLE_INITIAL_INTERIOR_MATERIAL, {
      valueType: Material,
      reentrant: true,
      tandem: config.tandem.createTandem( 'interiorMaterialProperty' ),
      phetioValueType: Material.MaterialIO
    } );

    this.interiorVolumeProperty = new NumberProperty( BOTTLE_INITIAL_INTERIOR_VOLUME, {
      tandem: config.tandem.createTandem( 'interiorVolumeProperty' ),
      range: new Range( 0, Number.POSITIVE_INFINITY ),
      phetioReadOnly: true
    } );

    this.interiorMassProperty = new DerivedProperty( [ this.interiorMaterialProperty, this.interiorVolumeProperty ], ( material, volume ) => {
      return material.density * volume;
    } );

    Multilink.multilink( [ this.interiorMaterialProperty, this.interiorVolumeProperty ], ( material, volume ) => {
      this.materialProperty.value = Material.createCustomMaterial( {
        nameProperty: DensityBuoyancyCommonStrings.averageStringProperty,
        density: ( BOTTLE_MASS + material.density * volume ) / BOTTLE_VOLUME
      } );
    } );

    this.primaryGeometry = Bottle.getPrimaryGeometry();
    this.capGeometry = Bottle.getCapGeometry();

    this.intersectionGroup = new THREE.Group();
    this.intersectionGroup.add( new THREE.Mesh( this.primaryGeometry, new THREE.MeshLambertMaterial() ) );
    this.intersectionGroup.add( new THREE.Mesh( this.capGeometry, new THREE.MeshLambertMaterial() ) );
  }

  /**
   * Called after a engine-physics-model step once before doing other operations (like computing buoyant forces,
   * displacement, etc.) so that it can set high-performance flags used for this purpose.
   *
   * Type-specific values are likely to be set, but this should set at least stepX/stepBottom/stepTop
   */
  public override updateStepInformation(): void {
    super.updateStepInformation();

    const xOffset = this.stepMatrix.m02();
    const yOffset = this.stepMatrix.m12();

    this.stepX = xOffset;
    this.stepBottom = yOffset + this.bottleBounds.minY;
    this.stepTop = yOffset + this.bottleBounds.maxY;
  }

  /**
   * If there is an intersection with the ray and this mass, the t-value (distance the ray would need to travel to
   * reach the intersection, e.g. ray.position + ray.distance * t === intersectionPoint) will be returned. Otherwise
   * if there is no intersection, null will be returned.
   */
  public override intersect( ray: Ray3, isTouch: boolean ): number | null {
    const translation = this.matrix.translation;
    const adjustedPosition = ray.position.minusXYZ( translation.x, translation.y, 0 );

    const raycaster = new THREE.Raycaster( ThreeUtils.vectorToThree( adjustedPosition ), ThreeUtils.vectorToThree( ray.direction ) );
    const intersections: THREE.Intersection<THREE.Group>[] = [];
    raycaster.intersectObject( this.intersectionGroup, true, intersections );

    return intersections.length ? intersections[ 0 ].distance : null;
  }

  /**
   * Returns the cumulative displaced volume of this object up to a given y level.
   *
   * Assumes step information was updated.
   */
  public getDisplacedArea( liquidLevel: number ): number {
    const bottom = this.stepBottom;
    const top = this.stepTop;

    if ( liquidLevel < bottom || liquidLevel > top ) {
      return 0;
    }

    const ratio = ( liquidLevel - bottom ) / ( top - bottom );

    return Mass.evaluatePiecewiseLinear( TEN_LITER_DISPLACED_AREAS, ratio );
  }

  /**
   * Returns the displaced volume of this object up to a given y level, assuming a y value for the given liquid level.
   *
   * Assumes step information was updated.
   */
  public getDisplacedVolume( liquidLevel: number ): number {
    const bottom = this.stepBottom;
    const top = this.stepTop;

    if ( liquidLevel <= bottom ) {
      return 0;
    }
    else if ( liquidLevel >= top ) {
      return BOTTLE_VOLUME;
    }
    else {
      const ratio = ( liquidLevel - bottom ) / ( top - bottom );

      return Mass.evaluatePiecewiseLinear( TEN_LITER_DISPLACED_VOLUMES, ratio );
    }
  }

  /**
   * Resets values to their original state
   */
  public override reset(): void {
    this.interiorMaterialProperty.reset();
    this.interiorVolumeProperty.reset();

    super.reset();
  }

  /**
   * @param controlPoints - Four points for a cubic
   * @param t
   */
  public static evaluateCubic( controlPoints: Vector2[], t: number ): Vector2 {
    const mt = 1 - t;
    const mmm = mt * mt * mt;
    const mmt = 3 * mt * mt * t;
    const mtt = 3 * mt * t * t;
    const ttt = t * t * t;

    return new Vector2(
      controlPoints[ 0 ].x * mmm +
      controlPoints[ 1 ].x * mmt +
      controlPoints[ 2 ].x * mtt +
      controlPoints[ 3 ].x * ttt,
      controlPoints[ 0 ].y * mmm +
      controlPoints[ 1 ].y * mmt +
      controlPoints[ 2 ].y * mtt +
      controlPoints[ 3 ].y * ttt
    );
  }

  /**
   * @param controlPoints - Four points for a cubic
   * @param t
   */
  public static evaluateCubicDerivative( controlPoints: Vector2[], t: number ): Vector2 {
    const mt = 1 - t;

    return new Vector2(
      controlPoints[ 0 ].x * ( -3 * mt * mt ) +
      controlPoints[ 1 ].x * ( 3 * mt * mt - 6 * mt * t ) +
      controlPoints[ 2 ].x * ( 6 * mt * t - 3 * t * t ) +
      controlPoints[ 3 ].x * ( 3 * t * t ),
      controlPoints[ 0 ].y * ( -3 * mt * mt ) +
      controlPoints[ 1 ].y * ( 3 * mt * mt - 6 * mt * t ) +
      controlPoints[ 2 ].y * ( 6 * mt * t - 3 * t * t ) +
      controlPoints[ 3 ].y * ( 3 * t * t )
    );
  }

  /**
   * Given control points for a parametric cubic bezier, finds the parametric value for the curve that will have the
   * defined radius.
   */
  public static getParametricFromRadius( controlPoints: Vector2[], r: number ): number {
    const r0 = controlPoints[ 0 ].y;
    const r1 = controlPoints[ 1 ].y;
    const r2 = controlPoints[ 2 ].y;
    const r3 = controlPoints[ 3 ].y;

    const roots = Utils.solveCubicRootsReal(
      -r0 + 3 * r1 - 3 * r2 + r3,
      3 * r0 - 6 * r1 + 3 * r2,
      -3 * r0 + 3 * r1,
      r0 - r
    )!.filter( t => t >= 0 && t <= 1 );

    return roots[ 0 ];
  }

  private static getTaperParametricProfilePoint( t: number ): Vector2 {
    return Bottle.evaluateCubic( TAPER_CONTROL_POINTS, t );
  }

  private static getTaperParametricDerivative( t: number ): Vector2 {
    return Bottle.evaluateCubicDerivative( TAPER_CONTROL_POINTS, t );
  }

  private static getBaseFirstTipParametricProfilePoint( t: number ): Vector2 {
    return Bottle.evaluateCubic( BASE_FIRST_TIP_CONTROL_POINTS, t );
  }

  private static getBaseSecondTipParametricProfilePoint( t: number ): Vector2 {
    return Bottle.evaluateCubic( BASE_SECOND_TIP_CONTROL_POINTS, t );
  }

  private static getBaseSaddleParametricProfilePoint( t: number ): Vector2 {
    return Bottle.evaluateCubic( BASE_SADDLE_CONTROL_POINTS, t );
  }

  private static getTaperParametricFromRadius( r: number ): number {
    return Bottle.getParametricFromRadius( TAPER_CONTROL_POINTS, r );
  }

  private static getBaseFirstTipParametricFromRadius( r: number ): number {
    return Bottle.getParametricFromRadius( BASE_FIRST_TIP_CONTROL_POINTS, r );
  }

  private static getBaseSecondTipParametricFromRadius( r: number ): number {
    return Bottle.getParametricFromRadius( BASE_SECOND_TIP_CONTROL_POINTS, r );
  }

  private static getBaseSaddleParametricFromRadius( r: number ): number {
    return Bottle.getParametricFromRadius( BASE_SADDLE_CONTROL_POINTS, r );
  }

  private static getBasePoint( y: number, z: number ): Vector3 {
    const r = Math.sqrt( y * y + z * z );
    const theta = Math.atan2( z, y ); // angled so we're symmetric?

    const saddlePoint = Bottle.getBaseSaddleParametricProfilePoint( Bottle.getBaseSaddleParametricFromRadius( r ) );
    const tipPoint = r > BASE_TIP_RADIUS ?
                     Bottle.getBaseFirstTipParametricProfilePoint( Bottle.getBaseFirstTipParametricFromRadius( r ) ) :
                     Bottle.getBaseSecondTipParametricProfilePoint( Bottle.getBaseSecondTipParametricFromRadius( r ) );

    let ratio = Math.cos( theta * 5 ) * 0.5 + 0.5;

    ratio = Math.pow( ratio, 1 + r / FULL_RADIUS );

    return new Vector3(
      tipPoint.x + ratio * ( saddlePoint.x - tipPoint.x ),
      y,
      z
    );
  }

  public static getYFromVolume( volume: number ): number {
    const min = -FULL_RADIUS * TEN_LITER_SCALE_MULTIPLIER;
    const max = FULL_RADIUS * TEN_LITER_SCALE_MULTIPLIER;

    if ( volume <= 0 ) {
      return min;
    }
    else if ( volume >= BOTTLE_VOLUME ) {
      return max;
    }
    else {
      for ( let i = 1; i < TEN_LITER_DISPLACED_VOLUMES.length; i++ ) {
        if ( volume < TEN_LITER_DISPLACED_VOLUMES[ i ] ) {
          const ratio = Utils.linear(
            TEN_LITER_DISPLACED_VOLUMES[ i - 1 ],
            TEN_LITER_DISPLACED_VOLUMES[ i ],
            ( i - 1 ) / ( TEN_LITER_DISPLACED_VOLUMES.length - 1 ),
            i / ( TEN_LITER_DISPLACED_VOLUMES.length - 1 ),
            volume );
          return min + ( max - min ) * ratio;
        }
      }
    }
    throw new Error( 'unsupported volume' );
  }

  private static getMainBottleCrossSectionTriangles( y: number, precisionMultiplier = 1 ): Vector2[] {
    const triangles: Vector2[] = [];
    const absY = Math.abs( y );

    const radial = ( r: number ) => r * Math.sqrt( 1 - Math.pow( y / r, 2 ) );
    const mirroredQuad = ( x0: number, z0: number, x1: number, z1: number ) => {
      const a = new Vector2( x0, z0 );
      const b = new Vector2( x1, z1 );
      const c = new Vector2( x1, -z1 );
      const d = new Vector2( x0, -z0 );

      triangles.push(
        a, b, c,
        a, c, d
      );
    };
    const approximateProfile = ( profileVectors: Vector2[] ) => {
      _.range( 0, profileVectors.length - 1 ).forEach( i => {
        const a = profileVectors[ i ];
        const b = profileVectors[ i + 1 ];

        if ( a.y > absY && b.y > absY ) {
          mirroredQuad( a.x, radial( a.y ), b.x, radial( b.y ) );
        }
        else if ( a.y > absY || b.y > absY ) {
          const ratio = ( absY - a.y ) / ( b.y - a.y );
          const x = a.x + ratio * ( b.y - a.y );

          if ( a.y > absY ) {
            triangles.push(
              new Vector2( a.x, radial( a.y ) ),
              new Vector2( x, 0 ),
              new Vector2( a.x, -radial( a.y ) )
            );
          }
          else {
            triangles.push(
              new Vector2( x, 0 ),
              new Vector2( b.x, radial( b.y ) ),
              new Vector2( b.x, -radial( b.y ) )
            );
          }
        }
      } );
    };

    // section under cap
    approximateProfile( [
      new Vector2( CAP_CORNER_RADIUS, NECK_RADIUS ),
      new Vector2( CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH, NECK_RADIUS )
    ] );

    // lip
    const cornerSegmentCount = 12 * precisionMultiplier;
    approximateProfile( _.range( 0, ( cornerSegmentCount * 2 ) + 1 ).map( i => {
      const theta = Math.PI * ( 1 - i / ( cornerSegmentCount * 2 ) );
      return new Vector2(
        LIP_START + LIP_CORNER_RADIUS * ( 1 + Math.cos( theta ) ),
        LIP_RADIUS + LIP_CORNER_RADIUS * ( -1 + Math.sin( theta ) )
      );
    } ) );

    // taper
    const taperSegmentCount = 60 * precisionMultiplier;
    approximateProfile( _.range( 0, taperSegmentCount + 1 ).map( i => Bottle.getTaperParametricProfilePoint( i / taperSegmentCount ) ) );

    // body left corner
    approximateProfile( _.range( 0, cornerSegmentCount + 1 ).map( i => {
      const theta = 0.5 * Math.PI * ( 1 - i / cornerSegmentCount );
      return new Vector2(
        TAPER_END + BODY_CORNER_RADIUS * Math.cos( theta ),
        BODY_RADIUS + BODY_CORNER_RADIUS * Math.sin( theta )
      );
    } ) );

    // body
    approximateProfile( [
      new Vector2( BODY_START, BODY_RADIUS ),
      new Vector2( BODY_END, BODY_RADIUS )
    ] );

    // body right corner
    approximateProfile( _.range( 0, cornerSegmentCount + 1 ).map( i => {
      const theta = 0.5 * Math.PI * ( 2 - i / cornerSegmentCount );
      return new Vector2(
        BASE_START + BODY_CORNER_RADIUS * Math.cos( theta ),
        BODY_RADIUS + BODY_CORNER_RADIUS * Math.sin( theta )
      );
    } ) );

    // base
    const baseSegmentCount = 60 * precisionMultiplier;
    if ( absY < FULL_RADIUS ) {
      const maxZ = radial( FULL_RADIUS );
      const zValues = _.range( 1, baseSegmentCount ).map( i => {
        const unit = 1 - 2 * ( i / baseSegmentCount );
        return maxZ * ( unit > 0 ? 1 : -1 ) * Math.pow( Math.abs( unit ), 2 / 3 );
      } );

      // x,z
      const points = [
        new Vector2( BASE_START, maxZ ),
        ...zValues.map( z => {
          const basePoint = Bottle.getBasePoint( y, z );
          return new Vector2( basePoint.x, basePoint.z );
        } ),
        new Vector2( BASE_START, -maxZ )
      ];

      const center = new Vector2( BASE_START, 0 );
      _.range( 0, points.length - 1 ).forEach( i => {
        triangles.push(
          center, points[ i ], points[ i + 1 ]
        );
      } );
    }

    return triangles;
  }

  public static createCrossSectionVertexArray(): Float32Array {
    return new Float32Array( MAX_CROSS_SECTION_VERTEX_COUNT * 3 );
  }

  public static fillCrossSectionVertexArray( y: number, positionArray: Float32Array ): void {
    const triangleXZs = Bottle.getMainBottleCrossSectionTriangles( y / TEN_LITER_SCALE_MULTIPLIER + TEN_LITER_INTERSECTION_CENTROID.y, CROSS_SECTION_PRECISION );
    for ( let i = 0; i < triangleXZs.length; i++ ) {
      const triangleVertex = triangleXZs[ i ];
      const index = 3 * i;
      positionArray[ index ] = ( triangleVertex.x - TEN_LITER_INTERSECTION_CENTROID.x ) * TEN_LITER_SCALE_MULTIPLIER;
      positionArray[ index + 1 ] = y;
      positionArray[ index + 2 ] = triangleVertex.y * TEN_LITER_SCALE_MULTIPLIER;
    }

    // zero out the rest of the entries
    for ( let i = triangleXZs.length * 3; i < positionArray.length; i++ ) {
      positionArray[ i ] = 0;
    }
  }

  /**
   * Returns the cross-sectional area taken up by a selection of triangles in 2d.
   *
   * @param triangles - Every section of three vertices represents a 2d triangle
   */
  public static getCrossSectionArea( triangles: Vector2[] ): number {
    let area = 0;
    _.range( 0, triangles.length, 3 ).forEach( i => {
      area += Utils.triangleArea(
        triangles[ i ],
        triangles[ i + 1 ],
        triangles[ i + 2 ]
      );
    } );
    return area;
  }

  public static computeBottleData( samples = 1000, accuracyMultiplier = 100 ): string {
    const desiredVolume = 0.01;

    const multiplier = FULL_RADIUS * 2;
    let sum = 0;
    const sliceAreas: number[] = [];
    _.range( 0, samples ).forEach( i => {
      // unit area times the multiplier
      const y = ( i / ( samples - 1 ) - 0.5 ) * multiplier;
      const area = Bottle.getCrossSectionArea( Bottle.getMainBottleCrossSectionTriangles( y, accuracyMultiplier ) );
      sliceAreas.push( area );
      sum += area;
    } );
    const originalVolume = sum / samples * multiplier;
    const tenLiterMultiplier = Math.pow( originalVolume / desiredVolume, -1 / 3 );

    const actualAreas = sliceAreas.map( area => tenLiterMultiplier * tenLiterMultiplier * area );
    const actualCumulativeAreas: number[] = [];
    let cumulativeArea = 0;
    actualAreas.forEach( area => {
      cumulativeArea += area / samples * multiplier * tenLiterMultiplier;
      // sanity work due to rounding
      actualCumulativeAreas.push( Math.min( desiredVolume, cumulativeArea ) );
    } );

    // Somewhat simplified
    const intersectionTaperSegments = 15;
    const baseSegments = 50;
    const computationLimit = 300;
    const flatIntersectionVertices = [
      new Vector2( 0, CAP_RADIUS ),
      new Vector2( CAP_LENGTH, CAP_RADIUS ),
      new Vector2( CAP_LENGTH, NECK_RADIUS ),
      new Vector2( LIP_START, NECK_RADIUS ),
      new Vector2( LIP_START, LIP_RADIUS ),
      new Vector2( LIP_END, LIP_RADIUS ),

      ..._.range( 0, intersectionTaperSegments + 1 ).map( i => Bottle.getTaperParametricProfilePoint( i / intersectionTaperSegments ) ),

      new Vector2( BODY_START, FULL_RADIUS ),
      new Vector2( BODY_START, BODY_RADIUS ),
      new Vector2( BODY_END, BODY_RADIUS ),
      new Vector2( BODY_END, FULL_RADIUS ),
      new Vector2( BASE_START, FULL_RADIUS ),

      // compute the maximum X values for each Y (over the range of Z values) for the base
      ..._.range( 1, baseSegments ).map( i => {
        const unit = 1 - 2 * ( i / baseSegments );
        const y = FULL_RADIUS * ( unit > 0 ? 1 : -1 ) * Math.pow( Math.abs( unit ), 2 / 3 );
        let maxX = BASE_START;
        _.range( -FULL_RADIUS, FULL_RADIUS, 2 * FULL_RADIUS / computationLimit ).forEach( z => {
          if ( Math.sqrt( y * y + z * z ) < FULL_RADIUS ) {
            maxX = Math.max( maxX, Bottle.getBasePoint( y, z ).x );
          }
        } );
        return new Vector2( maxX, y );
      } ),

      new Vector2( BASE_START, -FULL_RADIUS ),
      new Vector2( BODY_END, -FULL_RADIUS ),
      new Vector2( BODY_END, -BODY_RADIUS ),
      new Vector2( BODY_START, -BODY_RADIUS ),
      new Vector2( BODY_START, -FULL_RADIUS ),

      ..._.range( 0, intersectionTaperSegments + 1 ).map( i => {
        const point = Bottle.getTaperParametricProfilePoint( 1 - i / intersectionTaperSegments );
        return new Vector2( point.x, -point.y );
      } ),

      new Vector2( LIP_END, -LIP_RADIUS ),
      new Vector2( LIP_START, -LIP_RADIUS ),
      new Vector2( LIP_START, -NECK_RADIUS ),
      new Vector2( CAP_LENGTH, -NECK_RADIUS ),
      new Vector2( CAP_LENGTH, -CAP_RADIUS ),
      new Vector2( 0, -CAP_RADIUS )
    ];

    const centroid = Utils.centroidOfPolygon( flatIntersectionVertices );

    const maxCrossSectionVertexCount = Math.max( ..._.range( -FULL_RADIUS, FULL_RADIUS, 0.01 ).map( y => {
      return phet.densityBuoyancyCommon.Bottle.getMainBottleCrossSectionTriangles( y, CROSS_SECTION_PRECISION ).length;
    } ) );

    return `
// NOTE: machine generated by copy( phet.densityBuoyancyCommon.Bottle.computeBottleData() );
// If any parameters about the bottle shape changes, this should be recomputed.
const MAX_CROSS_SECTION_VERTEX_COUNT = ${maxCrossSectionVertexCount};
const TEN_LITER_SCALE_MULTIPLIER = ${tenLiterMultiplier};
const TEN_LITER_INTERSECTION_CENTROID = new Vector2( ${centroid.x}, ${centroid.y} );
const TEN_LITER_DISPLACED_AREAS = [ ${actualAreas.join( ', ' )} ];
const TEN_LITER_DISPLACED_VOLUMES = [ ${actualCumulativeAreas.join( ', ' )} ];
const FLAT_INTERSECTION_VERTICES = [ ${flatIntersectionVertices.map( v => `new Vector2( ${v.x}, ${v.y} )` ).join( ', ' )} ];
`;
  }

  /**
   * Returns a list of points in (x,r) that is the cross-section profile of the cap.
   */
  public static getCapProfile(): Vector2[] {
    return [
      new Vector2( 0, 0 ),
      ..._.range( 0, CORNER_SEGMENTS ).map( i => {
        const theta = Math.PI / 2 * i / CORNER_SEGMENTS;
        return new Vector2(
          CAP_CORNER_RADIUS * ( 1 - Math.cos( theta ) ),
          CAP_RADIUS + CAP_CORNER_RADIUS * ( -1 + Math.sin( theta ) )
        );
      } ),
      new Vector2( CAP_CORNER_RADIUS, CAP_RADIUS ),
      new Vector2( CAP_CORNER_RADIUS + CAP_BODY_LENGTH, CAP_RADIUS ),
      new Vector2( CAP_CORNER_RADIUS + CAP_BODY_LENGTH, NECK_RADIUS )
    ];
  }

  private static getLipToBodyProfile(): Vector2[] {
    return [
      new Vector2( CAP_CORNER_RADIUS + CAP_BODY_LENGTH + GAP_LENGTH, NECK_RADIUS ),
      ..._.range( 0, CORNER_SEGMENTS * 2 ).map( i => {
        const theta = Math.PI - Math.PI / 2 * i / CORNER_SEGMENTS;
        return new Vector2(
          LIP_START + LIP_CORNER_RADIUS * ( 1 + Math.cos( theta ) ),
          LIP_RADIUS + LIP_CORNER_RADIUS * ( -1 + Math.sin( theta ) )
        );
      } ),
      new Vector2( LIP_END, LIP_RADIUS - LIP_CORNER_RADIUS ),
      new Vector2( LIP_END, NECK_RADIUS ),
      ..._.range( 1, TAPER_SEGMENTS ).map( i => Bottle.getTaperParametricProfilePoint( i / TAPER_SEGMENTS ) ),
      ..._.range( 0, CORNER_SEGMENTS ).map( i => {
        const theta = Math.PI / 2 * ( 1 - i / CORNER_SEGMENTS );
        return new Vector2(
          TAPER_END + BODY_CORNER_RADIUS * Math.cos( theta ),
          BODY_RADIUS + BODY_CORNER_RADIUS * Math.sin( theta )
        );
      } ),
      new Vector2( BODY_START, BODY_RADIUS ),
      ..._.range( 0, CORNER_SEGMENTS ).map( i => {
        const theta = Math.PI / 2 * i / CORNER_SEGMENTS;
        return new Vector2(
          BODY_END + BODY_CORNER_RADIUS * ( 1 - Math.cos( theta ) ),
          BODY_RADIUS + BODY_CORNER_RADIUS * Math.sin( theta )
        );
      } ),
      new Vector2( BODY_END + BODY_CORNER_RADIUS, FULL_RADIUS )
    ];
  }

  /**
   * Returns a list of points in (x,r) that is the cross-section profile of the non-base portion of the bottle.
   */
  public static getMainBottleProfile(): Vector2[] {
    return [
      new Vector2( CAP_CORNER_RADIUS, NECK_RADIUS ),
      ...Bottle.getLipToBodyProfile()
    ];
  }

  public static getMainFlatIntersectionProfile(): Vector2[] {
    return [
      ...Bottle.getCapProfile(),
      ...Bottle.getLipToBodyProfile()
    ];
  }

  /**
   * For UV-mapping
   */
  private static xToU( x: number ): number {
    return x / BASE_TIP;
  }

  /**
   * For UV-mapping
   *
   * TODO: What is the most efficient to have the value of V?
   */
  private static yToV( y: number ): number {
    return y / ( 2 * FULL_RADIUS ) + 0.5;
  }

  private static quadRing( positions: number[], normals: number[], uvs: number[], radialSegments: number, x0: number, r0: number, x1: number, r1: number, nx0: number, nr0: number, nx1: number, nr1: number ): void {
    _.range( 0, radialSegments ).forEach( i => {
      const theta0 = 2 * Math.PI * i / radialSegments;
      const theta1 = 2 * Math.PI * ( i + 1 ) / radialSegments;

      const sin0 = Math.sin( theta0 );
      const sin1 = Math.sin( theta1 );
      const cos0 = Math.cos( theta0 );
      const cos1 = Math.cos( theta1 );

      positions.push(
        x0, r0 * sin0, r0 * cos0,
        x1, r1 * sin0, r1 * cos0,
        x1, r1 * sin1, r1 * cos1,
        x0, r0 * sin0, r0 * cos0,
        x1, r1 * sin1, r1 * cos1,
        x0, r0 * sin1, r0 * cos1
      );

      normals.push(
        nx0, nr0 * sin0, nr0 * cos0,
        nx1, nr1 * sin0, nr1 * cos0,
        nx1, nr1 * sin1, nr1 * cos1,
        nx0, nr0 * sin0, nr0 * cos0,
        nx1, nr1 * sin1, nr1 * cos1,
        nx0, nr0 * sin1, nr0 * cos1
      );

      uvs.push(
        Bottle.xToU( x0 ), Bottle.yToV( r0 * sin0 ),
        Bottle.xToU( x1 ), Bottle.yToV( r1 * sin0 ),
        Bottle.xToU( x1 ), Bottle.yToV( r1 * sin1 ),
        Bottle.xToU( x0 ), Bottle.yToV( r0 * sin0 ),
        Bottle.xToU( x1 ), Bottle.yToV( r1 * sin1 ),
        Bottle.xToU( x0 ), Bottle.yToV( r0 * sin1 )
      );
    } );
  }

  private static roundedCornerRing( positions: number[], normals: number[], uvs: number[], radialSegments: number, cornerSegments: number, startTheta: number, endTheta: number, x: number, r: number, cornerRadius: number ): void {
    _.range( 0, cornerSegments ).forEach( i => {
      const theta0 = startTheta + ( i / cornerSegments ) * ( endTheta - startTheta );
      const theta1 = startTheta + ( ( i + 1 ) / cornerSegments ) * ( endTheta - startTheta );

      const nx0 = Math.cos( theta0 );
      const nr0 = Math.sin( theta0 );
      const nx1 = Math.cos( theta1 );
      const nr1 = Math.sin( theta1 );
      const x0 = x + cornerRadius * nx0;
      const r0 = r + cornerRadius * nr0;
      const x1 = x + cornerRadius * nx1;
      const r1 = r + cornerRadius * nr1;

      Bottle.quadRing( positions, normals, uvs, radialSegments, x0, r0, x1, r1, nx0, nr0, nx1, nr1 );
    } );
  }

  /**
   * Meant for mapping a raw number-based array of x,y,z position data from the construction coordinates to model
   * coordinates.
   */
  private static positionArrayMap( point: number, index: number ): number {
    const mod = index % 3;

    // x
    if ( mod === 0 ) {
      point -= TEN_LITER_INTERSECTION_CENTROID.x;
    }

    // y
    if ( mod === 1 ) {
      point -= TEN_LITER_INTERSECTION_CENTROID.y;
    }

    return point * TEN_LITER_SCALE_MULTIPLIER;
  }

  /**
   * Returns the model-coordinate main geometry for the bulk of the bottle (meant for use with the clear plastic
   * looking material).
   */
  public static getPrimaryGeometry(): THREE.BufferGeometry {
    const radialSegments = 64;
    const cornerSegments = 6;
    const taperSegments = 30;
    const baseSegments = 40;

    const positions: number[] = [];
    const normals: number[] = [];
    const uvs: number[] = []; // x / CAP_LENGTH, theta/2pi (approximately) in case we want to texture the cap

    // the under-cap portion
    Bottle.quadRing(
      positions, normals, uvs, radialSegments,
      CAP_CORNER_RADIUS, NECK_RADIUS,
      LIP_START, NECK_RADIUS,
      0, 1,
      0, 1
    );

    // top surface of the lip
    Bottle.quadRing(
      positions, normals, uvs, radialSegments,
      LIP_START, NECK_RADIUS,
      LIP_START, LIP_RADIUS - LIP_CORNER_RADIUS,
      -1, 0,
      -1, 0
    );

    // lip corner
    Bottle.roundedCornerRing(
      positions, normals, uvs, radialSegments, 2 * cornerSegments,
      Math.PI, 0, LIP_START + LIP_CORNER_RADIUS, LIP_RADIUS - LIP_CORNER_RADIUS, LIP_CORNER_RADIUS
    );

    // bottom surface of the lip
    Bottle.quadRing(
      positions, normals, uvs, radialSegments,
      LIP_END, LIP_RADIUS - LIP_CORNER_RADIUS,
      LIP_END, NECK_RADIUS,
      1, 0,
      1, 0
    );

    const bottlePoints = _.range( 0, taperSegments + 1 ).map( i => Bottle.getTaperParametricProfilePoint( i / taperSegments ) );
    const bottleTangents = _.range( 0, taperSegments + 1 ).map( i => Bottle.getTaperParametricDerivative( i / taperSegments ).normalized() );
    _.range( 0, taperSegments ).forEach( i => {
      Bottle.quadRing(
        positions, normals, uvs, radialSegments,
        bottlePoints[ i ].x, bottlePoints[ i ].y,
        bottlePoints[ i + 1 ].x, bottlePoints[ i + 1 ].y,
        -bottleTangents[ i ].y, bottleTangents[ i ].x,
        -bottleTangents[ i + 1 ].y, bottleTangents[ i + 1 ].x
      );
    } );

    // body start corner
    Bottle.roundedCornerRing(
      positions, normals, uvs, radialSegments, cornerSegments,
      0.5 * Math.PI, 0, TAPER_END, BODY_RADIUS, BODY_CORNER_RADIUS
    );

    // the under-cap portion
    Bottle.quadRing(
      positions, normals, uvs, radialSegments,
      BODY_START, BODY_RADIUS,
      BODY_END, BODY_RADIUS,
      0, 1,
      0, 1
    );

    // body end corner
    Bottle.roundedCornerRing(
      positions, normals, uvs, radialSegments, cornerSegments,
      Math.PI, 0.5 * Math.PI, BASE_START, BODY_RADIUS, BODY_CORNER_RADIUS
    );


    const baseRValues = _.range( 1, baseSegments ).map( i => FULL_RADIUS * Math.pow( ( 1 - i / baseSegments ), 2 / 3 ) );

    // {Array.<Array.<Vector3>>}
    const baseMesh = _.range( 0, radialSegments ).map( i => {
      const theta = 2 * Math.PI * i / radialSegments;

      return [
        new Vector3( BASE_START, FULL_RADIUS * Math.sin( theta ), FULL_RADIUS * Math.cos( theta ) ),
        ...baseRValues.map( r => Bottle.getBasePoint( r * Math.sin( theta ), r * Math.cos( theta ) ) ),
        new Vector3( BASE_SADDLE, 0, 0 )
      ];
    } );
    const baseMeshNormals = baseMesh.map( ( positions, i ) => {
      return positions.map( ( position, j ) => {
        if ( j === 0 ) {
          return new Vector3( 0, position.y, position.z ).normalize();
        }
        else if ( j === positions.length - 1 ) {
          return Vector3.X_UNIT;
        }
        else {
          const west = positions[ j - 1 ].minus( position );
          const east = positions[ j + 1 ].minus( position );
          const north = baseMesh[ Utils.moduloBetweenDown( i - 1, 0, radialSegments ) ][ j ].minus( position );
          const south = baseMesh[ Utils.moduloBetweenDown( i + 1, 0, radialSegments ) ][ j ].minus( position );

          // TODO: check sign
          const cumulativeNormal = new Vector3( 0, 0, 0 );
          cumulativeNormal.add( north.cross( east ).normalize() );
          cumulativeNormal.add( east.cross( south ).normalize() );
          cumulativeNormal.add( south.cross( west ).normalize() );
          cumulativeNormal.add( west.cross( north ).normalize() );
          cumulativeNormal.normalize();
          return cumulativeNormal;
        }
      } );
    } );

    _.range( 0, radialSegments ).forEach( iRadial => {
      _.range( 0, baseSegments ).forEach( iBase => {
        const radial0 = iRadial;
        const radial1 = Utils.moduloBetweenDown( iRadial + 1, 0, radialSegments );
        const base0 = iBase;
        const base1 = iBase + 1;

        const p0 = baseMesh[ radial0 ][ base0 ];
        const p1 = baseMesh[ radial0 ][ base1 ];
        const p2 = baseMesh[ radial1 ][ base1 ];
        const p3 = baseMesh[ radial1 ][ base0 ];

        const n0 = baseMeshNormals[ radial0 ][ base0 ];
        const n1 = baseMeshNormals[ radial0 ][ base1 ];
        const n2 = baseMeshNormals[ radial1 ][ base1 ];
        const n3 = baseMeshNormals[ radial1 ][ base0 ];

        positions.push(
          p0.x, p0.y, p0.z,
          p1.x, p1.y, p1.z,
          p2.x, p2.y, p2.z,
          p0.x, p0.y, p0.z,
          p2.x, p2.y, p2.z,
          p3.x, p3.y, p3.z
        );

        normals.push(
          n0.x, n0.y, n0.z,
          n1.x, n1.y, n1.z,
          n2.x, n2.y, n2.z,
          n0.x, n0.y, n0.z,
          n2.x, n2.y, n2.z,
          n3.x, n3.y, n3.z
        );

        uvs.push(
          Bottle.xToU( p0.x ), Bottle.yToV( p0.y ),
          Bottle.xToU( p1.x ), Bottle.yToV( p1.y ),
          Bottle.xToU( p2.x ), Bottle.yToV( p2.y ),
          Bottle.xToU( p0.x ), Bottle.yToV( p0.y ),
          Bottle.xToU( p2.x ), Bottle.yToV( p2.y ),
          Bottle.xToU( p3.x ), Bottle.yToV( p3.y )
        );
      } );
    } );

    const bottleGeometry = new THREE.BufferGeometry();
    bottleGeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( positions.map( Bottle.positionArrayMap ) ), 3 ) );
    bottleGeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );
    bottleGeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( uvs ), 2 ) );
    return bottleGeometry;
  }

  /**
   * Returns the model-coordinate THREE.BufferGeometry representing the bottle cap.
   */
  public static getCapGeometry(): THREE.BufferGeometry {
    const radialSegments = 64;
    const cornerSegments = 6;

    const positions: number[] = [];
    const normals: number[] = [];
    const uvs: number[] = []; // x / CAP_LENGTH, theta/2pi (approximately) in case we want to texture the cap

    // The top of the cap
    _.range( 0, radialSegments ).forEach( i => {
      const theta0 = 2 * Math.PI * i / radialSegments;
      const theta1 = 2 * Math.PI * ( i + 1 ) / radialSegments;

      const y0 = ( CAP_RADIUS - CAP_CORNER_RADIUS ) * Math.sin( theta0 );
      const y1 = ( CAP_RADIUS - CAP_CORNER_RADIUS ) * Math.sin( theta1 );
      const z0 = ( CAP_RADIUS - CAP_CORNER_RADIUS ) * Math.cos( theta0 );
      const z1 = ( CAP_RADIUS - CAP_CORNER_RADIUS ) * Math.cos( theta1 );

      // triangle fan for the top of the cap
      positions.push(
        0, 0, 0,
        0, y0, z0,
        0, y1, z1
      );
      normals.push(
        -1, 0, 0,
        -1, 0, 0,
        -1, 0, 0
      );
      uvs.push(
        0, 0,
        0, Bottle.yToV( y0 ),
        0, Bottle.yToV( y1 )
      );
    } );

    // corner
    Bottle.roundedCornerRing(
      positions, normals, uvs, radialSegments, cornerSegments,
      Math.PI, 0.5 * Math.PI, CAP_CORNER_RADIUS, CAP_RADIUS - CAP_CORNER_RADIUS, CAP_CORNER_RADIUS
    );

    // main outside face
    Bottle.quadRing(
      positions, normals, uvs, radialSegments,
      CAP_CORNER_RADIUS, CAP_RADIUS,
      CAP_CORNER_RADIUS + CAP_BODY_LENGTH, CAP_RADIUS,
      0, 1,
      0, 1
    );

    // lip underneath
    Bottle.quadRing(
      positions, normals, uvs, radialSegments,
      CAP_CORNER_RADIUS + CAP_BODY_LENGTH, CAP_RADIUS,
      CAP_CORNER_RADIUS + CAP_BODY_LENGTH, NECK_RADIUS,
      1, 0,
      1, 0
    );

    const capGeometry = new THREE.BufferGeometry();
    capGeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( positions.map( Bottle.positionArrayMap ) ), 3 ) );
    capGeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );
    capGeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( uvs ), 2 ) );
    return capGeometry;
  }

  /**
   * Returns a list of model-space x,y coordinates for the intersection profile of the bottle.
   *
   */
  public static getFlatIntersectionVertices(): Vector2[] {
    return FLAT_INTERSECTION_VERTICES.map( v => {
      return v.minusXY( TEN_LITER_INTERSECTION_CENTROID.x, TEN_LITER_INTERSECTION_CENTROID.y ).timesScalar( TEN_LITER_SCALE_MULTIPLIER );
    } );
  }

  /**
   * Replaces the main page with a debug view of the bottle, for debugging various curves and properties.
   */
  public static getDebugCanvas(): HTMLCanvasElement {
    const canvas = document.createElement( 'canvas' );
    const context = canvas.getContext( '2d' )!;

    const width = 800;
    const height = 400;

    const pixelRatio = window.devicePixelRatio || 1;
    canvas.width = width * pixelRatio;
    canvas.height = height * pixelRatio;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    context.scale( pixelRatio, pixelRatio );

    const scale = width / 5;

    const mapX = ( x: number ) => ( x + 0.07 ) * scale;
    const mapY = ( y: number ) => -y * scale + height / 2;

    context.strokeStyle = 'red';
    context.beginPath();
    const capProfile = Bottle.getCapProfile();
    capProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
    context.stroke();
    context.beginPath();
    capProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( -p.y ) ) );
    context.stroke();

    context.strokeStyle = 'blue';
    context.beginPath();
    const mainBottleProfile = Bottle.getMainBottleProfile();
    mainBottleProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
    context.stroke();
    context.beginPath();
    mainBottleProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( -p.y ) ) );
    context.stroke();

    context.strokeStyle = 'green';
    context.beginPath();
    const baseSaddleProfile = _.range( 0, BASE_SEGMENTS + 1 ).map( i => Bottle.getBaseSaddleParametricProfilePoint( i / BASE_SEGMENTS ) );
    baseSaddleProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
    context.stroke();
    context.beginPath();
    baseSaddleProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( -p.y ) ) );
    context.stroke();

    context.strokeStyle = 'magenta';
    context.beginPath();
    // TODO: figure out segments improvement
    const baseTipProfile = [
      ..._.range( 0, BASE_SEGMENTS + 1 ).map( i => Bottle.getBaseFirstTipParametricProfilePoint( i / BASE_SEGMENTS ) ),
      ..._.range( 1, BASE_SEGMENTS + 1 ).map( i => Bottle.getBaseSecondTipParametricProfilePoint( i / BASE_SEGMENTS ) )
    ];
    baseTipProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
    context.stroke();
    context.beginPath();
    baseTipProfile.forEach( p => context.lineTo( mapX( p.x ), mapY( -p.y ) ) );
    context.stroke();

    const crossSectionTriangles = Bottle.getMainBottleCrossSectionTriangles( 0, 5 );
    _.range( 0, crossSectionTriangles.length, 3 ).forEach( i => {
      context.beginPath();
      context.moveTo( mapX( crossSectionTriangles[ i ].x ), mapY( crossSectionTriangles[ i ].y ) );
      context.lineTo( mapX( crossSectionTriangles[ i + 1 ].x ), mapY( crossSectionTriangles[ i + 1 ].y ) );
      context.lineTo( mapX( crossSectionTriangles[ i + 2 ].x ), mapY( crossSectionTriangles[ i + 2 ].y ) );
      context.closePath();
      context.fillStyle = '#aaa';
      context.fill();
      context.lineWidth = 0.2;
      context.strokeStyle = 'rgba(0,0,0,0.2)';
      context.stroke();
    } );

    context.lineWidth = 1;
    context.strokeStyle = 'brown';
    context.beginPath();
    Bottle.FLAT_INTERSECTION_VERTICES.forEach( p => context.lineTo( mapX( p.x ), mapY( p.y ) ) );
    context.closePath();
    context.stroke();

    while ( document.body.childNodes[ 0 ] ) {
      document.body.removeChild( document.body.childNodes[ 0 ] );
    }
    document.body.appendChild( canvas );
    document.body.style.background = 'white';

    return canvas;
  }

  public setRatios( widthRatio: number, heightRatio: number ): void {
    // See subclass for implementation
  }

  // The number to scale the original values by to get a 10L-volume bottle
  public static readonly TEN_LITER_SCALE_MULTIPLIER = TEN_LITER_SCALE_MULTIPLIER;

  // The maximum bounding radius for the 10L-volume bottle
  public static readonly MAX_RADIUS = FULL_RADIUS * TEN_LITER_SCALE_MULTIPLIER;

  // The maximum length for the 10L-volume bottle
  public static readonly MAX_LENGTH = BASE_TIP * TEN_LITER_SCALE_MULTIPLIER;

  // From the bottom to top, cross-sectional area and cumulative (displaced) volume
  public static readonly TEN_LITER_DISPLACED_AREAS = TEN_LITER_DISPLACED_AREAS;
  public static readonly TEN_LITER_DISPLACED_VOLUMES = TEN_LITER_DISPLACED_VOLUMES;

  public static readonly FLAT_INTERSECTION_VERTICES = FLAT_INTERSECTION_VERTICES;

  public static readonly BottleIO = new IOType( 'BottleIO', {
    valueType: Bottle,
    supertype: Mass.MassIO,
    documentation: 'Represents a bottle'
  } );
}

densityBuoyancyCommon.register( 'Bottle', Bottle );
