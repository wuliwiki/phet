// Copyright 2023, University of Colorado Boulder

/**
 * Unit tests
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import VariabilityModel from './VariabilityModel.js';
QUnit.module('TestVariabilityModel');
const approxEquals = (a, b) => {
  return Math.abs(a - b) < 1E-10;
};
QUnit.test('test variability model', assert => {
  assert.equal(VariabilityModel.meanAbsoluteDeviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 56 / 15); // uniform. 3.73333333333
  assert.ok(approxEquals(VariabilityModel.meanAbsoluteDeviation([1, 1, 3, 12, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15]), 3.92)); // skewed left
  assert.ok(approxEquals(VariabilityModel.meanAbsoluteDeviation([1, 1, 1, 1, 1, 1, 2, 2, 3, 8, 11, 14, 14, 14, 15]), 5.38666666666)); // skewed right
  assert.ok(approxEquals(VariabilityModel.meanAbsoluteDeviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 15]), 1.8133333333333)); // near worst case
  assert.ok(approxEquals(VariabilityModel.meanAbsoluteDeviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15]), 5.47555555555555)); // worst case
  assert.ok(approxEquals(VariabilityModel.meanAbsoluteDeviation([1, 1, 1, 15, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]), 5.47555555555555)); // worst case
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYXJpYWJpbGl0eU1vZGVsIiwiUVVuaXQiLCJtb2R1bGUiLCJhcHByb3hFcXVhbHMiLCJhIiwiYiIsIk1hdGgiLCJhYnMiLCJ0ZXN0IiwiYXNzZXJ0IiwiZXF1YWwiLCJtZWFuQWJzb2x1dGVEZXZpYXRpb24iLCJvayJdLCJzb3VyY2VzIjpbIlRlc3RWYXJpYWJpbGl0eU1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBVbml0IHRlc3RzXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZhcmlhYmlsaXR5TW9kZWwgZnJvbSAnLi9WYXJpYWJpbGl0eU1vZGVsLmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ1Rlc3RWYXJpYWJpbGl0eU1vZGVsJyApO1xyXG5cclxuY29uc3QgYXBwcm94RXF1YWxzID0gKCBhOiBudW1iZXIsIGI6IG51bWJlciApID0+IHtcclxuICByZXR1cm4gTWF0aC5hYnMoIGEgLSBiICkgPCAxRS0xMDtcclxufTtcclxuXHJcblFVbml0LnRlc3QoICd0ZXN0IHZhcmlhYmlsaXR5IG1vZGVsJywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgYXNzZXJ0LmVxdWFsKCBWYXJpYWJpbGl0eU1vZGVsLm1lYW5BYnNvbHV0ZURldmlhdGlvbiggWyAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1IF0gKSwgNTYgLyAxNSApOyAvLyB1bmlmb3JtLiAzLjczMzMzMzMzMzMzXHJcbiAgYXNzZXJ0Lm9rKCBhcHByb3hFcXVhbHMoIFZhcmlhYmlsaXR5TW9kZWwubWVhbkFic29sdXRlRGV2aWF0aW9uKCBbIDEsIDEsIDMsIDEyLCAxMywgMTMsIDEzLCAxMywgMTQsIDE0LCAxNSwgMTUsIDE1LCAxNSwgMTUgXSApLCAzLjkyICkgKTsgLy8gc2tld2VkIGxlZnRcclxuICBhc3NlcnQub2soIGFwcHJveEVxdWFscyggVmFyaWFiaWxpdHlNb2RlbC5tZWFuQWJzb2x1dGVEZXZpYXRpb24oIFsgMSwgMSwgMSwgMSwgMSwgMSwgMiwgMiwgMywgOCwgMTEsIDE0LCAxNCwgMTQsIDE1IF0gKSwgNS4zODY2NjY2NjY2NiApICk7IC8vIHNrZXdlZCByaWdodFxyXG4gIGFzc2VydC5vayggYXBwcm94RXF1YWxzKCBWYXJpYWJpbGl0eU1vZGVsLm1lYW5BYnNvbHV0ZURldmlhdGlvbiggWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAyLCAyLCAzLCAxNSBdICksIDEuODEzMzMzMzMzMzMzMyApICk7IC8vIG5lYXIgd29yc3QgY2FzZVxyXG4gIGFzc2VydC5vayggYXBwcm94RXF1YWxzKCBWYXJpYWJpbGl0eU1vZGVsLm1lYW5BYnNvbHV0ZURldmlhdGlvbiggWyAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxNSwgMTUsIDE1LCAxNSBdICksIDUuNDc1NTU1NTU1NTU1NTUgKSApOyAvLyB3b3JzdCBjYXNlXHJcbiAgYXNzZXJ0Lm9rKCBhcHByb3hFcXVhbHMoIFZhcmlhYmlsaXR5TW9kZWwubWVhbkFic29sdXRlRGV2aWF0aW9uKCBbIDEsIDEsIDEsIDE1LCAxLCAxNSwgMTUsIDE1LCAxNSwgMTUsIDE1LCAxNSwgMTUsIDE1LCAxNSBdICksIDUuNDc1NTU1NTU1NTU1NTUgKSApOyAvLyB3b3JzdCBjYXNlXHJcbn0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBRXBEQyxLQUFLLENBQUNDLE1BQU0sQ0FBRSxzQkFBdUIsQ0FBQztBQUV0QyxNQUFNQyxZQUFZLEdBQUdBLENBQUVDLENBQVMsRUFBRUMsQ0FBUyxLQUFNO0VBQy9DLE9BQU9DLElBQUksQ0FBQ0MsR0FBRyxDQUFFSCxDQUFDLEdBQUdDLENBQUUsQ0FBQyxHQUFHLEtBQUs7QUFDbEMsQ0FBQztBQUVESixLQUFLLENBQUNPLElBQUksQ0FBRSx3QkFBd0IsRUFBRUMsTUFBTSxJQUFJO0VBRTlDQSxNQUFNLENBQUNDLEtBQUssQ0FBRVYsZ0JBQWdCLENBQUNXLHFCQUFxQixDQUFFLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzFIRixNQUFNLENBQUNHLEVBQUUsQ0FBRVQsWUFBWSxDQUFFSCxnQkFBZ0IsQ0FBQ1cscUJBQXFCLENBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBRyxDQUFDLEVBQUUsSUFBSyxDQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzFJRixNQUFNLENBQUNHLEVBQUUsQ0FBRVQsWUFBWSxDQUFFSCxnQkFBZ0IsQ0FBQ1cscUJBQXFCLENBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBRyxDQUFDLEVBQUUsYUFBYyxDQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVJRixNQUFNLENBQUNHLEVBQUUsQ0FBRVQsWUFBWSxDQUFFSCxnQkFBZ0IsQ0FBQ1cscUJBQXFCLENBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBRyxDQUFDLEVBQUUsZUFBZ0IsQ0FBRSxDQUFDLENBQUMsQ0FBQztFQUMxSUYsTUFBTSxDQUFDRyxFQUFFLENBQUVULFlBQVksQ0FBRUgsZ0JBQWdCLENBQUNXLHFCQUFxQixDQUFFLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUcsQ0FBQyxFQUFFLGdCQUFpQixDQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzlJRixNQUFNLENBQUNHLEVBQUUsQ0FBRVQsWUFBWSxDQUFFSCxnQkFBZ0IsQ0FBQ1cscUJBQXFCLENBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBRyxDQUFDLEVBQUUsZ0JBQWlCLENBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkosQ0FBRSxDQUFDIn0=