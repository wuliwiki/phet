// Copyright 2023, University of Colorado Boulder

import { Line, ManualConstraint, Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import centerAndVariability from '../../centerAndVariability.js';
import CenterAndVariabilityStrings from '../../CenterAndVariabilityStrings.js';
import MedianBarNode from '../../common/view/MedianBarNode.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import Utils from '../../../../dot/js/Utils.js';
import CAVPlotNode from '../../common/view/CAVPlotNode.js';
import CAVConstants from '../../common/CAVConstants.js';
import CAVColors from '../../common/CAVColors.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import VariabilityReadoutText from './VariabilityReadoutText.js';
export default class MADNode extends CAVPlotNode {
  constructor(model, sceneModel, providedOptions) {
    const options = providedOptions;
    super(model, sceneModel, {
      dataPointFill: CAVColors.grayDataPointFill,
      ...options
    });
    if (options.parentContext === 'accordion') {
      const madReadoutValueProperty = new DerivedProperty([sceneModel.meanValueProperty], meanValue => {
        return meanValue ? `${meanValue}` : '?';
      });
      const madReadoutText = new VariabilityReadoutText(madReadoutValueProperty, CenterAndVariabilityStrings.meanEqualsValuePatternStringProperty, {
        fill: CAVColors.meanColorProperty,
        visibleProperty: model.isShowingMADProperty,
        right: this.left,
        y: this.centerY,
        tandem: options.tandem.createTandem('rangeReadoutText')
      });
      this.addChild(madReadoutText);
    }
    const needAtLeastOneKickText = new Text(CenterAndVariabilityStrings.needAtLeastOneKickStringProperty, {
      fontSize: 18,
      top: 100,
      maxWidth: CAVConstants.INFO_DIALOG_MAX_TEXT_WIDTH
    });
    ManualConstraint.create(this, [needAtLeastOneKickText], textProxy => {
      textProxy.center = this.modelViewTransform.modelToViewXY(8, 2);
    });
    this.addChild(needAtLeastOneKickText);
    const madRectangle = new Rectangle(0, 50, 100, 72, {
      fill: '#e0c0f5',
      stroke: 'lightGray'
    });
    const leftBar = new MedianBarNode({
      notchDirection: 'down',
      barStyle: 'continuous',
      stroke: 'black',
      lineWidth: 1
    });
    const rightBar = new MedianBarNode({
      notchDirection: 'down',
      barStyle: 'continuous',
      stroke: 'black',
      lineWidth: 1
    });
    const leftReadout = new Text('', {
      font: new PhetFont(13)
    });
    const rightReadout = new Text('', {
      font: new PhetFont(13)
    });
    const lineContainer = new Node();
    this.addChild(madRectangle);
    madRectangle.moveToBack();
    this.addChild(lineContainer);
    this.addChild(leftBar);
    this.addChild(rightBar);
    this.addChild(leftReadout);
    this.addChild(rightReadout);
    const update = () => {
      const children = [];
      const sortedDots = _.sortBy(sceneModel.getActiveSoccerBalls().filter(soccerBall => soccerBall.valueProperty.value !== null), object => object.valueProperty.value);
      if (sortedDots.length > 0) {
        const mean = _.mean(sortedDots.map(dot => dot.valueProperty.value));

        // Underneath the accordion box title
        let y = 55;
        sortedDots.forEach(dot => {
          const x1 = this.modelViewTransform.modelToViewX(dot.valueProperty.value);
          const x2 = this.modelViewTransform.modelToViewX(mean);
          const line = new Line(x1, y, x2, y, {
            stroke: 'black'
          });
          children.push(line);
          if (options.parentContext === 'info') {
            const distanceToMean = Math.abs(dot.valueProperty.value - sceneModel.meanValueProperty.value);
            const text = new Text(Utils.toFixed(distanceToMean, 1), {
              font: new PhetFont(13),
              centerBottom: line.centerTop
            });
            children.push(text);
          }

          // Enough spacing so they don't overlap the bottom row of data points
          y += options.parentContext === 'info' ? 15 : 4.2;
        });
      }
      lineContainer.children = children;
      lineContainer.visible = sortedDots.length > 0;
      const mad = sceneModel.madValueProperty.value;
      madRectangle.rectWidth = this.modelViewTransform.modelToViewDeltaX(mad === null ? 0 : mad * 2);
      madRectangle.visible = (options.parentContext === 'info' || model.isShowingMADProperty.value) && mad !== null;
      if (mad !== null) {
        const viewCenterX = this.modelViewTransform.modelToViewX(sceneModel.meanValueProperty.value);
        const viewFloorY = this.modelViewTransform.modelToViewY(0);
        if (options.parentContext === 'info') {
          lineContainer.bottom = viewFloorY - 10;
          madRectangle.rectHeight = children.length > 0 ? lineContainer.height : 0;
        }
        madRectangle.centerX = viewCenterX;
        madRectangle.bottom = this.modelViewTransform.modelToViewY(0);
        leftReadout.string = Utils.toFixed(mad, 1);
        rightReadout.string = Utils.toFixed(mad, 1);
        leftBar.setMedianBarShape(madRectangle.top - MedianBarNode.NOTCH_HEIGHT - 2, madRectangle.left, 0, viewCenterX, false);
        rightBar.setMedianBarShape(madRectangle.top - MedianBarNode.NOTCH_HEIGHT - 2, viewCenterX, 0, madRectangle.right, false);
        leftReadout.centerBottom = leftBar.centerTop;
        rightReadout.centerBottom = rightBar.centerTop;
      }
      leftBar.visible = (options.parentContext === 'info' || model.isShowingMADProperty.value) && mad !== null && sortedDots.length > 1;
      rightBar.visible = (options.parentContext === 'info' || model.isShowingMADProperty.value) && mad !== null && sortedDots.length > 1;
      leftReadout.visible = (options.parentContext === 'info' || model.isShowingMADProperty.value) && mad !== null && sortedDots.length > 1;
      rightReadout.visible = (options.parentContext === 'info' || model.isShowingMADProperty.value) && mad !== null && sortedDots.length > 1;
      needAtLeastOneKickText.visible = sceneModel.numberOfDataPointsProperty.value === 0 && (options.parentContext === 'info' || model.isShowingMADProperty.value);
    };
    sceneModel.objectChangedEmitter.addListener(update);
    model.isShowingMADProperty.link(update);
    model.selectedVariabilityProperty.link(update);
    sceneModel.numberOfDataPointsProperty.link(update);
    sceneModel.meanValueProperty.link(update);
    sceneModel.madValueProperty.link(update);
  }
}
centerAndVariability.register('MADNode', MADNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lIiwiTWFudWFsQ29uc3RyYWludCIsIk5vZGUiLCJSZWN0YW5nbGUiLCJUZXh0IiwiY2VudGVyQW5kVmFyaWFiaWxpdHkiLCJDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MiLCJNZWRpYW5CYXJOb2RlIiwiUGhldEZvbnQiLCJVdGlscyIsIkNBVlBsb3ROb2RlIiwiQ0FWQ29uc3RhbnRzIiwiQ0FWQ29sb3JzIiwiRGVyaXZlZFByb3BlcnR5IiwiVmFyaWFiaWxpdHlSZWFkb3V0VGV4dCIsIk1BRE5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwic2NlbmVNb2RlbCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJkYXRhUG9pbnRGaWxsIiwiZ3JheURhdGFQb2ludEZpbGwiLCJwYXJlbnRDb250ZXh0IiwibWFkUmVhZG91dFZhbHVlUHJvcGVydHkiLCJtZWFuVmFsdWVQcm9wZXJ0eSIsIm1lYW5WYWx1ZSIsIm1hZFJlYWRvdXRUZXh0IiwibWVhbkVxdWFsc1ZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwiZmlsbCIsIm1lYW5Db2xvclByb3BlcnR5IiwidmlzaWJsZVByb3BlcnR5IiwiaXNTaG93aW5nTUFEUHJvcGVydHkiLCJyaWdodCIsImxlZnQiLCJ5IiwiY2VudGVyWSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImFkZENoaWxkIiwibmVlZEF0TGVhc3RPbmVLaWNrVGV4dCIsIm5lZWRBdExlYXN0T25lS2lja1N0cmluZ1Byb3BlcnR5IiwiZm9udFNpemUiLCJ0b3AiLCJtYXhXaWR0aCIsIklORk9fRElBTE9HX01BWF9URVhUX1dJRFRIIiwiY3JlYXRlIiwidGV4dFByb3h5IiwiY2VudGVyIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibW9kZWxUb1ZpZXdYWSIsIm1hZFJlY3RhbmdsZSIsInN0cm9rZSIsImxlZnRCYXIiLCJub3RjaERpcmVjdGlvbiIsImJhclN0eWxlIiwibGluZVdpZHRoIiwicmlnaHRCYXIiLCJsZWZ0UmVhZG91dCIsImZvbnQiLCJyaWdodFJlYWRvdXQiLCJsaW5lQ29udGFpbmVyIiwibW92ZVRvQmFjayIsInVwZGF0ZSIsImNoaWxkcmVuIiwic29ydGVkRG90cyIsIl8iLCJzb3J0QnkiLCJnZXRBY3RpdmVTb2NjZXJCYWxscyIsImZpbHRlciIsInNvY2NlckJhbGwiLCJ2YWx1ZVByb3BlcnR5IiwidmFsdWUiLCJvYmplY3QiLCJsZW5ndGgiLCJtZWFuIiwibWFwIiwiZG90IiwiZm9yRWFjaCIsIngxIiwibW9kZWxUb1ZpZXdYIiwieDIiLCJsaW5lIiwicHVzaCIsImRpc3RhbmNlVG9NZWFuIiwiTWF0aCIsImFicyIsInRleHQiLCJ0b0ZpeGVkIiwiY2VudGVyQm90dG9tIiwiY2VudGVyVG9wIiwidmlzaWJsZSIsIm1hZCIsIm1hZFZhbHVlUHJvcGVydHkiLCJyZWN0V2lkdGgiLCJtb2RlbFRvVmlld0RlbHRhWCIsInZpZXdDZW50ZXJYIiwidmlld0Zsb29yWSIsIm1vZGVsVG9WaWV3WSIsImJvdHRvbSIsInJlY3RIZWlnaHQiLCJoZWlnaHQiLCJjZW50ZXJYIiwic3RyaW5nIiwic2V0TWVkaWFuQmFyU2hhcGUiLCJOT1RDSF9IRUlHSFQiLCJudW1iZXJPZkRhdGFQb2ludHNQcm9wZXJ0eSIsIm9iamVjdENoYW5nZWRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJsaW5rIiwic2VsZWN0ZWRWYXJpYWJpbGl0eVByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNQUROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbmltcG9ydCB7IExpbmUsIE1hbnVhbENvbnN0cmFpbnQsIE5vZGUsIFJlY3RhbmdsZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBjZW50ZXJBbmRWYXJpYWJpbGl0eSBmcm9tICcuLi8uLi9jZW50ZXJBbmRWYXJpYWJpbGl0eS5qcyc7XHJcbmltcG9ydCBWYXJpYWJpbGl0eU1vZGVsIGZyb20gJy4uL21vZGVsL1ZhcmlhYmlsaXR5TW9kZWwuanMnO1xyXG5pbXBvcnQgQ2VudGVyQW5kVmFyaWFiaWxpdHlTdHJpbmdzIGZyb20gJy4uLy4uL0NlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBNZWRpYW5CYXJOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L01lZGlhbkJhck5vZGUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBDQVZQbG90Tm9kZSwgeyBDQVZQbG90T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0NBVlBsb3ROb2RlLmpzJztcclxuaW1wb3J0IENBVkNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vQ0FWQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgQ0FWQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9DQVZDb2xvcnMuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFZhcmlhYmlsaXR5UmVhZG91dFRleHQgZnJvbSAnLi9WYXJpYWJpbGl0eVJlYWRvdXRUZXh0LmpzJztcclxuaW1wb3J0IFZhcmlhYmlsaXR5U2NlbmVNb2RlbCBmcm9tICcuLi9tb2RlbC9WYXJpYWJpbGl0eVNjZW5lTW9kZWwuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBwYXJlbnRDb250ZXh0OiAnYWNjb3JkaW9uJyB8ICdpbmZvJztcclxufTtcclxudHlwZSBSYW5nZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PENBVlBsb3RPcHRpb25zLCAnZGF0YVBvaW50RmlsbCc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTUFETm9kZSBleHRlbmRzIENBVlBsb3ROb2RlIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBWYXJpYWJpbGl0eU1vZGVsLCBzY2VuZU1vZGVsOiBWYXJpYWJpbGl0eVNjZW5lTW9kZWwsIHByb3ZpZGVkT3B0aW9uczogUmFuZ2VOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gcHJvdmlkZWRPcHRpb25zO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgc2NlbmVNb2RlbCwge1xyXG4gICAgICBkYXRhUG9pbnRGaWxsOiBDQVZDb2xvcnMuZ3JheURhdGFQb2ludEZpbGwsXHJcbiAgICAgIC4uLm9wdGlvbnNcclxuICAgIH0gKTtcclxuXHJcbiAgICBpZiAoIG9wdGlvbnMucGFyZW50Q29udGV4dCA9PT0gJ2FjY29yZGlvbicgKSB7XHJcbiAgICAgIGNvbnN0IG1hZFJlYWRvdXRWYWx1ZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBzY2VuZU1vZGVsLm1lYW5WYWx1ZVByb3BlcnR5IF0sIG1lYW5WYWx1ZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG1lYW5WYWx1ZSA/IGAke21lYW5WYWx1ZX1gIDogJz8nO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICBjb25zdCBtYWRSZWFkb3V0VGV4dCA9IG5ldyBWYXJpYWJpbGl0eVJlYWRvdXRUZXh0KCBtYWRSZWFkb3V0VmFsdWVQcm9wZXJ0eSxcclxuICAgICAgICBDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MubWVhbkVxdWFsc1ZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgICBmaWxsOiBDQVZDb2xvcnMubWVhbkNvbG9yUHJvcGVydHksXHJcbiAgICAgICAgICB2aXNpYmxlUHJvcGVydHk6IG1vZGVsLmlzU2hvd2luZ01BRFByb3BlcnR5LFxyXG4gICAgICAgICAgcmlnaHQ6IHRoaXMubGVmdCxcclxuICAgICAgICAgIHk6IHRoaXMuY2VudGVyWSxcclxuICAgICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncmFuZ2VSZWFkb3V0VGV4dCcgKVxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIG1hZFJlYWRvdXRUZXh0ICk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNvbnN0IG5lZWRBdExlYXN0T25lS2lja1RleHQgPSBuZXcgVGV4dCggQ2VudGVyQW5kVmFyaWFiaWxpdHlTdHJpbmdzLm5lZWRBdExlYXN0T25lS2lja1N0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnRTaXplOiAxOCxcclxuICAgICAgdG9wOiAxMDAsXHJcbiAgICAgIG1heFdpZHRoOiBDQVZDb25zdGFudHMuSU5GT19ESUFMT0dfTUFYX1RFWFRfV0lEVEhcclxuICAgIH0gKTtcclxuICAgIE1hbnVhbENvbnN0cmFpbnQuY3JlYXRlKCB0aGlzLCBbIG5lZWRBdExlYXN0T25lS2lja1RleHQgXSwgdGV4dFByb3h5ID0+IHtcclxuICAgICAgdGV4dFByb3h5LmNlbnRlciA9IHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WFkoIDgsIDIgKTtcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5lZWRBdExlYXN0T25lS2lja1RleHQgKTtcclxuXHJcbiAgICBjb25zdCBtYWRSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCA1MCwgMTAwLCA3Miwge1xyXG4gICAgICBmaWxsOiAnI2UwYzBmNScsXHJcbiAgICAgIHN0cm9rZTogJ2xpZ2h0R3JheSdcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsZWZ0QmFyID0gbmV3IE1lZGlhbkJhck5vZGUoIHtcclxuICAgICAgbm90Y2hEaXJlY3Rpb246ICdkb3duJyxcclxuICAgICAgYmFyU3R5bGU6ICdjb250aW51b3VzJyxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDFcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHJpZ2h0QmFyID0gbmV3IE1lZGlhbkJhck5vZGUoIHtcclxuICAgICAgbm90Y2hEaXJlY3Rpb246ICdkb3duJyxcclxuICAgICAgYmFyU3R5bGU6ICdjb250aW51b3VzJyxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDFcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsZWZ0UmVhZG91dCA9IG5ldyBUZXh0KCAnJywge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDEzIClcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHJpZ2h0UmVhZG91dCA9IG5ldyBUZXh0KCAnJywge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDEzIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsaW5lQ29udGFpbmVyID0gbmV3IE5vZGUoKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG1hZFJlY3RhbmdsZSApO1xyXG4gICAgbWFkUmVjdGFuZ2xlLm1vdmVUb0JhY2soKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGxpbmVDb250YWluZXIgKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBsZWZ0QmFyICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCByaWdodEJhciApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbGVmdFJlYWRvdXQgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHJpZ2h0UmVhZG91dCApO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZSA9ICgpID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IGNoaWxkcmVuOiBOb2RlW10gPSBbXTtcclxuXHJcbiAgICAgIGNvbnN0IHNvcnRlZERvdHMgPSBfLnNvcnRCeSggc2NlbmVNb2RlbC5nZXRBY3RpdmVTb2NjZXJCYWxscygpLmZpbHRlciggc29jY2VyQmFsbCA9PiBzb2NjZXJCYWxsLnZhbHVlUHJvcGVydHkudmFsdWUgIT09IG51bGwgKSxcclxuICAgICAgICBvYmplY3QgPT4gb2JqZWN0LnZhbHVlUHJvcGVydHkudmFsdWUgKTtcclxuXHJcbiAgICAgIGlmICggc29ydGVkRG90cy5sZW5ndGggPiAwICkge1xyXG4gICAgICAgIGNvbnN0IG1lYW4gPSBfLm1lYW4oIHNvcnRlZERvdHMubWFwKCBkb3QgPT4gZG90LnZhbHVlUHJvcGVydHkudmFsdWUgKSApO1xyXG5cclxuICAgICAgICAvLyBVbmRlcm5lYXRoIHRoZSBhY2NvcmRpb24gYm94IHRpdGxlXHJcbiAgICAgICAgbGV0IHkgPSA1NTtcclxuICAgICAgICBzb3J0ZWREb3RzLmZvckVhY2goIGRvdCA9PiB7XHJcbiAgICAgICAgICBjb25zdCB4MSA9IHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggZG90LnZhbHVlUHJvcGVydHkudmFsdWUhICk7XHJcbiAgICAgICAgICBjb25zdCB4MiA9IHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggbWVhbiApO1xyXG4gICAgICAgICAgY29uc3QgbGluZSA9IG5ldyBMaW5lKCB4MSwgeSwgeDIsIHksIHtcclxuICAgICAgICAgICAgc3Ryb2tlOiAnYmxhY2snXHJcbiAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgY2hpbGRyZW4ucHVzaCggbGluZSApO1xyXG5cclxuICAgICAgICAgIGlmICggb3B0aW9ucy5wYXJlbnRDb250ZXh0ID09PSAnaW5mbycgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlVG9NZWFuID0gTWF0aC5hYnMoIGRvdC52YWx1ZVByb3BlcnR5LnZhbHVlISAtIHNjZW5lTW9kZWwubWVhblZhbHVlUHJvcGVydHkudmFsdWUhICk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dCggVXRpbHMudG9GaXhlZCggZGlzdGFuY2VUb01lYW4sIDEgKSwge1xyXG4gICAgICAgICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTMgKSxcclxuICAgICAgICAgICAgICBjZW50ZXJCb3R0b206IGxpbmUuY2VudGVyVG9wXHJcbiAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCggdGV4dCApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEVub3VnaCBzcGFjaW5nIHNvIHRoZXkgZG9uJ3Qgb3ZlcmxhcCB0aGUgYm90dG9tIHJvdyBvZiBkYXRhIHBvaW50c1xyXG4gICAgICAgICAgeSArPSBvcHRpb25zLnBhcmVudENvbnRleHQgPT09ICdpbmZvJyA/IDE1IDogNC4yO1xyXG4gICAgICAgIH0gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGluZUNvbnRhaW5lci5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICBsaW5lQ29udGFpbmVyLnZpc2libGUgPSBzb3J0ZWREb3RzLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgICBjb25zdCBtYWQgPSBzY2VuZU1vZGVsLm1hZFZhbHVlUHJvcGVydHkudmFsdWU7XHJcblxyXG4gICAgICBtYWRSZWN0YW5nbGUucmVjdFdpZHRoID0gdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVgoIG1hZCA9PT0gbnVsbCA/IDAgOiBtYWQgKiAyICk7XHJcbiAgICAgIG1hZFJlY3RhbmdsZS52aXNpYmxlID0gKCBvcHRpb25zLnBhcmVudENvbnRleHQgPT09ICdpbmZvJyB8fCBtb2RlbC5pc1Nob3dpbmdNQURQcm9wZXJ0eS52YWx1ZSApICYmIG1hZCAhPT0gbnVsbDtcclxuXHJcbiAgICAgIGlmICggbWFkICE9PSBudWxsICkge1xyXG4gICAgICAgIGNvbnN0IHZpZXdDZW50ZXJYID0gdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBzY2VuZU1vZGVsLm1lYW5WYWx1ZVByb3BlcnR5LnZhbHVlISApO1xyXG4gICAgICAgIGNvbnN0IHZpZXdGbG9vclkgPSB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIDAgKTtcclxuXHJcbiAgICAgICAgaWYgKCBvcHRpb25zLnBhcmVudENvbnRleHQgPT09ICdpbmZvJyApIHtcclxuICAgICAgICAgIGxpbmVDb250YWluZXIuYm90dG9tID0gdmlld0Zsb29yWSAtIDEwO1xyXG4gICAgICAgICAgbWFkUmVjdGFuZ2xlLnJlY3RIZWlnaHQgPSBjaGlsZHJlbi5sZW5ndGggPiAwID8gbGluZUNvbnRhaW5lci5oZWlnaHQgOiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWFkUmVjdGFuZ2xlLmNlbnRlclggPSB2aWV3Q2VudGVyWDtcclxuICAgICAgICBtYWRSZWN0YW5nbGUuYm90dG9tID0gdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCAwICk7XHJcbiAgICAgICAgbGVmdFJlYWRvdXQuc3RyaW5nID0gVXRpbHMudG9GaXhlZCggbWFkLCAxICk7XHJcbiAgICAgICAgcmlnaHRSZWFkb3V0LnN0cmluZyA9IFV0aWxzLnRvRml4ZWQoIG1hZCwgMSApO1xyXG5cclxuICAgICAgICBsZWZ0QmFyLnNldE1lZGlhbkJhclNoYXBlKCBtYWRSZWN0YW5nbGUudG9wIC0gTWVkaWFuQmFyTm9kZS5OT1RDSF9IRUlHSFQgLSAyLCBtYWRSZWN0YW5nbGUubGVmdCwgMCwgdmlld0NlbnRlclgsIGZhbHNlICk7XHJcbiAgICAgICAgcmlnaHRCYXIuc2V0TWVkaWFuQmFyU2hhcGUoIG1hZFJlY3RhbmdsZS50b3AgLSBNZWRpYW5CYXJOb2RlLk5PVENIX0hFSUdIVCAtIDIsIHZpZXdDZW50ZXJYLCAwLCBtYWRSZWN0YW5nbGUucmlnaHQsIGZhbHNlICk7XHJcblxyXG4gICAgICAgIGxlZnRSZWFkb3V0LmNlbnRlckJvdHRvbSA9IGxlZnRCYXIuY2VudGVyVG9wO1xyXG4gICAgICAgIHJpZ2h0UmVhZG91dC5jZW50ZXJCb3R0b20gPSByaWdodEJhci5jZW50ZXJUb3A7XHJcbiAgICAgIH1cclxuICAgICAgbGVmdEJhci52aXNpYmxlID0gKCBvcHRpb25zLnBhcmVudENvbnRleHQgPT09ICdpbmZvJyB8fCBtb2RlbC5pc1Nob3dpbmdNQURQcm9wZXJ0eS52YWx1ZSApICYmIG1hZCAhPT0gbnVsbCAmJiBzb3J0ZWREb3RzLmxlbmd0aCA+IDE7XHJcbiAgICAgIHJpZ2h0QmFyLnZpc2libGUgPSAoIG9wdGlvbnMucGFyZW50Q29udGV4dCA9PT0gJ2luZm8nIHx8IG1vZGVsLmlzU2hvd2luZ01BRFByb3BlcnR5LnZhbHVlICkgJiYgbWFkICE9PSBudWxsICYmIHNvcnRlZERvdHMubGVuZ3RoID4gMTtcclxuICAgICAgbGVmdFJlYWRvdXQudmlzaWJsZSA9ICggb3B0aW9ucy5wYXJlbnRDb250ZXh0ID09PSAnaW5mbycgfHwgbW9kZWwuaXNTaG93aW5nTUFEUHJvcGVydHkudmFsdWUgKSAmJiBtYWQgIT09IG51bGwgJiYgc29ydGVkRG90cy5sZW5ndGggPiAxO1xyXG4gICAgICByaWdodFJlYWRvdXQudmlzaWJsZSA9ICggb3B0aW9ucy5wYXJlbnRDb250ZXh0ID09PSAnaW5mbycgfHwgbW9kZWwuaXNTaG93aW5nTUFEUHJvcGVydHkudmFsdWUgKSAmJiBtYWQgIT09IG51bGwgJiYgc29ydGVkRG90cy5sZW5ndGggPiAxO1xyXG5cclxuICAgICAgbmVlZEF0TGVhc3RPbmVLaWNrVGV4dC52aXNpYmxlID0gc2NlbmVNb2RlbC5udW1iZXJPZkRhdGFQb2ludHNQcm9wZXJ0eS52YWx1ZSA9PT0gMCAmJiAoIG9wdGlvbnMucGFyZW50Q29udGV4dCA9PT0gJ2luZm8nIHx8IG1vZGVsLmlzU2hvd2luZ01BRFByb3BlcnR5LnZhbHVlICk7XHJcbiAgICB9O1xyXG4gICAgc2NlbmVNb2RlbC5vYmplY3RDaGFuZ2VkRW1pdHRlci5hZGRMaXN0ZW5lciggdXBkYXRlICk7XHJcbiAgICBtb2RlbC5pc1Nob3dpbmdNQURQcm9wZXJ0eS5saW5rKCB1cGRhdGUgKTtcclxuICAgIG1vZGVsLnNlbGVjdGVkVmFyaWFiaWxpdHlQcm9wZXJ0eS5saW5rKCB1cGRhdGUgKTtcclxuICAgIHNjZW5lTW9kZWwubnVtYmVyT2ZEYXRhUG9pbnRzUHJvcGVydHkubGluayggdXBkYXRlICk7XHJcbiAgICBzY2VuZU1vZGVsLm1lYW5WYWx1ZVByb3BlcnR5LmxpbmsoIHVwZGF0ZSApO1xyXG4gICAgc2NlbmVNb2RlbC5tYWRWYWx1ZVByb3BlcnR5LmxpbmsoIHVwZGF0ZSApO1xyXG4gIH1cclxufVxyXG5cclxuY2VudGVyQW5kVmFyaWFiaWxpdHkucmVnaXN0ZXIoICdNQUROb2RlJywgTUFETm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsSUFBSSxFQUFFQyxnQkFBZ0IsRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDakcsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBRWhFLE9BQU9DLDJCQUEyQixNQUFNLHNDQUFzQztBQUM5RSxPQUFPQyxhQUFhLE1BQU0sb0NBQW9DO0FBQzlELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxXQUFXLE1BQTBCLGtDQUFrQztBQUM5RSxPQUFPQyxZQUFZLE1BQU0sOEJBQThCO0FBRXZELE9BQU9DLFNBQVMsTUFBTSwyQkFBMkI7QUFDakQsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFRaEUsZUFBZSxNQUFNQyxPQUFPLFNBQVNMLFdBQVcsQ0FBQztFQUN4Q00sV0FBV0EsQ0FBRUMsS0FBdUIsRUFBRUMsVUFBaUMsRUFBRUMsZUFBaUMsRUFBRztJQUVsSCxNQUFNQyxPQUFPLEdBQUdELGVBQWU7SUFFL0IsS0FBSyxDQUFFRixLQUFLLEVBQUVDLFVBQVUsRUFBRTtNQUN4QkcsYUFBYSxFQUFFVCxTQUFTLENBQUNVLGlCQUFpQjtNQUMxQyxHQUFHRjtJQUNMLENBQUUs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