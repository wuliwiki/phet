// Copyright 2022-2023, University of Colorado Boulder

/**
 * VariabilityScreenView is the ScreenView for the 'Variability' screen, which has four different scenes with four different
 * distributions.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import centerAndVariability from '../../centerAndVariability.js';
import CAVColors from '../../common/CAVColors.js';
import CenterAndVariabilityStrings from '../../CenterAndVariabilityStrings.js';
import { AlignGroup, ManualConstraint } from '../../../../scenery/js/imports.js';
import SceneRadioButtonGroup from './SceneRadioButtonGroup.js';
import VariabilityMeasureRadioButtonGroup from './VariabilityMeasureRadioButtonGroup.js';
import CAVScreenView from '../../common/view/CAVScreenView.js';
import VariabilityAccordionBox from './VariabilityAccordionBox.js';
import BottomRepresentationCheckboxGroup from '../../common/view/BottomRepresentationCheckboxGroup.js';
import CAVConstants from '../../common/CAVConstants.js';
export default class VariabilityScreenView extends CAVScreenView {
  constructor(model, providedOptions) {
    const options = optionize()({
      questionBarOptions: {
        barFill: CAVColors.variabilityQuestionBarFillColorProperty,
        questionString: CenterAndVariabilityStrings.variabilityQuestionStringProperty
      }
    }, providedOptions);
    const variabilityMeasureRadioButtonGroup = new VariabilityMeasureRadioButtonGroup(model.selectedVariabilityProperty, {
      left: 10,
      tandem: options.tandem.createTandem('variabilityMeasureRadioButtonGroup')
    });
    super(model, options);
    this.setAccordionBoxWithAlignedContent(new VariabilityAccordionBox(model, this.layoutBounds, options.tandem.createTandem('accordionBox'), this.questionBar.bottom + CAVConstants.SCREEN_VIEW_Y_MARGIN));
    ManualConstraint.create(this, [variabilityMeasureRadioButtonGroup, this.accordionBox], (variabilityRadioButtonGroupWrapper, accordionBoxWrapper) => {
      variabilityRadioButtonGroupWrapper.centerY = accordionBoxWrapper.centerY;
    });
    const sceneRadioButtonGroup = new SceneRadioButtonGroup(model.variabilitySceneModels, model.selectedSceneModelProperty, {
      left: 10,
      tandem: options.tandem.createTandem('sceneRadioButtonGroup')
    });

    // Float above the ground
    ManualConstraint.create(this, [this.playAreaNumberLineNode, sceneRadioButtonGroup], (lowerNumberLineWrapper, sceneRadioButtonGroupWrapper) => {
      sceneRadioButtonGroupWrapper.bottom = lowerNumberLineWrapper.top - 10;
    });
    this.addChild(sceneRadioButtonGroup);
    this.addChild(variabilityMeasureRadioButtonGroup);
    const iconGroup = new AlignGroup();
    this.setBottomCheckboxGroup([BottomRepresentationCheckboxGroup.getVariabilityCheckboxItem(iconGroup, model), BottomRepresentationCheckboxGroup.getMedianCheckboxItem(iconGroup, model), BottomRepresentationCheckboxGroup.getMeanCheckboxItem(iconGroup, model)]);
  }
}
centerAndVariability.register('VariabilityScreenView', VariabilityScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,