// Copyright 2023, University of Colorado Boulder

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import MedianBarNode from '../../common/view/MedianBarNode.js';
import { Circle, Line, Node, Rectangle, Text, VBox } from '../../../../scenery/js/imports.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import centerAndVariability from '../../centerAndVariability.js';
import CenterAndVariabilityStrings from '../../CenterAndVariabilityStrings.js';
import CAVPlotNode from '../../common/view/CAVPlotNode.js';
import CAVColors from '../../common/CAVColors.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import VariabilityReadoutText from './VariabilityReadoutText.js';
export default class IQRNode extends CAVPlotNode {
  constructor(model, sceneModel, providedOptions) {
    const options = providedOptions;
    super(model, sceneModel, {
      dataPointFill: CAVColors.grayDataPointFill,
      ...options
    });
    if (providedOptions.parentContext === 'accordion') {
      const textReadoutGroup = new VBox({
        x: -110,
        y: this.centerY - 20,
        align: 'left',
        spacing: 10
      });
      this.addChild(textReadoutGroup);
      const medianReadoutValueProperty = new DerivedProperty([sceneModel.numberOfDataPointsProperty, sceneModel.medianValueProperty], numberOfDataPoints => {
        return numberOfDataPoints >= 1 ? `${sceneModel.medianValueProperty.value}` : '?';
      });
      const iqrReadoutValueProperty = new DerivedProperty([sceneModel.iqrValueProperty], iqrValue => {
        return iqrValue ? `${iqrValue}` : '?';
      });
      const medianReadoutText = new VariabilityReadoutText(medianReadoutValueProperty, CenterAndVariabilityStrings.medianEqualsValuePatternStringProperty, {
        fill: CAVColors.medianColorProperty,
        tandem: options.tandem.createTandem('medianReadoutText')
      });
      const iqrReadoutText = new VariabilityReadoutText(iqrReadoutValueProperty, CenterAndVariabilityStrings.iqrEqualsValuePatternStringProperty, {
        fill: CAVColors.iqrColorProperty,
        visibleProperty: model.isShowingIQRProperty,
        tandem: options.tandem.createTandem('iqrReadoutText')
      });
      textReadoutGroup.addChild(medianReadoutText);
      textReadoutGroup.addChild(iqrReadoutText);
    }
    const needAtLeastFiveKicksOffsetY = options.parentContext === 'info' ? 90 : 20;
    const needAtLeastFiveKicks = new Text(CenterAndVariabilityStrings.needAtLeastFiveKicksStringProperty, {
      fontSize: 18,
      centerY: this.centerY - needAtLeastFiveKicksOffsetY
    });
    this.addChild(needAtLeastFiveKicks);
    const iqrBar = new MedianBarNode({
      notchDirection: 'down',
      barStyle: 'continuous',
      stroke: 'black',
      lineWidth: 1
    });
    const iqrBarLabel = new Text('', {
      font: new PhetFont(16)
    });
    const iqrRectangle = new Rectangle(0, 0, 0, 0, {
      fill: CAVColors.quartileColorProperty
    });
    const boxWhiskerLabelArrow = fillColor => {
      return new ArrowNode(0, 0, 0, 26, {
        fill: fillColor,
        stroke: null,
        lineWidth: 0.2,
        headHeight: 12,
        headWidth: 15,
        maxHeight: 18
      });
    };
    const boxWhiskerLabelText = (fillColor, labelTextProperty, isQuartile) => {
      const textNodeChildren = [new Text(labelTextProperty, {
        fontSize: 16,
        fill: fillColor,
        centerX: 0,
        centerY: 0
      })];
      if (isQuartile) {
        textNodeChildren.unshift(new Circle(12, {
          fill: CAVColors.quartileColorProperty
        }));
      }
      return new Node({
        children: textNodeChildren,
        centerY: isQuartile ? -14 : -10
      });
    };
    const boxWhiskerLabel = (fillColor, labelTextProperty, isQuartile) => {
      const arrowNode = boxWhiskerLabelArrow(fillColor);
      const textNode = boxWhiskerLabelText(fillColor, labelTextProperty, isQuartile);
      return new Node({
        children: [textNode, arrowNode]
      });
    };
    const BOX_CENTER_Y = options.parentContext === 'info' ? -20 : 78;
    const BOX_HEIGHT = 25;
    const END_CAP_HEIGHT = 15;
    const BOX_STROKE_WIDTH = 2;
    const boxWhiskerMedianLine = new Line(0, -BOX_HEIGHT / 2, 0, BOX_HEIGHT / 2, {
      stroke: CAVColors.boxWhiskerStrokeColorProperty,
      lineWidth: BOX_STROKE_WIDTH
    });
    const boxWhiskerBox = new Rectangle(0, -BOX_HEIGHT / 2, 100, BOX_HEIGHT, {
      stroke: CAVColors.boxWhiskerStrokeColorProperty,
      lineWidth: BOX_STROKE_WIDTH
    });
    const boxWhiskerLineLeft = new Line(0, 0, 0, 0, {
      stroke: CAVColors.boxWhiskerStrokeColorProperty,
      lineWidth: BOX_STROKE_WIDTH
    });
    const boxWhiskerLineRight = new Line(0, 0, 0, 0, {
      stroke: CAVColors.boxWhiskerStrokeColorProperty,
      lineWidth: BOX_STROKE_WIDTH
    });
    const boxWhiskerEndCapLeft = new Line(0, -END_CAP_HEIGHT / 2, 0, END_CAP_HEIGHT / 2, {
      stroke: CAVColors.boxWhiskerStrokeColorProperty,
      lineWidth: BOX_STROKE_WIDTH
    });
    const boxWhiskerEndCapRight = new Line(0, -END_CAP_HEIGHT / 2, 0, END_CAP_HEIGHT / 2, {
      stroke: CAVColors.boxWhiskerStrokeColorProperty,
      lineWidth: BOX_STROKE_WIDTH
    });
    const boxWhiskerNode = new Node();
    boxWhiskerNode.y = BOX_CENTER_Y;
    const medianArrowNode = boxWhiskerLabelArrow(CAVColors.medianColorProperty);
    const medianTextNode = boxWhiskerLabelText(CAVColors.medianColorProperty, CenterAndVariabilityStrings.medianStringProperty, false);
    const medianLabelNode = new Node({
      children: [medianArrowNode, medianTextNode],
      y: -32
    });
    const minLabelNode = boxWhiskerLabel(CAVColors.iqrColorProperty, CenterAndVariabilityStrings.minStringProperty, false);
    const maxLabelNode = boxWhiskerLabel(CAVColors.iqrColorProperty, CenterAndVariabilityStrings.maxStringProperty, false);
    const q1LabelNode = boxWhiskerLabel(CAVColors.iqrColorProperty, CenterAndVariabilityStrings.q1StringProperty, true);
    const q3LabelNode = boxWhiskerLabel(CAVColors.iqrColorProperty, CenterAndVariabilityStrings.q3StringProperty, true);
    minLabelNode.y = maxLabelNode.y = -28;
    q1LabelNode.y = q3LabelNode.y = -33;
    boxWhiskerNode.addChild(boxWhiskerMedianLine);
    boxWhiskerNode.addChild(boxWhiskerBox);
    boxWhiskerNode.addChild(boxWhiskerLineLeft);
    boxWhiskerNode.addChild(boxWhiskerLineRight);
    boxWhiskerNode.addChild(boxWhiskerEndCapLeft);
    boxWhiskerNode.addChild(boxWhiskerEndCapRight);
    boxWhiskerNode.addChild(q1LabelNode);
    boxWhiskerNode.addChild(q3LabelNode);
    boxWhiskerNode.addChild(minLabelNode);
    boxWhiskerNode.addChild(maxLabelNode);
    boxWhiskerNode.addChild(medianLabelNode);
    this.addChild(iqrRectangle);
    this.addChild(boxWhiskerNode);
    this.addChild(iqrBarLabel);
    this.addChild(iqrBar);
    iqrRectangle.moveToBack();
    const updateIQRNode = () => {
      const floor = this.modelViewTransform.modelToViewY(0);
      const sortedDots = _.sortBy(sceneModel.getActiveSoccerBalls().filter(object => object.valueProperty.value !== null), object => object.valueProperty.value);
      const leftmostDot = sortedDots[0];
      const rightmostDot = sortedDots[sortedDots.length - 1];
      const boxLeft = this.modelViewTransform.modelToViewX(sceneModel.q1ValueProperty.value);
      const boxRight = this.modelViewTransform.modelToViewX(sceneModel.q3ValueProperty.value);
      const medianPositionX = this.modelViewTransform.modelToViewX(sceneModel.medianValueProperty.value);
      medianLabelNode.x = boxWhiskerMedianLine.x1 = boxWhiskerMedianLine.x2 = medianPositionX;
      boxWhiskerBox.left = boxLeft - 0.5 * BOX_STROKE_WIDTH;
      boxWhiskerBox.rectWidth = boxRight - boxLeft;
      if (leftmostDot && rightmostDot) {
        const min = leftmostDot.valueProperty.value;
        const max = rightmostDot.valueProperty.value;
        const minPositionX = this.modelViewTransform.modelToViewX(min);
        const maxPositionX = this.modelViewTransform.modelToViewX(max);
        boxWhiskerLineLeft.x1 = boxWhiskerEndCapLeft.x1 = boxWhiskerEndCapLeft.x2 = minLabelNode.x = minPositionX;
        boxWhiskerLineLeft.x2 = q1LabelNode.x = boxLeft;
        boxWhiskerLineRight.x1 = q3LabelNode.x = boxRight;
        boxWhiskerLineRight.x2 = boxWhiskerEndCapRight.x1 = boxWhiskerEndCapRight.x2 = maxLabelNode.x = maxPositionX;
        boxWhiskerEndCapLeft.visible = boxLeft !== minPositionX;
        boxWhiskerEndCapRight.visible = boxRight !== maxPositionX;
      }
      const enoughDataForMedian = sceneModel.numberOfDataPointsProperty.value >= 1;
      const enoughDataForIQR = sceneModel.numberOfDataPointsProperty.value >= 5;
      const showHighlightRectangle = enoughDataForIQR && (options.parentContext === 'info' || model.isShowingIQRProperty.value);
      const showBoxWhiskerLabels = options.parentContext === 'info' && enoughDataForIQR;
      medianArrowNode.visible = enoughDataForMedian;
      boxWhiskerNode.visible = enoughDataForIQR;
      iqrRectangle.visible = iqrBar.visible = iqrBarLabel.visible = showHighlightRectangle;
      medianTextNode.visible = minLabelNode.visible = maxLabelNode.visible = q1LabelNode.visible = q3LabelNode.visible = showBoxWhiskerLabels;
      needAtLeastFiveKicks.centerX = this.modelViewTransform.modelToViewX(8);
      needAtLeastFiveKicks.visible = !enoughDataForIQR && (model.isShowingIQRProperty.value || options.parentContext === 'info');
      if (showHighlightRectangle) {
        iqrRectangle.rectHeight = floor - BOX_CENTER_Y + 0.5 * BOX_HEIGHT;
        iqrRectangle.rectWidth = boxRight - boxLeft;
        iqrRectangle.left = boxLeft;
        iqrRectangle.bottom = floor;
        const IQR_BAR_OFFSET_Y = options.parentContext === 'info' ? 50 : 22;
        iqrBar.setMedianBarShape(iqrRectangle.top - MedianBarNode.NOTCH_HEIGHT - IQR_BAR_OFFSET_Y, iqrRectangle.left, 0, iqrRectangle.right, false);
        iqrBarLabel.string = sceneModel.iqrValueProperty.value;
        iqrBarLabel.centerX = iqrRectangle.centerX;
        iqrBarLabel.bottom = iqrBar.top - 2;
      }
    };
    sceneModel.objectChangedEmitter.addListener(updateIQRNode);
    model.isShowingIQRProperty.link(updateIQRNode);
    model.selectedVariabilityProperty.link(updateIQRNode);
    sceneModel.numberOfDataPointsProperty.link(updateIQRNode);
  }
}
centerAndVariability.register('IQRNode', IQRNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIk1lZGlhbkJhck5vZGUiLCJDaXJjbGUiLCJMaW5lIiwiTm9kZSIsIlJlY3RhbmdsZSIsIlRleHQiLCJWQm94IiwiQXJyb3dOb2RlIiwiY2VudGVyQW5kVmFyaWFiaWxpdHkiLCJDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MiLCJDQVZQbG90Tm9kZSIsIkNBVkNvbG9ycyIsIkRlcml2ZWRQcm9wZXJ0eSIsIlZhcmlhYmlsaXR5UmVhZG91dFRleHQiLCJJUVJOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInNjZW5lTW9kZWwiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZGF0YVBvaW50RmlsbCIsImdyYXlEYXRhUG9pbnRGaWxsIiwicGFyZW50Q29udGV4dCIsInRleHRSZWFkb3V0R3JvdXAiLCJ4IiwieSIsImNlbnRlclkiLCJhbGlnbiIsInNwYWNpbmciLCJhZGRDaGlsZCIsIm1lZGlhblJlYWRvdXRWYWx1ZVByb3BlcnR5IiwibnVtYmVyT2ZEYXRhUG9pbnRzUHJvcGVydHkiLCJtZWRpYW5WYWx1ZVByb3BlcnR5IiwibnVtYmVyT2ZEYXRhUG9pbnRzIiwidmFsdWUiLCJpcXJSZWFkb3V0VmFsdWVQcm9wZXJ0eSIsImlxclZhbHVlUHJvcGVydHkiLCJpcXJWYWx1ZSIsIm1lZGlhblJlYWRvdXRUZXh0IiwibWVkaWFuRXF1YWxzVmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJmaWxsIiwibWVkaWFuQ29sb3JQcm9wZXJ0eSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImlxclJlYWRvdXRUZXh0IiwiaXFyRXF1YWxzVmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJpcXJDb2xvclByb3BlcnR5IiwidmlzaWJsZVByb3BlcnR5IiwiaXNTaG93aW5nSVFSUHJvcGVydHkiLCJuZWVkQXRMZWFzdEZpdmVLaWNrc09mZnNldFkiLCJuZWVkQXRMZWFzdEZpdmVLaWNrcyIsIm5lZWRBdExlYXN0Rml2ZUtpY2tzU3RyaW5nUHJvcGVydHkiLCJmb250U2l6ZSIsImlxckJhciIsIm5vdGNoRGlyZWN0aW9uIiwiYmFyU3R5bGUiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJpcXJCYXJMYWJlbCIsImZvbnQiLCJpcXJSZWN0YW5nbGUiLCJxdWFydGlsZUNvbG9yUHJvcGVydHkiLCJib3hXaGlza2VyTGFiZWxBcnJvdyIsImZpbGxDb2xvciIsImhlYWRIZWlnaHQiLCJoZWFkV2lkdGgiLCJtYXhIZWlnaHQiLCJib3hXaGlza2VyTGFiZWxUZXh0IiwibGFiZWxUZXh0UHJvcGVydHkiLCJpc1F1YXJ0aWxlIiwidGV4dE5vZGVDaGlsZHJlbiIsImNlbnRlclgiLCJ1bnNoaWZ0IiwiY2hpbGRyZW4iLCJib3hXaGlza2VyTGFiZWwiLCJhcnJvd05vZGUiLCJ0ZXh0Tm9kZSIsIkJPWF9DRU5URVJfWSIsIkJPWF9IRUlHSFQiLCJFTkRfQ0FQX0hFSUdIVCIsIkJPWF9TVFJPS0VfV0lEVEgiLCJib3hXaGlza2VyTWVkaWFuTGluZSIsImJveFdoaXNrZXJTdHJva2VDb2xvclByb3BlcnR5IiwiYm94V2hpc2tlckJveCIsImJveFdoaXNrZXJMaW5lTGVmdCIsImJveFdoaXNrZXJMaW5lUmlnaHQiLCJib3hXaGlza2VyRW5kQ2FwTGVmdCIsImJveFdoaXNrZXJFbmRDYXBSaWdodCIsImJveFdoaXNrZXJOb2RlIiwibWVkaWFuQXJyb3dOb2RlIiwibWVkaWFuVGV4dE5vZGUiLCJtZWRpYW5TdHJpbmdQcm9wZXJ0eSIsIm1lZGlhbkxhYmVsTm9kZSIsIm1pbkxhYmVsTm9kZSIsIm1pblN0cmluZ1Byb3BlcnR5IiwibWF4TGFiZWxOb2RlIiwibWF4U3RyaW5nUHJvcGVydHkiLCJxMUxhYmVsTm9kZSIsInExU3RyaW5nUHJvcGVydHkiLCJxM0xhYmVsTm9kZSIsInEzU3RyaW5nUHJvcGVydHkiLCJtb3ZlVG9CYWNrIiwidXBkYXRlSVFSTm9kZSIsImZsb29yIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibW9kZWxUb1ZpZXdZIiwic29ydGVkRG90cyIsIl8iLCJzb3J0QnkiLCJnZXRBY3RpdmVTb2NjZXJCYWxscyIsImZpbHRlciIsIm9iamVjdCIsInZhbHVlUHJvcGVydHkiLCJsZWZ0bW9zdERvdCIsInJpZ2h0bW9zdERvdCIsImxlbmd0aCIsImJveExlZnQiLCJtb2RlbFRvVmlld1giLCJxMVZhbHVlUHJvcGVydHkiLCJib3hSaWdodCIsInEzVmFsdWVQcm9wZXJ0eSIsIm1lZGlhblBvc2l0aW9uWCIsIngxIiwieDIiLCJsZWZ0IiwicmVjdFdpZHRoIiwibWluIiwibWF4IiwibWluUG9zaXRpb25YIiwibWF4UG9zaXRpb25YIiwidmlzaWJsZSIsImVub3VnaERhdGFGb3JNZWRpYW4iLCJlbm91Z2hEYXRhRm9ySVFSIiwic2hvd0hpZ2hsaWdodFJlY3RhbmdsZSIsInNob3dCb3hXaGlza2VyTGFiZWxzIiwicmVjdEhlaWdodCIsImJvdHRvbSIsIklRUl9CQVJfT0ZGU0VUX1kiLCJzZXRNZWRpYW5CYXJTaGFwZSIsInRvcCIsIk5PVENIX0hFSUdIVCIsInJpZ2h0Iiwic3RyaW5nIiwib2JqZWN0Q2hhbmdlZEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImxpbmsiLCJzZWxlY3RlZFZhcmlhYmlsaXR5UHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIklRUk5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBNZWRpYW5CYXJOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L01lZGlhbkJhck5vZGUuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIExpbmUsIE5vZGUsIFByb2ZpbGVDb2xvclByb3BlcnR5LCBSZWN0YW5nbGUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgY2VudGVyQW5kVmFyaWFiaWxpdHkgZnJvbSAnLi4vLi4vY2VudGVyQW5kVmFyaWFiaWxpdHkuanMnO1xyXG5pbXBvcnQgVmFyaWFiaWxpdHlNb2RlbCBmcm9tICcuLi9tb2RlbC9WYXJpYWJpbGl0eU1vZGVsLmpzJztcclxuaW1wb3J0IENlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncyBmcm9tICcuLi8uLi9DZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ0FWUGxvdE5vZGUsIHsgQ0FWUGxvdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9DQVZQbG90Tm9kZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IENBVkNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vQ0FWQ29sb3JzLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFZhcmlhYmlsaXR5UmVhZG91dFRleHQgZnJvbSAnLi9WYXJpYWJpbGl0eVJlYWRvdXRUZXh0LmpzJztcclxuaW1wb3J0IFZhcmlhYmlsaXR5U2NlbmVNb2RlbCBmcm9tICcuLi9tb2RlbC9WYXJpYWJpbGl0eVNjZW5lTW9kZWwuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBwYXJlbnRDb250ZXh0OiAnYWNjb3JkaW9uJyB8ICdpbmZvJztcclxufTtcclxudHlwZSBJUVJOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxDQVZQbG90T3B0aW9ucywgJ2RhdGFQb2ludEZpbGwnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElRUk5vZGUgZXh0ZW5kcyBDQVZQbG90Tm9kZSB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbDogVmFyaWFiaWxpdHlNb2RlbCwgc2NlbmVNb2RlbDogVmFyaWFiaWxpdHlTY2VuZU1vZGVsLCBwcm92aWRlZE9wdGlvbnM6IElRUk5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBwcm92aWRlZE9wdGlvbnM7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCBzY2VuZU1vZGVsLCB7XHJcbiAgICAgIGRhdGFQb2ludEZpbGw6IENBVkNvbG9ycy5ncmF5RGF0YVBvaW50RmlsbCxcclxuICAgICAgLi4ub3B0aW9uc1xyXG4gICAgfSApO1xyXG5cclxuICAgIGlmICggcHJvdmlkZWRPcHRpb25zLnBhcmVudENvbnRleHQgPT09ICdhY2NvcmRpb24nICkge1xyXG5cclxuICAgICAgY29uc3QgdGV4dFJlYWRvdXRHcm91cCA9IG5ldyBWQm94KCB7XHJcbiAgICAgICAgeDogLTExMCxcclxuICAgICAgICB5OiB0aGlzLmNlbnRlclkgLSAyMCxcclxuICAgICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICAgIHNwYWNpbmc6IDEwXHJcbiAgICAgIH0gKTtcclxuICAgICAgdGhpcy5hZGRDaGlsZCggdGV4dFJlYWRvdXRHcm91cCApO1xyXG5cclxuICAgICAgY29uc3QgbWVkaWFuUmVhZG91dFZhbHVlUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIHNjZW5lTW9kZWwubnVtYmVyT2ZEYXRhUG9pbnRzUHJvcGVydHksIHNjZW5lTW9kZWwubWVkaWFuVmFsdWVQcm9wZXJ0eSBdLFxyXG4gICAgICAgIG51bWJlck9mRGF0YVBvaW50cyA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gbnVtYmVyT2ZEYXRhUG9pbnRzID49IDEgPyBgJHtzY2VuZU1vZGVsLm1lZGlhblZhbHVlUHJvcGVydHkudmFsdWV9YCA6ICc/JztcclxuICAgICAgICB9ICk7XHJcbiAgICAgIGNvbnN0IGlxclJlYWRvdXRWYWx1ZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBzY2VuZU1vZGVsLmlxclZhbHVlUHJvcGVydHkgXSwgaXFyVmFsdWUgPT4ge1xyXG4gICAgICAgIHJldHVybiBpcXJWYWx1ZSA/IGAke2lxclZhbHVlfWAgOiAnPyc7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIGNvbnN0IG1lZGlhblJlYWRvdXRUZXh0ID0gbmV3IFZhcmlhYmlsaXR5UmVhZG91dFRleHQoIG1lZGlhblJlYWRvdXRWYWx1ZVByb3BlcnR5LCBDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MubWVkaWFuRXF1YWxzVmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBmaWxsOiBDQVZDb2xvcnMubWVkaWFuQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21lZGlhblJlYWRvdXRUZXh0JyApXHJcbiAgICAgIH0gKTtcclxuICAgICAgY29uc3QgaXFyUmVhZG91dFRleHQgPSBuZXcgVmFyaWFiaWxpdHlSZWFkb3V0VGV4dCggaXFyUmVhZG91dFZhbHVlUHJvcGVydHksIENlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5pcXJFcXVhbHNWYWx1ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgIGZpbGw6IENBVkNvbG9ycy5pcXJDb2xvclByb3BlcnR5LFxyXG4gICAgICAgIHZpc2libGVQcm9wZXJ0eTogbW9kZWwuaXNTaG93aW5nSVFSUHJvcGVydHksXHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdpcXJSZWFkb3V0VGV4dCcgKVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICB0ZXh0UmVhZG91dEdyb3VwLmFkZENoaWxkKCBtZWRpYW5SZWFkb3V0VGV4dCApO1xyXG4gICAgICB0ZXh0UmVhZG91dEdyb3VwLmFkZENoaWxkKCBpcXJSZWFkb3V0VGV4dCApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG5lZWRBdExlYXN0Rml2ZUtpY2tzT2Zmc2V0WSA9IG9wdGlvbnMucGFyZW50Q29udGV4dCA9PT0gJ2luZm8nID8gOTAgOiAyMDtcclxuICAgIGNvbnN0IG5lZWRBdExlYXN0Rml2ZUtpY2tzID0gbmV3IFRleHQoIENlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5uZWVkQXRMZWFzdEZpdmVLaWNrc1N0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnRTaXplOiAxOCxcclxuICAgICAgY2VudGVyWTogdGhpcy5jZW50ZXJZIC0gbmVlZEF0TGVhc3RGaXZlS2lja3NPZmZzZXRZXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZWVkQXRMZWFzdEZpdmVLaWNrcyApO1xyXG5cclxuICAgIGNvbnN0IGlxckJhciA9IG5ldyBNZWRpYW5CYXJOb2RlKCB7XHJcbiAgICAgIG5vdGNoRGlyZWN0aW9uOiAnZG93bicsXHJcbiAgICAgIGJhclN0eWxlOiAnY29udGludW91cycsXHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgbGluZVdpZHRoOiAxXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBpcXJCYXJMYWJlbCA9IG5ldyBUZXh0KCAnJywge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE2IClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBpcXJSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAwLCAwLCB7XHJcbiAgICAgIGZpbGw6IENBVkNvbG9ycy5xdWFydGlsZUNvbG9yUHJvcGVydHlcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBib3hXaGlza2VyTGFiZWxBcnJvdyA9ICggZmlsbENvbG9yOiBQcm9maWxlQ29sb3JQcm9wZXJ0eSApID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBBcnJvd05vZGUoIDAsIDAsIDAsIDI2LCB7XHJcbiAgICAgICAgZmlsbDogZmlsbENvbG9yLFxyXG4gICAgICAgIHN0cm9rZTogbnVsbCxcclxuICAgICAgICBsaW5lV2lkdGg6IDAuMixcclxuICAgICAgICBoZWFkSGVpZ2h0OiAxMixcclxuICAgICAgICBoZWFkV2lkdGg6IDE1LFxyXG4gICAgICAgIG1heEhlaWdodDogMThcclxuICAgICAgfSApO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBib3hXaGlza2VyTGFiZWxUZXh0ID0gKCBmaWxsQ29sb3I6IFByb2ZpbGVDb2xvclByb3BlcnR5LCBsYWJlbFRleHRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiwgaXNRdWFydGlsZTogYm9vbGVhbiApID0+IHtcclxuICAgICAgY29uc3QgdGV4dE5vZGVDaGlsZHJlbjogTm9kZVtdID0gWyBuZXcgVGV4dCggbGFiZWxUZXh0UHJvcGVydHksIHtcclxuICAgICAgICBmb250U2l6ZTogMTYsXHJcbiAgICAgICAgZmlsbDogZmlsbENvbG9yLFxyXG4gICAgICAgIGNlbnRlclg6IDAsXHJcbiAgICAgICAgY2VudGVyWTogMFxyXG4gICAgICB9ICkgXTtcclxuICAgICAgaWYgKCBpc1F1YXJ0aWxlICkge1xyXG4gICAgICAgIHRleHROb2RlQ2hpbGRyZW4udW5zaGlmdCggbmV3IENpcmNsZSggMTIsIHsgZmlsbDogQ0FWQ29sb3JzLnF1YXJ0aWxlQ29sb3JQcm9wZXJ0eSB9ICkgKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmV3IE5vZGUoIHsgY2hpbGRyZW46IHRleHROb2RlQ2hpbGRyZW4sIGNlbnRlclk6IGlzUXVhcnRpbGUgPyAtMTQgOiAtMTAgfSApO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBib3hXaGlza2VyTGFiZWwgPSAoIGZpbGxDb2xvcjogUHJvZmlsZUNvbG9yUHJvcGVydHksIGxhYmVsVGV4dFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCBpc1F1YXJ0aWxlOiBib29sZWFuICkgPT4ge1xyXG4gICAgICBjb25zdCBhcnJvd05vZGUgPSBib3hXaGlza2VyTGFiZWxBcnJvdyggZmlsbENvbG9yICk7XHJcbiAgICAgIGNvbnN0IHRleHROb2RlID0gYm94V2hpc2tlckxhYmVsVGV4dCggZmlsbENvbG9yLCBsYWJlbFRleHRQcm9wZXJ0eSwgaXNRdWFydGlsZSApO1xyXG4gICAgICByZXR1cm4gbmV3IE5vZGUoIHsgY2hpbGRyZW46IFsgdGV4dE5vZGUsIGFycm93Tm9kZSBdIH0gKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgQk9YX0NFTlRFUl9ZID0gb3B0aW9ucy5wYXJlbnRDb250ZXh0ID09PSAnaW5mbycgPyAtMjAgOiA3ODtcclxuICAgIGNvbnN0IEJPWF9IRUlHSFQgPSAyNTtcclxuICAgIGNvbnN0IEVORF9DQVBfSEVJR0hUID0gMTU7XHJcbiAgICBjb25zdCBCT1hfU1RST0tFX1dJRFRIID0gMjtcclxuXHJcbiAgICBjb25zdCBib3hXaGlza2VyTWVkaWFuTGluZSA9IG5ldyBMaW5lKCAwLCAtQk9YX0hFSUdIVCAvIDIsIDAsIEJPWF9IRUlHSFQgLyAyLCB7XHJcbiAgICAgIHN0cm9rZTogQ0FWQ29sb3JzLmJveFdoaXNrZXJTdHJva2VDb2xvclByb3BlcnR5LFxyXG4gICAgICBsaW5lV2lkdGg6IEJPWF9TVFJPS0VfV0lEVEhcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBib3hXaGlza2VyQm94ID0gbmV3IFJlY3RhbmdsZSggMCwgLUJPWF9IRUlHSFQgLyAyLCAxMDAsIEJPWF9IRUlHSFQsIHtcclxuICAgICAgc3Ryb2tlOiBDQVZDb2xvcnMuYm94V2hpc2tlclN0cm9rZUNvbG9yUHJvcGVydHksXHJcbiAgICAgIGxpbmVXaWR0aDogQk9YX1NUUk9LRV9XSURUSFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGJveFdoaXNrZXJMaW5lTGVmdCA9IG5ldyBMaW5lKCAwLCAwLCAwLCAwLCB7XHJcbiAgICAgIHN0cm9rZTogQ0FWQ29sb3JzLmJveFdoaXNrZXJTdHJva2VDb2xvclByb3BlcnR5LFxyXG4gICAgICBsaW5lV2lkdGg6IEJPWF9TVFJPS0VfV0lEVEhcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBib3hXaGlza2VyTGluZVJpZ2h0ID0gbmV3IExpbmUoIDAsIDAsIDAsIDAsIHtcclxuICAgICAgc3Ryb2tlOiBDQVZDb2xvcnMuYm94V2hpc2tlclN0cm9rZUNvbG9yUHJvcGVydHksXHJcbiAgICAgIGxpbmVXaWR0aDogQk9YX1NUUk9LRV9XSURUSFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGJveFdoaXNrZXJFbmRDYXBMZWZ0ID0gbmV3IExpbmUoIDAsIC1FTkRfQ0FQX0hFSUdIVCAvIDIsIDAsIEVORF9DQVBfSEVJR0hUIC8gMiwge1xyXG4gICAgICBzdHJva2U6IENBVkNvbG9ycy5ib3hXaGlza2VyU3Ryb2tlQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgbGluZVdpZHRoOiBCT1hfU1RST0tFX1dJRFRIXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgYm94V2hpc2tlckVuZENhcFJpZ2h0ID0gbmV3IExpbmUoIDAsIC1FTkRfQ0FQX0hFSUdIVCAvIDIsIDAsIEVORF9DQVBfSEVJR0hUIC8gMiwge1xyXG4gICAgICBzdHJva2U6IENBVkNvbG9ycy5ib3hXaGlza2VyU3Ryb2tlQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgbGluZVdpZHRoOiBCT1hfU1RST0tFX1dJRFRIXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgYm94V2hpc2tlck5vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgYm94V2hpc2tlck5vZGUueSA9IEJPWF9DRU5URVJfWTtcclxuXHJcbiAgICBjb25zdCBtZWRpYW5BcnJvd05vZGUgPSBib3hXaGlza2VyTGFiZWxBcnJvdyggQ0FWQ29sb3JzLm1lZGlhbkNvbG9yUHJvcGVydHkgKTtcclxuICAgIGNvbnN0IG1lZGlhblRleHROb2RlID0gYm94V2hpc2tlckxhYmVsVGV4dCggQ0FWQ29sb3JzLm1lZGlhbkNvbG9yUHJvcGVydHksIENlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5tZWRpYW5TdHJpbmdQcm9wZXJ0eSwgZmFsc2UgKTtcclxuICAgIGNvbnN0IG1lZGlhbkxhYmVsTm9kZSA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIG1lZGlhbkFycm93Tm9kZSwgbWVkaWFuVGV4dE5vZGUgXSwgeTogLTMyIH0gKTtcclxuXHJcbiAgICBjb25zdCBtaW5MYWJlbE5vZGUgPSBib3hXaGlza2VyTGFiZWwoIENBVkNvbG9ycy5pcXJDb2xvclByb3BlcnR5LCBDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MubWluU3RyaW5nUHJvcGVydHksIGZhbHNlICk7XHJcbiAgICBjb25zdCBtYXhMYWJlbE5vZGUgPSBib3hXaGlza2VyTGFiZWwoIENBVkNvbG9ycy5pcXJDb2xvclByb3BlcnR5LCBDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MubWF4U3RyaW5nUHJvcGVydHksIGZhbHNlICk7XHJcbiAgICBjb25zdCBxMUxhYmVsTm9kZSA9IGJveFdoaXNrZXJMYWJlbCggQ0FWQ29sb3JzLmlxckNvbG9yUHJvcGVydHksIENlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5xMVN0cmluZ1Byb3BlcnR5LCB0cnVlICk7XHJcbiAgICBjb25zdCBxM0xhYmVsTm9kZSA9IGJveFdoaXNrZXJMYWJlbCggQ0FWQ29sb3JzLmlxckNvbG9yUHJvcGVydHksIENlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5xM1N0cmluZ1Byb3BlcnR5LCB0cnVlICk7XHJcblxyXG4gICAgbWluTGFiZWxOb2RlLnkgPSBtYXhMYWJlbE5vZGUueSA9IC0yODtcclxuICAgIHExTGFiZWxOb2RlLnkgPSBxM0xhYmVsTm9kZS55ID0gLTMzO1xyXG5cclxuICAgIGJveFdoaXNrZXJOb2RlLmFkZENoaWxkKCBib3hXaGlza2VyTWVkaWFuTGluZSApO1xyXG4gICAgYm94V2hpc2tlck5vZGUuYWRkQ2hpbGQoIGJveFdoaXNrZXJCb3ggKTtcclxuICAgIGJveFdoaXNrZXJOb2RlLmFkZENoaWxkKCBib3hXaGlza2VyTGluZUxlZnQgKTtcclxuICAgIGJveFdoaXNrZXJOb2RlLmFkZENoaWxkKCBib3hXaGlza2VyTGluZVJpZ2h0ICk7XHJcbiAgICBib3hXaGlza2VyTm9kZS5hZGRDaGlsZCggYm94V2hpc2tlckVuZENhcExlZnQgKTtcclxuICAgIGJveFdoaXNrZXJOb2RlLmFkZENoaWxkKCBib3hXaGlza2VyRW5kQ2FwUmlnaHQgKTtcclxuICAgIGJveFdoaXNrZXJOb2RlLmFkZENoaWxkKCBxMUxhYmVsTm9kZSApO1xyXG4gICAgYm94V2hpc2tlck5vZGUuYWRkQ2hpbGQoIHEzTGFiZWxOb2RlICk7XHJcbiAgICBib3hXaGlza2VyTm9kZS5hZGRDaGlsZCggbWluTGFiZWxOb2RlICk7XHJcbiAgICBib3hXaGlza2VyTm9kZS5hZGRDaGlsZCggbWF4TGFiZWxOb2RlICk7XHJcbiAgICBib3hXaGlza2VyTm9kZS5hZGRDaGlsZCggbWVkaWFuTGFiZWxOb2RlICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggaXFyUmVjdGFuZ2xlICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBib3hXaGlza2VyTm9kZSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggaXFyQmFyTGFiZWwgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGlxckJhciApO1xyXG5cclxuICAgIGlxclJlY3RhbmdsZS5tb3ZlVG9CYWNrKCk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlSVFSTm9kZSA9ICgpID0+IHtcclxuICAgICAgY29uc3QgZmxvb3IgPSB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIDAgKTtcclxuXHJcbiAgICAgIGNvbnN0IHNvcnRlZERvdHMgPSBfLnNvcnRCeSggc2NlbmVNb2RlbC5nZXRBY3RpdmVTb2NjZXJCYWxscygpLmZpbHRlciggb2JqZWN0ID0+IG9iamVjdC52YWx1ZVByb3BlcnR5LnZhbHVlICE9PSBudWxsICksXHJcbiAgICAgICAgb2JqZWN0ID0+IG9iamVjdC52YWx1ZVByb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgIGNvbnN0IGxlZnRtb3N0RG90ID0gc29ydGVkRG90c1sgMCBdO1xyXG4gICAgICBjb25zdCByaWdodG1vc3REb3QgPSBzb3J0ZWREb3RzWyBzb3J0ZWREb3RzLmxlbmd0aCAtIDEgXTtcclxuXHJcbiAgICAgIGNvbnN0IGJveExlZnQgPSB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHNjZW5lTW9kZWwucTFWYWx1ZVByb3BlcnR5LnZhbHVlISApO1xyXG4gICAgICBjb25zdCBib3hSaWdodCA9IHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggc2NlbmVNb2RlbC5xM1ZhbHVlUHJvcGVydHkudmFsdWUhICk7XHJcblxyXG4gICAgICBjb25zdCBtZWRpYW5Qb3NpdGlvblggPSB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHNjZW5lTW9kZWwubWVkaWFuVmFsdWVQcm9wZXJ0eS52YWx1ZSEgKTtcclxuICAgICAgbWVkaWFuTGFiZWxOb2RlLnggPSBib3hXaGlza2VyTWVkaWFuTGluZS54MSA9IGJveFdoaXNrZXJNZWRpYW5MaW5lLngyID0gbWVkaWFuUG9zaXRpb25YO1xyXG5cclxuICAgICAgYm94V2hpc2tlckJveC5sZWZ0ID0gYm94TGVmdCAtIDAuNSAqIEJPWF9TVFJPS0VfV0lEVEg7XHJcbiAgICAgIGJveFdoaXNrZXJCb3gucmVjdFdpZHRoID0gYm94UmlnaHQgLSBib3hMZWZ0O1xyXG5cclxuICAgICAgaWYgKCBsZWZ0bW9zdERvdCAmJiByaWdodG1vc3REb3QgKSB7XHJcbiAgICAgICAgY29uc3QgbWluID0gbGVmdG1vc3REb3QudmFsdWVQcm9wZXJ0eS52YWx1ZSE7XHJcbiAgICAgICAgY29uc3QgbWF4ID0gcmlnaHRtb3N0RG90LnZhbHVlUHJvcGVydHkudmFsdWUhO1xyXG4gICAgICAgIGNvbnN0IG1pblBvc2l0aW9uWCA9IHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggbWluICk7XHJcbiAgICAgICAgY29uc3QgbWF4UG9zaXRpb25YID0gdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBtYXggKTtcclxuXHJcbiAgICAgICAgYm94V2hpc2tlckxpbmVMZWZ0LngxID0gYm94V2hpc2tlckVuZENhcExlZnQueDEgPSBib3hXaGlza2VyRW5kQ2FwTGVmdC54MiA9IG1pbkxhYmVsTm9kZS54ID0gbWluUG9zaXRpb25YO1xyXG4gICAgICAgIGJveFdoaXNrZXJMaW5lTGVmdC54MiA9IHExTGFiZWxOb2RlLnggPSBib3hMZWZ0O1xyXG5cclxuICAgICAgICBib3hXaGlza2VyTGluZVJpZ2h0LngxID0gcTNMYWJlbE5vZGUueCA9IGJveFJpZ2h0O1xyXG4gICAgICAgIGJveFdoaXNrZXJMaW5lUmlnaHQueDIgPSBib3hXaGlza2VyRW5kQ2FwUmlnaHQueDEgPSBib3hXaGlza2VyRW5kQ2FwUmlnaHQueDIgPSBtYXhMYWJlbE5vZGUueCA9IG1heFBvc2l0aW9uWDtcclxuXHJcbiAgICAgICAgYm94V2hpc2tlckVuZENhcExlZnQudmlzaWJsZSA9IGJveExlZnQgIT09IG1pblBvc2l0aW9uWDtcclxuICAgICAgICBib3hXaGlza2VyRW5kQ2FwUmlnaHQudmlzaWJsZSA9IGJveFJpZ2h0ICE9PSBtYXhQb3NpdGlvblg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGVub3VnaERhdGFGb3JNZWRpYW4gPSBzY2VuZU1vZGVsLm51bWJlck9mRGF0YVBvaW50c1Byb3BlcnR5LnZhbHVlID49IDE7XHJcbiAgICAgIGNvbnN0IGVub3VnaERhdGFGb3JJUVIgPSBzY2VuZU1vZGVsLm51bWJlck9mRGF0YVBvaW50c1Byb3BlcnR5LnZhbHVlID49IDU7XHJcbiAgICAgIGNvbnN0IHNob3dIaWdobGlnaHRSZWN0YW5nbGUgPSBlbm91Z2hEYXRhRm9ySVFSICYmICggb3B0aW9ucy5wYXJlbnRDb250ZXh0ID09PSAnaW5mbycgfHwgbW9kZWwuaXNTaG93aW5nSVFSUHJvcGVydHkudmFsdWUgKTtcclxuICAgICAgY29uc3Qgc2hvd0JveFdoaXNrZXJMYWJlbHMgPSBvcHRpb25zLnBhcmVudENvbnRleHQgPT09ICdpbmZvJyAmJiBlbm91Z2hEYXRhRm9ySVFSO1xyXG5cclxuICAgICAgbWVkaWFuQXJyb3dOb2RlLnZpc2libGUgPSBlbm91Z2hEYXRhRm9yTWVkaWFuO1xyXG4gICAgICBib3hXaGlza2VyTm9kZS52aXNpYmxlID0gZW5vdWdoRGF0YUZvcklRUjtcclxuICAgICAgaXFyUmVjdGFuZ2xlLnZpc2libGUgPSBpcXJCYXIudmlzaWJsZSA9IGlxckJhckxhYmVsLnZpc2libGUgPSBzaG93SGlnaGxpZ2h0UmVjdGFuZ2xlO1xyXG4gICAgICBtZWRpYW5UZXh0Tm9kZS52aXNpYmxlID0gbWluTGFiZWxOb2RlLnZpc2libGUgPSBtYXhMYWJlbE5vZGUudmlzaWJsZSA9IHExTGFiZWxOb2RlLnZpc2libGUgPSBxM0xhYmVsTm9kZS52aXNpYmxlID0gc2hvd0JveFdoaXNrZXJMYWJlbHM7XHJcblxyXG4gICAgICBuZWVkQXRMZWFzdEZpdmVLaWNrcy5jZW50ZXJYID0gdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCA4ICk7XHJcbiAgICAgIG5lZWRBdExlYXN0Rml2ZUtpY2tzLnZpc2libGUgPSAhZW5vdWdoRGF0YUZvcklRUiAmJiAoIG1vZGVsLmlzU2hvd2luZ0lRUlByb3BlcnR5LnZhbHVlIHx8IG9wdGlvbnMucGFyZW50Q29udGV4dCA9PT0gJ2luZm8nICk7XHJcblxyXG4gICAgICBpZiAoIHNob3dIaWdobGlnaHRSZWN0YW5nbGUgKSB7XHJcbiAgICAgICAgaXFyUmVjdGFuZ2xlLnJlY3RIZWlnaHQgPSBmbG9vciAtIEJPWF9DRU5URVJfWSArIDAuNSAqIEJPWF9IRUlHSFQ7XHJcbiAgICAgICAgaXFyUmVjdGFuZ2xlLnJlY3RXaWR0aCA9IGJveFJpZ2h0IC0gYm94TGVmdDtcclxuICAgICAgICBpcXJSZWN0YW5nbGUubGVmdCA9IGJveExlZnQ7XHJcbiAgICAgICAgaXFyUmVjdGFuZ2xlLmJvdHRvbSA9IGZsb29yO1xyXG5cclxuICAgICAgICBjb25zdCBJUVJfQkFSX09GRlNFVF9ZID0gb3B0aW9ucy5wYXJlbnRDb250ZXh0ID09PSAnaW5mbycgPyA1MCA6IDIyO1xyXG4gICAgICAgIGlxckJhci5zZXRNZWRpYW5CYXJTaGFwZSggaXFyUmVjdGFuZ2xlLnRvcCAtIE1lZGlhbkJhck5vZGUuTk9UQ0hfSEVJR0hUIC0gSVFSX0JBUl9PRkZTRVRfWSwgaXFyUmVjdGFuZ2xlLmxlZnQsIDAsIGlxclJlY3RhbmdsZS5yaWdodCwgZmFsc2UgKTtcclxuICAgICAgICBpcXJCYXJMYWJlbC5zdHJpbmcgPSBzY2VuZU1vZGVsLmlxclZhbHVlUHJvcGVydHkudmFsdWUhO1xyXG4gICAgICAgIGlxckJhckxhYmVsLmNlbnRlclggPSBpcXJSZWN0YW5nbGUuY2VudGVyWDtcclxuICAgICAgICBpcXJCYXJMYWJlbC5ib3R0b20gPSBpcXJCYXIudG9wIC0gMjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBzY2VuZU1vZGVsLm9iamVjdENoYW5nZWRFbWl0dGVyLmFkZExpc3RlbmVyKCB1cGRhdGVJUVJOb2RlICk7XHJcbiAgICBtb2RlbC5pc1Nob3dpbmdJUVJQcm9wZXJ0eS5saW5rKCB1cGRhdGVJUVJOb2RlICk7XHJcbiAgICBtb2RlbC5zZWxlY3RlZFZhcmlhYmlsaXR5UHJvcGVydHkubGluayggdXBkYXRlSVFSTm9kZSApO1xyXG4gICAgc2NlbmVNb2RlbC5udW1iZXJPZkRhdGFQb2ludHNQcm9wZXJ0eS5saW5rKCB1cGRhdGVJUVJOb2RlICk7XHJcbiAgfVxyXG59XHJcblxyXG5jZW50ZXJBbmRWYXJpYWJpbGl0eS5yZWdpc3RlciggJ0lRUk5vZGUnLCBJUVJOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFP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