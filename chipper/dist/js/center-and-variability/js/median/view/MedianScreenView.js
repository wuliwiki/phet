// Copyright 2022-2023, University of Colorado Boulder

/**
 * Screen View for the "Median" screen
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import centerAndVariability from '../../centerAndVariability.js';
import CAVColors from '../../common/CAVColors.js';
import CenterAndVariabilityStrings from '../../CenterAndVariabilityStrings.js';
import CAVScreenView from '../../common/view/CAVScreenView.js';
import MedianAccordionBox from './MedianAccordionBox.js';
import BottomRepresentationCheckboxGroup from '../../common/view/BottomRepresentationCheckboxGroup.js';
import { AlignGroup } from '../../../../scenery/js/imports.js';
import CAVConstants from '../../common/CAVConstants.js';
export default class MedianScreenView extends CAVScreenView {
  constructor(model, providedOptions) {
    const options = optionize()({
      questionBarOptions: {
        barFill: CAVColors.medianQuestionBarFillColorProperty,
        questionString: CenterAndVariabilityStrings.medianQuestionStringProperty
      }
    }, providedOptions);
    super(model, options);
    this.setAccordionBox(new MedianAccordionBox(model, this.layoutBounds, options.tandem.createTandem('accordionBox'), this.questionBar.bottom + CAVConstants.SCREEN_VIEW_Y_MARGIN));
    const iconGroup = new AlignGroup();
    super.setBottomCheckboxGroup([BottomRepresentationCheckboxGroup.getPredictMedianCheckboxItem(iconGroup, model), BottomRepresentationCheckboxGroup.getMedianCheckboxItem(iconGroup, model)]);
    this.contentLayer.addChild(CAVScreenView.createMedianPredictionNode(model, this.modelViewTransform, options.tandem.createTandem('medianPredictionNode')));
  }
}
centerAndVariability.register('MedianScreenView', MedianScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjZW50ZXJBbmRWYXJpYWJpbGl0eSIsIkNBVkNvbG9ycyIsIkNlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncyIsIkNBVlNjcmVlblZpZXciLCJNZWRpYW5BY2NvcmRpb25Cb3giLCJCb3R0b21SZXByZXNlbnRhdGlvbkNoZWNrYm94R3JvdXAiLCJBbGlnbkdyb3VwIiwiQ0FWQ29uc3RhbnRzIiwiTWVkaWFuU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicXVlc3Rpb25CYXJPcHRpb25zIiwiYmFyRmlsbCIsIm1lZGlhblF1ZXN0aW9uQmFyRmlsbENvbG9yUHJvcGVydHkiLCJxdWVzdGlvblN0cmluZyIsIm1lZGlhblF1ZXN0aW9uU3RyaW5nUHJvcGVydHkiLCJzZXRBY2NvcmRpb25Cb3giLCJsYXlvdXRCb3VuZHMiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJxdWVzdGlvbkJhciIsImJvdHRvbSIsIlNDUkVFTl9WSUVXX1lfTUFSR0lOIiwiaWNvbkdyb3VwIiwic2V0Qm90dG9tQ2hlY2tib3hHcm91cCIsImdldFByZWRpY3RNZWRpYW5DaGVja2JveEl0ZW0iLCJnZXRNZWRpYW5DaGVja2JveEl0ZW0iLCJjb250ZW50TGF5ZXIiLCJhZGRDaGlsZCIsImNyZWF0ZU1lZGlhblByZWRpY3Rpb25Ob2RlIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNZWRpYW5TY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNjcmVlbiBWaWV3IGZvciB0aGUgXCJNZWRpYW5cIiBzY3JlZW5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgY2VudGVyQW5kVmFyaWFiaWxpdHkgZnJvbSAnLi4vLi4vY2VudGVyQW5kVmFyaWFiaWxpdHkuanMnO1xyXG5pbXBvcnQgTWVkaWFuTW9kZWwgZnJvbSAnLi4vbW9kZWwvTWVkaWFuTW9kZWwuanMnO1xyXG5pbXBvcnQgQ0FWQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9DQVZDb2xvcnMuanMnO1xyXG5pbXBvcnQgQ2VudGVyQW5kVmFyaWFiaWxpdHlTdHJpbmdzIGZyb20gJy4uLy4uL0NlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IENBVlNjcmVlblZpZXcsIHsgQ0FWU2NyZWVuVmlld09wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9DQVZTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IE1lZGlhbkFjY29yZGlvbkJveCBmcm9tICcuL01lZGlhbkFjY29yZGlvbkJveC5qcyc7XHJcbmltcG9ydCBCb3R0b21SZXByZXNlbnRhdGlvbkNoZWNrYm94R3JvdXAgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQm90dG9tUmVwcmVzZW50YXRpb25DaGVja2JveEdyb3VwLmpzJztcclxuaW1wb3J0IHsgQWxpZ25Hcm91cCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDQVZDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0NBVkNvbnN0YW50cy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxudHlwZSBNZWRpYW5TY3JlZW5WaWV3T3B0aW9ucyA9XHJcbiAgU2VsZk9wdGlvbnNcclxuICAmIFN0cmljdE9taXQ8Q0FWU2NyZWVuVmlld09wdGlvbnMsICdxdWVzdGlvbkJhck9wdGlvbnMnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhblNjcmVlblZpZXcgZXh0ZW5kcyBDQVZTY3JlZW5WaWV3IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbDogTWVkaWFuTW9kZWwsIHByb3ZpZGVkT3B0aW9uczogTWVkaWFuU2NyZWVuVmlld09wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxNZWRpYW5TY3JlZW5WaWV3T3B0aW9ucywgU2VsZk9wdGlvbnMsIENBVlNjcmVlblZpZXdPcHRpb25zPigpKCB7XHJcbiAgICAgIHF1ZXN0aW9uQmFyT3B0aW9uczoge1xyXG4gICAgICAgIGJhckZpbGw6IENBVkNvbG9ycy5tZWRpYW5RdWVzdGlvbkJhckZpbGxDb2xvclByb3BlcnR5LFxyXG4gICAgICAgIHF1ZXN0aW9uU3RyaW5nOiBDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MubWVkaWFuUXVlc3Rpb25TdHJpbmdQcm9wZXJ0eVxyXG4gICAgICB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnNldEFjY29yZGlvbkJveCggbmV3IE1lZGlhbkFjY29yZGlvbkJveCggbW9kZWwsIHRoaXMubGF5b3V0Qm91bmRzLCBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhY2NvcmRpb25Cb3gnICksIHRoaXMucXVlc3Rpb25CYXIuYm90dG9tICsgQ0FWQ29uc3RhbnRzLlNDUkVFTl9WSUVXX1lfTUFSR0lOICkgKTtcclxuXHJcbiAgICBjb25zdCBpY29uR3JvdXAgPSBuZXcgQWxpZ25Hcm91cCgpO1xyXG4gICAgc3VwZXIuc2V0Qm90dG9tQ2hlY2tib3hHcm91cCggW1xyXG4gICAgICBCb3R0b21SZXByZXNlbnRhdGlvbkNoZWNrYm94R3JvdXAuZ2V0UHJlZGljdE1lZGlhbkNoZWNrYm94SXRlbSggaWNvbkdyb3VwLCBtb2RlbCApLFxyXG4gICAgICBCb3R0b21SZXByZXNlbnRhdGlvbkNoZWNrYm94R3JvdXAuZ2V0TWVkaWFuQ2hlY2tib3hJdGVtKCBpY29uR3JvdXAsIG1vZGVsIClcclxuICAgIF0gKTtcclxuXHJcbiAgICB0aGlzLmNvbnRlbnRMYXllci5hZGRDaGlsZCggQ0FWU2NyZWVuVmlldy5jcmVhdGVNZWRpYW5QcmVkaWN0aW9uTm9kZShcclxuICAgICAgbW9kZWwsXHJcbiAgICAgIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdtZWRpYW5QcmVkaWN0aW9uTm9kZScgKVxyXG4gICAgKSApO1xyXG4gIH1cclxufVxyXG5cclxuY2VudGVyQW5kVmFyaWFiaWxpdHkucmVnaXN0ZXIoICdNZWRpYW5TY3JlZW5WaWV3JywgTWVkaWFuU2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUVoRSxPQUFPQyxTQUFTLE1BQU0sMkJBQTJCO0FBQ2pELE9BQU9DLDJCQUEyQixNQUFNLHNDQUFzQztBQUU5RSxPQUFPQyxhQUFhLE1BQWdDLG9DQUFvQztBQUN4RixPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFDeEQsT0FBT0MsaUNBQWlDLE1BQU0sd0RBQXdEO0FBQ3RHLFNBQVNDLFVBQVUsUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQU92RCxlQUFlLE1BQU1DLGdCQUFnQixTQUFTTCxhQUFhLENBQUM7RUFFbkRNLFdBQVdBLENBQUVDLEtBQWtCLEVBQUVDLGVBQXdDLEVBQUc7SUFFakYsTUFBTUMsT0FBTyxHQUFHYixTQUFTLENBQTZELENBQUMsQ0FBRTtNQUN2RmMsa0JBQWtCLEVBQUU7UUFDbEJDLE9BQU8sRUFBRWIsU0FBUyxDQUFDYyxrQ0FBa0M7UUFDckRDLGNBQWMsRUFBRWQsMkJBQTJCLENBQUNlO01BQzlDO0lBQ0YsQ0FBQyxFQUFFTixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsS0FBSyxFQUFFRSxPQUFRLENBQUM7SUFFdkIsSUFBSSxDQUFDTSxlQUFlLENBQUUsSUFBSWQsa0JBQWtCLENBQUVNLEtBQUssRUFBRSxJQUFJLENBQUNTLFlBQVksRUFBRVAsT0FBTyxDQUFDUSxNQUFNLENBQUNDLFlBQVksQ0FBRSxjQUFlLENBQUMsRUFBRSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsTUFBTSxHQUFHaEIsWUFBWSxDQUFDaUIsb0JBQXFCLENBQUUsQ0FBQztJQUV0TCxNQUFNQyxTQUFTLEdBQUcsSUFBSW5CLFVBQVUsQ0FBQyxDQUFDO0lBQ2xDLEtBQUssQ0FBQ29CLHNCQUFzQixDQUFFLENBQzVCckIsaUNBQWlDLENBQUNzQiw0QkFBNEIsQ0FBRUYsU0FBUyxFQUFFZixLQUFNLENBQUMsRUFDbEZMLGlDQUFpQyxDQUFDdUIscUJBQXFCLENBQUVILFNBQVMsRUFBRWYsS0FBTSxDQUFDLENBQzNFLENBQUM7SUFFSCxJQUFJLENBQUNtQixZQUFZLENBQUNDLFFBQVEsQ0FBRTNCLGFBQWEsQ0FBQzRCLDBCQUEwQixDQUNsRXJCLEtBQUssRUFDTCxJQUFJLENBQUNzQixrQkFBa0IsRUFDdkJwQixPQUFPLENBQUNRLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHNCQUF1QixDQUN0RCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFyQixvQkFBb0IsQ0FBQ2lDLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRXpCLGdCQUFpQixDQUFDIn0=