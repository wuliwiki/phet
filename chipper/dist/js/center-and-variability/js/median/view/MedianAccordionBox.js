// Copyright 2023, University of Colorado Boulder

import CAVAccordionBox from '../../common/view/CAVAccordionBox.js';
import CardNodeContainer from './CardNodeContainer.js';
import { Text } from '../../../../scenery/js/imports.js';
import CenterAndVariabilityStrings from '../../CenterAndVariabilityStrings.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import centerAndVariability from '../../centerAndVariability.js';
import TopRepresentationCheckboxGroup from '../../common/view/TopRepresentationCheckboxGroup.js';
import VerticalCheckboxGroup from '../../../../sun/js/VerticalCheckboxGroup.js';
export default class MedianAccordionBox extends CAVAccordionBox {
  constructor(model, layoutBounds, tandem, top) {
    const cardNodeContainer = new CardNodeContainer(model, {
      // Expose this intermediate layer to make it so that clients can hide the number cards with one call
      tandem: tandem.createTandem('cardNodeContainer')
    });
    const checkboxGroup = new VerticalCheckboxGroup([TopRepresentationCheckboxGroup.getSortDataCheckboxItem(model.isSortingDataProperty), TopRepresentationCheckboxGroup.getMedianCheckboxWithoutIconItem(model.isShowingTopMedianProperty)], {
      tandem: tandem.createTandem('accordionCheckboxGroup')
    });
    super(model.selectedSceneModelProperty.value.resetEmitter, cardNodeContainer, new Text(CenterAndVariabilityStrings.distanceInMetersStringProperty, {
      font: new PhetFont(16),
      maxWidth: 300
    }), layoutBounds, checkboxGroup, {
      leftMargin: 0,
      tandem: tandem,
      top: top,
      centerX: layoutBounds.centerX
    });
  }
}
centerAndVariability.register('MedianAccordionBox', MedianAccordionBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDQVZBY2NvcmRpb25Cb3giLCJDYXJkTm9kZUNvbnRhaW5lciIsIlRleHQiLCJDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MiLCJQaGV0Rm9udCIsImNlbnRlckFuZFZhcmlhYmlsaXR5IiwiVG9wUmVwcmVzZW50YXRpb25DaGVja2JveEdyb3VwIiwiVmVydGljYWxDaGVja2JveEdyb3VwIiwiTWVkaWFuQWNjb3JkaW9uQm94IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsImxheW91dEJvdW5kcyIsInRhbmRlbSIsInRvcCIsImNhcmROb2RlQ29udGFpbmVyIiwiY3JlYXRlVGFuZGVtIiwiY2hlY2tib3hHcm91cCIsImdldFNvcnREYXRhQ2hlY2tib3hJdGVtIiwiaXNTb3J0aW5nRGF0YVByb3BlcnR5IiwiZ2V0TWVkaWFuQ2hlY2tib3hXaXRob3V0SWNvbkl0ZW0iLCJpc1Nob3dpbmdUb3BNZWRpYW5Qcm9wZXJ0eSIsInNlbGVjdGVkU2NlbmVNb2RlbFByb3BlcnR5IiwidmFsdWUiLCJyZXNldEVtaXR0ZXIiLCJkaXN0YW5jZUluTWV0ZXJzU3RyaW5nUHJvcGVydHkiLCJmb250IiwibWF4V2lkdGgiLCJsZWZ0TWFyZ2luIiwiY2VudGVyWCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWVkaWFuQWNjb3JkaW9uQm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbmltcG9ydCBDQVZBY2NvcmRpb25Cb3ggZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQ0FWQWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IENhcmROb2RlQ29udGFpbmVyIGZyb20gJy4vQ2FyZE5vZGVDb250YWluZXIuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncyBmcm9tICcuLi8uLi9DZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IE1lZGlhbk1vZGVsIGZyb20gJy4uL21vZGVsL01lZGlhbk1vZGVsLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgY2VudGVyQW5kVmFyaWFiaWxpdHkgZnJvbSAnLi4vLi4vY2VudGVyQW5kVmFyaWFiaWxpdHkuanMnO1xyXG5pbXBvcnQgVG9wUmVwcmVzZW50YXRpb25DaGVja2JveEdyb3VwIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1RvcFJlcHJlc2VudGF0aW9uQ2hlY2tib3hHcm91cC5qcyc7XHJcbmltcG9ydCBWZXJ0aWNhbENoZWNrYm94R3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1ZlcnRpY2FsQ2hlY2tib3hHcm91cC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYW5BY2NvcmRpb25Cb3ggZXh0ZW5kcyBDQVZBY2NvcmRpb25Cb3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBNZWRpYW5Nb2RlbCwgbGF5b3V0Qm91bmRzOiBCb3VuZHMyLCB0YW5kZW06IFRhbmRlbSwgdG9wOiBudW1iZXIgKSB7XHJcblxyXG4gICAgY29uc3QgY2FyZE5vZGVDb250YWluZXIgPSBuZXcgQ2FyZE5vZGVDb250YWluZXIoIG1vZGVsLCB7XHJcbiAgICAgIC8vIEV4cG9zZSB0aGlzIGludGVybWVkaWF0ZSBsYXllciB0byBtYWtlIGl0IHNvIHRoYXQgY2xpZW50cyBjYW4gaGlkZSB0aGUgbnVtYmVyIGNhcmRzIHdpdGggb25lIGNhbGxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY2FyZE5vZGVDb250YWluZXInIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjaGVja2JveEdyb3VwID0gbmV3IFZlcnRpY2FsQ2hlY2tib3hHcm91cCggW1xyXG4gICAgICBUb3BSZXByZXNlbnRhdGlvbkNoZWNrYm94R3JvdXAuZ2V0U29ydERhdGFDaGVja2JveEl0ZW0oIG1vZGVsLmlzU29ydGluZ0RhdGFQcm9wZXJ0eSApLFxyXG4gICAgICBUb3BSZXByZXNlbnRhdGlvbkNoZWNrYm94R3JvdXAuZ2V0TWVkaWFuQ2hlY2tib3hXaXRob3V0SWNvbkl0ZW0oIG1vZGVsLmlzU2hvd2luZ1RvcE1lZGlhblByb3BlcnR5IClcclxuICAgIF0sIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYWNjb3JkaW9uQ2hlY2tib3hHcm91cCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbC5zZWxlY3RlZFNjZW5lTW9kZWxQcm9wZXJ0eS52YWx1ZS5yZXNldEVtaXR0ZXIsIGNhcmROb2RlQ29udGFpbmVyLFxyXG4gICAgICBuZXcgVGV4dCggQ2VudGVyQW5kVmFyaWFiaWxpdHlTdHJpbmdzLmRpc3RhbmNlSW5NZXRlcnNTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTYgKSxcclxuICAgICAgICBtYXhXaWR0aDogMzAwXHJcbiAgICAgIH0gKSxcclxuICAgICAgbGF5b3V0Qm91bmRzLFxyXG4gICAgICBjaGVja2JveEdyb3VwLFxyXG4gICAgICB7XHJcbiAgICAgICAgbGVmdE1hcmdpbjogMCxcclxuICAgICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgICB0b3A6IHRvcCxcclxuICAgICAgICBjZW50ZXJYOiBsYXlvdXRCb3VuZHMuY2VudGVyWFxyXG4gICAgICB9ICk7XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuXHJcbmNlbnRlckFuZFZhcmlhYmlsaXR5LnJlZ2lzdGVyKCAnTWVkaWFuQWNjb3JkaW9uQm94JywgTWVkaWFuQWNjb3JkaW9uQm94ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sc0NBQXNDO0FBQ2xFLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLDJCQUEyQixNQUFNLHNDQUFzQztBQUM5RSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBSTlELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUNoRSxPQUFPQyw4QkFBOEIsTUFBTSxxREFBcUQ7QUFDaEcsT0FBT0MscUJBQXFCLE1BQU0sNkNBQTZDO0FBRS9FLGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNSLGVBQWUsQ0FBQztFQUV2RFMsV0FBV0EsQ0FBRUMsS0FBa0IsRUFBRUMsWUFBcUIsRUFBRUMsTUFBYyxFQUFFQyxHQUFXLEVBQUc7SUFFM0YsTUFBTUMsaUJBQWlCLEdBQUcsSUFBSWIsaUJBQWlCLENBQUVTLEtBQUssRUFBRTtNQUN0RDtNQUNBRSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLG1CQUFvQjtJQUNuRCxDQUFFLENBQUM7SUFFSCxNQUFNQyxhQUFhLEdBQUcsSUFBSVQscUJBQXFCLENBQUUsQ0FDL0NELDhCQUE4QixDQUFDVyx1QkFBdUIsQ0FBRVAsS0FBSyxDQUFDUSxxQkFBc0IsQ0FBQyxFQUNyRlosOEJBQThCLENBQUNhLGdDQUFnQyxDQUFFVCxLQUFLLENBQUNVLDBCQUEyQixDQUFDLENBQ3BHLEVBQUU7TUFDRFIsTUFBTSxFQUFFQSxNQUFNLENBQUNHLFlBQVksQ0FBRSx3QkFBeUI7SUFDeEQsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFTCxLQUFLLENBQUNXLDBCQUEwQixDQUFDQyxLQUFLLENBQUNDLFlBQVksRUFBRVQsaUJBQWlCLEVBQzNFLElBQUlaLElBQUksQ0FBRUMsMkJBQTJCLENBQUNxQiw4QkFBOEIsRUFBRTtNQUNwRUMsSUFBSSxFQUFFLElBQUlyQixRQUFRLENBQUUsRUFBRyxDQUFDO01BQ3hCc0IsUUFBUSxFQUFFO0lBQ1osQ0FBRSxDQUFDLEVBQ0hmLFlBQVksRUFDWkssYUFBYSxFQUNiO01BQ0VXLFVBQVUsRUFBRSxDQUFDO01BQ2JmLE1BQU0sRUFBRUEsTUFBTTtNQUNkQyxHQUFHLEVBQUVBLEdBQUc7TUFDUmUsT0FBTyxFQUFFakIsWUFBWSxDQUFDaUI7SUFDeEIsQ0FBRSxDQUFDO0VBQ1A7QUFHRjtBQUVBdkIsb0JBQW9CLENBQUN3QixRQUFRLENBQUUsb0JBQW9CLEVBQUVyQixrQkFBbUIsQ0FBQyJ9