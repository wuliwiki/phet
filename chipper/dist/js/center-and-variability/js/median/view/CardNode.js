// Copyright 2022-2023, University of Colorado Boulder

/**
 * Draggable node that shows a single number on a card.  The number can change if the corresponding ball is dragged.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import centerAndVariability from '../../centerAndVariability.js';
import { DragListener, Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Animation from '../../../../twixt/js/Animation.js';
import Easing from '../../../../twixt/js/Easing.js';
import Emitter from '../../../../axon/js/Emitter.js';
export default class CardNode extends Node {
  // Emit how far the card has been dragged for purposes of hiding the drag indicator arrow when the user
  // has dragged a sufficient amount
  dragDistanceEmitter = new Emitter({
    parameters: [{
      valueType: 'number'
    }]
  });
  animation = null;
  animationTo = null;
  static CARD_WIDTH = 43;
  constructor(cardModel, position, getDragRange, providedOptions) {
    const cornerRadius = 10;
    const rectangle = new Rectangle(0, 0, CardNode.CARD_WIDTH, CardNode.CARD_WIDTH, cornerRadius, cornerRadius, {
      stroke: 'black',
      lineWidth: 1,
      fill: 'white'
    });
    const text = new Text('', {
      font: new PhetFont(24)
    });
    const options = optionize()({
      children: [rectangle, text],
      cursor: 'pointer',
      phetioDynamicElement: true
    }, providedOptions);
    super(options);
    cardModel.soccerBall.valueProperty.link(value => {
      text.string = value === null ? '' : value + '';
      text.center = rectangle.center;
      this.visible = value !== null;
    });
    this.positionProperty = new Vector2Property(position, {
      tandem: options.tandem.createTandem('positionProperty'),
      valueComparisonStrategy: 'equalsFunction'
    });
    this.soccerBall = cardModel.soccerBall;
    this.positionProperty.link(position => {
      const range = getDragRange();
      this.translation = new Vector2(range.constrainValue(position.x), 0);
    });
    this.dragListener = new DragListener({
      tandem: options.tandem.createTandem('dragListener'),
      positionProperty: this.positionProperty,
      start: () => {
        this.moveToFront();
      },
      // TODO-UX: This emits for dragging the leftmost card to the left, see https://github.com/phetsims/center-and-variability/issues/111
      drag: (event, listener) => this.dragDistanceEmitter.emit(Math.abs(listener.modelDelta.x))
    });
    this.addInputListener(this.dragListener);
    this.soccerBall.dragStartedEmitter.addListener(() => this.moveToFront());
  }
  animateTo(destination, duration, callback = _.noop) {
    if (this.animation) {
      assert && assert(!!this.animationTo, 'animationTo should be defined when animation is defined');
      if (destination.equals(this.animationTo)) {
        // Already moving to the desired destination.
        // TODO: should this callback be called from the finishEmitter of the existing animation?
        callback();
        return;
      } else {
        this.animation.stop();
      }
    } else {
      if (destination.equals(this.positionProperty.value)) {
        // Already at the desired destination.
        callback();
        return;
      }
    }
    this.animation = new Animation({
      duration: duration,
      targets: [{
        property: this.positionProperty,
        to: destination,
        easing: Easing.QUADRATIC_IN_OUT
      }]
    });
    this.animationTo = destination;
    this.animation.endedEmitter.addListener(() => {
      callback();
      this.animation = null;
      this.animationTo = null;
    });
    this.animation.start();
  }
}
centerAndVariability.register('CardNode', CardNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,