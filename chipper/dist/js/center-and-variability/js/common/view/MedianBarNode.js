// Copyright 2022-2023, University of Colorado Boulder

/**
 * Renders non-interactive red bars that show how the median splits up into the lower and upper groups.
 * This appears within the CardNodeContainer and in the CAVPlotNode
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import centerAndVariability from '../../centerAndVariability.js';
import { Path } from '../../../../scenery/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Shape } from '../../../../kite/js/imports.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import CAVColors from '../CAVColors.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
export default class MedianBarNode extends Path {
  static NOTCH_HEIGHT = 10;
  static HALF_SPLIT_WIDTH = 2;
  constructor(providedOptions) {
    const options = optionize()({
      lineWidth: MedianBarNode.LINE_WIDTH,
      stroke: CAVColors.medianColorProperty,
      arrowScale: 1,
      excludeInvisibleChildrenFromBounds: true
    }, providedOptions);
    super(null, options);
    this.notchDirection = options.notchDirection;
    this.barStyle = options.barStyle;
    this.medianArrowNode = new ArrowNode(0, 0, 0, MedianBarNode.NOTCH_HEIGHT + 3, {
      scale: options.arrowScale,
      headHeight: 8,
      headWidth: 9,
      tailWidth: MedianBarNode.LINE_WIDTH,
      fill: CAVColors.medianColorProperty,
      stroke: null,
      visible: false
    });
    this.addChild(this.medianArrowNode);
  }
  setMedianBarShape(y, left, median, right, includeMedianArrow) {
    const shape = new Shape();
    const notchSign = this.notchDirection === 'up' ? -1 : 1;
    const leftCorner = new Vector2(left, y);
    const rightCorner = new Vector2(right, y);
    const medianVector = new Vector2(median, y);
    shape.moveToPoint(leftCorner.plusXY(0, MedianBarNode.NOTCH_HEIGHT * notchSign));
    shape.lineToPoint(leftCorner);
    if (this.barStyle === 'split') {
      shape.lineToPoint(medianVector.plusXY(-MedianBarNode.HALF_SPLIT_WIDTH, 0));
      shape.lineToRelative(0, MedianBarNode.NOTCH_HEIGHT * notchSign);
      shape.moveToPoint(medianVector.plusXY(MedianBarNode.HALF_SPLIT_WIDTH, MedianBarNode.NOTCH_HEIGHT * notchSign));
      shape.lineToRelative(0, -MedianBarNode.NOTCH_HEIGHT * notchSign);
    }
    shape.lineToPoint(rightCorner);
    shape.lineToPoint(rightCorner.plusXY(0, MedianBarNode.NOTCH_HEIGHT * notchSign));
    this.shape = shape;
    this.medianArrowNode.centerTop = new Vector2(medianVector.x, y);
    this.medianArrowNode.visible = includeMedianArrow;
    return this;
  }
  clear() {
    this.shape = null;
    this.medianArrowNode.visible = false;
  }
  static LINE_WIDTH = 2;
}
centerAndVariability.register('MedianBarNode', MedianBarNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjZW50ZXJBbmRWYXJpYWJpbGl0eSIsIlBhdGgiLCJvcHRpb25pemUiLCJTaGFwZSIsIlZlY3RvcjIiLCJDQVZDb2xvcnMiLCJBcnJvd05vZGUiLCJNZWRpYW5CYXJOb2RlIiwiTk9UQ0hfSEVJR0hUIiwiSEFMRl9TUExJVF9XSURUSCIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImxpbmVXaWR0aCIsIkxJTkVfV0lEVEgiLCJzdHJva2UiLCJtZWRpYW5Db2xvclByb3BlcnR5IiwiYXJyb3dTY2FsZSIsImV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHMiLCJub3RjaERpcmVjdGlvbiIsImJhclN0eWxlIiwibWVkaWFuQXJyb3dOb2RlIiwic2NhbGUiLCJoZWFkSGVpZ2h0IiwiaGVhZFdpZHRoIiwidGFpbFdpZHRoIiwiZmlsbCIsInZpc2libGUiLCJhZGRDaGlsZCIsInNldE1lZGlhbkJhclNoYXBlIiwieSIsImxlZnQiLCJtZWRpYW4iLCJyaWdodCIsImluY2x1ZGVNZWRpYW5BcnJvdyIsInNoYXBlIiwibm90Y2hTaWduIiwibGVmdENvcm5lciIsInJpZ2h0Q29ybmVyIiwibWVkaWFuVmVjdG9yIiwibW92ZVRvUG9pbnQiLCJwbHVzWFkiLCJsaW5lVG9Qb2ludCIsImxpbmVUb1JlbGF0aXZlIiwiY2VudGVyVG9wIiwieCIsImNsZWFyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNZWRpYW5CYXJOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgbm9uLWludGVyYWN0aXZlIHJlZCBiYXJzIHRoYXQgc2hvdyBob3cgdGhlIG1lZGlhbiBzcGxpdHMgdXAgaW50byB0aGUgbG93ZXIgYW5kIHVwcGVyIGdyb3Vwcy5cclxuICogVGhpcyBhcHBlYXJzIHdpdGhpbiB0aGUgQ2FyZE5vZGVDb250YWluZXIgYW5kIGluIHRoZSBDQVZQbG90Tm9kZVxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNlbnRlckFuZFZhcmlhYmlsaXR5IGZyb20gJy4uLy4uL2NlbnRlckFuZFZhcmlhYmlsaXR5LmpzJztcclxuaW1wb3J0IHsgUGF0aCwgUGF0aE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IENBVkNvbG9ycyBmcm9tICcuLi9DQVZDb2xvcnMuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5cclxuZXhwb3J0IHR5cGUgTm90Y2hEaXJlY3Rpb24gPSAndXAnIHwgJ2Rvd24nO1xyXG5leHBvcnQgdHlwZSBCYXJTdHlsZSA9ICdjb250aW51b3VzJyB8ICdzcGxpdCc7XHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgbm90Y2hEaXJlY3Rpb246IE5vdGNoRGlyZWN0aW9uO1xyXG4gIGJhclN0eWxlOiBCYXJTdHlsZTtcclxuICBhcnJvd1NjYWxlPzogbnVtYmVyO1xyXG59O1xyXG5leHBvcnQgdHlwZSBNZWRpYW5CYXJOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGF0aE9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYW5CYXJOb2RlIGV4dGVuZHMgUGF0aCB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBub3RjaERpcmVjdGlvbjogTm90Y2hEaXJlY3Rpb247XHJcbiAgcHJpdmF0ZSByZWFkb25seSBiYXJTdHlsZTogQmFyU3R5bGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBtZWRpYW5BcnJvd05vZGU6IEFycm93Tm9kZTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE5PVENIX0hFSUdIVCA9IDEwO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSEFMRl9TUExJVF9XSURUSCA9IDI7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBNZWRpYW5CYXJOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE1lZGlhbkJhck5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGF0aE9wdGlvbnM+KCkoIHtcclxuICAgICAgbGluZVdpZHRoOiBNZWRpYW5CYXJOb2RlLkxJTkVfV0lEVEgsXHJcbiAgICAgIHN0cm9rZTogQ0FWQ29sb3JzLm1lZGlhbkNvbG9yUHJvcGVydHksXHJcbiAgICAgIGFycm93U2NhbGU6IDEsXHJcbiAgICAgIGV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHM6IHRydWVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBudWxsLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5ub3RjaERpcmVjdGlvbiA9IG9wdGlvbnMubm90Y2hEaXJlY3Rpb247XHJcbiAgICB0aGlzLmJhclN0eWxlID0gb3B0aW9ucy5iYXJTdHlsZTtcclxuXHJcbiAgICB0aGlzLm1lZGlhbkFycm93Tm9kZSA9IG5ldyBBcnJvd05vZGUoIDAsIDAsIDAsIE1lZGlhbkJhck5vZGUuTk9UQ0hfSEVJR0hUICsgMywge1xyXG4gICAgICBzY2FsZTogb3B0aW9ucy5hcnJvd1NjYWxlLFxyXG4gICAgICBoZWFkSGVpZ2h0OiA4LFxyXG4gICAgICBoZWFkV2lkdGg6IDksXHJcbiAgICAgIHRhaWxXaWR0aDogTWVkaWFuQmFyTm9kZS5MSU5FX1dJRFRILFxyXG4gICAgICBmaWxsOiBDQVZDb2xvcnMubWVkaWFuQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgc3Ryb2tlOiBudWxsLFxyXG4gICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5tZWRpYW5BcnJvd05vZGUgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRNZWRpYW5CYXJTaGFwZSggeTogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIG1lZGlhbjogbnVtYmVyLCByaWdodDogbnVtYmVyLCBpbmNsdWRlTWVkaWFuQXJyb3c6IGJvb2xlYW4gKTogdGhpcyB7XHJcbiAgICBjb25zdCBzaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG5cclxuICAgIGNvbnN0IG5vdGNoU2lnbiA9IHRoaXMubm90Y2hEaXJlY3Rpb24gPT09ICd1cCcgPyAtMSA6IDE7XHJcbiAgICBjb25zdCBsZWZ0Q29ybmVyID0gbmV3IFZlY3RvcjIoIGxlZnQsIHkgKTtcclxuICAgIGNvbnN0IHJpZ2h0Q29ybmVyID0gbmV3IFZlY3RvcjIoIHJpZ2h0LCB5ICk7XHJcbiAgICBjb25zdCBtZWRpYW5WZWN0b3IgPSBuZXcgVmVjdG9yMiggbWVkaWFuLCB5ICk7XHJcblxyXG4gICAgc2hhcGUubW92ZVRvUG9pbnQoIGxlZnRDb3JuZXIucGx1c1hZKCAwLCBNZWRpYW5CYXJOb2RlLk5PVENIX0hFSUdIVCAqIG5vdGNoU2lnbiApICk7XHJcbiAgICBzaGFwZS5saW5lVG9Qb2ludCggbGVmdENvcm5lciApO1xyXG5cclxuICAgIGlmICggdGhpcy5iYXJTdHlsZSA9PT0gJ3NwbGl0JyApIHtcclxuICAgICAgc2hhcGUubGluZVRvUG9pbnQoIG1lZGlhblZlY3Rvci5wbHVzWFkoIC1NZWRpYW5CYXJOb2RlLkhBTEZfU1BMSVRfV0lEVEgsIDAgKSApO1xyXG4gICAgICBzaGFwZS5saW5lVG9SZWxhdGl2ZSggMCwgTWVkaWFuQmFyTm9kZS5OT1RDSF9IRUlHSFQgKiBub3RjaFNpZ24gKTtcclxuICAgICAgc2hhcGUubW92ZVRvUG9pbnQoIG1lZGlhblZlY3Rvci5wbHVzWFkoIE1lZGlhbkJhck5vZGUuSEFMRl9TUExJVF9XSURUSCwgTWVkaWFuQmFyTm9kZS5OT1RDSF9IRUlHSFQgKiBub3RjaFNpZ24gKSApO1xyXG4gICAgICBzaGFwZS5saW5lVG9SZWxhdGl2ZSggMCwgLU1lZGlhbkJhck5vZGUuTk9UQ0hfSEVJR0hUICogbm90Y2hTaWduICk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hhcGUubGluZVRvUG9pbnQoIHJpZ2h0Q29ybmVyICk7XHJcbiAgICBzaGFwZS5saW5lVG9Qb2ludCggcmlnaHRDb3JuZXIucGx1c1hZKCAwLCBNZWRpYW5CYXJOb2RlLk5PVENIX0hFSUdIVCAqIG5vdGNoU2lnbiApICk7XHJcblxyXG4gICAgdGhpcy5zaGFwZSA9IHNoYXBlO1xyXG5cclxuICAgIHRoaXMubWVkaWFuQXJyb3dOb2RlLmNlbnRlclRvcCA9IG5ldyBWZWN0b3IyKCBtZWRpYW5WZWN0b3IueCwgeSApO1xyXG4gICAgdGhpcy5tZWRpYW5BcnJvd05vZGUudmlzaWJsZSA9IGluY2x1ZGVNZWRpYW5BcnJvdztcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcclxuICAgIHRoaXMuc2hhcGUgPSBudWxsO1xyXG4gICAgdGhpcy5tZWRpYW5BcnJvd05vZGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBMSU5FX1dJRFRIID0gMjtcclxufVxyXG5cclxuY2VudGVyQW5kVmFyaWFiaWxpdHkucmVnaXN0ZXIoICdNZWRpYW5CYXJOb2RlJywgTWVkaWFuQmFyTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FB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