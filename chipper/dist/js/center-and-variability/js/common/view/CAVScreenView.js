// Copyright 2022-2023, University of Colorado Boulder

/**
 * Base class for all ScreenViews in the sim.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import ScreenView from '../../../../joist/js/ScreenView.js';
import optionize from '../../../../phet-core/js/optionize.js';
import centerAndVariability from '../../centerAndVariability.js';
import CAVConstants from '../CAVConstants.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import { AlignBox, ManualConstraint, Node } from '../../../../scenery/js/imports.js';
import EraserButton from '../../../../scenery-phet/js/buttons/EraserButton.js';
import QuestionBar from '../../../../scenery-phet/js/QuestionBar.js';
import NumberLineNode from './NumberLineNode.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import BackgroundNode from './BackgroundNode.js';
import merge from '../../../../phet-core/js/merge.js';
import VerticalCheckboxGroup from '../../../../sun/js/VerticalCheckboxGroup.js';
import PredictionSlider from './PredictionSlider.js';
import CAVColors from '../CAVColors.js';
import Property from '../../../../axon/js/Property.js';
import SceneView from './SceneView.js';
import KickButtonGroup from './KickButtonGroup.js';
import DynamicProperty from '../../../../axon/js/DynamicProperty.js';
// constants
const GROUND_POSITION_Y = 500;
export default class CAVScreenView extends ScreenView {
  frontObjectLayer = new Node();

  // TODO: We haven't enforced the "exactly half a ball should be occluded if anything is occluded" design, see https://github.com/phetsims/center-and-variability/issues/175
  // May need https://github.com/phetsims/center-and-variability/issues/166 to be addressed first
  backObjectLayer = new Node();
  // Subclasses use this to add to for correct z-ordering and correct tab navigation order
  contentLayer = new Node();
  accordionBox = null;
  constructor(model, providedOptions) {
    const options = optionize()({}, providedOptions);

    // The ground is at y=0
    const modelViewTransform = ModelViewTransform2.createRectangleInvertedYMapping(new Bounds2(CAVConstants.PHYSICAL_RANGE.min, 0, CAVConstants.PHYSICAL_RANGE.max, CAVConstants.PHYSICAL_RANGE.getLength()), new Bounds2(CAVConstants.NUMBER_LINE_MARGIN_X, GROUND_POSITION_Y - CAVConstants.CHART_VIEW_WIDTH, CAVConstants.NUMBER_LINE_MARGIN_X + CAVConstants.CHART_VIEW_WIDTH, GROUND_POSITION_Y));
    super(options);
    this.modelViewTransform = modelViewTransform;
    this.model = model;

    // Soccer balls go behind the accordion box after they land
    // this.contentLayer.addChild( this.backObjectLayer );

    this.addChild(this.contentLayer);
    this.addChild(this.frontObjectLayer);
    model.sceneModels.map(sceneModel => new SceneView(model, sceneModel, this.backObjectLayer, this.frontObjectLayer, modelViewTransform, () => this.accordionBox, {
      tandem: options.tandem.createTandem('sceneView')
    }));
    this.resetAllButton = new ResetAllButton({
      listener: () => {
        this.interruptSubtreeInput(); // cancel interactions that may be in progress

        model.reset();

        // hide the dragIndicatorArrowNode and reset the flag for if it has been dragged already
        // dragIndicatorArrowNode.visible = false;
      },

      right: this.layoutBounds.maxX - CAVConstants.SCREEN_VIEW_X_MARGIN,
      bottom: this.layoutBounds.maxY - CAVConstants.SCREEN_VIEW_Y_MARGIN,
      tandem: options.tandem.createTandem('resetAllButton')
    });
    this.eraseButton = new EraserButton({
      tandem: options.tandem.createTandem('eraseButton'),
      listener: () => {
        // Interrupt dragging of existing objects
        this.interruptSubtreeInput();
        model.selectedSceneModelProperty.value.clearData();

        // hide the dragIndicatorArrowNode but don't reset objectHasBeenDragged
        // dragIndicatorArrowNode.visible = false;
      },

      iconWidth: 26,
      right: this.resetAllButton.left - CAVConstants.SCREEN_VIEW_X_MARGIN,
      centerY: this.resetAllButton.centerY
    });
    this.addChild(this.eraseButton);
    this.addChild(this.resetAllButton);
    this.contentLayer.addChild(new BackgroundNode(GROUND_POSITION_Y, this.visibleBoundsProperty));
    this.playAreaNumberLineNode = new NumberLineNode(new DynamicProperty(model.selectedSceneModelProperty, {
      derive: 'meanValueProperty'
    }), model.isShowingPlayAreaMeanProperty, new DynamicProperty(model.selectedSceneModelProperty, {
      derive: 'dataRangeProperty'
    }), {
      includeXAxis: false,
      includeMeanStroke: true,
      tandem: options.tandem.createTandem('playAreaNumberLineNode'),
      x: CAVConstants.NUMBER_LINE_MARGIN_X,
      y: GROUND_POSITION_Y
    });
    this.contentLayer.addChild(this.playAreaNumberLineNode);
    this.questionBar = new QuestionBar(this.layoutBounds, this.visibleBoundsProperty, merge({
      tandem: options.tandem.createTandem('questionBar')
    }, options.questionBarOptions));
    this.contentLayer.addChild(this.questionBar);
    this.contentLayer.addChild(new KickButtonGroup(model, {
      left: 25,
      // Center between the ground and the bottom of the layout bounds.  Adjust because of the asymmetries:
      // the soccer player foot falls beneath the ground, and the shading of the buttons.
      centerY: (GROUND_POSITION_Y + this.layoutBounds.maxY) / 2 + 2,
      tandem: options.tandem.createTandem('kickButtonGroup')
    }));

    // Soccer balls go behind the accordion box after they land
    // TODO: Why is the back layer in the front?
    this.contentLayer.addChild(this.backObjectLayer);
  }
  updateAccordionBoxPosition() {
    this.accordionBox.top = this.questionBar.bottom + CAVConstants.SCREEN_VIEW_Y_MARGIN;
  }

  /**
   * Floating layout that keeps the ground near the ground, and accordion box near the question bar
   */
  layout(viewBounds) {
    super.layout(viewBounds, {
      verticalAlign: 'bottom'
    });
    this.accordionBox && this.updateAccordionBoxPosition();
  }

  /**
   * Called by subtype constructors to finish initialization.
   */
  setAccordionBox(accordionBox) {
    this.accordionBox = accordionBox;
    this.contentLayer.addChild(this.accordionBox);
    this.updateAccordionBoxPosition();
  }

  /**
   * Sets the accordion box and aligns its content with the play area number line node.
   * Should be used with accordion boxes that also have a number line.
   * The alignment  assumes that the NumberLineNode in the play area and in the dot plot have the same characteristics:
   * - Same font
   * -Same offset and scale
   * Given those assumptions, this code moves the dot plot so that its number line matches the play area one.
   */
  setAccordionBoxWithAlignedContent(accordionBox) {
    this.setAccordionBox(accordionBox);
    ManualConstraint.create(this, [this.playAreaNumberLineNode, accordionBox.plotNode], (lowerNumberLineWrapper, contentsWrapper) => {
      contentsWrapper.x = lowerNumberLineWrapper.x;
    });
  }
  setBottomCheckboxGroup(items) {
    const bottomCheckboxGroup = new VerticalCheckboxGroup(items, {
      tandem: this.tandem.createTandem('bottomCheckboxGroup')
    });

    // In order to use the AlignBox we need to know the distance from the top of the screen, to the top of the grass.
    const BOTTOM_CHECKBOX_PANEL_MARGIN = 12.5;
    const BOTTOM_CHECKBOX_PANEL_Y_MARGIN = this.layoutBounds.maxY - this.modelViewTransform.modelToViewY(0) + BOTTOM_CHECKBOX_PANEL_MARGIN;
    this.addChild(new AlignBox(bottomCheckboxGroup, {
      alignBounds: this.layoutBounds,
      xAlign: 'right',
      yAlign: 'bottom',
      xMargin: BOTTOM_CHECKBOX_PANEL_MARGIN,
      yMargin: BOTTOM_CHECKBOX_PANEL_Y_MARGIN
    }));
  }

  /**
   * The MedianPredictionNode is shared in the Median screen and MeanAndMedianScreen, so factored out here.
   */
  static createMedianPredictionNode(model, modelViewTransform, tandem) {
    return new PredictionSlider(model.medianPredictionProperty, modelViewTransform, CAVConstants.PHYSICAL_RANGE, {
      predictionThumbNodeOptions: {
        color: CAVColors.medianColorProperty
      },
      valueProperty: model.medianPredictionProperty,
      enabledRangeProperty: new Property(CAVConstants.PHYSICAL_RANGE),
      roundToInterval: 0.5,
      visibleProperty: model.isShowingMedianPredictionProperty,
      tandem: tandem
    });
  }
}
centerAndVariability.register('CAVScreenView', CAVScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,