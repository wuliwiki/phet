// Copyright 2022-2023, University of Colorado Boulder

/**
 * Supports any combination of checkboxes for each of the screens for the bottom objects.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import centerAndVariability from '../../centerAndVariability.js';
import VerticalCheckboxGroup from '../../../../sun/js/VerticalCheckboxGroup.js';
import { GridBox, Node, Text } from '../../../../scenery/js/imports.js';
import CAVConstants from '../CAVConstants.js';
import CenterAndVariabilityStrings from '../../CenterAndVariabilityStrings.js';
import CAVColors from '../CAVColors.js';
import NumberLineNode from './NumberLineNode.js';
import PredictionThumbNode from './PredictionThumbNode.js';
// constants
const TEXT_OPTIONS = {
  font: CAVConstants.MAIN_FONT,
  maxWidth: CAVConstants.CHECKBOX_TEXT_MAX_WIDTH
};
export default class BottomRepresentationCheckboxGroup extends VerticalCheckboxGroup {
  static createGridBox(text, icon, iconGroup) {
    return new GridBox({
      stretch: true,
      spacing: 5,
      grow: 1,
      rows: [[new Node({
        children: [text],
        layoutOptions: {
          xAlign: 'left'
        }
      }), iconGroup.createBox(icon, {
        layoutOptions: {
          xAlign: 'right'
        },
        xAlign: 'center'
      })]]
    });
  }
  static getVariabilityCheckboxItem(alignGroup, model) {
    return {
      createNode: tandem => {
        return BottomRepresentationCheckboxGroup.createGridBox(new Text(CenterAndVariabilityStrings.variabilityStringProperty, TEXT_OPTIONS), NumberLineNode.createMeanIndicatorNode(true, true), alignGroup);
      },
      property: model.isShowingPlayAreaVariabilityProperty,
      tandemName: 'variabilityCheckbox'
    };
  }
  static getMedianCheckboxItem(alignGroup, model) {
    return {
      createNode: tandem => {
        return BottomRepresentationCheckboxGroup.createGridBox(new Text(CenterAndVariabilityStrings.medianStringProperty, TEXT_OPTIONS), new ArrowNode(0, 0, 0, 27, {
          fill: CAVColors.medianColorProperty,
          stroke: CAVColors.arrowStrokeProperty,
          lineWidth: CAVConstants.ARROW_LINE_WIDTH,
          headHeight: 12,
          headWidth: 18,
          maxHeight: 20
        }), alignGroup);
      },
      property: model.isShowingPlayAreaMedianProperty,
      tandemName: 'medianCheckbox'
    };
  }
  static getMeanCheckboxItem(alignGroup, model) {
    return {
      createNode: tandem => BottomRepresentationCheckboxGroup.createGridBox(new Text(CenterAndVariabilityStrings.meanStringProperty, TEXT_OPTIONS), NumberLineNode.createMeanIndicatorNode(true, true), alignGroup),
      property: model.isShowingPlayAreaMeanProperty,
      tandemName: 'meanCheckbox'
    };
  }
  static createPredictionItem(property, stringProperty, color, spacing, tandemName, alignGroup) {
    return {
      createNode: tandem => {
        return BottomRepresentationCheckboxGroup.createGridBox(new Text(stringProperty, TEXT_OPTIONS), new PredictionThumbNode({
          color: color,
          maxHeight: 20,
          pickable: false
        }), alignGroup);
      },
      property: property,
      tandemName: tandemName
    };
  }
  static getPredictMedianCheckboxItem(alignGroup, model) {
    return BottomRepresentationCheckboxGroup.createPredictionItem(model.isShowingMedianPredictionProperty, CenterAndVariabilityStrings.predictMedianStringProperty, CAVColors.medianColorProperty, 8, 'predictMedianCheckbox', alignGroup);
  }
  static getPredictMeanCheckboxItem(alignGroup, model) {
    return BottomRepresentationCheckboxGroup.createPredictionItem(model.isShowingMeanPredictionProperty, CenterAndVariabilityStrings.predictMeanStringProperty, CAVColors.meanColorProperty, 20.3, 'predictMeanCheckbox', alignGroup);
  }
}
centerAndVariability.register('BottomRepresentationCheckboxGroup', BottomRepresentationCheckboxGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,