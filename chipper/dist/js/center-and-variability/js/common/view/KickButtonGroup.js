// Copyright 2022-2023, University of Colorado Boulder

/**
 * Shows the "Kick 1" and "Kick 5" buttons in the soccer screens.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import centerAndVariability from '../../centerAndVariability.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import { AlignGroup, Text, VBox } from '../../../../scenery/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import CenterAndVariabilityStrings from '../../CenterAndVariabilityStrings.js';
import CAVColors from '../CAVColors.js';
import CAVConstants from '../CAVConstants.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import PatternStringProperty from '../../../../axon/js/PatternStringProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import DynamicProperty from '../../../../axon/js/DynamicProperty.js';
// constants
const TEXT_MAX_WIDTH = 80;
export default class KickButtonGroup extends VBox {
  constructor(model, providedOptions) {
    const options = optionize()({
      spacing: 2
    }, providedOptions);
    const alignGroup = new AlignGroup();
    const createLabel = (label, tandem) => {
      const text = new Text(label, {
        maxWidth: TEXT_MAX_WIDTH,
        font: CAVConstants.MAIN_FONT
      });
      return {
        label: alignGroup.createBox(text),
        text: text
      };
    };
    const createKickButton = (content, tandem, numberToKick, multikick) => {
      const buttonVisibleProperty = new BooleanProperty(true, {
        tandem: tandem.createTandem('visibleProperty')
      });
      const hasKickableSoccerBallsProperty = new DynamicProperty(model.selectedSceneModelProperty, {
        derive: 'hasKickableSoccerBallsProperty'
      });

      // const hasKickableSoccerBallsProperty =
      //   DerivedProperty.deriveAny( [ model.selectedSceneModelProperty, ...model.sceneModels.map( scene => scene.hasKickableSoccerBallsProperty ) ], () => {
      //     return model.selectedSceneModelProperty.value.hasKickableSoccerBallsProperty.value;
      //   } );

      return new RectangularPushButton({
        visibleProperty: DerivedProperty.and([hasKickableSoccerBallsProperty, buttonVisibleProperty]),
        content: content.label,
        baseColor: CAVColors.kickButtonFillColorProperty,
        xMargin: 12,
        yMargin: 12,
        tandem: tandem,
        listener: () => model.selectedSceneModelProperty.value.scheduleKicks(numberToKick),
        // The Kick 1 button can be held down for repeat kicks, but the Kick 5 cannot.
        fireOnHold: !multikick,
        fireOnHoldDelay: 750,
        // This needs to be longer than CAVSceneModel.TIME_BETWEEN_RAPID_KICKS plus the poise time, see
        // https://github.com/phetsims/center-and-variability/issues/102
        fireOnHoldInterval: 650
      });
    };

    // Create tandems so the labels can appear at the proper place in the tandem tree
    const kick1ButtonTandem = options.tandem.createTandem('kickOneButton');
    const kick5ButtonTandem = options.tandem.createTandem('kickFiveButton');

    // Create labels first so their sizes can be aligned
    const kick1PatternStringProperty = new PatternStringProperty(CenterAndVariabilityStrings.kickValuePatternStringProperty, {
      value: 1
    });
    const kick1Label = createLabel(kick1PatternStringProperty, kick1ButtonTandem.createTandem('labelText'));
    const multiKickProperty = new NumberProperty(5);
    const kick5PatternStringProperty = new PatternStringProperty(CenterAndVariabilityStrings.kickValuePatternStringProperty, {
      value: multiKickProperty
    });
    const numberOfUnkickedBallsProperty = new DynamicProperty(model.selectedSceneModelProperty, {
      derive: 'numberOfUnkickedBallsProperty'
    });
    numberOfUnkickedBallsProperty.link(numberOfRemainingKickableObjects => {
      const value = Math.max(Math.min(numberOfRemainingKickableObjects, 5), 1);
      multiKickProperty.value = value;
    });
    const kick5Label = createLabel(kick5PatternStringProperty, kick5ButtonTandem.createTandem('labelText'));
    options.children = [createKickButton(kick1Label, kick1ButtonTandem, 1, false), createKickButton(kick5Label, kick5ButtonTandem, 5, true)];
    super(options);
  }
}
centerAndVariability.register('KickButtonGroup', KickButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjZW50ZXJBbmRWYXJpYWJpbGl0eSIsIlJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiIsIkFsaWduR3JvdXAiLCJUZXh0IiwiVkJveCIsIm9wdGlvbml6ZSIsIkNlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncyIsIkNBVkNvbG9ycyIsIkNBVkNvbnN0YW50cyIsIkJvb2xlYW5Qcm9wZXJ0eSIsIkRlcml2ZWRQcm9wZXJ0eSIsIlBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsIk51bWJlclByb3BlcnR5IiwiRHluYW1pY1Byb3BlcnR5IiwiVEVYVF9NQVhfV0lEVEgiLCJLaWNrQnV0dG9uR3JvdXAiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNwYWNpbmciLCJhbGlnbkdyb3VwIiwiY3JlYXRlTGFiZWwiLCJsYWJlbCIsInRhbmRlbSIsInRleHQiLCJtYXhXaWR0aCIsImZvbnQiLCJNQUlOX0ZPTlQiLCJjcmVhdGVCb3giLCJjcmVhdGVLaWNrQnV0dG9uIiwiY29udGVudCIsIm51bWJlclRvS2ljayIsIm11bHRpa2ljayIsImJ1dHRvblZpc2libGVQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsImhhc0tpY2thYmxlU29jY2VyQmFsbHNQcm9wZXJ0eSIsInNlbGVjdGVkU2NlbmVNb2RlbFByb3BlcnR5IiwiZGVyaXZlIiwidmlzaWJsZVByb3BlcnR5IiwiYW5kIiwiYmFzZUNvbG9yIiwia2lja0J1dHRvbkZpbGxDb2xvclByb3BlcnR5IiwieE1hcmdpbiIsInlNYXJnaW4iLCJsaXN0ZW5lciIsInZhbHVlIiwic2NoZWR1bGVLaWNrcyIsImZpcmVPbkhvbGQiLCJmaXJlT25Ib2xkRGVsYXkiLCJmaXJlT25Ib2xkSW50ZXJ2YWwiLCJraWNrMUJ1dHRvblRhbmRlbSIsImtpY2s1QnV0dG9uVGFuZGVtIiwia2ljazFQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJraWNrVmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJraWNrMUxhYmVsIiwibXVsdGlLaWNrUHJvcGVydHkiLCJraWNrNVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsIm51bWJlck9mVW5raWNrZWRCYWxsc1Byb3BlcnR5IiwibGluayIsIm51bWJlck9mUmVtYWluaW5nS2lja2FibGVPYmplY3RzIiwiTWF0aCIsIm1heCIsIm1pbiIsImtpY2s1TGFiZWwiLCJjaGlsZHJlbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiS2lja0J1dHRvbkdyb3VwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNob3dzIHRoZSBcIktpY2sgMVwiIGFuZCBcIktpY2sgNVwiIGJ1dHRvbnMgaW4gdGhlIHNvY2NlciBzY3JlZW5zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNlbnRlckFuZFZhcmlhYmlsaXR5IGZyb20gJy4uLy4uL2NlbnRlckFuZFZhcmlhYmlsaXR5LmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclB1c2hCdXR0b24uanMnO1xyXG5pbXBvcnQgeyBBbGlnbkdyb3VwLCBOb2RlLCBUZXh0LCBWQm94LCBWQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgQ2VudGVyQW5kVmFyaWFiaWxpdHlTdHJpbmdzIGZyb20gJy4uLy4uL0NlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBDQVZDb2xvcnMgZnJvbSAnLi4vQ0FWQ29sb3JzLmpzJztcclxuaW1wb3J0IENBVkNvbnN0YW50cyBmcm9tICcuLi9DQVZDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQYXR0ZXJuU3RyaW5nUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9QYXR0ZXJuU3RyaW5nUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBDQVZNb2RlbCBmcm9tICcuLi9tb2RlbC9DQVZNb2RlbC5qcyc7XHJcbmltcG9ydCBEeW5hbWljUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EeW5hbWljUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQ0FWU2NlbmVNb2RlbCBmcm9tICcuLi9tb2RlbC9DQVZTY2VuZU1vZGVsLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBLaWNrQnV0dG9uR3JvdXBPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBWQm94T3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxWQm94T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFRFWFRfTUFYX1dJRFRIID0gODA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLaWNrQnV0dG9uR3JvdXAgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbDogQ0FWTW9kZWwsIHByb3ZpZGVkT3B0aW9ucz86IEtpY2tCdXR0b25Hcm91cE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxLaWNrQnV0dG9uR3JvdXBPcHRpb25zLCBTZWxmT3B0aW9ucywgVkJveE9wdGlvbnM+KCkoIHtcclxuICAgICAgc3BhY2luZzogMlxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgYWxpZ25Hcm91cCA9IG5ldyBBbGlnbkdyb3VwKCk7XHJcblxyXG4gICAgY29uc3QgY3JlYXRlTGFiZWwgPSAoIGxhYmVsOiBQYXR0ZXJuU3RyaW5nUHJvcGVydHk8eyB2YWx1ZTogbnVtYmVyIH0+LCB0YW5kZW06IFRhbmRlbSApID0+IHtcclxuICAgICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0KCBsYWJlbCwge1xyXG4gICAgICAgIG1heFdpZHRoOiBURVhUX01BWF9XSURUSCxcclxuICAgICAgICBmb250OiBDQVZDb25zdGFudHMuTUFJTl9GT05UXHJcbiAgICAgIH0gKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBsYWJlbDogYWxpZ25Hcm91cC5jcmVhdGVCb3goIHRleHQgKSxcclxuICAgICAgICB0ZXh0OiB0ZXh0XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZUtpY2tCdXR0b24gPSAoIGNvbnRlbnQ6IHsgbGFiZWw6IE5vZGU7IHRleHQ6IFRleHQgfSwgdGFuZGVtOiBUYW5kZW0sIG51bWJlclRvS2ljazogbnVtYmVyLCBtdWx0aWtpY2s6IGJvb2xlYW4gKSA9PiB7XHJcblxyXG4gICAgICBjb25zdCBidXR0b25WaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlLCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlzaWJsZVByb3BlcnR5JyApXHJcbiAgICAgIH0gKTtcclxuXHJcblxyXG4gICAgICBjb25zdCBoYXNLaWNrYWJsZVNvY2NlckJhbGxzUHJvcGVydHkgPSBuZXcgRHluYW1pY1Byb3BlcnR5PGJvb2xlYW4sIHVua25vd24sIENBVlNjZW5lTW9kZWw+KCBtb2RlbC5zZWxlY3RlZFNjZW5lTW9kZWxQcm9wZXJ0eSwge1xyXG4gICAgICAgIGRlcml2ZTogJ2hhc0tpY2thYmxlU29jY2VyQmFsbHNQcm9wZXJ0eSdcclxuICAgICAgfSApO1xyXG5cclxuICAgICAgLy8gY29uc3QgaGFzS2lja2FibGVTb2NjZXJCYWxsc1Byb3BlcnR5ID1cclxuICAgICAgLy8gICBEZXJpdmVkUHJvcGVydHkuZGVyaXZlQW55KCBbIG1vZGVsLnNlbGVjdGVkU2NlbmVNb2RlbFByb3BlcnR5LCAuLi5tb2RlbC5zY2VuZU1vZGVscy5tYXAoIHNjZW5lID0+IHNjZW5lLmhhc0tpY2thYmxlU29jY2VyQmFsbHNQcm9wZXJ0eSApIF0sICgpID0+IHtcclxuICAgICAgLy8gICAgIHJldHVybiBtb2RlbC5zZWxlY3RlZFNjZW5lTW9kZWxQcm9wZXJ0eS52YWx1ZS5oYXNLaWNrYWJsZVNvY2NlckJhbGxzUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIC8vICAgfSApO1xyXG5cclxuICAgICAgcmV0dXJuIG5ldyBSZWN0YW5ndWxhclB1c2hCdXR0b24oIHtcclxuICAgICAgICB2aXNpYmxlUHJvcGVydHk6IERlcml2ZWRQcm9wZXJ0eS5hbmQoIFsgaGFzS2lja2FibGVTb2NjZXJCYWxsc1Byb3BlcnR5LCBidXR0b25WaXNpYmxlUHJvcGVydHkgXSApLFxyXG4gICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQubGFiZWwsXHJcbiAgICAgICAgYmFzZUNvbG9yOiBDQVZDb2xvcnMua2lja0J1dHRvbkZpbGxDb2xvclByb3BlcnR5LFxyXG4gICAgICAgIHhNYXJnaW46IDEyLFxyXG4gICAgICAgIHlNYXJnaW46IDEyLFxyXG4gICAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICAgIGxpc3RlbmVyOiAoKSA9PiBtb2RlbC5zZWxlY3RlZFNjZW5lTW9kZWxQcm9wZXJ0eS52YWx1ZS5zY2hlZHVsZUtpY2tzKCBudW1iZXJUb0tpY2sgKSxcclxuXHJcbiAgICAgICAgLy8gVGhlIEtpY2sgMSBidXR0b24gY2FuIGJlIGhlbGQgZG93biBmb3IgcmVwZWF0IGtpY2tzLCBidXQgdGhlIEtpY2sgNSBjYW5ub3QuXHJcbiAgICAgICAgZmlyZU9uSG9sZDogIW11bHRpa2ljayxcclxuICAgICAgICBmaXJlT25Ib2xkRGVsYXk6IDc1MCxcclxuXHJcbiAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBsb25nZXIgdGhhbiBDQVZTY2VuZU1vZGVsLlRJTUVfQkVUV0VFTl9SQVBJRF9LSUNLUyBwbHVzIHRoZSBwb2lzZSB0aW1lLCBzZWVcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2VudGVyLWFuZC12YXJpYWJpbGl0eS9pc3N1ZXMvMTAyXHJcbiAgICAgICAgZmlyZU9uSG9sZEludGVydmFsOiA2NTBcclxuICAgICAgfSApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGFuZGVtcyBzbyB0aGUgbGFiZWxzIGNhbiBhcHBlYXIgYXQgdGhlIHByb3BlciBwbGFjZSBpbiB0aGUgdGFuZGVtIHRyZWVcclxuICAgIGNvbnN0IGtpY2sxQnV0dG9uVGFuZGVtID0gb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAna2lja09uZUJ1dHRvbicgKTtcclxuICAgIGNvbnN0IGtpY2s1QnV0dG9uVGFuZGVtID0gb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAna2lja0ZpdmVCdXR0b24nICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGxhYmVscyBmaXJzdCBzbyB0aGVpciBzaXplcyBjYW4gYmUgYWxpZ25lZFxyXG4gICAgY29uc3Qga2ljazFQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBuZXcgUGF0dGVyblN0cmluZ1Byb3BlcnR5KCBDZW50ZXJBbmRWYXJpYWJpbGl0eVN0cmluZ3Mua2lja1ZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5LCB7IHZhbHVlOiAxIH0gKTtcclxuICAgIGNvbnN0IGtpY2sxTGFiZWwgPSBjcmVhdGVMYWJlbCgga2ljazFQYXR0ZXJuU3RyaW5nUHJvcGVydHksIGtpY2sxQnV0dG9uVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsVGV4dCcgKSApO1xyXG5cclxuICAgIGNvbnN0IG11bHRpS2lja1Byb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCA1ICk7XHJcbiAgICBjb25zdCBraWNrNVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSA9IG5ldyBQYXR0ZXJuU3RyaW5nUHJvcGVydHkoIENlbnRlckFuZFZhcmlhYmlsaXR5U3RyaW5ncy5raWNrVmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHsgdmFsdWU6IG11bHRpS2lja1Byb3BlcnR5IH0gKTtcclxuXHJcbiAgICBjb25zdCBudW1iZXJPZlVua2lja2VkQmFsbHNQcm9wZXJ0eSA9IG5ldyBEeW5hbWljUHJvcGVydHk8bnVtYmVyLCB1bmtub3duLCBDQVZTY2VuZU1vZGVsPiggbW9kZWwuc2VsZWN0ZWRTY2VuZU1vZGVsUHJvcGVydHksIHtcclxuICAgICAgZGVyaXZlOiAnbnVtYmVyT2ZVbmtpY2tlZEJhbGxzUHJvcGVydHknXHJcbiAgICB9ICk7XHJcbiAgICBudW1iZXJPZlVua2lja2VkQmFsbHNQcm9wZXJ0eS5saW5rKCBudW1iZXJPZlJlbWFpbmluZ0tpY2thYmxlT2JqZWN0cyA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gTWF0aC5tYXgoIE1hdGgubWluKCBudW1iZXJPZlJlbWFpbmluZ0tpY2thYmxlT2JqZWN0cywgNSApLCAxICk7XHJcbiAgICAgIG11bHRpS2lja1Byb3BlcnR5LnZhbHVlID0gdmFsdWU7XHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBraWNrNUxhYmVsID0gY3JlYXRlTGFiZWwoIGtpY2s1UGF0dGVyblN0cmluZ1Byb3BlcnR5LCBraWNrNUJ1dHRvblRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnICkgKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gW1xyXG4gICAgICBjcmVhdGVLaWNrQnV0dG9uKCBraWNrMUxhYmVsLCBraWNrMUJ1dHRvblRhbmRlbSwgMSwgZmFsc2UgKSxcclxuICAgICAgY3JlYXRlS2lja0J1dHRvbigga2ljazVMYWJlbCwga2ljazVCdXR0b25UYW5kZW0sIDUsIHRydWUgKVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuY2VudGVyQW5kVmFyaWFiaWxpdHkucmVnaXN0ZXIoICdLaWNrQnV0dG9uR3JvdXAnLCBLaWNrQnV0dG9uR3JvdXAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxvQkFBb0IsTUFBTSwrQkFBK0I7QUFDaEUsT0FBT0MscUJBQXFCLE1BQU0scURBQXFEO0FBQ3ZGLFNBQVNDLFVBQVUsRUFBUUMsSUFBSSxFQUFFQyxJQUFJLFFBQXFCLG1DQUFtQztBQUM3RixPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUNuRixPQUFPQywyQkFBMkIsTUFBTSxzQ0FBc0M7QUFFOUUsT0FBT0MsU0FBUyxNQUFNLGlCQUFpQjtBQUN2QyxPQUFPQyxZQUFZLE1BQU0sb0JBQW9CO0FBRTdDLE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxxQkFBcUIsTUFBTSw4Q0FBOEM7QUFDaEYsT0FBT0MsY0FBYyxNQUFNLHVDQUF1QztBQUVsRSxPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBTXBFO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLEVBQUU7QUFF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