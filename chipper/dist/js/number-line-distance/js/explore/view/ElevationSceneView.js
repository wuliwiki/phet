// Copyright 2020-2022, University of Colorado Boulder

/**
 * 'Elevation' scene view for the explore screen
 *
 * @author Saurabh Totey
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import birdInAir_png from '../../../../number-line-common/images/birdInAir_png.js';
import birdInWater_png from '../../../../number-line-common/images/birdInWater_png.js';
import fishInAir_png from '../../../../number-line-common/images/fishInAir_png.js';
import fishInWater_png from '../../../../number-line-common/images/fishInWater_png.js';
import { Image, Node, Rectangle } from '../../../../scenery/js/imports.js';
import elevationBackground_png from '../../../images/elevationBackground_png.js';
import numberLineDistance from '../../numberLineDistance.js';
import NumberLineDistanceStrings from '../../NumberLineDistanceStrings.js';
import ElevationPointControllerNode from './ElevationPointControllerNode.js';
import NLDSceneView from './NLDSceneView.js';
const fishString = NumberLineDistanceStrings.fish;
const birdString = NumberLineDistanceStrings.bird;
const elevationSceneAbsoluteDistanceTemplateString = NumberLineDistanceStrings.elevationSceneAbsoluteDistanceTemplate;
const elevationSceneDirectedPositiveDistanceTemplateString = NumberLineDistanceStrings.elevationSceneDirectedPositiveDistanceTemplate;
const elevationSceneDirectedNegativeDistanceTemplateString = NumberLineDistanceStrings.elevationSceneDirectedNegativeDistanceTemplate;
const metersSymbol = NumberLineDistanceStrings.symbol.meters;
const meterString = NumberLineDistanceStrings.meter;
const metersString = NumberLineDistanceStrings.meters;
class ElevationSceneView extends NLDSceneView {
  /**
   * @param {ElevationSceneModel} model
   */
  constructor(model) {
    super(model, {
      pointControllerRepresentationOne: new Image(birdInAir_png, {
        center: new Vector2(0, -10),
        maxWidth: 35
      }),
      pointControllerRepresentationTwo: new Image(fishInWater_png, {
        center: Vector2.ZERO,
        maxWidth: 35
      }),
      distanceDescriptionStrings: {
        absoluteDistanceDescriptionTemplate: elevationSceneAbsoluteDistanceTemplateString,
        directedPositiveDistanceDescriptionTemplate: elevationSceneDirectedPositiveDistanceTemplateString,
        directedNegativeDistanceDescriptionTemplate: elevationSceneDirectedNegativeDistanceTemplateString,
        singularUnits: meterString,
        pluralUnits: metersString,
        getPrimaryPointControllerLabel: isPrimaryNodeSwapped => isPrimaryNodeSwapped ? fishString : birdString,
        getSecondaryPointControllerLabel: isPrimaryNodeSwapped => isPrimaryNodeSwapped ? birdString : fishString
      },
      distanceShadedNumberLineNodeOptions: {
        unitsString: metersSymbol,
        distanceTextPadding: 54 // determined empirically; see https://github.com/phetsims/number-line-distance/issues/67
      }
    });

    // Add background image and water rectangle. Water rectangle is on top of everything so that point controllers
    // appear 'submerged' in water because they are layered beneath the rectangle.
    this.addChild(new Image(elevationBackground_png, {
      x: model.elevationAreaBounds.minX,
      y: model.elevationAreaBounds.minY,
      maxWidth: model.elevationAreaBounds.width,
      maxHeight: model.elevationAreaBounds.height
    }));
    const waterRectangle = new Rectangle(model.elevationAreaBounds.minX, model.elevationAreaBounds.minY + model.elevationAreaBounds.height / 2, model.elevationAreaBounds.width, model.elevationAreaBounds.height / 2, {
      fill: '#97C4F2',
      opacity: 0.3
    });
    this.addChild(waterRectangle);
    const seaLevel = model.numberLine.valueToModelPosition(0).y;

    // point controllers
    const pointControllerNodeLayer = new Node({
      children: [new ElevationPointControllerNode(model.pointControllerOne, seaLevel, new Image(birdInWater_png, {
        center: Vector2.ZERO,
        maxWidth: 65
      }), new Image(birdInAir_png, {
        center: new Vector2(0, -10),
        maxWidth: 60
      })), new ElevationPointControllerNode(model.pointControllerTwo, seaLevel, new Image(fishInWater_png, {
        center: Vector2.ZERO,
        maxWidth: 60
      }), new Image(fishInAir_png, {
        center: Vector2.ZERO,
        maxWidth: 60
      }))]
    });
    this.addChild(pointControllerNodeLayer);
    waterRectangle.moveToFront();
  }
}
numberLineDistance.register('ElevationSceneView', ElevationSceneView);
export default ElevationSceneView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiYmlyZEluQWlyX3BuZyIsImJpcmRJbldhdGVyX3BuZyIsImZpc2hJbkFpcl9wbmciLCJmaXNoSW5XYXRlcl9wbmciLCJJbWFnZSIsIk5vZGUiLCJSZWN0YW5nbGUiLCJlbGV2YXRpb25CYWNrZ3JvdW5kX3BuZyIsIm51bWJlckxpbmVEaXN0YW5jZSIsIk51bWJlckxpbmVEaXN0YW5jZVN0cmluZ3MiLCJFbGV2YXRpb25Qb2ludENvbnRyb2xsZXJOb2RlIiwiTkxEU2NlbmVWaWV3IiwiZmlzaFN0cmluZyIsImZpc2giLCJiaXJkU3RyaW5nIiwiYmlyZCIsImVsZXZhdGlvblNjZW5lQWJzb2x1dGVEaXN0YW5jZVRlbXBsYXRlU3RyaW5nIiwiZWxldmF0aW9uU2NlbmVBYnNvbHV0ZURpc3RhbmNlVGVtcGxhdGUiLCJlbGV2YXRpb25TY2VuZURpcmVjdGVkUG9zaXRpdmVEaXN0YW5jZVRlbXBsYXRlU3RyaW5nIiwiZWxldmF0aW9uU2NlbmVEaXJlY3RlZFBvc2l0aXZlRGlzdGFuY2VUZW1wbGF0ZSIsImVsZXZhdGlvblNjZW5lRGlyZWN0ZWROZWdhdGl2ZURpc3RhbmNlVGVtcGxhdGVTdHJpbmciLCJlbGV2YXRpb25TY2VuZURpcmVjdGVkTmVnYXRpdmVEaXN0YW5jZVRlbXBsYXRlIiwibWV0ZXJzU3ltYm9sIiwic3ltYm9sIiwibWV0ZXJzIiwibWV0ZXJTdHJpbmciLCJtZXRlciIsIm1ldGVyc1N0cmluZyIsIkVsZXZhdGlvblNjZW5lVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJwb2ludENvbnRyb2xsZXJSZXByZXNlbnRhdGlvbk9uZSIsImNlbnRlciIsIm1heFdpZHRoIiwicG9pbnRDb250cm9sbGVyUmVwcmVzZW50YXRpb25Ud28iLCJaRVJPIiwiZGlzdGFuY2VEZXNjcmlwdGlvblN0cmluZ3MiLCJhYnNvbHV0ZURpc3RhbmNlRGVzY3JpcHRpb25UZW1wbGF0ZSIsImRpcmVjdGVkUG9zaXRpdmVEaXN0YW5jZURlc2NyaXB0aW9uVGVtcGxhdGUiLCJkaXJlY3RlZE5lZ2F0aXZlRGlzdGFuY2VEZXNjcmlwdGlvblRlbXBsYXRlIiwic2luZ3VsYXJVbml0cyIsInBsdXJhbFVuaXRzIiwiZ2V0UHJpbWFyeVBvaW50Q29udHJvbGxlckxhYmVsIiwiaXNQcmltYXJ5Tm9kZVN3YXBwZWQiLCJnZXRTZWNvbmRhcnlQb2ludENvbnRyb2xsZXJMYWJlbCIsImRpc3RhbmNlU2hhZGVkTnVtYmVyTGluZU5vZGVPcHRpb25zIiwidW5pdHNTdHJpbmciLCJkaXN0YW5jZVRleHRQYWRkaW5nIiwiYWRkQ2hpbGQiLCJ4IiwiZWxldmF0aW9uQXJlYUJvdW5kcyIsIm1pblgiLCJ5IiwibWluWSIsIndpZHRoIiwibWF4SGVpZ2h0IiwiaGVpZ2h0Iiwid2F0ZXJSZWN0YW5nbGUiLCJmaWxsIiwib3BhY2l0eSIsInNlYUxldmVsIiwibnVtYmVyTGluZSIsInZhbHVlVG9Nb2RlbFBvc2l0aW9uIiwicG9pbnRDb250cm9sbGVyTm9kZUxheWVyIiwiY2hpbGRyZW4iLCJwb2ludENvbnRyb2xsZXJPbmUiLCJwb2ludENvbnRyb2xsZXJUd28iLCJtb3ZlVG9Gcm9udCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWxldmF0aW9uU2NlbmVWaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqICdFbGV2YXRpb24nIHNjZW5lIHZpZXcgZm9yIHRoZSBleHBsb3JlIHNjcmVlblxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhdXJhYmggVG90ZXlcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBiaXJkSW5BaXJfcG5nIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9pbWFnZXMvYmlyZEluQWlyX3BuZy5qcyc7XHJcbmltcG9ydCBiaXJkSW5XYXRlcl9wbmcgZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLWxpbmUtY29tbW9uL2ltYWdlcy9iaXJkSW5XYXRlcl9wbmcuanMnO1xyXG5pbXBvcnQgZmlzaEluQWlyX3BuZyBmcm9tICcuLi8uLi8uLi8uLi9udW1iZXItbGluZS1jb21tb24vaW1hZ2VzL2Zpc2hJbkFpcl9wbmcuanMnO1xyXG5pbXBvcnQgZmlzaEluV2F0ZXJfcG5nIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9pbWFnZXMvZmlzaEluV2F0ZXJfcG5nLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UsIE5vZGUsIFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBlbGV2YXRpb25CYWNrZ3JvdW5kX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvZWxldmF0aW9uQmFja2dyb3VuZF9wbmcuanMnO1xyXG5pbXBvcnQgbnVtYmVyTGluZURpc3RhbmNlIGZyb20gJy4uLy4uL251bWJlckxpbmVEaXN0YW5jZS5qcyc7XHJcbmltcG9ydCBOdW1iZXJMaW5lRGlzdGFuY2VTdHJpbmdzIGZyb20gJy4uLy4uL051bWJlckxpbmVEaXN0YW5jZVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgRWxldmF0aW9uUG9pbnRDb250cm9sbGVyTm9kZSBmcm9tICcuL0VsZXZhdGlvblBvaW50Q29udHJvbGxlck5vZGUuanMnO1xyXG5pbXBvcnQgTkxEU2NlbmVWaWV3IGZyb20gJy4vTkxEU2NlbmVWaWV3LmpzJztcclxuXHJcbmNvbnN0IGZpc2hTdHJpbmcgPSBOdW1iZXJMaW5lRGlzdGFuY2VTdHJpbmdzLmZpc2g7XHJcbmNvbnN0IGJpcmRTdHJpbmcgPSBOdW1iZXJMaW5lRGlzdGFuY2VTdHJpbmdzLmJpcmQ7XHJcbmNvbnN0IGVsZXZhdGlvblNjZW5lQWJzb2x1dGVEaXN0YW5jZVRlbXBsYXRlU3RyaW5nID0gTnVtYmVyTGluZURpc3RhbmNlU3RyaW5ncy5lbGV2YXRpb25TY2VuZUFic29sdXRlRGlzdGFuY2VUZW1wbGF0ZTtcclxuY29uc3QgZWxldmF0aW9uU2NlbmVEaXJlY3RlZFBvc2l0aXZlRGlzdGFuY2VUZW1wbGF0ZVN0cmluZyA9IE51bWJlckxpbmVEaXN0YW5jZVN0cmluZ3MuZWxldmF0aW9uU2NlbmVEaXJlY3RlZFBvc2l0aXZlRGlzdGFuY2VUZW1wbGF0ZTtcclxuY29uc3QgZWxldmF0aW9uU2NlbmVEaXJlY3RlZE5lZ2F0aXZlRGlzdGFuY2VUZW1wbGF0ZVN0cmluZyA9IE51bWJlckxpbmVEaXN0YW5jZVN0cmluZ3MuZWxldmF0aW9uU2NlbmVEaXJlY3RlZE5lZ2F0aXZlRGlzdGFuY2VUZW1wbGF0ZTtcclxuY29uc3QgbWV0ZXJzU3ltYm9sID0gTnVtYmVyTGluZURpc3RhbmNlU3RyaW5ncy5zeW1ib2wubWV0ZXJzO1xyXG5jb25zdCBtZXRlclN0cmluZyA9IE51bWJlckxpbmVEaXN0YW5jZVN0cmluZ3MubWV0ZXI7XHJcbmNvbnN0IG1ldGVyc1N0cmluZyA9IE51bWJlckxpbmVEaXN0YW5jZVN0cmluZ3MubWV0ZXJzO1xyXG5cclxuY2xhc3MgRWxldmF0aW9uU2NlbmVWaWV3IGV4dGVuZHMgTkxEU2NlbmVWaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFbGV2YXRpb25TY2VuZU1vZGVsfSBtb2RlbFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCApIHtcclxuICAgIHN1cGVyKFxyXG4gICAgICBtb2RlbCxcclxuICAgICAge1xyXG4gICAgICAgIHBvaW50Q29udHJvbGxlclJlcHJlc2VudGF0aW9uT25lOiBuZXcgSW1hZ2UoIGJpcmRJbkFpcl9wbmcsIHsgY2VudGVyOiBuZXcgVmVjdG9yMiggMCwgLTEwICksIG1heFdpZHRoOiAzNSB9ICksXHJcbiAgICAgICAgcG9pbnRDb250cm9sbGVyUmVwcmVzZW50YXRpb25Ud286IG5ldyBJbWFnZSggZmlzaEluV2F0ZXJfcG5nLCB7IGNlbnRlcjogVmVjdG9yMi5aRVJPLCBtYXhXaWR0aDogMzUgfSApLFxyXG4gICAgICAgIGRpc3RhbmNlRGVzY3JpcHRpb25TdHJpbmdzOiB7XHJcbiAgICAgICAgICBhYnNvbHV0ZURpc3RhbmNlRGVzY3JpcHRpb25UZW1wbGF0ZTogZWxldmF0aW9uU2NlbmVBYnNvbHV0ZURpc3RhbmNlVGVtcGxhdGVTdHJpbmcsXHJcbiAgICAgICAgICBkaXJlY3RlZFBvc2l0aXZlRGlzdGFuY2VEZXNjcmlwdGlvblRlbXBsYXRlOiBlbGV2YXRpb25TY2VuZURpcmVjdGVkUG9zaXRpdmVEaXN0YW5jZVRlbXBsYXRlU3RyaW5nLFxyXG4gICAgICAgICAgZGlyZWN0ZWROZWdhdGl2ZURpc3RhbmNlRGVzY3JpcHRpb25UZW1wbGF0ZTogZWxldmF0aW9uU2NlbmVEaXJlY3RlZE5lZ2F0aXZlRGlzdGFuY2VUZW1wbGF0ZVN0cmluZyxcclxuICAgICAgICAgIHNpbmd1bGFyVW5pdHM6IG1ldGVyU3RyaW5nLFxyXG4gICAgICAgICAgcGx1cmFsVW5pdHM6IG1ldGVyc1N0cmluZyxcclxuICAgICAgICAgIGdldFByaW1hcnlQb2ludENvbnRyb2xsZXJMYWJlbDogaXNQcmltYXJ5Tm9kZVN3YXBwZWQgPT4gaXNQcmltYXJ5Tm9kZVN3YXBwZWQgPyBmaXNoU3RyaW5nIDogYmlyZFN0cmluZyxcclxuICAgICAgICAgIGdldFNlY29uZGFyeVBvaW50Q29udHJvbGxlckxhYmVsOiBpc1ByaW1hcnlOb2RlU3dhcHBlZCA9PiBpc1ByaW1hcnlOb2RlU3dhcHBlZCA/IGJpcmRTdHJpbmcgOiBmaXNoU3RyaW5nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXN0YW5jZVNoYWRlZE51bWJlckxpbmVOb2RlT3B0aW9uczoge1xyXG4gICAgICAgICAgdW5pdHNTdHJpbmc6IG1ldGVyc1N5bWJvbCxcclxuICAgICAgICAgIGRpc3RhbmNlVGV4dFBhZGRpbmc6IDU0IC8vIGRldGVybWluZWQgZW1waXJpY2FsbHk7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvbnVtYmVyLWxpbmUtZGlzdGFuY2UvaXNzdWVzLzY3XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIEFkZCBiYWNrZ3JvdW5kIGltYWdlIGFuZCB3YXRlciByZWN0YW5nbGUuIFdhdGVyIHJlY3RhbmdsZSBpcyBvbiB0b3Agb2YgZXZlcnl0aGluZyBzbyB0aGF0IHBvaW50IGNvbnRyb2xsZXJzXHJcbiAgICAvLyBhcHBlYXIgJ3N1Ym1lcmdlZCcgaW4gd2F0ZXIgYmVjYXVzZSB0aGV5IGFyZSBsYXllcmVkIGJlbmVhdGggdGhlIHJlY3RhbmdsZS5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBJbWFnZShcclxuICAgICAgZWxldmF0aW9uQmFja2dyb3VuZF9wbmcsXHJcbiAgICAgIHtcclxuICAgICAgICB4OiBtb2RlbC5lbGV2YXRpb25BcmVhQm91bmRzLm1pblgsXHJcbiAgICAgICAgeTogbW9kZWwuZWxldmF0aW9uQXJlYUJvdW5kcy5taW5ZLFxyXG4gICAgICAgIG1heFdpZHRoOiBtb2RlbC5lbGV2YXRpb25BcmVhQm91bmRzLndpZHRoLFxyXG4gICAgICAgIG1heEhlaWdodDogbW9kZWwuZWxldmF0aW9uQXJlYUJvdW5kcy5oZWlnaHRcclxuICAgICAgfVxyXG4gICAgKSApO1xyXG4gICAgY29uc3Qgd2F0ZXJSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKFxyXG4gICAgICBtb2RlbC5lbGV2YXRpb25BcmVhQm91bmRzLm1pblgsXHJcbiAgICAgIG1vZGVsLmVsZXZhdGlvbkFyZWFCb3VuZHMubWluWSArIG1vZGVsLmVsZXZhdGlvbkFyZWFCb3VuZHMuaGVpZ2h0IC8gMixcclxuICAgICAgbW9kZWwuZWxldmF0aW9uQXJlYUJvdW5kcy53aWR0aCxcclxuICAgICAgbW9kZWwuZWxldmF0aW9uQXJlYUJvdW5kcy5oZWlnaHQgLyAyLFxyXG4gICAgICB7IGZpbGw6ICcjOTdDNEYyJywgb3BhY2l0eTogMC4zIH1cclxuICAgICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB3YXRlclJlY3RhbmdsZSApO1xyXG5cclxuICAgIGNvbnN0IHNlYUxldmVsID0gbW9kZWwubnVtYmVyTGluZS52YWx1ZVRvTW9kZWxQb3NpdGlvbiggMCApLnk7XHJcblxyXG4gICAgLy8gcG9pbnQgY29udHJvbGxlcnNcclxuICAgIGNvbnN0IHBvaW50Q29udHJvbGxlck5vZGVMYXllciA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IEVsZXZhdGlvblBvaW50Q29udHJvbGxlck5vZGUoXHJcbiAgICAgICAgICBtb2RlbC5wb2ludENvbnRyb2xsZXJPbmUsXHJcbiAgICAgICAgICBzZWFMZXZlbCxcclxuICAgICAgICAgIG5ldyBJbWFnZSggYmlyZEluV2F0ZXJfcG5nLCB7IGNlbnRlcjogVmVjdG9yMi5aRVJPLCBtYXhXaWR0aDogNjUgfSApLFxyXG4gICAgICAgICAgbmV3IEltYWdlKCBiaXJkSW5BaXJfcG5nLCB7IGNlbnRlcjogbmV3IFZlY3RvcjIoIDAsIC0xMCApLCBtYXhXaWR0aDogNjAgfSApXHJcbiAgICAgICAgKSxcclxuICAgICAgICBuZXcgRWxldmF0aW9uUG9pbnRDb250cm9sbGVyTm9kZShcclxuICAgICAgICAgIG1vZGVsLnBvaW50Q29udHJvbGxlclR3byxcclxuICAgICAgICAgIHNlYUxldmVsLFxyXG4gICAgICAgICAgbmV3IEltYWdlKCBmaXNoSW5XYXRlcl9wbmcsIHsgY2VudGVyOiBWZWN0b3IyLlpFUk8sIG1heFdpZHRoOiA2MCB9ICksXHJcbiAgICAgICAgICBuZXcgSW1hZ2UoIGZpc2hJbkFpcl9wbmcsIHsgY2VudGVyOiBWZWN0b3IyLlpFUk8sIG1heFdpZHRoOiA2MCB9IClcclxuICAgICAgICApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHBvaW50Q29udHJvbGxlck5vZGVMYXllciApO1xyXG5cclxuICAgIHdhdGVyUmVjdGFuZ2xlLm1vdmVUb0Zyb250KCk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxubnVtYmVyTGluZURpc3RhbmNlLnJlZ2lzdGVyKCAnRWxldmF0aW9uU2NlbmVWaWV3JywgRWxldmF0aW9uU2NlbmVWaWV3ICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVsZXZhdGlvblNjZW5lVmlldztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsYUFBYSxNQUFNLHdEQUF3RDtBQUNsRixPQUFPQyxlQUFlLE1BQU0sMERBQTBEO0FBQ3RGLE9BQU9DLGFBQWEsTUFBTSx3REFBd0Q7QUFDbEYsT0FBT0MsZUFBZSxNQUFNLDBEQUEwRDtBQUN0RixTQUFTQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsU0FBUyxRQUFRLG1DQUFtQztBQUMxRSxPQUFPQyx1QkFBdUIsTUFBTSw0Q0FBNEM7QUFDaEYsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLHlCQUF5QixNQUFNLG9DQUFvQztBQUMxRSxPQUFPQyw0QkFBNEIsTUFBTSxtQ0FBbUM7QUFDNUUsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUU1QyxNQUFNQyxVQUFVLEdBQUdILHlCQUF5QixDQUFDSSxJQUFJO0FBQ2pELE1BQU1DLFVBQVUsR0FBR0wseUJBQXlCLENBQUNNLElBQUk7QUFDakQsTUFBTUMsNENBQTRDLEdBQUdQLHlCQUF5QixDQUFDUSxzQ0FBc0M7QUFDckgsTUFBTUMsb0RBQW9ELEdBQUdULHlCQUF5QixDQUFDVSw4Q0FBOEM7QUFDckksTUFBTUMsb0RBQW9ELEdBQUdYLHlCQUF5QixDQUFDWSw4Q0FBOEM7QUFDckksTUFBTUMsWUFBWSxHQUFHYix5QkFBeUIsQ0FBQ2MsTUFBTSxDQUFDQyxNQUFNO0FBQzVELE1BQU1DLFdBQVcsR0FBR2hCLHlCQUF5QixDQUFDaUIsS0FBSztBQUNuRCxNQUFNQyxZQUFZLEdBQUdsQix5QkFBeUIsQ0FBQ2UsTUFBTTtBQUVyRCxNQUFNSSxrQkFBa0IsU0FBU2pCLFlBQVksQ0FBQztFQUU1QztB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