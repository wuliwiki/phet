// Copyright 2021-2022, University of Colorado Boulder

/**
 * Scene view base class for the DistanceSceneView, TemperatureSceneView, and ElevationSceneView:
 * adds the base view and number line node.
 *
 * @author Saurabh Totey
 */

import merge from '../../../../phet-core/js/merge.js';
import required from '../../../../phet-core/js/required.js';
import { Node } from '../../../../scenery/js/imports.js';
import DistanceShadedNumberLineNode from '../../common/view/DistanceShadedNumberLineNode.js';
import NLDBaseView from '../../common/view/NLDBaseView.js';
import numberLineDistance from '../../numberLineDistance.js';
class NLDSceneView extends Node {
  /**
   * @param {AbstractNLDBaseModel} model
   * @param {Object} config
   */
  constructor(model, config) {
    super();
    config = merge({
      // {Node} the representations given to the base view to use at the bottom left swap area
      pointControllerRepresentationOne: required(config.pointControllerRepresentationOne),
      pointControllerRepresentationTwo: required(config.pointControllerRepresentationTwo),
      // {Object} an object with all the distance description strings (see NLDBaseView)
      distanceDescriptionStrings: required(config.distanceDescriptionStrings),
      // {Object} options to be passed through to the number line node
      distanceShadedNumberLineNodeOptions: {}
    }, config);

    // @public (read-only)
    this.model = model;

    // @protected {NLDBaseView}
    this.baseView = new NLDBaseView(model, config.pointControllerRepresentationOne, config.pointControllerRepresentationTwo, {
      distanceDescriptionStrings: config.distanceDescriptionStrings
    });
    this.addChild(this.baseView);

    // @protected {DistanceShadedNumberLineNode} number line
    this.numberLineNode = new DistanceShadedNumberLineNode(model, config.distanceShadedNumberLineNodeOptions);
    this.addChild(this.numberLineNode);
  }

  /**
   * This function resets the scene view. Right now, all this does is open up accordion box if closed.
   * @public
   */
  reset() {
    this.baseView.accordionBoxOpenedProperty.reset();
  }
}
numberLineDistance.register('NLDSceneView', NLDSceneView);
export default NLDSceneView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsInJlcXVpcmVkIiwiTm9kZSIsIkRpc3RhbmNlU2hhZGVkTnVtYmVyTGluZU5vZGUiLCJOTERCYXNlVmlldyIsIm51bWJlckxpbmVEaXN0YW5jZSIsIk5MRFNjZW5lVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJjb25maWciLCJwb2ludENvbnRyb2xsZXJSZXByZXNlbnRhdGlvbk9uZSIsInBvaW50Q29udHJvbGxlclJlcHJlc2VudGF0aW9uVHdvIiwiZGlzdGFuY2VEZXNjcmlwdGlvblN0cmluZ3MiLCJkaXN0YW5jZVNoYWRlZE51bWJlckxpbmVOb2RlT3B0aW9ucyIsImJhc2VWaWV3IiwiYWRkQ2hpbGQiLCJudW1iZXJMaW5lTm9kZSIsInJlc2V0IiwiYWNjb3JkaW9uQm94T3BlbmVkUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk5MRFNjZW5lVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY2VuZSB2aWV3IGJhc2UgY2xhc3MgZm9yIHRoZSBEaXN0YW5jZVNjZW5lVmlldywgVGVtcGVyYXR1cmVTY2VuZVZpZXcsIGFuZCBFbGV2YXRpb25TY2VuZVZpZXc6XHJcbiAqIGFkZHMgdGhlIGJhc2UgdmlldyBhbmQgbnVtYmVyIGxpbmUgbm9kZS5cclxuICpcclxuICogQGF1dGhvciBTYXVyYWJoIFRvdGV5XHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCByZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvcmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IERpc3RhbmNlU2hhZGVkTnVtYmVyTGluZU5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvRGlzdGFuY2VTaGFkZWROdW1iZXJMaW5lTm9kZS5qcyc7XHJcbmltcG9ydCBOTERCYXNlVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9OTERCYXNlVmlldy5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lRGlzdGFuY2UgZnJvbSAnLi4vLi4vbnVtYmVyTGluZURpc3RhbmNlLmpzJztcclxuXHJcbmNsYXNzIE5MRFNjZW5lVmlldyBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0Fic3RyYWN0TkxEQmFzZU1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIGNvbmZpZyApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgY29uZmlnID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIC8vIHtOb2RlfSB0aGUgcmVwcmVzZW50YXRpb25zIGdpdmVuIHRvIHRoZSBiYXNlIHZpZXcgdG8gdXNlIGF0IHRoZSBib3R0b20gbGVmdCBzd2FwIGFyZWFcclxuICAgICAgcG9pbnRDb250cm9sbGVyUmVwcmVzZW50YXRpb25PbmU6IHJlcXVpcmVkKCBjb25maWcucG9pbnRDb250cm9sbGVyUmVwcmVzZW50YXRpb25PbmUgKSxcclxuICAgICAgcG9pbnRDb250cm9sbGVyUmVwcmVzZW50YXRpb25Ud286IHJlcXVpcmVkKCBjb25maWcucG9pbnRDb250cm9sbGVyUmVwcmVzZW50YXRpb25Ud28gKSxcclxuXHJcbiAgICAgIC8vIHtPYmplY3R9IGFuIG9iamVjdCB3aXRoIGFsbCB0aGUgZGlzdGFuY2UgZGVzY3JpcHRpb24gc3RyaW5ncyAoc2VlIE5MREJhc2VWaWV3KVxyXG4gICAgICBkaXN0YW5jZURlc2NyaXB0aW9uU3RyaW5nczogcmVxdWlyZWQoIGNvbmZpZy5kaXN0YW5jZURlc2NyaXB0aW9uU3RyaW5ncyApLFxyXG5cclxuICAgICAgLy8ge09iamVjdH0gb3B0aW9ucyB0byBiZSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgbnVtYmVyIGxpbmUgbm9kZVxyXG4gICAgICBkaXN0YW5jZVNoYWRlZE51bWJlckxpbmVOb2RlT3B0aW9uczoge31cclxuICAgIH0sIGNvbmZpZyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSlcclxuICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuXHJcbiAgICAvLyBAcHJvdGVjdGVkIHtOTERCYXNlVmlld31cclxuICAgIHRoaXMuYmFzZVZpZXcgPSBuZXcgTkxEQmFzZVZpZXcoXHJcbiAgICAgIG1vZGVsLFxyXG4gICAgICBjb25maWcucG9pbnRDb250cm9sbGVyUmVwcmVzZW50YXRpb25PbmUsXHJcbiAgICAgIGNvbmZpZy5wb2ludENvbnRyb2xsZXJSZXByZXNlbnRhdGlvblR3byxcclxuICAgICAge1xyXG4gICAgICAgIGRpc3RhbmNlRGVzY3JpcHRpb25TdHJpbmdzOiBjb25maWcuZGlzdGFuY2VEZXNjcmlwdGlvblN0cmluZ3NcclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuYmFzZVZpZXcgKTtcclxuXHJcbiAgICAvLyBAcHJvdGVjdGVkIHtEaXN0YW5jZVNoYWRlZE51bWJlckxpbmVOb2RlfSBudW1iZXIgbGluZVxyXG4gICAgdGhpcy5udW1iZXJMaW5lTm9kZSA9IG5ldyBEaXN0YW5jZVNoYWRlZE51bWJlckxpbmVOb2RlKCBtb2RlbCwgY29uZmlnLmRpc3RhbmNlU2hhZGVkTnVtYmVyTGluZU5vZGVPcHRpb25zICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLm51bWJlckxpbmVOb2RlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIHJlc2V0cyB0aGUgc2NlbmUgdmlldy4gUmlnaHQgbm93LCBhbGwgdGhpcyBkb2VzIGlzIG9wZW4gdXAgYWNjb3JkaW9uIGJveCBpZiBjbG9zZWQuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5iYXNlVmlldy5hY2NvcmRpb25Cb3hPcGVuZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbm51bWJlckxpbmVEaXN0YW5jZS5yZWdpc3RlciggJ05MRFNjZW5lVmlldycsIE5MRFNjZW5lVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBOTERTY2VuZVZpZXc7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsUUFBUSxNQUFNLHNDQUFzQztBQUMzRCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLDRCQUE0QixNQUFNLG1EQUFtRDtBQUM1RixPQUFPQyxXQUFXLE1BQU0sa0NBQWtDO0FBQzFELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUU1RCxNQUFNQyxZQUFZLFNBQVNKLElBQUksQ0FBQztFQUU5QjtBQUNGO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRztJQUMzQixLQUFLLENBQUMsQ0FBQztJQUVQQSxNQUFNLEdBQUdULEtBQUssQ0FBRTtNQUVkO01BQ0FVLGdDQUFnQyxFQUFFVCxRQUFRLENBQUVRLE1BQU0sQ0FBQ0MsZ0NBQWlDLENBQUM7TUFDckZDLGdDQUFnQyxFQUFFVixRQUFRLENBQUVRLE1BQU0sQ0FBQ0UsZ0NBQWlDLENBQUM7TUFFckY7TUFDQUMsMEJBQTBCLEVBQUVYLFFBQVEsQ0FBRVEsTUFBTSxDQUFDRywwQkFBMkIsQ0FBQztNQUV6RTtNQUNBQyxtQ0FBbUMsRUFBRSxDQUFDO0lBQ3hDLENBQUMsRUFBRUosTUFBTyxDQUFDOztJQUVYO0lBQ0EsSUFBSSxDQUFDRCxLQUFLLEdBQUdBLEtBQUs7O0lBRWxCO0lBQ0EsSUFBSSxDQUFDTSxRQUFRLEdBQUcsSUFBSVYsV0FBVyxDQUM3QkksS0FBSyxFQUNMQyxNQUFNLENBQUNDLGdDQUFnQyxFQUN2Q0QsTUFBTSxDQUFDRSxnQ0FBZ0MsRUFDdkM7TUFDRUMsMEJBQTBCLEVBQUVILE1BQU0sQ0FBQ0c7SUFDckMsQ0FDRixDQUFDO0lBQ0QsSUFBSSxDQUFDRyxRQUFRLENBQUUsSUFBSSxDQUFDRCxRQUFTLENBQUM7O0lBRTlCO0lBQ0EsSUFBSSxDQUFDRSxjQUFjLEdBQUcsSUFBSWIsNEJBQTRCLENBQUVLLEtBQUssRUFBRUMsTUFBTSxDQUFDSSxtQ0FBb0MsQ0FBQztJQUMzRyxJQUFJLENBQUNFLFFBQVEsQ0FBRSxJQUFJLENBQUNDLGNBQWUsQ0FBQztFQUN0Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFQyxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNILFFBQVEsQ0FBQ0ksMEJBQTBCLENBQUNELEtBQUssQ0FBQyxDQUFDO0VBQ2xEO0FBRUY7QUFFQVosa0JBQWtCLENBQUNjLFFBQVEsQ0FBRSxjQUFjLEVBQUViLFlBQWEsQ0FBQztBQUMzRCxlQUFlQSxZQUFZIn0=