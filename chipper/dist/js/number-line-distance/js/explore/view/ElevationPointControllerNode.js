// Copyright 2020-2022, University of Colorado Boulder

/**
 * a Scenery node that is used to control point positions in the "Elevation" scene of the Number Line Distance sim
 *
 * @author Saurabh Totey
 */

import PointControllerNode from '../../../../number-line-common/js/common/view/PointControllerNode.js';
import { Node } from '../../../../scenery/js/imports.js';
import numberLineDistance from '../../numberLineDistance.js';

// constants
const IMAGE_DILATION = 20;
class ElevationPointControllerNode extends PointControllerNode {
  /**
   * @param {PointController} pointController
   * @param {number} seaLevel - the sea-level in view-coordinates
   * @param {Image} belowSeaLevelImage - what this node should look like when below sea-level
   * @param {Image} aboveSeaLevelImage - what this node should look like when above sea-level
   * @public
   */
  constructor(pointController, seaLevel, belowSeaLevelImage, aboveSeaLevelImage) {
    // Dilate each image's touch area.
    belowSeaLevelImage.touchArea = belowSeaLevelImage.localBounds.dilated(IMAGE_DILATION);
    aboveSeaLevelImage.touchArea = aboveSeaLevelImage.localBounds.dilated(IMAGE_DILATION);

    // Create a node with all the images that will be used to depict this elevatable item.
    const compositeImageNode = new Node({
      children: [belowSeaLevelImage, aboveSeaLevelImage]
    });

    // Update the visibility of the images as the position changes. No unlink necessary as ElevationPointControllers are
    // always present for the sim's lifetime.
    pointController.positionProperty.link(position => {
      if (position.y > seaLevel) {
        aboveSeaLevelImage.visible = false;
        belowSeaLevelImage.visible = true;
      } else {
        aboveSeaLevelImage.visible = true;
        belowSeaLevelImage.visible = false;
      }
    });
    super(pointController, {
      node: compositeImageNode,
      connectorLine: false
    });
  }
}
numberLineDistance.register('ElevationPointControllerNode', ElevationPointControllerNode);
export default ElevationPointControllerNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb2ludENvbnRyb2xsZXJOb2RlIiwiTm9kZSIsIm51bWJlckxpbmVEaXN0YW5jZSIsIklNQUdFX0RJTEFUSU9OIiwiRWxldmF0aW9uUG9pbnRDb250cm9sbGVyTm9kZSIsImNvbnN0cnVjdG9yIiwicG9pbnRDb250cm9sbGVyIiwic2VhTGV2ZWwiLCJiZWxvd1NlYUxldmVsSW1hZ2UiLCJhYm92ZVNlYUxldmVsSW1hZ2UiLCJ0b3VjaEFyZWEiLCJsb2NhbEJvdW5kcyIsImRpbGF0ZWQiLCJjb21wb3NpdGVJbWFnZU5vZGUiLCJjaGlsZHJlbiIsInBvc2l0aW9uUHJvcGVydHkiLCJsaW5rIiwicG9zaXRpb24iLCJ5IiwidmlzaWJsZSIsIm5vZGUiLCJjb25uZWN0b3JMaW5lIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbGV2YXRpb25Qb2ludENvbnRyb2xsZXJOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIGEgU2NlbmVyeSBub2RlIHRoYXQgaXMgdXNlZCB0byBjb250cm9sIHBvaW50IHBvc2l0aW9ucyBpbiB0aGUgXCJFbGV2YXRpb25cIiBzY2VuZSBvZiB0aGUgTnVtYmVyIExpbmUgRGlzdGFuY2Ugc2ltXHJcbiAqXHJcbiAqIEBhdXRob3IgU2F1cmFiaCBUb3RleVxyXG4gKi9cclxuXHJcbmltcG9ydCBQb2ludENvbnRyb2xsZXJOb2RlIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9qcy9jb21tb24vdmlldy9Qb2ludENvbnRyb2xsZXJOb2RlLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lRGlzdGFuY2UgZnJvbSAnLi4vLi4vbnVtYmVyTGluZURpc3RhbmNlLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBJTUFHRV9ESUxBVElPTiA9IDIwO1xyXG5cclxuY2xhc3MgRWxldmF0aW9uUG9pbnRDb250cm9sbGVyTm9kZSBleHRlbmRzIFBvaW50Q29udHJvbGxlck5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1BvaW50Q29udHJvbGxlcn0gcG9pbnRDb250cm9sbGVyXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlYUxldmVsIC0gdGhlIHNlYS1sZXZlbCBpbiB2aWV3LWNvb3JkaW5hdGVzXHJcbiAgICogQHBhcmFtIHtJbWFnZX0gYmVsb3dTZWFMZXZlbEltYWdlIC0gd2hhdCB0aGlzIG5vZGUgc2hvdWxkIGxvb2sgbGlrZSB3aGVuIGJlbG93IHNlYS1sZXZlbFxyXG4gICAqIEBwYXJhbSB7SW1hZ2V9IGFib3ZlU2VhTGV2ZWxJbWFnZSAtIHdoYXQgdGhpcyBub2RlIHNob3VsZCBsb29rIGxpa2Ugd2hlbiBhYm92ZSBzZWEtbGV2ZWxcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHBvaW50Q29udHJvbGxlciwgc2VhTGV2ZWwsIGJlbG93U2VhTGV2ZWxJbWFnZSwgYWJvdmVTZWFMZXZlbEltYWdlICkge1xyXG5cclxuICAgIC8vIERpbGF0ZSBlYWNoIGltYWdlJ3MgdG91Y2ggYXJlYS5cclxuICAgIGJlbG93U2VhTGV2ZWxJbWFnZS50b3VjaEFyZWEgPSBiZWxvd1NlYUxldmVsSW1hZ2UubG9jYWxCb3VuZHMuZGlsYXRlZCggSU1BR0VfRElMQVRJT04gKTtcclxuICAgIGFib3ZlU2VhTGV2ZWxJbWFnZS50b3VjaEFyZWEgPSBhYm92ZVNlYUxldmVsSW1hZ2UubG9jYWxCb3VuZHMuZGlsYXRlZCggSU1BR0VfRElMQVRJT04gKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBub2RlIHdpdGggYWxsIHRoZSBpbWFnZXMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGVwaWN0IHRoaXMgZWxldmF0YWJsZSBpdGVtLlxyXG4gICAgY29uc3QgY29tcG9zaXRlSW1hZ2VOb2RlID0gbmV3IE5vZGUoIHsgY2hpbGRyZW46IFsgYmVsb3dTZWFMZXZlbEltYWdlLCBhYm92ZVNlYUxldmVsSW1hZ2UgXSB9ICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBpbWFnZXMgYXMgdGhlIHBvc2l0aW9uIGNoYW5nZXMuIE5vIHVubGluayBuZWNlc3NhcnkgYXMgRWxldmF0aW9uUG9pbnRDb250cm9sbGVycyBhcmVcclxuICAgIC8vIGFsd2F5cyBwcmVzZW50IGZvciB0aGUgc2ltJ3MgbGlmZXRpbWUuXHJcbiAgICBwb2ludENvbnRyb2xsZXIucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBwb3NpdGlvbiA9PiB7XHJcbiAgICAgIGlmICggcG9zaXRpb24ueSA+IHNlYUxldmVsICkge1xyXG4gICAgICAgIGFib3ZlU2VhTGV2ZWxJbWFnZS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgYmVsb3dTZWFMZXZlbEltYWdlLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGFib3ZlU2VhTGV2ZWxJbWFnZS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICBiZWxvd1NlYUxldmVsSW1hZ2UudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHBvaW50Q29udHJvbGxlciwge1xyXG4gICAgICBub2RlOiBjb21wb3NpdGVJbWFnZU5vZGUsXHJcbiAgICAgIGNvbm5lY3RvckxpbmU6IGZhbHNlXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxubnVtYmVyTGluZURpc3RhbmNlLnJlZ2lzdGVyKCAnRWxldmF0aW9uUG9pbnRDb250cm9sbGVyTm9kZScsIEVsZXZhdGlvblBvaW50Q29udHJvbGxlck5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgRWxldmF0aW9uUG9pbnRDb250cm9sbGVyTm9kZTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLG1CQUFtQixNQUFNLHNFQUFzRTtBQUN0RyxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2Qjs7QUFFNUQ7QUFDQSxNQUFNQyxjQUFjLEdBQUcsRUFBRTtBQUV6QixNQUFNQyw0QkFBNEIsU0FBU0osbUJBQW1CLENBQUM7RUFFN0Q7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxRQUFRLEVBQUVDLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRztJQUUvRTtJQUNBRCxrQkFBa0IsQ0FBQ0UsU0FBUyxHQUFHRixrQkFBa0IsQ0FBQ0csV0FBVyxDQUFDQyxPQUFPLENBQUVULGNBQWUsQ0FBQztJQUN2Rk0sa0JBQWtCLENBQUNDLFNBQVMsR0FBR0Qsa0JBQWtCLENBQUNFLFdBQVcsQ0FBQ0MsT0FBTyxDQUFFVCxjQUFlLENBQUM7O0lBRXZGO0lBQ0EsTUFBTVUsa0JBQWtCLEdBQUcsSUFBSVosSUFBSSxDQUFFO01BQUVhLFFBQVEsRUFBRSxDQUFFTixrQkFBa0IsRUFBRUMsa0JBQWtCO0lBQUcsQ0FBRSxDQUFDOztJQUUvRjtJQUNBO0lBQ0FILGVBQWUsQ0FBQ1MsZ0JBQWdCLENBQUNDLElBQUksQ0FBRUMsUUFBUSxJQUFJO01BQ2pELElBQUtBLFFBQVEsQ0FBQ0MsQ0FBQyxHQUFHWCxRQUFRLEVBQUc7UUFDM0JFLGtCQUFrQixDQUFDVSxPQUFPLEdBQUcsS0FBSztRQUNsQ1gsa0JBQWtCLENBQUNXLE9BQU8sR0FBRyxJQUFJO01BQ25DLENBQUMsTUFDSTtRQUNIVixrQkFBa0IsQ0FBQ1UsT0FBTyxHQUFHLElBQUk7UUFDakNYLGtCQUFrQixDQUFDVyxPQUFPLEdBQUcsS0FBSztNQUNwQztJQUNGLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRWIsZUFBZSxFQUFFO01BQ3RCYyxJQUFJLEVBQUVQLGtCQUFrQjtNQUN4QlEsYUFBYSxFQUFFO0lBQ2pCLENBQUUsQ0FBQztFQUNMO0FBRUY7QUFFQW5CLGtCQUFrQixDQUFDb0IsUUFBUSxDQUFFLDhCQUE4QixFQUFFbEIsNEJBQTZCLENBQUM7QUFDM0YsZUFBZUEsNEJBQTRCIn0=