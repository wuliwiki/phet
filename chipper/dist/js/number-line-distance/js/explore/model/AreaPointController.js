// Copyright 2020-2022, University of Colorado Boulder

/**
 * A point controller for the temperature and elevation scenes of NLD that changes proposePosition so that the point
 * controllers can freely move and handle adding and removing points depending on whether they are in the play area.
 *
 * @author Saurabh Totey
 */

import LockToNumberLine from '../../../../number-line-common/js/common/model/LockToNumberLine.js';
import NumberLinePoint from '../../../../number-line-common/js/common/model/NumberLinePoint.js';
import merge from '../../../../phet-core/js/merge.js';
import numberLineDistance from '../../numberLineDistance.js';
import ExplorePointController from './ExplorePointController.js';
class AreaPointController extends ExplorePointController {
  /**
   * @param {DropFromDirection} dropFromDirection - the direction from which the point controller can 'drop' onto the
   * play area
   * @param {Bounds2} playAreaBounds - the bounds where the point controller is allowed to interact with the number line
   * by having a number line point. Is used to determine when to detach point controllers and when to use the default
   * proposePosition function. Points are only attached when they are 'in bounds'.
   * @param {Object} [options]
   */
  constructor(dropFromDirection, playAreaBounds, options) {
    options = merge({
      lockToNumberLine: LockToNumberLine.NEVER
    }, options);
    assert && assert(options.lockToNumberLine === LockToNumberLine.NEVER, 'lockToNumberLine should only be set to NEVER if set');
    super(dropFromDirection, playAreaBounds, options);

    // @public (read-only) {Bounds2}
    this.playAreaBounds = playAreaBounds;
  }

  /**
   * Changes proposePosition so that the point controller moves freely, but adds a number line point if it is in the play
   * area, and removes a number line point if not.
   *
   * @override
   * @param {Vector2} proposedPosition
   * @public
   */
  proposePosition(proposedPosition) {
    if (this.playAreaBounds.containsPoint(proposedPosition)) {
      if (!this.isControllingNumberLinePoint()) {
        const numberLinePoint = new NumberLinePoint(this.numberLines[0], {
          controller: this,
          initialValue: this.numberLines[0].getConstrainedValue(this.numberLines[0].modelPositionToValue(proposedPosition)),
          initialColor: this.color
        });
        this.numberLines[0].addPoint(numberLinePoint);
        this.associateWithNumberLinePoint(numberLinePoint);
      }
      super.proposePosition(proposedPosition);
    } else {
      if (this.isControllingNumberLinePoint()) {
        this.removeClearAndDisposePoints();
      }
      this.positionProperty.value = proposedPosition;
    }
  }
}
numberLineDistance.register('AreaPointController', AreaPointController);
export default AreaPointController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMb2NrVG9OdW1iZXJMaW5lIiwiTnVtYmVyTGluZVBvaW50IiwibWVyZ2UiLCJudW1iZXJMaW5lRGlzdGFuY2UiLCJFeHBsb3JlUG9pbnRDb250cm9sbGVyIiwiQXJlYVBvaW50Q29udHJvbGxlciIsImNvbnN0cnVjdG9yIiwiZHJvcEZyb21EaXJlY3Rpb24iLCJwbGF5QXJlYUJvdW5kcyIsIm9wdGlvbnMiLCJsb2NrVG9OdW1iZXJMaW5lIiwiTkVWRVIiLCJhc3NlcnQiLCJwcm9wb3NlUG9zaXRpb24iLCJwcm9wb3NlZFBvc2l0aW9uIiwiY29udGFpbnNQb2ludCIsImlzQ29udHJvbGxpbmdOdW1iZXJMaW5lUG9pbnQiLCJudW1iZXJMaW5lUG9pbnQiLCJudW1iZXJMaW5lcyIsImNvbnRyb2xsZXIiLCJpbml0aWFsVmFsdWUiLCJnZXRDb25zdHJhaW5lZFZhbHVlIiwibW9kZWxQb3NpdGlvblRvVmFsdWUiLCJpbml0aWFsQ29sb3IiLCJjb2xvciIsImFkZFBvaW50IiwiYXNzb2NpYXRlV2l0aE51bWJlckxpbmVQb2ludCIsInJlbW92ZUNsZWFyQW5kRGlzcG9zZVBvaW50cyIsInBvc2l0aW9uUHJvcGVydHkiLCJ2YWx1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXJlYVBvaW50Q29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHBvaW50IGNvbnRyb2xsZXIgZm9yIHRoZSB0ZW1wZXJhdHVyZSBhbmQgZWxldmF0aW9uIHNjZW5lcyBvZiBOTEQgdGhhdCBjaGFuZ2VzIHByb3Bvc2VQb3NpdGlvbiBzbyB0aGF0IHRoZSBwb2ludFxyXG4gKiBjb250cm9sbGVycyBjYW4gZnJlZWx5IG1vdmUgYW5kIGhhbmRsZSBhZGRpbmcgYW5kIHJlbW92aW5nIHBvaW50cyBkZXBlbmRpbmcgb24gd2hldGhlciB0aGV5IGFyZSBpbiB0aGUgcGxheSBhcmVhLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhdXJhYmggVG90ZXlcclxuICovXHJcblxyXG5pbXBvcnQgTG9ja1RvTnVtYmVyTGluZSBmcm9tICcuLi8uLi8uLi8uLi9udW1iZXItbGluZS1jb21tb24vanMvY29tbW9uL21vZGVsL0xvY2tUb051bWJlckxpbmUuanMnO1xyXG5pbXBvcnQgTnVtYmVyTGluZVBvaW50IGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9qcy9jb21tb24vbW9kZWwvTnVtYmVyTGluZVBvaW50LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lRGlzdGFuY2UgZnJvbSAnLi4vLi4vbnVtYmVyTGluZURpc3RhbmNlLmpzJztcclxuaW1wb3J0IEV4cGxvcmVQb2ludENvbnRyb2xsZXIgZnJvbSAnLi9FeHBsb3JlUG9pbnRDb250cm9sbGVyLmpzJztcclxuXHJcbmNsYXNzIEFyZWFQb2ludENvbnRyb2xsZXIgZXh0ZW5kcyBFeHBsb3JlUG9pbnRDb250cm9sbGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtEcm9wRnJvbURpcmVjdGlvbn0gZHJvcEZyb21EaXJlY3Rpb24gLSB0aGUgZGlyZWN0aW9uIGZyb20gd2hpY2ggdGhlIHBvaW50IGNvbnRyb2xsZXIgY2FuICdkcm9wJyBvbnRvIHRoZVxyXG4gICAqIHBsYXkgYXJlYVxyXG4gICAqIEBwYXJhbSB7Qm91bmRzMn0gcGxheUFyZWFCb3VuZHMgLSB0aGUgYm91bmRzIHdoZXJlIHRoZSBwb2ludCBjb250cm9sbGVyIGlzIGFsbG93ZWQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgbnVtYmVyIGxpbmVcclxuICAgKiBieSBoYXZpbmcgYSBudW1iZXIgbGluZSBwb2ludC4gSXMgdXNlZCB0byBkZXRlcm1pbmUgd2hlbiB0byBkZXRhY2ggcG9pbnQgY29udHJvbGxlcnMgYW5kIHdoZW4gdG8gdXNlIHRoZSBkZWZhdWx0XHJcbiAgICogcHJvcG9zZVBvc2l0aW9uIGZ1bmN0aW9uLiBQb2ludHMgYXJlIG9ubHkgYXR0YWNoZWQgd2hlbiB0aGV5IGFyZSAnaW4gYm91bmRzJy5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGRyb3BGcm9tRGlyZWN0aW9uLCBwbGF5QXJlYUJvdW5kcywgb3B0aW9ucyApIHtcclxuICAgIG9wdGlvbnMgPSBtZXJnZSggeyBsb2NrVG9OdW1iZXJMaW5lOiBMb2NrVG9OdW1iZXJMaW5lLk5FVkVSIH0sIG9wdGlvbnMgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoXHJcbiAgICAgIG9wdGlvbnMubG9ja1RvTnVtYmVyTGluZSA9PT0gTG9ja1RvTnVtYmVyTGluZS5ORVZFUixcclxuICAgICAgJ2xvY2tUb051bWJlckxpbmUgc2hvdWxkIG9ubHkgYmUgc2V0IHRvIE5FVkVSIGlmIHNldCdcclxuICAgICk7XHJcblxyXG4gICAgc3VwZXIoIGRyb3BGcm9tRGlyZWN0aW9uLCBwbGF5QXJlYUJvdW5kcywgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkge0JvdW5kczJ9XHJcbiAgICB0aGlzLnBsYXlBcmVhQm91bmRzID0gcGxheUFyZWFCb3VuZHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFuZ2VzIHByb3Bvc2VQb3NpdGlvbiBzbyB0aGF0IHRoZSBwb2ludCBjb250cm9sbGVyIG1vdmVzIGZyZWVseSwgYnV0IGFkZHMgYSBudW1iZXIgbGluZSBwb2ludCBpZiBpdCBpcyBpbiB0aGUgcGxheVxyXG4gICAqIGFyZWEsIGFuZCByZW1vdmVzIGEgbnVtYmVyIGxpbmUgcG9pbnQgaWYgbm90LlxyXG4gICAqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBwcm9wb3NlZFBvc2l0aW9uXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHByb3Bvc2VQb3NpdGlvbiggcHJvcG9zZWRQb3NpdGlvbiApIHtcclxuICAgIGlmICggdGhpcy5wbGF5QXJlYUJvdW5kcy5jb250YWluc1BvaW50KCBwcm9wb3NlZFBvc2l0aW9uICkgKSB7XHJcbiAgICAgIGlmICggIXRoaXMuaXNDb250cm9sbGluZ051bWJlckxpbmVQb2ludCgpICkge1xyXG4gICAgICAgIGNvbnN0IG51bWJlckxpbmVQb2ludCA9IG5ldyBOdW1iZXJMaW5lUG9pbnQoIHRoaXMubnVtYmVyTGluZXNbIDAgXSwge1xyXG4gICAgICAgICAgY29udHJvbGxlcjogdGhpcyxcclxuICAgICAgICAgIGluaXRpYWxWYWx1ZTogdGhpcy5udW1iZXJMaW5lc1sgMCBdLmdldENvbnN0cmFpbmVkVmFsdWUoXHJcbiAgICAgICAgICAgIHRoaXMubnVtYmVyTGluZXNbIDAgXS5tb2RlbFBvc2l0aW9uVG9WYWx1ZSggcHJvcG9zZWRQb3NpdGlvbiApXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICAgaW5pdGlhbENvbG9yOiB0aGlzLmNvbG9yXHJcbiAgICAgICAgfSApO1xyXG4gICAgICAgIHRoaXMubnVtYmVyTGluZXNbIDAgXS5hZGRQb2ludCggbnVtYmVyTGluZVBvaW50ICk7XHJcbiAgICAgICAgdGhpcy5hc3NvY2lhdGVXaXRoTnVtYmVyTGluZVBvaW50KCBudW1iZXJMaW5lUG9pbnQgKTtcclxuICAgICAgfVxyXG4gICAgICBzdXBlci5wcm9wb3NlUG9zaXRpb24oIHByb3Bvc2VkUG9zaXRpb24gKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZiAoIHRoaXMuaXNDb250cm9sbGluZ051bWJlckxpbmVQb2ludCgpICkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQ2xlYXJBbmREaXNwb3NlUG9pbnRzKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnZhbHVlID0gcHJvcG9zZWRQb3NpdGlvbjtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5udW1iZXJMaW5lRGlzdGFuY2UucmVnaXN0ZXIoICdBcmVhUG9pbnRDb250cm9sbGVyJywgQXJlYVBvaW50Q29udHJvbGxlciApO1xyXG5leHBvcnQgZGVmYXVsdCBBcmVhUG9pbnRDb250cm9sbGVyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSxvRUFBb0U7QUFDakcsT0FBT0MsZUFBZSxNQUFNLG1FQUFtRTtBQUMvRixPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFFaEUsTUFBTUMsbUJBQW1CLFNBQVNELHNCQUFzQixDQUFDO0VBRXZEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsaUJBQWlCLEVBQUVDLGNBQWMsRUFBRUMsT0FBTyxFQUFHO0lBQ3hEQSxPQUFPLEdBQUdQLEtBQUssQ0FBRTtNQUFFUSxnQkFBZ0IsRUFBRVYsZ0JBQWdCLENBQUNXO0lBQU0sQ0FBQyxFQUFFRixPQUFRLENBQUM7SUFDeEVHLE1BQU0sSUFBSUEsTUFBTSxDQUNkSCxPQUFPLENBQUNDLGdCQUFnQixLQUFLVixnQkFBZ0IsQ0FBQ1csS0FBSyxFQUNuRCxxREFDRixDQUFDO0lBRUQsS0FBSyxDQUFFSixpQkFBaUIsRUFBRUMsY0FBYyxFQUFFQyxPQUFRLENBQUM7O0lBRW5EO0lBQ0EsSUFBSSxDQUFDRCxjQUFjLEdBQUdBLGNBQWM7RUFDdEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSyxlQUFlQSxDQUFFQyxnQkFBZ0IsRUFBRztJQUNsQyxJQUFLLElBQUksQ0FBQ04sY0FBYyxDQUFDTyxhQUFhLENBQUVELGdCQUFpQixDQUFDLEVBQUc7TUFDM0QsSUFBSyxDQUFDLElBQUksQ0FBQ0UsNEJBQTRCLENBQUMsQ0FBQyxFQUFHO1FBQzFDLE1BQU1DLGVBQWUsR0FBRyxJQUFJaEIsZUFBZSxDQUFFLElBQUksQ0FBQ2lCLFdBQVcsQ0FBRSxDQUFDLENBQUUsRUFBRTtVQUNsRUMsVUFBVSxFQUFFLElBQUk7VUFDaEJDLFlBQVksRUFBRSxJQUFJLENBQUNGLFdBQVcsQ0FBRSxDQUFDLENBQUUsQ0FBQ0csbUJBQW1CLENBQ3JELElBQUksQ0FBQ0gsV0FBVyxDQUFFLENBQUMsQ0FBRSxDQUFDSSxvQkFBb0IsQ0FBRVIsZ0JBQWlCLENBQy9ELENBQUM7VUFDRFMsWUFBWSxFQUFFLElBQUksQ0FBQ0M7UUFDckIsQ0FBRSxDQUFDO1FBQ0gsSUFBSSxDQUFDTixXQUFXLENBQUUsQ0FBQyxDQUFFLENBQUNPLFFBQVEsQ0FBRVIsZUFBZ0IsQ0FBQztRQUNqRCxJQUFJLENBQUNTLDRCQUE0QixDQUFFVCxlQUFnQixDQUFDO01BQ3REO01BQ0EsS0FBSyxDQUFDSixlQUFlLENBQUVDLGdCQUFpQixDQUFDO0lBQzNDLENBQUMsTUFDSTtNQUNILElBQUssSUFBSSxDQUFDRSw0QkFBNEIsQ0FBQyxDQUFDLEVBQUc7UUFDekMsSUFBSSxDQUFDVywyQkFBMkIsQ0FBQyxDQUFDO01BQ3BDO01BQ0EsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0MsS0FBSyxHQUFHZixnQkFBZ0I7SUFDaEQ7RUFDRjtBQUVGO0FBRUFYLGtCQUFrQixDQUFDMkIsUUFBUSxDQUFFLHFCQUFxQixFQUFFekIsbUJBQW9CLENBQUM7QUFDekUsZUFBZUEsbUJBQW1CIn0=