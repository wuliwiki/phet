// Copyright 2021-2022, University of Colorado Boulder

/**
 * A point controller for all explore scenes.
 * Contains 'dropping' behaviour: if a point controller is dragged to a side of the play area, it 'drops' to the play
 * area rather than returning to the box.
 *
 * @author Saurabh Totey
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import PointController from '../../../../number-line-common/js/common/model/PointController.js';
import numberLineDistance from '../../numberLineDistance.js';
import DropFromDirection from './DropFromDirection.js';
class ExplorePointController extends PointController {
  /**
   * @param {DropFromDirection} dropFromDirection
   * @param {Bounds2} playAreaBounds - the bounds where the point controller is considered to interact with the number line
   * @param {Object} [options]
   */
  constructor(dropFromDirection, playAreaBounds, options) {
    super(options);

    // The dropping behaviour for #34: if the point controller is no longer being dragged but is in the relevant drop
    // direction, then propose a new position for it into the play area. No unlink necessary because the point controllers
    // are present for the sim's lifetime.
    this.isDraggingProperty.link(isDragging => {
      if (isDragging) {
        return;
      }
      const position = this.positionProperty.value;
      if (dropFromDirection === DropFromDirection.TOP && position.y < playAreaBounds.minY && playAreaBounds.minX <= position.x && position.x <= playAreaBounds.maxX) {
        this.proposePosition(new Vector2(position.x, playAreaBounds.minY));
      } else if (dropFromDirection === DropFromDirection.LEFT && position.x < playAreaBounds.minX && playAreaBounds.minY <= position.y && position.y <= playAreaBounds.maxY) {
        this.proposePosition(new Vector2(playAreaBounds.minX, position.y));
      }
    });
  }
}
numberLineDistance.register('ExplorePointController', ExplorePointController);
export default ExplorePointController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiUG9pbnRDb250cm9sbGVyIiwibnVtYmVyTGluZURpc3RhbmNlIiwiRHJvcEZyb21EaXJlY3Rpb24iLCJFeHBsb3JlUG9pbnRDb250cm9sbGVyIiwiY29uc3RydWN0b3IiLCJkcm9wRnJvbURpcmVjdGlvbiIsInBsYXlBcmVhQm91bmRzIiwib3B0aW9ucyIsImlzRHJhZ2dpbmdQcm9wZXJ0eSIsImxpbmsiLCJpc0RyYWdnaW5nIiwicG9zaXRpb24iLCJwb3NpdGlvblByb3BlcnR5IiwidmFsdWUiLCJUT1AiLCJ5IiwibWluWSIsIm1pblgiLCJ4IiwibWF4WCIsInByb3Bvc2VQb3NpdGlvbiIsIkxFRlQiLCJtYXhZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeHBsb3JlUG9pbnRDb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgcG9pbnQgY29udHJvbGxlciBmb3IgYWxsIGV4cGxvcmUgc2NlbmVzLlxyXG4gKiBDb250YWlucyAnZHJvcHBpbmcnIGJlaGF2aW91cjogaWYgYSBwb2ludCBjb250cm9sbGVyIGlzIGRyYWdnZWQgdG8gYSBzaWRlIG9mIHRoZSBwbGF5IGFyZWEsIGl0ICdkcm9wcycgdG8gdGhlIHBsYXlcclxuICogYXJlYSByYXRoZXIgdGhhbiByZXR1cm5pbmcgdG8gdGhlIGJveC5cclxuICpcclxuICogQGF1dGhvciBTYXVyYWJoIFRvdGV5XHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgUG9pbnRDb250cm9sbGVyIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9qcy9jb21tb24vbW9kZWwvUG9pbnRDb250cm9sbGVyLmpzJztcclxuaW1wb3J0IG51bWJlckxpbmVEaXN0YW5jZSBmcm9tICcuLi8uLi9udW1iZXJMaW5lRGlzdGFuY2UuanMnO1xyXG5pbXBvcnQgRHJvcEZyb21EaXJlY3Rpb24gZnJvbSAnLi9Ecm9wRnJvbURpcmVjdGlvbi5qcyc7XHJcblxyXG5jbGFzcyBFeHBsb3JlUG9pbnRDb250cm9sbGVyIGV4dGVuZHMgUG9pbnRDb250cm9sbGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtEcm9wRnJvbURpcmVjdGlvbn0gZHJvcEZyb21EaXJlY3Rpb25cclxuICAgKiBAcGFyYW0ge0JvdW5kczJ9IHBsYXlBcmVhQm91bmRzIC0gdGhlIGJvdW5kcyB3aGVyZSB0aGUgcG9pbnQgY29udHJvbGxlciBpcyBjb25zaWRlcmVkIHRvIGludGVyYWN0IHdpdGggdGhlIG51bWJlciBsaW5lXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBkcm9wRnJvbURpcmVjdGlvbiwgcGxheUFyZWFCb3VuZHMsIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFRoZSBkcm9wcGluZyBiZWhhdmlvdXIgZm9yICMzNDogaWYgdGhlIHBvaW50IGNvbnRyb2xsZXIgaXMgbm8gbG9uZ2VyIGJlaW5nIGRyYWdnZWQgYnV0IGlzIGluIHRoZSByZWxldmFudCBkcm9wXHJcbiAgICAvLyBkaXJlY3Rpb24sIHRoZW4gcHJvcG9zZSBhIG5ldyBwb3NpdGlvbiBmb3IgaXQgaW50byB0aGUgcGxheSBhcmVhLiBObyB1bmxpbmsgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIHBvaW50IGNvbnRyb2xsZXJzXHJcbiAgICAvLyBhcmUgcHJlc2VudCBmb3IgdGhlIHNpbSdzIGxpZmV0aW1lLlxyXG4gICAgdGhpcy5pc0RyYWdnaW5nUHJvcGVydHkubGluayggaXNEcmFnZ2luZyA9PiB7XHJcbiAgICAgIGlmICggaXNEcmFnZ2luZyApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIGlmICggZHJvcEZyb21EaXJlY3Rpb24gPT09IERyb3BGcm9tRGlyZWN0aW9uLlRPUCAmJiBwb3NpdGlvbi55IDwgcGxheUFyZWFCb3VuZHMubWluWSAmJlxyXG4gICAgICAgIHBsYXlBcmVhQm91bmRzLm1pblggPD0gcG9zaXRpb24ueCAmJiBwb3NpdGlvbi54IDw9IHBsYXlBcmVhQm91bmRzLm1heFggKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wb3NlUG9zaXRpb24oIG5ldyBWZWN0b3IyKCBwb3NpdGlvbi54LCBwbGF5QXJlYUJvdW5kcy5taW5ZICkgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggZHJvcEZyb21EaXJlY3Rpb24gPT09IERyb3BGcm9tRGlyZWN0aW9uLkxFRlQgJiYgcG9zaXRpb24ueCA8IHBsYXlBcmVhQm91bmRzLm1pblggJiZcclxuICAgICAgICBwbGF5QXJlYUJvdW5kcy5taW5ZIDw9IHBvc2l0aW9uLnkgJiYgcG9zaXRpb24ueSA8PSBwbGF5QXJlYUJvdW5kcy5tYXhZICkge1xyXG4gICAgICAgIHRoaXMucHJvcG9zZVBvc2l0aW9uKCBuZXcgVmVjdG9yMiggcGxheUFyZWFCb3VuZHMubWluWCwgcG9zaXRpb24ueSApICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5udW1iZXJMaW5lRGlzdGFuY2UucmVnaXN0ZXIoICdFeHBsb3JlUG9pbnRDb250cm9sbGVyJywgRXhwbG9yZVBvaW50Q29udHJvbGxlciApO1xyXG5leHBvcnQgZGVmYXVsdCBFeHBsb3JlUG9pbnRDb250cm9sbGVyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsZUFBZSxNQUFNLG1FQUFtRTtBQUMvRixPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBRXRELE1BQU1DLHNCQUFzQixTQUFTSCxlQUFlLENBQUM7RUFFbkQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxpQkFBaUIsRUFBRUMsY0FBYyxFQUFFQyxPQUFPLEVBQUc7SUFDeEQsS0FBSyxDQUFFQSxPQUFRLENBQUM7O0lBRWhCO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBRUMsVUFBVSxJQUFJO01BQzFDLElBQUtBLFVBQVUsRUFBRztRQUNoQjtNQUNGO01BQ0EsTUFBTUMsUUFBUSxHQUFHLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNDLEtBQUs7TUFDNUMsSUFBS1IsaUJBQWlCLEtBQUtILGlCQUFpQixDQUFDWSxHQUFHLElBQUlILFFBQVEsQ0FBQ0ksQ0FBQyxHQUFHVCxjQUFjLENBQUNVLElBQUksSUFDbEZWLGNBQWMsQ0FBQ1csSUFBSSxJQUFJTixRQUFRLENBQUNPLENBQUMsSUFBSVAsUUFBUSxDQUFDTyxDQUFDLElBQUlaLGNBQWMsQ0FBQ2EsSUFBSSxFQUFHO1FBQ3pFLElBQUksQ0FBQ0MsZUFBZSxDQUFFLElBQUlyQixPQUFPLENBQUVZLFFBQVEsQ0FBQ08sQ0FBQyxFQUFFWixjQUFjLENBQUNVLElBQUssQ0FBRSxDQUFDO01BQ3hFLENBQUMsTUFDSSxJQUFLWCxpQkFBaUIsS0FBS0gsaUJBQWlCLENBQUNtQixJQUFJLElBQUlWLFFBQVEsQ0FBQ08sQ0FBQyxHQUFHWixjQUFjLENBQUNXLElBQUksSUFDeEZYLGNBQWMsQ0FBQ1UsSUFBSSxJQUFJTCxRQUFRLENBQUNJLENBQUMsSUFBSUosUUFBUSxDQUFDSSxDQUFDLElBQUlULGNBQWMsQ0FBQ2dCLElBQUksRUFBRztRQUN6RSxJQUFJLENBQUNGLGVBQWUsQ0FBRSxJQUFJckIsT0FBTyxDQUFFTyxjQUFjLENBQUNXLElBQUksRUFBRU4sUUFBUSxDQUFDSSxDQUFFLENBQUUsQ0FBQztNQUN4RTtJQUNGLENBQUUsQ0FBQztFQUNMO0FBRUY7QUFFQWQsa0JBQWtCLENBQUNzQixRQUFRLENBQUUsd0JBQXdCLEVBQUVwQixzQkFBdUIsQ0FBQztBQUMvRSxlQUFlQSxzQkFBc0IifQ==