// Copyright 2020-2022, University of Colorado Boulder

/**
 * Main model for the 'Generic' screen
 *
 * @author Saurabh Totey
 */

import PointController from '../../../../number-line-common/js/common/model/PointController.js';
import SpatializedNumberLine from '../../../../number-line-common/js/common/model/SpatializedNumberLine.js';
import Orientation from '../../../../phet-core/js/Orientation.js';
import AbstractNLDBaseModel from '../../common/model/AbstractNLDBaseModel.js';
import NLDConstants from '../../common/NLDConstants.js';
import numberLineDistance from '../../numberLineDistance.js';
class NLDGenericModel extends AbstractNLDBaseModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const numberLine = new SpatializedNumberLine(NLDConstants.NLD_LAYOUT_BOUNDS.center, {
      widthInModelSpace: NLDConstants.NLD_LAYOUT_BOUNDS.width - 100,
      heightInModelSpace: NLDConstants.NLD_LAYOUT_BOUNDS.height - 215,
      initialDisplayedRange: NLDConstants.GENERIC_NUMBER_LINE_RANGES[0],
      preventOverlap: false,
      labelsInitiallyVisible: true,
      tickMarksInitiallyVisible: true
    });

    // Changes the center position of the number line depending on its orientation
    numberLine.orientationProperty.link(orientation => {
      if (orientation === Orientation.HORIZONTAL) {
        numberLine.centerPositionProperty.value = NLDConstants.NLD_LAYOUT_BOUNDS.center;
      } else {
        numberLine.centerPositionProperty.value = NLDConstants.NLD_LAYOUT_BOUNDS.center.plusXY(0, 75);
      }
    });
    super(numberLine, new PointController({
      numberLines: [numberLine],
      color: 'magenta'
    }), new PointController({
      numberLines: [numberLine],
      color: 'blue'
    }), tandem);

    // change box bounds when number line orientation changes
    this.numberLine.orientationProperty.link(orientation => {
      this.pointControllerBoxProperty.value = orientation === Orientation.HORIZONTAL ? NLDConstants.BOTTOM_BOX_BOUNDS : NLDConstants.SIDE_BOX_BOUNDS;
    });
  }
}
numberLineDistance.register('NLDGenericModel', NLDGenericModel);
export default NLDGenericModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb2ludENvbnRyb2xsZXIiLCJTcGF0aWFsaXplZE51bWJlckxpbmUiLCJPcmllbnRhdGlvbiIsIkFic3RyYWN0TkxEQmFzZU1vZGVsIiwiTkxEQ29uc3RhbnRzIiwibnVtYmVyTGluZURpc3RhbmNlIiwiTkxER2VuZXJpY01vZGVsIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJudW1iZXJMaW5lIiwiTkxEX0xBWU9VVF9CT1VORFMiLCJjZW50ZXIiLCJ3aWR0aEluTW9kZWxTcGFjZSIsIndpZHRoIiwiaGVpZ2h0SW5Nb2RlbFNwYWNlIiwiaGVpZ2h0IiwiaW5pdGlhbERpc3BsYXllZFJhbmdlIiwiR0VORVJJQ19OVU1CRVJfTElORV9SQU5HRVMiLCJwcmV2ZW50T3ZlcmxhcCIsImxhYmVsc0luaXRpYWxseVZpc2libGUiLCJ0aWNrTWFya3NJbml0aWFsbHlWaXNpYmxlIiwib3JpZW50YXRpb25Qcm9wZXJ0eSIsImxpbmsiLCJvcmllbnRhdGlvbiIsIkhPUklaT05UQUwiLCJjZW50ZXJQb3NpdGlvblByb3BlcnR5IiwidmFsdWUiLCJwbHVzWFkiLCJudW1iZXJMaW5lcyIsImNvbG9yIiwicG9pbnRDb250cm9sbGVyQm94UHJvcGVydHkiLCJCT1RUT01fQk9YX0JPVU5EUyIsIlNJREVfQk9YX0JPVU5EUyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTkxER2VuZXJpY01vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gbW9kZWwgZm9yIHRoZSAnR2VuZXJpYycgc2NyZWVuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2F1cmFiaCBUb3RleVxyXG4gKi9cclxuXHJcbmltcG9ydCBQb2ludENvbnRyb2xsZXIgZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLWxpbmUtY29tbW9uL2pzL2NvbW1vbi9tb2RlbC9Qb2ludENvbnRyb2xsZXIuanMnO1xyXG5pbXBvcnQgU3BhdGlhbGl6ZWROdW1iZXJMaW5lIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9qcy9jb21tb24vbW9kZWwvU3BhdGlhbGl6ZWROdW1iZXJMaW5lLmpzJztcclxuaW1wb3J0IE9yaWVudGF0aW9uIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9PcmllbnRhdGlvbi5qcyc7XHJcbmltcG9ydCBBYnN0cmFjdE5MREJhc2VNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQWJzdHJhY3ROTERCYXNlTW9kZWwuanMnO1xyXG5pbXBvcnQgTkxEQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9OTERDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgbnVtYmVyTGluZURpc3RhbmNlIGZyb20gJy4uLy4uL251bWJlckxpbmVEaXN0YW5jZS5qcyc7XHJcblxyXG5jbGFzcyBOTERHZW5lcmljTW9kZWwgZXh0ZW5kcyBBYnN0cmFjdE5MREJhc2VNb2RlbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG4gICAgY29uc3QgbnVtYmVyTGluZSA9IG5ldyBTcGF0aWFsaXplZE51bWJlckxpbmUoIE5MRENvbnN0YW50cy5OTERfTEFZT1VUX0JPVU5EUy5jZW50ZXIsIHtcclxuICAgICAgd2lkdGhJbk1vZGVsU3BhY2U6IE5MRENvbnN0YW50cy5OTERfTEFZT1VUX0JPVU5EUy53aWR0aCAtIDEwMCxcclxuICAgICAgaGVpZ2h0SW5Nb2RlbFNwYWNlOiBOTERDb25zdGFudHMuTkxEX0xBWU9VVF9CT1VORFMuaGVpZ2h0IC0gMjE1LFxyXG4gICAgICBpbml0aWFsRGlzcGxheWVkUmFuZ2U6IE5MRENvbnN0YW50cy5HRU5FUklDX05VTUJFUl9MSU5FX1JBTkdFU1sgMCBdLFxyXG4gICAgICBwcmV2ZW50T3ZlcmxhcDogZmFsc2UsXHJcbiAgICAgIGxhYmVsc0luaXRpYWxseVZpc2libGU6IHRydWUsXHJcbiAgICAgIHRpY2tNYXJrc0luaXRpYWxseVZpc2libGU6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBDaGFuZ2VzIHRoZSBjZW50ZXIgcG9zaXRpb24gb2YgdGhlIG51bWJlciBsaW5lIGRlcGVuZGluZyBvbiBpdHMgb3JpZW50YXRpb25cclxuICAgIG51bWJlckxpbmUub3JpZW50YXRpb25Qcm9wZXJ0eS5saW5rKCBvcmllbnRhdGlvbiA9PiB7XHJcbiAgICAgIGlmICggb3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUwgKSB7XHJcbiAgICAgICAgbnVtYmVyTGluZS5jZW50ZXJQb3NpdGlvblByb3BlcnR5LnZhbHVlID0gTkxEQ29uc3RhbnRzLk5MRF9MQVlPVVRfQk9VTkRTLmNlbnRlcjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBudW1iZXJMaW5lLmNlbnRlclBvc2l0aW9uUHJvcGVydHkudmFsdWUgPSBOTERDb25zdGFudHMuTkxEX0xBWU9VVF9CT1VORFMuY2VudGVyLnBsdXNYWSggMCwgNzUgKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICBudW1iZXJMaW5lLFxyXG4gICAgICBuZXcgUG9pbnRDb250cm9sbGVyKCB7XHJcbiAgICAgICAgbnVtYmVyTGluZXM6IFsgbnVtYmVyTGluZSBdLFxyXG4gICAgICAgIGNvbG9yOiAnbWFnZW50YSdcclxuICAgICAgfSApLFxyXG4gICAgICBuZXcgUG9pbnRDb250cm9sbGVyKCB7XHJcbiAgICAgICAgbnVtYmVyTGluZXM6IFsgbnVtYmVyTGluZSBdLFxyXG4gICAgICAgIGNvbG9yOiAnYmx1ZSdcclxuICAgICAgfSApLFxyXG4gICAgICB0YW5kZW1cclxuICAgICk7XHJcblxyXG4gICAgLy8gY2hhbmdlIGJveCBib3VuZHMgd2hlbiBudW1iZXIgbGluZSBvcmllbnRhdGlvbiBjaGFuZ2VzXHJcbiAgICB0aGlzLm51bWJlckxpbmUub3JpZW50YXRpb25Qcm9wZXJ0eS5saW5rKCBvcmllbnRhdGlvbiA9PiB7XHJcbiAgICAgIHRoaXMucG9pbnRDb250cm9sbGVyQm94UHJvcGVydHkudmFsdWUgPSAoIG9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMICkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTkxEQ29uc3RhbnRzLkJPVFRPTV9CT1hfQk9VTkRTIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5MRENvbnN0YW50cy5TSURFX0JPWF9CT1VORFM7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxubnVtYmVyTGluZURpc3RhbmNlLnJlZ2lzdGVyKCAnTkxER2VuZXJpY01vZGVsJywgTkxER2VuZXJpY01vZGVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IE5MREdlbmVyaWNNb2RlbDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSxtRUFBbUU7QUFDL0YsT0FBT0MscUJBQXFCLE1BQU0seUVBQXlFO0FBQzNHLE9BQU9DLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0Msb0JBQW9CLE1BQU0sNENBQTRDO0FBQzdFLE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBRTVELE1BQU1DLGVBQWUsU0FBU0gsb0JBQW9CLENBQUM7RUFFakQ7QUFDRjtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUNwQixNQUFNQyxVQUFVLEdBQUcsSUFBSVIscUJBQXFCLENBQUVHLFlBQVksQ0FBQ00saUJBQWlCLENBQUNDLE1BQU0sRUFBRTtNQUNuRkMsaUJBQWlCLEVBQUVSLFlBQVksQ0FBQ00saUJBQWlCLENBQUNHLEtBQUssR0FBRyxHQUFHO01BQzdEQyxrQkFBa0IsRUFBRVYsWUFBWSxDQUFDTSxpQkFBaUIsQ0FBQ0ssTUFBTSxHQUFHLEdBQUc7TUFDL0RDLHFCQUFxQixFQUFFWixZQUFZLENBQUNhLDBCQUEwQixDQUFFLENBQUMsQ0FBRTtNQUNuRUMsY0FBYyxFQUFFLEtBQUs7TUFDckJDLHNCQUFzQixFQUFFLElBQUk7TUFDNUJDLHlCQUF5QixFQUFFO0lBQzdCLENBQUUsQ0FBQzs7SUFFSDtJQUNBWCxVQUFVLENBQUNZLG1CQUFtQixDQUFDQyxJQUFJLENBQUVDLFdBQVcsSUFBSTtNQUNsRCxJQUFLQSxXQUFXLEtBQUtyQixXQUFXLENBQUNzQixVQUFVLEVBQUc7UUFDNUNmLFVBQVUsQ0FBQ2dCLHNCQUFzQixDQUFDQyxLQUFLLEdBQUd0QixZQUFZLENBQUNNLGlCQUFpQixDQUFDQyxNQUFNO01BQ2pGLENBQUMsTUFDSTtRQUNIRixVQUFVLENBQUNnQixzQkFBc0IsQ0FBQ0MsS0FBSyxHQUFHdEIsWUFBWSxDQUFDTSxpQkFBaUIsQ0FBQ0MsTUFBTSxDQUFDZ0IsTUFBTSxDQUFFLENBQUMsRUFBRSxFQUFHLENBQUM7TUFDakc7SUFDRixDQUFFLENBQUM7SUFFSCxLQUFLLENBQ0hsQixVQUFVLEVBQ1YsSUFBSVQsZUFBZSxDQUFFO01BQ25CNEIsV0FBVyxFQUFFLENBQUVuQixVQUFVLENBQUU7TUFDM0JvQixLQUFLLEVBQUU7SUFDVCxDQUFFLENBQUMsRUFDSCxJQUFJN0IsZUFBZSxDQUFFO01BQ25CNEIsV0FBVyxFQUFFLENBQUVuQixVQUFVLENBQUU7TUFDM0JvQixLQUFLLEVBQUU7SUFDVCxDQUFFLENBQUMsRUFDSHJCLE1BQ0YsQ0FBQzs7SUFFRDtJQUNBLElBQUksQ0FBQ0MsVUFBVSxDQUFDWSxtQkFBbUIsQ0FBQ0MsSUFBSSxDQUFFQyxXQUFXLElBQUk7TUFDdkQsSUFBSSxDQUFDTywwQkFBMEIsQ0FBQ0osS0FBSyxHQUFLSCxXQUFXLEtBQUtyQixXQUFXLENBQUNzQixVQUFVLEdBQ3hDcEIsWUFBWSxDQUFDMkIsaUJBQWlCLEdBQzlCM0IsWUFBWSxDQUFDNEIsZUFBZTtJQUN0RSxDQUFFLENBQUM7RUFDTDtBQUVGO0FBRUEzQixrQkFBa0IsQ0FBQzRCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRTNCLGVBQWdCLENBQUM7QUFDakUsZUFBZUEsZUFBZSJ9