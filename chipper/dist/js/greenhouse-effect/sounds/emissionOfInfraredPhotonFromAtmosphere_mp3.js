/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';
const soundURI = 'data:audio/mpeg;base64,//swxAAABxg1KnWkgBEcC3T/NPIiBco4AN+zKF5lnB0Lh3qxxFwOULzaGpmrufuUl6Ju2/4YJGFyMVo0YOO4IHMoCAIBjxAAz/B///BBpE2DcS+XufvgDgAAAAAAB3FAn3FFEpBoxxOo4zIDPr4MadHhRQLpA5dIR3zAdSbqBBFiJaoZc9do67+sWrymOfr17P8DC7loABabbbMA//syxAOASFRvVb22gDEGjej13Bz/ANOSGUqQOWiDBc4pgOzKDDQwtCDAVTtNVB2LIbPMykvJACckMMbUSaD8lqqDMbMiqIceR/rL7Wss119JIABiltlEAtGT9HAEJQNIBUIOUHBkC6UfyLj5ItFU0WV659b67JbGWfcLMAY5fSYuGq6pbLMeEoJNdYt+pJfBGgWVQAAFVttoAAEXXv/7MsQFAAikd0muYYZ4/oclqc9shpF3ESvCBocnXgazAlaK4i4FwF8a3QbAZHb+BlxKKax9kkwPumS0+9pMhuPSu92y5li7TcX1r1qtXqlRAACUE06SAjcIAWFwsMD8wWdjCmNMUiyE1lBezO0wBFptN0Z2BBh6rZE36ndfmzXHX/9WLa3adX7f9nq7f9v/oQABYDEVKAcJagqNAJf/+zLEBoIH3C0lTftkMQCFox2fcE7NCLDr6s0pJKzHtFhOkeDQFQ2FzNaXTCgIw0Eehpb8ROnjiXWSaPyf/DdP7ZH//to/0CLrFSAMaMAyGsKb7RghAtmFCL4YvSzxuZhVFbOMAFIxZHzWRPMKgYwEHWSSm5nldcXFlertyXbkaf/+yR/T/5EAQdcpQAEPmOCGFbm8oGByFaYXA4Rr//swxAsCCHwtCO17YnDChGBprmiG63NG+eVQZ7imwnJ6W2ZAqCzuLDhMBt5C5ZUrNetHYm79uVd8O/5mS/0/kaf8RAfcBAwA/TFUrw4wHXj0cTLM4PGzY88kzrU3wA36RRdqkLpMwQEoCzuHdZ3//6v//qVCIQI2iHwAAAAC4hUbkNDV6j8uVVZsMBoiKSSJblBZZxHNegQQaJAj//syxBQDxgA86+w9LjgAADSAAAAEnCIqXJVqfGVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray(phetAudioContext, soundURI);
const unlock = asyncLoader.createLock(soundURI);
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if (!unlocked) {
    unlock();
    unlocked = true;
  }
};
const onDecodeSuccess = decodedAudio => {
  if (wrappedAudioBuffer.audioBufferProperty.value === null) {
    wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn('decode of audio data failed, using stubbed sound, error: ' + decodeError);
  wrappedAudioBuffer.audioBufferProperty.set(phetAudioContext.createBuffer(1, 1, phetAudioContext.sampleRate));
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData(soundByteArray.buffer, onDecodeSuccess, onDecodeError);
if (decodePromise) {
  decodePromise.then(decodedAudio => {
    if (wrappedAudioBuffer.audioBufferProperty.value === null) {
      wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
      safeUnlock();
    }
  }).catch(e => {
    console.warn('promise rejection caught for audio decode, error = ' + e);
    safeUnlock();
  });
}
export default wrappedAudioBuffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3luY0xvYWRlciIsImJhc2U2NFNvdW5kVG9CeXRlQXJyYXkiLCJXcmFwcGVkQXVkaW9CdWZmZXIiLCJwaGV0QXVkaW9Db250ZXh0Iiwic291bmRVUkkiLCJzb3VuZEJ5dGVBcnJheSIsInVubG9jayIsImNyZWF0ZUxvY2siLCJ3cmFwcGVkQXVkaW9CdWZmZXIiLCJ1bmxvY2tlZCIsInNhZmVVbmxvY2siLCJvbkRlY29kZVN1Y2Nlc3MiLCJkZWNvZGVkQXVkaW8iLCJhdWRpb0J1ZmZlclByb3BlcnR5IiwidmFsdWUiLCJzZXQiLCJvbkRlY29kZUVycm9yIiwiZGVjb2RlRXJyb3IiLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZUJ1ZmZlciIsInNhbXBsZVJhdGUiLCJkZWNvZGVQcm9taXNlIiwiZGVjb2RlQXVkaW9EYXRhIiwiYnVmZmVyIiwidGhlbiIsImNhdGNoIiwiZSJdLCJzb3VyY2VzIjpbImVtaXNzaW9uT2ZJbmZyYXJlZFBob3RvbkZyb21BdG1vc3BoZXJlX21wMy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5pbXBvcnQgYXN5bmNMb2FkZXIgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL2FzeW5jTG9hZGVyLmpzJztcclxuaW1wb3J0IGJhc2U2NFNvdW5kVG9CeXRlQXJyYXkgZnJvbSAnLi4vLi4vdGFtYm8vanMvYmFzZTY0U291bmRUb0J5dGVBcnJheS5qcyc7XHJcbmltcG9ydCBXcmFwcGVkQXVkaW9CdWZmZXIgZnJvbSAnLi4vLi4vdGFtYm8vanMvV3JhcHBlZEF1ZGlvQnVmZmVyLmpzJztcclxuaW1wb3J0IHBoZXRBdWRpb0NvbnRleHQgZnJvbSAnLi4vLi4vdGFtYm8vanMvcGhldEF1ZGlvQ29udGV4dC5qcyc7XHJcblxyXG5jb25zdCBzb3VuZFVSSSA9ICdkYXRhOmF1ZGlvL21wZWc7YmFzZTY0LC8vc3d4QUFBQnhnMUtuV2tnQkVjQzNUL05QSWlCY280QU4rektGNWxuQjBMaDNxeHhGd09VTHphR3BtcnVmdVVsNkp1Mi80WUpHRnlNVm8wWU9PNElITW9DQUlCanhBQXovQi8vL0JCcEUyRGNTK1h1ZnZnRGdBQUFBQUFCM0ZBbjNGRkVwQm94eE9vNHpJRFByNE1hZEhoUlFMcEE1ZElSM3pBZFNicUJCRmlKYW9aYzlkbzY3K3NXcnltT2ZyMTdQOERDN2xvQUJhYmJiTUEvL3N5eEFPQVNGUnZWYjIyZ0RFR2plajEzQnovQU5PU0dVcVFPV2lEQmM0cGdPektERFF3dENEQVZUdE5WQjJMSWJQTXlrdkpBQ2NrTU1iVVNhRDhscXFETWJNaXFJY2VSL3JMN1dzczExOUpJQUJpbHRsRUF0R1Q5SEFFSlFOSUJVSU9VSEJrQzZVZnlMajVJdEZVMFdWNjU5YjY3SmJHV2ZjTE1BWTVmU1l1R3E2cGJMTWVFb0pOZFl0K3BKZkJHZ1dWUUFBRlZ0dG9BQUVYWHYvN01zUUZBQWlrZDBtdVlZWjQvb2NscWM5c2hwRjNFU3ZDQm9jblhnYXpBbGFLNGk0RndGOGEzUWJBWkhiK0JseEtLYXg5a2t3UHVtUzArOXBNaHVQU3U5Mnk1bGk3VGNYMXIxcXRYcWxSQUFDVUUwNlNBamNJQVdGd3NNRDh3V2RqQ21OTVVpeUUxbEJlek8wd0JGcHROMFoyQkJoNnJaRTM2bmRmbXpYSFgvOVdMYTNhZFg3ZjlucTdmOXYvb1FBQllERVZLQWNKYWdxTkFKZi8rekxFQm9JSDNDMGxUZnRrTVFDRm94MmZjRTdOQ0xEcjZzMHBKS3pIdEZoT2tlRFFGUTJGek5hWFRDZ0l3MEVlaHBiOFJPbmppWFdTYVB5Zi9EZFA3WkgvL3RvLzBDTHJGU0FNYU1BeUdzS2I3UmdoQXRtRkNMNFl2U3p4dVpoVkZiT01BRkl4Wkh6V1JQTUtnWXdFSFdTU201bmxkY1hGbGVydHlYYmthZi8reVIvVC81RUFRZGNwUUFFUG1PQ0dGYm04b0dCeUZhWVhBNFJyLy9zd3hBc0NDSHd0Q08xN1luRENoR0Jwcm1pRzYzTkcrZVZRWjdpbXduSjZXMlpBcUN6dUxEaE1CdDVDNVpVck5ldEhZbTc5dVZkOE8vNW1TLzAva2FmOFJBZmNCQXdBL1RGVXJ3NHdIWGowY1RMTTRQR3pZODhrenJVM3dBMzZSUmRxa0xwTXdRRW9DenVIZFozLy82di8vcVZDSVFJMmlId0FBQUFDNGhVYmtORFY2ajh1VlZac01Cb2lLU1NKYmxCWlp4SE5lZ1FRYUpBai8vc3l4QlFEeGdBODYrdzlMamdBQURTQUFBQUVuQ0lxWEpWcWZHVk1RVTFGTXk0NU9TNDFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWUT09JztcclxuY29uc3Qgc291bmRCeXRlQXJyYXkgPSBiYXNlNjRTb3VuZFRvQnl0ZUFycmF5KCBwaGV0QXVkaW9Db250ZXh0LCBzb3VuZFVSSSApO1xyXG5jb25zdCB1bmxvY2sgPSBhc3luY0xvYWRlci5jcmVhdGVMb2NrKCBzb3VuZFVSSSApO1xyXG5jb25zdCB3cmFwcGVkQXVkaW9CdWZmZXIgPSBuZXcgV3JhcHBlZEF1ZGlvQnVmZmVyKCk7XHJcblxyXG4vLyBzYWZlIHdheSB0byB1bmxvY2tcclxubGV0IHVubG9ja2VkID0gZmFsc2U7XHJcbmNvbnN0IHNhZmVVbmxvY2sgPSAoKSA9PiB7XHJcbiAgaWYgKCAhdW5sb2NrZWQgKSB7XHJcbiAgICB1bmxvY2soKTtcclxuICAgIHVubG9ja2VkID0gdHJ1ZTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBvbkRlY29kZVN1Y2Nlc3MgPSBkZWNvZGVkQXVkaW8gPT4ge1xyXG4gIGlmICggd3JhcHBlZEF1ZGlvQnVmZmVyLmF1ZGlvQnVmZmVyUHJvcGVydHkudmFsdWUgPT09IG51bGwgKSB7XHJcbiAgICB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS5zZXQoIGRlY29kZWRBdWRpbyApO1xyXG4gICAgc2FmZVVubG9jaygpO1xyXG4gIH1cclxufTtcclxuY29uc3Qgb25EZWNvZGVFcnJvciA9IGRlY29kZUVycm9yID0+IHtcclxuICBjb25zb2xlLndhcm4oICdkZWNvZGUgb2YgYXVkaW8gZGF0YSBmYWlsZWQsIHVzaW5nIHN0dWJiZWQgc291bmQsIGVycm9yOiAnICsgZGVjb2RlRXJyb3IgKTtcclxuICB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS5zZXQoIHBoZXRBdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyKCAxLCAxLCBwaGV0QXVkaW9Db250ZXh0LnNhbXBsZVJhdGUgKSApO1xyXG4gIHNhZmVVbmxvY2soKTtcclxufTtcclxuY29uc3QgZGVjb2RlUHJvbWlzZSA9IHBoZXRBdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKCBzb3VuZEJ5dGVBcnJheS5idWZmZXIsIG9uRGVjb2RlU3VjY2Vzcywgb25EZWNvZGVFcnJvciApO1xyXG5pZiAoIGRlY29kZVByb21pc2UgKSB7XHJcbiAgZGVjb2RlUHJvbWlzZVxyXG4gICAgLnRoZW4oIGRlY29kZWRBdWRpbyA9PiB7XHJcbiAgICAgIGlmICggd3JhcHBlZEF1ZGlvQnVmZmVyLmF1ZGlvQnVmZmVyUHJvcGVydHkudmFsdWUgPT09IG51bGwgKSB7XHJcbiAgICAgICAgd3JhcHBlZEF1ZGlvQnVmZmVyLmF1ZGlvQnVmZmVyUHJvcGVydHkuc2V0KCBkZWNvZGVkQXVkaW8gKTtcclxuICAgICAgICBzYWZlVW5sb2NrKCk7XHJcbiAgICAgIH1cclxuICAgIH0gKVxyXG4gICAgLmNhdGNoKCBlID0+IHtcclxuICAgICAgY29uc29sZS53YXJuKCAncHJvbWlzZSByZWplY3Rpb24gY2F1Z2h0IGZvciBhdWRpbyBkZWNvZGUsIGVycm9yID0gJyArIGUgKTtcclxuICAgICAgc2FmZVVubG9jaygpO1xyXG4gICAgfSApO1xyXG59XHJcbmV4cG9ydCBkZWZhdWx0IHdyYXBwZWRBdWRpb0J1ZmZlcjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsT0FBT0EsV0FBVyxNQUFNLG1DQUFtQztBQUMzRCxPQUFPQyxzQkFBc0IsTUFBTSwwQ0FBMEM7QUFDN0UsT0FBT0Msa0JBQWtCLE1BQU0sc0NBQXNDO0FBQ3JFLE9BQU9DLGdCQUFnQixNQUFNLG9DQUFvQztBQUVqRSxNQUFNQyxRQUFRLEdBQUcsaXdDQUFpd0M7QUFDbHhDLE1BQU1DLGNBQWMsR0FBR0osc0JBQXNCLENBQUVFLGdCQUFnQixFQUFFQyxRQUFTLENBQUM7QUFDM0UsTUFBTUUsTUFBTSxHQUFHTixXQUFXLENBQUNPLFVBQVUsQ0FBRUgsUUFBUyxDQUFDO0FBQ2pELE1BQU1JLGtCQUFrQixHQUFHLElBQUlOLGtCQUFrQixDQUFDLENBQUM7O0FBRW5EO0FBQ0EsSUFBSU8sUUFBUSxHQUFHLEtBQUs7QUFDcEIsTUFBTUMsVUFBVSxHQUFHQSxDQUFBLEtBQU07RUFDdkIsSUFBSyxDQUFDRCxRQUFRLEVBQUc7SUFDZkgsTUFBTSxDQUFDLENBQUM7SUFDUkcsUUFBUSxHQUFHLElBQUk7RUFDakI7QUFDRixDQUFDO0FBRUQsTUFBTUUsZUFBZSxHQUFHQyxZQUFZLElBQUk7RUFDdEMsSUFBS0osa0JBQWtCLENBQUNLLG1CQUFtQixDQUFDQyxLQUFLLEtBQUssSUFBSSxFQUFHO0lBQzNETixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNFLEdBQUcsQ0FBRUgsWUFBYSxDQUFDO0lBQzFERixVQUFVLENBQUMsQ0FBQztFQUNkO0FBQ0YsQ0FBQztBQUNELE1BQU1NLGFBQWEsR0FBR0MsV0FBVyxJQUFJO0VBQ25DQyxPQUFPLENBQUNDLElBQUksQ0FBRSwyREFBMkQsR0FBR0YsV0FBWSxDQUFDO0VBQ3pGVCxrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNFLEdBQUcsQ0FBRVosZ0JBQWdCLENBQUNpQixZQUFZLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRWpCLGdCQUFnQixDQUFDa0IsVUFBVyxDQUFFLENBQUM7RUFDaEhYLFVBQVUsQ0FBQyxDQUFDO0FBQ2QsQ0FBQztBQUNELE1BQU1ZLGFBQWEsR0FBR25CLGdCQUFnQixDQUFDb0IsZUFBZSxDQUFFbEIsY0FBYyxDQUFDbUIsTUFBTSxFQUFFYixlQUFlLEVBQUVLLGFBQWMsQ0FBQztBQUMvRyxJQUFLTSxhQUFhLEVBQUc7RUFDbkJBLGFBQWEsQ0FDVkcsSUFBSSxDQUFFYixZQUFZLElBQUk7SUFDckIsSUFBS0osa0JBQWtCLENBQUNLLG1CQUFtQixDQUFDQyxLQUFLLEtBQUssSUFBSSxFQUFHO01BQzNETixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNFLEdBQUcsQ0FBRUgsWUFBYSxDQUFDO01BQzFERixVQUFVLENBQUMsQ0FBQztJQUNkO0VBQ0YsQ0FBRSxDQUFDLENBQ0ZnQixLQUFLLENBQUVDLENBQUMsSUFBSTtJQUNYVCxPQUFPLENBQUNDLElBQUksQ0FBRSxxREFBcUQsR0FBR1EsQ0FBRSxDQUFDO0lBQ3pFakIsVUFBVSxDQUFDLENBQUM7RUFDZCxDQUFFLENBQUM7QUFDUDtBQUNBLGVBQWVGLGtCQUFrQiJ9