// Copyright 2021-2023, University of Colorado Boulder

/**
 * @author John Blanco
 */

import Screen from '../../../joist/js/Screen.js';
import GreenhouseEffectColors from '../common/GreenhouseEffectColors.js';
import GreenhouseEffectConstants from '../common/GreenhouseEffectConstants.js';
import GreenhouseEffectIconFactory from '../common/view/GreenhouseEffectIconFactory.js';
import GreenhouseEffectKeyboardHelpContent from '../common/view/GreenhouseEffectKeyboardHelpContent.js';
import greenhouseEffect from '../greenhouseEffect.js';
import GreenhouseEffectStrings from '../GreenhouseEffectStrings.js';
import LayerModelModel from './model/LayerModelModel.js';
import LayerModelScreenView from './view/LayerModelScreenView.js';
class LayerModelScreen extends Screen {
  constructor(tandem) {
    const options = {
      backgroundColorProperty: GreenhouseEffectColors.screenBackgroundColorProperty,
      homeScreenIcon: GreenhouseEffectIconFactory.createLayerModelHomeScreenIcon(),
      maxDT: GreenhouseEffectConstants.MAX_DT,
      tandem: tandem,
      name: GreenhouseEffectStrings.screen.layerModelStringProperty,
      createKeyboardHelpNode: () => new GreenhouseEffectKeyboardHelpContent({
        includeFluxMeterHelp: true
      })
    };
    super(() => new LayerModelModel(tandem.createTandem('model')), model => new LayerModelScreenView(model, tandem.createTandem('view')), options);
  }
}
greenhouseEffect.register('LayerModelScreen', LayerModelScreen);
export default LayerModelScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJHcmVlbmhvdXNlRWZmZWN0Q29sb3JzIiwiR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cyIsIkdyZWVuaG91c2VFZmZlY3RJY29uRmFjdG9yeSIsIkdyZWVuaG91c2VFZmZlY3RLZXlib2FyZEhlbHBDb250ZW50IiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkdyZWVuaG91c2VFZmZlY3RTdHJpbmdzIiwiTGF5ZXJNb2RlbE1vZGVsIiwiTGF5ZXJNb2RlbFNjcmVlblZpZXciLCJMYXllck1vZGVsU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlTGF5ZXJNb2RlbEhvbWVTY3JlZW5JY29uIiwibWF4RFQiLCJNQVhfRFQiLCJuYW1lIiwic2NyZWVuIiwibGF5ZXJNb2RlbFN0cmluZ1Byb3BlcnR5IiwiY3JlYXRlS2V5Ym9hcmRIZWxwTm9kZSIsImluY2x1ZGVGbHV4TWV0ZXJIZWxwIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxheWVyTW9kZWxTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEdyZWVuaG91c2VFZmZlY3RDb2xvcnMgZnJvbSAnLi4vY29tbW9uL0dyZWVuaG91c2VFZmZlY3RDb2xvcnMuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cyBmcm9tICcuLi9jb21tb24vR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0SWNvbkZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL3ZpZXcvR3JlZW5ob3VzZUVmZmVjdEljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IEdyZWVuaG91c2VFZmZlY3RLZXlib2FyZEhlbHBDb250ZW50IGZyb20gJy4uL2NvbW1vbi92aWV3L0dyZWVuaG91c2VFZmZlY3RLZXlib2FyZEhlbHBDb250ZW50LmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncyBmcm9tICcuLi9HcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBMYXllck1vZGVsTW9kZWwgZnJvbSAnLi9tb2RlbC9MYXllck1vZGVsTW9kZWwuanMnO1xyXG5pbXBvcnQgTGF5ZXJNb2RlbFNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0xheWVyTW9kZWxTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIExheWVyTW9kZWxTY3JlZW4gZXh0ZW5kcyBTY3JlZW48TGF5ZXJNb2RlbE1vZGVsLCBMYXllck1vZGVsU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBHcmVlbmhvdXNlRWZmZWN0Q29sb3JzLnNjcmVlbkJhY2tncm91bmRDb2xvclByb3BlcnR5LFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogR3JlZW5ob3VzZUVmZmVjdEljb25GYWN0b3J5LmNyZWF0ZUxheWVyTW9kZWxIb21lU2NyZWVuSWNvbigpLFxyXG4gICAgICBtYXhEVDogR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cy5NQVhfRFQsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBuYW1lOiBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5zY3JlZW4ubGF5ZXJNb2RlbFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBjcmVhdGVLZXlib2FyZEhlbHBOb2RlOiAoKSA9PiBuZXcgR3JlZW5ob3VzZUVmZmVjdEtleWJvYXJkSGVscENvbnRlbnQoIHsgaW5jbHVkZUZsdXhNZXRlckhlbHA6IHRydWUgfSApXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgTGF5ZXJNb2RlbE1vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IExheWVyTW9kZWxTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdMYXllck1vZGVsU2NyZWVuJywgTGF5ZXJNb2RlbFNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBMYXllck1vZGVsU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSw2QkFBNkI7QUFFaEQsT0FBT0Msc0JBQXNCLE1BQU0scUNBQXFDO0FBQ3hFLE9BQU9DLHlCQUF5QixNQUFNLHdDQUF3QztBQUM5RSxPQUFPQywyQkFBMkIsTUFBTSwrQ0FBK0M7QUFDdkYsT0FBT0MsbUNBQW1DLE1BQU0sdURBQXVEO0FBQ3ZHLE9BQU9DLGdCQUFnQixNQUFNLHdCQUF3QjtBQUNyRCxPQUFPQyx1QkFBdUIsTUFBTSwrQkFBK0I7QUFDbkUsT0FBT0MsZUFBZSxNQUFNLDRCQUE0QjtBQUN4RCxPQUFPQyxvQkFBb0IsTUFBTSxnQ0FBZ0M7QUFFakUsTUFBTUMsZ0JBQWdCLFNBQVNULE1BQU0sQ0FBd0M7RUFFcEVVLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxPQUFPLEdBQUc7TUFDZEMsdUJBQXVCLEVBQUVaLHNCQUFzQixDQUFDYSw2QkFBNkI7TUFDN0VDLGNBQWMsRUFBRVosMkJBQTJCLENBQUNhLDhCQUE4QixDQUFDLENBQUM7TUFDNUVDLEtBQUssRUFBRWYseUJBQXlCLENBQUNnQixNQUFNO01BQ3ZDUCxNQUFNLEVBQUVBLE1BQU07TUFDZFEsSUFBSSxFQUFFYix1QkFBdUIsQ0FBQ2MsTUFBTSxDQUFDQyx3QkFBd0I7TUFDN0RDLHNCQUFzQixFQUFFQSxDQUFBLEtBQU0sSUFBSWxCLG1DQUFtQyxDQUFFO1FBQUVtQixvQkFBb0IsRUFBRTtNQUFLLENBQUU7SUFDeEcsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUloQixlQUFlLENBQUVJLE1BQU0sQ0FBQ2EsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQzNEQyxLQUFLLElBQUksSUFBSWpCLG9CQUFvQixDQUFFaUIsS0FBSyxFQUFFZCxNQUFNLENBQUNhLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUN6RVosT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCxnQkFBZ0IsQ0FBQ3FCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRWpCLGdCQUFpQixDQUFDO0FBQ2pFLGVBQWVBLGdCQUFnQiJ9