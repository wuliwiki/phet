// Copyright 2022, University of Colorado Boulder

/**
 * NumberOfLayersSoundPlayer is a sound generator that plays sounds that are intended to indicate the number of infrared
 * absorbing layers that are present in the model.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import SoundClip from '../../../../tambo/js/sound-generators/SoundClip.js';
import SoundGenerator from '../../../../tambo/js/sound-generators/SoundGenerator.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import oneAbsorbingLayer_mp3 from '../../../sounds/oneAbsorbingLayer_mp3.js';
import twoAbsorbingLayers_mp3 from '../../../sounds/twoAbsorbingLayers_mp3.js';
import threeAbsorbingLayers_mp3 from '../../../sounds/threeAbsorbingLayers_mp3.js';
class NumberOfLayersSoundPlayer extends SoundGenerator {
  // array of sound clips where the index corresponds to the number of layers

  // number of active layers

  constructor(numberOfLayersProperty, providedOptions) {
    super(providedOptions);
    this.numberOfLayersProperty = numberOfLayersProperty;
    this.layerSoundClips = [new SoundClip(oneAbsorbingLayer_mp3, {
      initialPlaybackRate: 0.5
    }), new SoundClip(oneAbsorbingLayer_mp3), new SoundClip(twoAbsorbingLayers_mp3), new SoundClip(threeAbsorbingLayers_mp3)];

    // Hook up the sounds to this sound generator's master gain node
    this.layerSoundClips.forEach(clip => {
      clip.connect(this.masterGainNode);
    });
  }

  /**
   * play the sound associated with the currently active number of layers
   */
  play() {
    const numberOfLayers = this.numberOfLayersProperty.value;
    assert && assert(numberOfLayers < this.layerSoundClips.length, `unexpected number of layers: ${numberOfLayers}`);
    this.layerSoundClips[numberOfLayers].play();
  }
  stop() {
    // Nothing to do in this case.
  }
}
greenhouseEffect.register('NumberOfLayersSoundPlayer', NumberOfLayersSoundPlayer);
export default NumberOfLayersSoundPlayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTb3VuZENsaXAiLCJTb3VuZEdlbmVyYXRvciIsImdyZWVuaG91c2VFZmZlY3QiLCJvbmVBYnNvcmJpbmdMYXllcl9tcDMiLCJ0d29BYnNvcmJpbmdMYXllcnNfbXAzIiwidGhyZWVBYnNvcmJpbmdMYXllcnNfbXAzIiwiTnVtYmVyT2ZMYXllcnNTb3VuZFBsYXllciIsImNvbnN0cnVjdG9yIiwibnVtYmVyT2ZMYXllcnNQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsImxheWVyU291bmRDbGlwcyIsImluaXRpYWxQbGF5YmFja1JhdGUiLCJmb3JFYWNoIiwiY2xpcCIsImNvbm5lY3QiLCJtYXN0ZXJHYWluTm9kZSIsInBsYXkiLCJudW1iZXJPZkxheWVycyIsInZhbHVlIiwiYXNzZXJ0IiwibGVuZ3RoIiwic3RvcCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVtYmVyT2ZMYXllcnNTb3VuZFBsYXllci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTnVtYmVyT2ZMYXllcnNTb3VuZFBsYXllciBpcyBhIHNvdW5kIGdlbmVyYXRvciB0aGF0IHBsYXlzIHNvdW5kcyB0aGF0IGFyZSBpbnRlbmRlZCB0byBpbmRpY2F0ZSB0aGUgbnVtYmVyIG9mIGluZnJhcmVkXHJcbiAqIGFic29yYmluZyBsYXllcnMgdGhhdCBhcmUgcHJlc2VudCBpbiB0aGUgbW9kZWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNvdW5kQ2xpcCBmcm9tICcuLi8uLi8uLi8uLi90YW1iby9qcy9zb3VuZC1nZW5lcmF0b3JzL1NvdW5kQ2xpcC5qcyc7XHJcbmltcG9ydCBTb3VuZEdlbmVyYXRvciwgeyBTb3VuZEdlbmVyYXRvck9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW1iby9qcy9zb3VuZC1nZW5lcmF0b3JzL1NvdW5kR2VuZXJhdG9yLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBvbmVBYnNvcmJpbmdMYXllcl9tcDMgZnJvbSAnLi4vLi4vLi4vc291bmRzL29uZUFic29yYmluZ0xheWVyX21wMy5qcyc7XHJcbmltcG9ydCB0d29BYnNvcmJpbmdMYXllcnNfbXAzIGZyb20gJy4uLy4uLy4uL3NvdW5kcy90d29BYnNvcmJpbmdMYXllcnNfbXAzLmpzJztcclxuaW1wb3J0IHRocmVlQWJzb3JiaW5nTGF5ZXJzX21wMyBmcm9tICcuLi8uLi8uLi9zb3VuZHMvdGhyZWVBYnNvcmJpbmdMYXllcnNfbXAzLmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFNvdW5kUGxheWVyIGZyb20gJy4uLy4uLy4uLy4uL3RhbWJvL2pzL1RTb3VuZFBsYXllci5qcyc7XHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBOdW1iZXJPZkxheWVyc1NvdW5kUGxheWVyT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU291bmRHZW5lcmF0b3JPcHRpb25zO1xyXG5cclxuY2xhc3MgTnVtYmVyT2ZMYXllcnNTb3VuZFBsYXllciBleHRlbmRzIFNvdW5kR2VuZXJhdG9yIGltcGxlbWVudHMgVFNvdW5kUGxheWVyIHtcclxuXHJcbiAgLy8gYXJyYXkgb2Ygc291bmQgY2xpcHMgd2hlcmUgdGhlIGluZGV4IGNvcnJlc3BvbmRzIHRvIHRoZSBudW1iZXIgb2YgbGF5ZXJzXHJcbiAgcHJpdmF0ZSByZWFkb25seSBsYXllclNvdW5kQ2xpcHM6IFNvdW5kQ2xpcFtdO1xyXG5cclxuICAvLyBudW1iZXIgb2YgYWN0aXZlIGxheWVyc1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbnVtYmVyT2ZMYXllcnNQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbnVtYmVyT2ZMYXllcnNQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucz86IE51bWJlck9mTGF5ZXJzU291bmRQbGF5ZXJPcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLm51bWJlck9mTGF5ZXJzUHJvcGVydHkgPSBudW1iZXJPZkxheWVyc1Byb3BlcnR5O1xyXG4gICAgdGhpcy5sYXllclNvdW5kQ2xpcHMgPSBbXHJcbiAgICAgIG5ldyBTb3VuZENsaXAoIG9uZUFic29yYmluZ0xheWVyX21wMywgeyBpbml0aWFsUGxheWJhY2tSYXRlOiAwLjUgfSApLFxyXG4gICAgICBuZXcgU291bmRDbGlwKCBvbmVBYnNvcmJpbmdMYXllcl9tcDMgKSxcclxuICAgICAgbmV3IFNvdW5kQ2xpcCggdHdvQWJzb3JiaW5nTGF5ZXJzX21wMyApLFxyXG4gICAgICBuZXcgU291bmRDbGlwKCB0aHJlZUFic29yYmluZ0xheWVyc19tcDMgKVxyXG4gICAgXTtcclxuXHJcbiAgICAvLyBIb29rIHVwIHRoZSBzb3VuZHMgdG8gdGhpcyBzb3VuZCBnZW5lcmF0b3IncyBtYXN0ZXIgZ2FpbiBub2RlXHJcbiAgICB0aGlzLmxheWVyU291bmRDbGlwcy5mb3JFYWNoKCBjbGlwID0+IHsgY2xpcC5jb25uZWN0KCB0aGlzLm1hc3RlckdhaW5Ob2RlICk7IH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHBsYXkgdGhlIHNvdW5kIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudGx5IGFjdGl2ZSBudW1iZXIgb2YgbGF5ZXJzXHJcbiAgICovXHJcbiAgcHVibGljIHBsYXkoKTogdm9pZCB7XHJcblxyXG4gICAgY29uc3QgbnVtYmVyT2ZMYXllcnMgPSB0aGlzLm51bWJlck9mTGF5ZXJzUHJvcGVydHkudmFsdWU7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbnVtYmVyT2ZMYXllcnMgPCB0aGlzLmxheWVyU291bmRDbGlwcy5sZW5ndGgsIGB1bmV4cGVjdGVkIG51bWJlciBvZiBsYXllcnM6ICR7bnVtYmVyT2ZMYXllcnN9YCApO1xyXG4gICAgdGhpcy5sYXllclNvdW5kQ2xpcHNbIG51bWJlck9mTGF5ZXJzIF0ucGxheSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0b3AoKTogdm9pZCB7XHJcbiAgICAvLyBOb3RoaW5nIHRvIGRvIGluIHRoaXMgY2FzZS5cclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdOdW1iZXJPZkxheWVyc1NvdW5kUGxheWVyJywgTnVtYmVyT2ZMYXllcnNTb3VuZFBsYXllciApO1xyXG5leHBvcnQgZGVmYXVsdCBOdW1iZXJPZkxheWVyc1NvdW5kUGxheWVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxvREFBb0Q7QUFDMUUsT0FBT0MsY0FBYyxNQUFpQyx5REFBeUQ7QUFDL0csT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHFCQUFxQixNQUFNLDBDQUEwQztBQUM1RSxPQUFPQyxzQkFBc0IsTUFBTSwyQ0FBMkM7QUFDOUUsT0FBT0Msd0JBQXdCLE1BQU0sNkNBQTZDO0FBUWxGLE1BQU1DLHlCQUF5QixTQUFTTCxjQUFjLENBQXlCO0VBRTdFOztFQUdBOztFQUdPTSxXQUFXQSxDQUFFQyxzQkFBc0MsRUFBRUMsZUFBa0QsRUFBRztJQUUvRyxLQUFLLENBQUVBLGVBQWdCLENBQUM7SUFFeEIsSUFBSSxDQUFDRCxzQkFBc0IsR0FBR0Esc0JBQXNCO0lBQ3BELElBQUksQ0FBQ0UsZUFBZSxHQUFHLENBQ3JCLElBQUlWLFNBQVMsQ0FBRUcscUJBQXFCLEVBQUU7TUFBRVEsbUJBQW1CLEVBQUU7SUFBSSxDQUFFLENBQUMsRUFDcEUsSUFBSVgsU0FBUyxDQUFFRyxxQkFBc0IsQ0FBQyxFQUN0QyxJQUFJSCxTQUFTLENBQUVJLHNCQUF1QixDQUFDLEVBQ3ZDLElBQUlKLFNBQVMsQ0FBRUssd0JBQXlCLENBQUMsQ0FDMUM7O0lBRUQ7SUFDQSxJQUFJLENBQUNLLGVBQWUsQ0FBQ0UsT0FBTyxDQUFFQyxJQUFJLElBQUk7TUFBRUEsSUFBSSxDQUFDQyxPQUFPLENBQUUsSUFBSSxDQUFDQyxjQUFlLENBQUM7SUFBRSxDQUFFLENBQUM7RUFDbEY7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLElBQUlBLENBQUEsRUFBUztJQUVsQixNQUFNQyxjQUFjLEdBQUcsSUFBSSxDQUFDVCxzQkFBc0IsQ0FBQ1UsS0FBSztJQUV4REMsTUFBTSxJQUFJQSxNQUFNLENBQUVGLGNBQWMsR0FBRyxJQUFJLENBQUNQLGVBQWUsQ0FBQ1UsTUFBTSxFQUFHLGdDQUErQkgsY0FBZSxFQUFFLENBQUM7SUFDbEgsSUFBSSxDQUFDUCxlQUFlLENBQUVPLGNBQWMsQ0FBRSxDQUFDRCxJQUFJLENBQUMsQ0FBQztFQUMvQztFQUVPSyxJQUFJQSxDQUFBLEVBQVM7SUFDbEI7RUFBQTtBQUVKO0FBRUFuQixnQkFBZ0IsQ0FBQ29CLFFBQVEsQ0FBRSwyQkFBMkIsRUFBRWhCLHlCQUEwQixDQUFDO0FBQ25GLGVBQWVBLHlCQUF5QiJ9