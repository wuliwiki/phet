// Copyright 2022, University of Colorado Boulder

/**
 * SurfaceAlbedoSoundPlayer is used to produce sounds for the slider that controls surface albedo.  It is sound clip
 * with delay lines used to produce a variable echo effect.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import SoundGenerator from '../../../../tambo/js/sound-generators/SoundGenerator.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import layerModelBaseSliderSound_mp3 from '../../../sounds/layerModelBaseSliderSound_mp3.js';
import SoundClip from '../../../../tambo/js/sound-generators/SoundClip.js';
import phetAudioContext from '../../../../tambo/js/phetAudioContext.js';
import emptyApartmentBedroom06Resampled_mp3 from '../../../../tambo/sounds/emptyApartmentBedroom06Resampled_mp3.js';

// types for options

class SurfaceAlbedoSoundPlayer extends SoundGenerator {
  // sound clip that will be played when activity occurs
  primarySoundClip = new SoundClip(layerModelBaseSliderSound_mp3);

  // sound clip played at min and max values
  boundarySoundClip = new SoundClip(layerModelBaseSliderSound_mp3, {
    initialPlaybackRate: 0.667
  });
  constructor(surfaceAlbedoProperty, surfaceAlbedoRange, providedOptions) {
    super(providedOptions);

    // Make the number property and its range available to the methods.
    this.surfaceAlbedoProperty = surfaceAlbedoProperty;
    this.surfaceAlbedoRange = surfaceAlbedoRange;

    // Hook up the primary and boundary sound clips to the output.
    this.primarySoundClip.connect(this.masterGainNode);
    this.boundarySoundClip.connect(this.masterGainNode);

    // Add a convolver that will act as a reverb effect.
    const convolver = phetAudioContext.createConvolver();
    convolver.buffer = emptyApartmentBedroom06Resampled_mp3.audioBufferProperty.value;

    // Add a gain node that will be used for the reverb level.
    const reverbGainNode = phetAudioContext.createGain();

    // Connect things up.
    this.primarySoundClip.connect(convolver);
    this.boundarySoundClip.connect(convolver);
    convolver.connect(reverbGainNode);
    reverbGainNode.connect(this.masterGainNode);

    // Adjust the reverb level as the albedo changes, making it so that more reverb occurs with the higher levels of
    // surface albedo.
    surfaceAlbedoProperty.link(surfaceAlbedo => {
      const normalizedSurfaceAlbedo = (surfaceAlbedo - surfaceAlbedoRange.min) / surfaceAlbedoRange.getLength();
      const gainMultiplier = 0.4; // empirically determined to get the desired sound.
      reverbGainNode.gain.setTargetAtTime(normalizedSurfaceAlbedo * gainMultiplier, phetAudioContext.currentTime, 0.015);
    });
  }
  play() {
    const surfaceAlbedo = this.surfaceAlbedoProperty.value;
    if (surfaceAlbedo > this.surfaceAlbedoRange.min && surfaceAlbedo < this.surfaceAlbedoRange.max) {
      this.primarySoundClip.play();
    } else {
      this.boundarySoundClip.play();
    }
  }
  stop() {
    this.primarySoundClip.stop();
    this.boundarySoundClip.stop();
  }
}
greenhouseEffect.register('SurfaceAlbedoSoundPlayer', SurfaceAlbedoSoundPlayer);
export default SurfaceAlbedoSoundPlayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,