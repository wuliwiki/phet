// Copyright 2022, University of Colorado Boulder

/**
 * ShowTemperatureCheckbox is a specialized checkbox with a thermometer icon and no label.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import ThermometerNode from '../../../../scenery-phet/js/ThermometerNode.js';
import { Color } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import greenhouseEffect from '../../greenhouseEffect.js';
class ShowTemperatureCheckbox extends Checkbox {
  constructor(property, providedOptions) {
    // Create a thermometer that can be used as an icon for the checkbox.
    const thermometerIcon = new ThermometerNode(new NumberProperty(3.5), 0, 10, {
      backgroundFill: Color.WHITE,
      bulbDiameter: 8,
      tubeWidth: 5,
      tubeHeight: 12,
      lineWidth: 1,
      tickSpacing: 3,
      majorTickLength: 3,
      minorTickLength: 1.5,
      glassThickness: 2
    });
    const options = optionize()({
      boxWidth: 15,
      // phet-io
      tandem: Tandem.REQUIRED
    }, providedOptions);
    super(property, thermometerIcon, options);
  }
}
greenhouseEffect.register('ShowTemperatureCheckbox', ShowTemperatureCheckbox);
export default ShowTemperatureCheckbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIm9wdGlvbml6ZSIsIlRoZXJtb21ldGVyTm9kZSIsIkNvbG9yIiwiQ2hlY2tib3giLCJUYW5kZW0iLCJncmVlbmhvdXNlRWZmZWN0IiwiU2hvd1RlbXBlcmF0dXJlQ2hlY2tib3giLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwidGhlcm1vbWV0ZXJJY29uIiwiYmFja2dyb3VuZEZpbGwiLCJXSElURSIsImJ1bGJEaWFtZXRlciIsInR1YmVXaWR0aCIsInR1YmVIZWlnaHQiLCJsaW5lV2lkdGgiLCJ0aWNrU3BhY2luZyIsIm1ham9yVGlja0xlbmd0aCIsIm1pbm9yVGlja0xlbmd0aCIsImdsYXNzVGhpY2tuZXNzIiwib3B0aW9ucyIsImJveFdpZHRoIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNob3dUZW1wZXJhdHVyZUNoZWNrYm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaG93VGVtcGVyYXR1cmVDaGVja2JveCBpcyBhIHNwZWNpYWxpemVkIGNoZWNrYm94IHdpdGggYSB0aGVybW9tZXRlciBpY29uIGFuZCBubyBsYWJlbC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBUaGVybW9tZXRlck5vZGUgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1RoZXJtb21ldGVyTm9kZS5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94LCB7IENoZWNrYm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbmV4cG9ydCB0eXBlIFNob3dUZW1wZXJhdHVyZUNoZWNrYm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgQ2hlY2tib3hPcHRpb25zO1xyXG5cclxuY2xhc3MgU2hvd1RlbXBlcmF0dXJlQ2hlY2tib3ggZXh0ZW5kcyBDaGVja2JveCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIHByb3ZpZGVkT3B0aW9ucz86IFNob3dUZW1wZXJhdHVyZUNoZWNrYm94T3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSB0aGVybW9tZXRlciB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIGljb24gZm9yIHRoZSBjaGVja2JveC5cclxuICAgIGNvbnN0IHRoZXJtb21ldGVySWNvbiA9IG5ldyBUaGVybW9tZXRlck5vZGUoIG5ldyBOdW1iZXJQcm9wZXJ0eSggMy41ICksIDAsIDEwLCB7XHJcbiAgICAgIGJhY2tncm91bmRGaWxsOiBDb2xvci5XSElURSxcclxuICAgICAgYnVsYkRpYW1ldGVyOiA4LFxyXG4gICAgICB0dWJlV2lkdGg6IDUsXHJcbiAgICAgIHR1YmVIZWlnaHQ6IDEyLFxyXG4gICAgICBsaW5lV2lkdGg6IDEsXHJcbiAgICAgIHRpY2tTcGFjaW5nOiAzLFxyXG4gICAgICBtYWpvclRpY2tMZW5ndGg6IDMsXHJcbiAgICAgIG1pbm9yVGlja0xlbmd0aDogMS41LFxyXG4gICAgICBnbGFzc1RoaWNrbmVzczogMlxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U2hvd1RlbXBlcmF0dXJlQ2hlY2tib3hPcHRpb25zLCBTZWxmT3B0aW9ucywgQ2hlY2tib3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICBib3hXaWR0aDogMTUsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVEXHJcblxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIHByb3BlcnR5LCB0aGVybW9tZXRlckljb24sIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdTaG93VGVtcGVyYXR1cmVDaGVja2JveCcsIFNob3dUZW1wZXJhdHVyZUNoZWNrYm94ICk7XHJcbmV4cG9ydCBkZWZhdWx0IFNob3dUZW1wZXJhdHVyZUNoZWNrYm94O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHVDQUF1QztBQUVsRSxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUNuRixPQUFPQyxlQUFlLE1BQU0sZ0RBQWdEO0FBQzVFLFNBQVNDLEtBQUssUUFBUSxtQ0FBbUM7QUFDekQsT0FBT0MsUUFBUSxNQUEyQixnQ0FBZ0M7QUFDMUUsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFLeEQsTUFBTUMsdUJBQXVCLFNBQVNILFFBQVEsQ0FBQztFQUN0Q0ksV0FBV0EsQ0FBRUMsUUFBMkIsRUFBRUMsZUFBZ0QsRUFBRztJQUVsRztJQUNBLE1BQU1DLGVBQWUsR0FBRyxJQUFJVCxlQUFlLENBQUUsSUFBSUYsY0FBYyxDQUFFLEdBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7TUFDN0VZLGNBQWMsRUFBRVQsS0FBSyxDQUFDVSxLQUFLO01BQzNCQyxZQUFZLEVBQUUsQ0FBQztNQUNmQyxTQUFTLEVBQUUsQ0FBQztNQUNaQyxVQUFVLEVBQUUsRUFBRTtNQUNkQyxTQUFTLEVBQUUsQ0FBQztNQUNaQyxXQUFXLEVBQUUsQ0FBQztNQUNkQyxlQUFlLEVBQUUsQ0FBQztNQUNsQkMsZUFBZSxFQUFFLEdBQUc7TUFDcEJDLGNBQWMsRUFBRTtJQUNsQixDQUFFLENBQUM7SUFFSCxNQUFNQyxPQUFPLEdBQUdyQixTQUFTLENBQStELENBQUMsQ0FBRTtNQUV6RnNCLFFBQVEsRUFBRSxFQUFFO01BRVo7TUFDQUMsTUFBTSxFQUFFbkIsTUFBTSxDQUFDb0I7SUFFakIsQ0FBQyxFQUFFZixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsUUFBUSxFQUFFRSxlQUFlLEVBQUVXLE9BQVEsQ0FBQztFQUM3QztBQUNGO0FBRUFoQixnQkFBZ0IsQ0FBQ29CLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRW5CLHVCQUF3QixDQUFDO0FBQy9FLGVBQWVBLHVCQUF1QiJ9