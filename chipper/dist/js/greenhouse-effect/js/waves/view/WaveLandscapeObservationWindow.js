// Copyright 2021-2022, University of Colorado Boulder

/**
 * WaveLandscapeObservationWindow adds the ability to depict electromagnetic waves to its parent class.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import greenhouseEffect from '../../greenhouseEffect.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import LandscapeObservationWindow from '../../common/view/LandscapeObservationWindow.js';
import WavesCanvasNode from './WavesCanvasNode.js';
import WaveLandscapeObservationWindowPDOMNode from '../../common/view/WaveLandscapeObservationWindowPDOMNode.js';
import optionize from '../../../../phet-core/js/optionize.js';
import GreenhouseEffectObservationWindow from '../../common/view/GreenhouseEffectObservationWindow.js';
class WaveLandscapeObservationWindow extends LandscapeObservationWindow {
  constructor(model, providedOptions) {
    const options = optionize()({
      tandem: Tandem.REQUIRED
    }, providedOptions);
    super(model, options);
    const wavesCanvasNode = new WavesCanvasNode(model, this.modelViewTransform, {
      canvasBounds: GreenhouseEffectObservationWindow.SIZE.toBounds(),
      tandem: options.tandem.createTandem('wavesCanvasNode')
    });
    this.presentationLayer.addChild(wavesCanvasNode);

    // Move the waves canvas to the back so that it is behind the haze.
    wavesCanvasNode.moveToBack();

    // Update the view when changes occur to the modelled waves.
    model.wavesChangedEmitter.addListener(() => {
      wavesCanvasNode.invalidatePaint();
    });

    // pdom - manages descriptions for the observation window
    const greenhouseEffectObservationWindowPDOMNode = new WaveLandscapeObservationWindowPDOMNode(model);
    this.addChild(greenhouseEffectObservationWindowPDOMNode);

    // pdom - order of contents in the PDOM for traversal and screen readers
    this.pdomOrder = [this.focusableHeadingNode, this.startSunlightButton, greenhouseEffectObservationWindowPDOMNode, this.energyBalancePanel];
  }
}
greenhouseEffect.register('WaveLandscapeObservationWindow', WaveLandscapeObservationWindow);
export default WaveLandscapeObservationWindow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJncmVlbmhvdXNlRWZmZWN0IiwiVGFuZGVtIiwiTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3ciLCJXYXZlc0NhbnZhc05vZGUiLCJXYXZlTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3dQRE9NTm9kZSIsIm9wdGlvbml6ZSIsIkdyZWVuaG91c2VFZmZlY3RPYnNlcnZhdGlvbldpbmRvdyIsIldhdmVMYW5kc2NhcGVPYnNlcnZhdGlvbldpbmRvdyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ3YXZlc0NhbnZhc05vZGUiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJjYW52YXNCb3VuZHMiLCJTSVpFIiwidG9Cb3VuZHMiLCJjcmVhdGVUYW5kZW0iLCJwcmVzZW50YXRpb25MYXllciIsImFkZENoaWxkIiwibW92ZVRvQmFjayIsIndhdmVzQ2hhbmdlZEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImludmFsaWRhdGVQYWludCIsImdyZWVuaG91c2VFZmZlY3RPYnNlcnZhdGlvbldpbmRvd1BET01Ob2RlIiwicGRvbU9yZGVyIiwiZm9jdXNhYmxlSGVhZGluZ05vZGUiLCJzdGFydFN1bmxpZ2h0QnV0dG9uIiwiZW5lcmd5QmFsYW5jZVBhbmVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYXZlTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV2F2ZUxhbmRzY2FwZU9ic2VydmF0aW9uV2luZG93IGFkZHMgdGhlIGFiaWxpdHkgdG8gZGVwaWN0IGVsZWN0cm9tYWduZXRpYyB3YXZlcyB0byBpdHMgcGFyZW50IGNsYXNzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3csIHsgTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3dPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3cuanMnO1xyXG5pbXBvcnQgV2F2ZXNDYW52YXNOb2RlIGZyb20gJy4vV2F2ZXNDYW52YXNOb2RlLmpzJztcclxuaW1wb3J0IFdhdmVzTW9kZWwgZnJvbSAnLi4vbW9kZWwvV2F2ZXNNb2RlbC5qcyc7XHJcbmltcG9ydCBXYXZlTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3dQRE9NTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9XYXZlTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3dQRE9NTm9kZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0T2JzZXJ2YXRpb25XaW5kb3cgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvR3JlZW5ob3VzZUVmZmVjdE9ic2VydmF0aW9uV2luZG93LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgdGFuZGVtPzogVGFuZGVtO1xyXG59O1xyXG50eXBlIFdhdmVMYW5kc2NhcGVPYnNlcnZhdGlvbldpbmRvd09wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIExhbmRzY2FwZU9ic2VydmF0aW9uV2luZG93T3B0aW9ucztcclxuXHJcbmNsYXNzIFdhdmVMYW5kc2NhcGVPYnNlcnZhdGlvbldpbmRvdyBleHRlbmRzIExhbmRzY2FwZU9ic2VydmF0aW9uV2luZG93IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbDogV2F2ZXNNb2RlbCwgcHJvdmlkZWRPcHRpb25zPzogV2F2ZUxhbmRzY2FwZU9ic2VydmF0aW9uV2luZG93T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFdhdmVMYW5kc2NhcGVPYnNlcnZhdGlvbldpbmRvd09wdGlvbnMsIFNlbGZPcHRpb25zLCBMYW5kc2NhcGVPYnNlcnZhdGlvbldpbmRvd09wdGlvbnM+KCkoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHdhdmVzQ2FudmFzTm9kZSA9IG5ldyBXYXZlc0NhbnZhc05vZGUoIG1vZGVsLCB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSwge1xyXG4gICAgICBjYW52YXNCb3VuZHM6IEdyZWVuaG91c2VFZmZlY3RPYnNlcnZhdGlvbldpbmRvdy5TSVpFLnRvQm91bmRzKCksXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnd2F2ZXNDYW52YXNOb2RlJyApXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLnByZXNlbnRhdGlvbkxheWVyLmFkZENoaWxkKCB3YXZlc0NhbnZhc05vZGUgKTtcclxuXHJcbiAgICAvLyBNb3ZlIHRoZSB3YXZlcyBjYW52YXMgdG8gdGhlIGJhY2sgc28gdGhhdCBpdCBpcyBiZWhpbmQgdGhlIGhhemUuXHJcbiAgICB3YXZlc0NhbnZhc05vZGUubW92ZVRvQmFjaygpO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgdmlldyB3aGVuIGNoYW5nZXMgb2NjdXIgdG8gdGhlIG1vZGVsbGVkIHdhdmVzLlxyXG4gICAgbW9kZWwud2F2ZXNDaGFuZ2VkRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICB3YXZlc0NhbnZhc05vZGUuaW52YWxpZGF0ZVBhaW50KCk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gcGRvbSAtIG1hbmFnZXMgZGVzY3JpcHRpb25zIGZvciB0aGUgb2JzZXJ2YXRpb24gd2luZG93XHJcbiAgICBjb25zdCBncmVlbmhvdXNlRWZmZWN0T2JzZXJ2YXRpb25XaW5kb3dQRE9NTm9kZSA9IG5ldyBXYXZlTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3dQRE9NTm9kZSggbW9kZWwgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGdyZWVuaG91c2VFZmZlY3RPYnNlcnZhdGlvbldpbmRvd1BET01Ob2RlICk7XHJcblxyXG4gICAgLy8gcGRvbSAtIG9yZGVyIG9mIGNvbnRlbnRzIGluIHRoZSBQRE9NIGZvciB0cmF2ZXJzYWwgYW5kIHNjcmVlbiByZWFkZXJzXHJcbiAgICB0aGlzLnBkb21PcmRlciA9IFsgdGhpcy5mb2N1c2FibGVIZWFkaW5nTm9kZSwgdGhpcy5zdGFydFN1bmxpZ2h0QnV0dG9uLCBncmVlbmhvdXNlRWZmZWN0T2JzZXJ2YXRpb25XaW5kb3dQRE9NTm9kZSwgdGhpcy5lbmVyZ3lCYWxhbmNlUGFuZWwgXTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdXYXZlTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3cnLCBXYXZlTGFuZHNjYXBlT2JzZXJ2YXRpb25XaW5kb3cgKTtcclxuZXhwb3J0IGRlZmF1bHQgV2F2ZUxhbmRzY2FwZU9ic2VydmF0aW9uV2luZG93OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQywwQkFBMEIsTUFBNkMsaURBQWlEO0FBQy9ILE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFbEQsT0FBT0Msc0NBQXNDLE1BQU0sNkRBQTZEO0FBQ2hILE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsaUNBQWlDLE1BQU0sd0RBQXdEO0FBT3RHLE1BQU1DLDhCQUE4QixTQUFTTCwwQkFBMEIsQ0FBQztFQUUvRE0sV0FBV0EsQ0FBRUMsS0FBaUIsRUFBRUMsZUFBdUQsRUFBRztJQUUvRixNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBd0YsQ0FBQyxDQUFFO01BQ2xITyxNQUFNLEVBQUVYLE1BQU0sQ0FBQ1k7SUFDakIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsS0FBSyxFQUFFRSxPQUFRLENBQUM7SUFFdkIsTUFBTUcsZUFBZSxHQUFHLElBQUlYLGVBQWUsQ0FBRU0sS0FBSyxFQUFFLElBQUksQ0FBQ00sa0JBQWtCLEVBQUU7TUFDM0VDLFlBQVksRUFBRVYsaUNBQWlDLENBQUNXLElBQUksQ0FBQ0MsUUFBUSxDQUFDLENBQUM7TUFDL0ROLE1BQU0sRUFBRUQsT0FBTyxDQUFDQyxNQUFNLENBQUNPLFlBQVksQ0FBRSxpQkFBa0I7SUFDekQsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0MsUUFBUSxDQUFFUCxlQUFnQixDQUFDOztJQUVsRDtJQUNBQSxlQUFlLENBQUNRLFVBQVUsQ0FBQyxDQUFDOztJQUU1QjtJQUNBYixLQUFLLENBQUNjLG1CQUFtQixDQUFDQyxXQUFXLENBQUUsTUFBTTtNQUMzQ1YsZUFBZSxDQUFDVyxlQUFlLENBQUMsQ0FBQztJQUNuQyxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyx5Q0FBeUMsR0FBRyxJQUFJdEIsc0NBQXNDLENBQUVLLEtBQU0sQ0FBQztJQUNyRyxJQUFJLENBQUNZLFFBQVEsQ0FBRUsseUNBQTBDLENBQUM7O0lBRTFEO0lBQ0EsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBRSxJQUFJLENBQUNDLG9CQUFvQixFQUFFLElBQUksQ0FBQ0MsbUJBQW1CLEVBQUVILHlDQUF5QyxFQUFFLElBQUksQ0FBQ0ksa0JBQWtCLENBQUU7RUFDOUk7QUFDRjtBQUVBOUIsZ0JBQWdCLENBQUMrQixRQUFRLENBQUUsZ0NBQWdDLEVBQUV4Qiw4QkFBK0IsQ0FBQztBQUM3RixlQUFlQSw4QkFBOEIifQ==