// Copyright 2022, University of Colorado Boulder

import IOType from '../../../../tandem/js/types/IOType.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import greenhouseEffect from '../../greenhouseEffect.js';

/**
 * WaveIntensityChange is a type that represents a change in a propagating wave's intensity at a point along a wave that
 * is modeled as a line.  The WaveIntensityChange defines the intensity of the wave after its position on the wave when
 * traversing from the starting point.  It contains no information about the intensity prior to its position on the
 * wave.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

class WaveIntensityChange {
  // the intensity after this change when moving outward from the starting point of the wave

  // the distance from the start of the wave where this intensity change exists

  // model object to which this change is "anchored", null indicates it is not anchored and thus should move with the wave

  /**
   * @param postChangeIntensity - wave intensity after this change
   * @param distanceFromStart - distance from the start of the wave, in meters
   * @param anchoredTo - a model object to which this change is anchored, which generally is the object causing it
   */
  constructor(postChangeIntensity, distanceFromStart, anchoredTo = null) {
    this.postChangeIntensity = postChangeIntensity;
    this.distanceFromStart = distanceFromStart;
    this.anchoredTo = anchoredTo;
  }

  /**
   * Print out the state as a string, useful for debugging.
   */
  toString() {
    return `{ postChangeIntensity: ${this.postChangeIntensity}, distanceFromStart: ${this.distanceFromStart}, anchoredTo: ${this.anchoredTo ? 'something' : 'nothing'}`;
  }

  // phet-io
  static WaveIntensityChangeIO = new IOType('WaveIntensityChangeIO', {
    valueType: WaveIntensityChange,
    stateSchema: {
      postChangeIntensity: NumberIO,
      distanceFromStart: NumberIO,
      anchoredTo: NullableIO(ReferenceIO(IOType.ObjectIO))
    },
    fromStateObject: stateObject => new WaveIntensityChange(stateObject.postChangeIntensity, stateObject.distanceFromStart)
  });
}

// for phet-io

greenhouseEffect.register('WaveIntensityChange', WaveIntensityChange);
export default WaveIntensityChange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJOdWxsYWJsZUlPIiwiTnVtYmVySU8iLCJSZWZlcmVuY2VJTyIsImdyZWVuaG91c2VFZmZlY3QiLCJXYXZlSW50ZW5zaXR5Q2hhbmdlIiwiY29uc3RydWN0b3IiLCJwb3N0Q2hhbmdlSW50ZW5zaXR5IiwiZGlzdGFuY2VGcm9tU3RhcnQiLCJhbmNob3JlZFRvIiwidG9TdHJpbmciLCJXYXZlSW50ZW5zaXR5Q2hhbmdlSU8iLCJ2YWx1ZVR5cGUiLCJzdGF0ZVNjaGVtYSIsIk9iamVjdElPIiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldhdmVJbnRlbnNpdHlDaGFuZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuaW1wb3J0IFBoZXRpb09iamVjdCBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bGxhYmxlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bGxhYmxlSU8uanMnO1xyXG5pbXBvcnQgTnVtYmVySU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bWJlcklPLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUlPLCB7IFJlZmVyZW5jZUlPU3RhdGUgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvUmVmZXJlbmNlSU8uanMnO1xyXG5pbXBvcnQgZ3JlZW5ob3VzZUVmZmVjdCBmcm9tICcuLi8uLi9ncmVlbmhvdXNlRWZmZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBXYXZlSW50ZW5zaXR5Q2hhbmdlIGlzIGEgdHlwZSB0aGF0IHJlcHJlc2VudHMgYSBjaGFuZ2UgaW4gYSBwcm9wYWdhdGluZyB3YXZlJ3MgaW50ZW5zaXR5IGF0IGEgcG9pbnQgYWxvbmcgYSB3YXZlIHRoYXRcclxuICogaXMgbW9kZWxlZCBhcyBhIGxpbmUuICBUaGUgV2F2ZUludGVuc2l0eUNoYW5nZSBkZWZpbmVzIHRoZSBpbnRlbnNpdHkgb2YgdGhlIHdhdmUgYWZ0ZXIgaXRzIHBvc2l0aW9uIG9uIHRoZSB3YXZlIHdoZW5cclxuICogdHJhdmVyc2luZyBmcm9tIHRoZSBzdGFydGluZyBwb2ludC4gIEl0IGNvbnRhaW5zIG5vIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbnRlbnNpdHkgcHJpb3IgdG8gaXRzIHBvc2l0aW9uIG9uIHRoZVxyXG4gKiB3YXZlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmNsYXNzIFdhdmVJbnRlbnNpdHlDaGFuZ2Uge1xyXG5cclxuICAvLyB0aGUgaW50ZW5zaXR5IGFmdGVyIHRoaXMgY2hhbmdlIHdoZW4gbW92aW5nIG91dHdhcmQgZnJvbSB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgdGhlIHdhdmVcclxuICBwdWJsaWMgcG9zdENoYW5nZUludGVuc2l0eTogbnVtYmVyO1xyXG5cclxuICAvLyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHdhdmUgd2hlcmUgdGhpcyBpbnRlbnNpdHkgY2hhbmdlIGV4aXN0c1xyXG4gIHB1YmxpYyBkaXN0YW5jZUZyb21TdGFydDogbnVtYmVyO1xyXG5cclxuICAvLyBtb2RlbCBvYmplY3QgdG8gd2hpY2ggdGhpcyBjaGFuZ2UgaXMgXCJhbmNob3JlZFwiLCBudWxsIGluZGljYXRlcyBpdCBpcyBub3QgYW5jaG9yZWQgYW5kIHRodXMgc2hvdWxkIG1vdmUgd2l0aCB0aGUgd2F2ZVxyXG4gIHB1YmxpYyBhbmNob3JlZFRvOiBudWxsIHwgUGhldGlvT2JqZWN0O1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcG9zdENoYW5nZUludGVuc2l0eSAtIHdhdmUgaW50ZW5zaXR5IGFmdGVyIHRoaXMgY2hhbmdlXHJcbiAgICogQHBhcmFtIGRpc3RhbmNlRnJvbVN0YXJ0IC0gZGlzdGFuY2UgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHdhdmUsIGluIG1ldGVyc1xyXG4gICAqIEBwYXJhbSBhbmNob3JlZFRvIC0gYSBtb2RlbCBvYmplY3QgdG8gd2hpY2ggdGhpcyBjaGFuZ2UgaXMgYW5jaG9yZWQsIHdoaWNoIGdlbmVyYWxseSBpcyB0aGUgb2JqZWN0IGNhdXNpbmcgaXRcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHBvc3RDaGFuZ2VJbnRlbnNpdHk6IG51bWJlciwgZGlzdGFuY2VGcm9tU3RhcnQ6IG51bWJlciwgYW5jaG9yZWRUbzogbnVsbCB8IFBoZXRpb09iamVjdCA9IG51bGwgKSB7XHJcbiAgICB0aGlzLnBvc3RDaGFuZ2VJbnRlbnNpdHkgPSBwb3N0Q2hhbmdlSW50ZW5zaXR5O1xyXG4gICAgdGhpcy5kaXN0YW5jZUZyb21TdGFydCA9IGRpc3RhbmNlRnJvbVN0YXJ0O1xyXG4gICAgdGhpcy5hbmNob3JlZFRvID0gYW5jaG9yZWRUbztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByaW50IG91dCB0aGUgc3RhdGUgYXMgYSBzdHJpbmcsIHVzZWZ1bCBmb3IgZGVidWdnaW5nLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGB7IHBvc3RDaGFuZ2VJbnRlbnNpdHk6ICR7dGhpcy5wb3N0Q2hhbmdlSW50ZW5zaXR5fSwgZGlzdGFuY2VGcm9tU3RhcnQ6ICR7dGhpcy5kaXN0YW5jZUZyb21TdGFydH0sIGFuY2hvcmVkVG86ICR7dGhpcy5hbmNob3JlZFRvID8gJ3NvbWV0aGluZycgOiAnbm90aGluZyd9YDtcclxuICB9XHJcblxyXG4gIC8vIHBoZXQtaW9cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFdhdmVJbnRlbnNpdHlDaGFuZ2VJTyA9IG5ldyBJT1R5cGUoICdXYXZlSW50ZW5zaXR5Q2hhbmdlSU8nLCB7XHJcbiAgICB2YWx1ZVR5cGU6IFdhdmVJbnRlbnNpdHlDaGFuZ2UsXHJcbiAgICBzdGF0ZVNjaGVtYToge1xyXG4gICAgICBwb3N0Q2hhbmdlSW50ZW5zaXR5OiBOdW1iZXJJTyxcclxuICAgICAgZGlzdGFuY2VGcm9tU3RhcnQ6IE51bWJlcklPLFxyXG4gICAgICBhbmNob3JlZFRvOiBOdWxsYWJsZUlPKCBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPICkgKVxyXG4gICAgfSxcclxuICAgIGZyb21TdGF0ZU9iamVjdDogKCBzdGF0ZU9iamVjdDogV2F2ZUludGVuc2l0eUNoYW5nZVN0YXRlT2JqZWN0ICkgPT4gbmV3IFdhdmVJbnRlbnNpdHlDaGFuZ2UoXHJcbiAgICAgIHN0YXRlT2JqZWN0LnBvc3RDaGFuZ2VJbnRlbnNpdHksXHJcbiAgICAgIHN0YXRlT2JqZWN0LmRpc3RhbmNlRnJvbVN0YXJ0XHJcbiAgICApXHJcbiAgfSApO1xyXG59XHJcblxyXG4vLyBmb3IgcGhldC1pb1xyXG5leHBvcnQgdHlwZSBXYXZlSW50ZW5zaXR5Q2hhbmdlU3RhdGVPYmplY3QgPSB7XHJcbiAgcG9zdENoYW5nZUludGVuc2l0eTogbnVtYmVyO1xyXG4gIGRpc3RhbmNlRnJvbVN0YXJ0OiBudW1iZXI7XHJcbiAgYW5jaG9yZWRUbzogbnVsbCB8IFJlZmVyZW5jZUlPU3RhdGU7XHJcbn07XHJcblxyXG5ncmVlbmhvdXNlRWZmZWN0LnJlZ2lzdGVyKCAnV2F2ZUludGVuc2l0eUNoYW5nZScsIFdhdmVJbnRlbnNpdHlDaGFuZ2UgKTtcclxuZXhwb3J0IGRlZmF1bHQgV2F2ZUludGVuc2l0eUNoYW5nZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUdBLE9BQU9BLE1BQU0sTUFBTSx1Q0FBdUM7QUFDMUQsT0FBT0MsVUFBVSxNQUFNLDJDQUEyQztBQUNsRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLFdBQVcsTUFBNEIsNENBQTRDO0FBQzFGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQyxtQkFBbUIsQ0FBQztFQUV4Qjs7RUFHQTs7RUFHQTs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLG1CQUEyQixFQUFFQyxpQkFBeUIsRUFBRUMsVUFBK0IsR0FBRyxJQUFJLEVBQUc7SUFDbkgsSUFBSSxDQUFDRixtQkFBbUIsR0FBR0EsbUJBQW1CO0lBQzlDLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUdBLGlCQUFpQjtJQUMxQyxJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTtFQUM5Qjs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsUUFBUUEsQ0FBQSxFQUFXO0lBQ3hCLE9BQVEsMEJBQXlCLElBQUksQ0FBQ0gsbUJBQW9CLHdCQUF1QixJQUFJLENBQUNDLGlCQUFrQixpQkFBZ0IsSUFBSSxDQUFDQyxVQUFVLEdBQUcsV0FBVyxHQUFHLFNBQVUsRUFBQztFQUNySzs7RUFFQTtFQUNBLE9BQXVCRSxxQkFBcUIsR0FBRyxJQUFJWCxNQUFNLENBQUUsdUJBQXVCLEVBQUU7SUFDbEZZLFNBQVMsRUFBRVAsbUJBQW1CO0lBQzlCUSxXQUFXLEVBQUU7TUFDWE4sbUJBQW1CLEVBQUVMLFFBQVE7TUFDN0JNLGlCQUFpQixFQUFFTixRQUFRO01BQzNCTyxVQUFVLEVBQUVSLFVBQVUsQ0FBRUUsV0FBVyxDQUFFSCxNQUFNLENBQUNjLFFBQVMsQ0FBRTtJQUN6RCxDQUFDO0lBQ0RDLGVBQWUsRUFBSUMsV0FBMkMsSUFBTSxJQUFJWCxtQkFBbUIsQ0FDekZXLFdBQVcsQ0FBQ1QsbUJBQW1CLEVBQy9CUyxXQUFXLENBQUNSLGlCQUNkO0VBQ0YsQ0FBRSxDQUFDO0FBQ0w7O0FBRUE7O0FBT0FKLGdCQUFnQixDQUFDYSxRQUFRLENBQUUscUJBQXFCLEVBQUVaLG1CQUFvQixDQUFDO0FBQ3ZFLGVBQWVBLG1CQUFtQiJ9