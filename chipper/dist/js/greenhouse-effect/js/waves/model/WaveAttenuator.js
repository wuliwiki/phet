// Copyright 2021-2022, University of Colorado Boulder

import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import greenhouseEffect from '../../greenhouseEffect.js';

/**
 * WaveAttenuator is a simple class that is used to keep track of points along a wave where attenuation (reduction in
 * intensity) exist.  These are generally caused by something splitting off some portion of the energy earlier in the
 * wave's propagation, such as a cloud or a part of the atmosphere.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

class WaveAttenuator {
  // Amount of attenuation.  This is a normalized value from 0 to 1 where 0 means no attenuation (i.e. the wave's
  // intensity will remain unchanged when passing through it) and 1 means 100% attenuation (a wave passing through will
  // have its intensity reduced to zero).

  // the distance from the start of the wave where this attenuator exists

  /**
   * @param initialAttenuation - amount of attenuation at construction, may be changed later
   * @param distanceFromStart - distance from the start of the wave, in meters
   */
  constructor(initialAttenuation, distanceFromStart) {
    this.attenuation = initialAttenuation;
    this.distanceFromStart = distanceFromStart;
  }

  /**
   * Serializes this WaveAttenuator instance.
   */
  toStateObject() {
    return {
      attenuation: this.attenuation,
      distanceFromStart: this.distanceFromStart
    };
  }

  // phet-io
  static WaveAttenuatorIO = new IOType('WaveAttenuatorIO', {
    valueType: WaveAttenuator,
    stateSchema: {
      attenuation: NumberIO,
      distanceFromStart: NumberIO
    },
    toStateObject: waveAttenuator => waveAttenuator.toStateObject(),
    fromStateObject: stateObject => new WaveAttenuator(stateObject.attenuation, stateObject.distanceFromStart)
  });
}
greenhouseEffect.register('WaveAttenuator', WaveAttenuator);
export default WaveAttenuator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJOdW1iZXJJTyIsImdyZWVuaG91c2VFZmZlY3QiLCJXYXZlQXR0ZW51YXRvciIsImNvbnN0cnVjdG9yIiwiaW5pdGlhbEF0dGVudWF0aW9uIiwiZGlzdGFuY2VGcm9tU3RhcnQiLCJhdHRlbnVhdGlvbiIsInRvU3RhdGVPYmplY3QiLCJXYXZlQXR0ZW51YXRvcklPIiwidmFsdWVUeXBlIiwic3RhdGVTY2hlbWEiLCJ3YXZlQXR0ZW51YXRvciIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYXZlQXR0ZW51YXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBOdW1iZXJJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvTnVtYmVySU8uanMnO1xyXG5pbXBvcnQgZ3JlZW5ob3VzZUVmZmVjdCBmcm9tICcuLi8uLi9ncmVlbmhvdXNlRWZmZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBXYXZlQXR0ZW51YXRvciBpcyBhIHNpbXBsZSBjbGFzcyB0aGF0IGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBwb2ludHMgYWxvbmcgYSB3YXZlIHdoZXJlIGF0dGVudWF0aW9uIChyZWR1Y3Rpb24gaW5cclxuICogaW50ZW5zaXR5KSBleGlzdC4gIFRoZXNlIGFyZSBnZW5lcmFsbHkgY2F1c2VkIGJ5IHNvbWV0aGluZyBzcGxpdHRpbmcgb2ZmIHNvbWUgcG9ydGlvbiBvZiB0aGUgZW5lcmd5IGVhcmxpZXIgaW4gdGhlXHJcbiAqIHdhdmUncyBwcm9wYWdhdGlvbiwgc3VjaCBhcyBhIGNsb3VkIG9yIGEgcGFydCBvZiB0aGUgYXRtb3NwaGVyZS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5jbGFzcyBXYXZlQXR0ZW51YXRvciB7XHJcblxyXG4gIC8vIEFtb3VudCBvZiBhdHRlbnVhdGlvbi4gIFRoaXMgaXMgYSBub3JtYWxpemVkIHZhbHVlIGZyb20gMCB0byAxIHdoZXJlIDAgbWVhbnMgbm8gYXR0ZW51YXRpb24gKGkuZS4gdGhlIHdhdmUnc1xyXG4gIC8vIGludGVuc2l0eSB3aWxsIHJlbWFpbiB1bmNoYW5nZWQgd2hlbiBwYXNzaW5nIHRocm91Z2ggaXQpIGFuZCAxIG1lYW5zIDEwMCUgYXR0ZW51YXRpb24gKGEgd2F2ZSBwYXNzaW5nIHRocm91Z2ggd2lsbFxyXG4gIC8vIGhhdmUgaXRzIGludGVuc2l0eSByZWR1Y2VkIHRvIHplcm8pLlxyXG4gIHB1YmxpYyBhdHRlbnVhdGlvbjogbnVtYmVyO1xyXG5cclxuICAvLyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHdhdmUgd2hlcmUgdGhpcyBhdHRlbnVhdG9yIGV4aXN0c1xyXG4gIHB1YmxpYyBkaXN0YW5jZUZyb21TdGFydDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gaW5pdGlhbEF0dGVudWF0aW9uIC0gYW1vdW50IG9mIGF0dGVudWF0aW9uIGF0IGNvbnN0cnVjdGlvbiwgbWF5IGJlIGNoYW5nZWQgbGF0ZXJcclxuICAgKiBAcGFyYW0gZGlzdGFuY2VGcm9tU3RhcnQgLSBkaXN0YW5jZSBmcm9tIHRoZSBzdGFydCBvZiB0aGUgd2F2ZSwgaW4gbWV0ZXJzXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBpbml0aWFsQXR0ZW51YXRpb246IG51bWJlciwgZGlzdGFuY2VGcm9tU3RhcnQ6IG51bWJlciApIHtcclxuICAgIHRoaXMuYXR0ZW51YXRpb24gPSBpbml0aWFsQXR0ZW51YXRpb247XHJcbiAgICB0aGlzLmRpc3RhbmNlRnJvbVN0YXJ0ID0gZGlzdGFuY2VGcm9tU3RhcnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXJpYWxpemVzIHRoaXMgV2F2ZUF0dGVudWF0b3IgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgcHVibGljIHRvU3RhdGVPYmplY3QoKTogV2F2ZUF0dGVudWF0b3JTdGF0ZU9iamVjdCB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhdHRlbnVhdGlvbjogdGhpcy5hdHRlbnVhdGlvbixcclxuICAgICAgZGlzdGFuY2VGcm9tU3RhcnQ6IHRoaXMuZGlzdGFuY2VGcm9tU3RhcnRcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBwaGV0LWlvXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBXYXZlQXR0ZW51YXRvcklPID0gbmV3IElPVHlwZSggJ1dhdmVBdHRlbnVhdG9ySU8nLCB7XHJcbiAgICB2YWx1ZVR5cGU6IFdhdmVBdHRlbnVhdG9yLFxyXG4gICAgc3RhdGVTY2hlbWE6IHtcclxuICAgICAgYXR0ZW51YXRpb246IE51bWJlcklPLFxyXG4gICAgICBkaXN0YW5jZUZyb21TdGFydDogTnVtYmVySU9cclxuICAgIH0sXHJcbiAgICB0b1N0YXRlT2JqZWN0OiAoIHdhdmVBdHRlbnVhdG9yOiBXYXZlQXR0ZW51YXRvciApID0+IHdhdmVBdHRlbnVhdG9yLnRvU3RhdGVPYmplY3QoKSxcclxuICAgIGZyb21TdGF0ZU9iamVjdDogKCBzdGF0ZU9iamVjdDogV2F2ZUF0dGVudWF0b3JTdGF0ZU9iamVjdCApID0+IG5ldyBXYXZlQXR0ZW51YXRvcihcclxuICAgICAgc3RhdGVPYmplY3QuYXR0ZW51YXRpb24sXHJcbiAgICAgIHN0YXRlT2JqZWN0LmRpc3RhbmNlRnJvbVN0YXJ0XHJcbiAgICApXHJcbiAgfSApO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBXYXZlQXR0ZW51YXRvclN0YXRlT2JqZWN0ID0ge1xyXG4gIGF0dGVudWF0aW9uOiBudW1iZXI7XHJcbiAgZGlzdGFuY2VGcm9tU3RhcnQ6IG51bWJlcjtcclxufTtcclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdXYXZlQXR0ZW51YXRvcicsIFdhdmVBdHRlbnVhdG9yICk7XHJcbmV4cG9ydCBkZWZhdWx0IFdhdmVBdHRlbnVhdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLHVDQUF1QztBQUMxRCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUMsY0FBYyxDQUFDO0VBRW5CO0VBQ0E7RUFDQTs7RUFHQTs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtFQUNTQyxXQUFXQSxDQUFFQyxrQkFBMEIsRUFBRUMsaUJBQXlCLEVBQUc7SUFDMUUsSUFBSSxDQUFDQyxXQUFXLEdBQUdGLGtCQUFrQjtJQUNyQyxJQUFJLENBQUNDLGlCQUFpQixHQUFHQSxpQkFBaUI7RUFDNUM7O0VBRUE7QUFDRjtBQUNBO0VBQ1NFLGFBQWFBLENBQUEsRUFBOEI7SUFDaEQsT0FBTztNQUNMRCxXQUFXLEVBQUUsSUFBSSxDQUFDQSxXQUFXO01BQzdCRCxpQkFBaUIsRUFBRSxJQUFJLENBQUNBO0lBQzFCLENBQUM7RUFDSDs7RUFFQTtFQUNBLE9BQXVCRyxnQkFBZ0IsR0FBRyxJQUFJVCxNQUFNLENBQUUsa0JBQWtCLEVBQUU7SUFDeEVVLFNBQVMsRUFBRVAsY0FBYztJQUN6QlEsV0FBVyxFQUFFO01BQ1hKLFdBQVcsRUFBRU4sUUFBUTtNQUNyQkssaUJBQWlCLEVBQUVMO0lBQ3JCLENBQUM7SUFDRE8sYUFBYSxFQUFJSSxjQUE4QixJQUFNQSxjQUFjLENBQUNKLGFBQWEsQ0FBQyxDQUFDO0lBQ25GSyxlQUFlLEVBQUlDLFdBQXNDLElBQU0sSUFBSVgsY0FBYyxDQUMvRVcsV0FBVyxDQUFDUCxXQUFXLEVBQ3ZCTyxXQUFXLENBQUNSLGlCQUNkO0VBQ0YsQ0FBRSxDQUFDO0FBQ0w7QUFPQUosZ0JBQWdCLENBQUNhLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRVosY0FBZSxDQUFDO0FBQzdELGVBQWVBLGNBQWMifQ==