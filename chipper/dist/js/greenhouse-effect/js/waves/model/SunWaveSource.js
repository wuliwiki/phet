// Copyright 2021-2023, University of Colorado Boulder

/**
 * SunWaveSource acts as a source of the modeled electromagnetic (EM) waves produced by the sun.
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import GreenhouseEffectConstants from '../../common/GreenhouseEffectConstants.js';
import LayersModel from '../../common/model/LayersModel.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import EMWaveSource from '../../waves/model/EMWaveSource.js';
import WaveSourceSpec from './WaveSourceSpec.js';
class SunWaveSource extends EMWaveSource {
  constructor(wavesInModel, waveProductionEnabledProperty, waveStartAltitude, waveEndAltitude, providedOptions) {
    const options = optionize()({
      // The sun generally just shines with a fixed intensity.
      waveIntensityProperty: new NumberProperty(0.5)
    }, providedOptions);
    super(wavesInModel, waveProductionEnabledProperty, GreenhouseEffectConstants.VISIBLE_WAVELENGTH, waveStartAltitude, waveEndAltitude, [
    // leftmost wave
    new WaveSourceSpec(-LayersModel.SUNLIGHT_SPAN.width * 0.15, GreenhouseEffectConstants.STRAIGHT_DOWN_NORMALIZED_VECTOR),
    // rightmost wave
    new WaveSourceSpec(LayersModel.SUNLIGHT_SPAN.width * 0.20, GreenhouseEffectConstants.STRAIGHT_DOWN_NORMALIZED_VECTOR)], options);
  }
}
greenhouseEffect.register('SunWaveSource', SunWaveSource);
export default SunWaveSource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIm9wdGlvbml6ZSIsIkdyZWVuaG91c2VFZmZlY3RDb25zdGFudHMiLCJMYXllcnNNb2RlbCIsImdyZWVuaG91c2VFZmZlY3QiLCJFTVdhdmVTb3VyY2UiLCJXYXZlU291cmNlU3BlYyIsIlN1bldhdmVTb3VyY2UiLCJjb25zdHJ1Y3RvciIsIndhdmVzSW5Nb2RlbCIsIndhdmVQcm9kdWN0aW9uRW5hYmxlZFByb3BlcnR5Iiwid2F2ZVN0YXJ0QWx0aXR1ZGUiLCJ3YXZlRW5kQWx0aXR1ZGUiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwid2F2ZUludGVuc2l0eVByb3BlcnR5IiwiVklTSUJMRV9XQVZFTEVOR1RIIiwiU1VOTElHSFRfU1BBTiIsIndpZHRoIiwiU1RSQUlHSFRfRE9XTl9OT1JNQUxJWkVEX1ZFQ1RPUiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3VuV2F2ZVNvdXJjZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTdW5XYXZlU291cmNlIGFjdHMgYXMgYSBzb3VyY2Ugb2YgdGhlIG1vZGVsZWQgZWxlY3Ryb21hZ25ldGljIChFTSkgd2F2ZXMgcHJvZHVjZWQgYnkgdGhlIHN1bi5cclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaGV0aW9Hcm91cCBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvR3JvdXAuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBMYXllcnNNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvTGF5ZXJzTW9kZWwuanMnO1xyXG5pbXBvcnQgZ3JlZW5ob3VzZUVmZmVjdCBmcm9tICcuLi8uLi9ncmVlbmhvdXNlRWZmZWN0LmpzJztcclxuaW1wb3J0IEVNV2F2ZVNvdXJjZSwgeyBFTVdhdmVTb3VyY2VPcHRpb25zIH0gZnJvbSAnLi4vLi4vd2F2ZXMvbW9kZWwvRU1XYXZlU291cmNlLmpzJztcclxuaW1wb3J0IFdhdmUsIHsgV2F2ZUNyZWF0b3JBcmd1bWVudHMgfSBmcm9tICcuL1dhdmUuanMnO1xyXG5pbXBvcnQgV2F2ZVNvdXJjZVNwZWMgZnJvbSAnLi9XYXZlU291cmNlU3BlYy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuZXhwb3J0IHR5cGUgU3VuV2F2ZVNvdXJjZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIEVNV2F2ZVNvdXJjZU9wdGlvbnM7XHJcblxyXG5jbGFzcyBTdW5XYXZlU291cmNlIGV4dGVuZHMgRU1XYXZlU291cmNlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB3YXZlc0luTW9kZWw6IFBoZXRpb0dyb3VwPFdhdmUsIFdhdmVDcmVhdG9yQXJndW1lbnRzPixcclxuICAgICAgICAgICAgICAgICAgICAgIHdhdmVQcm9kdWN0aW9uRW5hYmxlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIHdhdmVTdGFydEFsdGl0dWRlOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICB3YXZlRW5kQWx0aXR1ZGU6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IFN1bldhdmVTb3VyY2VPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U3VuV2F2ZVNvdXJjZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBFTVdhdmVTb3VyY2VPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBUaGUgc3VuIGdlbmVyYWxseSBqdXN0IHNoaW5lcyB3aXRoIGEgZml4ZWQgaW50ZW5zaXR5LlxyXG4gICAgICB3YXZlSW50ZW5zaXR5UHJvcGVydHk6IG5ldyBOdW1iZXJQcm9wZXJ0eSggMC41IClcclxuXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgd2F2ZXNJbk1vZGVsLFxyXG4gICAgICB3YXZlUHJvZHVjdGlvbkVuYWJsZWRQcm9wZXJ0eSxcclxuICAgICAgR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cy5WSVNJQkxFX1dBVkVMRU5HVEgsXHJcbiAgICAgIHdhdmVTdGFydEFsdGl0dWRlLFxyXG4gICAgICB3YXZlRW5kQWx0aXR1ZGUsXHJcbiAgICAgIFtcclxuXHJcbiAgICAgICAgLy8gbGVmdG1vc3Qgd2F2ZVxyXG4gICAgICAgIG5ldyBXYXZlU291cmNlU3BlYyhcclxuICAgICAgICAgIC1MYXllcnNNb2RlbC5TVU5MSUdIVF9TUEFOLndpZHRoICogMC4xNSxcclxuICAgICAgICAgIEdyZWVuaG91c2VFZmZlY3RDb25zdGFudHMuU1RSQUlHSFRfRE9XTl9OT1JNQUxJWkVEX1ZFQ1RPUlxyXG4gICAgICAgICksXHJcblxyXG4gICAgICAgIC8vIHJpZ2h0bW9zdCB3YXZlXHJcbiAgICAgICAgbmV3IFdhdmVTb3VyY2VTcGVjKFxyXG4gICAgICAgICAgTGF5ZXJzTW9kZWwuU1VOTElHSFRfU1BBTi53aWR0aCAqIDAuMjAsXHJcbiAgICAgICAgICBHcmVlbmhvdXNlRWZmZWN0Q29uc3RhbnRzLlNUUkFJR0hUX0RPV05fTk9STUFMSVpFRF9WRUNUT1JcclxuICAgICAgICApXHJcbiAgICAgIF0sXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmVlbmhvdXNlRWZmZWN0LnJlZ2lzdGVyKCAnU3VuV2F2ZVNvdXJjZScsIFN1bldhdmVTb3VyY2UgKTtcclxuZXhwb3J0IGRlZmF1bHQgU3VuV2F2ZVNvdXJjZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FBRWxFLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQztBQUNqRixPQUFPQyxXQUFXLE1BQU0sbUNBQW1DO0FBQzNELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxZQUFZLE1BQStCLG1DQUFtQztBQUVyRixPQUFPQyxjQUFjLE1BQU0scUJBQXFCO0FBS2hELE1BQU1DLGFBQWEsU0FBU0YsWUFBWSxDQUFDO0VBRWhDRyxXQUFXQSxDQUFFQyxZQUFxRCxFQUNyREMsNkJBQWdELEVBQ2hEQyxpQkFBeUIsRUFDekJDLGVBQXVCLEVBQ3ZCQyxlQUFzQyxFQUFHO0lBRTNELE1BQU1DLE9BQU8sR0FBR2IsU0FBUyxDQUF5RCxDQUFDLENBQUU7TUFFbkY7TUFDQWMscUJBQXFCLEVBQUUsSUFBSWYsY0FBYyxDQUFFLEdBQUk7SUFFakQsQ0FBQyxFQUFFYSxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FDSEosWUFBWSxFQUNaQyw2QkFBNkIsRUFDN0JSLHlCQUF5QixDQUFDYyxrQkFBa0IsRUFDNUNMLGlCQUFpQixFQUNqQkMsZUFBZSxFQUNmO0lBRUU7SUFDQSxJQUFJTixjQUFjLENBQ2hCLENBQUNILFdBQVcsQ0FBQ2MsYUFBYSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxFQUN2Q2hCLHlCQUF5QixDQUFDaUIsK0JBQzVCLENBQUM7SUFFRDtJQUNBLElBQUliLGNBQWMsQ0FDaEJILFdBQVcsQ0FBQ2MsYUFBYSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxFQUN0Q2hCLHlCQUF5QixDQUFDaUIsK0JBQzVCLENBQUMsQ0FDRixFQUNETCxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFWLGdCQUFnQixDQUFDZ0IsUUFBUSxDQUFFLGVBQWUsRUFBRWIsYUFBYyxDQUFDO0FBQzNELGVBQWVBLGFBQWEifQ==