// Copyright 2020-2023, University of Colorado Boulder

/**
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Screen from '../../../joist/js/Screen.js';
import GreenhouseEffectColors from '../common/GreenhouseEffectColors.js';
import GreenhouseEffectConstants from '../common/GreenhouseEffectConstants.js';
import GreenhouseEffectIconFactory from '../common/view/GreenhouseEffectIconFactory.js';
import GreenhouseEffectKeyboardHelpContent from '../common/view/GreenhouseEffectKeyboardHelpContent.js';
import greenhouseEffect from '../greenhouseEffect.js';
import GreenhouseEffectStrings from '../GreenhouseEffectStrings.js';
import WavesModel from './model/WavesModel.js';
import WavesScreenView from './view/WavesScreenView.js';
class WavesScreen extends Screen {
  constructor(tandem) {
    const options = {
      backgroundColorProperty: GreenhouseEffectColors.screenBackgroundColorProperty,
      homeScreenIcon: GreenhouseEffectIconFactory.createWavesHomeScreenIcon(),
      maxDT: GreenhouseEffectConstants.MAX_DT,
      tandem: tandem,
      name: GreenhouseEffectStrings.screen.wavesStringProperty,
      descriptionContent: GreenhouseEffectStrings.a11y.waves.homeScreenDescriptionStringProperty,
      createKeyboardHelpNode: () => new GreenhouseEffectKeyboardHelpContent()
    };
    super(() => new WavesModel(tandem.createTandem('model')), model => new WavesScreenView(model, tandem.createTandem('view')), options);
  }
}
greenhouseEffect.register('WavesScreen', WavesScreen);
export default WavesScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJHcmVlbmhvdXNlRWZmZWN0Q29sb3JzIiwiR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cyIsIkdyZWVuaG91c2VFZmZlY3RJY29uRmFjdG9yeSIsIkdyZWVuaG91c2VFZmZlY3RLZXlib2FyZEhlbHBDb250ZW50IiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkdyZWVuaG91c2VFZmZlY3RTdHJpbmdzIiwiV2F2ZXNNb2RlbCIsIldhdmVzU2NyZWVuVmlldyIsIldhdmVzU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlV2F2ZXNIb21lU2NyZWVuSWNvbiIsIm1heERUIiwiTUFYX0RUIiwibmFtZSIsInNjcmVlbiIsIndhdmVzU3RyaW5nUHJvcGVydHkiLCJkZXNjcmlwdGlvbkNvbnRlbnQiLCJhMTF5Iiwid2F2ZXMiLCJob21lU2NyZWVuRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSIsImNyZWF0ZUtleWJvYXJkSGVscE5vZGUiLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F2ZXNTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0Q29sb3JzIGZyb20gJy4uL2NvbW1vbi9HcmVlbmhvdXNlRWZmZWN0Q29sb3JzLmpzJztcclxuaW1wb3J0IEdyZWVuaG91c2VFZmZlY3RDb25zdGFudHMgZnJvbSAnLi4vY29tbW9uL0dyZWVuaG91c2VFZmZlY3RDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdEljb25GYWN0b3J5IGZyb20gJy4uL2NvbW1vbi92aWV3L0dyZWVuaG91c2VFZmZlY3RJY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0S2V5Ym9hcmRIZWxwQ29udGVudCBmcm9tICcuLi9jb21tb24vdmlldy9HcmVlbmhvdXNlRWZmZWN0S2V5Ym9hcmRIZWxwQ29udGVudC5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MgZnJvbSAnLi4vR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgV2F2ZXNNb2RlbCBmcm9tICcuL21vZGVsL1dhdmVzTW9kZWwuanMnO1xyXG5pbXBvcnQgV2F2ZXNTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9XYXZlc1NjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgV2F2ZXNTY3JlZW4gZXh0ZW5kcyBTY3JlZW48V2F2ZXNNb2RlbCwgV2F2ZXNTY3JlZW5WaWV3PiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IEdyZWVuaG91c2VFZmZlY3RDb2xvcnMuc2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBHcmVlbmhvdXNlRWZmZWN0SWNvbkZhY3RvcnkuY3JlYXRlV2F2ZXNIb21lU2NyZWVuSWNvbigpLFxyXG4gICAgICBtYXhEVDogR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cy5NQVhfRFQsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBuYW1lOiBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5zY3JlZW4ud2F2ZXNTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgZGVzY3JpcHRpb25Db250ZW50OiBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LndhdmVzLmhvbWVTY3JlZW5EZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBjcmVhdGVLZXlib2FyZEhlbHBOb2RlOiAoKSA9PiBuZXcgR3JlZW5ob3VzZUVmZmVjdEtleWJvYXJkSGVscENvbnRlbnQoKVxyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IFdhdmVzTW9kZWwoIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgV2F2ZXNTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdXYXZlc1NjcmVlbicsIFdhdmVzU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IFdhdmVzU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSw2QkFBNkI7QUFFaEQsT0FBT0Msc0JBQXNCLE1BQU0scUNBQXFDO0FBQ3hFLE9BQU9DLHlCQUF5QixNQUFNLHdDQUF3QztBQUM5RSxPQUFPQywyQkFBMkIsTUFBTSwrQ0FBK0M7QUFDdkYsT0FBT0MsbUNBQW1DLE1BQU0sdURBQXVEO0FBQ3ZHLE9BQU9DLGdCQUFnQixNQUFNLHdCQUF3QjtBQUNyRCxPQUFPQyx1QkFBdUIsTUFBTSwrQkFBK0I7QUFDbkUsT0FBT0MsVUFBVSxNQUFNLHVCQUF1QjtBQUM5QyxPQUFPQyxlQUFlLE1BQU0sMkJBQTJCO0FBRXZELE1BQU1DLFdBQVcsU0FBU1QsTUFBTSxDQUE4QjtFQUVyRFUsV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBRW5DLE1BQU1DLE9BQU8sR0FBRztNQUNkQyx1QkFBdUIsRUFBRVosc0JBQXNCLENBQUNhLDZCQUE2QjtNQUM3RUMsY0FBYyxFQUFFWiwyQkFBMkIsQ0FBQ2EseUJBQXlCLENBQUMsQ0FBQztNQUN2RUMsS0FBSyxFQUFFZix5QkFBeUIsQ0FBQ2dCLE1BQU07TUFDdkNQLE1BQU0sRUFBRUEsTUFBTTtNQUNkUSxJQUFJLEVBQUViLHVCQUF1QixDQUFDYyxNQUFNLENBQUNDLG1CQUFtQjtNQUN4REMsa0JBQWtCLEVBQUVoQix1QkFBdUIsQ0FBQ2lCLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxtQ0FBbUM7TUFDMUZDLHNCQUFzQixFQUFFQSxDQUFBLEtBQU0sSUFBSXRCLG1DQUFtQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJRyxVQUFVLENBQUVJLE1BQU0sQ0FBQ2dCLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQyxFQUN0REMsS0FBSyxJQUFJLElBQUlwQixlQUFlLENBQUVvQixLQUFLLEVBQUVqQixNQUFNLENBQUNnQixZQUFZLENBQUUsTUFBTyxDQUFFLENBQUMsRUFDcEVmLE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVAsZ0JBQWdCLENBQUN3QixRQUFRLENBQUUsYUFBYSxFQUFFcEIsV0FBWSxDQUFDO0FBQ3ZELGVBQWVBLFdBQVcifQ==