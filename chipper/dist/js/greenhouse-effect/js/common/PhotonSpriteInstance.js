// Copyright 2022, University of Colorado Boulder

/**
 * PhotonSpriteInstance is a specialization of SpriteInstance for photons.  It keeps a reference to the associated
 * photon model element, and updates its transformation matrix to match the photon's position.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import { SpriteInstance, SpriteInstanceTransformType } from '../../../scenery/js/imports.js';
import greenhouseEffect from '../greenhouseEffect.js';
class PhotonSpriteInstance extends SpriteInstance {
  constructor(photon, sprite, modelViewTransform) {
    // args are validated by initialize

    super();

    // TODO: OrganismSpriteInstance, from which this was leveraged, had scale in addition to translation.  I (jpphet)
    //       don't think it is needed for the photons, but I'm not certain.  Revisit at some point.
    // Set the transform type field in super SpriteInstance.
    this.transformType = SpriteInstanceTransformType.TRANSLATION_AND_SCALE;
    this.photonListener = this.updateMatrix.bind(this);

    // Initialize the fields here even though they will be set in the call to initialize because TypeScript requires it.
    this.photon = photon;
    this.modelViewTransform = modelViewTransform;
  }

  // TODO: I (jbphet) tried to add an initialize method, but was getting an error during TypeScript compilation that
  //       said:
  //         js/common/PhotonSpriteInstance.ts(15,7): error TS2415: Class 'PhotonSpriteInstance' incorrectly extends base class 'SpriteInstance & PoolableInstance'.
  //         Type 'PhotonSpriteInstance' is not assignable to type 'SpriteInstance'.
  //         Property 'initialize' is private in type 'SpriteInstance' but not in type 'PhotonSpriteInstance'.
  //
  //         I worked around this by initializing the fields manually, but should follow up on it.

  /**
   * Updates the matrix to match the organism's position and xDirection.
   */
  updateMatrix() {
    const photonPosition = this.photon.positionProperty.value;

    // compute scale and position, in view coordinates
    const viewX = this.modelViewTransform.modelToViewX(photonPosition.x);
    const viewY = this.modelViewTransform.modelToViewY(photonPosition.y);

    // update the matrix in the most efficient way possible
    this.matrix.set02(viewX);
    this.matrix.set12(viewY);
    assert && assert(this.matrix.isFinite(), 'matrix should be finite');
  }

  /**
   * Release references to avoid memory leaks.
   */
  dispose() {
    this.photon.positionProperty.unlink(this.photonListener);
  }
}
greenhouseEffect.register('PhotonSpriteInstance', PhotonSpriteInstance);
export default PhotonSpriteInstance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTcHJpdGVJbnN0YW5jZSIsIlNwcml0ZUluc3RhbmNlVHJhbnNmb3JtVHlwZSIsImdyZWVuaG91c2VFZmZlY3QiLCJQaG90b25TcHJpdGVJbnN0YW5jZSIsImNvbnN0cnVjdG9yIiwicGhvdG9uIiwic3ByaXRlIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwidHJhbnNmb3JtVHlwZSIsIlRSQU5TTEFUSU9OX0FORF9TQ0FMRSIsInBob3Rvbkxpc3RlbmVyIiwidXBkYXRlTWF0cml4IiwiYmluZCIsInBob3RvblBvc2l0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsInZhbHVlIiwidmlld1giLCJtb2RlbFRvVmlld1giLCJ4Iiwidmlld1kiLCJtb2RlbFRvVmlld1kiLCJ5IiwibWF0cml4Iiwic2V0MDIiLCJzZXQxMiIsImFzc2VydCIsImlzRmluaXRlIiwiZGlzcG9zZSIsInVubGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGhvdG9uU3ByaXRlSW5zdGFuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBob3RvblNwcml0ZUluc3RhbmNlIGlzIGEgc3BlY2lhbGl6YXRpb24gb2YgU3ByaXRlSW5zdGFuY2UgZm9yIHBob3RvbnMuICBJdCBrZWVwcyBhIHJlZmVyZW5jZSB0byB0aGUgYXNzb2NpYXRlZFxyXG4gKiBwaG90b24gbW9kZWwgZWxlbWVudCwgYW5kIHVwZGF0ZXMgaXRzIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBtYXRjaCB0aGUgcGhvdG9uJ3MgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBTcHJpdGUsIFNwcml0ZUluc3RhbmNlLCBTcHJpdGVJbnN0YW5jZVRyYW5zZm9ybVR5cGUgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ3JlZW5ob3VzZUVmZmVjdCBmcm9tICcuLi9ncmVlbmhvdXNlRWZmZWN0LmpzJztcclxuaW1wb3J0IFBob3RvbiBmcm9tICcuL21vZGVsL1Bob3Rvbi5qcyc7XHJcblxyXG5jbGFzcyBQaG90b25TcHJpdGVJbnN0YW5jZSBleHRlbmRzIFNwcml0ZUluc3RhbmNlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IHBob3Rvbkxpc3RlbmVyOiAoKSA9PiB2b2lkO1xyXG4gIHByaXZhdGUgcGhvdG9uOiBQaG90b247XHJcbiAgcHJpdmF0ZSBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTI7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcGhvdG9uOiBQaG90b24sIHNwcml0ZTogU3ByaXRlLCBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIgKSB7XHJcbiAgICAvLyBhcmdzIGFyZSB2YWxpZGF0ZWQgYnkgaW5pdGlhbGl6ZVxyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gVE9ETzogT3JnYW5pc21TcHJpdGVJbnN0YW5jZSwgZnJvbSB3aGljaCB0aGlzIHdhcyBsZXZlcmFnZWQsIGhhZCBzY2FsZSBpbiBhZGRpdGlvbiB0byB0cmFuc2xhdGlvbi4gIEkgKGpwcGhldClcclxuICAgIC8vICAgICAgIGRvbid0IHRoaW5rIGl0IGlzIG5lZWRlZCBmb3IgdGhlIHBob3RvbnMsIGJ1dCBJJ20gbm90IGNlcnRhaW4uICBSZXZpc2l0IGF0IHNvbWUgcG9pbnQuXHJcbiAgICAvLyBTZXQgdGhlIHRyYW5zZm9ybSB0eXBlIGZpZWxkIGluIHN1cGVyIFNwcml0ZUluc3RhbmNlLlxyXG4gICAgdGhpcy50cmFuc2Zvcm1UeXBlID0gU3ByaXRlSW5zdGFuY2VUcmFuc2Zvcm1UeXBlLlRSQU5TTEFUSU9OX0FORF9TQ0FMRTtcclxuXHJcbiAgICB0aGlzLnBob3Rvbkxpc3RlbmVyID0gdGhpcy51cGRhdGVNYXRyaXguYmluZCggdGhpcyApO1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgdGhlIGZpZWxkcyBoZXJlIGV2ZW4gdGhvdWdoIHRoZXkgd2lsbCBiZSBzZXQgaW4gdGhlIGNhbGwgdG8gaW5pdGlhbGl6ZSBiZWNhdXNlIFR5cGVTY3JpcHQgcmVxdWlyZXMgaXQuXHJcbiAgICB0aGlzLnBob3RvbiA9IHBob3RvbjtcclxuICAgIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtID0gbW9kZWxWaWV3VHJhbnNmb3JtO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETzogSSAoamJwaGV0KSB0cmllZCB0byBhZGQgYW4gaW5pdGlhbGl6ZSBtZXRob2QsIGJ1dCB3YXMgZ2V0dGluZyBhbiBlcnJvciBkdXJpbmcgVHlwZVNjcmlwdCBjb21waWxhdGlvbiB0aGF0XHJcbiAgLy8gICAgICAgc2FpZDpcclxuICAvLyAgICAgICAgIGpzL2NvbW1vbi9QaG90b25TcHJpdGVJbnN0YW5jZS50cygxNSw3KTogZXJyb3IgVFMyNDE1OiBDbGFzcyAnUGhvdG9uU3ByaXRlSW5zdGFuY2UnIGluY29ycmVjdGx5IGV4dGVuZHMgYmFzZSBjbGFzcyAnU3ByaXRlSW5zdGFuY2UgJiBQb29sYWJsZUluc3RhbmNlJy5cclxuICAvLyAgICAgICAgIFR5cGUgJ1Bob3RvblNwcml0ZUluc3RhbmNlJyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdTcHJpdGVJbnN0YW5jZScuXHJcbiAgLy8gICAgICAgICBQcm9wZXJ0eSAnaW5pdGlhbGl6ZScgaXMgcHJpdmF0ZSBpbiB0eXBlICdTcHJpdGVJbnN0YW5jZScgYnV0IG5vdCBpbiB0eXBlICdQaG90b25TcHJpdGVJbnN0YW5jZScuXHJcbiAgLy9cclxuICAvLyAgICAgICAgIEkgd29ya2VkIGFyb3VuZCB0aGlzIGJ5IGluaXRpYWxpemluZyB0aGUgZmllbGRzIG1hbnVhbGx5LCBidXQgc2hvdWxkIGZvbGxvdyB1cCBvbiBpdC5cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyB0aGUgbWF0cml4IHRvIG1hdGNoIHRoZSBvcmdhbmlzbSdzIHBvc2l0aW9uIGFuZCB4RGlyZWN0aW9uLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgdXBkYXRlTWF0cml4KCk6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IHBob3RvblBvc2l0aW9uID0gdGhpcy5waG90b24ucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZTtcclxuXHJcbiAgICAvLyBjb21wdXRlIHNjYWxlIGFuZCBwb3NpdGlvbiwgaW4gdmlldyBjb29yZGluYXRlc1xyXG4gICAgY29uc3Qgdmlld1ggPSB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHBob3RvblBvc2l0aW9uLnggKTtcclxuICAgIGNvbnN0IHZpZXdZID0gdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCBwaG90b25Qb3NpdGlvbi55ICk7XHJcblxyXG4gICAgLy8gdXBkYXRlIHRoZSBtYXRyaXggaW4gdGhlIG1vc3QgZWZmaWNpZW50IHdheSBwb3NzaWJsZVxyXG4gICAgdGhpcy5tYXRyaXguc2V0MDIoIHZpZXdYICk7XHJcbiAgICB0aGlzLm1hdHJpeC5zZXQxMiggdmlld1kgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMubWF0cml4LmlzRmluaXRlKCksICdtYXRyaXggc2hvdWxkIGJlIGZpbml0ZScgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbGVhc2UgcmVmZXJlbmNlcyB0byBhdm9pZCBtZW1vcnkgbGVha3MuXHJcbiAgICovXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnBob3Rvbi5wb3NpdGlvblByb3BlcnR5LnVubGluayggdGhpcy5waG90b25MaXN0ZW5lciApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JlZW5ob3VzZUVmZmVjdC5yZWdpc3RlciggJ1Bob3RvblNwcml0ZUluc3RhbmNlJywgUGhvdG9uU3ByaXRlSW5zdGFuY2UgKTtcclxuZXhwb3J0IGRlZmF1bHQgUGhvdG9uU3ByaXRlSW5zdGFuY2U7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsU0FBaUJBLGNBQWMsRUFBRUMsMkJBQTJCLFFBQVEsZ0NBQWdDO0FBQ3BHLE9BQU9DLGdCQUFnQixNQUFNLHdCQUF3QjtBQUdyRCxNQUFNQyxvQkFBb0IsU0FBU0gsY0FBYyxDQUFDO0VBS3pDSSxXQUFXQSxDQUFFQyxNQUFjLEVBQUVDLE1BQWMsRUFBRUMsa0JBQXVDLEVBQUc7SUFDNUY7O0lBRUEsS0FBSyxDQUFDLENBQUM7O0lBRVA7SUFDQTtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxhQUFhLEdBQUdQLDJCQUEyQixDQUFDUSxxQkFBcUI7SUFFdEUsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSSxDQUFDQyxZQUFZLENBQUNDLElBQUksQ0FBRSxJQUFLLENBQUM7O0lBRXBEO0lBQ0EsSUFBSSxDQUFDUCxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDRSxrQkFBa0IsR0FBR0Esa0JBQWtCO0VBQzlDOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0FBQ0Y7QUFDQTtFQUNVSSxZQUFZQSxDQUFBLEVBQVM7SUFFM0IsTUFBTUUsY0FBYyxHQUFHLElBQUksQ0FBQ1IsTUFBTSxDQUFDUyxnQkFBZ0IsQ0FBQ0MsS0FBSzs7SUFFekQ7SUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSSxDQUFDVCxrQkFBa0IsQ0FBQ1UsWUFBWSxDQUFFSixjQUFjLENBQUNLLENBQUUsQ0FBQztJQUN0RSxNQUFNQyxLQUFLLEdBQUcsSUFBSSxDQUFDWixrQkFBa0IsQ0FBQ2EsWUFBWSxDQUFFUCxjQUFjLENBQUNRLENBQUUsQ0FBQzs7SUFFdEU7SUFDQSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFFUCxLQUFNLENBQUM7SUFDMUIsSUFBSSxDQUFDTSxNQUFNLENBQUNFLEtBQUssQ0FBRUwsS0FBTSxDQUFDO0lBQzFCTSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxJQUFJLENBQUNILE1BQU0sQ0FBQ0ksUUFBUSxDQUFDLENBQUMsRUFBRSx5QkFBMEIsQ0FBQztFQUN2RTs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsT0FBT0EsQ0FBQSxFQUFTO0lBQ3JCLElBQUksQ0FBQ3RCLE1BQU0sQ0FBQ1MsZ0JBQWdCLENBQUNjLE1BQU0sQ0FBRSxJQUFJLENBQUNsQixjQUFlLENBQUM7RUFDNUQ7QUFDRjtBQUVBUixnQkFBZ0IsQ0FBQzJCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRTFCLG9CQUFxQixDQUFDO0FBQ3pFLGVBQWVBLG9CQUFvQiJ9