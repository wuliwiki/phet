// Copyright 2021-2022, University of Colorado Boulder

/**
 * EMEnergyPacket models a packet or bundle of electromagnetic energy.  It's kind of like a really big photon.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import EnumerationIO from '../../../../tandem/js/types/EnumerationIO.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import GreenhouseEffectConstants from '../GreenhouseEffectConstants.js';
import EnergyDirection from './EnergyDirection.js';
class EMEnergyPacket {
  // wavelength of the energy in this packet, in meters

  // energy in this packet, in joules

  // altitude in meters

  // direction in which this energy is moving

  /**
   * @param wavelength - in meters
   * @param energy - in joules
   * @param initialAltitude - in meters
   * @param direction
   */
  constructor(wavelength, energy, initialAltitude, direction) {
    this.wavelength = wavelength;
    this.energy = energy;
    this.altitude = initialAltitude;
    this.previousAltitude = initialAltitude;
    this.direction = direction;
  }

  /**
   * convenience method for determining whether the EM energy contained in this packet is in the visible light range
   */
  get isVisible() {
    return this.wavelength === GreenhouseEffectConstants.VISIBLE_WAVELENGTH;
  }

  /**
   * convenience method for determining whether the EM energy contained in this packet is in the infrared light range
   */
  get isInfrared() {
    return this.wavelength === GreenhouseEffectConstants.INFRARED_WAVELENGTH;
  }

  /**
   * @param dt - delta time, in seconds
   */
  step(dt) {
    this.previousAltitude = this.altitude;
    if (this.direction === EnergyDirection.UP) {
      this.altitude += dt * GreenhouseEffectConstants.SPEED_OF_LIGHT;
    } else {
      this.altitude -= dt * GreenhouseEffectConstants.SPEED_OF_LIGHT;
    }
  }

  /**
   * Serializes this EMEnergyPacket instance.
   */
  toStateObject() {
    return {
      wavelength: this.wavelength,
      energy: this.energy,
      altitude: this.altitude,
      previousAltitude: this.previousAltitude,
      direction: EnumerationIO(EnergyDirection).toStateObject(this.direction)
    };
  }

  /**
   * EMEnergyPacketIO handles PhET-iO serialization of EMEnergyPacket. Because serialization involves accessing private
   * members, it delegates to EMEnergyPacket. The methods that EMEnergyPacketIO overrides are typical of 'Dynamic element
   * serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static EMEnergyPacketIO = new IOType('EMEnergyPacketIO', {
    valueType: EMEnergyPacket,
    stateSchema: {
      wavelength: NumberIO,
      energy: NumberIO,
      altitude: NumberIO,
      previousAltitude: NumberIO,
      direction: EnumerationIO(EnergyDirection)
    },
    fromStateObject: stateObject => {
      const emEnergyPacket = new EMEnergyPacket(stateObject.wavelength, stateObject.energy, stateObject.altitude, EnumerationIO(EnergyDirection).fromStateObject(stateObject.direction));
      emEnergyPacket.previousAltitude = stateObject.previousAltitude;
      return emEnergyPacket;
    },
    toStateObject: coreObject => coreObject.toStateObject()
  });
}
greenhouseEffect.register('EMEnergyPacket', EMEnergyPacket);
export default EMEnergyPacket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,