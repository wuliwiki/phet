// Copyright 2021-2022, University of Colorado Boulder

/**
 * SpaceEnergySink a place where outgoing energy can be sent if we don't want to do anything with it.  It exists
 * primarily as a place for the top energy absorbing/emitting layer in a stack to send its energy.  In a sense, it
 * "complete the circuit", and thus enables the code to have assertions in place that make sure something is being done
 * with all energy outputs.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import EnergyDirection from './EnergyDirection.js';
import EnergyRateTracker from './EnergyRateTracker.js';
class SpaceEnergySink extends PhetioObject {
  constructor(altitude, tandem) {
    super({
      tandem: tandem,
      phetioType: SpaceEnergySink.SpaceEnergySinkIO
    });
    this.altitude = altitude;

    // {read-only} - energy rate tracking for incoming upward-moving energy, used for debugging
    this.incomingUpwardMovingEnergyRateTracker = new EnergyRateTracker({
      accumulationPeriod: 0.25,
      tandem: tandem.createTandem('incomingUpwardMovingEnergyRateTracker')
    });
  }

  /**
   * Check for interaction with the provided energy.  In this case, energy that is emitted into space is removed.
   */
  interactWithEnergy(emEnergyPackets, dt) {
    let energyEmittedIntoSpace = 0;
    emEnergyPackets.forEach(energyPacket => {
      if (energyPacket.altitude >= this.altitude && energyPacket.direction === EnergyDirection.UP) {
        energyEmittedIntoSpace += energyPacket.energy;
        energyPacket.energy = 0; // reduce energy to zero, which will cause this one to be removed from the list
      }
    });

    // Remove all the fully absorbed energy packets.
    _.remove(emEnergyPackets, emEnergyPacket => emEnergyPacket.energy === 0);

    // Track the incoming energy rate.
    this.incomingUpwardMovingEnergyRateTracker.addEnergyInfo(energyEmittedIntoSpace, dt);
  }

  /**
   * SpaceEnergySinkIO handles PhET-iO serialization of the SpaceEnergySink. Because serialization involves accessing
   * private members, it delegates to SpaceEnergySink. The methods that SpaceEnergySinkIO overrides are typical of
   * 'Dynamic element serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static SpaceEnergySinkIO = new IOType('SpaceEnergySinkIO', {
    valueType: SpaceEnergySink,
    stateSchema: {
      incomingUpwardMovingEnergyRateTracker: EnergyRateTracker.EnergyRateTrackerIO
    }
  });
}
greenhouseEffect.register('SpaceEnergySink', SpaceEnergySink);
export default SpaceEnergySink;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0aW9PYmplY3QiLCJJT1R5cGUiLCJncmVlbmhvdXNlRWZmZWN0IiwiRW5lcmd5RGlyZWN0aW9uIiwiRW5lcmd5UmF0ZVRyYWNrZXIiLCJTcGFjZUVuZXJneVNpbmsiLCJjb25zdHJ1Y3RvciIsImFsdGl0dWRlIiwidGFuZGVtIiwicGhldGlvVHlwZSIsIlNwYWNlRW5lcmd5U2lua0lPIiwiaW5jb21pbmdVcHdhcmRNb3ZpbmdFbmVyZ3lSYXRlVHJhY2tlciIsImFjY3VtdWxhdGlvblBlcmlvZCIsImNyZWF0ZVRhbmRlbSIsImludGVyYWN0V2l0aEVuZXJneSIsImVtRW5lcmd5UGFja2V0cyIsImR0IiwiZW5lcmd5RW1pdHRlZEludG9TcGFjZSIsImZvckVhY2giLCJlbmVyZ3lQYWNrZXQiLCJkaXJlY3Rpb24iLCJVUCIsImVuZXJneSIsIl8iLCJyZW1vdmUiLCJlbUVuZXJneVBhY2tldCIsImFkZEVuZXJneUluZm8iLCJ2YWx1ZVR5cGUiLCJzdGF0ZVNjaGVtYSIsIkVuZXJneVJhdGVUcmFja2VySU8iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNwYWNlRW5lcmd5U2luay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTcGFjZUVuZXJneVNpbmsgYSBwbGFjZSB3aGVyZSBvdXRnb2luZyBlbmVyZ3kgY2FuIGJlIHNlbnQgaWYgd2UgZG9uJ3Qgd2FudCB0byBkbyBhbnl0aGluZyB3aXRoIGl0LiAgSXQgZXhpc3RzXHJcbiAqIHByaW1hcmlseSBhcyBhIHBsYWNlIGZvciB0aGUgdG9wIGVuZXJneSBhYnNvcmJpbmcvZW1pdHRpbmcgbGF5ZXIgaW4gYSBzdGFjayB0byBzZW5kIGl0cyBlbmVyZ3kuICBJbiBhIHNlbnNlLCBpdFxyXG4gKiBcImNvbXBsZXRlIHRoZSBjaXJjdWl0XCIsIGFuZCB0aHVzIGVuYWJsZXMgdGhlIGNvZGUgdG8gaGF2ZSBhc3NlcnRpb25zIGluIHBsYWNlIHRoYXQgbWFrZSBzdXJlIHNvbWV0aGluZyBpcyBiZWluZyBkb25lXHJcbiAqIHdpdGggYWxsIGVuZXJneSBvdXRwdXRzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQaGV0aW9PYmplY3QgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb09iamVjdC5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgRW5lcmd5RGlyZWN0aW9uIGZyb20gJy4vRW5lcmd5RGlyZWN0aW9uLmpzJztcclxuaW1wb3J0IEVuZXJneVJhdGVUcmFja2VyIGZyb20gJy4vRW5lcmd5UmF0ZVRyYWNrZXIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgRU1FbmVyZ3lQYWNrZXQgZnJvbSAnLi9FTUVuZXJneVBhY2tldC5qcyc7XHJcblxyXG5jbGFzcyBTcGFjZUVuZXJneVNpbmsgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYWx0aXR1ZGU6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaW5jb21pbmdVcHdhcmRNb3ZpbmdFbmVyZ3lSYXRlVHJhY2tlcjogRW5lcmd5UmF0ZVRyYWNrZXI7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYWx0aXR1ZGU6IG51bWJlciwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHBoZXRpb1R5cGU6IFNwYWNlRW5lcmd5U2luay5TcGFjZUVuZXJneVNpbmtJT1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYWx0aXR1ZGUgPSBhbHRpdHVkZTtcclxuXHJcbiAgICAvLyB7cmVhZC1vbmx5fSAtIGVuZXJneSByYXRlIHRyYWNraW5nIGZvciBpbmNvbWluZyB1cHdhcmQtbW92aW5nIGVuZXJneSwgdXNlZCBmb3IgZGVidWdnaW5nXHJcbiAgICB0aGlzLmluY29taW5nVXB3YXJkTW92aW5nRW5lcmd5UmF0ZVRyYWNrZXIgPSBuZXcgRW5lcmd5UmF0ZVRyYWNrZXIoIHtcclxuICAgICAgYWNjdW11bGF0aW9uUGVyaW9kOiAwLjI1LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdpbmNvbWluZ1Vwd2FyZE1vdmluZ0VuZXJneVJhdGVUcmFja2VyJyApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBmb3IgaW50ZXJhY3Rpb24gd2l0aCB0aGUgcHJvdmlkZWQgZW5lcmd5LiAgSW4gdGhpcyBjYXNlLCBlbmVyZ3kgdGhhdCBpcyBlbWl0dGVkIGludG8gc3BhY2UgaXMgcmVtb3ZlZC5cclxuICAgKi9cclxuICBwdWJsaWMgaW50ZXJhY3RXaXRoRW5lcmd5KCBlbUVuZXJneVBhY2tldHM6IEVNRW5lcmd5UGFja2V0W10sIGR0OiBudW1iZXIgKTogdm9pZCB7XHJcblxyXG4gICAgbGV0IGVuZXJneUVtaXR0ZWRJbnRvU3BhY2UgPSAwO1xyXG5cclxuICAgIGVtRW5lcmd5UGFja2V0cy5mb3JFYWNoKCBlbmVyZ3lQYWNrZXQgPT4ge1xyXG5cclxuICAgICAgaWYgKCBlbmVyZ3lQYWNrZXQuYWx0aXR1ZGUgPj0gdGhpcy5hbHRpdHVkZSAmJiBlbmVyZ3lQYWNrZXQuZGlyZWN0aW9uID09PSBFbmVyZ3lEaXJlY3Rpb24uVVAgKSB7XHJcbiAgICAgICAgZW5lcmd5RW1pdHRlZEludG9TcGFjZSArPSBlbmVyZ3lQYWNrZXQuZW5lcmd5O1xyXG4gICAgICAgIGVuZXJneVBhY2tldC5lbmVyZ3kgPSAwOyAvLyByZWR1Y2UgZW5lcmd5IHRvIHplcm8sIHdoaWNoIHdpbGwgY2F1c2UgdGhpcyBvbmUgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBSZW1vdmUgYWxsIHRoZSBmdWxseSBhYnNvcmJlZCBlbmVyZ3kgcGFja2V0cy5cclxuICAgIF8ucmVtb3ZlKCBlbUVuZXJneVBhY2tldHMsIGVtRW5lcmd5UGFja2V0ID0+IGVtRW5lcmd5UGFja2V0LmVuZXJneSA9PT0gMCApO1xyXG5cclxuICAgIC8vIFRyYWNrIHRoZSBpbmNvbWluZyBlbmVyZ3kgcmF0ZS5cclxuICAgIHRoaXMuaW5jb21pbmdVcHdhcmRNb3ZpbmdFbmVyZ3lSYXRlVHJhY2tlci5hZGRFbmVyZ3lJbmZvKCBlbmVyZ3lFbWl0dGVkSW50b1NwYWNlLCBkdCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3BhY2VFbmVyZ3lTaW5rSU8gaGFuZGxlcyBQaEVULWlPIHNlcmlhbGl6YXRpb24gb2YgdGhlIFNwYWNlRW5lcmd5U2luay4gQmVjYXVzZSBzZXJpYWxpemF0aW9uIGludm9sdmVzIGFjY2Vzc2luZ1xyXG4gICAqIHByaXZhdGUgbWVtYmVycywgaXQgZGVsZWdhdGVzIHRvIFNwYWNlRW5lcmd5U2luay4gVGhlIG1ldGhvZHMgdGhhdCBTcGFjZUVuZXJneVNpbmtJTyBvdmVycmlkZXMgYXJlIHR5cGljYWwgb2ZcclxuICAgKiAnRHluYW1pYyBlbGVtZW50IHNlcmlhbGl6YXRpb24nLCBhcyBkZXNjcmliZWQgaW4gdGhlIFNlcmlhbGl6YXRpb24gc2VjdGlvbiBvZlxyXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9waGV0LWlvL2Jsb2IvbWFzdGVyL2RvYy9waGV0LWlvLWluc3RydW1lbnRhdGlvbi10ZWNobmljYWwtZ3VpZGUubWQjc2VyaWFsaXphdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU3BhY2VFbmVyZ3lTaW5rSU8gPSBuZXcgSU9UeXBlKCAnU3BhY2VFbmVyZ3lTaW5rSU8nLCB7XHJcbiAgICB2YWx1ZVR5cGU6IFNwYWNlRW5lcmd5U2luayxcclxuICAgIHN0YXRlU2NoZW1hOiB7XHJcbiAgICAgIGluY29taW5nVXB3YXJkTW92aW5nRW5lcmd5UmF0ZVRyYWNrZXI6IEVuZXJneVJhdGVUcmFja2VyLkVuZXJneVJhdGVUcmFja2VySU9cclxuICAgIH1cclxuICB9ICk7XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdTcGFjZUVuZXJneVNpbmsnLCBTcGFjZUVuZXJneVNpbmsgKTtcclxuZXhwb3J0IGRlZmF1bHQgU3BhY2VFbmVyZ3lTaW5rO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsWUFBWSxNQUFNLHVDQUF1QztBQUNoRSxPQUFPQyxNQUFNLE1BQU0sdUNBQXVDO0FBQzFELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUl0RCxNQUFNQyxlQUFlLFNBQVNMLFlBQVksQ0FBQztFQUlsQ00sV0FBV0EsQ0FBRUMsUUFBZ0IsRUFBRUMsTUFBYyxFQUFHO0lBRXJELEtBQUssQ0FBRTtNQUNMQSxNQUFNLEVBQUVBLE1BQU07TUFDZEMsVUFBVSxFQUFFSixlQUFlLENBQUNLO0lBQzlCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0gsUUFBUSxHQUFHQSxRQUFROztJQUV4QjtJQUNBLElBQUksQ0FBQ0kscUNBQXFDLEdBQUcsSUFBSVAsaUJBQWlCLENBQUU7TUFDbEVRLGtCQUFrQixFQUFFLElBQUk7TUFDeEJKLE1BQU0sRUFBRUEsTUFBTSxDQUFDSyxZQUFZLENBQUUsdUNBQXdDO0lBQ3ZFLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxrQkFBa0JBLENBQUVDLGVBQWlDLEVBQUVDLEVBQVUsRUFBUztJQUUvRSxJQUFJQyxzQkFBc0IsR0FBRyxDQUFDO0lBRTlCRixlQUFlLENBQUNHLE9BQU8sQ0FBRUMsWUFBWSxJQUFJO01BRXZDLElBQUtBLFlBQVksQ0FBQ1osUUFBUSxJQUFJLElBQUksQ0FBQ0EsUUFBUSxJQUFJWSxZQUFZLENBQUNDLFNBQVMsS0FBS2pCLGVBQWUsQ0FBQ2tCLEVBQUUsRUFBRztRQUM3Rkosc0JBQXNCLElBQUlFLFlBQVksQ0FBQ0csTUFBTTtRQUM3Q0gsWUFBWSxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7TUFDM0I7SUFDRixDQUFFLENBQUM7O0lBRUg7SUFDQUMsQ0FBQyxDQUFDQyxNQUFNLENBQUVULGVBQWUsRUFBRVUsY0FBYyxJQUFJQSxjQUFjLENBQUNILE1BQU0sS0FBSyxDQUFFLENBQUM7O0lBRTFFO0lBQ0EsSUFBSSxDQUFDWCxxQ0FBcUMsQ0FBQ2UsYUFBYSxDQUFFVCxzQkFBc0IsRUFBRUQsRUFBRyxDQUFDO0VBQ3hGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLE9BQXVCTixpQkFBaUIsR0FBRyxJQUFJVCxNQUFNLENBQUUsbUJBQW1CLEVBQUU7SUFDMUUwQixTQUFTLEVBQUV0QixlQUFlO0lBQzFCdUIsV0FBVyxFQUFFO01BQ1hqQixxQ0FBcUMsRUFBRVAsaUJBQWlCLENBQUN5QjtJQUMzRDtFQUNGLENBQUUsQ0FBQztBQUNMO0FBRUEzQixnQkFBZ0IsQ0FBQzRCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRXpCLGVBQWdCLENBQUM7QUFDL0QsZUFBZUEsZUFBZSJ9