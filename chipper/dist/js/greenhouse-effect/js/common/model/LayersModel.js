// Copyright 2021-2022, University of Colorado Boulder

/**
 * The LayersModel of GreenhouseEffect is a superclass for several of the sim screens. It is responsible for creating
 * and managing the layers that absorb and radiate heat, thus modeling the capture of heat energy in Earth's atmosphere.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import ArrayIO from '../../../../tandem/js/types/ArrayIO.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import GreenhouseEffectConstants from '../GreenhouseEffectConstants.js';
import GreenhouseEffectQueryParameters from '../GreenhouseEffectQueryParameters.js';
import GreenhouseEffectUtils from '../GreenhouseEffectUtils.js';
import AtmosphereLayer from './AtmosphereLayer.js';
import EMEnergyPacket from './EMEnergyPacket.js';
import EnergyAbsorbingEmittingLayer from './EnergyAbsorbingEmittingLayer.js';
import FluxMeter from './FluxMeter.js';
import GreenhouseEffectModel from './GreenhouseEffectModel.js';
import GroundLayer from './GroundLayer.js';
import SpaceEnergySink from './SpaceEnergySink.js';
import SunEnergySource from './SunEnergySource.js';
import TemperatureUnits from './TemperatureUnits.js';

// constants
const HEIGHT_OF_ATMOSPHERE = 50000; // in meters
const DEFAULT_NUMBER_OF_ATMOSPHERE_LAYERS = 12; // empirically determined to give us good behavior for temperature and energy flux
const SUNLIGHT_SPAN = GreenhouseEffectConstants.SUNLIGHT_SPAN;
const MODEL_TIME_STEP = 1 / 60; // in seconds, originally derived from the most common animation frame rate
const RADIATIVE_BALANCE_THRESHOLD = 5; // in watts per square meter, empirically determined

// map used to set the default temperature units based on the value of a query parameter
const mapLetterToTemperatureUnits = new Map([['K', TemperatureUnits.KELVIN], ['C', TemperatureUnits.CELSIUS], ['F', TemperatureUnits.FAHRENHEIT]]);
const DEFAULT_TEMPERATURE_UNITS = mapLetterToTemperatureUnits.get(GreenhouseEffectQueryParameters.defaultTemperatureUnits);
class LayersModel extends GreenhouseEffectModel {
  // whether the amount of energy coming in from the sun matches that going back out to space, within a threshold

  // Net inflow of energy into the Earth at the top of the atmosphere.  When this is positive, more energy is coming
  // into the Earth than is leaving, so it should be heating up.  When negative, the Earth is releasing energy and
  // thus cooling down.
  // packets of electromagnetic energy that are moving up and down in the model
  // main energy source coming into the system
  // the energy-absorbing-and-emitting layers for the atmosphere
  // a cloud that may or may not be present, and that reflects sunlight if it is
  cloud = null;

  // model of the ground that absorbs energy, heats up, and radiates infrared energy

  // the endpoint where energy radiating from the top of the atmosphere goes

  // used to track how much stepping of the model needs to occur

  // model of a meter that can measure the energy flux moving through the atmosphere

  // whether the thermometer measuring surface temperature is visible

  // whether the "Energy Balance" display is visible

  // whether the glowing representation of surface temperature is visible

  // fields with self-explanatory names

  /**
   * @param [tandem]
   * @param [providedOptions]
   */
  constructor(tandem, providedOptions) {
    const options = optionize()({
      numberOfAtmosphereLayers: DEFAULT_NUMBER_OF_ATMOSPHERE_LAYERS,
      minimumGroundTemperature: GroundLayer.MINIMUM_EARTH_AT_NIGHT_TEMPERATURE,
      initialAtmosphereLayerAbsorptionProportion: 0,
      atmosphereLayersInitiallyActive: true,
      fluxMeterPresent: false,
      fluxMeterOptions: {}
    }, providedOptions);
    super(tandem, options);
    this.surfaceTemperatureKelvinProperty = new NumberProperty(0, {
      range: new Range(0, 520),
      units: 'K',
      tandem: tandem.createTandem('surfaceTemperatureKelvinProperty'),
      phetioReadOnly: true,
      phetioHighFrequency: true
    });
    this.surfaceTemperatureCelsiusProperty = new DerivedProperty([this.surfaceTemperatureKelvinProperty], GreenhouseEffectUtils.kelvinToCelsius);
    this.surfaceTemperatureFahrenheitProperty = new DerivedProperty([this.surfaceTemperatureKelvinProperty], GreenhouseEffectUtils.kelvinToFahrenheit);
    this.netInflowOfEnergyProperty = new NumberProperty(0, {
      tandem: tandem.createTandem('netInflowOfEnergyProperty'),
      phetioReadOnly: true
    });
    this.inRadiativeBalanceProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('inRadiativeBalanceProperty'),
      phetioReadOnly: true
    });
    assert && assert(DEFAULT_TEMPERATURE_UNITS, 'something is wrong with the default temperature units');
    this.temperatureUnitsProperty = new EnumerationProperty(DEFAULT_TEMPERATURE_UNITS, {
      tandem: tandem.createTandem('temperatureUnitsProperty')
    });
    this.surfaceThermometerVisibleProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('surfaceThermometerVisibleProperty')
    });
    this.energyBalanceVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('energyBalanceVisibleProperty')
    });
    this.surfaceTemperatureVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('surfaceTemperatureVisibleProperty')
    });
    this.fluxMeterVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('fluxMeterVisibleProperty')
    });
    this.emEnergyPackets = [];
    this.sunEnergySource = new SunEnergySource(EnergyAbsorbingEmittingLayer.SURFACE_AREA, this.emEnergyPackets, tandem.createTandem('sunEnergySource'));
    this.groundLayer = new GroundLayer(tandem.createTandem('groundLayer'), {
      minimumTemperature: options.minimumGroundTemperature
    });
    this.atmosphereLayers = [];
    const atmosphereLayersTandem = tandem.createTandem('atmosphereLayers');

    // The atmosphere layers are evenly spaced between the ground and the top of the atmosphere.
    const distanceBetweenAtmosphereLayers = HEIGHT_OF_ATMOSPHERE / (options.numberOfAtmosphereLayers + 1);

    // Add the atmosphere layers.  These MUST be added in order of increasing altitude, since other code assumes that
    // this is the case.
    _.times(options.numberOfAtmosphereLayers, index => {
      const atmosphereLayer = new AtmosphereLayer(distanceBetweenAtmosphereLayers * (index + 1), atmosphereLayersTandem.createTandem(`layer${index}`), {
        initiallyActive: options.atmosphereLayersInitiallyActive,
        initialEnergyAbsorptionProportion: options.initialAtmosphereLayerAbsorptionProportion
      });
      this.atmosphereLayers.push(atmosphereLayer);
    });

    // the endpoint where energy radiating from the top of the atmosphere goes
    this.outerSpace = new SpaceEnergySink(HEIGHT_OF_ATMOSPHERE, tandem.createTandem('outerSpace'));

    //  Create the model component for the FluxMeter if the options indicate that it should be present.
    if (options.fluxMeterPresent) {
      const fluxMeterOptions = combineOptions({
        tandem: tandem.createTandem('fluxMeter')
      }, options.fluxMeterOptions);
      this.fluxMeter = new FluxMeter(this.atmosphereLayers, fluxMeterOptions);
    } else {
      this.fluxMeter = null;
    }
    this.modelSteppingTime = 0;

    // Connect up the surface temperature property to that of the ground layer model element.
    this.groundLayer.temperatureProperty.link(groundTemperature => {
      this.surfaceTemperatureKelvinProperty.set(groundTemperature);
    });
  }
  stepModel(dt) {
    // Step the model components by a consistent dt in order to avoid instabilities in the layer interactions.  See
    // https://github.com/phetsims/greenhouse-effect/issues/48 for information on why this is necessary.
    this.modelSteppingTime += dt;
    while (this.modelSteppingTime >= MODEL_TIME_STEP) {
      // Add the energy produced by the sun to the system.
      this.sunEnergySource.produceEnergy(MODEL_TIME_STEP);

      // Step the energy packets, which causes them to move.
      this.emEnergyPackets.forEach(emEnergyPacket => {
        emEnergyPacket.step(MODEL_TIME_STEP);
      });

      // Check for interaction between the energy packets and ground, the atmosphere, clouds, and space.
      this.groundLayer.interactWithEnergy(this.emEnergyPackets, MODEL_TIME_STEP);
      this.atmosphereLayers.forEach(atmosphereLayer => {
        atmosphereLayer.interactWithEnergy(this.emEnergyPackets, MODEL_TIME_STEP);
      });
      if (this.cloud) {
        this.cloud.interactWithEnergy(this.emEnergyPackets, MODEL_TIME_STEP);
      }
      this.outerSpace.interactWithEnergy(this.emEnergyPackets, MODEL_TIME_STEP);

      // If the flux meter is present, have it measure the flux.
      if (this.fluxMeter) {
        this.fluxMeter.measureEnergyPacketFlux(this.emEnergyPackets, MODEL_TIME_STEP);
      }

      // Adjust remaining time for stepping the model.
      this.modelSteppingTime -= MODEL_TIME_STEP;
    }

    // Update the Property that tracks whether the system as a whole is in radiative balance.
    const energyGoingIntoSpace = this.outerSpace.incomingUpwardMovingEnergyRateTracker.energyRateProperty.value / EnergyAbsorbingEmittingLayer.SURFACE_AREA;
    const energyComingFromSun = this.sunEnergySource.getOutputEnergyRate();
    this.netInflowOfEnergyProperty.set(energyComingFromSun - energyGoingIntoSpace);
    this.inRadiativeBalanceProperty.set(Math.abs(energyComingFromSun - energyGoingIntoSpace) < RADIATIVE_BALANCE_THRESHOLD);
    super.stepModel(dt);
  }

  /**
   * Find a layer, if there is one, that would be crossed by an object traveling from the start altitude to the end
   * altitude.  If there are none, null is returned.  If there are several, the first one that would be crossed is
   * returned.
   *
   * Comparisons are exclusive for the first altitude, inclusive for the second.  See the code for details.
   *
   * This is intended to be pretty efficient, hence the use of regular 'for' loops and 'break' statements.
   */
  findCrossedAtmosphereLayer(startAltitude, endAltitude) {
    let crossedLayer = null;
    if (startAltitude < endAltitude) {
      for (let i = 0; i < this.atmosphereLayers.length; i++) {
        const atmosphereLayer = this.atmosphereLayers[i];
        if (atmosphereLayer.isActiveProperty.value && startAltitude < atmosphereLayer.altitude && endAltitude >= atmosphereLayer.altitude) {
          crossedLayer = atmosphereLayer;
          break;
        }
      }
    } else if (startAltitude > endAltitude) {
      for (let i = this.atmosphereLayers.length - 1; i >= 0; i--) {
        const atmosphereLayer = this.atmosphereLayers[i];
        if (atmosphereLayer.isActiveProperty.value && startAltitude > atmosphereLayer.altitude && endAltitude <= atmosphereLayer.altitude) {
          crossedLayer = atmosphereLayer;
          break;
        }
      }
    }
    return crossedLayer;
  }

  /**
   * Getter method that is true when infrared radiation is present.
   * TODO: Should this actually be implemented in subclasses and actually test for the presence of IR?
   */
  isInfraredPresent() {
    return this.groundLayer.temperatureProperty.value > this.groundLayer.minimumTemperature;
  }

  /**
   * Resets all aspects of the model.
   */
  reset() {
    super.reset();
    this.netInflowOfEnergyProperty.reset();
    this.fluxMeterVisibleProperty.reset();
    this.energyBalanceVisibleProperty.reset();
    this.surfaceThermometerVisibleProperty.reset();
    this.temperatureUnitsProperty.reset();
    this.sunEnergySource.reset();
    this.groundLayer.reset();
    this.atmosphereLayers.forEach(atmosphereLayer => {
      atmosphereLayer.reset();
    });
    this.emEnergyPackets.length = 0;
    if (this.fluxMeter) {
      this.fluxMeter.reset();
    }
  }

  /**
   * for phet-io
   */
  toStateObject() {
    return {
      emEnergyPackets: ArrayIO(EMEnergyPacket.EMEnergyPacketIO).toStateObject(this.emEnergyPackets)
    };
  }

  /**
   * for phet-io
   */
  applyState(stateObject) {
    // Other objects have a reference to the energy packets, so we don't want to overwrite it.  Instead, clear it, then
    // copy in the contents of the state object.
    this.emEnergyPackets.length = 0;
    this.emEnergyPackets.push(...ArrayIO(EMEnergyPacket.EMEnergyPacketIO).fromStateObject(stateObject.emEnergyPackets));
  }

  /**
   * Returns a map of state keys and their associated IOTypes, see IOType for details.
   */
  static STATE_SCHEMA = {
    emEnergyPackets: ArrayIO(EMEnergyPacket.EMEnergyPacketIO)
  };

  // statics
  static HEIGHT_OF_ATMOSPHERE = HEIGHT_OF_ATMOSPHERE;
  static SUNLIGHT_SPAN = SUNLIGHT_SPAN;
  static RADIATIVE_BALANCE_THRESHOLD = RADIATIVE_BALANCE_THRESHOLD;

  /**
   * LayersModelIO handles PhET-iO serialization of the LayersModel. Because serialization involves accessing private
   * members, it delegates to LayersModel. The methods that LayersModelIO overrides are typical of 'Dynamic element
   * serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static LayersModelIO = new IOType('LayersModelIO', {
    valueType: LayersModel,
    stateSchema: LayersModel.STATE_SCHEMA,
    toStateObject: layersModel => layersModel.toStateObject(),
    applyState: (layersModel, stateObject) => layersModel.applyState(stateObject)
  });
}
greenhouseEffect.register('LayersModel', LayersModel);
export default LayersModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,