// Copyright 2021-2023, University of Colorado Boulder

/**
 * The base model class for Greenhouse Effect.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author John Blanco (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import TimeSpeed from '../../../../scenery-phet/js/TimeSpeed.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import Emitter from '../../../../axon/js/Emitter.js';
import optionize from '../../../../phet-core/js/optionize.js';
class GreenhouseEffectModel extends PhetioObject {
  constructor(tandem, providedOptions) {
    const options = optionize()({
      // By default, this is not stateful, but note that some subtypes such as WavesModel override this and specify a
      // phetioType.
      phetioState: false
    }, providedOptions);
    assert && assert(!options.tandem, 'tandem should not be supplied via options');
    options.tandem = tandem;
    super(options);

    // playing speed for the model
    this.timeSpeedProperty = new EnumerationProperty(TimeSpeed.NORMAL, {
      validValues: [TimeSpeed.NORMAL, TimeSpeed.SLOW],
      tandem: tandem.createTandem('timeSpeedProperty')
    });

    // controls whether the model is stepping through time or paused
    this.isPlayingProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('isPlayingProperty')
    });

    // emitter that is fired on each step, used to signal the view that an update of sprites or canvases may be needed
    this.steppedEmitter = new Emitter({
      parameters: [{
        valueType: 'number'
      }]
    });
  }

  /**
   * Step the model forward by the provided time.  Generally, external clients should call the step function instead of
   * stepModel, but there are some cases where calling this directly makes sense.
   *
   * @param dt - in seconds
   */
  stepModel(dt) {
    this.steppedEmitter.emit(dt);
  }

  /**
   * Step the simulation, called by PhET framework.
   * @param dt - in seconds
   */
  step(dt) {
    if (this.isPlayingProperty.value) {
      const timeStep = this.timeSpeedProperty.value === TimeSpeed.NORMAL ? dt : dt / 2;
      this.stepModel(timeStep);
    }
  }

  /**
   * Reset the model to its initial state.
   */
  reset() {
    this.timeSpeedProperty.reset();
    this.isPlayingProperty.reset();
  }
}
greenhouseEffect.register('GreenhouseEffectModel', GreenhouseEffectModel);
export default GreenhouseEffectModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbnVtZXJhdGlvblByb3BlcnR5IiwiVGltZVNwZWVkIiwiUGhldGlvT2JqZWN0IiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkVtaXR0ZXIiLCJvcHRpb25pemUiLCJHcmVlbmhvdXNlRWZmZWN0TW9kZWwiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJwaGV0aW9TdGF0ZSIsImFzc2VydCIsInRpbWVTcGVlZFByb3BlcnR5IiwiTk9STUFMIiwidmFsaWRWYWx1ZXMiLCJTTE9XIiwiY3JlYXRlVGFuZGVtIiwiaXNQbGF5aW5nUHJvcGVydHkiLCJzdGVwcGVkRW1pdHRlciIsInBhcmFtZXRlcnMiLCJ2YWx1ZVR5cGUiLCJzdGVwTW9kZWwiLCJkdCIsImVtaXQiLCJzdGVwIiwidmFsdWUiLCJ0aW1lU3RlcCIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHcmVlbmhvdXNlRWZmZWN0TW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIGJhc2UgbW9kZWwgY2xhc3MgZm9yIEdyZWVuaG91c2UgRWZmZWN0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRpbWVTcGVlZCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvVGltZVNwZWVkLmpzJztcclxuaW1wb3J0IFBoZXRpb09iamVjdCwgeyBQaGV0aW9PYmplY3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb09iamVjdC5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgRW1pdHRlciBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VtaXR0ZXIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFRFbWl0dGVyIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVEVtaXR0ZXIuanMnO1xyXG5pbXBvcnQgVE1vZGVsIGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL1RNb2RlbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuZXhwb3J0IHR5cGUgR3JlZW5ob3VzZUVmZmVjdE1vZGVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGhldGlvT2JqZWN0T3B0aW9ucztcclxuXHJcbmNsYXNzIEdyZWVuaG91c2VFZmZlY3RNb2RlbCBleHRlbmRzIFBoZXRpb09iamVjdCBpbXBsZW1lbnRzIFRNb2RlbCB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRpbWVTcGVlZFByb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PFRpbWVTcGVlZD47XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzUGxheWluZ1Byb3BlcnR5OiBCb29sZWFuUHJvcGVydHk7XHJcbiAgcHVibGljIHJlYWRvbmx5IHN0ZXBwZWRFbWl0dGVyOiBURW1pdHRlcjxbIG51bWJlciBdPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSwgcHJvdmlkZWRPcHRpb25zPzogR3JlZW5ob3VzZUVmZmVjdE1vZGVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEdyZWVuaG91c2VFZmZlY3RNb2RlbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBQaGV0aW9PYmplY3RPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBCeSBkZWZhdWx0LCB0aGlzIGlzIG5vdCBzdGF0ZWZ1bCwgYnV0IG5vdGUgdGhhdCBzb21lIHN1YnR5cGVzIHN1Y2ggYXMgV2F2ZXNNb2RlbCBvdmVycmlkZSB0aGlzIGFuZCBzcGVjaWZ5IGFcclxuICAgICAgLy8gcGhldGlvVHlwZS5cclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlXHJcblxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMudGFuZGVtLCAndGFuZGVtIHNob3VsZCBub3QgYmUgc3VwcGxpZWQgdmlhIG9wdGlvbnMnICk7XHJcbiAgICBvcHRpb25zLnRhbmRlbSA9IHRhbmRlbTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHBsYXlpbmcgc3BlZWQgZm9yIHRoZSBtb2RlbFxyXG4gICAgdGhpcy50aW1lU3BlZWRQcm9wZXJ0eSA9IG5ldyBFbnVtZXJhdGlvblByb3BlcnR5KCBUaW1lU3BlZWQuTk9STUFMLCB7XHJcbiAgICAgIHZhbGlkVmFsdWVzOiBbIFRpbWVTcGVlZC5OT1JNQUwsIFRpbWVTcGVlZC5TTE9XIF0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RpbWVTcGVlZFByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gY29udHJvbHMgd2hldGhlciB0aGUgbW9kZWwgaXMgc3RlcHBpbmcgdGhyb3VnaCB0aW1lIG9yIHBhdXNlZFxyXG4gICAgdGhpcy5pc1BsYXlpbmdQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaXNQbGF5aW5nUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBlbWl0dGVyIHRoYXQgaXMgZmlyZWQgb24gZWFjaCBzdGVwLCB1c2VkIHRvIHNpZ25hbCB0aGUgdmlldyB0aGF0IGFuIHVwZGF0ZSBvZiBzcHJpdGVzIG9yIGNhbnZhc2VzIG1heSBiZSBuZWVkZWRcclxuICAgIHRoaXMuc3RlcHBlZEVtaXR0ZXIgPSBuZXcgRW1pdHRlciggeyBwYXJhbWV0ZXJzOiBbIHsgdmFsdWVUeXBlOiAnbnVtYmVyJyB9IF0gfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcCB0aGUgbW9kZWwgZm9yd2FyZCBieSB0aGUgcHJvdmlkZWQgdGltZS4gIEdlbmVyYWxseSwgZXh0ZXJuYWwgY2xpZW50cyBzaG91bGQgY2FsbCB0aGUgc3RlcCBmdW5jdGlvbiBpbnN0ZWFkIG9mXHJcbiAgICogc3RlcE1vZGVsLCBidXQgdGhlcmUgYXJlIHNvbWUgY2FzZXMgd2hlcmUgY2FsbGluZyB0aGlzIGRpcmVjdGx5IG1ha2VzIHNlbnNlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGR0IC0gaW4gc2Vjb25kc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGVwTW9kZWwoIGR0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICB0aGlzLnN0ZXBwZWRFbWl0dGVyLmVtaXQoIGR0ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGVwIHRoZSBzaW11bGF0aW9uLCBjYWxsZWQgYnkgUGhFVCBmcmFtZXdvcmsuXHJcbiAgICogQHBhcmFtIGR0IC0gaW4gc2Vjb25kc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGVwKCBkdDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgaWYgKCB0aGlzLmlzUGxheWluZ1Byb3BlcnR5LnZhbHVlICkge1xyXG4gICAgICBjb25zdCB0aW1lU3RlcCA9IHRoaXMudGltZVNwZWVkUHJvcGVydHkudmFsdWUgPT09IFRpbWVTcGVlZC5OT1JNQUwgPyBkdCA6IGR0IC8gMjtcclxuICAgICAgdGhpcy5zdGVwTW9kZWwoIHRpbWVTdGVwICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGUgbW9kZWwgdG8gaXRzIGluaXRpYWwgc3RhdGUuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy50aW1lU3BlZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5pc1BsYXlpbmdQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuZ3JlZW5ob3VzZUVmZmVjdC5yZWdpc3RlciggJ0dyZWVuaG91c2VFZmZlY3RNb2RlbCcsIEdyZWVuaG91c2VFZmZlY3RNb2RlbCApO1xyXG5leHBvcnQgZGVmYXVsdCBHcmVlbmhvdXNlRWZmZWN0TW9kZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxtQkFBbUIsTUFBTSw0Q0FBNEM7QUFDNUUsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxPQUFPQyxZQUFZLE1BQStCLHVDQUF1QztBQUN6RixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFFeEQsT0FBT0MsT0FBTyxNQUFNLGdDQUFnQztBQUNwRCxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQU9uRixNQUFNQyxxQkFBcUIsU0FBU0osWUFBWSxDQUFtQjtFQUsxREssV0FBV0EsQ0FBRUMsTUFBYyxFQUFFQyxlQUE4QyxFQUFHO0lBRW5GLE1BQU1DLE9BQU8sR0FBR0wsU0FBUyxDQUFpRSxDQUFDLENBQUU7TUFFM0Y7TUFDQTtNQUNBTSxXQUFXLEVBQUU7SUFFZixDQUFDLEVBQUVGLGVBQWdCLENBQUM7SUFFcEJHLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNGLE9BQU8sQ0FBQ0YsTUFBTSxFQUFFLDJDQUE0QyxDQUFDO0lBQ2hGRSxPQUFPLENBQUNGLE1BQU0sR0FBR0EsTUFBTTtJQUV2QixLQUFLLENBQUVFLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQSxJQUFJLENBQUNHLGlCQUFpQixHQUFHLElBQUliLG1CQUFtQixDQUFFQyxTQUFTLENBQUNhLE1BQU0sRUFBRTtNQUNsRUMsV0FBVyxFQUFFLENBQUVkLFNBQVMsQ0FBQ2EsTUFBTSxFQUFFYixTQUFTLENBQUNlLElBQUksQ0FBRTtNQUNqRFIsTUFBTSxFQUFFQSxNQUFNLENBQUNTLFlBQVksQ0FBRSxtQkFBb0I7SUFDbkQsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJbkIsZUFBZSxDQUFFLElBQUksRUFBRTtNQUNsRFMsTUFBTSxFQUFFQSxNQUFNLENBQUNTLFlBQVksQ0FBRSxtQkFBb0I7SUFDbkQsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDRSxjQUFjLEdBQUcsSUFBSWYsT0FBTyxDQUFFO01BQUVnQixVQUFVLEVBQUUsQ0FBRTtRQUFFQyxTQUFTLEVBQUU7TUFBUyxDQUFDO0lBQUcsQ0FBRSxDQUFDO0VBQ2xGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTQyxTQUFTQSxDQUFFQyxFQUFVLEVBQVM7SUFDbkMsSUFBSSxDQUFDSixjQUFjLENBQUNLLElBQUksQ0FBRUQsRUFBRyxDQUFDO0VBQ2hDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NFLElBQUlBLENBQUVGLEVBQVUsRUFBUztJQUM5QixJQUFLLElBQUksQ0FBQ0wsaUJBQWlCLENBQUNRLEtBQUssRUFBRztNQUNsQyxNQUFNQyxRQUFRLEdBQUcsSUFBSSxDQUFDZCxpQkFBaUIsQ0FBQ2EsS0FBSyxLQUFLekIsU0FBUyxDQUFDYSxNQUFNLEdBQUdTLEVBQUUsR0FBR0EsRUFBRSxHQUFHLENBQUM7TUFDaEYsSUFBSSxDQUFDRCxTQUFTLENBQUVLLFFBQVMsQ0FBQztJQUM1QjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDZixpQkFBaUIsQ0FBQ2UsS0FBSyxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDVixpQkFBaUIsQ0FBQ1UsS0FBSyxDQUFDLENBQUM7RUFDaEM7QUFDRjtBQUVBekIsZ0JBQWdCLENBQUMwQixRQUFRLENBQUUsdUJBQXVCLEVBQUV2QixxQkFBc0IsQ0FBQztBQUMzRSxlQUFlQSxxQkFBcUIifQ==