// Copyright 2021-2023, University of Colorado Boulder

/**
 * AtmosphereLayer is a subclass of EnergyAbsorbingEmittingLayer and adds the behavior that is specific to the
 * atmospheric layers.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import greenhouseEffect from '../../greenhouseEffect.js';
import GreenhouseEffectConstants from '../GreenhouseEffectConstants.js';
import EnergyAbsorbingEmittingLayer from './EnergyAbsorbingEmittingLayer.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
class AtmosphereLayer extends EnergyAbsorbingEmittingLayer {
  constructor(altitude, tandem, providedOptions) {
    const options = optionize()({
      substance: EnergyAbsorbingEmittingLayer.Substance.GLASS,
      initiallyActive: true,
      // phet-io
      tandem: tandem,
      phetioReadOnly: true,
      phetioState: false,
      phetioDocumentation: 'Layer in the atmosphere that absorbs and emits energy. Layers are numbered low-to-high according to altitude.'
    }, providedOptions);
    super(altitude, options);

    // The isActiveProperty determines whether or not this layer will interact with the energy that passes through it.
    this.isActiveProperty = new BooleanProperty(options.initiallyActive, {
      tandem: options.tandem.createTandem('isActiveProperty'),
      phetioReadOnly: true
    });

    // When this layer becomes inactive, it loses any energy that it contained.
    this.isActiveProperty.lazyLink(active => {
      if (!active) {
        this.temperatureProperty.reset();
      }
    });
  }

  /**
   * Interact with the provided energy packets in a way that is specific to the atmospheric layers.
   */
  interactWithEnergyPackets(emEnergyPackets) {
    let absorbedEnergy = 0;
    emEnergyPackets.forEach(energyPacket => {
      // Absorb energy from IR packets that cross this layer.
      if (energyPacket.wavelength === GreenhouseEffectConstants.INFRARED_WAVELENGTH && this.energyPacketCrossedThisLayer(energyPacket)) {
        const energyToAbsorb = energyPacket.energy * this.energyAbsorptionProportionProperty.value;
        absorbedEnergy += energyToAbsorb;
        energyPacket.energy -= energyToAbsorb;
      }
    });
    return absorbedEnergy;
  }

  /**
   * see base class for details
   */
  interactWithEnergy(emEnergyPackets, dt) {
    if (this.isActiveProperty.value) {
      super.interactWithEnergy(emEnergyPackets, dt);
    }
  }
}
greenhouseEffect.register('AtmosphereLayer', AtmosphereLayer);
export default AtmosphereLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJncmVlbmhvdXNlRWZmZWN0IiwiR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cyIsIkVuZXJneUFic29yYmluZ0VtaXR0aW5nTGF5ZXIiLCJCb29sZWFuUHJvcGVydHkiLCJvcHRpb25pemUiLCJBdG1vc3BoZXJlTGF5ZXIiLCJjb25zdHJ1Y3RvciIsImFsdGl0dWRlIiwidGFuZGVtIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInN1YnN0YW5jZSIsIlN1YnN0YW5jZSIsIkdMQVNTIiwiaW5pdGlhbGx5QWN0aXZlIiwicGhldGlvUmVhZE9ubHkiLCJwaGV0aW9TdGF0ZSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJpc0FjdGl2ZVByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwibGF6eUxpbmsiLCJhY3RpdmUiLCJ0ZW1wZXJhdHVyZVByb3BlcnR5IiwicmVzZXQiLCJpbnRlcmFjdFdpdGhFbmVyZ3lQYWNrZXRzIiwiZW1FbmVyZ3lQYWNrZXRzIiwiYWJzb3JiZWRFbmVyZ3kiLCJmb3JFYWNoIiwiZW5lcmd5UGFja2V0Iiwid2F2ZWxlbmd0aCIsIklORlJBUkVEX1dBVkVMRU5HVEgiLCJlbmVyZ3lQYWNrZXRDcm9zc2VkVGhpc0xheWVyIiwiZW5lcmd5VG9BYnNvcmIiLCJlbmVyZ3kiLCJlbmVyZ3lBYnNvcnB0aW9uUHJvcG9ydGlvblByb3BlcnR5IiwidmFsdWUiLCJpbnRlcmFjdFdpdGhFbmVyZ3kiLCJkdCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXRtb3NwaGVyZUxheWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEF0bW9zcGhlcmVMYXllciBpcyBhIHN1YmNsYXNzIG9mIEVuZXJneUFic29yYmluZ0VtaXR0aW5nTGF5ZXIgYW5kIGFkZHMgdGhlIGJlaGF2aW9yIHRoYXQgaXMgc3BlY2lmaWMgdG8gdGhlXHJcbiAqIGF0bW9zcGhlcmljIGxheWVycy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgZ3JlZW5ob3VzZUVmZmVjdCBmcm9tICcuLi8uLi9ncmVlbmhvdXNlRWZmZWN0LmpzJztcclxuaW1wb3J0IEdyZWVuaG91c2VFZmZlY3RDb25zdGFudHMgZnJvbSAnLi4vR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lBYnNvcmJpbmdFbWl0dGluZ0xheWVyLCB7IEVuZXJneUFic29yYmluZ0VtaXR0aW5nTGF5ZXJPcHRpb25zIH0gZnJvbSAnLi9FbmVyZ3lBYnNvcmJpbmdFbWl0dGluZ0xheWVyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEVNRW5lcmd5UGFja2V0IGZyb20gJy4vRU1FbmVyZ3lQYWNrZXQuanMnO1xyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFdpdGhPcHRpb25hbCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvV2l0aE9wdGlvbmFsLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgaW5pdGlhbGx5QWN0aXZlPzogYm9vbGVhbjtcclxufTtcclxuZXhwb3J0IHR5cGUgQXRtb3NwaGVyZUxheWVyT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgV2l0aE9wdGlvbmFsPEVuZXJneUFic29yYmluZ0VtaXR0aW5nTGF5ZXJPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5jbGFzcyBBdG1vc3BoZXJlTGF5ZXIgZXh0ZW5kcyBFbmVyZ3lBYnNvcmJpbmdFbWl0dGluZ0xheWVyIHtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNBY3RpdmVQcm9wZXJ0eTogQm9vbGVhblByb3BlcnR5O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGFsdGl0dWRlOiBudW1iZXIsIHRhbmRlbTogVGFuZGVtLCBwcm92aWRlZE9wdGlvbnM/OiBBdG1vc3BoZXJlTGF5ZXJPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QXRtb3NwaGVyZUxheWVyT3B0aW9ucywgU2VsZk9wdGlvbnMsIEVuZXJneUFic29yYmluZ0VtaXR0aW5nTGF5ZXJPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICBzdWJzdGFuY2U6IEVuZXJneUFic29yYmluZ0VtaXR0aW5nTGF5ZXIuU3Vic3RhbmNlLkdMQVNTLFxyXG4gICAgICBpbml0aWFsbHlBY3RpdmU6IHRydWUsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSxcclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnTGF5ZXIgaW4gdGhlIGF0bW9zcGhlcmUgdGhhdCBhYnNvcmJzIGFuZCBlbWl0cyBlbmVyZ3kuIExheWVycyBhcmUgbnVtYmVyZWQgbG93LXRvLWhpZ2ggYWNjb3JkaW5nIHRvIGFsdGl0dWRlLidcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApIGFzIFJlcXVpcmVkPEF0bW9zcGhlcmVMYXllck9wdGlvbnM+O1xyXG5cclxuICAgIHN1cGVyKCBhbHRpdHVkZSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFRoZSBpc0FjdGl2ZVByb3BlcnR5IGRldGVybWluZXMgd2hldGhlciBvciBub3QgdGhpcyBsYXllciB3aWxsIGludGVyYWN0IHdpdGggdGhlIGVuZXJneSB0aGF0IHBhc3NlcyB0aHJvdWdoIGl0LlxyXG4gICAgdGhpcy5pc0FjdGl2ZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggb3B0aW9ucy5pbml0aWFsbHlBY3RpdmUsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdpc0FjdGl2ZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFdoZW4gdGhpcyBsYXllciBiZWNvbWVzIGluYWN0aXZlLCBpdCBsb3NlcyBhbnkgZW5lcmd5IHRoYXQgaXQgY29udGFpbmVkLlxyXG4gICAgdGhpcy5pc0FjdGl2ZVByb3BlcnR5LmxhenlMaW5rKCBhY3RpdmUgPT4ge1xyXG4gICAgICBpZiAoICFhY3RpdmUgKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wZXJhdHVyZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludGVyYWN0IHdpdGggdGhlIHByb3ZpZGVkIGVuZXJneSBwYWNrZXRzIGluIGEgd2F5IHRoYXQgaXMgc3BlY2lmaWMgdG8gdGhlIGF0bW9zcGhlcmljIGxheWVycy5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgaW50ZXJhY3RXaXRoRW5lcmd5UGFja2V0cyggZW1FbmVyZ3lQYWNrZXRzOiBFTUVuZXJneVBhY2tldFtdICk6IG51bWJlciB7XHJcbiAgICBsZXQgYWJzb3JiZWRFbmVyZ3kgPSAwO1xyXG4gICAgZW1FbmVyZ3lQYWNrZXRzLmZvckVhY2goIGVuZXJneVBhY2tldCA9PiB7XHJcblxyXG4gICAgICAvLyBBYnNvcmIgZW5lcmd5IGZyb20gSVIgcGFja2V0cyB0aGF0IGNyb3NzIHRoaXMgbGF5ZXIuXHJcbiAgICAgIGlmICggZW5lcmd5UGFja2V0LndhdmVsZW5ndGggPT09IEdyZWVuaG91c2VFZmZlY3RDb25zdGFudHMuSU5GUkFSRURfV0FWRUxFTkdUSCAmJlxyXG4gICAgICAgICAgIHRoaXMuZW5lcmd5UGFja2V0Q3Jvc3NlZFRoaXNMYXllciggZW5lcmd5UGFja2V0ICkgKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGVuZXJneVRvQWJzb3JiID0gZW5lcmd5UGFja2V0LmVuZXJneSAqIHRoaXMuZW5lcmd5QWJzb3JwdGlvblByb3BvcnRpb25Qcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgICBhYnNvcmJlZEVuZXJneSArPSBlbmVyZ3lUb0Fic29yYjtcclxuICAgICAgICBlbmVyZ3lQYWNrZXQuZW5lcmd5IC09IGVuZXJneVRvQWJzb3JiO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgICByZXR1cm4gYWJzb3JiZWRFbmVyZ3k7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBzZWUgYmFzZSBjbGFzcyBmb3IgZGV0YWlsc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBpbnRlcmFjdFdpdGhFbmVyZ3koIGVtRW5lcmd5UGFja2V0czogRU1FbmVyZ3lQYWNrZXRbXSwgZHQ6IG51bWJlciApOiB2b2lkIHtcclxuICAgIGlmICggdGhpcy5pc0FjdGl2ZVByb3BlcnR5LnZhbHVlICkge1xyXG4gICAgICBzdXBlci5pbnRlcmFjdFdpdGhFbmVyZ3koIGVtRW5lcmd5UGFja2V0cywgZHQgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdBdG1vc3BoZXJlTGF5ZXInLCBBdG1vc3BoZXJlTGF5ZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgQXRtb3NwaGVyZUxheWVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx5QkFBeUIsTUFBTSxpQ0FBaUM7QUFDdkUsT0FBT0MsNEJBQTRCLE1BQStDLG1DQUFtQztBQUdySCxPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFRN0QsTUFBTUMsZUFBZSxTQUFTSCw0QkFBNEIsQ0FBQztFQUdsREksV0FBV0EsQ0FBRUMsUUFBZ0IsRUFBRUMsTUFBYyxFQUFFQyxlQUF3QyxFQUFHO0lBRS9GLE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUEyRSxDQUFDLENBQUU7TUFFckdPLFNBQVMsRUFBRVQsNEJBQTRCLENBQUNVLFNBQVMsQ0FBQ0MsS0FBSztNQUN2REMsZUFBZSxFQUFFLElBQUk7TUFFckI7TUFDQU4sTUFBTSxFQUFFQSxNQUFNO01BQ2RPLGNBQWMsRUFBRSxJQUFJO01BQ3BCQyxXQUFXLEVBQUUsS0FBSztNQUNsQkMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBQyxFQUFFUixlQUFnQixDQUFxQztJQUV4RCxLQUFLLENBQUVGLFFBQVEsRUFBRUcsT0FBUSxDQUFDOztJQUUxQjtJQUNBLElBQUksQ0FBQ1EsZ0JBQWdCLEdBQUcsSUFBSWYsZUFBZSxDQUFFTyxPQUFPLENBQUNJLGVBQWUsRUFBRTtNQUNwRU4sTUFBTSxFQUFFRSxPQUFPLENBQUNGLE1BQU0sQ0FBQ1csWUFBWSxDQUFFLGtCQUFtQixDQUFDO01BQ3pESixjQUFjLEVBQUU7SUFDbEIsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDRyxnQkFBZ0IsQ0FBQ0UsUUFBUSxDQUFFQyxNQUFNLElBQUk7TUFDeEMsSUFBSyxDQUFDQSxNQUFNLEVBQUc7UUFDYixJQUFJLENBQUNDLG1CQUFtQixDQUFDQyxLQUFLLENBQUMsQ0FBQztNQUNsQztJQUNGLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtFQUNxQkMseUJBQXlCQSxDQUFFQyxlQUFpQyxFQUFXO0lBQ3hGLElBQUlDLGNBQWMsR0FBRyxDQUFDO0lBQ3RCRCxlQUFlLENBQUNFLE9BQU8sQ0FBRUMsWUFBWSxJQUFJO01BRXZDO01BQ0EsSUFBS0EsWUFBWSxDQUFDQyxVQUFVLEtBQUs1Qix5QkFBeUIsQ0FBQzZCLG1CQUFtQixJQUN6RSxJQUFJLENBQUNDLDRCQUE0QixDQUFFSCxZQUFhLENBQUMsRUFBRztRQUV2RCxNQUFNSSxjQUFjLEdBQUdKLFlBQVksQ0FBQ0ssTUFBTSxHQUFHLElBQUksQ0FBQ0Msa0NBQWtDLENBQUNDLEtBQUs7UUFDMUZULGNBQWMsSUFBSU0sY0FBYztRQUNoQ0osWUFBWSxDQUFDSyxNQUFNLElBQUlELGNBQWM7TUFDdkM7SUFDRixDQUFFLENBQUM7SUFDSCxPQUFPTixjQUFjO0VBQ3ZCOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQlUsa0JBQWtCQSxDQUFFWCxlQUFpQyxFQUFFWSxFQUFVLEVBQVM7SUFDeEYsSUFBSyxJQUFJLENBQUNuQixnQkFBZ0IsQ0FBQ2lCLEtBQUssRUFBRztNQUNqQyxLQUFLLENBQUNDLGtCQUFrQixDQUFFWCxlQUFlLEVBQUVZLEVBQUcsQ0FBQztJQUNqRDtFQUNGO0FBQ0Y7QUFFQXJDLGdCQUFnQixDQUFDc0MsUUFBUSxDQUFFLGlCQUFpQixFQUFFakMsZUFBZ0IsQ0FBQztBQUMvRCxlQUFlQSxlQUFlIn0=