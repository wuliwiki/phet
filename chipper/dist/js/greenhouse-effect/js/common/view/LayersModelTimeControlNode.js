// Copyright 2022-2023, University of Colorado Boulder

/**
 * The TimeControlNode for the screens that use the layer model. Specifically requires a
 * sun energy source. The LayersModel screens have unique descriptions for accessibility
 * depending on whether the sun is shining to guide the user to start sunlight to begin
 * interaction with the sim.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import TimeControlNode from '../../../../scenery-phet/js/TimeControlNode.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import GreenhouseEffectStrings from '../../GreenhouseEffectStrings.js';
class LayersModelTimeControlNode extends TimeControlNode {
  constructor(model, providedOptions) {
    const options = optionize()({
      timeSpeedProperty: model.timeSpeedProperty,
      playPauseStepButtonOptions: {
        stepForwardButtonOptions: {
          listener: () => model.stepModel(1 / 60) // assuming 60 fps
        }
      }
    }, providedOptions);
    super(model.isPlayingProperty, options);

    // There are unique descriptions depending on combinations of play/pause and whether the sun is shining. When
    // the sun is not shining it will be silent even when playing so we add hints to guide the user to start
    // the sunlight. There is no description when playing and sunlight is on because the sim will naturally
    // provide responsive descriptions about what is changing.
    model.isPlayingProperty.lazyLink(isPlaying => {
      if (!isPlaying) {
        if (!model.sunEnergySource.isShiningProperty.value) {
          // Sim is paused but the sun is not shining, add an additional hint about the sunlight being off
          // to guide the user to turn it on.
          this.alertDescriptionUtterance(GreenhouseEffectStrings.a11y.timeControls.simPausedSunlightOffAlertStringProperty);
        } else {
          // Paused while the sunlight is on - generic alert about the step button
          this.alertDescriptionUtterance(GreenhouseEffectStrings.a11y.timeControls.simPausedEmitterOnAlertStringProperty);
        }
      } else {
        if (!model.sunEnergySource.isShiningProperty.value) {
          // playing while the sun is off - hint to turn the sunlight on
          this.alertDescriptionUtterance(GreenhouseEffectStrings.a11y.timeControls.simPlayingSunlightOffAlertStringProperty);
        }
      }
    });

    // This does not need to be disposed/unlinked since it persists for the life of the sim.
    model.sunEnergySource.isShiningProperty.link(isSunShining => {
      this.playPauseStepButtons.enabled = isSunShining;
    });
  }
}
greenhouseEffect.register('LayersModelTimeControlNode', LayersModelTimeControlNode);
export default LayersModelTimeControlNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJUaW1lQ29udHJvbE5vZGUiLCJncmVlbmhvdXNlRWZmZWN0IiwiR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MiLCJMYXllcnNNb2RlbFRpbWVDb250cm9sTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidGltZVNwZWVkUHJvcGVydHkiLCJwbGF5UGF1c2VTdGVwQnV0dG9uT3B0aW9ucyIsInN0ZXBGb3J3YXJkQnV0dG9uT3B0aW9ucyIsImxpc3RlbmVyIiwic3RlcE1vZGVsIiwiaXNQbGF5aW5nUHJvcGVydHkiLCJsYXp5TGluayIsImlzUGxheWluZyIsInN1bkVuZXJneVNvdXJjZSIsImlzU2hpbmluZ1Byb3BlcnR5IiwidmFsdWUiLCJhbGVydERlc2NyaXB0aW9uVXR0ZXJhbmNlIiwiYTExeSIsInRpbWVDb250cm9scyIsInNpbVBhdXNlZFN1bmxpZ2h0T2ZmQWxlcnRTdHJpbmdQcm9wZXJ0eSIsInNpbVBhdXNlZEVtaXR0ZXJPbkFsZXJ0U3RyaW5nUHJvcGVydHkiLCJzaW1QbGF5aW5nU3VubGlnaHRPZmZBbGVydFN0cmluZ1Byb3BlcnR5IiwibGluayIsImlzU3VuU2hpbmluZyIsInBsYXlQYXVzZVN0ZXBCdXR0b25zIiwiZW5hYmxlZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGF5ZXJzTW9kZWxUaW1lQ29udHJvbE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIFRpbWVDb250cm9sTm9kZSBmb3IgdGhlIHNjcmVlbnMgdGhhdCB1c2UgdGhlIGxheWVyIG1vZGVsLiBTcGVjaWZpY2FsbHkgcmVxdWlyZXMgYVxyXG4gKiBzdW4gZW5lcmd5IHNvdXJjZS4gVGhlIExheWVyc01vZGVsIHNjcmVlbnMgaGF2ZSB1bmlxdWUgZGVzY3JpcHRpb25zIGZvciBhY2Nlc3NpYmlsaXR5XHJcbiAqIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBzdW4gaXMgc2hpbmluZyB0byBndWlkZSB0aGUgdXNlciB0byBzdGFydCBzdW5saWdodCB0byBiZWdpblxyXG4gKiBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzaW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgVGltZUNvbnRyb2xOb2RlLCB7IFRpbWVDb250cm9sTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvVGltZUNvbnRyb2xOb2RlLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncyBmcm9tICcuLi8uLi9HcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBMYXllcnNNb2RlbCBmcm9tICcuLi9tb2RlbC9MYXllcnNNb2RlbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuZXhwb3J0IHR5cGUgTGF5ZXJzTW9kZWxUaW1lQ29udHJvbE5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBUaW1lQ29udHJvbE5vZGVPcHRpb25zO1xyXG5cclxuY2xhc3MgTGF5ZXJzTW9kZWxUaW1lQ29udHJvbE5vZGUgZXh0ZW5kcyBUaW1lQ29udHJvbE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBMYXllcnNNb2RlbCwgcHJvdmlkZWRPcHRpb25zPzogTGF5ZXJzTW9kZWxUaW1lQ29udHJvbE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TGF5ZXJzTW9kZWxUaW1lQ29udHJvbE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgVGltZUNvbnRyb2xOb2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICB0aW1lU3BlZWRQcm9wZXJ0eTogbW9kZWwudGltZVNwZWVkUHJvcGVydHksXHJcbiAgICAgIHBsYXlQYXVzZVN0ZXBCdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgc3RlcEZvcndhcmRCdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgICBsaXN0ZW5lcjogKCkgPT4gbW9kZWwuc3RlcE1vZGVsKCAxIC8gNjAgKSAvLyBhc3N1bWluZyA2MCBmcHNcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbC5pc1BsYXlpbmdQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFRoZXJlIGFyZSB1bmlxdWUgZGVzY3JpcHRpb25zIGRlcGVuZGluZyBvbiBjb21iaW5hdGlvbnMgb2YgcGxheS9wYXVzZSBhbmQgd2hldGhlciB0aGUgc3VuIGlzIHNoaW5pbmcuIFdoZW5cclxuICAgIC8vIHRoZSBzdW4gaXMgbm90IHNoaW5pbmcgaXQgd2lsbCBiZSBzaWxlbnQgZXZlbiB3aGVuIHBsYXlpbmcgc28gd2UgYWRkIGhpbnRzIHRvIGd1aWRlIHRoZSB1c2VyIHRvIHN0YXJ0XHJcbiAgICAvLyB0aGUgc3VubGlnaHQuIFRoZXJlIGlzIG5vIGRlc2NyaXB0aW9uIHdoZW4gcGxheWluZyBhbmQgc3VubGlnaHQgaXMgb24gYmVjYXVzZSB0aGUgc2ltIHdpbGwgbmF0dXJhbGx5XHJcbiAgICAvLyBwcm92aWRlIHJlc3BvbnNpdmUgZGVzY3JpcHRpb25zIGFib3V0IHdoYXQgaXMgY2hhbmdpbmcuXHJcbiAgICBtb2RlbC5pc1BsYXlpbmdQcm9wZXJ0eS5sYXp5TGluayggaXNQbGF5aW5nID0+IHtcclxuICAgICAgaWYgKCAhaXNQbGF5aW5nICkge1xyXG4gICAgICAgIGlmICggIW1vZGVsLnN1bkVuZXJneVNvdXJjZS5pc1NoaW5pbmdQcm9wZXJ0eS52YWx1ZSApIHtcclxuXHJcbiAgICAgICAgICAvLyBTaW0gaXMgcGF1c2VkIGJ1dCB0aGUgc3VuIGlzIG5vdCBzaGluaW5nLCBhZGQgYW4gYWRkaXRpb25hbCBoaW50IGFib3V0IHRoZSBzdW5saWdodCBiZWluZyBvZmZcclxuICAgICAgICAgIC8vIHRvIGd1aWRlIHRoZSB1c2VyIHRvIHR1cm4gaXQgb24uXHJcbiAgICAgICAgICB0aGlzLmFsZXJ0RGVzY3JpcHRpb25VdHRlcmFuY2UoXHJcbiAgICAgICAgICAgIEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkudGltZUNvbnRyb2xzLnNpbVBhdXNlZFN1bmxpZ2h0T2ZmQWxlcnRTdHJpbmdQcm9wZXJ0eVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gUGF1c2VkIHdoaWxlIHRoZSBzdW5saWdodCBpcyBvbiAtIGdlbmVyaWMgYWxlcnQgYWJvdXQgdGhlIHN0ZXAgYnV0dG9uXHJcbiAgICAgICAgICB0aGlzLmFsZXJ0RGVzY3JpcHRpb25VdHRlcmFuY2UoXHJcbiAgICAgICAgICAgIEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkudGltZUNvbnRyb2xzLnNpbVBhdXNlZEVtaXR0ZXJPbkFsZXJ0U3RyaW5nUHJvcGVydHlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICggIW1vZGVsLnN1bkVuZXJneVNvdXJjZS5pc1NoaW5pbmdQcm9wZXJ0eS52YWx1ZSApIHtcclxuXHJcbiAgICAgICAgICAvLyBwbGF5aW5nIHdoaWxlIHRoZSBzdW4gaXMgb2ZmIC0gaGludCB0byB0dXJuIHRoZSBzdW5saWdodCBvblxyXG4gICAgICAgICAgdGhpcy5hbGVydERlc2NyaXB0aW9uVXR0ZXJhbmNlKFxyXG4gICAgICAgICAgICBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnRpbWVDb250cm9scy5zaW1QbGF5aW5nU3VubGlnaHRPZmZBbGVydFN0cmluZ1Byb3BlcnR5XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFRoaXMgZG9lcyBub3QgbmVlZCB0byBiZSBkaXNwb3NlZC91bmxpbmtlZCBzaW5jZSBpdCBwZXJzaXN0cyBmb3IgdGhlIGxpZmUgb2YgdGhlIHNpbS5cclxuICAgIG1vZGVsLnN1bkVuZXJneVNvdXJjZS5pc1NoaW5pbmdQcm9wZXJ0eS5saW5rKCBpc1N1blNoaW5pbmcgPT4ge1xyXG4gICAgICB0aGlzLnBsYXlQYXVzZVN0ZXBCdXR0b25zLmVuYWJsZWQgPSBpc1N1blNoaW5pbmc7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmVlbmhvdXNlRWZmZWN0LnJlZ2lzdGVyKCAnTGF5ZXJzTW9kZWxUaW1lQ29udHJvbE5vZGUnLCBMYXllcnNNb2RlbFRpbWVDb250cm9sTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBMYXllcnNNb2RlbFRpbWVDb250cm9sTm9kZTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLGVBQWUsTUFBa0MsZ0RBQWdEO0FBQ3hHLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFNdEUsTUFBTUMsMEJBQTBCLFNBQVNILGVBQWUsQ0FBQztFQUVoREksV0FBV0EsQ0FBRUMsS0FBa0IsRUFBRUMsZUFBbUQsRUFBRztJQUU1RixNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBeUUsQ0FBQyxDQUFFO01BQ25HUyxpQkFBaUIsRUFBRUgsS0FBSyxDQUFDRyxpQkFBaUI7TUFDMUNDLDBCQUEwQixFQUFFO1FBQzFCQyx3QkFBd0IsRUFBRTtVQUN4QkMsUUFBUSxFQUFFQSxDQUFBLEtBQU1OLEtBQUssQ0FBQ08sU0FBUyxDQUFFLENBQUMsR0FBRyxFQUFHLENBQUMsQ0FBQztRQUM1QztNQUNGO0lBQ0YsQ0FBQyxFQUFFTixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsS0FBSyxDQUFDUSxpQkFBaUIsRUFBRU4sT0FBUSxDQUFDOztJQUV6QztJQUNBO0lBQ0E7SUFDQTtJQUNBRixLQUFLLENBQUNRLGlCQUFpQixDQUFDQyxRQUFRLENBQUVDLFNBQVMsSUFBSTtNQUM3QyxJQUFLLENBQUNBLFNBQVMsRUFBRztRQUNoQixJQUFLLENBQUNWLEtBQUssQ0FBQ1csZUFBZSxDQUFDQyxpQkFBaUIsQ0FBQ0MsS0FBSyxFQUFHO1VBRXBEO1VBQ0E7VUFDQSxJQUFJLENBQUNDLHlCQUF5QixDQUM1QmpCLHVCQUF1QixDQUFDa0IsSUFBSSxDQUFDQyxZQUFZLENBQUNDLHVDQUM1QyxDQUFDO1FBQ0gsQ0FBQyxNQUNJO1VBRUg7VUFDQSxJQUFJLENBQUNILHlCQUF5QixDQUM1QmpCLHVCQUF1QixDQUFDa0IsSUFBSSxDQUFDQyxZQUFZLENBQUNFLHFDQUM1QyxDQUFDO1FBQ0g7TUFDRixDQUFDLE1BQ0k7UUFDSCxJQUFLLENBQUNsQixLQUFLLENBQUNXLGVBQWUsQ0FBQ0MsaUJBQWlCLENBQUNDLEtBQUssRUFBRztVQUVwRDtVQUNBLElBQUksQ0FBQ0MseUJBQXlCLENBQzVCakIsdUJBQXVCLENBQUNrQixJQUFJLENBQUNDLFlBQVksQ0FBQ0csd0NBQzVDLENBQUM7UUFDSDtNQUNGO0lBQ0YsQ0FBRSxDQUFDOztJQUVIO0lBQ0FuQixLQUFLLENBQUNXLGVBQWUsQ0FBQ0MsaUJBQWlCLENBQUNRLElBQUksQ0FBRUMsWUFBWSxJQUFJO01BQzVELElBQUksQ0FBQ0Msb0JBQW9CLENBQUNDLE9BQU8sR0FBR0YsWUFBWTtJQUNsRCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUF6QixnQkFBZ0IsQ0FBQzRCLFFBQVEsQ0FBRSw0QkFBNEIsRUFBRTFCLDBCQUEyQixDQUFDO0FBQ3JGLGVBQWVBLDBCQUEwQiJ9