// Copyright 2022, University of Colorado Boulder

/**
 * AtmosphericPhotonsSoundGenerator is used to produce sounds related to photons being emitted by or absorbed into the
 * atmosphere.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import Range from '../../../../dot/js/Range.js';
import SoundClip from '../../../../tambo/js/sound-generators/SoundClip.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import emissionOfInfraredPhotonFromAtmosphere_mp3 from '../../../sounds/emissionOfInfraredPhotonFromAtmosphere_mp3.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Photon from '../model/Photon.js';
import dotRandom from '../../../../dot/js/dotRandom.js';

// constants
const PLAY_DECISION_THRESHOLD = 0.5; // controls what proportion of emissions cause sounds

// playback rate variation, one musical half step up and down
const PLAYBACK_RATE_RANGE = new Range(0.94387431268, 1.05946309436);

// types for options

class AtmosphericPhotonsSoundGenerator extends SoundClip {
  constructor(photonCollection, providedOptions) {
    const options = optionize()({
      rateChangesAffectPlayingSounds: false
    }, providedOptions);
    super(emissionOfInfraredPhotonFromAtmosphere_mp3, options);
    photonCollection.photons.addItemAddedListener(addedPhoton => {
      // A new photon has been added to the collection.  Decide whether to play a sound signifying its arrival based on
      // a number of factors, one of which is a random threshold used to reduce the number of sounds produced so that it
      // doesn't become too distracting.
      const playSound = addedPhoton.isInfrared && addedPhoton.showState === Photon.ShowState.ALWAYS && addedPhoton.positionProperty.value.y > 0 &&
      // don't play for photons coming from the ground
      dotRandom.nextDouble() < PLAY_DECISION_THRESHOLD;
      if (playSound) {
        // Do a little randomization of the playback rate so that the sound isn't too repetitive.
        this.setPlaybackRate(dotRandom.nextDoubleInRange(PLAYBACK_RATE_RANGE));

        // Play the sound.
        this.play();
      }
    });
  }
}
greenhouseEffect.register('AtmosphericPhotonsSoundGenerator', AtmosphericPhotonsSoundGenerator);
export default AtmosphericPhotonsSoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlNvdW5kQ2xpcCIsImdyZWVuaG91c2VFZmZlY3QiLCJlbWlzc2lvbk9mSW5mcmFyZWRQaG90b25Gcm9tQXRtb3NwaGVyZV9tcDMiLCJvcHRpb25pemUiLCJQaG90b24iLCJkb3RSYW5kb20iLCJQTEFZX0RFQ0lTSU9OX1RIUkVTSE9MRCIsIlBMQVlCQUNLX1JBVEVfUkFOR0UiLCJBdG1vc3BoZXJpY1Bob3RvbnNTb3VuZEdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwicGhvdG9uQ29sbGVjdGlvbiIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJyYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHMiLCJwaG90b25zIiwiYWRkSXRlbUFkZGVkTGlzdGVuZXIiLCJhZGRlZFBob3RvbiIsInBsYXlTb3VuZCIsImlzSW5mcmFyZWQiLCJzaG93U3RhdGUiLCJTaG93U3RhdGUiLCJBTFdBWVMiLCJwb3NpdGlvblByb3BlcnR5IiwidmFsdWUiLCJ5IiwibmV4dERvdWJsZSIsInNldFBsYXliYWNrUmF0ZSIsIm5leHREb3VibGVJblJhbmdlIiwicGxheSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXRtb3NwaGVyaWNQaG90b25zU291bmRHZW5lcmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEF0bW9zcGhlcmljUGhvdG9uc1NvdW5kR2VuZXJhdG9yIGlzIHVzZWQgdG8gcHJvZHVjZSBzb3VuZHMgcmVsYXRlZCB0byBwaG90b25zIGJlaW5nIGVtaXR0ZWQgYnkgb3IgYWJzb3JiZWQgaW50byB0aGVcclxuICogYXRtb3NwaGVyZS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFNvdW5kQ2xpcCwgeyBTb3VuZENsaXBPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGFtYm8vanMvc291bmQtZ2VuZXJhdG9ycy9Tb3VuZENsaXAuanMnO1xyXG5pbXBvcnQgZ3JlZW5ob3VzZUVmZmVjdCBmcm9tICcuLi8uLi9ncmVlbmhvdXNlRWZmZWN0LmpzJztcclxuaW1wb3J0IGVtaXNzaW9uT2ZJbmZyYXJlZFBob3RvbkZyb21BdG1vc3BoZXJlX21wMyBmcm9tICcuLi8uLi8uLi9zb3VuZHMvZW1pc3Npb25PZkluZnJhcmVkUGhvdG9uRnJvbUF0bW9zcGhlcmVfbXAzLmpzJztcclxuaW1wb3J0IFBob3RvbkNvbGxlY3Rpb24gZnJvbSAnLi4vbW9kZWwvUGhvdG9uQ29sbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGhvdG9uIGZyb20gJy4uL21vZGVsL1Bob3Rvbi5qcyc7XHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgUExBWV9ERUNJU0lPTl9USFJFU0hPTEQgPSAwLjU7IC8vIGNvbnRyb2xzIHdoYXQgcHJvcG9ydGlvbiBvZiBlbWlzc2lvbnMgY2F1c2Ugc291bmRzXHJcblxyXG4vLyBwbGF5YmFjayByYXRlIHZhcmlhdGlvbiwgb25lIG11c2ljYWwgaGFsZiBzdGVwIHVwIGFuZCBkb3duXHJcbmNvbnN0IFBMQVlCQUNLX1JBVEVfUkFOR0UgPSBuZXcgUmFuZ2UoIDAuOTQzODc0MzEyNjgsIDEuMDU5NDYzMDk0MzYgKTtcclxuXHJcbi8vIHR5cGVzIGZvciBvcHRpb25zXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG50eXBlIEF0bW9zcGhlcmljUGhvdG9uc1NvdW5kR2VuZXJhdG9yT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU291bmRDbGlwT3B0aW9ucztcclxuXHJcbmNsYXNzIEF0bW9zcGhlcmljUGhvdG9uc1NvdW5kR2VuZXJhdG9yIGV4dGVuZHMgU291bmRDbGlwIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwaG90b25Db2xsZWN0aW9uOiBQaG90b25Db2xsZWN0aW9uLCBwcm92aWRlZE9wdGlvbnM/OiBBdG1vc3BoZXJpY1Bob3RvbnNTb3VuZEdlbmVyYXRvck9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxBdG1vc3BoZXJpY1Bob3RvbnNTb3VuZEdlbmVyYXRvck9wdGlvbnMsIFNlbGZPcHRpb25zLCBTb3VuZENsaXBPcHRpb25zPigpKCB7XHJcbiAgICAgIHJhdGVDaGFuZ2VzQWZmZWN0UGxheWluZ1NvdW5kczogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBlbWlzc2lvbk9mSW5mcmFyZWRQaG90b25Gcm9tQXRtb3NwaGVyZV9tcDMsIG9wdGlvbnMgKTtcclxuXHJcbiAgICBwaG90b25Db2xsZWN0aW9uLnBob3RvbnMuYWRkSXRlbUFkZGVkTGlzdGVuZXIoICggYWRkZWRQaG90b246IFBob3RvbiApID0+IHtcclxuXHJcbiAgICAgIC8vIEEgbmV3IHBob3RvbiBoYXMgYmVlbiBhZGRlZCB0byB0aGUgY29sbGVjdGlvbi4gIERlY2lkZSB3aGV0aGVyIHRvIHBsYXkgYSBzb3VuZCBzaWduaWZ5aW5nIGl0cyBhcnJpdmFsIGJhc2VkIG9uXHJcbiAgICAgIC8vIGEgbnVtYmVyIG9mIGZhY3RvcnMsIG9uZSBvZiB3aGljaCBpcyBhIHJhbmRvbSB0aHJlc2hvbGQgdXNlZCB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBzb3VuZHMgcHJvZHVjZWQgc28gdGhhdCBpdFxyXG4gICAgICAvLyBkb2Vzbid0IGJlY29tZSB0b28gZGlzdHJhY3RpbmcuXHJcbiAgICAgIGNvbnN0IHBsYXlTb3VuZCA9IGFkZGVkUGhvdG9uLmlzSW5mcmFyZWQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWRQaG90b24uc2hvd1N0YXRlID09PSBQaG90b24uU2hvd1N0YXRlLkFMV0FZUyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRlZFBob3Rvbi5wb3NpdGlvblByb3BlcnR5LnZhbHVlLnkgPiAwICYmIC8vIGRvbid0IHBsYXkgZm9yIHBob3RvbnMgY29taW5nIGZyb20gdGhlIGdyb3VuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3RSYW5kb20ubmV4dERvdWJsZSgpIDwgUExBWV9ERUNJU0lPTl9USFJFU0hPTEQ7XHJcblxyXG4gICAgICBpZiAoIHBsYXlTb3VuZCApIHtcclxuXHJcbiAgICAgICAgLy8gRG8gYSBsaXR0bGUgcmFuZG9taXphdGlvbiBvZiB0aGUgcGxheWJhY2sgcmF0ZSBzbyB0aGF0IHRoZSBzb3VuZCBpc24ndCB0b28gcmVwZXRpdGl2ZS5cclxuICAgICAgICB0aGlzLnNldFBsYXliYWNrUmF0ZSggZG90UmFuZG9tLm5leHREb3VibGVJblJhbmdlKCBQTEFZQkFDS19SQVRFX1JBTkdFICkgKTtcclxuXHJcbiAgICAgICAgLy8gUGxheSB0aGUgc291bmQuXHJcbiAgICAgICAgdGhpcy5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdBdG1vc3BoZXJpY1Bob3RvbnNTb3VuZEdlbmVyYXRvcicsIEF0bW9zcGhlcmljUGhvdG9uc1NvdW5kR2VuZXJhdG9yICk7XHJcbmV4cG9ydCBkZWZhdWx0IEF0bW9zcGhlcmljUGhvdG9uc1NvdW5kR2VuZXJhdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsU0FBUyxNQUE0QixvREFBb0Q7QUFDaEcsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLDBDQUEwQyxNQUFNLCtEQUErRDtBQUV0SCxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUNuRixPQUFPQyxNQUFNLE1BQU0sb0JBQW9CO0FBQ3ZDLE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7O0FBRXZEO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLENBQUM7O0FBRXJDO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsSUFBSVIsS0FBSyxDQUFFLGFBQWEsRUFBRSxhQUFjLENBQUM7O0FBRXJFOztBQUlBLE1BQU1TLGdDQUFnQyxTQUFTUixTQUFTLENBQUM7RUFFaERTLFdBQVdBLENBQUVDLGdCQUFrQyxFQUFFQyxlQUF5RCxFQUFHO0lBRWxILE1BQU1DLE9BQU8sR0FBR1QsU0FBUyxDQUF5RSxDQUFDLENBQUU7TUFDbkdVLDhCQUE4QixFQUFFO0lBQ2xDLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVULDBDQUEwQyxFQUFFVSxPQUFRLENBQUM7SUFFNURGLGdCQUFnQixDQUFDSSxPQUFPLENBQUNDLG9CQUFvQixDQUFJQyxXQUFtQixJQUFNO01BRXhFO01BQ0E7TUFDQTtNQUNBLE1BQU1DLFNBQVMsR0FBR0QsV0FBVyxDQUFDRSxVQUFVLElBQ3RCRixXQUFXLENBQUNHLFNBQVMsS0FBS2YsTUFBTSxDQUFDZ0IsU0FBUyxDQUFDQyxNQUFNLElBQ2pETCxXQUFXLENBQUNNLGdCQUFnQixDQUFDQyxLQUFLLENBQUNDLENBQUMsR0FBRyxDQUFDO01BQUk7TUFDNUNuQixTQUFTLENBQUNvQixVQUFVLENBQUMsQ0FBQyxHQUFHbkIsdUJBQXVCO01BRWxFLElBQUtXLFNBQVMsRUFBRztRQUVmO1FBQ0EsSUFBSSxDQUFDUyxlQUFlLENBQUVyQixTQUFTLENBQUNzQixpQkFBaUIsQ0FBRXBCLG1CQUFvQixDQUFFLENBQUM7O1FBRTFFO1FBQ0EsSUFBSSxDQUFDcUIsSUFBSSxDQUFDLENBQUM7TUFDYjtJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQTNCLGdCQUFnQixDQUFDNEIsUUFBUSxDQUFFLGtDQUFrQyxFQUFFckIsZ0NBQWlDLENBQUM7QUFDakcsZUFBZUEsZ0NBQWdDIn0=