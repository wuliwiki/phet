// Copyright 2021-2022, University of Colorado Boulder

/**
 * A reusable checkbox that controls whether the surface thermometer is shown, with label and icon.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import ThermometerNode from '../../../../scenery-phet/js/ThermometerNode.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import GreenhouseEffectStrings from '../../GreenhouseEffectStrings.js';
import GreenhouseEffectCheckbox from './GreenhouseEffectCheckbox.js';
import Utterance from '../../../../utterance-queue/js/Utterance.js';
import TemperatureDescriber from './describers/TemperatureDescriber.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import Multilink from '../../../../axon/js/Multilink.js';
class SurfaceThermometerCheckbox extends GreenhouseEffectCheckbox {
  constructor(property, temperatureProperty, temperatureUnitsProperty, tandem) {
    const iconNode = new ThermometerNode(new NumberProperty(2), 0, 5, {
      scale: 0.2
    });
    const checkedUtterance = new Utterance();
    Multilink.multilink([temperatureProperty, temperatureUnitsProperty], (temperature, units) => {
      checkedUtterance.alert = StringUtils.fillIn(GreenhouseEffectStrings.a11y.thermometerShownAlertPatternStringProperty, {
        value: TemperatureDescriber.getQuantitativeTemperatureDescription(temperature, units)
      });
    });
    super(property, GreenhouseEffectStrings.surfaceThermometerStringProperty, {
      iconNode: iconNode,
      // pdom
      helpText: GreenhouseEffectStrings.a11y.surfaceThermometer.helpTextStringProperty,
      checkedContextResponse: checkedUtterance,
      uncheckedContextResponse: GreenhouseEffectStrings.a11y.thermometerRemovedAlertStringProperty,
      // phet-io
      tandem: tandem
    });
  }
}
greenhouseEffect.register('SurfaceThermometerCheckbox', SurfaceThermometerCheckbox);
export default SurfaceThermometerCheckbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlRoZXJtb21ldGVyTm9kZSIsImdyZWVuaG91c2VFZmZlY3QiLCJHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncyIsIkdyZWVuaG91c2VFZmZlY3RDaGVja2JveCIsIlV0dGVyYW5jZSIsIlRlbXBlcmF0dXJlRGVzY3JpYmVyIiwiU3RyaW5nVXRpbHMiLCJNdWx0aWxpbmsiLCJTdXJmYWNlVGhlcm1vbWV0ZXJDaGVja2JveCIsImNvbnN0cnVjdG9yIiwicHJvcGVydHkiLCJ0ZW1wZXJhdHVyZVByb3BlcnR5IiwidGVtcGVyYXR1cmVVbml0c1Byb3BlcnR5IiwidGFuZGVtIiwiaWNvbk5vZGUiLCJzY2FsZSIsImNoZWNrZWRVdHRlcmFuY2UiLCJtdWx0aWxpbmsiLCJ0ZW1wZXJhdHVyZSIsInVuaXRzIiwiYWxlcnQiLCJmaWxsSW4iLCJhMTF5IiwidGhlcm1vbWV0ZXJTaG93bkFsZXJ0UGF0dGVyblN0cmluZ1Byb3BlcnR5IiwidmFsdWUiLCJnZXRRdWFudGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uIiwic3VyZmFjZVRoZXJtb21ldGVyU3RyaW5nUHJvcGVydHkiLCJoZWxwVGV4dCIsInN1cmZhY2VUaGVybW9tZXRlciIsImhlbHBUZXh0U3RyaW5nUHJvcGVydHkiLCJjaGVja2VkQ29udGV4dFJlc3BvbnNlIiwidW5jaGVja2VkQ29udGV4dFJlc3BvbnNlIiwidGhlcm1vbWV0ZXJSZW1vdmVkQWxlcnRTdHJpbmdQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3VyZmFjZVRoZXJtb21ldGVyQ2hlY2tib3gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSByZXVzYWJsZSBjaGVja2JveCB0aGF0IGNvbnRyb2xzIHdoZXRoZXIgdGhlIHN1cmZhY2UgdGhlcm1vbWV0ZXIgaXMgc2hvd24sIHdpdGggbGFiZWwgYW5kIGljb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRoZXJtb21ldGVyTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvVGhlcm1vbWV0ZXJOb2RlLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncyBmcm9tICcuLi8uLi9HcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBUZW1wZXJhdHVyZVVuaXRzIGZyb20gJy4uL21vZGVsL1RlbXBlcmF0dXJlVW5pdHMuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdENoZWNrYm94IGZyb20gJy4vR3JlZW5ob3VzZUVmZmVjdENoZWNrYm94LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgVXR0ZXJhbmNlIGZyb20gJy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9VdHRlcmFuY2UuanMnO1xyXG5pbXBvcnQgVGVtcGVyYXR1cmVEZXNjcmliZXIgZnJvbSAnLi9kZXNjcmliZXJzL1RlbXBlcmF0dXJlRGVzY3JpYmVyLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5cclxuY2xhc3MgU3VyZmFjZVRoZXJtb21ldGVyQ2hlY2tib3ggZXh0ZW5kcyBHcmVlbmhvdXNlRWZmZWN0Q2hlY2tib3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlUHJvcGVydHk6IE51bWJlclByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGVtcGVyYXR1cmVVbml0c1Byb3BlcnR5OiBQcm9wZXJ0eTxUZW1wZXJhdHVyZVVuaXRzPixcclxuICAgICAgICAgICAgICAgICAgICAgIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IGljb25Ob2RlID0gbmV3IFRoZXJtb21ldGVyTm9kZSggbmV3IE51bWJlclByb3BlcnR5KCAyICksIDAsIDUsIHsgc2NhbGU6IDAuMiB9ICk7XHJcblxyXG4gICAgY29uc3QgY2hlY2tlZFV0dGVyYW5jZSA9IG5ldyBVdHRlcmFuY2UoKTtcclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoIFsgdGVtcGVyYXR1cmVQcm9wZXJ0eSwgdGVtcGVyYXR1cmVVbml0c1Byb3BlcnR5IF0sICggdGVtcGVyYXR1cmUsIHVuaXRzICkgPT4ge1xyXG4gICAgICBjaGVja2VkVXR0ZXJhbmNlLmFsZXJ0ID0gU3RyaW5nVXRpbHMuZmlsbEluKFxyXG4gICAgICAgIEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkudGhlcm1vbWV0ZXJTaG93bkFsZXJ0UGF0dGVyblN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHZhbHVlOiBUZW1wZXJhdHVyZURlc2NyaWJlci5nZXRRdWFudGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uKCB0ZW1wZXJhdHVyZSwgdW5pdHMgKVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggcHJvcGVydHksIEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLnN1cmZhY2VUaGVybW9tZXRlclN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGljb25Ob2RlOiBpY29uTm9kZSxcclxuXHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgaGVscFRleHQ6IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkuc3VyZmFjZVRoZXJtb21ldGVyLmhlbHBUZXh0U3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGNoZWNrZWRDb250ZXh0UmVzcG9uc2U6IGNoZWNrZWRVdHRlcmFuY2UsXHJcbiAgICAgIHVuY2hlY2tlZENvbnRleHRSZXNwb25zZTogR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS50aGVybW9tZXRlclJlbW92ZWRBbGVydFN0cmluZ1Byb3BlcnR5LFxyXG5cclxuICAgICAgLy8gcGhldC1pb1xyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JlZW5ob3VzZUVmZmVjdC5yZWdpc3RlciggJ1N1cmZhY2VUaGVybW9tZXRlckNoZWNrYm94JywgU3VyZmFjZVRoZXJtb21ldGVyQ2hlY2tib3ggKTtcclxuZXhwb3J0IGRlZmF1bHQgU3VyZmFjZVRoZXJtb21ldGVyQ2hlY2tib3g7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLGVBQWUsTUFBTSxnREFBZ0Q7QUFDNUUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUV0RSxPQUFPQyx3QkFBd0IsTUFBTSwrQkFBK0I7QUFHcEUsT0FBT0MsU0FBUyxNQUFNLDZDQUE2QztBQUNuRSxPQUFPQyxvQkFBb0IsTUFBTSxzQ0FBc0M7QUFDdkUsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyxTQUFTLE1BQU0sa0NBQWtDO0FBRXhELE1BQU1DLDBCQUEwQixTQUFTTCx3QkFBd0IsQ0FBQztFQUV6RE0sV0FBV0EsQ0FBRUMsUUFBMkIsRUFDM0JDLG1CQUFtQyxFQUNuQ0Msd0JBQW9ELEVBQ3BEQyxNQUFjLEVBQUc7SUFFbkMsTUFBTUMsUUFBUSxHQUFHLElBQUlkLGVBQWUsQ0FBRSxJQUFJRCxjQUFjLENBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUFFZ0IsS0FBSyxFQUFFO0lBQUksQ0FBRSxDQUFDO0lBRXJGLE1BQU1DLGdCQUFnQixHQUFHLElBQUlaLFNBQVMsQ0FBQyxDQUFDO0lBQ3hDRyxTQUFTLENBQUNVLFNBQVMsQ0FBRSxDQUFFTixtQkFBbUIsRUFBRUMsd0JBQXdCLENBQUUsRUFBRSxDQUFFTSxXQUFXLEVBQUVDLEtBQUssS0FBTTtNQUNoR0gsZ0JBQWdCLENBQUNJLEtBQUssR0FBR2QsV0FBVyxDQUFDZSxNQUFNLENBQ3pDbkIsdUJBQXVCLENBQUNvQixJQUFJLENBQUNDLDBDQUEwQyxFQUN2RTtRQUNFQyxLQUFLLEVBQUVuQixvQkFBb0IsQ0FBQ29CLHFDQUFxQyxDQUFFUCxXQUFXLEVBQUVDLEtBQU07TUFDeEYsQ0FDRixDQUFDO0lBQ0gsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFVCxRQUFRLEVBQUVSLHVCQUF1QixDQUFDd0IsZ0NBQWdDLEVBQUU7TUFDekVaLFFBQVEsRUFBRUEsUUFBUTtNQUVsQjtNQUNBYSxRQUFRLEVBQUV6Qix1QkFBdUIsQ0FBQ29CLElBQUksQ0FBQ00sa0JBQWtCLENBQUNDLHNCQUFzQjtNQUNoRkMsc0JBQXNCLEVBQUVkLGdCQUFnQjtNQUN4Q2Usd0JBQXdCLEVBQUU3Qix1QkFBdUIsQ0FBQ29CLElBQUksQ0FBQ1UscUNBQXFDO01BRTVGO01BQ0FuQixNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBWixnQkFBZ0IsQ0FBQ2dDLFFBQVEsQ0FBRSw0QkFBNEIsRUFBRXpCLDBCQUEyQixDQUFDO0FBQ3JGLGVBQWVBLDBCQUEwQiJ9