// Copyright 2021-2022, University of Colorado Boulder

/**
 * A Node that supports Interactive Description for the observation window, with PDOM structure and
 * descriptions for the state of the simulation.
 *
 * NOTE: This is in active development, it is a work in progress.
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import { Node } from '../../../../scenery/js/imports.js';
import greenhouseEffect from '../../greenhouseEffect.js';
// constants
const ITEM_NODE_OPTIONS = {
  tagName: 'li'
};
class ObservationWindowPDOMNode extends Node {
  constructor(model) {
    super({
      // pdom
      tagName: 'ul'
    });
    const sunlightItemNode = new Node(ITEM_NODE_OPTIONS);
    this.concentrationItemNode = new Node(ITEM_NODE_OPTIONS);
    this.skyItemNode = new Node(ITEM_NODE_OPTIONS);
    this.sunlightWavesItemNode = new Node(ITEM_NODE_OPTIONS);
    this.infraredWavesItemNode = new Node(ITEM_NODE_OPTIONS);
    this.surfaceTemperatureItemNode = new Node(ITEM_NODE_OPTIONS);
    this.children = [sunlightItemNode, this.concentrationItemNode, this.skyItemNode, this.sunlightWavesItemNode, this.infraredWavesItemNode, this.surfaceTemperatureItemNode];
    model.sunEnergySource.isShiningProperty.link(isShining => {
      const descriptionString = isShining ? 'on' : 'off';
      sunlightItemNode.innerContent = StringUtils.fillIn('The sunlight is {{sunDescription}}.', {
        sunDescription: descriptionString
      });
    });
  }
}
greenhouseEffect.register('ObservationWindowPDOMNode', ObservationWindowPDOMNode);
export default ObservationWindowPDOMNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIk5vZGUiLCJncmVlbmhvdXNlRWZmZWN0IiwiSVRFTV9OT0RFX09QVElPTlMiLCJ0YWdOYW1lIiwiT2JzZXJ2YXRpb25XaW5kb3dQRE9NTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJzdW5saWdodEl0ZW1Ob2RlIiwiY29uY2VudHJhdGlvbkl0ZW1Ob2RlIiwic2t5SXRlbU5vZGUiLCJzdW5saWdodFdhdmVzSXRlbU5vZGUiLCJpbmZyYXJlZFdhdmVzSXRlbU5vZGUiLCJzdXJmYWNlVGVtcGVyYXR1cmVJdGVtTm9kZSIsImNoaWxkcmVuIiwic3VuRW5lcmd5U291cmNlIiwiaXNTaGluaW5nUHJvcGVydHkiLCJsaW5rIiwiaXNTaGluaW5nIiwiZGVzY3JpcHRpb25TdHJpbmciLCJpbm5lckNvbnRlbnQiLCJmaWxsSW4iLCJzdW5EZXNjcmlwdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiT2JzZXJ2YXRpb25XaW5kb3dQRE9NTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIE5vZGUgdGhhdCBzdXBwb3J0cyBJbnRlcmFjdGl2ZSBEZXNjcmlwdGlvbiBmb3IgdGhlIG9ic2VydmF0aW9uIHdpbmRvdywgd2l0aCBQRE9NIHN0cnVjdHVyZSBhbmRcclxuICogZGVzY3JpcHRpb25zIGZvciB0aGUgc3RhdGUgb2YgdGhlIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIE5PVEU6IFRoaXMgaXMgaW4gYWN0aXZlIGRldmVsb3BtZW50LCBpdCBpcyBhIHdvcmsgaW4gcHJvZ3Jlc3MuXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBMYXllcnNNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvTGF5ZXJzTW9kZWwuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IElURU1fTk9ERV9PUFRJT05TID0geyB0YWdOYW1lOiAnbGknIH07XHJcblxyXG5jbGFzcyBPYnNlcnZhdGlvbldpbmRvd1BET01Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcbiAgcHJvdGVjdGVkIHNreUl0ZW1Ob2RlOiBOb2RlO1xyXG4gIHByb3RlY3RlZCBjb25jZW50cmF0aW9uSXRlbU5vZGU6IE5vZGU7XHJcbiAgcHJvdGVjdGVkIHN1bmxpZ2h0V2F2ZXNJdGVtTm9kZTogTm9kZTtcclxuICBwcm90ZWN0ZWQgaW5mcmFyZWRXYXZlc0l0ZW1Ob2RlOiBOb2RlO1xyXG4gIHByb3RlY3RlZCBzdXJmYWNlVGVtcGVyYXR1cmVJdGVtTm9kZTogTm9kZTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbDogTGF5ZXJzTW9kZWwgKSB7XHJcbiAgICBzdXBlcigge1xyXG5cclxuICAgICAgLy8gcGRvbVxyXG4gICAgICB0YWdOYW1lOiAndWwnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgc3VubGlnaHRJdGVtTm9kZSA9IG5ldyBOb2RlKCBJVEVNX05PREVfT1BUSU9OUyApO1xyXG4gICAgdGhpcy5jb25jZW50cmF0aW9uSXRlbU5vZGUgPSBuZXcgTm9kZSggSVRFTV9OT0RFX09QVElPTlMgKTtcclxuICAgIHRoaXMuc2t5SXRlbU5vZGUgPSBuZXcgTm9kZSggSVRFTV9OT0RFX09QVElPTlMgKTtcclxuICAgIHRoaXMuc3VubGlnaHRXYXZlc0l0ZW1Ob2RlID0gbmV3IE5vZGUoIElURU1fTk9ERV9PUFRJT05TICk7XHJcbiAgICB0aGlzLmluZnJhcmVkV2F2ZXNJdGVtTm9kZSA9IG5ldyBOb2RlKCBJVEVNX05PREVfT1BUSU9OUyApO1xyXG4gICAgdGhpcy5zdXJmYWNlVGVtcGVyYXR1cmVJdGVtTm9kZSA9IG5ldyBOb2RlKCBJVEVNX05PREVfT1BUSU9OUyApO1xyXG5cclxuICAgIHRoaXMuY2hpbGRyZW4gPSBbXHJcbiAgICAgIHN1bmxpZ2h0SXRlbU5vZGUsXHJcbiAgICAgIHRoaXMuY29uY2VudHJhdGlvbkl0ZW1Ob2RlLFxyXG4gICAgICB0aGlzLnNreUl0ZW1Ob2RlLFxyXG4gICAgICB0aGlzLnN1bmxpZ2h0V2F2ZXNJdGVtTm9kZSxcclxuICAgICAgdGhpcy5pbmZyYXJlZFdhdmVzSXRlbU5vZGUsXHJcbiAgICAgIHRoaXMuc3VyZmFjZVRlbXBlcmF0dXJlSXRlbU5vZGVcclxuICAgIF07XHJcblxyXG4gICAgbW9kZWwuc3VuRW5lcmd5U291cmNlLmlzU2hpbmluZ1Byb3BlcnR5LmxpbmsoICggaXNTaGluaW5nOiBib29sZWFuICkgPT4ge1xyXG4gICAgICBjb25zdCBkZXNjcmlwdGlvblN0cmluZyA9IGlzU2hpbmluZyA/ICdvbicgOiAnb2ZmJztcclxuICAgICAgc3VubGlnaHRJdGVtTm9kZS5pbm5lckNvbnRlbnQgPSBTdHJpbmdVdGlscy5maWxsSW4oICdUaGUgc3VubGlnaHQgaXMge3tzdW5EZXNjcmlwdGlvbn19LicsIHtcclxuICAgICAgICBzdW5EZXNjcmlwdGlvbjogZGVzY3JpcHRpb25TdHJpbmdcclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JlZW5ob3VzZUVmZmVjdC5yZWdpc3RlciggJ09ic2VydmF0aW9uV2luZG93UERPTU5vZGUnLCBPYnNlcnZhdGlvbldpbmRvd1BET01Ob2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IE9ic2VydmF0aW9uV2luZG93UERPTU5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUd4RDtBQUNBLE1BQU1DLGlCQUFpQixHQUFHO0VBQUVDLE9BQU8sRUFBRTtBQUFLLENBQUM7QUFFM0MsTUFBTUMseUJBQXlCLFNBQVNKLElBQUksQ0FBQztFQU9wQ0ssV0FBV0EsQ0FBRUMsS0FBa0IsRUFBRztJQUN2QyxLQUFLLENBQUU7TUFFTDtNQUNBSCxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUM7SUFFSCxNQUFNSSxnQkFBZ0IsR0FBRyxJQUFJUCxJQUFJLENBQUVFLGlCQUFrQixDQUFDO0lBQ3RELElBQUksQ0FBQ00scUJBQXFCLEdBQUcsSUFBSVIsSUFBSSxDQUFFRSxpQkFBa0IsQ0FBQztJQUMxRCxJQUFJLENBQUNPLFdBQVcsR0FBRyxJQUFJVCxJQUFJLENBQUVFLGlCQUFrQixDQUFDO0lBQ2hELElBQUksQ0FBQ1EscUJBQXFCLEdBQUcsSUFBSVYsSUFBSSxDQUFFRSxpQkFBa0IsQ0FBQztJQUMxRCxJQUFJLENBQUNTLHFCQUFxQixHQUFHLElBQUlYLElBQUksQ0FBRUUsaUJBQWtCLENBQUM7SUFDMUQsSUFBSSxDQUFDVSwwQkFBMEIsR0FBRyxJQUFJWixJQUFJLENBQUVFLGlCQUFrQixDQUFDO0lBRS9ELElBQUksQ0FBQ1csUUFBUSxHQUFHLENBQ2ROLGdCQUFnQixFQUNoQixJQUFJLENBQUNDLHFCQUFxQixFQUMxQixJQUFJLENBQUNDLFdBQVcsRUFDaEIsSUFBSSxDQUFDQyxxQkFBcUIsRUFDMUIsSUFBSSxDQUFDQyxxQkFBcUIsRUFDMUIsSUFBSSxDQUFDQywwQkFBMEIsQ0FDaEM7SUFFRE4sS0FBSyxDQUFDUSxlQUFlLENBQUNDLGlCQUFpQixDQUFDQyxJQUFJLENBQUlDLFNBQWtCLElBQU07TUFDdEUsTUFBTUMsaUJBQWlCLEdBQUdELFNBQVMsR0FBRyxJQUFJLEdBQUcsS0FBSztNQUNsRFYsZ0JBQWdCLENBQUNZLFlBQVksR0FBR3BCLFdBQVcsQ0FBQ3FCLE1BQU0sQ0FBRSxxQ0FBcUMsRUFBRTtRQUN6RkMsY0FBYyxFQUFFSDtNQUNsQixDQUFFLENBQUM7SUFDTCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFqQixnQkFBZ0IsQ0FBQ3FCLFFBQVEsQ0FBRSwyQkFBMkIsRUFBRWxCLHlCQUEwQixDQUFDO0FBQ25GLGVBQWVBLHlCQUF5QiJ9