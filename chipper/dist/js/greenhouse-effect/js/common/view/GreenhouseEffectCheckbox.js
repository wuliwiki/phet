// Copyright 2021-2023, University of Colorado Boulder

/**
 * Most checkboxes in Greenhouse Effect have a label with an icon. This puts the label and icon
 * together and uses them both as the content Node for a Checkbox.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import greenhouseEffect from '../../greenhouseEffect.js';

// constants
const LABEL_ICON_SPACING = 10;
const LABEL_FONT = new PhetFont({
  size: 14
});
class GreenhouseEffectCheckbox extends Checkbox {
  constructor(property, labelStringProperty, providedOptions) {
    const options = optionize()({
      iconNode: null,
      maxLabelTextWidth: 180,
      // empirically determined, works well for most cases in Greenhouse

      // i18n
      maxWidth: 250,
      // pdom
      accessibleName: labelStringProperty
    }, providedOptions);
    const labelText = new Text(labelStringProperty, {
      font: LABEL_FONT,
      maxWidth: options.maxLabelTextWidth,
      tandem: options.tandem.createTandem('labelText')
    });
    const contentChildren = options.iconNode ? [labelText, options.iconNode] : [labelText];
    const checkboxContent = new HBox({
      children: contentChildren,
      spacing: LABEL_ICON_SPACING
    });
    super(property, checkboxContent, options);
  }
}
greenhouseEffect.register('GreenhouseEffectCheckbox', GreenhouseEffectCheckbox);
export default GreenhouseEffectCheckbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0Rm9udCIsIkhCb3giLCJUZXh0IiwiQ2hlY2tib3giLCJncmVlbmhvdXNlRWZmZWN0IiwiTEFCRUxfSUNPTl9TUEFDSU5HIiwiTEFCRUxfRk9OVCIsInNpemUiLCJHcmVlbmhvdXNlRWZmZWN0Q2hlY2tib3giLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwibGFiZWxTdHJpbmdQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJpY29uTm9kZSIsIm1heExhYmVsVGV4dFdpZHRoIiwibWF4V2lkdGgiLCJhY2Nlc3NpYmxlTmFtZSIsImxhYmVsVGV4dCIsImZvbnQiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJjb250ZW50Q2hpbGRyZW4iLCJjaGVja2JveENvbnRlbnQiLCJjaGlsZHJlbiIsInNwYWNpbmciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyZWVuaG91c2VFZmZlY3RDaGVja2JveC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb3N0IGNoZWNrYm94ZXMgaW4gR3JlZW5ob3VzZSBFZmZlY3QgaGF2ZSBhIGxhYmVsIHdpdGggYW4gaWNvbi4gVGhpcyBwdXRzIHRoZSBsYWJlbCBhbmQgaWNvblxyXG4gKiB0b2dldGhlciBhbmQgdXNlcyB0aGVtIGJvdGggYXMgdGhlIGNvbnRlbnQgTm9kZSBmb3IgYSBDaGVja2JveC5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94LCB7IENoZWNrYm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IExBQkVMX0lDT05fU1BBQ0lORyA9IDEwO1xyXG5jb25zdCBMQUJFTF9GT05UID0gbmV3IFBoZXRGb250KCB7XHJcbiAgc2l6ZTogMTRcclxufSApO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgbWF4TGFiZWxUZXh0V2lkdGg/OiBudW1iZXI7XHJcblxyXG4gIC8vIGlmIHByb3ZpZGVkLCB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBpY29uIGZvciB0aGUgY2hlY2tib3hcclxuICBpY29uTm9kZT86IE5vZGUgfCBudWxsO1xyXG59O1xyXG5leHBvcnQgdHlwZSBHcmVlbmhvdXNlRWZmZWN0Q2hlY2tib3hPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBDaGVja2JveE9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Q2hlY2tib3hPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5jbGFzcyBHcmVlbmhvdXNlRWZmZWN0Q2hlY2tib3ggZXh0ZW5kcyBDaGVja2JveCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbFN0cmluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogR3JlZW5ob3VzZUVmZmVjdENoZWNrYm94T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEdyZWVuaG91c2VFZmZlY3RDaGVja2JveE9wdGlvbnMsIFNlbGZPcHRpb25zLCBDaGVja2JveE9wdGlvbnM+KCkoIHtcclxuICAgICAgaWNvbk5vZGU6IG51bGwsXHJcbiAgICAgIG1heExhYmVsVGV4dFdpZHRoOiAxODAsIC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWQsIHdvcmtzIHdlbGwgZm9yIG1vc3QgY2FzZXMgaW4gR3JlZW5ob3VzZVxyXG5cclxuICAgICAgLy8gaTE4blxyXG4gICAgICBtYXhXaWR0aDogMjUwLFxyXG5cclxuICAgICAgLy8gcGRvbVxyXG4gICAgICBhY2Nlc3NpYmxlTmFtZTogbGFiZWxTdHJpbmdQcm9wZXJ0eVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFRleHQoIGxhYmVsU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogTEFCRUxfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IG9wdGlvbnMubWF4TGFiZWxUZXh0V2lkdGgsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxUZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudENoaWxkcmVuID0gb3B0aW9ucy5pY29uTm9kZSA/IFsgbGFiZWxUZXh0LCBvcHRpb25zLmljb25Ob2RlIF0gOiBbIGxhYmVsVGV4dCBdO1xyXG4gICAgY29uc3QgY2hlY2tib3hDb250ZW50ID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IGNvbnRlbnRDaGlsZHJlbixcclxuICAgICAgc3BhY2luZzogTEFCRUxfSUNPTl9TUEFDSU5HXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHByb3BlcnR5LCBjaGVja2JveENvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdHcmVlbmhvdXNlRWZmZWN0Q2hlY2tib3gnLCBHcmVlbmhvdXNlRWZmZWN0Q2hlY2tib3ggKTtcclxuZXhwb3J0IGRlZmF1bHQgR3JlZW5ob3VzZUVmZmVjdENoZWNrYm94O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxPQUFPQSxTQUFTLE1BQU0sdUNBQXVDO0FBRTdELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsSUFBSSxFQUFRQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3BFLE9BQU9DLFFBQVEsTUFBMkIsZ0NBQWdDO0FBQzFFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjs7QUFFeEQ7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxFQUFFO0FBQzdCLE1BQU1DLFVBQVUsR0FBRyxJQUFJTixRQUFRLENBQUU7RUFDL0JPLElBQUksRUFBRTtBQUNSLENBQUUsQ0FBQztBQVdILE1BQU1DLHdCQUF3QixTQUFTTCxRQUFRLENBQUM7RUFDdkNNLFdBQVdBLENBQUVDLFFBQTJCLEVBQzNCQyxtQkFBOEMsRUFDOUNDLGVBQWlELEVBQUc7SUFFdEUsTUFBTUMsT0FBTyxHQUFHZCxTQUFTLENBQWdFLENBQUMsQ0FBRTtNQUMxRmUsUUFBUSxFQUFFLElBQUk7TUFDZEMsaUJBQWlCLEVBQUUsR0FBRztNQUFFOztNQUV4QjtNQUNBQyxRQUFRLEVBQUUsR0FBRztNQUViO01BQ0FDLGNBQWMsRUFBRU47SUFDbEIsQ0FBQyxFQUFFQyxlQUFnQixDQUFDO0lBRXBCLE1BQU1NLFNBQVMsR0FBRyxJQUFJaEIsSUFBSSxDQUFFUyxtQkFBbUIsRUFBRTtNQUMvQ1EsSUFBSSxFQUFFYixVQUFVO01BQ2hCVSxRQUFRLEVBQUVILE9BQU8sQ0FBQ0UsaUJBQWlCO01BQ25DSyxNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUUsV0FBWTtJQUNuRCxDQUFFLENBQUM7SUFFSCxNQUFNQyxlQUFlLEdBQUdULE9BQU8sQ0FBQ0MsUUFBUSxHQUFHLENBQUVJLFNBQVMsRUFBRUwsT0FBTyxDQUFDQyxRQUFRLENBQUUsR0FBRyxDQUFFSSxTQUFTLENBQUU7SUFDMUYsTUFBTUssZUFBZSxHQUFHLElBQUl0QixJQUFJLENBQUU7TUFDaEN1QixRQUFRLEVBQUVGLGVBQWU7TUFDekJHLE9BQU8sRUFBRXBCO0lBQ1gsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFSyxRQUFRLEVBQUVhLGVBQWUsRUFBRVYsT0FBUSxDQUFDO0VBQzdDO0FBQ0Y7QUFFQVQsZ0JBQWdCLENBQUNzQixRQUFRLENBQUUsMEJBQTBCLEVBQUVsQix3QkFBeUIsQ0FBQztBQUNqRixlQUFlQSx3QkFBd0IifQ==