// Copyright 2021-2022, University of Colorado Boulder

/**
 * Responsible for generating description strings that describe the temperature.
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Range from '../../../../../dot/js/Range.js';
import Utils from '../../../../../dot/js/Utils.js';
import StringUtils from '../../../../../phetcommon/js/util/StringUtils.js';
import greenhouseEffect from '../../../greenhouseEffect.js';
import GreenhouseEffectStrings from '../../../GreenhouseEffectStrings.js';
import GreenhouseEffectUtils from '../../GreenhouseEffectUtils.js';
import { ConcentrationControlMode } from '../../model/ConcentrationModel.js';
import TemperatureUnits from '../../model/TemperatureUnits.js';

// strings used to describe temperature
const extremelyHighStringProperty = GreenhouseEffectStrings.a11y.qualitativeAmountDescriptions.extremelyHighStringProperty;
const veryHighStringProperty = GreenhouseEffectStrings.a11y.qualitativeAmountDescriptions.veryHighStringProperty;
const highStringProperty = GreenhouseEffectStrings.a11y.qualitativeAmountDescriptions.highStringProperty;
const moderateStringProperty = GreenhouseEffectStrings.a11y.qualitativeAmountDescriptions.moderateStringProperty;
const lowStringProperty = GreenhouseEffectStrings.a11y.qualitativeAmountDescriptions.lowStringProperty;
const veryLowStringProperty = GreenhouseEffectStrings.a11y.qualitativeAmountDescriptions.veryLowStringProperty;
const extremelyLowStringProperty = GreenhouseEffectStrings.a11y.qualitativeAmountDescriptions.extremelyLowStringProperty;
const historicallyLowStringProperty = GreenhouseEffectStrings.a11y.historicalRelativeDescriptions.lowStringProperty;
const historicallyModerateStringProperty = GreenhouseEffectStrings.a11y.historicalRelativeDescriptions.moderateStringProperty;
const historicallyHighStringProperty = GreenhouseEffectStrings.a11y.historicalRelativeDescriptions.highStringProperty;
const surfaceTemperatureChangeWithValuePatternStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureChangeWithValuePatternStringProperty;
const surfaceTemperatureChangeWithoutValuePatternStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureChangeWithoutValuePatternStringProperty;
const temperatureChangeWithValuePatternStringProperty = GreenhouseEffectStrings.a11y.temperatureChangeWithValuePatternStringProperty;
const temperatureChangeWithoutValuePatternStringProperty = GreenhouseEffectStrings.a11y.temperatureChangeWithoutValuePatternStringProperty;
const surfaceTemperatureStableStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureStableStringProperty;
const surfaceTemperatureStableWithDescriptionStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureStableWithDescriptionStringProperty;
const surfaceTemperatureStableWithValueStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureStableWithValueStringProperty;
const surfaceTemperatureStableWithDescriptionAndValueStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureStableWithDescriptionAndValueStringProperty;
const warmingStringProperty = GreenhouseEffectStrings.a11y.warmingStringProperty;
const coolingStringProperty = GreenhouseEffectStrings.a11y.coolingStringProperty;
const stabilizingStringProperty = GreenhouseEffectStrings.a11y.stabilizingStringProperty;
const surfaceTemperatureIsQuantitativeAndQualitativePatternStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureIsQuantitativeAndQualitativePatternStringProperty;
const surfaceTemperatureIsQuantitativePatternStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureIsQuantitativePatternStringProperty;
const surfaceTemperatureIsQualitativePatternStringProperty = GreenhouseEffectStrings.a11y.surfaceTemperatureIsQualitativePatternStringProperty;
const qualitativeTemperatureDescriptionStrings = [extremelyLowStringProperty.value, veryLowStringProperty.value, lowStringProperty.value, moderateStringProperty.value, highStringProperty.value, veryHighStringProperty.value, extremelyHighStringProperty.value];

// The minimum values for temperatures in kelvin each description used in the above array when describing the
// temperature qualitatively.
const qualitativeTemperatureDescriptionThresholds = [260, 275, 283, 288, 293, 301];
assert && assert(qualitativeTemperatureDescriptionThresholds.length + 1 === qualitativeTemperatureDescriptionStrings.length, 'thresholds for finding the description needs to match the length of descriptions to find the qualitative temperature description');

// Range used for categorizing temperature values into historical descriptions.  This was empirically determined based
// on the emergent behavior of the model, so it may need updating if the model changes.
const historicallyModerateTemperatureRange = new Range(286, 287.8);

// written units of temperature
const kelvinStringProperty = GreenhouseEffectStrings.a11y.temperatureUnits.kelvinStringProperty;
const celsiusStringProperty = GreenhouseEffectStrings.a11y.temperatureUnits.celsiusStringProperty;
const fahrenheitStringProperty = GreenhouseEffectStrings.a11y.temperatureUnits.fahrenheitStringProperty;
class TemperatureDescriber {
  /**
   * Get formatted description for the current temperature in the provided units, for use in other contexts. Will
   * return something like:
   * "245 Kelvin" or "12 Celsius"
   *
   * @param temperatureKelvin - temperature, in kelvin
   * @param unitsValue
   */
  static getQuantitativeTemperatureDescription(temperatureKelvin, unitsValue) {
    return StringUtils.fillIn(GreenhouseEffectStrings.temperature.units.valueUnitsPatternStringProperty, {
      value: TemperatureDescriber.getTemperatureValueString(temperatureKelvin, unitsValue),
      units: TemperatureDescriber.getTemperatureUnitsString(unitsValue)
    });
  }

  /**
   * Returns a qualitative description of the temperature of the ground surface. Will return something like "very high"
   * or "moderate" or "historically high"
   *
   * @param value - the temperature in kelvin
   * @param concentrationControlMode - the mode for how concentration is controlled, either by value or by date
   * @param date - the selected date
   */
  static getQualitativeTemperatureDescriptionString(value, concentrationControlMode, date) {
    let qualitativeDescriptionString;
    if (concentrationControlMode === ConcentrationControlMode.BY_VALUE) {
      qualitativeDescriptionString = qualitativeTemperatureDescriptionStrings[0];

      // Use the minimum values in the "thresholds" array to find the correct qualitative description
      for (let i = 0; i < qualitativeTemperatureDescriptionThresholds.length; i++) {
        const thresholdMin = qualitativeTemperatureDescriptionThresholds[i];
        if (value >= thresholdMin) {
          qualitativeDescriptionString = qualitativeTemperatureDescriptionStrings[i + 1];
        }
      }
    } else {
      // Get a historical description.
      assert && assert(concentrationControlMode === ConcentrationControlMode.BY_DATE);
      if (value < historicallyModerateTemperatureRange.min) {
        qualitativeDescriptionString = historicallyLowStringProperty.value;
      } else if (value > historicallyModerateTemperatureRange.max) {
        qualitativeDescriptionString = historicallyHighStringProperty.value;
      } else {
        qualitativeDescriptionString = historicallyModerateStringProperty.value;
      }
    }
    return qualitativeDescriptionString;
  }

  /**
   * Get a qualitative description of the surface temperature as a full sentence. Returns something like
   * "Surface temperature is somewhat high."
   */
  static getQualitativeSurfaceTemperatureDescriptionString(temperatureKelvin, concentrationControlMode, date) {
    return StringUtils.fillIn(GreenhouseEffectStrings.a11y.qualitativeSurfaceTemperaturePatternStringProperty, {
      description: TemperatureDescriber.getQualitativeTemperatureDescriptionString(temperatureKelvin, concentrationControlMode, date)
    });
  }

  /**
   * Get the current temperature in the provided units, formatted for use in interactive description.
   */
  static getTemperatureValueString(temperatureKelvin, unitsValue) {
    const convertedValue = unitsValue === TemperatureUnits.KELVIN ? temperatureKelvin : unitsValue === TemperatureUnits.CELSIUS ? GreenhouseEffectUtils.kelvinToCelsius(temperatureKelvin) : GreenhouseEffectUtils.kelvinToFahrenheit(temperatureKelvin);
    return Utils.toFixed(convertedValue, 1);
  }

  /**
   * From the EnumerationProperty value, return the string for the units of temperature for use in interactive
   * descriptions. Will return something like
   * "Kelvin" or
   * "degrees Celsius"
   */
  static getTemperatureUnitsString(unitsValue) {
    return unitsValue === TemperatureUnits.KELVIN ? kelvinStringProperty.value : unitsValue === TemperatureUnits.CELSIUS ? celsiusStringProperty.value : fahrenheitStringProperty.value;
  }

  /**
   * Get a description of the change in surface temperature, with more or less information depending on whether
   * the thermometer is visible. Will return something like:
   *
   * "Surface temperature warming, now 277 Kelvin." or
   * "Cooling, now 266.1 Kelvin." or
   * "Surface temperature stabilizing, now 255 Kelvin."
   *
   * @param oldTemperature
   * @param currentTemperature
   * @param thermometerVisible - Are we displaying surface temperature values?
   * @param unitsValue - What are the displayed units?
   * @param includeSurfaceTemperatureFragment - Include the "Surface temperature..." prefix fragment?
   * @param describeAsStabilizing - Instead of 'warming' or 'cooling', describe the temperature as 'stabilizing'.
   */
  static getSurfaceTemperatureChangeString(oldTemperature, currentTemperature, thermometerVisible, unitsValue, includeSurfaceTemperatureFragment, describeAsStabilizing) {
    let changeString = null;
    let patternString = null;
    if (oldTemperature !== currentTemperature) {
      let qualitativeDescriptionString = describeAsStabilizing ? stabilizingStringProperty.value : currentTemperature > oldTemperature ? warmingStringProperty.value : coolingStringProperty.value;

      // If we are not including the surface temperature fragment, the qualitative description is the first word.
      // This is NOT i18n friendly, but PhET's policy is that is OK for now.
      if (!includeSurfaceTemperatureFragment) {
        qualitativeDescriptionString = StringUtils.capitalize(qualitativeDescriptionString);
      }
      if (thermometerVisible) {
        const temperatureValueString = TemperatureDescriber.getQuantitativeTemperatureDescription(currentTemperature, unitsValue);
        patternString = includeSurfaceTemperatureFragment ? surfaceTemperatureChangeWithValuePatternStringProperty.value : temperatureChangeWithValuePatternStringProperty.value;
        changeString = StringUtils.fillIn(patternString, {
          qualitativeDescription: qualitativeDescriptionString,
          temperature: temperatureValueString
        });
      } else {
        patternString = includeSurfaceTemperatureFragment ? surfaceTemperatureChangeWithoutValuePatternStringProperty.value : temperatureChangeWithoutValuePatternStringProperty.value;
        changeString = StringUtils.fillIn(patternString, {
          qualitativeDescription: qualitativeDescriptionString
        });
      }
    }
    return changeString;
  }

  /**
   * Get a description of the surface temperature when it is stable, i.e. the ground is in equilibrium. This will
   * include more or less information depending on whether the thermometer is visible and/or the surface temperature
   * indicator is visible. Will return something like: "Surface temperature stable and hot, now 277 Kelvin."
   *
   * Please note that this does not actually check that the temperature *is* stable, so use wisely.
   */
  static getSurfaceTemperatureStableString(temperature, thermometerVisible, surfaceTemperatureIndicationVisible, unitsValue, concentrationControlMode, date) {
    let stableTemperatureString = '';
    if (thermometerVisible && surfaceTemperatureIndicationVisible) {
      stableTemperatureString = StringUtils.fillIn(surfaceTemperatureStableWithDescriptionAndValueStringProperty, {
        qualitativeDescription: TemperatureDescriber.getQualitativeTemperatureDescriptionString(temperature, concentrationControlMode, date),
        quantitativeDescription: TemperatureDescriber.getQuantitativeTemperatureDescription(temperature, unitsValue)
      });
    } else if (thermometerVisible && !surfaceTemperatureIndicationVisible) {
      stableTemperatureString = StringUtils.fillIn(surfaceTemperatureStableWithValueStringProperty, {
        quantitativeDescription: TemperatureDescriber.getQuantitativeTemperatureDescription(temperature, unitsValue)
      });
    } else if (!thermometerVisible && surfaceTemperatureIndicationVisible) {
      stableTemperatureString = StringUtils.fillIn(surfaceTemperatureStableWithDescriptionStringProperty, {
        qualitativeDescription: TemperatureDescriber.getQualitativeTemperatureDescriptionString(temperature, concentrationControlMode, date)
      });
    } else if (!thermometerVisible && !surfaceTemperatureIndicationVisible) {
      stableTemperatureString = surfaceTemperatureStableStringProperty.value;
    }
    return stableTemperatureString;
  }

  /**
   * Get a description of what the current surface temperature "is". Similar to other functions in this class, but with
   * slightly different grammatical structure for different contexts. If the thermometer and surface temperature
   * indicators are both invisible, null will be returned.
   *
   * Will return something like
   * "The surface temperature is high, 290 Kelvin."
   */
  static getSurfaceTemperatureIsString(temperature, thermometerVisible, surfaceTemperatureIndicationVisible, unitsValue, concentrationControlMode, date) {
    let surfaceTemperatureDescriptionString = null;
    if (thermometerVisible && surfaceTemperatureIndicationVisible) {
      surfaceTemperatureDescriptionString = StringUtils.fillIn(surfaceTemperatureIsQuantitativeAndQualitativePatternStringProperty, {
        description: TemperatureDescriber.getQualitativeTemperatureDescriptionString(temperature, concentrationControlMode, date),
        value: TemperatureDescriber.getQuantitativeTemperatureDescription(temperature, unitsValue)
      });
    } else if (thermometerVisible) {
      surfaceTemperatureDescriptionString = StringUtils.fillIn(surfaceTemperatureIsQuantitativePatternStringProperty, {
        value: TemperatureDescriber.getQuantitativeTemperatureDescription(temperature, unitsValue)
      });
    } else if (surfaceTemperatureIndicationVisible) {
      surfaceTemperatureDescriptionString = StringUtils.fillIn(surfaceTemperatureIsQualitativePatternStringProperty, {
        description: TemperatureDescriber.getQualitativeTemperatureDescriptionString(temperature, concentrationControlMode, date)
      });
    }
    return surfaceTemperatureDescriptionString;
  }
}
greenhouseEffect.register('TemperatureDescriber', TemperatureDescriber);
export default TemperatureDescriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlV0aWxzIiwiU3RyaW5nVXRpbHMiLCJncmVlbmhvdXNlRWZmZWN0IiwiR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MiLCJHcmVlbmhvdXNlRWZmZWN0VXRpbHMiLCJDb25jZW50cmF0aW9uQ29udHJvbE1vZGUiLCJUZW1wZXJhdHVyZVVuaXRzIiwiZXh0cmVtZWx5SGlnaFN0cmluZ1Byb3BlcnR5IiwiYTExeSIsInF1YWxpdGF0aXZlQW1vdW50RGVzY3JpcHRpb25zIiwidmVyeUhpZ2hTdHJpbmdQcm9wZXJ0eSIsImhpZ2hTdHJpbmdQcm9wZXJ0eSIsIm1vZGVyYXRlU3RyaW5nUHJvcGVydHkiLCJsb3dTdHJpbmdQcm9wZXJ0eSIsInZlcnlMb3dTdHJpbmdQcm9wZXJ0eSIsImV4dHJlbWVseUxvd1N0cmluZ1Byb3BlcnR5IiwiaGlzdG9yaWNhbGx5TG93U3RyaW5nUHJvcGVydHkiLCJoaXN0b3JpY2FsUmVsYXRpdmVEZXNjcmlwdGlvbnMiLCJoaXN0b3JpY2FsbHlNb2RlcmF0ZVN0cmluZ1Byb3BlcnR5IiwiaGlzdG9yaWNhbGx5SGlnaFN0cmluZ1Byb3BlcnR5Iiwic3VyZmFjZVRlbXBlcmF0dXJlQ2hhbmdlV2l0aFZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5Iiwic3VyZmFjZVRlbXBlcmF0dXJlQ2hhbmdlV2l0aG91dFZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwidGVtcGVyYXR1cmVDaGFuZ2VXaXRoVmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJ0ZW1wZXJhdHVyZUNoYW5nZVdpdGhvdXRWYWx1ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsInN1cmZhY2VUZW1wZXJhdHVyZVN0YWJsZVN0cmluZ1Byb3BlcnR5Iiwic3VyZmFjZVRlbXBlcmF0dXJlU3RhYmxlV2l0aERlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkiLCJzdXJmYWNlVGVtcGVyYXR1cmVTdGFibGVXaXRoVmFsdWVTdHJpbmdQcm9wZXJ0eSIsInN1cmZhY2VUZW1wZXJhdHVyZVN0YWJsZVdpdGhEZXNjcmlwdGlvbkFuZFZhbHVlU3RyaW5nUHJvcGVydHkiLCJ3YXJtaW5nU3RyaW5nUHJvcGVydHkiLCJjb29saW5nU3RyaW5nUHJvcGVydHkiLCJzdGFiaWxpemluZ1N0cmluZ1Byb3BlcnR5Iiwic3VyZmFjZVRlbXBlcmF0dXJlSXNRdWFudGl0YXRpdmVBbmRRdWFsaXRhdGl2ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsInN1cmZhY2VUZW1wZXJhdHVyZUlzUXVhbnRpdGF0aXZlUGF0dGVyblN0cmluZ1Byb3BlcnR5Iiwic3VyZmFjZVRlbXBlcmF0dXJlSXNRdWFsaXRhdGl2ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsInF1YWxpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZ3MiLCJ2YWx1ZSIsInF1YWxpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblRocmVzaG9sZHMiLCJhc3NlcnQiLCJsZW5ndGgiLCJoaXN0b3JpY2FsbHlNb2RlcmF0ZVRlbXBlcmF0dXJlUmFuZ2UiLCJrZWx2aW5TdHJpbmdQcm9wZXJ0eSIsInRlbXBlcmF0dXJlVW5pdHMiLCJjZWxzaXVzU3RyaW5nUHJvcGVydHkiLCJmYWhyZW5oZWl0U3RyaW5nUHJvcGVydHkiLCJUZW1wZXJhdHVyZURlc2NyaWJlciIsImdldFF1YW50aXRhdGl2ZVRlbXBlcmF0dXJlRGVzY3JpcHRpb24iLCJ0ZW1wZXJhdHVyZUtlbHZpbiIsInVuaXRzVmFsdWUiLCJmaWxsSW4iLCJ0ZW1wZXJhdHVyZSIsInVuaXRzIiwidmFsdWVVbml0c1BhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsImdldFRlbXBlcmF0dXJlVmFsdWVTdHJpbmciLCJnZXRUZW1wZXJhdHVyZVVuaXRzU3RyaW5nIiwiZ2V0UXVhbGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uU3RyaW5nIiwiY29uY2VudHJhdGlvbkNvbnRyb2xNb2RlIiwiZGF0ZSIsInF1YWxpdGF0aXZlRGVzY3JpcHRpb25TdHJpbmciLCJCWV9WQUxVRSIsImkiLCJ0aHJlc2hvbGRNaW4iLCJCWV9EQVRFIiwibWluIiwibWF4IiwiZ2V0UXVhbGl0YXRpdmVTdXJmYWNlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZyIsInF1YWxpdGF0aXZlU3VyZmFjZVRlbXBlcmF0dXJlUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwiZGVzY3JpcHRpb24iLCJjb252ZXJ0ZWRWYWx1ZSIsIktFTFZJTiIsIkNFTFNJVVMiLCJrZWx2aW5Ub0NlbHNpdXMiLCJrZWx2aW5Ub0ZhaHJlbmhlaXQiLCJ0b0ZpeGVkIiwiZ2V0U3VyZmFjZVRlbXBlcmF0dXJlQ2hhbmdlU3RyaW5nIiwib2xkVGVtcGVyYXR1cmUiLCJjdXJyZW50VGVtcGVyYXR1cmUiLCJ0aGVybW9tZXRlclZpc2libGUiLCJpbmNsdWRlU3VyZmFjZVRlbXBlcmF0dXJlRnJhZ21lbnQiLCJkZXNjcmliZUFzU3RhYmlsaXppbmciLCJjaGFuZ2VTdHJpbmciLCJwYXR0ZXJuU3RyaW5nIiwiY2FwaXRhbGl6ZSIsInRlbXBlcmF0dXJlVmFsdWVTdHJpbmciLCJxdWFsaXRhdGl2ZURlc2NyaXB0aW9uIiwiZ2V0U3VyZmFjZVRlbXBlcmF0dXJlU3RhYmxlU3RyaW5nIiwic3VyZmFjZVRlbXBlcmF0dXJlSW5kaWNhdGlvblZpc2libGUiLCJzdGFibGVUZW1wZXJhdHVyZVN0cmluZyIsInF1YW50aXRhdGl2ZURlc2NyaXB0aW9uIiwiZ2V0U3VyZmFjZVRlbXBlcmF0dXJlSXNTdHJpbmciLCJzdXJmYWNlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGVtcGVyYXR1cmVEZXNjcmliZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgZGVzY3JpcHRpb24gc3RyaW5ncyB0aGF0IGRlc2NyaWJlIHRoZSB0ZW1wZXJhdHVyZS5cclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncyBmcm9tICcuLi8uLi8uLi9HcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0VXRpbHMgZnJvbSAnLi4vLi4vR3JlZW5ob3VzZUVmZmVjdFV0aWxzLmpzJztcclxuaW1wb3J0IHsgQ29uY2VudHJhdGlvbkNvbnRyb2xNb2RlLCBDb25jZW50cmF0aW9uRGF0ZSB9IGZyb20gJy4uLy4uL21vZGVsL0NvbmNlbnRyYXRpb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBUZW1wZXJhdHVyZVVuaXRzIGZyb20gJy4uLy4uL21vZGVsL1RlbXBlcmF0dXJlVW5pdHMuanMnO1xyXG5cclxuLy8gc3RyaW5ncyB1c2VkIHRvIGRlc2NyaWJlIHRlbXBlcmF0dXJlXHJcbmNvbnN0IGV4dHJlbWVseUhpZ2hTdHJpbmdQcm9wZXJ0eSA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkucXVhbGl0YXRpdmVBbW91bnREZXNjcmlwdGlvbnMuZXh0cmVtZWx5SGlnaFN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCB2ZXJ5SGlnaFN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5xdWFsaXRhdGl2ZUFtb3VudERlc2NyaXB0aW9ucy52ZXJ5SGlnaFN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBoaWdoU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnF1YWxpdGF0aXZlQW1vdW50RGVzY3JpcHRpb25zLmhpZ2hTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgbW9kZXJhdGVTdHJpbmdQcm9wZXJ0eSA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkucXVhbGl0YXRpdmVBbW91bnREZXNjcmlwdGlvbnMubW9kZXJhdGVTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgbG93U3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnF1YWxpdGF0aXZlQW1vdW50RGVzY3JpcHRpb25zLmxvd1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCB2ZXJ5TG93U3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnF1YWxpdGF0aXZlQW1vdW50RGVzY3JpcHRpb25zLnZlcnlMb3dTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgZXh0cmVtZWx5TG93U3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnF1YWxpdGF0aXZlQW1vdW50RGVzY3JpcHRpb25zLmV4dHJlbWVseUxvd1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBoaXN0b3JpY2FsbHlMb3dTdHJpbmdQcm9wZXJ0eSA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkuaGlzdG9yaWNhbFJlbGF0aXZlRGVzY3JpcHRpb25zLmxvd1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBoaXN0b3JpY2FsbHlNb2RlcmF0ZVN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5oaXN0b3JpY2FsUmVsYXRpdmVEZXNjcmlwdGlvbnMubW9kZXJhdGVTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgaGlzdG9yaWNhbGx5SGlnaFN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5oaXN0b3JpY2FsUmVsYXRpdmVEZXNjcmlwdGlvbnMuaGlnaFN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBzdXJmYWNlVGVtcGVyYXR1cmVDaGFuZ2VXaXRoVmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnN1cmZhY2VUZW1wZXJhdHVyZUNoYW5nZVdpdGhWYWx1ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eTtcclxuY29uc3Qgc3VyZmFjZVRlbXBlcmF0dXJlQ2hhbmdlV2l0aG91dFZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5zdXJmYWNlVGVtcGVyYXR1cmVDaGFuZ2VXaXRob3V0VmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHRlbXBlcmF0dXJlQ2hhbmdlV2l0aFZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS50ZW1wZXJhdHVyZUNoYW5nZVdpdGhWYWx1ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgdGVtcGVyYXR1cmVDaGFuZ2VXaXRob3V0VmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnRlbXBlcmF0dXJlQ2hhbmdlV2l0aG91dFZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBzdXJmYWNlVGVtcGVyYXR1cmVTdGFibGVTdHJpbmdQcm9wZXJ0eSA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkuc3VyZmFjZVRlbXBlcmF0dXJlU3RhYmxlU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHN1cmZhY2VUZW1wZXJhdHVyZVN0YWJsZVdpdGhEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5zdXJmYWNlVGVtcGVyYXR1cmVTdGFibGVXaXRoRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eTtcclxuY29uc3Qgc3VyZmFjZVRlbXBlcmF0dXJlU3RhYmxlV2l0aFZhbHVlU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnN1cmZhY2VUZW1wZXJhdHVyZVN0YWJsZVdpdGhWYWx1ZVN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBzdXJmYWNlVGVtcGVyYXR1cmVTdGFibGVXaXRoRGVzY3JpcHRpb25BbmRWYWx1ZVN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5zdXJmYWNlVGVtcGVyYXR1cmVTdGFibGVXaXRoRGVzY3JpcHRpb25BbmRWYWx1ZVN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCB3YXJtaW5nU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5Lndhcm1pbmdTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgY29vbGluZ1N0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5jb29saW5nU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHN0YWJpbGl6aW5nU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnN0YWJpbGl6aW5nU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHN1cmZhY2VUZW1wZXJhdHVyZUlzUXVhbnRpdGF0aXZlQW5kUXVhbGl0YXRpdmVQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnN1cmZhY2VUZW1wZXJhdHVyZUlzUXVhbnRpdGF0aXZlQW5kUXVhbGl0YXRpdmVQYXR0ZXJuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHN1cmZhY2VUZW1wZXJhdHVyZUlzUXVhbnRpdGF0aXZlUGF0dGVyblN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5zdXJmYWNlVGVtcGVyYXR1cmVJc1F1YW50aXRhdGl2ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eTtcclxuY29uc3Qgc3VyZmFjZVRlbXBlcmF0dXJlSXNRdWFsaXRhdGl2ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkuc3VyZmFjZVRlbXBlcmF0dXJlSXNRdWFsaXRhdGl2ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eTtcclxuXHJcbmNvbnN0IHF1YWxpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZ3MgPSBbXHJcbiAgZXh0cmVtZWx5TG93U3RyaW5nUHJvcGVydHkudmFsdWUsXHJcbiAgdmVyeUxvd1N0cmluZ1Byb3BlcnR5LnZhbHVlLFxyXG4gIGxvd1N0cmluZ1Byb3BlcnR5LnZhbHVlLFxyXG4gIG1vZGVyYXRlU3RyaW5nUHJvcGVydHkudmFsdWUsXHJcbiAgaGlnaFN0cmluZ1Byb3BlcnR5LnZhbHVlLFxyXG4gIHZlcnlIaWdoU3RyaW5nUHJvcGVydHkudmFsdWUsXHJcbiAgZXh0cmVtZWx5SGlnaFN0cmluZ1Byb3BlcnR5LnZhbHVlXHJcbl07XHJcblxyXG4vLyBUaGUgbWluaW11bSB2YWx1ZXMgZm9yIHRlbXBlcmF0dXJlcyBpbiBrZWx2aW4gZWFjaCBkZXNjcmlwdGlvbiB1c2VkIGluIHRoZSBhYm92ZSBhcnJheSB3aGVuIGRlc2NyaWJpbmcgdGhlXHJcbi8vIHRlbXBlcmF0dXJlIHF1YWxpdGF0aXZlbHkuXHJcbmNvbnN0IHF1YWxpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblRocmVzaG9sZHMgPSBbXHJcbiAgMjYwLCAyNzUsIDI4MywgMjg4LCAyOTMsIDMwMVxyXG5dO1xyXG5cclxuYXNzZXJ0ICYmIGFzc2VydCggcXVhbGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uVGhyZXNob2xkcy5sZW5ndGggKyAxID09PSBxdWFsaXRhdGl2ZVRlbXBlcmF0dXJlRGVzY3JpcHRpb25TdHJpbmdzLmxlbmd0aCxcclxuICAndGhyZXNob2xkcyBmb3IgZmluZGluZyB0aGUgZGVzY3JpcHRpb24gbmVlZHMgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiBkZXNjcmlwdGlvbnMgdG8gZmluZCB0aGUgcXVhbGl0YXRpdmUgdGVtcGVyYXR1cmUgZGVzY3JpcHRpb24nICk7XHJcblxyXG4vLyBSYW5nZSB1c2VkIGZvciBjYXRlZ29yaXppbmcgdGVtcGVyYXR1cmUgdmFsdWVzIGludG8gaGlzdG9yaWNhbCBkZXNjcmlwdGlvbnMuICBUaGlzIHdhcyBlbXBpcmljYWxseSBkZXRlcm1pbmVkIGJhc2VkXHJcbi8vIG9uIHRoZSBlbWVyZ2VudCBiZWhhdmlvciBvZiB0aGUgbW9kZWwsIHNvIGl0IG1heSBuZWVkIHVwZGF0aW5nIGlmIHRoZSBtb2RlbCBjaGFuZ2VzLlxyXG5jb25zdCBoaXN0b3JpY2FsbHlNb2RlcmF0ZVRlbXBlcmF0dXJlUmFuZ2UgPSBuZXcgUmFuZ2UoIDI4NiwgMjg3LjggKTtcclxuXHJcbi8vIHdyaXR0ZW4gdW5pdHMgb2YgdGVtcGVyYXR1cmVcclxuY29uc3Qga2VsdmluU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5LnRlbXBlcmF0dXJlVW5pdHMua2VsdmluU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGNlbHNpdXNTdHJpbmdQcm9wZXJ0eSA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkudGVtcGVyYXR1cmVVbml0cy5jZWxzaXVzU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGZhaHJlbmhlaXRTdHJpbmdQcm9wZXJ0eSA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLmExMXkudGVtcGVyYXR1cmVVbml0cy5mYWhyZW5oZWl0U3RyaW5nUHJvcGVydHk7XHJcblxyXG5jbGFzcyBUZW1wZXJhdHVyZURlc2NyaWJlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBmb3JtYXR0ZWQgZGVzY3JpcHRpb24gZm9yIHRoZSBjdXJyZW50IHRlbXBlcmF0dXJlIGluIHRoZSBwcm92aWRlZCB1bml0cywgZm9yIHVzZSBpbiBvdGhlciBjb250ZXh0cy4gV2lsbFxyXG4gICAqIHJldHVybiBzb21ldGhpbmcgbGlrZTpcclxuICAgKiBcIjI0NSBLZWx2aW5cIiBvciBcIjEyIENlbHNpdXNcIlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHRlbXBlcmF0dXJlS2VsdmluIC0gdGVtcGVyYXR1cmUsIGluIGtlbHZpblxyXG4gICAqIEBwYXJhbSB1bml0c1ZhbHVlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRRdWFudGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uKCB0ZW1wZXJhdHVyZUtlbHZpbjogbnVtYmVyLCB1bml0c1ZhbHVlOiBUZW1wZXJhdHVyZVVuaXRzICk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gU3RyaW5nVXRpbHMuZmlsbEluKCBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy50ZW1wZXJhdHVyZS51bml0cy52YWx1ZVVuaXRzUGF0dGVyblN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIHZhbHVlOiBUZW1wZXJhdHVyZURlc2NyaWJlci5nZXRUZW1wZXJhdHVyZVZhbHVlU3RyaW5nKCB0ZW1wZXJhdHVyZUtlbHZpbiwgdW5pdHNWYWx1ZSApLFxyXG4gICAgICB1bml0czogVGVtcGVyYXR1cmVEZXNjcmliZXIuZ2V0VGVtcGVyYXR1cmVVbml0c1N0cmluZyggdW5pdHNWYWx1ZSApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgcXVhbGl0YXRpdmUgZGVzY3JpcHRpb24gb2YgdGhlIHRlbXBlcmF0dXJlIG9mIHRoZSBncm91bmQgc3VyZmFjZS4gV2lsbCByZXR1cm4gc29tZXRoaW5nIGxpa2UgXCJ2ZXJ5IGhpZ2hcIlxyXG4gICAqIG9yIFwibW9kZXJhdGVcIiBvciBcImhpc3RvcmljYWxseSBoaWdoXCJcclxuICAgKlxyXG4gICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB0ZW1wZXJhdHVyZSBpbiBrZWx2aW5cclxuICAgKiBAcGFyYW0gY29uY2VudHJhdGlvbkNvbnRyb2xNb2RlIC0gdGhlIG1vZGUgZm9yIGhvdyBjb25jZW50cmF0aW9uIGlzIGNvbnRyb2xsZWQsIGVpdGhlciBieSB2YWx1ZSBvciBieSBkYXRlXHJcbiAgICogQHBhcmFtIGRhdGUgLSB0aGUgc2VsZWN0ZWQgZGF0ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0UXVhbGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uU3RyaW5nKCB2YWx1ZTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25jZW50cmF0aW9uQ29udHJvbE1vZGU6IENvbmNlbnRyYXRpb25Db250cm9sTW9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogQ29uY2VudHJhdGlvbkRhdGUgKTogc3RyaW5nIHtcclxuXHJcbiAgICBsZXQgcXVhbGl0YXRpdmVEZXNjcmlwdGlvblN0cmluZztcclxuXHJcbiAgICBpZiAoIGNvbmNlbnRyYXRpb25Db250cm9sTW9kZSA9PT0gQ29uY2VudHJhdGlvbkNvbnRyb2xNb2RlLkJZX1ZBTFVFICkge1xyXG4gICAgICBxdWFsaXRhdGl2ZURlc2NyaXB0aW9uU3RyaW5nID0gcXVhbGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uU3RyaW5nc1sgMCBdO1xyXG5cclxuICAgICAgLy8gVXNlIHRoZSBtaW5pbXVtIHZhbHVlcyBpbiB0aGUgXCJ0aHJlc2hvbGRzXCIgYXJyYXkgdG8gZmluZCB0aGUgY29ycmVjdCBxdWFsaXRhdGl2ZSBkZXNjcmlwdGlvblxyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBxdWFsaXRhdGl2ZVRlbXBlcmF0dXJlRGVzY3JpcHRpb25UaHJlc2hvbGRzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICAgIGNvbnN0IHRocmVzaG9sZE1pbiA9IHF1YWxpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblRocmVzaG9sZHNbIGkgXTtcclxuICAgICAgICBpZiAoIHZhbHVlID49IHRocmVzaG9sZE1pbiApIHtcclxuICAgICAgICAgIHF1YWxpdGF0aXZlRGVzY3JpcHRpb25TdHJpbmcgPSBxdWFsaXRhdGl2ZVRlbXBlcmF0dXJlRGVzY3JpcHRpb25TdHJpbmdzWyBpICsgMSBdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcblxyXG4gICAgICAvLyBHZXQgYSBoaXN0b3JpY2FsIGRlc2NyaXB0aW9uLlxyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb25jZW50cmF0aW9uQ29udHJvbE1vZGUgPT09IENvbmNlbnRyYXRpb25Db250cm9sTW9kZS5CWV9EQVRFICk7XHJcbiAgICAgIGlmICggdmFsdWUgPCBoaXN0b3JpY2FsbHlNb2RlcmF0ZVRlbXBlcmF0dXJlUmFuZ2UubWluICkge1xyXG4gICAgICAgIHF1YWxpdGF0aXZlRGVzY3JpcHRpb25TdHJpbmcgPSBoaXN0b3JpY2FsbHlMb3dTdHJpbmdQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggdmFsdWUgPiBoaXN0b3JpY2FsbHlNb2RlcmF0ZVRlbXBlcmF0dXJlUmFuZ2UubWF4ICkge1xyXG4gICAgICAgIHF1YWxpdGF0aXZlRGVzY3JpcHRpb25TdHJpbmcgPSBoaXN0b3JpY2FsbHlIaWdoU3RyaW5nUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcXVhbGl0YXRpdmVEZXNjcmlwdGlvblN0cmluZyA9IGhpc3RvcmljYWxseU1vZGVyYXRlU3RyaW5nUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcXVhbGl0YXRpdmVEZXNjcmlwdGlvblN0cmluZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIHF1YWxpdGF0aXZlIGRlc2NyaXB0aW9uIG9mIHRoZSBzdXJmYWNlIHRlbXBlcmF0dXJlIGFzIGEgZnVsbCBzZW50ZW5jZS4gUmV0dXJucyBzb21ldGhpbmcgbGlrZVxyXG4gICAqIFwiU3VyZmFjZSB0ZW1wZXJhdHVyZSBpcyBzb21ld2hhdCBoaWdoLlwiXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRRdWFsaXRhdGl2ZVN1cmZhY2VUZW1wZXJhdHVyZURlc2NyaXB0aW9uU3RyaW5nKCB0ZW1wZXJhdHVyZUtlbHZpbjogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2VudHJhdGlvbkNvbnRyb2xNb2RlOiBDb25jZW50cmF0aW9uQ29udHJvbE1vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBDb25jZW50cmF0aW9uRGF0ZSApOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFN0cmluZ1V0aWxzLmZpbGxJbiggR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5xdWFsaXRhdGl2ZVN1cmZhY2VUZW1wZXJhdHVyZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBkZXNjcmlwdGlvbjogVGVtcGVyYXR1cmVEZXNjcmliZXIuZ2V0UXVhbGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uU3RyaW5nKCB0ZW1wZXJhdHVyZUtlbHZpbiwgY29uY2VudHJhdGlvbkNvbnRyb2xNb2RlLCBkYXRlIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgY3VycmVudCB0ZW1wZXJhdHVyZSBpbiB0aGUgcHJvdmlkZWQgdW5pdHMsIGZvcm1hdHRlZCBmb3IgdXNlIGluIGludGVyYWN0aXZlIGRlc2NyaXB0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VGVtcGVyYXR1cmVWYWx1ZVN0cmluZyggdGVtcGVyYXR1cmVLZWx2aW46IG51bWJlciwgdW5pdHNWYWx1ZTogVGVtcGVyYXR1cmVVbml0cyApOiBzdHJpbmcge1xyXG4gICAgY29uc3QgY29udmVydGVkVmFsdWUgPSB1bml0c1ZhbHVlID09PSBUZW1wZXJhdHVyZVVuaXRzLktFTFZJTiA/IHRlbXBlcmF0dXJlS2VsdmluIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdHNWYWx1ZSA9PT0gVGVtcGVyYXR1cmVVbml0cy5DRUxTSVVTID8gR3JlZW5ob3VzZUVmZmVjdFV0aWxzLmtlbHZpblRvQ2Vsc2l1cyggdGVtcGVyYXR1cmVLZWx2aW4gKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIEdyZWVuaG91c2VFZmZlY3RVdGlscy5rZWx2aW5Ub0ZhaHJlbmhlaXQoIHRlbXBlcmF0dXJlS2VsdmluICk7XHJcblxyXG4gICAgcmV0dXJuIFV0aWxzLnRvRml4ZWQoIGNvbnZlcnRlZFZhbHVlLCAxICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGcm9tIHRoZSBFbnVtZXJhdGlvblByb3BlcnR5IHZhbHVlLCByZXR1cm4gdGhlIHN0cmluZyBmb3IgdGhlIHVuaXRzIG9mIHRlbXBlcmF0dXJlIGZvciB1c2UgaW4gaW50ZXJhY3RpdmVcclxuICAgKiBkZXNjcmlwdGlvbnMuIFdpbGwgcmV0dXJuIHNvbWV0aGluZyBsaWtlXHJcbiAgICogXCJLZWx2aW5cIiBvclxyXG4gICAqIFwiZGVncmVlcyBDZWxzaXVzXCJcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldFRlbXBlcmF0dXJlVW5pdHNTdHJpbmcoIHVuaXRzVmFsdWU6IFRlbXBlcmF0dXJlVW5pdHMgKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB1bml0c1ZhbHVlID09PSBUZW1wZXJhdHVyZVVuaXRzLktFTFZJTiA/IGtlbHZpblN0cmluZ1Byb3BlcnR5LnZhbHVlIDpcclxuICAgICAgICAgICB1bml0c1ZhbHVlID09PSBUZW1wZXJhdHVyZVVuaXRzLkNFTFNJVVMgPyBjZWxzaXVzU3RyaW5nUHJvcGVydHkudmFsdWUgOlxyXG4gICAgICAgICAgIGZhaHJlbmhlaXRTdHJpbmdQcm9wZXJ0eS52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGRlc2NyaXB0aW9uIG9mIHRoZSBjaGFuZ2UgaW4gc3VyZmFjZSB0ZW1wZXJhdHVyZSwgd2l0aCBtb3JlIG9yIGxlc3MgaW5mb3JtYXRpb24gZGVwZW5kaW5nIG9uIHdoZXRoZXJcclxuICAgKiB0aGUgdGhlcm1vbWV0ZXIgaXMgdmlzaWJsZS4gV2lsbCByZXR1cm4gc29tZXRoaW5nIGxpa2U6XHJcbiAgICpcclxuICAgKiBcIlN1cmZhY2UgdGVtcGVyYXR1cmUgd2FybWluZywgbm93IDI3NyBLZWx2aW4uXCIgb3JcclxuICAgKiBcIkNvb2xpbmcsIG5vdyAyNjYuMSBLZWx2aW4uXCIgb3JcclxuICAgKiBcIlN1cmZhY2UgdGVtcGVyYXR1cmUgc3RhYmlsaXppbmcsIG5vdyAyNTUgS2VsdmluLlwiXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb2xkVGVtcGVyYXR1cmVcclxuICAgKiBAcGFyYW0gY3VycmVudFRlbXBlcmF0dXJlXHJcbiAgICogQHBhcmFtIHRoZXJtb21ldGVyVmlzaWJsZSAtIEFyZSB3ZSBkaXNwbGF5aW5nIHN1cmZhY2UgdGVtcGVyYXR1cmUgdmFsdWVzP1xyXG4gICAqIEBwYXJhbSB1bml0c1ZhbHVlIC0gV2hhdCBhcmUgdGhlIGRpc3BsYXllZCB1bml0cz9cclxuICAgKiBAcGFyYW0gaW5jbHVkZVN1cmZhY2VUZW1wZXJhdHVyZUZyYWdtZW50IC0gSW5jbHVkZSB0aGUgXCJTdXJmYWNlIHRlbXBlcmF0dXJlLi4uXCIgcHJlZml4IGZyYWdtZW50P1xyXG4gICAqIEBwYXJhbSBkZXNjcmliZUFzU3RhYmlsaXppbmcgLSBJbnN0ZWFkIG9mICd3YXJtaW5nJyBvciAnY29vbGluZycsIGRlc2NyaWJlIHRoZSB0ZW1wZXJhdHVyZSBhcyAnc3RhYmlsaXppbmcnLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U3VyZmFjZVRlbXBlcmF0dXJlQ2hhbmdlU3RyaW5nKCBvbGRUZW1wZXJhdHVyZTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGVtcGVyYXR1cmU6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlcm1vbWV0ZXJWaXNpYmxlOiBib29sZWFuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0c1ZhbHVlOiBUZW1wZXJhdHVyZVVuaXRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlU3VyZmFjZVRlbXBlcmF0dXJlRnJhZ21lbnQ6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlQXNTdGFiaWxpemluZzogYm9vbGVhbiApOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIGxldCBjaGFuZ2VTdHJpbmcgPSBudWxsO1xyXG4gICAgbGV0IHBhdHRlcm5TdHJpbmcgPSBudWxsO1xyXG5cclxuICAgIGlmICggb2xkVGVtcGVyYXR1cmUgIT09IGN1cnJlbnRUZW1wZXJhdHVyZSApIHtcclxuICAgICAgbGV0IHF1YWxpdGF0aXZlRGVzY3JpcHRpb25TdHJpbmcgPSBkZXNjcmliZUFzU3RhYmlsaXppbmcgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWJpbGl6aW5nU3RyaW5nUHJvcGVydHkudmFsdWUgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggY3VycmVudFRlbXBlcmF0dXJlID4gb2xkVGVtcGVyYXR1cmUgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybWluZ1N0cmluZ1Byb3BlcnR5LnZhbHVlIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2xpbmdTdHJpbmdQcm9wZXJ0eS52YWx1ZSApO1xyXG5cclxuICAgICAgLy8gSWYgd2UgYXJlIG5vdCBpbmNsdWRpbmcgdGhlIHN1cmZhY2UgdGVtcGVyYXR1cmUgZnJhZ21lbnQsIHRoZSBxdWFsaXRhdGl2ZSBkZXNjcmlwdGlvbiBpcyB0aGUgZmlyc3Qgd29yZC5cclxuICAgICAgLy8gVGhpcyBpcyBOT1QgaTE4biBmcmllbmRseSwgYnV0IFBoRVQncyBwb2xpY3kgaXMgdGhhdCBpcyBPSyBmb3Igbm93LlxyXG4gICAgICBpZiAoICFpbmNsdWRlU3VyZmFjZVRlbXBlcmF0dXJlRnJhZ21lbnQgKSB7XHJcbiAgICAgICAgcXVhbGl0YXRpdmVEZXNjcmlwdGlvblN0cmluZyA9IFN0cmluZ1V0aWxzLmNhcGl0YWxpemUoIHF1YWxpdGF0aXZlRGVzY3JpcHRpb25TdHJpbmcgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCB0aGVybW9tZXRlclZpc2libGUgKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcGVyYXR1cmVWYWx1ZVN0cmluZyA9IFRlbXBlcmF0dXJlRGVzY3JpYmVyLmdldFF1YW50aXRhdGl2ZVRlbXBlcmF0dXJlRGVzY3JpcHRpb24oIGN1cnJlbnRUZW1wZXJhdHVyZSwgdW5pdHNWYWx1ZSApO1xyXG5cclxuICAgICAgICBwYXR0ZXJuU3RyaW5nID0gaW5jbHVkZVN1cmZhY2VUZW1wZXJhdHVyZUZyYWdtZW50ID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VyZmFjZVRlbXBlcmF0dXJlQ2hhbmdlV2l0aFZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5LnZhbHVlIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGVyYXR1cmVDaGFuZ2VXaXRoVmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHkudmFsdWU7XHJcbiAgICAgICAgY2hhbmdlU3RyaW5nID0gU3RyaW5nVXRpbHMuZmlsbEluKCBwYXR0ZXJuU3RyaW5nLCB7XHJcbiAgICAgICAgICBxdWFsaXRhdGl2ZURlc2NyaXB0aW9uOiBxdWFsaXRhdGl2ZURlc2NyaXB0aW9uU3RyaW5nLFxyXG4gICAgICAgICAgdGVtcGVyYXR1cmU6IHRlbXBlcmF0dXJlVmFsdWVTdHJpbmdcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIHBhdHRlcm5TdHJpbmcgPSBpbmNsdWRlU3VyZmFjZVRlbXBlcmF0dXJlRnJhZ21lbnQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdXJmYWNlVGVtcGVyYXR1cmVDaGFuZ2VXaXRob3V0VmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydHkudmFsdWUgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZUNoYW5nZVdpdGhvdXRWYWx1ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgICBjaGFuZ2VTdHJpbmcgPSBTdHJpbmdVdGlscy5maWxsSW4oIHBhdHRlcm5TdHJpbmcsIHtcclxuICAgICAgICAgIHF1YWxpdGF0aXZlRGVzY3JpcHRpb246IHF1YWxpdGF0aXZlRGVzY3JpcHRpb25TdHJpbmdcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hhbmdlU3RyaW5nO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGEgZGVzY3JpcHRpb24gb2YgdGhlIHN1cmZhY2UgdGVtcGVyYXR1cmUgd2hlbiBpdCBpcyBzdGFibGUsIGkuZS4gdGhlIGdyb3VuZCBpcyBpbiBlcXVpbGlicml1bS4gVGhpcyB3aWxsXHJcbiAgICogaW5jbHVkZSBtb3JlIG9yIGxlc3MgaW5mb3JtYXRpb24gZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHRoZXJtb21ldGVyIGlzIHZpc2libGUgYW5kL29yIHRoZSBzdXJmYWNlIHRlbXBlcmF0dXJlXHJcbiAgICogaW5kaWNhdG9yIGlzIHZpc2libGUuIFdpbGwgcmV0dXJuIHNvbWV0aGluZyBsaWtlOiBcIlN1cmZhY2UgdGVtcGVyYXR1cmUgc3RhYmxlIGFuZCBob3QsIG5vdyAyNzcgS2VsdmluLlwiXHJcbiAgICpcclxuICAgKiBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgYWN0dWFsbHkgY2hlY2sgdGhhdCB0aGUgdGVtcGVyYXR1cmUgKmlzKiBzdGFibGUsIHNvIHVzZSB3aXNlbHkuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRTdXJmYWNlVGVtcGVyYXR1cmVTdGFibGVTdHJpbmcoIHRlbXBlcmF0dXJlOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZXJtb21ldGVyVmlzaWJsZTogYm9vbGVhbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VyZmFjZVRlbXBlcmF0dXJlSW5kaWNhdGlvblZpc2libGU6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRzVmFsdWU6IFRlbXBlcmF0dXJlVW5pdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmNlbnRyYXRpb25Db250cm9sTW9kZTogQ29uY2VudHJhdGlvbkNvbnRyb2xNb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBDb25jZW50cmF0aW9uRGF0ZSApOiBzdHJpbmcge1xyXG5cclxuICAgIGxldCBzdGFibGVUZW1wZXJhdHVyZVN0cmluZyA9ICcnO1xyXG4gICAgaWYgKCB0aGVybW9tZXRlclZpc2libGUgJiYgc3VyZmFjZVRlbXBlcmF0dXJlSW5kaWNhdGlvblZpc2libGUgKSB7XHJcbiAgICAgIHN0YWJsZVRlbXBlcmF0dXJlU3RyaW5nID0gU3RyaW5nVXRpbHMuZmlsbEluKCBzdXJmYWNlVGVtcGVyYXR1cmVTdGFibGVXaXRoRGVzY3JpcHRpb25BbmRWYWx1ZVN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgcXVhbGl0YXRpdmVEZXNjcmlwdGlvbjogVGVtcGVyYXR1cmVEZXNjcmliZXIuZ2V0UXVhbGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uU3RyaW5nKFxyXG4gICAgICAgICAgdGVtcGVyYXR1cmUsXHJcbiAgICAgICAgICBjb25jZW50cmF0aW9uQ29udHJvbE1vZGUsXHJcbiAgICAgICAgICBkYXRlXHJcbiAgICAgICAgKSxcclxuICAgICAgICBxdWFudGl0YXRpdmVEZXNjcmlwdGlvbjogVGVtcGVyYXR1cmVEZXNjcmliZXIuZ2V0UXVhbnRpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvbiggdGVtcGVyYXR1cmUsIHVuaXRzVmFsdWUgKVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggdGhlcm1vbWV0ZXJWaXNpYmxlICYmICFzdXJmYWNlVGVtcGVyYXR1cmVJbmRpY2F0aW9uVmlzaWJsZSApIHtcclxuICAgICAgc3RhYmxlVGVtcGVyYXR1cmVTdHJpbmcgPSBTdHJpbmdVdGlscy5maWxsSW4oIHN1cmZhY2VUZW1wZXJhdHVyZVN0YWJsZVdpdGhWYWx1ZVN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgcXVhbnRpdGF0aXZlRGVzY3JpcHRpb246IFRlbXBlcmF0dXJlRGVzY3JpYmVyLmdldFF1YW50aXRhdGl2ZVRlbXBlcmF0dXJlRGVzY3JpcHRpb24oIHRlbXBlcmF0dXJlLCB1bml0c1ZhbHVlIClcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoICF0aGVybW9tZXRlclZpc2libGUgJiYgc3VyZmFjZVRlbXBlcmF0dXJlSW5kaWNhdGlvblZpc2libGUgKSB7XHJcbiAgICAgIHN0YWJsZVRlbXBlcmF0dXJlU3RyaW5nID0gU3RyaW5nVXRpbHMuZmlsbEluKCBzdXJmYWNlVGVtcGVyYXR1cmVTdGFibGVXaXRoRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgIHF1YWxpdGF0aXZlRGVzY3JpcHRpb246IFRlbXBlcmF0dXJlRGVzY3JpYmVyLmdldFF1YWxpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZyhcclxuICAgICAgICAgIHRlbXBlcmF0dXJlLFxyXG4gICAgICAgICAgY29uY2VudHJhdGlvbkNvbnRyb2xNb2RlLFxyXG4gICAgICAgICAgZGF0ZVxyXG4gICAgICAgIClcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoICF0aGVybW9tZXRlclZpc2libGUgJiYgIXN1cmZhY2VUZW1wZXJhdHVyZUluZGljYXRpb25WaXNpYmxlICkge1xyXG4gICAgICBzdGFibGVUZW1wZXJhdHVyZVN0cmluZyA9IHN1cmZhY2VUZW1wZXJhdHVyZVN0YWJsZVN0cmluZ1Byb3BlcnR5LnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdGFibGVUZW1wZXJhdHVyZVN0cmluZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGN1cnJlbnQgc3VyZmFjZSB0ZW1wZXJhdHVyZSBcImlzXCIuIFNpbWlsYXIgdG8gb3RoZXIgZnVuY3Rpb25zIGluIHRoaXMgY2xhc3MsIGJ1dCB3aXRoXHJcbiAgICogc2xpZ2h0bHkgZGlmZmVyZW50IGdyYW1tYXRpY2FsIHN0cnVjdHVyZSBmb3IgZGlmZmVyZW50IGNvbnRleHRzLiBJZiB0aGUgdGhlcm1vbWV0ZXIgYW5kIHN1cmZhY2UgdGVtcGVyYXR1cmVcclxuICAgKiBpbmRpY2F0b3JzIGFyZSBib3RoIGludmlzaWJsZSwgbnVsbCB3aWxsIGJlIHJldHVybmVkLlxyXG4gICAqXHJcbiAgICogV2lsbCByZXR1cm4gc29tZXRoaW5nIGxpa2VcclxuICAgKiBcIlRoZSBzdXJmYWNlIHRlbXBlcmF0dXJlIGlzIGhpZ2gsIDI5MCBLZWx2aW4uXCJcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldFN1cmZhY2VUZW1wZXJhdHVyZUlzU3RyaW5nKCB0ZW1wZXJhdHVyZTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZXJtb21ldGVyVmlzaWJsZTogYm9vbGVhbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXJmYWNlVGVtcGVyYXR1cmVJbmRpY2F0aW9uVmlzaWJsZTogYm9vbGVhbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0c1ZhbHVlOiBUZW1wZXJhdHVyZVVuaXRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmNlbnRyYXRpb25Db250cm9sTW9kZTogQ29uY2VudHJhdGlvbkNvbnRyb2xNb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IENvbmNlbnRyYXRpb25EYXRlICk6IHN0cmluZyB8IG51bGwge1xyXG5cclxuICAgIGxldCBzdXJmYWNlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZyA9IG51bGw7XHJcbiAgICBpZiAoIHRoZXJtb21ldGVyVmlzaWJsZSAmJiBzdXJmYWNlVGVtcGVyYXR1cmVJbmRpY2F0aW9uVmlzaWJsZSApIHtcclxuICAgICAgc3VyZmFjZVRlbXBlcmF0dXJlRGVzY3JpcHRpb25TdHJpbmcgPSBTdHJpbmdVdGlscy5maWxsSW4oXHJcbiAgICAgICAgc3VyZmFjZVRlbXBlcmF0dXJlSXNRdWFudGl0YXRpdmVBbmRRdWFsaXRhdGl2ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBkZXNjcmlwdGlvbjogVGVtcGVyYXR1cmVEZXNjcmliZXIuZ2V0UXVhbGl0YXRpdmVUZW1wZXJhdHVyZURlc2NyaXB0aW9uU3RyaW5nKFxyXG4gICAgICAgICAgICB0ZW1wZXJhdHVyZSxcclxuICAgICAgICAgICAgY29uY2VudHJhdGlvbkNvbnRyb2xNb2RlLFxyXG4gICAgICAgICAgICBkYXRlXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICAgdmFsdWU6IFRlbXBlcmF0dXJlRGVzY3JpYmVyLmdldFF1YW50aXRhdGl2ZVRlbXBlcmF0dXJlRGVzY3JpcHRpb24oIHRlbXBlcmF0dXJlLCB1bml0c1ZhbHVlIClcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggdGhlcm1vbWV0ZXJWaXNpYmxlICkge1xyXG4gICAgICBzdXJmYWNlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZyA9IFN0cmluZ1V0aWxzLmZpbGxJbiggc3VyZmFjZVRlbXBlcmF0dXJlSXNRdWFudGl0YXRpdmVQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICB2YWx1ZTogVGVtcGVyYXR1cmVEZXNjcmliZXIuZ2V0UXVhbnRpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvbiggdGVtcGVyYXR1cmUsIHVuaXRzVmFsdWUgKVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggc3VyZmFjZVRlbXBlcmF0dXJlSW5kaWNhdGlvblZpc2libGUgKSB7XHJcbiAgICAgIHN1cmZhY2VUZW1wZXJhdHVyZURlc2NyaXB0aW9uU3RyaW5nID0gU3RyaW5nVXRpbHMuZmlsbEluKCBzdXJmYWNlVGVtcGVyYXR1cmVJc1F1YWxpdGF0aXZlUGF0dGVyblN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgZGVzY3JpcHRpb246IFRlbXBlcmF0dXJlRGVzY3JpYmVyLmdldFF1YWxpdGF0aXZlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZyhcclxuICAgICAgICAgIHRlbXBlcmF0dXJlLFxyXG4gICAgICAgICAgY29uY2VudHJhdGlvbkNvbnRyb2xNb2RlLFxyXG4gICAgICAgICAgZGF0ZVxyXG4gICAgICAgIClcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdXJmYWNlVGVtcGVyYXR1cmVEZXNjcmlwdGlvblN0cmluZztcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdUZW1wZXJhdHVyZURlc2NyaWJlcicsIFRlbXBlcmF0dXJlRGVzY3JpYmVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IFRlbXBlcmF0dXJlRGVzY3JpYmVyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxPQUFPQyxXQUFXLE1BQU0sa0RBQWtEO0FBQzFFLE9BQU9DLGdCQUFnQixNQUFNLDhCQUE4QjtBQUMzRCxPQUFPQyx1QkFBdUIsTUFBTSxxQ0FBcUM7QUFDekUsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBQ2xFLFNBQVNDLHdCQUF3QixRQUEyQixtQ0FBbUM7QUFDL0YsT0FBT0MsZ0JBQWdCLE1BQU0saUNBQWlDOztBQUU5RDtBQUNBLE1BQU1DLDJCQUEyQixHQUFHSix1QkFBdUIsQ0FBQ0ssSUFBSSxDQUFDQyw2QkFBNkIsQ0FBQ0YsMkJBQTJCO0FBQzFILE1BQU1HLHNCQUFzQixHQUFHUCx1QkFBdUIsQ0FBQ0ssSUFBSSxDQUFDQyw2QkFBNkIsQ0FBQ0Msc0JBQXNCO0FBQ2hILE1BQU1DLGtCQUFrQixHQUFHUix1QkFBdUIsQ0FBQ0ssSUFBSSxDQUFDQyw2QkFBNkIsQ0FBQ0Usa0JBQWtCO0FBQ3hHLE1BQU1DLHNCQUFzQixHQUFHVCx1QkFBdUIsQ0FBQ0ssSUFBSSxDQUFDQyw2QkFBNkIsQ0FBQ0csc0JBQXNCO0FBQ2hILE1BQU1DLGlCQUFpQixHQUFHVix1QkFBdUIsQ0FBQ0ssSUFBSSxDQUFDQyw2QkFBNkIsQ0FBQ0ksaUJBQWlC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