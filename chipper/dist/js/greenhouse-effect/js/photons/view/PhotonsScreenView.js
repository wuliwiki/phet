// Copyright 2020-2022, University of Colorado Boulder

/**
 * Main screen view for the "Photons" screen.
 *
 * @author John Blanco
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import { VBox } from '../../../../scenery/js/imports.js';
import GreenhouseEffectConstants from '../../common/GreenhouseEffectConstants.js';
import { ConcentrationControlMode } from '../../common/model/ConcentrationModel.js';
import ConcentrationControlPanel from '../../common/view/ConcentrationControlPanel.js';
import RadiationDescriber from '../../common/view/describers/RadiationDescriber.js';
import GreenhouseEffectScreenView from '../../common/view/GreenhouseEffectScreenView.js';
import LayersModelTimeControlNode from '../../common/view/LayersModelTimeControlNode.js';
import MorePhotonsCheckbox from '../../common/view/MorePhotonsCheckbox.js';
import SurfaceThermometerCheckbox from '../../common/view/SurfaceThermometerCheckbox.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import CloudCheckbox from '../../waves/view/CloudCheckbox.js';
import PhotonLandscapeObservationWindow from './PhotonLandscapeObservationWindow.js';
class PhotonsScreenView extends GreenhouseEffectScreenView {
  constructor(model, tandem) {
    // Create the observation window that will depict the ground, sky, photons, etc.
    const observationWindow = new PhotonLandscapeObservationWindow(model, {
      tandem: tandem.createTandem('observationWindow')
    });

    // Create the node that will allow the user to play and pause the simulation.
    const timeControlNode = new LayersModelTimeControlNode(model, {
      tandem: tandem.createTandem('timeControlNode')
    });
    super(model, observationWindow, timeControlNode, {
      // Frame the observation window so that the photons appear to stay within it.
      useClippingFrame: true,
      // phet-io
      tandem: tandem
    });
    const surfaceThermometerCheckbox = new SurfaceThermometerCheckbox(model.surfaceThermometerVisibleProperty, model.surfaceTemperatureKelvinProperty, model.temperatureUnitsProperty, tandem.createTandem('surfaceThermometerCheckbox'));
    const morePhotonsCheckbox = new MorePhotonsCheckbox(model.photonCollection.showAllSimulatedPhotonsInViewProperty, tandem.createTandem('morePhotonsCheckbox'));

    // Responsible for generating descriptions about the changing radiation.
    const radiationDescriber = new RadiationDescriber(model);
    const concentrationControlPanel = new ConcentrationControlPanel(this.energyLegend.width, model, radiationDescriber, {
      includeCompositionData: true,
      // phet-io
      tandem: tandem.createTandem('concentrationControlPanel')
    });

    // Add the concentration controls.  It goes into a VBox to support dynamic layout.
    this.legendAndControlsVBox.addChild(concentrationControlPanel);

    // Create the cloud-control checkbox.  This is only shown in manually-controlled-concentration mode.
    const cloudCheckbox = new CloudCheckbox(model.cloudEnabledProperty, model.sunEnergySource.isShiningProperty, {
      visibleProperty: new DerivedProperty([model.concentrationControlModeProperty], mode => mode === ConcentrationControlMode.BY_VALUE),
      tandem: tandem.createTandem('cloudCheckbox')
    });

    // layout code
    const visibilityBox = new VBox({
      children: [surfaceThermometerCheckbox, morePhotonsCheckbox],
      spacing: 5,
      align: 'left'
    });
    visibilityBox.left = this.observationWindow.left + 5;
    visibilityBox.centerY = this.timeControlNode.centerY;
    this.addChild(visibilityBox);
    cloudCheckbox.leftBottom = this.observationWindow.rightBottom.plusXY(GreenhouseEffectConstants.OBSERVATION_WINDOW_RIGHT_SPACING, 0);
    this.addChild(cloudCheckbox);
    concentrationControlPanel.leftTop = this.energyLegend.leftBottom.plusXY(0, 10);

    // pdom - override the pdomOrders for the supertype to insert subtype components
    this.pdomPlayAreaNode.pdomOrder = [this.observationWindow, this.energyLegend, concentrationControlPanel, observationWindow.surfaceThermometer, observationWindow.instrumentVisibilityControls, observationWindow.fluxMeterNode, cloudCheckbox];
    this.pdomControlAreaNode.pdomOrder = [visibilityBox, this.timeControlNode, this.resetAllButton];
  }
}
greenhouseEffect.register('PhotonsScreenView', PhotonsScreenView);
export default PhotonsScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJWQm94IiwiR3JlZW5ob3VzZUVmZmVjdENvbnN0YW50cyIsIkNvbmNlbnRyYXRpb25Db250cm9sTW9kZSIsIkNvbmNlbnRyYXRpb25Db250cm9sUGFuZWwiLCJSYWRpYXRpb25EZXNjcmliZXIiLCJHcmVlbmhvdXNlRWZmZWN0U2NyZWVuVmlldyIsIkxheWVyc01vZGVsVGltZUNvbnRyb2xOb2RlIiwiTW9yZVBob3RvbnNDaGVja2JveCIsIlN1cmZhY2VUaGVybW9tZXRlckNoZWNrYm94IiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkNsb3VkQ2hlY2tib3giLCJQaG90b25MYW5kc2NhcGVPYnNlcnZhdGlvbldpbmRvdyIsIlBob3RvbnNTY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRhbmRlbSIsIm9ic2VydmF0aW9uV2luZG93IiwiY3JlYXRlVGFuZGVtIiwidGltZUNvbnRyb2xOb2RlIiwidXNlQ2xpcHBpbmdGcmFtZSIsInN1cmZhY2VUaGVybW9tZXRlckNoZWNrYm94Iiwic3VyZmFjZVRoZXJtb21ldGVyVmlzaWJsZVByb3BlcnR5Iiwic3VyZmFjZVRlbXBlcmF0dXJlS2VsdmluUHJvcGVydHkiLCJ0ZW1wZXJhdHVyZVVuaXRzUHJvcGVydHkiLCJtb3JlUGhvdG9uc0NoZWNrYm94IiwicGhvdG9uQ29sbGVjdGlvbiIsInNob3dBbGxTaW11bGF0ZWRQaG90b25zSW5WaWV3UHJvcGVydHkiLCJyYWRpYXRpb25EZXNjcmliZXIiLCJjb25jZW50cmF0aW9uQ29udHJvbFBhbmVsIiwiZW5lcmd5TGVnZW5kIiwid2lkdGgiLCJpbmNsdWRlQ29tcG9zaXRpb25EYXRhIiwibGVnZW5kQW5kQ29udHJvbHNWQm94IiwiYWRkQ2hpbGQiLCJjbG91ZENoZWNrYm94IiwiY2xvdWRFbmFibGVkUHJvcGVydHkiLCJzdW5FbmVyZ3lTb3VyY2UiLCJpc1NoaW5pbmdQcm9wZXJ0eSIsInZpc2libGVQcm9wZXJ0eSIsImNvbmNlbnRyYXRpb25Db250cm9sTW9kZVByb3BlcnR5IiwibW9kZSIsIkJZX1ZBTFVFIiwidmlzaWJpbGl0eUJveCIsImNoaWxkcmVuIiwic3BhY2luZyIsImFsaWduIiwibGVmdCIsImNlbnRlclkiLCJsZWZ0Qm90dG9tIiwicmlnaHRCb3R0b20iLCJwbHVzWFkiLCJPQlNFUlZBVElPTl9XSU5ET1dfUklHSFRfU1BBQ0lORyIsImxlZnRUb3AiLCJwZG9tUGxheUFyZWFOb2RlIiwicGRvbU9yZGVyIiwic3VyZmFjZVRoZXJtb21ldGVyIiwiaW5zdHJ1bWVudFZpc2liaWxpdHlDb250cm9scyIsImZsdXhNZXRlck5vZGUiLCJwZG9tQ29udHJvbEFyZWFOb2RlIiwicmVzZXRBbGxCdXR0b24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBob3RvbnNTY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gc2NyZWVuIHZpZXcgZm9yIHRoZSBcIlBob3RvbnNcIiBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHcmVlbmhvdXNlRWZmZWN0Q29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9HcmVlbmhvdXNlRWZmZWN0Q29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgQ29uY2VudHJhdGlvbkNvbnRyb2xNb2RlIH0gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0NvbmNlbnRyYXRpb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBDb25jZW50cmF0aW9uQ29udHJvbFBhbmVsIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0NvbmNlbnRyYXRpb25Db250cm9sUGFuZWwuanMnO1xyXG5pbXBvcnQgUmFkaWF0aW9uRGVzY3JpYmVyIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L2Rlc2NyaWJlcnMvUmFkaWF0aW9uRGVzY3JpYmVyLmpzJztcclxuaW1wb3J0IEdyZWVuaG91c2VFZmZlY3RTY3JlZW5WaWV3IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0dyZWVuaG91c2VFZmZlY3RTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IExheWVyc01vZGVsVGltZUNvbnRyb2xOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0xheWVyc01vZGVsVGltZUNvbnRyb2xOb2RlLmpzJztcclxuaW1wb3J0IE1vcmVQaG90b25zQ2hlY2tib3ggZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTW9yZVBob3RvbnNDaGVja2JveC5qcyc7XHJcbmltcG9ydCBTdXJmYWNlVGhlcm1vbWV0ZXJDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9TdXJmYWNlVGhlcm1vbWV0ZXJDaGVja2JveC5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgQ2xvdWRDaGVja2JveCBmcm9tICcuLi8uLi93YXZlcy92aWV3L0Nsb3VkQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgUGhvdG9uc01vZGVsIGZyb20gJy4uL21vZGVsL1Bob3RvbnNNb2RlbC5qcyc7XHJcbmltcG9ydCBQaG90b25MYW5kc2NhcGVPYnNlcnZhdGlvbldpbmRvdyBmcm9tICcuL1Bob3RvbkxhbmRzY2FwZU9ic2VydmF0aW9uV2luZG93LmpzJztcclxuXHJcbmNsYXNzIFBob3RvbnNTY3JlZW5WaWV3IGV4dGVuZHMgR3JlZW5ob3VzZUVmZmVjdFNjcmVlblZpZXcge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBQaG90b25zTW9kZWwsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgb2JzZXJ2YXRpb24gd2luZG93IHRoYXQgd2lsbCBkZXBpY3QgdGhlIGdyb3VuZCwgc2t5LCBwaG90b25zLCBldGMuXHJcbiAgICBjb25zdCBvYnNlcnZhdGlvbldpbmRvdyA9IG5ldyBQaG90b25MYW5kc2NhcGVPYnNlcnZhdGlvbldpbmRvdyggbW9kZWwsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnb2JzZXJ2YXRpb25XaW5kb3cnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIG5vZGUgdGhhdCB3aWxsIGFsbG93IHRoZSB1c2VyIHRvIHBsYXkgYW5kIHBhdXNlIHRoZSBzaW11bGF0aW9uLlxyXG4gICAgY29uc3QgdGltZUNvbnRyb2xOb2RlID0gbmV3IExheWVyc01vZGVsVGltZUNvbnRyb2xOb2RlKCBtb2RlbCwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aW1lQ29udHJvbE5vZGUnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIG9ic2VydmF0aW9uV2luZG93LCB0aW1lQ29udHJvbE5vZGUsIHtcclxuXHJcbiAgICAgIC8vIEZyYW1lIHRoZSBvYnNlcnZhdGlvbiB3aW5kb3cgc28gdGhhdCB0aGUgcGhvdG9ucyBhcHBlYXIgdG8gc3RheSB3aXRoaW4gaXQuXHJcbiAgICAgIHVzZUNsaXBwaW5nRnJhbWU6IHRydWUsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgc3VyZmFjZVRoZXJtb21ldGVyQ2hlY2tib3ggPSBuZXcgU3VyZmFjZVRoZXJtb21ldGVyQ2hlY2tib3goXHJcbiAgICAgIG1vZGVsLnN1cmZhY2VUaGVybW9tZXRlclZpc2libGVQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwuc3VyZmFjZVRlbXBlcmF0dXJlS2VsdmluUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLnRlbXBlcmF0dXJlVW5pdHNQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3N1cmZhY2VUaGVybW9tZXRlckNoZWNrYm94JyApXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG1vcmVQaG90b25zQ2hlY2tib3ggPSBuZXcgTW9yZVBob3RvbnNDaGVja2JveChcclxuICAgICAgbW9kZWwucGhvdG9uQ29sbGVjdGlvbi5zaG93QWxsU2ltdWxhdGVkUGhvdG9uc0luVmlld1Byb3BlcnR5LFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9yZVBob3RvbnNDaGVja2JveCcgKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBSZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyBkZXNjcmlwdGlvbnMgYWJvdXQgdGhlIGNoYW5naW5nIHJhZGlhdGlvbi5cclxuICAgIGNvbnN0IHJhZGlhdGlvbkRlc2NyaWJlciA9IG5ldyBSYWRpYXRpb25EZXNjcmliZXIoIG1vZGVsICk7XHJcblxyXG4gICAgY29uc3QgY29uY2VudHJhdGlvbkNvbnRyb2xQYW5lbCA9IG5ldyBDb25jZW50cmF0aW9uQ29udHJvbFBhbmVsKFxyXG4gICAgICB0aGlzLmVuZXJneUxlZ2VuZC53aWR0aCxcclxuICAgICAgbW9kZWwsXHJcbiAgICAgIHJhZGlhdGlvbkRlc2NyaWJlciwge1xyXG4gICAgICAgIGluY2x1ZGVDb21wb3NpdGlvbkRhdGE6IHRydWUsXHJcblxyXG4gICAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjb25jZW50cmF0aW9uQ29udHJvbFBhbmVsJyApXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBjb25jZW50cmF0aW9uIGNvbnRyb2xzLiAgSXQgZ29lcyBpbnRvIGEgVkJveCB0byBzdXBwb3J0IGR5bmFtaWMgbGF5b3V0LlxyXG4gICAgdGhpcy5sZWdlbmRBbmRDb250cm9sc1ZCb3guYWRkQ2hpbGQoIGNvbmNlbnRyYXRpb25Db250cm9sUGFuZWwgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGNsb3VkLWNvbnRyb2wgY2hlY2tib3guICBUaGlzIGlzIG9ubHkgc2hvd24gaW4gbWFudWFsbHktY29udHJvbGxlZC1jb25jZW50cmF0aW9uIG1vZGUuXHJcbiAgICBjb25zdCBjbG91ZENoZWNrYm94ID0gbmV3IENsb3VkQ2hlY2tib3goXHJcbiAgICAgIG1vZGVsLmNsb3VkRW5hYmxlZFByb3BlcnR5LFxyXG4gICAgICBtb2RlbC5zdW5FbmVyZ3lTb3VyY2UuaXNTaGluaW5nUHJvcGVydHksXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlUHJvcGVydHk6IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgICAgICBbIG1vZGVsLmNvbmNlbnRyYXRpb25Db250cm9sTW9kZVByb3BlcnR5IF0sXHJcbiAgICAgICAgICBtb2RlID0+IG1vZGUgPT09IENvbmNlbnRyYXRpb25Db250cm9sTW9kZS5CWV9WQUxVRVxyXG4gICAgICAgICksXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY2xvdWRDaGVja2JveCcgKVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIGxheW91dCBjb2RlXHJcbiAgICBjb25zdCB2aXNpYmlsaXR5Qm94ID0gbmV3IFZCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFsgc3VyZmFjZVRoZXJtb21ldGVyQ2hlY2tib3gsIG1vcmVQaG90b25zQ2hlY2tib3ggXSxcclxuICAgICAgc3BhY2luZzogNSxcclxuICAgICAgYWxpZ246ICdsZWZ0J1xyXG4gICAgfSApO1xyXG4gICAgdmlzaWJpbGl0eUJveC5sZWZ0ID0gdGhpcy5vYnNlcnZhdGlvbldpbmRvdy5sZWZ0ICsgNTtcclxuICAgIHZpc2liaWxpdHlCb3guY2VudGVyWSA9IHRoaXMudGltZUNvbnRyb2xOb2RlLmNlbnRlclk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB2aXNpYmlsaXR5Qm94ICk7XHJcblxyXG4gICAgY2xvdWRDaGVja2JveC5sZWZ0Qm90dG9tID0gdGhpcy5vYnNlcnZhdGlvbldpbmRvdy5yaWdodEJvdHRvbS5wbHVzWFkoXHJcbiAgICAgIEdyZWVuaG91c2VFZmZlY3RDb25zdGFudHMuT0JTRVJWQVRJT05fV0lORE9XX1JJR0hUX1NQQUNJTkcsXHJcbiAgICAgIDBcclxuICAgICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBjbG91ZENoZWNrYm94ICk7XHJcblxyXG4gICAgY29uY2VudHJhdGlvbkNvbnRyb2xQYW5lbC5sZWZ0VG9wID0gdGhpcy5lbmVyZ3lMZWdlbmQubGVmdEJvdHRvbS5wbHVzWFkoIDAsIDEwICk7XHJcblxyXG4gICAgLy8gcGRvbSAtIG92ZXJyaWRlIHRoZSBwZG9tT3JkZXJzIGZvciB0aGUgc3VwZXJ0eXBlIHRvIGluc2VydCBzdWJ0eXBlIGNvbXBvbmVudHNcclxuICAgIHRoaXMucGRvbVBsYXlBcmVhTm9kZS5wZG9tT3JkZXIgPSBbXHJcbiAgICAgIHRoaXMub2JzZXJ2YXRpb25XaW5kb3csXHJcbiAgICAgIHRoaXMuZW5lcmd5TGVnZW5kLFxyXG4gICAgICBjb25jZW50cmF0aW9uQ29udHJvbFBhbmVsLFxyXG4gICAgICBvYnNlcnZhdGlvbldpbmRvdy5zdXJmYWNlVGhlcm1vbWV0ZXIsXHJcbiAgICAgIG9ic2VydmF0aW9uV2luZG93Lmluc3RydW1lbnRWaXNpYmlsaXR5Q29udHJvbHMsXHJcbiAgICAgIG9ic2VydmF0aW9uV2luZG93LmZsdXhNZXRlck5vZGUsXHJcbiAgICAgIGNsb3VkQ2hlY2tib3hcclxuICAgIF07XHJcbiAgICB0aGlzLnBkb21Db250cm9sQXJlYU5vZGUucGRvbU9yZGVyID0gW1xyXG4gICAgICB2aXNpYmlsaXR5Qm94LFxyXG4gICAgICB0aGlzLnRpbWVDb250cm9sTm9kZSxcclxuICAgICAgdGhpcy5yZXNldEFsbEJ1dHRvblxyXG4gICAgXTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdQaG90b25zU2NyZWVuVmlldycsIFBob3RvbnNTY3JlZW5WaWV3ICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBob3RvbnNTY3JlZW5WaWV3OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFFeEQsT0FBT0MseUJBQXlCLE1BQU0sMkNBQTJDO0FBQ2pGLFNBQVNDLHdCQUF3QixRQUFRLDBDQUEwQztBQUNuRixPQUFPQyx5QkFBeUIsTUFBTSxnREFBZ0Q7QUFDdEYsT0FBT0Msa0JBQWtCLE1BQU0sb0RBQW9EO0FBQ25GLE9BQU9DLDBCQUEwQixNQUFNLGlEQUFpRDtBQUN4RixPQUFPQywwQkFBMEIsTUFBTSxpREFBaUQ7QUFDeEYsT0FBT0MsbUJBQW1CLE1BQU0sMENBQTBDO0FBQzFFLE9BQU9DLDBCQUEwQixNQUFNLGlEQUFpRDtBQUN4RixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsYUFBYSxNQUFNLG1DQUFtQztBQUU3RCxPQUFPQyxnQ0FBZ0MsTUFBTSx1Q0FBdUM7QUFFcEYsTUFBTUMsaUJBQWlCLFNBQVNQLDBCQUEwQixDQUFDO0VBRWxEUSxXQUFXQSxDQUFFQyxLQUFtQixFQUFFQyxNQUFjLEVBQUc7SUFFeEQ7SUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxJQUFJTCxnQ0FBZ0MsQ0FBRUcsS0FBSyxFQUFFO01BQ3JFQyxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLG1CQUFvQjtJQUNuRCxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxlQUFlLEdBQUcsSUFBSVosMEJBQTBCLENBQUVRLEtBQUssRUFBRTtNQUM3REMsTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSxpQkFBa0I7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