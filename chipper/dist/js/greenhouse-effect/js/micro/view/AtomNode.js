// Copyright 2021-2022, University of Colorado Boulder

/**
 * Class that represents an atom in the view.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import ShadedSphereNode from '../../../../scenery-phet/js/ShadedSphereNode.js';
import { Circle, Node, RadialGradient } from '../../../../scenery/js/imports.js';
import greenhouseEffect from '../../greenhouseEffect.js';
class AtomNode extends Node {
  /**
   * Constructor for an atom node.
   *
   * @param {Atom} atom
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(atom, modelViewTransform) {
    // supertype constructor
    super();

    // Instance Data
    this.atom = atom; // @private
    this.modelViewTransform = modelViewTransform; // @private

    // Scale the radius to the modelViewTransform.
    const transformedRadius = modelViewTransform.modelToViewDeltaX(atom.radius);

    // Create a color gradient which is used when the molecule enters an excitation state.
    const haloGradientPaint = new RadialGradient(0, 0, 0, 0, 0, transformedRadius * 2).addColorStop(0, 'yellow').addColorStop(1, 'rgba( 255, 255, 51, 0 )');
    this.highlightNode = new Circle(transformedRadius * 2, {
      fill: haloGradientPaint
    }); // @private
    // Don't add the highlight halo now - wait until the first time it is used.  This is done for performance reasons.

    // Represent the atom as a shaded sphere node.
    const atomNode = new ShadedSphereNode(transformedRadius * 2, {
      mainColor: this.atom.representationColor
    });
    this.addChild(atomNode);

    // Link the model position to the position of this node.
    this.atom.positionProperty.link(() => {
      this.translation = this.modelViewTransform.modelToViewPosition(this.atom.positionProperty.get());
    });
  }

  /**
   * Highlight this atom to represent that it is in an excited state.
   * @param {boolean} highlighted
   * @public
   */
  setHighlighted(highlighted) {
    if (highlighted && !this.hasChild(this.highlightNode)) {
      // add the highlight halo the first time it is needed (i.e. lazily) for better performance.
      this.addChild(this.highlightNode);
      this.highlightNode.moveToBack();
    }

    // Use opacity instead of visibility.  This performs better, especially on iPad.  See issues #91, #93, and #98.
    // It's also a workaround for an issue in scenery where visibility changes are costly, see
    // https://github.com/phetsims/scenery/issues/404.  When this issue is resolved, the workaround can be replaced
    // with a visibility setting (assuming the hints described in the issue are used).
    this.highlightNode.opacity = highlighted ? 0.99 : 0;
  }
}
greenhouseEffect.register('AtomNode', AtomNode);
export default AtomNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFkZWRTcGhlcmVOb2RlIiwiQ2lyY2xlIiwiTm9kZSIsIlJhZGlhbEdyYWRpZW50IiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkF0b21Ob2RlIiwiY29uc3RydWN0b3IiLCJhdG9tIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwidHJhbnNmb3JtZWRSYWRpdXMiLCJtb2RlbFRvVmlld0RlbHRhWCIsInJhZGl1cyIsImhhbG9HcmFkaWVudFBhaW50IiwiYWRkQ29sb3JTdG9wIiwiaGlnaGxpZ2h0Tm9kZSIsImZpbGwiLCJhdG9tTm9kZSIsIm1haW5Db2xvciIsInJlcHJlc2VudGF0aW9uQ29sb3IiLCJhZGRDaGlsZCIsInBvc2l0aW9uUHJvcGVydHkiLCJsaW5rIiwidHJhbnNsYXRpb24iLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwiZ2V0Iiwic2V0SGlnaGxpZ2h0ZWQiLCJoaWdobGlnaHRlZCIsImhhc0NoaWxkIiwibW92ZVRvQmFjayIsIm9wYWNpdHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkF0b21Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENsYXNzIHRoYXQgcmVwcmVzZW50cyBhbiBhdG9tIGluIHRoZSB2aWV3LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNoYWRlZFNwaGVyZU5vZGUgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1NoYWRlZFNwaGVyZU5vZGUuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIE5vZGUsIFJhZGlhbEdyYWRpZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcblxyXG5jbGFzcyBBdG9tTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvciBmb3IgYW4gYXRvbSBub2RlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBdG9tfSBhdG9tXHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYXRvbSwgbW9kZWxWaWV3VHJhbnNmb3JtICkge1xyXG5cclxuICAgIC8vIHN1cGVydHlwZSBjb25zdHJ1Y3RvclxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBJbnN0YW5jZSBEYXRhXHJcbiAgICB0aGlzLmF0b20gPSBhdG9tOyAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0gPSBtb2RlbFZpZXdUcmFuc2Zvcm07IC8vIEBwcml2YXRlXHJcblxyXG4gICAgLy8gU2NhbGUgdGhlIHJhZGl1cyB0byB0aGUgbW9kZWxWaWV3VHJhbnNmb3JtLlxyXG4gICAgY29uc3QgdHJhbnNmb3JtZWRSYWRpdXMgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVgoIGF0b20ucmFkaXVzICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgY29sb3IgZ3JhZGllbnQgd2hpY2ggaXMgdXNlZCB3aGVuIHRoZSBtb2xlY3VsZSBlbnRlcnMgYW4gZXhjaXRhdGlvbiBzdGF0ZS5cclxuICAgIGNvbnN0IGhhbG9HcmFkaWVudFBhaW50ID0gbmV3IFJhZGlhbEdyYWRpZW50KCAwLCAwLCAwLCAwLCAwLCB0cmFuc2Zvcm1lZFJhZGl1cyAqIDIgKS5hZGRDb2xvclN0b3AoIDAsICd5ZWxsb3cnICkuYWRkQ29sb3JTdG9wKCAxLCAncmdiYSggMjU1LCAyNTUsIDUxLCAwICknICk7XHJcbiAgICB0aGlzLmhpZ2hsaWdodE5vZGUgPSBuZXcgQ2lyY2xlKCB0cmFuc2Zvcm1lZFJhZGl1cyAqIDIsIHsgZmlsbDogaGFsb0dyYWRpZW50UGFpbnQgfSApOyAvLyBAcHJpdmF0ZVxyXG4gICAgLy8gRG9uJ3QgYWRkIHRoZSBoaWdobGlnaHQgaGFsbyBub3cgLSB3YWl0IHVudGlsIHRoZSBmaXJzdCB0aW1lIGl0IGlzIHVzZWQuICBUaGlzIGlzIGRvbmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuXHJcblxyXG4gICAgLy8gUmVwcmVzZW50IHRoZSBhdG9tIGFzIGEgc2hhZGVkIHNwaGVyZSBub2RlLlxyXG4gICAgY29uc3QgYXRvbU5vZGUgPSBuZXcgU2hhZGVkU3BoZXJlTm9kZSggdHJhbnNmb3JtZWRSYWRpdXMgKiAyLCB7IG1haW5Db2xvcjogdGhpcy5hdG9tLnJlcHJlc2VudGF0aW9uQ29sb3IgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggYXRvbU5vZGUgKTtcclxuXHJcbiAgICAvLyBMaW5rIHRoZSBtb2RlbCBwb3NpdGlvbiB0byB0aGUgcG9zaXRpb24gb2YgdGhpcyBub2RlLlxyXG4gICAgdGhpcy5hdG9tLnBvc2l0aW9uUHJvcGVydHkubGluayggKCkgPT4ge1xyXG4gICAgICB0aGlzLnRyYW5zbGF0aW9uID0gdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggdGhpcy5hdG9tLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkgKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBIaWdobGlnaHQgdGhpcyBhdG9tIHRvIHJlcHJlc2VudCB0aGF0IGl0IGlzIGluIGFuIGV4Y2l0ZWQgc3RhdGUuXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBoaWdobGlnaHRlZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzZXRIaWdobGlnaHRlZCggaGlnaGxpZ2h0ZWQgKSB7XHJcbiAgICBpZiAoIGhpZ2hsaWdodGVkICYmICF0aGlzLmhhc0NoaWxkKCB0aGlzLmhpZ2hsaWdodE5vZGUgKSApIHtcclxuICAgICAgLy8gYWRkIHRoZSBoaWdobGlnaHQgaGFsbyB0aGUgZmlyc3QgdGltZSBpdCBpcyBuZWVkZWQgKGkuZS4gbGF6aWx5KSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLlxyXG4gICAgICB0aGlzLmFkZENoaWxkKCB0aGlzLmhpZ2hsaWdodE5vZGUgKTtcclxuICAgICAgdGhpcy5oaWdobGlnaHROb2RlLm1vdmVUb0JhY2soKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVc2Ugb3BhY2l0eSBpbnN0ZWFkIG9mIHZpc2liaWxpdHkuICBUaGlzIHBlcmZvcm1zIGJldHRlciwgZXNwZWNpYWxseSBvbiBpUGFkLiAgU2VlIGlzc3VlcyAjOTEsICM5MywgYW5kICM5OC5cclxuICAgIC8vIEl0J3MgYWxzbyBhIHdvcmthcm91bmQgZm9yIGFuIGlzc3VlIGluIHNjZW5lcnkgd2hlcmUgdmlzaWJpbGl0eSBjaGFuZ2VzIGFyZSBjb3N0bHksIHNlZVxyXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnkvaXNzdWVzLzQwNC4gIFdoZW4gdGhpcyBpc3N1ZSBpcyByZXNvbHZlZCwgdGhlIHdvcmthcm91bmQgY2FuIGJlIHJlcGxhY2VkXHJcbiAgICAvLyB3aXRoIGEgdmlzaWJpbGl0eSBzZXR0aW5nIChhc3N1bWluZyB0aGUgaGludHMgZGVzY3JpYmVkIGluIHRoZSBpc3N1ZSBhcmUgdXNlZCkuXHJcbiAgICB0aGlzLmhpZ2hsaWdodE5vZGUub3BhY2l0eSA9IGhpZ2hsaWdodGVkID8gMC45OSA6IDA7XHJcbiAgfVxyXG59XHJcblxyXG5ncmVlbmhvdXNlRWZmZWN0LnJlZ2lzdGVyKCAnQXRvbU5vZGUnLCBBdG9tTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXRvbU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZ0JBQWdCLE1BQU0saURBQWlEO0FBQzlFLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxjQUFjLFFBQVEsbUNBQW1DO0FBQ2hGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUV4RCxNQUFNQyxRQUFRLFNBQVNILElBQUksQ0FBQztFQUUxQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsSUFBSSxFQUFFQyxrQkFBa0IsRUFBRztJQUV0QztJQUNBLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDRCxJQUFJLEdBQUdBLElBQUksQ0FBQyxDQUFDO0lBQ2xCLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUdBLGtCQUFrQixDQUFDLENBQUM7O0lBRTlDO0lBQ0EsTUFBTUMsaUJBQWlCLEdBQUdELGtCQUFrQixDQUFDRSxpQkFBaUIsQ0FBRUgsSUFBSSxDQUFDSSxNQUFPLENBQUM7O0lBRTdFO0lBQ0EsTUFBTUMsaUJBQWlCLEdBQUcsSUFBSVQsY0FBYyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVNLGlCQUFpQixHQUFHLENBQUUsQ0FBQyxDQUFDSSxZQUFZLENBQUUsQ0FBQyxFQUFFLFFBQVMsQ0FBQyxDQUFDQSxZQUFZLENBQUUsQ0FBQyxFQUFFLHlCQUEwQixDQUFDO0lBQzdKLElBQUksQ0FBQ0MsYUFBYSxHQUFHLElBQUliLE1BQU0sQ0FBRVEsaUJBQWlCLEdBQUcsQ0FBQyxFQUFFO01BQUVNLElBQUksRUFBRUg7SUFBa0IsQ0FBRSxDQUFDLENBQUMsQ0FBQztJQUN2Rjs7SUFFQTtJQUNBLE1BQU1JLFFBQVEsR0FBRyxJQUFJaEIsZ0JBQWdCLENBQUVTLGlCQUFpQixHQUFHLENBQUMsRUFBRTtNQUFFUSxTQUFTLEVBQUUsSUFBSSxDQUFDVixJQUFJLENBQUNXO0lBQW9CLENBQUUsQ0FBQztJQUM1RyxJQUFJLENBQUNDLFFBQVEsQ0FBRUgsUUFBUyxDQUFDOztJQUV6QjtJQUNBLElBQUksQ0FBQ1QsSUFBSSxDQUFDYSxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFFLE1BQU07TUFDckMsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSSxDQUFDZCxrQkFBa0IsQ0FBQ2UsbUJBQW1CLENBQUUsSUFBSSxDQUFDaEIsSUFBSSxDQUFDYSxnQkFBZ0IsQ0FBQ0ksR0FBRyxDQUFDLENBQUUsQ0FBQztJQUNwRyxDQUFFLENBQUM7RUFDTDs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLGNBQWNBLENBQUVDLFdBQVcsRUFBRztJQUM1QixJQUFLQSxXQUFXLElBQUksQ0FBQyxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJLENBQUNiLGFBQWMsQ0FBQyxFQUFHO01BQ3pEO01BQ0EsSUFBSSxDQUFDSyxRQUFRLENBQUUsSUFBSSxDQUFDTCxhQUFjLENBQUM7TUFDbkMsSUFBSSxDQUFDQSxhQUFhLENBQUNjLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDOztJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsSUFBSSxDQUFDZCxhQUFhLENBQUNlLE9BQU8sR0FBR0gsV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDO0VBQ3JEO0FBQ0Y7QUFFQXRCLGdCQUFnQixDQUFDMEIsUUFBUSxDQUFFLFVBQVUsRUFBRXpCLFFBQVMsQ0FBQztBQUVqRCxlQUFlQSxRQUFRIn0=