// Copyright 2021-2022, University of Colorado Boulder

/**
 * Control panel for the "Molecules and Light" sim.  Allows the user to select which molecule is being simulated.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { FocusHighlightPath, Rectangle, RichText } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import Panel from '../../../../sun/js/Panel.js';
import GreenhouseEffectQueryParameters from '../../common/GreenhouseEffectQueryParameters.js';
import greenhouseEffect from '../../greenhouseEffect.js';
import GreenhouseEffectStrings from '../../GreenhouseEffectStrings.js';
import CH4 from '../model/molecules/CH4.js';
import CO from '../model/molecules/CO.js';
import CO2 from '../model/molecules/CO2.js';
import H2O from '../model/molecules/H2O.js';
import N2 from '../model/molecules/N2.js';
import NO2 from '../model/molecules/NO2.js';
import O2 from '../model/molecules/O2.js';
import O3 from '../model/molecules/O3.js';
import PhotonTarget from '../model/PhotonTarget.js';
import MolecularFormulaStrings from './MolecularFormulaStrings.js';
import MoleculeNode from './MoleculeNode.js';
import MoleculeUtils from './MoleculeUtils.js';
const molecularNamePatternStringProperty = GreenhouseEffectStrings.molecularNamePatternStringProperty;
const moleculesStringProperty = GreenhouseEffectStrings.a11y.moleculesStringProperty;
const moleculesRadioButtonHelpTextStringProperty = GreenhouseEffectStrings.a11y.moleculesRadioButtonHelpTextStringProperty;
const moleculeButtonLabelPatternStringProperty = GreenhouseEffectStrings.a11y.moleculeButtonLabelPatternStringProperty;

// constants
// Model view transform used for creating images of the various molecules. This is basically a null transform except
// that it scales down the size of the molecules and flips the Y axis so that molecules on the panel are oriented the
// same as in the play area.
const MODEL_VIEW_TRANSFORM = ModelViewTransform2.createSinglePointScaleInvertedYMapping(new Vector2(0, 0), new Vector2(0, 0), 1);

// Scaling factor for the molecule images, determined empirically.
const MOLECULE_SCALING_FACTOR = 0.0975;

// the focus highlights are a little larger so they look good in this rounded panel
const HIGHLIGHT_DILATION = 1.5;
class MoleculeSelectionPanel extends Panel {
  /**
   * @param { PhotonAbsorptionModel } model - The model controlled by this panel.
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    let scaleFactor = 1; // Scale factor of the text in this control panel.  Value gets updated as panels are created.

    //  Array which holds the formatted text of the control panel.  This will get populated as individual panels are
    //  created.  Storing the text allows us to call on it later for scaling purposes once the scale factor has been
    // calculated.
    const textList = [];

    // Function which creates individual panels of the control panel.  Each panel consists of a molecule name, chemical
    // formula, and a visual node representing the molecule.
    // NOTE! As a side-effect, this computes scaleFactor each time it's called.
    const createRadioButtonContent = (moleculeName, moleculeFormula, moleculeNode) => {
      // Create a rectangle which holds the molecular name and representing node.  Rectangle enables the proper layout
      // which is the molecular name aligned to the left of the panel and the molecule node aligned to the right.
      const backgroundRectangle = new Rectangle(0, 0, 215, 0);

      // Create text label for the molecule name.  Use StringUtils to order chemical names and formulas as desired.
      const moleculeNameString = StringUtils.format(molecularNamePatternStringProperty.value, moleculeName, `<span dir="ltr">${moleculeFormula}</span>`);
      const molecularName = new RichText(moleculeNameString, {
        fill: 'white',
        font: new PhetFont(13)
      });
      textList.push(molecularName);
      molecularName.centerY = backgroundRectangle.centerY;
      molecularName.left = backgroundRectangle.left + 10;

      // Scale the molecule node to an appropriate size for the panel display and set its position in the panel.
      moleculeNode.scale(MOLECULE_SCALING_FACTOR);
      moleculeNode.right = backgroundRectangle.right - 10;
      moleculeNode.centerY = backgroundRectangle.centerY;

      // Determine the scale factor for the text on this panel, primarily for translation.
      const nameIconDistance = 35; // Minimum distance between the molecule name and node, determined empirically.
      scaleFactor = Math.min(scaleFactor, (moleculeNode.left - nameIconDistance) / molecularName.width);

      // Add the molecular name and molecule node to the selector panel.
      backgroundRectangle.addChild(molecularName);
      backgroundRectangle.addChild(moleculeNode);
      return backgroundRectangle;
    };
    const createElement = (photonTarget, formulaString, molecule, tandemName, moleculeNodeOptions) => {
      return {
        createNode: () => createRadioButtonContent(PhotonTarget.getMoleculeName(photonTarget), formulaString, new MoleculeNode(molecule, MODEL_VIEW_TRANSFORM, moleculeNodeOptions)),
        value: photonTarget,
        tandemName: tandemName,
        labelContent: createPDOMLabel(molecule)
      };
    };
    const moleculeOptions = {
      isForIcon: true
    };
    const carbonMonoxideElement = createElement(PhotonTarget.SINGLE_CO_MOLECULE, MolecularFormulaStrings.CO_FORMULA_STRING, new CO(moleculeOptions), 'singleCOMoleculeRadioButton');
    const nitrogenElement = createElement(PhotonTarget.SINGLE_N2_MOLECULE, MolecularFormulaStrings.N2_FORMULA_STRING, new N2(moleculeOptions), 'singleN2MoleculeRadioButton');
    const oxygenElement = createElement(PhotonTarget.SINGLE_O2_MOLECULE, MolecularFormulaStrings.O2_FORMULA_STRING, new O2(moleculeOptions), 'singleO2MoleculeRadioButton');
    const carbonDioxideElement = createElement(PhotonTarget.SINGLE_CO2_MOLECULE, MolecularFormulaStrings.CO2_FORMULA_STRING, new CO2(moleculeOptions), 'singleCO2MoleculeRadioButton');
    const methaneElement = createElement(PhotonTarget.SINGLE_CH4_MOLECULE, MolecularFormulaStrings.CH4_FORMULA_STRING, new CH4(moleculeOptions), 'singleCH4MoleculeRadioButton', {
      scale: 0.88 // scale applied since CH4 is taller than others, empirically determined
    });

    const waterElement = createElement(PhotonTarget.SINGLE_H2O_MOLECULE, MolecularFormulaStrings.H20_FORMULA_STRING, new H2O(moleculeOptions), 'singleH2OMoleculeRadioButton');
    const nitrogenDioxideElement = createElement(PhotonTarget.SINGLE_NO2_MOLECULE, MolecularFormulaStrings.NO2_FORMULA_STRING, new NO2(moleculeOptions), 'singleNO2MoleculeRadioButton');
    const ozoneElement = createElement(PhotonTarget.SINGLE_O3_MOLECULE, MolecularFormulaStrings.O3_FORMULA_STRING, new O3(moleculeOptions), 'singleO3MoleculeRadioButton');

    // Load the radio button content into an array of object literals which holds the node and value for each button.
    let radioButtonContent;
    if (GreenhouseEffectQueryParameters.openSciEd) {
      // the specific molecules requested by Open Science Ed
      radioButtonContent = [nitrogenElement, oxygenElement, carbonDioxideElement, methaneElement, waterElement];
    } else {
      radioButtonContent = [carbonMonoxideElement, nitrogenElement, oxygenElement, carbonDioxideElement, methaneElement, waterElement, nitrogenDioxideElement, ozoneElement];
    }

    // If necessary, scale down molecule names by the minimum scale factor.
    if (scaleFactor < 1) {
      _.each(textList, text => {
        text.scale(scaleFactor);
      });
    }
    const radioButtonGroup = new RectangularRadioButtonGroup(model.photonTargetProperty, radioButtonContent, {
      spacing: 1.75,
      touchAreaXDilation: 0,
      touchAreaYDilation: 0,
      radioButtonOptions: {
        baseColor: 'black',
        xMargin: 0,
        yMargin: 1.85,
        buttonAppearanceStrategyOptions: {
          selectedStroke: 'white',
          deselectedStroke: 'black',
          deselectedLineWidth: 0
        },
        cornerRadius: 7
      },
      tandem: tandem.createTandem('radioButtonGroup'),
      // pdom
      a11yHighlightXDilation: HIGHLIGHT_DILATION,
      a11yHighlightYDilation: HIGHLIGHT_DILATION
    });

    // custom group focus highlight so there is enough spacing between button highlight and group highlight
    const groupCoefficient = FocusHighlightPath.getGroupDilationCoefficient(radioButtonGroup) + HIGHLIGHT_DILATION;
    radioButtonGroup.groupFocusHighlight = new FocusHighlightPath(Shape.bounds(radioButtonGroup.bounds.dilated(groupCoefficient)), {
      outerLineWidth: FocusHighlightPath.GROUP_OUTER_LINE_WIDTH,
      innerLineWidth: FocusHighlightPath.GROUP_INNER_LINE_WIDTH,
      innerStroke: FocusHighlightPath.FOCUS_COLOR
    });
    super(radioButtonGroup, {
      fill: 'black',
      tandem: tandem,
      tagName: 'div',
      labelTagName: 'h3',
      labelContent: moleculesStringProperty.value,
      descriptionContent: moleculesRadioButtonHelpTextStringProperty.value
    });
  }
}

/**
 * Creates the PDOM label for one of the buttons. Contains the molecular name, molecular formula, and
 * molecular geometry. Will return something like "Carbon Monoxide, CO, Linear"
 * @param {Molecule} molecule
 * @returns {string}
 */
const createPDOMLabel = molecule => {
  return StringUtils.fillIn(moleculeButtonLabelPatternStringProperty.value, {
    molecularName: MoleculeUtils.getMolecularName(molecule),
    molecularFormula: MoleculeUtils.getMolecularFormula(molecule),
    geometryTitle: MoleculeUtils.getGeometryTitleString(molecule)
  });
};
greenhouseEffect.register('MoleculeSelectionPanel', MoleculeSelectionPanel);
export default MoleculeSelectionPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2hhcGUiLCJTdHJpbmdVdGlscyIsIk1vZGVsVmlld1RyYW5zZm9ybTIiLCJQaGV0Rm9udCIsIkZvY3VzSGlnaGxpZ2h0UGF0aCIsIlJlY3RhbmdsZSIsIlJpY2hUZXh0IiwiUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIiwiUGFuZWwiLCJHcmVlbmhvdXNlRWZmZWN0UXVlcnlQYXJhbWV0ZXJzIiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkdyZWVuaG91c2VFZmZlY3RTdHJpbmdzIiwiQ0g0IiwiQ08iLCJDTzIiLCJIMk8iLCJOMiIsIk5PMiIsIk8yIiwiTzMiLCJQaG90b25UYXJnZXQiLCJNb2xlY3VsYXJGb3JtdWxhU3RyaW5ncyIsIk1vbGVjdWxlTm9kZSIsIk1vbGVjdWxlVXRpbHMiLCJtb2xlY3VsYXJOYW1lUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwibW9sZWN1bGVzU3RyaW5nUHJvcGVydHkiLCJhMTF5IiwibW9sZWN1bGVzUmFkaW9CdXR0b25IZWxwVGV4dFN0cmluZ1Byb3BlcnR5IiwibW9sZWN1bGVCdXR0b25MYWJlbFBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsIk1PREVMX1ZJRVdfVFJBTlNGT1JNIiwiY3JlYXRlU2luZ2xlUG9pbnRTY2FsZUludmVydGVkWU1hcHBpbmciLCJNT0xFQ1VMRV9TQ0FMSU5HX0ZBQ1RPUiIsIkhJR0hMSUdIVF9ESUxBVElPTiIsIk1vbGVjdWxlU2VsZWN0aW9uUGFuZWwiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidGFuZGVtIiwic2NhbGVGYWN0b3IiLCJ0ZXh0TGlzdCIsImNyZWF0ZVJhZGlvQnV0dG9uQ29udGVudCIsIm1vbGVjdWxlTmFtZSIsIm1vbGVjdWxlRm9ybXVsYSIsIm1vbGVjdWxlTm9kZSIsImJhY2tncm91bmRSZWN0YW5nbGUiLCJtb2xlY3VsZU5hbWVTdHJpbmciLCJmb3JtYXQiLCJ2YWx1ZSIsIm1vbGVjdWxhck5hbWUiLCJmaWxsIiwiZm9udCIsInB1c2giLCJjZW50ZXJZIiwibGVmdCIsInNjYWxlIiwicmlnaHQiLCJuYW1lSWNvbkRpc3RhbmNlIiwiTWF0aCIsIm1pbiIsIndpZHRoIiwiYWRkQ2hpbGQiLCJjcmVhdGVFbGVtZW50IiwicGhvdG9uVGFyZ2V0IiwiZm9ybXVsYVN0cmluZyIsIm1vbGVjdWxlIiwidGFuZGVtTmFtZSIsIm1vbGVjdWxlTm9kZU9wdGlvbnMiLCJjcmVhdGVOb2RlIiwiZ2V0TW9sZWN1bGVOYW1lIiwibGFiZWxDb250ZW50IiwiY3JlYXRlUERPTUxhYmVsIiwibW9sZWN1bGVPcHRpb25zIiwiaXNGb3JJY29uIiwiY2FyYm9uTW9ub3hpZGVFbGVtZW50IiwiU0lOR0xFX0NPX01PTEVDVUxFIiwiQ09fRk9STVVMQV9TVFJJTkciLCJuaXRyb2dlbkVsZW1lbnQiLCJTSU5HTEVfTjJfTU9MRUNVTEUiLCJOMl9GT1JNVUxBX1NUUklORyIsIm94eWdlbkVsZW1lbnQiLCJTSU5HTEVfTzJfTU9MRUNVTEUiLCJPMl9GT1JNVUxBX1NUUklORyIsImNhcmJvbkRpb3hpZGVFbGVtZW50IiwiU0lOR0xFX0NPMl9NT0xFQ1VMRSIsIkNPMl9GT1JNVUxBX1NUUklORyIsIm1ldGhhbmVFbGVtZW50IiwiU0lOR0xFX0NINF9NT0xFQ1VMRSIsIkNINF9GT1JNVUxBX1NUUklORyIsIndhdGVyRWxlbWVudCIsIlNJTkdMRV9IMk9fTU9MRUNVTEUiLCJIMjBfRk9STVVMQV9TVFJJTkciLCJuaXRyb2dlbkRpb3hpZGVFbGVtZW50IiwiU0lOR0xFX05PMl9NT0xFQ1VMRSIsIk5PMl9GT1JNVUxBX1NUUklORyIsIm96b25lRWxlbWVudCIsIlNJTkdMRV9PM19NT0xFQ1VMRSIsIk8zX0ZPUk1VTEFfU1RSSU5HIiwicmFkaW9CdXR0b25Db250ZW50Iiwib3BlblNjaUVkIiwiXyIsImVhY2giLCJ0ZXh0IiwicmFkaW9CdXR0b25Hcm91cCIsInBob3RvblRhcmdldFByb3BlcnR5Iiwic3BhY2luZyIsInRvdWNoQXJlYVhEaWxhdGlvbiIsInRvdWNoQXJlYVlEaWxhdGlvbiIsInJhZGlvQnV0dG9uT3B0aW9ucyIsImJhc2VDb2xvciIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9ucyIsInNlbGVjdGVkU3Ryb2tlIiwiZGVzZWxlY3RlZFN0cm9rZSIsImRlc2VsZWN0ZWRMaW5lV2lkdGgiLCJjb3JuZXJSYWRpdXMiLCJjcmVhdGVUYW5kZW0iLCJhMTF5SGlnaGxpZ2h0WERpbGF0aW9uIiwiYTExeUhpZ2hsaWdodFlEaWxhdGlvbiIsImdyb3VwQ29lZmZpY2llbnQiLCJnZXRHcm91cERpbGF0aW9uQ29lZmZpY2llbnQiLCJncm91cEZvY3VzSGlnaGxpZ2h0IiwiYm91bmRzIiwiZGlsYXRlZCIsIm91dGVyTGluZVdpZHRoIiwiR1JPVVBfT1VURVJfTElORV9XSURUSCIsImlubmVyTGluZVdpZHRoIiwiR1JPVVBfSU5ORVJfTElORV9XSURUSCIsImlubmVyU3Ryb2tlIiwiRk9DVVNfQ09MT1IiLCJ0YWdOYW1lIiwibGFiZWxUYWdOYW1lIiwiZGVzY3JpcHRpb25Db250ZW50IiwiZmlsbEluIiwiZ2V0TW9sZWN1bGFyTmFtZSIsIm1vbGVjdWxhckZvcm11bGEiLCJnZXRNb2xlY3VsYXJGb3JtdWxhIiwiZ2VvbWV0cnlUaXRsZSIsImdldEdlb21ldHJ5VGl0bGVTdHJpbmciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1vbGVjdWxlU2VsZWN0aW9uUGFuZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udHJvbCBwYW5lbCBmb3IgdGhlIFwiTW9sZWN1bGVzIGFuZCBMaWdodFwiIHNpbS4gIEFsbG93cyB0aGUgdXNlciB0byBzZWxlY3Qgd2hpY2ggbW9sZWN1bGUgaXMgYmVpbmcgc2ltdWxhdGVkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBGb2N1c0hpZ2hsaWdodFBhdGgsIFJlY3RhbmdsZSwgUmljaFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdFF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vR3JlZW5ob3VzZUVmZmVjdFF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MgZnJvbSAnLi4vLi4vR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ0g0IGZyb20gJy4uL21vZGVsL21vbGVjdWxlcy9DSDQuanMnO1xyXG5pbXBvcnQgQ08gZnJvbSAnLi4vbW9kZWwvbW9sZWN1bGVzL0NPLmpzJztcclxuaW1wb3J0IENPMiBmcm9tICcuLi9tb2RlbC9tb2xlY3VsZXMvQ08yLmpzJztcclxuaW1wb3J0IEgyTyBmcm9tICcuLi9tb2RlbC9tb2xlY3VsZXMvSDJPLmpzJztcclxuaW1wb3J0IE4yIGZyb20gJy4uL21vZGVsL21vbGVjdWxlcy9OMi5qcyc7XHJcbmltcG9ydCBOTzIgZnJvbSAnLi4vbW9kZWwvbW9sZWN1bGVzL05PMi5qcyc7XHJcbmltcG9ydCBPMiBmcm9tICcuLi9tb2RlbC9tb2xlY3VsZXMvTzIuanMnO1xyXG5pbXBvcnQgTzMgZnJvbSAnLi4vbW9kZWwvbW9sZWN1bGVzL08zLmpzJztcclxuaW1wb3J0IFBob3RvblRhcmdldCBmcm9tICcuLi9tb2RlbC9QaG90b25UYXJnZXQuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGFyRm9ybXVsYVN0cmluZ3MgZnJvbSAnLi9Nb2xlY3VsYXJGb3JtdWxhU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZU5vZGUgZnJvbSAnLi9Nb2xlY3VsZU5vZGUuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGVVdGlscyBmcm9tICcuL01vbGVjdWxlVXRpbHMuanMnO1xyXG5cclxuY29uc3QgbW9sZWN1bGFyTmFtZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLm1vbGVjdWxhck5hbWVQYXR0ZXJuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IG1vbGVjdWxlc1N0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5tb2xlY3VsZXNTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgbW9sZWN1bGVzUmFkaW9CdXR0b25IZWxwVGV4dFN0cmluZ1Byb3BlcnR5ID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuYTExeS5tb2xlY3VsZXNSYWRpb0J1dHRvbkhlbHBUZXh0U3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IG1vbGVjdWxlQnV0dG9uTGFiZWxQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5hMTF5Lm1vbGVjdWxlQnV0dG9uTGFiZWxQYXR0ZXJuU3RyaW5nUHJvcGVydHk7XHJcblxyXG4vLyBjb25zdGFudHNcclxuLy8gTW9kZWwgdmlldyB0cmFuc2Zvcm0gdXNlZCBmb3IgY3JlYXRpbmcgaW1hZ2VzIG9mIHRoZSB2YXJpb3VzIG1vbGVjdWxlcy4gVGhpcyBpcyBiYXNpY2FsbHkgYSBudWxsIHRyYW5zZm9ybSBleGNlcHRcclxuLy8gdGhhdCBpdCBzY2FsZXMgZG93biB0aGUgc2l6ZSBvZiB0aGUgbW9sZWN1bGVzIGFuZCBmbGlwcyB0aGUgWSBheGlzIHNvIHRoYXQgbW9sZWN1bGVzIG9uIHRoZSBwYW5lbCBhcmUgb3JpZW50ZWQgdGhlXHJcbi8vIHNhbWUgYXMgaW4gdGhlIHBsYXkgYXJlYS5cclxuY29uc3QgTU9ERUxfVklFV19UUkFOU0ZPUk0gPSBNb2RlbFZpZXdUcmFuc2Zvcm0yLmNyZWF0ZVNpbmdsZVBvaW50U2NhbGVJbnZlcnRlZFlNYXBwaW5nKCBuZXcgVmVjdG9yMiggMCwgMCApLCBuZXcgVmVjdG9yMiggMCwgMCApLCAxICk7XHJcblxyXG4vLyBTY2FsaW5nIGZhY3RvciBmb3IgdGhlIG1vbGVjdWxlIGltYWdlcywgZGV0ZXJtaW5lZCBlbXBpcmljYWxseS5cclxuY29uc3QgTU9MRUNVTEVfU0NBTElOR19GQUNUT1IgPSAwLjA5NzU7XHJcblxyXG4vLyB0aGUgZm9jdXMgaGlnaGxpZ2h0cyBhcmUgYSBsaXR0bGUgbGFyZ2VyIHNvIHRoZXkgbG9vayBnb29kIGluIHRoaXMgcm91bmRlZCBwYW5lbFxyXG5jb25zdCBISUdITElHSFRfRElMQVRJT04gPSAxLjU7XHJcblxyXG5jbGFzcyBNb2xlY3VsZVNlbGVjdGlvblBhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0geyBQaG90b25BYnNvcnB0aW9uTW9kZWwgfSBtb2RlbCAtIFRoZSBtb2RlbCBjb250cm9sbGVkIGJ5IHRoaXMgcGFuZWwuXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgdGFuZGVtICkge1xyXG5cclxuICAgIGxldCBzY2FsZUZhY3RvciA9IDE7IC8vIFNjYWxlIGZhY3RvciBvZiB0aGUgdGV4dCBpbiB0aGlzIGNvbnRyb2wgcGFuZWwuICBWYWx1ZSBnZXRzIHVwZGF0ZWQgYXMgcGFuZWxzIGFyZSBjcmVhdGVkLlxyXG5cclxuICAgIC8vICBBcnJheSB3aGljaCBob2xkcyB0aGUgZm9ybWF0dGVkIHRleHQgb2YgdGhlIGNvbnRyb2wgcGFuZWwuICBUaGlzIHdpbGwgZ2V0IHBvcHVsYXRlZCBhcyBpbmRpdmlkdWFsIHBhbmVscyBhcmVcclxuICAgIC8vICBjcmVhdGVkLiAgU3RvcmluZyB0aGUgdGV4dCBhbGxvd3MgdXMgdG8gY2FsbCBvbiBpdCBsYXRlciBmb3Igc2NhbGluZyBwdXJwb3NlcyBvbmNlIHRoZSBzY2FsZSBmYWN0b3IgaGFzIGJlZW5cclxuICAgIC8vIGNhbGN1bGF0ZWQuXHJcbiAgICBjb25zdCB0ZXh0TGlzdCA9IFtdO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgaW5kaXZpZHVhbCBwYW5lbHMgb2YgdGhlIGNvbnRyb2wgcGFuZWwuICBFYWNoIHBhbmVsIGNvbnNpc3RzIG9mIGEgbW9sZWN1bGUgbmFtZSwgY2hlbWljYWxcclxuICAgIC8vIGZvcm11bGEsIGFuZCBhIHZpc3VhbCBub2RlIHJlcHJlc2VudGluZyB0aGUgbW9sZWN1bGUuXHJcbiAgICAvLyBOT1RFISBBcyBhIHNpZGUtZWZmZWN0LCB0aGlzIGNvbXB1dGVzIHNjYWxlRmFjdG9yIGVhY2ggdGltZSBpdCdzIGNhbGxlZC5cclxuICAgIGNvbnN0IGNyZWF0ZVJhZGlvQnV0dG9uQ29udGVudCA9ICggbW9sZWN1bGVOYW1lLCBtb2xlY3VsZUZvcm11bGEsIG1vbGVjdWxlTm9kZSApID0+IHtcclxuXHJcbiAgICAgIC8vIENyZWF0ZSBhIHJlY3RhbmdsZSB3aGljaCBob2xkcyB0aGUgbW9sZWN1bGFyIG5hbWUgYW5kIHJlcHJlc2VudGluZyBub2RlLiAgUmVjdGFuZ2xlIGVuYWJsZXMgdGhlIHByb3BlciBsYXlvdXRcclxuICAgICAgLy8gd2hpY2ggaXMgdGhlIG1vbGVjdWxhciBuYW1lIGFsaWduZWQgdG8gdGhlIGxlZnQgb2YgdGhlIHBhbmVsIGFuZCB0aGUgbW9sZWN1bGUgbm9kZSBhbGlnbmVkIHRvIHRoZSByaWdodC5cclxuICAgICAgY29uc3QgYmFja2dyb3VuZFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDIxNSwgMCApO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIHRleHQgbGFiZWwgZm9yIHRoZSBtb2xlY3VsZSBuYW1lLiAgVXNlIFN0cmluZ1V0aWxzIHRvIG9yZGVyIGNoZW1pY2FsIG5hbWVzIGFuZCBmb3JtdWxhcyBhcyBkZXNpcmVkLlxyXG4gICAgICBjb25zdCBtb2xlY3VsZU5hbWVTdHJpbmcgPSBTdHJpbmdVdGlscy5mb3JtYXQoXHJcbiAgICAgICAgbW9sZWN1bGFyTmFtZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eS52YWx1ZSxcclxuICAgICAgICBtb2xlY3VsZU5hbWUsXHJcbiAgICAgICAgYDxzcGFuIGRpcj1cImx0clwiPiR7bW9sZWN1bGVGb3JtdWxhfTwvc3Bhbj5gXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IG1vbGVjdWxhck5hbWUgPSBuZXcgUmljaFRleHQoIG1vbGVjdWxlTmFtZVN0cmluZywgeyBmaWxsOiAnd2hpdGUnLCBmb250OiBuZXcgUGhldEZvbnQoIDEzICkgfSApO1xyXG4gICAgICB0ZXh0TGlzdC5wdXNoKCBtb2xlY3VsYXJOYW1lICk7XHJcbiAgICAgIG1vbGVjdWxhck5hbWUuY2VudGVyWSA9IGJhY2tncm91bmRSZWN0YW5nbGUuY2VudGVyWTtcclxuICAgICAgbW9sZWN1bGFyTmFtZS5sZWZ0ID0gYmFja2dyb3VuZFJlY3RhbmdsZS5sZWZ0ICsgMTA7XHJcblxyXG4gICAgICAvLyBTY2FsZSB0aGUgbW9sZWN1bGUgbm9kZSB0byBhbiBhcHByb3ByaWF0ZSBzaXplIGZvciB0aGUgcGFuZWwgZGlzcGxheSBhbmQgc2V0IGl0cyBwb3NpdGlvbiBpbiB0aGUgcGFuZWwuXHJcbiAgICAgIG1vbGVjdWxlTm9kZS5zY2FsZSggTU9MRUNVTEVfU0NBTElOR19GQUNUT1IgKTtcclxuICAgICAgbW9sZWN1bGVOb2RlLnJpZ2h0ID0gYmFja2dyb3VuZFJlY3RhbmdsZS5yaWdodCAtIDEwO1xyXG4gICAgICBtb2xlY3VsZU5vZGUuY2VudGVyWSA9IGJhY2tncm91bmRSZWN0YW5nbGUuY2VudGVyWTtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSB0aGUgc2NhbGUgZmFjdG9yIGZvciB0aGUgdGV4dCBvbiB0aGlzIHBhbmVsLCBwcmltYXJpbHkgZm9yIHRyYW5zbGF0aW9uLlxyXG4gICAgICBjb25zdCBuYW1lSWNvbkRpc3RhbmNlID0gMzU7IC8vIE1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgbW9sZWN1bGUgbmFtZSBhbmQgbm9kZSwgZGV0ZXJtaW5lZCBlbXBpcmljYWxseS5cclxuICAgICAgc2NhbGVGYWN0b3IgPSBNYXRoLm1pbiggc2NhbGVGYWN0b3IsICggbW9sZWN1bGVOb2RlLmxlZnQgLSBuYW1lSWNvbkRpc3RhbmNlICkgLyBtb2xlY3VsYXJOYW1lLndpZHRoICk7XHJcblxyXG4gICAgICAvLyBBZGQgdGhlIG1vbGVjdWxhciBuYW1lIGFuZCBtb2xlY3VsZSBub2RlIHRvIHRoZSBzZWxlY3RvciBwYW5lbC5cclxuICAgICAgYmFja2dyb3VuZFJlY3RhbmdsZS5hZGRDaGlsZCggbW9sZWN1bGFyTmFtZSApO1xyXG4gICAgICBiYWNrZ3JvdW5kUmVjdGFuZ2xlLmFkZENoaWxkKCBtb2xlY3VsZU5vZGUgKTtcclxuXHJcbiAgICAgIHJldHVybiBiYWNrZ3JvdW5kUmVjdGFuZ2xlO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjcmVhdGVFbGVtZW50ID0gKCBwaG90b25UYXJnZXQsIGZvcm11bGFTdHJpbmcsIG1vbGVjdWxlLCB0YW5kZW1OYW1lLCBtb2xlY3VsZU5vZGVPcHRpb25zICkgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IGNyZWF0ZVJhZGlvQnV0dG9uQ29udGVudCggUGhvdG9uVGFyZ2V0LmdldE1vbGVjdWxlTmFtZSggcGhvdG9uVGFyZ2V0ICksXHJcbiAgICAgICAgICBmb3JtdWxhU3RyaW5nLCBuZXcgTW9sZWN1bGVOb2RlKCBtb2xlY3VsZSwgTU9ERUxfVklFV19UUkFOU0ZPUk0sIG1vbGVjdWxlTm9kZU9wdGlvbnMgKSApLFxyXG4gICAgICAgIHZhbHVlOiBwaG90b25UYXJnZXQsXHJcbiAgICAgICAgdGFuZGVtTmFtZTogdGFuZGVtTmFtZSxcclxuICAgICAgICBsYWJlbENvbnRlbnQ6IGNyZWF0ZVBET01MYWJlbCggbW9sZWN1bGUgKVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vbGVjdWxlT3B0aW9ucyA9IHsgaXNGb3JJY29uOiB0cnVlIH07XHJcblxyXG4gICAgY29uc3QgY2FyYm9uTW9ub3hpZGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCggUGhvdG9uVGFyZ2V0LlNJTkdMRV9DT19NT0xFQ1VMRSwgTW9sZWN1bGFyRm9ybXVsYVN0cmluZ3MuQ09fRk9STVVMQV9TVFJJTkcsIG5ldyBDTyggbW9sZWN1bGVPcHRpb25zICksICdzaW5nbGVDT01vbGVjdWxlUmFkaW9CdXR0b24nICk7XHJcbiAgICBjb25zdCBuaXRyb2dlbkVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCBQaG90b25UYXJnZXQuU0lOR0xFX04yX01PTEVDVUxFLCBNb2xlY3VsYXJGb3JtdWxhU3RyaW5ncy5OMl9GT1JNVUxBX1NUUklORywgbmV3IE4yKCBtb2xlY3VsZU9wdGlvbnMgKSwgJ3NpbmdsZU4yTW9sZWN1bGVSYWRpb0J1dHRvbicgKTtcclxuICAgIGNvbnN0IG94eWdlbkVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCBQaG90b25UYXJnZXQuU0lOR0xFX08yX01PTEVDVUxFLCBNb2xlY3VsYXJGb3JtdWxhU3RyaW5ncy5PMl9GT1JNVUxBX1NUUklORywgbmV3IE8yKCBtb2xlY3VsZU9wdGlvbnMgKSwgJ3NpbmdsZU8yTW9sZWN1bGVSYWRpb0J1dHRvbicgKTtcclxuICAgIGNvbnN0IGNhcmJvbkRpb3hpZGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudCggUGhvdG9uVGFyZ2V0LlNJTkdMRV9DTzJfTU9MRUNVTEUsIE1vbGVjdWxhckZvcm11bGFTdHJpbmdzLkNPMl9GT1JNVUxBX1NUUklORywgbmV3IENPMiggbW9sZWN1bGVPcHRpb25zICksICdzaW5nbGVDTzJNb2xlY3VsZVJhZGlvQnV0dG9uJyApO1xyXG4gICAgY29uc3QgbWV0aGFuZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCBQaG90b25UYXJnZXQuU0lOR0xFX0NINF9NT0xFQ1VMRSwgTW9sZWN1bGFyRm9ybXVsYVN0cmluZ3MuQ0g0X0ZPUk1VTEFfU1RSSU5HLCBuZXcgQ0g0KCBtb2xlY3VsZU9wdGlvbnMgKSwgJ3NpbmdsZUNINE1vbGVjdWxlUmFkaW9CdXR0b24nLCB7XHJcbiAgICAgIHNjYWxlOiAwLjg4IC8vIHNjYWxlIGFwcGxpZWQgc2luY2UgQ0g0IGlzIHRhbGxlciB0aGFuIG90aGVycywgZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxyXG4gICAgfSApO1xyXG4gICAgY29uc3Qgd2F0ZXJFbGVtZW50ID0gY3JlYXRlRWxlbWVudCggUGhvdG9uVGFyZ2V0LlNJTkdMRV9IMk9fTU9MRUNVTEUsIE1vbGVjdWxhckZvcm11bGFTdHJpbmdzLkgyMF9GT1JNVUxBX1NUUklORywgbmV3IEgyTyggbW9sZWN1bGVPcHRpb25zICksICdzaW5nbGVIMk9Nb2xlY3VsZVJhZGlvQnV0dG9uJyApO1xyXG4gICAgY29uc3Qgbml0cm9nZW5EaW94aWRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoIFBob3RvblRhcmdldC5TSU5HTEVfTk8yX01PTEVDVUxFLCBNb2xlY3VsYXJGb3JtdWxhU3RyaW5ncy5OTzJfRk9STVVMQV9TVFJJTkcsIG5ldyBOTzIoIG1vbGVjdWxlT3B0aW9ucyApLCAnc2luZ2xlTk8yTW9sZWN1bGVSYWRpb0J1dHRvbicgKTtcclxuICAgIGNvbnN0IG96b25lRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoIFBob3RvblRhcmdldC5TSU5HTEVfTzNfTU9MRUNVTEUsIE1vbGVjdWxhckZvcm11bGFTdHJpbmdzLk8zX0ZPUk1VTEFfU1RSSU5HLCBuZXcgTzMoIG1vbGVjdWxlT3B0aW9ucyApLCAnc2luZ2xlTzNNb2xlY3VsZVJhZGlvQnV0dG9uJyApO1xyXG5cclxuICAgIC8vIExvYWQgdGhlIHJhZGlvIGJ1dHRvbiBjb250ZW50IGludG8gYW4gYXJyYXkgb2Ygb2JqZWN0IGxpdGVyYWxzIHdoaWNoIGhvbGRzIHRoZSBub2RlIGFuZCB2YWx1ZSBmb3IgZWFjaCBidXR0b24uXHJcbiAgICBsZXQgcmFkaW9CdXR0b25Db250ZW50O1xyXG4gICAgaWYgKCBHcmVlbmhvdXNlRWZmZWN0UXVlcnlQYXJhbWV0ZXJzLm9wZW5TY2lFZCApIHtcclxuXHJcbiAgICAgIC8vIHRoZSBzcGVjaWZpYyBtb2xlY3VsZXMgcmVxdWVzdGVkIGJ5IE9wZW4gU2NpZW5jZSBFZFxyXG4gICAgICByYWRpb0J1dHRvbkNvbnRlbnQgPSBbIG5pdHJvZ2VuRWxlbWVudCwgb3h5Z2VuRWxlbWVudCwgY2FyYm9uRGlveGlkZUVsZW1lbnQsIG1ldGhhbmVFbGVtZW50LCB3YXRlckVsZW1lbnQgXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByYWRpb0J1dHRvbkNvbnRlbnQgPSBbXHJcbiAgICAgICAgY2FyYm9uTW9ub3hpZGVFbGVtZW50LCBuaXRyb2dlbkVsZW1lbnQsIG94eWdlbkVsZW1lbnQsIGNhcmJvbkRpb3hpZGVFbGVtZW50LFxyXG4gICAgICAgIG1ldGhhbmVFbGVtZW50LCB3YXRlckVsZW1lbnQsIG5pdHJvZ2VuRGlveGlkZUVsZW1lbnQsIG96b25lRWxlbWVudFxyXG4gICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIG5lY2Vzc2FyeSwgc2NhbGUgZG93biBtb2xlY3VsZSBuYW1lcyBieSB0aGUgbWluaW11bSBzY2FsZSBmYWN0b3IuXHJcbiAgICBpZiAoIHNjYWxlRmFjdG9yIDwgMSApIHtcclxuICAgICAgXy5lYWNoKCB0ZXh0TGlzdCwgdGV4dCA9PiB7IHRleHQuc2NhbGUoIHNjYWxlRmFjdG9yICk7IH0gKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByYWRpb0J1dHRvbkdyb3VwID0gbmV3IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCggbW9kZWwucGhvdG9uVGFyZ2V0UHJvcGVydHksIHJhZGlvQnV0dG9uQ29udGVudCwge1xyXG4gICAgICBzcGFjaW5nOiAxLjc1LFxyXG4gICAgICB0b3VjaEFyZWFYRGlsYXRpb246IDAsXHJcbiAgICAgIHRvdWNoQXJlYVlEaWxhdGlvbjogMCxcclxuICAgICAgcmFkaW9CdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgYmFzZUNvbG9yOiAnYmxhY2snLFxyXG4gICAgICAgIHhNYXJnaW46IDAsXHJcbiAgICAgICAgeU1hcmdpbjogMS44NSxcclxuICAgICAgICBidXR0b25BcHBlYXJhbmNlU3RyYXRlZ3lPcHRpb25zOiB7XHJcbiAgICAgICAgICBzZWxlY3RlZFN0cm9rZTogJ3doaXRlJyxcclxuICAgICAgICAgIGRlc2VsZWN0ZWRTdHJva2U6ICdibGFjaycsXHJcbiAgICAgICAgICBkZXNlbGVjdGVkTGluZVdpZHRoOiAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb3JuZXJSYWRpdXM6IDdcclxuICAgICAgfSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncmFkaW9CdXR0b25Hcm91cCcgKSxcclxuXHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgYTExeUhpZ2hsaWdodFhEaWxhdGlvbjogSElHSExJR0hUX0RJTEFUSU9OLFxyXG4gICAgICBhMTF5SGlnaGxpZ2h0WURpbGF0aW9uOiBISUdITElHSFRfRElMQVRJT05cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBjdXN0b20gZ3JvdXAgZm9jdXMgaGlnaGxpZ2h0IHNvIHRoZXJlIGlzIGVub3VnaCBzcGFjaW5nIGJldHdlZW4gYnV0dG9uIGhpZ2hsaWdodCBhbmQgZ3JvdXAgaGlnaGxpZ2h0XHJcbiAgICBjb25zdCBncm91cENvZWZmaWNpZW50ID0gRm9jdXNIaWdobGlnaHRQYXRoLmdldEdyb3VwRGlsYXRpb25Db2VmZmljaWVudCggcmFkaW9CdXR0b25Hcm91cCApICsgSElHSExJR0hUX0RJTEFUSU9OO1xyXG4gICAgcmFkaW9CdXR0b25Hcm91cC5ncm91cEZvY3VzSGlnaGxpZ2h0ID0gbmV3IEZvY3VzSGlnaGxpZ2h0UGF0aCggU2hhcGUuYm91bmRzKCByYWRpb0J1dHRvbkdyb3VwLmJvdW5kcy5kaWxhdGVkKCBncm91cENvZWZmaWNpZW50ICkgKSwge1xyXG4gICAgICBvdXRlckxpbmVXaWR0aDogRm9jdXNIaWdobGlnaHRQYXRoLkdST1VQX09VVEVSX0xJTkVfV0lEVEgsXHJcbiAgICAgIGlubmVyTGluZVdpZHRoOiBGb2N1c0hpZ2hsaWdodFBhdGguR1JPVVBfSU5ORVJfTElORV9XSURUSCxcclxuICAgICAgaW5uZXJTdHJva2U6IEZvY3VzSGlnaGxpZ2h0UGF0aC5GT0NVU19DT0xPUlxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCByYWRpb0J1dHRvbkdyb3VwLCB7XHJcbiAgICAgIGZpbGw6ICdibGFjaycsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICB0YWdOYW1lOiAnZGl2JyxcclxuICAgICAgbGFiZWxUYWdOYW1lOiAnaDMnLFxyXG4gICAgICBsYWJlbENvbnRlbnQ6IG1vbGVjdWxlc1N0cmluZ1Byb3BlcnR5LnZhbHVlLFxyXG4gICAgICBkZXNjcmlwdGlvbkNvbnRlbnQ6IG1vbGVjdWxlc1JhZGlvQnV0dG9uSGVscFRleHRTdHJpbmdQcm9wZXJ0eS52YWx1ZVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgdGhlIFBET00gbGFiZWwgZm9yIG9uZSBvZiB0aGUgYnV0dG9ucy4gQ29udGFpbnMgdGhlIG1vbGVjdWxhciBuYW1lLCBtb2xlY3VsYXIgZm9ybXVsYSwgYW5kXHJcbiAqIG1vbGVjdWxhciBnZW9tZXRyeS4gV2lsbCByZXR1cm4gc29tZXRoaW5nIGxpa2UgXCJDYXJib24gTW9ub3hpZGUsIENPLCBMaW5lYXJcIlxyXG4gKiBAcGFyYW0ge01vbGVjdWxlfSBtb2xlY3VsZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gKi9cclxuY29uc3QgY3JlYXRlUERPTUxhYmVsID0gbW9sZWN1bGUgPT4ge1xyXG4gIHJldHVybiBTdHJpbmdVdGlscy5maWxsSW4oIG1vbGVjdWxlQnV0dG9uTGFiZWxQYXR0ZXJuU3RyaW5nUHJvcGVydHkudmFsdWUsIHtcclxuICAgIG1vbGVjdWxhck5hbWU6IE1vbGVjdWxlVXRpbHMuZ2V0TW9sZWN1bGFyTmFtZSggbW9sZWN1bGUgKSxcclxuICAgIG1vbGVjdWxhckZvcm11bGE6IE1vbGVjdWxlVXRpbHMuZ2V0TW9sZWN1bGFyRm9ybXVsYSggbW9sZWN1bGUgKSxcclxuICAgIGdlb21ldHJ5VGl0bGU6IE1vbGVjdWxlVXRpbHMuZ2V0R2VvbWV0cnlUaXRsZVN0cmluZyggbW9sZWN1bGUgKVxyXG4gIH0gKTtcclxufTtcclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdNb2xlY3VsZVNlbGVjdGlvblBhbmVsJywgTW9sZWN1bGVTZWxlY3Rpb25QYW5lbCApO1xyXG5leHBvcnQgZGVmYXVsdCBNb2xlY3VsZVNlbGVjdGlvblBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxXQUFXLE1BQU0sK0NBQStDO0FB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