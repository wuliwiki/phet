// Copyright 2021-2022, University of Colorado Boulder

/**
 * @author John Blanco
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import SliderControlsAndBasicActionsKeyboardHelpContent from '../../../scenery-phet/js/keyboard/help/SliderControlsAndBasicActionsKeyboardHelpContent.js';
import GreenhouseEffectIconFactory from '../common/view/GreenhouseEffectIconFactory.js';
import greenhouseEffect from '../greenhouseEffect.js';
import GreenhouseEffectStrings from '../GreenhouseEffectStrings.js';
import MicroModel from './model/MicroModel.js';
import MicroScreenView from './view/MicroScreenView.js';
class MicroScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const options = {
      backgroundColorProperty: new Property('#C5D6E8'),
      homeScreenIcon: GreenhouseEffectIconFactory.createMicroScreenHomeIcon(),
      tandem: tandem,
      name: GreenhouseEffectStrings.screen.microStringProperty,
      // TODO: This should use the same content as molecules-and-light,
      // MoleculesAndLightKeyboardHelpContent should be moved to this repo.
      createKeyboardHelpNode: () => new SliderControlsAndBasicActionsKeyboardHelpContent()
    };
    super(() => new MicroModel(tandem.createTandem('model')), model => new MicroScreenView(model, tandem.createTandem('view')), options);
  }
}
greenhouseEffect.register('MicroScreen', MicroScreen);
export default MicroScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNsaWRlckNvbnRyb2xzQW5kQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwQ29udGVudCIsIkdyZWVuaG91c2VFZmZlY3RJY29uRmFjdG9yeSIsImdyZWVuaG91c2VFZmZlY3QiLCJHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncyIsIk1pY3JvTW9kZWwiLCJNaWNyb1NjcmVlblZpZXciLCJNaWNyb1NjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwib3B0aW9ucyIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJjcmVhdGVNaWNyb1NjcmVlbkhvbWVJY29uIiwibmFtZSIsInNjcmVlbiIsIm1pY3JvU3RyaW5nUHJvcGVydHkiLCJjcmVhdGVLZXlib2FyZEhlbHBOb2RlIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1pY3JvU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNsaWRlckNvbnRyb2xzQW5kQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwQ29udGVudCBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMva2V5Ym9hcmQvaGVscC9TbGlkZXJDb250cm9sc0FuZEJhc2ljQWN0aW9uc0tleWJvYXJkSGVscENvbnRlbnQuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdEljb25GYWN0b3J5IGZyb20gJy4uL2NvbW1vbi92aWV3L0dyZWVuaG91c2VFZmZlY3RJY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MgZnJvbSAnLi4vR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgTWljcm9Nb2RlbCBmcm9tICcuL21vZGVsL01pY3JvTW9kZWwuanMnO1xyXG5pbXBvcnQgTWljcm9TY3JlZW5WaWV3IGZyb20gJy4vdmlldy9NaWNyb1NjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgTWljcm9TY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCAnI0M1RDZFOCcgKSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IEdyZWVuaG91c2VFZmZlY3RJY29uRmFjdG9yeS5jcmVhdGVNaWNyb1NjcmVlbkhvbWVJY29uKCksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBuYW1lOiBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5zY3JlZW4ubWljcm9TdHJpbmdQcm9wZXJ0eSxcclxuXHJcbiAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIHVzZSB0aGUgc2FtZSBjb250ZW50IGFzIG1vbGVjdWxlcy1hbmQtbGlnaHQsXHJcbiAgICAgIC8vIE1vbGVjdWxlc0FuZExpZ2h0S2V5Ym9hcmRIZWxwQ29udGVudCBzaG91bGQgYmUgbW92ZWQgdG8gdGhpcyByZXBvLlxyXG4gICAgICBjcmVhdGVLZXlib2FyZEhlbHBOb2RlOiAoKSA9PiBuZXcgU2xpZGVyQ29udHJvbHNBbmRCYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBDb250ZW50KClcclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBNaWNyb01vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IE1pY3JvU2NyZWVuVmlldyggbW9kZWwsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmVlbmhvdXNlRWZmZWN0LnJlZ2lzdGVyKCAnTWljcm9TY3JlZW4nLCBNaWNyb1NjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBNaWNyb1NjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsZ0RBQWdELE1BQU0sNEZBQTRGO0FBQ3pKLE9BQU9DLDJCQUEyQixNQUFNLCtDQUErQztBQUN2RixPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFDckQsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLFVBQVUsTUFBTSx1QkFBdUI7QUFDOUMsT0FBT0MsZUFBZSxNQUFNLDJCQUEyQjtBQUV2RCxNQUFNQyxXQUFXLFNBQVNQLE1BQU0sQ0FBQztFQUUvQjtBQUNGO0FBQ0E7RUFDRVEsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBRXBCLE1BQU1DLE9BQU8sR0FBRztNQUNkQyx1QkFBdUIsRUFBRSxJQUFJWixRQUFRLENBQUUsU0FBVSxDQUFDO01BQ2xEYSxjQUFjLEVBQUVWLDJCQUEyQixDQUFDVyx5QkFBeUIsQ0FBQyxDQUFDO01BQ3ZFSixNQUFNLEVBQUVBLE1BQU07TUFDZEssSUFBSSxFQUFFVix1QkFBdUIsQ0FBQ1csTUFBTSxDQUFDQyxtQkFBbUI7TUFFeEQ7TUFDQTtNQUNBQyxzQkFBc0IsRUFBRUEsQ0FBQSxLQUFNLElBQUloQixnREFBZ0QsQ0FBQztJQUNyRixDQUFDO0lBRUQsS0FBSyxDQUNILE1BQU0sSUFBSUksVUFBVSxDQUFFSSxNQUFNLENBQUNTLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQyxFQUN0REMsS0FBSyxJQUFJLElBQUliLGVBQWUsQ0FBRWEsS0FBSyxFQUFFVixNQUFNLENBQUNTLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUNwRVIsT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCxnQkFBZ0IsQ0FBQ2lCLFFBQVEsQ0FBRSxhQUFhLEVBQUViLFdBQVksQ0FBQztBQUN2RCxlQUFlQSxXQUFXIn0=