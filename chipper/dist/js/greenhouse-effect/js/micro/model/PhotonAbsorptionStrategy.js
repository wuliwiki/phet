// Copyright 2021, University of Colorado Boulder

/**
 * This is common code which will be used to define the photon absorption strategy for molecules in simulations like
 * "Greenhouse Gas" and "Molecules and Light".  This is the base model for the strategies that define how a molecule
 * reacts to a given photon.  It is responsible for the following:
 * - Whether a given photon should be absorbed.
 * - How the molecule reacts to the absorption, i.e. whether it vibrates, rotates, breaks apart, etc.
 * - Maintenance of any counters or timers associated with the reaction to the absorption, such as those related to
 *    re-emission of an absorbed photon.
 *
 * @author Jesse Greenberg
 * @author John Blanco
 */

import Property from '../../../../axon/js/Property.js';
import dotRandom from '../../../../dot/js/dotRandom.js';
import greenhouseEffect from '../../greenhouseEffect.js';

// photon hold time range, chosen so that there are generally no other photons over the molecule when re-emission occurs
const MIN_PHOTON_HOLD_TIME = 1.1; // seconds
const MAX_PHOTON_HOLD_TIME = 1.3; // seconds

class PhotonAbsorptionStrategy {
  /**
   * Constructor for photon absorption strategy.
   *
   * @param {Molecule} molecule - The molecule which will use this strategy.
   */
  constructor(molecule) {
    // Property that contains the probability that a given photon will be absorbed.
    this.photonAbsorptionProbabilityProperty = new Property(0.5); // @private

    this.molecule = molecule; // @protected

    // Variables involved in the holding and re-emitting of photons.
    // @protected
    this.isPhotonAbsorbed = false;
    this.photonHoldCountdownTime = 0;
  }

  /**
   * Reset the strategy.
   * @public
   */
  reset() {
    this.isPhotonAbsorbed = false;
    this.photonHoldCountdownTime = 0;
  }

  /**
   * Decide whether the provided photon should be absorbed.  By design, a given photon should only be requested once,
   * not multiple times.
   * @public
   *
   * @param {Photon} photon
   * @returns {boolean} absorbed
   */
  queryAndAbsorbPhoton(photon) {
    // All circumstances are correct for photon absorption, so now we decide probabilistically whether or not to
    // actually do it.  This essentially simulates the quantum nature of the absorption.
    const absorbed = !this.isPhotonAbsorbed && dotRandom.nextDouble() < this.photonAbsorptionProbabilityProperty.get();
    if (absorbed) {
      this.isPhotonAbsorbed = true;
      this.photonHoldCountdownTime = MIN_PHOTON_HOLD_TIME + dotRandom.nextDouble() * (MAX_PHOTON_HOLD_TIME - MIN_PHOTON_HOLD_TIME);
    }
    return absorbed;
  }

  /**
   * @public
   */
  step() {
    throw new Error('step should be implemented in descendant photon absorption strategies.');
  }
}
greenhouseEffect.register('PhotonAbsorptionStrategy', PhotonAbsorptionStrategy);
export default PhotonAbsorptionStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsImRvdFJhbmRvbSIsImdyZWVuaG91c2VFZmZlY3QiLCJNSU5fUEhPVE9OX0hPTERfVElNRSIsIk1BWF9QSE9UT05fSE9MRF9USU1FIiwiUGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5IiwiY29uc3RydWN0b3IiLCJtb2xlY3VsZSIsInBob3RvbkFic29ycHRpb25Qcm9iYWJpbGl0eVByb3BlcnR5IiwiaXNQaG90b25BYnNvcmJlZCIsInBob3RvbkhvbGRDb3VudGRvd25UaW1lIiwicmVzZXQiLCJxdWVyeUFuZEFic29yYlBob3RvbiIsInBob3RvbiIsImFic29yYmVkIiwibmV4dERvdWJsZSIsImdldCIsInN0ZXAiLCJFcnJvciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGNvbW1vbiBjb2RlIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBkZWZpbmUgdGhlIHBob3RvbiBhYnNvcnB0aW9uIHN0cmF0ZWd5IGZvciBtb2xlY3VsZXMgaW4gc2ltdWxhdGlvbnMgbGlrZVxyXG4gKiBcIkdyZWVuaG91c2UgR2FzXCIgYW5kIFwiTW9sZWN1bGVzIGFuZCBMaWdodFwiLiAgVGhpcyBpcyB0aGUgYmFzZSBtb2RlbCBmb3IgdGhlIHN0cmF0ZWdpZXMgdGhhdCBkZWZpbmUgaG93IGEgbW9sZWN1bGVcclxuICogcmVhY3RzIHRvIGEgZ2l2ZW4gcGhvdG9uLiAgSXQgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBmb2xsb3dpbmc6XHJcbiAqIC0gV2hldGhlciBhIGdpdmVuIHBob3RvbiBzaG91bGQgYmUgYWJzb3JiZWQuXHJcbiAqIC0gSG93IHRoZSBtb2xlY3VsZSByZWFjdHMgdG8gdGhlIGFic29ycHRpb24sIGkuZS4gd2hldGhlciBpdCB2aWJyYXRlcywgcm90YXRlcywgYnJlYWtzIGFwYXJ0LCBldGMuXHJcbiAqIC0gTWFpbnRlbmFuY2Ugb2YgYW55IGNvdW50ZXJzIG9yIHRpbWVycyBhc3NvY2lhdGVkIHdpdGggdGhlIHJlYWN0aW9uIHRvIHRoZSBhYnNvcnB0aW9uLCBzdWNoIGFzIHRob3NlIHJlbGF0ZWQgdG9cclxuICogICAgcmUtZW1pc3Npb24gb2YgYW4gYWJzb3JiZWQgcGhvdG9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgZG90UmFuZG9tIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9kb3RSYW5kb20uanMnO1xyXG5pbXBvcnQgZ3JlZW5ob3VzZUVmZmVjdCBmcm9tICcuLi8uLi9ncmVlbmhvdXNlRWZmZWN0LmpzJztcclxuXHJcbi8vIHBob3RvbiBob2xkIHRpbWUgcmFuZ2UsIGNob3NlbiBzbyB0aGF0IHRoZXJlIGFyZSBnZW5lcmFsbHkgbm8gb3RoZXIgcGhvdG9ucyBvdmVyIHRoZSBtb2xlY3VsZSB3aGVuIHJlLWVtaXNzaW9uIG9jY3Vyc1xyXG5jb25zdCBNSU5fUEhPVE9OX0hPTERfVElNRSA9IDEuMTsgLy8gc2Vjb25kc1xyXG5jb25zdCBNQVhfUEhPVE9OX0hPTERfVElNRSA9IDEuMzsgLy8gc2Vjb25kc1xyXG5cclxuY2xhc3MgUGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IgZm9yIHBob3RvbiBhYnNvcnB0aW9uIHN0cmF0ZWd5LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtNb2xlY3VsZX0gbW9sZWN1bGUgLSBUaGUgbW9sZWN1bGUgd2hpY2ggd2lsbCB1c2UgdGhpcyBzdHJhdGVneS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9sZWN1bGUgKSB7XHJcblxyXG4gICAgLy8gUHJvcGVydHkgdGhhdCBjb250YWlucyB0aGUgcHJvYmFiaWxpdHkgdGhhdCBhIGdpdmVuIHBob3RvbiB3aWxsIGJlIGFic29yYmVkLlxyXG4gICAgdGhpcy5waG90b25BYnNvcnB0aW9uUHJvYmFiaWxpdHlQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggMC41ICk7IC8vIEBwcml2YXRlXHJcblxyXG4gICAgdGhpcy5tb2xlY3VsZSA9IG1vbGVjdWxlOyAvLyBAcHJvdGVjdGVkXHJcblxyXG4gICAgLy8gVmFyaWFibGVzIGludm9sdmVkIGluIHRoZSBob2xkaW5nIGFuZCByZS1lbWl0dGluZyBvZiBwaG90b25zLlxyXG4gICAgLy8gQHByb3RlY3RlZFxyXG4gICAgdGhpcy5pc1Bob3RvbkFic29yYmVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnBob3RvbkhvbGRDb3VudGRvd25UaW1lID0gMDtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGUgc3RyYXRlZ3kuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5pc1Bob3RvbkFic29yYmVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnBob3RvbkhvbGRDb3VudGRvd25UaW1lID0gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlY2lkZSB3aGV0aGVyIHRoZSBwcm92aWRlZCBwaG90b24gc2hvdWxkIGJlIGFic29yYmVkLiAgQnkgZGVzaWduLCBhIGdpdmVuIHBob3RvbiBzaG91bGQgb25seSBiZSByZXF1ZXN0ZWQgb25jZSxcclxuICAgKiBub3QgbXVsdGlwbGUgdGltZXMuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtQaG90b259IHBob3RvblxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBhYnNvcmJlZFxyXG4gICAqL1xyXG4gIHF1ZXJ5QW5kQWJzb3JiUGhvdG9uKCBwaG90b24gKSB7XHJcblxyXG4gICAgLy8gQWxsIGNpcmN1bXN0YW5jZXMgYXJlIGNvcnJlY3QgZm9yIHBob3RvbiBhYnNvcnB0aW9uLCBzbyBub3cgd2UgZGVjaWRlIHByb2JhYmlsaXN0aWNhbGx5IHdoZXRoZXIgb3Igbm90IHRvXHJcbiAgICAvLyBhY3R1YWxseSBkbyBpdC4gIFRoaXMgZXNzZW50aWFsbHkgc2ltdWxhdGVzIHRoZSBxdWFudHVtIG5hdHVyZSBvZiB0aGUgYWJzb3JwdGlvbi5cclxuICAgIGNvbnN0IGFic29yYmVkID0gKCAhdGhpcy5pc1Bob3RvbkFic29yYmVkICkgJiYgKCBkb3RSYW5kb20ubmV4dERvdWJsZSgpIDwgdGhpcy5waG90b25BYnNvcnB0aW9uUHJvYmFiaWxpdHlQcm9wZXJ0eS5nZXQoKSApO1xyXG4gICAgaWYgKCBhYnNvcmJlZCApIHtcclxuICAgICAgdGhpcy5pc1Bob3RvbkFic29yYmVkID0gdHJ1ZTtcclxuICAgICAgdGhpcy5waG90b25Ib2xkQ291bnRkb3duVGltZSA9IE1JTl9QSE9UT05fSE9MRF9USU1FICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdFJhbmRvbS5uZXh0RG91YmxlKCkgKiAoIE1BWF9QSE9UT05fSE9MRF9USU1FIC0gTUlOX1BIT1RPTl9IT0xEX1RJTUUgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhYnNvcmJlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzdGVwKCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCAnc3RlcCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgaW4gZGVzY2VuZGFudCBwaG90b24gYWJzb3JwdGlvbiBzdHJhdGVnaWVzLicgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdQaG90b25BYnNvcnB0aW9uU3RyYXRlZ3knLCBQaG90b25BYnNvcnB0aW9uU3RyYXRlZ3kgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBob3RvbkFic29ycHRpb25TdHJhdGVneTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCOztBQUV4RDtBQUNBLE1BQU1DLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLE1BQU1DLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxDQUFDOztBQUVsQyxNQUFNQyx3QkFBd0IsQ0FBQztFQUU3QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLFFBQVEsRUFBRztJQUV0QjtJQUNBLElBQUksQ0FBQ0MsbUNBQW1DLEdBQUcsSUFBSVIsUUFBUSxDQUFFLEdBQUksQ0FBQyxDQUFDLENBQUM7O0lBRWhFLElBQUksQ0FBQ08sUUFBUSxHQUFHQSxRQUFRLENBQUMsQ0FBQzs7SUFFMUI7SUFDQTtJQUNBLElBQUksQ0FBQ0UsZ0JBQWdCLEdBQUcsS0FBSztJQUM3QixJQUFJLENBQUNDLHVCQUF1QixHQUFHLENBQUM7RUFDbEM7O0VBR0E7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxDQUFDRixnQkFBZ0IsR0FBRyxLQUFLO0lBQzdCLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUcsQ0FBQztFQUNsQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLG9CQUFvQkEsQ0FBRUMsTUFBTSxFQUFHO0lBRTdCO0lBQ0E7SUFDQSxNQUFNQyxRQUFRLEdBQUssQ0FBQyxJQUFJLENBQUNMLGdCQUFnQixJQUFRUixTQUFTLENBQUNjLFVBQVUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDUCxtQ0FBbUMsQ0FBQ1EsR0FBRyxDQUFDLENBQUc7SUFDMUgsSUFBS0YsUUFBUSxFQUFHO01BQ2QsSUFBSSxDQUFDTCxnQkFBZ0IsR0FBRyxJQUFJO01BQzVCLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUdQLG9CQUFvQixHQUNwQkYsU0FBUyxDQUFDYyxVQUFVLENBQUMsQ0FBQyxJQUFLWCxvQkFBb0IsR0FBR0Qsb0JBQW9CLENBQUU7SUFDekc7SUFDQSxPQUFPVyxRQUFRO0VBQ2pCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFRyxJQUFJQSxDQUFBLEVBQUc7SUFDTCxNQUFNLElBQUlDLEtBQUssQ0FBRSx3RUFBeUUsQ0FBQztFQUM3RjtBQUNGO0FBRUFoQixnQkFBZ0IsQ0FBQ2lCLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRWQsd0JBQXlCLENBQUM7QUFFakYsZUFBZUEsd0JBQXdCIn0=