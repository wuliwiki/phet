// Copyright 2021-2022, University of Colorado Boulder

/**
 * Wavelength Constants for photons of the PhotonAbsorptionModel
 *
 * @author Jesse Greenberg (Phet Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import greenhouseEffect from '../../greenhouseEffect.js';
import GreenhouseEffectStrings from '../../GreenhouseEffectStrings.js';
const quadWavelengthSelectorInfraredString = GreenhouseEffectStrings.QuadWavelengthSelector.Infrared;
const quadWavelengthSelectorMicrowaveString = GreenhouseEffectStrings.QuadWavelengthSelector.Microwave;
const quadWavelengthSelectorUltravioletString = GreenhouseEffectStrings.QuadWavelengthSelector.Ultraviolet;
const quadWavelengthSelectorVisibleString = GreenhouseEffectStrings.QuadWavelengthSelector.Visible;
const WavelengthConstants = {
  // all values in meters
  SUNLIGHT_WAVELENGTH: 400E-9,
  // Ported from the original JAVA version, but not used in Molecules And Light
  MICRO_WAVELENGTH: 0.2,
  IR_WAVELENGTH: 850E-9,
  VISIBLE_WAVELENGTH: 580E-9,
  UV_WAVELENGTH: 100E-9,
  DEBUG_WAVELENGTH: 1,
  // Given a wavelength, look up the tandem name for an emitter
  // This is required because the simulation is driven by the wavelength value.  If this code is too unmaintainable,
  // we could rewrite the sim to use Emitter instances, each of which has a wavelength and a tandem name
  // See, for example: PhotonEmitterNode
  getTandemName(wavelength) {
    return wavelength === this.SUNLIGHT_WAVELENGTH ? 'sunlight' : wavelength === this.MICRO_WAVELENGTH ? 'microwave' : wavelength === this.IR_WAVELENGTH ? 'infrared' : wavelength === this.VISIBLE_WAVELENGTH ? 'visible' : wavelength === this.UV_WAVELENGTH ? 'ultraviolet' : assert(false, 'unknown');
  },
  /**
   * Given a wavelength, get the name of the lightSource that it belongs too. This is used by a11y to get the correct
   * name of the wavelength in a readable form.
   * TODO: use this in QuadEmissionFrequencyControlPanel.js to clean up boilerplate.
   * @param {number} wavelength
   * @returns {string}
   */
  getLightSourceName(wavelength) {
    return wavelength === this.MICRO_WAVELENGTH ? quadWavelengthSelectorMicrowaveString : wavelength === this.IR_WAVELENGTH ? quadWavelengthSelectorInfraredString : wavelength === this.VISIBLE_WAVELENGTH ? quadWavelengthSelectorVisibleString : wavelength === this.UV_WAVELENGTH ? quadWavelengthSelectorUltravioletString : assert(false, 'unknown');
  }
};
greenhouseEffect.register('WavelengthConstants', WavelengthConstants);
export default WavelengthConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJncmVlbmhvdXNlRWZmZWN0IiwiR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MiLCJxdWFkV2F2ZWxlbmd0aFNlbGVjdG9ySW5mcmFyZWRTdHJpbmciLCJRdWFkV2F2ZWxlbmd0aFNlbGVjdG9yIiwiSW5mcmFyZWQiLCJxdWFkV2F2ZWxlbmd0aFNlbGVjdG9yTWljcm93YXZlU3RyaW5nIiwiTWljcm93YXZlIiwicXVhZFdhdmVsZW5ndGhTZWxlY3RvclVsdHJhdmlvbGV0U3RyaW5nIiwiVWx0cmF2aW9sZXQiLCJxdWFkV2F2ZWxlbmd0aFNlbGVjdG9yVmlzaWJsZVN0cmluZyIsIlZpc2libGUiLCJXYXZlbGVuZ3RoQ29uc3RhbnRzIiwiU1VOTElHSFRfV0FWRUxFTkdUSCIsIk1JQ1JPX1dBVkVMRU5HVEgiLCJJUl9XQVZFTEVOR1RIIiwiVklTSUJMRV9XQVZFTEVOR1RIIiwiVVZfV0FWRUxFTkdUSCIsIkRFQlVHX1dBVkVMRU5HVEgiLCJnZXRUYW5kZW1OYW1lIiwid2F2ZWxlbmd0aCIsImFzc2VydCIsImdldExpZ2h0U291cmNlTmFtZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F2ZWxlbmd0aENvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXYXZlbGVuZ3RoIENvbnN0YW50cyBmb3IgcGhvdG9ucyBvZiB0aGUgUGhvdG9uQWJzb3JwdGlvbk1vZGVsXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaGV0IEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MgZnJvbSAnLi4vLi4vR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuanMnO1xyXG5cclxuY29uc3QgcXVhZFdhdmVsZW5ndGhTZWxlY3RvckluZnJhcmVkU3RyaW5nID0gR3JlZW5ob3VzZUVmZmVjdFN0cmluZ3MuUXVhZFdhdmVsZW5ndGhTZWxlY3Rvci5JbmZyYXJlZDtcclxuY29uc3QgcXVhZFdhdmVsZW5ndGhTZWxlY3Rvck1pY3Jvd2F2ZVN0cmluZyA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLlF1YWRXYXZlbGVuZ3RoU2VsZWN0b3IuTWljcm93YXZlO1xyXG5jb25zdCBxdWFkV2F2ZWxlbmd0aFNlbGVjdG9yVWx0cmF2aW9sZXRTdHJpbmcgPSBHcmVlbmhvdXNlRWZmZWN0U3RyaW5ncy5RdWFkV2F2ZWxlbmd0aFNlbGVjdG9yLlVsdHJhdmlvbGV0O1xyXG5jb25zdCBxdWFkV2F2ZWxlbmd0aFNlbGVjdG9yVmlzaWJsZVN0cmluZyA9IEdyZWVuaG91c2VFZmZlY3RTdHJpbmdzLlF1YWRXYXZlbGVuZ3RoU2VsZWN0b3IuVmlzaWJsZTtcclxuXHJcbmNvbnN0IFdhdmVsZW5ndGhDb25zdGFudHMgPSB7XHJcblxyXG4gIC8vIGFsbCB2YWx1ZXMgaW4gbWV0ZXJzXHJcbiAgU1VOTElHSFRfV0FWRUxFTkdUSDogNDAwRS05LCAvLyBQb3J0ZWQgZnJvbSB0aGUgb3JpZ2luYWwgSkFWQSB2ZXJzaW9uLCBidXQgbm90IHVzZWQgaW4gTW9sZWN1bGVzIEFuZCBMaWdodFxyXG4gIE1JQ1JPX1dBVkVMRU5HVEg6IDAuMixcclxuICBJUl9XQVZFTEVOR1RIOiA4NTBFLTksXHJcbiAgVklTSUJMRV9XQVZFTEVOR1RIOiA1ODBFLTksXHJcbiAgVVZfV0FWRUxFTkdUSDogMTAwRS05LFxyXG4gIERFQlVHX1dBVkVMRU5HVEg6IDEsXHJcblxyXG4gIC8vIEdpdmVuIGEgd2F2ZWxlbmd0aCwgbG9vayB1cCB0aGUgdGFuZGVtIG5hbWUgZm9yIGFuIGVtaXR0ZXJcclxuICAvLyBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgdGhlIHNpbXVsYXRpb24gaXMgZHJpdmVuIGJ5IHRoZSB3YXZlbGVuZ3RoIHZhbHVlLiAgSWYgdGhpcyBjb2RlIGlzIHRvbyB1bm1haW50YWluYWJsZSxcclxuICAvLyB3ZSBjb3VsZCByZXdyaXRlIHRoZSBzaW0gdG8gdXNlIEVtaXR0ZXIgaW5zdGFuY2VzLCBlYWNoIG9mIHdoaWNoIGhhcyBhIHdhdmVsZW5ndGggYW5kIGEgdGFuZGVtIG5hbWVcclxuICAvLyBTZWUsIGZvciBleGFtcGxlOiBQaG90b25FbWl0dGVyTm9kZVxyXG4gIGdldFRhbmRlbU5hbWUoIHdhdmVsZW5ndGggKSB7XHJcbiAgICByZXR1cm4gd2F2ZWxlbmd0aCA9PT0gdGhpcy5TVU5MSUdIVF9XQVZFTEVOR1RIID8gJ3N1bmxpZ2h0JyA6XHJcbiAgICAgICAgICAgd2F2ZWxlbmd0aCA9PT0gdGhpcy5NSUNST19XQVZFTEVOR1RIID8gJ21pY3Jvd2F2ZScgOlxyXG4gICAgICAgICAgIHdhdmVsZW5ndGggPT09IHRoaXMuSVJfV0FWRUxFTkdUSCA/ICdpbmZyYXJlZCcgOlxyXG4gICAgICAgICAgIHdhdmVsZW5ndGggPT09IHRoaXMuVklTSUJMRV9XQVZFTEVOR1RIID8gJ3Zpc2libGUnIDpcclxuICAgICAgICAgICB3YXZlbGVuZ3RoID09PSB0aGlzLlVWX1dBVkVMRU5HVEggPyAndWx0cmF2aW9sZXQnIDpcclxuICAgICAgICAgICBhc3NlcnQoIGZhbHNlLCAndW5rbm93bicgKTtcclxuICB9LFxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogR2l2ZW4gYSB3YXZlbGVuZ3RoLCBnZXQgdGhlIG5hbWUgb2YgdGhlIGxpZ2h0U291cmNlIHRoYXQgaXQgYmVsb25ncyB0b28uIFRoaXMgaXMgdXNlZCBieSBhMTF5IHRvIGdldCB0aGUgY29ycmVjdFxyXG4gICAqIG5hbWUgb2YgdGhlIHdhdmVsZW5ndGggaW4gYSByZWFkYWJsZSBmb3JtLlxyXG4gICAqIFRPRE86IHVzZSB0aGlzIGluIFF1YWRFbWlzc2lvbkZyZXF1ZW5jeUNvbnRyb2xQYW5lbC5qcyB0byBjbGVhbiB1cCBib2lsZXJwbGF0ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gd2F2ZWxlbmd0aFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICovXHJcbiAgZ2V0TGlnaHRTb3VyY2VOYW1lKCB3YXZlbGVuZ3RoICkge1xyXG4gICAgcmV0dXJuIHdhdmVsZW5ndGggPT09IHRoaXMuTUlDUk9fV0FWRUxFTkdUSCA/IHF1YWRXYXZlbGVuZ3RoU2VsZWN0b3JNaWNyb3dhdmVTdHJpbmcgOlxyXG4gICAgICAgICAgIHdhdmVsZW5ndGggPT09IHRoaXMuSVJfV0FWRUxFTkdUSCA/IHF1YWRXYXZlbGVuZ3RoU2VsZWN0b3JJbmZyYXJlZFN0cmluZyA6XHJcbiAgICAgICAgICAgd2F2ZWxlbmd0aCA9PT0gdGhpcy5WSVNJQkxFX1dBVkVMRU5HVEggPyBxdWFkV2F2ZWxlbmd0aFNlbGVjdG9yVmlzaWJsZVN0cmluZyA6XHJcbiAgICAgICAgICAgd2F2ZWxlbmd0aCA9PT0gdGhpcy5VVl9XQVZFTEVOR1RIID8gcXVhZFdhdmVsZW5ndGhTZWxlY3RvclVsdHJhdmlvbGV0U3RyaW5nIDpcclxuICAgICAgICAgICBhc3NlcnQoIGZhbHNlLCAndW5rbm93bicgKTtcclxuICB9XHJcbn07XHJcblxyXG5ncmVlbmhvdXNlRWZmZWN0LnJlZ2lzdGVyKCAnV2F2ZWxlbmd0aENvbnN0YW50cycsIFdhdmVsZW5ndGhDb25zdGFudHMgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFdhdmVsZW5ndGhDb25zdGFudHM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUV0RSxNQUFNQyxvQ0FBb0MsR0FBR0QsdUJBQXVCLENBQUNFLHNCQUFzQixDQUFDQyxRQUFRO0FBQ3BHLE1BQU1DLHFDQUFxQyxHQUFHSix1QkFBdUIsQ0FBQ0Usc0JBQXNCLENBQUNHLFNBQVM7QUFDdEcsTUFBTUMsdUNBQXVDLEdBQUdOLHVCQUF1QixDQUFDRSxzQkFBc0IsQ0FBQ0ssV0FBVztBQUMxRyxNQUFNQyxtQ0FBbUMsR0FBR1IsdUJBQXVCLENBQUNFLHNCQUFzQixDQUFDTyxPQUFPO0FBRWxHLE1BQU1DLG1CQUFtQixHQUFHO0VBRTFCO0VBQ0FDLG1CQUFtQixFQUFFLE1BQU07RUFBRTtFQUM3QkMsZ0JBQWdCLEVBQUUsR0FBRztFQUNyQkMsYUFBYSxFQUFFLE1BQU07RUFDckJDLGtCQUFrQixFQUFFLE1BQU07RUFDMUJDLGFBQWEsRUFBRSxNQUFNO0VBQ3JCQyxnQkFBZ0IsRUFBRSxDQUFDO0VBRW5CO0VBQ0E7RUFDQTtFQUNBO0VBQ0FDLGFBQWFBLENBQUVDLFVBQVUsRUFBRztJQUMxQixPQUFPQSxVQUFVLEtBQUssSUFBSSxDQUFDUCxtQkFBbUIsR0FBRyxVQUFVLEdBQ3BETyxVQUFVLEtBQUssSUFBSSxDQUFDTixnQkFBZ0IsR0FBRyxXQUFXLEdBQ2xETSxVQUFVLEtBQUssSUFBSSxDQUFDTCxhQUFhLEdBQUcsVUFBVSxHQUM5Q0ssVUFBVSxLQUFLLElBQUksQ0FBQ0osa0JBQWtCLEdBQUcsU0FBUyxHQUNsREksVUFBVSxLQUFLLElBQUksQ0FBQ0gsYUFBYSxHQUFHLGFBQWEsR0FDakRJLE1BQU0sQ0FBRSxLQUFLLEVBQUUsU0FBVSxDQUFDO0VBQ25DLENBQUM7RUFHRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxrQkFBa0JBLENBQUVGLFVBQVUsRUFBRztJQUMvQixPQUFPQSxVQUFVLEtBQUssSUFBSSxDQUFDTixnQkFBZ0IsR0FBR1IscUNBQXFDLEdBQzVFYyxVQUFVLEtBQUssSUFBSSxDQUFDTCxhQUFhLEdBQUdaLG9DQUFvQyxHQUN4RWlCLFVBQVUsS0FBSyxJQUFJLENBQUNKLGtCQUFrQixHQUFHTixtQ0FBbUMsR0FDNUVVLFVBQVUsS0FBSyxJQUFJLENBQUNILGFBQWEsR0FBR1QsdUNBQXVDLEdBQzNFYSxNQUFNLENBQUUsS0FBSyxFQUFFLFNBQVUsQ0FBQztFQUNuQztBQUNGLENBQUM7QUFFRHBCLGdCQUFnQixDQUFDc0IsUUFBUSxDQUFFLHFCQUFxQixFQUFFWCxtQkFBb0IsQ0FBQztBQUV2RSxlQUFlQSxtQkFBbUIifQ==