// Copyright 2021, University of Colorado Boulder

/**
 * MicroPhoton absorption strategy that defines behavior for a molecule holding on to a photon.  The molecule will hold the
 * photon and then after some amount of time re-emit it. This is to be inherited by the general PhotonAbsorptionStrategy
 * class.
 *
 * @author Jesse Greenberg
 **/

import greenhouseEffect from '../../greenhouseEffect.js';
import NullPhotonAbsorptionStrategy from './NullPhotonAbsorptionStrategy.js';
import PhotonAbsorptionStrategy from './PhotonAbsorptionStrategy.js';
class PhotonHoldStrategy extends PhotonAbsorptionStrategy {
  /**
   * Constructor for the photon hold strategy.
   *
   * @param {Molecule} molecule - The molecule which will use this strategy.
   */
  constructor(molecule) {
    // Supertype constructor
    super(molecule);
  }

  /**
   * The time step function for the photon holding strategy. Holds on to the photon until the countdown time is zero
   * and then re-emits the photon.
   * @public
   *
   * @param {number} dt - The incremental time step.
   */
  step(dt) {
    this.photonHoldCountdownTime -= dt;
    if (this.photonHoldCountdownTime <= 0) {
      this.reemitPhoton();
    }
  }

  /**
   * Re-emit the absorbed photon and set the molecules absorption strategy to a Null strategy.
   * @public
   **/
  reemitPhoton() {
    this.molecule.emitPhoton(this.absorbedWavelength);
    this.molecule.activePhotonAbsorptionStrategy = new NullPhotonAbsorptionStrategy(this.molecule);
    this.isPhotonAbsorbed = false;
  }

  /**
   * Determine if a particular photon should be absorbed and set this absorbed wavelength to the wavelength of the
   * photon.
   * @public
   *
   * @param {Photon} photon
   * @returns {boolean} absorbed
   **/
  queryAndAbsorbPhoton(photon) {
    const absorbed = super.queryAndAbsorbPhoton(photon);
    if (absorbed) {
      this.absorbedWavelength = photon.wavelength;
      this.photonAbsorbed();
    }
    return absorbed;
  }

  /**
   * @public
   * @abstract
   */
  photonAbsorbed() {
    console.error('Error: photonAbsorbed function should be implemented by descendant absorption strategies.');
  }
}
greenhouseEffect.register('PhotonHoldStrategy', PhotonHoldStrategy);
export default PhotonHoldStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJncmVlbmhvdXNlRWZmZWN0IiwiTnVsbFBob3RvbkFic29ycHRpb25TdHJhdGVneSIsIlBob3RvbkFic29ycHRpb25TdHJhdGVneSIsIlBob3RvbkhvbGRTdHJhdGVneSIsImNvbnN0cnVjdG9yIiwibW9sZWN1bGUiLCJzdGVwIiwiZHQiLCJwaG90b25Ib2xkQ291bnRkb3duVGltZSIsInJlZW1pdFBob3RvbiIsImVtaXRQaG90b24iLCJhYnNvcmJlZFdhdmVsZW5ndGgiLCJhY3RpdmVQaG90b25BYnNvcnB0aW9uU3RyYXRlZ3kiLCJpc1Bob3RvbkFic29yYmVkIiwicXVlcnlBbmRBYnNvcmJQaG90b24iLCJwaG90b24iLCJhYnNvcmJlZCIsIndhdmVsZW5ndGgiLCJwaG90b25BYnNvcmJlZCIsImNvbnNvbGUiLCJlcnJvciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGhvdG9uSG9sZFN0cmF0ZWd5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNaWNyb1Bob3RvbiBhYnNvcnB0aW9uIHN0cmF0ZWd5IHRoYXQgZGVmaW5lcyBiZWhhdmlvciBmb3IgYSBtb2xlY3VsZSBob2xkaW5nIG9uIHRvIGEgcGhvdG9uLiAgVGhlIG1vbGVjdWxlIHdpbGwgaG9sZCB0aGVcclxuICogcGhvdG9uIGFuZCB0aGVuIGFmdGVyIHNvbWUgYW1vdW50IG9mIHRpbWUgcmUtZW1pdCBpdC4gVGhpcyBpcyB0byBiZSBpbmhlcml0ZWQgYnkgdGhlIGdlbmVyYWwgUGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5XHJcbiAqIGNsYXNzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKiovXHJcblxyXG5cclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBOdWxsUGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5IGZyb20gJy4vTnVsbFBob3RvbkFic29ycHRpb25TdHJhdGVneS5qcyc7XHJcbmltcG9ydCBQaG90b25BYnNvcnB0aW9uU3RyYXRlZ3kgZnJvbSAnLi9QaG90b25BYnNvcnB0aW9uU3RyYXRlZ3kuanMnO1xyXG5cclxuY2xhc3MgUGhvdG9uSG9sZFN0cmF0ZWd5IGV4dGVuZHMgUGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IgZm9yIHRoZSBwaG90b24gaG9sZCBzdHJhdGVneS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7TW9sZWN1bGV9IG1vbGVjdWxlIC0gVGhlIG1vbGVjdWxlIHdoaWNoIHdpbGwgdXNlIHRoaXMgc3RyYXRlZ3kuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vbGVjdWxlICkge1xyXG5cclxuICAgIC8vIFN1cGVydHlwZSBjb25zdHJ1Y3RvclxyXG4gICAgc3VwZXIoIG1vbGVjdWxlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgdGltZSBzdGVwIGZ1bmN0aW9uIGZvciB0aGUgcGhvdG9uIGhvbGRpbmcgc3RyYXRlZ3kuIEhvbGRzIG9uIHRvIHRoZSBwaG90b24gdW50aWwgdGhlIGNvdW50ZG93biB0aW1lIGlzIHplcm9cclxuICAgKiBhbmQgdGhlbiByZS1lbWl0cyB0aGUgcGhvdG9uLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdCAtIFRoZSBpbmNyZW1lbnRhbCB0aW1lIHN0ZXAuXHJcbiAgICovXHJcbiAgc3RlcCggZHQgKSB7XHJcblxyXG4gICAgdGhpcy5waG90b25Ib2xkQ291bnRkb3duVGltZSAtPSBkdDtcclxuICAgIGlmICggdGhpcy5waG90b25Ib2xkQ291bnRkb3duVGltZSA8PSAwICkge1xyXG4gICAgICB0aGlzLnJlZW1pdFBob3RvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmUtZW1pdCB0aGUgYWJzb3JiZWQgcGhvdG9uIGFuZCBzZXQgdGhlIG1vbGVjdWxlcyBhYnNvcnB0aW9uIHN0cmF0ZWd5IHRvIGEgTnVsbCBzdHJhdGVneS5cclxuICAgKiBAcHVibGljXHJcbiAgICoqL1xyXG4gIHJlZW1pdFBob3RvbigpIHtcclxuXHJcbiAgICB0aGlzLm1vbGVjdWxlLmVtaXRQaG90b24oIHRoaXMuYWJzb3JiZWRXYXZlbGVuZ3RoICk7XHJcbiAgICB0aGlzLm1vbGVjdWxlLmFjdGl2ZVBob3RvbkFic29ycHRpb25TdHJhdGVneSA9IG5ldyBOdWxsUGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5KCB0aGlzLm1vbGVjdWxlICk7XHJcbiAgICB0aGlzLmlzUGhvdG9uQWJzb3JiZWQgPSBmYWxzZTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXRlcm1pbmUgaWYgYSBwYXJ0aWN1bGFyIHBob3RvbiBzaG91bGQgYmUgYWJzb3JiZWQgYW5kIHNldCB0aGlzIGFic29yYmVkIHdhdmVsZW5ndGggdG8gdGhlIHdhdmVsZW5ndGggb2YgdGhlXHJcbiAgICogcGhvdG9uLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7UGhvdG9ufSBwaG90b25cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYWJzb3JiZWRcclxuICAgKiovXHJcbiAgcXVlcnlBbmRBYnNvcmJQaG90b24oIHBob3RvbiApIHtcclxuXHJcbiAgICBjb25zdCBhYnNvcmJlZCA9IHN1cGVyLnF1ZXJ5QW5kQWJzb3JiUGhvdG9uKCBwaG90b24gKTtcclxuICAgIGlmICggYWJzb3JiZWQgKSB7XHJcbiAgICAgIHRoaXMuYWJzb3JiZWRXYXZlbGVuZ3RoID0gcGhvdG9uLndhdmVsZW5ndGg7XHJcbiAgICAgIHRoaXMucGhvdG9uQWJzb3JiZWQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhYnNvcmJlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAYWJzdHJhY3RcclxuICAgKi9cclxuICBwaG90b25BYnNvcmJlZCgpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoICdFcnJvcjogcGhvdG9uQWJzb3JiZWQgZnVuY3Rpb24gc2hvdWxkIGJlIGltcGxlbWVudGVkIGJ5IGRlc2NlbmRhbnQgYWJzb3JwdGlvbiBzdHJhdGVnaWVzLicgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdQaG90b25Ib2xkU3RyYXRlZ3knLCBQaG90b25Ib2xkU3RyYXRlZ3kgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBob3RvbkhvbGRTdHJhdGVneTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyw0QkFBNEIsTUFBTSxtQ0FBbUM7QUFDNUUsT0FBT0Msd0JBQXdCLE1BQU0sK0JBQStCO0FBRXBFLE1BQU1DLGtCQUFrQixTQUFTRCx3QkFBd0IsQ0FBQztFQUV4RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLFFBQVEsRUFBRztJQUV0QjtJQUNBLEtBQUssQ0FBRUEsUUFBUyxDQUFDO0VBQ25COztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLElBQUlBLENBQUVDLEVBQUUsRUFBRztJQUVULElBQUksQ0FBQ0MsdUJBQXVCLElBQUlELEVBQUU7SUFDbEMsSUFBSyxJQUFJLENBQUNDLHVCQUF1QixJQUFJLENBQUMsRUFBRztNQUN2QyxJQUFJLENBQUNDLFlBQVksQ0FBQyxDQUFDO0lBQ3JCO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUEsWUFBWUEsQ0FBQSxFQUFHO0lBRWIsSUFBSSxDQUFDSixRQUFRLENBQUNLLFVBQVUsQ0FBRSxJQUFJLENBQUNDLGtCQUFtQixDQUFDO0lBQ25ELElBQUksQ0FBQ04sUUFBUSxDQUFDTyw4QkFBOEIsR0FBRyxJQUFJWCw0QkFBNEIsQ0FBRSxJQUFJLENBQUNJLFFBQVMsQ0FBQztJQUNoRyxJQUFJLENBQUNRLGdCQUFnQixHQUFHLEtBQUs7RUFFL0I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxvQkFBb0JBLENBQUVDLE1BQU0sRUFBRztJQUU3QixNQUFNQyxRQUFRLEdBQUcsS0FBSyxDQUFDRixvQkFBb0IsQ0FBRUMsTUFBTyxDQUFDO0lBQ3JELElBQUtDLFFBQVEsRUFBRztNQUNkLElBQUksQ0FBQ0wsa0JBQWtCLEdBQUdJLE1BQU0sQ0FBQ0UsVUFBVTtNQUMzQyxJQUFJLENBQUNDLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZCO0lBQ0EsT0FBT0YsUUFBUTtFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFRSxjQUFjQSxDQUFBLEVBQUc7SUFDZkMsT0FBTyxDQUFDQyxLQUFLLENBQUUsMkZBQTRGLENBQUM7RUFDOUc7QUFDRjtBQUVBcEIsZ0JBQWdCLENBQUNxQixRQUFRLENBQUUsb0JBQW9CLEVBQUVsQixrQkFBbUIsQ0FBQztBQUVyRSxlQUFlQSxrQkFBa0IifQ==