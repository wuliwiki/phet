// Copyright 2021, University of Colorado Boulder

/**
 * Class that represents O2 ( oxygen gas ) in the model.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import greenhouseEffect from '../../../greenhouseEffect.js';
import Atom from '../atoms/Atom.js';
import AtomicBond from '../atoms/AtomicBond.js';
import Molecule from '../Molecule.js';

// Model data for nitrogen molecule
const INITIAL_OXYGEN_OXYGEN_DISTANCE = 170; // In picometers.

class O2 extends Molecule {
  /**
   * Constructor for an oxygen molecule
   *
   * @param {Object} [options]
   */
  constructor(options) {
    // Supertype constructor
    super(options);

    // Instance data for the nitrogen molecule
    // @private
    this.oxygenAtom1 = Atom.oxygen();
    this.oxygenAtom2 = Atom.oxygen();

    // Configure the base class.
    this.addAtom(this.oxygenAtom1);
    this.addAtom(this.oxygenAtom2);
    this.addAtomicBond(new AtomicBond(this.oxygenAtom1, this.oxygenAtom2, {
      bondCount: 2
    }));

    // Set the initial offsets
    this.initializeAtomOffsets();
  }

  /**
   * Initialize and set the COG offsets for the oxygen atoms which compose this molecule.
   * @private
   */
  initializeAtomOffsets() {
    this.addInitialAtomCogOffset(this.oxygenAtom1, new Vector2(-INITIAL_OXYGEN_OXYGEN_DISTANCE / 2, 0));
    this.addInitialAtomCogOffset(this.oxygenAtom2, new Vector2(INITIAL_OXYGEN_OXYGEN_DISTANCE / 2, 0));
    this.updateAtomPositions();
  }
}
greenhouseEffect.register('O2', O2);
export default O2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkF0b20iLCJBdG9taWNCb25kIiwiTW9sZWN1bGUiLCJJTklUSUFMX09YWUdFTl9PWFlHRU5fRElTVEFOQ0UiLCJPMiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm94eWdlbkF0b20xIiwib3h5Z2VuIiwib3h5Z2VuQXRvbTIiLCJhZGRBdG9tIiwiYWRkQXRvbWljQm9uZCIsImJvbmRDb3VudCIsImluaXRpYWxpemVBdG9tT2Zmc2V0cyIsImFkZEluaXRpYWxBdG9tQ29nT2Zmc2V0IiwidXBkYXRlQXRvbVBvc2l0aW9ucyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTzIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENsYXNzIHRoYXQgcmVwcmVzZW50cyBPMiAoIG94eWdlbiBnYXMgKSBpbiB0aGUgbW9kZWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBncmVlbmhvdXNlRWZmZWN0IGZyb20gJy4uLy4uLy4uL2dyZWVuaG91c2VFZmZlY3QuanMnO1xyXG5pbXBvcnQgQXRvbSBmcm9tICcuLi9hdG9tcy9BdG9tLmpzJztcclxuaW1wb3J0IEF0b21pY0JvbmQgZnJvbSAnLi4vYXRvbXMvQXRvbWljQm9uZC5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZSBmcm9tICcuLi9Nb2xlY3VsZS5qcyc7XHJcblxyXG4vLyBNb2RlbCBkYXRhIGZvciBuaXRyb2dlbiBtb2xlY3VsZVxyXG5jb25zdCBJTklUSUFMX09YWUdFTl9PWFlHRU5fRElTVEFOQ0UgPSAxNzA7IC8vIEluIHBpY29tZXRlcnMuXHJcblxyXG5jbGFzcyBPMiBleHRlbmRzIE1vbGVjdWxlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IgZm9yIGFuIG94eWdlbiBtb2xlY3VsZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG5cclxuICAgIC8vIFN1cGVydHlwZSBjb25zdHJ1Y3RvclxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBJbnN0YW5jZSBkYXRhIGZvciB0aGUgbml0cm9nZW4gbW9sZWN1bGVcclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLm94eWdlbkF0b20xID0gQXRvbS5veHlnZW4oKTtcclxuICAgIHRoaXMub3h5Z2VuQXRvbTIgPSBBdG9tLm94eWdlbigpO1xyXG5cclxuICAgIC8vIENvbmZpZ3VyZSB0aGUgYmFzZSBjbGFzcy5cclxuICAgIHRoaXMuYWRkQXRvbSggdGhpcy5veHlnZW5BdG9tMSApO1xyXG4gICAgdGhpcy5hZGRBdG9tKCB0aGlzLm94eWdlbkF0b20yICk7XHJcbiAgICB0aGlzLmFkZEF0b21pY0JvbmQoIG5ldyBBdG9taWNCb25kKCB0aGlzLm94eWdlbkF0b20xLCB0aGlzLm94eWdlbkF0b20yLCB7IGJvbmRDb3VudDogMiB9ICkgKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGluaXRpYWwgb2Zmc2V0c1xyXG4gICAgdGhpcy5pbml0aWFsaXplQXRvbU9mZnNldHMoKTtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBhbmQgc2V0IHRoZSBDT0cgb2Zmc2V0cyBmb3IgdGhlIG94eWdlbiBhdG9tcyB3aGljaCBjb21wb3NlIHRoaXMgbW9sZWN1bGUuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBpbml0aWFsaXplQXRvbU9mZnNldHMoKSB7XHJcblxyXG4gICAgdGhpcy5hZGRJbml0aWFsQXRvbUNvZ09mZnNldCggdGhpcy5veHlnZW5BdG9tMSwgbmV3IFZlY3RvcjIoIC1JTklUSUFMX09YWUdFTl9PWFlHRU5fRElTVEFOQ0UgLyAyLCAwICkgKTtcclxuICAgIHRoaXMuYWRkSW5pdGlhbEF0b21Db2dPZmZzZXQoIHRoaXMub3h5Z2VuQXRvbTIsIG5ldyBWZWN0b3IyKCBJTklUSUFMX09YWUdFTl9PWFlHRU5fRElTVEFOQ0UgLyAyLCAwICkgKTtcclxuICAgIHRoaXMudXBkYXRlQXRvbVBvc2l0aW9ucygpO1xyXG5cclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdPMicsIE8yICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBPMjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sa0NBQWtDO0FBQ3RELE9BQU9DLGdCQUFnQixNQUFNLDhCQUE4QjtBQUMzRCxPQUFPQyxJQUFJLE1BQU0sa0JBQWtCO0FBQ25DLE9BQU9DLFVBQVUsTUFBTSx3QkFBd0I7QUFDL0MsT0FBT0MsUUFBUSxNQUFNLGdCQUFnQjs7QUFFckM7QUFDQSxNQUFNQyw4QkFBOEIsR0FBRyxHQUFHLENBQUMsQ0FBQzs7QUFFNUMsTUFBTUMsRUFBRSxTQUFTRixRQUFRLENBQUM7RUFFeEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckI7SUFDQSxLQUFLLENBQUVBLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQTtJQUNBLElBQUksQ0FBQ0MsV0FBVyxHQUFHUCxJQUFJLENBQUNRLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQ0MsV0FBVyxHQUFHVCxJQUFJLENBQUNRLE1BQU0sQ0FBQyxDQUFDOztJQUVoQztJQUNBLElBQUksQ0FBQ0UsT0FBTyxDQUFFLElBQUksQ0FBQ0gsV0FBWSxDQUFDO0lBQ2hDLElBQUksQ0FBQ0csT0FBTyxDQUFFLElBQUksQ0FBQ0QsV0FBWSxDQUFDO0lBQ2hDLElBQUksQ0FBQ0UsYUFBYSxDQUFFLElBQUlWLFVBQVUsQ0FBRSxJQUFJLENBQUNNLFdBQVcsRUFBRSxJQUFJLENBQUNFLFdBQVcsRUFBRTtNQUFFRyxTQUFTLEVBQUU7SUFBRSxDQUFFLENBQUUsQ0FBQzs7SUFFNUY7SUFDQSxJQUFJLENBQUNDLHFCQUFxQixDQUFDLENBQUM7RUFFOUI7O0VBR0E7QUFDRjtBQUNBO0FBQ0E7RUFDRUEscUJBQXFCQSxDQUFBLEVBQUc7SUFFdEIsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBRSxJQUFJLENBQUNQLFdBQVcsRUFBRSxJQUFJVCxPQUFPLENBQUUsQ0FBQ0ssOEJBQThCLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQ3ZHLElBQUksQ0FBQ1csdUJBQXVCLENBQUUsSUFBSSxDQUFDTCxXQUFXLEVBQUUsSUFBSVgsT0FBTyxDQUFFSyw4QkFBOEIsR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFFLENBQUM7SUFDdEcsSUFBSSxDQUFDWSxtQkFBbUIsQ0FBQyxDQUFDO0VBRTVCO0FBQ0Y7QUFFQWhCLGdCQUFnQixDQUFDaUIsUUFBUSxDQUFFLElBQUksRUFBRVosRUFBRyxDQUFDO0FBRXJDLGVBQWVBLEVBQUUifQ==