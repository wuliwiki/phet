// Copyright 2021, University of Colorado Boulder

/**
 * Class that represents ozone (O3) in the model.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import dotRandom from '../../../../../dot/js/dotRandom.js';
import Vector2 from '../../../../../dot/js/Vector2.js';
import greenhouseEffect from '../../../greenhouseEffect.js';
import Atom from '../atoms/Atom.js';
import AtomicBond from '../atoms/AtomicBond.js';
import BreakApartStrategy from '../BreakApartStrategy.js';
import Molecule from '../Molecule.js';
import RotationStrategy from '../RotationStrategy.js';
import VibrationStrategy from '../VibrationStrategy.js';
import WavelengthConstants from '../WavelengthConstants.js';
import O from './O.js';
import O2 from './O2.js';

// Model data for the O3 molecule
// These constants define the initial shape of the O3 atom.  The angle between the atoms is intended to be correct,
// and the bond is somewhat longer than real life.  The algebraic calculations are intended to make it so that the
// bond length and/or the angle could be changed and the correct center of gravity will be maintained.
const OXYGEN_OXYGEN_BOND_LENGTH = 180;
const INITIAL_OXYGEN_OXYGEN_OXYGEN_ANGLE = 120 * Math.PI / 180; // In radians.
const INITIAL_MOLECULE_HEIGHT = OXYGEN_OXYGEN_BOND_LENGTH * Math.cos(INITIAL_OXYGEN_OXYGEN_OXYGEN_ANGLE / 2);
const INITIAL_MOLECULE_WIDTH = 2 * OXYGEN_OXYGEN_BOND_LENGTH * Math.sin(INITIAL_OXYGEN_OXYGEN_OXYGEN_ANGLE / 2);
const INITIAL_CENTER_OXYGEN_VERTICAL_OFFSET = 2.0 / 3.0 * INITIAL_MOLECULE_HEIGHT;
const INITIAL_OXYGEN_VERTICAL_OFFSET = -INITIAL_CENTER_OXYGEN_VERTICAL_OFFSET / 2;
const INITIAL_OXYGEN_HORIZONTAL_OFFSET = INITIAL_MOLECULE_WIDTH / 2;
const BREAK_APART_VELOCITY = 3000;

//Random boolean generator.  Used to control the side on which the delocalized bond is depicted.
const RAND = {
  nextBoolean: () => dotRandom.nextDouble() < 0.50
};
class O3 extends Molecule {
  /**
   * Constructor for an ozone molecule.
   *
   * @param {Object} [options]
   */
  constructor(options) {
    // Supertype constructor
    super(options);

    // Instance Data
    // @private
    this.centerOxygenAtom = Atom.oxygen();
    this.leftOxygenAtom = Atom.oxygen();
    this.rightOxygenAtom = Atom.oxygen();

    // Tracks the side on which the double bond is shown.  More on this where it is initialized.
    // @private
    this.doubleBondOnRight = RAND.nextBoolean();

    // Configure the base class.
    this.addAtom(this.centerOxygenAtom);
    this.addAtom(this.leftOxygenAtom);
    this.addAtom(this.rightOxygenAtom);

    // Create the bond structure.  O3 has a type of bond where each O-O has essentially 1.5 bonds, so we randomly choose
    // one side to sho two bonds and another to show one.
    if (this.doubleBondOnRight) {
      this.addAtomicBond(new AtomicBond(this.centerOxygenAtom, this.leftOxygenAtom, {
        bondCount: 1
      }));
      this.addAtomicBond(new AtomicBond(this.centerOxygenAtom, this.rightOxygenAtom, {
        bondCount: 2
      }));
    } else {
      this.addAtomicBond(new AtomicBond(this.centerOxygenAtom, this.leftOxygenAtom, {
        bondCount: 2
      }));
      this.addAtomicBond(new AtomicBond(this.centerOxygenAtom, this.rightOxygenAtom, {
        bondCount: 1
      }));
    }

    // Set up the photon wavelengths to absorb.
    this.setPhotonAbsorptionStrategy(WavelengthConstants.MICRO_WAVELENGTH, new RotationStrategy(this));
    this.setPhotonAbsorptionStrategy(WavelengthConstants.IR_WAVELENGTH, new VibrationStrategy(this));
    this.setPhotonAbsorptionStrategy(WavelengthConstants.UV_WAVELENGTH, new BreakApartStrategy(this));

    // Set the initial offsets.
    this.initializeAtomOffsets();
  }

  /**
   * Initialize and set the COG positions for each atom in this molecule.  These are the atom positions
   * when the molecule is at rest (not rotating or vibrating).
   * @private
   */
  initializeAtomOffsets() {
    this.addInitialAtomCogOffset(this.centerOxygenAtom, new Vector2(0, INITIAL_CENTER_OXYGEN_VERTICAL_OFFSET));
    this.addInitialAtomCogOffset(this.leftOxygenAtom, new Vector2(-INITIAL_OXYGEN_HORIZONTAL_OFFSET, INITIAL_OXYGEN_VERTICAL_OFFSET));
    this.addInitialAtomCogOffset(this.rightOxygenAtom, new Vector2(INITIAL_OXYGEN_HORIZONTAL_OFFSET, INITIAL_OXYGEN_VERTICAL_OFFSET));
    this.updateAtomPositions();
  }

  /**
   * Set the vibration behavior for this O3 molecule.  Sets the O3 molecule to a vibrating state then
   * calculates and sets the new position for each atom in the molecule.
   * @public
   *
   * @param {number} vibrationRadians - Where this molecule is in its vibration cycle in radians.
   */
  setVibration(vibrationRadians) {
    this.currentVibrationRadiansProperty.set(vibrationRadians);
    const multFactor = Math.sin(vibrationRadians);
    const maxCenterOxygenDisplacement = 30;
    const maxOuterOxygenDisplacement = 15;
    this.getVibrationAtomOffset(this.centerOxygenAtom).setXY(0, multFactor * maxCenterOxygenDisplacement);
    this.getVibrationAtomOffset(this.rightOxygenAtom).setXY(-multFactor * maxOuterOxygenDisplacement, -multFactor * maxOuterOxygenDisplacement);
    this.getVibrationAtomOffset(this.leftOxygenAtom).setXY(multFactor * maxOuterOxygenDisplacement, -multFactor * maxOuterOxygenDisplacement);
    this.updateAtomPositions();
  }

  /**
   * Define the break apart behavior for the O3 molecule.  Initializes and sets the velocity of constituent molecules.
   * @public
   */
  breakApart() {
    // Create the constituent molecules that result from breaking apart.
    const diatomicOxygenMolecule = new O2();
    const singleOxygenMolecule = new O();
    this.brokeApartEmitter.emit(diatomicOxygenMolecule, singleOxygenMolecule);

    // Set up the direction and velocity of the constituent molecules. These are set up mostly to look good, and their
    // directions and velocities have little if anything to do with any physical rules of atomic dissociation.  If
    // the molecule happens to have been rotated before breaking apart, it is rotated back to the initial orientation
    // before dissociation.  This keeps things simple, and makes the products go off the top and bottom of the window
    // instead of potentially going back towards the photon source.  See issue #110.
    const diatomicMoleculeRotationAngle = Math.PI / 2 - INITIAL_OXYGEN_OXYGEN_OXYGEN_ANGLE / 2;
    let breakApartAngle;
    if (this.doubleBondOnRight) {
      diatomicOxygenMolecule.rotate(-diatomicMoleculeRotationAngle);
      diatomicOxygenMolecule.setCenterOfGravityPos((this.getInitialAtomCogOffset(this.rightOxygenAtom).x + this.getInitialAtomCogOffset(this.centerOxygenAtom).x) / 2, (this.getInitialAtomCogOffset(this.centerOxygenAtom).y + this.getInitialAtomCogOffset(this.rightOxygenAtom).y) / 2);
      breakApartAngle = Math.PI / 4 + dotRandom.nextDouble() * Math.PI / 4;
      singleOxygenMolecule.setCenterOfGravityPos(-INITIAL_OXYGEN_HORIZONTAL_OFFSET, INITIAL_OXYGEN_VERTICAL_OFFSET);
    } else {
      diatomicOxygenMolecule.rotate(diatomicMoleculeRotationAngle);
      breakApartAngle = Math.PI / 2 + dotRandom.nextDouble() * Math.PI / 4;
      diatomicOxygenMolecule.setCenterOfGravityPos((this.getInitialAtomCogOffset(this.leftOxygenAtom).x + this.getInitialAtomCogOffset(this.centerOxygenAtom).x) / 2, (this.getInitialAtomCogOffset(this.leftOxygenAtom).y + this.getInitialAtomCogOffset(this.centerOxygenAtom).y) / 2);
      singleOxygenMolecule.setCenterOfGravityPos(INITIAL_OXYGEN_HORIZONTAL_OFFSET, INITIAL_OXYGEN_VERTICAL_OFFSET);
    }
    diatomicOxygenMolecule.velocity.set(new Vector2(BREAK_APART_VELOCITY * 0.33 * Math.cos(breakApartAngle), BREAK_APART_VELOCITY * 0.33 * Math.sin(breakApartAngle)));
    singleOxygenMolecule.velocity.set(new Vector2(-BREAK_APART_VELOCITY * 0.67 * Math.cos(breakApartAngle), -BREAK_APART_VELOCITY * 0.67 * Math.sin(breakApartAngle)));
  }
}
greenhouseEffect.register('O3', O3);
export default O3;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJWZWN0b3IyIiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkF0b20iLCJBdG9taWNCb25kIiwiQnJlYWtBcGFydFN0cmF0ZWd5IiwiTW9sZWN1bGUiLCJSb3RhdGlvblN0cmF0ZWd5IiwiVmlicmF0aW9uU3RyYXRlZ3kiLCJXYXZlbGVuZ3RoQ29uc3RhbnRzIiwiTyIsIk8yIiwiT1hZR0VOX09YWUdFTl9CT05EX0xFTkdUSCIsIklOSVRJQUxfT1hZR0VOX09YWUdFTl9PWFlHRU5fQU5HTEUiLCJNYXRoIiwiUEkiLCJJTklUSUFMX01PTEVDVUxFX0hFSUdIVCIsImNvcyIsIklOSVRJQUxfTU9MRUNVTEVfV0lEVEgiLCJzaW4iLCJJTklUSUFMX0NFTlRFUl9PWFlHRU5fVkVSVElDQUxfT0ZGU0VUIiwiSU5JVElBTF9PWFlHRU5fVkVSVElDQUxfT0ZGU0VUIiwiSU5JVElBTF9PWFlHRU5fSE9SSVpPTlRBTF9PRkZTRVQiLCJCUkVBS19BUEFSVF9WRUxPQ0lUWSIsIlJBTkQiLCJuZXh0Qm9vbGVhbiIsIm5leHREb3VibGUiLCJPMyIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImNlbnRlck94eWdlbkF0b20iLCJveHlnZW4iLCJsZWZ0T3h5Z2VuQXRvbSIsInJpZ2h0T3h5Z2VuQXRvbSIsImRvdWJsZUJvbmRPblJpZ2h0IiwiYWRkQXRvbSIsImFkZEF0b21pY0JvbmQiLCJib25kQ291bnQiLCJzZXRQaG90b25BYnNvcnB0aW9uU3RyYXRlZ3kiLCJNSUNST19XQVZFTEVOR1RIIiwiSVJfV0FWRUxFTkdUSCIsIlVWX1dBVkVMRU5HVEgiLCJpbml0aWFsaXplQXRvbU9mZnNldHMiLCJhZGRJbml0aWFsQXRvbUNvZ09mZnNldCIsInVwZGF0ZUF0b21Qb3NpdGlvbnMiLCJzZXRWaWJyYXRpb24iLCJ2aWJyYXRpb25SYWRpYW5zIiwiY3VycmVudFZpYnJhdGlvblJhZGlhbnNQcm9wZXJ0eSIsInNldCIsIm11bHRGYWN0b3IiLCJtYXhDZW50ZXJPeHlnZW5EaXNwbGFjZW1lbnQiLCJtYXhPdXRlck94eWdlbkRpc3BsYWNlbWVudCIsImdldFZpYnJhdGlvbkF0b21PZmZzZXQiLCJzZXRYWSIsImJyZWFrQXBhcnQiLCJkaWF0b21pY094eWdlbk1vbGVjdWxlIiwic2luZ2xlT3h5Z2VuTW9sZWN1bGUiLCJicm9rZUFwYXJ0RW1pdHRlciIsImVtaXQiLCJkaWF0b21pY01vbGVjdWxlUm90YXRpb25BbmdsZSIsImJyZWFrQXBhcnRBbmdsZSIsInJvdGF0ZSIsInNldENlbnRlck9mR3Jhdml0eVBvcyIsImdldEluaXRpYWxBdG9tQ29nT2Zmc2V0IiwieCIsInkiLCJ2ZWxvY2l0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTzMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENsYXNzIHRoYXQgcmVwcmVzZW50cyBvem9uZSAoTzMpIGluIHRoZSBtb2RlbC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBBdG9tIGZyb20gJy4uL2F0b21zL0F0b20uanMnO1xyXG5pbXBvcnQgQXRvbWljQm9uZCBmcm9tICcuLi9hdG9tcy9BdG9taWNCb25kLmpzJztcclxuaW1wb3J0IEJyZWFrQXBhcnRTdHJhdGVneSBmcm9tICcuLi9CcmVha0FwYXJ0U3RyYXRlZ3kuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGUgZnJvbSAnLi4vTW9sZWN1bGUuanMnO1xyXG5pbXBvcnQgUm90YXRpb25TdHJhdGVneSBmcm9tICcuLi9Sb3RhdGlvblN0cmF0ZWd5LmpzJztcclxuaW1wb3J0IFZpYnJhdGlvblN0cmF0ZWd5IGZyb20gJy4uL1ZpYnJhdGlvblN0cmF0ZWd5LmpzJztcclxuaW1wb3J0IFdhdmVsZW5ndGhDb25zdGFudHMgZnJvbSAnLi4vV2F2ZWxlbmd0aENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBPIGZyb20gJy4vTy5qcyc7XHJcbmltcG9ydCBPMiBmcm9tICcuL08yLmpzJztcclxuXHJcbi8vIE1vZGVsIGRhdGEgZm9yIHRoZSBPMyBtb2xlY3VsZVxyXG4vLyBUaGVzZSBjb25zdGFudHMgZGVmaW5lIHRoZSBpbml0aWFsIHNoYXBlIG9mIHRoZSBPMyBhdG9tLiAgVGhlIGFuZ2xlIGJldHdlZW4gdGhlIGF0b21zIGlzIGludGVuZGVkIHRvIGJlIGNvcnJlY3QsXHJcbi8vIGFuZCB0aGUgYm9uZCBpcyBzb21ld2hhdCBsb25nZXIgdGhhbiByZWFsIGxpZmUuICBUaGUgYWxnZWJyYWljIGNhbGN1bGF0aW9ucyBhcmUgaW50ZW5kZWQgdG8gbWFrZSBpdCBzbyB0aGF0IHRoZVxyXG4vLyBib25kIGxlbmd0aCBhbmQvb3IgdGhlIGFuZ2xlIGNvdWxkIGJlIGNoYW5nZWQgYW5kIHRoZSBjb3JyZWN0IGNlbnRlciBvZiBncmF2aXR5IHdpbGwgYmUgbWFpbnRhaW5lZC5cclxuY29uc3QgT1hZR0VOX09YWUdFTl9CT05EX0xFTkdUSCA9IDE4MDtcclxuY29uc3QgSU5JVElBTF9PWFlHRU5fT1hZR0VOX09YWUdFTl9BTkdMRSA9IDEyMCAqIE1hdGguUEkgLyAxODA7IC8vIEluIHJhZGlhbnMuXHJcbmNvbnN0IElOSVRJQUxfTU9MRUNVTEVfSEVJR0hUID0gT1hZR0VOX09YWUdFTl9CT05EX0xFTkdUSCAqIE1hdGguY29zKCBJTklUSUFMX09YWUdFTl9PWFlHRU5fT1hZR0VOX0FOR0xFIC8gMiApO1xyXG5jb25zdCBJTklUSUFMX01PTEVDVUxFX1dJRFRIID0gMiAqIE9YWUdFTl9PWFlHRU5fQk9ORF9MRU5HVEggKiBNYXRoLnNpbiggSU5JVElBTF9PWFlHRU5fT1hZR0VOX09YWUdFTl9BTkdMRSAvIDIgKTtcclxuY29uc3QgSU5JVElBTF9DRU5URVJfT1hZR0VOX1ZFUlRJQ0FMX09GRlNFVCA9IDIuMCAvIDMuMCAqIElOSVRJQUxfTU9MRUNVTEVfSEVJR0hUO1xyXG5jb25zdCBJTklUSUFMX09YWUdFTl9WRVJUSUNBTF9PRkZTRVQgPSAtSU5JVElBTF9DRU5URVJfT1hZR0VOX1ZFUlRJQ0FMX09GRlNFVCAvIDI7XHJcbmNvbnN0IElOSVRJQUxfT1hZR0VOX0hPUklaT05UQUxfT0ZGU0VUID0gSU5JVElBTF9NT0xFQ1VMRV9XSURUSCAvIDI7XHJcbmNvbnN0IEJSRUFLX0FQQVJUX1ZFTE9DSVRZID0gMzAwMDtcclxuXHJcbi8vUmFuZG9tIGJvb2xlYW4gZ2VuZXJhdG9yLiAgVXNlZCB0byBjb250cm9sIHRoZSBzaWRlIG9uIHdoaWNoIHRoZSBkZWxvY2FsaXplZCBib25kIGlzIGRlcGljdGVkLlxyXG5jb25zdCBSQU5EID0ge1xyXG4gIG5leHRCb29sZWFuOiAoKSA9PiBkb3RSYW5kb20ubmV4dERvdWJsZSgpIDwgMC41MFxyXG59O1xyXG5cclxuY2xhc3MgTzMgZXh0ZW5kcyBNb2xlY3VsZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yIGZvciBhbiBvem9uZSBtb2xlY3VsZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBTdXBlcnR5cGUgY29uc3RydWN0b3JcclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gSW5zdGFuY2UgRGF0YVxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuY2VudGVyT3h5Z2VuQXRvbSA9IEF0b20ub3h5Z2VuKCk7XHJcbiAgICB0aGlzLmxlZnRPeHlnZW5BdG9tID0gQXRvbS5veHlnZW4oKTtcclxuICAgIHRoaXMucmlnaHRPeHlnZW5BdG9tID0gQXRvbS5veHlnZW4oKTtcclxuXHJcbiAgICAvLyBUcmFja3MgdGhlIHNpZGUgb24gd2hpY2ggdGhlIGRvdWJsZSBib25kIGlzIHNob3duLiAgTW9yZSBvbiB0aGlzIHdoZXJlIGl0IGlzIGluaXRpYWxpemVkLlxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuZG91YmxlQm9uZE9uUmlnaHQgPSBSQU5ELm5leHRCb29sZWFuKCk7XHJcblxyXG4gICAgLy8gQ29uZmlndXJlIHRoZSBiYXNlIGNsYXNzLlxyXG4gICAgdGhpcy5hZGRBdG9tKCB0aGlzLmNlbnRlck94eWdlbkF0b20gKTtcclxuICAgIHRoaXMuYWRkQXRvbSggdGhpcy5sZWZ0T3h5Z2VuQXRvbSApO1xyXG4gICAgdGhpcy5hZGRBdG9tKCB0aGlzLnJpZ2h0T3h5Z2VuQXRvbSApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgYm9uZCBzdHJ1Y3R1cmUuICBPMyBoYXMgYSB0eXBlIG9mIGJvbmQgd2hlcmUgZWFjaCBPLU8gaGFzIGVzc2VudGlhbGx5IDEuNSBib25kcywgc28gd2UgcmFuZG9tbHkgY2hvb3NlXHJcbiAgICAvLyBvbmUgc2lkZSB0byBzaG8gdHdvIGJvbmRzIGFuZCBhbm90aGVyIHRvIHNob3cgb25lLlxyXG4gICAgaWYgKCB0aGlzLmRvdWJsZUJvbmRPblJpZ2h0ICkge1xyXG4gICAgICB0aGlzLmFkZEF0b21pY0JvbmQoIG5ldyBBdG9taWNCb25kKCB0aGlzLmNlbnRlck94eWdlbkF0b20sIHRoaXMubGVmdE94eWdlbkF0b20sIHsgYm9uZENvdW50OiAxIH0gKSApO1xyXG4gICAgICB0aGlzLmFkZEF0b21pY0JvbmQoIG5ldyBBdG9taWNCb25kKCB0aGlzLmNlbnRlck94eWdlbkF0b20sIHRoaXMucmlnaHRPeHlnZW5BdG9tLCB7IGJvbmRDb3VudDogMiB9ICkgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmFkZEF0b21pY0JvbmQoIG5ldyBBdG9taWNCb25kKCB0aGlzLmNlbnRlck94eWdlbkF0b20sIHRoaXMubGVmdE94eWdlbkF0b20sIHsgYm9uZENvdW50OiAyIH0gKSApO1xyXG4gICAgICB0aGlzLmFkZEF0b21pY0JvbmQoIG5ldyBBdG9taWNCb25kKCB0aGlzLmNlbnRlck94eWdlbkF0b20sIHRoaXMucmlnaHRPeHlnZW5BdG9tLCB7IGJvbmRDb3VudDogMSB9ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgdXAgdGhlIHBob3RvbiB3YXZlbGVuZ3RocyB0byBhYnNvcmIuXHJcbiAgICB0aGlzLnNldFBob3RvbkFic29ycHRpb25TdHJhdGVneSggV2F2ZWxlbmd0aENvbnN0YW50cy5NSUNST19XQVZFTEVOR1RILCBuZXcgUm90YXRpb25TdHJhdGVneSggdGhpcyApICk7XHJcbiAgICB0aGlzLnNldFBob3RvbkFic29ycHRpb25TdHJhdGVneSggV2F2ZWxlbmd0aENvbnN0YW50cy5JUl9XQVZFTEVOR1RILCBuZXcgVmlicmF0aW9uU3RyYXRlZ3koIHRoaXMgKSApO1xyXG4gICAgdGhpcy5zZXRQaG90b25BYnNvcnB0aW9uU3RyYXRlZ3koIFdhdmVsZW5ndGhDb25zdGFudHMuVVZfV0FWRUxFTkdUSCwgbmV3IEJyZWFrQXBhcnRTdHJhdGVneSggdGhpcyApICk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSBpbml0aWFsIG9mZnNldHMuXHJcbiAgICB0aGlzLmluaXRpYWxpemVBdG9tT2Zmc2V0cygpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgYW5kIHNldCB0aGUgQ09HIHBvc2l0aW9ucyBmb3IgZWFjaCBhdG9tIGluIHRoaXMgbW9sZWN1bGUuICBUaGVzZSBhcmUgdGhlIGF0b20gcG9zaXRpb25zXHJcbiAgICogd2hlbiB0aGUgbW9sZWN1bGUgaXMgYXQgcmVzdCAobm90IHJvdGF0aW5nIG9yIHZpYnJhdGluZykuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBpbml0aWFsaXplQXRvbU9mZnNldHMoKSB7XHJcblxyXG4gICAgdGhpcy5hZGRJbml0aWFsQXRvbUNvZ09mZnNldCggdGhpcy5jZW50ZXJPeHlnZW5BdG9tLCBuZXcgVmVjdG9yMiggMCwgSU5JVElBTF9DRU5URVJfT1hZR0VOX1ZFUlRJQ0FMX09GRlNFVCApICk7XHJcbiAgICB0aGlzLmFkZEluaXRpYWxBdG9tQ29nT2Zmc2V0KCB0aGlzLmxlZnRPeHlnZW5BdG9tLCBuZXcgVmVjdG9yMiggLUlOSVRJQUxfT1hZR0VOX0hPUklaT05UQUxfT0ZGU0VULCBJTklUSUFMX09YWUdFTl9WRVJUSUNBTF9PRkZTRVQgKSApO1xyXG4gICAgdGhpcy5hZGRJbml0aWFsQXRvbUNvZ09mZnNldCggdGhpcy5yaWdodE94eWdlbkF0b20sIG5ldyBWZWN0b3IyKCBJTklUSUFMX09YWUdFTl9IT1JJWk9OVEFMX09GRlNFVCwgSU5JVElBTF9PWFlHRU5fVkVSVElDQUxfT0ZGU0VUICkgKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZUF0b21Qb3NpdGlvbnMoKTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHZpYnJhdGlvbiBiZWhhdmlvciBmb3IgdGhpcyBPMyBtb2xlY3VsZS4gIFNldHMgdGhlIE8zIG1vbGVjdWxlIHRvIGEgdmlicmF0aW5nIHN0YXRlIHRoZW5cclxuICAgKiBjYWxjdWxhdGVzIGFuZCBzZXRzIHRoZSBuZXcgcG9zaXRpb24gZm9yIGVhY2ggYXRvbSBpbiB0aGUgbW9sZWN1bGUuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZpYnJhdGlvblJhZGlhbnMgLSBXaGVyZSB0aGlzIG1vbGVjdWxlIGlzIGluIGl0cyB2aWJyYXRpb24gY3ljbGUgaW4gcmFkaWFucy5cclxuICAgKi9cclxuICBzZXRWaWJyYXRpb24oIHZpYnJhdGlvblJhZGlhbnMgKSB7XHJcblxyXG4gICAgdGhpcy5jdXJyZW50VmlicmF0aW9uUmFkaWFuc1Byb3BlcnR5LnNldCggdmlicmF0aW9uUmFkaWFucyApO1xyXG4gICAgY29uc3QgbXVsdEZhY3RvciA9IE1hdGguc2luKCB2aWJyYXRpb25SYWRpYW5zICk7XHJcbiAgICBjb25zdCBtYXhDZW50ZXJPeHlnZW5EaXNwbGFjZW1lbnQgPSAzMDtcclxuICAgIGNvbnN0IG1heE91dGVyT3h5Z2VuRGlzcGxhY2VtZW50ID0gMTU7XHJcbiAgICB0aGlzLmdldFZpYnJhdGlvbkF0b21PZmZzZXQoIHRoaXMuY2VudGVyT3h5Z2VuQXRvbSApLnNldFhZKCAwLCBtdWx0RmFjdG9yICogbWF4Q2VudGVyT3h5Z2VuRGlzcGxhY2VtZW50ICk7XHJcbiAgICB0aGlzLmdldFZpYnJhdGlvbkF0b21PZmZzZXQoIHRoaXMucmlnaHRPeHlnZW5BdG9tICkuc2V0WFkoIC1tdWx0RmFjdG9yICogbWF4T3V0ZXJPeHlnZW5EaXNwbGFjZW1lbnQsIC1tdWx0RmFjdG9yICogbWF4T3V0ZXJPeHlnZW5EaXNwbGFjZW1lbnQgKTtcclxuICAgIHRoaXMuZ2V0VmlicmF0aW9uQXRvbU9mZnNldCggdGhpcy5sZWZ0T3h5Z2VuQXRvbSApLnNldFhZKCBtdWx0RmFjdG9yICogbWF4T3V0ZXJPeHlnZW5EaXNwbGFjZW1lbnQsIC1tdWx0RmFjdG9yICogbWF4T3V0ZXJPeHlnZW5EaXNwbGFjZW1lbnQgKTtcclxuICAgIHRoaXMudXBkYXRlQXRvbVBvc2l0aW9ucygpO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZmluZSB0aGUgYnJlYWsgYXBhcnQgYmVoYXZpb3IgZm9yIHRoZSBPMyBtb2xlY3VsZS4gIEluaXRpYWxpemVzIGFuZCBzZXRzIHRoZSB2ZWxvY2l0eSBvZiBjb25zdGl0dWVudCBtb2xlY3VsZXMuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGJyZWFrQXBhcnQoKSB7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBjb25zdGl0dWVudCBtb2xlY3VsZXMgdGhhdCByZXN1bHQgZnJvbSBicmVha2luZyBhcGFydC5cclxuICAgIGNvbnN0IGRpYXRvbWljT3h5Z2VuTW9sZWN1bGUgPSBuZXcgTzIoKTtcclxuICAgIGNvbnN0IHNpbmdsZU94eWdlbk1vbGVjdWxlID0gbmV3IE8oKTtcclxuICAgIHRoaXMuYnJva2VBcGFydEVtaXR0ZXIuZW1pdCggZGlhdG9taWNPeHlnZW5Nb2xlY3VsZSwgc2luZ2xlT3h5Z2VuTW9sZWN1bGUgKTtcclxuXHJcbiAgICAvLyBTZXQgdXAgdGhlIGRpcmVjdGlvbiBhbmQgdmVsb2NpdHkgb2YgdGhlIGNvbnN0aXR1ZW50IG1vbGVjdWxlcy4gVGhlc2UgYXJlIHNldCB1cCBtb3N0bHkgdG8gbG9vayBnb29kLCBhbmQgdGhlaXJcclxuICAgIC8vIGRpcmVjdGlvbnMgYW5kIHZlbG9jaXRpZXMgaGF2ZSBsaXR0bGUgaWYgYW55dGhpbmcgdG8gZG8gd2l0aCBhbnkgcGh5c2ljYWwgcnVsZXMgb2YgYXRvbWljIGRpc3NvY2lhdGlvbi4gIElmXHJcbiAgICAvLyB0aGUgbW9sZWN1bGUgaGFwcGVucyB0byBoYXZlIGJlZW4gcm90YXRlZCBiZWZvcmUgYnJlYWtpbmcgYXBhcnQsIGl0IGlzIHJvdGF0ZWQgYmFjayB0byB0aGUgaW5pdGlhbCBvcmllbnRhdGlvblxyXG4gICAgLy8gYmVmb3JlIGRpc3NvY2lhdGlvbi4gIFRoaXMga2VlcHMgdGhpbmdzIHNpbXBsZSwgYW5kIG1ha2VzIHRoZSBwcm9kdWN0cyBnbyBvZmYgdGhlIHRvcCBhbmQgYm90dG9tIG9mIHRoZSB3aW5kb3dcclxuICAgIC8vIGluc3RlYWQgb2YgcG90ZW50aWFsbHkgZ29pbmcgYmFjayB0b3dhcmRzIHRoZSBwaG90b24gc291cmNlLiAgU2VlIGlzc3VlICMxMTAuXHJcbiAgICBjb25zdCBkaWF0b21pY01vbGVjdWxlUm90YXRpb25BbmdsZSA9ICggKCBNYXRoLlBJIC8gMiApIC0gKCBJTklUSUFMX09YWUdFTl9PWFlHRU5fT1hZR0VOX0FOR0xFIC8gMiApICk7XHJcbiAgICBsZXQgYnJlYWtBcGFydEFuZ2xlO1xyXG4gICAgaWYgKCB0aGlzLmRvdWJsZUJvbmRPblJpZ2h0ICkge1xyXG4gICAgICBkaWF0b21pY094eWdlbk1vbGVjdWxlLnJvdGF0ZSggLWRpYXRvbWljTW9sZWN1bGVSb3RhdGlvbkFuZ2xlICk7XHJcbiAgICAgIGRpYXRvbWljT3h5Z2VuTW9sZWN1bGUuc2V0Q2VudGVyT2ZHcmF2aXR5UG9zKCAoIHRoaXMuZ2V0SW5pdGlhbEF0b21Db2dPZmZzZXQoIHRoaXMucmlnaHRPeHlnZW5BdG9tICkueCArIHRoaXMuZ2V0SW5pdGlhbEF0b21Db2dPZmZzZXQoIHRoaXMuY2VudGVyT3h5Z2VuQXRvbSApLnggKSAvIDIsXHJcbiAgICAgICAgKCB0aGlzLmdldEluaXRpYWxBdG9tQ29nT2Zmc2V0KCB0aGlzLmNlbnRlck94eWdlbkF0b20gKS55ICsgdGhpcy5nZXRJbml0aWFsQXRvbUNvZ09mZnNldCggdGhpcy5yaWdodE94eWdlbkF0b20gKS55ICkgLyAyICk7XHJcbiAgICAgIGJyZWFrQXBhcnRBbmdsZSA9IE1hdGguUEkgLyA0ICsgZG90UmFuZG9tLm5leHREb3VibGUoKSAqIE1hdGguUEkgLyA0O1xyXG4gICAgICBzaW5nbGVPeHlnZW5Nb2xlY3VsZS5zZXRDZW50ZXJPZkdyYXZpdHlQb3MoIC1JTklUSUFMX09YWUdFTl9IT1JJWk9OVEFMX09GRlNFVCwgSU5JVElBTF9PWFlHRU5fVkVSVElDQUxfT0ZGU0VUICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgZGlhdG9taWNPeHlnZW5Nb2xlY3VsZS5yb3RhdGUoIGRpYXRvbWljTW9sZWN1bGVSb3RhdGlvbkFuZ2xlICk7XHJcbiAgICAgIGJyZWFrQXBhcnRBbmdsZSA9IE1hdGguUEkgLyAyICsgZG90UmFuZG9tLm5leHREb3VibGUoKSAqIE1hdGguUEkgLyA0O1xyXG4gICAgICBkaWF0b21pY094eWdlbk1vbGVjdWxlLnNldENlbnRlck9mR3Jhdml0eVBvcyggKCB0aGlzLmdldEluaXRpYWxBdG9tQ29nT2Zmc2V0KCB0aGlzLmxlZnRPeHlnZW5BdG9tICkueCArIHRoaXMuZ2V0SW5pdGlhbEF0b21Db2dPZmZzZXQoIHRoaXMuY2VudGVyT3h5Z2VuQXRvbSApLnggKSAvIDIsXHJcbiAgICAgICAgKCB0aGlzLmdldEluaXRpYWxBdG9tQ29nT2Zmc2V0KCB0aGlzLmxlZnRPeHlnZW5BdG9tICkueSArIHRoaXMuZ2V0SW5pdGlhbEF0b21Db2dPZmZzZXQoIHRoaXMuY2VudGVyT3h5Z2VuQXRvbSApLnkgKSAvIDIgKTtcclxuICAgICAgc2luZ2xlT3h5Z2VuTW9sZWN1bGUuc2V0Q2VudGVyT2ZHcmF2aXR5UG9zKCBJTklUSUFMX09YWUdFTl9IT1JJWk9OVEFMX09GRlNFVCwgSU5JVElBTF9PWFlHRU5fVkVSVElDQUxfT0ZGU0VUICk7XHJcbiAgICB9XHJcbiAgICBkaWF0b21pY094eWdlbk1vbGVjdWxlLnZlbG9jaXR5LnNldChcclxuICAgICAgbmV3IFZlY3RvcjIoIEJSRUFLX0FQQVJUX1ZFTE9DSVRZICogMC4zMyAqIE1hdGguY29zKCBicmVha0FwYXJ0QW5nbGUgKSxcclxuICAgICAgICBCUkVBS19BUEFSVF9WRUxPQ0lUWSAqIDAuMzMgKiBNYXRoLnNpbiggYnJlYWtBcGFydEFuZ2xlICkgKVxyXG4gICAgKTtcclxuICAgIHNpbmdsZU94eWdlbk1vbGVjdWxlLnZlbG9jaXR5LnNldChcclxuICAgICAgbmV3IFZlY3RvcjIoIC1CUkVBS19BUEFSVF9WRUxPQ0lUWSAqIDAuNjcgKiBNYXRoLmNvcyggYnJlYWtBcGFydEFuZ2xlICksXHJcbiAgICAgICAgLUJSRUFLX0FQQVJUX1ZFTE9DSVRZICogMC42NyAqIE1hdGguc2luKCBicmVha0FwYXJ0QW5nbGUgKSApXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JlZW5ob3VzZUVmZmVjdC5yZWdpc3RlciggJ08zJywgTzMgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE8zOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxvQ0FBb0M7QUFDMUQsT0FBT0MsT0FBTyxNQUFNLGtDQUFrQztBQUN0RCxPQUFPQyxnQkFBZ0IsTUFBTSw4QkFBOEI7QUFDM0QsT0FBT0MsSUFBSSxNQUFNLGtCQUFrQjtBQUNuQyxPQUFPQyxVQUFVLE1BQU0sd0JBQXdCO0FBQy9DLE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQUN6RCxPQUFPQyxRQUFRLE1BQU0sZ0JBQWdCO0FBQ3JDLE9BQU9DLGdCQUFnQixNQUFNLHdCQUF3QjtBQUNyRCxPQUFPQyxpQkFBaUIsTUFBTSx5QkFBeUI7QUFDdkQsT0FBT0MsbUJBQW1CLE1BQU0sMkJBQTJCO0FBQzNELE9BQU9DLENBQUMsTUFBTSxRQUFRO0FBQ3RCLE9BQU9DLEVBQUUsTUFBTSxTQUFTOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLHlCQUF5QixHQUFHLEdBQUc7QUFDckMsTUFBTUMsa0NBQWtDLEdBQUcsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNoRSxNQUFNQyx1QkFBdUIsR0FBR0oseUJBQXlCLEdBQUdFLElBQUksQ0FBQ0csR0FBRyxDQUFFSixrQ0FBa0MsR0FBRyxDQUFFLENBQUM7QUFDOUcsTUFBTUssc0JBQXNCLEdBQUcsQ0FBQyxHQUFHTix5QkFBeUIsR0FBR0UsSUFBSSxDQUFDSyxHQUFHLENBQUVOLGtDQUFrQyxHQUFHLENBQUUsQ0FBQztBQUNqSCxNQUFNTyxxQ0FBcUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHSix1QkFBdUI7QUFDakYsTUFBTUssOEJBQThCLEdBQUcsQ0FBQ0QscUNBQXFDLEdBQUcsQ0FBQztBQUNqRixNQUFNRSxnQ0FBZ0MsR0FBR0osc0JBQXNCLEdBQUcsQ0FBQztBQUNuRSxNQUFNSyxvQkFBb0IsR0FBRyxJQUFJOztBQUVqQztBQUNBLE1BQU1DLElBQUksR0FBRztFQUNYQyxXQUFXLEVBQUVBLENBQUEsS0FBTXpCLFNBQVMsQ0FBQzBCLFVBQVUsQ0FBQyxDQUFDLEdBQUc7QUFDOUMsQ0FBQztBQUVELE1BQU1DLEVBQUUsU0FBU3JCLFFBQVEsQ0FBQztFQUV4QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VzQixXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckI7SUFDQSxLQUFLLENBQUVBLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQTtJQUNBLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUczQixJQUFJLENBQUM0QixNQUFNLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUNDLGNBQWMsR0FBRzdCLElBQUksQ0FBQzRCLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLElBQUksQ0FBQ0UsZUFBZSxHQUFHOUIsSUFBSSxDQUFDNEIsTUFBTSxDQUFDLENBQUM7O0lBRXBDO0lBQ0E7SUFDQSxJQUFJLENBQUNHLGlCQUFpQixHQUFHVixJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUFDOztJQUUzQztJQUNBLElBQUksQ0FBQ1UsT0FBTyxDQUFFLElBQUksQ0FBQ0wsZ0JBQWlCLENBQUM7SUFDckMsSUFBSSxDQUFDSyxPQUFPLENBQUUsSUFBSSxDQUFDSCxjQUFlLENBQUM7SUFDbkMsSUFBSSxDQUFDRyxPQUFPLENBQUUsSUFBSSxDQUFDRixlQUFnQixDQUFDOztJQUVwQztJQUNBO0lBQ0EsSUFBSyxJQUFJLENBQUNDLGlCQUFpQixFQUFHO01BQzVCLElBQUksQ0FBQ0UsYUFBYSxDQUFFLElBQUloQyxVQUFVLENBQUUsSUFBSSxDQUFDMEIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDRSxjQUFjLEVBQUU7UUFBRUssU0FBUyxFQUFFO01BQUUsQ0FBRSxDQUFFLENBQUM7TUFDcEcsSUFBSSxDQUFDRCxhQUFhLENBQUUsSUFBSWhDLFVBQVUsQ0FBRSxJQUFJLENBQUMwQixnQkFBZ0IsRUFBRSxJQUFJLENBQUNHLGVBQWUsRUFBRTtRQUFFSSxTQUFTLEVBQUU7TUFBRSxDQUFFLENBQUUsQ0FBQztJQUN2RyxDQUFDLE1BQ0k7TUFDSCxJQUFJLENBQUNELGFBQWEsQ0FBRSxJQUFJaEMsVUFBVSxDQUFFLElBQUksQ0FBQzBCLGdCQUFnQixFQUFFLElBQUksQ0FBQ0UsY0FBYyxFQUFFO1FBQUVLLFNBQVMsRUFBRTtNQUFFLENBQUUsQ0FBRSxDQUFDO01BQ3BHLElBQUksQ0FBQ0QsYUFBYSxDQUFFLElBQUloQyxVQUFVLENBQUUsSUFBSSxDQUFDMEIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDRyxlQUFlLEVBQUU7UUFBRUksU0FBUyxFQUFFO01BQUUsQ0FBRSxDQUFFLENBQUM7SUFDdkc7O0lBRUE7SUFDQSxJQUFJLENBQUNDLDJCQUEyQixDQUFFN0IsbUJBQW1CLENBQUM4QixnQkFBZ0IsRUFBRSxJQUFJaEMsZ0JBQWdCLENBQUUsSUFBSyxDQUFFLENBQUM7SUFDdEcsSUFBSSxDQUFDK0IsMkJBQTJCLENBQUU3QixtQkFBbUIsQ0FBQytCLGFBQWEsRUFBRSxJQUFJaEMsaUJBQWlCLENBQUUsSUFBSyxDQUFFLENBQUM7SUFDcEcsSUFBSSxDQUFDOEIsMkJBQTJCLENBQUU3QixtQkFBbUIsQ0FBQ2dDLGFBQWEsRUFBRSxJQUFJcEMsa0JBQWtCLENBQUUsSUFBSyxDQUFFLENBQUM7O0lBRXJHO0lBQ0EsSUFBSSxDQUFDcUMscUJBQXFCLENBQUMsQ0FBQztFQUM5Qjs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VBLHFCQUFxQkEsQ0FBQSxFQUFHO0lBRXRCLElBQUksQ0FBQ0MsdUJBQXVCLENBQUUsSUFBSSxDQUFDYixnQkFBZ0IsRUFBRSxJQUFJN0IsT0FBTyxDQUFFLENBQUMsRUFBRW1CLHFDQUFzQyxDQUFFLENBQUM7SUFDOUcsSUFBSSxDQUFDdUIsdUJBQXVCLENBQUUsSUFBSSxDQUFDWCxjQUFjLEVBQUUsSUFBSS9CLE9BQU8sQ0FBRSxDQUFDcUIsZ0NBQWdDLEVBQUVELDhCQUErQixDQUFFLENBQUM7SUFDckksSUFBSSxDQUFDc0IsdUJBQXVCLENBQUUsSUFBSSxDQUFDVixlQUFlLEVBQUUsSUFBSWhDLE9BQU8sQ0FBRXFCLGdDQUFnQyxFQUFFRCw4QkFBK0IsQ0FBRSxDQUFDO0lBRXJJLElBQUksQ0FBQ3VCLG1CQUFtQixDQUFDLENBQUM7RUFFNUI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsWUFBWUEsQ0FBRUMsZ0JBQWdCLEVBQUc7SUFFL0IsSUFBSSxDQUFDQywrQkFBK0IsQ0FBQ0MsR0FBRyxDQUFFRixnQkFBaUIsQ0FBQztJQUM1RCxNQUFNRyxVQUFVLEdBQUduQyxJQUFJLENBQUNLLEdBQUcsQ0FBRTJCLGdCQUFpQixDQUFDO0lBQy9DLE1BQU1JLDJCQUEyQixHQUFHLEVBQUU7SUFDdEMsTUFBTUMsMEJBQTBCLEdBQUcsRUFBRTtJQUNyQyxJQUFJLENBQUNDLHNCQUFzQixDQUFFLElBQUksQ0FBQ3RCLGdCQUFpQixDQUFDLENBQUN1QixLQUFLLENBQUUsQ0FBQyxFQUFFSixVQUFVLEdBQUdDLDJCQUE0QixDQUFDO0lBQ3pHLElBQUksQ0FBQ0Usc0JBQXNCLENBQUUsSUFBSSxDQUFDbkIsZUFBZ0IsQ0FBQyxDQUFDb0IsS0FBSyxDQUFFLENBQUNKLFVBQVUsR0FBR0UsMEJBQTBCLEVBQUUsQ0FBQ0YsVUFBVSxHQUFHRSwwQkFBMkIsQ0FBQztJQUMvSSxJQUFJLENBQUNDLHNCQUFzQixDQUFFLElBQUksQ0FBQ3BCLGNBQWUsQ0FBQyxDQUFDcUIsS0FBSyxDQUFFSixVQUFVLEdBQUdFLDBCQUEwQixFQUFFLENBQUNGLFVBQVUsR0FBR0UsMEJBQTJCLENBQUM7SUFDN0ksSUFBSSxDQUFDUCxtQkFBbUIsQ0FBQyxDQUFDO0VBRTVCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VVLFVBQVVBLENBQUEsRUFBRztJQUVYO0lBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsSUFBSTVDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU02QyxvQkFBb0IsR0FBRyxJQUFJOUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsSUFBSSxDQUFDK0MsaUJBQWlCLENBQUNDLElBQUksQ0FBRUgsc0JBQXNCLEVBQUVDLG9CQUFxQixDQUFDOztJQUUzRTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsTUFBTUcsNkJBQTZCLEdBQU83QyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDLEdBQU9GLGtDQUFrQyxHQUFHLENBQUs7SUFDdEcsSUFBSStDLGVBQWU7SUFDbkIsSUFBSyxJQUFJLENBQUMxQixpQkFBaUIsRUFBRztNQUM1QnFCLHNCQUFzQixDQUFDTSxNQUFNLENBQUUsQ0FBQ0YsNkJBQThCLENBQUM7TUFDL0RKLHNCQUFzQixDQUFDTyxxQkFBcUIsQ0FBRSxDQUFFLElBQUksQ0FBQ0MsdUJBQXVCLENBQUUsSUFBSSxDQUFDOUIsZUFBZ0IsQ0FBQyxDQUFDK0IsQ0FBQyxHQUFHLElBQUksQ0FBQ0QsdUJBQXVCLENBQUUsSUFBSSxDQUFDakMsZ0JBQWlCLENBQUMsQ0FBQ2tDLENBQUMsSUFBSyxDQUFDLEVBQ3BLLENBQUUsSUFBSSxDQUFDRCx1QkFBdUIsQ0FBRSxJQUFJLENBQUNqQyxnQkFBaUIsQ0FBQyxDQUFDbUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0YsdUJBQXVCLENBQUUsSUFBSSxDQUFDOUIsZUFBZ0IsQ0FBQyxDQUFDZ0MsQ0FBQyxJQUFLLENBQUUsQ0FBQztNQUM1SEwsZUFBZSxHQUFHOUMsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxHQUFHZixTQUFTLENBQUMwQixVQUFVLENBQUMsQ0FBQyxHQUFHWixJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDO01BQ3BFeUMsb0JBQW9CLENBQUNNLHFCQUFxQixDQUFFLENBQUN4QyxnQ0FBZ0MsRUFBRUQsOEJBQStCLENBQUM7SUFDakgsQ0FBQyxNQUNJO01BQ0hrQyxzQkFBc0IsQ0FBQ00sTUFBTSxDQUFFRiw2QkFBOEIsQ0FBQztNQUM5REMsZUFBZSxHQUFHOUMsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxHQUFHZixTQUFTLENBQUMwQixVQUFVLENBQUMsQ0FBQyxHQUFHWixJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDO01BQ3BFd0Msc0JBQXNCLENBQUNPLHFCQUFxQixDQUFFLENBQUUsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBRSxJQUFJLENBQUMvQixjQUFlLENBQUMsQ0FBQ2dDLENBQUMsR0FBRyxJQUFJLENBQUNELHVCQUF1QixDQUFFLElBQUksQ0FBQ2pDLGdCQUFpQixDQUFDLENBQUNrQyxDQUFDLElBQUssQ0FBQyxFQUNuSyxDQUFFLElBQUksQ0FBQ0QsdUJBQXVCLENBQUUsSUFBSSxDQUFDL0IsY0FBZSxDQUFDLENBQUNpQyxDQUFDLEdBQUcsSUFBSSxDQUFDRix1QkFBdUIsQ0FBRSxJQUFJLENBQUNqQyxnQkFBaUIsQ0FBQyxDQUFDbUMsQ0FBQyxJQUFLLENBQUUsQ0FBQztNQUMzSFQsb0JBQW9CLENBQUNNLHFCQUFxQixDQUFFeEMsZ0NBQWdDLEVBQUVELDhCQUErQixDQUFDO0lBQ2hIO0lBQ0FrQyxzQkFBc0IsQ0FBQ1csUUFBUSxDQUFDbEIsR0FBRyxDQUNqQyxJQUFJL0MsT0FBTyxDQUFFc0Isb0JBQW9CLEdBQUcsSUFBSSxHQUFHVCxJQUFJLENBQUNHLEdBQUcsQ0FBRTJDLGVBQWdCLENBQUMsRUFDcEVyQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUdULElBQUksQ0FBQ0ssR0FBRyxDQUFFeUMsZUFBZ0IsQ0FBRSxDQUM5RCxDQUFDO0lBQ0RKLG9CQUFvQixDQUFDVSxRQUFRLENBQUNsQixHQUFHLENBQy9CLElBQUkvQyxPQUFPLENBQUUsQ0FBQ3NCLG9CQUFvQixHQUFHLElBQUksR0FBR1QsSUFBSSxDQUFDRyxHQUFHLENBQUUyQyxlQUFnQixDQUFDLEVBQ3JFLENBQUNyQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUdULElBQUksQ0FBQ0ssR0FBRyxDQUFFeUMsZUFBZ0IsQ0FBRSxDQUMvRCxDQUFDO0VBQ0g7QUFDRjtBQUVBMUQsZ0JBQWdCLENBQUNpRSxRQUFRLENBQUUsSUFBSSxFQUFFeEMsRUFBRyxDQUFDO0FBRXJDLGVBQWVBLEVBQUUifQ==