// Copyright 2021, University of Colorado Boulder

/**
 * Class that represents NO ( nitrogen monoxide ) in the model.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import greenhouseEffect from '../../../greenhouseEffect.js';
import Atom from '../atoms/Atom.js';
import AtomicBond from '../atoms/AtomicBond.js';
import Molecule from '../Molecule.js';

// Model Data for the nitrogen monoxide molecule.
const INITIAL_NITROGEN_OXYGEN_DISTANCE = 170; // In picometers.

class NO extends Molecule {
  /**
   * Constructor for a nitrogen monoxide molecule.
   *
   * @param {Object} [options]
   */
  constructor(options) {
    // Supertype constructor
    super(options);

    // Instance Data
    // @private
    this.nitrogenAtom = Atom.nitrogen();
    this.oxygenAtom = Atom.oxygen();

    // Configure the base class.
    this.addAtom(this.nitrogenAtom);
    this.addAtom(this.oxygenAtom);
    this.addAtomicBond(new AtomicBond(this.nitrogenAtom, this.oxygenAtom, {
      bondCount: 2
    }));

    // Set up the photon wavelengths to absorb.

    // Set the initial offsets.
    this.initializeAtomOffsets();
  }

  /**
   * Initialize and set the COG positions for each atom which compose this NO molecule.
   * @private
   */
  initializeAtomOffsets() {
    this.addInitialAtomCogOffset(this.nitrogenAtom, new Vector2(-INITIAL_NITROGEN_OXYGEN_DISTANCE / 2, 0));
    this.addInitialAtomCogOffset(this.oxygenAtom, new Vector2(INITIAL_NITROGEN_OXYGEN_DISTANCE / 2, 0));
    this.updateAtomPositions();
  }
}
greenhouseEffect.register('NO', NO);
export default NO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkF0b20iLCJBdG9taWNCb25kIiwiTW9sZWN1bGUiLCJJTklUSUFMX05JVFJPR0VOX09YWUdFTl9ESVNUQU5DRSIsIk5PIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibml0cm9nZW5BdG9tIiwibml0cm9nZW4iLCJveHlnZW5BdG9tIiwib3h5Z2VuIiwiYWRkQXRvbSIsImFkZEF0b21pY0JvbmQiLCJib25kQ291bnQiLCJpbml0aWFsaXplQXRvbU9mZnNldHMiLCJhZGRJbml0aWFsQXRvbUNvZ09mZnNldCIsInVwZGF0ZUF0b21Qb3NpdGlvbnMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk5PLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB0aGF0IHJlcHJlc2VudHMgTk8gKCBuaXRyb2dlbiBtb25veGlkZSApIGluIHRoZSBtb2RlbC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBBdG9tIGZyb20gJy4uL2F0b21zL0F0b20uanMnO1xyXG5pbXBvcnQgQXRvbWljQm9uZCBmcm9tICcuLi9hdG9tcy9BdG9taWNCb25kLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4uL01vbGVjdWxlLmpzJztcclxuXHJcbi8vIE1vZGVsIERhdGEgZm9yIHRoZSBuaXRyb2dlbiBtb25veGlkZSBtb2xlY3VsZS5cclxuY29uc3QgSU5JVElBTF9OSVRST0dFTl9PWFlHRU5fRElTVEFOQ0UgPSAxNzA7IC8vIEluIHBpY29tZXRlcnMuXHJcblxyXG5jbGFzcyBOTyBleHRlbmRzIE1vbGVjdWxlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IgZm9yIGEgbml0cm9nZW4gbW9ub3hpZGUgbW9sZWN1bGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gU3VwZXJ0eXBlIGNvbnN0cnVjdG9yXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEluc3RhbmNlIERhdGFcclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLm5pdHJvZ2VuQXRvbSA9IEF0b20ubml0cm9nZW4oKTtcclxuICAgIHRoaXMub3h5Z2VuQXRvbSA9IEF0b20ub3h5Z2VuKCk7XHJcblxyXG4gICAgLy8gQ29uZmlndXJlIHRoZSBiYXNlIGNsYXNzLlxyXG4gICAgdGhpcy5hZGRBdG9tKCB0aGlzLm5pdHJvZ2VuQXRvbSApO1xyXG4gICAgdGhpcy5hZGRBdG9tKCB0aGlzLm94eWdlbkF0b20gKTtcclxuICAgIHRoaXMuYWRkQXRvbWljQm9uZCggbmV3IEF0b21pY0JvbmQoIHRoaXMubml0cm9nZW5BdG9tLCB0aGlzLm94eWdlbkF0b20sIHsgYm9uZENvdW50OiAyIH0gKSApO1xyXG5cclxuICAgIC8vIFNldCB1cCB0aGUgcGhvdG9uIHdhdmVsZW5ndGhzIHRvIGFic29yYi5cclxuXHJcbiAgICAvLyBTZXQgdGhlIGluaXRpYWwgb2Zmc2V0cy5cclxuICAgIHRoaXMuaW5pdGlhbGl6ZUF0b21PZmZzZXRzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIGFuZCBzZXQgdGhlIENPRyBwb3NpdGlvbnMgZm9yIGVhY2ggYXRvbSB3aGljaCBjb21wb3NlIHRoaXMgTk8gbW9sZWN1bGUuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBpbml0aWFsaXplQXRvbU9mZnNldHMoKSB7XHJcblxyXG4gICAgdGhpcy5hZGRJbml0aWFsQXRvbUNvZ09mZnNldCggdGhpcy5uaXRyb2dlbkF0b20sIG5ldyBWZWN0b3IyKCAtSU5JVElBTF9OSVRST0dFTl9PWFlHRU5fRElTVEFOQ0UgLyAyLCAwICkgKTtcclxuICAgIHRoaXMuYWRkSW5pdGlhbEF0b21Db2dPZmZzZXQoIHRoaXMub3h5Z2VuQXRvbSwgbmV3IFZlY3RvcjIoIElOSVRJQUxfTklUUk9HRU5fT1hZR0VOX0RJU1RBTkNFIC8gMiwgMCApICk7XHJcbiAgICB0aGlzLnVwZGF0ZUF0b21Qb3NpdGlvbnMoKTtcclxuXHJcbiAgfVxyXG59XHJcblxyXG5ncmVlbmhvdXNlRWZmZWN0LnJlZ2lzdGVyKCAnTk8nLCBOTyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTk87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLGtDQUFrQztBQUN0RCxPQUFPQyxnQkFBZ0IsTUFBTSw4QkFBOEI7QUFDM0QsT0FBT0MsSUFBSSxNQUFNLGtCQUFrQjtBQUNuQyxPQUFPQyxVQUFVLE1BQU0sd0JBQXdCO0FBQy9DLE9BQU9DLFFBQVEsTUFBTSxnQkFBZ0I7O0FBRXJDO0FBQ0EsTUFBTUMsZ0NBQWdDLEdBQUcsR0FBRyxDQUFDLENBQUM7O0FBRTlDLE1BQU1DLEVBQUUsU0FBU0YsUUFBUSxDQUFDO0VBRXhCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsT0FBTyxFQUFHO0lBRXJCO0lBQ0EsS0FBSyxDQUFFQSxPQUFRLENBQUM7O0lBRWhCO0lBQ0E7SUFDQSxJQUFJLENBQUNDLFlBQVksR0FBR1AsSUFBSSxDQUFDUSxRQUFRLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUNDLFVBQVUsR0FBR1QsSUFBSSxDQUFDVSxNQUFNLENBQUMsQ0FBQzs7SUFFL0I7SUFDQSxJQUFJLENBQUNDLE9BQU8sQ0FBRSxJQUFJLENBQUNKLFlBQWEsQ0FBQztJQUNqQyxJQUFJLENBQUNJLE9BQU8sQ0FBRSxJQUFJLENBQUNGLFVBQVcsQ0FBQztJQUMvQixJQUFJLENBQUNHLGFBQWEsQ0FBRSxJQUFJWCxVQUFVLENBQUUsSUFBSSxDQUFDTSxZQUFZLEVBQUUsSUFBSSxDQUFDRSxVQUFVLEVBQUU7TUFBRUksU0FBUyxFQUFFO0lBQUUsQ0FBRSxDQUFFLENBQUM7O0lBRTVGOztJQUVBO0lBQ0EsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQyxDQUFDO0VBQzlCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VBLHFCQUFxQkEsQ0FBQSxFQUFHO0lBRXRCLElBQUksQ0FBQ0MsdUJBQXVCLENBQUUsSUFBSSxDQUFDUixZQUFZLEVBQUUsSUFBSVQsT0FBTyxDQUFFLENBQUNLLGdDQUFnQyxHQUFHLENBQUMsRUFBRSxDQUFFLENBQUUsQ0FBQztJQUMxRyxJQUFJLENBQUNZLHVCQUF1QixDQUFFLElBQUksQ0FBQ04sVUFBVSxFQUFFLElBQUlYLE9BQU8sQ0FBRUssZ0NBQWdDLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQ3ZHLElBQUksQ0FBQ2EsbUJBQW1CLENBQUMsQ0FBQztFQUU1QjtBQUNGO0FBRUFqQixnQkFBZ0IsQ0FBQ2tCLFFBQVEsQ0FBRSxJQUFJLEVBQUViLEVBQUcsQ0FBQztBQUVyQyxlQUFlQSxFQUFFIn0=