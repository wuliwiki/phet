// Copyright 2021, University of Colorado Boulder

/**
 * Class that represents N2 ( nitrogen ) in the model.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import greenhouseEffect from '../../../greenhouseEffect.js';
import Atom from '../atoms/Atom.js';
import AtomicBond from '../atoms/AtomicBond.js';
import Molecule from '../Molecule.js';

// Model data for nitrogen molecule
const INITIAL_NITROGEN_NITROGEN_DISTANCE = 170; // In picometers.

class N2 extends Molecule {
  /**
   * Constructor for a molecule of nitrogen.
   *
   * @param {Object} [options]
   */
  constructor(options) {
    // Supertype constructor
    super(options);

    // Instance data for the nitrogen molecule
    // @private
    this.nitrogenAtom1 = Atom.nitrogen();
    this.nitrogenAtom2 = Atom.nitrogen();

    // Configure the base class.
    this.addAtom(this.nitrogenAtom1);
    this.addAtom(this.nitrogenAtom2);
    this.addAtomicBond(new AtomicBond(this.nitrogenAtom1, this.nitrogenAtom2, {
      bondCount: 3
    }));

    // Set the initial offsets
    this.initializeAtomOffsets();
  }

  /**
   * Initialize and set the center of gravity offsets for the nitrogen atoms which compose this molecule.
   * @private
   */
  initializeAtomOffsets() {
    this.addInitialAtomCogOffset(this.nitrogenAtom1, new Vector2(-INITIAL_NITROGEN_NITROGEN_DISTANCE / 2, 0));
    this.addInitialAtomCogOffset(this.nitrogenAtom2, new Vector2(INITIAL_NITROGEN_NITROGEN_DISTANCE / 2, 0));
    this.updateAtomPositions();
  }
}
greenhouseEffect.register('N2', N2);
export default N2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkF0b20iLCJBdG9taWNCb25kIiwiTW9sZWN1bGUiLCJJTklUSUFMX05JVFJPR0VOX05JVFJPR0VOX0RJU1RBTkNFIiwiTjIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJuaXRyb2dlbkF0b20xIiwibml0cm9nZW4iLCJuaXRyb2dlbkF0b20yIiwiYWRkQXRvbSIsImFkZEF0b21pY0JvbmQiLCJib25kQ291bnQiLCJpbml0aWFsaXplQXRvbU9mZnNldHMiLCJhZGRJbml0aWFsQXRvbUNvZ09mZnNldCIsInVwZGF0ZUF0b21Qb3NpdGlvbnMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk4yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB0aGF0IHJlcHJlc2VudHMgTjIgKCBuaXRyb2dlbiApIGluIHRoZSBtb2RlbC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBBdG9tIGZyb20gJy4uL2F0b21zL0F0b20uanMnO1xyXG5pbXBvcnQgQXRvbWljQm9uZCBmcm9tICcuLi9hdG9tcy9BdG9taWNCb25kLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4uL01vbGVjdWxlLmpzJztcclxuXHJcbi8vIE1vZGVsIGRhdGEgZm9yIG5pdHJvZ2VuIG1vbGVjdWxlXHJcbmNvbnN0IElOSVRJQUxfTklUUk9HRU5fTklUUk9HRU5fRElTVEFOQ0UgPSAxNzA7IC8vIEluIHBpY29tZXRlcnMuXHJcblxyXG5jbGFzcyBOMiBleHRlbmRzIE1vbGVjdWxlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IgZm9yIGEgbW9sZWN1bGUgb2Ygbml0cm9nZW4uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gU3VwZXJ0eXBlIGNvbnN0cnVjdG9yXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEluc3RhbmNlIGRhdGEgZm9yIHRoZSBuaXRyb2dlbiBtb2xlY3VsZVxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMubml0cm9nZW5BdG9tMSA9IEF0b20ubml0cm9nZW4oKTtcclxuICAgIHRoaXMubml0cm9nZW5BdG9tMiA9IEF0b20ubml0cm9nZW4oKTtcclxuXHJcbiAgICAvLyBDb25maWd1cmUgdGhlIGJhc2UgY2xhc3MuXHJcbiAgICB0aGlzLmFkZEF0b20oIHRoaXMubml0cm9nZW5BdG9tMSApO1xyXG4gICAgdGhpcy5hZGRBdG9tKCB0aGlzLm5pdHJvZ2VuQXRvbTIgKTtcclxuICAgIHRoaXMuYWRkQXRvbWljQm9uZCggbmV3IEF0b21pY0JvbmQoIHRoaXMubml0cm9nZW5BdG9tMSwgdGhpcy5uaXRyb2dlbkF0b20yLCB7IGJvbmRDb3VudDogMyB9ICkgKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGluaXRpYWwgb2Zmc2V0c1xyXG4gICAgdGhpcy5pbml0aWFsaXplQXRvbU9mZnNldHMoKTtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBhbmQgc2V0IHRoZSBjZW50ZXIgb2YgZ3Jhdml0eSBvZmZzZXRzIGZvciB0aGUgbml0cm9nZW4gYXRvbXMgd2hpY2ggY29tcG9zZSB0aGlzIG1vbGVjdWxlLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgaW5pdGlhbGl6ZUF0b21PZmZzZXRzKCkge1xyXG5cclxuICAgIHRoaXMuYWRkSW5pdGlhbEF0b21Db2dPZmZzZXQoIHRoaXMubml0cm9nZW5BdG9tMSwgbmV3IFZlY3RvcjIoIC1JTklUSUFMX05JVFJPR0VOX05JVFJPR0VOX0RJU1RBTkNFIC8gMiwgMCApICk7XHJcbiAgICB0aGlzLmFkZEluaXRpYWxBdG9tQ29nT2Zmc2V0KCB0aGlzLm5pdHJvZ2VuQXRvbTIsIG5ldyBWZWN0b3IyKCBJTklUSUFMX05JVFJPR0VOX05JVFJPR0VOX0RJU1RBTkNFIC8gMiwgMCApICk7XHJcbiAgICB0aGlzLnVwZGF0ZUF0b21Qb3NpdGlvbnMoKTtcclxuXHJcbiAgfVxyXG59XHJcblxyXG5ncmVlbmhvdXNlRWZmZWN0LnJlZ2lzdGVyKCAnTjInLCBOMiApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTjI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLGtDQUFrQztBQUN0RCxPQUFPQyxnQkFBZ0IsTUFBTSw4QkFBOEI7QUFDM0QsT0FBT0MsSUFBSSxNQUFNLGtCQUFrQjtBQUNuQyxPQUFPQyxVQUFVLE1BQU0sd0JBQXdCO0FBQy9DLE9BQU9DLFFBQVEsTUFBTSxnQkFBZ0I7O0FBRXJDO0FBQ0EsTUFBTUMsa0NBQWtDLEdBQUcsR0FBRyxDQUFDLENBQUM7O0FBRWhELE1BQU1DLEVBQUUsU0FBU0YsUUFBUSxDQUFDO0VBRXhCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsT0FBTyxFQUFHO0lBRXJCO0lBQ0EsS0FBSyxDQUFFQSxPQUFRLENBQUM7O0lBRWhCO0lBQ0E7SUFDQSxJQUFJLENBQUNDLGFBQWEsR0FBR1AsSUFBSSxDQUFDUSxRQUFRLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUNDLGFBQWEsR0FBR1QsSUFBSSxDQUFDUSxRQUFRLENBQUMsQ0FBQzs7SUFFcEM7SUFDQSxJQUFJLENBQUNFLE9BQU8sQ0FBRSxJQUFJLENBQUNILGFBQWMsQ0FBQztJQUNsQyxJQUFJLENBQUNHLE9BQU8sQ0FBRSxJQUFJLENBQUNELGFBQWMsQ0FBQztJQUNsQyxJQUFJLENBQUNFLGFBQWEsQ0FBRSxJQUFJVixVQUFVLENBQUUsSUFBSSxDQUFDTSxhQUFhLEVBQUUsSUFBSSxDQUFDRSxhQUFhLEVBQUU7TUFBRUcsU0FBUyxFQUFFO0lBQUUsQ0FBRSxDQUFFLENBQUM7O0lBRWhHO0lBQ0EsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQyxDQUFDO0VBRTlCOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VBLHFCQUFxQkEsQ0FBQSxFQUFHO0lBRXRCLElBQUksQ0FBQ0MsdUJBQXVCLENBQUUsSUFBSSxDQUFDUCxhQUFhLEVBQUUsSUFBSVQsT0FBTyxDQUFFLENBQUNLLGtDQUFrQyxHQUFHLENBQUMsRUFBRSxDQUFFLENBQUUsQ0FBQztJQUM3RyxJQUFJLENBQUNXLHVCQUF1QixDQUFFLElBQUksQ0FBQ0wsYUFBYSxFQUFFLElBQUlYLE9BQU8sQ0FBRUssa0NBQWtDLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQzVHLElBQUksQ0FBQ1ksbUJBQW1CLENBQUMsQ0FBQztFQUU1QjtBQUNGO0FBRUFoQixnQkFBZ0IsQ0FBQ2lCLFFBQVEsQ0FBRSxJQUFJLEVBQUVaLEVBQUcsQ0FBQztBQUVyQyxlQUFlQSxFQUFFIn0=