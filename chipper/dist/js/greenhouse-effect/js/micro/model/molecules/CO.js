// Copyright 2021, University of Colorado Boulder

/**
 * Class that represents CO ( carbon monoxide ) in the model.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import greenhouseEffect from '../../../greenhouseEffect.js';
import Atom from '../atoms/Atom.js';
import AtomicBond from '../atoms/AtomicBond.js';
import Molecule from '../Molecule.js';
import RotationStrategy from '../RotationStrategy.js';
import VibrationStrategy from '../VibrationStrategy.js';
import WavelengthConstants from '../WavelengthConstants.js';

// Model Data for the carbon monoxide molecule
const INITIAL_CARBON_OXYGEN_DISTANCE = 170; // In picometers.
const VIBRATION_MAGNITUDE = 20; // In picometers.

class CO extends Molecule {
  /**
   * Constructor for a carbon monoxide molecule.
   *
   * @param {Object} [options]
   */
  constructor(options) {
    // Supertype constructor
    super(options);

    // @private
    this.carbonAtom = Atom.carbon();
    this.oxygenAtom = Atom.oxygen();

    // Configure the base class.
    this.addAtom(this.carbonAtom);
    this.addAtom(this.oxygenAtom);
    this.addAtomicBond(new AtomicBond(this.carbonAtom, this.oxygenAtom, {
      bondCount: 3
    }));

    // Set up the photon wavelengths to absorb
    this.setPhotonAbsorptionStrategy(WavelengthConstants.MICRO_WAVELENGTH, new RotationStrategy(this));
    this.setPhotonAbsorptionStrategy(WavelengthConstants.IR_WAVELENGTH, new VibrationStrategy(this));

    // Set the initial offsets.
    this.initializeAtomOffsets();
  }

  /**
   * Define vibration behavior of carbon monoxide.  Set the current angle of vibration,
   * get the vibration offsets, and update the atom positions.
   * @public
   *
   * @param {number} vibrationRadians - Where this molecule is in its vibration cycle in radians.
   */
  setVibration(vibrationRadians) {
    this.currentVibrationRadiansProperty.set(vibrationRadians);
    const multFactor = Math.sin(vibrationRadians);
    this.getVibrationAtomOffset(this.carbonAtom).setXY(VIBRATION_MAGNITUDE * multFactor, 0);
    this.getVibrationAtomOffset(this.oxygenAtom).setXY(-VIBRATION_MAGNITUDE * multFactor, 0);
    this.updateAtomPositions();
  }

  /**
   * Initialize the atom offsets for the carbon and oxygen atoms which compose this molecule.
   * @private
   */
  initializeAtomOffsets() {
    this.addInitialAtomCogOffset(this.carbonAtom, new Vector2(-INITIAL_CARBON_OXYGEN_DISTANCE / 2, 0));
    this.addInitialAtomCogOffset(this.oxygenAtom, new Vector2(INITIAL_CARBON_OXYGEN_DISTANCE / 2, 0));
    this.updateAtomPositions();
  }
}
greenhouseEffect.register('CO', CO);
export default CO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZ3JlZW5ob3VzZUVmZmVjdCIsIkF0b20iLCJBdG9taWNCb25kIiwiTW9sZWN1bGUiLCJSb3RhdGlvblN0cmF0ZWd5IiwiVmlicmF0aW9uU3RyYXRlZ3kiLCJXYXZlbGVuZ3RoQ29uc3RhbnRzIiwiSU5JVElBTF9DQVJCT05fT1hZR0VOX0RJU1RBTkNFIiwiVklCUkFUSU9OX01BR05JVFVERSIsIkNPIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiY2FyYm9uQXRvbSIsImNhcmJvbiIsIm94eWdlbkF0b20iLCJveHlnZW4iLCJhZGRBdG9tIiwiYWRkQXRvbWljQm9uZCIsImJvbmRDb3VudCIsInNldFBob3RvbkFic29ycHRpb25TdHJhdGVneSIsIk1JQ1JPX1dBVkVMRU5HVEgiLCJJUl9XQVZFTEVOR1RIIiwiaW5pdGlhbGl6ZUF0b21PZmZzZXRzIiwic2V0VmlicmF0aW9uIiwidmlicmF0aW9uUmFkaWFucyIsImN1cnJlbnRWaWJyYXRpb25SYWRpYW5zUHJvcGVydHkiLCJzZXQiLCJtdWx0RmFjdG9yIiwiTWF0aCIsInNpbiIsImdldFZpYnJhdGlvbkF0b21PZmZzZXQiLCJzZXRYWSIsInVwZGF0ZUF0b21Qb3NpdGlvbnMiLCJhZGRJbml0aWFsQXRvbUNvZ09mZnNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ08uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENsYXNzIHRoYXQgcmVwcmVzZW50cyBDTyAoIGNhcmJvbiBtb25veGlkZSApIGluIHRoZSBtb2RlbC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IGdyZWVuaG91c2VFZmZlY3QgZnJvbSAnLi4vLi4vLi4vZ3JlZW5ob3VzZUVmZmVjdC5qcyc7XHJcbmltcG9ydCBBdG9tIGZyb20gJy4uL2F0b21zL0F0b20uanMnO1xyXG5pbXBvcnQgQXRvbWljQm9uZCBmcm9tICcuLi9hdG9tcy9BdG9taWNCb25kLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4uL01vbGVjdWxlLmpzJztcclxuaW1wb3J0IFJvdGF0aW9uU3RyYXRlZ3kgZnJvbSAnLi4vUm90YXRpb25TdHJhdGVneS5qcyc7XHJcbmltcG9ydCBWaWJyYXRpb25TdHJhdGVneSBmcm9tICcuLi9WaWJyYXRpb25TdHJhdGVneS5qcyc7XHJcbmltcG9ydCBXYXZlbGVuZ3RoQ29uc3RhbnRzIGZyb20gJy4uL1dhdmVsZW5ndGhDb25zdGFudHMuanMnO1xyXG5cclxuLy8gTW9kZWwgRGF0YSBmb3IgdGhlIGNhcmJvbiBtb25veGlkZSBtb2xlY3VsZVxyXG5jb25zdCBJTklUSUFMX0NBUkJPTl9PWFlHRU5fRElTVEFOQ0UgPSAxNzA7IC8vIEluIHBpY29tZXRlcnMuXHJcbmNvbnN0IFZJQlJBVElPTl9NQUdOSVRVREUgPSAyMDsgLy8gSW4gcGljb21ldGVycy5cclxuXHJcbmNsYXNzIENPIGV4dGVuZHMgTW9sZWN1bGUge1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvciBmb3IgYSBjYXJib24gbW9ub3hpZGUgbW9sZWN1bGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gU3VwZXJ0eXBlIGNvbnN0cnVjdG9yXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLmNhcmJvbkF0b20gPSBBdG9tLmNhcmJvbigpO1xyXG4gICAgdGhpcy5veHlnZW5BdG9tID0gQXRvbS5veHlnZW4oKTtcclxuXHJcbiAgICAvLyBDb25maWd1cmUgdGhlIGJhc2UgY2xhc3MuXHJcbiAgICB0aGlzLmFkZEF0b20oIHRoaXMuY2FyYm9uQXRvbSApO1xyXG4gICAgdGhpcy5hZGRBdG9tKCB0aGlzLm94eWdlbkF0b20gKTtcclxuICAgIHRoaXMuYWRkQXRvbWljQm9uZCggbmV3IEF0b21pY0JvbmQoIHRoaXMuY2FyYm9uQXRvbSwgdGhpcy5veHlnZW5BdG9tLCB7IGJvbmRDb3VudDogMyB9ICkgKTtcclxuXHJcbiAgICAvLyBTZXQgdXAgdGhlIHBob3RvbiB3YXZlbGVuZ3RocyB0byBhYnNvcmJcclxuICAgIHRoaXMuc2V0UGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5KCBXYXZlbGVuZ3RoQ29uc3RhbnRzLk1JQ1JPX1dBVkVMRU5HVEgsIG5ldyBSb3RhdGlvblN0cmF0ZWd5KCB0aGlzICkgKTtcclxuICAgIHRoaXMuc2V0UGhvdG9uQWJzb3JwdGlvblN0cmF0ZWd5KCBXYXZlbGVuZ3RoQ29uc3RhbnRzLklSX1dBVkVMRU5HVEgsIG5ldyBWaWJyYXRpb25TdHJhdGVneSggdGhpcyApICk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSBpbml0aWFsIG9mZnNldHMuXHJcbiAgICB0aGlzLmluaXRpYWxpemVBdG9tT2Zmc2V0cygpO1xyXG5cclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBEZWZpbmUgdmlicmF0aW9uIGJlaGF2aW9yIG9mIGNhcmJvbiBtb25veGlkZS4gIFNldCB0aGUgY3VycmVudCBhbmdsZSBvZiB2aWJyYXRpb24sXHJcbiAgICogZ2V0IHRoZSB2aWJyYXRpb24gb2Zmc2V0cywgYW5kIHVwZGF0ZSB0aGUgYXRvbSBwb3NpdGlvbnMuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZpYnJhdGlvblJhZGlhbnMgLSBXaGVyZSB0aGlzIG1vbGVjdWxlIGlzIGluIGl0cyB2aWJyYXRpb24gY3ljbGUgaW4gcmFkaWFucy5cclxuICAgKi9cclxuICBzZXRWaWJyYXRpb24oIHZpYnJhdGlvblJhZGlhbnMgKSB7XHJcblxyXG4gICAgdGhpcy5jdXJyZW50VmlicmF0aW9uUmFkaWFuc1Byb3BlcnR5LnNldCggdmlicmF0aW9uUmFkaWFucyApO1xyXG4gICAgY29uc3QgbXVsdEZhY3RvciA9IE1hdGguc2luKCB2aWJyYXRpb25SYWRpYW5zICk7XHJcbiAgICB0aGlzLmdldFZpYnJhdGlvbkF0b21PZmZzZXQoIHRoaXMuY2FyYm9uQXRvbSApLnNldFhZKCBWSUJSQVRJT05fTUFHTklUVURFICogbXVsdEZhY3RvciwgMCApO1xyXG4gICAgdGhpcy5nZXRWaWJyYXRpb25BdG9tT2Zmc2V0KCB0aGlzLm94eWdlbkF0b20gKS5zZXRYWSggLVZJQlJBVElPTl9NQUdOSVRVREUgKiBtdWx0RmFjdG9yLCAwICk7XHJcbiAgICB0aGlzLnVwZGF0ZUF0b21Qb3NpdGlvbnMoKTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBhdG9tIG9mZnNldHMgZm9yIHRoZSBjYXJib24gYW5kIG94eWdlbiBhdG9tcyB3aGljaCBjb21wb3NlIHRoaXMgbW9sZWN1bGUuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBpbml0aWFsaXplQXRvbU9mZnNldHMoKSB7XHJcblxyXG4gICAgdGhpcy5hZGRJbml0aWFsQXRvbUNvZ09mZnNldCggdGhpcy5jYXJib25BdG9tLCBuZXcgVmVjdG9yMiggLUlOSVRJQUxfQ0FSQk9OX09YWUdFTl9ESVNUQU5DRSAvIDIsIDAgKSApO1xyXG4gICAgdGhpcy5hZGRJbml0aWFsQXRvbUNvZ09mZnNldCggdGhpcy5veHlnZW5BdG9tLCBuZXcgVmVjdG9yMiggSU5JVElBTF9DQVJCT05fT1hZR0VOX0RJU1RBTkNFIC8gMiwgMCApICk7XHJcbiAgICB0aGlzLnVwZGF0ZUF0b21Qb3NpdGlvbnMoKTtcclxuICB9XHJcbn1cclxuXHJcbmdyZWVuaG91c2VFZmZlY3QucmVnaXN0ZXIoICdDTycsIENPICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDTzsi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