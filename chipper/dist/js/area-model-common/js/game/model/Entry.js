// Copyright 2017-2023, University of Colorado Boulder

/**
 * A logical entry whose value can be edited, and may be displayed in different ways.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Property from '../../../../axon/js/Property.js';
import merge from '../../../../phet-core/js/merge.js';
import areaModelCommon from '../../areaModelCommon.js';
import Term from '../../common/model/Term.js';
import EntryDisplayType from './EntryDisplayType.js';
import EntryStatus from './EntryStatus.js';
import EntryType from './EntryType.js';
import InputMethod from './InputMethod.js';
class Entry {
  /**
   * @param {Term|null} value - The initial value
   * @param {Object} [options]
   */
  constructor(value, options) {
    options = merge({
      type: EntryType.GIVEN,
      displayType: EntryDisplayType.HIDDEN,
      inputMethod: InputMethod.CONSTANT,
      numberOfDigits: 0,
      correctValue: null // Only used for the total coefficients
    }, options);

    // Always start off by editing null, and it should be the default value.
    if (options.displayType === EntryDisplayType.EDITABLE) {
      value = null;
    }

    // @public {Property.<Term|null>} - The current value of the entry
    this.valueProperty = new Property(value, {
      valueComparisonStrategy: 'equalsFunction',
      isValidValue: Term.isTermOrNull
    });

    // @public {EntryType} - Whether we are dynamic/editable/given.
    this.type = options.type;

    // @public {EntryDisplayType} - Whether we are a readout or editable/hidden
    this.displayType = options.displayType;

    // @public {InputMethod} - What format should be used if we are edited? (Need different keypads or a polynomial
    // input)
    this.inputMethod = options.inputMethod;

    // @public {number}
    this.digits = options.numberOfDigits;

    // @public {Property.<EntryStatus>}
    this.statusProperty = new Property(EntryStatus.DIRTY);

    // @public {Property.<Term|null>} - Our value, except for null if there is an error highlight
    this.nonErrorValueProperty = new DerivedProperty([this.valueProperty, this.statusProperty], (value, highlight) => highlight === EntryStatus.INCORRECT ? null : value);
  }
}
areaModelCommon.register('Entry', Entry);
export default Entry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJQcm9wZXJ0eSIsIm1lcmdlIiwiYXJlYU1vZGVsQ29tbW9uIiwiVGVybSIsIkVudHJ5RGlzcGxheVR5cGUiLCJFbnRyeVN0YXR1cyIsIkVudHJ5VHlwZSIsIklucHV0TWV0aG9kIiwiRW50cnkiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwib3B0aW9ucyIsInR5cGUiLCJHSVZFTiIsImRpc3BsYXlUeXBlIiwiSElEREVOIiwiaW5wdXRNZXRob2QiLCJDT05TVEFOVCIsIm51bWJlck9mRGlnaXRzIiwiY29ycmVjdFZhbHVlIiwiRURJVEFCTEUiLCJ2YWx1ZVByb3BlcnR5IiwidmFsdWVDb21wYXJpc29uU3RyYXRlZ3kiLCJpc1ZhbGlkVmFsdWUiLCJpc1Rlcm1Pck51bGwiLCJkaWdpdHMiLCJzdGF0dXNQcm9wZXJ0eSIsIkRJUlRZIiwibm9uRXJyb3JWYWx1ZVByb3BlcnR5IiwiaGlnaGxpZ2h0IiwiSU5DT1JSRUNUIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGxvZ2ljYWwgZW50cnkgd2hvc2UgdmFsdWUgY2FuIGJlIGVkaXRlZCwgYW5kIG1heSBiZSBkaXNwbGF5ZWQgaW4gZGlmZmVyZW50IHdheXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGFyZWFNb2RlbENvbW1vbiBmcm9tICcuLi8uLi9hcmVhTW9kZWxDb21tb24uanMnO1xyXG5pbXBvcnQgVGVybSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVGVybS5qcyc7XHJcbmltcG9ydCBFbnRyeURpc3BsYXlUeXBlIGZyb20gJy4vRW50cnlEaXNwbGF5VHlwZS5qcyc7XHJcbmltcG9ydCBFbnRyeVN0YXR1cyBmcm9tICcuL0VudHJ5U3RhdHVzLmpzJztcclxuaW1wb3J0IEVudHJ5VHlwZSBmcm9tICcuL0VudHJ5VHlwZS5qcyc7XHJcbmltcG9ydCBJbnB1dE1ldGhvZCBmcm9tICcuL0lucHV0TWV0aG9kLmpzJztcclxuXHJcbmNsYXNzIEVudHJ5IHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Rlcm18bnVsbH0gdmFsdWUgLSBUaGUgaW5pdGlhbCB2YWx1ZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdmFsdWUsIG9wdGlvbnMgKSB7XHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgdHlwZTogRW50cnlUeXBlLkdJVkVOLFxyXG4gICAgICBkaXNwbGF5VHlwZTogRW50cnlEaXNwbGF5VHlwZS5ISURERU4sXHJcbiAgICAgIGlucHV0TWV0aG9kOiBJbnB1dE1ldGhvZC5DT05TVEFOVCxcclxuICAgICAgbnVtYmVyT2ZEaWdpdHM6IDAsXHJcbiAgICAgIGNvcnJlY3RWYWx1ZTogbnVsbCAvLyBPbmx5IHVzZWQgZm9yIHRoZSB0b3RhbCBjb2VmZmljaWVudHNcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBBbHdheXMgc3RhcnQgb2ZmIGJ5IGVkaXRpbmcgbnVsbCwgYW5kIGl0IHNob3VsZCBiZSB0aGUgZGVmYXVsdCB2YWx1ZS5cclxuICAgIGlmICggb3B0aW9ucy5kaXNwbGF5VHlwZSA9PT0gRW50cnlEaXNwbGF5VHlwZS5FRElUQUJMRSApIHtcclxuICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5LjxUZXJtfG51bGw+fSAtIFRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBlbnRyeVxyXG4gICAgdGhpcy52YWx1ZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCB2YWx1ZSwge1xyXG4gICAgICB2YWx1ZUNvbXBhcmlzb25TdHJhdGVneTogJ2VxdWFsc0Z1bmN0aW9uJyxcclxuICAgICAgaXNWYWxpZFZhbHVlOiBUZXJtLmlzVGVybU9yTnVsbFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge0VudHJ5VHlwZX0gLSBXaGV0aGVyIHdlIGFyZSBkeW5hbWljL2VkaXRhYmxlL2dpdmVuLlxyXG4gICAgdGhpcy50eXBlID0gb3B0aW9ucy50eXBlO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge0VudHJ5RGlzcGxheVR5cGV9IC0gV2hldGhlciB3ZSBhcmUgYSByZWFkb3V0IG9yIGVkaXRhYmxlL2hpZGRlblxyXG4gICAgdGhpcy5kaXNwbGF5VHlwZSA9IG9wdGlvbnMuZGlzcGxheVR5cGU7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7SW5wdXRNZXRob2R9IC0gV2hhdCBmb3JtYXQgc2hvdWxkIGJlIHVzZWQgaWYgd2UgYXJlIGVkaXRlZD8gKE5lZWQgZGlmZmVyZW50IGtleXBhZHMgb3IgYSBwb2x5bm9taWFsXHJcbiAgICAvLyBpbnB1dClcclxuICAgIHRoaXMuaW5wdXRNZXRob2QgPSBvcHRpb25zLmlucHV0TWV0aG9kO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge251bWJlcn1cclxuICAgIHRoaXMuZGlnaXRzID0gb3B0aW9ucy5udW1iZXJPZkRpZ2l0cztcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48RW50cnlTdGF0dXM+fVxyXG4gICAgdGhpcy5zdGF0dXNQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggRW50cnlTdGF0dXMuRElSVFkgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48VGVybXxudWxsPn0gLSBPdXIgdmFsdWUsIGV4Y2VwdCBmb3IgbnVsbCBpZiB0aGVyZSBpcyBhbiBlcnJvciBoaWdobGlnaHRcclxuICAgIHRoaXMubm9uRXJyb3JWYWx1ZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB0aGlzLnZhbHVlUHJvcGVydHksIHRoaXMuc3RhdHVzUHJvcGVydHkgXSwgKCB2YWx1ZSwgaGlnaGxpZ2h0ICkgPT4gKCBoaWdobGlnaHQgPT09IEVudHJ5U3RhdHVzLklOQ09SUkVDVCApID8gbnVsbCA6IHZhbHVlICk7XHJcbiAgfVxyXG59XHJcblxyXG5hcmVhTW9kZWxDb21tb24ucmVnaXN0ZXIoICdFbnRyeScsIEVudHJ5ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFbnRyeTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxJQUFJLE1BQU0sNEJBQTRCO0FBQzdDLE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUNwRCxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFDdEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUUxQyxNQUFNQyxLQUFLLENBQUM7RUFDVjtBQUNGO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRztJQUM1QkEsT0FBTyxHQUFHVixLQUFLLENBQUU7TUFDZlcsSUFBSSxFQUFFTixTQUFTLENBQUNPLEtBQUs7TUFDckJDLFdBQVcsRUFBRVYsZ0JBQWdCLENBQUNXLE1BQU07TUFDcENDLFdBQVcsRUFBRVQsV0FBVyxDQUFDVSxRQUFRO01BQ2pDQyxjQUFjLEVBQUUsQ0FBQztNQUNqQkMsWUFBWSxFQUFFLElBQUksQ0FBQztJQUNyQixDQUFDLEVBQUVSLE9BQVEsQ0FBQzs7SUFFWjtJQUNBLElBQUtBLE9BQU8sQ0FBQ0csV0FBVyxLQUFLVixnQkFBZ0IsQ0FBQ2dCLFFBQVEsRUFBRztNQUN2RFYsS0FBSyxHQUFHLElBQUk7SUFDZDs7SUFFQTtJQUNBLElBQUksQ0FBQ1csYUFBYSxHQUFHLElBQUlyQixRQUFRLENBQUVVLEtBQUssRUFBRTtNQUN4Q1ksdUJBQXVCLEVBQUUsZ0JBQWdCO01BQ3pDQyxZQUFZLEVBQUVwQixJQUFJLENBQUNxQjtJQUNyQixDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNaLElBQUksR0FBR0QsT0FBTyxDQUFDQyxJQUFJOztJQUV4QjtJQUNBLElBQUksQ0FBQ0UsV0FBVyxHQUFHSCxPQUFPLENBQUNHLFdBQVc7O0lBRXRDO0lBQ0E7SUFDQSxJQUFJLENBQUNFLFdBQVcsR0FBR0wsT0FBTyxDQUFDSyxXQUFXOztJQUV0QztJQUNBLElBQUksQ0FBQ1MsTUFBTSxHQUFHZCxPQUFPLENBQUNPLGNBQWM7O0lBRXBDO0lBQ0EsSUFBSSxDQUFDUSxjQUFjLEdBQUcsSUFBSTFCLFFBQVEsQ0FBRUssV0FBVyxDQUFDc0IsS0FBTSxDQUFDOztJQUV2RDtJQUNBLElBQUksQ0FBQ0MscUJBQXFCLEdBQUcsSUFBSTdCLGVBQWUsQ0FBRSxDQUFFLElBQUksQ0FBQ3NCLGFBQWEsRUFBRSxJQUFJLENBQUNLLGNBQWMsQ0FBRSxFQUFFLENBQUVoQixLQUFLLEVBQUVtQixTQUFTLEtBQVFBLFNBQVMsS0FBS3hCLFdBQVcsQ0FBQ3lCLFNBQVMsR0FBSyxJQUFJLEdBQUdwQixLQUFNLENBQUM7RUFDakw7QUFDRjtBQUVBUixlQUFlLENBQUM2QixRQUFRLENBQUUsT0FBTyxFQUFFdkIsS0FBTSxDQUFDO0FBRTFDLGVBQWVBLEtBQUsifQ==