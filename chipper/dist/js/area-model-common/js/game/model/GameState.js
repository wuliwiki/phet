// Copyright 2017-2021, University of Colorado Boulder

/**
 * Enumeration for all states that the game can be in.  See https://github.com/phetsims/vegas/issues/74 about whether
 * this can/should be factored out.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import areaModelCommon from '../../areaModelCommon.js';
const GameState = {
  // "check" button, editable
  FIRST_ATTEMPT: 'FIRST_ATTEMPT',
  SECOND_ATTEMPT: 'SECOND_ATTEMPT',
  // "next" button, happy face with +1 or +2 depending on score. NOT editable
  CORRECT_ANSWER: 'CORRECT_ANSWER',
  // "try again" button, sad face (editable?) - triggers next state on edit?
  WRONG_FIRST_ANSWER: 'WRONG_FIRST_ANSWER',
  // "show solution" button, sad face (editable?) - no trigger on edit?
  WRONG_SECOND_ANSWER: 'WRONG_SECOND_ANSWER',
  // "next" button, NOT editable, replaced with a solution
  SHOW_SOLUTION: 'SHOW_SOLUTION',
  LEVEL_COMPLETE: 'LEVEL_COMPLETE'
};
areaModelCommon.register('GameState', GameState);

// @public {Array.<GameState>} - All values the enumeration can take.
GameState.VALUES = [GameState.FIRST_ATTEMPT, GameState.SECOND_ATTEMPT, GameState.CORRECT_ANSWER, GameState.WRONG_FIRST_ANSWER, GameState.WRONG_SECOND_ANSWER, GameState.SHOW_SOLUTION, GameState.LEVEL_COMPLETE];

// verify that enum is immutable, without the runtime penalty in production code
if (assert) {
  Object.freeze(GameState);
}
export default GameState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcmVhTW9kZWxDb21tb24iLCJHYW1lU3RhdGUiLCJGSVJTVF9BVFRFTVBUIiwiU0VDT05EX0FUVEVNUFQiLCJDT1JSRUNUX0FOU1dFUiIsIldST05HX0ZJUlNUX0FOU1dFUiIsIldST05HX1NFQ09ORF9BTlNXRVIiLCJTSE9XX1NPTFVUSU9OIiwiTEVWRUxfQ09NUExFVEUiLCJyZWdpc3RlciIsIlZBTFVFUyIsImFzc2VydCIsIk9iamVjdCIsImZyZWV6ZSJdLCJzb3VyY2VzIjpbIkdhbWVTdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFbnVtZXJhdGlvbiBmb3IgYWxsIHN0YXRlcyB0aGF0IHRoZSBnYW1lIGNhbiBiZSBpbi4gIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVnYXMvaXNzdWVzLzc0IGFib3V0IHdoZXRoZXJcclxuICogdGhpcyBjYW4vc2hvdWxkIGJlIGZhY3RvcmVkIG91dC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBhcmVhTW9kZWxDb21tb24gZnJvbSAnLi4vLi4vYXJlYU1vZGVsQ29tbW9uLmpzJztcclxuXHJcbmNvbnN0IEdhbWVTdGF0ZSA9IHtcclxuICAvLyBcImNoZWNrXCIgYnV0dG9uLCBlZGl0YWJsZVxyXG4gIEZJUlNUX0FUVEVNUFQ6ICdGSVJTVF9BVFRFTVBUJyxcclxuICBTRUNPTkRfQVRURU1QVDogJ1NFQ09ORF9BVFRFTVBUJyxcclxuXHJcbiAgLy8gXCJuZXh0XCIgYnV0dG9uLCBoYXBweSBmYWNlIHdpdGggKzEgb3IgKzIgZGVwZW5kaW5nIG9uIHNjb3JlLiBOT1QgZWRpdGFibGVcclxuICBDT1JSRUNUX0FOU1dFUjogJ0NPUlJFQ1RfQU5TV0VSJyxcclxuXHJcbiAgLy8gXCJ0cnkgYWdhaW5cIiBidXR0b24sIHNhZCBmYWNlIChlZGl0YWJsZT8pIC0gdHJpZ2dlcnMgbmV4dCBzdGF0ZSBvbiBlZGl0P1xyXG4gIFdST05HX0ZJUlNUX0FOU1dFUjogJ1dST05HX0ZJUlNUX0FOU1dFUicsXHJcblxyXG4gIC8vIFwic2hvdyBzb2x1dGlvblwiIGJ1dHRvbiwgc2FkIGZhY2UgKGVkaXRhYmxlPykgLSBubyB0cmlnZ2VyIG9uIGVkaXQ/XHJcbiAgV1JPTkdfU0VDT05EX0FOU1dFUjogJ1dST05HX1NFQ09ORF9BTlNXRVInLFxyXG5cclxuICAvLyBcIm5leHRcIiBidXR0b24sIE5PVCBlZGl0YWJsZSwgcmVwbGFjZWQgd2l0aCBhIHNvbHV0aW9uXHJcbiAgU0hPV19TT0xVVElPTjogJ1NIT1dfU09MVVRJT04nLFxyXG5cclxuICBMRVZFTF9DT01QTEVURTogJ0xFVkVMX0NPTVBMRVRFJ1xyXG59O1xyXG5cclxuYXJlYU1vZGVsQ29tbW9uLnJlZ2lzdGVyKCAnR2FtZVN0YXRlJywgR2FtZVN0YXRlICk7XHJcblxyXG4vLyBAcHVibGljIHtBcnJheS48R2FtZVN0YXRlPn0gLSBBbGwgdmFsdWVzIHRoZSBlbnVtZXJhdGlvbiBjYW4gdGFrZS5cclxuR2FtZVN0YXRlLlZBTFVFUyA9IFtcclxuICBHYW1lU3RhdGUuRklSU1RfQVRURU1QVCxcclxuICBHYW1lU3RhdGUuU0VDT05EX0FUVEVNUFQsXHJcbiAgR2FtZVN0YXRlLkNPUlJFQ1RfQU5TV0VSLFxyXG4gIEdhbWVTdGF0ZS5XUk9OR19GSVJTVF9BTlNXRVIsXHJcbiAgR2FtZVN0YXRlLldST05HX1NFQ09ORF9BTlNXRVIsXHJcbiAgR2FtZVN0YXRlLlNIT1dfU09MVVRJT04sXHJcbiAgR2FtZVN0YXRlLkxFVkVMX0NPTVBMRVRFXHJcbl07XHJcblxyXG4vLyB2ZXJpZnkgdGhhdCBlbnVtIGlzIGltbXV0YWJsZSwgd2l0aG91dCB0aGUgcnVudGltZSBwZW5hbHR5IGluIHByb2R1Y3Rpb24gY29kZVxyXG5pZiAoIGFzc2VydCApIHsgT2JqZWN0LmZyZWV6ZSggR2FtZVN0YXRlICk7IH1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVTdGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMEJBQTBCO0FBRXRELE1BQU1DLFNBQVMsR0FBRztFQUNoQjtFQUNBQyxhQUFhLEVBQUUsZUFBZTtFQUM5QkMsY0FBYyxFQUFFLGdCQUFnQjtFQUVoQztFQUNBQyxjQUFjLEVBQUUsZ0JBQWdCO0VBRWhDO0VBQ0FDLGtCQUFrQixFQUFFLG9CQUFvQjtFQUV4QztFQUNBQyxtQkFBbUIsRUFBRSxxQkFBcUI7RUFFMUM7RUFDQUMsYUFBYSxFQUFFLGVBQWU7RUFFOUJDLGNBQWMsRUFBRTtBQUNsQixDQUFDO0FBRURSLGVBQWUsQ0FBQ1MsUUFBUSxDQUFFLFdBQVcsRUFBRVIsU0FBVSxDQUFDOztBQUVsRDtBQUNBQSxTQUFTLENBQUNTLE1BQU0sR0FBRyxDQUNqQlQsU0FBUyxDQUFDQyxhQUFhLEVBQ3ZCRCxTQUFTLENBQUNFLGNBQWMsRUFDeEJGLFNBQVMsQ0FBQ0csY0FBYyxFQUN4QkgsU0FBUyxDQUFDSSxrQkFBa0IsRUFDNUJKLFNBQVMsQ0FBQ0ssbUJBQW1CLEVBQzdCTCxTQUFTLENBQUNNLGFBQWEsRUFDdkJOLFNBQVMsQ0FBQ08sY0FBYyxDQUN6Qjs7QUFFRDtBQUNBLElBQUtHLE1BQU0sRUFBRztFQUFFQyxNQUFNLENBQUNDLE1BQU0sQ0FBRVosU0FBVSxDQUFDO0FBQUU7QUFFNUMsZUFBZUEsU0FBUyJ9