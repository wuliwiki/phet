// Copyright 2018-2021, University of Colorado Boulder

/**
 * A potential line below the totals line, where each total (vertical and horizontal) is separated out into its
 * different values (for each partition).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Orientation from '../../../../../phet-core/js/Orientation.js';
import areaModelCommon from '../../../areaModelCommon.js';
import AreaModelCommonConstants from '../../AreaModelCommonConstants.js';
import CalculationLine from './CalculationLine.js';
class ExpandedLine extends CalculationLine {
  /**
   * @param {Array.<Term>} horizontalTerms
   * @param {Array.<Term>} verticalTerms
   * @param {Area} area
   * @param {Property.<number|null>} activeIndexProperty
   * @param {boolean} allowExponents - Whether exponents (powers of x) are allowed
   * @param {boolean} isProportional - Whether the area is shown as proportional (instead of generic)
   */
  constructor(horizontalTerms, verticalTerms, area, activeIndexProperty, allowExponents, isProportional) {
    super(CalculationLine.EXPANDED_LINE_INDEX, area.colorProperties, activeIndexProperty, allowExponents, isProportional);
    const isHorizontalSingle = horizontalTerms.length === 1;
    const isVerticalSingle = verticalTerms.length === 1;
    let horizontalNode = this.sumOrientedTerms(horizontalTerms, Orientation.HORIZONTAL);
    let verticalNode = this.sumOrientedTerms(verticalTerms, Orientation.VERTICAL);
    if (!isHorizontalSingle || allowExponents) {
      horizontalNode = this.parentheses(horizontalNode);
    }
    if (!isVerticalSingle || allowExponents) {
      verticalNode = this.parentheses(verticalNode);
    }
    if (isProportional) {
      this.node = this.multiplyX(verticalNode, horizontalNode);
    } else {
      const spacing = isHorizontalSingle || isVerticalSingle ? AreaModelCommonConstants.CALCULATION_TERM_PAREN_PADDING : AreaModelCommonConstants.CALCULATION_PAREN_PAREN_PADDING;
      this.node = this.group([verticalNode, horizontalNode], spacing);
    }
  }
}
areaModelCommon.register('ExpandedLine', ExpandedLine);
export default ExpandedLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPcmllbnRhdGlvbiIsImFyZWFNb2RlbENvbW1vbiIsIkFyZWFNb2RlbENvbW1vbkNvbnN0YW50cyIsIkNhbGN1bGF0aW9uTGluZSIsIkV4cGFuZGVkTGluZSIsImNvbnN0cnVjdG9yIiwiaG9yaXpvbnRhbFRlcm1zIiwidmVydGljYWxUZXJtcyIsImFyZWEiLCJhY3RpdmVJbmRleFByb3BlcnR5IiwiYWxsb3dFeHBvbmVudHMiLCJpc1Byb3BvcnRpb25hbCIsIkVYUEFOREVEX0xJTkVfSU5ERVgiLCJjb2xvclByb3BlcnRpZXMiLCJpc0hvcml6b250YWxTaW5nbGUiLCJsZW5ndGgiLCJpc1ZlcnRpY2FsU2luZ2xlIiwiaG9yaXpvbnRhbE5vZGUiLCJzdW1PcmllbnRlZFRlcm1zIiwiSE9SSVpPTlRBTCIsInZlcnRpY2FsTm9kZSIsIlZFUlRJQ0FMIiwicGFyZW50aGVzZXMiLCJub2RlIiwibXVsdGlwbHlYIiwic3BhY2luZyIsIkNBTENVTEFUSU9OX1RFUk1fUEFSRU5fUEFERElORyIsIkNBTENVTEFUSU9OX1BBUkVOX1BBUkVOX1BBRERJTkciLCJncm91cCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwYW5kZWRMaW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgcG90ZW50aWFsIGxpbmUgYmVsb3cgdGhlIHRvdGFscyBsaW5lLCB3aGVyZSBlYWNoIHRvdGFsICh2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCkgaXMgc2VwYXJhdGVkIG91dCBpbnRvIGl0c1xyXG4gKiBkaWZmZXJlbnQgdmFsdWVzIChmb3IgZWFjaCBwYXJ0aXRpb24pLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IE9yaWVudGF0aW9uIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9PcmllbnRhdGlvbi5qcyc7XHJcbmltcG9ydCBhcmVhTW9kZWxDb21tb24gZnJvbSAnLi4vLi4vLi4vYXJlYU1vZGVsQ29tbW9uLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vbkNvbnN0YW50cyBmcm9tICcuLi8uLi9BcmVhTW9kZWxDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ2FsY3VsYXRpb25MaW5lIGZyb20gJy4vQ2FsY3VsYXRpb25MaW5lLmpzJztcclxuXHJcbmNsYXNzIEV4cGFuZGVkTGluZSBleHRlbmRzIENhbGN1bGF0aW9uTGluZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtBcnJheS48VGVybT59IGhvcml6b250YWxUZXJtc1xyXG4gICAqIEBwYXJhbSB7QXJyYXkuPFRlcm0+fSB2ZXJ0aWNhbFRlcm1zXHJcbiAgICogQHBhcmFtIHtBcmVhfSBhcmVhXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyfG51bGw+fSBhY3RpdmVJbmRleFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtib29sZWFufSBhbGxvd0V4cG9uZW50cyAtIFdoZXRoZXIgZXhwb25lbnRzIChwb3dlcnMgb2YgeCkgYXJlIGFsbG93ZWRcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUHJvcG9ydGlvbmFsIC0gV2hldGhlciB0aGUgYXJlYSBpcyBzaG93biBhcyBwcm9wb3J0aW9uYWwgKGluc3RlYWQgb2YgZ2VuZXJpYylcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaG9yaXpvbnRhbFRlcm1zLCB2ZXJ0aWNhbFRlcm1zLCBhcmVhLCBhY3RpdmVJbmRleFByb3BlcnR5LCBhbGxvd0V4cG9uZW50cywgaXNQcm9wb3J0aW9uYWwgKSB7XHJcbiAgICBzdXBlciggQ2FsY3VsYXRpb25MaW5lLkVYUEFOREVEX0xJTkVfSU5ERVgsIGFyZWEuY29sb3JQcm9wZXJ0aWVzLCBhY3RpdmVJbmRleFByb3BlcnR5LCBhbGxvd0V4cG9uZW50cywgaXNQcm9wb3J0aW9uYWwgKTtcclxuXHJcbiAgICBjb25zdCBpc0hvcml6b250YWxTaW5nbGUgPSBob3Jpem9udGFsVGVybXMubGVuZ3RoID09PSAxO1xyXG4gICAgY29uc3QgaXNWZXJ0aWNhbFNpbmdsZSA9IHZlcnRpY2FsVGVybXMubGVuZ3RoID09PSAxO1xyXG5cclxuICAgIGxldCBob3Jpem9udGFsTm9kZSA9IHRoaXMuc3VtT3JpZW50ZWRUZXJtcyggaG9yaXpvbnRhbFRlcm1zLCBPcmllbnRhdGlvbi5IT1JJWk9OVEFMICk7XHJcbiAgICBsZXQgdmVydGljYWxOb2RlID0gdGhpcy5zdW1PcmllbnRlZFRlcm1zKCB2ZXJ0aWNhbFRlcm1zLCBPcmllbnRhdGlvbi5WRVJUSUNBTCApO1xyXG5cclxuICAgIGlmICggIWlzSG9yaXpvbnRhbFNpbmdsZSB8fCBhbGxvd0V4cG9uZW50cyApIHtcclxuICAgICAgaG9yaXpvbnRhbE5vZGUgPSB0aGlzLnBhcmVudGhlc2VzKCBob3Jpem9udGFsTm9kZSApO1xyXG4gICAgfVxyXG4gICAgaWYgKCAhaXNWZXJ0aWNhbFNpbmdsZSB8fCBhbGxvd0V4cG9uZW50cyApIHtcclxuICAgICAgdmVydGljYWxOb2RlID0gdGhpcy5wYXJlbnRoZXNlcyggdmVydGljYWxOb2RlICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCBpc1Byb3BvcnRpb25hbCApIHtcclxuICAgICAgdGhpcy5ub2RlID0gdGhpcy5tdWx0aXBseVgoIHZlcnRpY2FsTm9kZSwgaG9yaXpvbnRhbE5vZGUgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjb25zdCBzcGFjaW5nID0gKCBpc0hvcml6b250YWxTaW5nbGUgfHwgaXNWZXJ0aWNhbFNpbmdsZSApXHJcbiAgICAgICAgICAgICAgICAgICAgICA/IEFyZWFNb2RlbENvbW1vbkNvbnN0YW50cy5DQUxDVUxBVElPTl9URVJNX1BBUkVOX1BBRERJTkdcclxuICAgICAgICAgICAgICAgICAgICAgIDogQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLkNBTENVTEFUSU9OX1BBUkVOX1BBUkVOX1BBRERJTkc7XHJcbiAgICAgIHRoaXMubm9kZSA9IHRoaXMuZ3JvdXAoIFsgdmVydGljYWxOb2RlLCBob3Jpem9udGFsTm9kZSBdLCBzcGFjaW5nICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5hcmVhTW9kZWxDb21tb24ucmVnaXN0ZXIoICdFeHBhbmRlZExpbmUnLCBFeHBhbmRlZExpbmUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV4cGFuZGVkTGluZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBQ3hFLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFbEQsTUFBTUMsWUFBWSxTQUFTRCxlQUFlLENBQUM7RUFDekM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxlQUFlLEVBQUVDLGFBQWEsRUFBRUMsSUFBSSxFQUFFQyxtQkFBbUIsRUFBRUMsY0FBYyxFQUFFQyxjQUFjLEVBQUc7SUFDdkcsS0FBSyxDQUFFUixlQUFlLENBQUNTLG1CQUFtQixFQUFFSixJQUFJLENBQUNLLGVBQWUsRUFBRUosbUJBQW1CLEVBQUVDLGNBQWMsRUFBRUMsY0FBZSxDQUFDO0lBRXZILE1BQU1HLGtCQUFrQixHQUFHUixlQUFlLENBQUNTLE1BQU0sS0FBSyxDQUFDO0lBQ3ZELE1BQU1DLGdCQUFnQixHQUFHVCxhQUFhLENBQUNRLE1BQU0sS0FBSyxDQUFDO0lBRW5ELElBQUlFLGNBQWMsR0FBRyxJQUFJLENBQUNDLGdCQUFnQixDQUFFWixlQUFlLEVBQUVOLFdBQVcsQ0FBQ21CLFVBQVcsQ0FBQztJQUNyRixJQUFJQyxZQUFZLEdBQUcsSUFBSSxDQUFDRixnQkFBZ0IsQ0FBRVgsYUFBYSxFQUFFUCxXQUFXLENBQUNxQixRQUFTLENBQUM7SUFFL0UsSUFBSyxDQUFDUCxrQkFBa0IsSUFBSUosY0FBYyxFQUFHO01BQzNDTyxjQUFjLEdBQUcsSUFBSSxDQUFDSyxXQUFXLENBQUVMLGNBQWUsQ0FBQztJQUNyRDtJQUNBLElBQUssQ0FBQ0QsZ0JBQWdCLElBQUlOLGNBQWMsRUFBRztNQUN6Q1UsWUFBWSxHQUFHLElBQUksQ0FBQ0UsV0FBVyxDQUFFRixZQUFhLENBQUM7SUFDakQ7SUFFQSxJQUFLVCxjQUFjLEVBQUc7TUFDcEIsSUFBSSxDQUFDWSxJQUFJLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUVKLFlBQVksRUFBRUgsY0FBZSxDQUFDO0lBQzVELENBQUMsTUFDSTtNQUNILE1BQU1RLE9BQU8sR0FBS1gsa0JBQWtCLElBQUlFLGdCQUFnQixHQUN0Q2Qsd0JBQXdCLENBQUN3Qiw4QkFBOEIsR0FDdkR4Qix3QkFBd0IsQ0FBQ3lCLCtCQUErQjtNQUMxRSxJQUFJLENBQUNKLElBQUksR0FBRyxJQUFJLENBQUNLLEtBQUssQ0FBRSxDQUFFUixZQUFZLEVBQUVILGNBQWMsQ0FBRSxFQUFFUSxPQUFRLENBQUM7SUFDckU7RUFDRjtBQUNGO0FBRUF4QixlQUFlLENBQUM0QixRQUFRLENBQUUsY0FBYyxFQUFFekIsWUFBYSxDQUFDO0FBRXhELGVBQWVBLFlBQVkifQ==