// Copyright 2018-2021, University of Colorado Boulder

/**
 * The first calculation line, which shows totals (both horizontal and vertical).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import areaModelCommon from '../../../areaModelCommon.js';
import AreaModelCommonConstants from '../../AreaModelCommonConstants.js';
import CalculationLine from './CalculationLine.js';
class TotalsLine extends CalculationLine {
  /**
   * @extends {CalculationLine}
   *
   * @param {Area} area
   * @param {Property.<number|null>} activeIndexProperty
   * @param {boolean} allowExponents - Whether exponents (powers of x) are allowed
   * @param {boolean} isProportional - Whether the area is shown as proportional (instead of generic)
   */
  constructor(area, activeIndexProperty, allowExponents, isProportional) {
    super(CalculationLine.TOTALS_LINE_INDEX, area.colorProperties, activeIndexProperty, allowExponents, isProportional);
    const totalTexts = area.displayProperties.map((orientationTotal, orientation) => orientationTotal.value ? this.orientedTermText(orientation, orientationTotal.value) : this.orientedPlaceholderBox(orientation));
    if (allowExponents) {
      this.node = this.group([this.parentheses(totalTexts.vertical), this.parentheses(totalTexts.horizontal)], AreaModelCommonConstants.CALCULATION_PAREN_PAREN_PADDING);
    } else {
      this.node = this.multiplyX(totalTexts.vertical, totalTexts.horizontal);
    }
  }
}
areaModelCommon.register('TotalsLine', TotalsLine);
export default TotalsLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcmVhTW9kZWxDb21tb24iLCJBcmVhTW9kZWxDb21tb25Db25zdGFudHMiLCJDYWxjdWxhdGlvbkxpbmUiLCJUb3RhbHNMaW5lIiwiY29uc3RydWN0b3IiLCJhcmVhIiwiYWN0aXZlSW5kZXhQcm9wZXJ0eSIsImFsbG93RXhwb25lbnRzIiwiaXNQcm9wb3J0aW9uYWwiLCJUT1RBTFNfTElORV9JTkRFWCIsImNvbG9yUHJvcGVydGllcyIsInRvdGFsVGV4dHMiLCJkaXNwbGF5UHJvcGVydGllcyIsIm1hcCIsIm9yaWVudGF0aW9uVG90YWwiLCJvcmllbnRhdGlvbiIsInZhbHVlIiwib3JpZW50ZWRUZXJtVGV4dCIsIm9yaWVudGVkUGxhY2Vob2xkZXJCb3giLCJub2RlIiwiZ3JvdXAiLCJwYXJlbnRoZXNlcyIsInZlcnRpY2FsIiwiaG9yaXpvbnRhbCIsIkNBTENVTEFUSU9OX1BBUkVOX1BBUkVOX1BBRERJTkciLCJtdWx0aXBseVgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRvdGFsc0xpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIGZpcnN0IGNhbGN1bGF0aW9uIGxpbmUsIHdoaWNoIHNob3dzIHRvdGFscyAoYm90aCBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCkuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgYXJlYU1vZGVsQ29tbW9uIGZyb20gJy4uLy4uLy4uL2FyZWFNb2RlbENvbW1vbi5qcyc7XHJcbmltcG9ydCBBcmVhTW9kZWxDb21tb25Db25zdGFudHMgZnJvbSAnLi4vLi4vQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENhbGN1bGF0aW9uTGluZSBmcm9tICcuL0NhbGN1bGF0aW9uTGluZS5qcyc7XHJcblxyXG5jbGFzcyBUb3RhbHNMaW5lIGV4dGVuZHMgQ2FsY3VsYXRpb25MaW5lIHtcclxuICAvKipcclxuICAgKiBAZXh0ZW5kcyB7Q2FsY3VsYXRpb25MaW5lfVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcmVhfSBhcmVhXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyfG51bGw+fSBhY3RpdmVJbmRleFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtib29sZWFufSBhbGxvd0V4cG9uZW50cyAtIFdoZXRoZXIgZXhwb25lbnRzIChwb3dlcnMgb2YgeCkgYXJlIGFsbG93ZWRcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUHJvcG9ydGlvbmFsIC0gV2hldGhlciB0aGUgYXJlYSBpcyBzaG93biBhcyBwcm9wb3J0aW9uYWwgKGluc3RlYWQgb2YgZ2VuZXJpYylcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYXJlYSwgYWN0aXZlSW5kZXhQcm9wZXJ0eSwgYWxsb3dFeHBvbmVudHMsIGlzUHJvcG9ydGlvbmFsICkge1xyXG5cclxuICAgIHN1cGVyKCBDYWxjdWxhdGlvbkxpbmUuVE9UQUxTX0xJTkVfSU5ERVgsIGFyZWEuY29sb3JQcm9wZXJ0aWVzLCBhY3RpdmVJbmRleFByb3BlcnR5LCBhbGxvd0V4cG9uZW50cywgaXNQcm9wb3J0aW9uYWwgKTtcclxuXHJcbiAgICBjb25zdCB0b3RhbFRleHRzID0gYXJlYS5kaXNwbGF5UHJvcGVydGllcy5tYXAoICggb3JpZW50YXRpb25Ub3RhbCwgb3JpZW50YXRpb24gKSA9PiBvcmllbnRhdGlvblRvdGFsLnZhbHVlID8gdGhpcy5vcmllbnRlZFRlcm1UZXh0KCBvcmllbnRhdGlvbiwgb3JpZW50YXRpb25Ub3RhbC52YWx1ZSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcmllbnRlZFBsYWNlaG9sZGVyQm94KCBvcmllbnRhdGlvbiApICk7XHJcblxyXG4gICAgaWYgKCBhbGxvd0V4cG9uZW50cyApIHtcclxuICAgICAgdGhpcy5ub2RlID0gdGhpcy5ncm91cCggW1xyXG4gICAgICAgIHRoaXMucGFyZW50aGVzZXMoIHRvdGFsVGV4dHMudmVydGljYWwgKSxcclxuICAgICAgICB0aGlzLnBhcmVudGhlc2VzKCB0b3RhbFRleHRzLmhvcml6b250YWwgKVxyXG4gICAgICBdLCBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuQ0FMQ1VMQVRJT05fUEFSRU5fUEFSRU5fUEFERElORyApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMubm9kZSA9IHRoaXMubXVsdGlwbHlYKCB0b3RhbFRleHRzLnZlcnRpY2FsLCB0b3RhbFRleHRzLmhvcml6b250YWwgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmFyZWFNb2RlbENvbW1vbi5yZWdpc3RlciggJ1RvdGFsc0xpbmUnLCBUb3RhbHNMaW5lICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb3RhbHNMaW5lOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLHdCQUF3QixNQUFNLG1DQUFtQztBQUN4RSxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBRWxELE1BQU1DLFVBQVUsU0FBU0QsZUFBZSxDQUFDO0VBQ3ZDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsSUFBSSxFQUFFQyxtQkFBbUIsRUFBRUMsY0FBYyxFQUFFQyxjQUFjLEVBQUc7SUFFdkUsS0FBSyxDQUFFTixlQUFlLENBQUNPLGlCQUFpQixFQUFFSixJQUFJLENBQUNLLGVBQWUsRUFBRUosbUJBQW1CLEVBQUVDLGNBQWMsRUFBRUMsY0FBZSxDQUFDO0lBRXJILE1BQU1HLFVBQVUsR0FBR04sSUFBSSxDQUFDTyxpQkFBaUIsQ0FBQ0MsR0FBRyxDQUFFLENBQUVDLGdCQUFnQixFQUFFQyxXQUFXLEtBQU1ELGdCQUFnQixDQUFDRSxLQUFLLEdBQUcsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBRUYsV0FBVyxFQUFFRCxnQkFBZ0IsQ0FBQ0UsS0FBTSxDQUFDLEdBQzVELElBQUksQ0FBQ0Usc0JBQXNCLENBQUVILFdBQVksQ0FBRSxDQUFDO0lBRXpKLElBQUtSLGNBQWMsRUFBRztNQUNwQixJQUFJLENBQUNZLElBQUksR0FBRyxJQUFJLENBQUNDLEtBQUssQ0FBRSxDQUN0QixJQUFJLENBQUNDLFdBQVcsQ0FBRVYsVUFBVSxDQUFDVyxRQUFTLENBQUMsRUFDdkMsSUFBSSxDQUFDRCxXQUFXLENBQUVWLFVBQVUsQ0FBQ1ksVUFBVyxDQUFDLENBQzFDLEVBQUV0Qix3QkFBd0IsQ0FBQ3VCLCtCQUFnQyxDQUFDO0lBQy9ELENBQUMsTUFDSTtNQUNILElBQUksQ0FBQ0wsSUFBSSxHQUFHLElBQUksQ0FBQ00sU0FBUyxDQUFFZCxVQUFVLENBQUNXLFFBQVEsRUFBRVgsVUFBVSxDQUFDWSxVQUFXLENBQUM7SUFDMUU7RUFDRjtBQUNGO0FBRUF2QixlQUFlLENBQUMwQixRQUFRLENBQUUsWUFBWSxFQUFFdkIsVUFBVyxDQUFDO0FBRXBELGVBQWVBLFVBQVUifQ==