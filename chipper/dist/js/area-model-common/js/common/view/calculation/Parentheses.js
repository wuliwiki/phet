// Copyright 2018-2022, University of Colorado Boulder

/**
 * Wraps a Node with parentheses (poolable).
 *
 * This is pooled for performance, as recreating the view structure had unacceptable performance/GC characteristics.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import ReadOnlyProperty from '../../../../../axon/js/ReadOnlyProperty.js';
import Poolable from '../../../../../phet-core/js/Poolable.js';
import StringUtils from '../../../../../phetcommon/js/util/StringUtils.js';
import { HBox, Node, Text } from '../../../../../scenery/js/imports.js';
import areaModelCommon from '../../../areaModelCommon.js';
import AreaModelCommonStrings from '../../../AreaModelCommonStrings.js';
import AreaModelCommonConstants from '../../AreaModelCommonConstants.js';
const quantityPatternString = AreaModelCommonStrings.a11y.quantityPattern;
class Parentheses extends HBox {
  /**
   * @param {Node} content - Should have a clean() method to support pooling
   * @param {Property.<Color>} baseColorProperty
   */
  constructor(content, baseColorProperty) {
    super({
      spacing: AreaModelCommonConstants.CALCULATION_PAREN_PADDING,
      // pdom
      align: 'bottom',
      tagName: 'mrow',
      pdomNamespace: 'http://www.w3.org/1998/Math/MathML'
    });

    // @private {Text} - Persistent (since these are declared in the constructor instead of the initialize function,
    // they will persist for the life of this node).
    this.leftParen = new Text('(', {
      font: AreaModelCommonConstants.CALCULATION_PAREN_FONT,
      // pdom
      tagName: 'mo',
      pdomNamespace: 'http://www.w3.org/1998/Math/MathML',
      innerContent: '('
    });
    this.leftParen.setPDOMAttribute('form', 'prefix', {
      namespace: 'http://www.w3.org/1998/Math/MathML'
    });

    // @private {Text} - See notes above
    this.rightParen = new Text(')', {
      font: AreaModelCommonConstants.CALCULATION_PAREN_FONT,
      // pdom
      tagName: 'mo',
      pdomNamespace: 'http://www.w3.org/1998/Math/MathML',
      innerContent: ')'
    });
    this.rightParen.setPDOMAttribute('form', 'postfix', {
      namespace: 'http://www.w3.org/1998/Math/MathML'
    });
    this.children = [this.leftParen, this.rightParen];
    this.initialize(content, baseColorProperty);
  }

  /**
   * @public
   *
   * @param {Node} content - Should have a clean() method to support pooling
   * @param {Property.<Color>} baseColorProperty
   */
  initialize(content, baseColorProperty) {
    assert && assert(content instanceof Node);
    assert && assert(baseColorProperty instanceof ReadOnlyProperty);
    assert && assert(this.children.length === 2, 'Should only have a left and right paren at this moment');

    // @public {string}
    this.accessibleText = StringUtils.fillIn(quantityPatternString, {
      content: content.accessibleText
    });

    // @private {Node|null}
    this.content = content;
    this.insertChild(1, content);
    this.leftParen.fill = baseColorProperty;
    this.rightParen.fill = baseColorProperty;
  }

  /**
   * Clears the state of this node (releasing references) so it can be freed to the pool (and potentially GC'ed).
   * @public
   */
  clean() {
    assert && assert(this.children.length === 3, 'Should only have a left and right paren AND content');

    // Remove our content
    this.removeChild(this.content);
    this.content.clean();
    this.content = null;
    this.leftParen.fill = null;
    this.rightParen.fill = null;
    this.freeToPool();
  }
}
areaModelCommon.register('Parentheses', Parentheses);
Poolable.mixInto(Parentheses);
export default Parentheses;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFkT25seVByb3BlcnR5IiwiUG9vbGFibGUiLCJTdHJpbmdVdGlscyIsIkhCb3giLCJOb2RlIiwiVGV4dCIsImFyZWFNb2RlbENvbW1vbiIsIkFyZWFNb2RlbENvbW1vblN0cmluZ3MiLCJBcmVhTW9kZWxDb21tb25Db25zdGFudHMiLCJxdWFudGl0eVBhdHRlcm5TdHJpbmciLCJhMTF5IiwicXVhbnRpdHlQYXR0ZXJuIiwiUGFyZW50aGVzZXMiLCJjb25zdHJ1Y3RvciIsImNvbnRlbnQiLCJiYXNlQ29sb3JQcm9wZXJ0eSIsInNwYWNpbmciLCJDQUxDVUxBVElPTl9QQVJFTl9QQURESU5HIiwiYWxpZ24iLCJ0YWdOYW1lIiwicGRvbU5hbWVzcGFjZSIsImxlZnRQYXJlbiIsImZvbnQiLCJDQUxDVUxBVElPTl9QQVJFTl9GT05UIiwiaW5uZXJDb250ZW50Iiwic2V0UERPTUF0dHJpYnV0ZSIsIm5hbWVzcGFjZSIsInJpZ2h0UGFyZW4iLCJjaGlsZHJlbiIsImluaXRpYWxpemUiLCJhc3NlcnQiLCJsZW5ndGgiLCJhY2Nlc3NpYmxlVGV4dCIsImZpbGxJbiIsImluc2VydENoaWxkIiwiZmlsbCIsImNsZWFuIiwicmVtb3ZlQ2hpbGQiLCJmcmVlVG9Qb29sIiwicmVnaXN0ZXIiLCJtaXhJbnRvIl0sInNvdXJjZXMiOlsiUGFyZW50aGVzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV3JhcHMgYSBOb2RlIHdpdGggcGFyZW50aGVzZXMgKHBvb2xhYmxlKS5cclxuICpcclxuICogVGhpcyBpcyBwb29sZWQgZm9yIHBlcmZvcm1hbmNlLCBhcyByZWNyZWF0aW5nIHRoZSB2aWV3IHN0cnVjdHVyZSBoYWQgdW5hY2NlcHRhYmxlIHBlcmZvcm1hbmNlL0dDIGNoYXJhY3RlcmlzdGljcy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQb29sYWJsZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvUG9vbGFibGUuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IHsgSEJveCwgTm9kZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBhcmVhTW9kZWxDb21tb24gZnJvbSAnLi4vLi4vLi4vYXJlYU1vZGVsQ29tbW9uLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vblN0cmluZ3MgZnJvbSAnLi4vLi4vLi4vQXJlYU1vZGVsQ29tbW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBBcmVhTW9kZWxDb21tb25Db25zdGFudHMgZnJvbSAnLi4vLi4vQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbmNvbnN0IHF1YW50aXR5UGF0dGVyblN0cmluZyA9IEFyZWFNb2RlbENvbW1vblN0cmluZ3MuYTExeS5xdWFudGl0eVBhdHRlcm47XHJcblxyXG5jbGFzcyBQYXJlbnRoZXNlcyBleHRlbmRzIEhCb3gge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gY29udGVudCAtIFNob3VsZCBoYXZlIGEgY2xlYW4oKSBtZXRob2QgdG8gc3VwcG9ydCBwb29saW5nXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Q29sb3I+fSBiYXNlQ29sb3JQcm9wZXJ0eVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBjb250ZW50LCBiYXNlQ29sb3JQcm9wZXJ0eSApIHtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBzcGFjaW5nOiBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuQ0FMQ1VMQVRJT05fUEFSRU5fUEFERElORyxcclxuXHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgYWxpZ246ICdib3R0b20nLFxyXG4gICAgICB0YWdOYW1lOiAnbXJvdycsXHJcbiAgICAgIHBkb21OYW1lc3BhY2U6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtUZXh0fSAtIFBlcnNpc3RlbnQgKHNpbmNlIHRoZXNlIGFyZSBkZWNsYXJlZCBpbiB0aGUgY29uc3RydWN0b3IgaW5zdGVhZCBvZiB0aGUgaW5pdGlhbGl6ZSBmdW5jdGlvbixcclxuICAgIC8vIHRoZXkgd2lsbCBwZXJzaXN0IGZvciB0aGUgbGlmZSBvZiB0aGlzIG5vZGUpLlxyXG4gICAgdGhpcy5sZWZ0UGFyZW4gPSBuZXcgVGV4dCggJygnLCB7XHJcbiAgICAgIGZvbnQ6IEFyZWFNb2RlbENvbW1vbkNvbnN0YW50cy5DQUxDVUxBVElPTl9QQVJFTl9GT05ULFxyXG5cclxuICAgICAgLy8gcGRvbVxyXG4gICAgICB0YWdOYW1lOiAnbW8nLFxyXG4gICAgICBwZG9tTmFtZXNwYWNlOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCcsXHJcbiAgICAgIGlubmVyQ29udGVudDogJygnXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmxlZnRQYXJlbi5zZXRQRE9NQXR0cmlidXRlKCAnZm9ybScsICdwcmVmaXgnLCB7XHJcbiAgICAgIG5hbWVzcGFjZTogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge1RleHR9IC0gU2VlIG5vdGVzIGFib3ZlXHJcbiAgICB0aGlzLnJpZ2h0UGFyZW4gPSBuZXcgVGV4dCggJyknLCB7XHJcbiAgICAgIGZvbnQ6IEFyZWFNb2RlbENvbW1vbkNvbnN0YW50cy5DQUxDVUxBVElPTl9QQVJFTl9GT05ULFxyXG5cclxuICAgICAgLy8gcGRvbVxyXG4gICAgICB0YWdOYW1lOiAnbW8nLFxyXG4gICAgICBwZG9tTmFtZXNwYWNlOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCcsXHJcbiAgICAgIGlubmVyQ29udGVudDogJyknXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLnJpZ2h0UGFyZW4uc2V0UERPTUF0dHJpYnV0ZSggJ2Zvcm0nLCAncG9zdGZpeCcsIHtcclxuICAgICAgbmFtZXNwYWNlOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmNoaWxkcmVuID0gWyB0aGlzLmxlZnRQYXJlbiwgdGhpcy5yaWdodFBhcmVuIF07XHJcblxyXG4gICAgdGhpcy5pbml0aWFsaXplKCBjb250ZW50LCBiYXNlQ29sb3JQcm9wZXJ0eSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtOb2RlfSBjb250ZW50IC0gU2hvdWxkIGhhdmUgYSBjbGVhbigpIG1ldGhvZCB0byBzdXBwb3J0IHBvb2xpbmdcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxDb2xvcj59IGJhc2VDb2xvclByb3BlcnR5XHJcbiAgICovXHJcbiAgaW5pdGlhbGl6ZSggY29udGVudCwgYmFzZUNvbG9yUHJvcGVydHkgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb250ZW50IGluc3RhbmNlb2YgTm9kZSApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYmFzZUNvbG9yUHJvcGVydHkgaW5zdGFuY2VvZiBSZWFkT25seVByb3BlcnR5ICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5jaGlsZHJlbi5sZW5ndGggPT09IDIsICdTaG91bGQgb25seSBoYXZlIGEgbGVmdCBhbmQgcmlnaHQgcGFyZW4gYXQgdGhpcyBtb21lbnQnICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7c3RyaW5nfVxyXG4gICAgdGhpcy5hY2Nlc3NpYmxlVGV4dCA9IFN0cmluZ1V0aWxzLmZpbGxJbiggcXVhbnRpdHlQYXR0ZXJuU3RyaW5nLCB7XHJcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQuYWNjZXNzaWJsZVRleHRcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7Tm9kZXxudWxsfVxyXG4gICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcclxuXHJcbiAgICB0aGlzLmluc2VydENoaWxkKCAxLCBjb250ZW50ICk7XHJcblxyXG4gICAgdGhpcy5sZWZ0UGFyZW4uZmlsbCA9IGJhc2VDb2xvclByb3BlcnR5O1xyXG4gICAgdGhpcy5yaWdodFBhcmVuLmZpbGwgPSBiYXNlQ29sb3JQcm9wZXJ0eTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFycyB0aGUgc3RhdGUgb2YgdGhpcyBub2RlIChyZWxlYXNpbmcgcmVmZXJlbmNlcykgc28gaXQgY2FuIGJlIGZyZWVkIHRvIHRoZSBwb29sIChhbmQgcG90ZW50aWFsbHkgR0MnZWQpLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjbGVhbigpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID09PSAzLCAnU2hvdWxkIG9ubHkgaGF2ZSBhIGxlZnQgYW5kIHJpZ2h0IHBhcmVuIEFORCBjb250ZW50JyApO1xyXG5cclxuICAgIC8vIFJlbW92ZSBvdXIgY29udGVudFxyXG4gICAgdGhpcy5yZW1vdmVDaGlsZCggdGhpcy5jb250ZW50ICk7XHJcbiAgICB0aGlzLmNvbnRlbnQuY2xlYW4oKTtcclxuICAgIHRoaXMuY29udGVudCA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5sZWZ0UGFyZW4uZmlsbCA9IG51bGw7XHJcbiAgICB0aGlzLnJpZ2h0UGFyZW4uZmlsbCA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5mcmVlVG9Qb29sKCk7XHJcbiAgfVxyXG59XHJcblxyXG5hcmVhTW9kZWxDb21tb24ucmVnaXN0ZXIoICdQYXJlbnRoZXNlcycsIFBhcmVudGhlc2VzICk7XHJcblxyXG5Qb29sYWJsZS5taXhJbnRvKCBQYXJlbnRoZXNlcyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFyZW50aGVzZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSw0Q0FBNEM7QUFDekUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyxXQUFXLE1BQU0sa0RBQWtEO0FBQzFFLFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsc0NBQXNDO0FBQ3ZFLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0Msc0JBQXNCLE1BQU0sb0NBQW9DO0FBQ3ZFLE9BQU9DLHdCQUF3QixNQUFNLG1DQUFtQztBQUV4RSxNQUFNQyxxQkFBcUIsR0FBR0Ysc0JBQXNCLENBQUNHLElBQUksQ0FBQ0MsZUFBZTtBQUV6RSxNQUFNQyxXQUFXLFNBQVNULElBQUksQ0FBQztFQUM3QjtBQUNGO0FBQ0E7QUFDQTtFQUNFVSxXQUFXQSxDQUFFQyxPQUFPLEVBQUVDLGlCQUFpQixFQUFHO0lBRXhDLEtBQUssQ0FBRTtNQUNMQyxPQUFPLEVBQUVSLHdCQUF3QixDQUFDUyx5QkFBeUI7TUFFM0Q7TUFDQUMsS0FBSyxFQUFFLFFBQVE7TUFDZkMsT0FBTyxFQUFFLE1BQU07TUFDZkMsYUFBYSxFQUFFO0lBQ2pCLENBQUUsQ0FBQzs7SUFFSDtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSWhCLElBQUksQ0FBRSxHQUFHLEVBQUU7TUFDOUJpQixJQUFJLEVBQUVkLHdCQUF3QixDQUFDZSxzQkFBc0I7TUFFckQ7TUFDQUosT0FBTyxFQUFFLElBQUk7TUFDYkMsYUFBYSxFQUFFLG9DQUFvQztNQUNuREksWUFBWSxFQUFFO0lBQ2hCLENBQUUs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