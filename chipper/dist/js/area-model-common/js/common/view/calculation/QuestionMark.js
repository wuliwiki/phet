// Copyright 2018-2022, University of Colorado Boulder

/**
 * A poolable question-mark symbol
 *
 * This is pooled for performance, as recreating the view structure had unacceptable performance/GC characteristics.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import ReadOnlyProperty from '../../../../../axon/js/ReadOnlyProperty.js';
import Poolable from '../../../../../phet-core/js/Poolable.js';
import { Text } from '../../../../../scenery/js/imports.js';
import areaModelCommon from '../../../areaModelCommon.js';
import AreaModelCommonStrings from '../../../AreaModelCommonStrings.js';
import AreaModelCommonConstants from '../../AreaModelCommonConstants.js';
const questionMarkString = AreaModelCommonStrings.a11y.questionMark;
class QuestionMark extends Text {
  /**
   * @param {Property.<Color>} baseColorProperty
   */
  constructor(baseColorProperty) {
    super('?', {
      font: AreaModelCommonConstants.CALCULATION_TERM_FONT,
      // pdom
      tagName: 'mi',
      pdomNamespace: 'http://www.w3.org/1998/Math/MathML',
      innerContent: questionMarkString
    });

    // @public {string}
    this.accessibleText = questionMarkString;
    this.initialize(baseColorProperty);
  }

  /**
   * @public
   *
   * @param {Property.<Color>} baseColorProperty
   */
  initialize(baseColorProperty) {
    assert && assert(baseColorProperty instanceof ReadOnlyProperty);
    this.fill = baseColorProperty;
  }

  /**
   * Clears the state of this node (releasing references) so it can be freed to the pool (and potentially GC'ed).
   * @public
   */
  clean() {
    this.fill = null;
    this.freeToPool();
  }
}
areaModelCommon.register('QuestionMark', QuestionMark);
Poolable.mixInto(QuestionMark);
export default QuestionMark;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFkT25seVByb3BlcnR5IiwiUG9vbGFibGUiLCJUZXh0IiwiYXJlYU1vZGVsQ29tbW9uIiwiQXJlYU1vZGVsQ29tbW9uU3RyaW5ncyIsIkFyZWFNb2RlbENvbW1vbkNvbnN0YW50cyIsInF1ZXN0aW9uTWFya1N0cmluZyIsImExMXkiLCJxdWVzdGlvbk1hcmsiLCJRdWVzdGlvbk1hcmsiLCJjb25zdHJ1Y3RvciIsImJhc2VDb2xvclByb3BlcnR5IiwiZm9udCIsIkNBTENVTEFUSU9OX1RFUk1fRk9OVCIsInRhZ05hbWUiLCJwZG9tTmFtZXNwYWNlIiwiaW5uZXJDb250ZW50IiwiYWNjZXNzaWJsZVRleHQiLCJpbml0aWFsaXplIiwiYXNzZXJ0IiwiZmlsbCIsImNsZWFuIiwiZnJlZVRvUG9vbCIsInJlZ2lzdGVyIiwibWl4SW50byJdLCJzb3VyY2VzIjpbIlF1ZXN0aW9uTWFyay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHBvb2xhYmxlIHF1ZXN0aW9uLW1hcmsgc3ltYm9sXHJcbiAqXHJcbiAqIFRoaXMgaXMgcG9vbGVkIGZvciBwZXJmb3JtYW5jZSwgYXMgcmVjcmVhdGluZyB0aGUgdmlldyBzdHJ1Y3R1cmUgaGFkIHVuYWNjZXB0YWJsZSBwZXJmb3JtYW5jZS9HQyBjaGFyYWN0ZXJpc3RpY3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL1JlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUG9vbGFibGUgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL1Bvb2xhYmxlLmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBhcmVhTW9kZWxDb21tb24gZnJvbSAnLi4vLi4vLi4vYXJlYU1vZGVsQ29tbW9uLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vblN0cmluZ3MgZnJvbSAnLi4vLi4vLi4vQXJlYU1vZGVsQ29tbW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBBcmVhTW9kZWxDb21tb25Db25zdGFudHMgZnJvbSAnLi4vLi4vQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbmNvbnN0IHF1ZXN0aW9uTWFya1N0cmluZyA9IEFyZWFNb2RlbENvbW1vblN0cmluZ3MuYTExeS5xdWVzdGlvbk1hcms7XHJcblxyXG5jbGFzcyBRdWVzdGlvbk1hcmsgZXh0ZW5kcyBUZXh0IHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxDb2xvcj59IGJhc2VDb2xvclByb3BlcnR5XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGJhc2VDb2xvclByb3BlcnR5ICkge1xyXG5cclxuICAgIHN1cGVyKCAnPycsIHtcclxuICAgICAgZm9udDogQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLkNBTENVTEFUSU9OX1RFUk1fRk9OVCxcclxuXHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgdGFnTmFtZTogJ21pJyxcclxuICAgICAgcGRvbU5hbWVzcGFjZTogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnLFxyXG4gICAgICBpbm5lckNvbnRlbnQ6IHF1ZXN0aW9uTWFya1N0cmluZ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge3N0cmluZ31cclxuICAgIHRoaXMuYWNjZXNzaWJsZVRleHQgPSBxdWVzdGlvbk1hcmtTdHJpbmc7XHJcblxyXG4gICAgdGhpcy5pbml0aWFsaXplKCBiYXNlQ29sb3JQcm9wZXJ0eSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Q29sb3I+fSBiYXNlQ29sb3JQcm9wZXJ0eVxyXG4gICAqL1xyXG4gIGluaXRpYWxpemUoIGJhc2VDb2xvclByb3BlcnR5ICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYmFzZUNvbG9yUHJvcGVydHkgaW5zdGFuY2VvZiBSZWFkT25seVByb3BlcnR5ICk7XHJcblxyXG4gICAgdGhpcy5maWxsID0gYmFzZUNvbG9yUHJvcGVydHk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhcnMgdGhlIHN0YXRlIG9mIHRoaXMgbm9kZSAocmVsZWFzaW5nIHJlZmVyZW5jZXMpIHNvIGl0IGNhbiBiZSBmcmVlZCB0byB0aGUgcG9vbCAoYW5kIHBvdGVudGlhbGx5IEdDJ2VkKS5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY2xlYW4oKSB7XHJcbiAgICB0aGlzLmZpbGwgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuZnJlZVRvUG9vbCgpO1xyXG4gIH1cclxufVxyXG5cclxuYXJlYU1vZGVsQ29tbW9uLnJlZ2lzdGVyKCAnUXVlc3Rpb25NYXJrJywgUXVlc3Rpb25NYXJrICk7XHJcblxyXG5Qb29sYWJsZS5taXhJbnRvKCBRdWVzdGlvbk1hcmsgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFF1ZXN0aW9uTWFyazsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGdCQUFnQixNQUFNLDRDQUE0QztBQUN6RSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksUUFBUSxzQ0FBc0M7QUFDM0QsT0FBT0MsZUFBZSxNQUFNLDZCQUE2QjtBQUN6RCxPQUFPQyxzQkFBc0IsTUFBTSxvQ0FBb0M7QUFDdkUsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBRXhFLE1BQU1DLGtCQUFrQixHQUFHRixzQkFBc0IsQ0FBQ0csSUFBSSxDQUFDQyxZQUFZO0FBRW5FLE1BQU1DLFlBQVksU0FBU1AsSUFBSSxDQUFDO0VBQzlCO0FBQ0Y7QUFDQTtFQUNFUSxXQUFXQSxDQUFFQyxpQkFBaUIsRUFBRztJQUUvQixLQUFLLENBQUUsR0FBRyxFQUFFO01BQ1ZDLElBQUksRUFBRVAsd0JBQXdCLENBQUNRLHFCQUFxQjtNQUVwRDtNQUNBQyxPQUFPLEVBQUUsSUFBSTtNQUNiQyxhQUFhLEVBQUUsb0NBQW9DO01BQ25EQyxZQUFZLEVBQUVWO0lBQ2hCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ1csY0FBYyxHQUFHWCxrQkFBa0I7SUFFeEMsSUFBSSxDQUFDWSxVQUFVLENBQUVQLGlCQUFrQixDQUFDO0VBQ3RDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU8sVUFBVUEsQ0FBRVAsaUJBQWlCLEVBQUc7SUFDOUJRLE1BQU0sSUFBSUEsTUFBTSxDQUFFUixpQkFBaUIsWUFBWVgsZ0JBQWlCLENBQUM7SUFFakUsSUFBSSxDQUFDb0IsSUFBSSxHQUFHVCxpQkFBaUI7RUFDL0I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRVUsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxDQUFDRCxJQUFJLEdBQUcsSUFBSTtJQUVoQixJQUFJLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQ25CO0FBQ0Y7QUFFQW5CLGVBQWUsQ0FBQ29CLFFBQVEsQ0FBRSxjQUFjLEVBQUVkLFlBQWEsQ0FBQztBQUV4RFIsUUFBUSxDQUFDdUIsT0FBTyxDQUFFZixZQUFhLENBQUM7QUFFaEMsZUFBZUEsWUFBWSJ9