// Copyright 2018-2021, University of Colorado Boulder

/**
 * Calculation line that is essentially the "ordered" line, but where negative terms use a binary 'minus' in front
 * where possible, instead of a unary minus.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import areaModelCommon from '../../../areaModelCommon.js';
import CalculationLine from './CalculationLine.js';
class MinusesLine extends CalculationLine {
  /**
   * @param {TermList} orderedTermList
   * @param {Area} area
   * @param {Property.<number|null>} activeIndexProperty
   * @param {boolean} allowExponents - Whether exponents (powers of x) are allowed
   * @param {boolean} isProportional - Whether the area is shown as proportional (instead of generic)
   */
  constructor(orderedTermList, area, activeIndexProperty, allowExponents, isProportional) {
    super(CalculationLine.MINUSES_LINE_INDEX, area.colorProperties, activeIndexProperty, allowExponents, isProportional);
    this.node = this.sumOrDifferenceOfTerms(orderedTermList.terms);
  }
}
areaModelCommon.register('MinusesLine', MinusesLine);
export default MinusesLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcmVhTW9kZWxDb21tb24iLCJDYWxjdWxhdGlvbkxpbmUiLCJNaW51c2VzTGluZSIsImNvbnN0cnVjdG9yIiwib3JkZXJlZFRlcm1MaXN0IiwiYXJlYSIsImFjdGl2ZUluZGV4UHJvcGVydHkiLCJhbGxvd0V4cG9uZW50cyIsImlzUHJvcG9ydGlvbmFsIiwiTUlOVVNFU19MSU5FX0lOREVYIiwiY29sb3JQcm9wZXJ0aWVzIiwibm9kZSIsInN1bU9yRGlmZmVyZW5jZU9mVGVybXMiLCJ0ZXJtcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWludXNlc0xpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRpb24gbGluZSB0aGF0IGlzIGVzc2VudGlhbGx5IHRoZSBcIm9yZGVyZWRcIiBsaW5lLCBidXQgd2hlcmUgbmVnYXRpdmUgdGVybXMgdXNlIGEgYmluYXJ5ICdtaW51cycgaW4gZnJvbnRcclxuICogd2hlcmUgcG9zc2libGUsIGluc3RlYWQgb2YgYSB1bmFyeSBtaW51cy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBhcmVhTW9kZWxDb21tb24gZnJvbSAnLi4vLi4vLi4vYXJlYU1vZGVsQ29tbW9uLmpzJztcclxuaW1wb3J0IENhbGN1bGF0aW9uTGluZSBmcm9tICcuL0NhbGN1bGF0aW9uTGluZS5qcyc7XHJcblxyXG5jbGFzcyBNaW51c2VzTGluZSBleHRlbmRzIENhbGN1bGF0aW9uTGluZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUZXJtTGlzdH0gb3JkZXJlZFRlcm1MaXN0XHJcbiAgICogQHBhcmFtIHtBcmVhfSBhcmVhXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyfG51bGw+fSBhY3RpdmVJbmRleFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtib29sZWFufSBhbGxvd0V4cG9uZW50cyAtIFdoZXRoZXIgZXhwb25lbnRzIChwb3dlcnMgb2YgeCkgYXJlIGFsbG93ZWRcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUHJvcG9ydGlvbmFsIC0gV2hldGhlciB0aGUgYXJlYSBpcyBzaG93biBhcyBwcm9wb3J0aW9uYWwgKGluc3RlYWQgb2YgZ2VuZXJpYylcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3JkZXJlZFRlcm1MaXN0LCBhcmVhLCBhY3RpdmVJbmRleFByb3BlcnR5LCBhbGxvd0V4cG9uZW50cywgaXNQcm9wb3J0aW9uYWwgKSB7XHJcbiAgICBzdXBlciggQ2FsY3VsYXRpb25MaW5lLk1JTlVTRVNfTElORV9JTkRFWCwgYXJlYS5jb2xvclByb3BlcnRpZXMsIGFjdGl2ZUluZGV4UHJvcGVydHksIGFsbG93RXhwb25lbnRzLCBpc1Byb3BvcnRpb25hbCApO1xyXG5cclxuICAgIHRoaXMubm9kZSA9IHRoaXMuc3VtT3JEaWZmZXJlbmNlT2ZUZXJtcyggb3JkZXJlZFRlcm1MaXN0LnRlcm1zICk7XHJcbiAgfVxyXG59XHJcblxyXG5hcmVhTW9kZWxDb21tb24ucmVnaXN0ZXIoICdNaW51c2VzTGluZScsIE1pbnVzZXNMaW5lICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNaW51c2VzTGluZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFbEQsTUFBTUMsV0FBVyxTQUFTRCxlQUFlLENBQUM7RUFDeEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxJQUFJLEVBQUVDLG1CQUFtQixFQUFFQyxjQUFjLEVBQUVDLGNBQWMsRUFBRztJQUN4RixLQUFLLENBQUVQLGVBQWUsQ0FBQ1Esa0JBQWtCLEVBQUVKLElBQUksQ0FBQ0ssZUFBZSxFQUFFSixtQkFBbUIsRUFBRUMsY0FBYyxFQUFFQyxjQUFlLENBQUM7SUFFdEgsSUFBSSxDQUFDRyxJQUFJLEdBQUcsSUFBSSxDQUFDQyxzQkFBc0IsQ0FBRVIsZUFBZSxDQUFDUyxLQUFNLENBQUM7RUFDbEU7QUFDRjtBQUVBYixlQUFlLENBQUNjLFFBQVEsQ0FBRSxhQUFhLEVBQUVaLFdBQVksQ0FBQztBQUV0RCxlQUFlQSxXQUFXIn0=