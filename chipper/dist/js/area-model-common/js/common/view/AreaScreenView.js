// Copyright 2017-2022, University of Colorado Boulder

/**
 * Supertype ScreenView for generic/proportional screens (NOT the game screens)
 *
 * NOTE: This type is designed to be persistent, and will not need to release references to avoid memory leaks.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../../axon/js/Property.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import ScreenView from '../../../../joist/js/ScreenView.js';
import interleave from '../../../../phet-core/js/interleave.js';
import merge from '../../../../phet-core/js/merge.js';
import required from '../../../../phet-core/js/required.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import { AlignBox, Line, Text, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import areaModelCommon from '../../areaModelCommon.js';
import AreaModelCommonStrings from '../../AreaModelCommonStrings.js';
import CalculationBox from '../../proportional/view/CalculationBox.js';
import AreaModelCommonConstants from '../AreaModelCommonConstants.js';
import AreaModelCommonGlobals from '../AreaModelCommonGlobals.js';
import AreaModelCommonModel from '../model/AreaModelCommonModel.js';
import AreaCalculationRadioButtonGroup from './AreaCalculationRadioButtonGroup.js';
import AreaModelCommonAccordionBox from './AreaModelCommonAccordionBox.js';
import AreaModelCommonColors from './AreaModelCommonColors.js';
import CalculationNode from './CalculationNode.js';
import PartialProductRadioButtonGroup from './PartialProductRadioButtonGroup.js';
import TotalAreaNode from './TotalAreaNode.js';
const areaModelCalculationString = AreaModelCommonStrings.areaModelCalculation;
const dimensionsString = AreaModelCommonStrings.dimensions;
const factorsString = AreaModelCommonStrings.factors;
const partialProductsString = AreaModelCommonStrings.partialProducts;
const productString = AreaModelCommonStrings.product;
const totalAreaOfModelString = AreaModelCommonStrings.totalAreaOfModel;
const factorsBoxString = AreaModelCommonStrings.a11y.factorsBox;
const factorsBoxDescriptionString = AreaModelCommonStrings.a11y.factorsBoxDescription;
const productBoxString = AreaModelCommonStrings.a11y.productBox;
const productBoxDescriptionString = AreaModelCommonStrings.a11y.productBoxDescription;
class AreaScreenView extends ScreenView {
  /**
   * @extends {ScreenView}
   *
   * @param {AreaModelCommonModel} model
   * @param {Object} config
   */
  constructor(model, config) {
    config = merge({
      // {number} How many decimal places should be shown
      decimalPlaces: required(config.decimalPlaces),
      // {boolean} Whether we show options that let the user select the partial product style
      showProductsSelection: true,
      // {boolean} (optional) - Whether we show options that let the user select the calculation style
      showCalculationSelection: true,
      // {boolean} (optional) - Selected area background and products box use a light-tile-colored background
      useTileLikeBackground: false,
      // {boolean} (optional) - Uses "product" and "factors" to be simpler and more multiplication-like
      useSimplifiedNames: false,
      // {boolean} (optional) - If true, changes the position/size of the area to take up more space
      useLargeArea: false,
      // {boolean} (optional) - If true, a simplified accordion box will be used for the calculation lines (instead of a panel).
      // Notably, the accordion box does NOT support line-by-line appearance, and can be collapsed.
      useCalculationBox: false,
      // {function} (optional) - Remaps or adds to the right-side align nodes - TODO: Can we change how this is done
      // without inheritance?
      getRightAlignNodes: nodes => nodes,
      // {function} - TODO: HORRIBLE workaround, will need to restructure this --- it's called with a `this` reference
      // and will provide a node passed to getSelectionNodesProperty().
      getSelectionNodesExtras: screenView => null
    }, config);
    assert && assert(model instanceof AreaModelCommonModel);
    super();

    // @protected {AreaModelCommonModel}
    this.model = model;

    // @protected {boolean}
    this.useTileLikeBackground = config.useTileLikeBackground;
    this.useLargeArea = config.useLargeArea;
    this.showProductsSelection = config.showProductsSelection;
    this.showCalculationSelection = config.showCalculationSelection;

    // @protected {Node} - Exposed for a11y selection
    this.productsSelectionPanel = this.createPanelContent(partialProductsString, AreaModelCommonGlobals.panelAlignGroup, new PartialProductRadioButtonGroup(model, AreaModelCommonGlobals.selectionButtonAlignGroup));

    // @public {Node} (a11y)
    this.calculationSelectionPanel = this.createPanelContent(areaModelCalculationString, AreaModelCommonGlobals.panelAlignGroup, new AreaCalculationRadioButtonGroup(model.areaCalculationChoiceProperty, AreaModelCommonGlobals.selectionButtonAlignGroup));
    const selectionContent = new VBox({
      spacing: 15
    });
    this.getSelectionNodesProperty(config.getSelectionNodesExtras(this)).link(selectionNodes => {
      selectionContent.children = interleave(selectionNodes, () => new Line({
        x2: AreaModelCommonConstants.PANEL_INTERIOR_MAX,
        stroke: AreaModelCommonColors.selectionSeparatorProperty
      }));
    });

    // @protected {Node} (a11y) - Shows radio button groups to select partial product / calculation / partition line options.
    this.selectionPanel = new Panel(selectionContent, {
      xMargin: 15,
      yMargin: 10,
      fill: AreaModelCommonColors.panelBackgroundProperty,
      stroke: AreaModelCommonColors.panelBorderProperty,
      cornerRadius: AreaModelCommonConstants.PANEL_CORNER_RADIUS
    });
    const factorsBoxContent = new AlignBox(this.createFactorsNode(model, config.decimalPlaces), {
      group: AreaModelCommonGlobals.panelAlignGroup,
      xAlign: 'center'
    });

    // @protected {Node} (a11y) - Exposed for a11y order
    this.factorsBox = new AreaModelCommonAccordionBox(config.useSimplifiedNames ? factorsString : dimensionsString, model.factorsBoxExpandedProperty, factorsBoxContent, {
      // Cut some spacing from the exponent-enabled one, as it looks like way too much padding otherwise
      contentYSpacing: model.allowExponents ? 5 : 8,
      // pdom
      labelTagName: 'h3',
      labelContent: factorsBoxString,
      titleBarOptions: {
        descriptionContent: factorsBoxDescriptionString
      }
    });
    const areaBoxContent = new AlignBox(new TotalAreaNode(model.totalAreaProperty, model.isProportional, model.isProportional ? model.getMaximumAreaString() : '', this.useTileLikeBackground), {
      group: AreaModelCommonGlobals.panelAlignGroup,
      xAlign: 'center'
    });

    // @protected {Node} (a11y)
    this.areaBox = new AreaModelCommonAccordionBox(config.useSimplifiedNames ? productString : totalAreaOfModelString, model.areaBoxExpandedProperty, areaBoxContent, {
      // pdom
      labelTagName: 'h3',
      labelContent: productBoxString,
      titleBarOptions: {
        descriptionContent: productBoxDescriptionString
      }
    });

    // @protected {VBox} - Available for subtype positioning relative to this.
    this.rightPanelContainer = new VBox({
      children: config.getRightAlignNodes([this.factorsBox, this.areaBox, ...(this.showCalculationSelection || this.showProductsSelection ? [this.selectionPanel] : [])], this),
      spacing: AreaModelCommonConstants.LAYOUT_SPACING
    });
    this.addChild(new AlignBox(this.rightPanelContainer, {
      alignBounds: this.layoutBounds,
      xAlign: 'right',
      yAlign: 'top',
      margin: AreaModelCommonConstants.LAYOUT_SPACING
    }));

    // @protected {Node|null} (a11y) - The calculation panel/box near the bottom of the screen
    this.calculationNode = null;
    if (config.useCalculationBox) {
      const calculationTop = AreaModelCommonConstants.MAIN_AREA_OFFSET.y + AreaModelCommonConstants.AREA_SIZE + AreaModelCommonConstants.LAYOUT_SPACING + 30;
      const calculationBottom = this.layoutBounds.bottom - AreaModelCommonConstants.LAYOUT_SPACING;
      const calculationBounds = new Bounds2(0, 0, AreaModelCommonConstants.AREA_SIZE, calculationBottom - calculationTop);
      this.calculationNode = new CalculationBox(model, calculationBounds, {
        x: AreaModelCommonConstants.MAIN_AREA_OFFSET.x,
        y: calculationTop
      });
    } else {
      this.calculationNode = new CalculationNode(model);
    }
    this.addChild(this.calculationNode);

    // @protected {Node} (a11y) - Reset all button
    this.resetAllButton = new ResetAllButton({
      listener: () => {
        model.reset();
      },
      right: this.layoutBounds.right - AreaModelCommonConstants.LAYOUT_SPACING,
      bottom: this.layoutBounds.bottom - AreaModelCommonConstants.LAYOUT_SPACING
    });
    this.addChild(this.resetAllButton);

    // @protected {AreaDisplayNode}
    this.areaDisplayNode = this.createAreaDisplayNode(model);
    this.addChild(this.areaDisplayNode);
  }

  /**
   * Steps the view forward, updating things that only update once a frame.
   * @public
   *
   * @param {number} dt
   */
  step(dt) {
    // No animation is happening in the view. This is for batching updates to happen only once a frame.
    this.calculationNode.update();
    this.areaDisplayNode.update();
  }

  /**
   * The content embedded in the selection panel varies depending on the subtype, so we provide overriding here.
   * @protected
   *
   * NOTE: We need to support the fact that this can change, so it's a Property
   *
   * @returns {Property.<Array.<Node>>}
   */
  getSelectionNodesProperty() {
    const selectionNodes = [];
    if (this.showProductsSelection) {
      selectionNodes.push(this.productsSelectionPanel);
    }
    if (this.showCalculationSelection) {
      selectionNodes.push(this.calculationSelectionPanel);
    }
    return new Property(selectionNodes, {
      isValidValue: nodes => !_.some(nodes, node => !node)
    });
  }

  /**
   * Creates a panel interior with the title left-aligned, and the content somewhat offset from the left with a
   * guaranteed margin.
   * @protected
   *
   * @param {string} titleString
   * @param {AlignGroup} panelAlignGroup
   * @param {Node} content
   */
  createPanelContent(titleString, panelAlignGroup, content) {
    return new VBox({
      children: [new AlignBox(new Text(titleString, {
        font: AreaModelCommonConstants.TITLE_FONT,
        maxWidth: AreaModelCommonConstants.PANEL_INTERIOR_MAX
      }), {
        group: panelAlignGroup,
        xAlign: 'left'
      }), new AlignBox(content, {
        group: panelAlignGroup,
        xAlign: 'center',
        xMargin: 15
      })],
      spacing: 10
    });
  }

  /**
   * Returns the ideal translation for instances of AreaDisplayNode on the main view.
   * @protected
   *
   * @returns {Vector2}
   */
  getDisplayTranslation() {
    return this.layoutBounds.leftTop.plus(this.useLargeArea ? AreaModelCommonConstants.LARGE_AREA_OFFSET : AreaModelCommonConstants.MAIN_AREA_OFFSET);
  }

  /**
   * Creates the "factors" (dimensions) content for the accordion box.
   * @public
   *
   * @param {AreaModelCommonModel} model
   * @param {number} decimalPlaces
   * @returns {Node}
   */
  createFactorsNode(model, decimalPlaces) {
    throw new Error('abstract method, should be implemented by subtype');
  }

  /**
   * Creates the main area display view for the screen.
   * @public
   *
   * @param {AreaModelCommonModel} model
   * @returns {AreaDisplayNode}
   */
  createAreaDisplayNode(model) {
    throw new Error('abstract method, should be implemented by subtype');
  }
}
areaModelCommon.register('AreaScreenView', AreaScreenView);
export default AreaScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkJvdW5kczIiLCJTY3JlZW5WaWV3IiwiaW50ZXJsZWF2ZSIsIm1lcmdlIiwicmVxdWlyZWQiLCJSZXNldEFsbEJ1dHRvbiIsIkFsaWduQm94IiwiTGluZSIsIlRleHQiLCJWQm94IiwiUGFuZWwiLCJhcmVhTW9kZWxDb21tb24iLCJBcmVhTW9kZWxDb21tb25TdHJpbmdzIiwiQ2FsY3VsYXRpb25Cb3giLCJBcmVhTW9kZWxDb21tb25Db25zdGFudHMiLCJBcmVhTW9kZWxDb21tb25HbG9iYWxzIiwiQXJlYU1vZGVsQ29tbW9uTW9kZWwiLCJBcmVhQ2FsY3VsYXRpb25SYWRpb0J1dHRvbkdyb3VwIiwiQXJlYU1vZGVsQ29tbW9uQWNjb3JkaW9uQm94IiwiQXJlYU1vZGVsQ29tbW9uQ29sb3JzIiwiQ2FsY3VsYXRpb25Ob2RlIiwiUGFydGlhbFByb2R1Y3RSYWRpb0J1dHRvbkdyb3VwIiwiVG90YWxBcmVhTm9kZSIsImFyZWFNb2RlbENhbGN1bGF0aW9uU3RyaW5nIiwiYXJlYU1vZGVsQ2FsY3VsYXRpb24iLCJkaW1lbnNpb25zU3RyaW5nIiwiZGltZW5zaW9ucyIsImZhY3RvcnNTdHJpbmciLCJmYWN0b3JzIiwicGFydGlhbFByb2R1Y3RzU3RyaW5nIiwicGFydGlhbFByb2R1Y3RzIiwicHJvZHVjdFN0cmluZyIsInByb2R1Y3QiLCJ0b3RhbEFyZWFPZk1vZGVsU3RyaW5nIiwidG90YWxBcmVhT2ZNb2RlbCIsImZhY3RvcnNCb3hTdHJpbmciLCJhMTF5IiwiZmFjdG9yc0JveCIsImZhY3RvcnNCb3hEZXNjcmlwdGlvblN0cmluZyIsImZhY3RvcnNCb3hEZXNjcmlwdGlvbiIsInByb2R1Y3RCb3hTdHJpbmciLCJwcm9kdWN0Qm94IiwicHJvZHVjdEJveERlc2NyaXB0aW9uU3RyaW5nIiwicHJvZHVjdEJveERlc2NyaXB0aW9uIiwiQXJlYVNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwiY29uZmlnIiwiZGVjaW1hbFBsYWNlcyIsInNob3dQcm9kdWN0c1NlbGVjdGlvbiIsInNob3dDYWxjdWxhdGlvblNlbGVjdGlvbiIsInVzZVRpbGVMaWtlQmFja2dyb3VuZCIsInVzZVNpbXBsaWZpZWROYW1lcyIsInVzZUxhcmdlQXJlYSIsInVzZUNhbGN1bGF0aW9uQm94IiwiZ2V0UmlnaHRBbGlnbk5vZGVzIiwibm9kZXMiLCJnZXRTZWxlY3Rpb25Ob2Rlc0V4dHJhcyIsInNjcmVlblZpZXciLCJhc3NlcnQiLCJwcm9kdWN0c1NlbGVjdGlvblBhbmVsIiwiY3JlYXRlUGFuZWxDb250ZW50IiwicGFuZWxBbGlnbkdyb3VwIiwic2VsZWN0aW9uQnV0dG9uQWxpZ25Hcm91cCIsImNhbGN1bGF0aW9uU2VsZWN0aW9uUGFuZWwiLCJhcmVhQ2FsY3VsYXRpb25DaG9pY2VQcm9wZXJ0eSIsInNlbGVjdGlvbkNvbnRlbnQiLCJzcGFjaW5nIiwiZ2V0U2VsZWN0aW9uTm9kZXNQcm9wZXJ0eSIsImxpbmsiLCJzZWxlY3Rpb25Ob2RlcyIsImNoaWxkcmVuIiwieDIiLCJQQU5FTF9JTlRFUklPUl9NQVgiLCJzdHJva2UiLCJzZWxlY3Rpb25TZXBhcmF0b3JQcm9wZXJ0eSIsInNlbGVjdGlvblBhbmVsIiwieE1hcmdpbiIsInlNYXJnaW4iLCJmaWxsIiwicGFuZWxCYWNrZ3JvdW5kUHJvcGVydHkiLCJwYW5lbEJvcmRlclByb3BlcnR5IiwiY29ybmVyUmFkaXVzIiwiUEFORUxfQ09STkVSX1JBRElVUyIsImZhY3RvcnNCb3hDb250ZW50IiwiY3JlYXRlRmFjdG9yc05vZGUiLCJncm91cCIsInhBbGlnbiIsImZhY3RvcnNCb3hFeHBhbmRlZFByb3BlcnR5IiwiY29udGVudFlTcGFjaW5nIiwiYWxsb3dFeHBvbmVudHMiLCJsYWJlbFRhZ05hbWUiLCJsYWJlbENvbnRlbnQiLCJ0aXRsZUJhck9wdGlvbnMiLCJkZXNjcmlwdGlvbkNvbnRlbnQiLCJhcmVhQm94Q29udGVudCIsInRvdGFsQXJlYVByb3BlcnR5IiwiaXNQcm9wb3J0aW9uYWwiLCJnZXRNYXhpbXVtQXJlYVN0cmluZyIsImFyZWFCb3giLCJhcmVhQm94RXhwYW5kZWRQcm9wZXJ0eSIsInJpZ2h0UGFuZWxDb250YWluZXIiLCJMQVlPVVRfU1BBQ0lORyIsImFkZENoaWxkIiwiYWxpZ25Cb3VuZHMiLCJsYXlvdXRCb3VuZHMiLCJ5QWxpZ24iLCJtYXJnaW4iLCJjYWxjdWxhdGlvbk5vZGUiLCJjYWxjdWxhdGlvblRvcCIsIk1BSU5fQVJFQV9PRkZTRVQiLCJ5IiwiQVJFQV9TSVpFIiwiY2FsY3VsYXRpb25Cb3R0b20iLCJib3R0b20iLCJjYWxjdWxhdGlvbkJvdW5kcyIsIngiLCJyZXNldEFsbEJ1dHRvbiIsImxpc3RlbmVyIiwicmVzZXQiLCJyaWdodCIsImFyZWFEaXNwbGF5Tm9kZSIsImNyZWF0ZUFyZWFEaXNwbGF5Tm9kZSIsInN0ZXAiLCJkdCIsInVwZGF0ZSIsInB1c2giLCJpc1ZhbGlkVmFsdWUiLCJfIiwic29tZSIsIm5vZGUiLCJ0aXRsZVN0cmluZyIsImNvbnRlbnQiLCJmb250IiwiVElUTEVfRk9OVCIsIm1heFdpZHRoIiwiZ2V0RGlzcGxheVRyYW5zbGF0aW9uIiwibGVmdFRvcCIsInBsdXMiLCJMQVJHRV9BUkVBX09GRlNFVCIsIkVycm9yIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBcmVhU2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTdXBlcnR5cGUgU2NyZWVuVmlldyBmb3IgZ2VuZXJpYy9wcm9wb3J0aW9uYWwgc2NyZWVucyAoTk9UIHRoZSBnYW1lIHNjcmVlbnMpXHJcbiAqXHJcbiAqIE5PVEU6IFRoaXMgdHlwZSBpcyBkZXNpZ25lZCB0byBiZSBwZXJzaXN0ZW50LCBhbmQgd2lsbCBub3QgbmVlZCB0byByZWxlYXNlIHJlZmVyZW5jZXMgdG8gYXZvaWQgbWVtb3J5IGxlYWtzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBTY3JlZW5WaWV3IGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgaW50ZXJsZWF2ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvaW50ZXJsZWF2ZS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgcmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFJlc2V0QWxsQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9idXR0b25zL1Jlc2V0QWxsQnV0dG9uLmpzJztcclxuaW1wb3J0IHsgQWxpZ25Cb3gsIExpbmUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IGFyZWFNb2RlbENvbW1vbiBmcm9tICcuLi8uLi9hcmVhTW9kZWxDb21tb24uanMnO1xyXG5pbXBvcnQgQXJlYU1vZGVsQ29tbW9uU3RyaW5ncyBmcm9tICcuLi8uLi9BcmVhTW9kZWxDb21tb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IENhbGN1bGF0aW9uQm94IGZyb20gJy4uLy4uL3Byb3BvcnRpb25hbC92aWV3L0NhbGN1bGF0aW9uQm94LmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vbkNvbnN0YW50cyBmcm9tICcuLi9BcmVhTW9kZWxDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgQXJlYU1vZGVsQ29tbW9uR2xvYmFscyBmcm9tICcuLi9BcmVhTW9kZWxDb21tb25HbG9iYWxzLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vbk1vZGVsIGZyb20gJy4uL21vZGVsL0FyZWFNb2RlbENvbW1vbk1vZGVsLmpzJztcclxuaW1wb3J0IEFyZWFDYWxjdWxhdGlvblJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi9BcmVhQ2FsY3VsYXRpb25SYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vbkFjY29yZGlvbkJveCBmcm9tICcuL0FyZWFNb2RlbENvbW1vbkFjY29yZGlvbkJveC5qcyc7XHJcbmltcG9ydCBBcmVhTW9kZWxDb21tb25Db2xvcnMgZnJvbSAnLi9BcmVhTW9kZWxDb21tb25Db2xvcnMuanMnO1xyXG5pbXBvcnQgQ2FsY3VsYXRpb25Ob2RlIGZyb20gJy4vQ2FsY3VsYXRpb25Ob2RlLmpzJztcclxuaW1wb3J0IFBhcnRpYWxQcm9kdWN0UmFkaW9CdXR0b25Hcm91cCBmcm9tICcuL1BhcnRpYWxQcm9kdWN0UmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBUb3RhbEFyZWFOb2RlIGZyb20gJy4vVG90YWxBcmVhTm9kZS5qcyc7XHJcblxyXG5jb25zdCBhcmVhTW9kZWxDYWxjdWxhdGlvblN0cmluZyA9IEFyZWFNb2RlbENvbW1vblN0cmluZ3MuYXJlYU1vZGVsQ2FsY3VsYXRpb247XHJcbmNvbnN0IGRpbWVuc2lvbnNTdHJpbmcgPSBBcmVhTW9kZWxDb21tb25TdHJpbmdzLmRpbWVuc2lvbnM7XHJcbmNvbnN0IGZhY3RvcnNTdHJpbmcgPSBBcmVhTW9kZWxDb21tb25TdHJpbmdzLmZhY3RvcnM7XHJcbmNvbnN0IHBhcnRpYWxQcm9kdWN0c1N0cmluZyA9IEFyZWFNb2RlbENvbW1vblN0cmluZ3MucGFydGlhbFByb2R1Y3RzO1xyXG5jb25zdCBwcm9kdWN0U3RyaW5nID0gQXJlYU1vZGVsQ29tbW9uU3RyaW5ncy5wcm9kdWN0O1xyXG5jb25zdCB0b3RhbEFyZWFPZk1vZGVsU3RyaW5nID0gQXJlYU1vZGVsQ29tbW9uU3RyaW5ncy50b3RhbEFyZWFPZk1vZGVsO1xyXG5jb25zdCBmYWN0b3JzQm94U3RyaW5nID0gQXJlYU1vZGVsQ29tbW9uU3RyaW5ncy5hMTF5LmZhY3RvcnNCb3g7XHJcbmNvbnN0IGZhY3RvcnNCb3hEZXNjcmlwdGlvblN0cmluZyA9IEFyZWFNb2RlbENvbW1vblN0cmluZ3MuYTExeS5mYWN0b3JzQm94RGVzY3JpcHRpb247XHJcbmNvbnN0IHByb2R1Y3RCb3hTdHJpbmcgPSBBcmVhTW9kZWxDb21tb25TdHJpbmdzLmExMXkucHJvZHVjdEJveDtcclxuY29uc3QgcHJvZHVjdEJveERlc2NyaXB0aW9uU3RyaW5nID0gQXJlYU1vZGVsQ29tbW9uU3RyaW5ncy5hMTF5LnByb2R1Y3RCb3hEZXNjcmlwdGlvbjtcclxuXHJcbmNsYXNzIEFyZWFTY3JlZW5WaWV3IGV4dGVuZHMgU2NyZWVuVmlldyB7XHJcbiAgLyoqXHJcbiAgICogQGV4dGVuZHMge1NjcmVlblZpZXd9XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FyZWFNb2RlbENvbW1vbk1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIGNvbmZpZyApIHtcclxuICAgIGNvbmZpZyA9IG1lcmdlKCB7XHJcblxyXG4gICAgICAvLyB7bnVtYmVyfSBIb3cgbWFueSBkZWNpbWFsIHBsYWNlcyBzaG91bGQgYmUgc2hvd25cclxuICAgICAgZGVjaW1hbFBsYWNlczogcmVxdWlyZWQoIGNvbmZpZy5kZWNpbWFsUGxhY2VzICksXHJcblxyXG4gICAgICAvLyB7Ym9vbGVhbn0gV2hldGhlciB3ZSBzaG93IG9wdGlvbnMgdGhhdCBsZXQgdGhlIHVzZXIgc2VsZWN0IHRoZSBwYXJ0aWFsIHByb2R1Y3Qgc3R5bGVcclxuICAgICAgc2hvd1Byb2R1Y3RzU2VsZWN0aW9uOiB0cnVlLFxyXG5cclxuICAgICAgLy8ge2Jvb2xlYW59IChvcHRpb25hbCkgLSBXaGV0aGVyIHdlIHNob3cgb3B0aW9ucyB0aGF0IGxldCB0aGUgdXNlciBzZWxlY3QgdGhlIGNhbGN1bGF0aW9uIHN0eWxlXHJcbiAgICAgIHNob3dDYWxjdWxhdGlvblNlbGVjdGlvbjogdHJ1ZSxcclxuXHJcbiAgICAgIC8vIHtib29sZWFufSAob3B0aW9uYWwpIC0gU2VsZWN0ZWQgYXJlYSBiYWNrZ3JvdW5kIGFuZCBwcm9kdWN0cyBib3ggdXNlIGEgbGlnaHQtdGlsZS1jb2xvcmVkIGJhY2tncm91bmRcclxuICAgICAgdXNlVGlsZUxpa2VCYWNrZ3JvdW5kOiBmYWxzZSxcclxuXHJcbiAgICAgIC8vIHtib29sZWFufSAob3B0aW9uYWwpIC0gVXNlcyBcInByb2R1Y3RcIiBhbmQgXCJmYWN0b3JzXCIgdG8gYmUgc2ltcGxlciBhbmQgbW9yZSBtdWx0aXBsaWNhdGlvbi1saWtlXHJcbiAgICAgIHVzZVNpbXBsaWZpZWROYW1lczogZmFsc2UsXHJcblxyXG4gICAgICAvLyB7Ym9vbGVhbn0gKG9wdGlvbmFsKSAtIElmIHRydWUsIGNoYW5nZXMgdGhlIHBvc2l0aW9uL3NpemUgb2YgdGhlIGFyZWEgdG8gdGFrZSB1cCBtb3JlIHNwYWNlXHJcbiAgICAgIHVzZUxhcmdlQXJlYTogZmFsc2UsXHJcblxyXG4gICAgICAvLyB7Ym9vbGVhbn0gKG9wdGlvbmFsKSAtIElmIHRydWUsIGEgc2ltcGxpZmllZCBhY2NvcmRpb24gYm94IHdpbGwgYmUgdXNlZCBmb3IgdGhlIGNhbGN1bGF0aW9uIGxpbmVzIChpbnN0ZWFkIG9mIGEgcGFuZWwpLlxyXG4gICAgICAvLyBOb3RhYmx5LCB0aGUgYWNjb3JkaW9uIGJveCBkb2VzIE5PVCBzdXBwb3J0IGxpbmUtYnktbGluZSBhcHBlYXJhbmNlLCBhbmQgY2FuIGJlIGNvbGxhcHNlZC5cclxuICAgICAgdXNlQ2FsY3VsYXRpb25Cb3g6IGZhbHNlLFxyXG5cclxuICAgICAgLy8ge2Z1bmN0aW9ufSAob3B0aW9uYWwpIC0gUmVtYXBzIG9yIGFkZHMgdG8gdGhlIHJpZ2h0LXNpZGUgYWxpZ24gbm9kZXMgLSBUT0RPOiBDYW4gd2UgY2hhbmdlIGhvdyB0aGlzIGlzIGRvbmVcclxuICAgICAgLy8gd2l0aG91dCBpbmhlcml0YW5jZT9cclxuICAgICAgZ2V0UmlnaHRBbGlnbk5vZGVzOiBub2RlcyA9PiBub2RlcyxcclxuXHJcbiAgICAgIC8vIHtmdW5jdGlvbn0gLSBUT0RPOiBIT1JSSUJMRSB3b3JrYXJvdW5kLCB3aWxsIG5lZWQgdG8gcmVzdHJ1Y3R1cmUgdGhpcyAtLS0gaXQncyBjYWxsZWQgd2l0aCBhIGB0aGlzYCByZWZlcmVuY2VcclxuICAgICAgLy8gYW5kIHdpbGwgcHJvdmlkZSBhIG5vZGUgcGFzc2VkIHRvIGdldFNlbGVjdGlvbk5vZGVzUHJvcGVydHkoKS5cclxuICAgICAgZ2V0U2VsZWN0aW9uTm9kZXNFeHRyYXM6IHNjcmVlblZpZXcgPT4gbnVsbFxyXG4gICAgfSwgY29uZmlnICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbW9kZWwgaW5zdGFuY2VvZiBBcmVhTW9kZWxDb21tb25Nb2RlbCApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gQHByb3RlY3RlZCB7QXJlYU1vZGVsQ29tbW9uTW9kZWx9XHJcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcblxyXG4gICAgLy8gQHByb3RlY3RlZCB7Ym9vbGVhbn1cclxuICAgIHRoaXMudXNlVGlsZUxpa2VCYWNrZ3JvdW5kID0gY29uZmlnLnVzZVRpbGVMaWtlQmFja2dyb3VuZDtcclxuICAgIHRoaXMudXNlTGFyZ2VBcmVhID0gY29uZmlnLnVzZUxhcmdlQXJlYTtcclxuICAgIHRoaXMuc2hvd1Byb2R1Y3RzU2VsZWN0aW9uID0gY29uZmlnLnNob3dQcm9kdWN0c1NlbGVjdGlvbjtcclxuICAgIHRoaXMuc2hvd0NhbGN1bGF0aW9uU2VsZWN0aW9uID0gY29uZmlnLnNob3dDYWxjdWxhdGlvblNlbGVjdGlvbjtcclxuXHJcbiAgICAvLyBAcHJvdGVjdGVkIHtOb2RlfSAtIEV4cG9zZWQgZm9yIGExMXkgc2VsZWN0aW9uXHJcbiAgICB0aGlzLnByb2R1Y3RzU2VsZWN0aW9uUGFuZWwgPSB0aGlzLmNyZWF0ZVBhbmVsQ29udGVudChcclxuICAgICAgcGFydGlhbFByb2R1Y3RzU3RyaW5nLFxyXG4gICAgICBBcmVhTW9kZWxDb21tb25HbG9iYWxzLnBhbmVsQWxpZ25Hcm91cCxcclxuICAgICAgbmV3IFBhcnRpYWxQcm9kdWN0UmFkaW9CdXR0b25Hcm91cCggbW9kZWwsIEFyZWFNb2RlbENvbW1vbkdsb2JhbHMuc2VsZWN0aW9uQnV0dG9uQWxpZ25Hcm91cCApXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge05vZGV9IChhMTF5KVxyXG4gICAgdGhpcy5jYWxjdWxhdGlvblNlbGVjdGlvblBhbmVsID0gdGhpcy5jcmVhdGVQYW5lbENvbnRlbnQoXHJcbiAgICAgIGFyZWFNb2RlbENhbGN1bGF0aW9uU3RyaW5nLFxyXG4gICAgICBBcmVhTW9kZWxDb21tb25HbG9iYWxzLnBhbmVsQWxpZ25Hcm91cCxcclxuICAgICAgbmV3IEFyZWFDYWxjdWxhdGlvblJhZGlvQnV0dG9uR3JvdXAoIG1vZGVsLmFyZWFDYWxjdWxhdGlvbkNob2ljZVByb3BlcnR5LCBBcmVhTW9kZWxDb21tb25HbG9iYWxzLnNlbGVjdGlvbkJ1dHRvbkFsaWduR3JvdXAgKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHNlbGVjdGlvbkNvbnRlbnQgPSBuZXcgVkJveCgge1xyXG4gICAgICBzcGFjaW5nOiAxNVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5nZXRTZWxlY3Rpb25Ob2Rlc1Byb3BlcnR5KCBjb25maWcuZ2V0U2VsZWN0aW9uTm9kZXNFeHRyYXMoIHRoaXMgKSApLmxpbmsoIHNlbGVjdGlvbk5vZGVzID0+IHtcclxuICAgICAgc2VsZWN0aW9uQ29udGVudC5jaGlsZHJlbiA9IGludGVybGVhdmUoIHNlbGVjdGlvbk5vZGVzLCAoKSA9PiBuZXcgTGluZSgge1xyXG4gICAgICAgIHgyOiBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuUEFORUxfSU5URVJJT1JfTUFYLFxyXG4gICAgICAgIHN0cm9rZTogQXJlYU1vZGVsQ29tbW9uQ29sb3JzLnNlbGVjdGlvblNlcGFyYXRvclByb3BlcnR5XHJcbiAgICAgIH0gKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwcm90ZWN0ZWQge05vZGV9IChhMTF5KSAtIFNob3dzIHJhZGlvIGJ1dHRvbiBncm91cHMgdG8gc2VsZWN0IHBhcnRpYWwgcHJvZHVjdCAvIGNhbGN1bGF0aW9uIC8gcGFydGl0aW9uIGxpbmUgb3B0aW9ucy5cclxuICAgIHRoaXMuc2VsZWN0aW9uUGFuZWwgPSBuZXcgUGFuZWwoIHNlbGVjdGlvbkNvbnRlbnQsIHtcclxuICAgICAgeE1hcmdpbjogMTUsXHJcbiAgICAgIHlNYXJnaW46IDEwLFxyXG4gICAgICBmaWxsOiBBcmVhTW9kZWxDb21tb25Db2xvcnMucGFuZWxCYWNrZ3JvdW5kUHJvcGVydHksXHJcbiAgICAgIHN0cm9rZTogQXJlYU1vZGVsQ29tbW9uQ29sb3JzLnBhbmVsQm9yZGVyUHJvcGVydHksXHJcbiAgICAgIGNvcm5lclJhZGl1czogQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLlBBTkVMX0NPUk5FUl9SQURJVVNcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBmYWN0b3JzQm94Q29udGVudCA9IG5ldyBBbGlnbkJveCggdGhpcy5jcmVhdGVGYWN0b3JzTm9kZSggbW9kZWwsIGNvbmZpZy5kZWNpbWFsUGxhY2VzICksIHtcclxuICAgICAgZ3JvdXA6IEFyZWFNb2RlbENvbW1vbkdsb2JhbHMucGFuZWxBbGlnbkdyb3VwLFxyXG4gICAgICB4QWxpZ246ICdjZW50ZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHByb3RlY3RlZCB7Tm9kZX0gKGExMXkpIC0gRXhwb3NlZCBmb3IgYTExeSBvcmRlclxyXG4gICAgdGhpcy5mYWN0b3JzQm94ID0gbmV3IEFyZWFNb2RlbENvbW1vbkFjY29yZGlvbkJveChcclxuICAgICAgY29uZmlnLnVzZVNpbXBsaWZpZWROYW1lcyA/IGZhY3RvcnNTdHJpbmcgOiBkaW1lbnNpb25zU3RyaW5nLFxyXG4gICAgICBtb2RlbC5mYWN0b3JzQm94RXhwYW5kZWRQcm9wZXJ0eSxcclxuICAgICAgZmFjdG9yc0JveENvbnRlbnQsXHJcbiAgICAgIHtcclxuICAgICAgICAvLyBDdXQgc29tZSBzcGFjaW5nIGZyb20gdGhlIGV4cG9uZW50LWVuYWJsZWQgb25lLCBhcyBpdCBsb29rcyBsaWtlIHdheSB0b28gbXVjaCBwYWRkaW5nIG90aGVyd2lzZVxyXG4gICAgICAgIGNvbnRlbnRZU3BhY2luZzogbW9kZWwuYWxsb3dFeHBvbmVudHMgPyA1IDogOCxcclxuXHJcbiAgICAgICAgLy8gcGRvbVxyXG4gICAgICAgIGxhYmVsVGFnTmFtZTogJ2gzJyxcclxuICAgICAgICBsYWJlbENvbnRlbnQ6IGZhY3RvcnNCb3hTdHJpbmcsXHJcbiAgICAgICAgdGl0bGVCYXJPcHRpb25zOiB7XHJcbiAgICAgICAgICBkZXNjcmlwdGlvbkNvbnRlbnQ6IGZhY3RvcnNCb3hEZXNjcmlwdGlvblN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGFyZWFCb3hDb250ZW50ID0gbmV3IEFsaWduQm94KCBuZXcgVG90YWxBcmVhTm9kZShcclxuICAgICAgbW9kZWwudG90YWxBcmVhUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLmlzUHJvcG9ydGlvbmFsLFxyXG4gICAgICBtb2RlbC5pc1Byb3BvcnRpb25hbCA/IG1vZGVsLmdldE1heGltdW1BcmVhU3RyaW5nKCkgOiAnJyxcclxuICAgICAgdGhpcy51c2VUaWxlTGlrZUJhY2tncm91bmRcclxuICAgICksIHtcclxuICAgICAgZ3JvdXA6IEFyZWFNb2RlbENvbW1vbkdsb2JhbHMucGFuZWxBbGlnbkdyb3VwLFxyXG4gICAgICB4QWxpZ246ICdjZW50ZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHByb3RlY3RlZCB7Tm9kZX0gKGExMXkpXHJcbiAgICB0aGlzLmFyZWFCb3ggPSBuZXcgQXJlYU1vZGVsQ29tbW9uQWNjb3JkaW9uQm94KFxyXG4gICAgICBjb25maWcudXNlU2ltcGxpZmllZE5hbWVzID8gcHJvZHVjdFN0cmluZyA6IHRvdGFsQXJlYU9mTW9kZWxTdHJpbmcsXHJcbiAgICAgIG1vZGVsLmFyZWFCb3hFeHBhbmRlZFByb3BlcnR5LFxyXG4gICAgICBhcmVhQm94Q29udGVudCwge1xyXG4gICAgICAgIC8vIHBkb21cclxuICAgICAgICBsYWJlbFRhZ05hbWU6ICdoMycsXHJcbiAgICAgICAgbGFiZWxDb250ZW50OiBwcm9kdWN0Qm94U3RyaW5nLFxyXG4gICAgICAgIHRpdGxlQmFyT3B0aW9uczoge1xyXG4gICAgICAgICAgZGVzY3JpcHRpb25Db250ZW50OiBwcm9kdWN0Qm94RGVzY3JpcHRpb25TdHJpbmdcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgLy8gQHByb3RlY3RlZCB7VkJveH0gLSBBdmFpbGFibGUgZm9yIHN1YnR5cGUgcG9zaXRpb25pbmcgcmVsYXRpdmUgdG8gdGhpcy5cclxuICAgIHRoaXMucmlnaHRQYW5lbENvbnRhaW5lciA9IG5ldyBWQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBjb25maWcuZ2V0UmlnaHRBbGlnbk5vZGVzKCBbXHJcbiAgICAgICAgdGhpcy5mYWN0b3JzQm94LFxyXG4gICAgICAgIHRoaXMuYXJlYUJveCxcclxuICAgICAgICAuLi4oIHRoaXMuc2hvd0NhbGN1bGF0aW9uU2VsZWN0aW9uIHx8IHRoaXMuc2hvd1Byb2R1Y3RzU2VsZWN0aW9uID8gWyB0aGlzLnNlbGVjdGlvblBhbmVsIF0gOiBbXSApXHJcbiAgICAgIF0sIHRoaXMgKSxcclxuICAgICAgc3BhY2luZzogQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLkxBWU9VVF9TUEFDSU5HXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgQWxpZ25Cb3goIHRoaXMucmlnaHRQYW5lbENvbnRhaW5lciwge1xyXG4gICAgICBhbGlnbkJvdW5kczogdGhpcy5sYXlvdXRCb3VuZHMsXHJcbiAgICAgIHhBbGlnbjogJ3JpZ2h0JyxcclxuICAgICAgeUFsaWduOiAndG9wJyxcclxuICAgICAgbWFyZ2luOiBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuTEFZT1VUX1NQQUNJTkdcclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIEBwcm90ZWN0ZWQge05vZGV8bnVsbH0gKGExMXkpIC0gVGhlIGNhbGN1bGF0aW9uIHBhbmVsL2JveCBuZWFyIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlblxyXG4gICAgdGhpcy5jYWxjdWxhdGlvbk5vZGUgPSBudWxsO1xyXG4gICAgaWYgKCBjb25maWcudXNlQ2FsY3VsYXRpb25Cb3ggKSB7XHJcbiAgICAgIGNvbnN0IGNhbGN1bGF0aW9uVG9wID0gQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLk1BSU5fQVJFQV9PRkZTRVQueSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLkFSRUFfU0laRSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLkxBWU9VVF9TUEFDSU5HICsgMzA7XHJcbiAgICAgIGNvbnN0IGNhbGN1bGF0aW9uQm90dG9tID0gdGhpcy5sYXlvdXRCb3VuZHMuYm90dG9tIC0gQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLkxBWU9VVF9TUEFDSU5HO1xyXG4gICAgICBjb25zdCBjYWxjdWxhdGlvbkJvdW5kcyA9IG5ldyBCb3VuZHMyKCAwLCAwLCBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuQVJFQV9TSVpFLCBjYWxjdWxhdGlvbkJvdHRvbSAtIGNhbGN1bGF0aW9uVG9wICk7XHJcbiAgICAgIHRoaXMuY2FsY3VsYXRpb25Ob2RlID0gbmV3IENhbGN1bGF0aW9uQm94KCBtb2RlbCwgY2FsY3VsYXRpb25Cb3VuZHMsIHtcclxuICAgICAgICB4OiBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuTUFJTl9BUkVBX09GRlNFVC54LFxyXG4gICAgICAgIHk6IGNhbGN1bGF0aW9uVG9wXHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmNhbGN1bGF0aW9uTm9kZSA9IG5ldyBDYWxjdWxhdGlvbk5vZGUoIG1vZGVsICk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLmNhbGN1bGF0aW9uTm9kZSApO1xyXG5cclxuICAgIC8vIEBwcm90ZWN0ZWQge05vZGV9IChhMTF5KSAtIFJlc2V0IGFsbCBidXR0b25cclxuICAgIHRoaXMucmVzZXRBbGxCdXR0b24gPSBuZXcgUmVzZXRBbGxCdXR0b24oIHtcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICBtb2RlbC5yZXNldCgpO1xyXG4gICAgICB9LFxyXG4gICAgICByaWdodDogdGhpcy5sYXlvdXRCb3VuZHMucmlnaHQgLSBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuTEFZT1VUX1NQQUNJTkcsXHJcbiAgICAgIGJvdHRvbTogdGhpcy5sYXlvdXRCb3VuZHMuYm90dG9tIC0gQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLkxBWU9VVF9TUEFDSU5HXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLnJlc2V0QWxsQnV0dG9uICk7XHJcblxyXG4gICAgLy8gQHByb3RlY3RlZCB7QXJlYURpc3BsYXlOb2RlfVxyXG4gICAgdGhpcy5hcmVhRGlzcGxheU5vZGUgPSB0aGlzLmNyZWF0ZUFyZWFEaXNwbGF5Tm9kZSggbW9kZWwgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuYXJlYURpc3BsYXlOb2RlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGVwcyB0aGUgdmlldyBmb3J3YXJkLCB1cGRhdGluZyB0aGluZ3MgdGhhdCBvbmx5IHVwZGF0ZSBvbmNlIGEgZnJhbWUuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR0XHJcbiAgICovXHJcbiAgc3RlcCggZHQgKSB7XHJcblxyXG4gICAgLy8gTm8gYW5pbWF0aW9uIGlzIGhhcHBlbmluZyBpbiB0aGUgdmlldy4gVGhpcyBpcyBmb3IgYmF0Y2hpbmcgdXBkYXRlcyB0byBoYXBwZW4gb25seSBvbmNlIGEgZnJhbWUuXHJcbiAgICB0aGlzLmNhbGN1bGF0aW9uTm9kZS51cGRhdGUoKTtcclxuICAgIHRoaXMuYXJlYURpc3BsYXlOb2RlLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGNvbnRlbnQgZW1iZWRkZWQgaW4gdGhlIHNlbGVjdGlvbiBwYW5lbCB2YXJpZXMgZGVwZW5kaW5nIG9uIHRoZSBzdWJ0eXBlLCBzbyB3ZSBwcm92aWRlIG92ZXJyaWRpbmcgaGVyZS5cclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICpcclxuICAgKiBOT1RFOiBXZSBuZWVkIHRvIHN1cHBvcnQgdGhlIGZhY3QgdGhhdCB0aGlzIGNhbiBjaGFuZ2UsIHNvIGl0J3MgYSBQcm9wZXJ0eVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb3BlcnR5LjxBcnJheS48Tm9kZT4+fVxyXG4gICAqL1xyXG4gIGdldFNlbGVjdGlvbk5vZGVzUHJvcGVydHkoKSB7XHJcbiAgICBjb25zdCBzZWxlY3Rpb25Ob2RlcyA9IFtdO1xyXG4gICAgaWYgKCB0aGlzLnNob3dQcm9kdWN0c1NlbGVjdGlvbiApIHtcclxuICAgICAgc2VsZWN0aW9uTm9kZXMucHVzaCggdGhpcy5wcm9kdWN0c1NlbGVjdGlvblBhbmVsICk7XHJcbiAgICB9XHJcbiAgICBpZiAoIHRoaXMuc2hvd0NhbGN1bGF0aW9uU2VsZWN0aW9uICkge1xyXG4gICAgICBzZWxlY3Rpb25Ob2Rlcy5wdXNoKCB0aGlzLmNhbGN1bGF0aW9uU2VsZWN0aW9uUGFuZWwgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUHJvcGVydHkoIHNlbGVjdGlvbk5vZGVzLCB7XHJcbiAgICAgIGlzVmFsaWRWYWx1ZTogbm9kZXMgPT4gIV8uc29tZSggbm9kZXMsIG5vZGUgPT4gIW5vZGUgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIHBhbmVsIGludGVyaW9yIHdpdGggdGhlIHRpdGxlIGxlZnQtYWxpZ25lZCwgYW5kIHRoZSBjb250ZW50IHNvbWV3aGF0IG9mZnNldCBmcm9tIHRoZSBsZWZ0IHdpdGggYVxyXG4gICAqIGd1YXJhbnRlZWQgbWFyZ2luLlxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVN0cmluZ1xyXG4gICAqIEBwYXJhbSB7QWxpZ25Hcm91cH0gcGFuZWxBbGlnbkdyb3VwXHJcbiAgICogQHBhcmFtIHtOb2RlfSBjb250ZW50XHJcbiAgICovXHJcbiAgY3JlYXRlUGFuZWxDb250ZW50KCB0aXRsZVN0cmluZywgcGFuZWxBbGlnbkdyb3VwLCBjb250ZW50ICkge1xyXG4gICAgcmV0dXJuIG5ldyBWQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IEFsaWduQm94KCBuZXcgVGV4dCggdGl0bGVTdHJpbmcsIHtcclxuICAgICAgICAgIGZvbnQ6IEFyZWFNb2RlbENvbW1vbkNvbnN0YW50cy5USVRMRV9GT05ULFxyXG4gICAgICAgICAgbWF4V2lkdGg6IEFyZWFNb2RlbENvbW1vbkNvbnN0YW50cy5QQU5FTF9JTlRFUklPUl9NQVhcclxuICAgICAgICB9ICksIHtcclxuICAgICAgICAgIGdyb3VwOiBwYW5lbEFsaWduR3JvdXAsXHJcbiAgICAgICAgICB4QWxpZ246ICdsZWZ0J1xyXG4gICAgICAgIH0gKSxcclxuICAgICAgICBuZXcgQWxpZ25Cb3goIGNvbnRlbnQsIHtcclxuICAgICAgICAgIGdyb3VwOiBwYW5lbEFsaWduR3JvdXAsXHJcbiAgICAgICAgICB4QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgICAgeE1hcmdpbjogMTVcclxuICAgICAgICB9IClcclxuICAgICAgXSxcclxuICAgICAgc3BhY2luZzogMTBcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGlkZWFsIHRyYW5zbGF0aW9uIGZvciBpbnN0YW5jZXMgb2YgQXJlYURpc3BsYXlOb2RlIG9uIHRoZSBtYWluIHZpZXcuXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1ZlY3RvcjJ9XHJcbiAgICovXHJcbiAgZ2V0RGlzcGxheVRyYW5zbGF0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGF5b3V0Qm91bmRzLmxlZnRUb3AucGx1cyhcclxuICAgICAgdGhpcy51c2VMYXJnZUFyZWEgPyBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuTEFSR0VfQVJFQV9PRkZTRVQgOiBBcmVhTW9kZWxDb21tb25Db25zdGFudHMuTUFJTl9BUkVBX09GRlNFVFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgdGhlIFwiZmFjdG9yc1wiIChkaW1lbnNpb25zKSBjb250ZW50IGZvciB0aGUgYWNjb3JkaW9uIGJveC5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FyZWFNb2RlbENvbW1vbk1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWNpbWFsUGxhY2VzXHJcbiAgICogQHJldHVybnMge05vZGV9XHJcbiAgICovXHJcbiAgY3JlYXRlRmFjdG9yc05vZGUoIG1vZGVsLCBkZWNpbWFsUGxhY2VzICkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCAnYWJzdHJhY3QgbWV0aG9kLCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYnkgc3VidHlwZScgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgdGhlIG1haW4gYXJlYSBkaXNwbGF5IHZpZXcgZm9yIHRoZSBzY3JlZW4uXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcmVhTW9kZWxDb21tb25Nb2RlbH0gbW9kZWxcclxuICAgKiBAcmV0dXJucyB7QXJlYURpc3BsYXlOb2RlfVxyXG4gICAqL1xyXG4gIGNyZWF0ZUFyZWFEaXNwbGF5Tm9kZSggbW9kZWwgKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoICdhYnN0cmFjdCBtZXRob2QsIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBieSBzdWJ0eXBlJyApO1xyXG4gIH1cclxufVxyXG5cclxuYXJlYU1vZGVsQ29tbW9uLnJlZ2lzdGVyKCAnQXJlYVNjcmVlblZpZXcnLCBBcmVhU2NyZWVuVmlldyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXJlYVNjcmVlblZpZXc7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFVBQVUsTUFBTSxvQ0FBb0M7QUFDM0QsT0FBT0MsVUFBVSxNQUFNLHdDQUF3QztBQUMvRCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFFBQVEsTUFBTSxzQ0FBc0M7QUFDM0QsT0FBT0MsY0FBYyxNQUFNLHVEQUF1RDtBQUNsRixTQUFTQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLDJDQUEyQztBQUN0RSxPQUFPQyx3QkFBd0IsTUFBTSxnQ0FBZ0M7QUFDckUsT0FBT0Msc0JBQXNCLE1BQU0sOEJBQThCO0FBQ2pF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