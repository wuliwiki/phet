// Copyright 2017-2023, University of Colorado Boulder

/**
 * Shows radio buttons that allow selecting between different sized proportional areas.
 *
 * NOTE: This type is designed to be persistent, and will not need to release references to avoid memory leaks.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import { AlignBox, AlignGroup, Text } from '../../../../scenery/js/imports.js';
import areaModelCommon from '../../areaModelCommon.js';
import AreaModelCommonStrings from '../../AreaModelCommonStrings.js';
import AreaModelCommonConstants from '../../common/AreaModelCommonConstants.js';
import AreaModelCommonRadioButtonGroup from '../../common/view/AreaModelCommonRadioButtonGroup.js';
const areaGridSizeString = AreaModelCommonStrings.a11y.areaGridSize;
const sceneSelectionPatternString = AreaModelCommonStrings.a11y.sceneSelectionPattern;
class SceneRadioButtonGroup extends AreaModelCommonRadioButtonGroup {
  /**
   * @param {ProportionalAreaModel} model
   * @param {Object} [nodeOptions]
   */
  constructor(model, nodeOptions) {
    const group = new AlignGroup(); // have all the buttons the same size

    assert && assert(model.areas.length === 2 || model.areas.length === 3, 'We only have strings for the 2 or 3 case (right now)');
    super(model.currentAreaProperty, model.areas.map(area => {
      return {
        value: area,
        createNode: () => new AlignBox(new Text(area.getDimensionString(), {
          font: AreaModelCommonConstants.SYMBOL_FONT
        }), {
          group: group
        }),
        // pdom
        labelContent: StringUtils.fillIn(sceneSelectionPatternString, {
          width: area.maximumSize,
          height: area.maximumSize
        })
      };
    }), {
      // pdom
      labelContent: areaGridSizeString
    });
    this.mutate(nodeOptions);
  }
}
areaModelCommon.register('SceneRadioButtonGroup', SceneRadioButtonGroup);
export default SceneRadioButtonGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIkFsaWduQm94IiwiQWxpZ25Hcm91cCIsIlRleHQiLCJhcmVhTW9kZWxDb21tb24iLCJBcmVhTW9kZWxDb21tb25TdHJpbmdzIiwiQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzIiwiQXJlYU1vZGVsQ29tbW9uUmFkaW9CdXR0b25Hcm91cCIsImFyZWFHcmlkU2l6ZVN0cmluZyIsImExMXkiLCJhcmVhR3JpZFNpemUiLCJzY2VuZVNlbGVjdGlvblBhdHRlcm5TdHJpbmciLCJzY2VuZVNlbGVjdGlvblBhdHRlcm4iLCJTY2VuZVJhZGlvQnV0dG9uR3JvdXAiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwibm9kZU9wdGlvbnMiLCJncm91cCIsImFzc2VydCIsImFyZWFzIiwibGVuZ3RoIiwiY3VycmVudEFyZWFQcm9wZXJ0eSIsIm1hcCIsImFyZWEiLCJ2YWx1ZSIsImNyZWF0ZU5vZGUiLCJnZXREaW1lbnNpb25TdHJpbmciLCJmb250IiwiU1lNQk9MX0ZPTlQiLCJsYWJlbENvbnRlbnQiLCJmaWxsSW4iLCJ3aWR0aCIsIm1heGltdW1TaXplIiwiaGVpZ2h0IiwibXV0YXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTY2VuZVJhZGlvQnV0dG9uR3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2hvd3MgcmFkaW8gYnV0dG9ucyB0aGF0IGFsbG93IHNlbGVjdGluZyBiZXR3ZWVuIGRpZmZlcmVudCBzaXplZCBwcm9wb3J0aW9uYWwgYXJlYXMuXHJcbiAqXHJcbiAqIE5PVEU6IFRoaXMgdHlwZSBpcyBkZXNpZ25lZCB0byBiZSBwZXJzaXN0ZW50LCBhbmQgd2lsbCBub3QgbmVlZCB0byByZWxlYXNlIHJlZmVyZW5jZXMgdG8gYXZvaWQgbWVtb3J5IGxlYWtzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCB7IEFsaWduQm94LCBBbGlnbkdyb3VwLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGFyZWFNb2RlbENvbW1vbiBmcm9tICcuLi8uLi9hcmVhTW9kZWxDb21tb24uanMnO1xyXG5pbXBvcnQgQXJlYU1vZGVsQ29tbW9uU3RyaW5ncyBmcm9tICcuLi8uLi9BcmVhTW9kZWxDb21tb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vbkNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vblJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQXJlYU1vZGVsQ29tbW9uUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcblxyXG5jb25zdCBhcmVhR3JpZFNpemVTdHJpbmcgPSBBcmVhTW9kZWxDb21tb25TdHJpbmdzLmExMXkuYXJlYUdyaWRTaXplO1xyXG5jb25zdCBzY2VuZVNlbGVjdGlvblBhdHRlcm5TdHJpbmcgPSBBcmVhTW9kZWxDb21tb25TdHJpbmdzLmExMXkuc2NlbmVTZWxlY3Rpb25QYXR0ZXJuO1xyXG5cclxuY2xhc3MgU2NlbmVSYWRpb0J1dHRvbkdyb3VwIGV4dGVuZHMgQXJlYU1vZGVsQ29tbW9uUmFkaW9CdXR0b25Hcm91cCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wb3J0aW9uYWxBcmVhTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtub2RlT3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG5vZGVPcHRpb25zICkge1xyXG4gICAgY29uc3QgZ3JvdXAgPSBuZXcgQWxpZ25Hcm91cCgpOyAvLyBoYXZlIGFsbCB0aGUgYnV0dG9ucyB0aGUgc2FtZSBzaXplXHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbW9kZWwuYXJlYXMubGVuZ3RoID09PSAyIHx8IG1vZGVsLmFyZWFzLmxlbmd0aCA9PT0gMyxcclxuICAgICAgJ1dlIG9ubHkgaGF2ZSBzdHJpbmdzIGZvciB0aGUgMiBvciAzIGNhc2UgKHJpZ2h0IG5vdyknICk7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLmN1cnJlbnRBcmVhUHJvcGVydHksIG1vZGVsLmFyZWFzLm1hcCggYXJlYSA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsdWU6IGFyZWEsXHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IEFsaWduQm94KCBuZXcgVGV4dCggYXJlYS5nZXREaW1lbnNpb25TdHJpbmcoKSwge1xyXG4gICAgICAgICAgZm9udDogQXJlYU1vZGVsQ29tbW9uQ29uc3RhbnRzLlNZTUJPTF9GT05UXHJcbiAgICAgICAgfSApLCB7IGdyb3VwOiBncm91cCB9ICksXHJcblxyXG4gICAgICAgIC8vIHBkb21cclxuICAgICAgICBsYWJlbENvbnRlbnQ6IFN0cmluZ1V0aWxzLmZpbGxJbiggc2NlbmVTZWxlY3Rpb25QYXR0ZXJuU3RyaW5nLCB7XHJcbiAgICAgICAgICB3aWR0aDogYXJlYS5tYXhpbXVtU2l6ZSxcclxuICAgICAgICAgIGhlaWdodDogYXJlYS5tYXhpbXVtU2l6ZVxyXG4gICAgICAgIH0gKVxyXG4gICAgICB9O1xyXG4gICAgfSApLCB7XHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgbGFiZWxDb250ZW50OiBhcmVhR3JpZFNpemVTdHJpbmdcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggbm9kZU9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmFyZWFNb2RlbENvbW1vbi5yZWdpc3RlciggJ1NjZW5lUmFkaW9CdXR0b25Hcm91cCcsIFNjZW5lUmFkaW9CdXR0b25Hcm91cCApO1xyXG5leHBvcnQgZGVmYXVsdCBTY2VuZVJhZGlvQnV0dG9uR3JvdXA7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLFNBQVNDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlFLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0Msc0JBQXNCLE1BQU0saUNBQWlDO0FBQ3BFLE9BQU9DLHdCQUF3QixNQUFNLDBDQUEwQztBQUMvRSxPQUFPQywrQkFBK0IsTUFBTSxzREFBc0Q7QUFFbEcsTUFBTUMsa0JBQWtCLEdBQUdILHNCQUFzQixDQUFDSSxJQUFJLENBQUNDLFlBQVk7QUFDbkUsTUFBTUMsMkJBQTJCLEdBQUdOLHNCQUFzQixDQUFDSSxJQUFJLENBQUNHLHFCQUFxQjtBQUVyRixNQUFNQyxxQkFBcUIsU0FBU04sK0JBQStCLENBQUM7RUFDbEU7QUFDRjtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxXQUFXLEVBQUc7SUFDaEMsTUFBTUMsS0FBSyxHQUFHLElBQUlmLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFFaENnQixNQUFNLElBQUlBLE1BQU0sQ0FBRUgsS0FBSyxDQUFDSSxLQUFLLENBQUNDLE1BQU0sS0FBSyxDQUFDLElBQUlMLEtBQUssQ0FBQ0ksS0FBSyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUNwRSxzREFBdUQsQ0FBQztJQUUxRCxLQUFLLENBQUVMLEtBQUssQ0FBQ00sbUJBQW1CLEVBQUVOLEtBQUssQ0FBQ0ksS0FBSyxDQUFDRyxHQUFHLENBQUVDLElBQUksSUFBSTtNQUN6RCxPQUFPO1FBQ0xDLEtBQUssRUFBRUQsSUFBSTtRQUNYRSxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJeEIsUUFBUSxDQUFFLElBQUlFLElBQUksQ0FBRW9CLElBQUksQ0FBQ0csa0JBQWtCLENBQUMsQ0FBQyxFQUFFO1VBQ25FQyxJQUFJLEVBQUVyQix3QkFBd0IsQ0FBQ3NCO1FBQ2pDLENBQUUsQ0FBQyxFQUFFO1VBQUVYLEtBQUssRUFBRUE7UUFBTSxDQUFFLENBQUM7UUFFdkI7UUFDQVksWUFBWSxFQUFFN0IsV0FBVyxDQUFDOEIsTUFBTSxDQUFFbkIsMkJBQTJCLEVBQUU7VUFDN0RvQixLQUFLLEVBQUVSLElBQUksQ0FBQ1MsV0FBVztVQUN2QkMsTUFBTSxFQUFFVixJQUFJLENBQUNTO1FBQ2YsQ0FBRTtNQUNKLENBQUM7SUFDSCxDQUFFLENBQUMsRUFBRTtNQUNIO01BQ0FILFlBQVksRUFBRXJCO0lBQ2hCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQzBCLE1BQU0sQ0FBRWxCLFdBQVksQ0FBQztFQUM1QjtBQUNGO0FBRUFaLGVBQWUsQ0FBQytCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRXRCLHFCQUFzQixDQUFDO0FBQzFFLGVBQWVBLHFCQUFxQiJ9