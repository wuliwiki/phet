// Copyright 2017-2022, University of Colorado Boulder

/**
 * Grid lines for proportional areas.
 *
 * NOTE: This type is designed to be persistent, and will not need to release references to avoid memory leaks.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Multilink from '../../../../axon/js/Multilink.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Path } from '../../../../scenery/js/imports.js';
import areaModelCommon from '../../areaModelCommon.js';
import AreaModelCommonColors from '../../common/view/AreaModelCommonColors.js';

// constants
const GRID_LINE_WIDTH = 0.5;
const HALF_GRID_LINE_WIDTH = GRID_LINE_WIDTH / 2;
class ProportionalAreaGridLinesNode extends Path {
  /**
   * @param {Property.<ProportionalArea>} areaProperty
   * @param {Property.<ModelViewTransform2>} modelViewTransformProperty
   */
  constructor(areaProperty, modelViewTransformProperty) {
    super(null, {
      stroke: AreaModelCommonColors.gridLineProperty
    });
    Multilink.multilink([areaProperty, modelViewTransformProperty], (area, modelViewTransform) => {
      const maxX = modelViewTransform.modelToViewX(area.maximumSize);
      const maxY = modelViewTransform.modelToViewY(area.maximumSize);
      const shape = new Shape();
      for (let i = area.gridSpacing; i < area.maximumSize; i += area.gridSpacing) {
        const x = modelViewTransform.modelToViewX(i);
        const y = modelViewTransform.modelToViewY(i);
        shape.moveTo(HALF_GRID_LINE_WIDTH, y);
        shape.lineTo(maxX - HALF_GRID_LINE_WIDTH, y);
        shape.moveTo(x, HALF_GRID_LINE_WIDTH);
        shape.lineTo(x, maxY - HALF_GRID_LINE_WIDTH);
      }
      this.shape = shape;
    });
  }
}
areaModelCommon.register('ProportionalAreaGridLinesNode', ProportionalAreaGridLinesNode);
export default ProportionalAreaGridLinesNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJTaGFwZSIsIlBhdGgiLCJhcmVhTW9kZWxDb21tb24iLCJBcmVhTW9kZWxDb21tb25Db2xvcnMiLCJHUklEX0xJTkVfV0lEVEgiLCJIQUxGX0dSSURfTElORV9XSURUSCIsIlByb3BvcnRpb25hbEFyZWFHcmlkTGluZXNOb2RlIiwiY29uc3RydWN0b3IiLCJhcmVhUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eSIsInN0cm9rZSIsImdyaWRMaW5lUHJvcGVydHkiLCJtdWx0aWxpbmsiLCJhcmVhIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibWF4WCIsIm1vZGVsVG9WaWV3WCIsIm1heGltdW1TaXplIiwibWF4WSIsIm1vZGVsVG9WaWV3WSIsInNoYXBlIiwiaSIsImdyaWRTcGFjaW5nIiwieCIsInkiLCJtb3ZlVG8iLCJsaW5lVG8iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByb3BvcnRpb25hbEFyZWFHcmlkTGluZXNOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdyaWQgbGluZXMgZm9yIHByb3BvcnRpb25hbCBhcmVhcy5cclxuICpcclxuICogTk9URTogVGhpcyB0eXBlIGlzIGRlc2lnbmVkIHRvIGJlIHBlcnNpc3RlbnQsIGFuZCB3aWxsIG5vdCBuZWVkIHRvIHJlbGVhc2UgcmVmZXJlbmNlcyB0byBhdm9pZCBtZW1vcnkgbGVha3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGFyZWFNb2RlbENvbW1vbiBmcm9tICcuLi8uLi9hcmVhTW9kZWxDb21tb24uanMnO1xyXG5pbXBvcnQgQXJlYU1vZGVsQ29tbW9uQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0FyZWFNb2RlbENvbW1vbkNvbG9ycy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgR1JJRF9MSU5FX1dJRFRIID0gMC41O1xyXG5jb25zdCBIQUxGX0dSSURfTElORV9XSURUSCA9IEdSSURfTElORV9XSURUSCAvIDI7XHJcblxyXG5jbGFzcyBQcm9wb3J0aW9uYWxBcmVhR3JpZExpbmVzTm9kZSBleHRlbmRzIFBhdGgge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPFByb3BvcnRpb25hbEFyZWE+fSBhcmVhUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxNb2RlbFZpZXdUcmFuc2Zvcm0yPn0gbW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHlcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYXJlYVByb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eSApIHtcclxuXHJcbiAgICBzdXBlciggbnVsbCwge1xyXG4gICAgICBzdHJva2U6IEFyZWFNb2RlbENvbW1vbkNvbG9ycy5ncmlkTGluZVByb3BlcnR5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggWyBhcmVhUHJvcGVydHksIG1vZGVsVmlld1RyYW5zZm9ybVByb3BlcnR5IF0sICggYXJlYSwgbW9kZWxWaWV3VHJhbnNmb3JtICkgPT4ge1xyXG4gICAgICBjb25zdCBtYXhYID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggYXJlYS5tYXhpbXVtU2l6ZSApO1xyXG4gICAgICBjb25zdCBtYXhZID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggYXJlYS5tYXhpbXVtU2l6ZSApO1xyXG5cclxuICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICAgICAgZm9yICggbGV0IGkgPSBhcmVhLmdyaWRTcGFjaW5nOyBpIDwgYXJlYS5tYXhpbXVtU2l6ZTsgaSArPSBhcmVhLmdyaWRTcGFjaW5nICkge1xyXG4gICAgICAgIGNvbnN0IHggPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBpICk7XHJcbiAgICAgICAgY29uc3QgeSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIGkgKTtcclxuXHJcbiAgICAgICAgc2hhcGUubW92ZVRvKCBIQUxGX0dSSURfTElORV9XSURUSCwgeSApO1xyXG4gICAgICAgIHNoYXBlLmxpbmVUbyggbWF4WCAtIEhBTEZfR1JJRF9MSU5FX1dJRFRILCB5ICk7XHJcblxyXG4gICAgICAgIHNoYXBlLm1vdmVUbyggeCwgSEFMRl9HUklEX0xJTkVfV0lEVEggKTtcclxuICAgICAgICBzaGFwZS5saW5lVG8oIHgsIG1heFkgLSBIQUxGX0dSSURfTElORV9XSURUSCApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2hhcGUgPSBzaGFwZTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmFyZWFNb2RlbENvbW1vbi5yZWdpc3RlciggJ1Byb3BvcnRpb25hbEFyZWFHcmlkTGluZXNOb2RlJywgUHJvcG9ydGlvbmFsQXJlYUdyaWRMaW5lc05vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByb3BvcnRpb25hbEFyZWFHcmlkTGluZXNOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGtDQUFrQztBQUN4RCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxxQkFBcUIsTUFBTSw0Q0FBNEM7O0FBRTlFO0FBQ0EsTUFBTUMsZUFBZSxHQUFHLEdBQUc7QUFDM0IsTUFBTUMsb0JBQW9CLEdBQUdELGVBQWUsR0FBRyxDQUFDO0FBRWhELE1BQU1FLDZCQUE2QixTQUFTTCxJQUFJLENBQUM7RUFDL0M7QUFDRjtBQUNBO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsWUFBWSxFQUFFQywwQkFBMEIsRUFBRztJQUV0RCxLQUFLLENBQUUsSUFBSSxFQUFFO01BQ1hDLE1BQU0sRUFBRVAscUJBQXFCLENBQUNRO0lBQ2hDLENBQUUsQ0FBQztJQUVIWixTQUFTLENBQUNhLFNBQVMsQ0FBRSxDQUFFSixZQUFZLEVBQUVDLDBCQUEwQixDQUFFLEVBQUUsQ0FBRUksSUFBSSxFQUFFQyxrQkFBa0IsS0FBTTtNQUNqRyxNQUFNQyxJQUFJLEdBQUdELGtCQUFrQixDQUFDRSxZQUFZLENBQUVILElBQUksQ0FBQ0ksV0FBWSxDQUFDO01BQ2hFLE1BQU1DLElBQUksR0FBR0osa0JBQWtCLENBQUNLLFlBQVksQ0FBRU4sSUFBSSxDQUFDSSxXQUFZLENBQUM7TUFFaEUsTUFBTUcsS0FBSyxHQUFHLElBQUlwQixLQUFLLENBQUMsQ0FBQztNQUN6QixLQUFNLElBQUlxQixDQUFDLEdBQUdSLElBQUksQ0FBQ1MsV0FBVyxFQUFFRCxDQUFDLEdBQUdSLElBQUksQ0FBQ0ksV0FBVyxFQUFFSSxDQUFDLElBQUlSLElBQUksQ0FBQ1MsV0FBVyxFQUFHO1FBQzVFLE1BQU1DLENBQUMsR0FBR1Qsa0JBQWtCLENBQUNFLFlBQVksQ0FBRUssQ0FBRSxDQUFDO1FBQzlDLE1BQU1HLENBQUMsR0FBR1Ysa0JBQWtCLENBQUNLLFlBQVksQ0FBRUUsQ0FBRSxDQUFDO1FBRTlDRCxLQUFLLENBQUNLLE1BQU0sQ0FBRXBCLG9CQUFvQixFQUFFbUIsQ0FBRSxDQUFDO1FBQ3ZDSixLQUFLLENBQUNNLE1BQU0sQ0FBRVgsSUFBSSxHQUFHVixvQkFBb0IsRUFBRW1CLENBQUUsQ0FBQztRQUU5Q0osS0FBSyxDQUFDSyxNQUFNLENBQUVGLENBQUMsRUFBRWxCLG9CQUFxQixDQUFDO1FBQ3ZDZSxLQUFLLENBQUNNLE1BQU0sQ0FBRUgsQ0FBQyxFQUFFTCxJQUFJLEdBQUdiLG9CQUFxQixDQUFDO01BQ2hEO01BQ0EsSUFBSSxDQUFDZSxLQUFLLEdBQUdBLEtBQUs7SUFDcEIsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBbEIsZUFBZSxDQUFDeUIsUUFBUSxDQUFFLCtCQUErQixFQUFFckIsNkJBQThCLENBQUM7QUFFMUYsZUFBZUEsNkJBQTZCIn0=