// Copyright 2017-2022, University of Colorado Boulder

/**
 * A proportional area, split up by up to one horizontal partition line and one vertical partition line.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Multilink from '../../../../axon/js/Multilink.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Property from '../../../../axon/js/Property.js';
import Range from '../../../../dot/js/Range.js';
import merge from '../../../../phet-core/js/merge.js';
import Orientation from '../../../../phet-core/js/Orientation.js';
import areaModelCommon from '../../areaModelCommon.js';
import Area from '../../common/model/Area.js';
import OrientationPair from '../../common/model/OrientationPair.js';
import Partition from '../../common/model/Partition.js';
import Term from '../../common/model/Term.js';
import AreaModelCommonColors from '../../common/view/AreaModelCommonColors.js';
import PartitionLineChoice from './PartitionLineChoice.js';
class ProportionalArea extends Area {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      maximumSize: 20,
      // {number} - Maximum size our area can take up
      minimumSize: 1,
      // {number} - Minimum size our area can take up
      initialWidth: 1,
      // {number} - Initial width
      initialHeight: 1,
      // {number} - Initial height
      eraseWidth: 1,
      // {number} - The width that will be set with the erase button
      eraseHeight: 1,
      // {number} - The height that will be set with the erase button
      initialHorizontalSplit: 0,
      // {number} - Initial position (if any) of a horizontal partition split
      initialVerticalSplit: 0,
      // {number} - Initial position (if any) of a vertical partition split
      snapSize: 1,
      // {number} - Smallest unit size (that is snapped to)
      partitionSnapSize: 10,
      // {number} - Smallest left/top partition size
      gridSpacing: 1,
      // {number} - Space between grid lines
      smallTileSize: 1,
      // {number} - Size of the smallest tile available (or for the thin tiles, the shorter length)
      largeTileSize: 10,
      // {number} - Size of the largest tile available (or for the thin tiles, the longer length)
      tilesAvailable: true,
      // {boolean} - Whether tiles can be shown on this area
      countingAvailable: false,
      // {boolean} - Whether numbers can be shown on each grid section
      partitionLineChoice: PartitionLineChoice.BOTH // {PartitionLineChoice} - What partition lines are shown
    }, options);
    const horizontalPartitions = [new Partition(Orientation.HORIZONTAL, AreaModelCommonColors.proportionalWidthProperty), new Partition(Orientation.HORIZONTAL, AreaModelCommonColors.proportionalWidthProperty)];
    const verticalPartitions = [new Partition(Orientation.VERTICAL, AreaModelCommonColors.proportionalHeightProperty), new Partition(Orientation.VERTICAL, AreaModelCommonColors.proportionalHeightProperty)];
    super(new OrientationPair(horizontalPartitions, verticalPartitions), AreaModelCommonColors.proportionalColorProperties, options.maximumSize, false);

    // @public {OrientationPair.<Property.<number>>} - Width/height of the contained area.
    this.activeTotalProperties = new OrientationPair(new NumberProperty(options.initialWidth), new NumberProperty(options.initialHeight));

    // @public {Property.<Orientation>} - If PartitionLineChoice.ONE is active, which partition line is active
    this.visiblePartitionOrientationProperty = new Property(Orientation.HORIZONTAL);

    // @public {OrientationPair.<Property.<number>>} - Position of the partition lines
    this.partitionSplitProperties = new OrientationPair(new NumberProperty(options.initialHorizontalSplit), new NumberProperty(options.initialVerticalSplit));

    // @public {OrientationPair.<Property.<boolean>>}
    this.partitionSplitUserControlledProperties = new OrientationPair(new BooleanProperty(false), new BooleanProperty(false));

    // @public {number}
    this.maximumSize = options.maximumSize;
    this.minimumSize = options.minimumSize;
    this.eraseWidth = options.eraseWidth;
    this.eraseHeight = options.eraseHeight;
    this.snapSize = options.snapSize;
    this.partitionSnapSize = options.partitionSnapSize;
    this.gridSpacing = options.gridSpacing;
    this.smallTileSize = options.smallTileSize;
    this.largeTileSize = options.largeTileSize;

    // @public {boolean}
    this.tilesAvailable = options.tilesAvailable;
    this.countingAvailable = options.countingAvailable;

    // @public {PartitionLineChoice}
    this.partitionLineChoice = options.partitionLineChoice;

    // @public {OrientationPair.<BooleanProperty>} - Whether to display arrows next to each partition line that
    // indicates it is draggable.
    this.hasHintArrows = new OrientationPair(new BooleanProperty(true), new BooleanProperty(true));

    // @public {OrientationPair.<Property.<boolean>>} - Whether the partition line for each orientation is visible
    this.partitionSplitVisibleProperties = OrientationPair.create(orientation => new DerivedProperty([this.activeTotalProperties.get(orientation), this.visiblePartitionOrientationProperty], (totalSize, visibleOrientation) => {
      if (options.partitionLineChoice === PartitionLineChoice.NONE) {
        return false;
      }
      if (options.partitionLineChoice === PartitionLineChoice.ONE && orientation !== visibleOrientation) {
        return false;
      }

      // Given the number of digits in the decimals sim (with potential future changes), 1e-7 should be sufficiently
      // small (but not too small).
      return totalSize >= this.partitionSnapSize + this.snapSize - 1e-7;
    }));

    // @public {OrientationPair.<Property.<number|null>>} - Like partitionSplitProperties, but null if the partition line is not visible
    this.visiblePartitionLineSplitProperties = OrientationPair.create(orientation => new DerivedProperty([this.partitionSplitProperties.get(orientation), this.partitionSplitVisibleProperties.get(orientation)], (partitionSplit, partitionVisible) => partitionVisible ? partitionSplit : null));

    // @public {OrientationPair.<ProportionalPartition>} - The primary (upper/left) and secondary (lower/right)
    // partitions, separated out for easy access.
    this.primaryPartitions = new OrientationPair(horizontalPartitions[0], verticalPartitions[0]);
    this.secondaryPartitions = new OrientationPair(horizontalPartitions[1], verticalPartitions[1]);

    // Keep partition sizes up-to-date
    Orientation.enumeration.values.forEach(orientation => {
      Multilink.multilink([this.activeTotalProperties.get(orientation), this.visiblePartitionLineSplitProperties.get(orientation)], (size, split) => {
        // Ignore splits at the boundary or outside our active area.
        if (split <= 0 || split >= size) {
          split = null;
        }
        const primaryPartition = this.primaryPartitions.get(orientation);
        const secondaryPartition = this.secondaryPartitions.get(orientation);
        secondaryPartition.visibleProperty.value = split !== null;
        if (split) {
          primaryPartition.sizeProperty.value = new Term(split);
          secondaryPartition.sizeProperty.value = new Term(size - split);
          primaryPartition.coordinateRangeProperty.value = new Range(0, split);
          secondaryPartition.coordinateRangeProperty.value = new Range(split, size);
        } else {
          primaryPartition.sizeProperty.value = new Term(size);
          secondaryPartition.sizeProperty.value = null;
          primaryPartition.coordinateRangeProperty.value = new Range(0, size);
          secondaryPartition.coordinateRangeProperty.value = null;
        }
      });

      // Remove splits that are at or past the current boundary.
      this.activeTotalProperties.get(orientation).link(total => {
        if (this.partitionSplitProperties.get(orientation).value >= total) {
          this.partitionSplitProperties.get(orientation).value = this.partitionSplitUserControlledProperties.get(orientation).value ? total : 0;
        }
      });
    });
  }

  /**
   * Returns a string like 10x10 that can be used for the size.
   * @public
   *
   * @returns {string}
   */
  getDimensionString() {
    return `${this.maximumSize}x${this.maximumSize}`;
  }

  /**
   * Resets the area to its initial values.
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.hasHintArrows.reset();
    this.partitionSplitProperties.reset();
    this.visiblePartitionOrientationProperty.reset();
    this.activeTotalProperties.reset();
  }

  /**
   * Erase the area to a 1x1, see https://github.com/phetsims/area-model-common/issues/77
   * @public
   * @override
   */
  erase() {
    super.erase();
    this.activeTotalProperties.horizontal.value = this.eraseWidth;
    this.activeTotalProperties.vertical.value = this.eraseHeight;
  }
}
areaModelCommon.register('ProportionalArea', ProportionalArea);
export default ProportionalArea;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJNdWx0aWxpbmsiLCJOdW1iZXJQcm9wZXJ0eSIsIlByb3BlcnR5IiwiUmFuZ2UiLCJtZXJnZSIsIk9yaWVudGF0aW9uIiwiYXJlYU1vZGVsQ29tbW9uIiwiQXJlYSIsIk9yaWVudGF0aW9uUGFpciIsIlBhcnRpdGlvbiIsIlRlcm0iLCJBcmVhTW9kZWxDb21tb25Db2xvcnMiLCJQYXJ0aXRpb25MaW5lQ2hvaWNlIiwiUHJvcG9ydGlvbmFsQXJlYSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm1heGltdW1TaXplIiwibWluaW11bVNpemUiLCJpbml0aWFsV2lkdGgiLCJpbml0aWFsSGVpZ2h0IiwiZXJhc2VXaWR0aCIsImVyYXNlSGVpZ2h0IiwiaW5pdGlhbEhvcml6b250YWxTcGxpdCIsImluaXRpYWxWZXJ0aWNhbFNwbGl0Iiwic25hcFNpemUiLCJwYXJ0aXRpb25TbmFwU2l6ZSIsImdyaWRTcGFjaW5nIiwic21hbGxUaWxlU2l6ZSIsImxhcmdlVGlsZVNpemUiLCJ0aWxlc0F2YWlsYWJsZSIsImNvdW50aW5nQXZhaWxhYmxlIiwicGFydGl0aW9uTGluZUNob2ljZSIsIkJPVEgiLCJob3Jpem9udGFsUGFydGl0aW9ucyIsIkhPUklaT05UQUwiLCJwcm9wb3J0aW9uYWxXaWR0aFByb3BlcnR5IiwidmVydGljYWxQYXJ0aXRpb25zIiwiVkVSVElDQUwiLCJwcm9wb3J0aW9uYWxIZWlnaHRQcm9wZXJ0eSIsInByb3BvcnRpb25hbENvbG9yUHJvcGVydGllcyIsImFjdGl2ZVRvdGFsUHJvcGVydGllcyIsInZpc2libGVQYXJ0aXRpb25PcmllbnRhdGlvblByb3BlcnR5IiwicGFydGl0aW9uU3BsaXRQcm9wZXJ0aWVzIiwicGFydGl0aW9uU3BsaXRVc2VyQ29udHJvbGxlZFByb3BlcnRpZXMiLCJoYXNIaW50QXJyb3dzIiwicGFydGl0aW9uU3BsaXRWaXNpYmxlUHJvcGVydGllcyIsImNyZWF0ZSIsIm9yaWVudGF0aW9uIiwiZ2V0IiwidG90YWxTaXplIiwidmlzaWJsZU9yaWVudGF0aW9uIiwiTk9ORSIsIk9ORSIsInZpc2libGVQYXJ0aXRpb25MaW5lU3BsaXRQcm9wZXJ0aWVzIiwicGFydGl0aW9uU3BsaXQiLCJwYXJ0aXRpb25WaXNpYmxlIiwicHJpbWFyeVBhcnRpdGlvbnMiLCJzZWNvbmRhcnlQYXJ0aXRpb25zIiwiZW51bWVyYXRpb24iLCJ2YWx1ZXMiLCJmb3JFYWNoIiwibXVsdGlsaW5rIiwic2l6ZSIsInNwbGl0IiwicHJpbWFyeVBhcnRpdGlvbiIsInNlY29uZGFyeVBhcnRpdGlvbiIsInZpc2libGVQcm9wZXJ0eSIsInZhbHVlIiwic2l6ZVByb3BlcnR5IiwiY29vcmRpbmF0ZVJhbmdlUHJvcGVydHkiLCJsaW5rIiwidG90YWwiLCJnZXREaW1lbnNpb25TdHJpbmciLCJyZXNldCIsImVyYXNlIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm9wb3J0aW9uYWxBcmVhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgcHJvcG9ydGlvbmFsIGFyZWEsIHNwbGl0IHVwIGJ5IHVwIHRvIG9uZSBob3Jpem9udGFsIHBhcnRpdGlvbiBsaW5lIGFuZCBvbmUgdmVydGljYWwgcGFydGl0aW9uIGxpbmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgT3JpZW50YXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL09yaWVudGF0aW9uLmpzJztcclxuaW1wb3J0IGFyZWFNb2RlbENvbW1vbiBmcm9tICcuLi8uLi9hcmVhTW9kZWxDb21tb24uanMnO1xyXG5pbXBvcnQgQXJlYSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQXJlYS5qcyc7XHJcbmltcG9ydCBPcmllbnRhdGlvblBhaXIgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL09yaWVudGF0aW9uUGFpci5qcyc7XHJcbmltcG9ydCBQYXJ0aXRpb24gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1BhcnRpdGlvbi5qcyc7XHJcbmltcG9ydCBUZXJtIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9UZXJtLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vbkNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9BcmVhTW9kZWxDb21tb25Db2xvcnMuanMnO1xyXG5pbXBvcnQgUGFydGl0aW9uTGluZUNob2ljZSBmcm9tICcuL1BhcnRpdGlvbkxpbmVDaG9pY2UuanMnO1xyXG5cclxuY2xhc3MgUHJvcG9ydGlvbmFsQXJlYSBleHRlbmRzIEFyZWEge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgbWF4aW11bVNpemU6IDIwLCAvLyB7bnVtYmVyfSAtIE1heGltdW0gc2l6ZSBvdXIgYXJlYSBjYW4gdGFrZSB1cFxyXG4gICAgICBtaW5pbXVtU2l6ZTogMSwgLy8ge251bWJlcn0gLSBNaW5pbXVtIHNpemUgb3VyIGFyZWEgY2FuIHRha2UgdXBcclxuICAgICAgaW5pdGlhbFdpZHRoOiAxLCAvLyB7bnVtYmVyfSAtIEluaXRpYWwgd2lkdGhcclxuICAgICAgaW5pdGlhbEhlaWdodDogMSwgLy8ge251bWJlcn0gLSBJbml0aWFsIGhlaWdodFxyXG4gICAgICBlcmFzZVdpZHRoOiAxLCAvLyB7bnVtYmVyfSAtIFRoZSB3aWR0aCB0aGF0IHdpbGwgYmUgc2V0IHdpdGggdGhlIGVyYXNlIGJ1dHRvblxyXG4gICAgICBlcmFzZUhlaWdodDogMSwgLy8ge251bWJlcn0gLSBUaGUgaGVpZ2h0IHRoYXQgd2lsbCBiZSBzZXQgd2l0aCB0aGUgZXJhc2UgYnV0dG9uXHJcbiAgICAgIGluaXRpYWxIb3Jpem9udGFsU3BsaXQ6IDAsIC8vIHtudW1iZXJ9IC0gSW5pdGlhbCBwb3NpdGlvbiAoaWYgYW55KSBvZiBhIGhvcml6b250YWwgcGFydGl0aW9uIHNwbGl0XHJcbiAgICAgIGluaXRpYWxWZXJ0aWNhbFNwbGl0OiAwLCAvLyB7bnVtYmVyfSAtIEluaXRpYWwgcG9zaXRpb24gKGlmIGFueSkgb2YgYSB2ZXJ0aWNhbCBwYXJ0aXRpb24gc3BsaXRcclxuICAgICAgc25hcFNpemU6IDEsIC8vIHtudW1iZXJ9IC0gU21hbGxlc3QgdW5pdCBzaXplICh0aGF0IGlzIHNuYXBwZWQgdG8pXHJcbiAgICAgIHBhcnRpdGlvblNuYXBTaXplOiAxMCwgLy8ge251bWJlcn0gLSBTbWFsbGVzdCBsZWZ0L3RvcCBwYXJ0aXRpb24gc2l6ZVxyXG4gICAgICBncmlkU3BhY2luZzogMSwgLy8ge251bWJlcn0gLSBTcGFjZSBiZXR3ZWVuIGdyaWQgbGluZXNcclxuICAgICAgc21hbGxUaWxlU2l6ZTogMSwgLy8ge251bWJlcn0gLSBTaXplIG9mIHRoZSBzbWFsbGVzdCB0aWxlIGF2YWlsYWJsZSAob3IgZm9yIHRoZSB0aGluIHRpbGVzLCB0aGUgc2hvcnRlciBsZW5ndGgpXHJcbiAgICAgIGxhcmdlVGlsZVNpemU6IDEwLCAvLyB7bnVtYmVyfSAtIFNpemUgb2YgdGhlIGxhcmdlc3QgdGlsZSBhdmFpbGFibGUgKG9yIGZvciB0aGUgdGhpbiB0aWxlcywgdGhlIGxvbmdlciBsZW5ndGgpXHJcbiAgICAgIHRpbGVzQXZhaWxhYmxlOiB0cnVlLCAvLyB7Ym9vbGVhbn0gLSBXaGV0aGVyIHRpbGVzIGNhbiBiZSBzaG93biBvbiB0aGlzIGFyZWFcclxuICAgICAgY291bnRpbmdBdmFpbGFibGU6IGZhbHNlLCAvLyB7Ym9vbGVhbn0gLSBXaGV0aGVyIG51bWJlcnMgY2FuIGJlIHNob3duIG9uIGVhY2ggZ3JpZCBzZWN0aW9uXHJcbiAgICAgIHBhcnRpdGlvbkxpbmVDaG9pY2U6IFBhcnRpdGlvbkxpbmVDaG9pY2UuQk9USCAvLyB7UGFydGl0aW9uTGluZUNob2ljZX0gLSBXaGF0IHBhcnRpdGlvbiBsaW5lcyBhcmUgc2hvd25cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBob3Jpem9udGFsUGFydGl0aW9ucyA9IFtcclxuICAgICAgbmV3IFBhcnRpdGlvbiggT3JpZW50YXRpb24uSE9SSVpPTlRBTCwgQXJlYU1vZGVsQ29tbW9uQ29sb3JzLnByb3BvcnRpb25hbFdpZHRoUHJvcGVydHkgKSxcclxuICAgICAgbmV3IFBhcnRpdGlvbiggT3JpZW50YXRpb24uSE9SSVpPTlRBTCwgQXJlYU1vZGVsQ29tbW9uQ29sb3JzLnByb3BvcnRpb25hbFdpZHRoUHJvcGVydHkgKVxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCB2ZXJ0aWNhbFBhcnRpdGlvbnMgPSBbXHJcbiAgICAgIG5ldyBQYXJ0aXRpb24oIE9yaWVudGF0aW9uLlZFUlRJQ0FMLCBBcmVhTW9kZWxDb21tb25Db2xvcnMucHJvcG9ydGlvbmFsSGVpZ2h0UHJvcGVydHkgKSxcclxuICAgICAgbmV3IFBhcnRpdGlvbiggT3JpZW50YXRpb24uVkVSVElDQUwsIEFyZWFNb2RlbENvbW1vbkNvbG9ycy5wcm9wb3J0aW9uYWxIZWlnaHRQcm9wZXJ0eSApXHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICBuZXcgT3JpZW50YXRpb25QYWlyKCBob3Jpem9udGFsUGFydGl0aW9ucywgdmVydGljYWxQYXJ0aXRpb25zICksXHJcbiAgICAgIEFyZWFNb2RlbENvbW1vbkNvbG9ycy5wcm9wb3J0aW9uYWxDb2xvclByb3BlcnRpZXMsXHJcbiAgICAgIG9wdGlvbnMubWF4aW11bVNpemUsXHJcbiAgICAgIGZhbHNlXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge09yaWVudGF0aW9uUGFpci48UHJvcGVydHkuPG51bWJlcj4+fSAtIFdpZHRoL2hlaWdodCBvZiB0aGUgY29udGFpbmVkIGFyZWEuXHJcbiAgICB0aGlzLmFjdGl2ZVRvdGFsUHJvcGVydGllcyA9IG5ldyBPcmllbnRhdGlvblBhaXIoXHJcbiAgICAgIG5ldyBOdW1iZXJQcm9wZXJ0eSggb3B0aW9ucy5pbml0aWFsV2lkdGggKSxcclxuICAgICAgbmV3IE51bWJlclByb3BlcnR5KCBvcHRpb25zLmluaXRpYWxIZWlnaHQgKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48T3JpZW50YXRpb24+fSAtIElmIFBhcnRpdGlvbkxpbmVDaG9pY2UuT05FIGlzIGFjdGl2ZSwgd2hpY2ggcGFydGl0aW9uIGxpbmUgaXMgYWN0aXZlXHJcbiAgICB0aGlzLnZpc2libGVQYXJ0aXRpb25PcmllbnRhdGlvblByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBPcmllbnRhdGlvbi5IT1JJWk9OVEFMICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7T3JpZW50YXRpb25QYWlyLjxQcm9wZXJ0eS48bnVtYmVyPj59IC0gUG9zaXRpb24gb2YgdGhlIHBhcnRpdGlvbiBsaW5lc1xyXG4gICAgdGhpcy5wYXJ0aXRpb25TcGxpdFByb3BlcnRpZXMgPSBuZXcgT3JpZW50YXRpb25QYWlyKFxyXG4gICAgICBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMuaW5pdGlhbEhvcml6b250YWxTcGxpdCApLFxyXG4gICAgICBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMuaW5pdGlhbFZlcnRpY2FsU3BsaXQgKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtPcmllbnRhdGlvblBhaXIuPFByb3BlcnR5Ljxib29sZWFuPj59XHJcbiAgICB0aGlzLnBhcnRpdGlvblNwbGl0VXNlckNvbnRyb2xsZWRQcm9wZXJ0aWVzID0gbmV3IE9yaWVudGF0aW9uUGFpcihcclxuICAgICAgbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKSxcclxuICAgICAgbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtudW1iZXJ9XHJcbiAgICB0aGlzLm1heGltdW1TaXplID0gb3B0aW9ucy5tYXhpbXVtU2l6ZTtcclxuICAgIHRoaXMubWluaW11bVNpemUgPSBvcHRpb25zLm1pbmltdW1TaXplO1xyXG4gICAgdGhpcy5lcmFzZVdpZHRoID0gb3B0aW9ucy5lcmFzZVdpZHRoO1xyXG4gICAgdGhpcy5lcmFzZUhlaWdodCA9IG9wdGlvbnMuZXJhc2VIZWlnaHQ7XHJcbiAgICB0aGlzLnNuYXBTaXplID0gb3B0aW9ucy5zbmFwU2l6ZTtcclxuICAgIHRoaXMucGFydGl0aW9uU25hcFNpemUgPSBvcHRpb25zLnBhcnRpdGlvblNuYXBTaXplO1xyXG4gICAgdGhpcy5ncmlkU3BhY2luZyA9IG9wdGlvbnMuZ3JpZFNwYWNpbmc7XHJcbiAgICB0aGlzLnNtYWxsVGlsZVNpemUgPSBvcHRpb25zLnNtYWxsVGlsZVNpemU7XHJcbiAgICB0aGlzLmxhcmdlVGlsZVNpemUgPSBvcHRpb25zLmxhcmdlVGlsZVNpemU7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7Ym9vbGVhbn1cclxuICAgIHRoaXMudGlsZXNBdmFpbGFibGUgPSBvcHRpb25zLnRpbGVzQXZhaWxhYmxlO1xyXG4gICAgdGhpcy5jb3VudGluZ0F2YWlsYWJsZSA9IG9wdGlvbnMuY291bnRpbmdBdmFpbGFibGU7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UGFydGl0aW9uTGluZUNob2ljZX1cclxuICAgIHRoaXMucGFydGl0aW9uTGluZUNob2ljZSA9IG9wdGlvbnMucGFydGl0aW9uTGluZUNob2ljZTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtPcmllbnRhdGlvblBhaXIuPEJvb2xlYW5Qcm9wZXJ0eT59IC0gV2hldGhlciB0byBkaXNwbGF5IGFycm93cyBuZXh0IHRvIGVhY2ggcGFydGl0aW9uIGxpbmUgdGhhdFxyXG4gICAgLy8gaW5kaWNhdGVzIGl0IGlzIGRyYWdnYWJsZS5cclxuICAgIHRoaXMuaGFzSGludEFycm93cyA9IG5ldyBPcmllbnRhdGlvblBhaXIoIG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUgKSwgbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSApICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7T3JpZW50YXRpb25QYWlyLjxQcm9wZXJ0eS48Ym9vbGVhbj4+fSAtIFdoZXRoZXIgdGhlIHBhcnRpdGlvbiBsaW5lIGZvciBlYWNoIG9yaWVudGF0aW9uIGlzIHZpc2libGVcclxuICAgIHRoaXMucGFydGl0aW9uU3BsaXRWaXNpYmxlUHJvcGVydGllcyA9IE9yaWVudGF0aW9uUGFpci5jcmVhdGUoIG9yaWVudGF0aW9uID0+IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgdGhpcy5hY3RpdmVUb3RhbFByb3BlcnRpZXMuZ2V0KCBvcmllbnRhdGlvbiApLCB0aGlzLnZpc2libGVQYXJ0aXRpb25PcmllbnRhdGlvblByb3BlcnR5IF0sXHJcbiAgICAgICggdG90YWxTaXplLCB2aXNpYmxlT3JpZW50YXRpb24gKSA9PiB7XHJcbiAgICAgICAgaWYgKCBvcHRpb25zLnBhcnRpdGlvbkxpbmVDaG9pY2UgPT09IFBhcnRpdGlvbkxpbmVDaG9pY2UuTk9ORSApIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgICAgICAgaWYgKCBvcHRpb25zLnBhcnRpdGlvbkxpbmVDaG9pY2UgPT09IFBhcnRpdGlvbkxpbmVDaG9pY2UuT05FICYmIG9yaWVudGF0aW9uICE9PSB2aXNpYmxlT3JpZW50YXRpb24gKSB7IHJldHVybiBmYWxzZTsgfVxyXG5cclxuICAgICAgICAvLyBHaXZlbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZGVjaW1hbHMgc2ltICh3aXRoIHBvdGVudGlhbCBmdXR1cmUgY2hhbmdlcyksIDFlLTcgc2hvdWxkIGJlIHN1ZmZpY2llbnRseVxyXG4gICAgICAgIC8vIHNtYWxsIChidXQgbm90IHRvbyBzbWFsbCkuXHJcbiAgICAgICAgcmV0dXJuIHRvdGFsU2l6ZSA+PSAoIHRoaXMucGFydGl0aW9uU25hcFNpemUgKyB0aGlzLnNuYXBTaXplICkgLSAxZS03O1xyXG4gICAgICB9ICkgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtPcmllbnRhdGlvblBhaXIuPFByb3BlcnR5LjxudW1iZXJ8bnVsbD4+fSAtIExpa2UgcGFydGl0aW9uU3BsaXRQcm9wZXJ0aWVzLCBidXQgbnVsbCBpZiB0aGUgcGFydGl0aW9uIGxpbmUgaXMgbm90IHZpc2libGVcclxuICAgIHRoaXMudmlzaWJsZVBhcnRpdGlvbkxpbmVTcGxpdFByb3BlcnRpZXMgPSBPcmllbnRhdGlvblBhaXIuY3JlYXRlKCBvcmllbnRhdGlvbiA9PiBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIHRoaXMucGFydGl0aW9uU3BsaXRQcm9wZXJ0aWVzLmdldCggb3JpZW50YXRpb24gKSwgdGhpcy5wYXJ0aXRpb25TcGxpdFZpc2libGVQcm9wZXJ0aWVzLmdldCggb3JpZW50YXRpb24gKSBdLFxyXG4gICAgICAoIHBhcnRpdGlvblNwbGl0LCBwYXJ0aXRpb25WaXNpYmxlICkgPT4gcGFydGl0aW9uVmlzaWJsZSA/IHBhcnRpdGlvblNwbGl0IDogbnVsbCApICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7T3JpZW50YXRpb25QYWlyLjxQcm9wb3J0aW9uYWxQYXJ0aXRpb24+fSAtIFRoZSBwcmltYXJ5ICh1cHBlci9sZWZ0KSBhbmQgc2Vjb25kYXJ5IChsb3dlci9yaWdodClcclxuICAgIC8vIHBhcnRpdGlvbnMsIHNlcGFyYXRlZCBvdXQgZm9yIGVhc3kgYWNjZXNzLlxyXG4gICAgdGhpcy5wcmltYXJ5UGFydGl0aW9ucyA9IG5ldyBPcmllbnRhdGlvblBhaXIoIGhvcml6b250YWxQYXJ0aXRpb25zWyAwIF0sIHZlcnRpY2FsUGFydGl0aW9uc1sgMCBdICk7XHJcbiAgICB0aGlzLnNlY29uZGFyeVBhcnRpdGlvbnMgPSBuZXcgT3JpZW50YXRpb25QYWlyKCBob3Jpem9udGFsUGFydGl0aW9uc1sgMSBdLCB2ZXJ0aWNhbFBhcnRpdGlvbnNbIDEgXSApO1xyXG5cclxuICAgIC8vIEtlZXAgcGFydGl0aW9uIHNpemVzIHVwLXRvLWRhdGVcclxuICAgIE9yaWVudGF0aW9uLmVudW1lcmF0aW9uLnZhbHVlcy5mb3JFYWNoKCBvcmllbnRhdGlvbiA9PiB7XHJcbiAgICAgIE11bHRpbGluay5tdWx0aWxpbmsoXHJcbiAgICAgICAgWyB0aGlzLmFjdGl2ZVRvdGFsUHJvcGVydGllcy5nZXQoIG9yaWVudGF0aW9uICksIHRoaXMudmlzaWJsZVBhcnRpdGlvbkxpbmVTcGxpdFByb3BlcnRpZXMuZ2V0KCBvcmllbnRhdGlvbiApIF0sXHJcbiAgICAgICAgKCBzaXplLCBzcGxpdCApID0+IHtcclxuICAgICAgICAgIC8vIElnbm9yZSBzcGxpdHMgYXQgdGhlIGJvdW5kYXJ5IG9yIG91dHNpZGUgb3VyIGFjdGl2ZSBhcmVhLlxyXG4gICAgICAgICAgaWYgKCBzcGxpdCA8PSAwIHx8IHNwbGl0ID49IHNpemUgKSB7XHJcbiAgICAgICAgICAgIHNwbGl0ID0gbnVsbDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBwcmltYXJ5UGFydGl0aW9uID0gdGhpcy5wcmltYXJ5UGFydGl0aW9ucy5nZXQoIG9yaWVudGF0aW9uICk7XHJcbiAgICAgICAgICBjb25zdCBzZWNvbmRhcnlQYXJ0aXRpb24gPSB0aGlzLnNlY29uZGFyeVBhcnRpdGlvbnMuZ2V0KCBvcmllbnRhdGlvbiApO1xyXG5cclxuICAgICAgICAgIHNlY29uZGFyeVBhcnRpdGlvbi52aXNpYmxlUHJvcGVydHkudmFsdWUgPSBzcGxpdCAhPT0gbnVsbDtcclxuXHJcbiAgICAgICAgICBpZiAoIHNwbGl0ICkge1xyXG4gICAgICAgICAgICBwcmltYXJ5UGFydGl0aW9uLnNpemVQcm9wZXJ0eS52YWx1ZSA9IG5ldyBUZXJtKCBzcGxpdCApO1xyXG4gICAgICAgICAgICBzZWNvbmRhcnlQYXJ0aXRpb24uc2l6ZVByb3BlcnR5LnZhbHVlID0gbmV3IFRlcm0oIHNpemUgLSBzcGxpdCApO1xyXG4gICAgICAgICAgICBwcmltYXJ5UGFydGl0aW9uLmNvb3JkaW5hdGVSYW5nZVByb3BlcnR5LnZhbHVlID0gbmV3IFJhbmdlKCAwLCBzcGxpdCApO1xyXG4gICAgICAgICAgICBzZWNvbmRhcnlQYXJ0aXRpb24uY29vcmRpbmF0ZVJhbmdlUHJvcGVydHkudmFsdWUgPSBuZXcgUmFuZ2UoIHNwbGl0LCBzaXplICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJpbWFyeVBhcnRpdGlvbi5zaXplUHJvcGVydHkudmFsdWUgPSBuZXcgVGVybSggc2l6ZSApO1xyXG4gICAgICAgICAgICBzZWNvbmRhcnlQYXJ0aXRpb24uc2l6ZVByb3BlcnR5LnZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgcHJpbWFyeVBhcnRpdGlvbi5jb29yZGluYXRlUmFuZ2VQcm9wZXJ0eS52YWx1ZSA9IG5ldyBSYW5nZSggMCwgc2l6ZSApO1xyXG4gICAgICAgICAgICBzZWNvbmRhcnlQYXJ0aXRpb24uY29vcmRpbmF0ZVJhbmdlUHJvcGVydHkudmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgIC8vIFJlbW92ZSBzcGxpdHMgdGhhdCBhcmUgYXQgb3IgcGFzdCB0aGUgY3VycmVudCBib3VuZGFyeS5cclxuICAgICAgdGhpcy5hY3RpdmVUb3RhbFByb3BlcnRpZXMuZ2V0KCBvcmllbnRhdGlvbiApLmxpbmsoIHRvdGFsID0+IHtcclxuICAgICAgICBpZiAoIHRoaXMucGFydGl0aW9uU3BsaXRQcm9wZXJ0aWVzLmdldCggb3JpZW50YXRpb24gKS52YWx1ZSA+PSB0b3RhbCApIHtcclxuICAgICAgICAgIHRoaXMucGFydGl0aW9uU3BsaXRQcm9wZXJ0aWVzLmdldCggb3JpZW50YXRpb24gKS52YWx1ZSA9IHRoaXMucGFydGl0aW9uU3BsaXRVc2VyQ29udHJvbGxlZFByb3BlcnRpZXMuZ2V0KCBvcmllbnRhdGlvbiApLnZhbHVlID8gdG90YWwgOiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIHN0cmluZyBsaWtlIDEweDEwIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHRoZSBzaXplLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICovXHJcbiAgZ2V0RGltZW5zaW9uU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIGAke3RoaXMubWF4aW11bVNpemV9eCR7dGhpcy5tYXhpbXVtU2l6ZX1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoZSBhcmVhIHRvIGl0cyBpbml0aWFsIHZhbHVlcy5cclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG5cclxuICAgIHRoaXMuaGFzSGludEFycm93cy5yZXNldCgpO1xyXG4gICAgdGhpcy5wYXJ0aXRpb25TcGxpdFByb3BlcnRpZXMucmVzZXQoKTtcclxuICAgIHRoaXMudmlzaWJsZVBhcnRpdGlvbk9yaWVudGF0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuYWN0aXZlVG90YWxQcm9wZXJ0aWVzLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFcmFzZSB0aGUgYXJlYSB0byBhIDF4MSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9hcmVhLW1vZGVsLWNvbW1vbi9pc3N1ZXMvNzdcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZXJhc2UoKSB7XHJcbiAgICBzdXBlci5lcmFzZSgpO1xyXG5cclxuICAgIHRoaXMuYWN0aXZlVG90YWxQcm9wZXJ0aWVzLmhvcml6b250YWwudmFsdWUgPSB0aGlzLmVyYXNlV2lkdGg7XHJcbiAgICB0aGlzLmFjdGl2ZVRvdGFsUHJvcGVydGllcy52ZXJ0aWNhbC52YWx1ZSA9IHRoaXMuZXJhc2VIZWlnaHQ7XHJcbiAgfVxyXG59XHJcblxyXG5hcmVhTW9kZWxDb21tb24ucmVnaXN0ZXIoICdQcm9wb3J0aW9uYWxBcmVhJywgUHJvcG9ydGlvbmFsQXJlYSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvcG9ydGlvbmFsQXJlYTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxTQUFTLE1BQU0sa0NBQWtDO0FBQ3hELE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQs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