// Copyright 2018-2022, University of Colorado Boulder

/**
 * The "Game" screen in "Area Model: Algebra"
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import variablesGameScreenIcon_png from '../../mipmaps/variablesGameScreenIcon_png.js';
import variablesGameScreenNavbar_png from '../../mipmaps/variablesGameScreenNavbar_png.js';
import areaModelCommon from '../areaModelCommon.js';
import AreaModelCommonStrings from '../AreaModelCommonStrings.js';
import AreaModelCommonColors from '../common/view/AreaModelCommonColors.js';
import VariablesGameAreaModel from '../game/model/VariablesGameAreaModel.js';
import GameAreaScreenView from '../game/view/GameAreaScreenView.js';
class VariablesGameScreen extends Screen {
  constructor() {
    const options = {
      name: AreaModelCommonStrings.screen.gameStringProperty,
      backgroundColorProperty: AreaModelCommonColors.backgroundProperty,
      homeScreenIcon: new ScreenIcon(new Image(variablesGameScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      navigationBarIcon: new ScreenIcon(new Image(variablesGameScreenNavbar_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      })
    };
    super(() => new VariablesGameAreaModel(), model => new GameAreaScreenView(model), options);
  }
}
areaModelCommon.register('VariablesGameScreen', VariablesGameScreen);
export default VariablesGameScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJ2YXJpYWJsZXNHYW1lU2NyZWVuSWNvbl9wbmciLCJ2YXJpYWJsZXNHYW1lU2NyZWVuTmF2YmFyX3BuZyIsImFyZWFNb2RlbENvbW1vbiIsIkFyZWFNb2RlbENvbW1vblN0cmluZ3MiLCJBcmVhTW9kZWxDb21tb25Db2xvcnMiLCJWYXJpYWJsZXNHYW1lQXJlYU1vZGVsIiwiR2FtZUFyZWFTY3JlZW5WaWV3IiwiVmFyaWFibGVzR2FtZVNjcmVlbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm5hbWUiLCJzY3JlZW4iLCJnYW1lU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImJhY2tncm91bmRQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwibmF2aWdhdGlvbkJhckljb24iLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVmFyaWFibGVzR2FtZVNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgXCJHYW1lXCIgc2NyZWVuIGluIFwiQXJlYSBNb2RlbDogQWxnZWJyYVwiXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB2YXJpYWJsZXNHYW1lU2NyZWVuSWNvbl9wbmcgZnJvbSAnLi4vLi4vbWlwbWFwcy92YXJpYWJsZXNHYW1lU2NyZWVuSWNvbl9wbmcuanMnO1xyXG5pbXBvcnQgdmFyaWFibGVzR2FtZVNjcmVlbk5hdmJhcl9wbmcgZnJvbSAnLi4vLi4vbWlwbWFwcy92YXJpYWJsZXNHYW1lU2NyZWVuTmF2YmFyX3BuZy5qcyc7XHJcbmltcG9ydCBhcmVhTW9kZWxDb21tb24gZnJvbSAnLi4vYXJlYU1vZGVsQ29tbW9uLmpzJztcclxuaW1wb3J0IEFyZWFNb2RlbENvbW1vblN0cmluZ3MgZnJvbSAnLi4vQXJlYU1vZGVsQ29tbW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBBcmVhTW9kZWxDb21tb25Db2xvcnMgZnJvbSAnLi4vY29tbW9uL3ZpZXcvQXJlYU1vZGVsQ29tbW9uQ29sb3JzLmpzJztcclxuaW1wb3J0IFZhcmlhYmxlc0dhbWVBcmVhTW9kZWwgZnJvbSAnLi4vZ2FtZS9tb2RlbC9WYXJpYWJsZXNHYW1lQXJlYU1vZGVsLmpzJztcclxuaW1wb3J0IEdhbWVBcmVhU2NyZWVuVmlldyBmcm9tICcuLi9nYW1lL3ZpZXcvR2FtZUFyZWFTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIFZhcmlhYmxlc0dhbWVTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IEFyZWFNb2RlbENvbW1vblN0cmluZ3Muc2NyZWVuLmdhbWVTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IEFyZWFNb2RlbENvbW1vbkNvbG9ycy5iYWNrZ3JvdW5kUHJvcGVydHksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU2NyZWVuSWNvbiggbmV3IEltYWdlKCB2YXJpYWJsZXNHYW1lU2NyZWVuSWNvbl9wbmcgKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICBuYXZpZ2F0aW9uQmFySWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggdmFyaWFibGVzR2FtZVNjcmVlbk5hdmJhcl9wbmcgKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgVmFyaWFibGVzR2FtZUFyZWFNb2RlbCgpLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgR2FtZUFyZWFTY3JlZW5WaWV3KCBtb2RlbCApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuYXJlYU1vZGVsQ29tbW9uLnJlZ2lzdGVyKCAnVmFyaWFibGVzR2FtZVNjcmVlbicsIFZhcmlhYmxlc0dhbWVTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgVmFyaWFibGVzR2FtZVNjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsMkJBQTJCLE1BQU0sOENBQThDO0FBQ3RGLE9BQU9DLDZCQUE2QixNQUFNLGdEQUFnRDtBQUMxRixPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyxxQkFBcUIsTUFBTSx5Q0FBeUM7QUFDM0UsT0FBT0Msc0JBQXNCLE1BQU0seUNBQXlDO0FBQzVFLE9BQU9DLGtCQUFrQixNQUFNLG9DQUFvQztBQUVuRSxNQUFNQyxtQkFBbUIsU0FBU1YsTUFBTSxDQUFDO0VBQ3ZDVyxXQUFXQSxDQUFBLEVBQUc7SUFFWixNQUFNQyxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFUCxzQkFBc0IsQ0FBQ1EsTUFBTSxDQUFDQyxrQkFBa0I7TUFDdERDLHVCQUF1QixFQUFFVCxxQkFBcUIsQ0FBQ1Usa0JBQWtCO01BQ2pFQyxjQUFjLEVBQUUsSUFBSWpCLFVBQVUsQ0FBRSxJQUFJQyxLQUFLLENBQUVDLDJCQUE0QixDQUFDLEVBQUU7UUFDeEVnQixzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSEMsaUJBQWlCLEVBQUUsSUFBSXBCLFVBQVUsQ0FBRSxJQUFJQyxLQUFLLENBQUVFLDZCQUE4QixDQUFDLEVBQUU7UUFDN0VlLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUU7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUNILE1BQU0sSUFBSVosc0JBQXNCLENBQUMsQ0FBQyxFQUNsQ2MsS0FBSyxJQUFJLElBQUliLGtCQUFrQixDQUFFYSxLQUFNLENBQUMsRUFDeENWLE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVAsZUFBZSxDQUFDa0IsUUFBUSxDQUFFLHFCQUFxQixFQUFFYixtQkFBb0IsQ0FBQztBQUN0RSxlQUFlQSxtQkFBbUIifQ==