// Copyright 2018-2022, University of Colorado Boulder

/**
 * The "Variables" screen of "Area Model: Algebra"
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import variablesScreenIcon_png from '../../mipmaps/variablesScreenIcon_png.js';
import areaModelCommon from '../areaModelCommon.js';
import AreaModelCommonStrings from '../AreaModelCommonStrings.js';
import AreaModelCommonColors from '../common/view/AreaModelCommonColors.js';
import GenericAreaModel from '../generic/model/GenericAreaModel.js';
import GenericAreaScreenView from '../generic/view/GenericAreaScreenView.js';
class VariablesScreen extends Screen {
  constructor() {
    const options = {
      name: AreaModelCommonStrings.screen.variablesStringProperty,
      backgroundColorProperty: AreaModelCommonColors.backgroundProperty,
      homeScreenIcon: new ScreenIcon(new Image(variablesScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      })
    };
    super(() => {
      return new GenericAreaModel({
        allowExponents: true
      });
    }, model => new GenericAreaScreenView(model, 0), options);
  }
}
areaModelCommon.register('VariablesScreen', VariablesScreen);
export default VariablesScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJ2YXJpYWJsZXNTY3JlZW5JY29uX3BuZyIsImFyZWFNb2RlbENvbW1vbiIsIkFyZWFNb2RlbENvbW1vblN0cmluZ3MiLCJBcmVhTW9kZWxDb21tb25Db2xvcnMiLCJHZW5lcmljQXJlYU1vZGVsIiwiR2VuZXJpY0FyZWFTY3JlZW5WaWV3IiwiVmFyaWFibGVzU2NyZWVuIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsInZhcmlhYmxlc1N0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJiYWNrZ3JvdW5kUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsImFsbG93RXhwb25lbnRzIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZhcmlhYmxlc1NjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgXCJWYXJpYWJsZXNcIiBzY3JlZW4gb2YgXCJBcmVhIE1vZGVsOiBBbGdlYnJhXCJcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHZhcmlhYmxlc1NjcmVlbkljb25fcG5nIGZyb20gJy4uLy4uL21pcG1hcHMvdmFyaWFibGVzU2NyZWVuSWNvbl9wbmcuanMnO1xyXG5pbXBvcnQgYXJlYU1vZGVsQ29tbW9uIGZyb20gJy4uL2FyZWFNb2RlbENvbW1vbi5qcyc7XHJcbmltcG9ydCBBcmVhTW9kZWxDb21tb25TdHJpbmdzIGZyb20gJy4uL0FyZWFNb2RlbENvbW1vblN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQXJlYU1vZGVsQ29tbW9uQ29sb3JzIGZyb20gJy4uL2NvbW1vbi92aWV3L0FyZWFNb2RlbENvbW1vbkNvbG9ycy5qcyc7XHJcbmltcG9ydCBHZW5lcmljQXJlYU1vZGVsIGZyb20gJy4uL2dlbmVyaWMvbW9kZWwvR2VuZXJpY0FyZWFNb2RlbC5qcyc7XHJcbmltcG9ydCBHZW5lcmljQXJlYVNjcmVlblZpZXcgZnJvbSAnLi4vZ2VuZXJpYy92aWV3L0dlbmVyaWNBcmVhU2NyZWVuVmlldy5qcyc7XHJcblxyXG5jbGFzcyBWYXJpYWJsZXNTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IEFyZWFNb2RlbENvbW1vblN0cmluZ3Muc2NyZWVuLnZhcmlhYmxlc1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogQXJlYU1vZGVsQ29tbW9uQ29sb3JzLmJhY2tncm91bmRQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgSW1hZ2UoIHZhcmlhYmxlc1NjcmVlbkljb25fcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKVxyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgR2VuZXJpY0FyZWFNb2RlbCgge1xyXG4gICAgICAgICAgYWxsb3dFeHBvbmVudHM6IHRydWVcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIG1vZGVsID0+IG5ldyBHZW5lcmljQXJlYVNjcmVlblZpZXcoIG1vZGVsLCAwICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5hcmVhTW9kZWxDb21tb24ucmVnaXN0ZXIoICdWYXJpYWJsZXNTY3JlZW4nLCBWYXJpYWJsZXNTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgVmFyaWFibGVzU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyx1QkFBdUIsTUFBTSwwQ0FBMEM7QUFDOUUsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxzQkFBc0IsTUFBTSw4QkFBOEI7QUFDakUsT0FBT0MscUJBQXFCLE1BQU0seUNBQXlDO0FBQzNFLE9BQU9DLGdCQUFnQixNQUFNLHNDQUFzQztBQUNuRSxPQUFPQyxxQkFBcUIsTUFBTSwwQ0FBMEM7QUFFNUUsTUFBTUMsZUFBZSxTQUFTVCxNQUFNLENBQUM7RUFDbkNVLFdBQVdBLENBQUEsRUFBRztJQUVaLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVQLHNCQUFzQixDQUFDUSxNQUFNLENBQUNDLHVCQUF1QjtNQUMzREMsdUJBQXVCLEVBQUVULHFCQUFxQixDQUFDVSxrQkFBa0I7TUFDakVDLGNBQWMsRUFBRSxJQUFJaEIsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUMsdUJBQXdCLENBQUMsRUFBRTtRQUNwRWUsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRTtJQUNKLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTTtNQUNKLE9BQU8sSUFBSVosZ0JBQWdCLENBQUU7UUFDM0JhLGNBQWMsRUFBRTtNQUNsQixDQUFFLENBQUM7SUFDTCxDQUFDLEVBQ0RDLEtBQUssSUFBSSxJQUFJYixxQkFBcUIsQ0FBRWEsS0FBSyxFQUFFLENBQUUsQ0FBQyxFQUM5Q1YsT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCxlQUFlLENBQUNrQixRQUFRLENBQUUsaUJBQWlCLEVBQUViLGVBQWdCLENBQUM7QUFDOUQsZUFBZUEsZUFBZSJ9