// Copyright 2017-2021, University of Colorado Boulder

/**
 * Supertype for generic (not-to-scale) area-model models.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../../axon/js/Property.js';
import merge from '../../../../phet-core/js/merge.js';
import areaModelCommon from '../../areaModelCommon.js';
import AreaModelCommonModel from '../../common/model/AreaModelCommonModel.js';
import GenericArea from './GenericArea.js';
import GenericAreaDisplay from './GenericAreaDisplay.js';
import GenericLayout from './GenericLayout.js';

// constants
const DEFAULT_LAYOUT = GenericLayout.TWO_BY_TWO;
class GenericAreaModel extends AreaModelCommonModel {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    assert && assert(options === undefined || typeof options === 'object', 'If provided, options should be an object');
    options = merge({
      allowExponents: false
    }, options);
    const areas = GenericLayout.VALUES.map(layout => new GenericArea(layout, options.allowExponents));
    const defaultArea = _.find(areas, area => area.layout === DEFAULT_LAYOUT);
    super(areas, defaultArea, options);

    // @public {Property.<GenericLayout>} - The current layout that is visible/selected.
    this.genericLayoutProperty = new Property(DEFAULT_LAYOUT);

    // Adjust the current area based on the layout.
    this.genericLayoutProperty.link(layout => {
      this.currentAreaProperty.value = _.find(this.areas, area => area.layout === layout);
    });
  }

  /**
   * Returns a concrete AreaDisplay subtype
   * @protected
   *
   * @param {Property.<Area>} areaProperty
   * @returns {GenericAreaDisplay}
   */
  createAreaDisplay(areaProperty) {
    return new GenericAreaDisplay(areaProperty);
  }

  /**
   * Returns the model to its initial state.
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.genericLayoutProperty.reset();
  }
}
areaModelCommon.register('GenericAreaModel', GenericAreaModel);
export default GenericAreaModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIm1lcmdlIiwiYXJlYU1vZGVsQ29tbW9uIiwiQXJlYU1vZGVsQ29tbW9uTW9kZWwiLCJHZW5lcmljQXJlYSIsIkdlbmVyaWNBcmVhRGlzcGxheSIsIkdlbmVyaWNMYXlvdXQiLCJERUZBVUxUX0xBWU9VVCIsIlRXT19CWV9UV08iLCJHZW5lcmljQXJlYU1vZGVsIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiYXNzZXJ0IiwidW5kZWZpbmVkIiwiYWxsb3dFeHBvbmVudHMiLCJhcmVhcyIsIlZBTFVFUyIsIm1hcCIsImxheW91dCIsImRlZmF1bHRBcmVhIiwiXyIsImZpbmQiLCJhcmVhIiwiZ2VuZXJpY0xheW91dFByb3BlcnR5IiwibGluayIsImN1cnJlbnRBcmVhUHJvcGVydHkiLCJ2YWx1ZSIsImNyZWF0ZUFyZWFEaXNwbGF5IiwiYXJlYVByb3BlcnR5IiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdlbmVyaWNBcmVhTW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3VwZXJ0eXBlIGZvciBnZW5lcmljIChub3QtdG8tc2NhbGUpIGFyZWEtbW9kZWwgbW9kZWxzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGFyZWFNb2RlbENvbW1vbiBmcm9tICcuLi8uLi9hcmVhTW9kZWxDb21tb24uanMnO1xyXG5pbXBvcnQgQXJlYU1vZGVsQ29tbW9uTW9kZWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0FyZWFNb2RlbENvbW1vbk1vZGVsLmpzJztcclxuaW1wb3J0IEdlbmVyaWNBcmVhIGZyb20gJy4vR2VuZXJpY0FyZWEuanMnO1xyXG5pbXBvcnQgR2VuZXJpY0FyZWFEaXNwbGF5IGZyb20gJy4vR2VuZXJpY0FyZWFEaXNwbGF5LmpzJztcclxuaW1wb3J0IEdlbmVyaWNMYXlvdXQgZnJvbSAnLi9HZW5lcmljTGF5b3V0LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUZBVUxUX0xBWU9VVCA9IEdlbmVyaWNMYXlvdXQuVFdPX0JZX1RXTztcclxuXHJcbmNsYXNzIEdlbmVyaWNBcmVhTW9kZWwgZXh0ZW5kcyBBcmVhTW9kZWxDb21tb25Nb2RlbCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcsICdJZiBwcm92aWRlZCwgb3B0aW9ucyBzaG91bGQgYmUgYW4gb2JqZWN0JyApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBhbGxvd0V4cG9uZW50czogZmFsc2VcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBhcmVhcyA9IEdlbmVyaWNMYXlvdXQuVkFMVUVTLm1hcCggbGF5b3V0ID0+IG5ldyBHZW5lcmljQXJlYSggbGF5b3V0LCBvcHRpb25zLmFsbG93RXhwb25lbnRzICkgKTtcclxuXHJcbiAgICBjb25zdCBkZWZhdWx0QXJlYSA9IF8uZmluZCggYXJlYXMsIGFyZWEgPT4gYXJlYS5sYXlvdXQgPT09IERFRkFVTFRfTEFZT1VUICk7XHJcblxyXG4gICAgc3VwZXIoIGFyZWFzLCBkZWZhdWx0QXJlYSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5LjxHZW5lcmljTGF5b3V0Pn0gLSBUaGUgY3VycmVudCBsYXlvdXQgdGhhdCBpcyB2aXNpYmxlL3NlbGVjdGVkLlxyXG4gICAgdGhpcy5nZW5lcmljTGF5b3V0UHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIERFRkFVTFRfTEFZT1VUICk7XHJcblxyXG4gICAgLy8gQWRqdXN0IHRoZSBjdXJyZW50IGFyZWEgYmFzZWQgb24gdGhlIGxheW91dC5cclxuICAgIHRoaXMuZ2VuZXJpY0xheW91dFByb3BlcnR5LmxpbmsoIGxheW91dCA9PiB7XHJcbiAgICAgIHRoaXMuY3VycmVudEFyZWFQcm9wZXJ0eS52YWx1ZSA9IF8uZmluZCggdGhpcy5hcmVhcywgYXJlYSA9PiBhcmVhLmxheW91dCA9PT0gbGF5b3V0ICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgY29uY3JldGUgQXJlYURpc3BsYXkgc3VidHlwZVxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPEFyZWE+fSBhcmVhUHJvcGVydHlcclxuICAgKiBAcmV0dXJucyB7R2VuZXJpY0FyZWFEaXNwbGF5fVxyXG4gICAqL1xyXG4gIGNyZWF0ZUFyZWFEaXNwbGF5KCBhcmVhUHJvcGVydHkgKSB7XHJcbiAgICByZXR1cm4gbmV3IEdlbmVyaWNBcmVhRGlzcGxheSggYXJlYVByb3BlcnR5ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBtb2RlbCB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG5cclxuICAgIHRoaXMuZ2VuZXJpY0xheW91dFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5hcmVhTW9kZWxDb21tb24ucmVnaXN0ZXIoICdHZW5lcmljQXJlYU1vZGVsJywgR2VuZXJpY0FyZWFNb2RlbCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2VuZXJpY0FyZWFNb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0Msb0JBQW9CLE1BQU0sNENBQTRDO0FBQzdFLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBQ3hELE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7O0FBRTlDO0FBQ0EsTUFBTUMsY0FBYyxHQUFHRCxhQUFhLENBQUNFLFVBQVU7QUFFL0MsTUFBTUMsZ0JBQWdCLFNBQVNOLG9CQUFvQixDQUFDO0VBQ2xEO0FBQ0Y7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxPQUFPLEtBQUtFLFNBQVMsSUFBSSxPQUFPRixPQUFPLEtBQUssUUFBUSxFQUFFLDBDQUEyQyxDQUFDO0lBRXBIQSxPQUFPLEdBQUdWLEtBQUssQ0FBRTtNQUNmYSxjQUFjLEVBQUU7SUFDbEIsQ0FBQyxFQUFFSCxPQUFRLENBQUM7SUFFWixNQUFNSSxLQUFLLEdBQUdULGFBQWEsQ0FBQ1UsTUFBTSxDQUFDQyxHQUFHLENBQUVDLE1BQU0sSUFBSSxJQUFJZCxXQUFXLENBQUVjLE1BQU0sRUFBRVAsT0FBTyxDQUFDRyxjQUFlLENBQUUsQ0FBQztJQUVyRyxNQUFNSyxXQUFXLEdBQUdDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFTixLQUFLLEVBQUVPLElBQUksSUFBSUEsSUFBSSxDQUFDSixNQUFNLEtBQUtYLGNBQWUsQ0FBQztJQUUzRSxLQUFLLENBQUVRLEtBQUssRUFBRUksV0FBVyxFQUFFUixPQUFRLENBQUM7O0lBRXBDO0lBQ0EsSUFBSSxDQUFDWSxxQkFBcUIsR0FBRyxJQUFJdkIsUUFBUSxDQUFFTyxjQUFlLENBQUM7O0lBRTNEO0lBQ0EsSUFBSSxDQUFDZ0IscUJBQXFCLENBQUNDLElBQUksQ0FBRU4sTUFBTSxJQUFJO01BQ3pDLElBQUksQ0FBQ08sbUJBQW1CLENBQUNDLEtBQUssR0FBR04sQ0FBQyxDQUFDQyxJQUFJLENBQUUsSUFBSSxDQUFDTixLQUFLLEVBQUVPLElBQUksSUFBSUEsSUFBSSxDQUFDSixNQUFNLEtBQUtBLE1BQU8sQ0FBQztJQUN2RixDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFUyxpQkFBaUJBLENBQUVDLFlBQVksRUFBRztJQUNoQyxPQUFPLElBQUl2QixrQkFBa0IsQ0FBRXVCLFlBQWEsQ0FBQztFQUMvQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLEtBQUtBLENBQUEsRUFBRztJQUNOLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7SUFFYixJQUFJLENBQUNOLHFCQUFxQixDQUFDTSxLQUFLLENBQUMsQ0FBQztFQUNwQztBQUNGO0FBRUEzQixlQUFlLENBQUM0QixRQUFRLENBQUUsa0JBQWtCLEVBQUVyQixnQkFBaUIsQ0FBQztBQUVoRSxlQUFlQSxnQkFBZ0IifQ==