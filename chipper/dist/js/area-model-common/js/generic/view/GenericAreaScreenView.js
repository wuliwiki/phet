// Copyright 2017-2021, University of Colorado Boulder

/**
 * Supertype screenview for generic screens.
 *
 * NOTE: This type is designed to be persistent, and will not need to release references to avoid memory leaks.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import DynamicProperty from '../../../../axon/js/DynamicProperty.js';
import Property from '../../../../axon/js/Property.js';
import { Node } from '../../../../scenery/js/imports.js';
import areaModelCommon from '../../areaModelCommon.js';
import OrientationPair from '../../common/model/OrientationPair.js';
import AreaScreenView from '../../common/view/AreaScreenView.js';
import GenericAreaModel from '../model/GenericAreaModel.js';
import GenericAreaDisplayNode from './GenericAreaDisplayNode.js';
import GenericFactorsNode from './GenericFactorsNode.js';
import GenericLayoutSelectionNode from './GenericLayoutSelectionNode.js';
class GenericAreaScreenView extends AreaScreenView {
  /**
   * @extends {AreaScreenView}
   *
   * @param {GenericAreaModel} model
   * @param {number} decimalPlaces
   */
  constructor(model, decimalPlaces) {
    assert && assert(model instanceof GenericAreaModel);
    assert && assert(typeof decimalPlaces === 'number');
    const popupLayer = new Node();
    super(model, {
      isProportional: false,
      decimalPlaces: decimalPlaces,
      getRightAlignNodes: (nodes, screenView) => {
        return [new GenericLayoutSelectionNode(model.genericLayoutProperty, popupLayer, screenView.factorsBox.width), ...nodes];
      }
    });
    this.addChild(popupLayer);
  }

  /**
   * Creates the main area display view for the screen.
   * @public
   * @override
   *
   * @param {GenericAreaModel} model
   * @returns {GenericAreaDisplayNode}
   */
  createAreaDisplayNode(model) {
    return new GenericAreaDisplayNode(model.areaDisplay, model.allowExponents, model.partialProductsChoiceProperty, {
      translation: this.getDisplayTranslation()
    });
  }

  /**
   * Creates the "factors" (dimensions) content for the accordion box.
   * @public
   * @override
   *
   * @param {GenericAreaModel} model
   * @param {number} decimalPlaces
   * @returns {Node}
   */
  createFactorsNode(model, decimalPlaces) {
    const dynamicProperties = OrientationPair.create(orientation => new DynamicProperty(new DerivedProperty([model.currentAreaProperty], area => area.displayProperties.get(orientation))));
    return new GenericFactorsNode(dynamicProperties, new Property(model.allowExponents));
  }
}
areaModelCommon.register('GenericAreaScreenView', GenericAreaScreenView);
export default GenericAreaScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJEeW5hbWljUHJvcGVydHkiLCJQcm9wZXJ0eSIsIk5vZGUiLCJhcmVhTW9kZWxDb21tb24iLCJPcmllbnRhdGlvblBhaXIiLCJBcmVhU2NyZWVuVmlldyIsIkdlbmVyaWNBcmVhTW9kZWwiLCJHZW5lcmljQXJlYURpc3BsYXlOb2RlIiwiR2VuZXJpY0ZhY3RvcnNOb2RlIiwiR2VuZXJpY0xheW91dFNlbGVjdGlvbk5vZGUiLCJHZW5lcmljQXJlYVNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwiZGVjaW1hbFBsYWNlcyIsImFzc2VydCIsInBvcHVwTGF5ZXIiLCJpc1Byb3BvcnRpb25hbCIsImdldFJpZ2h0QWxpZ25Ob2RlcyIsIm5vZGVzIiwic2NyZWVuVmlldyIsImdlbmVyaWNMYXlvdXRQcm9wZXJ0eSIsImZhY3RvcnNCb3giLCJ3aWR0aCIsImFkZENoaWxkIiwiY3JlYXRlQXJlYURpc3BsYXlOb2RlIiwiYXJlYURpc3BsYXkiLCJhbGxvd0V4cG9uZW50cyIsInBhcnRpYWxQcm9kdWN0c0Nob2ljZVByb3BlcnR5IiwidHJhbnNsYXRpb24iLCJnZXREaXNwbGF5VHJhbnNsYXRpb24iLCJjcmVhdGVGYWN0b3JzTm9kZSIsImR5bmFtaWNQcm9wZXJ0aWVzIiwiY3JlYXRlIiwib3JpZW50YXRpb24iLCJjdXJyZW50QXJlYVByb3BlcnR5IiwiYXJlYSIsImRpc3BsYXlQcm9wZXJ0aWVzIiwiZ2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHZW5lcmljQXJlYVNjcmVlblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3VwZXJ0eXBlIHNjcmVlbnZpZXcgZm9yIGdlbmVyaWMgc2NyZWVucy5cclxuICpcclxuICogTk9URTogVGhpcyB0eXBlIGlzIGRlc2lnbmVkIHRvIGJlIHBlcnNpc3RlbnQsIGFuZCB3aWxsIG5vdCBuZWVkIHRvIHJlbGVhc2UgcmVmZXJlbmNlcyB0byBhdm9pZCBtZW1vcnkgbGVha3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IER5bmFtaWNQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0R5bmFtaWNQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBhcmVhTW9kZWxDb21tb24gZnJvbSAnLi4vLi4vYXJlYU1vZGVsQ29tbW9uLmpzJztcclxuaW1wb3J0IE9yaWVudGF0aW9uUGFpciBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvT3JpZW50YXRpb25QYWlyLmpzJztcclxuaW1wb3J0IEFyZWFTY3JlZW5WaWV3IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0FyZWFTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IEdlbmVyaWNBcmVhTW9kZWwgZnJvbSAnLi4vbW9kZWwvR2VuZXJpY0FyZWFNb2RlbC5qcyc7XHJcbmltcG9ydCBHZW5lcmljQXJlYURpc3BsYXlOb2RlIGZyb20gJy4vR2VuZXJpY0FyZWFEaXNwbGF5Tm9kZS5qcyc7XHJcbmltcG9ydCBHZW5lcmljRmFjdG9yc05vZGUgZnJvbSAnLi9HZW5lcmljRmFjdG9yc05vZGUuanMnO1xyXG5pbXBvcnQgR2VuZXJpY0xheW91dFNlbGVjdGlvbk5vZGUgZnJvbSAnLi9HZW5lcmljTGF5b3V0U2VsZWN0aW9uTm9kZS5qcyc7XHJcblxyXG5jbGFzcyBHZW5lcmljQXJlYVNjcmVlblZpZXcgZXh0ZW5kcyBBcmVhU2NyZWVuVmlldyB7XHJcbiAgLyoqXHJcbiAgICogQGV4dGVuZHMge0FyZWFTY3JlZW5WaWV3fVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtHZW5lcmljQXJlYU1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWNpbWFsUGxhY2VzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBkZWNpbWFsUGxhY2VzICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbW9kZWwgaW5zdGFuY2VvZiBHZW5lcmljQXJlYU1vZGVsICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0eXBlb2YgZGVjaW1hbFBsYWNlcyA9PT0gJ251bWJlcicgKTtcclxuXHJcbiAgICBjb25zdCBwb3B1cExheWVyID0gbmV3IE5vZGUoKTtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHtcclxuICAgICAgaXNQcm9wb3J0aW9uYWw6IGZhbHNlLFxyXG4gICAgICBkZWNpbWFsUGxhY2VzOiBkZWNpbWFsUGxhY2VzLFxyXG4gICAgICBnZXRSaWdodEFsaWduTm9kZXM6ICggbm9kZXMsIHNjcmVlblZpZXcgKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIG5ldyBHZW5lcmljTGF5b3V0U2VsZWN0aW9uTm9kZShcclxuICAgICAgICAgICAgbW9kZWwuZ2VuZXJpY0xheW91dFByb3BlcnR5LFxyXG4gICAgICAgICAgICBwb3B1cExheWVyLFxyXG4gICAgICAgICAgICBzY3JlZW5WaWV3LmZhY3RvcnNCb3gud2lkdGhcclxuICAgICAgICAgICksXHJcbiAgICAgICAgICAuLi5ub2Rlc1xyXG4gICAgICAgIF07XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBwb3B1cExheWVyICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBtYWluIGFyZWEgZGlzcGxheSB2aWV3IGZvciB0aGUgc2NyZWVuLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7R2VuZXJpY0FyZWFNb2RlbH0gbW9kZWxcclxuICAgKiBAcmV0dXJucyB7R2VuZXJpY0FyZWFEaXNwbGF5Tm9kZX1cclxuICAgKi9cclxuICBjcmVhdGVBcmVhRGlzcGxheU5vZGUoIG1vZGVsICkge1xyXG4gICAgcmV0dXJuIG5ldyBHZW5lcmljQXJlYURpc3BsYXlOb2RlKCBtb2RlbC5hcmVhRGlzcGxheSwgbW9kZWwuYWxsb3dFeHBvbmVudHMsIG1vZGVsLnBhcnRpYWxQcm9kdWN0c0Nob2ljZVByb3BlcnR5LCB7XHJcbiAgICAgIHRyYW5zbGF0aW9uOiB0aGlzLmdldERpc3BsYXlUcmFuc2xhdGlvbigpXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBcImZhY3RvcnNcIiAoZGltZW5zaW9ucykgY29udGVudCBmb3IgdGhlIGFjY29yZGlvbiBib3guXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtHZW5lcmljQXJlYU1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWNpbWFsUGxhY2VzXHJcbiAgICogQHJldHVybnMge05vZGV9XHJcbiAgICovXHJcbiAgY3JlYXRlRmFjdG9yc05vZGUoIG1vZGVsLCBkZWNpbWFsUGxhY2VzICkge1xyXG4gICAgY29uc3QgZHluYW1pY1Byb3BlcnRpZXMgPSBPcmllbnRhdGlvblBhaXIuY3JlYXRlKCBvcmllbnRhdGlvbiA9PiBuZXcgRHluYW1pY1Byb3BlcnR5KCBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIG1vZGVsLmN1cnJlbnRBcmVhUHJvcGVydHkgXSwgYXJlYSA9PiBhcmVhLmRpc3BsYXlQcm9wZXJ0aWVzLmdldCggb3JpZW50YXRpb24gKSApICkgKTtcclxuICAgIHJldHVybiBuZXcgR2VuZXJpY0ZhY3RvcnNOb2RlKCBkeW5hbWljUHJvcGVydGllcywgbmV3IFByb3BlcnR5KCBtb2RlbC5hbGxvd0V4cG9uZW50cyApICk7XHJcbiAgfVxyXG59XHJcblxyXG5hcmVhTW9kZWxDb21tb24ucmVnaXN0ZXIoICdHZW5lcmljQXJlYVNjcmVlblZpZXcnLCBHZW5lcmljQXJlYVNjcmVlblZpZXcgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdlbmVyaWNBcmVhU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxlQUFlLE1BQU0sdUNBQXVDO0FBQ25FLE9BQU9DLGNBQWMsTUFBTSxxQ0FBcUM7QUFDaEUsT0FBT0MsZ0JBQWdCLE1BQU0sOEJBQThCO0FBQzNELE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUNoRSxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFDeEQsT0FBT0MsMEJBQTBCLE1BQU0saUNBQWlDO0FBRXhFLE1BQU1DLHFCQUFxQixTQUFTTCxjQUFjLENBQUM7RUFDakQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsYUFBYSxFQUFHO0lBQ2xDQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsS0FBSyxZQUFZTixnQkFBaUIsQ0FBQztJQUNyRFEsTUFBTSxJQUFJQSxNQUFNLENBQUUsT0FBT0QsYUFBYSxLQUFLLFFBQVMsQ0FBQztJQUVyRCxNQUFNRSxVQUFVLEdBQUcsSUFBSWIsSUFBSSxDQUFDLENBQUM7SUFFN0IsS0FBSyxDQUFFVSxLQUFLLEVBQUU7TUFDWkksY0FBYyxFQUFFLEtBQUs7TUFDckJILGFBQWEsRUFBRUEsYUFBYTtNQUM1Qkksa0JBQWtCLEVBQUVBLENBQUVDLEtBQUssRUFBRUMsVUFBVSxLQUFNO1FBQzNDLE9BQU8sQ0FDTCxJQUFJViwwQkFBMEIsQ0FDNUJHLEtBQUssQ0FBQ1EscUJBQXFCLEVBQzNCTCxVQUFVLEVBQ1ZJLFVBQVUsQ0FBQ0UsVUFBVSxDQUFDQyxLQUN4QixDQUFDLEVBQ0QsR0FBR0osS0FBSyxDQUNUO01BQ0g7SUFDRixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNLLFFBQVEsQ0FBRVIsVUFBVyxDQUFDO0VBQzdCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRVMscUJBQXFCQSxDQUFFWixLQUFLLEVBQUc7SUFDN0IsT0FBTyxJQUFJTCxzQkFBc0IsQ0FBRUssS0FBSyxDQUFDYSxXQUFXLEVBQUViLEtBQUssQ0FBQ2MsY0FBYyxFQUFFZCxLQUFLLENBQUNlLDZCQUE2QixFQUFFO01BQy9HQyxXQUFXLEVBQUUsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQztJQUMxQyxDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsaUJBQWlCQSxDQUFFbEIsS0FBSyxFQUFFQyxhQUFhLEVBQUc7SUFDeEMsTUFBTWtCLGlCQUFpQixHQUFHM0IsZUFBZSxDQUFDNEIsTUFBTSxDQUFFQyxXQUFXLElBQUksSUFBSWpDLGVBQWUsQ0FBRSxJQUFJRCxlQUFlLENBQUUsQ0FBRWEsS0FBSyxDQUFDc0IsbUJBQW1CLENBQUUsRUFBRUMsSUFBSSxJQUFJQSxJQUFJLENBQUNDLGlCQUFpQixDQUFDQyxHQUFHLENBQUVKLFdBQVksQ0FBRSxDQUFFLENBQUUsQ0FBQztJQUNqTSxPQUFPLElBQUl6QixrQkFBa0IsQ0FBRXVCLGlCQUFpQixFQUFFLElBQUk5QixRQUFRLENBQUVXLEtBQUssQ0FBQ2MsY0FBZSxDQUFFLENBQUM7RUFDMUY7QUFDRjtBQUVBdkIsZUFBZSxDQUFDbUMsUUFBUSxDQUFFLHVCQUF1QixFQUFFNUIscUJBQXNCLENBQUM7QUFFMUUsZUFBZUEscUJBQXFCIn0=