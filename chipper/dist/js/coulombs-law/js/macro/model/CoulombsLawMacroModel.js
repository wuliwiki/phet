// Copyright 2017-2021, University of Colorado Boulder

/**
 * Model for Macro Screen with large charge values.
 *
 * @author Jesse Greenberg
 * @author Michael Barlow
 */

import Range from '../../../../dot/js/Range.js';
import ISLCConstants from '../../../../inverse-square-law-common/js/ISLCConstants.js';
import Charge from '../../common/model/Charge.js';
import CoulombsLawCommonModel from '../../common/model/CoulombsLawCommonModel.js';
import coulombsLaw from '../../coulombsLaw.js';
class CoulombsLawMacroModel extends CoulombsLawCommonModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    // set initial charge values
    const chargeValue1 = -4E-6; // -4 microcoulombs in Coulombs
    const chargeValue2 = 8E-6; // 8 microcoulombs in Coulombs

    const position1 = -1E-2; // initial position from center in m
    const position2 = 2E-2; // initial position from center in m

    const minChargeValue = -10E-6; // in Coulombs
    const maxChargeValue = 10E-6; // in Coulombs

    const valueRange = new Range(minChargeValue, maxChargeValue);
    const charge1 = new Charge(chargeValue1, position1, valueRange, tandem.createTandem('charge1'));
    const charge2 = new Charge(chargeValue2, position2, valueRange, tandem.createTandem('charge2'));

    // boundary constants are in "X meters", convert to "X cm" but still in the unit of meters
    const leftBoundary = ISLCConstants.LEFT_OBJECT_BOUNDARY * 1E-2;
    const rightBoundary = ISLCConstants.RIGHT_OBJECT_BOUNDARY * 1E-2;
    super(charge1, charge2, new Range(leftBoundary, rightBoundary), tandem, {
      snapObjectsToNearest: 0.001,
      minSeparationBetweenObjects: 0.001,
      displayScientificNotation: false
    });
  }
}
coulombsLaw.register('CoulombsLawMacroModel', CoulombsLawMacroModel);
export default CoulombsLawMacroModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIklTTENDb25zdGFudHMiLCJDaGFyZ2UiLCJDb3Vsb21ic0xhd0NvbW1vbk1vZGVsIiwiY291bG9tYnNMYXciLCJDb3Vsb21ic0xhd01hY3JvTW9kZWwiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsImNoYXJnZVZhbHVlMSIsImNoYXJnZVZhbHVlMiIsInBvc2l0aW9uMSIsInBvc2l0aW9uMiIsIm1pbkNoYXJnZVZhbHVlIiwibWF4Q2hhcmdlVmFsdWUiLCJ2YWx1ZVJhbmdlIiwiY2hhcmdlMSIsImNyZWF0ZVRhbmRlbSIsImNoYXJnZTIiLCJsZWZ0Qm91bmRhcnkiLCJMRUZUX09CSkVDVF9CT1VOREFSWSIsInJpZ2h0Qm91bmRhcnkiLCJSSUdIVF9PQkpFQ1RfQk9VTkRBUlkiLCJzbmFwT2JqZWN0c1RvTmVhcmVzdCIsIm1pblNlcGFyYXRpb25CZXR3ZWVuT2JqZWN0cyIsImRpc3BsYXlTY2llbnRpZmljTm90YXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvdWxvbWJzTGF3TWFjcm9Nb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgTWFjcm8gU2NyZWVuIHdpdGggbGFyZ2UgY2hhcmdlIHZhbHVlcy5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICogQGF1dGhvciBNaWNoYWVsIEJhcmxvd1xyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgSVNMQ0NvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9pbnZlcnNlLXNxdWFyZS1sYXctY29tbW9uL2pzL0lTTENDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ2hhcmdlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9DaGFyZ2UuanMnO1xyXG5pbXBvcnQgQ291bG9tYnNMYXdDb21tb25Nb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ291bG9tYnNMYXdDb21tb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBjb3Vsb21ic0xhdyBmcm9tICcuLi8uLi9jb3Vsb21ic0xhdy5qcyc7XHJcblxyXG5jbGFzcyBDb3Vsb21ic0xhd01hY3JvTW9kZWwgZXh0ZW5kcyBDb3Vsb21ic0xhd0NvbW1vbk1vZGVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgLy8gc2V0IGluaXRpYWwgY2hhcmdlIHZhbHVlc1xyXG4gICAgY29uc3QgY2hhcmdlVmFsdWUxID0gLTRFLTY7IC8vIC00IG1pY3JvY291bG9tYnMgaW4gQ291bG9tYnNcclxuICAgIGNvbnN0IGNoYXJnZVZhbHVlMiA9IDhFLTY7IC8vIDggbWljcm9jb3Vsb21icyBpbiBDb3Vsb21ic1xyXG5cclxuICAgIGNvbnN0IHBvc2l0aW9uMSA9IC0xRS0yOyAvLyBpbml0aWFsIHBvc2l0aW9uIGZyb20gY2VudGVyIGluIG1cclxuICAgIGNvbnN0IHBvc2l0aW9uMiA9IDJFLTI7IC8vIGluaXRpYWwgcG9zaXRpb24gZnJvbSBjZW50ZXIgaW4gbVxyXG5cclxuICAgIGNvbnN0IG1pbkNoYXJnZVZhbHVlID0gLTEwRS02OyAvLyBpbiBDb3Vsb21ic1xyXG4gICAgY29uc3QgbWF4Q2hhcmdlVmFsdWUgPSAxMEUtNjsgLy8gaW4gQ291bG9tYnNcclxuXHJcbiAgICBjb25zdCB2YWx1ZVJhbmdlID0gbmV3IFJhbmdlKCBtaW5DaGFyZ2VWYWx1ZSwgbWF4Q2hhcmdlVmFsdWUgKTtcclxuXHJcbiAgICBjb25zdCBjaGFyZ2UxID0gbmV3IENoYXJnZSggY2hhcmdlVmFsdWUxLCBwb3NpdGlvbjEsIHZhbHVlUmFuZ2UsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjaGFyZ2UxJyApICk7XHJcbiAgICBjb25zdCBjaGFyZ2UyID0gbmV3IENoYXJnZSggY2hhcmdlVmFsdWUyLCBwb3NpdGlvbjIsIHZhbHVlUmFuZ2UsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjaGFyZ2UyJyApICk7XHJcblxyXG4gICAgLy8gYm91bmRhcnkgY29uc3RhbnRzIGFyZSBpbiBcIlggbWV0ZXJzXCIsIGNvbnZlcnQgdG8gXCJYIGNtXCIgYnV0IHN0aWxsIGluIHRoZSB1bml0IG9mIG1ldGVyc1xyXG4gICAgY29uc3QgbGVmdEJvdW5kYXJ5ID0gSVNMQ0NvbnN0YW50cy5MRUZUX09CSkVDVF9CT1VOREFSWSAqIDFFLTI7XHJcbiAgICBjb25zdCByaWdodEJvdW5kYXJ5ID0gSVNMQ0NvbnN0YW50cy5SSUdIVF9PQkpFQ1RfQk9VTkRBUlkgKiAxRS0yO1xyXG5cclxuICAgIHN1cGVyKCBjaGFyZ2UxLCBjaGFyZ2UyLCBuZXcgUmFuZ2UoIGxlZnRCb3VuZGFyeSwgcmlnaHRCb3VuZGFyeSApLCB0YW5kZW0sIHtcclxuICAgICAgc25hcE9iamVjdHNUb05lYXJlc3Q6IDAuMDAxLFxyXG4gICAgICBtaW5TZXBhcmF0aW9uQmV0d2Vlbk9iamVjdHM6IDAuMDAxLFxyXG4gICAgICBkaXNwbGF5U2NpZW50aWZpY05vdGF0aW9uOiBmYWxzZVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY291bG9tYnNMYXcucmVnaXN0ZXIoICdDb3Vsb21ic0xhd01hY3JvTW9kZWwnLCBDb3Vsb21ic0xhd01hY3JvTW9kZWwgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvdWxvbWJzTGF3TWFjcm9Nb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLGFBQWEsTUFBTSwyREFBMkQ7QUFDckYsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxzQkFBc0IsTUFBTSw4Q0FBOEM7QUFDakYsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUU5QyxNQUFNQyxxQkFBcUIsU0FBU0Ysc0JBQXNCLENBQUM7RUFFekQ7QUFDRjtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQjtJQUNBLE1BQU1DLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLE1BQU1DLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQzs7SUFFM0IsTUFBTUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsTUFBTUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDOztJQUV4QixNQUFNQyxjQUFjLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixNQUFNQyxjQUFjLEdBQUcsS0FBSyxDQUFDLENBQUM7O0lBRTlCLE1BQU1DLFVBQVUsR0FBRyxJQUFJZCxLQUFLLENBQUVZLGNBQWMsRUFBRUMsY0FBZSxDQUFDO0lBRTlELE1BQU1FLE9BQU8sR0FBRyxJQUFJYixNQUFNLENBQUVNLFlBQVksRUFBRUUsU0FBUyxFQUFFSSxVQUFVLEVBQUVQLE1BQU0sQ0FBQ1MsWUFBWSxDQUFFLFNBQVUsQ0FBRSxDQUFDO0lBQ25HLE1BQU1DLE9BQU8sR0FBRyxJQUFJZixNQUFNLENBQUVPLFlBQVksRUFBRUUsU0FBUyxFQUFFRyxVQUFVLEVBQUVQLE1BQU0sQ0FBQ1MsWUFBWSxDQUFFLFNBQVUsQ0FBRSxDQUFDOztJQUVuRztJQUNBLE1BQU1FLFlBQVksR0FBR2pCLGFBQWEsQ0FBQ2tCLG9CQUFvQixHQUFHLElBQUk7SUFDOUQsTUFBTUMsYUFBYSxHQUFHbkIsYUFBYSxDQUFDb0IscUJBQXFCLEdBQUcsSUFBSTtJQUVoRSxLQUFLLENBQUVOLE9BQU8sRUFBRUUsT0FBTyxFQUFFLElBQUlqQixLQUFLLENBQUVrQixZQUFZLEVBQUVFLGFBQWMsQ0FBQyxFQUFFYixNQUFNLEVBQUU7TUFDekVlLG9CQUFvQixFQUFFLEtBQUs7TUFDM0JDLDJCQUEyQixFQUFFLEtBQUs7TUFDbENDLHlCQUF5QixFQUFFO0lBQzdCLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXBCLFdBQVcsQ0FBQ3FCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRXBCLHFCQUFzQixDQUFDO0FBRXRFLGVBQWVBLHFCQUFxQiJ9