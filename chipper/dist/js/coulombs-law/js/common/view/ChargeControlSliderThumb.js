// Copyright 2017-2021, University of Colorado Boulder

/**
 * Custom slider thumb that changes its background color based on the value of its associated object Property value.
 *
 * @author  Jesse Greenberg
 * @author  Michael Barlow
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import merge from '../../../../phet-core/js/merge.js';
import { Color } from '../../../../scenery/js/imports.js';
import SliderThumb from '../../../../sun/js/SliderThumb.js';
import coulombsLaw from '../../coulombsLaw.js';

// constants
const THUMB_SIZE = new Dimension2(10, 18);
const NEGATIVE_FILL = new Color('#00f');
const POSITIVE_FILL = new Color('#f00');
const ZERO_FILL = new Color('gray');
class ChargeControlSliderThumb extends SliderThumb {
  /**
   * @param {Property.<number>} objectProperty - the number Property associated with the ISLCObject
   * @param {Object} [options]
   */
  constructor(objectProperty, options) {
    // {Property.<Color>}
    // fills are axon Properties because they need to change with the objectProperty
    // Since sliders are never disposed in the sim, there's no need to unlink the derived properties' functions
    const fillProperty = new DerivedProperty([objectProperty], value => getUpdatedFill(value));

    // {Property.<Color>}
    const fillHighlightedProperty = new DerivedProperty([objectProperty], value => getUpdatedFill(value).colorUtilsBrighter(0.25));
    options = merge({
      size: THUMB_SIZE,
      fill: fillProperty,
      fillHighlighted: fillHighlightedProperty
    }, options);
    super(options);
    this.mouseArea = this.localBounds;
    this.touchArea = this.mouseArea.dilated(6);
  }
}

/**
 * Helper function to get a color based on a linked Property's value
 *
 * @param {number} propertyValue
 * @returns {Color}
 */
function getUpdatedFill(propertyValue) {
  let fill;
  if (propertyValue < 0) {
    fill = NEGATIVE_FILL;
  } else if (propertyValue > 0) {
    fill = POSITIVE_FILL;
  } else {
    fill = ZERO_FILL;
  }
  return fill;
}
coulombsLaw.register('ChargeControlSliderThumb', ChargeControlSliderThumb);
export default ChargeControlSliderThumb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJEaW1lbnNpb24yIiwibWVyZ2UiLCJDb2xvciIsIlNsaWRlclRodW1iIiwiY291bG9tYnNMYXciLCJUSFVNQl9TSVpFIiwiTkVHQVRJVkVfRklMTCIsIlBPU0lUSVZFX0ZJTEwiLCJaRVJPX0ZJTEwiLCJDaGFyZ2VDb250cm9sU2xpZGVyVGh1bWIiLCJjb25zdHJ1Y3RvciIsIm9iamVjdFByb3BlcnR5Iiwib3B0aW9ucyIsImZpbGxQcm9wZXJ0eSIsInZhbHVlIiwiZ2V0VXBkYXRlZEZpbGwiLCJmaWxsSGlnaGxpZ2h0ZWRQcm9wZXJ0eSIsImNvbG9yVXRpbHNCcmlnaHRlciIsInNpemUiLCJmaWxsIiwiZmlsbEhpZ2hsaWdodGVkIiwibW91c2VBcmVhIiwibG9jYWxCb3VuZHMiLCJ0b3VjaEFyZWEiLCJkaWxhdGVkIiwicHJvcGVydHlWYWx1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2hhcmdlQ29udHJvbFNsaWRlclRodW1iLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEN1c3RvbSBzbGlkZXIgdGh1bWIgdGhhdCBjaGFuZ2VzIGl0cyBiYWNrZ3JvdW5kIGNvbG9yIGJhc2VkIG9uIHRoZSB2YWx1ZSBvZiBpdHMgYXNzb2NpYXRlZCBvYmplY3QgUHJvcGVydHkgdmFsdWUuXHJcbiAqXHJcbiAqIEBhdXRob3IgIEplc3NlIEdyZWVuYmVyZ1xyXG4gKiBAYXV0aG9yICBNaWNoYWVsIEJhcmxvd1xyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTbGlkZXJUaHVtYiBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvU2xpZGVyVGh1bWIuanMnO1xyXG5pbXBvcnQgY291bG9tYnNMYXcgZnJvbSAnLi4vLi4vY291bG9tYnNMYXcuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFRIVU1CX1NJWkUgPSBuZXcgRGltZW5zaW9uMiggMTAsIDE4ICk7XHJcbmNvbnN0IE5FR0FUSVZFX0ZJTEwgPSBuZXcgQ29sb3IoICcjMDBmJyApO1xyXG5jb25zdCBQT1NJVElWRV9GSUxMID0gbmV3IENvbG9yKCAnI2YwMCcgKTtcclxuY29uc3QgWkVST19GSUxMID0gbmV3IENvbG9yKCAnZ3JheScgKTtcclxuXHJcbmNsYXNzIENoYXJnZUNvbnRyb2xTbGlkZXJUaHVtYiBleHRlbmRzIFNsaWRlclRodW1iIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gb2JqZWN0UHJvcGVydHkgLSB0aGUgbnVtYmVyIFByb3BlcnR5IGFzc29jaWF0ZWQgd2l0aCB0aGUgSVNMQ09iamVjdFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb2JqZWN0UHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8ge1Byb3BlcnR5LjxDb2xvcj59XHJcbiAgICAvLyBmaWxscyBhcmUgYXhvbiBQcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBuZWVkIHRvIGNoYW5nZSB3aXRoIHRoZSBvYmplY3RQcm9wZXJ0eVxyXG4gICAgLy8gU2luY2Ugc2xpZGVycyBhcmUgbmV2ZXIgZGlzcG9zZWQgaW4gdGhlIHNpbSwgdGhlcmUncyBubyBuZWVkIHRvIHVubGluayB0aGUgZGVyaXZlZCBwcm9wZXJ0aWVzJyBmdW5jdGlvbnNcclxuICAgIGNvbnN0IGZpbGxQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgb2JqZWN0UHJvcGVydHkgXSwgdmFsdWUgPT4gZ2V0VXBkYXRlZEZpbGwoIHZhbHVlICkgKTtcclxuXHJcbiAgICAvLyB7UHJvcGVydHkuPENvbG9yPn1cclxuICAgIGNvbnN0IGZpbGxIaWdobGlnaHRlZFByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBvYmplY3RQcm9wZXJ0eSBdLCB2YWx1ZSA9PiBnZXRVcGRhdGVkRmlsbCggdmFsdWUgKS5jb2xvclV0aWxzQnJpZ2h0ZXIoIDAuMjUgKSApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBzaXplOiBUSFVNQl9TSVpFLFxyXG4gICAgICBmaWxsOiBmaWxsUHJvcGVydHksXHJcbiAgICAgIGZpbGxIaWdobGlnaHRlZDogZmlsbEhpZ2hsaWdodGVkUHJvcGVydHlcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubW91c2VBcmVhID0gdGhpcy5sb2NhbEJvdW5kcztcclxuICAgIHRoaXMudG91Y2hBcmVhID0gdGhpcy5tb3VzZUFyZWEuZGlsYXRlZCggNiApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgYSBjb2xvciBiYXNlZCBvbiBhIGxpbmtlZCBQcm9wZXJ0eSdzIHZhbHVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcm9wZXJ0eVZhbHVlXHJcbiAqIEByZXR1cm5zIHtDb2xvcn1cclxuICovXHJcbmZ1bmN0aW9uIGdldFVwZGF0ZWRGaWxsKCBwcm9wZXJ0eVZhbHVlICkge1xyXG5cclxuICBsZXQgZmlsbDtcclxuICBpZiAoIHByb3BlcnR5VmFsdWUgPCAwICkge1xyXG4gICAgZmlsbCA9IE5FR0FUSVZFX0ZJTEw7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKCBwcm9wZXJ0eVZhbHVlID4gMCApIHtcclxuICAgIGZpbGwgPSBQT1NJVElWRV9GSUxMO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIGZpbGwgPSBaRVJPX0ZJTEw7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmlsbDtcclxufVxyXG5cclxuY291bG9tYnNMYXcucmVnaXN0ZXIoICdDaGFyZ2VDb250cm9sU2xpZGVyVGh1bWInLCBDaGFyZ2VDb250cm9sU2xpZGVyVGh1bWIgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ2hhcmdlQ29udHJvbFNsaWRlclRodW1iOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELFNBQVNDLEtBQUssUUFBUSxtQ0FBbUM7QUFDekQsT0FBT0MsV0FBVyxNQUFNLG1DQUFtQztBQUMzRCxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCOztBQUU5QztBQUNBLE1BQU1DLFVBQVUsR0FBRyxJQUFJTCxVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztBQUMzQyxNQUFNTSxhQUFhLEdBQUcsSUFBSUosS0FBSyxDQUFFLE1BQU8sQ0FBQztBQUN6QyxNQUFNSyxhQUFhLEdBQUcsSUFBSUwsS0FBSyxDQUFFLE1BQU8sQ0FBQztBQUN6QyxNQUFNTSxTQUFTLEdBQUcsSUFBSU4sS0FBSyxDQUFFLE1BQU8sQ0FBQztBQUVyQyxNQUFNTyx3QkFBd0IsU0FBU04sV0FBVyxDQUFDO0VBRWpEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VPLFdBQVdBLENBQUVDLGNBQWMsRUFBRUMsT0FBTyxFQUFHO0lBRXJDO0lBQ0E7SUFDQTtJQUNBLE1BQU1DLFlBQVksR0FBRyxJQUFJZCxlQUFlLENBQUUsQ0FBRVksY0FBYyxDQUFFLEVBQUVHLEtBQUssSUFBSUMsY0FBYyxDQUFFRCxLQUFNLENBQUUsQ0FBQzs7SUFFaEc7SUFDQSxNQUFNRSx1QkFBdUIsR0FBRyxJQUFJakIsZUFBZSxDQUFFLENBQUVZLGNBQWMsQ0FBRSxFQUFFRyxLQUFLLElBQUlDLGNBQWMsQ0FBRUQsS0FBTSxDQUFDLENBQUNHLGtCQUFrQixDQUFFLElBQUssQ0FBRSxDQUFDO0lBRXRJTCxPQUFPLEdBQUdYLEtBQUssQ0FBRTtNQUNmaUIsSUFBSSxFQUFFYixVQUFVO01BQ2hCYyxJQUFJLEVBQUVOLFlBQVk7TUFDbEJPLGVBQWUsRUFBRUo7SUFDbkIsQ0FBQyxFQUFFSixPQUFRLENBQUM7SUFFWixLQUFLLENBQUVBLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNTLFNBQVMsR0FBRyxJQUFJLENBQUNDLFdBQVc7SUFDakMsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDRixTQUFTLENBQUNHLE9BQU8sQ0FBRSxDQUFFLENBQUM7RUFDOUM7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTVCxjQUFjQSxDQUFFVSxhQUFhLEVBQUc7RUFFdkMsSUFBSU4sSUFBSTtFQUNSLElBQUtNLGFBQWEsR0FBRyxDQUFDLEVBQUc7SUFDdkJOLElBQUksR0FBR2IsYUFBYTtFQUN0QixDQUFDLE1BQ0ksSUFBS21CLGFBQWEsR0FBRyxDQUFDLEVBQUc7SUFDNUJOLElBQUksR0FBR1osYUFBYTtFQUN0QixDQUFDLE1BQ0k7SUFDSFksSUFBSSxHQUFHWCxTQUFTO0VBQ2xCO0VBRUEsT0FBT1csSUFBSTtBQUNiO0FBRUFmLFdBQVcsQ0FBQ3NCLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRWpCLHdCQUF5QixDQUFDO0FBQzVFLGVBQWVBLHdCQUF3QiJ9