// Copyright 2017-2021, University of Colorado Boulder

/**
 * Model for Atomic Scale screen.
 *
 * @author Jesse Greenberg
 * @author Michael Barlow
 */

import Range from '../../../../dot/js/Range.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ISLCConstants from '../../../../inverse-square-law-common/js/ISLCConstants.js';
import Charge from '../../common/model/Charge.js';
import CoulombsLawCommonModel from '../../common/model/CoulombsLawCommonModel.js';
import coulombsLaw from '../../coulombsLaw.js';
class CoulombsLawAtomicModel extends CoulombsLawCommonModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    // conversion factor for atomic units
    const e = ISLCConstants.coulombsPerAtomicUnit;

    // set initial charge values
    const chargeValue1 = -2 * e; // charge in Coulombs
    const chargeValue2 = 4 * e; // charge in Coulombs

    const position1 = -2E-11; // initial position from center in m (20pm)
    const position2 = 2E-11; // initial position from center in m (20pm)

    const minChargeValue = -10 * e; // in Coulombs
    const maxChargeValue = 10 * e; // in Coulombs

    const valueRange = new Range(minChargeValue, maxChargeValue);
    const constantRadius = 9.5E-13;
    const charge1 = new Charge(chargeValue1, position1, valueRange, tandem.createTandem('charge1'), {
      constantRadius: constantRadius
    });
    const charge2 = new Charge(chargeValue2, position2, valueRange, tandem.createTandem('charge2'), {
      constantRadius: constantRadius
    });

    // boundary constants are in "X meters", convert to "X pm" (-50pm, 50pm) but still in the unit of meters
    const leftBoundary = ISLCConstants.LEFT_OBJECT_BOUNDARY * 1E-11;
    const rightBoundary = ISLCConstants.RIGHT_OBJECT_BOUNDARY * 1E-11;
    super(charge1, charge2, new Range(leftBoundary, rightBoundary), tandem, {
      minSeparationBetweenObjects: 1E-13,
      snapObjectsToNearest: 1E-12,
      initialRulerPosition: new Vector2(0, -1.1E-11)
    });
  }
}
coulombsLaw.register('CoulombsLawAtomicModel', CoulombsLawAtomicModel);
export default CoulombsLawAtomicModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlZlY3RvcjIiLCJJU0xDQ29uc3RhbnRzIiwiQ2hhcmdlIiwiQ291bG9tYnNMYXdDb21tb25Nb2RlbCIsImNvdWxvbWJzTGF3IiwiQ291bG9tYnNMYXdBdG9taWNNb2RlbCIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiZSIsImNvdWxvbWJzUGVyQXRvbWljVW5pdCIsImNoYXJnZVZhbHVlMSIsImNoYXJnZVZhbHVlMiIsInBvc2l0aW9uMSIsInBvc2l0aW9uMiIsIm1pbkNoYXJnZVZhbHVlIiwibWF4Q2hhcmdlVmFsdWUiLCJ2YWx1ZVJhbmdlIiwiY29uc3RhbnRSYWRpdXMiLCJjaGFyZ2UxIiwiY3JlYXRlVGFuZGVtIiwiY2hhcmdlMiIsImxlZnRCb3VuZGFyeSIsIkxFRlRfT0JKRUNUX0JPVU5EQVJZIiwicmlnaHRCb3VuZGFyeSIsIlJJR0hUX09CSkVDVF9CT1VOREFSWSIsIm1pblNlcGFyYXRpb25CZXR3ZWVuT2JqZWN0cyIsInNuYXBPYmplY3RzVG9OZWFyZXN0IiwiaW5pdGlhbFJ1bGVyUG9zaXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvdWxvbWJzTGF3QXRvbWljTW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIEF0b21pYyBTY2FsZSBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqIEBhdXRob3IgTWljaGFlbCBCYXJsb3dcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgSVNMQ0NvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9pbnZlcnNlLXNxdWFyZS1sYXctY29tbW9uL2pzL0lTTENDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ2hhcmdlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9DaGFyZ2UuanMnO1xyXG5pbXBvcnQgQ291bG9tYnNMYXdDb21tb25Nb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ291bG9tYnNMYXdDb21tb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBjb3Vsb21ic0xhdyBmcm9tICcuLi8uLi9jb3Vsb21ic0xhdy5qcyc7XHJcblxyXG5jbGFzcyBDb3Vsb21ic0xhd0F0b21pY01vZGVsIGV4dGVuZHMgQ291bG9tYnNMYXdDb21tb25Nb2RlbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG5cclxuICAgIC8vIGNvbnZlcnNpb24gZmFjdG9yIGZvciBhdG9taWMgdW5pdHNcclxuICAgIGNvbnN0IGUgPSBJU0xDQ29uc3RhbnRzLmNvdWxvbWJzUGVyQXRvbWljVW5pdDtcclxuXHJcbiAgICAvLyBzZXQgaW5pdGlhbCBjaGFyZ2UgdmFsdWVzXHJcbiAgICBjb25zdCBjaGFyZ2VWYWx1ZTEgPSAtMiAqIGU7IC8vIGNoYXJnZSBpbiBDb3Vsb21ic1xyXG4gICAgY29uc3QgY2hhcmdlVmFsdWUyID0gNCAqIGU7IC8vIGNoYXJnZSBpbiBDb3Vsb21ic1xyXG5cclxuICAgIGNvbnN0IHBvc2l0aW9uMSA9IC0yRS0xMTsgLy8gaW5pdGlhbCBwb3NpdGlvbiBmcm9tIGNlbnRlciBpbiBtICgyMHBtKVxyXG4gICAgY29uc3QgcG9zaXRpb24yID0gMkUtMTE7IC8vIGluaXRpYWwgcG9zaXRpb24gZnJvbSBjZW50ZXIgaW4gbSAoMjBwbSlcclxuXHJcbiAgICBjb25zdCBtaW5DaGFyZ2VWYWx1ZSA9IC0xMCAqIGU7IC8vIGluIENvdWxvbWJzXHJcbiAgICBjb25zdCBtYXhDaGFyZ2VWYWx1ZSA9IDEwICogZTsgLy8gaW4gQ291bG9tYnNcclxuXHJcbiAgICBjb25zdCB2YWx1ZVJhbmdlID0gbmV3IFJhbmdlKCBtaW5DaGFyZ2VWYWx1ZSwgbWF4Q2hhcmdlVmFsdWUgKTtcclxuICAgIGNvbnN0IGNvbnN0YW50UmFkaXVzID0gOS41RS0xMztcclxuXHJcbiAgICBjb25zdCBjaGFyZ2UxID0gbmV3IENoYXJnZSggY2hhcmdlVmFsdWUxLCBwb3NpdGlvbjEsIHZhbHVlUmFuZ2UsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjaGFyZ2UxJyApLCB7XHJcbiAgICAgIGNvbnN0YW50UmFkaXVzOiBjb25zdGFudFJhZGl1c1xyXG4gICAgfSApO1xyXG4gICAgY29uc3QgY2hhcmdlMiA9IG5ldyBDaGFyZ2UoIGNoYXJnZVZhbHVlMiwgcG9zaXRpb24yLCB2YWx1ZVJhbmdlLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY2hhcmdlMicgKSwge1xyXG4gICAgICBjb25zdGFudFJhZGl1czogY29uc3RhbnRSYWRpdXNcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBib3VuZGFyeSBjb25zdGFudHMgYXJlIGluIFwiWCBtZXRlcnNcIiwgY29udmVydCB0byBcIlggcG1cIiAoLTUwcG0sIDUwcG0pIGJ1dCBzdGlsbCBpbiB0aGUgdW5pdCBvZiBtZXRlcnNcclxuICAgIGNvbnN0IGxlZnRCb3VuZGFyeSA9IElTTENDb25zdGFudHMuTEVGVF9PQkpFQ1RfQk9VTkRBUlkgKiAxRS0xMTtcclxuICAgIGNvbnN0IHJpZ2h0Qm91bmRhcnkgPSBJU0xDQ29uc3RhbnRzLlJJR0hUX09CSkVDVF9CT1VOREFSWSAqIDFFLTExO1xyXG5cclxuICAgIHN1cGVyKCBjaGFyZ2UxLCBjaGFyZ2UyLCBuZXcgUmFuZ2UoIGxlZnRCb3VuZGFyeSwgcmlnaHRCb3VuZGFyeSApLCB0YW5kZW0sIHtcclxuICAgICAgbWluU2VwYXJhdGlvbkJldHdlZW5PYmplY3RzOiAxRS0xMyxcclxuICAgICAgc25hcE9iamVjdHNUb05lYXJlc3Q6IDFFLTEyLFxyXG4gICAgICBpbml0aWFsUnVsZXJQb3NpdGlvbjogbmV3IFZlY3RvcjIoIDAsIC0xLjFFLTExIClcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmNvdWxvbWJzTGF3LnJlZ2lzdGVyKCAnQ291bG9tYnNMYXdBdG9taWNNb2RlbCcsIENvdWxvbWJzTGF3QXRvbWljTW9kZWwgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvdWxvbWJzTGF3QXRvbWljTW9kZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLGFBQWEsTUFBTSwyREFBMkQ7QUFDckYsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxzQkFBc0IsTUFBTSw4Q0FBOEM7QUFDakYsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUU5QyxNQUFNQyxzQkFBc0IsU0FBU0Ysc0JBQXNCLENBQUM7RUFFMUQ7QUFDRjtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQjtJQUNBLE1BQU1DLENBQUMsR0FBR1AsYUFBYSxDQUFDUSxxQkFBcUI7O0lBRTdDO0lBQ0EsTUFBTUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHRixDQUFDLENBQUMsQ0FBQztJQUM3QixNQUFNRyxZQUFZLEdBQUcsQ0FBQyxHQUFHSCxDQUFDLENBQUMsQ0FBQzs7SUFFNUIsTUFBTUksU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsTUFBTUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDOztJQUV6QixNQUFNQyxjQUFjLEdBQUcsQ0FBQyxFQUFFLEdBQUdOLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU1PLGNBQWMsR0FBRyxFQUFFLEdBQUdQLENBQUMsQ0FBQyxDQUFDOztJQUUvQixNQUFNUSxVQUFVLEdBQUcsSUFBSWpCLEtBQUssQ0FBRWUsY0FBYyxFQUFFQyxjQUFlLENBQUM7SUFDOUQsTUFBTUUsY0FBYyxHQUFHLE9BQU87SUFFOUIsTUFBTUMsT0FBTyxHQUFHLElBQUloQixNQUFNLENBQUVRLFlBQVksRUFBRUUsU0FBUyxFQUFFSSxVQUFVLEVBQUVULE1BQU0sQ0FBQ1ksWUFBWSxDQUFFLFNBQVUsQ0FBQyxFQUFFO01BQ2pHRixjQUFjLEVBQUVBO0lBQ2xCLENBQUUsQ0FBQztJQUNILE1BQU1HLE9BQU8sR0FBRyxJQUFJbEIsTUFBTSxDQUFFUyxZQUFZLEVBQUVFLFNBQVMsRUFBRUcsVUFBVSxFQUFFVCxNQUFNLENBQUNZLFlBQVksQ0FBRSxTQUFVLENBQUMsRUFBRTtNQUNqR0YsY0FBYyxFQUFFQTtJQUNsQixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNSSxZQUFZLEdBQUdwQixhQUFhLENBQUNxQixvQkFBb0IsR0FBRyxLQUFLO0lBQy9ELE1BQU1DLGFBQWEsR0FBR3RCLGFBQWEsQ0FBQ3VCLHFCQUFxQixHQUFHLEtBQUs7SUFFakUsS0FBSyxDQUFFTixPQUFPLEVBQUVFLE9BQU8sRUFBRSxJQUFJckIsS0FBSyxDQUFFc0IsWUFBWSxFQUFFRSxhQUFjLENBQUMsRUFBRWhCLE1BQU0sRUFBRTtNQUN6RWtCLDJCQUEyQixFQUFFLEtBQUs7TUFDbENDLG9CQUFvQixFQUFFLEtBQUs7TUFDM0JDLG9CQUFvQixFQUFFLElBQUkzQixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsT0FBUTtJQUNqRCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFJLFdBQVcsQ0FBQ3dCLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRXZCLHNCQUF1QixDQUFDO0FBRXhFLGVBQWVBLHNCQUFzQiJ9