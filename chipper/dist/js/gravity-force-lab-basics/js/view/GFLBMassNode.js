// Copyright 2017-2021, University of Colorado Boulder

/**
 * Mass object view for gravity-force-lab-basics.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import MassNode from '../../../gravity-force-lab/js/view/MassNode.js';
import merge from '../../../phet-core/js/merge.js';
import Tandem from '../../../tandem/js/Tandem.js';
import GFLBConstants from '../GFLBConstants.js';
import gravityForceLabBasics from '../gravityForceLabBasics.js';

// constants
const MASS_NODE_Y_POSITION = 215;
class GFLBMassNode extends MassNode {
  /**
   * @param {GFLBModel} model
   * @param {Mass} mass
   * @param {Bounds2} layoutBounds
   * @param {ModelViewTransform2} modelViewTransform
   * @param {GFLBAlertManager} alertManager
   * @param {GFLBForceDescriber} forceDescriber
   * @param {GFLBPositionDescriber} positionDescriber
   * @param {Object} [options]
   */
  constructor(model, mass, layoutBounds, modelViewTransform, alertManager, forceDescriber, positionDescriber, options) {
    options = merge({
      arrowNodeOptions: {
        forceReadoutDecimalPlaces: 1,
        arrowFill: 'black',
        arrowLabelFill: 'black',
        maxArrowWidth: 400,
        forceThresholdPercent: 7 * Math.pow(10, -4),
        backgroundFill: GFLBConstants.BACKGROUND_COLOR_PROPERTY
      },
      y: MASS_NODE_Y_POSITION,
      // {number} In meters, charges will snap to the nearest 0.1 meters in model coordinates
      snapToNearest: model.snapObjectsToNearest,
      stepSize: GFLBConstants.MASS_STEP_SIZE,
      finishWiringListeners: _.noop,
      // phet-io
      tandem: Tandem.REQUIRED,
      // pdom recompute the PDOM descriptions when show distance is toggled
      additionalA11yDependencies: [model.showDistanceProperty]
    }, options);
    super(model, mass, layoutBounds, modelViewTransform, alertManager, forceDescriber, positionDescriber, options);
  }
}
gravityForceLabBasics.register('GFLBMassNode', GFLBMassNode);
export default GFLBMassNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXNzTm9kZSIsIm1lcmdlIiwiVGFuZGVtIiwiR0ZMQkNvbnN0YW50cyIsImdyYXZpdHlGb3JjZUxhYkJhc2ljcyIsIk1BU1NfTk9ERV9ZX1BPU0lUSU9OIiwiR0ZMQk1hc3NOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm1hc3MiLCJsYXlvdXRCb3VuZHMiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJhbGVydE1hbmFnZXIiLCJmb3JjZURlc2NyaWJlciIsInBvc2l0aW9uRGVzY3JpYmVyIiwib3B0aW9ucyIsImFycm93Tm9kZU9wdGlvbnMiLCJmb3JjZVJlYWRvdXREZWNpbWFsUGxhY2VzIiwiYXJyb3dGaWxsIiwiYXJyb3dMYWJlbEZpbGwiLCJtYXhBcnJvd1dpZHRoIiwiZm9yY2VUaHJlc2hvbGRQZXJjZW50IiwiTWF0aCIsInBvdyIsImJhY2tncm91bmRGaWxsIiwiQkFDS0dST1VORF9DT0xPUl9QUk9QRVJUWSIsInkiLCJzbmFwVG9OZWFyZXN0Iiwic25hcE9iamVjdHNUb05lYXJlc3QiLCJzdGVwU2l6ZSIsIk1BU1NfU1RFUF9TSVpFIiwiZmluaXNoV2lyaW5nTGlzdGVuZXJzIiwiXyIsIm5vb3AiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsImFkZGl0aW9uYWxBMTF5RGVwZW5kZW5jaWVzIiwic2hvd0Rpc3RhbmNlUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdGTEJNYXNzTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYXNzIG9iamVjdCB2aWV3IGZvciBncmF2aXR5LWZvcmNlLWxhYi1iYXNpY3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNYXNzTm9kZSBmcm9tICcuLi8uLi8uLi9ncmF2aXR5LWZvcmNlLWxhYi9qcy92aWV3L01hc3NOb2RlLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHRkxCQ29uc3RhbnRzIGZyb20gJy4uL0dGTEJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgZ3Jhdml0eUZvcmNlTGFiQmFzaWNzIGZyb20gJy4uL2dyYXZpdHlGb3JjZUxhYkJhc2ljcy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTUFTU19OT0RFX1lfUE9TSVRJT04gPSAyMTU7XHJcblxyXG5jbGFzcyBHRkxCTWFzc05vZGUgZXh0ZW5kcyBNYXNzTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7R0ZMQk1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7TWFzc30gbWFzc1xyXG4gICAqIEBwYXJhbSB7Qm91bmRzMn0gbGF5b3V0Qm91bmRzXHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge0dGTEJBbGVydE1hbmFnZXJ9IGFsZXJ0TWFuYWdlclxyXG4gICAqIEBwYXJhbSB7R0ZMQkZvcmNlRGVzY3JpYmVyfSBmb3JjZURlc2NyaWJlclxyXG4gICAqIEBwYXJhbSB7R0ZMQlBvc2l0aW9uRGVzY3JpYmVyfSBwb3NpdGlvbkRlc2NyaWJlclxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG1hc3MsIGxheW91dEJvdW5kcywgbW9kZWxWaWV3VHJhbnNmb3JtLCBhbGVydE1hbmFnZXIsIGZvcmNlRGVzY3JpYmVyLCBwb3NpdGlvbkRlc2NyaWJlciwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgYXJyb3dOb2RlT3B0aW9uczoge1xyXG4gICAgICAgIGZvcmNlUmVhZG91dERlY2ltYWxQbGFjZXM6IDEsXHJcbiAgICAgICAgYXJyb3dGaWxsOiAnYmxhY2snLFxyXG4gICAgICAgIGFycm93TGFiZWxGaWxsOiAnYmxhY2snLFxyXG4gICAgICAgIG1heEFycm93V2lkdGg6IDQwMCxcclxuICAgICAgICBmb3JjZVRocmVzaG9sZFBlcmNlbnQ6IDcgKiBNYXRoLnBvdyggMTAsIC00ICksXHJcbiAgICAgICAgYmFja2dyb3VuZEZpbGw6IEdGTEJDb25zdGFudHMuQkFDS0dST1VORF9DT0xPUl9QUk9QRVJUWVxyXG4gICAgICB9LFxyXG4gICAgICB5OiBNQVNTX05PREVfWV9QT1NJVElPTixcclxuXHJcbiAgICAgIC8vIHtudW1iZXJ9IEluIG1ldGVycywgY2hhcmdlcyB3aWxsIHNuYXAgdG8gdGhlIG5lYXJlc3QgMC4xIG1ldGVycyBpbiBtb2RlbCBjb29yZGluYXRlc1xyXG4gICAgICBzbmFwVG9OZWFyZXN0OiBtb2RlbC5zbmFwT2JqZWN0c1RvTmVhcmVzdCxcclxuICAgICAgc3RlcFNpemU6IEdGTEJDb25zdGFudHMuTUFTU19TVEVQX1NJWkUsXHJcblxyXG4gICAgICBmaW5pc2hXaXJpbmdMaXN0ZW5lcnM6IF8ubm9vcCxcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcblxyXG4gICAgICAvLyBwZG9tIHJlY29tcHV0ZSB0aGUgUERPTSBkZXNjcmlwdGlvbnMgd2hlbiBzaG93IGRpc3RhbmNlIGlzIHRvZ2dsZWRcclxuICAgICAgYWRkaXRpb25hbEExMXlEZXBlbmRlbmNpZXM6IFsgbW9kZWwuc2hvd0Rpc3RhbmNlUHJvcGVydHkgXVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgbWFzcywgbGF5b3V0Qm91bmRzLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIGFsZXJ0TWFuYWdlciwgZm9yY2VEZXNjcmliZXIsIHBvc2l0aW9uRGVzY3JpYmVyLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmF2aXR5Rm9yY2VMYWJCYXNpY3MucmVnaXN0ZXIoICdHRkxCTWFzc05vZGUnLCBHRkxCTWFzc05vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgR0ZMQk1hc3NOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sZ0RBQWdEO0FBQ3JFLE9BQU9DLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2Qjs7QUFFL0Q7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxHQUFHO0FBRWhDLE1BQU1DLFlBQVksU0FBU04sUUFBUSxDQUFDO0VBRWxDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VPLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxZQUFZLEVBQUVDLGtCQUFrQixFQUFFQyxZQUFZLEVBQUVDLGNBQWMsRUFBRUMsaUJBQWlCLEVBQUVDLE9BQU8sRUFBRztJQUVySEEsT0FBTyxHQUFHZCxLQUFLLENBQUU7TUFDZmUsZ0JBQWdCLEVBQUU7UUFDaEJDLHlCQUF5QixFQUFFLENBQUM7UUFDNUJDLFNBQVMsRUFBRSxPQUFPO1FBQ2xCQyxjQUFjLEVBQUUsT0FBTztRQUN2QkMsYUFBYSxFQUFFLEdBQUc7UUFDbEJDLHFCQUFxQixFQUFFLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUUsRUFBRSxFQUFFLENBQUMsQ0FBRSxDQUFDO1FBQzdDQyxjQUFjLEVBQUVyQixhQUFhLENBQUNzQjtNQUNoQyxDQUFDO01BQ0RDLENBQUMsRUFBRXJCLG9CQUFvQjtNQUV2QjtNQUNBc0IsYUFBYSxFQUFFbkIsS0FBSyxDQUFDb0Isb0JBQW9CO01BQ3pDQyxRQUFRLEVBQUUxQixhQUFhLENBQUMyQixjQUFjO01BRXRDQyxxQkFBcUIsRUFBRUMsQ0FBQyxDQUFDQyxJQUFJO01BRTdCO01BQ0FDLE1BQU0sRUFBRWhDLE1BQU0sQ0FBQ2lDLFFBQVE7TUFFdkI7TUFDQUMsMEJBQTBCLEVBQUUsQ0FBRTVCLEtBQUssQ0FBQzZCLG9CQUFvQjtJQUMxRCxDQUFDLEVBQUV0QixPQUFRLENBQUM7SUFFWixLQUFLLENBQUVQLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxZQUFZLEVBQUVDLGtCQUFrQixFQUFFQyxZQUFZLEVBQUVDLGNBQWMsRUFBRUMsaUJBQWlCLEVBQUVDLE9BQVEsQ0FBQztFQUNsSDtBQUNGO0FBRUFYLHFCQUFxQixDQUFDa0MsUUFBUSxDQUFFLGNBQWMsRUFBRWhDLFlBQWEsQ0FBQztBQUM5RCxlQUFlQSxZQUFZIn0=