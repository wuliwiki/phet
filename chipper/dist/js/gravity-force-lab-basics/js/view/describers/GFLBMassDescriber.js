// Copyright 2019-2022, University of Colorado Boulder

/**
 * This describer is responsible for all gravity-force-lab-basics specific string forming related to mass.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import MassDescriber from '../../../../gravity-force-lab/js/view/describers/MassDescriber.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import GFLBConstants from '../../GFLBConstants.js';
import gravityForceLabBasics from '../../gravityForceLabBasics.js';
import GravityForceLabBasicsStrings from '../../GravityForceLabBasicsStrings.js';

// string
const mass1LabelString = GravityForceLabBasicsStrings.mass1Label;
const mass2LabelString = GravityForceLabBasicsStrings.mass2Label;
const massBillionsPatternString = GravityForceLabBasicsStrings.a11y.massBillionsPattern;
class GFLBMassDescriber extends MassDescriber {
  /**
   * @param {GFLBModel} model
   * @param {ForceDescriber} forceDescriber
   */
  constructor(model, forceDescriber) {
    const options = {
      object1Label: mass1LabelString,
      object2Label: mass2LabelString,
      convertMassValue: mass => mass / GFLBConstants.BILLION_MULTIPLIER,
      formatMassValue: mass => StringUtils.fillIn(massBillionsPatternString, {
        mass: mass
      })
    };
    super(model, forceDescriber, options);
  }
}
gravityForceLabBasics.register('GFLBMassDescriber', GFLBMassDescriber);
export default GFLBMassDescriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXNzRGVzY3JpYmVyIiwiU3RyaW5nVXRpbHMiLCJHRkxCQ29uc3RhbnRzIiwiZ3Jhdml0eUZvcmNlTGFiQmFzaWNzIiwiR3Jhdml0eUZvcmNlTGFiQmFzaWNzU3RyaW5ncyIsIm1hc3MxTGFiZWxTdHJpbmciLCJtYXNzMUxhYmVsIiwibWFzczJMYWJlbFN0cmluZyIsIm1hc3MyTGFiZWwiLCJtYXNzQmlsbGlvbnNQYXR0ZXJuU3RyaW5nIiwiYTExeSIsIm1hc3NCaWxsaW9uc1BhdHRlcm4iLCJHRkxCTWFzc0Rlc2NyaWJlciIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJmb3JjZURlc2NyaWJlciIsIm9wdGlvbnMiLCJvYmplY3QxTGFiZWwiLCJvYmplY3QyTGFiZWwiLCJjb252ZXJ0TWFzc1ZhbHVlIiwibWFzcyIsIkJJTExJT05fTVVMVElQTElFUiIsImZvcm1hdE1hc3NWYWx1ZSIsImZpbGxJbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR0ZMQk1hc3NEZXNjcmliZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBkZXNjcmliZXIgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBncmF2aXR5LWZvcmNlLWxhYi1iYXNpY3Mgc3BlY2lmaWMgc3RyaW5nIGZvcm1pbmcgcmVsYXRlZCB0byBtYXNzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1hc3NEZXNjcmliZXIgZnJvbSAnLi4vLi4vLi4vLi4vZ3Jhdml0eS1mb3JjZS1sYWIvanMvdmlldy9kZXNjcmliZXJzL01hc3NEZXNjcmliZXIuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IEdGTEJDb25zdGFudHMgZnJvbSAnLi4vLi4vR0ZMQkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBncmF2aXR5Rm9yY2VMYWJCYXNpY3MgZnJvbSAnLi4vLi4vZ3Jhdml0eUZvcmNlTGFiQmFzaWNzLmpzJztcclxuaW1wb3J0IEdyYXZpdHlGb3JjZUxhYkJhc2ljc1N0cmluZ3MgZnJvbSAnLi4vLi4vR3Jhdml0eUZvcmNlTGFiQmFzaWNzU3RyaW5ncy5qcyc7XHJcblxyXG4vLyBzdHJpbmdcclxuY29uc3QgbWFzczFMYWJlbFN0cmluZyA9IEdyYXZpdHlGb3JjZUxhYkJhc2ljc1N0cmluZ3MubWFzczFMYWJlbDtcclxuY29uc3QgbWFzczJMYWJlbFN0cmluZyA9IEdyYXZpdHlGb3JjZUxhYkJhc2ljc1N0cmluZ3MubWFzczJMYWJlbDtcclxuY29uc3QgbWFzc0JpbGxpb25zUGF0dGVyblN0cmluZyA9IEdyYXZpdHlGb3JjZUxhYkJhc2ljc1N0cmluZ3MuYTExeS5tYXNzQmlsbGlvbnNQYXR0ZXJuO1xyXG5cclxuY2xhc3MgR0ZMQk1hc3NEZXNjcmliZXIgZXh0ZW5kcyBNYXNzRGVzY3JpYmVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtHRkxCTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtGb3JjZURlc2NyaWJlcn0gZm9yY2VEZXNjcmliZXJcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIGZvcmNlRGVzY3JpYmVyICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG9iamVjdDFMYWJlbDogbWFzczFMYWJlbFN0cmluZyxcclxuICAgICAgb2JqZWN0MkxhYmVsOiBtYXNzMkxhYmVsU3RyaW5nLFxyXG4gICAgICBjb252ZXJ0TWFzc1ZhbHVlOiBtYXNzID0+IG1hc3MgLyBHRkxCQ29uc3RhbnRzLkJJTExJT05fTVVMVElQTElFUixcclxuICAgICAgZm9ybWF0TWFzc1ZhbHVlOiBtYXNzID0+IFN0cmluZ1V0aWxzLmZpbGxJbiggbWFzc0JpbGxpb25zUGF0dGVyblN0cmluZywgeyBtYXNzOiBtYXNzIH0gKVxyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIGZvcmNlRGVzY3JpYmVyLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmF2aXR5Rm9yY2VMYWJCYXNpY3MucmVnaXN0ZXIoICdHRkxCTWFzc0Rlc2NyaWJlcicsIEdGTEJNYXNzRGVzY3JpYmVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IEdGTEJNYXNzRGVzY3JpYmVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxhQUFhLE1BQU0sbUVBQW1FO0FBQzdGLE9BQU9DLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUNsRCxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsNEJBQTRCLE1BQU0sdUNBQXVDOztBQUVoRjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHRCw0QkFBNEIsQ0FBQ0UsVUFBVTtBQUNoRSxNQUFNQyxnQkFBZ0IsR0FBR0gsNEJBQTRCLENBQUNJLFVBQVU7QUFDaEUsTUFBTUMseUJBQXlCLEdBQUdMLDRCQUE0QixDQUFDTSxJQUFJLENBQUNDLG1CQUFtQjtBQUV2RixNQUFNQyxpQkFBaUIsU0FBU1osYUFBYSxDQUFDO0VBRTVDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VhLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsY0FBYyxFQUFHO0lBRW5DLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxZQUFZLEVBQUVaLGdCQUFnQjtNQUM5QmEsWUFBWSxFQUFFWCxnQkFBZ0I7TUFDOUJZLGdCQUFnQixFQUFFQyxJQUFJLElBQUlBLElBQUksR0FBR2xCLGFBQWEsQ0FBQ21CLGtCQUFrQjtNQUNqRUMsZUFBZSxFQUFFRixJQUFJLElBQUluQixXQUFXLENBQUNzQixNQUFNLENBQUVkLHlCQUF5QixFQUFFO1FBQUVXLElBQUksRUFBRUE7TUFBSyxDQUFFO0lBQ3pGLENBQUM7SUFFRCxLQUFLLENBQUVOLEtBQUssRUFBRUMsY0FBYyxFQUFFQyxPQUFRLENBQUM7RUFDekM7QUFDRjtBQUVBYixxQkFBcUIsQ0FBQ3FCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRVosaUJBQWtCLENBQUM7QUFDeEUsZUFBZUEsaUJBQWlCIn0=