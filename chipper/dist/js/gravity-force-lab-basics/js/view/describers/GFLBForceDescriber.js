// Copyright 2019-2022, University of Colorado Boulder

/**
 * This describer is responsible for all gravity-force-lab-basics specific string forming related to force.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import ForceDescriber from '../../../../inverse-square-law-common/js/view/describers/ForceDescriber.js';
import gravityForceLabBasics from '../../gravityForceLabBasics.js';
import GravityForceLabBasicsStrings from '../../GravityForceLabBasicsStrings.js';
const forceArrowsCapitalizedString = GravityForceLabBasicsStrings.a11y.forceArrowsCapitalized;
const forceArrowsString = GravityForceLabBasicsStrings.a11y.forceArrows;
const arrowsString = GravityForceLabBasicsStrings.a11y.arrows;
const forceArrowCapitalizedString = GravityForceLabBasicsStrings.a11y.forceArrowCapitalized;
const sizeOfForceString = GravityForceLabBasicsStrings.a11y.sizeOfForce;
class GFLBForceDescriber extends ForceDescriber {
  /**
   * @param {GFLBModel} model
   * @param {string} object1Label
   * @param {string} object2Label
   * @param {PositionDescriber} positionDescriber
   */
  constructor(model, object1Label, object2Label, positionDescriber) {
    const options = {
      convertForce: force => {
        return Utils.toFixedNumber(force, 1);
      },
      forceVectorCapitalizedString: forceArrowCapitalizedString,
      forceMagnitudeString: sizeOfForceString,
      forceVectorsCapitalizedString: forceArrowsCapitalizedString,
      forceVectorsString: forceArrowsString,
      vectorsString: arrowsString,
      vectorsCapitalizedString: forceArrowsCapitalizedString
    };
    super(model, object1Label, object2Label, positionDescriber, options);
  }

  /**
   * These empirically determined values were designed, see https://docs.google.com/document/d/1HdDG9ds2MdbCb21l9qk3cI8yBQxK6-wBWNXC4Tloji8/edit#heading=h.gnyv76vd5fvr
   * @param {number} force in newtons
   * @param {number} numberOfRegions - for crosscheck
   * @returns {number}
   * @protected
   * @override
   */
  getForceVectorIndex(force, numberOfRegions) {
    assert && assert(numberOfRegions === 7, 'If numberOfRegions changes, this function should too.');
    if (force <= 40.6) {
      return 0;
    }
    if (force <= 250.3) {
      return 1;
    }
    if (force <= 544.8) {
      return 2;
    }
    if (force <= 888.6) {
      return 3;
    }
    if (force <= 1261.6) {
      return 4;
    }
    if (force <= 2059.9) {
      return 5;
    }
    return 6;
  }
}
gravityForceLabBasics.register('GFLBForceDescriber', GFLBForceDescriber);
export default GFLBForceDescriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIkZvcmNlRGVzY3JpYmVyIiwiZ3Jhdml0eUZvcmNlTGFiQmFzaWNzIiwiR3Jhdml0eUZvcmNlTGFiQmFzaWNzU3RyaW5ncyIsImZvcmNlQXJyb3dzQ2FwaXRhbGl6ZWRTdHJpbmciLCJhMTF5IiwiZm9yY2VBcnJvd3NDYXBpdGFsaXplZCIsImZvcmNlQXJyb3dzU3RyaW5nIiwiZm9yY2VBcnJvd3MiLCJhcnJvd3NTdHJpbmciLCJhcnJvd3MiLCJmb3JjZUFycm93Q2FwaXRhbGl6ZWRTdHJpbmciLCJmb3JjZUFycm93Q2FwaXRhbGl6ZWQiLCJzaXplT2ZGb3JjZVN0cmluZyIsInNpemVPZkZvcmNlIiwiR0ZMQkZvcmNlRGVzY3JpYmVyIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm9iamVjdDFMYWJlbCIsIm9iamVjdDJMYWJlbCIsInBvc2l0aW9uRGVzY3JpYmVyIiwib3B0aW9ucyIsImNvbnZlcnRGb3JjZSIsImZvcmNlIiwidG9GaXhlZE51bWJlciIsImZvcmNlVmVjdG9yQ2FwaXRhbGl6ZWRTdHJpbmciLCJmb3JjZU1hZ25pdHVkZVN0cmluZyIsImZvcmNlVmVjdG9yc0NhcGl0YWxpemVkU3RyaW5nIiwiZm9yY2VWZWN0b3JzU3RyaW5nIiwidmVjdG9yc1N0cmluZyIsInZlY3RvcnNDYXBpdGFsaXplZFN0cmluZyIsImdldEZvcmNlVmVjdG9ySW5kZXgiLCJudW1iZXJPZlJlZ2lvbnMiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdGTEJGb3JjZURlc2NyaWJlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGRlc2NyaWJlciBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGdyYXZpdHktZm9yY2UtbGFiLWJhc2ljcyBzcGVjaWZpYyBzdHJpbmcgZm9ybWluZyByZWxhdGVkIHRvIGZvcmNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBGb3JjZURlc2NyaWJlciBmcm9tICcuLi8uLi8uLi8uLi9pbnZlcnNlLXNxdWFyZS1sYXctY29tbW9uL2pzL3ZpZXcvZGVzY3JpYmVycy9Gb3JjZURlc2NyaWJlci5qcyc7XHJcbmltcG9ydCBncmF2aXR5Rm9yY2VMYWJCYXNpY3MgZnJvbSAnLi4vLi4vZ3Jhdml0eUZvcmNlTGFiQmFzaWNzLmpzJztcclxuaW1wb3J0IEdyYXZpdHlGb3JjZUxhYkJhc2ljc1N0cmluZ3MgZnJvbSAnLi4vLi4vR3Jhdml0eUZvcmNlTGFiQmFzaWNzU3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBmb3JjZUFycm93c0NhcGl0YWxpemVkU3RyaW5nID0gR3Jhdml0eUZvcmNlTGFiQmFzaWNzU3RyaW5ncy5hMTF5LmZvcmNlQXJyb3dzQ2FwaXRhbGl6ZWQ7XHJcbmNvbnN0IGZvcmNlQXJyb3dzU3RyaW5nID0gR3Jhdml0eUZvcmNlTGFiQmFzaWNzU3RyaW5ncy5hMTF5LmZvcmNlQXJyb3dzO1xyXG5jb25zdCBhcnJvd3NTdHJpbmcgPSBHcmF2aXR5Rm9yY2VMYWJCYXNpY3NTdHJpbmdzLmExMXkuYXJyb3dzO1xyXG5jb25zdCBmb3JjZUFycm93Q2FwaXRhbGl6ZWRTdHJpbmcgPSBHcmF2aXR5Rm9yY2VMYWJCYXNpY3NTdHJpbmdzLmExMXkuZm9yY2VBcnJvd0NhcGl0YWxpemVkO1xyXG5jb25zdCBzaXplT2ZGb3JjZVN0cmluZyA9IEdyYXZpdHlGb3JjZUxhYkJhc2ljc1N0cmluZ3MuYTExeS5zaXplT2ZGb3JjZTtcclxuXHJcbmNsYXNzIEdGTEJGb3JjZURlc2NyaWJlciBleHRlbmRzIEZvcmNlRGVzY3JpYmVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtHRkxCTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9iamVjdDFMYWJlbFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3QyTGFiZWxcclxuICAgKiBAcGFyYW0ge1Bvc2l0aW9uRGVzY3JpYmVyfSBwb3NpdGlvbkRlc2NyaWJlclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgb2JqZWN0MUxhYmVsLCBvYmplY3QyTGFiZWwsIHBvc2l0aW9uRGVzY3JpYmVyICkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgY29udmVydEZvcmNlOiBmb3JjZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIFV0aWxzLnRvRml4ZWROdW1iZXIoIGZvcmNlLCAxICk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBmb3JjZVZlY3RvckNhcGl0YWxpemVkU3RyaW5nOiBmb3JjZUFycm93Q2FwaXRhbGl6ZWRTdHJpbmcsXHJcbiAgICAgIGZvcmNlTWFnbml0dWRlU3RyaW5nOiBzaXplT2ZGb3JjZVN0cmluZyxcclxuICAgICAgZm9yY2VWZWN0b3JzQ2FwaXRhbGl6ZWRTdHJpbmc6IGZvcmNlQXJyb3dzQ2FwaXRhbGl6ZWRTdHJpbmcsXHJcbiAgICAgIGZvcmNlVmVjdG9yc1N0cmluZzogZm9yY2VBcnJvd3NTdHJpbmcsXHJcbiAgICAgIHZlY3RvcnNTdHJpbmc6IGFycm93c1N0cmluZyxcclxuICAgICAgdmVjdG9yc0NhcGl0YWxpemVkU3RyaW5nOiBmb3JjZUFycm93c0NhcGl0YWxpemVkU3RyaW5nXHJcbiAgICB9O1xyXG4gICAgc3VwZXIoIG1vZGVsLCBvYmplY3QxTGFiZWwsIG9iamVjdDJMYWJlbCwgcG9zaXRpb25EZXNjcmliZXIsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZXNlIGVtcGlyaWNhbGx5IGRldGVybWluZWQgdmFsdWVzIHdlcmUgZGVzaWduZWQsIHNlZSBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFIZERHOWRzMk1kYkNiMjFsOXFrM2NJOHlCUXhLNi13QldOWEM0VGxvamk4L2VkaXQjaGVhZGluZz1oLmdueXY3NnZkNWZ2clxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmb3JjZSBpbiBuZXd0b25zXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlck9mUmVnaW9ucyAtIGZvciBjcm9zc2NoZWNrXHJcbiAgICogQHJldHVybnMge251bWJlcn1cclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZ2V0Rm9yY2VWZWN0b3JJbmRleCggZm9yY2UsIG51bWJlck9mUmVnaW9ucyApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG51bWJlck9mUmVnaW9ucyA9PT0gNywgJ0lmIG51bWJlck9mUmVnaW9ucyBjaGFuZ2VzLCB0aGlzIGZ1bmN0aW9uIHNob3VsZCB0b28uJyApO1xyXG5cclxuICAgIGlmICggZm9yY2UgPD0gNDAuNiApIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBpZiAoIGZvcmNlIDw9IDI1MC4zICkge1xyXG4gICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICAgIGlmICggZm9yY2UgPD0gNTQ0LjggKSB7XHJcbiAgICAgIHJldHVybiAyO1xyXG4gICAgfVxyXG4gICAgaWYgKCBmb3JjZSA8PSA4ODguNiApIHtcclxuICAgICAgcmV0dXJuIDM7XHJcbiAgICB9XHJcbiAgICBpZiAoIGZvcmNlIDw9IDEyNjEuNiApIHtcclxuICAgICAgcmV0dXJuIDQ7XHJcbiAgICB9XHJcbiAgICBpZiAoIGZvcmNlIDw9IDIwNTkuOSApIHtcclxuICAgICAgcmV0dXJuIDU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gNjtcclxuICB9XHJcbn1cclxuXHJcbmdyYXZpdHlGb3JjZUxhYkJhc2ljcy5yZWdpc3RlciggJ0dGTEJGb3JjZURlc2NyaWJlcicsIEdGTEJGb3JjZURlc2NyaWJlciApO1xyXG5leHBvcnQgZGVmYXVsdCBHRkxCRm9yY2VEZXNjcmliZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsY0FBYyxNQUFNLDRFQUE0RTtBQUN2RyxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsNEJBQTRCLE1BQU0sdUNBQXVDO0FBRWhGLE1BQU1DLDRCQUE0QixHQUFHRCw0QkFBNEIsQ0FBQ0UsSUFBSSxDQUFDQyxzQkFBc0I7QUFDN0YsTUFBTUMsaUJBQWlCLEdBQUdKLDRCQUE0QixDQUFDRSxJQUFJLENBQUNHLFdBQVc7QUFDdkUsTUFBTUMsWUFBWSxHQUFHTiw0QkFBNEIsQ0FBQ0UsSUFBSSxDQUFDSyxNQUFNO0FBQzdELE1BQU1DLDJCQUEyQixHQUFHUiw0QkFBNEIsQ0FBQ0UsSUFBSSxDQUFDTyxxQkFBcUI7QUFDM0YsTUFBTUMsaUJBQWlCLEdBQUdWLDRCQUE0QixDQUFDRSxJQUFJLENBQUNTLFdBQVc7QUFFdkUsTUFBTUMsa0JBQWtCLFNBQVNkLGNBQWMsQ0FBQztFQUU5QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRWUsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLFlBQVksRUFBRUMsaUJBQWlCLEVBQUc7SUFDbEUsTUFBTUMsT0FBTyxHQUFHO01BQ2RDLFlBQVksRUFBRUMsS0FBSyxJQUFJO1FBQ3JCLE9BQU92QixLQUFLLENBQUN3QixhQUFhLENBQUVELEtBQUssRUFBRSxDQUFFLENBQUM7TUFDeEMsQ0FBQztNQUVERSw0QkFBNEIsRUFBRWQsMkJBQTJCO01BQ3pEZSxvQkFBb0IsRUFBRWIsaUJBQWlCO01BQ3ZDYyw2QkFBNkIsRUFBRXZCLDRCQUE0QjtNQUMzRHdCLGtCQUFrQixFQUFFckIsaUJBQWlCO01BQ3JDc0IsYUFBYSxFQUFFcEIsWUFBWTtNQUMzQnFCLHdCQUF3QixFQUFFMUI7SUFDNUIsQ0FBQztJQUNELEtBQUssQ0FBRWEsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLFlBQVksRUFBRUMsaUJBQWlCLEVBQUVDLE9BQVEsQ0FBQztFQUN4RTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VVLG1CQUFtQkEsQ0FBRVIsS0FBSyxFQUFFUyxlQUFlLEVBQUc7SUFDNUNDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxlQUFlLEtBQUssQ0FBQyxFQUFFLHVEQUF3RCxDQUFDO0lBRWxHLElBQUtULEtBQUssSUFBSSxJQUFJLEVBQUc7TUFDbkIsT0FBTyxDQUFDO0lBQ1Y7SUFDQSxJQUFLQSxLQUFLLElBQUksS0FBSyxFQUFHO01BQ3BCLE9BQU8sQ0FBQztJQUNWO0lBQ0EsSUFBS0EsS0FBSyxJQUFJLEtBQUssRUFBRztNQUNwQixPQUFPLENBQUM7SUFDVjtJQUNBLElBQUtBLEtBQUssSUFBSSxLQUFLLEVBQUc7TUFDcEIsT0FBTyxDQUFDO0lBQ1Y7SUFDQSxJQUFLQSxLQUFLLElBQUksTUFBTSxFQUFHO01BQ3JCLE9BQU8sQ0FBQztJQUNWO0lBQ0EsSUFBS0EsS0FBSyxJQUFJLE1BQU0sRUFBRztNQUNyQixPQUFPLENBQUM7SUFDVjtJQUNBLE9BQU8sQ0FBQztFQUNWO0FBQ0Y7QUFFQXJCLHFCQUFxQixDQUFDZ0MsUUFBUSxDQUFFLG9CQUFvQixFQUFFbkIsa0JBQW1CLENBQUM7QUFDMUUsZUFBZUEsa0JBQWtCIn0=