// Copyright 2019-2022, University of Colorado Boulder

/**
 * This describer is responsible for all gravity-force-lab-basics specific string forming related to position.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import GravityForceLabPositionDescriber from '../../../../gravity-force-lab/js/view/describers/GravityForceLabPositionDescriber.js';
import gravityForceLabBasics from '../../gravityForceLabBasics.js';
import GravityForceLabBasicsStrings from '../../GravityForceLabBasicsStrings.js';

// strings
const kilometerString = GravityForceLabBasicsStrings.a11y.kilometer;
const kilometersString = GravityForceLabBasicsStrings.a11y.kilometers;
class GFLBPositionDescriber extends GravityForceLabPositionDescriber {
  /**
   * @param {GFLBModel} model
   * @param {string} object1Label
   * @param {string} object2Label
   */
  constructor(model, object1Label, object2Label) {
    const options = {
      unit: kilometerString,
      units: kilometersString,
      formatDisplayDistance: distance => Utils.toFixedNumber(distance / 1e3, 1)
    };
    super(model, object1Label, object2Label, options);

    // private
    this.showDistanceProperty = model.showDistanceProperty;

    // link GFLB property to whether or now we use quantitative distance for alerts and value text
    // the GFLBPositionDescriber persists for life of sim and does not require disposal
    model.showDistanceProperty.link(showDistance => {
      this.useQuantitativeDistance = showDistance;
    });
  }
}
gravityForceLabBasics.register('GFLBPositionDescriber', GFLBPositionDescriber);
export default GFLBPositionDescriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIkdyYXZpdHlGb3JjZUxhYlBvc2l0aW9uRGVzY3JpYmVyIiwiZ3Jhdml0eUZvcmNlTGFiQmFzaWNzIiwiR3Jhdml0eUZvcmNlTGFiQmFzaWNzU3RyaW5ncyIsImtpbG9tZXRlclN0cmluZyIsImExMXkiLCJraWxvbWV0ZXIiLCJraWxvbWV0ZXJzU3RyaW5nIiwia2lsb21ldGVycyIsIkdGTEJQb3NpdGlvbkRlc2NyaWJlciIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJvYmplY3QxTGFiZWwiLCJvYmplY3QyTGFiZWwiLCJvcHRpb25zIiwidW5pdCIsInVuaXRzIiwiZm9ybWF0RGlzcGxheURpc3RhbmNlIiwiZGlzdGFuY2UiLCJ0b0ZpeGVkTnVtYmVyIiwic2hvd0Rpc3RhbmNlUHJvcGVydHkiLCJsaW5rIiwic2hvd0Rpc3RhbmNlIiwidXNlUXVhbnRpdGF0aXZlRGlzdGFuY2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdGTEJQb3NpdGlvbkRlc2NyaWJlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGRlc2NyaWJlciBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGdyYXZpdHktZm9yY2UtbGFiLWJhc2ljcyBzcGVjaWZpYyBzdHJpbmcgZm9ybWluZyByZWxhdGVkIHRvIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBHcmF2aXR5Rm9yY2VMYWJQb3NpdGlvbkRlc2NyaWJlciBmcm9tICcuLi8uLi8uLi8uLi9ncmF2aXR5LWZvcmNlLWxhYi9qcy92aWV3L2Rlc2NyaWJlcnMvR3Jhdml0eUZvcmNlTGFiUG9zaXRpb25EZXNjcmliZXIuanMnO1xyXG5pbXBvcnQgZ3Jhdml0eUZvcmNlTGFiQmFzaWNzIGZyb20gJy4uLy4uL2dyYXZpdHlGb3JjZUxhYkJhc2ljcy5qcyc7XHJcbmltcG9ydCBHcmF2aXR5Rm9yY2VMYWJCYXNpY3NTdHJpbmdzIGZyb20gJy4uLy4uL0dyYXZpdHlGb3JjZUxhYkJhc2ljc1N0cmluZ3MuanMnO1xyXG5cclxuLy8gc3RyaW5nc1xyXG5jb25zdCBraWxvbWV0ZXJTdHJpbmcgPSBHcmF2aXR5Rm9yY2VMYWJCYXNpY3NTdHJpbmdzLmExMXkua2lsb21ldGVyO1xyXG5jb25zdCBraWxvbWV0ZXJzU3RyaW5nID0gR3Jhdml0eUZvcmNlTGFiQmFzaWNzU3RyaW5ncy5hMTF5LmtpbG9tZXRlcnM7XHJcblxyXG5jbGFzcyBHRkxCUG9zaXRpb25EZXNjcmliZXIgZXh0ZW5kcyBHcmF2aXR5Rm9yY2VMYWJQb3NpdGlvbkRlc2NyaWJlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7R0ZMQk1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3QxTGFiZWxcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqZWN0MkxhYmVsXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBvYmplY3QxTGFiZWwsIG9iamVjdDJMYWJlbCApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICB1bml0OiBraWxvbWV0ZXJTdHJpbmcsXHJcbiAgICAgIHVuaXRzOiBraWxvbWV0ZXJzU3RyaW5nLFxyXG4gICAgICBmb3JtYXREaXNwbGF5RGlzdGFuY2U6IGRpc3RhbmNlID0+IFV0aWxzLnRvRml4ZWROdW1iZXIoIGRpc3RhbmNlIC8gMWUzLCAxIClcclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCBvYmplY3QxTGFiZWwsIG9iamVjdDJMYWJlbCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIHRoaXMuc2hvd0Rpc3RhbmNlUHJvcGVydHkgPSBtb2RlbC5zaG93RGlzdGFuY2VQcm9wZXJ0eTtcclxuXHJcbiAgICAvLyBsaW5rIEdGTEIgcHJvcGVydHkgdG8gd2hldGhlciBvciBub3cgd2UgdXNlIHF1YW50aXRhdGl2ZSBkaXN0YW5jZSBmb3IgYWxlcnRzIGFuZCB2YWx1ZSB0ZXh0XHJcbiAgICAvLyB0aGUgR0ZMQlBvc2l0aW9uRGVzY3JpYmVyIHBlcnNpc3RzIGZvciBsaWZlIG9mIHNpbSBhbmQgZG9lcyBub3QgcmVxdWlyZSBkaXNwb3NhbFxyXG4gICAgbW9kZWwuc2hvd0Rpc3RhbmNlUHJvcGVydHkubGluayggc2hvd0Rpc3RhbmNlID0+IHtcclxuICAgICAgdGhpcy51c2VRdWFudGl0YXRpdmVEaXN0YW5jZSA9IHNob3dEaXN0YW5jZTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXZpdHlGb3JjZUxhYkJhc2ljcy5yZWdpc3RlciggJ0dGTEJQb3NpdGlvbkRlc2NyaWJlcicsIEdGTEJQb3NpdGlvbkRlc2NyaWJlciApO1xyXG5leHBvcnQgZGVmYXVsdCBHRkxCUG9zaXRpb25EZXNjcmliZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsZ0NBQWdDLE1BQU0sc0ZBQXNGO0FBQ25JLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyw0QkFBNEIsTUFBTSx1Q0FBdUM7O0FBRWhGO0FBQ0EsTUFBTUMsZUFBZSxHQUFHRCw0QkFBNEIsQ0FBQ0UsSUFBSSxDQUFDQyxTQUFTO0FBQ25FLE1BQU1DLGdCQUFnQixHQUFHSiw0QkFBNEIsQ0FBQ0UsSUFBSSxDQUFDRyxVQUFVO0FBRXJFLE1BQU1DLHFCQUFxQixTQUFTUixnQ0FBZ0MsQ0FBQztFQUVuRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VTLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsWUFBWSxFQUFFQyxZQUFZLEVBQUc7SUFFL0MsTUFBTUMsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRVgsZUFBZTtNQUNyQlksS0FBSyxFQUFFVCxnQkFBZ0I7TUFDdkJVLHFCQUFxQixFQUFFQyxRQUFRLElBQUlsQixLQUFLLENBQUNtQixhQUFhLENBQUVELFFBQVEsR0FBRyxHQUFHLEVBQUUsQ0FBRTtJQUM1RSxDQUFDO0lBRUQsS0FBSyxDQUFFUCxLQUFLLEVBQUVDLFlBQVksRUFBRUMsWUFBWSxFQUFFQyxPQUFRLENBQUM7O0lBRW5EO0lBQ0EsSUFBSSxDQUFDTSxvQkFBb0IsR0FBR1QsS0FBSyxDQUFDUyxvQkFBb0I7O0lBRXREO0lBQ0E7SUFDQVQsS0FBSyxDQUFDUyxvQkFBb0IsQ0FBQ0MsSUFBSSxDQUFFQyxZQUFZLElBQUk7TUFDL0MsSUFBSSxDQUFDQyx1QkFBdUIsR0FBR0QsWUFBWTtJQUM3QyxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFwQixxQkFBcUIsQ0FBQ3NCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRWYscUJBQXNCLENBQUM7QUFDaEYsZUFBZUEscUJBQXFCIn0=