// Copyright 2016-2022, University of Colorado Boulder

/**
 * Main model for gravity-force-lab-basics.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import Mass from '../../../gravity-force-lab/js/model/Mass.js';
import ISLCModel from '../../../inverse-square-law-common/js/model/ISLCModel.js';
import PhysicalConstants from '../../../phet-core/js/PhysicalConstants.js';
import { Color } from '../../../scenery/js/imports.js';
import GFLBConstants from '../GFLBConstants.js';
import gravityForceLabBasics from '../gravityForceLabBasics.js';

// constants
const INITIAL_VALUE_1 = 2 * GFLBConstants.BILLION_MULTIPLIER;
const INITIAL_VALUE_2 = 4 * GFLBConstants.BILLION_MULTIPLIER;
const INITIAL_POTISION_1 = -2000;
const INITIAL_POTISION_2 = 2000;
const VALUE_RANGE = GFLBConstants.MASS_RANGE;
const DENSITY = GFLBConstants.MASS_DENSITY;
const MASS_OPTIONS = {
  constantRadius: GFLBConstants.CONSTANT_RADIUS,
  leftObjectBoundary: GFLBConstants.PULL_POSITION_RANGE.min,
  rightObjectBoundary: GFLBConstants.PULL_POSITION_RANGE.max
};
class GFLBModel extends ISLCModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    // The Properties need to be passed to the Mass constructors, so store as local variables for now.
    const constantRadiusProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('constantRadiusProperty')
    });

    // Property driving the "show distance" checkbox
    const showDistanceProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('showDistanceProperty')
    });
    const mass1 = new Mass(INITIAL_VALUE_1, INITIAL_POTISION_1, VALUE_RANGE, DENSITY, constantRadiusProperty, new Color('#00f'), tandem.createTandem('mass1'), MASS_OPTIONS);
    const mass2 = new Mass(INITIAL_VALUE_2, INITIAL_POTISION_2, VALUE_RANGE, DENSITY, constantRadiusProperty, new Color('#f00'), tandem.createTandem('mass2'), MASS_OPTIONS);
    super(PhysicalConstants.GRAVITATIONAL_CONSTANT, mass1, mass2, GFLBConstants.PULL_POSITION_RANGE, tandem, {
      snapObjectsToNearest: GFLBConstants.MASS_POSITION_DELTA,
      minSeparationBetweenObjects: GFLBConstants.MIN_DISTANCE_BETWEEN_MASSES
    });

    // @public
    this.constantRadiusProperty = constantRadiusProperty;
    this.showDistanceProperty = showDistanceProperty;

    // @public (read-only) - true when a reset is in progress
    this.resetInProgressProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('resetInProgressProperty')
    });
  }

  /**
   * Reset the GFLBModel.
   * @public
   */
  reset() {
    this.resetInProgressProperty.set(true);
    this.constantRadiusProperty.reset();
    this.showDistanceProperty.reset();
    super.reset();
    this.resetInProgressProperty.set(false);
  }
}
gravityForceLabBasics.register('GFLBModel', GFLBModel);
export default GFLBModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJNYXNzIiwiSVNMQ01vZGVsIiwiUGh5c2ljYWxDb25zdGFudHMiLCJDb2xvciIsIkdGTEJDb25zdGFudHMiLCJncmF2aXR5Rm9yY2VMYWJCYXNpY3MiLCJJTklUSUFMX1ZBTFVFXzEiLCJCSUxMSU9OX01VTFRJUExJRVIiLCJJTklUSUFMX1ZBTFVFXzIiLCJJTklUSUFMX1BPVElTSU9OXzEiLCJJTklUSUFMX1BPVElTSU9OXzIiLCJWQUxVRV9SQU5HRSIsIk1BU1NfUkFOR0UiLCJERU5TSVRZIiwiTUFTU19ERU5TSVRZIiwiTUFTU19PUFRJT05TIiwiY29uc3RhbnRSYWRpdXMiLCJDT05TVEFOVF9SQURJVVMiLCJsZWZ0T2JqZWN0Qm91bmRhcnkiLCJQVUxMX1BPU0lUSU9OX1JBTkdFIiwibWluIiwicmlnaHRPYmplY3RCb3VuZGFyeSIsIm1heCIsIkdGTEJNb2RlbCIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiY29uc3RhbnRSYWRpdXNQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInNob3dEaXN0YW5jZVByb3BlcnR5IiwibWFzczEiLCJtYXNzMiIsIkdSQVZJVEFUSU9OQUxfQ09OU1RBTlQiLCJzbmFwT2JqZWN0c1RvTmVhcmVzdCIsIk1BU1NfUE9TSVRJT05fREVMVEEiLCJtaW5TZXBhcmF0aW9uQmV0d2Vlbk9iamVjdHMiLCJNSU5fRElTVEFOQ0VfQkVUV0VFTl9NQVNTRVMiLCJyZXNldEluUHJvZ3Jlc3NQcm9wZXJ0eSIsInJlc2V0Iiwic2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHRkxCTW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiBtb2RlbCBmb3IgZ3Jhdml0eS1mb3JjZS1sYWItYmFzaWNzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IE1hc3MgZnJvbSAnLi4vLi4vLi4vZ3Jhdml0eS1mb3JjZS1sYWIvanMvbW9kZWwvTWFzcy5qcyc7XHJcbmltcG9ydCBJU0xDTW9kZWwgZnJvbSAnLi4vLi4vLi4vaW52ZXJzZS1zcXVhcmUtbGF3LWNvbW1vbi9qcy9tb2RlbC9JU0xDTW9kZWwuanMnO1xyXG5pbXBvcnQgUGh5c2ljYWxDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL1BoeXNpY2FsQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgR0ZMQkNvbnN0YW50cyBmcm9tICcuLi9HRkxCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IGdyYXZpdHlGb3JjZUxhYkJhc2ljcyBmcm9tICcuLi9ncmF2aXR5Rm9yY2VMYWJCYXNpY3MuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IElOSVRJQUxfVkFMVUVfMSA9IDIgKiBHRkxCQ29uc3RhbnRzLkJJTExJT05fTVVMVElQTElFUjtcclxuY29uc3QgSU5JVElBTF9WQUxVRV8yID0gNCAqIEdGTEJDb25zdGFudHMuQklMTElPTl9NVUxUSVBMSUVSO1xyXG5cclxuY29uc3QgSU5JVElBTF9QT1RJU0lPTl8xID0gLTIwMDA7XHJcbmNvbnN0IElOSVRJQUxfUE9USVNJT05fMiA9IDIwMDA7XHJcblxyXG5jb25zdCBWQUxVRV9SQU5HRSA9IEdGTEJDb25zdGFudHMuTUFTU19SQU5HRTtcclxuY29uc3QgREVOU0lUWSA9IEdGTEJDb25zdGFudHMuTUFTU19ERU5TSVRZO1xyXG5cclxuY29uc3QgTUFTU19PUFRJT05TID0ge1xyXG4gIGNvbnN0YW50UmFkaXVzOiBHRkxCQ29uc3RhbnRzLkNPTlNUQU5UX1JBRElVUyxcclxuICBsZWZ0T2JqZWN0Qm91bmRhcnk6IEdGTEJDb25zdGFudHMuUFVMTF9QT1NJVElPTl9SQU5HRS5taW4sXHJcbiAgcmlnaHRPYmplY3RCb3VuZGFyeTogR0ZMQkNvbnN0YW50cy5QVUxMX1BPU0lUSU9OX1JBTkdFLm1heFxyXG59O1xyXG5cclxuY2xhc3MgR0ZMQk1vZGVsIGV4dGVuZHMgSVNMQ01vZGVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgLy8gVGhlIFByb3BlcnRpZXMgbmVlZCB0byBiZSBwYXNzZWQgdG8gdGhlIE1hc3MgY29uc3RydWN0b3JzLCBzbyBzdG9yZSBhcyBsb2NhbCB2YXJpYWJsZXMgZm9yIG5vdy5cclxuICAgIGNvbnN0IGNvbnN0YW50UmFkaXVzUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjb25zdGFudFJhZGl1c1Byb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gUHJvcGVydHkgZHJpdmluZyB0aGUgXCJzaG93IGRpc3RhbmNlXCIgY2hlY2tib3hcclxuICAgIGNvbnN0IHNob3dEaXN0YW5jZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzaG93RGlzdGFuY2VQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IG1hc3MxID0gbmV3IE1hc3MoIElOSVRJQUxfVkFMVUVfMSwgSU5JVElBTF9QT1RJU0lPTl8xLCBWQUxVRV9SQU5HRSwgREVOU0lUWSxcclxuICAgICAgY29uc3RhbnRSYWRpdXNQcm9wZXJ0eSwgbmV3IENvbG9yKCAnIzAwZicgKSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21hc3MxJyApLCBNQVNTX09QVElPTlNcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgbWFzczIgPSBuZXcgTWFzcyggSU5JVElBTF9WQUxVRV8yLCBJTklUSUFMX1BPVElTSU9OXzIsIFZBTFVFX1JBTkdFLCBERU5TSVRZLFxyXG4gICAgICBjb25zdGFudFJhZGl1c1Byb3BlcnR5LCBuZXcgQ29sb3IoICcjZjAwJyApLFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbWFzczInICksIE1BU1NfT1BUSU9OU1xyXG4gICAgKTtcclxuXHJcbiAgICBzdXBlciggUGh5c2ljYWxDb25zdGFudHMuR1JBVklUQVRJT05BTF9DT05TVEFOVCwgbWFzczEsIG1hc3MyLCBHRkxCQ29uc3RhbnRzLlBVTExfUE9TSVRJT05fUkFOR0UsIHRhbmRlbSwge1xyXG4gICAgICBzbmFwT2JqZWN0c1RvTmVhcmVzdDogR0ZMQkNvbnN0YW50cy5NQVNTX1BPU0lUSU9OX0RFTFRBLFxyXG4gICAgICBtaW5TZXBhcmF0aW9uQmV0d2Vlbk9iamVjdHM6IEdGTEJDb25zdGFudHMuTUlOX0RJU1RBTkNFX0JFVFdFRU5fTUFTU0VTXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5jb25zdGFudFJhZGl1c1Byb3BlcnR5ID0gY29uc3RhbnRSYWRpdXNQcm9wZXJ0eTtcclxuICAgIHRoaXMuc2hvd0Rpc3RhbmNlUHJvcGVydHkgPSBzaG93RGlzdGFuY2VQcm9wZXJ0eTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIC0gdHJ1ZSB3aGVuIGEgcmVzZXQgaXMgaW4gcHJvZ3Jlc3NcclxuICAgIHRoaXMucmVzZXRJblByb2dyZXNzUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdyZXNldEluUHJvZ3Jlc3NQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXQgdGhlIEdGTEJNb2RlbC5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnJlc2V0SW5Qcm9ncmVzc1Byb3BlcnR5LnNldCggdHJ1ZSApO1xyXG4gICAgdGhpcy5jb25zdGFudFJhZGl1c1Byb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnNob3dEaXN0YW5jZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy5yZXNldEluUHJvZ3Jlc3NQcm9wZXJ0eS5zZXQoIGZhbHNlICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmF2aXR5Rm9yY2VMYWJCYXNpY3MucmVnaXN0ZXIoICdHRkxCTW9kZWwnLCBHRkxCTW9kZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgR0ZMQk1vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0scUNBQXFDO0FBQ2pFLE9BQU9DLElBQUksTUFBTSw2Q0FBNkM7QUFDOUQsT0FBT0MsU0FBUyxNQUFNLDBEQUEwRDtBQUNoRixPQUFPQyxpQkFBaUIsTUFBTSw0Q0FBNEM7QUFDMUUsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2Qjs7QUFFL0Q7QUFDQSxNQUFNQyxlQUFlLEdBQUcsQ0FBQyxHQUFHRixhQUFhLENBQUNHLGtCQUFrQjtBQUM1RCxNQUFNQyxlQUFlLEdBQUcsQ0FBQyxHQUFHSixhQUFhLENBQUNHLGtCQUFrQjtBQUU1RCxNQUFNRSxrQkFBa0IsR0FBRyxDQUFDLElBQUk7QUFDaEMsTUFBTUMsa0JBQWtCLEdBQUcsSUFBSTtBQUUvQixNQUFNQyxXQUFXLEdBQUdQLGFBQWEsQ0FBQ1EsVUFBVTtBQUM1QyxNQUFNQyxPQUFPLEdBQUdULGFBQWEsQ0FBQ1UsWUFB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