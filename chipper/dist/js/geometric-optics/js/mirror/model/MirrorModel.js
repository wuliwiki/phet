// Copyright 2021-2023, University of Colorado Boulder

/**
 * MirrorModel is the model for the 'Mirror' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import GOModel from '../../common/model/GOModel.js';
import geometricOptics from '../../geometricOptics.js';
import Mirror from './Mirror.js';
import OpticalObjectChoice from '../../common/model/OpticalObjectChoice.js';
import optionize from '../../../../phet-core/js/optionize.js';
import GOQueryParameters from '../../common/GOQueryParameters.js';
export default class MirrorModel extends GOModel {
  constructor(providedOptions) {
    // See https://github.com/phetsims/geometric-optics/issues/397
    let opticalObjectChoices;
    if (GOQueryParameters.scene === 'framed') {
      opticalObjectChoices = [OpticalObjectChoice.PENCIL];
    } else if (GOQueryParameters.scene === 'arrow') {
      opticalObjectChoices = [OpticalObjectChoice.ARROW];
    } else {
      opticalObjectChoices = [OpticalObjectChoice.PENCIL, OpticalObjectChoice.PENGUIN, OpticalObjectChoice.STAR, OpticalObjectChoice.ARROW];
    }
    const options = optionize()({
      // GOModelOptions
      opticalObjectChoices: opticalObjectChoices,
      arrowObject1Position: new Vector2(-150, 60),
      arrowObject2Position: new Vector2(-165, 30),
      framedObjectPosition: providedOptions.isBasicsVersion ? new Vector2(-170, 27) :
      // empirically set so that it is vertically centered on the optical axis
      new Vector2(-150, 72.5) // empirically set so that it appears to sit on the optical axis
    }, providedOptions);
    assert && assert(!options.opticalObjectChoices.includes(OpticalObjectChoice.LIGHT), 'Mirror screen does not support Light as an optical object choice');
    const mirror = new Mirror({
      isBasicsVersion: options.isBasicsVersion,
      tandem: options.tandem.createTandem('mirror')
    });
    super(mirror, options);
    this.mirror = mirror;
  }
  reset() {
    super.reset();
    this.mirror.reset();
  }
}
geometricOptics.register('MirrorModel', MirrorModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiR09Nb2RlbCIsImdlb21ldHJpY09wdGljcyIsIk1pcnJvciIsIk9wdGljYWxPYmplY3RDaG9pY2UiLCJvcHRpb25pemUiLCJHT1F1ZXJ5UGFyYW1ldGVycyIsIk1pcnJvck1vZGVsIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpY2FsT2JqZWN0Q2hvaWNlcyIsInNjZW5lIiwiUEVOQ0lMIiwiQVJST1ciLCJQRU5HVUlOIiwiU1RBUiIsIm9wdGlvbnMiLCJhcnJvd09iamVjdDFQb3NpdGlvbiIsImFycm93T2JqZWN0MlBvc2l0aW9uIiwiZnJhbWVkT2JqZWN0UG9zaXRpb24iLCJpc0Jhc2ljc1ZlcnNpb24iLCJhc3NlcnQiLCJpbmNsdWRlcyIsIkxJR0hUIiwibWlycm9yIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1pcnJvck1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1pcnJvck1vZGVsIGlzIHRoZSBtb2RlbCBmb3IgdGhlICdNaXJyb3InIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBHT01vZGVsLCB7IEdPTW9kZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0dPTW9kZWwuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBNaXJyb3IgZnJvbSAnLi9NaXJyb3IuanMnO1xyXG5pbXBvcnQgT3B0aWNhbE9iamVjdENob2ljZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvT3B0aWNhbE9iamVjdENob2ljZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IEdPU2ltT3B0aW9ucyB9IGZyb20gJy4uLy4uL0dPU2ltLmpzJztcclxuaW1wb3J0IEdPUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL2NvbW1vbi9HT1F1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gUGlja1JlcXVpcmVkPEdPU2ltT3B0aW9ucywgJ2lzQmFzaWNzVmVyc2lvbic+O1xyXG5cclxudHlwZSBNaXJyb3JNb2RlbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxHT01vZGVsT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWlycm9yTW9kZWwgZXh0ZW5kcyBHT01vZGVsIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IG1pcnJvcjogTWlycm9yO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogTWlycm9yTW9kZWxPcHRpb25zICkge1xyXG5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ2VvbWV0cmljLW9wdGljcy9pc3N1ZXMvMzk3XHJcbiAgICBsZXQgb3B0aWNhbE9iamVjdENob2ljZXM7XHJcbiAgICBpZiAoIEdPUXVlcnlQYXJhbWV0ZXJzLnNjZW5lID09PSAnZnJhbWVkJyApIHtcclxuICAgICAgb3B0aWNhbE9iamVjdENob2ljZXMgPSBbIE9wdGljYWxPYmplY3RDaG9pY2UuUEVOQ0lMIF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggR09RdWVyeVBhcmFtZXRlcnMuc2NlbmUgPT09ICdhcnJvdycgKSB7XHJcbiAgICAgIG9wdGljYWxPYmplY3RDaG9pY2VzID0gWyBPcHRpY2FsT2JqZWN0Q2hvaWNlLkFSUk9XIF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgb3B0aWNhbE9iamVjdENob2ljZXMgPSBbXHJcbiAgICAgICAgT3B0aWNhbE9iamVjdENob2ljZS5QRU5DSUwsXHJcbiAgICAgICAgT3B0aWNhbE9iamVjdENob2ljZS5QRU5HVUlOLFxyXG4gICAgICAgIE9wdGljYWxPYmplY3RDaG9pY2UuU1RBUixcclxuICAgICAgICBPcHRpY2FsT2JqZWN0Q2hvaWNlLkFSUk9XXHJcbiAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxNaXJyb3JNb2RlbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBHT01vZGVsT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gR09Nb2RlbE9wdGlvbnNcclxuICAgICAgb3B0aWNhbE9iamVjdENob2ljZXM6IG9wdGljYWxPYmplY3RDaG9pY2VzLFxyXG4gICAgICBhcnJvd09iamVjdDFQb3NpdGlvbjogbmV3IFZlY3RvcjIoIC0xNTAsIDYwICksXHJcbiAgICAgIGFycm93T2JqZWN0MlBvc2l0aW9uOiBuZXcgVmVjdG9yMiggLTE2NSwgMzAgKSxcclxuICAgICAgZnJhbWVkT2JqZWN0UG9zaXRpb246ICggcHJvdmlkZWRPcHRpb25zLmlzQmFzaWNzVmVyc2lvbiApID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKCAtMTcwLCAyNyApIDogLy8gZW1waXJpY2FsbHkgc2V0IHNvIHRoYXQgaXQgaXMgdmVydGljYWxseSBjZW50ZXJlZCBvbiB0aGUgb3B0aWNhbCBheGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMiggLTE1MCwgNzIuNSApIC8vIGVtcGlyaWNhbGx5IHNldCBzbyB0aGF0IGl0IGFwcGVhcnMgdG8gc2l0IG9uIHRoZSBvcHRpY2FsIGF4aXNcclxuXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5vcHRpY2FsT2JqZWN0Q2hvaWNlcy5pbmNsdWRlcyggT3B0aWNhbE9iamVjdENob2ljZS5MSUdIVCApLFxyXG4gICAgICAnTWlycm9yIHNjcmVlbiBkb2VzIG5vdCBzdXBwb3J0IExpZ2h0IGFzIGFuIG9wdGljYWwgb2JqZWN0IGNob2ljZScgKTtcclxuXHJcbiAgICBjb25zdCBtaXJyb3IgPSBuZXcgTWlycm9yKCB7XHJcbiAgICAgIGlzQmFzaWNzVmVyc2lvbjogb3B0aW9ucy5pc0Jhc2ljc1ZlcnNpb24sXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbWlycm9yJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIG1pcnJvciwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubWlycm9yID0gbWlycm9yO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICAgIHRoaXMubWlycm9yLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW9tZXRyaWNPcHRpY3MucmVnaXN0ZXIoICdNaXJyb3JNb2RlbCcsIE1pcnJvck1vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsT0FBTyxNQUEwQiwrQkFBK0I7QUFDdkUsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxtQkFBbUIsTUFBTSwyQ0FBMkM7QUFDM0UsT0FBT0MsU0FBUyxNQUFNLHVDQUF1QztBQUc3RCxPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFNakUsZUFBZSxNQUFNQyxXQUFXLFNBQVNOLE9BQU8sQ0FBQztFQUl4Q08sV0FBV0EsQ0FBRUMsZUFBbUMsRUFBRztJQUV4RDtJQUNBLElBQUlDLG9CQUFvQjtJQUN4QixJQUFLSixpQkFBaUIsQ0FBQ0ssS0FBSyxLQUFLLFFBQVEsRUFBRztNQUMxQ0Qsb0JBQW9CLEdBQUcsQ0FBRU4sbUJBQW1CLENBQUNRLE1BQU0sQ0FBRTtJQUN2RCxDQUFDLE1BQ0ksSUFBS04saUJBQWlCLENBQUNLLEtBQUssS0FBSyxPQUFPLEVBQUc7TUFDOUNELG9CQUFvQixHQUFHLENBQUVOLG1CQUFtQixDQUFDUyxLQUFLLENBQUU7SUFDdEQsQ0FBQyxNQUNJO01BQ0hILG9CQUFvQixHQUFHLENBQ3JCTixtQkFBbUIsQ0FBQ1EsTUFBTSxFQUMxQlIsbUJBQW1CLENBQUNVLE9BQU8sRUFDM0JWLG1CQUFtQixDQUFDVyxJQUFJLEVBQ3hCWCxtQkFBbUIsQ0FBQ1MsS0FBSyxDQUMxQjtJQUNIO0lBRUEsTUFBTUcsT0FBTyxHQUFHWCxTQUFTLENBQWtELENBQUMsQ0FBRTtNQUU1RTtNQUNBSyxvQkFBb0IsRUFBRUEsb0JBQW9CO01BQzFDTyxvQkFBb0IsRUFBRSxJQUFJakIsT0FBTyxDQUFFLENBQUMsR0FBRyxFQUFFLEVBQUcsQ0FBQztNQUM3Q2tCLG9CQUFvQixFQUFFLElBQUlsQixPQUFPLENBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRyxDQUFDO01BQzdDbUIsb0JBQW9CLEVBQUlWLGVBQWUsQ0FBQ1csZUFBZSxHQUNqQyxJQUFJcEIsT0FBTyxDQUFFLENBQUMsR0FBRyxFQUFFLEVBQUcsQ0FBQztNQUFHO01BQzFCLElBQUlBLE9BQU8sQ0FBRSxDQUFDLEdBQUcsRUFBRSxJQUFLLENBQUMsQ0FBQztJQUVsRCxDQUFDLEVBQUVTLGVBQWdCLENBQUM7SUFFcEJZLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNMLE9BQU8sQ0FBQ04sb0JBQW9CLENBQUNZLFFBQVEsQ0FBRWxCLG1CQUFtQixDQUFDbUIsS0FBTSxDQUFDLEVBQ25GLGtFQUFtRSxDQUFDO0lBRXRFLE1BQU1DLE1BQU0sR0FBRyxJQUFJckIsTUFBTSxDQUFFO01BQ3pCaUIsZUFBZSxFQUFFSixPQUFPLENBQUNJLGVBQWU7TUFDeENLLE1BQU0sRUFBRVQsT0FBTyxDQUFDUyxNQUFNLENBQUNDLFlBQVksQ0FBRSxRQUFTO0lBQ2hELENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRUYsTUFBTSxFQUFFUixPQUFRLENBQUM7SUFFeEIsSUFBSSxDQUFDUSxNQUFNLEdBQUdBLE1BQU07RUFDdEI7RUFFZ0JHLEtBQUtBLENBQUEsRUFBUztJQUM1QixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBQ2IsSUFBSSxDQUFDSCxNQUFNLENBQUNHLEtBQUssQ0FBQyxDQUFDO0VBQ3JCO0FBQ0Y7QUFFQXpCLGVBQWUsQ0FBQzBCLFFBQVEsQ0FBRSxhQUFhLEVBQUVyQixXQUFZLENBQUMifQ==