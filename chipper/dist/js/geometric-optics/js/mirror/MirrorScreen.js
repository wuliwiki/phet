// Copyright 2021-2023, University of Colorado Boulder

/**
 * MirrorScreen is the 'Mirror' screen.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import GOColors from '../common/GOColors.js';
import geometricOptics from '../geometricOptics.js';
import GeometricOpticsStrings from '../GeometricOpticsStrings.js';
import MirrorModel from './model/MirrorModel.js';
import MirrorNode from './view/MirrorNode.js';
import MirrorScreenView from './view/MirrorScreenView.js';
import optionize from '../../../phet-core/js/optionize.js';
export default class MirrorScreen extends Screen {
  constructor(providedOptions) {
    const options = optionize()({
      // Screen options
      name: GeometricOpticsStrings.screen.mirrorStringProperty,
      homeScreenIcon: createScreenIcon(providedOptions.isBasicsVersion ? 'flat' : 'concave'),
      backgroundColorProperty: GOColors.screenBackgroundColorProperty
    }, providedOptions);
    super(() => new MirrorModel({
      isBasicsVersion: providedOptions.isBasicsVersion,
      tandem: options.tandem.createTandem('model')
    }), model => new MirrorScreenView(model, {
      isBasicsVersion: providedOptions.isBasicsVersion,
      tandem: options.tandem.createTandem('view')
    }), options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
function createScreenIcon(opticSurfaceType) {
  return new ScreenIcon(MirrorNode.createIconNode(opticSurfaceType), {
    fill: GOColors.screenBackgroundColorProperty
  });
}
geometricOptics.register('MirrorScreen', MirrorScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiR09Db2xvcnMiLCJnZW9tZXRyaWNPcHRpY3MiLCJHZW9tZXRyaWNPcHRpY3NTdHJpbmdzIiwiTWlycm9yTW9kZWwiLCJNaXJyb3JOb2RlIiwiTWlycm9yU2NyZWVuVmlldyIsIm9wdGlvbml6ZSIsIk1pcnJvclNjcmVlbiIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIm5hbWUiLCJzY3JlZW4iLCJtaXJyb3JTdHJpbmdQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlU2NyZWVuSWNvbiIsImlzQmFzaWNzVmVyc2lvbiIsImJhY2tncm91bmRDb2xvclByb3BlcnR5Iiwic2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsImRpc3Bvc2UiLCJhc3NlcnQiLCJvcHRpY1N1cmZhY2VUeXBlIiwiY3JlYXRlSWNvbk5vZGUiLCJmaWxsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNaXJyb3JTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWlycm9yU2NyZWVuIGlzIHRoZSAnTWlycm9yJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTY3JlZW4sIHsgU2NyZWVuT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgR09Db2xvcnMgZnJvbSAnLi4vY29tbW9uL0dPQ29sb3JzLmpzJztcclxuaW1wb3J0IGdlb21ldHJpY09wdGljcyBmcm9tICcuLi9nZW9tZXRyaWNPcHRpY3MuanMnO1xyXG5pbXBvcnQgR2VvbWV0cmljT3B0aWNzU3RyaW5ncyBmcm9tICcuLi9HZW9tZXRyaWNPcHRpY3NTdHJpbmdzLmpzJztcclxuaW1wb3J0IE1pcnJvck1vZGVsIGZyb20gJy4vbW9kZWwvTWlycm9yTW9kZWwuanMnO1xyXG5pbXBvcnQgTWlycm9yTm9kZSBmcm9tICcuL3ZpZXcvTWlycm9yTm9kZS5qcyc7XHJcbmltcG9ydCBNaXJyb3JTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9NaXJyb3JTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IHsgT3B0aWNTdXJmYWNlVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9tb2RlbC9PcHRpY1N1cmZhY2VUeXBlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgR09TaW1PcHRpb25zIH0gZnJvbSAnLi4vR09TaW0uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IFBpY2tSZXF1aXJlZDxHT1NpbU9wdGlvbnMsICdpc0Jhc2ljc1ZlcnNpb24nPjtcclxuXHJcbnR5cGUgTWlycm9yU2NyZWVuT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFNjcmVlbk9wdGlvbnMsICd0YW5kZW0nIHwgJ2NyZWF0ZUtleWJvYXJkSGVscE5vZGUnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pcnJvclNjcmVlbiBleHRlbmRzIFNjcmVlbjxNaXJyb3JNb2RlbCwgTWlycm9yU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogTWlycm9yU2NyZWVuT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE1pcnJvclNjcmVlbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBTY3JlZW5PcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTY3JlZW4gb3B0aW9uc1xyXG4gICAgICBuYW1lOiBHZW9tZXRyaWNPcHRpY3NTdHJpbmdzLnNjcmVlbi5taXJyb3JTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IGNyZWF0ZVNjcmVlbkljb24oIHByb3ZpZGVkT3B0aW9ucy5pc0Jhc2ljc1ZlcnNpb24gPyAnZmxhdCcgOiAnY29uY2F2ZScgKSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IEdPQ29sb3JzLnNjcmVlbkJhY2tncm91bmRDb2xvclByb3BlcnR5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IE1pcnJvck1vZGVsKCB7XHJcbiAgICAgICAgaXNCYXNpY3NWZXJzaW9uOiBwcm92aWRlZE9wdGlvbnMuaXNCYXNpY3NWZXJzaW9uLFxyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnIClcclxuICAgICAgfSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgTWlycm9yU2NyZWVuVmlldyggbW9kZWwsIHtcclxuICAgICAgICBpc0Jhc2ljc1ZlcnNpb246IHByb3ZpZGVkT3B0aW9ucy5pc0Jhc2ljc1ZlcnNpb24sXHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApXHJcbiAgICAgIH0gKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTY3JlZW5JY29uKCBvcHRpY1N1cmZhY2VUeXBlOiBPcHRpY1N1cmZhY2VUeXBlICk6IFNjcmVlbkljb24ge1xyXG4gIHJldHVybiBuZXcgU2NyZWVuSWNvbiggTWlycm9yTm9kZS5jcmVhdGVJY29uTm9kZSggb3B0aWNTdXJmYWNlVHlwZSApLCB7XHJcbiAgICBmaWxsOiBHT0NvbG9ycy5zY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eVxyXG4gIH0gKTtcclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnTWlycm9yU2NyZWVuJywgTWlycm9yU2NyZWVuICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUF5Qiw2QkFBNkI7QUFDbkUsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxRQUFRLE1BQU0sdUJBQXVCO0FBQzVDLE9BQU9DLGVBQWUsTUFBTSx1QkFBdUI7QUFDbkQsT0FBT0Msc0JBQXNCLE1BQU0sOEJBQThCO0FBQ2pFLE9BQU9DLFdBQVcsTUFBTSx3QkFBd0I7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLHNCQUFzQjtBQUM3QyxPQUFPQyxnQkFBZ0IsTUFBTSw0QkFBNEI7QUFFekQsT0FBT0MsU0FBUyxNQUFNLG9DQUFvQztBQVExRCxlQUFlLE1BQU1DLFlBQVksU0FBU1QsTUFBTSxDQUFnQztFQUV2RVUsV0FBV0EsQ0FBRUMsZUFBb0MsRUFBRztJQUV6RCxNQUFNQyxPQUFPLEdBQUdKLFNBQVMsQ0FBa0QsQ0FBQyxDQUFFO01BRTVFO01BQ0FLLElBQUksRUFBRVQsc0JBQXNCLENBQUNVLE1BQU0sQ0FBQ0Msb0JBQW9CO01BQ3hEQyxjQUFjLEVBQUVDLGdCQUFnQixDQUFFTixlQUFlLENBQUNPLGVBQWUsR0FBRyxNQUFNLEdBQUcsU0FBVSxDQUFDO01BQ3hGQyx1QkFBdUIsRUFBRWpCLFFBQVEsQ0FBQ2tCO0lBQ3BDLENBQUMsRUFBRVQsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQ0gsTUFBTSxJQUFJTixXQUFXLENBQUU7TUFDckJhLGVBQWUsRUFBRVAsZUFBZSxDQUFDTyxlQUFlO01BQ2hERyxNQUFNLEVBQUVULE9BQU8sQ0FBQ1MsTUFBTSxDQUFDQyxZQUFZLENBQUUsT0FBUTtJQUMvQyxDQUFFLENBQUMsRUFDSEMsS0FBSyxJQUFJLElBQUloQixnQkFBZ0IsQ0FBRWdCLEtBQUssRUFBRTtNQUNwQ0wsZUFBZSxFQUFFUCxlQUFlLENBQUNPLGVBQWU7TUFDaERHLE1BQU0sRUFBRVQsT0FBTyxDQUFDUyxNQUFNLENBQUNDLFlBQVksQ0FBRSxNQUFPO0lBQzlDLENBQUUsQ0FBQyxFQUNIVixPQUNGLENBQUM7RUFDSDtFQUVnQlksT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUEsU0FBU1AsZ0JBQWdCQSxDQUFFUyxnQkFBa0MsRUFBZTtFQUMxRSxPQUFPLElBQUl6QixVQUFVLENBQUVLLFVBQVUsQ0FBQ3FCLGNBQWMsQ0FBRUQsZ0JBQWlCLENBQUMsRUFBRTtJQUNwRUUsSUFBSSxFQUFFMUIsUUFBUSxDQUFDa0I7RUFDakIsQ0FBRSxDQUFDO0FBQ0w7QUFFQWpCLGVBQWUsQ0FBQzBCLFFBQVEsQ0FBRSxjQUFjLEVBQUVwQixZQUFhLENBQUMifQ==