// Copyright 2021-2023, University of Colorado Boulder

/**
 * LightRaysNode is the base class for Nodes that render light rays.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Martin Veillette
 */

import { Line, Node } from '../../../../scenery/js/imports.js';
import geometricOptics from '../../geometricOptics.js';
export default class LightRaysNode extends Node {
  /**
   * @param lightRays - model element
   * @param update - called when LightRays.raysProcessedEmitter fires
   * @param providedOptions
   */
  constructor(lightRays, update, providedOptions) {
    super(providedOptions);

    // Update this Node when the model tells us that it's time to update.
    lightRays.raysProcessedEmitter.addListener(() => update(this));
    update(this);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Converts LightRaySegment[] (model) to scenery Line[] (view).
   * @param segments
   * @param modelViewTransform
   * @param lineOptions - options to Line
   */
  static segmentsToLines(segments, modelViewTransform, lineOptions) {
    // When attempting to render the rays as a single phet.scenery.Path, we were seeing incorrect closed-path triangles
    // being rendered. We had to resort to a phet.scenery.Line per segment to make the problem go away.
    // See https://github.com/phetsims/geometric-optics/issues/209
    return segments.map(segment => {
      const viewStartPoint = modelViewTransform.modelToViewPosition(segment.startPoint);
      const viewEndPoint = modelViewTransform.modelToViewPosition(segment.endPoint);
      return new Line(viewStartPoint, viewEndPoint, lineOptions);
    });
  }
}
geometricOptics.register('LightRaysNode', LightRaysNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lIiwiTm9kZSIsImdlb21ldHJpY09wdGljcyIsIkxpZ2h0UmF5c05vZGUiLCJjb25zdHJ1Y3RvciIsImxpZ2h0UmF5cyIsInVwZGF0ZSIsInByb3ZpZGVkT3B0aW9ucyIsInJheXNQcm9jZXNzZWRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJkaXNwb3NlIiwiYXNzZXJ0Iiwic2VnbWVudHNUb0xpbmVzIiwic2VnbWVudHMiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJsaW5lT3B0aW9ucyIsIm1hcCIsInNlZ21lbnQiLCJ2aWV3U3RhcnRQb2ludCIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJzdGFydFBvaW50Iiwidmlld0VuZFBvaW50IiwiZW5kUG9pbnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxpZ2h0UmF5c05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTGlnaHRSYXlzTm9kZSBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgTm9kZXMgdGhhdCByZW5kZXIgbGlnaHQgcmF5cy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBMaW5lT3B0aW9ucywgTm9kZSwgTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCB7IExpZ2h0UmF5U2VnbWVudCB9IGZyb20gJy4uL21vZGVsL0xpZ2h0UmF5LmpzJztcclxuaW1wb3J0IExpZ2h0UmF5cyBmcm9tICcuLi9tb2RlbC9MaWdodFJheXMuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5cclxuZXhwb3J0IHR5cGUgTGlnaHRSYXlzTm9kZU9wdGlvbnMgPSBQaWNrT3B0aW9uYWw8Tm9kZU9wdGlvbnMsICd2aXNpYmxlUHJvcGVydHknPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpZ2h0UmF5c05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGxpZ2h0UmF5cyAtIG1vZGVsIGVsZW1lbnRcclxuICAgKiBAcGFyYW0gdXBkYXRlIC0gY2FsbGVkIHdoZW4gTGlnaHRSYXlzLnJheXNQcm9jZXNzZWRFbWl0dGVyIGZpcmVzXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvciggbGlnaHRSYXlzOiBMaWdodFJheXMsIHVwZGF0ZTogKCB0aGlzTm9kZTogTm9kZSApID0+IHZvaWQsIHByb3ZpZGVkT3B0aW9uczogTGlnaHRSYXlzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgc3VwZXIoIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGlzIE5vZGUgd2hlbiB0aGUgbW9kZWwgdGVsbHMgdXMgdGhhdCBpdCdzIHRpbWUgdG8gdXBkYXRlLlxyXG4gICAgbGlnaHRSYXlzLnJheXNQcm9jZXNzZWRFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiB1cGRhdGUoIHRoaXMgKSApO1xyXG5cclxuICAgIHVwZGF0ZSggdGhpcyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnRzIExpZ2h0UmF5U2VnbWVudFtdIChtb2RlbCkgdG8gc2NlbmVyeSBMaW5lW10gKHZpZXcpLlxyXG4gICAqIEBwYXJhbSBzZWdtZW50c1xyXG4gICAqIEBwYXJhbSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0gbGluZU9wdGlvbnMgLSBvcHRpb25zIHRvIExpbmVcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHNlZ21lbnRzVG9MaW5lcyggc2VnbWVudHM6IExpZ2h0UmF5U2VnbWVudFtdLCBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsIGxpbmVPcHRpb25zOiBMaW5lT3B0aW9ucyApOiBMaW5lW10ge1xyXG5cclxuICAgIC8vIFdoZW4gYXR0ZW1wdGluZyB0byByZW5kZXIgdGhlIHJheXMgYXMgYSBzaW5nbGUgcGhldC5zY2VuZXJ5LlBhdGgsIHdlIHdlcmUgc2VlaW5nIGluY29ycmVjdCBjbG9zZWQtcGF0aCB0cmlhbmdsZXNcclxuICAgIC8vIGJlaW5nIHJlbmRlcmVkLiBXZSBoYWQgdG8gcmVzb3J0IHRvIGEgcGhldC5zY2VuZXJ5LkxpbmUgcGVyIHNlZ21lbnQgdG8gbWFrZSB0aGUgcHJvYmxlbSBnbyBhd2F5LlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9nZW9tZXRyaWMtb3B0aWNzL2lzc3Vlcy8yMDlcclxuICAgIHJldHVybiBzZWdtZW50cy5tYXAoIHNlZ21lbnQgPT4ge1xyXG4gICAgICBjb25zdCB2aWV3U3RhcnRQb2ludCA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBzZWdtZW50LnN0YXJ0UG9pbnQgKTtcclxuICAgICAgY29uc3Qgdmlld0VuZFBvaW50ID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIHNlZ21lbnQuZW5kUG9pbnQgKTtcclxuICAgICAgcmV0dXJuIG5ldyBMaW5lKCB2aWV3U3RhcnRQb2ludCwgdmlld0VuZFBvaW50LCBsaW5lT3B0aW9ucyApO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnTGlnaHRSYXlzTm9kZScsIExpZ2h0UmF5c05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxTQUFTQSxJQUFJLEVBQWVDLElBQUksUUFBcUIsbUNBQW1DO0FBQ3hGLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFPdEQsZUFBZSxNQUFNQyxhQUFhLFNBQVNGLElBQUksQ0FBQztFQUU5QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1lHLFdBQVdBLENBQUVDLFNBQW9CLEVBQUVDLE1BQWtDLEVBQUVDLGVBQXFDLEVBQUc7SUFFdkgsS0FBSyxDQUFFQSxlQUFnQixDQUFDOztJQUV4QjtJQUNBRixTQUFTLENBQUNHLG9CQUFvQixDQUFDQyxXQUFXLENBQUUsTUFBTUgsTUFBTSxDQUFFLElBQUssQ0FBRSxDQUFDO0lBRWxFQSxNQUFNLENBQUUsSUFBSyxDQUFDO0VBQ2hCO0VBRWdCSSxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLE9BQWNFLGVBQWVBLENBQUVDLFFBQTJCLEVBQUVDLGtCQUF1QyxFQUFFQyxXQUF3QixFQUFXO0lBRXRJO0lBQ0E7SUFDQTtJQUNBLE9BQU9GLFFBQVEsQ0FBQ0csR0FBRyxDQUFFQyxPQUFPLElBQUk7TUFDOUIsTUFBTUMsY0FBYyxHQUFHSixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUVGLE9BQU8sQ0FBQ0csVUFBVyxDQUFDO01BQ25GLE1BQU1DLFlBQVksR0FBR1Asa0JBQWtCLENBQUNLLG1CQUFtQixDQUFFRixPQUFPLENBQUNLLFFBQVMsQ0FBQztNQUMvRSxPQUFPLElBQUl0QixJQUFJLENBQUVrQixjQUFjLEVBQUVHLFlBQVksRUFBRU4sV0FBWSxDQUFDO0lBQzlELENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWIsZUFBZSxDQUFDcUIsUUFBUSxDQUFFLGVBQWUsRUFBRXBCLGFBQWMsQ0FBQyJ9