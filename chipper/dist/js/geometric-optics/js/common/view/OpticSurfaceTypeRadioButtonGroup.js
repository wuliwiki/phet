// Copyright 2021-2023, University of Colorado Boulder

/**
 * OpticSurfaceTypeRadioButtonGroup is the radio button group for controlling the surface type of the optic.
 *
 * @author Sarah Chang (Swarthmore College)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import geometricOptics from '../../geometricOptics.js';
import GOColors from '../GOColors.js';
import Lens from '../../lens/model/Lens.js';
import MirrorNode from '../../mirror/view/MirrorNode.js';
import LensNode from '../../lens/view/LensNode.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class OpticSurfaceTypeRadioButtonGroup extends RectangularRadioButtonGroup {
  constructor(optic, providedOptions) {
    const options = optionize()({
      // RectangularRadioButtonGroupOptions
      visible: !providedOptions.isBasicsVersion,
      // not visible in the Basics version
      orientation: 'horizontal',
      spacing: 10,
      touchAreaXDilation: 4,
      touchAreaYDilation: 5,
      radioButtonOptions: {
        baseColor: GOColors.curveRadioButtonFillProperty,
        cornerRadius: 3,
        xMargin: 14,
        yMargin: 5,
        buttonAppearanceStrategyOptions: {
          selectedStroke: GOColors.curveRadioButtonSelectedStrokeProperty,
          deselectedStroke: GOColors.curveRadioButtonDeselectedStrokeProperty,
          deselectedLineWidth: 2,
          selectedLineWidth: 2
        }
      }
    }, providedOptions);

    // A radio button for each shape supported by the optic
    assert && assert(optic.opticSurfaceTypeProperty.validValues); // {OpticSurfaceType[]|undefined}
    const validValues = optic.opticSurfaceTypeProperty.validValues;
    const items = validValues.map(opticSurfaceType => {
      return {
        value: opticSurfaceType,
        createNode: tandem => optic instanceof Lens ? LensNode.createIconNode(opticSurfaceType) : MirrorNode.createIconNode(opticSurfaceType),
        tandemName: `${opticSurfaceType}RadioButton`
      };
    });
    super(optic.opticSurfaceTypeProperty, items, options);
  }
}
geometricOptics.register('OpticSurfaceTypeRadioButtonGroup', OpticSurfaceTypeRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAiLCJnZW9tZXRyaWNPcHRpY3MiLCJHT0NvbG9ycyIsIkxlbnMiLCJNaXJyb3JOb2RlIiwiTGVuc05vZGUiLCJvcHRpb25pemUiLCJPcHRpY1N1cmZhY2VUeXBlUmFkaW9CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwib3B0aWMiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidmlzaWJsZSIsImlzQmFzaWNzVmVyc2lvbiIsIm9yaWVudGF0aW9uIiwic3BhY2luZyIsInRvdWNoQXJlYVhEaWxhdGlvbiIsInRvdWNoQXJlYVlEaWxhdGlvbiIsInJhZGlvQnV0dG9uT3B0aW9ucyIsImJhc2VDb2xvciIsImN1cnZlUmFkaW9CdXR0b25GaWxsUHJvcGVydHkiLCJjb3JuZXJSYWRpdXMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneU9wdGlvbnMiLCJzZWxlY3RlZFN0cm9rZSIsImN1cnZlUmFkaW9CdXR0b25TZWxlY3RlZFN0cm9rZVByb3BlcnR5IiwiZGVzZWxlY3RlZFN0cm9rZSIsImN1cnZlUmFkaW9CdXR0b25EZXNlbGVjdGVkU3Ryb2tlUHJvcGVydHkiLCJkZXNlbGVjdGVkTGluZVdpZHRoIiwic2VsZWN0ZWRMaW5lV2lkdGgiLCJhc3NlcnQiLCJvcHRpY1N1cmZhY2VUeXBlUHJvcGVydHkiLCJ2YWxpZFZhbHVlcyIsIml0ZW1zIiwibWFwIiwib3B0aWNTdXJmYWNlVHlwZSIsInZhbHVlIiwiY3JlYXRlTm9kZSIsInRhbmRlbSIsImNyZWF0ZUljb25Ob2RlIiwidGFuZGVtTmFtZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiT3B0aWNTdXJmYWNlVHlwZVJhZGlvQnV0dG9uR3JvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT3B0aWNTdXJmYWNlVHlwZVJhZGlvQnV0dG9uR3JvdXAgaXMgdGhlIHJhZGlvIGJ1dHRvbiBncm91cCBmb3IgY29udHJvbGxpbmcgdGhlIHN1cmZhY2UgdHlwZSBvZiB0aGUgb3B0aWMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FyYWggQ2hhbmcgKFN3YXJ0aG1vcmUgQ29sbGVnZSlcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwLCB7IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBHT0NvbG9ycyBmcm9tICcuLi9HT0NvbG9ycy5qcyc7XHJcbmltcG9ydCBPcHRpYyBmcm9tICcuLi9tb2RlbC9PcHRpYy5qcyc7XHJcbmltcG9ydCB7IE9wdGljU3VyZmFjZVR5cGUgfSBmcm9tICcuLi9tb2RlbC9PcHRpY1N1cmZhY2VUeXBlLmpzJztcclxuaW1wb3J0IExlbnMgZnJvbSAnLi4vLi4vbGVucy9tb2RlbC9MZW5zLmpzJztcclxuaW1wb3J0IE1pcnJvck5vZGUgZnJvbSAnLi4vLi4vbWlycm9yL3ZpZXcvTWlycm9yTm9kZS5qcyc7XHJcbmltcG9ydCBMZW5zTm9kZSBmcm9tICcuLi8uLi9sZW5zL3ZpZXcvTGVuc05vZGUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCB7IEdPU2ltT3B0aW9ucyB9IGZyb20gJy4uLy4uL0dPU2ltLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBPcHRpY1NoYXBlUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmXHJcbiAgUGlja1JlcXVpcmVkPEdPU2ltT3B0aW9ucywgJ2lzQmFzaWNzVmVyc2lvbic+ICZcclxuICBQaWNrUmVxdWlyZWQ8UmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucywgJ3RhbmRlbSc+ICZcclxuICBOb2RlVHJhbnNsYXRpb25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3B0aWNTdXJmYWNlVHlwZVJhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXA8T3B0aWNTdXJmYWNlVHlwZT4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG9wdGljOiBPcHRpYywgcHJvdmlkZWRPcHRpb25zOiBPcHRpY1NoYXBlUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxPcHRpY1NoYXBlUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBPcHRpb25zXHJcbiAgICAgIHZpc2libGU6ICFwcm92aWRlZE9wdGlvbnMuaXNCYXNpY3NWZXJzaW9uLCAvLyBub3QgdmlzaWJsZSBpbiB0aGUgQmFzaWNzIHZlcnNpb25cclxuICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgc3BhY2luZzogMTAsXHJcbiAgICAgIHRvdWNoQXJlYVhEaWxhdGlvbjogNCxcclxuICAgICAgdG91Y2hBcmVhWURpbGF0aW9uOiA1LFxyXG4gICAgICByYWRpb0J1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBiYXNlQ29sb3I6IEdPQ29sb3JzLmN1cnZlUmFkaW9CdXR0b25GaWxsUHJvcGVydHksXHJcbiAgICAgICAgY29ybmVyUmFkaXVzOiAzLFxyXG4gICAgICAgIHhNYXJnaW46IDE0LFxyXG4gICAgICAgIHlNYXJnaW46IDUsXHJcbiAgICAgICAgYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9uczoge1xyXG4gICAgICAgICAgc2VsZWN0ZWRTdHJva2U6IEdPQ29sb3JzLmN1cnZlUmFkaW9CdXR0b25TZWxlY3RlZFN0cm9rZVByb3BlcnR5LFxyXG4gICAgICAgICAgZGVzZWxlY3RlZFN0cm9rZTogR09Db2xvcnMuY3VydmVSYWRpb0J1dHRvbkRlc2VsZWN0ZWRTdHJva2VQcm9wZXJ0eSxcclxuICAgICAgICAgIGRlc2VsZWN0ZWRMaW5lV2lkdGg6IDIsXHJcbiAgICAgICAgICBzZWxlY3RlZExpbmVXaWR0aDogMlxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gQSByYWRpbyBidXR0b24gZm9yIGVhY2ggc2hhcGUgc3VwcG9ydGVkIGJ5IHRoZSBvcHRpY1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aWMub3B0aWNTdXJmYWNlVHlwZVByb3BlcnR5LnZhbGlkVmFsdWVzICk7IC8vIHtPcHRpY1N1cmZhY2VUeXBlW118dW5kZWZpbmVkfVxyXG4gICAgY29uc3QgdmFsaWRWYWx1ZXMgPSBvcHRpYy5vcHRpY1N1cmZhY2VUeXBlUHJvcGVydHkudmFsaWRWYWx1ZXMhO1xyXG5cclxuICAgIGNvbnN0IGl0ZW1zID0gdmFsaWRWYWx1ZXMubWFwKFxyXG4gICAgICAoIG9wdGljU3VyZmFjZVR5cGU6IE9wdGljU3VyZmFjZVR5cGUgKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhbHVlOiBvcHRpY1N1cmZhY2VUeXBlLFxyXG4gICAgICAgICAgY3JlYXRlTm9kZTogKCB0YW5kZW06IFRhbmRlbSApID0+ICggb3B0aWMgaW5zdGFuY2VvZiBMZW5zICkgPyBMZW5zTm9kZS5jcmVhdGVJY29uTm9kZSggb3B0aWNTdXJmYWNlVHlwZSApIDogTWlycm9yTm9kZS5jcmVhdGVJY29uTm9kZSggb3B0aWNTdXJmYWNlVHlwZSApLFxyXG4gICAgICAgICAgdGFuZGVtTmFtZTogYCR7b3B0aWNTdXJmYWNlVHlwZX1SYWRpb0J1dHRvbmBcclxuICAgICAgICB9O1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGljLm9wdGljU3VyZmFjZVR5cGVQcm9wZXJ0eSwgaXRlbXMsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ09wdGljU3VyZmFjZVR5cGVSYWRpb0J1dHRvbkdyb3VwJywgT3B0aWNTdXJmYWNlVHlwZVJhZGlvQnV0dG9uR3JvdXAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSwyQkFBMkIsTUFBOEMsMkRBQTJEO0FBQzNJLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0MsUUFBUSxNQUFNLGdCQUFnQjtBQUdyQyxPQUFPQyxJQUFJLE1BQU0sMEJBQTBCO0FBQzNDLE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsT0FBT0MsUUFBUSxNQUFNLDZCQUE2QjtBQUVsRCxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQVluRixlQUFlLE1BQU1DLGdDQUFnQyxTQUFTUCwyQkFBMkIsQ0FBbUI7RUFFbkdRLFdBQVdBLENBQUVDLEtBQVksRUFBRUMsZUFBa0QsRUFBRztJQUVyRixNQUFNQyxPQUFPLEdBQUdMLFNBQVMsQ0FBcUYsQ0FBQyxDQUFFO01BRS9HO01BQ0FNLE9BQU8sRUFBRSxDQUFDRixlQUFlLENBQUNHLGVBQWU7TUFBRTtNQUMzQ0MsV0FBVyxFQUFFLFlBQVk7TUFDekJDLE9BQU8sRUFBRSxFQUFFO01BQ1hDLGtCQUFrQixFQUFFLENBQUM7TUFDckJDLGtCQUFrQixFQUFFLENBQUM7TUFDckJDLGtCQUFrQixFQUFFO1FBQ2xCQyxTQUFTLEVBQUVqQixRQUFRLENBQUNrQiw0QkFBNEI7UUFDaERDLFlBQVksRUFBRSxDQUFDO1FBQ2ZDLE9BQU8sRUFBRSxFQUFFO1FBQ1hDLE9BQU8sRUFBRSxDQUFDO1FBQ1ZDLCtCQUErQixFQUFFO1VBQy9CQyxjQUFjLEVBQUV2QixRQUFRLENBQUN3QixzQ0FBc0M7VUFDL0RDLGdCQUFnQixFQUFFekIsUUFBUSxDQUFDMEIsd0NBQXdDO1VBQ25FQyxtQkFBbUIsRUFBRSxDQUFDO1VBQ3RCQyxpQkFBaUIsRUFBRTtRQUNyQjtNQUNGO0lBQ0YsQ0FBQyxFQUFFcEIsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQXFCLE1BQU0sSUFBSUEsTUFBTSxDQUFFdEIsS0FBSyxDQUFDdUIsd0JBQXdCLENBQUNDLFdBQVksQ0FBQyxDQUFDLENBQUM7SUFDaEUsTUFBTUEsV0FBVyxHQUFHeEIsS0FBSyxDQUFDdUIsd0JBQXdCLENBQUNDLFdBQVk7SUFFL0QsTUFBTUMsS0FBSyxHQUFHRCxXQUFXLENBQUNFLEdBQUcsQ0FDekJDLGdCQUFrQyxJQUFNO01BQ3hDLE9BQU87UUFDTEMsS0FBSyxFQUFFRCxnQkFBZ0I7UUFDdkJFLFVBQVUsRUFBSUMsTUFBYyxJQUFROUIsS0FBSyxZQUFZTixJQUFJLEdBQUtFLFFBQVEsQ0FBQ21DLGNBQWMsQ0FBRUosZ0JBQWlCLENBQUMsR0FBR2hDLFVBQVUsQ0FBQ29DLGNBQWMsQ0FBRUosZ0JBQWlCLENBQUM7UUFDekpLLFVBQVUsRUFBRyxHQUFFTCxnQkFBaUI7TUFDbEMsQ0FBQztJQUNILENBQUUsQ0FBQztJQUVMLEtBQUssQ0FBRTNCLEtBQUssQ0FBQ3VCLHdCQUF3QixFQUFFRSxLQUFLLEVBQUV2QixPQUFRLENBQUM7RUFDekQ7QUFDRjtBQUVBVixlQUFlLENBQUN5QyxRQUFRLENBQUUsa0NBQWtDLEVBQUVuQyxnQ0FBaUMsQ0FBQyJ9