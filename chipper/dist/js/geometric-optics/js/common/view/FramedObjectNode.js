// Copyright 2021-2022, University of Colorado Boulder

/**
 * FramedObjectNode is the view of a framed object, an object in a picture frame, with 3D perspective.
 *
 * This class adds no additional functionality to its superclass, but is included for completeness and readability
 * of the type hierarchy.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import geometricOptics from '../../geometricOptics.js';
import HTMLImageElementObjectNode from './HTMLImageElementObjectNode.js';
export default class FramedObjectNode extends HTMLImageElementObjectNode {
  /**
   * @param framedObject - model element
   * @param sceneBoundsProperty - bounds for the scene, in model coordinates
   * @param opticPositionProperty - position of the optic
   * @param modelViewTransform
   * @param objectDragModeProperty - constrains how the object can be dragged
   * @param wasDraggedProperty - was this framed object dragged?
   * @param providedOptions
   */
  constructor(framedObject, sceneBoundsProperty, opticPositionProperty, modelViewTransform, objectDragModeProperty, wasDraggedProperty, providedOptions) {
    super(framedObject, sceneBoundsProperty, opticPositionProperty, modelViewTransform, objectDragModeProperty, wasDraggedProperty, providedOptions);
  }
}
geometricOptics.register('FramedObjectNode', FramedObjectNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW9tZXRyaWNPcHRpY3MiLCJIVE1MSW1hZ2VFbGVtZW50T2JqZWN0Tm9kZSIsIkZyYW1lZE9iamVjdE5vZGUiLCJjb25zdHJ1Y3RvciIsImZyYW1lZE9iamVjdCIsInNjZW5lQm91bmRzUHJvcGVydHkiLCJvcHRpY1Bvc2l0aW9uUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJvYmplY3REcmFnTW9kZVByb3BlcnR5Iiwid2FzRHJhZ2dlZFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGcmFtZWRPYmplY3ROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZyYW1lZE9iamVjdE5vZGUgaXMgdGhlIHZpZXcgb2YgYSBmcmFtZWQgb2JqZWN0LCBhbiBvYmplY3QgaW4gYSBwaWN0dXJlIGZyYW1lLCB3aXRoIDNEIHBlcnNwZWN0aXZlLlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIGFkZHMgbm8gYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IHRvIGl0cyBzdXBlcmNsYXNzLCBidXQgaXMgaW5jbHVkZWQgZm9yIGNvbXBsZXRlbmVzcyBhbmQgcmVhZGFiaWxpdHlcclxuICogb2YgdGhlIHR5cGUgaGllcmFyY2h5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBGcmFtZWRPYmplY3QgZnJvbSAnLi4vbW9kZWwvRnJhbWVkT2JqZWN0LmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBIVE1MSW1hZ2VFbGVtZW50T2JqZWN0Tm9kZSwgeyBIVE1MSW1hZ2VFbGVtZW50T2JqZWN0Tm9kZU9wdGlvbnMgfSBmcm9tICcuL0hUTUxJbWFnZUVsZW1lbnRPYmplY3ROb2RlLmpzJztcclxuaW1wb3J0IHsgT2JqZWN0RHJhZ01vZGUgfSBmcm9tICcuL09iamVjdERyYWdNb2RlLmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIEZyYW1lZE9iamVjdE5vZGVPcHRpb25zID0gSFRNTEltYWdlRWxlbWVudE9iamVjdE5vZGVPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJhbWVkT2JqZWN0Tm9kZSBleHRlbmRzIEhUTUxJbWFnZUVsZW1lbnRPYmplY3ROb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGZyYW1lZE9iamVjdCAtIG1vZGVsIGVsZW1lbnRcclxuICAgKiBAcGFyYW0gc2NlbmVCb3VuZHNQcm9wZXJ0eSAtIGJvdW5kcyBmb3IgdGhlIHNjZW5lLCBpbiBtb2RlbCBjb29yZGluYXRlc1xyXG4gICAqIEBwYXJhbSBvcHRpY1Bvc2l0aW9uUHJvcGVydHkgLSBwb3NpdGlvbiBvZiB0aGUgb3B0aWNcclxuICAgKiBAcGFyYW0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICogQHBhcmFtIG9iamVjdERyYWdNb2RlUHJvcGVydHkgLSBjb25zdHJhaW5zIGhvdyB0aGUgb2JqZWN0IGNhbiBiZSBkcmFnZ2VkXHJcbiAgICogQHBhcmFtIHdhc0RyYWdnZWRQcm9wZXJ0eSAtIHdhcyB0aGlzIGZyYW1lZCBvYmplY3QgZHJhZ2dlZD9cclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBmcmFtZWRPYmplY3Q6IEZyYW1lZE9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgIHNjZW5lQm91bmRzUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PEJvdW5kczI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aWNQb3NpdGlvblByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxWZWN0b3IyPixcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMixcclxuICAgICAgICAgICAgICAgICAgICAgIG9iamVjdERyYWdNb2RlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PE9iamVjdERyYWdNb2RlPixcclxuICAgICAgICAgICAgICAgICAgICAgIHdhc0RyYWdnZWRQcm9wZXJ0eTogVFByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBGcmFtZWRPYmplY3ROb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlciggZnJhbWVkT2JqZWN0LCBzY2VuZUJvdW5kc1Byb3BlcnR5LCBvcHRpY1Bvc2l0aW9uUHJvcGVydHksIG1vZGVsVmlld1RyYW5zZm9ybSwgb2JqZWN0RHJhZ01vZGVQcm9wZXJ0eSxcclxuICAgICAgd2FzRHJhZ2dlZFByb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ0ZyYW1lZE9iamVjdE5vZGUnLCBGcmFtZWRPYmplY3ROb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLGVBQWUsTUFBTSwwQkFBMEI7QUFJdEQsT0FBT0MsMEJBQTBCLE1BQTZDLGlDQUFpQztBQU0vRyxlQUFlLE1BQU1DLGdCQUFnQixTQUFTRCwwQkFBMEIsQ0FBQztFQUV2RTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0UsV0FBV0EsQ0FBRUMsWUFBMEIsRUFDMUJDLG1CQUErQyxFQUMvQ0MscUJBQWlELEVBQ2pEQyxrQkFBdUMsRUFDdkNDLHNCQUF5RCxFQUN6REMsa0JBQXNDLEVBQ3RDQyxlQUF3QyxFQUFHO0lBRTdELEtBQUssQ0FBRU4sWUFBWSxFQUFFQyxtQkFBbUIsRUFBRUMscUJBQXFCLEVBQUVDLGtCQUFrQixFQUFFQyxzQkFBc0IsRUFDekdDLGtCQUFrQixFQUFFQyxlQUFnQixDQUFDO0VBQ3pDO0FBQ0Y7QUFFQVYsZUFBZSxDQUFDVyxRQUFRLENBQUUsa0JBQWtCLEVBQUVULGdCQUFpQixDQUFDIn0=