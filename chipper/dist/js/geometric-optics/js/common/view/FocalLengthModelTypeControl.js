// Copyright 2022-2023, University of Colorado Boulder

/**
 * FocalLengthModelTypeControl is the control used to choose the focal-length model type, 'direct' or 'indirect'
 * in the Preferences dialog.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import GeometricOpticsStrings from '../../GeometricOpticsStrings.js';
import geometricOptics from '../../geometricOptics.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import PreferencesDialog from '../../../../joist/js/preferences/PreferencesDialog.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
export default class FocalLengthModelTypeControl extends VBox {
  /**
   * @param focalLengthModelTypeProperty - whether to set focal length directly or indirectly
   * @param providedOptions
   */
  constructor(focalLengthModelTypeProperty, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      spacing: 8,
      align: 'left',
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    }, providedOptions);
    super(options);
    const labelText = new Text(GeometricOpticsStrings.focalLengthControlStringProperty, {
      font: PreferencesDialog.CONTENT_FONT,
      tandem: options.tandem.createTandem('labelText')
    });
    const radioButtonGroup = new FocalLengthModelTypeRadioButtonGroup(focalLengthModelTypeProperty, {
      tandem: options.tandem.createTandem('radioButtonGroup')
    });
    this.children = [labelText, radioButtonGroup];
    this.addLinkedElement(focalLengthModelTypeProperty, {
      tandem: options.tandem.createTandem(focalLengthModelTypeProperty.tandem.name)
    });
    this.disposeFocalLengthModelTypeControl = () => {
      labelText.dispose();
      radioButtonGroup.dispose();
    };
  }
  dispose() {
    super.dispose();
    this.disposeFocalLengthModelTypeControl();
  }
}

/**
 * FocalLengthModelTypeRadioButtonGroup is the radio button group associated with this control.
 */

class FocalLengthModelTypeRadioButtonGroup extends VerticalAquaRadioButtonGroup {
  /**
   * @param focalLengthModelTypeProperty - whether to set focal length directly or indirectl
   * @param providedOptions
   */
  constructor(focalLengthModelTypeProperty, providedOptions) {
    const options = optionize()({
      // VerticalAquaRadioButtonGroupOptions
      spacing: 8,
      phetioVisiblePropertyInstrumented: false,
      radioButtonOptions: {
        phetioVisiblePropertyInstrumented: false
      }
    }, providedOptions);
    const items = [createItem('direct', GeometricOpticsStrings.radioButton.directStringProperty, options.tandem, 'directRadioButton'), createItem('indirect', GeometricOpticsStrings.radioButton.indirectStringProperty, options.tandem, 'indirectRadioButton')];
    super(focalLengthModelTypeProperty, items, options);
  }
}

/**
 * Creates an item for the radio button group.
 * @param value - value associated with the radio button
 * @param labelStringProperty - label that appears on the radio button
 * @param groupTandem - used to associate the item's tandem with the radio-button group
 * @param itemTandemName - used to create the item's tandem
 */
function createItem(value, labelStringProperty, groupTandem, itemTandemName) {
  return {
    value: value,
    createNode: tandem => new Text(labelStringProperty, {
      font: PreferencesDialog.CONTENT_FONT,
      maxWidth: 500,
      tandem: tandem.createTandem('labelText')
    }),
    tandemName: itemTandemName
  };
}
geometricOptics.register('FocalLengthModelTypeControl', FocalLengthModelTypeControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,