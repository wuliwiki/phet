// Copyright 2022, University of Colorado Boulder

/**
 * OpticalObjectLabelNode is the base class of labeling optical objects.
 * It can label them as simply 'Object', or it can number them like 'Object 1'.
 * Numbering is dynamic to support PhET-iO.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */
import LabelNode from './LabelNode.js';
import GeometricOpticsStrings from '../../../GeometricOpticsStrings.js';
import geometricOptics from '../../../geometricOptics.js';
import StringUtils from '../../../../../phetcommon/js/util/StringUtils.js';
import BooleanProperty from '../../../../../axon/js/BooleanProperty.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import DerivedProperty from '../../../../../axon/js/DerivedProperty.js';
import StringIO from '../../../../../tandem/js/types/StringIO.js';
export default class OpticalObjectLabelNode extends LabelNode {
  /**
   * @param objectNumber - each optical object has a unique integer, used to label it
   * @param labelPositionProperty - position of the label
   * @param zoomTransformProperty - model-view transform that the user controls by zooming in/out
   * @param providedOptions
   */
  constructor(objectNumber, labelPositionProperty, zoomTransformProperty, providedOptions) {
    const options = optionize()({
      isNumberedProperty: new BooleanProperty(true)
    }, providedOptions);
    const labelStringProperty = new DerivedProperty([options.isNumberedProperty, GeometricOpticsStrings.label.objectStringProperty, GeometricOpticsStrings.label.objectNStringProperty], (isNumbered, objectString, objectNString) => isNumbered ? StringUtils.fillIn(objectNString, {
      objectNumber: objectNumber
    }) : objectString, {
      tandem: options.tandem.createTandem('labelStringProperty'),
      phetioValueType: StringIO
    });
    super(labelStringProperty, labelPositionProperty, zoomTransformProperty, options);
  }
}
geometricOptics.register('OpticalObjectLabelNode', OpticalObjectLabelNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMYWJlbE5vZGUiLCJHZW9tZXRyaWNPcHRpY3NTdHJpbmdzIiwiZ2VvbWV0cmljT3B0aWNzIiwiU3RyaW5nVXRpbHMiLCJCb29sZWFuUHJvcGVydHkiLCJvcHRpb25pemUiLCJEZXJpdmVkUHJvcGVydHkiLCJTdHJpbmdJTyIsIk9wdGljYWxPYmplY3RMYWJlbE5vZGUiLCJjb25zdHJ1Y3RvciIsIm9iamVjdE51bWJlciIsImxhYmVsUG9zaXRpb25Qcm9wZXJ0eSIsInpvb21UcmFuc2Zvcm1Qcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJpc051bWJlcmVkUHJvcGVydHkiLCJsYWJlbFN0cmluZ1Byb3BlcnR5IiwibGFiZWwiLCJvYmplY3RTdHJpbmdQcm9wZXJ0eSIsIm9iamVjdE5TdHJpbmdQcm9wZXJ0eSIsImlzTnVtYmVyZWQiLCJvYmplY3RTdHJpbmciLCJvYmplY3ROU3RyaW5nIiwiZmlsbEluIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvVmFsdWVUeXBlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPcHRpY2FsT2JqZWN0TGFiZWxOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBPcHRpY2FsT2JqZWN0TGFiZWxOb2RlIGlzIHRoZSBiYXNlIGNsYXNzIG9mIGxhYmVsaW5nIG9wdGljYWwgb2JqZWN0cy5cclxuICogSXQgY2FuIGxhYmVsIHRoZW0gYXMgc2ltcGx5ICdPYmplY3QnLCBvciBpdCBjYW4gbnVtYmVyIHRoZW0gbGlrZSAnT2JqZWN0IDEnLlxyXG4gKiBOdW1iZXJpbmcgaXMgZHluYW1pYyB0byBzdXBwb3J0IFBoRVQtaU8uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5pbXBvcnQgTGFiZWxOb2RlLCB7IExhYmVsTm9kZU9wdGlvbnMgfSBmcm9tICcuL0xhYmVsTm9kZS5qcyc7XHJcbmltcG9ydCBHZW9tZXRyaWNPcHRpY3NTdHJpbmdzIGZyb20gJy4uLy4uLy4uL0dlb21ldHJpY09wdGljc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdHJpbmdJTyBmcm9tICcuLi8uLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvU3RyaW5nSU8uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gV2hldGhlciB0aGUgb2JqZWN0IHNob3VsZCBiZSBudW1iZXJlZCwgbGlrZSAnT2JqZWN0IDEnXHJcbiAgaXNOdW1iZXJlZFByb3BlcnR5PzogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBPcHRpY2FsT2JqZWN0TGFiZWxOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTGFiZWxOb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wdGljYWxPYmplY3RMYWJlbE5vZGUgZXh0ZW5kcyBMYWJlbE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gb2JqZWN0TnVtYmVyIC0gZWFjaCBvcHRpY2FsIG9iamVjdCBoYXMgYSB1bmlxdWUgaW50ZWdlciwgdXNlZCB0byBsYWJlbCBpdFxyXG4gICAqIEBwYXJhbSBsYWJlbFBvc2l0aW9uUHJvcGVydHkgLSBwb3NpdGlvbiBvZiB0aGUgbGFiZWxcclxuICAgKiBAcGFyYW0gem9vbVRyYW5zZm9ybVByb3BlcnR5IC0gbW9kZWwtdmlldyB0cmFuc2Zvcm0gdGhhdCB0aGUgdXNlciBjb250cm9scyBieSB6b29taW5nIGluL291dFxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnNcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG9iamVjdE51bWJlcjogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWxQb3NpdGlvblByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxWZWN0b3IyPixcclxuICAgICAgICAgICAgICAgICAgICAgIHpvb21UcmFuc2Zvcm1Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8TW9kZWxWaWV3VHJhbnNmb3JtMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IE9wdGljYWxPYmplY3RMYWJlbE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8T3B0aWNhbE9iamVjdExhYmVsTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBMYWJlbE5vZGVPcHRpb25zPigpKCB7XHJcbiAgICAgIGlzTnVtYmVyZWRQcm9wZXJ0eTogbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSApXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBsYWJlbFN0cmluZ1Byb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggW1xyXG4gICAgICBvcHRpb25zLmlzTnVtYmVyZWRQcm9wZXJ0eSxcclxuICAgICAgR2VvbWV0cmljT3B0aWNzU3RyaW5ncy5sYWJlbC5vYmplY3RTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgR2VvbWV0cmljT3B0aWNzU3RyaW5ncy5sYWJlbC5vYmplY3ROU3RyaW5nUHJvcGVydHlcclxuICAgIF0sIChcclxuICAgICAgaXNOdW1iZXJlZDogYm9vbGVhbixcclxuICAgICAgb2JqZWN0U3RyaW5nOiBzdHJpbmcsXHJcbiAgICAgIG9iamVjdE5TdHJpbmc6IHN0cmluZ1xyXG4gICAgKSA9PiBpc051bWJlcmVkID8gU3RyaW5nVXRpbHMuZmlsbEluKCBvYmplY3ROU3RyaW5nLCB7IG9iamVjdE51bWJlcjogb2JqZWN0TnVtYmVyIH0gKSA6IG9iamVjdFN0cmluZywge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsU3RyaW5nUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogU3RyaW5nSU9cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggbGFiZWxTdHJpbmdQcm9wZXJ0eSwgbGFiZWxQb3NpdGlvblByb3BlcnR5LCB6b29tVHJhbnNmb3JtUHJvcGVydHksIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ09wdGljYWxPYmplY3RMYWJlbE5vZGUnLCBPcHRpY2FsT2JqZWN0TGFiZWxOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU9BLFNBQVMsTUFBNEIsZ0JBQWdCO0FBQzVELE9BQU9DLHNCQUFzQixNQUFNLG9DQUFvQztBQUN2RSxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLFdBQVcsTUFBTSxrREFBa0Q7QUFDMUUsT0FBT0MsZUFBZSxNQUFNLDJDQUEyQztBQUN2RSxPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBSWhFLE9BQU9DLGVBQWUsTUFBTSwyQ0FBMkM7QUFDdkUsT0FBT0MsUUFBUSxNQUFNLDRDQUE0QztBQVVqRSxlQUFlLE1BQU1DLHNCQUFzQixTQUFTUixTQUFTLENBQUM7RUFFNUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NTLFdBQVdBLENBQUVDLFlBQW9CLEVBQ3BCQyxxQkFBaUQsRUFDakRDLHFCQUE2RCxFQUM3REMsZUFBOEMsRUFBRztJQUVuRSxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBK0QsQ0FBQyxDQUFFO01BQ3pGVSxrQkFBa0IsRUFBRSxJQUFJWCxlQUFlLENBQUUsSUFBSztJQUNoRCxDQUFDLEVBQUVTLGVBQWdCLENBQUM7SUFFcEIsTUFBTUcsbUJBQW1CLEdBQUcsSUFBSVYsZUFBZSxDQUFFLENBQy9DUSxPQUFPLENBQUNDLGtCQUFrQixFQUMxQmQsc0JBQXNCLENBQUNnQixLQUFLLENBQUNDLG9CQUFvQixFQUNqRGpCLHNCQUFzQixDQUFDZ0IsS0FBSyxDQUFDRSxxQkFBcUIsQ0FDbkQsRUFBRSxDQUNEQyxVQUFtQixFQUNuQkMsWUFBb0IsRUFDcEJDLGFBQXFCLEtBQ2xCRixVQUFVLEdBQUdqQixXQUFXLENBQUNvQixNQUFNLENBQUVELGFBQWEsRUFBRTtNQUFFWixZQUFZLEVBQUVBO0lBQWEsQ0FBRSxDQUFDLEdBQUdXLFlBQVksRUFBRTtNQUNwR0csTUFBTSxFQUFFVixPQUFPLENBQUNVLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHFCQUFzQixDQUFDO01BQzVEQyxlQUFlLEVBQUVuQjtJQUNuQixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVTLG1CQUFtQixFQUFFTCxxQkFBcUIsRUFBRUMscUJBQXFCLEVBQUVFLE9BQVEsQ0FBQztFQUNyRjtBQUNGO0FBRUFaLGVBQWUsQ0FBQ3lCLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRW5CLHNCQUF1QixDQUFDIn0=