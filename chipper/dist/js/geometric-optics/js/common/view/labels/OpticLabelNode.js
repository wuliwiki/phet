// Copyright 2022, University of Colorado Boulder

/**
 * OpticLabelNode is the label on the optic.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../../axon/js/DerivedProperty.js';
import geometricOptics from '../../../geometricOptics.js';
import GeometricOpticsStrings from '../../../GeometricOpticsStrings.js';
import Lens from '../../../lens/model/Lens.js';
import Mirror from '../../../mirror/model/Mirror.js';
import LabelNode from './LabelNode.js';
import StringIO from '../../../../../tandem/js/types/StringIO.js';
export default class OpticLabelNode extends LabelNode {
  /**
   * @param optic - the optic to label
   * @param zoomTransformProperty - model-view transform that the user controls by zooming in/out
   * @param providedOptions
   */
  constructor(optic, zoomTransformProperty, providedOptions) {
    const opticLabelPositionProperty = new DerivedProperty([optic.positionProperty, optic.diameterProperty], (position, diameter) => position.minusXY(0, diameter / 2));
    const labelStringProperty = new DerivedProperty([optic.opticSurfaceTypeProperty, GeometricOpticsStrings.label.convexLensStringProperty, GeometricOpticsStrings.label.concaveLensStringProperty, GeometricOpticsStrings.label.convexMirrorStringProperty, GeometricOpticsStrings.label.concaveMirrorStringProperty, GeometricOpticsStrings.label.flatMirrorStringProperty], (opticSurfaceType, convexLensString, concaveLensString, convexMirrorString, concaveMirrorString, flatMirrorString) => {
      let text;
      if (optic instanceof Lens) {
        if (opticSurfaceType === 'convex') {
          text = convexLensString;
        } else if (opticSurfaceType === 'concave') {
          text = concaveLensString;
        } else {
          throw Error(`unsupported opticSurfaceType for lens: ${opticSurfaceType}`);
        }
      } else {
        // mirror
        assert && assert(optic instanceof Mirror); // eslint-disable-line no-simple-type-checking-assertions
        if (opticSurfaceType === 'convex') {
          text = convexMirrorString;
        } else if (opticSurfaceType === 'concave') {
          text = concaveMirrorString;
        } else if (opticSurfaceType === 'flat') {
          text = flatMirrorString;
        } else {
          throw Error(`unsupported opticSurfaceType for mirror: ${opticSurfaceType}`);
        }
      }
      return text;
    }, {
      tandem: providedOptions.tandem.createTandem('labelStringProperty'),
      phetioValueType: StringIO
    });
    super(labelStringProperty, opticLabelPositionProperty, zoomTransformProperty, providedOptions);
  }
}
geometricOptics.register('OpticLabelNode', OpticLabelNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,