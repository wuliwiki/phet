// Copyright 2022, University of Colorado Boulder

/**
 * OpticalImageLabelNode is the base class of labeling optical images, and distinguishes between real and virtual.
 * It can label them as simply 'Real Image', or it can number them like 'Real Image 1'.
 * Numbering is dynamic to support PhET-iO.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */
import LabelNode from './LabelNode.js';
import GeometricOpticsStrings from '../../../GeometricOpticsStrings.js';
import geometricOptics from '../../../geometricOptics.js';
import StringUtils from '../../../../../phetcommon/js/util/StringUtils.js';
import BooleanProperty from '../../../../../axon/js/BooleanProperty.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import StringIO from '../../../../../tandem/js/types/StringIO.js';
import DerivedProperty from '../../../../../axon/js/DerivedProperty.js';
export default class OpticalImageLabelNode extends LabelNode {
  /**
   * @param opticalImage - the optical image to label
   * @param labelPositionProperty - the position of the label
   * @param zoomTransformProperty - model-view transform that the user controls by zooming in/out
   * @param providedOptions
   */
  constructor(opticalImage, labelPositionProperty, zoomTransformProperty, providedOptions) {
    const options = optionize()({
      isNumberedProperty: new BooleanProperty(true)
    }, providedOptions);
    const labelStringProperty = new DerivedProperty([opticalImage.opticalImageTypeProperty, options.isNumberedProperty, GeometricOpticsStrings.label.realImageStringProperty, GeometricOpticsStrings.label.realImageNStringProperty, GeometricOpticsStrings.label.virtualImageStringProperty, GeometricOpticsStrings.label.virtualImageNStringProperty], (opticalImageType, isNumbered, realImageString, realImageNString, virtualImageString, virtualImageNString) => {
      let text;
      if (isNumbered) {
        // Switch between 'Real Image N' and 'Virtual Image N'
        const stringPattern = opticalImageType === 'real' ? realImageNString : virtualImageNString;
        text = StringUtils.fillIn(stringPattern, {
          imageNumber: opticalImage.opticalObject.opticalObjectNumber
        });
      } else {
        // Switch between 'Real Image' and 'Virtual Image'
        text = opticalImageType === 'real' ? realImageString : virtualImageString;
      }
      return text;
    }, {
      tandem: options.tandem.createTandem('labelStringProperty'),
      phetioValueType: StringIO
    });
    super(labelStringProperty, labelPositionProperty, zoomTransformProperty, options);
  }
}
geometricOptics.register('OpticalImageLabelNode', OpticalImageLabelNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,