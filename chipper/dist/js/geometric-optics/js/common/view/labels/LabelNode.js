// Copyright 2021-2022, University of Colorado Boulder

/**
 * LabelNode renders a label below something of interest in the user interface. It is responsible for adjusting its
 * position when that something's position changes.
 *
 * @author Sarah Chang (Swarthmore College)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BackgroundNode from '../../../../../scenery-phet/js/BackgroundNode.js';
import { RichText } from '../../../../../scenery/js/imports.js';
import geometricOptics from '../../../geometricOptics.js';
import GOColors from '../../GOColors.js';
import GOConstants from '../../GOConstants.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import Multilink from '../../../../../axon/js/Multilink.js';
export default class LabelNode extends BackgroundNode {
  /**
   * @param labelStringProperty - the label's string
   * @param positionProperty - position of the thing that we're labeling, in model coordinates
   * @param zoomTransformProperty - model-view transform that the user controls by zooming in/out
   * @param providedOptions
   */
  constructor(labelStringProperty, positionProperty, zoomTransformProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      xAlign: 'center',
      yAlign: 'top',
      xOffset: 0,
      yOffset: 2,
      // BackgroundNodeOptions
      xMargin: 5,
      yMargin: 5,
      rectangleOptions: {
        fill: GOColors.screenBackgroundColorProperty,
        cornerRadius: 4,
        opacity: 0.5
      },
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);
    const labelText = new RichText(labelStringProperty, {
      align: 'center',
      fill: GOColors.labelFillProperty,
      font: GOConstants.LABEL_FONT,
      maxWidth: 85,
      tandem: providedOptions.tandem.createTandem('labelText')
    });
    super(labelText, options);

    // Keep the label properly aligned with the thing it's labeling.
    Multilink.multilink([zoomTransformProperty, positionProperty, labelText.boundsProperty], (zoomTransform, position, textBounds) => {
      const viewPosition = zoomTransform.modelToViewPosition(position).plusXY(options.xOffset, options.yOffset);

      // x
      if (options.xAlign === 'center') {
        this.centerX = viewPosition.x;
      } else if (options.xAlign === 'left') {
        this.left = viewPosition.x;
      } else {
        this.right = viewPosition.x;
      }

      // y
      if (options.yAlign === 'center') {
        this.centerY = viewPosition.y;
      } else if (options.yAlign === 'top') {
        this.top = viewPosition.y;
      } else {
        this.bottom = viewPosition.y;
      }
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('LabelNode', LabelNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,