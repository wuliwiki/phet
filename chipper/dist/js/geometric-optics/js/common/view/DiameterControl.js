// Copyright 2021-2022, University of Colorado Boulder

/**
 * DiameterControl is the control for changing the optic's diameter.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberControl from '../../../../scenery-phet/js/NumberControl.js';
import geometricOptics from '../../geometricOptics.js';
import GeometricOpticsStrings from '../../GeometricOpticsStrings.js';
import GOConstants from '../GOConstants.js';
import Utils from '../../../../dot/js/Utils.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
export default class DiameterControl extends NumberControl {
  constructor(diameterProperty, providedOptions) {
    const range = diameterProperty.range;
    const options = optionize4()({}, GOConstants.NUMBER_CONTROL_OPTIONS, {
      // NumberControlOptions
      delta: GOConstants.DIAMETER_SPINNER_STEP,
      sliderOptions: {
        constrainValue: value => Utils.roundToInterval(value, GOConstants.DIAMETER_SLIDER_STEP),
        keyboardStep: GOConstants.DIAMETER_KEYBOARD_STEP,
        // used by all alternative-input devices
        shiftKeyboardStep: GOConstants.DIAMETER_SHIFT_KEYBOARD_STEP,
        // finer grain, used by keyboard only
        pageKeyboardStep: GOConstants.DIAMETER_PAGE_KEYBOARD_STEP // coarser grain, used by keyboard only
      },

      numberDisplayOptions: {
        decimalPlaces: GOConstants.DIAMETER_DECIMAL_PLACES,
        valuePattern: GeometricOpticsStrings.valueCentimetersPatternStringProperty
      }
    }, providedOptions);
    super(GeometricOpticsStrings.diameterStringProperty, diameterProperty, range, options);
    this.addLinkedElement(diameterProperty, {
      tandem: options.tandem.createTandem(diameterProperty.tandem.name)
    });
  }
}
geometricOptics.register('DiameterControl', DiameterControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJDb250cm9sIiwiZ2VvbWV0cmljT3B0aWNzIiwiR2VvbWV0cmljT3B0aWNzU3RyaW5ncyIsIkdPQ29uc3RhbnRzIiwiVXRpbHMiLCJvcHRpb25pemU0IiwiRGlhbWV0ZXJDb250cm9sIiwiY29uc3RydWN0b3IiLCJkaWFtZXRlclByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwicmFuZ2UiLCJvcHRpb25zIiwiTlVNQkVSX0NPTlRST0xfT1BUSU9OUyIsImRlbHRhIiwiRElBTUVURVJfU1BJTk5FUl9TVEVQIiwic2xpZGVyT3B0aW9ucyIsImNvbnN0cmFpblZhbHVlIiwidmFsdWUiLCJyb3VuZFRvSW50ZXJ2YWwiLCJESUFNRVRFUl9TTElERVJfU1RFUCIsImtleWJvYXJkU3RlcCIsIkRJQU1FVEVSX0tFWUJPQVJEX1NURVAiLCJzaGlmdEtleWJvYXJkU3RlcCIsIkRJQU1FVEVSX1NISUZUX0tFWUJPQVJEX1NURVAiLCJwYWdlS2V5Ym9hcmRTdGVwIiwiRElBTUVURVJfUEFHRV9LRVlCT0FSRF9TVEVQIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJkZWNpbWFsUGxhY2VzIiwiRElBTUVURVJfREVDSU1BTF9QTEFDRVMiLCJ2YWx1ZVBhdHRlcm4iLCJ2YWx1ZUNlbnRpbWV0ZXJzUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwiZGlhbWV0ZXJTdHJpbmdQcm9wZXJ0eSIsImFkZExpbmtlZEVsZW1lbnQiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJuYW1lIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaWFtZXRlckNvbnRyb2wudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlhbWV0ZXJDb250cm9sIGlzIHRoZSBjb250cm9sIGZvciBjaGFuZ2luZyB0aGUgb3B0aWMncyBkaWFtZXRlci5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyQ29udHJvbCwgeyBOdW1iZXJDb250cm9sT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9OdW1iZXJDb250cm9sLmpzJztcclxuaW1wb3J0IGdlb21ldHJpY09wdGljcyBmcm9tICcuLi8uLi9nZW9tZXRyaWNPcHRpY3MuanMnO1xyXG5pbXBvcnQgR2VvbWV0cmljT3B0aWNzU3RyaW5ncyBmcm9tICcuLi8uLi9HZW9tZXRyaWNPcHRpY3NTdHJpbmdzLmpzJztcclxuaW1wb3J0IEdPQ29uc3RhbnRzIGZyb20gJy4uL0dPQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgRW1wdHlTZWxmT3B0aW9ucywgb3B0aW9uaXplNCB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIERpYW1ldGVyQ29udHJvbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxOdW1iZXJDb250cm9sT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlhbWV0ZXJDb250cm9sIGV4dGVuZHMgTnVtYmVyQ29udHJvbCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZGlhbWV0ZXJQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHksIHByb3ZpZGVkT3B0aW9uczogRGlhbWV0ZXJDb250cm9sT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCByYW5nZSA9IGRpYW1ldGVyUHJvcGVydHkucmFuZ2U7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTQ8RGlhbWV0ZXJDb250cm9sT3B0aW9ucywgU2VsZk9wdGlvbnMsIE51bWJlckNvbnRyb2xPcHRpb25zPigpKFxyXG4gICAgICB7fSwgR09Db25zdGFudHMuTlVNQkVSX0NPTlRST0xfT1BUSU9OUywge1xyXG5cclxuICAgICAgICAvLyBOdW1iZXJDb250cm9sT3B0aW9uc1xyXG4gICAgICAgIGRlbHRhOiBHT0NvbnN0YW50cy5ESUFNRVRFUl9TUElOTkVSX1NURVAsXHJcbiAgICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG4gICAgICAgICAgY29uc3RyYWluVmFsdWU6ICggdmFsdWU6IG51bWJlciApID0+IFV0aWxzLnJvdW5kVG9JbnRlcnZhbCggdmFsdWUsIEdPQ29uc3RhbnRzLkRJQU1FVEVSX1NMSURFUl9TVEVQICksXHJcbiAgICAgICAgICBrZXlib2FyZFN0ZXA6IEdPQ29uc3RhbnRzLkRJQU1FVEVSX0tFWUJPQVJEX1NURVAsIC8vIHVzZWQgYnkgYWxsIGFsdGVybmF0aXZlLWlucHV0IGRldmljZXNcclxuICAgICAgICAgIHNoaWZ0S2V5Ym9hcmRTdGVwOiBHT0NvbnN0YW50cy5ESUFNRVRFUl9TSElGVF9LRVlCT0FSRF9TVEVQLCAvLyBmaW5lciBncmFpbiwgdXNlZCBieSBrZXlib2FyZCBvbmx5XHJcbiAgICAgICAgICBwYWdlS2V5Ym9hcmRTdGVwOiBHT0NvbnN0YW50cy5ESUFNRVRFUl9QQUdFX0tFWUJPQVJEX1NURVAgLy8gY29hcnNlciBncmFpbiwgdXNlZCBieSBrZXlib2FyZCBvbmx5XHJcbiAgICAgICAgfSxcclxuICAgICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgICAgZGVjaW1hbFBsYWNlczogR09Db25zdGFudHMuRElBTUVURVJfREVDSU1BTF9QTEFDRVMsXHJcbiAgICAgICAgICB2YWx1ZVBhdHRlcm46IEdlb21ldHJpY09wdGljc1N0cmluZ3MudmFsdWVDZW50aW1ldGVyc1BhdHRlcm5TdHJpbmdQcm9wZXJ0eVxyXG4gICAgICAgIH1cclxuICAgICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIEdlb21ldHJpY09wdGljc1N0cmluZ3MuZGlhbWV0ZXJTdHJpbmdQcm9wZXJ0eSwgZGlhbWV0ZXJQcm9wZXJ0eSwgcmFuZ2UsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIGRpYW1ldGVyUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oIGRpYW1ldGVyUHJvcGVydHkudGFuZGVtLm5hbWUgKVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnRGlhbWV0ZXJDb250cm9sJywgRGlhbWV0ZXJDb250cm9sICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBZ0MsOENBQThDO0FBQ2xHLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0Msc0JBQXNCLE1BQU0saUNBQWlDO0FBQ3BFLE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7QUFDM0MsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUcvQyxTQUEyQkMsVUFBVSxRQUFRLHVDQUF1QztBQU1wRixlQUFlLE1BQU1DLGVBQWUsU0FBU04sYUFBYSxDQUFDO0VBRWxETyxXQUFXQSxDQUFFQyxnQkFBZ0MsRUFBRUMsZUFBdUMsRUFBRztJQUU5RixNQUFNQyxLQUFLLEdBQUdGLGdCQUFnQixDQUFDRSxLQUFLO0lBRXBDLE1BQU1DLE9BQU8sR0FBR04sVUFBVSxDQUE0RCxDQUFDLENBQ3JGLENBQUMsQ0FBQyxFQUFFRixXQUFXLENBQUNTLHNCQUFzQixFQUFFO01BRXRDO01BQ0FDLEtBQUssRUFBRVYsV0FBVyxDQUFDVyxxQkFBcUI7TUFDeENDLGFBQWEsRUFBRTtRQUNiQyxjQUFjLEVBQUlDLEtBQWEsSUFBTWIsS0FBSyxDQUFDYyxlQUFlLENBQUVELEtBQUssRUFBRWQsV0FBVyxDQUFDZ0Isb0JBQXFCLENBQUM7UUFDckdDLFlBQVksRUFBRWpCLFdBQVcsQ0FBQ2tCLHNCQUFzQjtRQUFFO1FBQ2xEQyxpQkFBaUIsRUFBRW5CLFdBQVcsQ0FBQ29CLDRCQUE0QjtRQUFFO1FBQzdEQyxnQkFBZ0IsRUFBRXJCLFdBQVcsQ0FBQ3NCLDJCQUEyQixDQUFDO01BQzVELENBQUM7O01BQ0RDLG9CQUFvQixFQUFFO1FBQ3BCQyxhQUFhLEVBQUV4QixXQUFXLENBQUN5Qix1QkFBdUI7UUFDbERDLFlBQVksRUFBRTNCLHNCQUFzQixDQUFDNEI7TUFDdkM7SUFDRixDQUFDLEVBQUVyQixlQUFnQixDQUFDO0lBRXRCLEtBQUssQ0FBRVAsc0JBQXNCLENBQUM2QixzQkFBc0IsRUFBRXZCLGdCQUFnQixFQUFFRSxLQUFLLEVBQUVDLE9BQVEsQ0FBQztJQUV4RixJQUFJLENBQUNxQixnQkFBZ0IsQ0FBRXhCLGdCQUFnQixFQUFFO01BQ3ZDeUIsTUFBTSxFQUFFdEIsT0FBTyxDQUFDc0IsTUFBTSxDQUFDQyxZQUFZLENBQUUxQixnQkFBZ0IsQ0FBQ3lCLE1BQU0sQ0FBQ0UsSUFBSztJQUNwRSxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFsQyxlQUFlLENBQUNtQyxRQUFRLENBQUUsaUJBQWlCLEVBQUU5QixlQUFnQixDQUFDIn0=