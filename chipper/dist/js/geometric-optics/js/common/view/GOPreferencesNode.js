// Copyright 2021-2023, University of Colorado Boulder

/**
 * GOPreferencesNode is the user interface for sim-specific preferences, accessed via the Preferences dialog.
 * These preferences are global, and affect all screens.
 *
 * The Preferences dialog is created on demand by joist, using a PhetioCapsule. So GOPreferencesNode and its
 * subcomponents must implement dispose.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { VBox } from '../../../../scenery/js/imports.js';
import geometricOptics from '../../geometricOptics.js';
import optionize from '../../../../phet-core/js/optionize.js';
import FocalLengthModelTypeControl from './FocalLengthModelTypeControl.js';
import GOPreferences from '../model/GOPreferences.js';
import Add2FPointsCheckbox from './Add2FPointsCheckbox.js';
export default class GOPreferencesNode extends VBox {
  // Disposes of things that are specific to this class.

  constructor(providedOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: 20,
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);
    super(options);

    // 'Add "2F Points" checkbox' checkbox
    // The name should technically be add2FPointsCheckboxCheckbox, but that confused everyone who saw it.
    const add2FPointsCheckbox = new Add2FPointsCheckbox(GOPreferences.add2FPointsCheckboxProperty, {
      tandem: options.tandem.createTandem('add2FPointsCheckbox')
    });

    // 'Focal Length control' radio buttons
    const focalLengthModelTypeControl = new FocalLengthModelTypeControl(GOPreferences.focalLengthModelTypeProperty, {
      tandem: options.tandem.createTandem('focalLengthModelTypeControl')
    });
    this.children = [add2FPointsCheckbox, focalLengthModelTypeControl];
    this.disposeGeometricOpticsPreferencesNode = () => {
      add2FPointsCheckbox.dispose();
      focalLengthModelTypeControl.dispose();
    };
  }
  dispose() {
    this.disposeGeometricOpticsPreferencesNode();
    super.dispose();
  }
}
geometricOptics.register('GOPreferencesNode', GOPreferencesNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWQm94IiwiZ2VvbWV0cmljT3B0aWNzIiwib3B0aW9uaXplIiwiRm9jYWxMZW5ndGhNb2RlbFR5cGVDb250cm9sIiwiR09QcmVmZXJlbmNlcyIsIkFkZDJGUG9pbnRzQ2hlY2tib3giLCJHT1ByZWZlcmVuY2VzTm9kZSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImFsaWduIiwic3BhY2luZyIsInBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZCIsImFkZDJGUG9pbnRzQ2hlY2tib3giLCJhZGQyRlBvaW50c0NoZWNrYm94UHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJmb2NhbExlbmd0aE1vZGVsVHlwZUNvbnRyb2wiLCJmb2NhbExlbmd0aE1vZGVsVHlwZVByb3BlcnR5IiwiY2hpbGRyZW4iLCJkaXNwb3NlR2VvbWV0cmljT3B0aWNzUHJlZmVyZW5jZXNOb2RlIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR09QcmVmZXJlbmNlc05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR09QcmVmZXJlbmNlc05vZGUgaXMgdGhlIHVzZXIgaW50ZXJmYWNlIGZvciBzaW0tc3BlY2lmaWMgcHJlZmVyZW5jZXMsIGFjY2Vzc2VkIHZpYSB0aGUgUHJlZmVyZW5jZXMgZGlhbG9nLlxyXG4gKiBUaGVzZSBwcmVmZXJlbmNlcyBhcmUgZ2xvYmFsLCBhbmQgYWZmZWN0IGFsbCBzY3JlZW5zLlxyXG4gKlxyXG4gKiBUaGUgUHJlZmVyZW5jZXMgZGlhbG9nIGlzIGNyZWF0ZWQgb24gZGVtYW5kIGJ5IGpvaXN0LCB1c2luZyBhIFBoZXRpb0NhcHN1bGUuIFNvIEdPUHJlZmVyZW5jZXNOb2RlIGFuZCBpdHNcclxuICogc3ViY29tcG9uZW50cyBtdXN0IGltcGxlbWVudCBkaXNwb3NlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFZCb3gsIFZCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdlb21ldHJpY09wdGljcyBmcm9tICcuLi8uLi9nZW9tZXRyaWNPcHRpY3MuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgRm9jYWxMZW5ndGhNb2RlbFR5cGVDb250cm9sIGZyb20gJy4vRm9jYWxMZW5ndGhNb2RlbFR5cGVDb250cm9sLmpzJztcclxuaW1wb3J0IEdPUHJlZmVyZW5jZXMgZnJvbSAnLi4vbW9kZWwvR09QcmVmZXJlbmNlcy5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IEdPU2ltT3B0aW9ucyB9IGZyb20gJy4uLy4uL0dPU2ltLmpzJztcclxuaW1wb3J0IEFkZDJGUG9pbnRzQ2hlY2tib3ggZnJvbSAnLi9BZGQyRlBvaW50c0NoZWNrYm94LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBQaWNrUmVxdWlyZWQ8R09TaW1PcHRpb25zLCAnaXNCYXNpY3NWZXJzaW9uJz47XHJcblxyXG50eXBlIEdPUHJlZmVyZW5jZXNOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFZCb3hPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHT1ByZWZlcmVuY2VzTm9kZSBleHRlbmRzIFZCb3gge1xyXG5cclxuICAvLyBEaXNwb3NlcyBvZiB0aGluZ3MgdGhhdCBhcmUgc3BlY2lmaWMgdG8gdGhpcyBjbGFzcy5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VHZW9tZXRyaWNPcHRpY3NQcmVmZXJlbmNlc05vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBHT1ByZWZlcmVuY2VzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxHT1ByZWZlcmVuY2VzTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBWQm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gVkJveE9wdGlvbnNcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogMjAsXHJcbiAgICAgIHBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZDogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gJ0FkZCBcIjJGIFBvaW50c1wiIGNoZWNrYm94JyBjaGVja2JveFxyXG4gICAgLy8gVGhlIG5hbWUgc2hvdWxkIHRlY2huaWNhbGx5IGJlIGFkZDJGUG9pbnRzQ2hlY2tib3hDaGVja2JveCwgYnV0IHRoYXQgY29uZnVzZWQgZXZlcnlvbmUgd2hvIHNhdyBpdC5cclxuICAgIGNvbnN0IGFkZDJGUG9pbnRzQ2hlY2tib3ggPSBuZXcgQWRkMkZQb2ludHNDaGVja2JveCggR09QcmVmZXJlbmNlcy5hZGQyRlBvaW50c0NoZWNrYm94UHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhZGQyRlBvaW50c0NoZWNrYm94JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gJ0ZvY2FsIExlbmd0aCBjb250cm9sJyByYWRpbyBidXR0b25zXHJcbiAgICBjb25zdCBmb2NhbExlbmd0aE1vZGVsVHlwZUNvbnRyb2wgPSBuZXcgRm9jYWxMZW5ndGhNb2RlbFR5cGVDb250cm9sKCBHT1ByZWZlcmVuY2VzLmZvY2FsTGVuZ3RoTW9kZWxUeXBlUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdmb2NhbExlbmd0aE1vZGVsVHlwZUNvbnRyb2wnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmNoaWxkcmVuID0gWyBhZGQyRlBvaW50c0NoZWNrYm94LCBmb2NhbExlbmd0aE1vZGVsVHlwZUNvbnRyb2wgXTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VHZW9tZXRyaWNPcHRpY3NQcmVmZXJlbmNlc05vZGUgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgIGFkZDJGUG9pbnRzQ2hlY2tib3guZGlzcG9zZSgpO1xyXG4gICAgICBmb2NhbExlbmd0aE1vZGVsVHlwZUNvbnRyb2wuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlR2VvbWV0cmljT3B0aWNzUHJlZmVyZW5jZXNOb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW9tZXRyaWNPcHRpY3MucmVnaXN0ZXIoICdHT1ByZWZlcmVuY2VzTm9kZScsIEdPUHJlZmVyZW5jZXNOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxRQUFxQixtQ0FBbUM7QUFDckUsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELE9BQU9DLDJCQUEyQixNQUFNLGtDQUFrQztBQUMxRSxPQUFPQyxhQUFhLE1BQU0sMkJBQTJCO0FBR3JELE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQU0xRCxlQUFlLE1BQU1DLGlCQUFpQixTQUFTTixJQUFJLENBQUM7RUFFbEQ7O0VBR09PLFdBQVdBLENBQUVDLGVBQXlDLEVBQUc7SUFFOUQsTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQXFELENBQUMsQ0FBRTtNQUUvRTtNQUNBUSxLQUFLLEVBQUUsTUFBTTtNQUNiQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxpQ0FBaUMsRUFBRTtJQUNyQyxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFQyxPQUFRLENBQUM7O0lBRWhCO0lBQ0E7SUFDQSxNQUFNSSxtQkFBbUIsR0FBRyxJQUFJUixtQkFBbUIsQ0FBRUQsYUFBYSxDQUFDVSwyQkFBMkIsRUFBRTtNQUM5RkMsTUFBTSxFQUFFTixPQUFPLENBQUNNLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHFCQUFzQjtJQUM3RCxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQywyQkFBMkIsR0FBRyxJQUFJZCwyQkFBMkIsQ0FBRUMsYUFBYSxDQUFDYyw0QkFBNEIsRUFBRTtNQUMvR0gsTUFBTSxFQUFFTixPQUFPLENBQUNNLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLDZCQUE4QjtJQUNyRSxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNHLFFBQVEsR0FBRyxDQUFFTixtQkFBbUIsRUFBRUksMkJBQTJCLENBQUU7SUFFcEUsSUFBSSxDQUFDRyxxQ0FBcUMsR0FBRyxNQUFZO01BQ3ZEUCxtQkFBbUIsQ0FBQ1EsT0FBTyxDQUFDLENBQUM7TUFDN0JKLDJCQUEyQixDQUFDSSxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDO0VBQ0g7RUFFZ0JBLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNELHFDQUFxQyxDQUFDLENBQUM7SUFDNUMsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFwQixlQUFlLENBQUNxQixRQUFRLENBQUUsbUJBQW1CLEVBQUVoQixpQkFBa0IsQ0FBQyJ9