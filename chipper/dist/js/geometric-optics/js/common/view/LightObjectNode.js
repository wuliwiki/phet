// Copyright 2021-2022, University of Colorado Boulder

/**
 * LightObjectNode is the view of a light object. It looks like a lamp with a bulb, pointing towards the right.
 *
 * This class adds no additional functionality to its superclass, but is included for completeness and readability
 * of the type hierarchy.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import geometricOptics from '../../geometricOptics.js';
import HTMLImageElementObjectNode from './HTMLImageElementObjectNode.js';
export default class LightObjectNode extends HTMLImageElementObjectNode {
  /**
   * @param lightObject - model element
   * @param sceneBoundsProperty - bounds for the scene, in model coordinates
   * @param opticPositionProperty - position of the optic
   * @param modelViewTransform
   * @param objectDragModeProperty - constrains how the light can be dragged
   * @param wasDraggedProperty - was ANY LightObjectNode dragged?
   * @param providedOptions
   */
  constructor(lightObject, sceneBoundsProperty, opticPositionProperty, modelViewTransform, objectDragModeProperty, wasDraggedProperty, providedOptions) {
    super(lightObject, sceneBoundsProperty, opticPositionProperty, modelViewTransform, objectDragModeProperty, wasDraggedProperty, providedOptions);
  }
}
geometricOptics.register('LightObjectNode', LightObjectNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW9tZXRyaWNPcHRpY3MiLCJIVE1MSW1hZ2VFbGVtZW50T2JqZWN0Tm9kZSIsIkxpZ2h0T2JqZWN0Tm9kZSIsImNvbnN0cnVjdG9yIiwibGlnaHRPYmplY3QiLCJzY2VuZUJvdW5kc1Byb3BlcnR5Iiwib3B0aWNQb3NpdGlvblByb3BlcnR5IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwib2JqZWN0RHJhZ01vZGVQcm9wZXJ0eSIsIndhc0RyYWdnZWRQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGlnaHRPYmplY3ROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExpZ2h0T2JqZWN0Tm9kZSBpcyB0aGUgdmlldyBvZiBhIGxpZ2h0IG9iamVjdC4gSXQgbG9va3MgbGlrZSBhIGxhbXAgd2l0aCBhIGJ1bGIsIHBvaW50aW5nIHRvd2FyZHMgdGhlIHJpZ2h0LlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIGFkZHMgbm8gYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IHRvIGl0cyBzdXBlcmNsYXNzLCBidXQgaXMgaW5jbHVkZWQgZm9yIGNvbXBsZXRlbmVzcyBhbmQgcmVhZGFiaWxpdHlcclxuICogb2YgdGhlIHR5cGUgaGllcmFyY2h5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTGlnaHRPYmplY3QgZnJvbSAnLi4vbW9kZWwvTGlnaHRPYmplY3QuanMnO1xyXG5pbXBvcnQgSFRNTEltYWdlRWxlbWVudE9iamVjdE5vZGUsIHsgSFRNTEltYWdlRWxlbWVudE9iamVjdE5vZGVPcHRpb25zIH0gZnJvbSAnLi9IVE1MSW1hZ2VFbGVtZW50T2JqZWN0Tm9kZS5qcyc7XHJcbmltcG9ydCB7IE9iamVjdERyYWdNb2RlIH0gZnJvbSAnLi9PYmplY3REcmFnTW9kZS5qcyc7XHJcbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBMaWdodE9iamVjdE5vZGVPcHRpb25zID0gSFRNTEltYWdlRWxlbWVudE9iamVjdE5vZGVPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHRPYmplY3ROb2RlIGV4dGVuZHMgSFRNTEltYWdlRWxlbWVudE9iamVjdE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gbGlnaHRPYmplY3QgLSBtb2RlbCBlbGVtZW50XHJcbiAgICogQHBhcmFtIHNjZW5lQm91bmRzUHJvcGVydHkgLSBib3VuZHMgZm9yIHRoZSBzY2VuZSwgaW4gbW9kZWwgY29vcmRpbmF0ZXNcclxuICAgKiBAcGFyYW0gb3B0aWNQb3NpdGlvblByb3BlcnR5IC0gcG9zaXRpb24gb2YgdGhlIG9wdGljXHJcbiAgICogQHBhcmFtIG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSBvYmplY3REcmFnTW9kZVByb3BlcnR5IC0gY29uc3RyYWlucyBob3cgdGhlIGxpZ2h0IGNhbiBiZSBkcmFnZ2VkXHJcbiAgICogQHBhcmFtIHdhc0RyYWdnZWRQcm9wZXJ0eSAtIHdhcyBBTlkgTGlnaHRPYmplY3ROb2RlIGRyYWdnZWQ/XHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbGlnaHRPYmplY3Q6IExpZ2h0T2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgc2NlbmVCb3VuZHNQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Qm91bmRzMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBvcHRpY1Bvc2l0aW9uUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFZlY3RvcjI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RHJhZ01vZGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8T2JqZWN0RHJhZ01vZGU+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgd2FzRHJhZ2dlZFByb3BlcnR5OiBUUHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IExpZ2h0T2JqZWN0Tm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgc3VwZXIoIGxpZ2h0T2JqZWN0LCBzY2VuZUJvdW5kc1Byb3BlcnR5LCBvcHRpY1Bvc2l0aW9uUHJvcGVydHksIG1vZGVsVmlld1RyYW5zZm9ybSwgb2JqZWN0RHJhZ01vZGVQcm9wZXJ0eSxcclxuICAgICAgd2FzRHJhZ2dlZFByb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ0xpZ2h0T2JqZWN0Tm9kZScsIExpZ2h0T2JqZWN0Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxPQUFPQSxlQUFlLE1BQU0sMEJBQTBCO0FBSXRELE9BQU9DLDBCQUEwQixNQUE2QyxpQ0FBaUM7QUFNL0csZUFBZSxNQUFNQyxlQUFlLFNBQVNELDBCQUEwQixDQUFDO0VBRXRFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTRSxXQUFXQSxDQUFFQyxXQUF3QixFQUN4QkMsbUJBQStDLEVBQy9DQyxxQkFBaUQsRUFDakRDLGtCQUF1QyxFQUN2Q0Msc0JBQXlELEVBQ3pEQyxrQkFBc0MsRUFDdENDLGVBQXVDLEVBQUc7SUFFNUQsS0FBSyxDQUFFTixXQUFXLEVBQUVDLG1CQUFtQixFQUFFQyxxQkFBcUIsRUFBRUMsa0JBQWtCLEVBQUVDLHNCQUFzQixFQUN4R0Msa0JBQWtCLEVBQUVDLGVBQWdCLENBQUM7RUFDekM7QUFDRjtBQUVBVixlQUFlLENBQUNXLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRVQsZUFBZ0IsQ0FBQyJ9