// Copyright 2022-2023, University of Colorado Boulder

/**
 * GOToolDragListener is the DragListener for use with Geometric Optics tools.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { DragListener } from '../../../../../scenery/js/imports.js';
import geometricOptics from '../../../geometricOptics.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import Vector2 from '../../../../../dot/js/Vector2.js';
export default class GOToolDragListener extends DragListener {
  /**
   * @param tool - model element
   * @param toolNode - view element
   * @param zoomTransformProperty - model-view transform that the user controls by zooming in/out
   * @param dragBoundsProperty - dragging is constrained to these bounds
   * @param shouldReturnToToolbox - given the pointer's position, determine whether tool should be returned to toolbox
   * @param providedOptions
   */
  constructor(tool, toolNode, zoomTransformProperty, dragBoundsProperty, shouldReturnToToolbox, providedOptions) {
    // options.end will get a null event if the drag is interrupted, which can definitely happen with multitouch.
    // So keep track of where the pointer is.
    let previousPointerPoint = Vector2.ZERO;
    const options = optionize()({
      pressCursor: 'pointer',
      useInputListenerCursor: true,
      positionProperty: tool.positionProperty,
      dragBoundsProperty: dragBoundsProperty,
      transform: zoomTransformProperty,
      start: () => toolNode.moveToFront(),
      drag: event => {
        previousPointerPoint = event.pointer.point;
      },
      end: event => {
        const point = event ? event.pointer.point : previousPointerPoint;
        if (shouldReturnToToolbox(point)) {
          tool.isInToolboxProperty.value = true;
        }
      }
    }, providedOptions);
    super(options);
  }
}
geometricOptics.register('GOToolDragListener', GOToolDragListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEcmFnTGlzdGVuZXIiLCJnZW9tZXRyaWNPcHRpY3MiLCJvcHRpb25pemUiLCJWZWN0b3IyIiwiR09Ub29sRHJhZ0xpc3RlbmVyIiwiY29uc3RydWN0b3IiLCJ0b29sIiwidG9vbE5vZGUiLCJ6b29tVHJhbnNmb3JtUHJvcGVydHkiLCJkcmFnQm91bmRzUHJvcGVydHkiLCJzaG91bGRSZXR1cm5Ub1Rvb2xib3giLCJwcm92aWRlZE9wdGlvbnMiLCJwcmV2aW91c1BvaW50ZXJQb2ludCIsIlpFUk8iLCJvcHRpb25zIiwicHJlc3NDdXJzb3IiLCJ1c2VJbnB1dExpc3RlbmVyQ3Vyc29yIiwicG9zaXRpb25Qcm9wZXJ0eSIsInRyYW5zZm9ybSIsInN0YXJ0IiwibW92ZVRvRnJvbnQiLCJkcmFnIiwiZXZlbnQiLCJwb2ludGVyIiwicG9pbnQiLCJlbmQiLCJpc0luVG9vbGJveFByb3BlcnR5IiwidmFsdWUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdPVG9vbERyYWdMaXN0ZW5lci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHT1Rvb2xEcmFnTGlzdGVuZXIgaXMgdGhlIERyYWdMaXN0ZW5lciBmb3IgdXNlIHdpdGggR2VvbWV0cmljIE9wdGljcyB0b29scy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyLCBEcmFnTGlzdGVuZXJPcHRpb25zLCBQcmVzc2VkRHJhZ0xpc3RlbmVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdlb21ldHJpY09wdGljcyBmcm9tICcuLi8uLi8uLi9nZW9tZXRyaWNPcHRpY3MuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgR09Ub29sTm9kZSBmcm9tICcuL0dPVG9vbE5vZGUuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaWNrT3B0aW9uYWwgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tPcHRpb25hbC5qcyc7XHJcbmltcG9ydCBHT1Rvb2wgZnJvbSAnLi4vLi4vbW9kZWwvdG9vbHMvR09Ub29sLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBHT1Rvb2xEcmFnTGlzdGVuZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJlxyXG4gIFBpY2tSZXF1aXJlZDxEcmFnTGlzdGVuZXJPcHRpb25zPFByZXNzZWREcmFnTGlzdGVuZXI+LCAndGFuZGVtJz4gJlxyXG4gIFBpY2tPcHRpb25hbDxEcmFnTGlzdGVuZXJPcHRpb25zPFByZXNzZWREcmFnTGlzdGVuZXI+LCAnb2Zmc2V0UG9zaXRpb24nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdPVG9vbERyYWdMaXN0ZW5lciBleHRlbmRzIERyYWdMaXN0ZW5lciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB0b29sIC0gbW9kZWwgZWxlbWVudFxyXG4gICAqIEBwYXJhbSB0b29sTm9kZSAtIHZpZXcgZWxlbWVudFxyXG4gICAqIEBwYXJhbSB6b29tVHJhbnNmb3JtUHJvcGVydHkgLSBtb2RlbC12aWV3IHRyYW5zZm9ybSB0aGF0IHRoZSB1c2VyIGNvbnRyb2xzIGJ5IHpvb21pbmcgaW4vb3V0XHJcbiAgICogQHBhcmFtIGRyYWdCb3VuZHNQcm9wZXJ0eSAtIGRyYWdnaW5nIGlzIGNvbnN0cmFpbmVkIHRvIHRoZXNlIGJvdW5kc1xyXG4gICAqIEBwYXJhbSBzaG91bGRSZXR1cm5Ub1Rvb2xib3ggLSBnaXZlbiB0aGUgcG9pbnRlcidzIHBvc2l0aW9uLCBkZXRlcm1pbmUgd2hldGhlciB0b29sIHNob3VsZCBiZSByZXR1cm5lZCB0byB0b29sYm94XHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdG9vbDogR09Ub29sLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdG9vbE5vZGU6IEdPVG9vbE5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICB6b29tVHJhbnNmb3JtUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PE1vZGVsVmlld1RyYW5zZm9ybTI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgZHJhZ0JvdW5kc1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxCb3VuZHMyPixcclxuICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFJldHVyblRvVG9vbGJveDogKCBwb2ludGVyUG9pbnQ6IFZlY3RvcjIgKSA9PiBib29sZWFuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBHT1Rvb2xEcmFnTGlzdGVuZXJPcHRpb25zICkge1xyXG5cclxuICAgIC8vIG9wdGlvbnMuZW5kIHdpbGwgZ2V0IGEgbnVsbCBldmVudCBpZiB0aGUgZHJhZyBpcyBpbnRlcnJ1cHRlZCwgd2hpY2ggY2FuIGRlZmluaXRlbHkgaGFwcGVuIHdpdGggbXVsdGl0b3VjaC5cclxuICAgIC8vIFNvIGtlZXAgdHJhY2sgb2Ygd2hlcmUgdGhlIHBvaW50ZXIgaXMuXHJcbiAgICBsZXQgcHJldmlvdXNQb2ludGVyUG9pbnQ6IFZlY3RvcjIgPSBWZWN0b3IyLlpFUk87XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxHT1Rvb2xEcmFnTGlzdGVuZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgRHJhZ0xpc3RlbmVyT3B0aW9uczxQcmVzc2VkRHJhZ0xpc3RlbmVyPj4oKSgge1xyXG4gICAgICBwcmVzc0N1cnNvcjogJ3BvaW50ZXInLFxyXG4gICAgICB1c2VJbnB1dExpc3RlbmVyQ3Vyc29yOiB0cnVlLFxyXG4gICAgICBwb3NpdGlvblByb3BlcnR5OiB0b29sLnBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgIGRyYWdCb3VuZHNQcm9wZXJ0eTogZHJhZ0JvdW5kc1Byb3BlcnR5LFxyXG4gICAgICB0cmFuc2Zvcm06IHpvb21UcmFuc2Zvcm1Qcm9wZXJ0eSxcclxuICAgICAgc3RhcnQ6ICgpID0+IHRvb2xOb2RlLm1vdmVUb0Zyb250KCksXHJcbiAgICAgIGRyYWc6IGV2ZW50ID0+IHtcclxuICAgICAgICBwcmV2aW91c1BvaW50ZXJQb2ludCA9IGV2ZW50LnBvaW50ZXIucG9pbnQ7XHJcbiAgICAgIH0sXHJcbiAgICAgIGVuZDogZXZlbnQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBvaW50ID0gZXZlbnQgPyBldmVudC5wb2ludGVyLnBvaW50IDogcHJldmlvdXNQb2ludGVyUG9pbnQ7XHJcbiAgICAgICAgaWYgKCBzaG91bGRSZXR1cm5Ub1Rvb2xib3goIHBvaW50ICkgKSB7XHJcbiAgICAgICAgICB0b29sLmlzSW5Ub29sYm94UHJvcGVydHkudmFsdWUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ0dPVG9vbERyYWdMaXN0ZW5lcicsIEdPVG9vbERyYWdMaXN0ZW5lciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFTQSxZQUFZLFFBQWtELHNDQUFzQztBQUM3RyxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBRXpELE9BQU9DLFNBQVMsTUFBNEIsMENBQTBDO0FBRXRGLE9BQU9DLE9BQU8sTUFBTSxrQ0FBa0M7QUFXdEQsZUFBZSxNQUFNQyxrQkFBa0IsU0FBU0osWUFBWSxDQUFDO0VBRTNEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ssV0FBV0EsQ0FBRUMsSUFBWSxFQUNaQyxRQUFvQixFQUNwQkMscUJBQTZELEVBQzdEQyxrQkFBOEMsRUFDOUNDLHFCQUEyRCxFQUMzREMsZUFBMEMsRUFBRztJQUUvRDtJQUNBO0lBQ0EsSUFBSUMsb0JBQTZCLEdBQUdULE9BQU8sQ0FBQ1UsSUFBSTtJQUVoRCxNQUFNQyxPQUFPLEdBQUdaLFNBQVMsQ0FBbUYsQ0FBQyxDQUFFO01BQzdHYSxXQUFXLEVBQUUsU0FBUztNQUN0QkMsc0JBQXNCLEVBQUUsSUFBSTtNQUM1QkMsZ0JBQWdCLEVBQUVYLElBQUksQ0FBQ1csZ0JBQWdCO01BQ3ZDUixrQkFBa0IsRUFBRUEsa0JBQWtCO01BQ3RDUyxTQUFTLEVBQUVWLHFCQUFxQjtNQUNoQ1csS0FBSyxFQUFFQSxDQUFBLEtBQU1aLFFBQVEsQ0FBQ2EsV0FBVyxDQUFDLENBQUM7TUFDbkNDLElBQUksRUFBRUMsS0FBSyxJQUFJO1FBQ2JWLG9CQUFvQixHQUFHVSxLQUFLLENBQUNDLE9BQU8sQ0FBQ0MsS0FBSztNQUM1QyxDQUFDO01BQ0RDLEdBQUcsRUFBRUgsS0FBSyxJQUFJO1FBQ1osTUFBTUUsS0FBSyxHQUFHRixLQUFLLEdBQUdBLEtBQUssQ0FBQ0MsT0FBTyxDQUFDQyxLQUFLLEdBQUdaLG9CQUFvQjtRQUNoRSxJQUFLRixxQkFBcUIsQ0FBRWMsS0FBTSxDQUFDLEVBQUc7VUFDcENsQixJQUFJLENBQUNvQixtQkFBbUIsQ0FBQ0MsS0FBSyxHQUFHLElBQUk7UUFDdkM7TUFDRjtJQUNGLENBQUMsRUFBRWhCLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFRyxPQUFRLENBQUM7RUFDbEI7QUFDRjtBQUVBYixlQUFlLENBQUMyQixRQUFRLENBQUUsb0JBQW9CLEVBQUV4QixrQkFBbUIsQ0FBQyJ9