// Copyright 2022-2023, University of Colorado Boulder

/**
 * GOToolKeyboardDragListener is the KeyboardDragListener for use with Geometric Optics tools.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { KeyboardDragListener, KeyboardUtils } from '../../../../../scenery/js/imports.js';
import geometricOptics from '../../../geometricOptics.js';
import GOConstants from '../../GOConstants.js';
import { optionize4 } from '../../../../../phet-core/js/optionize.js';
export default class GOToolKeyboardDragListener extends KeyboardDragListener {
  /**
   * @param tool - model element
   * @param toolNode - view element
   * @param zoomTransformProperty - model-view transform that the user controls by zooming in/out
   * @param dragBoundsProperty - dragging is constrained to these bounds
   * @param shouldReturnToToolbox - determine whether the tool should be returned to the toolbox
   * @param providedOptions
   */
  constructor(tool, toolNode, zoomTransformProperty, dragBoundsProperty, shouldReturnToToolbox, providedOptions) {
    // Return the tool to the toolbox, and move focus to its icon in the toolbox.
    const returnToToolbox = () => {
      tool.isInToolboxProperty.value = true;
      toolNode.icon.focus();
    };
    const options = optionize4()({}, GOConstants.KEYBOARD_DRAG_LISTENER_OPTIONS, {
      // KeyboardDragListenerOptions
      positionProperty: tool.positionProperty,
      dragBoundsProperty: dragBoundsProperty,
      transform: zoomTransformProperty,
      start: () => toolNode.moveToFront(),
      end: () => {
        if (shouldReturnToToolbox()) {
          returnToToolbox();
        }
      }
    }, providedOptions);
    super(options);

    // Escape returns the tool to the toolbox.
    this.addHotkey({
      keys: [KeyboardUtils.KEY_ESCAPE],
      callback: () => {
        phet.log && phet.log('hotkey ESCAPE');
        returnToToolbox();
      }
    });
    this.addHotkey({
      keys: [KeyboardUtils.KEY_J],
      callback: () => {
        phet.log && phet.log('hotkey J');
        toolNode.jumpToPoint();
      }
    });
  }
}
geometricOptics.register('GOToolKeyboardDragListener', GOToolKeyboardDragListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJLZXlib2FyZERyYWdMaXN0ZW5lciIsIktleWJvYXJkVXRpbHMiLCJnZW9tZXRyaWNPcHRpY3MiLCJHT0NvbnN0YW50cyIsIm9wdGlvbml6ZTQiLCJHT1Rvb2xLZXlib2FyZERyYWdMaXN0ZW5lciIsImNvbnN0cnVjdG9yIiwidG9vbCIsInRvb2xOb2RlIiwiem9vbVRyYW5zZm9ybVByb3BlcnR5IiwiZHJhZ0JvdW5kc1Byb3BlcnR5Iiwic2hvdWxkUmV0dXJuVG9Ub29sYm94IiwicHJvdmlkZWRPcHRpb25zIiwicmV0dXJuVG9Ub29sYm94IiwiaXNJblRvb2xib3hQcm9wZXJ0eSIsInZhbHVlIiwiaWNvbiIsImZvY3VzIiwib3B0aW9ucyIsIktFWUJPQVJEX0RSQUdfTElTVEVORVJfT1BUSU9OUyIsInBvc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2Zvcm0iLCJzdGFydCIsIm1vdmVUb0Zyb250IiwiZW5kIiwiYWRkSG90a2V5Iiwia2V5cyIsIktFWV9FU0NBUEUiLCJjYWxsYmFjayIsInBoZXQiLCJsb2ciLCJLRVlfSiIsImp1bXBUb1BvaW50IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHT1Rvb2xLZXlib2FyZERyYWdMaXN0ZW5lci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHT1Rvb2xLZXlib2FyZERyYWdMaXN0ZW5lciBpcyB0aGUgS2V5Ym9hcmREcmFnTGlzdGVuZXIgZm9yIHVzZSB3aXRoIEdlb21ldHJpYyBPcHRpY3MgdG9vbHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCB7IEtleWJvYXJkRHJhZ0xpc3RlbmVyLCBLZXlib2FyZERyYWdMaXN0ZW5lck9wdGlvbnMsIEtleWJvYXJkVXRpbHMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBHT0NvbnN0YW50cyBmcm9tICcuLi8uLi9HT0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgRW1wdHlTZWxmT3B0aW9ucywgb3B0aW9uaXplNCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgR09Ub29sTm9kZSBmcm9tICcuL0dPVG9vbE5vZGUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgR09Ub29sIGZyb20gJy4uLy4uL21vZGVsL3Rvb2xzL0dPVG9vbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgR09Ub29sS2V5Ym9hcmREcmFnTGlzdGVuZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8S2V5Ym9hcmREcmFnTGlzdGVuZXJPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHT1Rvb2xLZXlib2FyZERyYWdMaXN0ZW5lciBleHRlbmRzIEtleWJvYXJkRHJhZ0xpc3RlbmVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHRvb2wgLSBtb2RlbCBlbGVtZW50XHJcbiAgICogQHBhcmFtIHRvb2xOb2RlIC0gdmlldyBlbGVtZW50XHJcbiAgICogQHBhcmFtIHpvb21UcmFuc2Zvcm1Qcm9wZXJ0eSAtIG1vZGVsLXZpZXcgdHJhbnNmb3JtIHRoYXQgdGhlIHVzZXIgY29udHJvbHMgYnkgem9vbWluZyBpbi9vdXRcclxuICAgKiBAcGFyYW0gZHJhZ0JvdW5kc1Byb3BlcnR5IC0gZHJhZ2dpbmcgaXMgY29uc3RyYWluZWQgdG8gdGhlc2UgYm91bmRzXHJcbiAgICogQHBhcmFtIHNob3VsZFJldHVyblRvVG9vbGJveCAtIGRldGVybWluZSB3aGV0aGVyIHRoZSB0b29sIHNob3VsZCBiZSByZXR1cm5lZCB0byB0aGUgdG9vbGJveFxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnNcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRvb2w6IEdPVG9vbCxcclxuICAgICAgICAgICAgICAgICAgICAgIHRvb2xOb2RlOiBHT1Rvb2xOb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgem9vbVRyYW5zZm9ybVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxNb2RlbFZpZXdUcmFuc2Zvcm0yPixcclxuICAgICAgICAgICAgICAgICAgICAgIGRyYWdCb3VuZHNQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Qm91bmRzMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBzaG91bGRSZXR1cm5Ub1Rvb2xib3g6ICgpID0+IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEdPVG9vbEtleWJvYXJkRHJhZ0xpc3RlbmVyT3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIHRvb2wgdG8gdGhlIHRvb2xib3gsIGFuZCBtb3ZlIGZvY3VzIHRvIGl0cyBpY29uIGluIHRoZSB0b29sYm94LlxyXG4gICAgY29uc3QgcmV0dXJuVG9Ub29sYm94ID0gKCkgPT4ge1xyXG4gICAgICB0b29sLmlzSW5Ub29sYm94UHJvcGVydHkudmFsdWUgPSB0cnVlO1xyXG4gICAgICB0b29sTm9kZS5pY29uLmZvY3VzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU0PEdPVG9vbEtleWJvYXJkRHJhZ0xpc3RlbmVyT3B0aW9ucywgU2VsZk9wdGlvbnMsIEtleWJvYXJkRHJhZ0xpc3RlbmVyT3B0aW9ucz4oKShcclxuICAgICAge30sIEdPQ29uc3RhbnRzLktFWUJPQVJEX0RSQUdfTElTVEVORVJfT1BUSU9OUywge1xyXG5cclxuICAgICAgICAvLyBLZXlib2FyZERyYWdMaXN0ZW5lck9wdGlvbnNcclxuICAgICAgICBwb3NpdGlvblByb3BlcnR5OiB0b29sLnBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgICAgZHJhZ0JvdW5kc1Byb3BlcnR5OiBkcmFnQm91bmRzUHJvcGVydHksXHJcbiAgICAgICAgdHJhbnNmb3JtOiB6b29tVHJhbnNmb3JtUHJvcGVydHksXHJcbiAgICAgICAgc3RhcnQ6ICgpID0+IHRvb2xOb2RlLm1vdmVUb0Zyb250KCksXHJcbiAgICAgICAgZW5kOiAoKSA9PiB7XHJcbiAgICAgICAgICBpZiAoIHNob3VsZFJldHVyblRvVG9vbGJveCgpICkge1xyXG4gICAgICAgICAgICByZXR1cm5Ub1Rvb2xib3goKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gRXNjYXBlIHJldHVybnMgdGhlIHRvb2wgdG8gdGhlIHRvb2xib3guXHJcbiAgICB0aGlzLmFkZEhvdGtleSgge1xyXG4gICAgICBrZXlzOiBbIEtleWJvYXJkVXRpbHMuS0VZX0VTQ0FQRSBdLFxyXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgIHBoZXQubG9nICYmIHBoZXQubG9nKCAnaG90a2V5IEVTQ0FQRScgKTtcclxuICAgICAgICByZXR1cm5Ub1Rvb2xib3goKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRIb3RrZXkoIHtcclxuICAgICAga2V5czogWyBLZXlib2FyZFV0aWxzLktFWV9KIF0sXHJcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgcGhldC5sb2cgJiYgcGhldC5sb2coICdob3RrZXkgSicgKTtcclxuICAgICAgICB0b29sTm9kZS5qdW1wVG9Qb2ludCgpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW9tZXRyaWNPcHRpY3MucmVnaXN0ZXIoICdHT1Rvb2xLZXlib2FyZERyYWdMaXN0ZW5lcicsIEdPVG9vbEtleWJvYXJkRHJhZ0xpc3RlbmVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLFNBQVNBLG9CQUFvQixFQUErQkMsYUFBYSxRQUFRLHNDQUFzQztBQUN2SCxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFFOUMsU0FBMkJDLFVBQVUsUUFBUSwwQ0FBMEM7QUFTdkYsZUFBZSxNQUFNQywwQkFBMEIsU0FBU0wsb0JBQW9CLENBQUM7RUFFM0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTTSxXQUFXQSxDQUFFQyxJQUFZLEVBQ1pDLFFBQW9CLEVBQ3BCQyxxQkFBNkQsRUFDN0RDLGtCQUE4QyxFQUM5Q0MscUJBQW9DLEVBQ3BDQyxlQUFrRCxFQUFHO0lBRXZFO0lBQ0EsTUFBTUMsZUFBZSxHQUFHQSxDQUFBLEtBQU07TUFDNUJOLElBQUksQ0FBQ08sbUJBQW1CLENBQUNDLEtBQUssR0FBRyxJQUFJO01BQ3JDUCxRQUFRLENBQUNRLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELE1BQU1DLE9BQU8sR0FBR2QsVUFBVSxDQUE4RSxDQUFDLENBQ3ZHLENBQUMsQ0FBQyxFQUFFRCxXQUFXLENBQUNnQiw4QkFBOEIsRUFBRTtNQUU5QztNQUNBQyxnQkFBZ0IsRUFBRWIsSUFBSSxDQUFDYSxnQkFBZ0I7TUFDdkNWLGtCQUFrQixFQUFFQSxrQkFBa0I7TUFDdENXLFNBQVMsRUFBRVoscUJBQXFCO01BQ2hDYSxLQUFLLEVBQUVBLENBQUEsS0FBTWQsUUFBUSxDQUFDZSxXQUFXLENBQUMsQ0FBQztNQUNuQ0MsR0FBRyxFQUFFQSxDQUFBLEtBQU07UUFDVCxJQUFLYixxQkFBcUIsQ0FBQyxDQUFDLEVBQUc7VUFDN0JFLGVBQWUsQ0FBQyxDQUFDO1FBQ25CO01BQ0Y7SUFDRixDQUFDLEVBQUVELGVBQWdCLENBQUM7SUFFdEIsS0FBSyxDQUFFTSxPQUFRLENBQUM7O0lBRWhCO0lBQ0EsSUFBSSxDQUFDTyxTQUFTLENBQUU7TUFDZEMsSUFBSSxFQUFFLENBQUV6QixhQUFhLENBQUMwQixVQUFVLENBQUU7TUFDbENDLFFBQVEsRUFBRUEsQ0FBQSxLQUFNO1FBQ2RDLElBQUksQ0FBQ0MsR0FBRyxJQUFJRCxJQUFJLENBQUNDLEdBQUcsQ0FBRSxlQUFnQixDQUFDO1FBQ3ZDakIsZUFBZSxDQUFDLENBQUM7TUFDbkI7SUFDRixDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNZLFNBQVMsQ0FBRTtNQUNkQyxJQUFJLEVBQUUsQ0FBRXpCLGFBQWEsQ0FBQzhCLEtBQUssQ0FBRTtNQUM3QkgsUUFBUSxFQUFFQSxDQUFBLEtBQU07UUFDZEMsSUFBSSxDQUFDQyxHQUFHLElBQUlELElBQUksQ0FBQ0MsR0FBRyxDQUFFLFVBQVcsQ0FBQztRQUNsQ3RCLFFBQVEsQ0FBQ3dCLFdBQVcsQ0FBQyxDQUFDO01BQ3hCO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBOUIsZUFBZSxDQUFDK0IsUUFBUSxDQUFFLDRCQUE0QixFQUFFNUIsMEJBQTJCLENBQUMifQ==