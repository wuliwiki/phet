// Copyright 2021-2023, University of Colorado Boulder

/**
 * GOToolboxNode is the toolbox that holds the tools - rulers and position markers.
 * It has no responsibility for the behavior of its contents (tools icons) or the tools themselves.
 *
 * @author Sarah Chang (Swarthmore College)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { HBox, Node } from '../../../../../scenery/js/imports.js';
import Panel from '../../../../../sun/js/Panel.js';
import geometricOptics from '../../../geometricOptics.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import Bounds2 from '../../../../../dot/js/Bounds2.js';
export default class GOToolboxNode extends Panel {
  /**
   * @param toolNodes - in the order that they appear in the toolbox, left to right
   * @param providedOptions
   */
  constructor(toolNodes, providedOptions) {
    const options = optionize()({
      // PanelOptions
      align: 'center',
      cornerRadius: 5,
      xMargin: 20,
      yMargin: 7,
      fill: 'white',
      stroke: 'grey',
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    }, providedOptions);

    // Wrap each icon in a Node, so that its visibility can be controlled via PhET-iO, and so that
    // the wrappers are children of the toolbox in the tandem hierarchy.
    const icons = toolNodes.map(toolNode => new Node({
      children: [toolNode.icon],
      tandem: options.tandem.createTandem(toolNode.iconTandemName),
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    }));
    const toolboxContent = new HBox({
      spacing: 20,
      children: icons
    });
    super(toolboxContent, options);

    // Tell the tools that they are associated with this toolbox.
    // This allows tools to determine when they have been dragged back to the toolbox.
    toolNodes.forEach(toolNode => toolNode.setToolboxNode(this));
  }

  /**
   * Given a point in the global coordinate frame, is it inside the visible bounds of the toolbox?
   */
  containsGlobalPoint(globalPoint) {
    return this.getGlobalVisibleBounds().containsPoint(globalPoint);
  }

  /**
   * Given bounds in the global coordinate frame, do they intersect the visible bounds of the toolbox?
   */
  intersectsGlobalBounds(globalBounds) {
    return this.getGlobalVisibleBounds().intersectsBounds(globalBounds);
  }

  /**
   * Gets the visible bounds of the toolbox in the global coordinate frame.
   * While we do not move the toolbox, this cannot be considered static because of pan-&-zoom.
   * See https://github.com/phetsims/geometric-optics/issues/388
   */
  getGlobalVisibleBounds() {
    return this.visible ? this.getGlobalBounds() : Bounds2.NOTHING;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('GOToolboxNode', GOToolboxNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIQm94IiwiTm9kZSIsIlBhbmVsIiwiZ2VvbWV0cmljT3B0aWNzIiwib3B0aW9uaXplIiwiQm91bmRzMiIsIkdPVG9vbGJveE5vZGUiLCJjb25zdHJ1Y3RvciIsInRvb2xOb2RlcyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJhbGlnbiIsImNvcm5lclJhZGl1cyIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiZmlsbCIsInN0cm9rZSIsInZpc2libGVQcm9wZXJ0eU9wdGlvbnMiLCJwaGV0aW9GZWF0dXJlZCIsImljb25zIiwibWFwIiwidG9vbE5vZGUiLCJjaGlsZHJlbiIsImljb24iLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJpY29uVGFuZGVtTmFtZSIsInRvb2xib3hDb250ZW50Iiwic3BhY2luZyIsImZvckVhY2giLCJzZXRUb29sYm94Tm9kZSIsImNvbnRhaW5zR2xvYmFsUG9pbnQiLCJnbG9iYWxQb2ludCIsImdldEdsb2JhbFZpc2libGVCb3VuZHMiLCJjb250YWluc1BvaW50IiwiaW50ZXJzZWN0c0dsb2JhbEJvdW5kcyIsImdsb2JhbEJvdW5kcyIsImludGVyc2VjdHNCb3VuZHMiLCJ2aXNpYmxlIiwiZ2V0R2xvYmFsQm91bmRzIiwiTk9USElORyIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdPVG9vbGJveE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR09Ub29sYm94Tm9kZSBpcyB0aGUgdG9vbGJveCB0aGF0IGhvbGRzIHRoZSB0b29scyAtIHJ1bGVycyBhbmQgcG9zaXRpb24gbWFya2Vycy5cclxuICogSXQgaGFzIG5vIHJlc3BvbnNpYmlsaXR5IGZvciB0aGUgYmVoYXZpb3Igb2YgaXRzIGNvbnRlbnRzICh0b29scyBpY29ucykgb3IgdGhlIHRvb2xzIHRoZW1zZWx2ZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FyYWggQ2hhbmcgKFN3YXJ0aG1vcmUgQ29sbGVnZSlcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBIQm94LCBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhbmVsLCB7IFBhbmVsT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBnZW9tZXRyaWNPcHRpY3MgZnJvbSAnLi4vLi4vLi4vZ2VvbWV0cmljT3B0aWNzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBHT1Rvb2xOb2RlIGZyb20gJy4vR09Ub29sTm9kZS5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEdPVG9vbGJveE5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGFuZWxPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHT1Rvb2xib3hOb2RlIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gdG9vbE5vZGVzIC0gaW4gdGhlIG9yZGVyIHRoYXQgdGhleSBhcHBlYXIgaW4gdGhlIHRvb2xib3gsIGxlZnQgdG8gcmlnaHRcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0b29sTm9kZXM6IEdPVG9vbE5vZGVbXSwgcHJvdmlkZWRPcHRpb25zOiBHT1Rvb2xib3hOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEdPVG9vbGJveE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGFuZWxPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBQYW5lbE9wdGlvbnNcclxuICAgICAgYWxpZ246ICdjZW50ZXInLFxyXG4gICAgICBjb3JuZXJSYWRpdXM6IDUsXHJcbiAgICAgIHhNYXJnaW46IDIwLFxyXG4gICAgICB5TWFyZ2luOiA3LFxyXG4gICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICBzdHJva2U6ICdncmV5JyxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5T3B0aW9uczoge1xyXG4gICAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFdyYXAgZWFjaCBpY29uIGluIGEgTm9kZSwgc28gdGhhdCBpdHMgdmlzaWJpbGl0eSBjYW4gYmUgY29udHJvbGxlZCB2aWEgUGhFVC1pTywgYW5kIHNvIHRoYXRcclxuICAgIC8vIHRoZSB3cmFwcGVycyBhcmUgY2hpbGRyZW4gb2YgdGhlIHRvb2xib3ggaW4gdGhlIHRhbmRlbSBoaWVyYXJjaHkuXHJcbiAgICBjb25zdCBpY29ucyA9IHRvb2xOb2Rlcy5tYXAoIHRvb2xOb2RlID0+IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIHRvb2xOb2RlLmljb24gXSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oIHRvb2xOb2RlLmljb25UYW5kZW1OYW1lICksXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHtcclxuICAgICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICBjb25zdCB0b29sYm94Q29udGVudCA9IG5ldyBIQm94KCB7XHJcbiAgICAgIHNwYWNpbmc6IDIwLFxyXG4gICAgICBjaGlsZHJlbjogaWNvbnNcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggdG9vbGJveENvbnRlbnQsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBUZWxsIHRoZSB0b29scyB0aGF0IHRoZXkgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRvb2xib3guXHJcbiAgICAvLyBUaGlzIGFsbG93cyB0b29scyB0byBkZXRlcm1pbmUgd2hlbiB0aGV5IGhhdmUgYmVlbiBkcmFnZ2VkIGJhY2sgdG8gdGhlIHRvb2xib3guXHJcbiAgICB0b29sTm9kZXMuZm9yRWFjaCggdG9vbE5vZGUgPT4gdG9vbE5vZGUuc2V0VG9vbGJveE5vZGUoIHRoaXMgKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2l2ZW4gYSBwb2ludCBpbiB0aGUgZ2xvYmFsIGNvb3JkaW5hdGUgZnJhbWUsIGlzIGl0IGluc2lkZSB0aGUgdmlzaWJsZSBib3VuZHMgb2YgdGhlIHRvb2xib3g/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRhaW5zR2xvYmFsUG9pbnQoIGdsb2JhbFBvaW50OiBWZWN0b3IyICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0R2xvYmFsVmlzaWJsZUJvdW5kcygpLmNvbnRhaW5zUG9pbnQoIGdsb2JhbFBvaW50ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHaXZlbiBib3VuZHMgaW4gdGhlIGdsb2JhbCBjb29yZGluYXRlIGZyYW1lLCBkbyB0aGV5IGludGVyc2VjdCB0aGUgdmlzaWJsZSBib3VuZHMgb2YgdGhlIHRvb2xib3g/XHJcbiAgICovXHJcbiAgcHVibGljIGludGVyc2VjdHNHbG9iYWxCb3VuZHMoIGdsb2JhbEJvdW5kczogQm91bmRzMiApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmdldEdsb2JhbFZpc2libGVCb3VuZHMoKS5pbnRlcnNlY3RzQm91bmRzKCBnbG9iYWxCb3VuZHMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIHZpc2libGUgYm91bmRzIG9mIHRoZSB0b29sYm94IGluIHRoZSBnbG9iYWwgY29vcmRpbmF0ZSBmcmFtZS5cclxuICAgKiBXaGlsZSB3ZSBkbyBub3QgbW92ZSB0aGUgdG9vbGJveCwgdGhpcyBjYW5ub3QgYmUgY29uc2lkZXJlZCBzdGF0aWMgYmVjYXVzZSBvZiBwYW4tJi16b29tLlxyXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ2VvbWV0cmljLW9wdGljcy9pc3N1ZXMvMzg4XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRHbG9iYWxWaXNpYmxlQm91bmRzKCk6IEJvdW5kczIge1xyXG4gICAgcmV0dXJuIHRoaXMudmlzaWJsZSA/IHRoaXMuZ2V0R2xvYmFsQm91bmRzKCkgOiBCb3VuZHMyLk5PVEhJTkc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnR09Ub29sYm94Tm9kZScsIEdPVG9vbGJveE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksRUFBRUMsSUFBSSxRQUFRLHNDQUFzQztBQUNqRSxPQUFPQyxLQUFLLE1BQXdCLGdDQUFnQztBQUNwRSxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLFNBQVMsTUFBNEIsMENBQTBDO0FBR3RGLE9BQU9DLE9BQU8sTUFBTSxrQ0FBa0M7QUFPdEQsZUFBZSxNQUFNQyxhQUFhLFNBQVNKLEtBQUssQ0FBQztFQUUvQztBQUNGO0FBQ0E7QUFDQTtFQUNTSyxXQUFXQSxDQUFFQyxTQUF1QixFQUFFQyxlQUFxQyxFQUFHO0lBRW5GLE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUFrRCxDQUFDLENBQUU7TUFFNUU7TUFDQU8sS0FBSyxFQUFFLFFBQVE7TUFDZkMsWUFBWSxFQUFFLENBQUM7TUFDZkMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFLENBQUM7TUFDVkMsSUFBSSxFQUFFLE9BQU87TUFDYkMsTUFBTSxFQUFFLE1BQU07TUFDZEMsc0JBQXNCLEVBQUU7UUFDdEJDLGNBQWMsRUFBRTtNQUNsQjtJQUNGLENBQUMsRUFBRVQsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQTtJQUNBLE1BQU1VLEtBQUssR0FBR1gsU0FBUyxDQUFDWSxHQUFHLENBQUVDLFFBQVEsSUFBSSxJQUFJcEIsSUFBSSxDQUFFO01BQ2pEcUIsUUFBUSxFQUFFLENBQUVELFFBQVEsQ0FBQ0UsSUFBSSxDQUFFO01BQzNCQyxNQUFNLEVBQUVkLE9BQU8sQ0FBQ2MsTUFBTSxDQUFDQyxZQUFZLENBQUVKLFFBQVEsQ0FBQ0ssY0FBZSxDQUFDO01BQzlEVCxzQkFBc0IsRUFBRTtRQUN0QkMsY0FBYyxFQUFFO01BQ2xCO0lBQ0YsQ0FBRSxDQUFFLENBQUM7SUFFTCxNQUFNUyxjQUFjLEdBQUcsSUFBSTNCLElBQUksQ0FBRTtNQUMvQjRCLE9BQU8sRUFBRSxFQUFFO01BQ1hOLFFBQVEsRUFBRUg7SUFDWixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVRLGNBQWMsRUFBRWpCLE9BQVEsQ0FBQzs7SUFFaEM7SUFDQTtJQUNBRixTQUFTLENBQUNxQixPQUFPLENBQUVSLFFBQVEsSUFBSUEsUUFBUSxDQUFDUyxjQUFjLENBQUUsSUFBSyxDQUFFLENBQUM7RUFDbEU7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLG1CQUFtQkEsQ0FBRUMsV0FBb0IsRUFBWTtJQUMxRCxPQUFPLElBQUksQ0FBQ0Msc0JBQXNCLENBQUMsQ0FBQyxDQUFDQyxhQUFhLENBQUVGLFdBQVksQ0FBQztFQUNuRTs7RUFFQTtBQUNGO0FBQ0E7RUFDU0csc0JBQXNCQSxDQUFFQyxZQUFxQixFQUFZO0lBQzlELE9BQU8sSUFBSSxDQUFDSCxzQkFBc0IsQ0FBQyxDQUFDLENBQUNJLGdCQUFnQixDQUFFRCxZQUFhLENBQUM7RUFDdkU7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNVSCxzQkFBc0JBLENBQUEsRUFBWTtJQUN4QyxPQUFPLElBQUksQ0FBQ0ssT0FBTyxHQUFHLElBQUksQ0FBQ0MsZUFBZSxDQUFDLENBQUMsR0FBR2xDLE9BQU8sQ0FBQ21DLE9BQU87RUFDaEU7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdEMsZUFBZSxDQUFDd0MsUUFBUSxDQUFFLGVBQWUsRUFBRXJDLGFBQWMsQ0FBQyJ9