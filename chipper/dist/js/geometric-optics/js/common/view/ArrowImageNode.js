// Copyright 2022, University of Colorado Boulder

/**
 * ArrowImageNode renders the optical image (real or virtual) associated with an arrow object.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import geometricOptics from '../../geometricOptics.js';
import GOConstants from '../GOConstants.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
import OpticalImageNode from './OpticalImageNode.js';
import Multilink from '../../../../axon/js/Multilink.js';
export default class ArrowImageNode extends OpticalImageNode {
  /**
   * @param arrowImage - model element
   * @param virtualImageVisibleProperty - should a virtual image be visible?
   * @param lightPropagationEnabledProperty - is light propagation enabled?
   * @param objectVisibleProperty - is the optical object visible?
   * @param modelViewTransform
   * @param providedOptions
   */
  constructor(arrowImage, virtualImageVisibleProperty, lightPropagationEnabledProperty, objectVisibleProperty, modelViewTransform, providedOptions) {
    super(arrowImage, virtualImageVisibleProperty, lightPropagationEnabledProperty, objectVisibleProperty, providedOptions);
    const arrowNode = new ArrowNode(0, 0, 0, 1, combineOptions({}, GOConstants.ARROW_NODE_OPTIONS, {
      fill: arrowImage.fill,
      stroke: null,
      opacity: 0.5 // fixed opacity, see https://github.com/phetsims/geometric-optics/issues/350#issuecomment-1062438996
    }));

    this.addChild(arrowNode);

    // Don't scale the head and tail, just the magnitude.
    // See https://github.com/phetsims/geometric-optics/issues/228#issuecomment-1039672404
    Multilink.multilink([arrowImage.positionProperty, arrowImage.magnificationProperty], (arrowImagePosition, magnification) => {
      const opticViewPosition = modelViewTransform.modelToViewPosition(arrowImage.optic.positionProperty.value);
      const objectViewPosition = modelViewTransform.modelToViewPosition(arrowImage.opticalObject.positionProperty.value);
      const imageViewPosition = modelViewTransform.modelToViewPosition(arrowImagePosition);
      let magnitude = magnification * (objectViewPosition.y - opticViewPosition.y);
      if (magnitude === 0) {
        magnitude = GOConstants.MIN_MAGNITUDE; // see https://github.com/phetsims/geometric-optics/issues/306
      }

      arrowNode.setTailAndTip(imageViewPosition.x, opticViewPosition.y, imageViewPosition.x, opticViewPosition.y + magnitude);
    });
  }
}
geometricOptics.register('ArrowImageNode', ArrowImageNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW9tZXRyaWNPcHRpY3MiLCJHT0NvbnN0YW50cyIsIkFycm93Tm9kZSIsImNvbWJpbmVPcHRpb25zIiwiT3B0aWNhbEltYWdlTm9kZSIsIk11bHRpbGluayIsIkFycm93SW1hZ2VOb2RlIiwiY29uc3RydWN0b3IiLCJhcnJvd0ltYWdlIiwidmlydHVhbEltYWdlVmlzaWJsZVByb3BlcnR5IiwibGlnaHRQcm9wYWdhdGlvbkVuYWJsZWRQcm9wZXJ0eSIsIm9iamVjdFZpc2libGVQcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInByb3ZpZGVkT3B0aW9ucyIsImFycm93Tm9kZSIsIkFSUk9XX05PREVfT1BUSU9OUyIsImZpbGwiLCJzdHJva2UiLCJvcGFjaXR5IiwiYWRkQ2hpbGQiLCJtdWx0aWxpbmsiLCJwb3NpdGlvblByb3BlcnR5IiwibWFnbmlmaWNhdGlvblByb3BlcnR5IiwiYXJyb3dJbWFnZVBvc2l0aW9uIiwibWFnbmlmaWNhdGlvbiIsIm9wdGljVmlld1Bvc2l0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsIm9wdGljIiwidmFsdWUiLCJvYmplY3RWaWV3UG9zaXRpb24iLCJvcHRpY2FsT2JqZWN0IiwiaW1hZ2VWaWV3UG9zaXRpb24iLCJtYWduaXR1ZGUiLCJ5IiwiTUlOX01BR05JVFVERSIsInNldFRhaWxBbmRUaXAiLCJ4IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBcnJvd0ltYWdlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQXJyb3dJbWFnZU5vZGUgcmVuZGVycyB0aGUgb3B0aWNhbCBpbWFnZSAocmVhbCBvciB2aXJ0dWFsKSBhc3NvY2lhdGVkIHdpdGggYW4gYXJyb3cgb2JqZWN0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBBcnJvd0ltYWdlIGZyb20gJy4uL21vZGVsL0Fycm93SW1hZ2UuanMnO1xyXG5pbXBvcnQgR09Db25zdGFudHMgZnJvbSAnLi4vR09Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlLCB7IEFycm93Tm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQXJyb3dOb2RlLmpzJztcclxuaW1wb3J0IHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IE9wdGljYWxJbWFnZU5vZGUsIHsgT3B0aWNhbEltYWdlTm9kZU9wdGlvbnMgfSBmcm9tICcuL09wdGljYWxJbWFnZU5vZGUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbnR5cGUgQXJyb3dJbWFnZU5vZGVPcHRpb25zID0gUGlja1JlcXVpcmVkPE9wdGljYWxJbWFnZU5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcnJvd0ltYWdlTm9kZSBleHRlbmRzIE9wdGljYWxJbWFnZU5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gYXJyb3dJbWFnZSAtIG1vZGVsIGVsZW1lbnRcclxuICAgKiBAcGFyYW0gdmlydHVhbEltYWdlVmlzaWJsZVByb3BlcnR5IC0gc2hvdWxkIGEgdmlydHVhbCBpbWFnZSBiZSB2aXNpYmxlP1xyXG4gICAqIEBwYXJhbSBsaWdodFByb3BhZ2F0aW9uRW5hYmxlZFByb3BlcnR5IC0gaXMgbGlnaHQgcHJvcGFnYXRpb24gZW5hYmxlZD9cclxuICAgKiBAcGFyYW0gb2JqZWN0VmlzaWJsZVByb3BlcnR5IC0gaXMgdGhlIG9wdGljYWwgb2JqZWN0IHZpc2libGU/XHJcbiAgICogQHBhcmFtIG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnNcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGFycm93SW1hZ2U6IEFycm93SW1hZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICB2aXJ0dWFsSW1hZ2VWaXNpYmxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgbGlnaHRQcm9wYWdhdGlvbkVuYWJsZWRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBvYmplY3RWaXNpYmxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBBcnJvd0ltYWdlTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgc3VwZXIoIGFycm93SW1hZ2UsIHZpcnR1YWxJbWFnZVZpc2libGVQcm9wZXJ0eSwgbGlnaHRQcm9wYWdhdGlvbkVuYWJsZWRQcm9wZXJ0eSwgb2JqZWN0VmlzaWJsZVByb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBhcnJvd05vZGUgPSBuZXcgQXJyb3dOb2RlKCAwLCAwLCAwLCAxLFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxBcnJvd05vZGVPcHRpb25zPigge30sIEdPQ29uc3RhbnRzLkFSUk9XX05PREVfT1BUSU9OUywge1xyXG4gICAgICAgIGZpbGw6IGFycm93SW1hZ2UuZmlsbCxcclxuICAgICAgICBzdHJva2U6IG51bGwsXHJcbiAgICAgICAgb3BhY2l0eTogMC41IC8vIGZpeGVkIG9wYWNpdHksIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ2VvbWV0cmljLW9wdGljcy9pc3N1ZXMvMzUwI2lzc3VlY29tbWVudC0xMDYyNDM4OTk2XHJcbiAgICAgIH0gKSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggYXJyb3dOb2RlICk7XHJcblxyXG4gICAgLy8gRG9uJ3Qgc2NhbGUgdGhlIGhlYWQgYW5kIHRhaWwsIGp1c3QgdGhlIG1hZ25pdHVkZS5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ2VvbWV0cmljLW9wdGljcy9pc3N1ZXMvMjI4I2lzc3VlY29tbWVudC0xMDM5NjcyNDA0XHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIGFycm93SW1hZ2UucG9zaXRpb25Qcm9wZXJ0eSwgYXJyb3dJbWFnZS5tYWduaWZpY2F0aW9uUHJvcGVydHkgXSxcclxuICAgICAgKCBhcnJvd0ltYWdlUG9zaXRpb24sIG1hZ25pZmljYXRpb24gKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IG9wdGljVmlld1Bvc2l0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGFycm93SW1hZ2Uub3B0aWMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgICAgIGNvbnN0IG9iamVjdFZpZXdQb3NpdGlvbiA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBhcnJvd0ltYWdlLm9wdGljYWxPYmplY3QucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgICAgIGNvbnN0IGltYWdlVmlld1Bvc2l0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGFycm93SW1hZ2VQb3NpdGlvbiApO1xyXG5cclxuICAgICAgICBsZXQgbWFnbml0dWRlID0gbWFnbmlmaWNhdGlvbiAqICggb2JqZWN0Vmlld1Bvc2l0aW9uLnkgLSBvcHRpY1ZpZXdQb3NpdGlvbi55ICk7XHJcbiAgICAgICAgaWYgKCBtYWduaXR1ZGUgPT09IDAgKSB7XHJcbiAgICAgICAgICBtYWduaXR1ZGUgPSBHT0NvbnN0YW50cy5NSU5fTUFHTklUVURFOyAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2dlb21ldHJpYy1vcHRpY3MvaXNzdWVzLzMwNlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJyb3dOb2RlLnNldFRhaWxBbmRUaXAoIGltYWdlVmlld1Bvc2l0aW9uLngsIG9wdGljVmlld1Bvc2l0aW9uLnksIGltYWdlVmlld1Bvc2l0aW9uLngsIG9wdGljVmlld1Bvc2l0aW9uLnkgKyBtYWduaXR1ZGUgKTtcclxuICAgICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnQXJyb3dJbWFnZU5vZGUnLCBBcnJvd0ltYWdlTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxPQUFPQSxlQUFlLE1BQU0sMEJBQTBCO0FBRXRELE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7QUFDM0MsT0FBT0MsU0FBUyxNQUE0QiwwQ0FBMEM7QUFDdEYsU0FBU0MsY0FBYyxRQUFRLHVDQUF1QztBQUN0RSxPQUFPQyxnQkFBZ0IsTUFBbUMsdUJBQXVCO0FBRWpGLE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFJeEQsZUFBZSxNQUFNQyxjQUFjLFNBQVNGLGdCQUFnQixDQUFDO0VBRTNEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsVUFBc0IsRUFDdEJDLDJCQUF1RCxFQUN2REMsK0JBQTJELEVBQzNEQyxxQkFBaUQsRUFDakRDLGtCQUF1QyxFQUN2Q0MsZUFBc0MsRUFBRztJQUUzRCxLQUFLLENBQUVMLFVBQVUsRUFBRUMsMkJBQTJCLEVBQUVDLCtCQUErQixFQUFFQyxxQkFBcUIsRUFBRUUsZUFBZ0IsQ0FBQztJQUV6SCxNQUFNQyxTQUFTLEdBQUcsSUFBSVosU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDekNDLGNBQWMsQ0FBb0IsQ0FBQyxDQUFDLEVBQUVGLFdBQVcsQ0FBQ2Msa0JBQWtCLEVBQUU7TUFDcEVDLElBQUksRUFBRVIsVUFBVSxDQUFDUSxJQUFJO01BQ3JCQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxPQUFPLEVBQUUsR0FBRyxDQUFDO0lBQ2YsQ0FBRSxDQUFFLENBQUM7O0lBQ1AsSUFBSSxDQUFDQyxRQUFRLENBQUVMLFNBQVUsQ0FBQzs7SUFFMUI7SUFDQTtJQUNBVCxTQUFTLENBQUNlLFNBQVMsQ0FBRSxDQUFFWixVQUFVLENBQUNhLGdCQUFnQixFQUFFYixVQUFVLENBQUNjLHFCQUFxQixDQUFFLEVBQ3BGLENBQUVDLGtCQUFrQixFQUFFQyxhQUFhLEtBQU07TUFFdkMsTUFBTUMsaUJBQWlCLEdBQUdiLGtCQUFrQixDQUFDYyxtQkFBbUIsQ0FBRWxCLFVBQVUsQ0FBQ21CLEtBQUssQ0FBQ04sZ0JBQWdCLENBQUNPLEtBQU0sQ0FBQztNQUMzRyxNQUFNQyxrQkFBa0IsR0FBR2pCLGtCQUFrQixDQUFDYyxtQkFBbUIsQ0FBRWxCLFVBQVUsQ0FBQ3NCLGFBQWEsQ0FBQ1QsZ0JBQWdCLENBQUNPLEtBQU0sQ0FBQztNQUNwSCxNQUFNRyxpQkFBaUIsR0FBR25CLGtCQUFrQixDQUFDYyxtQkFBbUIsQ0FBRUgsa0JBQW1CLENBQUM7TUFFdEYsSUFBSVMsU0FBUyxHQUFHUixhQUFhLElBQUtLLGtCQUFrQixDQUFDSSxDQUFDLEdBQUdSLGlCQUFpQixDQUFDUSxDQUFDLENBQUU7TUFDOUUsSUFBS0QsU0FBUyxLQUFLLENBQUMsRUFBRztRQUNyQkEsU0FBUyxHQUFHL0IsV0FBVyxDQUFDaUMsYUFBYSxDQUFDLENBQUM7TUFDekM7O01BRUFwQixTQUFTLENBQUNxQixhQUFhLENBQUVKLGlCQUFpQixDQUFDSyxDQUFDLEVBQUVYLGlCQUFpQixDQUFDUSxDQUFDLEVBQUVGLGlCQUFpQixDQUFDSyxDQUFDLEVBQUVYLGlCQUFpQixDQUFDUSxDQUFDLEdBQUdELFNBQVUsQ0FBQztJQUMzSCxDQUFFLENBQUM7RUFDUDtBQUNGO0FBRUFoQyxlQUFlLENBQUNxQyxRQUFRLENBQUUsZ0JBQWdCLEVBQUUvQixjQUFlLENBQUMifQ==