// Copyright 2021-2022, University of Colorado Boulder

/**
 * FocalPointNode displays a focal point. Its position updates to match the model.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Circle, Node } from '../../../../scenery/js/imports.js';
import geometricOptics from '../../geometricOptics.js';
import GOColors from '../GOColors.js';
export default class FocalPointNode extends Node {
  constructor(pointProperty, modelViewTransform, providedOptions) {
    const options = optionize()({
      // NodeOptions
      children: [FocalPointNode.createIcon()],
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);
    super(options);
    pointProperty.link(focalPoint => {
      this.center = modelViewTransform.modelToViewPosition(focalPoint);
    });
    this.addLinkedElement(pointProperty, {
      tandem: options.tandem.createTandem(pointProperty.tandem.name)
    });
  }

  /**
   * Returns an icon for the focal point
   */
  static createIcon(radius = 7) {
    const circleNode = new Circle(radius, {
      fill: GOColors.focalPointFillProperty,
      stroke: GOColors.focalPointStrokeProperty
    });
    const centerPointNode = new Circle(2, {
      fill: GOColors.focalPointStrokeProperty
    });
    return new Node({
      children: [circleNode, centerPointNode]
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('FocalPointNode', FocalPointNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJDaXJjbGUiLCJOb2RlIiwiZ2VvbWV0cmljT3B0aWNzIiwiR09Db2xvcnMiLCJGb2NhbFBvaW50Tm9kZSIsImNvbnN0cnVjdG9yIiwicG9pbnRQcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjaGlsZHJlbiIsImNyZWF0ZUljb24iLCJwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQiLCJsaW5rIiwiZm9jYWxQb2ludCIsImNlbnRlciIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJhZGRMaW5rZWRFbGVtZW50IiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwibmFtZSIsInJhZGl1cyIsImNpcmNsZU5vZGUiLCJmaWxsIiwiZm9jYWxQb2ludEZpbGxQcm9wZXJ0eSIsInN0cm9rZSIsImZvY2FsUG9pbnRTdHJva2VQcm9wZXJ0eSIsImNlbnRlclBvaW50Tm9kZSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZvY2FsUG9pbnROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZvY2FsUG9pbnROb2RlIGRpc3BsYXlzIGEgZm9jYWwgcG9pbnQuIEl0cyBwb3NpdGlvbiB1cGRhdGVzIHRvIG1hdGNoIHRoZSBtb2RlbC5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIE5vZGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdlb21ldHJpY09wdGljcyBmcm9tICcuLi8uLi9nZW9tZXRyaWNPcHRpY3MuanMnO1xyXG5pbXBvcnQgR09Db2xvcnMgZnJvbSAnLi4vR09Db2xvcnMuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1JlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEZvY2FsUG9pbnROb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJyB8ICd2aXNpYmxlUHJvcGVydHknPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvY2FsUG9pbnROb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcG9pbnRQcm9wZXJ0eTogUmVhZE9ubHlQcm9wZXJ0eTxWZWN0b3IyPixcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogRm9jYWxQb2ludE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Rm9jYWxQb2ludE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIE5vZGVPcHRpb25zXHJcbiAgICAgIGNoaWxkcmVuOiBbIEZvY2FsUG9pbnROb2RlLmNyZWF0ZUljb24oKSBdLFxyXG4gICAgICBwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQ6IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHBvaW50UHJvcGVydHkubGluayggZm9jYWxQb2ludCA9PiB7XHJcbiAgICAgIHRoaXMuY2VudGVyID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGZvY2FsUG9pbnQgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIHBvaW50UHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oIHBvaW50UHJvcGVydHkudGFuZGVtLm5hbWUgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhbiBpY29uIGZvciB0aGUgZm9jYWwgcG9pbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZUljb24oIHJhZGl1cyA9IDcgKTogTm9kZSB7XHJcbiAgICBjb25zdCBjaXJjbGVOb2RlID0gbmV3IENpcmNsZSggcmFkaXVzLCB7XHJcbiAgICAgIGZpbGw6IEdPQ29sb3JzLmZvY2FsUG9pbnRGaWxsUHJvcGVydHksXHJcbiAgICAgIHN0cm9rZTogR09Db2xvcnMuZm9jYWxQb2ludFN0cm9rZVByb3BlcnR5XHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBjZW50ZXJQb2ludE5vZGUgPSBuZXcgQ2lyY2xlKCAyLCB7XHJcbiAgICAgIGZpbGw6IEdPQ29sb3JzLmZvY2FsUG9pbnRTdHJva2VQcm9wZXJ0eVxyXG4gICAgfSApO1xyXG4gICAgcmV0dXJuIG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIGNpcmNsZU5vZGUsIGNlbnRlclBvaW50Tm9kZSBdXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnRm9jYWxQb2ludE5vZGUnLCBGb2NhbFBvaW50Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxRQUFxQixtQ0FBbUM7QUFDN0UsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxRQUFRLE1BQU0sZ0JBQWdCO0FBUXJDLGVBQWUsTUFBTUMsY0FBYyxTQUFTSCxJQUFJLENBQUM7RUFFeENJLFdBQVdBLENBQUVDLGFBQXdDLEVBQ3hDQyxrQkFBdUMsRUFDdkNDLGVBQXNDLEVBQUc7SUFFM0QsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQWtELENBQUMsQ0FBRTtNQUU1RTtNQUNBVyxRQUFRLEVBQUUsQ0FBRU4sY0FBYyxDQUFDTyxVQUFVLENBQUMsQ0FBQyxDQUFFO01BQ3pDQyxpQ0FBaUMsRUFBRTtJQUNyQyxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFQyxPQUFRLENBQUM7SUFFaEJILGFBQWEsQ0FBQ08sSUFBSSxDQUFFQyxVQUFVLElBQUk7TUFDaEMsSUFBSSxDQUFDQyxNQUFNLEdBQUdSLGtCQUFrQixDQUFDUyxtQkFBbUIsQ0FBRUYsVUFBVyxDQUFDO0lBQ3BFLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0csZ0JBQWdCLENBQUVYLGFBQWEsRUFBRTtNQUNwQ1ksTUFBTSxFQUFFVCxPQUFPLENBQUNTLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFYixhQUFhLENBQUNZLE1BQU0sQ0FBQ0UsSUFBSztJQUNqRSxDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjVCxVQUFVQSxDQUFFVSxNQUFNLEdBQUcsQ0FBQyxFQUFTO0lBQzNDLE1BQU1DLFVBQVUsR0FBRyxJQUFJdEIsTUFBTSxDQUFFcUIsTUFBTSxFQUFFO01BQ3JDRSxJQUFJLEVBQUVwQixRQUFRLENBQUNxQixzQkFBc0I7TUFDckNDLE1BQU0sRUFBRXRCLFFBQVEsQ0FBQ3VCO0lBQ25CLENBQUUsQ0FBQztJQUNILE1BQU1DLGVBQWUsR0FBRyxJQUFJM0IsTUFBTSxDQUFFLENBQUMsRUFBRTtNQUNyQ3VCLElBQUksRUFBRXBCLFFBQVEsQ0FBQ3VCO0lBQ2pCLENBQUUsQ0FBQztJQUNILE9BQU8sSUFBSXpCLElBQUksQ0FBRTtNQUNmUyxRQUFRLEVBQUUsQ0FBRVksVUFBVSxFQUFFSyxlQUFlO0lBQ3pDLENBQUUsQ0FBQztFQUNMO0VBRWdCQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTFCLGVBQWUsQ0FBQzRCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRTFCLGNBQWUsQ0FBQyJ9