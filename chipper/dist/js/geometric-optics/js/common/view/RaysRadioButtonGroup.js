// Copyright 2021-2022, University of Colorado Boulder

/**
 * RaysRadioButtonGroup is the radio button group labeled 'Rays', for choosing a representation of rays.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Text } from '../../../../scenery/js/imports.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import geometricOptics from '../../geometricOptics.js';
import GeometricOpticsStrings from '../../GeometricOpticsStrings.js';
import GOConstants from '../GOConstants.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class RaysRadioButtonGroup extends VerticalAquaRadioButtonGroup {
  constructor(raysTypeProperty, providedOptions) {
    const options = optionize()({
      // VerticalAquaRadioButtonGroupOptions
      spacing: 4,
      align: 'left',
      radioButtonOptions: {
        radius: 7
      },
      touchAreaXDilation: 10,
      mouseAreaXDilation: 10
    }, providedOptions);

    // items for ray Mode radio buttons
    const items = [createItem('marginal', GeometricOpticsStrings.radioButton.marginalStringProperty, options.tandem, 'marginalRadioButton'), createItem('principal', GeometricOpticsStrings.radioButton.principalStringProperty, options.tandem, 'principalRadioButton'), createItem('many', GeometricOpticsStrings.radioButton.manyStringProperty, options.tandem, 'manyRadioButton'), createItem('none', GeometricOpticsStrings.radioButton.noneStringProperty, options.tandem, 'noneRadioButton')];
    super(raysTypeProperty, items, options);
  }
}

/**
 * Creates an item for the radio button group.
 * @param value - value associated with the radio button
 * @param labelStringProperty - label that appears on the radio button
 * @param groupTandem - used to associate the item's tandem with the radio-button group
 * @param itemTandemName - used to create the item's tandem
 */
function createItem(value, labelStringProperty, groupTandem, itemTandemName) {
  return {
    value: value,
    createNode: tandem => new Text(labelStringProperty, {
      font: GOConstants.CONTROL_FONT,
      maxWidth: 65,
      tandem: tandem.createTandem('labelText')
    }),
    tandemName: itemTandemName
  };
}
geometricOptics.register('RaysRadioButtonGroup', RaysRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cCIsImdlb21ldHJpY09wdGljcyIsIkdlb21ldHJpY09wdGljc1N0cmluZ3MiLCJHT0NvbnN0YW50cyIsIm9wdGlvbml6ZSIsIlJheXNSYWRpb0J1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJyYXlzVHlwZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNwYWNpbmciLCJhbGlnbiIsInJhZGlvQnV0dG9uT3B0aW9ucyIsInJhZGl1cyIsInRvdWNoQXJlYVhEaWxhdGlvbiIsIm1vdXNlQXJlYVhEaWxhdGlvbiIsIml0ZW1zIiwiY3JlYXRlSXRlbSIsInJhZGlvQnV0dG9uIiwibWFyZ2luYWxTdHJpbmdQcm9wZXJ0eSIsInRhbmRlbSIsInByaW5jaXBhbFN0cmluZ1Byb3BlcnR5IiwibWFueVN0cmluZ1Byb3BlcnR5Iiwibm9uZVN0cmluZ1Byb3BlcnR5IiwidmFsdWUiLCJsYWJlbFN0cmluZ1Byb3BlcnR5IiwiZ3JvdXBUYW5kZW0iLCJpdGVtVGFuZGVtTmFtZSIsImNyZWF0ZU5vZGUiLCJmb250IiwiQ09OVFJPTF9GT05UIiwibWF4V2lkdGgiLCJjcmVhdGVUYW5kZW0iLCJ0YW5kZW1OYW1lIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSYXlzUmFkaW9CdXR0b25Hcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSYXlzUmFkaW9CdXR0b25Hcm91cCBpcyB0aGUgcmFkaW8gYnV0dG9uIGdyb3VwIGxhYmVsZWQgJ1JheXMnLCBmb3IgY2hvb3NpbmcgYSByZXByZXNlbnRhdGlvbiBvZiByYXlzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAsIHsgVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBnZW9tZXRyaWNPcHRpY3MgZnJvbSAnLi4vLi4vZ2VvbWV0cmljT3B0aWNzLmpzJztcclxuaW1wb3J0IEdlb21ldHJpY09wdGljc1N0cmluZ3MgZnJvbSAnLi4vLi4vR2VvbWV0cmljT3B0aWNzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBHT0NvbnN0YW50cyBmcm9tICcuLi9HT0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IFJheXNUeXBlIH0gZnJvbSAnLi4vbW9kZWwvUmF5c1R5cGUuanMnO1xyXG5pbXBvcnQgeyBBcXVhUmFkaW9CdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQXF1YVJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgUmF5c1JhZGlvQnV0dG9uR3JvdXBPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8VmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJheXNSYWRpb0J1dHRvbkdyb3VwIGV4dGVuZHMgVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cDxSYXlzVHlwZT4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHJheXNUeXBlUHJvcGVydHk6IFByb3BlcnR5PFJheXNUeXBlPiwgcHJvdmlkZWRPcHRpb25zOiBSYXlzUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSYXlzUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMsIFNlbGZPcHRpb25zLCBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cE9wdGlvbnNcclxuICAgICAgc3BhY2luZzogNCxcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgcmFkaW9CdXR0b25PcHRpb25zOiB7IHJhZGl1czogNyB9LFxyXG4gICAgICB0b3VjaEFyZWFYRGlsYXRpb246IDEwLFxyXG4gICAgICBtb3VzZUFyZWFYRGlsYXRpb246IDEwXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBpdGVtcyBmb3IgcmF5IE1vZGUgcmFkaW8gYnV0dG9uc1xyXG4gICAgY29uc3QgaXRlbXMgPSBbXHJcbiAgICAgIGNyZWF0ZUl0ZW0oICdtYXJnaW5hbCcsIEdlb21ldHJpY09wdGljc1N0cmluZ3MucmFkaW9CdXR0b24ubWFyZ2luYWxTdHJpbmdQcm9wZXJ0eSwgb3B0aW9ucy50YW5kZW0sICdtYXJnaW5hbFJhZGlvQnV0dG9uJyApLFxyXG4gICAgICBjcmVhdGVJdGVtKCAncHJpbmNpcGFsJywgR2VvbWV0cmljT3B0aWNzU3RyaW5ncy5yYWRpb0J1dHRvbi5wcmluY2lwYWxTdHJpbmdQcm9wZXJ0eSwgb3B0aW9ucy50YW5kZW0sICdwcmluY2lwYWxSYWRpb0J1dHRvbicgKSxcclxuICAgICAgY3JlYXRlSXRlbSggJ21hbnknLCBHZW9tZXRyaWNPcHRpY3NTdHJpbmdzLnJhZGlvQnV0dG9uLm1hbnlTdHJpbmdQcm9wZXJ0eSwgb3B0aW9ucy50YW5kZW0sICdtYW55UmFkaW9CdXR0b24nICksXHJcbiAgICAgIGNyZWF0ZUl0ZW0oICdub25lJywgR2VvbWV0cmljT3B0aWNzU3RyaW5ncy5yYWRpb0J1dHRvbi5ub25lU3RyaW5nUHJvcGVydHksIG9wdGlvbnMudGFuZGVtLCAnbm9uZVJhZGlvQnV0dG9uJyApXHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCByYXlzVHlwZVByb3BlcnR5LCBpdGVtcywgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gaXRlbSBmb3IgdGhlIHJhZGlvIGJ1dHRvbiBncm91cC5cclxuICogQHBhcmFtIHZhbHVlIC0gdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSByYWRpbyBidXR0b25cclxuICogQHBhcmFtIGxhYmVsU3RyaW5nUHJvcGVydHkgLSBsYWJlbCB0aGF0IGFwcGVhcnMgb24gdGhlIHJhZGlvIGJ1dHRvblxyXG4gKiBAcGFyYW0gZ3JvdXBUYW5kZW0gLSB1c2VkIHRvIGFzc29jaWF0ZSB0aGUgaXRlbSdzIHRhbmRlbSB3aXRoIHRoZSByYWRpby1idXR0b24gZ3JvdXBcclxuICogQHBhcmFtIGl0ZW1UYW5kZW1OYW1lIC0gdXNlZCB0byBjcmVhdGUgdGhlIGl0ZW0ncyB0YW5kZW1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUl0ZW0oIHZhbHVlOiBSYXlzVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgbGFiZWxTdHJpbmdQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPixcclxuICAgICAgICAgICAgICAgICAgICAgZ3JvdXBUYW5kZW06IFRhbmRlbSxcclxuICAgICAgICAgICAgICAgICAgICAgaXRlbVRhbmRlbU5hbWU6IHN0cmluZyApOiBBcXVhUmFkaW9CdXR0b25Hcm91cEl0ZW08UmF5c1R5cGU+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgY3JlYXRlTm9kZTogdGFuZGVtID0+IG5ldyBUZXh0KCBsYWJlbFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IEdPQ29uc3RhbnRzLkNPTlRST0xfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDY1LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnIClcclxuICAgIH0gKSxcclxuICAgIHRhbmRlbU5hbWU6IGl0ZW1UYW5kZW1OYW1lXHJcbiAgfTtcclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnUmF5c1JhZGlvQnV0dG9uR3JvdXAnLCBSYXlzUmFkaW9CdXR0b25Hcm91cCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsNEJBQTRCLE1BQStDLG9EQUFvRDtBQUN0SSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHNCQUFzQixNQUFNLGlDQUFpQztBQUNwRSxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBRzNDLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBVW5GLGVBQWUsTUFBTUMsb0JBQW9CLFNBQVNMLDRCQUE0QixDQUFXO0VBRWhGTSxXQUFXQSxDQUFFQyxnQkFBb0MsRUFBRUMsZUFBNEMsRUFBRztJQUV2RyxNQUFNQyxPQUFPLEdBQUdMLFNBQVMsQ0FBZ0YsQ0FBQyxDQUFFO01BRTFHO01BQ0FNLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLEtBQUssRUFBRSxNQUFNO01BQ2JDLGtCQUFrQixFQUFFO1FBQUVDLE1BQU0sRUFBRTtNQUFFLENBQUM7TUFDakNDLGtCQUFrQixFQUFFLEVBQUU7TUFDdEJDLGtCQUFrQixFQUFFO0lBQ3RCLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNUSxLQUFLLEdBQUcsQ0FDWkMsVUFBVSxDQUFFLFVBQVUsRUFBRWYsc0JBQXNCLENBQUNnQixXQUFXLENBQUNDLHNCQUFzQixFQUFFVixPQUFPLENBQUNXLE1BQU0sRUFBRSxxQkFBc0IsQ0FBQyxFQUMxSEgsVUFBVSxDQUFFLFdBQVcsRUFBRWYsc0JBQXNCLENBQUNnQixXQUFXLENBQUNHLHVCQUF1QixFQUFFWixPQUFPLENBQUNXLE1BQU0sRUFBRSxzQkFBdUIsQ0FBQyxFQUM3SEgsVUFBVSxDQUFFLE1BQU0sRUFBRWYsc0JBQXNCLENBQUNnQixXQUFXLENBQUNJLGtCQUFrQixFQUFFYixPQUFPLENBQUNXLE1BQU0sRUFBRSxpQkFBa0IsQ0FBQyxFQUM5R0gsVUFBVSxDQUFFLE1BQU0sRUFBRWYsc0JBQXNCLENBQUNnQixXQUFXLENBQUNLLGtCQUFrQixFQUFFZCxPQUFPLENBQUNXLE1BQU0sRUFBRSxpQkFBa0IsQ0FBQyxDQUMvRztJQUVELEtBQUssQ0FBRWIsZ0JBQWdCLEVBQUVTLEtBQUssRUFBRVAsT0FBUSxDQUFDO0VBQzNDO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTUSxVQUFVQSxDQUFFTyxLQUFlLEVBQ2ZDLG1CQUE4QyxFQUM5Q0MsV0FBbUIsRUFDbkJDLGNBQXNCLEVBQXVDO0VBQ2hGLE9BQU87SUFDTEgsS0FBSyxFQUFFQSxLQUFLO0lBQ1pJLFVBQVUsRUFBRVIsTUFBTSxJQUFJLElBQUlyQixJQUFJLENBQUUwQixtQkFBbUIsRUFBRTtNQUNuREksSUFBSSxFQUFFMUIsV0FBVyxDQUFDMkIsWUFBWTtNQUM5QkMsUUFBUSxFQUFFLEVBQUU7TUFDWlgsTUFBTSxFQUFFQSxNQUFNLENBQUNZLFlBQVksQ0FBRSxXQUFZO0lBQzNDLENBQUUsQ0FBQztJQUNIQyxVQUFVLEVBQUVOO0VBQ2QsQ0FBQztBQUNIO0FBRUExQixlQUFlLENBQUNpQyxRQUFRLENBQUUsc0JBQXNCLEVBQUU3QixvQkFBcUIsQ0FBQyJ9