// Copyright 2021-2022, University of Colorado Boulder

/**
 * OpticalAxisNode is the horizontal line that passes through the geometric center of a lens or mirror.
 * It is referred to as 'optical axis', or sometimes as 'principal axis'.
 * It extends from left to right edges of the browser window.
 *
 * @author Sarah Chang (Swarthmore College)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Line } from '../../../../scenery/js/imports.js';
import geometricOptics from '../../geometricOptics.js';
import GOColors from '../GOColors.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class OpticalAxisNode extends Line {
  /**
   * @param opticPositionProperty - position of the optic
   * @param modelVisibleBoundsProperty - ScreenView's visibleBounds in the model coordinate frame, with the zoom transform applied
   * @param modelViewTransform
   * @param providedOptions
   */
  constructor(opticPositionProperty, modelVisibleBoundsProperty, modelViewTransform, providedOptions) {
    // create optical axis line, with arbitrary length values.
    super(0, 0, 1, 0, optionize()({
      // LineOptions
      stroke: GOColors.opticalAxisStrokeProperty,
      lineWidth: 2,
      lineDash: [8, 5]
    }, providedOptions));

    // Set the horizontal extents of the optical axis line.
    modelVisibleBoundsProperty.link(modelVisibleBounds => {
      this.setX1(modelViewTransform.modelToViewX(modelVisibleBounds.minX));
      this.setX2(modelViewTransform.modelToViewX(modelVisibleBounds.maxX));
    });

    // Set the y position of the optical axis line.
    opticPositionProperty.link(position => {
      const yView = modelViewTransform.modelToViewY(position.y);
      this.setY1(yView);
      this.setY2(yView);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('OpticalAxisNode', OpticalAxisNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lIiwiZ2VvbWV0cmljT3B0aWNzIiwiR09Db2xvcnMiLCJvcHRpb25pemUiLCJPcHRpY2FsQXhpc05vZGUiLCJjb25zdHJ1Y3RvciIsIm9wdGljUG9zaXRpb25Qcm9wZXJ0eSIsIm1vZGVsVmlzaWJsZUJvdW5kc1Byb3BlcnR5IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicHJvdmlkZWRPcHRpb25zIiwic3Ryb2tlIiwib3B0aWNhbEF4aXNTdHJva2VQcm9wZXJ0eSIsImxpbmVXaWR0aCIsImxpbmVEYXNoIiwibGluayIsIm1vZGVsVmlzaWJsZUJvdW5kcyIsInNldFgxIiwibW9kZWxUb1ZpZXdYIiwibWluWCIsInNldFgyIiwibWF4WCIsInBvc2l0aW9uIiwieVZpZXciLCJtb2RlbFRvVmlld1kiLCJ5Iiwic2V0WTEiLCJzZXRZMiIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk9wdGljYWxBeGlzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBPcHRpY2FsQXhpc05vZGUgaXMgdGhlIGhvcml6b250YWwgbGluZSB0aGF0IHBhc3NlcyB0aHJvdWdoIHRoZSBnZW9tZXRyaWMgY2VudGVyIG9mIGEgbGVucyBvciBtaXJyb3IuXHJcbiAqIEl0IGlzIHJlZmVycmVkIHRvIGFzICdvcHRpY2FsIGF4aXMnLCBvciBzb21ldGltZXMgYXMgJ3ByaW5jaXBhbCBheGlzJy5cclxuICogSXQgZXh0ZW5kcyBmcm9tIGxlZnQgdG8gcmlnaHQgZWRnZXMgb2YgdGhlIGJyb3dzZXIgd2luZG93LlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhcmFoIENoYW5nIChTd2FydGhtb3JlIENvbGxlZ2UpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBMaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBnZW9tZXRyaWNPcHRpY3MgZnJvbSAnLi4vLi4vZ2VvbWV0cmljT3B0aWNzLmpzJztcclxuaW1wb3J0IEdPQ29sb3JzIGZyb20gJy4uL0dPQ29sb3JzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaWNrT3B0aW9uYWwgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tPcHRpb25hbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIE9wdGljYWxBeGlzTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmXHJcbiAgUGlja1JlcXVpcmVkPExpbmVPcHRpb25zLCAndmlzaWJsZVByb3BlcnR5Jz4gJlxyXG4gIFBpY2tPcHRpb25hbDxMaW5lT3B0aW9ucywgJ3N0cm9rZScgfCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcHRpY2FsQXhpc05vZGUgZXh0ZW5kcyBMaW5lIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG9wdGljUG9zaXRpb25Qcm9wZXJ0eSAtIHBvc2l0aW9uIG9mIHRoZSBvcHRpY1xyXG4gICAqIEBwYXJhbSBtb2RlbFZpc2libGVCb3VuZHNQcm9wZXJ0eSAtIFNjcmVlblZpZXcncyB2aXNpYmxlQm91bmRzIGluIHRoZSBtb2RlbCBjb29yZGluYXRlIGZyYW1lLCB3aXRoIHRoZSB6b29tIHRyYW5zZm9ybSBhcHBsaWVkXHJcbiAgICogQHBhcmFtIG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnNcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG9wdGljUG9zaXRpb25Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpc2libGVCb3VuZHNQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Qm91bmRzMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IE9wdGljYWxBeGlzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gY3JlYXRlIG9wdGljYWwgYXhpcyBsaW5lLCB3aXRoIGFyYml0cmFyeSBsZW5ndGggdmFsdWVzLlxyXG4gICAgc3VwZXIoIDAsIDAsIDEsIDAsIG9wdGlvbml6ZTxPcHRpY2FsQXhpc05vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTGluZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIExpbmVPcHRpb25zXHJcbiAgICAgIHN0cm9rZTogR09Db2xvcnMub3B0aWNhbEF4aXNTdHJva2VQcm9wZXJ0eSxcclxuICAgICAgbGluZVdpZHRoOiAyLFxyXG4gICAgICBsaW5lRGFzaDogWyA4LCA1IF1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApICk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSBob3Jpem9udGFsIGV4dGVudHMgb2YgdGhlIG9wdGljYWwgYXhpcyBsaW5lLlxyXG4gICAgbW9kZWxWaXNpYmxlQm91bmRzUHJvcGVydHkubGluayggbW9kZWxWaXNpYmxlQm91bmRzID0+IHtcclxuICAgICAgdGhpcy5zZXRYMSggbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggbW9kZWxWaXNpYmxlQm91bmRzLm1pblggKSApO1xyXG4gICAgICB0aGlzLnNldFgyKCBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBtb2RlbFZpc2libGVCb3VuZHMubWF4WCApICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSB5IHBvc2l0aW9uIG9mIHRoZSBvcHRpY2FsIGF4aXMgbGluZS5cclxuICAgIG9wdGljUG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBwb3NpdGlvbiA9PiB7XHJcbiAgICAgIGNvbnN0IHlWaWV3ID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggcG9zaXRpb24ueSApO1xyXG4gICAgICB0aGlzLnNldFkxKCB5VmlldyApO1xyXG4gICAgICB0aGlzLnNldFkyKCB5VmlldyApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ09wdGljYWxBeGlzTm9kZScsIE9wdGljYWxBeGlzTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFNQSxTQUFTQSxJQUFJLFFBQXFCLG1DQUFtQztBQUNyRSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLFFBQVEsTUFBTSxnQkFBZ0I7QUFDckMsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFVbkYsZUFBZSxNQUFNQyxlQUFlLFNBQVNKLElBQUksQ0FBQztFQUVoRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ssV0FBV0EsQ0FBRUMscUJBQWlELEVBQ2pEQywwQkFBc0QsRUFDdERDLGtCQUF1QyxFQUN2Q0MsZUFBdUMsRUFBRztJQUU1RDtJQUNBLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVOLFNBQVMsQ0FBbUQsQ0FBQyxDQUFFO01BRWhGO01BQ0FPLE1BQU0sRUFBRVIsUUFBUSxDQUFDUyx5QkFBeUI7TUFDMUNDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFFBQVEsRUFBRSxDQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2xCLENBQUMsRUFBRUosZUFBZ0IsQ0FBRSxDQUFDOztJQUV0QjtJQUNBRiwwQkFBMEIsQ0FBQ08sSUFBSSxDQUFFQyxrQkFBa0IsSUFBSTtNQUNyRCxJQUFJLENBQUNDLEtBQUssQ0FBRVIsa0JBQWtCLENBQUNTLFlBQVksQ0FBRUYsa0JBQWtCLENBQUNHLElBQUssQ0FBRSxDQUFDO01BQ3hFLElBQUksQ0FBQ0MsS0FBSyxDQUFFWCxrQkFBa0IsQ0FBQ1MsWUFBWSxDQUFFRixrQkFBa0IsQ0FBQ0ssSUFBSyxDQUFFLENBQUM7SUFDMUUsQ0FBRSxDQUFDOztJQUVIO0lBQ0FkLHFCQUFxQixDQUFDUSxJQUFJLENBQUVPLFFBQVEsSUFBSTtNQUN0QyxNQUFNQyxLQUFLLEdBQUdkLGtCQUFrQixDQUFDZSxZQUFZLENBQUVGLFFBQVEsQ0FBQ0csQ0FBRSxDQUFDO01BQzNELElBQUksQ0FBQ0MsS0FBSyxDQUFFSCxLQUFNLENBQUM7TUFDbkIsSUFBSSxDQUFDSSxLQUFLLENBQUVKLEtBQU0sQ0FBQztJQUNyQixDQUFFLENBQUM7RUFDTDtFQUVnQkssT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUExQixlQUFlLENBQUM0QixRQUFRLENBQUUsaUJBQWlCLEVBQUV6QixlQUFnQixDQUFDIn0=