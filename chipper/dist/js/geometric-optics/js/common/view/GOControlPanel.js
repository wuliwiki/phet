// Copyright 2021-2023, University of Colorado Boulder

/**
 * GOControlPanel is the main control panel for both screens.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Martin Veillette
 */

import { HBox, VSeparator } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import geometricOptics from '../../geometricOptics.js';
import GOColors from '../GOColors.js';
import VisibilityCheckboxGroup from './VisibilityCheckboxGroup.js';
import optionize from '../../../../phet-core/js/optionize.js';
import RaysSubpanel from './RaysSubpanel.js';
import OpticSubpanel from './OpticSubpanel.js';
export default class GOControlPanel extends Panel {
  /**
   * @param optic
   * @param raysTypeProperty - representation for rays
   * @param visibleProperties
   * @param virtualImageCheckboxEnabledProperty - whether to enable the 'Virtual Image' checkbox
   * @param providedOptions
   */
  constructor(optic, raysTypeProperty, visibleProperties, virtualImageCheckboxEnabledProperty, providedOptions) {
    const options = optionize()({
      // PanelOptions
      xMargin: 15,
      yMargin: 10,
      fill: GOColors.panelFillProperty,
      stroke: GOColors.panelStrokeProperty,
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    }, providedOptions);
    const raysSubpanel = new RaysSubpanel(raysTypeProperty, options.tandem.createTandem('raysSubpanel'));
    const opticSubpanel = new OpticSubpanel(optic, options.tandem.createTandem('opticSubpanel'));
    const checkboxGroup = new VisibilityCheckboxGroup(visibleProperties, optic, virtualImageCheckboxEnabledProperty, {
      isBasicsVersion: options.isBasicsVersion,
      tandem: options.tandem.createTandem('checkboxGroup')
    });

    // Vertical separators between sections of the control panel
    const leftSeparator = new VSeparator({
      stroke: GOColors.panelSeparatorStrokeProperty
    });
    const rightSeparator = new VSeparator({
      stroke: GOColors.panelSeparatorStrokeProperty
    });
    const content = new HBox({
      children: [raysSubpanel, leftSeparator, opticSubpanel, rightSeparator, checkboxGroup],
      spacing: 15,
      align: 'center'
    });
    super(content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('GOControlPanel', GOControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIQm94IiwiVlNlcGFyYXRvciIsIlBhbmVsIiwiZ2VvbWV0cmljT3B0aWNzIiwiR09Db2xvcnMiLCJWaXNpYmlsaXR5Q2hlY2tib3hHcm91cCIsIm9wdGlvbml6ZSIsIlJheXNTdWJwYW5lbCIsIk9wdGljU3VicGFuZWwiLCJHT0NvbnRyb2xQYW5lbCIsImNvbnN0cnVjdG9yIiwib3B0aWMiLCJyYXlzVHlwZVByb3BlcnR5IiwidmlzaWJsZVByb3BlcnRpZXMiLCJ2aXJ0dWFsSW1hZ2VDaGVja2JveEVuYWJsZWRQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImZpbGwiLCJwYW5lbEZpbGxQcm9wZXJ0eSIsInN0cm9rZSIsInBhbmVsU3Ryb2tlUHJvcGVydHkiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvRmVhdHVyZWQiLCJyYXlzU3VicGFuZWwiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJvcHRpY1N1YnBhbmVsIiwiY2hlY2tib3hHcm91cCIsImlzQmFzaWNzVmVyc2lvbiIsImxlZnRTZXBhcmF0b3IiLCJwYW5lbFNlcGFyYXRvclN0cm9rZVByb3BlcnR5IiwicmlnaHRTZXBhcmF0b3IiLCJjb250ZW50IiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiYWxpZ24iLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHT0NvbnRyb2xQYW5lbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHT0NvbnRyb2xQYW5lbCBpcyB0aGUgbWFpbiBjb250cm9sIHBhbmVsIGZvciBib3RoIHNjcmVlbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgSEJveCwgVlNlcGFyYXRvciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCwgeyBQYW5lbE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBHT0NvbG9ycyBmcm9tICcuLi9HT0NvbG9ycy5qcyc7XHJcbmltcG9ydCBPcHRpYyBmcm9tICcuLi9tb2RlbC9PcHRpYy5qcyc7XHJcbmltcG9ydCB7IFJheXNUeXBlIH0gZnJvbSAnLi4vbW9kZWwvUmF5c1R5cGUuanMnO1xyXG5pbXBvcnQgVmlzaWJpbGl0eUNoZWNrYm94R3JvdXAgZnJvbSAnLi9WaXNpYmlsaXR5Q2hlY2tib3hHcm91cC5qcyc7XHJcbmltcG9ydCBWaXNpYmxlUHJvcGVydGllcyBmcm9tICcuL1Zpc2libGVQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgUmF5c1N1YnBhbmVsIGZyb20gJy4vUmF5c1N1YnBhbmVsLmpzJztcclxuaW1wb3J0IE9wdGljU3VicGFuZWwgZnJvbSAnLi9PcHRpY1N1YnBhbmVsLmpzJztcclxuaW1wb3J0IFBpY2tPcHRpb25hbCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja09wdGlvbmFsLmpzJztcclxuaW1wb3J0IHsgR09TaW1PcHRpb25zIH0gZnJvbSAnLi4vLi4vR09TaW0uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IFBpY2tSZXF1aXJlZDxHT1NpbU9wdGlvbnMsICdpc0Jhc2ljc1ZlcnNpb24nPjtcclxuXHJcbnR5cGUgR09Db250cm9sUGFuZWxPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrT3B0aW9uYWw8UGFuZWxPcHRpb25zLCAnYm90dG9tJz4gJiBQaWNrUmVxdWlyZWQ8UGFuZWxPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHT0NvbnRyb2xQYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG9wdGljXHJcbiAgICogQHBhcmFtIHJheXNUeXBlUHJvcGVydHkgLSByZXByZXNlbnRhdGlvbiBmb3IgcmF5c1xyXG4gICAqIEBwYXJhbSB2aXNpYmxlUHJvcGVydGllc1xyXG4gICAqIEBwYXJhbSB2aXJ0dWFsSW1hZ2VDaGVja2JveEVuYWJsZWRQcm9wZXJ0eSAtIHdoZXRoZXIgdG8gZW5hYmxlIHRoZSAnVmlydHVhbCBJbWFnZScgY2hlY2tib3hcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBvcHRpYzogT3B0aWMsXHJcbiAgICAgICAgICAgICAgICAgICAgICByYXlzVHlwZVByb3BlcnR5OiBQcm9wZXJ0eTxSYXlzVHlwZT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlUHJvcGVydGllczogVmlzaWJsZVByb3BlcnRpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICB2aXJ0dWFsSW1hZ2VDaGVja2JveEVuYWJsZWRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEdPQ29udHJvbFBhbmVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEdPQ29udHJvbFBhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhbmVsT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUGFuZWxPcHRpb25zXHJcbiAgICAgIHhNYXJnaW46IDE1LFxyXG4gICAgICB5TWFyZ2luOiAxMCxcclxuICAgICAgZmlsbDogR09Db2xvcnMucGFuZWxGaWxsUHJvcGVydHksXHJcbiAgICAgIHN0cm9rZTogR09Db2xvcnMucGFuZWxTdHJva2VQcm9wZXJ0eSxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5T3B0aW9uczoge1xyXG4gICAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHJheXNTdWJwYW5lbCA9IG5ldyBSYXlzU3VicGFuZWwoIHJheXNUeXBlUHJvcGVydHksIG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3JheXNTdWJwYW5lbCcgKSApO1xyXG5cclxuICAgIGNvbnN0IG9wdGljU3VicGFuZWwgPSBuZXcgT3B0aWNTdWJwYW5lbCggb3B0aWMsIG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ29wdGljU3VicGFuZWwnICkgKTtcclxuXHJcbiAgICBjb25zdCBjaGVja2JveEdyb3VwID0gbmV3IFZpc2liaWxpdHlDaGVja2JveEdyb3VwKCB2aXNpYmxlUHJvcGVydGllcywgb3B0aWMsXHJcbiAgICAgIHZpcnR1YWxJbWFnZUNoZWNrYm94RW5hYmxlZFByb3BlcnR5LCB7XHJcbiAgICAgICAgaXNCYXNpY3NWZXJzaW9uOiBvcHRpb25zLmlzQmFzaWNzVmVyc2lvbixcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NoZWNrYm94R3JvdXAnIClcclxuICAgICAgfSApO1xyXG5cclxuICAgIC8vIFZlcnRpY2FsIHNlcGFyYXRvcnMgYmV0d2VlbiBzZWN0aW9ucyBvZiB0aGUgY29udHJvbCBwYW5lbFxyXG4gICAgY29uc3QgbGVmdFNlcGFyYXRvciA9IG5ldyBWU2VwYXJhdG9yKCB7XHJcbiAgICAgIHN0cm9rZTogR09Db2xvcnMucGFuZWxTZXBhcmF0b3JTdHJva2VQcm9wZXJ0eVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgcmlnaHRTZXBhcmF0b3IgPSBuZXcgVlNlcGFyYXRvcigge1xyXG4gICAgICBzdHJva2U6IEdPQ29sb3JzLnBhbmVsU2VwYXJhdG9yU3Ryb2tlUHJvcGVydHlcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFsgcmF5c1N1YnBhbmVsLCBsZWZ0U2VwYXJhdG9yLCBvcHRpY1N1YnBhbmVsLCByaWdodFNlcGFyYXRvciwgY2hlY2tib3hHcm91cCBdLFxyXG4gICAgICBzcGFjaW5nOiAxNSxcclxuICAgICAgYWxpZ246ICdjZW50ZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW9tZXRyaWNPcHRpY3MucmVnaXN0ZXIoICdHT0NvbnRyb2xQYW5lbCcsIEdPQ29udHJvbFBhbmVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsU0FBU0EsSUFBSSxFQUFFQyxVQUFVLFFBQVEsbUNBQW1DO0FBQ3BFLE9BQU9DLEtBQUssTUFBd0IsNkJBQTZCO0FB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