// Copyright 2021-2023, University of Colorado Boulder

/**
 * CueingArrowsNode is the cueing arrows used to indicate that something can be dragged in some direction.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import geometricOptics from '../../geometricOptics.js';
import { Path } from '../../../../scenery/js/imports.js';
import ArrowShape from '../../../../scenery-phet/js/ArrowShape.js';
import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import GOPreferences from '../model/GOPreferences.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
export default class CueingArrowsNode extends Path {
  // length of the arrows, from tip to tip

  constructor(providedOptions) {
    const options = optionize()({
      // CueingArrowsNodeOptions
      direction: 'both',
      length: 35,
      // PathOptions
      fill: 'rgb( 0, 200, 0 )',
      stroke: 'black'
    }, providedOptions);
    super(createArrowsShape(options.direction, options.length), options);
    this.length = options.length;
    this.boundsProperty.link(() => {
      this.touchArea = this.localBounds.dilated(5);
      this.mouseArea = this.localBounds.dilated(3);
    });
  }
  setDirection(direction) {
    this.shape = createArrowsShape(direction, this.length);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Common method of creating the visibleProperty for cueing arrows when they are associated with a draggable Node.
   * @param inputEnabledProperty - is input enabled for the associated Node?
   * @param wasDraggedProperty - has the associated Node been dragged?
   */
  static createVisibleProperty(inputEnabledProperty, wasDraggedProperty) {
    return new DerivedProperty([GOPreferences.cueingArrowsEnabledProperty, inputEnabledProperty, wasDraggedProperty], (cueingArrowsEnabled, inputEnabled, wasDragged) => cueingArrowsEnabled && inputEnabled && !wasDragged);
  }
}
const ARROW_SHAPE_OPTIONS = {
  doubleHead: true,
  headWidth: 12,
  headHeight: 8,
  tailWidth: 3
};
function createArrowsShape(direction, length) {
  let shape;
  if (direction === 'horizontal') {
    shape = new ArrowShape(-length / 2, 0, length / 2, 0, ARROW_SHAPE_OPTIONS);
  } else if (direction === 'vertical') {
    shape = new ArrowShape(0, -length / 2, 0, length / 2, ARROW_SHAPE_OPTIONS);
  } else {
    const leftRightArrowShape = new ArrowShape(-length / 2, 0, length / 2, 0, ARROW_SHAPE_OPTIONS);
    const upDownArrowShape = new ArrowShape(0, -length / 2, 0, length / 2, ARROW_SHAPE_OPTIONS);
    shape = Shape.union([leftRightArrowShape, upDownArrowShape]);
  }
  return shape;
}
geometricOptics.register('CueingArrowsNode', CueingArrowsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,