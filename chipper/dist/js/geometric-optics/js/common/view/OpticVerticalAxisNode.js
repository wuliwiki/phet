// Copyright 2021-2022, University of Colorado Boulder

/**
 * OpticVerticalAxisNode is the vertical axis through the center of the optic. For a lens, it bisects the symmetrical
 * lens into halves. It is shown only in Principal rays mode.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node, Path } from '../../../../scenery/js/imports.js';
import geometricOptics from '../../geometricOptics.js';
import GOColors from '../GOColors.js';
export default class OpticVerticalAxisNode extends Node {
  /**
   * @param optic - the optic model element
   * @param raysTypeProperty - representation used for rays
   * @param modelViewTransform
   */
  constructor(optic, raysTypeProperty, modelViewTransform) {
    super();

    // Create a vertical dashed line through the optic, indicating the crossing plane of Principal rays.
    // See https://github.com/phetsims/geometric-optics/issues/140 for decisions about the look of this axis.
    const lineNode = new Path(modelViewTransform.modelToViewShape(optic.getVerticalAxis()), {
      stroke: GOColors.verticalAxisStrokeProperty,
      lineWidth: 5,
      opacity: 0.4
    });
    this.addChild(lineNode);

    // Make lineNode visible when Rays mode is Principal
    raysTypeProperty.link(raysType => {
      lineNode.visible = raysType === 'principal';
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('OpticVerticalAxisNode', OpticVerticalAxisNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiUGF0aCIsImdlb21ldHJpY09wdGljcyIsIkdPQ29sb3JzIiwiT3B0aWNWZXJ0aWNhbEF4aXNOb2RlIiwiY29uc3RydWN0b3IiLCJvcHRpYyIsInJheXNUeXBlUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJsaW5lTm9kZSIsIm1vZGVsVG9WaWV3U2hhcGUiLCJnZXRWZXJ0aWNhbEF4aXMiLCJzdHJva2UiLCJ2ZXJ0aWNhbEF4aXNTdHJva2VQcm9wZXJ0eSIsImxpbmVXaWR0aCIsIm9wYWNpdHkiLCJhZGRDaGlsZCIsImxpbmsiLCJyYXlzVHlwZSIsInZpc2libGUiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPcHRpY1ZlcnRpY2FsQXhpc05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT3B0aWNWZXJ0aWNhbEF4aXNOb2RlIGlzIHRoZSB2ZXJ0aWNhbCBheGlzIHRocm91Z2ggdGhlIGNlbnRlciBvZiB0aGUgb3B0aWMuIEZvciBhIGxlbnMsIGl0IGJpc2VjdHMgdGhlIHN5bW1ldHJpY2FsXHJcbiAqIGxlbnMgaW50byBoYWx2ZXMuIEl0IGlzIHNob3duIG9ubHkgaW4gUHJpbmNpcGFsIHJheXMgbW9kZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBnZW9tZXRyaWNPcHRpY3MgZnJvbSAnLi4vLi4vZ2VvbWV0cmljT3B0aWNzLmpzJztcclxuaW1wb3J0IEdPQ29sb3JzIGZyb20gJy4uL0dPQ29sb3JzLmpzJztcclxuaW1wb3J0IE9wdGljIGZyb20gJy4uL21vZGVsL09wdGljLmpzJztcclxuaW1wb3J0IHsgUmF5c1R5cGUgfSBmcm9tICcuLi9tb2RlbC9SYXlzVHlwZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcHRpY1ZlcnRpY2FsQXhpc05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG9wdGljIC0gdGhlIG9wdGljIG1vZGVsIGVsZW1lbnRcclxuICAgKiBAcGFyYW0gcmF5c1R5cGVQcm9wZXJ0eSAtIHJlcHJlc2VudGF0aW9uIHVzZWQgZm9yIHJheXNcclxuICAgKiBAcGFyYW0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBvcHRpYzogT3B0aWMsXHJcbiAgICAgICAgICAgICAgICAgICAgICByYXlzVHlwZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxSYXlzVHlwZT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIgKSB7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSB2ZXJ0aWNhbCBkYXNoZWQgbGluZSB0aHJvdWdoIHRoZSBvcHRpYywgaW5kaWNhdGluZyB0aGUgY3Jvc3NpbmcgcGxhbmUgb2YgUHJpbmNpcGFsIHJheXMuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2dlb21ldHJpYy1vcHRpY3MvaXNzdWVzLzE0MCBmb3IgZGVjaXNpb25zIGFib3V0IHRoZSBsb29rIG9mIHRoaXMgYXhpcy5cclxuICAgIGNvbnN0IGxpbmVOb2RlID0gbmV3IFBhdGgoIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1NoYXBlKCBvcHRpYy5nZXRWZXJ0aWNhbEF4aXMoKSApLCB7XHJcbiAgICAgIHN0cm9rZTogR09Db2xvcnMudmVydGljYWxBeGlzU3Ryb2tlUHJvcGVydHksXHJcbiAgICAgIGxpbmVXaWR0aDogNSxcclxuICAgICAgb3BhY2l0eTogMC40XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBsaW5lTm9kZSApO1xyXG5cclxuICAgIC8vIE1ha2UgbGluZU5vZGUgdmlzaWJsZSB3aGVuIFJheXMgbW9kZSBpcyBQcmluY2lwYWxcclxuICAgIHJheXNUeXBlUHJvcGVydHkubGluayggcmF5c1R5cGUgPT4ge1xyXG4gICAgICBsaW5lTm9kZS52aXNpYmxlID0gKCByYXlzVHlwZSA9PT0gJ3ByaW5jaXBhbCcgKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW9tZXRyaWNPcHRpY3MucmVnaXN0ZXIoICdPcHRpY1ZlcnRpY2FsQXhpc05vZGUnLCBPcHRpY1ZlcnRpY2FsQXhpc05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFTQSxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxRQUFRLE1BQU0sZ0JBQWdCO0FBSXJDLGVBQWUsTUFBTUMscUJBQXFCLFNBQVNKLElBQUksQ0FBQztFQUV0RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NLLFdBQVdBLENBQUVDLEtBQVksRUFDWkMsZ0JBQTZDLEVBQzdDQyxrQkFBdUMsRUFBRztJQUU1RCxLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBO0lBQ0EsTUFBTUMsUUFBUSxHQUFHLElBQUlSLElBQUksQ0FBRU8sa0JBQWtCLENBQUNFLGdCQUFnQixDQUFFSixLQUFLLENBQUNLLGVBQWUsQ0FBQyxDQUFFLENBQUMsRUFBRTtNQUN6RkMsTUFBTSxFQUFFVCxRQUFRLENBQUNVLDBCQUEwQjtNQUMzQ0MsU0FBUyxFQUFFLENBQUM7TUFDWkMsT0FBTyxFQUFFO0lBQ1gsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDQyxRQUFRLENBQUVQLFFBQVMsQ0FBQzs7SUFFekI7SUFDQUYsZ0JBQWdCLENBQUNVLElBQUksQ0FBRUMsUUFBUSxJQUFJO01BQ2pDVCxRQUFRLENBQUNVLE9BQU8sR0FBS0QsUUFBUSxLQUFLLFdBQWE7SUFDakQsQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JFLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBbEIsZUFBZSxDQUFDb0IsUUFBUSxDQUFFLHVCQUF1QixFQUFFbEIscUJBQXNCLENBQUMifQ==