// Copyright 2021-2022, University of Colorado Boulder

/**
 * OpticalAxisInFrontOfProjectionScreenNode is the part of the optical axis that is in front of the projection screen
 * in LightSceneNode.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Line } from '../../../../scenery/js/imports.js';
import geometricOptics from '../../geometricOptics.js';
import GOColors from '../../common/GOColors.js';
import GOQueryParameters from '../GOQueryParameters.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class OpticalAxisInFrontOfProjectionScreenNode extends Line {
  /**
   * @param opticPositionProperty
   * @param projectionScreenPositionProperty
   * @param modelVisibleBoundsProperty - ScreenView's visibleBounds in the model coordinate frame, with the zoom transform applied
   * @param modelViewTransform
   * @param providedOptions
   */
  constructor(opticPositionProperty, projectionScreenPositionProperty, modelVisibleBoundsProperty, modelViewTransform, providedOptions) {
    const options = optionize()({
      // LineOptions
      stroke: GOQueryParameters.debugOpticalAxis ? 'red' : GOColors.opticalAxisStrokeProperty,
      lineWidth: 2,
      lineDash: [8, 5]
    }, providedOptions);

    // create optical axis line, with arbitrary length values.
    super(0, 0, 1, 0, options);

    // Set the left extent of the optical axis line.
    modelVisibleBoundsProperty.link(modelVisibleBounds => {
      this.setX1(modelViewTransform.modelToViewX(modelVisibleBounds.minX));
    });

    // Set the right extent of the optical axis line.
    projectionScreenPositionProperty.link(projectionScreenPosition => {
      this.setX2(modelViewTransform.modelToViewX(projectionScreenPosition.x));
    });

    // Set the y position of the optical axis line.
    opticPositionProperty.link(position => {
      const yView = modelViewTransform.modelToViewY(position.y);
      this.setY1(yView);
      this.setY2(yView);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('OpticalAxisInFrontOfProjectionScreenNode', OpticalAxisInFrontOfProjectionScreenNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lIiwiZ2VvbWV0cmljT3B0aWNzIiwiR09Db2xvcnMiLCJHT1F1ZXJ5UGFyYW1ldGVycyIsIm9wdGlvbml6ZSIsIk9wdGljYWxBeGlzSW5Gcm9udE9mUHJvamVjdGlvblNjcmVlbk5vZGUiLCJjb25zdHJ1Y3RvciIsIm9wdGljUG9zaXRpb25Qcm9wZXJ0eSIsInByb2plY3Rpb25TY3JlZW5Qb3NpdGlvblByb3BlcnR5IiwibW9kZWxWaXNpYmxlQm91bmRzUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic3Ryb2tlIiwiZGVidWdPcHRpY2FsQXhpcyIsIm9wdGljYWxBeGlzU3Ryb2tlUHJvcGVydHkiLCJsaW5lV2lkdGgiLCJsaW5lRGFzaCIsImxpbmsiLCJtb2RlbFZpc2libGVCb3VuZHMiLCJzZXRYMSIsIm1vZGVsVG9WaWV3WCIsIm1pblgiLCJwcm9qZWN0aW9uU2NyZWVuUG9zaXRpb24iLCJzZXRYMiIsIngiLCJwb3NpdGlvbiIsInlWaWV3IiwibW9kZWxUb1ZpZXdZIiwieSIsInNldFkxIiwic2V0WTIiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPcHRpY2FsQXhpc0luRnJvbnRPZlByb2plY3Rpb25TY3JlZW5Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE9wdGljYWxBeGlzSW5Gcm9udE9mUHJvamVjdGlvblNjcmVlbk5vZGUgaXMgdGhlIHBhcnQgb2YgdGhlIG9wdGljYWwgYXhpcyB0aGF0IGlzIGluIGZyb250IG9mIHRoZSBwcm9qZWN0aW9uIHNjcmVlblxyXG4gKiBpbiBMaWdodFNjZW5lTm9kZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCB7IExpbmUsIExpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdlb21ldHJpY09wdGljcyBmcm9tICcuLi8uLi9nZW9tZXRyaWNPcHRpY3MuanMnO1xyXG5pbXBvcnQgR09Db2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL0dPQ29sb3JzLmpzJztcclxuaW1wb3J0IEdPUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uL0dPUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaWNrT3B0aW9uYWwgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tPcHRpb25hbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIE9wdGljYWxBeGlzSW5Gcm9udE9mUHJvamVjdGlvblNjcmVlbk5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJlxyXG4gIFBpY2tSZXF1aXJlZDxMaW5lT3B0aW9ucywgJ3Zpc2libGVQcm9wZXJ0eSc+ICZcclxuICBQaWNrT3B0aW9uYWw8TGluZU9wdGlvbnMsICdzdHJva2UnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wdGljYWxBeGlzSW5Gcm9udE9mUHJvamVjdGlvblNjcmVlbk5vZGUgZXh0ZW5kcyBMaW5lIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG9wdGljUG9zaXRpb25Qcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBwcm9qZWN0aW9uU2NyZWVuUG9zaXRpb25Qcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBtb2RlbFZpc2libGVCb3VuZHNQcm9wZXJ0eSAtIFNjcmVlblZpZXcncyB2aXNpYmxlQm91bmRzIGluIHRoZSBtb2RlbCBjb29yZGluYXRlIGZyYW1lLCB3aXRoIHRoZSB6b29tIHRyYW5zZm9ybSBhcHBsaWVkXHJcbiAgICogQHBhcmFtIG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnNcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG9wdGljUG9zaXRpb25Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uU2NyZWVuUG9zaXRpb25Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpc2libGVCb3VuZHNQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Qm91bmRzMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IE9wdGljYWxBeGlzSW5Gcm9udE9mUHJvamVjdGlvblNjcmVlbk5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8T3B0aWNhbEF4aXNJbkZyb250T2ZQcm9qZWN0aW9uU2NyZWVuTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBMaW5lT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTGluZU9wdGlvbnNcclxuICAgICAgc3Ryb2tlOiBHT1F1ZXJ5UGFyYW1ldGVycy5kZWJ1Z09wdGljYWxBeGlzID8gJ3JlZCcgOiBHT0NvbG9ycy5vcHRpY2FsQXhpc1N0cm9rZVByb3BlcnR5LFxyXG4gICAgICBsaW5lV2lkdGg6IDIsXHJcbiAgICAgIGxpbmVEYXNoOiBbIDgsIDUgXVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIG9wdGljYWwgYXhpcyBsaW5lLCB3aXRoIGFyYml0cmFyeSBsZW5ndGggdmFsdWVzLlxyXG4gICAgc3VwZXIoIDAsIDAsIDEsIDAsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGxlZnQgZXh0ZW50IG9mIHRoZSBvcHRpY2FsIGF4aXMgbGluZS5cclxuICAgIG1vZGVsVmlzaWJsZUJvdW5kc1Byb3BlcnR5LmxpbmsoIG1vZGVsVmlzaWJsZUJvdW5kcyA9PiB7XHJcbiAgICAgIHRoaXMuc2V0WDEoIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIG1vZGVsVmlzaWJsZUJvdW5kcy5taW5YICkgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIHJpZ2h0IGV4dGVudCBvZiB0aGUgb3B0aWNhbCBheGlzIGxpbmUuXHJcbiAgICBwcm9qZWN0aW9uU2NyZWVuUG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBwcm9qZWN0aW9uU2NyZWVuUG9zaXRpb24gPT4ge1xyXG4gICAgICB0aGlzLnNldFgyKCBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBwcm9qZWN0aW9uU2NyZWVuUG9zaXRpb24ueCApICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSB5IHBvc2l0aW9uIG9mIHRoZSBvcHRpY2FsIGF4aXMgbGluZS5cclxuICAgIG9wdGljUG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBwb3NpdGlvbiA9PiB7XHJcbiAgICAgIGNvbnN0IHlWaWV3ID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggcG9zaXRpb24ueSApO1xyXG4gICAgICB0aGlzLnNldFkxKCB5VmlldyApO1xyXG4gICAgICB0aGlzLnNldFkyKCB5VmlldyApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ09wdGljYWxBeGlzSW5Gcm9udE9mUHJvamVjdGlvblNjcmVlbk5vZGUnLCBPcHRpY2FsQXhpc0luRnJvbnRPZlByb2plY3Rpb25TY3JlZW5Ob2RlICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1BLFNBQVNBLElBQUksUUFBcUIsbUNBQW1DO0FBQ3JFLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0MsUUFBUSxNQUFNLDBCQUEwQjtBQUMvQyxPQUFPQyxpQkFBaUIsTUFBTSx5QkFBeUI7QUFDdkQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFVbkYsZUFBZSxNQUFNQyx3Q0FBd0MsU0FBU0wsSUFBSSxDQUFDO0VBRXpFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NNLFdBQVdBLENBQUVDLHFCQUFpRCxFQUNqREMsZ0NBQTRELEVBQzVEQywwQkFBc0QsRUFDdERDLGtCQUF1QyxFQUN2Q0MsZUFBZ0UsRUFBRztJQUVyRixNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBNEUsQ0FBQyxDQUFFO01BRXRHO01BQ0FTLE1BQU0sRUFBRVYsaUJBQWlCLENBQUNXLGdCQUFnQixHQUFHLEtBQUssR0FBR1osUUFBUSxDQUFDYSx5QkFBeUI7TUFDdkZDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFFBQVEsRUFBRSxDQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2xCLENBQUMsRUFBRU4sZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFQyxPQUFRLENBQUM7O0lBRTVCO0lBQ0FILDBCQUEwQixDQUFDUyxJQUFJLENBQUVDLGtCQUFrQixJQUFJO01BQ3JELElBQUksQ0FBQ0MsS0FBSyxDQUFFVixrQkFBa0IsQ0FBQ1csWUFBWSxDQUFFRixrQkFBa0IsQ0FBQ0csSUFBSyxDQUFFLENBQUM7SUFDMUUsQ0FBRSxDQUFDOztJQUVIO0lBQ0FkLGdDQUFnQyxDQUFDVSxJQUFJLENBQUVLLHdCQUF3QixJQUFJO01BQ2pFLElBQUksQ0FBQ0MsS0FBSyxDQUFFZCxrQkFBa0IsQ0FBQ1csWUFBWSxDQUFFRSx3QkFBd0IsQ0FBQ0UsQ0FBRSxDQUFFLENBQUM7SUFDN0UsQ0FBRSxDQUFDOztJQUVIO0lBQ0FsQixxQkFBcUIsQ0FBQ1csSUFBSSxDQUFFUSxRQUFRLElBQUk7TUFDdEMsTUFBTUMsS0FBSyxHQUFHakIsa0JBQWtCLENBQUNrQixZQUFZLENBQUVGLFFBQVEsQ0FBQ0csQ0FBRSxDQUFDO01BQzNELElBQUksQ0FBQ0MsS0FBSyxDQUFFSCxLQUFNLENBQUM7TUFDbkIsSUFBSSxDQUFDSSxLQUFLLENBQUVKLEtBQU0sQ0FBQztJQUNyQixDQUFFLENBQUM7RUFDTDtFQUVnQkssT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUEvQixlQUFlLENBQUNpQyxRQUFRLENBQUUsMENBQTBDLEVBQUU3Qix3Q0FBeUMsQ0FBQyJ9