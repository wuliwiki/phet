// Copyright 2022, University of Colorado Boulder

/**
 * FocalLengthControl is the control for changing the optic's focal length. It actually changes the focal-length
 * magnitude, and indicates the sign by an annotation in the control's label, e.g. 'Focal Length (-)'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberControl from '../../../../scenery-phet/js/NumberControl.js';
import geometricOptics from '../../geometricOptics.js';
import GeometricOpticsStrings from '../../GeometricOpticsStrings.js';
import GOConstants from '../GOConstants.js';
import Utils from '../../../../dot/js/Utils.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import StringIO from '../../../../tandem/js/types/StringIO.js';
export default class FocalLengthControl extends NumberControl {
  /**
   * @param focalLengthMagnitudeProperty - unsigned
   * @param focalLengthProperty - signed
   * @param providedOptions
   */
  constructor(focalLengthMagnitudeProperty, focalLengthProperty, providedOptions) {
    const range = focalLengthMagnitudeProperty.range;
    const titleStringProperty = new DerivedProperty([focalLengthProperty, GeometricOpticsStrings.focalLengthPositiveStringProperty, GeometricOpticsStrings.focalLengthNegativeStringProperty], (focalLength, focalLengthPositiveString, focalLengthNegativeString) => focalLength >= 0 ? focalLengthPositiveString : focalLengthNegativeString, {
      tandem: providedOptions.tandem.createTandem('titleStringProperty'),
      phetioValueType: StringIO
    });
    const options = optionize4()({}, GOConstants.NUMBER_CONTROL_OPTIONS, {
      // NumberControlOptions
      delta: GOConstants.FOCAL_LENGTH_SPINNER_STEP,
      numberDisplayOptions: {
        decimalPlaces: GOConstants.FOCAL_LENGTH_DECIMAL_PLACES,
        valuePattern: GeometricOpticsStrings.valueCentimetersPatternStringProperty
      },
      sliderOptions: {
        constrainValue: value => Utils.roundToInterval(value, GOConstants.FOCAL_LENGTH_SLIDER_STEP),
        keyboardStep: GOConstants.FOCAL_LENGTH_KEYBOARD_STEP,
        // used by all alternative-input devices
        shiftKeyboardStep: GOConstants.FOCAL_LENGTH_SHIFT_KEYBOARD_STEP,
        // finer grain, used by keyboard only
        pageKeyboardStep: GOConstants.FOCAL_LENGTH_PAGE_KEYBOARD_STEP
      }
    }, providedOptions);
    super(titleStringProperty, focalLengthMagnitudeProperty, range, options);
    this.addLinkedElement(focalLengthMagnitudeProperty, {
      tandem: options.tandem.createTandem(focalLengthMagnitudeProperty.tandem.name)
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('FocalLengthControl', FocalLengthControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,