// Copyright 2021-2023, University of Colorado Boulder

/**
 * VisibleProperties contains visibleProperty instances for things in the view. These Properties are controlled
 * by checkboxes and toggle buttons.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import geometricOptics from '../../geometricOptics.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import Mirror from '../../mirror/model/Mirror.js';
export default class VisibleProperties {
  // visibility of the focal points (F)

  // visibility of the 2F points

  // visibility of the virtual Image, when present

  // visibility of the labels

  // visibility of the second optical object

  // visibility of the guides, which are irrelevant for mirror

  // Determines whether the optical axis is visible.
  // PhET-iO only, cannot be controlled from the sim UI, and is not subject to reset.
  // See https://github.com/phetsims/geometric-optics/issues/252
  // Resets things that are specific to this class.
  constructor(optic, providedOptions) {
    const isMirror = optic instanceof Mirror;
    const isExclusivelyFlatMirror = optic.isExclusivelyFlatMirror();
    this.focalPointsVisibleProperty = new BooleanProperty(true, {
      tandem: isExclusivelyFlatMirror ? Tandem.OPT_OUT : providedOptions.tandem.createTandem('focalPointsVisibleProperty'),
      phetioFeatured: !isExclusivelyFlatMirror // because a flat mirror's F point is at infinity
    });

    this.twoFPointsVisibleProperty = new BooleanProperty(false, {
      tandem: isExclusivelyFlatMirror ? Tandem.OPT_OUT : providedOptions.tandem.createTandem('twoFPointsVisibleProperty'),
      phetioFeatured: !isExclusivelyFlatMirror // because a flat mirror's 2F point is at infinity
    });

    this.virtualImageVisibleProperty = new BooleanProperty(true, {
      tandem: providedOptions.tandem.createTandem('virtualImageVisibleProperty'),
      phetioFeatured: true
    });
    this.labelsVisibleProperty = new BooleanProperty(false, {
      tandem: providedOptions.tandem.createTandem('labelsVisibleProperty'),
      phetioFeatured: true
    });
    this.secondPointVisibleProperty = new BooleanProperty(false, {
      tandem: providedOptions.tandem.createTandem('secondPointVisibleProperty'),
      phetioFeatured: true
    });

    // Mirrors cannot have guides, and guidesVisibleProperty should not be instrumented.
    // See https://github.com/phetsims/geometric-optics/issues/456
    const guidesVisiblePropertyOptions = isMirror ? {
      validValues: [false]
    } : {
      tandem: providedOptions.tandem.createTandem('guidesVisibleProperty')
    };
    this.guidesVisibleProperty = new BooleanProperty(false, guidesVisiblePropertyOptions);
    this.opticalAxisVisibleProperty = new BooleanProperty(true, {
      tandem: providedOptions.tandem.createTandem('opticalAxisVisibleProperty'),
      phetioFeatured: true,
      phetioDocumentation: 'PhET-iO only, not settable in the sim'
    });
    this.resetVisibleProperties = () => {
      this.focalPointsVisibleProperty.reset();
      this.twoFPointsVisibleProperty.reset();
      this.virtualImageVisibleProperty.reset();
      this.labelsVisibleProperty.reset();
      this.secondPointVisibleProperty.reset();
      this.guidesVisibleProperty.reset();
      // Do not reset opticalAxisVisibleProperty, it's PhET-iO only.
    };
  }

  reset() {
    this.resetVisibleProperties();
  }
}
geometricOptics.register('VisibleProperties', VisibleProperties);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,