// Copyright 2022, University of Colorado Boulder

/**
 * OpticalImageNode is the view base class for all optical images.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node } from '../../../../scenery/js/imports.js';
import geometricOptics from '../../geometricOptics.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
export default class OpticalImageNode extends Node {
  /**
   * @param opticalImage - model element
   * @param virtualImageVisibleProperty - are virtual images visible?
   * @param lightPropagationEnabledProperty - is light propagation enabled?
   * @param objectVisibleProperty - is the optical object visible?
   * @param providedOptions
   */
  constructor(opticalImage, virtualImageVisibleProperty, lightPropagationEnabledProperty, objectVisibleProperty, providedOptions) {
    const options = optionize()({
      visibleProperty: new DerivedProperty([opticalImage.visibleProperty, opticalImage.opticalImageTypeProperty, virtualImageVisibleProperty, lightPropagationEnabledProperty, objectVisibleProperty], (imageVisible, opticalImageType, virtualImageVisible, lightPropagationEnabled, objectVisible) => {
        return imageVisible && (opticalImageType === 'real' || virtualImageVisible) && lightPropagationEnabled && objectVisible;
      }, {
        tandem: providedOptions.tandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO
      })
    }, providedOptions);
    super(options);
    this.addLinkedElement(opticalImage, {
      tandem: providedOptions.tandem.createTandem(opticalImage.tandem.name)
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('OpticalImageNode', OpticalImageNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiZ2VvbWV0cmljT3B0aWNzIiwiRGVyaXZlZFByb3BlcnR5Iiwib3B0aW9uaXplIiwiQm9vbGVhbklPIiwiT3B0aWNhbEltYWdlTm9kZSIsImNvbnN0cnVjdG9yIiwib3B0aWNhbEltYWdlIiwidmlydHVhbEltYWdlVmlzaWJsZVByb3BlcnR5IiwibGlnaHRQcm9wYWdhdGlvbkVuYWJsZWRQcm9wZXJ0eSIsIm9iamVjdFZpc2libGVQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2aXNpYmxlUHJvcGVydHkiLCJvcHRpY2FsSW1hZ2VUeXBlUHJvcGVydHkiLCJpbWFnZVZpc2libGUiLCJvcHRpY2FsSW1hZ2VUeXBlIiwidmlydHVhbEltYWdlVmlzaWJsZSIsImxpZ2h0UHJvcGFnYXRpb25FbmFibGVkIiwib2JqZWN0VmlzaWJsZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1ZhbHVlVHlwZSIsImFkZExpbmtlZEVsZW1lbnQiLCJuYW1lIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiT3B0aWNhbEltYWdlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT3B0aWNhbEltYWdlTm9kZSBpcyB0aGUgdmlldyBiYXNlIGNsYXNzIGZvciBhbGwgb3B0aWNhbCBpbWFnZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBPcHRpY2FsSW1hZ2UgZnJvbSAnLi4vbW9kZWwvT3B0aWNhbEltYWdlLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgQm9vbGVhbklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9Cb29sZWFuSU8uanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIE9wdGljYWxJbWFnZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wdGljYWxJbWFnZU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG9wdGljYWxJbWFnZSAtIG1vZGVsIGVsZW1lbnRcclxuICAgKiBAcGFyYW0gdmlydHVhbEltYWdlVmlzaWJsZVByb3BlcnR5IC0gYXJlIHZpcnR1YWwgaW1hZ2VzIHZpc2libGU/XHJcbiAgICogQHBhcmFtIGxpZ2h0UHJvcGFnYXRpb25FbmFibGVkUHJvcGVydHkgLSBpcyBsaWdodCBwcm9wYWdhdGlvbiBlbmFibGVkP1xyXG4gICAqIEBwYXJhbSBvYmplY3RWaXNpYmxlUHJvcGVydHkgLSBpcyB0aGUgb3B0aWNhbCBvYmplY3QgdmlzaWJsZT9cclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCBvcHRpY2FsSW1hZ2U6IE9wdGljYWxJbWFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHZpcnR1YWxJbWFnZVZpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodFByb3BhZ2F0aW9uRW5hYmxlZFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdFZpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IE9wdGljYWxJbWFnZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8T3B0aWNhbEltYWdlTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgICAgWyBvcHRpY2FsSW1hZ2UudmlzaWJsZVByb3BlcnR5LCBvcHRpY2FsSW1hZ2Uub3B0aWNhbEltYWdlVHlwZVByb3BlcnR5LCB2aXJ0dWFsSW1hZ2VWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgICAgICBsaWdodFByb3BhZ2F0aW9uRW5hYmxlZFByb3BlcnR5LCBvYmplY3RWaXNpYmxlUHJvcGVydHkgXSxcclxuICAgICAgICAoIGltYWdlVmlzaWJsZSwgb3B0aWNhbEltYWdlVHlwZSwgdmlydHVhbEltYWdlVmlzaWJsZSxcclxuICAgICAgICAgIGxpZ2h0UHJvcGFnYXRpb25FbmFibGVkLCBvYmplY3RWaXNpYmxlICkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuICggaW1hZ2VWaXNpYmxlICYmICggb3B0aWNhbEltYWdlVHlwZSA9PT0gJ3JlYWwnIHx8IHZpcnR1YWxJbWFnZVZpc2libGUgKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgbGlnaHRQcm9wYWdhdGlvbkVuYWJsZWQgJiYgb2JqZWN0VmlzaWJsZSApO1xyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgIHRhbmRlbTogcHJvdmlkZWRPcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aXNpYmxlUHJvcGVydHknICksXHJcbiAgICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IEJvb2xlYW5JT1xyXG4gICAgICAgIH0gKVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIG9wdGljYWxJbWFnZSwge1xyXG4gICAgICB0YW5kZW06IHByb3ZpZGVkT3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCBvcHRpY2FsSW1hZ2UudGFuZGVtLm5hbWUgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ09wdGljYWxJbWFnZU5vZGUnLCBPcHRpY2FsSW1hZ2VOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksUUFBcUIsbUNBQW1DO0FBQ3JFLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFHdEQsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUNuRixPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBT2hFLGVBQWUsTUFBTUMsZ0JBQWdCLFNBQVNMLElBQUksQ0FBQztFQUVqRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNZTSxXQUFXQSxDQUFFQyxZQUEwQixFQUMxQkMsMkJBQXVELEVBQ3ZEQywrQkFBMkQsRUFDM0RDLHFCQUFpRCxFQUNqREMsZUFBd0MsRUFBRztJQUVoRSxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBb0QsQ0FBQyxDQUFFO01BQzlFVSxlQUFlLEVBQUUsSUFBSVgsZUFBZSxDQUNsQyxDQUFFSyxZQUFZLENBQUNNLGVBQWUsRUFBRU4sWUFBWSxDQUFDTyx3QkFBd0IsRUFBRU4sMkJBQTJCLEVBQ2hHQywrQkFBK0IsRUFBRUMscUJBQXFCLENBQUUsRUFDMUQsQ0FBRUssWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRUMsbUJBQW1CLEVBQ25EQyx1QkFBdUIsRUFBRUMsYUFBYSxLQUFNO1FBQzVDLE9BQVNKLFlBQVksS0FBTUMsZ0JBQWdCLEtBQUssTUFBTSxJQUFJQyxtQkFBbUIsQ0FBRSxJQUN0RUMsdUJBQXVCLElBQUlDLGFBQWE7TUFDbkQsQ0FBQyxFQUFFO1FBQ0RDLE1BQU0sRUFBRVQsZUFBZSxDQUFDUyxNQUFNLENBQUNDLFlBQVksQ0FBRSxpQkFBa0IsQ0FBQztRQUNoRUMsZUFBZSxFQUFFbEI7TUFDbkIsQ0FBRTtJQUNOLENBQUMsRUFBRU8sZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNXLGdCQUFnQixDQUFFaEIsWUFBWSxFQUFFO01BQ25DYSxNQUFNLEVBQUVULGVBQWUsQ0FBQ1MsTUFBTSxDQUFDQyxZQUFZLENBQUVkLFlBQVksQ0FBQ2EsTUFBTSxDQUFDSSxJQUFLO0lBQ3hFLENBQUUsQ0FBQztFQUNMO0VBRWdCQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXhCLGVBQWUsQ0FBQzBCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRXRCLGdCQUFpQixDQUFDIn0=