// Copyright 2021-2023, University of Colorado Boulder

/**
 * GOPreferences is the model for sim-specific preferences, accessed via the Preferences dialog.
 * These preferences are global, and affect all screens.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Tandem from '../../../../tandem/js/Tandem.js';
import geometricOptics from '../../geometricOptics.js';
import GOQueryParameters from '../GOQueryParameters.js';
import { FocalLengthModelTypeValues } from './FocalLengthModelType.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import StringUnionProperty from '../../../../axon/js/StringUnionProperty.js';
const GOPreferences = {
  add2FPointsCheckboxProperty: new BooleanProperty(GOQueryParameters.add2FPointsCheckbox, {
    tandem: Tandem.PREFERENCES.createTandem('add2FPointsCheckboxProperty'),
    phetioFeatured: true,
    phetioDocumentation: 'adds a "2F Points" checkbox to the control panels'
  }),
  cueingArrowsEnabledProperty: new BooleanProperty(GOQueryParameters.cueingArrowsEnabled, {
    tandem: Tandem.PREFERENCES.createTandem('cueingArrowsEnabledProperty'),
    phetioFeatured: true,
    phetioDocumentation: 'shows cueing arrows on draggable elements'
  }),
  focalLengthModelTypeProperty: new StringUnionProperty(GOQueryParameters.focalLengthControl, {
    validValues: FocalLengthModelTypeValues,
    tandem: Tandem.PREFERENCES.createTandem('focalLengthModelTypeProperty'),
    phetioFeatured: true,
    phetioDocumentation: 'Determines how focal length is modeled and controlled in the Lens and Mirror screens.<br>' + 'This can also be set via the focalLengthControl query parameter.<br>' + 'The values are:' + '<ul/>' + '<li>direct: provides a control labeled "Focal Length"</li>' + '<li>indirect: provides controls for other optic parameters, from which focal length is derived</li>' + '</ul>'
  })
};
geometricOptics.register('GOPreferences', GOPreferences);
export default GOPreferences;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUYW5kZW0iLCJnZW9tZXRyaWNPcHRpY3MiLCJHT1F1ZXJ5UGFyYW1ldGVycyIsIkZvY2FsTGVuZ3RoTW9kZWxUeXBlVmFsdWVzIiwiQm9vbGVhblByb3BlcnR5IiwiU3RyaW5nVW5pb25Qcm9wZXJ0eSIsIkdPUHJlZmVyZW5jZXMiLCJhZGQyRlBvaW50c0NoZWNrYm94UHJvcGVydHkiLCJhZGQyRlBvaW50c0NoZWNrYm94IiwidGFuZGVtIiwiUFJFRkVSRU5DRVMiLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9GZWF0dXJlZCIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJjdWVpbmdBcnJvd3NFbmFibGVkUHJvcGVydHkiLCJjdWVpbmdBcnJvd3NFbmFibGVkIiwiZm9jYWxMZW5ndGhNb2RlbFR5cGVQcm9wZXJ0eSIsImZvY2FsTGVuZ3RoQ29udHJvbCIsInZhbGlkVmFsdWVzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHT1ByZWZlcmVuY2VzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdPUHJlZmVyZW5jZXMgaXMgdGhlIG1vZGVsIGZvciBzaW0tc3BlY2lmaWMgcHJlZmVyZW5jZXMsIGFjY2Vzc2VkIHZpYSB0aGUgUHJlZmVyZW5jZXMgZGlhbG9nLlxyXG4gKiBUaGVzZSBwcmVmZXJlbmNlcyBhcmUgZ2xvYmFsLCBhbmQgYWZmZWN0IGFsbCBzY3JlZW5zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBnZW9tZXRyaWNPcHRpY3MgZnJvbSAnLi4vLi4vZ2VvbWV0cmljT3B0aWNzLmpzJztcclxuaW1wb3J0IEdPUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uL0dPUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IHsgRm9jYWxMZW5ndGhNb2RlbFR5cGUsIEZvY2FsTGVuZ3RoTW9kZWxUeXBlVmFsdWVzIH0gZnJvbSAnLi9Gb2NhbExlbmd0aE1vZGVsVHlwZS5qcyc7XHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU3RyaW5nVW5pb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1N0cmluZ1VuaW9uUHJvcGVydHkuanMnO1xyXG5cclxuY29uc3QgR09QcmVmZXJlbmNlcyA9IHtcclxuXHJcbiAgYWRkMkZQb2ludHNDaGVja2JveFByb3BlcnR5OiBuZXcgQm9vbGVhblByb3BlcnR5KCBHT1F1ZXJ5UGFyYW1ldGVycy5hZGQyRlBvaW50c0NoZWNrYm94LCB7XHJcbiAgICB0YW5kZW06IFRhbmRlbS5QUkVGRVJFTkNFUy5jcmVhdGVUYW5kZW0oICdhZGQyRlBvaW50c0NoZWNrYm94UHJvcGVydHknICksXHJcbiAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZSxcclxuICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdhZGRzIGEgXCIyRiBQb2ludHNcIiBjaGVja2JveCB0byB0aGUgY29udHJvbCBwYW5lbHMnXHJcbiAgfSApLFxyXG5cclxuICBjdWVpbmdBcnJvd3NFbmFibGVkUHJvcGVydHk6IG5ldyBCb29sZWFuUHJvcGVydHkoIEdPUXVlcnlQYXJhbWV0ZXJzLmN1ZWluZ0Fycm93c0VuYWJsZWQsIHtcclxuICAgIHRhbmRlbTogVGFuZGVtLlBSRUZFUkVOQ0VTLmNyZWF0ZVRhbmRlbSggJ2N1ZWluZ0Fycm93c0VuYWJsZWRQcm9wZXJ0eScgKSxcclxuICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlLFxyXG4gICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3Nob3dzIGN1ZWluZyBhcnJvd3Mgb24gZHJhZ2dhYmxlIGVsZW1lbnRzJ1xyXG4gIH0gKSxcclxuXHJcbiAgZm9jYWxMZW5ndGhNb2RlbFR5cGVQcm9wZXJ0eTpcclxuICAgIG5ldyBTdHJpbmdVbmlvblByb3BlcnR5PEZvY2FsTGVuZ3RoTW9kZWxUeXBlPiggR09RdWVyeVBhcmFtZXRlcnMuZm9jYWxMZW5ndGhDb250cm9sIGFzIEZvY2FsTGVuZ3RoTW9kZWxUeXBlLCB7XHJcbiAgICAgIHZhbGlkVmFsdWVzOiBGb2NhbExlbmd0aE1vZGVsVHlwZVZhbHVlcyxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUFJFRkVSRU5DRVMuY3JlYXRlVGFuZGVtKCAnZm9jYWxMZW5ndGhNb2RlbFR5cGVQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWUsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdEZXRlcm1pbmVzIGhvdyBmb2NhbCBsZW5ndGggaXMgbW9kZWxlZCBhbmQgY29udHJvbGxlZCBpbiB0aGUgTGVucyBhbmQgTWlycm9yIHNjcmVlbnMuPGJyPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnVGhpcyBjYW4gYWxzbyBiZSBzZXQgdmlhIHRoZSBmb2NhbExlbmd0aENvbnRyb2wgcXVlcnkgcGFyYW1ldGVyLjxicj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSB2YWx1ZXMgYXJlOicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnPHVsLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsaT5kaXJlY3Q6IHByb3ZpZGVzIGEgY29udHJvbCBsYWJlbGVkIFwiRm9jYWwgTGVuZ3RoXCI8L2xpPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxpPmluZGlyZWN0OiBwcm92aWRlcyBjb250cm9scyBmb3Igb3RoZXIgb3B0aWMgcGFyYW1ldGVycywgZnJvbSB3aGljaCBmb2NhbCBsZW5ndGggaXMgZGVyaXZlZDwvbGk+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3VsPidcclxuXHJcbiAgICB9IClcclxufTtcclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ0dPUHJlZmVyZW5jZXMnLCBHT1ByZWZlcmVuY2VzICk7XHJcbmV4cG9ydCBkZWZhdWx0IEdPUHJlZmVyZW5jZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLGlCQUFpQixNQUFNLHlCQUF5QjtBQUN2RCxTQUErQkMsMEJBQTBCLFFBQVEsMkJBQTJCO0FBQzVGLE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsbUJBQW1CLE1BQU0sNENBQTRDO0FBRTVFLE1BQU1DLGFBQWEsR0FBRztFQUVwQkMsMkJBQTJCLEVBQUUsSUFBSUgsZUFBZSxDQUFFRixpQkFBaUIsQ0FBQ00sbUJBQW1CLEVBQUU7SUFDdkZDLE1BQU0sRUFBRVQsTUFBTSxDQUFDVSxXQUFXLENBQUNDLFlBQVksQ0FBRSw2QkFBOEIsQ0FBQztJQUN4RUMsY0FBYyxFQUFFLElBQUk7SUFDcEJDLG1CQUFtQixFQUFFO0VBQ3ZCLENBQUUsQ0FBQztFQUVIQywyQkFBMkIsRUFBRSxJQUFJVixlQUFlLENBQUVGLGlCQUFpQixDQUFDYSxtQkFBbUIsRUFBRTtJQUN2Rk4sTUFBTSxFQUFFVCxNQUFNLENBQUNVLFdBQVcsQ0FBQ0MsWUFBWSxDQUFFLDZCQUE4QixDQUFDO0lBQ3hFQyxjQUFjLEVBQUUsSUFBSTtJQUNwQkMsbUJBQW1CLEVBQUU7RUFDdkIsQ0FBRSxDQUFDO0VBRUhHLDRCQUE0QixFQUMxQixJQUFJWCxtQkFBbUIsQ0FBd0JILGlCQUFpQixDQUFDZSxrQkFBa0IsRUFBMEI7SUFDM0dDLFdBQVcsRUFBRWYsMEJBQTBCO0lBQ3ZDTSxNQUFNLEVBQUVULE1BQU0sQ0FBQ1UsV0FBVyxDQUFDQyxZQUFZLENBQUUsOEJBQStCLENBQUM7SUFDekVDLGNBQWMsRUFBRSxJQUFJO0lBQ3BCQyxtQkFBbUIsRUFBRSwyRkFBMkYsR0FDM0Ysc0VBQXNFLEdBQ3RFLGlCQUFpQixHQUNqQixPQUFPLEdBQ1AsNERBQTRELEdBQzVELHFHQUFxRyxHQUNyRztFQUV2QixDQUFFO0FBQ04sQ0FBQztBQUVEWixlQUFlLENBQUNrQixRQUFRLENBQUUsZUFBZSxFQUFFYixhQUFjLENBQUM7QUFDMUQsZUFBZUEsYUFBYSJ9