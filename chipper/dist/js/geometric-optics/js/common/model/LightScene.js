// Copyright 2022-2023, University of Colorado Boulder

/**
 * LightScene is a scene in rays from 2 lights interact with a lens, and project light spots on
 * a projection screen. Note that this scene supports only Lens, not Mirror.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import geometricOptics from '../../geometricOptics.js';
import LightRays from './LightRays.js';
import ProjectionScreen from './ProjectionScreen.js';
import LightSpot from './LightSpot.js';
import LightObject from './LightObject.js';
import light1_png from '../../../images/light1_png.js';
import light2_png from '../../../images/light2_png.js';
import OpticalImage from './OpticalImage.js';
import GOScene from './GOScene.js';
export default class LightScene extends GOScene {
  // the elements that make up this scene

  // Resets things that are specific to this class.

  /**
   * @param lens - the lens, shared by all scenes
   * @param raysTypeProperty - the representation used for rays
   * @param providedOptions
   */
  constructor(lens, raysTypeProperty, providedOptions) {
    super(lens, providedOptions);
    this.lens = lens;
    let opticalObjectNumber = 1;
    this.lightObject1 = new LightObject(opticalObjectNumber++, lens.positionProperty, {
      htmlImageElement: light1_png,
      position: providedOptions.lightObject1Position,
      tandem: providedOptions.tandem.createTandem('lightObject1'),
      phetioDocumentation: 'the first light'
    });
    this.lightObject2 = new LightObject(opticalObjectNumber++, lens.positionProperty, {
      htmlImageElement: light2_png,
      position: providedOptions.lightObject2Position,
      tandem: providedOptions.tandem.createTandem('lightObject2'),
      phetioDocumentation: 'the second light'
    });
    this.opticalImage1 = new OpticalImage(this.lightObject1, lens, {
      tandem: providedOptions.tandem.createTandem('opticalImage1'),
      opticalImageTypePropertyFeatured: false,
      // because no image is formed for lights
      magnificationPropertyFeatured: false,
      // because no image is formed for lights
      phetioDocumentation: 'Point where light rays from the first light converge. No image is formed in this scene.'
    });
    this.opticalImage2 = new OpticalImage(this.lightObject2, lens, {
      tandem: providedOptions.tandem.createTandem('opticalImage2'),
      opticalImageTypePropertyFeatured: false,
      // because no image is formed for lights
      magnificationPropertyFeatured: false,
      // because no image is formed for lights
      phetioDocumentation: 'Point where light rays from the second light converge. No image is formed in this scene.'
    });
    this.projectionScreen = new ProjectionScreen(lens.positionProperty, {
      tandem: providedOptions.tandem.createTandem('projectionScreen')
    });
    this.lightRays1 = new LightRays(this.lightObject1.positionProperty, lens, this.opticalImage1, raysTypeProperty, this.raysAnimationTimeProperty, this.projectionScreen);
    this.lightRays2 = new LightRays(this.lightObject2.positionProperty, lens, this.opticalImage2, raysTypeProperty, this.raysAnimationTimeProperty, this.projectionScreen);

    // Light Spots
    this.lightSpot1 = new LightSpot(lens, this.projectionScreen, this.lightObject1.positionProperty, this.opticalImage1.positionProperty, {
      tandem: providedOptions.tandem.createTandem('lightSpot1'),
      phetioDocumentation: 'the light spot on the projection screen that is created by the first light'
    });
    this.lightSpot2 = new LightSpot(lens, this.projectionScreen, this.lightObject2.positionProperty, this.opticalImage2.positionProperty, {
      tandem: providedOptions.tandem.createTandem('lightSpot2'),
      phetioDocumentation: 'the light spot on the projection screen that is created by the second light'
    });

    // Guides
    this.initializeGuides(this.lightObject1.positionProperty, this.lightObject2.positionProperty);
    this.resetLightObjectScene = () => {
      this.lightObject1.reset();
      this.lightObject2.reset();
      this.opticalImage1.reset();
      this.opticalImage2.reset();
      this.projectionScreen.reset();
    };
  }
  reset() {
    super.reset();
    this.resetLightObjectScene();
  }
}
geometricOptics.register('LightScene', LightScene);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW9tZXRyaWNPcHRpY3MiLCJMaWdodFJheXMiLCJQcm9qZWN0aW9uU2NyZWVuIiwiTGlnaHRTcG90IiwiTGlnaHRPYmplY3QiLCJsaWdodDFfcG5nIiwibGlnaHQyX3BuZyIsIk9wdGljYWxJbWFnZSIsIkdPU2NlbmUiLCJMaWdodFNjZW5lIiwiY29uc3RydWN0b3IiLCJsZW5zIiwicmF5c1R5cGVQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGljYWxPYmplY3ROdW1iZXIiLCJsaWdodE9iamVjdDEiLCJwb3NpdGlvblByb3BlcnR5IiwiaHRtbEltYWdlRWxlbWVudCIsInBvc2l0aW9uIiwibGlnaHRPYmplY3QxUG9zaXRpb24iLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwibGlnaHRPYmplY3QyIiwibGlnaHRPYmplY3QyUG9zaXRpb24iLCJvcHRpY2FsSW1hZ2UxIiwib3B0aWNhbEltYWdlVHlwZVByb3BlcnR5RmVhdHVyZWQiLCJtYWduaWZpY2F0aW9uUHJvcGVydHlGZWF0dXJlZCIsIm9wdGljYWxJbWFnZTIiLCJwcm9qZWN0aW9uU2NyZWVuIiwibGlnaHRSYXlzMSIsInJheXNBbmltYXRpb25UaW1lUHJvcGVydHkiLCJsaWdodFJheXMyIiwibGlnaHRTcG90MSIsImxpZ2h0U3BvdDIiLCJpbml0aWFsaXplR3VpZGVzIiwicmVzZXRMaWdodE9iamVjdFNjZW5lIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxpZ2h0U2NlbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTGlnaHRTY2VuZSBpcyBhIHNjZW5lIGluIHJheXMgZnJvbSAyIGxpZ2h0cyBpbnRlcmFjdCB3aXRoIGEgbGVucywgYW5kIHByb2plY3QgbGlnaHQgc3BvdHMgb25cclxuICogYSBwcm9qZWN0aW9uIHNjcmVlbi4gTm90ZSB0aGF0IHRoaXMgc2NlbmUgc3VwcG9ydHMgb25seSBMZW5zLCBub3QgTWlycm9yLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBnZW9tZXRyaWNPcHRpY3MgZnJvbSAnLi4vLi4vZ2VvbWV0cmljT3B0aWNzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBSYXlzVHlwZSB9IGZyb20gJy4vUmF5c1R5cGUuanMnO1xyXG5pbXBvcnQgTGlnaHRSYXlzIGZyb20gJy4vTGlnaHRSYXlzLmpzJztcclxuaW1wb3J0IFByb2plY3Rpb25TY3JlZW4gZnJvbSAnLi9Qcm9qZWN0aW9uU2NyZWVuLmpzJztcclxuaW1wb3J0IExpZ2h0U3BvdCBmcm9tICcuL0xpZ2h0U3BvdC5qcyc7XHJcbmltcG9ydCBMaWdodE9iamVjdCBmcm9tICcuL0xpZ2h0T2JqZWN0LmpzJztcclxuaW1wb3J0IGxpZ2h0MV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2xpZ2h0MV9wbmcuanMnO1xyXG5pbXBvcnQgbGlnaHQyX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvbGlnaHQyX3BuZy5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IE9wdGljYWxJbWFnZSBmcm9tICcuL09wdGljYWxJbWFnZS5qcyc7XHJcbmltcG9ydCBHT1NjZW5lLCB7IEdPU2NlbmVPcHRpb25zIH0gZnJvbSAnLi9HT1NjZW5lLmpzJztcclxuaW1wb3J0IExlbnMgZnJvbSAnLi4vLi4vbGVucy9tb2RlbC9MZW5zLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIGluaXRpYWwgcG9zaXRpb25zIG9mIHRoZSBsaWdodHNcclxuICBsaWdodE9iamVjdDFQb3NpdGlvbjogVmVjdG9yMjtcclxuICBsaWdodE9iamVjdDJQb3NpdGlvbjogVmVjdG9yMjtcclxufTtcclxuXHJcbnR5cGUgTGlnaHRPYmplY3RTY2VuZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxHT1NjZW5lT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHRTY2VuZSBleHRlbmRzIEdPU2NlbmUge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgbGVuczogTGVucztcclxuXHJcbiAgLy8gdGhlIGVsZW1lbnRzIHRoYXQgbWFrZSB1cCB0aGlzIHNjZW5lXHJcbiAgcHVibGljIHJlYWRvbmx5IGxpZ2h0T2JqZWN0MTogTGlnaHRPYmplY3Q7XHJcbiAgcHVibGljIHJlYWRvbmx5IGxpZ2h0T2JqZWN0MjogTGlnaHRPYmplY3Q7XHJcbiAgcHVibGljIHJlYWRvbmx5IG9wdGljYWxJbWFnZTE6IE9wdGljYWxJbWFnZTtcclxuICBwdWJsaWMgcmVhZG9ubHkgb3B0aWNhbEltYWdlMjogT3B0aWNhbEltYWdlO1xyXG4gIHB1YmxpYyByZWFkb25seSBsaWdodFJheXMxOiBMaWdodFJheXM7XHJcbiAgcHVibGljIHJlYWRvbmx5IGxpZ2h0UmF5czI6IExpZ2h0UmF5cztcclxuICBwdWJsaWMgcmVhZG9ubHkgcHJvamVjdGlvblNjcmVlbjogUHJvamVjdGlvblNjcmVlbjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbGlnaHRTcG90MTogTGlnaHRTcG90O1xyXG4gIHB1YmxpYyByZWFkb25seSBsaWdodFNwb3QyOiBMaWdodFNwb3Q7XHJcblxyXG4gIC8vIFJlc2V0cyB0aGluZ3MgdGhhdCBhcmUgc3BlY2lmaWMgdG8gdGhpcyBjbGFzcy5cclxuICBwcml2YXRlIHJlYWRvbmx5IHJlc2V0TGlnaHRPYmplY3RTY2VuZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGxlbnMgLSB0aGUgbGVucywgc2hhcmVkIGJ5IGFsbCBzY2VuZXNcclxuICAgKiBAcGFyYW0gcmF5c1R5cGVQcm9wZXJ0eSAtIHRoZSByZXByZXNlbnRhdGlvbiB1c2VkIGZvciByYXlzXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbGVuczogTGVucyxcclxuICAgICAgICAgICAgICAgICAgICAgIHJheXNUeXBlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFJheXNUeXBlPixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogTGlnaHRPYmplY3RTY2VuZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgc3VwZXIoIGxlbnMsIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubGVucyA9IGxlbnM7XHJcblxyXG4gICAgbGV0IG9wdGljYWxPYmplY3ROdW1iZXIgPSAxO1xyXG5cclxuICAgIHRoaXMubGlnaHRPYmplY3QxID0gbmV3IExpZ2h0T2JqZWN0KCBvcHRpY2FsT2JqZWN0TnVtYmVyKyssIGxlbnMucG9zaXRpb25Qcm9wZXJ0eSwge1xyXG4gICAgICBodG1sSW1hZ2VFbGVtZW50OiBsaWdodDFfcG5nLFxyXG4gICAgICBwb3NpdGlvbjogcHJvdmlkZWRPcHRpb25zLmxpZ2h0T2JqZWN0MVBvc2l0aW9uLFxyXG4gICAgICB0YW5kZW06IHByb3ZpZGVkT3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGlnaHRPYmplY3QxJyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAndGhlIGZpcnN0IGxpZ2h0J1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMubGlnaHRPYmplY3QyID0gbmV3IExpZ2h0T2JqZWN0KCBvcHRpY2FsT2JqZWN0TnVtYmVyKyssIGxlbnMucG9zaXRpb25Qcm9wZXJ0eSwge1xyXG4gICAgICBodG1sSW1hZ2VFbGVtZW50OiBsaWdodDJfcG5nLFxyXG4gICAgICBwb3NpdGlvbjogcHJvdmlkZWRPcHRpb25zLmxpZ2h0T2JqZWN0MlBvc2l0aW9uLFxyXG4gICAgICB0YW5kZW06IHByb3ZpZGVkT3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGlnaHRPYmplY3QyJyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAndGhlIHNlY29uZCBsaWdodCdcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLm9wdGljYWxJbWFnZTEgPSBuZXcgT3B0aWNhbEltYWdlKCB0aGlzLmxpZ2h0T2JqZWN0MSwgbGVucywge1xyXG4gICAgICB0YW5kZW06IHByb3ZpZGVkT3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnb3B0aWNhbEltYWdlMScgKSxcclxuICAgICAgb3B0aWNhbEltYWdlVHlwZVByb3BlcnR5RmVhdHVyZWQ6IGZhbHNlLCAvLyBiZWNhdXNlIG5vIGltYWdlIGlzIGZvcm1lZCBmb3IgbGlnaHRzXHJcbiAgICAgIG1hZ25pZmljYXRpb25Qcm9wZXJ0eUZlYXR1cmVkOiBmYWxzZSwgLy8gYmVjYXVzZSBubyBpbWFnZSBpcyBmb3JtZWQgZm9yIGxpZ2h0c1xyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnUG9pbnQgd2hlcmUgbGlnaHQgcmF5cyBmcm9tIHRoZSBmaXJzdCBsaWdodCBjb252ZXJnZS4gTm8gaW1hZ2UgaXMgZm9ybWVkIGluIHRoaXMgc2NlbmUuJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMub3B0aWNhbEltYWdlMiA9IG5ldyBPcHRpY2FsSW1hZ2UoIHRoaXMubGlnaHRPYmplY3QyLCBsZW5zLCB7XHJcbiAgICAgIHRhbmRlbTogcHJvdmlkZWRPcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdvcHRpY2FsSW1hZ2UyJyApLFxyXG4gICAgICBvcHRpY2FsSW1hZ2VUeXBlUHJvcGVydHlGZWF0dXJlZDogZmFsc2UsIC8vIGJlY2F1c2Ugbm8gaW1hZ2UgaXMgZm9ybWVkIGZvciBsaWdodHNcclxuICAgICAgbWFnbmlmaWNhdGlvblByb3BlcnR5RmVhdHVyZWQ6IGZhbHNlLCAvLyBiZWNhdXNlIG5vIGltYWdlIGlzIGZvcm1lZCBmb3IgbGlnaHRzXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdQb2ludCB3aGVyZSBsaWdodCByYXlzIGZyb20gdGhlIHNlY29uZCBsaWdodCBjb252ZXJnZS4gTm8gaW1hZ2UgaXMgZm9ybWVkIGluIHRoaXMgc2NlbmUuJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMucHJvamVjdGlvblNjcmVlbiA9IG5ldyBQcm9qZWN0aW9uU2NyZWVuKCBsZW5zLnBvc2l0aW9uUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBwcm92aWRlZE9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Byb2plY3Rpb25TY3JlZW4nIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmxpZ2h0UmF5czEgPSBuZXcgTGlnaHRSYXlzKFxyXG4gICAgICB0aGlzLmxpZ2h0T2JqZWN0MS5wb3NpdGlvblByb3BlcnR5LFxyXG4gICAgICBsZW5zLFxyXG4gICAgICB0aGlzLm9wdGljYWxJbWFnZTEsXHJcbiAgICAgIHJheXNUeXBlUHJvcGVydHksXHJcbiAgICAgIHRoaXMucmF5c0FuaW1hdGlvblRpbWVQcm9wZXJ0eSxcclxuICAgICAgdGhpcy5wcm9qZWN0aW9uU2NyZWVuXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMubGlnaHRSYXlzMiA9IG5ldyBMaWdodFJheXMoXHJcbiAgICAgIHRoaXMubGlnaHRPYmplY3QyLnBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgIGxlbnMsXHJcbiAgICAgIHRoaXMub3B0aWNhbEltYWdlMixcclxuICAgICAgcmF5c1R5cGVQcm9wZXJ0eSxcclxuICAgICAgdGhpcy5yYXlzQW5pbWF0aW9uVGltZVByb3BlcnR5LFxyXG4gICAgICB0aGlzLnByb2plY3Rpb25TY3JlZW5cclxuICAgICk7XHJcblxyXG4gICAgLy8gTGlnaHQgU3BvdHNcclxuICAgIHRoaXMubGlnaHRTcG90MSA9IG5ldyBMaWdodFNwb3QoIGxlbnMsIHRoaXMucHJvamVjdGlvblNjcmVlbiwgdGhpcy5saWdodE9iamVjdDEucG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgdGhpcy5vcHRpY2FsSW1hZ2UxLnBvc2l0aW9uUHJvcGVydHksIHtcclxuICAgICAgICB0YW5kZW06IHByb3ZpZGVkT3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGlnaHRTcG90MScgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAndGhlIGxpZ2h0IHNwb3Qgb24gdGhlIHByb2plY3Rpb24gc2NyZWVuIHRoYXQgaXMgY3JlYXRlZCBieSB0aGUgZmlyc3QgbGlnaHQnXHJcbiAgICAgIH0gKTtcclxuICAgIHRoaXMubGlnaHRTcG90MiA9IG5ldyBMaWdodFNwb3QoIGxlbnMsIHRoaXMucHJvamVjdGlvblNjcmVlbiwgdGhpcy5saWdodE9iamVjdDIucG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgdGhpcy5vcHRpY2FsSW1hZ2UyLnBvc2l0aW9uUHJvcGVydHksIHtcclxuICAgICAgICB0YW5kZW06IHByb3ZpZGVkT3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGlnaHRTcG90MicgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAndGhlIGxpZ2h0IHNwb3Qgb24gdGhlIHByb2plY3Rpb24gc2NyZWVuIHRoYXQgaXMgY3JlYXRlZCBieSB0aGUgc2Vjb25kIGxpZ2h0J1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gR3VpZGVzXHJcbiAgICB0aGlzLmluaXRpYWxpemVHdWlkZXMoIHRoaXMubGlnaHRPYmplY3QxLnBvc2l0aW9uUHJvcGVydHksIHRoaXMubGlnaHRPYmplY3QyLnBvc2l0aW9uUHJvcGVydHkgKTtcclxuXHJcbiAgICB0aGlzLnJlc2V0TGlnaHRPYmplY3RTY2VuZSA9ICgpID0+IHtcclxuICAgICAgdGhpcy5saWdodE9iamVjdDEucmVzZXQoKTtcclxuICAgICAgdGhpcy5saWdodE9iamVjdDIucmVzZXQoKTtcclxuICAgICAgdGhpcy5vcHRpY2FsSW1hZ2UxLnJlc2V0KCk7XHJcbiAgICAgIHRoaXMub3B0aWNhbEltYWdlMi5yZXNldCgpO1xyXG4gICAgICB0aGlzLnByb2plY3Rpb25TY3JlZW4ucmVzZXQoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy5yZXNldExpZ2h0T2JqZWN0U2NlbmUoKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ0xpZ2h0U2NlbmUnLCBMaWdodFNjZW5lICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSwwQkFBMEI7QUFHdEQsT0FBT0MsU0FBUyxNQUFNLGdCQUFnQjtBQUN0QyxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsU0FBUyxNQUFNLGdCQUFnQjtBQUN0QyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLFVBQVUsTUFBTSwrQkFBK0I7QUFDdEQsT0FBT0MsVUFBVSxNQUFNLCtCQUErQjtBQUV0RCxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBQzVDLE9BQU9DLE9BQU8sTUFBMEIsY0FBYztBQWF0RCxlQUFlLE1BQU1DLFVBQVUsU0FBU0QsT0FBTyxDQUFDO0VBSTlDOztFQVdBOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0UsV0FBV0EsQ0FBRUMsSUFBVSxFQUNWQyxnQkFBNkMsRUFDN0NDLGVBQXdDLEVBQUc7SUFFN0QsS0FBSyxDQUFFRixJQUFJLEVBQUVFLGVBQWdCLENBQUM7SUFFOUIsSUFBSSxDQUFDRixJ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