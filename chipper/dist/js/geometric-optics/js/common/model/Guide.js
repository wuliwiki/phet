// Copyright 2021-2023, University of Colorado Boulder

/**
 * Guide is the model element for the guides at both ends of the lens.
 *
 * @author Sarah Chang (Swarthmore College)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import geometricOptics from '../../geometricOptics.js';
export default class Guide {
  // position of the fulcrum point, in cm

  // angle of rotation of the incident guide with respect to the positive x-axis, in radians

  // the angle of the transmitted guide with respect to the positive x-axis, in radians

  /**
   * @param optic - the optic that this guide is associated with
   * @param opticalObjectPositionProperty - position of the optical object
   * @param location - location of the guide, relative to the optic
   */
  constructor(optic, opticalObjectPositionProperty, location) {
    // sign is positive for top guide and negative below
    const locationSign = location === 'top' ? +1 : -1;
    this.fulcrumPositionProperty = new DerivedProperty([optic.positionProperty, optic.diameterProperty], (opticPosition, opticDiameter) => opticPosition.plusXY(0, locationSign * opticDiameter / 2));
    this.incidentAngleProperty = new DerivedProperty([opticalObjectPositionProperty, this.fulcrumPositionProperty], (opticalObjectPosition, fulcrumPosition) => {
      const displacementVector = opticalObjectPosition.minus(fulcrumPosition);
      return displacementVector.getAngle();
    });
    this.transmittedAngleProperty = new DerivedProperty([optic.focalLengthProperty, optic.diameterProperty, this.incidentAngleProperty], (focalLength, diameter, incidentAngle) => {
      // transmitted angle if the optic was a blank.
      const throughAngle = incidentAngle + Math.PI;

      // ground truth for the deflection angle is determined such that the transmitted guide is perfectly aligned
      // with rays when the object is at a distance 2f on the optical axis.

      // ratio of opposite side (diameter/2) over adjacent side (2*focalLength)
      const toa = diameter / (4 * focalLength);

      // deflected angle is measured from the "through angle", i.e. angle of an imaginary undeflected transmitted ray
      const deflectedAngle = optic.opticSurfaceTypeProperty.value === 'convex' ? -1 * locationSign * (2 * Math.atan(toa)) : -1 * locationSign * (Math.atan(3 * toa) - Math.atan(toa));
      return throughAngle + deflectedAngle;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
}
geometricOptics.register('Guide', Guide);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJnZW9tZXRyaWNPcHRpY3MiLCJHdWlkZSIsImNvbnN0cnVjdG9yIiwib3B0aWMiLCJvcHRpY2FsT2JqZWN0UG9zaXRpb25Qcm9wZXJ0eSIsImxvY2F0aW9uIiwibG9jYXRpb25TaWduIiwiZnVsY3J1bVBvc2l0aW9uUHJvcGVydHkiLCJwb3NpdGlvblByb3BlcnR5IiwiZGlhbWV0ZXJQcm9wZXJ0eSIsIm9wdGljUG9zaXRpb24iLCJvcHRpY0RpYW1ldGVyIiwicGx1c1hZIiwiaW5jaWRlbnRBbmdsZVByb3BlcnR5Iiwib3B0aWNhbE9iamVjdFBvc2l0aW9uIiwiZnVsY3J1bVBvc2l0aW9uIiwiZGlzcGxhY2VtZW50VmVjdG9yIiwibWludXMiLCJnZXRBbmdsZSIsInRyYW5zbWl0dGVkQW5nbGVQcm9wZXJ0eSIsImZvY2FsTGVuZ3RoUHJvcGVydHkiLCJmb2NhbExlbmd0aCIsImRpYW1ldGVyIiwiaW5jaWRlbnRBbmdsZSIsInRocm91Z2hBbmdsZSIsIk1hdGgiLCJQSSIsInRvYSIsImRlZmxlY3RlZEFuZ2xlIiwib3B0aWNTdXJmYWNlVHlwZVByb3BlcnR5IiwidmFsdWUiLCJhdGFuIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR3VpZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR3VpZGUgaXMgdGhlIG1vZGVsIGVsZW1lbnQgZm9yIHRoZSBndWlkZXMgYXQgYm90aCBlbmRzIG9mIHRoZSBsZW5zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhcmFoIENoYW5nIChTd2FydGhtb3JlIENvbGxlZ2UpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgT3B0aWMgZnJvbSAnLi9PcHRpYy5qcyc7XHJcbmltcG9ydCBnZW9tZXRyaWNPcHRpY3MgZnJvbSAnLi4vLi4vZ2VvbWV0cmljT3B0aWNzLmpzJztcclxuXHJcbmV4cG9ydCB0eXBlIEd1aWRlTG9jYXRpb24gPSAndG9wJyB8ICdib3R0b20nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3VpZGUge1xyXG5cclxuICAvLyBwb3NpdGlvbiBvZiB0aGUgZnVsY3J1bSBwb2ludCwgaW4gY21cclxuICBwdWJsaWMgcmVhZG9ubHkgZnVsY3J1bVBvc2l0aW9uUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFZlY3RvcjI+O1xyXG5cclxuICAvLyBhbmdsZSBvZiByb3RhdGlvbiBvZiB0aGUgaW5jaWRlbnQgZ3VpZGUgd2l0aCByZXNwZWN0IHRvIHRoZSBwb3NpdGl2ZSB4LWF4aXMsIGluIHJhZGlhbnNcclxuICBwdWJsaWMgcmVhZG9ubHkgaW5jaWRlbnRBbmdsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+O1xyXG5cclxuICAvLyB0aGUgYW5nbGUgb2YgdGhlIHRyYW5zbWl0dGVkIGd1aWRlIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzLCBpbiByYWRpYW5zXHJcbiAgcHVibGljIHJlYWRvbmx5IHRyYW5zbWl0dGVkQW5nbGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG9wdGljIC0gdGhlIG9wdGljIHRoYXQgdGhpcyBndWlkZSBpcyBhc3NvY2lhdGVkIHdpdGhcclxuICAgKiBAcGFyYW0gb3B0aWNhbE9iamVjdFBvc2l0aW9uUHJvcGVydHkgLSBwb3NpdGlvbiBvZiB0aGUgb3B0aWNhbCBvYmplY3RcclxuICAgKiBAcGFyYW0gbG9jYXRpb24gLSBsb2NhdGlvbiBvZiB0aGUgZ3VpZGUsIHJlbGF0aXZlIHRvIHRoZSBvcHRpY1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggb3B0aWM6IE9wdGljLCBvcHRpY2FsT2JqZWN0UG9zaXRpb25Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sIGxvY2F0aW9uOiBHdWlkZUxvY2F0aW9uICkge1xyXG5cclxuICAgIC8vIHNpZ24gaXMgcG9zaXRpdmUgZm9yIHRvcCBndWlkZSBhbmQgbmVnYXRpdmUgYmVsb3dcclxuICAgIGNvbnN0IGxvY2F0aW9uU2lnbiA9ICggbG9jYXRpb24gPT09ICd0b3AnICkgPyArMSA6IC0xO1xyXG5cclxuICAgIHRoaXMuZnVsY3J1bVBvc2l0aW9uUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIG9wdGljLnBvc2l0aW9uUHJvcGVydHksIG9wdGljLmRpYW1ldGVyUHJvcGVydHkgXSxcclxuICAgICAgKCBvcHRpY1Bvc2l0aW9uLCBvcHRpY0RpYW1ldGVyICkgPT5cclxuICAgICAgICBvcHRpY1Bvc2l0aW9uLnBsdXNYWSggMCwgbG9jYXRpb25TaWduICogb3B0aWNEaWFtZXRlciAvIDIgKSApO1xyXG5cclxuICAgIHRoaXMuaW5jaWRlbnRBbmdsZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgWyBvcHRpY2FsT2JqZWN0UG9zaXRpb25Qcm9wZXJ0eSwgdGhpcy5mdWxjcnVtUG9zaXRpb25Qcm9wZXJ0eSBdLFxyXG4gICAgICAoIG9wdGljYWxPYmplY3RQb3NpdGlvbiwgZnVsY3J1bVBvc2l0aW9uICkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRpc3BsYWNlbWVudFZlY3RvciA9IG9wdGljYWxPYmplY3RQb3NpdGlvbi5taW51cyggZnVsY3J1bVBvc2l0aW9uICk7XHJcbiAgICAgICAgcmV0dXJuIGRpc3BsYWNlbWVudFZlY3Rvci5nZXRBbmdsZSgpO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgdGhpcy50cmFuc21pdHRlZEFuZ2xlUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIG9wdGljLmZvY2FsTGVuZ3RoUHJvcGVydHksIG9wdGljLmRpYW1ldGVyUHJvcGVydHksIHRoaXMuaW5jaWRlbnRBbmdsZVByb3BlcnR5IF0sXHJcbiAgICAgICggZm9jYWxMZW5ndGgsIGRpYW1ldGVyLCBpbmNpZGVudEFuZ2xlICkgPT4ge1xyXG5cclxuICAgICAgICAvLyB0cmFuc21pdHRlZCBhbmdsZSBpZiB0aGUgb3B0aWMgd2FzIGEgYmxhbmsuXHJcbiAgICAgICAgY29uc3QgdGhyb3VnaEFuZ2xlID0gaW5jaWRlbnRBbmdsZSArIE1hdGguUEk7XHJcblxyXG4gICAgICAgIC8vIGdyb3VuZCB0cnV0aCBmb3IgdGhlIGRlZmxlY3Rpb24gYW5nbGUgaXMgZGV0ZXJtaW5lZCBzdWNoIHRoYXQgdGhlIHRyYW5zbWl0dGVkIGd1aWRlIGlzIHBlcmZlY3RseSBhbGlnbmVkXHJcbiAgICAgICAgLy8gd2l0aCByYXlzIHdoZW4gdGhlIG9iamVjdCBpcyBhdCBhIGRpc3RhbmNlIDJmIG9uIHRoZSBvcHRpY2FsIGF4aXMuXHJcblxyXG4gICAgICAgIC8vIHJhdGlvIG9mIG9wcG9zaXRlIHNpZGUgKGRpYW1ldGVyLzIpIG92ZXIgYWRqYWNlbnQgc2lkZSAoMipmb2NhbExlbmd0aClcclxuICAgICAgICBjb25zdCB0b2EgPSBkaWFtZXRlciAvICggNCAqIGZvY2FsTGVuZ3RoICk7XHJcblxyXG4gICAgICAgIC8vIGRlZmxlY3RlZCBhbmdsZSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBcInRocm91Z2ggYW5nbGVcIiwgaS5lLiBhbmdsZSBvZiBhbiBpbWFnaW5hcnkgdW5kZWZsZWN0ZWQgdHJhbnNtaXR0ZWQgcmF5XHJcbiAgICAgICAgY29uc3QgZGVmbGVjdGVkQW5nbGUgPSAoIG9wdGljLm9wdGljU3VyZmFjZVR5cGVQcm9wZXJ0eS52YWx1ZSA9PT0gJ2NvbnZleCcgKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSAqIGxvY2F0aW9uU2lnbiAqICggMiAqIE1hdGguYXRhbiggdG9hICkgKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSAqIGxvY2F0aW9uU2lnbiAqICggTWF0aC5hdGFuKCAzICogdG9hICkgLSBNYXRoLmF0YW4oIHRvYSApICk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aHJvdWdoQW5nbGUgKyBkZWZsZWN0ZWRBbmdsZTtcclxuICAgICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ0d1aWRlJywgR3VpZGUgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUlwRSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBSXRELGVBQWUsTUFBTUMsS0FBSyxDQUFDO0VBRXpCOztFQUdBOztFQUdBOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsS0FBWSxFQUFFQyw2QkFBeUQsRUFBRUMsUUFBdUIsRUFBRztJQUVySDtJQUNBLE1BQU1DLFlBQVksR0FBS0QsUUFBUSxLQUFLLEtBQUssR0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFckQsSUFBSSxDQUFDRSx1QkFBdUIsR0FBRyxJQUFJUixlQUFlLENBQ2hELENBQUVJLEtBQUssQ0FBQ0ssZ0JBQWdCLEVBQUVMLEtBQUssQ0FBQ00sZ0JBQWdCLENBQUUsRUFDbEQsQ0FBRUMsYUFBYSxFQUFFQyxhQUFhLEtBQzVCRCxhQUFhLENBQUNFLE1BQU0sQ0FBRSxDQUFDLEVBQUVOLFlBQVksR0FBR0ssYUFBYSxHQUFHLENBQUUsQ0FBRSxDQUFDO0lBRWpFLElBQUksQ0FBQ0UscUJBQXFCLEdBQUcsSUFBSWQsZUFBZSxDQUM5QyxDQUFFSyw2QkFBNkIsRUFBRSxJQUFJLENBQUNHLHVCQUF1QixDQUFFLEVBQy9ELENBQUVPLHFCQUFxQixFQUFFQyxlQUFlLEtBQU07TUFDNUMsTUFBTUMsa0JBQWtCLEdBQUdGLHFCQUFxQixDQUFDRyxLQUFLLENBQUVGLGVBQWdCLENBQUM7TUFDekUsT0FBT0Msa0JBQWtCLENBQUNFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUUsQ0FBQztJQUVMLElBQUksQ0FBQ0Msd0JBQXdCLEdBQUcsSUFBSXBCLGVBQWUsQ0FDakQsQ0FBRUksS0FBSyxDQUFDaUIsbUJBQW1CLEVBQUVqQixLQUFLLENBQUNNLGdCQUFnQixFQUFFLElBQUksQ0FBQ0kscUJBQXFCLENBQUUsRUFDakYsQ0FBRVEsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsS0FBTTtNQUUxQztNQUNBLE1BQU1DLFlBQVksR0FBR0QsYUFBYSxHQUFHRSxJQUFJLENBQUNDLEVBQUU7O01BRTVDO01BQ0E7O01BRUE7TUFDQSxNQUFNQyxHQUFHLEdBQUdMLFFBQVEsSUFBSyxDQUFDLEdBQUdELFdBQVcsQ0FBRTs7TUFFMUM7TUFDQSxNQUFNTyxjQUFjLEdBQUt6QixLQUFLLENBQUMwQix3QkFBd0IsQ0FBQ0MsS0FBSyxLQUFLLFFBQVEsR0FDbkQsQ0FBQyxDQUFDLEdBQUd4QixZQUFZLElBQUssQ0FBQyxHQUFHbUIsSUFBSSxDQUFDTSxJQUFJLENBQUVKLEdBQUksQ0FBQyxDQUFFLEdBQzVDLENBQUMsQ0FBQyxHQUFHckIsWUFBWSxJQUFLbUIsSUFBSSxDQUFDTSxJQUFJLENBQUUsQ0FBQyxHQUFHSixHQUFJLENBQUMsR0FBR0YsSUFBSSxDQUFDTSxJQUFJLENBQUVKLEdBQUksQ0FBQyxDQUFFO01BRXRGLE9BQU9ILFlBQVksR0FBR0ksY0FBYztJQUN0QyxDQUFFLENBQUM7RUFDUDtFQUVPSSxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjtBQUNGO0FBRUFqQyxlQUFlLENBQUNrQyxRQUFRLENBQUUsT0FBTyxFQUFFakMsS0FBTSxDQUFDIn0=