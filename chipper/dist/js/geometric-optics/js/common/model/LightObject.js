// Copyright 2022, University of Colorado Boulder

/**
 * LightObject is an optical object that is a point light source.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import geometricOptics from '../../geometricOptics.js';
import HTMLImageElementObject from './HTMLImageElementObject.js';
import Property from '../../../../axon/js/Property.js';

// Where the point-of-interest is relative to the left-top corner of PNG files for lights.
// This value is specific to the light*.png files, and must be uniform for all light*.png files.
// This should be at the right-center of the light bulb in light*.png files. +x right, +y down.
const ORIGIN_OFFSET = new Vector2(62, 40);

// Scale that will be applied to all light*.png files.
const SCALE_FACTOR = 0.5;
export default class LightObject extends HTMLImageElementObject {
  // the HTMLImageElement (PNG file) used to visually represent the light

  /**
   * @param opticalObjectNumber - positive integer used when labeling this object
   * @param opticPositionProperty
   * @param providedOptions
   */
  constructor(opticalObjectNumber, opticPositionProperty, providedOptions) {
    const htmlImageElementProperty = new Property(providedOptions.htmlImageElement, {
      validValues: [providedOptions.htmlImageElement] // LightObject has a fixed image, it does not change.
    });

    super(opticalObjectNumber, opticPositionProperty, htmlImageElementProperty, ORIGIN_OFFSET, SCALE_FACTOR, providedOptions);
    this.htmlImageElement = htmlImageElementProperty.value;
  }
}
geometricOptics.register('LightObject', LightObject);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZ2VvbWV0cmljT3B0aWNzIiwiSFRNTEltYWdlRWxlbWVudE9iamVjdCIsIlByb3BlcnR5IiwiT1JJR0lOX09GRlNFVCIsIlNDQUxFX0ZBQ1RPUiIsIkxpZ2h0T2JqZWN0IiwiY29uc3RydWN0b3IiLCJvcHRpY2FsT2JqZWN0TnVtYmVyIiwib3B0aWNQb3NpdGlvblByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwiaHRtbEltYWdlRWxlbWVudFByb3BlcnR5IiwiaHRtbEltYWdlRWxlbWVudCIsInZhbGlkVmFsdWVzIiwidmFsdWUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxpZ2h0T2JqZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMaWdodE9iamVjdCBpcyBhbiBvcHRpY2FsIG9iamVjdCB0aGF0IGlzIGEgcG9pbnQgbGlnaHQgc291cmNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IGdlb21ldHJpY09wdGljcyBmcm9tICcuLi8uLi9nZW9tZXRyaWNPcHRpY3MuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBIVE1MSW1hZ2VFbGVtZW50T2JqZWN0LCB7IEhUTUxJbWFnZUVsZW1lbnRPYmplY3RPcHRpb25zIH0gZnJvbSAnLi9IVE1MSW1hZ2VFbGVtZW50T2JqZWN0LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5cclxuLy8gV2hlcmUgdGhlIHBvaW50LW9mLWludGVyZXN0IGlzIHJlbGF0aXZlIHRvIHRoZSBsZWZ0LXRvcCBjb3JuZXIgb2YgUE5HIGZpbGVzIGZvciBsaWdodHMuXHJcbi8vIFRoaXMgdmFsdWUgaXMgc3BlY2lmaWMgdG8gdGhlIGxpZ2h0Ki5wbmcgZmlsZXMsIGFuZCBtdXN0IGJlIHVuaWZvcm0gZm9yIGFsbCBsaWdodCoucG5nIGZpbGVzLlxyXG4vLyBUaGlzIHNob3VsZCBiZSBhdCB0aGUgcmlnaHQtY2VudGVyIG9mIHRoZSBsaWdodCBidWxiIGluIGxpZ2h0Ki5wbmcgZmlsZXMuICt4IHJpZ2h0LCAreSBkb3duLlxyXG5jb25zdCBPUklHSU5fT0ZGU0VUID0gbmV3IFZlY3RvcjIoIDYyLCA0MCApO1xyXG5cclxuLy8gU2NhbGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gYWxsIGxpZ2h0Ki5wbmcgZmlsZXMuXHJcbmNvbnN0IFNDQUxFX0ZBQ1RPUiA9IDAuNTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIHRoZSBQTkcgZmlsZSB1c2VkIHRvIHZpc3VhbGx5IHJlcHJlc2VudCB0aGUgbGlnaHRcclxuICBodG1sSW1hZ2VFbGVtZW50OiBIVE1MSW1hZ2VFbGVtZW50O1xyXG59O1xyXG5cclxudHlwZSBMaWdodE9iamVjdE9wdGlvbnMgPSBTZWxmT3B0aW9uc1xyXG4gICYgUGlja1JlcXVpcmVkPEhUTUxJbWFnZUVsZW1lbnRPYmplY3RPcHRpb25zLCAncG9zaXRpb24nIHwgJ3RhbmRlbScgfCAncGhldGlvRG9jdW1lbnRhdGlvbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHRPYmplY3QgZXh0ZW5kcyBIVE1MSW1hZ2VFbGVtZW50T2JqZWN0IHtcclxuXHJcbiAgLy8gdGhlIEhUTUxJbWFnZUVsZW1lbnQgKFBORyBmaWxlKSB1c2VkIHRvIHZpc3VhbGx5IHJlcHJlc2VudCB0aGUgbGlnaHRcclxuICBwdWJsaWMgcmVhZG9ubHkgaHRtbEltYWdlRWxlbWVudDogSFRNTEltYWdlRWxlbWVudDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG9wdGljYWxPYmplY3ROdW1iZXIgLSBwb3NpdGl2ZSBpbnRlZ2VyIHVzZWQgd2hlbiBsYWJlbGluZyB0aGlzIG9iamVjdFxyXG4gICAqIEBwYXJhbSBvcHRpY1Bvc2l0aW9uUHJvcGVydHlcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBvcHRpY2FsT2JqZWN0TnVtYmVyOiBudW1iZXIsIG9wdGljUG9zaXRpb25Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sIHByb3ZpZGVkT3B0aW9uczogTGlnaHRPYmplY3RPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IGh0bWxJbWFnZUVsZW1lbnRQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggcHJvdmlkZWRPcHRpb25zLmh0bWxJbWFnZUVsZW1lbnQsIHtcclxuICAgICAgdmFsaWRWYWx1ZXM6IFsgcHJvdmlkZWRPcHRpb25zLmh0bWxJbWFnZUVsZW1lbnQgXSAgLy8gTGlnaHRPYmplY3QgaGFzIGEgZml4ZWQgaW1hZ2UsIGl0IGRvZXMgbm90IGNoYW5nZS5cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggb3B0aWNhbE9iamVjdE51bWJlciwgb3B0aWNQb3NpdGlvblByb3BlcnR5LCBodG1sSW1hZ2VFbGVtZW50UHJvcGVydHksIE9SSUdJTl9PRkZTRVQsIFNDQUxFX0ZBQ1RPUiwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5odG1sSW1hZ2VFbGVtZW50ID0gaHRtbEltYWdlRWxlbWVudFByb3BlcnR5LnZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnTGlnaHRPYmplY3QnLCBMaWdodE9iamVjdCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFHdEQsT0FBT0Msc0JBQXNCLE1BQXlDLDZCQUE2QjtBQUNuRyxPQUFPQyxRQUFRLE1BQU0saUNBQWlDOztBQUV0RDtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxhQUFhLEdBQUcsSUFBSUosT0FBTyxDQUFFLEVBQUUsRUFBRSxFQUFHLENBQUM7O0FBRTNDO0FBQ0EsTUFBTUssWUFBWSxHQUFHLEdBQUc7QUFXeEIsZUFBZSxNQUFNQyxXQUFXLFNBQVNKLHNCQUFzQixDQUFDO0VBRTlEOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0ssV0FBV0EsQ0FBRUMsbUJBQTJCLEVBQUVDLHFCQUFpRCxFQUFFQyxlQUFtQyxFQUFHO0lBRXhJLE1BQU1DLHdCQUF3QixHQUFHLElBQUlSLFFBQVEsQ0FBRU8sZUFBZSxDQUFDRSxnQkFBZ0IsRUFBRTtNQUMvRUMsV0FBVyxFQUFFLENBQUVILGVBQWUsQ0FBQ0UsZ0JBQWdCLENBQUUsQ0FBRTtJQUNyRCxDQUFFLENBQUM7O0lBRUgsS0FBSyxDQUFFSixtQkFBbUIsRUFBRUMscUJBQXFCLEVBQUVFLHdCQUF3QixFQUFFUCxhQUFhLEVBQUVDLFlBQVksRUFBRUssZUFBZ0IsQ0FBQztJQUUzSCxJQUFJLENBQUNFLGdCQUFnQixHQUFHRCx3QkFBd0IsQ0FBQ0csS0FBSztFQUN4RDtBQUNGO0FBRUFiLGVBQWUsQ0FBQ2MsUUFBUSxDQUFFLGFBQWEsRUFBRVQsV0FBWSxDQUFDIn0=