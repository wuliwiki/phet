// Copyright 2022-2023, University of Colorado Boulder

/**
 * GOTool is the base class for all tools in this sim.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../../axon/js/BooleanProperty.js';
import Vector2 from '../../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../../dot/js/Vector2Property.js';
import PhetioObject from '../../../../../tandem/js/PhetioObject.js';
import geometricOptics from '../../../geometricOptics.js';
import optionize from '../../../../../phet-core/js/optionize.js';
class GOTool extends PhetioObject {
  // position of the tool, in cm

  // whether the tool is in the toolbox

  // Resets things that are specific to this class.

  constructor(providedOptions) {
    const options = optionize()({
      // PhetioObjectOptions
      phetioState: false
    }, providedOptions);
    super(options);
    this.positionProperty = new Vector2Property(Vector2.ZERO, {
      tandem: options.tandem.createTandem('positionProperty'),
      phetioFeatured: true
    });
    this.isInToolboxProperty = new BooleanProperty(true, {
      tandem: options.tandem.createTandem('isInToolboxProperty'),
      phetioFeatured: true,
      phetioDocumentation: 'Controls whether the tool is in the toolbox.'
    });
    this.resetGOTool = () => {
      this.positionProperty.reset();
      this.isInToolboxProperty.reset();
    };
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.resetGOTool();
  }
}
geometricOptics.register('GOTool', GOTool);
export { GOTool as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwiUGhldGlvT2JqZWN0IiwiZ2VvbWV0cmljT3B0aWNzIiwib3B0aW9uaXplIiwiR09Ub29sIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicGhldGlvU3RhdGUiLCJwb3NpdGlvblByb3BlcnR5IiwiWkVSTyIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0ZlYXR1cmVkIiwiaXNJblRvb2xib3hQcm9wZXJ0eSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJyZXNldEdPVG9vbCIsInJlc2V0IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkdPVG9vbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHT1Rvb2wgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIGFsbCB0b29scyBpbiB0aGlzIHNpbS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QsIHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBHT1Rvb2xPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuY2xhc3MgR09Ub29sIGV4dGVuZHMgUGhldGlvT2JqZWN0IHtcclxuXHJcbiAgLy8gcG9zaXRpb24gb2YgdGhlIHRvb2wsIGluIGNtXHJcbiAgcHVibGljIHJlYWRvbmx5IHBvc2l0aW9uUHJvcGVydHk6IFByb3BlcnR5PFZlY3RvcjI+O1xyXG5cclxuICAvLyB3aGV0aGVyIHRoZSB0b29sIGlzIGluIHRoZSB0b29sYm94XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzSW5Ub29sYm94UHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyBSZXNldHMgdGhpbmdzIHRoYXQgYXJlIHNwZWNpZmljIHRvIHRoaXMgY2xhc3MuXHJcbiAgcHJpdmF0ZSByZWFkb25seSByZXNldEdPVG9vbDogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IEdPVG9vbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxHT1Rvb2xPcHRpb25zLCBTZWxmT3B0aW9ucywgUGhldGlvT2JqZWN0T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUGhldGlvT2JqZWN0T3B0aW9uc1xyXG4gICAgICBwaGV0aW9TdGF0ZTogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggVmVjdG9yMi5aRVJPLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncG9zaXRpb25Qcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmlzSW5Ub29sYm94UHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnaXNJblRvb2xib3hQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWUsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdDb250cm9scyB3aGV0aGVyIHRoZSB0b29sIGlzIGluIHRoZSB0b29sYm94LidcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnJlc2V0R09Ub29sID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgICAgdGhpcy5pc0luVG9vbGJveFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMucmVzZXRHT1Rvb2woKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ0dPVG9vbCcsIEdPVG9vbCApO1xyXG5leHBvcnQgeyBHT1Rvb2wgYXMgZGVmYXVsdCB9OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMkNBQTJDO0FBRXZFLE9BQU9DLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsT0FBT0MsZUFBZSxNQUFNLDBDQUEwQztBQUN0RSxPQUFPQyxZQUFZLE1BQStCLDBDQUEwQztBQUM1RixPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBRXpELE9BQU9DLFNBQVMsTUFBNEIsMENBQTBDO0FBTXRGLE1BQU1DLE1BQU0sU0FBU0gsWUFBWSxDQUFDO0VBRWhDOztFQUdBOztFQUdBOztFQUdVSSxXQUFXQSxDQUFFQyxlQUE4QixFQUFHO0lBRXRELE1BQU1DLE9BQU8sR0FBR0osU0FBUyxDQUFrRCxDQUFDLENBQUU7TUFFNUU7TUFDQUssV0FBVyxFQUFFO0lBQ2YsQ0FBQyxFQUFFRixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUMsT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ0UsZ0JBQWdCLEdBQUcsSUFBSVQsZUFBZSxDQUFFRCxPQUFPLENBQUNXLElBQUksRUFBRTtNQUN6REMsTUFBTSxFQUFFSixPQUFPLENBQUNJLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLGtCQUFtQixDQUFDO01BQ3pEQyxjQUFjLEVBQUU7SUFDbEIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxtQkFBbUIsR0FBRyxJQUFJaEIsZUFBZSxDQUFFLElBQUksRUFBRTtNQUNwRGEsTUFBTSxFQUFFSixPQUFPLENBQUNJLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHFCQUFzQixDQUFDO01BQzVEQyxjQUFjLEVBQUUsSUFBSTtNQUNwQkUsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxXQUFXLEdBQUcsTUFBTTtNQUN2QixJQUFJLENBQUNQLGdCQUFnQixDQUFDUSxLQUFLLENBQUMsQ0FBQztNQUM3QixJQUFJLENBQUNILG1CQUFtQixDQUFDRyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0VBQ0g7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7RUFFT0QsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ0QsV0FBVyxDQUFDLENBQUM7RUFDcEI7QUFDRjtBQUVBZCxlQUFlLENBQUNrQixRQUFRLENBQUUsUUFBUSxFQUFFaEIsTUFBTyxDQUFDO0FBQzVDLFNBQVNBLE1BQU0sSUFBSWlCLE9BQU8ifQ==