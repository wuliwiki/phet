// Copyright 2022-2023, University of Colorado Boulder

/**
 * DirectFocalLengthModel is the model where focal length is set directly.
 * IOR is fixed, and ROC is derived from focal length and IOR.
 * See https://github.com/phetsims/geometric-optics/issues/255
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import geometricOptics from '../../geometricOptics.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import GOPreferences from './GOPreferences.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class DirectFocalLengthModel extends PhetioObject {
  // see FocalLengthModel

  // Resets things that are specific to this class.

  constructor(opticSurfaceTypeProperty, providedOptions) {
    const options = optionize()({
      // PhetioObjectOptions
      phetioState: false,
      phetioDocumentation: 'Model of focal length that is used when ' + `${GOPreferences.focalLengthModelTypeProperty.tandem.phetioID} ` + 'is set to \'direct\'. Ignored for flat mirror. In this model:' + '<ul>' + '<li>focal length is settable' + '<li>index of refraction is fixed' + '<li>radius of curvature is derived' + '</ul>'
    }, providedOptions);
    super(options);
    this.focalLengthMagnitudeProperty = new NumberProperty(options.focalLengthMagnitudeRange.defaultValue, {
      units: 'cm',
      range: options.focalLengthMagnitudeRange,
      tandem: options.tandem.createTandem('focalLengthMagnitudeProperty'),
      phetioFeatured: true,
      phetioDocumentation: 'magnitude of the focal length (no sign)'
    });
    assert && assert(options.indexOfRefractionRange?.getLength() === 0, 'indexOfRefraction should be a fixed value');
    this.indexOfRefractionProperty = new NumberProperty(options.indexOfRefractionRange.defaultValue, {
      range: options.indexOfRefractionRange,
      // units: unitless
      tandem: options.tandem.createTandem('indexOfRefractionProperty'),
      phetioReadOnly: true
    });
    this.radiusOfCurvatureMagnitudeProperty = new DerivedProperty([opticSurfaceTypeProperty, this.focalLengthMagnitudeProperty, this.indexOfRefractionProperty], (opticSurfaceType, focalLengthMagnitude, indexOfRefraction) => focalLengthMagnitude * (2 * (indexOfRefraction - 1)), {
      units: 'cm',
      tandem: options.tandem.createTandem('radiusOfCurvatureMagnitudeProperty'),
      phetioDocumentation: 'magnitude of the radius of curvature (no sign)',
      phetioValueType: NumberIO
    });
    this.resetDirectFocalLengthModel = () => {
      this.focalLengthMagnitudeProperty.reset();
      this.indexOfRefractionProperty.reset();
    };
  }

  /**
   * Synchronizes with another focal-length model by copying the values that are settable in this model.
   * Constrain values so that floating-point error doesn't cause range exceptions.
   */
  syncToModel(model) {
    assert && assert(model !== this);
    this.focalLengthMagnitudeProperty.value = this.focalLengthMagnitudeProperty.range.constrainValue(model.focalLengthMagnitudeProperty.value);
  }
  reset() {
    this.resetDirectFocalLengthModel();
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
geometricOptics.register('DirectFocalLengthModel', DirectFocalLengthModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,