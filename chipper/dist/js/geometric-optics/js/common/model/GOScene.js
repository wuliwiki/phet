// Copyright 2022-2023, University of Colorado Boulder

/**
 * GOScene is base class for all scenes.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import geometricOptics from '../../geometricOptics.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import Guides from './Guides.js';
import optionize from '../../../../phet-core/js/optionize.js';
// How long the animation of light rays lasts, in seconds
const RAYS_ANIMATION_DURATION = 10;
export default class GOScene extends PhetioObject {
  // the optic, provided by the client, and associated with all scenes

  // animation time for the light rays animation, determines how far the rays have propagated from the optical object

  // optional guides, supported by the Lens screen

  // Resets things that are specific to this class.

  /**
   * @param optic - the optic, shared by all scenes
   * @param providedOptions
   */
  constructor(optic, providedOptions) {
    const options = optionize()({
      // PhetioObjectOptions
      phetioState: false
    }, providedOptions);
    super(options);
    this.optic = optic;
    this.addLinkedElement(optic, {
      tandem: options.tandem.createTandem(optic.tandem.name)
    });
    this.raysAnimationTimeProperty = new NumberProperty(0, {
      units: 's',
      range: new Range(0, RAYS_ANIMATION_DURATION),
      tandem: options.tandem.createTandem('raysAnimationTimeProperty'),
      phetioReadOnly: true
    });
    this.resetGOObjectScene = () => {
      this.raysAnimationTimeProperty.reset();
    };
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.resetGOObjectScene();
  }
  get guides1() {
    return this._guides1;
  }
  get guides2() {
    return this._guides2;
  }

  /**
   * Begins the animation of light rays.
   */
  beginLightRaysAnimation() {
    this.raysAnimationTimeProperty.reset();
  }

  /**
   * Steps the animation of light rays.
   * @param dt - time step, in seconds
   */
  stepLightRays(dt) {
    const tNow = this.raysAnimationTimeProperty.value;
    if (tNow < RAYS_ANIMATION_DURATION) {
      this.raysAnimationTimeProperty.value = Math.min(tNow + dt, RAYS_ANIMATION_DURATION);
    }
  }

  /**
   * Initializes the optional guides, called by subclasses.
   */
  initializeGuides(guides1PositionProperty, guides2PositionProperty) {
    this._guides1 = new Guides(this.optic, guides1PositionProperty);
    this._guides2 = new Guides(this.optic, guides2PositionProperty);
  }
}
geometricOptics.register('GOScene', GOScene);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,