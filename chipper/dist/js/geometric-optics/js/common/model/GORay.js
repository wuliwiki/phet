// Copyright 2021-2023, University of Colorado Boulder

/**
 * GORay extends phet.dot.Ray2 by adding a length property. Generally speaking, a ray has one endpoint and goes on
 * infinitely in only one direction - you cannot measure the length of a ray. But our GORay can have finite or
 * semi-infinite length, and is used by LightRay to compute the line segments that describe a light ray as it
 * propagates.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Ray2 from '../../../../dot/js/Ray2.js';
import geometricOptics from '../../geometricOptics.js';
export default class GORay extends Ray2 {
  // length of the ray, in cm

  /**
   * @param position - origin of the ray
   * @param direction - direction of the ray, must be a normalized vector.
   */
  constructor(position, direction) {
    super(position, direction);
    this.length = Infinity; // semi-infinite by default
  }

  /**
   * Sets the length of the ray.
   */
  setLength(length) {
    assert && assert(isFinite(length) && length > 0);
    this.length = length;
  }

  /**
   * Gets the length of the ray. Note that the length may be Infinity.
   */
  getLength() {
    return this.length;
  }

  /**
   * Sets the length of the ray by using a final point.
   * The final point must be along the direction of the ray.
   */
  setFinalPoint(finalPoint) {
    assert && assert(this.isPointAlongRay(finalPoint), 'final point is not along ray');
    this.setLength(finalPoint.minus(this.position).magnitude);
  }

  /**
   * Determines if a point is along the direction of the ray.
   * @param point
   * @param [epsilon] - tolerance value
   */
  isPointAlongRay(point, epsilon = 1e-4) {
    const displacementVector = point.minus(this.position);
    return displacementVector.normalized().equalsEpsilon(this.direction, epsilon);
  }

  /**
   * Gets the distance from the ray's position to a specified point.
   * The point does not need to be along the direction of the ray.
   */
  getDistanceTo(point) {
    const displacementVector = point.minus(this.position);
    return this.direction.dot(displacementVector);
  }
}
geometricOptics.register('GORay', GORay);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYXkyIiwiZ2VvbWV0cmljT3B0aWNzIiwiR09SYXkiLCJjb25zdHJ1Y3RvciIsInBvc2l0aW9uIiwiZGlyZWN0aW9uIiwibGVuZ3RoIiwiSW5maW5pdHkiLCJzZXRMZW5ndGgiLCJhc3NlcnQiLCJpc0Zpbml0ZSIsImdldExlbmd0aCIsInNldEZpbmFsUG9pbnQiLCJmaW5hbFBvaW50IiwiaXNQb2ludEFsb25nUmF5IiwibWludXMiLCJtYWduaXR1ZGUiLCJwb2ludCIsImVwc2lsb24iLCJkaXNwbGFjZW1lbnRWZWN0b3IiLCJub3JtYWxpemVkIiwiZXF1YWxzRXBzaWxvbiIsImdldERpc3RhbmNlVG8iLCJkb3QiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdPUmF5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdPUmF5IGV4dGVuZHMgcGhldC5kb3QuUmF5MiBieSBhZGRpbmcgYSBsZW5ndGggcHJvcGVydHkuIEdlbmVyYWxseSBzcGVha2luZywgYSByYXkgaGFzIG9uZSBlbmRwb2ludCBhbmQgZ29lcyBvblxyXG4gKiBpbmZpbml0ZWx5IGluIG9ubHkgb25lIGRpcmVjdGlvbiAtIHlvdSBjYW5ub3QgbWVhc3VyZSB0aGUgbGVuZ3RoIG9mIGEgcmF5LiBCdXQgb3VyIEdPUmF5IGNhbiBoYXZlIGZpbml0ZSBvclxyXG4gKiBzZW1pLWluZmluaXRlIGxlbmd0aCwgYW5kIGlzIHVzZWQgYnkgTGlnaHRSYXkgdG8gY29tcHV0ZSB0aGUgbGluZSBzZWdtZW50cyB0aGF0IGRlc2NyaWJlIGEgbGlnaHQgcmF5IGFzIGl0XHJcbiAqIHByb3BhZ2F0ZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYXkyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYXkyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHT1JheSBleHRlbmRzIFJheTIge1xyXG5cclxuICAvLyBsZW5ndGggb2YgdGhlIHJheSwgaW4gY21cclxuICBwcml2YXRlIGxlbmd0aDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcG9zaXRpb24gLSBvcmlnaW4gb2YgdGhlIHJheVxyXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gLSBkaXJlY3Rpb24gb2YgdGhlIHJheSwgbXVzdCBiZSBhIG5vcm1hbGl6ZWQgdmVjdG9yLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcG9zaXRpb246IFZlY3RvcjIsIGRpcmVjdGlvbjogVmVjdG9yMiApIHtcclxuICAgIHN1cGVyKCBwb3NpdGlvbiwgZGlyZWN0aW9uICk7XHJcbiAgICB0aGlzLmxlbmd0aCA9IEluZmluaXR5OyAvLyBzZW1pLWluZmluaXRlIGJ5IGRlZmF1bHRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGxlbmd0aCBvZiB0aGUgcmF5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRMZW5ndGgoIGxlbmd0aDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggaXNGaW5pdGUoIGxlbmd0aCApICYmIGxlbmd0aCA+IDAgKTtcclxuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgbGVuZ3RoIG9mIHRoZSByYXkuIE5vdGUgdGhhdCB0aGUgbGVuZ3RoIG1heSBiZSBJbmZpbml0eS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBsZW5ndGggb2YgdGhlIHJheSBieSB1c2luZyBhIGZpbmFsIHBvaW50LlxyXG4gICAqIFRoZSBmaW5hbCBwb2ludCBtdXN0IGJlIGFsb25nIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHJheS5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0RmluYWxQb2ludCggZmluYWxQb2ludDogVmVjdG9yMiApOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuaXNQb2ludEFsb25nUmF5KCBmaW5hbFBvaW50ICksICdmaW5hbCBwb2ludCBpcyBub3QgYWxvbmcgcmF5JyApO1xyXG4gICAgdGhpcy5zZXRMZW5ndGgoIGZpbmFsUG9pbnQubWludXMoIHRoaXMucG9zaXRpb24gKS5tYWduaXR1ZGUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZXMgaWYgYSBwb2ludCBpcyBhbG9uZyB0aGUgZGlyZWN0aW9uIG9mIHRoZSByYXkuXHJcbiAgICogQHBhcmFtIHBvaW50XHJcbiAgICogQHBhcmFtIFtlcHNpbG9uXSAtIHRvbGVyYW5jZSB2YWx1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1BvaW50QWxvbmdSYXkoIHBvaW50OiBWZWN0b3IyLCBlcHNpbG9uID0gMWUtNCApOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGRpc3BsYWNlbWVudFZlY3RvciA9IHBvaW50Lm1pbnVzKCB0aGlzLnBvc2l0aW9uICk7XHJcbiAgICByZXR1cm4gZGlzcGxhY2VtZW50VmVjdG9yLm5vcm1hbGl6ZWQoKS5lcXVhbHNFcHNpbG9uKCB0aGlzLmRpcmVjdGlvbiwgZXBzaWxvbiApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgcmF5J3MgcG9zaXRpb24gdG8gYSBzcGVjaWZpZWQgcG9pbnQuXHJcbiAgICogVGhlIHBvaW50IGRvZXMgbm90IG5lZWQgdG8gYmUgYWxvbmcgdGhlIGRpcmVjdGlvbiBvZiB0aGUgcmF5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREaXN0YW5jZVRvKCBwb2ludDogVmVjdG9yMiApOiBudW1iZXIge1xyXG4gICAgY29uc3QgZGlzcGxhY2VtZW50VmVjdG9yID0gcG9pbnQubWludXMoIHRoaXMucG9zaXRpb24gKTtcclxuICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbi5kb3QoIGRpc3BsYWNlbWVudFZlY3RvciApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnR09SYXknLCBHT1JheSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLElBQUksTUFBTSw0QkFBNEI7QUFFN0MsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUV0RCxlQUFlLE1BQU1DLEtBQUssU0FBU0YsSUFBSSxDQUFDO0VBRXRDOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLFFBQWlCLEVBQUVDLFNBQWtCLEVBQUc7SUFDMUQsS0FBSyxDQUFFRCxRQUFRLEVBQUVDLFNBQVUsQ0FBQztJQUM1QixJQUFJLENBQUNDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLENBQUM7RUFDMUI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLFNBQVNBLENBQUVGLE1BQWMsRUFBUztJQUN2Q0csTUFBTSxJQUFJQSxNQUFNLENBQUVDLFFBQVEsQ0FBRUosTUFBTyxDQUFDLElBQUlBLE1BQU0sR0FBRyxDQUFFLENBQUM7SUFDcEQsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NLLFNBQVNBLENBQUEsRUFBVztJQUN6QixPQUFPLElBQUksQ0FBQ0wsTUFBTTtFQUNwQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTTSxhQUFhQSxDQUFFQyxVQUFtQixFQUFTO0lBQ2hESixNQUFNLElBQUlBLE1BQU0sQ0FBRSxJQUFJLENBQUNLLGVBQWUsQ0FBRUQsVUFBVyxDQUFDLEVBQUUsOEJBQStCLENBQUM7SUFDdEYsSUFBSSxDQUFDTCxTQUFTLENBQUVLLFVBQVUsQ0FBQ0UsS0FBSyxDQUFFLElBQUksQ0FBQ1gsUUFBUyxDQUFDLENBQUNZLFNBQVUsQ0FBQztFQUMvRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NGLGVBQWVBLENBQUVHLEtBQWMsRUFBRUMsT0FBTyxHQUFHLElBQUksRUFBWTtJQUNoRSxNQUFNQyxrQkFBa0IsR0FBR0YsS0FBSyxDQUFDRixLQUFLLENBQUUsSUFBSSxDQUFDWCxRQUFTLENBQUM7SUFDdkQsT0FBT2Usa0JBQWtCLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUNDLGFBQWEsQ0FBRSxJQUFJLENBQUNoQixTQUFTLEVBQUVhLE9BQVEsQ0FBQztFQUNqRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTSSxhQUFhQSxDQUFFTCxLQUFjLEVBQVc7SUFDN0MsTUFBTUUsa0JBQWtCLEdBQUdGLEtBQUssQ0FBQ0YsS0FBSyxDQUFFLElBQUksQ0FBQ1gsUUFBUyxDQUFDO0lBQ3ZELE9BQU8sSUFBSSxDQUFDQyxTQUFTLENBQUNrQixHQUFHLENBQUVKLGtCQUFtQixDQUFDO0VBQ2pEO0FBQ0Y7QUFFQWxCLGVBQWUsQ0FBQ3VCLFFBQVEsQ0FBRSxPQUFPLEVBQUV0QixLQUFNLENBQUMifQ==