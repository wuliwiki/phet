// Copyright 2022-2023, University of Colorado Boulder

/**
 * GOSim is the subclass of Sim used by both geometric-optics and geometric-optics-basics.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Sim from '../../joist/js/Sim.js';
import Tandem from '../../tandem/js/Tandem.js';
import geometricOptics from './geometricOptics.js';
import LensScreen from './lens/LensScreen.js';
import MirrorScreen from './mirror/MirrorScreen.js';
import GOConstants from './common/GOConstants.js';
import optionize from '../../phet-core/js/optionize.js';
import GOPreferencesNode from './common/view/GOPreferencesNode.js';
import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import GOPreferences from './common/model/GOPreferences.js';
import GOKeyboardHelpContent from './common/view/GOKeyboardHelpContent.js';
export default class GOSim extends Sim {
  constructor(titleProperty, providedOptions) {
    const options = optionize()({
      // SimOptions
      credits: GOConstants.CREDITS,
      preferencesModel: new PreferencesModel({
        simulationOptions: {
          customPreferences: [{
            createContent: tandem => new GOPreferencesNode({
              isBasicsVersion: providedOptions.isBasicsVersion,
              tandem: tandem.createTandem('simPreferences')
            }),
            modelLinkables: [{
              property: GOPreferences.focalLengthModelTypeProperty
            }, {
              property: GOPreferences.add2FPointsCheckboxProperty
            }, {
              property: GOPreferences.cueingArrowsEnabledProperty
            }]
          }]
        }
      })
    }, providedOptions);

    // Since keyboard-help is identical for both screens, save memory by reusing the same instance of keyboardHelpNode
    // for both screens, without creating a memory leak.
    let keyboardHelpNode = null;
    const createKeyboardHelpNode = () => {
      if (!keyboardHelpNode) {
        keyboardHelpNode = new GOKeyboardHelpContent();
        keyboardHelpNode.disposeEmitter.addListener(function disposeListener() {
          if (keyboardHelpNode) {
            if (keyboardHelpNode.disposeEmitter.hasListener(disposeListener)) {
              keyboardHelpNode.disposeEmitter.removeListener(disposeListener);
            }
            keyboardHelpNode = null;
          }
        });
      }
      return keyboardHelpNode;
    };
    super(titleProperty, [new LensScreen({
      isBasicsVersion: options.isBasicsVersion,
      createKeyboardHelpNode: createKeyboardHelpNode,
      tandem: Tandem.ROOT.createTandem('lensScreen')
    }), new MirrorScreen({
      isBasicsVersion: options.isBasicsVersion,
      createKeyboardHelpNode: createKeyboardHelpNode,
      tandem: Tandem.ROOT.createTandem('mirrorScreen')
    })], options);
  }
}
geometricOptics.register('GOSim', GOSim);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,