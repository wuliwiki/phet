// Copyright 2021-2022, University of Colorado Boulder

/**
 * LensModel is the model for the 'Lens' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import GOModel from '../../common/model/GOModel.js';
import Lens from './Lens.js';
import geometricOptics from '../../geometricOptics.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import OpticalObjectChoice from '../../common/model/OpticalObjectChoice.js';
import optionize from '../../../../phet-core/js/optionize.js';
import GOQueryParameters from '../../common/GOQueryParameters.js';
export default class LensModel extends GOModel {
  constructor(providedOptions) {
    // See https://github.com/phetsims/geometric-optics/issues/397
    let opticalObjectChoices;
    if (GOQueryParameters.scene === 'framed') {
      opticalObjectChoices = [OpticalObjectChoice.PENCIL];
    } else if (GOQueryParameters.scene === 'arrow') {
      opticalObjectChoices = [OpticalObjectChoice.ARROW];
    } else if (GOQueryParameters.scene === 'light') {
      opticalObjectChoices = [OpticalObjectChoice.LIGHT];
    } else {
      opticalObjectChoices = [OpticalObjectChoice.PENCIL, OpticalObjectChoice.PENGUIN, OpticalObjectChoice.STAR, OpticalObjectChoice.ARROW, OpticalObjectChoice.LIGHT];
    }
    const options = optionize()({
      // GOModelOptions
      opticalObjectChoices: opticalObjectChoices,
      arrowObject1Position: new Vector2(-160, 60),
      arrowObject2Position: new Vector2(-125, 30),
      framedObjectPosition: new Vector2(-170, 27),
      lightObject1Position: new Vector2(-170, 20),
      lightObject2Position: new Vector2(-124, -20)
    }, providedOptions);
    const lens = new Lens({
      tandem: providedOptions.tandem.createTandem('lens')
    });
    super(lens, options);
    this.lens = lens;
  }
  reset() {
    super.reset();
    this.lens.reset();
  }
}
geometricOptics.register('LensModel', LensModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHT01vZGVsIiwiTGVucyIsImdlb21ldHJpY09wdGljcyIsIlZlY3RvcjIiLCJPcHRpY2FsT2JqZWN0Q2hvaWNlIiwib3B0aW9uaXplIiwiR09RdWVyeVBhcmFtZXRlcnMiLCJMZW5zTW9kZWwiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGljYWxPYmplY3RDaG9pY2VzIiwic2NlbmUiLCJQRU5DSUwiLCJBUlJPVyIsIkxJR0hUIiwiUEVOR1VJTiIsIlNUQVIiLCJvcHRpb25zIiwiYXJyb3dPYmplY3QxUG9zaXRpb24iLCJhcnJvd09iamVjdDJQb3NpdGlvbiIsImZyYW1lZE9iamVjdFBvc2l0aW9uIiwibGlnaHRPYmplY3QxUG9zaXRpb24iLCJsaWdodE9iamVjdDJQb3NpdGlvbiIsImxlbnMiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGVuc01vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExlbnNNb2RlbCBpcyB0aGUgbW9kZWwgZm9yIHRoZSAnTGVucycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBHT01vZGVsLCB7IEdPTW9kZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0dPTW9kZWwuanMnO1xyXG5pbXBvcnQgTGVucyBmcm9tICcuL0xlbnMuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE9wdGljYWxPYmplY3RDaG9pY2UgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL09wdGljYWxPYmplY3RDaG9pY2UuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IEdPUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL2NvbW1vbi9HT1F1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgTGVuc01vZGVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPEdPTW9kZWxPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZW5zTW9kZWwgZXh0ZW5kcyBHT01vZGVsIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGxlbnM6IExlbnM7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBMZW5zTW9kZWxPcHRpb25zICkge1xyXG5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ2VvbWV0cmljLW9wdGljcy9pc3N1ZXMvMzk3XHJcbiAgICBsZXQgb3B0aWNhbE9iamVjdENob2ljZXM7XHJcbiAgICBpZiAoIEdPUXVlcnlQYXJhbWV0ZXJzLnNjZW5lID09PSAnZnJhbWVkJyApIHtcclxuICAgICAgb3B0aWNhbE9iamVjdENob2ljZXMgPSBbIE9wdGljYWxPYmplY3RDaG9pY2UuUEVOQ0lMIF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggR09RdWVyeVBhcmFtZXRlcnMuc2NlbmUgPT09ICdhcnJvdycgKSB7XHJcbiAgICAgIG9wdGljYWxPYmplY3RDaG9pY2VzID0gWyBPcHRpY2FsT2JqZWN0Q2hvaWNlLkFSUk9XIF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggR09RdWVyeVBhcmFtZXRlcnMuc2NlbmUgPT09ICdsaWdodCcgKSB7XHJcbiAgICAgIG9wdGljYWxPYmplY3RDaG9pY2VzID0gWyBPcHRpY2FsT2JqZWN0Q2hvaWNlLkxJR0hUIF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgb3B0aWNhbE9iamVjdENob2ljZXMgPSBbXHJcbiAgICAgICAgT3B0aWNhbE9iamVjdENob2ljZS5QRU5DSUwsXHJcbiAgICAgICAgT3B0aWNhbE9iamVjdENob2ljZS5QRU5HVUlOLFxyXG4gICAgICAgIE9wdGljYWxPYmplY3RDaG9pY2UuU1RBUixcclxuICAgICAgICBPcHRpY2FsT2JqZWN0Q2hvaWNlLkFSUk9XLFxyXG4gICAgICAgIE9wdGljYWxPYmplY3RDaG9pY2UuTElHSFRcclxuICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPExlbnNNb2RlbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBHT01vZGVsT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gR09Nb2RlbE9wdGlvbnNcclxuICAgICAgb3B0aWNhbE9iamVjdENob2ljZXM6IG9wdGljYWxPYmplY3RDaG9pY2VzLFxyXG4gICAgICBhcnJvd09iamVjdDFQb3NpdGlvbjogbmV3IFZlY3RvcjIoIC0xNjAsIDYwICksXHJcbiAgICAgIGFycm93T2JqZWN0MlBvc2l0aW9uOiBuZXcgVmVjdG9yMiggLTEyNSwgMzAgKSxcclxuICAgICAgZnJhbWVkT2JqZWN0UG9zaXRpb246IG5ldyBWZWN0b3IyKCAtMTcwLCAyNyApLFxyXG4gICAgICBsaWdodE9iamVjdDFQb3NpdGlvbjogbmV3IFZlY3RvcjIoIC0xNzAsIDIwICksXHJcbiAgICAgIGxpZ2h0T2JqZWN0MlBvc2l0aW9uOiBuZXcgVmVjdG9yMiggLTEyNCwgLTIwIClcclxuXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBsZW5zID0gbmV3IExlbnMoIHtcclxuICAgICAgdGFuZGVtOiBwcm92aWRlZE9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xlbnMnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggbGVucywgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubGVucyA9IGxlbnM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy5sZW5zLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW9tZXRyaWNPcHRpY3MucmVnaXN0ZXIoICdMZW5zTW9kZWwnLCBMZW5zTW9kZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUEwQiwrQkFBK0I7QUFDdkUsT0FBT0MsSUFBSSxNQUFNLFdBQVc7QUFDNUIsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLG1CQUFtQixNQUFNLDJDQUEyQztBQUMzRSxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFNakUsZUFBZSxNQUFNQyxTQUFTLFNBQVNQLE9BQU8sQ0FBQztFQUl0Q1EsV0FBV0EsQ0FBRUMsZUFBaUMsRUFBRztJQUV0RDtJQUNBLElBQUlDLG9CQUFvQjtJQUN4QixJQUFLSixpQkFBaUIsQ0FBQ0ssS0FBSyxLQUFLLFFBQVEsRUFBRztNQUMxQ0Qsb0JBQW9CLEdBQUcsQ0FBRU4sbUJBQW1CLENBQUNRLE1BQU0sQ0FBRTtJQUN2RCxDQUFDLE1BQ0ksSUFBS04saUJBQWlCLENBQUNLLEtBQUssS0FBSyxPQUFPLEVBQUc7TUFDOUNELG9CQUFvQixHQUFHLENBQUVOLG1CQUFtQixDQUFDUyxLQUFLLENBQUU7SUFDdEQsQ0FBQyxNQUNJLElBQUtQLGlCQUFpQixDQUFDSyxLQUFLLEtBQUssT0FBTyxFQUFHO01BQzlDRCxvQkFBb0IsR0FBRyxDQUFFTixtQkFBbUIsQ0FBQ1UsS0FBSyxDQUFFO0lBQ3RELENBQUMsTUFDSTtNQUNISixvQkFBb0IsR0FBRyxDQUNyQk4sbUJBQW1CLENBQUNRLE1BQU0sRUFDMUJSLG1CQUFtQixDQUFDVyxPQUFPLEVBQzNCWCxtQkFBbUIsQ0FBQ1ksSUFBSSxFQUN4QlosbUJBQW1CLENBQUNTLEtBQUssRUFDekJULG1CQUFtQixDQUFDVSxLQUFLLENBQzFCO0lBQ0g7SUFFQSxNQUFNRyxPQUFPLEdBQUdaLFNBQVMsQ0FBZ0QsQ0FBQyxDQUFFO01BRTFFO01BQ0FLLG9CQUFvQixFQUFFQSxvQkFBb0I7TUFDMUNRLG9CQUFvQixFQUFFLElBQUlmLE9BQU8sQ0FBRSxDQUFDLEdBQUcsRUFBRSxFQUFHLENBQUM7TUFDN0NnQixvQkFBb0IsRUFBRSxJQUFJaEIsT0FBTyxDQUFFLENBQUMsR0FBRyxFQUFFLEVBQUcsQ0FBQztNQUM3Q2lCLG9CQUFvQixFQUFFLElBQUlqQixPQUFPLENBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRyxDQUFDO01BQzdDa0Isb0JBQW9CLEVBQUUsSUFBSWxCLE9BQU8sQ0FBRSxDQUFDLEdBQUcsRUFBRSxFQUFHLENBQUM7TUFDN0NtQixvQkFBb0IsRUFBRSxJQUFJbkIsT0FBTyxDQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRztJQUUvQyxDQUFDLEVBQUVNLGVBQWdCLENBQUM7SUFFcEIsTUFBTWMsSUFBSSxHQUFHLElBQUl0QixJQUFJLENBQUU7TUFDckJ1QixNQUFNLEVBQUVmLGVBQWUsQ0FBQ2UsTUFBTSxDQUFDQyxZQUFZLENBQUUsTUFBTztJQUN0RCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVGLElBQUksRUFBRU4sT0FBUSxDQUFDO0lBRXRCLElBQUksQ0FBQ00sSUFBSSxHQUFHQSxJQUFJO0VBQ2xCO0VBRWdCRyxLQUFLQSxDQUFBLEVBQVM7SUFDNUIsS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ0gsSUFBSSxDQUFDRyxLQUFLLENBQUMsQ0FBQztFQUNuQjtBQUNGO0FBRUF4QixlQUFlLENBQUN5QixRQUFRLENBQUUsV0FBVyxFQUFFcEIsU0FBVSxDQUFDIn0=