// Copyright 2021-2022, University of Colorado Boulder

/**
 * LensShapes is the set of Shapes that describe a lens. All Shapes are in model coordinates.
 *
 * The lens shape is approximated as a parabolic lens. The ROC does not necessarily match the actual ROC, and can
 * instead be Hollywooded. This gives the flexibility to draw lenses with ROC that is larger than diameter/2,
 * a physical impossibility. The origin (0,0) is at the geometric center of the lens.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import geometricOptics from '../../geometricOptics.js';

// When isHollywooded:true, this value is added to the actual ROC.
const HOLLYWOOD_RADIUS_OFFSET = 100; // cm

export default class LensShapes {
  // specific to LensShapes
  // the complete lens
  // See OpticShapes
  // the left half of the lens
  // the right half of the lens
  // the entire lens
  /**
   * @param radiusOfCurvature
   * @param diameter - height of the lens, width is foreshortened to provide 3D perspective
   * @param providedOptions
   */
  constructor(radiusOfCurvature, diameter, providedOptions) {
    const options = optionize()({
      // LensShapesOptions
      isHollywooded: true
    }, providedOptions);
    const sign = Math.sign(radiusOfCurvature);
    const magnitude = Math.abs(radiusOfCurvature);
    const halfHeight = diameter / 2;

    // the width of the lens changes with the radius
    const halfWidth = options.isHollywooded ? 1 / 2 * halfHeight * halfHeight / (magnitude + HOLLYWOOD_RADIUS_OFFSET) : magnitude - Math.sqrt(magnitude ** 2 - halfHeight ** 2);
    let lensShape; // the outline of the complete lens
    let frontShape; // the front (left facing) part of the lens
    let backShape; // the back (right facing)  part of the lens

    if (sign >= 0) {
      // two extrema points of the lens
      const top = new Vector2(0, halfHeight);
      const bottom = new Vector2(0, -halfHeight);

      // two control points on the optical axis. Note that the shape does not go through these points.
      // The shape will go through the two points: ( -halfWidth, 0 )  and ( halfWidth, 0 )
      const left = new Vector2(-2 * halfWidth, 0);
      const right = new Vector2(2 * halfWidth, 0);

      // shape of convex lens
      lensShape = new Shape().moveToPoint(top).quadraticCurveToPoint(left, bottom).quadraticCurveToPoint(right, top).close();

      // front (left) surface of the lens
      frontShape = new Shape().moveToPoint(top).quadraticCurveToPoint(left, bottom);

      // back (right) surface of the lens
      backShape = new Shape().moveToPoint(top).quadraticCurveToPoint(right, bottom);
    } else {
      const midWidth = halfWidth;

      // four corners of the concave shape
      const topLeft = new Vector2(-halfWidth, halfHeight);
      const topRight = new Vector2(halfWidth, halfHeight);
      const bottomLeft = new Vector2(-halfWidth, -halfHeight);
      const bottomRight = new Vector2(halfWidth, -halfHeight);

      // control points
      const midLeft = new Vector2(midWidth / 2, 0);
      const midRight = new Vector2(-midWidth / 2, 0);

      // shape of concave lens
      lensShape = new Shape().moveToPoint(topLeft).lineToPoint(topRight).quadraticCurveToPoint(midRight, bottomRight).lineToPoint(bottomLeft).quadraticCurveToPoint(midLeft, topLeft).close();

      // front (left) surface of the lens
      frontShape = new Shape().moveToPoint(topLeft).quadraticCurveToPoint(midLeft, bottomLeft);

      // back (right) surface of the lens
      backShape = new Shape().moveToPoint(topRight).quadraticCurveToPoint(midRight, bottomRight);
    }
    this.lensShape = lensShape;
    this.frontShape = frontShape;
    this.backShape = backShape;
    this.activeBoundsShape = lensShape; // Active bounds are defined by the entire lens
  }
}

geometricOptics.register('LensShapes', LensShapes);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2hhcGUiLCJvcHRpb25pemUiLCJnZW9tZXRyaWNPcHRpY3MiLCJIT0xMWVdPT0RfUkFESVVTX09GRlNFVCIsIkxlbnNTaGFwZXMiLCJjb25zdHJ1Y3RvciIsInJhZGl1c09mQ3VydmF0dXJlIiwiZGlhbWV0ZXIiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaXNIb2xseXdvb2RlZCIsInNpZ24iLCJNYXRoIiwibWFnbml0dWRlIiwiYWJzIiwiaGFsZkhlaWdodCIsImhhbGZXaWR0aCIsInNxcnQiLCJsZW5zU2hhcGUiLCJmcm9udFNoYXBlIiwiYmFja1NoYXBlIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwibW92ZVRvUG9pbnQiLCJxdWFkcmF0aWNDdXJ2ZVRvUG9pbnQiLCJjbG9zZSIsIm1pZFdpZHRoIiwidG9wTGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tTGVmdCIsImJvdHRvbVJpZ2h0IiwibWlkTGVmdCIsIm1pZFJpZ2h0IiwibGluZVRvUG9pbnQiLCJhY3RpdmVCb3VuZHNTaGFwZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGVuc1NoYXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMZW5zU2hhcGVzIGlzIHRoZSBzZXQgb2YgU2hhcGVzIHRoYXQgZGVzY3JpYmUgYSBsZW5zLiBBbGwgU2hhcGVzIGFyZSBpbiBtb2RlbCBjb29yZGluYXRlcy5cclxuICpcclxuICogVGhlIGxlbnMgc2hhcGUgaXMgYXBwcm94aW1hdGVkIGFzIGEgcGFyYWJvbGljIGxlbnMuIFRoZSBST0MgZG9lcyBub3QgbmVjZXNzYXJpbHkgbWF0Y2ggdGhlIGFjdHVhbCBST0MsIGFuZCBjYW5cclxuICogaW5zdGVhZCBiZSBIb2xseXdvb2RlZC4gVGhpcyBnaXZlcyB0aGUgZmxleGliaWxpdHkgdG8gZHJhdyBsZW5zZXMgd2l0aCBST0MgdGhhdCBpcyBsYXJnZXIgdGhhbiBkaWFtZXRlci8yLFxyXG4gKiBhIHBoeXNpY2FsIGltcG9zc2liaWxpdHkuIFRoZSBvcmlnaW4gKDAsMCkgaXMgYXQgdGhlIGdlb21ldHJpYyBjZW50ZXIgb2YgdGhlIGxlbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgT3B0aWNTaGFwZXMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL09wdGljU2hhcGVzLmpzJztcclxuaW1wb3J0IGdlb21ldHJpY09wdGljcyBmcm9tICcuLi8uLi9nZW9tZXRyaWNPcHRpY3MuanMnO1xyXG5cclxuLy8gV2hlbiBpc0hvbGx5d29vZGVkOnRydWUsIHRoaXMgdmFsdWUgaXMgYWRkZWQgdG8gdGhlIGFjdHVhbCBST0MuXHJcbmNvbnN0IEhPTExZV09PRF9SQURJVVNfT0ZGU0VUID0gMTAwOyAvLyBjbVxyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gdHJ1ZTogYXBwcm94aW1hdGlvbiwgZmFsc2U6IGFjY3VyYXRlLCBtYXRjaGVzIFJPQ1xyXG4gIGlzSG9sbHl3b29kZWQ/OiBib29sZWFuO1xyXG59O1xyXG5cclxudHlwZSBMZW5zU2hhcGVzT3B0aW9ucyA9IFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGVuc1NoYXBlcyBpbXBsZW1lbnRzIE9wdGljU2hhcGVzIHtcclxuXHJcbiAgLy8gc3BlY2lmaWMgdG8gTGVuc1NoYXBlc1xyXG4gIHB1YmxpYyByZWFkb25seSBsZW5zU2hhcGU6IFNoYXBlOyAvLyB0aGUgY29tcGxldGUgbGVuc1xyXG5cclxuICAvLyBTZWUgT3B0aWNTaGFwZXNcclxuICBwdWJsaWMgcmVhZG9ubHkgZnJvbnRTaGFwZTogU2hhcGU7IC8vIHRoZSBsZWZ0IGhhbGYgb2YgdGhlIGxlbnNcclxuICBwdWJsaWMgcmVhZG9ubHkgYmFja1NoYXBlOiBTaGFwZTsgLy8gdGhlIHJpZ2h0IGhhbGYgb2YgdGhlIGxlbnNcclxuICBwdWJsaWMgcmVhZG9ubHkgYWN0aXZlQm91bmRzU2hhcGU6IFNoYXBlOyAvLyB0aGUgZW50aXJlIGxlbnNcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHJhZGl1c09mQ3VydmF0dXJlXHJcbiAgICogQHBhcmFtIGRpYW1ldGVyIC0gaGVpZ2h0IG9mIHRoZSBsZW5zLCB3aWR0aCBpcyBmb3Jlc2hvcnRlbmVkIHRvIHByb3ZpZGUgM0QgcGVyc3BlY3RpdmVcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCByYWRpdXNPZkN1cnZhdHVyZTogbnVtYmVyLCBkaWFtZXRlcjogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM/OiBMZW5zU2hhcGVzT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPExlbnNTaGFwZXNPcHRpb25zLCBTZWxmT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTGVuc1NoYXBlc09wdGlvbnNcclxuICAgICAgaXNIb2xseXdvb2RlZDogdHJ1ZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3Qgc2lnbiA9IE1hdGguc2lnbiggcmFkaXVzT2ZDdXJ2YXR1cmUgKTtcclxuICAgIGNvbnN0IG1hZ25pdHVkZSA9IE1hdGguYWJzKCByYWRpdXNPZkN1cnZhdHVyZSApO1xyXG4gICAgY29uc3QgaGFsZkhlaWdodCA9IGRpYW1ldGVyIC8gMjtcclxuXHJcbiAgICAvLyB0aGUgd2lkdGggb2YgdGhlIGxlbnMgY2hhbmdlcyB3aXRoIHRoZSByYWRpdXNcclxuICAgIGNvbnN0IGhhbGZXaWR0aCA9IG9wdGlvbnMuaXNIb2xseXdvb2RlZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAxIC8gMiAqIGhhbGZIZWlnaHQgKiBoYWxmSGVpZ2h0IC8gKCBtYWduaXR1ZGUgKyBIT0xMWVdPT0RfUkFESVVTX09GRlNFVCApIDpcclxuICAgICAgICAgICAgICAgICAgICAgIG1hZ25pdHVkZSAtIE1hdGguc3FydCggbWFnbml0dWRlICoqIDIgLSBoYWxmSGVpZ2h0ICoqIDIgKTtcclxuXHJcbiAgICBsZXQgbGVuc1NoYXBlOiBTaGFwZTsgLy8gdGhlIG91dGxpbmUgb2YgdGhlIGNvbXBsZXRlIGxlbnNcclxuICAgIGxldCBmcm9udFNoYXBlOiBTaGFwZTsgLy8gdGhlIGZyb250IChsZWZ0IGZhY2luZykgcGFydCBvZiB0aGUgbGVuc1xyXG4gICAgbGV0IGJhY2tTaGFwZTogU2hhcGU7IC8vIHRoZSBiYWNrIChyaWdodCBmYWNpbmcpICBwYXJ0IG9mIHRoZSBsZW5zXHJcblxyXG4gICAgaWYgKCBzaWduID49IDAgKSB7XHJcblxyXG4gICAgICAvLyB0d28gZXh0cmVtYSBwb2ludHMgb2YgdGhlIGxlbnNcclxuICAgICAgY29uc3QgdG9wID0gbmV3IFZlY3RvcjIoIDAsIGhhbGZIZWlnaHQgKTtcclxuICAgICAgY29uc3QgYm90dG9tID0gbmV3IFZlY3RvcjIoIDAsIC1oYWxmSGVpZ2h0ICk7XHJcblxyXG4gICAgICAvLyB0d28gY29udHJvbCBwb2ludHMgb24gdGhlIG9wdGljYWwgYXhpcy4gTm90ZSB0aGF0IHRoZSBzaGFwZSBkb2VzIG5vdCBnbyB0aHJvdWdoIHRoZXNlIHBvaW50cy5cclxuICAgICAgLy8gVGhlIHNoYXBlIHdpbGwgZ28gdGhyb3VnaCB0aGUgdHdvIHBvaW50czogKCAtaGFsZldpZHRoLCAwICkgIGFuZCAoIGhhbGZXaWR0aCwgMCApXHJcbiAgICAgIGNvbnN0IGxlZnQgPSBuZXcgVmVjdG9yMiggLTIgKiBoYWxmV2lkdGgsIDAgKTtcclxuICAgICAgY29uc3QgcmlnaHQgPSBuZXcgVmVjdG9yMiggMiAqIGhhbGZXaWR0aCwgMCApO1xyXG5cclxuICAgICAgLy8gc2hhcGUgb2YgY29udmV4IGxlbnNcclxuICAgICAgbGVuc1NoYXBlID0gbmV3IFNoYXBlKClcclxuICAgICAgICAubW92ZVRvUG9pbnQoIHRvcCApXHJcbiAgICAgICAgLnF1YWRyYXRpY0N1cnZlVG9Qb2ludCggbGVmdCwgYm90dG9tIClcclxuICAgICAgICAucXVhZHJhdGljQ3VydmVUb1BvaW50KCByaWdodCwgdG9wIClcclxuICAgICAgICAuY2xvc2UoKTtcclxuXHJcbiAgICAgIC8vIGZyb250IChsZWZ0KSBzdXJmYWNlIG9mIHRoZSBsZW5zXHJcbiAgICAgIGZyb250U2hhcGUgPSBuZXcgU2hhcGUoKVxyXG4gICAgICAgIC5tb3ZlVG9Qb2ludCggdG9wIClcclxuICAgICAgICAucXVhZHJhdGljQ3VydmVUb1BvaW50KCBsZWZ0LCBib3R0b20gKTtcclxuXHJcbiAgICAgIC8vIGJhY2sgKHJpZ2h0KSBzdXJmYWNlIG9mIHRoZSBsZW5zXHJcbiAgICAgIGJhY2tTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgICAgLm1vdmVUb1BvaW50KCB0b3AgKVxyXG4gICAgICAgIC5xdWFkcmF0aWNDdXJ2ZVRvUG9pbnQoIHJpZ2h0LCBib3R0b20gKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjb25zdCBtaWRXaWR0aCA9IGhhbGZXaWR0aDtcclxuXHJcbiAgICAgIC8vIGZvdXIgY29ybmVycyBvZiB0aGUgY29uY2F2ZSBzaGFwZVxyXG4gICAgICBjb25zdCB0b3BMZWZ0ID0gbmV3IFZlY3RvcjIoIC1oYWxmV2lkdGgsIGhhbGZIZWlnaHQgKTtcclxuICAgICAgY29uc3QgdG9wUmlnaHQgPSBuZXcgVmVjdG9yMiggaGFsZldpZHRoLCBoYWxmSGVpZ2h0ICk7XHJcbiAgICAgIGNvbnN0IGJvdHRvbUxlZnQgPSBuZXcgVmVjdG9yMiggLWhhbGZXaWR0aCwgLWhhbGZIZWlnaHQgKTtcclxuICAgICAgY29uc3QgYm90dG9tUmlnaHQgPSBuZXcgVmVjdG9yMiggaGFsZldpZHRoLCAtaGFsZkhlaWdodCApO1xyXG5cclxuICAgICAgLy8gY29udHJvbCBwb2ludHNcclxuICAgICAgY29uc3QgbWlkTGVmdCA9IG5ldyBWZWN0b3IyKCBtaWRXaWR0aCAvIDIsIDAgKTtcclxuICAgICAgY29uc3QgbWlkUmlnaHQgPSBuZXcgVmVjdG9yMiggLW1pZFdpZHRoIC8gMiwgMCApO1xyXG5cclxuICAgICAgLy8gc2hhcGUgb2YgY29uY2F2ZSBsZW5zXHJcbiAgICAgIGxlbnNTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgICAgLm1vdmVUb1BvaW50KCB0b3BMZWZ0IClcclxuICAgICAgICAubGluZVRvUG9pbnQoIHRvcFJpZ2h0IClcclxuICAgICAgICAucXVhZHJhdGljQ3VydmVUb1BvaW50KCBtaWRSaWdodCwgYm90dG9tUmlnaHQgKVxyXG4gICAgICAgIC5saW5lVG9Qb2ludCggYm90dG9tTGVmdCApXHJcbiAgICAgICAgLnF1YWRyYXRpY0N1cnZlVG9Qb2ludCggbWlkTGVmdCwgdG9wTGVmdCApXHJcbiAgICAgICAgLmNsb3NlKCk7XHJcblxyXG4gICAgICAvLyBmcm9udCAobGVmdCkgc3VyZmFjZSBvZiB0aGUgbGVuc1xyXG4gICAgICBmcm9udFNoYXBlID0gbmV3IFNoYXBlKClcclxuICAgICAgICAubW92ZVRvUG9pbnQoIHRvcExlZnQgKVxyXG4gICAgICAgIC5xdWFkcmF0aWNDdXJ2ZVRvUG9pbnQoIG1pZExlZnQsIGJvdHRvbUxlZnQgKTtcclxuXHJcbiAgICAgIC8vIGJhY2sgKHJpZ2h0KSBzdXJmYWNlIG9mIHRoZSBsZW5zXHJcbiAgICAgIGJhY2tTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgICAgLm1vdmVUb1BvaW50KCB0b3BSaWdodCApXHJcbiAgICAgICAgLnF1YWRyYXRpY0N1cnZlVG9Qb2ludCggbWlkUmlnaHQsIGJvdHRvbVJpZ2h0ICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5sZW5zU2hhcGUgPSBsZW5zU2hhcGU7XHJcbiAgICB0aGlzLmZyb250U2hhcGUgPSBmcm9udFNoYXBlO1xyXG4gICAgdGhpcy5iYWNrU2hhcGUgPSBiYWNrU2hhcGU7XHJcbiAgICB0aGlzLmFjdGl2ZUJvdW5kc1NoYXBlID0gbGVuc1NoYXBlOyAvLyBBY3RpdmUgYm91bmRzIGFyZSBkZWZpbmVkIGJ5IHRoZSBlbnRpcmUgbGVuc1xyXG4gIH1cclxufVxyXG5cclxuZ2VvbWV0cmljT3B0aWNzLnJlZ2lzdGVyKCAnTGVuc1NoYXBlcycsIExlbnNTaGFwZXMgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBRTdELE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7O0FBRXREO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLENBQUM7O0FBVXJDLGVBQWUsTUFBTUMsVUFBVSxDQUF3QjtFQUVyRDtFQUNrQztFQUVsQztFQUNtQztFQUNEO0VBQ1E7RUFFMUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNTQyxXQUFXQSxDQUFFQyxpQkFBeUIsRUFBRUMsUUFBZ0IsRUFBRUMsZUFBbUMsRUFBRztJQUVyRyxNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBaUMsQ0FBQyxDQUFFO01BRTNEO01BQ0FTLGFBQWEsRUFBRTtJQUNqQixDQUFDLEVBQUVGLGVBQWdCLENBQUM7SUFFcEIsTUFBTUcsSUFBSSxHQUFHQyxJQUFJLENBQUNELElBQUksQ0FBRUwsaUJBQWtCLENBQUM7SUFDM0MsTUFBTU8sU0FBUyxHQUFHRCxJQUFJLENBQUNFLEdBQUcsQ0FBRVIsaUJBQWtCLENBQUM7SUFDL0MsTUFBTVMsVUFBVSxHQUFHUixRQUFRLEdBQUcsQ0FBQzs7SUFFL0I7SUFDQSxNQUFNUyxTQUFTLEdBQUdQLE9BQU8sQ0FBQ0MsYUFBYSxHQUNyQixDQUFDLEdBQUcsQ0FBQyxHQUFHSyxVQUFVLEdBQUdBLFVBQVUsSUFBS0YsU0FBUyxHQUFHVix1QkFBdUIsQ0FBRSxHQUN6RVUsU0FBUyxHQUFHRCxJQUFJLENBQUNLLElBQUksQ0FBRUosU0FBUyxJQUFJLENBQUMsR0FBR0UsVUFBVSxJQUFJLENBQUUsQ0FBQztJQUUzRSxJQUFJRyxTQUFnQixDQUFDLENBQUM7SUFDdEIsSUFBSUMsVUFBaUIsQ0FBQyxDQUFDO0lBQ3ZCLElBQUlDLFNBQWdCLENBQUMsQ0FBQzs7SUFFdEIsSUFBS1QsSUFBSSxJQUFJLENBQUMsRUFBRztNQUVmO01BQ0EsTUFBTVUsR0FBRyxHQUFHLElBQUl0QixPQUFPLENBQUUsQ0FBQyxFQUFFZ0IsVUFBVyxDQUFDO01BQ3hDLE1BQU1PLE1BQU0sR0FBRyxJQUFJdkIsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDZ0IsVUFBVyxDQUFDOztNQUU1QztNQUNBO01BQ0EsTUFBTVEsSUFBSSxHQUFHLElBQUl4QixPQUFPLENBQUUsQ0FBQyxDQUFDLEdBQUdpQixTQUFTLEVBQUUsQ0FBRSxDQUFDO01BQzdDLE1BQU1RLEtBQUssR0FBRyxJQUFJekIsT0FBTyxDQUFFLENBQUMsR0FBR2lCLFNBQVMsRUFBRSxDQUFFLENBQUM7O01BRTdDO01BQ0FFLFNBQVMsR0FBRyxJQUFJbEIsS0FBSyxDQUFDLENBQUMsQ0FDcEJ5QixXQUFXLENBQUVKLEdBQUksQ0FBQyxDQUNsQksscUJBQXFCLENBQUVILElBQUksRUFBRUQsTUFBTyxDQUFDLENBQ3JDSSxxQkFBcUIsQ0FBRUYsS0FBSyxFQUFFSCxHQUFJLENBQUMsQ0FDbkNNLEtBQUssQ0FBQyxDQUFDOztNQUVWO01BQ0FSLFVBQVUsR0FBRyxJQUFJbkIsS0FBSyxDQUFDLENBQUMsQ0FDckJ5QixXQUFXLENBQUVKLEdBQUksQ0FBQyxDQUNsQksscUJBQXFCLENBQUVILElBQUksRUFBRUQsTUFBTyxDQUFDOztNQUV4QztNQUNBRixTQUFTLEdBQUcsSUFBSXBCLEtBQUssQ0FBQyxDQUFDLENBQ3BCeUIsV0FBVyxDQUFFSixHQUFJLENBQUMsQ0FDbEJLLHFCQUFxQixDQUFFRixLQUFLLEVBQUVGLE1BQU8sQ0FBQztJQUMzQyxDQUFDLE1BQ0k7TUFDSCxNQUFNTSxRQUFRLEdBQUdaLFNBQVM7O01BRTFCO01BQ0EsTUFBTWEsT0FBTyxHQUFHLElBQUk5QixPQUFPLENBQUUsQ0FBQ2lCLFNBQVMsRUFBRUQsVUFBVyxDQUFDO01BQ3JELE1BQU1lLFFBQVEsR0FBRyxJQUFJL0IsT0FBTyxDQUFFaUIsU0FBUyxFQUFFRCxVQUFXLENBQUM7TUFDckQsTUFBTWdCLFVBQVUsR0FBRyxJQUFJaEMsT0FBTyxDQUFFLENBQUNpQixTQUFTLEVBQUUsQ0FBQ0QsVUFBVyxDQUFDO01BQ3pELE1BQU1pQixXQUFXLEdBQUcsSUFBSWpDLE9BQU8sQ0FBRWlCLFNBQVMsRUFBRSxDQUFDRCxVQUFXLENBQUM7O01BRXpEO01BQ0EsTUFBTWtCLE9BQU8sR0FBRyxJQUFJbEMsT0FBTyxDQUFFNkIsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFFLENBQUM7TUFDOUMsTUFBTU0sUUFBUSxHQUFHLElBQUluQyxPQUFPLENBQUUsQ0FBQzZCLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFDOztNQUVoRDtNQUNBVixTQUFTLEdBQUcsSUFBSWxCLEtBQUssQ0FBQyxDQUFDLENBQ3BCeUIsV0FBVyxDQUFFSSxPQUFRLENBQUMsQ0FDdEJNLFdBQVcsQ0FBRUwsUUFBUyxDQUFDLENBQ3ZCSixxQkFBcUIsQ0FBRVEsUUFBUSxFQUFFRixXQUFZLENBQUMsQ0FDOUNHLFdBQVcsQ0FBRUosVUFBVyxDQUFDLENBQ3pCTCxxQkFBcUIsQ0FBRU8sT0FBTyxFQUFFSixPQUFRLENBQUMsQ0FDekNGLEtBQUssQ0FBQyxDQUFDOztNQUVWO01BQ0FSLFVBQVUsR0FBRyxJQUFJbkIsS0FBSyxDQUFDLENBQUMsQ0FDckJ5QixXQUFXLENBQUVJLE9BQVEsQ0FBQyxDQUN0QkgscUJBQXFCLENBQUVPLE9BQU8sRUFBRUYsVUFBVyxDQUFDOztNQUUvQztNQUNBWCxTQUFTLEdBQUcsSUFBSXBCLEtBQUssQ0FBQyxDQUFDLENBQ3BCeUIsV0FBVyxDQUFFSyxRQUFTLENBQUMsQ0FDdkJKLHFCQUFxQixDQUFFUSxRQUFRLEVBQUVGLFdBQVksQ0FBQztJQUNuRDtJQUVBLElBQUksQ0FBQ2QsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ2dCLGlCQUFpQixHQUFHbEIsU0FBUyxDQUFDLENBQUM7RUFDdEM7QUFDRjs7QUFFQWhCLGVBQWUsQ0FBQ21DLFFBQVEsQ0FBRSxZQUFZLEVBQUVqQyxVQUFXLENBQUMifQ==