// Copyright 2021-2022, University of Colorado Boulder

/**
 * LensScreenView is the view for the 'Lens' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import GOScreenView from '../../common/view/GOScreenView.js';
import geometricOptics from '../../geometricOptics.js';
import LensNode from './LensNode.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class LensScreenView extends GOScreenView {
  constructor(model, providedOptions) {
    const options = optionize()({
      // GOScreenViewOptions

      // View origin is slightly above center of the layoutBounds.
      getViewOrigin: layoutBounds => new Vector2(layoutBounds.centerX, layoutBounds.centerY - 35),
      // Creates the Node for the lens
      createOpticNode: (modelViewTransform, parentTandem) => {
        return new LensNode(model.lens, modelViewTransform, {
          tandem: parentTandem.createTandem('lensNode')
        });
      }
    }, providedOptions);
    super(model, options);
  }
}
geometricOptics.register('LensScreenView', LensScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiR09TY3JlZW5WaWV3IiwiZ2VvbWV0cmljT3B0aWNzIiwiTGVuc05vZGUiLCJvcHRpb25pemUiLCJMZW5zU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZ2V0Vmlld09yaWdpbiIsImxheW91dEJvdW5kcyIsImNlbnRlclgiLCJjZW50ZXJZIiwiY3JlYXRlT3B0aWNOb2RlIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicGFyZW50VGFuZGVtIiwibGVucyIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGVuc1NjcmVlblZpZXcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTGVuc1NjcmVlblZpZXcgaXMgdGhlIHZpZXcgZm9yIHRoZSAnTGVucycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgR09TY3JlZW5WaWV3LCB7IEdPU2NyZWVuVmlld09wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9HT1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgZ2VvbWV0cmljT3B0aWNzIGZyb20gJy4uLy4uL2dlb21ldHJpY09wdGljcy5qcyc7XHJcbmltcG9ydCBMZW5zTW9kZWwgZnJvbSAnLi4vbW9kZWwvTGVuc01vZGVsLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgTGVuc05vZGUgZnJvbSAnLi9MZW5zTm9kZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIExlbnNTY3JlZW5WaWV3T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPEdPU2NyZWVuVmlld09wdGlvbnMsICdpc0Jhc2ljc1ZlcnNpb24nIHwgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGVuc1NjcmVlblZpZXcgZXh0ZW5kcyBHT1NjcmVlblZpZXcge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBMZW5zTW9kZWwsIHByb3ZpZGVkT3B0aW9uczogTGVuc1NjcmVlblZpZXdPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TGVuc1NjcmVlblZpZXdPcHRpb25zLCBTZWxmT3B0aW9ucywgR09TY3JlZW5WaWV3T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gR09TY3JlZW5WaWV3T3B0aW9uc1xyXG5cclxuICAgICAgLy8gVmlldyBvcmlnaW4gaXMgc2xpZ2h0bHkgYWJvdmUgY2VudGVyIG9mIHRoZSBsYXlvdXRCb3VuZHMuXHJcbiAgICAgIGdldFZpZXdPcmlnaW46ICggbGF5b3V0Qm91bmRzOiBCb3VuZHMyICkgPT4gbmV3IFZlY3RvcjIoIGxheW91dEJvdW5kcy5jZW50ZXJYLCBsYXlvdXRCb3VuZHMuY2VudGVyWSAtIDM1ICksXHJcblxyXG4gICAgICAvLyBDcmVhdGVzIHRoZSBOb2RlIGZvciB0aGUgbGVuc1xyXG4gICAgICBjcmVhdGVPcHRpY05vZGU6ICggbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLCBwYXJlbnRUYW5kZW06IFRhbmRlbSApID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IExlbnNOb2RlKCBtb2RlbC5sZW5zLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgICAgIHRhbmRlbTogcGFyZW50VGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xlbnNOb2RlJyApXHJcbiAgICAgICAgfSApO1xyXG4gICAgICB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlb21ldHJpY09wdGljcy5yZWdpc3RlciggJ0xlbnNTY3JlZW5WaWV3JywgTGVuc1NjcmVlblZpZXcgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUVuRCxPQUFPQyxZQUFZLE1BQStCLG1DQUFtQztBQUNyRixPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBR3RELE9BQU9DLFFBQVEsTUFBTSxlQUFlO0FBQ3BDLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBT25GLGVBQWUsTUFBTUMsY0FBYyxTQUFTSixZQUFZLENBQUM7RUFFaERLLFdBQVdBLENBQUVDLEtBQWdCLEVBQUVDLGVBQXNDLEVBQUc7SUFFN0UsTUFBTUMsT0FBTyxHQUFHTCxTQUFTLENBQTBELENBQUMsQ0FBRTtNQUVwRjs7TUFFQTtNQUNBTSxhQUFhLEVBQUlDLFlBQXFCLElBQU0sSUFBSVgsT0FBTyxDQUFFVyxZQUFZLENBQUNDLE9BQU8sRUFBRUQsWUFBWSxDQUFDRSxPQUFPLEdBQUcsRUFBRyxDQUFDO01BRTFHO01BQ0FDLGVBQWUsRUFBRUEsQ0FBRUMsa0JBQXVDLEVBQUVDLFlBQW9CLEtBQU07UUFDcEYsT0FBTyxJQUFJYixRQUFRLENBQUVJLEtBQUssQ0FBQ1UsSUFBSSxFQUFFRixrQkFBa0IsRUFBRTtVQUNuREcsTUFBTSxFQUFFRixZQUFZLENBQUNHLFlBQVksQ0FBRSxVQUFXO1FBQ2hELENBQUUsQ0FBQztNQUNMO0lBQ0YsQ0FBQyxFQUFFWCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsS0FBSyxFQUFFRSxPQUFRLENBQUM7RUFDekI7QUFDRjtBQUVBUCxlQUFlLENBQUNrQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVmLGNBQWUsQ0FBQyJ9