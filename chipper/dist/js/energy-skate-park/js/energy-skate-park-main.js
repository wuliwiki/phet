// Copyright 2013-2023, University of Colorado Boulder

/**
 * Entry point for PhET Interactive Simulation's Energy Skate Park application.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import simLauncher from '../../joist/js/simLauncher.js';
import Tandem from '../../tandem/js/Tandem.js';
import PreferencesModel from './../../joist/js/preferences/PreferencesModel.js';
import EnergySkateParkSim from './common/EnergySkateParkSim.js';
import EnergySkateParkPreferencesModel from './common/model/EnergySkateParkPreferencesModel.js';
import EnergySkateParkPreferencesNode from './common/view/EnergySkateParkPreferencesNode.js';
import SkaterImages from './common/view/SkaterImages.js';
import EnergySkateParkStrings from './EnergySkateParkStrings.js';
import GraphsScreen from './graphs/GraphsScreen.js';
import IntroScreen from './intro/IntroScreen.js';
import MeasureScreen from './measure/MeasureScreen.js';
import PlaygroundScreen from './playground/PlaygroundScreen.js';
const energySkateParkTitleStringProperty = EnergySkateParkStrings['energy-skate-park'].titleStringProperty;
const energySkateParkPreferencesModel = new EnergySkateParkPreferencesModel();

// constants
const rootTandem = Tandem.ROOT;
simLauncher.launch(() => {
  const screens = [new IntroScreen(energySkateParkPreferencesModel, rootTandem.createTandem('introScreen')), new MeasureScreen(energySkateParkPreferencesModel, rootTandem.createTandem('measureScreen')), new GraphsScreen(energySkateParkPreferencesModel, rootTandem.createTandem('graphsScreen')), new PlaygroundScreen(energySkateParkPreferencesModel, rootTandem.createTandem('playgroundScreen'))];
  new EnergySkateParkSim(energySkateParkTitleStringProperty, screens, rootTandem, {
    preferencesModel: new PreferencesModel({
      simulationOptions: {
        customPreferences: [{
          createContent: tandem => new EnergySkateParkPreferencesNode(energySkateParkPreferencesModel, tandem.createTandem('simPreferences'))
        }]
      },
      localizationOptions: {
        characterSets: SkaterImages.SKATER_CHARACTER_SETS,
        supportsDynamicLocales: false
      }
    }),
    credits: {
      leadDesign: 'Noah Podolefsky, Sam Reid, Amy Rouinfar',
      softwareDevelopment: 'Sam Reid, Jesse Greenberg, Marla Schulz, Agustín Vallejo',
      team: 'Michael Dubson, Bryce Gruneich, Trish Loeblein, Diana López Tavares, Emily B. Moore, Ariel Paul, Kathy Perkins',
      graphicArts: 'Mariah Hermsmeyer, Megan Lai, Amanda McGarry, Sharon Siman-Tov',
      qualityAssurance: 'Jaspe Arias, Catherine Carter, Steele Dalton, Jaron Droder, Megan Lai, Brooklyn Lash, Emily Miller, Oliver Orejola, Arnab Purkayastha, Devon Quispe, Sam Reid, Nancy Salpepi, Kathryn Woessner, Bryan Yoelin'
    }
  }).start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzaW1MYXVuY2hlciIsIlRhbmRlbSIsIlByZWZlcmVuY2VzTW9kZWwiLCJFbmVyZ3lTa2F0ZVBhcmtTaW0iLCJFbmVyZ3lTa2F0ZVBhcmtQcmVmZXJlbmNlc01vZGVsIiwiRW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNOb2RlIiwiU2thdGVySW1hZ2VzIiwiRW5lcmd5U2thdGVQYXJrU3RyaW5ncyIsIkdyYXBoc1NjcmVlbiIsIkludHJvU2NyZWVuIiwiTWVhc3VyZVNjcmVlbiIsIlBsYXlncm91bmRTY3JlZW4iLCJlbmVyZ3lTa2F0ZVBhcmtUaXRsZVN0cmluZ1Byb3BlcnR5IiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsImVuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTW9kZWwiLCJyb290VGFuZGVtIiwiUk9PVCIsImxhdW5jaCIsInNjcmVlbnMiLCJjcmVhdGVUYW5kZW0iLCJwcmVmZXJlbmNlc01vZGVsIiwic2ltdWxhdGlvbk9wdGlvbnMiLCJjdXN0b21QcmVmZXJlbmNlcyIsImNyZWF0ZUNvbnRlbnQiLCJ0YW5kZW0iLCJsb2NhbGl6YXRpb25PcHRpb25zIiwiY2hhcmFjdGVyU2V0cyIsIlNLQVRFUl9DSEFSQUNURVJfU0VUUyIsInN1cHBvcnRzRHluYW1pY0xvY2FsZXMiLCJjcmVkaXRzIiwibGVhZERlc2lnbiIsInNvZnR3YXJlRGV2ZWxvcG1lbnQiLCJ0ZWFtIiwiZ3JhcGhpY0FydHMiLCJxdWFsaXR5QXNzdXJhbmNlIiwic3RhcnQiXSwic291cmNlcyI6WyJlbmVyZ3ktc2thdGUtcGFyay1tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVudHJ5IHBvaW50IGZvciBQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb24ncyBFbmVyZ3kgU2thdGUgUGFyayBhcHBsaWNhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgc2ltTGF1bmNoZXIgZnJvbSAnLi4vLi4vam9pc3QvanMvc2ltTGF1bmNoZXIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNNb2RlbCBmcm9tICcuLy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzTW9kZWwuanMnO1xyXG5pbXBvcnQgRW5lcmd5U2thdGVQYXJrU2ltIGZyb20gJy4vY29tbW9uL0VuZXJneVNrYXRlUGFya1NpbS5qcyc7XHJcbmltcG9ydCBFbmVyZ3lTa2F0ZVBhcmtQcmVmZXJlbmNlc01vZGVsIGZyb20gJy4vY29tbW9uL21vZGVsL0VuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTW9kZWwuanMnO1xyXG5pbXBvcnQgRW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNOb2RlIGZyb20gJy4vY29tbW9uL3ZpZXcvRW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNOb2RlLmpzJztcclxuaW1wb3J0IFNrYXRlckltYWdlcyBmcm9tICcuL2NvbW1vbi92aWV3L1NrYXRlckltYWdlcy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lTa2F0ZVBhcmtTdHJpbmdzIGZyb20gJy4vRW5lcmd5U2thdGVQYXJrU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBHcmFwaHNTY3JlZW4gZnJvbSAnLi9ncmFwaHMvR3JhcGhzU2NyZWVuLmpzJztcclxuaW1wb3J0IEludHJvU2NyZWVuIGZyb20gJy4vaW50cm8vSW50cm9TY3JlZW4uanMnO1xyXG5pbXBvcnQgTWVhc3VyZVNjcmVlbiBmcm9tICcuL21lYXN1cmUvTWVhc3VyZVNjcmVlbi5qcyc7XHJcbmltcG9ydCBQbGF5Z3JvdW5kU2NyZWVuIGZyb20gJy4vcGxheWdyb3VuZC9QbGF5Z3JvdW5kU2NyZWVuLmpzJztcclxuXHJcbmNvbnN0IGVuZXJneVNrYXRlUGFya1RpdGxlU3RyaW5nUHJvcGVydHkgPSBFbmVyZ3lTa2F0ZVBhcmtTdHJpbmdzWyAnZW5lcmd5LXNrYXRlLXBhcmsnIF0udGl0bGVTdHJpbmdQcm9wZXJ0eTtcclxuXHJcbmNvbnN0IGVuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTW9kZWwgPSBuZXcgRW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNNb2RlbCgpO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IHJvb3RUYW5kZW0gPSBUYW5kZW0uUk9PVDtcclxuXHJcbnNpbUxhdW5jaGVyLmxhdW5jaCggKCkgPT4ge1xyXG4gIGNvbnN0IHNjcmVlbnMgPSBbXHJcbiAgICBuZXcgSW50cm9TY3JlZW4oIGVuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTW9kZWwsIHJvb3RUYW5kZW0uY3JlYXRlVGFuZGVtKCAnaW50cm9TY3JlZW4nICkgKSxcclxuICAgIG5ldyBNZWFzdXJlU2NyZWVuKCBlbmVyZ3lTa2F0ZVBhcmtQcmVmZXJlbmNlc01vZGVsLCByb290VGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21lYXN1cmVTY3JlZW4nICkgKSxcclxuICAgIG5ldyBHcmFwaHNTY3JlZW4oIGVuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTW9kZWwsIHJvb3RUYW5kZW0uY3JlYXRlVGFuZGVtKCAnZ3JhcGhzU2NyZWVuJyApICksXHJcbiAgICBuZXcgUGxheWdyb3VuZFNjcmVlbiggZW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNNb2RlbCwgcm9vdFRhbmRlbS5jcmVhdGVUYW5kZW0oICdwbGF5Z3JvdW5kU2NyZWVuJyApIClcclxuICBdO1xyXG5cclxuICBuZXcgRW5lcmd5U2thdGVQYXJrU2ltKCBlbmVyZ3lTa2F0ZVBhcmtUaXRsZVN0cmluZ1Byb3BlcnR5LCBzY3JlZW5zLCByb290VGFuZGVtLCB7XHJcbiAgICBwcmVmZXJlbmNlc01vZGVsOiBuZXcgUHJlZmVyZW5jZXNNb2RlbCgge1xyXG4gICAgICBzaW11bGF0aW9uT3B0aW9uczoge1xyXG4gICAgICAgIGN1c3RvbVByZWZlcmVuY2VzOiBbIHtcclxuICAgICAgICAgIGNyZWF0ZUNvbnRlbnQ6IHRhbmRlbSA9PiBuZXcgRW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNOb2RlKCBlbmVyZ3lTa2F0ZVBhcmtQcmVmZXJlbmNlc01vZGVsLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2ltUHJlZmVyZW5jZXMnICkgKVxyXG4gICAgICAgIH0gXVxyXG4gICAgICB9LFxyXG4gICAgICBsb2NhbGl6YXRpb25PcHRpb25zOiB7XHJcbiAgICAgICAgY2hhcmFjdGVyU2V0czogU2thdGVySW1hZ2VzLlNLQVRFUl9DSEFSQUNURVJfU0VUUyxcclxuICAgICAgICBzdXBwb3J0c0R5bmFtaWNMb2NhbGVzOiBmYWxzZVxyXG4gICAgICB9XHJcbiAgICB9ICksXHJcbiAgICBjcmVkaXRzOiB7XHJcbiAgICAgIGxlYWREZXNpZ246ICdOb2FoIFBvZG9sZWZza3ksIFNhbSBSZWlkLCBBbXkgUm91aW5mYXInLFxyXG4gICAgICBzb2Z0d2FyZURldmVsb3BtZW50OiAnU2FtIFJlaWQsIEplc3NlIEdyZWVuYmVyZywgTWFybGEgU2NodWx6LCBBZ3VzdMOtbiBWYWxsZWpvJyxcclxuICAgICAgdGVhbTogJ01pY2hhZWwgRHVic29uLCBCcnljZSBHcnVuZWljaCwgVHJpc2ggTG9lYmxlaW4sIERpYW5hIEzDs3BleiBUYXZhcmVzLCBFbWlseSBCLiBNb29yZSwgQXJpZWwgUGF1bCwgS2F0aHkgUGVya2lucycsXHJcbiAgICAgIGdyYXBoaWNBcnRzOiAnTWFyaWFoIEhlcm1zbWV5ZXIsIE1lZ2FuIExhaSwgQW1hbmRhIE1jR2FycnksIFNoYXJvbiBTaW1hbi1Ub3YnLFxyXG4gICAgICBxdWFsaXR5QXNzdXJhbmNlOiAnSmFzcGUgQXJpYXMsIENhdGhlcmluZSBDYXJ0ZXIsIFN0ZWVsZSBEYWx0b24sIEphcm9uIERyb2RlciwgTWVnYW4gTGFpLCBCcm9va2x5biBMYXNoLCBFbWlseSBNaWxsZXIsIE9saXZlciBPcmVqb2xhLCBBcm5hYiBQdXJrYXlhc3RoYSwgRGV2b24gUXVpc3BlLCBTYW0gUmVpZCwgTmFuY3kgU2FscGVwaSwgS2F0aHJ5biBXb2Vzc25lciwgQnJ5YW4gWW9lbGluJ1xyXG4gICAgfVxyXG4gIH0gKS5zdGFydCgpO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSwrQkFBK0I7QUFDdkQsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUM5QyxPQUFPQyxnQkFBZ0IsTUFBTSxrREFBa0Q7QUFDL0UsT0FBT0Msa0JBQWtCLE1BQU0sZ0NBQWdDO0FBQy9ELE9BQU9DLCtCQUErQixNQUFNLG1EQUFtRDtBQUMvRixPQUFPQyw4QkFBOEIsTUFBTSxpREFBaUQ7QUFDNUYsT0FBT0MsWUFBWSxNQUFNLCtCQUErQjtBQUN4RCxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFDaEUsT0FBT0MsWUFBWSxNQUFNLDBCQUEwQjtBQUNuRCxPQUFPQyxXQUFXLE1BQU0sd0JBQXdCO0FBQ2hELE9BQU9DLGFBQWEsTUFBTSw0QkFBNEI7QUFDdEQsT0FBT0MsZ0JBQWdCLE1BQU0sa0NBQWtDO0FBRS9ELE1BQU1DLGtDQUFrQyxHQUFHTCxzQkFBc0IsQ0FBRSxtQkFBbUIsQ0FBRSxDQUFDTSxtQkFBbUI7QUFFNUcsTUFBTUMsK0JBQStCLEdBQUcsSUFBSVYsK0JBQStCLENBQUMsQ0FBQzs7QUFFN0U7QUFDQSxNQUFNVyxVQUFVLEdBQUdkLE1BQU0sQ0FBQ2UsSUFBSTtBQUU5QmhCLFdBQVcsQ0FBQ2lCLE1BQU0sQ0FBRSxNQUFNO0VBQ3hCLE1BQU1DLE9BQU8sR0FBRyxDQUNkLElBQUlULFdBQVcsQ0FBRUssK0JBQStCLEVBQUVDLFVBQVUsQ0FBQ0ksWUFBWSxDQUFFLGFBQWMsQ0FBRSxDQUFDLEVBQzVGLElBQUlULGFBQWEsQ0FBRUksK0JBQStCLEVBQUVDLFVBQVUsQ0FBQ0ksWUFBWSxDQUFFLGVBQWdCLENBQUUsQ0FBQyxFQUNoRyxJQUFJWCxZQUFZLENBQUVNLCtCQUErQixFQUFFQyxVQUFVLENBQUNJLFlBQVksQ0FBRSxjQUFlLENBQUUsQ0FBQyxFQUM5RixJQUFJUixnQkFBZ0IsQ0FBRUcsK0JBQStCLEVBQUVDLFVBQVUsQ0FBQ0ksWUFBWSxDQUFFLGtCQUFtQixDQUFFLENBQUMsQ0FDdkc7RUFFRCxJQUFJaEIsa0JBQWtCLENBQUVTLGtDQUFrQyxFQUFFTSxPQUFPLEVBQUVILFVBQVUsRUFBRTtJQUMvRUssZ0JBQWdCLEVBQUUsSUFBSWxCLGdCQUFnQixDQUFFO01BQ3RDbUIsaUJBQWlCLEVBQUU7UUFDakJDLGlCQUFpQixFQUFFLENBQUU7VUFDbkJDLGFBQWEsRUFBRUMsTUFBTSxJQUFJLElBQUluQiw4QkFBOEIsQ0FBRVMsK0JBQStCLEVBQUVVLE1BQU0sQ0FBQ0wsWUFBWSxDQUFFLGdCQUFpQixDQUFFO1FBQ3hJLENBQUM7TUFDSCxDQUFDO01BQ0RNLG1CQUFtQixFQUFFO1FBQ25CQyxhQUFhLEVBQUVwQixZQUFZLENBQUNxQixxQkFBcUI7UUFDakRDLHNCQUFzQixFQUFFO01BQzFCO0lBQ0YsQ0FBRSxDQUFDO0lBQ0hDLE9BQU8sRUFBRTtNQUNQQyxVQUFVLEVBQUUseUNBQXlDO01BQ3JEQyxtQkFBbUIsRUFBRSwwREFBMEQ7TUFDL0VDLElBQUksRUFBRSxnSEFBZ0g7TUFDdEhDLFdBQVcsRUFBRSxnRUFBZ0U7TUFDN0VDLGdCQUFnQixFQUFFO0lBQ3BCO0VBQ0YsQ0FBRSxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO0FBQ2IsQ0FBRSxDQUFDIn0=