// Copyright 2020-2021, University of Colorado Boulder

/**
 * Toolbox for tracks in the Playground screen of Energy Skate Park. User can drag short tracks with three control
 * points into the play area to create custom tracks.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import { DragListener } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import energySkatePark from '../../energySkatePark.js';
import EnergySkateParkConstants from '../EnergySkateParkConstants.js';
import TrackNode from './TrackNode.js';
class TrackToolboxPanel extends Panel {
  /**
   * @param {EnergySkateParkPlaygroundModel} model
   * @param {EnergySkateParkPlaygroundScreenView} view
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(model, view, tandem, options) {
    options = merge({}, EnergySkateParkConstants.PANEL_OPTIONS, options);
    const iconTrack = model.createDraggableTrack({
      trackOptions: {
        draggable: false,
        splittable: false
      },
      controlPointOptions: {
        interactive: false
      }
    });
    const iconNode = new TrackNode(iconTrack, view.modelViewTransform, model.availableModelBoundsProperty, tandem.createTandem('iconNode'), {
      // want the icon to look pickable, even though it isn't really draggable (forwarding listener makes the new
      // TrackNode draggable)
      roadCursorOverride: 'cursor'
    });
    iconNode.addInputListener(DragListener.createForwardingListener(event => {
      const track = model.createDraggableTrack();
      model.tracks.add(track);

      // all in ScreenView coordinates
      const viewPoint = view.globalToLocalPoint(event.pointer.point);
      const iconViewCenter = view.globalToLocalPoint(iconNode.parentToGlobalPoint(iconNode.center));
      const offset = viewPoint.minus(iconViewCenter);
      const viewPointWithOffset = viewPoint.minus(offset);

      // initial model position
      track.position = view.modelViewTransform.viewToModelPosition(viewPointWithOffset);

      // signify that dragging has begun so that we can start the drag on the Node's drag listener
      track.forwardingDragStartEmitter.emit(event);
    }));
    const updateIconVisibility = () => {
      iconNode.visible = model.getNumberOfControlPoints() <= EnergySkateParkConstants.MAX_NUMBER_CONTROL_POINTS - 3;
    };
    model.tracks.addItemAddedListener(updateIconVisibility);
    model.tracks.addItemRemovedListener(updateIconVisibility);
    super(iconNode, options);
  }
}
energySkatePark.register('TrackToolboxPanel', TrackToolboxPanel);
export default TrackToolboxPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkRyYWdMaXN0ZW5lciIsIlBhbmVsIiwiZW5lcmd5U2thdGVQYXJrIiwiRW5lcmd5U2thdGVQYXJrQ29uc3RhbnRzIiwiVHJhY2tOb2RlIiwiVHJhY2tUb29sYm94UGFuZWwiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidmlldyIsInRhbmRlbSIsIm9wdGlvbnMiLCJQQU5FTF9PUFRJT05TIiwiaWNvblRyYWNrIiwiY3JlYXRlRHJhZ2dhYmxlVHJhY2siLCJ0cmFja09wdGlvbnMiLCJkcmFnZ2FibGUiLCJzcGxpdHRhYmxlIiwiY29udHJvbFBvaW50T3B0aW9ucyIsImludGVyYWN0aXZlIiwiaWNvbk5vZGUiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJhdmFpbGFibGVNb2RlbEJvdW5kc1Byb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwicm9hZEN1cnNvck92ZXJyaWRlIiwiYWRkSW5wdXRMaXN0ZW5lciIsImNyZWF0ZUZvcndhcmRpbmdMaXN0ZW5lciIsImV2ZW50IiwidHJhY2siLCJ0cmFja3MiLCJhZGQiLCJ2aWV3UG9pbnQiLCJnbG9iYWxUb0xvY2FsUG9pbnQiLCJwb2ludGVyIiwicG9pbnQiLCJpY29uVmlld0NlbnRlciIsInBhcmVudFRvR2xvYmFsUG9pbnQiLCJjZW50ZXIiLCJvZmZzZXQiLCJtaW51cyIsInZpZXdQb2ludFdpdGhPZmZzZXQiLCJwb3NpdGlvbiIsInZpZXdUb01vZGVsUG9zaXRpb24iLCJmb3J3YXJkaW5nRHJhZ1N0YXJ0RW1pdHRlciIsImVtaXQiLCJ1cGRhdGVJY29uVmlzaWJpbGl0eSIsInZpc2libGUiLCJnZXROdW1iZXJPZkNvbnRyb2xQb2ludHMiLCJNQVhfTlVNQkVSX0NPTlRST0xfUE9JTlRTIiwiYWRkSXRlbUFkZGVkTGlzdGVuZXIiLCJhZGRJdGVtUmVtb3ZlZExpc3RlbmVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUcmFja1Rvb2xib3hQYW5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUb29sYm94IGZvciB0cmFja3MgaW4gdGhlIFBsYXlncm91bmQgc2NyZWVuIG9mIEVuZXJneSBTa2F0ZSBQYXJrLiBVc2VyIGNhbiBkcmFnIHNob3J0IHRyYWNrcyB3aXRoIHRocmVlIGNvbnRyb2xcclxuICogcG9pbnRzIGludG8gdGhlIHBsYXkgYXJlYSB0byBjcmVhdGUgY3VzdG9tIHRyYWNrcy5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgZW5lcmd5U2thdGVQYXJrIGZyb20gJy4uLy4uL2VuZXJneVNrYXRlUGFyay5qcyc7XHJcbmltcG9ydCBFbmVyZ3lTa2F0ZVBhcmtDb25zdGFudHMgZnJvbSAnLi4vRW5lcmd5U2thdGVQYXJrQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFRyYWNrTm9kZSBmcm9tICcuL1RyYWNrTm9kZS5qcyc7XHJcblxyXG5jbGFzcyBUcmFja1Rvb2xib3hQYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFbmVyZ3lTa2F0ZVBhcmtQbGF5Z3JvdW5kTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtFbmVyZ3lTa2F0ZVBhcmtQbGF5Z3JvdW5kU2NyZWVuVmlld30gdmlld1xyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCB2aWV3LCB0YW5kZW0sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7fSwgRW5lcmd5U2thdGVQYXJrQ29uc3RhbnRzLlBBTkVMX09QVElPTlMsIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBpY29uVHJhY2sgPSBtb2RlbC5jcmVhdGVEcmFnZ2FibGVUcmFjaygge1xyXG4gICAgICB0cmFja09wdGlvbnM6IHtcclxuICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxyXG4gICAgICAgIHNwbGl0dGFibGU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbnRyb2xQb2ludE9wdGlvbnM6IHtcclxuICAgICAgICBpbnRlcmFjdGl2ZTogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgaWNvbk5vZGUgPSBuZXcgVHJhY2tOb2RlKCBpY29uVHJhY2ssIHZpZXcubW9kZWxWaWV3VHJhbnNmb3JtLCBtb2RlbC5hdmFpbGFibGVNb2RlbEJvdW5kc1Byb3BlcnR5LCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaWNvbk5vZGUnICksIHtcclxuXHJcbiAgICAgIC8vIHdhbnQgdGhlIGljb24gdG8gbG9vayBwaWNrYWJsZSwgZXZlbiB0aG91Z2ggaXQgaXNuJ3QgcmVhbGx5IGRyYWdnYWJsZSAoZm9yd2FyZGluZyBsaXN0ZW5lciBtYWtlcyB0aGUgbmV3XHJcbiAgICAgIC8vIFRyYWNrTm9kZSBkcmFnZ2FibGUpXHJcbiAgICAgIHJvYWRDdXJzb3JPdmVycmlkZTogJ2N1cnNvcidcclxuICAgIH0gKTtcclxuXHJcbiAgICBpY29uTm9kZS5hZGRJbnB1dExpc3RlbmVyKCBEcmFnTGlzdGVuZXIuY3JlYXRlRm9yd2FyZGluZ0xpc3RlbmVyKCBldmVudCA9PiB7XHJcblxyXG4gICAgICBjb25zdCB0cmFjayA9IG1vZGVsLmNyZWF0ZURyYWdnYWJsZVRyYWNrKCk7XHJcbiAgICAgIG1vZGVsLnRyYWNrcy5hZGQoIHRyYWNrICk7XHJcblxyXG4gICAgICAvLyBhbGwgaW4gU2NyZWVuVmlldyBjb29yZGluYXRlc1xyXG4gICAgICBjb25zdCB2aWV3UG9pbnQgPSB2aWV3Lmdsb2JhbFRvTG9jYWxQb2ludCggZXZlbnQucG9pbnRlci5wb2ludCApO1xyXG4gICAgICBjb25zdCBpY29uVmlld0NlbnRlciA9IHZpZXcuZ2xvYmFsVG9Mb2NhbFBvaW50KCBpY29uTm9kZS5wYXJlbnRUb0dsb2JhbFBvaW50KCBpY29uTm9kZS5jZW50ZXIgKSApO1xyXG4gICAgICBjb25zdCBvZmZzZXQgPSB2aWV3UG9pbnQubWludXMoIGljb25WaWV3Q2VudGVyICk7XHJcbiAgICAgIGNvbnN0IHZpZXdQb2ludFdpdGhPZmZzZXQgPSB2aWV3UG9pbnQubWludXMoIG9mZnNldCApO1xyXG5cclxuICAgICAgLy8gaW5pdGlhbCBtb2RlbCBwb3NpdGlvblxyXG4gICAgICB0cmFjay5wb3NpdGlvbiA9IHZpZXcubW9kZWxWaWV3VHJhbnNmb3JtLnZpZXdUb01vZGVsUG9zaXRpb24oIHZpZXdQb2ludFdpdGhPZmZzZXQgKTtcclxuXHJcbiAgICAgIC8vIHNpZ25pZnkgdGhhdCBkcmFnZ2luZyBoYXMgYmVndW4gc28gdGhhdCB3ZSBjYW4gc3RhcnQgdGhlIGRyYWcgb24gdGhlIE5vZGUncyBkcmFnIGxpc3RlbmVyXHJcbiAgICAgIHRyYWNrLmZvcndhcmRpbmdEcmFnU3RhcnRFbWl0dGVyLmVtaXQoIGV2ZW50ICk7XHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICBjb25zdCB1cGRhdGVJY29uVmlzaWJpbGl0eSA9ICgpID0+IHtcclxuICAgICAgaWNvbk5vZGUudmlzaWJsZSA9IG1vZGVsLmdldE51bWJlck9mQ29udHJvbFBvaW50cygpIDw9IEVuZXJneVNrYXRlUGFya0NvbnN0YW50cy5NQVhfTlVNQkVSX0NPTlRST0xfUE9JTlRTIC0gMztcclxuICAgIH07XHJcbiAgICBtb2RlbC50cmFja3MuYWRkSXRlbUFkZGVkTGlzdGVuZXIoIHVwZGF0ZUljb25WaXNpYmlsaXR5ICk7XHJcbiAgICBtb2RlbC50cmFja3MuYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciggdXBkYXRlSWNvblZpc2liaWxpdHkgKTtcclxuXHJcbiAgICBzdXBlciggaWNvbk5vZGUsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneVNrYXRlUGFyay5yZWdpc3RlciggJ1RyYWNrVG9vbGJveFBhbmVsJywgVHJhY2tUb29sYm94UGFuZWwgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRyYWNrVG9vbGJveFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsWUFBWSxRQUFRLG1DQUFtQztBQUNoRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFFdEMsTUFBTUMsaUJBQWlCLFNBQVNKLEtBQUssQ0FBQztFQUVwQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0lBRTFDQSxPQUFPLEdBQUdYLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRUksd0JBQXdCLENBQUNRLGFBQWEsRUFBRUQsT0FBUSxDQUFDO0lBRXRFLE1BQU1FLFNBQVMsR0FBR0wsS0FBSyxDQUFDTSxvQkFBb0IsQ0FBRTtNQUM1Q0MsWUFBWSxFQUFFO1FBQ1pDLFNBQVMsRUFBRSxLQUFLO1FBQ2hCQyxVQUFVLEVBQUU7TUFDZCxDQUFDO01BQ0RDLG1CQUFtQixFQUFFO1FBQ25CQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUUsQ0FBQztJQUNILE1BQU1DLFFBQVEsR0FBRyxJQUFJZixTQUFTLENBQUVRLFNBQVMsRUFBRUosSUFBSSxDQUFDWSxrQkFBa0IsRUFBRWIsS0FBSyxDQUFDYyw0QkFBNEIsRUFBRVosTUFBTSxDQUFDYSxZQUFZLENBQUUsVUFBVyxDQUFDLEVBQUU7TUFFekk7TUFDQTtNQUNBQyxrQkFBa0IsRUFBRTtJQUN0QixDQUFFLENBQUM7SUFFSEosUUFBUSxDQUFDSyxnQkFBZ0IsQ0FBRXhCLFlBQVksQ0FBQ3lCLHdCQUF3QixDQUFFQyxLQUFLLElBQUk7TUFFekUsTUFBTUMsS0FBSyxHQUFHcEIsS0FBSyxDQUFDTSxvQkFBb0IsQ0FBQyxDQUFDO01BQzFDTixLQUFLLENBQUNxQixNQUFNLENBQUNDLEdBQUcsQ0FBRUYsS0FBTSxDQUFDOztNQUV6QjtNQUNBLE1BQU1HLFNBQVMsR0FBR3RCLElBQUksQ0FBQ3VCLGtCQUFrQixDQUFFTCxLQUFLLENBQUNNLE9BQU8sQ0FBQ0MsS0FBTSxDQUFDO01BQ2hFLE1BQU1DLGNBQWMsR0FBRzFCLElBQUksQ0FBQ3VCLGtCQUFrQixDQUFFWixRQUFRLENBQUNnQixtQkFBbUIsQ0FBRWhCLFFBQVEsQ0FBQ2lCLE1BQU8sQ0FBRSxDQUFDO01BQ2pHLE1BQU1DLE1BQU0sR0FBR1AsU0FBUyxDQUFDUSxLQUFLLENBQUVKLGNBQWUsQ0FBQztNQUNoRCxNQUFNSyxtQkFBbUIsR0FBR1QsU0FBUyxDQUFDUSxLQUFLLENBQUVELE1BQU8sQ0FBQzs7TUFFckQ7TUFDQVYsS0FBSyxDQUFDYSxRQUFRLEdBQUdoQyxJQUFJLENBQUNZLGtCQUFrQixDQUFDcUIsbUJBQW1CLENBQUVGLG1CQUFvQixDQUFDOztNQUVuRjtNQUNBWixLQUFLLENBQUNlLDBCQUEwQixDQUFDQyxJQUFJLENBQUVqQixLQUFNLENBQUM7SUFDaEQsQ0FBRSxDQUFFLENBQUM7SUFFTCxNQUFNa0Isb0JBQW9CLEdBQUdBLENBQUEsS0FBTTtNQUNqQ3pCLFFBQVEsQ0FBQzBCLE9BQU8sR0FBR3RDLEtBQUssQ0FBQ3VDLHdCQUF3QixDQUFDLENBQUMsSUFBSTNDLHdCQUF3QixDQUFDNEMseUJBQXlCLEdBQUcsQ0FBQztJQUMvRyxDQUFDO0lBQ0R4QyxLQUFLLENBQUNxQixNQUFNLENBQUNvQixvQkFBb0IsQ0FBRUosb0JBQXFCLENBQUM7SUFDekRyQyxLQUFLLENBQUNxQixNQUFNLENBQUNxQixzQkFBc0IsQ0FBRUwsb0JBQXFCLENBQUM7SUFFM0QsS0FBSyxDQUFFekIsUUFBUSxFQUFFVCxPQUFRLENBQUM7RUFDNUI7QUFDRjtBQUVBUixlQUFlLENBQUNnRCxRQUFRLENBQUUsbUJBQW1CLEVBQUU3QyxpQkFBa0IsQ0FBQztBQUVsRSxlQUFlQSxpQkFBaUIifQ==