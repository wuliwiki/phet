// Copyright 2019-2021, University of Colorado Boulder

/**
 * View where you can play with premade tracks which may be configurable, but are not draggable,
 * splittable, or attachable. Premade tracks can be chosen from a set of scenes.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import energySkatePark from '../../energySkatePark.js';
import EnergySkateParkSaveSampleScreenView from './EnergySkateParkSaveSampleScreenView.js';
class EnergySkateParkTrackSetScreenView extends EnergySkateParkSaveSampleScreenView {
  /**
   * @param {EnergySkateParkTrackSetModel} model
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(model, tandem, options) {
    super(model, tandem, options);
    const trackNodes = model.tracks.map(track => {
      return this.trackNodeGroup.createNextElement(track, this.modelViewTransform, this.availableModelBoundsProperty);
    });
    trackNodes.forEach(trackNode => {
      this.trackLayer.addChild(trackNode);
    });
    model.sceneProperty.link(scene => {
      _.forEach(model.tracks, (track, i) => {
        trackNodes[i].visible = scene === i;
      });

      // interrupt the DragHandler when scene Property changes since Skater needs to reset to initial position when
      // track changes, see https://github.com/phetsims/energy-skate-park-basics/issues/179
      this.skaterNode.interruptDrag();
    });
  }
}
energySkatePark.register('EnergySkateParkTrackSetScreenView', EnergySkateParkTrackSetScreenView);
export default EnergySkateParkTrackSetScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlbmVyZ3lTa2F0ZVBhcmsiLCJFbmVyZ3lTa2F0ZVBhcmtTYXZlU2FtcGxlU2NyZWVuVmlldyIsIkVuZXJneVNrYXRlUGFya1RyYWNrU2V0U2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJvcHRpb25zIiwidHJhY2tOb2RlcyIsInRyYWNrcyIsIm1hcCIsInRyYWNrIiwidHJhY2tOb2RlR3JvdXAiLCJjcmVhdGVOZXh0RWxlbWVudCIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImF2YWlsYWJsZU1vZGVsQm91bmRzUHJvcGVydHkiLCJmb3JFYWNoIiwidHJhY2tOb2RlIiwidHJhY2tMYXllciIsImFkZENoaWxkIiwic2NlbmVQcm9wZXJ0eSIsImxpbmsiLCJzY2VuZSIsIl8iLCJpIiwidmlzaWJsZSIsInNrYXRlck5vZGUiLCJpbnRlcnJ1cHREcmFnIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbmVyZ3lTa2F0ZVBhcmtUcmFja1NldFNjcmVlblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyB3aGVyZSB5b3UgY2FuIHBsYXkgd2l0aCBwcmVtYWRlIHRyYWNrcyB3aGljaCBtYXkgYmUgY29uZmlndXJhYmxlLCBidXQgYXJlIG5vdCBkcmFnZ2FibGUsXHJcbiAqIHNwbGl0dGFibGUsIG9yIGF0dGFjaGFibGUuIFByZW1hZGUgdHJhY2tzIGNhbiBiZSBjaG9zZW4gZnJvbSBhIHNldCBvZiBzY2VuZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBlbmVyZ3lTa2F0ZVBhcmsgZnJvbSAnLi4vLi4vZW5lcmd5U2thdGVQYXJrLmpzJztcclxuaW1wb3J0IEVuZXJneVNrYXRlUGFya1NhdmVTYW1wbGVTY3JlZW5WaWV3IGZyb20gJy4vRW5lcmd5U2thdGVQYXJrU2F2ZVNhbXBsZVNjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgRW5lcmd5U2thdGVQYXJrVHJhY2tTZXRTY3JlZW5WaWV3IGV4dGVuZHMgRW5lcmd5U2thdGVQYXJrU2F2ZVNhbXBsZVNjcmVlblZpZXcge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0VuZXJneVNrYXRlUGFya1RyYWNrU2V0TW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIHRhbmRlbSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCBtb2RlbCwgdGFuZGVtLCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgdHJhY2tOb2RlcyA9IG1vZGVsLnRyYWNrcy5tYXAoIHRyYWNrID0+IHtcclxuICAgICAgcmV0dXJuIHRoaXMudHJhY2tOb2RlR3JvdXAuY3JlYXRlTmV4dEVsZW1lbnQoIHRyYWNrLCB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSwgdGhpcy5hdmFpbGFibGVNb2RlbEJvdW5kc1Byb3BlcnR5ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdHJhY2tOb2Rlcy5mb3JFYWNoKCB0cmFja05vZGUgPT4ge1xyXG4gICAgICB0aGlzLnRyYWNrTGF5ZXIuYWRkQ2hpbGQoIHRyYWNrTm9kZSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIG1vZGVsLnNjZW5lUHJvcGVydHkubGluayggc2NlbmUgPT4ge1xyXG4gICAgICBfLmZvckVhY2goIG1vZGVsLnRyYWNrcywgKCB0cmFjaywgaSApID0+IHtcclxuICAgICAgICB0cmFja05vZGVzWyBpIF0udmlzaWJsZSA9IHNjZW5lID09PSBpO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICAvLyBpbnRlcnJ1cHQgdGhlIERyYWdIYW5kbGVyIHdoZW4gc2NlbmUgUHJvcGVydHkgY2hhbmdlcyBzaW5jZSBTa2F0ZXIgbmVlZHMgdG8gcmVzZXQgdG8gaW5pdGlhbCBwb3NpdGlvbiB3aGVuXHJcbiAgICAgIC8vIHRyYWNrIGNoYW5nZXMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZW5lcmd5LXNrYXRlLXBhcmstYmFzaWNzL2lzc3Vlcy8xNzlcclxuICAgICAgdGhpcy5za2F0ZXJOb2RlLmludGVycnVwdERyYWcoKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneVNrYXRlUGFyay5yZWdpc3RlciggJ0VuZXJneVNrYXRlUGFya1RyYWNrU2V0U2NyZWVuVmlldycsIEVuZXJneVNrYXRlUGFya1RyYWNrU2V0U2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBFbmVyZ3lTa2F0ZVBhcmtUcmFja1NldFNjcmVlblZpZXc7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxtQ0FBbUMsTUFBTSwwQ0FBMEM7QUFFMUYsTUFBTUMsaUNBQWlDLFNBQVNELG1DQUFtQyxDQUFDO0VBRWxGO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRztJQUNwQyxLQUFLLENBQUVGLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFRLENBQUM7SUFFL0IsTUFBTUMsVUFBVSxHQUFHSCxLQUFLLENBQUNJLE1BQU0sQ0FBQ0MsR0FBRyxDQUFFQyxLQUFLLElBQUk7TUFDNUMsT0FBTyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0MsaUJBQWlCLENBQUVGLEtBQUssRUFBRSxJQUFJLENBQUNHLGtCQUFrQixFQUFFLElBQUksQ0FBQ0MsNEJBQTZCLENBQUM7SUFDbkgsQ0FBRSxDQUFDO0lBRUhQLFVBQVUsQ0FBQ1EsT0FBTyxDQUFFQyxTQUFTLElBQUk7TUFDL0IsSUFBSSxDQUFDQyxVQUFVLENBQUNDLFFBQVEsQ0FBRUYsU0FBVSxDQUFDO0lBQ3ZDLENBQUUsQ0FBQztJQUVIWixLQUFLLENBQUNlLGFBQWEsQ0FBQ0MsSUFBSSxDQUFFQyxLQUFLLElBQUk7TUFDakNDLENBQUMsQ0FBQ1AsT0FBTyxDQUFFWCxLQUFLLENBQUNJLE1BQU0sRUFBRSxDQUFFRSxLQUFLLEVBQUVhLENBQUMsS0FBTTtRQUN2Q2hCLFVBQVUsQ0FBRWdCLENBQUMsQ0FBRSxDQUFDQyxPQUFPLEdBQUdILEtBQUssS0FBS0UsQ0FBQztNQUN2QyxDQUFFLENBQUM7O01BRUg7TUFDQTtNQUNBLElBQUksQ0FBQ0UsVUFBVSxDQUFDQyxhQUFhLENBQUMsQ0FBQztJQUNqQyxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUExQixlQUFlLENBQUMyQixRQUFRLENBQUUsbUNBQW1DLEVBQUV6QixpQ0FBa0MsQ0FBQztBQUNsRyxlQUFlQSxpQ0FBaUMifQ==