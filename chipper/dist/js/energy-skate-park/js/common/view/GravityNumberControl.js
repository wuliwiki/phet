// Copyright 2019-2022, University of Colorado Boulder

/**
 * A NumberControl that controls the gravity Property of energy skate park.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Range from '../../../../dot/js/Range.js';
import Utils from '../../../../dot/js/Utils.js';
import merge from '../../../../phet-core/js/merge.js';
import energySkatePark from '../../energySkatePark.js';
import EnergySkateParkStrings from '../../EnergySkateParkStrings.js';
import EnergySkateParkConstants from '../EnergySkateParkConstants.js';
import PhysicalNumberControl from './PhysicalNumberControl.js';
const controlsGravityLabelString = EnergySkateParkStrings.physicalControls.gravityControls.gravityStringProperty;
const gravityMetersPerSecondSquaredPatternString = EnergySkateParkStrings.physicalControls.gravityControls.gravityMetersPerSecondSquaredPatternStringProperty;
class GravityNumberControl extends PhysicalNumberControl {
  /**
   * @param {NumberProperty} property
   * @param {BooleanProperty} userControlledProperty
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(property, userControlledProperty, tandem, options) {
    options = merge({
      decimalPlaces: 1,
      numberDisplayOptions: {
        valuePattern: gravityMetersPerSecondSquaredPatternString,
        useRichText: true // for the superscript on units
      },

      delta: 0.1,
      sliderOptions: {
        constrainValue: value => Utils.roundToInterval(value, 1)
      }
    }, options);
    super(controlsGravityLabelString, property, new Range(Math.abs(EnergySkateParkConstants.MIN_GRAVITY), Math.abs(EnergySkateParkConstants.MAX_GRAVITY)), userControlledProperty, tandem, options);
  }
}
energySkatePark.register('GravityNumberControl', GravityNumberControl);
export default GravityNumberControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlV0aWxzIiwibWVyZ2UiLCJlbmVyZ3lTa2F0ZVBhcmsiLCJFbmVyZ3lTa2F0ZVBhcmtTdHJpbmdzIiwiRW5lcmd5U2thdGVQYXJrQ29uc3RhbnRzIiwiUGh5c2ljYWxOdW1iZXJDb250cm9sIiwiY29udHJvbHNHcmF2aXR5TGFiZWxTdHJpbmciLCJwaHlzaWNhbENvbnRyb2xzIiwiZ3Jhdml0eUNvbnRyb2xzIiwiZ3Jhdml0eVN0cmluZ1Byb3BlcnR5IiwiZ3Jhdml0eU1ldGVyc1BlclNlY29uZFNxdWFyZWRQYXR0ZXJuU3RyaW5nIiwiZ3Jhdml0eU1ldGVyc1BlclNlY29uZFNxdWFyZWRQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJHcmF2aXR5TnVtYmVyQ29udHJvbCIsImNvbnN0cnVjdG9yIiwicHJvcGVydHkiLCJ1c2VyQ29udHJvbGxlZFByb3BlcnR5IiwidGFuZGVtIiwib3B0aW9ucyIsImRlY2ltYWxQbGFjZXMiLCJudW1iZXJEaXNwbGF5T3B0aW9ucyIsInZhbHVlUGF0dGVybiIsInVzZVJpY2hUZXh0IiwiZGVsdGEiLCJzbGlkZXJPcHRpb25zIiwiY29uc3RyYWluVmFsdWUiLCJ2YWx1ZSIsInJvdW5kVG9JbnRlcnZhbCIsIk1hdGgiLCJhYnMiLCJNSU5fR1JBVklUWSIsIk1BWF9HUkFWSVRZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHcmF2aXR5TnVtYmVyQ29udHJvbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIE51bWJlckNvbnRyb2wgdGhhdCBjb250cm9scyB0aGUgZ3Jhdml0eSBQcm9wZXJ0eSBvZiBlbmVyZ3kgc2thdGUgcGFyay5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGVuZXJneVNrYXRlUGFyayBmcm9tICcuLi8uLi9lbmVyZ3lTa2F0ZVBhcmsuanMnO1xyXG5pbXBvcnQgRW5lcmd5U2thdGVQYXJrU3RyaW5ncyBmcm9tICcuLi8uLi9FbmVyZ3lTa2F0ZVBhcmtTdHJpbmdzLmpzJztcclxuaW1wb3J0IEVuZXJneVNrYXRlUGFya0NvbnN0YW50cyBmcm9tICcuLi9FbmVyZ3lTa2F0ZVBhcmtDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUGh5c2ljYWxOdW1iZXJDb250cm9sIGZyb20gJy4vUGh5c2ljYWxOdW1iZXJDb250cm9sLmpzJztcclxuXHJcbmNvbnN0IGNvbnRyb2xzR3Jhdml0eUxhYmVsU3RyaW5nID0gRW5lcmd5U2thdGVQYXJrU3RyaW5ncy5waHlzaWNhbENvbnRyb2xzLmdyYXZpdHlDb250cm9scy5ncmF2aXR5U3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGdyYXZpdHlNZXRlcnNQZXJTZWNvbmRTcXVhcmVkUGF0dGVyblN0cmluZyA9IEVuZXJneVNrYXRlUGFya1N0cmluZ3MucGh5c2ljYWxDb250cm9scy5ncmF2aXR5Q29udHJvbHMuZ3Jhdml0eU1ldGVyc1BlclNlY29uZFNxdWFyZWRQYXR0ZXJuU3RyaW5nUHJvcGVydHk7XHJcblxyXG5jbGFzcyBHcmF2aXR5TnVtYmVyQ29udHJvbCBleHRlbmRzIFBoeXNpY2FsTnVtYmVyQ29udHJvbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyUHJvcGVydHl9IHByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IHVzZXJDb250cm9sbGVkUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eSwgdXNlckNvbnRyb2xsZWRQcm9wZXJ0eSwgdGFuZGVtLCBvcHRpb25zICkge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIGRlY2ltYWxQbGFjZXM6IDEsXHJcbiAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgdmFsdWVQYXR0ZXJuOiBncmF2aXR5TWV0ZXJzUGVyU2Vjb25kU3F1YXJlZFBhdHRlcm5TdHJpbmcsXHJcbiAgICAgICAgdXNlUmljaFRleHQ6IHRydWUgLy8gZm9yIHRoZSBzdXBlcnNjcmlwdCBvbiB1bml0c1xyXG4gICAgICB9LFxyXG4gICAgICBkZWx0YTogMC4xLFxyXG4gICAgICBzbGlkZXJPcHRpb25zOiB7XHJcbiAgICAgICAgY29uc3RyYWluVmFsdWU6IHZhbHVlID0+IFV0aWxzLnJvdW5kVG9JbnRlcnZhbCggdmFsdWUsIDEgKVxyXG4gICAgICB9XHJcbiAgICB9LCBvcHRpb25zICk7XHJcbiAgICBzdXBlciggY29udHJvbHNHcmF2aXR5TGFiZWxTdHJpbmcsIHByb3BlcnR5LCBuZXcgUmFuZ2UoIE1hdGguYWJzKCBFbmVyZ3lTa2F0ZVBhcmtDb25zdGFudHMuTUlOX0dSQVZJVFkgKSwgTWF0aC5hYnMoIEVuZXJneVNrYXRlUGFya0NvbnN0YW50cy5NQVhfR1JBVklUWSApICksIHVzZXJDb250cm9sbGVkUHJvcGVydHksIHRhbmRlbSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZW5lcmd5U2thdGVQYXJrLnJlZ2lzdGVyKCAnR3Jhdml0eU51bWJlckNvbnRyb2wnLCBHcmF2aXR5TnVtYmVyQ29udHJvbCApO1xyXG5leHBvcnQgZGVmYXVsdCBHcmF2aXR5TnVtYmVyQ29udHJvbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFDcEUsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLHFCQUFxQixNQUFNLDRCQUE0QjtBQUU5RCxNQUFNQywwQkFBMEIsR0FBR0gsc0JBQXNCLENBQUNJLGdCQUFnQixDQUFDQyxlQUFlLENBQUNDLHFCQUFxQjtBQUNoSCxNQUFNQywwQ0FBMEMsR0FBR1Asc0JBQXNCLENBQUNJLGdCQUFnQixDQUFDQyxlQUFlLENBQUNHLGtEQUFrRDtBQUU3SixNQUFNQyxvQkFBb0IsU0FBU1AscUJBQXFCLENBQUM7RUFFdkQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLFFBQVEsRUFBRUMsc0JBQXNCLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0lBQy9EQSxPQUFPLEdBQUdoQixLQUFLLENBQUU7TUFDZmlCLGFBQWEsRUFBRSxDQUFDO01BQ2hCQyxvQkFBb0IsRUFBRTtRQUNwQkMsWUFBWSxFQUFFViwwQ0FBMEM7UUFDeERXLFdBQVcsRUFBRSxJQUFJLENBQUM7TUFDcEIsQ0FBQzs7TUFDREMsS0FBSyxFQUFFLEdBQUc7TUFDVkMsYUFBYSxFQUFFO1FBQ2JDLGNBQWMsRUFBRUMsS0FBSyxJQUFJekIsS0FBSyxDQUFDMEIsZUFBZSxDQUFFRCxLQUFLLEVBQUUsQ0FBRTtNQUMzRDtJQUNGLENBQUMsRUFBRVIsT0FBUSxDQUFDO0lBQ1osS0FBSyxDQUFFWCwwQkFBMEIsRUFBRVEsUUFBUSxFQUFFLElBQUlmLEtBQUssQ0FBRTRCLElBQUksQ0FBQ0MsR0FBRyxDQUFFeEIsd0JBQXdCLENBQUN5QixXQUFZLENBQUMsRUFBRUYsSUFBSSxDQUFDQyxHQUFHLENBQUV4Qix3QkFBd0IsQ0FBQzBCLFdBQVksQ0FBRSxDQUFDLEVBQUVmLHNCQUFzQixFQUFFQyxNQUFNLEVBQUVDLE9BQVEsQ0FBQztFQUN6TTtBQUNGO0FBRUFmLGVBQWUsQ0FBQzZCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRW5CLG9CQUFxQixDQUFDO0FBQ3hFLGVBQWVBLG9CQUFvQiJ9