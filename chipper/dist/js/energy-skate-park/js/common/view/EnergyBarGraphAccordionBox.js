// Copyright 2019-2020, University of Colorado Boulder

/**
 * An AccordionBox that contains the energy bar graph used in this sim.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import energySkatePark from '../../energySkatePark.js';
import EnergySkateParkConstants from '../EnergySkateParkConstants.js';
import EnergyBarGraph from './EnergyBarGraph.js';
class EnergyBarGraphAccordionBox extends AccordionBox {
  /**
   * @param {Skater} skater
   * @param {NumberProperty} barGraphScaleProperty - controls scale of bar graphs
   * @param {BooleanProperty} barGraphVisibleProperty - controls visibility of bar graphs
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(skater, barGraphScaleProperty, barGraphVisibleProperty, tandem, options) {
    const defaultMargin = 5;
    options = merge({
      titleNode: EnergyBarGraph.createLabel(),
      contentXMargin: defaultMargin,
      contentYMargin: defaultMargin,
      buttonXMargin: defaultMargin,
      buttonYMargin: defaultMargin,
      // use this model Property because the graph only updates when it is visible
      expandedProperty: barGraphVisibleProperty,
      // {null|*} options for the bar graph itself, passed on to EnergyBarGraph
      barGraphOptions: null,
      expandCollapseButtonOptions: {
        sideLength: 19
      },
      tandem: tandem
    }, EnergySkateParkConstants.GRAPH_PANEL_OPTONS, options);
    const energyBarGraph = new EnergyBarGraph(skater, barGraphScaleProperty, barGraphVisibleProperty, tandem.createTandem('energyBarGraph'), options.barGraphOptions);
    super(energyBarGraph, options);

    // create an icon that represents the content, it is invisible when expanded
    const graphIcon = EnergyBarGraph.createBarGraphIcon(tandem.createTandem('barGraphIcon'));
    this.addChild(graphIcon);
    graphIcon.right = graphIcon.globalToParentPoint(energyBarGraph.parentToGlobalPoint(energyBarGraph.rightCenter)).x;
    graphIcon.top = options.buttonYMargin;
    barGraphVisibleProperty.link(visible => {
      graphIcon.visible = !visible;
    });
  }
}
energySkatePark.register('EnergyBarGraphAccordionBox', EnergyBarGraphAccordionBox);
export default EnergyBarGraphAccordionBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFjY29yZGlvbkJveCIsImVuZXJneVNrYXRlUGFyayIsIkVuZXJneVNrYXRlUGFya0NvbnN0YW50cyIsIkVuZXJneUJhckdyYXBoIiwiRW5lcmd5QmFyR3JhcGhBY2NvcmRpb25Cb3giLCJjb25zdHJ1Y3RvciIsInNrYXRlciIsImJhckdyYXBoU2NhbGVQcm9wZXJ0eSIsImJhckdyYXBoVmlzaWJsZVByb3BlcnR5IiwidGFuZGVtIiwib3B0aW9ucyIsImRlZmF1bHRNYXJnaW4iLCJ0aXRsZU5vZGUiLCJjcmVhdGVMYWJlbCIsImNvbnRlbnRYTWFyZ2luIiwiY29udGVudFlNYXJnaW4iLCJidXR0b25YTWFyZ2luIiwiYnV0dG9uWU1hcmdpbiIsImV4cGFuZGVkUHJvcGVydHkiLCJiYXJHcmFwaE9wdGlvbnMiLCJleHBhbmRDb2xsYXBzZUJ1dHRvbk9wdGlvbnMiLCJzaWRlTGVuZ3RoIiwiR1JBUEhfUEFORUxfT1BUT05TIiwiZW5lcmd5QmFyR3JhcGgiLCJjcmVhdGVUYW5kZW0iLCJncmFwaEljb24iLCJjcmVhdGVCYXJHcmFwaEljb24iLCJhZGRDaGlsZCIsInJpZ2h0IiwiZ2xvYmFsVG9QYXJlbnRQb2ludCIsInBhcmVudFRvR2xvYmFsUG9pbnQiLCJyaWdodENlbnRlciIsIngiLCJ0b3AiLCJsaW5rIiwidmlzaWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5lcmd5QmFyR3JhcGhBY2NvcmRpb25Cb3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQW4gQWNjb3JkaW9uQm94IHRoYXQgY29udGFpbnMgdGhlIGVuZXJneSBiYXIgZ3JhcGggdXNlZCBpbiB0aGlzIHNpbS5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBBY2NvcmRpb25Cb3ggZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FjY29yZGlvbkJveC5qcyc7XHJcbmltcG9ydCBlbmVyZ3lTa2F0ZVBhcmsgZnJvbSAnLi4vLi4vZW5lcmd5U2thdGVQYXJrLmpzJztcclxuaW1wb3J0IEVuZXJneVNrYXRlUGFya0NvbnN0YW50cyBmcm9tICcuLi9FbmVyZ3lTa2F0ZVBhcmtDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRW5lcmd5QmFyR3JhcGggZnJvbSAnLi9FbmVyZ3lCYXJHcmFwaC5qcyc7XHJcblxyXG5jbGFzcyBFbmVyZ3lCYXJHcmFwaEFjY29yZGlvbkJveCBleHRlbmRzIEFjY29yZGlvbkJveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7U2thdGVyfSBza2F0ZXJcclxuICAgKiBAcGFyYW0ge051bWJlclByb3BlcnR5fSBiYXJHcmFwaFNjYWxlUHJvcGVydHkgLSBjb250cm9scyBzY2FsZSBvZiBiYXIgZ3JhcGhzXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IGJhckdyYXBoVmlzaWJsZVByb3BlcnR5IC0gY29udHJvbHMgdmlzaWJpbGl0eSBvZiBiYXIgZ3JhcGhzXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggc2thdGVyLCBiYXJHcmFwaFNjYWxlUHJvcGVydHksIGJhckdyYXBoVmlzaWJsZVByb3BlcnR5LCB0YW5kZW0sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgZGVmYXVsdE1hcmdpbiA9IDU7XHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIHRpdGxlTm9kZTogRW5lcmd5QmFyR3JhcGguY3JlYXRlTGFiZWwoKSxcclxuXHJcbiAgICAgIGNvbnRlbnRYTWFyZ2luOiBkZWZhdWx0TWFyZ2luLFxyXG4gICAgICBjb250ZW50WU1hcmdpbjogZGVmYXVsdE1hcmdpbixcclxuICAgICAgYnV0dG9uWE1hcmdpbjogZGVmYXVsdE1hcmdpbixcclxuICAgICAgYnV0dG9uWU1hcmdpbjogZGVmYXVsdE1hcmdpbixcclxuXHJcbiAgICAgIC8vIHVzZSB0aGlzIG1vZGVsIFByb3BlcnR5IGJlY2F1c2UgdGhlIGdyYXBoIG9ubHkgdXBkYXRlcyB3aGVuIGl0IGlzIHZpc2libGVcclxuICAgICAgZXhwYW5kZWRQcm9wZXJ0eTogYmFyR3JhcGhWaXNpYmxlUHJvcGVydHksXHJcblxyXG4gICAgICAvLyB7bnVsbHwqfSBvcHRpb25zIGZvciB0aGUgYmFyIGdyYXBoIGl0c2VsZiwgcGFzc2VkIG9uIHRvIEVuZXJneUJhckdyYXBoXHJcbiAgICAgIGJhckdyYXBoT3B0aW9uczogbnVsbCxcclxuXHJcbiAgICAgIGV4cGFuZENvbGxhcHNlQnV0dG9uT3B0aW9uczoge1xyXG4gICAgICAgIHNpZGVMZW5ndGg6IDE5XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSwgRW5lcmd5U2thdGVQYXJrQ29uc3RhbnRzLkdSQVBIX1BBTkVMX09QVE9OUywgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGVuZXJneUJhckdyYXBoID0gbmV3IEVuZXJneUJhckdyYXBoKCBza2F0ZXIsIGJhckdyYXBoU2NhbGVQcm9wZXJ0eSwgYmFyR3JhcGhWaXNpYmxlUHJvcGVydHksIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdlbmVyZ3lCYXJHcmFwaCcgKSwgb3B0aW9ucy5iYXJHcmFwaE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggZW5lcmd5QmFyR3JhcGgsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgYW4gaWNvbiB0aGF0IHJlcHJlc2VudHMgdGhlIGNvbnRlbnQsIGl0IGlzIGludmlzaWJsZSB3aGVuIGV4cGFuZGVkXHJcbiAgICBjb25zdCBncmFwaEljb24gPSBFbmVyZ3lCYXJHcmFwaC5jcmVhdGVCYXJHcmFwaEljb24oIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdiYXJHcmFwaEljb24nICkgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGdyYXBoSWNvbiApO1xyXG4gICAgZ3JhcGhJY29uLnJpZ2h0ID0gZ3JhcGhJY29uLmdsb2JhbFRvUGFyZW50UG9pbnQoIGVuZXJneUJhckdyYXBoLnBhcmVudFRvR2xvYmFsUG9pbnQoIGVuZXJneUJhckdyYXBoLnJpZ2h0Q2VudGVyICkgKS54O1xyXG4gICAgZ3JhcGhJY29uLnRvcCA9IG9wdGlvbnMuYnV0dG9uWU1hcmdpbjtcclxuXHJcbiAgICBiYXJHcmFwaFZpc2libGVQcm9wZXJ0eS5saW5rKCB2aXNpYmxlID0+IHtcclxuICAgICAgZ3JhcGhJY29uLnZpc2libGUgPSAhdmlzaWJsZTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneVNrYXRlUGFyay5yZWdpc3RlciggJ0VuZXJneUJhckdyYXBoQWNjb3JkaW9uQm94JywgRW5lcmd5QmFyR3JhcGhBY2NvcmRpb25Cb3ggKTtcclxuZXhwb3J0IGRlZmF1bHQgRW5lcmd5QmFyR3JhcGhBY2NvcmRpb25Cb3g7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsWUFBWSxNQUFNLG9DQUFvQztBQUM3RCxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHdCQUF3QixNQUFNLGdDQUFnQztBQUNyRSxPQUFPQyxjQUFjLE1BQU0scUJBQXFCO0FBRWhELE1BQU1DLDBCQUEwQixTQUFTSixZQUFZLENBQUM7RUFFcEQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsTUFBTSxFQUFFQyxxQkFBcUIsRUFBRUMsdUJBQXVCLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0lBRXJGLE1BQU1DLGFBQWEsR0FBRyxDQUFDO0lBQ3ZCRCxPQUFPLEdBQUdYLEtBQUssQ0FBRTtNQUVmYSxTQUFTLEVBQUVULGNBQWMsQ0FBQ1UsV0FBVyxDQUFDLENBQUM7TUFFdkNDLGNBQWMsRUFBRUgsYUFBYTtNQUM3QkksY0FBYyxFQUFFSixhQUFhO01BQzdCSyxhQUFhLEVBQUVMLGFBQWE7TUFDNUJNLGFBQWEsRUFBRU4sYUFBYTtNQUU1QjtNQUNBTyxnQkFBZ0IsRUFBRVYsdUJBQXVCO01BRXpDO01BQ0FXLGVBQWUsRUFBRSxJQUFJO01BRXJCQywyQkFBMkIsRUFBRTtRQUMzQkMsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUVEWixNQUFNLEVBQUVBO0lBQ1YsQ0FBQyxFQUFFUCx3QkFBd0IsQ0FBQ29CLGtCQUFrQixFQUFFWixPQUFRLENBQUM7SUFFekQsTUFBTWEsY0FBYyxHQUFHLElBQUlwQixjQUFjLENBQUVHLE1BQU0sRUFBRUMscUJBQXFCLEVBQUVDLHVCQUF1QixFQUFFQyxNQUFNLENBQUNlLFlBQVksQ0FBRSxnQkFBaUIsQ0FBQyxFQUFFZCxPQUFPLENBQUNTLGVBQWdCLENBQUM7SUFFckssS0FBSyxDQUFFSSxjQUFjLEVBQUViLE9BQVEsQ0FBQzs7SUFFaEM7SUFDQSxNQUFNZSxTQUFTLEdBQUd0QixjQUFjLENBQUN1QixrQkFBa0IsQ0FBRWpCLE1BQU0sQ0FBQ2UsWUFBWSxDQUFFLGNBQWUsQ0FBRSxDQUFDO0lBQzVGLElBQUksQ0FBQ0csUUFBUSxDQUFFRixTQUFVLENBQUM7SUFDMUJBLFNBQVMsQ0FBQ0csS0FBSyxHQUFHSCxTQUFTLENBQUNJLG1CQUFtQixDQUFFTixjQUFjLENBQUNPLG1CQUFtQixDQUFFUCxjQUFjLENBQUNRLFdBQVksQ0FBRSxDQUFDLENBQUNDLENBQUM7SUFDckhQLFNBQVMsQ0FBQ1EsR0FBRyxHQUFHdkIsT0FBTyxDQUFDTyxhQUFhO0lBRXJDVCx1QkFBdUIsQ0FBQzBCLElBQUksQ0FBRUMsT0FBTyxJQUFJO01BQ3ZDVixTQUFTLENBQUNVLE9BQU8sR0FBRyxDQUFDQSxPQUFPO0lBQzlCLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWxDLGVBQWUsQ0FBQ21DLFFBQVEsQ0FBRSw0QkFBNEIsRUFBRWhDLDBCQUEyQixDQUFDO0FBQ3BGLGVBQWVBLDBCQUEwQiJ9