// Copyright 2022-2023, University of Colorado Boulder

/**
 * The node that is shown in the Preferences dialog of Energy Skate Park to control simulation
 * specific settings.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import PreferencesDialogConstants from '../../../../joist/js/preferences/PreferencesDialogConstants.js';
import PreferencesControl from '../../../../joist/js/preferences/PreferencesControl.js';
import { Node, RichText, Text } from '../../../../scenery/js/imports.js';
import ABSwitch from '../../../../sun/js/ABSwitch.js';
import energySkatePark from '../../energySkatePark.js';
import EnergySkateParkStrings from '../../EnergySkateParkStrings.js';
import EnergySkateParkPreferencesModel from '../model/EnergySkateParkPreferencesModel.js';
class EnergySkateParkPreferencesNode extends Node {
  /**
   * @param {EnergySkateParkPreferencesModel} preferencesModel
   * @param {Tandem} tandem
   */
  constructor(preferencesModel, tandem) {
    super();
    const metersPerSecondSquaredLabel = new RichText(EnergySkateParkStrings.preferences.metersPerSecondSquaredStringProperty, PreferencesDialogConstants.CONTROL_DESCRIPTION_OPTIONS);
    const newtonsPerKilogramLabel = new Text(EnergySkateParkStrings.preferences.newtonsPerKilogramStringProperty, PreferencesDialogConstants.CONTROL_DESCRIPTION_OPTIONS);
    const accelarationUnitsSwitch = new ABSwitch(preferencesModel.accelerationUnitsProperty, EnergySkateParkPreferencesModel.AccelerationUnits.METERS_PER_SECOND_SQUARED, metersPerSecondSquaredLabel, EnergySkateParkPreferencesModel.AccelerationUnits.NEWTONS_PER_KILOGRAM, newtonsPerKilogramLabel, {
      toggleSwitchOptions: PreferencesDialogConstants.TOGGLE_SWITCH_OPTIONS
    });
    const accelerationUnitsControl = new PreferencesControl({
      labelNode: new Text(EnergySkateParkStrings.preferences.accelerationUnitsStringProperty, PreferencesDialogConstants.CONTROL_LABEL_OPTIONS),
      labelSpacing: 20,
      controlNode: accelarationUnitsSwitch
    });
    this.addChild(accelerationUnitsControl);
  }
}
energySkatePark.register('EnergySkateParkPreferencesNode', EnergySkateParkPreferencesNode);
export default EnergySkateParkPreferencesNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc0RpYWxvZ0NvbnN0YW50cyIsIlByZWZlcmVuY2VzQ29udHJvbCIsIk5vZGUiLCJSaWNoVGV4dCIsIlRleHQiLCJBQlN3aXRjaCIsImVuZXJneVNrYXRlUGFyayIsIkVuZXJneVNrYXRlUGFya1N0cmluZ3MiLCJFbmVyZ3lTa2F0ZVBhcmtQcmVmZXJlbmNlc01vZGVsIiwiRW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNOb2RlIiwiY29uc3RydWN0b3IiLCJwcmVmZXJlbmNlc01vZGVsIiwidGFuZGVtIiwibWV0ZXJzUGVyU2Vjb25kU3F1YXJlZExhYmVsIiwicHJlZmVyZW5jZXMiLCJtZXRlcnNQZXJTZWNvbmRTcXVhcmVkU3RyaW5nUHJvcGVydHkiLCJDT05UUk9MX0RFU0NSSVBUSU9OX09QVElPTlMiLCJuZXd0b25zUGVyS2lsb2dyYW1MYWJlbCIsIm5ld3RvbnNQZXJLaWxvZ3JhbVN0cmluZ1Byb3BlcnR5IiwiYWNjZWxhcmF0aW9uVW5pdHNTd2l0Y2giLCJhY2NlbGVyYXRpb25Vbml0c1Byb3BlcnR5IiwiQWNjZWxlcmF0aW9uVW5pdHMiLCJNRVRFUlNfUEVSX1NFQ09ORF9TUVVBUkVEIiwiTkVXVE9OU19QRVJfS0lMT0dSQU0iLCJ0b2dnbGVTd2l0Y2hPcHRpb25zIiwiVE9HR0xFX1NXSVRDSF9PUFRJT05TIiwiYWNjZWxlcmF0aW9uVW5pdHNDb250cm9sIiwibGFiZWxOb2RlIiwiYWNjZWxlcmF0aW9uVW5pdHNTdHJpbmdQcm9wZXJ0eSIsIkNPTlRST0xfTEFCRUxfT1BUSU9OUyIsImxhYmVsU3BhY2luZyIsImNvbnRyb2xOb2RlIiwiYWRkQ2hpbGQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgbm9kZSB0aGF0IGlzIHNob3duIGluIHRoZSBQcmVmZXJlbmNlcyBkaWFsb2cgb2YgRW5lcmd5IFNrYXRlIFBhcmsgdG8gY29udHJvbCBzaW11bGF0aW9uXHJcbiAqIHNwZWNpZmljIHNldHRpbmdzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJlZmVyZW5jZXNEaWFsb2dDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvcHJlZmVyZW5jZXMvUHJlZmVyZW5jZXNEaWFsb2dDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNDb250cm9sIGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzQ29udHJvbC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFJpY2hUZXh0LCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEFCU3dpdGNoIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9BQlN3aXRjaC5qcyc7XHJcbmltcG9ydCBlbmVyZ3lTa2F0ZVBhcmsgZnJvbSAnLi4vLi4vZW5lcmd5U2thdGVQYXJrLmpzJztcclxuaW1wb3J0IEVuZXJneVNrYXRlUGFya1N0cmluZ3MgZnJvbSAnLi4vLi4vRW5lcmd5U2thdGVQYXJrU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lTa2F0ZVBhcmtQcmVmZXJlbmNlc01vZGVsIGZyb20gJy4uL21vZGVsL0VuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTW9kZWwuanMnO1xyXG5cclxuY2xhc3MgRW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNNb2RlbH0gcHJlZmVyZW5jZXNNb2RlbFxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggcHJlZmVyZW5jZXNNb2RlbCwgdGFuZGVtICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBjb25zdCBtZXRlcnNQZXJTZWNvbmRTcXVhcmVkTGFiZWwgPSBuZXcgUmljaFRleHQoIEVuZXJneVNrYXRlUGFya1N0cmluZ3MucHJlZmVyZW5jZXMubWV0ZXJzUGVyU2Vjb25kU3F1YXJlZFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBQcmVmZXJlbmNlc0RpYWxvZ0NvbnN0YW50cy5DT05UUk9MX0RFU0NSSVBUSU9OX09QVElPTlNcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgbmV3dG9uc1BlcktpbG9ncmFtTGFiZWwgPSBuZXcgVGV4dCggRW5lcmd5U2thdGVQYXJrU3RyaW5ncy5wcmVmZXJlbmNlcy5uZXd0b25zUGVyS2lsb2dyYW1TdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgUHJlZmVyZW5jZXNEaWFsb2dDb25zdGFudHMuQ09OVFJPTF9ERVNDUklQVElPTl9PUFRJT05TICk7XHJcblxyXG4gICAgY29uc3QgYWNjZWxhcmF0aW9uVW5pdHNTd2l0Y2ggPSBuZXcgQUJTd2l0Y2goIHByZWZlcmVuY2VzTW9kZWwuYWNjZWxlcmF0aW9uVW5pdHNQcm9wZXJ0eSxcclxuICAgICAgRW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNNb2RlbC5BY2NlbGVyYXRpb25Vbml0cy5NRVRFUlNfUEVSX1NFQ09ORF9TUVVBUkVELFxyXG4gICAgICBtZXRlcnNQZXJTZWNvbmRTcXVhcmVkTGFiZWwsXHJcbiAgICAgIEVuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTW9kZWwuQWNjZWxlcmF0aW9uVW5pdHMuTkVXVE9OU19QRVJfS0lMT0dSQU0sXHJcbiAgICAgIG5ld3RvbnNQZXJLaWxvZ3JhbUxhYmVsLFxyXG4gICAgICB7IHRvZ2dsZVN3aXRjaE9wdGlvbnM6IFByZWZlcmVuY2VzRGlhbG9nQ29uc3RhbnRzLlRPR0dMRV9TV0lUQ0hfT1BUSU9OUyB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgY29uc3QgYWNjZWxlcmF0aW9uVW5pdHNDb250cm9sID0gbmV3IFByZWZlcmVuY2VzQ29udHJvbChcclxuICAgICAge1xyXG4gICAgICAgIGxhYmVsTm9kZTogbmV3IFRleHQoIEVuZXJneVNrYXRlUGFya1N0cmluZ3MucHJlZmVyZW5jZXMuYWNjZWxlcmF0aW9uVW5pdHNTdHJpbmdQcm9wZXJ0eSwgUHJlZmVyZW5jZXNEaWFsb2dDb25zdGFudHMuQ09OVFJPTF9MQUJFTF9PUFRJT05TICksXHJcbiAgICAgICAgbGFiZWxTcGFjaW5nOiAyMCxcclxuICAgICAgICBjb250cm9sTm9kZTogYWNjZWxhcmF0aW9uVW5pdHNTd2l0Y2hcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBhY2NlbGVyYXRpb25Vbml0c0NvbnRyb2wgKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneVNrYXRlUGFyay5yZWdpc3RlciggJ0VuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTm9kZScsIEVuZXJneVNrYXRlUGFya1ByZWZlcmVuY2VzTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBFbmVyZ3lTa2F0ZVBhcmtQcmVmZXJlbmNlc05vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLDBCQUEwQixNQUFNLGdFQUFnRTtBQUN2RyxPQUFPQyxrQkFBa0IsTUFBTSx3REFBd0Q7QUFDdkYsU0FBU0MsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEUsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUNyRCxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHNCQUFzQixNQUFNLGlDQUFpQztBQUNwRSxPQUFPQywrQkFBK0IsTUFBTSw2Q0FBNkM7QUFFekYsTUFBTUMsOEJBQThCLFNBQVNQLElBQUksQ0FBQztFQUVoRDtBQUNGO0FBQ0E7QUFDQTtFQUNFUSxXQUFXQSxDQUFFQyxnQkFBZ0IsRUFBRUMsTUFBTSxFQUFHO0lBQ3RDLEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUMsMkJBQTJCLEdBQUcsSUFBSVYsUUFBUSxDQUFFSSxzQkFBc0IsQ0FBQ08sV0FBVyxDQUFDQyxvQ0FBb0MsRUFDdkhmLDBCQUEwQixDQUFDZ0IsMkJBQzdCLENBQUM7SUFFRCxNQUFNQyx1QkFBdUIsR0FBRyxJQUFJYixJQUFJLENBQUVHLHNCQUFzQixDQUFDTyxXQUFXLENBQUNJLGdDQUFnQyxFQUMzR2xCLDBCQUEwQixDQUFDZ0IsMkJBQTRCLENBQUM7SUFFMUQsTUFBTUcsdUJBQXVCLEdBQUcsSUFBSWQsUUFBUSxDQUFFTSxnQkFBZ0IsQ0FBQ1MseUJBQXlCLEVBQ3RGWiwrQkFBK0IsQ0FBQ2EsaUJBQWlCLENBQUNDLHlCQUF5QixFQUMzRVQsMkJBQTJCLEVBQzNCTCwrQkFBK0IsQ0FBQ2EsaUJBQWlCLENBQUNFLG9CQUFvQixFQUN0RU4sdUJBQXVCLEVBQ3ZCO01BQUVPLG1CQUFtQixFQUFFeEIsMEJBQTBCLENBQUN5QjtJQUFzQixDQUN4RSxDQUFDO0lBRUgsTUFBTUMsd0JBQXdCLEdBQUcsSUFBSXpCLGtCQUFrQixDQUNyRDtNQUNFMEIsU0FBUyxFQUFFLElBQUl2QixJQUFJLENBQUVHLHNCQUFzQixDQUFDTyxXQUFXLENBQUNjLCtCQUErQixFQUFFNUIsMEJBQTBCLENBQUM2QixxQkFBc0IsQ0FBQztNQUMzSUMsWUFBWSxFQUFFLEVBQUU7TUFDaEJDLFdBQVcsRUFBRVo7SUFDZixDQUNGLENBQUM7SUFFRCxJQUFJLENBQUNhLFFBQVEsQ0FBRU4sd0JBQXlCLENBQUM7RUFDM0M7QUFDRjtBQUVBcEIsZUFBZSxDQUFDMkIsUUFBUSxDQUFFLGdDQUFnQyxFQUFFeEIsOEJBQStCLENBQUM7QUFDNUYsZUFBZUEsOEJBQThCIn0=