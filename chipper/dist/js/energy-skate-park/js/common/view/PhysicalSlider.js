// Copyright 2018-2022, University of Colorado Boulder

/**
 * Controls a physical value of the model. This is just a slider with a label and labeled tick marks. It extends
 * NumberControl to leverage the layout of the label and slider so that it conveniently matches the layout
 * with other NumberControls used in this sim.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import { Text } from '../../../../scenery/js/imports.js';
import energySkatePark from '../../energySkatePark.js';
import EnergySkateParkStrings from '../../EnergySkateParkStrings.js';
import EnergySkateParkConstants from '../EnergySkateParkConstants.js';
import PhysicalNumberControl from './PhysicalNumberControl.js';
const controlsValueLotsString = EnergySkateParkStrings.physicalControls.lotsStringProperty;
const controlsValueNoneString = EnergySkateParkStrings.physicalControls.noneStringProperty;
class PhysicalSlider extends PhysicalNumberControl {
  /**
   * @param {string} titleString
   * @param {NumberProperty} property
   * @param {Range} valueRange
   * @param {BooleanProperty} userControlledProperty
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(titleString, property, valueRange, userControlledProperty, tandem, options) {
    options = merge({
      // {string} - labels for the min and max values of this control
      maxLabel: controlsValueLotsString,
      minLabel: controlsValueNoneString,
      // {*} - passed to the Slider of this NumberControl
      sliderOptions: {}
    }, options);

    // don't include any arrow buttons or the NumberDisplay for this control
    assert && assert(options.sliderOnly === undefined, 'The PhysicalSlider sets sliderOnly option');
    options.sliderOnly = true;
    assert && assert(options.sliderOptions.majorTicks === undefined, 'The PhysicalSlider sets its own major ticks');
    options.sliderOptions.majorTicks = [createTickEntry(valueRange.min, options.minLabel, tandem, 'minLabelText'), createTickEntry(valueRange.max, options.maxLabel, tandem, 'maxLabelText')];
    super(titleString, property, valueRange, userControlledProperty, tandem, options);
  }
}

/**
 * Create a tick entry for the slider to be added with addMajorTick.
 * @param {number} value - value on the slider to add the tick
 * @param {string} label - label for the tick
 * @param {Tandem} tandem
 * @param {string} tandemName
 * @returns {Object} - conforms to { value: {number}, label: Node }, required by NumberControl options
 */
const createTickEntry = (value, label, tandem, tandemName) => {
  return {
    value: value,
    label: new Text(label, merge({
      tandem: tandem.createTandem(tandemName)
    }, EnergySkateParkConstants.CONTROL_TICK_LABEL_OPTIONS))
  };
};
energySkatePark.register('PhysicalSlider', PhysicalSlider);
export default PhysicalSlider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlRleHQiLCJlbmVyZ3lTa2F0ZVBhcmsiLCJFbmVyZ3lTa2F0ZVBhcmtTdHJpbmdzIiwiRW5lcmd5U2thdGVQYXJrQ29uc3RhbnRzIiwiUGh5c2ljYWxOdW1iZXJDb250cm9sIiwiY29udHJvbHNWYWx1ZUxvdHNTdHJpbmciLCJwaHlzaWNhbENvbnRyb2xzIiwibG90c1N0cmluZ1Byb3BlcnR5IiwiY29udHJvbHNWYWx1ZU5vbmVTdHJpbmciLCJub25lU3RyaW5nUHJvcGVydHkiLCJQaHlzaWNhbFNsaWRlciIsImNvbnN0cnVjdG9yIiwidGl0bGVTdHJpbmciLCJwcm9wZXJ0eSIsInZhbHVlUmFuZ2UiLCJ1c2VyQ29udHJvbGxlZFByb3BlcnR5IiwidGFuZGVtIiwib3B0aW9ucyIsIm1heExhYmVsIiwibWluTGFiZWwiLCJzbGlkZXJPcHRpb25zIiwiYXNzZXJ0Iiwic2xpZGVyT25seSIsInVuZGVmaW5lZCIsIm1ham9yVGlja3MiLCJjcmVhdGVUaWNrRW50cnkiLCJtaW4iLCJtYXgiLCJ2YWx1ZSIsImxhYmVsIiwidGFuZGVtTmFtZSIsImNyZWF0ZVRhbmRlbSIsIkNPTlRST0xfVElDS19MQUJFTF9PUFRJT05TIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQaHlzaWNhbFNsaWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb250cm9scyBhIHBoeXNpY2FsIHZhbHVlIG9mIHRoZSBtb2RlbC4gVGhpcyBpcyBqdXN0IGEgc2xpZGVyIHdpdGggYSBsYWJlbCBhbmQgbGFiZWxlZCB0aWNrIG1hcmtzLiBJdCBleHRlbmRzXHJcbiAqIE51bWJlckNvbnRyb2wgdG8gbGV2ZXJhZ2UgdGhlIGxheW91dCBvZiB0aGUgbGFiZWwgYW5kIHNsaWRlciBzbyB0aGF0IGl0IGNvbnZlbmllbnRseSBtYXRjaGVzIHRoZSBsYXlvdXRcclxuICogd2l0aCBvdGhlciBOdW1iZXJDb250cm9scyB1c2VkIGluIHRoaXMgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBlbmVyZ3lTa2F0ZVBhcmsgZnJvbSAnLi4vLi4vZW5lcmd5U2thdGVQYXJrLmpzJztcclxuaW1wb3J0IEVuZXJneVNrYXRlUGFya1N0cmluZ3MgZnJvbSAnLi4vLi4vRW5lcmd5U2thdGVQYXJrU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lTa2F0ZVBhcmtDb25zdGFudHMgZnJvbSAnLi4vRW5lcmd5U2thdGVQYXJrQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFBoeXNpY2FsTnVtYmVyQ29udHJvbCBmcm9tICcuL1BoeXNpY2FsTnVtYmVyQ29udHJvbC5qcyc7XHJcblxyXG5jb25zdCBjb250cm9sc1ZhbHVlTG90c1N0cmluZyA9IEVuZXJneVNrYXRlUGFya1N0cmluZ3MucGh5c2ljYWxDb250cm9scy5sb3RzU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGNvbnRyb2xzVmFsdWVOb25lU3RyaW5nID0gRW5lcmd5U2thdGVQYXJrU3RyaW5ncy5waHlzaWNhbENvbnRyb2xzLm5vbmVTdHJpbmdQcm9wZXJ0eTtcclxuXHJcbmNsYXNzIFBoeXNpY2FsU2xpZGVyIGV4dGVuZHMgUGh5c2ljYWxOdW1iZXJDb250cm9sIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlU3RyaW5nXHJcbiAgICogQHBhcmFtIHtOdW1iZXJQcm9wZXJ0eX0gcHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1JhbmdlfSB2YWx1ZVJhbmdlXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IHVzZXJDb250cm9sbGVkUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0aXRsZVN0cmluZywgcHJvcGVydHksIHZhbHVlUmFuZ2UsIHVzZXJDb250cm9sbGVkUHJvcGVydHksIHRhbmRlbSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgLy8ge3N0cmluZ30gLSBsYWJlbHMgZm9yIHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgdGhpcyBjb250cm9sXHJcbiAgICAgIG1heExhYmVsOiBjb250cm9sc1ZhbHVlTG90c1N0cmluZyxcclxuICAgICAgbWluTGFiZWw6IGNvbnRyb2xzVmFsdWVOb25lU3RyaW5nLFxyXG5cclxuICAgICAgLy8geyp9IC0gcGFzc2VkIHRvIHRoZSBTbGlkZXIgb2YgdGhpcyBOdW1iZXJDb250cm9sXHJcbiAgICAgIHNsaWRlck9wdGlvbnM6IHt9XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gZG9uJ3QgaW5jbHVkZSBhbnkgYXJyb3cgYnV0dG9ucyBvciB0aGUgTnVtYmVyRGlzcGxheSBmb3IgdGhpcyBjb250cm9sXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLnNsaWRlck9ubHkgPT09IHVuZGVmaW5lZCwgJ1RoZSBQaHlzaWNhbFNsaWRlciBzZXRzIHNsaWRlck9ubHkgb3B0aW9uJyApO1xyXG4gICAgb3B0aW9ucy5zbGlkZXJPbmx5ID0gdHJ1ZTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLnNsaWRlck9wdGlvbnMubWFqb3JUaWNrcyA9PT0gdW5kZWZpbmVkLCAnVGhlIFBoeXNpY2FsU2xpZGVyIHNldHMgaXRzIG93biBtYWpvciB0aWNrcycgKTtcclxuICAgIG9wdGlvbnMuc2xpZGVyT3B0aW9ucy5tYWpvclRpY2tzID0gW1xyXG4gICAgICBjcmVhdGVUaWNrRW50cnkoIHZhbHVlUmFuZ2UubWluLCBvcHRpb25zLm1pbkxhYmVsLCB0YW5kZW0sICdtaW5MYWJlbFRleHQnICksXHJcbiAgICAgIGNyZWF0ZVRpY2tFbnRyeSggdmFsdWVSYW5nZS5tYXgsIG9wdGlvbnMubWF4TGFiZWwsIHRhbmRlbSwgJ21heExhYmVsVGV4dCcgKVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggdGl0bGVTdHJpbmcsIHByb3BlcnR5LCB2YWx1ZVJhbmdlLCB1c2VyQ29udHJvbGxlZFByb3BlcnR5LCB0YW5kZW0sIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSB0aWNrIGVudHJ5IGZvciB0aGUgc2xpZGVyIHRvIGJlIGFkZGVkIHdpdGggYWRkTWFqb3JUaWNrLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSBvbiB0aGUgc2xpZGVyIHRvIGFkZCB0aGUgdGlja1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSBsYWJlbCBmb3IgdGhlIHRpY2tcclxuICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFuZGVtTmFtZVxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIGNvbmZvcm1zIHRvIHsgdmFsdWU6IHtudW1iZXJ9LCBsYWJlbDogTm9kZSB9LCByZXF1aXJlZCBieSBOdW1iZXJDb250cm9sIG9wdGlvbnNcclxuICovXHJcbmNvbnN0IGNyZWF0ZVRpY2tFbnRyeSA9ICggdmFsdWUsIGxhYmVsLCB0YW5kZW0sIHRhbmRlbU5hbWUgKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgIGxhYmVsOiBuZXcgVGV4dCggbGFiZWwsIG1lcmdlKCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggdGFuZGVtTmFtZSApXHJcbiAgICB9LCBFbmVyZ3lTa2F0ZVBhcmtDb25zdGFudHMuQ09OVFJPTF9USUNLX0xBQkVMX09QVElPTlMgKSApXHJcbiAgfTtcclxufTtcclxuXHJcbmVuZXJneVNrYXRlUGFyay5yZWdpc3RlciggJ1BoeXNpY2FsU2xpZGVyJywgUGh5c2ljYWxTbGlkZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgUGh5c2ljYWxTbGlkZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHNCQUFzQixNQUFNLGlDQUFpQztBQUNwRSxPQUFPQyx3QkFBd0IsTUFBTSxnQ0FBZ0M7QUFDckUsT0FBT0MscUJBQXFCLE1BQU0sNEJBQTRCO0FBRTlELE1BQU1DLHVCQUF1QixHQUFHSCxzQkFBc0IsQ0FBQ0ksZ0JBQWdCLENBQUNDLGtCQUFrQjtBQUMxRixNQUFNQyx1QkFBdUIsR0FBR04sc0JBQXNCLENBQUNJLGdCQUFnQixDQUFDRyxrQkFBa0I7QUFFMUYsTUFBTUMsY0FBYyxTQUFTTixxQkFBcUIsQ0FBQztFQUVqRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VPLFdBQVdBLENBQUVDLFdBQVcsRUFBRUMsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLHNCQUFzQixFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRztJQUV4RkEsT0FBTyxHQUFHbEIsS0FBSyxDQUFFO01BQ2Y7TUFDQW1CLFFBQVEsRUFBRWIsdUJBQXVCO01BQ2pDYyxRQUFRLEVBQUVYLHVCQUF1QjtNQUVqQztNQUNBWSxhQUFhLEVBQUUsQ0FBQztJQUNsQixDQUFDLEVBQUVILE9BQVEsQ0FBQzs7SUFFWjtJQUNBSSxNQUFNLElBQUlBLE1BQU0sQ0FBRUosT0FBTyxDQUFDSyxVQUFVLEtBQUtDLFNBQVMsRUFBRSwyQ0FBNEMsQ0FBQztJQUNqR04sT0FBTyxDQUFDSyxVQUFVLEdBQUcsSUFBSTtJQUV6QkQsTUFBTSxJQUFJQSxNQUFNLENBQUVKLE9BQU8sQ0FBQ0csYUFBYSxDQUFDSSxVQUFVLEtBQUtELFNBQVMsRUFBRSw2Q0FBOEMsQ0FBQztJQUNqSE4sT0FBTyxDQUFDRyxhQUFhLENBQUNJLFVBQVUsR0FBRyxDQUNqQ0MsZUFBZSxDQUFFWCxVQUFVLENBQUNZLEdBQUcsRUFBRVQsT0FBTyxDQUFDRSxRQUFRLEVBQUVILE1BQU0sRUFBRSxjQUFlLENBQUMsRUFDM0VTLGVBQWUsQ0FBRVgsVUFBVSxDQUFDYSxHQUFHLEVBQUVWLE9BQU8sQ0FBQ0MsUUFBUSxFQUFFRixNQUFNLEVBQUUsY0FBZSxDQUFDLENBQzVFO0lBRUQsS0FBSyxDQUFFSixXQUFXLEVBQUVDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxzQkFBc0IsRUFBRUMsTUFBTSxFQUFFQyxPQUFRLENBQUM7RUFDckY7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTVEsZUFBZSxHQUFHQSxDQUFFRyxLQUFLLEVBQUVDLEtBQUssRUFBRWIsTUFBTSxFQUFFYyxVQUFVLEtBQU07RUFDOUQsT0FBTztJQUNMRixLQUFLLEVBQUVBLEtBQUs7SUFDWkMsS0FBSyxFQUFFLElBQUk3QixJQUFJLENBQUU2QixLQUFLLEVBQUU5QixLQUFLLENBQUU7TUFDN0JpQixNQUFNLEVBQUVBLE1BQU0sQ0FBQ2UsWUFBWSxDQUFFRCxVQUFXO0lBQzFDLENBQUMsRUFBRTNCLHdCQUF3QixDQUFDNkIsMEJBQTJCLENBQUU7RUFDM0QsQ0FBQztBQUNILENBQUM7QUFFRC9CLGVBQWUsQ0FBQ2dDLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRXZCLGNBQWUsQ0FBQztBQUM1RCxlQUFlQSxjQUFjIn0=