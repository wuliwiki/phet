// Copyright 2013-2020, University of Colorado Boulder

/**
 * Use these modified variants of numeric.js spline code because they are much faster!
 * Code copied from numeric.js and hence licensed under MIT
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import dot from '../../../dot/js/dot.js';
import energySkatePark from '../energySkatePark.js';

// constants
const FastArray = dot.FastArray;

// The most important function for this sim in numeric.js is just too slow because it uses tensor versions of all functions.
// This version inlines everything.
const _at = (spline, x1, p) => {
  const x = spline.x;
  const yl = spline.yl;
  const yr = spline.yr;
  const kl = spline.kl;
  const kr = spline.kr;
  const a = kl[p] * (x[p + 1] - x[p]) - (yr[p + 1] - yl[p]);
  const b = kr[p + 1] * (x[p] - x[p + 1]) + yr[p + 1] - yl[p];
  const t = (x1 - x[p]) / (x[p + 1] - x[p]);
  const s = t * (1 - t);
  return (1 - t) * yl[p] + t * yr[p + 1] + a * s * (1 - t) + b * s * t;
};
const atNumber = (spline, x0) => {
  const x = spline.x;
  const n = x.length;
  let p;
  let q;
  let mid;
  const floor = Math.floor;
  p = 0;
  q = n - 1;
  while (q - p > 1) {
    mid = floor((p + q) / 2);
    if (x[mid] <= x0) {
      p = mid;
    } else {
      q = mid;
    }
  }
  return _at(spline, x0, p);
};
const atArray = (spline, x0) => {
  const n = x0.length;
  let i;
  const ret = new FastArray(n);
  for (i = n - 1; i !== -1; --i) {
    ret[i] = atNumber(spline, x0[i]);
  }
  return ret;
};
const SplineEvaluation = {
  atNumber: atNumber,
  atArray: atArray
};
energySkatePark.register('SplineEvaluation', SplineEvaluation);
export default SplineEvaluation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJlbmVyZ3lTa2F0ZVBhcmsiLCJGYXN0QXJyYXkiLCJfYXQiLCJzcGxpbmUiLCJ4MSIsInAiLCJ4IiwieWwiLCJ5ciIsImtsIiwia3IiLCJhIiwiYiIsInQiLCJzIiwiYXROdW1iZXIiLCJ4MCIsIm4iLCJsZW5ndGgiLCJxIiwibWlkIiwiZmxvb3IiLCJNYXRoIiwiYXRBcnJheSIsImkiLCJyZXQiLCJTcGxpbmVFdmFsdWF0aW9uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTcGxpbmVFdmFsdWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFVzZSB0aGVzZSBtb2RpZmllZCB2YXJpYW50cyBvZiBudW1lcmljLmpzIHNwbGluZSBjb2RlIGJlY2F1c2UgdGhleSBhcmUgbXVjaCBmYXN0ZXIhXHJcbiAqIENvZGUgY29waWVkIGZyb20gbnVtZXJpYy5qcyBhbmQgaGVuY2UgbGljZW5zZWQgdW5kZXIgTUlUXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGRvdCBmcm9tICcuLi8uLi8uLi9kb3QvanMvZG90LmpzJztcclxuaW1wb3J0IGVuZXJneVNrYXRlUGFyayBmcm9tICcuLi9lbmVyZ3lTa2F0ZVBhcmsuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEZhc3RBcnJheSA9IGRvdC5GYXN0QXJyYXk7XHJcblxyXG4vLyBUaGUgbW9zdCBpbXBvcnRhbnQgZnVuY3Rpb24gZm9yIHRoaXMgc2ltIGluIG51bWVyaWMuanMgaXMganVzdCB0b28gc2xvdyBiZWNhdXNlIGl0IHVzZXMgdGVuc29yIHZlcnNpb25zIG9mIGFsbCBmdW5jdGlvbnMuXHJcbi8vIFRoaXMgdmVyc2lvbiBpbmxpbmVzIGV2ZXJ5dGhpbmcuXHJcbmNvbnN0IF9hdCA9ICggc3BsaW5lLCB4MSwgcCApID0+IHtcclxuICBjb25zdCB4ID0gc3BsaW5lLng7XHJcbiAgY29uc3QgeWwgPSBzcGxpbmUueWw7XHJcbiAgY29uc3QgeXIgPSBzcGxpbmUueXI7XHJcbiAgY29uc3Qga2wgPSBzcGxpbmUua2w7XHJcbiAgY29uc3Qga3IgPSBzcGxpbmUua3I7XHJcbiAgY29uc3QgYSA9ICgga2xbIHAgXSAqICggeFsgcCArIDEgXSAtIHhbIHAgXSApICkgLSAoIHlyWyBwICsgMSBdIC0geWxbIHAgXSApO1xyXG4gIGNvbnN0IGIgPSBrclsgcCArIDEgXSAqICggeFsgcCBdIC0geFsgcCArIDEgXSApICsgeXJbIHAgKyAxIF0gLSB5bFsgcCBdO1xyXG4gIGNvbnN0IHQgPSAoIHgxIC0geFsgcCBdICkgLyAoIHhbIHAgKyAxIF0gLSB4WyBwIF0gKTtcclxuICBjb25zdCBzID0gdCAqICggMSAtIHQgKTtcclxuICByZXR1cm4gKCAoIDEgLSB0ICkgKiB5bFsgcCBdICsgdCAqIHlyWyBwICsgMSBdICtcclxuICAgICAgICAgYSAqIHMgKiAoIDEgLSB0ICkgKSArXHJcbiAgICAgICAgIGIgKiBzICogdDtcclxufTtcclxuXHJcbmNvbnN0IGF0TnVtYmVyID0gKCBzcGxpbmUsIHgwICkgPT4ge1xyXG4gIGNvbnN0IHggPSBzcGxpbmUueDtcclxuICBjb25zdCBuID0geC5sZW5ndGg7XHJcbiAgbGV0IHA7XHJcbiAgbGV0IHE7XHJcbiAgbGV0IG1pZDtcclxuICBjb25zdCBmbG9vciA9IE1hdGguZmxvb3I7XHJcbiAgcCA9IDA7XHJcbiAgcSA9IG4gLSAxO1xyXG4gIHdoaWxlICggcSAtIHAgPiAxICkge1xyXG4gICAgbWlkID0gZmxvb3IoICggcCArIHEgKSAvIDIgKTtcclxuICAgIGlmICggeFsgbWlkIF0gPD0geDAgKSB7XHJcbiAgICAgIHAgPSBtaWQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcSA9IG1pZDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIF9hdCggc3BsaW5lLCB4MCwgcCApO1xyXG59O1xyXG5cclxuY29uc3QgYXRBcnJheSA9ICggc3BsaW5lLCB4MCApID0+IHtcclxuICBjb25zdCBuID0geDAubGVuZ3RoO1xyXG4gIGxldCBpO1xyXG4gIGNvbnN0IHJldCA9IG5ldyBGYXN0QXJyYXkoIG4gKTtcclxuICBmb3IgKCBpID0gbiAtIDE7IGkgIT09IC0xOyAtLWkgKSB7XHJcbiAgICByZXRbIGkgXSA9IGF0TnVtYmVyKCBzcGxpbmUsIHgwWyBpIF0gKTtcclxuICB9XHJcbiAgcmV0dXJuIHJldDtcclxufTtcclxuXHJcbmNvbnN0IFNwbGluZUV2YWx1YXRpb24gPSB7IGF0TnVtYmVyOiBhdE51bWJlciwgYXRBcnJheTogYXRBcnJheSB9O1xyXG5cclxuZW5lcmd5U2thdGVQYXJrLnJlZ2lzdGVyKCAnU3BsaW5lRXZhbHVhdGlvbicsIFNwbGluZUV2YWx1YXRpb24gKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNwbGluZUV2YWx1YXRpb247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsR0FBRyxNQUFNLHdCQUF3QjtBQUN4QyxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCOztBQUVuRDtBQUNBLE1BQU1DLFNBQVMsR0FBR0YsR0FBRyxDQUFDRSxTQUFTOztBQUUvQjtBQUNBO0FBQ0EsTUFBTUMsR0FBRyxHQUFHQSxDQUFFQyxNQUFNLEVBQUVDLEVBQUUsRUFBRUMsQ0FBQyxLQUFNO0VBQy9CLE1BQU1DLENBQUMsR0FBR0gsTUFBTSxDQUFDRyxDQUFDO0VBQ2xCLE1BQU1DLEVBQUUsR0FBR0osTUFBTSxDQUFDSSxFQUFFO0VBQ3BCLE1BQU1DLEVBQUUsR0FBR0wsTUFBTSxDQUFDSyxFQUFFO0VBQ3BCLE1BQU1DLEVBQUUsR0FBR04sTUFBTSxDQUFDTSxFQUFFO0VBQ3BCLE1BQU1DLEVBQUUsR0FBR1AsTUFBTSxDQUFDTyxFQUFFO0VBQ3BCLE1BQU1DLENBQUMsR0FBS0Ys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