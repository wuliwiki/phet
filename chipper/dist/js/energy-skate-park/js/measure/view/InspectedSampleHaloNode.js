// Copyright 2019-2022, University of Colorado Boulder

/**
 * A circle that becomes visible and is positioned under the inspected skater sample to indicate
 * that the user is inspecting that point.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import { Circle } from '../../../../scenery/js/imports.js';
import EnergySkateParkColorScheme from '../../common/view/EnergySkateParkColorScheme.js';
import energySkatePark from '../../energySkatePark.js';

// constants
const HALO_RADIUS = 9;
class InspectedSampleHaloNode extends Circle {
  /**
   * @param {ObservableArrayDef.<EnergySkateParkDataSample>} dataSamples
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(dataSamples, modelViewTransform) {
    super(HALO_RADIUS, {
      fill: EnergySkateParkColorScheme.haloFill,
      // not visible until a EnergySkateParkDataSample becomes inspected
      visible: false
    });

    // Whenever a new sample is added, adds a listener to make the halo visible when a sample
    // is inspected and puts it in the correct position. Removes the listeners on item removal
    // for memory management
    const sampleAddedListener = addedSample => {
      // handles visibility and positioning
      const inspectedListener = inspected => {
        this.visible = inspected;
        if (inspected) {
          this.visible = true;
          this.center = modelViewTransform.modelToViewPosition(addedSample.position);
        }
      };

      // linked lazily, we don't want to change visibility when a new sample is added
      addedSample.inspectedProperty.lazyLink(inspectedListener);

      // handles memory management
      const sampleRemovedListener = removedSample => {
        if (addedSample === removedSample) {
          // if inspected sample is being removed, halo should become invisible
          if (removedSample.inspectedProperty.get()) {
            this.visible = false;
          }
          removedSample.inspectedProperty.unlink(inspectedListener);
          dataSamples.removeItemRemovedListener(sampleRemovedListener);
        }
      };
      dataSamples.addItemRemovedListener(sampleRemovedListener);
    };
    dataSamples.addItemAddedListener(sampleAddedListener);
  }
}
energySkatePark.register('InspectedSampleHaloNode', InspectedSampleHaloNode);
export default InspectedSampleHaloNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaXJjbGUiLCJFbmVyZ3lTa2F0ZVBhcmtDb2xvclNjaGVtZSIsImVuZXJneVNrYXRlUGFyayIsIkhBTE9fUkFESVVTIiwiSW5zcGVjdGVkU2FtcGxlSGFsb05vZGUiLCJjb25zdHJ1Y3RvciIsImRhdGFTYW1wbGVzIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiZmlsbCIsImhhbG9GaWxsIiwidmlzaWJsZSIsInNhbXBsZUFkZGVkTGlzdGVuZXIiLCJhZGRlZFNhbXBsZSIsImluc3BlY3RlZExpc3RlbmVyIiwiaW5zcGVjdGVkIiwiY2VudGVyIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsInBvc2l0aW9uIiwiaW5zcGVjdGVkUHJvcGVydHkiLCJsYXp5TGluayIsInNhbXBsZVJlbW92ZWRMaXN0ZW5lciIsInJlbW92ZWRTYW1wbGUiLCJnZXQiLCJ1bmxpbmsiLCJyZW1vdmVJdGVtUmVtb3ZlZExpc3RlbmVyIiwiYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciIsImFkZEl0ZW1BZGRlZExpc3RlbmVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnNwZWN0ZWRTYW1wbGVIYWxvTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGNpcmNsZSB0aGF0IGJlY29tZXMgdmlzaWJsZSBhbmQgaXMgcG9zaXRpb25lZCB1bmRlciB0aGUgaW5zcGVjdGVkIHNrYXRlciBzYW1wbGUgdG8gaW5kaWNhdGVcclxuICogdGhhdCB0aGUgdXNlciBpcyBpbnNwZWN0aW5nIHRoYXQgcG9pbnQuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENpcmNsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lTa2F0ZVBhcmtDb2xvclNjaGVtZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9FbmVyZ3lTa2F0ZVBhcmtDb2xvclNjaGVtZS5qcyc7XHJcbmltcG9ydCBlbmVyZ3lTa2F0ZVBhcmsgZnJvbSAnLi4vLi4vZW5lcmd5U2thdGVQYXJrLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBIQUxPX1JBRElVUyA9IDk7XHJcblxyXG5jbGFzcyBJbnNwZWN0ZWRTYW1wbGVIYWxvTm9kZSBleHRlbmRzIENpcmNsZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JzZXJ2YWJsZUFycmF5RGVmLjxFbmVyZ3lTa2F0ZVBhcmtEYXRhU2FtcGxlPn0gZGF0YVNhbXBsZXNcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBkYXRhU2FtcGxlcywgbW9kZWxWaWV3VHJhbnNmb3JtICkge1xyXG4gICAgc3VwZXIoIEhBTE9fUkFESVVTLCB7XHJcbiAgICAgIGZpbGw6IEVuZXJneVNrYXRlUGFya0NvbG9yU2NoZW1lLmhhbG9GaWxsLFxyXG5cclxuICAgICAgLy8gbm90IHZpc2libGUgdW50aWwgYSBFbmVyZ3lTa2F0ZVBhcmtEYXRhU2FtcGxlIGJlY29tZXMgaW5zcGVjdGVkXHJcbiAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gV2hlbmV2ZXIgYSBuZXcgc2FtcGxlIGlzIGFkZGVkLCBhZGRzIGEgbGlzdGVuZXIgdG8gbWFrZSB0aGUgaGFsbyB2aXNpYmxlIHdoZW4gYSBzYW1wbGVcclxuICAgIC8vIGlzIGluc3BlY3RlZCBhbmQgcHV0cyBpdCBpbiB0aGUgY29ycmVjdCBwb3NpdGlvbi4gUmVtb3ZlcyB0aGUgbGlzdGVuZXJzIG9uIGl0ZW0gcmVtb3ZhbFxyXG4gICAgLy8gZm9yIG1lbW9yeSBtYW5hZ2VtZW50XHJcbiAgICBjb25zdCBzYW1wbGVBZGRlZExpc3RlbmVyID0gYWRkZWRTYW1wbGUgPT4ge1xyXG5cclxuICAgICAgLy8gaGFuZGxlcyB2aXNpYmlsaXR5IGFuZCBwb3NpdGlvbmluZ1xyXG4gICAgICBjb25zdCBpbnNwZWN0ZWRMaXN0ZW5lciA9IGluc3BlY3RlZCA9PiB7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlID0gaW5zcGVjdGVkO1xyXG4gICAgICAgIGlmICggaW5zcGVjdGVkICkge1xyXG4gICAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMuY2VudGVyID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGFkZGVkU2FtcGxlLnBvc2l0aW9uICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gbGlua2VkIGxhemlseSwgd2UgZG9uJ3Qgd2FudCB0byBjaGFuZ2UgdmlzaWJpbGl0eSB3aGVuIGEgbmV3IHNhbXBsZSBpcyBhZGRlZFxyXG4gICAgICBhZGRlZFNhbXBsZS5pbnNwZWN0ZWRQcm9wZXJ0eS5sYXp5TGluayggaW5zcGVjdGVkTGlzdGVuZXIgKTtcclxuXHJcbiAgICAgIC8vIGhhbmRsZXMgbWVtb3J5IG1hbmFnZW1lbnRcclxuICAgICAgY29uc3Qgc2FtcGxlUmVtb3ZlZExpc3RlbmVyID0gcmVtb3ZlZFNhbXBsZSA9PiB7XHJcbiAgICAgICAgaWYgKCBhZGRlZFNhbXBsZSA9PT0gcmVtb3ZlZFNhbXBsZSApIHtcclxuXHJcbiAgICAgICAgICAvLyBpZiBpbnNwZWN0ZWQgc2FtcGxlIGlzIGJlaW5nIHJlbW92ZWQsIGhhbG8gc2hvdWxkIGJlY29tZSBpbnZpc2libGVcclxuICAgICAgICAgIGlmICggcmVtb3ZlZFNhbXBsZS5pbnNwZWN0ZWRQcm9wZXJ0eS5nZXQoKSApIHtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmVtb3ZlZFNhbXBsZS5pbnNwZWN0ZWRQcm9wZXJ0eS51bmxpbmsoIGluc3BlY3RlZExpc3RlbmVyICk7XHJcbiAgICAgICAgICBkYXRhU2FtcGxlcy5yZW1vdmVJdGVtUmVtb3ZlZExpc3RlbmVyKCBzYW1wbGVSZW1vdmVkTGlzdGVuZXIgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIGRhdGFTYW1wbGVzLmFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIoIHNhbXBsZVJlbW92ZWRMaXN0ZW5lciApO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRhU2FtcGxlcy5hZGRJdGVtQWRkZWRMaXN0ZW5lciggc2FtcGxlQWRkZWRMaXN0ZW5lciApO1xyXG4gIH1cclxufVxyXG5cclxuZW5lcmd5U2thdGVQYXJrLnJlZ2lzdGVyKCAnSW5zcGVjdGVkU2FtcGxlSGFsb05vZGUnLCBJbnNwZWN0ZWRTYW1wbGVIYWxvTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBJbnNwZWN0ZWRTYW1wbGVIYWxvTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxNQUFNLFFBQVEsbUNBQW1DO0FBQzFELE9BQU9DLDBCQUEwQixNQUFNLGlEQUFpRDtBQUN4RixPQUFPQyxlQUFlLE1BQU0sMEJBQTBCOztBQUV0RDtBQUNBLE1BQU1DLFdBQVcsR0FBRyxDQUFDO0FBRXJCLE1BQU1DLHVCQUF1QixTQUFTSixNQUFNLENBQUM7RUFFM0M7QUFDRjtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsV0FBVyxFQUFFQyxrQkFBa0IsRUFBRztJQUM3QyxLQUFLLENBQUVKLFdBQVcsRUFBRTtNQUNsQkssSUFBSSxFQUFFUCwwQkFBMEIsQ0FBQ1EsUUFBUTtNQUV6QztNQUNBQyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUM7O0lBRUg7SUFDQTtJQUNBO0lBQ0EsTUFBTUMsbUJBQW1CLEdBQUdDLFdBQVcsSUFBSTtNQUV6QztNQUNBLE1BQU1DLGlCQUFpQixHQUFHQyxTQUFTLElBQUk7UUFDckMsSUFBSSxDQUFDSixPQUFPLEdBQUdJLFNBQVM7UUFDeEIsSUFBS0EsU0FBUyxFQUFHO1VBQ2YsSUFBSSxDQUFDSixPQUFPLEdBQUcsSUFBSTtVQUNuQixJQUFJLENBQUNLLE1BQU0sR0FBR1Isa0JBQWtCLENBQUNTLG1CQUFtQixDQUFFSixXQUFXLENBQUNLLFFBQVMsQ0FBQztRQUM5RTtNQUNGLENBQUM7O01BRUQ7TUFDQUwsV0FBVyxDQUFDTSxpQkFBaUIsQ0FBQ0MsUUFBUSxDQUFFTixpQkFBa0IsQ0FBQzs7TUFFM0Q7TUFDQSxNQUFNTyxxQkFBcUIsR0FBR0MsYUFBYSxJQUFJO1FBQzdDLElBQUtULFdBQVcsS0FBS1MsYUFBYSxFQUFHO1VBRW5DO1VBQ0EsSUFBS0EsYUFBYSxDQUFDSCxpQkFBaUIsQ0FBQ0ksR0FBRyxDQUFDLENBQUMsRUFBRztZQUMzQyxJQUFJLENBQUNaLE9BQU8sR0FBRyxLQUFLO1VBQ3RCO1VBRUFXLGFBQWEsQ0FBQ0gsaUJBQWlCLENBQUNLLE1BQU0sQ0FBRVYsaUJBQWtCLENBQUM7VUFDM0RQLFdBQVcsQ0FBQ2tCLHlCQUF5QixDQUFFSixxQkFBc0IsQ0FBQztRQUNoRTtNQUNGLENBQUM7TUFDRGQsV0FBVyxDQUFDbUIsc0JBQXNCLENBQUVMLHFCQUFzQixDQUFDO0lBQzdELENBQUM7SUFFRGQsV0FBVyxDQUFDb0Isb0JBQW9CLENBQUVmLG1CQUFvQixDQUFDO0VBQ3pEO0FBQ0Y7QUFFQVQsZUFBZSxDQUFDeUIsUUFBUSxDQUFFLHlCQUF5QixFQUFFdkIsdUJBQXdCLENBQUM7QUFDOUUsZUFBZUEsdUJBQXVCIn0=