// Copyright 2018-2022, University of Colorado Boulder

/**
 * Model for the "Measure" screen of this sim. The measure screen allows the user to inspect physical values
 * of the skater through time.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import EnergySkateParkFullTrackSetModel from '../../common/model/EnergySkateParkFullTrackSetModel.js';
import energySkatePark from '../../energySkatePark.js';
class MeasureModel extends EnergySkateParkFullTrackSetModel {
  /**
   * @param {EnergySkateParkPreferencesModel} preferencesModel
   * @param {Tandem} tandem
   */
  constructor(preferencesModel, tandem) {
    super(preferencesModel, tandem, {
      tracksConfigurable: true
    });

    // @public - the position of the sensor, in model coordinates (meters)
    this.sensorProbePositionProperty = new Vector2Property(new Vector2(-4, 1.5));

    // @public - the position of the sensor body in model coordinates, set later because it will be relative to other
    // panels in the view, and this similarly should not be reset on reset(). This is meant to be the origin of the
    // body (top left)
    this.sensorBodyPositionProperty = new Vector2Property(new Vector2(0, 0));

    // the speed value is visible on the speedometer for the MeasureModel
    this.speedValueVisibleProperty.set(true);

    // when the reference height changes, update energies for all skater samples
    this.skater.referenceHeightProperty.link(referenceHeight => {
      for (let i = 0; i < this.dataSamples.length; i++) {
        this.dataSamples.get(i).setNewReferenceHeight(referenceHeight);
      }
    });

    // Don't save any EnergySkateParkDataSamples while control points are being dragged. This can be done during construction
    // because MeasureModel tracks are static and no new tracks are introduced. For the same reason disposal
    // of these listeners is not necessary.
    this.tracks.forEach(track => {
      track.controlPointDraggingProperty.link(anyPointDragging => {
        this.preventSampleSave = anyPointDragging;
      });
    });

    // attach listeners that clear skater path when Properties like direction and dragging change
    this.attachPathRemovalListeners();
  }

  /**
   * @public
   */
  reset() {
    super.reset();
    this.sensorProbePositionProperty.reset();
  }
}
energySkatePark.register('MeasureModel', MeasureModel);
export default MeasureModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwiRW5lcmd5U2thdGVQYXJrRnVsbFRyYWNrU2V0TW9kZWwiLCJlbmVyZ3lTa2F0ZVBhcmsiLCJNZWFzdXJlTW9kZWwiLCJjb25zdHJ1Y3RvciIsInByZWZlcmVuY2VzTW9kZWwiLCJ0YW5kZW0iLCJ0cmFja3NDb25maWd1cmFibGUiLCJzZW5zb3JQcm9iZVBvc2l0aW9uUHJvcGVydHkiLCJzZW5zb3JCb2R5UG9zaXRpb25Qcm9wZXJ0eSIsInNwZWVkVmFsdWVWaXNpYmxlUHJvcGVydHkiLCJzZXQiLCJza2F0ZXIiLCJyZWZlcmVuY2VIZWlnaHRQcm9wZXJ0eSIsImxpbmsiLCJyZWZlcmVuY2VIZWlnaHQiLCJpIiwiZGF0YVNhbXBsZXMiLCJsZW5ndGgiLCJnZXQiLCJzZXROZXdSZWZlcmVuY2VIZWlnaHQiLCJ0cmFja3MiLCJmb3JFYWNoIiwidHJhY2siLCJjb250cm9sUG9pbnREcmFnZ2luZ1Byb3BlcnR5IiwiYW55UG9pbnREcmFnZ2luZyIsInByZXZlbnRTYW1wbGVTYXZlIiwiYXR0YWNoUGF0aFJlbW92YWxMaXN0ZW5lcnMiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWVhc3VyZU1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciB0aGUgXCJNZWFzdXJlXCIgc2NyZWVuIG9mIHRoaXMgc2ltLiBUaGUgbWVhc3VyZSBzY3JlZW4gYWxsb3dzIHRoZSB1c2VyIHRvIGluc3BlY3QgcGh5c2ljYWwgdmFsdWVzXHJcbiAqIG9mIHRoZSBza2F0ZXIgdGhyb3VnaCB0aW1lLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbmVyZ3lTa2F0ZVBhcmtGdWxsVHJhY2tTZXRNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvRW5lcmd5U2thdGVQYXJrRnVsbFRyYWNrU2V0TW9kZWwuanMnO1xyXG5pbXBvcnQgZW5lcmd5U2thdGVQYXJrIGZyb20gJy4uLy4uL2VuZXJneVNrYXRlUGFyay5qcyc7XHJcblxyXG5jbGFzcyBNZWFzdXJlTW9kZWwgZXh0ZW5kcyBFbmVyZ3lTa2F0ZVBhcmtGdWxsVHJhY2tTZXRNb2RlbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RW5lcmd5U2thdGVQYXJrUHJlZmVyZW5jZXNNb2RlbH0gcHJlZmVyZW5jZXNNb2RlbFxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggcHJlZmVyZW5jZXNNb2RlbCwgdGFuZGVtICkge1xyXG4gICAgc3VwZXIoIHByZWZlcmVuY2VzTW9kZWwsIHRhbmRlbSwge1xyXG4gICAgICB0cmFja3NDb25maWd1cmFibGU6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIC0gdGhlIHBvc2l0aW9uIG9mIHRoZSBzZW5zb3IsIGluIG1vZGVsIGNvb3JkaW5hdGVzIChtZXRlcnMpXHJcbiAgICB0aGlzLnNlbnNvclByb2JlUG9zaXRpb25Qcm9wZXJ0eSA9IG5ldyBWZWN0b3IyUHJvcGVydHkoIG5ldyBWZWN0b3IyKCAtNCwgMS41ICkgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIC0gdGhlIHBvc2l0aW9uIG9mIHRoZSBzZW5zb3IgYm9keSBpbiBtb2RlbCBjb29yZGluYXRlcywgc2V0IGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSByZWxhdGl2ZSB0byBvdGhlclxyXG4gICAgLy8gcGFuZWxzIGluIHRoZSB2aWV3LCBhbmQgdGhpcyBzaW1pbGFybHkgc2hvdWxkIG5vdCBiZSByZXNldCBvbiByZXNldCgpLiBUaGlzIGlzIG1lYW50IHRvIGJlIHRoZSBvcmlnaW4gb2YgdGhlXHJcbiAgICAvLyBib2R5ICh0b3AgbGVmdClcclxuICAgIHRoaXMuc2Vuc29yQm9keVBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBuZXcgVmVjdG9yMiggMCwgMCApICk7XHJcblxyXG4gICAgLy8gdGhlIHNwZWVkIHZhbHVlIGlzIHZpc2libGUgb24gdGhlIHNwZWVkb21ldGVyIGZvciB0aGUgTWVhc3VyZU1vZGVsXHJcbiAgICB0aGlzLnNwZWVkVmFsdWVWaXNpYmxlUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcblxyXG4gICAgLy8gd2hlbiB0aGUgcmVmZXJlbmNlIGhlaWdodCBjaGFuZ2VzLCB1cGRhdGUgZW5lcmdpZXMgZm9yIGFsbCBza2F0ZXIgc2FtcGxlc1xyXG4gICAgdGhpcy5za2F0ZXIucmVmZXJlbmNlSGVpZ2h0UHJvcGVydHkubGluayggcmVmZXJlbmNlSGVpZ2h0ID0+IHtcclxuICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhU2FtcGxlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICB0aGlzLmRhdGFTYW1wbGVzLmdldCggaSApLnNldE5ld1JlZmVyZW5jZUhlaWdodCggcmVmZXJlbmNlSGVpZ2h0ICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBEb24ndCBzYXZlIGFueSBFbmVyZ3lTa2F0ZVBhcmtEYXRhU2FtcGxlcyB3aGlsZSBjb250cm9sIHBvaW50cyBhcmUgYmVpbmcgZHJhZ2dlZC4gVGhpcyBjYW4gYmUgZG9uZSBkdXJpbmcgY29uc3RydWN0aW9uXHJcbiAgICAvLyBiZWNhdXNlIE1lYXN1cmVNb2RlbCB0cmFja3MgYXJlIHN0YXRpYyBhbmQgbm8gbmV3IHRyYWNrcyBhcmUgaW50cm9kdWNlZC4gRm9yIHRoZSBzYW1lIHJlYXNvbiBkaXNwb3NhbFxyXG4gICAgLy8gb2YgdGhlc2UgbGlzdGVuZXJzIGlzIG5vdCBuZWNlc3NhcnkuXHJcbiAgICB0aGlzLnRyYWNrcy5mb3JFYWNoKCB0cmFjayA9PiB7XHJcbiAgICAgIHRyYWNrLmNvbnRyb2xQb2ludERyYWdnaW5nUHJvcGVydHkubGluayggYW55UG9pbnREcmFnZ2luZyA9PiB7XHJcbiAgICAgICAgdGhpcy5wcmV2ZW50U2FtcGxlU2F2ZSA9IGFueVBvaW50RHJhZ2dpbmc7XHJcbiAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBhdHRhY2ggbGlzdGVuZXJzIHRoYXQgY2xlYXIgc2thdGVyIHBhdGggd2hlbiBQcm9wZXJ0aWVzIGxpa2UgZGlyZWN0aW9uIGFuZCBkcmFnZ2luZyBjaGFuZ2VcclxuICAgIHRoaXMuYXR0YWNoUGF0aFJlbW92YWxMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcblxyXG4gICAgdGhpcy5zZW5zb3JQcm9iZVBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneVNrYXRlUGFyay5yZWdpc3RlciggJ01lYXN1cmVNb2RlbCcsIE1lYXN1cmVNb2RlbCApO1xyXG5leHBvcnQgZGVmYXVsdCBNZWFzdXJlTW9kZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxlQUFlLE1BQU0sdUNBQXVDO0FBQ25FLE9BQU9DLGdDQUFnQyxNQUFNLHdEQUF3RDtBQUNyRyxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBRXRELE1BQU1DLFlBQVksU0FBU0YsZ0NBQWdDLENBQUM7RUFFMUQ7QUFDRjtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsZ0JBQWdCLEVBQUVDLE1BQU0sRUFBRztJQUN0QyxLQUFLLENBQUVELGdCQUFnQixFQUFFQyxNQUFNLEVBQUU7TUFDL0JDLGtCQUFrQixFQUFFO0lBQ3RCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0MsMkJBQTJCLEdBQUcsSUFBSVIsZUFBZSxDQUFFLElBQUlELE9BQU8sQ0FBRSxDQUFDLENBQUMsRUFBRSxHQUFJLENBQUUsQ0FBQzs7SUFFaEY7SUFDQTtJQUNBO0lBQ0EsSUFBSSxDQUFDVSwwQkFBMEIsR0FBRyxJQUFJVCxlQUFlLENBQUUsSUFBSUQsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUUsQ0FBQzs7SUFFNUU7SUFDQSxJQUFJLENBQUNXLHlCQUF5QixDQUFDQyxHQUFHLENBQUUsSUFBSyxDQUFDOztJQUUxQztJQUNBLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyx1QkFBdUIsQ0FBQ0MsSUFBSSxDQUFFQyxlQUFlLElBQUk7TUFDM0QsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDQyxXQUFXLENBQUNDLE1BQU0sRUFBRUYsQ0FBQyxFQUFFLEVBQUc7UUFDbEQsSUFBSSxDQUFDQyxXQUFXLENBQUNFLEdBQUcsQ0FBRUgsQ0FBRSxDQUFDLENBQUNJLHFCQUFxQixDQUFFTCxlQUFnQixDQUFDO01BQ3BFO0lBQ0YsQ0FBRSxDQUFDOztJQUVIO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ00sTUFBTSxDQUFDQyxPQUFPLENBQUVDLEtBQUssSUFBSTtNQUM1QkEsS0FBSyxDQUFDQyw0QkFBNEIsQ0FBQ1YsSUFBSSxDQUFFVyxnQkFBZ0IsSUFBSTtRQUMzRCxJQUFJLENBQUNDLGlCQUFpQixHQUFHRCxnQkFBZ0I7TUFDM0MsQ0FBRSxDQUFDO0lBQ0wsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDRSwwQkFBMEIsQ0FBQyxDQUFDO0VBQ25DOztFQUVBO0FBQ0Y7QUFDQTtFQUNFQyxLQUFLQSxDQUFBLEVBQUc7SUFDTixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBRWIsSUFBSSxDQUFDcEIsMkJBQTJCLENBQUNvQixLQUFLLENBQUMsQ0FBQztFQUMxQztBQUNGO0FBRUExQixlQUFlLENBQUMyQixRQUFRLENBQUUsY0FBYyxFQUFFMUIsWUFBYSxDQUFDO0FBQ3hELGVBQWVBLFlBQVkifQ==