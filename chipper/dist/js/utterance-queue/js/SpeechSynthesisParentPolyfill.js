// Copyright 2022, University of Colorado Boulder

/**
 * A polyfill for SpeechSynthesis that tries to pull a working implementation from a parent window. Assumes that
 * this code is running in an iframe hosted by a parent window and that the parent has a working implementation
 * of SpeechSynthesis. In particular, this is used in fenster as a way to get SpeechSynthesis in an Android WebView
 * where SpeechSynthesis is not currently supported. See fenster for more information about an example use case.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import utteranceQueueNamespace from './utteranceQueueNamespace.js';
const SpeechSynthesisParentPolyfill = {
  /**
   * Initialize the polyfill, setting objects related to SpeechSynthesis on the window. The implementation of
   * SpeechSynthesisPolyfill assumes that the simulation is running in a child iframe under a parent window
   * that implements SpeechSynthesis. So we grab the implementation from the parent and set it to this window.
   */
  initialize() {
    if (window.speechSynthesis || window.SpeechSynthesis || window.SpeechSynthesisUtterance) {
      throw new Error('SpeechSynthesis is supported here, the polyfill should not overwrite it');
    }
    assert && assert(window.parent, 'This polyfill requires a parent frame implementation of SpeechSynthesis.');

    // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
    window.SpeechSynthesis = window.parent.SpeechSynthesis;

    // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
    window.speechSynthesis = new window.parent.SpeechSynthesis();

    // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
    window.SpeechSynthesisUtterance = window.parent.SpeechSynthesisUtterance;
  }
};
utteranceQueueNamespace.register('SpeechSynthesisParentPolyfill', SpeechSynthesisParentPolyfill);
export default SpeechSynthesisParentPolyfill;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSIsIlNwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsIiwiaW5pdGlhbGl6ZSIsIndpbmRvdyIsInNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSIsIkVycm9yIiwiYXNzZXJ0IiwicGFyZW50IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTcGVlY2hTeW50aGVzaXNQYXJlbnRQb2x5ZmlsbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBwb2x5ZmlsbCBmb3IgU3BlZWNoU3ludGhlc2lzIHRoYXQgdHJpZXMgdG8gcHVsbCBhIHdvcmtpbmcgaW1wbGVtZW50YXRpb24gZnJvbSBhIHBhcmVudCB3aW5kb3cuIEFzc3VtZXMgdGhhdFxyXG4gKiB0aGlzIGNvZGUgaXMgcnVubmluZyBpbiBhbiBpZnJhbWUgaG9zdGVkIGJ5IGEgcGFyZW50IHdpbmRvdyBhbmQgdGhhdCB0aGUgcGFyZW50IGhhcyBhIHdvcmtpbmcgaW1wbGVtZW50YXRpb25cclxuICogb2YgU3BlZWNoU3ludGhlc2lzLiBJbiBwYXJ0aWN1bGFyLCB0aGlzIGlzIHVzZWQgaW4gZmVuc3RlciBhcyBhIHdheSB0byBnZXQgU3BlZWNoU3ludGhlc2lzIGluIGFuIEFuZHJvaWQgV2ViVmlld1xyXG4gKiB3aGVyZSBTcGVlY2hTeW50aGVzaXMgaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuIFNlZSBmZW5zdGVyIGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGFuIGV4YW1wbGUgdXNlIGNhc2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCB1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSBmcm9tICcuL3V0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlLmpzJztcclxuXHJcbmNvbnN0IFNwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsID0ge1xyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBwb2x5ZmlsbCwgc2V0dGluZyBvYmplY3RzIHJlbGF0ZWQgdG8gU3BlZWNoU3ludGhlc2lzIG9uIHRoZSB3aW5kb3cuIFRoZSBpbXBsZW1lbnRhdGlvbiBvZlxyXG4gICAqIFNwZWVjaFN5bnRoZXNpc1BvbHlmaWxsIGFzc3VtZXMgdGhhdCB0aGUgc2ltdWxhdGlvbiBpcyBydW5uaW5nIGluIGEgY2hpbGQgaWZyYW1lIHVuZGVyIGEgcGFyZW50IHdpbmRvd1xyXG4gICAqIHRoYXQgaW1wbGVtZW50cyBTcGVlY2hTeW50aGVzaXMuIFNvIHdlIGdyYWIgdGhlIGltcGxlbWVudGF0aW9uIGZyb20gdGhlIHBhcmVudCBhbmQgc2V0IGl0IHRvIHRoaXMgd2luZG93LlxyXG4gICAqL1xyXG4gIGluaXRpYWxpemUoKTogdm9pZCB7XHJcbiAgICBpZiAoIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMgfHwgd2luZG93LlNwZWVjaFN5bnRoZXNpcyB8fCB3aW5kb3cuU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoICdTcGVlY2hTeW50aGVzaXMgaXMgc3VwcG9ydGVkIGhlcmUsIHRoZSBwb2x5ZmlsbCBzaG91bGQgbm90IG92ZXJ3cml0ZSBpdCcgKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB3aW5kb3cucGFyZW50LCAnVGhpcyBwb2x5ZmlsbCByZXF1aXJlcyBhIHBhcmVudCBmcmFtZSBpbXBsZW1lbnRhdGlvbiBvZiBTcGVlY2hTeW50aGVzaXMuJyApO1xyXG5cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBWZXJ5IGhhY2t5LCB0aGlzIHByb3RvdHlwZSBzb2x1dGlvbiBpcyBub3QgZ2V0dGluZyB3b3JrIGFueW1vcmUuIE5vIG5lZWQgZm9yIGJldHRlciBzb2x1dGlvbi5cclxuICAgIHdpbmRvdy5TcGVlY2hTeW50aGVzaXMgPSB3aW5kb3cucGFyZW50LlNwZWVjaFN5bnRoZXNpcztcclxuXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVmVyeSBoYWNreSwgdGhpcyBwcm90b3R5cGUgc29sdXRpb24gaXMgbm90IGdldHRpbmcgd29yayBhbnltb3JlLiBObyBuZWVkIGZvciBiZXR0ZXIgc29sdXRpb24uXHJcbiAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzID0gbmV3IHdpbmRvdy5wYXJlbnQuU3BlZWNoU3ludGhlc2lzKCk7XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFZlcnkgaGFja3ksIHRoaXMgcHJvdG90eXBlIHNvbHV0aW9uIGlzIG5vdCBnZXR0aW5nIHdvcmsgYW55bW9yZS4gTm8gbmVlZCBmb3IgYmV0dGVyIHNvbHV0aW9uLlxyXG4gICAgd2luZG93LlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSA9IHdpbmRvdy5wYXJlbnQuU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlO1xyXG4gIH1cclxufTtcclxuXHJcbnV0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlLnJlZ2lzdGVyKCAnU3BlZWNoU3ludGhlc2lzUGFyZW50UG9seWZpbGwnLCBTcGVlY2hTeW50aGVzaXNQYXJlbnRQb2x5ZmlsbCApO1xyXG5leHBvcnQgZGVmYXVsdCBTcGVlY2hTeW50aGVzaXNQYXJlbnRQb2x5ZmlsbDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHVCQUF1QixNQUFNLDhCQUE4QjtBQUVsRSxNQUFNQyw2QkFBNkIsR0FBRztFQUVwQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFVBQVVBLENBQUEsRUFBUztJQUNqQixJQUFLQyxNQUFNLENBQUNDLGVBQWUsSUFBSUQsTUFBTSxDQUFDRSxlQUFlLElBQUlGLE1BQU0sQ0FBQ0csd0JBQXdCLEVBQUc7TUFDekYsTUFBTSxJQUFJQyxLQUFLLENBQUUseUVBQTBFLENBQUM7SUFDOUY7SUFFQUMsTUFBTSxJQUFJQSxNQUFNLENBQUVMLE1BQU0sQ0FBQ00sTUFBTSxFQUFFLDBFQUEyRSxDQUFDOztJQUU3RztJQUNBTixNQUFNLENBQUNFLGVBQWUsR0FBR0YsTUFBTSxDQUFDTSxNQUFNLENBQUNKLGVBQWU7O0lBRXREO0lBQ0FGLE1BQU0sQ0FBQ0MsZUFBZSxHQUFHLElBQUlELE1BQU0sQ0FBQ00sTUFBTSxDQUFDSixlQUFlLENBQUMsQ0FBQzs7SUFFNUQ7SUFDQUYsTUFBTSxDQUFDRyx3QkFBd0IsR0FBR0gsTUFBTSxDQUFDTSxNQUFNLENBQUNILHdCQUF3QjtFQUMxRTtBQUNGLENBQUM7QUFFRE4sdUJBQXVCLENBQUNVLFFBQVEsQ0FBRSwrQkFBK0IsRUFBRVQsNkJBQThCLENBQUM7QUFDbEcsZUFBZUEsNkJBQTZCIn0=