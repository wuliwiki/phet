// Copyright 2019-2022, University of Colorado Boulder

/**
 * An utterance that should generally be used for announcing a change in value after interacting with a slider
 * or number type input. Often, changes to a value are announced with aria-valuetext, but additional information about
 * the change is conveyed by a supplemental Utterance. The delay ensures that VoiceOver and JAWS will announce the
 * alert after reading the aria-valuetext in full. See https://github.com/phetsims/scenery-phet/issues/491 and
 * https://github.com/phetsims/john-travoltage/issues/315 for testing notes.
 *
 * @author Jesse Greenberg
 */

import deprecationWarning from '../../phet-core/js/deprecationWarning.js';
import optionize from '../../phet-core/js/optionize.js';
import Utterance from './Utterance.js';
import utteranceQueueNamespace from './utteranceQueueNamespace.js';
class ValueChangeUtterance extends Utterance {
  constructor(providedOptions) {
    deprecationWarning('Please use AccessibleValueHander.a11yCreateContextResponseAlert(), see https://github.com/phetsims/sun/issues/685');
    const options = optionize()({
      // {number} - in ms, prevents VoiceOver from reading changes too frequently or interrupting the alert to read
      // aria-valuetext changes under typical user settings
      alertStableDelay: 1000
    }, providedOptions);
    super(options);
  }
}
utteranceQueueNamespace.register('ValueChangeUtterance', ValueChangeUtterance);
export default ValueChangeUtterance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXByZWNhdGlvbldhcm5pbmciLCJvcHRpb25pemUiLCJVdHRlcmFuY2UiLCJ1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSIsIlZhbHVlQ2hhbmdlVXR0ZXJhbmNlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYWxlcnRTdGFibGVEZWxheSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVmFsdWVDaGFuZ2VVdHRlcmFuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQW4gdXR0ZXJhbmNlIHRoYXQgc2hvdWxkIGdlbmVyYWxseSBiZSB1c2VkIGZvciBhbm5vdW5jaW5nIGEgY2hhbmdlIGluIHZhbHVlIGFmdGVyIGludGVyYWN0aW5nIHdpdGggYSBzbGlkZXJcclxuICogb3IgbnVtYmVyIHR5cGUgaW5wdXQuIE9mdGVuLCBjaGFuZ2VzIHRvIGEgdmFsdWUgYXJlIGFubm91bmNlZCB3aXRoIGFyaWEtdmFsdWV0ZXh0LCBidXQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dFxyXG4gKiB0aGUgY2hhbmdlIGlzIGNvbnZleWVkIGJ5IGEgc3VwcGxlbWVudGFsIFV0dGVyYW5jZS4gVGhlIGRlbGF5IGVuc3VyZXMgdGhhdCBWb2ljZU92ZXIgYW5kIEpBV1Mgd2lsbCBhbm5vdW5jZSB0aGVcclxuICogYWxlcnQgYWZ0ZXIgcmVhZGluZyB0aGUgYXJpYS12YWx1ZXRleHQgaW4gZnVsbC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5LXBoZXQvaXNzdWVzLzQ5MSBhbmRcclxuICogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaG4tdHJhdm9sdGFnZS9pc3N1ZXMvMzE1IGZvciB0ZXN0aW5nIG5vdGVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBkZXByZWNhdGlvbldhcm5pbmcgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL2RlcHJlY2F0aW9uV2FybmluZy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgVXR0ZXJhbmNlLCB7IFV0dGVyYW5jZU9wdGlvbnMgfSBmcm9tICcuL1V0dGVyYW5jZS5qcyc7XHJcbmltcG9ydCB1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSBmcm9tICcuL3V0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlLmpzJztcclxuXHJcbmV4cG9ydCB0eXBlIFZhbHVlQ2hhbmdlVXR0ZXJhbmNlT3B0aW9ucyA9IFV0dGVyYW5jZU9wdGlvbnM7XHJcblxyXG5jbGFzcyBWYWx1ZUNoYW5nZVV0dGVyYW5jZSBleHRlbmRzIFV0dGVyYW5jZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogVmFsdWVDaGFuZ2VVdHRlcmFuY2VPcHRpb25zICkge1xyXG4gICAgZGVwcmVjYXRpb25XYXJuaW5nKCAnUGxlYXNlIHVzZSBBY2Nlc3NpYmxlVmFsdWVIYW5kZXIuYTExeUNyZWF0ZUNvbnRleHRSZXNwb25zZUFsZXJ0KCksIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy82ODUnICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxWYWx1ZUNoYW5nZVV0dGVyYW5jZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMsIFV0dGVyYW5jZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIHtudW1iZXJ9IC0gaW4gbXMsIHByZXZlbnRzIFZvaWNlT3ZlciBmcm9tIHJlYWRpbmcgY2hhbmdlcyB0b28gZnJlcXVlbnRseSBvciBpbnRlcnJ1cHRpbmcgdGhlIGFsZXJ0IHRvIHJlYWRcclxuICAgICAgLy8gYXJpYS12YWx1ZXRleHQgY2hhbmdlcyB1bmRlciB0eXBpY2FsIHVzZXIgc2V0dGluZ3NcclxuICAgICAgYWxlcnRTdGFibGVEZWxheTogMTAwMFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnV0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlLnJlZ2lzdGVyKCAnVmFsdWVDaGFuZ2VVdHRlcmFuY2UnLCBWYWx1ZUNoYW5nZVV0dGVyYW5jZSApO1xyXG5leHBvcnQgZGVmYXVsdCBWYWx1ZUNoYW5nZVV0dGVyYW5jZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxrQkFBa0IsTUFBTSwwQ0FBMEM7QUFDekUsT0FBT0MsU0FBUyxNQUE0QixpQ0FBaUM7QUFDN0UsT0FBT0MsU0FBUyxNQUE0QixnQkFBZ0I7QUFDNUQsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBSWxFLE1BQU1DLG9CQUFvQixTQUFTRixTQUFTLENBQUM7RUFFcENHLFdBQVdBLENBQUVDLGVBQTZDLEVBQUc7SUFDbEVOLGtCQUFrQixDQUFFLG1IQUFvSCxDQUFDO0lBRXpJLE1BQU1PLE9BQU8sR0FBR04sU0FBUyxDQUFrRSxDQUFDLENBQUU7TUFFNUY7TUFDQTtNQUNBTyxnQkFBZ0IsRUFBRTtJQUNwQixDQUFDLEVBQUVGLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFQyxPQUFRLENBQUM7RUFDbEI7QUFDRjtBQUVBSix1QkFBdUIsQ0FBQ00sUUFBUSxDQUFFLHNCQUFzQixFQUFFTCxvQkFBcUIsQ0FBQztBQUNoRixlQUFlQSxvQkFBb0IifQ==