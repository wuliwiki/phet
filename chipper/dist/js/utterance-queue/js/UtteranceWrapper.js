// Copyright 2022, University of Colorado Boulder

/**
 * A type to wrap an Utterance while in the UtteranceQueue, see UtteranceQueue for implementation. Internal to
 * utterance-queue, should otherwise not need to be used.
 *
 * @author Jesse Greenberg
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import utteranceQueueNamespace from './utteranceQueueNamespace.js';
// One instance per entry in the UtteranceQueue.queue
class UtteranceWrapper {
  // In ms, how long this utterance has been in the queue. The
  // same Utterance can be in the queue more than once (for utterance looping or while the utterance stabilizes),
  // in this case the time will be since the first time the utterance was added to the queue.

  // in ms, how long this utterance has been "stable", which
  // is the amount of time since this utterance has been added to the utteranceQueue.
  // A reference to a listener on the Utterance priorityProperty while this Utterance
  // is being announced by the Announcer.
  constructor(utterance) {
    this.utterance = utterance;
    this.timeInQueue = 0;
    this.stableTime = 0;
    this.announcingUtterancePriorityListener = null;
  }

  /**
   * Reset variables that track instance variables related to time.
   */
  resetTimingVariables() {
    this.timeInQueue = 0;
    this.stableTime = 0;
  }
}
utteranceQueueNamespace.register('UtteranceWrapper', UtteranceWrapper);
export default UtteranceWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSIsIlV0dGVyYW5jZVdyYXBwZXIiLCJjb25zdHJ1Y3RvciIsInV0dGVyYW5jZSIsInRpbWVJblF1ZXVlIiwic3RhYmxlVGltZSIsImFubm91bmNpbmdVdHRlcmFuY2VQcmlvcml0eUxpc3RlbmVyIiwicmVzZXRUaW1pbmdWYXJpYWJsZXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlV0dGVyYW5jZVdyYXBwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgdHlwZSB0byB3cmFwIGFuIFV0dGVyYW5jZSB3aGlsZSBpbiB0aGUgVXR0ZXJhbmNlUXVldWUsIHNlZSBVdHRlcmFuY2VRdWV1ZSBmb3IgaW1wbGVtZW50YXRpb24uIEludGVybmFsIHRvXHJcbiAqIHV0dGVyYW5jZS1xdWV1ZSwgc2hvdWxkIG90aGVyd2lzZSBub3QgbmVlZCB0byBiZSB1c2VkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHV0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlIGZyb20gJy4vdXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UuanMnO1xyXG5pbXBvcnQgVXR0ZXJhbmNlIGZyb20gJy4vVXR0ZXJhbmNlLmpzJztcclxuXHJcbi8vIE9uZSBpbnN0YW5jZSBwZXIgZW50cnkgaW4gdGhlIFV0dGVyYW5jZVF1ZXVlLnF1ZXVlXHJcbmNsYXNzIFV0dGVyYW5jZVdyYXBwZXIge1xyXG5cclxuICAvLyBJbiBtcywgaG93IGxvbmcgdGhpcyB1dHRlcmFuY2UgaGFzIGJlZW4gaW4gdGhlIHF1ZXVlLiBUaGVcclxuICAvLyBzYW1lIFV0dGVyYW5jZSBjYW4gYmUgaW4gdGhlIHF1ZXVlIG1vcmUgdGhhbiBvbmNlIChmb3IgdXR0ZXJhbmNlIGxvb3Bpbmcgb3Igd2hpbGUgdGhlIHV0dGVyYW5jZSBzdGFiaWxpemVzKSxcclxuICAvLyBpbiB0aGlzIGNhc2UgdGhlIHRpbWUgd2lsbCBiZSBzaW5jZSB0aGUgZmlyc3QgdGltZSB0aGUgdXR0ZXJhbmNlIHdhcyBhZGRlZCB0byB0aGUgcXVldWUuXHJcbiAgcHVibGljIHRpbWVJblF1ZXVlOiBudW1iZXI7XHJcblxyXG4gIC8vIGluIG1zLCBob3cgbG9uZyB0aGlzIHV0dGVyYW5jZSBoYXMgYmVlbiBcInN0YWJsZVwiLCB3aGljaFxyXG4gIC8vIGlzIHRoZSBhbW91bnQgb2YgdGltZSBzaW5jZSB0aGlzIHV0dGVyYW5jZSBoYXMgYmVlbiBhZGRlZCB0byB0aGUgdXR0ZXJhbmNlUXVldWUuXHJcbiAgcHVibGljIHN0YWJsZVRpbWU6IG51bWJlcjtcclxuICBwdWJsaWMgdXR0ZXJhbmNlOiBVdHRlcmFuY2U7XHJcblxyXG4gIC8vIEEgcmVmZXJlbmNlIHRvIGEgbGlzdGVuZXIgb24gdGhlIFV0dGVyYW5jZSBwcmlvcml0eVByb3BlcnR5IHdoaWxlIHRoaXMgVXR0ZXJhbmNlXHJcbiAgLy8gaXMgYmVpbmcgYW5ub3VuY2VkIGJ5IHRoZSBBbm5vdW5jZXIuXHJcbiAgcHVibGljIGFubm91bmNpbmdVdHRlcmFuY2VQcmlvcml0eUxpc3RlbmVyOiAoICggcHJpb3JpdHk6IG51bWJlciApID0+IHZvaWQgKSB8IG51bGw7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdXR0ZXJhbmNlOiBVdHRlcmFuY2UgKSB7XHJcblxyXG4gICAgdGhpcy51dHRlcmFuY2UgPSB1dHRlcmFuY2U7XHJcblxyXG4gICAgdGhpcy50aW1lSW5RdWV1ZSA9IDA7XHJcblxyXG4gICAgdGhpcy5zdGFibGVUaW1lID0gMDtcclxuXHJcbiAgICB0aGlzLmFubm91bmNpbmdVdHRlcmFuY2VQcmlvcml0eUxpc3RlbmVyID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0IHZhcmlhYmxlcyB0aGF0IHRyYWNrIGluc3RhbmNlIHZhcmlhYmxlcyByZWxhdGVkIHRvIHRpbWUuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0VGltaW5nVmFyaWFibGVzKCk6IHZvaWQge1xyXG4gICAgdGhpcy50aW1lSW5RdWV1ZSA9IDA7XHJcbiAgICB0aGlzLnN0YWJsZVRpbWUgPSAwO1xyXG4gIH1cclxufVxyXG5cclxudXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UucmVnaXN0ZXIoICdVdHRlcmFuY2VXcmFwcGVyJywgVXR0ZXJhbmNlV3JhcHBlciApO1xyXG5leHBvcnQgZGVmYXVsdCBVdHRlcmFuY2VXcmFwcGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsdUJBQXVCLE1BQU0sOEJBQThCO0FBR2xFO0FBQ0EsTUFBTUMsZ0JBQWdCLENBQUM7RUFFckI7RUFDQTtFQUNBOztFQUdBO0VBQ0E7RUFJQTtFQUNBO0VBR09DLFdBQVdBLENBQUVDLFNBQW9CLEVBQUc7SUFFekMsSUFBSSxDQUFDQSxTQUFTLEdBQUdBLFNBQVM7SUFFMUIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsQ0FBQztJQUVwQixJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDO0lBRW5CLElBQUksQ0FBQ0MsbUNBQW1DLEdBQUcsSUFBSTtFQUNqRDs7RUFFQTtBQUNGO0FBQ0E7RUFDU0Msb0JBQW9CQSxDQUFBLEVBQVM7SUFDbEMsSUFBSSxDQUFDSCxXQUFXLEdBQUcsQ0FBQztJQUNwQixJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDO0VBQ3JCO0FBQ0Y7QUFFQUwsdUJBQXVCLENBQUNRLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRVAsZ0JBQWlCLENBQUM7QUFDeEUsZUFBZUEsZ0JBQWdCIn0=