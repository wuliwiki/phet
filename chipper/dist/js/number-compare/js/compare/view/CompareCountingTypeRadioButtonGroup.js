// Copyright 2021-2023, University of Colorado Boulder

/**
 * RectangularRadioButtonGroup for selecting the CompareCountingType on the 'Compare' screen.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Range from '../../../../dot/js/Range.js';
import { Color, Path } from '../../../../scenery/js/imports.js';
import eyeSlashSolidShape from '../../../../sherpa/js/fontawesome-5/eyeSlashSolidShape.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import CompareCountingType from '../model/CompareCountingType.js';
import BlockValuesNode from './BlockValuesNode.js';
import CompareNumberLineNode from './CompareNumberLineNode.js';
import numberCompare from '../../numberCompare.js';
// constants
const ICON_SIZE = 32; // the width and height of the icons used for the buttons, in screen coordinates
const BUTTON_MARGIN = 7; // in screen coordinates

// create a map from each CompareCountingType to a corresponding icon
const COUNTING_TYPE_TO_ICON = new Map();
COUNTING_TYPE_TO_ICON.set(CompareCountingType.BLOCKS, BlockValuesNode.getBlockValuesNode(1, 2));
COUNTING_TYPE_TO_ICON.set(CompareCountingType.NUMBER_LINE, CompareNumberLineNode.getNumberLineNode(20, new Range(0, 5), {
  includeLabels: false,
  minorLineWidth: 2,
  // empirically determined
  majorLineWidth: 4,
  // empirically determined
  minorTickMarkHalfLineLength: 11,
  // empirically determined
  majorTickMarkHalfLineLength: 32 // empirically determined
}));

COUNTING_TYPE_TO_ICON.set(CompareCountingType.NONE, new Path(eyeSlashSolidShape, {
  fill: Color.BLACK
}));
class CompareCountingTypeRadioButtonGroup extends RectangularRadioButtonGroup {
  constructor(countingTypeProperty) {
    // create an icon for each value of CompareCountingType
    const countingTypeRadioButtons = CompareCountingType.enumeration.values.map(countingType => {
      const iconNode = COUNTING_TYPE_TO_ICON.get(countingType);
      iconNode.maxWidth = ICON_SIZE;
      iconNode.maxHeight = ICON_SIZE;
      return {
        value: countingType,
        createNode: tandem => iconNode
      };
    });
    super(countingTypeProperty, countingTypeRadioButtons, {
      orientation: 'horizontal',
      radioButtonOptions: {
        baseColor: Color.WHITE,
        xMargin: BUTTON_MARGIN,
        yMargin: BUTTON_MARGIN
      }
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
numberCompare.register('CompareCountingTypeRadioButtonGroup', CompareCountingTypeRadioButtonGroup);
export default CompareCountingTypeRadioButtonGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIkNvbG9yIiwiUGF0aCIsImV5ZVNsYXNoU29saWRTaGFwZSIsIlJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCIsIkNvbXBhcmVDb3VudGluZ1R5cGUiLCJCbG9ja1ZhbHVlc05vZGUiLCJDb21wYXJlTnVtYmVyTGluZU5vZGUiLCJudW1iZXJDb21wYXJlIiwiSUNPTl9TSVpFIiwiQlVUVE9OX01BUkdJTiIsIkNPVU5USU5HX1RZUEVfVE9fSUNPTiIsIk1hcCIsInNldCIsIkJMT0NLUyIsImdldEJsb2NrVmFsdWVzTm9kZSIsIk5VTUJFUl9MSU5FIiwiZ2V0TnVtYmVyTGluZU5vZGUiLCJpbmNsdWRlTGFiZWxzIiwibWlub3JMaW5lV2lkdGgiLCJtYWpvckxpbmVXaWR0aCIsIm1pbm9yVGlja01hcmtIYWxmTGluZUxlbmd0aCIsIm1ham9yVGlja01hcmtIYWxmTGluZUxlbmd0aCIsIk5PTkUiLCJmaWxsIiwiQkxBQ0siLCJDb21wYXJlQ291bnRpbmdUeXBlUmFkaW9CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwiY291bnRpbmdUeXBlUHJvcGVydHkiLCJjb3VudGluZ1R5cGVSYWRpb0J1dHRvbnMiLCJlbnVtZXJhdGlvbiIsInZhbHVlcyIsIm1hcCIsImNvdW50aW5nVHlwZSIsImljb25Ob2RlIiwiZ2V0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJ2YWx1ZSIsImNyZWF0ZU5vZGUiLCJ0YW5kZW0iLCJvcmllbnRhdGlvbiIsInJhZGlvQnV0dG9uT3B0aW9ucyIsImJhc2VDb2xvciIsIldISVRFIiwieE1hcmdpbiIsInlNYXJnaW4iLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb21wYXJlQ291bnRpbmdUeXBlUmFkaW9CdXR0b25Hcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAgZm9yIHNlbGVjdGluZyB0aGUgQ29tcGFyZUNvdW50aW5nVHlwZSBvbiB0aGUgJ0NvbXBhcmUnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBleWVTbGFzaFNvbGlkU2hhcGUgZnJvbSAnLi4vLi4vLi4vLi4vc2hlcnBhL2pzL2ZvbnRhd2Vzb21lLTUvZXllU2xhc2hTb2xpZFNoYXBlLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgQ29tcGFyZUNvdW50aW5nVHlwZSBmcm9tICcuLi9tb2RlbC9Db21wYXJlQ291bnRpbmdUeXBlLmpzJztcclxuaW1wb3J0IEJsb2NrVmFsdWVzTm9kZSBmcm9tICcuL0Jsb2NrVmFsdWVzTm9kZS5qcyc7XHJcbmltcG9ydCBDb21wYXJlTnVtYmVyTGluZU5vZGUgZnJvbSAnLi9Db21wYXJlTnVtYmVyTGluZU5vZGUuanMnO1xyXG5pbXBvcnQgbnVtYmVyQ29tcGFyZSBmcm9tICcuLi8uLi9udW1iZXJDb21wYXJlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBJQ09OX1NJWkUgPSAzMjsgLy8gdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGljb25zIHVzZWQgZm9yIHRoZSBidXR0b25zLCBpbiBzY3JlZW4gY29vcmRpbmF0ZXNcclxuY29uc3QgQlVUVE9OX01BUkdJTiA9IDc7IC8vIGluIHNjcmVlbiBjb29yZGluYXRlc1xyXG5cclxuLy8gY3JlYXRlIGEgbWFwIGZyb20gZWFjaCBDb21wYXJlQ291bnRpbmdUeXBlIHRvIGEgY29ycmVzcG9uZGluZyBpY29uXHJcbmNvbnN0IENPVU5USU5HX1RZUEVfVE9fSUNPTiA9IG5ldyBNYXAoKTtcclxuQ09VTlRJTkdfVFlQRV9UT19JQ09OLnNldCggQ29tcGFyZUNvdW50aW5nVHlwZS5CTE9DS1MsIEJsb2NrVmFsdWVzTm9kZS5nZXRCbG9ja1ZhbHVlc05vZGUoIDEsIDIgKSApO1xyXG5DT1VOVElOR19UWVBFX1RPX0lDT04uc2V0KCBDb21wYXJlQ291bnRpbmdUeXBlLk5VTUJFUl9MSU5FLCBDb21wYXJlTnVtYmVyTGluZU5vZGUuZ2V0TnVtYmVyTGluZU5vZGUoXHJcbiAgMjAsXHJcbiAgbmV3IFJhbmdlKCAwLCA1ICksIHtcclxuICAgIGluY2x1ZGVMYWJlbHM6IGZhbHNlLFxyXG4gICAgbWlub3JMaW5lV2lkdGg6IDIsIC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuICAgIG1ham9yTGluZVdpZHRoOiA0LCAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcbiAgICBtaW5vclRpY2tNYXJrSGFsZkxpbmVMZW5ndGg6IDExLCAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcbiAgICBtYWpvclRpY2tNYXJrSGFsZkxpbmVMZW5ndGg6IDMyIC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuICB9ICkgKTtcclxuQ09VTlRJTkdfVFlQRV9UT19JQ09OLnNldCggQ29tcGFyZUNvdW50aW5nVHlwZS5OT05FLCBuZXcgUGF0aCggZXllU2xhc2hTb2xpZFNoYXBlLCB7IGZpbGw6IENvbG9yLkJMQUNLIH0gKSApO1xyXG5cclxuY2xhc3MgQ29tcGFyZUNvdW50aW5nVHlwZVJhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXA8Q29tcGFyZUNvdW50aW5nVHlwZT4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvdW50aW5nVHlwZVByb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PENvbXBhcmVDb3VudGluZ1R5cGU+ICkge1xyXG5cclxuICAgIC8vIGNyZWF0ZSBhbiBpY29uIGZvciBlYWNoIHZhbHVlIG9mIENvbXBhcmVDb3VudGluZ1R5cGVcclxuICAgIGNvbnN0IGNvdW50aW5nVHlwZVJhZGlvQnV0dG9ucyA9IENvbXBhcmVDb3VudGluZ1R5cGUuZW51bWVyYXRpb24udmFsdWVzLm1hcCggY291bnRpbmdUeXBlID0+IHtcclxuICAgICAgY29uc3QgaWNvbk5vZGUgPSBDT1VOVElOR19UWVBFX1RPX0lDT04uZ2V0KCBjb3VudGluZ1R5cGUgKTtcclxuICAgICAgaWNvbk5vZGUubWF4V2lkdGggPSBJQ09OX1NJWkU7XHJcbiAgICAgIGljb25Ob2RlLm1heEhlaWdodCA9IElDT05fU0laRTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsdWU6IGNvdW50aW5nVHlwZSxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoIHRhbmRlbTogVGFuZGVtICkgPT4gaWNvbk5vZGVcclxuICAgICAgfTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY291bnRpbmdUeXBlUHJvcGVydHksIGNvdW50aW5nVHlwZVJhZGlvQnV0dG9ucywge1xyXG4gICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICByYWRpb0J1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBiYXNlQ29sb3I6IENvbG9yLldISVRFLFxyXG4gICAgICAgIHhNYXJnaW46IEJVVFRPTl9NQVJHSU4sXHJcbiAgICAgICAgeU1hcmdpbjogQlVUVE9OX01BUkdJTlxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubnVtYmVyQ29tcGFyZS5yZWdpc3RlciggJ0NvbXBhcmVDb3VudGluZ1R5cGVSYWRpb0J1dHRvbkdyb3VwJywgQ29tcGFyZUNvdW50aW5nVHlwZVJhZGlvQnV0dG9uR3JvdXAgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ29tcGFyZUNvdW50aW5nVHlwZVJhZGlvQnV0dG9uR3JvdXA7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQy9ELE9BQU9DLGtCQUFrQixNQUFNLDJEQUEyRDtBQUMxRixPQUFPQywyQkFBMkIsTUFBTSwyREFBMkQ7QUFDbkcsT0FBT0MsbUJBQW1CLE1BQU0saUNBQWlDO0FBQ2pFLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFDbEQsT0FBT0MscUJBQXFCLE1BQU0sNEJBQTRCO0FBQzlELE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFHbEQ7QUFDQSxNQUFNQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDdEIsTUFBTUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDOztBQUV6QjtBQUNBLE1BQU1DLHFCQUFxQixHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDRCxxQkFBcUIsQ0FBQ0UsR0FBRyxDQUFFUixtQkFBbUIsQ0FBQ1MsTUFBTSxFQUFFUixlQUFlLENBQUNTLGtCQUFrQixDQUFFLENBQUMsRUFBRSxDQUFFLENBQUUsQ0FBQztBQUNuR0oscUJBQXFCLENBQUNFLEdBQUcsQ0FBRVIsbUJBQW1CLENBQUNXLFdBQVcsRUFBRVQscUJBQXFCLENBQUNVLGlCQUFpQixDQUNqRyxFQUFFLEVBQ0YsSUFBSWpCLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUU7RUFDakJrQixhQUFhLEVBQUUsS0FBSztFQUNwQkMsY0FBYyxFQUFFLENBQUM7RUFBRTtFQUNuQkMsY0FBYyxFQUFFLENBQUM7RUFBRTtFQUNuQkMsMkJBQTJCLEVBQUUsRUFBRTtFQUFFO0VBQ2pDQywyQkFBMkIsRUFBRSxFQUFFLENBQUM7QUFDbEMsQ0FBRSxDQUFFLENBQUM7O0FBQ1BYLHFCQUFxQixDQUFDRSxHQUFHLENBQUVSLG1CQUFtQixDQUFDa0IsSUFBSSxFQUFFLElBQUlyQixJQUFJLENBQUVDLGtCQUFrQixFQUFFO0VBQUVxQixJQUFJLEVBQUV2QixLQUFLLENBQUN3QjtBQUFNLENBQUUsQ0FBRSxDQUFDO0FBRTVHLE1BQU1DLG1DQUFtQyxTQUFTdEIsMkJBQTJCLENBQXNCO0VBRTFGdUIsV0FBV0EsQ0FBRUMsb0JBQThELEVBQUc7SUFFbkY7SUFDQSxNQUFNQyx3QkFBd0IsR0FBR3hCLG1CQUFtQixDQUFDeUIsV0FBVyxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBRUMsWUFBWSxJQUFJO01BQzNGLE1BQU1DLFFBQVEsR0FBR3ZCLHFCQUFxQixDQUFDd0IsR0FBRyxDQUFFRixZQUFhLENBQUM7TUFDMURDLFFBQVEsQ0FBQ0UsUUFBUSxHQUFHM0IsU0FBUztNQUM3QnlCLFFBQVEsQ0FBQ0csU0FBUyxHQUFHNUIsU0FBUztNQUU5QixPQUFPO1FBQ0w2QixLQUFLLEVBQUVMLFlBQVk7UUFDbkJNLFVBQVUsRUFBSUMsTUFBYyxJQUFNTjtNQUNwQyxDQUFDO0lBQ0gsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFTixvQkFBb0IsRUFBRUMsd0JBQXdCLEVBQUU7TUFDckRZLFdBQVcsRUFBRSxZQUFZO01BQ3pCQyxrQkFBa0IsRUFBRTtRQUNsQkMsU0FBUyxFQUFFMUMsS0FBSyxDQUFDMkMsS0FBSztRQUN0QkMsT0FBTyxFQUFFbkMsYUFBYTtRQUN0Qm9DLE9BQU8sRUFBRXBDO01BQ1g7SUFDRixDQUFFLENBQUM7RUFDTDtFQUVnQnFDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdkMsYUFBYSxDQUFDeUMsUUFBUSxDQUFFLHFDQUFxQyxFQUFFdkIsbUNBQW9DLENBQUM7QUFDcEcsZUFBZUEsbUNBQW1DIn0=