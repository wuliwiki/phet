// Copyright 2023, University of Colorado Boulder

/**
 * LocaleRadioButtonGroup is a vertical radio-button group for selecting primary vs secondary language.
 * It's an alternative to LocaleSwitch that takes up less horizontal space, and was developed as a workaround
 * for https://github.com/phetsims/number-compare/issues/18.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import localeProperty from '../../../../joist/js/i18n/localeProperty.js';
import { Text } from '../../../../scenery/js/imports.js';
import numberSuiteCommon from '../../../../number-suite-common/js/numberSuiteCommon.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import numberComparePreferences from '../../common/model/numberComparePreferences.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import numberCompareUtteranceQueue from '../../common/view/numberCompareUtteranceQueue.js';
const TEXT_OPTIONS = {
  font: new PhetFont(14),
  maxWidth: 150 // set empirically
};

// Size the radio buttons to match the text height.
const RADIO_BUTTON_RADIUS = new Text('X', TEXT_OPTIONS).height / 2;
export default class LocaleRadioButtonGroup extends VerticalAquaRadioButtonGroup {
  constructor() {
    const firstLanguageStringProperty = new DerivedProperty([localeProperty], StringUtils.localeToLocalizedName);
    const secondLanguageStringProperty = new DerivedProperty([numberComparePreferences.secondLocaleProperty], StringUtils.localeToLocalizedName);
    const items = [{
      value: true,
      createNode: () => new Text(firstLanguageStringProperty, TEXT_OPTIONS)
    }, {
      value: false,
      createNode: () => new Text(secondLanguageStringProperty, TEXT_OPTIONS)
    }];
    super(numberComparePreferences.isPrimaryLocaleProperty, items, {
      spacing: 10,
      radioButtonOptions: {
        radius: RADIO_BUTTON_RADIUS
      },
      visibleProperty: new DerivedProperty([numberComparePreferences.showSecondLocaleProperty], showSecondLocale => showSecondLocale)
    });

    // Speak speechData if autoHear is turned on.
    this.onInputEmitter.addListener(() => {
      numberComparePreferences.autoHearEnabledProperty.value && numberCompareUtteranceQueue.speakSpeechData();
    });
  }
}
numberSuiteCommon.register('LocaleRadioButtonGroup', LocaleRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2NhbGVQcm9wZXJ0eSIsIlRleHQiLCJudW1iZXJTdWl0ZUNvbW1vbiIsIlZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAiLCJEZXJpdmVkUHJvcGVydHkiLCJQaGV0Rm9udCIsIm51bWJlckNvbXBhcmVQcmVmZXJlbmNlcyIsIlN0cmluZ1V0aWxzIiwibnVtYmVyQ29tcGFyZVV0dGVyYW5jZVF1ZXVlIiwiVEVYVF9PUFRJT05TIiwiZm9udCIsIm1heFdpZHRoIiwiUkFESU9fQlVUVE9OX1JBRElVUyIsImhlaWdodCIsIkxvY2FsZVJhZGlvQnV0dG9uR3JvdXAiLCJjb25zdHJ1Y3RvciIsImZpcnN0TGFuZ3VhZ2VTdHJpbmdQcm9wZXJ0eSIsImxvY2FsZVRvTG9jYWxpemVkTmFtZSIsInNlY29uZExhbmd1YWdlU3RyaW5nUHJvcGVydHkiLCJzZWNvbmRMb2NhbGVQcm9wZXJ0eSIsIml0ZW1zIiwidmFsdWUiLCJjcmVhdGVOb2RlIiwiaXNQcmltYXJ5TG9jYWxlUHJvcGVydHkiLCJzcGFjaW5nIiwicmFkaW9CdXR0b25PcHRpb25zIiwicmFkaXVzIiwidmlzaWJsZVByb3BlcnR5Iiwic2hvd1NlY29uZExvY2FsZVByb3BlcnR5Iiwic2hvd1NlY29uZExvY2FsZSIsIm9uSW5wdXRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJhdXRvSGVhckVuYWJsZWRQcm9wZXJ0eSIsInNwZWFrU3BlZWNoRGF0YSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTG9jYWxlUmFkaW9CdXR0b25Hcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTG9jYWxlUmFkaW9CdXR0b25Hcm91cCBpcyBhIHZlcnRpY2FsIHJhZGlvLWJ1dHRvbiBncm91cCBmb3Igc2VsZWN0aW5nIHByaW1hcnkgdnMgc2Vjb25kYXJ5IGxhbmd1YWdlLlxyXG4gKiBJdCdzIGFuIGFsdGVybmF0aXZlIHRvIExvY2FsZVN3aXRjaCB0aGF0IHRha2VzIHVwIGxlc3MgaG9yaXpvbnRhbCBzcGFjZSwgYW5kIHdhcyBkZXZlbG9wZWQgYXMgYSB3b3JrYXJvdW5kXHJcbiAqIGZvciBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvbnVtYmVyLWNvbXBhcmUvaXNzdWVzLzE4LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBsb2NhbGVQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9qb2lzdC9qcy9pMThuL2xvY2FsZVByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgVGV4dCwgVGV4dE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbnVtYmVyU3VpdGVDb21tb24gZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLXN1aXRlLWNvbW1vbi9qcy9udW1iZXJTdWl0ZUNvbW1vbi5qcyc7XHJcbmltcG9ydCB7IEFxdWFSYWRpb0J1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9BcXVhUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9WZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgbnVtYmVyQ29tcGFyZVByZWZlcmVuY2VzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9udW1iZXJDb21wYXJlUHJlZmVyZW5jZXMuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IG51bWJlckNvbXBhcmVVdHRlcmFuY2VRdWV1ZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9udW1iZXJDb21wYXJlVXR0ZXJhbmNlUXVldWUuanMnO1xyXG5cclxuY29uc3QgVEVYVF9PUFRJT05TOiBUZXh0T3B0aW9ucyA9IHtcclxuICBmb250OiBuZXcgUGhldEZvbnQoIDE0ICksXHJcbiAgbWF4V2lkdGg6IDE1MCAvLyBzZXQgZW1waXJpY2FsbHlcclxufTtcclxuXHJcbi8vIFNpemUgdGhlIHJhZGlvIGJ1dHRvbnMgdG8gbWF0Y2ggdGhlIHRleHQgaGVpZ2h0LlxyXG5jb25zdCBSQURJT19CVVRUT05fUkFESVVTID0gbmV3IFRleHQoICdYJywgVEVYVF9PUFRJT05TICkuaGVpZ2h0IC8gMjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2FsZVJhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwPGJvb2xlYW4+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIGNvbnN0IGZpcnN0TGFuZ3VhZ2VTdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgbG9jYWxlUHJvcGVydHkgXSwgU3RyaW5nVXRpbHMubG9jYWxlVG9Mb2NhbGl6ZWROYW1lICk7XHJcblxyXG4gICAgY29uc3Qgc2Vjb25kTGFuZ3VhZ2VTdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFtcclxuICAgICAgbnVtYmVyQ29tcGFyZVByZWZlcmVuY2VzLnNlY29uZExvY2FsZVByb3BlcnR5XHJcbiAgICBdLCBTdHJpbmdVdGlscy5sb2NhbGVUb0xvY2FsaXplZE5hbWUgKTtcclxuXHJcbiAgICBjb25zdCBpdGVtczogQXF1YVJhZGlvQnV0dG9uR3JvdXBJdGVtPGJvb2xlYW4+W10gPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggZmlyc3RMYW5ndWFnZVN0cmluZ1Byb3BlcnR5LCBURVhUX09QVElPTlMgKVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IG5ldyBUZXh0KCBzZWNvbmRMYW5ndWFnZVN0cmluZ1Byb3BlcnR5LCBURVhUX09QVElPTlMgKVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCBudW1iZXJDb21wYXJlUHJlZmVyZW5jZXMuaXNQcmltYXJ5TG9jYWxlUHJvcGVydHksIGl0ZW1zLCB7XHJcbiAgICAgIHNwYWNpbmc6IDEwLFxyXG4gICAgICByYWRpb0J1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICByYWRpdXM6IFJBRElPX0JVVFRPTl9SQURJVVNcclxuICAgICAgfSxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIG51bWJlckNvbXBhcmVQcmVmZXJlbmNlcy5zaG93U2Vjb25kTG9jYWxlUHJvcGVydHkgXSwgc2hvd1NlY29uZExvY2FsZSA9PiBzaG93U2Vjb25kTG9jYWxlIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBTcGVhayBzcGVlY2hEYXRhIGlmIGF1dG9IZWFyIGlzIHR1cm5lZCBvbi5cclxuICAgIHRoaXMub25JbnB1dEVtaXR0ZXIuYWRkTGlzdGVuZXIoICgpID0+IHtcclxuICAgICAgbnVtYmVyQ29tcGFyZVByZWZlcmVuY2VzLmF1dG9IZWFyRW5hYmxlZFByb3BlcnR5LnZhbHVlICYmIG51bWJlckNvbXBhcmVVdHRlcmFuY2VRdWV1ZS5zcGVha1NwZWVjaERhdGEoKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlclN1aXRlQ29tbW9uLnJlZ2lzdGVyKCAnTG9jYWxlUmFkaW9CdXR0b25Hcm91cCcsIExvY2FsZVJhZGlvQnV0dG9uR3JvdXAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSw2Q0FBNkM7QUFDeEUsU0FBU0MsSUFBSSxRQUFxQixtQ0FBbUM7QUFDckUsT0FBT0MsaUJBQWlCLE1BQU0seURBQXlEO0FBRXZGLE9BQU9DLDRCQUE0QixNQUFNLG9EQUFvRDtBQUM3RixPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0Msd0JBQXdCLE1BQU0sZ0RBQWdEO0FBQ3JGLE9BQU9DLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsT0FBT0MsMkJBQTJCLE1BQU0sa0RBQWtEO0FBRTFGLE1BQU1DLFlBQXlCLEdBQUc7RUFDaENDLElBQUksRUFBRSxJQUFJTCxRQUFRLENBQUUsRUFBRyxDQUFDO0VBQ3hCTSxRQUFRLEVBQUUsR0FBRyxDQUFDO0FBQ2hCLENBQUM7O0FBRUQ7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJWCxJQUFJLENBQUUsR0FBRyxFQUFFUSxZQUFhLENBQUMsQ0FBQ0ksTUFBTSxHQUFHLENBQUM7QUFFcEUsZUFBZSxNQUFNQyxzQkFBc0IsU0FBU1gsNEJBQTRCLENBQVU7RUFFakZZLFdBQVdBLENBQUEsRUFBRztJQUVuQixNQUFNQywyQkFBMkIsR0FBRyxJQUFJWixlQUFlLENBQUUsQ0FBRUosY0FBYyxDQUFFLEVBQUVPLFdBQVcsQ0FBQ1UscUJBQXNCLENBQUM7SUFFaEgsTUFBTUMsNEJBQTRCLEdBQUcsSUFBSWQsZUFBZSxDQUFFLENBQ3hERSx3QkFBd0IsQ0FBQ2Esb0JBQW9CLENBQzlDLEVBQUVaLFdBQVcsQ0FBQ1UscUJBQXNCLENBQUM7SUFFdEMsTUFBTUcsS0FBMEMsR0FBRyxDQUNqRDtNQUNFQyxLQUFLLEVBQUUsSUFBSTtNQUNYQyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJckIsSUFBSSxDQUFFZSwyQkFBMkIsRUFBRVAsWUFBYTtJQUN4RSxDQUFDLEVBQ0Q7TUFDRVksS0FBSyxFQUFFLEtBQUs7TUFDWkMsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSXJCLElBQUksQ0FBRWlCLDRCQUE0QixFQUFFVCxZQUFhO0lBQ3pFLENBQUMsQ0FDRjtJQUVELEtBQUssQ0FBRUgsd0JBQXdCLENBQUNpQix1QkFBdUIsRUFBRUgsS0FBSyxFQUFFO01BQzlESSxPQUFPLEVBQUUsRUFBRTtNQUNYQyxrQkFBa0IsRUFBRTtRQUNsQkMsTUFBTSxFQUFFZDtNQUNWLENBQUM7TUFDRGUsZUFBZSxFQUFFLElBQUl2QixlQUFlLENBQUUsQ0FBRUUsd0JBQXdCLENBQUNzQix3QkFBd0IsQ0FBRSxFQUFFQyxnQkFBZ0IsSUFBSUEsZ0JBQWlCO0lBQ3BJLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxXQUFXLENBQUUsTUFBTTtNQUNyQ3pCLHdCQUF3QixDQUFDMEIsdUJBQXVCLENBQUNYLEtBQUssSUFBSWIsMkJBQTJCLENBQUN5QixlQUFlLENBQUMsQ0FBQztJQUN6RyxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUEvQixpQkFBaUIsQ0FBQ2dDLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRXBCLHNCQUF1QixDQUFDIn0=