// Copyright 2019-2023, University of Colorado Boulder

/**
 * The 'Compare' screen.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import compareScreenIcon_png from '../../images/compareScreenIcon_png.js';
import CompareModel from './model/CompareModel.js';
import CompareScreenView from './view/CompareScreenView.js';
import NumberCompareStrings from '../NumberCompareStrings.js';
import numberCompare from '../numberCompare.js';
import NumberCompareColors from '../common/NumberCompareColors.js';
import NumberCompareQueryParameters from '../common/NumberCompareQueryParameters.js';
import numberCompareUtteranceQueue from '../common/view/numberCompareUtteranceQueue.js';
class CompareScreen extends Screen {
  constructor(tandem) {
    const options = {
      name: NumberCompareStrings.screen.compareStringProperty,
      backgroundColorProperty: NumberCompareColors.whiteBackgroundColorProperty,
      homeScreenIcon: new ScreenIcon(new Image(compareScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    };
    super(() => new CompareModel(NumberCompareQueryParameters.compareMax, numberCompareUtteranceQueue.compareScreenSpeechDataProperty, tandem.createTandem('model')), model => new CompareScreenView(model, tandem.createTandem('view')), options);
  }
}
numberCompare.register('CompareScreen', CompareScreen);
export default CompareScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJjb21wYXJlU2NyZWVuSWNvbl9wbmciLCJDb21wYXJlTW9kZWwiLCJDb21wYXJlU2NyZWVuVmlldyIsIk51bWJlckNvbXBhcmVTdHJpbmdzIiwibnVtYmVyQ29tcGFyZSIsIk51bWJlckNvbXBhcmVDb2xvcnMiLCJOdW1iZXJDb21wYXJlUXVlcnlQYXJhbWV0ZXJzIiwibnVtYmVyQ29tcGFyZVV0dGVyYW5jZVF1ZXVlIiwiQ29tcGFyZVNjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwib3B0aW9ucyIsIm5hbWUiLCJzY3JlZW4iLCJjb21wYXJlU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIndoaXRlQmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsImNvbXBhcmVNYXgiLCJjb21wYXJlU2NyZWVuU3BlZWNoRGF0YVByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbXBhcmVTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdDb21wYXJlJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBjb21wYXJlU2NyZWVuSWNvbl9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBhcmVTY3JlZW5JY29uX3BuZy5qcyc7XHJcbmltcG9ydCBDb21wYXJlTW9kZWwgZnJvbSAnLi9tb2RlbC9Db21wYXJlTW9kZWwuanMnO1xyXG5pbXBvcnQgQ29tcGFyZVNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0NvbXBhcmVTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IE51bWJlckNvbXBhcmVTdHJpbmdzIGZyb20gJy4uL051bWJlckNvbXBhcmVTdHJpbmdzLmpzJztcclxuaW1wb3J0IG51bWJlckNvbXBhcmUgZnJvbSAnLi4vbnVtYmVyQ29tcGFyZS5qcyc7XHJcbmltcG9ydCBOdW1iZXJDb21wYXJlQ29sb3JzIGZyb20gJy4uL2NvbW1vbi9OdW1iZXJDb21wYXJlQ29sb3JzLmpzJztcclxuaW1wb3J0IE51bWJlckNvbXBhcmVRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vY29tbW9uL051bWJlckNvbXBhcmVRdWVyeVBhcmFtZXRlcnMuanMnO1xyXG5pbXBvcnQgbnVtYmVyQ29tcGFyZVV0dGVyYW5jZVF1ZXVlIGZyb20gJy4uL2NvbW1vbi92aWV3L251bWJlckNvbXBhcmVVdHRlcmFuY2VRdWV1ZS5qcyc7XHJcblxyXG5jbGFzcyBDb21wYXJlU2NyZWVuIGV4dGVuZHMgU2NyZWVuPENvbXBhcmVNb2RlbCwgQ29tcGFyZVNjcmVlblZpZXc+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiBOdW1iZXJDb21wYXJlU3RyaW5ncy5zY3JlZW4uY29tcGFyZVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogTnVtYmVyQ29tcGFyZUNvbG9ycy53aGl0ZUJhY2tncm91bmRDb2xvclByb3BlcnR5LFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggY29tcGFyZVNjcmVlbkljb25fcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBDb21wYXJlTW9kZWwoXHJcbiAgICAgICAgTnVtYmVyQ29tcGFyZVF1ZXJ5UGFyYW1ldGVycy5jb21wYXJlTWF4LFxyXG4gICAgICAgIG51bWJlckNvbXBhcmVVdHRlcmFuY2VRdWV1ZS5jb21wYXJlU2NyZWVuU3BlZWNoRGF0YVByb3BlcnR5LFxyXG4gICAgICAgIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgQ29tcGFyZVNjcmVlblZpZXcoIG1vZGVsLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKSApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxubnVtYmVyQ29tcGFyZS5yZWdpc3RlciggJ0NvbXBhcmVTY3JlZW4nLCBDb21wYXJlU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IENvbXBhcmVTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBRXRELE9BQU9DLHFCQUFxQixNQUFNLHVDQUF1QztBQUN6RSxPQUFPQyxZQUFZLE1BQU0seUJBQXlCO0FBQ2xELE9BQU9DLGlCQUFpQixNQUFNLDZCQUE2QjtBQUMzRCxPQUFPQyxvQkFBb0IsTUFBTSw0QkFBNEI7QUFDN0QsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxtQkFBbUIsTUFBTSxrQ0FBa0M7QUFDbEUsT0FBT0MsNEJBQTRCLE1BQU0sMkNBQTJDO0FBQ3BGLE9BQU9DLDJCQUEyQixNQUFNLCtDQUErQztBQUV2RixNQUFNQyxhQUFhLFNBQVNYLE1BQU0sQ0FBa0M7RUFFM0RZLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFVCxvQkFBb0IsQ0FBQ1UsTUFBTSxDQUFDQyxxQkFBcUI7TUFDdkRDLHVCQUF1QixFQUFFVixtQkFBbUIsQ0FBQ1csNEJBQTRCO01BQ3pFQyxjQUFjLEVBQUUsSUFBSW5CLFVBQVUsQ0FBRSxJQUFJQyxLQUFLLENBQUVDLHFCQUFzQixDQUFDLEVBQUU7UUFDbEVrQixzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSFQsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJVCxZQUFZLENBQ3BCSyw0QkFBNEIsQ0FBQ2MsVUFBVSxFQUN2Q2IsMkJBQTJCLENBQUNjLCtCQUErQixFQUMzRFgsTUFBTSxDQUFDWSxZQUFZLENBQUUsT0FBUSxDQUFFLENBQUMsRUFDbENDLEtBQUssSUFBSSxJQUFJckIsaUJBQWlCLENBQUVxQixLQUFLLEVBQUViLE1BQU0sQ0FBQ1ksWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQ3RFWCxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFQLGFBQWEsQ0FBQ29CLFFBQVEsQ0FBRSxlQUFlLEVBQUVoQixhQUFjLENBQUM7QUFDeEQsZUFBZUEsYUFBYSJ9