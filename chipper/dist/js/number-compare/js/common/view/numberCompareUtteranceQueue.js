// Copyright 2022-2023, University of Colorado Boulder

/**
 * A singleton UtteranceQueue that is used for voicing specific to Number Compare. This is needed because Number Compare
 * doesn't have the Voicing feature, but still needs to use speech synthesis.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import NumberSuiteCommonUtteranceQueue from '../../../../number-suite-common/js/common/view/NumberSuiteCommonUtteranceQueue.js';
import numberCompare from '../../numberCompare.js';
import numberCompareSpeechSynthesisAnnouncer from './numberCompareSpeechSynthesisAnnouncer.js';
import CompareScreen from '../../compare/CompareScreen.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import numberComparePreferences from '../model/numberComparePreferences.js';
import Property from '../../../../axon/js/Property.js';
class NumberCompareUtteranceQueue extends NumberSuiteCommonUtteranceQueue {
  // Data from the 'Compare' screen that can be spoken to the user. Should be updated in the screen's model.

  constructor() {
    super(numberCompareSpeechSynthesisAnnouncer, numberComparePreferences.isPrimaryLocaleProperty, numberComparePreferences.primaryVoiceProperty, numberComparePreferences.secondVoiceProperty, numberComparePreferences.autoHearEnabledProperty);
    this.compareScreenSpeechDataProperty = new Property(null);
  }

  /**
   * Starts the initialization process by using the provided selectedScreenProperty to determine which speechData
   * to use for a given screen that the user is viewing. This is needed because selectedScreenProperty doesn't exist
   * yet during the creation of this singleton.
   */
  initialize(selectedScreenProperty) {
    const speechDataProperty = new DerivedProperty([this.compareScreenSpeechDataProperty, selectedScreenProperty], (compareScreenSpeechData, selectedScreen) => {
      // We want the speech data to reflect the selected screen. Returns null for screens that do not support speech
      // synthesis. NOTE: If more screens that support speech synthesis besides the 'Compare' screen are ever added,
      // more work is needed to speak correctly when changing screens. See https://github.com/phetsims/number-play/issues/217.
      return selectedScreen instanceof CompareScreen ? compareScreenSpeechData : null;
    });
    this.initializeNumberSuiteCommonUtteranceQueue(speechDataProperty);
  }
}
const numberCompareUtteranceQueue = new NumberCompareUtteranceQueue();
numberCompare.register('numberCompareUtteranceQueue', numberCompareUtteranceQueue);
export default numberCompareUtteranceQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJTdWl0ZUNvbW1vblV0dGVyYW5jZVF1ZXVlIiwibnVtYmVyQ29tcGFyZSIsIm51bWJlckNvbXBhcmVTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIiLCJDb21wYXJlU2NyZWVuIiwiRGVyaXZlZFByb3BlcnR5IiwibnVtYmVyQ29tcGFyZVByZWZlcmVuY2VzIiwiUHJvcGVydHkiLCJOdW1iZXJDb21wYXJlVXR0ZXJhbmNlUXVldWUiLCJjb25zdHJ1Y3RvciIsImlzUHJpbWFyeUxvY2FsZVByb3BlcnR5IiwicHJpbWFyeVZvaWNlUHJvcGVydHkiLCJzZWNvbmRWb2ljZVByb3BlcnR5IiwiYXV0b0hlYXJFbmFibGVkUHJvcGVydHkiLCJjb21wYXJlU2NyZWVuU3BlZWNoRGF0YVByb3BlcnR5IiwiaW5pdGlhbGl6ZSIsInNlbGVjdGVkU2NyZWVuUHJvcGVydHkiLCJzcGVlY2hEYXRhUHJvcGVydHkiLCJjb21wYXJlU2NyZWVuU3BlZWNoRGF0YSIsInNlbGVjdGVkU2NyZWVuIiwiaW5pdGlhbGl6ZU51bWJlclN1aXRlQ29tbW9uVXR0ZXJhbmNlUXVldWUiLCJudW1iZXJDb21wYXJlVXR0ZXJhbmNlUXVldWUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIm51bWJlckNvbXBhcmVVdHRlcmFuY2VRdWV1ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHNpbmdsZXRvbiBVdHRlcmFuY2VRdWV1ZSB0aGF0IGlzIHVzZWQgZm9yIHZvaWNpbmcgc3BlY2lmaWMgdG8gTnVtYmVyIENvbXBhcmUuIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2UgTnVtYmVyIENvbXBhcmVcclxuICogZG9lc24ndCBoYXZlIHRoZSBWb2ljaW5nIGZlYXR1cmUsIGJ1dCBzdGlsbCBuZWVkcyB0byB1c2Ugc3BlZWNoIHN5bnRoZXNpcy5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclN1aXRlQ29tbW9uVXR0ZXJhbmNlUXVldWUgZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLXN1aXRlLWNvbW1vbi9qcy9jb21tb24vdmlldy9OdW1iZXJTdWl0ZUNvbW1vblV0dGVyYW5jZVF1ZXVlLmpzJztcclxuaW1wb3J0IG51bWJlckNvbXBhcmUgZnJvbSAnLi4vLi4vbnVtYmVyQ29tcGFyZS5qcyc7XHJcbmltcG9ydCBudW1iZXJDb21wYXJlU3BlZWNoU3ludGhlc2lzQW5ub3VuY2VyIGZyb20gJy4vbnVtYmVyQ29tcGFyZVNwZWVjaFN5bnRoZXNpc0Fubm91bmNlci5qcyc7XHJcbmltcG9ydCBDb21wYXJlU2NyZWVuIGZyb20gJy4uLy4uL2NvbXBhcmUvQ29tcGFyZVNjcmVlbi5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbnVtYmVyQ29tcGFyZVByZWZlcmVuY2VzIGZyb20gJy4uL21vZGVsL251bWJlckNvbXBhcmVQcmVmZXJlbmNlcy5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBBbnlTY3JlZW4gfSBmcm9tICcuLi8uLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5cclxuY2xhc3MgTnVtYmVyQ29tcGFyZVV0dGVyYW5jZVF1ZXVlIGV4dGVuZHMgTnVtYmVyU3VpdGVDb21tb25VdHRlcmFuY2VRdWV1ZSB7XHJcblxyXG4gIC8vIERhdGEgZnJvbSB0aGUgJ0NvbXBhcmUnIHNjcmVlbiB0aGF0IGNhbiBiZSBzcG9rZW4gdG8gdGhlIHVzZXIuIFNob3VsZCBiZSB1cGRhdGVkIGluIHRoZSBzY3JlZW4ncyBtb2RlbC5cclxuICBwdWJsaWMgcmVhZG9ubHkgY29tcGFyZVNjcmVlblNwZWVjaERhdGFQcm9wZXJ0eTogVFByb3BlcnR5PHN0cmluZyB8IG51bGw+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgbnVtYmVyQ29tcGFyZVNwZWVjaFN5bnRoZXNpc0Fubm91bmNlcixcclxuICAgICAgbnVtYmVyQ29tcGFyZVByZWZlcmVuY2VzLmlzUHJpbWFyeUxvY2FsZVByb3BlcnR5LFxyXG4gICAgICBudW1iZXJDb21wYXJlUHJlZmVyZW5jZXMucHJpbWFyeVZvaWNlUHJvcGVydHksXHJcbiAgICAgIG51bWJlckNvbXBhcmVQcmVmZXJlbmNlcy5zZWNvbmRWb2ljZVByb3BlcnR5LFxyXG4gICAgICBudW1iZXJDb21wYXJlUHJlZmVyZW5jZXMuYXV0b0hlYXJFbmFibGVkUHJvcGVydHlcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5jb21wYXJlU2NyZWVuU3BlZWNoRGF0YVByb3BlcnR5ID0gbmV3IFByb3BlcnR5PHN0cmluZyB8IG51bGw+KCBudWxsICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydHMgdGhlIGluaXRpYWxpemF0aW9uIHByb2Nlc3MgYnkgdXNpbmcgdGhlIHByb3ZpZGVkIHNlbGVjdGVkU2NyZWVuUHJvcGVydHkgdG8gZGV0ZXJtaW5lIHdoaWNoIHNwZWVjaERhdGFcclxuICAgKiB0byB1c2UgZm9yIGEgZ2l2ZW4gc2NyZWVuIHRoYXQgdGhlIHVzZXIgaXMgdmlld2luZy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBzZWxlY3RlZFNjcmVlblByb3BlcnR5IGRvZXNuJ3QgZXhpc3RcclxuICAgKiB5ZXQgZHVyaW5nIHRoZSBjcmVhdGlvbiBvZiB0aGlzIHNpbmdsZXRvbi5cclxuICAgKi9cclxuICBwdWJsaWMgaW5pdGlhbGl6ZSggc2VsZWN0ZWRTY3JlZW5Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8QW55U2NyZWVuPiApOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBzcGVlY2hEYXRhUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIHRoaXMuY29tcGFyZVNjcmVlblNwZWVjaERhdGFQcm9wZXJ0eSwgc2VsZWN0ZWRTY3JlZW5Qcm9wZXJ0eSBdLCAoIGNvbXBhcmVTY3JlZW5TcGVlY2hEYXRhLCBzZWxlY3RlZFNjcmVlbiApID0+IHtcclxuXHJcbiAgICAgICAgLy8gV2Ugd2FudCB0aGUgc3BlZWNoIGRhdGEgdG8gcmVmbGVjdCB0aGUgc2VsZWN0ZWQgc2NyZWVuLiBSZXR1cm5zIG51bGwgZm9yIHNjcmVlbnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBzcGVlY2hcclxuICAgICAgICAvLyBzeW50aGVzaXMuIE5PVEU6IElmIG1vcmUgc2NyZWVucyB0aGF0IHN1cHBvcnQgc3BlZWNoIHN5bnRoZXNpcyBiZXNpZGVzIHRoZSAnQ29tcGFyZScgc2NyZWVuIGFyZSBldmVyIGFkZGVkLFxyXG4gICAgICAgIC8vIG1vcmUgd29yayBpcyBuZWVkZWQgdG8gc3BlYWsgY29ycmVjdGx5IHdoZW4gY2hhbmdpbmcgc2NyZWVucy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9udW1iZXItcGxheS9pc3N1ZXMvMjE3LlxyXG4gICAgICAgIHJldHVybiBzZWxlY3RlZFNjcmVlbiBpbnN0YW5jZW9mIENvbXBhcmVTY3JlZW4gPyBjb21wYXJlU2NyZWVuU3BlZWNoRGF0YSA6IG51bGw7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmluaXRpYWxpemVOdW1iZXJTdWl0ZUNvbW1vblV0dGVyYW5jZVF1ZXVlKCBzcGVlY2hEYXRhUHJvcGVydHkgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG51bWJlckNvbXBhcmVVdHRlcmFuY2VRdWV1ZSA9IG5ldyBOdW1iZXJDb21wYXJlVXR0ZXJhbmNlUXVldWUoKTtcclxuXHJcbm51bWJlckNvbXBhcmUucmVnaXN0ZXIoICdudW1iZXJDb21wYXJlVXR0ZXJhbmNlUXVldWUnLCBudW1iZXJDb21wYXJlVXR0ZXJhbmNlUXVldWUgKTtcclxuZXhwb3J0IGRlZmF1bHQgbnVtYmVyQ29tcGFyZVV0dGVyYW5jZVF1ZXVlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsK0JBQStCLE1BQU0sbUZBQW1GO0FBQy9ILE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0MscUNBQXFDLE1BQU0sNENBQTRDO0FBQzlGLE9BQU9DLGFBQWEsTUFBTSxnQ0FBZ0M7QUFDMUQsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyx3QkFBd0IsTUFBTSxzQ0FBc0M7QUFDM0UsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUl0RCxNQUFNQywyQkFBMkIsU0FBU1AsK0JBQStCLENBQUM7RUFFeEU7O0VBR09RLFdBQVdBLENBQUEsRUFBRztJQUNuQixLQUFLLENBQ0hOLHFDQUFxQyxFQUNyQ0csd0JBQXdCLENBQUNJLHVCQUF1QixFQUNoREosd0JBQXdCLENBQUNLLG9CQUFvQixFQUM3Q0wsd0JBQXdCLENBQUNNLG1CQUFtQixFQUM1Q04sd0JBQXdCLENBQUNPLHVCQUMzQixDQUFDO0lBRUQsSUFBSSxDQUFDQywrQkFBK0IsR0FBRyxJQUFJUCxRQUFRLENBQWlCLElBQUssQ0FBQztFQUM1RTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NRLFVBQVVBLENBQUVDLHNCQUFvRCxFQUFTO0lBRTlFLE1BQU1DLGtCQUFrQixHQUFHLElBQUlaLGVBQWUsQ0FDNUMsQ0FBRSxJQUFJLENBQUNTLCtCQUErQixFQUFFRSxzQkFBc0IsQ0FBRSxFQUFFLENBQUVFLHVCQUF1QixFQUFFQyxjQUFjLEtBQU07TUFFL0c7TUFDQTtNQUNBO01BQ0EsT0FBT0EsY0FBYyxZQUFZZixhQUFhLEdBQUdjLHVCQUF1QixHQUFHLElBQUk7SUFDakYsQ0FBRSxDQUFDO0lBRUwsSUFBSSxDQUFDRSx5Q0FBeUMsQ0FBRUgsa0JBQW1CLENBQUM7RUFDdEU7QUFDRjtBQUVBLE1BQU1JLDJCQUEyQixHQUFHLElBQUliLDJCQUEyQixDQUFDLENBQUM7QUFFckVOLGFBQWEsQ0FBQ29CLFFBQVEsQ0FBRSw2QkFBNkIsRUFBRUQsMkJBQTRCLENBQUM7QUFDcEYsZUFBZUEsMkJBQTJCIn0=