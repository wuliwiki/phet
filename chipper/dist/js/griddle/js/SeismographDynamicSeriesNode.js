// Copyright 2020-2022, University of Colorado Boulder

/**
 * @author Jesse Greenberg
 */

import deprecationWarning from '../../phet-core/js/deprecationWarning.js';
import { Circle } from '../../scenery/js/imports.js';
import DynamicSeriesNode from './DynamicSeriesNode.js';
import griddle from './griddle.js';

/**
 * @deprecated - please use BAMBOO/GridLineSet
 */
class SeismographDynamicSeriesNode extends DynamicSeriesNode {
  /**
   * @param {DynamicSeries} dynamicSeries - the data to plot
   * @param {number} chartWidth
   * @param {Bounds2} bounds - bounds for rendering, includes area to the right of the pens
   * @param {Property.<ModelViewTransform2>}modelViewTransformProperty
   */
  constructor(dynamicSeries, chartWidth, bounds, modelViewTransformProperty) {
    assert && deprecationWarning('Please use bamboo');
    super(dynamicSeries, chartWidth, bounds, modelViewTransformProperty);

    // Create the pen which draws the data at the right side of the graph
    const penNode = new Circle(4.5, {
      fill: dynamicSeries.color,
      centerX: chartWidth,
      centerY: bounds.height / 2
    });
    this.addChild(penNode);
    const positionPenListener = () => {
      const modelViewTransform = modelViewTransformProperty.get();
      const lastPoint = dynamicSeries.getLength() - 1;
      if (lastPoint >= 0) {
        const penPoint = dynamicSeries.getDataPoint(lastPoint);
        if (isNaN(penPoint.y)) {
          penNode.centerY = modelViewTransform.modelToViewY(0);
        } else {
          penNode.centerY = modelViewTransform.modelToViewY(penPoint.y);
        }
      }
    };
    dynamicSeries.addDynamicSeriesListener(positionPenListener);
    modelViewTransformProperty.link(positionPenListener);
    this.disposeSeismographDynamicSeriesNode = () => {
      dynamicSeries.removeDynamicSeriesListener(positionPenListener);
      modelViewTransformProperty.unlink(positionPenListener);
    };
  }

  /**
   * @public
   */
  dispose() {
    this.disposeSeismographDynamicSeriesNode();
    super.dispose();
  }
}
griddle.register('SeismographDynamicSeriesNode', SeismographDynamicSeriesNode);
export default SeismographDynamicSeriesNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXByZWNhdGlvbldhcm5pbmciLCJDaXJjbGUiLCJEeW5hbWljU2VyaWVzTm9kZSIsImdyaWRkbGUiLCJTZWlzbW9ncmFwaER5bmFtaWNTZXJpZXNOb2RlIiwiY29uc3RydWN0b3IiLCJkeW5hbWljU2VyaWVzIiwiY2hhcnRXaWR0aCIsImJvdW5kcyIsIm1vZGVsVmlld1RyYW5zZm9ybVByb3BlcnR5IiwiYXNzZXJ0IiwicGVuTm9kZSIsImZpbGwiLCJjb2xvciIsImNlbnRlclgiLCJjZW50ZXJZIiwiaGVpZ2h0IiwiYWRkQ2hpbGQiLCJwb3NpdGlvblBlbkxpc3RlbmVyIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiZ2V0IiwibGFzdFBvaW50IiwiZ2V0TGVuZ3RoIiwicGVuUG9pbnQiLCJnZXREYXRhUG9pbnQiLCJpc05hTiIsInkiLCJtb2RlbFRvVmlld1kiLCJhZGREeW5hbWljU2VyaWVzTGlzdGVuZXIiLCJsaW5rIiwiZGlzcG9zZVNlaXNtb2dyYXBoRHluYW1pY1Nlcmllc05vZGUiLCJyZW1vdmVEeW5hbWljU2VyaWVzTGlzdGVuZXIiLCJ1bmxpbmsiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTZWlzbW9ncmFwaER5bmFtaWNTZXJpZXNOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqL1xyXG5cclxuaW1wb3J0IGRlcHJlY2F0aW9uV2FybmluZyBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvZGVwcmVjYXRpb25XYXJuaW5nLmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IER5bmFtaWNTZXJpZXNOb2RlIGZyb20gJy4vRHluYW1pY1Nlcmllc05vZGUuanMnO1xyXG5pbXBvcnQgZ3JpZGRsZSBmcm9tICcuL2dyaWRkbGUuanMnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIC0gcGxlYXNlIHVzZSBCQU1CT08vR3JpZExpbmVTZXRcclxuICovXHJcbmNsYXNzIFNlaXNtb2dyYXBoRHluYW1pY1Nlcmllc05vZGUgZXh0ZW5kcyBEeW5hbWljU2VyaWVzTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RHluYW1pY1Nlcmllc30gZHluYW1pY1NlcmllcyAtIHRoZSBkYXRhIHRvIHBsb3RcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY2hhcnRXaWR0aFxyXG4gICAqIEBwYXJhbSB7Qm91bmRzMn0gYm91bmRzIC0gYm91bmRzIGZvciByZW5kZXJpbmcsIGluY2x1ZGVzIGFyZWEgdG8gdGhlIHJpZ2h0IG9mIHRoZSBwZW5zXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48TW9kZWxWaWV3VHJhbnNmb3JtMj59bW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHlcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZHluYW1pY1NlcmllcywgY2hhcnRXaWR0aCwgYm91bmRzLCBtb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eSApIHtcclxuICAgIGFzc2VydCAmJiBkZXByZWNhdGlvbldhcm5pbmcoICdQbGVhc2UgdXNlIGJhbWJvbycgKTtcclxuXHJcbiAgICBzdXBlciggZHluYW1pY1NlcmllcywgY2hhcnRXaWR0aCwgYm91bmRzLCBtb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eSApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgcGVuIHdoaWNoIGRyYXdzIHRoZSBkYXRhIGF0IHRoZSByaWdodCBzaWRlIG9mIHRoZSBncmFwaFxyXG4gICAgY29uc3QgcGVuTm9kZSA9IG5ldyBDaXJjbGUoIDQuNSwge1xyXG4gICAgICBmaWxsOiBkeW5hbWljU2VyaWVzLmNvbG9yLFxyXG4gICAgICBjZW50ZXJYOiBjaGFydFdpZHRoLFxyXG4gICAgICBjZW50ZXJZOiBib3VuZHMuaGVpZ2h0IC8gMlxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIHBlbk5vZGUgKTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvblBlbkxpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBtb2RlbFZpZXdUcmFuc2Zvcm0gPSBtb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eS5nZXQoKTtcclxuXHJcbiAgICAgIGNvbnN0IGxhc3RQb2ludCA9IGR5bmFtaWNTZXJpZXMuZ2V0TGVuZ3RoKCkgLSAxO1xyXG4gICAgICBpZiAoIGxhc3RQb2ludCA+PSAwICkge1xyXG4gICAgICAgIGNvbnN0IHBlblBvaW50ID0gZHluYW1pY1Nlcmllcy5nZXREYXRhUG9pbnQoIGxhc3RQb2ludCApO1xyXG5cclxuICAgICAgICBpZiAoIGlzTmFOKCBwZW5Qb2ludC55ICkgKSB7XHJcbiAgICAgICAgICBwZW5Ob2RlLmNlbnRlclkgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCAwICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcGVuTm9kZS5jZW50ZXJZID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggcGVuUG9pbnQueSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGR5bmFtaWNTZXJpZXMuYWRkRHluYW1pY1Nlcmllc0xpc3RlbmVyKCBwb3NpdGlvblBlbkxpc3RlbmVyICk7XHJcbiAgICBtb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eS5saW5rKCBwb3NpdGlvblBlbkxpc3RlbmVyICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlU2Vpc21vZ3JhcGhEeW5hbWljU2VyaWVzTm9kZSA9ICgpID0+IHtcclxuICAgICAgZHluYW1pY1Nlcmllcy5yZW1vdmVEeW5hbWljU2VyaWVzTGlzdGVuZXIoIHBvc2l0aW9uUGVuTGlzdGVuZXIgKTtcclxuICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHkudW5saW5rKCBwb3NpdGlvblBlbkxpc3RlbmVyICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmRpc3Bvc2VTZWlzbW9ncmFwaER5bmFtaWNTZXJpZXNOb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmlkZGxlLnJlZ2lzdGVyKCAnU2Vpc21vZ3JhcGhEeW5hbWljU2VyaWVzTm9kZScsIFNlaXNtb2dyYXBoRHluYW1pY1Nlcmllc05vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlaXNtb2dyYXBoRHluYW1pY1Nlcmllc05vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGtCQUFrQixNQUFNLDBDQUEwQztBQUN6RSxTQUFTQyxNQUFNLFFBQVEsNkJBQTZCO0FBQ3BELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxPQUFPLE1BQU0sY0FBYzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsNEJBQTRCLFNBQVNGLGlCQUFpQixDQUFDO0VBRTNEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxXQUFXQSxDQUFFQyxhQUFhLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFFQywwQkFBMEIsRUFBRztJQUMzRUMsTUFBTSxJQUFJVixrQkFBa0IsQ0FBRSxtQkFBb0IsQ0FBQztJQUVuRCxLQUFLLENBQUVNLGFBQWEsRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLDBCQUEyQixDQUFDOztJQUV0RTtJQUNBLE1BQU1FLE9BQU8sR0FBRyxJQUFJVixNQUFNLENBQUUsR0FBRyxFQUFFO01BQy9CVyxJQUFJLEVBQUVOLGFBQWEsQ0FBQ08sS0FBSztNQUN6QkMsT0FBTyxFQUFFUCxVQUFVO01BQ25CUSxPQUFPLEVBQUVQLE1BQU0sQ0FBQ1EsTUFBTSxHQUFHO0lBQzNCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsUUFBUSxDQUFFTixPQUFRLENBQUM7SUFFeEIsTUFBTU8sbUJBQW1CLEdBQUdBLENBQUEsS0FBTTtNQUNoQyxNQUFNQyxrQkFBa0IsR0FBR1YsMEJBQTBCLENBQUNXLEdBQUcsQ0FBQyxDQUFDO01BRTNELE1BQU1DLFNBQVMsR0FBR2YsYUFBYSxDQUFDZ0IsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDO01BQy9DLElBQUtELFNBQVMsSUFBSSxDQUFDLEVBQUc7UUFDcEIsTUFBTUUsUUFBUSxHQUFHakIsYUFBYSxDQUFDa0IsWUFBWSxDQUFFSCxTQUFVLENBQUM7UUFFeEQsSUFBS0ksS0FBSyxDQUFFRixRQUFRLENBQUNHLENBQUUsQ0FBQyxFQUFHO1VBQ3pCZixPQUFPLENBQUNJLE9BQU8sR0FBR0ksa0JBQWtCLENBQUNRLFlBQVksQ0FBRSxDQUFFLENBQUM7UUFDeEQsQ0FBQyxNQUNJO1VBQ0hoQixPQUFPLENBQUNJLE9BQU8sR0FBR0ksa0JBQWtCLENBQUNRLFlBQVksQ0FBRUosUUFBUSxDQUFDRyxDQUFFLENBQUM7UUFDakU7TUFDRjtJQUNGLENBQUM7SUFDRHBCLGFBQWEsQ0FBQ3NCLHdCQUF3QixDQUFFVixtQkFBb0IsQ0FBQztJQUM3RFQsMEJBQTBCLENBQUNvQixJQUFJLENBQUVYLG1CQUFvQixDQUFDO0lBRXRELElBQUksQ0FBQ1ksbUNBQW1DLEdBQUcsTUFBTTtNQUMvQ3hCLGFBQWEsQ0FBQ3lCLDJCQUEyQixDQUFFYixtQkFBb0IsQ0FBQztNQUNoRVQsMEJBQTBCLENBQUN1QixNQUFNLENBQUVkLG1CQUFvQixDQUFDO0lBQzFELENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7RUFDRWUsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSSxDQUFDSCxtQ0FBbUMsQ0FBQyxDQUFDO0lBQzFDLEtBQUssQ0FBQ0csT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBOUIsT0FBTyxDQUFDK0IsUUFBUSxDQUFFLDhCQUE4QixFQUFFOUIsNEJBQTZCLENBQUM7QUFFaEYsZUFBZUEsNEJBQTRCIn0=