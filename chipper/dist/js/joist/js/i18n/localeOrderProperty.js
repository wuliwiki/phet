// Copyright 2022, University of Colorado Boulder

/**
 * Stores the ground-truth order of locales used in translation fallback, with the first attempted (highest priority)
 * locale listed first.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import joist from '../joist.js';
import localeProperty from './localeProperty.js';
import fallbackLocalesProperty from './fallbackLocalesProperty.js';
const FALLBACK_LOCALE = 'en';
const localeOrderProperty = new DerivedProperty([localeProperty, fallbackLocalesProperty], (locale, fallbackLocales) => {
  const localeOrder = [locale];

  // Attempt to fill in a language reduction for the selected locale, e.g. 'zh_CN' => 'zh'
  const shortLocale = locale.slice(0, 2);
  if (locale !== shortLocale && !localeOrder.includes(shortLocale)) {
    localeOrder.push(shortLocale);
  }

  // Add custom fallback locales if not already in the order
  for (let i = 0; i < fallbackLocales.length; i++) {
    const fallbackLocale = fallbackLocales[i];
    if (!localeOrder.includes(fallbackLocale)) {
      localeOrder.push(fallbackLocale);
    }
  }

  // Guaranteed fallback locale at the very end (if not already included)
  if (!localeOrder.includes(FALLBACK_LOCALE)) {
    localeOrder.push(FALLBACK_LOCALE);
  }
  const fallbackIndex = localeOrder.indexOf(FALLBACK_LOCALE);
  assert && assert(fallbackIndex >= 0, `Required local in localeOrderProperty: ${FALLBACK_LOCALE}`);

  // Optimization: Ignore locales past our fallback, because it will include a value for every single key.
  return localeOrder.slice(0, fallbackIndex + 1);
});
joist.register('localeOrderProperty', localeOrderProperty);
export default localeOrderProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJqb2lzdCIsImxvY2FsZVByb3BlcnR5IiwiZmFsbGJhY2tMb2NhbGVzUHJvcGVydHkiLCJGQUxMQkFDS19MT0NBTEUiLCJsb2NhbGVPcmRlclByb3BlcnR5IiwibG9jYWxlIiwiZmFsbGJhY2tMb2NhbGVzIiwibG9jYWxlT3JkZXIiLCJzaG9ydExvY2FsZSIsInNsaWNlIiwiaW5jbHVkZXMiLCJwdXNoIiwiaSIsImxlbmd0aCIsImZhbGxiYWNrTG9jYWxlIiwiZmFsbGJhY2tJbmRleCIsImluZGV4T2YiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImxvY2FsZU9yZGVyUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFN0b3JlcyB0aGUgZ3JvdW5kLXRydXRoIG9yZGVyIG9mIGxvY2FsZXMgdXNlZCBpbiB0cmFuc2xhdGlvbiBmYWxsYmFjaywgd2l0aCB0aGUgZmlyc3QgYXR0ZW1wdGVkIChoaWdoZXN0IHByaW9yaXR5KVxyXG4gKiBsb2NhbGUgbGlzdGVkIGZpcnN0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBqb2lzdCBmcm9tICcuLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBsb2NhbGVQcm9wZXJ0eSwgeyBMb2NhbGUgfSBmcm9tICcuL2xvY2FsZVByb3BlcnR5LmpzJztcclxuaW1wb3J0IGZhbGxiYWNrTG9jYWxlc1Byb3BlcnR5IGZyb20gJy4vZmFsbGJhY2tMb2NhbGVzUHJvcGVydHkuanMnO1xyXG5cclxuY29uc3QgRkFMTEJBQ0tfTE9DQUxFID0gJ2VuJztcclxuXHJcbmNvbnN0IGxvY2FsZU9yZGVyUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIGxvY2FsZVByb3BlcnR5LCBmYWxsYmFja0xvY2FsZXNQcm9wZXJ0eSBdLFxyXG4gICggbG9jYWxlLCBmYWxsYmFja0xvY2FsZXMgKSA9PiB7XHJcblxyXG4gIGNvbnN0IGxvY2FsZU9yZGVyID0gWyBsb2NhbGUgXTtcclxuXHJcbiAgLy8gQXR0ZW1wdCB0byBmaWxsIGluIGEgbGFuZ3VhZ2UgcmVkdWN0aW9uIGZvciB0aGUgc2VsZWN0ZWQgbG9jYWxlLCBlLmcuICd6aF9DTicgPT4gJ3poJ1xyXG4gIGNvbnN0IHNob3J0TG9jYWxlID0gbG9jYWxlLnNsaWNlKCAwLCAyICkgYXMgTG9jYWxlO1xyXG4gIGlmICggbG9jYWxlICE9PSBzaG9ydExvY2FsZSAmJiAhbG9jYWxlT3JkZXIuaW5jbHVkZXMoIHNob3J0TG9jYWxlICkgKSB7XHJcbiAgICBsb2NhbGVPcmRlci5wdXNoKCBzaG9ydExvY2FsZSApO1xyXG4gIH1cclxuXHJcbiAgLy8gQWRkIGN1c3RvbSBmYWxsYmFjayBsb2NhbGVzIGlmIG5vdCBhbHJlYWR5IGluIHRoZSBvcmRlclxyXG4gIGZvciAoIGxldCBpID0gMDsgaSA8IGZhbGxiYWNrTG9jYWxlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgIGNvbnN0IGZhbGxiYWNrTG9jYWxlID0gZmFsbGJhY2tMb2NhbGVzWyBpIF07XHJcbiAgICBpZiAoICFsb2NhbGVPcmRlci5pbmNsdWRlcyggZmFsbGJhY2tMb2NhbGUgKSApIHtcclxuICAgICAgbG9jYWxlT3JkZXIucHVzaCggZmFsbGJhY2tMb2NhbGUgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEd1YXJhbnRlZWQgZmFsbGJhY2sgbG9jYWxlIGF0IHRoZSB2ZXJ5IGVuZCAoaWYgbm90IGFscmVhZHkgaW5jbHVkZWQpXHJcbiAgaWYgKCAhbG9jYWxlT3JkZXIuaW5jbHVkZXMoIEZBTExCQUNLX0xPQ0FMRSApICkge1xyXG4gICAgbG9jYWxlT3JkZXIucHVzaCggRkFMTEJBQ0tfTE9DQUxFICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBmYWxsYmFja0luZGV4ID0gbG9jYWxlT3JkZXIuaW5kZXhPZiggRkFMTEJBQ0tfTE9DQUxFICk7XHJcbiAgYXNzZXJ0ICYmIGFzc2VydCggZmFsbGJhY2tJbmRleCA+PSAwLCBgUmVxdWlyZWQgbG9jYWwgaW4gbG9jYWxlT3JkZXJQcm9wZXJ0eTogJHtGQUxMQkFDS19MT0NBTEV9YCApO1xyXG5cclxuICAvLyBPcHRpbWl6YXRpb246IElnbm9yZSBsb2NhbGVzIHBhc3Qgb3VyIGZhbGxiYWNrLCBiZWNhdXNlIGl0IHdpbGwgaW5jbHVkZSBhIHZhbHVlIGZvciBldmVyeSBzaW5nbGUga2V5LlxyXG4gIHJldHVybiBsb2NhbGVPcmRlci5zbGljZSggMCwgZmFsbGJhY2tJbmRleCArIDEgKTtcclxufSApO1xyXG5cclxuam9pc3QucmVnaXN0ZXIoICdsb2NhbGVPcmRlclByb3BlcnR5JywgbG9jYWxlT3JkZXJQcm9wZXJ0eSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlT3JkZXJQcm9wZXJ0eTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHFDQUFxQztBQUNqRSxPQUFPQyxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxjQUFjLE1BQWtCLHFCQUFxQjtBQUM1RCxPQUFPQyx1QkFBdUIsTUFBTSw4QkFBOEI7QUFFbEUsTUFBTUMsZUFBZSxHQUFHLElBQUk7QUFFNUIsTUFBTUMsbUJBQW1CLEdBQUcsSUFBSUwsZUFBZSxDQUFFLENBQUVFLGNBQWMsRUFBRUMsdUJBQXVCLENBQUUsRUFDMUYsQ0FBRUcsTUFBTSxFQUFFQyxlQUFlLEtBQU07RUFFL0IsTUFBTUMsV0FBVyxHQUFHLENBQUVGLE1BQU0sQ0FBRTs7RUFFOUI7RUFDQSxNQUFNRyxXQUFXLEdBQUdILE1BQU0sQ0FBQ0ksS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQVc7RUFDbEQsSUFBS0osTUFBTSxLQUFLRyxXQUFXLElBQUksQ0FBQ0QsV0FBVyxDQUFDRyxRQUFRLENBQUVGLFdBQVksQ0FBQyxFQUFHO0lBQ3BFRCxXQUFXLENBQUNJLElBQUksQ0FBRUgsV0FBWSxDQUFDO0VBQ2pDOztFQUVBO0VBQ0EsS0FBTSxJQUFJSSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdOLGVBQWUsQ0FBQ08sTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRztJQUNqRCxNQUFNRSxjQUFjLEdBQUdSLGVBQWUsQ0FBRU0sQ0FBQyxDQUFFO0lBQzNDLElBQUssQ0FBQ0wsV0FBVyxDQUFDRyxRQUFRLENBQUVJLGNBQWUsQ0FBQyxFQUFHO01BQzdDUCxXQUFXLENBQUNJLElBQUksQ0FBRUcsY0FBZSxDQUFDO0lBQ3BDO0VBQ0Y7O0VBRUE7RUFDQSxJQUFLLENBQUNQLFdBQVcsQ0FBQ0csUUFBUSxDQUFFUCxlQUFnQixDQUFDLEVBQUc7SUFDOUNJLFdBQVcsQ0FBQ0ksSUFBSSxDQUFFUixlQUFnQixDQUFDO0VBQ3JDO0VBRUEsTUFBTVksYUFBYSxHQUFHUixXQUFXLENBQUNTLE9BQU8sQ0FBRWIsZUFBZ0IsQ0FBQztFQUM1RGMsTUFBTSxJQUFJQSxNQUFNLENBQUVGLGFBQWEsSUFBSSxDQUFDLEVBQUcsMENBQXlDWixlQUFnQixFQUFFLENBQUM7O0VBRW5HO0VBQ0EsT0FBT0ksV0FBVyxDQUFDRSxLQUFLLENBQUUsQ0FBQyxFQUFFTSxhQUFhLEdBQUcsQ0FBRSxDQUFDO0FBQ2xELENBQUUsQ0FBQztBQUVIZixLQUFLLENBQUNrQixRQUFRLENBQUUscUJBQXFCLEVBQUVkLG1CQUFvQixDQUFDO0FBRTVELGVBQWVBLG1CQUFtQiJ9