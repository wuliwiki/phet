// Copyright 2019-2022, University of Colorado Boulder

/**
 * Monitors the engagement as it relates to time spent on each screen of a sim. Mainly this is to provide this information
 * to a PhET-iO wrapper frame.
 *
 * The main output of this file is powered by the data stream. As a result the finest granularity of this data is based on
 * the most frequent events that are emitting. As of this writing, when emitting high frequency events, that is every
 * frame on the "stepSimulation" event. Note that this Type requires high frequency events to be emitted.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../axon/js/Property.js';
import joist from './joist.js';
import TemporalCounter from './TemporalCounter.js';

/////////////////////////////////
// TODO: Duplication alert! MK doesn't want to import from phet-io into joist, so we will just duplicate the type for now. https://github.com/phetsims/joist/issues/553
////////////////////////////////
class EngagementMetrics {
  screens = []; // {ScreenData[]}

  startTimestamp = null; // number, the timestamp of the start of the sim.

  constructor(sim) {
    const dataStream = phet && phet.phetio && phet.phetio.dataStream;
    assert && assert(dataStream, 'cannot add dataStream listener because dataStream is not defined');
    let currentScreenEntry = this.screens[sim.screens.indexOf(sim.selectedScreenProperty.value)];
    sim.screens.forEach(screen => {
      this.screens.push(new ScreenData(screen.tandem.name));
    });
    const updateCurrentScreenEntry = event => {
      currentScreenEntry = this.screens[sim.screens.indexOf(sim.selectedScreenProperty.value)];

      // initial condition if first time on this screen
      currentScreenEntry.firstTimestamp = currentScreenEntry.firstTimestamp || event.time;
    };

    // phet-io data stream listener for every sim event.
    dataStream.addAllEventListener(event => {
      // initial condition
      if (this.startTimestamp === null) {
        this.startTimestamp = event.time;
        updateCurrentScreenEntry(event);
      }

      // screenIndex changedr
      if (event.phetioID === sim.selectedScreenProperty.tandem.phetioID && event.name === Property.CHANGED_EVENT_NAME) {
        updateCurrentScreenEntry(event);
      }

      // Handle the case if the event signifies engagement with the simulation.
      this.isEngagedEvent(event) && currentScreenEntry.onEngagedEvent(event, this.startTimestamp);
      if (event.phetioID === sim.stepSimulationAction.tandem.phetioID) {
        // TODO: counted even when not in the active browser tab, perhaps we need to use browserTabVisibleProperty, https://github.com/phetsims/joist/issues/553
        // TODO: or just be adding up dt values instead of trying to use event.time, which is just from Date.now(), https://github.com/phetsims/joist/issues/553
        currentScreenEntry.lastTimestamp = event.time;
        currentScreenEntry.totalTime += Math.floor(event.data.dt * 1000);
      }
    });
  }

  /**
   * Returns true if the event signifies that the student is "engaged." The current definition is just pointer down
   * events.
   */
  isEngagedEvent(event) {
    let engaged = false;
    ['mouseDownAction', 'touchDownAction', 'keydownAction', 'penDownAction'].forEach(eventName => {
      if (window.phetio.PhetioIDUtils.getComponentName(event.phetioID) === eventName) {
        engaged = true;
      }
    });
    return engaged;
  }

  /**
   * get the current engagement data of the simulation.
   */
  getEngagementMetrics() {
    const screens = this.screens;
    return {
      sim: {
        // the timestamp of the first received model step
        startTimestamp: this.startTimestamp,
        // number of seconds since startTimestamp
        elapsedTime: _.sum(screens.map(screen => screen.totalTime)),
        // number of seconds in which "engagement" occurred
        engagedTime: _.sum(screens.map(screen => screen.engagedTime)),
        // the timestamp of the first time the sim is engaged with
        firstEngagementTimestamp: _.min(screens.map(screen => screen.firstTimestamp)),
        // current time of the sim
        currentTimestamp: _.max(screens.map(screen => screen.lastTimestamp))
      },
      screens: screens.map(screen => screen.getData())
    };
  }
}

// private class to keep track of data for each screen.
class ScreenData {
  firstTimestamp = null;
  lastTimestamp = null;
  totalTime = 0;
  firstEngagedTimestamp = null;
  temporalCounter = new TemporalCounter(1000);
  constructor(name) {
    this.name = name;
  }

  /**
   * Getter to keep things a bit more modular
   * @returns - the ms of engagement for the sim
   */
  get engagedTime() {
    return this.temporalCounter.counts * 1000;
  }
  onEngagedEvent(event, simStartTimestamp) {
    this.temporalCounter.onEvent(event.time - simStartTimestamp);

    // case for first engaged event
    this.firstTimestamp = this.firstTimestamp || event.time;
  }

  /**
   * Public facing info, mainer getter for this POJSO.
   */
  getData() {
    return {
      name: this.name,
      totalTime: this.totalTime,
      engagedTime: this.engagedTime,
      firstTimestamp: this.firstTimestamp,
      lastTimestamp: this.lastTimestamp
    };
  }
}
joist.register('EngagementMetrics', EngagementMetrics);
export default EngagementMetrics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,