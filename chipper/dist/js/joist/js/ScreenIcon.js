// Copyright 2015-2023, University of Colorado Boulder

/**
 * ScreenIcon is an icon that is suitable for one of the screen-selection buttons on the home screen or navigation bar.
 * By default, the size is optimized for the home screen.
 * To optimize for the navigation bar, use options.size: Screen.MINIMUM_NAVBAR_ICON_SIZE
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../phet-core/js/optionize.js';
import { Node, Rectangle } from '../../scenery/js/imports.js';
import joist from './joist.js';
import Screen from './Screen.js';
export default class ScreenIcon extends Node {
  constructor(iconNode, providedOptions) {
    const options = optionize()({
      // SelfOptions
      size: Screen.MINIMUM_HOME_SCREEN_ICON_SIZE,
      maxIconWidthProportion: 0.85,
      maxIconHeightProportion: 0.85,
      fill: 'white',
      stroke: null
    }, providedOptions);
    assert && assert(options.maxIconWidthProportion > 0 && options.maxIconWidthProportion <= 1);
    assert && assert(options.maxIconHeightProportion > 0 && options.maxIconHeightProportion <= 1);
    const background = new Rectangle(0, 0, options.size.width, options.size.height, {
      fill: options.fill,
      stroke: options.stroke
    });
    iconNode.pickable = false;

    // iconNode may have a dynamic size - for example, if it involves a string Property.
    // So if it's size changes, adjust its scale and re-center.
    const localBoundsListener = () => {
      iconNode.setScaleMagnitude(1);
      iconNode.setScaleMagnitude(Math.min(options.maxIconWidthProportion * background.width / iconNode.width, options.maxIconHeightProportion * background.height / iconNode.height));
      iconNode.center = background.center;
    };
    iconNode.localBoundsProperty.link(localBoundsListener);
    options.children = [background, iconNode];
    super(options);
    this.disposeScreenIcon = () => {
      if (iconNode.localBoundsProperty.hasListener(localBoundsListener)) {
        iconNode.localBoundsProperty.unlink(localBoundsListener);
      }
    };
  }
  dispose() {
    this.disposeScreenIcon();
    super.dispose();
  }
}
joist.register('ScreenIcon', ScreenIcon);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiam9pc3QiLCJTY3JlZW4iLCJTY3JlZW5JY29uIiwiY29uc3RydWN0b3IiLCJpY29uTm9kZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzaXplIiwiTUlOSU1VTV9IT01FX1NDUkVFTl9JQ09OX1NJWkUiLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJmaWxsIiwic3Ryb2tlIiwiYXNzZXJ0IiwiYmFja2dyb3VuZCIsIndpZHRoIiwiaGVpZ2h0IiwicGlja2FibGUiLCJsb2NhbEJvdW5kc0xpc3RlbmVyIiwic2V0U2NhbGVNYWduaXR1ZGUiLCJNYXRoIiwibWluIiwiY2VudGVyIiwibG9jYWxCb3VuZHNQcm9wZXJ0eSIsImxpbmsiLCJjaGlsZHJlbiIsImRpc3Bvc2VTY3JlZW5JY29uIiwiaGFzTGlzdGVuZXIiLCJ1bmxpbmsiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTY3JlZW5JY29uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNjcmVlbkljb24gaXMgYW4gaWNvbiB0aGF0IGlzIHN1aXRhYmxlIGZvciBvbmUgb2YgdGhlIHNjcmVlbi1zZWxlY3Rpb24gYnV0dG9ucyBvbiB0aGUgaG9tZSBzY3JlZW4gb3IgbmF2aWdhdGlvbiBiYXIuXHJcbiAqIEJ5IGRlZmF1bHQsIHRoZSBzaXplIGlzIG9wdGltaXplZCBmb3IgdGhlIGhvbWUgc2NyZWVuLlxyXG4gKiBUbyBvcHRpbWl6ZSBmb3IgdGhlIG5hdmlnYXRpb24gYmFyLCB1c2Ugb3B0aW9ucy5zaXplOiBTY3JlZW4uTUlOSU1VTV9OQVZCQVJfSUNPTl9TSVpFXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIFJlY3RhbmdsZSwgVENvbG9yIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4vam9pc3QuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4vU2NyZWVuLmpzJztcclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNpemU/OiBEaW1lbnNpb24yOyAvLyBzaXplIG9mIHRoZSBiYWNrZ3JvdW5kXHJcbiAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbj86IG51bWJlcjsgLy8gbWF4IHByb3BvcnRpb24gb2YgdGhlIGJhY2tncm91bmQgd2lkdGggb2NjdXBpZWQgYnkgaWNvbk5vZGUsICgwLDFdXHJcbiAgbWF4SWNvbkhlaWdodFByb3BvcnRpb24/OiBudW1iZXI7IC8vIG1heCBwcm9wb3J0aW9uIG9mIHRoZSBiYWNrZ3JvdW5kIGhlaWdodCBvY2N1cGllZCBieSBpY29uTm9kZSwgKDAsMV1cclxuICBmaWxsPzogVENvbG9yOyAvLyB7Q29sb3J8c3RyaW5nfSBiYWNrZ3JvdW5kIGZpbGxcclxuICBzdHJva2U/OiBUQ29sb3I7IC8vIHtDb2xvcnxzdHJpbmd9IGJhY2tncm91bmQgc3Ryb2tlXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBTY3JlZW5JY29uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JlZW5JY29uIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVNjcmVlbkljb246ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaWNvbk5vZGU6IE5vZGUsIHByb3ZpZGVkT3B0aW9ucz86IFNjcmVlbkljb25PcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U2NyZWVuSWNvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgc2l6ZTogU2NyZWVuLk1JTklNVU1fSE9NRV9TQ1JFRU5fSUNPTl9TSVpFLFxyXG4gICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAwLjg1LFxyXG4gICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMC44NSxcclxuICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgc3Ryb2tlOiBudWxsXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLm1heEljb25XaWR0aFByb3BvcnRpb24gPiAwICYmIG9wdGlvbnMubWF4SWNvbldpZHRoUHJvcG9ydGlvbiA8PSAxICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLm1heEljb25IZWlnaHRQcm9wb3J0aW9uID4gMCAmJiBvcHRpb25zLm1heEljb25IZWlnaHRQcm9wb3J0aW9uIDw9IDEgKTtcclxuXHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgb3B0aW9ucy5zaXplLndpZHRoLCBvcHRpb25zLnNpemUuaGVpZ2h0LCB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuZmlsbCxcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLnN0cm9rZVxyXG4gICAgfSApO1xyXG5cclxuICAgIGljb25Ob2RlLnBpY2thYmxlID0gZmFsc2U7XHJcblxyXG4gICAgLy8gaWNvbk5vZGUgbWF5IGhhdmUgYSBkeW5hbWljIHNpemUgLSBmb3IgZXhhbXBsZSwgaWYgaXQgaW52b2x2ZXMgYSBzdHJpbmcgUHJvcGVydHkuXHJcbiAgICAvLyBTbyBpZiBpdCdzIHNpemUgY2hhbmdlcywgYWRqdXN0IGl0cyBzY2FsZSBhbmQgcmUtY2VudGVyLlxyXG4gICAgY29uc3QgbG9jYWxCb3VuZHNMaXN0ZW5lciA9ICgpID0+IHtcclxuICAgICAgaWNvbk5vZGUuc2V0U2NhbGVNYWduaXR1ZGUoIDEgKTtcclxuICAgICAgaWNvbk5vZGUuc2V0U2NhbGVNYWduaXR1ZGUoIE1hdGgubWluKFxyXG4gICAgICAgIG9wdGlvbnMubWF4SWNvbldpZHRoUHJvcG9ydGlvbiAqIGJhY2tncm91bmQud2lkdGggLyBpY29uTm9kZS53aWR0aCxcclxuICAgICAgICBvcHRpb25zLm1heEljb25IZWlnaHRQcm9wb3J0aW9uICogYmFja2dyb3VuZC5oZWlnaHQgLyBpY29uTm9kZS5oZWlnaHRcclxuICAgICAgKSApO1xyXG4gICAgICBpY29uTm9kZS5jZW50ZXIgPSBiYWNrZ3JvdW5kLmNlbnRlcjtcclxuICAgIH07XHJcbiAgICBpY29uTm9kZS5sb2NhbEJvdW5kc1Byb3BlcnR5LmxpbmsoIGxvY2FsQm91bmRzTGlzdGVuZXIgKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBiYWNrZ3JvdW5kLCBpY29uTm9kZSBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlU2NyZWVuSWNvbiA9ICgpID0+IHtcclxuICAgICAgaWYgKCBpY29uTm9kZS5sb2NhbEJvdW5kc1Byb3BlcnR5Lmhhc0xpc3RlbmVyKCBsb2NhbEJvdW5kc0xpc3RlbmVyICkgKSB7XHJcbiAgICAgICAgaWNvbk5vZGUubG9jYWxCb3VuZHNQcm9wZXJ0eS51bmxpbmsoIGxvY2FsQm91bmRzTGlzdGVuZXIgKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlU2NyZWVuSWNvbigpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdTY3JlZW5JY29uJywgU2NyZWVuSWNvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxTQUFTQyxJQUFJLEVBQWVDLFNBQVMsUUFBZ0IsNkJBQTZCO0FBQ2xGLE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBQzlCLE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBY2hDLGVBQWUsTUFBTUMsVUFBVSxTQUFTSixJQUFJLENBQUM7RUFJcENLLFdBQVdBLENBQUVDLFFBQWMsRUFBRUMsZUFBbUMsRUFBRztJQUV4RSxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBOEMsQ0FBQyxDQUFFO01BRXhFO01BQ0FVLElBQUksRUFBRU4sTUFBTSxDQUFDTyw2QkFBNkI7TUFDMUNDLHNCQUFzQixFQUFFLElBQUk7TUFDNUJDLHVCQUF1QixFQUFFLElBQUk7TUFDN0JDLElBQUksRUFBRSxPQUFPO01BQ2JDLE1BQU0sRUFBRTtJQUNWLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQztJQUVwQlEsTUFBTSxJQUFJQSxNQUFNLENBQUVQLE9BQU8sQ0FBQ0csc0JBQXNCLEdBQUcsQ0FBQyxJQUFJSCxPQUFPLENBQUNHLHNCQUFzQixJQUFJLENBQUUsQ0FBQztJQUM3RkksTUFBTSxJQUFJQSxNQUFNLENBQUVQLE9BQU8sQ0FBQ0ksdUJBQXVCLEdBQUcsQ0FBQyxJQUFJSixPQUFPLENBQUNJLHVCQUF1QixJQUFJLENBQUUsQ0FBQztJQUUvRixNQUFNSSxVQUFVLEdBQUcsSUFBSWYsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVPLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDUSxLQUFLLEVBQUVULE9BQU8sQ0FBQ0MsSUFBSSxDQUFDUyxNQUFNLEVBQUU7TUFDL0VMLElBQUksRUFBRUwsT0FBTyxDQUFDSyxJQUFJO01BQ2xCQyxNQUFNLEVBQUVOLE9BQU8sQ0FBQ007SUFDbEIsQ0FBRSxDQUFDO0lBRUhSLFFBQVEsQ0FBQ2EsUUFBUSxHQUFHLEtBQUs7O0lBRXpCO0lBQ0E7SUFDQSxNQUFNQyxtQkFBbUIsR0FBR0EsQ0FBQSxLQUFNO01BQ2hDZCxRQUFRLENBQUNlLGlCQUFpQixDQUFFLENBQUUsQ0FBQztNQUMvQmYsUUFBUSxDQUFDZSxpQkFBaUIsQ0FBRUMsSUFBSSxDQUFDQyxHQUFHLENBQ2xDZixPQUFPLENBQUNHLHNCQUFzQixHQUFHSyxVQUFVLENBQUNDLEtBQUssR0FBR1gsUUFBUSxDQUFDVyxLQUFLLEVBQ2xFVCxPQUFPLENBQUNJLHVCQUF1QixHQUFHSSxVQUFVLENBQUNFLE1BQU0sR0FBR1osUUFBUSxDQUFDWSxNQUNqRSxDQUFFLENBQUM7TUFDSFosUUFBUSxDQUFDa0IsTUFBTSxHQUFHUixVQUFVLENBQUNRLE1BQU07SUFDckMsQ0FBQztJQUNEbEIsUUFBUSxDQUFDbUIsbUJBQW1CLENBQUNDLElBQUksQ0FBRU4sbUJBQW9CLENBQUM7SUFFeERaLE9BQU8sQ0FBQ21CLFFBQVEsR0FBRyxDQUFFWCxVQUFVLEVBQUVWLFFBQVEsQ0FBRTtJQUUzQyxLQUFLLENBQUVFLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNvQixpQkFBaUIsR0FBRyxNQUFNO01BQzdCLElBQUt0QixRQUFRLENBQUNtQixtQkFBbUIsQ0FBQ0ksV0FBVyxDQUFFVCxtQkFBb0IsQ0FBQyxFQUFHO1FBQ3JFZCxRQUFRLENBQUNtQixtQkFBbUIsQ0FBQ0ssTUFBTSxDQUFFVixtQkFBb0IsQ0FBQztNQUM1RDtJQUNGLENBQUM7RUFDSDtFQUVnQlcsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0gsaUJBQWlCLENBQUMsQ0FBQztJQUN4QixLQUFLLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTdCLEtBQUssQ0FBQzhCLFFBQVEsQ0FBRSxZQUFZLEVBQUU1QixVQUFXLENBQUMifQ==