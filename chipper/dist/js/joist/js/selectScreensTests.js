// Copyright 2020-2023, University of Colorado Boulder

/**
 * QUnit tests for ScreenSelector
 *
 * Porting to TS will require re-writing tests to create Screen fixtures.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import selectScreens from './selectScreens.js';
// test screen constants. Since these are tests, it is actually more valuable to typecast instead of making these actual screens.
const a = 'a';
const b = 'b';
const c = 'c';
const hs = 'hs';
const getQueryParameterValues = queryString => {
  // TODO: Get schema from initialize-globals.js instead of duplicating here, see https://github.com/phetsims/chipper/issues/936
  return QueryStringMachine.getAllForString({
    homeScreen: {
      type: 'boolean',
      defaultValue: true
    },
    initialScreen: {
      type: 'number',
      defaultValue: 0
    },
    screens: {
      type: 'array',
      elementSchema: {
        type: 'number'
      },
      defaultValue: [],
      isValidValue: function (value) {
        return value === null || value.length === _.uniq(value).length;
      }
    }
  }, queryString);
};

/**
 * Formats a message for each testValidScreenSelector result
 */
const formatMessage = (key, expectedResult, result, description) => `expected ${key}: ${expectedResult[key]}, actual ${key}: ${result[key]} for valid selectScreens test ${description}`;

/**
 * Format the query string + all sim screens to uniquely identify the test.
 */
const getDescription = (queryString, allSimScreens) => `${queryString} ${JSON.stringify(allSimScreens)}`;
QUnit.test('valid selectScreens', async assert => {
  /**
   * Tests a valid combination of allSimScreens and screens-related query parameters, where the expectedResult should
   * equal the result returned from ScreenSelector.select
   */
  const testValidScreenSelector = (queryString, allSimScreens, expectedResult) => {
    const queryParameterValues = getQueryParameterValues(queryString);
    const result = selectScreens(allSimScreens, queryParameterValues.homeScreen, QueryStringMachine.containsKeyForString('homeScreen', queryString), queryParameterValues.initialScreen, QueryStringMachine.containsKeyForString('initialScreen', queryString), queryParameterValues.screens, QueryStringMachine.containsKeyForString('screens', queryString), _.noop, () => hs);
    const description = getDescription(queryString, allSimScreens);

    // test the four return values from selectScreens
    assert.ok(result.homeScreen === expectedResult.homeScreen, formatMessage('homeScreen', expectedResult, result, description));
    assert.ok(result.initialScreen === expectedResult.initialScreen, formatMessage('initialScreen', expectedResult, result, description));
    assert.ok(_.isEqual(result.selectedSimScreens, expectedResult.selectedSimScreens), formatMessage('selectedSimScreens', expectedResult, result, description));
    assert.ok(_.isEqual(result.screens, expectedResult.screens), formatMessage('screens', expectedResult, result, description));
    assert.ok(_.isEqual(result.allScreensCreated, expectedResult.allScreensCreated), formatMessage('allScreensCreated', expectedResult, result, description));
  };

  // multi-screen
  testValidScreenSelector('?screens=1', [a, b], {
    homeScreen: null,
    initialScreen: a,
    selectedSimScreens: [a],
    screens: [a],
    allScreensCreated: false
  });
  testValidScreenSelector('?screens=2', [a, b], {
    homeScreen: null,
    initialScreen: b,
    selectedSimScreens: [b],
    screens: [b],
    allScreensCreated: false
  });
  testValidScreenSelector('?screens=1,2', [a, b], {
    homeScreen: hs,
    initialScreen: hs,
    selectedSimScreens: [a, b],
    screens: [hs, a, b],
    allScreensCreated: true
  });
  testValidScreenSelector('?screens=2,1', [a, b], {
    homeScreen: hs,
    initialScreen: hs,
    selectedSimScreens: [b, a],
    screens: [hs, b, a],
    allScreensCreated: true
  });
  testValidScreenSelector('?homeScreen=false', [a, b], {
    homeScreen: null,
    initialScreen: a,
    selectedSimScreens: [a, b],
    screens: [a, b],
    allScreensCreated: false
  });
  testValidScreenSelector('?screens=2,1', [a, b, c], {
    homeScreen: hs,
    initialScreen: hs,
    selectedSimScreens: [b, a],
    screens: [hs, b, a],
    allScreensCreated: false
  });
  testValidScreenSelector('?screens=3,1', [a, b, c], {
    homeScreen: hs,
    initialScreen: hs,
    selectedSimScreens: [c, a],
    screens: [hs, c, a],
    allScreensCreated: false
  });
  testValidScreenSelector('?screens=2,3', [a, b, c], {
    homeScreen: hs,
    initialScreen: hs,
    selectedSimScreens: [b, c],
    screens: [hs, b, c],
    allScreensCreated: false
  });
  testValidScreenSelector('?initialScreen=1&homeScreen=false&screens=2,1', [a, b], {
    homeScreen: null,
    initialScreen: a,
    selectedSimScreens: [b, a],
    screens: [b, a],
    allScreensCreated: false
  });
  testValidScreenSelector('?initialScreen=0&homeScreen=true&screens=2,1', [a, b], {
    homeScreen: hs,
    initialScreen: hs,
    selectedSimScreens: [b, a],
    screens: [hs, b, a],
    allScreensCreated: true
  });
  testValidScreenSelector('?initialScreen=1&homeScreen=true&screens=2,1', [a, b], {
    homeScreen: hs,
    initialScreen: a,
    selectedSimScreens: [b, a],
    screens: [hs, b, a],
    allScreensCreated: true
  });
  testValidScreenSelector('?initialScreen=2&homeScreen=true&screens=1,2', [a, b], {
    homeScreen: hs,
    initialScreen: b,
    selectedSimScreens: [a, b],
    screens: [hs, a, b],
    allScreensCreated: true
  });
  testValidScreenSelector('?initialScreen=1&homeScreen=false&screens=1', [a, b], {
    homeScreen: null,
    initialScreen: a,
    selectedSimScreens: [a],
    screens: [a],
    allScreensCreated: false
  });
  testValidScreenSelector('?initialScreen=2&homeScreen=false&screens=2', [a, b], {
    homeScreen: null,
    initialScreen: b,
    selectedSimScreens: [b],
    screens: [b],
    allScreensCreated: false
  });

  // single-screen
  // Like ph-scale-basics_en.html?screens=1
  testValidScreenSelector('?screens=1', [a], {
    homeScreen: null,
    initialScreen: a,
    selectedSimScreens: [a],
    screens: [a],
    allScreensCreated: true
  });
  testValidScreenSelector('?initialScreen=1', [a], {
    homeScreen: null,
    initialScreen: a,
    selectedSimScreens: [a],
    screens: [a],
    allScreensCreated: true
  });
  testValidScreenSelector('?homeScreen=false', [a], {
    homeScreen: null,
    initialScreen: a,
    selectedSimScreens: [a],
    screens: [a],
    allScreensCreated: true
  });
});
QUnit.test('invalid selectScreens', async assert => {
  assert.ok(true, 'At least one assert must run, even if not running with ?ea');

  /**
   * Tests an invalid combination of allSimScreens and screens-related query parameters, where selectScreens should
   * throw an error
   */
  const testInvalidScreenSelector = (queryString, allSimScreens) => {
    const queryParameterValues = getQueryParameterValues(queryString);
    const description = getDescription(queryString, allSimScreens);
    window.assert && assert.throws(() => {
      selectScreens(allSimScreens, queryParameterValues.homeScreen, QueryStringMachine.containsKeyForString('homeScreen', queryString), queryParameterValues.initialScreen, QueryStringMachine.containsKeyForString('initialScreen', queryString), queryParameterValues.screens, QueryStringMachine.containsKeyForString('screens', queryString), _.noop, () => hs);
    }, `expected error for invalid selectScreens test ${description}`);
  };

  // multi-screen
  testInvalidScreenSelector('?screens=0', [a, b]);
  testInvalidScreenSelector('?screens=3', [a, b]);
  testInvalidScreenSelector('?screens=', [a, b]);
  testInvalidScreenSelector('?initialScreen=0&homeScreen=true&screens=1', [a, b]);
  testInvalidScreenSelector('?initialScreen=0&homeScreen=false&screens=0', [a, b]);
  testInvalidScreenSelector('?initialScreen=0&homeScreen=false&screens=2,1', [a, b]);
  testInvalidScreenSelector('?initialScreen=0&homeScreen=false&screens=1', [a, b]);
  testInvalidScreenSelector('?initialScreen=2&homeScreen=false&screens=1', [a, b]);

  // Like ph-scale_en.html?screens=1,4
  testInvalidScreenSelector('?screens=1,4', [a, b, c]);

  // single-screen
  testInvalidScreenSelector('?initialScreen=0', [a]);
  testInvalidScreenSelector('?initialScreen=2', [a]);
  testInvalidScreenSelector('?homeScreen=true', [a]);
  testInvalidScreenSelector('?screens=0', [a]);
  testInvalidScreenSelector('?screens=2', [a]);
  testInvalidScreenSelector('?screens=2', [a]);

  // These contain errors, display warning dialog, and revert to default.
  // like ph-scale-basics_en.html?screens=2,1
  testInvalidScreenSelector('?screens=2,1', [a]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZWxlY3RTY3JlZW5zIiwiYSIsImIiLCJjIiwiaHMiLCJnZXRRdWVyeVBhcmFtZXRlclZhbHVlcyIsInF1ZXJ5U3RyaW5nIiwiUXVlcnlTdHJpbmdNYWNoaW5lIiwiZ2V0QWxsRm9yU3RyaW5nIiwiaG9tZVNjcmVlbiIsInR5cGUiLCJkZWZhdWx0VmFsdWUiLCJpbml0aWFsU2NyZWVuIiwic2NyZWVucyIsImVsZW1lbnRTY2hlbWEiLCJpc1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsImxlbmd0aCIsIl8iLCJ1bmlxIiwiZm9ybWF0TWVzc2FnZSIsImtleSIsImV4cGVjdGVkUmVzdWx0IiwicmVzdWx0IiwiZGVzY3JpcHRpb24iLCJnZXREZXNjcmlwdGlvbiIsImFsbFNpbVNjcmVlbnMiLCJKU09OIiwic3RyaW5naWZ5IiwiUVVuaXQiLCJ0ZXN0IiwiYXNzZXJ0IiwidGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IiLCJxdWVyeVBhcmFtZXRlclZhbHVlcyIsImNvbnRhaW5zS2V5Rm9yU3RyaW5nIiwibm9vcCIsIm9rIiwiaXNFcXVhbCIsInNlbGVjdGVkU2ltU2NyZWVucyIsImFsbFNjcmVlbnNDcmVhdGVkIiwidGVzdEludmFsaWRTY3JlZW5TZWxlY3RvciIsIndpbmRvdyIsInRocm93cyJdLCJzb3VyY2VzIjpbInNlbGVjdFNjcmVlbnNUZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBRVW5pdCB0ZXN0cyBmb3IgU2NyZWVuU2VsZWN0b3JcclxuICpcclxuICogUG9ydGluZyB0byBUUyB3aWxsIHJlcXVpcmUgcmUtd3JpdGluZyB0ZXN0cyB0byBjcmVhdGUgU2NyZWVuIGZpeHR1cmVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHNlbGVjdFNjcmVlbnMsIHsgU2NyZWVuUmV0dXJuVHlwZSB9IGZyb20gJy4vc2VsZWN0U2NyZWVucy5qcyc7XHJcbmltcG9ydCB7IEFueVNjcmVlbiB9IGZyb20gJy4vU2NyZWVuLmpzJztcclxuaW1wb3J0IEhvbWVTY3JlZW4gZnJvbSAnLi9Ib21lU2NyZWVuLmpzJztcclxuXHJcbi8vIHRlc3Qgc2NyZWVuIGNvbnN0YW50cy4gU2luY2UgdGhlc2UgYXJlIHRlc3RzLCBpdCBpcyBhY3R1YWxseSBtb3JlIHZhbHVhYmxlIHRvIHR5cGVjYXN0IGluc3RlYWQgb2YgbWFraW5nIHRoZXNlIGFjdHVhbCBzY3JlZW5zLlxyXG5jb25zdCBhID0gJ2EnIGFzIHVua25vd24gYXMgQW55U2NyZWVuO1xyXG5jb25zdCBiID0gJ2InIGFzIHVua25vd24gYXMgQW55U2NyZWVuO1xyXG5jb25zdCBjID0gJ2MnIGFzIHVua25vd24gYXMgQW55U2NyZWVuO1xyXG5jb25zdCBocyA9ICdocycgYXMgdW5rbm93biBhcyBIb21lU2NyZWVuO1xyXG5cclxuY29uc3QgZ2V0UXVlcnlQYXJhbWV0ZXJWYWx1ZXMgPSAoIHF1ZXJ5U3RyaW5nOiBzdHJpbmcgKSA9PiB7XHJcblxyXG4gIC8vIFRPRE86IEdldCBzY2hlbWEgZnJvbSBpbml0aWFsaXplLWdsb2JhbHMuanMgaW5zdGVhZCBvZiBkdXBsaWNhdGluZyBoZXJlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NoaXBwZXIvaXNzdWVzLzkzNlxyXG4gIHJldHVybiBRdWVyeVN0cmluZ01hY2hpbmUuZ2V0QWxsRm9yU3RyaW5nKCB7XHJcblxyXG4gICAgaG9tZVNjcmVlbjoge1xyXG4gICAgICB0eXBlOiAnYm9vbGVhbicsXHJcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZVxyXG4gICAgfSxcclxuXHJcbiAgICBpbml0aWFsU2NyZWVuOiB7XHJcbiAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICBkZWZhdWx0VmFsdWU6IDBcclxuICAgIH0sXHJcblxyXG4gICAgc2NyZWVuczoge1xyXG4gICAgICB0eXBlOiAnYXJyYXknLFxyXG4gICAgICBlbGVtZW50U2NoZW1hOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfSxcclxuICAgICAgZGVmYXVsdFZhbHVlOiBbXSxcclxuICAgICAgaXNWYWxpZFZhbHVlOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8ICggdmFsdWUubGVuZ3RoID09PSBfLnVuaXEoIHZhbHVlICkubGVuZ3RoICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgfSwgcXVlcnlTdHJpbmcgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGb3JtYXRzIGEgbWVzc2FnZSBmb3IgZWFjaCB0ZXN0VmFsaWRTY3JlZW5TZWxlY3RvciByZXN1bHRcclxuICovXHJcbmNvbnN0IGZvcm1hdE1lc3NhZ2UgPSAoIGtleToga2V5b2YgU2NyZWVuUmV0dXJuVHlwZSwgZXhwZWN0ZWRSZXN1bHQ6IFNjcmVlblJldHVyblR5cGUsIHJlc3VsdDogU2NyZWVuUmV0dXJuVHlwZSwgZGVzY3JpcHRpb246IHN0cmluZyApOiBzdHJpbmcgPT5cclxuICBgZXhwZWN0ZWQgJHtrZXl9OiAke2V4cGVjdGVkUmVzdWx0WyBrZXkgXX0sIGFjdHVhbCAke2tleX06ICR7cmVzdWx0WyBrZXkgXX0gZm9yIHZhbGlkIHNlbGVjdFNjcmVlbnMgdGVzdCAke2Rlc2NyaXB0aW9ufWA7XHJcblxyXG4vKipcclxuICogRm9ybWF0IHRoZSBxdWVyeSBzdHJpbmcgKyBhbGwgc2ltIHNjcmVlbnMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhlIHRlc3QuXHJcbiAqL1xyXG5jb25zdCBnZXREZXNjcmlwdGlvbiA9ICggcXVlcnlTdHJpbmc6IHN0cmluZywgYWxsU2ltU2NyZWVuczogQW55U2NyZWVuW10gKTogc3RyaW5nID0+IGAke3F1ZXJ5U3RyaW5nfSAke0pTT04uc3RyaW5naWZ5KCBhbGxTaW1TY3JlZW5zICl9YDtcclxuXHJcblFVbml0LnRlc3QoICd2YWxpZCBzZWxlY3RTY3JlZW5zJywgYXN5bmMgYXNzZXJ0ID0+IHtcclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdHMgYSB2YWxpZCBjb21iaW5hdGlvbiBvZiBhbGxTaW1TY3JlZW5zIGFuZCBzY3JlZW5zLXJlbGF0ZWQgcXVlcnkgcGFyYW1ldGVycywgd2hlcmUgdGhlIGV4cGVjdGVkUmVzdWx0IHNob3VsZFxyXG4gICAqIGVxdWFsIHRoZSByZXN1bHQgcmV0dXJuZWQgZnJvbSBTY3JlZW5TZWxlY3Rvci5zZWxlY3RcclxuICAgKi9cclxuICBjb25zdCB0ZXN0VmFsaWRTY3JlZW5TZWxlY3RvciA9ICggcXVlcnlTdHJpbmc6IHN0cmluZywgYWxsU2ltU2NyZWVuczogQW55U2NyZWVuW10sIGV4cGVjdGVkUmVzdWx0OiBTY3JlZW5SZXR1cm5UeXBlICkgPT4ge1xyXG4gICAgY29uc3QgcXVlcnlQYXJhbWV0ZXJWYWx1ZXMgPSBnZXRRdWVyeVBhcmFtZXRlclZhbHVlcyggcXVlcnlTdHJpbmcgKTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBzZWxlY3RTY3JlZW5zKFxyXG4gICAgICBhbGxTaW1TY3JlZW5zLFxyXG4gICAgICBxdWVyeVBhcmFtZXRlclZhbHVlcy5ob21lU2NyZWVuLFxyXG4gICAgICBRdWVyeVN0cmluZ01hY2hpbmUuY29udGFpbnNLZXlGb3JTdHJpbmcoICdob21lU2NyZWVuJywgcXVlcnlTdHJpbmcgKSxcclxuICAgICAgcXVlcnlQYXJhbWV0ZXJWYWx1ZXMuaW5pdGlhbFNjcmVlbixcclxuICAgICAgUXVlcnlTdHJpbmdNYWNoaW5lLmNvbnRhaW5zS2V5Rm9yU3RyaW5nKCAnaW5pdGlhbFNjcmVlbicsIHF1ZXJ5U3RyaW5nICksXHJcbiAgICAgIHF1ZXJ5UGFyYW1ldGVyVmFsdWVzLnNjcmVlbnMsXHJcbiAgICAgIFF1ZXJ5U3RyaW5nTWFjaGluZS5jb250YWluc0tleUZvclN0cmluZyggJ3NjcmVlbnMnLCBxdWVyeVN0cmluZyApLFxyXG4gICAgICBfLm5vb3AsXHJcbiAgICAgICgpID0+IGhzXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZ2V0RGVzY3JpcHRpb24oIHF1ZXJ5U3RyaW5nLCBhbGxTaW1TY3JlZW5zICk7XHJcblxyXG4gICAgLy8gdGVzdCB0aGUgZm91ciByZXR1cm4gdmFsdWVzIGZyb20gc2VsZWN0U2NyZWVuc1xyXG4gICAgYXNzZXJ0Lm9rKCByZXN1bHQuaG9tZVNjcmVlbiA9PT0gZXhwZWN0ZWRSZXN1bHQuaG9tZVNjcmVlbixcclxuICAgICAgZm9ybWF0TWVzc2FnZSggJ2hvbWVTY3JlZW4nLCBleHBlY3RlZFJlc3VsdCwgcmVzdWx0LCBkZXNjcmlwdGlvbiApICk7XHJcbiAgICBhc3NlcnQub2soIHJlc3VsdC5pbml0aWFsU2NyZWVuID09PSBleHBlY3RlZFJlc3VsdC5pbml0aWFsU2NyZWVuLFxyXG4gICAgICBmb3JtYXRNZXNzYWdlKCAnaW5pdGlhbFNjcmVlbicsIGV4cGVjdGVkUmVzdWx0LCByZXN1bHQsIGRlc2NyaXB0aW9uICkgKTtcclxuICAgIGFzc2VydC5vayggXy5pc0VxdWFsKCByZXN1bHQuc2VsZWN0ZWRTaW1TY3JlZW5zLCBleHBlY3RlZFJlc3VsdC5zZWxlY3RlZFNpbVNjcmVlbnMgKSxcclxuICAgICAgZm9ybWF0TWVzc2FnZSggJ3NlbGVjdGVkU2ltU2NyZWVucycsIGV4cGVjdGVkUmVzdWx0LCByZXN1bHQsIGRlc2NyaXB0aW9uICkgKTtcclxuICAgIGFzc2VydC5vayggXy5pc0VxdWFsKCByZXN1bHQuc2NyZWVucywgZXhwZWN0ZWRSZXN1bHQuc2NyZWVucyApLFxyXG4gICAgICBmb3JtYXRNZXNzYWdlKCAnc2NyZWVucycsIGV4cGVjdGVkUmVzdWx0LCByZXN1bHQsIGRlc2NyaXB0aW9uICkgKTtcclxuXHJcbiAgICBhc3NlcnQub2soIF8uaXNFcXVhbCggcmVzdWx0LmFsbFNjcmVlbnNDcmVhdGVkLCBleHBlY3RlZFJlc3VsdC5hbGxTY3JlZW5zQ3JlYXRlZCApLFxyXG4gICAgICBmb3JtYXRNZXNzYWdlKCAnYWxsU2NyZWVuc0NyZWF0ZWQnLCBleHBlY3RlZFJlc3VsdCwgcmVzdWx0LCBkZXNjcmlwdGlvbiApICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gbXVsdGktc2NyZWVuXHJcbiAgdGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IoICc/c2NyZWVucz0xJywgWyBhLCBiIF0sIHtcclxuICAgIGhvbWVTY3JlZW46IG51bGwsXHJcbiAgICBpbml0aWFsU2NyZWVuOiBhLFxyXG4gICAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBbIGEgXSxcclxuICAgIHNjcmVlbnM6IFsgYSBdLFxyXG4gICAgYWxsU2NyZWVuc0NyZWF0ZWQ6IGZhbHNlXHJcbiAgfSApO1xyXG4gIHRlc3RWYWxpZFNjcmVlblNlbGVjdG9yKCAnP3NjcmVlbnM9MicsIFsgYSwgYiBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBudWxsLFxyXG4gICAgaW5pdGlhbFNjcmVlbjogYixcclxuICAgIHNlbGVjdGVkU2ltU2NyZWVuczogWyBiIF0sXHJcbiAgICBzY3JlZW5zOiBbIGIgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiBmYWxzZVxyXG4gIH0gKTtcclxuICB0ZXN0VmFsaWRTY3JlZW5TZWxlY3RvciggJz9zY3JlZW5zPTEsMicsIFsgYSwgYiBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBocyxcclxuICAgIGluaXRpYWxTY3JlZW46IGhzLFxyXG4gICAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBbIGEsIGIgXSxcclxuICAgIHNjcmVlbnM6IFsgaHMsIGEsIGIgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiB0cnVlXHJcbiAgfSApO1xyXG4gIHRlc3RWYWxpZFNjcmVlblNlbGVjdG9yKCAnP3NjcmVlbnM9MiwxJywgWyBhLCBiIF0sIHtcclxuICAgIGhvbWVTY3JlZW46IGhzLFxyXG4gICAgaW5pdGlhbFNjcmVlbjogaHMsXHJcbiAgICBzZWxlY3RlZFNpbVNjcmVlbnM6IFsgYiwgYSBdLFxyXG4gICAgc2NyZWVuczogWyBocywgYiwgYSBdLFxyXG4gICAgYWxsU2NyZWVuc0NyZWF0ZWQ6IHRydWVcclxuICB9ICk7XHJcbiAgdGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IoICc/aG9tZVNjcmVlbj1mYWxzZScsIFsgYSwgYiBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBudWxsLFxyXG4gICAgaW5pdGlhbFNjcmVlbjogYSxcclxuICAgIHNlbGVjdGVkU2ltU2NyZWVuczogWyBhLCBiIF0sXHJcbiAgICBzY3JlZW5zOiBbIGEsIGIgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiBmYWxzZVxyXG4gIH0gKTtcclxuICB0ZXN0VmFsaWRTY3JlZW5TZWxlY3RvciggJz9zY3JlZW5zPTIsMScsIFsgYSwgYiwgYyBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBocyxcclxuICAgIGluaXRpYWxTY3JlZW46IGhzLFxyXG4gICAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBbIGIsIGEgXSxcclxuICAgIHNjcmVlbnM6IFsgaHMsIGIsIGEgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiBmYWxzZVxyXG4gIH0gKTtcclxuICB0ZXN0VmFsaWRTY3JlZW5TZWxlY3RvciggJz9zY3JlZW5zPTMsMScsIFsgYSwgYiwgYyBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBocyxcclxuICAgIGluaXRpYWxTY3JlZW46IGhzLFxyXG4gICAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBbIGMsIGEgXSxcclxuICAgIHNjcmVlbnM6IFsgaHMsIGMsIGEgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiBmYWxzZVxyXG4gIH0gKTtcclxuICB0ZXN0VmFsaWRTY3JlZW5TZWxlY3RvciggJz9zY3JlZW5zPTIsMycsIFsgYSwgYiwgYyBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBocyxcclxuICAgIGluaXRpYWxTY3JlZW46IGhzLFxyXG4gICAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBbIGIsIGMgXSxcclxuICAgIHNjcmVlbnM6IFsgaHMsIGIsIGMgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiBmYWxzZVxyXG4gIH0gKTtcclxuICB0ZXN0VmFsaWRTY3JlZW5TZWxlY3RvciggJz9pbml0aWFsU2NyZWVuPTEmaG9tZVNjcmVlbj1mYWxzZSZzY3JlZW5zPTIsMScsIFsgYSwgYiBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBudWxsLFxyXG4gICAgaW5pdGlhbFNjcmVlbjogYSxcclxuICAgIHNlbGVjdGVkU2ltU2NyZWVuczogWyBiLCBhIF0sXHJcbiAgICBzY3JlZW5zOiBbIGIsIGEgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiBmYWxzZVxyXG4gIH0gKTtcclxuICB0ZXN0VmFsaWRTY3JlZW5TZWxlY3RvciggJz9pbml0aWFsU2NyZWVuPTAmaG9tZVNjcmVlbj10cnVlJnNjcmVlbnM9MiwxJywgWyBhLCBiIF0sIHtcclxuICAgIGhvbWVTY3JlZW46IGhzLFxyXG4gICAgaW5pdGlhbFNjcmVlbjogaHMsXHJcbiAgICBzZWxlY3RlZFNpbVNjcmVlbnM6IFsgYiwgYSBdLFxyXG4gICAgc2NyZWVuczogWyBocywgYiwgYSBdLFxyXG4gICAgYWxsU2NyZWVuc0NyZWF0ZWQ6IHRydWVcclxuICB9ICk7XHJcbiAgdGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IoICc/aW5pdGlhbFNjcmVlbj0xJmhvbWVTY3JlZW49dHJ1ZSZzY3JlZW5zPTIsMScsIFsgYSwgYiBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBocyxcclxuICAgIGluaXRpYWxTY3JlZW46IGEsXHJcbiAgICBzZWxlY3RlZFNpbVNjcmVlbnM6IFsgYiwgYSBdLFxyXG4gICAgc2NyZWVuczogWyBocywgYiwgYSBdLFxyXG4gICAgYWxsU2NyZWVuc0NyZWF0ZWQ6IHRydWVcclxuICB9ICk7XHJcbiAgdGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IoICc/aW5pdGlhbFNjcmVlbj0yJmhvbWVTY3JlZW49dHJ1ZSZzY3JlZW5zPTEsMicsIFsgYSwgYiBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBocyxcclxuICAgIGluaXRpYWxTY3JlZW46IGIsXHJcbiAgICBzZWxlY3RlZFNpbVNjcmVlbnM6IFsgYSwgYiBdLFxyXG4gICAgc2NyZWVuczogWyBocywgYSwgYiBdLFxyXG4gICAgYWxsU2NyZWVuc0NyZWF0ZWQ6IHRydWVcclxuICB9ICk7XHJcbiAgdGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IoICc/aW5pdGlhbFNjcmVlbj0xJmhvbWVTY3JlZW49ZmFsc2Umc2NyZWVucz0xJywgWyBhLCBiIF0sIHtcclxuICAgIGhvbWVTY3JlZW46IG51bGwsXHJcbiAgICBpbml0aWFsU2NyZWVuOiBhLFxyXG4gICAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBbIGEgXSxcclxuICAgIHNjcmVlbnM6IFsgYSBdLFxyXG4gICAgYWxsU2NyZWVuc0NyZWF0ZWQ6IGZhbHNlXHJcbiAgfSApO1xyXG4gIHRlc3RWYWxpZFNjcmVlblNlbGVjdG9yKCAnP2luaXRpYWxTY3JlZW49MiZob21lU2NyZWVuPWZhbHNlJnNjcmVlbnM9MicsIFsgYSwgYiBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBudWxsLFxyXG4gICAgaW5pdGlhbFNjcmVlbjogYixcclxuICAgIHNlbGVjdGVkU2ltU2NyZWVuczogWyBiIF0sXHJcbiAgICBzY3JlZW5zOiBbIGIgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiBmYWxzZVxyXG4gIH0gKTtcclxuXHJcbiAgLy8gc2luZ2xlLXNjcmVlblxyXG4gIC8vIExpa2UgcGgtc2NhbGUtYmFzaWNzX2VuLmh0bWw/c2NyZWVucz0xXHJcbiAgdGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IoICc/c2NyZWVucz0xJywgWyBhIF0sIHtcclxuICAgIGhvbWVTY3JlZW46IG51bGwsXHJcbiAgICBpbml0aWFsU2NyZWVuOiBhLFxyXG4gICAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBbIGEgXSxcclxuICAgIHNjcmVlbnM6IFsgYSBdLFxyXG4gICAgYWxsU2NyZWVuc0NyZWF0ZWQ6IHRydWVcclxuICB9ICk7XHJcbiAgdGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IoICc/aW5pdGlhbFNjcmVlbj0xJywgWyBhIF0sIHtcclxuICAgIGhvbWVTY3JlZW46IG51bGwsXHJcbiAgICBpbml0aWFsU2NyZWVuOiBhLFxyXG4gICAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBbIGEgXSxcclxuICAgIHNjcmVlbnM6IFsgYSBdLFxyXG4gICAgYWxsU2NyZWVuc0NyZWF0ZWQ6IHRydWVcclxuICB9ICk7XHJcbiAgdGVzdFZhbGlkU2NyZWVuU2VsZWN0b3IoICc/aG9tZVNjcmVlbj1mYWxzZScsIFsgYSBdLCB7XHJcbiAgICBob21lU2NyZWVuOiBudWxsLFxyXG4gICAgaW5pdGlhbFNjcmVlbjogYSxcclxuICAgIHNlbGVjdGVkU2ltU2NyZWVuczogWyBhIF0sXHJcbiAgICBzY3JlZW5zOiBbIGEgXSxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiB0cnVlXHJcbiAgfSApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnaW52YWxpZCBzZWxlY3RTY3JlZW5zJywgYXN5bmMgYXNzZXJ0ID0+IHtcclxuXHJcbiAgYXNzZXJ0Lm9rKCB0cnVlLCAnQXQgbGVhc3Qgb25lIGFzc2VydCBtdXN0IHJ1biwgZXZlbiBpZiBub3QgcnVubmluZyB3aXRoID9lYScgKTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdHMgYW4gaW52YWxpZCBjb21iaW5hdGlvbiBvZiBhbGxTaW1TY3JlZW5zIGFuZCBzY3JlZW5zLXJlbGF0ZWQgcXVlcnkgcGFyYW1ldGVycywgd2hlcmUgc2VsZWN0U2NyZWVucyBzaG91bGRcclxuICAgKiB0aHJvdyBhbiBlcnJvclxyXG4gICAqL1xyXG4gIGNvbnN0IHRlc3RJbnZhbGlkU2NyZWVuU2VsZWN0b3IgPSAoIHF1ZXJ5U3RyaW5nOiBzdHJpbmcsIGFsbFNpbVNjcmVlbnM6IEFueVNjcmVlbltdICkgPT4ge1xyXG4gICAgY29uc3QgcXVlcnlQYXJhbWV0ZXJWYWx1ZXMgPSBnZXRRdWVyeVBhcmFtZXRlclZhbHVlcyggcXVlcnlTdHJpbmcgKTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZ2V0RGVzY3JpcHRpb24oIHF1ZXJ5U3RyaW5nLCBhbGxTaW1TY3JlZW5zICk7XHJcblxyXG4gICAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcbiAgICAgIHNlbGVjdFNjcmVlbnMoXHJcbiAgICAgICAgYWxsU2ltU2NyZWVucyxcclxuICAgICAgICBxdWVyeVBhcmFtZXRlclZhbHVlcy5ob21lU2NyZWVuLFxyXG4gICAgICAgIFF1ZXJ5U3RyaW5nTWFjaGluZS5jb250YWluc0tleUZvclN0cmluZyggJ2hvbWVTY3JlZW4nLCBxdWVyeVN0cmluZyApLFxyXG4gICAgICAgIHF1ZXJ5UGFyYW1ldGVyVmFsdWVzLmluaXRpYWxTY3JlZW4sXHJcbiAgICAgICAgUXVlcnlTdHJpbmdNYWNoaW5lLmNvbnRhaW5zS2V5Rm9yU3RyaW5nKCAnaW5pdGlhbFNjcmVlbicsIHF1ZXJ5U3RyaW5nICksXHJcbiAgICAgICAgcXVlcnlQYXJhbWV0ZXJWYWx1ZXMuc2NyZWVucyxcclxuICAgICAgICBRdWVyeVN0cmluZ01hY2hpbmUuY29udGFpbnNLZXlGb3JTdHJpbmcoICdzY3JlZW5zJywgcXVlcnlTdHJpbmcgKSxcclxuICAgICAgICBfLm5vb3AsXHJcbiAgICAgICAgKCkgPT4gaHNcclxuICAgICAgKTtcclxuICAgIH0sIGBleHBlY3RlZCBlcnJvciBmb3IgaW52YWxpZCBzZWxlY3RTY3JlZW5zIHRlc3QgJHtkZXNjcmlwdGlvbn1gICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gbXVsdGktc2NyZWVuXHJcbiAgdGVzdEludmFsaWRTY3JlZW5TZWxlY3RvciggJz9zY3JlZW5zPTAnLCBbIGEsIGIgXSApO1xyXG4gIHRlc3RJbnZhbGlkU2NyZWVuU2VsZWN0b3IoICc/c2NyZWVucz0zJywgWyBhLCBiIF0gKTtcclxuICB0ZXN0SW52YWxpZFNjcmVlblNlbGVjdG9yKCAnP3NjcmVlbnM9JywgWyBhLCBiIF0gKTtcclxuICB0ZXN0SW52YWxpZFNjcmVlblNlbGVjdG9yKCAnP2luaXRpYWxTY3JlZW49MCZob21lU2NyZWVuPXRydWUmc2NyZWVucz0xJywgWyBhLCBiIF0gKTtcclxuICB0ZXN0SW52YWxpZFNjcmVlblNlbGVjdG9yKCAnP2luaXRpYWxTY3JlZW49MCZob21lU2NyZWVuPWZhbHNlJnNjcmVlbnM9MCcsIFsgYSwgYiBdICk7XHJcbiAgdGVzdEludmFsaWRTY3JlZW5TZWxlY3RvciggJz9pbml0aWFsU2NyZWVuPTAmaG9tZVNjcmVlbj1mYWxzZSZzY3JlZW5zPTIsMScsIFsgYSwgYiBdICk7XHJcbiAgdGVzdEludmFsaWRTY3JlZW5TZWxlY3RvciggJz9pbml0aWFsU2NyZWVuPTAmaG9tZVNjcmVlbj1mYWxzZSZzY3JlZW5zPTEnLCBbIGEsIGIgXSApO1xyXG4gIHRlc3RJbnZhbGlkU2NyZWVuU2VsZWN0b3IoICc/aW5pdGlhbFNjcmVlbj0yJmhvbWVTY3JlZW49ZmFsc2Umc2NyZWVucz0xJywgWyBhLCBiIF0gKTtcclxuXHJcbiAgLy8gTGlrZSBwaC1zY2FsZV9lbi5odG1sP3NjcmVlbnM9MSw0XHJcbiAgdGVzdEludmFsaWRTY3JlZW5TZWxlY3RvciggJz9zY3JlZW5zPTEsNCcsIFsgYSwgYiwgYyBdICk7XHJcblxyXG4gIC8vIHNpbmdsZS1zY3JlZW5cclxuICB0ZXN0SW52YWxpZFNjcmVlblNlbGVjdG9yKCAnP2luaXRpYWxTY3JlZW49MCcsIFsgYSBdICk7XHJcbiAgdGVzdEludmFsaWRTY3JlZW5TZWxlY3RvciggJz9pbml0aWFsU2NyZWVuPTInLCBbIGEgXSApO1xyXG4gIHRlc3RJbnZhbGlkU2NyZWVuU2VsZWN0b3IoICc/aG9tZVNjcmVlbj10cnVlJywgWyBhIF0gKTtcclxuICB0ZXN0SW52YWxpZFNjcmVlblNlbGVjdG9yKCAnP3NjcmVlbnM9MCcsIFsgYSBdICk7XHJcbiAgdGVzdEludmFsaWRTY3JlZW5TZWxlY3RvciggJz9zY3JlZW5zPTInLCBbIGEgXSApO1xyXG5cclxuICB0ZXN0SW52YWxpZFNjcmVlblNlbGVjdG9yKCAnP3NjcmVlbnM9MicsIFsgYSBdICk7XHJcblxyXG4gIC8vIFRoZXNlIGNvbnRhaW4gZXJyb3JzLCBkaXNwbGF5IHdhcm5pbmcgZGlhbG9nLCBhbmQgcmV2ZXJ0IHRvIGRlZmF1bHQuXHJcbiAgLy8gbGlrZSBwaC1zY2FsZS1iYXNpY3NfZW4uaHRtbD9zY3JlZW5zPTIsMVxyXG4gIHRlc3RJbnZhbGlkU2NyZWVuU2VsZWN0b3IoICc/c2NyZWVucz0yLDEnLCBbIGEgXSApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxhQUFhLE1BQTRCLG9CQUFvQjtBQUlwRTtBQUNBLE1BQU1DLENBQUMsR0FBRyxHQUEyQjtBQUNyQyxNQUFNQyxDQUFDLEdBQUcsR0FBMkI7QUFDckMsTUFBTUMsQ0FBQyxHQUFHLEdBQTJCO0FBQ3JDLE1BQU1DLEVBQUUsR0FBRyxJQUE2QjtBQUV4QyxNQUFNQyx1QkFBdUIsR0FBS0MsV0FBbUIsSUFBTTtFQUV6RDtFQUNBLE9BQU9DLGtCQUFrQixDQUFDQyxlQUFlLENBQUU7SUFFekNDLFVBQVUsRUFBRTtNQUNWQyxJQUFJLEVBQUUsU0FBUztNQUNmQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQztJQUVEQyxhQUFhLEVBQUU7TUFDYkYsSUFBSSxFQUFFLFFBQVE7TUFDZEMsWUFBWSxFQUFFO0lBQ2hCLENBQUM7SUFFREUsT0FBTyxFQUFFO01BQ1BILElBQUksRUFBRSxPQUFPO01BQ2JJLGFBQWEsRUFBRTtRQUNiSixJQUFJLEVBQUU7TUFDUixDQUFDO01BQ0RDLFlBQVksRUFBRSxFQUFFO01BQ2hCSSxZQUFZLEVBQUUsU0FBQUEsQ0FBVUMsS0FBSyxFQUFHO1FBQzlCLE9BQU9BLEtBQUssS0FBSyxJQUFJLElBQU1BLEtBQUssQ0FBQ0MsTUFBTSxLQUFLQyxDQUFDLENBQUNDLElBQUksQ0FBRUgsS0FBTSxDQUFDLENBQUNDLE1BQVE7TUFDdEU7SUFDRjtFQUVGLENBQUMsRUFBRVgsV0FBWSxDQUFDO0FBQ2xCLENBQUM7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