// Copyright 2021-2022, University of Colorado Boulder

/**
 * A listener that can be added to a Display to (typically) dismiss a UI component after we receive a press.
 * Provide a listener to be called when the Pointer is released. It will be called unless this there is
 * listener cancel/interruption.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import joist from './joist.js';
import dotRandom from '../../dot/js/dotRandom.js';
class DisplayClickToDismissListener {
  /**
   * @param listener - The listener to be called when the Pointer goes up, likely to dismiss something.
   */
  constructor(listener) {
    // The active Pointer for this listener, after a down event a subsequent up event on this Pointer will trigger
    // the behavior of `listener`.
    this.pointer = null;

    // A listener added to the Pointer on a down event which will do the work of `listener` when the pointer is
    // released. If this Pointer listener is interrupted we will never call the `listener`.
    this.pointerListener = {
      up: event => {
        listener(event);
        this.dismissPointer(this.pointer);
      },
      interrupt: () => {
        this.dismissPointer(this.pointer);
      },
      cancel: () => {
        this.dismissPointer(this.pointer);
      }
    };
  }

  /**
   * Part of the scenery Input API.
   */
  down(event) {
    // When fuzz testing we want to exercise the component that is going to be dismissed so this should keep it up
    // long enough to hopefully receive some fuzzing.
    if (phet.chipper.isFuzzEnabled() && dotRandom.nextDouble() < 0.99) {
      return;
    }
    this.observePointer(event.pointer);
  }

  /**
   * Attach a listener to the Pointer that will watch when it goes up.
   */
  observePointer(pointer) {
    // only observe one Pointer (for multitouch) and don't try to add a listener if the Pointer is already attached
    if (this.pointer === null && !pointer.isAttached()) {
      this.pointer = pointer;
      this.pointer.addInputListener(this.pointerListener, true);
    }
  }

  /**
   * Remove the attached listener from the Pointer and clear it (if we are observing currently observing a Pointer).
   */
  dismissPointer(pointer) {
    if (this.pointer !== null) {
      assert && assert(this.pointerListener, 'There should be a pointerListener to remove.');
      this.pointer.removeInputListener(this.pointerListener);
      this.pointer = null;
    }
  }
  dispose() {
    this.dismissPointer(this.pointer);
  }
}
joist.register('DisplayClickToDismissListener', DisplayClickToDismissListener);
export default DisplayClickToDismissListener;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsImRvdFJhbmRvbSIsIkRpc3BsYXlDbGlja1RvRGlzbWlzc0xpc3RlbmVyIiwiY29uc3RydWN0b3IiLCJsaXN0ZW5lciIsInBvaW50ZXIiLCJwb2ludGVyTGlzdGVuZXIiLCJ1cCIsImV2ZW50IiwiZGlzbWlzc1BvaW50ZXIiLCJpbnRlcnJ1cHQiLCJjYW5jZWwiLCJkb3duIiwicGhldCIsImNoaXBwZXIiLCJpc0Z1enpFbmFibGVkIiwibmV4dERvdWJsZSIsIm9ic2VydmVQb2ludGVyIiwiaXNBdHRhY2hlZCIsImFkZElucHV0TGlzdGVuZXIiLCJhc3NlcnQiLCJyZW1vdmVJbnB1dExpc3RlbmVyIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGlzcGxheUNsaWNrVG9EaXNtaXNzTGlzdGVuZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBsaXN0ZW5lciB0aGF0IGNhbiBiZSBhZGRlZCB0byBhIERpc3BsYXkgdG8gKHR5cGljYWxseSkgZGlzbWlzcyBhIFVJIGNvbXBvbmVudCBhZnRlciB3ZSByZWNlaXZlIGEgcHJlc3MuXHJcbiAqIFByb3ZpZGUgYSBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgUG9pbnRlciBpcyByZWxlYXNlZC4gSXQgd2lsbCBiZSBjYWxsZWQgdW5sZXNzIHRoaXMgdGhlcmUgaXNcclxuICogbGlzdGVuZXIgY2FuY2VsL2ludGVycnVwdGlvbi5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGpvaXN0IGZyb20gJy4vam9pc3QuanMnO1xyXG5pbXBvcnQgeyBUSW5wdXRMaXN0ZW5lciwgUG9pbnRlciwgU2NlbmVyeUV2ZW50LCBTY2VuZXJ5TGlzdGVuZXJGdW5jdGlvbiB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcblxyXG5jbGFzcyBEaXNwbGF5Q2xpY2tUb0Rpc21pc3NMaXN0ZW5lciB7XHJcbiAgcHJpdmF0ZSBwb2ludGVyOiBudWxsIHwgUG9pbnRlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IHBvaW50ZXJMaXN0ZW5lcjogVElucHV0TGlzdGVuZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgUG9pbnRlciBnb2VzIHVwLCBsaWtlbHkgdG8gZGlzbWlzcyBzb21ldGhpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsaXN0ZW5lcjogU2NlbmVyeUxpc3RlbmVyRnVuY3Rpb24gKSB7XHJcblxyXG4gICAgLy8gVGhlIGFjdGl2ZSBQb2ludGVyIGZvciB0aGlzIGxpc3RlbmVyLCBhZnRlciBhIGRvd24gZXZlbnQgYSBzdWJzZXF1ZW50IHVwIGV2ZW50IG9uIHRoaXMgUG9pbnRlciB3aWxsIHRyaWdnZXJcclxuICAgIC8vIHRoZSBiZWhhdmlvciBvZiBgbGlzdGVuZXJgLlxyXG4gICAgdGhpcy5wb2ludGVyID0gbnVsbDtcclxuXHJcbiAgICAvLyBBIGxpc3RlbmVyIGFkZGVkIHRvIHRoZSBQb2ludGVyIG9uIGEgZG93biBldmVudCB3aGljaCB3aWxsIGRvIHRoZSB3b3JrIG9mIGBsaXN0ZW5lcmAgd2hlbiB0aGUgcG9pbnRlciBpc1xyXG4gICAgLy8gcmVsZWFzZWQuIElmIHRoaXMgUG9pbnRlciBsaXN0ZW5lciBpcyBpbnRlcnJ1cHRlZCB3ZSB3aWxsIG5ldmVyIGNhbGwgdGhlIGBsaXN0ZW5lcmAuXHJcbiAgICB0aGlzLnBvaW50ZXJMaXN0ZW5lciA9IHtcclxuICAgICAgdXA6ICggZXZlbnQ6IFNjZW5lcnlFdmVudCApID0+IHtcclxuICAgICAgICBsaXN0ZW5lciggZXZlbnQgKTtcclxuICAgICAgICB0aGlzLmRpc21pc3NQb2ludGVyKCB0aGlzLnBvaW50ZXIgKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGludGVycnVwdDogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZGlzbWlzc1BvaW50ZXIoIHRoaXMucG9pbnRlciApO1xyXG4gICAgICB9LFxyXG4gICAgICBjYW5jZWw6ICgpID0+IHtcclxuICAgICAgICB0aGlzLmRpc21pc3NQb2ludGVyKCB0aGlzLnBvaW50ZXIgKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhcnQgb2YgdGhlIHNjZW5lcnkgSW5wdXQgQVBJLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb3duKCBldmVudDogU2NlbmVyeUV2ZW50ICk6IHZvaWQge1xyXG5cclxuICAgIC8vIFdoZW4gZnV6eiB0ZXN0aW5nIHdlIHdhbnQgdG8gZXhlcmNpc2UgdGhlIGNvbXBvbmVudCB0aGF0IGlzIGdvaW5nIHRvIGJlIGRpc21pc3NlZCBzbyB0aGlzIHNob3VsZCBrZWVwIGl0IHVwXHJcbiAgICAvLyBsb25nIGVub3VnaCB0byBob3BlZnVsbHkgcmVjZWl2ZSBzb21lIGZ1enppbmcuXHJcbiAgICBpZiAoIHBoZXQuY2hpcHBlci5pc0Z1enpFbmFibGVkKCkgJiYgZG90UmFuZG9tLm5leHREb3VibGUoKSA8IDAuOTkgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm9ic2VydmVQb2ludGVyKCBldmVudC5wb2ludGVyICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBdHRhY2ggYSBsaXN0ZW5lciB0byB0aGUgUG9pbnRlciB0aGF0IHdpbGwgd2F0Y2ggd2hlbiBpdCBnb2VzIHVwLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgb2JzZXJ2ZVBvaW50ZXIoIHBvaW50ZXI6IFBvaW50ZXIgKTogdm9pZCB7XHJcblxyXG4gICAgLy8gb25seSBvYnNlcnZlIG9uZSBQb2ludGVyIChmb3IgbXVsdGl0b3VjaCkgYW5kIGRvbid0IHRyeSB0byBhZGQgYSBsaXN0ZW5lciBpZiB0aGUgUG9pbnRlciBpcyBhbHJlYWR5IGF0dGFjaGVkXHJcbiAgICBpZiAoIHRoaXMucG9pbnRlciA9PT0gbnVsbCAmJiAhcG9pbnRlci5pc0F0dGFjaGVkKCkgKSB7XHJcbiAgICAgIHRoaXMucG9pbnRlciA9IHBvaW50ZXI7XHJcbiAgICAgIHRoaXMucG9pbnRlci5hZGRJbnB1dExpc3RlbmVyKCB0aGlzLnBvaW50ZXJMaXN0ZW5lciwgdHJ1ZSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIHRoZSBhdHRhY2hlZCBsaXN0ZW5lciBmcm9tIHRoZSBQb2ludGVyIGFuZCBjbGVhciBpdCAoaWYgd2UgYXJlIG9ic2VydmluZyBjdXJyZW50bHkgb2JzZXJ2aW5nIGEgUG9pbnRlcikuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBkaXNtaXNzUG9pbnRlciggcG9pbnRlcjogUG9pbnRlciB8IG51bGwgKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMucG9pbnRlciAhPT0gbnVsbCApIHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5wb2ludGVyTGlzdGVuZXIsICdUaGVyZSBzaG91bGQgYmUgYSBwb2ludGVyTGlzdGVuZXIgdG8gcmVtb3ZlLicgKTtcclxuICAgICAgdGhpcy5wb2ludGVyLnJlbW92ZUlucHV0TGlzdGVuZXIoIHRoaXMucG9pbnRlckxpc3RlbmVyICk7XHJcbiAgICAgIHRoaXMucG9pbnRlciA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzbWlzc1BvaW50ZXIoIHRoaXMucG9pbnRlciApO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdEaXNwbGF5Q2xpY2tUb0Rpc21pc3NMaXN0ZW5lcicsIERpc3BsYXlDbGlja1RvRGlzbWlzc0xpc3RlbmVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IERpc3BsYXlDbGlja1RvRGlzbWlzc0xpc3RlbmVyO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxZQUFZO0FBRTlCLE9BQU9DLFNBQVMsTUFBTSwyQkFBMkI7QUFFakQsTUFBTUMsNkJBQTZCLENBQUM7RUFJbEM7QUFDRjtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLFFBQWlDLEVBQUc7SUFFdEQ7SUFDQTtJQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUk7O0lBRW5CO0lBQ0E7SUFDQSxJQUFJLENBQUNDLGVBQWUsR0FBRztNQUNyQkMsRUFBRSxFQUFJQyxLQUFtQixJQUFNO1FBQzdCSixRQUFRLENBQUVJLEtBQU0sQ0FBQztRQUNqQixJQUFJLENBQUNDLGNBQWMsQ0FBRSxJQUFJLENBQUNKLE9BQVEsQ0FBQztNQUNyQyxDQUFDO01BRURLLFNBQVMsRUFBRUEsQ0FBQSxLQUFNO1FBQ2YsSUFBSSxDQUFDRCxjQUFjLENBQUUsSUFBSSxDQUFDSixPQUFRLENBQUM7TUFDckMsQ0FBQztNQUNETSxNQUFNLEVBQUVBLENBQUEsS0FBTTtRQUNaLElBQUksQ0FBQ0YsY0FBYyxDQUFFLElBQUksQ0FBQ0osT0FBUSxDQUFDO01BQ3JDO0lBQ0YsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtFQUNTTyxJQUFJQSxDQUFFSixLQUFtQixFQUFTO0lBRXZDO0lBQ0E7SUFDQSxJQUFLSyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDLENBQUMsSUFBSWQsU0FBUyxDQUFDZSxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRztNQUNuRTtJQUNGO0lBRUEsSUFBSSxDQUFDQyxjQUFjLENBQUVULEtBQUssQ0FBQ0gsT0FBUSxDQUFDO0VBQ3RDOztFQUVBO0FBQ0Y7QUFDQTtFQUNVWSxjQUFjQSxDQUFFWixPQUFnQixFQUFTO0lBRS9DO0lBQ0EsSUFBSyxJQUFJLENBQUNBLE9BQU8sS0FBSyxJQUFJLElBQUksQ0FBQ0EsT0FBTyxDQUFDYSxVQUFVLENBQUMsQ0FBQyxFQUFHO01BQ3BELElBQUksQ0FBQ2IsT0FBTyxHQUFHQSxPQUFPO01BQ3RCLElBQUksQ0FBQ0EsT0FBTyxDQUFDYyxnQkFBZ0IsQ0FBRSxJQUFJLENBQUNiLGVBQWUsRUFBRSxJQUFLLENBQUM7SUFDN0Q7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7RUFDVUcsY0FBY0EsQ0FBRUosT0FBdUIsRUFBUztJQUN0RCxJQUFLLElBQUksQ0FBQ0EsT0FBTyxLQUFLLElBQUksRUFBRztNQUMzQmUsTUFBTSxJQUFJQSxNQUFNLENBQUUsSUFBSSxDQUFDZCxlQUFlLEVBQUUsOENBQStDLENBQUM7TUFDeEYsSUFBSSxDQUFDRCxPQUFPLENBQUNnQixtQkFBbUIsQ0FBRSxJQUFJLENBQUNmLGVBQWdCLENBQUM7TUFDeEQsSUFBSSxDQUFDRCxPQUFPLEdBQUcsSUFBSTtJQUNyQjtFQUNGO0VBRU9pQixPQUFPQSxDQUFBLEVBQVM7SUFDckIsSUFBSSxDQUFDYixjQUFjLENBQUUsSUFBSSxDQUFDSixPQUFRLENBQUM7RUFDckM7QUFDRjtBQUVBTCxLQUFLLENBQUN1QixRQUFRLENBQUUsK0JBQStCLEVBQUVyQiw2QkFBOEIsQ0FBQztBQUNoRixlQUFlQSw2QkFBNkIifQ==