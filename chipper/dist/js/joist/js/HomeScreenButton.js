// Copyright 2020-2023, University of Colorado Boulder

/**
 * A HomeScreenButton is displayed on the HomeScreen for choosing a screen. The button can be in a selected or
 * unselected state - it's large with a yellow frame in its selected state, and small in its unselected state.
 * Selecting the button when in its "selected" state will result in that screen being chosen.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import BooleanProperty from '../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../axon/js/DerivedProperty.js';
import Utils from '../../dot/js/Utils.js';
import { Shape } from '../../kite/js/imports.js';
import merge from '../../phet-core/js/merge.js';
import optionize from '../../phet-core/js/optionize.js';
import PhetColorScheme from '../../scenery-phet/js/PhetColorScheme.js';
import PhetFont from '../../scenery-phet/js/PhetFont.js';
import { FireListener, Node, PDOMPeer, Rectangle, Text, VBox, Voicing } from '../../scenery/js/imports.js';
import EventType from '../../tandem/js/EventType.js';
import Frame from './Frame.js';
import joist from './joist.js';
import Utterance from '../../utterance-queue/js/Utterance.js';
// constants
const LARGE_ICON_HEIGHT = 140;
class HomeScreenButton extends Voicing(VBox) {
  constructor(screen, homeScreenModel, providedOptions) {
    const options = optionize()({
      cursor: 'pointer',
      showUnselectedHomeScreenIconFrame: false,
      // put a frame around unselected home screen icons

      // pdom
      tagName: 'button',
      appendDescription: true,
      containerTagName: 'li',
      // phet-io
      phetioEventType: EventType.USER,
      phetioDocumentation: 'A button on the home screen for choosing a simulation screen'
    }, providedOptions);

    // derives a boolean value from homeScreenModel.selectedScreenProperty that says if this button is selected on the
    // home screen.
    const isSelectedProperty = new DerivedProperty([homeScreenModel.selectedScreenProperty], selectedScreen => {
      return selectedScreen === screen;
    });

    // true if this button has focus or mouseover
    const isHighlightedProperty = new BooleanProperty(false);

    // maps the number of screens to a scale for the small icons. The scale is percentage of LARGE_ICON_HEIGHT.
    let smallIconScale = Utils.linear(2, 4, 0.875, 0.50, homeScreenModel.simScreens.length);
    if (homeScreenModel.simScreens.length >= 5) {
      smallIconScale = 0.4;
    }
    const smallIconHeight = smallIconScale * LARGE_ICON_HEIGHT;
    assert && assert(screen.homeScreenIcon, `homeScreenIcon is required for screen ${screen.nameProperty.value}`);
    const homeScreenIcon = screen.homeScreenIcon;

    // create an icon for each size
    const smallIcon = new Node({
      children: [homeScreenIcon],
      scale: smallIconHeight / homeScreenIcon.height
    });
    const largeIcon = new Node({
      children: [homeScreenIcon],
      scale: LARGE_ICON_HEIGHT / homeScreenIcon.height
    });

    // create a frame for each size
    const smallFrame = new Rectangle(0, 0, smallIcon.width, smallIcon.height, {
      stroke: options.showUnselectedHomeScreenIconFrame ? PhetColorScheme.SCREEN_ICON_FRAME : null,
      lineWidth: 0.7
    });
    const largeFrame = new Frame(largeIcon);

    // create one node for the each of large and small frame + icon pairs
    const smallNode = new Node({
      children: [smallFrame, smallIcon]
    });
    const largeNode = new Node({
      children: [largeFrame, largeIcon]
    });

    // container for the icon and frame, children updated when isSelectedProperty changes
    const nodeContainer = new Node({
      // pdom - the icon may have focusable components in its graphic but they should be invisible for Interactive
      // Description, the button is all we need for accessibility
      pdomVisible: false
    });

    // text for the button
    const text = new Text(screen.nameProperty, {
      tandem: options.tandem.createTandem('text'),
      stringPropertyOptions: {
        phetioReadOnly: true
      } // text is updated via screen.nameProperty
    });

    super(merge({
      children: [nodeContainer, text]
    }, options));
    this.screen = screen;
    this.addAriaDescribedbyAssociation({
      otherNode: this,
      otherElementName: PDOMPeer.DESCRIPTION_SIBLING,
      thisElementName: PDOMPeer.PRIMARY_SIBLING
    });

    // create large and small settings
    const settings = {
      small: {
        node: [smallNode],
        font: new PhetFont(18),
        spacing: 3
      },
      large: {
        node: [largeNode],
        font: new PhetFont(42),
        spacing: 0
      }
    };

    // sets the opacity of the icon and fill of the text
    const setOpacityAndFill = () => {
      const opacity = isSelectedProperty.value || isHighlightedProperty.value ? 1 : 0.5;
      largeIcon.opacity = opacity;
      smallIcon.opacity = opacity;
      text.fill = isSelectedProperty.value || isHighlightedProperty.value ? 'white' : 'gray';
    };

    // update pieces that change when the button is selected or unselected
    isSelectedProperty.link(isSelected => {
      const data = isSelected ? settings.large : settings.small;

      // apply settings for the current size
      nodeContainer.children = data.node;
      text.font = data.font;
      text.maxWidth = nodeContainer.width;
      setOpacityAndFill();
      this.setSpacing(data.spacing);
    });

    // update the appearance when the button is highlighted
    isHighlightedProperty.link(isHighlighted => {
      largeFrame.setHighlighted(isHighlighted);
      setOpacityAndFill();
    });

    // Create a new Utterance that isn't registered through Voicing so that it isn't silenced when the
    // home screen is hidden upon selection. (invisible nodes have their voicing silenced).
    const buttonSelectionUtterance = new Utterance();
    let buttonWasAlreadySelected = false;

    // If the button is already selected, then set the sim's screen to be its corresponding screen. Otherwise, make the
    // button selected. The one exception to the former sentence is due to the desired behavior of selecting on
    // touchover, in which case we need to guard on touchdown since we don't want to double fire for touchover and
    // touchdown, see https://github.com/phetsims/joist/issues/624
    const buttonFired = () => {
      const pointerIsTouchLike = fireListener.pointer && fireListener.pointer.isTouchLike();
      if (isSelectedProperty.value && (!pointerIsTouchLike || buttonWasAlreadySelected)) {
        // Select the screen that corresponds to this button.  This will make that screen appear to the user and the
        // home screen disappear.
        homeScreenModel.screenProperty.value = screen;
        this.voicingSpeakFullResponse({
          objectResponse: null,
          hintResponse: null,
          utterance: buttonSelectionUtterance
        });
      } else {
        // Select the screen button.  This causes the button to enlarge, but doesn't go to the screen.
        homeScreenModel.selectedScreenProperty.value = screen;
        this.voicingSpeakFullResponse({
          objectResponse: null,
          contextResponse: null
        });
      }
    };
    const fireListener = new FireListener({
      fire: buttonFired,
      tandem: options.tandem.createTandem('fireListener')
    });
    this.addInputListener(fireListener);
    this.addInputListener({
      focus: event => {
        !isSelectedProperty.value && fireListener.fire(event);
      }
    });

    // when a screen reader is in use, the button may be selected with the virtual cursor
    // without focus landing on the button - toggle focus (and therefore size) in this case
    this.addInputListener({
      click: () => this.focus()
    });
    this.addInputListener({
      focus: () => isHighlightedProperty.set(true),
      blur: () => isHighlightedProperty.set(false),
      over: () => isHighlightedProperty.set(true),
      out: () => isHighlightedProperty.set(false)
    });

    // If you touch an unselected button, it becomes selected. If then without lifting your finger you swipe over to the
    // next button, that one becomes selected instead.
    const onTouchLikeOver = () => {
      buttonWasAlreadySelected = homeScreenModel.selectedScreenProperty.value === screen;
      homeScreenModel.selectedScreenProperty.value = screen;
    };
    this.addInputListener({
      touchover: onTouchLikeOver,
      penover: onTouchLikeOver
    });

    // set the mouseArea and touchArea to be the whole local bounds of this node, because if it just relies on the
    // bounds of the icon and text, then there is a gap in between them. Since the button can change size, this
    // assignment needs to happen anytime the bounds change.
    this.boundsProperty.link(() => {
      this.mouseArea = this.touchArea = Shape.bounds(this.localBounds);
    });
  }
}
joist.register('HomeScreenButton', HomeScreenButton);
export default HomeScreenButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJVdGlscyIsIlNoYXBlIiwibWVyZ2UiLCJvcHRpb25pemUiLCJQaGV0Q29sb3JTY2hlbWUiLCJQaGV0Rm9udCIsIkZpcmVMaXN0ZW5lciIsIk5vZGUiLCJQRE9NUGVlciIsIlJlY3RhbmdsZSIsIlRleHQiLCJWQm94IiwiVm9pY2luZyIsIkV2ZW50VHlwZSIsIkZyYW1lIiwiam9pc3QiLCJVdHRlcmFuY2UiLCJMQVJHRV9JQ09OX0hFSUdIVCIsIkhvbWVTY3JlZW5CdXR0b24iLCJjb25zdHJ1Y3RvciIsInNjcmVlbiIsImhvbWVTY3JlZW5Nb2RlbCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjdXJzb3IiLCJzaG93VW5zZWxlY3RlZEhvbWVTY3JlZW5JY29uRnJhbWUiLCJ0YWdOYW1lIiwiYXBwZW5kRGVzY3JpcHRpb24iLCJjb250YWluZXJUYWdOYW1lIiwicGhldGlvRXZlbnRUeXBlIiwiVVNFUiIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJpc1NlbGVjdGVkUHJvcGVydHkiLCJzZWxlY3RlZFNjcmVlblByb3BlcnR5Iiwic2VsZWN0ZWRTY3JlZW4iLCJpc0hpZ2hsaWdodGVkUHJvcGVydHkiLCJzbWFsbEljb25TY2FsZSIsImxpbmVhciIsInNpbVNjcmVlbnMiLCJsZW5ndGgiLCJzbWFsbEljb25IZWlnaHQiLCJhc3NlcnQiLCJob21lU2NyZWVuSWNvbiIsIm5hbWVQcm9wZXJ0eSIsInZhbHVlIiwic21hbGxJY29uIiwiY2hpbGRyZW4iLCJzY2FsZSIsImhlaWdodCIsImxhcmdlSWNvbiIsInNtYWxsRnJhbWUiLCJ3aWR0aCIsInN0cm9rZSIsIlNDUkVFTl9JQ09OX0ZSQU1FIiwibGluZVdpZHRoIiwibGFyZ2VGcmFtZSIsInNtYWxsTm9kZSIsImxhcmdlTm9kZSIsIm5vZGVDb250YWluZXIiLCJwZG9tVmlzaWJsZSIsInRleHQiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJzdHJpbmdQcm9wZXJ0eU9wdGlvbnMiLCJwaGV0aW9SZWFkT25seSIsImFkZEFyaWFEZXNjcmliZWRieUFzc29jaWF0aW9uIiwib3RoZXJOb2RlIiwib3RoZXJFbGVtZW50TmFtZSIsIkRFU0NSSVBUSU9OX1NJQkxJTkciLCJ0aGlzRWxlbWVudE5hbWUiLCJQUklNQVJZX1NJQkxJTkciLCJzZXR0aW5ncyIsInNtYWxsIiwibm9kZSIsImZvbnQiLCJzcGFjaW5nIiwibGFyZ2UiLCJzZXRPcGFjaXR5QW5kRmlsbCIsIm9wYWNpdHkiLCJmaWxsIiwibGluayIsImlzU2VsZWN0ZWQiLCJkYXRhIiwibWF4V2lkdGgiLCJzZXRTcGFjaW5nIiwiaXNIaWdobGlnaHRlZCIsInNldEhpZ2hsaWdodGVkIiwiYnV0dG9uU2VsZWN0aW9uVXR0ZXJhbmNlIiwiYnV0dG9uV2FzQWxyZWFkeVNlbGVjdGVkIiwiYnV0dG9uRmlyZWQiLCJwb2ludGVySXNUb3VjaExpa2UiLCJmaXJlTGlzdGVuZXIiLCJwb2ludGVyIiwiaXNUb3VjaExpa2UiLCJzY3JlZW5Qcm9wZXJ0eSIsInZvaWNpbmdTcGVha0Z1bGxSZXNwb25zZSIsIm9iamVjdFJlc3BvbnNlIiwiaGludFJlc3BvbnNlIiwidXR0ZXJhbmNlIiwiY29udGV4dFJlc3BvbnNlIiwiZmlyZSIsImFkZElucHV0TGlzdGVuZXIiLCJmb2N1cyIsImV2ZW50IiwiY2xpY2siLCJzZXQiLCJibHVyIiwib3ZlciIsIm91dCIsIm9uVG91Y2hMaWtlT3ZlciIsInRvdWNob3ZlciIsInBlbm92ZXIiLCJib3VuZHNQcm9wZXJ0eSIsIm1vdXNlQXJlYSIsInRvdWNoQXJlYSIsImJvdW5kcyIsImxvY2FsQm91bmRzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJIb21lU2NyZWVuQnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgSG9tZVNjcmVlbkJ1dHRvbiBpcyBkaXNwbGF5ZWQgb24gdGhlIEhvbWVTY3JlZW4gZm9yIGNob29zaW5nIGEgc2NyZWVuLiBUaGUgYnV0dG9uIGNhbiBiZSBpbiBhIHNlbGVjdGVkIG9yXHJcbiAqIHVuc2VsZWN0ZWQgc3RhdGUgLSBpdCdzIGxhcmdlIHdpdGggYSB5ZWxsb3cgZnJhbWUgaW4gaXRzIHNlbGVjdGVkIHN0YXRlLCBhbmQgc21hbGwgaW4gaXRzIHVuc2VsZWN0ZWQgc3RhdGUuXHJcbiAqIFNlbGVjdGluZyB0aGUgYnV0dG9uIHdoZW4gaW4gaXRzIFwic2VsZWN0ZWRcIiBzdGF0ZSB3aWxsIHJlc3VsdCBpbiB0aGF0IHNjcmVlbiBiZWluZyBjaG9zZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBJbnRlbnRpb25hbEFueSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xyXG5pbXBvcnQgUGhldENvbG9yU2NoZW1lIGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Q29sb3JTY2hlbWUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgRmlyZUxpc3RlbmVyLCBOb2RlLCBQRE9NUGVlciwgUmVjdGFuZ2xlLCBUZXh0LCBWQm94LCBWQm94T3B0aW9ucywgVm9pY2luZywgVm9pY2luZ09wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgRXZlbnRUeXBlIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9FdmVudFR5cGUuanMnO1xyXG5pbXBvcnQgRnJhbWUgZnJvbSAnLi9GcmFtZS5qcyc7XHJcbmltcG9ydCBIb21lU2NyZWVuTW9kZWwgZnJvbSAnLi9Ib21lU2NyZWVuTW9kZWwuanMnO1xyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi9TY3JlZW4uanMnO1xyXG5pbXBvcnQgVXR0ZXJhbmNlIGZyb20gJy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9VdHRlcmFuY2UuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IExBUkdFX0lDT05fSEVJR0hUID0gMTQwO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBzaG93VW5zZWxlY3RlZEhvbWVTY3JlZW5JY29uRnJhbWU/OiBib29sZWFuO1xyXG59O1xyXG50eXBlIFBhcmVudE9wdGlvbnMgPSBWb2ljaW5nT3B0aW9ucyAmIFZCb3hPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBIb21lU2NyZWVuQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGFyZW50T3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQYXJlbnRPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5jbGFzcyBIb21lU2NyZWVuQnV0dG9uIGV4dGVuZHMgVm9pY2luZyggVkJveCApIHtcclxuICBwdWJsaWMgcmVhZG9ubHkgc2NyZWVuOiBTY3JlZW48SW50ZW50aW9uYWxBbnksIEludGVudGlvbmFsQW55PjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzY3JlZW46IFNjcmVlbjxJbnRlbnRpb25hbEFueSwgSW50ZW50aW9uYWxBbnk+LCBob21lU2NyZWVuTW9kZWw6IEhvbWVTY3JlZW5Nb2RlbCwgcHJvdmlkZWRPcHRpb25zPzogSG9tZVNjcmVlbkJ1dHRvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxIb21lU2NyZWVuQnV0dG9uT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhcmVudE9wdGlvbnM+KCkoIHtcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICAgIHNob3dVbnNlbGVjdGVkSG9tZVNjcmVlbkljb25GcmFtZTogZmFsc2UsIC8vIHB1dCBhIGZyYW1lIGFyb3VuZCB1bnNlbGVjdGVkIGhvbWUgc2NyZWVuIGljb25zXHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIHRhZ05hbWU6ICdidXR0b24nLFxyXG4gICAgICBhcHBlbmREZXNjcmlwdGlvbjogdHJ1ZSxcclxuICAgICAgY29udGFpbmVyVGFnTmFtZTogJ2xpJyxcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgcGhldGlvRXZlbnRUeXBlOiBFdmVudFR5cGUuVVNFUixcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ0EgYnV0dG9uIG9uIHRoZSBob21lIHNjcmVlbiBmb3IgY2hvb3NpbmcgYSBzaW11bGF0aW9uIHNjcmVlbidcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGRlcml2ZXMgYSBib29sZWFuIHZhbHVlIGZyb20gaG9tZVNjcmVlbk1vZGVsLnNlbGVjdGVkU2NyZWVuUHJvcGVydHkgdGhhdCBzYXlzIGlmIHRoaXMgYnV0dG9uIGlzIHNlbGVjdGVkIG9uIHRoZVxyXG4gICAgLy8gaG9tZSBzY3JlZW4uXHJcbiAgICBjb25zdCBpc1NlbGVjdGVkUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIGhvbWVTY3JlZW5Nb2RlbC5zZWxlY3RlZFNjcmVlblByb3BlcnR5IF0sIHNlbGVjdGVkU2NyZWVuID0+IHtcclxuICAgICAgcmV0dXJuIHNlbGVjdGVkU2NyZWVuID09PSBzY3JlZW47XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gdHJ1ZSBpZiB0aGlzIGJ1dHRvbiBoYXMgZm9jdXMgb3IgbW91c2VvdmVyXHJcbiAgICBjb25zdCBpc0hpZ2hsaWdodGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG5cclxuICAgIC8vIG1hcHMgdGhlIG51bWJlciBvZiBzY3JlZW5zIHRvIGEgc2NhbGUgZm9yIHRoZSBzbWFsbCBpY29ucy4gVGhlIHNjYWxlIGlzIHBlcmNlbnRhZ2Ugb2YgTEFSR0VfSUNPTl9IRUlHSFQuXHJcbiAgICBsZXQgc21hbGxJY29uU2NhbGUgPSBVdGlscy5saW5lYXIoIDIsIDQsIDAuODc1LCAwLjUwLCBob21lU2NyZWVuTW9kZWwuc2ltU2NyZWVucy5sZW5ndGggKTtcclxuICAgIGlmICggaG9tZVNjcmVlbk1vZGVsLnNpbVNjcmVlbnMubGVuZ3RoID49IDUgKSB7XHJcbiAgICAgIHNtYWxsSWNvblNjYWxlID0gMC40O1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc21hbGxJY29uSGVpZ2h0ID0gc21hbGxJY29uU2NhbGUgKiBMQVJHRV9JQ09OX0hFSUdIVDtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzY3JlZW4uaG9tZVNjcmVlbkljb24sIGBob21lU2NyZWVuSWNvbiBpcyByZXF1aXJlZCBmb3Igc2NyZWVuICR7c2NyZWVuLm5hbWVQcm9wZXJ0eS52YWx1ZX1gICk7XHJcbiAgICBjb25zdCBob21lU2NyZWVuSWNvbiA9IHNjcmVlbi5ob21lU2NyZWVuSWNvbiE7XHJcblxyXG4gICAgLy8gY3JlYXRlIGFuIGljb24gZm9yIGVhY2ggc2l6ZVxyXG4gICAgY29uc3Qgc21hbGxJY29uID0gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgaG9tZVNjcmVlbkljb24gXSxcclxuICAgICAgc2NhbGU6IHNtYWxsSWNvbkhlaWdodCAvIGhvbWVTY3JlZW5JY29uLmhlaWdodFxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgbGFyZ2VJY29uID0gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgaG9tZVNjcmVlbkljb24gXSxcclxuICAgICAgc2NhbGU6IExBUkdFX0lDT05fSEVJR0hUIC8gaG9tZVNjcmVlbkljb24uaGVpZ2h0XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIGEgZnJhbWUgZm9yIGVhY2ggc2l6ZVxyXG4gICAgY29uc3Qgc21hbGxGcmFtZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIHNtYWxsSWNvbi53aWR0aCwgc21hbGxJY29uLmhlaWdodCwge1xyXG4gICAgICBzdHJva2U6IG9wdGlvbnMuc2hvd1Vuc2VsZWN0ZWRIb21lU2NyZWVuSWNvbkZyYW1lID8gUGhldENvbG9yU2NoZW1lLlNDUkVFTl9JQ09OX0ZSQU1FIDogbnVsbCxcclxuICAgICAgbGluZVdpZHRoOiAwLjdcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGxhcmdlRnJhbWUgPSBuZXcgRnJhbWUoIGxhcmdlSWNvbiApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBvbmUgbm9kZSBmb3IgdGhlIGVhY2ggb2YgbGFyZ2UgYW5kIHNtYWxsIGZyYW1lICsgaWNvbiBwYWlyc1xyXG4gICAgY29uc3Qgc21hbGxOb2RlID0gbmV3IE5vZGUoIHsgY2hpbGRyZW46IFsgc21hbGxGcmFtZSwgc21hbGxJY29uIF0gfSApO1xyXG4gICAgY29uc3QgbGFyZ2VOb2RlID0gbmV3IE5vZGUoIHsgY2hpbGRyZW46IFsgbGFyZ2VGcmFtZSwgbGFyZ2VJY29uIF0gfSApO1xyXG5cclxuICAgIC8vIGNvbnRhaW5lciBmb3IgdGhlIGljb24gYW5kIGZyYW1lLCBjaGlsZHJlbiB1cGRhdGVkIHdoZW4gaXNTZWxlY3RlZFByb3BlcnR5IGNoYW5nZXNcclxuICAgIGNvbnN0IG5vZGVDb250YWluZXIgPSBuZXcgTm9kZSgge1xyXG5cclxuICAgICAgLy8gcGRvbSAtIHRoZSBpY29uIG1heSBoYXZlIGZvY3VzYWJsZSBjb21wb25lbnRzIGluIGl0cyBncmFwaGljIGJ1dCB0aGV5IHNob3VsZCBiZSBpbnZpc2libGUgZm9yIEludGVyYWN0aXZlXHJcbiAgICAgIC8vIERlc2NyaXB0aW9uLCB0aGUgYnV0dG9uIGlzIGFsbCB3ZSBuZWVkIGZvciBhY2Nlc3NpYmlsaXR5XHJcbiAgICAgIHBkb21WaXNpYmxlOiBmYWxzZVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHRleHQgZm9yIHRoZSBidXR0b25cclxuICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dCggc2NyZWVuLm5hbWVQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RleHQnICksXHJcbiAgICAgIHN0cmluZ1Byb3BlcnR5T3B0aW9uczogeyBwaGV0aW9SZWFkT25seTogdHJ1ZSB9IC8vIHRleHQgaXMgdXBkYXRlZCB2aWEgc2NyZWVuLm5hbWVQcm9wZXJ0eVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBtZXJnZSggeyBjaGlsZHJlbjogWyBub2RlQ29udGFpbmVyLCB0ZXh0IF0gfSwgb3B0aW9ucyApICk7XHJcblxyXG4gICAgdGhpcy5zY3JlZW4gPSBzY3JlZW47XHJcblxyXG4gICAgdGhpcy5hZGRBcmlhRGVzY3JpYmVkYnlBc3NvY2lhdGlvbigge1xyXG4gICAgICBvdGhlck5vZGU6IHRoaXMsXHJcbiAgICAgIG90aGVyRWxlbWVudE5hbWU6IFBET01QZWVyLkRFU0NSSVBUSU9OX1NJQkxJTkcsXHJcbiAgICAgIHRoaXNFbGVtZW50TmFtZTogUERPTVBlZXIuUFJJTUFSWV9TSUJMSU5HXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIGxhcmdlIGFuZCBzbWFsbCBzZXR0aW5nc1xyXG4gICAgY29uc3Qgc2V0dGluZ3MgPSB7XHJcbiAgICAgIHNtYWxsOiB7XHJcbiAgICAgICAgbm9kZTogWyBzbWFsbE5vZGUgXSxcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE4ICksXHJcbiAgICAgICAgc3BhY2luZzogM1xyXG4gICAgICB9LFxyXG4gICAgICBsYXJnZToge1xyXG4gICAgICAgIG5vZGU6IFsgbGFyZ2VOb2RlIF0sXHJcbiAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCA0MiApLFxyXG4gICAgICAgIHNwYWNpbmc6IDBcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBzZXRzIHRoZSBvcGFjaXR5IG9mIHRoZSBpY29uIGFuZCBmaWxsIG9mIHRoZSB0ZXh0XHJcbiAgICBjb25zdCBzZXRPcGFjaXR5QW5kRmlsbCA9ICgpID0+IHtcclxuICAgICAgY29uc3Qgb3BhY2l0eSA9ICggaXNTZWxlY3RlZFByb3BlcnR5LnZhbHVlIHx8IGlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eS52YWx1ZSApID8gMSA6IDAuNTtcclxuICAgICAgbGFyZ2VJY29uLm9wYWNpdHkgPSBvcGFjaXR5O1xyXG4gICAgICBzbWFsbEljb24ub3BhY2l0eSA9IG9wYWNpdHk7XHJcbiAgICAgIHRleHQuZmlsbCA9ICggaXNTZWxlY3RlZFByb3BlcnR5LnZhbHVlIHx8IGlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eS52YWx1ZSApID8gJ3doaXRlJyA6ICdncmF5JztcclxuICAgIH07XHJcblxyXG4gICAgLy8gdXBkYXRlIHBpZWNlcyB0aGF0IGNoYW5nZSB3aGVuIHRoZSBidXR0b24gaXMgc2VsZWN0ZWQgb3IgdW5zZWxlY3RlZFxyXG4gICAgaXNTZWxlY3RlZFByb3BlcnR5LmxpbmsoIGlzU2VsZWN0ZWQgPT4ge1xyXG4gICAgICBjb25zdCBkYXRhID0gaXNTZWxlY3RlZCA/IHNldHRpbmdzLmxhcmdlIDogc2V0dGluZ3Muc21hbGw7XHJcblxyXG4gICAgICAvLyBhcHBseSBzZXR0aW5ncyBmb3IgdGhlIGN1cnJlbnQgc2l6ZVxyXG4gICAgICBub2RlQ29udGFpbmVyLmNoaWxkcmVuID0gZGF0YS5ub2RlO1xyXG4gICAgICB0ZXh0LmZvbnQgPSBkYXRhLmZvbnQ7XHJcbiAgICAgIHRleHQubWF4V2lkdGggPSBub2RlQ29udGFpbmVyLndpZHRoO1xyXG4gICAgICBzZXRPcGFjaXR5QW5kRmlsbCgpO1xyXG4gICAgICB0aGlzLnNldFNwYWNpbmcoIGRhdGEuc3BhY2luZyApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHVwZGF0ZSB0aGUgYXBwZWFyYW5jZSB3aGVuIHRoZSBidXR0b24gaXMgaGlnaGxpZ2h0ZWRcclxuICAgIGlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eS5saW5rKCBpc0hpZ2hsaWdodGVkID0+IHtcclxuICAgICAgbGFyZ2VGcmFtZS5zZXRIaWdobGlnaHRlZCggaXNIaWdobGlnaHRlZCApO1xyXG4gICAgICBzZXRPcGFjaXR5QW5kRmlsbCgpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIG5ldyBVdHRlcmFuY2UgdGhhdCBpc24ndCByZWdpc3RlcmVkIHRocm91Z2ggVm9pY2luZyBzbyB0aGF0IGl0IGlzbid0IHNpbGVuY2VkIHdoZW4gdGhlXHJcbiAgICAvLyBob21lIHNjcmVlbiBpcyBoaWRkZW4gdXBvbiBzZWxlY3Rpb24uIChpbnZpc2libGUgbm9kZXMgaGF2ZSB0aGVpciB2b2ljaW5nIHNpbGVuY2VkKS5cclxuICAgIGNvbnN0IGJ1dHRvblNlbGVjdGlvblV0dGVyYW5jZSA9IG5ldyBVdHRlcmFuY2UoKTtcclxuXHJcbiAgICBsZXQgYnV0dG9uV2FzQWxyZWFkeVNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgLy8gSWYgdGhlIGJ1dHRvbiBpcyBhbHJlYWR5IHNlbGVjdGVkLCB0aGVuIHNldCB0aGUgc2ltJ3Mgc2NyZWVuIHRvIGJlIGl0cyBjb3JyZXNwb25kaW5nIHNjcmVlbi4gT3RoZXJ3aXNlLCBtYWtlIHRoZVxyXG4gICAgLy8gYnV0dG9uIHNlbGVjdGVkLiBUaGUgb25lIGV4Y2VwdGlvbiB0byB0aGUgZm9ybWVyIHNlbnRlbmNlIGlzIGR1ZSB0byB0aGUgZGVzaXJlZCBiZWhhdmlvciBvZiBzZWxlY3Rpbmcgb25cclxuICAgIC8vIHRvdWNob3ZlciwgaW4gd2hpY2ggY2FzZSB3ZSBuZWVkIHRvIGd1YXJkIG9uIHRvdWNoZG93biBzaW5jZSB3ZSBkb24ndCB3YW50IHRvIGRvdWJsZSBmaXJlIGZvciB0b3VjaG92ZXIgYW5kXHJcbiAgICAvLyB0b3VjaGRvd24sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzYyNFxyXG4gICAgY29uc3QgYnV0dG9uRmlyZWQgPSAoKSA9PiB7XHJcblxyXG4gICAgICBjb25zdCBwb2ludGVySXNUb3VjaExpa2UgPSBmaXJlTGlzdGVuZXIucG9pbnRlciAmJiBmaXJlTGlzdGVuZXIucG9pbnRlci5pc1RvdWNoTGlrZSgpO1xyXG5cclxuICAgICAgaWYgKCBpc1NlbGVjdGVkUHJvcGVydHkudmFsdWUgJiYgKCAhcG9pbnRlcklzVG91Y2hMaWtlIHx8IGJ1dHRvbldhc0FscmVhZHlTZWxlY3RlZCApICkge1xyXG5cclxuICAgICAgICAvLyBTZWxlY3QgdGhlIHNjcmVlbiB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoaXMgYnV0dG9uLiAgVGhpcyB3aWxsIG1ha2UgdGhhdCBzY3JlZW4gYXBwZWFyIHRvIHRoZSB1c2VyIGFuZCB0aGVcclxuICAgICAgICAvLyBob21lIHNjcmVlbiBkaXNhcHBlYXIuXHJcbiAgICAgICAgaG9tZVNjcmVlbk1vZGVsLnNjcmVlblByb3BlcnR5LnZhbHVlID0gc2NyZWVuO1xyXG5cclxuICAgICAgICB0aGlzLnZvaWNpbmdTcGVha0Z1bGxSZXNwb25zZSgge1xyXG4gICAgICAgICAgb2JqZWN0UmVzcG9uc2U6IG51bGwsXHJcbiAgICAgICAgICBoaW50UmVzcG9uc2U6IG51bGwsXHJcbiAgICAgICAgICB1dHRlcmFuY2U6IGJ1dHRvblNlbGVjdGlvblV0dGVyYW5jZVxyXG4gICAgICAgIH0gKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgLy8gU2VsZWN0IHRoZSBzY3JlZW4gYnV0dG9uLiAgVGhpcyBjYXVzZXMgdGhlIGJ1dHRvbiB0byBlbmxhcmdlLCBidXQgZG9lc24ndCBnbyB0byB0aGUgc2NyZWVuLlxyXG4gICAgICAgIGhvbWVTY3JlZW5Nb2RlbC5zZWxlY3RlZFNjcmVlblByb3BlcnR5LnZhbHVlID0gc2NyZWVuO1xyXG5cclxuICAgICAgICB0aGlzLnZvaWNpbmdTcGVha0Z1bGxSZXNwb25zZSgge1xyXG4gICAgICAgICAgb2JqZWN0UmVzcG9uc2U6IG51bGwsXHJcbiAgICAgICAgICBjb250ZXh0UmVzcG9uc2U6IG51bGxcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZmlyZUxpc3RlbmVyID0gbmV3IEZpcmVMaXN0ZW5lcigge1xyXG4gICAgICBmaXJlOiBidXR0b25GaXJlZCxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdmaXJlTGlzdGVuZXInIClcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggZmlyZUxpc3RlbmVyICk7XHJcbiAgICB0aGlzLmFkZElucHV0TGlzdGVuZXIoIHsgZm9jdXM6IGV2ZW50ID0+IHsgIWlzU2VsZWN0ZWRQcm9wZXJ0eS52YWx1ZSAmJiBmaXJlTGlzdGVuZXIuZmlyZSggZXZlbnQgKTsgfSB9ICk7XHJcblxyXG4gICAgLy8gd2hlbiBhIHNjcmVlbiByZWFkZXIgaXMgaW4gdXNlLCB0aGUgYnV0dG9uIG1heSBiZSBzZWxlY3RlZCB3aXRoIHRoZSB2aXJ0dWFsIGN1cnNvclxyXG4gICAgLy8gd2l0aG91dCBmb2N1cyBsYW5kaW5nIG9uIHRoZSBidXR0b24gLSB0b2dnbGUgZm9jdXMgKGFuZCB0aGVyZWZvcmUgc2l6ZSkgaW4gdGhpcyBjYXNlXHJcbiAgICB0aGlzLmFkZElucHV0TGlzdGVuZXIoIHsgY2xpY2s6ICgpID0+IHRoaXMuZm9jdXMoKSB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRJbnB1dExpc3RlbmVyKCB7XHJcbiAgICAgIGZvY3VzOiAoKSA9PiBpc0hpZ2hsaWdodGVkUHJvcGVydHkuc2V0KCB0cnVlICksXHJcbiAgICAgIGJsdXI6ICgpID0+IGlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eS5zZXQoIGZhbHNlICksXHJcbiAgICAgIG92ZXI6ICgpID0+IGlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eS5zZXQoIHRydWUgKSxcclxuICAgICAgb3V0OiAoKSA9PiBpc0hpZ2hsaWdodGVkUHJvcGVydHkuc2V0KCBmYWxzZSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gSWYgeW91IHRvdWNoIGFuIHVuc2VsZWN0ZWQgYnV0dG9uLCBpdCBiZWNvbWVzIHNlbGVjdGVkLiBJZiB0aGVuIHdpdGhvdXQgbGlmdGluZyB5b3VyIGZpbmdlciB5b3Ugc3dpcGUgb3ZlciB0byB0aGVcclxuICAgIC8vIG5leHQgYnV0dG9uLCB0aGF0IG9uZSBiZWNvbWVzIHNlbGVjdGVkIGluc3RlYWQuXHJcbiAgICBjb25zdCBvblRvdWNoTGlrZU92ZXIgPSAoKSA9PiB7XHJcbiAgICAgIGJ1dHRvbldhc0FscmVhZHlTZWxlY3RlZCA9IGhvbWVTY3JlZW5Nb2RlbC5zZWxlY3RlZFNjcmVlblByb3BlcnR5LnZhbHVlID09PSBzY3JlZW47XHJcbiAgICAgIGhvbWVTY3JlZW5Nb2RlbC5zZWxlY3RlZFNjcmVlblByb3BlcnR5LnZhbHVlID0gc2NyZWVuO1xyXG4gICAgfTtcclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lcigge1xyXG4gICAgICB0b3VjaG92ZXI6IG9uVG91Y2hMaWtlT3ZlcixcclxuICAgICAgcGVub3Zlcjogb25Ub3VjaExpa2VPdmVyXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gc2V0IHRoZSBtb3VzZUFyZWEgYW5kIHRvdWNoQXJlYSB0byBiZSB0aGUgd2hvbGUgbG9jYWwgYm91bmRzIG9mIHRoaXMgbm9kZSwgYmVjYXVzZSBpZiBpdCBqdXN0IHJlbGllcyBvbiB0aGVcclxuICAgIC8vIGJvdW5kcyBvZiB0aGUgaWNvbiBhbmQgdGV4dCwgdGhlbiB0aGVyZSBpcyBhIGdhcCBpbiBiZXR3ZWVuIHRoZW0uIFNpbmNlIHRoZSBidXR0b24gY2FuIGNoYW5nZSBzaXplLCB0aGlzXHJcbiAgICAvLyBhc3NpZ25tZW50IG5lZWRzIHRvIGhhcHBlbiBhbnl0aW1lIHRoZSBib3VuZHMgY2hhbmdlLlxyXG4gICAgdGhpcy5ib3VuZHNQcm9wZXJ0eS5saW5rKCAoKSA9PiB7XHJcbiAgICAgIHRoaXMubW91c2VBcmVhID0gdGhpcy50b3VjaEFyZWEgPSBTaGFwZS5ib3VuZHMoIHRoaXMubG9jYWxCb3VuZHMgKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnSG9tZVNjcmVlbkJ1dHRvbicsIEhvbWVTY3JlZW5CdXR0b24gKTtcclxuZXhwb3J0IGRlZmF1bHQgSG9tZVNjcmVlbkJ1dHRvbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLGtDQUFrQztBQUM5RCxPQUFPQyxlQUFlLE1BQU0sa0NBQWtDO0FBQzlELE9BQU9DLEtBQUssTUFBTSx1QkFBdUI7QUFDekMsU0FBU0MsS0FBSyxRQUFRLDBCQUEwQjtBQUNoRCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFFdkQsT0FBT0MsZUFBZSxNQUFNLDBDQUEwQztBQUN0RSxPQUFPQyxRQUFRLE1BQU0sbUNBQW1DO0FBQ3hELFNBQVNDLFlBQVksRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxFQUFFQyxJ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