// Copyright 2015-2022, University of Colorado Boulder

/**
 * Generate a rasterized screenshot for a simulation using scenery's built-in machinery.
 * Used in phet-io as well as PhetMenu (optionally)
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Matrix3 from '../../dot/js/Matrix3.js';
import { CanvasContextWrapper, Utils } from '../../scenery/js/imports.js';
import joist from './joist.js';
class ScreenshotGenerator {
  static generateScreenshotAtIncreasedResolution(sim, scale) {
    // set up our Canvas with the correct background color
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    assert && assert(context);
    const backingScale = Utils.backingScale(context) * scale;
    canvas.width = sim.display.width * backingScale;
    canvas.height = sim.display.height * backingScale;
    context.scale(backingScale, backingScale);
    context.fillStyle = sim.display.domElement.style.backgroundColor;
    context.fillRect(0, 0, canvas.width, canvas.height);
    const wrapper = new CanvasContextWrapper(canvas, context);
    sim.rootNode.renderToCanvasSubtree(wrapper, Matrix3.scaling(backingScale));
    return canvas;
  }
  static renderAtScale(raster, scale) {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    canvas.width = raster.width * scale;
    canvas.height = raster.height * scale;
    context.scale(scale, scale);
    context.drawImage(raster, 0, 0);
    return canvas;
  }

  // Default to PNG
  static generateScreenshot(sim, mimeType = 'image/png') {
    const res2x = ScreenshotGenerator.generateScreenshotAtIncreasedResolution(sim, 2);
    const res1x = ScreenshotGenerator.renderAtScale(res2x, 1 / 2);

    // get the data URL in PNG format
    return res1x.toDataURL(mimeType);
  }
}
joist.register('ScreenshotGenerator', ScreenshotGenerator);
export default ScreenshotGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiQ2FudmFzQ29udGV4dFdyYXBwZXIiLCJVdGlscyIsImpvaXN0IiwiU2NyZWVuc2hvdEdlbmVyYXRvciIsImdlbmVyYXRlU2NyZWVuc2hvdEF0SW5jcmVhc2VkUmVzb2x1dGlvbiIsInNpbSIsInNjYWxlIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY29udGV4dCIsImdldENvbnRleHQiLCJhc3NlcnQiLCJiYWNraW5nU2NhbGUiLCJ3aWR0aCIsImRpc3BsYXkiLCJoZWlnaHQiLCJmaWxsU3R5bGUiLCJkb21FbGVtZW50Iiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmaWxsUmVjdCIsIndyYXBwZXIiLCJyb290Tm9kZSIsInJlbmRlclRvQ2FudmFzU3VidHJlZSIsInNjYWxpbmciLCJyZW5kZXJBdFNjYWxlIiwicmFzdGVyIiwiZHJhd0ltYWdlIiwiZ2VuZXJhdGVTY3JlZW5zaG90IiwibWltZVR5cGUiLCJyZXMyeCIsInJlczF4IiwidG9EYXRhVVJMIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTY3JlZW5zaG90R2VuZXJhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIGEgcmFzdGVyaXplZCBzY3JlZW5zaG90IGZvciBhIHNpbXVsYXRpb24gdXNpbmcgc2NlbmVyeSdzIGJ1aWx0LWluIG1hY2hpbmVyeS5cclxuICogVXNlZCBpbiBwaGV0LWlvIGFzIHdlbGwgYXMgUGhldE1lbnUgKG9wdGlvbmFsbHkpXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgeyBDYW52YXNDb250ZXh0V3JhcHBlciwgVXRpbHMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBTaW0gZnJvbSAnLi9TaW0uanMnO1xyXG5cclxuY2xhc3MgU2NyZWVuc2hvdEdlbmVyYXRvciB7XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGdlbmVyYXRlU2NyZWVuc2hvdEF0SW5jcmVhc2VkUmVzb2x1dGlvbiggc2ltOiBTaW0sIHNjYWxlOiBudW1iZXIgKTogSFRNTENhbnZhc0VsZW1lbnQge1xyXG4gICAgLy8gc2V0IHVwIG91ciBDYW52YXMgd2l0aCB0aGUgY29ycmVjdCBiYWNrZ3JvdW5kIGNvbG9yXHJcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApO1xyXG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICkhO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvbnRleHQgKTtcclxuICAgIGNvbnN0IGJhY2tpbmdTY2FsZSA9IFV0aWxzLmJhY2tpbmdTY2FsZSggY29udGV4dCApICogc2NhbGU7XHJcbiAgICBjYW52YXMud2lkdGggPSBzaW0uZGlzcGxheS53aWR0aCAqIGJhY2tpbmdTY2FsZTtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSBzaW0uZGlzcGxheS5oZWlnaHQgKiBiYWNraW5nU2NhbGU7XHJcblxyXG4gICAgY29udGV4dC5zY2FsZSggYmFja2luZ1NjYWxlLCBiYWNraW5nU2NhbGUgKTtcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gc2ltLmRpc3BsYXkuZG9tRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICBjb250ZXh0LmZpbGxSZWN0KCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQgKTtcclxuICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgQ2FudmFzQ29udGV4dFdyYXBwZXIoIGNhbnZhcywgY29udGV4dCApO1xyXG5cclxuICAgIHNpbS5yb290Tm9kZS5yZW5kZXJUb0NhbnZhc1N1YnRyZWUoIHdyYXBwZXIsIE1hdHJpeDMuc2NhbGluZyggYmFja2luZ1NjYWxlICkgKTtcclxuXHJcbiAgICByZXR1cm4gY2FudmFzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVuZGVyQXRTY2FsZSggcmFzdGVyOiBIVE1MQ2FudmFzRWxlbWVudCwgc2NhbGU6IG51bWJlciApOiBIVE1MQ2FudmFzRWxlbWVudCB7XHJcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApO1xyXG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICkhO1xyXG5cclxuICAgIGNhbnZhcy53aWR0aCA9IHJhc3Rlci53aWR0aCAqIHNjYWxlO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHJhc3Rlci5oZWlnaHQgKiBzY2FsZTtcclxuXHJcbiAgICBjb250ZXh0LnNjYWxlKCBzY2FsZSwgc2NhbGUgKTtcclxuICAgIGNvbnRleHQuZHJhd0ltYWdlKCByYXN0ZXIsIDAsIDAgKTtcclxuICAgIHJldHVybiBjYW52YXM7XHJcbiAgfVxyXG5cclxuICAvLyBEZWZhdWx0IHRvIFBOR1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2VuZXJhdGVTY3JlZW5zaG90KCBzaW06IFNpbSwgbWltZVR5cGUgPSAnaW1hZ2UvcG5nJyApOiBzdHJpbmcge1xyXG4gICAgY29uc3QgcmVzMnggPSBTY3JlZW5zaG90R2VuZXJhdG9yLmdlbmVyYXRlU2NyZWVuc2hvdEF0SW5jcmVhc2VkUmVzb2x1dGlvbiggc2ltLCAyICk7XHJcbiAgICBjb25zdCByZXMxeCA9IFNjcmVlbnNob3RHZW5lcmF0b3IucmVuZGVyQXRTY2FsZSggcmVzMngsIDEgLyAyICk7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSBkYXRhIFVSTCBpbiBQTkcgZm9ybWF0XHJcbiAgICByZXR1cm4gcmVzMXgudG9EYXRhVVJMKCBtaW1lVHlwZSApO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdTY3JlZW5zaG90R2VuZXJhdG9yJywgU2NyZWVuc2hvdEdlbmVyYXRvciApO1xyXG5leHBvcnQgZGVmYXVsdCBTY3JlZW5zaG90R2VuZXJhdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSx5QkFBeUI7QUFDN0MsU0FBU0Msb0JBQW9CLEVBQUVDLEtBQUssUUFBUSw2QkFBNkI7QUFDekUsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFHOUIsTUFBTUMsbUJBQW1CLENBQUM7RUFFeEIsT0FBZUMsdUNBQXVDQSxDQUFFQyxHQUFRLEVBQUVDLEtBQWEsRUFBc0I7SUFDbkc7SUFDQSxNQUFNQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFFLFFBQVMsQ0FBQztJQUNqRCxNQUFNQyxPQUFPLEdBQUdILE1BQU0sQ0FBQ0ksVUFBVSxDQUFFLElBQUssQ0FBRTtJQUUxQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVGLE9BQVEsQ0FBQztJQUMzQixNQUFNRyxZQUFZLEdBQUdaLEtBQUssQ0FBQ1ksWUFBWSxDQUFFSCxPQUFRLENBQUMsR0FBR0osS0FBSztJQUMxREMsTUFBTSxDQUFDTyxLQUFLLEdBQUdULEdBQUcsQ0FBQ1UsT0FBTyxDQUFDRCxLQUFLLEdBQUdELFlBQVk7SUFDL0NOLE1BQU0sQ0FBQ1MsTUFBTSxHQUFHWCxHQUFHLENBQUNVLE9BQU8sQ0FBQ0MsTUFBTSxHQUFHSCxZQUFZO0lBRWpESCxPQUFPLENBQUNKLEtBQUssQ0FBRU8sWUFBWSxFQUFFQSxZQUFhLENBQUM7SUFDM0NILE9BQU8sQ0FBQ08sU0FBUyxHQUFHWixHQUFHLENBQUNVLE9BQU8sQ0FBQ0csVUFBVSxDQUFDQyxLQUFLLENBQUNDLGVBQWU7SUFDaEVWLE9BQU8sQ0FBQ1csUUFBUSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVkLE1BQU0sQ0FBQ08sS0FBSyxFQUFFUCxNQUFNLENBQUNTLE1BQU8sQ0FBQztJQUNyRCxNQUFNTSxPQUFPLEdBQUcsSUFBSXRCLG9CQUFvQixDQUFFTyxNQUFNLEVBQUVHLE9BQVEsQ0FBQztJQUUzREwsR0FBRyxDQUFDa0IsUUFBUSxDQUFDQyxxQkFBcUIsQ0FBRUYsT0FBTyxFQUFFdkIsT0FBTyxDQUFDMEIsT0FBTyxDQUFFWixZQUFhLENBQUUsQ0FBQztJQUU5RSxPQUFPTixNQUFNO0VBQ2Y7RUFFQSxPQUFlbUIsYUFBYUEsQ0FBRUMsTUFBeUIsRUFBRXJCLEtBQWEsRUFBc0I7SUFDMUYsTUFBTUMsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBRSxRQUFTLENBQUM7SUFDakQsTUFBTUMsT0FBTyxHQUFHSCxNQUFNLENBQUNJLFVBQVUsQ0FBRSxJQUFLLENBQUU7SUFFMUNKLE1BQU0sQ0FBQ08sS0FBSyxHQUFHYSxNQUFNLENBQUNiLEtBQUssR0FBR1IsS0FBSztJQUNuQ0MsTUFBTSxDQUFDUyxNQUFNLEdBQUdXLE1BQU0sQ0FBQ1gsTUFBTSxHQUFHVixLQUFLO0lBRXJDSSxPQUFPLENBQUNKLEtBQUssQ0FBRUEsS0FBSyxFQUFFQSxLQUFNLENBQUM7SUFDN0JJLE9BQU8sQ0FBQ2tCLFNBQVMsQ0FBRUQsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFDakMsT0FBT3BCLE1BQU07RUFDZjs7RUFFQTtFQUNBLE9BQWNzQixrQkFBa0JBLENBQUV4QixHQUFRLEVBQUV5QixRQUFRLEdBQUcsV0FBVyxFQUFXO0lBQzNFLE1BQU1DLEtBQUssR0FBRzVCLG1CQUFtQixDQUFDQyx1Q0FBdUMsQ0FBRUMsR0FBRyxFQUFFLENBQUUsQ0FBQztJQUNuRixNQUFNMkIsS0FBSyxHQUFHN0IsbUJBQW1CLENBQUN1QixhQUFhLENBQUVLLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBRSxDQUFDOztJQUUvRDtJQUNBLE9BQU9DLEtBQUssQ0FBQ0MsU0FBUyxDQUFFSCxRQUFTLENBQUM7RUFDcEM7QUFDRjtBQUVBNUIsS0FBSyxDQUFDZ0MsUUFBUSxDQUFFLHFCQUFxQixFQUFFL0IsbUJBQW9CLENBQUM7QUFDNUQsZUFBZUEsbUJBQW1CIn0=