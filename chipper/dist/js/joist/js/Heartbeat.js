// Copyright 2017-2022, University of Colorado Boulder

/**
 * For preventing Safari from going to sleep - added to the self.display.domElement instead of the body to prevent a VoiceOver bug
 * where the virtual cursor would spontaneously move when the div content changed, see https://github.com/phetsims/joist/issues/140
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import joist from './joist.js';
// variables
let started = false;

// a boolean to flip back and forth to make sure safari doesn't get sleepy, see usage.
let value = true;
const Heartbeat = {
  /**
   * Initializes the heartbeat div to begin ticking to prevent Safari from going to sleep.
   */
  start: function (sim) {
    assert && assert(!started, 'Heartbeat can only be started once');
    started = true;
    const heartbeatDiv = document.createElement('div');
    heartbeatDiv.style.opacity = '0';

    // Extra style (also used for accessibility) that makes it take up no visual layout space.
    // Without this, it could cause some layout issues. See https://github.com/phetsims/gravity-force-lab/issues/39
    heartbeatDiv.style.position = 'absolute';
    heartbeatDiv.style.left = '0';
    heartbeatDiv.style.top = '0';
    heartbeatDiv.style.width = '0';
    heartbeatDiv.style.height = '0';
    heartbeatDiv.style.clip = 'rect(0,0,0,0)';
    heartbeatDiv.setAttribute('aria-hidden', 'true'); // hide div from screen readers (a11y)
    sim.display.domElement.appendChild(heartbeatDiv);

    // prevent Safari from going to sleep, see https://github.com/phetsims/joist/issues/140
    sim.frameStartedEmitter.addListener(() => {
      if (sim.frameCounter % 1000 === 0) {
        value = !value;
        heartbeatDiv.innerHTML = `${value}`;
      }
    });
  }
};
joist.register('Heartbeat', Heartbeat);
export default Heartbeat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsInN0YXJ0ZWQiLCJ2YWx1ZSIsIkhlYXJ0YmVhdCIsInN0YXJ0Iiwic2ltIiwiYXNzZXJ0IiwiaGVhcnRiZWF0RGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJvcGFjaXR5IiwicG9zaXRpb24iLCJsZWZ0IiwidG9wIiwid2lkdGgiLCJoZWlnaHQiLCJjbGlwIiwic2V0QXR0cmlidXRlIiwiZGlzcGxheSIsImRvbUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImZyYW1lU3RhcnRlZEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImZyYW1lQ291bnRlciIsImlubmVySFRNTCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSGVhcnRiZWF0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZvciBwcmV2ZW50aW5nIFNhZmFyaSBmcm9tIGdvaW5nIHRvIHNsZWVwIC0gYWRkZWQgdG8gdGhlIHNlbGYuZGlzcGxheS5kb21FbGVtZW50IGluc3RlYWQgb2YgdGhlIGJvZHkgdG8gcHJldmVudCBhIFZvaWNlT3ZlciBidWdcclxuICogd2hlcmUgdGhlIHZpcnR1YWwgY3Vyc29yIHdvdWxkIHNwb250YW5lb3VzbHkgbW92ZSB3aGVuIHRoZSBkaXYgY29udGVudCBjaGFuZ2VkLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaXN0L2lzc3Vlcy8xNDBcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBTaW0gZnJvbSAnLi9TaW0uanMnO1xyXG5cclxuLy8gdmFyaWFibGVzXHJcbmxldCBzdGFydGVkID0gZmFsc2U7XHJcblxyXG4vLyBhIGJvb2xlYW4gdG8gZmxpcCBiYWNrIGFuZCBmb3J0aCB0byBtYWtlIHN1cmUgc2FmYXJpIGRvZXNuJ3QgZ2V0IHNsZWVweSwgc2VlIHVzYWdlLlxyXG5sZXQgdmFsdWUgPSB0cnVlO1xyXG5cclxuY29uc3QgSGVhcnRiZWF0ID0ge1xyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplcyB0aGUgaGVhcnRiZWF0IGRpdiB0byBiZWdpbiB0aWNraW5nIHRvIHByZXZlbnQgU2FmYXJpIGZyb20gZ29pbmcgdG8gc2xlZXAuXHJcbiAgICovXHJcbiAgc3RhcnQ6IGZ1bmN0aW9uKCBzaW06IFNpbSApOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFzdGFydGVkLCAnSGVhcnRiZWF0IGNhbiBvbmx5IGJlIHN0YXJ0ZWQgb25jZScgKTtcclxuICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0IGhlYXJ0YmVhdERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XHJcbiAgICBoZWFydGJlYXREaXYuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuXHJcbiAgICAvLyBFeHRyYSBzdHlsZSAoYWxzbyB1c2VkIGZvciBhY2Nlc3NpYmlsaXR5KSB0aGF0IG1ha2VzIGl0IHRha2UgdXAgbm8gdmlzdWFsIGxheW91dCBzcGFjZS5cclxuICAgIC8vIFdpdGhvdXQgdGhpcywgaXQgY291bGQgY2F1c2Ugc29tZSBsYXlvdXQgaXNzdWVzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2dyYXZpdHktZm9yY2UtbGFiL2lzc3Vlcy8zOVxyXG4gICAgaGVhcnRiZWF0RGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIGhlYXJ0YmVhdERpdi5zdHlsZS5sZWZ0ID0gJzAnO1xyXG4gICAgaGVhcnRiZWF0RGl2LnN0eWxlLnRvcCA9ICcwJztcclxuICAgIGhlYXJ0YmVhdERpdi5zdHlsZS53aWR0aCA9ICcwJztcclxuICAgIGhlYXJ0YmVhdERpdi5zdHlsZS5oZWlnaHQgPSAnMCc7XHJcbiAgICBoZWFydGJlYXREaXYuc3R5bGUuY2xpcCA9ICdyZWN0KDAsMCwwLDApJztcclxuICAgIGhlYXJ0YmVhdERpdi5zZXRBdHRyaWJ1dGUoICdhcmlhLWhpZGRlbicsICd0cnVlJyApOyAvLyBoaWRlIGRpdiBmcm9tIHNjcmVlbiByZWFkZXJzIChhMTF5KVxyXG4gICAgc2ltLmRpc3BsYXkuZG9tRWxlbWVudC5hcHBlbmRDaGlsZCggaGVhcnRiZWF0RGl2ICk7XHJcblxyXG4gICAgLy8gcHJldmVudCBTYWZhcmkgZnJvbSBnb2luZyB0byBzbGVlcCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvMTQwXHJcbiAgICBzaW0uZnJhbWVTdGFydGVkRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICBpZiAoIHNpbS5mcmFtZUNvdW50ZXIgJSAxMDAwID09PSAwICkge1xyXG4gICAgICAgIHZhbHVlID0gIXZhbHVlO1xyXG4gICAgICAgIGhlYXJ0YmVhdERpdi5pbm5lckhUTUwgPSBgJHt2YWx1ZX1gO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59O1xyXG5cclxuam9pc3QucmVnaXN0ZXIoICdIZWFydGJlYXQnLCBIZWFydGJlYXQgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlYXJ0YmVhdDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxZQUFZO0FBRzlCO0FBQ0EsSUFBSUMsT0FBTyxHQUFHLEtBQUs7O0FBRW5CO0FBQ0EsSUFBSUMsS0FBSyxHQUFHLElBQUk7QUFFaEIsTUFBTUMsU0FBUyxHQUFHO0VBRWhCO0FBQ0Y7QUFDQTtFQUNFQyxLQUFLLEVBQUUsU0FBQUEsQ0FBVUMsR0FBUSxFQUFTO0lBQ2hDQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDTCxPQUFPLEVBQUUsb0NBQXFDLENBQUM7SUFDbEVBLE9BQU8sR0FBRyxJQUFJO0lBRWQsTUFBTU0sWUFBWSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBRSxLQUFNLENBQUM7SUFDcERGLFlBQVksQ0FBQ0csS0FBSyxDQUFDQyxPQUFPLEdBQUcsR0FBRzs7SUFFaEM7SUFDQTtJQUNBSixZQUFZLENBQUNHLEtBQUssQ0FBQ0UsUUFBUSxHQUFHLFVBQVU7SUFDeENMLFlBQVksQ0FBQ0csS0FBSyxDQUFDRyxJQUFJLEdBQUcsR0FBRztJQUM3Qk4sWUFBWSxDQUFDRyxLQUFLLENBQUNJLEdBQUcsR0FBRyxHQUFHO0lBQzVCUCxZQUFZLENBQUNHLEtBQUssQ0FBQ0ssS0FBSyxHQUFHLEdBQUc7SUFDOUJSLFlBQVksQ0FBQ0csS0FBSyxDQUFDTSxNQUFNLEdBQUcsR0FBRztJQUMvQlQsWUFBWSxDQUFDRyxLQUFLLENBQUNPLElBQUksR0FBRyxlQUFlO0lBQ3pDVixZQUFZLENBQUNXLFlBQVksQ0FBRSxhQUFhLEVBQUUsTUFBTyxDQUFDLENBQUMsQ0FBQztJQUNwRGIsR0FBRyxDQUFDYyxPQUFPLENBQUNDLFVBQVUsQ0FBQ0MsV0FBVyxDQUFFZCxZQUFhLENBQUM7O0lBRWxEO0lBQ0FGLEdBQUcsQ0FBQ2lCLG1CQUFtQixDQUFDQyxXQUFXLENBQUUsTUFBTTtNQUN6QyxJQUFLbEIsR0FBRyxDQUFDbUIsWUFBWSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUc7UUFDbkN0QixLQUFLLEdBQUcsQ0FBQ0EsS0FBSztRQUNkSyxZQUFZLENBQUNrQixTQUFTLEdBQUksR0FBRXZCLEtBQU0sRUFBQztNQUNyQztJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0YsQ0FBQztBQUVERixLQUFLLENBQUMwQixRQUFRLENBQUUsV0FBVyxFQUFFdkIsU0FBVSxDQUFDO0FBRXhDLGVBQWVBLFNBQVMifQ==