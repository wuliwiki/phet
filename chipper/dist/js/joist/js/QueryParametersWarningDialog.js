// Copyright 2020-2022, University of Colorado Boulder

/**
 * Message dialog displayed when any public query parameters have invalid values, see https://github.com/phetsims/joist/issues/593
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../phet-core/js/optionize.js';
import OopsDialog from '../../scenery-phet/js/OopsDialog.js';
import PhetFont from '../../scenery-phet/js/PhetFont.js';
import { Text } from '../../scenery/js/imports.js';
import joist from './joist.js';
import JoistStrings from './JoistStrings.js';
class QueryParametersWarningDialog extends OopsDialog {
  /**
   * @param warnings - see QueryStringMachine.warnings
   * @param [providedOptions]
   */
  constructor(
  // See phet-types.d.ts
  warnings,
  // eslint-disable-line no-undef
  providedOptions) {
    assert && assert(warnings.length > 0, `expected 1 or more warnings: ${warnings.length}`);
    const options = optionize()({
      // OopsDialogOptions
      richTextOptions: {
        font: new PhetFont(16)
      },
      title: new Text(JoistStrings.queryParametersWarningDialog.invalidQueryParametersStringProperty, {
        font: new PhetFont(28)
      })
    }, providedOptions);

    // add warnings to generic message
    let message = `${JoistStrings.queryParametersWarningDialog.oneOrMoreQueryParametersStringProperty.value}<br><br>`;
    warnings.forEach(warning => {
      message += `${warning.key}=${warning.value}<br>`;
    });
    message += `<br>${JoistStrings.queryParametersWarningDialog.theSimulationWillStartStringProperty.value}`;
    super(message, options);
  }
}
joist.register('QueryParametersWarningDialog', QueryParametersWarningDialog);
export default QueryParametersWarningDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJPb3BzRGlhbG9nIiwiUGhldEZvbnQiLCJUZXh0Iiwiam9pc3QiLCJKb2lzdFN0cmluZ3MiLCJRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nIiwiY29uc3RydWN0b3IiLCJ3YXJuaW5ncyIsInByb3ZpZGVkT3B0aW9ucyIsImFzc2VydCIsImxlbmd0aCIsIm9wdGlvbnMiLCJyaWNoVGV4dE9wdGlvbnMiLCJmb250IiwidGl0bGUiLCJxdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nIiwiaW52YWxpZFF1ZXJ5UGFyYW1ldGVyc1N0cmluZ1Byb3BlcnR5IiwibWVzc2FnZSIsIm9uZU9yTW9yZVF1ZXJ5UGFyYW1ldGVyc1N0cmluZ1Byb3BlcnR5IiwidmFsdWUiLCJmb3JFYWNoIiwid2FybmluZyIsImtleSIsInRoZVNpbXVsYXRpb25XaWxsU3RhcnRTdHJpbmdQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNZXNzYWdlIGRpYWxvZyBkaXNwbGF5ZWQgd2hlbiBhbnkgcHVibGljIHF1ZXJ5IHBhcmFtZXRlcnMgaGF2ZSBpbnZhbGlkIHZhbHVlcywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvNTkzXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IE9vcHNEaWFsb2csIHsgT29wc0RpYWxvZ09wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvT29wc0RpYWxvZy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4vam9pc3QuanMnO1xyXG5pbXBvcnQgSm9pc3RTdHJpbmdzIGZyb20gJy4vSm9pc3RTdHJpbmdzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgT29wc0RpYWxvZ09wdGlvbnM7XHJcblxyXG5jbGFzcyBRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nIGV4dGVuZHMgT29wc0RpYWxvZyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB3YXJuaW5ncyAtIHNlZSBRdWVyeVN0cmluZ01hY2hpbmUud2FybmluZ3NcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAvLyBTZWUgcGhldC10eXBlcy5kLnRzXHJcbiAgICB3YXJuaW5nczogV2FybmluZ1tdLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXHJcbiAgICBwcm92aWRlZE9wdGlvbnM/OiBRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nT3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB3YXJuaW5ncy5sZW5ndGggPiAwLCBgZXhwZWN0ZWQgMSBvciBtb3JlIHdhcm5pbmdzOiAke3dhcm5pbmdzLmxlbmd0aH1gICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nT3B0aW9ucywgU2VsZk9wdGlvbnMsIE9vcHNEaWFsb2dPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBPb3BzRGlhbG9nT3B0aW9uc1xyXG4gICAgICByaWNoVGV4dE9wdGlvbnM6IHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE2IClcclxuICAgICAgfSxcclxuICAgICAgdGl0bGU6IG5ldyBUZXh0KCBKb2lzdFN0cmluZ3MucXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZy5pbnZhbGlkUXVlcnlQYXJhbWV0ZXJzU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDI4IClcclxuICAgICAgfSApXHJcblxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gYWRkIHdhcm5pbmdzIHRvIGdlbmVyaWMgbWVzc2FnZVxyXG4gICAgbGV0IG1lc3NhZ2UgPSBgJHtKb2lzdFN0cmluZ3MucXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZy5vbmVPck1vcmVRdWVyeVBhcmFtZXRlcnNTdHJpbmdQcm9wZXJ0eS52YWx1ZX08YnI+PGJyPmA7XHJcbiAgICB3YXJuaW5ncy5mb3JFYWNoKCB3YXJuaW5nID0+IHtcclxuICAgICAgbWVzc2FnZSArPSBgJHt3YXJuaW5nLmtleX09JHt3YXJuaW5nLnZhbHVlfTxicj5gO1xyXG4gICAgfSApO1xyXG4gICAgbWVzc2FnZSArPSBgPGJyPiR7Sm9pc3RTdHJpbmdzLnF1ZXJ5UGFyYW1ldGVyc1dhcm5pbmdEaWFsb2cudGhlU2ltdWxhdGlvbldpbGxTdGFydFN0cmluZ1Byb3BlcnR5LnZhbHVlfWA7XHJcblxyXG4gICAgc3VwZXIoIG1lc3NhZ2UsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnUXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZycsIFF1ZXJ5UGFyYW1ldGVyc1dhcm5pbmdEaWFsb2cgKTtcclxuZXhwb3J0IGRlZmF1bHQgUXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLGlDQUFpQztBQUM3RSxPQUFPQyxVQUFVLE1BQTZCLHFDQUFxQztBQUNuRixPQUFPQyxRQUFRLE1BQU0sbUNBQW1DO0FBQ3hELFNBQVNDLElBQUksUUFBUSw2QkFBNkI7QUFDbEQsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUs1QyxNQUFNQyw0QkFBNEIsU0FBU0wsVUFBVSxDQUFDO0VBRXBEO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NNLFdBQVdBO0VBQ2hCO0VBQ0FDLFFBQW1CO0VBQUU7RUFDckJDLGVBQXFELEVBQUc7SUFFeERDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixRQUFRLENBQUNHLE1BQU0sR0FBRyxDQUFDLEVBQUcsZ0NBQStCSCxRQUFRLENBQUNHLE1BQU8sRUFBRSxDQUFDO0lBRTFGLE1BQU1DLE9BQU8sR0FBR1osU0FBUyxDQUFzRSxDQUFDLENBQUU7TUFFaEc7TUFDQWEsZUFBZSxFQUFFO1FBQ2ZDLElBQUksRUFBRSxJQUFJWixRQUFRLENBQUUsRUFBRztNQUN6QixDQUFDO01BQ0RhLEtBQUssRUFBRSxJQUFJWixJQUFJLENBQUVFLFlBQVksQ0FBQ1csNEJBQTRCLENBQUNDLG9DQUFvQyxFQUFFO1FBQy9GSCxJQUFJLEVBQUUsSUFBSVosUUFBUSxDQUFFLEVBQUc7TUFDekIsQ0FBRTtJQUVKLENBQUMsRUFBRU8sZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxJQUFJUyxPQUFPLEdBQUksR0FBRWIsWUFBWSxDQUFDVyw0QkFBNEIsQ0FBQ0csc0NBQXNDLENBQUNDLEtBQU0sVUFBUztJQUNqSFosUUFBUSxDQUFDYSxPQUFPLENBQUVDLE9BQU8sSUFBSTtNQUMzQkosT0FBTyxJQUFLLEdBQUVJLE9BQU8sQ0FBQ0MsR0FBSSxJQUFHRCxPQUFPLENBQUNGLEtBQU0sTUFBSztJQUNsRCxDQUFFLENBQUM7SUFDSEYsT0FBTyxJQUFLLE9BQU1iLFlBQVksQ0FBQ1csNEJBQTRCLENBQUNRLG9DQUFvQyxDQUFDSixLQUFNLEVBQUM7SUFFeEcsS0FBSyxDQUFFRixPQUFPLEVBQUVOLE9BQVEsQ0FBQztFQUMzQjtBQUNGO0FBRUFSLEtBQUssQ0FBQ3FCLFFBQVEsQ0FBRSw4QkFBOEIsRUFBRW5CLDRCQUE2QixDQUFDO0FBQzlFLGVBQWVBLDRCQUE0QiJ9