// Copyright 2022-2023, University of Colorado Boulder

/**
 * A ComboBox that lets you change a character or character set in a simulation to match a particular culture or region.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import ComboBox from '../../../sun/js/ComboBox.js';
import joist from '../joist.js';
import { HBox, Node, Text } from '../../../scenery/js/imports.js';
import PreferencesDialog from './PreferencesDialog.js';
import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
class RegionAndCultureComboBox extends ComboBox {
  /**
   * @param regionAndCultureProperty - CharacterSet indicating a selected region/culture that is connected to a particular set of representations
   * @param characterSets - The CharacterSet list, one for each region/culture.
   * @param [providedOptions?]
   */
  constructor(regionAndCultureProperty, characterSets, providedOptions) {
    const options = optionize()({
      // default yMargin is a bit smaller so that there is less white space around the character set icon
      yMargin: 3,
      // phet-io
      tandem: Tandem.OPT_OUT // We don't want to instrument components for preferences, https://github.com/phetsims/joist/issues/744#issuecomment-1196028362
    }, providedOptions);
    const comboBoxItems = characterSets.map((characterSet, index) => {
      // Since we don't own the Node, wrap in a container for PhET-iO DAG cases and I think archetypes?
      const wrappedIconNode = new Node({
        children: [characterSet.icon]
      });
      const itemContent = new HBox({
        children: [wrappedIconNode, new Text(characterSet.label, PreferencesDialog.PANEL_SECTION_CONTENT_OPTIONS)],
        spacing: 10
      });
      return {
        value: characterSet,
        createNode: tandem => itemContent
      };
    });

    // TODO: Need a different top layer node for ComboBox here. See https://github.com/phetsims/joist/issues/841
    super(regionAndCultureProperty, comboBoxItems, phet.joist.sim.topLayer, options);
  }
}
joist.register('RegionAndCultureComboBox', RegionAndCultureComboBox);
export default RegionAndCultureComboBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb21ib0JveCIsImpvaXN0IiwiSEJveCIsIk5vZGUiLCJUZXh0IiwiUHJlZmVyZW5jZXNEaWFsb2ciLCJvcHRpb25pemUiLCJUYW5kZW0iLCJSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3giLCJjb25zdHJ1Y3RvciIsInJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSIsImNoYXJhY3RlclNldHMiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwieU1hcmdpbiIsInRhbmRlbSIsIk9QVF9PVVQiLCJjb21ib0JveEl0ZW1zIiwibWFwIiwiY2hhcmFjdGVyU2V0IiwiaW5kZXgiLCJ3cmFwcGVkSWNvbk5vZGUiLCJjaGlsZHJlbiIsImljb24iLCJpdGVtQ29udGVudCIsImxhYmVsIiwiUEFORUxfU0VDVElPTl9DT05URU5UX09QVElPTlMiLCJzcGFjaW5nIiwidmFsdWUiLCJjcmVhdGVOb2RlIiwicGhldCIsInNpbSIsInRvcExheWVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBDb21ib0JveCB0aGF0IGxldHMgeW91IGNoYW5nZSBhIGNoYXJhY3RlciBvciBjaGFyYWN0ZXIgc2V0IGluIGEgc2ltdWxhdGlvbiB0byBtYXRjaCBhIHBhcnRpY3VsYXIgY3VsdHVyZSBvciByZWdpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBDb21ib0JveCwgeyBDb21ib0JveE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdW4vanMvQ29tYm9Cb3guanMnO1xyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi4vam9pc3QuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFByZWZlcmVuY2VzRGlhbG9nIGZyb20gJy4vUHJlZmVyZW5jZXNEaWFsb2cuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBDaGFyYWN0ZXJTZXQgZnJvbSAnLi9DaGFyYWN0ZXJTZXQuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbnR5cGUgUmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxDb21ib0JveE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmNsYXNzIFJlZ2lvbkFuZEN1bHR1cmVDb21ib0JveCBleHRlbmRzIENvbWJvQm94PENoYXJhY3RlclNldCB8IG51bGw+IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSAtIENoYXJhY3RlclNldCBpbmRpY2F0aW5nIGEgc2VsZWN0ZWQgcmVnaW9uL2N1bHR1cmUgdGhhdCBpcyBjb25uZWN0ZWQgdG8gYSBwYXJ0aWN1bGFyIHNldCBvZiByZXByZXNlbnRhdGlvbnNcclxuICAgKiBAcGFyYW0gY2hhcmFjdGVyU2V0cyAtIFRoZSBDaGFyYWN0ZXJTZXQgbGlzdCwgb25lIGZvciBlYWNoIHJlZ2lvbi9jdWx0dXJlLlxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zP11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eTogUHJvcGVydHk8Q2hhcmFjdGVyU2V0IHwgbnVsbD4sIGNoYXJhY3RlclNldHM6IENoYXJhY3RlclNldFtdLCBwcm92aWRlZE9wdGlvbnM/OiBSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3hPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94T3B0aW9ucywgU2VsZk9wdGlvbnMsIENvbWJvQm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gZGVmYXVsdCB5TWFyZ2luIGlzIGEgYml0IHNtYWxsZXIgc28gdGhhdCB0aGVyZSBpcyBsZXNzIHdoaXRlIHNwYWNlIGFyb3VuZCB0aGUgY2hhcmFjdGVyIHNldCBpY29uXHJcbiAgICAgIHlNYXJnaW46IDMsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVQgLy8gV2UgZG9uJ3Qgd2FudCB0byBpbnN0cnVtZW50IGNvbXBvbmVudHMgZm9yIHByZWZlcmVuY2VzLCBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzc0NCNpc3N1ZWNvbW1lbnQtMTE5NjAyODM2MlxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgY29tYm9Cb3hJdGVtcyA9IGNoYXJhY3RlclNldHMubWFwKCAoIGNoYXJhY3RlclNldCwgaW5kZXggKSA9PiB7XHJcblxyXG4gICAgICAvLyBTaW5jZSB3ZSBkb24ndCBvd24gdGhlIE5vZGUsIHdyYXAgaW4gYSBjb250YWluZXIgZm9yIFBoRVQtaU8gREFHIGNhc2VzIGFuZCBJIHRoaW5rIGFyY2hldHlwZXM/XHJcbiAgICAgIGNvbnN0IHdyYXBwZWRJY29uTm9kZSA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGNoYXJhY3RlclNldC5pY29uIF0gfSApO1xyXG4gICAgICBjb25zdCBpdGVtQ29udGVudCA9IG5ldyBIQm94KCB7XHJcbiAgICAgICAgY2hpbGRyZW46IFsgd3JhcHBlZEljb25Ob2RlLCBuZXcgVGV4dCggY2hhcmFjdGVyU2V0LmxhYmVsLCBQcmVmZXJlbmNlc0RpYWxvZy5QQU5FTF9TRUNUSU9OX0NPTlRFTlRfT1BUSU9OUyApIF0sXHJcbiAgICAgICAgc3BhY2luZzogMTBcclxuICAgICAgfSApO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB2YWx1ZTogY2hhcmFjdGVyU2V0LFxyXG4gICAgICAgIGNyZWF0ZU5vZGU6ICggdGFuZGVtOiBUYW5kZW0gKSA9PiBpdGVtQ29udGVudFxyXG4gICAgICB9O1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFRPRE86IE5lZWQgYSBkaWZmZXJlbnQgdG9wIGxheWVyIG5vZGUgZm9yIENvbWJvQm94IGhlcmUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzg0MVxyXG4gICAgc3VwZXIoIHJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSwgY29tYm9Cb3hJdGVtcywgcGhldC5qb2lzdC5zaW0udG9wTGF5ZXIsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnUmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94JywgUmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94ICk7XHJcbmV4cG9ydCBkZWZhdWx0IFJlZ2lvbkFuZEN1bHR1cmVDb21ib0JveDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBMkIsNkJBQTZCO0FBQ3ZFLE9BQU9DLEtBQUssTUFBTSxhQUFhO0FBQy9CLFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsZ0NBQWdDO0FBQ2pFLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUV0RCxPQUFPQyxTQUFTLE1BQTRCLG9DQUFvQztBQUVoRixPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBTWpELE1BQU1DLHdCQUF3QixTQUFTUixRQUFRLENBQXNCO0VBRW5FO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU1MsV0FBV0EsQ0FBRUMsd0JBQXVELEVBQUVDLGFBQTZCLEVBQUVDLGVBQWlELEVBQUc7SUFFOUosTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQWdFLENBQUMsQ0FBRTtNQUUxRjtNQUNBUSxPQUFPLEVBQUUsQ0FBQztNQUVWO01BQ0FDLE1BQU0sRUFBRVIsTUFBTSxDQUFDUyxPQUFPLENBQUM7SUFDekIsQ0FBQyxFQUFFSixlQUFnQixDQUFDO0lBRXBCLE1BQU1LLGFBQWEsR0FBR04sYUFBYSxDQUFDTyxHQUFHLENBQUUsQ0FBRUMsWUFBWSxFQUFFQyxLQUFLLEtBQU07TUFFbEU7TUFDQSxNQUFNQyxlQUFlLEdBQUcsSUFBSWxCLElBQUksQ0FBRTtRQUFFbUIsUUFBUSxFQUFFLENBQUVILFlBQVksQ0FBQ0ksSUFBSTtNQUFHLENBQUUsQ0FBQztNQUN2RSxNQUFNQyxXQUFXLEdBQUcsSUFBSXRCLElBQUksQ0FBRTtRQUM1Qm9CLFFBQVEsRUFBRSxDQUFFRCxlQUFlLEVBQUUsSUFBSWpCLElBQUksQ0FBRWUsWUFBWSxDQUFDTSxLQUFLLEVBQUVwQixpQkFBaUIsQ0FBQ3FCLDZCQUE4QixDQUFDLENBQUU7UUFDOUdDLE9BQU8sRUFBRTtNQUNYLENBQUUsQ0FBQztNQUVILE9BQU87UUFDTEMsS0FBSyxFQUFFVCxZQUFZO1FBQ25CVSxVQUFVLEVBQUlkLE1BQWMsSUFBTVM7TUFDcEMsQ0FBQztJQUNILENBQUUsQ0FBQzs7SUFFSDtJQUNBLEtBQUssQ0FBRWQsd0JBQXdCLEVBQUVPLGFBQWEsRUFBRWEsSUFBSSxDQUFDN0IsS0FBSyxDQUFDOEIsR0FBRyxDQUFDQyxRQUFRLEVBQUVuQixPQUFRLENBQUM7RUFDcEY7QUFDRjtBQUVBWixLQUFLLENBQUNnQyxRQUFRLENBQUUsMEJBQTBCLEVBQUV6Qix3QkFBeUIsQ0FBQztBQUN0RSxlQUFlQSx3QkFBd0IifQ==