// Copyright 2021-2022, University of Colorado Boulder

/**
 * Singleton that can save and load a Property's value to localStorage, and keep it in sync for the next runtime.
 * Must be used with ?preferencesStorage.
 *
 * NOTE: Property values are stringified, so don't try using this with something like `new StringProperty( 'true' )`
 *
 * author
 */

import joist from '../joist.js';
let preferencesStorage = null;
const PREFERENCES_KEY = 'PREFERENCES:';
class PreferencesStorage {
  enabled = true;

  // for debugging
  registedProperties = [];
  constructor() {
    try {
      // Always store the line indices just in case they want to be used by the next run.
      window.localStorage.setItem('test', 'test');
    } catch (e) {
      this.enabled = false; // can't use localStorage with browser settings

      if (e instanceof Error) {
        const safari = window.navigator.userAgent.includes('Safari') && !window.navigator.userAgent.includes('Chrome');
        if (safari && e.message.includes('QuotaExceededError')) {
          console.log('It looks like you are browsing with private mode in Safari. ' + 'Please turn that setting off if you want to use PreferencesStorage');
        } else {
          throw e;
        }
      }
    }
  }
  registerToLocalStorage(property, name) {
    const key = `${PREFERENCES_KEY}${name}`;
    if (window.localStorage.getItem(key)) {
      property.value = JSON.parse(window.localStorage.getItem(key));
    }
    property.link(value => {
      window.localStorage.setItem(key, JSON.stringify(value));
    });
    this.registedProperties.push(property);
  }
  static register(property, name) {
    if (!phet.chipper.queryParameters.preferencesStorage) {
      return property;
    }
    if (!preferencesStorage) {
      preferencesStorage = new PreferencesStorage();
    }
    if (preferencesStorage.enabled) {
      preferencesStorage.registerToLocalStorage(property, name);
    }
    return property;
  }
}
joist.register('PreferencesStorage', PreferencesStorage);
export default PreferencesStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsInByZWZlcmVuY2VzU3RvcmFnZSIsIlBSRUZFUkVOQ0VTX0tFWSIsIlByZWZlcmVuY2VzU3RvcmFnZSIsImVuYWJsZWQiLCJyZWdpc3RlZFByb3BlcnRpZXMiLCJjb25zdHJ1Y3RvciIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJlIiwiRXJyb3IiLCJzYWZhcmkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmNsdWRlcyIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwicmVnaXN0ZXJUb0xvY2FsU3RvcmFnZSIsInByb3BlcnR5IiwibmFtZSIsImtleSIsImdldEl0ZW0iLCJ2YWx1ZSIsIkpTT04iLCJwYXJzZSIsImxpbmsiLCJzdHJpbmdpZnkiLCJwdXNoIiwicmVnaXN0ZXIiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyJdLCJzb3VyY2VzIjpbIlByZWZlcmVuY2VzU3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaW5nbGV0b24gdGhhdCBjYW4gc2F2ZSBhbmQgbG9hZCBhIFByb3BlcnR5J3MgdmFsdWUgdG8gbG9jYWxTdG9yYWdlLCBhbmQga2VlcCBpdCBpbiBzeW5jIGZvciB0aGUgbmV4dCBydW50aW1lLlxyXG4gKiBNdXN0IGJlIHVzZWQgd2l0aCA/cHJlZmVyZW5jZXNTdG9yYWdlLlxyXG4gKlxyXG4gKiBOT1RFOiBQcm9wZXJ0eSB2YWx1ZXMgYXJlIHN0cmluZ2lmaWVkLCBzbyBkb24ndCB0cnkgdXNpbmcgdGhpcyB3aXRoIHNvbWV0aGluZyBsaWtlIGBuZXcgU3RyaW5nUHJvcGVydHkoICd0cnVlJyApYFxyXG4gKlxyXG4gKiBhdXRob3JcclxuICovXHJcblxyXG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvVFByb3BlcnR5LmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcblxyXG5sZXQgcHJlZmVyZW5jZXNTdG9yYWdlOiBQcmVmZXJlbmNlc1N0b3JhZ2UgfCBudWxsID0gbnVsbDtcclxuXHJcbmNvbnN0IFBSRUZFUkVOQ0VTX0tFWSA9ICdQUkVGRVJFTkNFUzonO1xyXG5cclxuY2xhc3MgUHJlZmVyZW5jZXNTdG9yYWdlIHtcclxuXHJcbiAgcHJpdmF0ZSBlbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgLy8gZm9yIGRlYnVnZ2luZ1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVnaXN0ZWRQcm9wZXJ0aWVzOiBUUHJvcGVydHk8dW5rbm93bj5bXSA9IFtdO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgIC8vIEFsd2F5cyBzdG9yZSB0aGUgbGluZSBpbmRpY2VzIGp1c3QgaW4gY2FzZSB0aGV5IHdhbnQgdG8gYmUgdXNlZCBieSB0aGUgbmV4dCBydW4uXHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSggJ3Rlc3QnLCAndGVzdCcgKTtcclxuICAgIH1cclxuICAgIGNhdGNoKCBlICkge1xyXG4gICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTsgLy8gY2FuJ3QgdXNlIGxvY2FsU3RvcmFnZSB3aXRoIGJyb3dzZXIgc2V0dGluZ3NcclxuXHJcbiAgICAgIGlmICggZSBpbnN0YW5jZW9mIEVycm9yICkge1xyXG4gICAgICAgIGNvbnN0IHNhZmFyaSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCAnU2FmYXJpJyApICYmICF3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyggJ0Nocm9tZScgKTtcclxuXHJcbiAgICAgICAgaWYgKCBzYWZhcmkgJiYgZS5tZXNzYWdlLmluY2x1ZGVzKCAnUXVvdGFFeGNlZWRlZEVycm9yJyApICkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgYnJvd3Npbmcgd2l0aCBwcml2YXRlIG1vZGUgaW4gU2FmYXJpLiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIHR1cm4gdGhhdCBzZXR0aW5nIG9mZiBpZiB5b3Ugd2FudCB0byB1c2UgUHJlZmVyZW5jZXNTdG9yYWdlJyApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZ2lzdGVyVG9Mb2NhbFN0b3JhZ2UoIHByb3BlcnR5OiBUUHJvcGVydHk8dW5rbm93bj4sIG5hbWU6IHN0cmluZyApOiB2b2lkIHtcclxuICAgIGNvbnN0IGtleSA9IGAke1BSRUZFUkVOQ0VTX0tFWX0ke25hbWV9YDtcclxuICAgIGlmICggd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCBrZXkgKSApIHtcclxuICAgICAgcHJvcGVydHkudmFsdWUgPSBKU09OLnBhcnNlKCB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oIGtleSApISApO1xyXG4gICAgfVxyXG4gICAgcHJvcGVydHkubGluayggKCB2YWx1ZTogSW50ZW50aW9uYWxBbnkgKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgga2V5LCBKU09OLnN0cmluZ2lmeSggdmFsdWUgKSApO1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5yZWdpc3RlZFByb3BlcnRpZXMucHVzaCggcHJvcGVydHkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVnaXN0ZXIoIHByb3BlcnR5OiBUUHJvcGVydHk8dW5rbm93bj4sIG5hbWU6IHN0cmluZyApOiBUUHJvcGVydHk8dW5rbm93bj4ge1xyXG4gICAgaWYgKCAhcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5wcmVmZXJlbmNlc1N0b3JhZ2UgKSB7XHJcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoICFwcmVmZXJlbmNlc1N0b3JhZ2UgKSB7XHJcbiAgICAgIHByZWZlcmVuY2VzU3RvcmFnZSA9IG5ldyBQcmVmZXJlbmNlc1N0b3JhZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIHByZWZlcmVuY2VzU3RvcmFnZS5lbmFibGVkICkge1xyXG4gICAgICBwcmVmZXJlbmNlc1N0b3JhZ2UucmVnaXN0ZXJUb0xvY2FsU3RvcmFnZSggcHJvcGVydHksIG5hbWUgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcHJvcGVydHk7XHJcbiAgfVxyXG59XHJcblxyXG5qb2lzdC5yZWdpc3RlciggJ1ByZWZlcmVuY2VzU3RvcmFnZScsIFByZWZlcmVuY2VzU3RvcmFnZSApO1xyXG5leHBvcnQgZGVmYXVsdCBQcmVmZXJlbmNlc1N0b3JhZ2U7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLEtBQUssTUFBTSxhQUFhO0FBRy9CLElBQUlDLGtCQUE2QyxHQUFHLElBQUk7QUFFeEQsTUFBTUMsZUFBZSxHQUFHLGNBQWM7QUFFdEMsTUFBTUMsa0JBQWtCLENBQUM7RUFFZkMsT0FBTyxHQUFHLElBQUk7O0VBRXRCO0VBQ2lCQyxrQkFBa0IsR0FBeUIsRUFBRTtFQUV2REMsV0FBV0EsQ0FBQSxFQUFHO0lBRW5CLElBQUk7TUFFRjtNQUNBQyxNQUFNLENBQUNDLFlBQVksQ0FBQ0MsT0FBTyxDQUFFLE1BQU0sRUFBRSxNQUFPLENBQUM7SUFDL0MsQ0FBQyxDQUNELE9BQU9DLENBQUMsRUFBRztNQUNULElBQUksQ0FBQ04sT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDOztNQUV0QixJQUFLTSxDQUFDLFlBQVlDLEtBQUssRUFBRztRQUN4QixNQUFNQyxNQUFNLEdBQUdMLE1BQU0sQ0FBQ00sU0FBUyxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBRSxRQUFTLENBQUMsSUFBSSxDQUFDUixNQUFNLENBQUNNLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRLENBQUUsUUFBUyxDQUFDO1FBRWxILElBQUtILE1BQU0sSUFBSUYsQ0FBQyxDQUFDTSxPQUFPLENBQUNELFFBQVEsQ0FBRSxvQkFBcUIsQ0FBQyxFQUFHO1VBQzFERSxPQUFPLENBQUNDLEdBQUcsQ0FBRSw4REFBOEQsR0FDOUQsb0VBQXFFLENBQUM7UUFDckYsQ0FBQyxNQUNJO1VBQ0gsTUFBTVIsQ0FBQztRQUNUO01BQ0Y7SUFDRjtFQUNGO0VBRVFTLHNCQUFzQkEsQ0FBRUMsUUFBNEIsRUFBRUMsSUFBWSxFQUFTO0lBQ2pGLE1BQU1DLEdBQUcsR0FBSSxHQUFFcEIsZUFBZ0IsR0FBRW1CLElBQUssRUFBQztJQUN2QyxJQUFLZCxNQUFNLENBQUNDLFlBQVksQ0FBQ2UsT0FBTyxDQUFFRCxHQUFJLENBQUMsRUFBRztNQUN4Q0YsUUFBUSxDQUFDSSxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFFbkIsTUFBTSxDQUFDQyxZQUFZLENBQUNlLE9BQU8sQ0FBRUQsR0FBSSxDQUFHLENBQUM7SUFDcEU7SUFDQUYsUUFBUSxDQUFDTyxJQUFJLENBQUlILEtBQXFCLElBQU07TUFDMUNqQixNQUFNLENBQUNDLFlBQVksQ0FBQ0MsT0FBTyxDQUFFYSxHQUFHLEVBQUVHLElBQUksQ0FBQ0csU0FBUyxDQUFFSixLQUFNLENBQUUsQ0FBQztJQUM3RCxDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNuQixrQkFBa0IsQ0FBQ3dCLElBQUksQ0FBRVQsUUFBUyxDQUFDO0VBQzFDO0VBRUEsT0FBY1UsUUFBUUEsQ0FBRVYsUUFBNEIsRUFBRUMsSUFBWSxFQUF1QjtJQUN2RixJQUFLLENBQUNVLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNoQyxrQkFBa0IsRUFBRztNQUN0RCxPQUFPbUIsUUFBUTtJQUNqQjtJQUVBLElBQUssQ0FBQ25CLGtCQUFrQixFQUFHO01BQ3pCQSxrQkFBa0IsR0FBRyxJQUFJRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9DO0lBRUEsSUFBS0Ysa0JBQWtCLENBQUNHLE9BQU8sRUFBRztNQUNoQ0gsa0JBQWtCLENBQUNrQixzQkFBc0IsQ0FBRUMsUUFBUSxFQUFFQyxJQUFLLENBQUM7SUFDN0Q7SUFFQSxPQUFPRCxRQUFRO0VBQ2pCO0FBQ0Y7QUFFQXBCLEtBQUssQ0FBQzhCLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRTNCLGtCQUFtQixDQUFDO0FBQzFELGVBQWVBLGtCQUFrQiJ9