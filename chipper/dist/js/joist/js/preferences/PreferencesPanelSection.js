// Copyright 2021-2023, University of Colorado Boulder

/**
 * A section of content in a PreferencesPanel of the PreferencseDialog. Handles layout for the title of the section
 * and its content. The preferences panels are responsible for layout of multiple PreferencesTabPanelSections.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize, { combineOptions } from '../../../phet-core/js/optionize.js';
import { AlignGroup, Node, VBox } from '../../../scenery/js/imports.js';
import joist from '../joist.js';
import PreferencesDialog from './PreferencesDialog.js';
class PreferencesPanelSection extends VBox {
  constructor(providedOptions) {
    const options = optionize()({
      spacing: PreferencesDialog.CONTENT_SPACING,
      titleNode: null,
      contentNode: null,
      contentNodeOptions: {},
      contentLeftMargin: 30
    }, providedOptions);

    // layout - supports the layout of contentNode nested under the titleNode with indentation
    const sectionAlignGroup = new AlignGroup({
      matchVertical: false
    });
    const sectionChildren = [];
    if (options.titleNode) {
      sectionChildren.push(sectionAlignGroup.createBox(options.titleNode, {
        xAlign: 'left'
      }));
    }
    if (options.contentNode) {
      const contentNodeOptions = combineOptions({
        children: [options.contentNode]
      }, options.contentNodeOptions);
      sectionChildren.push(sectionAlignGroup.createBox(new Node(contentNodeOptions), {
        leftMargin: options.contentLeftMargin,
        xAlign: 'left'
      }));
    }
    options.children = sectionChildren;
    super(options);
    this.disposePreferencesPanelSection = () => {
      sectionAlignGroup.dispose();
    };
  }

  /**
   * Disposal is necessary because this component uses AlignGroup.
   */
  dispose() {
    this.disposePreferencesPanelSection();
    super.dispose();
  }
}
joist.register('PreferencesPanelSection', PreferencesPanelSection);
export default PreferencesPanelSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkFsaWduR3JvdXAiLCJOb2RlIiwiVkJveCIsImpvaXN0IiwiUHJlZmVyZW5jZXNEaWFsb2ciLCJQcmVmZXJlbmNlc1BhbmVsU2VjdGlvbiIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNwYWNpbmciLCJDT05URU5UX1NQQUNJTkciLCJ0aXRsZU5vZGUiLCJjb250ZW50Tm9kZSIsImNvbnRlbnROb2RlT3B0aW9ucyIsImNvbnRlbnRMZWZ0TWFyZ2luIiwic2VjdGlvbkFsaWduR3JvdXAiLCJtYXRjaFZlcnRpY2FsIiwic2VjdGlvbkNoaWxkcmVuIiwicHVzaCIsImNyZWF0ZUJveCIsInhBbGlnbiIsImNoaWxkcmVuIiwibGVmdE1hcmdpbiIsImRpc3Bvc2VQcmVmZXJlbmNlc1BhbmVsU2VjdGlvbiIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByZWZlcmVuY2VzUGFuZWxTZWN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgc2VjdGlvbiBvZiBjb250ZW50IGluIGEgUHJlZmVyZW5jZXNQYW5lbCBvZiB0aGUgUHJlZmVyZW5jc2VEaWFsb2cuIEhhbmRsZXMgbGF5b3V0IGZvciB0aGUgdGl0bGUgb2YgdGhlIHNlY3Rpb25cclxuICogYW5kIGl0cyBjb250ZW50LiBUaGUgcHJlZmVyZW5jZXMgcGFuZWxzIGFyZSByZXNwb25zaWJsZSBmb3IgbGF5b3V0IG9mIG11bHRpcGxlIFByZWZlcmVuY2VzVGFiUGFuZWxTZWN0aW9ucy5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCB7IEFsaWduR3JvdXAsIE5vZGUsIE5vZGVPcHRpb25zLCBWQm94LCBWQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBqb2lzdCBmcm9tICcuLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc0RpYWxvZyBmcm9tICcuL1ByZWZlcmVuY2VzRGlhbG9nLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIGlmIHByb3ZpZGVkLCB3aWxsIGJlIHRoZSB0aXRsZSBmb3IgdGhlIHNlY3Rpb24gYW5kIGNvbnRlbnQgd2lsbCBiZSBuZXN0ZWQgdW5kZXIgdGhlIHRpdGxlTm9kZVxyXG4gIC8vIGluZGVudGVkIHdpdGggY29udGVudExlZnRNYXJnaW5cclxuICB0aXRsZU5vZGU/OiBOb2RlIHwgbnVsbDtcclxuXHJcbiAgLy8gaWYgcHJvdmlkZWQsIHRoZSBjb250ZW50IGZvciB0aGUgc2VjdGlvbiB3aGljaCB3aWxsIGJlIG5lc3RlZCB1bmRlciB0aGUgdGl0bGVOb2RlXHJcbiAgY29udGVudE5vZGU/OiBOb2RlIHwgbnVsbDtcclxuXHJcbiAgY29udGVudE5vZGVPcHRpb25zPzogU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG4gIC8vIGluZGVudGF0aW9uIGZvciB0aGUgY29udGVudE5vZGUgKGlmIHByb3ZpZGVkKSBmb3IgbGF5b3V0IGFzIGl0IGlzIG5lc3RlZCB1bmRlciB0aGUgdGl0bGVOb2RlXHJcbiAgY29udGVudExlZnRNYXJnaW4/OiBudW1iZXI7XHJcbn07XHJcbmV4cG9ydCB0eXBlIFByZWZlcmVuY2VzUGFuZWxTZWN0aW9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxWQm94T3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5jbGFzcyBQcmVmZXJlbmNlc1BhbmVsU2VjdGlvbiBleHRlbmRzIFZCb3gge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVByZWZlcmVuY2VzUGFuZWxTZWN0aW9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IFByZWZlcmVuY2VzUGFuZWxTZWN0aW9uT3B0aW9ucyApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UHJlZmVyZW5jZXNQYW5lbFNlY3Rpb25PcHRpb25zLCBTZWxmT3B0aW9ucywgVkJveE9wdGlvbnM+KCkoIHtcclxuICAgICAgc3BhY2luZzogUHJlZmVyZW5jZXNEaWFsb2cuQ09OVEVOVF9TUEFDSU5HLFxyXG4gICAgICB0aXRsZU5vZGU6IG51bGwsXHJcbiAgICAgIGNvbnRlbnROb2RlOiBudWxsLFxyXG4gICAgICBjb250ZW50Tm9kZU9wdGlvbnM6IHt9LFxyXG4gICAgICBjb250ZW50TGVmdE1hcmdpbjogMzBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGxheW91dCAtIHN1cHBvcnRzIHRoZSBsYXlvdXQgb2YgY29udGVudE5vZGUgbmVzdGVkIHVuZGVyIHRoZSB0aXRsZU5vZGUgd2l0aCBpbmRlbnRhdGlvblxyXG4gICAgY29uc3Qgc2VjdGlvbkFsaWduR3JvdXAgPSBuZXcgQWxpZ25Hcm91cCggeyBtYXRjaFZlcnRpY2FsOiBmYWxzZSB9ICk7XHJcblxyXG4gICAgY29uc3Qgc2VjdGlvbkNoaWxkcmVuID0gW107XHJcbiAgICBpZiAoIG9wdGlvbnMudGl0bGVOb2RlICkge1xyXG4gICAgICBzZWN0aW9uQ2hpbGRyZW4ucHVzaCggc2VjdGlvbkFsaWduR3JvdXAuY3JlYXRlQm94KCBvcHRpb25zLnRpdGxlTm9kZSwge1xyXG4gICAgICAgIHhBbGlnbjogJ2xlZnQnXHJcbiAgICAgIH0gKSApO1xyXG4gICAgfVxyXG4gICAgaWYgKCBvcHRpb25zLmNvbnRlbnROb2RlICkge1xyXG4gICAgICBjb25zdCBjb250ZW50Tm9kZU9wdGlvbnMgPSBjb21iaW5lT3B0aW9uczxOb2RlT3B0aW9ucz4oIHsgY2hpbGRyZW46IFsgb3B0aW9ucy5jb250ZW50Tm9kZSBdIH0sIG9wdGlvbnMuY29udGVudE5vZGVPcHRpb25zICk7XHJcbiAgICAgIHNlY3Rpb25DaGlsZHJlbi5wdXNoKCBzZWN0aW9uQWxpZ25Hcm91cC5jcmVhdGVCb3goIG5ldyBOb2RlKCBjb250ZW50Tm9kZU9wdGlvbnMgKSwge1xyXG4gICAgICAgIGxlZnRNYXJnaW46IG9wdGlvbnMuY29udGVudExlZnRNYXJnaW4sXHJcbiAgICAgICAgeEFsaWduOiAnbGVmdCdcclxuICAgICAgfSApICk7XHJcbiAgICB9XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IHNlY3Rpb25DaGlsZHJlbjtcclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlUHJlZmVyZW5jZXNQYW5lbFNlY3Rpb24gPSAoKSA9PiB7XHJcbiAgICAgIHNlY3Rpb25BbGlnbkdyb3VwLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwb3NhbCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGlzIGNvbXBvbmVudCB1c2VzIEFsaWduR3JvdXAuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VQcmVmZXJlbmNlc1BhbmVsU2VjdGlvbigpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdQcmVmZXJlbmNlc1BhbmVsU2VjdGlvbicsIFByZWZlcmVuY2VzUGFuZWxTZWN0aW9uICk7XHJcbmV4cG9ydCBkZWZhdWx0IFByZWZlcmVuY2VzUGFuZWxTZWN0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsSUFBSUMsY0FBYyxRQUFRLG9DQUFvQztBQUU5RSxTQUFTQyxVQUFVLEVBQUVDLElBQUksRUFBZUMsSUFBSSxRQUFxQixnQ0FBZ0M7QUFDakcsT0FBT0MsS0FBSyxNQUFNLGFBQWE7QUFDL0IsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBa0J0RCxNQUFNQyx1QkFBdUIsU0FBU0gsSUFBSSxDQUFDO0VBR2xDSSxXQUFXQSxDQUFFQyxlQUFnRCxFQUFHO0lBQ3JFLE1BQU1DLE9BQU8sR0FBR1YsU0FBUyxDQUEyRCxDQUFDLENBQUU7TUFDckZXLE9BQU8sRUFBRUwsaUJBQWlCLENBQUNNLGVBQWU7TUFDMUNDLFNBQVMsRUFBRSxJQUFJO01BQ2ZDLFdBQVcsRUFBRSxJQUFJO01BQ2pCQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7TUFDdEJDLGlCQUFpQixFQUFFO0lBQ3JCLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNUSxpQkFBaUIsR0FBRyxJQUFJZixVQUFVLENBQUU7TUFBRWdCLGFBQWEsRUFBRTtJQUFNLENBQUUsQ0FBQztJQUVwRSxNQUFNQyxlQUFlLEdBQUcsRUFBRTtJQUMxQixJQUFLVCxPQUFPLENBQUNHLFNBQVMsRUFBRztNQUN2Qk0sZUFBZSxDQUFDQyxJQUFJLENBQUVILGlCQUFpQixDQUFDSSxTQUFTLENBQUVYLE9BQU8sQ0FBQ0csU0FBUyxFQUFFO1FBQ3BFUyxNQUFNLEVBQUU7TUFDVixDQUFFLENBQUUsQ0FBQztJQUNQO0lBQ0EsSUFBS1osT0FBTyxDQUFDSSxXQUFXLEVBQUc7TUFDekIsTUFBTUMsa0JBQWtCLEdBQUdkLGNBQWMsQ0FBZTtRQUFFc0IsUUFBUSxFQUFFLENBQUViLE9BQU8sQ0FBQ0ksV0FBVztNQUFHLENBQUMsRUFBRUosT0FBTyxDQUFDSyxrQkFBbUIsQ0FBQztNQUMzSEksZUFBZSxDQUFDQyxJQUFJLENBQUVILGlCQUFpQixDQUFDSSxTQUFTLENBQUUsSUFBSWxCLElBQUksQ0FBRVksa0JBQW1CLENBQUMsRUFBRTtRQUNqRlMsVUFBVSxFQUFFZCxPQUFPLENBQUNNLGlCQUFpQjtRQUNyQ00sTUFBTSxFQUFFO01BQ1YsQ0FBRSxDQUFFLENBQUM7SUFDUDtJQUVBWixPQUFPLENBQUNhLFFBQVEsR0FBR0osZUFBZTtJQUNsQyxLQUFLLENBQUVULE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNlLDhCQUE4QixHQUFHLE1BQU07TUFDMUNSLGlCQUFpQixDQUFDUyxPQUFPLENBQUMsQ0FBQztJQUM3QixDQUFDO0VBQ0g7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCQSxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDRCw4QkFBOEIsQ0FBQyxDQUFDO0lBQ3JDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBckIsS0FBSyxDQUFDc0IsUUFBUSxDQUFFLHlCQUF5QixFQUFFcEIsdUJBQXdCLENBQUM7QUFDcEUsZUFBZUEsdUJBQXVCIn0=