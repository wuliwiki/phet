// Copyright 2022-2023, University of Colorado Boulder

/**
 * A superclass for a panel of content in the Preferences Dialog. Mostly responsible for visibility of panel content.
 *
 * @author Jesse Greenberg
 */

import joist from '../joist.js';
import { Node } from '../../../scenery/js/imports.js';
import Multilink from '../../../axon/js/Multilink.js';
import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
class PreferencesPanel extends Node {
  /**
   * @param preferencesType - PreferencesType for this panel
   * @param selectedTabProperty - Property representing the selected tab to be displayed.
   * @param tabVisibleProperty - Is the Tab for this panel invisible (so this panel should also be invisible)?
   * @param providedOptions
   */
  constructor(preferencesType, selectedTabProperty, tabVisibleProperty, providedOptions) {
    const options = optionize()({
      // pdom
      tagName: 'div',
      labelTagName: 'h2',
      // phet-io - Many PreferencesPanels do not need a Tandem, but some subclasses make it required for sub components
      tandem: Tandem.OPTIONAL
    }, providedOptions);
    options.tandem = Tandem.OPTIONAL; // don't instrument the Panel Node itself

    super(options);

    // This panel is only visible when selected tab is this preferencesType, but it can also be hidden explicitly by
    // PhET-iO.
    const visibilityMultilink = Multilink.multilink([selectedTabProperty, tabVisibleProperty], (selectedTab, tabVisible) => {
      this.visible = selectedTab === preferencesType && tabVisible;
    });
    this.disposePreferencesPanel = () => {
      Multilink.unmultilink(visibilityMultilink);
    };
  }
  dispose() {
    this.disposePreferencesPanel();
    super.dispose();
  }
}
joist.register('PreferencesPanel', PreferencesPanel);
export default PreferencesPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsIk5vZGUiLCJNdWx0aWxpbmsiLCJvcHRpb25pemUiLCJUYW5kZW0iLCJQcmVmZXJlbmNlc1BhbmVsIiwiY29uc3RydWN0b3IiLCJwcmVmZXJlbmNlc1R5cGUiLCJzZWxlY3RlZFRhYlByb3BlcnR5IiwidGFiVmlzaWJsZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInRhZ05hbWUiLCJsYWJlbFRhZ05hbWUiLCJ0YW5kZW0iLCJPUFRJT05BTCIsInZpc2liaWxpdHlNdWx0aWxpbmsiLCJtdWx0aWxpbmsiLCJzZWxlY3RlZFRhYiIsInRhYlZpc2libGUiLCJ2aXNpYmxlIiwiZGlzcG9zZVByZWZlcmVuY2VzUGFuZWwiLCJ1bm11bHRpbGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByZWZlcmVuY2VzUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBzdXBlcmNsYXNzIGZvciBhIHBhbmVsIG9mIGNvbnRlbnQgaW4gdGhlIFByZWZlcmVuY2VzIERpYWxvZy4gTW9zdGx5IHJlc3BvbnNpYmxlIGZvciB2aXNpYmlsaXR5IG9mIHBhbmVsIGNvbnRlbnQuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqL1xyXG5cclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNUeXBlIGZyb20gJy4vUHJlZmVyZW5jZXNUeXBlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBQcmVmZXJlbmNlc1BhbmVsT3B0aW9ucyA9IFN0cmljdE9taXQ8Tm9kZU9wdGlvbnMsICd0YWdOYW1lJyB8ICdsYWJlbFRhZ05hbWUnPjtcclxuXHJcbmNsYXNzIFByZWZlcmVuY2VzUGFuZWwgZXh0ZW5kcyBOb2RlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VQcmVmZXJlbmNlc1BhbmVsOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcHJlZmVyZW5jZXNUeXBlIC0gUHJlZmVyZW5jZXNUeXBlIGZvciB0aGlzIHBhbmVsXHJcbiAgICogQHBhcmFtIHNlbGVjdGVkVGFiUHJvcGVydHkgLSBQcm9wZXJ0eSByZXByZXNlbnRpbmcgdGhlIHNlbGVjdGVkIHRhYiB0byBiZSBkaXNwbGF5ZWQuXHJcbiAgICogQHBhcmFtIHRhYlZpc2libGVQcm9wZXJ0eSAtIElzIHRoZSBUYWIgZm9yIHRoaXMgcGFuZWwgaW52aXNpYmxlIChzbyB0aGlzIHBhbmVsIHNob3VsZCBhbHNvIGJlIGludmlzaWJsZSk/XHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJlZmVyZW5jZXNUeXBlOiBQcmVmZXJlbmNlc1R5cGUsIHNlbGVjdGVkVGFiUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFByZWZlcmVuY2VzVHlwZT4sIHRhYlZpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sIHByb3ZpZGVkT3B0aW9ucz86IFByZWZlcmVuY2VzUGFuZWxPcHRpb25zICkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQcmVmZXJlbmNlc1BhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICBsYWJlbFRhZ05hbWU6ICdoMicsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvIC0gTWFueSBQcmVmZXJlbmNlc1BhbmVscyBkbyBub3QgbmVlZCBhIFRhbmRlbSwgYnV0IHNvbWUgc3ViY2xhc3NlcyBtYWtlIGl0IHJlcXVpcmVkIGZvciBzdWIgY29tcG9uZW50c1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRJT05BTFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy50YW5kZW0gPSBUYW5kZW0uT1BUSU9OQUw7IC8vIGRvbid0IGluc3RydW1lbnQgdGhlIFBhbmVsIE5vZGUgaXRzZWxmXHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBUaGlzIHBhbmVsIGlzIG9ubHkgdmlzaWJsZSB3aGVuIHNlbGVjdGVkIHRhYiBpcyB0aGlzIHByZWZlcmVuY2VzVHlwZSwgYnV0IGl0IGNhbiBhbHNvIGJlIGhpZGRlbiBleHBsaWNpdGx5IGJ5XHJcbiAgICAvLyBQaEVULWlPLlxyXG4gICAgY29uc3QgdmlzaWJpbGl0eU11bHRpbGluayA9IE11bHRpbGluay5tdWx0aWxpbmsoIFsgc2VsZWN0ZWRUYWJQcm9wZXJ0eSwgdGFiVmlzaWJsZVByb3BlcnR5IF0sICggc2VsZWN0ZWRUYWIsIHRhYlZpc2libGUgKSA9PiB7XHJcbiAgICAgIHRoaXMudmlzaWJsZSA9IHNlbGVjdGVkVGFiID09PSBwcmVmZXJlbmNlc1R5cGUgJiYgdGFiVmlzaWJsZTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VQcmVmZXJlbmNlc1BhbmVsID0gKCkgPT4ge1xyXG4gICAgICBNdWx0aWxpbmsudW5tdWx0aWxpbmsoIHZpc2liaWxpdHlNdWx0aWxpbmsgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVByZWZlcmVuY2VzUGFuZWwoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnUHJlZmVyZW5jZXNQYW5lbCcsIFByZWZlcmVuY2VzUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgUHJlZmVyZW5jZXNQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLGFBQWE7QUFDL0IsU0FBU0MsSUFBSSxRQUFxQixnQ0FBZ0M7QUFDbEUsT0FBT0MsU0FBUyxNQUFNLCtCQUErQjtBQUdyRCxPQUFPQyxTQUFTLE1BQTRCLG9DQUFvQztBQUVoRixPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBS2pELE1BQU1DLGdCQUFnQixTQUFTSixJQUFJLENBQUM7RUFHbEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NLLFdBQVdBLENBQUVDLGVBQWdDLEVBQUVDLG1CQUF1RCxFQUFFQyxrQkFBOEMsRUFBRUMsZUFBeUMsRUFBRztJQUN6TSxNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBb0QsQ0FBQyxDQUFFO01BRTlFO01BQ0FTLE9BQU8sRUFBRSxLQUFLO01BQ2RDLFlBQVksRUFBRSxJQUFJO01BRWxCO01BQ0FDLE1BQU0sRUFBRVYsTUFBTSxDQUFDVztJQUNqQixDQUFDLEVBQUVMLGVBQWdCLENBQUM7SUFFcEJDLE9BQU8sQ0FBQ0csTUFBTSxHQUFHVixNQUFNLENBQUNXLFFBQVEsQ0FBQyxDQUFDOztJQUVsQyxLQUFLLENBQUVKLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQTtJQUNBLE1BQU1LLG1CQUFtQixHQUFHZCxTQUFTLENBQUNlLFNBQVMsQ0FBRSxDQUFFVCxtQkFBbUIsRUFBRUMsa0JBQWtCLENBQUUsRUFBRSxDQUFFUyxXQUFXLEVBQUVDLFVBQVUsS0FBTTtNQUMzSCxJQUFJLENBQUNDLE9BQU8sR0FBR0YsV0FBVyxLQUFLWCxlQUFlLElBQUlZLFVBQVU7SUFDOUQsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDRSx1QkFBdUIsR0FBRyxNQUFNO01BQ25DbkIsU0FBUyxDQUFDb0IsV0FBVyxDQUFFTixtQkFBb0IsQ0FBQztJQUM5QyxDQUFDO0VBQ0g7RUFFZ0JPLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNGLHVCQUF1QixDQUFDLENBQUM7SUFDOUIsS0FBSyxDQUFDRSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUF2QixLQUFLLENBQUN3QixRQUFRLENBQUUsa0JBQWtCLEVBQUVuQixnQkFBaUIsQ0FBQztBQUN0RCxlQUFlQSxnQkFBZ0IifQ==