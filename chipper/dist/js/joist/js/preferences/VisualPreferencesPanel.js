// Copyright 2021-2023, University of Colorado Boulder

/**
 * A panel for the PreferencesDialog with controls for visual preferences. Includes features such as
 * "Interactive Highlights" and perhaps others in the future.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import merge from '../../../phet-core/js/merge.js';
import { Node, Text, VBox, VoicingText } from '../../../scenery/js/imports.js';
import joist from '../joist.js';
import JoistStrings from '../JoistStrings.js';
import PreferencesDialog from './PreferencesDialog.js';
import PreferencesPanelSection from './PreferencesPanelSection.js';
import PreferencesControl from './PreferencesControl.js';
import optionize, { combineOptions } from '../../../phet-core/js/optionize.js';
import ProjectorModeToggleSwitch from './ProjectorModeToggleSwitch.js';
import Tandem from '../../../tandem/js/Tandem.js';
import PreferencesPanel from './PreferencesPanel.js';
import PreferencesType from './PreferencesType.js';
import ToggleSwitch from '../../../sun/js/ToggleSwitch.js';
import PreferencesDialogConstants from './PreferencesDialogConstants.js';
import PatternStringProperty from '../../../axon/js/PatternStringProperty.js';

// constants
const interactiveHighlightsStringProperty = JoistStrings.preferences.tabs.visual.interactiveHighlightsStringProperty;
const interactiveHighlightsDescriptionStringProperty = JoistStrings.preferences.tabs.visual.interactiveHighlightsDescriptionStringProperty;
const interactiveHighlightsEnabledAlertStringProperty = JoistStrings.a11y.preferences.tabs.visual.interactiveHighlights.enabledAlertStringProperty;
const interactiveHighlightsDisabledAlertStringProperty = JoistStrings.a11y.preferences.tabs.visual.interactiveHighlights.disabledAlertStringProperty;
const labelledDescriptionPatternStringProperty = JoistStrings.a11y.preferences.tabs.labelledDescriptionPatternStringProperty;
class VisualPreferencesPanel extends PreferencesPanel {
  constructor(visualModel, selectedTabProperty, tabVisibleProperty, providedOptions) {
    const options = optionize()({
      labelContent: 'Visual'
    }, providedOptions);

    // Grab the required tandem for subcomponents but the tandem is NOT passed through to the super
    const tandem = options.tandem;
    options.tandem = Tandem.OPTIONAL;
    super(PreferencesType.VISUAL, selectedTabProperty, tabVisibleProperty, options);
    const contentNode = new VBox({
      spacing: PreferencesDialog.CONTENT_SPACING,
      align: 'left'
    });
    if (visualModel.supportsProjectorMode) {
      const projectorModeSwitch = new ProjectorModeToggleSwitch(visualModel.colorProfileProperty);
      contentNode.addChild(projectorModeSwitch);
      this.disposeEmitter.addListener(() => projectorModeSwitch.dispose());
    }
    if (visualModel.supportsInteractiveHighlights) {
      const label = new Text(interactiveHighlightsStringProperty, PreferencesDialog.PANEL_SECTION_LABEL_OPTIONS);
      const highlightsReadingBlockNameResponsePatternStringProperty = new PatternStringProperty(labelledDescriptionPatternStringProperty, {
        label: interactiveHighlightsStringProperty,
        description: interactiveHighlightsDescriptionStringProperty
      });
      const interactiveHighlightsEnabledSwitchVoicingText = new VoicingText(interactiveHighlightsDescriptionStringProperty, merge({}, PreferencesDialog.PANEL_SECTION_CONTENT_OPTIONS, {
        readingBlockNameResponse: highlightsReadingBlockNameResponsePatternStringProperty
      }));
      const interactiveHighlightsEnabledSwitch = new ToggleSwitch(visualModel.interactiveHighlightsEnabledProperty, false, true, combineOptions({
        a11yName: interactiveHighlightsStringProperty,
        leftValueContextResponse: interactiveHighlightsDisabledAlertStringProperty,
        rightValueContextResponse: interactiveHighlightsEnabledAlertStringProperty
      }, PreferencesDialogConstants.TOGGLE_SWITCH_OPTIONS));
      const interactiveHighlightsEnabledControl = new PreferencesControl({
        labelNode: label,
        descriptionNode: interactiveHighlightsEnabledSwitchVoicingText,
        controlNode: interactiveHighlightsEnabledSwitch
      });
      contentNode.addChild(interactiveHighlightsEnabledControl);
      this.disposeEmitter.addListener(() => {
        interactiveHighlightsEnabledControl.dispose();
        interactiveHighlightsEnabledSwitch.dispose();
        interactiveHighlightsEnabledSwitchVoicingText.dispose();
        highlightsReadingBlockNameResponsePatternStringProperty.dispose();
        label.dispose();
      });
    }
    visualModel.customPreferences.forEach(customPreference => {
      const customContent = customPreference.createContent(tandem);
      const node = new Node({
        children: [customContent]
      });
      contentNode.addChild(node);
      this.disposeEmitter.addListener(() => {
        customContent.dispose();
        node.dispose();
      });
    });
    const panelSection = new PreferencesPanelSection({
      contentNode: contentNode,
      // no title for this section so no indendation necessary
      contentLeftMargin: 0
    });
    this.addChild(panelSection);
    this.disposeVisualPreferencesPanel = () => {
      panelSection.dispose();
      contentNode.dispose();
    };
  }
  dispose() {
    this.disposeVisualPreferencesPanel();
    super.dispose();
  }
}
joist.register('VisualPreferencesPanel', VisualPreferencesPanel);
export default VisualPreferencesPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJUZXh0IiwiVkJveCIsIlZvaWNpbmdUZXh0Iiwiam9pc3QiLCJKb2lzdFN0cmluZ3MiLCJQcmVmZXJlbmNlc0RpYWxvZyIsIlByZWZlcmVuY2VzUGFuZWxTZWN0aW9uIiwiUHJlZmVyZW5jZXNDb250cm9sIiwib3B0aW9uaXplIiwiY29tYmluZU9wdGlvbnMiLCJQcm9qZWN0b3JNb2RlVG9nZ2xlU3dpdGNoIiwiVGFuZGVtIiwiUHJlZmVyZW5jZXNQYW5lbCIsIlByZWZlcmVuY2VzVHlwZSIsIlRvZ2dsZVN3aXRjaCIsIlByZWZlcmVuY2VzRGlhbG9nQ29uc3RhbnRzIiwiUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwiaW50ZXJhY3RpdmVIaWdobGlnaHRzU3RyaW5nUHJvcGVydHkiLCJwcmVmZXJlbmNlcyIsInRhYnMiLCJ2aXN1YWwiLCJpbnRlcmFjdGl2ZUhpZ2hsaWdodHNEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5IiwiaW50ZXJhY3RpdmVIaWdobGlnaHRzRW5hYmxlZEFsZXJ0U3RyaW5nUHJvcGVydHkiLCJhMTF5IiwiaW50ZXJhY3RpdmVIaWdobGlnaHRzIiwiZW5hYmxlZEFsZXJ0U3RyaW5nUHJvcGVydHkiLCJpbnRlcmFjdGl2ZUhpZ2hsaWdodHNEaXNhYmxlZEFsZXJ0U3RyaW5nUHJvcGVydHkiLCJkaXNhYmxlZEFsZXJ0U3RyaW5nUHJvcGVydHkiLCJsYWJlbGxlZERlc2NyaXB0aW9uUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwiVmlzdWFsUHJlZmVyZW5jZXNQYW5lbCIsImNvbnN0cnVjdG9yIiwidmlzdWFsTW9kZWwiLCJzZWxlY3RlZFRhYlByb3BlcnR5IiwidGFiVmlzaWJsZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImxhYmVsQ29udGVudCIsInRhbmRlbSIsIk9QVElPTkFMIiwiVklTVUFMIiwiY29udGVudE5vZGUiLCJzcGFjaW5nIiwiQ09OVEVOVF9TUEFDSU5HIiwiYWxpZ24iLCJzdXBwb3J0c1Byb2plY3Rvck1vZGUiLCJwcm9qZWN0b3JNb2RlU3dpdGNoIiwiY29sb3JQcm9maWxlUHJvcGVydHkiLCJhZGRDaGlsZCIsImRpc3Bvc2VFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJkaXNwb3NlIiwic3VwcG9ydHNJbnRlcmFjdGl2ZUhpZ2hsaWdodHMiLCJsYWJlbCIsIlBBTkVMX1NFQ1RJT05fTEFCRUxfT1BUSU9OUyIsImhpZ2hsaWdodHNSZWFkaW5nQmxvY2tOYW1lUmVzcG9uc2VQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJkZXNjcmlwdGlvbiIsImludGVyYWN0aXZlSGlnaGxpZ2h0c0VuYWJsZWRTd2l0Y2hWb2ljaW5nVGV4dCIsIlBBTkVMX1NFQ1RJT05fQ09OVEVOVF9PUFRJT05TIiwicmVhZGluZ0Jsb2NrTmFtZVJlc3BvbnNlIiwiaW50ZXJhY3RpdmVIaWdobGlnaHRzRW5hYmxlZFN3aXRjaCIsImludGVyYWN0aXZlSGlnaGxpZ2h0c0VuYWJsZWRQcm9wZXJ0eSIsImExMXlOYW1lIiwibGVmdFZhbHVlQ29udGV4dFJlc3BvbnNlIiwicmlnaHRWYWx1ZUNvbnRleHRSZXNwb25zZSIsIlRPR0dMRV9TV0lUQ0hfT1BUSU9OUyIsImludGVyYWN0aXZlSGlnaGxpZ2h0c0VuYWJsZWRDb250cm9sIiwibGFiZWxOb2RlIiwiZGVzY3JpcHRpb25Ob2RlIiwiY29udHJvbE5vZGUiLCJjdXN0b21QcmVmZXJlbmNlcyIsImZvckVhY2giLCJjdXN0b21QcmVmZXJlbmNlIiwiY3VzdG9tQ29udGVudCIsImNyZWF0ZUNvbnRlbnQiLCJub2RlIiwiY2hpbGRyZW4iLCJwYW5lbFNlY3Rpb24iLCJjb250ZW50TGVmdE1hcmdpbiIsImRpc3Bvc2VWaXN1YWxQcmVmZXJlbmNlc1BhbmVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJWaXN1YWxQcmVmZXJlbmNlc1BhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgcGFuZWwgZm9yIHRoZSBQcmVmZXJlbmNlc0RpYWxvZyB3aXRoIGNvbnRyb2xzIGZvciB2aXN1YWwgcHJlZmVyZW5jZXMuIEluY2x1ZGVzIGZlYXR1cmVzIHN1Y2ggYXNcclxuICogXCJJbnRlcmFjdGl2ZSBIaWdobGlnaHRzXCIgYW5kIHBlcmhhcHMgb3RoZXJzIGluIHRoZSBmdXR1cmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBUZXh0LCBWQm94LCBWb2ljaW5nVGV4dCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBqb2lzdCBmcm9tICcuLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBKb2lzdFN0cmluZ3MgZnJvbSAnLi4vSm9pc3RTdHJpbmdzLmpzJztcclxuaW1wb3J0IFByZWZlcmVuY2VzRGlhbG9nIGZyb20gJy4vUHJlZmVyZW5jZXNEaWFsb2cuanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNQYW5lbFNlY3Rpb24gZnJvbSAnLi9QcmVmZXJlbmNlc1BhbmVsU2VjdGlvbi5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc0NvbnRyb2wgZnJvbSAnLi9QcmVmZXJlbmNlc0NvbnRyb2wuanMnO1xyXG5pbXBvcnQgeyBWaXN1YWxNb2RlbCB9IGZyb20gJy4vUHJlZmVyZW5jZXNNb2RlbC5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFByb2plY3Rvck1vZGVUb2dnbGVTd2l0Y2ggZnJvbSAnLi9Qcm9qZWN0b3JNb2RlVG9nZ2xlU3dpdGNoLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFByZWZlcmVuY2VzUGFuZWwsIHsgUHJlZmVyZW5jZXNQYW5lbE9wdGlvbnMgfSBmcm9tICcuL1ByZWZlcmVuY2VzUGFuZWwuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc1R5cGUgZnJvbSAnLi9QcmVmZXJlbmNlc1R5cGUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgVG9nZ2xlU3dpdGNoLCB7IFRvZ2dsZVN3aXRjaE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdW4vanMvVG9nZ2xlU3dpdGNoLmpzJztcclxuaW1wb3J0IFByZWZlcmVuY2VzRGlhbG9nQ29uc3RhbnRzIGZyb20gJy4vUHJlZmVyZW5jZXNEaWFsb2dDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUGF0dGVyblN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUGF0dGVyblN0cmluZ1Byb3BlcnR5LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBpbnRlcmFjdGl2ZUhpZ2hsaWdodHNTdHJpbmdQcm9wZXJ0eSA9IEpvaXN0U3RyaW5ncy5wcmVmZXJlbmNlcy50YWJzLnZpc3VhbC5pbnRlcmFjdGl2ZUhpZ2hsaWdodHNTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgaW50ZXJhY3RpdmVIaWdobGlnaHRzRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSA9IEpvaXN0U3RyaW5ncy5wcmVmZXJlbmNlcy50YWJzLnZpc3VhbC5pbnRlcmFjdGl2ZUhpZ2hsaWdodHNEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBpbnRlcmFjdGl2ZUhpZ2hsaWdodHNFbmFibGVkQWxlcnRTdHJpbmdQcm9wZXJ0eSA9IEpvaXN0U3RyaW5ncy5hMTF5LnByZWZlcmVuY2VzLnRhYnMudmlzdWFsLmludGVyYWN0aXZlSGlnaGxpZ2h0cy5lbmFibGVkQWxlcnRTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgaW50ZXJhY3RpdmVIaWdobGlnaHRzRGlzYWJsZWRBbGVydFN0cmluZ1Byb3BlcnR5ID0gSm9pc3RTdHJpbmdzLmExMXkucHJlZmVyZW5jZXMudGFicy52aXN1YWwuaW50ZXJhY3RpdmVIaWdobGlnaHRzLmRpc2FibGVkQWxlcnRTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgbGFiZWxsZWREZXNjcmlwdGlvblBhdHRlcm5TdHJpbmdQcm9wZXJ0eSA9IEpvaXN0U3RyaW5ncy5hMTF5LnByZWZlcmVuY2VzLnRhYnMubGFiZWxsZWREZXNjcmlwdGlvblBhdHRlcm5TdHJpbmdQcm9wZXJ0eTtcclxuXHJcbnR5cGUgVmlzdWFsUHJlZmVyZW5jZXNQYW5lbE9wdGlvbnMgPSBQaWNrUmVxdWlyZWQ8UHJlZmVyZW5jZXNQYW5lbE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmNsYXNzIFZpc3VhbFByZWZlcmVuY2VzUGFuZWwgZXh0ZW5kcyBQcmVmZXJlbmNlc1BhbmVsIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VWaXN1YWxQcmVmZXJlbmNlc1BhbmVsOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHZpc3VhbE1vZGVsOiBWaXN1YWxNb2RlbCwgc2VsZWN0ZWRUYWJQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8UHJlZmVyZW5jZXNUeXBlPiwgdGFiVmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPiwgcHJvdmlkZWRPcHRpb25zPzogVmlzdWFsUHJlZmVyZW5jZXNQYW5lbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQcmVmZXJlbmNlc1BhbmVsT3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucywgUHJlZmVyZW5jZXNQYW5lbE9wdGlvbnM+KCkoIHtcclxuICAgICAgbGFiZWxDb250ZW50OiAnVmlzdWFsJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gR3JhYiB0aGUgcmVxdWlyZWQgdGFuZGVtIGZvciBzdWJjb21wb25lbnRzIGJ1dCB0aGUgdGFuZGVtIGlzIE5PVCBwYXNzZWQgdGhyb3VnaCB0byB0aGUgc3VwZXJcclxuICAgIGNvbnN0IHRhbmRlbSA9IG9wdGlvbnMudGFuZGVtO1xyXG4gICAgb3B0aW9ucy50YW5kZW0gPSBUYW5kZW0uT1BUSU9OQUw7XHJcblxyXG4gICAgc3VwZXIoIFByZWZlcmVuY2VzVHlwZS5WSVNVQUwsIHNlbGVjdGVkVGFiUHJvcGVydHksIHRhYlZpc2libGVQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gbmV3IFZCb3goIHtcclxuICAgICAgc3BhY2luZzogUHJlZmVyZW5jZXNEaWFsb2cuQ09OVEVOVF9TUEFDSU5HLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgaWYgKCB2aXN1YWxNb2RlbC5zdXBwb3J0c1Byb2plY3Rvck1vZGUgKSB7XHJcbiAgICAgIGNvbnN0IHByb2plY3Rvck1vZGVTd2l0Y2ggPSBuZXcgUHJvamVjdG9yTW9kZVRvZ2dsZVN3aXRjaCggdmlzdWFsTW9kZWwuY29sb3JQcm9maWxlUHJvcGVydHkgKTtcclxuICAgICAgY29udGVudE5vZGUuYWRkQ2hpbGQoIHByb2plY3Rvck1vZGVTd2l0Y2ggKTtcclxuICAgICAgdGhpcy5kaXNwb3NlRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4gcHJvamVjdG9yTW9kZVN3aXRjaC5kaXNwb3NlKCkgKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKCB2aXN1YWxNb2RlbC5zdXBwb3J0c0ludGVyYWN0aXZlSGlnaGxpZ2h0cyApIHtcclxuXHJcbiAgICAgIGNvbnN0IGxhYmVsID0gbmV3IFRleHQoIGludGVyYWN0aXZlSGlnaGxpZ2h0c1N0cmluZ1Byb3BlcnR5LCBQcmVmZXJlbmNlc0RpYWxvZy5QQU5FTF9TRUNUSU9OX0xBQkVMX09QVElPTlMgKTtcclxuXHJcbiAgICAgIGNvbnN0IGhpZ2hsaWdodHNSZWFkaW5nQmxvY2tOYW1lUmVzcG9uc2VQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBuZXcgUGF0dGVyblN0cmluZ1Byb3BlcnR5KCBsYWJlbGxlZERlc2NyaXB0aW9uUGF0dGVyblN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgbGFiZWw6IGludGVyYWN0aXZlSGlnaGxpZ2h0c1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBpbnRlcmFjdGl2ZUhpZ2hsaWdodHNEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5XHJcbiAgICAgIH0gKTtcclxuICAgICAgY29uc3QgaW50ZXJhY3RpdmVIaWdobGlnaHRzRW5hYmxlZFN3aXRjaFZvaWNpbmdUZXh0ID0gbmV3IFZvaWNpbmdUZXh0KCBpbnRlcmFjdGl2ZUhpZ2hsaWdodHNEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5LCBtZXJnZSgge30sIFByZWZlcmVuY2VzRGlhbG9nLlBBTkVMX1NFQ1RJT05fQ09OVEVOVF9PUFRJT05TLCB7XHJcbiAgICAgICAgcmVhZGluZ0Jsb2NrTmFtZVJlc3BvbnNlOiBoaWdobGlnaHRzUmVhZGluZ0Jsb2NrTmFtZVJlc3BvbnNlUGF0dGVyblN0cmluZ1Byb3BlcnR5XHJcbiAgICAgIH0gKSApO1xyXG4gICAgICBjb25zdCBpbnRlcmFjdGl2ZUhpZ2hsaWdodHNFbmFibGVkU3dpdGNoID0gbmV3IFRvZ2dsZVN3aXRjaCggdmlzdWFsTW9kZWwuaW50ZXJhY3RpdmVIaWdobGlnaHRzRW5hYmxlZFByb3BlcnR5LCBmYWxzZSwgdHJ1ZSwgY29tYmluZU9wdGlvbnM8VG9nZ2xlU3dpdGNoT3B0aW9ucz4oIHtcclxuICAgICAgICBhMTF5TmFtZTogaW50ZXJhY3RpdmVIaWdobGlnaHRzU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgbGVmdFZhbHVlQ29udGV4dFJlc3BvbnNlOiBpbnRlcmFjdGl2ZUhpZ2hsaWdodHNEaXNhYmxlZEFsZXJ0U3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgcmlnaHRWYWx1ZUNvbnRleHRSZXNwb25zZTogaW50ZXJhY3RpdmVIaWdobGlnaHRzRW5hYmxlZEFsZXJ0U3RyaW5nUHJvcGVydHlcclxuICAgICAgfSwgUHJlZmVyZW5jZXNEaWFsb2dDb25zdGFudHMuVE9HR0xFX1NXSVRDSF9PUFRJT05TICkgKTtcclxuXHJcbiAgICAgIGNvbnN0IGludGVyYWN0aXZlSGlnaGxpZ2h0c0VuYWJsZWRDb250cm9sID0gbmV3IFByZWZlcmVuY2VzQ29udHJvbCgge1xyXG4gICAgICAgIGxhYmVsTm9kZTogbGFiZWwsXHJcbiAgICAgICAgZGVzY3JpcHRpb25Ob2RlOiBpbnRlcmFjdGl2ZUhpZ2hsaWdodHNFbmFibGVkU3dpdGNoVm9pY2luZ1RleHQsXHJcbiAgICAgICAgY29udHJvbE5vZGU6IGludGVyYWN0aXZlSGlnaGxpZ2h0c0VuYWJsZWRTd2l0Y2hcclxuICAgICAgfSApO1xyXG5cclxuICAgICAgY29udGVudE5vZGUuYWRkQ2hpbGQoIGludGVyYWN0aXZlSGlnaGxpZ2h0c0VuYWJsZWRDb250cm9sICk7XHJcblxyXG4gICAgICB0aGlzLmRpc3Bvc2VFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiB7XHJcbiAgICAgICAgaW50ZXJhY3RpdmVIaWdobGlnaHRzRW5hYmxlZENvbnRyb2wuZGlzcG9zZSgpO1xyXG4gICAgICAgIGludGVyYWN0aXZlSGlnaGxpZ2h0c0VuYWJsZWRTd2l0Y2guZGlzcG9zZSgpO1xyXG4gICAgICAgIGludGVyYWN0aXZlSGlnaGxpZ2h0c0VuYWJsZWRTd2l0Y2hWb2ljaW5nVGV4dC5kaXNwb3NlKCk7XHJcbiAgICAgICAgaGlnaGxpZ2h0c1JlYWRpbmdCbG9ja05hbWVSZXNwb25zZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICAgICAgbGFiZWwuZGlzcG9zZSgpO1xyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgdmlzdWFsTW9kZWwuY3VzdG9tUHJlZmVyZW5jZXMuZm9yRWFjaCggY3VzdG9tUHJlZmVyZW5jZSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1c3RvbUNvbnRlbnQgPSBjdXN0b21QcmVmZXJlbmNlLmNyZWF0ZUNvbnRlbnQoIHRhbmRlbSApO1xyXG4gICAgICBjb25zdCBub2RlID0gbmV3IE5vZGUoIHsgY2hpbGRyZW46IFsgY3VzdG9tQ29udGVudCBdIH0gKTtcclxuICAgICAgY29udGVudE5vZGUuYWRkQ2hpbGQoIG5vZGUgKTtcclxuICAgICAgdGhpcy5kaXNwb3NlRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICAgIGN1c3RvbUNvbnRlbnQuZGlzcG9zZSgpO1xyXG4gICAgICAgIG5vZGUuZGlzcG9zZSgpO1xyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgcGFuZWxTZWN0aW9uID0gbmV3IFByZWZlcmVuY2VzUGFuZWxTZWN0aW9uKCB7XHJcbiAgICAgIGNvbnRlbnROb2RlOiBjb250ZW50Tm9kZSxcclxuXHJcbiAgICAgIC8vIG5vIHRpdGxlIGZvciB0aGlzIHNlY3Rpb24gc28gbm8gaW5kZW5kYXRpb24gbmVjZXNzYXJ5XHJcbiAgICAgIGNvbnRlbnRMZWZ0TWFyZ2luOiAwXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwYW5lbFNlY3Rpb24gKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VWaXN1YWxQcmVmZXJlbmNlc1BhbmVsID0gKCkgPT4ge1xyXG4gICAgICBwYW5lbFNlY3Rpb24uZGlzcG9zZSgpO1xyXG4gICAgICBjb250ZW50Tm9kZS5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VWaXN1YWxQcmVmZXJlbmNlc1BhbmVsKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5qb2lzdC5yZWdpc3RlciggJ1Zpc3VhbFByZWZlcmVuY2VzUGFuZWwnLCBWaXN1YWxQcmVmZXJlbmNlc1BhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IFZpc3VhbFByZWZlcmVuY2VzUGFuZWw7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsV0FBVyxRQUFRLGdDQUFnQztBQUM5RSxPQUFPQyxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxZQUFZLE1BQU0sb0JBQW9CO0FBQzdDLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyx1QkFBdUIsTUFBTSw4QkFBOEI7QUFDbEUsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBRXhELE9BQU9DLFNBQVMsSUFBSUMsY0FBYyxRQUEwQixvQ0FBb0M7QUFDaEcsT0FBT0MseUJBQXlCLE1BQU0sZ0NBQWdDO0FBQ3RFLE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsZ0JBQWdCLE1BQW1DLHVCQUF1QjtBQUVqRixPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBRWxELE9BQU9DLFlBQVksTUFBK0IsaUNBQWlDO0FBQ25GLE9BQU9DLDBCQUEwQixNQUFNLGlDQUFpQztBQUN4RSxPQUFPQyxxQkFBcUIsTUFBTSwyQ0FBMkM7O0FBRTdFO0FBQ0EsTUFBTUMsbUNBQW1DLEdBQUdiLFlBQVksQ0FBQ2MsV0FBVyxDQUFDQyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0gsbUNBQW1DO0FBQ3BILE1BQU1JLDhDQUE4QyxHQUFHakIsWUFBWSxDQUFDYyxXQUFXLENBQUNDLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyw4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