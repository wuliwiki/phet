// Copyright 2022-2023, University of Colorado Boulder

/**
 * Class for items of a LocalePanel. Locales shown in their localized name wrapped in a Rectangle for highlighting
 * and input listeners.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import joist from '../joist.js';
import { Color, FireListener, HighlightOverlay, Rectangle, Text } from '../../../scenery/js/imports.js';
import Tandem from '../../../tandem/js/Tandem.js';
import PreferencesDialog from './PreferencesDialog.js';
import PhetColorScheme from '../../../scenery-phet/js/PhetColorScheme.js';
import StringUtils from '../../../phetcommon/js/util/StringUtils.js';
export default class LanguageSelectionNode extends Rectangle {
  // locale associated with this Node

  constructor(localeProperty, locale) {
    // Wrap it with embedding marks to ensure it displays correctly, see https://github.com/phetsims/chipper/issues/1379
    const wrappedLocaleString = StringUtils.localeToLocalizedName(locale);

    // Include the locale code when running with ?dev.
    const string = phet.chipper.queryParameters.dev ? StringUtils.wrapLTR(`${wrappedLocaleString} (${locale})`) : wrappedLocaleString;
    const text = new Text(string, {
      font: PreferencesDialog.CONTENT_FONT
    });
    super(text.bounds.dilated(5), {
      cursor: 'pointer',
      // So that the item is tab-navigable and can be activated with the FireListener
      tagName: 'button'
    });
    text.center = this.center;
    this.addChild(text);
    this.locale = locale;
    const fireListener = new FireListener({
      fire: () => {
        localeProperty.value = locale;
      },
      // Preferences components are not instrumented, see https://github.com/phetsims/joist/issues/744
      tandem: Tandem.OPT_OUT
    });
    this.addInputListener(fireListener);

    // Will be unlinked with FireListener disposal
    fireListener.isOverProperty.link(isOver => {
      // makes the mouse interactive, keep the same dimensions so the layout will not change
      this.stroke = isOver ? HighlightOverlay.getInnerGroupHighlightColor() : Color.TRANSPARENT;
    });
    const localeListener = selectedLocale => {
      // identifies the selected locale
      this.fill = selectedLocale === locale ? PhetColorScheme.PHET_LOGO_BLUE : null;
    };
    localeProperty.link(localeListener);
    this.disposeLanguageSelectionNode = () => {
      text.dispose();
      localeProperty.unlink(localeListener);
      this.removeInputListener(fireListener);
      fireListener.dispose();
    };
  }
  dispose() {
    this.disposeLanguageSelectionNode();
    super.dispose();
  }
}
joist.register('LanguageSelectionNode', LanguageSelectionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsIkNvbG9yIiwiRmlyZUxpc3RlbmVyIiwiSGlnaGxpZ2h0T3ZlcmxheSIsIlJlY3RhbmdsZSIsIlRleHQiLCJUYW5kZW0iLCJQcmVmZXJlbmNlc0RpYWxvZyIsIlBoZXRDb2xvclNjaGVtZSIsIlN0cmluZ1V0aWxzIiwiTGFuZ3VhZ2VTZWxlY3Rpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJsb2NhbGVQcm9wZXJ0eSIsImxvY2FsZSIsIndyYXBwZWRMb2NhbGVTdHJpbmciLCJsb2NhbGVUb0xvY2FsaXplZE5hbWUiLCJzdHJpbmciLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImRldiIsIndyYXBMVFIiLCJ0ZXh0IiwiZm9udCIsIkNPTlRFTlRfRk9OVCIsImJvdW5kcyIsImRpbGF0ZWQiLCJjdXJzb3IiLCJ0YWdOYW1lIiwiY2VudGVyIiwiYWRkQ2hpbGQiLCJmaXJlTGlzdGVuZXIiLCJmaXJlIiwidmFsdWUiLCJ0YW5kZW0iLCJPUFRfT1VUIiwiYWRkSW5wdXRMaXN0ZW5lciIsImlzT3ZlclByb3BlcnR5IiwibGluayIsImlzT3ZlciIsInN0cm9rZSIsImdldElubmVyR3JvdXBIaWdobGlnaHRDb2xvciIsIlRSQU5TUEFSRU5UIiwibG9jYWxlTGlzdGVuZXIiLCJzZWxlY3RlZExvY2FsZSIsImZpbGwiLCJQSEVUX0xPR09fQkxVRSIsImRpc3Bvc2VMYW5ndWFnZVNlbGVjdGlvbk5vZGUiLCJkaXNwb3NlIiwidW5saW5rIiwicmVtb3ZlSW5wdXRMaXN0ZW5lciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGFuZ3VhZ2VTZWxlY3Rpb25Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENsYXNzIGZvciBpdGVtcyBvZiBhIExvY2FsZVBhbmVsLiBMb2NhbGVzIHNob3duIGluIHRoZWlyIGxvY2FsaXplZCBuYW1lIHdyYXBwZWQgaW4gYSBSZWN0YW5nbGUgZm9yIGhpZ2hsaWdodGluZ1xyXG4gKiBhbmQgaW5wdXQgbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi4vam9pc3QuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgRmlyZUxpc3RlbmVyLCBIaWdobGlnaHRPdmVybGF5LCBSZWN0YW5nbGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNEaWFsb2cgZnJvbSAnLi9QcmVmZXJlbmNlc0RpYWxvZy5qcyc7XHJcbmltcG9ydCBQaGV0Q29sb3JTY2hlbWUgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRDb2xvclNjaGVtZS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgTG9jYWxlIH0gZnJvbSAnLi4vaTE4bi9sb2NhbGVQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGFuZ3VhZ2VTZWxlY3Rpb25Ob2RlIGV4dGVuZHMgUmVjdGFuZ2xlIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGxvY2FsZTogTG9jYWxlOyAvLyBsb2NhbGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgTm9kZVxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUxhbmd1YWdlU2VsZWN0aW9uTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsb2NhbGVQcm9wZXJ0eTogUHJvcGVydHk8TG9jYWxlPiwgbG9jYWxlOiBMb2NhbGUgKSB7XHJcblxyXG4gICAgLy8gV3JhcCBpdCB3aXRoIGVtYmVkZGluZyBtYXJrcyB0byBlbnN1cmUgaXQgZGlzcGxheXMgY29ycmVjdGx5LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NoaXBwZXIvaXNzdWVzLzEzNzlcclxuICAgIGNvbnN0IHdyYXBwZWRMb2NhbGVTdHJpbmcgPSBTdHJpbmdVdGlscy5sb2NhbGVUb0xvY2FsaXplZE5hbWUoIGxvY2FsZSApO1xyXG5cclxuICAgIC8vIEluY2x1ZGUgdGhlIGxvY2FsZSBjb2RlIHdoZW4gcnVubmluZyB3aXRoID9kZXYuXHJcbiAgICBjb25zdCBzdHJpbmcgPSBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLmRldiA/XHJcbiAgICAgICAgICAgICAgICAgICBTdHJpbmdVdGlscy53cmFwTFRSKCBgJHt3cmFwcGVkTG9jYWxlU3RyaW5nfSAoJHtsb2NhbGV9KWAgKSA6XHJcbiAgICAgICAgICAgICAgICAgICB3cmFwcGVkTG9jYWxlU3RyaW5nO1xyXG5cclxuICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dCggc3RyaW5nLCB7XHJcbiAgICAgIGZvbnQ6IFByZWZlcmVuY2VzRGlhbG9nLkNPTlRFTlRfRk9OVFxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCB0ZXh0LmJvdW5kcy5kaWxhdGVkKCA1ICksIHtcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcblxyXG4gICAgICAvLyBTbyB0aGF0IHRoZSBpdGVtIGlzIHRhYi1uYXZpZ2FibGUgYW5kIGNhbiBiZSBhY3RpdmF0ZWQgd2l0aCB0aGUgRmlyZUxpc3RlbmVyXHJcbiAgICAgIHRhZ05hbWU6ICdidXR0b24nXHJcbiAgICB9ICk7XHJcbiAgICB0ZXh0LmNlbnRlciA9IHRoaXMuY2VudGVyO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGV4dCApO1xyXG5cclxuICAgIHRoaXMubG9jYWxlID0gbG9jYWxlO1xyXG5cclxuICAgIGNvbnN0IGZpcmVMaXN0ZW5lciA9IG5ldyBGaXJlTGlzdGVuZXIoIHtcclxuICAgICAgZmlyZTogKCkgPT4ge1xyXG4gICAgICAgIGxvY2FsZVByb3BlcnR5LnZhbHVlID0gbG9jYWxlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gUHJlZmVyZW5jZXMgY29tcG9uZW50cyBhcmUgbm90IGluc3RydW1lbnRlZCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvNzQ0XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggZmlyZUxpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gV2lsbCBiZSB1bmxpbmtlZCB3aXRoIEZpcmVMaXN0ZW5lciBkaXNwb3NhbFxyXG4gICAgZmlyZUxpc3RlbmVyLmlzT3ZlclByb3BlcnR5LmxpbmsoIGlzT3ZlciA9PiB7XHJcblxyXG4gICAgICAvLyBtYWtlcyB0aGUgbW91c2UgaW50ZXJhY3RpdmUsIGtlZXAgdGhlIHNhbWUgZGltZW5zaW9ucyBzbyB0aGUgbGF5b3V0IHdpbGwgbm90IGNoYW5nZVxyXG4gICAgICB0aGlzLnN0cm9rZSA9IGlzT3ZlciA/IEhpZ2hsaWdodE92ZXJsYXkuZ2V0SW5uZXJHcm91cEhpZ2hsaWdodENvbG9yKCkgOiBDb2xvci5UUkFOU1BBUkVOVDtcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsb2NhbGVMaXN0ZW5lciA9ICggc2VsZWN0ZWRMb2NhbGU6IHN0cmluZyApID0+IHtcclxuXHJcbiAgICAgIC8vIGlkZW50aWZpZXMgdGhlIHNlbGVjdGVkIGxvY2FsZVxyXG4gICAgICB0aGlzLmZpbGwgPSBzZWxlY3RlZExvY2FsZSA9PT0gbG9jYWxlID8gUGhldENvbG9yU2NoZW1lLlBIRVRfTE9HT19CTFVFIDogbnVsbDtcclxuICAgIH07XHJcbiAgICBsb2NhbGVQcm9wZXJ0eS5saW5rKCBsb2NhbGVMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZUxhbmd1YWdlU2VsZWN0aW9uTm9kZSA9ICgpID0+IHtcclxuICAgICAgdGV4dC5kaXNwb3NlKCk7XHJcbiAgICAgIGxvY2FsZVByb3BlcnR5LnVubGluayggbG9jYWxlTGlzdGVuZXIgKTtcclxuICAgICAgdGhpcy5yZW1vdmVJbnB1dExpc3RlbmVyKCBmaXJlTGlzdGVuZXIgKTtcclxuICAgICAgZmlyZUxpc3RlbmVyLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUxhbmd1YWdlU2VsZWN0aW9uTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdMYW5ndWFnZVNlbGVjdGlvbk5vZGUnLCBMYW5ndWFnZVNlbGVjdGlvbk5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sYUFBYTtBQUMvQixTQUFTQyxLQUFLLEVBQUVDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxRQUFRLGdDQUFnQztBQUN2RyxPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBQ2pELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxlQUFlLE1BQU0sNkNBQTZDO0FBR3pFLE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFFcEUsZUFBZSxNQUFNQyxxQkFBcUIsU0FBU04sU0FBUyxDQUFDO0VBRTNCOztFQUd6Qk8sV0FBV0EsQ0FBRUMsY0FBZ0MsRUFBRUMsTUFBYyxFQUFHO0lBRXJFO0lBQ0EsTUFBTUMsbUJBQW1CLEdBQUdMLFdBQVcsQ0FBQ00scUJBQXFCLENBQUVGLE1BQU8sQ0FBQzs7SUFFdkU7SUFDQSxNQUFNRyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLEdBQUcsR0FDaENYLFdBQVcsQ0FBQ1ksT0FBTyxDQUFHLEdBQUVQLG1CQUFvQixLQUFJRCxNQUFPLEdBQUcsQ0FBQyxHQUMzREMsbUJBQW1CO0lBRWxDLE1BQU1RLElBQUksR0FBRyxJQUFJakIsSUFBSSxDQUFFVyxNQUFNLEVBQUU7TUFDN0JPLElBQUksRUFBRWhCLGlCQUFpQixDQUFDaUI7SUFDMUIsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFRixJQUFJLENBQUNHLE1BQU0sQ0FBQ0MsT0FBTyxDQUFFLENBQUUsQ0FBQyxFQUFFO01BQy9CQyxNQUFNLEVBQUUsU0FBUztNQUVqQjtNQUNBQyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUM7SUFDSE4sSUFBSSxDQUFDTyxNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNO0lBQ3pCLElBQUksQ0FBQ0MsUUFBUSxDQUFFUixJQUFLLENBQUM7SUFFckIsSUFBSSxDQUFDVCxNQUFNLEdBQUdBLE1BQU07SUFFcEIsTUFBTWtCLFlBQVksR0FBRyxJQUFJN0IsWUFBWSxDQUFFO01BQ3JDOEIsSUFBSSxFQUFFQSxDQUFBLEtBQU07UUFDVnBCLGNBQWMsQ0FBQ3FCLEtBQUssR0FBR3BCLE1BQU07TUFDL0IsQ0FBQztNQUVEO01BQ0FxQixNQUFNLEVBQUU1QixNQUFNLENBQUM2QjtJQUNqQixDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNDLGdCQUFnQixDQUFFTCxZQUFhLENBQUM7O0lBRXJDO0lBQ0FBLFlBQVksQ0FBQ00sY0FBYyxDQUFDQyxJQUFJLENBQUVDLE1BQU0sSUFBSTtNQUUxQztNQUNBLElBQUksQ0FBQ0MsTUFBTSxHQUFHRCxNQUFNLEdBQUdwQyxnQkFBZ0IsQ0FBQ3NDLDJCQUEyQixDQUFDLENBQUMsR0FBR3hDLEtBQUssQ0FBQ3lDLFdBQVc7SUFDM0YsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsY0FBYyxHQUFLQyxjQUFzQixJQUFNO01BRW5EO01BQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUdELGNBQWMsS0FBSy9CLE1BQU0sR0FBR0wsZUFBZSxDQUFDc0MsY0FBYyxHQUFHLElBQUk7SUFDL0UsQ0FBQztJQUNEbEMsY0FBYyxDQUFDMEIsSUFBSSxDQUFFSyxjQUFlLENBQUM7SUFFckMsSUFBSSxDQUFDSSw0QkFBNEIsR0FBRyxNQUFNO01BQ3hDekIsSUFBSSxDQUFDMEIsT0FBTyxDQUFDLENBQUM7TUFDZHBDLGNBQWMsQ0FBQ3FDLE1BQU0sQ0FBRU4sY0FBZSxDQUFDO01BQ3ZDLElBQUksQ0FBQ08sbUJBQW1CLENBQUVuQixZQUFhLENBQUM7TUFDeENBLFlBQVksQ0FBQ2lCLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0QsNEJBQTRCLENBQUMsQ0FBQztJQUNuQyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWhELEtBQUssQ0FBQ21ELFFBQVEsQ0FBRSx1QkFBdUIsRUFBRXpDLHFCQUFzQixDQUFDIn0=