// Copyright 2021-2023, University of Colorado Boulder

/**
 * The content for the "Simulation" tab in the PreferencesDialog. Contains controls for any simulation-specific
 * preferences.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import { VBox } from '../../../scenery/js/imports.js';
import joist from '../joist.js';
import PreferencesDialog from './PreferencesDialog.js';
import optionize from '../../../phet-core/js/optionize.js';
import PreferencesPanelSection from './PreferencesPanelSection.js';
import PreferencesType from './PreferencesType.js';
import PreferencesPanel from './PreferencesPanel.js';
class SimulationPreferencesPanel extends PreferencesPanel {
  /**
   * @param simulationModel - configuration for the Tab, see PreferencesModel for entries
   * @param selectedTabProperty
   * @param tabVisibleProperty
   * @param [providedOptions]
   */
  constructor(simulationModel, selectedTabProperty, tabVisibleProperty, providedOptions) {
    const options = optionize()({
      labelContent: 'Simulation',
      // phet-io
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);
    super(PreferencesType.SIMULATION, selectedTabProperty, tabVisibleProperty, options);
    const panelContent = new VBox({
      align: 'left',
      spacing: PreferencesDialog.CONTENT_SPACING
    });
    this.addChild(panelContent);

    // Just the provided panel content with its own spacing
    const providedChildren = [];
    simulationModel.customPreferences.forEach(customPreference => {
      const contentNode = customPreference.createContent(options.tandem);
      const preferencesPanelSection = new PreferencesPanelSection({
        contentNode: contentNode
      });
      this.disposeEmitter.addListener(() => {
        preferencesPanelSection.dispose();
        contentNode.dispose();
      });
      providedChildren.push(preferencesPanelSection);
    });
    panelContent.children = providedChildren;
    this.disposeSimulationPreferencesPanel = () => {
      panelContent.dispose();
    };
  }
  dispose() {
    this.disposeSimulationPreferencesPanel();
    super.dispose();
  }
}
joist.register('SimulationPreferencesPanel', SimulationPreferencesPanel);
export default SimulationPreferencesPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWQm94Iiwiam9pc3QiLCJQcmVmZXJlbmNlc0RpYWxvZyIsIm9wdGlvbml6ZSIsIlByZWZlcmVuY2VzUGFuZWxTZWN0aW9uIiwiUHJlZmVyZW5jZXNUeXBlIiwiUHJlZmVyZW5jZXNQYW5lbCIsIlNpbXVsYXRpb25QcmVmZXJlbmNlc1BhbmVsIiwiY29uc3RydWN0b3IiLCJzaW11bGF0aW9uTW9kZWwiLCJzZWxlY3RlZFRhYlByb3BlcnR5IiwidGFiVmlzaWJsZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImxhYmVsQ29udGVudCIsInBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZCIsIlNJTVVMQVRJT04iLCJwYW5lbENvbnRlbnQiLCJhbGlnbiIsInNwYWNpbmciLCJDT05URU5UX1NQQUNJTkciLCJhZGRDaGlsZCIsInByb3ZpZGVkQ2hpbGRyZW4iLCJjdXN0b21QcmVmZXJlbmNlcyIsImZvckVhY2giLCJjdXN0b21QcmVmZXJlbmNlIiwiY29udGVudE5vZGUiLCJjcmVhdGVDb250ZW50IiwidGFuZGVtIiwicHJlZmVyZW5jZXNQYW5lbFNlY3Rpb24iLCJkaXNwb3NlRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZGlzcG9zZSIsInB1c2giLCJjaGlsZHJlbiIsImRpc3Bvc2VTaW11bGF0aW9uUHJlZmVyZW5jZXNQYW5lbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2ltdWxhdGlvblByZWZlcmVuY2VzUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIGNvbnRlbnQgZm9yIHRoZSBcIlNpbXVsYXRpb25cIiB0YWIgaW4gdGhlIFByZWZlcmVuY2VzRGlhbG9nLiBDb250YWlucyBjb250cm9scyBmb3IgYW55IHNpbXVsYXRpb24tc3BlY2lmaWNcclxuICogcHJlZmVyZW5jZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vZGUsIFZCb3gsIFZCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IFByZWZlcmVuY2VzRGlhbG9nIGZyb20gJy4vUHJlZmVyZW5jZXNEaWFsb2cuanMnO1xyXG5pbXBvcnQgeyBTaW11bGF0aW9uTW9kZWwgfSBmcm9tICcuL1ByZWZlcmVuY2VzTW9kZWwuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFByZWZlcmVuY2VzUGFuZWxTZWN0aW9uIGZyb20gJy4vUHJlZmVyZW5jZXNQYW5lbFNlY3Rpb24uanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNUeXBlIGZyb20gJy4vUHJlZmVyZW5jZXNUeXBlLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNQYW5lbCwgeyBQcmVmZXJlbmNlc1BhbmVsT3B0aW9ucyB9IGZyb20gJy4vUHJlZmVyZW5jZXNQYW5lbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxudHlwZSBTaW11bGF0aW9uUHJlZmVyZW5jZXNQYW5lbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmXHJcbiAgUHJlZmVyZW5jZXNQYW5lbE9wdGlvbnMgJlxyXG5cclxuICAvLyBTdGlsbCByZXF1aXJlZCwgZXZlbiB0aG91Z2ggaXQgaXMgcHJlZmVyZW5jZXMgYmVjYXVzZSB0aGUgU2ltdWxhdGlvbiB0YWIgaG91c2VzIHNpbS1zcGVjaWZpYyBlbGVtZW50cyB0aGF0XHJcbiAgLy8gc2hvdWxkIHN1cHBvcnQgY3VzdG9taXphdGlvbi4gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaXN0L2lzc3Vlcy83NDQjaXNzdWVjb21tZW50LTExOTYwMjgzNjJcclxuICBQaWNrUmVxdWlyZWQ8UHJlZmVyZW5jZXNQYW5lbE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmNsYXNzIFNpbXVsYXRpb25QcmVmZXJlbmNlc1BhbmVsIGV4dGVuZHMgUHJlZmVyZW5jZXNQYW5lbCB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlU2ltdWxhdGlvblByZWZlcmVuY2VzUGFuZWw6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzaW11bGF0aW9uTW9kZWwgLSBjb25maWd1cmF0aW9uIGZvciB0aGUgVGFiLCBzZWUgUHJlZmVyZW5jZXNNb2RlbCBmb3IgZW50cmllc1xyXG4gICAqIEBwYXJhbSBzZWxlY3RlZFRhYlByb3BlcnR5XHJcbiAgICogQHBhcmFtIHRhYlZpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc2ltdWxhdGlvbk1vZGVsOiBTaW11bGF0aW9uTW9kZWwsIHNlbGVjdGVkVGFiUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFByZWZlcmVuY2VzVHlwZT4sIHRhYlZpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sIHByb3ZpZGVkT3B0aW9ucz86IFNpbXVsYXRpb25QcmVmZXJlbmNlc1BhbmVsT3B0aW9ucyApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U2ltdWxhdGlvblByZWZlcmVuY2VzUGFuZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgVkJveE9wdGlvbnM+KCkoIHtcclxuICAgICAgbGFiZWxDb250ZW50OiAnU2ltdWxhdGlvbicsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZDogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBQcmVmZXJlbmNlc1R5cGUuU0lNVUxBVElPTiwgc2VsZWN0ZWRUYWJQcm9wZXJ0eSwgdGFiVmlzaWJsZVByb3BlcnR5LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgcGFuZWxDb250ZW50ID0gbmV3IFZCb3goIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogUHJlZmVyZW5jZXNEaWFsb2cuQ09OVEVOVF9TUEFDSU5HXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwYW5lbENvbnRlbnQgKTtcclxuXHJcbiAgICAvLyBKdXN0IHRoZSBwcm92aWRlZCBwYW5lbCBjb250ZW50IHdpdGggaXRzIG93biBzcGFjaW5nXHJcbiAgICBjb25zdCBwcm92aWRlZENoaWxkcmVuOiBOb2RlW10gPSBbXTtcclxuXHJcbiAgICBzaW11bGF0aW9uTW9kZWwuY3VzdG9tUHJlZmVyZW5jZXMuZm9yRWFjaCggY3VzdG9tUHJlZmVyZW5jZSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbnRlbnROb2RlID0gY3VzdG9tUHJlZmVyZW5jZS5jcmVhdGVDb250ZW50KCBvcHRpb25zLnRhbmRlbSApO1xyXG4gICAgICBjb25zdCBwcmVmZXJlbmNlc1BhbmVsU2VjdGlvbiA9IG5ldyBQcmVmZXJlbmNlc1BhbmVsU2VjdGlvbiggeyBjb250ZW50Tm9kZTogY29udGVudE5vZGUgfSApO1xyXG4gICAgICB0aGlzLmRpc3Bvc2VFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiB7XHJcbiAgICAgICAgcHJlZmVyZW5jZXNQYW5lbFNlY3Rpb24uZGlzcG9zZSgpO1xyXG4gICAgICAgIGNvbnRlbnROb2RlLmRpc3Bvc2UoKTtcclxuICAgICAgfSApO1xyXG4gICAgICBwcm92aWRlZENoaWxkcmVuLnB1c2goIHByZWZlcmVuY2VzUGFuZWxTZWN0aW9uICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgcGFuZWxDb250ZW50LmNoaWxkcmVuID0gcHJvdmlkZWRDaGlsZHJlbjtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VTaW11bGF0aW9uUHJlZmVyZW5jZXNQYW5lbCA9ICgpID0+IHtcclxuICAgICAgcGFuZWxDb250ZW50LmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVNpbXVsYXRpb25QcmVmZXJlbmNlc1BhbmVsKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5qb2lzdC5yZWdpc3RlciggJ1NpbXVsYXRpb25QcmVmZXJlbmNlc1BhbmVsJywgU2ltdWxhdGlvblByZWZlcmVuY2VzUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdGlvblByZWZlcmVuY2VzUGFuZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBZUEsSUFBSSxRQUFxQixnQ0FBZ0M7QUFDeEUsT0FBT0MsS0FBSyxNQUFNLGFBQWE7QUFDL0IsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBRXRELE9BQU9DLFNBQVMsTUFBNEIsb0NBQW9DO0FBRWhGLE9BQU9DLHVCQUF1QixNQUFNLDhCQUE4QjtBQUNsRSxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBRWxELE9BQU9DLGdCQUFnQixNQUFtQyx1QkFBdUI7QUFVakYsTUFBTUMsMEJBQTBCLFNBQVNELGdCQUFnQixDQUFDO0VBR3hEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTRSxXQUFXQSxDQUFFQyxlQUFnQyxFQUFFQyxtQkFBdUQsRUFBRUMsa0JBQThDLEVBQUVDLGVBQW1ELEVBQUc7SUFDbk4sTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQThELENBQUMsQ0FBRTtNQUN4RlcsWUFBWSxFQUFFLFlBQVk7TUFFMUI7TUFDQUMsaUNBQWlDLEVBQUU7SUFDckMsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRVAsZUFBZSxDQUFDVyxVQUFVLEVBQUVOLG1CQUFtQixFQUFFQyxrQkFBa0IsRUFBRUUsT0FBUSxDQUFDO0lBRXJGLE1BQU1JLFlBQVksR0FBRyxJQUFJakIsSUFBSSxDQUFFO01BQzdCa0IsS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFakIsaUJBQWlCLENBQUNrQjtJQUM3QixDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNDLFFBQVEsQ0FBRUosWUFBYSxDQUFDOztJQUU3QjtJQUNBLE1BQU1LLGdCQUF3QixHQUFHLEVBQUU7SUFFbkNiLGVBQWUsQ0FBQ2MsaUJBQWlCLENBQUNDLE9BQU8sQ0FBRUMsZ0JBQWdCLElBQUk7TUFDN0QsTUFBTUMsV0FBVyxHQUFHRCxnQkFBZ0IsQ0FBQ0UsYUFBYSxDQUFFZCxPQUFPLENBQUNlLE1BQU8sQ0FBQztNQUNwRSxNQUFNQyx1QkFBdUIsR0FBRyxJQUFJekIsdUJBQXVCLENBQUU7UUFBRXNCLFdBQVcsRUFBRUE7TUFBWSxDQUFFLENBQUM7TUFDM0YsSUFBSSxDQUFDSSxjQUFjLENBQUNDLFdBQVcsQ0FBRSxNQUFNO1FBQ3JDRix1QkFBdUIsQ0FBQ0csT0FBTyxDQUFDLENBQUM7UUFDakNOLFdBQVcsQ0FBQ00sT0FBTyxDQUFDLENBQUM7TUFDdkIsQ0FBRSxDQUFDO01BQ0hWLGdCQUFnQixDQUFDVyxJQUFJLENBQUVKLHVCQUF3QixDQUFDO0lBQ2xELENBQUUsQ0FBQztJQUVIWixZQUFZLENBQUNpQixRQUFRLEdBQUdaLGdCQUFnQjtJQUV4QyxJQUFJLENBQUNhLGlDQUFpQyxHQUFHLE1BQU07TUFDN0NsQixZQUFZLENBQUNlLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0csaUNBQWlDLENBQUMsQ0FBQztJQUN4QyxLQUFLLENBQUNILE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQS9CLEtBQUssQ0FBQ21DLFFBQVEsQ0FBRSw0QkFBNEIsRUFBRTdCLDBCQUEyQixDQUFDO0FBQzFFLGVBQWVBLDBCQUEwQiJ9