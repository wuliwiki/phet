// Copyright 2015-2023, University of Colorado Boulder

/**
 * Screen for the home screen, which shows icons for selecting the sim content screens.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../axon/js/Property.js';
import optionize from '../../phet-core/js/optionize.js';
import { Color } from '../../scenery/js/imports.js';
import HomeScreenKeyboardHelpContent from './HomeScreenKeyboardHelpContent.js';
import HomeScreenModel from './HomeScreenModel.js';
import HomeScreenView from './HomeScreenView.js';
import joist from './joist.js';
import JoistStrings from './JoistStrings.js';
import Screen from './Screen.js';
// constants
const homeStringProperty = JoistStrings.a11y.homeStringProperty;
const BACKGROUND_COLOR = Color.BLACK;
class HomeScreen extends Screen {
  static BACKGROUND_COLOR = BACKGROUND_COLOR;
  constructor(simNameProperty, getScreenProperty, simScreens, activeSimScreensProperty, providedOptions) {
    const options = optionize()({
      // TODO get this color from LookAndFeel, see https://github.com/phetsims/joist/issues/222
      backgroundColorProperty: new Property(BACKGROUND_COLOR),
      name: homeStringProperty,
      createKeyboardHelpNode: () => new HomeScreenKeyboardHelpContent(),
      // phet-io
      instrumentNameProperty: false // requested by designers, see https://github.com/phetsims/joist/issues/627
    }, providedOptions);
    super(
    // at the time of construction, the Sim.screenProperty is not yet assigned (because it may itself include the
    // HomeScreen), so we must use a function to lazily get it after it is assigned
    () => new HomeScreenModel(getScreenProperty(), simScreens, activeSimScreensProperty, options.tandem.createTandem('model')), model => new HomeScreenView(simNameProperty, model, {
      warningNode: options.warningNode,
      tandem: options.tandem.createTandem('view')
    }), options);
  }
}
joist.register('HomeScreen', HomeScreen);
export default HomeScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIm9wdGlvbml6ZSIsIkNvbG9yIiwiSG9tZVNjcmVlbktleWJvYXJkSGVscENvbnRlbnQiLCJIb21lU2NyZWVuTW9kZWwiLCJIb21lU2NyZWVuVmlldyIsImpvaXN0IiwiSm9pc3RTdHJpbmdzIiwiU2NyZWVuIiwiaG9tZVN0cmluZ1Byb3BlcnR5IiwiYTExeSIsIkJBQ0tHUk9VTkRfQ09MT1IiLCJCTEFDSyIsIkhvbWVTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInNpbU5hbWVQcm9wZXJ0eSIsImdldFNjcmVlblByb3BlcnR5Iiwic2ltU2NyZWVucyIsImFjdGl2ZVNpbVNjcmVlbnNQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIm5hbWUiLCJjcmVhdGVLZXlib2FyZEhlbHBOb2RlIiwiaW5zdHJ1bWVudE5hbWVQcm9wZXJ0eSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwid2FybmluZ05vZGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkhvbWVTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2NyZWVuIGZvciB0aGUgaG9tZSBzY3JlZW4sIHdoaWNoIHNob3dzIGljb25zIGZvciBzZWxlY3RpbmcgdGhlIHNpbSBjb250ZW50IHNjcmVlbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBOb2RlIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEhvbWVTY3JlZW5LZXlib2FyZEhlbHBDb250ZW50IGZyb20gJy4vSG9tZVNjcmVlbktleWJvYXJkSGVscENvbnRlbnQuanMnO1xyXG5pbXBvcnQgSG9tZVNjcmVlbk1vZGVsIGZyb20gJy4vSG9tZVNjcmVlbk1vZGVsLmpzJztcclxuaW1wb3J0IEhvbWVTY3JlZW5WaWV3IGZyb20gJy4vSG9tZVNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBKb2lzdFN0cmluZ3MgZnJvbSAnLi9Kb2lzdFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgU2NyZWVuLCB7IFNjcmVlbk9wdGlvbnMgfSBmcm9tICcuL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBJbnRlbnRpb25hbEFueSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IGhvbWVTdHJpbmdQcm9wZXJ0eSA9IEpvaXN0U3RyaW5ncy5hMTF5LmhvbWVTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgQkFDS0dST1VORF9DT0xPUiA9IENvbG9yLkJMQUNLO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB3YXJuaW5nTm9kZTogTm9kZSB8IG51bGw7XHJcbn07XHJcbnR5cGUgSG9tZVNjcmVlbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFNjcmVlbk9wdGlvbnM7XHJcblxyXG5jbGFzcyBIb21lU2NyZWVuIGV4dGVuZHMgU2NyZWVuPEhvbWVTY3JlZW5Nb2RlbCwgSG9tZVNjcmVlblZpZXc+IHtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEJBQ0tHUk9VTkRfQ09MT1IgPSBCQUNLR1JPVU5EX0NPTE9SO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICBzaW1OYW1lUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sXHJcbiAgICBnZXRTY3JlZW5Qcm9wZXJ0eTogKCkgPT4gUHJvcGVydHk8U2NyZWVuPEludGVudGlvbmFsQW55LCBJbnRlbnRpb25hbEFueT4+LFxyXG4gICAgc2ltU2NyZWVuczogU2NyZWVuPEludGVudGlvbmFsQW55LCBJbnRlbnRpb25hbEFueT5bXSxcclxuICAgIGFjdGl2ZVNpbVNjcmVlbnNQcm9wZXJ0eTogUmVhZE9ubHlQcm9wZXJ0eTxTY3JlZW48SW50ZW50aW9uYWxBbnksIEludGVudGlvbmFsQW55PltdPixcclxuICAgIHByb3ZpZGVkT3B0aW9uczogSG9tZVNjcmVlbk9wdGlvbnNcclxuICApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEhvbWVTY3JlZW5PcHRpb25zLCBTZWxmT3B0aW9ucywgU2NyZWVuT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gVE9ETyBnZXQgdGhpcyBjb2xvciBmcm9tIExvb2tBbmRGZWVsLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaXN0L2lzc3Vlcy8yMjJcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggQkFDS0dST1VORF9DT0xPUiApLFxyXG5cclxuICAgICAgbmFtZTogaG9tZVN0cmluZ1Byb3BlcnR5LFxyXG5cclxuICAgICAgY3JlYXRlS2V5Ym9hcmRIZWxwTm9kZTogKCkgPT4gbmV3IEhvbWVTY3JlZW5LZXlib2FyZEhlbHBDb250ZW50KCksXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIGluc3RydW1lbnROYW1lUHJvcGVydHk6IGZhbHNlIC8vIHJlcXVlc3RlZCBieSBkZXNpZ25lcnMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzYyN1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgIC8vIGF0IHRoZSB0aW1lIG9mIGNvbnN0cnVjdGlvbiwgdGhlIFNpbS5zY3JlZW5Qcm9wZXJ0eSBpcyBub3QgeWV0IGFzc2lnbmVkIChiZWNhdXNlIGl0IG1heSBpdHNlbGYgaW5jbHVkZSB0aGVcclxuICAgICAgLy8gSG9tZVNjcmVlbiksIHNvIHdlIG11c3QgdXNlIGEgZnVuY3Rpb24gdG8gbGF6aWx5IGdldCBpdCBhZnRlciBpdCBpcyBhc3NpZ25lZFxyXG4gICAgICAoKSA9PiBuZXcgSG9tZVNjcmVlbk1vZGVsKCBnZXRTY3JlZW5Qcm9wZXJ0eSgpLCBzaW1TY3JlZW5zLCBhY3RpdmVTaW1TY3JlZW5zUHJvcGVydHksIG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBIb21lU2NyZWVuVmlldyggc2ltTmFtZVByb3BlcnR5LCBtb2RlbCwge1xyXG4gICAgICAgIHdhcm5pbmdOb2RlOiBvcHRpb25zLndhcm5pbmdOb2RlLFxyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKVxyXG4gICAgICB9ICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5qb2lzdC5yZWdpc3RlciggJ0hvbWVTY3JlZW4nLCBIb21lU2NyZWVuICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIb21lU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxRQUFRLE1BQU0sMkJBQTJCO0FBRWhELE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsU0FBU0MsS0FBSyxRQUFjLDZCQUE2QjtBQUN6RCxPQUFPQyw2QkFBNkIsTUFBTSxvQ0FBb0M7QUFDOUUsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjtBQUNsRCxPQUFPQyxjQUFjLE1BQU0scUJBQXFCO0FBQ2hELE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBQzlCLE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFDNUMsT0FBT0MsTUFBTSxNQUF5QixhQUFhO0FBR25EO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUdGLFlBQVksQ0FBQ0csSUFBSSxDQUFDRCxrQkFBa0I7QUFDL0QsTUFBTUUsZ0JBQWdCLEdBQUdULEtBQUssQ0FBQ1UsS0FBSztBQU9wQyxNQUFNQyxVQUFVLFNBQVNMLE1BQU0sQ0FBa0M7RUFDL0QsT0FBdUJHLGdCQUFnQixHQUFHQSxnQkFBZ0I7RUFFbkRHLFdBQVdBLENBQ2hCQyxlQUEwQyxFQUMxQ0MsaUJBQXlFLEVBQ3pFQyxVQUFvRCxFQUNwREMsd0JBQW9GLEVBQ3BGQyxlQUFrQyxFQUNsQztJQUVBLE1BQU1DLE9BQU8sR0FBR25CLFNBQVMsQ0FBZ0QsQ0FBQyxDQUFFO01BRTFFO01BQ0FvQix1QkFBdUIsRUFBRSxJQUFJckIsUUFBUSxDQUFFVyxnQkFBaUIsQ0FBQztNQUV6RFcsSUFBSSxFQUFFYixrQkFBa0I7TUFFeEJjLHNCQUFzQixFQUFFQSxDQUFBLEtBQU0sSUFBSXBCLDZCQUE2QixDQUFDLENBQUM7TUFFakU7TUFDQXFCLHNCQUFzQixFQUFFLEtBQUssQ0FBQztJQUNoQyxDQUFDLEVBQUVMLGVBQWdCLENBQUM7SUFFcEIsS0FBSztJQUNIO0lBQ0E7SUFDQSxNQUFNLElBQUlmLGVBQWUsQ0FBRVksaUJBQWlCLENBQUMsQ0FBQyxFQUFFQyxVQUFVLEVBQUVDLHdCQUF3QixFQUFFRSxPQUFPLENBQUNLLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQzlIQyxLQUFLLElBQUksSUFBSXRCLGNBQWMsQ0FBRVUsZUFBZSxFQUFFWSxLQUFLLEVBQUU7TUFDbkRDLFdBQVcsRUFBRVIsT0FBTyxDQUFDUSxXQUFXO01BQ2hDSCxNQUFNLEVBQUVMLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDQyxZQUFZLENBQUUsTUFBTztJQUM5QyxDQUFFLENBQUMsRUFDSE4sT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBZCxLQUFLLENBQUN1QixRQUFRLENBQUUsWUFBWSxFQUFFaEIsVUFBVyxDQUFDO0FBRTFDLGVBQWVBLFVBQVUifQ==