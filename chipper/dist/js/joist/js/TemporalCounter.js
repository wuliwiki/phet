// Copyright 2019-2022, University of Colorado Boulder

/**
 * Used by EngagementMetrics to keep track of the seconds in which activity occurs. For example, with a binSize of 1000,
 * calling onEvent with three values within the range of 1000 will result in a single "count" because they were all in a
 * bin. See unit tests for more examples.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import joist from './joist.js';
class TemporalCounter {
  constructor(binSize) {
    this.previousTime = null;
    this.binSize = binSize;
    this.lastBinIndex = null;
    this.counts = 0;
  }
  onEvent(time) {
    assert && this.previousTime && assert(time >= this.previousTime, 'time must increase each event');
    assert && assert(Number.isInteger(time), 'time must be an integer');
    const currentBinIndex = Math.floor(time / this.binSize);
    if (currentBinIndex !== this.lastBinIndex) {
      // Increment the time on the current screen (if home screen not showing)
      this.counts++;
      this.lastBinIndex = currentBinIndex;
    }
    this.previousTime = time;
  }
}
joist.register('TemporalCounter', TemporalCounter);
export default TemporalCounter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsIlRlbXBvcmFsQ291bnRlciIsImNvbnN0cnVjdG9yIiwiYmluU2l6ZSIsInByZXZpb3VzVGltZSIsImxhc3RCaW5JbmRleCIsImNvdW50cyIsIm9uRXZlbnQiLCJ0aW1lIiwiYXNzZXJ0IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiY3VycmVudEJpbkluZGV4IiwiTWF0aCIsImZsb29yIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUZW1wb3JhbENvdW50ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVXNlZCBieSBFbmdhZ2VtZW50TWV0cmljcyB0byBrZWVwIHRyYWNrIG9mIHRoZSBzZWNvbmRzIGluIHdoaWNoIGFjdGl2aXR5IG9jY3Vycy4gRm9yIGV4YW1wbGUsIHdpdGggYSBiaW5TaXplIG9mIDEwMDAsXHJcbiAqIGNhbGxpbmcgb25FdmVudCB3aXRoIHRocmVlIHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIG9mIDEwMDAgd2lsbCByZXN1bHQgaW4gYSBzaW5nbGUgXCJjb3VudFwiIGJlY2F1c2UgdGhleSB3ZXJlIGFsbCBpbiBhXHJcbiAqIGJpbi4gU2VlIHVuaXQgdGVzdHMgZm9yIG1vcmUgZXhhbXBsZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBqb2lzdCBmcm9tICcuL2pvaXN0LmpzJztcclxuXHJcbmNsYXNzIFRlbXBvcmFsQ291bnRlciB7XHJcblxyXG4gIHByaXZhdGUgcHJldmlvdXNUaW1lOiBudW1iZXIgfCBudWxsO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYmluU2l6ZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgbGFzdEJpbkluZGV4OiBudW1iZXIgfCBudWxsO1xyXG5cclxuICBwdWJsaWMgY291bnRzOiBudW1iZXI7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYmluU2l6ZTogbnVtYmVyICkge1xyXG4gICAgdGhpcy5wcmV2aW91c1RpbWUgPSBudWxsO1xyXG4gICAgdGhpcy5iaW5TaXplID0gYmluU2l6ZTtcclxuICAgIHRoaXMubGFzdEJpbkluZGV4ID0gbnVsbDtcclxuICAgIHRoaXMuY291bnRzID0gMDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvbkV2ZW50KCB0aW1lOiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgdGhpcy5wcmV2aW91c1RpbWUgJiYgYXNzZXJ0KCB0aW1lID49IHRoaXMucHJldmlvdXNUaW1lLCAndGltZSBtdXN0IGluY3JlYXNlIGVhY2ggZXZlbnQnICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggTnVtYmVyLmlzSW50ZWdlciggdGltZSApLCAndGltZSBtdXN0IGJlIGFuIGludGVnZXInICk7XHJcblxyXG4gICAgY29uc3QgY3VycmVudEJpbkluZGV4ID0gTWF0aC5mbG9vciggdGltZSAvIHRoaXMuYmluU2l6ZSApO1xyXG5cclxuICAgIGlmICggY3VycmVudEJpbkluZGV4ICE9PSB0aGlzLmxhc3RCaW5JbmRleCApIHtcclxuXHJcbiAgICAgIC8vIEluY3JlbWVudCB0aGUgdGltZSBvbiB0aGUgY3VycmVudCBzY3JlZW4gKGlmIGhvbWUgc2NyZWVuIG5vdCBzaG93aW5nKVxyXG4gICAgICB0aGlzLmNvdW50cysrO1xyXG4gICAgICB0aGlzLmxhc3RCaW5JbmRleCA9IGN1cnJlbnRCaW5JbmRleDtcclxuICAgIH1cclxuICAgIHRoaXMucHJldmlvdXNUaW1lID0gdGltZTtcclxuICB9XHJcbn1cclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnVGVtcG9yYWxDb3VudGVyJywgVGVtcG9yYWxDb3VudGVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IFRlbXBvcmFsQ291bnRlcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sWUFBWTtBQUU5QixNQUFNQyxlQUFlLENBQUM7RUFRYkMsV0FBV0EsQ0FBRUMsT0FBZSxFQUFHO0lBQ3BDLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUk7SUFDeEIsSUFBSSxDQUFDRCxPQUFPLEdBQUdBLE9BQU87SUFDdEIsSUFBSSxDQUFDRSxZQUFZLEdBQUcsSUFBSTtJQUN4QixJQUFJLENBQUNDLE1BQU0sR0FBRyxDQUFDO0VBQ2pCO0VBRU9DLE9BQU9BLENBQUVDLElBQVksRUFBUztJQUNuQ0MsTUFBTSxJQUFJLElBQUksQ0FBQ0wsWUFBWSxJQUFJSyxNQUFNLENBQUVELElBQUksSUFBSSxJQUFJLENBQUNKLFlBQVksRUFBRSwrQkFBZ0MsQ0FBQztJQUVuR0ssTUFBTSxJQUFJQSxNQUFNLENBQUVDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFSCxJQUFLLENBQUMsRUFBRSx5QkFBMEIsQ0FBQztJQUV2RSxNQUFNSSxlQUFlLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFFTixJQUFJLEdBQUcsSUFBSSxDQUFDTCxPQUFRLENBQUM7SUFFekQsSUFBS1MsZUFBZSxLQUFLLElBQUksQ0FBQ1AsWUFBWSxFQUFHO01BRTNDO01BQ0EsSUFBSSxDQUFDQyxNQUFNLEVBQUU7TUFDYixJQUFJLENBQUNELFlBQVksR0FBR08sZUFBZTtJQUNyQztJQUNBLElBQUksQ0FBQ1IsWUFBWSxHQUFHSSxJQUFJO0VBQzFCO0FBQ0Y7QUFFQVIsS0FBSyxDQUFDZSxRQUFRLENBQUUsaUJBQWlCLEVBQUVkLGVBQWdCLENBQUM7QUFDcEQsZUFBZUEsZUFBZSJ9