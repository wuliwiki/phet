// Copyright 2020-2023, University of Colorado Boulder
import joist from './joist.js';
/**
 * Given an array of all possible screens that a sim can have, select and order them according to the relevant query
 * parameters. This also will create a homeScreen if needed, and specify the initialScreen for startup.
 *
 * Parameters suffixed with "Provided" will be true if the that query parameter was actually in the URL, as opposed to
 * the value of the query parameter being the default.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 *
 * @param allSimScreens - all of the screens declared by the sim, duck-typed for tests
 * @param homeScreenQueryParameter - from phet.chipper.queryParameters.homeScreen
 * @param homeScreenQueryParameterProvided
 * @param initialScreenIndex - from phet.chipper.queryParameters.initialScreen
 * @param initialScreenQueryParameterProvided
 * @param screensQueryParameter - from phet.chipper.queryParameters.screens
 * @param screensQueryParameterProvided
 * @param createHomeScreen
 * @returns - duck-typed for tests
 * @throws Error if incompatible data is provided
 */
export default function selectScreens(allSimScreens, homeScreenQueryParameter, homeScreenQueryParameterProvided, initialScreenIndex, initialScreenQueryParameterProvided, screensQueryParameter, screensQueryParameterProvided, setupScreens, createHomeScreen) {
  if (allSimScreens.length === 1 && homeScreenQueryParameterProvided && homeScreenQueryParameter) {
    const errorMessage = 'cannot specify homeScreen=true for single-screen sims';

    // handle gracefully when running without ?ea
    QueryStringMachine.addWarning('homeScreen', homeScreenQueryParameter, errorMessage);

    // to support expected failures in selectScreensTests.js unit tests
    assert && assert(false, errorMessage);
  }

  // the ordered list of sim screens for this runtime
  let selectedSimScreens = [];

  // If a subset of screens was specified with the `screens` query parameter, add them to selectedSimScreens. Otherwise,
  // use all of the available sim screens as the default. Note that if the value of `screens` did not pass validation
  // in QueryStringMachine, it will be reverted to its default value of `null`, so it also needs to be checked for
  // truthiness before attempting to use it. For `screens` documentation, see the schema at
  // phet.chipper.queryParameters.screens in initialize-globals.js.
  if (screensQueryParameterProvided && screensQueryParameter) {
    assert && assert(screensQueryParameter.length > 0, 'Screens query parameter should have at least one value');
    for (let i = 0; i < screensQueryParameter.length; i++) {
      const userIndex = screensQueryParameter[i];
      const screenIndex = userIndex - 1; // screens query parameter uses 1-based indices, so convert to 0-based index

      if (screenIndex >= 0 && screenIndex < allSimScreens.length) {
        // index is valid, add screen
        selectedSimScreens.push(allSimScreens[screenIndex]);
      } else {
        // index is invalid, handle gracefully when running without ?ea and set selectedSimScreens to default values,
        // see https://github.com/phetsims/joist/issues/599
        const errorMessage = `invalid value in screens query parameter: ${userIndex}`;
        QueryStringMachine.addWarning('screens', screensQueryParameter, errorMessage);
        assert && assert(false, errorMessage);
        selectedSimScreens = allSimScreens;
        break;
      }
    }
  } else {
    selectedSimScreens = allSimScreens;
  }
  setupScreens(selectedSimScreens);

  // Specifying ?homeScreen=false creates a simulation with no HomeScreen, and hence is incompatible with
  // ?initialScreen=0, which specifies to show the home screen. Note that the default value of initialScreen:0 is
  // ignored when there is no HomeScreen.
  if (initialScreenQueryParameterProvided && initialScreenIndex === 0 && !homeScreenQueryParameter) {
    const errorMessage = 'cannot specify initialScreen=0 when home screen is disabled with homeScreen=false';

    // handle gracefully when running without ?ea
    QueryStringMachine.addWarning('initialScreen', initialScreenIndex, errorMessage);
    QueryStringMachine.addWarning('homeScreen', homeScreenQueryParameter, errorMessage);

    // to support expected failures in selectScreensTests.js unit tests
    assert && assert(false, errorMessage);
  }

  // For a single screen simulation (whether the simulation only declares one screen, or whether the user has specified
  // a single screen via ?screens), there is no HomeScreen, and hence ?initialScreen=0 which requests to show the
  // HomeScreen on startup should fail.
  if (initialScreenQueryParameterProvided && initialScreenIndex === 0 && selectedSimScreens.length === 1) {
    const errorMessage = 'cannot specify initialScreen=0 for single-screen sims or when only one screen is loaded with screens=n';

    // handle gracefully when running without ?ea
    QueryStringMachine.addWarning('initialScreen', initialScreenIndex, errorMessage);

    // to support expected failures in selectScreensTests.js unit tests
    assert && assert(false, errorMessage);
  }
  const screens = selectedSimScreens.slice();
  let homeScreen = null;

  // If a sim has multiple screens and the query parameter homeScreen=false is not provided, add a HomeScreen
  if (selectedSimScreens.length > 1 && homeScreenQueryParameter) {
    homeScreen = createHomeScreen(selectedSimScreens);
    screens.unshift(homeScreen);
  }

  // The first screen for the sim, can be the HomeScreen if applicable
  let initialScreen;
  if (homeScreen && initialScreenIndex === 0) {
    // If the home screen is supplied, then it is at index 0, so use the query parameter value directly (because the
    // query parameter is 1-based). If `?initialScreen` is 0 then there is no offset to apply.
    initialScreen = homeScreen;
  } else if (initialScreenIndex === 0) {
    // There is no home screen and the initialScreen query parameter was not supplied, so we select the first sim screen.
    initialScreen = selectedSimScreens[0];
  } else {
    // If the home screen is not supplied, then the first sim screen is at index 0, so subtract 1 from the query parameter.
    initialScreen = allSimScreens[initialScreenIndex - 1];
  }
  if (!screens.includes(initialScreen)) {
    throw new Error(`screen not found: ${initialScreenIndex}`);
  }

  // {boolean} indicates whether all possible screens have been created (order-independent)
  const allScreensCreated = _.isEqual(new Set(allSimScreens), new Set(selectedSimScreens)) && (allSimScreens.length > 1 ? !!homeScreen : true);
  return {
    homeScreen: homeScreen,
    initialScreen: initialScreen,
    selectedSimScreens: selectedSimScreens,
    screens: screens,
    allScreensCreated: allScreensCreated
  };
}
joist.register('selectScreens', selectScreens);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsInNlbGVjdFNjcmVlbnMiLCJhbGxTaW1TY3JlZW5zIiwiaG9tZVNjcmVlblF1ZXJ5UGFyYW1ldGVyIiwiaG9tZVNjcmVlblF1ZXJ5UGFyYW1ldGVyUHJvdmlkZWQiLCJpbml0aWFsU2NyZWVuSW5kZXgiLCJpbml0aWFsU2NyZWVuUXVlcnlQYXJhbWV0ZXJQcm92aWRlZCIsInNjcmVlbnNRdWVyeVBhcmFtZXRlciIsInNjcmVlbnNRdWVyeVBhcmFtZXRlclByb3ZpZGVkIiwic2V0dXBTY3JlZW5zIiwiY3JlYXRlSG9tZVNjcmVlbiIsImxlbmd0aCIsImVycm9yTWVzc2FnZSIsIlF1ZXJ5U3RyaW5nTWFjaGluZSIsImFkZFdhcm5pbmciLCJhc3NlcnQiLCJzZWxlY3RlZFNpbVNjcmVlbnMiLCJpIiwidXNlckluZGV4Iiwic2NyZWVuSW5kZXgiLCJwdXNoIiwic2NyZWVucyIsInNsaWNlIiwiaG9tZVNjcmVlbiIsInVuc2hpZnQiLCJpbml0aWFsU2NyZWVuIiwiaW5jbHVkZXMiLCJFcnJvciIsImFsbFNjcmVlbnNDcmVhdGVkIiwiXyIsImlzRXF1YWwiLCJTZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbInNlbGVjdFNjcmVlbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbmltcG9ydCBqb2lzdCBmcm9tICcuL2pvaXN0LmpzJztcclxuaW1wb3J0IEhvbWVTY3JlZW4gZnJvbSAnLi9Ib21lU2NyZWVuLmpzJztcclxuaW1wb3J0IHsgQW55U2NyZWVuIH0gZnJvbSAnLi9TY3JlZW4uanMnO1xyXG5cclxuZXhwb3J0IHR5cGUgU2NyZWVuUmV0dXJuVHlwZSA9IHtcclxuICBob21lU2NyZWVuOiBIb21lU2NyZWVuIHwgbnVsbDtcclxuICBpbml0aWFsU2NyZWVuOiBBbnlTY3JlZW47XHJcbiAgc2VsZWN0ZWRTaW1TY3JlZW5zOiBBbnlTY3JlZW5bXTtcclxuICBzY3JlZW5zOiBBbnlTY3JlZW5bXTtcclxuICBhbGxTY3JlZW5zQ3JlYXRlZDogYm9vbGVhbjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHaXZlbiBhbiBhcnJheSBvZiBhbGwgcG9zc2libGUgc2NyZWVucyB0aGF0IGEgc2ltIGNhbiBoYXZlLCBzZWxlY3QgYW5kIG9yZGVyIHRoZW0gYWNjb3JkaW5nIHRvIHRoZSByZWxldmFudCBxdWVyeVxyXG4gKiBwYXJhbWV0ZXJzLiBUaGlzIGFsc28gd2lsbCBjcmVhdGUgYSBob21lU2NyZWVuIGlmIG5lZWRlZCwgYW5kIHNwZWNpZnkgdGhlIGluaXRpYWxTY3JlZW4gZm9yIHN0YXJ0dXAuXHJcbiAqXHJcbiAqIFBhcmFtZXRlcnMgc3VmZml4ZWQgd2l0aCBcIlByb3ZpZGVkXCIgd2lsbCBiZSB0cnVlIGlmIHRoZSB0aGF0IHF1ZXJ5IHBhcmFtZXRlciB3YXMgYWN0dWFsbHkgaW4gdGhlIFVSTCwgYXMgb3Bwb3NlZCB0b1xyXG4gKiB0aGUgdmFsdWUgb2YgdGhlIHF1ZXJ5IHBhcmFtZXRlciBiZWluZyB0aGUgZGVmYXVsdC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqXHJcbiAqIEBwYXJhbSBhbGxTaW1TY3JlZW5zIC0gYWxsIG9mIHRoZSBzY3JlZW5zIGRlY2xhcmVkIGJ5IHRoZSBzaW0sIGR1Y2stdHlwZWQgZm9yIHRlc3RzXHJcbiAqIEBwYXJhbSBob21lU2NyZWVuUXVlcnlQYXJhbWV0ZXIgLSBmcm9tIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuaG9tZVNjcmVlblxyXG4gKiBAcGFyYW0gaG9tZVNjcmVlblF1ZXJ5UGFyYW1ldGVyUHJvdmlkZWRcclxuICogQHBhcmFtIGluaXRpYWxTY3JlZW5JbmRleCAtIGZyb20gcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5pbml0aWFsU2NyZWVuXHJcbiAqIEBwYXJhbSBpbml0aWFsU2NyZWVuUXVlcnlQYXJhbWV0ZXJQcm92aWRlZFxyXG4gKiBAcGFyYW0gc2NyZWVuc1F1ZXJ5UGFyYW1ldGVyIC0gZnJvbSBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLnNjcmVlbnNcclxuICogQHBhcmFtIHNjcmVlbnNRdWVyeVBhcmFtZXRlclByb3ZpZGVkXHJcbiAqIEBwYXJhbSBjcmVhdGVIb21lU2NyZWVuXHJcbiAqIEByZXR1cm5zIC0gZHVjay10eXBlZCBmb3IgdGVzdHNcclxuICogQHRocm93cyBFcnJvciBpZiBpbmNvbXBhdGlibGUgZGF0YSBpcyBwcm92aWRlZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VsZWN0U2NyZWVucyggYWxsU2ltU2NyZWVuczogQW55U2NyZWVuW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbWVTY3JlZW5RdWVyeVBhcmFtZXRlcjogYm9vbGVhbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9tZVNjcmVlblF1ZXJ5UGFyYW1ldGVyUHJvdmlkZWQ6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxTY3JlZW5JbmRleDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsU2NyZWVuUXVlcnlQYXJhbWV0ZXJQcm92aWRlZDogYm9vbGVhbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuc1F1ZXJ5UGFyYW1ldGVyOiBudW1iZXJbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuc1F1ZXJ5UGFyYW1ldGVyUHJvdmlkZWQ6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwU2NyZWVuczogKCBzY3JlZW5zOiBBbnlTY3JlZW5bXSApID0+IHZvaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUhvbWVTY3JlZW46ICggc2NyZWVuczogQW55U2NyZWVuW10gKSA9PiBIb21lU2NyZWVuICk6IFNjcmVlblJldHVyblR5cGUge1xyXG5cclxuICBpZiAoIGFsbFNpbVNjcmVlbnMubGVuZ3RoID09PSAxICYmIGhvbWVTY3JlZW5RdWVyeVBhcmFtZXRlclByb3ZpZGVkICYmIGhvbWVTY3JlZW5RdWVyeVBhcmFtZXRlciApIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICdjYW5ub3Qgc3BlY2lmeSBob21lU2NyZWVuPXRydWUgZm9yIHNpbmdsZS1zY3JlZW4gc2ltcyc7XHJcblxyXG4gICAgLy8gaGFuZGxlIGdyYWNlZnVsbHkgd2hlbiBydW5uaW5nIHdpdGhvdXQgP2VhXHJcbiAgICBRdWVyeVN0cmluZ01hY2hpbmUuYWRkV2FybmluZyggJ2hvbWVTY3JlZW4nLCBob21lU2NyZWVuUXVlcnlQYXJhbWV0ZXIsIGVycm9yTWVzc2FnZSApO1xyXG5cclxuICAgIC8vIHRvIHN1cHBvcnQgZXhwZWN0ZWQgZmFpbHVyZXMgaW4gc2VsZWN0U2NyZWVuc1Rlc3RzLmpzIHVuaXQgdGVzdHNcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCBlcnJvck1lc3NhZ2UgKTtcclxuICB9XHJcblxyXG4gIC8vIHRoZSBvcmRlcmVkIGxpc3Qgb2Ygc2ltIHNjcmVlbnMgZm9yIHRoaXMgcnVudGltZVxyXG4gIGxldCBzZWxlY3RlZFNpbVNjcmVlbnMgPSBbXTtcclxuXHJcbiAgLy8gSWYgYSBzdWJzZXQgb2Ygc2NyZWVucyB3YXMgc3BlY2lmaWVkIHdpdGggdGhlIGBzY3JlZW5zYCBxdWVyeSBwYXJhbWV0ZXIsIGFkZCB0aGVtIHRvIHNlbGVjdGVkU2ltU2NyZWVucy4gT3RoZXJ3aXNlLFxyXG4gIC8vIHVzZSBhbGwgb2YgdGhlIGF2YWlsYWJsZSBzaW0gc2NyZWVucyBhcyB0aGUgZGVmYXVsdC4gTm90ZSB0aGF0IGlmIHRoZSB2YWx1ZSBvZiBgc2NyZWVuc2AgZGlkIG5vdCBwYXNzIHZhbGlkYXRpb25cclxuICAvLyBpbiBRdWVyeVN0cmluZ01hY2hpbmUsIGl0IHdpbGwgYmUgcmV2ZXJ0ZWQgdG8gaXRzIGRlZmF1bHQgdmFsdWUgb2YgYG51bGxgLCBzbyBpdCBhbHNvIG5lZWRzIHRvIGJlIGNoZWNrZWQgZm9yXHJcbiAgLy8gdHJ1dGhpbmVzcyBiZWZvcmUgYXR0ZW1wdGluZyB0byB1c2UgaXQuIEZvciBgc2NyZWVuc2AgZG9jdW1lbnRhdGlvbiwgc2VlIHRoZSBzY2hlbWEgYXRcclxuICAvLyBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLnNjcmVlbnMgaW4gaW5pdGlhbGl6ZS1nbG9iYWxzLmpzLlxyXG4gIGlmICggc2NyZWVuc1F1ZXJ5UGFyYW1ldGVyUHJvdmlkZWQgJiYgc2NyZWVuc1F1ZXJ5UGFyYW1ldGVyICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc2NyZWVuc1F1ZXJ5UGFyYW1ldGVyLmxlbmd0aCA+IDAsICdTY3JlZW5zIHF1ZXJ5IHBhcmFtZXRlciBzaG91bGQgaGF2ZSBhdCBsZWFzdCBvbmUgdmFsdWUnICk7XHJcblxyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgc2NyZWVuc1F1ZXJ5UGFyYW1ldGVyLmxlbmd0aDsgaSsrICkge1xyXG5cclxuICAgICAgY29uc3QgdXNlckluZGV4ID0gc2NyZWVuc1F1ZXJ5UGFyYW1ldGVyWyBpIF07XHJcbiAgICAgIGNvbnN0IHNjcmVlbkluZGV4ID0gdXNlckluZGV4IC0gMTsgLy8gc2NyZWVucyBxdWVyeSBwYXJhbWV0ZXIgdXNlcyAxLWJhc2VkIGluZGljZXMsIHNvIGNvbnZlcnQgdG8gMC1iYXNlZCBpbmRleFxyXG5cclxuICAgICAgaWYgKCBzY3JlZW5JbmRleCA+PSAwICYmIHNjcmVlbkluZGV4IDwgYWxsU2ltU2NyZWVucy5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgIC8vIGluZGV4IGlzIHZhbGlkLCBhZGQgc2NyZWVuXHJcbiAgICAgICAgc2VsZWN0ZWRTaW1TY3JlZW5zLnB1c2goIGFsbFNpbVNjcmVlbnNbIHNjcmVlbkluZGV4IF0gKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgLy8gaW5kZXggaXMgaW52YWxpZCwgaGFuZGxlIGdyYWNlZnVsbHkgd2hlbiBydW5uaW5nIHdpdGhvdXQgP2VhIGFuZCBzZXQgc2VsZWN0ZWRTaW1TY3JlZW5zIHRvIGRlZmF1bHQgdmFsdWVzLFxyXG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzU5OVxyXG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBpbnZhbGlkIHZhbHVlIGluIHNjcmVlbnMgcXVlcnkgcGFyYW1ldGVyOiAke3VzZXJJbmRleH1gO1xyXG4gICAgICAgIFF1ZXJ5U3RyaW5nTWFjaGluZS5hZGRXYXJuaW5nKCAnc2NyZWVucycsIHNjcmVlbnNRdWVyeVBhcmFtZXRlciwgZXJyb3JNZXNzYWdlICk7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsIGVycm9yTWVzc2FnZSApO1xyXG4gICAgICAgIHNlbGVjdGVkU2ltU2NyZWVucyA9IGFsbFNpbVNjcmVlbnM7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICBzZWxlY3RlZFNpbVNjcmVlbnMgPSBhbGxTaW1TY3JlZW5zO1xyXG4gIH1cclxuXHJcbiAgc2V0dXBTY3JlZW5zKCBzZWxlY3RlZFNpbVNjcmVlbnMgKTtcclxuXHJcbiAgLy8gU3BlY2lmeWluZyA/aG9tZVNjcmVlbj1mYWxzZSBjcmVhdGVzIGEgc2ltdWxhdGlvbiB3aXRoIG5vIEhvbWVTY3JlZW4sIGFuZCBoZW5jZSBpcyBpbmNvbXBhdGlibGUgd2l0aFxyXG4gIC8vID9pbml0aWFsU2NyZWVuPTAsIHdoaWNoIHNwZWNpZmllcyB0byBzaG93IHRoZSBob21lIHNjcmVlbi4gTm90ZSB0aGF0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGluaXRpYWxTY3JlZW46MCBpc1xyXG4gIC8vIGlnbm9yZWQgd2hlbiB0aGVyZSBpcyBubyBIb21lU2NyZWVuLlxyXG4gIGlmICggaW5pdGlhbFNjcmVlblF1ZXJ5UGFyYW1ldGVyUHJvdmlkZWQgJiYgaW5pdGlhbFNjcmVlbkluZGV4ID09PSAwICYmICFob21lU2NyZWVuUXVlcnlQYXJhbWV0ZXIgKSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAnY2Fubm90IHNwZWNpZnkgaW5pdGlhbFNjcmVlbj0wIHdoZW4gaG9tZSBzY3JlZW4gaXMgZGlzYWJsZWQgd2l0aCBob21lU2NyZWVuPWZhbHNlJztcclxuXHJcbiAgICAvLyBoYW5kbGUgZ3JhY2VmdWxseSB3aGVuIHJ1bm5pbmcgd2l0aG91dCA/ZWFcclxuICAgIFF1ZXJ5U3RyaW5nTWFjaGluZS5hZGRXYXJuaW5nKCAnaW5pdGlhbFNjcmVlbicsIGluaXRpYWxTY3JlZW5JbmRleCwgZXJyb3JNZXNzYWdlICk7XHJcbiAgICBRdWVyeVN0cmluZ01hY2hpbmUuYWRkV2FybmluZyggJ2hvbWVTY3JlZW4nLCBob21lU2NyZWVuUXVlcnlQYXJhbWV0ZXIsIGVycm9yTWVzc2FnZSApO1xyXG5cclxuICAgIC8vIHRvIHN1cHBvcnQgZXhwZWN0ZWQgZmFpbHVyZXMgaW4gc2VsZWN0U2NyZWVuc1Rlc3RzLmpzIHVuaXQgdGVzdHNcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCBlcnJvck1lc3NhZ2UgKTtcclxuICB9XHJcblxyXG4gIC8vIEZvciBhIHNpbmdsZSBzY3JlZW4gc2ltdWxhdGlvbiAod2hldGhlciB0aGUgc2ltdWxhdGlvbiBvbmx5IGRlY2xhcmVzIG9uZSBzY3JlZW4sIG9yIHdoZXRoZXIgdGhlIHVzZXIgaGFzIHNwZWNpZmllZFxyXG4gIC8vIGEgc2luZ2xlIHNjcmVlbiB2aWEgP3NjcmVlbnMpLCB0aGVyZSBpcyBubyBIb21lU2NyZWVuLCBhbmQgaGVuY2UgP2luaXRpYWxTY3JlZW49MCB3aGljaCByZXF1ZXN0cyB0byBzaG93IHRoZVxyXG4gIC8vIEhvbWVTY3JlZW4gb24gc3RhcnR1cCBzaG91bGQgZmFpbC5cclxuICBpZiAoIGluaXRpYWxTY3JlZW5RdWVyeVBhcmFtZXRlclByb3ZpZGVkICYmIGluaXRpYWxTY3JlZW5JbmRleCA9PT0gMCAmJiBzZWxlY3RlZFNpbVNjcmVlbnMubGVuZ3RoID09PSAxICkge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ2Nhbm5vdCBzcGVjaWZ5IGluaXRpYWxTY3JlZW49MCBmb3Igc2luZ2xlLXNjcmVlbiBzaW1zIG9yIHdoZW4gb25seSBvbmUgc2NyZWVuIGlzIGxvYWRlZCB3aXRoIHNjcmVlbnM9bic7XHJcblxyXG4gICAgLy8gaGFuZGxlIGdyYWNlZnVsbHkgd2hlbiBydW5uaW5nIHdpdGhvdXQgP2VhXHJcbiAgICBRdWVyeVN0cmluZ01hY2hpbmUuYWRkV2FybmluZyggJ2luaXRpYWxTY3JlZW4nLCBpbml0aWFsU2NyZWVuSW5kZXgsIGVycm9yTWVzc2FnZSApO1xyXG5cclxuICAgIC8vIHRvIHN1cHBvcnQgZXhwZWN0ZWQgZmFpbHVyZXMgaW4gc2VsZWN0U2NyZWVuc1Rlc3RzLmpzIHVuaXQgdGVzdHNcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCBlcnJvck1lc3NhZ2UgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHNjcmVlbnMgPSBzZWxlY3RlZFNpbVNjcmVlbnMuc2xpY2UoKTtcclxuXHJcbiAgbGV0IGhvbWVTY3JlZW4gPSBudWxsO1xyXG5cclxuICAvLyBJZiBhIHNpbSBoYXMgbXVsdGlwbGUgc2NyZWVucyBhbmQgdGhlIHF1ZXJ5IHBhcmFtZXRlciBob21lU2NyZWVuPWZhbHNlIGlzIG5vdCBwcm92aWRlZCwgYWRkIGEgSG9tZVNjcmVlblxyXG4gIGlmICggc2VsZWN0ZWRTaW1TY3JlZW5zLmxlbmd0aCA+IDEgJiYgaG9tZVNjcmVlblF1ZXJ5UGFyYW1ldGVyICkge1xyXG4gICAgaG9tZVNjcmVlbiA9IGNyZWF0ZUhvbWVTY3JlZW4oIHNlbGVjdGVkU2ltU2NyZWVucyApO1xyXG4gICAgc2NyZWVucy51bnNoaWZ0KCBob21lU2NyZWVuICk7XHJcbiAgfVxyXG5cclxuICAvLyBUaGUgZmlyc3Qgc2NyZWVuIGZvciB0aGUgc2ltLCBjYW4gYmUgdGhlIEhvbWVTY3JlZW4gaWYgYXBwbGljYWJsZVxyXG4gIGxldCBpbml0aWFsU2NyZWVuO1xyXG4gIGlmICggaG9tZVNjcmVlbiAmJiBpbml0aWFsU2NyZWVuSW5kZXggPT09IDAgKSB7XHJcblxyXG4gICAgLy8gSWYgdGhlIGhvbWUgc2NyZWVuIGlzIHN1cHBsaWVkLCB0aGVuIGl0IGlzIGF0IGluZGV4IDAsIHNvIHVzZSB0aGUgcXVlcnkgcGFyYW1ldGVyIHZhbHVlIGRpcmVjdGx5IChiZWNhdXNlIHRoZVxyXG4gICAgLy8gcXVlcnkgcGFyYW1ldGVyIGlzIDEtYmFzZWQpLiBJZiBgP2luaXRpYWxTY3JlZW5gIGlzIDAgdGhlbiB0aGVyZSBpcyBubyBvZmZzZXQgdG8gYXBwbHkuXHJcbiAgICBpbml0aWFsU2NyZWVuID0gaG9tZVNjcmVlbjtcclxuICB9XHJcbiAgZWxzZSBpZiAoIGluaXRpYWxTY3JlZW5JbmRleCA9PT0gMCApIHtcclxuXHJcbiAgICAvLyBUaGVyZSBpcyBubyBob21lIHNjcmVlbiBhbmQgdGhlIGluaXRpYWxTY3JlZW4gcXVlcnkgcGFyYW1ldGVyIHdhcyBub3Qgc3VwcGxpZWQsIHNvIHdlIHNlbGVjdCB0aGUgZmlyc3Qgc2ltIHNjcmVlbi5cclxuICAgIGluaXRpYWxTY3JlZW4gPSBzZWxlY3RlZFNpbVNjcmVlbnNbIDAgXTtcclxuICB9XHJcbiAgZWxzZSB7XHJcblxyXG4gICAgLy8gSWYgdGhlIGhvbWUgc2NyZWVuIGlzIG5vdCBzdXBwbGllZCwgdGhlbiB0aGUgZmlyc3Qgc2ltIHNjcmVlbiBpcyBhdCBpbmRleCAwLCBzbyBzdWJ0cmFjdCAxIGZyb20gdGhlIHF1ZXJ5IHBhcmFtZXRlci5cclxuICAgIGluaXRpYWxTY3JlZW4gPSBhbGxTaW1TY3JlZW5zWyBpbml0aWFsU2NyZWVuSW5kZXggLSAxIF07XHJcbiAgfVxyXG5cclxuICBpZiAoICFzY3JlZW5zLmluY2x1ZGVzKCBpbml0aWFsU2NyZWVuICkgKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoIGBzY3JlZW4gbm90IGZvdW5kOiAke2luaXRpYWxTY3JlZW5JbmRleH1gICk7XHJcbiAgfVxyXG5cclxuICAvLyB7Ym9vbGVhbn0gaW5kaWNhdGVzIHdoZXRoZXIgYWxsIHBvc3NpYmxlIHNjcmVlbnMgaGF2ZSBiZWVuIGNyZWF0ZWQgKG9yZGVyLWluZGVwZW5kZW50KVxyXG4gIGNvbnN0IGFsbFNjcmVlbnNDcmVhdGVkID0gXy5pc0VxdWFsKCBuZXcgU2V0KCBhbGxTaW1TY3JlZW5zICksIG5ldyBTZXQoIHNlbGVjdGVkU2ltU2NyZWVucyApICkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICggYWxsU2ltU2NyZWVucy5sZW5ndGggPiAxID8gISFob21lU2NyZWVuIDogdHJ1ZSApO1xyXG4gIHJldHVybiB7XHJcbiAgICBob21lU2NyZWVuOiBob21lU2NyZWVuLFxyXG4gICAgaW5pdGlhbFNjcmVlbjogaW5pdGlhbFNjcmVlbixcclxuICAgIHNlbGVjdGVkU2ltU2NyZWVuczogc2VsZWN0ZWRTaW1TY3JlZW5zLFxyXG4gICAgc2NyZWVuczogc2NyZWVucyxcclxuICAgIGFsbFNjcmVlbnNDcmVhdGVkOiBhbGxTY3JlZW5zQ3JlYXRlZFxyXG4gIH07XHJcbn1cclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnc2VsZWN0U2NyZWVucycsIHNlbGVjdFNjcmVlbnMgKTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsT0FBT0EsS0FBSyxNQUFNLFlBQVk7QUFZOUI7QUFDQTtBQUNBO0FBQ0E7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