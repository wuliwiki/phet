// Copyright 2021-2023, University of Colorado Boulder

/**
 * The Toolbar along the left edge of the screen with controls related to the sim or active screen. Currently, it
 * only contains controls related to the Voicing feature. It isn't always displayed and the user must request it
 * from the PreferencesDialog. In order to be used, both voicing AND the Toolbar must be enabled by the user.
 * Voicing can be used without this shown.
 *
 * When open, the sim will resize and shift to the right to create space. Screen bounds are adjusted so that
 * simulation components will never overlap with the Toolbar.
 *
 * @author Jesse Greenberg
 */

import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import NumberProperty from '../../../axon/js/NumberProperty.js';
import stepTimer from '../../../axon/js/stepTimer.js';
import Matrix3 from '../../../dot/js/Matrix3.js';
import { Shape } from '../../../kite/js/imports.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Node, Path, Rectangle, voicingManager } from '../../../scenery/js/imports.js';
import ButtonNode from '../../../sun/js/buttons/ButtonNode.js';
import RoundPushButton from '../../../sun/js/buttons/RoundPushButton.js';
import Tandem from '../../../tandem/js/Tandem.js';
import audioManager from '../audioManager.js';
import joist from '../joist.js';
import JoistStrings from '../JoistStrings.js';
import VoicingToolbarAlertManager from './VoicingToolbarAlertManager.js';
import VoicingToolbarItem from './VoicingToolbarItem.js';
// constants
const MAX_ANIMATION_SPEED = 250; // in view coordinates per second, assuming 60 fps
const CONTENT_TOP_MARGIN = 15; // margin between top of Toolbar and contents

// constants
const openToolbarStringProperty = JoistStrings.a11y.toolbar.openToolbarStringProperty;
const closeToolbarStringProperty = JoistStrings.a11y.toolbar.closeToolbarStringProperty;
const hideToolbarStringProperty = JoistStrings.a11y.toolbar.hideToolbarStringProperty;
const showToolbarStringProperty = JoistStrings.a11y.toolbar.showToolbarStringProperty;
const toolbarShownStringProperty = JoistStrings.a11y.toolbar.toolbarShownStringProperty;
const toolbarHiddenStringProperty = JoistStrings.a11y.toolbar.toolbarHiddenStringProperty;
class Toolbar extends Node {
  // Whether the Toolbar is enabled (visible to the user)

  // the Rectangle for the Toolbar that surrounds all content, bounds set once
  // content is created and in layout to fill height of screen
  // The position of the right edge of the backgroundRectangle in local coordinates.
  // This is what controls the position of the Toolbar as it is open/closed/removed/animating.
  // The target position for the rightPositionProperty, to support animation. In step,
  // the rightPositionProperty will be changed until the rightPositionProperty equals the rightDestinationPosition.
  // Whether the Toolbar is open or closed. This is different from whether or not it is showing.
  //  Whether the Toolbar is shown to the user. At this time,
  // that is true if the toolbar is enabled, voicing is enabled, and if all audio is enabled. The Toolbar only
  // includes controls related to audio (voicing) so when audio is disabled there is no need to show it.
  // Scale applied to the Toolbar and its contents in response to layout and window resizing.
  layoutScale = 1;

  // Contents for the Toolbar, currently only controls related to the voicing
  // feature.
  // width of content for the toolbar in the local coordinate frame
  // Margin between toolbar content and edge of the backgroundRectangle, in the local coordinate
  // frame. Also used to determine the right position when closed. This is the width of the button so that when the
  // Toolbar is closed only the button is shown and all other content is hidden.
  constructor(enabledProperty, selectedScreenProperty, lookAndFeel, providedOptions) {
    const options = optionize()({
      // pdom
      tagName: 'div',
      // phet-io
      tandem: Tandem.OPTIONAL,
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);
    super(options);
    this.isEnabledProperty = enabledProperty;
    this.backgroundRectangle = new Rectangle(0, 0, 0, 0, {
      fill: lookAndFeel.navigationBarFillProperty
    });
    this.openProperty = new BooleanProperty(true);
    this.isShowingProperty = DerivedProperty.and([this.isEnabledProperty, voicingManager.enabledProperty, audioManager.audioEnabledProperty]);
    const voicingAlertManager = new VoicingToolbarAlertManager(selectedScreenProperty);
    this.menuContent = new VoicingToolbarItem(voicingAlertManager, lookAndFeel, {
      tandem: options.tandem.createTandem('menuContent')
    });

    // icon for the openButton
    const chevronIcon = new DoubleChevron();
    this.openButton = new RoundPushButton({
      content: chevronIcon,
      listener: () => this.openProperty.toggle(),
      buttonAppearanceStrategy: ButtonNode.FlatAppearanceStrategy,
      baseColor: 'lightgrey',
      // phet-io - opting out of Tandems for now
      tandem: Tandem.OPT_OUT
    });
    this.contentWidth = this.menuContent.localBounds.width;
    this.contentMargin = this.openButton.localBounds.width;

    // The position of the right edge of the backgroundRectangle in local coordinates.
    // This is what controls the position of the Toolbar as it is open/closed/removed/animating.
    this.rightPositionProperty = new NumberProperty(this.getHiddenPosition());

    // The target position for the rightPositionProperty, to support animation. In step,
    // the rightPositionProperty will be changed until the rightPositionProperty equals the rightDestinationPosition.
    this.rightDestinationPosition = 0;

    // a parent for all Nodes of the toolbar, so we can set visibility of this group internally when
    // the isShowingProperty changes
    const contentParent = new Node({
      children: [this.backgroundRectangle, this.menuContent, this.openButton]
    });
    this.addChild(contentParent);

    // move to destination position in the animation frame
    const timerListener = dt => {
      this.step(dt);
    };
    stepTimer.addListener(timerListener);
    const isOpenListener = (open, oldValue) => {
      // rotate chevron to indicate direction of toolbar movement
      chevronIcon.matrix = open ? Matrix3.scaling(-1, 1) : Matrix3.IDENTITY;

      // when closed, menu content should be hidden from screen readers and the navigation order
      this.menuContent.pdomVisible = open;
      this.openButton.innerContent = open ? closeToolbarStringProperty : openToolbarStringProperty;
      this.openButton.voicingNameResponse = open ? hideToolbarStringProperty : showToolbarStringProperty;
      this.updateDestinationPosition();
      if (oldValue !== null) {
        const alertProperty = open ? toolbarShownStringProperty : toolbarHiddenStringProperty;
        this.openButton.voicingSpeakContextResponse({
          contextResponse: alertProperty
        });
        this.alertDescriptionUtterance(alertProperty);
      }
    };
    this.openProperty.link(isOpenListener);

    // when shown or hidden update destination positions so it animates open or close
    const isShowingListener = showing => {
      this.updateDestinationPosition();

      // when now showing, this entire toolbar should be hidden for Interactive Description, but we don't use
      // visibility directly because we want to see the Toolbar animate away
      contentParent.pdomVisible = showing;
    };
    this.isShowingProperty.link(isShowingListener);
    this.disposeToolbar = () => {
      this.isShowingProperty.unlink(isShowingListener);
      this.openProperty.unlink(isOpenListener);
    };
  }

  /**
   * Returns the width of the Toolbar that can be seen on screen. This can be any value from the full width of the
   * Toolbar to zero width, depending on whether it is open, closed, removed entirely, or animating.
   */
  getDisplayedWidth() {
    return this.rightPositionProperty.value * this.layoutScale + this.openButton.width / 2;
  }
  getHiddenPosition() {
    assert && assert(typeof this.contentMargin === 'number');
    return -this.contentMargin / 2;
  }

  /**
   * Update rightDestinationPosition so that the Toolbar will animate towards opening, closing, or being removed
   * entirely from view.
   */
  updateDestinationPosition() {
    if (this.isShowingProperty.value) {
      // the Toolbar is enabled and should either show all content or just the openButton
      this.rightDestinationPosition = this.openProperty.value ? this.contentWidth + this.contentMargin * 2 : this.contentMargin;
    } else {
      // no aspect of the menu should be visible
      this.rightDestinationPosition = this.getHiddenPosition();
    }
  }

  /**
   * Animated the Toolbar as it opens and closes.
   */
  step(dt) {
    const distance = Math.abs(this.rightPositionProperty.value - this.rightDestinationPosition);
    if (distance !== 0) {
      const animationDistance = Math.min(distance, MAX_ANIMATION_SPEED * dt);
      const currentPosition = this.rightPositionProperty.value;
      this.rightPositionProperty.value = this.rightDestinationPosition > currentPosition ? currentPosition + animationDistance : currentPosition - animationDistance;
    }
  }

  /**
   * Layout for the Toolbar, called whenever position changes or window is resized.
   */
  layout(scale, height) {
    this.layoutScale = scale;
    this.menuContent.setScaleMagnitude(scale);
    this.openButton.setScaleMagnitude(scale);
    this.backgroundRectangle.rectWidth = scale * (this.contentWidth + this.contentMargin * 2);
    this.backgroundRectangle.rectHeight = height;
    this.backgroundRectangle.right = this.rightPositionProperty.value * scale;
    this.openButton.center = this.backgroundRectangle.rightCenter;
    this.menuContent.centerTop = this.backgroundRectangle.centerTop.plusXY(0, CONTENT_TOP_MARGIN);
  }
  dispose() {
    this.disposeToolbar();
    super.dispose();
  }
}

/**
 * The icon for the button that opens and closes the Toolbar.
 */
class DoubleChevron extends Path {
  constructor() {
    // spacing and dimensions for the arrows
    const chevronSpacing = 8;
    const chevronWidth = 5;
    const chevronHeight = 12;
    const chevronShape = new Shape();
    for (let i = 0; i < 2; i++) {
      const left = i * chevronSpacing;
      chevronShape.moveTo(left, 0);
      chevronShape.lineTo(left + chevronWidth, chevronHeight / 2);
      chevronShape.lineTo(left, chevronHeight);
    }
    super(chevronShape, {
      stroke: 'black',
      lineWidth: 3.5,
      lineCap: 'round'
    });
  }
}
joist.register('Toolbar', Toolbar);
export default Toolbar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsInN0ZXBUaW1lciIsIk1hdHJpeDMiLCJTaGFwZSIsIm9wdGlvbml6ZSIsIk5vZGUiLCJQYXRoIiwiUmVjdGFuZ2xlIiwidm9pY2luZ01hbmFnZXIiLCJCdXR0b25Ob2RlIiwiUm91bmRQdXNoQnV0dG9uIiwiVGFuZGVtIiwiYXVkaW9NYW5hZ2VyIiwiam9pc3QiLCJKb2lzdFN0cmluZ3MiLCJWb2ljaW5nVG9vbGJhckFsZXJ0TWFuYWdlciIsIlZvaWNpbmdUb29sYmFySXRlbSIsIk1BWF9BTklNQVRJT05fU1BFRUQiLCJDT05URU5UX1RPUF9NQVJHSU4iLCJvcGVuVG9vbGJhclN0cmluZ1Byb3BlcnR5IiwiYTExeSIsInRvb2xiYXIiLCJjbG9zZVRvb2xiYXJTdHJpbmdQcm9wZXJ0eSIsImhpZGVUb29sYmFyU3RyaW5nUHJvcGVydHkiLCJzaG93VG9vbGJhclN0cmluZ1Byb3BlcnR5IiwidG9vbGJhclNob3duU3RyaW5nUHJvcGVydHkiLCJ0b29sYmFySGlkZGVuU3RyaW5nUHJvcGVydHkiLCJUb29sYmFyIiwibGF5b3V0U2NhbGUiLCJjb25zdHJ1Y3RvciIsImVuYWJsZWRQcm9wZXJ0eSIsInNlbGVjdGVkU2NyZWVuUHJvcGVydHkiLCJsb29rQW5kRmVlbCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ0YWdOYW1lIiwidGFuZGVtIiwiT1BUSU9OQUwiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvUmVhZE9ubHkiLCJpc0VuYWJsZWRQcm9wZXJ0eSIsImJhY2tncm91bmRSZWN0YW5nbGUiLCJmaWxsIiwibmF2aWdhdGlvbkJhckZpbGxQcm9wZXJ0eSIsIm9wZW5Qcm9wZXJ0eSIsImlzU2hvd2luZ1Byb3BlcnR5IiwiYW5kIiwiYXVkaW9FbmFibGVkUHJvcGVydHkiLCJ2b2ljaW5nQWxlcnRNYW5hZ2VyIiwibWVudUNvbnRlbnQiLCJjcmVhdGVUYW5kZW0iLCJjaGV2cm9uSWNvbiIsIkRvdWJsZUNoZXZyb24iLCJvcGVuQnV0dG9uIiwiY29udGVudCIsImxpc3RlbmVyIiwidG9nZ2xlIiwiYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5IiwiRmxhdEFwcGVhcmFuY2VTdHJhdGVneSIsImJhc2VDb2xvciIsIk9QVF9PVVQiLCJjb250ZW50V2lkdGgiLCJsb2NhbEJvdW5kcyIsIndpZHRoIiwiY29udGVudE1hcmdpbiIsInJpZ2h0UG9zaXRpb25Qcm9wZXJ0eSIsImdldEhpZGRlblBvc2l0aW9uIiwicmlnaHREZXN0aW5hdGlvblBvc2l0aW9uIiwiY29udGVudFBhcmVudCIsImNoaWxkcmVuIiwiYWRkQ2hpbGQiLCJ0aW1lckxpc3RlbmVyIiwiZHQiLCJzdGVwIiwiYWRkTGlzdGVuZXIiLCJpc09wZW5MaXN0ZW5lciIsIm9wZW4iLCJvbGRWYWx1ZSIsIm1hdHJpeCIsInNjYWxpbmciLCJJREVOVElUWSIsInBkb21WaXNpYmxlIiwiaW5uZXJDb250ZW50Iiwidm9pY2luZ05hbWVSZXNwb25zZSIsInVwZGF0ZURlc3RpbmF0aW9uUG9zaXRpb24iLCJhbGVydFByb3BlcnR5Iiwidm9pY2luZ1NwZWFrQ29udGV4dFJlc3BvbnNlIiwiY29udGV4dFJlc3BvbnNlIiwiYWxlcnREZXNjcmlwdGlvblV0dGVyYW5jZSIsImxpbmsiLCJpc1Nob3dpbmdMaXN0ZW5lciIsInNob3dpbmciLCJkaXNwb3NlVG9vbGJhciIsInVubGluayIsImdldERpc3BsYXllZFdpZHRoIiwidmFsdWUiLCJhc3NlcnQiLCJkaXN0YW5jZSIsIk1hdGgiLCJhYnMiLCJhbmltYXRpb25EaXN0YW5jZSIsIm1pbiIsImN1cnJlbnRQb3NpdGlvbiIsImxheW91dCIsInNjYWxlIiwiaGVpZ2h0Iiwic2V0U2NhbGVNYWduaXR1ZGUiLCJyZWN0V2lkdGgiLCJyZWN0SGVpZ2h0IiwicmlnaHQiLCJjZW50ZXIiLCJyaWdodENlbnRlciIsImNlbnRlclRvcCIsInBsdXNYWSIsImRpc3Bvc2UiLCJjaGV2cm9uU3BhY2luZyIsImNoZXZyb25XaWR0aCIsImNoZXZyb25IZWlnaHQiLCJjaGV2cm9uU2hhcGUiLCJpIiwibGVmdCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImxpbmVXaWR0aCIsImxpbmVDYXAiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRvb2xiYXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIFRvb2xiYXIgYWxvbmcgdGhlIGxlZnQgZWRnZSBvZiB0aGUgc2NyZWVuIHdpdGggY29udHJvbHMgcmVsYXRlZCB0byB0aGUgc2ltIG9yIGFjdGl2ZSBzY3JlZW4uIEN1cnJlbnRseSwgaXRcclxuICogb25seSBjb250YWlucyBjb250cm9scyByZWxhdGVkIHRvIHRoZSBWb2ljaW5nIGZlYXR1cmUuIEl0IGlzbid0IGFsd2F5cyBkaXNwbGF5ZWQgYW5kIHRoZSB1c2VyIG11c3QgcmVxdWVzdCBpdFxyXG4gKiBmcm9tIHRoZSBQcmVmZXJlbmNlc0RpYWxvZy4gSW4gb3JkZXIgdG8gYmUgdXNlZCwgYm90aCB2b2ljaW5nIEFORCB0aGUgVG9vbGJhciBtdXN0IGJlIGVuYWJsZWQgYnkgdGhlIHVzZXIuXHJcbiAqIFZvaWNpbmcgY2FuIGJlIHVzZWQgd2l0aG91dCB0aGlzIHNob3duLlxyXG4gKlxyXG4gKiBXaGVuIG9wZW4sIHRoZSBzaW0gd2lsbCByZXNpemUgYW5kIHNoaWZ0IHRvIHRoZSByaWdodCB0byBjcmVhdGUgc3BhY2UuIFNjcmVlbiBib3VuZHMgYXJlIGFkanVzdGVkIHNvIHRoYXRcclxuICogc2ltdWxhdGlvbiBjb21wb25lbnRzIHdpbGwgbmV2ZXIgb3ZlcmxhcCB3aXRoIHRoZSBUb29sYmFyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgc3RlcFRpbWVyIGZyb20gJy4uLy4uLy4uL2F4b24vanMvc3RlcFRpbWVyLmpzJztcclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBOb2RlT3B0aW9ucywgUGF0aCwgUmVjdGFuZ2xlLCB2b2ljaW5nTWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBCdXR0b25Ob2RlIGZyb20gJy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL0J1dHRvbk5vZGUuanMnO1xyXG5pbXBvcnQgUm91bmRQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JvdW5kUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBhdWRpb01hbmFnZXIgZnJvbSAnLi4vYXVkaW9NYW5hZ2VyLmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IEpvaXN0U3RyaW5ncyBmcm9tICcuLi9Kb2lzdFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgVm9pY2luZ1Rvb2xiYXJBbGVydE1hbmFnZXIgZnJvbSAnLi9Wb2ljaW5nVG9vbGJhckFsZXJ0TWFuYWdlci5qcyc7XHJcbmltcG9ydCBWb2ljaW5nVG9vbGJhckl0ZW0gZnJvbSAnLi9Wb2ljaW5nVG9vbGJhckl0ZW0uanMnO1xyXG5pbXBvcnQgTG9va0FuZEZlZWwgZnJvbSAnLi4vTG9va0FuZEZlZWwuanMnO1xyXG5pbXBvcnQgeyBBbnlTY3JlZW4gfSBmcm9tICcuLi9TY3JlZW4uanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IE1BWF9BTklNQVRJT05fU1BFRUQgPSAyNTA7IC8vIGluIHZpZXcgY29vcmRpbmF0ZXMgcGVyIHNlY29uZCwgYXNzdW1pbmcgNjAgZnBzXHJcbmNvbnN0IENPTlRFTlRfVE9QX01BUkdJTiA9IDE1OyAvLyBtYXJnaW4gYmV0d2VlbiB0b3Agb2YgVG9vbGJhciBhbmQgY29udGVudHNcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBvcGVuVG9vbGJhclN0cmluZ1Byb3BlcnR5ID0gSm9pc3RTdHJpbmdzLmExMXkudG9vbGJhci5vcGVuVG9vbGJhclN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBjbG9zZVRvb2xiYXJTdHJpbmdQcm9wZXJ0eSA9IEpvaXN0U3RyaW5ncy5hMTF5LnRvb2xiYXIuY2xvc2VUb29sYmFyU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGhpZGVUb29sYmFyU3RyaW5nUHJvcGVydHkgPSBKb2lzdFN0cmluZ3MuYTExeS50b29sYmFyLmhpZGVUb29sYmFyU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHNob3dUb29sYmFyU3RyaW5nUHJvcGVydHkgPSBKb2lzdFN0cmluZ3MuYTExeS50b29sYmFyLnNob3dUb29sYmFyU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHRvb2xiYXJTaG93blN0cmluZ1Byb3BlcnR5ID0gSm9pc3RTdHJpbmdzLmExMXkudG9vbGJhci50b29sYmFyU2hvd25TdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgdG9vbGJhckhpZGRlblN0cmluZ1Byb3BlcnR5ID0gSm9pc3RTdHJpbmdzLmExMXkudG9vbGJhci50b29sYmFySGlkZGVuU3RyaW5nUHJvcGVydHk7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxudHlwZSBUb29sYmFyT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnMgJiBOb2RlT3B0aW9ucztcclxuXHJcbmNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLy8gV2hldGhlciB0aGUgVG9vbGJhciBpcyBlbmFibGVkICh2aXNpYmxlIHRvIHRoZSB1c2VyKVxyXG4gIHByaXZhdGUgcmVhZG9ubHkgaXNFbmFibGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyB0aGUgUmVjdGFuZ2xlIGZvciB0aGUgVG9vbGJhciB0aGF0IHN1cnJvdW5kcyBhbGwgY29udGVudCwgYm91bmRzIHNldCBvbmNlXHJcbiAgLy8gY29udGVudCBpcyBjcmVhdGVkIGFuZCBpbiBsYXlvdXQgdG8gZmlsbCBoZWlnaHQgb2Ygc2NyZWVuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBiYWNrZ3JvdW5kUmVjdGFuZ2xlOiBSZWN0YW5nbGU7XHJcblxyXG4gIC8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgcmlnaHQgZWRnZSBvZiB0aGUgYmFja2dyb3VuZFJlY3RhbmdsZSBpbiBsb2NhbCBjb29yZGluYXRlcy5cclxuICAvLyBUaGlzIGlzIHdoYXQgY29udHJvbHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBUb29sYmFyIGFzIGl0IGlzIG9wZW4vY2xvc2VkL3JlbW92ZWQvYW5pbWF0aW5nLlxyXG4gIHB1YmxpYyByZWFkb25seSByaWdodFBvc2l0aW9uUHJvcGVydHk6IFRQcm9wZXJ0eTxudW1iZXI+O1xyXG5cclxuICAvLyBUaGUgdGFyZ2V0IHBvc2l0aW9uIGZvciB0aGUgcmlnaHRQb3NpdGlvblByb3BlcnR5LCB0byBzdXBwb3J0IGFuaW1hdGlvbi4gSW4gc3RlcCxcclxuICAvLyB0aGUgcmlnaHRQb3NpdGlvblByb3BlcnR5IHdpbGwgYmUgY2hhbmdlZCB1bnRpbCB0aGUgcmlnaHRQb3NpdGlvblByb3BlcnR5IGVxdWFscyB0aGUgcmlnaHREZXN0aW5hdGlvblBvc2l0aW9uLlxyXG4gIHByaXZhdGUgcmlnaHREZXN0aW5hdGlvblBvc2l0aW9uOiBudW1iZXI7XHJcblxyXG4gIC8vIFdoZXRoZXIgdGhlIFRvb2xiYXIgaXMgb3BlbiBvciBjbG9zZWQuIFRoaXMgaXMgZGlmZmVyZW50IGZyb20gd2hldGhlciBvciBub3QgaXQgaXMgc2hvd2luZy5cclxuICBwcml2YXRlIHJlYWRvbmx5IG9wZW5Qcm9wZXJ0eTogQm9vbGVhblByb3BlcnR5O1xyXG5cclxuICAvLyAgV2hldGhlciB0aGUgVG9vbGJhciBpcyBzaG93biB0byB0aGUgdXNlci4gQXQgdGhpcyB0aW1lLFxyXG4gIC8vIHRoYXQgaXMgdHJ1ZSBpZiB0aGUgdG9vbGJhciBpcyBlbmFibGVkLCB2b2ljaW5nIGlzIGVuYWJsZWQsIGFuZCBpZiBhbGwgYXVkaW8gaXMgZW5hYmxlZC4gVGhlIFRvb2xiYXIgb25seVxyXG4gIC8vIGluY2x1ZGVzIGNvbnRyb2xzIHJlbGF0ZWQgdG8gYXVkaW8gKHZvaWNpbmcpIHNvIHdoZW4gYXVkaW8gaXMgZGlzYWJsZWQgdGhlcmUgaXMgbm8gbmVlZCB0byBzaG93IGl0LlxyXG4gIHByaXZhdGUgcmVhZG9ubHkgaXNTaG93aW5nUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyBTY2FsZSBhcHBsaWVkIHRvIHRoZSBUb29sYmFyIGFuZCBpdHMgY29udGVudHMgaW4gcmVzcG9uc2UgdG8gbGF5b3V0IGFuZCB3aW5kb3cgcmVzaXppbmcuXHJcbiAgcHJpdmF0ZSBsYXlvdXRTY2FsZSA9IDE7XHJcblxyXG4gIC8vIENvbnRlbnRzIGZvciB0aGUgVG9vbGJhciwgY3VycmVudGx5IG9ubHkgY29udHJvbHMgcmVsYXRlZCB0byB0aGUgdm9pY2luZ1xyXG4gIC8vIGZlYXR1cmUuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBtZW51Q29udGVudDogVm9pY2luZ1Rvb2xiYXJJdGVtO1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IG9wZW5CdXR0b246IFJvdW5kUHVzaEJ1dHRvbjtcclxuXHJcbiAgLy8gd2lkdGggb2YgY29udGVudCBmb3IgdGhlIHRvb2xiYXIgaW4gdGhlIGxvY2FsIGNvb3JkaW5hdGUgZnJhbWVcclxuICBwcml2YXRlIHJlYWRvbmx5IGNvbnRlbnRXaWR0aDogbnVtYmVyO1xyXG5cclxuICAvLyBNYXJnaW4gYmV0d2VlbiB0b29sYmFyIGNvbnRlbnQgYW5kIGVkZ2Ugb2YgdGhlIGJhY2tncm91bmRSZWN0YW5nbGUsIGluIHRoZSBsb2NhbCBjb29yZGluYXRlXHJcbiAgLy8gZnJhbWUuIEFsc28gdXNlZCB0byBkZXRlcm1pbmUgdGhlIHJpZ2h0IHBvc2l0aW9uIHdoZW4gY2xvc2VkLiBUaGlzIGlzIHRoZSB3aWR0aCBvZiB0aGUgYnV0dG9uIHNvIHRoYXQgd2hlbiB0aGVcclxuICAvLyBUb29sYmFyIGlzIGNsb3NlZCBvbmx5IHRoZSBidXR0b24gaXMgc2hvd24gYW5kIGFsbCBvdGhlciBjb250ZW50IGlzIGhpZGRlbi5cclxuICBwcml2YXRlIHJlYWRvbmx5IGNvbnRlbnRNYXJnaW46IG51bWJlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VUb29sYmFyOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGVuYWJsZWRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sIHNlbGVjdGVkU2NyZWVuUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PEFueVNjcmVlbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIHByb3ZpZGVkT3B0aW9ucz86IFRvb2xiYXJPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VG9vbGJhck9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gcGRvbVxyXG4gICAgICB0YWdOYW1lOiAnZGl2JyxcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUSU9OQUwsXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHtcclxuICAgICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuaXNFbmFibGVkUHJvcGVydHkgPSBlbmFibGVkUHJvcGVydHk7XHJcblxyXG4gICAgdGhpcy5iYWNrZ3JvdW5kUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgMCwgMCwge1xyXG4gICAgICBmaWxsOiBsb29rQW5kRmVlbC5uYXZpZ2F0aW9uQmFyRmlsbFByb3BlcnR5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5vcGVuUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlICk7XHJcblxyXG4gICAgdGhpcy5pc1Nob3dpbmdQcm9wZXJ0eSA9IERlcml2ZWRQcm9wZXJ0eS5hbmQoIFtcclxuICAgICAgdGhpcy5pc0VuYWJsZWRQcm9wZXJ0eSxcclxuICAgICAgdm9pY2luZ01hbmFnZXIuZW5hYmxlZFByb3BlcnR5LFxyXG4gICAgICBhdWRpb01hbmFnZXIuYXVkaW9FbmFibGVkUHJvcGVydHkgXSApO1xyXG5cclxuICAgIGNvbnN0IHZvaWNpbmdBbGVydE1hbmFnZXIgPSBuZXcgVm9pY2luZ1Rvb2xiYXJBbGVydE1hbmFnZXIoIHNlbGVjdGVkU2NyZWVuUHJvcGVydHkgKTtcclxuICAgIHRoaXMubWVudUNvbnRlbnQgPSBuZXcgVm9pY2luZ1Rvb2xiYXJJdGVtKCB2b2ljaW5nQWxlcnRNYW5hZ2VyLCBsb29rQW5kRmVlbCwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21lbnVDb250ZW50JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gaWNvbiBmb3IgdGhlIG9wZW5CdXR0b25cclxuICAgIGNvbnN0IGNoZXZyb25JY29uID0gbmV3IERvdWJsZUNoZXZyb24oKTtcclxuXHJcbiAgICB0aGlzLm9wZW5CdXR0b24gPSBuZXcgUm91bmRQdXNoQnV0dG9uKCB7XHJcbiAgICAgIGNvbnRlbnQ6IGNoZXZyb25JY29uLFxyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4gdGhpcy5vcGVuUHJvcGVydHkudG9nZ2xlKCksXHJcbiAgICAgIGJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneTogQnV0dG9uTm9kZS5GbGF0QXBwZWFyYW5jZVN0cmF0ZWd5LFxyXG4gICAgICBiYXNlQ29sb3I6ICdsaWdodGdyZXknLFxyXG5cclxuICAgICAgLy8gcGhldC1pbyAtIG9wdGluZyBvdXQgb2YgVGFuZGVtcyBmb3Igbm93XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmNvbnRlbnRXaWR0aCA9IHRoaXMubWVudUNvbnRlbnQubG9jYWxCb3VuZHMud2lkdGg7XHJcblxyXG4gICAgdGhpcy5jb250ZW50TWFyZ2luID0gdGhpcy5vcGVuQnV0dG9uLmxvY2FsQm91bmRzLndpZHRoO1xyXG5cclxuICAgIC8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgcmlnaHQgZWRnZSBvZiB0aGUgYmFja2dyb3VuZFJlY3RhbmdsZSBpbiBsb2NhbCBjb29yZGluYXRlcy5cclxuICAgIC8vIFRoaXMgaXMgd2hhdCBjb250cm9scyB0aGUgcG9zaXRpb24gb2YgdGhlIFRvb2xiYXIgYXMgaXQgaXMgb3Blbi9jbG9zZWQvcmVtb3ZlZC9hbmltYXRpbmcuXHJcbiAgICB0aGlzLnJpZ2h0UG9zaXRpb25Qcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggdGhpcy5nZXRIaWRkZW5Qb3NpdGlvbigpICk7XHJcblxyXG4gICAgLy8gVGhlIHRhcmdldCBwb3NpdGlvbiBmb3IgdGhlIHJpZ2h0UG9zaXRpb25Qcm9wZXJ0eSwgdG8gc3VwcG9ydCBhbmltYXRpb24uIEluIHN0ZXAsXHJcbiAgICAvLyB0aGUgcmlnaHRQb3NpdGlvblByb3BlcnR5IHdpbGwgYmUgY2hhbmdlZCB1bnRpbCB0aGUgcmlnaHRQb3NpdGlvblByb3BlcnR5IGVxdWFscyB0aGUgcmlnaHREZXN0aW5hdGlvblBvc2l0aW9uLlxyXG4gICAgdGhpcy5yaWdodERlc3RpbmF0aW9uUG9zaXRpb24gPSAwO1xyXG5cclxuICAgIC8vIGEgcGFyZW50IGZvciBhbGwgTm9kZXMgb2YgdGhlIHRvb2xiYXIsIHNvIHdlIGNhbiBzZXQgdmlzaWJpbGl0eSBvZiB0aGlzIGdyb3VwIGludGVybmFsbHkgd2hlblxyXG4gICAgLy8gdGhlIGlzU2hvd2luZ1Byb3BlcnR5IGNoYW5nZXNcclxuICAgIGNvbnN0IGNvbnRlbnRQYXJlbnQgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyB0aGlzLmJhY2tncm91bmRSZWN0YW5nbGUsIHRoaXMubWVudUNvbnRlbnQsIHRoaXMub3BlbkJ1dHRvbiBdXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBjb250ZW50UGFyZW50ICk7XHJcblxyXG4gICAgLy8gbW92ZSB0byBkZXN0aW5hdGlvbiBwb3NpdGlvbiBpbiB0aGUgYW5pbWF0aW9uIGZyYW1lXHJcbiAgICBjb25zdCB0aW1lckxpc3RlbmVyID0gKCBkdDogbnVtYmVyICkgPT4ge1xyXG4gICAgICB0aGlzLnN0ZXAoIGR0ICk7XHJcbiAgICB9O1xyXG4gICAgc3RlcFRpbWVyLmFkZExpc3RlbmVyKCB0aW1lckxpc3RlbmVyICk7XHJcblxyXG4gICAgY29uc3QgaXNPcGVuTGlzdGVuZXIgPSAoIG9wZW46IGJvb2xlYW4sIG9sZFZhbHVlOiBib29sZWFuIHwgbnVsbCApID0+IHtcclxuXHJcbiAgICAgIC8vIHJvdGF0ZSBjaGV2cm9uIHRvIGluZGljYXRlIGRpcmVjdGlvbiBvZiB0b29sYmFyIG1vdmVtZW50XHJcbiAgICAgIGNoZXZyb25JY29uLm1hdHJpeCA9IG9wZW4gPyBNYXRyaXgzLnNjYWxpbmcoIC0xLCAxICkgOiBNYXRyaXgzLklERU5USVRZO1xyXG5cclxuICAgICAgLy8gd2hlbiBjbG9zZWQsIG1lbnUgY29udGVudCBzaG91bGQgYmUgaGlkZGVuIGZyb20gc2NyZWVuIHJlYWRlcnMgYW5kIHRoZSBuYXZpZ2F0aW9uIG9yZGVyXHJcbiAgICAgIHRoaXMubWVudUNvbnRlbnQucGRvbVZpc2libGUgPSBvcGVuO1xyXG5cclxuICAgICAgdGhpcy5vcGVuQnV0dG9uLmlubmVyQ29udGVudCA9IG9wZW4gPyBjbG9zZVRvb2xiYXJTdHJpbmdQcm9wZXJ0eSA6IG9wZW5Ub29sYmFyU3RyaW5nUHJvcGVydHk7XHJcbiAgICAgIHRoaXMub3BlbkJ1dHRvbi52b2ljaW5nTmFtZVJlc3BvbnNlID0gb3BlbiA/IGhpZGVUb29sYmFyU3RyaW5nUHJvcGVydHkgOiBzaG93VG9vbGJhclN0cmluZ1Byb3BlcnR5O1xyXG5cclxuICAgICAgdGhpcy51cGRhdGVEZXN0aW5hdGlvblBvc2l0aW9uKCk7XHJcblxyXG4gICAgICBpZiAoIG9sZFZhbHVlICE9PSBudWxsICkge1xyXG4gICAgICAgIGNvbnN0IGFsZXJ0UHJvcGVydHkgPSBvcGVuID8gdG9vbGJhclNob3duU3RyaW5nUHJvcGVydHkgOiB0b29sYmFySGlkZGVuU3RyaW5nUHJvcGVydHk7XHJcbiAgICAgICAgdGhpcy5vcGVuQnV0dG9uLnZvaWNpbmdTcGVha0NvbnRleHRSZXNwb25zZSgge1xyXG4gICAgICAgICAgY29udGV4dFJlc3BvbnNlOiBhbGVydFByb3BlcnR5XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICB0aGlzLmFsZXJ0RGVzY3JpcHRpb25VdHRlcmFuY2UoIGFsZXJ0UHJvcGVydHkgKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMub3BlblByb3BlcnR5LmxpbmsoIGlzT3Blbkxpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gd2hlbiBzaG93biBvciBoaWRkZW4gdXBkYXRlIGRlc3RpbmF0aW9uIHBvc2l0aW9ucyBzbyBpdCBhbmltYXRlcyBvcGVuIG9yIGNsb3NlXHJcbiAgICBjb25zdCBpc1Nob3dpbmdMaXN0ZW5lciA9ICggc2hvd2luZzogYm9vbGVhbiApID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVEZXN0aW5hdGlvblBvc2l0aW9uKCk7XHJcblxyXG4gICAgICAvLyB3aGVuIG5vdyBzaG93aW5nLCB0aGlzIGVudGlyZSB0b29sYmFyIHNob3VsZCBiZSBoaWRkZW4gZm9yIEludGVyYWN0aXZlIERlc2NyaXB0aW9uLCBidXQgd2UgZG9uJ3QgdXNlXHJcbiAgICAgIC8vIHZpc2liaWxpdHkgZGlyZWN0bHkgYmVjYXVzZSB3ZSB3YW50IHRvIHNlZSB0aGUgVG9vbGJhciBhbmltYXRlIGF3YXlcclxuICAgICAgY29udGVudFBhcmVudC5wZG9tVmlzaWJsZSA9IHNob3dpbmc7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5pc1Nob3dpbmdQcm9wZXJ0eS5saW5rKCBpc1Nob3dpbmdMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZVRvb2xiYXIgPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMuaXNTaG93aW5nUHJvcGVydHkudW5saW5rKCBpc1Nob3dpbmdMaXN0ZW5lciApO1xyXG4gICAgICB0aGlzLm9wZW5Qcm9wZXJ0eS51bmxpbmsoIGlzT3Blbkxpc3RlbmVyICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgd2lkdGggb2YgdGhlIFRvb2xiYXIgdGhhdCBjYW4gYmUgc2VlbiBvbiBzY3JlZW4uIFRoaXMgY2FuIGJlIGFueSB2YWx1ZSBmcm9tIHRoZSBmdWxsIHdpZHRoIG9mIHRoZVxyXG4gICAqIFRvb2xiYXIgdG8gemVybyB3aWR0aCwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgaXQgaXMgb3BlbiwgY2xvc2VkLCByZW1vdmVkIGVudGlyZWx5LCBvciBhbmltYXRpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIGdldERpc3BsYXllZFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5yaWdodFBvc2l0aW9uUHJvcGVydHkudmFsdWUgKiB0aGlzLmxheW91dFNjYWxlICsgdGhpcy5vcGVuQnV0dG9uLndpZHRoIC8gMjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0SGlkZGVuUG9zaXRpb24oKTogbnVtYmVyIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHR5cGVvZiB0aGlzLmNvbnRlbnRNYXJnaW4gPT09ICdudW1iZXInICk7XHJcbiAgICByZXR1cm4gLXRoaXMuY29udGVudE1hcmdpbiAvIDI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgcmlnaHREZXN0aW5hdGlvblBvc2l0aW9uIHNvIHRoYXQgdGhlIFRvb2xiYXIgd2lsbCBhbmltYXRlIHRvd2FyZHMgb3BlbmluZywgY2xvc2luZywgb3IgYmVpbmcgcmVtb3ZlZFxyXG4gICAqIGVudGlyZWx5IGZyb20gdmlldy5cclxuICAgKi9cclxuICBwcml2YXRlIHVwZGF0ZURlc3RpbmF0aW9uUG9zaXRpb24oKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMuaXNTaG93aW5nUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgIC8vIHRoZSBUb29sYmFyIGlzIGVuYWJsZWQgYW5kIHNob3VsZCBlaXRoZXIgc2hvdyBhbGwgY29udGVudCBvciBqdXN0IHRoZSBvcGVuQnV0dG9uXHJcbiAgICAgIHRoaXMucmlnaHREZXN0aW5hdGlvblBvc2l0aW9uID0gdGhpcy5vcGVuUHJvcGVydHkudmFsdWUgPyB0aGlzLmNvbnRlbnRXaWR0aCArIHRoaXMuY29udGVudE1hcmdpbiAqIDIgOiB0aGlzLmNvbnRlbnRNYXJnaW47XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gbm8gYXNwZWN0IG9mIHRoZSBtZW51IHNob3VsZCBiZSB2aXNpYmxlXHJcbiAgICAgIHRoaXMucmlnaHREZXN0aW5hdGlvblBvc2l0aW9uID0gdGhpcy5nZXRIaWRkZW5Qb3NpdGlvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQW5pbWF0ZWQgdGhlIFRvb2xiYXIgYXMgaXQgb3BlbnMgYW5kIGNsb3Nlcy5cclxuICAgKi9cclxuICBwcml2YXRlIHN0ZXAoIGR0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguYWJzKCB0aGlzLnJpZ2h0UG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSAtIHRoaXMucmlnaHREZXN0aW5hdGlvblBvc2l0aW9uICk7XHJcbiAgICBpZiAoIGRpc3RhbmNlICE9PSAwICkge1xyXG4gICAgICBjb25zdCBhbmltYXRpb25EaXN0YW5jZSA9IE1hdGgubWluKCBkaXN0YW5jZSwgTUFYX0FOSU1BVElPTl9TUEVFRCAqIGR0ICk7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IHRoaXMucmlnaHRQb3NpdGlvblByb3BlcnR5LnZhbHVlO1xyXG4gICAgICB0aGlzLnJpZ2h0UG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSA9IHRoaXMucmlnaHREZXN0aW5hdGlvblBvc2l0aW9uID4gY3VycmVudFBvc2l0aW9uID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9zaXRpb24gKyBhbmltYXRpb25EaXN0YW5jZSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvc2l0aW9uIC0gYW5pbWF0aW9uRGlzdGFuY2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMYXlvdXQgZm9yIHRoZSBUb29sYmFyLCBjYWxsZWQgd2hlbmV2ZXIgcG9zaXRpb24gY2hhbmdlcyBvciB3aW5kb3cgaXMgcmVzaXplZC5cclxuICAgKi9cclxuICBwdWJsaWMgbGF5b3V0KCBzY2FsZTogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciApOiB2b2lkIHtcclxuICAgIHRoaXMubGF5b3V0U2NhbGUgPSBzY2FsZTtcclxuICAgIHRoaXMubWVudUNvbnRlbnQuc2V0U2NhbGVNYWduaXR1ZGUoIHNjYWxlICk7XHJcbiAgICB0aGlzLm9wZW5CdXR0b24uc2V0U2NhbGVNYWduaXR1ZGUoIHNjYWxlICk7XHJcbiAgICB0aGlzLmJhY2tncm91bmRSZWN0YW5nbGUucmVjdFdpZHRoID0gc2NhbGUgKiAoIHRoaXMuY29udGVudFdpZHRoICsgdGhpcy5jb250ZW50TWFyZ2luICogMiApO1xyXG4gICAgdGhpcy5iYWNrZ3JvdW5kUmVjdGFuZ2xlLnJlY3RIZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB0aGlzLmJhY2tncm91bmRSZWN0YW5nbGUucmlnaHQgPSB0aGlzLnJpZ2h0UG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSAqIHNjYWxlO1xyXG4gICAgdGhpcy5vcGVuQnV0dG9uLmNlbnRlciA9IHRoaXMuYmFja2dyb3VuZFJlY3RhbmdsZS5yaWdodENlbnRlcjtcclxuICAgIHRoaXMubWVudUNvbnRlbnQuY2VudGVyVG9wID0gdGhpcy5iYWNrZ3JvdW5kUmVjdGFuZ2xlLmNlbnRlclRvcC5wbHVzWFkoIDAsIENPTlRFTlRfVE9QX01BUkdJTiApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VUb29sYmFyKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVGhlIGljb24gZm9yIHRoZSBidXR0b24gdGhhdCBvcGVucyBhbmQgY2xvc2VzIHRoZSBUb29sYmFyLlxyXG4gKi9cclxuY2xhc3MgRG91YmxlQ2hldnJvbiBleHRlbmRzIFBhdGgge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAvLyBzcGFjaW5nIGFuZCBkaW1lbnNpb25zIGZvciB0aGUgYXJyb3dzXHJcbiAgICBjb25zdCBjaGV2cm9uU3BhY2luZyA9IDg7XHJcbiAgICBjb25zdCBjaGV2cm9uV2lkdGggPSA1O1xyXG4gICAgY29uc3QgY2hldnJvbkhlaWdodCA9IDEyO1xyXG5cclxuICAgIGNvbnN0IGNoZXZyb25TaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgMjsgaSsrICkge1xyXG4gICAgICBjb25zdCBsZWZ0ID0gaSAqIGNoZXZyb25TcGFjaW5nO1xyXG4gICAgICBjaGV2cm9uU2hhcGUubW92ZVRvKCBsZWZ0LCAwICk7XHJcbiAgICAgIGNoZXZyb25TaGFwZS5saW5lVG8oIGxlZnQgKyBjaGV2cm9uV2lkdGgsIGNoZXZyb25IZWlnaHQgLyAyICk7XHJcbiAgICAgIGNoZXZyb25TaGFwZS5saW5lVG8oIGxlZnQsIGNoZXZyb25IZWlnaHQgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlciggY2hldnJvblNoYXBlLCB7XHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgbGluZVdpZHRoOiAzLjUsXHJcbiAgICAgIGxpbmVDYXA6ICdyb3VuZCdcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnVG9vbGJhcicsIFRvb2xiYXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgVG9vbGJhcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHFDQUFxQztBQUNqRSxPQUFPQyxlQUFlLE1BQU0scUNBQXFDO0FBR2pFLE9BQU9DLGNBQWMsTUFBTSxvQ0FBb0M7QUFDL0QsT0FBT0MsU0FBUyxNQUFNLCtCQUErQjtBQUNy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