// Copyright 2013-2022, University of Colorado Boulder

/**
 * Decorative frame around the selected node
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Bounds2 from '../../dot/js/Bounds2.js';
import optionize from '../../phet-core/js/optionize.js';
import { LinearGradient, Node, Rectangle } from '../../scenery/js/imports.js';
import joist from './joist.js';
class Frame extends Node {
  constructor(content, providedOptions) {
    // default options
    const options = optionize()({
      xMargin1: 6,
      yMargin1: 6,
      cornerRadius: 0
    }, providedOptions);
    super();
    const frameWidth = content.width + 2 * options.xMargin1;
    const frameHeight = content.height + 2 * options.yMargin1;
    this.gradient = new LinearGradient(0, 0, frameWidth, 0).addColorStop(0, '#fbff41').addColorStop(118 / 800.0, '#fef98b').addColorStop(372 / 800.0, '#feff40').addColorStop(616 / 800, '#fffccd').addColorStop(1, '#fbff41');
    const rectangle = new Rectangle(0, 0, frameWidth, frameHeight, options.cornerRadius, options.cornerRadius, {
      stroke: this.gradient,
      lineWidth: 3,
      x: content.x - options.xMargin1,
      y: content.y - options.yMargin1
    });
    this.addChild(rectangle);

    // Apply options after the layout is done, so that options that use the bounds will work properly.
    this.mutate(options);

    // highlight rectangle is always in the scene graph to make sure the node is positioned properly
    // but only visible when highlighted
    const frameBounds = Bounds2.rect(rectangle.x, rectangle.y, frameWidth, frameHeight);
    this.highlightRectangle = Rectangle.bounds(frameBounds.dilated(0.75), {
      stroke: 'transparent',
      lineWidth: 4.5
    });
    this.addChild(this.highlightRectangle);
  }
  setHighlighted(highlighted) {
    this.highlightRectangle.stroke = highlighted ? this.gradient : 'transparent';
  }
}
joist.register('Frame', Frame);
export default Frame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwib3B0aW9uaXplIiwiTGluZWFyR3JhZGllbnQiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiam9pc3QiLCJGcmFtZSIsImNvbnN0cnVjdG9yIiwiY29udGVudCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ4TWFyZ2luMSIsInlNYXJnaW4xIiwiY29ybmVyUmFkaXVzIiwiZnJhbWVXaWR0aCIsIndpZHRoIiwiZnJhbWVIZWlnaHQiLCJoZWlnaHQiLCJncmFkaWVudCIsImFkZENvbG9yU3RvcCIsInJlY3RhbmdsZSIsInN0cm9rZSIsImxpbmVXaWR0aCIsIngiLCJ5IiwiYWRkQ2hpbGQiLCJtdXRhdGUiLCJmcmFtZUJvdW5kcyIsInJlY3QiLCJoaWdobGlnaHRSZWN0YW5nbGUiLCJib3VuZHMiLCJkaWxhdGVkIiwic2V0SGlnaGxpZ2h0ZWQiLCJoaWdobGlnaHRlZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRnJhbWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVjb3JhdGl2ZSBmcmFtZSBhcm91bmQgdGhlIHNlbGVjdGVkIG5vZGVcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IExpbmVhckdyYWRpZW50LCBOb2RlLCBSZWN0YW5nbGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4vam9pc3QuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB4TWFyZ2luMT86IG51bWJlcjtcclxuICB5TWFyZ2luMT86IG51bWJlcjtcclxuICBjb3JuZXJSYWRpdXM/OiBudW1iZXI7IC8vIHJhZGl1cyBvZiB0aGUgcm91bmRlZCBjb3JuZXJzIG9uIHRoZSBiYWNrZ3JvdW5kXHJcbn07XHJcbmV4cG9ydCB0eXBlIEZyYW1lT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZU9wdGlvbnM7XHJcblxyXG5jbGFzcyBGcmFtZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGdyYWRpZW50OiBMaW5lYXJHcmFkaWVudDtcclxuICBwcml2YXRlIHJlYWRvbmx5IGhpZ2hsaWdodFJlY3RhbmdsZTogUmVjdGFuZ2xlO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvbnRlbnQ6IE5vZGUsIHByb3ZpZGVkT3B0aW9ucz86IEZyYW1lT3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RnJhbWVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgeE1hcmdpbjE6IDYsXHJcbiAgICAgIHlNYXJnaW4xOiA2LFxyXG4gICAgICBjb3JuZXJSYWRpdXM6IDBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgY29uc3QgZnJhbWVXaWR0aCA9IGNvbnRlbnQud2lkdGggKyAyICogb3B0aW9ucy54TWFyZ2luMTtcclxuICAgIGNvbnN0IGZyYW1lSGVpZ2h0ID0gY29udGVudC5oZWlnaHQgKyAyICogb3B0aW9ucy55TWFyZ2luMTtcclxuXHJcbiAgICB0aGlzLmdyYWRpZW50ID0gbmV3IExpbmVhckdyYWRpZW50KCAwLCAwLCBmcmFtZVdpZHRoLCAwIClcclxuICAgICAgLmFkZENvbG9yU3RvcCggMCwgJyNmYmZmNDEnIClcclxuICAgICAgLmFkZENvbG9yU3RvcCggMTE4IC8gODAwLjAsICcjZmVmOThiJyApXHJcbiAgICAgIC5hZGRDb2xvclN0b3AoIDM3MiAvIDgwMC4wLCAnI2ZlZmY0MCcgKVxyXG4gICAgICAuYWRkQ29sb3JTdG9wKCA2MTYgLyA4MDAsICcjZmZmY2NkJyApXHJcbiAgICAgIC5hZGRDb2xvclN0b3AoIDEsICcjZmJmZjQxJyApO1xyXG5cclxuICAgIGNvbnN0IHJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIGZyYW1lV2lkdGgsIGZyYW1lSGVpZ2h0LCBvcHRpb25zLmNvcm5lclJhZGl1cywgb3B0aW9ucy5jb3JuZXJSYWRpdXMsIHtcclxuICAgICAgc3Ryb2tlOiB0aGlzLmdyYWRpZW50LFxyXG4gICAgICBsaW5lV2lkdGg6IDMsXHJcbiAgICAgIHg6IGNvbnRlbnQueCAtIG9wdGlvbnMueE1hcmdpbjEsXHJcbiAgICAgIHk6IGNvbnRlbnQueSAtIG9wdGlvbnMueU1hcmdpbjFcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHJlY3RhbmdsZSApO1xyXG5cclxuICAgIC8vIEFwcGx5IG9wdGlvbnMgYWZ0ZXIgdGhlIGxheW91dCBpcyBkb25lLCBzbyB0aGF0IG9wdGlvbnMgdGhhdCB1c2UgdGhlIGJvdW5kcyB3aWxsIHdvcmsgcHJvcGVybHkuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGhpZ2hsaWdodCByZWN0YW5nbGUgaXMgYWx3YXlzIGluIHRoZSBzY2VuZSBncmFwaCB0byBtYWtlIHN1cmUgdGhlIG5vZGUgaXMgcG9zaXRpb25lZCBwcm9wZXJseVxyXG4gICAgLy8gYnV0IG9ubHkgdmlzaWJsZSB3aGVuIGhpZ2hsaWdodGVkXHJcbiAgICBjb25zdCBmcmFtZUJvdW5kcyA9IEJvdW5kczIucmVjdCggcmVjdGFuZ2xlLngsIHJlY3RhbmdsZS55LCBmcmFtZVdpZHRoLCBmcmFtZUhlaWdodCApO1xyXG4gICAgdGhpcy5oaWdobGlnaHRSZWN0YW5nbGUgPSBSZWN0YW5nbGUuYm91bmRzKCBmcmFtZUJvdW5kcy5kaWxhdGVkKCAwLjc1ICksIHtcclxuICAgICAgc3Ryb2tlOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICBsaW5lV2lkdGg6IDQuNVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5oaWdobGlnaHRSZWN0YW5nbGUgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRIaWdobGlnaHRlZCggaGlnaGxpZ2h0ZWQ6IGJvb2xlYW4gKTogdm9pZCB7XHJcbiAgICB0aGlzLmhpZ2hsaWdodFJlY3RhbmdsZS5zdHJva2UgPSBoaWdobGlnaHRlZCA/IHRoaXMuZ3JhZGllbnQgOiAndHJhbnNwYXJlbnQnO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdGcmFtZScsIEZyYW1lICk7XHJcbmV4cG9ydCBkZWZhdWx0IEZyYW1lOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0seUJBQXlCO0FBQzdDLE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsU0FBU0MsY0FBYyxFQUFFQyxJQUFJLEVBQUVDLFNBQVMsUUFBcUIsNkJBQTZCO0FBQzFGLE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBUzlCLE1BQU1DLEtBQUssU0FBU0gsSUFBSSxDQUFDO0VBS2hCSSxXQUFXQSxDQUFFQyxPQUFhLEVBQUVDLGVBQThCLEVBQUc7SUFFbEU7SUFDQSxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBeUMsQ0FBQyxDQUFFO01BQ25FVSxRQUFRLEVBQUUsQ0FBQztNQUNYQyxRQUFRLEVBQUUsQ0FBQztNQUNYQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxFQUFFSixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUssVUFBVSxHQUFHTixPQUFPLENBQUNPLEtBQUssR0FBRyxDQUFDLEdBQUdMLE9BQU8sQ0FBQ0MsUUFBUTtJQUN2RCxNQUFNSyxXQUFXLEdBQUdSLE9BQU8sQ0FBQ1MsTUFBTSxHQUFHLENBQUMsR0FBR1AsT0FBTyxDQUFDRSxRQUFRO0lBRXpELElBQUksQ0FBQ00sUUFBUSxHQUFHLElBQUloQixjQUFjLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVksVUFBVSxFQUFFLENBQUUsQ0FBQyxDQUN0REssWUFBWSxDQUFFLENBQUMsRUFBRSxTQUFVLENBQUMsQ0FDNUJBLFlBQVksQ0FBRSxHQUFHLEdBQUcsS0FBSyxFQUFFLFNBQVUsQ0FBQyxDQUN0Q0EsWUFBWSxDQUFFLEdBQUcsR0FBRyxLQUFLLEVBQUUsU0FBVSxDQUFDLENBQ3RDQSxZQUFZLENBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxTQUFVLENBQUMsQ0FDcENBLFlBQVksQ0FBRSxDQUFDLEVBQUUsU0FBVSxDQUFDO0lBRS9CLE1BQU1DLFNBQVMsR0FBRyxJQUFJaEIsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVVLFVBQVUsRUFBRUUsV0FBVyxFQUFFTixPQUFPLENBQUNHLFlBQVksRUFBRUgsT0FBTyxDQUFDRyxZQUFZLEVBQUU7TUFDMUdRLE1BQU0sRUFBRSxJQUFJLENBQUNILFFBQVE7TUFDckJJLFNBQVMsRUFBRSxDQUFDO01BQ1pDLENBQUMsRUFBRWYsT0FBTyxDQUFDZSxDQUFDLEdBQUdiLE9BQU8sQ0FBQ0MsUUFBUTtNQUMvQmEsQ0FBQyxFQUFFaEIsT0FBTyxDQUFDZ0IsQ0FBQyxHQUFHZCxPQUFPLENBQUNFO0lBQ3pCLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ2EsUUFBUSxDQUFFTCxTQUFVLENBQUM7O0lBRTFCO0lBQ0EsSUFBSSxDQUFDTSxNQUFNLENBQUVoQixPQUFRLENBQUM7O0lBRXRCO0lBQ0E7SUFDQSxNQUFNaUIsV0FBVyxHQUFHM0IsT0FBTyxDQUFDNEIsSUFBSSxDQUFFUixTQUFTLENBQUNHLENBQUMsRUFBRUgsU0FBUyxDQUFDSSxDQUFDLEVBQUVWLFVBQVUsRUFBRUUsV0FBWSxDQUFDO0lBQ3JGLElBQUksQ0FBQ2Esa0JBQWtCLEdBQUd6QixTQUFTLENBQUMwQixNQUFNLENBQUVILFdBQVcsQ0FBQ0ksT0FBTyxDQUFFLElBQUssQ0FBQyxFQUFFO01BQ3ZFVixNQUFNLEVBQUUsYUFBYTtNQUNyQkMsU0FBUyxFQUFFO0lBQ2IsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDRyxRQUFRLENBQUUsSUFBSSxDQUFDSSxrQkFBbUIsQ0FBQztFQUMxQztFQUVPRyxjQUFjQSxDQUFFQyxXQUFvQixFQUFTO0lBQ2xELElBQUksQ0FBQ0osa0JBQWtCLENBQUNSLE1BQU0sR0FBR1ksV0FBVyxHQUFHLElBQUksQ0FBQ2YsUUFBUSxHQUFHLGFBQWE7RUFDOUU7QUFDRjtBQUVBYixLQUFLLENBQUM2QixRQUFRLENBQUUsT0FBTyxFQUFFNUIsS0FBTSxDQUFDO0FBQ2hDLGVBQWVBLEtBQUsifQ==