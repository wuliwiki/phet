// Copyright 2014-2021, University of Colorado Boulder

/**
 * Type that defines a data point.
 *
 * @author John Blanco
 * @author Martin Veillette (Berea College)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Emitter from '../../../../axon/js/Emitter.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import leastSquaresRegression from '../../leastSquaresRegression.js';
import LeastSquaresRegressionConstants from '../LeastSquaresRegressionConstants.js';
class DataPoint {
  /**
   * @param {Vector2} initialPosition
   */
  constructor(initialPosition) {
    // @public - indicates where in model space the center of this data point is.
    this.positionProperty = new Vector2Property(initialPosition);

    // @public {Property.<boolean>}
    // Flag that tracks whether the user is dragging this data point around. Should be set externally, generally by a
    // view node.
    this.userControlledProperty = new BooleanProperty(false);

    // @public read-only {Property.<boolean>}
    // Flag that indicates whether this element is animating from one position to the bucket.
    this.animatingProperty = new BooleanProperty(false);

    // @public
    this.returnedToOriginEmitter = new Emitter();
  }

  /**
   *  resets all the properties of DataPoint
   *  @public
   */
  reset() {
    this.positionProperty.reset();
    this.userControlledProperty.reset();
    this.animatingProperty.reset();
  }

  /**
   * Function that animates dataPoint back to the bucket.
   * @public
   */
  animate() {
    this.animatingProperty.set(true);
    const position = {
      x: this.positionProperty.value.x,
      y: this.positionProperty.value.y
    };

    // distance from the dataPoint current position to its initial position (in the bucket)
    const distance = this.positionProperty.initialValue.distance(this.positionProperty.value);
    if (distance > 0) {
      const animationTween = new TWEEN.Tween(position).to({
        x: this.positionProperty.initialValue.x,
        y: this.positionProperty.initialValue.y
      }, distance / LeastSquaresRegressionConstants.ANIMATION_SPEED).easing(TWEEN.Easing.Cubic.In).onUpdate(() => {
        this.positionProperty.set(new Vector2(position.x, position.y));
      }).onComplete(() => {
        this.animatingProperty.set(false);
        this.returnedToOriginEmitter.emit();
      });
      animationTween.start(phet.joist.elapsedTime);
    } else {
      // returned dataPoint to bucket when the distance is zero
      // no need for animation
      // see https://github.com/phetsims/least-squares-regression/issues/69
      this.animatingProperty.set(false);
      this.returnedToOriginEmitter.emit();
    }
  }
}
leastSquaresRegression.register('DataPoint', DataPoint);
export default DataPoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbWl0dGVyIiwiVmVjdG9yMiIsIlZlY3RvcjJQcm9wZXJ0eSIsImxlYXN0U3F1YXJlc1JlZ3Jlc3Npb24iLCJMZWFzdFNxdWFyZXNSZWdyZXNzaW9uQ29uc3RhbnRzIiwiRGF0YVBvaW50IiwiY29uc3RydWN0b3IiLCJpbml0aWFsUG9zaXRpb24iLCJwb3NpdGlvblByb3BlcnR5IiwidXNlckNvbnRyb2xsZWRQcm9wZXJ0eSIsImFuaW1hdGluZ1Byb3BlcnR5IiwicmV0dXJuZWRUb09yaWdpbkVtaXR0ZXIiLCJyZXNldCIsImFuaW1hdGUiLCJzZXQiLCJwb3NpdGlvbiIsIngiLCJ2YWx1ZSIsInkiLCJkaXN0YW5jZSIsImluaXRpYWxWYWx1ZSIsImFuaW1hdGlvblR3ZWVuIiwiVFdFRU4iLCJUd2VlbiIsInRvIiwiQU5JTUFUSU9OX1NQRUVEIiwiZWFzaW5nIiwiRWFzaW5nIiwiQ3ViaWMiLCJJbiIsIm9uVXBkYXRlIiwib25Db21wbGV0ZSIsImVtaXQiLCJzdGFydCIsInBoZXQiLCJqb2lzdCIsImVsYXBzZWRUaW1lIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEYXRhUG9pbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IGRlZmluZXMgYSBkYXRhIHBvaW50LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZSAoQmVyZWEgQ29sbGVnZSlcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbWl0dGVyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMlByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbGVhc3RTcXVhcmVzUmVncmVzc2lvbiBmcm9tICcuLi8uLi9sZWFzdFNxdWFyZXNSZWdyZXNzaW9uLmpzJztcclxuaW1wb3J0IExlYXN0U3F1YXJlc1JlZ3Jlc3Npb25Db25zdGFudHMgZnJvbSAnLi4vTGVhc3RTcXVhcmVzUmVncmVzc2lvbkNvbnN0YW50cy5qcyc7XHJcblxyXG5jbGFzcyBEYXRhUG9pbnQge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gaW5pdGlhbFBvc2l0aW9uXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGluaXRpYWxQb3NpdGlvbiApIHtcclxuXHJcbiAgICAvLyBAcHVibGljIC0gaW5kaWNhdGVzIHdoZXJlIGluIG1vZGVsIHNwYWNlIHRoZSBjZW50ZXIgb2YgdGhpcyBkYXRhIHBvaW50IGlzLlxyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggaW5pdGlhbFBvc2l0aW9uICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPGJvb2xlYW4+fVxyXG4gICAgLy8gRmxhZyB0aGF0IHRyYWNrcyB3aGV0aGVyIHRoZSB1c2VyIGlzIGRyYWdnaW5nIHRoaXMgZGF0YSBwb2ludCBhcm91bmQuIFNob3VsZCBiZSBzZXQgZXh0ZXJuYWxseSwgZ2VuZXJhbGx5IGJ5IGFcclxuICAgIC8vIHZpZXcgbm9kZS5cclxuICAgIHRoaXMudXNlckNvbnRyb2xsZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyByZWFkLW9ubHkge1Byb3BlcnR5Ljxib29sZWFuPn1cclxuICAgIC8vIEZsYWcgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGVsZW1lbnQgaXMgYW5pbWF0aW5nIGZyb20gb25lIHBvc2l0aW9uIHRvIHRoZSBidWNrZXQuXHJcbiAgICB0aGlzLmFuaW1hdGluZ1Byb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKTtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLnJldHVybmVkVG9PcmlnaW5FbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICByZXNldHMgYWxsIHRoZSBwcm9wZXJ0aWVzIG9mIERhdGFQb2ludFxyXG4gICAqICBAcHVibGljXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMudXNlckNvbnRyb2xsZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5hbmltYXRpbmdQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdGhhdCBhbmltYXRlcyBkYXRhUG9pbnQgYmFjayB0byB0aGUgYnVja2V0LlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBhbmltYXRlKCkge1xyXG4gICAgdGhpcy5hbmltYXRpbmdQcm9wZXJ0eS5zZXQoIHRydWUgKTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IHtcclxuICAgICAgeDogdGhpcy5wb3NpdGlvblByb3BlcnR5LnZhbHVlLngsXHJcbiAgICAgIHk6IHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS55XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGRpc3RhbmNlIGZyb20gdGhlIGRhdGFQb2ludCBjdXJyZW50IHBvc2l0aW9uIHRvIGl0cyBpbml0aWFsIHBvc2l0aW9uIChpbiB0aGUgYnVja2V0KVxyXG4gICAgY29uc3QgZGlzdGFuY2UgPSB0aGlzLnBvc2l0aW9uUHJvcGVydHkuaW5pdGlhbFZhbHVlLmRpc3RhbmNlKCB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgKTtcclxuXHJcbiAgICBpZiAoIGRpc3RhbmNlID4gMCApIHtcclxuICAgICAgY29uc3QgYW5pbWF0aW9uVHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4oIHBvc2l0aW9uICkudG8oIHtcclxuICAgICAgICB4OiB0aGlzLnBvc2l0aW9uUHJvcGVydHkuaW5pdGlhbFZhbHVlLngsXHJcbiAgICAgICAgeTogdGhpcy5wb3NpdGlvblByb3BlcnR5LmluaXRpYWxWYWx1ZS55XHJcbiAgICAgIH0sIGRpc3RhbmNlIC8gTGVhc3RTcXVhcmVzUmVncmVzc2lvbkNvbnN0YW50cy5BTklNQVRJT05fU1BFRUQgKS5lYXNpbmcoIFRXRUVOLkVhc2luZy5DdWJpYy5JbiApLm9uVXBkYXRlKCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnNldCggbmV3IFZlY3RvcjIoIHBvc2l0aW9uLngsIHBvc2l0aW9uLnkgKSApO1xyXG4gICAgICB9ICkub25Db21wbGV0ZSggKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW5nUHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG4gICAgICAgIHRoaXMucmV0dXJuZWRUb09yaWdpbkVtaXR0ZXIuZW1pdCgpO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICBhbmltYXRpb25Ud2Vlbi5zdGFydCggcGhldC5qb2lzdC5lbGFwc2VkVGltZSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8vIHJldHVybmVkIGRhdGFQb2ludCB0byBidWNrZXQgd2hlbiB0aGUgZGlzdGFuY2UgaXMgemVyb1xyXG4gICAgICAvLyBubyBuZWVkIGZvciBhbmltYXRpb25cclxuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9sZWFzdC1zcXVhcmVzLXJlZ3Jlc3Npb24vaXNzdWVzLzY5XHJcbiAgICAgIHRoaXMuYW5pbWF0aW5nUHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG4gICAgICB0aGlzLnJldHVybmVkVG9PcmlnaW5FbWl0dGVyLmVtaXQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmxlYXN0U3F1YXJlc1JlZ3Jlc3Npb24ucmVnaXN0ZXIoICdEYXRhUG9pbnQnLCBEYXRhUG9pbnQgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERhdGFQb2ludDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxPQUFPLE1BQU0sZ0NBQWdDO0FBQ3BELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsZUFBZSxNQUFNLHVDQUF1QztBQUNuRSxPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFDcEUsT0FBT0MsK0JBQStCLE1BQU0sdUNBQXVDO0FBRW5GLE1BQU1DLFNBQVMsQ0FBQztFQUNkO0FBQ0Y7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxlQUFlLEVBQUc7SUFFN0I7SUFDQSxJQUFJLENBQUNDLGdCQUFnQixHQUFHLElBQUlOLGVBQWUsQ0FBRUssZUFBZ0IsQ0FBQzs7SUFFOUQ7SUFDQTtJQUNBO0lBQ0EsSUFBSSxDQUFDRSxzQkFBc0IsR0FBRyxJQUFJVixlQUFlLENBQUUsS0FBTSxDQUFDOztJQUUxRDtJQUNBO0lBQ0EsSUFBSSxDQUFDVyxpQkFBaUIsR0FBRyxJQUFJWCxlQUFlLENBQUUsS0FBTSxDQUFDOztJQUVyRDtJQUNBLElBQUksQ0FBQ1ksdUJBQXVCLEdBQUcsSUFBSVgsT0FBTyxDQUFDLENBQUM7RUFDOUM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRVksS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxDQUFDSixnQkFBZ0IsQ0FBQ0ksS0FBSyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDSCxzQkFBc0IsQ0FBQ0csS0FBSyxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDRixpQkFBaUIsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7RUFDaEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSSxDQUFDSCxpQkFBaUIsQ0FBQ0ksR0FBRyxDQUFFLElBQUssQ0FBQztJQUVsQyxNQUFNQyxRQUFRLEdBQUc7TUFDZkMsQ0FBQyxFQUFFLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUNTLEtBQUssQ0FBQ0QsQ0FBQztNQUNoQ0UsQ0FBQyxFQUFFLElBQUksQ0FBQ1YsZ0JBQWdCLENBQUNTLEtBQUssQ0FBQ0M7SUFDakMsQ0FBQzs7SUFFRDtJQUNBLE1BQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNYLGdCQUFnQixDQUFDWSxZQUFZLENBQUNELFFBQVEsQ0FBRSxJQUFJLENBQUNYLGdCQUFnQixDQUFDUyxLQUFNLENBQUM7SUFFM0YsSUFBS0UsUUFBUSxHQUFHLENBQUMsRUFBRztNQUNsQixNQUFNRSxjQUFjLEdBQUcsSUFBSUMsS0FBSyxDQUFDQyxLQUFLLENBQUVSLFFBQVMsQ0FBQyxDQUFDUyxFQUFFLENBQUU7UUFDckRSLENBQUMsRUFBRSxJQUFJLENBQUNSLGdCQUFnQixDQUFDWSxZQUFZLENBQUNKLENBQUM7UUFDdkNFLENBQUMsRUFBRSxJQUFJLENBQUNWLGdCQUFnQixDQUFDWSxZQUFZLENBQUNGO01BQ3hDLENBQUMsRUFBRUMsUUFBUSxHQUFHZiwrQkFBK0IsQ0FBQ3FCLGVBQWdCLENBQUMsQ0FBQ0MsTUFBTSxDQUFFSixLQUFLLENBQUNLLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDQyxFQUFHLENBQUMsQ0FBQ0MsUUFBUSxDQUFFLE1BQU07UUFDOUcsSUFBSSxDQUFDdEIsZ0JBQWdCLENBQUNNLEdBQUcsQ0FBRSxJQUFJYixPQUFPLENBQUVjLFFBQVEsQ0FBQ0MsQ0FBQyxFQUFFRCxRQUFRLENBQUNHLENBQUUsQ0FBRSxDQUFDO01BQ3BFLENBQUUsQ0FBQyxDQUFDYSxVQUFVLENBQUUsTUFBTTtRQUNwQixJQUFJLENBQUNyQixpQkFBaUIsQ0FBQ0ksR0FBRyxDQUFFLEtBQU0sQ0FBQztRQUNuQyxJQUFJLENBQUNILHVCQUF1QixDQUFDcUIsSUFBSSxDQUFDLENBQUM7TUFDckMsQ0FBRSxDQUFDO01BRUhYLGNBQWMsQ0FBQ1ksS0FBSyxDQUFFQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsV0FBWSxDQUFDO0lBQ2hELENBQUMsTUFDSTtNQUNIO01BQ0E7TUFDQTtNQUNBLElBQUksQ0FBQzFCLGlCQUFpQixDQUFDSSxHQUFHLENBQUUsS0FBTSxDQUFDO01BQ25DLElBQUksQ0FBQ0gsdUJBQXVCLENBQUNxQixJQUFJLENBQUMsQ0FBQztJQUNyQztFQUNGO0FBQ0Y7QUFFQTdCLHNCQUFzQixDQUFDa0MsUUFBUSxDQUFFLFdBQVcsRUFBRWhDLFNBQVUsQ0FBQztBQUV6RCxlQUFlQSxTQUFTIn0=