// Copyright 2014-2023, University of Colorado Boulder

/**
 * Equation Node that renders a text node of a linear equation of the form y = m x + b where m and b are numerical values
 *
 * @author Martin Veillette (Berea College)
 */

import Utils from '../../../../dot/js/Utils.js';
import merge from '../../../../phet-core/js/merge.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import leastSquaresRegression from '../../leastSquaresRegression.js';
import LeastSquaresRegressionStrings from '../../LeastSquaresRegressionStrings.js';
import LeastSquaresRegressionConstants from '../LeastSquaresRegressionConstants.js';
const symbolXString = LeastSquaresRegressionStrings.symbol.x;
const symbolYString = LeastSquaresRegressionStrings.symbol.y;
class EquationNode extends Node {
  /**
   * Scenery Node responsible for laying out the linear equation y = m x + b
   * @param {Object} [options]
   */
  constructor(options) {
    super();
    options = merge({
      maxDecimalPlaces: 2,
      // maximum of number of decimal places on slope and intercept
      mode: 'myLine',
      // valid options are 'myLine' and 'bestFitLine',
      maxCharacterWidth: 25
    }, options);
    this.options = options;

    // options for the text elements of the equation

    let numericalTextOptions; // font and fill options for numerical strings , i.e.  '- 9.54'
    let stringTextOptions; // font and fill options for 'pure' strings, eg. 'y'

    switch (options.mode) {
      case 'myLine':
        numericalTextOptions = {
          font: LeastSquaresRegressionConstants.TEXT_BOLD_FONT,
          fill: LeastSquaresRegressionConstants.MY_LINE_COLOR.BASE_COLOR,
          maxWidth: options.maxCharacterWidth
        };
        stringTextOptions = {
          font: LeastSquaresRegressionConstants.TEXT_FONT,
          fill: 'black',
          maxWidth: options.maxCharacterWidth
        };
        break;
      case 'bestFitLine':
        numericalTextOptions = {
          font: LeastSquaresRegressionConstants.TEXT_FONT,
          fill: LeastSquaresRegressionConstants.BEST_FIT_LINE_COLOR.BASE_COLOR,
          maxWidth: options.maxCharacterWidth
        };
        stringTextOptions = numericalTextOptions;
        break;
      default:
        throw new Error('Unknown mode for EquationNode: ');
    }

    // use the widest possible numbers for laying out the equation

    let maxWidthSlopeString = '0.';
    for (let i = 0; i < options.maxDecimalPlaces; i++) {
      maxWidthSlopeString = `${maxWidthSlopeString}0`;
    }
    let maxWidthInterceptString = '0.';
    for (let j = 0; j < options.maxDecimalPlaces; j++) {
      maxWidthInterceptString = `${maxWidthInterceptString}0`;
    }

    // @public
    this.yText = new Text(symbolYString, stringTextOptions); // 'y'
    this.equalText = new Text(MathSymbols.EQUAL_TO, stringTextOptions); // the '=' sign
    this.signSlopeText = new Text(MathSymbols.PLUS, numericalTextOptions); // + or -
    this.valueSlopeText = new Text(maxWidthSlopeString, numericalTextOptions); // a number
    this.xText = new Text(symbolXString, stringTextOptions); // 'x'
    this.signInterceptText = new Text(MathSymbols.PLUS, stringTextOptions); // + or -
    this.valueInterceptText = new Text(maxWidthInterceptString, numericalTextOptions); // a number

    const mutableEquationText = new Node({
      children: [this.yText, this.equalText, this.signSlopeText, this.valueSlopeText, this.xText, this.signInterceptText, this.valueInterceptText]
    });

    // layout of the entire equation
    this.yText.left = 0;
    this.equalText.left = this.yText.right + 3;
    this.signSlopeText.left = this.equalText.right + 1;
    this.valueSlopeText.left = this.signSlopeText.right + 3;
    this.xText.left = this.valueSlopeText.right + 3;
    this.signInterceptText.left = this.xText.right + 3;
    this.valueInterceptText.left = this.signInterceptText.right + 3;
    this.addChild(mutableEquationText);
    this.mutate(options);
  }

  /**
   * Set the text of the slope and its accompanying sign
   * @public
   * @param {number} slope
   */
  setSlopeText(slope) {
    this.signSlopeText.string = this.numberToString(slope).optionalSign;
    this.valueSlopeText.string = this.numberToString(slope).absoluteNumber;
  }

  /**
   * Set the text of the intercept and its accompanying sign
   * @public
   * @param {number} intercept
   */
  setInterceptText(intercept) {
    this.signInterceptText.string = this.numberToString(intercept).sign;
    this.valueInterceptText.string = this.numberToString(intercept).absoluteNumber;
  }

  /**
   * Convert a number to a String, subject to rounding to a certain number of decimal places
   * @private
   * @param {number} number
   * @returns {{absoluteNumber: number, optionalSign: string, sign: string}}
   */
  numberToString(number) {
    const isNegative = this.roundNumber(number) < 0;
    const signString = isNegative ? MathSymbols.MINUS : MathSymbols.PLUS;
    const optionalSignString = isNegative ? MathSymbols.MINUS : ' ';
    const absoluteNumber = this.roundNumber(Math.abs(this.roundNumber(number)));
    const numberString = {
      absoluteNumber: absoluteNumber,
      optionalSign: optionalSignString,
      sign: signString
    };
    return numberString;
  }

  /**
   * Round a number to a certain number of decimal places. Higher numbers have less decimal places.
   * @private
   * @param {number} number
     * @returns {number}
   */
  roundNumber(number) {
    let roundedNumber;
    if (Math.abs(number) < 10) {
      roundedNumber = Utils.toFixed(number, this.options.maxDecimalPlaces); // eg. 9.99, 0.01 if this.options.maxDecimalPlaces=2
    } else if (Math.abs(number) < 100) {
      roundedNumber = Utils.toFixed(number, this.options.maxDecimalPlaces - 1); // eg. 10.1, 99.9
    } else {
      roundedNumber = Utils.toFixed(number, this.options.maxDecimalPlaces - 2); // 100, 1000, 10000, 99999
    }

    return roundedNumber;
  }
}
leastSquaresRegression.register('EquationNode', EquationNode);
export default EquationNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIm1lcmdlIiwiTWF0aFN5bWJvbHMiLCJOb2RlIiwiVGV4dCIsImxlYXN0U3F1YXJlc1JlZ3Jlc3Npb24iLCJMZWFzdFNxdWFyZXNSZWdyZXNzaW9uU3RyaW5ncyIsIkxlYXN0U3F1YXJlc1JlZ3Jlc3Npb25Db25zdGFudHMiLCJzeW1ib2xYU3RyaW5nIiwic3ltYm9sIiwieCIsInN5bWJvbFlTdHJpbmciLCJ5IiwiRXF1YXRpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibWF4RGVjaW1hbFBsYWNlcyIsIm1vZGUiLCJtYXhDaGFyYWN0ZXJXaWR0aCIsIm51bWVyaWNhbFRleHRPcHRpb25zIiwic3RyaW5nVGV4dE9wdGlvbnMiLCJmb250IiwiVEVYVF9CT0xEX0ZPTlQiLCJmaWxsIiwiTVlfTElORV9DT0xPUiIsIkJBU0VfQ09MT1IiLCJtYXhXaWR0aCIsIlRFWFRfRk9OVCIsIkJFU1RfRklUX0xJTkVfQ09MT1IiLCJFcnJvciIsIm1heFdpZHRoU2xvcGVTdHJpbmciLCJpIiwibWF4V2lkdGhJbnRlcmNlcHRTdHJpbmciLCJqIiwieVRleHQiLCJlcXVhbFRleHQiLCJFUVVBTF9UTyIsInNpZ25TbG9wZVRleHQiLCJQTFVTIiwidmFsdWVTbG9wZVRleHQiLCJ4VGV4dCIsInNpZ25JbnRlcmNlcHRUZXh0IiwidmFsdWVJbnRlcmNlcHRUZXh0IiwibXV0YWJsZUVxdWF0aW9uVGV4dCIsImNoaWxkcmVuIiwibGVmdCIsInJpZ2h0IiwiYWRkQ2hpbGQiLCJtdXRhdGUiLCJzZXRTbG9wZVRleHQiLCJzbG9wZSIsInN0cmluZyIsIm51bWJlclRvU3RyaW5nIiwib3B0aW9uYWxTaWduIiwiYWJzb2x1dGVOdW1iZXIiLCJzZXRJbnRlcmNlcHRUZXh0IiwiaW50ZXJjZXB0Iiwic2lnbiIsIm51bWJlciIsImlzTmVnYXRpdmUiLCJyb3VuZE51bWJlciIsInNpZ25TdHJpbmciLCJNSU5VUyIsIm9wdGlvbmFsU2lnblN0cmluZyIsIk1hdGgiLCJhYnMiLCJudW1iZXJTdHJpbmciLCJyb3VuZGVkTnVtYmVyIiwidG9GaXhlZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1YXRpb25Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVxdWF0aW9uIE5vZGUgdGhhdCByZW5kZXJzIGEgdGV4dCBub2RlIG9mIGEgbGluZWFyIGVxdWF0aW9uIG9mIHRoZSBmb3JtIHkgPSBtIHggKyBiIHdoZXJlIG0gYW5kIGIgYXJlIG51bWVyaWNhbCB2YWx1ZXNcclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlIChCZXJlYSBDb2xsZWdlKVxyXG4gKi9cclxuXHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IE1hdGhTeW1ib2xzIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9NYXRoU3ltYm9scy5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbGVhc3RTcXVhcmVzUmVncmVzc2lvbiBmcm9tICcuLi8uLi9sZWFzdFNxdWFyZXNSZWdyZXNzaW9uLmpzJztcclxuaW1wb3J0IExlYXN0U3F1YXJlc1JlZ3Jlc3Npb25TdHJpbmdzIGZyb20gJy4uLy4uL0xlYXN0U3F1YXJlc1JlZ3Jlc3Npb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IExlYXN0U3F1YXJlc1JlZ3Jlc3Npb25Db25zdGFudHMgZnJvbSAnLi4vTGVhc3RTcXVhcmVzUmVncmVzc2lvbkNvbnN0YW50cy5qcyc7XHJcblxyXG5jb25zdCBzeW1ib2xYU3RyaW5nID0gTGVhc3RTcXVhcmVzUmVncmVzc2lvblN0cmluZ3Muc3ltYm9sLng7XHJcbmNvbnN0IHN5bWJvbFlTdHJpbmcgPSBMZWFzdFNxdWFyZXNSZWdyZXNzaW9uU3RyaW5ncy5zeW1ib2wueTtcclxuXHJcbmNsYXNzIEVxdWF0aW9uTm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIC8qKlxyXG4gICAqIFNjZW5lcnkgTm9kZSByZXNwb25zaWJsZSBmb3IgbGF5aW5nIG91dCB0aGUgbGluZWFyIGVxdWF0aW9uIHkgPSBtIHggKyBiXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgbWF4RGVjaW1hbFBsYWNlczogMiwgIC8vIG1heGltdW0gb2YgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIG9uIHNsb3BlIGFuZCBpbnRlcmNlcHRcclxuICAgICAgbW9kZTogJ215TGluZScsICAvLyB2YWxpZCBvcHRpb25zIGFyZSAnbXlMaW5lJyBhbmQgJ2Jlc3RGaXRMaW5lJyxcclxuICAgICAgbWF4Q2hhcmFjdGVyV2lkdGg6IDI1XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHJcbiAgICAvLyBvcHRpb25zIGZvciB0aGUgdGV4dCBlbGVtZW50cyBvZiB0aGUgZXF1YXRpb25cclxuXHJcbiAgICBsZXQgbnVtZXJpY2FsVGV4dE9wdGlvbnM7IC8vIGZvbnQgYW5kIGZpbGwgb3B0aW9ucyBmb3IgbnVtZXJpY2FsIHN0cmluZ3MgLCBpLmUuICAnLSA5LjU0J1xyXG4gICAgbGV0IHN0cmluZ1RleHRPcHRpb25zOyAvLyBmb250IGFuZCBmaWxsIG9wdGlvbnMgZm9yICdwdXJlJyBzdHJpbmdzLCBlZy4gJ3knXHJcblxyXG4gICAgc3dpdGNoKCBvcHRpb25zLm1vZGUgKSB7XHJcbiAgICAgIGNhc2UgJ215TGluZSc6XHJcbiAgICAgICAgbnVtZXJpY2FsVGV4dE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICBmb250OiBMZWFzdFNxdWFyZXNSZWdyZXNzaW9uQ29uc3RhbnRzLlRFWFRfQk9MRF9GT05ULFxyXG4gICAgICAgICAgZmlsbDogTGVhc3RTcXVhcmVzUmVncmVzc2lvbkNvbnN0YW50cy5NWV9MSU5FX0NPTE9SLkJBU0VfQ09MT1IsXHJcbiAgICAgICAgICBtYXhXaWR0aDogb3B0aW9ucy5tYXhDaGFyYWN0ZXJXaWR0aFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3RyaW5nVGV4dE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICBmb250OiBMZWFzdFNxdWFyZXNSZWdyZXNzaW9uQ29uc3RhbnRzLlRFWFRfRk9OVCxcclxuICAgICAgICAgIGZpbGw6ICdibGFjaycsXHJcbiAgICAgICAgICBtYXhXaWR0aDogb3B0aW9ucy5tYXhDaGFyYWN0ZXJXaWR0aFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2Jlc3RGaXRMaW5lJzpcclxuICAgICAgICBudW1lcmljYWxUZXh0T3B0aW9ucyA9IHtcclxuICAgICAgICAgIGZvbnQ6IExlYXN0U3F1YXJlc1JlZ3Jlc3Npb25Db25zdGFudHMuVEVYVF9GT05ULFxyXG4gICAgICAgICAgZmlsbDogTGVhc3RTcXVhcmVzUmVncmVzc2lvbkNvbnN0YW50cy5CRVNUX0ZJVF9MSU5FX0NPTE9SLkJBU0VfQ09MT1IsXHJcbiAgICAgICAgICBtYXhXaWR0aDogb3B0aW9ucy5tYXhDaGFyYWN0ZXJXaWR0aFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3RyaW5nVGV4dE9wdGlvbnMgPSBudW1lcmljYWxUZXh0T3B0aW9ucztcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdVbmtub3duIG1vZGUgZm9yIEVxdWF0aW9uTm9kZTogJyApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHVzZSB0aGUgd2lkZXN0IHBvc3NpYmxlIG51bWJlcnMgZm9yIGxheWluZyBvdXQgdGhlIGVxdWF0aW9uXHJcblxyXG4gICAgbGV0IG1heFdpZHRoU2xvcGVTdHJpbmcgPSAnMC4nO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5tYXhEZWNpbWFsUGxhY2VzOyBpKysgKSB7XHJcbiAgICAgIG1heFdpZHRoU2xvcGVTdHJpbmcgPSBgJHttYXhXaWR0aFNsb3BlU3RyaW5nfTBgO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtYXhXaWR0aEludGVyY2VwdFN0cmluZyA9ICcwLic7XHJcbiAgICBmb3IgKCBsZXQgaiA9IDA7IGogPCBvcHRpb25zLm1heERlY2ltYWxQbGFjZXM7IGorKyApIHtcclxuICAgICAgbWF4V2lkdGhJbnRlcmNlcHRTdHJpbmcgPSBgJHttYXhXaWR0aEludGVyY2VwdFN0cmluZ30wYDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLnlUZXh0ID0gbmV3IFRleHQoIHN5bWJvbFlTdHJpbmcsIHN0cmluZ1RleHRPcHRpb25zICk7IC8vICd5J1xyXG4gICAgdGhpcy5lcXVhbFRleHQgPSBuZXcgVGV4dCggTWF0aFN5bWJvbHMuRVFVQUxfVE8sIHN0cmluZ1RleHRPcHRpb25zICk7IC8vIHRoZSAnPScgc2lnblxyXG4gICAgdGhpcy5zaWduU2xvcGVUZXh0ID0gbmV3IFRleHQoIE1hdGhTeW1ib2xzLlBMVVMsIG51bWVyaWNhbFRleHRPcHRpb25zICk7IC8vICsgb3IgLVxyXG4gICAgdGhpcy52YWx1ZVNsb3BlVGV4dCA9IG5ldyBUZXh0KCBtYXhXaWR0aFNsb3BlU3RyaW5nLCBudW1lcmljYWxUZXh0T3B0aW9ucyApOyAvLyBhIG51bWJlclxyXG4gICAgdGhpcy54VGV4dCA9IG5ldyBUZXh0KCBzeW1ib2xYU3RyaW5nLCBzdHJpbmdUZXh0T3B0aW9ucyApOyAvLyAneCdcclxuICAgIHRoaXMuc2lnbkludGVyY2VwdFRleHQgPSBuZXcgVGV4dCggTWF0aFN5bWJvbHMuUExVUywgc3RyaW5nVGV4dE9wdGlvbnMgKTsvLyArIG9yIC1cclxuICAgIHRoaXMudmFsdWVJbnRlcmNlcHRUZXh0ID0gbmV3IFRleHQoIG1heFdpZHRoSW50ZXJjZXB0U3RyaW5nLCBudW1lcmljYWxUZXh0T3B0aW9ucyApOy8vIGEgbnVtYmVyXHJcblxyXG4gICAgY29uc3QgbXV0YWJsZUVxdWF0aW9uVGV4dCA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgdGhpcy55VGV4dCxcclxuICAgICAgICB0aGlzLmVxdWFsVGV4dCxcclxuICAgICAgICB0aGlzLnNpZ25TbG9wZVRleHQsXHJcbiAgICAgICAgdGhpcy52YWx1ZVNsb3BlVGV4dCxcclxuICAgICAgICB0aGlzLnhUZXh0LFxyXG4gICAgICAgIHRoaXMuc2lnbkludGVyY2VwdFRleHQsXHJcbiAgICAgICAgdGhpcy52YWx1ZUludGVyY2VwdFRleHRcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGxheW91dCBvZiB0aGUgZW50aXJlIGVxdWF0aW9uXHJcbiAgICB0aGlzLnlUZXh0LmxlZnQgPSAwO1xyXG4gICAgdGhpcy5lcXVhbFRleHQubGVmdCA9IHRoaXMueVRleHQucmlnaHQgKyAzO1xyXG4gICAgdGhpcy5zaWduU2xvcGVUZXh0LmxlZnQgPSB0aGlzLmVxdWFsVGV4dC5yaWdodCArIDE7XHJcbiAgICB0aGlzLnZhbHVlU2xvcGVUZXh0LmxlZnQgPSB0aGlzLnNpZ25TbG9wZVRleHQucmlnaHQgKyAzO1xyXG4gICAgdGhpcy54VGV4dC5sZWZ0ID0gdGhpcy52YWx1ZVNsb3BlVGV4dC5yaWdodCArIDM7XHJcbiAgICB0aGlzLnNpZ25JbnRlcmNlcHRUZXh0LmxlZnQgPSB0aGlzLnhUZXh0LnJpZ2h0ICsgMztcclxuICAgIHRoaXMudmFsdWVJbnRlcmNlcHRUZXh0LmxlZnQgPSB0aGlzLnNpZ25JbnRlcmNlcHRUZXh0LnJpZ2h0ICsgMztcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBtdXRhYmxlRXF1YXRpb25UZXh0ICk7XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHRleHQgb2YgdGhlIHNsb3BlIGFuZCBpdHMgYWNjb21wYW55aW5nIHNpZ25cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNsb3BlXHJcbiAgICovXHJcbiAgc2V0U2xvcGVUZXh0KCBzbG9wZSApIHtcclxuICAgIHRoaXMuc2lnblNsb3BlVGV4dC5zdHJpbmcgPSB0aGlzLm51bWJlclRvU3RyaW5nKCBzbG9wZSApLm9wdGlvbmFsU2lnbjtcclxuICAgIHRoaXMudmFsdWVTbG9wZVRleHQuc3RyaW5nID0gdGhpcy5udW1iZXJUb1N0cmluZyggc2xvcGUgKS5hYnNvbHV0ZU51bWJlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgdGV4dCBvZiB0aGUgaW50ZXJjZXB0IGFuZCBpdHMgYWNjb21wYW55aW5nIHNpZ25cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVyY2VwdFxyXG4gICAqL1xyXG4gIHNldEludGVyY2VwdFRleHQoIGludGVyY2VwdCApIHtcclxuICAgIHRoaXMuc2lnbkludGVyY2VwdFRleHQuc3RyaW5nID0gdGhpcy5udW1iZXJUb1N0cmluZyggaW50ZXJjZXB0ICkuc2lnbjtcclxuICAgIHRoaXMudmFsdWVJbnRlcmNlcHRUZXh0LnN0cmluZyA9IHRoaXMubnVtYmVyVG9TdHJpbmcoIGludGVyY2VwdCApLmFic29sdXRlTnVtYmVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCBhIG51bWJlciB0byBhIFN0cmluZywgc3ViamVjdCB0byByb3VuZGluZyB0byBhIGNlcnRhaW4gbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXHJcbiAgICogQHJldHVybnMge3thYnNvbHV0ZU51bWJlcjogbnVtYmVyLCBvcHRpb25hbFNpZ246IHN0cmluZywgc2lnbjogc3RyaW5nfX1cclxuICAgKi9cclxuICBudW1iZXJUb1N0cmluZyggbnVtYmVyICkge1xyXG4gICAgY29uc3QgaXNOZWdhdGl2ZSA9ICggdGhpcy5yb3VuZE51bWJlciggbnVtYmVyICkgPCAwICk7XHJcbiAgICBjb25zdCBzaWduU3RyaW5nID0gaXNOZWdhdGl2ZSA/IE1hdGhTeW1ib2xzLk1JTlVTIDogTWF0aFN5bWJvbHMuUExVUztcclxuICAgIGNvbnN0IG9wdGlvbmFsU2lnblN0cmluZyA9IGlzTmVnYXRpdmUgPyBNYXRoU3ltYm9scy5NSU5VUyA6ICcgJztcclxuICAgIGNvbnN0IGFic29sdXRlTnVtYmVyID0gdGhpcy5yb3VuZE51bWJlciggTWF0aC5hYnMoIHRoaXMucm91bmROdW1iZXIoIG51bWJlciApICkgKTtcclxuICAgIGNvbnN0IG51bWJlclN0cmluZyA9IHtcclxuICAgICAgYWJzb2x1dGVOdW1iZXI6IGFic29sdXRlTnVtYmVyLFxyXG4gICAgICBvcHRpb25hbFNpZ246IG9wdGlvbmFsU2lnblN0cmluZyxcclxuICAgICAgc2lnbjogc2lnblN0cmluZ1xyXG4gICAgfTtcclxuICAgIHJldHVybiBudW1iZXJTdHJpbmc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSb3VuZCBhIG51bWJlciB0byBhIGNlcnRhaW4gbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLiBIaWdoZXIgbnVtYmVycyBoYXZlIGxlc3MgZGVjaW1hbCBwbGFjZXMuXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXHJcblxyXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICovXHJcbiAgcm91bmROdW1iZXIoIG51bWJlciApIHtcclxuICAgIGxldCByb3VuZGVkTnVtYmVyO1xyXG4gICAgaWYgKCBNYXRoLmFicyggbnVtYmVyICkgPCAxMCApIHtcclxuICAgICAgcm91bmRlZE51bWJlciA9IFV0aWxzLnRvRml4ZWQoIG51bWJlciwgdGhpcy5vcHRpb25zLm1heERlY2ltYWxQbGFjZXMgKTsgLy8gZWcuIDkuOTksIDAuMDEgaWYgdGhpcy5vcHRpb25zLm1heERlY2ltYWxQbGFjZXM9MlxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIE1hdGguYWJzKCBudW1iZXIgKSA8IDEwMCApIHtcclxuICAgICAgcm91bmRlZE51bWJlciA9IFV0aWxzLnRvRml4ZWQoIG51bWJlciwgdGhpcy5vcHRpb25zLm1heERlY2ltYWxQbGFjZXMgLSAxICk7IC8vIGVnLiAxMC4xLCA5OS45XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcm91bmRlZE51bWJlciA9IFV0aWxzLnRvRml4ZWQoIG51bWJlciwgdGhpcy5vcHRpb25zLm1heERlY2ltYWxQbGFjZXMgLSAyICk7Ly8gMTAwLCAxMDAwLCAxMDAwMCwgOTk5OTlcclxuICAgIH1cclxuICAgIHJldHVybiByb3VuZGVkTnVtYmVyO1xyXG4gIH1cclxufVxyXG5cclxubGVhc3RTcXVhcmVzUmVncmVzc2lvbi5yZWdpc3RlciggJ0VxdWF0aW9uTm9kZScsIEVxdWF0aW9uTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXF1YXRpb25Ob2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLDRDQUE0QztBQUNwRSxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0Msc0JBQXNCLE1BQU0saUNBQWlDO0FBQ3BFLE9BQU9DLDZCQUE2QixNQUFNLHdDQUF3QztBQUNsRixPQUFPQywrQkFBK0IsTUFBTSx1Q0FBdUM7QUFFbkYsTUFBTUMsYUFBYSxHQUFHRiw2QkFBNkIsQ0FBQ0csTUFB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