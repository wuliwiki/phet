// Copyright 2014-2021, University of Colorado Boulder

/**
 * Type that represents a dataPoint in the view.
 *
 * @author John Blanco
 * @author Martin Veillette (Berea College)
 */

import { Node } from '../../../../scenery/js/imports.js';
import leastSquaresRegression from '../../leastSquaresRegression.js';
class DataPointNode extends Node {
  /**
   * @param {DataPoint} dataPoint
   * @param {Node} representation
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(dataPoint, representation, modelViewTransform) {
    super({
      cursor: 'pointer',
      children: [representation]
    });

    // Create a listener to the position of the dataPoint
    const centerPositionListener = position => {
      this.center = modelViewTransform.modelToViewPosition(position);
    };

    // Move this node as the model representation moves
    dataPoint.positionProperty.link(centerPositionListener);

    // @private: just for dispose.  Named based on the type name so it won't have a name collision with parent/child ones
    this.disposeDataPointNode = () => {
      dataPoint.positionProperty.unlink(centerPositionListener);
    };
  }

  /**
   * Releases references
   * @public
   */
  dispose() {
    this.disposeDataPointNode();
    super.dispose();
  }
}
leastSquaresRegression.register('DataPointNode', DataPointNode);
export default DataPointNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwibGVhc3RTcXVhcmVzUmVncmVzc2lvbiIsIkRhdGFQb2ludE5vZGUiLCJjb25zdHJ1Y3RvciIsImRhdGFQb2ludCIsInJlcHJlc2VudGF0aW9uIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiY3Vyc29yIiwiY2hpbGRyZW4iLCJjZW50ZXJQb3NpdGlvbkxpc3RlbmVyIiwicG9zaXRpb24iLCJjZW50ZXIiLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsImxpbmsiLCJkaXNwb3NlRGF0YVBvaW50Tm9kZSIsInVubGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRhdGFQb2ludE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IHJlcHJlc2VudHMgYSBkYXRhUG9pbnQgaW4gdGhlIHZpZXcuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlIChCZXJlYSBDb2xsZWdlKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbGVhc3RTcXVhcmVzUmVncmVzc2lvbiBmcm9tICcuLi8uLi9sZWFzdFNxdWFyZXNSZWdyZXNzaW9uLmpzJztcclxuXHJcbmNsYXNzIERhdGFQb2ludE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge0RhdGFQb2ludH0gZGF0YVBvaW50XHJcbiAgICogQHBhcmFtIHtOb2RlfSByZXByZXNlbnRhdGlvblxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGRhdGFQb2ludCwgcmVwcmVzZW50YXRpb24sIG1vZGVsVmlld1RyYW5zZm9ybSApIHtcclxuICAgIHN1cGVyKCB7IGN1cnNvcjogJ3BvaW50ZXInLCBjaGlsZHJlbjogWyByZXByZXNlbnRhdGlvbiBdIH0gKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBsaXN0ZW5lciB0byB0aGUgcG9zaXRpb24gb2YgdGhlIGRhdGFQb2ludFxyXG4gICAgY29uc3QgY2VudGVyUG9zaXRpb25MaXN0ZW5lciA9IHBvc2l0aW9uID0+IHtcclxuICAgICAgdGhpcy5jZW50ZXIgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggcG9zaXRpb24gKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gTW92ZSB0aGlzIG5vZGUgYXMgdGhlIG1vZGVsIHJlcHJlc2VudGF0aW9uIG1vdmVzXHJcbiAgICBkYXRhUG9pbnQucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBjZW50ZXJQb3NpdGlvbkxpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGU6IGp1c3QgZm9yIGRpc3Bvc2UuICBOYW1lZCBiYXNlZCBvbiB0aGUgdHlwZSBuYW1lIHNvIGl0IHdvbid0IGhhdmUgYSBuYW1lIGNvbGxpc2lvbiB3aXRoIHBhcmVudC9jaGlsZCBvbmVzXHJcbiAgICB0aGlzLmRpc3Bvc2VEYXRhUG9pbnROb2RlID0gKCkgPT4ge1xyXG4gICAgICBkYXRhUG9pbnQucG9zaXRpb25Qcm9wZXJ0eS51bmxpbmsoIGNlbnRlclBvc2l0aW9uTGlzdGVuZXIgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxlYXNlcyByZWZlcmVuY2VzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmRpc3Bvc2VEYXRhUG9pbnROb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5sZWFzdFNxdWFyZXNSZWdyZXNzaW9uLnJlZ2lzdGVyKCAnRGF0YVBvaW50Tm9kZScsIERhdGFQb2ludE5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERhdGFQb2ludE5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFFcEUsTUFBTUMsYUFBYSxTQUFTRixJQUFJLENBQUM7RUFDL0I7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxXQUFXQSxDQUFFQyxTQUFTLEVBQUVDLGNBQWMsRUFBRUMsa0JBQWtCLEVBQUc7SUFDM0QsS0FBSyxDQUFFO01BQUVDLE1BQU0sRUFBRSxTQUFTO01BQUVDLFFBQVEsRUFBRSxDQUFFSCxjQUFjO0lBQUcsQ0FBRSxDQUFDOztJQUU1RDtJQUNBLE1BQU1JLHNCQUFzQixHQUFHQyxRQUFRLElBQUk7TUFDekMsSUFBSSxDQUFDQyxNQUFNLEdBQUdMLGtCQUFrQixDQUFDTSxtQkFBbUIsQ0FBRUYsUUFBUyxDQUFDO0lBQ2xFLENBQUM7O0lBRUQ7SUFDQU4sU0FBUyxDQUFDUyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFFTCxzQkFBdUIsQ0FBQzs7SUFFekQ7SUFDQSxJQUFJLENBQUNNLG9CQUFvQixHQUFHLE1BQU07TUFDaENYLFNBQVMsQ0FBQ1MsZ0JBQWdCLENBQUNHLE1BQU0sQ0FBRVAsc0JBQXVCLENBQUM7SUFDN0QsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VRLE9BQU9BLENBQUEsRUFBRztJQUNSLElBQUksQ0FBQ0Ysb0JBQW9CLENBQUMsQ0FBQztJQUMzQixLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWhCLHNCQUFzQixDQUFDaUIsUUFBUSxDQUFFLGVBQWUsRUFBRWhCLGFBQWMsQ0FBQztBQUVqRSxlQUFlQSxhQUFhIn0=