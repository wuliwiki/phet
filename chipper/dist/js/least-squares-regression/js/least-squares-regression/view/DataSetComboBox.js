// Copyright 2014-2023, University of Colorado Boulder

/**
 * Combo box for selecting a dataSet.
 *
 * @author Martin Veillette (Berea College)
 */

import { Text } from '../../../../scenery/js/imports.js';
import ComboBox from '../../../../sun/js/ComboBox.js';
import leastSquaresRegression from '../../leastSquaresRegression.js';
import LeastSquaresRegressionConstants from '../LeastSquaresRegressionConstants.js';
class DataSetComboBox extends ComboBox {
  /**
   * @param {Property.<DataSet>} selectedDataSetProperty
   * @param {Array.<DataSet>} dataSets
   * @param {Node} dataSetListParent
   * @param {number} maxTextWidth - max width of text in the combo box
   * @constructor
   */
  constructor(selectedDataSetProperty, dataSets, dataSetListParent, maxTextWidth) {
    // {ComboBoxItem[]}
    const items = dataSets.map(dataSet => createItem(dataSet, maxTextWidth));
    super(selectedDataSetProperty, items, dataSetListParent, {
      listPosition: 'below',
      highlightFill: LeastSquaresRegressionConstants.ITEM_HIGHLIGHT_FILL,
      buttonLineWidth: 1,
      xMargin: 14,
      yMargin: 8,
      cornerRadius: LeastSquaresRegressionConstants.SMALL_PANEL_CORNER_RADIUS
    });
  }
}
leastSquaresRegression.register('DataSetComboBox', DataSetComboBox);

/**
 * Creates an item for the combo box.
 * @param {DataSet} dataSet
 * @param {number} maxTextWidth
 * @returns {ComboBoxItem}
 */
function createItem(dataSet, maxTextWidth) {
  return {
    value: dataSet,
    createNode: () => new Text(dataSet.name, {
      font: LeastSquaresRegressionConstants.TEXT_FONT,
      maxWidth: maxTextWidth
    })
  };
}
export default DataSetComboBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiQ29tYm9Cb3giLCJsZWFzdFNxdWFyZXNSZWdyZXNzaW9uIiwiTGVhc3RTcXVhcmVzUmVncmVzc2lvbkNvbnN0YW50cyIsIkRhdGFTZXRDb21ib0JveCIsImNvbnN0cnVjdG9yIiwic2VsZWN0ZWREYXRhU2V0UHJvcGVydHkiLCJkYXRhU2V0cyIsImRhdGFTZXRMaXN0UGFyZW50IiwibWF4VGV4dFdpZHRoIiwiaXRlbXMiLCJtYXAiLCJkYXRhU2V0IiwiY3JlYXRlSXRlbSIsImxpc3RQb3NpdGlvbiIsImhpZ2hsaWdodEZpbGwiLCJJVEVNX0hJR0hMSUdIVF9GSUxMIiwiYnV0dG9uTGluZVdpZHRoIiwieE1hcmdpbiIsInlNYXJnaW4iLCJjb3JuZXJSYWRpdXMiLCJTTUFMTF9QQU5FTF9DT1JORVJfUkFESVVTIiwicmVnaXN0ZXIiLCJ2YWx1ZSIsImNyZWF0ZU5vZGUiLCJuYW1lIiwiZm9udCIsIlRFWFRfRk9OVCIsIm1heFdpZHRoIl0sInNvdXJjZXMiOlsiRGF0YVNldENvbWJvQm94LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbWJvIGJveCBmb3Igc2VsZWN0aW5nIGEgZGF0YVNldC5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlIChCZXJlYSBDb2xsZWdlKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQ29tYm9Cb3ggZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0NvbWJvQm94LmpzJztcclxuaW1wb3J0IGxlYXN0U3F1YXJlc1JlZ3Jlc3Npb24gZnJvbSAnLi4vLi4vbGVhc3RTcXVhcmVzUmVncmVzc2lvbi5qcyc7XHJcbmltcG9ydCBMZWFzdFNxdWFyZXNSZWdyZXNzaW9uQ29uc3RhbnRzIGZyb20gJy4uL0xlYXN0U3F1YXJlc1JlZ3Jlc3Npb25Db25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgRGF0YVNldENvbWJvQm94IGV4dGVuZHMgQ29tYm9Cb3gge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxEYXRhU2V0Pn0gc2VsZWN0ZWREYXRhU2V0UHJvcGVydHlcclxuICAgKiBAcGFyYW0ge0FycmF5LjxEYXRhU2V0Pn0gZGF0YVNldHNcclxuICAgKiBAcGFyYW0ge05vZGV9IGRhdGFTZXRMaXN0UGFyZW50XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFRleHRXaWR0aCAtIG1heCB3aWR0aCBvZiB0ZXh0IGluIHRoZSBjb21ibyBib3hcclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggc2VsZWN0ZWREYXRhU2V0UHJvcGVydHksIGRhdGFTZXRzLCBkYXRhU2V0TGlzdFBhcmVudCwgbWF4VGV4dFdpZHRoICkge1xyXG5cclxuICAgIC8vIHtDb21ib0JveEl0ZW1bXX1cclxuICAgIGNvbnN0IGl0ZW1zID0gZGF0YVNldHMubWFwKCBkYXRhU2V0ID0+IGNyZWF0ZUl0ZW0oIGRhdGFTZXQsIG1heFRleHRXaWR0aCApICk7XHJcblxyXG4gICAgc3VwZXIoIHNlbGVjdGVkRGF0YVNldFByb3BlcnR5LCBpdGVtcywgZGF0YVNldExpc3RQYXJlbnQsIHtcclxuICAgICAgbGlzdFBvc2l0aW9uOiAnYmVsb3cnLFxyXG4gICAgICBoaWdobGlnaHRGaWxsOiBMZWFzdFNxdWFyZXNSZWdyZXNzaW9uQ29uc3RhbnRzLklURU1fSElHSExJR0hUX0ZJTEwsXHJcbiAgICAgIGJ1dHRvbkxpbmVXaWR0aDogMSxcclxuICAgICAgeE1hcmdpbjogMTQsXHJcbiAgICAgIHlNYXJnaW46IDgsXHJcbiAgICAgIGNvcm5lclJhZGl1czogTGVhc3RTcXVhcmVzUmVncmVzc2lvbkNvbnN0YW50cy5TTUFMTF9QQU5FTF9DT1JORVJfUkFESVVTXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5sZWFzdFNxdWFyZXNSZWdyZXNzaW9uLnJlZ2lzdGVyKCAnRGF0YVNldENvbWJvQm94JywgRGF0YVNldENvbWJvQm94ICk7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhbiBpdGVtIGZvciB0aGUgY29tYm8gYm94LlxyXG4gKiBAcGFyYW0ge0RhdGFTZXR9IGRhdGFTZXRcclxuICogQHBhcmFtIHtudW1iZXJ9IG1heFRleHRXaWR0aFxyXG4gKiBAcmV0dXJucyB7Q29tYm9Cb3hJdGVtfVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSXRlbSggZGF0YVNldCwgbWF4VGV4dFdpZHRoICkge1xyXG4gIHJldHVybiB7XHJcbiAgICB2YWx1ZTogZGF0YVNldCxcclxuICAgIGNyZWF0ZU5vZGU6ICgpID0+IG5ldyBUZXh0KCBkYXRhU2V0Lm5hbWUsIHtcclxuICAgICAgZm9udDogTGVhc3RTcXVhcmVzUmVncmVzc2lvbkNvbnN0YW50cy5URVhUX0ZPTlQsXHJcbiAgICAgIG1heFdpZHRoOiBtYXhUZXh0V2lkdGhcclxuICAgIH0gKVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERhdGFTZXRDb21ib0JveDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLHNCQUFzQixNQUFNLGlDQUFpQztBQUNwRSxPQUFPQywrQkFBK0IsTUFBTSx1Q0FBdUM7QUFFbkYsTUFBTUMsZUFBZSxTQUFTSCxRQUFRLENBQUM7RUFFckM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsdUJBQXVCLEVBQUVDLFFBQVEsRUFBRUMsaUJBQWlCLEVBQUVDLFlBQVksRUFBRztJQUVoRjtJQUNBLE1BQU1DLEtBQUssR0FBR0gsUUFBUSxDQUFDSSxHQUFHLENBQUVDLE9BQU8sSUFBSUMsVUFBVSxDQUFFRCxPQUFPLEVBQUVILFlBQWEsQ0FBRSxDQUFDO0lBRTVFLEtBQUssQ0FBRUgsdUJBQXVCLEVBQUVJLEtBQUssRUFBRUYsaUJBQWlCLEVBQUU7TUFDeERNLFlBQVksRUFBRSxPQUFPO01BQ3JCQyxhQUFhLEVBQUVaLCtCQUErQixDQUFDYSxtQkFBbUI7TUFDbEVDLGVBQWUsRUFBRSxDQUFDO01BQ2xCQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxZQUFZLEVBQUVqQiwrQkFBK0IsQ0FBQ2tCO0lBQ2hELENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQW5CLHNCQUFzQixDQUFDb0IsUUFBUSxDQUFFLGlCQUFpQixFQUFFbEIsZUFBZ0IsQ0FBQzs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU1MsVUFBVUEsQ0FBRUQsT0FBTyxFQUFFSCxZQUFZLEVBQUc7RUFDM0MsT0FBTztJQUNMYyxLQUFLLEVBQUVYLE9BQU87SUFDZFksVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSXhCLElBQUksQ0FBRVksT0FBTyxDQUFDYSxJQUFJLEVBQUU7TUFDeENDLElBQUksRUFBRXZCLCtCQUErQixDQUFDd0IsU0FBUztNQUMvQ0MsUUFBUSxFQUFFbkI7SUFDWixDQUFFO0VBQ0osQ0FBQztBQUNIO0FBRUEsZUFBZUwsZUFBZSJ9