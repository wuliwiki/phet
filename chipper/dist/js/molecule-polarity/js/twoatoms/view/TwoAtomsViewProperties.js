// Copyright 2016-2022, University of Colorado Boulder

/**
 * View-specific Properties for the 'Two Atoms' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import StringUnionProperty from '../../../../axon/js/StringUnionProperty.js';
import { SurfaceTypeValues } from '../../common/model/SurfaceType.js';
import moleculePolarity from '../../moleculePolarity.js';
export default class TwoAtomsViewProperties {
  constructor(providedOptions) {
    const options = providedOptions;
    this.bondDipoleVisibleProperty = new BooleanProperty(true, {
      tandem: options.tandem.createTandem('bondDipoleVisibleProperty')
    });
    this.partialChargesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('partialChargesVisibleProperty')
    });
    this.bondCharacterVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('bondCharacterVisibleProperty')
    });
    this.surfaceTypeProperty = new StringUnionProperty('none', {
      validValues: SurfaceTypeValues,
      tandem: options.tandem.createTandem('surfaceTypeProperty')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.bondDipoleVisibleProperty.reset();
    this.partialChargesVisibleProperty.reset();
    this.bondCharacterVisibleProperty.reset();
    this.surfaceTypeProperty.reset();
  }
}
moleculePolarity.register('TwoAtomsViewProperties', TwoAtomsViewProperties);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJTdHJpbmdVbmlvblByb3BlcnR5IiwiU3VyZmFjZVR5cGVWYWx1ZXMiLCJtb2xlY3VsZVBvbGFyaXR5IiwiVHdvQXRvbXNWaWV3UHJvcGVydGllcyIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImJvbmREaXBvbGVWaXNpYmxlUHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJwYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eSIsImJvbmRDaGFyYWN0ZXJWaXNpYmxlUHJvcGVydHkiLCJzdXJmYWNlVHlwZVByb3BlcnR5IiwidmFsaWRWYWx1ZXMiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlR3b0F0b21zVmlld1Byb3BlcnRpZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldy1zcGVjaWZpYyBQcm9wZXJ0aWVzIGZvciB0aGUgJ1R3byBBdG9tcycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdHJpbmdVbmlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvU3RyaW5nVW5pb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgeyBTdXJmYWNlVHlwZSwgU3VyZmFjZVR5cGVWYWx1ZXMgfSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU3VyZmFjZVR5cGUuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBUd29BdG9tc1ZpZXdQcm9wZXJ0aWVzT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR3b0F0b21zVmlld1Byb3BlcnRpZXMge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgYm9uZERpcG9sZVZpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHVibGljIHJlYWRvbmx5IHBhcnRpYWxDaGFyZ2VzVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgYm9uZENoYXJhY3RlclZpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHVibGljIHJlYWRvbmx5IHN1cmZhY2VUeXBlUHJvcGVydHk6IFN0cmluZ1VuaW9uUHJvcGVydHk8U3VyZmFjZVR5cGU+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogVHdvQXRvbXNWaWV3UHJvcGVydGllc09wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHByb3ZpZGVkT3B0aW9ucztcclxuXHJcbiAgICB0aGlzLmJvbmREaXBvbGVWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYm9uZERpcG9sZVZpc2libGVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMucGFydGlhbENoYXJnZXNWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BhcnRpYWxDaGFyZ2VzVmlzaWJsZVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5ib25kQ2hhcmFjdGVyVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdib25kQ2hhcmFjdGVyVmlzaWJsZVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5zdXJmYWNlVHlwZVByb3BlcnR5ID0gbmV3IFN0cmluZ1VuaW9uUHJvcGVydHk8U3VyZmFjZVR5cGU+KCAnbm9uZScsIHtcclxuICAgICAgdmFsaWRWYWx1ZXM6IFN1cmZhY2VUeXBlVmFsdWVzLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3N1cmZhY2VUeXBlUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmJvbmREaXBvbGVWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMucGFydGlhbENoYXJnZXNWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuYm9uZENoYXJhY3RlclZpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5zdXJmYWNlVHlwZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2xlY3VsZVBvbGFyaXR5LnJlZ2lzdGVyKCAnVHdvQXRvbXNWaWV3UHJvcGVydGllcycsIFR3b0F0b21zVmlld1Byb3BlcnRpZXMgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUVwRSxPQUFPQyxtQkFBbUIsTUFBTSw0Q0FBNEM7QUFJNUUsU0FBc0JDLGlCQUFpQixRQUFRLG1DQUFtQztBQUNsRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFNeEQsZUFBZSxNQUFNQyxzQkFBc0IsQ0FBQztFQU9uQ0MsV0FBV0EsQ0FBRUMsZUFBOEMsRUFBRztJQUVuRSxNQUFNQyxPQUFPLEdBQUdELGVBQWU7SUFFL0IsSUFBSSxDQUFDRSx5QkFBeUIsR0FBRyxJQUFJUixlQUFlLENBQUUsSUFBSSxFQUFFO01BQzFEUyxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsMkJBQTRCO0lBQ25FLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsNkJBQTZCLEdBQUcsSUFBSVgsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUMvRFMsTUFBTSxFQUFFRixPQUFPLENBQUNFLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLCtCQUFnQztJQUN2RSxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNFLDRCQUE0QixHQUFHLElBQUlaLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDOURTLE1BQU0sRUFBRUYsT0FBTyxDQUFDRSxNQUFNLENBQUNDLFlBQVksQ0FBRSw4QkFBK0I7SUFDdEUsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDRyxtQkFBbUIsR0FBRyxJQUFJWixtQkFBbUIsQ0FBZSxNQUFNLEVBQUU7TUFDdkVhLFdBQVcsRUFBRVosaUJBQWlCO01BQzlCTyxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUscUJBQXNCO0lBQzdELENBQUUsQ0FBQztFQUNMO0VBRU9LLE9BQU9BLENBQUEsRUFBUztJQUNyQkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0VBQzNGO0VBRU9DLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNULHlCQUF5QixDQUFDUyxLQUFLLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUNOLDZCQUE2QixDQUFDTSxLQUFLLENBQUMsQ0FBQztJQUMxQyxJQUFJLENBQUNMLDRCQUE0QixDQUFDSyxLQUFLLENBQUMsQ0FBQztJQUN6QyxJQUFJLENBQUNKLG1CQUFtQixDQUFDSSxLQUFLLENBQUMsQ0FBQztFQUNsQztBQUNGO0FBRUFkLGdCQUFnQixDQUFDZSxRQUFRLENBQUUsd0JBQXdCLEVBQUVkLHNCQUF1QixDQUFDIn0=