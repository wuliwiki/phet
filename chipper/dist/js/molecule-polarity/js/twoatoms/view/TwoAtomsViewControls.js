// Copyright 2017-2022, University of Colorado Boulder

/**
 * TwoAtomsViewControls is the subpanel labeled 'View' in the 'Two Atoms' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Text, VBox } from '../../../../scenery/js/imports.js';
import MPConstants from '../../common/MPConstants.js';
import BondDipolesCheckbox from '../../common/view/BondDipolesCheckbox.js';
import PartialChargesCheckbox from '../../common/view/PartialChargesCheckbox.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
import BondCharacterCheckbox from './BondCharacterCheckbox.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class TwoAtomsViewControls extends VBox {
  constructor(viewProperties, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING
    }, providedOptions);

    // title
    const titleText = new Text(MoleculePolarityStrings.viewStringProperty, combineOptions({}, MPConstants.CONTROL_PANEL_TITLE_OPTIONS, {
      tandem: options.tandem.createTandem('titleText')
    }));

    // Checkboxes
    const bondDipoleCheckbox = new BondDipolesCheckbox(viewProperties.bondDipoleVisibleProperty, {
      singular: true,
      tandem: options.tandem.createTandem('bondDipoleCheckbox')
    });
    const partialChargesCheckbox = new PartialChargesCheckbox(viewProperties.partialChargesVisibleProperty, {
      tandem: options.tandem.createTandem('partialChargesCheckbox')
    });
    const bondCharacterCheckbox = new BondCharacterCheckbox(viewProperties.bondCharacterVisibleProperty, {
      tandem: options.tandem.createTandem('bondCharacterCheckbox')
    });
    options.children = [titleText, bondDipoleCheckbox, partialChargesCheckbox, bondCharacterCheckbox];
    super(options);
  }
}
moleculePolarity.register('TwoAtomsViewControls', TwoAtomsViewControls);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiVkJveCIsIk1QQ29uc3RhbnRzIiwiQm9uZERpcG9sZXNDaGVja2JveCIsIlBhcnRpYWxDaGFyZ2VzQ2hlY2tib3giLCJtb2xlY3VsZVBvbGFyaXR5IiwiTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MiLCJCb25kQ2hhcmFjdGVyQ2hlY2tib3giLCJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIlR3b0F0b21zVmlld0NvbnRyb2xzIiwiY29uc3RydWN0b3IiLCJ2aWV3UHJvcGVydGllcyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJhbGlnbiIsInNwYWNpbmciLCJDT05UUk9MX1BBTkVMX1lfU1BBQ0lORyIsInRpdGxlVGV4dCIsInZpZXdTdHJpbmdQcm9wZXJ0eSIsIkNPTlRST0xfUEFORUxfVElUTEVfT1BUSU9OUyIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImJvbmREaXBvbGVDaGVja2JveCIsImJvbmREaXBvbGVWaXNpYmxlUHJvcGVydHkiLCJzaW5ndWxhciIsInBhcnRpYWxDaGFyZ2VzQ2hlY2tib3giLCJwYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eSIsImJvbmRDaGFyYWN0ZXJDaGVja2JveCIsImJvbmRDaGFyYWN0ZXJWaXNpYmxlUHJvcGVydHkiLCJjaGlsZHJlbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVHdvQXRvbXNWaWV3Q29udHJvbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVHdvQXRvbXNWaWV3Q29udHJvbHMgaXMgdGhlIHN1YnBhbmVsIGxhYmVsZWQgJ1ZpZXcnIGluIHRoZSAnVHdvIEF0b21zJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVGV4dCwgVGV4dE9wdGlvbnMsIFZCb3gsIFZCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IE1QQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9NUENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBCb25kRGlwb2xlc0NoZWNrYm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0JvbmREaXBvbGVzQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgUGFydGlhbENoYXJnZXNDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9QYXJ0aWFsQ2hhcmdlc0NoZWNrYm94LmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyBmcm9tICcuLi8uLi9Nb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBCb25kQ2hhcmFjdGVyQ2hlY2tib3ggZnJvbSAnLi9Cb25kQ2hhcmFjdGVyQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgVHdvQXRvbXNWaWV3UHJvcGVydGllcyBmcm9tICcuL1R3b0F0b21zVmlld1Byb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgVHdvQXRvbXNWaWV3Q29udHJvbHNPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8VkJveE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR3b0F0b21zVmlld0NvbnRyb2xzIGV4dGVuZHMgVkJveCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggdmlld1Byb3BlcnRpZXM6IFR3b0F0b21zVmlld1Byb3BlcnRpZXMsIHByb3ZpZGVkT3B0aW9uczogVHdvQXRvbXNWaWV3Q29udHJvbHNPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VHdvQXRvbXNWaWV3Q29udHJvbHNPcHRpb25zLCBTZWxmT3B0aW9ucywgVkJveE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFZCb3hPcHRpb25zXHJcbiAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgIHNwYWNpbmc6IE1QQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfWV9TUEFDSU5HXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyB0aXRsZVxyXG4gICAgY29uc3QgdGl0bGVUZXh0ID0gbmV3IFRleHQoIE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzLnZpZXdTdHJpbmdQcm9wZXJ0eSwgY29tYmluZU9wdGlvbnM8VGV4dE9wdGlvbnM+KFxyXG4gICAgICB7fSwgTVBDb25zdGFudHMuQ09OVFJPTF9QQU5FTF9USVRMRV9PUFRJT05TLCB7XHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aXRsZVRleHQnIClcclxuICAgICAgfSApICk7XHJcblxyXG4gICAgLy8gQ2hlY2tib3hlc1xyXG4gICAgY29uc3QgYm9uZERpcG9sZUNoZWNrYm94ID0gbmV3IEJvbmREaXBvbGVzQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLmJvbmREaXBvbGVWaXNpYmxlUHJvcGVydHksIHtcclxuICAgICAgc2luZ3VsYXI6IHRydWUsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYm9uZERpcG9sZUNoZWNrYm94JyApXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBwYXJ0aWFsQ2hhcmdlc0NoZWNrYm94ID0gbmV3IFBhcnRpYWxDaGFyZ2VzQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLnBhcnRpYWxDaGFyZ2VzVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncGFydGlhbENoYXJnZXNDaGVja2JveCcgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgYm9uZENoYXJhY3RlckNoZWNrYm94ID0gbmV3IEJvbmRDaGFyYWN0ZXJDaGVja2JveCggdmlld1Byb3BlcnRpZXMuYm9uZENoYXJhY3RlclZpc2libGVQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2JvbmRDaGFyYWN0ZXJDaGVja2JveCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbXHJcbiAgICAgIHRpdGxlVGV4dCxcclxuICAgICAgYm9uZERpcG9sZUNoZWNrYm94LFxyXG4gICAgICBwYXJ0aWFsQ2hhcmdlc0NoZWNrYm94LFxyXG4gICAgICBib25kQ2hhcmFjdGVyQ2hlY2tib3hcclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbm1vbGVjdWxlUG9sYXJpdHkucmVnaXN0ZXIoICdUd29BdG9tc1ZpZXdDb250cm9scycsIFR3b0F0b21zVmlld0NvbnRyb2xzICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksRUFBZUMsSUFBSSxRQUFxQixtQ0FBbUM7QUFDeEYsT0FBT0MsV0FBVyxNQUFNLDZCQUE2QjtBQUNyRCxPQUFPQyxtQkFBbUIsTUFBTSwwQ0FBMEM7QUFDMUUsT0FBT0Msc0JBQXNCLE1BQU0sNkNBQTZDO0FBQ2hGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsT0FBT0MscUJBQXFCLE1BQU0sNEJBQTRCO0FBRzlELE9BQU9DLFNBQVMsSUFBSUMsY0FBYyxRQUEwQix1Q0FBdUM7QUFNbkcsZUFBZSxNQUFNQyxvQkFBb0IsU0FBU1QsSUFBSSxDQUFDO0VBRTlDVSxXQUFXQSxDQUFFQyxjQUFzQyxFQUFFQyxlQUE0QyxFQUFHO0lBRXpHLE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUF3RCxDQUFDLENBQUU7TUFFbEY7TUFDQU8sS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFZCxXQUFXLENBQUNlO0lBQ3ZCLENBQUMsRUFBRUosZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNSyxTQUFTLEdBQUcsSUFBSWxCLElBQUksQ0FBRU0sdUJBQXVCLENBQUNhLGtCQUFrQixFQUFFVixjQUFjLENBQ3BGLENBQUMsQ0FBQyxFQUFFUCxXQUFXLENBQUNrQiwyQkFBMkIsRUFBRTtNQUMzQ0MsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFdBQVk7SUFDbkQsQ0FBRSxDQUFFLENBQUM7O0lBRVA7SUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxJQUFJcEIsbUJBQW1CLENBQUVTLGNBQWMsQ0FBQ1kseUJBQXlCLEVBQUU7TUFDNUZDLFFBQVEsRUFBRSxJQUFJO01BQ2RKLE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSxvQkFBcUI7SUFDNUQsQ0FBRSxDQUFDO0lBQ0gsTUFBTUksc0JBQXNCLEdBQUcsSUFBSXRCLHNCQUFzQixDQUFFUSxjQUFjLENBQUNlLDZCQUE2QixFQUFFO01BQ3ZHTixNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUUsd0JBQXlCO0lBQ2hFLENBQUUsQ0FBQztJQUNILE1BQU1NLHFCQUFxQixHQUFHLElBQUlyQixxQkFBcUIsQ0FBRUssY0FBYyxDQUFDaUIsNEJBQTRCLEVBQUU7TUFDcEdSLE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSx1QkFBd0I7SUFDL0QsQ0FBRSxDQUFDO0lBRUhSLE9BQU8sQ0FBQ2dCLFFBQVEsR0FBRyxDQUNqQlosU0FBUyxFQUNUSyxrQkFBa0IsRUFDbEJHLHNCQUFzQixFQUN0QkUscUJBQXFCLENBQ3RCO0lBRUQsS0FBSyxDQUFFZCxPQUFRLENBQUM7RUFDbEI7QUFDRjtBQUVBVCxnQkFBZ0IsQ0FBQzBCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRXJCLG9CQUFxQixDQUFDIn0=