// Copyright 2014-2022, University of Colorado Boulder

/**
 * 2D surface that represents electrostatic potential for a diatomic molecule.
 * Electron density uses a 3-color gradient, so we use 2 Path nodes that meet in the middle.
 * This node's look is similar to the corresponding Jmol isosurface.
 * Shapes are created in global coordinates, so this node's position should be (0,0).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { LinearGradient } from '../../../../scenery/js/imports.js';
import MPColors from '../../common/MPColors.js';
import MPConstants from '../../common/MPConstants.js';
import moleculePolarity from '../../moleculePolarity.js';
import SurfaceNode from './SurfaceNode.js';
export default class ElectrostaticPotentialSurfaceNode extends SurfaceNode {
  constructor(molecule, providedOptions) {
    super(molecule, MPColors.RWB_GRADIENT, providedOptions);
  }

  /**
   * Updates the surface fill.
   */
  updateFill() {
    assert && assert(this.colors.length === 3, 'this implementation only works for 3 colors');

    // scale varies from 1 to 0, approaches zero as EN difference approaches zero.
    const deltaEN = this.molecule.getDeltaEN();
    if (deltaEN === 0) {
      this.path.fill = this.colors[1];
    } else {
      const scale = Math.abs(deltaEN / this.electronegativityRange.getLength());
      const surfaceWidth = this.getSurfaceWidth();

      // compute the gradient width
      const gradientWidth = Utils.linear(1, 0, surfaceWidth / 2, surfaceWidth * MPConstants.SURFACE_GRADIENT_WIDTH_MULTIPLIER, scale);

      // gradient endpoints prior to accounting for molecule transform
      const pointA = new Vector2(-gradientWidth / 2, 0);
      const pointB = new Vector2(gradientWidth / 2, 0);

      // choose colors based on polarity
      const colorCenter = this.colors[1];
      const colorA = deltaEN > 0 ? this.colors[2] : this.colors[0];
      const colorB = deltaEN > 0 ? this.colors[0] : this.colors[2];

      // create the gradients
      const gradient = new LinearGradient(pointA.x, pointA.y, pointB.x, pointB.y);
      gradient.addColorStop(0, colorA);
      gradient.addColorStop(0.5, colorCenter);
      gradient.addColorStop(1, colorB);
      this.path.fill = gradient;
    }
  }
}
moleculePolarity.register('ElectrostaticPotentialSurfaceNode', ElectrostaticPotentialSurfaceNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJMaW5lYXJHcmFkaWVudCIsIk1QQ29sb3JzIiwiTVBDb25zdGFudHMiLCJtb2xlY3VsZVBvbGFyaXR5IiwiU3VyZmFjZU5vZGUiLCJFbGVjdHJvc3RhdGljUG90ZW50aWFsU3VyZmFjZU5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vbGVjdWxlIiwicHJvdmlkZWRPcHRpb25zIiwiUldCX0dSQURJRU5UIiwidXBkYXRlRmlsbCIsImFzc2VydCIsImNvbG9ycyIsImxlbmd0aCIsImRlbHRhRU4iLCJnZXREZWx0YUVOIiwicGF0aCIsImZpbGwiLCJzY2FsZSIsIk1hdGgiLCJhYnMiLCJlbGVjdHJvbmVnYXRpdml0eVJhbmdlIiwiZ2V0TGVuZ3RoIiwic3VyZmFjZVdpZHRoIiwiZ2V0U3VyZmFjZVdpZHRoIiwiZ3JhZGllbnRXaWR0aCIsImxpbmVhciIsIlNVUkZBQ0VfR1JBRElFTlRfV0lEVEhfTVVMVElQTElFUiIsInBvaW50QSIsInBvaW50QiIsImNvbG9yQ2VudGVyIiwiY29sb3JBIiwiY29sb3JCIiwiZ3JhZGllbnQiLCJ4IiwieSIsImFkZENvbG9yU3RvcCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWxlY3Ryb3N0YXRpY1BvdGVudGlhbFN1cmZhY2VOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIDJEIHN1cmZhY2UgdGhhdCByZXByZXNlbnRzIGVsZWN0cm9zdGF0aWMgcG90ZW50aWFsIGZvciBhIGRpYXRvbWljIG1vbGVjdWxlLlxyXG4gKiBFbGVjdHJvbiBkZW5zaXR5IHVzZXMgYSAzLWNvbG9yIGdyYWRpZW50LCBzbyB3ZSB1c2UgMiBQYXRoIG5vZGVzIHRoYXQgbWVldCBpbiB0aGUgbWlkZGxlLlxyXG4gKiBUaGlzIG5vZGUncyBsb29rIGlzIHNpbWlsYXIgdG8gdGhlIGNvcnJlc3BvbmRpbmcgSm1vbCBpc29zdXJmYWNlLlxyXG4gKiBTaGFwZXMgYXJlIGNyZWF0ZWQgaW4gZ2xvYmFsIGNvb3JkaW5hdGVzLCBzbyB0aGlzIG5vZGUncyBwb3NpdGlvbiBzaG91bGQgYmUgKDAsMCkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTVBDb2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL01QQ29sb3JzLmpzJztcclxuaW1wb3J0IE1QQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9NUENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBtb2xlY3VsZVBvbGFyaXR5IGZyb20gJy4uLy4uL21vbGVjdWxlUG9sYXJpdHkuanMnO1xyXG5pbXBvcnQgU3VyZmFjZU5vZGUsIHsgU3VyZmFjZU5vZGVPcHRpb25zIH0gZnJvbSAnLi9TdXJmYWNlTm9kZS5qcyc7XHJcbmltcG9ydCBEaWF0b21pY01vbGVjdWxlIGZyb20gJy4uL21vZGVsL0RpYXRvbWljTW9sZWN1bGUuanMnO1xyXG5cclxudHlwZSBFbGVjdHJvc3RhdGljUG90ZW50aWFsU3VyZmFjZU5vZGVPcHRpb25zID0gU3VyZmFjZU5vZGVPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxlY3Ryb3N0YXRpY1BvdGVudGlhbFN1cmZhY2VOb2RlIGV4dGVuZHMgU3VyZmFjZU5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vbGVjdWxlOiBEaWF0b21pY01vbGVjdWxlLCBwcm92aWRlZE9wdGlvbnM6IEVsZWN0cm9zdGF0aWNQb3RlbnRpYWxTdXJmYWNlTm9kZU9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggbW9sZWN1bGUsIE1QQ29sb3JzLlJXQl9HUkFESUVOVCwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIHRoZSBzdXJmYWNlIGZpbGwuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHVwZGF0ZUZpbGwoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLmNvbG9ycy5sZW5ndGggPT09IDMsICd0aGlzIGltcGxlbWVudGF0aW9uIG9ubHkgd29ya3MgZm9yIDMgY29sb3JzJyApO1xyXG5cclxuICAgIC8vIHNjYWxlIHZhcmllcyBmcm9tIDEgdG8gMCwgYXBwcm9hY2hlcyB6ZXJvIGFzIEVOIGRpZmZlcmVuY2UgYXBwcm9hY2hlcyB6ZXJvLlxyXG4gICAgY29uc3QgZGVsdGFFTiA9IHRoaXMubW9sZWN1bGUuZ2V0RGVsdGFFTigpO1xyXG4gICAgaWYgKCBkZWx0YUVOID09PSAwICkge1xyXG4gICAgICB0aGlzLnBhdGguZmlsbCA9IHRoaXMuY29sb3JzWyAxIF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY29uc3Qgc2NhbGUgPSBNYXRoLmFicyggZGVsdGFFTiAvIHRoaXMuZWxlY3Ryb25lZ2F0aXZpdHlSYW5nZS5nZXRMZW5ndGgoKSApO1xyXG5cclxuICAgICAgY29uc3Qgc3VyZmFjZVdpZHRoID0gdGhpcy5nZXRTdXJmYWNlV2lkdGgoKTtcclxuXHJcbiAgICAgIC8vIGNvbXB1dGUgdGhlIGdyYWRpZW50IHdpZHRoXHJcbiAgICAgIGNvbnN0IGdyYWRpZW50V2lkdGggPSBVdGlscy5saW5lYXIoIDEsIDAsIHN1cmZhY2VXaWR0aCAvIDIsIHN1cmZhY2VXaWR0aCAqIE1QQ29uc3RhbnRzLlNVUkZBQ0VfR1JBRElFTlRfV0lEVEhfTVVMVElQTElFUiwgc2NhbGUgKTtcclxuXHJcbiAgICAgIC8vIGdyYWRpZW50IGVuZHBvaW50cyBwcmlvciB0byBhY2NvdW50aW5nIGZvciBtb2xlY3VsZSB0cmFuc2Zvcm1cclxuICAgICAgY29uc3QgcG9pbnRBID0gbmV3IFZlY3RvcjIoIC1ncmFkaWVudFdpZHRoIC8gMiwgMCApO1xyXG4gICAgICBjb25zdCBwb2ludEIgPSBuZXcgVmVjdG9yMiggZ3JhZGllbnRXaWR0aCAvIDIsIDAgKTtcclxuXHJcbiAgICAgIC8vIGNob29zZSBjb2xvcnMgYmFzZWQgb24gcG9sYXJpdHlcclxuICAgICAgY29uc3QgY29sb3JDZW50ZXIgPSB0aGlzLmNvbG9yc1sgMSBdO1xyXG4gICAgICBjb25zdCBjb2xvckEgPSAoIGRlbHRhRU4gPiAwICkgPyB0aGlzLmNvbG9yc1sgMiBdIDogdGhpcy5jb2xvcnNbIDAgXTtcclxuICAgICAgY29uc3QgY29sb3JCID0gKCBkZWx0YUVOID4gMCApID8gdGhpcy5jb2xvcnNbIDAgXSA6IHRoaXMuY29sb3JzWyAyIF07XHJcblxyXG4gICAgICAvLyBjcmVhdGUgdGhlIGdyYWRpZW50c1xyXG4gICAgICBjb25zdCBncmFkaWVudCA9IG5ldyBMaW5lYXJHcmFkaWVudCggcG9pbnRBLngsIHBvaW50QS55LCBwb2ludEIueCwgcG9pbnRCLnkgKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCAwLCBjb2xvckEgKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCAwLjUsIGNvbG9yQ2VudGVyICk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCggMSwgY29sb3JCICk7XHJcblxyXG4gICAgICB0aGlzLnBhdGguZmlsbCA9IGdyYWRpZW50O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ0VsZWN0cm9zdGF0aWNQb3RlbnRpYWxTdXJmYWNlTm9kZScsIEVsZWN0cm9zdGF0aWNQb3RlbnRpYWxTdXJmYWNlTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FB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