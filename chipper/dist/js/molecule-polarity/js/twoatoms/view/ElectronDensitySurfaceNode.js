// Copyright 2014-2022, University of Colorado Boulder

/**
 * 2D surface that represents electron density for a diatomic molecule.
 * Electron density uses a 2-color gradient, so we can use a single PPath.
 * This node's look is similar to the corresponding Jmol isosurface.
 * Shapes are created in global coordinates, so this node's position should be (0,0).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { LinearGradient } from '../../../../scenery/js/imports.js';
import MPColors from '../../common/MPColors.js';
import MPConstants from '../../common/MPConstants.js';
import moleculePolarity from '../../moleculePolarity.js';
import SurfaceNode from './SurfaceNode.js';
export default class ElectronDensitySurfaceNode extends SurfaceNode {
  constructor(molecule, providedOptions) {
    super(molecule, MPColors.BW_GRADIENT, providedOptions);
  }

  /**
   * Updates the surface fill. Width of the gradient expands as the difference in EN approaches zero.
   */
  updateFill() {
    assert && assert(this.colors.length === 2, 'this implementation only works for 2 colors');

    // scale varies from 1 to 0, approaches zero as EN difference approaches zero.
    const deltaEN = this.molecule.getDeltaEN();
    if (deltaEN === 0) {
      // no difference, use neutral color that's halfway between "more" and "less" colors
      this.path.fill = MPColors.NEUTRAL_GRAY;
    } else {
      const scale = Math.abs(deltaEN / this.electronegativityRange.getLength());
      const surfaceWidth = this.getSurfaceWidth();

      // compute the gradient width
      const gradientWidth = Utils.linear(1, 0, surfaceWidth, surfaceWidth * MPConstants.SURFACE_GRADIENT_WIDTH_MULTIPLIER, scale);

      // gradient endpoints prior to accounting for molecule transform
      const pointA = new Vector2(-gradientWidth / 2, 0);
      const pointB = new Vector2(gradientWidth / 2, 0);

      // choose colors based on polarity
      const colorA = deltaEN > 0 ? this.colors[1] : this.colors[0];
      const colorB = deltaEN > 0 ? this.colors[0] : this.colors[1];

      // create the gradient
      const gradient = new LinearGradient(pointA.x, pointA.y, pointB.x, pointB.y);
      gradient.addColorStop(0, colorA);
      gradient.addColorStop(1, colorB);
      this.path.fill = gradient;
    }
  }
}
moleculePolarity.register('ElectronDensitySurfaceNode', ElectronDensitySurfaceNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJMaW5lYXJHcmFkaWVudCIsIk1QQ29sb3JzIiwiTVBDb25zdGFudHMiLCJtb2xlY3VsZVBvbGFyaXR5IiwiU3VyZmFjZU5vZGUiLCJFbGVjdHJvbkRlbnNpdHlTdXJmYWNlTm9kZSIsImNvbnN0cnVjdG9yIiwibW9sZWN1bGUiLCJwcm92aWRlZE9wdGlvbnMiLCJCV19HUkFESUVOVCIsInVwZGF0ZUZpbGwiLCJhc3NlcnQiLCJjb2xvcnMiLCJsZW5ndGgiLCJkZWx0YUVOIiwiZ2V0RGVsdGFFTiIsInBhdGgiLCJmaWxsIiwiTkVVVFJBTF9HUkFZIiwic2NhbGUiLCJNYXRoIiwiYWJzIiwiZWxlY3Ryb25lZ2F0aXZpdHlSYW5nZSIsImdldExlbmd0aCIsInN1cmZhY2VXaWR0aCIsImdldFN1cmZhY2VXaWR0aCIsImdyYWRpZW50V2lkdGgiLCJsaW5lYXIiLCJTVVJGQUNFX0dSQURJRU5UX1dJRFRIX01VTFRJUExJRVIiLCJwb2ludEEiLCJwb2ludEIiLCJjb2xvckEiLCJjb2xvckIiLCJncmFkaWVudCIsIngiLCJ5IiwiYWRkQ29sb3JTdG9wIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbGVjdHJvbkRlbnNpdHlTdXJmYWNlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiAyRCBzdXJmYWNlIHRoYXQgcmVwcmVzZW50cyBlbGVjdHJvbiBkZW5zaXR5IGZvciBhIGRpYXRvbWljIG1vbGVjdWxlLlxyXG4gKiBFbGVjdHJvbiBkZW5zaXR5IHVzZXMgYSAyLWNvbG9yIGdyYWRpZW50LCBzbyB3ZSBjYW4gdXNlIGEgc2luZ2xlIFBQYXRoLlxyXG4gKiBUaGlzIG5vZGUncyBsb29rIGlzIHNpbWlsYXIgdG8gdGhlIGNvcnJlc3BvbmRpbmcgSm1vbCBpc29zdXJmYWNlLlxyXG4gKiBTaGFwZXMgYXJlIGNyZWF0ZWQgaW4gZ2xvYmFsIGNvb3JkaW5hdGVzLCBzbyB0aGlzIG5vZGUncyBwb3NpdGlvbiBzaG91bGQgYmUgKDAsMCkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTVBDb2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL01QQ29sb3JzLmpzJztcclxuaW1wb3J0IE1QQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9NUENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBtb2xlY3VsZVBvbGFyaXR5IGZyb20gJy4uLy4uL21vbGVjdWxlUG9sYXJpdHkuanMnO1xyXG5pbXBvcnQgU3VyZmFjZU5vZGUsIHsgU3VyZmFjZU5vZGVPcHRpb25zIH0gZnJvbSAnLi9TdXJmYWNlTm9kZS5qcyc7XHJcbmltcG9ydCBEaWF0b21pY01vbGVjdWxlIGZyb20gJy4uL21vZGVsL0RpYXRvbWljTW9sZWN1bGUuanMnO1xyXG5cclxudHlwZSBFbGVjdHJvbkRlbnNpdHlTdXJmYWNlTm9kZU9wdGlvbnMgPSBTdXJmYWNlTm9kZU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVjdHJvbkRlbnNpdHlTdXJmYWNlTm9kZSBleHRlbmRzIFN1cmZhY2VOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2xlY3VsZTogRGlhdG9taWNNb2xlY3VsZSwgcHJvdmlkZWRPcHRpb25zOiBFbGVjdHJvbkRlbnNpdHlTdXJmYWNlTm9kZU9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggbW9sZWN1bGUsIE1QQ29sb3JzLkJXX0dSQURJRU5ULCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGhlIHN1cmZhY2UgZmlsbC4gV2lkdGggb2YgdGhlIGdyYWRpZW50IGV4cGFuZHMgYXMgdGhlIGRpZmZlcmVuY2UgaW4gRU4gYXBwcm9hY2hlcyB6ZXJvLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBvdmVycmlkZSB1cGRhdGVGaWxsKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5jb2xvcnMubGVuZ3RoID09PSAyLCAndGhpcyBpbXBsZW1lbnRhdGlvbiBvbmx5IHdvcmtzIGZvciAyIGNvbG9ycycgKTtcclxuXHJcbiAgICAvLyBzY2FsZSB2YXJpZXMgZnJvbSAxIHRvIDAsIGFwcHJvYWNoZXMgemVybyBhcyBFTiBkaWZmZXJlbmNlIGFwcHJvYWNoZXMgemVyby5cclxuICAgIGNvbnN0IGRlbHRhRU4gPSB0aGlzLm1vbGVjdWxlLmdldERlbHRhRU4oKTtcclxuXHJcbiAgICBpZiAoIGRlbHRhRU4gPT09IDAgKSB7XHJcblxyXG4gICAgICAvLyBubyBkaWZmZXJlbmNlLCB1c2UgbmV1dHJhbCBjb2xvciB0aGF0J3MgaGFsZndheSBiZXR3ZWVuIFwibW9yZVwiIGFuZCBcImxlc3NcIiBjb2xvcnNcclxuICAgICAgdGhpcy5wYXRoLmZpbGwgPSBNUENvbG9ycy5ORVVUUkFMX0dSQVk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY29uc3Qgc2NhbGUgPSBNYXRoLmFicyggZGVsdGFFTiAvIHRoaXMuZWxlY3Ryb25lZ2F0aXZpdHlSYW5nZS5nZXRMZW5ndGgoKSApO1xyXG5cclxuICAgICAgY29uc3Qgc3VyZmFjZVdpZHRoID0gdGhpcy5nZXRTdXJmYWNlV2lkdGgoKTtcclxuXHJcbiAgICAgIC8vIGNvbXB1dGUgdGhlIGdyYWRpZW50IHdpZHRoXHJcbiAgICAgIGNvbnN0IGdyYWRpZW50V2lkdGggPSBVdGlscy5saW5lYXIoIDEsIDAsIHN1cmZhY2VXaWR0aCwgc3VyZmFjZVdpZHRoICogTVBDb25zdGFudHMuU1VSRkFDRV9HUkFESUVOVF9XSURUSF9NVUxUSVBMSUVSLCBzY2FsZSApO1xyXG5cclxuICAgICAgLy8gZ3JhZGllbnQgZW5kcG9pbnRzIHByaW9yIHRvIGFjY291bnRpbmcgZm9yIG1vbGVjdWxlIHRyYW5zZm9ybVxyXG4gICAgICBjb25zdCBwb2ludEEgPSBuZXcgVmVjdG9yMiggLWdyYWRpZW50V2lkdGggLyAyLCAwICk7XHJcbiAgICAgIGNvbnN0IHBvaW50QiA9IG5ldyBWZWN0b3IyKCBncmFkaWVudFdpZHRoIC8gMiwgMCApO1xyXG5cclxuICAgICAgLy8gY2hvb3NlIGNvbG9ycyBiYXNlZCBvbiBwb2xhcml0eVxyXG4gICAgICBjb25zdCBjb2xvckEgPSAoIGRlbHRhRU4gPiAwICkgPyB0aGlzLmNvbG9yc1sgMSBdIDogdGhpcy5jb2xvcnNbIDAgXTtcclxuICAgICAgY29uc3QgY29sb3JCID0gKCBkZWx0YUVOID4gMCApID8gdGhpcy5jb2xvcnNbIDAgXSA6IHRoaXMuY29sb3JzWyAxIF07XHJcblxyXG4gICAgICAvLyBjcmVhdGUgdGhlIGdyYWRpZW50XHJcbiAgICAgIGNvbnN0IGdyYWRpZW50ID0gbmV3IExpbmVhckdyYWRpZW50KCBwb2ludEEueCwgcG9pbnRBLnksIHBvaW50Qi54LCBwb2ludEIueSApO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoIDAsIGNvbG9yQSApO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoIDEsIGNvbG9yQiApO1xyXG5cclxuICAgICAgdGhpcy5wYXRoLmZpbGwgPSBncmFkaWVudDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbm1vbGVjdWxlUG9sYXJpdHkucmVnaXN0ZXIoICdFbGVjdHJvbkRlbnNpdHlTdXJmYWNlTm9kZScsIEVsZWN0cm9uRGVuc2l0eVN1cmZhY2VOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7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