// Copyright 2014-2022, University of Colorado Boulder

/**
 * View for the 'Two Atoms' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import ScreenView from '../../../../joist/js/ScreenView.js';
import optionize from '../../../../phet-core/js/optionize.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import { HBox, Node } from '../../../../scenery/js/imports.js';
import MPConstants from '../../common/MPConstants.js';
import ElectronegativityPanel from '../../common/view/ElectronegativityPanel.js';
import PlatesNode from '../../common/view/PlatesNode.js';
import SurfaceColorKey from '../../common/view/SurfaceColorKey.js';
import moleculePolarity from '../../moleculePolarity.js';
import BondCharacterPanel from './BondCharacterPanel.js';
import DiatomicMoleculeNode from './DiatomicMoleculeNode.js';
import TwoAtomsControlPanel from './TwoAtomsControlPanel.js';
import TwoAtomsViewProperties from './TwoAtomsViewProperties.js';
export default class TwoAtomsScreenView extends ScreenView {
  constructor(model, providedOptions) {
    const options = optionize()({
      layoutBounds: MPConstants.LAYOUT_BOUNDS
    }, providedOptions);
    super(options);

    // view-specific Properties
    const viewProperties = new TwoAtomsViewProperties({
      tandem: options.tandem.createTandem('viewProperties')
    });
    const moleculeNode = new DiatomicMoleculeNode(model.diatomicMolecule, viewProperties, {
      tandem: options.tandem.createTandem('moleculeNode')
    });
    const platesNode = new PlatesNode(model.eFieldEnabledProperty);
    const electronegativityPanelsTandem = options.tandem.createTandem('electronegativityPanels');
    const atomAElectronegativityPanel = new ElectronegativityPanel(model.diatomicMolecule.atomA, model.diatomicMolecule, {
      tandem: electronegativityPanelsTandem.createTandem('atomAElectronegativityPanel')
    });
    const atomBElectronegativityPanel = new ElectronegativityPanel(model.diatomicMolecule.atomB, model.diatomicMolecule, {
      tandem: electronegativityPanelsTandem.createTandem('atomBElectronegativityPanel')
    });
    const electronegativityPanels = new HBox({
      spacing: 10,
      children: [atomAElectronegativityPanel, atomBElectronegativityPanel],
      tandem: electronegativityPanelsTandem
    });
    const bondCharacterPanel = new BondCharacterPanel(model.diatomicMolecule, {
      visibleProperty: viewProperties.bondCharacterVisibleProperty,
      tandem: options.tandem.createTandem('bondCharacterPanel')
    });

    // Group color keys under a common parent, so that PhET-iO can hide the color key.
    const colorKeysTandem = options.tandem.createTandem('colorKeys');
    const electrostaticPotentialColorKey = SurfaceColorKey.createElectrostaticPotentialRWBColorKey({
      tandem: colorKeysTandem.createTandem('electrostaticPotentialColorKey')
    });
    const electronDensityColorKey = SurfaceColorKey.createElectronDensityColorKey({
      tandem: colorKeysTandem.createTandem('electronDensityColorKey')
    });
    const colorKeysNode = new Node({
      children: [electrostaticPotentialColorKey, electronDensityColorKey]
    });
    const controlPanel = new TwoAtomsControlPanel(viewProperties, model.eFieldEnabledProperty, {
      tandem: options.tandem.createTandem('controlPanel')
    });
    const resetAllButton = new ResetAllButton({
      listener: () => {
        this.interruptSubtreeInput();
        model.reset();
        viewProperties.reset();
        moleculeNode.reset();
      },
      scale: 1.32,
      tandem: options.tandem.createTandem('resetAllButton')
    });

    // Parent for all nodes added to this screen
    const rootNode = new Node({
      children: [
      // nodes are rendered in this order
      platesNode, electronegativityPanels, controlPanel, bondCharacterPanel, colorKeysNode, moleculeNode, resetAllButton]
    });
    this.addChild(rootNode);

    // layout, based on molecule position ---------------------------------

    const moleculeX = model.diatomicMolecule.position.x;
    const moleculeY = model.diatomicMolecule.position.y;
    platesNode.centerX = moleculeX;
    platesNode.bottom = moleculeY + platesNode.plateHeight / 2;
    Multilink.multilink([electronegativityPanels.boundsProperty, bondCharacterPanel.boundsProperty], () => {
      // centered below molecule
      electronegativityPanels.centerX = moleculeX;
      electronegativityPanels.bottom = this.layoutBounds.bottom - 25;

      // centered above EN controls
      bondCharacterPanel.centerX = moleculeX;
      bondCharacterPanel.bottom = electronegativityPanels.top - 10;
    });

    // centered above molecule
    electrostaticPotentialColorKey.boundsProperty.link(() => {
      electrostaticPotentialColorKey.centerX = electronDensityColorKey.centerX = moleculeX;
      electrostaticPotentialColorKey.top = electronDensityColorKey.top = 25;
    });

    // to right of positive plate, top aligned
    controlPanel.left = platesNode.right + 70;
    controlPanel.top = platesNode.bottom - platesNode.plateHeight;

    // bottom-right corner of the screen
    resetAllButton.right = this.layoutBounds.right - 40;
    resetAllButton.bottom = this.layoutBounds.bottom - 20;

    // synchronization with view Properties ------------------------------

    viewProperties.surfaceTypeProperty.link(surfaceType => {
      electrostaticPotentialColorKey.visible = surfaceType === 'electrostaticPotential';
      electronDensityColorKey.visible = surfaceType === 'electronDensity';
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('TwoAtomsScreenView', TwoAtomsScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,