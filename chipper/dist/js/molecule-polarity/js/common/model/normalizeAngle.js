// Copyright 2021-2022, University of Colorado Boulder

/**
 * Normalizes an angle to be in a range whose length is 2 * PI.
 * This was created for https://github.com/phetsims/molecule-polarity/issues/91.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import moleculePolarity from '../../moleculePolarity.js';

// Length of the range
const RANGE_LENGTH = 2 * Math.PI;

/**
 * Normalizes an angle to the range [ minAngle, minAngle + 2 * PI )
 * @param angle - the angle to normalize, in radians
 * @param [minAngle] - minimum angle, in radians
 */
function normalizeAngle(angle, minAngle = 0) {
  // Shift to the range [0,2*PI)
  const shiftedAngle = angle - minAngle;

  // Normalize to [0,2*PI).
  let normalizedAngle = shiftedAngle % RANGE_LENGTH;
  if (normalizedAngle < 0) {
    normalizedAngle = shiftedAngle + RANGE_LENGTH;
  }

  // If we're at exactly 2*PI, wrap to zero, because our range is exclusive of max.
  if (normalizedAngle === RANGE_LENGTH) {
    normalizedAngle = 0;
  }

  // Shift back to the desired range.
  normalizedAngle += minAngle;
  assert && assert(normalizedAngle >= minAngle && normalizedAngle < minAngle + RANGE_LENGTH, `unexpected normalizedAngle: ${normalizedAngle} for angle=${angle}`);
  return normalizedAngle;
}
moleculePolarity.register('normalizeAngle', normalizeAngle);
export default normalizeAngle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2xlY3VsZVBvbGFyaXR5IiwiUkFOR0VfTEVOR1RIIiwiTWF0aCIsIlBJIiwibm9ybWFsaXplQW5nbGUiLCJhbmdsZSIsIm1pbkFuZ2xlIiwic2hpZnRlZEFuZ2xlIiwibm9ybWFsaXplZEFuZ2xlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJub3JtYWxpemVBbmdsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOb3JtYWxpemVzIGFuIGFuZ2xlIHRvIGJlIGluIGEgcmFuZ2Ugd2hvc2UgbGVuZ3RoIGlzIDIgKiBQSS5cclxuICogVGhpcyB3YXMgY3JlYXRlZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL21vbGVjdWxlLXBvbGFyaXR5L2lzc3Vlcy85MS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuXHJcbi8vIExlbmd0aCBvZiB0aGUgcmFuZ2VcclxuY29uc3QgUkFOR0VfTEVOR1RIID0gMiAqIE1hdGguUEk7XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplcyBhbiBhbmdsZSB0byB0aGUgcmFuZ2UgWyBtaW5BbmdsZSwgbWluQW5nbGUgKyAyICogUEkgKVxyXG4gKiBAcGFyYW0gYW5nbGUgLSB0aGUgYW5nbGUgdG8gbm9ybWFsaXplLCBpbiByYWRpYW5zXHJcbiAqIEBwYXJhbSBbbWluQW5nbGVdIC0gbWluaW11bSBhbmdsZSwgaW4gcmFkaWFuc1xyXG4gKi9cclxuZnVuY3Rpb24gbm9ybWFsaXplQW5nbGUoIGFuZ2xlOiBudW1iZXIsIG1pbkFuZ2xlID0gMCApOiBudW1iZXIge1xyXG5cclxuICAvLyBTaGlmdCB0byB0aGUgcmFuZ2UgWzAsMipQSSlcclxuICBjb25zdCBzaGlmdGVkQW5nbGUgPSBhbmdsZSAtIG1pbkFuZ2xlO1xyXG5cclxuICAvLyBOb3JtYWxpemUgdG8gWzAsMipQSSkuXHJcbiAgbGV0IG5vcm1hbGl6ZWRBbmdsZSA9IHNoaWZ0ZWRBbmdsZSAlIFJBTkdFX0xFTkdUSDtcclxuICBpZiAoIG5vcm1hbGl6ZWRBbmdsZSA8IDAgKSB7XHJcbiAgICBub3JtYWxpemVkQW5nbGUgPSBzaGlmdGVkQW5nbGUgKyBSQU5HRV9MRU5HVEg7XHJcbiAgfVxyXG5cclxuICAvLyBJZiB3ZSdyZSBhdCBleGFjdGx5IDIqUEksIHdyYXAgdG8gemVybywgYmVjYXVzZSBvdXIgcmFuZ2UgaXMgZXhjbHVzaXZlIG9mIG1heC5cclxuICBpZiAoIG5vcm1hbGl6ZWRBbmdsZSA9PT0gUkFOR0VfTEVOR1RIICkge1xyXG4gICAgbm9ybWFsaXplZEFuZ2xlID0gMDtcclxuICB9XHJcblxyXG4gIC8vIFNoaWZ0IGJhY2sgdG8gdGhlIGRlc2lyZWQgcmFuZ2UuXHJcbiAgbm9ybWFsaXplZEFuZ2xlICs9IG1pbkFuZ2xlO1xyXG5cclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBub3JtYWxpemVkQW5nbGUgPj0gbWluQW5nbGUgJiYgbm9ybWFsaXplZEFuZ2xlIDwgbWluQW5nbGUgKyBSQU5HRV9MRU5HVEgsXHJcbiAgICBgdW5leHBlY3RlZCBub3JtYWxpemVkQW5nbGU6ICR7bm9ybWFsaXplZEFuZ2xlfSBmb3IgYW5nbGU9JHthbmdsZX1gICk7XHJcbiAgcmV0dXJuIG5vcm1hbGl6ZWRBbmdsZTtcclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ25vcm1hbGl6ZUFuZ2xlJywgbm9ybWFsaXplQW5nbGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgbm9ybWFsaXplQW5nbGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZ0JBQWdCLE1BQU0sMkJBQTJCOztBQUV4RDtBQUNBLE1BQU1DLFlBQVksR0FBRyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsRUFBRTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGNBQWNBLENBQUVDLEtBQWEsRUFBRUMsUUFBUSxHQUFHLENBQUMsRUFBVztFQUU3RDtFQUNBLE1BQU1DLFlBQVksR0FBR0YsS0FBSyxHQUFHQyxRQUFROztFQUVyQztFQUNBLElBQUlFLGVBQWUsR0FBR0QsWUFBWSxHQUFHTixZQUFZO0VBQ2pELElBQUtPLGVBQWUsR0FBRyxDQUFDLEVBQUc7SUFDekJBLGVBQWUsR0FBR0QsWUFBWSxHQUFHTixZQUFZO0VBQy9DOztFQUVBO0VBQ0EsSUFBS08sZUFBZSxLQUFLUCxZQUFZLEVBQUc7SUFDdENPLGVBQWUsR0FBRyxDQUFDO0VBQ3JCOztFQUVBO0VBQ0FBLGVBQWUsSUFBSUYsUUFBUTtFQUUzQkcsTUFBTSxJQUFJQSxNQUFNLENBQUVELGVBQWUsSUFBSUYsUUFBUSxJQUFJRSxlQUFlLEdBQUdGLFFBQVEsR0FBR0wsWUFBWSxFQUN2RiwrQkFBOEJPLGVBQWdCLGNBQWFILEtBQU0sRUFBRSxDQUFDO0VBQ3ZFLE9BQU9HLGVBQWU7QUFDeEI7QUFFQVIsZ0JBQWdCLENBQUNVLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRU4sY0FBZSxDQUFDO0FBQzdELGVBQWVBLGNBQWMifQ==