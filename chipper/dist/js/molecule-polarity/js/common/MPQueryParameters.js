// Copyright 2014-2022, University of Colorado Boulder

/**
 * Query parameters supported by this simulation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import logGlobal from '../../../phet-core/js/logGlobal.js';
import moleculePolarity from '../moleculePolarity.js';
import { DipoleDirectionValues } from './model/DipoleDirection.js';
import { SurfaceColorValues } from './model/SurfaceColor.js';
const MPQueryParameters = QueryStringMachine.getAll({
  // Direction of the dipole, see MPPreferences.dipoleDirectionProperty
  dipoleDirection: {
    type: 'string',
    validValues: DipoleDirectionValues,
    defaultValue: 'positiveToNegative',
    public: true
  },
  // Surface color used for Electrostatic Potential surface in the Real Molecules screen.
  // See MPPreferences.surfaceColorProperty
  surfaceColor: {
    type: 'string',
    validValues: SurfaceColorValues,
    defaultValue: 'RWB',
    public: true
  },
  //TODO https://github.com/phetsims/molecule-polarity/issues/32 delete when the Real Molecules screen is fully implemented
  // Enables the 'Real Molecules' screen, for internal use only.
  realMolecules: {
    type: 'flag'
  },
  // Shows the molecule angle by adding an arrow whose tail is at the molecule center, and points
  // outward in the direction of the angle. For internal use only.
  showMoleculeAngle: {
    type: 'flag'
  }
});
moleculePolarity.register('MPQueryParameters', MPQueryParameters);

// Log query parameters
logGlobal('phet.chipper.queryParameters');
logGlobal('phet.preloads.phetio.queryParameters');
logGlobal('phet.moleculePolarity.MPQueryParameters');
export default MPQueryParameters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dHbG9iYWwiLCJtb2xlY3VsZVBvbGFyaXR5IiwiRGlwb2xlRGlyZWN0aW9uVmFsdWVzIiwiU3VyZmFjZUNvbG9yVmFsdWVzIiwiTVBRdWVyeVBhcmFtZXRlcnMiLCJRdWVyeVN0cmluZ01hY2hpbmUiLCJnZXRBbGwiLCJkaXBvbGVEaXJlY3Rpb24iLCJ0eXBlIiwidmFsaWRWYWx1ZXMiLCJkZWZhdWx0VmFsdWUiLCJwdWJsaWMiLCJzdXJmYWNlQ29sb3IiLCJyZWFsTW9sZWN1bGVzIiwic2hvd01vbGVjdWxlQW5nbGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1QUXVlcnlQYXJhbWV0ZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFF1ZXJ5IHBhcmFtZXRlcnMgc3VwcG9ydGVkIGJ5IHRoaXMgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbG9nR2xvYmFsIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9sb2dHbG9iYWwuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuaW1wb3J0IHsgRGlwb2xlRGlyZWN0aW9uVmFsdWVzIH0gZnJvbSAnLi9tb2RlbC9EaXBvbGVEaXJlY3Rpb24uanMnO1xyXG5pbXBvcnQgeyBTdXJmYWNlQ29sb3JWYWx1ZXMgfSBmcm9tICcuL21vZGVsL1N1cmZhY2VDb2xvci5qcyc7XHJcblxyXG5jb25zdCBNUFF1ZXJ5UGFyYW1ldGVycyA9IFF1ZXJ5U3RyaW5nTWFjaGluZS5nZXRBbGwoIHtcclxuXHJcbiAgLy8gRGlyZWN0aW9uIG9mIHRoZSBkaXBvbGUsIHNlZSBNUFByZWZlcmVuY2VzLmRpcG9sZURpcmVjdGlvblByb3BlcnR5XHJcbiAgZGlwb2xlRGlyZWN0aW9uOiB7XHJcbiAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgIHZhbGlkVmFsdWVzOiBEaXBvbGVEaXJlY3Rpb25WYWx1ZXMsXHJcbiAgICBkZWZhdWx0VmFsdWU6ICdwb3NpdGl2ZVRvTmVnYXRpdmUnLFxyXG4gICAgcHVibGljOiB0cnVlXHJcbiAgfSxcclxuXHJcbiAgLy8gU3VyZmFjZSBjb2xvciB1c2VkIGZvciBFbGVjdHJvc3RhdGljIFBvdGVudGlhbCBzdXJmYWNlIGluIHRoZSBSZWFsIE1vbGVjdWxlcyBzY3JlZW4uXHJcbiAgLy8gU2VlIE1QUHJlZmVyZW5jZXMuc3VyZmFjZUNvbG9yUHJvcGVydHlcclxuICBzdXJmYWNlQ29sb3I6IHtcclxuICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgdmFsaWRWYWx1ZXM6IFN1cmZhY2VDb2xvclZhbHVlcyxcclxuICAgIGRlZmF1bHRWYWx1ZTogJ1JXQicsXHJcbiAgICBwdWJsaWM6IHRydWVcclxuICB9LFxyXG5cclxuICAvL1RPRE8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL21vbGVjdWxlLXBvbGFyaXR5L2lzc3Vlcy8zMiBkZWxldGUgd2hlbiB0aGUgUmVhbCBNb2xlY3VsZXMgc2NyZWVuIGlzIGZ1bGx5IGltcGxlbWVudGVkXHJcbiAgLy8gRW5hYmxlcyB0aGUgJ1JlYWwgTW9sZWN1bGVzJyBzY3JlZW4sIGZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuICByZWFsTW9sZWN1bGVzOiB7IHR5cGU6ICdmbGFnJyB9LFxyXG5cclxuICAvLyBTaG93cyB0aGUgbW9sZWN1bGUgYW5nbGUgYnkgYWRkaW5nIGFuIGFycm93IHdob3NlIHRhaWwgaXMgYXQgdGhlIG1vbGVjdWxlIGNlbnRlciwgYW5kIHBvaW50c1xyXG4gIC8vIG91dHdhcmQgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgYW5nbGUuIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuICBzaG93TW9sZWN1bGVBbmdsZTogeyB0eXBlOiAnZmxhZycgfVxyXG59ICk7XHJcblxyXG5tb2xlY3VsZVBvbGFyaXR5LnJlZ2lzdGVyKCAnTVBRdWVyeVBhcmFtZXRlcnMnLCBNUFF1ZXJ5UGFyYW1ldGVycyApO1xyXG5cclxuLy8gTG9nIHF1ZXJ5IHBhcmFtZXRlcnNcclxubG9nR2xvYmFsKCAncGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycycgKTtcclxubG9nR2xvYmFsKCAncGhldC5wcmVsb2Fkcy5waGV0aW8ucXVlcnlQYXJhbWV0ZXJzJyApO1xyXG5sb2dHbG9iYWwoICdwaGV0Lm1vbGVjdWxlUG9sYXJpdHkuTVBRdWVyeVBhcmFtZXRlcnMnICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNUFF1ZXJ5UGFyYW1ldGVyczsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFDckQsU0FBU0MscUJBQXFCLFFBQVEsNEJBQTRCO0FBQ2xFLFNBQVNDLGtCQUFrQixRQUFRLHlCQUF5QjtBQUU1RCxNQUFNQyxpQkFBaUIsR0FBR0Msa0JBQWtCLENBQUNDLE1BQU0sQ0FBRTtFQUVuRDtFQUNBQyxlQUFlLEVBQUU7SUFDZkMsSUFBSSxFQUFFLFFBQVE7SUFDZEMsV0FBVyxFQUFFUCxxQkFBcUI7SUFDbENRLFlBQVksRUFBRSxvQkFBb0I7SUFDbENDLE1BQU0sRUFBRTtFQUNWLENBQUM7RUFFRDtFQUNBO0VBQ0FDLFlBQVksRUFBRTtJQUNaSixJQUFJLEVBQUUsUUFBUTtJQUNkQyxXQUFXLEVBQUVOLGtCQUFrQjtJQUMvQk8sWUFBWSxFQUFFLEtBQUs7SUFDbkJDLE1BQU0sRUFBRTtFQUNWLENBQUM7RUFFRDtFQUNBO0VBQ0FFLGFBQWEsRUFBRTtJQUFFTCxJQUFJLEVBQUU7RUFBTyxDQUFDO0VBRS9CO0VBQ0E7RUFDQU0saUJBQWlCLEVBQUU7SUFBRU4sSUFBSSxFQUFFO0VBQU87QUFDcEMsQ0FBRSxDQUFDO0FBRUhQLGdCQUFnQixDQUFDYyxRQUFRLENBQUUsbUJBQW1CLEVBQUVYLGlCQUFrQixDQUFDOztBQUVuRTtBQUNBSixTQUFTLENBQUUsOEJBQStCLENBQUM7QUFDM0NBLFNBQVMsQ0FBRSxzQ0FBdUMsQ0FBQztBQUNuREEsU0FBUyxDQUFFLHlDQUEwQyxDQUFDO0FBRXRELGVBQWVJLGlCQUFpQiJ9