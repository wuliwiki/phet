// Copyright 2015-2022, University of Colorado Boulder

/**
 * Control for selecting surface color that appears in the Preferences dialog.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
import MPConstants from '../MPConstants.js';
import optionize from '../../../../phet-core/js/optionize.js';
import SurfaceColorKey from './SurfaceColorKey.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import PreferencesDialog from '../../../../joist/js/preferences/PreferencesDialog.js';
// constants
const COLOR_KEY_OPTIONS = {
  size: new Dimension2(150, 15),
  titleVisible: false,
  rangeFont: new PhetFont(8),
  xMargin: 0,
  ySpacing: 2,
  tandem: Tandem.OPT_OUT
};
export default class SurfaceColorControl extends VBox {
  constructor(surfaceColorProperty, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING
    }, providedOptions);
    const titleText = new Text(MoleculePolarityStrings.surfaceColorRealMoleculesStringProperty, {
      font: PreferencesDialog.CONTENT_FONT,
      maxWidth: 400,
      tandem: options.tandem.createTandem('titleText')
    });
    const radioButtonGroup = new SurfaceColorRadioButtonGroup(surfaceColorProperty, {
      tandem: options.tandem.createTandem('radioButtonGroup')
    });
    options.children = [titleText, radioButtonGroup];
    super(options);
    this.disposeSurfaceColorControl = () => {
      titleText.dispose();
      radioButtonGroup.dispose();
    };
  }
  dispose() {
    this.disposeSurfaceColorControl();
    super.dispose();
  }
}

/**
 * SurfaceColorRadioButtonGroup is the radio button group for choosing a color for the molecule surface.
 */

class SurfaceColorRadioButtonGroup extends VerticalAquaRadioButtonGroup {
  constructor(surfaceColorProperty, providedOptions) {
    const options = optionize()({
      // VerticalAquaRadioButtonGroupOptions
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING,
      radioButtonOptions: MPConstants.AQUA_RADIO_BUTTON_OPTIONS
    }, providedOptions);
    const radioButtonGroupItems = [{
      value: 'RWB',
      createNode: tandem => SurfaceColorKey.createElectrostaticPotentialRWBColorKey(COLOR_KEY_OPTIONS),
      tandemName: 'RWBRadioButton'
    }, {
      value: 'ROYGB',
      createNode: tandem => SurfaceColorKey.createElectrostaticPotentialROYGBColorKey(COLOR_KEY_OPTIONS),
      tandemName: 'ROYGBRadioButton'
    }];
    super(surfaceColorProperty, radioButtonGroupItems, options);
  }
}
moleculePolarity.register('SurfaceColorControl', SurfaceColorControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,