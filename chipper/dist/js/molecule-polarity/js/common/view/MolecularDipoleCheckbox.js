// Copyright 2021-2022, University of Colorado Boulder

/**
 * MolecularDipoleCheckbox is the checkbox for controlling visibility of the molecular dipole.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HBox, Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import MPConstants from '../../common/MPConstants.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
import MolecularDipoleNode from './MolecularDipoleNode.js';
export default class MolecularDipoleCheckbox extends Checkbox {
  constructor(molecularDipoleVisibleProperty, providedOptions) {
    const options = providedOptions;
    const labelText = new Text(MoleculePolarityStrings.molecularDipoleStringProperty, combineOptions({}, MPConstants.CONTROL_TEXT_OPTIONS, {
      tandem: options.tandem.createTandem('labelText')
    }));
    const iconNode = MolecularDipoleNode.createIcon();
    const content = new HBox({
      children: [labelText, iconNode],
      spacing: MPConstants.CONTROL_ICON_X_SPACING
    });
    super(molecularDipoleVisibleProperty, content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('MolecularDipoleCheckbox', MolecularDipoleCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21iaW5lT3B0aW9ucyIsIkhCb3giLCJUZXh0IiwiQ2hlY2tib3giLCJNUENvbnN0YW50cyIsIm1vbGVjdWxlUG9sYXJpdHkiLCJNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyIsIk1vbGVjdWxhckRpcG9sZU5vZGUiLCJNb2xlY3VsYXJEaXBvbGVDaGVja2JveCIsImNvbnN0cnVjdG9yIiwibW9sZWN1bGFyRGlwb2xlVmlzaWJsZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImxhYmVsVGV4dCIsIm1vbGVjdWxhckRpcG9sZVN0cmluZ1Byb3BlcnR5IiwiQ09OVFJPTF9URVhUX09QVElPTlMiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJpY29uTm9kZSIsImNyZWF0ZUljb24iLCJjb250ZW50IiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiQ09OVFJPTF9JQ09OX1hfU1BBQ0lORyIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1vbGVjdWxhckRpcG9sZUNoZWNrYm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vbGVjdWxhckRpcG9sZUNoZWNrYm94IGlzIHRoZSBjaGVja2JveCBmb3IgY29udHJvbGxpbmcgdmlzaWJpbGl0eSBvZiB0aGUgbW9sZWN1bGFyIGRpcG9sZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IGNvbWJpbmVPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIFRleHQsIFRleHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94LCB7IENoZWNrYm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBNUENvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vTVBDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuaW1wb3J0IE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIGZyb20gJy4uLy4uL01vbGVjdWxlUG9sYXJpdHlTdHJpbmdzLmpzJztcclxuaW1wb3J0IE1vbGVjdWxhckRpcG9sZU5vZGUgZnJvbSAnLi9Nb2xlY3VsYXJEaXBvbGVOb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBNb2xlY3VsYXJEaXBvbGVDaGVja2JveE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxDaGVja2JveE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbGVjdWxhckRpcG9sZUNoZWNrYm94IGV4dGVuZHMgQ2hlY2tib3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vbGVjdWxhckRpcG9sZVZpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIHByb3ZpZGVkT3B0aW9uczogTW9sZWN1bGFyRGlwb2xlQ2hlY2tib3hPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBwcm92aWRlZE9wdGlvbnM7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFRleHQoIE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzLm1vbGVjdWxhckRpcG9sZVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxUZXh0T3B0aW9ucz4oIHt9LCBNUENvbnN0YW50cy5DT05UUk9MX1RFWFRfT1BUSU9OUywge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxUZXh0JyApXHJcbiAgICAgIH0gKSApO1xyXG5cclxuICAgIGNvbnN0IGljb25Ob2RlID0gTW9sZWN1bGFyRGlwb2xlTm9kZS5jcmVhdGVJY29uKCk7XHJcblxyXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBIQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIGxhYmVsVGV4dCwgaWNvbk5vZGUgXSxcclxuICAgICAgc3BhY2luZzogTVBDb25zdGFudHMuQ09OVFJPTF9JQ09OX1hfU1BBQ0lOR1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBtb2xlY3VsYXJEaXBvbGVWaXNpYmxlUHJvcGVydHksIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2xlY3VsZVBvbGFyaXR5LnJlZ2lzdGVyKCAnTW9sZWN1bGFyRGlwb2xlQ2hlY2tib3gnLCBNb2xlY3VsYXJEaXBvbGVDaGVja2JveCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxTQUFTQSxjQUFjLFFBQTBCLHVDQUF1QztBQUV4RixTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBcUIsbUNBQW1DO0FBQzNFLE9BQU9DLFFBQVEsTUFBMkIsZ0NBQWdDO0FBQzFFLE9BQU9DLFdBQVcsTUFBTSw2QkFBNkI7QUFDckQsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyxtQkFBbUIsTUFBTSwwQkFBMEI7QUFNMUQsZUFBZSxNQUFNQyx1QkFBdUIsU0FBU0wsUUFBUSxDQUFDO0VBRXJETSxXQUFXQSxDQUFFQyw4QkFBaUQsRUFBRUMsZUFBK0MsRUFBRztJQUV2SCxNQUFNQyxPQUFPLEdBQUdELGVBQWU7SUFFL0IsTUFBTUUsU0FBUyxHQUFHLElBQUlYLElBQUksQ0FBRUksdUJBQXVCLENBQUNRLDZCQUE2QixFQUMvRWQsY0FBYyxDQUFlLENBQUMsQ0FBQyxFQUFFSSxXQUFXLENBQUNXLG9CQUFvQixFQUFFO01BQ2pFQyxNQUFNLEVBQUVKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDQyxZQUFZLENBQUUsV0FBWTtJQUNuRCxDQUFFLENBQUUsQ0FBQztJQUVQLE1BQU1DLFFBQVEsR0FBR1gsbUJBQW1CLENBQUNZLFVBQVUsQ0FBQyxDQUFDO0lBRWpELE1BQU1DLE9BQU8sR0FBRyxJQUFJbkIsSUFBSSxDQUFFO01BQ3hCb0IsUUFBUSxFQUFFLENBQUVSLFNBQVMsRUFBRUssUUFBUSxDQUFFO01BQ2pDSSxPQUFPLEVBQUVsQixXQUFXLENBQUNtQjtJQUN2QixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUViLDhCQUE4QixFQUFFVSxPQUFPLEVBQUVSLE9BQVEsQ0FBQztFQUMzRDtFQUVnQlksT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFuQixnQkFBZ0IsQ0FBQ3FCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRWxCLHVCQUF3QixDQUFDIn0=