// Copyright 2014-2023, University of Colorado Boulder

/**
 * MoleculeAngleDragListener is the drag listener for manipulating orientation of a molecule.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { DragListener } from '../../../../scenery/js/imports.js';
import moleculePolarity from '../../moleculePolarity.js';
import normalizeAngle from '../model/normalizeAngle.js';
export default class MoleculeAngleDragListener extends DragListener {
  /**
   * @param molecule
   * @param relativeNode - angles are computed relative to this Node
   * @param [providedOptions]
   */
  constructor(molecule, relativeNode, providedOptions) {
    const options = optionize()({
      // DragListenerOptions
      allowTouchSnag: true
    }, providedOptions);
    let previousAngle; // angle between the pointer and the molecule when the drag started

    // Gets the angle (in radians) of the pointer, relative to relativeNode.
    const getAngle = event => {
      const point = relativeNode.globalToParentPoint(event.pointer.point);
      return new Vector2(point.x - molecule.position.x, point.y - molecule.position.y).angle;
    };
    options.start = event => {
      molecule.isDraggingProperty.value = true;
      previousAngle = getAngle(event);
    };
    const angleRange = molecule.angleProperty.range;
    options.drag = event => {
      const currentAngle = getAngle(event);
      molecule.angleProperty.value = normalizeAngle(molecule.angleProperty.value + currentAngle - previousAngle, angleRange.min);
      previousAngle = currentAngle;
    };
    options.end = () => {
      molecule.isDraggingProperty.value = false;
    };
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('MoleculeAngleDragListener', MoleculeAngleDragListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwib3B0aW9uaXplIiwiRHJhZ0xpc3RlbmVyIiwibW9sZWN1bGVQb2xhcml0eSIsIm5vcm1hbGl6ZUFuZ2xlIiwiTW9sZWN1bGVBbmdsZURyYWdMaXN0ZW5lciIsImNvbnN0cnVjdG9yIiwibW9sZWN1bGUiLCJyZWxhdGl2ZU5vZGUiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYWxsb3dUb3VjaFNuYWciLCJwcmV2aW91c0FuZ2xlIiwiZ2V0QW5nbGUiLCJldmVudCIsInBvaW50IiwiZ2xvYmFsVG9QYXJlbnRQb2ludCIsInBvaW50ZXIiLCJ4IiwicG9zaXRpb24iLCJ5IiwiYW5nbGUiLCJzdGFydCIsImlzRHJhZ2dpbmdQcm9wZXJ0eSIsInZhbHVlIiwiYW5nbGVSYW5nZSIsImFuZ2xlUHJvcGVydHkiLCJyYW5nZSIsImRyYWciLCJjdXJyZW50QW5nbGUiLCJtaW4iLCJlbmQiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNb2xlY3VsZUFuZ2xlRHJhZ0xpc3RlbmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vbGVjdWxlQW5nbGVEcmFnTGlzdGVuZXIgaXMgdGhlIGRyYWcgbGlzdGVuZXIgZm9yIG1hbmlwdWxhdGluZyBvcmllbnRhdGlvbiBvZiBhIG1vbGVjdWxlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrT3B0aW9uYWwgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tPcHRpb25hbC5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciwgRHJhZ0xpc3RlbmVyT3B0aW9ucywgTm9kZSwgUHJlc3NlZERyYWdMaXN0ZW5lciwgU2NlbmVyeUV2ZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4uL21vZGVsL01vbGVjdWxlLmpzJztcclxuaW1wb3J0IG5vcm1hbGl6ZUFuZ2xlIGZyb20gJy4uL21vZGVsL25vcm1hbGl6ZUFuZ2xlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBNb2xlY3VsZUFuZ2xlRHJhZ0xpc3RlbmVyT3B0aW9ucyA9IFNlbGZPcHRpb25zICZcclxuICBQaWNrUmVxdWlyZWQ8RHJhZ0xpc3RlbmVyT3B0aW9uczxQcmVzc2VkRHJhZ0xpc3RlbmVyPiwgJ3RhbmRlbSc+ICZcclxuICAvL1RPRE8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2F4b24vaXNzdWVzLzQxMiB1bnRpbCBmaXhlZCwgcGhldGlvRG9jdW1lbnRhdGlvbiBpcyBpZ25vcmVkXHJcbiAgLy9QaWNrT3B0aW9uYWw8RHJhZ0xpc3RlbmVyT3B0aW9uczxQcmVzc2VkRHJhZ0xpc3RlbmVyPiwgJ3BoZXRpb0RvY3VtZW50YXRpb24nPlxyXG4gIFBpY2tPcHRpb25hbDxQaGV0aW9PYmplY3RPcHRpb25zLCAncGhldGlvRG9jdW1lbnRhdGlvbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9sZWN1bGVBbmdsZURyYWdMaXN0ZW5lciBleHRlbmRzIERyYWdMaXN0ZW5lciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBtb2xlY3VsZVxyXG4gICAqIEBwYXJhbSByZWxhdGl2ZU5vZGUgLSBhbmdsZXMgYXJlIGNvbXB1dGVkIHJlbGF0aXZlIHRvIHRoaXMgTm9kZVxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9sZWN1bGU6IE1vbGVjdWxlLCByZWxhdGl2ZU5vZGU6IE5vZGUsIHByb3ZpZGVkT3B0aW9uczogTW9sZWN1bGVBbmdsZURyYWdMaXN0ZW5lck9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxNb2xlY3VsZUFuZ2xlRHJhZ0xpc3RlbmVyT3B0aW9ucywgU2VsZk9wdGlvbnMsIERyYWdMaXN0ZW5lck9wdGlvbnM8UHJlc3NlZERyYWdMaXN0ZW5lcj4+KCkoIHtcclxuXHJcbiAgICAgIC8vIERyYWdMaXN0ZW5lck9wdGlvbnNcclxuICAgICAgYWxsb3dUb3VjaFNuYWc6IHRydWVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGxldCBwcmV2aW91c0FuZ2xlOiBudW1iZXI7IC8vIGFuZ2xlIGJldHdlZW4gdGhlIHBvaW50ZXIgYW5kIHRoZSBtb2xlY3VsZSB3aGVuIHRoZSBkcmFnIHN0YXJ0ZWRcclxuXHJcbiAgICAvLyBHZXRzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgb2YgdGhlIHBvaW50ZXIsIHJlbGF0aXZlIHRvIHJlbGF0aXZlTm9kZS5cclxuICAgIGNvbnN0IGdldEFuZ2xlID0gKCBldmVudDogU2NlbmVyeUV2ZW50ICkgPT4ge1xyXG4gICAgICBjb25zdCBwb2ludCA9IHJlbGF0aXZlTm9kZS5nbG9iYWxUb1BhcmVudFBvaW50KCBldmVudC5wb2ludGVyLnBvaW50ICk7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMiggcG9pbnQueCAtIG1vbGVjdWxlLnBvc2l0aW9uLngsIHBvaW50LnkgLSBtb2xlY3VsZS5wb3NpdGlvbi55ICkuYW5nbGU7XHJcbiAgICB9O1xyXG5cclxuICAgIG9wdGlvbnMuc3RhcnQgPSBldmVudCA9PiB7XHJcbiAgICAgIG1vbGVjdWxlLmlzRHJhZ2dpbmdQcm9wZXJ0eS52YWx1ZSA9IHRydWU7XHJcbiAgICAgIHByZXZpb3VzQW5nbGUgPSBnZXRBbmdsZSggZXZlbnQgKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgYW5nbGVSYW5nZSA9IG1vbGVjdWxlLmFuZ2xlUHJvcGVydHkucmFuZ2U7XHJcblxyXG4gICAgb3B0aW9ucy5kcmFnID0gZXZlbnQgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50QW5nbGUgPSBnZXRBbmdsZSggZXZlbnQgKTtcclxuICAgICAgbW9sZWN1bGUuYW5nbGVQcm9wZXJ0eS52YWx1ZSA9XHJcbiAgICAgICAgbm9ybWFsaXplQW5nbGUoIG1vbGVjdWxlLmFuZ2xlUHJvcGVydHkudmFsdWUgKyBjdXJyZW50QW5nbGUgLSBwcmV2aW91c0FuZ2xlLCBhbmdsZVJhbmdlLm1pbiApO1xyXG4gICAgICBwcmV2aW91c0FuZ2xlID0gY3VycmVudEFuZ2xlO1xyXG4gICAgfTtcclxuXHJcbiAgICBvcHRpb25zLmVuZCA9ICgpID0+IHtcclxuICAgICAgbW9sZWN1bGUuaXNEcmFnZ2luZ1Byb3BlcnR5LnZhbHVlID0gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ01vbGVjdWxlQW5nbGVEcmFnTGlzdGVuZXInLCBNb2xlY3VsZUFuZ2xlRHJhZ0xpc3RlbmVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFHbkYsU0FBU0MsWUFBWSxRQUFzRSxtQ0FBbUM7QUFFOUgsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBRXhELE9BQU9DLGNBQWMsTUFBTSw0QkFBNEI7QUFVdkQsZUFBZSxNQUFNQyx5QkFBeUIsU0FBU0gsWUFBWSxDQUFDO0VBRWxFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsUUFBa0IsRUFBRUMsWUFBa0IsRUFBRUMsZUFBaUQsRUFBRztJQUU5RyxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBMEYsQ0FBQyxDQUFFO01BRXBIO01BQ0FVLGNBQWMsRUFBRTtJQUNsQixDQUFDLEVBQUVGLGVBQWdCLENBQUM7SUFFcEIsSUFBSUcsYUFBcUIsQ0FBQyxDQUFDOztJQUUzQjtJQUNBLE1BQU1DLFFBQVEsR0FBS0MsS0FBbUIsSUFBTTtNQUMxQyxNQUFNQyxLQUFLLEdBQUdQLFlBQVksQ0FBQ1EsbUJBQW1CLENBQUVGLEtBQUssQ0FBQ0csT0FBTyxDQUFDRixLQUFNLENBQUM7TUFDckUsT0FBTyxJQUFJZixPQUFPLENBQUVlLEtBQUssQ0FBQ0csQ0FBQyxHQUFHWCxRQUFRLENBQUNZLFFBQVEsQ0FBQ0QsQ0FBQyxFQUFFSCxLQUFLLENBQUNLLENBQUMsR0FBR2IsUUFBUSxDQUFDWSxRQUFRLENBQUNDLENBQUUsQ0FBQyxDQUFDQyxLQUFLO0lBQzFGLENBQUM7SUFFRFgsT0FBTyxDQUFDWSxLQUFLLEdBQUdSLEtBQUssSUFBSTtNQUN2QlAsUUFBUSxDQUFDZ0Isa0JBQWtCLENBQUNDLEtBQUssR0FBRyxJQUFJO01BQ3hDWixhQUFhLEdBQUdDLFFBQVEsQ0FBRUMsS0FBTSxDQUFDO0lBQ25DLENBQUM7SUFFRCxNQUFNVyxVQUFVLEdBQUdsQixRQUFRLENBQUNtQixhQUFhLENBQUNDLEtBQUs7SUFFL0NqQixPQUFPLENBQUNrQixJQUFJLEdBQUdkLEtBQUssSUFBSTtNQUN0QixNQUFNZSxZQUFZLEdBQUdoQixRQUFRLENBQUVDLEtBQU0sQ0FBQztNQUN0Q1AsUUFBUSxDQUFDbUIsYUFBYSxDQUFDRixLQUFLLEdBQzFCcEIsY0FBYyxDQUFFRyxRQUFRLENBQUNtQixhQUFhLENBQUNGLEtBQUssR0FBR0ssWUFBWSxHQUFHakIsYUFBYSxFQUFFYSxVQUFVLENBQUNLLEdBQUksQ0FBQztNQUMvRmxCLGFBQWEsR0FBR2lCLFlBQVk7SUFDOUIsQ0FBQztJQUVEbkIsT0FBTyxDQUFDcUIsR0FBRyxHQUFHLE1BQU07TUFDbEJ4QixRQUFRLENBQUNnQixrQkFBa0IsQ0FBQ0MsS0FBSyxHQUFHLEtBQUs7SUFDM0MsQ0FBQztJQUVELEtBQUssQ0FBRWQsT0FBUSxDQUFDO0VBQ2xCO0VBRWdCc0IsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUE3QixnQkFBZ0IsQ0FBQytCLFFBQVEsQ0FBRSwyQkFBMkIsRUFBRTdCLHlCQUEwQixDQUFDIn0=