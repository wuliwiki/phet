// Copyright 2021-2022, University of Colorado Boulder

/**
 * BondDipolesCheckbox is the checkbox for controlling visibility of one or more bond dipoles.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HBox, Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import MPConstants from '../../common/MPConstants.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
import BondDipoleNode from './BondDipoleNode.js';
export default class BondDipolesCheckbox extends Checkbox {
  constructor(bondDipolesVisibleProperty, providedOptions) {
    const options = optionize()({
      // BondDipolesCheckboxOptions
      singular: false
    }, providedOptions);
    const stringProperty = options.singular ? MoleculePolarityStrings.bondDipoleStringProperty : MoleculePolarityStrings.bondDipolesStringProperty;
    const labelText = new Text(stringProperty, combineOptions({}, MPConstants.CONTROL_TEXT_OPTIONS, {
      tandem: options.tandem.createTandem('labelText')
    }));
    const iconNode = BondDipoleNode.createIcon();
    const content = new HBox({
      children: [labelText, iconNode],
      spacing: MPConstants.CONTROL_ICON_X_SPACING
    });
    super(bondDipolesVisibleProperty, content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('BondDipolesCheckbox', BondDipolesCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkhCb3giLCJUZXh0IiwiQ2hlY2tib3giLCJNUENvbnN0YW50cyIsIm1vbGVjdWxlUG9sYXJpdHkiLCJNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyIsIkJvbmREaXBvbGVOb2RlIiwiQm9uZERpcG9sZXNDaGVja2JveCIsImNvbnN0cnVjdG9yIiwiYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic2luZ3VsYXIiLCJzdHJpbmdQcm9wZXJ0eSIsImJvbmREaXBvbGVTdHJpbmdQcm9wZXJ0eSIsImJvbmREaXBvbGVzU3RyaW5nUHJvcGVydHkiLCJsYWJlbFRleHQiLCJDT05UUk9MX1RFWFRfT1BUSU9OUyIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImljb25Ob2RlIiwiY3JlYXRlSWNvbiIsImNvbnRlbnQiLCJjaGlsZHJlbiIsInNwYWNpbmciLCJDT05UUk9MX0lDT05fWF9TUEFDSU5HIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQm9uZERpcG9sZXNDaGVja2JveC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCb25kRGlwb2xlc0NoZWNrYm94IGlzIHRoZSBjaGVja2JveCBmb3IgY29udHJvbGxpbmcgdmlzaWJpbGl0eSBvZiBvbmUgb3IgbW9yZSBib25kIGRpcG9sZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIFRleHQsIFRleHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94LCB7IENoZWNrYm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBNUENvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vTVBDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuaW1wb3J0IE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIGZyb20gJy4uLy4uL01vbGVjdWxlUG9sYXJpdHlTdHJpbmdzLmpzJztcclxuaW1wb3J0IEJvbmREaXBvbGVOb2RlIGZyb20gJy4vQm9uZERpcG9sZU5vZGUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBzaW5ndWxhcj86IGJvb2xlYW47IC8vIHdoZXRoZXIgdGhlIFRleHQgbGFiZWwgc2hvdWxkIGJlIHNpbmd1bGFyIG9yIHBsdXJhbFxyXG59O1xyXG5cclxudHlwZSBCb25kRGlwb2xlc0NoZWNrYm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPENoZWNrYm94T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9uZERpcG9sZXNDaGVja2JveCBleHRlbmRzIENoZWNrYm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBib25kRGlwb2xlc1Zpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIHByb3ZpZGVkT3B0aW9uczogQm9uZERpcG9sZXNDaGVja2JveE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCb25kRGlwb2xlc0NoZWNrYm94T3B0aW9ucywgU2VsZk9wdGlvbnMsIENoZWNrYm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gQm9uZERpcG9sZXNDaGVja2JveE9wdGlvbnNcclxuICAgICAgc2luZ3VsYXI6IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBzdHJpbmdQcm9wZXJ0eSA9IG9wdGlvbnMuc2luZ3VsYXIgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5ib25kRGlwb2xlU3RyaW5nUHJvcGVydHkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5ib25kRGlwb2xlc1N0cmluZ1Byb3BlcnR5O1xyXG5cclxuICAgIGNvbnN0IGxhYmVsVGV4dCA9IG5ldyBUZXh0KCBzdHJpbmdQcm9wZXJ0eSwgY29tYmluZU9wdGlvbnM8VGV4dE9wdGlvbnM+KCB7fSwgTVBDb25zdGFudHMuQ09OVFJPTF9URVhUX09QVElPTlMsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnIClcclxuICAgIH0gKSApO1xyXG5cclxuICAgIGNvbnN0IGljb25Ob2RlID0gQm9uZERpcG9sZU5vZGUuY3JlYXRlSWNvbigpO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogWyBsYWJlbFRleHQsIGljb25Ob2RlIF0sXHJcbiAgICAgIHNwYWNpbmc6IE1QQ29uc3RhbnRzLkNPTlRST0xfSUNPTl9YX1NQQUNJTkdcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHksIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2xlY3VsZVBvbGFyaXR5LnJlZ2lzdGVyKCAnQm9uZERpcG9sZXNDaGVja2JveCcsIEJvbmREaXBvbGVzQ2hlY2tib3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxJQUFJQyxjQUFjLFFBQVEsdUNBQXVDO0FBRWpGLFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFxQixtQ0FBbUM7QUFDM0UsT0FBT0MsUUFBUSxNQUEyQixnQ0FBZ0M7QUFDMUUsT0FBT0MsV0FBVyxNQUFNLDZCQUE2QjtBQUNyRCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBQ3RFLE9BQU9DLGNBQWMsTUFBTSxxQkFBcUI7QUFRaEQsZUFBZSxNQUFNQyxtQkFBbUIsU0FBU0wsUUFBUSxDQUFDO0VBRWpETSxXQUFXQSxDQUFFQywwQkFBNkMsRUFBRUMsZUFBMkMsRUFBRztJQUUvRyxNQUFNQyxPQUFPLEdBQUdiLFNBQVMsQ0FBMkQsQ0FBQyxDQUFFO01BRXJGO01BQ0FjLFFBQVEsRUFBRTtJQUNaLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQixNQUFNRyxjQUFjLEdBQUdGLE9BQU8sQ0FBQ0MsUUFBUSxHQUNoQlAsdUJBQXVCLENBQUNTLHdCQUF3QixHQUNoRFQsdUJBQXVCLENBQUNVLHlCQUF5QjtJQUV4RSxNQUFNQyxTQUFTLEdBQUcsSUFBSWYsSUFBSSxDQUFFWSxjQUFjLEVBQUVkLGNBQWMsQ0FBZSxDQUFDLENBQUMsRUFBRUksV0FBVyxDQUFDYyxvQkFBb0IsRUFBRTtNQUM3R0MsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFdBQVk7SUFDbkQsQ0FBRSxDQUFFLENBQUM7SUFFTCxNQUFNQyxRQUFRLEdBQUdkLGNBQWMsQ0FBQ2UsVUFBVSxDQUFDLENBQUM7SUFFNUMsTUFBTUMsT0FBTyxHQUFHLElBQUl0QixJQUFJLENBQUU7TUFDeEJ1QixRQUFRLEVBQUUsQ0FBRVAsU0FBUyxFQUFFSSxRQUFRLENBQUU7TUFDakNJLE9BQU8sRUFBRXJCLFdBQVcsQ0FBQ3NCO0lBQ3ZCLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRWhCLDBCQUEwQixFQUFFYSxPQUFPLEVBQUVYLE9BQVEsQ0FBQztFQUN2RDtFQUVnQmUsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUF0QixnQkFBZ0IsQ0FBQ3dCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRXJCLG1CQUFvQixDQUFDIn0=