// Copyright 2017-2022, University of Colorado Boulder

/**
 * Dipole direction control that appears in the Preferences dialog. It is a radio button group with a label.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Text, VBox } from '../../../../scenery/js/imports.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
import MPConstants from '../MPConstants.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PreferencesDialog from '../../../../joist/js/preferences/PreferencesDialog.js';
import PatternStringProperty from '../../../../axon/js/PatternStringProperty.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import StringIO from '../../../../tandem/js/types/StringIO.js';
export default class DipoleDirectionControl extends VBox {
  constructor(dipoleDirectionProperty, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING
    }, providedOptions);

    // title
    const dipoleDirectionText = new Text(MoleculePolarityStrings.dipoleDirectionStringProperty, {
      font: PreferencesDialog.CONTENT_FONT,
      maxWidth: 500,
      tandem: options.tandem.createTandem('dipoleDirectionText')
    });

    // Radio button group
    const radioButtonGroup = new DipoleDirectionRadioButtonGroup(dipoleDirectionProperty, {
      tandem: options.tandem.createTandem('radioButtonGroup')
    });
    options.children = [dipoleDirectionText, radioButtonGroup];
    super(options);
    this.disposeDipoleDirectionControl = () => {
      dipoleDirectionText.dispose();
      radioButtonGroup.dispose();
    };
  }
  dispose() {
    this.disposeDipoleDirectionControl();
    super.dispose();
  }
}

/**
 * DipoleDirectionRadioButtonGroup is the radio button group for choosing dipole direction.
 */

class DipoleDirectionRadioButtonGroup extends VerticalAquaRadioButtonGroup {
  constructor(dipoleDirectionProperty, providedOptions) {
    const options = optionize()({
      // VerticalAquaRadioButtonGroupOptions
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING,
      radioButtonOptions: MPConstants.AQUA_RADIO_BUTTON_OPTIONS
    }, providedOptions);

    // d+ -> d-
    const positiveToNegativeStringProperty = new PatternStringProperty(MoleculePolarityStrings.pattern.dipoleDirectionStringProperty, {
      from: MoleculePolarityStrings.deltaPlusStringProperty,
      to: MoleculePolarityStrings.deltaMinusStringProperty
    }, {
      tandem: options.tandem.createTandem('positiveToNegativeStringProperty'),
      phetioValueType: StringIO
    });

    // d- -> d+
    const negativeToPositiveStringProperty = new PatternStringProperty(MoleculePolarityStrings.pattern.dipoleDirectionStringProperty, {
      from: MoleculePolarityStrings.deltaMinusStringProperty,
      to: MoleculePolarityStrings.deltaPlusStringProperty
    }, {
      tandem: options.tandem.createTandem('negativeToPositiveStringProperty'),
      phetioValueType: StringIO
    });
    const radioButtonGroupItems = [createItem('positiveToNegative', positiveToNegativeStringProperty, 'positiveToNegativeRadioButton'), createItem('negativeToPositive', negativeToPositiveStringProperty, 'negativeToPositiveRadioButton')];
    super(dipoleDirectionProperty, radioButtonGroupItems, options);
    this.disposeDipoleDirectionRadioButtonGroup = () => {
      positiveToNegativeStringProperty.dispose();
      negativeToPositiveStringProperty.dispose();
    };
  }
  dispose() {
    this.disposeDipoleDirectionRadioButtonGroup();
    super.dispose();
  }
}

// Creates an item for this radio-button group.
function createItem(value, labelStringProperty, tandemName) {
  return {
    value: value,
    createNode: tandem => new Text(labelStringProperty, {
      font: PreferencesDialog.CONTENT_FONT,
      maxWidth: 500,
      tandem: tandem.createTandem('labelText')
    }),
    tandemName: tandemName
  };
}
moleculePolarity.register('DipoleDirectionControl', DipoleDirectionControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,