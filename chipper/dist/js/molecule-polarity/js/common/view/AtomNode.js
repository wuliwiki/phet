// Copyright 2014-2022, University of Colorado Boulder

/**
 * AtomNode is the visual representation of an atom.
 * It controls its own position, so clients should not attempt to position it.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import ShadedSphereNode from '../../../../scenery-phet/js/ShadedSphereNode.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import moleculePolarity from '../../moleculePolarity.js';
export default class AtomNode extends Node {
  constructor(atom, providedOptions) {
    const options = optionize()({
      // NodeOptions
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);

    // atom
    const sphereNode = new ShadedSphereNode(atom.diameter, {
      mainColor: atom.color
    });

    // name centered on atom
    const labelText = new Text(atom.labelStringProperty, {
      font: new PhetFont({
        size: 32,
        weight: 'bold'
      }),
      maxWidth: 0.75 * atom.diameter,
      tandem: options.tandem.createTandem('labelText')
    });
    options.children = [sphereNode, labelText];
    super(options);

    // sync position with model
    atom.positionProperty.linkAttribute(this, 'translation');

    // Keep the label centered in the sphere. The label can be changed via PhET-iO.
    labelText.boundsProperty.link(() => {
      labelText.center = sphereNode.center;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('AtomNode', AtomNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0Rm9udCIsIlNoYWRlZFNwaGVyZU5vZGUiLCJOb2RlIiwiVGV4dCIsIm1vbGVjdWxlUG9sYXJpdHkiLCJBdG9tTm9kZSIsImNvbnN0cnVjdG9yIiwiYXRvbSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvUmVhZE9ubHkiLCJzcGhlcmVOb2RlIiwiZGlhbWV0ZXIiLCJtYWluQ29sb3IiLCJjb2xvciIsImxhYmVsVGV4dCIsImxhYmVsU3RyaW5nUHJvcGVydHkiLCJmb250Iiwic2l6ZSIsIndlaWdodCIsIm1heFdpZHRoIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiY2hpbGRyZW4iLCJwb3NpdGlvblByb3BlcnR5IiwibGlua0F0dHJpYnV0ZSIsImJvdW5kc1Byb3BlcnR5IiwibGluayIsImNlbnRlciIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkF0b21Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEF0b21Ob2RlIGlzIHRoZSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb2YgYW4gYXRvbS5cclxuICogSXQgY29udHJvbHMgaXRzIG93biBwb3NpdGlvbiwgc28gY2xpZW50cyBzaG91bGQgbm90IGF0dGVtcHQgdG8gcG9zaXRpb24gaXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrT3B0aW9uYWwgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tPcHRpb25hbC5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgU2hhZGVkU3BoZXJlTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvU2hhZGVkU3BoZXJlTm9kZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcbmltcG9ydCBBdG9tIGZyb20gJy4uL21vZGVsL0F0b20uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEF0b21Ob2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICZcclxuICBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPiAmXHJcbiAgUGlja09wdGlvbmFsPE5vZGVPcHRpb25zLCAncGhldGlvSW5wdXRFbmFibGVkUHJvcGVydHlJbnN0cnVtZW50ZWQnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0b21Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYXRvbTogQXRvbSwgcHJvdmlkZWRPcHRpb25zOiBBdG9tTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxBdG9tTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTm9kZU9wdGlvbnNcclxuICAgICAgdmlzaWJsZVByb3BlcnR5T3B0aW9uczogeyBwaGV0aW9SZWFkT25seTogdHJ1ZSB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBhdG9tXHJcbiAgICBjb25zdCBzcGhlcmVOb2RlID0gbmV3IFNoYWRlZFNwaGVyZU5vZGUoIGF0b20uZGlhbWV0ZXIsIHtcclxuICAgICAgbWFpbkNvbG9yOiBhdG9tLmNvbG9yXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gbmFtZSBjZW50ZXJlZCBvbiBhdG9tXHJcbiAgICBjb25zdCBsYWJlbFRleHQgPSBuZXcgVGV4dCggYXRvbS5sYWJlbFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggeyBzaXplOiAzMiwgd2VpZ2h0OiAnYm9sZCcgfSApLFxyXG4gICAgICBtYXhXaWR0aDogMC43NSAqIGF0b20uZGlhbWV0ZXIsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxUZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgc3BoZXJlTm9kZSwgbGFiZWxUZXh0IF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBzeW5jIHBvc2l0aW9uIHdpdGggbW9kZWxcclxuICAgIGF0b20ucG9zaXRpb25Qcm9wZXJ0eS5saW5rQXR0cmlidXRlKCB0aGlzLCAndHJhbnNsYXRpb24nICk7XHJcblxyXG4gICAgLy8gS2VlcCB0aGUgbGFiZWwgY2VudGVyZWQgaW4gdGhlIHNwaGVyZS4gVGhlIGxhYmVsIGNhbiBiZSBjaGFuZ2VkIHZpYSBQaEVULWlPLlxyXG4gICAgbGFiZWxUZXh0LmJvdW5kc1Byb3BlcnR5LmxpbmsoICgpID0+IHtcclxuICAgICAgbGFiZWxUZXh0LmNlbnRlciA9IHNwaGVyZU5vZGUuY2VudGVyO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm1vbGVjdWxlUG9sYXJpdHkucmVnaXN0ZXIoICdBdG9tTm9kZScsIEF0b21Ob2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFHbkYsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyxnQkFBZ0IsTUFBTSxpREFBaUQ7QUFDOUUsU0FBU0MsSUFBSSxFQUFlQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzNFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQVN4RCxlQUFlLE1BQU1DLFFBQVEsU0FBU0gsSUFBSSxDQUFDO0VBRWxDSSxXQUFXQSxDQUFFQyxJQUFVLEVBQUVDLGVBQWdDLEVBQUc7SUFFakUsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQTRDLENBQUMsQ0FBRTtNQUV0RTtNQUNBVyxzQkFBc0IsRUFBRTtRQUFFQyxjQUFjLEVBQUU7TUFBSztJQUNqRCxDQUFDLEVBQUVILGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUksVUFBVSxHQUFHLElBQUlYLGdCQUFnQixDQUFFTSxJQUFJLENBQUNNLFFBQVEsRUFBRTtNQUN0REMsU0FBUyxFQUFFUCxJQUFJLENBQUNRO0lBQ2xCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJYixJQUFJLENBQUVJLElBQUksQ0FBQ1UsbUJBQW1CLEVBQUU7TUFDcERDLElBQUksRUFBRSxJQUFJbEIsUUFBUSxDQUFFO1FBQUVtQixJQUFJLEVBQUUsRUFBRTtRQUFFQyxNQUFNLEVBQUU7TUFBTyxDQUFFLENBQUM7TUFDbERDLFFBQVEsRUFBRSxJQUFJLEdBQUdkLElBQUksQ0FBQ00sUUFBUTtNQUM5QlMsTUFBTSxFQUFFYixPQUFPLENBQUNhLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFdBQVk7SUFDbkQsQ0FBRSxDQUFDO0lBRUhkLE9BQU8sQ0FBQ2UsUUFBUSxHQUFHLENBQUVaLFVBQVUsRUFBRUksU0FBUyxDQUFFO0lBRTVDLEtBQUssQ0FBRVAsT0FBUSxDQUFDOztJQUVoQjtJQUNBRixJQUFJLENBQUNrQixnQkFBZ0IsQ0FBQ0MsYUFBYSxDQUFFLElBQUksRUFBRSxhQUFjLENBQUM7O0lBRTFEO0lBQ0FWLFNBQVMsQ0FBQ1csY0FBYyxDQUFDQyxJQUFJLENBQUUsTUFBTTtNQUNuQ1osU0FBUyxDQUFDYSxNQUFNLEdBQUdqQixVQUFVLENBQUNpQixNQUFNO0lBQ3RDLENBQUUsQ0FBQztFQUNMO0VBRWdCQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTFCLGdCQUFnQixDQUFDNEIsUUFBUSxDQUFFLFVBQVUsRUFBRTNCLFFBQVMsQ0FBQyJ9