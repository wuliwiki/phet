// Copyright 2014-2022, University of Colorado Boulder

/**
 * BondNode is the visual representation of a bond between 2 atoms. It is intended to be rendered before the 2 atoms,
 * so that the atoms cover the portion of the bond that overlaps the atoms.
 * Shapes are created in global coordinates, so this node's position should be (0,0).
 * Clients should not attempt to position this node.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Line } from '../../../../scenery/js/imports.js';
import moleculePolarity from '../../moleculePolarity.js';
import MPColors from '../MPColors.js';
export default class BondNode extends Line {
  constructor(bond, providedOptions) {
    const options = optionize()({
      // LineOptions
      stroke: MPColors.BOND,
      lineWidth: 12,
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);
    super(bond.atom1.positionProperty.value, bond.atom2.positionProperty.value, options);

    // adjust the bond when its endpoints change
    bond.atom1.positionProperty.link(position => this.setPoint1(position));
    bond.atom2.positionProperty.link(position => this.setPoint2(position));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('BondNode', BondNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJMaW5lIiwibW9sZWN1bGVQb2xhcml0eSIsIk1QQ29sb3JzIiwiQm9uZE5vZGUiLCJjb25zdHJ1Y3RvciIsImJvbmQiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic3Ryb2tlIiwiQk9ORCIsImxpbmVXaWR0aCIsInZpc2libGVQcm9wZXJ0eU9wdGlvbnMiLCJwaGV0aW9SZWFkT25seSIsImF0b20xIiwicG9zaXRpb25Qcm9wZXJ0eSIsInZhbHVlIiwiYXRvbTIiLCJsaW5rIiwicG9zaXRpb24iLCJzZXRQb2ludDEiLCJzZXRQb2ludDIiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCb25kTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCb25kTm9kZSBpcyB0aGUgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIGEgYm9uZCBiZXR3ZWVuIDIgYXRvbXMuIEl0IGlzIGludGVuZGVkIHRvIGJlIHJlbmRlcmVkIGJlZm9yZSB0aGUgMiBhdG9tcyxcclxuICogc28gdGhhdCB0aGUgYXRvbXMgY292ZXIgdGhlIHBvcnRpb24gb2YgdGhlIGJvbmQgdGhhdCBvdmVybGFwcyB0aGUgYXRvbXMuXHJcbiAqIFNoYXBlcyBhcmUgY3JlYXRlZCBpbiBnbG9iYWwgY29vcmRpbmF0ZXMsIHNvIHRoaXMgbm9kZSdzIHBvc2l0aW9uIHNob3VsZCBiZSAoMCwwKS5cclxuICogQ2xpZW50cyBzaG91bGQgbm90IGF0dGVtcHQgdG8gcG9zaXRpb24gdGhpcyBub2RlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBMaW5lT3B0aW9ucywgTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuaW1wb3J0IEJvbmQgZnJvbSAnLi4vbW9kZWwvQm9uZC5qcyc7XHJcbmltcG9ydCBNUENvbG9ycyBmcm9tICcuLi9NUENvbG9ycy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgQm9uZE5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJlxyXG4gIFBpY2tSZXF1aXJlZDxMaW5lT3B0aW9ucywgJ3RhbmRlbSc+ICZcclxuICBQaWNrT3B0aW9uYWw8Tm9kZU9wdGlvbnMsICdwaGV0aW9JbnB1dEVuYWJsZWRQcm9wZXJ0eUluc3RydW1lbnRlZCc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9uZE5vZGUgZXh0ZW5kcyBMaW5lIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBib25kOiBCb25kLCBwcm92aWRlZE9wdGlvbnM6IEJvbmROb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJvbmROb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIExpbmVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBMaW5lT3B0aW9uc1xyXG4gICAgICBzdHJva2U6IE1QQ29sb3JzLkJPTkQsXHJcbiAgICAgIGxpbmVXaWR0aDogMTIsXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHsgcGhldGlvUmVhZE9ubHk6IHRydWUgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGJvbmQuYXRvbTEucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSwgYm9uZC5hdG9tMi5wb3NpdGlvblByb3BlcnR5LnZhbHVlLCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gYWRqdXN0IHRoZSBib25kIHdoZW4gaXRzIGVuZHBvaW50cyBjaGFuZ2VcclxuICAgIGJvbmQuYXRvbTEucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBwb3NpdGlvbiA9PiB0aGlzLnNldFBvaW50MSggcG9zaXRpb24gKSApO1xyXG4gICAgYm9uZC5hdG9tMi5wb3NpdGlvblByb3BlcnR5LmxpbmsoIHBvc2l0aW9uID0+IHRoaXMuc2V0UG9pbnQyKCBwb3NpdGlvbiApICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ0JvbmROb2RlJywgQm9uZE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFHbkYsU0FBU0MsSUFBSSxRQUFrQyxtQ0FBbUM7QUFDbEYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBRXhELE9BQU9DLFFBQVEsTUFBTSxnQkFBZ0I7QUFRckMsZUFBZSxNQUFNQyxRQUFRLFNBQVNILElBQUksQ0FBQztFQUVsQ0ksV0FBV0EsQ0FBRUMsSUFBVSxFQUFFQyxlQUFnQyxFQUFHO0lBRWpFLE1BQU1DLE9BQU8sR0FBR1IsU0FBUyxDQUE0QyxDQUFDLENBQUU7TUFFdEU7TUFDQVMsTUFBTSxFQUFFTixRQUFRLENBQUNPLElBQUk7TUFDckJDLFNBQVMsRUFBRSxFQUFFO01BQ2JDLHNCQUFzQixFQUFFO1FBQUVDLGNBQWMsRUFBRTtNQUFLO0lBQ2pELENBQUMsRUFBRU4sZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVELElBQUksQ0FBQ1EsS0FBSyxDQUFDQyxnQkFBZ0IsQ0FBQ0MsS0FBSyxFQUFFVixJQUFJLENBQUNXLEtBQUssQ0FBQ0YsZ0JBQWdCLENBQUNDLEtBQUssRUFBRVIsT0FBUSxDQUFDOztJQUV0RjtJQUNBRixJQUFJLENBQUNRLEtBQUssQ0FBQ0MsZ0JBQWdCLENBQUNHLElBQUksQ0FBRUMsUUFBUSxJQUFJLElBQUksQ0FBQ0MsU0FBUyxDQUFFRCxRQUFTLENBQUUsQ0FBQztJQUMxRWIsSUFBSSxDQUFDVyxLQUFLLENBQUNGLGdCQUFnQixDQUFDRyxJQUFJLENBQUVDLFFBQVEsSUFBSSxJQUFJLENBQUNFLFNBQVMsQ0FBRUYsUUFBUyxDQUFFLENBQUM7RUFDNUU7RUFFZ0JHLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBcEIsZ0JBQWdCLENBQUNzQixRQUFRLENBQUUsVUFBVSxFQUFFcEIsUUFBUyxDQUFDIn0=