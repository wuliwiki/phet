// Copyright 2014-2022, University of Colorado Boulder

/**
 * Visual representation of a molecular dipole.
 * Controls its own position in global coordinates, so clients should not attempt to position this node.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import moleculePolarity from '../../moleculePolarity.js';
import MPColors from '../MPColors.js';
import DipoleNode from './DipoleNode.js';
import optionize from '../../../../phet-core/js/optionize.js';

// constants
const OFFSET = 55; // offset in the direction that the dipole points

export default class MolecularDipoleNode extends DipoleNode {
  constructor(molecule, providedOptions) {
    const options = optionize()({
      // DipoleNodeOptions
      fill: MPColors.MOLECULAR_DIPOLE
    }, providedOptions);
    super(molecule.dipoleProperty, options);

    // position the dipole with some radial offset from the molecule's position
    molecule.dipoleProperty.link(dipole => {
      // offset vector relative to molecule position
      const v = Vector2.createPolar(OFFSET, dipole.angle);

      // offset in global coordinate frame
      this.translation = molecule.position.plus(v);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Creates an icon, for use in control panels.
   */
  static createIcon() {
    return DipoleNode.createIcon({
      fill: MPColors.MOLECULAR_DIPOLE
    });
  }
}
moleculePolarity.register('MolecularDipoleNode', MolecularDipoleNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwibW9sZWN1bGVQb2xhcml0eSIsIk1QQ29sb3JzIiwiRGlwb2xlTm9kZSIsIm9wdGlvbml6ZSIsIk9GRlNFVCIsIk1vbGVjdWxhckRpcG9sZU5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vbGVjdWxlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImZpbGwiLCJNT0xFQ1VMQVJfRElQT0xFIiwiZGlwb2xlUHJvcGVydHkiLCJsaW5rIiwiZGlwb2xlIiwidiIsImNyZWF0ZVBvbGFyIiwiYW5nbGUiLCJ0cmFuc2xhdGlvbiIsInBvc2l0aW9uIiwicGx1cyIsImRpc3Bvc2UiLCJhc3NlcnQiLCJjcmVhdGVJY29uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNb2xlY3VsYXJEaXBvbGVOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiBhIG1vbGVjdWxhciBkaXBvbGUuXHJcbiAqIENvbnRyb2xzIGl0cyBvd24gcG9zaXRpb24gaW4gZ2xvYmFsIGNvb3JkaW5hdGVzLCBzbyBjbGllbnRzIHNob3VsZCBub3QgYXR0ZW1wdCB0byBwb3NpdGlvbiB0aGlzIG5vZGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4uL21vZGVsL01vbGVjdWxlLmpzJztcclxuaW1wb3J0IE1QQ29sb3JzIGZyb20gJy4uL01QQ29sb3JzLmpzJztcclxuaW1wb3J0IERpcG9sZU5vZGUsIHsgRGlwb2xlTm9kZU9wdGlvbnMgfSBmcm9tICcuL0RpcG9sZU5vZGUuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgT0ZGU0VUID0gNTU7IC8vIG9mZnNldCBpbiB0aGUgZGlyZWN0aW9uIHRoYXQgdGhlIGRpcG9sZSBwb2ludHNcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBNb2xlY3VsYXJEaXBvbGVOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgRGlwb2xlTm9kZU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2xlY3VsYXJEaXBvbGVOb2RlIGV4dGVuZHMgRGlwb2xlTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9sZWN1bGU6IE1vbGVjdWxlLCBwcm92aWRlZE9wdGlvbnM/OiBNb2xlY3VsYXJEaXBvbGVOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE1vbGVjdWxhckRpcG9sZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgRGlwb2xlTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIERpcG9sZU5vZGVPcHRpb25zXHJcbiAgICAgIGZpbGw6IE1QQ29sb3JzLk1PTEVDVUxBUl9ESVBPTEVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2xlY3VsZS5kaXBvbGVQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHBvc2l0aW9uIHRoZSBkaXBvbGUgd2l0aCBzb21lIHJhZGlhbCBvZmZzZXQgZnJvbSB0aGUgbW9sZWN1bGUncyBwb3NpdGlvblxyXG4gICAgbW9sZWN1bGUuZGlwb2xlUHJvcGVydHkubGluayggZGlwb2xlID0+IHtcclxuXHJcbiAgICAgIC8vIG9mZnNldCB2ZWN0b3IgcmVsYXRpdmUgdG8gbW9sZWN1bGUgcG9zaXRpb25cclxuICAgICAgY29uc3QgdiA9IFZlY3RvcjIuY3JlYXRlUG9sYXIoIE9GRlNFVCwgZGlwb2xlLmFuZ2xlICk7XHJcblxyXG4gICAgICAvLyBvZmZzZXQgaW4gZ2xvYmFsIGNvb3JkaW5hdGUgZnJhbWVcclxuICAgICAgdGhpcy50cmFuc2xhdGlvbiA9IG1vbGVjdWxlLnBvc2l0aW9uLnBsdXMoIHYgKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGFuIGljb24sIGZvciB1c2UgaW4gY29udHJvbCBwYW5lbHMuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvdmVycmlkZSBjcmVhdGVJY29uKCk6IE5vZGUge1xyXG4gICAgcmV0dXJuIERpcG9sZU5vZGUuY3JlYXRlSWNvbiggeyBmaWxsOiBNUENvbG9ycy5NT0xFQ1VMQVJfRElQT0xFIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbm1vbGVjdWxlUG9sYXJpdHkucmVnaXN0ZXIoICdNb2xlY3VsYXJEaXBvbGVOb2RlJywgTW9sZWN1bGFyRGlwb2xlTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBRXhELE9BQU9DLFFBQVEsTUFBTSxnQkFBZ0I7QUFDckMsT0FBT0MsVUFBVSxNQUE2QixpQkFBaUI7QUFFL0QsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7O0FBRW5GO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDOztBQU1uQixlQUFlLE1BQU1DLG1CQUFtQixTQUFTSCxVQUFVLENBQUM7RUFFbkRJLFdBQVdBLENBQUVDLFFBQWtCLEVBQUVDLGVBQTRDLEVBQUc7SUFFckYsTUFBTUMsT0FBTyxHQUFHTixTQUFTLENBQTZELENBQUMsQ0FBRTtNQUV2RjtNQUNBTyxJQUFJLEVBQUVULFFBQVEsQ0FBQ1U7SUFDakIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsUUFBUSxDQUFDSyxjQUFjLEVBQUVILE9BQVEsQ0FBQzs7SUFFekM7SUFDQUYsUUFBUSxDQUFDSyxjQUFjLENBQUNDLElBQUksQ0FBRUMsTUFBTSxJQUFJO01BRXRDO01BQ0EsTUFBTUMsQ0FBQyxHQUFHaEIsT0FBTyxDQUFDaUIsV0FBVyxDQUFFWixNQUFNLEVBQUVVLE1BQU0sQ0FBQ0csS0FBTSxDQUFDOztNQUVyRDtNQUNBLElBQUksQ0FBQ0MsV0FBVyxHQUFHWCxRQUFRLENBQUNZLFFBQVEsQ0FBQ0MsSUFBSSxDQUFFTCxDQUFFLENBQUM7SUFDaEQsQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JNLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsT0FBdUJFLFVBQVVBLENBQUEsRUFBUztJQUN4QyxPQUFPckIsVUFBVSxDQUFDcUIsVUFBVSxDQUFFO01BQUViLElBQUksRUFBRVQsUUFBUSxDQUFDVTtJQUFpQixDQUFFLENBQUM7RUFDckU7QUFDRjtBQUVBWCxnQkFBZ0IsQ0FBQ3dCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRW5CLG1CQUFvQixDQUFDIn0=