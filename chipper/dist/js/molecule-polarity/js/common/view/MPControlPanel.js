// Copyright 2017-2022, University of Colorado Boulder

/**
 * Control panel used throughout Molecule Polarity.
 * Responsible for inserting horizontal spacers between a set of sub-panels.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { VBox, HSeparator } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import moleculePolarity from '../../moleculePolarity.js';
import MPColors from '../MPColors.js';
import MPConstants from '../MPConstants.js';
export default class MPControlPanel extends Panel {
  constructor(subPanels, providedOptions) {
    const options = optionize()({
      // PanelOptions
      fill: MPColors.CONTROL_PANEL_BACKGROUND,
      xMargin: 20,
      yMargin: 15
    }, providedOptions);

    // put a horizontal separator between each sub-panel
    const children = [subPanels[0]];
    for (let i = 1; i < subPanels.length; i++) {
      children.push(new HSeparator({
        stroke: 'black'
      }));
      children.push(subPanels[i]);
    }
    const content = new VBox({
      children: children,
      align: 'left',
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING
    });
    super(content, options);
  }
}
moleculePolarity.register('MPControlPanel', MPControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJWQm94IiwiSFNlcGFyYXRvciIsIlBhbmVsIiwibW9sZWN1bGVQb2xhcml0eSIsIk1QQ29sb3JzIiwiTVBDb25zdGFudHMiLCJNUENvbnRyb2xQYW5lbCIsImNvbnN0cnVjdG9yIiwic3ViUGFuZWxzIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImZpbGwiLCJDT05UUk9MX1BBTkVMX0JBQ0tHUk9VTkQiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImNoaWxkcmVuIiwiaSIsImxlbmd0aCIsInB1c2giLCJzdHJva2UiLCJjb250ZW50IiwiYWxpZ24iLCJzcGFjaW5nIiwiQ09OVFJPTF9QQU5FTF9ZX1NQQUNJTkciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1QQ29udHJvbFBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2wgcGFuZWwgdXNlZCB0aHJvdWdob3V0IE1vbGVjdWxlIFBvbGFyaXR5LlxyXG4gKiBSZXNwb25zaWJsZSBmb3IgaW5zZXJ0aW5nIGhvcml6b250YWwgc3BhY2VycyBiZXR3ZWVuIGEgc2V0IG9mIHN1Yi1wYW5lbHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFZCb3gsIEhTZXBhcmF0b3IgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwsIHsgUGFuZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcbmltcG9ydCBNUENvbG9ycyBmcm9tICcuLi9NUENvbG9ycy5qcyc7XHJcbmltcG9ydCBNUENvbnN0YW50cyBmcm9tICcuLi9NUENvbnN0YW50cy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIE1QQ29udHJvbFBhbmVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBhbmVsT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTVBDb250cm9sUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3ViUGFuZWxzOiBOb2RlW10sIHByb3ZpZGVkT3B0aW9uczogTVBDb250cm9sUGFuZWxPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TVBDb250cm9sUGFuZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgUGFuZWxPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBQYW5lbE9wdGlvbnNcclxuICAgICAgZmlsbDogTVBDb2xvcnMuQ09OVFJPTF9QQU5FTF9CQUNLR1JPVU5ELFxyXG4gICAgICB4TWFyZ2luOiAyMCxcclxuICAgICAgeU1hcmdpbjogMTVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHB1dCBhIGhvcml6b250YWwgc2VwYXJhdG9yIGJldHdlZW4gZWFjaCBzdWItcGFuZWxcclxuICAgIGNvbnN0IGNoaWxkcmVuID0gWyBzdWJQYW5lbHNbIDAgXSBdO1xyXG4gICAgZm9yICggbGV0IGkgPSAxOyBpIDwgc3ViUGFuZWxzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBjaGlsZHJlbi5wdXNoKCBuZXcgSFNlcGFyYXRvciggeyBzdHJva2U6ICdibGFjaycgfSApICk7XHJcbiAgICAgIGNoaWxkcmVuLnB1c2goIHN1YlBhbmVsc1sgaSBdICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBWQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogTVBDb25zdGFudHMuQ09OVFJPTF9QQU5FTF9ZX1NQQUNJTkdcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ01QQ29udHJvbFBhbmVsJywgTVBDb250cm9sUGFuZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixTQUFlQyxJQUFJLEVBQUVDLFVBQVUsUUFBUSxtQ0FBbUM7QUFDMUUsT0FBT0MsS0FBSyxNQUF3Qiw2QkFBNkI7QUFDakUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLFFBQVEsTUFBTSxnQkFBZ0I7QUFDckMsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQU0zQyxlQUFlLE1BQU1DLGNBQWMsU0FBU0osS0FBSyxDQUFDO0VBRXpDSyxXQUFXQSxDQUFFQyxTQUFpQixFQUFFQyxlQUFzQyxFQUFHO0lBRTlFLE1BQU1DLE9BQU8sR0FBR1gsU0FBUyxDQUFtRCxDQUFDLENBQUU7TUFFN0U7TUFDQVksSUFBSSxFQUFFUCxRQUFRLENBQUNRLHdCQUF3QjtNQUN2Q0MsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxFQUFFTCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1NLFFBQVEsR0FBRyxDQUFFUCxTQUFTLENBQUUsQ0FBQyxDQUFFLENBQUU7SUFDbkMsS0FBTSxJQUFJUSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdSLFNBQVMsQ0FBQ1MsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRztNQUMzQ0QsUUFBUSxDQUFDRyxJQUFJLENBQUUsSUFBSWpCLFVBQVUsQ0FBRTtRQUFFa0IsTUFBTSxFQUFFO01BQVEsQ0FBRSxDQUFFLENBQUM7TUFDdERKLFFBQVEsQ0FBQ0csSUFBSSxDQUFFVixTQUFTLENBQUVRLENBQUMsQ0FBRyxDQUFDO0lBQ2pDO0lBRUEsTUFBTUksT0FBTyxHQUFHLElBQUlwQixJQUFJLENBQUU7TUFDeEJlLFFBQVEsRUFBRUEsUUFBUTtNQUNsQk0sS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFakIsV0FBVyxDQUFDa0I7SUFDdkIsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFSCxPQUFPLEVBQUVWLE9BQVEsQ0FBQztFQUMzQjtBQUNGO0FBRUFQLGdCQUFnQixDQUFDcUIsUUFBUSxDQUFFLGdCQUFnQixFQUFFbEIsY0FBZSxDQUFDIn0=