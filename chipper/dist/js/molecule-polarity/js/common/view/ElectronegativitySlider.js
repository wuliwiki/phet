// Copyright 2021-2022, University of Colorado Boulder

/**
 * ElectronegativitySlider is the slider for adjusting electronegativity of an atom.
 * Dragging the slider continuously updates an atom's electronegativity.
 * When the slider's thumb is released, it snaps to the closest tick mark.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Utils from '../../../../dot/js/Utils.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import HSlider from '../../../../sun/js/HSlider.js';
import Slider from '../../../../sun/js/Slider.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
import MPConstants from '../MPConstants.js';
import PointySliderThumb from './PointySliderThumb.js';
export default class ElectronegativitySlider extends HSlider {
  constructor(molecule, atom, providedOptions) {
    const options = optionize()({
      // SelfOptions
      tickSpacing: MPConstants.ELECTRONEGATIVITY_TICK_SPACING,
      // HSliderOptions
      thumbYOffset: 10,
      trackSize: new Dimension2(150, 5),
      majorTickLength: 20,
      minorTickLength: 10
    }, providedOptions);

    // custom thumb
    const thumbNode = new PointySliderThumb({
      size: new Dimension2(30, 35),
      tandem: options.tandem.createTandem(Slider.THUMB_NODE_TANDEM_NAME)
    });
    thumbNode.touchArea = thumbNode.localBounds.dilatedXY(10, 10);
    options.thumbNode = thumbNode;
    options.startDrag = () => {
      molecule.isDraggingProperty.value = true;
    };

    // snaps to the closest tick mark
    options.endDrag = () => {
      molecule.isDraggingProperty.value = false;
      atom.electronegativityProperty.value = Utils.roundToInterval(atom.electronegativityProperty.value, options.tickSpacing);
    };
    const range = atom.electronegativityProperty.range;
    super(atom.electronegativityProperty, range, options);

    // tick labels
    const tickLabelOptions = {
      font: new PhetFont(16),
      maxWidth: 40
    };
    this.addMajorTick(range.min, new Text(MoleculePolarityStrings.lessStringProperty, tickLabelOptions));
    this.addMajorTick(range.max, new Text(MoleculePolarityStrings.moreStringProperty, tickLabelOptions));
    const centerTick = range.min + range.getLength() / 2;
    this.addMajorTick(centerTick);
    for (let i = range.min + options.tickSpacing; i < range.max; i += options.tickSpacing) {
      if (i !== centerTick) {
        this.addMinorTick(i);
      }
    }
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('ElectronegativitySlider', ElectronegativitySlider);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVXRpbHMiLCJvcHRpb25pemUiLCJQaGV0Rm9udCIsIlRleHQiLCJIU2xpZGVyIiwiU2xpZGVyIiwibW9sZWN1bGVQb2xhcml0eSIsIk1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIiwiTVBDb25zdGFudHMiLCJQb2ludHlTbGlkZXJUaHVtYiIsIkVsZWN0cm9uZWdhdGl2aXR5U2xpZGVyIiwiY29uc3RydWN0b3IiLCJtb2xlY3VsZSIsImF0b20iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidGlja1NwYWNpbmciLCJFTEVDVFJPTkVHQVRJVklUWV9USUNLX1NQQUNJTkciLCJ0aHVtYllPZmZzZXQiLCJ0cmFja1NpemUiLCJtYWpvclRpY2tMZW5ndGgiLCJtaW5vclRpY2tMZW5ndGgiLCJ0aHVtYk5vZGUiLCJzaXplIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiVEhVTUJfTk9ERV9UQU5ERU1fTkFNRSIsInRvdWNoQXJlYSIsImxvY2FsQm91bmRzIiwiZGlsYXRlZFhZIiwic3RhcnREcmFnIiwiaXNEcmFnZ2luZ1Byb3BlcnR5IiwidmFsdWUiLCJlbmREcmFnIiwiZWxlY3Ryb25lZ2F0aXZpdHlQcm9wZXJ0eSIsInJvdW5kVG9JbnRlcnZhbCIsInJhbmdlIiwidGlja0xhYmVsT3B0aW9ucyIsImZvbnQiLCJtYXhXaWR0aCIsImFkZE1ham9yVGljayIsIm1pbiIsImxlc3NTdHJpbmdQcm9wZXJ0eSIsIm1heCIsIm1vcmVTdHJpbmdQcm9wZXJ0eSIsImNlbnRlclRpY2siLCJnZXRMZW5ndGgiLCJpIiwiYWRkTWlub3JUaWNrIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWxlY3Ryb25lZ2F0aXZpdHlTbGlkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRWxlY3Ryb25lZ2F0aXZpdHlTbGlkZXIgaXMgdGhlIHNsaWRlciBmb3IgYWRqdXN0aW5nIGVsZWN0cm9uZWdhdGl2aXR5IG9mIGFuIGF0b20uXHJcbiAqIERyYWdnaW5nIHRoZSBzbGlkZXIgY29udGludW91c2x5IHVwZGF0ZXMgYW4gYXRvbSdzIGVsZWN0cm9uZWdhdGl2aXR5LlxyXG4gKiBXaGVuIHRoZSBzbGlkZXIncyB0aHVtYiBpcyByZWxlYXNlZCwgaXQgc25hcHMgdG8gdGhlIGNsb3Nlc3QgdGljayBtYXJrLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEhTbGlkZXIsIHsgSFNsaWRlck9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvSFNsaWRlci5qcyc7XHJcbmltcG9ydCBTbGlkZXIgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1NsaWRlci5qcyc7XHJcbmltcG9ydCBtb2xlY3VsZVBvbGFyaXR5IGZyb20gJy4uLy4uL21vbGVjdWxlUG9sYXJpdHkuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MgZnJvbSAnLi4vLi4vTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQXRvbSBmcm9tICcuLi9tb2RlbC9BdG9tLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4uL21vZGVsL01vbGVjdWxlLmpzJztcclxuaW1wb3J0IE1QQ29uc3RhbnRzIGZyb20gJy4uL01QQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFBvaW50eVNsaWRlclRodW1iIGZyb20gJy4vUG9pbnR5U2xpZGVyVGh1bWIuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB0aWNrU3BhY2luZz86IG51bWJlcjsgLy8gc3BhY2UgYmV0d2VlbiB0aWNrIG1hcmtzXHJcbn07XHJcblxyXG50eXBlIEVsZWN0cm9uZWdhdGl2aXR5U2xpZGVyT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPEhTbGlkZXJPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVjdHJvbmVnYXRpdml0eVNsaWRlciBleHRlbmRzIEhTbGlkZXIge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vbGVjdWxlOiBNb2xlY3VsZSwgYXRvbTogQXRvbSwgcHJvdmlkZWRPcHRpb25zOiBFbGVjdHJvbmVnYXRpdml0eVNsaWRlck9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxFbGVjdHJvbmVnYXRpdml0eVNsaWRlck9wdGlvbnMsIFNlbGZPcHRpb25zLCBIU2xpZGVyT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgdGlja1NwYWNpbmc6IE1QQ29uc3RhbnRzLkVMRUNUUk9ORUdBVElWSVRZX1RJQ0tfU1BBQ0lORyxcclxuXHJcbiAgICAgIC8vIEhTbGlkZXJPcHRpb25zXHJcbiAgICAgIHRodW1iWU9mZnNldDogMTAsXHJcbiAgICAgIHRyYWNrU2l6ZTogbmV3IERpbWVuc2lvbjIoIDE1MCwgNSApLFxyXG4gICAgICBtYWpvclRpY2tMZW5ndGg6IDIwLFxyXG4gICAgICBtaW5vclRpY2tMZW5ndGg6IDEwXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBjdXN0b20gdGh1bWJcclxuICAgIGNvbnN0IHRodW1iTm9kZSA9IG5ldyBQb2ludHlTbGlkZXJUaHVtYigge1xyXG4gICAgICBzaXplOiBuZXcgRGltZW5zaW9uMiggMzAsIDM1ICksXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCBTbGlkZXIuVEhVTUJfTk9ERV9UQU5ERU1fTkFNRSApXHJcbiAgICB9ICk7XHJcbiAgICB0aHVtYk5vZGUudG91Y2hBcmVhID0gdGh1bWJOb2RlLmxvY2FsQm91bmRzLmRpbGF0ZWRYWSggMTAsIDEwICk7XHJcblxyXG4gICAgb3B0aW9ucy50aHVtYk5vZGUgPSB0aHVtYk5vZGU7XHJcblxyXG4gICAgb3B0aW9ucy5zdGFydERyYWcgPSAoKSA9PiB7XHJcbiAgICAgIG1vbGVjdWxlLmlzRHJhZ2dpbmdQcm9wZXJ0eS52YWx1ZSA9IHRydWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHNuYXBzIHRvIHRoZSBjbG9zZXN0IHRpY2sgbWFya1xyXG4gICAgb3B0aW9ucy5lbmREcmFnID0gKCkgPT4ge1xyXG4gICAgICBtb2xlY3VsZS5pc0RyYWdnaW5nUHJvcGVydHkudmFsdWUgPSBmYWxzZTtcclxuICAgICAgYXRvbS5lbGVjdHJvbmVnYXRpdml0eVByb3BlcnR5LnZhbHVlID0gVXRpbHMucm91bmRUb0ludGVydmFsKCBhdG9tLmVsZWN0cm9uZWdhdGl2aXR5UHJvcGVydHkudmFsdWUsIG9wdGlvbnMudGlja1NwYWNpbmcgKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmFuZ2UgPSBhdG9tLmVsZWN0cm9uZWdhdGl2aXR5UHJvcGVydHkucmFuZ2U7XHJcblxyXG4gICAgc3VwZXIoIGF0b20uZWxlY3Ryb25lZ2F0aXZpdHlQcm9wZXJ0eSwgcmFuZ2UsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyB0aWNrIGxhYmVsc1xyXG4gICAgY29uc3QgdGlja0xhYmVsT3B0aW9ucyA9IHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNiApLFxyXG4gICAgICBtYXhXaWR0aDogNDBcclxuICAgIH07XHJcbiAgICB0aGlzLmFkZE1ham9yVGljayggcmFuZ2UubWluLCBuZXcgVGV4dCggTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MubGVzc1N0cmluZ1Byb3BlcnR5LCB0aWNrTGFiZWxPcHRpb25zICkgKTtcclxuICAgIHRoaXMuYWRkTWFqb3JUaWNrKCByYW5nZS5tYXgsIG5ldyBUZXh0KCBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5tb3JlU3RyaW5nUHJvcGVydHksIHRpY2tMYWJlbE9wdGlvbnMgKSApO1xyXG4gICAgY29uc3QgY2VudGVyVGljayA9IHJhbmdlLm1pbiArICggcmFuZ2UuZ2V0TGVuZ3RoKCkgLyAyICk7XHJcbiAgICB0aGlzLmFkZE1ham9yVGljayggY2VudGVyVGljayApO1xyXG4gICAgZm9yICggbGV0IGkgPSByYW5nZS5taW4gKyBvcHRpb25zLnRpY2tTcGFjaW5nOyBpIDwgcmFuZ2UubWF4OyBpICs9IG9wdGlvbnMudGlja1NwYWNpbmcgKSB7XHJcbiAgICAgIGlmICggaSAhPT0gY2VudGVyVGljayApIHtcclxuICAgICAgICB0aGlzLmFkZE1pbm9yVGljayggaSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ0VsZWN0cm9uZWdhdGl2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