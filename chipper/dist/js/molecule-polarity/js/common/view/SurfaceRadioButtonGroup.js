// Copyright 2021-2022, University of Colorado Boulder

/**
 * SurfaceRadioButtonGroup is the radio button group for choosing a surface for the molecule.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { Text } from '../../../../scenery/js/imports.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
import MPConstants from '../MPConstants.js';
export default class SurfaceRadioButtonGroup extends VerticalAquaRadioButtonGroup {
  constructor(surfaceTypeProperty, providedOptions) {
    const options = optionize()({
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING,
      radioButtonOptions: MPConstants.AQUA_RADIO_BUTTON_OPTIONS
    }, providedOptions);
    const radioButtonGroupItems = [createItem('none', MoleculePolarityStrings.noneStringProperty, 'noneRadioButton'), createItem('electrostaticPotential', MoleculePolarityStrings.electrostaticPotentialStringProperty, 'electrostaticPotentialRadioButton'), createItem('electronDensity', MoleculePolarityStrings.electronDensityStringProperty, 'electronDensityRadioButton')];
    super(surfaceTypeProperty, radioButtonGroupItems, options);
  }
}

// Creates an item for this radio-button group.
function createItem(value, labelStringProperty, tandemName) {
  return {
    value: value,
    createNode: tandem => new Text(labelStringProperty, combineOptions({}, MPConstants.CONTROL_TEXT_OPTIONS, {
      tandem: tandem.createTandem('labelText')
    })),
    tandemName: tandemName
  };
}
moleculePolarity.register('SurfaceRadioButtonGroup', SurfaceRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIlRleHQiLCJWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIiwibW9sZWN1bGVQb2xhcml0eSIsIk1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIiwiTVBDb25zdGFudHMiLCJTdXJmYWNlUmFkaW9CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwic3VyZmFjZVR5cGVQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzcGFjaW5nIiwiQ09OVFJPTF9QQU5FTF9ZX1NQQUNJTkciLCJyYWRpb0J1dHRvbk9wdGlvbnMiLCJBUVVBX1JBRElPX0JVVFRPTl9PUFRJT05TIiwicmFkaW9CdXR0b25Hcm91cEl0ZW1zIiwiY3JlYXRlSXRlbSIsIm5vbmVTdHJpbmdQcm9wZXJ0eSIsImVsZWN0cm9zdGF0aWNQb3RlbnRpYWxTdHJpbmdQcm9wZXJ0eSIsImVsZWN0cm9uRGVuc2l0eVN0cmluZ1Byb3BlcnR5IiwidmFsdWUiLCJsYWJlbFN0cmluZ1Byb3BlcnR5IiwidGFuZGVtTmFtZSIsImNyZWF0ZU5vZGUiLCJ0YW5kZW0iLCJDT05UUk9MX1RFWFRfT1BUSU9OUyIsImNyZWF0ZVRhbmRlbSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3VyZmFjZVJhZGlvQnV0dG9uR3JvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3VyZmFjZVJhZGlvQnV0dG9uR3JvdXAgaXMgdGhlIHJhZGlvIGJ1dHRvbiBncm91cCBmb3IgY2hvb3NpbmcgYSBzdXJmYWNlIGZvciB0aGUgbW9sZWN1bGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0cmluZ1VuaW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9TdHJpbmdVbmlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBUZXh0LCBUZXh0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwLCB7IFZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXBPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1ZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuaW1wb3J0IE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIGZyb20gJy4uLy4uL01vbGVjdWxlUG9sYXJpdHlTdHJpbmdzLmpzJztcclxuaW1wb3J0IHsgU3VyZmFjZVR5cGUgfSBmcm9tICcuLi9tb2RlbC9TdXJmYWNlVHlwZS5qcyc7XHJcbmltcG9ydCBNUENvbnN0YW50cyBmcm9tICcuLi9NUENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgQXF1YVJhZGlvQnV0dG9uR3JvdXBJdGVtIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FxdWFSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBTdXJmYWNlUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VyZmFjZVJhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwPFN1cmZhY2VUeXBlPiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3VyZmFjZVR5cGVQcm9wZXJ0eTogU3RyaW5nVW5pb25Qcm9wZXJ0eTxTdXJmYWNlVHlwZT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IFN1cmZhY2VSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFN1cmZhY2VSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucywgU2VsZk9wdGlvbnMsIFZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXBPcHRpb25zPigpKCB7XHJcbiAgICAgIHNwYWNpbmc6IE1QQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfWV9TUEFDSU5HLFxyXG4gICAgICByYWRpb0J1dHRvbk9wdGlvbnM6IE1QQ29uc3RhbnRzLkFRVUFfUkFESU9fQlVUVE9OX09QVElPTlNcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHJhZGlvQnV0dG9uR3JvdXBJdGVtcyA9IFtcclxuICAgICAgY3JlYXRlSXRlbSggJ25vbmUnLCBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5ub25lU3RyaW5nUHJvcGVydHksICdub25lUmFkaW9CdXR0b24nICksXHJcbiAgICAgIGNyZWF0ZUl0ZW0oICdlbGVjdHJvc3RhdGljUG90ZW50aWFsJywgTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MuZWxlY3Ryb3N0YXRpY1BvdGVudGlhbFN0cmluZ1Byb3BlcnR5LCAnZWxlY3Ryb3N0YXRpY1BvdGVudGlhbFJhZGlvQnV0dG9uJyApLFxyXG4gICAgICBjcmVhdGVJdGVtKCAnZWxlY3Ryb25EZW5zaXR5JywgTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MuZWxlY3Ryb25EZW5zaXR5U3RyaW5nUHJvcGVydHksICdlbGVjdHJvbkRlbnNpdHlSYWRpb0J1dHRvbicgKVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggc3VyZmFjZVR5cGVQcm9wZXJ0eSwgcmFkaW9CdXR0b25Hcm91cEl0ZW1zLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBDcmVhdGVzIGFuIGl0ZW0gZm9yIHRoaXMgcmFkaW8tYnV0dG9uIGdyb3VwLlxyXG5mdW5jdGlvbiBjcmVhdGVJdGVtKCB2YWx1ZTogU3VyZmFjZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgIGxhYmVsU3RyaW5nUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgIHRhbmRlbU5hbWU6IHN0cmluZyApOiBBcXVhUmFkaW9CdXR0b25Hcm91cEl0ZW08U3VyZmFjZVR5cGU+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgY3JlYXRlTm9kZTogKCB0YW5kZW06IFRhbmRlbSApID0+IG5ldyBUZXh0KCBsYWJlbFN0cmluZ1Byb3BlcnR5LCBjb21iaW5lT3B0aW9uczxUZXh0T3B0aW9ucz4oXHJcbiAgICAgIHt9LCBNUENvbnN0YW50cy5DT05UUk9MX1RFWFRfT1BUSU9OUywge1xyXG4gICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsVGV4dCcgKVxyXG4gICAgICB9ICkgKSxcclxuICAgIHRhbmRlbU5hbWU6IHRhbmRlbU5hbWVcclxuICB9O1xyXG59XHJcblxyXG5tb2xlY3VsZVBvbGFyaXR5LnJlZ2lzdGVyKCAnU3VyZmFjZVJhZGlvQnV0dG9uR3JvdXAnLCBTdXJmYWNlUmFkaW9CdXR0b25Hcm91cCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLElBQUlDLGNBQWMsUUFBMEIsdUNBQXVDO0FBRW5HLFNBQVNDLElBQUksUUFBcUIsbUNBQW1DO0FBQ3JFLE9BQU9DLDRCQUE0QixNQUErQyxvREFBb0Q7QUFDdEksT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUV0RSxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBUzNDLGVBQWUsTUFBTUMsdUJBQXVCLFNBQVNKLDRCQUE0QixDQUFjO0VBRXRGSyxXQUFXQSxDQUFFQyxtQkFBcUQsRUFDckRDLGVBQStDLEVBQUc7SUFFcEUsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQW1GLENBQUMsQ0FBRTtNQUM3R1ksT0FBTyxFQUFFTixXQUFXLENBQUNPLHVCQUF1QjtNQUM1Q0Msa0JBQWtCLEVBQUVSLFdBQVcsQ0FBQ1M7SUFDbEMsQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCLE1BQU1NLHFCQUFxQixHQUFHLENBQzVCQyxVQUFVLENBQUUsTUFBTSxFQUFFWix1QkFBdUIsQ0FBQ2Esa0JBQWtCLEVBQUUsaUJBQWtCLENBQUMsRUFDbkZELFVBQVUsQ0FBRSx3QkFBd0IsRUFBRVosdUJBQXVCLENBQUNjLG9DQUFvQyxFQUFFLG1DQUFvQyxDQUFDLEVBQ3pJRixVQUFVLENBQUUsaUJBQWlCLEVBQUVaLHVCQUF1QixDQUFDZSw2QkFBNkIsRUFBRSw0QkFBNkIsQ0FBQyxDQUNySDtJQUVELEtBQUssQ0FBRVgsbUJBQW1CLEVBQUVPLHFCQUFxQixFQUFFTCxPQUFRLENBQUM7RUFDOUQ7QUFDRjs7QUFFQTtBQUNBLFNBQVNNLFVBQVVBLENBQUVJLEtBQWtCLEVBQ2xCQyxtQkFBOEMsRUFDOUNDLFVBQWtCLEVBQTBDO0VBQy9FLE9BQU87SUFDTEYsS0FBSyxFQUFFQSxLQUFLO0lBQ1pHLFVBQVUsRUFBSUMsTUFBYyxJQUFNLElBQUl2QixJQUFJLENBQUVvQixtQkFBbUIsRUFBRXJCLGNBQWMsQ0FDN0UsQ0FBQyxDQUFDLEVBQUVLLFdBQVcsQ0FBQ29CLG9CQUFvQixFQUFFO01BQ3BDRCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLFdBQVk7SUFDM0MsQ0FBRSxDQUFFLENBQUM7SUFDUEosVUFBVSxFQUFFQTtFQUNkLENBQUM7QUFDSDtBQUVBbkIsZ0JBQWdCLENBQUN3QixRQUFRLENBQUUseUJBQXlCLEVBQUVyQix1QkFBd0IsQ0FBQyJ9