// Copyright 2014-2022, University of Colorado Boulder

/**
 * PlatesNode displays the 2 plates (negative and positive) for the E-field creation device.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HBox } from '../../../../scenery/js/imports.js';
import moleculePolarity from '../../moleculePolarity.js';
import PlateNode from './PlateNode.js';
export default class PlatesNode extends HBox {
  // height of the plates, for layout

  constructor(eFieldEnabledProperty, providedOptions) {
    const options = optionize()({
      // HBoxOptions
      spacing: 500
    }, providedOptions);
    options.visibleProperty = eFieldEnabledProperty;
    const negativePlateNode = new PlateNode('negative', combineOptions({}, options.plateOptions, {
      perspective: 'left'
    }));
    const positivePlateNode = new PlateNode('positive', combineOptions({}, options.plateOptions, {
      perspective: 'right'
    }));
    options.children = [negativePlateNode, positivePlateNode];
    super(options);
    this.plateHeight = negativePlateNode.plateHeight;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('PlatesNode', PlatesNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkhCb3giLCJtb2xlY3VsZVBvbGFyaXR5IiwiUGxhdGVOb2RlIiwiUGxhdGVzTm9kZSIsImNvbnN0cnVjdG9yIiwiZUZpZWxkRW5hYmxlZFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNwYWNpbmciLCJ2aXNpYmxlUHJvcGVydHkiLCJuZWdhdGl2ZVBsYXRlTm9kZSIsInBsYXRlT3B0aW9ucyIsInBlcnNwZWN0aXZlIiwicG9zaXRpdmVQbGF0ZU5vZGUiLCJjaGlsZHJlbiIsInBsYXRlSGVpZ2h0IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxhdGVzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQbGF0ZXNOb2RlIGRpc3BsYXlzIHRoZSAyIHBsYXRlcyAobmVnYXRpdmUgYW5kIHBvc2l0aXZlKSBmb3IgdGhlIEUtZmllbGQgY3JlYXRpb24gZGV2aWNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIEhCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcbmltcG9ydCBQbGF0ZU5vZGUsIHsgUGxhdGVOb2RlT3B0aW9ucyB9IGZyb20gJy4vUGxhdGVOb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcGxhdGVPcHRpb25zPzogUGxhdGVOb2RlT3B0aW9ucztcclxufTtcclxuXHJcbnR5cGUgUGxhdGVzTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tPcHRpb25hbDxIQm94T3B0aW9ucywgJ3NwYWNpbmcnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXRlc05vZGUgZXh0ZW5kcyBIQm94IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHBsYXRlSGVpZ2h0OiBudW1iZXI7IC8vIGhlaWdodCBvZiB0aGUgcGxhdGVzLCBmb3IgbGF5b3V0XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZUZpZWxkRW5hYmxlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgcHJvdmlkZWRPcHRpb25zPzogUGxhdGVzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQbGF0ZXNOb2RlT3B0aW9ucywgU3RyaWN0T21pdDxTZWxmT3B0aW9ucywgJ3BsYXRlT3B0aW9ucyc+LCBIQm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gSEJveE9wdGlvbnNcclxuICAgICAgc3BhY2luZzogNTAwXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBvcHRpb25zLnZpc2libGVQcm9wZXJ0eSA9IGVGaWVsZEVuYWJsZWRQcm9wZXJ0eTtcclxuXHJcbiAgICBjb25zdCBuZWdhdGl2ZVBsYXRlTm9kZSA9IG5ldyBQbGF0ZU5vZGUoICduZWdhdGl2ZScsIGNvbWJpbmVPcHRpb25zPFBsYXRlTm9kZU9wdGlvbnM+KCB7fSwgb3B0aW9ucy5wbGF0ZU9wdGlvbnMsIHtcclxuICAgICAgcGVyc3BlY3RpdmU6ICdsZWZ0J1xyXG4gICAgfSApICk7XHJcblxyXG4gICAgY29uc3QgcG9zaXRpdmVQbGF0ZU5vZGUgPSBuZXcgUGxhdGVOb2RlKCAncG9zaXRpdmUnLCBjb21iaW5lT3B0aW9uczxQbGF0ZU5vZGVPcHRpb25zPigge30sIG9wdGlvbnMucGxhdGVPcHRpb25zLCB7XHJcbiAgICAgIHBlcnNwZWN0aXZlOiAncmlnaHQnXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBuZWdhdGl2ZVBsYXRlTm9kZSwgcG9zaXRpdmVQbGF0ZU5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMucGxhdGVIZWlnaHQgPSBuZWdhdGl2ZVBsYXRlTm9kZS5wbGF0ZUhlaWdodDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2xlY3VsZVBvbGFyaXR5LnJlZ2lzdGVyKCAnUGxhdGVzTm9kZScsIFBsYXRlc05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxJQUFJQyxjQUFjLFFBQVEsdUNBQXVDO0FBR2pGLFNBQVNDLElBQUksUUFBcUIsbUNBQW1DO0FBQ3JFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxTQUFTLE1BQTRCLGdCQUFnQjtBQVE1RCxlQUFlLE1BQU1DLFVBQVUsU0FBU0gsSUFBSSxDQUFDO0VBRU47O0VBRTlCSSxXQUFXQSxDQUFFQyxxQkFBd0MsRUFBRUMsZUFBbUMsRUFBRztJQUVsRyxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBMEUsQ0FBQyxDQUFFO01BRXBHO01BQ0FVLE9BQU8sRUFBRTtJQUNYLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQkMsT0FBTyxDQUFDRSxlQUFlLEdBQUdKLHFCQUFxQjtJQUUvQyxNQUFNSyxpQkFBaUIsR0FBRyxJQUFJUixTQUFTLENBQUUsVUFBVSxFQUFFSCxjQUFjLENBQW9CLENBQUMsQ0FBQyxFQUFFUSxPQUFPLENBQUNJLFlBQVksRUFBRTtNQUMvR0MsV0FBVyxFQUFFO0lBQ2YsQ0FBRSxDQUFFLENBQUM7SUFFTCxNQUFNQyxpQkFBaUIsR0FBRyxJQUFJWCxTQUFTLENBQUUsVUFBVSxFQUFFSCxjQUFjLENBQW9CLENBQUMsQ0FBQyxFQUFFUSxPQUFPLENBQUNJLFlBQVksRUFBRTtNQUMvR0MsV0FBVyxFQUFFO0lBQ2YsQ0FBRSxDQUFFLENBQUM7SUFFTEwsT0FBTyxDQUFDTyxRQUFRLEdBQUcsQ0FBRUosaUJBQWlCLEVBQUVHLGlCQUFpQixDQUFFO0lBRTNELEtBQUssQ0FBRU4sT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ1EsV0FBVyxHQUFHTCxpQkFBaUIsQ0FBQ0ssV0FBVztFQUNsRDtFQUVnQkMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFmLGdCQUFnQixDQUFDaUIsUUFBUSxDQUFFLFlBQVksRUFBRWYsVUFBVyxDQUFDIn0=