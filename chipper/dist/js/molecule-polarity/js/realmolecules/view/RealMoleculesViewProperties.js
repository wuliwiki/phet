// Copyright 2016-2022, University of Colorado Boulder

/**
 * View-specific Properties for the 'Real Molecules' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import StringUnionProperty from '../../../../axon/js/StringUnionProperty.js';
import { SurfaceTypeValues } from '../../common/model/SurfaceType.js';
import moleculePolarity from '../../moleculePolarity.js';
export default class RealMoleculesViewProperties {
  constructor(providedOptions) {
    const options = providedOptions;
    this.bondDipolesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('bondDipolesVisibleProperty')
    });
    this.molecularDipoleVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('molecularDipoleVisibleProperty')
    });
    this.partialChargesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('partialChargesVisibleProperty')
    });
    this.atomElectronegativitiesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('atomElectronegativitiesVisibleProperty')
    });
    this.atomLabelsVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('atomLabelsVisibleProperty')
    });
    this.surfaceTypeProperty = new StringUnionProperty('none', {
      validValues: SurfaceTypeValues,
      tandem: options.tandem.createTandem('surfaceTypeProperty')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.bondDipolesVisibleProperty.reset();
    this.molecularDipoleVisibleProperty.reset();
    this.partialChargesVisibleProperty.reset();
    this.atomElectronegativitiesVisibleProperty.reset();
    this.atomLabelsVisibleProperty.reset();
    this.surfaceTypeProperty.reset();
  }
}
moleculePolarity.register('RealMoleculesViewProperties', RealMoleculesViewProperties);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJTdHJpbmdVbmlvblByb3BlcnR5IiwiU3VyZmFjZVR5cGVWYWx1ZXMiLCJtb2xlY3VsZVBvbGFyaXR5IiwiUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJtb2xlY3VsYXJEaXBvbGVWaXNpYmxlUHJvcGVydHkiLCJwYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eSIsImF0b21FbGVjdHJvbmVnYXRpdml0aWVzVmlzaWJsZVByb3BlcnR5IiwiYXRvbUxhYmVsc1Zpc2libGVQcm9wZXJ0eSIsInN1cmZhY2VUeXBlUHJvcGVydHkiLCJ2YWxpZFZhbHVlcyIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXctc3BlY2lmaWMgUHJvcGVydGllcyBmb3IgdGhlICdSZWFsIE1vbGVjdWxlcycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU3RyaW5nVW5pb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1N0cmluZ1VuaW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBTdXJmYWNlVHlwZSwgU3VyZmFjZVR5cGVWYWx1ZXMgfSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU3VyZmFjZVR5cGUuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBSZWFsTW9sZWN1bGVzVmlld1Byb3BlcnRpZXNPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGJvbmREaXBvbGVzVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbW9sZWN1bGFyRGlwb2xlVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgcGFydGlhbENoYXJnZXNWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG4gIHB1YmxpYyByZWFkb25seSBhdG9tRWxlY3Ryb25lZ2F0aXZpdGllc1Zpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHVibGljIHJlYWRvbmx5IGF0b21MYWJlbHNWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG4gIHB1YmxpYyByZWFkb25seSBzdXJmYWNlVHlwZVByb3BlcnR5OiBTdHJpbmdVbmlvblByb3BlcnR5PFN1cmZhY2VUeXBlPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IFJlYWxNb2xlY3VsZXNWaWV3UHJvcGVydGllc09wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHByb3ZpZGVkT3B0aW9ucztcclxuXHJcbiAgICB0aGlzLmJvbmREaXBvbGVzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdib25kRGlwb2xlc1Zpc2libGVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMubW9sZWN1bGFyRGlwb2xlVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2xlY3VsYXJEaXBvbGVWaXNpYmxlUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnBhcnRpYWxDaGFyZ2VzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2F0b21FbGVjdHJvbmVnYXRpdml0aWVzVmlzaWJsZVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hdG9tTGFiZWxzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhdG9tTGFiZWxzVmlzaWJsZVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5zdXJmYWNlVHlwZVByb3BlcnR5ID0gbmV3IFN0cmluZ1VuaW9uUHJvcGVydHkoICdub25lJywge1xyXG4gICAgICB2YWxpZFZhbHVlczogU3VyZmFjZVR5cGVWYWx1ZXMsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3VyZmFjZVR5cGVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubW9sZWN1bGFyRGlwb2xlVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnBhcnRpYWxDaGFyZ2VzVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmF0b21FbGVjdHJvbmVnYXRpdml0aWVzVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmF0b21MYWJlbHNWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuc3VyZmFjZVR5cGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ1JlYWxNb2xlY3VsZXNWaWV3UHJvcGVydGllcycsIFJlYWxNb2xlY3VsZXNWaWV3UHJvcGVydGllcyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLG1CQUFtQixNQUFNLDRDQUE0QztBQUM1RSxTQUFzQkMsaUJBQWlCLFFBQVEsbUNBQW1DO0FBQ2xGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQVV4RCxlQUFlLE1BQU1DLDJCQUEyQixDQUFDO0VBU3hDQyxXQUFXQSxDQUFFQyxlQUFtRCxFQUFHO0lBRXhFLE1BQU1DLE9BQU8sR0FBR0QsZUFBZTtJQUUvQixJQUFJLENBQUNFLDBCQUEwQixHQUFHLElBQUlSLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDNURTLE1BQU0sRUFBRUYsT0FBTyxDQUFDRSxNQUFNLENBQUNDLFlBQVksQ0FBRSw0QkFBNkI7SUFDcEUsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyw4QkFBOEIsR0FBRyxJQUFJWCxlQUFlLENBQUUsS0FBSyxFQUFFO01BQ2hFUyxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsZ0NBQWlDO0lBQ3hFLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0UsNkJBQTZCLEdBQUcsSUFBSVosZUFBZSxDQUFFLEtBQUssRUFBRTtNQUMvRFMsTUFBTSxFQUFFRixPQUFPLENBQUNFLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLCtCQUFnQztJQUN2RSxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNHLHNDQUFzQyxHQUFHLElBQUliLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDeEVTLE1BQU0sRUFBRUYsT0FBTyxDQUFDRSxNQUFNLENBQUNDLFlBQVksQ0FBRSx3Q0FBeUM7SUFDaEYsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDSSx5QkFBeUIsR0FBRyxJQUFJZCxlQUFlLENBQUUsS0FBSyxFQUFFO01BQzNEUyxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsMkJBQTRCO0lBQ25FLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0ssbUJBQW1CLEdBQUcsSUFBSWQsbUJBQW1CLENBQUUsTUFBTSxFQUFFO01BQzFEZSxXQUFXLEVBQUVkLGlCQUFpQjtNQUM5Qk8sTUFBTSxFQUFFRixPQUFPLENBQUNFLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHFCQUFzQjtJQUM3RCxDQUFFLENBQUM7RUFDTDtFQUVPTyxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjtFQUVPQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDWCwwQkFBMEIsQ0FBQ1csS0FBSyxDQUFDLENBQUM7SUFDdkMsSUFBSSxDQUFDUiw4QkFBOEIsQ0FBQ1EsS0FBSyxDQUFDLENBQUM7SUFDM0MsSUFBSSxDQUFDUCw2QkFBNkIsQ0FBQ08sS0FBSyxDQUFDLENBQUM7SUFDMUMsSUFBSSxDQUFDTixzQ0FBc0MsQ0FBQ00sS0FBSyxDQUFDLENBQUM7SUFDbkQsSUFBSSxDQUFDTCx5QkFBeUIsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDSixtQkFBbUIsQ0FBQ0ksS0FBSyxDQUFDLENBQUM7RUFDbEM7QUFDRjtBQUVBaEIsZ0JBQWdCLENBQUNpQixRQUFRLENBQUUsNkJBQTZCLEVBQUVoQiwyQkFBNEIsQ0FBQyJ9