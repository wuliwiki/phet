// Copyright 2014-2023, University of Colorado Boulder

//TODO This is currently a stub, integrate with 3D viewer in https://github.com/phetsims/molecule-polarity/issues/15
/**
 * JSmol viewer.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PatternStringProperty from '../../../../axon/js/PatternStringProperty.js';
import Property from '../../../../axon/js/Property.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Line, Node, Rectangle, RichText, Text, VBox } from '../../../../scenery/js/imports.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
// constants
const FONT = new PhetFont(18);
export default class RealMoleculeViewer extends Node {
  constructor(moleculeProperty, viewProperties, providedOptions) {
    const options = optionize()({
      // SelfOptions
      backgroundColor: 'white',
      viewerSize: new Dimension2(200, 200)
    }, providedOptions);
    const rectNode = new Rectangle(0, 0, options.viewerSize.width, options.viewerSize.height, {
      stroke: 'rgba(0,0,0,0.25)',
      fill: options.backgroundColor
    });
    const titleText = new Text('3D molecule viewer goes here', {
      font: new PhetFont({
        size: 22,
        weight: 'bold'
      }),
      center: rectNode.center
    });

    // Symbol and name of the molecule shown by the viewer
    const moleculeTextParent = new Node();
    let moleculeStringProperty;
    moleculeProperty.link(molecule => {
      moleculeTextParent.removeAllChildren();
      moleculeStringProperty && moleculeStringProperty.dispose();
      moleculeStringProperty = new PatternStringProperty(MoleculePolarityStrings.pattern.symbolNameStringProperty, {
        symbol: molecule.symbol,
        name: molecule.fullNameProperty
      });
      moleculeTextParent.addChild(new RichText(moleculeStringProperty, {
        font: FONT,
        maxWidth: 200
      }));
    });
    const bondDipolesText = new Text('bond dipoles', {
      font: FONT,
      visibleProperty: viewProperties.bondDipolesVisibleProperty
    });
    const molecularDipoleText = new Text('molecular dipole', {
      font: FONT,
      visibleProperty: viewProperties.molecularDipoleVisibleProperty
    });
    const partialChargesText = new Text('partial charges', {
      font: FONT,
      visibleProperty: viewProperties.partialChargesVisibleProperty
    });
    const atomLabelsText = new Text('atom labels', {
      font: FONT,
      visibleProperty: viewProperties.atomLabelsVisibleProperty
    });
    const surfaceTypeText = new Text('?', {
      font: FONT
    });
    const debugText = new VBox({
      excludeInvisibleChildrenFromBounds: false,
      align: 'left',
      spacing: 10,
      centerX: rectNode.centerX,
      centerY: rectNode.centerY,
      children: [titleText, new Line(0, 0, 0, 30), moleculeTextParent, new Line(0, 0, 0, 30), bondDipolesText, molecularDipoleText, partialChargesText, atomLabelsText, surfaceTypeText]
    });
    options.children = [rectNode, debugText];
    super(options);
    this.elementsProperty = new Property([]);
    this.bondDipolesText = bondDipolesText;
    this.molecularDipoleText = molecularDipoleText;
    this.partialChargesText = partialChargesText;
    this.atomLabelsText = atomLabelsText;
    this.surfaceTypeText = surfaceTypeText;
    viewProperties.surfaceTypeProperty.link(surfaceType => {
      this.surfaceTypeText.string = `surface: ${surfaceType}`;
    });
    moleculeProperty.link(molecule => {

      //TODO populate elementsProperty with [Elements] for the selected molecule, see https://github.com/phetsims/molecule-polarity/issues/15
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('RealMoleculeViewer', RealMoleculeViewer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJQcm9wZXJ0eSIsIkRpbWVuc2lvbjIiLCJvcHRpb25pemUiLCJQaGV0Rm9udCIsIkxpbmUiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiUmljaFRleHQiLCJUZXh0IiwiVkJveCIsIm1vbGVjdWxlUG9sYXJpdHkiLCJNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyIsIkZPTlQiLCJSZWFsTW9sZWN1bGVWaWV3ZXIiLCJjb25zdHJ1Y3RvciIsIm1vbGVjdWxlUHJvcGVydHkiLCJ2aWV3UHJvcGVydGllcyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ2aWV3ZXJTaXplIiwicmVjdE5vZGUiLCJ3aWR0aCIsImhlaWdodCIsInN0cm9rZSIsImZpbGwiLCJ0aXRsZVRleHQiLCJmb250Iiwic2l6ZSIsIndlaWdodCIsImNlbnRlciIsIm1vbGVjdWxlVGV4dFBhcmVudCIsIm1vbGVjdWxlU3RyaW5nUHJvcGVydHkiLCJsaW5rIiwibW9sZWN1bGUiLCJyZW1vdmVBbGxDaGlsZHJlbiIsImRpc3Bvc2UiLCJwYXR0ZXJuIiwic3ltYm9sTmFtZVN0cmluZ1Byb3BlcnR5Iiwic3ltYm9sIiwibmFtZSIsImZ1bGxOYW1lUHJvcGVydHkiLCJhZGRDaGlsZCIsIm1heFdpZHRoIiwiYm9uZERpcG9sZXNUZXh0IiwidmlzaWJsZVByb3BlcnR5IiwiYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHkiLCJtb2xlY3VsYXJEaXBvbGVUZXh0IiwibW9sZWN1bGFyRGlwb2xlVmlzaWJsZVByb3BlcnR5IiwicGFydGlhbENoYXJnZXNUZXh0IiwicGFydGlhbENoYXJnZXNWaXNpYmxlUHJvcGVydHkiLCJhdG9tTGFiZWxzVGV4dCIsImF0b21MYWJlbHNWaXNpYmxlUHJvcGVydHkiLCJzdXJmYWNlVHlwZVRleHQiLCJkZWJ1Z1RleHQiLCJleGNsdWRlSW52aXNpYmxlQ2hpbGRyZW5Gcm9tQm91bmRzIiwiYWxpZ24iLCJzcGFjaW5nIiwiY2VudGVyWCIsImNlbnRlclkiLCJjaGlsZHJlbiIsImVsZW1lbnRzUHJvcGVydHkiLCJzdXJmYWNlVHlwZVByb3BlcnR5Iiwic3VyZmFjZVR5cGUiLCJzdHJpbmciLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJlYWxNb2xlY3VsZVZpZXdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8vVE9ETyBUaGlzIGlzIGN1cnJlbnRseSBhIHN0dWIsIGludGVncmF0ZSB3aXRoIDNEIHZpZXdlciBpbiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvbW9sZWN1bGUtcG9sYXJpdHkvaXNzdWVzLzE1XHJcbi8qKlxyXG4gKiBKU21vbCB2aWV3ZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBhdHRlcm5TdHJpbmdQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1BhdHRlcm5TdHJpbmdQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgTGluZSwgTm9kZSwgTm9kZU9wdGlvbnMsIFJlY3RhbmdsZSwgUmljaFRleHQsIFRDb2xvciwgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtb2xlY3VsZVBvbGFyaXR5IGZyb20gJy4uLy4uL21vbGVjdWxlUG9sYXJpdHkuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MgZnJvbSAnLi4vLi4vTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUmVhbE1vbGVjdWxlIGZyb20gJy4uL21vZGVsL1JlYWxNb2xlY3VsZS5qcyc7XHJcbmltcG9ydCBFbGVtZW50IGZyb20gJy4uL21vZGVsL0VsZW1lbnQuanMnO1xyXG5pbXBvcnQgUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzIGZyb20gJy4vUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEZPTlQgPSBuZXcgUGhldEZvbnQoIDE4ICk7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGJhY2tncm91bmRDb2xvcj86IFRDb2xvcjtcclxuICB2aWV3ZXJTaXplPzogRGltZW5zaW9uMjtcclxufTtcclxuXHJcbnR5cGUgUmVhbE1vbGVjdWxlVmlld2VyT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFsTW9sZWN1bGVWaWV3ZXIgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGVsZW1lbnRzUHJvcGVydHk6IFByb3BlcnR5PEVsZW1lbnRbXT47XHJcbiAgcHVibGljIHJlYWRvbmx5IGJvbmREaXBvbGVzVGV4dDogVGV4dDtcclxuICBwdWJsaWMgcmVhZG9ubHkgbW9sZWN1bGFyRGlwb2xlVGV4dDogVGV4dDtcclxuICBwdWJsaWMgcmVhZG9ubHkgcGFydGlhbENoYXJnZXNUZXh0OiBUZXh0O1xyXG4gIHB1YmxpYyByZWFkb25seSBhdG9tTGFiZWxzVGV4dDogVGV4dDtcclxuICBwdWJsaWMgcmVhZG9ubHkgc3VyZmFjZVR5cGVUZXh0OiBUZXh0O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vbGVjdWxlUHJvcGVydHk6IFByb3BlcnR5PFJlYWxNb2xlY3VsZT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICB2aWV3UHJvcGVydGllczogUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBSZWFsTW9sZWN1bGVWaWV3ZXJPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UmVhbE1vbGVjdWxlVmlld2VyT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgICAgIHZpZXdlclNpemU6IG5ldyBEaW1lbnNpb24yKCAyMDAsIDIwMCApXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCByZWN0Tm9kZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIG9wdGlvbnMudmlld2VyU2l6ZS53aWR0aCwgb3B0aW9ucy52aWV3ZXJTaXplLmhlaWdodCwge1xyXG4gICAgICBzdHJva2U6ICdyZ2JhKDAsMCwwLDAuMjUpJyxcclxuICAgICAgZmlsbDogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3JcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB0aXRsZVRleHQgPSBuZXcgVGV4dCggJzNEIG1vbGVjdWxlIHZpZXdlciBnb2VzIGhlcmUnLCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCgge1xyXG4gICAgICAgIHNpemU6IDIyLFxyXG4gICAgICAgIHdlaWdodDogJ2JvbGQnXHJcbiAgICAgIH0gKSxcclxuICAgICAgY2VudGVyOiByZWN0Tm9kZS5jZW50ZXJcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBTeW1ib2wgYW5kIG5hbWUgb2YgdGhlIG1vbGVjdWxlIHNob3duIGJ5IHRoZSB2aWV3ZXJcclxuICAgIGNvbnN0IG1vbGVjdWxlVGV4dFBhcmVudCA9IG5ldyBOb2RlKCk7XHJcbiAgICBsZXQgbW9sZWN1bGVTdHJpbmdQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPjtcclxuICAgIG1vbGVjdWxlUHJvcGVydHkubGluayggbW9sZWN1bGUgPT4ge1xyXG4gICAgICBtb2xlY3VsZVRleHRQYXJlbnQucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcclxuICAgICAgbW9sZWN1bGVTdHJpbmdQcm9wZXJ0eSAmJiBtb2xlY3VsZVN0cmluZ1Byb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgbW9sZWN1bGVTdHJpbmdQcm9wZXJ0eSA9IG5ldyBQYXR0ZXJuU3RyaW5nUHJvcGVydHkoIE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzLnBhdHRlcm4uc3ltYm9sTmFtZVN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgc3ltYm9sOiBtb2xlY3VsZS5zeW1ib2wsXHJcbiAgICAgICAgbmFtZTogbW9sZWN1bGUuZnVsbE5hbWVQcm9wZXJ0eVxyXG4gICAgICB9ICk7XHJcbiAgICAgIG1vbGVjdWxlVGV4dFBhcmVudC5hZGRDaGlsZCggbmV3IFJpY2hUZXh0KCBtb2xlY3VsZVN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgZm9udDogRk9OVCxcclxuICAgICAgICBtYXhXaWR0aDogMjAwXHJcbiAgICAgIH0gKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGJvbmREaXBvbGVzVGV4dCA9IG5ldyBUZXh0KCAnYm9uZCBkaXBvbGVzJywge1xyXG4gICAgICBmb250OiBGT05ULFxyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IHZpZXdQcm9wZXJ0aWVzLmJvbmREaXBvbGVzVmlzaWJsZVByb3BlcnR5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgbW9sZWN1bGFyRGlwb2xlVGV4dCA9IG5ldyBUZXh0KCAnbW9sZWN1bGFyIGRpcG9sZScsIHtcclxuICAgICAgZm9udDogRk9OVCxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiB2aWV3UHJvcGVydGllcy5tb2xlY3VsYXJEaXBvbGVWaXNpYmxlUHJvcGVydHlcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBwYXJ0aWFsQ2hhcmdlc1RleHQgPSBuZXcgVGV4dCggJ3BhcnRpYWwgY2hhcmdlcycsIHtcclxuICAgICAgZm9udDogRk9OVCxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiB2aWV3UHJvcGVydGllcy5wYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGF0b21MYWJlbHNUZXh0ID0gbmV3IFRleHQoICdhdG9tIGxhYmVscycsIHtcclxuICAgICAgZm9udDogRk9OVCxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiB2aWV3UHJvcGVydGllcy5hdG9tTGFiZWxzVmlzaWJsZVByb3BlcnR5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgc3VyZmFjZVR5cGVUZXh0ID0gbmV3IFRleHQoICc/JywgeyBmb250OiBGT05UIH0gKTtcclxuXHJcbiAgICBjb25zdCBkZWJ1Z1RleHQgPSBuZXcgVkJveCgge1xyXG4gICAgICBleGNsdWRlSW52aXNpYmxlQ2hpbGRyZW5Gcm9tQm91bmRzOiBmYWxzZSxcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogMTAsXHJcbiAgICAgIGNlbnRlclg6IHJlY3ROb2RlLmNlbnRlclgsXHJcbiAgICAgIGNlbnRlclk6IHJlY3ROb2RlLmNlbnRlclksXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgdGl0bGVUZXh0LFxyXG4gICAgICAgIG5ldyBMaW5lKCAwLCAwLCAwLCAzMCApLFxyXG4gICAgICAgIG1vbGVjdWxlVGV4dFBhcmVudCxcclxuICAgICAgICBuZXcgTGluZSggMCwgMCwgMCwgMzAgKSxcclxuICAgICAgICBib25kRGlwb2xlc1RleHQsXHJcbiAgICAgICAgbW9sZWN1bGFyRGlwb2xlVGV4dCxcclxuICAgICAgICBwYXJ0aWFsQ2hhcmdlc1RleHQsXHJcbiAgICAgICAgYXRvbUxhYmVsc1RleHQsXHJcbiAgICAgICAgc3VyZmFjZVR5cGVUZXh0XHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyByZWN0Tm9kZSwgZGVidWdUZXh0IF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnRzUHJvcGVydHkgPSBuZXcgUHJvcGVydHk8RWxlbWVudFtdPiggW10gKTtcclxuXHJcbiAgICB0aGlzLmJvbmREaXBvbGVzVGV4dCA9IGJvbmREaXBvbGVzVGV4dDtcclxuICAgIHRoaXMubW9sZWN1bGFyRGlwb2xlVGV4dCA9IG1vbGVjdWxhckRpcG9sZVRleHQ7XHJcbiAgICB0aGlzLnBhcnRpYWxDaGFyZ2VzVGV4dCA9IHBhcnRpYWxDaGFyZ2VzVGV4dDtcclxuICAgIHRoaXMuYXRvbUxhYmVsc1RleHQgPSBhdG9tTGFiZWxzVGV4dDtcclxuICAgIHRoaXMuc3VyZmFjZVR5cGVUZXh0ID0gc3VyZmFjZVR5cGVUZXh0O1xyXG5cclxuICAgIHZpZXdQcm9wZXJ0aWVzLnN1cmZhY2VUeXBlUHJvcGVydHkubGluayggc3VyZmFjZVR5cGUgPT4ge1xyXG4gICAgICB0aGlzLnN1cmZhY2VUeXBlVGV4dC5zdHJpbmcgPSAoIGBzdXJmYWNlOiAke3N1cmZhY2VUeXBlfWAgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBtb2xlY3VsZVByb3BlcnR5LmxpbmsoIG1vbGVjdWxlID0+IHtcclxuXHJcbiAgICAgIC8vVE9ETyBwb3B1bGF0ZSBlbGVtZW50c1Byb3BlcnR5IHdpdGggW0VsZW1lbnRzXSBmb3IgdGhlIHNlbGVjdGVkIG1vbGVjdWxlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL21vbGVjdWxlLXBvbGFyaXR5L2lzc3Vlcy8xNVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm1vbGVjdWxlUG9sYXJpdHkucmVnaXN0ZXIoICdSZWFsTW9sZWN1bGVWaWV3ZXInLCBSZWFsTW9sZWN1bGVWaWV3ZXIgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxxQkFBcUIsTUFBTSw4Q0FBOEM7QUFDaEYsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBZUMsU0FBUyxFQUFFQyxRQUFRLEVBQVVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNwSCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBTXRFO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQUlULFFBQVEsQ0FBRSxFQUFHLENBQUM7QUFTL0IsZUFBZSxNQUFNVSxrQkFBa0IsU0FBU1IsSUFBSSxDQUFDO0VBUzVDUyxXQUFXQSxDQUFFQyxnQkFBd0MsRUFDeENDLGNBQTJDLEVBQzNDQyxlQUEw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