// Copyright 2017-2022, University of Colorado Boulder

/**
 * RealMoleculesViewControls is the subpanel labeled 'View' in the 'Real Molecules' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Text, VBox } from '../../../../scenery/js/imports.js';
import MPConstants from '../../common/MPConstants.js';
import BondDipolesCheckbox from '../../common/view/BondDipolesCheckbox.js';
import MolecularDipoleCheckbox from '../../common/view/MolecularDipoleCheckbox.js';
import PartialChargesCheckbox from '../../common/view/PartialChargesCheckbox.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
import AtomElectronegativitiesCheckbox from './AtomElectronegativitiesCheckbox.js';
import AtomLabelsCheckbox from './AtomLabelsCheckbox.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class RealMoleculesViewControls extends VBox {
  constructor(viewProperties, provideOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING
    }, provideOptions);
    const titleText = new Text(MoleculePolarityStrings.viewStringProperty, combineOptions({}, MPConstants.CONTROL_PANEL_TITLE_OPTIONS, {
      tandem: options.tandem.createTandem('titleText')
    }));
    const bondDipolesCheckbox = new BondDipolesCheckbox(viewProperties.bondDipolesVisibleProperty, {
      tandem: options.tandem.createTandem('bondDipolesCheckbox')
    });
    const molecularDipoleCheckbox = new MolecularDipoleCheckbox(viewProperties.molecularDipoleVisibleProperty, {
      tandem: options.tandem.createTandem('molecularDipoleCheckbox')
    });
    const partialChargesCheckbox = new PartialChargesCheckbox(viewProperties.partialChargesVisibleProperty, {
      tandem: options.tandem.createTandem('partialChargesCheckbox')
    });
    const atomLabelsCheckbox = new AtomLabelsCheckbox(viewProperties.atomLabelsVisibleProperty, {
      tandem: options.tandem.createTandem('atomLabelsCheckbox')
    });
    const atomElectronegativitiesCheckbox = new AtomElectronegativitiesCheckbox(viewProperties.atomElectronegativitiesVisibleProperty, {
      tandem: options.tandem.createTandem('atomElectronegativitiesCheckbox')
    });
    options.children = [titleText, bondDipolesCheckbox, molecularDipoleCheckbox, partialChargesCheckbox, atomLabelsCheckbox, atomElectronegativitiesCheckbox];
    super(options);
  }
}
moleculePolarity.register('RealMoleculesViewControls', RealMoleculesViewControls);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiVkJveCIsIk1QQ29uc3RhbnRzIiwiQm9uZERpcG9sZXNDaGVja2JveCIsIk1vbGVjdWxhckRpcG9sZUNoZWNrYm94IiwiUGFydGlhbENoYXJnZXNDaGVja2JveCIsIm1vbGVjdWxlUG9sYXJpdHkiLCJNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyIsIkF0b21FbGVjdHJvbmVnYXRpdml0aWVzQ2hlY2tib3giLCJBdG9tTGFiZWxzQ2hlY2tib3giLCJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIlJlYWxNb2xlY3VsZXNWaWV3Q29udHJvbHMiLCJjb25zdHJ1Y3RvciIsInZpZXdQcm9wZXJ0aWVzIiwicHJvdmlkZU9wdGlvbnMiLCJvcHRpb25zIiwiYWxpZ24iLCJzcGFjaW5nIiwiQ09OVFJPTF9QQU5FTF9ZX1NQQUNJTkciLCJ0aXRsZVRleHQiLCJ2aWV3U3RyaW5nUHJvcGVydHkiLCJDT05UUk9MX1BBTkVMX1RJVExFX09QVElPTlMiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJib25kRGlwb2xlc0NoZWNrYm94IiwiYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHkiLCJtb2xlY3VsYXJEaXBvbGVDaGVja2JveCIsIm1vbGVjdWxhckRpcG9sZVZpc2libGVQcm9wZXJ0eSIsInBhcnRpYWxDaGFyZ2VzQ2hlY2tib3giLCJwYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eSIsImF0b21MYWJlbHNDaGVja2JveCIsImF0b21MYWJlbHNWaXNpYmxlUHJvcGVydHkiLCJhdG9tRWxlY3Ryb25lZ2F0aXZpdGllc0NoZWNrYm94IiwiYXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNWaXNpYmxlUHJvcGVydHkiLCJjaGlsZHJlbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVhbE1vbGVjdWxlc1ZpZXdDb250cm9scy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZWFsTW9sZWN1bGVzVmlld0NvbnRyb2xzIGlzIHRoZSBzdWJwYW5lbCBsYWJlbGVkICdWaWV3JyBpbiB0aGUgJ1JlYWwgTW9sZWN1bGVzJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVGV4dCwgVGV4dE9wdGlvbnMsIFZCb3gsIFZCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IE1QQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9NUENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBCb25kRGlwb2xlc0NoZWNrYm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0JvbmREaXBvbGVzQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgTW9sZWN1bGFyRGlwb2xlQ2hlY2tib3ggZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTW9sZWN1bGFyRGlwb2xlQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgUGFydGlhbENoYXJnZXNDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9QYXJ0aWFsQ2hhcmdlc0NoZWNrYm94LmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyBmcm9tICcuLi8uLi9Nb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBBdG9tRWxlY3Ryb25lZ2F0aXZpdGllc0NoZWNrYm94IGZyb20gJy4vQXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNDaGVja2JveC5qcyc7XHJcbmltcG9ydCBBdG9tTGFiZWxzQ2hlY2tib3ggZnJvbSAnLi9BdG9tTGFiZWxzQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzIGZyb20gJy4vUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFJlYWxNb2xlY3VsZXNWaWV3Q29udHJvbHNPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8VkJveE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWxNb2xlY3VsZXNWaWV3Q29udHJvbHMgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2aWV3UHJvcGVydGllczogUmVhbE1vbGVjdWxlc1ZpZXdQcm9wZXJ0aWVzLCBwcm92aWRlT3B0aW9uczogUmVhbE1vbGVjdWxlc1ZpZXdDb250cm9sc09wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSZWFsTW9sZWN1bGVzVmlld0NvbnRyb2xzT3B0aW9ucywgU2VsZk9wdGlvbnMsIFZCb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBWQm94T3B0aW9uc1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiBNUENvbnN0YW50cy5DT05UUk9MX1BBTkVMX1lfU1BBQ0lOR1xyXG4gICAgfSwgcHJvdmlkZU9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB0aXRsZVRleHQgPSBuZXcgVGV4dCggTW9sZWN1bGVQb2xhcml0eVN0cmluZ3Mudmlld1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxUZXh0T3B0aW9ucz4oIHt9LCBNUENvbnN0YW50cy5DT05UUk9MX1BBTkVMX1RJVExFX09QVElPTlMsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RpdGxlVGV4dCcgKVxyXG4gICAgICB9ICkgKTtcclxuXHJcbiAgICBjb25zdCBib25kRGlwb2xlc0NoZWNrYm94ID0gbmV3IEJvbmREaXBvbGVzQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLmJvbmREaXBvbGVzVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYm9uZERpcG9sZXNDaGVja2JveCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IG1vbGVjdWxhckRpcG9sZUNoZWNrYm94ID0gbmV3IE1vbGVjdWxhckRpcG9sZUNoZWNrYm94KCB2aWV3UHJvcGVydGllcy5tb2xlY3VsYXJEaXBvbGVWaXNpYmxlUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2xlY3VsYXJEaXBvbGVDaGVja2JveCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHBhcnRpYWxDaGFyZ2VzQ2hlY2tib3ggPSBuZXcgUGFydGlhbENoYXJnZXNDaGVja2JveCggdmlld1Byb3BlcnRpZXMucGFydGlhbENoYXJnZXNWaXNpYmxlUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwYXJ0aWFsQ2hhcmdlc0NoZWNrYm94JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgYXRvbUxhYmVsc0NoZWNrYm94ID0gbmV3IEF0b21MYWJlbHNDaGVja2JveCggdmlld1Byb3BlcnRpZXMuYXRvbUxhYmVsc1Zpc2libGVQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2F0b21MYWJlbHNDaGVja2JveCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGF0b21FbGVjdHJvbmVnYXRpdml0aWVzQ2hlY2tib3ggPSBuZXcgQXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNDaGVja2JveCggdmlld1Byb3BlcnRpZXMuYXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNWaXNpYmxlUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhdG9tRWxlY3Ryb25lZ2F0aXZpdGllc0NoZWNrYm94JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFtcclxuICAgICAgdGl0bGVUZXh0LFxyXG4gICAgICBib25kRGlwb2xlc0NoZWNrYm94LFxyXG4gICAgICBtb2xlY3VsYXJEaXBvbGVDaGVja2JveCxcclxuICAgICAgcGFydGlhbENoYXJnZXNDaGVja2JveCxcclxuICAgICAgYXRvbUxhYmVsc0NoZWNrYm94LFxyXG4gICAgICBhdG9tRWxlY3Ryb25lZ2F0aXZpdGllc0NoZWNrYm94XHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2xlY3VsZVBvbGFyaXR5LnJlZ2lzdGVyKCAnUmVhbE1vbGVjdWxlc1ZpZXdDb250cm9scycsIFJlYWxNb2xlY3VsZXNWaWV3Q29udHJvbHMgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxFQUFlQyxJQUFJLFFBQXFCLG1DQUFtQztBQUN4RixPQUFPQyxXQUFXLE1BQU0sNkJBQTZCO0FBQ3JELE9BQU9DLG1CQUFtQixNQUFNLDBDQUEwQztBQUMxRSxPQUFPQyx1QkFBdUIsTUFBTSw4Q0FBOEM7QUFDbEYsT0FBT0Msc0JBQXNCLE1BQU0sNkNBQTZDO0FBQ2hGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsT0FBT0MsK0JBQStCLE1BQU0sc0NBQXNDO0FBQ2xGLE9BQU9DLGtCQUFrQixNQUFNLHlCQUF5QjtBQUd4RCxPQUFPQyxTQUFTLElBQUlDLGNBQWMsUUFBMEIsdUNBQXVDO0FBTW5HLGVBQWUsTUFBTUMseUJBQXlCLFNBQVNYLElBQUksQ0FBQztFQUVuRFksV0FBV0EsQ0FBRUMsY0FBMkMsRUFBRUMsY0FBZ0QsRUFBRztJQUVsSCxNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBNkQsQ0FBQyxDQUFFO01BRXZGO01BQ0FPLEtBQUssRUFBRSxNQUFNO01BQ2JDLE9BQU8sRUFBRWhCLFdBQVcsQ0FBQ2lCO0lBQ3ZCLENBQUMsRUFBRUosY0FBZSxDQUFDO0lBRW5CLE1BQU1LLFNBQVMsR0FBRyxJQUFJcEIsSUFBSSxDQUFFTyx1QkFBdUIsQ0FBQ2Msa0JBQWtCLEVBQ3BFVixjQUFjLENBQWUsQ0FBQyxDQUFDLEVBQUVULFdBQVcsQ0FBQ29CLDJCQUEyQixFQUFFO01BQ3hFQyxNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUUsV0FBWTtJQUNuRCxDQUFFLENBQUUsQ0FBQztJQUVQLE1BQU1DLG1CQUFtQixHQUFHLElBQUl0QixtQkFBbUIsQ0FBRVcsY0FBYyxDQUFDWSwwQkFBMEIsRUFBRTtNQUM5RkgsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHFCQUFzQjtJQUM3RCxDQUFFLENBQUM7SUFFSCxNQUFNRyx1QkFBdUIsR0FBRyxJQUFJdkIsdUJBQXVCLENBQUVVLGNBQWMsQ0FBQ2MsOEJBQThCLEVBQUU7TUFDMUdMLE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSx5QkFBMEI7SUFDakUsQ0FBRSxDQUFDO0lBRUgsTUFBTUssc0JBQXNCLEdBQUcsSUFBSXhCLHNCQUFzQixDQUFFUyxjQUFjLENBQUNnQiw2QkFBNkIsRUFBRTtNQUN2R1AsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHdCQUF5QjtJQUNoRSxDQUFFLENBQUM7SUFFSCxNQUFNTyxrQkFBa0IsR0FBRyxJQUFJdEIsa0JBQWtCLENBQUVLLGNBQWMsQ0FBQ2tCLHlCQUF5QixFQUFFO01BQzNGVCxNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUUsb0JBQXFCO0lBQzVELENBQUUsQ0FBQztJQUVILE1BQU1TLCtCQUErQixHQUFHLElBQUl6QiwrQkFBK0IsQ0FBRU0sY0FBYyxDQUFDb0Isc0NBQXNDLEVBQUU7TUFDbElYLE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSxpQ0FBa0M7SUFDekUsQ0FBRSxDQUFDO0lBRUhSLE9BQU8sQ0FBQ21CLFFBQVEsR0FBRyxDQUNqQmYsU0FBUyxFQUNUSyxtQkFBbUIsRUFDbkJFLHVCQUF1QixFQUN2QkUsc0JBQXNCLEVBQ3RCRSxrQkFBa0IsRUFDbEJFLCtCQUErQixDQUNoQztJQUVELEtBQUssQ0FBRWpCLE9BQVEsQ0FBQztFQUNsQjtBQUNGO0FBRUFWLGdCQUFnQixDQUFDOEIsUUFBUSxDQUFFLDJCQUEyQixFQUFFeEIseUJBQTBCLENBQUMifQ==