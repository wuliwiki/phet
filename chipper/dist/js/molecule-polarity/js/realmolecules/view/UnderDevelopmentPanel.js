// Copyright 2017-2022, University of Colorado Boulder

//TODO Delete when the Real Molecules screen is completed, see https://github.com/phetsims/molecule-polarity/issues/32
/**
 * Used to disable the 'Real Molecules' screen and display a message indicating that it's under development.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { allowLinksProperty, RichText, Text, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';

// constants
const LEGACY_URL = 'https://phet.colorado.edu/en/simulations/legacy/molecule-polarity/translations';
export default class UnderDevelopmentPanel extends Panel {
  constructor(layoutBounds) {
    const urlStringProperty = new DerivedProperty([allowLinksProperty], allowLinks => allowLinks ? StringUtils.fillIn('<a href="{{href}}">{{text}}</a>', {
      href: LEGACY_URL,
      text: LEGACY_URL
    }) : LEGACY_URL);
    const maxTextWidth = 0.75 * layoutBounds.width;
    const vBox = new VBox({
      align: 'left',
      spacing: 20,
      children: [new Text(MoleculePolarityStrings.underDevelopment.line1StringProperty, {
        font: new PhetFont(22),
        maxWidth: maxTextWidth
      }), new VBox({
        align: 'left',
        children: [new Text(MoleculePolarityStrings.underDevelopment.line2StringProperty, {
          font: new PhetFont(16),
          maxWidth: maxTextWidth
        }), new RichText(urlStringProperty, {
          links: true,
          font: new PhetFont(16),
          maxWidth: maxTextWidth
        })]
      })]
    });
    super(vBox, {
      cornerRadius: 10,
      xMargin: 25,
      yMargin: 50,
      fill: 'white',
      stroke: 'black'
    });
    this.boundsProperty.link(() => {
      this.center = layoutBounds.center;
    });
  }
}
moleculePolarity.register('UnderDevelopmentPanel', UnderDevelopmentPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJTdHJpbmdVdGlscyIsIlBoZXRGb250IiwiYWxsb3dMaW5rc1Byb3BlcnR5IiwiUmljaFRleHQiLCJUZXh0IiwiVkJveCIsIlBhbmVsIiwibW9sZWN1bGVQb2xhcml0eSIsIk1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIiwiTEVHQUNZX1VSTCIsIlVuZGVyRGV2ZWxvcG1lbnRQYW5lbCIsImNvbnN0cnVjdG9yIiwibGF5b3V0Qm91bmRzIiwidXJsU3RyaW5nUHJvcGVydHkiLCJhbGxvd0xpbmtzIiwiZmlsbEluIiwiaHJlZiIsInRleHQiLCJtYXhUZXh0V2lkdGgiLCJ3aWR0aCIsInZCb3giLCJhbGlnbiIsInNwYWNpbmciLCJjaGlsZHJlbiIsInVuZGVyRGV2ZWxvcG1lbnQiLCJsaW5lMVN0cmluZ1Byb3BlcnR5IiwiZm9udCIsIm1heFdpZHRoIiwibGluZTJTdHJpbmdQcm9wZXJ0eSIsImxpbmtzIiwiY29ybmVyUmFkaXVzIiwieE1hcmdpbiIsInlNYXJnaW4iLCJmaWxsIiwic3Ryb2tlIiwiYm91bmRzUHJvcGVydHkiLCJsaW5rIiwiY2VudGVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJVbmRlckRldmVsb3BtZW50UGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vL1RPRE8gRGVsZXRlIHdoZW4gdGhlIFJlYWwgTW9sZWN1bGVzIHNjcmVlbiBpcyBjb21wbGV0ZWQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvbW9sZWN1bGUtcG9sYXJpdHkvaXNzdWVzLzMyXHJcbi8qKlxyXG4gKiBVc2VkIHRvIGRpc2FibGUgdGhlICdSZWFsIE1vbGVjdWxlcycgc2NyZWVuIGFuZCBkaXNwbGF5IGEgbWVzc2FnZSBpbmRpY2F0aW5nIHRoYXQgaXQncyB1bmRlciBkZXZlbG9wbWVudC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IGFsbG93TGlua3NQcm9wZXJ0eSwgUmljaFRleHQsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyBmcm9tICcuLi8uLi9Nb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTEVHQUNZX1VSTCA9ICdodHRwczovL3BoZXQuY29sb3JhZG8uZWR1L2VuL3NpbXVsYXRpb25zL2xlZ2FjeS9tb2xlY3VsZS1wb2xhcml0eS90cmFuc2xhdGlvbnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5kZXJEZXZlbG9wbWVudFBhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGxheW91dEJvdW5kczogQm91bmRzMiApIHtcclxuXHJcbiAgICBjb25zdCB1cmxTdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgYWxsb3dMaW5rc1Byb3BlcnR5IF0sXHJcbiAgICAgICggYWxsb3dMaW5rczogYm9vbGVhbiApID0+IGFsbG93TGlua3MgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdVdGlscy5maWxsSW4oICc8YSBocmVmPVwie3tocmVmfX1cIj57e3RleHR9fTwvYT4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogTEVHQUNZX1VSTCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBMRUdBQ1lfVVJMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExFR0FDWV9VUkwgKTtcclxuXHJcbiAgICBjb25zdCBtYXhUZXh0V2lkdGggPSAwLjc1ICogbGF5b3V0Qm91bmRzLndpZHRoO1xyXG5cclxuICAgIGNvbnN0IHZCb3ggPSBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiAyMCxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgVGV4dCggTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MudW5kZXJEZXZlbG9wbWVudC5saW5lMVN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDIyICksXHJcbiAgICAgICAgICBtYXhXaWR0aDogbWF4VGV4dFdpZHRoXHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIG5ldyBWQm94KCB7XHJcbiAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAgbmV3IFRleHQoIE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzLnVuZGVyRGV2ZWxvcG1lbnQubGluZTJTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTYgKSxcclxuICAgICAgICAgICAgICBtYXhXaWR0aDogbWF4VGV4dFdpZHRoXHJcbiAgICAgICAgICAgIH0gKSxcclxuICAgICAgICAgICAgbmV3IFJpY2hUZXh0KCB1cmxTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgICAgIGxpbmtzOiB0cnVlLFxyXG4gICAgICAgICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTYgKSxcclxuICAgICAgICAgICAgICBtYXhXaWR0aDogbWF4VGV4dFdpZHRoXHJcbiAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0gKVxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHZCb3gsIHtcclxuICAgICAgY29ybmVyUmFkaXVzOiAxMCxcclxuICAgICAgeE1hcmdpbjogMjUsXHJcbiAgICAgIHlNYXJnaW46IDUwLFxyXG4gICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICBzdHJva2U6ICdibGFjaydcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmJvdW5kc1Byb3BlcnR5LmxpbmsoICgpID0+IHtcclxuICAgICAgdGhpcy5jZW50ZXIgPSBsYXlvdXRCb3VuZHMuY2VudGVyO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ1VuZGVyRGV2ZWxvcG1lbnRQYW5lbCcsIFVuZGVyRGV2ZWxvcG1lbnRQYW5lbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFFcEUsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLGtCQUFrQixFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM1RixPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7O0FBRXRFO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLGdGQUFnRjtBQUVuRyxlQUFlLE1BQU1DLHFCQUFxQixTQUFTSixLQUFLLENBQUM7RUFFaERLLFdBQVdBLENBQUVDLFlBQXFCLEVBQUc7SUFFMUMsTUFBTUMsaUJBQWlCLEdBQUcsSUFBSWQsZUFBZSxDQUFFLENBQUVHLGtCQUFrQixDQUFFLEVBQ2pFWSxVQUFtQixJQUFNQSxVQUFVLEdBQ1ZkLFdBQVcsQ0FBQ2UsTUFBTSxDQUFFLGlDQUFpQyxFQUFFO01BQ3JEQyxJQUFJLEVBQUVQLFVBQVU7TUFDaEJRLElBQUksRUFBRVI7SUFDUixDQUFFLENBQUMsR0FDSEEsVUFBVyxDQUFDO0lBRXpDLE1BQU1TLFlBQVksR0FBRyxJQUFJLEdBQUdOLFlBQVksQ0FBQ08sS0FBSztJQUU5QyxNQUFNQyxJQUFJLEdBQUcsSUFBSWYsSUFBSSxDQUFFO01BQ3JCZ0IsS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsUUFBUSxFQUFFLENBQ1IsSUFBSW5CLElBQUksQ0FBRUksdUJBQXVCLENBQUNnQixnQkFBZ0IsQ0FBQ0MsbUJBQW1CLEVBQUU7UUFDdEVDLElBQUksRUFBRSxJQUFJekIsUUFBUSxDQUFFLEVBQUcsQ0FBQztRQUN4QjBCLFFBQVEsRUFBRVQ7TUFDWixDQUFFLENBQUMsRUFDSCxJQUFJYixJQUFJLENBQUU7UUFDUmdCLEtBQUssRUFBRSxNQUFNO1FBQ2JFLFFBQVEsRUFBRSxDQUNSLElBQUluQixJQUFJLENBQUVJLHVCQUF1QixDQUFDZ0IsZ0JBQWdCLENBQUNJLG1CQUFtQixFQUFFO1VBQ3RFRixJQUFJLEVBQUUsSUFBSXpCLFFBQVEsQ0FBRSxFQUFHLENBQUM7VUFDeEIwQixRQUFRLEVBQUVUO1FBQ1osQ0FBRSxDQUFDLEVBQ0gsSUFBSWYsUUFBUSxDQUFFVSxpQkFBaUIsRUFBRTtVQUMvQmdCLEtBQUssRUFBRSxJQUFJO1VBQ1hILElBQUksRUFBRSxJQUFJekIsUUFBUSxDQUFFLEVBQUcsQ0FBQztVQUN4QjBCLFFBQVEsRUFBRVQ7UUFDWixDQUFFLENBQUM7TUFFUCxDQUFFLENBQUM7SUFFUCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVFLElBQUksRUFBRTtNQUNYVSxZQUFZLEVBQUUsRUFBRTtNQUNoQkMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsSUFBSSxFQUFFLE9BQU87TUFDYkMsTUFBTSxFQUFFO0lBQ1YsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBRSxNQUFNO01BQzlCLElBQUksQ0FBQ0MsTUFBTSxHQUFHekIsWUFBWSxDQUFDeUIsTUFBTTtJQUNuQyxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUE5QixnQkFBZ0IsQ0FBQytCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRTVCLHFCQUFzQixDQUFDIn0=