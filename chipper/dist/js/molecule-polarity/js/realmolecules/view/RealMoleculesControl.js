// Copyright 2014-2023, University of Colorado Boulder

/**
 * Combo box for choosing a real molecule.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PatternStringProperty from '../../../../axon/js/PatternStringProperty.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, RichText, Text } from '../../../../scenery/js/imports.js';
import ComboBox from '../../../../sun/js/ComboBox.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
export default class RealMoleculesControl extends HBox {
  constructor(moleculeProperty, molecules, listParent, provideOptions) {
    const options = optionize()({
      spacing: 10,
      comboBoxOptions: {
        tandem: Tandem.REQUIRED,
        listPosition: 'above',
        highlightFill: 'rgb(218,255,255)',
        cornerRadius: 8,
        maxWidth: 450
      }
    }, provideOptions);

    // {ComboBoxItem[]}
    const items = molecules.map(createItem);
    options.children = [new Text(MoleculePolarityStrings.moleculeStringProperty, {
      font: new PhetFont(22),
      maxWidth: 150,
      tandem: options.comboBoxOptions.tandem.createTandem('labelText')
    }), new ComboBox(moleculeProperty, items, listParent, options.comboBoxOptions)];
    super(options);
  }
}

/**
 * Creates an item for the combo box.
 */
function createItem(molecule) {
  const stringProperty = new PatternStringProperty(MoleculePolarityStrings.pattern.symbolNameStringProperty, {
    symbol: molecule.symbol,
    name: molecule.fullNameProperty
  });
  const node = new RichText(stringProperty, {
    maxWidth: 200,
    font: new PhetFont(18)
  });
  return {
    value: molecule,
    createNode: tandem => node,
    tandemName: `${molecule.tandem.name}${ComboBox.ITEM_TANDEM_NAME_SUFFIX}`
  };
}
moleculePolarity.register('RealMoleculesControl', RealMoleculesControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJUYW5kZW0iLCJvcHRpb25pemUiLCJQaGV0Rm9udCIsIkhCb3giLCJSaWNoVGV4dCIsIlRleHQiLCJDb21ib0JveCIsIm1vbGVjdWxlUG9sYXJpdHkiLCJNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyIsIlJlYWxNb2xlY3VsZXNDb250cm9sIiwiY29uc3RydWN0b3IiLCJtb2xlY3VsZVByb3BlcnR5IiwibW9sZWN1bGVzIiwibGlzdFBhcmVudCIsInByb3ZpZGVPcHRpb25zIiwib3B0aW9ucyIsInNwYWNpbmciLCJjb21ib0JveE9wdGlvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsImxpc3RQb3NpdGlvbiIsImhpZ2hsaWdodEZpbGwiLCJjb3JuZXJSYWRpdXMiLCJtYXhXaWR0aCIsIml0ZW1zIiwibWFwIiwiY3JlYXRlSXRlbSIsImNoaWxkcmVuIiwibW9sZWN1bGVTdHJpbmdQcm9wZXJ0eSIsImZvbnQiLCJjcmVhdGVUYW5kZW0iLCJtb2xlY3VsZSIsInN0cmluZ1Byb3BlcnR5IiwicGF0dGVybiIsInN5bWJvbE5hbWVTdHJpbmdQcm9wZXJ0eSIsInN5bWJvbCIsIm5hbWUiLCJmdWxsTmFtZVByb3BlcnR5Iiwibm9kZSIsInZhbHVlIiwiY3JlYXRlTm9kZSIsInRhbmRlbU5hbWUiLCJJVEVNX1RBTkRFTV9OQU1FX1NVRkZJWCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVhbE1vbGVjdWxlc0NvbnRyb2wudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29tYm8gYm94IGZvciBjaG9vc2luZyBhIHJlYWwgbW9sZWN1bGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBhdHRlcm5TdHJpbmdQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1BhdHRlcm5TdHJpbmdQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFdpdGhSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvV2l0aFJlcXVpcmVkLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgSEJveCwgSEJveE9wdGlvbnMsIE5vZGUsIFJpY2hUZXh0LCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENvbWJvQm94LCB7IENvbWJvQm94SXRlbSwgQ29tYm9Cb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0NvbWJvQm94LmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyBmcm9tICcuLi8uLi9Nb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBSZWFsTW9sZWN1bGUgZnJvbSAnLi4vbW9kZWwvUmVhbE1vbGVjdWxlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgY29tYm9Cb3hPcHRpb25zPzogV2l0aFJlcXVpcmVkPENvbWJvQm94T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG59O1xyXG5cclxudHlwZSBSZWFsTW9sZWN1bGVzQ29tYm9Cb3hPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PEhCb3hPcHRpb25zLCAnY2hpbGRyZW4nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWxNb2xlY3VsZXNDb250cm9sIGV4dGVuZHMgSEJveCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9sZWN1bGVQcm9wZXJ0eTogUHJvcGVydHk8UmVhbE1vbGVjdWxlPixcclxuICAgICAgICAgICAgICAgICAgICAgIG1vbGVjdWxlczogUmVhbE1vbGVjdWxlW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICBsaXN0UGFyZW50OiBOb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZU9wdGlvbnM6IFJlYWxNb2xlY3VsZXNDb21ib0JveE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSZWFsTW9sZWN1bGVzQ29tYm9Cb3hPcHRpb25zLCBTZWxmT3B0aW9ucywgSEJveE9wdGlvbnM+KCkoIHtcclxuICAgICAgc3BhY2luZzogMTAsXHJcblxyXG4gICAgICBjb21ib0JveE9wdGlvbnM6IHtcclxuICAgICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRCxcclxuICAgICAgICBsaXN0UG9zaXRpb246ICdhYm92ZScsXHJcbiAgICAgICAgaGlnaGxpZ2h0RmlsbDogJ3JnYigyMTgsMjU1LDI1NSknLFxyXG4gICAgICAgIGNvcm5lclJhZGl1czogOCxcclxuICAgICAgICBtYXhXaWR0aDogNDUwXHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVPcHRpb25zICk7XHJcblxyXG4gICAgLy8ge0NvbWJvQm94SXRlbVtdfVxyXG4gICAgY29uc3QgaXRlbXMgPSBtb2xlY3VsZXMubWFwKCBjcmVhdGVJdGVtICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFtcclxuICAgICAgbmV3IFRleHQoIE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzLm1vbGVjdWxlU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDIyICksXHJcbiAgICAgICAgbWF4V2lkdGg6IDE1MCxcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMuY29tYm9Cb3hPcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnIClcclxuICAgICAgfSApLFxyXG4gICAgICBuZXcgQ29tYm9Cb3goIG1vbGVjdWxlUHJvcGVydHksIGl0ZW1zLCBsaXN0UGFyZW50LCBvcHRpb25zLmNvbWJvQm94T3B0aW9ucyApXHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhbiBpdGVtIGZvciB0aGUgY29tYm8gYm94LlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSXRlbSggbW9sZWN1bGU6IFJlYWxNb2xlY3VsZSApOiBDb21ib0JveEl0ZW08UmVhbE1vbGVjdWxlPiB7XHJcblxyXG4gIGNvbnN0IHN0cmluZ1Byb3BlcnR5ID0gbmV3IFBhdHRlcm5TdHJpbmdQcm9wZXJ0eSggTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MucGF0dGVybi5zeW1ib2xOYW1lU3RyaW5nUHJvcGVydHksIHtcclxuICAgIHN5bWJvbDogbW9sZWN1bGUuc3ltYm9sLFxyXG4gICAgbmFtZTogbW9sZWN1bGUuZnVsbE5hbWVQcm9wZXJ0eVxyXG4gIH0gKTtcclxuXHJcbiAgY29uc3Qgbm9kZSA9IG5ldyBSaWNoVGV4dCggc3RyaW5nUHJvcGVydHksIHtcclxuICAgIG1heFdpZHRoOiAyMDAsXHJcbiAgICBmb250OiBuZXcgUGhldEZvbnQoIDE4IClcclxuICB9ICk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB2YWx1ZTogbW9sZWN1bGUsXHJcbiAgICBjcmVhdGVOb2RlOiB0YW5kZW0gPT4gbm9kZSxcclxuICAgIHRhbmRlbU5hbWU6IGAke21vbGVjdWxlLnRhbmRlbS5uYW1lfSR7Q29tYm9Cb3guSVRFTV9UQU5ERU1fTkFNRV9TVUZGSVh9YFxyXG4gIH07XHJcbn1cclxuXHJcbm1vbGVjdWxlUG9sYXJpdHkucmVnaXN0ZXIoICdSZWFsTW9sZWN1bGVzQ29udHJvbCcsIFJlYWxNb2xlY3VsZXNDb250cm9sICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHFCQUFxQixNQUFNLDhDQUE4QztBQUVoRixPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFHN0QsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLEVBQXFCQyxRQUFRLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDM0YsT0FBT0MsUUFBUSxNQUF5QyxnQ0FBZ0M7QUFDeEYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQVN0RSxlQUFlLE1BQU1DLG9CQUFvQixTQUFTTixJQUFJLENBQUM7RUFFOUNPLFdBQVdBLENBQUVDLGdCQUF3QyxFQUN4Q0MsU0FBeUIsRUFDekJDLFVBQWdCLEVBQ2hCQyxjQUE0QyxFQUFHO0lBRWpFLE1BQU1DLE9BQU8sR0FBR2QsU0FBUyxDQUF5RCxDQUFDLENBQUU7TUFDbkZlLE9BQU8sRUFBRSxFQUFFO01BRVhDLGVBQWUsRUFBRTtRQUNmQyxNQUFNLEVBQUVsQixNQUFNLENBQUNtQixRQUFRO1FBQ3ZCQyxZQUFZLEVBQUUsT0FBTztRQUNyQkMsYUFBYSxFQUFFLGtCQUFrQjtRQUNqQ0MsWUFBWSxFQUFFLENBQUM7UUFDZkMsUUFBUSxFQUFFO01BQ1o7SUFDRixDQUFDLEVBQUVULGNBQWUsQ0FBQzs7SUFFbkI7SUFDQSxNQUFNVSxLQUFLLEdBQUdaLFNBQVMsQ0FBQ2EsR0FBRyxDQUFFQyxVQUFXLENBQUM7SUFFekNYLE9BQU8sQ0FBQ1ksUUFBUSxHQUFHLENBQ2pCLElBQUl0QixJQUFJLENBQUVHLHVCQUF1QixDQUFDb0Isc0JBQXNCLEVBQUU7TUFDeERDLElBQUksRUFBRSxJQUFJM0IsUUFBUSxDQUFFLEVBQUcsQ0FBQztNQUN4QnFCLFFBQVEsRUFBRSxHQUFHO01BQ2JMLE1BQU0sRUFBRUgsT0FBTyxDQUFDRSxlQUFlLENBQUNDLE1BQU0sQ0FBQ1ksWUFBWSxDQUFFLFdBQVk7SUFDbkUsQ0FBRSxDQUFDLEVBQ0gsSUFBSXhCLFFBQVEsQ0FBRUssZ0JBQWdCLEVBQUVhLEtBQUssRUFBRVgsVUFBVSxFQUFFRSxPQUFPLENBQUNFLGVBQWdCLENBQUMsQ0FDN0U7SUFFRCxLQUFLLENBQUVGLE9BQVEsQ0FBQztFQUNsQjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNXLFVBQVVBLENBQUVLLFFBQXNCLEVBQStCO0VBRXhFLE1BQU1DLGNBQWMsR0FBRyxJQUFJakMscUJBQXFCLENBQUVTLHVCQUF1QixDQUFDeUIsT0FBTyxDQUFDQyx3QkFBd0IsRUFBRTtJQUMxR0MsTUFBTSxFQUFFSixRQUFRLENBQUNJLE1BQU07SUFDdkJDLElBQUksRUFBRUwsUUFBUSxDQUFDTTtFQUNqQixDQUFFLENBQUM7RUFFSCxNQUFNQyxJQUFJLEdBQUcsSUFBSWxDLFFBQVEsQ0FBRTRCLGNBQWMsRUFBRTtJQUN6Q1QsUUFBUSxFQUFFLEdBQUc7SUFDYk0sSUFBSSxFQUFFLElBQUkzQixRQUFRLENBQUUsRUFBRztFQUN6QixDQUFFLENBQUM7RUFFSCxPQUFPO0lBQ0xxQyxLQUFLLEVBQUVSLFFBQVE7SUFDZlMsVUFBVSxFQUFFdEIsTUFBTSxJQUFJb0IsSUFBSTtJQUMxQkcsVUFBVSxFQUFHLEdBQUVWLFFBQVEsQ0FBQ2IsTUFBTSxDQUFDa0IsSUFBSyxHQUFFOUIsUUFBUSxDQUFDb0MsdUJBQXdCO0VBQ3pFLENBQUM7QUFDSDtBQUVBbkMsZ0JBQWdCLENBQUNvQyxRQUFRLENBQUUsc0JBQXNCLEVBQUVsQyxvQkFBcUIsQ0FBQyJ9