// Copyright 2021-2022, University of Colorado Boulder

/**
 * AtomElectronegativitiesCheckbox is the checkbox for controlling visibility of atom electronegativities.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { combineOptions } from '../../../../phet-core/js/optionize.js';
import { Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import MPConstants from '../../common/MPConstants.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
export default class AtomElectronegativitiesCheckbox extends Checkbox {
  constructor(atomElectronegativitiesVisibleProperty, providedOptions) {
    const options = providedOptions;
    const labelText = new Text(MoleculePolarityStrings.atomElectronegativitiesStringProperty, combineOptions({}, MPConstants.CONTROL_TEXT_OPTIONS, {
      tandem: options.tandem.createTandem('labelText')
    }));
    super(atomElectronegativitiesVisibleProperty, labelText, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('AtomElectronegativitiesCheckbox', AtomElectronegativitiesCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21iaW5lT3B0aW9ucyIsIlRleHQiLCJDaGVja2JveCIsIk1QQ29uc3RhbnRzIiwibW9sZWN1bGVQb2xhcml0eSIsIk1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIiwiQXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNDaGVja2JveCIsImNvbnN0cnVjdG9yIiwiYXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNWaXNpYmxlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibGFiZWxUZXh0IiwiYXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNTdHJpbmdQcm9wZXJ0eSIsIkNPTlRST0xfVEVYVF9PUFRJT05TIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNDaGVja2JveC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBdG9tRWxlY3Ryb25lZ2F0aXZpdGllc0NoZWNrYm94IGlzIHRoZSBjaGVja2JveCBmb3IgY29udHJvbGxpbmcgdmlzaWJpbGl0eSBvZiBhdG9tIGVsZWN0cm9uZWdhdGl2aXRpZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBjb21iaW5lT3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBUZXh0LCBUZXh0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDaGVja2JveCwgeyBDaGVja2JveE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgTVBDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL01QQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncyBmcm9tICcuLi8uLi9Nb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgQXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNDaGVja2JveE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxDaGVja2JveE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0b21FbGVjdHJvbmVnYXRpdml0aWVzQ2hlY2tib3ggZXh0ZW5kcyBDaGVja2JveCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYXRvbUVsZWN0cm9uZWdhdGl2aXRpZXNWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBBdG9tRWxlY3Ryb25lZ2F0aXZpdGllc0NoZWNrYm94T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gcHJvdmlkZWRPcHRpb25zO1xyXG5cclxuICAgIGNvbnN0IGxhYmVsVGV4dCA9IG5ldyBUZXh0KCBNb2xlY3VsZVBvbGFyaXR5U3RyaW5ncy5hdG9tRWxlY3Ryb25lZ2F0aXZpdGllc1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxUZXh0T3B0aW9ucz4oIHt9LCBNUENvbnN0YW50cy5DT05UUk9MX1RFWFRfT1BUSU9OUywge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxUZXh0JyApXHJcbiAgICAgIH0gKSApO1xyXG5cclxuICAgIHN1cGVyKCBhdG9tRWxlY3Ryb25lZ2F0aXZpdGllc1Zpc2libGVQcm9wZXJ0eSwgbGFiZWxUZXh0LCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ0F0b21FbGVjdHJvbmVnYXRpdml0aWVzQ2hlY2tib3gnLCBBdG9tRWxlY3Ryb25lZ2F0aXZpdGllc0NoZWNrYm94ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLFNBQVNBLGNBQWMsUUFBMEIsdUNBQXVDO0FBRXhGLFNBQVNDLElBQUksUUFBcUIsbUNBQW1DO0FBQ3JFLE9BQU9DLFFBQVEsTUFBMkIsZ0NBQWdDO0FBQzFFLE9BQU9DLFdBQVcsTUFBTSw2QkFBNkI7QUFDckQsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQU10RSxlQUFlLE1BQU1DLCtCQUErQixTQUFTSixRQUFRLENBQUM7RUFFN0RLLFdBQVdBLENBQUVDLHNDQUF5RCxFQUN6REMsZUFBdUQsRUFBRztJQUU1RSxNQUFNQyxPQUFPLEdBQUdELGVBQWU7SUFFL0IsTUFBTUUsU0FBUyxHQUFHLElBQUlWLElBQUksQ0FBRUksdUJBQXVCLENBQUNPLHFDQUFxQyxFQUN2RlosY0FBYyxDQUFlLENBQUMsQ0FBQyxFQUFFRyxXQUFXLENBQUNVLG9CQUFvQixFQUFFO01BQ2pFQyxNQUFNLEVBQUVKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDQyxZQUFZLENBQUUsV0FBWTtJQUNuRCxDQUFFLENBQUUsQ0FBQztJQUVQLEtBQUssQ0FBRVAsc0NBQXNDLEVBQUVHLFNBQVMsRUFBRUQsT0FBUSxDQUFDO0VBQ3JFO0VBRWdCTSxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQVosZ0JBQWdCLENBQUNjLFFBQVEsQ0FBRSxpQ0FBaUMsRUFBRVosK0JBQWdDLENBQUMifQ==