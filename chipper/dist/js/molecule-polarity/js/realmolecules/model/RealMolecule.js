// Copyright 2014-2022, University of Colorado Boulder

/**
 * Real molecule that is viewable in PhET's 3D molecule viewer.
 * The molecule is described using the mol2 standard format.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import ChemUtils from '../../../../nitroglycerin/js/ChemUtils.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import moleculePolarity from '../../moleculePolarity.js';
export default class RealMolecule extends PhetioObject {
  /**
   * @param symbol - chemical symbol of the molecule
   * @param fullNameProperty - full name of the molecule
   * @param mol2Data molecule data description, in mol2 format
   * @param tandem
   */
  constructor(symbol, fullNameProperty, mol2Data, tandem) {
    super({
      phetioType: RealMolecule.RealMoleculeIO,
      phetioState: false,
      // because RealMoleculeIO extends ReferenceIO
      tandem: tandem
    });
    this.symbol = ChemUtils.toSubscript(symbol);
    this.fullNameProperty = fullNameProperty;
    this.mol2Data = mol2Data;
  }

  /**
   * RealMoleculeIO handles PhET-iO serialization of RealMolecule. Since all RealMolecule are instantiated at
   * startup, it implements 'Reference type serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static RealMoleculeIO = new IOType('RealMoleculeIO', {
    valueType: RealMolecule,
    supertype: ReferenceIO(IOType.ObjectIO)
  });
}
moleculePolarity.register('RealMolecule', RealMolecule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGVtVXRpbHMiLCJQaGV0aW9PYmplY3QiLCJJT1R5cGUiLCJSZWZlcmVuY2VJTyIsIm1vbGVjdWxlUG9sYXJpdHkiLCJSZWFsTW9sZWN1bGUiLCJjb25zdHJ1Y3RvciIsInN5bWJvbCIsImZ1bGxOYW1lUHJvcGVydHkiLCJtb2wyRGF0YSIsInRhbmRlbSIsInBoZXRpb1R5cGUiLCJSZWFsTW9sZWN1bGVJTyIsInBoZXRpb1N0YXRlIiwidG9TdWJzY3JpcHQiLCJ2YWx1ZVR5cGUiLCJzdXBlcnR5cGUiLCJPYmplY3RJTyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVhbE1vbGVjdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJlYWwgbW9sZWN1bGUgdGhhdCBpcyB2aWV3YWJsZSBpbiBQaEVUJ3MgM0QgbW9sZWN1bGUgdmlld2VyLlxyXG4gKiBUaGUgbW9sZWN1bGUgaXMgZGVzY3JpYmVkIHVzaW5nIHRoZSBtb2wyIHN0YW5kYXJkIGZvcm1hdC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBDaGVtVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vbml0cm9nbHljZXJpbi9qcy9DaGVtVXRpbHMuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9JT1R5cGUuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlUG9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sZWN1bGVQb2xhcml0eS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFsTW9sZWN1bGUgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgc3ltYm9sOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGZ1bGxOYW1lUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XHJcbiAgcHVibGljIHJlYWRvbmx5IG1vbDJEYXRhOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzeW1ib2wgLSBjaGVtaWNhbCBzeW1ib2wgb2YgdGhlIG1vbGVjdWxlXHJcbiAgICogQHBhcmFtIGZ1bGxOYW1lUHJvcGVydHkgLSBmdWxsIG5hbWUgb2YgdGhlIG1vbGVjdWxlXHJcbiAgICogQHBhcmFtIG1vbDJEYXRhIG1vbGVjdWxlIGRhdGEgZGVzY3JpcHRpb24sIGluIG1vbDIgZm9ybWF0XHJcbiAgICogQHBhcmFtIHRhbmRlbVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3ltYm9sOiBzdHJpbmcsIGZ1bGxOYW1lUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sIG1vbDJEYXRhOiBzdHJpbmcsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIHBoZXRpb1R5cGU6IFJlYWxNb2xlY3VsZS5SZWFsTW9sZWN1bGVJTyxcclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlLCAvLyBiZWNhdXNlIFJlYWxNb2xlY3VsZUlPIGV4dGVuZHMgUmVmZXJlbmNlSU9cclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnN5bWJvbCA9IENoZW1VdGlscy50b1N1YnNjcmlwdCggc3ltYm9sICk7XHJcbiAgICB0aGlzLmZ1bGxOYW1lUHJvcGVydHkgPSBmdWxsTmFtZVByb3BlcnR5O1xyXG4gICAgdGhpcy5tb2wyRGF0YSA9IG1vbDJEYXRhO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVhbE1vbGVjdWxlSU8gaGFuZGxlcyBQaEVULWlPIHNlcmlhbGl6YXRpb24gb2YgUmVhbE1vbGVjdWxlLiBTaW5jZSBhbGwgUmVhbE1vbGVjdWxlIGFyZSBpbnN0YW50aWF0ZWQgYXRcclxuICAgKiBzdGFydHVwLCBpdCBpbXBsZW1lbnRzICdSZWZlcmVuY2UgdHlwZSBzZXJpYWxpemF0aW9uJywgYXMgZGVzY3JpYmVkIGluIHRoZSBTZXJpYWxpemF0aW9uIHNlY3Rpb24gb2ZcclxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGhldC1pby9ibG9iL21hc3Rlci9kb2MvcGhldC1pby1pbnN0cnVtZW50YXRpb24tdGVjaG5pY2FsLWd1aWRlLm1kI3NlcmlhbGl6YXRpb25cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJlYWxNb2xlY3VsZUlPID0gbmV3IElPVHlwZSggJ1JlYWxNb2xlY3VsZUlPJywge1xyXG4gICAgdmFsdWVUeXBlOiBSZWFsTW9sZWN1bGUsXHJcbiAgICBzdXBlcnR5cGU6IFJlZmVyZW5jZUlPKCBJT1R5cGUuT2JqZWN0SU8gKVxyXG4gIH0gKTtcclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ1JlYWxNb2xlY3VsZScsIFJlYWxNb2xlY3VsZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBTSwyQ0FBMkM7QUFDakUsT0FBT0MsWUFBWSxNQUFNLHVDQUF1QztBQUVoRSxPQUFPQyxNQUFNLE1BQU0sdUNBQXVDO0FBQzFELE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFDcEUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBRXhELGVBQWUsTUFBTUMsWUFBWSxTQUFTSixZQUFZLENBQUM7RUFNckQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NLLFdBQVdBLENBQUVDLE1BQWMsRUFBRUMsZ0JBQTJDLEVBQUVDLFFBQWdCLEVBQUVDLE1BQWMsRUFBRztJQUVsSCxLQUFLLENBQUU7TUFDTEMsVUFBVSxFQUFFTixZQUFZLENBQUNPLGNBQWM7TUFDdkNDLFdBQVcsRUFBRSxLQUFLO01BQUU7TUFDcEJILE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNILE1BQU0sR0FBR1AsU0FBUyxDQUFDYyxXQUFXLENBQUVQLE1BQU8sQ0FBQztJQUM3QyxJQUFJLENBQUNDLGdCQUFnQixHQUFHQSxnQkFBZ0I7SUFDeEMsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7RUFDMUI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFLE9BQXVCRyxjQUFjLEdBQUcsSUFBSVYsTUFBTSxDQUFFLGdCQUFnQixFQUFFO0lBQ3BFYSxTQUFTLEVBQUVWLFlBQVk7SUFDdkJXLFNBQVMsRUFBRWIsV0FBVyxDQUFFRCxNQUFNLENBQUNlLFFBQVM7RUFDMUMsQ0FBRSxDQUFDO0FBQ0w7QUFFQWIsZ0JBQWdCLENBQUNjLFFBQVEsQ0FBRSxjQUFjLEVBQUViLFlBQWEsQ0FBQyJ9