// Copyright 2014-2022, University of Colorado Boulder

/**
 * Main entry point for the 'Molecule Polarity' sim.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import Tandem from '../../tandem/js/Tandem.js';
import MPPreferencesNode from './common/view/MPPreferencesNode.js';
import MoleculePolarityStrings from './MoleculePolarityStrings.js';
import RealMoleculesScreen from './realmolecules/RealMoleculesScreen.js';
import ThreeAtomsScreen from './threeatoms/ThreeAtomsScreen.js';
import TwoAtomsScreen from './twoatoms/TwoAtomsScreen.js';
simLauncher.launch(() => {
  const screens = [new TwoAtomsScreen({
    tandem: Tandem.ROOT.createTandem('twoAtomsScreen')
  }), new ThreeAtomsScreen({
    tandem: Tandem.ROOT.createTandem('threeAtomsScreen')
  }), new RealMoleculesScreen({
    tandem: Tandem.ROOT.createTandem('realMoleculesScreen')
  })];
  const sim = new Sim(MoleculePolarityStrings['molecule-polarity'].titleStringProperty, screens, {
    preferencesModel: new PreferencesModel({
      simulationOptions: {
        customPreferences: [{
          createContent: tandem => new MPPreferencesNode({
            tandem: tandem.createTandem('simPreferences')
          })
        }]
      }
    }),
    credits: {
      leadDesign: 'Kelly Lancaster',
      softwareDevelopment: 'Chris Malley (PixelZoom, Inc.)',
      team: 'Julia Chamberlain, Emily B. Moore, Robert Parson, Kathy Perkins, Amy Rouinfar',
      qualityAssurance: 'Steele Dalton, Alex Dornan, Ethan Johnson, Brooklyn Lash, Emily Miller, Devon Quispe, Nancy Salpepi, Kathryn Woessner'
    },
    // phet-io options
    phetioDesigned: true
  });
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc01vZGVsIiwiU2ltIiwic2ltTGF1bmNoZXIiLCJUYW5kZW0iLCJNUFByZWZlcmVuY2VzTm9kZSIsIk1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIiwiUmVhbE1vbGVjdWxlc1NjcmVlbiIsIlRocmVlQXRvbXNTY3JlZW4iLCJUd29BdG9tc1NjcmVlbiIsImxhdW5jaCIsInNjcmVlbnMiLCJ0YW5kZW0iLCJST09UIiwiY3JlYXRlVGFuZGVtIiwic2ltIiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsInByZWZlcmVuY2VzTW9kZWwiLCJzaW11bGF0aW9uT3B0aW9ucyIsImN1c3RvbVByZWZlcmVuY2VzIiwiY3JlYXRlQ29udGVudCIsImNyZWRpdHMiLCJsZWFkRGVzaWduIiwic29mdHdhcmVEZXZlbG9wbWVudCIsInRlYW0iLCJxdWFsaXR5QXNzdXJhbmNlIiwicGhldGlvRGVzaWduZWQiLCJzdGFydCJdLCJzb3VyY2VzIjpbIm1vbGVjdWxlLXBvbGFyaXR5LW1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlICdNb2xlY3VsZSBQb2xhcml0eScgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcmVmZXJlbmNlc01vZGVsIGZyb20gJy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzTW9kZWwuanMnO1xyXG5pbXBvcnQgU2ltIGZyb20gJy4uLy4uL2pvaXN0L2pzL1NpbS5qcyc7XHJcbmltcG9ydCBzaW1MYXVuY2hlciBmcm9tICcuLi8uLi9qb2lzdC9qcy9zaW1MYXVuY2hlci5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBNUFByZWZlcmVuY2VzTm9kZSBmcm9tICcuL2NvbW1vbi92aWV3L01QUHJlZmVyZW5jZXNOb2RlLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIGZyb20gJy4vTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUmVhbE1vbGVjdWxlc1NjcmVlbiBmcm9tICcuL3JlYWxtb2xlY3VsZXMvUmVhbE1vbGVjdWxlc1NjcmVlbi5qcyc7XHJcbmltcG9ydCBUaHJlZUF0b21zU2NyZWVuIGZyb20gJy4vdGhyZWVhdG9tcy9UaHJlZUF0b21zU2NyZWVuLmpzJztcclxuaW1wb3J0IFR3b0F0b21zU2NyZWVuIGZyb20gJy4vdHdvYXRvbXMvVHdvQXRvbXNTY3JlZW4uanMnO1xyXG5cclxuc2ltTGF1bmNoZXIubGF1bmNoKCAoKSA9PiB7XHJcblxyXG4gIGNvbnN0IHNjcmVlbnMgPSBbXHJcbiAgICBuZXcgVHdvQXRvbXNTY3JlZW4oIHsgdGFuZGVtOiBUYW5kZW0uUk9PVC5jcmVhdGVUYW5kZW0oICd0d29BdG9tc1NjcmVlbicgKSB9ICksXHJcbiAgICBuZXcgVGhyZWVBdG9tc1NjcmVlbiggeyB0YW5kZW06IFRhbmRlbS5ST09ULmNyZWF0ZVRhbmRlbSggJ3RocmVlQXRvbXNTY3JlZW4nICkgfSApLFxyXG4gICAgbmV3IFJlYWxNb2xlY3VsZXNTY3JlZW4oIHsgdGFuZGVtOiBUYW5kZW0uUk9PVC5jcmVhdGVUYW5kZW0oICdyZWFsTW9sZWN1bGVzU2NyZWVuJyApIH0gKVxyXG4gIF07XHJcblxyXG4gIGNvbnN0IHNpbSA9IG5ldyBTaW0oIE1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzWyAnbW9sZWN1bGUtcG9sYXJpdHknIF0udGl0bGVTdHJpbmdQcm9wZXJ0eSwgc2NyZWVucywge1xyXG4gICAgcHJlZmVyZW5jZXNNb2RlbDogbmV3IFByZWZlcmVuY2VzTW9kZWwoIHtcclxuICAgICAgc2ltdWxhdGlvbk9wdGlvbnM6IHtcclxuICAgICAgICBjdXN0b21QcmVmZXJlbmNlczogWyB7XHJcbiAgICAgICAgICBjcmVhdGVDb250ZW50OiB0YW5kZW0gPT4gbmV3IE1QUHJlZmVyZW5jZXNOb2RlKCB7XHJcbiAgICAgICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NpbVByZWZlcmVuY2VzJyApXHJcbiAgICAgICAgICB9IClcclxuICAgICAgICB9IF1cclxuICAgICAgfVxyXG4gICAgfSApLFxyXG5cclxuICAgIGNyZWRpdHM6IHtcclxuICAgICAgbGVhZERlc2lnbjogJ0tlbGx5IExhbmNhc3RlcicsXHJcbiAgICAgIHNvZnR3YXJlRGV2ZWxvcG1lbnQ6ICdDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLiknLFxyXG4gICAgICB0ZWFtOiAnSnVsaWEgQ2hhbWJlcmxhaW4sIEVtaWx5IEIuIE1vb3JlLCBSb2JlcnQgUGFyc29uLCBLYXRoeSBQZXJraW5zLCBBbXkgUm91aW5mYXInLFxyXG4gICAgICBxdWFsaXR5QXNzdXJhbmNlOiAnU3RlZWxlIERhbHRvbiwgQWxleCBEb3JuYW4sIEV0aGFuIEpvaG5zb24sIEJyb29rbHluIExhc2gsIEVtaWx5IE1pbGxlciwgRGV2b24gUXVpc3BlLCBOYW5jeSBTYWxwZXBpLCBLYXRocnluIFdvZXNzbmVyJ1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwaGV0LWlvIG9wdGlvbnNcclxuICAgIHBoZXRpb0Rlc2lnbmVkOiB0cnVlXHJcbiAgfSApO1xyXG5cclxuICBzaW0uc3RhcnQoKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSxnREFBZ0Q7QUFDN0UsT0FBT0MsR0FBRyxNQUFNLHVCQUF1QjtBQUN2QyxPQUFPQyxXQUFXLE1BQU0sK0JBQStCO0FBQ3ZELE9BQU9DLE1BQU0sTUFBTSwyQkFBMkI7QUFDOUMsT0FBT0MsaUJBQWlCLE1BQU0sb0NBQW9DO0FBQ2xFLE9BQU9DLHVCQUF1QixNQUFNLDhCQUE4QjtBQUNsRSxPQUFPQyxtQkFBbUIsTUFBTSx3Q0FBd0M7QUFDeEUsT0FBT0MsZ0JBQWdCLE1BQU0sa0NBQWtDO0FBQy9ELE9BQU9DLGNBQWMsTUFBTSw4QkFBOEI7QUFFekROLFdBQVcsQ0FBQ08sTUFBTSxDQUFFLE1BQU07RUFFeEIsTUFBTUMsT0FBTyxHQUFHLENBQ2QsSUFBSUYsY0FBYyxDQUFFO0lBQUVHLE1BQU0sRUFBRVIsTUFBTSxDQUFDUyxJQUFJLENBQUNDLFlBQVksQ0FBRSxnQkFBaUI7RUFBRSxDQUFFLENBQUMsRUFDOUUsSUFBSU4sZ0JBQWdCLENBQUU7SUFBRUksTUFBTSxFQUFFUixNQUFNLENBQUNTLElBQUksQ0FBQ0MsWUFBWSxDQUFFLGtCQUFtQjtFQUFFLENBQUUsQ0FBQyxFQUNsRixJQUFJUCxtQkFBbUIsQ0FBRTtJQUFFSyxNQUFNLEVBQUVSLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDQyxZQUFZLENBQUUscUJBQXNCO0VBQUUsQ0FBRSxDQUFDLENBQ3pGO0VBRUQsTUFBTUMsR0FBRyxHQUFHLElBQUliLEdBQUcsQ0FBRUksdUJBQXVCLENBQUUsbUJBQW1CLENBQUUsQ0FBQ1UsbUJBQW1CLEVBQUVMLE9BQU8sRUFBRTtJQUNoR00sZ0JBQWdCLEVBQUUsSUFBSWhCLGdCQUFnQixDQUFFO01BQ3RDaUIsaUJBQWlCLEVBQUU7UUFDakJDLGlCQUFpQixFQUFFLENBQUU7VUFDbkJDLGFBQWEsRUFBRVIsTUFBTSxJQUFJLElBQUlQLGlCQUFpQixDQUFFO1lBQzlDTyxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLGdCQUFpQjtVQUNoRCxDQUFFO1FBQ0osQ0FBQztNQUNIO0lBQ0YsQ0FBRSxDQUFDO0lBRUhPLE9BQU8sRUFBRTtNQUNQQyxVQUFVLEVBQUUsaUJBQWlCO01BQzdCQyxtQkFBbUIsRUFBRSxnQ0FBZ0M7TUFDckRDLElBQUksRUFBRSwrRUFBK0U7TUFDckZDLGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFFRDtJQUNBQyxjQUFjLEVBQUU7RUFDbEIsQ0FBRSxDQUFDO0VBRUhYLEdBQUcsQ0FBQ1ksS0FBSyxDQUFDLENBQUM7QUFDYixDQUFFLENBQUMifQ==