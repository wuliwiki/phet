// Copyright 2014-2022, University of Colorado Boulder

/**
 * A pair of arrows used to indicate that an atom can be rotated.
 * Shapes are created in global coordinates, so this node's position should be (0,0).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import CurvedArrowShape from '../../../../scenery-phet/js/CurvedArrowShape.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import moleculePolarity from '../../moleculePolarity.js';
export default class RotateArrowsNode extends Node {
  constructor(atom, providedOptions) {
    const options = optionize()({
      // NodeOptions
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);

    // arrow configuration
    const arrowShapeOptions = {
      headWidth: 30,
      headHeight: 15,
      tailWidth: 15
    };
    const arrowPathOptions = {
      fill: atom.color,
      stroke: 'gray'
    };
    const radius = 0.5 * atom.diameter + 0.5 * arrowShapeOptions.headWidth + 2; // distance of arrow's tip from the atom's center
    const theta = 0.1 * Math.PI; // central angle of the arc that the arrow traces

    options.children = [new Path(new CurvedArrowShape(radius, -theta, theta, arrowShapeOptions), arrowPathOptions), new Path(new CurvedArrowShape(radius, Math.PI - theta, Math.PI + theta, arrowShapeOptions), arrowPathOptions)];
    super(options);

    // Sync with atom position
    atom.positionProperty.link(position => {
      this.translation = position;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('RotateArrowsNode', RotateArrowsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJDdXJ2ZWRBcnJvd1NoYXBlIiwiTm9kZSIsIlBhdGgiLCJtb2xlY3VsZVBvbGFyaXR5IiwiUm90YXRlQXJyb3dzTm9kZSIsImNvbnN0cnVjdG9yIiwiYXRvbSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvUmVhZE9ubHkiLCJhcnJvd1NoYXBlT3B0aW9ucyIsImhlYWRXaWR0aCIsImhlYWRIZWlnaHQiLCJ0YWlsV2lkdGgiLCJhcnJvd1BhdGhPcHRpb25zIiwiZmlsbCIsImNvbG9yIiwic3Ryb2tlIiwicmFkaXVzIiwiZGlhbWV0ZXIiLCJ0aGV0YSIsIk1hdGgiLCJQSSIsImNoaWxkcmVuIiwicG9zaXRpb25Qcm9wZXJ0eSIsImxpbmsiLCJwb3NpdGlvbiIsInRyYW5zbGF0aW9uIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUm90YXRlQXJyb3dzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHBhaXIgb2YgYXJyb3dzIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCBhbiBhdG9tIGNhbiBiZSByb3RhdGVkLlxyXG4gKiBTaGFwZXMgYXJlIGNyZWF0ZWQgaW4gZ2xvYmFsIGNvb3JkaW5hdGVzLCBzbyB0aGlzIG5vZGUncyBwb3NpdGlvbiBzaG91bGQgYmUgKDAsMCkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBDdXJ2ZWRBcnJvd1NoYXBlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9DdXJ2ZWRBcnJvd1NoYXBlLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQXRvbSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQXRvbS5qcyc7XHJcbmltcG9ydCBtb2xlY3VsZVBvbGFyaXR5IGZyb20gJy4uLy4uL21vbGVjdWxlUG9sYXJpdHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFJvdGF0ZUFycm93c05vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdGF0ZUFycm93c05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBhdG9tOiBBdG9tLCBwcm92aWRlZE9wdGlvbnM6IFJvdGF0ZUFycm93c05vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Um90YXRlQXJyb3dzTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTm9kZU9wdGlvbnNcclxuICAgICAgdmlzaWJsZVByb3BlcnR5T3B0aW9uczogeyBwaGV0aW9SZWFkT25seTogdHJ1ZSB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBhcnJvdyBjb25maWd1cmF0aW9uXHJcbiAgICBjb25zdCBhcnJvd1NoYXBlT3B0aW9ucyA9IHsgaGVhZFdpZHRoOiAzMCwgaGVhZEhlaWdodDogMTUsIHRhaWxXaWR0aDogMTUgfTtcclxuICAgIGNvbnN0IGFycm93UGF0aE9wdGlvbnMgPSB7IGZpbGw6IGF0b20uY29sb3IsIHN0cm9rZTogJ2dyYXknIH07XHJcbiAgICBjb25zdCByYWRpdXMgPSAoIDAuNSAqIGF0b20uZGlhbWV0ZXIgKSArICggMC41ICogYXJyb3dTaGFwZU9wdGlvbnMuaGVhZFdpZHRoICkgKyAyOyAvLyBkaXN0YW5jZSBvZiBhcnJvdydzIHRpcCBmcm9tIHRoZSBhdG9tJ3MgY2VudGVyXHJcbiAgICBjb25zdCB0aGV0YSA9IDAuMSAqIE1hdGguUEk7IC8vIGNlbnRyYWwgYW5nbGUgb2YgdGhlIGFyYyB0aGF0IHRoZSBhcnJvdyB0cmFjZXNcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gW1xyXG4gICAgICBuZXcgUGF0aCggbmV3IEN1cnZlZEFycm93U2hhcGUoIHJhZGl1cywgLXRoZXRhLCB0aGV0YSwgYXJyb3dTaGFwZU9wdGlvbnMgKSwgYXJyb3dQYXRoT3B0aW9ucyApLFxyXG4gICAgICBuZXcgUGF0aCggbmV3IEN1cnZlZEFycm93U2hhcGUoIHJhZGl1cywgTWF0aC5QSSAtIHRoZXRhLCBNYXRoLlBJICsgdGhldGEsIGFycm93U2hhcGVPcHRpb25zICksIGFycm93UGF0aE9wdGlvbnMgKVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFN5bmMgd2l0aCBhdG9tIHBvc2l0aW9uXHJcbiAgICBhdG9tLnBvc2l0aW9uUHJvcGVydHkubGluayggcG9zaXRpb24gPT4ge1xyXG4gICAgICB0aGlzLnRyYW5zbGF0aW9uID0gcG9zaXRpb247XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ1JvdGF0ZUFycm93c05vZGUnLCBSb3RhdGVBcnJvd3NOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0MsZ0JBQWdCLE1BQU0saURBQWlEO0FBQzlFLFNBQVNDLElBQUksRUFBZUMsSUFBSSxRQUFRLG1DQUFtQztBQUUzRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFNeEQsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU0gsSUFBSSxDQUFDO0VBRTFDSSxXQUFXQSxDQUFFQyxJQUFVLEVBQUVDLGVBQXdDLEVBQUc7SUFFekUsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQW9ELENBQUMsQ0FBRTtNQUU5RTtNQUNBVSxzQkFBc0IsRUFBRTtRQUFFQyxjQUFjLEVBQUU7TUFBSztJQUNqRCxDQUFDLEVBQUVILGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUksaUJBQWlCLEdBQUc7TUFBRUMsU0FBUyxFQUFFLEVBQUU7TUFBRUMsVUFBVSxFQUFFLEVBQUU7TUFBRUMsU0FBUyxFQUFFO0lBQUcsQ0FBQztJQUMxRSxNQUFNQyxnQkFBZ0IsR0FBRztNQUFFQyxJQUFJLEVBQUVWLElBQUksQ0FBQ1csS0FBSztNQUFFQyxNQUFNLEVBQUU7SUFBTyxDQUFDO0lBQzdELE1BQU1DLE1BQU0sR0FBSyxHQUFHLEdBQUdiLElBQUksQ0FBQ2MsUUFBUSxHQUFPLEdBQUcsR0FBR1QsaUJBQWlCLENBQUNDLFNBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRixNQUFNUyxLQUFLLEdBQUcsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDOztJQUU3QmYsT0FBTyxDQUFDZ0IsUUFBUSxHQUFHLENBQ2pCLElBQUl0QixJQUFJLENBQUUsSUFBSUYsZ0JBQWdCLENBQUVtQixNQUFNLEVBQUUsQ0FBQ0UsS0FBSyxFQUFFQSxLQUFLLEVBQUVWLGlCQUFrQixDQUFDLEVBQUVJLGdCQUFpQixDQUFDLEVBQzlGLElBQUliLElBQUksQ0FBRSxJQUFJRixnQkFBZ0IsQ0FBRW1CLE1BQU0sRUFBRUcsSUFBSSxDQUFDQyxFQUFFLEdBQUdGLEtBQUssRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEdBQUdGLEtBQUssRUFBRVYsaUJBQWtCLENBQUMsRUFBRUksZ0JBQWlCLENBQUMsQ0FDbEg7SUFFRCxLQUFLLENBQUVQLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQUYsSUFBSSxDQUFDbUIsZ0JBQWdCLENBQUNDLElBQUksQ0FBRUMsUUFBUSxJQUFJO01BQ3RDLElBQUksQ0FBQ0MsV0FBVyxHQUFHRCxRQUFRO0lBQzdCLENBQUUsQ0FBQztFQUNMO0VBRWdCRSxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTFCLGdCQUFnQixDQUFDNEIsUUFBUSxDQUFFLGtCQUFrQixFQUFFM0IsZ0JBQWlCLENBQUMifQ==