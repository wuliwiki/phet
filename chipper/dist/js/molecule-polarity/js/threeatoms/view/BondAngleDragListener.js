// Copyright 2014-2023, University of Colorado Boulder

/**
 * Drag handler for manipulating a bond angle.
 * The atom being dragged is popped to the front.
 * A pair of arrows indicating the direction of drag are shown when the mouse enters the atom.
 * When the drag begins, these arrows are made invisible.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { DragListener } from '../../../../scenery/js/imports.js';
import normalizeAngle from '../../common/model/normalizeAngle.js';
import moleculePolarity from '../../moleculePolarity.js';
export default class BondAngleDragListener extends DragListener {
  constructor(molecule, bondAngleProperty, targetNode, providedOptions) {
    const options = optionize()({
      // DragListenerOptions
      allowTouchSnag: true
    }, providedOptions);
    let previousAngle = 0;

    // Finds the angle (in radians) about the molecule's position.
    const getAngle = event => {
      const parent = targetNode.getParent();
      assert && assert(parent);
      const point = parent.globalToLocalPoint(event.pointer.point);
      return new Vector2(point.x - molecule.position.x, point.y - molecule.position.y).angle;
    };
    options.start = event => {
      molecule.isDraggingProperty.value = true;
      targetNode.moveToFront();
      previousAngle = getAngle(event);
    };
    const bondAngleRange = bondAngleProperty.range;
    options.drag = event => {
      const currentAngle = getAngle(event);
      bondAngleProperty.value = normalizeAngle(bondAngleProperty.value + currentAngle - previousAngle, bondAngleRange.min);
      previousAngle = currentAngle;
    };
    options.end = () => {
      molecule.isDraggingProperty.value = false;
    };
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('BondAngleDragListener', BondAngleDragListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwib3B0aW9uaXplIiwiRHJhZ0xpc3RlbmVyIiwibm9ybWFsaXplQW5nbGUiLCJtb2xlY3VsZVBvbGFyaXR5IiwiQm9uZEFuZ2xlRHJhZ0xpc3RlbmVyIiwiY29uc3RydWN0b3IiLCJtb2xlY3VsZSIsImJvbmRBbmdsZVByb3BlcnR5IiwidGFyZ2V0Tm9kZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJhbGxvd1RvdWNoU25hZyIsInByZXZpb3VzQW5nbGUiLCJnZXRBbmdsZSIsImV2ZW50IiwicGFyZW50IiwiZ2V0UGFyZW50IiwiYXNzZXJ0IiwicG9pbnQiLCJnbG9iYWxUb0xvY2FsUG9pbnQiLCJwb2ludGVyIiwieCIsInBvc2l0aW9uIiwieSIsImFuZ2xlIiwic3RhcnQiLCJpc0RyYWdnaW5nUHJvcGVydHkiLCJ2YWx1ZSIsIm1vdmVUb0Zyb250IiwiYm9uZEFuZ2xlUmFuZ2UiLCJyYW5nZSIsImRyYWciLCJjdXJyZW50QW5nbGUiLCJtaW4iLCJlbmQiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCb25kQW5nbGVEcmFnTGlzdGVuZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRHJhZyBoYW5kbGVyIGZvciBtYW5pcHVsYXRpbmcgYSBib25kIGFuZ2xlLlxyXG4gKiBUaGUgYXRvbSBiZWluZyBkcmFnZ2VkIGlzIHBvcHBlZCB0byB0aGUgZnJvbnQuXHJcbiAqIEEgcGFpciBvZiBhcnJvd3MgaW5kaWNhdGluZyB0aGUgZGlyZWN0aW9uIG9mIGRyYWcgYXJlIHNob3duIHdoZW4gdGhlIG1vdXNlIGVudGVycyB0aGUgYXRvbS5cclxuICogV2hlbiB0aGUgZHJhZyBiZWdpbnMsIHRoZXNlIGFycm93cyBhcmUgbWFkZSBpbnZpc2libGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIsIERyYWdMaXN0ZW5lck9wdGlvbnMsIE5vZGUsIFByZXNzZWREcmFnTGlzdGVuZXIsIFNjZW5lcnlFdmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Nb2xlY3VsZS5qcyc7XHJcbmltcG9ydCBub3JtYWxpemVBbmdsZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvbm9ybWFsaXplQW5nbGUuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBCb25kQW5nbGVEcmFnTGlzdGVuZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJlxyXG4gIFBpY2tSZXF1aXJlZDxEcmFnTGlzdGVuZXJPcHRpb25zPFByZXNzZWREcmFnTGlzdGVuZXI+LCAndGFuZGVtJz4gJlxyXG4gIC8vVE9ETyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvYXhvbi9pc3N1ZXMvNDEyIHVudGlsIGZpeGVkLCBwaGV0aW9Eb2N1bWVudGF0aW9uIGlzIGlnbm9yZWRcclxuICAvL1BpY2tPcHRpb25hbDxEcmFnTGlzdGVuZXJPcHRpb25zPFByZXNzZWREcmFnTGlzdGVuZXI+LCAncGhldGlvRG9jdW1lbnRhdGlvbic+XHJcbiAgUGlja09wdGlvbmFsPFBoZXRpb09iamVjdE9wdGlvbnMsICdwaGV0aW9Eb2N1bWVudGF0aW9uJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb25kQW5nbGVEcmFnTGlzdGVuZXIgZXh0ZW5kcyBEcmFnTGlzdGVuZXIge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vbGVjdWxlOiBNb2xlY3VsZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGJvbmRBbmdsZVByb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eSxcclxuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGU6IE5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEJvbmRBbmdsZURyYWdMaXN0ZW5lck9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCb25kQW5nbGVEcmFnTGlzdGVuZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgRHJhZ0xpc3RlbmVyT3B0aW9uczxQcmVzc2VkRHJhZ0xpc3RlbmVyPj4oKSgge1xyXG5cclxuICAgICAgLy8gRHJhZ0xpc3RlbmVyT3B0aW9uc1xyXG4gICAgICBhbGxvd1RvdWNoU25hZzogdHJ1ZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgbGV0IHByZXZpb3VzQW5nbGUgPSAwO1xyXG5cclxuICAgIC8vIEZpbmRzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgYWJvdXQgdGhlIG1vbGVjdWxlJ3MgcG9zaXRpb24uXHJcbiAgICBjb25zdCBnZXRBbmdsZSA9ICggZXZlbnQ6IFNjZW5lcnlFdmVudCApID0+IHtcclxuICAgICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0Tm9kZS5nZXRQYXJlbnQoKSE7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHBhcmVudCApO1xyXG4gICAgICBjb25zdCBwb2ludCA9IHBhcmVudC5nbG9iYWxUb0xvY2FsUG9pbnQoIGV2ZW50LnBvaW50ZXIucG9pbnQgKTtcclxuICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKCBwb2ludC54IC0gbW9sZWN1bGUucG9zaXRpb24ueCwgcG9pbnQueSAtIG1vbGVjdWxlLnBvc2l0aW9uLnkgKS5hbmdsZTtcclxuICAgIH07XHJcblxyXG4gICAgb3B0aW9ucy5zdGFydCA9IGV2ZW50ID0+IHtcclxuICAgICAgbW9sZWN1bGUuaXNEcmFnZ2luZ1Byb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuICAgICAgdGFyZ2V0Tm9kZS5tb3ZlVG9Gcm9udCgpO1xyXG4gICAgICBwcmV2aW91c0FuZ2xlID0gZ2V0QW5nbGUoIGV2ZW50ICk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGJvbmRBbmdsZVJhbmdlID0gYm9uZEFuZ2xlUHJvcGVydHkucmFuZ2U7XHJcblxyXG4gICAgb3B0aW9ucy5kcmFnID0gZXZlbnQgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50QW5nbGUgPSBnZXRBbmdsZSggZXZlbnQgKTtcclxuICAgICAgYm9uZEFuZ2xlUHJvcGVydHkudmFsdWUgPVxyXG4gICAgICAgIG5vcm1hbGl6ZUFuZ2xlKCBib25kQW5nbGVQcm9wZXJ0eS52YWx1ZSArIGN1cnJlbnRBbmdsZSAtIHByZXZpb3VzQW5nbGUsIGJvbmRBbmdsZVJhbmdlLm1pbiApO1xyXG4gICAgICBwcmV2aW91c0FuZ2xlID0gY3VycmVudEFuZ2xlO1xyXG4gICAgfTtcclxuXHJcbiAgICBvcHRpb25zLmVuZCA9ICgpID0+IHtcclxuICAgICAgbW9sZWN1bGUuaXNEcmFnZ2luZ1Byb3BlcnR5LnZhbHVlID0gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ0JvbmRBbmdsZURyYWdMaXN0ZW5lcicsIEJvbmRBbmdsZURyYWdMaXN0ZW5lciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBR25GLFNBQVNDLFlBQVksUUFBc0UsbUNBQW1DO0FBRzlILE9BQU9DLGNBQWMsTUFBTSxzQ0FBc0M7QUFDakUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBVXhELGVBQWUsTUFBTUMscUJBQXFCLFNBQVNILFlBQVksQ0FBQztFQUV2REksV0FBV0EsQ0FBRUMsUUFBa0IsRUFDbEJDLGlCQUFpQyxFQUNqQ0MsVUFBZ0IsRUFDaEJDLGVBQTZDLEVBQUc7SUFFbEUsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQXNGLENBQUMsQ0FBRTtNQUVoSDtNQUNBVyxjQUFjLEVBQUU7SUFDbEIsQ0FBQyxFQUFFRixlQUFnQixDQUFDO0lBRXBCLElBQUlHLGFBQWEsR0FBRyxDQUFDOztJQUVyQjtJQUNBLE1BQU1DLFFBQVEsR0FBS0MsS0FBbUIsSUFBTTtNQUMxQyxNQUFNQyxNQUFNLEdBQUdQLFVBQVUsQ0FBQ1EsU0FBUyxDQUFDLENBQUU7TUFDdENDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixNQUFPLENBQUM7TUFDMUIsTUFBTUcsS0FBSyxHQUFHSCxNQUFNLENBQUNJLGtCQUFrQixDQUFFTCxLQUFLLENBQUNNLE9BQU8sQ0FBQ0YsS0FBTSxDQUFDO01BQzlELE9BQU8sSUFBSW5CLE9BQU8sQ0FBRW1CLEtBQUssQ0FBQ0csQ0FBQyxHQUFHZixRQUFRLENBQUNnQixRQUFRLENBQUNELENBQUMsRUFBRUgsS0FBSyxDQUFDSyxDQUFDLEdBQUdqQixRQUFRLENBQUNnQixRQUFRLENBQUNDLENBQUUsQ0FBQyxDQUFDQyxLQUFLO0lBQzFGLENBQUM7SUFFRGQsT0FBTyxDQUFDZSxLQUFLLEdBQUdYLEtBQUssSUFBSTtNQUN2QlIsUUFBUSxDQUFDb0Isa0JBQWtCLENBQUNDLEtBQUssR0FBRyxJQUFJO01BQ3hDbkIsVUFBVSxDQUFDb0IsV0FBVyxDQUFDLENBQUM7TUFDeEJoQixhQUFhLEdBQUdDLFFBQVEsQ0FBRUMsS0FBTSxDQUFDO0lBQ25DLENBQUM7SUFFRCxNQUFNZSxjQUFjLEdBQUd0QixpQkFBaUIsQ0FBQ3VCLEtBQUs7SUFFOUNwQixPQUFPLENBQUNxQixJQUFJLEdBQUdqQixLQUFLLElBQUk7TUFDdEIsTUFBTWtCLFlBQVksR0FBR25CLFFBQVEsQ0FBRUMsS0FBTSxDQUFDO01BQ3RDUCxpQkFBaUIsQ0FBQ29CLEtBQUssR0FDckJ6QixjQUFjLENBQUVLLGlCQUFpQixDQUFDb0IsS0FBSyxHQUFHSyxZQUFZLEdBQUdwQixhQUFhLEVBQUVpQixjQUFjLENBQUNJLEdBQUksQ0FBQztNQUM5RnJCLGFBQWEsR0FBR29CLFlBQVk7SUFDOUIsQ0FBQztJQUVEdEIsT0FBTyxDQUFDd0IsR0FBRyxHQUFHLE1BQU07TUFDbEI1QixRQUFRLENBQUNvQixrQkFBa0IsQ0FBQ0MsS0FBSyxHQUFHLEtBQUs7SUFDM0MsQ0FBQztJQUVELEtBQUssQ0FBRWpCLE9BQVEsQ0FBQztFQUNsQjtFQUVnQnlCLE9BQU9BLENBQUEsRUFBUztJQUM5QmxCLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNrQixPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFoQyxnQkFBZ0IsQ0FBQ2lDLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRWhDLHFCQUFzQixDQUFDIn0=