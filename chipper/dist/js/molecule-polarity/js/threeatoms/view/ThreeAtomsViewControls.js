// Copyright 2017-2022, University of Colorado Boulder

/**
 * 'View' controls for the 'Three Atoms' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import MPConstants from '../../common/MPConstants.js';
import BondDipolesCheckbox from '../../common/view/BondDipolesCheckbox.js';
import MolecularDipoleCheckbox from '../../common/view/MolecularDipoleCheckbox.js';
import PartialChargesCheckbox from '../../common/view/PartialChargesCheckbox.js';
import moleculePolarity from '../../moleculePolarity.js';
import MoleculePolarityStrings from '../../MoleculePolarityStrings.js';
export default class ThreeAtomsViewControls extends VBox {
  constructor(viewProperties, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: MPConstants.CONTROL_PANEL_Y_SPACING
    }, providedOptions);

    // title
    const titleText = new Text(MoleculePolarityStrings.viewStringProperty, combineOptions({}, MPConstants.CONTROL_PANEL_TITLE_OPTIONS, {
      tandem: options.tandem.createTandem('titleText')
    }));

    // Checkboxes
    const bondDipolesCheckbox = new BondDipolesCheckbox(viewProperties.bondDipolesVisibleProperty, {
      tandem: options.tandem.createTandem('bondDipolesCheckbox')
    });
    const molecularDipoleCheckbox = new MolecularDipoleCheckbox(viewProperties.molecularDipoleVisibleProperty, {
      tandem: options.tandem.createTandem('molecularDipoleCheckbox')
    });
    const partialChargesCheckbox = new PartialChargesCheckbox(viewProperties.partialChargesVisibleProperty, {
      tandem: options.tandem.createTandem('partialChargesCheckbox')
    });
    options.children = [titleText, bondDipolesCheckbox, molecularDipoleCheckbox, partialChargesCheckbox];
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
moleculePolarity.register('ThreeAtomsViewControls', ThreeAtomsViewControls);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIlRleHQiLCJWQm94IiwiTVBDb25zdGFudHMiLCJCb25kRGlwb2xlc0NoZWNrYm94IiwiTW9sZWN1bGFyRGlwb2xlQ2hlY2tib3giLCJQYXJ0aWFsQ2hhcmdlc0NoZWNrYm94IiwibW9sZWN1bGVQb2xhcml0eSIsIk1vbGVjdWxlUG9sYXJpdHlTdHJpbmdzIiwiVGhyZWVBdG9tc1ZpZXdDb250cm9scyIsImNvbnN0cnVjdG9yIiwidmlld1Byb3BlcnRpZXMiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYWxpZ24iLCJzcGFjaW5nIiwiQ09OVFJPTF9QQU5FTF9ZX1NQQUNJTkciLCJ0aXRsZVRleHQiLCJ2aWV3U3RyaW5nUHJvcGVydHkiLCJDT05UUk9MX1BBTkVMX1RJVExFX09QVElPTlMiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJib25kRGlwb2xlc0NoZWNrYm94IiwiYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHkiLCJtb2xlY3VsYXJEaXBvbGVDaGVja2JveCIsIm1vbGVjdWxhckRpcG9sZVZpc2libGVQcm9wZXJ0eSIsInBhcnRpYWxDaGFyZ2VzQ2hlY2tib3giLCJwYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eSIsImNoaWxkcmVuIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGhyZWVBdG9tc1ZpZXdDb250cm9scy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiAnVmlldycgY29udHJvbHMgZm9yIHRoZSAnVGhyZWUgQXRvbXMnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFRleHQsIFRleHRPcHRpb25zLCBWQm94LCBWQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBNUENvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vTVBDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQm9uZERpcG9sZXNDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Cb25kRGlwb2xlc0NoZWNrYm94LmpzJztcclxuaW1wb3J0IE1vbGVjdWxhckRpcG9sZUNoZWNrYm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L01vbGVjdWxhckRpcG9sZUNoZWNrYm94LmpzJztcclxuaW1wb3J0IFBhcnRpYWxDaGFyZ2VzQ2hlY2tib3ggZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvUGFydGlhbENoYXJnZXNDaGVja2JveC5qcyc7XHJcbmltcG9ydCBtb2xlY3VsZVBvbGFyaXR5IGZyb20gJy4uLy4uL21vbGVjdWxlUG9sYXJpdHkuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MgZnJvbSAnLi4vLi4vTW9sZWN1bGVQb2xhcml0eVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgVGhyZWVBdG9tc1ZpZXdQcm9wZXJ0aWVzIGZyb20gJy4vVGhyZWVBdG9tc1ZpZXdQcm9wZXJ0aWVzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBUaHJlZUF0b21zVmlld0NvbnRyb2xzT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFZCb3gsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRocmVlQXRvbXNWaWV3Q29udHJvbHMgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2aWV3UHJvcGVydGllczogVGhyZWVBdG9tc1ZpZXdQcm9wZXJ0aWVzLCBwcm92aWRlZE9wdGlvbnM6IFRocmVlQXRvbXNWaWV3Q29udHJvbHNPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VGhyZWVBdG9tc1ZpZXdDb250cm9sc09wdGlvbnMsIFNlbGZPcHRpb25zLCBWQm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gVkJveE9wdGlvbnNcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogTVBDb25zdGFudHMuQ09OVFJPTF9QQU5FTF9ZX1NQQUNJTkdcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHRpdGxlXHJcbiAgICBjb25zdCB0aXRsZVRleHQgPSBuZXcgVGV4dCggTW9sZWN1bGVQb2xhcml0eVN0cmluZ3Mudmlld1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxUZXh0T3B0aW9ucz4oIHt9LCBNUENvbnN0YW50cy5DT05UUk9MX1BBTkVMX1RJVExFX09QVElPTlMsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RpdGxlVGV4dCcgKVxyXG4gICAgICB9ICkgKTtcclxuXHJcbiAgICAvLyBDaGVja2JveGVzXHJcbiAgICBjb25zdCBib25kRGlwb2xlc0NoZWNrYm94ID0gbmV3IEJvbmREaXBvbGVzQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLmJvbmREaXBvbGVzVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYm9uZERpcG9sZXNDaGVja2JveCcgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgbW9sZWN1bGFyRGlwb2xlQ2hlY2tib3ggPSBuZXcgTW9sZWN1bGFyRGlwb2xlQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLm1vbGVjdWxhckRpcG9sZVZpc2libGVQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vbGVjdWxhckRpcG9sZUNoZWNrYm94JyApXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBwYXJ0aWFsQ2hhcmdlc0NoZWNrYm94ID0gbmV3IFBhcnRpYWxDaGFyZ2VzQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLnBhcnRpYWxDaGFyZ2VzVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncGFydGlhbENoYXJnZXNDaGVja2JveCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbXHJcbiAgICAgIHRpdGxlVGV4dCxcclxuICAgICAgYm9uZERpcG9sZXNDaGVja2JveCxcclxuICAgICAgbW9sZWN1bGFyRGlwb2xlQ2hlY2tib3gsXHJcbiAgICAgIHBhcnRpYWxDaGFyZ2VzQ2hlY2tib3hcclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2xlY3VsZVBvbGFyaXR5LnJlZ2lzdGVyKCAnVGhyZWVBdG9tc1ZpZXdDb250cm9scycsIFRocmVlQXRvbXNWaWV3Q29udHJvbHMgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxJQUFJQyxjQUFjLFFBQTBCLHVDQUF1QztBQUVuRyxTQUFTQyxJQUFJLEVBQWVDLElBQUksUUFBcUIsbUNBQW1DO0FBQ3hGLE9BQU9DLFdBQVcsTUFBTSw2QkFBNkI7QUFDckQsT0FBT0MsbUJBQW1CLE1BQU0sMENBQTBDO0FBQzFFLE9BQU9DLHVCQUF1QixNQUFNLDhDQUE4QztBQUNsRixPQUFPQyxzQkFBc0IsTUFBTSw2Q0FBNkM7QUFDaEYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQU90RSxlQUFlLE1BQU1DLHNCQUFzQixTQUFTUCxJQUFJLENBQUM7RUFFaERRLFdBQVdBLENBQUVDLGNBQXdDLEVBQUVDLGVBQThDLEVBQUc7SUFFN0csTUFBTUMsT0FBTyxHQUFHZCxTQUFTLENBQTBELENBQUMsQ0FBRTtNQUVwRjtNQUNBZSxLQUFLLEVBQUUsTUFBTTtNQUNiQyxPQUFPLEVBQUVaLFdBQVcsQ0FBQ2E7SUFDdkIsQ0FBQyxFQUFFSixlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1LLFNBQVMsR0FBRyxJQUFJaEIsSUFBSSxDQUFFTyx1QkFBdUIsQ0FBQ1Usa0JBQWtCLEVBQ3BFbEIsY0FBYyxDQUFlLENBQUMsQ0FBQyxFQUFFRyxXQUFXLENBQUNnQiwyQkFBMkIsRUFBRTtNQUN4RUMsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFdBQVk7SUFDbkQsQ0FBRSxDQUFFLENBQUM7O0lBRVA7SUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJbEIsbUJBQW1CLENBQUVPLGNBQWMsQ0FBQ1ksMEJBQTBCLEVBQUU7TUFDOUZILE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSxxQkFBc0I7SUFDN0QsQ0FBRSxDQUFDO0lBQ0gsTUFBTUcsdUJBQXVCLEdBQUcsSUFBSW5CLHVCQUF1QixDQUFFTSxjQUFjLENBQUNjLDhCQUE4QixFQUFFO01BQzFHTCxNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUUseUJBQTBCO0lBQ2pFLENBQUUsQ0FBQztJQUNILE1BQU1LLHNCQUFzQixHQUFHLElBQUlwQixzQkFBc0IsQ0FBRUssY0FBYyxDQUFDZ0IsNkJBQTZCLEVBQUU7TUFDdkdQLE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSx3QkFBeUI7SUFDaEUsQ0FBRSxDQUFDO0lBRUhSLE9BQU8sQ0FBQ2UsUUFBUSxHQUFHLENBQ2pCWCxTQUFTLEVBQ1RLLG1CQUFtQixFQUNuQkUsdUJBQXVCLEVBQ3ZCRSxzQkFBc0IsQ0FDdkI7SUFFRCxLQUFLLENBQUViLE9BQVEsQ0FBQztFQUNsQjtFQUVnQmdCLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdEIsZ0JBQWdCLENBQUN3QixRQUFRLENBQUUsd0JBQXdCLEVBQUV0QixzQkFBdUIsQ0FBQyJ9