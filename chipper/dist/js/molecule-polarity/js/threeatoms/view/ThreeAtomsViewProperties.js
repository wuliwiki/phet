// Copyright 2016-2022, University of Colorado Boulder

/**
 * View-specific Properties for the 'Three Atoms' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import moleculePolarity from '../../moleculePolarity.js';
export default class ThreeAtomsViewProperties {
  constructor(providedOptions) {
    const options = providedOptions;
    this.bondDipolesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('bondDipolesVisibleProperty')
    });
    this.molecularDipoleVisibleProperty = new BooleanProperty(true, {
      tandem: options.tandem.createTandem('molecularDipoleVisibleProperty')
    });
    this.partialChargesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('partialChargesVisibleProperty')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.bondDipolesVisibleProperty.reset();
    this.molecularDipoleVisibleProperty.reset();
    this.partialChargesVisibleProperty.reset();
  }
}
moleculePolarity.register('ThreeAtomsViewProperties', ThreeAtomsViewProperties);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJtb2xlY3VsZVBvbGFyaXR5IiwiVGhyZWVBdG9tc1ZpZXdQcm9wZXJ0aWVzIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJtb2xlY3VsYXJEaXBvbGVWaXNpYmxlUHJvcGVydHkiLCJwYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGhyZWVBdG9tc1ZpZXdQcm9wZXJ0aWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXctc3BlY2lmaWMgUHJvcGVydGllcyBmb3IgdGhlICdUaHJlZSBBdG9tcycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgbW9sZWN1bGVQb2xhcml0eSBmcm9tICcuLi8uLi9tb2xlY3VsZVBvbGFyaXR5LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBUaHJlZUF0b21zVmlld1Byb3BlcnRpZXNPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVBdG9tc1ZpZXdQcm9wZXJ0aWVzIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGJvbmREaXBvbGVzVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbW9sZWN1bGFyRGlwb2xlVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgcGFydGlhbENoYXJnZXNWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogVGhyZWVBdG9tc1ZpZXdQcm9wZXJ0aWVzT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gcHJvdmlkZWRPcHRpb25zO1xyXG5cclxuICAgIHRoaXMuYm9uZERpcG9sZXNWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2JvbmREaXBvbGVzVmlzaWJsZVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5tb2xlY3VsYXJEaXBvbGVWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9sZWN1bGFyRGlwb2xlVmlzaWJsZVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5wYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncGFydGlhbENoYXJnZXNWaXNpYmxlUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmJvbmREaXBvbGVzVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLm1vbGVjdWxhckRpcG9sZVZpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5wYXJ0aWFsQ2hhcmdlc1Zpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVQb2xhcml0eS5yZWdpc3RlciggJ1RocmVlQXRvbXNWaWV3UHJvcGVydGllcycsIFRocmVlQXRvbXNWaWV3UHJvcGVydGllcyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBS3BFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQU14RCxlQUFlLE1BQU1DLHdCQUF3QixDQUFDO0VBTXJDQyxXQUFXQSxDQUFFQyxlQUFnRCxFQUFHO0lBRXJFLE1BQU1DLE9BQU8sR0FBR0QsZUFBZTtJQUUvQixJQUFJLENBQUNFLDBCQUEwQixHQUFHLElBQUlOLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDNURPLE1BQU0sRUFBRUYsT0FBTyxDQUFDRSxNQUFNLENBQUNDLFlBQVksQ0FBRSw0QkFBNkI7SUFDcEUsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyw4QkFBOEIsR0FBRyxJQUFJVCxlQUFlLENBQUUsSUFBSSxFQUFFO01BQy9ETyxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsZ0NBQWlDO0lBQ3hFLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0UsNkJBQTZCLEdBQUcsSUFBSVYsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUMvRE8sTUFBTSxFQUFFRixPQUFPLENBQUNFLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLCtCQUFnQztJQUN2RSxDQUFFLENBQUM7RUFDTDtFQUVPRyxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjtFQUVPQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDUCwwQkFBMEIsQ0FBQ08sS0FBSyxDQUFDLENBQUM7SUFDdkMsSUFBSSxDQUFDSiw4QkFBOEIsQ0FBQ0ksS0FBSyxDQUFDLENBQUM7SUFDM0MsSUFBSSxDQUFDSCw2QkFBNkIsQ0FBQ0csS0FBSyxDQUFDLENBQUM7RUFDNUM7QUFDRjtBQUVBWixnQkFBZ0IsQ0FBQ2EsUUFBUSxDQUFFLDBCQUEwQixFQUFFWix3QkFBeUIsQ0FBQyJ9