// Copyright 2020-2022, University of Colorado Boulder

/**
 * IntroControlPanel is a CollisionLabControlPanel sub-type for the 'Intro' screen, which appears on the
 * upper-right corner of the screen.
 *
 * It adds a 'Change in Momentum' Checkbox to allow the user to toggle the visibility of the change in momentum vectors.
 * The checkbox is inserted right above the 'Center of Mass' Checkbox of the super-class. It also removes the
 * 'Reflecting Border' Checkbox and the 'Path' Checkbox.
 *
 * @author Brandon Li
 */

import merge from '../../../../phet-core/js/merge.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import collisionLab from '../../collisionLab.js';
import CollisionLabStrings from '../../CollisionLabStrings.js';
import CollisionLabCheckbox from '../../common/view/CollisionLabCheckbox.js';
import CollisionLabControlPanel from '../../common/view/CollisionLabControlPanel.js';
import CollisionLabViewProperties from '../../common/view/CollisionLabViewProperties.js';
class IntroControlPanel extends CollisionLabControlPanel {
  /**
   * @param {CollisionLabViewProperties} viewProperties
   * @param {Property.<boolean>} changeInMomentumVisibleProperty
   * @param {Property.<boolean>} centerOfMassVisibleProperty
   * @param {Property.<boolean>} pathsVisibleProperty
   * @param {Property.<boolean>} reflectingBorderProperty
   * @param {Property.<number>} elasticityPercentProperty
   * @param {Property.<boolean>} ballsConstantSizeProperty
   * @param {Object} [options]
   */
  constructor(viewProperties, changeInMomentumVisibleProperty, centerOfMassVisibleProperty, pathsVisibleProperty, reflectingBorderProperty, elasticityPercentProperty, ballsConstantSizeProperty, options) {
    assert && assert(viewProperties instanceof CollisionLabViewProperties, `invalid viewProperties: ${viewProperties}`);
    assert && AssertUtils.assertPropertyOf(changeInMomentumVisibleProperty, 'boolean');
    assert && AssertUtils.assertPropertyOf(centerOfMassVisibleProperty, 'boolean');
    assert && AssertUtils.assertPropertyOf(pathsVisibleProperty, 'boolean');
    assert && AssertUtils.assertPropertyOf(reflectingBorderProperty, 'boolean');
    assert && AssertUtils.assertPropertyOf(elasticityPercentProperty, 'number');
    assert && AssertUtils.assertPropertyOf(ballsConstantSizeProperty, 'boolean');
    options = merge({
      includeReflectingBorderCheckbox: false,
      includePathCheckbox: false
    }, options);
    super(viewProperties, centerOfMassVisibleProperty, pathsVisibleProperty, reflectingBorderProperty, elasticityPercentProperty, ballsConstantSizeProperty, options);

    //----------------------------------------------------------------------------------------

    // 'Change in Momentum' visibility Checkbox.
    const changeInMomentumCheckbox = new CollisionLabCheckbox(changeInMomentumVisibleProperty, CollisionLabStrings.changeInMomentum);

    // Add the Change in Momentum Checkbox before the Center of Mass Checkbox.
    this.contentNode.insertChild(this.contentNode.indexOfChild(this.centerOfMassCheckbox), changeInMomentumCheckbox);
  }
}
collisionLab.register('IntroControlPanel', IntroControlPanel);
export default IntroControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFzc2VydFV0aWxzIiwiY29sbGlzaW9uTGFiIiwiQ29sbGlzaW9uTGFiU3RyaW5ncyIsIkNvbGxpc2lvbkxhYkNoZWNrYm94IiwiQ29sbGlzaW9uTGFiQ29udHJvbFBhbmVsIiwiQ29sbGlzaW9uTGFiVmlld1Byb3BlcnRpZXMiLCJJbnRyb0NvbnRyb2xQYW5lbCIsImNvbnN0cnVjdG9yIiwidmlld1Byb3BlcnRpZXMiLCJjaGFuZ2VJbk1vbWVudHVtVmlzaWJsZVByb3BlcnR5IiwiY2VudGVyT2ZNYXNzVmlzaWJsZVByb3BlcnR5IiwicGF0aHNWaXNpYmxlUHJvcGVydHkiLCJyZWZsZWN0aW5nQm9yZGVyUHJvcGVydHkiLCJlbGFzdGljaXR5UGVyY2VudFByb3BlcnR5IiwiYmFsbHNDb25zdGFudFNpemVQcm9wZXJ0eSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJhc3NlcnRQcm9wZXJ0eU9mIiwiaW5jbHVkZVJlZmxlY3RpbmdCb3JkZXJDaGVja2JveCIsImluY2x1ZGVQYXRoQ2hlY2tib3giLCJjaGFuZ2VJbk1vbWVudHVtQ2hlY2tib3giLCJjaGFuZ2VJbk1vbWVudHVtIiwiY29udGVudE5vZGUiLCJpbnNlcnRDaGlsZCIsImluZGV4T2ZDaGlsZCIsImNlbnRlck9mTWFzc0NoZWNrYm94IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnRyb0NvbnRyb2xQYW5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJbnRyb0NvbnRyb2xQYW5lbCBpcyBhIENvbGxpc2lvbkxhYkNvbnRyb2xQYW5lbCBzdWItdHlwZSBmb3IgdGhlICdJbnRybycgc2NyZWVuLCB3aGljaCBhcHBlYXJzIG9uIHRoZVxyXG4gKiB1cHBlci1yaWdodCBjb3JuZXIgb2YgdGhlIHNjcmVlbi5cclxuICpcclxuICogSXQgYWRkcyBhICdDaGFuZ2UgaW4gTW9tZW50dW0nIENoZWNrYm94IHRvIGFsbG93IHRoZSB1c2VyIHRvIHRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgY2hhbmdlIGluIG1vbWVudHVtIHZlY3RvcnMuXHJcbiAqIFRoZSBjaGVja2JveCBpcyBpbnNlcnRlZCByaWdodCBhYm92ZSB0aGUgJ0NlbnRlciBvZiBNYXNzJyBDaGVja2JveCBvZiB0aGUgc3VwZXItY2xhc3MuIEl0IGFsc28gcmVtb3ZlcyB0aGVcclxuICogJ1JlZmxlY3RpbmcgQm9yZGVyJyBDaGVja2JveCBhbmQgdGhlICdQYXRoJyBDaGVja2JveC5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBBc3NlcnRVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL0Fzc2VydFV0aWxzLmpzJztcclxuaW1wb3J0IGNvbGxpc2lvbkxhYiBmcm9tICcuLi8uLi9jb2xsaXNpb25MYWIuanMnO1xyXG5pbXBvcnQgQ29sbGlzaW9uTGFiU3RyaW5ncyBmcm9tICcuLi8uLi9Db2xsaXNpb25MYWJTdHJpbmdzLmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkxhYkNoZWNrYm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0NvbGxpc2lvbkxhYkNoZWNrYm94LmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkxhYkNvbnRyb2xQYW5lbCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Db2xsaXNpb25MYWJDb250cm9sUGFuZWwuanMnO1xyXG5pbXBvcnQgQ29sbGlzaW9uTGFiVmlld1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQ29sbGlzaW9uTGFiVmlld1Byb3BlcnRpZXMuanMnO1xyXG5cclxuY2xhc3MgSW50cm9Db250cm9sUGFuZWwgZXh0ZW5kcyBDb2xsaXNpb25MYWJDb250cm9sUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0NvbGxpc2lvbkxhYlZpZXdQcm9wZXJ0aWVzfSB2aWV3UHJvcGVydGllc1xyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSBjaGFuZ2VJbk1vbWVudHVtVmlzaWJsZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGNlbnRlck9mTWFzc1Zpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSBwYXRoc1Zpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSByZWZsZWN0aW5nQm9yZGVyUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxudW1iZXI+fSBlbGFzdGljaXR5UGVyY2VudFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGJhbGxzQ29uc3RhbnRTaXplUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHZpZXdQcm9wZXJ0aWVzLFxyXG4gICAgICAgICAgICAgICBjaGFuZ2VJbk1vbWVudHVtVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICBjZW50ZXJPZk1hc3NWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgICAgICAgICAgIHBhdGhzVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICByZWZsZWN0aW5nQm9yZGVyUHJvcGVydHksXHJcbiAgICAgICAgICAgICAgIGVsYXN0aWNpdHlQZXJjZW50UHJvcGVydHksXHJcbiAgICAgICAgICAgICAgIGJhbGxzQ29uc3RhbnRTaXplUHJvcGVydHksXHJcbiAgICAgICAgICAgICAgIG9wdGlvbnMgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB2aWV3UHJvcGVydGllcyBpbnN0YW5jZW9mIENvbGxpc2lvbkxhYlZpZXdQcm9wZXJ0aWVzLCBgaW52YWxpZCB2aWV3UHJvcGVydGllczogJHt2aWV3UHJvcGVydGllc31gICk7XHJcbiAgICBhc3NlcnQgJiYgQXNzZXJ0VXRpbHMuYXNzZXJ0UHJvcGVydHlPZiggY2hhbmdlSW5Nb21lbnR1bVZpc2libGVQcm9wZXJ0eSwgJ2Jvb2xlYW4nICk7XHJcbiAgICBhc3NlcnQgJiYgQXNzZXJ0VXRpbHMuYXNzZXJ0UHJvcGVydHlPZiggY2VudGVyT2ZNYXNzVmlzaWJsZVByb3BlcnR5LCAnYm9vbGVhbicgKTtcclxuICAgIGFzc2VydCAmJiBBc3NlcnRVdGlscy5hc3NlcnRQcm9wZXJ0eU9mKCBwYXRoc1Zpc2libGVQcm9wZXJ0eSwgJ2Jvb2xlYW4nICk7XHJcbiAgICBhc3NlcnQgJiYgQXNzZXJ0VXRpbHMuYXNzZXJ0UHJvcGVydHlPZiggcmVmbGVjdGluZ0JvcmRlclByb3BlcnR5LCAnYm9vbGVhbicgKTtcclxuICAgIGFzc2VydCAmJiBBc3NlcnRVdGlscy5hc3NlcnRQcm9wZXJ0eU9mKCBlbGFzdGljaXR5UGVyY2VudFByb3BlcnR5LCAnbnVtYmVyJyApO1xyXG4gICAgYXNzZXJ0ICYmIEFzc2VydFV0aWxzLmFzc2VydFByb3BlcnR5T2YoIGJhbGxzQ29uc3RhbnRTaXplUHJvcGVydHksICdib29sZWFuJyApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgaW5jbHVkZVJlZmxlY3RpbmdCb3JkZXJDaGVja2JveDogZmFsc2UsXHJcbiAgICAgIGluY2x1ZGVQYXRoQ2hlY2tib3g6IGZhbHNlXHJcblxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCB2aWV3UHJvcGVydGllcyxcclxuICAgICAgY2VudGVyT2ZNYXNzVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICBwYXRoc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgcmVmbGVjdGluZ0JvcmRlclByb3BlcnR5LFxyXG4gICAgICBlbGFzdGljaXR5UGVyY2VudFByb3BlcnR5LFxyXG4gICAgICBiYWxsc0NvbnN0YW50U2l6ZVByb3BlcnR5LFxyXG4gICAgICBvcHRpb25zICk7XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLy8gJ0NoYW5nZSBpbiBNb21lbnR1bScgdmlzaWJpbGl0eSBDaGVja2JveC5cclxuICAgIGNvbnN0IGNoYW5nZUluTW9tZW50dW1DaGVja2JveCA9IG5ldyBDb2xsaXNpb25MYWJDaGVja2JveCggY2hhbmdlSW5Nb21lbnR1bVZpc2libGVQcm9wZXJ0eSwgQ29sbGlzaW9uTGFiU3RyaW5ncy5jaGFuZ2VJbk1vbWVudHVtICk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBDaGFuZ2UgaW4gTW9tZW50dW0gQ2hlY2tib3ggYmVmb3JlIHRoZSBDZW50ZXIgb2YgTWFzcyBDaGVja2JveC5cclxuICAgIHRoaXMuY29udGVudE5vZGUuaW5zZXJ0Q2hpbGQoIHRoaXMuY29udGVudE5vZGUuaW5kZXhPZkNoaWxkKCB0aGlzLmNlbnRlck9mTWFzc0NoZWNrYm94ICksIGNoYW5nZUluTW9tZW50dW1DaGVja2JveCApO1xyXG4gIH1cclxufVxyXG5cclxuY29sbGlzaW9uTGFiLnJlZ2lzdGVyKCAnSW50cm9Db250cm9sUGFuZWwnLCBJbnRyb0NvbnRyb2xQYW5lbCApO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRyb0NvbnRyb2xQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLDBDQUEwQztBQUNsRSxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLG1CQUFtQixNQUFNLDhCQUE4QjtBQUM5RCxPQUFPQyxvQkFBb0IsTUFBTSwyQ0FBMkM7QUFDNUUsT0FBT0Msd0JBQXdCLE1BQU0sK0NBQStDO0FBQ3BGLE9BQU9DLDBCQUEwQixNQUFNLGlEQUFpRDtBQUV4RixNQUFNQyxpQkFBaUIsU0FBU0Ysd0JBQXdCLENBQUM7RUFFdkQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsY0FBYyxFQUNkQywrQkFBK0IsRUFDL0JDLDJCQUEyQixFQUMzQkMsb0JBQW9CLEVBQ3BCQyx3QkFBd0IsRUFDeEJDLHlCQUF5QixFQUN6QkMseUJBQXlCLEVBQ3pCQyxPQUFPLEVBQUc7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFUixjQUFjLFlBQVlILDBCQUEwQixFQUFHLDJCQUEwQkcsY0FBZSxFQUFFLENBQUM7SUFDckhRLE1BQU0sSUFBSWhCLFdBQVcsQ0FBQ2lCLGdCQUFnQixDQUFFUiwrQkFBK0IsRUFBRSxTQUFVLENBQUM7SUFDcEZPLE1BQU0sSUFBSWhCLFdBQVcsQ0FBQ2lCLGdCQUFnQixDQUFFUCwyQkFBMkIsRUFBRSxTQUFVLENBQUM7SUFDaEZNLE1BQU0sSUFBSWhCLFdBQVcsQ0FBQ2lCLGdCQUFnQixDQUFFTixvQkFBb0IsRUFBRSxTQUFVLENBQUM7SUFDekVLLE1BQU0sSUFBSWhCLFdBQVcsQ0FBQ2lCLGdCQUFnQixDQUFFTCx3QkFBd0IsRUFBRSxTQUFVLENBQUM7SUFDN0VJLE1BQU0sSUFBSWhCLFdBQVcsQ0FBQ2lCLGdCQUFnQixDQUFFSix5QkFBeUIsRUFBRSxRQUFTLENBQUM7SUFDN0VHLE1BQU0sSUFBSWhCLFdBQVcsQ0FBQ2lCLGdCQUFnQixDQUFFSCx5QkFBeUIsRUFBRSxTQUFVLENBQUM7SUFFOUVDLE9BQU8sR0FBR2hCLEtBQUssQ0FBRTtNQUVmbUIsK0JBQStCLEVBQUUsS0FBSztNQUN0Q0MsbUJBQW1CLEVBQUU7SUFFdkIsQ0FBQyxFQUFFSixPQUFRLENBQUM7SUFFWixLQUFLLENBQUVQLGNBQWMsRUFDbkJFLDJCQUEyQixFQUMzQkMsb0JBQW9CLEVBQ3BCQyx3QkFBd0IsRUFDeEJDLHlCQUF5QixFQUN6QkMseUJBQXlCLEVBQ3pCQyxPQUFRLENBQUM7O0lBRVg7O0lBRUE7SUFDQSxNQUFNSyx3QkFBd0IsR0FBRyxJQUFJakIsb0JBQW9CLENBQUVNLCtCQUErQixFQUFFUCxtQkFBbUIsQ0FBQ21CLGdCQUFpQixDQUFDOztJQUVsSTtJQUNBLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxXQUFXLENBQUUsSUFBSSxDQUFDRCxXQUFXLENBQUNFLFlBQVksQ0FBRSxJQUFJLENBQUNDLG9CQUFxQixDQUFDLEVBQUVMLHdCQUF5QixDQUFDO0VBQ3RIO0FBQ0Y7QUFFQW5CLFlBQVksQ0FBQ3lCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRXBCLGlCQUFrQixDQUFDO0FBQy9ELGVBQWVBLGlCQUFpQiJ9