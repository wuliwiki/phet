// Copyright 2020, University of Colorado Boulder

/**
 * IntroPlayArea is a PlayArea sub-type for the 'Intro' screen.
 *
 * Although it adds no additional functionality to the super-class, it is added for symmetry within the screen-specific
 * sub-types of  PlayArea. It is responsible for providing a correct configuration of the super-class for the 'Intro'
 * screen, which includes specifying the dimension, initial Property values, and disabling Properties.
 *
 * @author Brandon Li
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import merge from '../../../../phet-core/js/merge.js';
import collisionLab from '../../collisionLab.js';
import CollisionLabConstants from '../../common/CollisionLabConstants.js';
import PlayArea from '../../common/model/PlayArea.js';
class IntroPlayArea extends PlayArea {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      isGridVisibleInitially: true,
      reflectingBorderInitially: false,
      bounds: new Bounds2(PlayArea.DEFAULT_BOUNDS.left, -CollisionLabConstants.PLAY_AREA_1D_HEIGHT / 2, PlayArea.DEFAULT_BOUNDS.right, CollisionLabConstants.PLAY_AREA_1D_HEIGHT / 2)
    }, options);
    super(PlayArea.Dimension.ONE, options);

    //----------------------------------------------------------------------------------------

    // Verify that Grids are always visible for the 'Intro' screen.
    assert && this.gridVisibleProperty.link(gridVisible => {
      assert(gridVisible === true, 'Grids must be visible in the Intro screen.');
    });

    // Verify that the border never reflects for the 'Intro' screen.
    assert && this.reflectingBorderProperty.link(reflectingBorder => {
      assert(reflectingBorder === false, 'No reflecting borders for the Intro screen.');
    });
  }
}
collisionLab.register('IntroPlayArea', IntroPlayArea);
export default IntroPlayArea;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwibWVyZ2UiLCJjb2xsaXNpb25MYWIiLCJDb2xsaXNpb25MYWJDb25zdGFudHMiLCJQbGF5QXJlYSIsIkludHJvUGxheUFyZWEiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJpc0dyaWRWaXNpYmxlSW5pdGlhbGx5IiwicmVmbGVjdGluZ0JvcmRlckluaXRpYWxseSIsImJvdW5kcyIsIkRFRkFVTFRfQk9VTkRTIiwibGVmdCIsIlBMQVlfQVJFQV8xRF9IRUlHSFQiLCJyaWdodCIsIkRpbWVuc2lvbiIsIk9ORSIsImFzc2VydCIsImdyaWRWaXNpYmxlUHJvcGVydHkiLCJsaW5rIiwiZ3JpZFZpc2libGUiLCJyZWZsZWN0aW5nQm9yZGVyUHJvcGVydHkiLCJyZWZsZWN0aW5nQm9yZGVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnRyb1BsYXlBcmVhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJbnRyb1BsYXlBcmVhIGlzIGEgUGxheUFyZWEgc3ViLXR5cGUgZm9yIHRoZSAnSW50cm8nIHNjcmVlbi5cclxuICpcclxuICogQWx0aG91Z2ggaXQgYWRkcyBubyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgdG8gdGhlIHN1cGVyLWNsYXNzLCBpdCBpcyBhZGRlZCBmb3Igc3ltbWV0cnkgd2l0aGluIHRoZSBzY3JlZW4tc3BlY2lmaWNcclxuICogc3ViLXR5cGVzIG9mICBQbGF5QXJlYS4gSXQgaXMgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyBhIGNvcnJlY3QgY29uZmlndXJhdGlvbiBvZiB0aGUgc3VwZXItY2xhc3MgZm9yIHRoZSAnSW50cm8nXHJcbiAqIHNjcmVlbiwgd2hpY2ggaW5jbHVkZXMgc3BlY2lmeWluZyB0aGUgZGltZW5zaW9uLCBpbml0aWFsIFByb3BlcnR5IHZhbHVlcywgYW5kIGRpc2FibGluZyBQcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgY29sbGlzaW9uTGFiIGZyb20gJy4uLy4uL2NvbGxpc2lvbkxhYi5qcyc7XHJcbmltcG9ydCBDb2xsaXNpb25MYWJDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0NvbGxpc2lvbkxhYkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBQbGF5QXJlYSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUGxheUFyZWEuanMnO1xyXG5cclxuY2xhc3MgSW50cm9QbGF5QXJlYSBleHRlbmRzIFBsYXlBcmVhIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgaXNHcmlkVmlzaWJsZUluaXRpYWxseTogdHJ1ZSxcclxuICAgICAgcmVmbGVjdGluZ0JvcmRlckluaXRpYWxseTogZmFsc2UsXHJcbiAgICAgIGJvdW5kczogbmV3IEJvdW5kczIoXHJcbiAgICAgICAgUGxheUFyZWEuREVGQVVMVF9CT1VORFMubGVmdCxcclxuICAgICAgICAtQ29sbGlzaW9uTGFiQ29uc3RhbnRzLlBMQVlfQVJFQV8xRF9IRUlHSFQgLyAyLFxyXG4gICAgICAgIFBsYXlBcmVhLkRFRkFVTFRfQk9VTkRTLnJpZ2h0LFxyXG4gICAgICAgIENvbGxpc2lvbkxhYkNvbnN0YW50cy5QTEFZX0FSRUFfMURfSEVJR0hUIC8gMlxyXG4gICAgICApXHJcblxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBQbGF5QXJlYS5EaW1lbnNpb24uT05FLCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLy8gVmVyaWZ5IHRoYXQgR3JpZHMgYXJlIGFsd2F5cyB2aXNpYmxlIGZvciB0aGUgJ0ludHJvJyBzY3JlZW4uXHJcbiAgICBhc3NlcnQgJiYgdGhpcy5ncmlkVmlzaWJsZVByb3BlcnR5LmxpbmsoIGdyaWRWaXNpYmxlID0+IHtcclxuICAgICAgYXNzZXJ0KCBncmlkVmlzaWJsZSA9PT0gdHJ1ZSwgJ0dyaWRzIG11c3QgYmUgdmlzaWJsZSBpbiB0aGUgSW50cm8gc2NyZWVuLicgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgYm9yZGVyIG5ldmVyIHJlZmxlY3RzIGZvciB0aGUgJ0ludHJvJyBzY3JlZW4uXHJcbiAgICBhc3NlcnQgJiYgdGhpcy5yZWZsZWN0aW5nQm9yZGVyUHJvcGVydHkubGluayggcmVmbGVjdGluZ0JvcmRlciA9PiB7XHJcbiAgICAgIGFzc2VydCggcmVmbGVjdGluZ0JvcmRlciA9PT0gZmFsc2UsICdObyByZWZsZWN0aW5nIGJvcmRlcnMgZm9yIHRoZSBJbnRybyBzY3JlZW4uJyApO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY29sbGlzaW9uTGFiLnJlZ2lzdGVyKCAnSW50cm9QbGF5QXJlYScsIEludHJvUGxheUFyZWEgKTtcclxuZXhwb3J0IGRlZmF1bHQgSW50cm9QbGF5QXJlYTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxxQkFBcUIsTUFBTSx1Q0FBdUM7QUFDekUsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUVyRCxNQUFNQyxhQUFhLFNBQVNELFFBQVEsQ0FBQztFQUVuQztBQUNGO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsT0FBTyxFQUFHO0lBRXJCQSxPQUFPLEdBQUdOLEtBQUssQ0FBRTtNQUVmTyxzQkFBc0IsRUFBRSxJQUFJO01BQzVCQyx5QkFBeUIsRUFBRSxLQUFLO01BQ2hDQyxNQUFNLEVBQUUsSUFBSVYsT0FBTyxDQUNqQkksUUFBUSxDQUFDTyxjQUFjLENBQUNDLElBQUksRUFDNUIsQ0FBQ1QscUJBQXFCLENBQUNVLG1CQUFtQixHQUFHLENBQUMsRUFDOUNULFFBQVEsQ0FBQ08sY0FBYyxDQUFDRyxLQUFLLEVBQzdCWCxxQkFBcUIsQ0FBQ1UsbUJBQW1CLEdBQUcsQ0FDOUM7SUFFRixDQUFDLEVBQUVOLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUgsUUFBUSxDQUFDVyxTQUFTLENBQUNDLEdBQUcsRUFBRVQsT0FBUSxDQUFDOztJQUV4Qzs7SUFFQTtJQUNBVSxNQUFNLElBQUksSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0MsSUFBSSxDQUFFQyxXQUFXLElBQUk7TUFDdERILE1BQU0sQ0FBRUcsV0FBVyxLQUFLLElBQUksRUFBRSw0Q0FBNkMsQ0FBQztJQUM5RSxDQUFFLENBQUM7O0lBRUg7SUFDQUgsTUFBTSxJQUFJLElBQUksQ0FBQ0ksd0JBQXdCLENBQUNGLElBQUksQ0FBRUcsZ0JBQWdCLElBQUk7TUFDaEVMLE1BQU0sQ0FBRUssZ0JBQWdCLEtBQUssS0FBSyxFQUFFLDZDQUE4QyxDQUFDO0lBQ3JGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXBCLFlBQVksQ0FBQ3FCLFFBQVEsQ0FBRSxlQUFlLEVBQUVsQixhQUFjLENBQUM7QUFDdkQsZUFBZUEsYUFBYSJ9