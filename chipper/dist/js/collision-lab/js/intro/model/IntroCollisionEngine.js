// Copyright 2020, University of Colorado Boulder

/**
 * IntroCollisionEngine is a CollisionEngine sub-type for the 'Intro' screen.
 *
 * For the 'Intro' screen, the 'Change in Momentum' text needs to be positioned above the exact collision point of the 2
 * balls. Thus, IntroCollisionEngine is responsible for computing the exact contact-point of the 2 Balls of the 'Intro'
 * screen. The contact-point is passed to the IntroBallSystem, which will trigger changes in the change in momentum
 * opacity over time. See https://github.com/phetsims/collision-lab/issues/85. See IntroBallSystem.js and
 * CollisionEngine.js for complete background.
 *
 * @author Brandon Li
 */

import collisionLab from '../../collisionLab.js';
import Ball from '../../common/model/Ball.js';
import Collision from '../../common/model/Collision.js';
import CollisionEngine from '../../common/model/CollisionEngine.js';
class IntroCollisionEngine extends CollisionEngine {
  /**
   * Adds the functionality of computing the exact point the Balls collided and passing this information to the
   * IntroBallSystem, if the 'Change in Momentum' vectors are visible.
   *
   * @protected
   * @override
   *
   * @param {Collision} collision - the Collision instance.
   * @param {number} dt
   */
  handleCollision(collision, dt) {
    assert && assert(collision instanceof Collision, `invalid collision: ${collision}`);
    assert && assert(collision.body1 instanceof Ball && collision.body2 instanceof Ball, 'only ball-ball for intro');

    // Forward collision response to the super-class.
    super.handleCollision(collision, dt);

    // Only register the 'Change in Momentum' contact point if the 'Change in Momentum' checkbox is checked.
    if (this.ballSystem.changeInMomentumVisibleProperty.value) {
      // Reference the deltaR vector, which points to the center of body2 when positioned at the center of body2.
      const deltaR = collision.body2.positionProperty.value.minus(collision.body1.positionProperty.value);

      // The deltaR vector points in the direction of body2. So we set the magnitude to the radius of body1 and add it
      // to the center colliding position of body1 to get the collision-point.
      const contactPoint = deltaR.setMagnitude(collision.body1.radiusProperty.value).add(collision.body1.positionProperty.value);

      // Pass the calculated information to the IntroBallSystem.
      this.ballSystem.registerChangeInMomentumCollision(contactPoint, collision.time);
    }
  }
}
collisionLab.register('IntroCollisionEngine', IntroCollisionEngine);
export default IntroCollisionEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb2xsaXNpb25MYWIiLCJCYWxsIiwiQ29sbGlzaW9uIiwiQ29sbGlzaW9uRW5naW5lIiwiSW50cm9Db2xsaXNpb25FbmdpbmUiLCJoYW5kbGVDb2xsaXNpb24iLCJjb2xsaXNpb24iLCJkdCIsImFzc2VydCIsImJvZHkxIiwiYm9keTIiLCJiYWxsU3lzdGVtIiwiY2hhbmdlSW5Nb21lbnR1bVZpc2libGVQcm9wZXJ0eSIsInZhbHVlIiwiZGVsdGFSIiwicG9zaXRpb25Qcm9wZXJ0eSIsIm1pbnVzIiwiY29udGFjdFBvaW50Iiwic2V0TWFnbml0dWRlIiwicmFkaXVzUHJvcGVydHkiLCJhZGQiLCJyZWdpc3RlckNoYW5nZUluTW9tZW50dW1Db2xsaXNpb24iLCJ0aW1lIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnRyb0NvbGxpc2lvbkVuZ2luZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSW50cm9Db2xsaXNpb25FbmdpbmUgaXMgYSBDb2xsaXNpb25FbmdpbmUgc3ViLXR5cGUgZm9yIHRoZSAnSW50cm8nIHNjcmVlbi5cclxuICpcclxuICogRm9yIHRoZSAnSW50cm8nIHNjcmVlbiwgdGhlICdDaGFuZ2UgaW4gTW9tZW50dW0nIHRleHQgbmVlZHMgdG8gYmUgcG9zaXRpb25lZCBhYm92ZSB0aGUgZXhhY3QgY29sbGlzaW9uIHBvaW50IG9mIHRoZSAyXHJcbiAqIGJhbGxzLiBUaHVzLCBJbnRyb0NvbGxpc2lvbkVuZ2luZSBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0aW5nIHRoZSBleGFjdCBjb250YWN0LXBvaW50IG9mIHRoZSAyIEJhbGxzIG9mIHRoZSAnSW50cm8nXHJcbiAqIHNjcmVlbi4gVGhlIGNvbnRhY3QtcG9pbnQgaXMgcGFzc2VkIHRvIHRoZSBJbnRyb0JhbGxTeXN0ZW0sIHdoaWNoIHdpbGwgdHJpZ2dlciBjaGFuZ2VzIGluIHRoZSBjaGFuZ2UgaW4gbW9tZW50dW1cclxuICogb3BhY2l0eSBvdmVyIHRpbWUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY29sbGlzaW9uLWxhYi9pc3N1ZXMvODUuIFNlZSBJbnRyb0JhbGxTeXN0ZW0uanMgYW5kXHJcbiAqIENvbGxpc2lvbkVuZ2luZS5qcyBmb3IgY29tcGxldGUgYmFja2dyb3VuZC5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNvbGxpc2lvbkxhYiBmcm9tICcuLi8uLi9jb2xsaXNpb25MYWIuanMnO1xyXG5pbXBvcnQgQmFsbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQmFsbC5qcyc7XHJcbmltcG9ydCBDb2xsaXNpb24gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0NvbGxpc2lvbi5qcyc7XHJcbmltcG9ydCBDb2xsaXNpb25FbmdpbmUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0NvbGxpc2lvbkVuZ2luZS5qcyc7XHJcblxyXG5jbGFzcyBJbnRyb0NvbGxpc2lvbkVuZ2luZSBleHRlbmRzIENvbGxpc2lvbkVuZ2luZSB7XHJcblxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIGNvbXB1dGluZyB0aGUgZXhhY3QgcG9pbnQgdGhlIEJhbGxzIGNvbGxpZGVkIGFuZCBwYXNzaW5nIHRoaXMgaW5mb3JtYXRpb24gdG8gdGhlXHJcbiAgICogSW50cm9CYWxsU3lzdGVtLCBpZiB0aGUgJ0NoYW5nZSBpbiBNb21lbnR1bScgdmVjdG9ycyBhcmUgdmlzaWJsZS5cclxuICAgKlxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q29sbGlzaW9ufSBjb2xsaXNpb24gLSB0aGUgQ29sbGlzaW9uIGluc3RhbmNlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdFxyXG4gICAqL1xyXG4gIGhhbmRsZUNvbGxpc2lvbiggY29sbGlzaW9uLCBkdCApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvbGxpc2lvbiBpbnN0YW5jZW9mIENvbGxpc2lvbiwgYGludmFsaWQgY29sbGlzaW9uOiAke2NvbGxpc2lvbn1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb2xsaXNpb24uYm9keTEgaW5zdGFuY2VvZiBCYWxsICYmIGNvbGxpc2lvbi5ib2R5MiBpbnN0YW5jZW9mIEJhbGwsICdvbmx5IGJhbGwtYmFsbCBmb3IgaW50cm8nICk7XHJcblxyXG4gICAgLy8gRm9yd2FyZCBjb2xsaXNpb24gcmVzcG9uc2UgdG8gdGhlIHN1cGVyLWNsYXNzLlxyXG4gICAgc3VwZXIuaGFuZGxlQ29sbGlzaW9uKCBjb2xsaXNpb24sIGR0ICk7XHJcblxyXG4gICAgLy8gT25seSByZWdpc3RlciB0aGUgJ0NoYW5nZSBpbiBNb21lbnR1bScgY29udGFjdCBwb2ludCBpZiB0aGUgJ0NoYW5nZSBpbiBNb21lbnR1bScgY2hlY2tib3ggaXMgY2hlY2tlZC5cclxuICAgIGlmICggdGhpcy5iYWxsU3lzdGVtLmNoYW5nZUluTW9tZW50dW1WaXNpYmxlUHJvcGVydHkudmFsdWUgKSB7XHJcblxyXG4gICAgICAvLyBSZWZlcmVuY2UgdGhlIGRlbHRhUiB2ZWN0b3IsIHdoaWNoIHBvaW50cyB0byB0aGUgY2VudGVyIG9mIGJvZHkyIHdoZW4gcG9zaXRpb25lZCBhdCB0aGUgY2VudGVyIG9mIGJvZHkyLlxyXG4gICAgICBjb25zdCBkZWx0YVIgPSBjb2xsaXNpb24uYm9keTIucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS5taW51cyggY29sbGlzaW9uLmJvZHkxLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgKTtcclxuXHJcbiAgICAgIC8vIFRoZSBkZWx0YVIgdmVjdG9yIHBvaW50cyBpbiB0aGUgZGlyZWN0aW9uIG9mIGJvZHkyLiBTbyB3ZSBzZXQgdGhlIG1hZ25pdHVkZSB0byB0aGUgcmFkaXVzIG9mIGJvZHkxIGFuZCBhZGQgaXRcclxuICAgICAgLy8gdG8gdGhlIGNlbnRlciBjb2xsaWRpbmcgcG9zaXRpb24gb2YgYm9keTEgdG8gZ2V0IHRoZSBjb2xsaXNpb24tcG9pbnQuXHJcbiAgICAgIGNvbnN0IGNvbnRhY3RQb2ludCA9IGRlbHRhUi5zZXRNYWduaXR1ZGUoIGNvbGxpc2lvbi5ib2R5MS5yYWRpdXNQcm9wZXJ0eS52YWx1ZSApLmFkZCggY29sbGlzaW9uLmJvZHkxLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgKTtcclxuXHJcbiAgICAgIC8vIFBhc3MgdGhlIGNhbGN1bGF0ZWQgaW5mb3JtYXRpb24gdG8gdGhlIEludHJvQmFsbFN5c3RlbS5cclxuICAgICAgdGhpcy5iYWxsU3lzdGVtLnJlZ2lzdGVyQ2hhbmdlSW5Nb21lbnR1bUNvbGxpc2lvbiggY29udGFjdFBvaW50LCBjb2xsaXNpb24udGltZSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmNvbGxpc2lvbkxhYi5yZWdpc3RlciggJ0ludHJvQ29sbGlzaW9uRW5naW5lJywgSW50cm9Db2xsaXNpb25FbmdpbmUgKTtcclxuZXhwb3J0IGRlZmF1bHQgSW50cm9Db2xsaXNpb25FbmdpbmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsSUFBSSxNQUFNLDRCQUE0QjtBQUM3QyxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELE9BQU9DLGVBQWUsTUFBTSx1Q0FBdUM7QUFFbkUsTUFBTUMsb0JBQW9CLFNBQVNELGVBQWUsQ0FBQztFQUdqRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxlQUFlQSxDQUFFQyxTQUFTLEVBQUVDLEVBQUUsRUFBRztJQUMvQkMsTUFBTSxJQUFJQSxNQUFNLENBQUVGLFNBQVMsWUFBWUosU0FBUyxFQUFHLHNCQUFxQkksU0FBVSxFQUFFLENBQUM7SUFDckZFLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixTQUFTLENBQUNHLEtBQUssWUFBWVIsSUFBSSxJQUFJSyxTQUFTLENBQUNJLEtBQUssWUFBWVQsSUFBSSxFQUFFLDBCQUEyQixDQUFDOztJQUVsSDtJQUNBLEtBQUssQ0FBQ0ksZUFBZSxDQUFFQyxTQUFTLEVBQUVDLEVBQUcsQ0FBQzs7SUFFdEM7SUFDQSxJQUFLLElBQUksQ0FBQ0ksVUFBVSxDQUFDQywrQkFBK0IsQ0FBQ0MsS0FBSyxFQUFHO01BRTNEO01BQ0EsTUFBTUMsTUFBTSxHQUFHUixTQUFTLENBQUNJLEtBQUssQ0FBQ0ssZ0JBQWdCLENBQUNGLEtBQUssQ0FBQ0csS0FBSyxDQUFFVixTQUFTLENBQUNHLEtBQUssQ0FBQ00sZ0JBQWdCLENBQUNGLEtBQU0sQ0FBQzs7TUFFckc7TUFDQTtNQUNBLE1BQU1JLFlBQVksR0FBR0gsTUFBTSxDQUFDSSxZQUFZLENBQUVaLFNBQVMsQ0FBQ0csS0FBSyxDQUFDVSxjQUFjLENBQUNOLEtBQU0sQ0FBQyxDQUFDTyxHQUFHLENBQUVkLFNBQVMsQ0FBQ0csS0FBSyxDQUFDTSxnQkFBZ0IsQ0FBQ0YsS0FBTSxDQUFDOztNQUU5SDtNQUNBLElBQUksQ0FBQ0YsVUFBVSxDQUFDVSxpQ0FBaUMsQ0FBRUosWUFBWSxFQUFFWCxTQUFTLENBQUNnQixJQUFLLENBQUM7SUFDbkY7RUFDRjtBQUVGO0FBRUF0QixZQUFZLENBQUN1QixRQUFRLENBQUUsc0JBQXNCLEVBQUVuQixvQkFBcUIsQ0FBQztBQUNyRSxlQUFlQSxvQkFBb0IifQ==