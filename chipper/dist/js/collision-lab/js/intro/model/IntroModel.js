// Copyright 2019-2020, University of Colorado Boulder

/**
 * Top level model for the 'Intro' screen.
 *
 * @author Brandon Li
 */

import collisionLab from '../../collisionLab.js';
import CollisionLabModel from '../../common/model/CollisionLabModel.js';
import IntroBallSystem from './IntroBallSystem.js';
import IntroCollisionEngine from './IntroCollisionEngine.js';
import IntroPlayArea from './IntroPlayArea.js';
class IntroModel extends CollisionLabModel {
  /**
   * Creates the PlayArea for the 'Intro' screen, which uses a screen-specific sub-type of PlayArea. Called in the
   * constructor of the super-class, which uses the Factory Method Pattern.
   * @override
   * @protected
   *
   * @returns {IntroPlayArea}
   */
  createPlayArea() {
    return new IntroPlayArea();
  }

  /**
   * Creates the BallSystem for the 'Intro' screen, which uses a screen-specific sub-type of BallSystem. Called in
   * the constructor of the super-class, which uses the Factory Method Pattern.
   * @override
   * @protected
   *
   * @param {IntroPlayArea} playArea
   * @returns {IntroBallSystem}
   */
  createBallSystem(playArea) {
    assert && assert(playArea instanceof IntroPlayArea, `invalid playArea: ${playArea}`);
    return new IntroBallSystem(playArea, this.elapsedTimeProperty);
  }

  /**
   * Creates the CollisionEngine for the 'Intro' screen, which uses a screen-specific sub-type of CollisionEngine.
   * Called in the constructor of the super-class, which uses the Factory Method Pattern.
   * @override
   * @protected
   *
   * @param {IntroPlayArea} playArea
   * @param {IntroBallSystem} ballSystem
   * @returns {IntroCollisionEngine}
   */
  createCollisionEngine(playArea, ballSystem) {
    assert && assert(playArea instanceof IntroPlayArea, `invalid playArea: ${playArea}`);
    assert && assert(ballSystem instanceof IntroBallSystem, `invalid ballSystem: ${ballSystem}`);
    return new IntroCollisionEngine(playArea, ballSystem);
  }
}
collisionLab.register('IntroModel', IntroModel);
export default IntroModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb2xsaXNpb25MYWIiLCJDb2xsaXNpb25MYWJNb2RlbCIsIkludHJvQmFsbFN5c3RlbSIsIkludHJvQ29sbGlzaW9uRW5naW5lIiwiSW50cm9QbGF5QXJlYSIsIkludHJvTW9kZWwiLCJjcmVhdGVQbGF5QXJlYSIsImNyZWF0ZUJhbGxTeXN0ZW0iLCJwbGF5QXJlYSIsImFzc2VydCIsImVsYXBzZWRUaW1lUHJvcGVydHkiLCJjcmVhdGVDb2xsaXNpb25FbmdpbmUiLCJiYWxsU3lzdGVtIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnRyb01vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRvcCBsZXZlbCBtb2RlbCBmb3IgdGhlICdJbnRybycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgY29sbGlzaW9uTGFiIGZyb20gJy4uLy4uL2NvbGxpc2lvbkxhYi5qcyc7XHJcbmltcG9ydCBDb2xsaXNpb25MYWJNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ29sbGlzaW9uTGFiTW9kZWwuanMnO1xyXG5pbXBvcnQgSW50cm9CYWxsU3lzdGVtIGZyb20gJy4vSW50cm9CYWxsU3lzdGVtLmpzJztcclxuaW1wb3J0IEludHJvQ29sbGlzaW9uRW5naW5lIGZyb20gJy4vSW50cm9Db2xsaXNpb25FbmdpbmUuanMnO1xyXG5pbXBvcnQgSW50cm9QbGF5QXJlYSBmcm9tICcuL0ludHJvUGxheUFyZWEuanMnO1xyXG5cclxuY2xhc3MgSW50cm9Nb2RlbCBleHRlbmRzIENvbGxpc2lvbkxhYk1vZGVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgUGxheUFyZWEgZm9yIHRoZSAnSW50cm8nIHNjcmVlbiwgd2hpY2ggdXNlcyBhIHNjcmVlbi1zcGVjaWZpYyBzdWItdHlwZSBvZiBQbGF5QXJlYS4gQ2FsbGVkIGluIHRoZVxyXG4gICAqIGNvbnN0cnVjdG9yIG9mIHRoZSBzdXBlci1jbGFzcywgd2hpY2ggdXNlcyB0aGUgRmFjdG9yeSBNZXRob2QgUGF0dGVybi5cclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7SW50cm9QbGF5QXJlYX1cclxuICAgKi9cclxuICBjcmVhdGVQbGF5QXJlYSgpIHtcclxuICAgIHJldHVybiBuZXcgSW50cm9QbGF5QXJlYSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgQmFsbFN5c3RlbSBmb3IgdGhlICdJbnRybycgc2NyZWVuLCB3aGljaCB1c2VzIGEgc2NyZWVuLXNwZWNpZmljIHN1Yi10eXBlIG9mIEJhbGxTeXN0ZW0uIENhbGxlZCBpblxyXG4gICAqIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgc3VwZXItY2xhc3MsIHdoaWNoIHVzZXMgdGhlIEZhY3RvcnkgTWV0aG9kIFBhdHRlcm4uXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtJbnRyb1BsYXlBcmVhfSBwbGF5QXJlYVxyXG4gICAqIEByZXR1cm5zIHtJbnRyb0JhbGxTeXN0ZW19XHJcbiAgICovXHJcbiAgY3JlYXRlQmFsbFN5c3RlbSggcGxheUFyZWEgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBwbGF5QXJlYSBpbnN0YW5jZW9mIEludHJvUGxheUFyZWEsIGBpbnZhbGlkIHBsYXlBcmVhOiAke3BsYXlBcmVhfWAgKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IEludHJvQmFsbFN5c3RlbSggcGxheUFyZWEsIHRoaXMuZWxhcHNlZFRpbWVQcm9wZXJ0eSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgQ29sbGlzaW9uRW5naW5lIGZvciB0aGUgJ0ludHJvJyBzY3JlZW4sIHdoaWNoIHVzZXMgYSBzY3JlZW4tc3BlY2lmaWMgc3ViLXR5cGUgb2YgQ29sbGlzaW9uRW5naW5lLlxyXG4gICAqIENhbGxlZCBpbiB0aGUgY29uc3RydWN0b3Igb2YgdGhlIHN1cGVyLWNsYXNzLCB3aGljaCB1c2VzIHRoZSBGYWN0b3J5IE1ldGhvZCBQYXR0ZXJuLlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SW50cm9QbGF5QXJlYX0gcGxheUFyZWFcclxuICAgKiBAcGFyYW0ge0ludHJvQmFsbFN5c3RlbX0gYmFsbFN5c3RlbVxyXG4gICAqIEByZXR1cm5zIHtJbnRyb0NvbGxpc2lvbkVuZ2luZX1cclxuICAgKi9cclxuICBjcmVhdGVDb2xsaXNpb25FbmdpbmUoIHBsYXlBcmVhLCBiYWxsU3lzdGVtICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggcGxheUFyZWEgaW5zdGFuY2VvZiBJbnRyb1BsYXlBcmVhLCBgaW52YWxpZCBwbGF5QXJlYTogJHtwbGF5QXJlYX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBiYWxsU3lzdGVtIGluc3RhbmNlb2YgSW50cm9CYWxsU3lzdGVtLCBgaW52YWxpZCBiYWxsU3lzdGVtOiAke2JhbGxTeXN0ZW19YCApO1xyXG5cclxuICAgIHJldHVybiBuZXcgSW50cm9Db2xsaXNpb25FbmdpbmUoIHBsYXlBcmVhLCBiYWxsU3lzdGVtICk7XHJcbiAgfVxyXG59XHJcblxyXG5jb2xsaXNpb25MYWIucmVnaXN0ZXIoICdJbnRyb01vZGVsJywgSW50cm9Nb2RlbCApO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRyb01vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLGlCQUFpQixNQUFNLHlDQUF5QztBQUN2RSxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLG9CQUFvQixNQUFNLDJCQUEyQjtBQUM1RCxPQUFPQyxhQUFhLE1BQU0sb0JBQW9CO0FBRTlDLE1BQU1DLFVBQVUsU0FBU0osaUJBQWlCLENBQUM7RUFFekM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSyxjQUFjQSxDQUFBLEVBQUc7SUFDZixPQUFPLElBQUlGLGFBQWEsQ0FBQyxDQUFDO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxnQkFBZ0JBLENBQUVDLFFBQVEsRUFBRztJQUMzQkMsTUFBTSxJQUFJQSxNQUFNLENBQUVELFFBQVEsWUFBWUosYUFBYSxFQUFHLHFCQUFvQkksUUFBUyxFQUFFLENBQUM7SUFFdEYsT0FBTyxJQUFJTixlQUFlLENBQUVNLFFBQVEsRUFBRSxJQUFJLENBQUNFLG1CQUFvQixDQUFDO0VBQ2xFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLHFCQUFxQkEsQ0FBRUgsUUFBUSxFQUFFSSxVQUFVLEVBQUc7SUFDNUNILE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxRQUFRLFlBQVlKLGFBQWEsRUFBRyxxQkFBb0JJLFFBQVMsRUFBRSxDQUFDO0lBQ3RGQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUcsVUFBVSxZQUFZVixlQUFlLEVBQUcsdUJBQXNCVSxVQUFXLEVBQUUsQ0FBQztJQUU5RixPQUFPLElBQUlULG9CQUFvQixDQUFFSyxRQUFRLEVBQUVJLFVBQVcsQ0FBQztFQUN6RDtBQUNGO0FBRUFaLFlBQVksQ0FBQ2EsUUFBUSxDQUFFLFlBQVksRUFBRVIsVUFBVyxDQUFDO0FBQ2pELGVBQWVBLFVBQVUifQ==