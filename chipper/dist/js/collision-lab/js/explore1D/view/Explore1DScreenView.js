// Copyright 2019-2020, University of Colorado Boulder

/**
 * Top level view for the 'Intro' screen.
 *
 * @author BrandonLi
 */

import merge from '../../../../phet-core/js/merge.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import collisionLab from '../../collisionLab.js';
import CollisionLabConstants from '../../common/CollisionLabConstants.js';
import BallSystemNode from '../../common/view/BallSystemNode.js';
import CollisionLabControlPanel from '../../common/view/CollisionLabControlPanel.js';
import CollisionLabScreenView from '../../common/view/CollisionLabScreenView.js';
import CollisionLabViewProperties from '../../common/view/CollisionLabViewProperties.js';
import Explore1DModel from '../model/Explore1DModel.js';
class Explore1DScreenView extends CollisionLabScreenView {
  /**
   * @param {Explore1DModel} model
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(model, tandem, options) {
    assert && assert(model instanceof Explore1DModel, `invalid model: ${model}`);
    assert && assert(tandem instanceof Tandem, `invalid tandem: ${tandem}`);
    options = merge({
      playAreaTop: CollisionLabConstants.PLAY_AREA_VIEW_TOP_1D,
      playAreaTopRightControlsOptions: {
        includeGridCheckbox: false
      }
    }, options);
    super(model, tandem, options);
  }

  /**
   * Creates the CollisionLabControlPanel for the 'Explore 1D' screen. Called in the constructor of the super-class.
   *
   * @override
   * @protected
   * @param {CollisionLabViewProperties} viewProperties
   * @param {Explore1DModel} model
   * @param {Object} [options]
   * @returns {CollisionLabControlPanel}
   */
  createControlPanel(viewProperties, model, options) {
    assert && assert(viewProperties instanceof CollisionLabViewProperties, `invalid viewProperties: ${viewProperties}`);
    assert && assert(model instanceof Explore1DModel, `invalid model: ${model}`);
    return new CollisionLabControlPanel(viewProperties, model.ballSystem.centerOfMassVisibleProperty, model.ballSystem.pathsVisibleProperty, model.playArea.reflectingBorderProperty, model.playArea.elasticityPercentProperty, model.ballSystem.ballsConstantSizeProperty, merge(options, {
      includePathCheckbox: false
    }));
  }

  /**
   * Creates the BallSystemNode for the 'Explore 1D' screen. Called in the constructor of the super-class.
   *
   * @override
   * @protected
   * @param {Explore1DModel} model
   * @param {CollisionLabViewProperties} viewProperties
   * @param {ModelViewTransform2} modelViewTransform
   * @returns {BallSystemNode}
   */
  createBallSystemNode(model, viewProperties, modelViewTransform) {
    assert && assert(model instanceof Explore1DModel, `invalid model: ${model}`);
    assert && assert(viewProperties instanceof CollisionLabViewProperties, `invalid viewProperties: ${viewProperties}`);
    assert && assert(modelViewTransform instanceof ModelViewTransform2, `invalid modelViewTransform: ${modelViewTransform}`);
    return new BallSystemNode(model.ballSystem, model.playArea, viewProperties.valuesVisibleProperty, viewProperties.velocityVectorVisibleProperty, viewProperties.momentumVectorVisibleProperty, model.isPlayingProperty, modelViewTransform);
  }
}
collisionLab.register('Explore1DScreenView', Explore1DScreenView);
export default Explore1DScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk1vZGVsVmlld1RyYW5zZm9ybTIiLCJUYW5kZW0iLCJjb2xsaXNpb25MYWIiLCJDb2xsaXNpb25MYWJDb25zdGFudHMiLCJCYWxsU3lzdGVtTm9kZSIsIkNvbGxpc2lvbkxhYkNvbnRyb2xQYW5lbCIsIkNvbGxpc2lvbkxhYlNjcmVlblZpZXciLCJDb2xsaXNpb25MYWJWaWV3UHJvcGVydGllcyIsIkV4cGxvcmUxRE1vZGVsIiwiRXhwbG9yZTFEU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJvcHRpb25zIiwiYXNzZXJ0IiwicGxheUFyZWFUb3AiLCJQTEFZX0FSRUFfVklFV19UT1BfMUQiLCJwbGF5QXJlYVRvcFJpZ2h0Q29udHJvbHNPcHRpb25zIiwiaW5jbHVkZUdyaWRDaGVja2JveCIsImNyZWF0ZUNvbnRyb2xQYW5lbCIsInZpZXdQcm9wZXJ0aWVzIiwiYmFsbFN5c3RlbSIsImNlbnRlck9mTWFzc1Zpc2libGVQcm9wZXJ0eSIsInBhdGhzVmlzaWJsZVByb3BlcnR5IiwicGxheUFyZWEiLCJyZWZsZWN0aW5nQm9yZGVyUHJvcGVydHkiLCJlbGFzdGljaXR5UGVyY2VudFByb3BlcnR5IiwiYmFsbHNDb25zdGFudFNpemVQcm9wZXJ0eSIsImluY2x1ZGVQYXRoQ2hlY2tib3giLCJjcmVhdGVCYWxsU3lzdGVtTm9kZSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInZhbHVlc1Zpc2libGVQcm9wZXJ0eSIsInZlbG9jaXR5VmVjdG9yVmlzaWJsZVByb3BlcnR5IiwibW9tZW50dW1WZWN0b3JWaXNpYmxlUHJvcGVydHkiLCJpc1BsYXlpbmdQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwbG9yZTFEU2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUb3AgbGV2ZWwgdmlldyBmb3IgdGhlICdJbnRybycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb25MaVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBjb2xsaXNpb25MYWIgZnJvbSAnLi4vLi4vY29sbGlzaW9uTGFiLmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkxhYkNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vQ29sbGlzaW9uTGFiQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEJhbGxTeXN0ZW1Ob2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0JhbGxTeXN0ZW1Ob2RlLmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkxhYkNvbnRyb2xQYW5lbCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Db2xsaXNpb25MYWJDb250cm9sUGFuZWwuanMnO1xyXG5pbXBvcnQgQ29sbGlzaW9uTGFiU2NyZWVuVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Db2xsaXNpb25MYWJTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkxhYlZpZXdQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0NvbGxpc2lvbkxhYlZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IEV4cGxvcmUxRE1vZGVsIGZyb20gJy4uL21vZGVsL0V4cGxvcmUxRE1vZGVsLmpzJztcclxuXHJcbmNsYXNzIEV4cGxvcmUxRFNjcmVlblZpZXcgZXh0ZW5kcyBDb2xsaXNpb25MYWJTY3JlZW5WaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFeHBsb3JlMURNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgdGFuZGVtLCBvcHRpb25zICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbW9kZWwgaW5zdGFuY2VvZiBFeHBsb3JlMURNb2RlbCwgYGludmFsaWQgbW9kZWw6ICR7bW9kZWx9YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGFuZGVtIGluc3RhbmNlb2YgVGFuZGVtLCBgaW52YWxpZCB0YW5kZW06ICR7dGFuZGVtfWAgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIHBsYXlBcmVhVG9wOiBDb2xsaXNpb25MYWJDb25zdGFudHMuUExBWV9BUkVBX1ZJRVdfVE9QXzFELFxyXG4gICAgICBwbGF5QXJlYVRvcFJpZ2h0Q29udHJvbHNPcHRpb25zOiB7XHJcbiAgICAgICAgaW5jbHVkZUdyaWRDaGVja2JveDogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgdGFuZGVtLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBDb2xsaXNpb25MYWJDb250cm9sUGFuZWwgZm9yIHRoZSAnRXhwbG9yZSAxRCcgc2NyZWVuLiBDYWxsZWQgaW4gdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBzdXBlci1jbGFzcy5cclxuICAgKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKiBAcGFyYW0ge0NvbGxpc2lvbkxhYlZpZXdQcm9wZXJ0aWVzfSB2aWV3UHJvcGVydGllc1xyXG4gICAqIEBwYXJhbSB7RXhwbG9yZTFETW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqIEByZXR1cm5zIHtDb2xsaXNpb25MYWJDb250cm9sUGFuZWx9XHJcbiAgICovXHJcbiAgY3JlYXRlQ29udHJvbFBhbmVsKCB2aWV3UHJvcGVydGllcywgbW9kZWwsIG9wdGlvbnMgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB2aWV3UHJvcGVydGllcyBpbnN0YW5jZW9mIENvbGxpc2lvbkxhYlZpZXdQcm9wZXJ0aWVzLCBgaW52YWxpZCB2aWV3UHJvcGVydGllczogJHt2aWV3UHJvcGVydGllc31gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtb2RlbCBpbnN0YW5jZW9mIEV4cGxvcmUxRE1vZGVsLCBgaW52YWxpZCBtb2RlbDogJHttb2RlbH1gICk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBDb2xsaXNpb25MYWJDb250cm9sUGFuZWwoXHJcbiAgICAgIHZpZXdQcm9wZXJ0aWVzLFxyXG4gICAgICBtb2RlbC5iYWxsU3lzdGVtLmNlbnRlck9mTWFzc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwuYmFsbFN5c3RlbS5wYXRoc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwucGxheUFyZWEucmVmbGVjdGluZ0JvcmRlclByb3BlcnR5LFxyXG4gICAgICBtb2RlbC5wbGF5QXJlYS5lbGFzdGljaXR5UGVyY2VudFByb3BlcnR5LFxyXG4gICAgICBtb2RlbC5iYWxsU3lzdGVtLmJhbGxzQ29uc3RhbnRTaXplUHJvcGVydHksXHJcbiAgICAgIG1lcmdlKCBvcHRpb25zLCB7XHJcbiAgICAgICAgaW5jbHVkZVBhdGhDaGVja2JveDogZmFsc2VcclxuICAgICAgfSApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBCYWxsU3lzdGVtTm9kZSBmb3IgdGhlICdFeHBsb3JlIDFEJyBzY3JlZW4uIENhbGxlZCBpbiB0aGUgY29uc3RydWN0b3Igb2YgdGhlIHN1cGVyLWNsYXNzLlxyXG4gICAqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqIEBwYXJhbSB7RXhwbG9yZTFETW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtDb2xsaXNpb25MYWJWaWV3UHJvcGVydGllc30gdmlld1Byb3BlcnRpZXNcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqIEByZXR1cm5zIHtCYWxsU3lzdGVtTm9kZX1cclxuICAgKi9cclxuICBjcmVhdGVCYWxsU3lzdGVtTm9kZSggbW9kZWwsIHZpZXdQcm9wZXJ0aWVzLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtb2RlbCBpbnN0YW5jZW9mIEV4cGxvcmUxRE1vZGVsLCBgaW52YWxpZCBtb2RlbDogJHttb2RlbH1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB2aWV3UHJvcGVydGllcyBpbnN0YW5jZW9mIENvbGxpc2lvbkxhYlZpZXdQcm9wZXJ0aWVzLCBgaW52YWxpZCB2aWV3UHJvcGVydGllczogJHt2aWV3UHJvcGVydGllc31gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtb2RlbFZpZXdUcmFuc2Zvcm0gaW5zdGFuY2VvZiBNb2RlbFZpZXdUcmFuc2Zvcm0yLCBgaW52YWxpZCBtb2RlbFZpZXdUcmFuc2Zvcm06ICR7bW9kZWxWaWV3VHJhbnNmb3JtfWAgKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IEJhbGxTeXN0ZW1Ob2RlKFxyXG4gICAgICBtb2RlbC5iYWxsU3lzdGVtLFxyXG4gICAgICBtb2RlbC5wbGF5QXJlYSxcclxuICAgICAgdmlld1Byb3BlcnRpZXMudmFsdWVzVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICB2aWV3UHJvcGVydGllcy52ZWxvY2l0eVZlY3RvclZpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdmlld1Byb3BlcnRpZXMubW9tZW50dW1WZWN0b3JWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLmlzUGxheWluZ1Byb3BlcnR5LFxyXG4gICAgICBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5jb2xsaXNpb25MYWIucmVnaXN0ZXIoICdFeHBsb3JlMURTY3JlZW5WaWV3JywgRXhwbG9yZTFEU2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBFeHBsb3JlMURTY3JlZW5WaWV3OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLG1CQUFtQixNQUFNLHVEQUF1RDtBQUN2RixPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MscUJBQXFCLE1BQU0sdUNBQXVDO0FBQ3pFLE9BQU9DLGNBQWMsTUFBTSxxQ0FBcUM7QUFDaEUsT0FBT0Msd0JBQXdCLE1BQU0sK0NBQStDO0FBQ3BGLE9BQU9DLHNCQUFzQixNQUFNLDZDQUE2QztBQUNoRixPQUFPQywwQkFBMEIsTUFBTSxpREFBaUQ7QUFDeEYsT0FBT0MsY0FBYyxNQUFNLDRCQUE0QjtBQUV2RCxNQUFNQyxtQkFBbUIsU0FBU0gsc0JBQXNCLENBQUM7RUFFdkQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0lBQ3BDQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsS0FBSyxZQUFZSCxjQUFjLEVBQUcsa0JBQWlCRyxLQUFNLEVBQUUsQ0FBQztJQUM5RUcsTUFBTSxJQUFJQSxNQUFNLENBQUVGLE1BQU0sWUFBWVgsTUFBTSxFQUFHLG1CQUFrQlcsTUFBTyxFQUFFLENBQUM7SUFFekVDLE9BQU8sR0FBR2QsS0FBSyxDQUFFO01BRWZnQixXQUFXLEVBQUVaLHFCQUFxQixDQUFDYSxxQkFBcUI7TUFDeERDLCtCQUErQixFQUFFO1FBQy9CQyxtQkFBbUIsRUFBRTtNQUN2QjtJQUNGLENBQUMsRUFBRUwsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFRixLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBUSxDQUFDO0VBQ2pDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLGtCQUFrQkEsQ0FBRUMsY0FBYyxFQUFFVCxLQUFLLEVBQUVFLE9BQU8sRUFBRztJQUNuREMsTUFBTSxJQUFJQSxNQUFNLENBQUVNLGNBQWMsWUFBWWIsMEJBQTBCLEVBQUcsMkJBQTBCYSxjQUFlLEVBQUUsQ0FBQztJQUNySE4sTUFBTSxJQUFJQSxNQUFNLENBQUVILEtBQUssWUFBWUgsY0FBYyxFQUFHLGtCQUFpQkcsS0FBTSxFQUFFLENBQUM7SUFFOUUsT0FBTyxJQUFJTix3QkFBd0IsQ0FDakNlLGNBQWMsRUFDZFQsS0FBSyxDQUFDVSxVQUFVLENBQUNDLDJCQUEyQixFQUM1Q1gsS0FBSyxDQUFDVSxVQUFVLENBQUNFLG9CQUFvQixFQUNyQ1osS0FBSyxDQUFDYSxRQUFRLENBQUNDLHdCQUF3QixFQUN2Q2QsS0FBSyxDQUFDYSxRQUFRLENBQUNFLHlCQUF5QixFQUN4Q2YsS0FBSyxDQUFDVSxVQUFVLENBQUNNLHlCQUF5QixFQUMxQzVCLEtBQUssQ0FBRWMsT0FBTyxFQUFFO01BQ2RlLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBRSxDQUFDO0VBQ1Q7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsb0JBQW9CQSxDQUFFbEIsS0FBSyxFQUFFUyxjQUFjLEVBQUVVLGtCQUFrQixFQUFHO0lBQ2hFaEIsTUFBTSxJQUFJQSxNQUFNLENBQUVILEtBQUssWUFBWUgsY0FBYyxFQUFHLGtCQUFpQkcsS0FBTSxFQUFFLENBQUM7SUFDOUVHLE1BQU0sSUFBSUEsTUFBTSxDQUFFTSxjQUFjLFlBQVliLDBCQUEwQixFQUFHLDJCQUEwQmEsY0FBZSxFQUFFLENBQUM7SUFDckhOLE1BQU0sSUFBSUEsTUFBTSxDQUFFZ0Isa0JBQWtCLFlBQVk5QixtQkFBbUIsRUFBRywrQkFBOEI4QixrQkFBbUIsRUFBRSxDQUFDO0lBRTFILE9BQU8sSUFBSTFCLGNBQWMsQ0FDdkJPLEtBQUssQ0FBQ1UsVUFBVSxFQUNoQlYsS0FBSyxDQUFDYSxRQUFRLEVBQ2RKLGNBQWMsQ0FBQ1cscUJBQXFCLEVBQ3BDWCxjQUFjLENBQUNZLDZCQUE2QixFQUM1Q1osY0FBYyxDQUFDYSw2QkFBNkIsRUFDNUN0QixLQUFLLENBQUN1QixpQkFBaUIsRUFDdkJKLGtCQUNGLENBQUM7RUFDSDtBQUNGO0FBRUE1QixZQUFZLENBQUNpQyxRQUFRLENBQUUscUJBQXFCLEVBQUUxQixtQkFBb0IsQ0FBQztBQUNuRSxlQUFlQSxtQkFBbUIifQ==