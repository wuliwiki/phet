// Copyright 2019-2020, University of Colorado Boulder

/**
 * Top level model for the 'Explore 1D' screen.
 *
 * @author Brandon Li
 */

import collisionLab from '../../collisionLab.js';
import CollisionLabModel from '../../common/model/CollisionLabModel.js';
import Explore1DBallSystem from './Explore1DBallSystem.js';
import Explore1DCollisionEngine from './Explore1DCollisionEngine.js';
import Explore1DPlayArea from './Explore1DPlayArea.js';
class Explore1DModel extends CollisionLabModel {
  /**
   * Creates the PlayArea for the 'Explore 1D' screen, which uses a screen-specific sub-type of PlayArea. Called in the
   * constructor of the super-class, which uses the Factory Method Pattern.
   * @override
   * @protected
   *
   * @returns {Explore1DPlayArea}
   */
  createPlayArea() {
    return new Explore1DPlayArea();
  }

  /**
   * Creates the BallSystem for the 'Explore 1D' screen, which uses a screen-specific sub-type of BallSystem. Called in
   * the constructor of the super-class, which uses the Factory Method Pattern.
   * @override
   * @protected
   *
   * @param {Explore1DPlayArea} playArea
   * @returns {Explore1DBallSystem}
   */
  createBallSystem(playArea) {
    assert && assert(playArea instanceof Explore1DPlayArea, `invalid playArea: ${playArea}`);
    return new Explore1DBallSystem(playArea);
  }

  /**
   * Creates the CollisionEngine for the 'Inelastic' screen, which uses a screen-specific sub-type of CollisionEngine.
   * Called in the constructor of the super-class, which uses the Factory Method Pattern.
   * @override
   * @protected
   *
   * @param {Explore1DPlayArea} playArea
   * @param {Explore1DBallSystem} ballSystem
   * @returns {Explore1DCollisionEngine}
   */
  createCollisionEngine(playArea, ballSystem) {
    assert && assert(playArea instanceof Explore1DPlayArea, `invalid playArea: ${playArea}`);
    assert && assert(ballSystem instanceof Explore1DBallSystem, `invalid ballSystem: ${ballSystem}`);
    return new Explore1DCollisionEngine(playArea, ballSystem);
  }
}
collisionLab.register('Explore1DModel', Explore1DModel);
export default Explore1DModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb2xsaXNpb25MYWIiLCJDb2xsaXNpb25MYWJNb2RlbCIsIkV4cGxvcmUxREJhbGxTeXN0ZW0iLCJFeHBsb3JlMURDb2xsaXNpb25FbmdpbmUiLCJFeHBsb3JlMURQbGF5QXJlYSIsIkV4cGxvcmUxRE1vZGVsIiwiY3JlYXRlUGxheUFyZWEiLCJjcmVhdGVCYWxsU3lzdGVtIiwicGxheUFyZWEiLCJhc3NlcnQiLCJjcmVhdGVDb2xsaXNpb25FbmdpbmUiLCJiYWxsU3lzdGVtIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeHBsb3JlMURNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUb3AgbGV2ZWwgbW9kZWwgZm9yIHRoZSAnRXhwbG9yZSAxRCcgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgY29sbGlzaW9uTGFiIGZyb20gJy4uLy4uL2NvbGxpc2lvbkxhYi5qcyc7XHJcbmltcG9ydCBDb2xsaXNpb25MYWJNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ29sbGlzaW9uTGFiTW9kZWwuanMnO1xyXG5pbXBvcnQgRXhwbG9yZTFEQmFsbFN5c3RlbSBmcm9tICcuL0V4cGxvcmUxREJhbGxTeXN0ZW0uanMnO1xyXG5pbXBvcnQgRXhwbG9yZTFEQ29sbGlzaW9uRW5naW5lIGZyb20gJy4vRXhwbG9yZTFEQ29sbGlzaW9uRW5naW5lLmpzJztcclxuaW1wb3J0IEV4cGxvcmUxRFBsYXlBcmVhIGZyb20gJy4vRXhwbG9yZTFEUGxheUFyZWEuanMnO1xyXG5cclxuY2xhc3MgRXhwbG9yZTFETW9kZWwgZXh0ZW5kcyBDb2xsaXNpb25MYWJNb2RlbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgdGhlIFBsYXlBcmVhIGZvciB0aGUgJ0V4cGxvcmUgMUQnIHNjcmVlbiwgd2hpY2ggdXNlcyBhIHNjcmVlbi1zcGVjaWZpYyBzdWItdHlwZSBvZiBQbGF5QXJlYS4gQ2FsbGVkIGluIHRoZVxyXG4gICAqIGNvbnN0cnVjdG9yIG9mIHRoZSBzdXBlci1jbGFzcywgd2hpY2ggdXNlcyB0aGUgRmFjdG9yeSBNZXRob2QgUGF0dGVybi5cclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7RXhwbG9yZTFEUGxheUFyZWF9XHJcbiAgICovXHJcbiAgY3JlYXRlUGxheUFyZWEoKSB7XHJcbiAgICByZXR1cm4gbmV3IEV4cGxvcmUxRFBsYXlBcmVhKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBCYWxsU3lzdGVtIGZvciB0aGUgJ0V4cGxvcmUgMUQnIHNjcmVlbiwgd2hpY2ggdXNlcyBhIHNjcmVlbi1zcGVjaWZpYyBzdWItdHlwZSBvZiBCYWxsU3lzdGVtLiBDYWxsZWQgaW5cclxuICAgKiB0aGUgY29uc3RydWN0b3Igb2YgdGhlIHN1cGVyLWNsYXNzLCB3aGljaCB1c2VzIHRoZSBGYWN0b3J5IE1ldGhvZCBQYXR0ZXJuLlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RXhwbG9yZTFEUGxheUFyZWF9IHBsYXlBcmVhXHJcbiAgICogQHJldHVybnMge0V4cGxvcmUxREJhbGxTeXN0ZW19XHJcbiAgICovXHJcbiAgY3JlYXRlQmFsbFN5c3RlbSggcGxheUFyZWEgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBwbGF5QXJlYSBpbnN0YW5jZW9mIEV4cGxvcmUxRFBsYXlBcmVhLCBgaW52YWxpZCBwbGF5QXJlYTogJHtwbGF5QXJlYX1gICk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBFeHBsb3JlMURCYWxsU3lzdGVtKCBwbGF5QXJlYSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgQ29sbGlzaW9uRW5naW5lIGZvciB0aGUgJ0luZWxhc3RpYycgc2NyZWVuLCB3aGljaCB1c2VzIGEgc2NyZWVuLXNwZWNpZmljIHN1Yi10eXBlIG9mIENvbGxpc2lvbkVuZ2luZS5cclxuICAgKiBDYWxsZWQgaW4gdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBzdXBlci1jbGFzcywgd2hpY2ggdXNlcyB0aGUgRmFjdG9yeSBNZXRob2QgUGF0dGVybi5cclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0V4cGxvcmUxRFBsYXlBcmVhfSBwbGF5QXJlYVxyXG4gICAqIEBwYXJhbSB7RXhwbG9yZTFEQmFsbFN5c3RlbX0gYmFsbFN5c3RlbVxyXG4gICAqIEByZXR1cm5zIHtFeHBsb3JlMURDb2xsaXNpb25FbmdpbmV9XHJcbiAgICovXHJcbiAgY3JlYXRlQ29sbGlzaW9uRW5naW5lKCBwbGF5QXJlYSwgYmFsbFN5c3RlbSApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHBsYXlBcmVhIGluc3RhbmNlb2YgRXhwbG9yZTFEUGxheUFyZWEsIGBpbnZhbGlkIHBsYXlBcmVhOiAke3BsYXlBcmVhfWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGJhbGxTeXN0ZW0gaW5zdGFuY2VvZiBFeHBsb3JlMURCYWxsU3lzdGVtLCBgaW52YWxpZCBiYWxsU3lzdGVtOiAke2JhbGxTeXN0ZW19YCApO1xyXG5cclxuICAgIHJldHVybiBuZXcgRXhwbG9yZTFEQ29sbGlzaW9uRW5naW5lKCBwbGF5QXJlYSwgYmFsbFN5c3RlbSApO1xyXG4gIH1cclxufVxyXG5cclxuY29sbGlzaW9uTGFiLnJlZ2lzdGVyKCAnRXhwbG9yZTFETW9kZWwnLCBFeHBsb3JlMURNb2RlbCApO1xyXG5leHBvcnQgZGVmYXVsdCBFeHBsb3JlMURNb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxpQkFBaUIsTUFBTSx5Q0FBeUM7QUFDdkUsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBQzFELE9BQU9DLHdCQUF3QixNQUFNLCtCQUErQjtBQUNwRSxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFFdEQsTUFBTUMsY0FBYyxTQUFTSixpQkFBaUIsQ0FBQztFQUU3QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLGNBQWNBLENBQUEsRUFBRztJQUNmLE9BQU8sSUFBSUYsaUJBQWlCLENBQUMsQ0FBQztFQUNoQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsZ0JBQWdCQSxDQUFFQyxRQUFRLEVBQUc7SUFDM0JDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxRQUFRLFlBQVlKLGlCQUFpQixFQUFHLHFCQUFvQkksUUFBUyxFQUFFLENBQUM7SUFFMUYsT0FBTyxJQUFJTixtQkFBbUIsQ0FBRU0sUUFBUyxDQUFDO0VBQzVDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLHFCQUFxQkEsQ0FBRUYsUUFBUSxFQUFFRyxVQUFVLEVBQUc7SUFDNUNGLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxRQUFRLFlBQVlKLGlCQUFpQixFQUFHLHFCQUFvQkksUUFBUyxFQUFFLENBQUM7SUFDMUZDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRSxVQUFVLFlBQVlULG1CQUFtQixFQUFHLHVCQUFzQlMsVUFBVyxFQUFFLENBQUM7SUFFbEcsT0FBTyxJQUFJUix3QkFBd0IsQ0FBRUssUUFBUSxFQUFFRyxVQUFXLENBQUM7RUFDN0Q7QUFDRjtBQUVBWCxZQUFZLENBQUNZLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRVAsY0FBZSxDQUFDO0FBQ3pELGVBQWVBLGNBQWMifQ==