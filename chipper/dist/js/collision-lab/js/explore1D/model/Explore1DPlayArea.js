// Copyright 2020, University of Colorado Boulder

/**
 * Explore1DPlayArea is a PlayArea sub-type for the 'Explore 1D' screen.
 *
 * Although it adds no additional functionality to the super-class, it is added for symmetry within the screen-specific
 * sub-types of PlayArea. It is responsible for providing a correct configuration of the super-class for the
 * 'Explore 2D' screen, which includes specifying the dimension, initial Property values, and disabling Properties.
 *
 * @author Brandon Li
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import merge from '../../../../phet-core/js/merge.js';
import collisionLab from '../../collisionLab.js';
import CollisionLabConstants from '../../common/CollisionLabConstants.js';
import PlayArea from '../../common/model/PlayArea.js';
class Explore1DPlayArea extends PlayArea {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      isGridVisibleInitially: true,
      bounds: new Bounds2(PlayArea.DEFAULT_BOUNDS.left, -CollisionLabConstants.PLAY_AREA_1D_HEIGHT / 2, PlayArea.DEFAULT_BOUNDS.right, CollisionLabConstants.PLAY_AREA_1D_HEIGHT / 2)
    }, options);
    super(PlayArea.Dimension.ONE, options);

    //----------------------------------------------------------------------------------------

    // Verify that Grids are always visible for the 'Explore 2D' screen.
    assert && this.gridVisibleProperty.link(gridVisible => {
      assert(gridVisible === true, 'Grids must be visible in the Explore 2D screen.');
    });
  }
}
collisionLab.register('Explore1DPlayArea', Explore1DPlayArea);
export default Explore1DPlayArea;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwibWVyZ2UiLCJjb2xsaXNpb25MYWIiLCJDb2xsaXNpb25MYWJDb25zdGFudHMiLCJQbGF5QXJlYSIsIkV4cGxvcmUxRFBsYXlBcmVhIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiaXNHcmlkVmlzaWJsZUluaXRpYWxseSIsImJvdW5kcyIsIkRFRkFVTFRfQk9VTkRTIiwibGVmdCIsIlBMQVlfQVJFQV8xRF9IRUlHSFQiLCJyaWdodCIsIkRpbWVuc2lvbiIsIk9ORSIsImFzc2VydCIsImdyaWRWaXNpYmxlUHJvcGVydHkiLCJsaW5rIiwiZ3JpZFZpc2libGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkV4cGxvcmUxRFBsYXlBcmVhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFeHBsb3JlMURQbGF5QXJlYSBpcyBhIFBsYXlBcmVhIHN1Yi10eXBlIGZvciB0aGUgJ0V4cGxvcmUgMUQnIHNjcmVlbi5cclxuICpcclxuICogQWx0aG91Z2ggaXQgYWRkcyBubyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgdG8gdGhlIHN1cGVyLWNsYXNzLCBpdCBpcyBhZGRlZCBmb3Igc3ltbWV0cnkgd2l0aGluIHRoZSBzY3JlZW4tc3BlY2lmaWNcclxuICogc3ViLXR5cGVzIG9mIFBsYXlBcmVhLiBJdCBpcyByZXNwb25zaWJsZSBmb3IgcHJvdmlkaW5nIGEgY29ycmVjdCBjb25maWd1cmF0aW9uIG9mIHRoZSBzdXBlci1jbGFzcyBmb3IgdGhlXHJcbiAqICdFeHBsb3JlIDJEJyBzY3JlZW4sIHdoaWNoIGluY2x1ZGVzIHNwZWNpZnlpbmcgdGhlIGRpbWVuc2lvbiwgaW5pdGlhbCBQcm9wZXJ0eSB2YWx1ZXMsIGFuZCBkaXNhYmxpbmcgUHJvcGVydGllcy5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGNvbGxpc2lvbkxhYiBmcm9tICcuLi8uLi9jb2xsaXNpb25MYWIuanMnO1xyXG5pbXBvcnQgQ29sbGlzaW9uTGFiQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9Db2xsaXNpb25MYWJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUGxheUFyZWEgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1BsYXlBcmVhLmpzJztcclxuXHJcbmNsYXNzIEV4cGxvcmUxRFBsYXlBcmVhIGV4dGVuZHMgUGxheUFyZWEge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcblxyXG4gICAgICBpc0dyaWRWaXNpYmxlSW5pdGlhbGx5OiB0cnVlLFxyXG4gICAgICBib3VuZHM6IG5ldyBCb3VuZHMyKFxyXG4gICAgICAgIFBsYXlBcmVhLkRFRkFVTFRfQk9VTkRTLmxlZnQsXHJcbiAgICAgICAgLUNvbGxpc2lvbkxhYkNvbnN0YW50cy5QTEFZX0FSRUFfMURfSEVJR0hUIC8gMixcclxuICAgICAgICBQbGF5QXJlYS5ERUZBVUxUX0JPVU5EUy5yaWdodCxcclxuICAgICAgICBDb2xsaXNpb25MYWJDb25zdGFudHMuUExBWV9BUkVBXzFEX0hFSUdIVCAvIDJcclxuICAgICAgKVxyXG5cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggUGxheUFyZWEuRGltZW5zaW9uLk9ORSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8vIFZlcmlmeSB0aGF0IEdyaWRzIGFyZSBhbHdheXMgdmlzaWJsZSBmb3IgdGhlICdFeHBsb3JlIDJEJyBzY3JlZW4uXHJcbiAgICBhc3NlcnQgJiYgdGhpcy5ncmlkVmlzaWJsZVByb3BlcnR5LmxpbmsoIGdyaWRWaXNpYmxlID0+IHtcclxuICAgICAgYXNzZXJ0KCBncmlkVmlzaWJsZSA9PT0gdHJ1ZSwgJ0dyaWRzIG11c3QgYmUgdmlzaWJsZSBpbiB0aGUgRXhwbG9yZSAyRCBzY3JlZW4uJyApO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY29sbGlzaW9uTGFiLnJlZ2lzdGVyKCAnRXhwbG9yZTFEUGxheUFyZWEnLCBFeHBsb3JlMURQbGF5QXJlYSApO1xyXG5leHBvcnQgZGVmYXVsdCBFeHBsb3JlMURQbGF5QXJlYTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxxQkFBcUIsTUFBTSx1Q0FBdUM7QUFDekUsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUVyRCxNQUFNQyxpQkFBaUIsU0FBU0QsUUFBUSxDQUFDO0VBRXZDO0FBQ0Y7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckJBLE9BQU8sR0FBR04sS0FBSyxDQUFFO01BRWZPLHNCQUFzQixFQUFFLElBQUk7TUFDNUJDLE1BQU0sRUFBRSxJQUFJVCxPQUFPLENBQ2pCSSxRQUFRLENBQUNNLGNBQWMsQ0FBQ0MsSUFBSSxFQUM1QixDQUFDUixxQkFBcUIsQ0FBQ1MsbUJBQW1CLEdBQUcsQ0FBQyxFQUM5Q1IsUUFBUSxDQUFDTSxjQUFjLENBQUNHLEtBQUssRUFDN0JWLHFCQUFxQixDQUFDUyxtQkFBbUIsR0FBRyxDQUM5QztJQUVGLENBQUMsRUFBRUwsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFSCxRQUFRLENBQUNVLFNBQVMsQ0FBQ0MsR0FBRyxFQUFFUixPQUFRLENBQUM7O0lBRXhDOztJQUVBO0lBQ0FTLE1BQU0sSUFBSSxJQUFJLENBQUNDLG1CQUFtQixDQUFDQyxJQUFJLENBQUVDLFdBQVcsSUFBSTtNQUN0REgsTUFBTSxDQUFFRyxXQUFXLEtBQUssSUFBSSxFQUFFLGlEQUFrRCxDQUFDO0lBQ25GLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWpCLFlBQVksQ0FBQ2tCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRWYsaUJBQWtCLENBQUM7QUFDL0QsZUFBZUEsaUJBQWlCIn0=