// Copyright 2020, University of Colorado Boulder

/**
 * Explore1DBallSystem is a BallSystem sub-type for the 'Explore 1D' screen.
 *
 * Although it adds no additional functionality to the super-class, it is added for symmetry within the screen-specific
 * model-view type hierarchy. It also verifies a correct configuration of initialBallStates for 1D and that Balls
 * always have a yPosition and yVelocity of 0.
 *
 * @author Brandon Li
 */

import RangeWithValue from '../../../../dot/js/RangeWithValue.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import collisionLab from '../../collisionLab.js';
import BallState from '../../common/model/BallState.js';
import BallSystem from '../../common/model/BallSystem.js';
import Explore1DPlayArea from './Explore1DPlayArea.js';

// constants
const EXPLORE_1D_INITIAL_BALL_STATES = [new BallState(new Vector2(-1.8, 0), new Vector2(1, 0), 0.5), new BallState(new Vector2(-0.1, 0), new Vector2(-0.5, 0), 1.5), new BallState(new Vector2(0.8, 0), new Vector2(-0.5, 0), 1.0), new BallState(new Vector2(1.3, 0), new Vector2(1.10, 0), 1.0), new BallState(new Vector2(1.8, 0), new Vector2(-1.10, 0), 1.0)];
class Explore1DBallSystem extends BallSystem {
  /**
   * @param {Explore1DPlayArea} playArea
   * @param {Object} [options]
   */
  constructor(playArea, options) {
    assert && assert(playArea instanceof Explore1DPlayArea, `invalid playArea: ${playArea}`);
    options = merge({
      numberOfBallsRange: new RangeWithValue(1, 5, 2)
    }, options);
    super(EXPLORE_1D_INITIAL_BALL_STATES, playArea, options);

    //----------------------------------------------------------------------------------------

    // Verify that the configuration of Balls conforms to the invariants for 1D screens, but bury behind assert so it
    // doesn't impact production performance.
    if (assert) {
      // Verify that the correct number of BallStates were provided.
      assert(EXPLORE_1D_INITIAL_BALL_STATES.length === this.numberOfBallsRange.max);

      // Verify that every Ball's yPosition and yVelocity is always 0. Links lasts for the lifetime of the sim.
      this.prepopulatedBalls.forEach(ball => {
        ball.velocityProperty.link(velocity => assert(velocity.y === 0, 'yVelocity must be 0 for Explore 1D'));
        ball.positionProperty.link(position => assert(position.y === 0, 'yPosition must be 0 for Explore 1D'));
      });

      // Verify that Paths are never visible for the 'Explore 1D' screen.
      this.pathsVisibleProperty.link(pathVisible => assert(!pathVisible));
    }
  }
}
collisionLab.register('Explore1DBallSystem', Explore1DBallSystem);
export default Explore1DBallSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZVdpdGhWYWx1ZSIsIlZlY3RvcjIiLCJtZXJnZSIsImNvbGxpc2lvbkxhYiIsIkJhbGxTdGF0ZSIsIkJhbGxTeXN0ZW0iLCJFeHBsb3JlMURQbGF5QXJlYSIsIkVYUExPUkVfMURfSU5JVElBTF9CQUxMX1NUQVRFUyIsIkV4cGxvcmUxREJhbGxTeXN0ZW0iLCJjb25zdHJ1Y3RvciIsInBsYXlBcmVhIiwib3B0aW9ucyIsImFzc2VydCIsIm51bWJlck9mQmFsbHNSYW5nZSIsImxlbmd0aCIsIm1heCIsInByZXBvcHVsYXRlZEJhbGxzIiwiZm9yRWFjaCIsImJhbGwiLCJ2ZWxvY2l0eVByb3BlcnR5IiwibGluayIsInZlbG9jaXR5IiwieSIsInBvc2l0aW9uUHJvcGVydHkiLCJwb3NpdGlvbiIsInBhdGhzVmlzaWJsZVByb3BlcnR5IiwicGF0aFZpc2libGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkV4cGxvcmUxREJhbGxTeXN0ZW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEV4cGxvcmUxREJhbGxTeXN0ZW0gaXMgYSBCYWxsU3lzdGVtIHN1Yi10eXBlIGZvciB0aGUgJ0V4cGxvcmUgMUQnIHNjcmVlbi5cclxuICpcclxuICogQWx0aG91Z2ggaXQgYWRkcyBubyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgdG8gdGhlIHN1cGVyLWNsYXNzLCBpdCBpcyBhZGRlZCBmb3Igc3ltbWV0cnkgd2l0aGluIHRoZSBzY3JlZW4tc3BlY2lmaWNcclxuICogbW9kZWwtdmlldyB0eXBlIGhpZXJhcmNoeS4gSXQgYWxzbyB2ZXJpZmllcyBhIGNvcnJlY3QgY29uZmlndXJhdGlvbiBvZiBpbml0aWFsQmFsbFN0YXRlcyBmb3IgMUQgYW5kIHRoYXQgQmFsbHNcclxuICogYWx3YXlzIGhhdmUgYSB5UG9zaXRpb24gYW5kIHlWZWxvY2l0eSBvZiAwLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2VXaXRoVmFsdWUgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlV2l0aFZhbHVlLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGNvbGxpc2lvbkxhYiBmcm9tICcuLi8uLi9jb2xsaXNpb25MYWIuanMnO1xyXG5pbXBvcnQgQmFsbFN0YXRlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9CYWxsU3RhdGUuanMnO1xyXG5pbXBvcnQgQmFsbFN5c3RlbSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQmFsbFN5c3RlbS5qcyc7XHJcbmltcG9ydCBFeHBsb3JlMURQbGF5QXJlYSBmcm9tICcuL0V4cGxvcmUxRFBsYXlBcmVhLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBFWFBMT1JFXzFEX0lOSVRJQUxfQkFMTF9TVEFURVMgPSBbXHJcbiAgbmV3IEJhbGxTdGF0ZSggbmV3IFZlY3RvcjIoIC0xLjgsIDAgKSwgbmV3IFZlY3RvcjIoIDEsIDAgKSwgMC41ICksXHJcbiAgbmV3IEJhbGxTdGF0ZSggbmV3IFZlY3RvcjIoIC0wLjEsIDAgKSwgbmV3IFZlY3RvcjIoIC0wLjUsIDAgKSwgMS41ICksXHJcbiAgbmV3IEJhbGxTdGF0ZSggbmV3IFZlY3RvcjIoIDAuOCwgMCApLCBuZXcgVmVjdG9yMiggLTAuNSwgMCApLCAxLjAgKSxcclxuICBuZXcgQmFsbFN0YXRlKCBuZXcgVmVjdG9yMiggMS4zLCAwICksIG5ldyBWZWN0b3IyKCAxLjEwLCAwICksIDEuMCApLFxyXG4gIG5ldyBCYWxsU3RhdGUoIG5ldyBWZWN0b3IyKCAxLjgsIDAgKSwgbmV3IFZlY3RvcjIoIC0xLjEwLCAwICksIDEuMCApXHJcbl07XHJcblxyXG5jbGFzcyBFeHBsb3JlMURCYWxsU3lzdGVtIGV4dGVuZHMgQmFsbFN5c3RlbSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RXhwbG9yZTFEUGxheUFyZWF9IHBsYXlBcmVhXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwbGF5QXJlYSwgb3B0aW9ucyApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHBsYXlBcmVhIGluc3RhbmNlb2YgRXhwbG9yZTFEUGxheUFyZWEsIGBpbnZhbGlkIHBsYXlBcmVhOiAke3BsYXlBcmVhfWAgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgbnVtYmVyT2ZCYWxsc1JhbmdlOiBuZXcgUmFuZ2VXaXRoVmFsdWUoIDEsIDUsIDIgKVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBFWFBMT1JFXzFEX0lOSVRJQUxfQkFMTF9TVEFURVMsIHBsYXlBcmVhLCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvbmZpZ3VyYXRpb24gb2YgQmFsbHMgY29uZm9ybXMgdG8gdGhlIGludmFyaWFudHMgZm9yIDFEIHNjcmVlbnMsIGJ1dCBidXJ5IGJlaGluZCBhc3NlcnQgc28gaXRcclxuICAgIC8vIGRvZXNuJ3QgaW1wYWN0IHByb2R1Y3Rpb24gcGVyZm9ybWFuY2UuXHJcbiAgICBpZiAoIGFzc2VydCApIHtcclxuXHJcbiAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb3JyZWN0IG51bWJlciBvZiBCYWxsU3RhdGVzIHdlcmUgcHJvdmlkZWQuXHJcbiAgICAgIGFzc2VydCggRVhQTE9SRV8xRF9JTklUSUFMX0JBTExfU1RBVEVTLmxlbmd0aCA9PT0gdGhpcy5udW1iZXJPZkJhbGxzUmFuZ2UubWF4ICk7XHJcblxyXG4gICAgICAvLyBWZXJpZnkgdGhhdCBldmVyeSBCYWxsJ3MgeVBvc2l0aW9uIGFuZCB5VmVsb2NpdHkgaXMgYWx3YXlzIDAuIExpbmtzIGxhc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbS5cclxuICAgICAgdGhpcy5wcmVwb3B1bGF0ZWRCYWxscy5mb3JFYWNoKCBiYWxsID0+IHtcclxuXHJcbiAgICAgICAgYmFsbC52ZWxvY2l0eVByb3BlcnR5LmxpbmsoIHZlbG9jaXR5ID0+IGFzc2VydCggdmVsb2NpdHkueSA9PT0gMCwgJ3lWZWxvY2l0eSBtdXN0IGJlIDAgZm9yIEV4cGxvcmUgMUQnICkgKTtcclxuICAgICAgICBiYWxsLnBvc2l0aW9uUHJvcGVydHkubGluayggcG9zaXRpb24gPT4gYXNzZXJ0KCBwb3NpdGlvbi55ID09PSAwLCAneVBvc2l0aW9uIG11c3QgYmUgMCBmb3IgRXhwbG9yZSAxRCcgKSApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICAvLyBWZXJpZnkgdGhhdCBQYXRocyBhcmUgbmV2ZXIgdmlzaWJsZSBmb3IgdGhlICdFeHBsb3JlIDFEJyBzY3JlZW4uXHJcbiAgICAgIHRoaXMucGF0aHNWaXNpYmxlUHJvcGVydHkubGluayggcGF0aFZpc2libGUgPT4gYXNzZXJ0KCAhcGF0aFZpc2libGUgKSApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY29sbGlzaW9uTGFiLnJlZ2lzdGVyKCAnRXhwbG9yZTFEQmFsbFN5c3RlbScsIEV4cGxvcmUxREJhbGxTeXN0ZW0gKTtcclxuZXhwb3J0IGRlZmF1bHQgRXhwbG9yZTFEQmFsbFN5c3RlbTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sc0NBQXNDO0FBQ2pFLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0Ms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