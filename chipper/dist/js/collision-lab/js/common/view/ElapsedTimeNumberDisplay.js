// Copyright 2019-2022, University of Colorado Boulder

/**
 * ElapsedTimeNumberDisplay is a subclass of NumberDisplay for displaying the total elapsed time of the sim.
 * Instances are positioned just outside the PlayArea on the bottom-left side and appears on all Screens.
 *
 * ElapsedTimeNumberDisplays are created at the start of the sim and are never disposed, so no dispose method is
 * necessary.
 *
 * @author Brandon Li
 * @author Martin Veillette
 */

import Range from '../../../../dot/js/Range.js';
import merge from '../../../../phet-core/js/merge.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import NumberDisplay from '../../../../scenery-phet/js/NumberDisplay.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import StopwatchNode from '../../../../scenery-phet/js/StopwatchNode.js';
import { Color } from '../../../../scenery/js/imports.js';
import collisionLab from '../../collisionLab.js';
import CollisionLabStrings from '../../CollisionLabStrings.js';
import CollisionLabConstants from '../CollisionLabConstants.js';
class ElapsedTimeNumberDisplay extends NumberDisplay {
  /**
   * @param {Property.<number>} elapsedTimeProperty
   * @param {Object} [options]
   */
  constructor(elapsedTimeProperty, options) {
    assert && AssertUtils.assertPropertyOf(elapsedTimeProperty, 'number');
    options = merge({
      // {Range} - Display range for the NumberDisplay (used to determine width).
      displayRange: new Range(0, 1000),
      // super-class options
      yMargin: 6,
      xMargin: 6,
      backgroundStroke: Color.BLACK,
      valuePattern: StringUtils.fillIn(CollisionLabStrings.pattern.valueSpaceUnits, {
        units: CollisionLabStrings.units.seconds
      }),
      textOptions: {
        maxWidth: 70,
        // constrain width for i18n, determined empirically

        // Avoid jitter in the ElapsedTimeNumberDisplay, see https://github.com/phetsims/collision-lab/issues/140.
        font: new PhetFont({
          family: StopwatchNode.NUMBER_FONT_FAMILY,
          size: CollisionLabConstants.DISPLAY_FONT.size
        })
      },
      decimalPlaces: CollisionLabConstants.DISPLAY_DECIMAL_PLACES
    }, options);
    super(elapsedTimeProperty, options.displayRange, options);
  }

  /**
   * @public
   * @override
   */
  dispose() {
    assert && assert(false, 'ElapsedTimeNumberDisplay is not intended to be disposed');
  }
}
collisionLab.register('ElapsedTimeNumberDisplay', ElapsedTimeNumberDisplay);
export default ElapsedTimeNumberDisplay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIm1lcmdlIiwiQXNzZXJ0VXRpbHMiLCJTdHJpbmdVdGlscyIsIk51bWJlckRpc3BsYXkiLCJQaGV0Rm9udCIsIlN0b3B3YXRjaE5vZGUiLCJDb2xvciIsImNvbGxpc2lvbkxhYiIsIkNvbGxpc2lvbkxhYlN0cmluZ3MiLCJDb2xsaXNpb25MYWJDb25zdGFudHMiLCJFbGFwc2VkVGltZU51bWJlckRpc3BsYXkiLCJjb25zdHJ1Y3RvciIsImVsYXBzZWRUaW1lUHJvcGVydHkiLCJvcHRpb25zIiwiYXNzZXJ0IiwiYXNzZXJ0UHJvcGVydHlPZiIsImRpc3BsYXlSYW5nZSIsInlNYXJnaW4iLCJ4TWFyZ2luIiwiYmFja2dyb3VuZFN0cm9rZSIsIkJMQUNLIiwidmFsdWVQYXR0ZXJuIiwiZmlsbEluIiwicGF0dGVybiIsInZhbHVlU3BhY2VVbml0cyIsInVuaXRzIiwic2Vjb25kcyIsInRleHRPcHRpb25zIiwibWF4V2lkdGgiLCJmb250IiwiZmFtaWx5IiwiTlVNQkVSX0ZPTlRfRkFNSUxZIiwic2l6ZSIsIkRJU1BMQVlfRk9OVCIsImRlY2ltYWxQbGFjZXMiLCJESVNQTEFZX0RFQ0lNQUxfUExBQ0VTIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWxhcHNlZFRpbWVOdW1iZXJEaXNwbGF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVsYXBzZWRUaW1lTnVtYmVyRGlzcGxheSBpcyBhIHN1YmNsYXNzIG9mIE51bWJlckRpc3BsYXkgZm9yIGRpc3BsYXlpbmcgdGhlIHRvdGFsIGVsYXBzZWQgdGltZSBvZiB0aGUgc2ltLlxyXG4gKiBJbnN0YW5jZXMgYXJlIHBvc2l0aW9uZWQganVzdCBvdXRzaWRlIHRoZSBQbGF5QXJlYSBvbiB0aGUgYm90dG9tLWxlZnQgc2lkZSBhbmQgYXBwZWFycyBvbiBhbGwgU2NyZWVucy5cclxuICpcclxuICogRWxhcHNlZFRpbWVOdW1iZXJEaXNwbGF5cyBhcmUgY3JlYXRlZCBhdCB0aGUgc3RhcnQgb2YgdGhlIHNpbSBhbmQgYXJlIG5ldmVyIGRpc3Bvc2VkLCBzbyBubyBkaXNwb3NlIG1ldGhvZCBpc1xyXG4gKiBuZWNlc3NhcnkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBBc3NlcnRVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL0Fzc2VydFV0aWxzLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBOdW1iZXJEaXNwbGF5IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9OdW1iZXJEaXNwbGF5LmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBTdG9wd2F0Y2hOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9TdG9wd2F0Y2hOb2RlLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY29sbGlzaW9uTGFiIGZyb20gJy4uLy4uL2NvbGxpc2lvbkxhYi5qcyc7XHJcbmltcG9ydCBDb2xsaXNpb25MYWJTdHJpbmdzIGZyb20gJy4uLy4uL0NvbGxpc2lvbkxhYlN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ29sbGlzaW9uTGFiQ29uc3RhbnRzIGZyb20gJy4uL0NvbGxpc2lvbkxhYkNvbnN0YW50cy5qcyc7XHJcblxyXG5jbGFzcyBFbGFwc2VkVGltZU51bWJlckRpc3BsYXkgZXh0ZW5kcyBOdW1iZXJEaXNwbGF5IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gZWxhcHNlZFRpbWVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZWxhcHNlZFRpbWVQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuICAgIGFzc2VydCAmJiBBc3NlcnRVdGlscy5hc3NlcnRQcm9wZXJ0eU9mKCBlbGFwc2VkVGltZVByb3BlcnR5LCAnbnVtYmVyJyApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8ge1JhbmdlfSAtIERpc3BsYXkgcmFuZ2UgZm9yIHRoZSBOdW1iZXJEaXNwbGF5ICh1c2VkIHRvIGRldGVybWluZSB3aWR0aCkuXHJcbiAgICAgIGRpc3BsYXlSYW5nZTogbmV3IFJhbmdlKCAwLCAxMDAwICksXHJcblxyXG4gICAgICAvLyBzdXBlci1jbGFzcyBvcHRpb25zXHJcbiAgICAgIHlNYXJnaW46IDYsXHJcbiAgICAgIHhNYXJnaW46IDYsXHJcbiAgICAgIGJhY2tncm91bmRTdHJva2U6IENvbG9yLkJMQUNLLFxyXG4gICAgICB2YWx1ZVBhdHRlcm46IFN0cmluZ1V0aWxzLmZpbGxJbiggQ29sbGlzaW9uTGFiU3RyaW5ncy5wYXR0ZXJuLnZhbHVlU3BhY2VVbml0cywge1xyXG4gICAgICAgIHVuaXRzOiBDb2xsaXNpb25MYWJTdHJpbmdzLnVuaXRzLnNlY29uZHNcclxuICAgICAgfSApLFxyXG4gICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgIG1heFdpZHRoOiA3MCwgLy8gY29uc3RyYWluIHdpZHRoIGZvciBpMThuLCBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcblxyXG4gICAgICAgIC8vIEF2b2lkIGppdHRlciBpbiB0aGUgRWxhcHNlZFRpbWVOdW1iZXJEaXNwbGF5LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NvbGxpc2lvbi1sYWIvaXNzdWVzLzE0MC5cclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIHtcclxuICAgICAgICAgIGZhbWlseTogU3RvcHdhdGNoTm9kZS5OVU1CRVJfRk9OVF9GQU1JTFksXHJcbiAgICAgICAgICBzaXplOiBDb2xsaXNpb25MYWJDb25zdGFudHMuRElTUExBWV9GT05ULnNpemVcclxuICAgICAgICB9IClcclxuICAgICAgfSxcclxuICAgICAgZGVjaW1hbFBsYWNlczogQ29sbGlzaW9uTGFiQ29uc3RhbnRzLkRJU1BMQVlfREVDSU1BTF9QTEFDRVNcclxuXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGVsYXBzZWRUaW1lUHJvcGVydHksIG9wdGlvbnMuZGlzcGxheVJhbmdlLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnRWxhcHNlZFRpbWVOdW1iZXJEaXNwbGF5IGlzIG5vdCBpbnRlbmRlZCB0byBiZSBkaXNwb3NlZCcgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbGxpc2lvbkxhYi5yZWdpc3RlciggJ0VsYXBzZWRUaW1lTnVtYmVyRGlzcGxheScsIEVsYXBzZWRUaW1lTnVtYmVyRGlzcGxheSApO1xyXG5leHBvcnQgZGVmYXVsdCBFbGFwc2VkVGltZU51bWJlckRpc3BsYXk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLDBDQUEwQztBQUNsRSxPQUFPQyxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLE9BQU9DLGFBQWEsTUFBTSw4Q0FBOEM7QUFDeEUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyxhQUFhLE1BQU0sOENBQThDO0FBQ3hFLFNBQVNDLEtBQUssUUFBUSxtQ0FBbUM7QUFDekQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxtQkFBbUIsTUFBTSw4QkFBOEI7QUFDOUQsT0FBT0MscUJBQXFCLE1BQU0sNkJBQTZCO0FBRS9ELE1BQU1DLHdCQUF3QixTQUFTUCxhQUFhLENBQUM7RUFFbkQ7QUFDRjtBQUNBO0FBQ0E7RUFDRVEsV0FBV0EsQ0FBRUMsbUJBQW1CLEVBQUVDLE9BQU8sRUFBRztJQUMxQ0MsTUFBTSxJQUFJYixXQUFXLENBQUNjLGdCQUFnQixDQUFFSCxtQkFBbUIsRUFBRSxRQUFTLENBQUM7SUFFdkVDLE9BQU8sR0FBR2IsS0FBSyxDQUFFO01BRWY7TUFDQWdCLFlBQVksRUFBRSxJQUFJakIsS0FBSyxDQUFFLENBQUMsRUFBRSxJQUFLLENBQUM7TUFFbEM7TUFDQWtCLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLGdCQUFnQixFQUFFYixLQUFLLENBQUNjLEtBQUs7TUFDN0JDLFlBQVksRUFBRW5CLFdBQVcsQ0FBQ29CLE1BQU0sQ0FBRWQsbUJBQW1CLENBQUNlLE9BQU8sQ0FBQ0MsZUFBZSxFQUFFO1FBQzdFQyxLQUFLLEVBQUVqQixtQkFBbUIsQ0FBQ2lCLEtBQUssQ0FBQ0M7TUFDbkMsQ0FBRSxDQUFDO01BQ0hDLFdBQVcsRUFBRTtRQUNYQyxRQUFRLEVBQUUsRUFBRTtRQUFFOztRQUVkO1FBQ0FDLElBQUksRUFBRSxJQUFJekIsUUFBUSxDQUFFO1VBQ2xCMEIsTUFBTSxFQUFFekIsYUFBYSxDQUFDMEIsa0JBQWtCO1VBQ3hDQyxJQUFJLEVBQUV2QixxQkFBcUIsQ0FBQ3dCLFlBQVksQ0FBQ0Q7UUFDM0MsQ0FBRTtNQUNKLENBQUM7TUFDREUsYUFBYSxFQUFFekIscUJBQXFCLENBQUMwQjtJQUV2QyxDQUFDLEVBQUV0QixPQUFRLENBQUM7SUFFWixLQUFLLENBQUVELG1CQUFtQixFQUFFQyxPQUFPLENBQUNHLFlBQVksRUFBRUgsT0FBUSxDQUFDO0VBQzdEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0V1QixPQUFPQSxDQUFBLEVBQUc7SUFDUnRCLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSx5REFBMEQsQ0FBQztFQUN0RjtBQUNGO0FBRUFQLFlBQVksQ0FBQzhCLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRTNCLHdCQUF5QixDQUFDO0FBQzdFLGVBQWVBLHdCQUF3QiJ9