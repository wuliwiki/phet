// Copyright 2019-2020, University of Colorado Boulder

/**
 * Properties that are only used within the view hierarchy of the 'Collision Lab' simulation.
 *
 * @author Martin Veillette
 * @author Brandon Li
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import collisionLab from '../../collisionLab.js';
class CollisionLabViewProperties {
  constructor() {
    // @public {Property.<boolean>} - indicates if the velocity vectors of Balls are visible.
    this.velocityVectorVisibleProperty = new BooleanProperty(true);

    // @public {Property.<boolean>} - indicates if the momentum vectors of Balls are visible.
    this.momentumVectorVisibleProperty = new BooleanProperty(false);

    // @public {Property.<boolean>} - indicates if the Ball 'values' NumberDisplays that appear next to Balls are visible.
    this.valuesVisibleProperty = new BooleanProperty(false);

    // @public {Property.<boolean>} - indicates if the Kinetic Energy NumberDisplay is visible.
    this.kineticEnergyVisibleProperty = new BooleanProperty(false);

    // @public {Property.<boolean>} - indicates if the 'More Data' in the BallValuesPanel is visible.
    this.moreDataVisibleProperty = new BooleanProperty(false);
  }

  /**
   * Resets the CollisionLabViewProperties.
   * @public
   *
   * Called when the reset-all button is pressed.
   */
  reset() {
    this.velocityVectorVisibleProperty.reset();
    this.momentumVectorVisibleProperty.reset();
    this.valuesVisibleProperty.reset();
    this.kineticEnergyVisibleProperty.reset();
    this.moreDataVisibleProperty.reset();
  }
}
collisionLab.register('CollisionLabViewProperties', CollisionLabViewProperties);
export default CollisionLabViewProperties;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJjb2xsaXNpb25MYWIiLCJDb2xsaXNpb25MYWJWaWV3UHJvcGVydGllcyIsImNvbnN0cnVjdG9yIiwidmVsb2NpdHlWZWN0b3JWaXNpYmxlUHJvcGVydHkiLCJtb21lbnR1bVZlY3RvclZpc2libGVQcm9wZXJ0eSIsInZhbHVlc1Zpc2libGVQcm9wZXJ0eSIsImtpbmV0aWNFbmVyZ3lWaXNpYmxlUHJvcGVydHkiLCJtb3JlRGF0YVZpc2libGVQcm9wZXJ0eSIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb2xsaXNpb25MYWJWaWV3UHJvcGVydGllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIG9ubHkgdXNlZCB3aXRoaW4gdGhlIHZpZXcgaGllcmFyY2h5IG9mIHRoZSAnQ29sbGlzaW9uIExhYicgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgY29sbGlzaW9uTGFiIGZyb20gJy4uLy4uL2NvbGxpc2lvbkxhYi5qcyc7XHJcblxyXG5jbGFzcyBDb2xsaXNpb25MYWJWaWV3UHJvcGVydGllcyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn0gLSBpbmRpY2F0ZXMgaWYgdGhlIHZlbG9jaXR5IHZlY3RvcnMgb2YgQmFsbHMgYXJlIHZpc2libGUuXHJcbiAgICB0aGlzLnZlbG9jaXR5VmVjdG9yVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn0gLSBpbmRpY2F0ZXMgaWYgdGhlIG1vbWVudHVtIHZlY3RvcnMgb2YgQmFsbHMgYXJlIHZpc2libGUuXHJcbiAgICB0aGlzLm1vbWVudHVtVmVjdG9yVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48Ym9vbGVhbj59IC0gaW5kaWNhdGVzIGlmIHRoZSBCYWxsICd2YWx1ZXMnIE51bWJlckRpc3BsYXlzIHRoYXQgYXBwZWFyIG5leHQgdG8gQmFsbHMgYXJlIHZpc2libGUuXHJcbiAgICB0aGlzLnZhbHVlc1Zpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPGJvb2xlYW4+fSAtIGluZGljYXRlcyBpZiB0aGUgS2luZXRpYyBFbmVyZ3kgTnVtYmVyRGlzcGxheSBpcyB2aXNpYmxlLlxyXG4gICAgdGhpcy5raW5ldGljRW5lcmd5VmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48Ym9vbGVhbj59IC0gaW5kaWNhdGVzIGlmIHRoZSAnTW9yZSBEYXRhJyBpbiB0aGUgQmFsbFZhbHVlc1BhbmVsIGlzIHZpc2libGUuXHJcbiAgICB0aGlzLm1vcmVEYXRhVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyB0aGUgQ29sbGlzaW9uTGFiVmlld1Byb3BlcnRpZXMuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHJlc2V0LWFsbCBidXR0b24gaXMgcHJlc3NlZC5cclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMudmVsb2NpdHlWZWN0b3JWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubW9tZW50dW1WZWN0b3JWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMudmFsdWVzVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmtpbmV0aWNFbmVyZ3lWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubW9yZURhdGFWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbGxpc2lvbkxhYi5yZWdpc3RlciggJ0NvbGxpc2lvbkxhYlZpZXdQcm9wZXJ0aWVzJywgQ29sbGlzaW9uTGFiVmlld1Byb3BlcnRpZXMgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ29sbGlzaW9uTGFiVmlld1Byb3BlcnRpZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBRWhELE1BQU1DLDBCQUEwQixDQUFDO0VBRS9CQyxXQUFXQSxDQUFBLEVBQUc7SUFFWjtJQUNBLElBQUksQ0FBQ0MsNkJBQTZCLEdBQUcsSUFBSUosZUFBZSxDQUFFLElBQUssQ0FBQzs7SUFFaEU7SUFDQSxJQUFJLENBQUNLLDZCQUE2QixHQUFHLElBQUlMLGVBQWUsQ0FBRSxLQUFNLENBQUM7O0lBRWpFO0lBQ0EsSUFBSSxDQUFDTSxxQkFBcUIsR0FBRyxJQUFJTixlQUFlLENBQUUsS0FBTSxDQUFDOztJQUV6RDtJQUNBLElBQUksQ0FBQ08sNEJBQTRCLEdBQUcsSUFBSVAsZUFBZSxDQUFFLEtBQU0sQ0FBQzs7SUFFaEU7SUFDQSxJQUFJLENBQUNRLHVCQUF1QixHQUFHLElBQUlSLGVBQWUsQ0FBRSxLQUFNLENBQUM7RUFDN0Q7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VTLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ0wsNkJBQTZCLENBQUNLLEtBQUssQ0FBQyxDQUFDO0lBQzFDLElBQUksQ0FBQ0osNkJBQTZCLENBQUNJLEtBQUssQ0FBQyxDQUFDO0lBQzFDLElBQUksQ0FBQ0gscUJBQXFCLENBQUNHLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQ0YsNEJBQTRCLENBQUNFLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLElBQUksQ0FBQ0QsdUJBQXVCLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ3RDO0FBQ0Y7QUFFQVIsWUFBWSxDQUFDUyxRQUFRLENBQUUsNEJBQTRCLEVBQUVSLDBCQUEyQixDQUFDO0FBQ2pGLGVBQWVBLDBCQUEwQiJ9