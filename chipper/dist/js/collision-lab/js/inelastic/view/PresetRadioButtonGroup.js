// Copyright 2020-2023, University of Colorado Boulder

/**
 * PresetRadioButtonGroup is a RationButtonGroup sub-type that allows the user to select the different 'Presets'. It
 * appears only on the bottom-left corner of the 'Inelastic' screen. A RadioButton is created for every 'Preset'. See
 * InelasticPreset.js for more context.
 *
 * Icons are created from CollisionLabIconFactory. PresetRadioButtonGroup is never disposed and exists for the entire
 * simulation.
 *
 * @author Brandon Li
 */

import merge from '../../../../phet-core/js/merge.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import collisionLab from '../../collisionLab.js';
import CollisionLabColors from '../../common/CollisionLabColors.js';
import CollisionLabIconFactory from '../../common/view/CollisionLabIconFactory.js';
import InelasticPreset from '../model/InelasticPreset.js';
class PresetRadioButtonGroup extends RectangularRadioButtonGroup {
  /**
   * @param {Property.<InelasticPreset>} presetProperty
   * @param {Object} [options]
   */
  constructor(presetProperty, options) {
    assert && AssertUtils.assertEnumerationDeprecatedPropertyOf(presetProperty, InelasticPreset);
    options = merge({
      orientation: 'horizontal',
      radioButtonOptions: {
        baseColor: CollisionLabColors.RADIO_BUTTON_BASE_COLOR,
        cornerRadius: 8,
        xMargin: 12,
        yMargin: 4,
        buttonAppearanceStrategyOptions: {
          deselectedLineWidth: 1,
          selectedLineWidth: 1.5,
          deselectedButtonOpacity: 0.35,
          selectedStroke: CollisionLabColors.RADIO_BUTTON_SELECTED_STROKE,
          deselectedStroke: CollisionLabColors.RADIO_BUTTON_DESELECTED_STROKE
        }
      }
    }, options);

    // Create the description of the radio buttons
    const content = InelasticPreset.VALUES.map(preset => {
      return {
        value: preset,
        createNode: () => CollisionLabIconFactory.createInelasticPresetIcon(preset)
      };
    });
    super(presetProperty, content, options);
  }
}
collisionLab.register('PresetRadioButtonGroup', PresetRadioButtonGroup);
export default PresetRadioButtonGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFzc2VydFV0aWxzIiwiUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIiwiY29sbGlzaW9uTGFiIiwiQ29sbGlzaW9uTGFiQ29sb3JzIiwiQ29sbGlzaW9uTGFiSWNvbkZhY3RvcnkiLCJJbmVsYXN0aWNQcmVzZXQiLCJQcmVzZXRSYWRpb0J1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJwcmVzZXRQcm9wZXJ0eSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJhc3NlcnRFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eU9mIiwib3JpZW50YXRpb24iLCJyYWRpb0J1dHRvbk9wdGlvbnMiLCJiYXNlQ29sb3IiLCJSQURJT19CVVRUT05fQkFTRV9DT0xPUiIsImNvcm5lclJhZGl1cyIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9ucyIsImRlc2VsZWN0ZWRMaW5lV2lkdGgiLCJzZWxlY3RlZExpbmVXaWR0aCIsImRlc2VsZWN0ZWRCdXR0b25PcGFjaXR5Iiwic2VsZWN0ZWRTdHJva2UiLCJSQURJT19CVVRUT05fU0VMRUNURURfU1RST0tFIiwiZGVzZWxlY3RlZFN0cm9rZSIsIlJBRElPX0JVVFRPTl9ERVNFTEVDVEVEX1NUUk9LRSIsImNvbnRlbnQiLCJWQUxVRVMiLCJtYXAiLCJwcmVzZXQiLCJ2YWx1ZSIsImNyZWF0ZU5vZGUiLCJjcmVhdGVJbmVsYXN0aWNQcmVzZXRJY29uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcmVzZXRSYWRpb0J1dHRvbkdyb3VwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFByZXNldFJhZGlvQnV0dG9uR3JvdXAgaXMgYSBSYXRpb25CdXR0b25Hcm91cCBzdWItdHlwZSB0aGF0IGFsbG93cyB0aGUgdXNlciB0byBzZWxlY3QgdGhlIGRpZmZlcmVudCAnUHJlc2V0cycuIEl0XHJcbiAqIGFwcGVhcnMgb25seSBvbiB0aGUgYm90dG9tLWxlZnQgY29ybmVyIG9mIHRoZSAnSW5lbGFzdGljJyBzY3JlZW4uIEEgUmFkaW9CdXR0b24gaXMgY3JlYXRlZCBmb3IgZXZlcnkgJ1ByZXNldCcuIFNlZVxyXG4gKiBJbmVsYXN0aWNQcmVzZXQuanMgZm9yIG1vcmUgY29udGV4dC5cclxuICpcclxuICogSWNvbnMgYXJlIGNyZWF0ZWQgZnJvbSBDb2xsaXNpb25MYWJJY29uRmFjdG9yeS4gUHJlc2V0UmFkaW9CdXR0b25Hcm91cCBpcyBuZXZlciBkaXNwb3NlZCBhbmQgZXhpc3RzIGZvciB0aGUgZW50aXJlXHJcbiAqIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgQXNzZXJ0VXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy9Bc3NlcnRVdGlscy5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IGNvbGxpc2lvbkxhYiBmcm9tICcuLi8uLi9jb2xsaXNpb25MYWIuanMnO1xyXG5pbXBvcnQgQ29sbGlzaW9uTGFiQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9Db2xsaXNpb25MYWJDb2xvcnMuanMnO1xyXG5pbXBvcnQgQ29sbGlzaW9uTGFiSWNvbkZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQ29sbGlzaW9uTGFiSWNvbkZhY3RvcnkuanMnO1xyXG5pbXBvcnQgSW5lbGFzdGljUHJlc2V0IGZyb20gJy4uL21vZGVsL0luZWxhc3RpY1ByZXNldC5qcyc7XHJcblxyXG5jbGFzcyBQcmVzZXRSYWRpb0J1dHRvbkdyb3VwIGV4dGVuZHMgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48SW5lbGFzdGljUHJlc2V0Pn0gcHJlc2V0UHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHByZXNldFByb3BlcnR5LCBvcHRpb25zICkge1xyXG4gICAgYXNzZXJ0ICYmIEFzc2VydFV0aWxzLmFzc2VydEVudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5T2YoIHByZXNldFByb3BlcnR5LCBJbmVsYXN0aWNQcmVzZXQgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgcmFkaW9CdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgYmFzZUNvbG9yOiBDb2xsaXNpb25MYWJDb2xvcnMuUkFESU9fQlVUVE9OX0JBU0VfQ09MT1IsXHJcbiAgICAgICAgY29ybmVyUmFkaXVzOiA4LFxyXG4gICAgICAgIHhNYXJnaW46IDEyLFxyXG4gICAgICAgIHlNYXJnaW46IDQsXHJcbiAgICAgICAgYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9uczoge1xyXG4gICAgICAgICAgZGVzZWxlY3RlZExpbmVXaWR0aDogMSxcclxuICAgICAgICAgIHNlbGVjdGVkTGluZVdpZHRoOiAxLjUsXHJcbiAgICAgICAgICBkZXNlbGVjdGVkQnV0dG9uT3BhY2l0eTogMC4zNSxcclxuICAgICAgICAgIHNlbGVjdGVkU3Ryb2tlOiBDb2xsaXNpb25MYWJDb2xvcnMuUkFESU9fQlVUVE9OX1NFTEVDVEVEX1NUUk9LRSxcclxuICAgICAgICAgIGRlc2VsZWN0ZWRTdHJva2U6IENvbGxpc2lvbkxhYkNvbG9ycy5SQURJT19CVVRUT05fREVTRUxFQ1RFRF9TVFJPS0VcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSByYWRpbyBidXR0b25zXHJcbiAgICBjb25zdCBjb250ZW50ID0gSW5lbGFzdGljUHJlc2V0LlZBTFVFUy5tYXAoIHByZXNldCA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsdWU6IHByZXNldCxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBDb2xsaXNpb25MYWJJY29uRmFjdG9yeS5jcmVhdGVJbmVsYXN0aWNQcmVzZXRJY29uKCBwcmVzZXQgKVxyXG4gICAgICB9O1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBwcmVzZXRQcm9wZXJ0eSwgY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuY29sbGlzaW9uTGFiLnJlZ2lzdGVyKCAnUHJlc2V0UmFkaW9CdXR0b25Hcm91cCcsIFByZXNldFJhZGlvQnV0dG9uR3JvdXAgKTtcclxuZXhwb3J0IGRlZmF1bHQgUHJlc2V0UmFkaW9CdXR0b25Hcm91cDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLDBDQUEwQztBQUNsRSxPQUFPQywyQkFBMkIsTUFBTSwyREFBMkQ7QUFDbkcsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxrQkFBa0IsTUFBTSxvQ0FBb0M7QUFDbkUsT0FBT0MsdUJBQXVCLE1BQU0sOENBQThDO0FBQ2xGLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFFekQsTUFBTUMsc0JBQXNCLFNBQVNMLDJCQUEyQixDQUFDO0VBRS9EO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLGNBQWMsRUFBRUMsT0FBTyxFQUFHO0lBQ3JDQyxNQUFNLElBQUlWLFdBQVcsQ0FBQ1cscUNBQXFDLENBQUVILGNBQWMsRUFBRUgsZUFBZ0IsQ0FBQztJQUU5RkksT0FBTyxHQUFHVixLQUFLLENBQUU7TUFDZmEsV0FBVyxFQUFFLFlBQVk7TUFDekJDLGtCQUFrQixFQUFFO1FBQ2xCQyxTQUFTLEVBQUVYLGtCQUFrQixDQUFDWSx1QkFBdUI7UUFDckRDLFlBQVksRUFBRSxDQUFDO1FBQ2ZDLE9BQU8sRUFBRSxFQUFFO1FBQ1hDLE9BQU8sRUFBRSxDQUFDO1FBQ1ZDLCtCQUErQixFQUFFO1VBQy9CQyxtQkFBbUIsRUFBRSxDQUFDO1VBQ3RCQyxpQkFBaUIsRUFBRSxHQUFHO1VBQ3RCQyx1QkFBdUIsRUFBRSxJQUFJO1VBQzdCQyxjQUFjLEVBQUVwQixrQkFBa0IsQ0FBQ3FCLDRCQUE0QjtVQUMvREMsZ0JBQWdCLEVBQUV0QixrQkFBa0IsQ0FBQ3VCO1FBQ3ZDO01BQ0Y7SUFDRixDQUFDLEVBQUVqQixPQUFRLENBQUM7O0lBRVo7SUFDQSxNQUFNa0IsT0FBTyxHQUFHdEIsZUFBZSxDQUFDdUIsTUFBTSxDQUFDQyxHQUFHLENBQUVDLE1BQU0sSUFBSTtNQUNwRCxPQUFPO1FBQ0xDLEtBQUssRUFBRUQsTUFBTTtRQUNiRSxVQUFVLEVBQUVBLENBQUEsS0FBTTVCLHVCQUF1QixDQUFDNkIseUJBQXlCLENBQUVILE1BQU87TUFDOUUsQ0FBQztJQUNILENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRXRCLGNBQWMsRUFBRW1CLE9BQU8sRUFBRWxCLE9BQVEsQ0FBQztFQUMzQztBQUNGO0FBRUFQLFlBQVksQ0FBQ2dDLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRTVCLHNCQUF1QixDQUFDO0FBQ3pFLGVBQWVBLHNCQUFzQiJ9