// Copyright 2019-2022, University of Colorado Boulder

/**
 * The 'Intro' screen. Conforms to the contract specified in joist/Screen.
 *
 * @author Brandon Li
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import Tandem from '../../../tandem/js/Tandem.js';
import collisionLab from '../collisionLab.js';
import CollisionLabStrings from '../CollisionLabStrings.js';
import CollisionLabColors from '../common/CollisionLabColors.js';
import CollisionLabIconFactory from '../common/view/CollisionLabIconFactory.js';
import InelasticModel from './model/InelasticModel.js';
import InelasticScreenView from './view/InelasticScreenView.js';
class InelasticScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    assert && assert(tandem instanceof Tandem, `invalid tandem: ${tandem}`);
    const createModel = () => new InelasticModel(tandem.createTandem('model'));
    const createView = model => new InelasticScreenView(model, tandem.createTandem('view'));
    super(createModel, createView, {
      name: CollisionLabStrings.screen.inelasticStringProperty,
      backgroundColorProperty: new Property(CollisionLabColors.SCREEN_BACKGROUND),
      homeScreenIcon: CollisionLabIconFactory.createInelasticScreenIcon(),
      tandem: tandem
    });
  }
}
collisionLab.register('InelasticScreen', InelasticScreen);
export default InelasticScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlRhbmRlbSIsImNvbGxpc2lvbkxhYiIsIkNvbGxpc2lvbkxhYlN0cmluZ3MiLCJDb2xsaXNpb25MYWJDb2xvcnMiLCJDb2xsaXNpb25MYWJJY29uRmFjdG9yeSIsIkluZWxhc3RpY01vZGVsIiwiSW5lbGFzdGljU2NyZWVuVmlldyIsIkluZWxhc3RpY1NjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiYXNzZXJ0IiwiY3JlYXRlTW9kZWwiLCJjcmVhdGVUYW5kZW0iLCJjcmVhdGVWaWV3IiwibW9kZWwiLCJuYW1lIiwic2NyZWVuIiwiaW5lbGFzdGljU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIlNDUkVFTl9CQUNLR1JPVU5EIiwiaG9tZVNjcmVlbkljb24iLCJjcmVhdGVJbmVsYXN0aWNTY3JlZW5JY29uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbmVsYXN0aWNTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdJbnRybycgc2NyZWVuLiBDb25mb3JtcyB0byB0aGUgY29udHJhY3Qgc3BlY2lmaWVkIGluIGpvaXN0L1NjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBjb2xsaXNpb25MYWIgZnJvbSAnLi4vY29sbGlzaW9uTGFiLmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkxhYlN0cmluZ3MgZnJvbSAnLi4vQ29sbGlzaW9uTGFiU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBDb2xsaXNpb25MYWJDb2xvcnMgZnJvbSAnLi4vY29tbW9uL0NvbGxpc2lvbkxhYkNvbG9ycy5qcyc7XHJcbmltcG9ydCBDb2xsaXNpb25MYWJJY29uRmFjdG9yeSBmcm9tICcuLi9jb21tb24vdmlldy9Db2xsaXNpb25MYWJJY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCBJbmVsYXN0aWNNb2RlbCBmcm9tICcuL21vZGVsL0luZWxhc3RpY01vZGVsLmpzJztcclxuaW1wb3J0IEluZWxhc3RpY1NjcmVlblZpZXcgZnJvbSAnLi92aWV3L0luZWxhc3RpY1NjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgSW5lbGFzdGljU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0YW5kZW0gaW5zdGFuY2VvZiBUYW5kZW0sIGBpbnZhbGlkIHRhbmRlbTogJHt0YW5kZW19YCApO1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZU1vZGVsID0gKCkgPT4gbmV3IEluZWxhc3RpY01vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKTtcclxuICAgIGNvbnN0IGNyZWF0ZVZpZXcgPSBtb2RlbCA9PiBuZXcgSW5lbGFzdGljU2NyZWVuVmlldyggbW9kZWwsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApICk7XHJcblxyXG4gICAgc3VwZXIoIGNyZWF0ZU1vZGVsLCBjcmVhdGVWaWV3LCB7XHJcbiAgICAgIG5hbWU6IENvbGxpc2lvbkxhYlN0cmluZ3Muc2NyZWVuLmluZWxhc3RpY1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBDb2xsaXNpb25MYWJDb2xvcnMuU0NSRUVOX0JBQ0tHUk9VTkQgKSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IENvbGxpc2lvbkxhYkljb25GYWN0b3J5LmNyZWF0ZUluZWxhc3RpY1NjcmVlbkljb24oKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbGxpc2lvbkxhYi5yZWdpc3RlciggJ0luZWxhc3RpY1NjcmVlbicsIEluZWxhc3RpY1NjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBJbmVsYXN0aWNTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBQ2pELE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFDN0MsT0FBT0MsbUJBQW1CLE1BQU0sMkJBQTJCO0FBQzNELE9BQU9DLGtCQUFrQixNQUFNLGlDQUFpQztBQUNoRSxPQUFPQyx1QkFBdUIsTUFBTSwyQ0FBMkM7QUFDL0UsT0FBT0MsY0FBYyxNQUFNLDJCQUEyQjtBQUN0RCxPQUFPQyxtQkFBbUIsTUFBTSwrQkFBK0I7QUFFL0QsTUFBTUMsZUFBZSxTQUFTUixNQUFNLENBQUM7RUFFbkM7QUFDRjtBQUNBO0VBQ0VTLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUNwQkMsTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sWUFBWVQsTUFBTSxFQUFHLG1CQUFrQlMsTUFBTyxFQUFFLENBQUM7SUFFekUsTUFBTUUsV0FBVyxHQUFHQSxDQUFBLEtBQU0sSUFBSU4sY0FBYyxDQUFFSSxNQUFNLENBQUNHLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQztJQUM5RSxNQUFNQyxVQUFVLEdBQUdDLEtBQUssSUFBSSxJQUFJUixtQkFBbUIsQ0FBRVEsS0FBSyxFQUFFTCxNQUFNLENBQUNHLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQztJQUUzRixLQUFLLENBQUVELFdBQVcsRUFBRUUsVUFBVSxFQUFFO01BQzlCRSxJQUFJLEVBQUViLG1CQUFtQixDQUFDYyxNQUFNLENBQUNDLHVCQUF1QjtNQUN4REMsdUJBQXVCLEVBQUUsSUFBSXBCLFFBQVEsQ0FBRUssa0JBQWtCLENBQUNnQixpQkFBa0IsQ0FBQztNQUM3RUMsY0FBYyxFQUFFaEIsdUJBQXVCLENBQUNpQix5QkFBeUIsQ0FBQyxDQUFDO01BQ25FWixNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBUixZQUFZLENBQUNxQixRQUFRLENBQUUsaUJBQWlCLEVBQUVmLGVBQWdCLENBQUM7QUFDM0QsZUFBZUEsZUFBZSJ9