// Copyright 2020-2022, University of Colorado Boulder

/**
 * Enumeration of the possible 'types' of perfectly inelastic collisions. A perfectly inelastic happens when the
 * elasticity (and the coefficient of restitution) is 0. The documentation in this file is not exhaustive. Please also
 * see CollisionEngine.js and InelasticCollisionEngine.js for complete background.
 *
 * @author Brandon Li
 */

import EnumerationDeprecated from '../../../../phet-core/js/EnumerationDeprecated.js';
import collisionLab from '../../collisionLab.js';
const InelasticCollisionType = EnumerationDeprecated.byKeys([
// Perfectly inelastic collisions that 'slip' follow the standard collision-response algorithm, where the component of
// velocity along the 'Plane of Contact' is exactly equal before and after the collision. This is described more in
// http://web.mst.edu/~reflori/be150/Dyn%20Lecture%20Videos/Impact%20Particles%201/Impact%20Particles%201.pdf.
//
// This is the only type of perfectly inelastic collisions in the flash simulation. The collision-response algorithms
// for these collisions are handled in CollisionEngine.js.
'SLIP',
// Perfectly inelastic collisions that 'stick' are a new feature of the HTML5 version of the simulation, where
// Balls completely stick together and rotate around the center of mass of the cluster of Balls, if and only if the
// collision isn't head-on.
//
// The issue of rotations were first discussed in https://github.com/phetsims/collision-lab/issues/3 and
// later in https://github.com/phetsims/collision-lab/issues/87. The collision-response algorithms for this type of
// collision is handled in InelasticCollisionEngine.js.
'STICK']);
collisionLab.register('InelasticCollisionType', InelasticCollisionType);
export default InelasticCollisionType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbkRlcHJlY2F0ZWQiLCJjb2xsaXNpb25MYWIiLCJJbmVsYXN0aWNDb2xsaXNpb25UeXBlIiwiYnlLZXlzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbmVsYXN0aWNDb2xsaXNpb25UeXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVudW1lcmF0aW9uIG9mIHRoZSBwb3NzaWJsZSAndHlwZXMnIG9mIHBlcmZlY3RseSBpbmVsYXN0aWMgY29sbGlzaW9ucy4gQSBwZXJmZWN0bHkgaW5lbGFzdGljIGhhcHBlbnMgd2hlbiB0aGVcclxuICogZWxhc3RpY2l0eSAoYW5kIHRoZSBjb2VmZmljaWVudCBvZiByZXN0aXR1dGlvbikgaXMgMC4gVGhlIGRvY3VtZW50YXRpb24gaW4gdGhpcyBmaWxlIGlzIG5vdCBleGhhdXN0aXZlLiBQbGVhc2UgYWxzb1xyXG4gKiBzZWUgQ29sbGlzaW9uRW5naW5lLmpzIGFuZCBJbmVsYXN0aWNDb2xsaXNpb25FbmdpbmUuanMgZm9yIGNvbXBsZXRlIGJhY2tncm91bmQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvbkRlcHJlY2F0ZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uRGVwcmVjYXRlZC5qcyc7XHJcbmltcG9ydCBjb2xsaXNpb25MYWIgZnJvbSAnLi4vLi4vY29sbGlzaW9uTGFiLmpzJztcclxuXHJcbmNvbnN0IEluZWxhc3RpY0NvbGxpc2lvblR5cGUgPSBFbnVtZXJhdGlvbkRlcHJlY2F0ZWQuYnlLZXlzKCBbXHJcblxyXG4gIC8vIFBlcmZlY3RseSBpbmVsYXN0aWMgY29sbGlzaW9ucyB0aGF0ICdzbGlwJyBmb2xsb3cgdGhlIHN0YW5kYXJkIGNvbGxpc2lvbi1yZXNwb25zZSBhbGdvcml0aG0sIHdoZXJlIHRoZSBjb21wb25lbnQgb2ZcclxuICAvLyB2ZWxvY2l0eSBhbG9uZyB0aGUgJ1BsYW5lIG9mIENvbnRhY3QnIGlzIGV4YWN0bHkgZXF1YWwgYmVmb3JlIGFuZCBhZnRlciB0aGUgY29sbGlzaW9uLiBUaGlzIGlzIGRlc2NyaWJlZCBtb3JlIGluXHJcbiAgLy8gaHR0cDovL3dlYi5tc3QuZWR1L35yZWZsb3JpL2JlMTUwL0R5biUyMExlY3R1cmUlMjBWaWRlb3MvSW1wYWN0JTIwUGFydGljbGVzJTIwMS9JbXBhY3QlMjBQYXJ0aWNsZXMlMjAxLnBkZi5cclxuICAvL1xyXG4gIC8vIFRoaXMgaXMgdGhlIG9ubHkgdHlwZSBvZiBwZXJmZWN0bHkgaW5lbGFzdGljIGNvbGxpc2lvbnMgaW4gdGhlIGZsYXNoIHNpbXVsYXRpb24uIFRoZSBjb2xsaXNpb24tcmVzcG9uc2UgYWxnb3JpdGhtc1xyXG4gIC8vIGZvciB0aGVzZSBjb2xsaXNpb25zIGFyZSBoYW5kbGVkIGluIENvbGxpc2lvbkVuZ2luZS5qcy5cclxuICAnU0xJUCcsXHJcblxyXG4gIC8vIFBlcmZlY3RseSBpbmVsYXN0aWMgY29sbGlzaW9ucyB0aGF0ICdzdGljaycgYXJlIGEgbmV3IGZlYXR1cmUgb2YgdGhlIEhUTUw1IHZlcnNpb24gb2YgdGhlIHNpbXVsYXRpb24sIHdoZXJlXHJcbiAgLy8gQmFsbHMgY29tcGxldGVseSBzdGljayB0b2dldGhlciBhbmQgcm90YXRlIGFyb3VuZCB0aGUgY2VudGVyIG9mIG1hc3Mgb2YgdGhlIGNsdXN0ZXIgb2YgQmFsbHMsIGlmIGFuZCBvbmx5IGlmIHRoZVxyXG4gIC8vIGNvbGxpc2lvbiBpc24ndCBoZWFkLW9uLlxyXG4gIC8vXHJcbiAgLy8gVGhlIGlzc3VlIG9mIHJvdGF0aW9ucyB3ZXJlIGZpcnN0IGRpc2N1c3NlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY29sbGlzaW9uLWxhYi9pc3N1ZXMvMyBhbmRcclxuICAvLyBsYXRlciBpbiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY29sbGlzaW9uLWxhYi9pc3N1ZXMvODcuIFRoZSBjb2xsaXNpb24tcmVzcG9uc2UgYWxnb3JpdGhtcyBmb3IgdGhpcyB0eXBlIG9mXHJcbiAgLy8gY29sbGlzaW9uIGlzIGhhbmRsZWQgaW4gSW5lbGFzdGljQ29sbGlzaW9uRW5naW5lLmpzLlxyXG4gICdTVElDSydcclxuXHJcbl0gKTtcclxuXHJcbmNvbGxpc2lvbkxhYi5yZWdpc3RlciggJ0luZWxhc3RpY0NvbGxpc2lvblR5cGUnLCBJbmVsYXN0aWNDb2xsaXNpb25UeXBlICk7XHJcbmV4cG9ydCBkZWZhdWx0IEluZWxhc3RpY0NvbGxpc2lvblR5cGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxxQkFBcUIsTUFBTSxtREFBbUQ7QUFDckYsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUVoRCxNQUFNQyxzQkFBc0IsR0FBR0YscUJBQXFCLENBQUNHLE1BQU0sQ0FBRTtBQUUzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLENBRVAsQ0FBQztBQUVIRixZQUFZLENBQUNHLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRUYsc0JBQXVCLENBQUM7QUFDekUsZUFBZUEsc0JBQXNCIn0=