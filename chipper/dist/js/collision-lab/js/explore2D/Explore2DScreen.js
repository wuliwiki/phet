// Copyright 2019-2022, University of Colorado Boulder

/**
 * The 'Explore 2D' screen. Conforms to the contract specified in joist/Screen.
 *
 * @author Brandon Li
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import Tandem from '../../../tandem/js/Tandem.js';
import collisionLab from '../collisionLab.js';
import CollisionLabStrings from '../CollisionLabStrings.js';
import CollisionLabColors from '../common/CollisionLabColors.js';
import CollisionLabIconFactory from '../common/view/CollisionLabIconFactory.js';
import Explore2DModel from './model/Explore2DModel.js';
import Explore2DScreenView from './view/Explore2DScreenView.js';
class Explore2DScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    assert && assert(tandem instanceof Tandem, `invalid tandem: ${tandem}`);
    const createModel = () => new Explore2DModel(tandem.createTandem('model'));
    const createView = model => new Explore2DScreenView(model, tandem.createTandem('view'));
    super(createModel, createView, {
      name: CollisionLabStrings.screen.explore2DStringProperty,
      backgroundColorProperty: new Property(CollisionLabColors.SCREEN_BACKGROUND),
      homeScreenIcon: CollisionLabIconFactory.createExplore2DScreenIcon(),
      tandem: tandem
    });
  }
}
collisionLab.register('Explore2DScreen', Explore2DScreen);
export default Explore2DScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlRhbmRlbSIsImNvbGxpc2lvbkxhYiIsIkNvbGxpc2lvbkxhYlN0cmluZ3MiLCJDb2xsaXNpb25MYWJDb2xvcnMiLCJDb2xsaXNpb25MYWJJY29uRmFjdG9yeSIsIkV4cGxvcmUyRE1vZGVsIiwiRXhwbG9yZTJEU2NyZWVuVmlldyIsIkV4cGxvcmUyRFNjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiYXNzZXJ0IiwiY3JlYXRlTW9kZWwiLCJjcmVhdGVUYW5kZW0iLCJjcmVhdGVWaWV3IiwibW9kZWwiLCJuYW1lIiwic2NyZWVuIiwiZXhwbG9yZTJEU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIlNDUkVFTl9CQUNLR1JPVU5EIiwiaG9tZVNjcmVlbkljb24iLCJjcmVhdGVFeHBsb3JlMkRTY3JlZW5JY29uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeHBsb3JlMkRTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdFeHBsb3JlIDJEJyBzY3JlZW4uIENvbmZvcm1zIHRvIHRoZSBjb250cmFjdCBzcGVjaWZpZWQgaW4gam9pc3QvU2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IGNvbGxpc2lvbkxhYiBmcm9tICcuLi9jb2xsaXNpb25MYWIuanMnO1xyXG5pbXBvcnQgQ29sbGlzaW9uTGFiU3RyaW5ncyBmcm9tICcuLi9Db2xsaXNpb25MYWJTdHJpbmdzLmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkxhYkNvbG9ycyBmcm9tICcuLi9jb21tb24vQ29sbGlzaW9uTGFiQ29sb3JzLmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkxhYkljb25GYWN0b3J5IGZyb20gJy4uL2NvbW1vbi92aWV3L0NvbGxpc2lvbkxhYkljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IEV4cGxvcmUyRE1vZGVsIGZyb20gJy4vbW9kZWwvRXhwbG9yZTJETW9kZWwuanMnO1xyXG5pbXBvcnQgRXhwbG9yZTJEU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvRXhwbG9yZTJEU2NyZWVuVmlldy5qcyc7XHJcblxyXG5jbGFzcyBFeHBsb3JlMkRTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRhbmRlbSApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRhbmRlbSBpbnN0YW5jZW9mIFRhbmRlbSwgYGludmFsaWQgdGFuZGVtOiAke3RhbmRlbX1gICk7XHJcblxyXG4gICAgY29uc3QgY3JlYXRlTW9kZWwgPSAoKSA9PiBuZXcgRXhwbG9yZTJETW9kZWwoIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApO1xyXG4gICAgY29uc3QgY3JlYXRlVmlldyA9IG1vZGVsID0+IG5ldyBFeHBsb3JlMkRTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKTtcclxuXHJcbiAgICBzdXBlciggY3JlYXRlTW9kZWwsIGNyZWF0ZVZpZXcsIHtcclxuICAgICAgbmFtZTogQ29sbGlzaW9uTGFiU3RyaW5ncy5zY3JlZW4uZXhwbG9yZTJEU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoIENvbGxpc2lvbkxhYkNvbG9ycy5TQ1JFRU5fQkFDS0dST1VORCApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogQ29sbGlzaW9uTGFiSWNvbkZhY3RvcnkuY3JlYXRlRXhwbG9yZTJEU2NyZWVuSWNvbigpLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY29sbGlzaW9uTGFiLnJlZ2lzdGVyKCAnRXhwbG9yZTJEU2NyZWVuJywgRXhwbG9yZTJEU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IEV4cGxvcmUyRFNjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsWUFBWSxNQUFNLG9CQUFvQjtBQUM3QyxPQUFPQyxtQkFBbUIsTUFBTSwyQkFBMkI7QUFDM0QsT0FBT0Msa0JBQWtCLE1BQU0saUNBQWlDO0FBQ2hFLE9BQU9DLHVCQUF1QixNQUFNLDJDQUEyQztBQUMvRSxPQUFPQyxjQUFjLE1BQU0sMkJBQTJCO0FBQ3RELE9BQU9DLG1CQUFtQixNQUFNLCtCQUErQjtBQUUvRCxNQUFNQyxlQUFlLFNBQVNSLE1BQU0sQ0FBQztFQUVuQztBQUNGO0FBQ0E7RUFDRVMsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBQ3BCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsTUFBTSxZQUFZVCxNQUFNLEVBQUcsbUJBQWtCUyxNQUFPLEVBQUUsQ0FBQztJQUV6RSxNQUFNRSxXQUFXLEdBQUdBLENBQUEsS0FBTSxJQUFJTixjQUFjLENBQUVJLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDO0lBQzlFLE1BQU1DLFVBQVUsR0FBR0MsS0FBSyxJQUFJLElBQUlSLG1CQUFtQixDQUFFUSxLQUFLLEVBQUVMLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDO0lBRTNGLEtBQUssQ0FBRUQsV0FBVyxFQUFFRSxVQUFVLEVBQUU7TUFDOUJFLElBQUksRUFBRWIsbUJBQW1CLENBQUNjLE1BQU0sQ0FBQ0MsdUJBQXVCO01BQ3hEQyx1QkFBdUIsRUFBRSxJQUFJcEIsUUFBUSxDQUFFSyxrQkFBa0IsQ0FBQ2dCLGlCQUFrQixDQUFDO01BQzdFQyxjQUFjLEVBQUVoQix1QkFBdUIsQ0FBQ2lCLHlCQUF5QixDQUFDLENBQUM7TUFDbkVaLE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFSLFlBQVksQ0FBQ3FCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRWYsZUFBZ0IsQ0FBQztBQUMzRCxlQUFlQSxlQUFlIn0=