// Copyright 2014-2020, University of Colorado Boulder

/**
 * Main view node for Energy screen in 'Pendulum Lab' simulation.
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import PendulumLabConstants from '../../common/PendulumLabConstants.js';
import PendulumLabScreenView from '../../common/view/PendulumLabScreenView.js';
import pendulumLab from '../../pendulumLab.js';
import EnergyGraphAccordionBox from './EnergyGraphAccordionBox.js';
class EnergyScreenView extends PendulumLabScreenView {
  /**
   * @param {PendulumLabModel} model
   */
  constructor(model, options) {
    super(model, options);

    // @protected {Property.<number>}
    this.chartHeightProperty = new NumberProperty(200);

    // create and add energy graph node to the bottom layer
    const energyGraphAccordionBox = new EnergyGraphAccordionBox(model, this.chartHeightProperty, {
      left: this.layoutBounds.left + PendulumLabConstants.PANEL_PADDING,
      top: this.layoutBounds.top + PendulumLabConstants.PANEL_PADDING
    });
    this.energyGraphLayer.addChild(energyGraphAccordionBox);

    // @protected {EnergyGraphAccordionBox}
    this.energyGraphAccordionBox = energyGraphAccordionBox;

    // move ruler and stopwatch to the right side
    this.rulerNode.centerX += energyGraphAccordionBox.width + 10;
    model.ruler.setInitialPositionValue(this.rulerNode.center);
    this.setStopwatchInitialPosition();
    this.resizeEnergyGraphToFit();
  }

  /**
   * Changes the chart height so that the energy graph fits all available size
   * @protected
   */
  resizeEnergyGraphToFit() {
    const currentSpace = this.toolsControlPanelNode.top - this.energyGraphAccordionBox.bottom;
    const desiredSpace = PendulumLabConstants.PANEL_PADDING;
    this.chartHeightProperty.value += currentSpace - desiredSpace;
  }
}
pendulumLab.register('EnergyScreenView', EnergyScreenView);
export default EnergyScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlBlbmR1bHVtTGFiQ29uc3RhbnRzIiwiUGVuZHVsdW1MYWJTY3JlZW5WaWV3IiwicGVuZHVsdW1MYWIiLCJFbmVyZ3lHcmFwaEFjY29yZGlvbkJveCIsIkVuZXJneVNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwib3B0aW9ucyIsImNoYXJ0SGVpZ2h0UHJvcGVydHkiLCJlbmVyZ3lHcmFwaEFjY29yZGlvbkJveCIsImxlZnQiLCJsYXlvdXRCb3VuZHMiLCJQQU5FTF9QQURESU5HIiwidG9wIiwiZW5lcmd5R3JhcGhMYXllciIsImFkZENoaWxkIiwicnVsZXJOb2RlIiwiY2VudGVyWCIsIndpZHRoIiwicnVsZXIiLCJzZXRJbml0aWFsUG9zaXRpb25WYWx1ZSIsImNlbnRlciIsInNldFN0b3B3YXRjaEluaXRpYWxQb3NpdGlvbiIsInJlc2l6ZUVuZXJneUdyYXBoVG9GaXQiLCJjdXJyZW50U3BhY2UiLCJ0b29sc0NvbnRyb2xQYW5lbE5vZGUiLCJib3R0b20iLCJkZXNpcmVkU3BhY2UiLCJ2YWx1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5lcmd5U2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWluIHZpZXcgbm9kZSBmb3IgRW5lcmd5IHNjcmVlbiBpbiAnUGVuZHVsdW0gTGFiJyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJleSBaZWxlbmtvdiAoTWxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUGVuZHVsdW1MYWJDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1BlbmR1bHVtTGFiQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFBlbmR1bHVtTGFiU2NyZWVuVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9QZW5kdWx1bUxhYlNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgcGVuZHVsdW1MYWIgZnJvbSAnLi4vLi4vcGVuZHVsdW1MYWIuanMnO1xyXG5pbXBvcnQgRW5lcmd5R3JhcGhBY2NvcmRpb25Cb3ggZnJvbSAnLi9FbmVyZ3lHcmFwaEFjY29yZGlvbkJveC5qcyc7XHJcblxyXG5jbGFzcyBFbmVyZ3lTY3JlZW5WaWV3IGV4dGVuZHMgUGVuZHVsdW1MYWJTY3JlZW5WaWV3IHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge1BlbmR1bHVtTGFiTW9kZWx9IG1vZGVsXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBvcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcm90ZWN0ZWQge1Byb3BlcnR5LjxudW1iZXI+fVxyXG4gICAgdGhpcy5jaGFydEhlaWdodFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCAyMDAgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgYW5kIGFkZCBlbmVyZ3kgZ3JhcGggbm9kZSB0byB0aGUgYm90dG9tIGxheWVyXHJcbiAgICBjb25zdCBlbmVyZ3lHcmFwaEFjY29yZGlvbkJveCA9IG5ldyBFbmVyZ3lHcmFwaEFjY29yZGlvbkJveCggbW9kZWwsIHRoaXMuY2hhcnRIZWlnaHRQcm9wZXJ0eSwge1xyXG4gICAgICBsZWZ0OiB0aGlzLmxheW91dEJvdW5kcy5sZWZ0ICsgUGVuZHVsdW1MYWJDb25zdGFudHMuUEFORUxfUEFERElORyxcclxuICAgICAgdG9wOiB0aGlzLmxheW91dEJvdW5kcy50b3AgKyBQZW5kdWx1bUxhYkNvbnN0YW50cy5QQU5FTF9QQURESU5HXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmVuZXJneUdyYXBoTGF5ZXIuYWRkQ2hpbGQoIGVuZXJneUdyYXBoQWNjb3JkaW9uQm94ICk7XHJcblxyXG4gICAgLy8gQHByb3RlY3RlZCB7RW5lcmd5R3JhcGhBY2NvcmRpb25Cb3h9XHJcbiAgICB0aGlzLmVuZXJneUdyYXBoQWNjb3JkaW9uQm94ID0gZW5lcmd5R3JhcGhBY2NvcmRpb25Cb3g7XHJcblxyXG4gICAgLy8gbW92ZSBydWxlciBhbmQgc3RvcHdhdGNoIHRvIHRoZSByaWdodCBzaWRlXHJcbiAgICB0aGlzLnJ1bGVyTm9kZS5jZW50ZXJYICs9ICggZW5lcmd5R3JhcGhBY2NvcmRpb25Cb3gud2lkdGggKyAxMCApO1xyXG4gICAgbW9kZWwucnVsZXIuc2V0SW5pdGlhbFBvc2l0aW9uVmFsdWUoIHRoaXMucnVsZXJOb2RlLmNlbnRlciApO1xyXG5cclxuICAgIHRoaXMuc2V0U3RvcHdhdGNoSW5pdGlhbFBvc2l0aW9uKCk7XHJcblxyXG4gICAgdGhpcy5yZXNpemVFbmVyZ3lHcmFwaFRvRml0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFuZ2VzIHRoZSBjaGFydCBoZWlnaHQgc28gdGhhdCB0aGUgZW5lcmd5IGdyYXBoIGZpdHMgYWxsIGF2YWlsYWJsZSBzaXplXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqL1xyXG4gIHJlc2l6ZUVuZXJneUdyYXBoVG9GaXQoKSB7XHJcbiAgICBjb25zdCBjdXJyZW50U3BhY2UgPSB0aGlzLnRvb2xzQ29udHJvbFBhbmVsTm9kZS50b3AgLSB0aGlzLmVuZXJneUdyYXBoQWNjb3JkaW9uQm94LmJvdHRvbTtcclxuICAgIGNvbnN0IGRlc2lyZWRTcGFjZSA9IFBlbmR1bHVtTGFiQ29uc3RhbnRzLlBBTkVMX1BBRERJTkc7XHJcblxyXG4gICAgdGhpcy5jaGFydEhlaWdodFByb3BlcnR5LnZhbHVlICs9IGN1cnJlbnRTcGFjZSAtIGRlc2lyZWRTcGFjZTtcclxuICB9XHJcbn1cclxuXHJcbnBlbmR1bHVtTGFiLnJlZ2lzdGVyKCAnRW5lcmd5U2NyZWVuVmlldycsIEVuZXJneVNjcmVlblZpZXcgKTtcclxuZXhwb3J0IGRlZmF1bHQgRW5lcmd5U2NyZWVuVmlldztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0Msb0JBQW9CLE1BQU0sc0NBQXNDO0FBQ3ZFLE9BQU9DLHFCQUFxQixNQUFNLDRDQUE0QztBQUM5RSxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLHVCQUF1QixNQUFNLDhCQUE4QjtBQUVsRSxNQUFNQyxnQkFBZ0IsU0FBU0gscUJBQXFCLENBQUM7RUFDbkQ7QUFDRjtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFHO0lBRTVCLEtBQUssQ0FBRUQsS0FBSyxFQUFFQyxPQUFRLENBQUM7O0lBRXZCO0lBQ0EsSUFBSSxDQUFDQyxtQkFBbUIsR0FBRyxJQUFJVCxjQUFjLENBQUUsR0FBSSxDQUFDOztJQUVwRDtJQUNBLE1BQU1VLHVCQUF1QixHQUFHLElBQUlOLHVCQUF1QixDQUFFRyxLQUFLLEVBQUUsSUFBSSxDQUFDRSxtQkFBbUIsRUFBRTtNQUM1RkUsSUFBSSxFQUFFLElBQUksQ0FBQ0MsWUFBWSxDQUFDRCxJQUFJLEdBQUdWLG9CQUFvQixDQUFDWSxhQUFhO01BQ2pFQyxHQUFHLEVBQUUsSUFBSSxDQUFDRixZQUFZLENBQUNFLEdBQUcsR0FBR2Isb0JBQW9CLENBQUNZO0lBQ3BELENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0UsZ0JBQWdCLENBQUNDLFFBQVEsQ0FBRU4sdUJBQXdCLENBQUM7O0lBRXpEO0lBQ0EsSUFBSSxDQUFDQSx1QkFBdUIsR0FBR0EsdUJBQXVCOztJQUV0RDtJQUNBLElBQUksQ0FBQ08sU0FBUyxDQUFDQyxPQUFPLElBQU1SLHVCQUF1QixDQUFDUyxLQUFLLEdBQUcsRUFBSTtJQUNoRVosS0FBSyxDQUFDYSxLQUFLLENBQUNDLHVCQUF1QixDQUFFLElBQUksQ0FBQ0osU0FBUyxDQUFDSyxNQUFPLENBQUM7SUFFNUQsSUFBSSxDQUFDQywyQkFBMkIsQ0FBQyxDQUFDO0lBRWxDLElBQUksQ0FBQ0Msc0JBQXNCLENBQUMsQ0FBQztFQUMvQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFQSxzQkFBc0JBLENBQUEsRUFBRztJQUN2QixNQUFNQyxZQUFZLEdBQUcsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQ1osR0FBRyxHQUFHLElBQUksQ0FBQ0osdUJBQXVCLENBQUNpQixNQUFNO0lBQ3pGLE1BQU1DLFlBQVksR0FBRzNCLG9CQUFvQixDQUFDWSxhQUFhO0lBRXZELElBQUksQ0FBQ0osbUJBQW1CLENBQUNvQixLQUFLLElBQUlKLFlBQVksR0FBR0csWUFBWTtFQUMvRDtBQUNGO0FBRUF6QixXQUFXLENBQUMyQixRQUFRLENBQUUsa0JBQWtCLEVBQUV6QixnQkFBaUIsQ0FBQztBQUM1RCxlQUFlQSxnQkFBZ0IifQ==