// Copyright 2014-2020, University of Colorado Boulder

/**
 * Main model constructor for Energy screen in 'Pendulum Lab' simulation.
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Property from '../../../../axon/js/Property.js';
import merge from '../../../../phet-core/js/merge.js';
import PendulumLabModel from '../../common/model/PendulumLabModel.js';
import pendulumLab from '../../pendulumLab.js';
class EnergyModel extends PendulumLabModel {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      rulerInitiallyVisible: false,
      // Hide the ruler by default on the energy screens
      energyBoxExpanded: true
    }, options);
    super(options);

    // add energy mode property
    this.isEnergyBoxExpandedProperty = new BooleanProperty(options.energyBoxExpanded);

    // @public {Property.<Pendulum>} - The pendulum whose energy will be displayed in the plot.
    this.activeEnergyPendulumProperty = new Property(this.pendula[0]);
  }

  /**
   * Function that resets all the property associated with the energy model
   * @public
   */
  reset() {
    super.reset();
    this.isEnergyBoxExpandedProperty.reset();
    this.activeEnergyPendulumProperty.reset();
  }
}
pendulumLab.register('EnergyModel', EnergyModel);
export default EnergyModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJQcm9wZXJ0eSIsIm1lcmdlIiwiUGVuZHVsdW1MYWJNb2RlbCIsInBlbmR1bHVtTGFiIiwiRW5lcmd5TW9kZWwiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJydWxlckluaXRpYWxseVZpc2libGUiLCJlbmVyZ3lCb3hFeHBhbmRlZCIsImlzRW5lcmd5Qm94RXhwYW5kZWRQcm9wZXJ0eSIsImFjdGl2ZUVuZXJneVBlbmR1bHVtUHJvcGVydHkiLCJwZW5kdWxhIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVuZXJneU1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gbW9kZWwgY29uc3RydWN0b3IgZm9yIEVuZXJneSBzY3JlZW4gaW4gJ1BlbmR1bHVtIExhYicgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBBbmRyZXkgWmVsZW5rb3YgKE1sZWFybmVyKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgUGVuZHVsdW1MYWJNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUGVuZHVsdW1MYWJNb2RlbC5qcyc7XHJcbmltcG9ydCBwZW5kdWx1bUxhYiBmcm9tICcuLi8uLi9wZW5kdWx1bUxhYi5qcyc7XHJcblxyXG5jbGFzcyBFbmVyZ3lNb2RlbCBleHRlbmRzIFBlbmR1bHVtTGFiTW9kZWwge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBydWxlckluaXRpYWxseVZpc2libGU6IGZhbHNlLCAvLyBIaWRlIHRoZSBydWxlciBieSBkZWZhdWx0IG9uIHRoZSBlbmVyZ3kgc2NyZWVuc1xyXG4gICAgICBlbmVyZ3lCb3hFeHBhbmRlZDogdHJ1ZVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gYWRkIGVuZXJneSBtb2RlIHByb3BlcnR5XHJcbiAgICB0aGlzLmlzRW5lcmd5Qm94RXhwYW5kZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIG9wdGlvbnMuZW5lcmd5Qm94RXhwYW5kZWQgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48UGVuZHVsdW0+fSAtIFRoZSBwZW5kdWx1bSB3aG9zZSBlbmVyZ3kgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIHBsb3QuXHJcbiAgICB0aGlzLmFjdGl2ZUVuZXJneVBlbmR1bHVtUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHRoaXMucGVuZHVsYVsgMCBdICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGdW5jdGlvbiB0aGF0IHJlc2V0cyBhbGwgdGhlIHByb3BlcnR5IGFzc29jaWF0ZWQgd2l0aCB0aGUgZW5lcmd5IG1vZGVsXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICAgIHRoaXMuaXNFbmVyZ3lCb3hFeHBhbmRlZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmFjdGl2ZUVuZXJneVBlbmR1bHVtUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnBlbmR1bHVtTGFiLnJlZ2lzdGVyKCAnRW5lcmd5TW9kZWwnLCBFbmVyZ3lNb2RlbCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRW5lcmd5TW9kZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLGdCQUFnQixNQUFNLHdDQUF3QztBQUNyRSxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBRTlDLE1BQU1DLFdBQVcsU0FBU0YsZ0JBQWdCLENBQUM7RUFDekM7QUFDRjtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUNyQkEsT0FBTyxHQUFHTCxLQUFLLENBQUU7TUFDZk0scUJBQXFCLEVBQUUsS0FBSztNQUFFO01BQzlCQyxpQkFBaUIsRUFBRTtJQUNyQixDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUEsT0FBUSxDQUFDOztJQUVoQjtJQUNBLElBQUksQ0FBQ0csMkJBQTJCLEdBQUcsSUFBSVYsZUFBZSxDQUFFTyxPQUFPLENBQUNFLGlCQUFrQixDQUFDOztJQUVuRjtJQUNBLElBQUksQ0FBQ0UsNEJBQTRCLEdBQUcsSUFBSVYsUUFBUSxDQUFFLElBQUksQ0FBQ1csT0FBTyxDQUFFLENBQUMsQ0FBRyxDQUFDO0VBQ3ZFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLEtBQUtBLENBQUEsRUFBRztJQUNOLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7SUFDYixJQUFJLENBQUNILDJCQUEyQixDQUFDRyxLQUFLLENBQUMsQ0FBQztJQUN4QyxJQUFJLENBQUNGLDRCQUE0QixDQUFDRSxLQUFLLENBQUMsQ0FBQztFQUMzQztBQUNGO0FBRUFULFdBQVcsQ0FBQ1UsUUFBUSxDQUFFLGFBQWEsRUFBRVQsV0FBWSxDQUFDO0FBRWxELGVBQWVBLFdBQVcifQ==