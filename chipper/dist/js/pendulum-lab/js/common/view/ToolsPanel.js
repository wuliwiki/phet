// Copyright 2014-2023, University of Colorado Boulder

/**
 * Tools control panel node in 'Pendulum Lab' simulation.
 * Contains checkbox buttons to control visibility of ruler, stopwatch and period trace tools.
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import merge from '../../../../phet-core/js/merge.js';
import { AlignBox, Text } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import VerticalCheckboxGroup from '../../../../sun/js/VerticalCheckboxGroup.js';
import pendulumLab from '../../pendulumLab.js';
import PendulumLabStrings from '../../PendulumLabStrings.js';
import PendulumLabConstants from '../PendulumLabConstants.js';
const periodTimerString = PendulumLabStrings.periodTimer;
const periodTraceString = PendulumLabStrings.periodTrace;
const rulerString = PendulumLabStrings.ruler;
const stopwatchString = PendulumLabStrings.stopwatch;

// constants
const TEXT_OPTIONS = {
  font: PendulumLabConstants.TITLE_FONT,
  pickable: false,
  maxWidth: 100
};
class ToolsPanel extends Panel {
  /**
   * @param {Property.<boolean>} isRulerProperty - property to control visibility of ruler.
   * @param {Property.<boolean>} isStopwatchProperty - property to control visibility of stopwatch.
   * @param {Property.<boolean>} isPeriodTraceProperty - property to control visibility of period trace tool.
   * @param {boolean} hasPeriodTimer
   * @param {Object} [options]
   */
  constructor(isRulerProperty, isStopwatchProperty, isPeriodTraceProperty, hasPeriodTimer, options) {
    options = merge({}, PendulumLabConstants.PANEL_OPTIONS, options);
    const items = [{
      createNode: () => new Text(rulerString, TEXT_OPTIONS),
      property: isRulerProperty
    }, {
      createNode: () => new Text(stopwatchString, TEXT_OPTIONS),
      property: isStopwatchProperty
    }, {
      createNode: () => new Text(hasPeriodTimer ? periodTimerString : periodTraceString, TEXT_OPTIONS),
      property: isPeriodTraceProperty
    }];
    const content = new AlignBox(new VerticalCheckboxGroup(items, {
      spacing: PendulumLabConstants.CHECK_RADIO_SPACING,
      checkboxOptions: {
        boxWidth: new Text(rulerString, TEXT_OPTIONS).height
      }
    }), {
      group: PendulumLabConstants.LEFT_CONTENT_ALIGN_GROUP,
      xAlign: 'left'
    });
    super(content, options);
  }
}
pendulumLab.register('ToolsPanel', ToolsPanel);
export default ToolsPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFsaWduQm94IiwiVGV4dCIsIlBhbmVsIiwiVmVydGljYWxDaGVja2JveEdyb3VwIiwicGVuZHVsdW1MYWIiLCJQZW5kdWx1bUxhYlN0cmluZ3MiLCJQZW5kdWx1bUxhYkNvbnN0YW50cyIsInBlcmlvZFRpbWVyU3RyaW5nIiwicGVyaW9kVGltZXIiLCJwZXJpb2RUcmFjZVN0cmluZyIsInBlcmlvZFRyYWNlIiwicnVsZXJTdHJpbmciLCJydWxlciIsInN0b3B3YXRjaFN0cmluZyIsInN0b3B3YXRjaCIsIlRFWFRfT1BUSU9OUyIsImZvbnQiLCJUSVRMRV9GT05UIiwicGlja2FibGUiLCJtYXhXaWR0aCIsIlRvb2xzUGFuZWwiLCJjb25zdHJ1Y3RvciIsImlzUnVsZXJQcm9wZXJ0eSIsImlzU3RvcHdhdGNoUHJvcGVydHkiLCJpc1BlcmlvZFRyYWNlUHJvcGVydHkiLCJoYXNQZXJpb2RUaW1lciIsIm9wdGlvbnMiLCJQQU5FTF9PUFRJT05TIiwiaXRlbXMiLCJjcmVhdGVOb2RlIiwicHJvcGVydHkiLCJjb250ZW50Iiwic3BhY2luZyIsIkNIRUNLX1JBRElPX1NQQUNJTkciLCJjaGVja2JveE9wdGlvbnMiLCJib3hXaWR0aCIsImhlaWdodCIsImdyb3VwIiwiTEVGVF9DT05URU5UX0FMSUdOX0dST1VQIiwieEFsaWduIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUb29sc1BhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRvb2xzIGNvbnRyb2wgcGFuZWwgbm9kZSBpbiAnUGVuZHVsdW0gTGFiJyBzaW11bGF0aW9uLlxyXG4gKiBDb250YWlucyBjaGVja2JveCBidXR0b25zIHRvIGNvbnRyb2wgdmlzaWJpbGl0eSBvZiBydWxlciwgc3RvcHdhdGNoIGFuZCBwZXJpb2QgdHJhY2UgdG9vbHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmV5IFplbGVua292IChNbGVhcm5lcilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgQWxpZ25Cb3gsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IFZlcnRpY2FsQ2hlY2tib3hHcm91cCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvVmVydGljYWxDaGVja2JveEdyb3VwLmpzJztcclxuaW1wb3J0IHBlbmR1bHVtTGFiIGZyb20gJy4uLy4uL3BlbmR1bHVtTGFiLmpzJztcclxuaW1wb3J0IFBlbmR1bHVtTGFiU3RyaW5ncyBmcm9tICcuLi8uLi9QZW5kdWx1bUxhYlN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUGVuZHVsdW1MYWJDb25zdGFudHMgZnJvbSAnLi4vUGVuZHVsdW1MYWJDb25zdGFudHMuanMnO1xyXG5cclxuY29uc3QgcGVyaW9kVGltZXJTdHJpbmcgPSBQZW5kdWx1bUxhYlN0cmluZ3MucGVyaW9kVGltZXI7XHJcbmNvbnN0IHBlcmlvZFRyYWNlU3RyaW5nID0gUGVuZHVsdW1MYWJTdHJpbmdzLnBlcmlvZFRyYWNlO1xyXG5jb25zdCBydWxlclN0cmluZyA9IFBlbmR1bHVtTGFiU3RyaW5ncy5ydWxlcjtcclxuY29uc3Qgc3RvcHdhdGNoU3RyaW5nID0gUGVuZHVsdW1MYWJTdHJpbmdzLnN0b3B3YXRjaDtcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBURVhUX09QVElPTlMgPSB7XHJcbiAgZm9udDogUGVuZHVsdW1MYWJDb25zdGFudHMuVElUTEVfRk9OVCxcclxuICBwaWNrYWJsZTogZmFsc2UsXHJcbiAgbWF4V2lkdGg6IDEwMFxyXG59O1xyXG5cclxuY2xhc3MgVG9vbHNQYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGlzUnVsZXJQcm9wZXJ0eSAtIHByb3BlcnR5IHRvIGNvbnRyb2wgdmlzaWJpbGl0eSBvZiBydWxlci5cclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gaXNTdG9wd2F0Y2hQcm9wZXJ0eSAtIHByb3BlcnR5IHRvIGNvbnRyb2wgdmlzaWJpbGl0eSBvZiBzdG9wd2F0Y2guXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGlzUGVyaW9kVHJhY2VQcm9wZXJ0eSAtIHByb3BlcnR5IHRvIGNvbnRyb2wgdmlzaWJpbGl0eSBvZiBwZXJpb2QgdHJhY2UgdG9vbC5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BlcmlvZFRpbWVyXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBpc1J1bGVyUHJvcGVydHksIGlzU3RvcHdhdGNoUHJvcGVydHksIGlzUGVyaW9kVHJhY2VQcm9wZXJ0eSwgaGFzUGVyaW9kVGltZXIsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7fSwgUGVuZHVsdW1MYWJDb25zdGFudHMuUEFORUxfT1BUSU9OUywgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGl0ZW1zID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFRleHQoIHJ1bGVyU3RyaW5nLCBURVhUX09QVElPTlMgKSxcclxuICAgICAgICBwcm9wZXJ0eTogaXNSdWxlclByb3BlcnR5XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggc3RvcHdhdGNoU3RyaW5nLCBURVhUX09QVElPTlMgKSxcclxuICAgICAgICBwcm9wZXJ0eTogaXNTdG9wd2F0Y2hQcm9wZXJ0eVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFRleHQoIGhhc1BlcmlvZFRpbWVyID8gcGVyaW9kVGltZXJTdHJpbmcgOiBwZXJpb2RUcmFjZVN0cmluZywgVEVYVF9PUFRJT05TICksXHJcbiAgICAgICAgcHJvcGVydHk6IGlzUGVyaW9kVHJhY2VQcm9wZXJ0eVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgQWxpZ25Cb3goIG5ldyBWZXJ0aWNhbENoZWNrYm94R3JvdXAoIGl0ZW1zLCB7XHJcbiAgICAgIHNwYWNpbmc6IFBlbmR1bHVtTGFiQ29uc3RhbnRzLkNIRUNLX1JBRElPX1NQQUNJTkcsXHJcbiAgICAgIGNoZWNrYm94T3B0aW9uczogeyBib3hXaWR0aDogbmV3IFRleHQoIHJ1bGVyU3RyaW5nLCBURVhUX09QVElPTlMgKS5oZWlnaHQgfVxyXG4gICAgfSApLCB7XHJcbiAgICAgIGdyb3VwOiBQZW5kdWx1bUxhYkNvbnN0YW50cy5MRUZUX0NPTlRFTlRfQUxJR05fR1JPVVAsXHJcbiAgICAgIHhBbGlnbjogJ2xlZnQnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnBlbmR1bHVtTGFiLnJlZ2lzdGVyKCAnVG9vbHNQYW5lbCcsIFRvb2xzUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgVG9vbHNQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELFNBQVNDLFFBQVEsRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNsRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLHFCQUFxQixNQUFNLDZDQUE2QztBQUMvRSxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxvQkFBb0IsTUFBTSw0QkFBNEI7QUFFN0QsTUFBTUMsaUJBQWlCLEdBQUdGLGtCQUFrQixDQUFDRyxXQUFXO0FBQ3hELE1BQU1DLGlCQUFpQixHQUFHSixrQkFBa0IsQ0FBQ0ssV0FBVztBQUN4RCxNQUFNQyxXQUFXLEdBQUdOLGtCQUFrQixDQUFDTyxLQUFLO0FBQzVDLE1BQU1DLGVBQWUsR0FBR1Isa0JBQWtCLENBQUNTLFNBQVM7O0FBRXBEO0FBQ0EsTUFBTUMsWUFBWSxHQUFHO0VBQ25CQyxJQUFJLEVBQUVWLG9CQUFvQixDQUFDVyxVQUFVO0VBQ3JDQyxRQUFRLEVBQUUsS0FBSztFQUNmQyxRQUFRLEVBQUU7QUFDWixDQUFDO0FBRUQsTUFBTUMsVUFBVSxTQUFTbEIsS0FBSyxDQUFDO0VBRTdCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VtQixXQUFXQSxDQUFFQyxlQUFlLEVBQUVDLG1CQUFtQixFQUFFQyxxQkFBcUIsRUFBRUMsY0FBYyxFQUFFQyxPQUFPLEVBQUc7SUFFbEdBLE9BQU8sR0FBRzNCLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRU8sb0JBQW9CLENBQUNxQixhQUFhLEVBQUVELE9BQVEsQ0FBQztJQUVsRSxNQUFNRSxLQUFLLEdBQUcsQ0FDWjtNQUNFQyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJNUIsSUFBSSxDQUFFVSxXQUFXLEVBQUVJLFlBQWEsQ0FBQztNQUN2RGUsUUFBUSxFQUFFUjtJQUNaLENBQUMsRUFDRDtNQUNFTyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJNUIsSUFBSSxDQUFFWSxlQUFlLEVBQUVFLFlBQWEsQ0FBQztNQUMzRGUsUUFBUSxFQUFFUDtJQUNaLENBQUMsRUFDRDtNQUNFTSxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJNUIsSUFBSSxDQUFFd0IsY0FBYyxHQUFHbEIsaUJBQWlCLEdBQUdFLGlCQUFpQixFQUFFTSxZQUFhLENBQUM7TUFDbEdlLFFBQVEsRUFBRU47SUFDWixDQUFDLENBQ0Y7SUFFRCxNQUFNTyxPQUFPLEdBQUcsSUFBSS9CLFFBQVEsQ0FBRSxJQUFJRyxxQkFBcUIsQ0FBRXlCLEtBQUssRUFBRTtNQUM5REksT0FBTyxFQUFFMUIsb0JBQW9CLENBQUMyQixtQkFBbUI7TUFDakRDLGVBQWUsRUFBRTtRQUFFQyxRQUFRLEVBQUUsSUFBSWxDLElBQUksQ0FBRVUsV0FBVyxFQUFFSSxZQUFhLENBQUMsQ0FBQ3FCO01BQU87SUFDNUUsQ0FBRSxDQUFDLEVBQUU7TUFDSEMsS0FBSyxFQUFFL0Isb0JBQW9CLENBQUNnQyx3QkFBd0I7TUFDcERDLE1BQU0sRUFBRTtJQUNWLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVIsT0FBTyxFQUFFTCxPQUFRLENBQUM7RUFDM0I7QUFDRjtBQUVBdEIsV0FBVyxDQUFDb0MsUUFBUSxDQUFFLFlBQVksRUFBRXBCLFVBQVcsQ0FBQztBQUNoRCxlQUFlQSxVQUFVIn0=