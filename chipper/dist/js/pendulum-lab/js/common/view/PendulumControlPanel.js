// Copyright 2017-2022, University of Colorado Boulder

/**
 * Panel with length/mass controls for all available pendula
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import { Line, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import pendulumLab from '../../pendulumLab.js';
import PendulumLabStrings from '../../PendulumLabStrings.js';
import PendulumLabConstants from '../PendulumLabConstants.js';
import PendulumNumberControl from './PendulumNumberControl.js';
const kilogramsPatternString = PendulumLabStrings.kilogramsPattern;
const lengthString = PendulumLabStrings.length;
const massString = PendulumLabStrings.mass;
const metersPatternString = PendulumLabStrings.metersPattern;
class PendulumControlPanel extends Panel {
  /**
   * @param {Array.<Pendulum>} pendula
   * @param {Property.<number>} numberOfPendulaProperty
   */
  constructor(pendula, numberOfPendulaProperty) {
    const content = new VBox({
      spacing: 16
    });
    const separator = new Line({
      stroke: 'rgb(160,160,160)',
      lineWidth: 0.3,
      x2: PendulumLabConstants.RIGHT_CONTENT_WIDTH
    });
    const pendulumSliderGroups = pendula.map(pendulum => {
      const pendulumNumberString = `${pendulum.index + 1}`;
      const lengthTitle = StringUtils.fillIn(lengthString, {
        pendulumNumber: pendulumNumberString
      });
      const massTitle = StringUtils.fillIn(massString, {
        pendulumNumber: pendulumNumberString
      });

      //TODO #210 replace '{0}' with SunConstants.VALUE_NAMED_PLACEHOLDER
      const lengthPattern = StringUtils.fillIn(metersPatternString, {
        meters: '{0}'
      });
      const massPattern = StringUtils.fillIn(kilogramsPatternString, {
        kilograms: '{0}'
      });
      return new VBox({
        spacing: 14,
        align: 'left',
        children: [new PendulumNumberControl(lengthTitle, pendulum.lengthProperty, pendulum.lengthRange, lengthPattern, pendulum.color), new PendulumNumberControl(massTitle, pendulum.massProperty, pendulum.massRange, massPattern, pendulum.color)]
      });
    });
    numberOfPendulaProperty.link(numberOfPendula => {
      content.children = numberOfPendula === 1 ? [pendulumSliderGroups[0]] : [pendulumSliderGroups[0], separator, pendulumSliderGroups[1]];
    });
    super(content, PendulumLabConstants.PANEL_OPTIONS);
  }
}
pendulumLab.register('PendulumControlPanel', PendulumControlPanel);
export default PendulumControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIkxpbmUiLCJWQm94IiwiUGFuZWwiLCJwZW5kdWx1bUxhYiIsIlBlbmR1bHVtTGFiU3RyaW5ncyIsIlBlbmR1bHVtTGFiQ29uc3RhbnRzIiwiUGVuZHVsdW1OdW1iZXJDb250cm9sIiwia2lsb2dyYW1zUGF0dGVyblN0cmluZyIsImtpbG9ncmFtc1BhdHRlcm4iLCJsZW5ndGhTdHJpbmciLCJsZW5ndGgiLCJtYXNzU3RyaW5nIiwibWFzcyIsIm1ldGVyc1BhdHRlcm5TdHJpbmciLCJtZXRlcnNQYXR0ZXJuIiwiUGVuZHVsdW1Db250cm9sUGFuZWwiLCJjb25zdHJ1Y3RvciIsInBlbmR1bGEiLCJudW1iZXJPZlBlbmR1bGFQcm9wZXJ0eSIsImNvbnRlbnQiLCJzcGFjaW5nIiwic2VwYXJhdG9yIiwic3Ryb2tlIiwibGluZVdpZHRoIiwieDIiLCJSSUdIVF9DT05URU5UX1dJRFRIIiwicGVuZHVsdW1TbGlkZXJHcm91cHMiLCJtYXAiLCJwZW5kdWx1bSIsInBlbmR1bHVtTnVtYmVyU3RyaW5nIiwiaW5kZXgiLCJsZW5ndGhUaXRsZSIsImZpbGxJbiIsInBlbmR1bHVtTnVtYmVyIiwibWFzc1RpdGxlIiwibGVuZ3RoUGF0dGVybiIsIm1ldGVycyIsIm1hc3NQYXR0ZXJuIiwia2lsb2dyYW1zIiwiYWxpZ24iLCJjaGlsZHJlbiIsImxlbmd0aFByb3BlcnR5IiwibGVuZ3RoUmFuZ2UiLCJjb2xvciIsIm1hc3NQcm9wZXJ0eSIsIm1hc3NSYW5nZSIsImxpbmsiLCJudW1iZXJPZlBlbmR1bGEiLCJQQU5FTF9PUFRJT05TIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQZW5kdWx1bUNvbnRyb2xQYW5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQYW5lbCB3aXRoIGxlbmd0aC9tYXNzIGNvbnRyb2xzIGZvciBhbGwgYXZhaWxhYmxlIHBlbmR1bGFcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBwZW5kdWx1bUxhYiBmcm9tICcuLi8uLi9wZW5kdWx1bUxhYi5qcyc7XHJcbmltcG9ydCBQZW5kdWx1bUxhYlN0cmluZ3MgZnJvbSAnLi4vLi4vUGVuZHVsdW1MYWJTdHJpbmdzLmpzJztcclxuaW1wb3J0IFBlbmR1bHVtTGFiQ29uc3RhbnRzIGZyb20gJy4uL1BlbmR1bHVtTGFiQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFBlbmR1bHVtTnVtYmVyQ29udHJvbCBmcm9tICcuL1BlbmR1bHVtTnVtYmVyQ29udHJvbC5qcyc7XHJcblxyXG5jb25zdCBraWxvZ3JhbXNQYXR0ZXJuU3RyaW5nID0gUGVuZHVsdW1MYWJTdHJpbmdzLmtpbG9ncmFtc1BhdHRlcm47XHJcbmNvbnN0IGxlbmd0aFN0cmluZyA9IFBlbmR1bHVtTGFiU3RyaW5ncy5sZW5ndGg7XHJcbmNvbnN0IG1hc3NTdHJpbmcgPSBQZW5kdWx1bUxhYlN0cmluZ3MubWFzcztcclxuY29uc3QgbWV0ZXJzUGF0dGVyblN0cmluZyA9IFBlbmR1bHVtTGFiU3RyaW5ncy5tZXRlcnNQYXR0ZXJuO1xyXG5cclxuY2xhc3MgUGVuZHVsdW1Db250cm9sUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QXJyYXkuPFBlbmR1bHVtPn0gcGVuZHVsYVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IG51bWJlck9mUGVuZHVsYVByb3BlcnR5XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHBlbmR1bGEsIG51bWJlck9mUGVuZHVsYVByb3BlcnR5ICkge1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgVkJveCgge1xyXG4gICAgICBzcGFjaW5nOiAxNlxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHNlcGFyYXRvciA9IG5ldyBMaW5lKCB7XHJcbiAgICAgIHN0cm9rZTogJ3JnYigxNjAsMTYwLDE2MCknLFxyXG4gICAgICBsaW5lV2lkdGg6IDAuMyxcclxuICAgICAgeDI6IFBlbmR1bHVtTGFiQ29uc3RhbnRzLlJJR0hUX0NPTlRFTlRfV0lEVEhcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBwZW5kdWx1bVNsaWRlckdyb3VwcyA9IHBlbmR1bGEubWFwKCBwZW5kdWx1bSA9PiB7XHJcbiAgICAgIGNvbnN0IHBlbmR1bHVtTnVtYmVyU3RyaW5nID0gYCR7cGVuZHVsdW0uaW5kZXggKyAxfWA7XHJcbiAgICAgIGNvbnN0IGxlbmd0aFRpdGxlID0gU3RyaW5nVXRpbHMuZmlsbEluKCBsZW5ndGhTdHJpbmcsIHtcclxuICAgICAgICBwZW5kdWx1bU51bWJlcjogcGVuZHVsdW1OdW1iZXJTdHJpbmdcclxuICAgICAgfSApO1xyXG4gICAgICBjb25zdCBtYXNzVGl0bGUgPSBTdHJpbmdVdGlscy5maWxsSW4oIG1hc3NTdHJpbmcsIHtcclxuICAgICAgICBwZW5kdWx1bU51bWJlcjogcGVuZHVsdW1OdW1iZXJTdHJpbmdcclxuICAgICAgfSApO1xyXG5cclxuICAgICAgLy9UT0RPICMyMTAgcmVwbGFjZSAnezB9JyB3aXRoIFN1bkNvbnN0YW50cy5WQUxVRV9OQU1FRF9QTEFDRUhPTERFUlxyXG4gICAgICBjb25zdCBsZW5ndGhQYXR0ZXJuID0gU3RyaW5nVXRpbHMuZmlsbEluKCBtZXRlcnNQYXR0ZXJuU3RyaW5nLCB7IG1ldGVyczogJ3swfScgfSApO1xyXG4gICAgICBjb25zdCBtYXNzUGF0dGVybiA9IFN0cmluZ1V0aWxzLmZpbGxJbigga2lsb2dyYW1zUGF0dGVyblN0cmluZywgeyBraWxvZ3JhbXM6ICd7MH0nIH0gKTtcclxuXHJcbiAgICAgIHJldHVybiBuZXcgVkJveCgge1xyXG4gICAgICAgIHNwYWNpbmc6IDE0LFxyXG4gICAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgIG5ldyBQZW5kdWx1bU51bWJlckNvbnRyb2woIGxlbmd0aFRpdGxlLCBwZW5kdWx1bS5sZW5ndGhQcm9wZXJ0eSwgcGVuZHVsdW0ubGVuZ3RoUmFuZ2UsIGxlbmd0aFBhdHRlcm4sIHBlbmR1bHVtLmNvbG9yICksXHJcbiAgICAgICAgICBuZXcgUGVuZHVsdW1OdW1iZXJDb250cm9sKCBtYXNzVGl0bGUsIHBlbmR1bHVtLm1hc3NQcm9wZXJ0eSwgcGVuZHVsdW0ubWFzc1JhbmdlLCBtYXNzUGF0dGVybiwgcGVuZHVsdW0uY29sb3IgKVxyXG4gICAgICAgIF1cclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIG51bWJlck9mUGVuZHVsYVByb3BlcnR5LmxpbmsoIG51bWJlck9mUGVuZHVsYSA9PiB7XHJcbiAgICAgIGNvbnRlbnQuY2hpbGRyZW4gPSBudW1iZXJPZlBlbmR1bGEgPT09IDEgPyBbXHJcbiAgICAgICAgcGVuZHVsdW1TbGlkZXJHcm91cHNbIDAgXVxyXG4gICAgICBdIDogW1xyXG4gICAgICAgIHBlbmR1bHVtU2xpZGVyR3JvdXBzWyAwIF0sXHJcbiAgICAgICAgc2VwYXJhdG9yLFxyXG4gICAgICAgIHBlbmR1bHVtU2xpZGVyR3JvdXBzWyAxIF1cclxuICAgICAgXTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwgUGVuZHVsdW1MYWJDb25zdGFudHMuUEFORUxfT1BUSU9OUyApO1xyXG4gIH1cclxufVxyXG5cclxucGVuZHVsdW1MYWIucmVnaXN0ZXIoICdQZW5kdWx1bUNvbnRyb2xQYW5lbCcsIFBlbmR1bHVtQ29udHJvbFBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBlbmR1bHVtQ29udHJvbFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLG9CQUFvQixNQUFNLDRCQUE0QjtBQUM3RCxPQUFPQyxxQkFBcUIsTUFBTSw0QkFBNEI7QUFFOUQsTUFBTUMsc0JBQXNCLEdBQUdILGtCQUFrQixDQUFDSSxnQkFBZ0I7QUFDbEUsTUFBTUMsWUFBWSxHQUFHTCxrQkFBa0IsQ0FBQ00sTUFBTTtBQUM5QyxNQUFNQyxVQUFVLEdBQUdQLGtCQUFrQixDQUFDUSxJQUFJO0FBQzFDLE1BQU1DLG1CQUFtQixHQUFHVCxrQkFBa0IsQ0FBQ1UsYUFBYTtBQUU1RCxNQUFNQyxvQkFBb0IsU0FBU2IsS0FBSyxDQUFDO0VBRXZDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VjLFdBQVdBLENBQUVDLE9BQU8sRUFBRUMsdUJBQXVCLEVBQUc7SUFFOUMsTUFBTUMsT0FBTyxHQUFHLElBQUlsQixJQUFJLENBQUU7TUFDeEJtQixPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUM7SUFFSCxNQUFNQyxTQUFTLEdBQUcsSUFBSXJCLElBQUksQ0FBRTtNQUMxQnNCLE1BQU0sRUFBRSxrQkFBa0I7TUFDMUJDLFNBQVMsRUFBRSxHQUFHO01BQ2RDLEVBQUUsRUFBRW5CLG9CQUFvQixDQUFDb0I7SUFDM0IsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsb0JBQW9CLEdBQUdULE9BQU8sQ0FBQ1UsR0FBRyxDQUFFQyxRQUFRLElBQUk7TUFDcEQsTUFBTUMsb0JBQW9CLEdBQUksR0FBRUQsUUFBUSxDQUFDRSxLQUFLLEdBQUcsQ0FBRSxFQUFDO01BQ3BELE1BQU1DLFdBQVcsR0FBR2hDLFdBQVcsQ0FBQ2lDLE1BQU0sQ0FBRXZCLFlBQVksRUFBRTtRQUNwRHdCLGNBQWMsRUFBRUo7TUFDbEIsQ0FBRSxDQUFDO01BQ0gsTUFBTUssU0FBUyxHQUFHbkMsV0FBVyxDQUFDaUMsTUFBTSxDQUFFckIsVUFBVSxFQUFFO1FBQ2hEc0IsY0FBYyxFQUFFSjtNQUNsQixDQUFFLENBQUM7O01BRUg7TUFDQSxNQUFNTSxhQUFhLEdBQUdwQyxXQUFXLENBQUNpQyxNQUFNLENBQUVuQixtQkFBbUIsRUFBRTtRQUFFdUIsTUFBTSxFQUFFO01BQU0sQ0FBRSxDQUFDO01BQ2xGLE1BQU1DLFdBQVcsR0FBR3RDLFdBQVcsQ0FBQ2lDLE1BQU0sQ0FBRXpCLHNCQUFzQixFQUFFO1FBQUUrQixTQUFTLEVBQUU7TUFBTSxDQUFFLENBQUM7TUFFdEYsT0FBTyxJQUFJckMsSUFBSSxDQUFFO1FBQ2ZtQixPQUFPLEVBQUUsRUFBRTtRQUNYbUIsS0FBSyxFQUFFLE1BQU07UUFDYkMsUUFBUSxFQUFFLENBQ1IsSUFBSWxDLHFCQUFxQixDQUFFeUIsV0FBVyxFQUFFSCxRQUFRLENBQUNhLGNBQWMsRUFBRWIsUUFBUSxDQUFDYyxXQUFXLEVBQUVQLGFBQWEsRUFBRVAsUUFBUSxDQUFDZSxLQUFNLENBQUMsRUFDdEgsSUFBSXJDLHFCQUFxQixDQUFFNEIsU0FBUyxFQUFFTixRQUFRLENBQUNnQixZQUFZLEVBQUVoQixRQUFRLENBQUNpQixTQUFTLEVBQUVSLFdBQVcsRUFBRVQsUUFBUSxDQUFDZSxLQUFNLENBQUM7TUFFbEgsQ0FBRSxDQUFDO0lBQ0wsQ0FBRSxDQUFDO0lBRUh6Qix1QkFBdUIsQ0FBQzRCLElBQUksQ0FBRUMsZUFBZSxJQUFJO01BQy9DNUIsT0FBTyxDQUFDcUIsUUFBUSxHQUFHTyxlQUFlLEtBQUssQ0FBQyxHQUFHLENBQ3pDckIsb0JBQW9CLENBQUUsQ0FBQyxDQUFFLENBQzFCLEdBQUcsQ0FDRkEsb0JBQW9CLENBQUUsQ0FBQyxDQUFFLEVBQ3pCTCxTQUFTLEVBQ1RLLG9CQUFvQixDQUFFLENBQUMsQ0FBRSxDQUMxQjtJQUNILENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVAsT0FBTyxFQUFFZCxvQkFBb0IsQ0FBQzJDLGFBQWMsQ0FBQztFQUN0RDtBQUNGO0FBRUE3QyxXQUFXLENBQUM4QyxRQUFRLENBQUUsc0JBQXNCLEVBQUVsQyxvQkFBcUIsQ0FBQztBQUNwRSxlQUFlQSxvQkFBb0IifQ==