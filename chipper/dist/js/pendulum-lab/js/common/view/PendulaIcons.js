// Copyright 2017-2022, University of Colorado Boulder

/**
 * Icons for one or two pendula.
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import Utils from '../../../../dot/js/Utils.js';
import { AlignBox, Color, Line, LinearGradient, Node, Rectangle } from '../../../../scenery/js/imports.js';
import pendulumLab from '../../pendulumLab.js';
import PendulumLabConstants from '../PendulumLabConstants.js';

// constants
const ICON_SIZE = 35;

/**
 * Creates a small node showing a single pendulum.
 * @private
 *
 * @param {number} lineLength
 * @param {number} angle
 * @param {number} rectHeight
 * @param {string} rectColor
 * @returns {Node}
 */
function createMiniPendulum(lineLength, angle, rectHeight, rectColor) {
  const rectWidth = rectHeight * 0.8;
  const rectGradient = new LinearGradient(-rectWidth / 2, 0, rectWidth / 2, 0).addColorStop(0, Color.toColor(rectColor).colorUtilsBrighter(0.2)).addColorStop(0.2, Color.toColor(rectColor).colorUtilsBrighter(0.7)).addColorStop(0.7, rectColor);
  return new Node({
    children: [
    // string
    new Line(0, 0, 0, lineLength, {
      stroke: 'black',
      rotation: angle
    }),
    // mass
    new Rectangle(-rectWidth / 2, lineLength, rectWidth, rectHeight, {
      stroke: 'black',
      fill: rectGradient,
      rotation: angle
    })]
  });
}
const firstPendulumNode = createMiniPendulum(ICON_SIZE * 0.6, Utils.toRadians(-10), ICON_SIZE * 0.4, PendulumLabConstants.FIRST_PENDULUM_COLOR);
const secondPendulumNode = createMiniPendulum(ICON_SIZE * 0.5, Utils.toRadians(20), ICON_SIZE * 0.25, PendulumLabConstants.SECOND_PENDULUM_COLOR);
const iconBounds = new Bounds2(0, 0, ICON_SIZE, ICON_SIZE);
const PendulaIcons = {
  // @public {Node} - Icon with just one pendulum
  ONE_PENDULUM_ICON: new AlignBox(new Node({
    children: [firstPendulumNode]
  }), {
    alignBounds: iconBounds,
    pickable: false
  }),
  // @public {Node} - Icon with both pendula
  TWO_PENDULA_ICON: new AlignBox(new Node({
    children: [firstPendulumNode, secondPendulumNode]
  }), {
    alignBounds: iconBounds,
    pickable: false
  })
};
pendulumLab.register('PendulaIcons', PendulaIcons);
export default PendulaIcons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiVXRpbHMiLCJBbGlnbkJveCIsIkNvbG9yIiwiTGluZSIsIkxpbmVhckdyYWRpZW50IiwiTm9kZSIsIlJlY3RhbmdsZSIsInBlbmR1bHVtTGFiIiwiUGVuZHVsdW1MYWJDb25zdGFudHMiLCJJQ09OX1NJWkUiLCJjcmVhdGVNaW5pUGVuZHVsdW0iLCJsaW5lTGVuZ3RoIiwiYW5nbGUiLCJyZWN0SGVpZ2h0IiwicmVjdENvbG9yIiwicmVjdFdpZHRoIiwicmVjdEdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwidG9Db2xvciIsImNvbG9yVXRpbHNCcmlnaHRlciIsImNoaWxkcmVuIiwic3Ryb2tlIiwicm90YXRpb24iLCJmaWxsIiwiZmlyc3RQZW5kdWx1bU5vZGUiLCJ0b1JhZGlhbnMiLCJGSVJTVF9QRU5EVUxVTV9DT0xPUiIsInNlY29uZFBlbmR1bHVtTm9kZSIsIlNFQ09ORF9QRU5EVUxVTV9DT0xPUiIsImljb25Cb3VuZHMiLCJQZW5kdWxhSWNvbnMiLCJPTkVfUEVORFVMVU1fSUNPTiIsImFsaWduQm91bmRzIiwicGlja2FibGUiLCJUV09fUEVORFVMQV9JQ09OIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQZW5kdWxhSWNvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSWNvbnMgZm9yIG9uZSBvciB0d28gcGVuZHVsYS5cclxuICpcclxuICogQGF1dGhvciBBbmRyZXkgWmVsZW5rb3YgKE1sZWFybmVyKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IEFsaWduQm94LCBDb2xvciwgTGluZSwgTGluZWFyR3JhZGllbnQsIE5vZGUsIFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBwZW5kdWx1bUxhYiBmcm9tICcuLi8uLi9wZW5kdWx1bUxhYi5qcyc7XHJcbmltcG9ydCBQZW5kdWx1bUxhYkNvbnN0YW50cyBmcm9tICcuLi9QZW5kdWx1bUxhYkNvbnN0YW50cy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgSUNPTl9TSVpFID0gMzU7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHNtYWxsIG5vZGUgc2hvd2luZyBhIHNpbmdsZSBwZW5kdWx1bS5cclxuICogQHByaXZhdGVcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IGxpbmVMZW5ndGhcclxuICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByZWN0SGVpZ2h0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWN0Q29sb3JcclxuICogQHJldHVybnMge05vZGV9XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNaW5pUGVuZHVsdW0oIGxpbmVMZW5ndGgsIGFuZ2xlLCByZWN0SGVpZ2h0LCByZWN0Q29sb3IgKSB7XHJcbiAgY29uc3QgcmVjdFdpZHRoID0gcmVjdEhlaWdodCAqIDAuODtcclxuICBjb25zdCByZWN0R3JhZGllbnQgPSBuZXcgTGluZWFyR3JhZGllbnQoIC1yZWN0V2lkdGggLyAyLCAwLCByZWN0V2lkdGggLyAyLCAwIClcclxuICAgIC5hZGRDb2xvclN0b3AoIDAsIENvbG9yLnRvQ29sb3IoIHJlY3RDb2xvciApLmNvbG9yVXRpbHNCcmlnaHRlciggMC4yICkgKVxyXG4gICAgLmFkZENvbG9yU3RvcCggMC4yLCBDb2xvci50b0NvbG9yKCByZWN0Q29sb3IgKS5jb2xvclV0aWxzQnJpZ2h0ZXIoIDAuNyApIClcclxuICAgIC5hZGRDb2xvclN0b3AoIDAuNywgcmVjdENvbG9yICk7XHJcbiAgcmV0dXJuIG5ldyBOb2RlKCB7XHJcbiAgICBjaGlsZHJlbjogW1xyXG4gICAgICAvLyBzdHJpbmdcclxuICAgICAgbmV3IExpbmUoIDAsIDAsIDAsIGxpbmVMZW5ndGgsIHtcclxuICAgICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgICAgcm90YXRpb246IGFuZ2xlXHJcbiAgICAgIH0gKSxcclxuICAgICAgLy8gbWFzc1xyXG4gICAgICBuZXcgUmVjdGFuZ2xlKCAtcmVjdFdpZHRoIC8gMiwgbGluZUxlbmd0aCwgcmVjdFdpZHRoLCByZWN0SGVpZ2h0LCB7XHJcbiAgICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICAgIGZpbGw6IHJlY3RHcmFkaWVudCxcclxuICAgICAgICByb3RhdGlvbjogYW5nbGVcclxuICAgICAgfSApXHJcbiAgICBdXHJcbiAgfSApO1xyXG59XHJcblxyXG5jb25zdCBmaXJzdFBlbmR1bHVtTm9kZSA9IGNyZWF0ZU1pbmlQZW5kdWx1bSggSUNPTl9TSVpFICogMC42LCBVdGlscy50b1JhZGlhbnMoIC0xMCApLCBJQ09OX1NJWkUgKiAwLjQsIFBlbmR1bHVtTGFiQ29uc3RhbnRzLkZJUlNUX1BFTkRVTFVNX0NPTE9SICk7XHJcbmNvbnN0IHNlY29uZFBlbmR1bHVtTm9kZSA9IGNyZWF0ZU1pbmlQZW5kdWx1bSggSUNPTl9TSVpFICogMC41LCBVdGlscy50b1JhZGlhbnMoIDIwICksIElDT05fU0laRSAqIDAuMjUsIFBlbmR1bHVtTGFiQ29uc3RhbnRzLlNFQ09ORF9QRU5EVUxVTV9DT0xPUiApO1xyXG5jb25zdCBpY29uQm91bmRzID0gbmV3IEJvdW5kczIoIDAsIDAsIElDT05fU0laRSwgSUNPTl9TSVpFICk7XHJcblxyXG5jb25zdCBQZW5kdWxhSWNvbnMgPSB7XHJcbiAgLy8gQHB1YmxpYyB7Tm9kZX0gLSBJY29uIHdpdGgganVzdCBvbmUgcGVuZHVsdW1cclxuICBPTkVfUEVORFVMVU1fSUNPTjogbmV3IEFsaWduQm94KCBuZXcgTm9kZSgge1xyXG4gICAgY2hpbGRyZW46IFsgZmlyc3RQZW5kdWx1bU5vZGUgXVxyXG4gIH0gKSwge1xyXG4gICAgYWxpZ25Cb3VuZHM6IGljb25Cb3VuZHMsXHJcbiAgICBwaWNrYWJsZTogZmFsc2VcclxuICB9ICksXHJcbiAgLy8gQHB1YmxpYyB7Tm9kZX0gLSBJY29uIHdpdGggYm90aCBwZW5kdWxhXHJcbiAgVFdPX1BFTkRVTEFfSUNPTjogbmV3IEFsaWduQm94KCBuZXcgTm9kZSgge1xyXG4gICAgY2hpbGRyZW46IFsgZmlyc3RQZW5kdWx1bU5vZGUsIHNlY29uZFBlbmR1bHVtTm9kZSBdXHJcbiAgfSApLCB7XHJcbiAgICBhbGlnbkJvdW5kczogaWNvbkJvdW5kcyxcclxuICAgIHBpY2thYmxlOiBmYWxzZVxyXG4gIH0gKVxyXG59O1xyXG5cclxucGVuZHVsdW1MYWIucmVnaXN0ZXIoICdQZW5kdWxhSWNvbnMnLCBQZW5kdWxhSWNvbnMgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBlbmR1bGFJY29uczsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLFNBQVNDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLGNBQWMsRUFBRUMsSUFBSSxFQUFFQyxTQUFTLFFBQVEsbUNBQW1DO0FBQzFHLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0Msb0JBQW9CLE1BQU0sNEJBQTRCOztBQUU3RDtBQUNBLE1BQU1DLFNBQVMsR0FBRyxFQUFFOztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGtCQUFrQkEsQ0FBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLFVBQVUsRUFBRUMsU0FBUyxFQUFHO0VBQ3RFLE1BQU1DLFNBQVMsR0FBR0YsVUFBVSxHQUFHLEdBQUc7RUFDbEMsTUFBTUcsWUFBWSxHQUFHLElBQUlaLGNBQWMsQ0FBRSxDQUFDVyxTQUFTLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUEsU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FDM0VFLFlBQVksQ0FBRSxDQUFDLEVBQUVmLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBRUosU0FBVSxDQUFDLENBQUNLLGtCQUFrQixDQUFFLEdBQUksQ0FBRSxDQUFDLENBQ3ZFRixZQUFZLENBQUUsR0FBRyxFQUFFZixLQUFLLENBQUNnQixPQUFPLENBQUVKLFNBQVUsQ0FBQyxDQUFDSyxrQkFBa0IsQ0FBRSxHQUFJLENBQUUsQ0FBQyxDQUN6RUYsWUFBWSxDQUFFLEdBQUcsRUFBRUgsU0FBVSxDQUFDO0VBQ2pDLE9BQU8sSUFBSVQsSUFBSSxDQUFFO0lBQ2ZlLFFBQVEsRUFBRTtJQUNSO0lBQ0EsSUFBSWpCLElBQUksQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVEsVUFBVSxFQUFFO01BQzdCVSxNQUFNLEVBQUUsT0FBTztNQUNmQyxRQUFRLEVBQUVWO0lBQ1osQ0FBRSxDQUFDO0lBQ0g7SUFDQSxJQUFJTixTQUFTLENBQUUsQ0FBQ1MsU0FBUyxHQUFHLENBQUMsRUFBRUosVUFBVSxFQUFFSSxTQUFTLEVBQUVGLFVBQVUsRUFBRTtNQUNoRVEsTUFBTSxFQUFFLE9BQU87TUFDZkUsSUFBSSxFQUFFUCxZQUFZO01BQ2xCTSxRQUFRLEVBQUVWO0lBQ1osQ0FBRSxDQUFDO0VBRVAsQ0FBRSxDQUFDO0FBQ0w7QUFFQSxNQUFNWSxpQkFBaUIsR0FBR2Qsa0JBQWtCLENBQUVELFNBQVMsR0FBRyxHQUFHLEVBQUVULEtBQUssQ0FBQ3lCLFNBQVMsQ0FBRSxDQUFDLEVBQUcsQ0FBQyxFQUFFaEIsU0FBUyxHQUFHLEdBQUcsRUFBRUQsb0JBQW9CLENBQUNrQixvQkFBcUIsQ0FBQztBQUNuSixNQUFNQyxrQkFBa0IsR0FBR2pCLGtCQUFrQixDQUFFRCxTQUFTLEdBQUcsR0FBRyxFQUFFVCxLQUFLLENBQUN5QixTQUFTLENBQUUsRUFBRyxDQUFDLEVBQUVoQixTQUFTLEdBQUcsSUFBSSxFQUFFRCxvQkFBb0IsQ0FBQ29CLHFCQUFzQixDQUFDO0FBQ3JKLE1BQU1DLFVBQVUsR0FBRyxJQUFJOUIsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVVLFNBQVMsRUFBRUEsU0FBVSxDQUFDO0FBRTVELE1BQU1xQixZQUFZLEdBQUc7RUFDbkI7RUFDQUMsaUJBQWlCLEVBQUUsSUFBSTlCLFFBQVEsQ0FBRSxJQUFJSSxJQUFJLENBQUU7SUFDekNlLFFBQVEsRUFBRSxDQUFFSSxpQkFBaUI7RUFDL0IsQ0FBRSxDQUFDLEVBQUU7SUFDSFEsV0FBVyxFQUFFSCxVQUFVO0lBQ3ZCSSxRQUFRLEVBQUU7RUFDWixDQUFFLENBQUM7RUFDSDtFQUNBQyxnQkFBZ0IsRUFBRSxJQUFJakMsUUFBUSxDQUFFLElBQUlJLElBQUksQ0FBRTtJQUN4Q2UsUUFBUSxFQUFFLENBQUVJLGlCQUFpQixFQUFFRyxrQkFBa0I7RUFDbkQsQ0FBRSxDQUFDLEVBQUU7SUFDSEssV0FBVyxFQUFFSCxVQUFVO0lBQ3ZCSSxRQUFRLEVBQUU7RUFDWixDQUFFO0FBQ0osQ0FBQztBQUVEMUIsV0FBVyxDQUFDNEIsUUFBUSxDQUFFLGNBQWMsRUFBRUwsWUFBYSxDQUFDO0FBRXBELGVBQWVBLFlBQVkifQ==