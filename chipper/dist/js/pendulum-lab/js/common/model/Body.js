// Copyright 2014-2022, University of Colorado Boulder

/**
 * Body model for gravitational acceleration
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import PhysicalConstants from '../../../../phet-core/js/PhysicalConstants.js';
import pendulumLab from '../../pendulumLab.js';
import PendulumLabStrings from '../../PendulumLabStrings.js';
const customString = PendulumLabStrings.custom;
const earthString = PendulumLabStrings.earth;
const jupiterString = PendulumLabStrings.jupiter;
const moonString = PendulumLabStrings.moon;
const planetXString = PendulumLabStrings.planetX;
class Body {
  /**
   * @param {string} title
   * @param {number|null} gravity - Gravitational acceleration on body (m/s^2) if defined.
   */
  constructor(title, gravity) {
    // @public {string} (read-only)
    this.title = title;

    // @public {number|null} (read-only) - Gravitation acceleration (if available) in meters/second^2
    this.gravity = gravity;
  }
}
pendulumLab.register('Body', Body);
Body.MOON = new Body(moonString, 1.62);
Body.EARTH = new Body(earthString, PhysicalConstants.GRAVITY_ON_EARTH);
Body.JUPITER = new Body(jupiterString, 24.79);
Body.PLANET_X = new Body(planetXString, 14.2);
Body.CUSTOM = new Body(customString, null);

// array of all the bodies used in the simulation.
Body.BODIES = [Body.MOON, Body.EARTH, Body.JUPITER, Body.PLANET_X, Body.CUSTOM];

// verify that enumeration is immutable, without the runtime penalty in production code
if (assert) {
  Object.freeze(Body);
}
export default Body;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaHlzaWNhbENvbnN0YW50cyIsInBlbmR1bHVtTGFiIiwiUGVuZHVsdW1MYWJTdHJpbmdzIiwiY3VzdG9tU3RyaW5nIiwiY3VzdG9tIiwiZWFydGhTdHJpbmciLCJlYXJ0aCIsImp1cGl0ZXJTdHJpbmciLCJqdXBpdGVyIiwibW9vblN0cmluZyIsIm1vb24iLCJwbGFuZXRYU3RyaW5nIiwicGxhbmV0WCIsIkJvZHkiLCJjb25zdHJ1Y3RvciIsInRpdGxlIiwiZ3Jhdml0eSIsInJlZ2lzdGVyIiwiTU9PTiIsIkVBUlRIIiwiR1JBVklUWV9PTl9FQVJUSCIsIkpVUElURVIiLCJQTEFORVRfWCIsIkNVU1RPTSIsIkJPRElFUyIsImFzc2VydCIsIk9iamVjdCIsImZyZWV6ZSJdLCJzb3VyY2VzIjpbIkJvZHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQm9keSBtb2RlbCBmb3IgZ3Jhdml0YXRpb25hbCBhY2NlbGVyYXRpb25cclxuICpcclxuICogQGF1dGhvciBBbmRyZXkgWmVsZW5rb3YgKE1sZWFybmVyKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQaHlzaWNhbENvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvUGh5c2ljYWxDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgcGVuZHVsdW1MYWIgZnJvbSAnLi4vLi4vcGVuZHVsdW1MYWIuanMnO1xyXG5pbXBvcnQgUGVuZHVsdW1MYWJTdHJpbmdzIGZyb20gJy4uLy4uL1BlbmR1bHVtTGFiU3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBjdXN0b21TdHJpbmcgPSBQZW5kdWx1bUxhYlN0cmluZ3MuY3VzdG9tO1xyXG5jb25zdCBlYXJ0aFN0cmluZyA9IFBlbmR1bHVtTGFiU3RyaW5ncy5lYXJ0aDtcclxuY29uc3QganVwaXRlclN0cmluZyA9IFBlbmR1bHVtTGFiU3RyaW5ncy5qdXBpdGVyO1xyXG5jb25zdCBtb29uU3RyaW5nID0gUGVuZHVsdW1MYWJTdHJpbmdzLm1vb247XHJcbmNvbnN0IHBsYW5ldFhTdHJpbmcgPSBQZW5kdWx1bUxhYlN0cmluZ3MucGxhbmV0WDtcclxuXHJcbmNsYXNzIEJvZHkge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfG51bGx9IGdyYXZpdHkgLSBHcmF2aXRhdGlvbmFsIGFjY2VsZXJhdGlvbiBvbiBib2R5IChtL3NeMikgaWYgZGVmaW5lZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGl0bGUsIGdyYXZpdHkgKSB7XHJcbiAgICAvLyBAcHVibGljIHtzdHJpbmd9IChyZWFkLW9ubHkpXHJcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7bnVtYmVyfG51bGx9IChyZWFkLW9ubHkpIC0gR3Jhdml0YXRpb24gYWNjZWxlcmF0aW9uIChpZiBhdmFpbGFibGUpIGluIG1ldGVycy9zZWNvbmReMlxyXG4gICAgdGhpcy5ncmF2aXR5ID0gZ3Jhdml0eTtcclxuICB9XHJcbn1cclxuXHJcbnBlbmR1bHVtTGFiLnJlZ2lzdGVyKCAnQm9keScsIEJvZHkgKTtcclxuXHJcbkJvZHkuTU9PTiA9IG5ldyBCb2R5KCBtb29uU3RyaW5nLCAxLjYyICk7XHJcbkJvZHkuRUFSVEggPSBuZXcgQm9keSggZWFydGhTdHJpbmcsIFBoeXNpY2FsQ29uc3RhbnRzLkdSQVZJVFlfT05fRUFSVEggKTtcclxuQm9keS5KVVBJVEVSID0gbmV3IEJvZHkoIGp1cGl0ZXJTdHJpbmcsIDI0Ljc5ICk7XHJcbkJvZHkuUExBTkVUX1ggPSBuZXcgQm9keSggcGxhbmV0WFN0cmluZywgMTQuMiApO1xyXG5Cb2R5LkNVU1RPTSA9IG5ldyBCb2R5KCBjdXN0b21TdHJpbmcsIG51bGwgKTtcclxuXHJcbi8vIGFycmF5IG9mIGFsbCB0aGUgYm9kaWVzIHVzZWQgaW4gdGhlIHNpbXVsYXRpb24uXHJcbkJvZHkuQk9ESUVTID0gW1xyXG4gIEJvZHkuTU9PTixcclxuICBCb2R5LkVBUlRILFxyXG4gIEJvZHkuSlVQSVRFUixcclxuICBCb2R5LlBMQU5FVF9YLFxyXG4gIEJvZHkuQ1VTVE9NXHJcbl07XHJcblxyXG4vLyB2ZXJpZnkgdGhhdCBlbnVtZXJhdGlvbiBpcyBpbW11dGFibGUsIHdpdGhvdXQgdGhlIHJ1bnRpbWUgcGVuYWx0eSBpbiBwcm9kdWN0aW9uIGNvZGVcclxuaWYgKCBhc3NlcnQgKSB7IE9iamVjdC5mcmVlemUoIEJvZHkgKTsgfVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQm9keTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsaUJBQWlCLE1BQU0sK0NBQStDO0FBQzdFLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBRTVELE1BQU1DLFlBQVksR0FBR0Qsa0JBQWtCLENBQUNFLE1BQU07QUFDOUMsTUFBTUMsV0FBVyxHQUFHSCxrQkFBa0IsQ0FBQ0ksS0FBSztBQUM1QyxNQUFNQyxhQUFhLEdBQUdMLGtCQUFrQixDQUFDTSxPQUFPO0FBQ2hELE1BQU1DLFVBQVUsR0FBR1Asa0JBQWtCLENBQUNRLElBQUk7QUFDMUMsTUFBTUMsYUFBYSxHQUFHVCxrQkFBa0IsQ0FBQ1UsT0FBTztBQUVoRCxNQUFNQyxJQUFJLENBQUM7RUFDVDtBQUNGO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRztJQUM1QjtJQUNBLElBQUksQ0FBQ0QsS0FBSyxHQUFHQSxLQUFLOztJQUVsQjtJQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0VBQ3hCO0FBQ0Y7QUFFQWYsV0FBVyxDQUFDZ0IsUUFBUSxDQUFFLE1BQU0sRUFBRUosSUFBSyxDQUFDO0FBRXBDQSxJQUFJLENBQUNLLElBQUksR0FBRyxJQUFJTCxJQUFJLENBQUVKLFVBQVUsRUFBRSxJQUFLLENBQUM7QUFDeENJLElBQUksQ0FBQ00sS0FBSyxHQUFHLElBQUlOLElBQUksQ0FBRVIsV0FBVyxFQUFFTCxpQkFBaUIsQ0FBQ29CLGdCQUFpQixDQUFDO0FBQ3hFUCxJQUFJLENBQUNRLE9BQU8sR0FBRyxJQUFJUixJQUFJLENBQUVOLGFBQWEsRUFBRSxLQUFNLENBQUM7QUFDL0NNLElBQUksQ0FBQ1MsUUFBUSxHQUFHLElBQUlULElBQUksQ0FBRUYsYUFBYSxFQUFFLElBQUssQ0FBQztBQUMvQ0UsSUFBSSxDQUFDVSxNQUFNLEdBQUcsSUFBSVYsSUFBSSxDQUFFVixZQUFZLEVBQUUsSUFBSyxDQUFDOztBQUU1QztBQUNBVSxJQUFJLENBQUNXLE1BQU0sR0FBRyxDQUNaWCxJQUFJLENBQUNLLElBQUksRUFDVEwsSUFBSSxDQUFDTSxLQUFLLEVBQ1ZOLElBQUksQ0FBQ1EsT0FBTyxFQUNaUixJQUFJLENBQUNTLFFBQVEsRUFDYlQsSUFBSSxDQUFDVSxNQUFNLENBQ1o7O0FBRUQ7QUFDQSxJQUFLRSxNQUFNLEVBQUc7RUFBRUMsTUFBTSxDQUFDQyxNQUFNLENBQUVkLElBQUssQ0FBQztBQUFFO0FBRXZDLGVBQWVBLElBQUkifQ==