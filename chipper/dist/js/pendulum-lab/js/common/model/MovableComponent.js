// Copyright 2014-2020, University of Colorado Boulder

/**
 * A movable model element.
 * Semantics of units are determined by the client.
 *
 * @author Andrey Zelenkov (MLearner)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Property from '../../../../axon/js/Property.js';
import pendulumLab from '../../pendulumLab.js';
class MovableComponent {
  /**
   * @param {boolean} isInitiallyVisible
   */
  constructor(isInitiallyVisible) {
    // @public {Property.<Vector2|null>} - Initial value will be set in view, after calculating all bounds of nodes
    this.positionProperty = new Property(null);

    // @public {Property.<boolean>} flag to determine stopwatch state
    this.isVisibleProperty = new BooleanProperty(isInitiallyVisible);
  }

  /**
   * Function that sets the initial position of a movable object and keeps an internal copy of it.
   * @public
   *
   * @param {Vector2} initialPosition
   */
  setInitialPositionValue(initialPosition) {
    // position to use for resetting
    // make a copy of the initial position vector
    this.initialPosition = initialPosition.copy();

    // set the position to the initial position
    this.positionProperty.value = this.initialPosition.copy();
  }

  /**
   * Reset function
   * @public
   */
  reset() {
    // Reset the position to the initial position
    this.positionProperty.value = this.initialPosition ? this.initialPosition.copy() : null;
    this.isVisibleProperty.reset();
  }
}
pendulumLab.register('MovableComponent', MovableComponent);
export default MovableComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJQcm9wZXJ0eSIsInBlbmR1bHVtTGFiIiwiTW92YWJsZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiaXNJbml0aWFsbHlWaXNpYmxlIiwicG9zaXRpb25Qcm9wZXJ0eSIsImlzVmlzaWJsZVByb3BlcnR5Iiwic2V0SW5pdGlhbFBvc2l0aW9uVmFsdWUiLCJpbml0aWFsUG9zaXRpb24iLCJjb3B5IiwidmFsdWUiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTW92YWJsZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIG1vdmFibGUgbW9kZWwgZWxlbWVudC5cclxuICogU2VtYW50aWNzIG9mIHVuaXRzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBjbGllbnQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmV5IFplbGVua292IChNTGVhcm5lcilcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgcGVuZHVsdW1MYWIgZnJvbSAnLi4vLi4vcGVuZHVsdW1MYWIuanMnO1xyXG5cclxuY2xhc3MgTW92YWJsZUNvbXBvbmVudCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0luaXRpYWxseVZpc2libGVcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaXNJbml0aWFsbHlWaXNpYmxlICkge1xyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPFZlY3RvcjJ8bnVsbD59IC0gSW5pdGlhbCB2YWx1ZSB3aWxsIGJlIHNldCBpbiB2aWV3LCBhZnRlciBjYWxjdWxhdGluZyBhbGwgYm91bmRzIG9mIG5vZGVzXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIG51bGwgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGZsYWcgdG8gZGV0ZXJtaW5lIHN0b3B3YXRjaCBzdGF0ZVxyXG4gICAgdGhpcy5pc1Zpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGlzSW5pdGlhbGx5VmlzaWJsZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdGhhdCBzZXRzIHRoZSBpbml0aWFsIHBvc2l0aW9uIG9mIGEgbW92YWJsZSBvYmplY3QgYW5kIGtlZXBzIGFuIGludGVybmFsIGNvcHkgb2YgaXQuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBpbml0aWFsUG9zaXRpb25cclxuICAgKi9cclxuICBzZXRJbml0aWFsUG9zaXRpb25WYWx1ZSggaW5pdGlhbFBvc2l0aW9uICkge1xyXG5cclxuICAgIC8vIHBvc2l0aW9uIHRvIHVzZSBmb3IgcmVzZXR0aW5nXHJcbiAgICAvLyBtYWtlIGEgY29weSBvZiB0aGUgaW5pdGlhbCBwb3NpdGlvbiB2ZWN0b3JcclxuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gaW5pdGlhbFBvc2l0aW9uLmNvcHkoKTtcclxuXHJcbiAgICAvLyBzZXQgdGhlIHBvc2l0aW9uIHRvIHRoZSBpbml0aWFsIHBvc2l0aW9uXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgPSB0aGlzLmluaXRpYWxQb3NpdGlvbi5jb3B5KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCBmdW5jdGlvblxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIC8vIFJlc2V0IHRoZSBwb3NpdGlvbiB0byB0aGUgaW5pdGlhbCBwb3NpdGlvblxyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnZhbHVlID0gdGhpcy5pbml0aWFsUG9zaXRpb24gPyB0aGlzLmluaXRpYWxQb3NpdGlvbi5jb3B5KCkgOiBudWxsO1xyXG5cclxuICAgIHRoaXMuaXNWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnBlbmR1bHVtTGFiLnJlZ2lzdGVyKCAnTW92YWJsZUNvbXBvbmVudCcsIE1vdmFibGVDb21wb25lbnQgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1vdmFibGVDb21wb25lbnQ7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFFOUMsTUFBTUMsZ0JBQWdCLENBQUM7RUFDckI7QUFDRjtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLGtCQUFrQixFQUFHO0lBQ2hDO0lBQ0EsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxJQUFJTCxRQUFRLENBQUUsSUFBSyxDQUFDOztJQUU1QztJQUNBLElBQUksQ0FBQ00saUJBQWlCLEdBQUcsSUFBSVAsZUFBZSxDQUFFSyxrQkFBbUIsQ0FBQztFQUNwRTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsdUJBQXVCQSxDQUFFQyxlQUFlLEVBQUc7SUFFekM7SUFDQTtJQUNBLElBQUksQ0FBQ0EsZUFBZSxHQUFHQSxlQUFlLENBQUNDLElBQUksQ0FBQyxDQUFDOztJQUU3QztJQUNBLElBQUksQ0FBQ0osZ0JBQWdCLENBQUNLLEtBQUssR0FBRyxJQUFJLENBQUNGLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7RUFDM0Q7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUUsS0FBS0EsQ0FBQSxFQUFHO0lBQ047SUFDQSxJQUFJLENBQUNOLGdCQUFnQixDQUFDSyxLQUFLLEdBQUcsSUFBSSxDQUFDRixlQUFlLEdBQUcsSUFBSSxDQUFDQSxlQUFlLENBQUNDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSTtJQUV2RixJQUFJLENBQUNILGlCQUFpQixDQUFDSyxLQUFLLENBQUMsQ0FBQztFQUNoQztBQUNGO0FBRUFWLFdBQVcsQ0FBQ1csUUFBUSxDQUFFLGtCQUFrQixFQUFFVixnQkFBaUIsQ0FBQztBQUU1RCxlQUFlQSxnQkFBZ0IifQ==