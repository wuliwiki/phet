// Copyright 2014-2020, University of Colorado Boulder

/**
 * Main model constructor for Lab screen in 'Pendulum Lab' simulation.
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import EnergyModel from '../../energy/model/EnergyModel.js';
import pendulumLab from '../../pendulumLab.js';
import PeriodTimer from './PeriodTimer.js';
class LabModel extends EnergyModel {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      hasPeriodTimer: true,
      energyBoxExpanded: false
    }, options);
    super(options);

    // add properties to control visibility of arrows
    this.isVelocityVisibleProperty = new BooleanProperty(false);
    this.isAccelerationVisibleProperty = new BooleanProperty(false);

    // model for period trace
    this.periodTimer = new PeriodTimer(this.pendula, this.isPeriodTraceVisibleProperty);
  }

  /**
   * Returns the pendula to rest.
   * @public
   * @override
   */
  returnPendula() {
    super.returnPendula();
    this.periodTimer.isRunningProperty.value = false;
  }

  /**
   * Reset function that resets the pendula, settings, and period timer settings and default positions
   * @public
   */
  reset() {
    super.reset();
    this.isVelocityVisibleProperty.reset();
    this.isAccelerationVisibleProperty.reset();

    // reset period trace model
    this.periodTimer.reset();
  }
}
pendulumLab.register('LabModel', LabModel);
export default LabModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJtZXJnZSIsIkVuZXJneU1vZGVsIiwicGVuZHVsdW1MYWIiLCJQZXJpb2RUaW1lciIsIkxhYk1vZGVsIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiaGFzUGVyaW9kVGltZXIiLCJlbmVyZ3lCb3hFeHBhbmRlZCIsImlzVmVsb2NpdHlWaXNpYmxlUHJvcGVydHkiLCJpc0FjY2VsZXJhdGlvblZpc2libGVQcm9wZXJ0eSIsInBlcmlvZFRpbWVyIiwicGVuZHVsYSIsImlzUGVyaW9kVHJhY2VWaXNpYmxlUHJvcGVydHkiLCJyZXR1cm5QZW5kdWxhIiwiaXNSdW5uaW5nUHJvcGVydHkiLCJ2YWx1ZSIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMYWJNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWluIG1vZGVsIGNvbnN0cnVjdG9yIGZvciBMYWIgc2NyZWVuIGluICdQZW5kdWx1bSBMYWInIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmV5IFplbGVua292IChNbGVhcm5lcilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBFbmVyZ3lNb2RlbCBmcm9tICcuLi8uLi9lbmVyZ3kvbW9kZWwvRW5lcmd5TW9kZWwuanMnO1xyXG5pbXBvcnQgcGVuZHVsdW1MYWIgZnJvbSAnLi4vLi4vcGVuZHVsdW1MYWIuanMnO1xyXG5pbXBvcnQgUGVyaW9kVGltZXIgZnJvbSAnLi9QZXJpb2RUaW1lci5qcyc7XHJcblxyXG5jbGFzcyBMYWJNb2RlbCBleHRlbmRzIEVuZXJneU1vZGVsIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgaGFzUGVyaW9kVGltZXI6IHRydWUsXHJcbiAgICAgIGVuZXJneUJveEV4cGFuZGVkOiBmYWxzZVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gYWRkIHByb3BlcnRpZXMgdG8gY29udHJvbCB2aXNpYmlsaXR5IG9mIGFycm93c1xyXG4gICAgdGhpcy5pc1ZlbG9jaXR5VmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKTtcclxuICAgIHRoaXMuaXNBY2NlbGVyYXRpb25WaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG5cclxuICAgIC8vIG1vZGVsIGZvciBwZXJpb2QgdHJhY2VcclxuICAgIHRoaXMucGVyaW9kVGltZXIgPSBuZXcgUGVyaW9kVGltZXIoIHRoaXMucGVuZHVsYSwgdGhpcy5pc1BlcmlvZFRyYWNlVmlzaWJsZVByb3BlcnR5ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBwZW5kdWxhIHRvIHJlc3QuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHJldHVyblBlbmR1bGEoKSB7XHJcbiAgICBzdXBlci5yZXR1cm5QZW5kdWxhKCk7XHJcblxyXG4gICAgdGhpcy5wZXJpb2RUaW1lci5pc1J1bm5pbmdQcm9wZXJ0eS52YWx1ZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXQgZnVuY3Rpb24gdGhhdCByZXNldHMgdGhlIHBlbmR1bGEsIHNldHRpbmdzLCBhbmQgcGVyaW9kIHRpbWVyIHNldHRpbmdzIGFuZCBkZWZhdWx0IHBvc2l0aW9uc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcblxyXG4gICAgdGhpcy5pc1ZlbG9jaXR5VmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmlzQWNjZWxlcmF0aW9uVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcblxyXG4gICAgLy8gcmVzZXQgcGVyaW9kIHRyYWNlIG1vZGVsXHJcbiAgICB0aGlzLnBlcmlvZFRpbWVyLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5wZW5kdWx1bUxhYi5yZWdpc3RlciggJ0xhYk1vZGVsJywgTGFiTW9kZWwgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExhYk1vZGVsO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSxtQ0FBbUM7QUFDM0QsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRTFDLE1BQU1DLFFBQVEsU0FBU0gsV0FBVyxDQUFDO0VBQ2pDO0FBQ0Y7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFDckJBLE9BQU8sR0FBR04sS0FBSyxDQUFFO01BQ2ZPLGNBQWMsRUFBRSxJQUFJO01BQ3BCQyxpQkFBaUIsRUFBRTtJQUNyQixDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUEsT0FBUSxDQUFDOztJQUVoQjtJQUNBLElBQUksQ0FBQ0cseUJBQXlCLEdBQUcsSUFBSVYsZUFBZSxDQUFFLEtBQU0sQ0FBQztJQUM3RCxJQUFJLENBQUNXLDZCQUE2QixHQUFHLElBQUlYLGVBQWUsQ0FBRSxLQUFNLENBQUM7O0lBRWpFO0lBQ0EsSUFBSSxDQUFDWSxXQUFXLEdBQUcsSUFBSVIsV0FBVyxDQUFFLElBQUksQ0FBQ1MsT0FBTyxFQUFFLElBQUksQ0FBQ0MsNEJBQTZCLENBQUM7RUFDdkY7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxhQUFhQSxDQUFBLEVBQUc7SUFDZCxLQUFLLENBQUNBLGFBQWEsQ0FBQyxDQUFDO0lBRXJCLElBQUksQ0FBQ0gsV0FBVyxDQUFDSSxpQkFBaUIsQ0FBQ0MsS0FBSyxHQUFHLEtBQUs7RUFDbEQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUViLElBQUksQ0FBQ1IseUJBQXlCLENBQUNRLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLElBQUksQ0FBQ1AsNkJBQTZCLENBQUNPLEtBQUssQ0FBQyxDQUFDOztJQUUxQztJQUNBLElBQUksQ0FBQ04sV0FBVyxDQUFDTSxLQUFLLENBQUMsQ0FBQztFQUMxQjtBQUNGO0FBRUFmLFdBQVcsQ0FBQ2dCLFFBQVEsQ0FBRSxVQUFVLEVBQUVkLFFBQVMsQ0FBQztBQUU1QyxlQUFlQSxRQUFRIn0=