// Copyright 2014-2022, University of Colorado Boulder

/**
 * Main view node for Lab screen in 'Pendulum Lab' simulation.
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import PendulumLabConstants from '../../common/PendulumLabConstants.js';
import EnergyScreenView from '../../energy/view/EnergyScreenView.js';
import pendulumLab from '../../pendulumLab.js';
import ArrowVisibilityPanel from './ArrowVisibilityPanel.js';
import PeriodTimerNode from './PeriodTimerNode.js';
class LabScreenView extends EnergyScreenView {
  /**
   * @param {PendulumLabModel} model
   */
  constructor(model) {
    super(model, {
      hasGravityTweakers: true,
      hasPeriodTimer: true
    });

    // create arrow panel node to the bottom layer
    const arrowsPanelNode = new ArrowVisibilityPanel(model.isVelocityVisibleProperty, model.isAccelerationVisibleProperty, {
      left: this.layoutBounds.left + PendulumLabConstants.PANEL_PADDING,
      top: this.layoutBounds.top + PendulumLabConstants.PANEL_PADDING
    });
    this.arrowsPanelLayer.addChild(arrowsPanelNode);
    const periodTimerNode = new PeriodTimerNode(model.periodTimer, model.pendula[1].isVisibleProperty, this.layoutBounds);
    this.periodTimerLayer.addChild(periodTimerNode);

    // layout the nodes
    periodTimerNode.right = this.rightPanelsContainer.left - 10;
    periodTimerNode.centerY = this.stopwatchNode.centerY;
    // move energyGraphAccordionBox to the bottom
    this.energyGraphAccordionBox.top = arrowsPanelNode.bottom + PendulumLabConstants.PANEL_PADDING;
    model.periodTimer.setInitialPositionValue(periodTimerNode.center);

    // set dynamical dragBounds to keep the periodTimer within the visibleBounds
    this.visibleBoundsProperty.link(visibleBounds => {
      periodTimerNode.dragListener.dragBoundsProperty = visibleBounds.erodedXY(periodTimerNode.width / 2, periodTimerNode.height / 2);
    });
    this.resizeEnergyGraphToFit();
  }
}
pendulumLab.register('LabScreenView', LabScreenView);
export default LabScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQZW5kdWx1bUxhYkNvbnN0YW50cyIsIkVuZXJneVNjcmVlblZpZXciLCJwZW5kdWx1bUxhYiIsIkFycm93VmlzaWJpbGl0eVBhbmVsIiwiUGVyaW9kVGltZXJOb2RlIiwiTGFiU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJoYXNHcmF2aXR5VHdlYWtlcnMiLCJoYXNQZXJpb2RUaW1lciIsImFycm93c1BhbmVsTm9kZSIsImlzVmVsb2NpdHlWaXNpYmxlUHJvcGVydHkiLCJpc0FjY2VsZXJhdGlvblZpc2libGVQcm9wZXJ0eSIsImxlZnQiLCJsYXlvdXRCb3VuZHMiLCJQQU5FTF9QQURESU5HIiwidG9wIiwiYXJyb3dzUGFuZWxMYXllciIsImFkZENoaWxkIiwicGVyaW9kVGltZXJOb2RlIiwicGVyaW9kVGltZXIiLCJwZW5kdWxhIiwiaXNWaXNpYmxlUHJvcGVydHkiLCJwZXJpb2RUaW1lckxheWVyIiwicmlnaHQiLCJyaWdodFBhbmVsc0NvbnRhaW5lciIsImNlbnRlclkiLCJzdG9wd2F0Y2hOb2RlIiwiZW5lcmd5R3JhcGhBY2NvcmRpb25Cb3giLCJib3R0b20iLCJzZXRJbml0aWFsUG9zaXRpb25WYWx1ZSIsImNlbnRlciIsInZpc2libGVCb3VuZHNQcm9wZXJ0eSIsImxpbmsiLCJ2aXNpYmxlQm91bmRzIiwiZHJhZ0xpc3RlbmVyIiwiZHJhZ0JvdW5kc1Byb3BlcnR5IiwiZXJvZGVkWFkiLCJ3aWR0aCIsImhlaWdodCIsInJlc2l6ZUVuZXJneUdyYXBoVG9GaXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxhYlNjcmVlblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiB2aWV3IG5vZGUgZm9yIExhYiBzY3JlZW4gaW4gJ1BlbmR1bHVtIExhYicgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBBbmRyZXkgWmVsZW5rb3YgKE1sZWFybmVyKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQZW5kdWx1bUxhYkNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vUGVuZHVsdW1MYWJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRW5lcmd5U2NyZWVuVmlldyBmcm9tICcuLi8uLi9lbmVyZ3kvdmlldy9FbmVyZ3lTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IHBlbmR1bHVtTGFiIGZyb20gJy4uLy4uL3BlbmR1bHVtTGFiLmpzJztcclxuaW1wb3J0IEFycm93VmlzaWJpbGl0eVBhbmVsIGZyb20gJy4vQXJyb3dWaXNpYmlsaXR5UGFuZWwuanMnO1xyXG5pbXBvcnQgUGVyaW9kVGltZXJOb2RlIGZyb20gJy4vUGVyaW9kVGltZXJOb2RlLmpzJztcclxuXHJcbmNsYXNzIExhYlNjcmVlblZpZXcgZXh0ZW5kcyBFbmVyZ3lTY3JlZW5WaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQZW5kdWx1bUxhYk1vZGVsfSBtb2RlbFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCApIHtcclxuICAgIHN1cGVyKCBtb2RlbCwge1xyXG4gICAgICBoYXNHcmF2aXR5VHdlYWtlcnM6IHRydWUsXHJcbiAgICAgIGhhc1BlcmlvZFRpbWVyOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIGFycm93IHBhbmVsIG5vZGUgdG8gdGhlIGJvdHRvbSBsYXllclxyXG4gICAgY29uc3QgYXJyb3dzUGFuZWxOb2RlID0gbmV3IEFycm93VmlzaWJpbGl0eVBhbmVsKCBtb2RlbC5pc1ZlbG9jaXR5VmlzaWJsZVByb3BlcnR5LCBtb2RlbC5pc0FjY2VsZXJhdGlvblZpc2libGVQcm9wZXJ0eSwge1xyXG4gICAgICBsZWZ0OiB0aGlzLmxheW91dEJvdW5kcy5sZWZ0ICsgUGVuZHVsdW1MYWJDb25zdGFudHMuUEFORUxfUEFERElORyxcclxuICAgICAgdG9wOiB0aGlzLmxheW91dEJvdW5kcy50b3AgKyBQZW5kdWx1bUxhYkNvbnN0YW50cy5QQU5FTF9QQURESU5HXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFycm93c1BhbmVsTGF5ZXIuYWRkQ2hpbGQoIGFycm93c1BhbmVsTm9kZSApO1xyXG5cclxuICAgIGNvbnN0IHBlcmlvZFRpbWVyTm9kZSA9IG5ldyBQZXJpb2RUaW1lck5vZGUoIG1vZGVsLnBlcmlvZFRpbWVyLCBtb2RlbC5wZW5kdWxhWyAxIF0uaXNWaXNpYmxlUHJvcGVydHksIHRoaXMubGF5b3V0Qm91bmRzICk7XHJcbiAgICB0aGlzLnBlcmlvZFRpbWVyTGF5ZXIuYWRkQ2hpbGQoIHBlcmlvZFRpbWVyTm9kZSApO1xyXG5cclxuICAgIC8vIGxheW91dCB0aGUgbm9kZXNcclxuICAgIHBlcmlvZFRpbWVyTm9kZS5yaWdodCA9IHRoaXMucmlnaHRQYW5lbHNDb250YWluZXIubGVmdCAtIDEwO1xyXG4gICAgcGVyaW9kVGltZXJOb2RlLmNlbnRlclkgPSB0aGlzLnN0b3B3YXRjaE5vZGUuY2VudGVyWTtcclxuICAgIC8vIG1vdmUgZW5lcmd5R3JhcGhBY2NvcmRpb25Cb3ggdG8gdGhlIGJvdHRvbVxyXG4gICAgdGhpcy5lbmVyZ3lHcmFwaEFjY29yZGlvbkJveC50b3AgPSBhcnJvd3NQYW5lbE5vZGUuYm90dG9tICsgUGVuZHVsdW1MYWJDb25zdGFudHMuUEFORUxfUEFERElORztcclxuXHJcbiAgICBtb2RlbC5wZXJpb2RUaW1lci5zZXRJbml0aWFsUG9zaXRpb25WYWx1ZSggcGVyaW9kVGltZXJOb2RlLmNlbnRlciApO1xyXG5cclxuICAgIC8vIHNldCBkeW5hbWljYWwgZHJhZ0JvdW5kcyB0byBrZWVwIHRoZSBwZXJpb2RUaW1lciB3aXRoaW4gdGhlIHZpc2libGVCb3VuZHNcclxuICAgIHRoaXMudmlzaWJsZUJvdW5kc1Byb3BlcnR5LmxpbmsoIHZpc2libGVCb3VuZHMgPT4ge1xyXG4gICAgICBwZXJpb2RUaW1lck5vZGUuZHJhZ0xpc3RlbmVyLmRyYWdCb3VuZHNQcm9wZXJ0eSA9IHZpc2libGVCb3VuZHMuZXJvZGVkWFkoIHBlcmlvZFRpbWVyTm9kZS53aWR0aCAvIDIsIHBlcmlvZFRpbWVyTm9kZS5oZWlnaHQgLyAyICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5yZXNpemVFbmVyZ3lHcmFwaFRvRml0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5wZW5kdWx1bUxhYi5yZWdpc3RlciggJ0xhYlNjcmVlblZpZXcnLCBMYWJTY3JlZW5WaWV3ICk7XHJcbmV4cG9ydCBkZWZhdWx0IExhYlNjcmVlblZpZXc7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxvQkFBb0IsTUFBTSxzQ0FBc0M7QUFDdkUsT0FBT0MsZ0JBQWdCLE1BQU0sdUNBQXVDO0FBQ3BFLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBQzVELE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFbEQsTUFBTUMsYUFBYSxTQUFTSixnQkFBZ0IsQ0FBQztFQUUzQztBQUNGO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsS0FBSyxFQUFHO0lBQ25CLEtBQUssQ0FBRUEsS0FBSyxFQUFFO01BQ1pDLGtCQUFrQixFQUFFLElBQUk7TUFDeEJDLGNBQWMsRUFBRTtJQUNsQixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxlQUFlLEdBQUcsSUFBSVAsb0JBQW9CLENBQUVJLEtBQUssQ0FBQ0kseUJBQXlCLEVBQUVKLEtBQUssQ0FBQ0ssNkJBQTZCLEVBQUU7TUFDdEhDLElBQUksRUFBRSxJQUFJLENBQUNDLFlBQVksQ0FBQ0QsSUFBSSxHQUFHYixvQkFBb0IsQ0FBQ2UsYUFBYTtNQUNqRUMsR0FBRyxFQUFFLElBQUksQ0FBQ0YsWUFBWSxDQUFDRSxHQUFHLEdBQUdoQixvQkFBb0IsQ0FBQ2U7SUFDcEQsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ0MsUUFBUSxDQUFFUixlQUFnQixDQUFDO0lBRWpELE1BQU1TLGVBQWUsR0FBRyxJQUFJZixlQUFlLENBQUVHLEtBQUssQ0FBQ2EsV0FBVyxFQUFFYixLQUFLLENBQUNjLE9BQU8sQ0FBRSxDQUFDLENBQUUsQ0FBQ0MsaUJBQWlCLEVBQUUsSUFBSSxDQUFDUixZQUFhLENBQUM7SUFDekgsSUFBSSxDQUFDUyxnQkFBZ0IsQ0FBQ0wsUUFBUSxDQUFFQyxlQUFnQixDQUFDOztJQUVqRDtJQUNBQSxlQUFlLENBQUNLLEtBQUssR0FBRyxJQUFJLENBQUNDLG9CQUFvQixDQUFDWixJQUFJLEdBQUcsRUFBRTtJQUMzRE0sZUFBZSxDQUFDTyxPQUFPLEdBQUcsSUFBSSxDQUFDQyxhQUFhLENBQUNELE9BQU87SUFDcEQ7SUFDQSxJQUFJLENBQUNFLHVCQUF1QixDQUFDWixHQUFHLEdBQUdOLGVBQWUsQ0FBQ21CLE1BQU0sR0FBRzdCLG9CQUFvQixDQUFDZSxhQUFhO0lBRTlGUixLQUFLLENBQUNhLFdBQVcsQ0FBQ1UsdUJBQXVCLENBQUVYLGVBQWUsQ0FBQ1ksTUFBTyxDQUFDOztJQUVuRTtJQUNBLElBQUksQ0FBQ0MscUJBQXFCLENBQUNDLElBQUksQ0FBRUMsYUFBYSxJQUFJO01BQ2hEZixlQUFlLENBQUNnQixZQUFZLENBQUNDLGtCQUFrQixHQUFHRixhQUFhLENBQUNHLFFBQVEsQ0FBRWxCLGVBQWUsQ0FBQ21CLEtBQUssR0FBRyxDQUFDLEVBQUVuQixlQUFlLENBQUNvQixNQUFNLEdBQUcsQ0FBRSxDQUFDO0lBQ25JLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0Msc0JBQXNCLENBQUMsQ0FBQztFQUMvQjtBQUNGO0FBRUF0QyxXQUFXLENBQUN1QyxRQUFRLENBQUUsZUFBZSxFQUFFcEMsYUFBYyxDQUFDO0FBQ3RELGVBQWVBLGFBQWEifQ==