// Copyright 2016-2022, University of Colorado Boulder

/**
 * MOTHAConstants is the collection of constants used throughout this simulation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import VisibleColor from '../../../scenery-phet/js/VisibleColor.js';
import modelsOfTheHydrogenAtom from '../modelsOfTheHydrogenAtom.js';
import Range from '../../../dot/js/Range.js';
import Vector2 from '../../../dot/js/Vector2.js';
const MOTHAConstants = {
  // margins for all ScreenView instances
  SCREEN_VIEW_X_MARGIN: 20,
  SCREEN_VIEW_Y_MARGIN: 20,
  // This value is the same as the Java version, to preserve the same relative sizes of things in the model.
  // See ANIMATION_BOX_SIZE in HAConstants.java.
  ZOOMED_IN_BOX_MODEL_SIZE: 475,
  // This value is specific to the HTML5 version.
  ZOOMED_IN_BOX_VIEW_SIZE: 400,
  // The notion of "ground state" does not apply to all hydrogen atom models, but it is convenient to have it here.
  GROUND_STATE: 1,
  // radii, in model coordinates, unitless
  ELECTRON_RADIUS: 5,
  PROTON_RADIUS: 6,
  NEUTRON_RADIUS: 6,
  PHOTON_RADIUS: 15,
  BILLIARD_BALL_RADIUS: 30,
  PLUM_PUDDING_RADIUS: 30,
  // speeds, in distance per second
  PHOTON_INITIAL_SPEED: 300,
  MONOCHROMATIC_WAVELENGTH_RANGE: new Range(92, VisibleColor.MAX_WAVELENGTH),
  MAX_SPECTROMETER_SNAPSHOTS: 3,
  // margin between the state display and inside edge of zoomed-in box
  STATE_DISPLAY_MARGINS: new Vector2(10, 10)
};
assert && assert(MOTHAConstants.GROUND_STATE === 1, 'This is a fundamental assumption of this implementation.');
modelsOfTheHydrogenAtom.register('MOTHAConstants', MOTHAConstants);
export default MOTHAConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWaXNpYmxlQ29sb3IiLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIlJhbmdlIiwiVmVjdG9yMiIsIk1PVEhBQ29uc3RhbnRzIiwiU0NSRUVOX1ZJRVdfWF9NQVJHSU4iLCJTQ1JFRU5fVklFV19ZX01BUkdJTiIsIlpPT01FRF9JTl9CT1hfTU9ERUxfU0laRSIsIlpPT01FRF9JTl9CT1hfVklFV19TSVpFIiwiR1JPVU5EX1NUQVRFIiwiRUxFQ1RST05fUkFESVVTIiwiUFJPVE9OX1JBRElVUyIsIk5FVVRST05fUkFESVVTIiwiUEhPVE9OX1JBRElVUyIsIkJJTExJQVJEX0JBTExfUkFESVVTIiwiUExVTV9QVURESU5HX1JBRElVUyIsIlBIT1RPTl9JTklUSUFMX1NQRUVEIiwiTU9OT0NIUk9NQVRJQ19XQVZFTEVOR1RIX1JBTkdFIiwiTUFYX1dBVkVMRU5HVEgiLCJNQVhfU1BFQ1RST01FVEVSX1NOQVBTSE9UUyIsIlNUQVRFX0RJU1BMQVlfTUFSR0lOUyIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTU9USEFDb25zdGFudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTU9USEFDb25zdGFudHMgaXMgdGhlIGNvbGxlY3Rpb24gb2YgY29uc3RhbnRzIHVzZWQgdGhyb3VnaG91dCB0aGlzIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZpc2libGVDb2xvciBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvVmlzaWJsZUNvbG9yLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuXHJcbmNvbnN0IE1PVEhBQ29uc3RhbnRzID0ge1xyXG5cclxuICAvLyBtYXJnaW5zIGZvciBhbGwgU2NyZWVuVmlldyBpbnN0YW5jZXNcclxuICBTQ1JFRU5fVklFV19YX01BUkdJTjogMjAsXHJcbiAgU0NSRUVOX1ZJRVdfWV9NQVJHSU46IDIwLFxyXG5cclxuICAvLyBUaGlzIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBKYXZhIHZlcnNpb24sIHRvIHByZXNlcnZlIHRoZSBzYW1lIHJlbGF0aXZlIHNpemVzIG9mIHRoaW5ncyBpbiB0aGUgbW9kZWwuXHJcbiAgLy8gU2VlIEFOSU1BVElPTl9CT1hfU0laRSBpbiBIQUNvbnN0YW50cy5qYXZhLlxyXG4gIFpPT01FRF9JTl9CT1hfTU9ERUxfU0laRTogNDc1LFxyXG5cclxuICAvLyBUaGlzIHZhbHVlIGlzIHNwZWNpZmljIHRvIHRoZSBIVE1MNSB2ZXJzaW9uLlxyXG4gIFpPT01FRF9JTl9CT1hfVklFV19TSVpFOiA0MDAsXHJcblxyXG4gIC8vIFRoZSBub3Rpb24gb2YgXCJncm91bmQgc3RhdGVcIiBkb2VzIG5vdCBhcHBseSB0byBhbGwgaHlkcm9nZW4gYXRvbSBtb2RlbHMsIGJ1dCBpdCBpcyBjb252ZW5pZW50IHRvIGhhdmUgaXQgaGVyZS5cclxuICBHUk9VTkRfU1RBVEU6IDEsXHJcblxyXG4gIC8vIHJhZGlpLCBpbiBtb2RlbCBjb29yZGluYXRlcywgdW5pdGxlc3NcclxuICBFTEVDVFJPTl9SQURJVVM6IDUsXHJcbiAgUFJPVE9OX1JBRElVUzogNixcclxuICBORVVUUk9OX1JBRElVUzogNixcclxuICBQSE9UT05fUkFESVVTOiAxNSxcclxuICBCSUxMSUFSRF9CQUxMX1JBRElVUzogMzAsXHJcbiAgUExVTV9QVURESU5HX1JBRElVUzogMzAsXHJcblxyXG4gIC8vIHNwZWVkcywgaW4gZGlzdGFuY2UgcGVyIHNlY29uZFxyXG4gIFBIT1RPTl9JTklUSUFMX1NQRUVEOiAzMDAsXHJcblxyXG4gIE1PTk9DSFJPTUFUSUNfV0FWRUxFTkdUSF9SQU5HRTogbmV3IFJhbmdlKCA5MiwgVmlzaWJsZUNvbG9yLk1BWF9XQVZFTEVOR1RIICksXHJcblxyXG4gIE1BWF9TUEVDVFJPTUVURVJfU05BUFNIT1RTOiAzLFxyXG5cclxuICAvLyBtYXJnaW4gYmV0d2VlbiB0aGUgc3RhdGUgZGlzcGxheSBhbmQgaW5zaWRlIGVkZ2Ugb2Ygem9vbWVkLWluIGJveFxyXG4gIFNUQVRFX0RJU1BMQVlfTUFSR0lOUzogbmV3IFZlY3RvcjIoIDEwLCAxMCApXHJcbn07XHJcblxyXG5hc3NlcnQgJiYgYXNzZXJ0KCBNT1RIQUNvbnN0YW50cy5HUk9VTkRfU1RBVEUgPT09IDEsICdUaGlzIGlzIGEgZnVuZGFtZW50YWwgYXNzdW1wdGlvbiBvZiB0aGlzIGltcGxlbWVudGF0aW9uLicgKTtcclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnTU9USEFDb25zdGFudHMnLCBNT1RIQUNvbnN0YW50cyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTU9USEFDb25zdGFudHM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFlBQVksTUFBTSwwQ0FBMEM7QUFDbkUsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLEtBQUssTUFBTSwwQkFBMEI7QUFDNUMsT0FBT0MsT0FBTyxNQUFNLDRCQUE0QjtBQUVoRCxNQUFNQyxjQUFjLEdBQUc7RUFFckI7RUFDQUMsb0JBQW9CLEVBQUUsRUFBRTtFQUN4QkMsb0JBQW9CLEVBQUUsRUFBRTtFQUV4QjtFQUNBO0VBQ0FDLHdCQUF3QixFQUFFLEdBQUc7RUFFN0I7RUFDQUMsdUJBQXVCLEVBQUUsR0FBRztFQUU1QjtFQUNBQyxZQUFZLEVBQUUsQ0FBQztFQUVmO0VBQ0FDLGVBQWUsRUFBRSxDQUFDO0VBQ2xCQyxhQUFhLEVBQUUsQ0FBQztFQUNoQkMsY0FBYyxFQUFFLENBQUM7RUFDakJDLGFBQWEsRUFBRSxFQUFFO0VBQ2pCQyxvQkFBb0IsRUFBRSxFQUFFO0VBQ3hCQyxtQkFBbUIsRUFBRSxFQUFFO0VBRXZCO0VBQ0FDLG9CQUFvQixFQUFFLEdBQUc7RUFFekJDLDhCQUE4QixFQUFFLElBQUlmLEtBQUssQ0FBRSxFQUFFLEVBQUVGLFlBQVksQ0FBQ2tCLGNBQWUsQ0FBQztFQUU1RUMsMEJBQTBCLEVBQUUsQ0FBQztFQUU3QjtFQUNBQyxxQkFBcUIsRUFBRSxJQUFJakIsT0FBTyxDQUFFLEVBQUUsRUFBRSxFQUFHO0FBQzdDLENBQUM7QUFFRGtCLE1BQU0sSUFBSUEsTUFBTSxDQUFFakIsY0FBYyxDQUFDSyxZQUFZLEtBQUssQ0FBQyxFQUFFLDBEQUEyRCxDQUFDO0FBRWpIUix1QkFBdUIsQ0FBQ3FCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWxCLGNBQWUsQ0FBQztBQUVwRSxlQUFlQSxjQUFjIn0=