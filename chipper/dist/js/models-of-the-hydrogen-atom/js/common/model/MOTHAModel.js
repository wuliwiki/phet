// Copyright 2015-2023, University of Colorado Boulder

/**
 * MOTHAModel is the base class for the model in all screens.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import StringUnionProperty from '../../../../axon/js/StringUnionProperty.js';
import Property from '../../../../axon/js/Property.js';
import optionize from '../../../../phet-core/js/optionize.js';
import TimeSpeed from '../../../../scenery-phet/js/TimeSpeed.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import Light from './Light.js';
import createObservableArray from '../../../../axon/js/createObservableArray.js';
import ExperimentModel from './ExperimentModel.js';
import { ModelModeValues } from './ModelMode.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import MOTHAQueryParameters from '../MOTHAQueryParameters.js';
const STEP_ONCE_NORMAL_DT = 0.1;
const NORMAL_SPEED_SCALE = MOTHAQueryParameters.timeScale[0];
const FAST_SPEED_SCALE = MOTHAQueryParameters.timeScale[1];
export default class MOTHAModel {
  // whether we're dealing with the experiment or a predictive hydrogen-atom model

  // the experiment hydrogen-atom model

  // the supported set of predictive hydrogen-atom models

  // the predictive hydrogen-atom model that is currently selected

  // the hydrogen-atom model that is currently selected: either the Experiment model, or the selected predictive model.

  // the zoomed-in part of the box of hydrogen

  // the light that is shining into the box of hydrogen

  // photons inside zoomedInBox

  // is the simulation playing?

  // speed that the simulation is running at

  // scale factor applied to dt, based on timeSpeedProperty

  /**
   * @param zoomedInBox - the zoomed-in part of the box of hydrogen, where animation takes place
   * @param predictiveModels
   * @param initialPredictiveModel
   * @param providedOptions
   */
  constructor(zoomedInBox, predictiveModels, initialPredictiveModel, providedOptions) {
    assert && assert(predictiveModels.includes(initialPredictiveModel));
    const options = optionize()({
      //TODO
    }, providedOptions);
    this.zoomedInBox = zoomedInBox;

    //TODO default should be 'experiment'
    this.modelModeProperty = new StringUnionProperty('prediction', {
      validValues: ModelModeValues,
      tandem: options.tandem.createTandem('modelModeProperty')
    });
    this.experimentModel = new ExperimentModel(zoomedInBox, {
      tandem: options.tandem.createTandem('experimentModel')
    });
    this.predictiveModels = predictiveModels;
    this.predictiveModelProperty = new Property(initialPredictiveModel, {
      validValues: predictiveModels
      //TODO tandem
      //TODO phetioType
    });

    this.hydrogenAtomProperty = new DerivedProperty([this.modelModeProperty, this.predictiveModelProperty], (modelMode, predictiveModel) => modelMode === 'experiment' ? this.experimentModel : predictiveModel, {
      //TODO tandem
      //TODO phetioType
    });
    this.light = new Light(zoomedInBox, {
      tandem: options.tandem.createTandem('light')
    });
    this.photons = createObservableArray({
      //TODO tandem
      //TODO phetioType
    });
    this.isPlayingProperty = new BooleanProperty(true, {
      tandem: options.tandem.createTandem('isPlayingProperty')
    });
    this.timeSpeedProperty = new EnumerationProperty(TimeSpeed.NORMAL, {
      tandem: options.tandem.createTandem('timeSpeedProperty')
    });
    this.dtScaleProperty = new DerivedProperty([this.timeSpeedProperty], timeSpeed => timeSpeed === TimeSpeed.NORMAL ? NORMAL_SPEED_SCALE : FAST_SPEED_SCALE);
    this.hydrogenAtomProperty.link((hydrogenAtom, oldHydrogenAtom) => {
      if (oldHydrogenAtom !== null) {
        oldHydrogenAtom.reset();
      }
      this.photons.clear();
      hydrogenAtom.photonEmittedEmitter.addListener(this.photonEmittedListener.bind(this));
      hydrogenAtom.photonAbsorbedEmitter.addListener(this.photonAbsorbedListener.bind(this));
    });
    this.light.photonCreatedEmitter.addListener(photon => {
      this.photons.add(photon);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.modelModeProperty.reset();
    this.experimentModel.reset();
    this.predictiveModels.forEach(predictiveModel => predictiveModel.reset());
    this.predictiveModelProperty.reset();
    this.light.reset();
    while (this.photons.length > 0) {
      this.photons.pop().dispose();
    }
    this.isPlayingProperty.reset();
    this.timeSpeedProperty.reset();
  }

  /**
   * Steps the model if it's playing.
   * @param dt - the time step, in seconds
   */
  step(dt) {
    if (this.isPlayingProperty.value) {
      this._step(dt);
    }
  }

  /**
   * Steps the model by one time step. Used by the Step button in the time controls.
   */
  stepOnce() {
    assert && assert(!this.isPlayingProperty.value);
    this._step(STEP_ONCE_NORMAL_DT);
  }

  /**
   * Steps the model, scaled by the setting of the time controls.
   * @param dt - the time step, in seconds
   */
  _step(dt) {
    const dtScaled = dt * this.dtScaleProperty.value;
    this.light.step(dtScaled);
    this.hydrogenAtomProperty.value.step(dtScaled);
    this.moveAndCullPhotons(dtScaled);
  }

  /**
   * Moves photons. Photons that move outside the zoomed-in box are culled.
   * @param dt - the time step, in seconds
   */
  moveAndCullPhotons(dt) {
    const hydrogenAtom = this.hydrogenAtomProperty.value;

    // Move and cull photons. May change this.photons, so operate on a copy of the array.
    this.photons.getArrayCopy().forEach(photon => {
      hydrogenAtom.movePhoton(photon, dt);

      // If the photon leaves the zoomed-in box, cull it.
      if (!this.zoomedInBox.containsPhoton(photon)) {
        photon.dispose();
        this.photons.remove(photon);
      }
    });
  }
  photonEmittedListener(photon) {
    this.photons.add(photon);
  }
  photonAbsorbedListener(photon) {
    this.photons.remove(photon);
  }
}
modelsOfTheHydrogenAtom.register('MOTHAModel', MOTHAModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,