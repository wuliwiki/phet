// Copyright 2016-2022, University of Colorado Boulder

/**
 * Photon is the model of a photon. A photon has a wavelength, position, direction, and moves with constant speed.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import VisibleColor from '../../../../scenery-phet/js/VisibleColor.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import MOTHAColors from '../MOTHAColors.js';
import Particle from './Particle.js';
import MOTHAConstants from '../MOTHAConstants.js';
export default class Photon extends Particle {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      wasEmitted: false,
      hasCollided: false,
      // ParticleOptions
      radius: MOTHAConstants.PHOTON_RADIUS,
      speed: MOTHAConstants.PHOTON_INITIAL_SPEED

      //TODO phetioType: Photon.PhotonIO,
      //TODO phetioDynamicElement: true
    }, providedOptions);
    super(options);
    this.wavelength = options.wavelength;
    this.wasEmitted = options.wasEmitted;
    this.hasCollidedProperty = new BooleanProperty(options.hasCollided, {
      tandem: options.tandem.createTandem('hasCollidedProperty'),
      phetioReadOnly: true
    });
  }
  dispose() {
    this.hasCollidedProperty.dispose();
    super.dispose();
  }

  /**
   * Gets the Color associated with the photon's wavelength.
   */
  getColor() {
    return VisibleColor.wavelengthToColor(this.wavelength, {
      uvColor: MOTHAColors.UV_COLOR,
      irColor: MOTHAColors.IR_COLOR
    });
  }

  /**
   * For debugging and logging only. Do not rely on the format of this string!
   */
  toString() {
    return super.toString() + ` wavelength=${this.wavelength}`;
  }
}
modelsOfTheHydrogenAtom.register('Photon', Photon);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJvcHRpb25pemUiLCJWaXNpYmxlQ29sb3IiLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIk1PVEhBQ29sb3JzIiwiUGFydGljbGUiLCJNT1RIQUNvbnN0YW50cyIsIlBob3RvbiIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIndhc0VtaXR0ZWQiLCJoYXNDb2xsaWRlZCIsInJhZGl1cyIsIlBIT1RPTl9SQURJVVMiLCJzcGVlZCIsIlBIT1RPTl9JTklUSUFMX1NQRUVEIiwid2F2ZWxlbmd0aCIsImhhc0NvbGxpZGVkUHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9SZWFkT25seSIsImRpc3Bvc2UiLCJnZXRDb2xvciIsIndhdmVsZW5ndGhUb0NvbG9yIiwidXZDb2xvciIsIlVWX0NPTE9SIiwiaXJDb2xvciIsIklSX0NPTE9SIiwidG9TdHJpbmciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBob3Rvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQaG90b24gaXMgdGhlIG1vZGVsIG9mIGEgcGhvdG9uLiBBIHBob3RvbiBoYXMgYSB3YXZlbGVuZ3RoLCBwb3NpdGlvbiwgZGlyZWN0aW9uLCBhbmQgbW92ZXMgd2l0aCBjb25zdGFudCBzcGVlZC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFZpc2libGVDb2xvciBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvVmlzaWJsZUNvbG9yLmpzJztcclxuaW1wb3J0IHsgVENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IE1PVEhBQ29sb3JzIGZyb20gJy4uL01PVEhBQ29sb3JzLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlLCB7IFBhcnRpY2xlT3B0aW9ucyB9IGZyb20gJy4vUGFydGljbGUuanMnO1xyXG5pbXBvcnQgTU9USEFDb25zdGFudHMgZnJvbSAnLi4vTU9USEFDb25zdGFudHMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB3YXZlbGVuZ3RoOiBudW1iZXI7IC8vIHRoZSBwaG90b24ncyBpbW11dGFibGUgd2F2ZWxlbmd0aFxyXG4gIHdhc0VtaXR0ZWQ/OiBib29sZWFuOyAvLyB3YXMgdGhpcyBwaG90b24gZW1pdHRlZCBieSB0aGUgYXRvbT9cclxuICBoYXNDb2xsaWRlZD86IGJvb2xlYW47IC8vIGRpZCB0aGlzIHBob3RvbiBhbHJlYWR5IGNvbGxpZGUgd2l0aCB0aGUgYXRvbT9cclxufTtcclxuXHJcbnR5cGUgUGhvdG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxQYXJ0aWNsZU9wdGlvbnMsICdyYWRpdXMnIHwgJ3NwZWVkJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaG90b24gZXh0ZW5kcyBQYXJ0aWNsZSB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSB3YXZlbGVuZ3RoOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHdhc0VtaXR0ZWQ6IGJvb2xlYW47XHJcbiAgcHVibGljIGhhc0NvbGxpZGVkUHJvcGVydHk6IFRQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IFBob3Rvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQaG90b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUGFydGljbGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICB3YXNFbWl0dGVkOiBmYWxzZSxcclxuICAgICAgaGFzQ29sbGlkZWQ6IGZhbHNlLFxyXG5cclxuICAgICAgLy8gUGFydGljbGVPcHRpb25zXHJcbiAgICAgIHJhZGl1czogTU9USEFDb25zdGFudHMuUEhPVE9OX1JBRElVUyxcclxuICAgICAgc3BlZWQ6IE1PVEhBQ29uc3RhbnRzLlBIT1RPTl9JTklUSUFMX1NQRUVEXHJcblxyXG4gICAgICAvL1RPRE8gcGhldGlvVHlwZTogUGhvdG9uLlBob3RvbklPLFxyXG4gICAgICAvL1RPRE8gcGhldGlvRHluYW1pY0VsZW1lbnQ6IHRydWVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy53YXZlbGVuZ3RoID0gb3B0aW9ucy53YXZlbGVuZ3RoO1xyXG4gICAgdGhpcy53YXNFbWl0dGVkID0gb3B0aW9ucy53YXNFbWl0dGVkO1xyXG5cclxuICAgIHRoaXMuaGFzQ29sbGlkZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIG9wdGlvbnMuaGFzQ29sbGlkZWQsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdoYXNDb2xsaWRlZFByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmhhc0NvbGxpZGVkUHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgQ29sb3IgYXNzb2NpYXRlZCB3aXRoIHRoZSBwaG90b24ncyB3YXZlbGVuZ3RoLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDb2xvcigpOiBUQ29sb3Ige1xyXG4gICAgcmV0dXJuIFZpc2libGVDb2xvci53YXZlbGVuZ3RoVG9Db2xvciggdGhpcy53YXZlbGVuZ3RoLCB7XHJcbiAgICAgIHV2Q29sb3I6IE1PVEhBQ29sb3JzLlVWX0NPTE9SLFxyXG4gICAgICBpckNvbG9yOiBNT1RIQUNvbG9ycy5JUl9DT0xPUlxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yIGRlYnVnZ2luZyBhbmQgbG9nZ2luZyBvbmx5LiBEbyBub3QgcmVseSBvbiB0aGUgZm9ybWF0IG9mIHRoaXMgc3RyaW5nIVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHN1cGVyLnRvU3RyaW5nKCkgKyBgIHdhdmVsZW5ndGg9JHt0aGlzLndhdmVsZW5ndGh9YDtcclxuICB9XHJcbn1cclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnUGhvdG9uJywgUGhvdG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFHcEUsT0FBT0MsU0FBUyxNQUFNLHVDQUF1QztBQUM3RCxPQUFPQyxZQUFZLE1BQU0sNkNBQTZDO0FBRXRFLE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBQzNDLE9BQU9DLFFBQVEsTUFBMkIsZUFBZTtBQUN6RCxPQUFPQyxjQUFjLE1BQU0sc0JBQXNCO0FBVWpELGVBQWUsTUFBTUMsTUFBTSxTQUFTRixRQUFRLENBQUM7RUFNcENHLFdBQVdBLENBQUVDLGVBQThCLEVBQUc7SUFFbkQsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQThDLENBQUMsQ0FBRTtNQUV4RTtNQUNBVSxVQUFVLEVBQUUsS0FBSztNQUNqQkMsV0FBVyxFQUFFLEtBQUs7TUFFbEI7TUFDQUMsTUFBTSxFQUFFUCxjQUFjLENBQUNRLGFBQWE7TUFDcENDLEtBQUssRUFBRVQsY0FBYyxDQUFDVTs7TUFFdEI7TUFDQTtJQUNGLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNPLFVBQVUsR0FBR1AsT0FBTyxDQUFDTyxVQUFVO0lBQ3BDLElBQUksQ0FBQ04sVUFBVSxHQUFHRCxPQUFPLENBQUNDLFVBQVU7SUFFcEMsSUFBSSxDQUFDTyxtQkFBbUIsR0FBRyxJQUFJbEIsZUFBZSxDQUFFVSxPQUFPLENBQUNFLFdBQVcsRUFBRTtNQUNuRU8sTUFBTSxFQUFFVCxPQUFPLENBQUNTLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHFCQUFzQixDQUFDO01BQzVEQyxjQUFjLEVBQUU7SUFDbEIsQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNKLG1CQUFtQixDQUFDSSxPQUFPLENBQUMsQ0FBQztJQUNsQyxLQUFLLENBQUNBLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxRQUFRQSxDQUFBLEVBQVc7SUFDeEIsT0FBT3JCLFlBQVksQ0FBQ3NCLGlCQUFpQixDQUFFLElBQUksQ0FBQ1AsVUFBVSxFQUFFO01BQ3REUSxPQUFPLEVBQUVyQixXQUFXLENBQUNzQixRQUFRO01BQzdCQyxPQUFPLEVBQUV2QixXQUFXLENBQUN3QjtJQUN2QixDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JDLFFBQVFBLENBQUEsRUFBVztJQUNqQyxPQUFPLEtBQUssQ0FBQ0EsUUFBUSxDQUFDLENBQUMsR0FBSSxlQUFjLElBQUksQ0FBQ1osVUFBVyxFQUFDO0VBQzVEO0FBQ0Y7QUFFQWQsdUJBQXVCLENBQUMyQixRQUFRLENBQUUsUUFBUSxFQUFFdkIsTUFBTyxDQUFDIn0=