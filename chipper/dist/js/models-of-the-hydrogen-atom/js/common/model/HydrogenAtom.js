// Copyright 2016-2022, University of Colorado Boulder

/**
 * HydrogenAtom is the abstract base class for all hydrogen-atom models.
 * Subclass names have a 'Model' suffix (e.g. PlumPuddingModel) to match the terminology used in the literature.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Emitter from '../../../../axon/js/Emitter.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import Photon from './Photon.js';

//TODO move numberOfStates, groundState, hasTransitionWavelengths to another base class for those models

export default class HydrogenAtom extends PhetioObject {
  //TODO do all hydrogen-atom models need this?

  //TODO unused
  //TODO unused

  // Notifies listeners by emitting when a photon is emitted (an unfortunate name)

  // Notifies listeners by emitting when a photon is absorbed

  /**
   * @param zoomedInBox - the zoomed-in part of the box of hydrogen, where animation takes place
   * @param providedOptions
   */
  constructor(zoomedInBox, providedOptions) {
    const options = optionize()({
      // SelfOptions
      position: Vector2.ZERO,
      orientation: 0,
      numberOfStates: 0,
      groundState: 1,
      // PhetioObjectOptions
      phetioState: false
    }, providedOptions);
    super(options);
    this.zoomedInBox = zoomedInBox;
    this.displayNameProperty = options.displayNameProperty;
    this.iconHTMLImageElement = options.iconHTMLImageElement;
    this.position = options.position;
    this.orientation = options.orientation;
    this.numberOfStates = options.numberOfStates;
    this.groundState = options.groundState;
    this.hasTransitionWavelengths = options.hasTransitionWavelengths;
    this.photonEmittedEmitter = new Emitter({
      parameters: [{
        valueType: Photon
      }]
    });
    this.photonAbsorbedEmitter = new Emitter({
      parameters: [{
        valueType: Photon
      }]
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.photonEmittedEmitter.removeAllListeners();
    this.photonAbsorbedEmitter.removeAllListeners();
  }

  /**
   * Called when time has advanced by some delta.
   * @param dt - time step, in seconds
   */

  /**
   * Moves a photon by the specified time step.
   */

  /**
   * Gets the transition wavelengths for a specified state. The notion of 'transition wavelength' does not apply to all
   * hydrogen atom models, so the default implementation returns null.
   */
  getTransitionWavelengths(state) {
    return null;
  }

  /**
   * Determines if two points collide.
   * Any distance between the points that is <= threshold is considered a collision.
   */
  pointsCollide(position1, position2, threshold) {
    return position1.distance(position2) <= threshold;
  }

  /**
   * Gets the number of electron states that the model supports.
   * The default is zero, since some models have no notion of "state".
   */
  static getNumberOfStates() {
    return 0;
  }
}
modelsOfTheHydrogenAtom.register('HydrogenAtom', HydrogenAtom);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,