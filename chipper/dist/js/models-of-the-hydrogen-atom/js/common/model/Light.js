// Copyright 2015-2022, University of Colorado Boulder

/**
 * Light is the model of a light that shines into the box of hydrogen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Emitter from '../../../../axon/js/Emitter.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Property from '../../../../axon/js/Property.js';
import dotRandom from '../../../../dot/js/dotRandom.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import VisibleColor from '../../../../scenery-phet/js/VisibleColor.js';
import { Color } from '../../../../scenery/js/imports.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import StringIO from '../../../../tandem/js/types/StringIO.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import BohrModel from './BohrModel.js';
import { LightModeValues } from './LightMode.js';
import Photon from './Photon.js';
import MOTHAConstants from '../MOTHAConstants.js';
import Tandem from '../../../../tandem/js/Tandem.js';
// probability that a "white light" photon's wavelength will be one that causes a state transition. 1.0 = 100%
const TRANSITION_WAVELENGTHS_WEIGHT = 0.40;
assert && assert(TRANSITION_WAVELENGTHS_WEIGHT >= 0 && TRANSITION_WAVELENGTHS_WEIGHT <= 1);

// Maximum number of photons in the zoomed-in box
const MAX_PHOTONS = 20;
export default class Light {
  // is the light on?

  // whether the light is full spectrum (white) or monochromatic

  // wavelength for monochromatic mode, in nm

  // wavelength of the light, where 0 is white light

  // color displayed by the view

  // emits when a photon is created

  // time between creation of photons

  // elapsed time since a photon was created

  // wavelengths that cause a state transition

  constructor(zoomedInBox, providedOptions) {
    const options = optionize()({
      //TODO
    }, providedOptions);
    this.zoomedInBox = zoomedInBox;
    this.onProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('onProperty')
    });
    this.lightModeProperty = new Property('white', {
      validValues: LightModeValues,
      tandem: options.tandem.createTandem('lightModeProperty'),
      phetioValueType: StringIO
    });

    // Range goes from UV to max visible wavelength
    this.monochromaticWavelengthRange = MOTHAConstants.MONOCHROMATIC_WAVELENGTH_RANGE;
    assert && assert(this.monochromaticWavelengthRange.min < VisibleColor.MIN_WAVELENGTH);
    this.monochromaticWavelengthProperty = new NumberProperty(VisibleColor.MIN_WAVELENGTH, {
      range: this.monochromaticWavelengthRange,
      tandem: options.tandem.createTandem('monochromaticWavelengthProperty')
    });
    this.wavelengthProperty = new DerivedProperty([this.lightModeProperty, this.monochromaticWavelengthProperty], (lightMode, monochromaticWavelength) => lightMode === 'white' ? VisibleColor.WHITE_WAVELENGTH : monochromaticWavelength, {
      tandem: options.tandem.createTandem('wavelengthProperty'),
      phetioValueType: NumberIO
    });
    this.colorProperty = new DerivedProperty([this.lightModeProperty, this.wavelengthProperty], (lightMode, wavelength) => VisibleColor.wavelengthToColor(wavelength), {
      tandem: options.tandem.createTandem('colorProperty'),
      phetioValueType: Color.ColorIO
    });
    this.photonCreatedEmitter = new Emitter({
      parameters: [{
        valueType: Photon
      }]
    });
    this.dtPerPhotonCreated = zoomedInBox.height / MOTHAConstants.PHOTON_INITIAL_SPEED / MAX_PHOTONS;
    this.dtSincePhotonCreatedProperty = new NumberProperty(0, {
      tandem: options.tandem.createTandem('dtSincePhotonCreatedProperty'),
      phetioReadOnly: true
    });

    // Get transition wavelengths for state 1, which are all UV.
    this.transitionWavelengths = BohrModel.getTransitionWavelengths(this.monochromaticWavelengthRange.min, VisibleColor.MIN_WAVELENGTH);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.onProperty.reset();
    this.lightModeProperty.reset();
    this.monochromaticWavelengthProperty.reset();
    this.dtSincePhotonCreatedProperty.reset();
  }

  /**
   * Steps the light, and creates a photon when it's time to do so.
   * @param dt - the time step, in seconds
   */
  step(dt) {
    if (this.onProperty.value) {
      this.dtSincePhotonCreatedProperty.value += dt;
      if (this.dtSincePhotonCreatedProperty.value >= this.dtPerPhotonCreated) {
        // Save the remainder.
        this.dtSincePhotonCreatedProperty.value = this.dtSincePhotonCreatedProperty.value % this.dtPerPhotonCreated;

        // Create a photon.
        this.createPhoton();
      }
    }
  }

  /**
   * Creates a photon when it's time to do so, at a random location along the bottom edge of the zoomed-in box.
   */
  createPhoton() {
    this.photonCreatedEmitter.emit(new Photon({
      wavelength: this.getNextPhotonWavelength(),
      position: this.getNextPhotonPosition(),
      direction: Math.PI / 2,
      // in the direction of +y
      tandem: Tandem.OPT_OUT //TODO create via PhetioGroup
    }));
  }

  /**
   * Creates a photon at the bottom-center of the zoomed-in box. This is used when we want to ensure that a
   * photon hits the atom, which is centered in the zoomed-in box.
   */
  createPhotonAtCenter(wavelength) {
    this.photonCreatedEmitter.emit(new Photon({
      wavelength: wavelength,
      position: new Vector2(this.zoomedInBox.centerX, this.zoomedInBox.minY),
      direction: Math.PI / 2,
      // in the direction of +y
      tandem: Tandem.OPT_OUT //TODO create via PhetioGroup
    }));
  }

  /**
   * Gets the next random position for a photon, along the bottom edge of the zoomed-in box.
   */
  getNextPhotonPosition() {
    const x = dotRandom.nextDoubleBetween(this.zoomedInBox.minX, this.zoomedInBox.maxX);
    const y = this.zoomedInBox.minY;
    return new Vector2(x, y);
  }

  /**
   * Gets a wavelength that would be appropriate for a new photon.
   *
   * For monochromatic light, we simply use the value of the gun's monochromatic wavelength.
   *
   * For white light, the wavelength is randomly chosen. Instead of simply picking a wavelength from the light's
   * entire range, we give a higher weight to those wavelengths that would cause a transition from state 1 to some
   * other state. We consider only the wavelengths relevant to state=1 because all other transitions are very
   * improbable in practice. This increases the probability that our photon will interact with the atom.
   */
  getNextPhotonWavelength() {
    let wavelength = this.monochromaticWavelengthProperty.value;
    if (this.lightModeProperty.value === 'white') {
      if (dotRandom.nextDouble() < TRANSITION_WAVELENGTHS_WEIGHT) {
        // choose a random transition wavelength
        const i = dotRandom.nextIntBetween(0, this.transitionWavelengths.length - 1);
        wavelength = this.transitionWavelengths[i];
      } else {
        // choose a random visible wavelength
        wavelength = dotRandom.nextDoubleBetween(this.monochromaticWavelengthRange.min, this.monochromaticWavelengthRange.max);
      }
    }
    return wavelength;
  }
}
modelsOfTheHydrogenAtom.register('Light', Light);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,