// Copyright 2022, University of Colorado Boulder

/**
 * ProbabilisticChooser randomly selects a value from a collection of weighted values.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
export default class ProbabilisticChooser {
  constructor(entries) {
    assert && assert(_.every(entries, entry => entry.weight >= 0)); //TODO correct?

    // Compute the normalization factor for the weights.
    let totalWeight = 0;
    for (let i = 0; i < entries.length; i++) {
      totalWeight += entries[i].weight;
    }
    const normalizationFactor = 1 / totalWeight;

    // Build the internal list that is used for choosing. Each entry is normalized, with an associated weight that is
    // the sum of its own probability plus the cumulative normalized weights of all entries before it in the list.
    // This makes the getNext() algorithm work properly.
    this.normalizedEntries = [];
    let p = 0;
    for (let i = 0; i < entries.length; i++) {
      p += entries[i].weight * normalizationFactor;
      this.normalizedEntries.push({
        value: entries[i].value,
        weight: p
      });
    }
    assert && assert(_.every(this.normalizedEntries, entry => entry.weight >= 0 && entry.weight <= 1)); //TODO correct?
  }

  /**
   * Gets a value using a random probability of selection.
   */
  getNext() {
    //TODO should always return T, never null
    const weight = dotRandom.nextDouble();
    let value = null;
    for (let i = 0; i < this.normalizedEntries.length && value === null; i++) {
      const entry = this.normalizedEntries[i];
      if (weight <= entry.weight) {
        value = entry.value;
      }
    }
    assert && assert(value !== null);
    return value;
  }
}
modelsOfTheHydrogenAtom.register('ProbabilisticChooser', ProbabilisticChooser);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIlByb2JhYmlsaXN0aWNDaG9vc2VyIiwiY29uc3RydWN0b3IiLCJlbnRyaWVzIiwiYXNzZXJ0IiwiXyIsImV2ZXJ5IiwiZW50cnkiLCJ3ZWlnaHQiLCJ0b3RhbFdlaWdodCIsImkiLCJsZW5ndGgiLCJub3JtYWxpemF0aW9uRmFjdG9yIiwibm9ybWFsaXplZEVudHJpZXMiLCJwIiwicHVzaCIsInZhbHVlIiwiZ2V0TmV4dCIsIm5leHREb3VibGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByb2JhYmlsaXN0aWNDaG9vc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQcm9iYWJpbGlzdGljQ2hvb3NlciByYW5kb21seSBzZWxlY3RzIGEgdmFsdWUgZnJvbSBhIGNvbGxlY3Rpb24gb2Ygd2VpZ2h0ZWQgdmFsdWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcbmltcG9ydCBtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSBmcm9tICcuLi8uLi9tb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbS5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBQcm9iYWJpbGlzdGljQ2hvb3NlckVudHJ5PFQ+ID0ge1xyXG4gIHZhbHVlOiBUO1xyXG4gIHdlaWdodDogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvYmFiaWxpc3RpY0Nob29zZXI8VD4ge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IG5vcm1hbGl6ZWRFbnRyaWVzOiBQcm9iYWJpbGlzdGljQ2hvb3NlckVudHJ5PFQ+W107XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZW50cmllczogUHJvYmFiaWxpc3RpY0Nob29zZXJFbnRyeTxUPltdICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggXy5ldmVyeSggZW50cmllcywgZW50cnkgPT4gKCBlbnRyeS53ZWlnaHQgPj0gMCApICkgKTsgLy9UT0RPIGNvcnJlY3Q/XHJcblxyXG4gICAgLy8gQ29tcHV0ZSB0aGUgbm9ybWFsaXphdGlvbiBmYWN0b3IgZm9yIHRoZSB3ZWlnaHRzLlxyXG4gICAgbGV0IHRvdGFsV2VpZ2h0ID0gMDtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIHRvdGFsV2VpZ2h0ICs9IGVudHJpZXNbIGkgXS53ZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3JtYWxpemF0aW9uRmFjdG9yID0gMSAvIHRvdGFsV2VpZ2h0O1xyXG5cclxuICAgIC8vIEJ1aWxkIHRoZSBpbnRlcm5hbCBsaXN0IHRoYXQgaXMgdXNlZCBmb3IgY2hvb3NpbmcuIEVhY2ggZW50cnkgaXMgbm9ybWFsaXplZCwgd2l0aCBhbiBhc3NvY2lhdGVkIHdlaWdodCB0aGF0IGlzXHJcbiAgICAvLyB0aGUgc3VtIG9mIGl0cyBvd24gcHJvYmFiaWxpdHkgcGx1cyB0aGUgY3VtdWxhdGl2ZSBub3JtYWxpemVkIHdlaWdodHMgb2YgYWxsIGVudHJpZXMgYmVmb3JlIGl0IGluIHRoZSBsaXN0LlxyXG4gICAgLy8gVGhpcyBtYWtlcyB0aGUgZ2V0TmV4dCgpIGFsZ29yaXRobSB3b3JrIHByb3Blcmx5LlxyXG4gICAgdGhpcy5ub3JtYWxpemVkRW50cmllcyA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgcCArPSBlbnRyaWVzWyBpIF0ud2VpZ2h0ICogbm9ybWFsaXphdGlvbkZhY3RvcjtcclxuICAgICAgdGhpcy5ub3JtYWxpemVkRW50cmllcy5wdXNoKCB7IHZhbHVlOiBlbnRyaWVzWyBpIF0udmFsdWUsIHdlaWdodDogcCB9ICk7XHJcbiAgICB9XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBfLmV2ZXJ5KCB0aGlzLm5vcm1hbGl6ZWRFbnRyaWVzLCBlbnRyeSA9PiAoIGVudHJ5LndlaWdodCA+PSAwICYmIGVudHJ5LndlaWdodCA8PSAxICkgKSApOyAvL1RPRE8gY29ycmVjdD9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgYSB2YWx1ZSB1c2luZyBhIHJhbmRvbSBwcm9iYWJpbGl0eSBvZiBzZWxlY3Rpb24uXHJcbiAgICovXHJcbiAgcHVibGljIGdldE5leHQoKTogVCB8IG51bGwgeyAvL1RPRE8gc2hvdWxkIGFsd2F5cyByZXR1cm4gVCwgbmV2ZXIgbnVsbFxyXG4gICAgY29uc3Qgd2VpZ2h0ID0gZG90UmFuZG9tLm5leHREb3VibGUoKTtcclxuICAgIGxldCB2YWx1ZTogVCB8IG51bGwgPSBudWxsO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5ub3JtYWxpemVkRW50cmllcy5sZW5ndGggJiYgdmFsdWUgPT09IG51bGw7IGkrKyApIHtcclxuICAgICAgY29uc3QgZW50cnkgPSB0aGlzLm5vcm1hbGl6ZWRFbnRyaWVzWyBpIF07XHJcbiAgICAgIGlmICggd2VpZ2h0IDw9IGVudHJ5LndlaWdodCApIHtcclxuICAgICAgICB2YWx1ZSA9IGVudHJ5LnZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB2YWx1ZSAhPT0gbnVsbCApO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdQcm9iYWJpbGlzdGljQ2hvb3NlcicsIFByb2JhYmlsaXN0aWNDaG9vc2VyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBT3RFLGVBQWUsTUFBTUMsb0JBQW9CLENBQUk7RUFJcENDLFdBQVdBLENBQUVDLE9BQXVDLEVBQUc7SUFDNURDLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxDQUFDLENBQUNDLEtBQUssQ0FBRUgsT0FBTyxFQUFFSSxLQUFLLElBQU1BLEtBQUssQ0FBQ0MsTUFBTSxJQUFJLENBQUksQ0FBRSxDQUFDLENBQUMsQ0FBQzs7SUFFeEU7SUFDQSxJQUFJQyxXQUFXLEdBQUcsQ0FBQztJQUNuQixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1AsT0FBTyxDQUFDUSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFHO01BQ3pDRCxXQUFXLElBQUlOLE9BQU8sQ0FBRU8sQ0FBQyxDQUFFLENBQUNGLE1BQU07SUFDcEM7SUFDQSxNQUFNSSxtQkFBbUIsR0FBRyxDQUFDLEdBQUdILFdBQVc7O0lBRTNDO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ0ksaUJBQWlCLEdBQUcsRUFBRTtJQUMzQixJQUFJQyxDQUFDLEdBQUcsQ0FBQztJQUNULEtBQU0sSUFBSUosQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHUCxPQUFPLENBQUNRLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUc7TUFDekNJLENBQUMsSUFBSVgsT0FBTyxDQUFFTyxDQUFDLENBQUUsQ0FBQ0YsTUFBTSxHQUFHSSxtQkFBbUI7TUFDOUMsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0UsSUFBSSxDQUFFO1FBQUVDLEtBQUssRUFBRWIsT0FBTyxDQUFFTyxDQUFDLENBQUUsQ0FBQ00sS0FBSztRQUFFUixNQUFNLEVBQUVNO01BQUUsQ0FBRSxDQUFDO0lBQ3pFO0lBQ0FWLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxDQUFDLENBQUNDLEtBQUssQ0FBRSxJQUFJLENBQUNPLGlCQUFpQixFQUFFTixLQUFLLElBQU1BLEtBQUssQ0FBQ0MsTUFBTSxJQUFJLENBQUMsSUFBSUQsS0FBSyxDQUFDQyxNQUFNLElBQUksQ0FBSSxDQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzlHOztFQUVBO0FBQ0Y7QUFDQTtFQUNTUyxPQUFPQSxDQUFBLEVBQWE7SUFBRTtJQUMzQixNQUFNVCxNQUFNLEdBQUdULFNBQVMsQ0FBQ21CLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLElBQUlGLEtBQWUsR0FBRyxJQUFJO0lBQzFCLEtBQU0sSUFBSU4sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ0csaUJBQWlCLENBQUNGLE1BQU0sSUFBSUssS0FBSyxLQUFLLElBQUksRUFBRU4sQ0FBQyxFQUFFLEVBQUc7TUFDMUUsTUFBTUgsS0FBSyxHQUFHLElBQUksQ0FBQ00saUJBQWlCLENBQUVILENBQUMsQ0FBRTtNQUN6QyxJQUFLRixNQUFNLElBQUlELEtBQUssQ0FBQ0MsTUFBTSxFQUFHO1FBQzVCUSxLQUFLLEdBQUdULEtBQUssQ0FBQ1MsS0FBSztNQUNyQjtJQUNGO0lBQ0FaLE1BQU0sSUFBSUEsTUFBTSxDQUFFWSxLQUFLLEtBQUssSUFBSyxDQUFDO0lBQ2xDLE9BQU9BLEtBQUs7RUFDZDtBQUNGO0FBRUFoQix1QkFBdUIsQ0FBQ21CLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRWxCLG9CQUFxQixDQUFDIn0=