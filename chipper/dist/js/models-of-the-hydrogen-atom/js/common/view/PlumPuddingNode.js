// Copyright 2022, University of Colorado Boulder

/**
 * PlumPuddingNode shows the "Plum Pudding" model of the hydrogen atom.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Image } from '../../../../scenery/js/imports.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import plumPudding_png from '../../../images/plumPudding_png.js';
import ElectronNode from './ElectronNode.js';
import HydrogenAtomNode from './HydrogenAtomNode.js';
export default class PlumPuddingNode extends HydrogenAtomNode {
  constructor(hydrogenAtom, hydrogenAtomProperty, modelViewTransform, providedOptions) {
    const options = optionize()({
      //TODO default values for options
    }, providedOptions);

    // Plum pudding image, centered at the atom's position
    const plumPuddingImage = new Image(plumPudding_png, {
      tandem: options.tandem.createTandem('plumPuddingImage')
    });
    const imageHeight = plumPuddingImage.height;
    const atomHeight = 2 * modelViewTransform.modelToViewDeltaY(hydrogenAtom.radius);
    const imageScale = atomHeight / imageHeight;
    plumPuddingImage.scale(imageScale);
    plumPuddingImage.center = modelViewTransform.modelToViewPosition(hydrogenAtom.position);
    const electronNode = new ElectronNode(hydrogenAtom.electron, modelViewTransform, {
      tandem: options.tandem.createTandem('electronNode')
    });
    options.children = [plumPuddingImage, electronNode];
    super(hydrogenAtom, hydrogenAtomProperty, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('PlumPuddingNode', PlumPuddingNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJJbWFnZSIsIm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIiwicGx1bVB1ZGRpbmdfcG5nIiwiRWxlY3Ryb25Ob2RlIiwiSHlkcm9nZW5BdG9tTm9kZSIsIlBsdW1QdWRkaW5nTm9kZSIsImNvbnN0cnVjdG9yIiwiaHlkcm9nZW5BdG9tIiwiaHlkcm9nZW5BdG9tUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicGx1bVB1ZGRpbmdJbWFnZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImltYWdlSGVpZ2h0IiwiaGVpZ2h0IiwiYXRvbUhlaWdodCIsIm1vZGVsVG9WaWV3RGVsdGFZIiwicmFkaXVzIiwiaW1hZ2VTY2FsZSIsInNjYWxlIiwiY2VudGVyIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsInBvc2l0aW9uIiwiZWxlY3Ryb25Ob2RlIiwiZWxlY3Ryb24iLCJjaGlsZHJlbiIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBsdW1QdWRkaW5nTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGx1bVB1ZGRpbmdOb2RlIHNob3dzIHRoZSBcIlBsdW0gUHVkZGluZ1wiIG1vZGVsIG9mIHRoZSBoeWRyb2dlbiBhdG9tLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQbHVtUHVkZGluZ01vZGVsIGZyb20gJy4uL21vZGVsL1BsdW1QdWRkaW5nTW9kZWwuanMnO1xyXG5pbXBvcnQgbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20gZnJvbSAnLi4vLi4vbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20uanMnO1xyXG5pbXBvcnQgcGx1bVB1ZGRpbmdfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9wbHVtUHVkZGluZ19wbmcuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBFbGVjdHJvbk5vZGUgZnJvbSAnLi9FbGVjdHJvbk5vZGUuanMnO1xyXG5pbXBvcnQgSHlkcm9nZW5BdG9tTm9kZSwgeyBIeWRyb2dlbkF0b21Ob2RlT3B0aW9ucyB9IGZyb20gJy4vSHlkcm9nZW5BdG9tTm9kZS5qcyc7XHJcbmltcG9ydCBIeWRyb2dlbkF0b20gZnJvbSAnLi4vbW9kZWwvSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgUGx1bVB1ZGRpbmdOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxIeWRyb2dlbkF0b21Ob2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbHVtUHVkZGluZ05vZGUgZXh0ZW5kcyBIeWRyb2dlbkF0b21Ob2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBoeWRyb2dlbkF0b206IFBsdW1QdWRkaW5nTW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICBoeWRyb2dlbkF0b21Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8SHlkcm9nZW5BdG9tPixcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogUGx1bVB1ZGRpbmdOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFBsdW1QdWRkaW5nTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBIeWRyb2dlbkF0b21Ob2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICAvL1RPRE8gZGVmYXVsdCB2YWx1ZXMgZm9yIG9wdGlvbnNcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFBsdW0gcHVkZGluZyBpbWFnZSwgY2VudGVyZWQgYXQgdGhlIGF0b20ncyBwb3NpdGlvblxyXG4gICAgY29uc3QgcGx1bVB1ZGRpbmdJbWFnZSA9IG5ldyBJbWFnZSggcGx1bVB1ZGRpbmdfcG5nLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncGx1bVB1ZGRpbmdJbWFnZScgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgaW1hZ2VIZWlnaHQgPSBwbHVtUHVkZGluZ0ltYWdlLmhlaWdodDtcclxuICAgIGNvbnN0IGF0b21IZWlnaHQgPSAyICogbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCBoeWRyb2dlbkF0b20ucmFkaXVzICk7XHJcbiAgICBjb25zdCBpbWFnZVNjYWxlID0gYXRvbUhlaWdodCAvIGltYWdlSGVpZ2h0O1xyXG4gICAgcGx1bVB1ZGRpbmdJbWFnZS5zY2FsZSggaW1hZ2VTY2FsZSApO1xyXG4gICAgcGx1bVB1ZGRpbmdJbWFnZS5jZW50ZXIgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggaHlkcm9nZW5BdG9tLnBvc2l0aW9uICk7XHJcblxyXG4gICAgY29uc3QgZWxlY3Ryb25Ob2RlID0gbmV3IEVsZWN0cm9uTm9kZSggaHlkcm9nZW5BdG9tLmVsZWN0cm9uLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdlbGVjdHJvbk5vZGUnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBwbHVtUHVkZGluZ0ltYWdlLCBlbGVjdHJvbk5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggaHlkcm9nZW5BdG9tLCBoeWRyb2dlbkF0b21Qcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnUGx1bVB1ZGRpbmdOb2RlJywgUGx1bVB1ZGRpbmdOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLFNBQVNDLEtBQUssUUFBUSxtQ0FBbUM7QUFFekQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBQ3RFLE9BQU9DLGVBQWUsTUFBTSxvQ0FBb0M7QUFFaEUsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUM1QyxPQUFPQyxnQkFBZ0IsTUFBbUMsdUJBQXVCO0FBU2pGLGVBQWUsTUFBTUMsZUFBZSxTQUFTRCxnQkFBZ0IsQ0FBQztFQUVyREUsV0FBV0EsQ0FBRUMsWUFBOEIsRUFDOUJDLG9CQUFxRCxFQUNyREMsa0JBQXVDLEVBQ3ZDQyxlQUF1QyxFQUFHO0lBRTVELE1BQU1DLE9BQU8sR0FBR1osU0FBUyxDQUErRCxDQUFDLENBQUU7TUFDekY7SUFBQSxDQUNELEVBQUVXLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUUsZ0JBQWdCLEdBQUcsSUFBSVosS0FBSyxDQUFFRSxlQUFlLEVBQUU7TUFDbkRXLE1BQU0sRUFBRUYsT0FBTyxDQUFDRSxNQUFNLENBQUNDLFlBQVksQ0FBRSxrQkFBbUI7SUFDMUQsQ0FBRSxDQUFDO0lBQ0gsTUFBTUMsV0FBVyxHQUFHSCxnQkFBZ0IsQ0FBQ0ksTUFBTTtJQUMzQyxNQUFNQyxVQUFVLEdBQUcsQ0FBQyxHQUFHUixrQkFBa0IsQ0FBQ1MsaUJBQWlCLENBQUVYLFlBQVksQ0FBQ1ksTUFBTyxDQUFDO0lBQ2xGLE1BQU1DLFVBQVUsR0FBR0gsVUFBVSxHQUFHRixXQUFXO0lBQzNDSCxnQkFBZ0IsQ0FBQ1MsS0FBSyxDQUFFRCxVQUFXLENBQUM7SUFDcENSLGdCQUFnQixDQUFDVSxNQUFNLEdBQUdiLGtCQUFrQixDQUFDYyxtQkFBbUIsQ0FBRWhCLFlBQVksQ0FBQ2lCLFFBQVMsQ0FBQztJQUV6RixNQUFNQyxZQUFZLEdBQUcsSUFBSXRCLFlBQVksQ0FBRUksWUFBWSxDQUFDbUIsUUFBUSxFQUFFakIsa0JBQWtCLEVBQUU7TUFDaEZJLE1BQU0sRUFBRUYsT0FBTyxDQUFDRSxNQUFNLENBQUNDLFlBQVksQ0FBRSxjQUFlO0lBQ3RELENBQUUsQ0FBQztJQUVISCxPQUFPLENBQUNnQixRQUFRLEdBQUcsQ0FBRWYsZ0JBQWdCLEVBQUVhLFlBQVksQ0FBRTtJQUVyRCxLQUFLLENBQUVsQixZQUFZLEVBQUVDLG9CQUFvQixFQUFFRyxPQUFRLENBQUM7RUFDdEQ7RUFFZ0JpQixPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTNCLHVCQUF1QixDQUFDNkIsUUFBUSxDQUFFLGlCQUFpQixFQUFFekIsZUFBZ0IsQ0FBQyJ9