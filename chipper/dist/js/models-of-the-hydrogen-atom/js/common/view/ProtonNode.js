// Copyright 2015-2022, University of Colorado Boulder

//TODO duplication with ElectronNode
/**
 * ProtonNode is the visual representation of a proton.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import ShadedSphereNode from '../../../../scenery-phet/js/ShadedSphereNode.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import Proton from '../model/Proton.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import MOTHAColors from '../MOTHAColors.js';
export default class ProtonNode extends ShadedSphereNode {
  constructor(proton, modelViewTransform, providedOptions) {
    const options = optionize()({
      // ShadedSphereNodeOptions
      mainColor: MOTHAColors.protonBaseColorProperty,
      highlightColor: MOTHAColors.protonHighlightColorProperty
    }, providedOptions);
    super(2 * modelViewTransform.modelToViewDeltaX(proton.radius), options);
    proton.positionProperty.link(position => {
      this.translation = modelViewTransform.modelToViewPosition(position);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Creates a proton icon, used in the Key.
   */
  static createIcon(scale = 1) {
    const proton = new Proton({
      tandem: Tandem.OPT_OUT
    });
    const modelViewTransform = ModelViewTransform2.createIdentity();
    return new ProtonNode(proton, modelViewTransform, {
      scale: scale
    });
  }
}
modelsOfTheHydrogenAtom.register('ProtonNode', ProtonNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiU2hhZGVkU3BoZXJlTm9kZSIsIm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIiwiUHJvdG9uIiwiVGFuZGVtIiwiTU9USEFDb2xvcnMiLCJQcm90b25Ob2RlIiwiY29uc3RydWN0b3IiLCJwcm90b24iLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibWFpbkNvbG9yIiwicHJvdG9uQmFzZUNvbG9yUHJvcGVydHkiLCJoaWdobGlnaHRDb2xvciIsInByb3RvbkhpZ2hsaWdodENvbG9yUHJvcGVydHkiLCJtb2RlbFRvVmlld0RlbHRhWCIsInJhZGl1cyIsInBvc2l0aW9uUHJvcGVydHkiLCJsaW5rIiwicG9zaXRpb24iLCJ0cmFuc2xhdGlvbiIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJkaXNwb3NlIiwiYXNzZXJ0IiwiY3JlYXRlSWNvbiIsInNjYWxlIiwidGFuZGVtIiwiT1BUX09VVCIsImNyZWF0ZUlkZW50aXR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm90b25Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLy9UT0RPIGR1cGxpY2F0aW9uIHdpdGggRWxlY3Ryb25Ob2RlXHJcbi8qKlxyXG4gKiBQcm90b25Ob2RlIGlzIHRoZSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb2YgYSBwcm90b24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgU2hhZGVkU3BoZXJlTm9kZSwgeyBTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9TaGFkZWRTcGhlcmVOb2RlLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IFByb3RvbiBmcm9tICcuLi9tb2RlbC9Qcm90b24uanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IE1PVEhBQ29sb3JzIGZyb20gJy4uL01PVEhBQ29sb3JzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBQcm90b25Ob2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucywgJ21haW5Db2xvcicgfCAnaGlnaGxpZ2h0Q29sb3InPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3Rvbk5vZGUgZXh0ZW5kcyBTaGFkZWRTcGhlcmVOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm90b246IFByb3RvbiwgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLCBwcm92aWRlZE9wdGlvbnM/OiBQcm90b25Ob2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFByb3Rvbk5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgU2hhZGVkU3BoZXJlTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNoYWRlZFNwaGVyZU5vZGVPcHRpb25zXHJcbiAgICAgIG1haW5Db2xvcjogTU9USEFDb2xvcnMucHJvdG9uQmFzZUNvbG9yUHJvcGVydHksXHJcbiAgICAgIGhpZ2hsaWdodENvbG9yOiBNT1RIQUNvbG9ycy5wcm90b25IaWdobGlnaHRDb2xvclByb3BlcnR5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggMiAqIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggcHJvdG9uLnJhZGl1cyApLCBvcHRpb25zICk7XHJcblxyXG4gICAgcHJvdG9uLnBvc2l0aW9uUHJvcGVydHkubGluayggcG9zaXRpb24gPT4ge1xyXG4gICAgICB0aGlzLnRyYW5zbGF0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIHBvc2l0aW9uICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIHByb3RvbiBpY29uLCB1c2VkIGluIHRoZSBLZXkuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVJY29uKCBzY2FsZSA9IDEgKTogTm9kZSB7XHJcbiAgICBjb25zdCBwcm90b24gPSBuZXcgUHJvdG9uKCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IG1vZGVsVmlld1RyYW5zZm9ybSA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlSWRlbnRpdHkoKTtcclxuICAgIHJldHVybiBuZXcgUHJvdG9uTm9kZSggcHJvdG9uLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgc2NhbGU6IHNjYWxlXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbS5yZWdpc3RlciggJ1Byb3Rvbk5vZGUnLCBQcm90b25Ob2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0MsbUJBQW1CLE1BQU0sdURBQXVEO0FBQ3ZGLE9BQU9DLGdCQUFnQixNQUFtQyxpREFBaUQ7QUFDM0csT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBQ3RFLE9BQU9DLE1BQU0sTUFBTSxvQkFBb0I7QUFFdkMsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBTTNDLGVBQWUsTUFBTUMsVUFBVSxTQUFTTCxnQkFBZ0IsQ0FBQztFQUVoRE0sV0FBV0EsQ0FBRUMsTUFBYyxFQUFFQyxrQkFBdUMsRUFBRUMsZUFBbUMsRUFBRztJQUVqSCxNQUFNQyxPQUFPLEdBQUdaLFNBQVMsQ0FBMEQsQ0FBQyxDQUFFO01BRXBGO01BQ0FhLFNBQVMsRUFBRVAsV0FBVyxDQUFDUSx1QkFBdUI7TUFDOUNDLGNBQWMsRUFBRVQsV0FBVyxDQUFDVTtJQUM5QixDQUFDLEVBQUVMLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFLENBQUMsR0FBR0Qsa0JBQWtCLENBQUNPLGlCQUFpQixDQUFFUixNQUFNLENBQUNTLE1BQU8sQ0FBQyxFQUFFTixPQUFRLENBQUM7SUFFM0VILE1BQU0sQ0FBQ1UsZ0JBQWdCLENBQUNDLElBQUksQ0FBRUMsUUFBUSxJQUFJO01BQ3hDLElBQUksQ0FBQ0MsV0FBVyxHQUFHWixrQkFBa0IsQ0FBQ2EsbUJBQW1CLENBQUVGLFFBQVMsQ0FBQztJQUN2RSxDQUFFLENBQUM7RUFDTDtFQUVnQkcsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjRSxVQUFVQSxDQUFFQyxLQUFLLEdBQUcsQ0FBQyxFQUFTO0lBQzFDLE1BQU1sQixNQUFNLEdBQUcsSUFBSUwsTUFBTSxDQUFFO01BQ3pCd0IsTUFBTSxFQUFFdkIsTUFBTSxDQUFDd0I7SUFDakIsQ0FBRSxDQUFDO0lBQ0gsTUFBTW5CLGtCQUFrQixHQUFHVCxtQkFBbUIsQ0FBQzZCLGNBQWMsQ0FBQyxDQUFDO0lBQy9ELE9BQU8sSUFBSXZCLFVBQVUsQ0FBRUUsTUFBTSxFQUFFQyxrQkFBa0IsRUFBRTtNQUNqRGlCLEtBQUssRUFBRUE7SUFDVCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUF4Qix1QkFBdUIsQ0FBQzRCLFFBQVEsQ0FBRSxZQUFZLEVBQUV4QixVQUFXLENBQUMifQ==