// Copyright 2022, University of Colorado Boulder

/**
 * XZAxesNode shows the x and z axes for the Schrodinger model.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import { Node, RichText } from '../../../../scenery/js/imports.js';
import MathSymbolFont from '../../../../scenery-phet/js/MathSymbolFont.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import optionize from '../../../../phet-core/js/optionize.js';
import MOTHASymbols from '../MOTHASymbols.js';
const ARROW_LENGTH = 100;
const LABEL_FONT = new MathSymbolFont(18);
const LABEL_OFFSET = 4;
export default class XZAxesNode extends Node {
  constructor(providedOptions) {
    const options = optionize()({
      color: 'black'
    }, providedOptions);
    const arrowNodeOptions = {
      fill: options.color,
      stroke: null,
      headHeight: 6,
      headWidth: 6,
      tailWidth: 1
    };

    // Axes, with their tails at (0,0)
    const xAxisNode = new ArrowNode(0, 0, ARROW_LENGTH, 0, arrowNodeOptions);
    const zAxisNode = new ArrowNode(0, 0, 0, -ARROW_LENGTH, arrowNodeOptions);
    const xText = new RichText(MOTHASymbols.xStringProperty, {
      font: LABEL_FONT,
      fill: options.color,
      left: xAxisNode.right + LABEL_OFFSET,
      centerY: xAxisNode.centerY,
      tandem: options.tandem.createTandem('xText')
    });
    const zText = new RichText(MOTHASymbols.zStringProperty, {
      font: LABEL_FONT,
      fill: options.color,
      centerX: zAxisNode.centerX,
      bottom: zAxisNode.top - LABEL_OFFSET,
      tandem: options.tandem.createTandem('zText')
    });
    options.children = [xAxisNode, zAxisNode, xText, zText];
    super(options);
  }
}
modelsOfTheHydrogenAtom.register('XZAxesNode', XZAxesNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIk5vZGUiLCJSaWNoVGV4dCIsIk1hdGhTeW1ib2xGb250IiwiQXJyb3dOb2RlIiwib3B0aW9uaXplIiwiTU9USEFTeW1ib2xzIiwiQVJST1dfTEVOR1RIIiwiTEFCRUxfRk9OVCIsIkxBQkVMX09GRlNFVCIsIlhaQXhlc05vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjb2xvciIsImFycm93Tm9kZU9wdGlvbnMiLCJmaWxsIiwic3Ryb2tlIiwiaGVhZEhlaWdodCIsImhlYWRXaWR0aCIsInRhaWxXaWR0aCIsInhBeGlzTm9kZSIsInpBeGlzTm9kZSIsInhUZXh0IiwieFN0cmluZ1Byb3BlcnR5IiwiZm9udCIsImxlZnQiLCJyaWdodCIsImNlbnRlclkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJ6VGV4dCIsInpTdHJpbmdQcm9wZXJ0eSIsImNlbnRlclgiLCJib3R0b20iLCJ0b3AiLCJjaGlsZHJlbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiWFpBeGVzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogWFpBeGVzTm9kZSBzaG93cyB0aGUgeCBhbmQgeiBheGVzIGZvciB0aGUgU2Nocm9kaW5nZXIgbW9kZWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMsIFJpY2hUZXh0LCBUQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTWF0aFN5bWJvbEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL01hdGhTeW1ib2xGb250LmpzJztcclxuaW1wb3J0IEFycm93Tm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQXJyb3dOb2RlLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IE1PVEhBU3ltYm9scyBmcm9tICcuLi9NT1RIQVN5bWJvbHMuanMnO1xyXG5cclxuY29uc3QgQVJST1dfTEVOR1RIID0gMTAwO1xyXG5jb25zdCBMQUJFTF9GT05UID0gbmV3IE1hdGhTeW1ib2xGb250KCAxOCApO1xyXG5jb25zdCBMQUJFTF9PRkZTRVQgPSA0O1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBjb2xvcj86IFRDb2xvcjsgLy8gY29sb3IgZm9yIHRoZSBheGVzIGFuZCBsYWJlbHNcclxufTtcclxuXHJcbnR5cGUgWFpBeGVzTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhaQXhlc05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IFhaQXhlc05vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8WFpBeGVzTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICBjb2xvcjogJ2JsYWNrJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgYXJyb3dOb2RlT3B0aW9ucyA9IHtcclxuICAgICAgZmlsbDogb3B0aW9ucy5jb2xvcixcclxuICAgICAgc3Ryb2tlOiBudWxsLFxyXG4gICAgICBoZWFkSGVpZ2h0OiA2LFxyXG4gICAgICBoZWFkV2lkdGg6IDYsXHJcbiAgICAgIHRhaWxXaWR0aDogMVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBBeGVzLCB3aXRoIHRoZWlyIHRhaWxzIGF0ICgwLDApXHJcbiAgICBjb25zdCB4QXhpc05vZGUgPSBuZXcgQXJyb3dOb2RlKCAwLCAwLCBBUlJPV19MRU5HVEgsIDAsIGFycm93Tm9kZU9wdGlvbnMgKTtcclxuICAgIGNvbnN0IHpBeGlzTm9kZSA9IG5ldyBBcnJvd05vZGUoIDAsIDAsIDAsIC1BUlJPV19MRU5HVEgsIGFycm93Tm9kZU9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB4VGV4dCA9IG5ldyBSaWNoVGV4dCggTU9USEFTeW1ib2xzLnhTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBMQUJFTF9GT05ULFxyXG4gICAgICBmaWxsOiBvcHRpb25zLmNvbG9yLFxyXG4gICAgICBsZWZ0OiB4QXhpc05vZGUucmlnaHQgKyBMQUJFTF9PRkZTRVQsXHJcbiAgICAgIGNlbnRlclk6IHhBeGlzTm9kZS5jZW50ZXJZLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3hUZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgelRleHQgPSBuZXcgUmljaFRleHQoIE1PVEhBU3ltYm9scy56U3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogTEFCRUxfRk9OVCxcclxuICAgICAgZmlsbDogb3B0aW9ucy5jb2xvcixcclxuICAgICAgY2VudGVyWDogekF4aXNOb2RlLmNlbnRlclgsXHJcbiAgICAgIGJvdHRvbTogekF4aXNOb2RlLnRvcCAtIExBQkVMX09GRlNFVCxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd6VGV4dCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIHhBeGlzTm9kZSwgekF4aXNOb2RlLCB4VGV4dCwgelRleHQgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdYWkF4ZXNOb2RlJywgWFpBeGVzTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsU0FBU0MsSUFBSSxFQUF1Q0MsUUFBUSxRQUFnQixtQ0FBbUM7QUFDL0csT0FBT0MsY0FBYyxNQUFNLCtDQUErQztBQUMxRSxPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBRWhFLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsWUFBWSxNQUFNLG9CQUFvQjtBQUU3QyxNQUFNQyxZQUFZLEdBQUcsR0FBRztBQUN4QixNQUFNQyxVQUFVLEdBQUcsSUFBSUwsY0FBYyxDQUFFLEVBQUcsQ0FBQztBQUMzQyxNQUFNTSxZQUFZLEdBQUcsQ0FBQztBQVF0QixlQUFlLE1BQU1DLFVBQVUsU0FBU1QsSUFBSSxDQUFDO0VBRXBDVSxXQUFXQSxDQUFFQyxlQUFrQyxFQUFHO0lBRXZELE1BQU1DLE9BQU8sR0FBR1IsU0FBUyxDQUE4QyxDQUFDLENBQUU7TUFDeEVTLEtBQUssRUFBRTtJQUNULENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQixNQUFNRyxnQkFBZ0IsR0FBRztNQUN2QkMsSUFBSSxFQUFFSCxPQUFPLENBQUNDLEtBQUs7TUFDbkJHLE1BQU0sRUFBRSxJQUFJO01BQ1pDLFVBQVUsRUFBRSxDQUFDO01BQ2JDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFNBQVMsRUFBRTtJQUNiLENBQUM7O0lBRUQ7SUFDQSxNQUFNQyxTQUFTLEdBQUcsSUFBSWpCLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFRyxZQUFZLEVBQUUsQ0FBQyxFQUFFUSxnQkFBaUIsQ0FBQztJQUMxRSxNQUFNTyxTQUFTLEdBQUcsSUFBSWxCLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDRyxZQUFZLEVBQUVRLGdCQUFpQixDQUFDO0lBRTNFLE1BQU1RLEtBQUssR0FBRyxJQUFJckIsUUFBUSxDQUFFSSxZQUFZLENBQUNrQixlQUFlLEVBQUU7TUFDeERDLElBQUksRUFBRWpCLFVBQVU7TUFDaEJRLElBQUksRUFBRUgsT0FBTyxDQUFDQyxLQUFLO01BQ25CWSxJQUFJLEVBQUVMLFNBQVMsQ0FBQ00sS0FBSyxHQUFHbEIsWUFBWTtNQUNwQ21CLE9BQU8sRUFBRVAsU0FBUyxDQUFDTyxPQUFPO01BQzFCQyxNQUFNLEVBQUVoQixPQUFPLENBQUNnQixNQUFNLENBQUNDLFlBQVksQ0FBRSxPQUFRO0lBQy9DLENBQUUsQ0FBQztJQUVILE1BQU1DLEtBQUssR0FBRyxJQUFJN0IsUUFBUSxDQUFFSSxZQUFZLENBQUMwQixlQUFlLEVBQUU7TUFDeERQLElBQUksRUFBRWpCLFVBQVU7TUFDaEJRLElBQUksRUFBRUgsT0FBTyxDQUFDQyxLQUFLO01BQ25CbUIsT0FBTyxFQUFFWCxTQUFTLENBQUNXLE9BQU87TUFDMUJDLE1BQU0sRUFBRVosU0FBUyxDQUFDYSxHQUFHLEdBQUcxQixZQUFZO01BQ3BDb0IsTUFBTSxFQUFFaEIsT0FBTyxDQUFDZ0IsTUFBTSxDQUFDQyxZQUFZLENBQUUsT0FBUTtJQUMvQyxDQUFFLENBQUM7SUFFSGpCLE9BQU8sQ0FBQ3VCLFFBQVEsR0FBRyxDQUFFZixTQUFTLEVBQUVDLFNBQVMsRUFBRUMsS0FBSyxFQUFFUSxLQUFLLENBQUU7SUFFekQsS0FBSyxDQUFFbEIsT0FBUSxDQUFDO0VBQ2xCO0FBQ0Y7QUFFQWIsdUJBQXVCLENBQUNxQyxRQUFRLENBQUUsWUFBWSxFQUFFM0IsVUFBVyxDQUFDIn0=