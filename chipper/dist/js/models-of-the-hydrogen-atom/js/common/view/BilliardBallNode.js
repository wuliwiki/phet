// Copyright 2022, University of Colorado Boulder

/**
 * BilliardBallNode shows the "Billiard Ball" model of the hydrogen atom.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import HydrogenAtomNode from './HydrogenAtomNode.js';
import ShadedSphereNode from '../../../../scenery-phet/js/ShadedSphereNode.js';
import MOTHAColors from '../MOTHAColors.js';
export default class BilliardBallNode extends HydrogenAtomNode {
  constructor(hydrogenAtom, hydrogenAtomProperty, modelViewTransform, providedOptions) {
    const options = optionize()({
      //TODO default values for options
    }, providedOptions);
    const viewRadius = modelViewTransform.modelToViewDeltaX(hydrogenAtom.radius);
    const ballNode = new ShadedSphereNode(2 * viewRadius, {
      mainColor: MOTHAColors.billiardBallColorProperty,
      highlightColor: MOTHAColors.billiardBallHighlightColorProperty,
      tandem: options.tandem.createTandem('ballNode')
    });
    options.children = [ballNode];
    super(hydrogenAtom, hydrogenAtomProperty, options);
    this.translation = modelViewTransform.modelToViewPosition(hydrogenAtom.position);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('BilliardBallNode', BilliardBallNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIkh5ZHJvZ2VuQXRvbU5vZGUiLCJTaGFkZWRTcGhlcmVOb2RlIiwiTU9USEFDb2xvcnMiLCJCaWxsaWFyZEJhbGxOb2RlIiwiY29uc3RydWN0b3IiLCJoeWRyb2dlbkF0b20iLCJoeWRyb2dlbkF0b21Qcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2aWV3UmFkaXVzIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJyYWRpdXMiLCJiYWxsTm9kZSIsIm1haW5Db2xvciIsImJpbGxpYXJkQmFsbENvbG9yUHJvcGVydHkiLCJoaWdobGlnaHRDb2xvciIsImJpbGxpYXJkQmFsbEhpZ2hsaWdodENvbG9yUHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJjaGlsZHJlbiIsInRyYW5zbGF0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsInBvc2l0aW9uIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmlsbGlhcmRCYWxsTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmlsbGlhcmRCYWxsTm9kZSBzaG93cyB0aGUgXCJCaWxsaWFyZCBCYWxsXCIgbW9kZWwgb2YgdGhlIGh5ZHJvZ2VuIGF0b20uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBCaWxsaWFyZEJhbGxNb2RlbCBmcm9tICcuLi9tb2RlbC9CaWxsaWFyZEJhbGxNb2RlbC5qcyc7XHJcbmltcG9ydCBtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSBmcm9tICcuLi8uLi9tb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbS5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IEh5ZHJvZ2VuQXRvbU5vZGUsIHsgSHlkcm9nZW5BdG9tTm9kZU9wdGlvbnMgfSBmcm9tICcuL0h5ZHJvZ2VuQXRvbU5vZGUuanMnO1xyXG5pbXBvcnQgSHlkcm9nZW5BdG9tIGZyb20gJy4uL21vZGVsL0h5ZHJvZ2VuQXRvbS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFNoYWRlZFNwaGVyZU5vZGUgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1NoYWRlZFNwaGVyZU5vZGUuanMnO1xyXG5pbXBvcnQgTU9USEFDb2xvcnMgZnJvbSAnLi4vTU9USEFDb2xvcnMuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgQmlsbGlhcmRCYWxsTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8SHlkcm9nZW5BdG9tTm9kZU9wdGlvbnMsICdjaGlsZHJlbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmlsbGlhcmRCYWxsTm9kZSBleHRlbmRzIEh5ZHJvZ2VuQXRvbU5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGh5ZHJvZ2VuQXRvbTogQmlsbGlhcmRCYWxsTW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICBoeWRyb2dlbkF0b21Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8SHlkcm9nZW5BdG9tPixcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogQmlsbGlhcmRCYWxsTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCaWxsaWFyZEJhbGxOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIEh5ZHJvZ2VuQXRvbU5vZGVPcHRpb25zPigpKCB7XHJcbiAgICAgIC8vVE9ETyBkZWZhdWx0IHZhbHVlcyBmb3Igb3B0aW9uc1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3Qgdmlld1JhZGl1cyA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggaHlkcm9nZW5BdG9tLnJhZGl1cyApO1xyXG4gICAgY29uc3QgYmFsbE5vZGUgPSBuZXcgU2hhZGVkU3BoZXJlTm9kZSggMiAqIHZpZXdSYWRpdXMsIHtcclxuICAgICAgbWFpbkNvbG9yOiBNT1RIQUNvbG9ycy5iaWxsaWFyZEJhbGxDb2xvclByb3BlcnR5LFxyXG4gICAgICBoaWdobGlnaHRDb2xvcjogTU9USEFDb2xvcnMuYmlsbGlhcmRCYWxsSGlnaGxpZ2h0Q29sb3JQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdiYWxsTm9kZScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGJhbGxOb2RlIF07XHJcblxyXG4gICAgc3VwZXIoIGh5ZHJvZ2VuQXRvbSwgaHlkcm9nZW5BdG9tUHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnRyYW5zbGF0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGh5ZHJvZ2VuQXRvbS5wb3NpdGlvbiApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnQmlsbGlhcmRCYWxsTm9kZScsIEJpbGxpYXJkQmFsbE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBRXRFLE9BQU9DLGdCQUFnQixNQUFtQyx1QkFBdUI7QUFHakYsT0FBT0MsZ0JBQWdCLE1BQU0saURBQWlEO0FBQzlFLE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7QUFPM0MsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU0gsZ0JBQWdCLENBQUM7RUFFdERJLFdBQVdBLENBQUVDLFlBQStCLEVBQy9CQyxvQkFBcUQsRUFDckRDLGtCQUF1QyxFQUN2Q0MsZUFBd0MsRUFBRztJQUU3RCxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBZ0UsQ0FBQyxDQUFFO01BQzFGO0lBQUEsQ0FDRCxFQUFFVSxlQUFnQixDQUFDO0lBRXBCLE1BQU1FLFVBQVUsR0FBR0gsa0JBQWtCLENBQUNJLGlCQUFpQixDQUFFTixZQUFZLENBQUNPLE1BQU8sQ0FBQztJQUM5RSxNQUFNQyxRQUFRLEdBQUcsSUFBSVosZ0JBQWdCLENBQUUsQ0FBQyxHQUFHUyxVQUFVLEVBQUU7TUFDckRJLFNBQVMsRUFBRVosV0FBVyxDQUFDYSx5QkFBeUI7TUFDaERDLGNBQWMsRUFBRWQsV0FBVyxDQUFDZSxrQ0FBa0M7TUFDOURDLE1BQU0sRUFBRVQsT0FBTyxDQUFDUyxNQUFNLENBQUNDLFlBQVksQ0FBRSxVQUFXO0lBQ2xELENBQUUsQ0FBQztJQUVIVixPQUFPLENBQUNXLFFBQVEsR0FBRyxDQUFFUCxRQUFRLENBQUU7SUFFL0IsS0FBSyxDQUFFUixZQUFZLEVBQUVDLG9CQUFvQixFQUFFRyxPQUFRLENBQUM7SUFFcEQsSUFBSSxDQUFDWSxXQUFXLEdBQUdkLGtCQUFrQixDQUFDZSxtQkFBbUIsQ0FBRWpCLFlBQVksQ0FBQ2tCLFFBQVMsQ0FBQztFQUNwRjtFQUVnQkMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUF6Qix1QkFBdUIsQ0FBQzJCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRXZCLGdCQUFpQixDQUFDIn0=