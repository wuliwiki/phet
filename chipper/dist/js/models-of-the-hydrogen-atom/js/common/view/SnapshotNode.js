// Copyright 2016-2022, University of Colorado Boulder

//TODO this is a placeholder
/**
 * SnapshotNode is a snapshot from the spectrometer.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import TrashButton from '../../../../scenery-phet/js/buttons/TrashButton.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import MOTHAColors from '../MOTHAColors.js';
export default class SnapshotNode extends Node {
  constructor(numberOfSnapshotsProperty, providedOptions) {
    const options = optionize()({
      //TODO default values for options
    }, providedOptions);
    const backgroundNode = new Rectangle(0, 0, 500, 150, {
      cornerRadius: 5,
      fill: MOTHAColors.spectrometerFillProperty,
      stroke: MOTHAColors.spectrometerStrokeProperty
    });

    //TODO i18n
    const titleText = new Text('Snapshot', {
      font: new PhetFont(16),
      fill: MOTHAColors.snapshotTextFillProperty,
      left: backgroundNode.left + 10,
      top: backgroundNode.top + 10,
      tandem: Tandem.OPT_OUT //TODO SnapshotNode is dynamically created
    });

    const trashButton = new TrashButton({
      baseColor: MOTHAColors.pushButtonBaseColorProperty,
      listener: () => {
        numberOfSnapshotsProperty.value--;
      },
      right: backgroundNode.right - 10,
      bottom: backgroundNode.bottom - 10,
      tandem: Tandem.OPT_OUT //TODO SnapshotNode is dynamically created
    });

    options.children = [backgroundNode, titleText, trashButton];
    super(options);
  }

  //TODO dispose
}

modelsOfTheHydrogenAtom.register('SnapshotNode', SnapshotNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0Rm9udCIsIk5vZGUiLCJSZWN0YW5nbGUiLCJUZXh0IiwiVHJhc2hCdXR0b24iLCJUYW5kZW0iLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIk1PVEhBQ29sb3JzIiwiU25hcHNob3ROb2RlIiwiY29uc3RydWN0b3IiLCJudW1iZXJPZlNuYXBzaG90c1Byb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImJhY2tncm91bmROb2RlIiwiY29ybmVyUmFkaXVzIiwiZmlsbCIsInNwZWN0cm9tZXRlckZpbGxQcm9wZXJ0eSIsInN0cm9rZSIsInNwZWN0cm9tZXRlclN0cm9rZVByb3BlcnR5IiwidGl0bGVUZXh0IiwiZm9udCIsInNuYXBzaG90VGV4dEZpbGxQcm9wZXJ0eSIsImxlZnQiLCJ0b3AiLCJ0YW5kZW0iLCJPUFRfT1VUIiwidHJhc2hCdXR0b24iLCJiYXNlQ29sb3IiLCJwdXNoQnV0dG9uQmFzZUNvbG9yUHJvcGVydHkiLCJsaXN0ZW5lciIsInZhbHVlIiwicmlnaHQiLCJib3R0b20iLCJjaGlsZHJlbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU25hcHNob3ROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLy9UT0RPIHRoaXMgaXMgYSBwbGFjZWhvbGRlclxyXG4vKipcclxuICogU25hcHNob3ROb2RlIGlzIGEgc25hcHNob3QgZnJvbSB0aGUgc3BlY3Ryb21ldGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tPcHRpb25hbCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja09wdGlvbmFsLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBSZWN0YW5nbGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVHJhc2hCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2J1dHRvbnMvVHJhc2hCdXR0b24uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20gZnJvbSAnLi4vLi4vbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20uanMnO1xyXG5pbXBvcnQgTU9USEFDb2xvcnMgZnJvbSAnLi4vTU9USEFDb2xvcnMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFNuYXBzaG90Tm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmXHJcbiAgUGlja09wdGlvbmFsPE5vZGVPcHRpb25zLCAnc2NhbGUnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNuYXBzaG90Tm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG51bWJlck9mU25hcHNob3RzUHJvcGVydHk6IFRQcm9wZXJ0eTxudW1iZXI+LCBwcm92aWRlZE9wdGlvbnM/OiBTbmFwc2hvdE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U25hcHNob3ROb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcbiAgICAgIC8vVE9ETyBkZWZhdWx0IHZhbHVlcyBmb3Igb3B0aW9uc1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgYmFja2dyb3VuZE5vZGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCA1MDAsIDE1MCwge1xyXG4gICAgICBjb3JuZXJSYWRpdXM6IDUsXHJcbiAgICAgIGZpbGw6IE1PVEhBQ29sb3JzLnNwZWN0cm9tZXRlckZpbGxQcm9wZXJ0eSxcclxuICAgICAgc3Ryb2tlOiBNT1RIQUNvbG9ycy5zcGVjdHJvbWV0ZXJTdHJva2VQcm9wZXJ0eVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vVE9ETyBpMThuXHJcbiAgICBjb25zdCB0aXRsZVRleHQgPSBuZXcgVGV4dCggJ1NuYXBzaG90Jywge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE2ICksXHJcbiAgICAgIGZpbGw6IE1PVEhBQ29sb3JzLnNuYXBzaG90VGV4dEZpbGxQcm9wZXJ0eSxcclxuICAgICAgbGVmdDogYmFja2dyb3VuZE5vZGUubGVmdCArIDEwLFxyXG4gICAgICB0b3A6IGJhY2tncm91bmROb2RlLnRvcCArIDEwLFxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUIC8vVE9ETyBTbmFwc2hvdE5vZGUgaXMgZHluYW1pY2FsbHkgY3JlYXRlZFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHRyYXNoQnV0dG9uID0gbmV3IFRyYXNoQnV0dG9uKCB7XHJcbiAgICAgIGJhc2VDb2xvcjogTU9USEFDb2xvcnMucHVzaEJ1dHRvbkJhc2VDb2xvclByb3BlcnR5LFxyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG4gICAgICAgIG51bWJlck9mU25hcHNob3RzUHJvcGVydHkudmFsdWUtLTtcclxuICAgICAgfSxcclxuICAgICAgcmlnaHQ6IGJhY2tncm91bmROb2RlLnJpZ2h0IC0gMTAsXHJcbiAgICAgIGJvdHRvbTogYmFja2dyb3VuZE5vZGUuYm90dG9tIC0gMTAsXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVQgLy9UT0RPIFNuYXBzaG90Tm9kZSBpcyBkeW5hbWljYWxseSBjcmVhdGVkXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgYmFja2dyb3VuZE5vZGUsIHRpdGxlVGV4dCwgdHJhc2hCdXR0b24gXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLy9UT0RPIGRpc3Bvc2VcclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdTbmFwc2hvdE5vZGUnLCBTbmFwc2hvdE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBZUMsU0FBUyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3RGLE9BQU9DLFdBQVcsTUFBTSxvREFBb0Q7QUFDNUUsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQU8zQyxlQUFlLE1BQU1DLFlBQVksU0FBU1AsSUFBSSxDQUFDO0VBRXRDUSxXQUFXQSxDQUFFQyx5QkFBNEMsRUFBRUMsZUFBcUMsRUFBRztJQUV4RyxNQUFNQyxPQUFPLEdBQUdiLFNBQVMsQ0FBZ0QsQ0FBQyxDQUFFO01BQzFFO0lBQUEsQ0FDRCxFQUFFWSxlQUFnQixDQUFDO0lBRXBCLE1BQU1FLGNBQWMsR0FBRyxJQUFJWCxTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO01BQ3BEWSxZQUFZLEVBQUUsQ0FBQztNQUNmQyxJQUFJLEVBQUVSLFdBQVcsQ0FBQ1Msd0JBQXdCO01BQzFDQyxNQUFNLEVBQUVWLFdBQVcsQ0FBQ1c7SUFDdEIsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsU0FBUyxHQUFHLElBQUloQixJQUFJLENBQUUsVUFBVSxFQUFFO01BQ3RDaUIsSUFBSSxFQUFFLElBQUlwQixRQUFRLENBQUUsRUFBRyxDQUFDO01BQ3hCZSxJQUFJLEVBQUVSLFdBQVcsQ0FBQ2Msd0JBQXdCO01BQzFDQyxJQUFJLEVBQUVULGNBQWMsQ0FBQ1MsSUFBSSxHQUFHLEVBQUU7TUFDOUJDLEdBQUcsRUFBRVYsY0FBYyxDQUFDVSxHQUFHLEdBQUcsRUFBRTtNQUM1QkMsTUFBTSxFQUFFbkIsTUFBTSxDQUFDb0IsT0FBTyxDQUFDO0lBQ3pCLENBQUUsQ0FBQzs7SUFFSCxNQUFNQyxXQUFXLEdBQUcsSUFBSXRCLFdBQVcsQ0FBRTtNQUNuQ3VCLFNBQVMsRUFBRXBCLFdBQVcsQ0FBQ3FCLDJCQUEyQjtNQUNsREMsUUFBUSxFQUFFQSxDQUFBLEtBQU07UUFDZG5CLHlCQUF5QixDQUFDb0IsS0FBSyxFQUFFO01BQ25DLENBQUM7TUFDREMsS0FBSyxFQUFFbEIsY0FBYyxDQUFDa0IsS0FBSyxHQUFHLEVBQUU7TUFDaENDLE1BQU0sRUFBRW5CLGNBQWMsQ0FBQ21CLE1BQU0sR0FBRyxFQUFFO01BQ2xDUixNQUFNLEVBQUVuQixNQUFNLENBQUNvQixPQUFPLENBQUM7SUFDekIsQ0FBRSxDQUFDOztJQUVIYixPQUFPLENBQUNxQixRQUFRLEdBQUcsQ0FBRXBCLGNBQWMsRUFBRU0sU0FBUyxFQUFFTyxXQUFXLENBQUU7SUFFN0QsS0FBSyxDQUFFZCxPQUFRLENBQUM7RUFDbEI7O0VBRUE7QUFDRjs7QUFFQU4sdUJBQXVCLENBQUM0QixRQUFRLENBQUUsY0FBYyxFQUFFMUIsWUFBYSxDQUFDIn0=