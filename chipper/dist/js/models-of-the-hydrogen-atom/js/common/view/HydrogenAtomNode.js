// Copyright 2022, University of Colorado Boulder

//TODO should this Node be responsible for position?
/**
 * HydrogenAtomNode is the base class for all hydrogen-atom views.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Node } from '../../../../scenery/js/imports.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
export default class HydrogenAtomNode extends Node {
  /**
   * @param hydrogenAtom - the hydrogen atom associated with this Node
   * @param hydrogenAtomProperty - the hydrogen atom that is currently selected
   * @param providedOptions
   */
  constructor(hydrogenAtom, hydrogenAtomProperty, providedOptions) {
    const options = optionize()({
      //TODO default values for options
    }, providedOptions);
    options.visibleProperty = new DerivedProperty([hydrogenAtomProperty], value => value === hydrogenAtom, {
      tandem: options.tandem.createTandem('visibleProperty'),
      phetioValueType: BooleanIO
    });
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('HydrogenAtomNode', HydrogenAtomNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwibW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20iLCJEZXJpdmVkUHJvcGVydHkiLCJCb29sZWFuSU8iLCJIeWRyb2dlbkF0b21Ob2RlIiwiY29uc3RydWN0b3IiLCJoeWRyb2dlbkF0b20iLCJoeWRyb2dlbkF0b21Qcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2aXNpYmxlUHJvcGVydHkiLCJ2YWx1ZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1ZhbHVlVHlwZSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkh5ZHJvZ2VuQXRvbU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLy9UT0RPIHNob3VsZCB0aGlzIE5vZGUgYmUgcmVzcG9uc2libGUgZm9yIHBvc2l0aW9uP1xyXG4vKipcclxuICogSHlkcm9nZW5BdG9tTm9kZSBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgYWxsIGh5ZHJvZ2VuLWF0b20gdmlld3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBSZWN0YW5nbGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IEh5ZHJvZ2VuQXRvbSBmcm9tICcuLi9tb2RlbC9IeWRyb2dlbkF0b20uanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgQm9vbGVhbklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9Cb29sZWFuSU8uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBIeWRyb2dlbkF0b21Ob2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJz4gJiBQaWNrT3B0aW9uYWw8Tm9kZU9wdGlvbnMsICdjaGlsZHJlbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSHlkcm9nZW5BdG9tTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gaHlkcm9nZW5BdG9tIC0gdGhlIGh5ZHJvZ2VuIGF0b20gYXNzb2NpYXRlZCB3aXRoIHRoaXMgTm9kZVxyXG4gICAqIEBwYXJhbSBoeWRyb2dlbkF0b21Qcm9wZXJ0eSAtIHRoZSBoeWRyb2dlbiBhdG9tIHRoYXQgaXMgY3VycmVudGx5IHNlbGVjdGVkXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvciggaHlkcm9nZW5BdG9tOiBIeWRyb2dlbkF0b20sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBoeWRyb2dlbkF0b21Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8SHlkcm9nZW5BdG9tPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogSHlkcm9nZW5BdG9tTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxIeWRyb2dlbkF0b21Ob2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIFJlY3RhbmdsZU9wdGlvbnM+KCkoIHtcclxuICAgICAgLy9UT0RPIGRlZmF1bHQgdmFsdWVzIGZvciBvcHRpb25zXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBvcHRpb25zLnZpc2libGVQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgaHlkcm9nZW5BdG9tUHJvcGVydHkgXSxcclxuICAgICAgdmFsdWUgPT4gKCB2YWx1ZSA9PT0gaHlkcm9nZW5BdG9tICksIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Zpc2libGVQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IEJvb2xlYW5JT1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbS5yZWdpc3RlciggJ0h5ZHJvZ2VuQXRvbU5vZGUnLCBIeWRyb2dlbkF0b21Ob2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsU0FBU0MsSUFBSSxRQUF1QyxtQ0FBbUM7QUFDdkYsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBR3RFLE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFFcEUsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQU1oRSxlQUFlLE1BQU1DLGdCQUFnQixTQUFTSixJQUFJLENBQUM7RUFFakQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNZSyxXQUFXQSxDQUFFQyxZQUEwQixFQUMxQkMsb0JBQXFELEVBQ3JEQyxlQUF3QyxFQUFHO0lBRWhFLE1BQU1DLE9BQU8sR0FBR1YsU0FBUyxDQUF5RCxDQUFDLENBQUU7TUFDbkY7SUFBQSxDQUNELEVBQUVTLGVBQWdCLENBQUM7SUFFcEJDLE9BQU8sQ0FBQ0MsZUFBZSxHQUFHLElBQUlSLGVBQWUsQ0FBRSxDQUFFSyxvQkFBb0IsQ0FBRSxFQUNyRUksS0FBSyxJQUFNQSxLQUFLLEtBQUtMLFlBQWMsRUFBRTtNQUNuQ00sTUFBTSxFQUFFSCxPQUFPLENBQUNHLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLGlCQUFrQixDQUFDO01BQ3hEQyxlQUFlLEVBQUVYO0lBQ25CLENBQUUsQ0FBQztJQUVMLEtBQUssQ0FBRU0sT0FBUSxDQUFDO0VBQ2xCO0VBRWdCTSxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWQsdUJBQXVCLENBQUNnQixRQUFRLENBQUUsa0JBQWtCLEVBQUViLGdCQUFpQixDQUFDIn0=