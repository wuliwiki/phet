// Copyright 2022, University of Colorado Boulder

/**
 * ViewSnapshotsButtonOptions is the push button labeled 'View Snapshots'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import ModelsOfTheHydrogenAtomStrings from '../../ModelsOfTheHydrogenAtomStrings.js';
import MOTHAColors from '../MOTHAColors.js';
export default class ViewSnapshotsButton extends RectangularPushButton {
  constructor(numberOfSnapshotsProperty, providedOptions) {
    super(optionize()({
      // RectangularPushButtonOptions
      baseColor: MOTHAColors.pushButtonBaseColorProperty,
      content: new Text(ModelsOfTheHydrogenAtomStrings.viewSnapshotsStringProperty, {
        font: new PhetFont(16),
        tandem: providedOptions.tandem.createTandem('text')
      }),
      // Visible when we have snapshots
      visibleProperty: new DerivedProperty([numberOfSnapshotsProperty], n => n > 0, {
        tandem: providedOptions.tandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO
      })
    }, providedOptions));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('ViewSnapshotsButton', ViewSnapshotsButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJvcHRpb25pemUiLCJQaGV0Rm9udCIsIlRleHQiLCJSZWN0YW5ndWxhclB1c2hCdXR0b24iLCJCb29sZWFuSU8iLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIk1vZGVsc09mVGhlSHlkcm9nZW5BdG9tU3RyaW5ncyIsIk1PVEhBQ29sb3JzIiwiVmlld1NuYXBzaG90c0J1dHRvbiIsImNvbnN0cnVjdG9yIiwibnVtYmVyT2ZTbmFwc2hvdHNQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsImJhc2VDb2xvciIsInB1c2hCdXR0b25CYXNlQ29sb3JQcm9wZXJ0eSIsImNvbnRlbnQiLCJ2aWV3U25hcHNob3RzU3RyaW5nUHJvcGVydHkiLCJmb250IiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwidmlzaWJsZVByb3BlcnR5IiwibiIsInBoZXRpb1ZhbHVlVHlwZSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZpZXdTbmFwc2hvdHNCdXR0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXdTbmFwc2hvdHNCdXR0b25PcHRpb25zIGlzIHRoZSBwdXNoIGJ1dHRvbiBsYWJlbGVkICdWaWV3IFNuYXBzaG90cycuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiwgeyBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IEJvb2xlYW5JTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvQm9vbGVhbklPLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IE1vZGVsc09mVGhlSHlkcm9nZW5BdG9tU3RyaW5ncyBmcm9tICcuLi8uLi9Nb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgTU9USEFDb2xvcnMgZnJvbSAnLi4vTU9USEFDb2xvcnMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFZpZXdTbmFwc2hvdHNCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zICZcclxuICBQaWNrUmVxdWlyZWQ8UmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucywgJ2xpc3RlbmVyJyB8ICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdTbmFwc2hvdHNCdXR0b24gZXh0ZW5kcyBSZWN0YW5ndWxhclB1c2hCdXR0b24ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG51bWJlck9mU25hcHNob3RzUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sIHByb3ZpZGVkT3B0aW9uczogVmlld1NuYXBzaG90c0J1dHRvbk9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggb3B0aW9uaXplPFZpZXdTbmFwc2hvdHNCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9uc1xyXG4gICAgICBiYXNlQ29sb3I6IE1PVEhBQ29sb3JzLnB1c2hCdXR0b25CYXNlQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgY29udGVudDogbmV3IFRleHQoIE1vZGVsc09mVGhlSHlkcm9nZW5BdG9tU3RyaW5ncy52aWV3U25hcHNob3RzU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE2ICksXHJcbiAgICAgICAgdGFuZGVtOiBwcm92aWRlZE9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RleHQnIClcclxuICAgICAgfSApLFxyXG5cclxuICAgICAgLy8gVmlzaWJsZSB3aGVuIHdlIGhhdmUgc25hcHNob3RzXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBudW1iZXJPZlNuYXBzaG90c1Byb3BlcnR5IF0sIG4gPT4gKCBuID4gMCApLCB7XHJcbiAgICAgICAgdGFuZGVtOiBwcm92aWRlZE9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Zpc2libGVQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IEJvb2xlYW5JT1xyXG4gICAgICB9IClcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdWaWV3U25hcHNob3RzQnV0dG9uJywgVmlld1NuYXBzaG90c0J1dHRvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBRXBFLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBaUNDLElBQUksUUFBUSxtQ0FBbUM7QUFDaEYsT0FBT0MscUJBQXFCLE1BQXdDLHFEQUFxRDtBQUN6SCxPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBQ2hFLE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyw4QkFBOEIsTUFBTSx5Q0FBeUM7QUFDcEYsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQU8zQyxlQUFlLE1BQU1DLG1CQUFtQixTQUFTTCxxQkFBcUIsQ0FBQztFQUU5RE0sV0FBV0EsQ0FBRUMseUJBQW9ELEVBQUVDLGVBQTJDLEVBQUc7SUFDdEgsS0FBSyxDQUFFWCxTQUFTLENBQXdFLENBQUMsQ0FBRTtNQUV6RjtNQUNBWSxTQUFTLEVBQUVMLFdBQVcsQ0FBQ00sMkJBQTJCO01BQ2xEQyxPQUFPLEVBQUUsSUFBSVosSUFBSSxDQUFFSSw4QkFBOEIsQ0FBQ1MsMkJBQTJCLEVBQUU7UUFDN0VDLElBQUksRUFBRSxJQUFJZixRQUFRLENBQUUsRUFBRyxDQUFDO1FBQ3hCZ0IsTUFBTSxFQUFFTixlQUFlLENBQUNNLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE1BQU87TUFDdEQsQ0FBRSxDQUFDO01BRUg7TUFDQUMsZUFBZSxFQUFFLElBQUlwQixlQUFlLENBQUUsQ0FBRVcseUJBQXlCLENBQUUsRUFBRVUsQ0FBQyxJQUFNQSxDQUFDLEdBQUcsQ0FBRyxFQUFFO1FBQ25GSCxNQUFNLEVBQUVOLGVBQWUsQ0FBQ00sTUFBTSxDQUFDQyxZQUFZLENBQUUsaUJBQWtCLENBQUM7UUFDaEVHLGVBQWUsRUFBRWpCO01BQ25CLENBQUU7SUFDSixDQUFDLEVBQUVPLGVBQWdCLENBQUUsQ0FBQztFQUN4QjtFQUVnQlcsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFqQix1QkFBdUIsQ0FBQ21CLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWhCLG1CQUFvQixDQUFDIn0=