// Copyright 2022, University of Colorado Boulder

/**
 * BohrNode shows the Bohr model of the hydrogen atom.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import HydrogenAtomNode from './HydrogenAtomNode.js';
import ProtonNode from './ProtonNode.js';
import ElectronNode from './ElectronNode.js';
import PrimaryElectronStateText from './PrimaryElectronStateText.js';
import MOTHAConstants from '../MOTHAConstants.js';
import OrbitsNode from './OrbitsNode.js';
export default class BohrNode extends HydrogenAtomNode {
  constructor(hydrogenAtom, hydrogenAtomProperty, modelViewTransform, providedOptions) {
    const options = optionize()({
      // No default values, but we modify options below.
    }, providedOptions);

    // Electron orbits
    const orbitsNode = new OrbitsNode(hydrogenAtom, modelViewTransform, {
      tandem: options.tandem.createTandem('orbitsNode')
    });
    const protonNode = new ProtonNode(hydrogenAtom.proton, modelViewTransform, {
      tandem: options.tandem.createTandem('protonNode')
    });
    const electronNode = new ElectronNode(hydrogenAtom.electron, modelViewTransform, {
      tandem: options.tandem.createTandem('electronNode')
    });
    const electronStateText = new PrimaryElectronStateText(hydrogenAtom.getElectronStateProperty(), {
      tandem: options.tandem.createTandem('electronStateText')
    });
    options.children = [orbitsNode, protonNode, electronNode, electronStateText];
    super(hydrogenAtom, hydrogenAtomProperty, options);

    // Keep the electron state positioned in the lower-right corner of the zoomed-in box.
    const zoomedInBoxBounds = modelViewTransform.modelToViewBounds(hydrogenAtom.zoomedInBox);
    electronStateText.boundsProperty.link(bounds => {
      electronStateText.rightBottom = zoomedInBoxBounds.rightBottom.minus(MOTHAConstants.STATE_DISPLAY_MARGINS);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('BohrNode', BohrNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIkh5ZHJvZ2VuQXRvbU5vZGUiLCJQcm90b25Ob2RlIiwiRWxlY3Ryb25Ob2RlIiwiUHJpbWFyeUVsZWN0cm9uU3RhdGVUZXh0IiwiTU9USEFDb25zdGFudHMiLCJPcmJpdHNOb2RlIiwiQm9ock5vZGUiLCJjb25zdHJ1Y3RvciIsImh5ZHJvZ2VuQXRvbSIsImh5ZHJvZ2VuQXRvbVByb3BlcnR5IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIm9yYml0c05vZGUiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJwcm90b25Ob2RlIiwicHJvdG9uIiwiZWxlY3Ryb25Ob2RlIiwiZWxlY3Ryb24iLCJlbGVjdHJvblN0YXRlVGV4dCIsImdldEVsZWN0cm9uU3RhdGVQcm9wZXJ0eSIsImNoaWxkcmVuIiwiem9vbWVkSW5Cb3hCb3VuZHMiLCJtb2RlbFRvVmlld0JvdW5kcyIsInpvb21lZEluQm94IiwiYm91bmRzUHJvcGVydHkiLCJsaW5rIiwiYm91bmRzIiwicmlnaHRCb3R0b20iLCJtaW51cyIsIlNUQVRFX0RJU1BMQVlfTUFSR0lOUyIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJvaHJOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCb2hyTm9kZSBzaG93cyB0aGUgQm9ociBtb2RlbCBvZiB0aGUgaHlkcm9nZW4gYXRvbS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgSHlkcm9nZW5BdG9tTm9kZSwgeyBIeWRyb2dlbkF0b21Ob2RlT3B0aW9ucyB9IGZyb20gJy4vSHlkcm9nZW5BdG9tTm9kZS5qcyc7XHJcbmltcG9ydCBQcm90b25Ob2RlIGZyb20gJy4vUHJvdG9uTm9kZS5qcyc7XHJcbmltcG9ydCBIeWRyb2dlbkF0b20gZnJvbSAnLi4vbW9kZWwvSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRWxlY3Ryb25Ob2RlIGZyb20gJy4vRWxlY3Ryb25Ob2RlLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgQm9ock1vZGVsIGZyb20gJy4uL21vZGVsL0JvaHJNb2RlbC5qcyc7XHJcbmltcG9ydCBQcmltYXJ5RWxlY3Ryb25TdGF0ZVRleHQgZnJvbSAnLi9QcmltYXJ5RWxlY3Ryb25TdGF0ZVRleHQuanMnO1xyXG5pbXBvcnQgTU9USEFDb25zdGFudHMgZnJvbSAnLi4vTU9USEFDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgT3JiaXRzTm9kZSBmcm9tICcuL09yYml0c05vZGUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEJvaHJOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxIeWRyb2dlbkF0b21Ob2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb2hyTm9kZSBleHRlbmRzIEh5ZHJvZ2VuQXRvbU5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGh5ZHJvZ2VuQXRvbTogQm9ock1vZGVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgaHlkcm9nZW5BdG9tUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PEh5ZHJvZ2VuQXRvbT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEJvaHJOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJvaHJOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIEh5ZHJvZ2VuQXRvbU5vZGVPcHRpb25zPigpKCB7XHJcbiAgICAgIC8vIE5vIGRlZmF1bHQgdmFsdWVzLCBidXQgd2UgbW9kaWZ5IG9wdGlvbnMgYmVsb3cuXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBFbGVjdHJvbiBvcmJpdHNcclxuICAgIGNvbnN0IG9yYml0c05vZGUgPSBuZXcgT3JiaXRzTm9kZSggaHlkcm9nZW5BdG9tLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdvcmJpdHNOb2RlJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgcHJvdG9uTm9kZSA9IG5ldyBQcm90b25Ob2RlKCBoeWRyb2dlbkF0b20ucHJvdG9uLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwcm90b25Ob2RlJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgZWxlY3Ryb25Ob2RlID0gbmV3IEVsZWN0cm9uTm9kZSggaHlkcm9nZW5BdG9tLmVsZWN0cm9uLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdlbGVjdHJvbk5vZGUnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBlbGVjdHJvblN0YXRlVGV4dCA9IG5ldyBQcmltYXJ5RWxlY3Ryb25TdGF0ZVRleHQoIGh5ZHJvZ2VuQXRvbS5nZXRFbGVjdHJvblN0YXRlUHJvcGVydHkoKSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2VsZWN0cm9uU3RhdGVUZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgb3JiaXRzTm9kZSwgcHJvdG9uTm9kZSwgZWxlY3Ryb25Ob2RlLCBlbGVjdHJvblN0YXRlVGV4dCBdO1xyXG5cclxuICAgIHN1cGVyKCBoeWRyb2dlbkF0b20sIGh5ZHJvZ2VuQXRvbVByb3BlcnR5LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gS2VlcCB0aGUgZWxlY3Ryb24gc3RhdGUgcG9zaXRpb25lZCBpbiB0aGUgbG93ZXItcmlnaHQgY29ybmVyIG9mIHRoZSB6b29tZWQtaW4gYm94LlxyXG4gICAgY29uc3Qgem9vbWVkSW5Cb3hCb3VuZHMgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdCb3VuZHMoIGh5ZHJvZ2VuQXRvbS56b29tZWRJbkJveCApO1xyXG4gICAgZWxlY3Ryb25TdGF0ZVRleHQuYm91bmRzUHJvcGVydHkubGluayggYm91bmRzID0+IHtcclxuICAgICAgZWxlY3Ryb25TdGF0ZVRleHQucmlnaHRCb3R0b20gPSB6b29tZWRJbkJveEJvdW5kcy5yaWdodEJvdHRvbS5taW51cyggTU9USEFDb25zdGFudHMuU1RBVEVfRElTUExBWV9NQVJHSU5TICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdCb2hyTm9kZScsIEJvaHJOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUV0RSxPQUFPQyxnQkFBZ0IsTUFBbUMsdUJBQXVCO0FBQ2pGLE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFHeEMsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUc1QyxPQUFPQyx3QkFBd0IsTUFBTSwrQkFBK0I7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLHNCQUFzQjtBQUNqRCxPQUFPQyxVQUFVLE1BQU0saUJBQWlCO0FBTXhDLGVBQWUsTUFBTUMsUUFBUSxTQUFTTixnQkFBZ0IsQ0FBQztFQUU5Q08sV0FBV0EsQ0FBRUMsWUFBdUIsRUFDdkJDLG9CQUFxRCxFQUNyREMsa0JBQXVDLEVBQ3ZDQyxlQUFnQyxFQUFHO0lBRXJELE1BQU1DLE9BQU8sR0FBR2QsU0FBUyxDQUF3RCxDQUFDLENBQUU7TUFDbEY7SUFBQSxDQUNELEVBQUVhLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUUsVUFBVSxHQUFHLElBQUlSLFVBQVUsQ0FBRUcsWUFBWSxFQUFFRSxrQkFBa0IsRUFBRTtNQUNuRUksTUFBTSxFQUFFRixPQUFPLENBQUNFLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFlBQWE7SUFDcEQsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsVUFBVSxHQUFHLElBQUlmLFVBQVUsQ0FBRU8sWUFBWSxDQUFDUyxNQUFNLEVBQUVQLGtCQUFrQixFQUFFO01BQzFFSSxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsWUFBYTtJQUNwRCxDQUFFLENBQUM7SUFFSCxNQUFNRyxZQUFZLEdBQUcsSUFBSWhCLFlBQVksQ0FBRU0sWUFBWSxDQUFDVyxRQUFRLEVBQUVULGtCQUFrQixFQUFFO01BQ2hGSSxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsY0FBZTtJQUN0RCxDQUFFLENBQUM7SUFFSCxNQUFNSyxpQkFBaUIsR0FBRyxJQUFJakIsd0JBQXdCLENBQUVLLFlBQVksQ0FBQ2Esd0JBQXdCLENBQUMsQ0FBQyxFQUFFO01BQy9GUCxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsbUJBQW9CO0lBQzNELENBQUUsQ0FBQztJQUVISCxPQUFPLENBQUNVLFFBQVEsR0FBRyxDQUFFVCxVQUFVLEVBQUVHLFVBQVUsRUFBRUUsWUFBWSxFQUFFRSxpQkFBaUIsQ0FBRTtJQUU5RSxLQUFLLENBQUVaLFlBQVksRUFBRUMsb0JBQW9CLEVBQUVHLE9BQVEsQ0FBQzs7SUFFcEQ7SUFDQSxNQUFNVyxpQkFBaUIsR0FBR2Isa0JBQWtCLENBQUNjLGlCQUFpQixDQUFFaEIsWUFBWSxDQUFDaUIsV0FBWSxDQUFDO0lBQzFGTCxpQkFBaUIsQ0FBQ00sY0FBYyxDQUFDQyxJQUFJLENBQUVDLE1BQU0sSUFBSTtNQUMvQ1IsaUJBQWlCLENBQUNTLFdBQVcsR0FBR04saUJBQWlCLENBQUNNLFdBQVcsQ0FBQ0MsS0FBSyxDQUFFMUIsY0FBYyxDQUFDMkIscUJBQXNCLENBQUM7SUFDN0csQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBakMsdUJBQXVCLENBQUNtQyxRQUFRLENBQUUsVUFBVSxFQUFFNUIsUUFBUyxDQUFDIn0=