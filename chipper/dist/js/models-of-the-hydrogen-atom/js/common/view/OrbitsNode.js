// Copyright 2022, University of Colorado Boulder

/**
 * OrbitsNode is the set of 2D orbits for a hydrogen atom's electron. It is used in the Bohr and de Broglie models.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node } from '../../../../scenery/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import BohrModel from '../model/BohrModel.js';
import OrbitNode from './OrbitNode.js';
import MOTHAConstants from '../MOTHAConstants.js';
export default class OrbitsNode extends Node {
  //TODO BohrModel is not quite the right type here
  constructor(hydrogenAtom, modelViewTransform, providedOptions) {
    const options = optionize()({
      center: modelViewTransform.modelToViewPosition(hydrogenAtom.position)
    }, providedOptions);
    const orbitNodes = [];
    const minState = MOTHAConstants.GROUND_STATE;
    const maxState = MOTHAConstants.GROUND_STATE + BohrModel.getNumberOfStates() - 1;
    for (let state = minState; state <= maxState; state++) {
      const radius = modelViewTransform.modelToViewDeltaX(hydrogenAtom.getElectronOrbitRadius(state));
      const orbitNode = new OrbitNode(radius);
      orbitNodes.push(orbitNode);
    }
    options.children = orbitNodes;
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('OrbitsNode', OrbitsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwib3B0aW9uaXplIiwibW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20iLCJCb2hyTW9kZWwiLCJPcmJpdE5vZGUiLCJNT1RIQUNvbnN0YW50cyIsIk9yYml0c05vZGUiLCJjb25zdHJ1Y3RvciIsImh5ZHJvZ2VuQXRvbSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjZW50ZXIiLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwicG9zaXRpb24iLCJvcmJpdE5vZGVzIiwibWluU3RhdGUiLCJHUk9VTkRfU1RBVEUiLCJtYXhTdGF0ZSIsImdldE51bWJlck9mU3RhdGVzIiwic3RhdGUiLCJyYWRpdXMiLCJtb2RlbFRvVmlld0RlbHRhWCIsImdldEVsZWN0cm9uT3JiaXRSYWRpdXMiLCJvcmJpdE5vZGUiLCJwdXNoIiwiY2hpbGRyZW4iLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPcmJpdHNOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBPcmJpdHNOb2RlIGlzIHRoZSBzZXQgb2YgMkQgb3JiaXRzIGZvciBhIGh5ZHJvZ2VuIGF0b20ncyBlbGVjdHJvbi4gSXQgaXMgdXNlZCBpbiB0aGUgQm9ociBhbmQgZGUgQnJvZ2xpZSBtb2RlbHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IEJvaHJNb2RlbCBmcm9tICcuLi9tb2RlbC9Cb2hyTW9kZWwuanMnO1xyXG5pbXBvcnQgT3JiaXROb2RlIGZyb20gJy4vT3JiaXROb2RlLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgTU9USEFDb25zdGFudHMgZnJvbSAnLi4vTU9USEFDb25zdGFudHMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIE9yYml0c05vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9yYml0c05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLy9UT0RPIEJvaHJNb2RlbCBpcyBub3QgcXVpdGUgdGhlIHJpZ2h0IHR5cGUgaGVyZVxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaHlkcm9nZW5BdG9tOiBCb2hyTW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMiwgcHJvdmlkZWRPcHRpb25zOiBPcmJpdHNOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE9yYml0c05vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgY2VudGVyOiBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggaHlkcm9nZW5BdG9tLnBvc2l0aW9uIClcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IG9yYml0Tm9kZXMgPSBbXTtcclxuICAgIGNvbnN0IG1pblN0YXRlID0gTU9USEFDb25zdGFudHMuR1JPVU5EX1NUQVRFO1xyXG4gICAgY29uc3QgbWF4U3RhdGUgPSBNT1RIQUNvbnN0YW50cy5HUk9VTkRfU1RBVEUgKyBCb2hyTW9kZWwuZ2V0TnVtYmVyT2ZTdGF0ZXMoKSAtIDE7XHJcbiAgICBmb3IgKCBsZXQgc3RhdGUgPSBtaW5TdGF0ZTsgc3RhdGUgPD0gbWF4U3RhdGU7IHN0YXRlKysgKSB7XHJcbiAgICAgIGNvbnN0IHJhZGl1cyA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggaHlkcm9nZW5BdG9tLmdldEVsZWN0cm9uT3JiaXRSYWRpdXMoIHN0YXRlICkgKTtcclxuICAgICAgY29uc3Qgb3JiaXROb2RlID0gbmV3IE9yYml0Tm9kZSggcmFkaXVzICk7XHJcbiAgICAgIG9yYml0Tm9kZXMucHVzaCggb3JiaXROb2RlICk7XHJcbiAgICB9XHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gb3JiaXROb2RlcztcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnT3JiaXRzTm9kZScsIE9yYml0c05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxRQUFxQixtQ0FBbUM7QUFDckUsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBQ3RFLE9BQU9DLFNBQVMsTUFBTSx1QkFBdUI7QUFDN0MsT0FBT0MsU0FBUyxNQUFNLGdCQUFnQjtBQUV0QyxPQUFPQyxjQUFjLE1BQU0sc0JBQXNCO0FBTWpELGVBQWUsTUFBTUMsVUFBVSxTQUFTTixJQUFJLENBQUM7RUFFM0M7RUFDT08sV0FBV0EsQ0FBRUMsWUFBdUIsRUFBRUMsa0JBQXVDLEVBQUVDLGVBQWtDLEVBQUc7SUFFekgsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQThDLENBQUMsQ0FBRTtNQUN4RVcsTUFBTSxFQUFFSCxrQkFBa0IsQ0FBQ0ksbUJBQW1CLENBQUVMLFlBQVksQ0FBQ00sUUFBUztJQUN4RSxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsTUFBTUssVUFBVSxHQUFHLEVBQUU7SUFDckIsTUFBTUMsUUFBUSxHQUFHWCxjQUFjLENBQUNZLFlBQVk7SUFDNUMsTUFBTUMsUUFBUSxHQUFHYixjQUFjLENBQUNZLFlBQVksR0FBR2QsU0FBUyxDQUFDZ0IsaUJBQWlCLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDaEYsS0FBTSxJQUFJQyxLQUFLLEdBQUdKLFFBQVEsRUFBRUksS0FBSyxJQUFJRixRQUFRLEVBQUVFLEtBQUssRUFBRSxFQUFHO01BQ3ZELE1BQU1DLE1BQU0sR0FBR1osa0JBQWtCLENBQUNhLGlCQUFpQixDQUFFZCxZQUFZLENBQUNlLHNCQUFzQixDQUFFSCxLQUFNLENBQUUsQ0FBQztNQUNuRyxNQUFNSSxTQUFTLEdBQUcsSUFBSXBCLFNBQVMsQ0FBRWlCLE1BQU8sQ0FBQztNQUN6Q04sVUFBVSxDQUFDVSxJQUFJLENBQUVELFNBQVUsQ0FBQztJQUM5QjtJQUNBYixPQUFPLENBQUNlLFFBQVEsR0FBR1gsVUFBVTtJQUU3QixLQUFLLENBQUVKLE9BQVEsQ0FBQztFQUNsQjtFQUVnQmdCLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBekIsdUJBQXVCLENBQUMyQixRQUFRLENBQUUsWUFBWSxFQUFFdkIsVUFBVyxDQUFDIn0=