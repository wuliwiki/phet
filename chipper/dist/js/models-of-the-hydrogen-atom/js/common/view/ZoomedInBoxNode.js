// Copyright 2015-2022, University of Colorado Boulder

/**
 * ZoomedInBoxNode is a base class that provides the zoomed-in view of part of the box of hydrogen.
 * This is the box in which animation of atoms and photons takes place.
 * Subclasses are expected to add views of specific hydrogen-atoms.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import MOTHAColors from '../MOTHAColors.js';
export default class ZoomedInBoxNode extends Node {
  // Subclasses should add things that are "inside" the box to this Node.

  constructor(zoomBox, modelViewTransform, providedOptions) {
    const options = optionize()({
      //TODO default values for options
    }, providedOptions);
    const backgroundNode = new Rectangle(modelViewTransform.modelToViewBounds(zoomBox), {
      fill: MOTHAColors.zoomedInBoxFillProperty
    });
    const outlineNode = new Rectangle(modelViewTransform.modelToViewBounds(zoomBox), {
      stroke: MOTHAColors.zoomedInBoxStrokeProperty,
      lineWidth: 3
    });
    const contentsNode = new Node({
      // Clip contents to the bounds of the box.
      clipArea: modelViewTransform.modelToViewShape(Shape.rectangle(zoomBox.minX, zoomBox.minY, zoomBox.width, zoomBox.height))
    });
    options.children = [backgroundNode, contentsNode, outlineNode];
    super(options);
    this.contentsNode = contentsNode;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('ZoomedInBoxNode', ZoomedInBoxNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIk5vZGUiLCJSZWN0YW5nbGUiLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIk1PVEhBQ29sb3JzIiwiWm9vbWVkSW5Cb3hOb2RlIiwiY29uc3RydWN0b3IiLCJ6b29tQm94IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImJhY2tncm91bmROb2RlIiwibW9kZWxUb1ZpZXdCb3VuZHMiLCJmaWxsIiwiem9vbWVkSW5Cb3hGaWxsUHJvcGVydHkiLCJvdXRsaW5lTm9kZSIsInN0cm9rZSIsInpvb21lZEluQm94U3Ryb2tlUHJvcGVydHkiLCJsaW5lV2lkdGgiLCJjb250ZW50c05vZGUiLCJjbGlwQXJlYSIsIm1vZGVsVG9WaWV3U2hhcGUiLCJyZWN0YW5nbGUiLCJtaW5YIiwibWluWSIsIndpZHRoIiwiaGVpZ2h0IiwiY2hpbGRyZW4iLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJab29tZWRJbkJveE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogWm9vbWVkSW5Cb3hOb2RlIGlzIGEgYmFzZSBjbGFzcyB0aGF0IHByb3ZpZGVzIHRoZSB6b29tZWQtaW4gdmlldyBvZiBwYXJ0IG9mIHRoZSBib3ggb2YgaHlkcm9nZW4uXHJcbiAqIFRoaXMgaXMgdGhlIGJveCBpbiB3aGljaCBhbmltYXRpb24gb2YgYXRvbXMgYW5kIHBob3RvbnMgdGFrZXMgcGxhY2UuXHJcbiAqIFN1YmNsYXNzZXMgYXJlIGV4cGVjdGVkIHRvIGFkZCB2aWV3cyBvZiBzcGVjaWZpYyBoeWRyb2dlbi1hdG9tcy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBOb2RlVHJhbnNsYXRpb25PcHRpb25zLCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20gZnJvbSAnLi4vLi4vbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20uanMnO1xyXG5pbXBvcnQgWm9vbWVkSW5Cb3ggZnJvbSAnLi4vbW9kZWwvWm9vbWVkSW5Cb3guanMnO1xyXG5pbXBvcnQgTU9USEFDb2xvcnMgZnJvbSAnLi4vTU9USEFDb2xvcnMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBab29tZWRJbkJveE5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBab29tZWRJbkJveE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLy8gU3ViY2xhc3NlcyBzaG91bGQgYWRkIHRoaW5ncyB0aGF0IGFyZSBcImluc2lkZVwiIHRoZSBib3ggdG8gdGhpcyBOb2RlLlxyXG4gIHByb3RlY3RlZCByZWFkb25seSBjb250ZW50c05vZGU6IE5vZGU7XHJcblxyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvciggem9vbUJveDogWm9vbWVkSW5Cb3gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IFpvb21lZEluQm94Tm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxab29tZWRJbkJveE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgLy9UT0RPIGRlZmF1bHQgdmFsdWVzIGZvciBvcHRpb25zXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kTm9kZSA9IG5ldyBSZWN0YW5nbGUoIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0JvdW5kcyggem9vbUJveCApLCB7XHJcbiAgICAgIGZpbGw6IE1PVEhBQ29sb3JzLnpvb21lZEluQm94RmlsbFByb3BlcnR5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgb3V0bGluZU5vZGUgPSBuZXcgUmVjdGFuZ2xlKCBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdCb3VuZHMoIHpvb21Cb3ggKSwge1xyXG4gICAgICBzdHJva2U6IE1PVEhBQ29sb3JzLnpvb21lZEluQm94U3Ryb2tlUHJvcGVydHksXHJcbiAgICAgIGxpbmVXaWR0aDogM1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnRzTm9kZSA9IG5ldyBOb2RlKCB7XHJcblxyXG4gICAgICAvLyBDbGlwIGNvbnRlbnRzIHRvIHRoZSBib3VuZHMgb2YgdGhlIGJveC5cclxuICAgICAgY2xpcEFyZWE6IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1NoYXBlKCBTaGFwZS5yZWN0YW5nbGUoIHpvb21Cb3gubWluWCwgem9vbUJveC5taW5ZLCB6b29tQm94LndpZHRoLCB6b29tQm94LmhlaWdodCApIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBiYWNrZ3JvdW5kTm9kZSwgY29udGVudHNOb2RlLCBvdXRsaW5lTm9kZSBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5jb250ZW50c05vZGUgPSBjb250ZW50c05vZGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdab29tZWRJbkJveE5vZGUnLCBab29tZWRJbkJveE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFHbkYsU0FBU0MsSUFBSSxFQUF1Q0MsU0FBUyxRQUFRLG1DQUFtQztBQUN4RyxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFFdEUsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQU0zQyxlQUFlLE1BQU1DLGVBQWUsU0FBU0osSUFBSSxDQUFDO0VBRWhEOztFQUdVSyxXQUFXQSxDQUFFQyxPQUFvQixFQUNwQkMsa0JBQXVDLEVBQ3ZDQyxlQUF1QyxFQUFHO0lBRS9ELE1BQU1DLE9BQU8sR0FBR1YsU0FBUyxDQUFtRCxDQUFDLENBQUU7TUFDN0U7SUFBQSxDQUNELEVBQUVTLGVBQWdCLENBQUM7SUFFcEIsTUFBTUUsY0FBYyxHQUFHLElBQUlULFNBQVMsQ0FBRU0sa0JBQWtCLENBQUNJLGlCQUFpQixDQUFFTCxPQUFRLENBQUMsRUFBRTtNQUNyRk0sSUFBSSxFQUFFVCxXQUFXLENBQUNVO0lBQ3BCLENBQUUsQ0FBQztJQUVILE1BQU1DLFdBQVcsR0FBRyxJQUFJYixTQUFTLENBQUVNLGtCQUFrQixDQUFDSSxpQkFBaUIsQ0FBRUwsT0FBUSxDQUFDLEVBQUU7TUFDbEZTLE1BQU0sRUFBRVosV0FBVyxDQUFDYSx5QkFBeUI7TUFDN0NDLFNBQVMsRUFBRTtJQUNiLENBQUUsQ0FBQztJQUVILE1BQU1DLFlBQVksR0FBRyxJQUFJbEIsSUFBSSxDQUFFO01BRTdCO01BQ0FtQixRQUFRLEVBQUVaLGtCQUFrQixDQUFDYSxnQkFBZ0IsQ0FBRXRCLEtBQUssQ0FBQ3VCLFNBQVMsQ0FBRWYsT0FBTyxDQUFDZ0IsSUFBSSxFQUFFaEIsT0FBTyxDQUFDaUIsSUFBSSxFQUFFakIsT0FBTyxDQUFDa0IsS0FBSyxFQUFFbEIsT0FBTyxDQUFDbUIsTUFBTyxDQUFFO0lBQzlILENBQUUsQ0FBQztJQUVIaEIsT0FBTyxDQUFDaUIsUUFBUSxHQUFHLENBQUVoQixjQUFjLEVBQUVRLFlBQVksRUFBRUosV0FBVyxDQUFFO0lBRWhFLEtBQUssQ0FBRUwsT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ1MsWUFBWSxHQUFHQSxZQUFZO0VBQ2xDO0VBRWdCUyxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXpCLHVCQUF1QixDQUFDMkIsUUFBUSxDQUFFLGlCQUFpQixFQUFFekIsZUFBZ0IsQ0FBQyJ9