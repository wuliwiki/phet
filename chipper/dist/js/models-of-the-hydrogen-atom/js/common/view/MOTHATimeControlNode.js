// Copyright 2016-2022, University of Colorado Boulder

/**
 * TimeControls provides the controls for simulation time.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import TimeControlNode from '../../../../scenery-phet/js/TimeControlNode.js';
import TimeSpeed from '../../../../scenery-phet/js/TimeSpeed.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import MOTHAColors from '../MOTHAColors.js';
export default class MOTHATimeControlNode extends TimeControlNode {
  constructor(isPlayingProperty, timeSpeedProperty, stepOnce, providedOptions) {
    const options = optionize()({
      timeSpeedProperty: timeSpeedProperty,
      timeSpeeds: [TimeSpeed.FAST, TimeSpeed.NORMAL],
      speedRadioButtonGroupOptions: {
        labelOptions: {
          font: new PhetFont(14),
          fill: MOTHAColors.timeControlRadioButtonFillProperty
        }
      },
      playPauseStepButtonOptions: {
        playPauseButtonOptions: {
          //TODO https://github.com/phetsims/scenery-phet/issues/682 workaround, we do not want partial hotkey support for TimeControlNode
          includeGlobalHotkey: false
        },
        stepForwardButtonOptions: {
          listener: () => stepOnce()
        }
      }
    }, providedOptions);
    super(isPlayingProperty, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('MOTHATimeControlNode', MOTHATimeControlNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0Rm9udCIsIlRpbWVDb250cm9sTm9kZSIsIlRpbWVTcGVlZCIsIm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIiwiTU9USEFDb2xvcnMiLCJNT1RIQVRpbWVDb250cm9sTm9kZSIsImNvbnN0cnVjdG9yIiwiaXNQbGF5aW5nUHJvcGVydHkiLCJ0aW1lU3BlZWRQcm9wZXJ0eSIsInN0ZXBPbmNlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInRpbWVTcGVlZHMiLCJGQVNUIiwiTk9STUFMIiwic3BlZWRSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucyIsImxhYmVsT3B0aW9ucyIsImZvbnQiLCJmaWxsIiwidGltZUNvbnRyb2xSYWRpb0J1dHRvbkZpbGxQcm9wZXJ0eSIsInBsYXlQYXVzZVN0ZXBCdXR0b25PcHRpb25zIiwicGxheVBhdXNlQnV0dG9uT3B0aW9ucyIsImluY2x1ZGVHbG9iYWxIb3RrZXkiLCJzdGVwRm9yd2FyZEJ1dHRvbk9wdGlvbnMiLCJsaXN0ZW5lciIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1PVEhBVGltZUNvbnRyb2xOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRpbWVDb250cm9scyBwcm92aWRlcyB0aGUgY29udHJvbHMgZm9yIHNpbXVsYXRpb24gdGltZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBUaW1lQ29udHJvbE5vZGUsIHsgVGltZUNvbnRyb2xOb2RlT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9UaW1lQ29udHJvbE5vZGUuanMnO1xyXG5pbXBvcnQgVGltZVNwZWVkIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9UaW1lU3BlZWQuanMnO1xyXG5pbXBvcnQgbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20gZnJvbSAnLi4vLi4vbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20uanMnO1xyXG5pbXBvcnQgTU9USEFDb2xvcnMgZnJvbSAnLi4vTU9USEFDb2xvcnMuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIE1PVEhBVGltZUNvbnRyb2xOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxUaW1lQ29udHJvbE5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNT1RIQVRpbWVDb250cm9sTm9kZSBleHRlbmRzIFRpbWVDb250cm9sTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaXNQbGF5aW5nUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGltZVNwZWVkUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8VGltZVNwZWVkPixcclxuICAgICAgICAgICAgICAgICAgICAgIHN0ZXBPbmNlOiAoKSA9PiB2b2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBNT1RIQVRpbWVDb250cm9sTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxNT1RIQVRpbWVDb250cm9sTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBUaW1lQ29udHJvbE5vZGVPcHRpb25zPigpKCB7XHJcbiAgICAgIHRpbWVTcGVlZFByb3BlcnR5OiB0aW1lU3BlZWRQcm9wZXJ0eSxcclxuICAgICAgdGltZVNwZWVkczogWyBUaW1lU3BlZWQuRkFTVCwgVGltZVNwZWVkLk5PUk1BTCBdLFxyXG4gICAgICBzcGVlZFJhZGlvQnV0dG9uR3JvdXBPcHRpb25zOiB7XHJcbiAgICAgICAgbGFiZWxPcHRpb25zOiB7XHJcbiAgICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE0ICksXHJcbiAgICAgICAgICBmaWxsOiBNT1RIQUNvbG9ycy50aW1lQ29udHJvbFJhZGlvQnV0dG9uRmlsbFByb3BlcnR5XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBwbGF5UGF1c2VTdGVwQnV0dG9uT3B0aW9uczoge1xyXG4gICAgICAgIHBsYXlQYXVzZUJ1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICAgIC8vVE9ETyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc2NlbmVyeS1waGV0L2lzc3Vlcy82ODIgd29ya2Fyb3VuZCwgd2UgZG8gbm90IHdhbnQgcGFydGlhbCBob3RrZXkgc3VwcG9ydCBmb3IgVGltZUNvbnRyb2xOb2RlXHJcbiAgICAgICAgICBpbmNsdWRlR2xvYmFsSG90a2V5OiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3RlcEZvcndhcmRCdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgICBsaXN0ZW5lcjogKCkgPT4gc3RlcE9uY2UoKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGlzUGxheWluZ1Byb3BlcnR5LCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdNT1RIQVRpbWVDb250cm9sTm9kZScsIE1PVEhBVGltZUNvbnRyb2xOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsZUFBZSxNQUFrQyxnREFBZ0Q7QUFDeEcsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQVMzQyxlQUFlLE1BQU1DLG9CQUFvQixTQUFTSixlQUFlLENBQUM7RUFFekRLLFdBQVdBLENBQUVDLGlCQUFvQyxFQUNwQ0MsaUJBQWlELEVBQ2pEQyxRQUFvQixFQUNwQkMsZUFBNEMsRUFBRztJQUVqRSxNQUFNQyxPQUFPLEdBQUdaLFNBQVMsQ0FBbUUsQ0FBQyxDQUFFO01BQzdGUyxpQkFBaUIsRUFBRUEsaUJBQWlCO01BQ3BDSSxVQUFVLEVBQUUsQ0FBRVYsU0FBUyxDQUFDVyxJQUFJLEVBQUVYLFNBQVMsQ0FBQ1ksTUFBTSxDQUFFO01BQ2hEQyw0QkFBNEIsRUFBRTtRQUM1QkMsWUFBWSxFQUFFO1VBQ1pDLElBQUksRUFBRSxJQUFJakIsUUFBUSxDQUFFLEVBQUcsQ0FBQztVQUN4QmtCLElBQUksRUFBRWQsV0FBVyxDQUFDZTtRQUNwQjtNQUNGLENBQUM7TUFDREMsMEJBQTBCLEVBQUU7UUFDMUJDLHNCQUFzQixFQUFFO1VBQ3RCO1VBQ0FDLG1CQUFtQixFQUFFO1FBQ3ZCLENBQUM7UUFDREMsd0JBQXdCLEVBQUU7VUFDeEJDLFFBQVEsRUFBRUEsQ0FBQSxLQUFNZixRQUFRLENBQUM7UUFDM0I7TUFDRjtJQUNGLENBQUMsRUFBRUMsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVILGlCQUFpQixFQUFFSSxPQUFRLENBQUM7RUFDckM7RUFFZ0JjLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdEIsdUJBQXVCLENBQUN3QixRQUFRLENBQUUsc0JBQXNCLEVBQUV0QixvQkFBcUIsQ0FBQyJ9