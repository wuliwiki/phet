// Copyright 2015-2022, University of Colorado Boulder

//TODO duplication with ElectronNode
/**
 * NeutronNode is the visual representation of a neutron.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import ShadedSphereNode from '../../../../scenery-phet/js/ShadedSphereNode.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import Neutron from '../model/Neutron.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import MOTHAColors from '../MOTHAColors.js';
export default class NeutronNode extends ShadedSphereNode {
  constructor(neutron, modelViewTransform, providedOptions) {
    const options = optionize()({
      // ShadedSphereNodeOptions
      mainColor: MOTHAColors.neutronBaseColorProperty,
      highlightColor: MOTHAColors.neutronHighlightColorProperty
    }, providedOptions);
    super(2 * modelViewTransform.modelToViewDeltaX(neutron.radius), options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Creates a neutron icon, used in the Key.
   */
  static createIcon(scale = 1) {
    const neutron = new Neutron({
      tandem: Tandem.OPT_OUT
    });
    const modelViewTransform = ModelViewTransform2.createIdentity();
    return new NeutronNode(neutron, modelViewTransform, {
      scale: scale
    });
  }
}
modelsOfTheHydrogenAtom.register('NeutronNode', NeutronNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiU2hhZGVkU3BoZXJlTm9kZSIsIm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIiwiTmV1dHJvbiIsIlRhbmRlbSIsIk1PVEhBQ29sb3JzIiwiTmV1dHJvbk5vZGUiLCJjb25zdHJ1Y3RvciIsIm5ldXRyb24iLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibWFpbkNvbG9yIiwibmV1dHJvbkJhc2VDb2xvclByb3BlcnR5IiwiaGlnaGxpZ2h0Q29sb3IiLCJuZXV0cm9uSGlnaGxpZ2h0Q29sb3JQcm9wZXJ0eSIsIm1vZGVsVG9WaWV3RGVsdGFYIiwicmFkaXVzIiwiZGlzcG9zZSIsImFzc2VydCIsImNyZWF0ZUljb24iLCJzY2FsZSIsInRhbmRlbSIsIk9QVF9PVVQiLCJjcmVhdGVJZGVudGl0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTmV1dHJvbk5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vL1RPRE8gZHVwbGljYXRpb24gd2l0aCBFbGVjdHJvbk5vZGVcclxuLyoqXHJcbiAqIE5ldXRyb25Ob2RlIGlzIHRoZSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb2YgYSBuZXV0cm9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IFNoYWRlZFNwaGVyZU5vZGUsIHsgU2hhZGVkU3BoZXJlTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvU2hhZGVkU3BoZXJlTm9kZS5qcyc7XHJcbmltcG9ydCBtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSBmcm9tICcuLi8uLi9tb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbS5qcyc7XHJcbmltcG9ydCBOZXV0cm9uIGZyb20gJy4uL21vZGVsL05ldXRyb24uanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IE1PVEhBQ29sb3JzIGZyb20gJy4uL01PVEhBQ29sb3JzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBOZXV0cm9uTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8U2hhZGVkU3BoZXJlTm9kZU9wdGlvbnMsICdtYWluQ29sb3InIHwgJ2hpZ2hsaWdodENvbG9yJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXV0cm9uTm9kZSBleHRlbmRzIFNoYWRlZFNwaGVyZU5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG5ldXRyb246IE5ldXRyb24sIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMiwgcHJvdmlkZWRPcHRpb25zPzogTmV1dHJvbk5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TmV1dHJvbk5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgU2hhZGVkU3BoZXJlTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNoYWRlZFNwaGVyZU5vZGVPcHRpb25zXHJcbiAgICAgIG1haW5Db2xvcjogTU9USEFDb2xvcnMubmV1dHJvbkJhc2VDb2xvclByb3BlcnR5LFxyXG4gICAgICBoaWdobGlnaHRDb2xvcjogTU9USEFDb2xvcnMubmV1dHJvbkhpZ2hsaWdodENvbG9yUHJvcGVydHlcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCAyICogbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBuZXV0cm9uLnJhZGl1cyApLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldXRyb24gaWNvbiwgdXNlZCBpbiB0aGUgS2V5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlSWNvbiggc2NhbGUgPSAxICk6IE5vZGUge1xyXG4gICAgY29uc3QgbmV1dHJvbiA9IG5ldyBOZXV0cm9uKCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IG1vZGVsVmlld1RyYW5zZm9ybSA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlSWRlbnRpdHkoKTtcclxuICAgIHJldHVybiBuZXcgTmV1dHJvbk5vZGUoIG5ldXRyb24sIG1vZGVsVmlld1RyYW5zZm9ybSwge1xyXG4gICAgICBzY2FsZTogc2NhbGVcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnTmV1dHJvbk5vZGUnLCBOZXV0cm9uTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLE9BQU9DLG1CQUFtQixNQUFNLHVEQUF1RDtBQUN2RixPQUFPQyxnQkFBZ0IsTUFBbUMsaURBQWlEO0FBQzNHLE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyxPQUFPLE1BQU0scUJBQXFCO0FBRXpDLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQU0zQyxlQUFlLE1BQU1DLFdBQVcsU0FBU0wsZ0JBQWdCLENBQUM7RUFFakRNLFdBQVdBLENBQUVDLE9BQWdCLEVBQUVDLGtCQUF1QyxFQUFFQyxlQUFvQyxFQUFHO0lBRXBILE1BQU1DLE9BQU8sR0FBR1osU0FBUyxDQUEyRCxDQUFDLENBQUU7TUFFckY7TUFDQWEsU0FBUyxFQUFFUCxXQUFXLENBQUNRLHdCQUF3QjtNQUMvQ0MsY0FBYyxFQUFFVCxXQUFXLENBQUNVO0lBQzlCLENBQUMsRUFBRUwsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUUsQ0FBQyxHQUFHRCxrQkFBa0IsQ0FBQ08saUJBQWlCLENBQUVSLE9BQU8sQ0FBQ1MsTUFBTyxDQUFDLEVBQUVOLE9BQVEsQ0FBQztFQUM5RTtFQUVnQk8sT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjRSxVQUFVQSxDQUFFQyxLQUFLLEdBQUcsQ0FBQyxFQUFTO0lBQzFDLE1BQU1iLE9BQU8sR0FBRyxJQUFJTCxPQUFPLENBQUU7TUFDM0JtQixNQUFNLEVBQUVsQixNQUFNLENBQUNtQjtJQUNqQixDQUFFLENBQUM7SUFDSCxNQUFNZCxrQkFBa0IsR0FBR1QsbUJBQW1CLENBQUN3QixjQUFjLENBQUMsQ0FBQztJQUMvRCxPQUFPLElBQUlsQixXQUFXLENBQUVFLE9BQU8sRUFBRUMsa0JBQWtCLEVBQUU7TUFDbkRZLEtBQUssRUFBRUE7SUFDVCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFuQix1QkFBdUIsQ0FBQ3VCLFFBQVEsQ0FBRSxhQUFhLEVBQUVuQixXQUFZLENBQUMifQ==