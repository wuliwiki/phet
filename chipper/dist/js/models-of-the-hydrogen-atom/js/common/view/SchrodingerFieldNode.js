// Copyright 2022, University of Colorado Boulder

/**
 * TODO
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import { CanvasNode, Color, Node } from '../../../../scenery/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import MOTHAColors from '../MOTHAColors.js';
import Multilink from '../../../../axon/js/Multilink.js';
import SchrodingerBrightness from './SchrodingerBrightness.js';
//TODO this was SchrodingerNode.AtomNode is Java
export default class SchrodingerFieldNode extends Node {
  constructor(hydrogenAtom, modelViewTransform, providedOptions) {
    const options = optionize()({
      //TODO
    }, providedOptions);
    const zoomedInBoxBounds = modelViewTransform.modelToViewBounds(hydrogenAtom.zoomedInBox);
    const upperLeftQuadrantNode = new QuadrantNode(zoomedInBoxBounds.width / 2, zoomedInBoxBounds.height / 2);
    //TODO wrap upperLeftQuadrantNode in 4 other Nodes, transformed for each quadrant

    options.children = [upperLeftQuadrantNode];
    super(options);
    this.upperLeftQuadrantNode = upperLeftQuadrantNode;
    this.brightnessCache = new SchrodingerBrightness(hydrogenAtom, zoomedInBoxBounds);
    Multilink.multilink([hydrogenAtom.getElectronStateProperty(), hydrogenAtom.secondaryElectronStateProperty, hydrogenAtom.tertiaryElectronStateProperty], (n, l, m) => this.update(n, l, m));
  }
  update(n, l, m) {
    const brightness = this.brightnessCache.getBrightness(n, l, Math.abs(m));
    this.upperLeftQuadrantNode.setBrightness(brightness);
  }
}

//TODO this was SchrodingerNode.GridNode is Java, one quadrant of the field
/**
 * QuadrantNode renders one quadrant of the 2D Schrodinger field.
 */
class QuadrantNode extends CanvasNode {
  static PERCENT_CELL_OVERLAP = 0.1; // 1.0 = 100%

  // brightness values, [row][column]

  constructor(quadrantWidth, quadrantHeight) {
    super({
      pickable: false
    });
    this.quadrantWidth = quadrantWidth;
    this.quadrantHeight = quadrantHeight;
    this.brightness = [];
    this.cellWidth = 0;
    this.cellHeight = 0;

    // If the colors that we use to render the Canvas change, trigger a call to paintCanvas.
    Multilink.lazyMultilink([MOTHAColors.zoomedInBoxFillProperty, MOTHAColors.electronBaseColorProperty], () => this.invalidatePaint());
  }

  /**
   * Sets the brightness values that are applied to the cells in the grid.
   * The dimensions of the brightness array determine the number of cells.
   */
  setBrightness(brightness) {
    this.brightness = brightness;
    this.cellWidth = this.quadrantWidth / brightness[0].length;
    this.cellHeight = this.quadrantHeight / brightness.length;
    this.invalidatePaint(); // results in a call to paintCanvas
  }

  //TODO Should this be protected in CanvasNode?
  paintCanvas(context) {
    let x;
    let z;
    const w = (1 + QuadrantNode.PERCENT_CELL_OVERLAP) * this.cellWidth;
    const h = (1 + QuadrantNode.PERCENT_CELL_OVERLAP) * this.cellHeight;
    const numberOfRows = this.brightness.length;
    const minColor = MOTHAColors.zoomedInBoxFillProperty.value;
    const maxColor = MOTHAColors.electronBaseColorProperty.value;
    for (let row = 0; row < numberOfRows; row++) {
      const numberOfColumns = this.brightness[row].length;
      for (let column = 0; column < numberOfColumns; column++) {
        const color = Color.interpolateRGBA(minColor, maxColor, this.brightness[row][column]);
        context.fillStyle = color.toCSS();
        x = column * this.cellWidth;
        z = row * this.cellHeight;
        context.rect(x, z, w, h);
        context.fill();
      }
    }
  }
}
modelsOfTheHydrogenAtom.register('SchrodingerFieldNode', SchrodingerFieldNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIkNhbnZhc05vZGUiLCJDb2xvciIsIk5vZGUiLCJvcHRpb25pemUiLCJNT1RIQUNvbG9ycyIsIk11bHRpbGluayIsIlNjaHJvZGluZ2VyQnJpZ2h0bmVzcyIsIlNjaHJvZGluZ2VyRmllbGROb2RlIiwiY29uc3RydWN0b3IiLCJoeWRyb2dlbkF0b20iLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiem9vbWVkSW5Cb3hCb3VuZHMiLCJtb2RlbFRvVmlld0JvdW5kcyIsInpvb21lZEluQm94IiwidXBwZXJMZWZ0UXVhZHJhbnROb2RlIiwiUXVhZHJhbnROb2RlIiwid2lkdGgiLCJoZWlnaHQiLCJjaGlsZHJlbiIsImJyaWdodG5lc3NDYWNoZSIsIm11bHRpbGluayIsImdldEVsZWN0cm9uU3RhdGVQcm9wZXJ0eSIsInNlY29uZGFyeUVsZWN0cm9uU3RhdGVQcm9wZXJ0eSIsInRlcnRpYXJ5RWxlY3Ryb25TdGF0ZVByb3BlcnR5IiwibiIsImwiLCJtIiwidXBkYXRlIiwiYnJpZ2h0bmVzcyIsImdldEJyaWdodG5lc3MiLCJNYXRoIiwiYWJzIiwic2V0QnJpZ2h0bmVzcyIsIlBFUkNFTlRfQ0VMTF9PVkVSTEFQIiwicXVhZHJhbnRXaWR0aCIsInF1YWRyYW50SGVpZ2h0IiwicGlja2FibGUiLCJjZWxsV2lkdGgiLCJjZWxsSGVpZ2h0IiwibGF6eU11bHRpbGluayIsInpvb21lZEluQm94RmlsbFByb3BlcnR5IiwiZWxlY3Ryb25CYXNlQ29sb3JQcm9wZXJ0eSIsImludmFsaWRhdGVQYWludCIsImxlbmd0aCIsInBhaW50Q2FudmFzIiwiY29udGV4dCIsIngiLCJ6IiwidyIsImgiLCJudW1iZXJPZlJvd3MiLCJtaW5Db2xvciIsInZhbHVlIiwibWF4Q29sb3IiLCJyb3ciLCJudW1iZXJPZkNvbHVtbnMiLCJjb2x1bW4iLCJjb2xvciIsImludGVycG9sYXRlUkdCQSIsImZpbGxTdHlsZSIsInRvQ1NTIiwicmVjdCIsImZpbGwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNjaHJvZGluZ2VyRmllbGROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUT0RPXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IHsgQ2FudmFzTm9kZSwgQ29sb3IsIE5vZGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTY2hyb2Rpbmdlck1vZGVsIGZyb20gJy4uL21vZGVsL1NjaHJvZGluZ2VyTW9kZWwuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBNT1RIQUNvbG9ycyBmcm9tICcuLi9NT1RIQUNvbG9ycy5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgU2Nocm9kaW5nZXJCcmlnaHRuZXNzIGZyb20gJy4vU2Nocm9kaW5nZXJCcmlnaHRuZXNzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBTY2hyb2RpbmdlckZpZWxkTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxOb2RlT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuLy9UT0RPIHRoaXMgd2FzIFNjaHJvZGluZ2VyTm9kZS5BdG9tTm9kZSBpcyBKYXZhXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjaHJvZGluZ2VyRmllbGROb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgdXBwZXJMZWZ0UXVhZHJhbnROb2RlOiBRdWFkcmFudE5vZGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBicmlnaHRuZXNzQ2FjaGU6IFNjaHJvZGluZ2VyQnJpZ2h0bmVzcztcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBoeWRyb2dlbkF0b206IFNjaHJvZGluZ2VyTW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogU2Nocm9kaW5nZXJGaWVsZE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U2Nocm9kaW5nZXJGaWVsZE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgLy9UT0RPXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB6b29tZWRJbkJveEJvdW5kcyA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0JvdW5kcyggaHlkcm9nZW5BdG9tLnpvb21lZEluQm94ICk7XHJcblxyXG4gICAgY29uc3QgdXBwZXJMZWZ0UXVhZHJhbnROb2RlID0gbmV3IFF1YWRyYW50Tm9kZSggem9vbWVkSW5Cb3hCb3VuZHMud2lkdGggLyAyLCB6b29tZWRJbkJveEJvdW5kcy5oZWlnaHQgLyAyICk7XHJcbiAgICAvL1RPRE8gd3JhcCB1cHBlckxlZnRRdWFkcmFudE5vZGUgaW4gNCBvdGhlciBOb2RlcywgdHJhbnNmb3JtZWQgZm9yIGVhY2ggcXVhZHJhbnRcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyB1cHBlckxlZnRRdWFkcmFudE5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMudXBwZXJMZWZ0UXVhZHJhbnROb2RlID0gdXBwZXJMZWZ0UXVhZHJhbnROb2RlO1xyXG4gICAgdGhpcy5icmlnaHRuZXNzQ2FjaGUgPSBuZXcgU2Nocm9kaW5nZXJCcmlnaHRuZXNzKCBoeWRyb2dlbkF0b20sIHpvb21lZEluQm94Qm91bmRzICk7XHJcblxyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggWyBoeWRyb2dlbkF0b20uZ2V0RWxlY3Ryb25TdGF0ZVByb3BlcnR5KCksIGh5ZHJvZ2VuQXRvbS5zZWNvbmRhcnlFbGVjdHJvblN0YXRlUHJvcGVydHksIGh5ZHJvZ2VuQXRvbS50ZXJ0aWFyeUVsZWN0cm9uU3RhdGVQcm9wZXJ0eSBdLFxyXG4gICAgICAoIG4sIGwsIG0gKSA9PiB0aGlzLnVwZGF0ZSggbiwgbCwgbSApICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZSggbjogbnVtYmVyLCBsOiBudW1iZXIsIG06IG51bWJlciApOiB2b2lkIHtcclxuICAgIGNvbnN0IGJyaWdodG5lc3MgPSB0aGlzLmJyaWdodG5lc3NDYWNoZS5nZXRCcmlnaHRuZXNzKCBuLCBsLCBNYXRoLmFicyggbSApICk7XHJcbiAgICB0aGlzLnVwcGVyTGVmdFF1YWRyYW50Tm9kZS5zZXRCcmlnaHRuZXNzKCBicmlnaHRuZXNzICk7XHJcbiAgfVxyXG59XHJcblxyXG4vL1RPRE8gdGhpcyB3YXMgU2Nocm9kaW5nZXJOb2RlLkdyaWROb2RlIGlzIEphdmEsIG9uZSBxdWFkcmFudCBvZiB0aGUgZmllbGRcclxuLyoqXHJcbiAqIFF1YWRyYW50Tm9kZSByZW5kZXJzIG9uZSBxdWFkcmFudCBvZiB0aGUgMkQgU2Nocm9kaW5nZXIgZmllbGQuXHJcbiAqL1xyXG5jbGFzcyBRdWFkcmFudE5vZGUgZXh0ZW5kcyBDYW52YXNOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUEVSQ0VOVF9DRUxMX09WRVJMQVAgPSAwLjE7IC8vIDEuMCA9IDEwMCVcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBxdWFkcmFudFdpZHRoOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBxdWFkcmFudEhlaWdodDogbnVtYmVyO1xyXG4gIHByaXZhdGUgYnJpZ2h0bmVzczogbnVtYmVyW11bXTsgLy8gYnJpZ2h0bmVzcyB2YWx1ZXMsIFtyb3ddW2NvbHVtbl1cclxuICBwcml2YXRlIGNlbGxXaWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgY2VsbEhlaWdodDogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHF1YWRyYW50V2lkdGg6IG51bWJlciwgcXVhZHJhbnRIZWlnaHQ6IG51bWJlciApIHtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBwaWNrYWJsZTogZmFsc2VcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnF1YWRyYW50V2lkdGggPSBxdWFkcmFudFdpZHRoO1xyXG4gICAgdGhpcy5xdWFkcmFudEhlaWdodCA9IHF1YWRyYW50SGVpZ2h0O1xyXG4gICAgdGhpcy5icmlnaHRuZXNzID0gW107XHJcbiAgICB0aGlzLmNlbGxXaWR0aCA9IDA7XHJcbiAgICB0aGlzLmNlbGxIZWlnaHQgPSAwO1xyXG5cclxuICAgIC8vIElmIHRoZSBjb2xvcnMgdGhhdCB3ZSB1c2UgdG8gcmVuZGVyIHRoZSBDYW52YXMgY2hhbmdlLCB0cmlnZ2VyIGEgY2FsbCB0byBwYWludENhbnZhcy5cclxuICAgIE11bHRpbGluay5sYXp5TXVsdGlsaW5rKCBbIE1PVEhBQ29sb3JzLnpvb21lZEluQm94RmlsbFByb3BlcnR5LCBNT1RIQUNvbG9ycy5lbGVjdHJvbkJhc2VDb2xvclByb3BlcnR5IF0sXHJcbiAgICAgICgpID0+IHRoaXMuaW52YWxpZGF0ZVBhaW50KCkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGJyaWdodG5lc3MgdmFsdWVzIHRoYXQgYXJlIGFwcGxpZWQgdG8gdGhlIGNlbGxzIGluIHRoZSBncmlkLlxyXG4gICAqIFRoZSBkaW1lbnNpb25zIG9mIHRoZSBicmlnaHRuZXNzIGFycmF5IGRldGVybWluZSB0aGUgbnVtYmVyIG9mIGNlbGxzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRCcmlnaHRuZXNzKCBicmlnaHRuZXNzOiBudW1iZXJbXVtdICk6IHZvaWQge1xyXG4gICAgdGhpcy5icmlnaHRuZXNzID0gYnJpZ2h0bmVzcztcclxuICAgIHRoaXMuY2VsbFdpZHRoID0gdGhpcy5xdWFkcmFudFdpZHRoIC8gYnJpZ2h0bmVzc1sgMCBdLmxlbmd0aDtcclxuICAgIHRoaXMuY2VsbEhlaWdodCA9IHRoaXMucXVhZHJhbnRIZWlnaHQgLyBicmlnaHRuZXNzLmxlbmd0aDtcclxuICAgIHRoaXMuaW52YWxpZGF0ZVBhaW50KCk7IC8vIHJlc3VsdHMgaW4gYSBjYWxsIHRvIHBhaW50Q2FudmFzXHJcbiAgfVxyXG5cclxuICAvL1RPRE8gU2hvdWxkIHRoaXMgYmUgcHJvdGVjdGVkIGluIENhbnZhc05vZGU/XHJcbiAgcHVibGljIHBhaW50Q2FudmFzKCBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZCB7XHJcblxyXG4gICAgbGV0IHg6IG51bWJlcjtcclxuICAgIGxldCB6OiBudW1iZXI7XHJcbiAgICBjb25zdCB3ID0gKCAxICsgUXVhZHJhbnROb2RlLlBFUkNFTlRfQ0VMTF9PVkVSTEFQICkgKiB0aGlzLmNlbGxXaWR0aDtcclxuICAgIGNvbnN0IGggPSAoIDEgKyBRdWFkcmFudE5vZGUuUEVSQ0VOVF9DRUxMX09WRVJMQVAgKSAqIHRoaXMuY2VsbEhlaWdodDtcclxuICAgIGNvbnN0IG51bWJlck9mUm93cyA9IHRoaXMuYnJpZ2h0bmVzcy5sZW5ndGg7XHJcblxyXG4gICAgY29uc3QgbWluQ29sb3IgPSBNT1RIQUNvbG9ycy56b29tZWRJbkJveEZpbGxQcm9wZXJ0eS52YWx1ZTtcclxuICAgIGNvbnN0IG1heENvbG9yID0gTU9USEFDb2xvcnMuZWxlY3Ryb25CYXNlQ29sb3JQcm9wZXJ0eS52YWx1ZTtcclxuXHJcbiAgICBmb3IgKCBsZXQgcm93ID0gMDsgcm93IDwgbnVtYmVyT2ZSb3dzOyByb3crKyApIHtcclxuICAgICAgY29uc3QgbnVtYmVyT2ZDb2x1bW5zID0gdGhpcy5icmlnaHRuZXNzWyByb3cgXS5sZW5ndGg7XHJcbiAgICAgIGZvciAoIGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCBudW1iZXJPZkNvbHVtbnM7IGNvbHVtbisrICkge1xyXG4gICAgICAgIGNvbnN0IGNvbG9yID0gQ29sb3IuaW50ZXJwb2xhdGVSR0JBKCBtaW5Db2xvciwgbWF4Q29sb3IsIHRoaXMuYnJpZ2h0bmVzc1sgcm93IF1bIGNvbHVtbiBdICk7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjb2xvci50b0NTUygpO1xyXG4gICAgICAgIHggPSAoIGNvbHVtbiAqIHRoaXMuY2VsbFdpZHRoICk7XHJcbiAgICAgICAgeiA9ICggcm93ICogdGhpcy5jZWxsSGVpZ2h0ICk7XHJcbiAgICAgICAgY29udGV4dC5yZWN0KCB4LCB6LCB3LCBoICk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnU2Nocm9kaW5nZXJGaWVsZE5vZGUnLCBTY2hyb2RpbmdlckZpZWxkTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsU0FBU0MsVUFBVSxF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