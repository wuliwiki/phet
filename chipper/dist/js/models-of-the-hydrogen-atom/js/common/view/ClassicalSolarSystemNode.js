// Copyright 2022, University of Colorado Boulder

/**
 * ClassicalSolarSystemNode shows the "Classical Solar System" model of the hydrogen atom.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import HydrogenAtomNode from './HydrogenAtomNode.js';
import ProtonNode from './ProtonNode.js';
import ElectronNode from './ElectronNode.js';
import kaboom_png from '../../../images/kaboom_png.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import { Image } from '../../../../scenery/js/imports.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
export default class ClassicalSolarSystemNode extends HydrogenAtomNode {
  constructor(hydrogenAtom, hydrogenAtomProperty, modelViewTransform, providedOptions) {
    const options = optionize()({
      //TODO default values for options
    }, providedOptions);
    const protonNodeTandem = options.tandem.createTandem('protonNode');
    const protonNode = new ProtonNode(hydrogenAtom.proton, modelViewTransform, {
      visibleProperty: DerivedProperty.not(hydrogenAtom.isDestroyedProperty, {
        tandem: protonNodeTandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO
      }),
      tandem: protonNodeTandem
    });
    const electronNodeTandem = options.tandem.createTandem('electronNode');
    const electronNode = new ElectronNode(hydrogenAtom.electron, modelViewTransform, {
      visibleProperty: DerivedProperty.not(hydrogenAtom.isDestroyedProperty, {
        tandem: electronNodeTandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO
      }),
      tandem: electronNodeTandem
    });
    const kaboomNode = new Image(kaboom_png, {
      visibleProperty: hydrogenAtom.isDestroyedProperty,
      center: protonNode.center,
      tandem: options.tandem.createTandem('kaboomNode')
    });
    options.children = [kaboomNode, protonNode, electronNode];
    super(hydrogenAtom, hydrogenAtomProperty, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('ClassicalSolarSystemNode', ClassicalSolarSystemNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSIsIkh5ZHJvZ2VuQXRvbU5vZGUiLCJQcm90b25Ob2RlIiwiRWxlY3Ryb25Ob2RlIiwia2Fib29tX3BuZyIsIkRlcml2ZWRQcm9wZXJ0eSIsIkltYWdlIiwiQm9vbGVhbklPIiwiQ2xhc3NpY2FsU29sYXJTeXN0ZW1Ob2RlIiwiY29uc3RydWN0b3IiLCJoeWRyb2dlbkF0b20iLCJoeWRyb2dlbkF0b21Qcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJwcm90b25Ob2RlVGFuZGVtIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicHJvdG9uTm9kZSIsInByb3RvbiIsInZpc2libGVQcm9wZXJ0eSIsIm5vdCIsImlzRGVzdHJveWVkUHJvcGVydHkiLCJwaGV0aW9WYWx1ZVR5cGUiLCJlbGVjdHJvbk5vZGVUYW5kZW0iLCJlbGVjdHJvbk5vZGUiLCJlbGVjdHJvbiIsImthYm9vbU5vZGUiLCJjZW50ZXIiLCJjaGlsZHJlbiIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNsYXNzaWNhbFNvbGFyU3lzdGVtTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2xhc3NpY2FsU29sYXJTeXN0ZW1Ob2RlIHNob3dzIHRoZSBcIkNsYXNzaWNhbCBTb2xhciBTeXN0ZW1cIiBtb2RlbCBvZiB0aGUgaHlkcm9nZW4gYXRvbS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uLy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgSHlkcm9nZW5BdG9tTm9kZSwgeyBIeWRyb2dlbkF0b21Ob2RlT3B0aW9ucyB9IGZyb20gJy4vSHlkcm9nZW5BdG9tTm9kZS5qcyc7XHJcbmltcG9ydCBQcm90b25Ob2RlIGZyb20gJy4vUHJvdG9uTm9kZS5qcyc7XHJcbmltcG9ydCBIeWRyb2dlbkF0b20gZnJvbSAnLi4vbW9kZWwvSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQ2xhc3NpY2FsU29sYXJTeXN0ZW1Nb2RlbCBmcm9tICcuLi9tb2RlbC9DbGFzc2ljYWxTb2xhclN5c3RlbU1vZGVsLmpzJztcclxuaW1wb3J0IEVsZWN0cm9uTm9kZSBmcm9tICcuL0VsZWN0cm9uTm9kZS5qcyc7XHJcbmltcG9ydCBrYWJvb21fcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9rYWJvb21fcG5nLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgQm9vbGVhbklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9Cb29sZWFuSU8uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIENsYXNzaWNhbFNvbGFyU3lzdGVtTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8SHlkcm9nZW5BdG9tTm9kZU9wdGlvbnMsICdjaGlsZHJlbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xhc3NpY2FsU29sYXJTeXN0ZW1Ob2RlIGV4dGVuZHMgSHlkcm9nZW5BdG9tTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaHlkcm9nZW5BdG9tOiBDbGFzc2ljYWxTb2xhclN5c3RlbU1vZGVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgaHlkcm9nZW5BdG9tUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PEh5ZHJvZ2VuQXRvbT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IENsYXNzaWNhbFNvbGFyU3lzdGVtTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxDbGFzc2ljYWxTb2xhclN5c3RlbU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgSHlkcm9nZW5BdG9tTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgLy9UT0RPIGRlZmF1bHQgdmFsdWVzIGZvciBvcHRpb25zXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBwcm90b25Ob2RlVGFuZGVtID0gb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncHJvdG9uTm9kZScgKTtcclxuICAgIGNvbnN0IHByb3Rvbk5vZGUgPSBuZXcgUHJvdG9uTm9kZSggaHlkcm9nZW5BdG9tLnByb3RvbiwgbW9kZWxWaWV3VHJhbnNmb3JtLCB7XHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogRGVyaXZlZFByb3BlcnR5Lm5vdCggaHlkcm9nZW5BdG9tLmlzRGVzdHJveWVkUHJvcGVydHksIHtcclxuICAgICAgICB0YW5kZW06IHByb3Rvbk5vZGVUYW5kZW0uY3JlYXRlVGFuZGVtKCAndmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICAgIHBoZXRpb1ZhbHVlVHlwZTogQm9vbGVhbklPXHJcbiAgICAgIH0gKSxcclxuICAgICAgdGFuZGVtOiBwcm90b25Ob2RlVGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgZWxlY3Ryb25Ob2RlVGFuZGVtID0gb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnZWxlY3Ryb25Ob2RlJyApO1xyXG4gICAgY29uc3QgZWxlY3Ryb25Ob2RlID0gbmV3IEVsZWN0cm9uTm9kZSggaHlkcm9nZW5BdG9tLmVsZWN0cm9uLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBEZXJpdmVkUHJvcGVydHkubm90KCBoeWRyb2dlbkF0b20uaXNEZXN0cm95ZWRQcm9wZXJ0eSwge1xyXG4gICAgICAgIHRhbmRlbTogZWxlY3Ryb25Ob2RlVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Zpc2libGVQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IEJvb2xlYW5JT1xyXG4gICAgICB9ICksXHJcbiAgICAgIHRhbmRlbTogZWxlY3Ryb25Ob2RlVGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qga2Fib29tTm9kZSA9IG5ldyBJbWFnZSgga2Fib29tX3BuZywge1xyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IGh5ZHJvZ2VuQXRvbS5pc0Rlc3Ryb3llZFByb3BlcnR5LFxyXG4gICAgICBjZW50ZXI6IHByb3Rvbk5vZGUuY2VudGVyLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2thYm9vbU5vZGUnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBrYWJvb21Ob2RlLCBwcm90b25Ob2RlLCBlbGVjdHJvbk5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggaHlkcm9nZW5BdG9tLCBoeWRyb2dlbkF0b21Qcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnQ2xhc3NpY2FsU29sYXJTeXN0ZW1Ob2RlJywgQ2xhc3NpY2FsU29sYXJTeXN0ZW1Ob2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUV0RSxPQUFPQyxnQkFBZ0IsTUFBbUMsdUJBQXVCO0FBQ2pGLE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFJeEMsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUM1QyxPQUFPQyxVQUFVLE1BQU0sK0JBQStCO0FBQ3RELE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsU0FBU0MsS0FBSyxRQUFRLG1DQUFtQztBQUV6RCxPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBTWhFLGVBQWUsTUFBTUMsd0JBQXdCLFNBQVNQLGdCQUFnQixDQUFDO0VBRTlEUSxXQUFXQSxDQUFFQyxZQUF1QyxFQUN2Q0Msb0JBQXFELEVBQ3JEQyxrQkFBdUMsRUFDdkNDLGVBQWdELEVBQUc7SUFFckUsTUFBTUMsT0FBTyxHQUFHZixTQUFTLENBQXdFLENBQUMsQ0FBRTtNQUNsRztJQUFBLENBQ0QsRUFBRWMsZUFBZ0IsQ0FBQztJQUVwQixNQUFNRSxnQkFBZ0IsR0FBR0QsT0FBTyxDQUFDRSxNQUFNLENBQUNDLFlBQVksQ0FBRSxZQUFhLENBQUM7SUFDcEUsTUFBTUMsVUFBVSxHQUFHLElBQUloQixVQUFVLENBQUVRLFlBQVksQ0FBQ1MsTUFBTSxFQUFFUCxrQkFBa0IsRUFBRTtNQUMxRVEsZUFBZSxFQUFFZixlQUFlLENBQUNnQixHQUFHLENBQUVYLFlBQVksQ0FBQ1ksbUJBQW1CLEVBQUU7UUFDdEVOLE1BQU0sRUFBRUQsZ0JBQWdCLENBQUNFLFlBQVksQ0FBRSxpQkFBa0IsQ0FBQztRQUMxRE0sZUFBZSxFQUFFaEI7TUFDbkIsQ0FBRSxDQUFDO01BQ0hTLE1BQU0sRUFBRUQ7SUFDVixDQUFFLENBQUM7SUFFSCxNQUFNUyxrQkFBa0IsR0FBR1YsT0FBTyxDQUFDRSxNQUFNLENBQUNDLFlBQVksQ0FBRSxjQUFlLENBQUM7SUFDeEUsTUFBTVEsWUFBWSxHQUFHLElBQUl0QixZQUFZLENBQUVPLFlBQVksQ0FBQ2dCLFFBQVEsRUFBRWQsa0JBQWtCLEVBQUU7TUFDaEZRLGVBQWUsRUFBRWYsZUFBZSxDQUFDZ0IsR0FBRyxDQUFFWCxZQUFZLENBQUNZLG1CQUFtQixFQUFFO1FBQ3RFTixNQUFNLEVBQUVRLGtCQUFrQixDQUFDUCxZQUFZLENBQUUsaUJBQWtCLENBQUM7UUFDNURNLGVBQWUsRUFBRWhCO01BQ25CLENBQUUsQ0FBQztNQUNIUyxNQUFNLEVBQUVRO0lBQ1YsQ0FBRSxDQUFDO0lBRUgsTUFBTUcsVUFBVSxHQUFHLElBQUlyQixLQUFLLENBQUVGLFVBQVUsRUFBRTtNQUN4Q2dCLGVBQWUsRUFBRVYsWUFBWSxDQUFDWSxtQkFBbUI7TUFDakRNLE1BQU0sRUFBRVYsVUFBVSxDQUFDVSxNQUFNO01BQ3pCWixNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsWUFBYTtJQUNwRCxDQUFFLENBQUM7SUFFSEgsT0FBTyxDQUFDZSxRQUFRLEdBQUcsQ0FBRUYsVUFBVSxFQUFFVCxVQUFVLEVBQUVPLFlBQVksQ0FBRTtJQUUzRCxLQUFLLENBQUVmLFlBQVksRUFBRUMsb0JBQW9CLEVBQUVHLE9BQVEsQ0FBQztFQUN0RDtFQUVnQmdCLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBOUIsdUJBQXVCLENBQUNnQyxRQUFRLENBQUUsMEJBQTBCLEVBQUV4Qix3QkFBeUIsQ0FBQyJ9