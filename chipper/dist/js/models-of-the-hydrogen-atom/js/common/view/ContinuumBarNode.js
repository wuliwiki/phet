// Copyright 2016-2022, University of Colorado Boulder

/**
 * ContinuumBarNode appears next to the radio buttons for choosing predicitive models, and shows whether
 * those models fall on the 'Classical' to 'Quantum' continuum.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import ModelsOfTheHydrogenAtomStrings from '../../ModelsOfTheHydrogenAtomStrings.js';
import MOTHAColors from '../MOTHAColors.js';
export default class ContinuumBarNode extends Node {
  constructor(barHeight, providedOptions) {
    const options = optionize()({
      // SelfOptions
      xMargin: 5,
      yMargin: 6,
      font: new PhetFont(14),
      barFill: MOTHAColors.continuumBarFillProperty,
      textFill: MOTHAColors.continuumBarTextFillProperty
    }, providedOptions);

    // labels
    const textOptions = {
      font: options.font,
      fill: options.textFill,
      rotation: Math.PI / 2,
      maxWidth: 0.4 * barHeight
    };
    const classicalText = new Text(ModelsOfTheHydrogenAtomStrings.classicalStringProperty, textOptions);
    const quantumText = new Text(ModelsOfTheHydrogenAtomStrings.quantumStringProperty, textOptions);
    const barWidth = Math.max(classicalText.width, quantumText.width) + 2 * options.xMargin;
    const barNode = new Rectangle(0, 0, barWidth, barHeight, {
      cornerRadius: 5,
      fill: options.barFill
    });

    // 'Classical' at top
    classicalText.centerX = barNode.centerX;
    classicalText.top = barNode.top + options.yMargin;

    // 'Quantum' at bottom
    quantumText.centerX = barNode.centerX;
    quantumText.bottom = barNode.bottom - options.yMargin;
    options.children = [barNode, classicalText, quantumText];
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('ContinuumBarNode', ContinuumBarNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0Rm9udCIsIk5vZGUiLCJSZWN0YW5nbGUiLCJUZXh0IiwibW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20iLCJNb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbVN0cmluZ3MiLCJNT1RIQUNvbG9ycyIsIkNvbnRpbnV1bUJhck5vZGUiLCJjb25zdHJ1Y3RvciIsImJhckhlaWdodCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImZvbnQiLCJiYXJGaWxsIiwiY29udGludXVtQmFyRmlsbFByb3BlcnR5IiwidGV4dEZpbGwiLCJjb250aW51dW1CYXJUZXh0RmlsbFByb3BlcnR5IiwidGV4dE9wdGlvbnMiLCJmaWxsIiwicm90YXRpb24iLCJNYXRoIiwiUEkiLCJtYXhXaWR0aCIsImNsYXNzaWNhbFRleHQiLCJjbGFzc2ljYWxTdHJpbmdQcm9wZXJ0eSIsInF1YW50dW1UZXh0IiwicXVhbnR1bVN0cmluZ1Byb3BlcnR5IiwiYmFyV2lkdGgiLCJtYXgiLCJ3aWR0aCIsImJhck5vZGUiLCJjb3JuZXJSYWRpdXMiLCJjZW50ZXJYIiwidG9wIiwiYm90dG9tIiwiY2hpbGRyZW4iLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb250aW51dW1CYXJOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRpbnV1bUJhck5vZGUgYXBwZWFycyBuZXh0IHRvIHRoZSByYWRpbyBidXR0b25zIGZvciBjaG9vc2luZyBwcmVkaWNpdGl2ZSBtb2RlbHMsIGFuZCBzaG93cyB3aGV0aGVyXHJcbiAqIHRob3NlIG1vZGVscyBmYWxsIG9uIHRoZSAnQ2xhc3NpY2FsJyB0byAnUXVhbnR1bScgY29udGludXVtLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IEZvbnQsIFRQYWludCwgTm9kZSwgTm9kZU9wdGlvbnMsIFJlY3RhbmdsZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbSBmcm9tICcuLi8uLi9tb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbS5qcyc7XHJcbmltcG9ydCBNb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbVN0cmluZ3MgZnJvbSAnLi4vLi4vTW9kZWxzT2ZUaGVIeWRyb2dlbkF0b21TdHJpbmdzLmpzJztcclxuaW1wb3J0IE1PVEhBQ29sb3JzIGZyb20gJy4uL01PVEhBQ29sb3JzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgeE1hcmdpbj86IG51bWJlcjtcclxuICB5TWFyZ2luPzogbnVtYmVyO1xyXG4gIGZvbnQ/OiBGb250O1xyXG4gIGJhckZpbGw/OiBUUGFpbnQ7XHJcbiAgdGV4dEZpbGw/OiBUUGFpbnQ7XHJcbn07XHJcblxyXG50eXBlIENvbnRpbnV1bUJhck5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PE5vZGVPcHRpb25zLCAnY2hpbGRyZW4nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRpbnV1bUJhck5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBiYXJIZWlnaHQ6IG51bWJlciwgcHJvdmlkZWRPcHRpb25zPzogQ29udGludXVtQmFyTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxDb250aW51dW1CYXJOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICB4TWFyZ2luOiA1LFxyXG4gICAgICB5TWFyZ2luOiA2LFxyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE0ICksXHJcbiAgICAgIGJhckZpbGw6IE1PVEhBQ29sb3JzLmNvbnRpbnV1bUJhckZpbGxQcm9wZXJ0eSxcclxuICAgICAgdGV4dEZpbGw6IE1PVEhBQ29sb3JzLmNvbnRpbnV1bUJhclRleHRGaWxsUHJvcGVydHlcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGxhYmVsc1xyXG4gICAgY29uc3QgdGV4dE9wdGlvbnMgPSB7XHJcbiAgICAgIGZvbnQ6IG9wdGlvbnMuZm9udCxcclxuICAgICAgZmlsbDogb3B0aW9ucy50ZXh0RmlsbCxcclxuICAgICAgcm90YXRpb246IE1hdGguUEkgLyAyLFxyXG4gICAgICBtYXhXaWR0aDogMC40ICogYmFySGVpZ2h0XHJcbiAgICB9O1xyXG4gICAgY29uc3QgY2xhc3NpY2FsVGV4dCA9IG5ldyBUZXh0KCBNb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbVN0cmluZ3MuY2xhc3NpY2FsU3RyaW5nUHJvcGVydHksIHRleHRPcHRpb25zICk7XHJcbiAgICBjb25zdCBxdWFudHVtVGV4dCA9IG5ldyBUZXh0KCBNb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbVN0cmluZ3MucXVhbnR1bVN0cmluZ1Byb3BlcnR5LCB0ZXh0T3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGJhcldpZHRoID0gTWF0aC5tYXgoIGNsYXNzaWNhbFRleHQud2lkdGgsIHF1YW50dW1UZXh0LndpZHRoICkgKyAoIDIgKiBvcHRpb25zLnhNYXJnaW4gKTtcclxuICAgIGNvbnN0IGJhck5vZGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCBiYXJXaWR0aCwgYmFySGVpZ2h0LCB7XHJcbiAgICAgIGNvcm5lclJhZGl1czogNSxcclxuICAgICAgZmlsbDogb3B0aW9ucy5iYXJGaWxsXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gJ0NsYXNzaWNhbCcgYXQgdG9wXHJcbiAgICBjbGFzc2ljYWxUZXh0LmNlbnRlclggPSBiYXJOb2RlLmNlbnRlclg7XHJcbiAgICBjbGFzc2ljYWxUZXh0LnRvcCA9IGJhck5vZGUudG9wICsgb3B0aW9ucy55TWFyZ2luO1xyXG5cclxuICAgIC8vICdRdWFudHVtJyBhdCBib3R0b21cclxuICAgIHF1YW50dW1UZXh0LmNlbnRlclggPSBiYXJOb2RlLmNlbnRlclg7XHJcbiAgICBxdWFudHVtVGV4dC5ib3R0b20gPSBiYXJOb2RlLmJvdHRvbSAtIG9wdGlvbnMueU1hcmdpbjtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBiYXJOb2RlLCBjbGFzc2ljYWxUZXh0LCBxdWFudHVtVGV4dCBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdDb250aW51dW1CYXJOb2RlJywgQ29udGludXVtQmFyTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUF1QkMs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