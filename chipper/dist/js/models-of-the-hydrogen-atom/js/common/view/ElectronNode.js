// Copyright 2015-2022, University of Colorado Boulder

/**
 * ElectronNode is the visual representation of an electron.
 * An electron is blue, and has a specular highlight with the light source coming from below.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import ShadedSphereNode from '../../../../scenery-phet/js/ShadedSphereNode.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import Electron from '../model/Electron.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import MOTHAColors from '../MOTHAColors.js';
export default class ElectronNode extends ShadedSphereNode {
  constructor(electron, modelViewTransform, providedOptions) {
    const options = optionize()({
      // ShadedSphereNodeOptions
      mainColor: MOTHAColors.electronBaseColorProperty,
      highlightColor: MOTHAColors.electronHighlightColorProperty
    }, providedOptions);
    super(2 * modelViewTransform.modelToViewDeltaX(electron.radius), options);
    electron.positionProperty.link(position => {
      this.translation = modelViewTransform.modelToViewPosition(position);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Creates an electron icon, used in the Key.
   */
  static createIcon(scale = 1) {
    const electron = new Electron({
      tandem: Tandem.OPT_OUT
    });
    const modelViewTransform = ModelViewTransform2.createIdentity();
    return new ElectronNode(electron, modelViewTransform, {
      scale: scale,
      tandem: Tandem.OPT_OUT
    });
  }
}
modelsOfTheHydrogenAtom.register('ElectronNode', ElectronNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiU2hhZGVkU3BoZXJlTm9kZSIsIm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIiwiRWxlY3Ryb24iLCJUYW5kZW0iLCJNT1RIQUNvbG9ycyIsIkVsZWN0cm9uTm9kZSIsImNvbnN0cnVjdG9yIiwiZWxlY3Ryb24iLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibWFpbkNvbG9yIiwiZWxlY3Ryb25CYXNlQ29sb3JQcm9wZXJ0eSIsImhpZ2hsaWdodENvbG9yIiwiZWxlY3Ryb25IaWdobGlnaHRDb2xvclByb3BlcnR5IiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJyYWRpdXMiLCJwb3NpdGlvblByb3BlcnR5IiwibGluayIsInBvc2l0aW9uIiwidHJhbnNsYXRpb24iLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwiZGlzcG9zZSIsImFzc2VydCIsImNyZWF0ZUljb24iLCJzY2FsZSIsInRhbmRlbSIsIk9QVF9PVVQiLCJjcmVhdGVJZGVudGl0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWxlY3Ryb25Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVsZWN0cm9uTm9kZSBpcyB0aGUgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIGFuIGVsZWN0cm9uLlxyXG4gKiBBbiBlbGVjdHJvbiBpcyBibHVlLCBhbmQgaGFzIGEgc3BlY3VsYXIgaGlnaGxpZ2h0IHdpdGggdGhlIGxpZ2h0IHNvdXJjZSBjb21pbmcgZnJvbSBiZWxvdy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBTaGFkZWRTcGhlcmVOb2RlLCB7IFNoYWRlZFNwaGVyZU5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1NoYWRlZFNwaGVyZU5vZGUuanMnO1xyXG5pbXBvcnQgbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20gZnJvbSAnLi4vLi4vbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20uanMnO1xyXG5pbXBvcnQgRWxlY3Ryb24gZnJvbSAnLi4vbW9kZWwvRWxlY3Ryb24uanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IE1PVEhBQ29sb3JzIGZyb20gJy4uL01PVEhBQ29sb3JzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBFbGVjdHJvbk5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFNoYWRlZFNwaGVyZU5vZGVPcHRpb25zLCAnbWFpbkNvbG9yJyB8ICdoaWdobGlnaHRDb2xvcic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxlY3Ryb25Ob2RlIGV4dGVuZHMgU2hhZGVkU3BoZXJlTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZWxlY3Ryb246IEVsZWN0cm9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogRWxlY3Ryb25Ob2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEVsZWN0cm9uTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2hhZGVkU3BoZXJlTm9kZU9wdGlvbnNcclxuICAgICAgbWFpbkNvbG9yOiBNT1RIQUNvbG9ycy5lbGVjdHJvbkJhc2VDb2xvclByb3BlcnR5LFxyXG4gICAgICBoaWdobGlnaHRDb2xvcjogTU9USEFDb2xvcnMuZWxlY3Ryb25IaWdobGlnaHRDb2xvclByb3BlcnR5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggMiAqIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggZWxlY3Ryb24ucmFkaXVzICksIG9wdGlvbnMgKTtcclxuXHJcbiAgICBlbGVjdHJvbi5wb3NpdGlvblByb3BlcnR5LmxpbmsoIHBvc2l0aW9uID0+IHtcclxuICAgICAgdGhpcy50cmFuc2xhdGlvbiA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBwb3NpdGlvbiApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW4gZWxlY3Ryb24gaWNvbiwgdXNlZCBpbiB0aGUgS2V5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlSWNvbiggc2NhbGUgPSAxICk6IE5vZGUge1xyXG4gICAgY29uc3QgZWxlY3Ryb24gPSBuZXcgRWxlY3Ryb24oIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgbW9kZWxWaWV3VHJhbnNmb3JtID0gTW9kZWxWaWV3VHJhbnNmb3JtMi5jcmVhdGVJZGVudGl0eSgpO1xyXG4gICAgcmV0dXJuIG5ldyBFbGVjdHJvbk5vZGUoIGVsZWN0cm9uLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgc2NhbGU6IHNjYWxlLFxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbS5yZWdpc3RlciggJ0VsZWN0cm9uTm9kZScsIEVsZWN0cm9uTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLE9BQU9DLG1CQUFtQixNQUFNLHVEQUF1RDtBQUN2RixPQUFPQyxnQkFBZ0IsTUFBbUMsaURBQWlEO0FBQzNHLE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyxRQUFRLE1BQU0sc0JBQXNCO0FBRTNDLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQU0zQyxlQUFlLE1BQU1DLFlBQVksU0FBU0wsZ0JBQWdCLENBQUM7RUFFbERNLFdBQVdBLENBQUVDLFFBQWtCLEVBQ2xCQyxrQkFBdUMsRUFDdkNDLGVBQXFDLEVBQUc7SUFFMUQsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQTRELENBQUMsQ0FBRTtNQUV0RjtNQUNBYSxTQUFTLEVBQUVQLFdBQVcsQ0FBQ1EseUJBQXlCO01BQ2hEQyxjQUFjLEVBQUVULFdBQVcsQ0FBQ1U7SUFDOUIsQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRSxDQUFDLEdBQUdELGtCQUFrQixDQUFDTyxpQkFBaUIsQ0FBRVIsUUFBUSxDQUFDUyxNQUFPLENBQUMsRUFBRU4sT0FBUSxDQUFDO0lBRTdFSCxRQUFRLENBQUNVLGdCQUFnQixDQUFDQyxJQUFJLENBQUVDLFFBQVEsSUFBSTtNQUMxQyxJQUFJLENBQUNDLFdBQVcsR0FBR1osa0JBQWtCLENBQUNhLG1CQUFtQixDQUFFRixRQUFTLENBQUM7SUFDdkUsQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JHLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsT0FBY0UsVUFBVUEsQ0FBRUMsS0FBSyxHQUFHLENBQUMsRUFBUztJQUMxQyxNQUFNbEIsUUFBUSxHQUFHLElBQUlMLFFBQVEsQ0FBRTtNQUM3QndCLE1BQU0sRUFBRXZCLE1BQU0sQ0FBQ3dCO0lBQ2pCLENBQUUsQ0FBQztJQUNILE1BQU1uQixrQkFBa0IsR0FBR1QsbUJBQW1CLENBQUM2QixjQUFjLENBQUMsQ0FBQztJQUMvRCxPQUFPLElBQUl2QixZQUFZLENBQUVFLFFBQVEsRUFBRUMsa0JBQWtCLEVBQUU7TUFDckRpQixLQUFLLEVBQUVBLEtBQUs7TUFDWkMsTUFBTSxFQUFFdkIsTUFBTSxDQUFDd0I7SUFDakIsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBMUIsdUJBQXVCLENBQUM0QixRQUFRLENBQUUsY0FBYyxFQUFFeEIsWUFBYSxDQUFDIn0=