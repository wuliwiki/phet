// Copyright 2022, University of Colorado Boulder

/**
 * WireframeModel is a 3D wireframe model.
 * Ported from edu.colorado.phet.hydrogenatom.wireframe.Wireframe.java.
 * That code was distributed with JDK 1.4.2 in the Wireframe example applet.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Color } from '../../../../scenery/js/imports.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import WireframeMatrix from './WireframeMatrix.js';
export default class WireframeModel {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      vertices: [],
      frontColor: Color.BLACK,
      backColor: Color.BLACK,
      lineWidth: 1
    }, providedOptions);
    assert && assert(isFinite(options.lineWidth) && options.lineWidth > 0);
    this.matrix = new WireframeMatrix();
    this.vertices = options.vertices;
    this.frontColor = options.frontColor;
    this.backColor = options.backColor;
    this.lineWidth = options.lineWidth;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    //TODO
  }
  addVertices(vertices) {
    //TODO
  }

  /**
   * Adds a line between 2 vertices.
   */
  addLine(index1, index2) {
    //TODO
  }
  getMatrix() {
    return this.matrix;
  }
  setMatrix(matrix) {
    if (this.matrix !== matrix) {
      this.matrix = matrix;
      //TODO
    }
  }

  getXMin() {
    //TODO
    return 0;
  }
  getXMax() {
    //TODO
    return 0;
  }
  getYMin() {
    //TODO
    return 0;
  }
  getYMax() {
    //TODO
    return 0;
  }
  getZMin() {
    //TODO
    return 0;
  }
  getZMax() {
    //TODO
    return 0;
  }
}
modelsOfTheHydrogenAtom.register('WireframeModel', WireframeModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJDb2xvciIsIm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIiwiV2lyZWZyYW1lTWF0cml4IiwiV2lyZWZyYW1lTW9kZWwiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2ZXJ0aWNlcyIsImZyb250Q29sb3IiLCJCTEFDSyIsImJhY2tDb2xvciIsImxpbmVXaWR0aCIsImFzc2VydCIsImlzRmluaXRlIiwibWF0cml4IiwiZGlzcG9zZSIsInJlc2V0IiwiYWRkVmVydGljZXMiLCJhZGRMaW5lIiwiaW5kZXgxIiwiaW5kZXgyIiwiZ2V0TWF0cml4Iiwic2V0TWF0cml4IiwiZ2V0WE1pbiIsImdldFhNYXgiLCJnZXRZTWluIiwiZ2V0WU1heCIsImdldFpNaW4iLCJnZXRaTWF4IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXaXJlZnJhbWVNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV2lyZWZyYW1lTW9kZWwgaXMgYSAzRCB3aXJlZnJhbWUgbW9kZWwuXHJcbiAqIFBvcnRlZCBmcm9tIGVkdS5jb2xvcmFkby5waGV0Lmh5ZHJvZ2VuYXRvbS53aXJlZnJhbWUuV2lyZWZyYW1lLmphdmEuXHJcbiAqIFRoYXQgY29kZSB3YXMgZGlzdHJpYnV0ZWQgd2l0aCBKREsgMS40LjIgaW4gdGhlIFdpcmVmcmFtZSBleGFtcGxlIGFwcGxldC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBUQ29sb3IsIFJlY3RhbmdsZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20gZnJvbSAnLi4vLi4vbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20uanMnO1xyXG5pbXBvcnQgV2lyZWZyYW1lTWF0cml4IGZyb20gJy4vV2lyZWZyYW1lTWF0cml4LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgdmVydGljZXM/OiBWZWN0b3IzW107XHJcbiAgZnJvbnRDb2xvcj86IFRDb2xvcjtcclxuICBiYWNrQ29sb3I/OiBUQ29sb3I7XHJcbiAgbGluZVdpZHRoPzogbnVtYmVyO1xyXG59O1xyXG5cclxudHlwZSBXaXJlZnJhbWVNb2RlbE9wdGlvbnMgPSBTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdpcmVmcmFtZU1vZGVsIHtcclxuXHJcbiAgcHJpdmF0ZSBtYXRyaXg6IFdpcmVmcmFtZU1hdHJpeDtcclxuICBwcml2YXRlIHZlcnRpY2VzOiBWZWN0b3IzW107XHJcbiAgcHJpdmF0ZSBmcm9udENvbG9yOiBUQ29sb3I7XHJcbiAgcHJpdmF0ZSBiYWNrQ29sb3I6IFRDb2xvcjtcclxuICBwcml2YXRlIGxpbmVXaWR0aDogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogV2lyZWZyYW1lTW9kZWxPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8V2lyZWZyYW1lTW9kZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ2xlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgdmVydGljZXM6IFtdLFxyXG4gICAgICBmcm9udENvbG9yOiBDb2xvci5CTEFDSyxcclxuICAgICAgYmFja0NvbG9yOiBDb2xvci5CTEFDSyxcclxuICAgICAgbGluZVdpZHRoOiAxXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpc0Zpbml0ZSggb3B0aW9ucy5saW5lV2lkdGggKSAmJiBvcHRpb25zLmxpbmVXaWR0aCA+IDAgKTtcclxuXHJcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBXaXJlZnJhbWVNYXRyaXgoKTtcclxuICAgIHRoaXMudmVydGljZXMgPSBvcHRpb25zLnZlcnRpY2VzO1xyXG4gICAgdGhpcy5mcm9udENvbG9yID0gb3B0aW9ucy5mcm9udENvbG9yO1xyXG4gICAgdGhpcy5iYWNrQ29sb3IgPSBvcHRpb25zLmJhY2tDb2xvcjtcclxuICAgIHRoaXMubGluZVdpZHRoID0gb3B0aW9ucy5saW5lV2lkdGg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgLy9UT0RPXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkVmVydGljZXMoIHZlcnRpY2VzOiBWZWN0b3IzW10gKTogdm9pZCB7XHJcbiAgICAvL1RPRE9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYSBsaW5lIGJldHdlZW4gMiB2ZXJ0aWNlcy5cclxuICAgKi9cclxuICBwdWJsaWMgYWRkTGluZSggaW5kZXgxOiBudW1iZXIsIGluZGV4MjogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgLy9UT0RPXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0TWF0cml4KCk6IFdpcmVmcmFtZU1hdHJpeCB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXRyaXg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0TWF0cml4KCBtYXRyaXg6IFdpcmVmcmFtZU1hdHJpeCApOiB2b2lkIHtcclxuICAgIGlmICggdGhpcy5tYXRyaXggIT09IG1hdHJpeCApIHtcclxuICAgICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XHJcbiAgICAgIC8vVE9ET1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFhNaW4oKTogbnVtYmVyIHtcclxuICAgIC8vVE9ET1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0WE1heCgpOiBudW1iZXIge1xyXG4gICAgLy9UT0RPXHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRZTWluKCk6IG51bWJlciB7XHJcbiAgICAvL1RPRE9cclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFlNYXgoKTogbnVtYmVyIHtcclxuICAgIC8vVE9ET1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Wk1pbigpOiBudW1iZXIge1xyXG4gICAgLy9UT0RPXHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRaTWF4KCk6IG51bWJlciB7XHJcbiAgICAvL1RPRE9cclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdXaXJlZnJhbWVNb2RlbCcsIFdpcmVmcmFtZU1vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELFNBQVNDLEtBQUssUUFBa0MsbUNBQW1DO0FBQ25GLE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBV2xELGVBQWUsTUFBTUMsY0FBYyxDQUFDO0VBUTNCQyxXQUFXQSxDQUFFQyxlQUFzQyxFQUFHO0lBRTNELE1BQU1DLE9BQU8sR0FBR1AsU0FBUyxDQUF1RCxDQUFDLENBQUU7TUFFakY7TUFDQVEsUUFBUSxFQUFFLEVBQUU7TUFDWkMsVUFBVSxFQUFFUixLQUFLLENBQUNTLEtBQUs7TUFDdkJDLFNBQVMsRUFBRVYsS0FBSyxDQUFDUyxLQUFLO01BQ3RCRSxTQUFTLEVBQUU7SUFDYixDQUFDLEVBQUVOLGVBQWdCLENBQUM7SUFFcEJPLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxRQUFRLENBQUVQLE9BQU8sQ0FBQ0ssU0FBVSxDQUFDLElBQUlMLE9BQU8sQ0FBQ0ssU0FBUyxHQUFHLENBQUUsQ0FBQztJQUUxRSxJQUFJLENBQUNHLE1BQU0sR0FBRyxJQUFJWixlQUFlLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUNLLFFBQVEsR0FBR0QsT0FBTyxDQUFDQyxRQUFRO0lBQ2hDLElBQUksQ0FBQ0MsVUFBVSxHQUFHRixPQUFPLENBQUNFLFVBQVU7SUFDcEMsSUFBSSxDQUFDRSxTQUFTLEdBQUdKLE9BQU8sQ0FBQ0ksU0FBUztJQUNsQyxJQUFJLENBQUNDLFNBQVMsR0FBR0wsT0FBTyxDQUFDSyxTQUFTO0VBQ3BDO0VBRU9JLE9BQU9BLENBQUEsRUFBUztJQUNyQkgsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0VBQzNGO0VBRU9JLEtBQUtBLENBQUEsRUFBUztJQUNuQjtFQUFBO0VBR0tDLFdBQVdBLENBQUVWLFFBQW1CLEVBQVM7SUFDOUM7RUFBQTs7RUFHRjtBQUNGO0FBQ0E7RUFDU1csT0FBT0EsQ0FBRUMsTUFBYyxFQUFFQyxNQUFjLEVBQVM7SUFDckQ7RUFBQTtFQUdLQyxTQUFTQSxDQUFBLEVBQW9CO0lBQ2xDLE9BQU8sSUFBSSxDQUFDUCxNQUFNO0VBQ3BCO0VBRU9RLFNBQVNBLENBQUVSLE1BQXVCLEVBQVM7SUFDaEQsSUFBSyxJQUFJLENBQUNBLE1BQU0sS0FBS0EsTUFBTSxFQUFHO01BQzVCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNO01BQ3BCO0lBQ0Y7RUFDRjs7RUFFT1MsT0FBT0EsQ0FBQSxFQUFXO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDO0VBQ1Y7RUFFT0MsT0FBT0EsQ0FBQSxFQUFXO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDO0VBQ1Y7RUFFT0MsT0FBT0EsQ0FBQSxFQUFXO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDO0VBQ1Y7RUFFT0MsT0FBT0EsQ0FBQSxFQUFXO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDO0VBQ1Y7RUFFT0MsT0FBT0EsQ0FBQSxFQUFXO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDO0VBQ1Y7RUFFT0MsT0FBT0EsQ0FBQSxFQUFXO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDO0VBQ1Y7QUFDRjtBQUVBM0IsdUJBQXVCLENBQUM0QixRQUFRLENBQUUsZ0JBQWdCLEVBQUUxQixjQUFlLENBQUMifQ==