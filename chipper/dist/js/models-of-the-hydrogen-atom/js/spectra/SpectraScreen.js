// Copyright 2016-2022, University of Colorado Boulder

/**
 * SpectraScreen is the 'Spectra' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../phet-core/js/optionize.js';
import MOTHAScreen from '../common/view/MOTHAScreen.js';
import modelsOfTheHydrogenAtom from '../modelsOfTheHydrogenAtom.js';
import ModelsOfTheHydrogenAtomStrings from '../ModelsOfTheHydrogenAtomStrings.js';
import SpectraModel from './model/SpectraModel.js';
import SpectraScreenView from './view/SpectraScreenView.js';
import spectraScreenIcon_png from '../../images/spectraScreenIcon_png.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
export default class SpectraScreen extends MOTHAScreen {
  constructor(providedOptions) {
    const options = optionize()({
      name: ModelsOfTheHydrogenAtomStrings.screen.spectraStringProperty,
      homeScreenIcon: new ScreenIcon(new Image(spectraScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      })
    }, providedOptions);
    super(() => new SpectraModel({
      tandem: options.tandem.createTandem('model')
    }), model => new SpectraScreenView(model, {
      tandem: options.tandem.createTandem('view')
    }), options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('SpectraScreen', SpectraScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJNT1RIQVNjcmVlbiIsIm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIiwiTW9kZWxzT2ZUaGVIeWRyb2dlbkF0b21TdHJpbmdzIiwiU3BlY3RyYU1vZGVsIiwiU3BlY3RyYVNjcmVlblZpZXciLCJzcGVjdHJhU2NyZWVuSWNvbl9wbmciLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJTcGVjdHJhU2NyZWVuIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsInNwZWN0cmFTdHJpbmdQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTcGVjdHJhU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNwZWN0cmFTY3JlZW4gaXMgdGhlICdTcGVjdHJhJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IE1PVEhBU2NyZWVuLCB7IE1PVEhBU2NyZWVuT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi92aWV3L01PVEhBU2NyZWVuLmpzJztcclxuaW1wb3J0IG1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIGZyb20gJy4uL21vZGVsc09mVGhlSHlkcm9nZW5BdG9tLmpzJztcclxuaW1wb3J0IE1vZGVsc09mVGhlSHlkcm9nZW5BdG9tU3RyaW5ncyBmcm9tICcuLi9Nb2RlbHNPZlRoZUh5ZHJvZ2VuQXRvbVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgU3BlY3RyYU1vZGVsIGZyb20gJy4vbW9kZWwvU3BlY3RyYU1vZGVsLmpzJztcclxuaW1wb3J0IFNwZWN0cmFTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9TcGVjdHJhU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBzcGVjdHJhU2NyZWVuSWNvbl9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL3NwZWN0cmFTY3JlZW5JY29uX3BuZy5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgU3BlY3RyYVNjcmVlbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8TU9USEFTY3JlZW5PcHRpb25zLCAnbmFtZScgfCAnaG9tZVNjcmVlbkljb24nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwZWN0cmFTY3JlZW4gZXh0ZW5kcyBNT1RIQVNjcmVlbjxTcGVjdHJhTW9kZWwsIFNwZWN0cmFTY3JlZW5WaWV3PiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBTcGVjdHJhU2NyZWVuT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFNwZWN0cmFTY3JlZW5PcHRpb25zLCBTZWxmT3B0aW9ucywgTU9USEFTY3JlZW5PcHRpb25zPigpKCB7XHJcbiAgICAgIG5hbWU6IE1vZGVsc09mVGhlSHlkcm9nZW5BdG9tU3RyaW5ncy5zY3JlZW4uc3BlY3RyYVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggc3BlY3RyYVNjcmVlbkljb25fcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBTcGVjdHJhTW9kZWwoIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApXHJcbiAgICAgIH0gKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IFNwZWN0cmFTY3JlZW5WaWV3KCBtb2RlbCwge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKVxyXG4gICAgICB9ICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20ucmVnaXN0ZXIoICdTcGVjdHJhU2NyZWVuJywgU3BlY3RyYVNjcmVlbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLG9DQUFvQztBQUVoRixPQUFPQyxXQUFXLE1BQThCLCtCQUErQjtBQUMvRSxPQUFPQyx1QkFBdUIsTUFBTSwrQkFBK0I7QUFDbkUsT0FBT0MsOEJBQThCLE1BQU0sc0NBQXNDO0FBQ2pGLE9BQU9DLFlBQVksTUFBTSx5QkFBeUI7QUFDbEQsT0FBT0MsaUJBQWlCLE1BQU0sNkJBQTZCO0FBQzNELE9BQU9DLHFCQUFxQixNQUFNLHVDQUF1QztBQUN6RSxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFNdEQsZUFBZSxNQUFNQyxhQUFhLFNBQVNSLFdBQVcsQ0FBa0M7RUFFL0VTLFdBQVdBLENBQUVDLGVBQXFDLEVBQUc7SUFFMUQsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQXdELENBQUMsQ0FBRTtNQUNsRmEsSUFBSSxFQUFFViw4QkFBOEIsQ0FBQ1csTUFBTSxDQUFDQyxxQkFBcUI7TUFDakVDLGNBQWMsRUFBRSxJQUFJVCxVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFRixxQkFBc0IsQ0FBQyxFQUFFO1FBQ2xFVyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFO0lBQ0osQ0FBQyxFQUFFUCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FDSCxNQUFNLElBQUlQLFlBQVksQ0FBRTtNQUN0QmUsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE9BQVE7SUFDL0MsQ0FBRSxDQUFDLEVBQ0hDLEtBQUssSUFBSSxJQUFJaEIsaUJBQWlCLENBQUVnQixLQUFLLEVBQUU7TUFDckNGLE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSxNQUFPO0lBQzlDLENBQUUsQ0FBQyxFQUNIUixPQUNGLENBQUM7RUFDSDtFQUVnQlUsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFwQix1QkFBdUIsQ0FBQ3NCLFFBQVEsQ0FBRSxlQUFlLEVBQUVmLGFBQWMsQ0FBQyJ9