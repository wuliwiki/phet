// Copyright 2015-2022, University of Colorado Boulder

/**
 * SpectraModel is the model for the 'Spectra' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import BilliardBallModel from '../../common/model/BilliardBallModel.js';
import BohrModel from '../../common/model/BohrModel.js';
import ClassicalSolarSystemModel from '../../common/model/ClassicalSolarSystemModel.js';
import DeBroglieModel from '../../common/model/DeBroglieModel.js';
import MOTHAModel from '../../common/model/MOTHAModel.js';
import PlumPuddingModel from '../../common/model/PlumPuddingModel.js';
import SchrodingerModel from '../../common/model/SchrodingerModel.js';
import modelsOfTheHydrogenAtom from '../../modelsOfTheHydrogenAtom.js';
import ZoomedInBox from '../../common/model/ZoomedInBox.js';
import MOTHAConstants from '../../common/MOTHAConstants.js';
export default class SpectraModel extends MOTHAModel {
  // predictive models supported by this screen

  constructor(providedOptions) {
    const options = optionize()({
      //TODO default values for options
    }, providedOptions);
    const zoomedInBox = new ZoomedInBox(MOTHAConstants.ZOOMED_IN_BOX_MODEL_SIZE);
    const billiardBallModel = new BilliardBallModel(zoomedInBox, {
      tandem: options.tandem.createTandem('billiardBallModel')
    });
    const plumPuddingModel = new PlumPuddingModel(zoomedInBox, {
      tandem: options.tandem.createTandem('plumPuddingModel')
    });
    const classicalSolarSystemModel = new ClassicalSolarSystemModel(zoomedInBox, {
      tandem: options.tandem.createTandem('classicalSolarSystemModel')
    });
    const bohrModel = new BohrModel(zoomedInBox, {
      tandem: options.tandem.createTandem('bohrModel')
    });
    const deBroglieModel = new DeBroglieModel(zoomedInBox, {
      tandem: options.tandem.createTandem('deBroglieModel')
    });
    const schrodingerModel = new SchrodingerModel(zoomedInBox, {
      tandem: options.tandem.createTandem('schrodingerModel')
    });

    // Predictive models supported by this screen, in the order that they will appear in the UI
    const predictiveModels = [billiardBallModel, plumPuddingModel, classicalSolarSystemModel, bohrModel, deBroglieModel, schrodingerModel];

    //TODO default should be billiardBallModel
    super(zoomedInBox, predictiveModels, schrodingerModel, options);
    this.billiardBallModel = billiardBallModel;
    this.plumPuddingModel = plumPuddingModel;
    this.classicalSolarSystemModel = classicalSolarSystemModel;
    this.bohrModel = bohrModel;
    this.deBroglieModel = deBroglieModel;
    this.schrodingerModel = schrodingerModel;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('SpectraModel', SpectraModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,