// Copyright 2016-2022, University of Colorado Boulder

/**
 * EnergyLevelsScreen is the 'Energy Levels' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../phet-core/js/optionize.js';
import MOTHAScreen from '../common/view/MOTHAScreen.js';
import modelsOfTheHydrogenAtom from '../modelsOfTheHydrogenAtom.js';
import ModelsOfTheHydrogenAtomStrings from '../ModelsOfTheHydrogenAtomStrings.js';
import EnergyLevelsModel from './model/EnergyLevelsModel.js';
import EnergyLevelsScreenView from './view/EnergyLevelsScreenView.js';
import energyLevelsScreenIcon_png from '../../images/energyLevelsScreenIcon_png.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
export default class EnergyLevelsScreen extends MOTHAScreen {
  constructor(providedOptions) {
    const options = optionize()({
      name: ModelsOfTheHydrogenAtomStrings.screen.energyLevelsStringProperty,
      homeScreenIcon: new ScreenIcon(new Image(energyLevelsScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      })
    }, providedOptions);
    super(() => new EnergyLevelsModel({
      tandem: options.tandem.createTandem('model')
    }), model => new EnergyLevelsScreenView(model, {
      tandem: options.tandem.createTandem('view')
    }), options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
modelsOfTheHydrogenAtom.register('EnergyLevelsScreen', EnergyLevelsScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJNT1RIQVNjcmVlbiIsIm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tIiwiTW9kZWxzT2ZUaGVIeWRyb2dlbkF0b21TdHJpbmdzIiwiRW5lcmd5TGV2ZWxzTW9kZWwiLCJFbmVyZ3lMZXZlbHNTY3JlZW5WaWV3IiwiZW5lcmd5TGV2ZWxzU2NyZWVuSWNvbl9wbmciLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJFbmVyZ3lMZXZlbHNTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwiZW5lcmd5TGV2ZWxzU3RyaW5nUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5lcmd5TGV2ZWxzU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVuZXJneUxldmVsc1NjcmVlbiBpcyB0aGUgJ0VuZXJneSBMZXZlbHMnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgTU9USEFTY3JlZW4sIHsgTU9USEFTY3JlZW5PcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXcvTU9USEFTY3JlZW4uanMnO1xyXG5pbXBvcnQgbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20gZnJvbSAnLi4vbW9kZWxzT2ZUaGVIeWRyb2dlbkF0b20uanMnO1xyXG5pbXBvcnQgTW9kZWxzT2ZUaGVIeWRyb2dlbkF0b21TdHJpbmdzIGZyb20gJy4uL01vZGVsc09mVGhlSHlkcm9nZW5BdG9tU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lMZXZlbHNNb2RlbCBmcm9tICcuL21vZGVsL0VuZXJneUxldmVsc01vZGVsLmpzJztcclxuaW1wb3J0IEVuZXJneUxldmVsc1NjcmVlblZpZXcgZnJvbSAnLi92aWV3L0VuZXJneUxldmVsc1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgZW5lcmd5TGV2ZWxzU2NyZWVuSWNvbl9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2VuZXJneUxldmVsc1NjcmVlbkljb25fcG5nLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBFbmVyZ3lMZXZlbHNTY3JlZW5PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PE1PVEhBU2NyZWVuT3B0aW9ucywgJ25hbWUnIHwgJ2hvbWVTY3JlZW5JY29uJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmVyZ3lMZXZlbHNTY3JlZW4gZXh0ZW5kcyBNT1RIQVNjcmVlbjxFbmVyZ3lMZXZlbHNNb2RlbCwgRW5lcmd5TGV2ZWxzU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogRW5lcmd5TGV2ZWxzU2NyZWVuT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEVuZXJneUxldmVsc1NjcmVlbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBNT1RIQVNjcmVlbk9wdGlvbnM+KCkoIHtcclxuICAgICAgbmFtZTogTW9kZWxzT2ZUaGVIeWRyb2dlbkF0b21TdHJpbmdzLnNjcmVlbi5lbmVyZ3lMZXZlbHNTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgSW1hZ2UoIGVuZXJneUxldmVsc1NjcmVlbkljb25fcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBFbmVyZ3lMZXZlbHNNb2RlbCgge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnIClcclxuICAgICAgfSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgRW5lcmd5TGV2ZWxzU2NyZWVuVmlldyggbW9kZWwsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnIClcclxuICAgICAgfSApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZGVsc09mVGhlSHlkcm9nZW5BdG9tLnJlZ2lzdGVyKCAnRW5lcmd5TGV2ZWxzU2NyZWVuJywgRW5lcmd5TGV2ZWxzU2NyZWVuICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsb0NBQW9DO0FBRWhGLE9BQU9DLFdBQVcsTUFBOEIsK0JBQStCO0FBQy9FLE9BQU9DLHVCQUF1QixNQUFNLCtCQUErQjtBQUNuRSxPQUFPQyw4QkFBOEIsTUFBTSxzQ0FBc0M7QUFDakYsT0FBT0MsaUJBQWlCLE1BQU0sOEJBQThCO0FBQzVELE9BQU9DLHNCQUFzQixNQUFNLGtDQUFrQztBQUNyRSxPQUFPQywwQkFBMEIsTUFBTSw0Q0FBNEM7QUFDbkYsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBTXRELGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNSLFdBQVcsQ0FBNEM7RUFFOUZTLFdBQVdBLENBQUVDLGVBQTBDLEVBQUc7SUFFL0QsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQTZELENBQUMsQ0FBRTtNQUN2RmEsSUFBSSxFQUFFViw4QkFBOEIsQ0FBQ1csTUFBTSxDQUFDQywwQkFBMEI7TUFDdEVDLGNBQWMsRUFBRSxJQUFJVCxVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFRiwwQkFBMkIsQ0FBQyxFQUFFO1FBQ3ZFVyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFO0lBQ0osQ0FBQyxFQUFFUCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FDSCxNQUFNLElBQUlQLGlCQUFpQixDQUFFO01BQzNCZSxNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUUsT0FBUTtJQUMvQyxDQUFFLENBQUMsRUFDSEMsS0FBSyxJQUFJLElBQUloQixzQkFBc0IsQ0FBRWdCLEtBQUssRUFBRTtNQUMxQ0YsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE1BQU87SUFDOUMsQ0FBRSxDQUFDLEVBQ0hSLE9BQ0YsQ0FBQztFQUNIO0VBRWdCVSxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXBCLHVCQUF1QixDQUFDc0IsUUFBUSxDQUFFLG9CQUFvQixFQUFFZixrQkFBbUIsQ0FBQyJ9