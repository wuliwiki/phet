// Copyright 2015-2022, University of Colorado Boulder

/**
 * Control panel for selecting how the curve is fit to data points.
 * For adjustable fit, provides additional controls for coefficients.
 *
 * @author Andrey Zelenkov (Mlearner)
 * @author Saurabh Totey
 */

import merge from '../../../../phet-core/js/merge.js';
import { HBox, HStrut, Text, VBox } from '../../../../scenery/js/imports.js';
import AquaRadioButton from '../../../../sun/js/AquaRadioButton.js';
import Panel from '../../../../sun/js/Panel.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingStrings from '../../CurveFittingStrings.js';
import CurveFittingConstants from '../CurveFittingConstants.js';
import FitType from '../model/FitType.js';
import CoefficientSliderNode from './CoefficientSliderNode.js';
import EquationNode from './EquationNode.js';
const adjustableFitString = CurveFittingStrings.adjustableFit;
const aSymbolString = CurveFittingStrings.aSymbol;
const bestFitString = CurveFittingStrings.bestFit;
const bSymbolString = CurveFittingStrings.bSymbol;
const cSymbolString = CurveFittingStrings.cSymbol;
const dSymbolString = CurveFittingStrings.dSymbol;
class FitPanel extends Panel {
  /**
   * @param {Property.<number>[]} sliderPropertyArray - stored in ascending order of the polynomial fit, starting with order zero.
   * @param {Property.<FitType>} fitProperty
   * @param {Property.<number>} orderProperty
   * @param {Object} [options]
   */
  constructor(sliderPropertyArray, fitProperty, orderProperty, options) {
    options = merge({
      cornerRadius: CurveFittingConstants.PANEL_CORNER_RADIUS,
      fill: CurveFittingConstants.PANEL_BACKGROUND_COLOR,
      xMargin: CurveFittingConstants.PANEL_MARGIN,
      yMargin: CurveFittingConstants.PANEL_MARGIN,
      maxWidth: CurveFittingConstants.PANEL_MAX_WIDTH
    }, options);

    // radio buttons
    const bestFitButton = createRadioButton(fitProperty, FitType.BEST, bestFitString);
    const adjustableFitButton = createRadioButton(fitProperty, FitType.ADJUSTABLE, adjustableFitString);

    // vertical layout
    const radioButtonsBox = new VBox({
      align: 'left',
      spacing: CurveFittingConstants.CONTROLS_Y_SPACING,
      children: [bestFitButton, adjustableFitButton]
    });

    // equation that corresponds to the curve
    const equationFitNode = new EquationNode(orderProperty, {
      coefficientTextOptions: {
        font: CurveFittingConstants.COEFFICIENT_FONT,
        fill: CurveFittingConstants.BLUE_COLOR
      }
    });

    // vertical layout
    const contentNode = new VBox({
      align: 'left',
      spacing: CurveFittingConstants.CONTROLS_Y_SPACING,
      children: [radioButtonsBox, equationFitNode]
    });
    super(contentNode, options);

    // attributes for four sliders in ASCENDING order of polynomial
    const slidersAttributes = [{
      string: dSymbolString,
      range: CurveFittingConstants.CONSTANT_RANGE
    }, {
      string: cSymbolString,
      range: CurveFittingConstants.LINEAR_RANGE
    }, {
      string: bSymbolString,
      range: CurveFittingConstants.QUADRATIC_RANGE
    }, {
      string: aSymbolString,
      range: CurveFittingConstants.CUBIC_RANGE
    }];

    // create array in ASCENDING order of polynomial
    const ascendingSliders = slidersAttributes.map((sliderAttribute, index) => new CoefficientSliderNode(sliderPropertyArray[index], sliderAttribute.range, sliderAttribute.string));

    // we want sliders in DESCENDING order of polynomial
    const sliders = ascendingSliders.reverse();

    // create slider box under the equationFitNode
    // HBox and HStrut spacing are empirically determined
    const slidersBox = new HBox({
      spacing: CurveFittingConstants.SLIDERS_X_SPACING,
      children: sliders
    });
    const slidersOffset = new HStrut(3);

    // add slider number observer; no dispose necessary because FitPanel is always present
    orderProperty.link(order => {
      // set the content of the slidersBox
      slidersBox.children = sliders.slice(sliders.length - order - 1, sliders.length);
      slidersBox.children = [slidersOffset].concat(slidersBox.children);
    });

    // show sliders when adjustable fit is selected; no dispose necessary because FitPanel is always present
    fitProperty.link(fit => {
      if (fit === FitType.BEST && contentNode.hasChild(slidersBox)) {
        contentNode.removeChild(slidersBox);
      } else if (fit === FitType.ADJUSTABLE) {
        contentNode.addChild(slidersBox);
      }
    });
  }
}

/**
 * Creates a radio button for this panel.
 *
 * @param {Property} property
 * @param {*} value
 * @param {string} label
 * @returns {AquaRadioButton}
 */
function createRadioButton(property, value, label) {
  return new AquaRadioButton(property, value, new Text(label, {
    font: CurveFittingConstants.CONTROL_FONT,
    maxWidth: 140 // determined empirically
  }), CurveFittingConstants.RADIO_BUTTON_OPTIONS);
}
curveFitting.register('FitPanel', FitPanel);
export default FitPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkhCb3giLCJIU3RydXQiLCJUZXh0IiwiVkJveCIsIkFxdWFSYWRpb0J1dHRvbiIsIlBhbmVsIiwiY3VydmVGaXR0aW5nIiwiQ3VydmVGaXR0aW5nU3RyaW5ncyIsIkN1cnZlRml0dGluZ0NvbnN0YW50cyIsIkZpdFR5cGUiLCJDb2VmZmljaWVudFNsaWRlck5vZGUiLCJFcXVhdGlvbk5vZGUiLCJhZGp1c3RhYmxlRml0U3RyaW5nIiwiYWRqdXN0YWJsZUZpdCIsImFTeW1ib2xTdHJpbmciLCJhU3ltYm9sIiwiYmVzdEZpdFN0cmluZyIsImJlc3RGaXQiLCJiU3ltYm9sU3RyaW5nIiwiYlN5bWJvbCIsImNTeW1ib2xTdHJpbmciLCJjU3ltYm9sIiwiZFN5bWJvbFN0cmluZyIsImRTeW1ib2wiLCJGaXRQYW5lbCIsImNvbnN0cnVjdG9yIiwic2xpZGVyUHJvcGVydHlBcnJheSIsImZpdFByb3BlcnR5Iiwib3JkZXJQcm9wZXJ0eSIsIm9wdGlvbnMiLCJjb3JuZXJSYWRpdXMiLCJQQU5FTF9DT1JORVJfUkFESVVTIiwiZmlsbCIsIlBBTkVMX0JBQ0tHUk9VTkRfQ09MT1IiLCJ4TWFyZ2luIiwiUEFORUxfTUFSR0lOIiwieU1hcmdpbiIsIm1heFdpZHRoIiwiUEFORUxfTUFYX1dJRFRIIiwiYmVzdEZpdEJ1dHRvbiIsImNyZWF0ZVJhZGlvQnV0dG9uIiwiQkVTVCIsImFkanVzdGFibGVGaXRCdXR0b24iLCJBREpVU1RBQkxFIiwicmFkaW9CdXR0b25zQm94IiwiYWxpZ24iLCJzcGFjaW5nIiwiQ09OVFJPTFNfWV9TUEFDSU5HIiwiY2hpbGRyZW4iLCJlcXVhdGlvbkZpdE5vZGUiLCJjb2VmZmljaWVudFRleHRPcHRpb25zIiwiZm9udCIsIkNPRUZGSUNJRU5UX0ZPTlQiLCJCTFVFX0NPTE9SIiwiY29udGVudE5vZGUiLCJzbGlkZXJzQXR0cmlidXRlcyIsInN0cmluZyIsInJhbmdlIiwiQ09OU1RBTlRfUkFOR0UiLCJMSU5FQVJfUkFOR0UiLCJRVUFEUkFUSUNfUkFOR0UiLCJDVUJJQ19SQU5HRSIsImFzY2VuZGluZ1NsaWRlcnMiLCJtYXAiLCJzbGlkZXJBdHRyaWJ1dGUiLCJpbmRleCIsInNsaWRlcnMiLCJyZXZlcnNlIiwic2xpZGVyc0JveCIsIlNMSURFUlNfWF9TUEFDSU5HIiwic2xpZGVyc09mZnNldCIsImxpbmsiLCJvcmRlciIsInNsaWNlIiwibGVuZ3RoIiwiY29uY2F0IiwiZml0IiwiaGFzQ2hpbGQiLCJyZW1vdmVDaGlsZCIsImFkZENoaWxkIiwicHJvcGVydHkiLCJ2YWx1ZSIsImxhYmVsIiwiQ09OVFJPTF9GT05UIiwiUkFESU9fQlVUVE9OX09QVElPTlMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZpdFBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2wgcGFuZWwgZm9yIHNlbGVjdGluZyBob3cgdGhlIGN1cnZlIGlzIGZpdCB0byBkYXRhIHBvaW50cy5cclxuICogRm9yIGFkanVzdGFibGUgZml0LCBwcm92aWRlcyBhZGRpdGlvbmFsIGNvbnRyb2xzIGZvciBjb2VmZmljaWVudHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmV5IFplbGVua292IChNbGVhcm5lcilcclxuICogQGF1dGhvciBTYXVyYWJoIFRvdGV5XHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIEhTdHJ1dCwgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBBcXVhUmFkaW9CdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FxdWFSYWRpb0J1dHRvbi5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgY3VydmVGaXR0aW5nIGZyb20gJy4uLy4uL2N1cnZlRml0dGluZy5qcyc7XHJcbmltcG9ydCBDdXJ2ZUZpdHRpbmdTdHJpbmdzIGZyb20gJy4uLy4uL0N1cnZlRml0dGluZ1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ3VydmVGaXR0aW5nQ29uc3RhbnRzIGZyb20gJy4uL0N1cnZlRml0dGluZ0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBGaXRUeXBlIGZyb20gJy4uL21vZGVsL0ZpdFR5cGUuanMnO1xyXG5pbXBvcnQgQ29lZmZpY2llbnRTbGlkZXJOb2RlIGZyb20gJy4vQ29lZmZpY2llbnRTbGlkZXJOb2RlLmpzJztcclxuaW1wb3J0IEVxdWF0aW9uTm9kZSBmcm9tICcuL0VxdWF0aW9uTm9kZS5qcyc7XHJcblxyXG5jb25zdCBhZGp1c3RhYmxlRml0U3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5hZGp1c3RhYmxlRml0O1xyXG5jb25zdCBhU3ltYm9sU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5hU3ltYm9sO1xyXG5jb25zdCBiZXN0Rml0U3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5iZXN0Rml0O1xyXG5jb25zdCBiU3ltYm9sU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5iU3ltYm9sO1xyXG5jb25zdCBjU3ltYm9sU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5jU3ltYm9sO1xyXG5jb25zdCBkU3ltYm9sU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5kU3ltYm9sO1xyXG5cclxuY2xhc3MgRml0UGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj5bXX0gc2xpZGVyUHJvcGVydHlBcnJheSAtIHN0b3JlZCBpbiBhc2NlbmRpbmcgb3JkZXIgb2YgdGhlIHBvbHlub21pYWwgZml0LCBzdGFydGluZyB3aXRoIG9yZGVyIHplcm8uXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Rml0VHlwZT59IGZpdFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gb3JkZXJQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggc2xpZGVyUHJvcGVydHlBcnJheSwgZml0UHJvcGVydHksIG9yZGVyUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIGNvcm5lclJhZGl1czogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLlBBTkVMX0NPUk5FUl9SQURJVVMsXHJcbiAgICAgIGZpbGw6IEN1cnZlRml0dGluZ0NvbnN0YW50cy5QQU5FTF9CQUNLR1JPVU5EX0NPTE9SLFxyXG4gICAgICB4TWFyZ2luOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuUEFORUxfTUFSR0lOLFxyXG4gICAgICB5TWFyZ2luOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuUEFORUxfTUFSR0lOLFxyXG4gICAgICBtYXhXaWR0aDogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLlBBTkVMX01BWF9XSURUSFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHJhZGlvIGJ1dHRvbnNcclxuICAgIGNvbnN0IGJlc3RGaXRCdXR0b24gPSBjcmVhdGVSYWRpb0J1dHRvbiggZml0UHJvcGVydHksIEZpdFR5cGUuQkVTVCwgYmVzdEZpdFN0cmluZyApO1xyXG4gICAgY29uc3QgYWRqdXN0YWJsZUZpdEJ1dHRvbiA9IGNyZWF0ZVJhZGlvQnV0dG9uKCBmaXRQcm9wZXJ0eSwgRml0VHlwZS5BREpVU1RBQkxFLCBhZGp1c3RhYmxlRml0U3RyaW5nICk7XHJcblxyXG4gICAgLy8gdmVydGljYWwgbGF5b3V0XHJcbiAgICBjb25zdCByYWRpb0J1dHRvbnNCb3ggPSBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuQ09OVFJPTFNfWV9TUEFDSU5HLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIGJlc3RGaXRCdXR0b24sXHJcbiAgICAgICAgYWRqdXN0YWJsZUZpdEJ1dHRvblxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gZXF1YXRpb24gdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY3VydmVcclxuICAgIGNvbnN0IGVxdWF0aW9uRml0Tm9kZSA9IG5ldyBFcXVhdGlvbk5vZGUoIG9yZGVyUHJvcGVydHksIHtcclxuICAgICAgY29lZmZpY2llbnRUZXh0T3B0aW9uczoge1xyXG4gICAgICAgIGZvbnQ6IEN1cnZlRml0dGluZ0NvbnN0YW50cy5DT0VGRklDSUVOVF9GT05ULFxyXG4gICAgICAgIGZpbGw6IEN1cnZlRml0dGluZ0NvbnN0YW50cy5CTFVFX0NPTE9SXHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyB2ZXJ0aWNhbCBsYXlvdXRcclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gbmV3IFZCb3goIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLkNPTlRST0xTX1lfU1BBQ0lORyxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICByYWRpb0J1dHRvbnNCb3gsXHJcbiAgICAgICAgZXF1YXRpb25GaXROb2RlXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudE5vZGUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBhdHRyaWJ1dGVzIGZvciBmb3VyIHNsaWRlcnMgaW4gQVNDRU5ESU5HIG9yZGVyIG9mIHBvbHlub21pYWxcclxuICAgIGNvbnN0IHNsaWRlcnNBdHRyaWJ1dGVzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgc3RyaW5nOiBkU3ltYm9sU3RyaW5nLFxyXG4gICAgICAgIHJhbmdlOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuQ09OU1RBTlRfUkFOR0VcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHN0cmluZzogY1N5bWJvbFN0cmluZyxcclxuICAgICAgICByYW5nZTogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLkxJTkVBUl9SQU5HRVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgc3RyaW5nOiBiU3ltYm9sU3RyaW5nLFxyXG4gICAgICAgIHJhbmdlOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuUVVBRFJBVElDX1JBTkdFXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBzdHJpbmc6IGFTeW1ib2xTdHJpbmcsXHJcbiAgICAgICAgcmFuZ2U6IEN1cnZlRml0dGluZ0NvbnN0YW50cy5DVUJJQ19SQU5HRVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBhcnJheSBpbiBBU0NFTkRJTkcgb3JkZXIgb2YgcG9seW5vbWlhbFxyXG4gICAgY29uc3QgYXNjZW5kaW5nU2xpZGVycyA9IHNsaWRlcnNBdHRyaWJ1dGVzLm1hcChcclxuICAgICAgKCBzbGlkZXJBdHRyaWJ1dGUsIGluZGV4ICkgPT4gbmV3IENvZWZmaWNpZW50U2xpZGVyTm9kZShcclxuICAgICAgICBzbGlkZXJQcm9wZXJ0eUFycmF5WyBpbmRleCBdLFxyXG4gICAgICAgIHNsaWRlckF0dHJpYnV0ZS5yYW5nZSxcclxuICAgICAgICBzbGlkZXJBdHRyaWJ1dGUuc3RyaW5nXHJcbiAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgLy8gd2Ugd2FudCBzbGlkZXJzIGluIERFU0NFTkRJTkcgb3JkZXIgb2YgcG9seW5vbWlhbFxyXG4gICAgY29uc3Qgc2xpZGVycyA9IGFzY2VuZGluZ1NsaWRlcnMucmV2ZXJzZSgpO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBzbGlkZXIgYm94IHVuZGVyIHRoZSBlcXVhdGlvbkZpdE5vZGVcclxuICAgIC8vIEhCb3ggYW5kIEhTdHJ1dCBzcGFjaW5nIGFyZSBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcbiAgICBjb25zdCBzbGlkZXJzQm94ID0gbmV3IEhCb3goIHtcclxuICAgICAgc3BhY2luZzogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLlNMSURFUlNfWF9TUEFDSU5HLFxyXG4gICAgICBjaGlsZHJlbjogc2xpZGVyc1xyXG4gICAgfSApO1xyXG4gICAgY29uc3Qgc2xpZGVyc09mZnNldCA9IG5ldyBIU3RydXQoIDMgKTtcclxuXHJcbiAgICAvLyBhZGQgc2xpZGVyIG51bWJlciBvYnNlcnZlcjsgbm8gZGlzcG9zZSBuZWNlc3NhcnkgYmVjYXVzZSBGaXRQYW5lbCBpcyBhbHdheXMgcHJlc2VudFxyXG4gICAgb3JkZXJQcm9wZXJ0eS5saW5rKCBvcmRlciA9PiB7XHJcblxyXG4gICAgICAvLyBzZXQgdGhlIGNvbnRlbnQgb2YgdGhlIHNsaWRlcnNCb3hcclxuICAgICAgc2xpZGVyc0JveC5jaGlsZHJlbiA9IHNsaWRlcnMuc2xpY2UoIHNsaWRlcnMubGVuZ3RoIC0gb3JkZXIgLSAxLCBzbGlkZXJzLmxlbmd0aCApO1xyXG5cclxuICAgICAgc2xpZGVyc0JveC5jaGlsZHJlbiA9IFsgc2xpZGVyc09mZnNldCBdLmNvbmNhdCggc2xpZGVyc0JveC5jaGlsZHJlbiApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHNob3cgc2xpZGVycyB3aGVuIGFkanVzdGFibGUgZml0IGlzIHNlbGVjdGVkOyBubyBkaXNwb3NlIG5lY2Vzc2FyeSBiZWNhdXNlIEZpdFBhbmVsIGlzIGFsd2F5cyBwcmVzZW50XHJcbiAgICBmaXRQcm9wZXJ0eS5saW5rKCBmaXQgPT4ge1xyXG4gICAgICBpZiAoIGZpdCA9PT0gRml0VHlwZS5CRVNUICYmIGNvbnRlbnROb2RlLmhhc0NoaWxkKCBzbGlkZXJzQm94ICkgKSB7XHJcbiAgICAgICAgY29udGVudE5vZGUucmVtb3ZlQ2hpbGQoIHNsaWRlcnNCb3ggKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggZml0ID09PSBGaXRUeXBlLkFESlVTVEFCTEUgKSB7XHJcbiAgICAgICAgY29udGVudE5vZGUuYWRkQ2hpbGQoIHNsaWRlcnNCb3ggKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSByYWRpbyBidXR0b24gZm9yIHRoaXMgcGFuZWwuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UHJvcGVydHl9IHByb3BlcnR5XHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsXHJcbiAqIEByZXR1cm5zIHtBcXVhUmFkaW9CdXR0b259XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSYWRpb0J1dHRvbiggcHJvcGVydHksIHZhbHVlLCBsYWJlbCApIHtcclxuICByZXR1cm4gbmV3IEFxdWFSYWRpb0J1dHRvbihcclxuICAgIHByb3BlcnR5LFxyXG4gICAgdmFsdWUsXHJcbiAgICBuZXcgVGV4dCggbGFiZWwsIHtcclxuICAgICAgZm9udDogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLkNPTlRST0xfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDE0MCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICB9ICksXHJcbiAgICBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuUkFESU9fQlVUVE9OX09QVElPTlNcclxuICApO1xyXG59XHJcblxyXG5jdXJ2ZUZpdHRpbmcucmVnaXN0ZXIoICdGaXRQYW5lbCcsIEZpdFBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IEZpdFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzVFLE9BQU9DLGVBQWUsTUFBTSx1Q0FBdUM7QUFDbkUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxP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