// Copyright 2015-2022, University of Colorado Boulder

/**
 * Node with single parameter slider in 'Curve Fitting' simulation.
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import merge from '../../../../phet-core/js/merge.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import VSlider from '../../../../sun/js/VSlider.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingConstants from '../CurveFittingConstants.js';

// constants
const SLIDER_OPTIONS = {
  trackFill: 'black',
  trackSize: new Dimension2(1, 120),
  thumbSize: new Dimension2(20, 10),
  minorTickLineWidth: 2,
  minorTickLength: 12,
  thumbTouchAreaXDilation: 8,
  // supposed to make touch horizontal areas flush; see #72
  thumbMouseAreaXDilation: 8,
  thumbMouseAreaYDilation: 10
};
const LABEL_OPTIONS = {
  font: CurveFittingConstants.COEFFICIENT_FONT,
  fill: CurveFittingConstants.BLUE_COLOR,
  maxWidth: 20
};
class CoefficientSliderNode extends VBox {
  /**
   * @param {Property.<number>} property - parameter to track.
   * @param {Range} range - Possible range for Property.
   * @param {string} label - Label for slider.
   * @param {Object} [options] for slider node.
   */
  constructor(property, range, label, options) {
    options = merge({
      sliderOptions: SLIDER_OPTIONS,
      labelOptions: LABEL_OPTIONS
    }, options);
    const sliderNode = new VSlider(property, range, options.sliderOptions);

    // add central tick
    sliderNode.addMinorTick(0, '');
    super(merge({
      children: [sliderNode, new Text(label, options.labelOptions)]
    }, options));
  }
}
curveFitting.register('CoefficientSliderNode', CoefficientSliderNode);
export default CoefficientSliderNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwibWVyZ2UiLCJUZXh0IiwiVkJveCIsIlZTbGlkZXIiLCJjdXJ2ZUZpdHRpbmciLCJDdXJ2ZUZpdHRpbmdDb25zdGFudHMiLCJTTElERVJfT1BUSU9OUyIsInRyYWNrRmlsbCIsInRyYWNrU2l6ZSIsInRodW1iU2l6ZSIsIm1pbm9yVGlja0xpbmVXaWR0aCIsIm1pbm9yVGlja0xlbmd0aCIsInRodW1iVG91Y2hBcmVhWERpbGF0aW9uIiwidGh1bWJNb3VzZUFyZWFYRGlsYXRpb24iLCJ0aHVtYk1vdXNlQXJlYVlEaWxhdGlvbiIsIkxBQkVMX09QVElPTlMiLCJmb250IiwiQ09FRkZJQ0lFTlRfRk9OVCIsImZpbGwiLCJCTFVFX0NPTE9SIiwibWF4V2lkdGgiLCJDb2VmZmljaWVudFNsaWRlck5vZGUiLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwicmFuZ2UiLCJsYWJlbCIsIm9wdGlvbnMiLCJzbGlkZXJPcHRpb25zIiwibGFiZWxPcHRpb25zIiwic2xpZGVyTm9kZSIsImFkZE1pbm9yVGljayIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb2VmZmljaWVudFNsaWRlck5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTm9kZSB3aXRoIHNpbmdsZSBwYXJhbWV0ZXIgc2xpZGVyIGluICdDdXJ2ZSBGaXR0aW5nJyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJleSBaZWxlbmtvdiAoTWxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBWU2xpZGVyIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9WU2xpZGVyLmpzJztcclxuaW1wb3J0IGN1cnZlRml0dGluZyBmcm9tICcuLi8uLi9jdXJ2ZUZpdHRpbmcuanMnO1xyXG5pbXBvcnQgQ3VydmVGaXR0aW5nQ29uc3RhbnRzIGZyb20gJy4uL0N1cnZlRml0dGluZ0NvbnN0YW50cy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgU0xJREVSX09QVElPTlMgPSB7XHJcbiAgdHJhY2tGaWxsOiAnYmxhY2snLFxyXG4gIHRyYWNrU2l6ZTogbmV3IERpbWVuc2lvbjIoIDEsIDEyMCApLFxyXG4gIHRodW1iU2l6ZTogbmV3IERpbWVuc2lvbjIoIDIwLCAxMCApLFxyXG4gIG1pbm9yVGlja0xpbmVXaWR0aDogMixcclxuICBtaW5vclRpY2tMZW5ndGg6IDEyLFxyXG4gIHRodW1iVG91Y2hBcmVhWERpbGF0aW9uOiA4LCAvLyBzdXBwb3NlZCB0byBtYWtlIHRvdWNoIGhvcml6b250YWwgYXJlYXMgZmx1c2g7IHNlZSAjNzJcclxuICB0aHVtYk1vdXNlQXJlYVhEaWxhdGlvbjogOCxcclxuICB0aHVtYk1vdXNlQXJlYVlEaWxhdGlvbjogMTBcclxufTtcclxuY29uc3QgTEFCRUxfT1BUSU9OUyA9IHtcclxuICBmb250OiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuQ09FRkZJQ0lFTlRfRk9OVCxcclxuICBmaWxsOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuQkxVRV9DT0xPUixcclxuICBtYXhXaWR0aDogMjBcclxufTtcclxuXHJcbmNsYXNzIENvZWZmaWNpZW50U2xpZGVyTm9kZSBleHRlbmRzIFZCb3gge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxudW1iZXI+fSBwcm9wZXJ0eSAtIHBhcmFtZXRlciB0byB0cmFjay5cclxuICAgKiBAcGFyYW0ge1JhbmdlfSByYW5nZSAtIFBvc3NpYmxlIHJhbmdlIGZvciBQcm9wZXJ0eS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSBMYWJlbCBmb3Igc2xpZGVyLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gZm9yIHNsaWRlciBub2RlLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eSwgcmFuZ2UsIGxhYmVsLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBzbGlkZXJPcHRpb25zOiBTTElERVJfT1BUSU9OUyxcclxuICAgICAgbGFiZWxPcHRpb25zOiBMQUJFTF9PUFRJT05TXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3Qgc2xpZGVyTm9kZSA9IG5ldyBWU2xpZGVyKCBwcm9wZXJ0eSwgcmFuZ2UsIG9wdGlvbnMuc2xpZGVyT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGFkZCBjZW50cmFsIHRpY2tcclxuICAgIHNsaWRlck5vZGUuYWRkTWlub3JUaWNrKCAwLCAnJyApO1xyXG5cclxuICAgIHN1cGVyKCBtZXJnZSgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIHNsaWRlck5vZGUsXHJcbiAgICAgICAgbmV3IFRleHQoIGxhYmVsLCBvcHRpb25zLmxhYmVsT3B0aW9ucyApXHJcbiAgICAgIF1cclxuICAgIH0sIG9wdGlvbnMgKSApO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmN1cnZlRml0dGluZy5yZWdpc3RlciggJ0NvZWZmaWNpZW50U2xpZGVyTm9kZScsIENvZWZmaWNpZW50U2xpZGVyTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBDb2VmZmljaWVudFNsaWRlck5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2Qjs7QUFFL0Q7QUFDQSxNQUFNQyxjQUFjLEdBQUc7RUFDckJDLFNBQVMsRUFBRSxPQUFPO0VBQ2xCQyxTQUFTLEVBQUUsSUFBSVQsVUFBVSxDQUFFLENBQUMsRUFBRSxHQUFJLENBQUM7RUFDbkNVLFNBQVMsRUFBRSxJQUFJVixVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztFQUNuQ1csa0JBQWtCLEVBQUUsQ0FBQztFQUNyQkMsZUFBZSxFQUFFLEVBQUU7RUFDbkJDLHVCQUF1QixFQUFFLENBQUM7RUFBRTtFQUM1QkMsdUJBQXVCLEVBQUUsQ0FBQztFQUMxQkMsdUJBQXVCLEVBQUU7QUFDM0IsQ0FBQztBQUNELE1BQU1DLGFBQWEsR0FBRztFQUNwQkMsSUFBSSxFQUFFWCxxQkFBcUIsQ0FBQ1ksZ0JBQWdCO0VBQzVDQyxJQUFJLEVBQUViLHFCQUFxQixDQUFDYyxVQUFVO0VBQ3RDQyxRQUFRLEVBQUU7QUFDWixDQUFDO0FBRUQsTUFBTUMscUJBQXFCLFNBQVNuQixJQUFJLENBQUM7RUFFdkM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VvQixXQUFXQSxDQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUc7SUFFN0NBLE9BQU8sR0FBRzFCLEtBQUssQ0FBRTtNQUNmMkIsYUFBYSxFQUFFckIsY0FBYztNQUM3QnNCLFlBQVksRUFBRWI7SUFDaEIsQ0FBQyxFQUFFVyxPQUFRLENBQUM7SUFFWixNQUFNRyxVQUFVLEdBQUcsSUFBSTFCLE9BQU8sQ0FBRW9CLFFBQVEsRUFBRUMsS0FBSyxFQUFFRSxPQUFPLENBQUNDLGFBQWMsQ0FBQzs7SUFFeEU7SUFDQUUsVUFBVSxDQUFDQyxZQUFZLENBQUUsQ0FBQyxFQUFFLEVBQUcsQ0FBQztJQUVoQyxLQUFLLENBQUU5QixLQUFLLENBQUU7TUFDWitCLFFBQVEsRUFBRSxDQUNSRixVQUFVLEVBQ1YsSUFBSTVCLElBQUksQ0FBRXdCLEtBQUssRUFBRUMsT0FBTyxDQUFDRSxZQUFhLENBQUM7SUFFM0MsQ0FBQyxFQUFFRixPQUFRLENBQUUsQ0FBQztFQUNoQjtBQUVGO0FBRUF0QixZQUFZLENBQUM0QixRQUFRLENBQUUsdUJBQXVCLEVBQUVYLHFCQUFzQixDQUFDO0FBQ3ZFLGVBQWVBLHFCQUFxQiJ9