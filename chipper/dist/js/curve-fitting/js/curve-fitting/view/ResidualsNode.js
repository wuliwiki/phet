// Copyright 2017-2022, University of Colorado Boulder

/**
 * Residuals node in 'Curve Fitting' simulation that is responsible for the vertical lines between the data points and the curve
 *
 * @author Martin Veillette (Berea College)
 */

import { Shape } from '../../../../kite/js/imports.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingConstants from '../CurveFittingConstants.js';

// constants
const RESIDUAL_OPTIONS = {
  stroke: CurveFittingConstants.GRAY_COLOR,
  lineWidth: 2
};
class ResidualsNode extends Node {
  /**
   * @param {Points} points
   * @param {Curve} curve - curve model.
   * @param {Property.<boolean>} residualsVisibleProperty
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(points, curve, residualsVisibleProperty, modelViewTransform) {
    super();

    // add clip area
    this.clipArea = Shape.bounds(modelViewTransform.modelToViewBounds(CurveFittingConstants.GRAPH_BACKGROUND_MODEL_BOUNDS));

    // create and add path for all residual lines
    const residualsPath = new Path(null, RESIDUAL_OPTIONS);
    this.addChild(residualsPath);

    /**
     * Updates the paths for all the residuals from all the points
     */
    const updateResiduals = () => {
      // invalidate shape
      residualsPath.shape = null;
      if (residualsVisibleProperty.value && curve.isCurvePresent()) {
        const residualsShape = new Shape();

        // updates the path residuals which are the vertical lines connecting data points to curve
        points.getRelevantPoints().forEach(point => {
          residualsShape.moveToPoint(point.positionProperty.value);
          residualsShape.verticalLineTo(curve.getYValueAt(point.positionProperty.value.x));
        });
        residualsPath.shape = modelViewTransform.modelToViewShape(residualsShape);
      }
    };

    // unlink and removeListener unnecessary: present for the lifetime of the simulation
    residualsVisibleProperty.link(updateResiduals);
    curve.orderProperty.link(updateResiduals);
    curve.updateCurveEmitter.addListener(updateResiduals);
  }
}
curveFitting.register('ResidualsNode', ResidualsNode);
export default ResidualsNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIk5vZGUiLCJQYXRoIiwiY3VydmVGaXR0aW5nIiwiQ3VydmVGaXR0aW5nQ29uc3RhbnRzIiwiUkVTSURVQUxfT1BUSU9OUyIsInN0cm9rZSIsIkdSQVlfQ09MT1IiLCJsaW5lV2lkdGgiLCJSZXNpZHVhbHNOb2RlIiwiY29uc3RydWN0b3IiLCJwb2ludHMiLCJjdXJ2ZSIsInJlc2lkdWFsc1Zpc2libGVQcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImNsaXBBcmVhIiwiYm91bmRzIiwibW9kZWxUb1ZpZXdCb3VuZHMiLCJHUkFQSF9CQUNLR1JPVU5EX01PREVMX0JPVU5EUyIsInJlc2lkdWFsc1BhdGgiLCJhZGRDaGlsZCIsInVwZGF0ZVJlc2lkdWFscyIsInNoYXBlIiwidmFsdWUiLCJpc0N1cnZlUHJlc2VudCIsInJlc2lkdWFsc1NoYXBlIiwiZ2V0UmVsZXZhbnRQb2ludHMiLCJmb3JFYWNoIiwicG9pbnQiLCJtb3ZlVG9Qb2ludCIsInBvc2l0aW9uUHJvcGVydHkiLCJ2ZXJ0aWNhbExpbmVUbyIsImdldFlWYWx1ZUF0IiwieCIsIm1vZGVsVG9WaWV3U2hhcGUiLCJsaW5rIiwib3JkZXJQcm9wZXJ0eSIsInVwZGF0ZUN1cnZlRW1pdHRlciIsImFkZExpc3RlbmVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZXNpZHVhbHNOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJlc2lkdWFscyBub2RlIGluICdDdXJ2ZSBGaXR0aW5nJyBzaW11bGF0aW9uIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHRoZSB2ZXJ0aWNhbCBsaW5lcyBiZXR3ZWVuIHRoZSBkYXRhIHBvaW50cyBhbmQgdGhlIGN1cnZlXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZSAoQmVyZWEgQ29sbGVnZSlcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY3VydmVGaXR0aW5nIGZyb20gJy4uLy4uL2N1cnZlRml0dGluZy5qcyc7XHJcbmltcG9ydCBDdXJ2ZUZpdHRpbmdDb25zdGFudHMgZnJvbSAnLi4vQ3VydmVGaXR0aW5nQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBSRVNJRFVBTF9PUFRJT05TID0geyBzdHJva2U6IEN1cnZlRml0dGluZ0NvbnN0YW50cy5HUkFZX0NPTE9SLCBsaW5lV2lkdGg6IDIgfTtcclxuXHJcbmNsYXNzIFJlc2lkdWFsc05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQb2ludHN9IHBvaW50c1xyXG4gICAqIEBwYXJhbSB7Q3VydmV9IGN1cnZlIC0gY3VydmUgbW9kZWwuXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHJlc2lkdWFsc1Zpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHBvaW50cywgY3VydmUsIHJlc2lkdWFsc1Zpc2libGVQcm9wZXJ0eSwgbW9kZWxWaWV3VHJhbnNmb3JtICkge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gYWRkIGNsaXAgYXJlYVxyXG4gICAgdGhpcy5jbGlwQXJlYSA9IFNoYXBlLmJvdW5kcyggbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3Qm91bmRzKCBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuR1JBUEhfQkFDS0dST1VORF9NT0RFTF9CT1VORFMgKSApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBhbmQgYWRkIHBhdGggZm9yIGFsbCByZXNpZHVhbCBsaW5lc1xyXG4gICAgY29uc3QgcmVzaWR1YWxzUGF0aCA9IG5ldyBQYXRoKCBudWxsLCBSRVNJRFVBTF9PUFRJT05TICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCByZXNpZHVhbHNQYXRoICk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBwYXRocyBmb3IgYWxsIHRoZSByZXNpZHVhbHMgZnJvbSBhbGwgdGhlIHBvaW50c1xyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVSZXNpZHVhbHMgPSAoKSA9PiB7XHJcblxyXG4gICAgICAvLyBpbnZhbGlkYXRlIHNoYXBlXHJcbiAgICAgIHJlc2lkdWFsc1BhdGguc2hhcGUgPSBudWxsO1xyXG5cclxuICAgICAgaWYgKCByZXNpZHVhbHNWaXNpYmxlUHJvcGVydHkudmFsdWUgJiYgY3VydmUuaXNDdXJ2ZVByZXNlbnQoKSApIHtcclxuICAgICAgICBjb25zdCByZXNpZHVhbHNTaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG5cclxuICAgICAgICAvLyB1cGRhdGVzIHRoZSBwYXRoIHJlc2lkdWFscyB3aGljaCBhcmUgdGhlIHZlcnRpY2FsIGxpbmVzIGNvbm5lY3RpbmcgZGF0YSBwb2ludHMgdG8gY3VydmVcclxuICAgICAgICBwb2ludHMuZ2V0UmVsZXZhbnRQb2ludHMoKS5mb3JFYWNoKCBwb2ludCA9PiB7XHJcbiAgICAgICAgICByZXNpZHVhbHNTaGFwZS5tb3ZlVG9Qb2ludCggcG9pbnQucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgICAgICAgcmVzaWR1YWxzU2hhcGUudmVydGljYWxMaW5lVG8oIGN1cnZlLmdldFlWYWx1ZUF0KCBwb2ludC5wb3NpdGlvblByb3BlcnR5LnZhbHVlLnggKSApO1xyXG4gICAgICAgIH0gKTtcclxuICAgICAgICByZXNpZHVhbHNQYXRoLnNoYXBlID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3U2hhcGUoIHJlc2lkdWFsc1NoYXBlICk7XHJcblxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHVubGluayBhbmQgcmVtb3ZlTGlzdGVuZXIgdW5uZWNlc3Nhcnk6IHByZXNlbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltdWxhdGlvblxyXG4gICAgcmVzaWR1YWxzVmlzaWJsZVByb3BlcnR5LmxpbmsoIHVwZGF0ZVJlc2lkdWFscyApO1xyXG4gICAgY3VydmUub3JkZXJQcm9wZXJ0eS5saW5rKCB1cGRhdGVSZXNpZHVhbHMgKTtcclxuICAgIGN1cnZlLnVwZGF0ZUN1cnZlRW1pdHRlci5hZGRMaXN0ZW5lciggdXBkYXRlUmVzaWR1YWxzICk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuY3VydmVGaXR0aW5nLnJlZ2lzdGVyKCAnUmVzaWR1YWxzTm9kZScsIFJlc2lkdWFsc05vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgUmVzaWR1YWxzTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxxQkFBcUIsTUFBTSw2QkFBNkI7O0FBRS9EO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUc7RUFBRUMsTUFBTSxFQUFFRixxQkFBcUIsQ0FBQ0csVUFBVTtFQUFFQyxTQUFTLEVBQUU7QUFBRSxDQUFDO0FBRW5GLE1BQU1DLGFBQWEsU0FBU1IsSUFBSSxDQUFDO0VBRS9CO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFUyxXQUFXQSxDQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsd0JBQXdCLEVBQUVDLGtCQUFrQixFQUFHO0lBRXpFLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLEdBQUdmLEtBQUssQ0FBQ2dCLE1BQU0sQ0FBRUYsa0JBQWtCLENBQUNHLGlCQUFpQixDQUFFYixxQkFBcUIsQ0FBQ2MsNkJBQThCLENBQUUsQ0FBQzs7SUFFM0g7SUFDQSxNQUFNQyxhQUFhLEdBQUcsSUFBSWpCLElBQUksQ0FBRSxJQUFJLEVBQUVHLGdCQUFpQixDQUFDO0lBQ3hELElBQUksQ0FBQ2UsUUFBUSxDQUFFRCxhQUFjLENBQUM7O0lBRTlCO0FBQ0o7QUFDQTtJQUNJLE1BQU1FLGVBQWUsR0FBR0EsQ0FBQSxLQUFNO01BRTVCO01BQ0FGLGFBQWEsQ0FBQ0csS0FBSyxHQUFHLElBQUk7TUFFMUIsSUFBS1Qsd0JBQXdCLENBQUNVLEtBQUssSUFBSVgsS0FBSyxDQUFDWSxjQUFjLENBQUMsQ0FBQyxFQUFHO1FBQzlELE1BQU1DLGNBQWMsR0FBRyxJQUFJekIsS0FBSyxDQUFDLENBQUM7O1FBRWxDO1FBQ0FXLE1BQU0sQ0FBQ2UsaUJBQWlCLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUVDLEtBQUssSUFBSTtVQUMzQ0gsY0FBYyxDQUFDSSxXQUFXLENBQUVELEtBQUssQ0FBQ0UsZ0JBQWdCLENBQUNQLEtBQU0sQ0FBQztVQUMxREUsY0FBYyxDQUFDTSxjQUFjLENBQUVuQixLQUFLLENBQUNvQixXQUFXLENBQUVKLEtBQUssQ0FBQ0UsZ0JBQWdCLENBQUNQLEtBQUssQ0FBQ1UsQ0FBRSxDQUFFLENBQUM7UUFDdEYsQ0FBRSxDQUFDO1FBQ0hkLGFBQWEsQ0FBQ0csS0FBSyxHQUFHUixrQkFBa0IsQ0FBQ29CLGdCQUFnQixDQUFFVCxjQUFlLENBQUM7TUFFN0U7SUFDRixDQUFDOztJQUVEO0lBQ0FaLHdCQUF3QixDQUFDc0IsSUFBSSxDQUFFZCxlQUFnQixDQUFDO0lBQ2hEVCxLQUFLLENBQUN3QixhQUFhLENBQUNELElBQUksQ0FBRWQsZUFBZ0IsQ0FBQztJQUMzQ1QsS0FBSyxDQUFDeUIsa0JBQWtCLENBQUNDLFdBQVcsQ0FBRWpCLGVBQWdCLENBQUM7RUFDekQ7QUFFRjtBQUVBbEIsWUFBWSxDQUFDb0MsUUFBUSxDQUFFLGVBQWUsRUFBRTlCLGFBQWMsQ0FBQztBQUN2RCxlQUFlQSxhQUFhIn0=