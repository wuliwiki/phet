// Copyright 2016-2022, University of Colorado Boulder

/**
 * Dialog that provides information about the reduced chi-squared statistic.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Saurabh Totey
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import FormulaNode from '../../../../scenery-phet/js/FormulaNode.js';
import { HBox, HStrut, RichText, Text, VBox } from '../../../../scenery/js/imports.js';
import Dialog from '../../../../sun/js/Dialog.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingStrings from '../../CurveFittingStrings.js';
import CurveFittingConstants from '../CurveFittingConstants.js';
const fEqualsNumberOfParametersPatternString = CurveFittingStrings.fEqualsNumberOfParametersPattern;
const nEqualsNumberOfDataPointsPatternString = CurveFittingStrings.nEqualsNumberOfDataPointsPattern;
const chiSymbolString = CurveFittingStrings.chiSymbol;
const fSymbolString = CurveFittingStrings.fSymbol;
const nSymbolString = CurveFittingStrings.nSymbol;
const xSymbolString = CurveFittingStrings.xSymbol;
const ySymbolString = CurveFittingStrings.ySymbol;
const theReducedChiSquaredStatisticIsString = CurveFittingStrings.theReducedChiSquaredStatisticIs;

// constants
const TEXT_OPTIONS = {
  font: CurveFittingConstants.INFO_DIALOG_NORMAL_FONT
};
const FORMULA_STRING = `${chiSymbolString}_r^2 = ` + `\\frac{1}{${nSymbolString} - ${fSymbolString}} ` + '\\sum_i ' + `\\frac{[${ySymbolString}(${xSymbolString}_i) - ${ySymbolString}_i]^2}{\\sigma_i^2}`;
class ReducedChiSquaredStatisticDialog extends Dialog {
  constructor() {
    // Pattern for styling a symbol with the PhET standard math font
    const symbolPattern = `<i style='font-family:${CurveFittingConstants.INFO_DIALOG_SYMBOL_FONT.family}'>{{symbol}}</i>`;
    const numberOfDataPointsNode = new RichText(StringUtils.fillIn(nEqualsNumberOfDataPointsPatternString, {
      nSymbol: StringUtils.fillIn(symbolPattern, {
        symbol: nSymbolString
      })
    }), TEXT_OPTIONS);
    const numberOfParametersNode = new RichText(StringUtils.fillIn(fEqualsNumberOfParametersPatternString, {
      fSymbol: StringUtils.fillIn(symbolPattern, {
        symbol: fSymbolString
      })
    }), TEXT_OPTIONS);
    const contentNode = new VBox({
      align: 'left',
      spacing: 10,
      children: [new Text(theReducedChiSquaredStatisticIsString, TEXT_OPTIONS), new HBox({
        children: [new HStrut(20), new FormulaNode(FORMULA_STRING)]
      }), numberOfDataPointsNode, numberOfParametersNode],
      maxWidth: 500 // determined empirically
    });

    super(contentNode);
  }
}
curveFitting.register('ReducedChiSquaredStatisticDialog', ReducedChiSquaredStatisticDialog);
export default ReducedChiSquaredStatisticDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIkZvcm11bGFOb2RlIiwiSEJveCIsIkhTdHJ1dCIsIlJpY2hUZXh0IiwiVGV4dCIsIlZCb3giLCJEaWFsb2ciLCJjdXJ2ZUZpdHRpbmciLCJDdXJ2ZUZpdHRpbmdTdHJpbmdzIiwiQ3VydmVGaXR0aW5nQ29uc3RhbnRzIiwiZkVxdWFsc051bWJlck9mUGFyYW1ldGVyc1BhdHRlcm5TdHJpbmciLCJmRXF1YWxzTnVtYmVyT2ZQYXJhbWV0ZXJzUGF0dGVybiIsIm5FcXVhbHNOdW1iZXJPZkRhdGFQb2ludHNQYXR0ZXJuU3RyaW5nIiwibkVxdWFsc051bWJlck9mRGF0YVBvaW50c1BhdHRlcm4iLCJjaGlTeW1ib2xTdHJpbmciLCJjaGlTeW1ib2wiLCJmU3ltYm9sU3RyaW5nIiwiZlN5bWJvbCIsIm5TeW1ib2xTdHJpbmciLCJuU3ltYm9sIiwieFN5bWJvbFN0cmluZyIsInhTeW1ib2wiLCJ5U3ltYm9sU3RyaW5nIiwieVN5bWJvbCIsInRoZVJlZHVjZWRDaGlTcXVhcmVkU3RhdGlzdGljSXNTdHJpbmciLCJ0aGVSZWR1Y2VkQ2hpU3F1YXJlZFN0YXRpc3RpY0lzIiwiVEVYVF9PUFRJT05TIiwiZm9udCIsIklORk9fRElBTE9HX05PUk1BTF9GT05UIiwiRk9STVVMQV9TVFJJTkciLCJSZWR1Y2VkQ2hpU3F1YXJlZFN0YXRpc3RpY0RpYWxvZyIsImNvbnN0cnVjdG9yIiwic3ltYm9sUGF0dGVybiIsIklORk9fRElBTE9HX1NZTUJPTF9GT05UIiwiZmFtaWx5IiwibnVtYmVyT2ZEYXRhUG9pbnRzTm9kZSIsImZpbGxJbiIsInN5bWJvbCIsIm51bWJlck9mUGFyYW1ldGVyc05vZGUiLCJjb250ZW50Tm9kZSIsImFsaWduIiwic3BhY2luZyIsImNoaWxkcmVuIiwibWF4V2lkdGgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJlZHVjZWRDaGlTcXVhcmVkU3RhdGlzdGljRGlhbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpYWxvZyB0aGF0IHByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWR1Y2VkIGNoaS1zcXVhcmVkIHN0YXRpc3RpYy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBTYXVyYWJoIFRvdGV5XHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBGb3JtdWxhTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvRm9ybXVsYU5vZGUuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBIU3RydXQsIFJpY2hUZXh0LCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IERpYWxvZyBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvRGlhbG9nLmpzJztcclxuaW1wb3J0IGN1cnZlRml0dGluZyBmcm9tICcuLi8uLi9jdXJ2ZUZpdHRpbmcuanMnO1xyXG5pbXBvcnQgQ3VydmVGaXR0aW5nU3RyaW5ncyBmcm9tICcuLi8uLi9DdXJ2ZUZpdHRpbmdTdHJpbmdzLmpzJztcclxuaW1wb3J0IEN1cnZlRml0dGluZ0NvbnN0YW50cyBmcm9tICcuLi9DdXJ2ZUZpdHRpbmdDb25zdGFudHMuanMnO1xyXG5cclxuY29uc3QgZkVxdWFsc051bWJlck9mUGFyYW1ldGVyc1BhdHRlcm5TdHJpbmcgPSBDdXJ2ZUZpdHRpbmdTdHJpbmdzLmZFcXVhbHNOdW1iZXJPZlBhcmFtZXRlcnNQYXR0ZXJuO1xyXG5jb25zdCBuRXF1YWxzTnVtYmVyT2ZEYXRhUG9pbnRzUGF0dGVyblN0cmluZyA9IEN1cnZlRml0dGluZ1N0cmluZ3MubkVxdWFsc051bWJlck9mRGF0YVBvaW50c1BhdHRlcm47XHJcbmNvbnN0IGNoaVN5bWJvbFN0cmluZyA9IEN1cnZlRml0dGluZ1N0cmluZ3MuY2hpU3ltYm9sO1xyXG5jb25zdCBmU3ltYm9sU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5mU3ltYm9sO1xyXG5jb25zdCBuU3ltYm9sU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5uU3ltYm9sO1xyXG5jb25zdCB4U3ltYm9sU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy54U3ltYm9sO1xyXG5jb25zdCB5U3ltYm9sU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy55U3ltYm9sO1xyXG5jb25zdCB0aGVSZWR1Y2VkQ2hpU3F1YXJlZFN0YXRpc3RpY0lzU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy50aGVSZWR1Y2VkQ2hpU3F1YXJlZFN0YXRpc3RpY0lzO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFRFWFRfT1BUSU9OUyA9IHtcclxuICBmb250OiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuSU5GT19ESUFMT0dfTk9STUFMX0ZPTlRcclxufTtcclxuXHJcbmNvbnN0IEZPUk1VTEFfU1RSSU5HID0gYCR7Y2hpU3ltYm9sU3RyaW5nfV9yXjIgPSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICBgXFxcXGZyYWN7MX17JHtuU3ltYm9sU3RyaW5nfSAtICR7ZlN5bWJvbFN0cmluZ319IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICdcXFxcc3VtX2kgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgYFxcXFxmcmFje1ske3lTeW1ib2xTdHJpbmd9KCR7eFN5bWJvbFN0cmluZ31faSkgLSAke3lTeW1ib2xTdHJpbmd9X2ldXjJ9e1xcXFxzaWdtYV9pXjJ9YDtcclxuXHJcbmNsYXNzIFJlZHVjZWRDaGlTcXVhcmVkU3RhdGlzdGljRGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgLy8gUGF0dGVybiBmb3Igc3R5bGluZyBhIHN5bWJvbCB3aXRoIHRoZSBQaEVUIHN0YW5kYXJkIG1hdGggZm9udFxyXG4gICAgY29uc3Qgc3ltYm9sUGF0dGVybiA9IGA8aSBzdHlsZT0nZm9udC1mYW1pbHk6JHtDdXJ2ZUZpdHRpbmdDb25zdGFudHMuSU5GT19ESUFMT0dfU1lNQk9MX0ZPTlQuZmFtaWx5fSc+e3tzeW1ib2x9fTwvaT5gO1xyXG5cclxuICAgIGNvbnN0IG51bWJlck9mRGF0YVBvaW50c05vZGUgPSBuZXcgUmljaFRleHQoXHJcbiAgICAgIFN0cmluZ1V0aWxzLmZpbGxJbiggbkVxdWFsc051bWJlck9mRGF0YVBvaW50c1BhdHRlcm5TdHJpbmcsIHtcclxuICAgICAgICBuU3ltYm9sOiBTdHJpbmdVdGlscy5maWxsSW4oIHN5bWJvbFBhdHRlcm4sIHsgc3ltYm9sOiBuU3ltYm9sU3RyaW5nIH0gKVxyXG4gICAgICB9ICksXHJcbiAgICAgIFRFWFRfT1BUSU9OU1xyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBudW1iZXJPZlBhcmFtZXRlcnNOb2RlID0gbmV3IFJpY2hUZXh0KFxyXG4gICAgICBTdHJpbmdVdGlscy5maWxsSW4oIGZFcXVhbHNOdW1iZXJPZlBhcmFtZXRlcnNQYXR0ZXJuU3RyaW5nLCB7XHJcbiAgICAgICAgZlN5bWJvbDogU3RyaW5nVXRpbHMuZmlsbEluKCBzeW1ib2xQYXR0ZXJuLCB7IHN5bWJvbDogZlN5bWJvbFN0cmluZyB9IClcclxuICAgICAgfSApLFxyXG4gICAgICBURVhUX09QVElPTlNcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudE5vZGUgPSBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiAxMCxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgVGV4dCggdGhlUmVkdWNlZENoaVNxdWFyZWRTdGF0aXN0aWNJc1N0cmluZywgVEVYVF9PUFRJT05TICksXHJcbiAgICAgICAgbmV3IEhCb3goIHtcclxuICAgICAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgIG5ldyBIU3RydXQoIDIwICksXHJcbiAgICAgICAgICAgIG5ldyBGb3JtdWxhTm9kZSggRk9STVVMQV9TVFJJTkcgKVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0gKSxcclxuICAgICAgICBudW1iZXJPZkRhdGFQb2ludHNOb2RlLFxyXG4gICAgICAgIG51bWJlck9mUGFyYW1ldGVyc05vZGVcclxuICAgICAgXSxcclxuICAgICAgbWF4V2lkdGg6IDUwMCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnROb2RlICk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuY3VydmVGaXR0aW5nLnJlZ2lzdGVyKCAnUmVkdWNlZENoaVNxdWFyZWRTdGF0aXN0aWNEaWFsb2cnLCBSZWR1Y2VkQ2hpU3F1YXJlZFN0YXRpc3RpY0RpYWxvZyApO1xyXG5leHBvcnQgZGVmYXVsdCBSZWR1Y2VkQ2hpU3F1YXJlZFN0YXRpc3RpY0RpYWxvZzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFDcEUsU0FBU0MsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3RGLE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxtQkFBbUIsTUFBTSw4QkFBOEI7QUFDOUQsT0FBT0MscUJBQXFCLE1BQU0sNkJBQTZCO0FBRS9ELE1BQU1DLHNDQUFzQyxHQUFHRixtQkFBbUIsQ0FBQ0csZ0NBQWdDO0FBQ25HLE1BQU1DLHNDQUFzQyxHQUFHSixtQkFBbUIsQ0FBQ0ssZ0NBQWdDO0FBQ25HLE1BQU1DLGVBQWUsR0FBR04sbUJBQW1CLENBQUNPLFNBQVM7QUFDckQsTUFBTUMsYUFBYSxHQUFHUixtQkFBbUIsQ0FBQ1MsT0FBTztBQUNqRCxNQUFNQyxhQUFhLEdBQUdWLG1CQUFtQixDQUFDVyxPQUFPO0FBQ2pELE1BQU1DLGFBQWEsR0FBR1osbUJBQW1CLENBQUNhLE9BQU87QUFDakQsTUFBTUMsYUFBYSxHQUFHZCxtQkFBbUIsQ0FBQ2UsT0FBTztBQUNqRCxNQUFNQyxxQ0FBcUMsR0FBR2hCLG1CQUFtQixDQUFDaUIsK0JBQStCOztBQUVqRztBQUNBLE1BQU1DLFlBQVksR0FBRztFQUNuQkMsSUFBSSxFQUFFbEIscUJBQXFCLENBQUNtQjtBQUM5QixDQUFDO0FBRUQsTUFBTUMsY0FBYyxHQUFJLEdBQUVmLGVBQWdCLFNBQVEsR0FDMUIsYUFBWUksYUFBYyxNQUFLRixhQUFjLElBQUcsR0FDakQsVUFBVSxHQUNULFdBQVVNLGFBQWMsSUFBR0YsYUFBYyxTQUFRRSxhQUFjLHFCQUFvQjtBQUUzRyxNQUFNUSxnQ0FBZ0MsU0FBU3hCLE1BQU0sQ0FBQztFQUVwRHlCLFdBQVdBLENBQUEsRUFBRztJQUVaO0lBQ0EsTUFBTUMsYUFBYSxHQUFJLHlCQUF3QnZCLHFCQUFxQixDQUFDd0IsdUJBQXVCLENBQUNDLE1BQU8sa0JBQWlCO0lBRXJILE1BQU1DLHNCQUFzQixHQUFHLElBQUloQyxRQUFRLENBQ3pDSixXQUFXLENBQUNxQyxNQUFNLENBQUV4QixzQ0FBc0MsRUFBRTtNQUMxRE8sT0FBTyxFQUFFcEIsV0FBVyxDQUFDcUMsTUFBTSxDQUFFSixhQUFhLEVBQUU7UUFBRUssTUFBTSxFQUFFbkI7TUFBYyxDQUFFO0lBQ3hFLENBQUUsQ0FBQyxFQUNIUSxZQUNGLENBQUM7SUFFRCxNQUFNWSxzQkFBc0IsR0FBRyxJQUFJbkMsUUFBUSxDQUN6Q0osV0FBVyxDQUFDcUMsTUFBTSxDQUFFMUIsc0NBQXNDLEVBQUU7TUFDMURPLE9BQU8sRUFBRWxCLFdBQVcsQ0FBQ3FDLE1BQU0sQ0FBRUosYUFBYSxFQUFFO1FBQUVLLE1BQU0sRUFBRXJCO01BQWMsQ0FBRTtJQUN4RSxDQUFFLENBQUMsRUFDSFUsWUFDRixDQUFDO0lBRUQsTUFBTWEsV0FBVyxHQUFHLElBQUlsQyxJQUFJLENBQUU7TUFDNUJtQyxLQUFLLEVBQUUsTUFBTTtNQUNiQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxRQUFRLEVBQUUsQ0FDUixJQUFJdEMsSUFBSSxDQUFFb0IscUNBQXFDLEVBQUVFLFlBQWEsQ0FBQyxFQUMvRCxJQUFJekIsSUFBSSxDQUFFO1FBQ1J5QyxRQUFRLEVBQUUsQ0FDUixJQUFJeEMsTUFBTSxDQUFFLEVBQUcsQ0FBQyxFQUNoQixJQUFJRixXQUFXLENBQUU2QixjQUFlLENBQUM7TUFFckMsQ0FBRSxDQUFDLEVBQ0hNLHNCQUFzQixFQUN0Qkcsc0JBQXNCLENBQ3ZCO01BQ0RLLFFBQVEsRUFBRSxHQUFHLENBQUM7SUFDaEIsQ0FBRSxDQUFDOztJQUVILEtBQUssQ0FBRUosV0FBWSxDQUFDO0VBQ3RCO0FBRUY7QUFFQWhDLFlBQVksQ0FBQ3FDLFFBQVEsQ0FBRSxrQ0FBa0MsRUFBRWQsZ0NBQWlDLENBQUM7QUFDN0YsZUFBZUEsZ0NBQWdDIn0=