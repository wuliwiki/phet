// Copyright 2019-2023, University of Colorado Boulder

/**
 * EquationNode is used to handle displaying equations in a uniform manner
 *
 * @author Saurabh Totey
 */

import merge from '../../../../phet-core/js/merge.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import { HBox, HStrut, RichText, Text, VStrut } from '../../../../scenery/js/imports.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingStrings from '../../CurveFittingStrings.js';
import CurveFittingConstants from '../CurveFittingConstants.js';
const aSymbolString = CurveFittingStrings.aSymbol;
const bSymbolString = CurveFittingStrings.bSymbol;
const cSymbolString = CurveFittingStrings.cSymbol;
const dSymbolString = CurveFittingStrings.dSymbol;
const xSymbolString = CurveFittingStrings.xSymbol;
const ySymbolString = CurveFittingStrings.ySymbol;

// constants
const NORMAL_FONT = CurveFittingConstants.EQUATION_NORMAL_FONT;
const SYMBOL_FONT = CurveFittingConstants.EQUATION_SYMBOL_FONT;
const COEFFICIENT_FONT = CurveFittingConstants.COEFFICIENT_FONT;
class EquationNode extends HBox {
  /**
   * @param {Property.<number>} orderProperty - a Property that reflects what order this equation should be
   * @param {Object} [options]
   */
  constructor(orderProperty, options) {
    options = merge({
      yEqualsTextOptions: {
        font: SYMBOL_FONT
      },
      coefficientSignTextOptions: {
        font: NORMAL_FONT
      },
      coefficientTextOptions: {
        font: COEFFICIENT_FONT,
        fill: CurveFittingConstants.BLUE_COLOR
      },
      xTextOptions: {
        font: SYMBOL_FONT
      },
      align: 'bottom',
      maxWidth: 160
    }, options);
    super(options);

    // @private {Property.<number>}
    this.orderProperty = orderProperty;

    // @private {Array.<Text>}
    this.signTextNodes = [];

    // @private {Array.<Text>}
    this.coefficientTextNodes = [];

    // @private {Array.<RichText>}
    this.xVariableTextNodes = [];

    // initializes this.signTextNodes, this.coefficientTextNodes, and this.xVariableTextNodes
    for (let i = 0; i <= CurveFittingConstants.MAX_ORDER_OF_FIT; i++) {
      this.signTextNodes.push(new Text('', options.coefficientSignTextOptions));
      this.coefficientTextNodes.push(new Text('', options.coefficientTextOptions));
      if (i === 0) {
        this.xVariableTextNodes.push(new Text('', options.xTextOptions));
      } else if (i === 1) {
        this.xVariableTextNodes.push(new RichText(xSymbolString, options.xTextOptions));
      } else {
        this.xVariableTextNodes.push(new RichText(`${xSymbolString}<sup>${i}</sup>`, options.xTextOptions));
      }
    }

    // @private {Array.<Node>} all potential children of this node
    this.allPotentialChildren = [];

    // initializes this.allPotentialChildren; this.allPotentialChildren SHOULD NOT CHANGE after this
    const yNode = new Text(`${ySymbolString} ${MathSymbols.EQUAL_TO} `, options.yEqualsTextOptions);
    this.allPotentialChildren.push(yNode);
    for (let i = CurveFittingConstants.MAX_ORDER_OF_FIT; i >= 0; i--) {
      this.allPotentialChildren.push(this.signTextNodes[i]);
      this.allPotentialChildren.push(this.coefficientTextNodes[i]);

      // arbitrary spacing to separate coefficient from variable to be more aesthetically pleasing
      this.allPotentialChildren.push(new HStrut(1));
      this.allPotentialChildren.push(this.xVariableTextNodes[i]);
    }

    // adds a VStrut to this.allPotentialChildren that is always visible
    // VStrut is the same height as a text with an exponent (in this case, the x^2 term)
    // this ensures that even if no terms with exponents are visible, this node will still have the same height; see #124
    this.allPotentialChildren.push(new VStrut(this.xVariableTextNodes[2].height));

    // makes an array of symbols as the initial coefficients; '+' signs are inserted before each coefficient in the array
    const initialCoefficients = _.flatMap([dSymbolString, cSymbolString, bSymbolString, aSymbolString], coefficient => [MathSymbols.PLUS, coefficient]);
    this.setCoefficients(initialCoefficients);

    // links the visibility of terms to the order of the equation; unlink unnecessary: all instances present for sim life
    this.orderProperty.link(order => {
      for (let i = 0; i <= CurveFittingConstants.MAX_ORDER_OF_FIT; i++) {
        const isVisible = i <= order;
        this.signTextNodes[i].visible = isVisible;
        this.coefficientTextNodes[i].visible = isVisible;
        this.xVariableTextNodes[i].visible = isVisible;
      }
      this.updateChildrenAndVisibilities();
    });
  }

  /**
   * Removes a leading '+' if there is one and removes all invisible children
   * Turns a leading '-' into a unary minus for the coefficient
   * Is in its own separate method so that it can be called when coefficients are changed or when the equation's order is changed
   * @private
   */
  updateChildrenAndVisibilities() {
    // removes the leading coefficient's sign
    // if it is a +, it is gone
    // if it is a -, it is turned into a unary - on the leading coefficient
    const leadingSignTextNode = this.signTextNodes[this.orderProperty.value];
    leadingSignTextNode.visible = false;
    const leadingCoefficient = this.coefficientTextNodes[this.orderProperty.value];
    if (leadingSignTextNode.string === ` ${MathSymbols.MINUS} ` && !_.includes(leadingCoefficient.string, MathSymbols.UNARY_MINUS)) {
      leadingCoefficient.string = MathSymbols.UNARY_MINUS + leadingCoefficient.string;
    }

    // makes unnecessary HStruts invisible; HStruts are unnecessary when their proceeding variable texts are invisible
    for (let i = 0; i < this.allPotentialChildren.length - 1; i++) {
      const child = this.allPotentialChildren[i];
      if (!(child instanceof HStrut)) {
        continue;
      }
      child.visible = this.allPotentialChildren[i + 1].visible;
    }

    // sets all children of this node to all the visible potential children
    this.children = this.allPotentialChildren.filter(child => child.visible);
  }

  /**
   * @param {Array.<string>} coefficientsArray - an array of interleaved signs and coefficients to
   *  visually display in this equation; should be ordered by ascending order
   * @public
   */
  setCoefficients(coefficientsArray) {
    assert && assert(coefficientsArray.length >= 2 * (this.orderProperty.value + 1), 'Not enough coefficients for each term in the equation.');
    for (let i = 0; i < coefficientsArray.length; i += 2) {
      this.signTextNodes[i / 2].string = ` ${coefficientsArray[i]} `;
      this.coefficientTextNodes[i / 2].string = coefficientsArray[i + 1];
    }
    this.updateChildrenAndVisibilities();
  }
}
curveFitting.register('EquationNode', EquationNode);
export default EquationNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk1hdGhTeW1ib2xzIiwiSEJveCIsIkhTdHJ1dCIsIlJpY2hUZXh0IiwiVGV4dCIsIlZTdHJ1dCIsImN1cnZlRml0dGluZyIsIkN1cnZlRml0dGluZ1N0cmluZ3MiLCJDdXJ2ZUZpdHRpbmdDb25zdGFudHMiLCJhU3ltYm9sU3RyaW5nIiwiYVN5bWJvbCIsImJTeW1ib2xTdHJpbmciLCJiU3ltYm9sIiwiY1N5bWJvbFN0cmluZyIsImNTeW1ib2wiLCJkU3ltYm9sU3RyaW5nIiwiZFN5bWJvbCIsInhTeW1ib2xTdHJpbmciLCJ4U3ltYm9sIiwieVN5bWJvbFN0cmluZyIsInlTeW1ib2wiLCJOT1JNQUxfRk9OVCIsIkVRVUFUSU9OX05PUk1BTF9GT05UIiwiU1lNQk9MX0ZPTlQiLCJFUVVBVElPTl9TWU1CT0xfRk9OVCIsIkNPRUZGSUNJRU5UX0ZPTlQiLCJFcXVhdGlvbk5vZGUiLCJjb25zdHJ1Y3RvciIsIm9yZGVyUHJvcGVydHkiLCJvcHRpb25zIiwieUVxdWFsc1RleHRPcHRpb25zIiwiZm9udCIsImNvZWZmaWNpZW50U2lnblRleHRPcHRpb25zIiwiY29lZmZpY2llbnRUZXh0T3B0aW9ucyIsImZpbGwiLCJCTFVFX0NPTE9SIiwieFRleHRPcHRpb25zIiwiYWxpZ24iLCJtYXhXaWR0aCIsInNpZ25UZXh0Tm9kZXMiLCJjb2VmZmljaWVudFRleHROb2RlcyIsInhWYXJpYWJsZVRleHROb2RlcyIsImkiLCJNQVhfT1JERVJfT0ZfRklUIiwicHVzaCIsImFsbFBvdGVudGlhbENoaWxkcmVuIiwieU5vZGUiLCJFUVVBTF9UTyIsImhlaWdodCIsImluaXRpYWxDb2VmZmljaWVudHMiLCJfIiwiZmxhdE1hcCIsImNvZWZmaWNpZW50IiwiUExVUyIsInNldENvZWZmaWNpZW50cyIsImxpbmsiLCJvcmRlciIsImlzVmlzaWJsZSIsInZpc2libGUiLCJ1cGRhdGVDaGlsZHJlbkFuZFZpc2liaWxpdGllcyIsImxlYWRpbmdTaWduVGV4dE5vZGUiLCJ2YWx1ZSIsImxlYWRpbmdDb2VmZmljaWVudCIsInN0cmluZyIsIk1JTlVTIiwiaW5jbHVkZXMiLCJVTkFSWV9NSU5VUyIsImxlbmd0aCIsImNoaWxkIiwiY2hpbGRyZW4iLCJmaWx0ZXIiLCJjb2VmZmljaWVudHNBcnJheSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1YXRpb25Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVxdWF0aW9uTm9kZSBpcyB1c2VkIHRvIGhhbmRsZSBkaXNwbGF5aW5nIGVxdWF0aW9ucyBpbiBhIHVuaWZvcm0gbWFubmVyXHJcbiAqXHJcbiAqIEBhdXRob3IgU2F1cmFiaCBUb3RleVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgTWF0aFN5bWJvbHMgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL01hdGhTeW1ib2xzLmpzJztcclxuaW1wb3J0IHsgSEJveCwgSFN0cnV0LCBSaWNoVGV4dCwgVGV4dCwgVlN0cnV0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGN1cnZlRml0dGluZyBmcm9tICcuLi8uLi9jdXJ2ZUZpdHRpbmcuanMnO1xyXG5pbXBvcnQgQ3VydmVGaXR0aW5nU3RyaW5ncyBmcm9tICcuLi8uLi9DdXJ2ZUZpdHRpbmdTdHJpbmdzLmpzJztcclxuaW1wb3J0IEN1cnZlRml0dGluZ0NvbnN0YW50cyBmcm9tICcuLi9DdXJ2ZUZpdHRpbmdDb25zdGFudHMuanMnO1xyXG5cclxuY29uc3QgYVN5bWJvbFN0cmluZyA9IEN1cnZlRml0dGluZ1N0cmluZ3MuYVN5bWJvbDtcclxuY29uc3QgYlN5bWJvbFN0cmluZyA9IEN1cnZlRml0dGluZ1N0cmluZ3MuYlN5bWJvbDtcclxuY29uc3QgY1N5bWJvbFN0cmluZyA9IEN1cnZlRml0dGluZ1N0cmluZ3MuY1N5bWJvbDtcclxuY29uc3QgZFN5bWJvbFN0cmluZyA9IEN1cnZlRml0dGluZ1N0cmluZ3MuZFN5bWJvbDtcclxuY29uc3QgeFN5bWJvbFN0cmluZyA9IEN1cnZlRml0dGluZ1N0cmluZ3MueFN5bWJvbDtcclxuY29uc3QgeVN5bWJvbFN0cmluZyA9IEN1cnZlRml0dGluZ1N0cmluZ3MueVN5bWJvbDtcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBOT1JNQUxfRk9OVCA9IEN1cnZlRml0dGluZ0NvbnN0YW50cy5FUVVBVElPTl9OT1JNQUxfRk9OVDtcclxuY29uc3QgU1lNQk9MX0ZPTlQgPSBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuRVFVQVRJT05fU1lNQk9MX0ZPTlQ7XHJcbmNvbnN0IENPRUZGSUNJRU5UX0ZPTlQgPSBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuQ09FRkZJQ0lFTlRfRk9OVDtcclxuXHJcbmNsYXNzIEVxdWF0aW9uTm9kZSBleHRlbmRzIEhCb3gge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxudW1iZXI+fSBvcmRlclByb3BlcnR5IC0gYSBQcm9wZXJ0eSB0aGF0IHJlZmxlY3RzIHdoYXQgb3JkZXIgdGhpcyBlcXVhdGlvbiBzaG91bGQgYmVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9yZGVyUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHlFcXVhbHNUZXh0T3B0aW9uczogeyBmb250OiBTWU1CT0xfRk9OVCB9LFxyXG4gICAgICBjb2VmZmljaWVudFNpZ25UZXh0T3B0aW9uczogeyBmb250OiBOT1JNQUxfRk9OVCB9LFxyXG4gICAgICBjb2VmZmljaWVudFRleHRPcHRpb25zOiB7IGZvbnQ6IENPRUZGSUNJRU5UX0ZPTlQsIGZpbGw6IEN1cnZlRml0dGluZ0NvbnN0YW50cy5CTFVFX0NPTE9SIH0sXHJcbiAgICAgIHhUZXh0T3B0aW9uczogeyBmb250OiBTWU1CT0xfRk9OVCB9LFxyXG4gICAgICBhbGlnbjogJ2JvdHRvbScsXHJcbiAgICAgIG1heFdpZHRoOiAxNjBcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtQcm9wZXJ0eS48bnVtYmVyPn1cclxuICAgIHRoaXMub3JkZXJQcm9wZXJ0eSA9IG9yZGVyUHJvcGVydHk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge0FycmF5LjxUZXh0Pn1cclxuICAgIHRoaXMuc2lnblRleHROb2RlcyA9IFtdO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtBcnJheS48VGV4dD59XHJcbiAgICB0aGlzLmNvZWZmaWNpZW50VGV4dE5vZGVzID0gW107XHJcblxyXG4gICAgLy8gQHByaXZhdGUge0FycmF5LjxSaWNoVGV4dD59XHJcbiAgICB0aGlzLnhWYXJpYWJsZVRleHROb2RlcyA9IFtdO1xyXG5cclxuICAgIC8vIGluaXRpYWxpemVzIHRoaXMuc2lnblRleHROb2RlcywgdGhpcy5jb2VmZmljaWVudFRleHROb2RlcywgYW5kIHRoaXMueFZhcmlhYmxlVGV4dE5vZGVzXHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPD0gQ3VydmVGaXR0aW5nQ29uc3RhbnRzLk1BWF9PUkRFUl9PRl9GSVQ7IGkrKyApIHtcclxuICAgICAgdGhpcy5zaWduVGV4dE5vZGVzLnB1c2goIG5ldyBUZXh0KCAnJywgb3B0aW9ucy5jb2VmZmljaWVudFNpZ25UZXh0T3B0aW9ucyApICk7XHJcbiAgICAgIHRoaXMuY29lZmZpY2llbnRUZXh0Tm9kZXMucHVzaCggbmV3IFRleHQoICcnLCBvcHRpb25zLmNvZWZmaWNpZW50VGV4dE9wdGlvbnMgKSApO1xyXG4gICAgICBpZiAoIGkgPT09IDAgKSB7XHJcbiAgICAgICAgdGhpcy54VmFyaWFibGVUZXh0Tm9kZXMucHVzaCggbmV3IFRleHQoICcnLCBvcHRpb25zLnhUZXh0T3B0aW9ucyApICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIGkgPT09IDEgKSB7XHJcbiAgICAgICAgdGhpcy54VmFyaWFibGVUZXh0Tm9kZXMucHVzaCggbmV3IFJpY2hUZXh0KCB4U3ltYm9sU3RyaW5nLCBvcHRpb25zLnhUZXh0T3B0aW9ucyApICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy54VmFyaWFibGVUZXh0Tm9kZXMucHVzaCggbmV3IFJpY2hUZXh0KCBgJHt4U3ltYm9sU3RyaW5nfTxzdXA+JHtpfTwvc3VwPmAsIG9wdGlvbnMueFRleHRPcHRpb25zICkgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEBwcml2YXRlIHtBcnJheS48Tm9kZT59IGFsbCBwb3RlbnRpYWwgY2hpbGRyZW4gb2YgdGhpcyBub2RlXHJcbiAgICB0aGlzLmFsbFBvdGVudGlhbENoaWxkcmVuID0gW107XHJcblxyXG4gICAgLy8gaW5pdGlhbGl6ZXMgdGhpcy5hbGxQb3RlbnRpYWxDaGlsZHJlbjsgdGhpcy5hbGxQb3RlbnRpYWxDaGlsZHJlbiBTSE9VTEQgTk9UIENIQU5HRSBhZnRlciB0aGlzXHJcbiAgICBjb25zdCB5Tm9kZSA9IG5ldyBUZXh0KCBgJHt5U3ltYm9sU3RyaW5nfSAke01hdGhTeW1ib2xzLkVRVUFMX1RPfSBgLCBvcHRpb25zLnlFcXVhbHNUZXh0T3B0aW9ucyApO1xyXG4gICAgdGhpcy5hbGxQb3RlbnRpYWxDaGlsZHJlbi5wdXNoKCB5Tm9kZSApO1xyXG4gICAgZm9yICggbGV0IGkgPSBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuTUFYX09SREVSX09GX0ZJVDsgaSA+PSAwOyBpLS0gKSB7XHJcbiAgICAgIHRoaXMuYWxsUG90ZW50aWFsQ2hpbGRyZW4ucHVzaCggdGhpcy5zaWduVGV4dE5vZGVzWyBpIF0gKTtcclxuICAgICAgdGhpcy5hbGxQb3RlbnRpYWxDaGlsZHJlbi5wdXNoKCB0aGlzLmNvZWZmaWNpZW50VGV4dE5vZGVzWyBpIF0gKTtcclxuXHJcbiAgICAgIC8vIGFyYml0cmFyeSBzcGFjaW5nIHRvIHNlcGFyYXRlIGNvZWZmaWNpZW50IGZyb20gdmFyaWFibGUgdG8gYmUgbW9yZSBhZXN0aGV0aWNhbGx5IHBsZWFzaW5nXHJcbiAgICAgIHRoaXMuYWxsUG90ZW50aWFsQ2hpbGRyZW4ucHVzaCggbmV3IEhTdHJ1dCggMSApICk7XHJcbiAgICAgIHRoaXMuYWxsUG90ZW50aWFsQ2hpbGRyZW4ucHVzaCggdGhpcy54VmFyaWFibGVUZXh0Tm9kZXNbIGkgXSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGFkZHMgYSBWU3RydXQgdG8gdGhpcy5hbGxQb3RlbnRpYWxDaGlsZHJlbiB0aGF0IGlzIGFsd2F5cyB2aXNpYmxlXHJcbiAgICAvLyBWU3RydXQgaXMgdGhlIHNhbWUgaGVpZ2h0IGFzIGEgdGV4dCB3aXRoIGFuIGV4cG9uZW50IChpbiB0aGlzIGNhc2UsIHRoZSB4XjIgdGVybSlcclxuICAgIC8vIHRoaXMgZW5zdXJlcyB0aGF0IGV2ZW4gaWYgbm8gdGVybXMgd2l0aCBleHBvbmVudHMgYXJlIHZpc2libGUsIHRoaXMgbm9kZSB3aWxsIHN0aWxsIGhhdmUgdGhlIHNhbWUgaGVpZ2h0OyBzZWUgIzEyNFxyXG4gICAgdGhpcy5hbGxQb3RlbnRpYWxDaGlsZHJlbi5wdXNoKCBuZXcgVlN0cnV0KCB0aGlzLnhWYXJpYWJsZVRleHROb2Rlc1sgMiBdLmhlaWdodCApICk7XHJcblxyXG4gICAgLy8gbWFrZXMgYW4gYXJyYXkgb2Ygc3ltYm9scyBhcyB0aGUgaW5pdGlhbCBjb2VmZmljaWVudHM7ICcrJyBzaWducyBhcmUgaW5zZXJ0ZWQgYmVmb3JlIGVhY2ggY29lZmZpY2llbnQgaW4gdGhlIGFycmF5XHJcbiAgICBjb25zdCBpbml0aWFsQ29lZmZpY2llbnRzID0gXy5mbGF0TWFwKFxyXG4gICAgICBbIGRTeW1ib2xTdHJpbmcsIGNTeW1ib2xTdHJpbmcsIGJTeW1ib2xTdHJpbmcsIGFTeW1ib2xTdHJpbmcgXSxcclxuICAgICAgY29lZmZpY2llbnQgPT4gWyBNYXRoU3ltYm9scy5QTFVTLCBjb2VmZmljaWVudCBdXHJcbiAgICApO1xyXG4gICAgdGhpcy5zZXRDb2VmZmljaWVudHMoIGluaXRpYWxDb2VmZmljaWVudHMgKTtcclxuXHJcbiAgICAvLyBsaW5rcyB0aGUgdmlzaWJpbGl0eSBvZiB0ZXJtcyB0byB0aGUgb3JkZXIgb2YgdGhlIGVxdWF0aW9uOyB1bmxpbmsgdW5uZWNlc3Nhcnk6IGFsbCBpbnN0YW5jZXMgcHJlc2VudCBmb3Igc2ltIGxpZmVcclxuICAgIHRoaXMub3JkZXJQcm9wZXJ0eS5saW5rKCBvcmRlciA9PiB7XHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8PSBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuTUFYX09SREVSX09GX0ZJVDsgaSsrICkge1xyXG4gICAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IGkgPD0gb3JkZXI7XHJcbiAgICAgICAgdGhpcy5zaWduVGV4dE5vZGVzWyBpIF0udmlzaWJsZSA9IGlzVmlzaWJsZTtcclxuICAgICAgICB0aGlzLmNvZWZmaWNpZW50VGV4dE5vZGVzWyBpIF0udmlzaWJsZSA9IGlzVmlzaWJsZTtcclxuICAgICAgICB0aGlzLnhWYXJpYWJsZVRleHROb2Rlc1sgaSBdLnZpc2libGUgPSBpc1Zpc2libGU7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbkFuZFZpc2liaWxpdGllcygpO1xyXG4gICAgfSApO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYSBsZWFkaW5nICcrJyBpZiB0aGVyZSBpcyBvbmUgYW5kIHJlbW92ZXMgYWxsIGludmlzaWJsZSBjaGlsZHJlblxyXG4gICAqIFR1cm5zIGEgbGVhZGluZyAnLScgaW50byBhIHVuYXJ5IG1pbnVzIGZvciB0aGUgY29lZmZpY2llbnRcclxuICAgKiBJcyBpbiBpdHMgb3duIHNlcGFyYXRlIG1ldGhvZCBzbyB0aGF0IGl0IGNhbiBiZSBjYWxsZWQgd2hlbiBjb2VmZmljaWVudHMgYXJlIGNoYW5nZWQgb3Igd2hlbiB0aGUgZXF1YXRpb24ncyBvcmRlciBpcyBjaGFuZ2VkXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICB1cGRhdGVDaGlsZHJlbkFuZFZpc2liaWxpdGllcygpIHtcclxuXHJcbiAgICAvLyByZW1vdmVzIHRoZSBsZWFkaW5nIGNvZWZmaWNpZW50J3Mgc2lnblxyXG4gICAgLy8gaWYgaXQgaXMgYSArLCBpdCBpcyBnb25lXHJcbiAgICAvLyBpZiBpdCBpcyBhIC0sIGl0IGlzIHR1cm5lZCBpbnRvIGEgdW5hcnkgLSBvbiB0aGUgbGVhZGluZyBjb2VmZmljaWVudFxyXG4gICAgY29uc3QgbGVhZGluZ1NpZ25UZXh0Tm9kZSA9IHRoaXMuc2lnblRleHROb2Rlc1sgdGhpcy5vcmRlclByb3BlcnR5LnZhbHVlIF07XHJcbiAgICBsZWFkaW5nU2lnblRleHROb2RlLnZpc2libGUgPSBmYWxzZTtcclxuICAgIGNvbnN0IGxlYWRpbmdDb2VmZmljaWVudCA9IHRoaXMuY29lZmZpY2llbnRUZXh0Tm9kZXNbIHRoaXMub3JkZXJQcm9wZXJ0eS52YWx1ZSBdO1xyXG4gICAgaWYgKCBsZWFkaW5nU2lnblRleHROb2RlLnN0cmluZyA9PT0gYCAke01hdGhTeW1ib2xzLk1JTlVTfSBgICYmICFfLmluY2x1ZGVzKCBsZWFkaW5nQ29lZmZpY2llbnQuc3RyaW5nLCBNYXRoU3ltYm9scy5VTkFSWV9NSU5VUyApICkge1xyXG4gICAgICBsZWFkaW5nQ29lZmZpY2llbnQuc3RyaW5nID0gTWF0aFN5bWJvbHMuVU5BUllfTUlOVVMgKyBsZWFkaW5nQ29lZmZpY2llbnQuc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG1ha2VzIHVubmVjZXNzYXJ5IEhTdHJ1dHMgaW52aXNpYmxlOyBIU3RydXRzIGFyZSB1bm5lY2Vzc2FyeSB3aGVuIHRoZWlyIHByb2NlZWRpbmcgdmFyaWFibGUgdGV4dHMgYXJlIGludmlzaWJsZVxyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5hbGxQb3RlbnRpYWxDaGlsZHJlbi5sZW5ndGggLSAxOyBpKysgKSB7XHJcbiAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5hbGxQb3RlbnRpYWxDaGlsZHJlblsgaSBdO1xyXG4gICAgICBpZiAoICEoIGNoaWxkIGluc3RhbmNlb2YgSFN0cnV0ICkgKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgY2hpbGQudmlzaWJsZSA9IHRoaXMuYWxsUG90ZW50aWFsQ2hpbGRyZW5bIGkgKyAxIF0udmlzaWJsZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzZXRzIGFsbCBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgdG8gYWxsIHRoZSB2aXNpYmxlIHBvdGVudGlhbCBjaGlsZHJlblxyXG4gICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuYWxsUG90ZW50aWFsQ2hpbGRyZW4uZmlsdGVyKCBjaGlsZCA9PiBjaGlsZC52aXNpYmxlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBjb2VmZmljaWVudHNBcnJheSAtIGFuIGFycmF5IG9mIGludGVybGVhdmVkIHNpZ25zIGFuZCBjb2VmZmljaWVudHMgdG9cclxuICAgKiAgdmlzdWFsbHkgZGlzcGxheSBpbiB0aGlzIGVxdWF0aW9uOyBzaG91bGQgYmUgb3JkZXJlZCBieSBhc2NlbmRpbmcgb3JkZXJcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc2V0Q29lZmZpY2llbnRzKCBjb2VmZmljaWVudHNBcnJheSApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KFxyXG4gICAgICBjb2VmZmljaWVudHNBcnJheS5sZW5ndGggPj0gMiAqICggdGhpcy5vcmRlclByb3BlcnR5LnZhbHVlICsgMSApLFxyXG4gICAgICAnTm90IGVub3VnaCBjb2VmZmljaWVudHMgZm9yIGVhY2ggdGVybSBpbiB0aGUgZXF1YXRpb24uJ1xyXG4gICAgKTtcclxuXHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb2VmZmljaWVudHNBcnJheS5sZW5ndGg7IGkgKz0gMiApIHtcclxuICAgICAgdGhpcy5zaWduVGV4dE5vZGVzWyBpIC8gMiBdLnN0cmluZyA9IGAgJHtjb2VmZmljaWVudHNBcnJheVsgaSBdfSBgO1xyXG4gICAgICB0aGlzLmNvZWZmaWNpZW50VGV4dE5vZGVzWyBpIC8gMiBdLnN0cmluZyA9IGNvZWZmaWNpZW50c0FycmF5WyBpICsgMSBdO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudXBkYXRlQ2hpbGRyZW5BbmRWaXNpYmlsaXRpZXMoKTtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuY3VydmVGaXR0aW5nLnJlZ2lzdGVyKCAnRXF1YXRpb25Ob2RlJywgRXF1YXRpb25Ob2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVxdWF0aW9uTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLFNBQVNDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsTUFBTSxRQUFRLG1DQUFtQztBQUN4RixPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLG1CQUFtQixNQUFNLDhCQUE4QjtBQUM5RCxPQUFPQyxxQkFBcUIsTUFBTSw2QkFBNkI7QUFFL0QsTUFBTUMsYUFBYSxHQUFHRixtQkFBbUIsQ0FBQ0csT0FBTztBQUNqRCxNQUFNQyxhQUFhLEdBQUdKLG1CQUFtQixDQUFDSyxPQUFPO0FBQ2pELE1BQU1DLGFBQWEsR0FBR04sbUJBQW1CLENBQUNPLE9BQU87QUFDakQsTUFBTUMsYUFBYSxHQUFHUixtQkFBbUIsQ0FBQ1MsT0FBTztBQUNqRCxNQUFNQyxhQUFhLEdBQUdWLG1CQUFtQixDQUFDVyxPQUFPO0FB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