// Copyright 2015-2021, University of Colorado Boulder

/**
 * Container for control panels
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import { VBox } from '../../../../scenery/js/imports.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingConstants from '../CurveFittingConstants.js';
import CurveOrderPanel from './CurveOrderPanel.js';
import FitPanel from './FitPanel.js';
import ViewOptionsPanel from './ViewOptionsPanel.js';

// constants
const PANEL_OPTIONS = {
  cornerRadius: CurveFittingConstants.PANEL_CORNER_RADIUS,
  fill: CurveFittingConstants.PANEL_BACKGROUND_COLOR,
  xMargin: CurveFittingConstants.PANEL_MARGIN,
  yMargin: CurveFittingConstants.PANEL_MARGIN,
  maxWidth: CurveFittingConstants.PANEL_MAX_WIDTH,
  minWidth: CurveFittingConstants.PANEL_MIN_WIDTH
};
class ControlPanels extends VBox {
  /**
   * @param {Property.<number>[]} sliderPropertyArray
   * @param {Property.<number>} orderProperty
   * @param {Property.<FitType>} fitProperty
   * @param {Property.<boolean>} curveVisibleProperty
   * @param {Property.<boolean>} residualsVisibleProperty
   * @param {Property.<boolean>} valuesProperty
   * @param {Object} [options]
   */
  constructor(sliderPropertyArray, orderProperty, fitProperty, curveVisibleProperty, residualsVisibleProperty, valuesProperty, options) {
    options = merge({
      align: 'left',
      spacing: 12,
      excludeInvisibleChildrenFromBounds: true
    }, options);

    // view options
    const viewOptionsPanel = new ViewOptionsPanel(curveVisibleProperty, residualsVisibleProperty, valuesProperty, PANEL_OPTIONS);

    // order of curve
    const orderPanel = new CurveOrderPanel(orderProperty, PANEL_OPTIONS);

    // fit type
    const fitPanel = new FitPanel(sliderPropertyArray, fitProperty, orderProperty, PANEL_OPTIONS);
    assert && assert(!options.children, 'decoration not supported');
    options.children = [viewOptionsPanel, orderPanel, fitPanel];
    super(options);

    // @private stored in as a field of ControlPanels for #161
    this.viewOptionsPanel = viewOptionsPanel;

    // hide panels when curve is not visible; unlink unnecessary because ControlPanels is always present
    curveVisibleProperty.linkAttribute(orderPanel, 'visible');
    curveVisibleProperty.linkAttribute(fitPanel, 'visible');
  }

  /**
   * @public
   */
  reset() {
    this.viewOptionsPanel.reset();
  }
}
curveFitting.register('ControlPanels', ControlPanels);
export default ControlPanels;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlZCb3giLCJjdXJ2ZUZpdHRpbmciLCJDdXJ2ZUZpdHRpbmdDb25zdGFudHMiLCJDdXJ2ZU9yZGVyUGFuZWwiLCJGaXRQYW5lbCIsIlZpZXdPcHRpb25zUGFuZWwiLCJQQU5FTF9PUFRJT05TIiwiY29ybmVyUmFkaXVzIiwiUEFORUxfQ09STkVSX1JBRElVUyIsImZpbGwiLCJQQU5FTF9CQUNLR1JPVU5EX0NPTE9SIiwieE1hcmdpbiIsIlBBTkVMX01BUkdJTiIsInlNYXJnaW4iLCJtYXhXaWR0aCIsIlBBTkVMX01BWF9XSURUSCIsIm1pbldpZHRoIiwiUEFORUxfTUlOX1dJRFRIIiwiQ29udHJvbFBhbmVscyIsImNvbnN0cnVjdG9yIiwic2xpZGVyUHJvcGVydHlBcnJheSIsIm9yZGVyUHJvcGVydHkiLCJmaXRQcm9wZXJ0eSIsImN1cnZlVmlzaWJsZVByb3BlcnR5IiwicmVzaWR1YWxzVmlzaWJsZVByb3BlcnR5IiwidmFsdWVzUHJvcGVydHkiLCJvcHRpb25zIiwiYWxpZ24iLCJzcGFjaW5nIiwiZXhjbHVkZUludmlzaWJsZUNoaWxkcmVuRnJvbUJvdW5kcyIsInZpZXdPcHRpb25zUGFuZWwiLCJvcmRlclBhbmVsIiwiZml0UGFuZWwiLCJhc3NlcnQiLCJjaGlsZHJlbiIsImxpbmtBdHRyaWJ1dGUiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29udHJvbFBhbmVscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb250YWluZXIgZm9yIGNvbnRyb2wgcGFuZWxzXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY3VydmVGaXR0aW5nIGZyb20gJy4uLy4uL2N1cnZlRml0dGluZy5qcyc7XHJcbmltcG9ydCBDdXJ2ZUZpdHRpbmdDb25zdGFudHMgZnJvbSAnLi4vQ3VydmVGaXR0aW5nQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEN1cnZlT3JkZXJQYW5lbCBmcm9tICcuL0N1cnZlT3JkZXJQYW5lbC5qcyc7XHJcbmltcG9ydCBGaXRQYW5lbCBmcm9tICcuL0ZpdFBhbmVsLmpzJztcclxuaW1wb3J0IFZpZXdPcHRpb25zUGFuZWwgZnJvbSAnLi9WaWV3T3B0aW9uc1BhbmVsLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBQQU5FTF9PUFRJT05TID0ge1xyXG4gIGNvcm5lclJhZGl1czogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLlBBTkVMX0NPUk5FUl9SQURJVVMsXHJcbiAgZmlsbDogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLlBBTkVMX0JBQ0tHUk9VTkRfQ09MT1IsXHJcbiAgeE1hcmdpbjogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLlBBTkVMX01BUkdJTixcclxuICB5TWFyZ2luOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuUEFORUxfTUFSR0lOLFxyXG4gIG1heFdpZHRoOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuUEFORUxfTUFYX1dJRFRILFxyXG4gIG1pbldpZHRoOiBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuUEFORUxfTUlOX1dJRFRIXHJcbn07XHJcblxyXG5jbGFzcyBDb250cm9sUGFuZWxzIGV4dGVuZHMgVkJveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj5bXX0gc2xpZGVyUHJvcGVydHlBcnJheVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IG9yZGVyUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxGaXRUeXBlPn0gZml0UHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gY3VydmVWaXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gcmVzaWR1YWxzVmlzaWJsZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHZhbHVlc1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBzbGlkZXJQcm9wZXJ0eUFycmF5LCBvcmRlclByb3BlcnR5LCBmaXRQcm9wZXJ0eSwgY3VydmVWaXNpYmxlUHJvcGVydHksIHJlc2lkdWFsc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgICAgICAgICAgdmFsdWVzUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogMTIsXHJcbiAgICAgIGV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHM6IHRydWVcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyB2aWV3IG9wdGlvbnNcclxuICAgIGNvbnN0IHZpZXdPcHRpb25zUGFuZWwgPSBuZXcgVmlld09wdGlvbnNQYW5lbCggY3VydmVWaXNpYmxlUHJvcGVydHksIHJlc2lkdWFsc1Zpc2libGVQcm9wZXJ0eSwgdmFsdWVzUHJvcGVydHksIFBBTkVMX09QVElPTlMgKTtcclxuXHJcbiAgICAvLyBvcmRlciBvZiBjdXJ2ZVxyXG4gICAgY29uc3Qgb3JkZXJQYW5lbCA9IG5ldyBDdXJ2ZU9yZGVyUGFuZWwoIG9yZGVyUHJvcGVydHksIFBBTkVMX09QVElPTlMgKTtcclxuXHJcbiAgICAvLyBmaXQgdHlwZVxyXG4gICAgY29uc3QgZml0UGFuZWwgPSBuZXcgRml0UGFuZWwoIHNsaWRlclByb3BlcnR5QXJyYXksIGZpdFByb3BlcnR5LCBvcmRlclByb3BlcnR5LCBQQU5FTF9PUFRJT05TICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuY2hpbGRyZW4sICdkZWNvcmF0aW9uIG5vdCBzdXBwb3J0ZWQnICk7XHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyB2aWV3T3B0aW9uc1BhbmVsLCBvcmRlclBhbmVsLCBmaXRQYW5lbCBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgc3RvcmVkIGluIGFzIGEgZmllbGQgb2YgQ29udHJvbFBhbmVscyBmb3IgIzE2MVxyXG4gICAgdGhpcy52aWV3T3B0aW9uc1BhbmVsID0gdmlld09wdGlvbnNQYW5lbDtcclxuXHJcbiAgICAvLyBoaWRlIHBhbmVscyB3aGVuIGN1cnZlIGlzIG5vdCB2aXNpYmxlOyB1bmxpbmsgdW5uZWNlc3NhcnkgYmVjYXVzZSBDb250cm9sUGFuZWxzIGlzIGFsd2F5cyBwcmVzZW50XHJcbiAgICBjdXJ2ZVZpc2libGVQcm9wZXJ0eS5saW5rQXR0cmlidXRlKCBvcmRlclBhbmVsLCAndmlzaWJsZScgKTtcclxuICAgIGN1cnZlVmlzaWJsZVByb3BlcnR5LmxpbmtBdHRyaWJ1dGUoIGZpdFBhbmVsLCAndmlzaWJsZScgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMudmlld09wdGlvbnNQYW5lbC5yZXNldCgpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmN1cnZlRml0dGluZy5yZWdpc3RlciggJ0NvbnRyb2xQYW5lbHMnLCBDb250cm9sUGFuZWxzICk7XHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xQYW5lbHM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUMvRCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLFFBQVEsTUFBTSxlQUFlO0FBQ3BDLE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1Qjs7QUFFcEQ7QUFDQSxNQUFNQyxhQUFhLEdBQUc7RUFDcEJDLFlBQVksRUFBRUwscUJBQXFCLENBQUNNLG1CQUFtQjtFQUN2REMsSUFBSSxFQUFFUCxxQkFBcUIsQ0FBQ1Esc0JBQXNCO0VBQ2xEQyxPQUFPLEVBQUVULHFCQUFxQixDQUFDVSxZQUFZO0VBQzNDQyxPQUFPLEVBQUVYLHFCQUFxQixDQUFDVSxZQUFZO0VBQzNDRSxRQUFRLEVBQUVaLHFCQUFxQixDQUFDYSxlQUFlO0VBQy9DQyxRQUFRLEVBQUVkLHFCQUFxQixDQUFDZTtBQUNsQyxDQUFDO0FBRUQsTUFBTUMsYUFBYSxTQUFTbEIsSUFBSSxDQUFDO0VBRS9CO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFbUIsV0FBV0EsQ0FBRUMsbUJBQW1CLEVBQUVDLGFBQWEsRUFBRUMsV0FBVyxFQUFFQyxvQkFBb0IsRUFBRUMsd0JBQXdCLEVBQy9GQyxjQUFjLEVBQUVDLE9BQU8sRUFBRztJQUNyQ0EsT0FBTyxHQUFHM0IsS0FBSyxDQUFFO01BQ2Y0QixLQUFLLEVBQUUsTUFBTTtNQUNiQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxrQ0FBa0MsRUFBRTtJQUN0QyxDQUFDLEVBQUVILE9BQVEsQ0FBQzs7SUFFWjtJQUNBLE1BQU1JLGdCQUFnQixHQUFHLElBQUl6QixnQkFBZ0IsQ0FBRWtCLG9CQUFvQixFQUFFQyx3QkFBd0IsRUFBRUMsY0FBYyxFQUFFbkIsYUFBYyxDQUFDOztJQUU5SDtJQUNBLE1BQU15QixVQUFVLEdBQUcsSUFBSTVCLGVBQWUsQ0FBRWtCLGFBQWEsRUFBRWYsYUFBYyxDQUFDOztJQUV0RTtJQUNBLE1BQU0wQixRQUFRLEdBQUcsSUFBSTVCLFFBQVEsQ0FBRWdCLG1CQUFtQixFQUFFRSxXQUFXLEVBQUVELGFBQWEsRUFBRWYsYUFBYyxDQUFDO0lBRS9GMkIsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ1AsT0FBTyxDQUFDUSxRQUFRLEVBQUUsMEJBQTJCLENBQUM7SUFDakVSLE9BQU8sQ0FBQ1EsUUFBUSxHQUFHLENBQUVKLGdCQUFnQixFQUFFQyxVQUFVLEVBQUVDLFFBQVEsQ0FBRTtJQUU3RCxLQUFLLENBQUVOLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQSxJQUFJLENBQUNJLGdCQUFnQixHQUFHQSxnQkFBZ0I7O0lBRXhDO0lBQ0FQLG9CQUFvQixDQUFDWSxhQUFhLENBQUVKLFVBQVUsRUFBRSxTQUFVLENBQUM7SUFDM0RSLG9CQUFvQixDQUFDWSxhQUFhLENBQUVILFFBQVEsRUFBRSxTQUFVLENBQUM7RUFDM0Q7O0VBRUE7QUFDRjtBQUNBO0VBQ0VJLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ04sZ0JBQWdCLENBQUNNLEtBQUssQ0FBQyxDQUFDO0VBQy9CO0FBRUY7QUFFQW5DLFlBQVksQ0FBQ29DLFFBQVEsQ0FBRSxlQUFlLEVBQUVuQixhQUFjLENBQUM7QUFDdkQsZUFBZUEsYUFBYSJ9