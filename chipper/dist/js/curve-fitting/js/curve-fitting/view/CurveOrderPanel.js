// Copyright 2016-2022, University of Colorado Boulder

/**
 * Control panel for selecting order of the curve.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Text, VBox } from '../../../../scenery/js/imports.js';
import AquaRadioButton from '../../../../sun/js/AquaRadioButton.js';
import Panel from '../../../../sun/js/Panel.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingStrings from '../../CurveFittingStrings.js';
import CurveFittingConstants from '../CurveFittingConstants.js';
const cubicString = CurveFittingStrings.cubic;
const linearString = CurveFittingStrings.linear;
const quadraticString = CurveFittingStrings.quadratic;
class CurveOrderPanel extends Panel {
  /**
   * @param {Property.<number>} orderProperty - order of the polynomial that describes the curve
   * @param {Object} [options]
   */
  constructor(orderProperty, options) {
    // radio buttons
    const linearButton = createRadioButton(orderProperty, 1, linearString);
    const quadraticButton = createRadioButton(orderProperty, 2, quadraticString);
    const cubicButton = createRadioButton(orderProperty, 3, cubicString);

    // vertical layout
    const contentNode = new VBox({
      align: 'left',
      spacing: CurveFittingConstants.CONTROLS_Y_SPACING,
      children: [linearButton, quadraticButton, cubicButton]
    });
    super(contentNode, options);
  }
}

/**
 * Creates a uniform radio button for this panel.
 *
 * @param {Property.<number>} orderProperty
 * @param {number} value
 * @param {string} label
 * @returns {AquaRadioButton}
 */
function createRadioButton(orderProperty, value, label) {
  return new AquaRadioButton(orderProperty, value, new Text(label, {
    font: CurveFittingConstants.CONTROL_FONT,
    maxWidth: 140 // determined empirically
  }), CurveFittingConstants.RADIO_BUTTON_OPTIONS);
}
curveFitting.register('CurveOrderPanel', CurveOrderPanel);
export default CurveOrderPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiVkJveCIsIkFxdWFSYWRpb0J1dHRvbiIsIlBhbmVsIiwiY3VydmVGaXR0aW5nIiwiQ3VydmVGaXR0aW5nU3RyaW5ncyIsIkN1cnZlRml0dGluZ0NvbnN0YW50cyIsImN1YmljU3RyaW5nIiwiY3ViaWMiLCJsaW5lYXJTdHJpbmciLCJsaW5lYXIiLCJxdWFkcmF0aWNTdHJpbmciLCJxdWFkcmF0aWMiLCJDdXJ2ZU9yZGVyUGFuZWwiLCJjb25zdHJ1Y3RvciIsIm9yZGVyUHJvcGVydHkiLCJvcHRpb25zIiwibGluZWFyQnV0dG9uIiwiY3JlYXRlUmFkaW9CdXR0b24iLCJxdWFkcmF0aWNCdXR0b24iLCJjdWJpY0J1dHRvbiIsImNvbnRlbnROb2RlIiwiYWxpZ24iLCJzcGFjaW5nIiwiQ09OVFJPTFNfWV9TUEFDSU5HIiwiY2hpbGRyZW4iLCJ2YWx1ZSIsImxhYmVsIiwiZm9udCIsIkNPTlRST0xfRk9OVCIsIm1heFdpZHRoIiwiUkFESU9fQlVUVE9OX09QVElPTlMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1cnZlT3JkZXJQYW5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb250cm9sIHBhbmVsIGZvciBzZWxlY3Rpbmcgb3JkZXIgb2YgdGhlIGN1cnZlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQXF1YVJhZGlvQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9BcXVhUmFkaW9CdXR0b24uanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IGN1cnZlRml0dGluZyBmcm9tICcuLi8uLi9jdXJ2ZUZpdHRpbmcuanMnO1xyXG5pbXBvcnQgQ3VydmVGaXR0aW5nU3RyaW5ncyBmcm9tICcuLi8uLi9DdXJ2ZUZpdHRpbmdTdHJpbmdzLmpzJztcclxuaW1wb3J0IEN1cnZlRml0dGluZ0NvbnN0YW50cyBmcm9tICcuLi9DdXJ2ZUZpdHRpbmdDb25zdGFudHMuanMnO1xyXG5cclxuY29uc3QgY3ViaWNTdHJpbmcgPSBDdXJ2ZUZpdHRpbmdTdHJpbmdzLmN1YmljO1xyXG5jb25zdCBsaW5lYXJTdHJpbmcgPSBDdXJ2ZUZpdHRpbmdTdHJpbmdzLmxpbmVhcjtcclxuY29uc3QgcXVhZHJhdGljU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy5xdWFkcmF0aWM7XHJcblxyXG5jbGFzcyBDdXJ2ZU9yZGVyUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IG9yZGVyUHJvcGVydHkgLSBvcmRlciBvZiB0aGUgcG9seW5vbWlhbCB0aGF0IGRlc2NyaWJlcyB0aGUgY3VydmVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9yZGVyUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gcmFkaW8gYnV0dG9uc1xyXG4gICAgY29uc3QgbGluZWFyQnV0dG9uID0gY3JlYXRlUmFkaW9CdXR0b24oIG9yZGVyUHJvcGVydHksIDEsIGxpbmVhclN0cmluZyApO1xyXG4gICAgY29uc3QgcXVhZHJhdGljQnV0dG9uID0gY3JlYXRlUmFkaW9CdXR0b24oIG9yZGVyUHJvcGVydHksIDIsIHF1YWRyYXRpY1N0cmluZyApO1xyXG4gICAgY29uc3QgY3ViaWNCdXR0b24gPSBjcmVhdGVSYWRpb0J1dHRvbiggb3JkZXJQcm9wZXJ0eSwgMywgY3ViaWNTdHJpbmcgKTtcclxuXHJcbiAgICAvLyB2ZXJ0aWNhbCBsYXlvdXRcclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gbmV3IFZCb3goIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLkNPTlRST0xTX1lfU1BBQ0lORyxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBsaW5lYXJCdXR0b24sXHJcbiAgICAgICAgcXVhZHJhdGljQnV0dG9uLFxyXG4gICAgICAgIGN1YmljQnV0dG9uXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudE5vZGUsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHVuaWZvcm0gcmFkaW8gYnV0dG9uIGZvciB0aGlzIHBhbmVsLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1Byb3BlcnR5LjxudW1iZXI+fSBvcmRlclByb3BlcnR5XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGFiZWxcclxuICogQHJldHVybnMge0FxdWFSYWRpb0J1dHRvbn1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJhZGlvQnV0dG9uKCBvcmRlclByb3BlcnR5LCB2YWx1ZSwgbGFiZWwgKSB7XHJcbiAgcmV0dXJuIG5ldyBBcXVhUmFkaW9CdXR0b24oXHJcbiAgICBvcmRlclByb3BlcnR5LFxyXG4gICAgdmFsdWUsXHJcbiAgICBuZXcgVGV4dCggbGFiZWwsIHtcclxuICAgICAgZm9udDogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLkNPTlRST0xfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDE0MCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICB9ICksXHJcbiAgICBDdXJ2ZUZpdHRpbmdDb25zdGFudHMuUkFESU9fQlVUVE9OX09QVElPTlNcclxuICApO1xyXG59XHJcblxyXG5jdXJ2ZUZpdHRpbmcucmVnaXN0ZXIoICdDdXJ2ZU9yZGVyUGFuZWwnLCBDdXJ2ZU9yZGVyUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ3VydmVPcmRlclBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsZUFBZSxNQUFNLHVDQUF1QztBQUNuRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsbUJBQW1CLE1BQU0sOEJBQThCO0FBQzlELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUUvRCxNQUFNQyxXQUFXLEdBQUdGLG1CQUFtQixDQUFDRyxLQUFLO0FBQzdDLE1BQU1DLFlBQVksR0FBR0osbUJBQW1CLENBQUNLLE1BQU07QUFDL0MsTUFBTUMsZUFBZSxHQUFHTixtQkFBbUIsQ0FBQ08sU0FBUztBQUVyRCxNQUFNQyxlQUFlLFNBQVNWLEtBQUssQ0FBQztFQUVsQztBQUNGO0FBQ0E7QUFDQTtFQUNFVyxXQUFXQSxDQUFFQyxhQUFhLEVBQUVDLE9BQU8sRUFBRztJQUVwQztJQUNBLE1BQU1DLFlBQVksR0FBR0MsaUJBQWlCLENBQUVILGFBQWEsRUFBRSxDQUFDLEVBQUVOLFlBQWEsQ0FBQztJQUN4RSxNQUFNVSxlQUFlLEdBQUdELGlCQUFpQixDQUFFSCxhQUFhLEVBQUUsQ0FBQyxFQUFFSixlQUFnQixDQUFDO0lBQzlFLE1BQU1TLFdBQVcsR0FBR0YsaUJBQWlCLENBQUVILGFBQWEsRUFBRSxDQUFDLEVBQUVSLFdBQVksQ0FBQzs7SUFFdEU7SUFDQSxNQUFNYyxXQUFXLEdBQUcsSUFBSXBCLElBQUksQ0FBRTtNQUM1QnFCLEtBQUssRUFBRSxNQUFNO01BQ2JDLE9BQU8sRUFBRWpCLHFCQUFxQixDQUFDa0Isa0JBQWtCO01BQ2pEQyxRQUFRLEVBQUUsQ0FDUlIsWUFBWSxFQUNaRSxlQUFlLEVBQ2ZDLFdBQVc7SUFFZixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVDLFdBQVcsRUFBRUwsT0FBUSxDQUFDO0VBQy9CO0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLGlCQUFpQkEsQ0FBRUgsYUFBYSxFQUFFVyxLQUFLLEVBQUVDLEtBQUssRUFBRztFQUN4RCxPQUFPLElBQUl6QixlQUFlLENBQ3hCYSxhQUFhLEVBQ2JXLEtBQUssRUFDTCxJQUFJMUIsSUFBSSxDQUFFMkIsS0FBSyxFQUFFO0lBQ2ZDLElBQUksRUFBRXRCLHFCQUFxQixDQUFDdUIsWUFBWTtJQUN4Q0MsUUFBUSxFQUFFLEdBQUcsQ0FBQztFQUNoQixDQUFFLENBQUMsRUFDSHhCLHFCQUFxQixDQUFDeUIsb0JBQ3hCLENBQUM7QUFDSDtBQUVBM0IsWUFBWSxDQUFDNEIsUUFBUSxDQUFFLGlCQUFpQixFQUFFbkIsZUFBZ0IsQ0FBQztBQUMzRCxlQUFlQSxlQUFlIn0=