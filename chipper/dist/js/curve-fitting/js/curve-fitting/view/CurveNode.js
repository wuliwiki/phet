// Copyright 2002-2022, University of Colorado Boulder

/**
 * Curve node in 'Curve Fitting' simulation.
 *
 * @author Martin Veillette (Berea College)
 */

import { Shape } from '../../../../kite/js/imports.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingConstants from '../CurveFittingConstants.js';

// constants
const CURVE_OPTIONS = {
  stroke: 'black',
  lineWidth: 2
};
class CurveNode extends Node {
  /**
   * @param {Curve} curve - curve model.
   * @param {Property.<boolean>} curveVisibleProperty
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(curve, curveVisibleProperty, modelViewTransform) {
    super();

    // add clip area
    this.clipArea = Shape.bounds(modelViewTransform.modelToViewBounds(CurveFittingConstants.CURVE_CLIP_BOUNDS));

    // create and add curve
    const curvePath = new Path(null, CURVE_OPTIONS);
    this.addChild(curvePath);

    /**
     * updates the curve
     */
    const updateCurve = () => {
      if (curveVisibleProperty.value && curve.isCurvePresent()) {
        curvePath.shape = modelViewTransform.modelToViewShape(curve.shape);
      } else {
        // reset the curve shape to null
        curvePath.shape = null;
      }
    };

    // unlink and removeListener unnecessary because this CurveNode is always present for the lifetime of the simulation
    curveVisibleProperty.link(updateCurve);
    curve.orderProperty.link(updateCurve);
    curve.updateCurveEmitter.addListener(updateCurve);
  }
}
curveFitting.register('CurveNode', CurveNode);
export default CurveNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIk5vZGUiLCJQYXRoIiwiY3VydmVGaXR0aW5nIiwiQ3VydmVGaXR0aW5nQ29uc3RhbnRzIiwiQ1VSVkVfT1BUSU9OUyIsInN0cm9rZSIsImxpbmVXaWR0aCIsIkN1cnZlTm9kZSIsImNvbnN0cnVjdG9yIiwiY3VydmUiLCJjdXJ2ZVZpc2libGVQcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImNsaXBBcmVhIiwiYm91bmRzIiwibW9kZWxUb1ZpZXdCb3VuZHMiLCJDVVJWRV9DTElQX0JPVU5EUyIsImN1cnZlUGF0aCIsImFkZENoaWxkIiwidXBkYXRlQ3VydmUiLCJ2YWx1ZSIsImlzQ3VydmVQcmVzZW50Iiwic2hhcGUiLCJtb2RlbFRvVmlld1NoYXBlIiwibGluayIsIm9yZGVyUHJvcGVydHkiLCJ1cGRhdGVDdXJ2ZUVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ3VydmVOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDAyLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEN1cnZlIG5vZGUgaW4gJ0N1cnZlIEZpdHRpbmcnIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZSAoQmVyZWEgQ29sbGVnZSlcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY3VydmVGaXR0aW5nIGZyb20gJy4uLy4uL2N1cnZlRml0dGluZy5qcyc7XHJcbmltcG9ydCBDdXJ2ZUZpdHRpbmdDb25zdGFudHMgZnJvbSAnLi4vQ3VydmVGaXR0aW5nQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBDVVJWRV9PUFRJT05TID0geyBzdHJva2U6ICdibGFjaycsIGxpbmVXaWR0aDogMiB9O1xyXG5cclxuY2xhc3MgQ3VydmVOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q3VydmV9IGN1cnZlIC0gY3VydmUgbW9kZWwuXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGN1cnZlVmlzaWJsZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY3VydmUsIGN1cnZlVmlzaWJsZVByb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBhZGQgY2xpcCBhcmVhXHJcbiAgICB0aGlzLmNsaXBBcmVhID0gU2hhcGUuYm91bmRzKCBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdCb3VuZHMoIEN1cnZlRml0dGluZ0NvbnN0YW50cy5DVVJWRV9DTElQX0JPVU5EUyApICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIGFuZCBhZGQgY3VydmVcclxuICAgIGNvbnN0IGN1cnZlUGF0aCA9IG5ldyBQYXRoKCBudWxsLCBDVVJWRV9PUFRJT05TICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBjdXJ2ZVBhdGggKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHVwZGF0ZXMgdGhlIGN1cnZlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUN1cnZlID0gKCkgPT4ge1xyXG4gICAgICBpZiAoIGN1cnZlVmlzaWJsZVByb3BlcnR5LnZhbHVlICYmIGN1cnZlLmlzQ3VydmVQcmVzZW50KCkgKSB7XHJcbiAgICAgICAgY3VydmVQYXRoLnNoYXBlID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3U2hhcGUoIGN1cnZlLnNoYXBlICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIHJlc2V0IHRoZSBjdXJ2ZSBzaGFwZSB0byBudWxsXHJcbiAgICAgICAgY3VydmVQYXRoLnNoYXBlID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyB1bmxpbmsgYW5kIHJlbW92ZUxpc3RlbmVyIHVubmVjZXNzYXJ5IGJlY2F1c2UgdGhpcyBDdXJ2ZU5vZGUgaXMgYWx3YXlzIHByZXNlbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltdWxhdGlvblxyXG4gICAgY3VydmVWaXNpYmxlUHJvcGVydHkubGluayggdXBkYXRlQ3VydmUgKTtcclxuICAgIGN1cnZlLm9yZGVyUHJvcGVydHkubGluayggdXBkYXRlQ3VydmUgKTtcclxuICAgIGN1cnZlLnVwZGF0ZUN1cnZlRW1pdHRlci5hZGRMaXN0ZW5lciggdXBkYXRlQ3VydmUgKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5jdXJ2ZUZpdHRpbmcucmVnaXN0ZXIoICdDdXJ2ZU5vZGUnLCBDdXJ2ZU5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ3VydmVOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2Qjs7QUFFL0Q7QUFDQSxNQUFNQyxhQUFhLEdBQUc7RUFBRUMsTUFBTSxFQUFFLE9BQU87RUFBRUMsU0FBUyxFQUFFO0FBQUUsQ0FBQztBQUV2RCxNQUFNQyxTQUFTLFNBQVNQLElBQUksQ0FBQztFQUUzQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsb0JBQW9CLEVBQUVDLGtCQUFrQixFQUFHO0lBRTdELEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLEdBQUdiLEtBQUssQ0FBQ2MsTUFBTSxDQUFFRixrQkFBa0IsQ0FBQ0csaUJBQWlCLENBQUVYLHFCQUFxQixDQUFDWSxpQkFBa0IsQ0FBRSxDQUFDOztJQUUvRztJQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJZixJQUFJLENBQUUsSUFBSSxFQUFFRyxhQUFjLENBQUM7SUFDakQsSUFBSSxDQUFDYSxRQUFRLENBQUVELFNBQVUsQ0FBQzs7SUFFMUI7QUFDSjtBQUNBO0lBQ0ksTUFBTUUsV0FBVyxHQUFHQSxDQUFBLEtBQU07TUFDeEIsSUFBS1Isb0JBQW9CLENBQUNTLEtBQUssSUFBSVYsS0FBSyxDQUFDVyxjQUFjLENBQUMsQ0FBQyxFQUFHO1FBQzFESixTQUFTLENBQUNLLEtBQUssR0FBR1Ysa0JBQWtCLENBQUNXLGdCQUFnQixDQUFFYixLQUFLLENBQUNZLEtBQU0sQ0FBQztNQUN0RSxDQUFDLE1BQ0k7UUFFSDtRQUNBTCxTQUFTLENBQUNLLEtBQUssR0FBRyxJQUFJO01BQ3hCO0lBQ0YsQ0FBQzs7SUFFRDtJQUNBWCxvQkFBb0IsQ0FBQ2EsSUFBSSxDQUFFTCxXQUFZLENBQUM7SUFDeENULEtBQUssQ0FBQ2UsYUFBYSxDQUFDRCxJQUFJLENBQUVMLFdBQVksQ0FBQztJQUN2Q1QsS0FBSyxDQUFDZ0Isa0JBQWtCLENBQUNDLFdBQVcsQ0FBRVIsV0FBWSxDQUFDO0VBQ3JEO0FBRUY7QUFFQWhCLFlBQVksQ0FBQ3lCLFFBQVEsQ0FBRSxXQUFXLEVBQUVwQixTQUFVLENBQUM7QUFDL0MsZUFBZUEsU0FBUyJ9