// Copyright 2016-2022, University of Colorado Boulder

/**
 * Control panel for selecting view options.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Text, VBox } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Panel from '../../../../sun/js/Panel.js';
import curveFitting from '../../curveFitting.js';
import CurveFittingStrings from '../../CurveFittingStrings.js';
import CurveFittingConstants from '../CurveFittingConstants.js';
const curveString = CurveFittingStrings.curve;
const residualsString = CurveFittingStrings.residuals;
const valuesString = CurveFittingStrings.values;
class ViewOptionsPanel extends Panel {
  /**
   * @param {Property.<boolean>} curveVisibleProperty
   * @param {Property.<boolean>} residualsVisibleProperty
   * @param {Property.<boolean>} valuesVisibleProperty
   * @param {Object} [options]
   */
  constructor(curveVisibleProperty, residualsVisibleProperty, valuesVisibleProperty, options) {
    // checkboxes
    const curveCheckbox = createCheckbox(curveVisibleProperty, curveString);
    const residualsCheckbox = createCheckbox(residualsVisibleProperty, residualsString);
    const valuesCheckbox = createCheckbox(valuesVisibleProperty, valuesString);

    // vertical layout
    const contentNode = new VBox({
      spacing: CurveFittingConstants.CONTROLS_Y_SPACING,
      align: 'left',
      children: [curveCheckbox, residualsCheckbox, valuesCheckbox]
    });
    super(contentNode, options);

    // @private Saves state of residualsVisibleProperty while the residuals checkbox is disabled.
    this.wereResidualsVisible = residualsVisibleProperty.value;

    // Visibility of the curve affects other controls. No dispose necessary because this panel is present for the lifetime of the sim.
    curveVisibleProperty.link(isCurveVisible => {
      // Enable residuals checkbox when curve is checked.
      residualsCheckbox.enabled = isCurveVisible;
      if (isCurveVisible) {
        // When curve is checked, restore the state of residuals.
        residualsVisibleProperty.value = this.wereResidualsVisible;
      } else {
        // When the curve is unchecked, save residuals state and turn off residuals.
        this.wereResidualsVisible = residualsVisibleProperty.value;
        residualsVisibleProperty.value = false;
      }
    });
  }

  /**
   * @public
   * Resets wereResidualsVisible for #161
   */
  reset() {
    this.wereResidualsVisible = false;
  }
}

/**
 * Creates a checkbox for this panel.
 * @param {Property} property
 * @param {string} label
 * @returns {Checkbox}
 */
function createCheckbox(property, label) {
  return new Checkbox(property, new Text(label, {
    font: CurveFittingConstants.CONTROL_FONT,
    maxWidth: 140 // determined empirically
  }), CurveFittingConstants.CHECKBOX_OPTIONS);
}
curveFitting.register('ViewOptionsPanel', ViewOptionsPanel);
export default ViewOptionsPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiVkJveCIsIkNoZWNrYm94IiwiUGFuZWwiLCJjdXJ2ZUZpdHRpbmciLCJDdXJ2ZUZpdHRpbmdTdHJpbmdzIiwiQ3VydmVGaXR0aW5nQ29uc3RhbnRzIiwiY3VydmVTdHJpbmciLCJjdXJ2ZSIsInJlc2lkdWFsc1N0cmluZyIsInJlc2lkdWFscyIsInZhbHVlc1N0cmluZyIsInZhbHVlcyIsIlZpZXdPcHRpb25zUGFuZWwiLCJjb25zdHJ1Y3RvciIsImN1cnZlVmlzaWJsZVByb3BlcnR5IiwicmVzaWR1YWxzVmlzaWJsZVByb3BlcnR5IiwidmFsdWVzVmlzaWJsZVByb3BlcnR5Iiwib3B0aW9ucyIsImN1cnZlQ2hlY2tib3giLCJjcmVhdGVDaGVja2JveCIsInJlc2lkdWFsc0NoZWNrYm94IiwidmFsdWVzQ2hlY2tib3giLCJjb250ZW50Tm9kZSIsInNwYWNpbmciLCJDT05UUk9MU19ZX1NQQUNJTkciLCJhbGlnbiIsImNoaWxkcmVuIiwid2VyZVJlc2lkdWFsc1Zpc2libGUiLCJ2YWx1ZSIsImxpbmsiLCJpc0N1cnZlVmlzaWJsZSIsImVuYWJsZWQiLCJyZXNldCIsInByb3BlcnR5IiwibGFiZWwiLCJmb250IiwiQ09OVFJPTF9GT05UIiwibWF4V2lkdGgiLCJDSEVDS0JPWF9PUFRJT05TIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJWaWV3T3B0aW9uc1BhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2wgcGFuZWwgZm9yIHNlbGVjdGluZyB2aWV3IG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IGN1cnZlRml0dGluZyBmcm9tICcuLi8uLi9jdXJ2ZUZpdHRpbmcuanMnO1xyXG5pbXBvcnQgQ3VydmVGaXR0aW5nU3RyaW5ncyBmcm9tICcuLi8uLi9DdXJ2ZUZpdHRpbmdTdHJpbmdzLmpzJztcclxuaW1wb3J0IEN1cnZlRml0dGluZ0NvbnN0YW50cyBmcm9tICcuLi9DdXJ2ZUZpdHRpbmdDb25zdGFudHMuanMnO1xyXG5cclxuY29uc3QgY3VydmVTdHJpbmcgPSBDdXJ2ZUZpdHRpbmdTdHJpbmdzLmN1cnZlO1xyXG5jb25zdCByZXNpZHVhbHNTdHJpbmcgPSBDdXJ2ZUZpdHRpbmdTdHJpbmdzLnJlc2lkdWFscztcclxuY29uc3QgdmFsdWVzU3RyaW5nID0gQ3VydmVGaXR0aW5nU3RyaW5ncy52YWx1ZXM7XHJcblxyXG5jbGFzcyBWaWV3T3B0aW9uc1BhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gY3VydmVWaXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gcmVzaWR1YWxzVmlzaWJsZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHZhbHVlc1Zpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY3VydmVWaXNpYmxlUHJvcGVydHksIHJlc2lkdWFsc1Zpc2libGVQcm9wZXJ0eSwgdmFsdWVzVmlzaWJsZVByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIC8vIGNoZWNrYm94ZXNcclxuICAgIGNvbnN0IGN1cnZlQ2hlY2tib3ggPSBjcmVhdGVDaGVja2JveCggY3VydmVWaXNpYmxlUHJvcGVydHksIGN1cnZlU3RyaW5nICk7XHJcbiAgICBjb25zdCByZXNpZHVhbHNDaGVja2JveCA9IGNyZWF0ZUNoZWNrYm94KCByZXNpZHVhbHNWaXNpYmxlUHJvcGVydHksIHJlc2lkdWFsc1N0cmluZyApO1xyXG4gICAgY29uc3QgdmFsdWVzQ2hlY2tib3ggPSBjcmVhdGVDaGVja2JveCggdmFsdWVzVmlzaWJsZVByb3BlcnR5LCB2YWx1ZXNTdHJpbmcgKTtcclxuXHJcbiAgICAvLyB2ZXJ0aWNhbCBsYXlvdXRcclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gbmV3IFZCb3goIHtcclxuICAgICAgc3BhY2luZzogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLkNPTlRST0xTX1lfU1BBQ0lORyxcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBjdXJ2ZUNoZWNrYm94LFxyXG4gICAgICAgIHJlc2lkdWFsc0NoZWNrYm94LFxyXG4gICAgICAgIHZhbHVlc0NoZWNrYm94XHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudE5vZGUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSBTYXZlcyBzdGF0ZSBvZiByZXNpZHVhbHNWaXNpYmxlUHJvcGVydHkgd2hpbGUgdGhlIHJlc2lkdWFscyBjaGVja2JveCBpcyBkaXNhYmxlZC5cclxuICAgIHRoaXMud2VyZVJlc2lkdWFsc1Zpc2libGUgPSByZXNpZHVhbHNWaXNpYmxlUHJvcGVydHkudmFsdWU7XHJcblxyXG4gICAgLy8gVmlzaWJpbGl0eSBvZiB0aGUgY3VydmUgYWZmZWN0cyBvdGhlciBjb250cm9scy4gTm8gZGlzcG9zZSBuZWNlc3NhcnkgYmVjYXVzZSB0aGlzIHBhbmVsIGlzIHByZXNlbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltLlxyXG4gICAgY3VydmVWaXNpYmxlUHJvcGVydHkubGluayggaXNDdXJ2ZVZpc2libGUgPT4ge1xyXG5cclxuICAgICAgLy8gRW5hYmxlIHJlc2lkdWFscyBjaGVja2JveCB3aGVuIGN1cnZlIGlzIGNoZWNrZWQuXHJcbiAgICAgIHJlc2lkdWFsc0NoZWNrYm94LmVuYWJsZWQgPSBpc0N1cnZlVmlzaWJsZTtcclxuXHJcbiAgICAgIGlmICggaXNDdXJ2ZVZpc2libGUgKSB7XHJcblxyXG4gICAgICAgIC8vIFdoZW4gY3VydmUgaXMgY2hlY2tlZCwgcmVzdG9yZSB0aGUgc3RhdGUgb2YgcmVzaWR1YWxzLlxyXG4gICAgICAgIHJlc2lkdWFsc1Zpc2libGVQcm9wZXJ0eS52YWx1ZSA9IHRoaXMud2VyZVJlc2lkdWFsc1Zpc2libGU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIFdoZW4gdGhlIGN1cnZlIGlzIHVuY2hlY2tlZCwgc2F2ZSByZXNpZHVhbHMgc3RhdGUgYW5kIHR1cm4gb2ZmIHJlc2lkdWFscy5cclxuICAgICAgICB0aGlzLndlcmVSZXNpZHVhbHNWaXNpYmxlID0gcmVzaWR1YWxzVmlzaWJsZVByb3BlcnR5LnZhbHVlO1xyXG4gICAgICAgIHJlc2lkdWFsc1Zpc2libGVQcm9wZXJ0eS52YWx1ZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogUmVzZXRzIHdlcmVSZXNpZHVhbHNWaXNpYmxlIGZvciAjMTYxXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLndlcmVSZXNpZHVhbHNWaXNpYmxlID0gZmFsc2U7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBjaGVja2JveCBmb3IgdGhpcyBwYW5lbC5cclxuICogQHBhcmFtIHtQcm9wZXJ0eX0gcHJvcGVydHlcclxuICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsXHJcbiAqIEByZXR1cm5zIHtDaGVja2JveH1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUNoZWNrYm94KCBwcm9wZXJ0eSwgbGFiZWwgKSB7XHJcbiAgcmV0dXJuIG5ldyBDaGVja2JveCggcHJvcGVydHksIG5ldyBUZXh0KCBsYWJlbCwge1xyXG4gICAgZm9udDogQ3VydmVGaXR0aW5nQ29uc3RhbnRzLkNPTlRST0xfRk9OVCxcclxuICAgIG1heFdpZHRoOiAxNDAgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gIH0gKSwgQ3VydmVGaXR0aW5nQ29uc3RhbnRzLkNIRUNLQk9YX09QVElPTlMgKTtcclxufVxyXG5cclxuY3VydmVGaXR0aW5nLnJlZ2lzdGVyKCAnVmlld09wdGlvbnNQYW5lbCcsIFZpZXdPcHRpb25zUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgVmlld09wdGlvbnNQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLFFBQVEsTUFBTSxnQ0FBZ0M7QUFDckQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLG1CQUFtQixNQUFNLDhCQUE4QjtBQUM5RCxPQUFPQyxxQkFBcUIsTUFBTSw2QkFBNkI7QUFFL0QsTUFBTUMsV0FBVyxHQUFHRixtQkFBbUIsQ0FBQ0csS0FBSztBQUM3QyxNQUFNQyxlQUFlLEdBQUdKLG1CQUFtQixDQUFDSyxTQUFTO0FBQ3JELE1BQU1DLFlBQVksR0FBR04sbUJBQW1CLENBQUNPLE1BQU07QUFFL0MsTUFBTUMsZ0JBQWdCLFNBQVNWLEtBQUssQ0FBQztFQUVuQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRVcsV0FBV0EsQ0FBRUMsb0JBQW9CLEVBQUVDLHdCQUF3QixFQUFFQyxxQkFBcUIsRUFBRUMsT0FBTyxFQUFHO0lBRTVGO0lBQ0EsTUFBTUMsYUFBYSxHQUFHQyxjQUFjLENBQUVMLG9CQUFvQixFQUFFUixXQUFZLENBQUM7SUFDekUsTUFBTWMsaUJBQWlCLEdBQUdELGNBQWMsQ0FBRUosd0JBQXdCLEVBQUVQLGVBQWdCLENBQUM7SUFDckYsTUFBTWEsY0FBYyxHQUFHRixjQUFjLENBQUVILHFCQUFxQixFQUFFTixZQUFhLENBQUM7O0lBRTVFO0lBQ0EsTUFBTVksV0FBVyxHQUFHLElBQUl0QixJQUFJLENBQUU7TUFDNUJ1QixPQUFPLEVBQUVsQixxQkFBcUIsQ0FBQ21CLGtCQUFrQjtNQUNqREMsS0FBSyxFQUFFLE1BQU07TUFDYkMsUUFBUSxFQUFFLENBQ1JSLGFBQWEsRUFDYkUsaUJBQWlCLEVBQ2pCQyxjQUFjO0lBRWxCLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRUMsV0FBVyxFQUFFTCxPQUFRLENBQUM7O0lBRTdCO0lBQ0EsSUFBSSxDQUFDVSxvQkFBb0IsR0FBR1osd0JBQXdCLENBQUNhLEtBQUs7O0lBRTFEO0lBQ0FkLG9CQUFvQixDQUFDZSxJQUFJLENBQUVDLGNBQWMsSUFBSTtNQUUzQztNQUNBVixpQkFBaUIsQ0FBQ1csT0FBTyxHQUFHRCxjQUFjO01BRTFDLElBQUtBLGNBQWMsRUFBRztRQUVwQjtRQUNBZix3QkFBd0IsQ0FBQ2EsS0FBSyxHQUFHLElBQUksQ0FBQ0Qsb0JBQW9CO01BQzVELENBQUMsTUFDSTtRQUVIO1FBQ0EsSUFBSSxDQUFDQSxvQkFBb0IsR0FBR1osd0JBQXdCLENBQUNhLEtBQUs7UUFDMURiLHdCQUF3QixDQUFDYSxLQUFLLEdBQUcsS0FBSztNQUN4QztJQUNGLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VJLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ0wsb0JBQW9CLEdBQUcsS0FBSztFQUNuQztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNSLGNBQWNBLENBQUVjLFFBQVEsRUFBRUMsS0FBSyxFQUFHO0VBQ3pDLE9BQU8sSUFBSWpDLFFBQVEsQ0FBRWdDLFFBQVEsRUFBRSxJQUFJbEMsSUFBSSxDQUFFbUMsS0FBSyxFQUFFO0lBQzlDQyxJQUFJLEVBQUU5QixxQkFBcUIsQ0FBQytCLFlBQVk7SUFDeENDLFFBQVEsRUFBRSxHQUFHLENBQUM7RUFDaEIsQ0FBRSxDQUFDLEVBQUVoQyxxQkFBcUIsQ0FBQ2lDLGdCQUFpQixDQUFDO0FBQy9DO0FBRUFuQyxZQUFZLENBQUNvQyxRQUFRLENBQUUsa0JBQWtCLEVBQUUzQixnQkFBaUIsQ0FBQztBQUM3RCxlQUFlQSxnQkFBZ0IifQ==