// Copyright 2020, University of Colorado Boulder

/**
 * createPoints is a collection of Point in 'Curve Fitting' simulation.
 *
 * @author Martin Veillette (Berea College)
 * @author Saurabh Totey
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import curveFitting from '../../curveFitting.js';
const createPoints = () => {
  // @public {Points} - Points for plotting curve. This includes points that are outside the bounds of the graph,
  // so be careful to call getRelevantPoints when using points in calculations. Order of the points doesn't matter.
  const points = createObservableArray();

  /**
   * Gets all points that are within the graph bound and are not animated.
   * Only these points are used for curve-fitting calculations
   * @returns {Array.<Point>} all points that should be used for calculating r^2 and X^2 values
   * @public
   */
  points.getRelevantPoints = () => points.filter(point => point.isInsideGraphProperty.value && point.animation === null);

  /**
   * Returns the number of points on graph that have a unique x position.
   * eg. if the x positions are [8,9,9,9,9,10], it would yield 3
   * @returns {number} the amount of points with a unique x position
   * @public
   */
  points.getNumberUniquePositionX = () => _.chain(points.getRelevantPoints()).map(point => point.positionProperty.value.x).uniq().value().length;
  return points;
};
curveFitting.register('createPoints', createPoints);
export default createPoints;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJjdXJ2ZUZpdHRpbmciLCJjcmVhdGVQb2ludHMiLCJwb2ludHMiLCJnZXRSZWxldmFudFBvaW50cyIsImZpbHRlciIsInBvaW50IiwiaXNJbnNpZGVHcmFwaFByb3BlcnR5IiwidmFsdWUiLCJhbmltYXRpb24iLCJnZXROdW1iZXJVbmlxdWVQb3NpdGlvblgiLCJfIiwiY2hhaW4iLCJtYXAiLCJwb3NpdGlvblByb3BlcnR5IiwieCIsInVuaXEiLCJsZW5ndGgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImNyZWF0ZVBvaW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogY3JlYXRlUG9pbnRzIGlzIGEgY29sbGVjdGlvbiBvZiBQb2ludCBpbiAnQ3VydmUgRml0dGluZycgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlIChCZXJlYSBDb2xsZWdlKVxyXG4gKiBAYXV0aG9yIFNhdXJhYmggVG90ZXlcclxuICovXHJcblxyXG5pbXBvcnQgY3JlYXRlT2JzZXJ2YWJsZUFycmF5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvY3JlYXRlT2JzZXJ2YWJsZUFycmF5LmpzJztcclxuaW1wb3J0IGN1cnZlRml0dGluZyBmcm9tICcuLi8uLi9jdXJ2ZUZpdHRpbmcuanMnO1xyXG5cclxuY29uc3QgY3JlYXRlUG9pbnRzID0gKCkgPT4ge1xyXG5cclxuICAvLyBAcHVibGljIHtQb2ludHN9IC0gUG9pbnRzIGZvciBwbG90dGluZyBjdXJ2ZS4gVGhpcyBpbmNsdWRlcyBwb2ludHMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgYm91bmRzIG9mIHRoZSBncmFwaCxcclxuICAvLyBzbyBiZSBjYXJlZnVsIHRvIGNhbGwgZ2V0UmVsZXZhbnRQb2ludHMgd2hlbiB1c2luZyBwb2ludHMgaW4gY2FsY3VsYXRpb25zLiBPcmRlciBvZiB0aGUgcG9pbnRzIGRvZXNuJ3QgbWF0dGVyLlxyXG4gIGNvbnN0IHBvaW50cyA9IGNyZWF0ZU9ic2VydmFibGVBcnJheSgpO1xyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGFsbCBwb2ludHMgdGhhdCBhcmUgd2l0aGluIHRoZSBncmFwaCBib3VuZCBhbmQgYXJlIG5vdCBhbmltYXRlZC5cclxuICAgKiBPbmx5IHRoZXNlIHBvaW50cyBhcmUgdXNlZCBmb3IgY3VydmUtZml0dGluZyBjYWxjdWxhdGlvbnNcclxuICAgKiBAcmV0dXJucyB7QXJyYXkuPFBvaW50Pn0gYWxsIHBvaW50cyB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBjYWxjdWxhdGluZyByXjIgYW5kIFheMiB2YWx1ZXNcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgcG9pbnRzLmdldFJlbGV2YW50UG9pbnRzID0gKCkgPT4gcG9pbnRzLmZpbHRlciggcG9pbnQgPT4gcG9pbnQuaXNJbnNpZGVHcmFwaFByb3BlcnR5LnZhbHVlICYmIHBvaW50LmFuaW1hdGlvbiA9PT0gbnVsbCApO1xyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcG9pbnRzIG9uIGdyYXBoIHRoYXQgaGF2ZSBhIHVuaXF1ZSB4IHBvc2l0aW9uLlxyXG4gICAqIGVnLiBpZiB0aGUgeCBwb3NpdGlvbnMgYXJlIFs4LDksOSw5LDksMTBdLCBpdCB3b3VsZCB5aWVsZCAzXHJcbiAgICogQHJldHVybnMge251bWJlcn0gdGhlIGFtb3VudCBvZiBwb2ludHMgd2l0aCBhIHVuaXF1ZSB4IHBvc2l0aW9uXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHBvaW50cy5nZXROdW1iZXJVbmlxdWVQb3NpdGlvblggPSAoKSA9PiBfLmNoYWluKCBwb2ludHMuZ2V0UmVsZXZhbnRQb2ludHMoKSApLm1hcCggcG9pbnQgPT4gcG9pbnQucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS54ICkudW5pcSgpLnZhbHVlKCkubGVuZ3RoO1xyXG5cclxuICByZXR1cm4gcG9pbnRzO1xyXG59O1xyXG5cclxuY3VydmVGaXR0aW5nLnJlZ2lzdGVyKCAnY3JlYXRlUG9pbnRzJywgY3JlYXRlUG9pbnRzICk7XHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVBvaW50cztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EscUJBQXFCLE1BQU0sOENBQThDO0FBQ2hGLE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFFaEQsTUFBTUMsWUFBWSxHQUFHQSxDQUFBLEtBQU07RUFFekI7RUFDQTtFQUNBLE1BQU1DLE1BQU0sR0FBR0gscUJBQXFCLENBQUMsQ0FBQzs7RUFFdEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLE1BQU0sQ0FBQ0MsaUJBQWlCLEdBQUcsTUFBTUQsTUFBTSxDQUFDRSxNQUFNLENBQUVDLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxxQkFBcUIsQ0FBQ0MsS0FBSyxJQUFJRixLQUFLLENBQUNHLFNBQVMsS0FBSyxJQUFLLENBQUM7O0VBRXhIO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTixNQUFNLENBQUNPLHdCQUF3QixHQUFHLE1BQU1DLENBQUMsQ0FBQ0MsS0FBSyxDQUFFVCxNQUFNLENBQUNDLGlCQUFpQixDQUFDLENBQUUsQ0FBQyxDQUFDUyxHQUFHLENBQUVQLEtBQUssSUFBSUEsS0FBSyxDQUFDUSxnQkFBZ0IsQ0FBQ04sS0FBSyxDQUFDTyxDQUFFLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQ1IsS0FBSyxDQUFDLENBQUMsQ0FBQ1MsTUFBTTtFQUVsSixPQUFPZCxNQUFNO0FBQ2YsQ0FBQztBQUVERixZQUFZLENBQUNpQixRQUFRLENBQUUsY0FBYyxFQUFFaEIsWUFBYSxDQUFDO0FBQ3JELGVBQWVBLFlBQVkifQ==