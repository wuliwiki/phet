// Copyright 2020-2023, University of Colorado Boulder

/**
 * AxisLine is an axis that consists of a line, with no arrow heads.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../phet-core/js/optionize.js';
import Orientation from '../../phet-core/js/Orientation.js';
import { Line } from '../../scenery/js/imports.js';
import bamboo from './bamboo.js';
class AxisLine extends Line {
  constructor(chartTransform, axisOrientation, providedOptions) {
    const options = optionize()({
      // SelfOptions
      value: 0,
      // by default the axis is at 0, but you can put it somewhere else
      extension: 0,
      // Line options
      stroke: 'black',
      lineWidth: 2
    }, providedOptions);
    super(0, 0, 0, 0, options);
    this.chartTransform = chartTransform;
    this.axisOrientation = axisOrientation;
    this.value = options.value;
    this.extension = options.extension;

    // Initialize
    this.update();

    // Update when the transform changes.
    const changedListener = () => this.update();
    chartTransform.changedEmitter.addListener(changedListener);
    this.disposeAxisLine = () => chartTransform.changedEmitter.removeListener(changedListener);
  }
  update() {
    const viewValue = this.chartTransform.modelToView(this.axisOrientation.opposite, this.value);

    // Move the axis to viewValue.
    if (this.axisOrientation === Orientation.VERTICAL) {
      this.setLine(viewValue, 0 - this.extension, viewValue, this.chartTransform.viewHeight + this.extension);
      this.setVisible(viewValue >= 0 && viewValue <= this.chartTransform.viewWidth);
    } else {
      this.setLine(0 - this.extension, viewValue, this.chartTransform.viewWidth + this.extension, viewValue);
      this.setVisible(viewValue >= 0 && viewValue <= this.chartTransform.viewHeight);
    }
  }
  dispose() {
    this.disposeAxisLine();
    super.dispose();
  }
}
bamboo.register('AxisLine', AxisLine);
export default AxisLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJPcmllbnRhdGlvbiIsIkxpbmUiLCJiYW1ib28iLCJBeGlzTGluZSIsImNvbnN0cnVjdG9yIiwiY2hhcnRUcmFuc2Zvcm0iLCJheGlzT3JpZW50YXRpb24iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidmFsdWUiLCJleHRlbnNpb24iLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJ1cGRhdGUiLCJjaGFuZ2VkTGlzdGVuZXIiLCJjaGFuZ2VkRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZGlzcG9zZUF4aXNMaW5lIiwicmVtb3ZlTGlzdGVuZXIiLCJ2aWV3VmFsdWUiLCJtb2RlbFRvVmlldyIsIm9wcG9zaXRlIiwiVkVSVElDQUwiLCJzZXRMaW5lIiwidmlld0hlaWdodCIsInNldFZpc2libGUiLCJ2aWV3V2lkdGgiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBeGlzTGluZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBeGlzTGluZSBpcyBhbiBheGlzIHRoYXQgY29uc2lzdHMgb2YgYSBsaW5lLCB3aXRoIG5vIGFycm93IGhlYWRzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBPcmllbnRhdGlvbiBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvT3JpZW50YXRpb24uanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBMaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBiYW1ib28gZnJvbSAnLi9iYW1ib28uanMnO1xyXG5pbXBvcnQgQ2hhcnRUcmFuc2Zvcm0gZnJvbSAnLi9DaGFydFRyYW5zZm9ybS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHZhbHVlPzogbnVtYmVyOyAvLyBWYWx1ZSB3aGVyZSB0aGUgYXhpcyBsaWVzXHJcbiAgZXh0ZW5zaW9uPzogbnVtYmVyOyAvLyBpbiB2aWV3IGNvb3JkaW5hdGVzLCBob3cgZmFyIHRoZSBheGlzIGdvZXMgcGFzdCB0aGUgZWRnZSBvZiB0aGUgQ2hhcnRSZWN0YW5nbGVcclxufTtcclxuZXhwb3J0IHR5cGUgQXhpc0xpbmVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBMaW5lT3B0aW9ucztcclxuXHJcbmNsYXNzIEF4aXNMaW5lIGV4dGVuZHMgTGluZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjaGFydFRyYW5zZm9ybTogQ2hhcnRUcmFuc2Zvcm07XHJcbiAgcHJpdmF0ZSByZWFkb25seSBheGlzT3JpZW50YXRpb246IE9yaWVudGF0aW9uO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsdWU6IG51bWJlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGV4dGVuc2lvbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgZGlzcG9zZUF4aXNMaW5lOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNoYXJ0VHJhbnNmb3JtOiBDaGFydFRyYW5zZm9ybSwgYXhpc09yaWVudGF0aW9uOiBPcmllbnRhdGlvbiwgcHJvdmlkZWRPcHRpb25zPzogQXhpc0xpbmVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QXhpc0xpbmVPcHRpb25zLCBTZWxmT3B0aW9ucywgTGluZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHZhbHVlOiAwLCAvLyBieSBkZWZhdWx0IHRoZSBheGlzIGlzIGF0IDAsIGJ1dCB5b3UgY2FuIHB1dCBpdCBzb21ld2hlcmUgZWxzZVxyXG4gICAgICBleHRlbnNpb246IDAsXHJcblxyXG4gICAgICAvLyBMaW5lIG9wdGlvbnNcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDJcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCAwLCAwLCAwLCAwLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5jaGFydFRyYW5zZm9ybSA9IGNoYXJ0VHJhbnNmb3JtO1xyXG4gICAgdGhpcy5heGlzT3JpZW50YXRpb24gPSBheGlzT3JpZW50YXRpb247XHJcbiAgICB0aGlzLnZhbHVlID0gb3B0aW9ucy52YWx1ZTtcclxuICAgIHRoaXMuZXh0ZW5zaW9uID0gb3B0aW9ucy5leHRlbnNpb247XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgd2hlbiB0aGUgdHJhbnNmb3JtIGNoYW5nZXMuXHJcbiAgICBjb25zdCBjaGFuZ2VkTGlzdGVuZXIgPSAoKSA9PiB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgY2hhcnRUcmFuc2Zvcm0uY2hhbmdlZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIGNoYW5nZWRMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZUF4aXNMaW5lID0gKCkgPT4gY2hhcnRUcmFuc2Zvcm0uY2hhbmdlZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIGNoYW5nZWRMaXN0ZW5lciApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICBjb25zdCB2aWV3VmFsdWUgPSB0aGlzLmNoYXJ0VHJhbnNmb3JtLm1vZGVsVG9WaWV3KCB0aGlzLmF4aXNPcmllbnRhdGlvbi5vcHBvc2l0ZSwgdGhpcy52YWx1ZSApO1xyXG5cclxuICAgIC8vIE1vdmUgdGhlIGF4aXMgdG8gdmlld1ZhbHVlLlxyXG4gICAgaWYgKCB0aGlzLmF4aXNPcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwgKSB7XHJcbiAgICAgIHRoaXMuc2V0TGluZSggdmlld1ZhbHVlLCAwIC0gdGhpcy5leHRlbnNpb24sIHZpZXdWYWx1ZSwgdGhpcy5jaGFydFRyYW5zZm9ybS52aWV3SGVpZ2h0ICsgdGhpcy5leHRlbnNpb24gKTtcclxuICAgICAgdGhpcy5zZXRWaXNpYmxlKCB2aWV3VmFsdWUgPj0gMCAmJiB2aWV3VmFsdWUgPD0gdGhpcy5jaGFydFRyYW5zZm9ybS52aWV3V2lkdGggKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnNldExpbmUoIDAgLSB0aGlzLmV4dGVuc2lvbiwgdmlld1ZhbHVlLCB0aGlzLmNoYXJ0VHJhbnNmb3JtLnZpZXdXaWR0aCArIHRoaXMuZXh0ZW5zaW9uLCB2aWV3VmFsdWUgKTtcclxuICAgICAgdGhpcy5zZXRWaXNpYmxlKCB2aWV3VmFsdWUgPj0gMCAmJiB2aWV3VmFsdWUgPD0gdGhpcy5jaGFydFRyYW5zZm9ybS52aWV3SGVpZ2h0ICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUF4aXNMaW5lKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5iYW1ib28ucmVnaXN0ZXIoICdBeGlzTGluZScsIEF4aXNMaW5lICk7XHJcbmV4cG9ydCBkZWZhdWx0IEF4aXNMaW5lOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELE9BQU9DLFdBQVcsTUFBTSxtQ0FBbUM7QUFDM0QsU0FBU0MsSUFBSSxRQUFxQiw2QkFBNkI7QUFDL0QsT0FBT0MsTUFBTSxNQUFNLGFBQWE7QUFTaEMsTUFBTUMsUUFBUSxTQUFTRixJQUFJLENBQUM7RUFPbkJHLFdBQVdBLENBQUVDLGNBQThCLEVBQUVDLGVBQTRCLEVBQUVDLGVBQWlDLEVBQUc7SUFFcEgsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQTRDLENBQUMsQ0FBRTtNQUV0RTtNQUNBVSxLQUFLLEVBQUUsQ0FBQztNQUFFO01BQ1ZDLFNBQVMsRUFBRSxDQUFDO01BRVo7TUFDQUMsTUFBTSxFQUFFLE9BQU87TUFDZkMsU0FBUyxFQUFFO0lBQ2IsQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVDLE9BQVEsQ0FBQztJQUU1QixJQUFJLENBQUNILGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNDLGVBQWUsR0FBR0EsZUFBZTtJQUN0QyxJQUFJLENBQUNHLEtBQUssR0FBR0QsT0FBTyxDQUFDQyxLQUFLO0lBQzFCLElBQUksQ0FBQ0MsU0FBUyxHQUFHRixPQUFPLENBQUNFLFNBQVM7O0lBRWxDO0lBQ0EsSUFBSSxDQUFDRyxNQUFNLENBQUMsQ0FBQzs7SUFFYjtJQUNBLE1BQU1DLGVBQWUsR0FBR0EsQ0FBQSxLQUFNLElBQUksQ0FBQ0QsTUFBTSxDQUFDLENBQUM7SUFDM0NSLGNBQWMsQ0FBQ1UsY0FBYyxDQUFDQyxXQUFXLENBQUVGLGVBQWdCLENBQUM7SUFFNUQsSUFBSSxDQUFDRyxlQUFlLEdBQUcsTUFBTVosY0FBYyxDQUFDVSxjQUFjLENBQUNHLGNBQWMsQ0FBRUosZUFBZ0IsQ0FBQztFQUM5RjtFQUVRRCxNQUFNQSxDQUFBLEVBQVM7SUFDckIsTUFBTU0sU0FBUyxHQUFHLElBQUksQ0FBQ2QsY0FBYyxDQUFDZSxXQUFXLENBQUUsSUFBSSxDQUFDZCxlQUFlLENBQUNlLFFBQVEsRUFBRSxJQUFJLENBQUNaLEtBQU0sQ0FBQzs7SUFFOUY7SUFDQSxJQUFLLElBQUksQ0FBQ0gsZUFBZSxLQUFLTixXQUFXLENBQUNzQixRQUFRLEVBQUc7TUFDbkQsSUFBSSxDQUFDQyxPQUFPLENBQUVKLFNBQVMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDVCxTQUFTLEVBQUVTLFNBQVMsRUFBRSxJQUFJLENBQUNkLGNBQWMsQ0FBQ21CLFVBQVUsR0FBRyxJQUFJLENBQUNkLFNBQVUsQ0FBQztNQUN6RyxJQUFJLENBQUNlLFVBQVUsQ0FBRU4sU0FBUyxJQUFJLENBQUMsSUFBSUEsU0FBUyxJQUFJLElBQUksQ0FBQ2QsY0FBYyxDQUFDcUIsU0FBVSxDQUFDO0lBQ2pGLENBQUMsTUFDSTtNQUNILElBQUksQ0FBQ0gsT0FBTyxDQUFFLENBQUMsR0FBRyxJQUFJLENBQUNiLFNBQVMsRUFBRVMsU0FBUyxFQUFFLElBQUksQ0FBQ2QsY0FBYyxDQUFDcUIsU0FBUyxHQUFHLElBQUksQ0FBQ2hCLFNBQVMsRUFBRVMsU0FBVSxDQUFDO01BQ3hHLElBQUksQ0FBQ00sVUFBVSxDQUFFTixTQUFTLElBQUksQ0FBQyxJQUFJQSxTQUFTLElBQUksSUFBSSxDQUFDZCxjQUFjLENBQUNtQixVQUFXLENBQUM7SUFDbEY7RUFDRjtFQUVnQkcsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ1YsZUFBZSxDQUFDLENBQUM7SUFDdEIsS0FBSyxDQUFDVSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUF6QixNQUFNLENBQUMwQixRQUFRLENBQUUsVUFBVSxFQUFFekIsUUFBUyxDQUFDO0FBQ3ZDLGVBQWVBLFFBQVEifQ==