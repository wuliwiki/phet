// Copyright 2020-2023, University of Colorado Boulder

/**
 * AxisArrowNode shows an axis with arrows at one or both ends. An axis is typically bolder than any grid line (if any),
 * and typically at x=0 or y=0, but those defaults can be overridden with options.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import Orientation from '../../phet-core/js/Orientation.js';
import ArrowNode from '../../scenery-phet/js/ArrowNode.js';
import bamboo from './bamboo.js';
class AxisArrowNode extends ArrowNode {
  constructor(chartTransform, axisOrientation, providedOptions) {
    const options = optionize()({
      // SelfOptions
      value: 0,
      // by default the axis is at 0, but you can put it somewhere else
      extension: 20,
      // ArrowNode options
      doubleHead: true,
      headHeight: 10,
      headWidth: 10,
      tailWidth: 2
    }, providedOptions);
    super(0, 0, 0, 0, options);
    this.chartTransform = chartTransform;
    this.axisOrientation = axisOrientation;
    this.value = options.value;
    this.extension = options.extension;

    // Initialize
    this.update();

    // Update when the transform changes.
    const changedListener = () => this.update();
    chartTransform.changedEmitter.addListener(changedListener);
    this.disposeAxisNode = () => chartTransform.changedEmitter.removeListener(changedListener);
  }
  update() {
    const viewValue = this.chartTransform.modelToView(this.axisOrientation.opposite, this.value);

    // Move the axis to viewValue.
    if (this.axisOrientation === Orientation.VERTICAL) {
      this.setTailAndTip(viewValue, this.chartTransform.viewHeight + this.extension, viewValue, 0 - this.extension);
      this.setVisible(viewValue >= 0 && viewValue <= this.chartTransform.viewWidth);
    } else {
      this.setTailAndTip(0 - this.extension, viewValue, this.chartTransform.viewWidth + this.extension, viewValue);
      this.setVisible(viewValue >= 0 && viewValue <= this.chartTransform.viewHeight);
    }
  }
  dispose() {
    this.disposeAxisNode();
    super.dispose();
  }
}
bamboo.register('AxisArrowNode', AxisArrowNode);
export default AxisArrowNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJPcmllbnRhdGlvbiIsIkFycm93Tm9kZSIsImJhbWJvbyIsIkF4aXNBcnJvd05vZGUiLCJjb25zdHJ1Y3RvciIsImNoYXJ0VHJhbnNmb3JtIiwiYXhpc09yaWVudGF0aW9uIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInZhbHVlIiwiZXh0ZW5zaW9uIiwiZG91YmxlSGVhZCIsImhlYWRIZWlnaHQiLCJoZWFkV2lkdGgiLCJ0YWlsV2lkdGgiLCJ1cGRhdGUiLCJjaGFuZ2VkTGlzdGVuZXIiLCJjaGFuZ2VkRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZGlzcG9zZUF4aXNOb2RlIiwicmVtb3ZlTGlzdGVuZXIiLCJ2aWV3VmFsdWUiLCJtb2RlbFRvVmlldyIsIm9wcG9zaXRlIiwiVkVSVElDQUwiLCJzZXRUYWlsQW5kVGlwIiwidmlld0hlaWdodCIsInNldFZpc2libGUiLCJ2aWV3V2lkdGgiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBeGlzQXJyb3dOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEF4aXNBcnJvd05vZGUgc2hvd3MgYW4gYXhpcyB3aXRoIGFycm93cyBhdCBvbmUgb3IgYm90aCBlbmRzLiBBbiBheGlzIGlzIHR5cGljYWxseSBib2xkZXIgdGhhbiBhbnkgZ3JpZCBsaW5lIChpZiBhbnkpLFxyXG4gKiBhbmQgdHlwaWNhbGx5IGF0IHg9MCBvciB5PTAsIGJ1dCB0aG9zZSBkZWZhdWx0cyBjYW4gYmUgb3ZlcnJpZGRlbiB3aXRoIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IE9yaWVudGF0aW9uIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9PcmllbnRhdGlvbi5qcyc7XHJcbmltcG9ydCBBcnJvd05vZGUsIHsgQXJyb3dOb2RlT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgYmFtYm9vIGZyb20gJy4vYmFtYm9vLmpzJztcclxuaW1wb3J0IENoYXJ0VHJhbnNmb3JtIGZyb20gJy4vQ2hhcnRUcmFuc2Zvcm0uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB2YWx1ZT86IG51bWJlcjsgLy8gTG9jYXRpb24gb2YgdGhlIGF4aXNcclxuICBleHRlbnNpb24/OiBudW1iZXI7IC8vIGluIHZpZXcgY29vcmRpbmF0ZXMsIGhvdyBmYXIgdGhlIGF4aXMgZ29lcyBwYXN0IHRoZSBlZGdlIG9mIHRoZSBDaGFydFJlY3RhbmdsZVxyXG59O1xyXG5leHBvcnQgdHlwZSBBeGlzQXJyb3dOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgQXJyb3dOb2RlT3B0aW9ucztcclxuXHJcbmNsYXNzIEF4aXNBcnJvd05vZGUgZXh0ZW5kcyBBcnJvd05vZGUge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgY2hhcnRUcmFuc2Zvcm06IENoYXJ0VHJhbnNmb3JtO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsdWU6IG51bWJlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGV4dGVuc2lvbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYXhpc09yaWVudGF0aW9uOiBPcmllbnRhdGlvbjtcclxuICBwcml2YXRlIGRpc3Bvc2VBeGlzTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjaGFydFRyYW5zZm9ybTogQ2hhcnRUcmFuc2Zvcm0sIGF4aXNPcmllbnRhdGlvbjogT3JpZW50YXRpb24sIHByb3ZpZGVkT3B0aW9ucz86IEF4aXNBcnJvd05vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QXhpc0Fycm93Tm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBBcnJvd05vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICB2YWx1ZTogMCwgLy8gYnkgZGVmYXVsdCB0aGUgYXhpcyBpcyBhdCAwLCBidXQgeW91IGNhbiBwdXQgaXQgc29tZXdoZXJlIGVsc2VcclxuICAgICAgZXh0ZW5zaW9uOiAyMCxcclxuXHJcbiAgICAgIC8vIEFycm93Tm9kZSBvcHRpb25zXHJcbiAgICAgIGRvdWJsZUhlYWQ6IHRydWUsXHJcbiAgICAgIGhlYWRIZWlnaHQ6IDEwLFxyXG4gICAgICBoZWFkV2lkdGg6IDEwLFxyXG4gICAgICB0YWlsV2lkdGg6IDJcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCAwLCAwLCAwLCAwLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5jaGFydFRyYW5zZm9ybSA9IGNoYXJ0VHJhbnNmb3JtO1xyXG4gICAgdGhpcy5heGlzT3JpZW50YXRpb24gPSBheGlzT3JpZW50YXRpb247XHJcbiAgICB0aGlzLnZhbHVlID0gb3B0aW9ucy52YWx1ZTtcclxuICAgIHRoaXMuZXh0ZW5zaW9uID0gb3B0aW9ucy5leHRlbnNpb247XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgd2hlbiB0aGUgdHJhbnNmb3JtIGNoYW5nZXMuXHJcbiAgICBjb25zdCBjaGFuZ2VkTGlzdGVuZXIgPSAoKSA9PiB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgY2hhcnRUcmFuc2Zvcm0uY2hhbmdlZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIGNoYW5nZWRMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZUF4aXNOb2RlID0gKCkgPT4gY2hhcnRUcmFuc2Zvcm0uY2hhbmdlZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIGNoYW5nZWRMaXN0ZW5lciApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICBjb25zdCB2aWV3VmFsdWUgPSB0aGlzLmNoYXJ0VHJhbnNmb3JtLm1vZGVsVG9WaWV3KCB0aGlzLmF4aXNPcmllbnRhdGlvbi5vcHBvc2l0ZSwgdGhpcy52YWx1ZSApO1xyXG5cclxuICAgIC8vIE1vdmUgdGhlIGF4aXMgdG8gdmlld1ZhbHVlLlxyXG4gICAgaWYgKCB0aGlzLmF4aXNPcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwgKSB7XHJcbiAgICAgIHRoaXMuc2V0VGFpbEFuZFRpcCggdmlld1ZhbHVlLCB0aGlzLmNoYXJ0VHJhbnNmb3JtLnZpZXdIZWlnaHQgKyB0aGlzLmV4dGVuc2lvbiwgdmlld1ZhbHVlLCAwIC0gdGhpcy5leHRlbnNpb24gKTtcclxuICAgICAgdGhpcy5zZXRWaXNpYmxlKCB2aWV3VmFsdWUgPj0gMCAmJiB2aWV3VmFsdWUgPD0gdGhpcy5jaGFydFRyYW5zZm9ybS52aWV3V2lkdGggKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnNldFRhaWxBbmRUaXAoIDAgLSB0aGlzLmV4dGVuc2lvbiwgdmlld1ZhbHVlLCB0aGlzLmNoYXJ0VHJhbnNmb3JtLnZpZXdXaWR0aCArIHRoaXMuZXh0ZW5zaW9uLCB2aWV3VmFsdWUgKTtcclxuICAgICAgdGhpcy5zZXRWaXNpYmxlKCB2aWV3VmFsdWUgPj0gMCAmJiB2aWV3VmFsdWUgPD0gdGhpcy5jaGFydFRyYW5zZm9ybS52aWV3SGVpZ2h0ICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUF4aXNOb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5iYW1ib28ucmVnaXN0ZXIoICdBeGlzQXJyb3dOb2RlJywg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