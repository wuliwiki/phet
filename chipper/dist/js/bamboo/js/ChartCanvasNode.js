// Copyright 2020-2023, University of Colorado Boulder

/**
 * ChartCanvasNode renders to a canvas. It is usually preferable to use the other scenery Node-based
 * renderers, but this one can be necessary for performance-critical charts.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Bounds2 from '../../dot/js/Bounds2.js';
import { CanvasNode } from '../../scenery/js/imports.js';
import bamboo from './bamboo.js';
import optionize from '../../phet-core/js/optionize.js';
class ChartCanvasNode extends CanvasNode {
  // if you change this directly, you are responsible for calling update

  constructor(chartTransform, painters, providedOptions) {
    const options = optionize()({
      // CanvasNodeOptions
      canvasBounds: new Bounds2(0, 0, chartTransform.viewWidth, chartTransform.viewHeight)
    }, providedOptions);
    super(options);
    this.chartTransform = chartTransform;
    this.painters = painters;

    // Initialize
    this.update();

    // Update when the transform changes.
    const changedListener = () => this.update();
    chartTransform.changedEmitter.addListener(changedListener);
    this.disposeChartCanvasLinePlot = () => chartTransform.changedEmitter.removeListener(changedListener);
  }

  // Sets the painters and redraws the chart.
  setPainters(painters) {
    this.painters = painters;
    this.update();
  }
  update() {
    this.invalidatePaint();
  }

  // Used to redraw the CanvasNode. Use CanvasNode.invalidatePaint to signify that it is time to redraw the canvas.
  paintCanvas(context) {
    this.painters.forEach(painter => {
      if (painter.visible) {
        // The context save and restore for each painter is intentional, so that we are guaranteed that a fill,
        // transform, etc, from one painter won't leak into another painter.
        context.save();
        painter.paintCanvas(context);
        context.restore();
      }
    });
  }
  dispose() {
    this.disposeChartCanvasLinePlot();
    super.dispose();
  }
}
bamboo.register('ChartCanvasNode', ChartCanvasNode);
export default ChartCanvasNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiQ2FudmFzTm9kZSIsImJhbWJvbyIsIm9wdGlvbml6ZSIsIkNoYXJ0Q2FudmFzTm9kZSIsImNvbnN0cnVjdG9yIiwiY2hhcnRUcmFuc2Zvcm0iLCJwYWludGVycyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjYW52YXNCb3VuZHMiLCJ2aWV3V2lkdGgiLCJ2aWV3SGVpZ2h0IiwidXBkYXRlIiwiY2hhbmdlZExpc3RlbmVyIiwiY2hhbmdlZEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImRpc3Bvc2VDaGFydENhbnZhc0xpbmVQbG90IiwicmVtb3ZlTGlzdGVuZXIiLCJzZXRQYWludGVycyIsImludmFsaWRhdGVQYWludCIsInBhaW50Q2FudmFzIiwiY29udGV4dCIsImZvckVhY2giLCJwYWludGVyIiwidmlzaWJsZSIsInNhdmUiLCJyZXN0b3JlIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2hhcnRDYW52YXNOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENoYXJ0Q2FudmFzTm9kZSByZW5kZXJzIHRvIGEgY2FudmFzLiBJdCBpcyB1c3VhbGx5IHByZWZlcmFibGUgdG8gdXNlIHRoZSBvdGhlciBzY2VuZXJ5IE5vZGUtYmFzZWRcclxuICogcmVuZGVyZXJzLCBidXQgdGhpcyBvbmUgY2FuIGJlIG5lY2Vzc2FyeSBmb3IgcGVyZm9ybWFuY2UtY3JpdGljYWwgY2hhcnRzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IHsgQ2FudmFzTm9kZSwgQ2FudmFzTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmFtYm9vIGZyb20gJy4vYmFtYm9vLmpzJztcclxuaW1wb3J0IENoYXJ0VHJhbnNmb3JtIGZyb20gJy4vQ2hhcnRUcmFuc2Zvcm0uanMnO1xyXG5pbXBvcnQgQ2FudmFzUGFpbnRlciBmcm9tICcuL0NhbnZhc1BhaW50ZXIuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBDaGFydENhbnZhc05vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBDYW52YXNOb2RlT3B0aW9ucztcclxuXHJcbmNsYXNzIENoYXJ0Q2FudmFzTm9kZSBleHRlbmRzIENhbnZhc05vZGUge1xyXG4gIHByaXZhdGUgY2hhcnRUcmFuc2Zvcm06IENoYXJ0VHJhbnNmb3JtO1xyXG5cclxuICAvLyBpZiB5b3UgY2hhbmdlIHRoaXMgZGlyZWN0bHksIHlvdSBhcmUgcmVzcG9uc2libGUgZm9yIGNhbGxpbmcgdXBkYXRlXHJcbiAgcHVibGljIHBhaW50ZXJzOiBDYW52YXNQYWludGVyW107XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlQ2hhcnRDYW52YXNMaW5lUGxvdDogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjaGFydFRyYW5zZm9ybTogQ2hhcnRUcmFuc2Zvcm0sIHBhaW50ZXJzOiBDYW52YXNQYWludGVyW10sIHByb3ZpZGVkT3B0aW9ucz86IFN0cmljdE9taXQ8Q2FudmFzTm9kZU9wdGlvbnMsICdjYW52YXNCb3VuZHMnPiApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPENoYXJ0Q2FudmFzTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBDYW52YXNOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gQ2FudmFzTm9kZU9wdGlvbnNcclxuICAgICAgY2FudmFzQm91bmRzOiBuZXcgQm91bmRzMiggMCwgMCwgY2hhcnRUcmFuc2Zvcm0udmlld1dpZHRoLCBjaGFydFRyYW5zZm9ybS52aWV3SGVpZ2h0IClcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5jaGFydFRyYW5zZm9ybSA9IGNoYXJ0VHJhbnNmb3JtO1xyXG4gICAgdGhpcy5wYWludGVycyA9IHBhaW50ZXJzO1xyXG5cclxuICAgIC8vIEluaXRpYWxpemVcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHdoZW4gdGhlIHRyYW5zZm9ybSBjaGFuZ2VzLlxyXG4gICAgY29uc3QgY2hhbmdlZExpc3RlbmVyID0gKCkgPT4gdGhpcy51cGRhdGUoKTtcclxuICAgIGNoYXJ0VHJhbnNmb3JtLmNoYW5nZWRFbWl0dGVyLmFkZExpc3RlbmVyKCBjaGFuZ2VkTGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VDaGFydENhbnZhc0xpbmVQbG90ID0gKCkgPT4gY2hhcnRUcmFuc2Zvcm0uY2hhbmdlZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIGNoYW5nZWRMaXN0ZW5lciApO1xyXG4gIH1cclxuXHJcbiAgLy8gU2V0cyB0aGUgcGFpbnRlcnMgYW5kIHJlZHJhd3MgdGhlIGNoYXJ0LlxyXG4gIHB1YmxpYyBzZXRQYWludGVycyggcGFpbnRlcnM6IENhbnZhc1BhaW50ZXJbXSApOiB2b2lkIHtcclxuICAgIHRoaXMucGFpbnRlcnMgPSBwYWludGVycztcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5pbnZhbGlkYXRlUGFpbnQoKTtcclxuICB9XHJcblxyXG4gIC8vIFVzZWQgdG8gcmVkcmF3IHRoZSBDYW52YXNOb2RlLiBVc2UgQ2FudmFzTm9kZS5pbnZhbGlkYXRlUGFpbnQgdG8gc2lnbmlmeSB0aGF0IGl0IGlzIHRpbWUgdG8gcmVkcmF3IHRoZSBjYW52YXMuXHJcbiAgcHVibGljIHBhaW50Q2FudmFzKCBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZCB7XHJcbiAgICB0aGlzLnBhaW50ZXJzLmZvckVhY2goIHBhaW50ZXIgPT4ge1xyXG4gICAgICBpZiAoIHBhaW50ZXIudmlzaWJsZSApIHtcclxuXHJcbiAgICAgICAgLy8gVGhlIGNvbnRleHQgc2F2ZSBhbmQgcmVzdG9yZSBmb3IgZWFjaCBwYWludGVyIGlzIGludGVudGlvbmFsLCBzbyB0aGF0IHdlIGFyZSBndWFyYW50ZWVkIHRoYXQgYSBmaWxsLFxyXG4gICAgICAgIC8vIHRyYW5zZm9ybSwgZXRjLCBmcm9tIG9uZSBwYWludGVyIHdvbid0IGxlYWsgaW50byBhbm90aGVyIHBhaW50ZXIuXHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgcGFpbnRlci5wYWludENhbnZhcyggY29udGV4dCApO1xyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUNoYXJ0Q2FudmFzTGluZVBsb3QoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbWJvby5yZWdpc3RlciggJ0NoYXJ0Q2FudmFzTm9kZScsIENoYXJ0Q2FudmFzTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBDaGFydENhbnZhc05vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLHlCQUF5QjtBQUM3QyxTQUFTQyxVQUFVLFFBQTJCLDZCQUE2QjtBQUMzRSxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUloQyxPQUFPQyxTQUFTLE1BQTRCLGlDQUFpQztBQU03RSxNQUFNQyxlQUFlLFNBQVNILFVBQVUsQ0FBQztFQUd2Qzs7RUFJT0ksV0FBV0EsQ0FBRUMsY0FBOEIsRUFBRUMsUUFBeUIsRUFBRUMsZUFBK0QsRUFBRztJQUUvSSxNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBeUQsQ0FBQyxDQUFFO01BRW5GO01BQ0FPLFlBQVksRUFBRSxJQUFJVixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRU0sY0FBYyxDQUFDSyxTQUFTLEVBQUVMLGNBQWMsQ0FBQ00sVUFBVztJQUN2RixDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFQyxPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDSCxjQUFjLEdBQUdBLGNBQWM7SUFDcEMsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7O0lBRXhCO0lBQ0EsSUFBSSxDQUFDTSxNQUFNLENBQUMsQ0FBQzs7SUFFYjtJQUNBLE1BQU1DLGVBQWUsR0FBR0EsQ0FBQSxLQUFNLElBQUksQ0FBQ0QsTUFBTSxDQUFDLENBQUM7SUFDM0NQLGNBQWMsQ0FBQ1MsY0FBYyxDQUFDQyxXQUFXLENBQUVGLGVBQWdCLENBQUM7SUFFNUQsSUFBSSxDQUFDRywwQkFBMEIsR0FBRyxNQUFNWCxjQUFjLENBQUNTLGNBQWMsQ0FBQ0csY0FBYyxDQUFFSixlQUFnQixDQUFDO0VBQ3pHOztFQUVBO0VBQ09LLFdBQVdBLENBQUVaLFFBQXlCLEVBQVM7SUFDcEQsSUFBSSxDQUFDQSxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDTSxNQUFNLENBQUMsQ0FBQztFQUNmO0VBRU9BLE1BQU1BLENBQUEsRUFBUztJQUNwQixJQUFJLENBQUNPLGVBQWUsQ0FBQyxDQUFDO0VBQ3hCOztFQUVBO0VBQ09DLFdBQVdBLENBQUVDLE9BQWlDLEVBQVM7SUFDNUQsSUFBSSxDQUFDZixRQUFRLENBQUNnQixPQUFPLENBQUVDLE9BQU8sSUFBSTtNQUNoQyxJQUFLQSxPQUFPLENBQUNDLE9BQU8sRUFBRztRQUVyQjtRQUNBO1FBQ0FILE9BQU8sQ0FBQ0ksSUFBSSxDQUFDLENBQUM7UUFDZEYsT0FBTyxDQUFDSCxXQUFXLENBQUVDLE9BQVEsQ0FBQztRQUM5QkEsT0FBTyxDQUFDSyxPQUFPLENBQUMsQ0FBQztNQUNuQjtJQUNGLENBQUUsQ0FBQztFQUNMO0VBRWdCQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDWCwwQkFBMEIsQ0FBQyxDQUFDO0lBQ2pDLEtBQUssQ0FBQ1csT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBMUIsTUFBTSxDQUFDMkIsUUFBUSxDQUFFLGlCQUFpQixFQUFFekIsZUFBZ0IsQ0FBQztBQUNyRCxlQUFlQSxlQUFlIn0=