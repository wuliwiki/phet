// Copyright 2020-2022, University of Colorado Boulder

/**
 * Demonstrates LinePlot.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import SpanNode from '../../../bamboo/js/SpanNode.js';
import Range from '../../../dot/js/Range.js';
import Utils from '../../../dot/js/Utils.js';
import Vector2 from '../../../dot/js/Vector2.js';
import Orientation from '../../../phet-core/js/Orientation.js';
import MathSymbols from '../../../scenery-phet/js/MathSymbols.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import PlusMinusZoomButtonGroup from '../../../scenery-phet/js/PlusMinusZoomButtonGroup.js';
import { Node, Text } from '../../../scenery/js/imports.js';
import AxisArrowNode from '../AxisArrowNode.js';
import bamboo from '../bamboo.js';
import ChartRectangle from '../ChartRectangle.js';
import ChartTransform from '../ChartTransform.js';
import GridLineSet from '../GridLineSet.js';
import TickLabelSet from '../TickLabelSet.js';
import LinePlot from '../LinePlot.js';
import TickMarkSet from '../TickMarkSet.js';
class DemoLinePlot extends Node {
  constructor(options) {
    super();
    const createDataSet = (min, max, frequency, delta = 0.005) => {
      const dataSet = [];
      for (let x = min; x <= max; x += delta) {
        dataSet.push(new Vector2(x, Math.sin(x * frequency)));
      }
      return dataSet;
    };
    const chartTransform = new ChartTransform({
      viewWidth: 700,
      viewHeight: 300,
      modelXRange: new Range(-Math.PI / 8, Math.PI / 8),
      modelYRange: new Range(-4 / Math.PI, 4 / Math.PI)
    });
    const chartRectangle = new ChartRectangle(chartTransform, {
      fill: 'white',
      stroke: 'black',
      cornerXRadius: 6,
      cornerYRadius: 6
    });
    const zoomLevelProperty = new NumberProperty(1, {
      range: new Range(1, 4)
    });
    const zoomButtonGroup = new PlusMinusZoomButtonGroup(zoomLevelProperty, {
      orientation: 'horizontal',
      left: chartRectangle.right + 10,
      bottom: chartRectangle.bottom
    });
    zoomLevelProperty.link(zoomLevel => {
      chartTransform.setModelXRange(zoomLevel === 1 ? new Range(-Math.PI / 8, Math.PI / 8) : zoomLevel === 2 ? new Range(-Math.PI / 4, Math.PI / 4) : zoomLevel === 3 ? new Range(-Math.PI / 3, Math.PI / 3) : new Range(-Math.PI / 2, Math.PI / 2));
    });

    // Anything you want clipped goes in here
    this.children = [
    // Background
    chartRectangle,
    // span that shows PI/8, at bottom-left of chart
    new SpanNode(chartTransform, Orientation.HORIZONTAL, Math.PI / 8, new Text(`${MathSymbols.PI}/8`, {
      font: new PhetFont(14)
    }), {
      left: chartRectangle.left,
      top: chartRectangle.bottom + 25
    }),
    // Clipped contents
    new Node({
      // TODO https://github.com/phetsims/bamboo/issues/15 what if the chart area changes, then clip needs to change
      clipArea: chartRectangle.getShape(),
      children: [
      // Minor grid lines
      new GridLineSet(chartTransform, Orientation.HORIZONTAL, Math.PI / 32, {
        stroke: 'lightGray'
      }), new GridLineSet(chartTransform, Orientation.VERTICAL, 0.5, {
        stroke: 'lightGray'
      }),
      // Axes nodes are clipped in the chart
      new AxisArrowNode(chartTransform, Orientation.HORIZONTAL), new AxisArrowNode(chartTransform, Orientation.VERTICAL),
      // Some data
      new LinePlot(chartTransform, createDataSet(-2, 2, 5), {
        stroke: 'red',
        lineWidth: 2
      }), new LinePlot(chartTransform, createDataSet(-2, 2, 10), {
        stroke: 'green',
        lineWidth: 2
      }), new LinePlot(chartTransform, createDataSet(-2, 2, 20), {
        stroke: 'blue',
        lineWidth: 2
      }), new LinePlot(chartTransform, createDataSet(-2, 2, 30), {
        stroke: 'orange',
        lineWidth: 2
      })]
    }),
    // Tick marks outside the chart
    new TickMarkSet(chartTransform, Orientation.VERTICAL, 0.5, {
      edge: 'min'
    }), new TickLabelSet(chartTransform, Orientation.VERTICAL, 0.5, {
      edge: 'min'
    }), new TickMarkSet(chartTransform, Orientation.HORIZONTAL, Math.PI / 8, {
      edge: 'min'
    }), new TickLabelSet(chartTransform, Orientation.HORIZONTAL, Math.PI / 8, {
      edge: 'min',
      createLabel: value => new Text(Math.abs(value) < 1E-6 ? Utils.toFixed(value, 0) : Utils.toFixed(value, 2), {
        fontSize: 12
      })
    }), new Text('x', {
      leftCenter: chartRectangle.rightCenter.plusXY(4, 0),
      fontSize: 18
    }), zoomButtonGroup];
    this.mutate(options);
  }
}
bamboo.register('DemoLinePlot', DemoLinePlot);
export default DemoLinePlot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlNwYW5Ob2RlIiwiUmFuZ2UiLCJVdGlscyIsIlZlY3RvcjIiLCJPcmllbnRhdGlvbiIsIk1hdGhTeW1ib2xzIiwiUGhldEZvbnQiLCJQbHVzTWludXNab29tQnV0dG9uR3JvdXAiLCJOb2RlIiwiVGV4dCIsIkF4aXNBcnJvd05vZGUiLCJiYW1ib28iLCJDaGFydFJlY3RhbmdsZSIsIkNoYXJ0VHJhbnNmb3JtIiwiR3JpZExpbmVTZXQiLCJUaWNrTGFiZWxTZXQiLCJMaW5lUGxvdCIsIlRpY2tNYXJrU2V0IiwiRGVtb0xpbmVQbG90IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiY3JlYXRlRGF0YVNldCIsIm1pbiIsIm1heCIsImZyZXF1ZW5jeSIsImRlbHRhIiwiZGF0YVNldCIsIngiLCJwdXNoIiwiTWF0aCIsInNpbiIsImNoYXJ0VHJhbnNmb3JtIiwidmlld1dpZHRoIiwidmlld0hlaWdodCIsIm1vZGVsWFJhbmdlIiwiUEkiLCJtb2RlbFlSYW5nZSIsImNoYXJ0UmVjdGFuZ2xlIiwiZmlsbCIsInN0cm9rZSIsImNvcm5lclhSYWRpdXMiLCJjb3JuZXJZUmFkaXVzIiwiem9vbUxldmVsUHJvcGVydHkiLCJyYW5nZSIsInpvb21CdXR0b25Hcm91cCIsIm9yaWVudGF0aW9uIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwibGluayIsInpvb21MZXZlbCIsInNldE1vZGVsWFJhbmdlIiwiY2hpbGRyZW4iLCJIT1JJWk9OVEFMIiwiZm9udCIsInRvcCIsImNsaXBBcmVhIiwiZ2V0U2hhcGUiLCJWRVJUSUNBTCIsImxpbmVXaWR0aCIsImVkZ2UiLCJjcmVhdGVMYWJlbCIsInZhbHVlIiwiYWJzIiwidG9GaXhlZCIsImZvbnRTaXplIiwibGVmdENlbnRlciIsInJpZ2h0Q2VudGVyIiwicGx1c1hZIiwibXV0YXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEZW1vTGluZVBsb3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVtb25zdHJhdGVzIExpbmVQbG90LlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFNwYW5Ob2RlIGZyb20gJy4uLy4uLy4uL2JhbWJvby9qcy9TcGFuTm9kZS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgT3JpZW50YXRpb24gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL09yaWVudGF0aW9uLmpzJztcclxuaW1wb3J0IE1hdGhTeW1ib2xzIGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9NYXRoU3ltYm9scy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgUGx1c01pbnVzWm9vbUJ1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QbHVzTWludXNab29tQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBOb2RlT3B0aW9ucywgVGV4dCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBBeGlzQXJyb3dOb2RlIGZyb20gJy4uL0F4aXNBcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgYmFtYm9vIGZyb20gJy4uL2JhbWJvby5qcyc7XHJcbmltcG9ydCBDaGFydFJlY3RhbmdsZSBmcm9tICcuLi9DaGFydFJlY3RhbmdsZS5qcyc7XHJcbmltcG9ydCBDaGFydFRyYW5zZm9ybSBmcm9tICcuLi9DaGFydFRyYW5zZm9ybS5qcyc7XHJcbmltcG9ydCBHcmlkTGluZVNldCBmcm9tICcuLi9HcmlkTGluZVNldC5qcyc7XHJcbmltcG9ydCBUaWNrTGFiZWxTZXQgZnJvbSAnLi4vVGlja0xhYmVsU2V0LmpzJztcclxuaW1wb3J0IExpbmVQbG90IGZyb20gJy4uL0xpbmVQbG90LmpzJztcclxuaW1wb3J0IFRpY2tNYXJrU2V0IGZyb20gJy4uL1RpY2tNYXJrU2V0LmpzJztcclxuXHJcbmNsYXNzIERlbW9MaW5lUGxvdCBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG9wdGlvbnM/OiBOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZURhdGFTZXQgPSAoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgZnJlcXVlbmN5OiBudW1iZXIsIGRlbHRhID0gMC4wMDUgKSA9PiB7XHJcbiAgICAgIGNvbnN0IGRhdGFTZXQgPSBbXTtcclxuICAgICAgZm9yICggbGV0IHggPSBtaW47IHggPD0gbWF4OyB4ICs9IGRlbHRhICkge1xyXG4gICAgICAgIGRhdGFTZXQucHVzaCggbmV3IFZlY3RvcjIoIHgsIE1hdGguc2luKCB4ICogZnJlcXVlbmN5ICkgKSApO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBkYXRhU2V0O1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjaGFydFRyYW5zZm9ybSA9IG5ldyBDaGFydFRyYW5zZm9ybSgge1xyXG4gICAgICB2aWV3V2lkdGg6IDcwMCxcclxuICAgICAgdmlld0hlaWdodDogMzAwLFxyXG4gICAgICBtb2RlbFhSYW5nZTogbmV3IFJhbmdlKCAtTWF0aC5QSSAvIDgsIE1hdGguUEkgLyA4ICksXHJcbiAgICAgIG1vZGVsWVJhbmdlOiBuZXcgUmFuZ2UoIC00IC8gTWF0aC5QSSwgNCAvIE1hdGguUEkgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNoYXJ0UmVjdGFuZ2xlID0gbmV3IENoYXJ0UmVjdGFuZ2xlKCBjaGFydFRyYW5zZm9ybSwge1xyXG4gICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGNvcm5lclhSYWRpdXM6IDYsXHJcbiAgICAgIGNvcm5lcllSYWRpdXM6IDZcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB6b29tTGV2ZWxQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMSwgeyByYW5nZTogbmV3IFJhbmdlKCAxLCA0ICkgfSApO1xyXG5cclxuICAgIGNvbnN0IHpvb21CdXR0b25Hcm91cCA9IG5ldyBQbHVzTWludXNab29tQnV0dG9uR3JvdXAoIHpvb21MZXZlbFByb3BlcnR5LCB7XHJcbiAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgIGxlZnQ6IGNoYXJ0UmVjdGFuZ2xlLnJpZ2h0ICsgMTAsXHJcbiAgICAgIGJvdHRvbTogY2hhcnRSZWN0YW5nbGUuYm90dG9tXHJcbiAgICB9ICk7XHJcbiAgICB6b29tTGV2ZWxQcm9wZXJ0eS5saW5rKCB6b29tTGV2ZWwgPT4ge1xyXG4gICAgICBjaGFydFRyYW5zZm9ybS5zZXRNb2RlbFhSYW5nZShcclxuICAgICAgICB6b29tTGV2ZWwgPT09IDEgPyBuZXcgUmFuZ2UoIC1NYXRoLlBJIC8gOCwgTWF0aC5QSSAvIDggKSA6XHJcbiAgICAgICAgem9vbUxldmVsID09PSAyID8gbmV3IFJhbmdlKCAtTWF0aC5QSSAvIDQsIE1hdGguUEkgLyA0ICkgOlxyXG4gICAgICAgIHpvb21MZXZlbCA9PT0gMyA/IG5ldyBSYW5nZSggLU1hdGguUEkgLyAzLCBNYXRoLlBJIC8gMyApIDpcclxuICAgICAgICBuZXcgUmFuZ2UoIC1NYXRoLlBJIC8gMiwgTWF0aC5QSSAvIDIgKVxyXG4gICAgICApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEFueXRoaW5nIHlvdSB3YW50IGNsaXBwZWQgZ29lcyBpbiBoZXJlXHJcbiAgICB0aGlzLmNoaWxkcmVuID0gW1xyXG5cclxuICAgICAgLy8gQmFja2dyb3VuZFxyXG4gICAgICBjaGFydFJlY3RhbmdsZSxcclxuXHJcbiAgICAgIC8vIHNwYW4gdGhhdCBzaG93cyBQSS84LCBhdCBib3R0b20tbGVmdCBvZiBjaGFydFxyXG4gICAgICBuZXcgU3Bhbk5vZGUoIGNoYXJ0VHJhbnNmb3JtLCBPcmllbnRhdGlvbi5IT1JJWk9OVEFMLCBNYXRoLlBJIC8gOCwgbmV3IFRleHQoIGAke01hdGhTeW1ib2xzLlBJfS84YCwge1xyXG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTQgKVxyXG4gICAgICB9ICksIHtcclxuICAgICAgICBsZWZ0OiBjaGFydFJlY3RhbmdsZS5sZWZ0LFxyXG4gICAgICAgIHRvcDogY2hhcnRSZWN0YW5nbGUuYm90dG9tICsgMjVcclxuICAgICAgfSApLFxyXG5cclxuICAgICAgLy8gQ2xpcHBlZCBjb250ZW50c1xyXG4gICAgICBuZXcgTm9kZSgge1xyXG4gICAgICAgIC8vIFRPRE8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2JhbWJvby9pc3N1ZXMvMTUgd2hhdCBpZiB0aGUgY2hhcnQgYXJlYSBjaGFuZ2VzLCB0aGVuIGNsaXAgbmVlZHMgdG8gY2hhbmdlXHJcbiAgICAgICAgY2xpcEFyZWE6IGNoYXJ0UmVjdGFuZ2xlLmdldFNoYXBlKCksXHJcbiAgICAgICAgY2hpbGRyZW46IFtcclxuXHJcbiAgICAgICAgICAvLyBNaW5vciBncmlkIGxpbmVzXHJcbiAgICAgICAgICBuZXcgR3JpZExpbmVTZXQoIGNoYXJ0VHJhbnNmb3JtLCBPcmllbnRhdGlvbi5IT1JJWk9OVEFMLCBNYXRoLlBJIC8gMzIsIHsgc3Ryb2tlOiAnbGlnaHRHcmF5JyB9ICksXHJcbiAgICAgICAgICBuZXcgR3JpZExpbmVTZXQoIGNoYXJ0VHJhbnNmb3JtLCBPcmllbnRhdGlvbi5WRVJUSUNBTCwgMC41LCB7IHN0cm9rZTogJ2xpZ2h0R3JheScgfSApLFxyXG5cclxuICAgICAgICAgIC8vIEF4ZXMgbm9kZXMgYXJlIGNsaXBwZWQgaW4gdGhlIGNoYXJ0XHJcbiAgICAgICAgICBuZXcgQXhpc0Fycm93Tm9kZSggY2hhcnRUcmFuc2Zvcm0sIE9yaWVudGF0aW9uLkhPUklaT05UQUwgKSxcclxuICAgICAgICAgIG5ldyBBeGlzQXJyb3dOb2RlKCBjaGFydFRyYW5zZm9ybSwgT3JpZW50YXRpb24uVkVSVElDQUwgKSxcclxuXHJcbiAgICAgICAgICAvLyBTb21lIGRhdGFcclxuICAgICAgICAgIG5ldyBMaW5lUGxvdCggY2hhcnRUcmFuc2Zvcm0sIGNyZWF0ZURhdGFTZXQoIC0yLCAyLCA1ICksIHsgc3Ryb2tlOiAncmVkJywgbGluZVdpZHRoOiAyIH0gKSxcclxuICAgICAgICAgIG5ldyBMaW5lUGxvdCggY2hhcnRUcmFuc2Zvcm0sIGNyZWF0ZURhdGFTZXQoIC0yLCAyLCAxMCApLCB7IHN0cm9rZTogJ2dyZWVuJywgbGluZVdpZHRoOiAyIH0gKSxcclxuICAgICAgICAgIG5ldyBMaW5lUGxvdCggY2hhcnRUcmFuc2Zvcm0sIGNyZWF0ZURhdGFTZXQoIC0yLCAyLCAyMCApLCB7IHN0cm9rZTogJ2JsdWUnLCBsaW5lV2lkdGg6IDIgfSApLFxyXG4gICAgICAgICAgbmV3IExpbmVQbG90KCBjaGFydFRyYW5zZm9ybSwgY3JlYXRlRGF0YVNldCggLTIsIDIsIDMwICksIHsgc3Ryb2tlOiAnb3JhbmdlJywgbGluZVdpZHRoOiAyIH0gKVxyXG4gICAgICAgIF1cclxuICAgICAgfSApLFxyXG5cclxuICAgICAgLy8gVGljayBtYXJrcyBvdXRzaWRlIHRoZSBjaGFydFxyXG4gICAgICBuZXcgVGlja01hcmtTZXQoIGNoYXJ0VHJhbnNmb3JtLCBPcmllbnRhdGlvbi5WRVJUSUNBTCwgMC41LCB7IGVkZ2U6ICdtaW4nIH0gKSxcclxuICAgICAgbmV3IFRpY2tMYWJlbFNldCggY2hhcnRUcmFuc2Zvcm0sIE9yaWVudGF0aW9uLlZFUlRJQ0FMLCAwLjUsIHsgZWRnZTogJ21pbicgfSApLFxyXG4gICAgICBuZXcgVGlja01hcmtTZXQoIGNoYXJ0VHJhbnNmb3JtLCBPcmllbnRhdGlvbi5IT1JJWk9OVEFMLCBNYXRoLlBJIC8gOCwgeyBlZGdlOiAnbWluJyB9ICksXHJcbiAgICAgIG5ldyBUaWNrTGFiZWxTZXQoIGNoYXJ0VHJhbnNmb3JtLCBPcmllbnRhdGlvbi5IT1JJWk9OVEFMLCBNYXRoLlBJIC8gOCwge1xyXG4gICAgICAgIGVkZ2U6ICdtaW4nLFxyXG4gICAgICAgIGNyZWF0ZUxhYmVsOiAoIHZhbHVlOiBudW1iZXIgKSA9PiBuZXcgVGV4dCggTWF0aC5hYnMoIHZhbHVlICkgPCAxRS02ID8gVXRpbHMudG9GaXhlZCggdmFsdWUsIDAgKSA6IFV0aWxzLnRvRml4ZWQoIHZhbHVlLCAyICksIHtcclxuICAgICAgICAgIGZvbnRTaXplOiAxMlxyXG4gICAgICAgIH0gKVxyXG4gICAgICB9ICksXHJcbiAgICAgIG5ldyBUZXh0KCAneCcsIHsgbGVmdENlbnRlcjogY2hhcnRSZWN0YW5nbGUucmlnaHRDZW50ZXIucGx1c1hZKCA0LCAwICksIGZvbnRTaXplOiAxOCB9ICksXHJcblxyXG4gICAgICB6b29tQnV0dG9uR3JvdXBcclxuICAgIF07XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbWJvby5yZWdpc3RlciggJ0RlbW9MaW5lUGxvdCcsIERlbW9MaW5lUGxvdCApO1xyXG5leHBvcnQgZGVmYXVsdCBEZW1vTGluZVBsb3Q7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSxvQ0FBb0M7QUFDL0QsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUNyRCxPQUFPQyxLQUFLLE1BQU0sMEJBQTBCO0FBQzVDLE9BQU9DLEtBQUssTUFBTSww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