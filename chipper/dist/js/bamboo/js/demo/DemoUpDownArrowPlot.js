// Copyright 2021-2022, University of Colorado Boulder

/**
 * Demonstrates an UpDownArrowPlot.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Range from '../../../dot/js/Range.js';
import Vector2 from '../../../dot/js/Vector2.js';
import Orientation from '../../../phet-core/js/Orientation.js';
import AxisArrowNode from '../AxisArrowNode.js';
import bamboo from '../bamboo.js';
import ChartRectangle from '../ChartRectangle.js';
import ChartTransform from '../ChartTransform.js';
import { Color, Node } from '../../../scenery/js/imports.js';
import UpDownArrowPlot from '../UpDownArrowPlot.js';
class DemoUpDownArrowPlot extends Node {
  constructor(options) {
    super();
    const modelXRange = new Range(0, 10);
    const modelYRange = new Range(-100, 100);

    // one data point for each integer point in the model, y values interpolated along the x range from min to max
    const dataSet = [];
    for (let i = 0; i <= modelXRange.max; i++) {
      dataSet.push(new Vector2(i, modelYRange.min + modelYRange.getLength() / modelXRange.getLength() * i));
    }
    const chartTransform = new ChartTransform({
      viewWidth: 500,
      viewHeight: 400,
      modelXRange: modelXRange,
      modelYRange: modelYRange
    });
    const chartRectangle = new ChartRectangle(chartTransform, {
      fill: 'white',
      stroke: 'black',
      cornerXRadius: 6,
      cornerYRadius: 6
    });
    const barPlot = new UpDownArrowPlot(chartTransform, dataSet, {
      arrowNodeOptions: {
        headWidth: 15,
        headHeight: 15
      },
      pointToPaintableFields: point => {
        // interpolate from red at modelYRange.min, green at modelYRange.max
        const distance = 1 / modelYRange.getLength() * (point.y - modelYRange.min);
        const c = Color.interpolateRGBA(new Color('red'), new Color('lawngreen'), distance);
        return {
          fill: c
        };
      }
    });
    const xAxis = new AxisArrowNode(chartTransform, Orientation.HORIZONTAL);

    // anything you want clipped goes in here
    const chartClip = new Node({
      clipArea: chartRectangle.getShape(),
      children: [barPlot, xAxis]
    });
    this.children = [chartRectangle, chartClip];

    // for positioning in the demo
    this.mutate(options);
  }
}
bamboo.register('DemoUpDownArrowPlot', DemoUpDownArrowPlot);
export default DemoUpDownArrowPlot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlZlY3RvcjIiLCJPcmllbnRhdGlvbiIsIkF4aXNBcnJvd05vZGUiLCJiYW1ib28iLCJDaGFydFJlY3RhbmdsZSIsIkNoYXJ0VHJhbnNmb3JtIiwiQ29sb3IiLCJOb2RlIiwiVXBEb3duQXJyb3dQbG90IiwiRGVtb1VwRG93bkFycm93UGxvdCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm1vZGVsWFJhbmdlIiwibW9kZWxZUmFuZ2UiLCJkYXRhU2V0IiwiaSIsIm1heCIsInB1c2giLCJtaW4iLCJnZXRMZW5ndGgiLCJjaGFydFRyYW5zZm9ybSIsInZpZXdXaWR0aCIsInZpZXdIZWlnaHQiLCJjaGFydFJlY3RhbmdsZSIsImZpbGwiLCJzdHJva2UiLCJjb3JuZXJYUmFkaXVzIiwiY29ybmVyWVJhZGl1cyIsImJhclBsb3QiLCJhcnJvd05vZGVPcHRpb25zIiwiaGVhZFdpZHRoIiwiaGVhZEhlaWdodCIsInBvaW50VG9QYWludGFibGVGaWVsZHMiLCJwb2ludCIsImRpc3RhbmNlIiwieSIsImMiLCJpbnRlcnBvbGF0ZVJHQkEiLCJ4QXhpcyIsIkhPUklaT05UQUwiLCJjaGFydENsaXAiLCJjbGlwQXJlYSIsImdldFNoYXBlIiwiY2hpbGRyZW4iLCJtdXRhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRlbW9VcERvd25BcnJvd1Bsb3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVtb25zdHJhdGVzIGFuIFVwRG93bkFycm93UGxvdC5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE9yaWVudGF0aW9uIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9PcmllbnRhdGlvbi5qcyc7XHJcbmltcG9ydCBBeGlzQXJyb3dOb2RlIGZyb20gJy4uL0F4aXNBcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgYmFtYm9vIGZyb20gJy4uL2JhbWJvby5qcyc7XHJcbmltcG9ydCBDaGFydFJlY3RhbmdsZSBmcm9tICcuLi9DaGFydFJlY3RhbmdsZS5qcyc7XHJcbmltcG9ydCBDaGFydFRyYW5zZm9ybSBmcm9tICcuLi9DaGFydFRyYW5zZm9ybS5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBOb2RlLCBOb2RlT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBVcERvd25BcnJvd1Bsb3QgZnJvbSAnLi4vVXBEb3duQXJyb3dQbG90LmpzJztcclxuXHJcbmNsYXNzIERlbW9VcERvd25BcnJvd1Bsb3QgZXh0ZW5kcyBOb2RlIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG9wdGlvbnM/OiBOb2RlT3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgY29uc3QgbW9kZWxYUmFuZ2UgPSBuZXcgUmFuZ2UoIDAsIDEwICk7XHJcbiAgICBjb25zdCBtb2RlbFlSYW5nZSA9IG5ldyBSYW5nZSggLTEwMCwgMTAwICk7XHJcblxyXG4gICAgLy8gb25lIGRhdGEgcG9pbnQgZm9yIGVhY2ggaW50ZWdlciBwb2ludCBpbiB0aGUgbW9kZWwsIHkgdmFsdWVzIGludGVycG9sYXRlZCBhbG9uZyB0aGUgeCByYW5nZSBmcm9tIG1pbiB0byBtYXhcclxuICAgIGNvbnN0IGRhdGFTZXQgPSBbXTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8PSBtb2RlbFhSYW5nZS5tYXg7IGkrKyApIHtcclxuICAgICAgZGF0YVNldC5wdXNoKCBuZXcgVmVjdG9yMiggaSwgbW9kZWxZUmFuZ2UubWluICsgKCBtb2RlbFlSYW5nZS5nZXRMZW5ndGgoKSAvIG1vZGVsWFJhbmdlLmdldExlbmd0aCgpICkgKiBpICkgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGFydFRyYW5zZm9ybSA9IG5ldyBDaGFydFRyYW5zZm9ybSgge1xyXG4gICAgICB2aWV3V2lkdGg6IDUwMCxcclxuICAgICAgdmlld0hlaWdodDogNDAwLFxyXG4gICAgICBtb2RlbFhSYW5nZTogbW9kZWxYUmFuZ2UsXHJcbiAgICAgIG1vZGVsWVJhbmdlOiBtb2RlbFlSYW5nZVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNoYXJ0UmVjdGFuZ2xlID0gbmV3IENoYXJ0UmVjdGFuZ2xlKCBjaGFydFRyYW5zZm9ybSwge1xyXG4gICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGNvcm5lclhSYWRpdXM6IDYsXHJcbiAgICAgIGNvcm5lcllSYWRpdXM6IDZcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBiYXJQbG90ID0gbmV3IFVwRG93bkFycm93UGxvdCggY2hhcnRUcmFuc2Zvcm0sIGRhdGFTZXQsIHtcclxuICAgICAgYXJyb3dOb2RlT3B0aW9uczoge1xyXG4gICAgICAgIGhlYWRXaWR0aDogMTUsXHJcbiAgICAgICAgaGVhZEhlaWdodDogMTVcclxuICAgICAgfSxcclxuICAgICAgcG9pbnRUb1BhaW50YWJsZUZpZWxkczogKCBwb2ludDogVmVjdG9yMiApID0+IHtcclxuXHJcbiAgICAgICAgLy8gaW50ZXJwb2xhdGUgZnJvbSByZWQgYXQgbW9kZWxZUmFuZ2UubWluLCBncmVlbiBhdCBtb2RlbFlSYW5nZS5tYXhcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IDEgLyAoIG1vZGVsWVJhbmdlLmdldExlbmd0aCgpICkgKiAoIHBvaW50LnkgLSBtb2RlbFlSYW5nZS5taW4gKTtcclxuICAgICAgICBjb25zdCBjID0gQ29sb3IuaW50ZXJwb2xhdGVSR0JBKCBuZXcgQ29sb3IoICdyZWQnICksIG5ldyBDb2xvciggJ2xhd25ncmVlbicgKSwgZGlzdGFuY2UgKTtcclxuICAgICAgICByZXR1cm4geyBmaWxsOiBjIH07XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHhBeGlzID0gbmV3IEF4aXNBcnJvd05vZGUoIGNoYXJ0VHJhbnNmb3JtLCBPcmllbnRhdGlvbi5IT1JJWk9OVEFMICk7XHJcblxyXG4gICAgLy8gYW55dGhpbmcgeW91IHdhbnQgY2xpcHBlZCBnb2VzIGluIGhlcmVcclxuICAgIGNvbnN0IGNoYXJ0Q2xpcCA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNsaXBBcmVhOiBjaGFydFJlY3RhbmdsZS5nZXRTaGFwZSgpLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIGJhclBsb3QsXHJcbiAgICAgICAgeEF4aXNcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuY2hpbGRyZW4gPSBbIGNoYXJ0UmVjdGFuZ2xlLCBjaGFydENsaXAgXTtcclxuXHJcbiAgICAvLyBmb3IgcG9zaXRpb25pbmcgaW4gdGhlIGRlbW9cclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5iYW1ib28ucmVnaXN0ZXIoICdEZW1vVXBEb3duQXJyb3dQbG90JywgRGVtb1VwRG93bkFycm93UGxvdCApO1xyXG5leHBvcnQgZGVmYXVsdCBEZW1vVXBEb3duQXJyb3dQbG90O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDBCQUEwQjtBQUM1QyxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLFdBQVcsTUFBTSxzQ0FBc0M7QUFDOUQsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxNQUFNLE1BQU0sY0FBYztBQUNqQyxPQUFPQyxjQUFjLE1BQU0sc0JBQXNCO0FBQ2pELE9BQU9DLGNBQWMsTUFBTSxz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