// Copyright 2020-2023, University of Colorado Boulder

/**
 * Shows bars for numerical data (where the x-value of the bar is a number). Does not support categorical data.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Vector2 from '../../dot/js/Vector2.js';
import optionize from '../../phet-core/js/optionize.js';
import { Node, PAINTABLE_DEFAULT_OPTIONS, Rectangle } from '../../scenery/js/imports.js';
import bamboo from './bamboo.js';
// constants
const DEFAULT_PAINTABLE_OPTIONS = {
  fill: 'black'
};
class BarPlot extends Node {
  // if you change this directly, you are responsible for calling update

  constructor(chartTransform, dataSet, providedOptions) {
    const options = optionize()({
      // SelfOptions
      barWidth: 10,
      barTailValue: 0,
      pointToPaintableFields: point => DEFAULT_PAINTABLE_OPTIONS
    }, providedOptions);
    super(options);
    this.chartTransform = chartTransform;
    this.barTailValue = options.barTailValue;
    this.dataSet = dataSet;
    this.barWidth = options.barWidth;
    this.pointToPaintableFields = options.pointToPaintableFields;
    this.rectangles = [];
    this.setDataSet(dataSet);

    // Update when the transform changes.
    const changedListener = () => this.update();
    chartTransform.changedEmitter.addListener(changedListener);
    this.disposeBarPlot = () => chartTransform.changedEmitter.removeListener(changedListener);
  }

  /**
   * Sets the dataSet and redraws the plot. If instead the dataSet array is mutated, it is the client's responsibility
   * to call `update` or make sure `update` is called elsewhere (say, if the chart scrolls in that frame).
   */
  setDataSet(dataSet) {
    this.dataSet = dataSet;
    this.update();
  }
  update() {
    // Add one rectangle per data point.
    while (this.rectangles.length < this.dataSet.length) {
      const rectangle = new Rectangle(0, 0, 0, 0);
      this.rectangles.push(rectangle);
      this.addChild(rectangle);
    }

    // If any data points were removed, remove any extra rectangles.
    while (this.rectangles.length > this.dataSet.length) {
      const rectangle = this.rectangles.pop();
      this.removeChild(rectangle);
    }
    for (let i = 0; i < this.rectangles.length; i++) {
      const tail = this.chartTransform.modelToViewPosition(new Vector2(this.dataSet[i].x, this.barTailValue));
      const tip = this.chartTransform.modelToViewPosition(this.dataSet[i]);

      // rectangles cannot have negative height, determine the bottom so its "tail" is at the origin
      const rectHeight = tip.y - tail.y;
      const bottom = Math.min(tail.y, tip.y);
      this.rectangles[i].setRect(tail.x - this.barWidth / 2, bottom, this.barWidth, Math.abs(rectHeight));
      const paintableFields = this.pointToPaintableFields(this.dataSet[i]);
      assert && assert(Object.keys(paintableFields).filter(key => !Object.keys(PAINTABLE_DEFAULT_OPTIONS).includes(key)).length === 0, 'options contain keys that could be dangerous for mutate');
      this.rectangles[i].mutate(paintableFields);
    }
  }
  dispose() {
    this.disposeBarPlot();
    super.dispose();
  }
}
bamboo.register('BarPlot', BarPlot);
export default BarPlot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwib3B0aW9uaXplIiwiTm9kZSIsIlBBSU5UQUJMRV9ERUZBVUxUX09QVElPTlMiLCJSZWN0YW5nbGUiLCJiYW1ib28iLCJERUZBVUxUX1BBSU5UQUJMRV9PUFRJT05TIiwiZmlsbCIsIkJhclBsb3QiLCJjb25zdHJ1Y3RvciIsImNoYXJ0VHJhbnNmb3JtIiwiZGF0YVNldCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJiYXJXaWR0aCIsImJhclRhaWxWYWx1ZSIsInBvaW50VG9QYWludGFibGVGaWVsZHMiLCJwb2ludCIsInJlY3RhbmdsZXMiLCJzZXREYXRhU2V0IiwiY2hhbmdlZExpc3RlbmVyIiwidXBkYXRlIiwiY2hhbmdlZEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImRpc3Bvc2VCYXJQbG90IiwicmVtb3ZlTGlzdGVuZXIiLCJsZW5ndGgiLCJyZWN0YW5nbGUiLCJwdXNoIiwiYWRkQ2hpbGQiLCJwb3AiLCJyZW1vdmVDaGlsZCIsImkiLCJ0YWlsIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsIngiLCJ0aXAiLCJyZWN0SGVpZ2h0IiwieSIsImJvdHRvbSIsIk1hdGgiLCJtaW4iLCJzZXRSZWN0IiwiYWJzIiwicGFpbnRhYmxlRmllbGRzIiwiYXNzZXJ0IiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsImtleSIsImluY2x1ZGVzIiwibXV0YXRlIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFyUGxvdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaG93cyBiYXJzIGZvciBudW1lcmljYWwgZGF0YSAod2hlcmUgdGhlIHgtdmFsdWUgb2YgdGhlIGJhciBpcyBhIG51bWJlcikuIERvZXMgbm90IHN1cHBvcnQgY2F0ZWdvcmljYWwgZGF0YS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBQQUlOVEFCTEVfREVGQVVMVF9PUFRJT05TLCBQYWludGFibGVPcHRpb25zLCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmFtYm9vIGZyb20gJy4vYmFtYm9vLmpzJztcclxuaW1wb3J0IENoYXJ0VHJhbnNmb3JtIGZyb20gJy4vQ2hhcnRUcmFuc2Zvcm0uanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IERFRkFVTFRfUEFJTlRBQkxFX09QVElPTlMgPSB7IGZpbGw6ICdibGFjaycgfTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIHdpZHRoIGluIHZpZXcgY29vcmRpbmF0ZXMgb2YgZWFjaCBiYXIgaW4gdGhlIHBsb3RcclxuICBiYXJXaWR0aD86IG51bWJlcjtcclxuICBiYXJUYWlsVmFsdWU/OiBudW1iZXI7XHJcblxyXG4gIC8vIG1hcHMgYSBwb2ludCB0byBhIGNvbnRhaW5pbmcgUGFpbnRhYmxlIG9wdGlvbnNcclxuICAvLyBOT1RFOiBjYW5ub3QgdXNlIHRoZSBcIk9wdGlvbnNcIiBzdWZmaXggYmVjYXVzZSBtZXJnZSB3aWxsIHRyeSB0byBtZXJnZSB0aGF0IGFzIG5lc3RlZCBvcHRpb25zLlxyXG4gIHBvaW50VG9QYWludGFibGVGaWVsZHM/OiAoIHBvaW50OiBWZWN0b3IyICkgPT4gUGFpbnRhYmxlT3B0aW9ucztcclxufTtcclxuZXhwb3J0IHR5cGUgQmFyUGxvdE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVPcHRpb25zO1xyXG5cclxuY2xhc3MgQmFyUGxvdCBleHRlbmRzIE5vZGUge1xyXG4gIHByaXZhdGUgY2hhcnRUcmFuc2Zvcm06IENoYXJ0VHJhbnNmb3JtO1xyXG4gIHByaXZhdGUgYmFyVGFpbFZhbHVlOiBudW1iZXI7XHJcblxyXG4gIC8vIGlmIHlvdSBjaGFuZ2UgdGhpcyBkaXJlY3RseSwgeW91IGFyZSByZXNwb25zaWJsZSBmb3IgY2FsbGluZyB1cGRhdGVcclxuICBwdWJsaWMgZGF0YVNldDogVmVjdG9yMltdO1xyXG4gIHB1YmxpYyBiYXJXaWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcG9pbnRUb1BhaW50YWJsZUZpZWxkczogKCBwb2ludDogVmVjdG9yMiApID0+IFBhaW50YWJsZU9wdGlvbnM7XHJcbiAgcHVibGljIHJlY3RhbmdsZXM6IFJlY3RhbmdsZVtdO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUJhclBsb3Q6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY2hhcnRUcmFuc2Zvcm06IENoYXJ0VHJhbnNmb3JtLCBkYXRhU2V0OiBWZWN0b3IyW10sIHByb3ZpZGVkT3B0aW9ucz86IEJhclBsb3RPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QmFyUGxvdE9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgYmFyV2lkdGg6IDEwLFxyXG4gICAgICBiYXJUYWlsVmFsdWU6IDAsXHJcbiAgICAgIHBvaW50VG9QYWludGFibGVGaWVsZHM6ICggcG9pbnQ6IFZlY3RvcjIgKSA9PiBERUZBVUxUX1BBSU5UQUJMRV9PUFRJT05TXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuY2hhcnRUcmFuc2Zvcm0gPSBjaGFydFRyYW5zZm9ybTtcclxuICAgIHRoaXMuYmFyVGFpbFZhbHVlID0gb3B0aW9ucy5iYXJUYWlsVmFsdWU7XHJcbiAgICB0aGlzLmRhdGFTZXQgPSBkYXRhU2V0O1xyXG5cclxuICAgIHRoaXMuYmFyV2lkdGggPSBvcHRpb25zLmJhcldpZHRoO1xyXG4gICAgdGhpcy5wb2ludFRvUGFpbnRhYmxlRmllbGRzID0gb3B0aW9ucy5wb2ludFRvUGFpbnRhYmxlRmllbGRzO1xyXG5cclxuICAgIHRoaXMucmVjdGFuZ2xlcyA9IFtdO1xyXG4gICAgdGhpcy5zZXREYXRhU2V0KCBkYXRhU2V0ICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHdoZW4gdGhlIHRyYW5zZm9ybSBjaGFuZ2VzLlxyXG4gICAgY29uc3QgY2hhbmdlZExpc3RlbmVyID0gKCkgPT4gdGhpcy51cGRhdGUoKTtcclxuICAgIGNoYXJ0VHJhbnNmb3JtLmNoYW5nZWRFbWl0dGVyLmFkZExpc3RlbmVyKCBjaGFuZ2VkTGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VCYXJQbG90ID0gKCkgPT4gY2hhcnRUcmFuc2Zvcm0uY2hhbmdlZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIGNoYW5nZWRMaXN0ZW5lciApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgZGF0YVNldCBhbmQgcmVkcmF3cyB0aGUgcGxvdC4gSWYgaW5zdGVhZCB0aGUgZGF0YVNldCBhcnJheSBpcyBtdXRhdGVkLCBpdCBpcyB0aGUgY2xpZW50J3MgcmVzcG9uc2liaWxpdHlcclxuICAgKiB0byBjYWxsIGB1cGRhdGVgIG9yIG1ha2Ugc3VyZSBgdXBkYXRlYCBpcyBjYWxsZWQgZWxzZXdoZXJlIChzYXksIGlmIHRoZSBjaGFydCBzY3JvbGxzIGluIHRoYXQgZnJhbWUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXREYXRhU2V0KCBkYXRhU2V0OiBWZWN0b3IyW10gKTogdm9pZCB7XHJcbiAgICB0aGlzLmRhdGFTZXQgPSBkYXRhU2V0O1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XHJcblxyXG4gICAgLy8gQWRkIG9uZSByZWN0YW5nbGUgcGVyIGRhdGEgcG9pbnQuXHJcbiAgICB3aGlsZSAoIHRoaXMucmVjdGFuZ2xlcy5sZW5ndGggPCB0aGlzLmRhdGFTZXQubGVuZ3RoICkge1xyXG4gICAgICBjb25zdCByZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAwLCAwICk7XHJcbiAgICAgIHRoaXMucmVjdGFuZ2xlcy5wdXNoKCByZWN0YW5nbGUgKTtcclxuICAgICAgdGhpcy5hZGRDaGlsZCggcmVjdGFuZ2xlICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgYW55IGRhdGEgcG9pbnRzIHdlcmUgcmVtb3ZlZCwgcmVtb3ZlIGFueSBleHRyYSByZWN0YW5nbGVzLlxyXG4gICAgd2hpbGUgKCB0aGlzLnJlY3RhbmdsZXMubGVuZ3RoID4gdGhpcy5kYXRhU2V0Lmxlbmd0aCApIHtcclxuICAgICAgY29uc3QgcmVjdGFuZ2xlID0gdGhpcy5yZWN0YW5nbGVzLnBvcCgpITtcclxuICAgICAgdGhpcy5yZW1vdmVDaGlsZCggcmVjdGFuZ2xlICk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5yZWN0YW5nbGVzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBjb25zdCB0YWlsID0gdGhpcy5jaGFydFRyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBuZXcgVmVjdG9yMiggdGhpcy5kYXRhU2V0WyBpIF0ueCwgdGhpcy5iYXJUYWlsVmFsdWUgKSApO1xyXG4gICAgICBjb25zdCB0aXAgPSB0aGlzLmNoYXJ0VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIHRoaXMuZGF0YVNldFsgaSBdICk7XHJcblxyXG4gICAgICAvLyByZWN0YW5nbGVzIGNhbm5vdCBoYXZlIG5lZ2F0aXZlIGhlaWdodCwgZGV0ZXJtaW5lIHRoZSBib3R0b20gc28gaXRzIFwidGFpbFwiIGlzIGF0IHRoZSBvcmlnaW5cclxuICAgICAgY29uc3QgcmVjdEhlaWdodCA9IHRpcC55IC0gdGFpbC55O1xyXG4gICAgICBjb25zdCBib3R0b20gPSBNYXRoLm1pbiggdGFpbC55LCB0aXAueSApO1xyXG4gICAgICB0aGlzLnJlY3RhbmdsZXNbIGkgXS5zZXRSZWN0KCB0YWlsLnggLSB0aGlzLmJhcldpZHRoIC8gMiwgYm90dG9tLCB0aGlzLmJhcldpZHRoLCBNYXRoLmFicyggcmVjdEhlaWdodCApICk7XHJcblxyXG4gICAgICBjb25zdCBwYWludGFibGVGaWVsZHMgPSB0aGlzLnBvaW50VG9QYWludGFibGVGaWVsZHMoIHRoaXMuZGF0YVNldFsgaSBdICk7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoXHJcbiAgICAgICAgT2JqZWN0LmtleXMoIHBhaW50YWJsZUZpZWxkcyApLmZpbHRlcigga2V5ID0+ICFPYmplY3Qua2V5cyggUEFJTlRBQkxFX0RFRkFVTFRfT1BUSU9OUyApLmluY2x1ZGVzKCBrZXkgKSApLmxlbmd0aCA9PT0gMCxcclxuICAgICAgICAnb3B0aW9ucyBjb250YWluIGtleXMgdGhhdCBjb3VsZCBiZSBkYW5nZXJvdXMgZm9yIG11dGF0ZSdcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHRoaXMucmVjdGFuZ2xlc1sgaSBdLm11dGF0ZSggcGFpbnRhYmxlRmllbGRzICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUJhclBsb3QoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbWJvby5yZWdpc3RlciggJ0JhclBsb3QnLCBCYXJQbG90ICk7XHJcbmV4cG9ydCBkZWZhdWx0IEJhclBsb3Q7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0seUJBQXlCO0FBQzdDLE9BQU9DLFNBQVMsTUFBTSxpQ0FB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