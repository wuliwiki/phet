// Copyright 2020-2022, University of Colorado Boulder

/**
 * LinePlot renders a {Array.<Vector2|null>} dataSet by connecting the points with line segments.
 *
 * Null values are skipped and allow you to create gaps in a plot. Examples:
 * dataset [ (0,0), (0,1), (0,2), (0,3) ] => 3 lines segments, connecting consecutive points
 * dataset [ (0,0), (0,1), null, (0,2), (0,3) ] => 2 lines segments, connecting the first 2 and last 2 points
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { Path } from '../../scenery/js/imports.js';
import bamboo from './bamboo.js';
class LinePlot extends Path {
  // if you change this directly, you are responsible for calling update

  constructor(chartTransform, dataSet, providedOptions) {
    const options = optionize()({
      // Path options
      stroke: 'black'
    }, providedOptions);
    super(null, options);
    this.chartTransform = chartTransform;
    this.dataSet = dataSet;

    // Initialize
    this.update();

    // Update when the transform changes.
    const changedListener = () => this.update();
    chartTransform.changedEmitter.addListener(changedListener);
    this.disposeLinePlot = () => chartTransform.changedEmitter.removeListener(changedListener);
  }

  /**
   * Sets the dataSet and redraws the plot. If instead the dataSet array is mutated, it is the client's responsibility
   * to call `update` or make sure `update` is called elsewhere (say, if the chart scrolls in that frame).
   */
  setDataSet(dataSet) {
    this.dataSet = dataSet;
    this.update();
  }

  // Recomputes the rendered shape.
  update() {
    const shape = new Shape();
    let moveToNextPoint = true;
    for (let i = 0; i < this.dataSet.length; i++) {
      const dataPoint = this.dataSet[i];
      assert && assert(dataPoint === null || dataPoint.isFinite(), 'data points must be finite Vector2 or null');

      // Draw a line segment to the next non-null value. Null values result in a gap (via move) in the plot.
      if (dataPoint) {
        const viewPoint = this.chartTransform.modelToViewPosition(dataPoint);
        if (moveToNextPoint) {
          shape.moveToPoint(viewPoint);
          moveToNextPoint = false;
        } else {
          shape.lineToPoint(viewPoint);
        }
      } else {
        moveToNextPoint = true;
      }
    }
    this.shape = shape.makeImmutable();
  }
  dispose() {
    this.disposeLinePlot();
    super.dispose();
  }
}
bamboo.register('LinePlot', LinePlot);
export default LinePlot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIlBhdGgiLCJiYW1ib28iLCJMaW5lUGxvdCIsImNvbnN0cnVjdG9yIiwiY2hhcnRUcmFuc2Zvcm0iLCJkYXRhU2V0IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInN0cm9rZSIsInVwZGF0ZSIsImNoYW5nZWRMaXN0ZW5lciIsImNoYW5nZWRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJkaXNwb3NlTGluZVBsb3QiLCJyZW1vdmVMaXN0ZW5lciIsInNldERhdGFTZXQiLCJzaGFwZSIsIm1vdmVUb05leHRQb2ludCIsImkiLCJsZW5ndGgiLCJkYXRhUG9pbnQiLCJhc3NlcnQiLCJpc0Zpbml0ZSIsInZpZXdQb2ludCIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJtb3ZlVG9Qb2ludCIsImxpbmVUb1BvaW50IiwibWFrZUltbXV0YWJsZSIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxpbmVQbG90LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExpbmVQbG90IHJlbmRlcnMgYSB7QXJyYXkuPFZlY3RvcjJ8bnVsbD59IGRhdGFTZXQgYnkgY29ubmVjdGluZyB0aGUgcG9pbnRzIHdpdGggbGluZSBzZWdtZW50cy5cclxuICpcclxuICogTnVsbCB2YWx1ZXMgYXJlIHNraXBwZWQgYW5kIGFsbG93IHlvdSB0byBjcmVhdGUgZ2FwcyBpbiBhIHBsb3QuIEV4YW1wbGVzOlxyXG4gKiBkYXRhc2V0IFsgKDAsMCksICgwLDEpLCAoMCwyKSwgKDAsMykgXSA9PiAzIGxpbmVzIHNlZ21lbnRzLCBjb25uZWN0aW5nIGNvbnNlY3V0aXZlIHBvaW50c1xyXG4gKiBkYXRhc2V0IFsgKDAsMCksICgwLDEpLCBudWxsLCAoMCwyKSwgKDAsMykgXSA9PiAyIGxpbmVzIHNlZ21lbnRzLCBjb25uZWN0aW5nIHRoZSBmaXJzdCAyIGFuZCBsYXN0IDIgcG9pbnRzXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBQYXRoLCBQYXRoT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBiYW1ib28gZnJvbSAnLi9iYW1ib28uanMnO1xyXG5pbXBvcnQgQ2hhcnRUcmFuc2Zvcm0gZnJvbSAnLi9DaGFydFRyYW5zZm9ybS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuZXhwb3J0IHR5cGUgTGluZVBsb3RPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQYXRoT3B0aW9ucztcclxuXHJcbmNsYXNzIExpbmVQbG90IGV4dGVuZHMgUGF0aCB7XHJcbiAgcHJpdmF0ZSBjaGFydFRyYW5zZm9ybTogQ2hhcnRUcmFuc2Zvcm07XHJcblxyXG4gIC8vIGlmIHlvdSBjaGFuZ2UgdGhpcyBkaXJlY3RseSwgeW91IGFyZSByZXNwb25zaWJsZSBmb3IgY2FsbGluZyB1cGRhdGVcclxuICBwdWJsaWMgZGF0YVNldDogKCBWZWN0b3IyIHwgbnVsbCApW107XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlTGluZVBsb3Q6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY2hhcnRUcmFuc2Zvcm06IENoYXJ0VHJhbnNmb3JtLCBkYXRhU2V0OiAoIFZlY3RvcjIgfCBudWxsIClbXSwgcHJvdmlkZWRPcHRpb25zPzogTGluZVBsb3RPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TGluZVBsb3RPcHRpb25zLCBTZWxmT3B0aW9ucywgUGF0aE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFBhdGggb3B0aW9uc1xyXG4gICAgICBzdHJva2U6ICdibGFjaydcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBudWxsLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5jaGFydFRyYW5zZm9ybSA9IGNoYXJ0VHJhbnNmb3JtO1xyXG4gICAgdGhpcy5kYXRhU2V0ID0gZGF0YVNldDtcclxuXHJcbiAgICAvLyBJbml0aWFsaXplXHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB3aGVuIHRoZSB0cmFuc2Zvcm0gY2hhbmdlcy5cclxuICAgIGNvbnN0IGNoYW5nZWRMaXN0ZW5lciA9ICgpID0+IHRoaXMudXBkYXRlKCk7XHJcbiAgICBjaGFydFRyYW5zZm9ybS5jaGFuZ2VkRW1pdHRlci5hZGRMaXN0ZW5lciggY2hhbmdlZExpc3RlbmVyICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlTGluZVBsb3QgPSAoKSA9PiBjaGFydFRyYW5zZm9ybS5jaGFuZ2VkRW1pdHRlci5yZW1vdmVMaXN0ZW5lciggY2hhbmdlZExpc3RlbmVyICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBkYXRhU2V0IGFuZCByZWRyYXdzIHRoZSBwbG90LiBJZiBpbnN0ZWFkIHRoZSBkYXRhU2V0IGFycmF5IGlzIG11dGF0ZWQsIGl0IGlzIHRoZSBjbGllbnQncyByZXNwb25zaWJpbGl0eVxyXG4gICAqIHRvIGNhbGwgYHVwZGF0ZWAgb3IgbWFrZSBzdXJlIGB1cGRhdGVgIGlzIGNhbGxlZCBlbHNld2hlcmUgKHNheSwgaWYgdGhlIGNoYXJ0IHNjcm9sbHMgaW4gdGhhdCBmcmFtZSkuXHJcbiAgICovXHJcbiAgcHVibGljIHNldERhdGFTZXQoIGRhdGFTZXQ6ICggVmVjdG9yMiB8IG51bGwgKVtdICk6IHZvaWQge1xyXG4gICAgdGhpcy5kYXRhU2V0ID0gZGF0YVNldDtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICAvLyBSZWNvbXB1dGVzIHRoZSByZW5kZXJlZCBzaGFwZS5cclxuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICAgIGxldCBtb3ZlVG9OZXh0UG9pbnQgPSB0cnVlO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhU2V0Lmxlbmd0aDsgaSsrICkge1xyXG5cclxuICAgICAgY29uc3QgZGF0YVBvaW50ID0gdGhpcy5kYXRhU2V0WyBpIF07XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGRhdGFQb2ludCA9PT0gbnVsbCB8fCBkYXRhUG9pbnQuaXNGaW5pdGUoKSwgJ2RhdGEgcG9pbnRzIG11c3QgYmUgZmluaXRlIFZlY3RvcjIgb3IgbnVsbCcgKTtcclxuXHJcbiAgICAgIC8vIERyYXcgYSBsaW5lIHNlZ21lbnQgdG8gdGhlIG5leHQgbm9uLW51bGwgdmFsdWUuIE51bGwgdmFsdWVzIHJlc3VsdCBpbiBhIGdhcCAodmlhIG1vdmUpIGluIHRoZSBwbG90LlxyXG4gICAgICBpZiAoIGRhdGFQb2ludCApIHtcclxuICAgICAgICBjb25zdCB2aWV3UG9pbnQgPSB0aGlzLmNoYXJ0VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGRhdGFQb2ludCApO1xyXG4gICAgICAgIGlmICggbW92ZVRvTmV4dFBvaW50ICkge1xyXG4gICAgICAgICAgc2hhcGUubW92ZVRvUG9pbnQoIHZpZXdQb2ludCApO1xyXG4gICAgICAgICAgbW92ZVRvTmV4dFBvaW50ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgc2hhcGUubGluZVRvUG9pbnQoIHZpZXdQb2ludCApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBtb3ZlVG9OZXh0UG9pbnQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLnNoYXBlID0gc2hhcGUubWFrZUltbXV0YWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VMaW5lUGxvdCgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuYmFtYm9vLnJlZ2lzdGVyKCAnTGluZVBsb3QnLCBMaW5lUGxvdCApO1xyXG5leHBvcnQgZGVmYXVsdCBMaW5lUGxvdDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxTQUFTQSxLQUFLLFFBQVEsMEJBQTBCO0FBQ2hELE9BQU9DLFNBQVMsTUFBNEIsaUNBQWlDO0FBQzdFLFNBQVNDLElBQUksUUFBcUIsNkJBQTZCO0FBQy9ELE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBTWhDLE1BQU1DLFFBQVEsU0FBU0YsSUFBSSxDQUFDO0VBRzFCOztFQUlPRyxXQUFXQSxDQUFFQyxjQUE4QixFQUFFQyxPQUE2QixFQUFFQyxlQUFpQyxFQUFHO0lBRXJILE1BQU1DLE9BQU8sR0FBR1IsU0FBUyxDQUE0QyxDQUFDLENBQUU7TUFFdEU7TUFDQVMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUFFRixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRSxJQUFJLEVBQUVDLE9BQVEsQ0FBQztJQUV0QixJQUFJLENBQUNILGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTzs7SUFFdEI7SUFDQSxJQUFJLENBQUNJLE1BQU0sQ0FBQyxDQUFDOztJQUViO0lBQ0EsTUFBTUMsZUFBZSxHQUFHQSxDQUFBLEtBQU0sSUFBSSxDQUFDRCxNQUFNLENBQUMsQ0FBQztJQUMzQ0wsY0FBYyxDQUFDTyxjQUFjLENBQUNDLFdBQVcsQ0FBRUYsZUFBZ0IsQ0FBQztJQUU1RCxJQUFJLENBQUNHLGVBQWUsR0FBRyxNQUFNVCxjQUFjLENBQUNPLGNBQWMsQ0FBQ0csY0FBYyxDQUFFSixlQUFnQixDQUFDO0VBQzlGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NLLFVBQVVBLENBQUVWLE9BQTZCLEVBQVM7SUFDdkQsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLE9BQU87SUFDdEIsSUFBSSxDQUFDSSxNQUFNLENBQUMsQ0FBQztFQUNmOztFQUVBO0VBQ09BLE1BQU1BLENBQUEsRUFBUztJQUNwQixNQUFNTyxLQUFLLEdBQUcsSUFBSWxCLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLElBQUltQixlQUFlLEdBQUcsSUFBSTtJQUMxQixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNiLE9BQU8sQ0FBQ2MsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRztNQUU5QyxNQUFNRSxTQUFTLEdBQUcsSUFBSSxDQUFDZixPQUFPLENBQUVhLENBQUMsQ0FBRTtNQUNuQ0csTUFBTSxJQUFJQSxNQUFNLENBQUVELFNBQVMsS0FBSyxJQUFJLElBQUlBLFNBQVMsQ0FBQ0UsUUFBUSxDQUFDLENBQUMsRUFBRSw0Q0FBNkMsQ0FBQzs7TUFFNUc7TUFDQSxJQUFLRixTQUFTLEVBQUc7UUFDZixNQUFNRyxTQUFTLEdBQUcsSUFBSSxDQUFDbkIsY0FBYyxDQUFDb0IsbUJBQW1CLENBQUVKLFNBQVUsQ0FBQztRQUN0RSxJQUFLSCxlQUFlLEVBQUc7VUFDckJELEtBQUssQ0FBQ1MsV0FBVyxDQUFFRixTQUFVLENBQUM7VUFDOUJOLGVBQWUsR0FBRyxLQUFLO1FBQ3pCLENBQUMsTUFDSTtVQUNIRCxLQUFLLENBQUNVLFdBQVcsQ0FBRUgsU0FBVSxDQUFDO1FBQ2hDO01BQ0YsQ0FBQyxNQUNJO1FBQ0hOLGVBQWUsR0FBRyxJQUFJO01BQ3hCO0lBQ0Y7SUFDQSxJQUFJLENBQUNELEtBQUssR0FBR0EsS0FBSyxDQUFDVyxhQUFhLENBQUMsQ0FBQztFQUNwQztFQUVnQkMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ2YsZUFBZSxDQUFDLENBQUM7SUFDdEIsS0FBSyxDQUFDZSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUEzQixNQUFNLENBQUM0QixRQUFRLENBQUUsVUFBVSxFQUFFM0IsUUFBUyxDQUFDO0FBQ3ZDLGVBQWVBLFFBQVEifQ==