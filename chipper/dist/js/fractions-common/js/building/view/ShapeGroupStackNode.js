// Copyright 2018-2021, University of Colorado Boulder

/**
 * View for a ShapeGroupStack.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import EnumerationMap from '../../../../phet-core/js/EnumerationMap.js';
import { Node } from '../../../../scenery/js/imports.js';
import FractionsCommonConstants from '../../common/FractionsCommonConstants.js';
import fractionsCommon from '../../fractionsCommon.js';
import BuildingRepresentation from '../model/BuildingRepresentation.js';
import ShapeGroupStack from '../model/ShapeGroupStack.js';
import ShapeGroupNode from './ShapeGroupNode.js';
import StackNode from './StackNode.js';

// constants
const iconMap = {};
[false, true].forEach(hasExpansionButtons => {
  iconMap[hasExpansionButtons] = new EnumerationMap(BuildingRepresentation, representation => ShapeGroupNode.createIcon(representation, hasExpansionButtons));
});
class ShapeGroupStackNode extends StackNode {
  /**
   * @param {ShapeStackGroup} shapeGroupStack
   * @param {Object} [options]
   */
  constructor(shapeGroupStack, options) {
    super(shapeGroupStack);

    // @private {BuildingRepresentation}
    this.representation = shapeGroupStack.representation;

    // @private {Node}
    this.icon = iconMap[shapeGroupStack.hasExpansionButtons].get(shapeGroupStack.representation);

    // @private {function}
    this.shapeGroupAddedListener = this.addShapeGroup.bind(this);
    this.shapeGroupRemovedListener = this.removeShapeGroup.bind(this);
    this.stack.shapeGroups.addItemAddedListener(this.shapeGroupAddedListener);
    this.stack.shapeGroups.addItemRemovedListener(this.shapeGroupRemovedListener);
    this.stack.shapeGroups.forEach(this.shapeGroupAddedListener);

    // Inform about our available layout bounds
    const bounds = Bounds2.NOTHING.copy();
    const iconBounds = this.icon.bounds;
    for (let i = 0; i < this.stack.layoutQuantity; i++) {
      const offset = ShapeGroupStack.getOffset(this.representation, i);
      bounds.includeBounds(iconBounds.shiftedXY(offset.x, offset.y));
    }
    this.layoutBounds = bounds;
    this.mutate(options);
  }

  /**
   * Adds a ShapePiece's view
   * @private
   *
   * @param {ShapePiece} shapeGroup
   */
  addShapeGroup(shapeGroup) {
    const numOffsets = FractionsCommonConstants.SHAPE_BUILD_SCALE * this.children.length;
    this.addChild(new Node({
      children: [this.icon],
      translation: ShapeGroupStack.getOffset(this.representation, numOffsets)
    }));
  }

  /**
   * Removes a ShapePiece's view
   * @private
   *
   * @param {ShapePiece} shapeGroup
   */
  removeShapeGroup(shapeGroup) {
    const child = this.children[this.children.length - 1];
    this.removeChild(child);

    // Since we add in the icon, we need to dispose the child to release the reference to the icon.
    child.dispose();
  }

  /**
   * Releases references.
   * @public
   * @override
   */
  dispose() {
    // Dispose all of the child nodes, so that they won't have the icon as a child anymore (which would leak memory).
    this.children.forEach(child => child.dispose());
    this.stack.shapeGroups.removeItemAddedListener(this.shapeGroupAddedListener);
    this.stack.shapeGroups.removeItemRemovedListener(this.shapeGroupRemovedListener);
    super.dispose();
  }
}
fractionsCommon.register('ShapeGroupStackNode', ShapeGroupStackNode);
export default ShapeGroupStackNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiRW51bWVyYXRpb25NYXAiLCJOb2RlIiwiRnJhY3Rpb25zQ29tbW9uQ29uc3RhbnRzIiwiZnJhY3Rpb25zQ29tbW9uIiwiQnVpbGRpbmdSZXByZXNlbnRhdGlvbiIsIlNoYXBlR3JvdXBTdGFjayIsIlNoYXBlR3JvdXBOb2RlIiwiU3RhY2tOb2RlIiwiaWNvbk1hcCIsImZvckVhY2giLCJoYXNFeHBhbnNpb25CdXR0b25zIiwicmVwcmVzZW50YXRpb24iLCJjcmVhdGVJY29uIiwiU2hhcGVHcm91cFN0YWNrTm9kZSIsImNvbnN0cnVjdG9yIiwic2hhcGVHcm91cFN0YWNrIiwib3B0aW9ucyIsImljb24iLCJnZXQiLCJzaGFwZUdyb3VwQWRkZWRMaXN0ZW5lciIsImFkZFNoYXBlR3JvdXAiLCJiaW5kIiwic2hhcGVHcm91cFJlbW92ZWRMaXN0ZW5lciIsInJlbW92ZVNoYXBlR3JvdXAiLCJzdGFjayIsInNoYXBlR3JvdXBzIiwiYWRkSXRlbUFkZGVkTGlzdGVuZXIiLCJhZGRJdGVtUmVtb3ZlZExpc3RlbmVyIiwiYm91bmRzIiwiTk9USElORyIsImNvcHkiLCJpY29uQm91bmRzIiwiaSIsImxheW91dFF1YW50aXR5Iiwib2Zmc2V0IiwiZ2V0T2Zmc2V0IiwiaW5jbHVkZUJvdW5kcyIsInNoaWZ0ZWRYWSIsIngiLCJ5IiwibGF5b3V0Qm91bmRzIiwibXV0YXRlIiwic2hhcGVHcm91cCIsIm51bU9mZnNldHMiLCJTSEFQRV9CVUlMRF9TQ0FMRSIsImNoaWxkcmVuIiwibGVuZ3RoIiwiYWRkQ2hpbGQiLCJ0cmFuc2xhdGlvbiIsImNoaWxkIiwicmVtb3ZlQ2hpbGQiLCJkaXNwb3NlIiwicmVtb3ZlSXRlbUFkZGVkTGlzdGVuZXIiLCJyZW1vdmVJdGVtUmVtb3ZlZExpc3RlbmVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTaGFwZUdyb3VwU3RhY2tOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgZm9yIGEgU2hhcGVHcm91cFN0YWNrLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb25NYXAgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uTWFwLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBGcmFjdGlvbnNDb21tb25Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0ZyYWN0aW9uc0NvbW1vbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBmcmFjdGlvbnNDb21tb24gZnJvbSAnLi4vLi4vZnJhY3Rpb25zQ29tbW9uLmpzJztcclxuaW1wb3J0IEJ1aWxkaW5nUmVwcmVzZW50YXRpb24gZnJvbSAnLi4vbW9kZWwvQnVpbGRpbmdSZXByZXNlbnRhdGlvbi5qcyc7XHJcbmltcG9ydCBTaGFwZUdyb3VwU3RhY2sgZnJvbSAnLi4vbW9kZWwvU2hhcGVHcm91cFN0YWNrLmpzJztcclxuaW1wb3J0IFNoYXBlR3JvdXBOb2RlIGZyb20gJy4vU2hhcGVHcm91cE5vZGUuanMnO1xyXG5pbXBvcnQgU3RhY2tOb2RlIGZyb20gJy4vU3RhY2tOb2RlLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBpY29uTWFwID0ge307XHJcblsgZmFsc2UsIHRydWUgXS5mb3JFYWNoKCBoYXNFeHBhbnNpb25CdXR0b25zID0+IHtcclxuICBpY29uTWFwWyBoYXNFeHBhbnNpb25CdXR0b25zIF0gPSBuZXcgRW51bWVyYXRpb25NYXAoIEJ1aWxkaW5nUmVwcmVzZW50YXRpb24sIHJlcHJlc2VudGF0aW9uID0+IFNoYXBlR3JvdXBOb2RlLmNyZWF0ZUljb24oIHJlcHJlc2VudGF0aW9uLCBoYXNFeHBhbnNpb25CdXR0b25zICkgKTtcclxufSApO1xyXG5cclxuY2xhc3MgU2hhcGVHcm91cFN0YWNrTm9kZSBleHRlbmRzIFN0YWNrTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtTaGFwZVN0YWNrR3JvdXB9IHNoYXBlR3JvdXBTdGFja1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggc2hhcGVHcm91cFN0YWNrLCBvcHRpb25zICkge1xyXG4gICAgc3VwZXIoIHNoYXBlR3JvdXBTdGFjayApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtCdWlsZGluZ1JlcHJlc2VudGF0aW9ufVxyXG4gICAgdGhpcy5yZXByZXNlbnRhdGlvbiA9IHNoYXBlR3JvdXBTdGFjay5yZXByZXNlbnRhdGlvbjtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7Tm9kZX1cclxuICAgIHRoaXMuaWNvbiA9IGljb25NYXBbIHNoYXBlR3JvdXBTdGFjay5oYXNFeHBhbnNpb25CdXR0b25zIF0uZ2V0KCBzaGFwZUdyb3VwU3RhY2sucmVwcmVzZW50YXRpb24gKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7ZnVuY3Rpb259XHJcbiAgICB0aGlzLnNoYXBlR3JvdXBBZGRlZExpc3RlbmVyID0gdGhpcy5hZGRTaGFwZUdyb3VwLmJpbmQoIHRoaXMgKTtcclxuICAgIHRoaXMuc2hhcGVHcm91cFJlbW92ZWRMaXN0ZW5lciA9IHRoaXMucmVtb3ZlU2hhcGVHcm91cC5iaW5kKCB0aGlzICk7XHJcblxyXG4gICAgdGhpcy5zdGFjay5zaGFwZUdyb3Vwcy5hZGRJdGVtQWRkZWRMaXN0ZW5lciggdGhpcy5zaGFwZUdyb3VwQWRkZWRMaXN0ZW5lciApO1xyXG4gICAgdGhpcy5zdGFjay5zaGFwZUdyb3Vwcy5hZGRJdGVtUmVtb3ZlZExpc3RlbmVyKCB0aGlzLnNoYXBlR3JvdXBSZW1vdmVkTGlzdGVuZXIgKTtcclxuICAgIHRoaXMuc3RhY2suc2hhcGVHcm91cHMuZm9yRWFjaCggdGhpcy5zaGFwZUdyb3VwQWRkZWRMaXN0ZW5lciApO1xyXG5cclxuICAgIC8vIEluZm9ybSBhYm91dCBvdXIgYXZhaWxhYmxlIGxheW91dCBib3VuZHNcclxuICAgIGNvbnN0IGJvdW5kcyA9IEJvdW5kczIuTk9USElORy5jb3B5KCk7XHJcbiAgICBjb25zdCBpY29uQm91bmRzID0gdGhpcy5pY29uLmJvdW5kcztcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuc3RhY2subGF5b3V0UXVhbnRpdHk7IGkrKyApIHtcclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gU2hhcGVHcm91cFN0YWNrLmdldE9mZnNldCggdGhpcy5yZXByZXNlbnRhdGlvbiwgaSApO1xyXG4gICAgICBib3VuZHMuaW5jbHVkZUJvdW5kcyggaWNvbkJvdW5kcy5zaGlmdGVkWFkoIG9mZnNldC54LCBvZmZzZXQueSApICk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmxheW91dEJvdW5kcyA9IGJvdW5kcztcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhIFNoYXBlUGllY2UncyB2aWV3XHJcbiAgICogQHByaXZhdGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U2hhcGVQaWVjZX0gc2hhcGVHcm91cFxyXG4gICAqL1xyXG4gIGFkZFNoYXBlR3JvdXAoIHNoYXBlR3JvdXAgKSB7XHJcbiAgICBjb25zdCBudW1PZmZzZXRzID0gRnJhY3Rpb25zQ29tbW9uQ29uc3RhbnRzLlNIQVBFX0JVSUxEX1NDQUxFICogdGhpcy5jaGlsZHJlbi5sZW5ndGg7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgdGhpcy5pY29uIF0sXHJcbiAgICAgIHRyYW5zbGF0aW9uOiBTaGFwZUdyb3VwU3RhY2suZ2V0T2Zmc2V0KCB0aGlzLnJlcHJlc2VudGF0aW9uLCBudW1PZmZzZXRzIClcclxuICAgIH0gKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhIFNoYXBlUGllY2UncyB2aWV3XHJcbiAgICogQHByaXZhdGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U2hhcGVQaWVjZX0gc2hhcGVHcm91cFxyXG4gICAqL1xyXG4gIHJlbW92ZVNoYXBlR3JvdXAoIHNoYXBlR3JvdXAgKSB7XHJcbiAgICBjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bIHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMSBdO1xyXG4gICAgdGhpcy5yZW1vdmVDaGlsZCggY2hpbGQgKTtcclxuXHJcbiAgICAvLyBTaW5jZSB3ZSBhZGQgaW4gdGhlIGljb24sIHdlIG5lZWQgdG8gZGlzcG9zZSB0aGUgY2hpbGQgdG8gcmVsZWFzZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBpY29uLlxyXG4gICAgY2hpbGQuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVsZWFzZXMgcmVmZXJlbmNlcy5cclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIC8vIERpc3Bvc2UgYWxsIG9mIHRoZSBjaGlsZCBub2Rlcywgc28gdGhhdCB0aGV5IHdvbid0IGhhdmUgdGhlIGljb24gYXMgYSBjaGlsZCBhbnltb3JlICh3aGljaCB3b3VsZCBsZWFrIG1lbW9yeSkuXHJcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goIGNoaWxkID0+IGNoaWxkLmRpc3Bvc2UoKSApO1xyXG5cclxuICAgIHRoaXMuc3RhY2suc2hhcGVHcm91cHMucmVtb3ZlSXRlbUFkZGVkTGlzdGVuZXIoIHRoaXMuc2hhcGVHcm91cEFkZGVkTGlzdGVuZXIgKTtcclxuICAgIHRoaXMuc3RhY2suc2hhcGVHcm91cHMucmVtb3ZlSXRlbVJlbW92ZWRMaXN0ZW5lciggdGhpcy5zaGFwZUdyb3VwUmVtb3ZlZExpc3RlbmVyICk7XHJcblxyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZnJhY3Rpb25zQ29tbW9uLnJlZ2lzdGVyKCAnU2hhcGVHcm91cFN0YWNrTm9kZScsIFNoYXBlR3JvdXBTdGFja05vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgU2hhcGVHcm91cFN0YWNrTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxjQUFjLE1BQU0sNENBQTRDO0FBQ3ZFLFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0Msd0JBQXdCLE1BQU0sMENBQTBDO0FBQy9FLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0Msc0JBQXNCLE1BQU0sb0NBQW9DO0FBQ3ZFLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjtBQUNoRCxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCOztBQUV0QztBQUNBLE1BQU1DLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbEIsQ0FBRSxLQUFLLEVBQUUsSUFBSSxDQUFFLENBQUNDLE9BQU8sQ0FBRUMsbUJBQW1CLElBQUk7RUFDOUNGLE9BQU8sQ0FBRUUsbUJBQW1CLENBQUUsR0FBRyxJQUFJVixjQUFjLENBQUVJLHNCQUFzQixFQUFFTyxjQUFjLElBQUlMLGNBQWMsQ0FBQ00sVUFBVSxDQUFFRCxjQUFjLEVBQUVELG1CQUFvQixDQUFFLENBQUM7QUFDbkssQ0FBRSxDQUFDO0FBRUgsTUFBTUcsbUJBQW1CLFNBQVNOLFNBQVMsQ0FBQztFQUMxQztBQUNGO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxlQUFlLEVBQUVDLE9BQU8sRUFBRztJQUN0QyxLQUFLLENBQUVELGVBQWdCLENBQUM7O0lBRXhCO0lBQ0EsSUFBSSxDQUFDSixjQUFjLEdBQUdJLGVBQWUsQ0FB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