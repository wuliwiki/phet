// Copyright 2018-2020, University of Colorado Boulder

/**
 * A stack that holds ShapePieces.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Matrix3 from '../../../../dot/js/Matrix3.js';
import fractionsCommon from '../../fractionsCommon.js';
import BuildingRepresentation from './BuildingRepresentation.js';
import BuildingType from './BuildingType.js';
import ShapeContainer from './ShapeContainer.js';
import Stack from './Stack.js';
class ShapeStack extends Stack {
  /**
   * @param {Fraction} fraction
   * @param {number} layoutQuantity
   * @param {BuildingRepresentation} representation
   * @param {ColorDef} color
   * @param {boolean} [isMutable]
   */
  constructor(fraction, layoutQuantity, representation, color, isMutable = true) {
    super(BuildingType.NUMBER, layoutQuantity, isMutable);

    // @public {Fraction} - What fraction of pieces should it hold (stacks generally hold only a specific value).
    this.fraction = fraction;

    // @public {BuildingRepresentation} - What type of pieces it can hold
    this.representation = representation;

    // @public {ColorDef} - What color of pieces does it hold
    this.color = color;

    // @public {ObservableArrayDef.<ShapePiece>} - NOTE: These should only ever be popped/pushed.
    this.shapePieces = this.array;
  }

  /**
   * Returns the matrix transform (locally) for how to position a piece with the given properties.
   * @public
   *
   * @param {Fraction} fraction
   * @param {BuildingRepresentation} representation
   * @param {number} index
   * @returns {Matrix3}
   */
  static getShapeMatrix(fraction, representation, index) {
    return Matrix3.translationFromVector(BuildingRepresentation.getOffset(representation, index)).timesMatrix(ShapeContainer.getShapeMatrix(0, fraction, representation));
  }
}
fractionsCommon.register('ShapeStack', ShapeStack);
export default ShapeStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiZnJhY3Rpb25zQ29tbW9uIiwiQnVpbGRpbmdSZXByZXNlbnRhdGlvbiIsIkJ1aWxkaW5nVHlwZSIsIlNoYXBlQ29udGFpbmVyIiwiU3RhY2siLCJTaGFwZVN0YWNrIiwiY29uc3RydWN0b3IiLCJmcmFjdGlvbiIsImxheW91dFF1YW50aXR5IiwicmVwcmVzZW50YXRpb24iLCJjb2xvciIsImlzTXV0YWJsZSIsIk5VTUJFUiIsInNoYXBlUGllY2VzIiwiYXJyYXkiLCJnZXRTaGFwZU1hdHJpeCIsImluZGV4IiwidHJhbnNsYXRpb25Gcm9tVmVjdG9yIiwiZ2V0T2Zmc2V0IiwidGltZXNNYXRyaXgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNoYXBlU3RhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBzdGFjayB0aGF0IGhvbGRzIFNoYXBlUGllY2VzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgZnJhY3Rpb25zQ29tbW9uIGZyb20gJy4uLy4uL2ZyYWN0aW9uc0NvbW1vbi5qcyc7XHJcbmltcG9ydCBCdWlsZGluZ1JlcHJlc2VudGF0aW9uIGZyb20gJy4vQnVpbGRpbmdSZXByZXNlbnRhdGlvbi5qcyc7XHJcbmltcG9ydCBCdWlsZGluZ1R5cGUgZnJvbSAnLi9CdWlsZGluZ1R5cGUuanMnO1xyXG5pbXBvcnQgU2hhcGVDb250YWluZXIgZnJvbSAnLi9TaGFwZUNvbnRhaW5lci5qcyc7XHJcbmltcG9ydCBTdGFjayBmcm9tICcuL1N0YWNrLmpzJztcclxuXHJcbmNsYXNzIFNoYXBlU3RhY2sgZXh0ZW5kcyBTdGFjayB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtGcmFjdGlvbn0gZnJhY3Rpb25cclxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF5b3V0UXVhbnRpdHlcclxuICAgKiBAcGFyYW0ge0J1aWxkaW5nUmVwcmVzZW50YXRpb259IHJlcHJlc2VudGF0aW9uXHJcbiAgICogQHBhcmFtIHtDb2xvckRlZn0gY29sb3JcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc011dGFibGVdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGZyYWN0aW9uLCBsYXlvdXRRdWFudGl0eSwgcmVwcmVzZW50YXRpb24sIGNvbG9yLCBpc011dGFibGUgPSB0cnVlICkge1xyXG4gICAgc3VwZXIoIEJ1aWxkaW5nVHlwZS5OVU1CRVIsIGxheW91dFF1YW50aXR5LCBpc011dGFibGUgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtGcmFjdGlvbn0gLSBXaGF0IGZyYWN0aW9uIG9mIHBpZWNlcyBzaG91bGQgaXQgaG9sZCAoc3RhY2tzIGdlbmVyYWxseSBob2xkIG9ubHkgYSBzcGVjaWZpYyB2YWx1ZSkuXHJcbiAgICB0aGlzLmZyYWN0aW9uID0gZnJhY3Rpb247XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7QnVpbGRpbmdSZXByZXNlbnRhdGlvbn0gLSBXaGF0IHR5cGUgb2YgcGllY2VzIGl0IGNhbiBob2xkXHJcbiAgICB0aGlzLnJlcHJlc2VudGF0aW9uID0gcmVwcmVzZW50YXRpb247XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7Q29sb3JEZWZ9IC0gV2hhdCBjb2xvciBvZiBwaWVjZXMgZG9lcyBpdCBob2xkXHJcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7T2JzZXJ2YWJsZUFycmF5RGVmLjxTaGFwZVBpZWNlPn0gLSBOT1RFOiBUaGVzZSBzaG91bGQgb25seSBldmVyIGJlIHBvcHBlZC9wdXNoZWQuXHJcbiAgICB0aGlzLnNoYXBlUGllY2VzID0gdGhpcy5hcnJheTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIG1hdHJpeCB0cmFuc2Zvcm0gKGxvY2FsbHkpIGZvciBob3cgdG8gcG9zaXRpb24gYSBwaWVjZSB3aXRoIHRoZSBnaXZlbiBwcm9wZXJ0aWVzLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RnJhY3Rpb259IGZyYWN0aW9uXHJcbiAgICogQHBhcmFtIHtCdWlsZGluZ1JlcHJlc2VudGF0aW9ufSByZXByZXNlbnRhdGlvblxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXgzfVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRTaGFwZU1hdHJpeCggZnJhY3Rpb24sIHJlcHJlc2VudGF0aW9uLCBpbmRleCApIHtcclxuICAgIHJldHVybiBNYXRyaXgzLnRyYW5zbGF0aW9uRnJvbVZlY3RvciggQnVpbGRpbmdSZXByZXNlbnRhdGlvbi5nZXRPZmZzZXQoIHJlcHJlc2VudGF0aW9uLCBpbmRleCApICkudGltZXNNYXRyaXgoXHJcbiAgICAgIFNoYXBlQ29udGFpbmVyLmdldFNoYXBlTWF0cml4KCAwLCBmcmFjdGlvbiwgcmVwcmVzZW50YXRpb24gKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ1NoYXBlU3RhY2snLCBTaGFwZVN0YWNrICk7XHJcbmV4cG9ydCBkZWZhdWx0IFNoYXBlU3RhY2s7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFDaEUsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUM1QyxPQUFPQyxjQUFjLE1BQU0scUJBQXFCO0FBQ2hELE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBRTlCLE1BQU1DLFVBQVUsU0FBU0QsS0FBSyxDQUFDO0VBQzdCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxjQUFjLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxHQUFHLElBQUksRUFBRztJQUMvRSxLQUFLLENBQUVULFlBQVksQ0FBQ1UsTUFBTSxFQUFFSixjQUFjLEVBQUVHLFNBQVUsQ0FBQzs7SUFFdkQ7SUFDQSxJQUFJLENBQUNKLFFBQVEsR0FBR0EsUUFBUTs7SUFFeEI7SUFDQSxJQUFJLENBQUNFLGNBQWMsR0FBR0EsY0FBYzs7SUFFcEM7SUFDQSxJQUFJLENBQUNDLEtBQUssR0FBR0EsS0FBSzs7SUFFbEI7SUFDQSxJQUFJLENBQUNHLFdBQVcsR0FBRyxJQUFJLENBQUNDLEtBQUs7RUFDL0I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBT0MsY0FBY0EsQ0FBRVIsUUFBUSxFQUFFRSxjQUFjLEVBQUVPLEtBQUssRUFBRztJQUN2RCxPQUFPakIsT0FBTyxDQUFDa0IscUJBQXFCLENBQUVoQixzQkFBc0IsQ0FBQ2lCLFNBQVMsQ0FBRVQsY0FBYyxFQUFFTyxLQUFNLENBQUUsQ0FBQyxDQUFDRyxXQUFXLENBQzNHaEIsY0FBYyxDQUFDWSxjQUFjLENBQUUsQ0FBQyxFQUFFUixRQUFRLEVBQUVFLGNBQWUsQ0FDN0QsQ0FBQztFQUNIO0FBQ0Y7QUFFQVQsZUFBZSxDQUFDb0IsUUFBUSxDQUFFLFlBQVksRUFBRWYsVUFBVyxDQUFDO0FBQ3BELGVBQWVBLFVBQVUifQ==