// Copyright 2018-2020, University of Colorado Boulder

/**
 * A stack of ShapeGroups of a particular representation.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import fractionsCommon from '../../fractionsCommon.js';
import BuildingRepresentation from './BuildingRepresentation.js';
import BuildingType from './BuildingType.js';
import Stack from './Stack.js';
class ShapeGroupStack extends Stack {
  /**
   * @param {number} layoutQuantity
   * @param {BuildingRepresentation} representation
   * @param {boolean} hasExpansionButtons
   * @param {boolean} [isMutable]
   */
  constructor(layoutQuantity, representation, hasExpansionButtons, isMutable = true) {
    super(BuildingType.SHAPE, layoutQuantity, isMutable);

    // @public {BuildingRepresentation}
    this.representation = representation;

    // @public {ObservableArrayDef.<ShapeGroup>} - NOTE: These should only ever be popped/pushed.
    this.shapeGroups = this.array;

    // @public {boolean} - Whether the icons will have the + button to add another container.
    this.hasExpansionButtons = hasExpansionButtons;
  }

  /**
   * Returns the desired visual offset of an item in the stack from the base.
   * @public
   *
   * @param {BuildingRepresentation} representation
   * @param {number} index
   * @returns {Vector2}
   */
  static getOffset(representation, index) {
    assert && assert(_.includes(BuildingRepresentation.VALUES, representation));
    assert && assert(typeof index === 'number');
    return BuildingRepresentation.getOffset(representation, index);
  }
}
fractionsCommon.register('ShapeGroupStack', ShapeGroupStack);
export default ShapeGroupStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcmFjdGlvbnNDb21tb24iLCJCdWlsZGluZ1JlcHJlc2VudGF0aW9uIiwiQnVpbGRpbmdUeXBlIiwiU3RhY2siLCJTaGFwZUdyb3VwU3RhY2siLCJjb25zdHJ1Y3RvciIsImxheW91dFF1YW50aXR5IiwicmVwcmVzZW50YXRpb24iLCJoYXNFeHBhbnNpb25CdXR0b25zIiwiaXNNdXRhYmxlIiwiU0hBUEUiLCJzaGFwZUdyb3VwcyIsImFycmF5IiwiZ2V0T2Zmc2V0IiwiaW5kZXgiLCJhc3NlcnQiLCJfIiwiaW5jbHVkZXMiLCJWQUxVRVMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNoYXBlR3JvdXBTdGFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHN0YWNrIG9mIFNoYXBlR3JvdXBzIG9mIGEgcGFydGljdWxhciByZXByZXNlbnRhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBmcmFjdGlvbnNDb21tb24gZnJvbSAnLi4vLi4vZnJhY3Rpb25zQ29tbW9uLmpzJztcclxuaW1wb3J0IEJ1aWxkaW5nUmVwcmVzZW50YXRpb24gZnJvbSAnLi9CdWlsZGluZ1JlcHJlc2VudGF0aW9uLmpzJztcclxuaW1wb3J0IEJ1aWxkaW5nVHlwZSBmcm9tICcuL0J1aWxkaW5nVHlwZS5qcyc7XHJcbmltcG9ydCBTdGFjayBmcm9tICcuL1N0YWNrLmpzJztcclxuXHJcbmNsYXNzIFNoYXBlR3JvdXBTdGFjayBleHRlbmRzIFN0YWNrIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF5b3V0UXVhbnRpdHlcclxuICAgKiBAcGFyYW0ge0J1aWxkaW5nUmVwcmVzZW50YXRpb259IHJlcHJlc2VudGF0aW9uXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBoYXNFeHBhbnNpb25CdXR0b25zXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNNdXRhYmxlXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBsYXlvdXRRdWFudGl0eSwgcmVwcmVzZW50YXRpb24sIGhhc0V4cGFuc2lvbkJ1dHRvbnMsIGlzTXV0YWJsZSA9IHRydWUgKSB7XHJcbiAgICBzdXBlciggQnVpbGRpbmdUeXBlLlNIQVBFLCBsYXlvdXRRdWFudGl0eSwgaXNNdXRhYmxlICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7QnVpbGRpbmdSZXByZXNlbnRhdGlvbn1cclxuICAgIHRoaXMucmVwcmVzZW50YXRpb24gPSByZXByZXNlbnRhdGlvbjtcclxuXHJcbiAgICAvLyBAcHVibGljIHtPYnNlcnZhYmxlQXJyYXlEZWYuPFNoYXBlR3JvdXA+fSAtIE5PVEU6IFRoZXNlIHNob3VsZCBvbmx5IGV2ZXIgYmUgcG9wcGVkL3B1c2hlZC5cclxuICAgIHRoaXMuc2hhcGVHcm91cHMgPSB0aGlzLmFycmF5O1xyXG5cclxuICAgIC8vIEBwdWJsaWMge2Jvb2xlYW59IC0gV2hldGhlciB0aGUgaWNvbnMgd2lsbCBoYXZlIHRoZSArIGJ1dHRvbiB0byBhZGQgYW5vdGhlciBjb250YWluZXIuXHJcbiAgICB0aGlzLmhhc0V4cGFuc2lvbkJ1dHRvbnMgPSBoYXNFeHBhbnNpb25CdXR0b25zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgZGVzaXJlZCB2aXN1YWwgb2Zmc2V0IG9mIGFuIGl0ZW0gaW4gdGhlIHN0YWNrIGZyb20gdGhlIGJhc2UuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtCdWlsZGluZ1JlcHJlc2VudGF0aW9ufSByZXByZXNlbnRhdGlvblxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxyXG4gICAqIEByZXR1cm5zIHtWZWN0b3IyfVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRPZmZzZXQoIHJlcHJlc2VudGF0aW9uLCBpbmRleCApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uaW5jbHVkZXMoIEJ1aWxkaW5nUmVwcmVzZW50YXRpb24uVkFMVUVTLCByZXByZXNlbnRhdGlvbiApICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInICk7XHJcblxyXG4gICAgcmV0dXJuIEJ1aWxkaW5nUmVwcmVzZW50YXRpb24uZ2V0T2Zmc2V0KCByZXByZXNlbnRhdGlvbiwgaW5kZXggKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ1NoYXBlR3JvdXBTdGFjaycsIFNoYXBlR3JvdXBTdGFjayApO1xyXG5leHBvcnQgZGVmYXVsdCBTaGFwZUdyb3VwU3RhY2s7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0Msc0JBQXNCLE1BQU0sNkJBQTZCO0FBQ2hFLE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFDNUMsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFFOUIsTUFBTUMsZUFBZSxTQUFTRCxLQUFLLENBQUM7RUFDbEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLGNBQWMsRUFBRUMsY0FBYyxFQUFFQyxtQkFBbUIsRUFBRUMsU0FBUyxHQUFHLElBQUksRUFBRztJQUNuRixLQUFLLENBQUVQLFlBQVksQ0FBQ1EsS0FBSyxFQUFFSixjQUFjLEVBQUVHLFNBQVUsQ0FBQzs7SUFFdEQ7SUFDQSxJQUFJLENBQUNGLGNBQWMsR0FBR0EsY0FBYzs7SUFFcEM7SUFDQSxJQUFJLENBQUNJLFdBQVcsR0FBRyxJQUFJLENBQUNDLEtBQUs7O0lBRTdCO0lBQ0EsSUFBSSxDQUFDSixtQkFBbUIsR0FBR0EsbUJBQW1CO0VBQ2hEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPSyxTQUFTQSxDQUFFTixjQUFjLEVBQUVPLEtBQUssRUFBRztJQUN4Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVDLENBQUMsQ0FBQ0MsUUFBUSxDQUFFaEIsc0JBQXNCLENBQUNpQixNQUFNLEVBQUVYLGNBQWUsQ0FBRSxDQUFDO0lBQy9FUSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxPQUFPRCxLQUFLLEtBQUssUUFBUyxDQUFDO0lBRTdDLE9BQU9iLHNCQUFzQixDQUFDWSxTQUFTLENBQUVOLGNBQWMsRUFBRU8sS0FBTSxDQUFDO0VBQ2xFO0FBQ0Y7QUFFQWQsZUFBZSxDQUFDbUIsUUFBUSxDQUFFLGlCQUFpQixFQUFFZixlQUFnQixDQUFDO0FBQzlELGVBQWVBLGVBQWUifQ==