// Copyright 2019-2020, University of Colorado Boulder

/**
 * Main model for the matching game style screens
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DynamicProperty from '../../../../axon/js/DynamicProperty.js';
import Property from '../../../../axon/js/Property.js';
import fractionsCommon from '../../fractionsCommon.js';
import MatchingLevel from './MatchingLevel.js';
class MatchingGameModel {
  /**
   * @param {boolean} hasMixedNumbers
   * @param {boolean} [useShortTitle]
   */
  constructor(hasMixedNumbers, useShortTitle = false) {
    // @public {boolean}
    this.hasMixedNumbers = hasMixedNumbers;
    this.useShortTitle = useShortTitle;

    // @public {Property.<MatchingLevel|null>}
    this.levelProperty = new Property(null);

    // Let the level know it's selected
    this.levelProperty.lazyLink(level => {
      level && level.select();
    });

    // @public {Property.<MatchingChallenge|null}
    this.challengeProperty = new DynamicProperty(this.levelProperty, {
      derive: 'challengeProperty'
    });

    // @public {Property.<boolean>}
    this.timeVisibleProperty = new BooleanProperty(false);
    const descriptions = hasMixedNumbers ? MatchingLevel.getMixedLevelDescriptions() : MatchingLevel.getUnmixedLevelDescriptions();

    // @public {Array.<MatchingLevel>}
    this.levels = _.range(1, 9).map(number => new MatchingLevel(descriptions[number - 1], number, {
      timeVisibleProperty: this.timeVisibleProperty
    }));
  }

  /**
   * Steps the model forward in time.
   * @public
   *
   * @param {number} dt
   */
  step(dt) {
    this.challengeProperty.value && this.challengeProperty.value.step(dt);
  }

  /**
   * Resets the model.
   * @public
   */
  reset() {
    this.levelProperty.reset();
    this.timeVisibleProperty.reset();
    this.levels.forEach(level => level.reset());
  }
}
fractionsCommon.register('MatchingGameModel', MatchingGameModel);
export default MatchingGameModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEeW5hbWljUHJvcGVydHkiLCJQcm9wZXJ0eSIsImZyYWN0aW9uc0NvbW1vbiIsIk1hdGNoaW5nTGV2ZWwiLCJNYXRjaGluZ0dhbWVNb2RlbCIsImNvbnN0cnVjdG9yIiwiaGFzTWl4ZWROdW1iZXJzIiwidXNlU2hvcnRUaXRsZSIsImxldmVsUHJvcGVydHkiLCJsYXp5TGluayIsImxldmVsIiwic2VsZWN0IiwiY2hhbGxlbmdlUHJvcGVydHkiLCJkZXJpdmUiLCJ0aW1lVmlzaWJsZVByb3BlcnR5IiwiZGVzY3JpcHRpb25zIiwiZ2V0TWl4ZWRMZXZlbERlc2NyaXB0aW9ucyIsImdldFVubWl4ZWRMZXZlbERlc2NyaXB0aW9ucyIsImxldmVscyIsIl8iLCJyYW5nZSIsIm1hcCIsIm51bWJlciIsInN0ZXAiLCJkdCIsInZhbHVlIiwicmVzZXQiLCJmb3JFYWNoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYXRjaGluZ0dhbWVNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWluIG1vZGVsIGZvciB0aGUgbWF0Y2hpbmcgZ2FtZSBzdHlsZSBzY3JlZW5zXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IER5bmFtaWNQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0R5bmFtaWNQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IGZyYWN0aW9uc0NvbW1vbiBmcm9tICcuLi8uLi9mcmFjdGlvbnNDb21tb24uanMnO1xyXG5pbXBvcnQgTWF0Y2hpbmdMZXZlbCBmcm9tICcuL01hdGNoaW5nTGV2ZWwuanMnO1xyXG5cclxuY2xhc3MgTWF0Y2hpbmdHYW1lTW9kZWwge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzTWl4ZWROdW1iZXJzXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBbdXNlU2hvcnRUaXRsZV1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaGFzTWl4ZWROdW1iZXJzLCB1c2VTaG9ydFRpdGxlID0gZmFsc2UgKSB7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7Ym9vbGVhbn1cclxuICAgIHRoaXMuaGFzTWl4ZWROdW1iZXJzID0gaGFzTWl4ZWROdW1iZXJzO1xyXG4gICAgdGhpcy51c2VTaG9ydFRpdGxlID0gdXNlU2hvcnRUaXRsZTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48TWF0Y2hpbmdMZXZlbHxudWxsPn1cclxuICAgIHRoaXMubGV2ZWxQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggbnVsbCApO1xyXG5cclxuICAgIC8vIExldCB0aGUgbGV2ZWwga25vdyBpdCdzIHNlbGVjdGVkXHJcbiAgICB0aGlzLmxldmVsUHJvcGVydHkubGF6eUxpbmsoIGxldmVsID0+IHtcclxuICAgICAgbGV2ZWwgJiYgbGV2ZWwuc2VsZWN0KCk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPE1hdGNoaW5nQ2hhbGxlbmdlfG51bGx9XHJcbiAgICB0aGlzLmNoYWxsZW5nZVByb3BlcnR5ID0gbmV3IER5bmFtaWNQcm9wZXJ0eSggdGhpcy5sZXZlbFByb3BlcnR5LCB7XHJcbiAgICAgIGRlcml2ZTogJ2NoYWxsZW5nZVByb3BlcnR5J1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn1cclxuICAgIHRoaXMudGltZVZpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgY29uc3QgZGVzY3JpcHRpb25zID0gaGFzTWl4ZWROdW1iZXJzID8gTWF0Y2hpbmdMZXZlbC5nZXRNaXhlZExldmVsRGVzY3JpcHRpb25zKCkgOiBNYXRjaGluZ0xldmVsLmdldFVubWl4ZWRMZXZlbERlc2NyaXB0aW9ucygpO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge0FycmF5LjxNYXRjaGluZ0xldmVsPn1cclxuICAgIHRoaXMubGV2ZWxzID0gXy5yYW5nZSggMSwgOSApLm1hcCggbnVtYmVyID0+IG5ldyBNYXRjaGluZ0xldmVsKCBkZXNjcmlwdGlvbnNbIG51bWJlciAtIDEgXSwgbnVtYmVyLCB7XHJcbiAgICAgIHRpbWVWaXNpYmxlUHJvcGVydHk6IHRoaXMudGltZVZpc2libGVQcm9wZXJ0eVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGVwcyB0aGUgbW9kZWwgZm9yd2FyZCBpbiB0aW1lLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdFxyXG4gICAqL1xyXG4gIHN0ZXAoIGR0ICkge1xyXG4gICAgdGhpcy5jaGFsbGVuZ2VQcm9wZXJ0eS52YWx1ZSAmJiB0aGlzLmNoYWxsZW5nZVByb3BlcnR5LnZhbHVlLnN0ZXAoIGR0ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldHMgdGhlIG1vZGVsLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMubGV2ZWxQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy50aW1lVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmxldmVscy5mb3JFYWNoKCBsZXZlbCA9PiBsZXZlbC5yZXNldCgpICk7XHJcbiAgfVxyXG59XHJcblxyXG5mcmFjdGlvbnNDb21tb24ucmVnaXN0ZXIoICdNYXRjaGluZ0dhbWVNb2RlbCcsIE1hdGNoaW5nR2FtZU1vZGVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IE1hdGNoaW5nR2FtZU1vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFFOUMsTUFBTUMsaUJBQWlCLENBQUM7RUFDdEI7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxhQUFhLEdBQUcsS0FBSyxFQUFHO0lBRXBEO0lBQ0EsSUFBSSxDQUFDRCxlQUFlLEdBQUdBLGVBQWU7SUFDdEMsSUFBSSxDQUFDQyxhQUFhLEdBQUdBLGFBQWE7O0lBRWxDO0lBQ0EsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSVAsUUFBUSxDQUFFLElBQUssQ0FBQzs7SUFFekM7SUFDQSxJQUFJLENBQUNPLGFBQWEsQ0FBQ0MsUUFBUSxDQUFFQyxLQUFLLElBQUk7TUFDcENBLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxNQUFNLENBQUMsQ0FBQztJQUN6QixDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUlaLGVBQWUsQ0FBRSxJQUFJLENBQUNRLGFBQWEsRUFBRTtNQUNoRUssTUFBTSxFQUFFO0lBQ1YsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDQyxtQkFBbUIsR0FBRyxJQUFJZixlQUFlLENBQUUsS0FBTSxDQUFDO0lBRXZELE1BQU1nQixZQUFZLEdBQUdULGVBQWUsR0FBR0gsYUFBYSxDQUFDYSx5QkFBeUIsQ0FBQyxDQUFDLEdBQUdiLGFBQWEsQ0FBQ2MsMkJBQTJCLENBQUMsQ0FBQzs7SUFFOUg7SUFDQSxJQUFJLENBQUNDLE1BQU0sR0FBR0MsQ0FBQyxDQUFDQyxLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDQyxHQUFHLENBQUVDLE1BQU0sSUFBSSxJQUFJbkIsYUFBYSxDQUFFWSxZQUFZLENBQUVPLE1BQU0sR0FBRyxDQUFDLENBQUUsRUFBRUEsTUFBTSxFQUFFO01BQ2xHUixtQkFBbUIsRUFBRSxJQUFJLENBQUNBO0lBQzVCLENBQUUsQ0FBRSxDQUFDO0VBQ1A7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VTLElBQUlBLENBQUVDLEVBQUUsRUFBRztJQUNULElBQUksQ0FBQ1osaUJBQWlCLENBQUNhLEtBQUssSUFBSSxJQUFJLENBQUNiLGlCQUFpQixDQUFDYSxLQUFLLENBQUNGLElBQUksQ0FBRUMsRUFBRyxDQUFDO0VBQ3pFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VFLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ2xCLGFBQWEsQ0FBQ2tCLEtBQUssQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQ1osbUJBQW1CLENBQUNZLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQ1IsTUFBTSxDQUFDUyxPQUFPLENBQUVqQixLQUFLLElBQUlBLEtBQUssQ0FBQ2dCLEtBQUssQ0FBQyxDQUFFLENBQUM7RUFDL0M7QUFDRjtBQUVBeEIsZUFBZSxDQUFDMEIsUUFBUSxDQUFFLG1CQUFtQixFQUFFeEIsaUJBQWtCLENBQUM7QUFDbEUsZUFBZUEsaUJBQWlCIn0=