// Copyright 2019-2020, University of Colorado Boulder

/**
 * A match target near the top (holds a matched pair of pieces).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Property from '../../../../axon/js/Property.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import fractionsCommon from '../../fractionsCommon.js';
import MatchSpot from './MatchSpot.js';
class MatchTarget {
  constructor() {
    // @public {Property.<boolean>}
    this.isFilledProperty = new BooleanProperty(false);

    // @public {Array.<MatchSpot>}
    this.spots = _.range(0, 2).map(() => new MatchSpot({
      scale: 0.5,
      isTarget: true
    }));

    // @public {Property.<Bounds2>}
    this.targetBoundsProperty = new Property(Bounds2.EVERYTHING);

    // @public {Property.<number|null>}
    this.equalsXProperty = new Property(null);
    this.targetBoundsProperty.lazyLink(bounds => {
      if (this.equalsXProperty.value === null) {
        this.equalsXProperty.value = bounds.centerX;
      }
    });

    // @public {Bounds2|null} - Written by view elements so that relative positioning can be done
    this.equalsSignBounds = null;
  }

  /**
   * Handles layout within the target (of both pieces and the equals sign), so that there is an equal amount of
   * padding between the sides and each component, thus from left to right, we have:
   * (padding) leftPiece (padding) equals-sign (padding) rightPiece (padding)
   * @public
   *
   * @param {MatchPiece} leftPiece
   * @param {MatchPiece} rightPiece
   */
  layout(leftPiece, rightPiece) {
    let leftTargetScale = leftPiece.getIdealTargetScale();
    let rightTargetScale = rightPiece.getIdealTargetScale();
    const totalWidth = this.targetBoundsProperty.value.width;
    let leftWidth = leftTargetScale * leftPiece.localBounds.width;
    let rightWidth = rightTargetScale * rightPiece.localBounds.width;
    const equalsWidth = this.equalsSignBounds.width;
    const minimumTotalPadding = 4;
    let totalPaddingWidth = totalWidth - leftWidth - rightWidth - equalsWidth;
    if (totalPaddingWidth < minimumTotalPadding) {
      const availableWidth = totalWidth - equalsWidth - minimumTotalPadding;
      const usedWidth = leftWidth + rightWidth;
      const scaleFactor = availableWidth / usedWidth;
      leftTargetScale *= scaleFactor;
      rightTargetScale *= scaleFactor;
      leftWidth = leftTargetScale * leftPiece.localBounds.width;
      rightWidth = rightTargetScale * rightPiece.localBounds.width;
      totalPaddingWidth = totalWidth - leftWidth - rightWidth - equalsWidth;
    }
    leftPiece.targetScale = leftTargetScale;
    rightPiece.targetScale = rightTargetScale;
    const padding = totalPaddingWidth / 4;
    const leftX = this.targetBoundsProperty.value.left + padding + leftWidth / 2;
    const equalsX = leftX + leftWidth / 2 + padding + equalsWidth / 2;
    const rightX = equalsX + equalsWidth / 2 + padding + rightWidth / 2;
    this.equalsXProperty.value = equalsX;
    this.spots[0].positionProperty.value = new Vector2(leftX, this.spots[0].positionProperty.value.y);
    this.spots[1].positionProperty.value = new Vector2(rightX, this.spots[1].positionProperty.value.y);
  }
}
fractionsCommon.register('MatchTarget', MatchTarget);
export default MatchTarget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJQcm9wZXJ0eSIsIkJvdW5kczIiLCJWZWN0b3IyIiwiZnJhY3Rpb25zQ29tbW9uIiwiTWF0Y2hTcG90IiwiTWF0Y2hUYXJnZXQiLCJjb25zdHJ1Y3RvciIsImlzRmlsbGVkUHJvcGVydHkiLCJzcG90cyIsIl8iLCJyYW5nZSIsIm1hcCIsInNjYWxlIiwiaXNUYXJnZXQiLCJ0YXJnZXRCb3VuZHNQcm9wZXJ0eSIsIkVWRVJZVEhJTkciLCJlcXVhbHNYUHJvcGVydHkiLCJsYXp5TGluayIsImJvdW5kcyIsInZhbHVlIiwiY2VudGVyWCIsImVxdWFsc1NpZ25Cb3VuZHMiLCJsYXlvdXQiLCJsZWZ0UGllY2UiLCJyaWdodFBpZWNlIiwibGVmdFRhcmdldFNjYWxlIiwiZ2V0SWRlYWxUYXJnZXRTY2FsZSIsInJpZ2h0VGFyZ2V0U2NhbGUiLCJ0b3RhbFdpZHRoIiwid2lkdGgiLCJsZWZ0V2lkdGgiLCJsb2NhbEJvdW5kcyIsInJpZ2h0V2lkdGgiLCJlcXVhbHNXaWR0aCIsIm1pbmltdW1Ub3RhbFBhZGRpbmciLCJ0b3RhbFBhZGRpbmdXaWR0aCIsImF2YWlsYWJsZVdpZHRoIiwidXNlZFdpZHRoIiwic2NhbGVGYWN0b3IiLCJ0YXJnZXRTY2FsZSIsInBhZGRpbmciLCJsZWZ0WCIsImxlZnQiLCJlcXVhbHNYIiwicmlnaHRYIiwicG9zaXRpb25Qcm9wZXJ0eSIsInkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1hdGNoVGFyZ2V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgbWF0Y2ggdGFyZ2V0IG5lYXIgdGhlIHRvcCAoaG9sZHMgYSBtYXRjaGVkIHBhaXIgb2YgcGllY2VzKS5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgZnJhY3Rpb25zQ29tbW9uIGZyb20gJy4uLy4uL2ZyYWN0aW9uc0NvbW1vbi5qcyc7XHJcbmltcG9ydCBNYXRjaFNwb3QgZnJvbSAnLi9NYXRjaFNwb3QuanMnO1xyXG5cclxuY2xhc3MgTWF0Y2hUYXJnZXQge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn1cclxuICAgIHRoaXMuaXNGaWxsZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7QXJyYXkuPE1hdGNoU3BvdD59XHJcbiAgICB0aGlzLnNwb3RzID0gXy5yYW5nZSggMCwgMiApLm1hcCggKCkgPT4gbmV3IE1hdGNoU3BvdCgge1xyXG4gICAgICBzY2FsZTogMC41LFxyXG4gICAgICBpc1RhcmdldDogdHJ1ZVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPEJvdW5kczI+fVxyXG4gICAgdGhpcy50YXJnZXRCb3VuZHNQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggQm91bmRzMi5FVkVSWVRISU5HICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPG51bWJlcnxudWxsPn1cclxuICAgIHRoaXMuZXF1YWxzWFByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBudWxsICk7XHJcbiAgICB0aGlzLnRhcmdldEJvdW5kc1Byb3BlcnR5LmxhenlMaW5rKCBib3VuZHMgPT4ge1xyXG4gICAgICBpZiAoIHRoaXMuZXF1YWxzWFByb3BlcnR5LnZhbHVlID09PSBudWxsICkge1xyXG4gICAgICAgIHRoaXMuZXF1YWxzWFByb3BlcnR5LnZhbHVlID0gYm91bmRzLmNlbnRlclg7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtCb3VuZHMyfG51bGx9IC0gV3JpdHRlbiBieSB2aWV3IGVsZW1lbnRzIHNvIHRoYXQgcmVsYXRpdmUgcG9zaXRpb25pbmcgY2FuIGJlIGRvbmVcclxuICAgIHRoaXMuZXF1YWxzU2lnbkJvdW5kcyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGVzIGxheW91dCB3aXRoaW4gdGhlIHRhcmdldCAob2YgYm90aCBwaWVjZXMgYW5kIHRoZSBlcXVhbHMgc2lnbiksIHNvIHRoYXQgdGhlcmUgaXMgYW4gZXF1YWwgYW1vdW50IG9mXHJcbiAgICogcGFkZGluZyBiZXR3ZWVuIHRoZSBzaWRlcyBhbmQgZWFjaCBjb21wb25lbnQsIHRodXMgZnJvbSBsZWZ0IHRvIHJpZ2h0LCB3ZSBoYXZlOlxyXG4gICAqIChwYWRkaW5nKSBsZWZ0UGllY2UgKHBhZGRpbmcpIGVxdWFscy1zaWduIChwYWRkaW5nKSByaWdodFBpZWNlIChwYWRkaW5nKVxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7TWF0Y2hQaWVjZX0gbGVmdFBpZWNlXHJcbiAgICogQHBhcmFtIHtNYXRjaFBpZWNlfSByaWdodFBpZWNlXHJcbiAgICovXHJcbiAgbGF5b3V0KCBsZWZ0UGllY2UsIHJpZ2h0UGllY2UgKSB7XHJcbiAgICBsZXQgbGVmdFRhcmdldFNjYWxlID0gbGVmdFBpZWNlLmdldElkZWFsVGFyZ2V0U2NhbGUoKTtcclxuICAgIGxldCByaWdodFRhcmdldFNjYWxlID0gcmlnaHRQaWVjZS5nZXRJZGVhbFRhcmdldFNjYWxlKCk7XHJcblxyXG4gICAgY29uc3QgdG90YWxXaWR0aCA9IHRoaXMudGFyZ2V0Qm91bmRzUHJvcGVydHkudmFsdWUud2lkdGg7XHJcbiAgICBsZXQgbGVmdFdpZHRoID0gbGVmdFRhcmdldFNjYWxlICogbGVmdFBpZWNlLmxvY2FsQm91bmRzLndpZHRoO1xyXG4gICAgbGV0IHJpZ2h0V2lkdGggPSByaWdodFRhcmdldFNjYWxlICogcmlnaHRQaWVjZS5sb2NhbEJvdW5kcy53aWR0aDtcclxuICAgIGNvbnN0IGVxdWFsc1dpZHRoID0gdGhpcy5lcXVhbHNTaWduQm91bmRzLndpZHRoO1xyXG5cclxuICAgIGNvbnN0IG1pbmltdW1Ub3RhbFBhZGRpbmcgPSA0O1xyXG5cclxuICAgIGxldCB0b3RhbFBhZGRpbmdXaWR0aCA9IHRvdGFsV2lkdGggLSBsZWZ0V2lkdGggLSByaWdodFdpZHRoIC0gZXF1YWxzV2lkdGg7XHJcbiAgICBpZiAoIHRvdGFsUGFkZGluZ1dpZHRoIDwgbWluaW11bVRvdGFsUGFkZGluZyApIHtcclxuICAgICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSB0b3RhbFdpZHRoIC0gZXF1YWxzV2lkdGggLSBtaW5pbXVtVG90YWxQYWRkaW5nO1xyXG4gICAgICBjb25zdCB1c2VkV2lkdGggPSBsZWZ0V2lkdGggKyByaWdodFdpZHRoO1xyXG4gICAgICBjb25zdCBzY2FsZUZhY3RvciA9IGF2YWlsYWJsZVdpZHRoIC8gdXNlZFdpZHRoO1xyXG5cclxuICAgICAgbGVmdFRhcmdldFNjYWxlICo9IHNjYWxlRmFjdG9yO1xyXG4gICAgICByaWdodFRhcmdldFNjYWxlICo9IHNjYWxlRmFjdG9yO1xyXG5cclxuICAgICAgbGVmdFdpZHRoID0gbGVmdFRhcmdldFNjYWxlICogbGVmdFBpZWNlLmxvY2FsQm91bmRzLndpZHRoO1xyXG4gICAgICByaWdodFdpZHRoID0gcmlnaHRUYXJnZXRTY2FsZSAqIHJpZ2h0UGllY2UubG9jYWxCb3VuZHMud2lkdGg7XHJcbiAgICAgIHRvdGFsUGFkZGluZ1dpZHRoID0gdG90YWxXaWR0aCAtIGxlZnRXaWR0aCAtIHJpZ2h0V2lkdGggLSBlcXVhbHNXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBsZWZ0UGllY2UudGFyZ2V0U2NhbGUgPSBsZWZ0VGFyZ2V0U2NhbGU7XHJcbiAgICByaWdodFBpZWNlLnRhcmdldFNjYWxlID0gcmlnaHRUYXJnZXRTY2FsZTtcclxuXHJcbiAgICBjb25zdCBwYWRkaW5nID0gdG90YWxQYWRkaW5nV2lkdGggLyA0O1xyXG5cclxuICAgIGNvbnN0IGxlZnRYID0gdGhpcy50YXJnZXRCb3VuZHNQcm9wZXJ0eS52YWx1ZS5sZWZ0ICsgcGFkZGluZyArIGxlZnRXaWR0aCAvIDI7XHJcbiAgICBjb25zdCBlcXVhbHNYID0gbGVmdFggKyBsZWZ0V2lkdGggLyAyICsgcGFkZGluZyArIGVxdWFsc1dpZHRoIC8gMjtcclxuICAgIGNvbnN0IHJpZ2h0WCA9IGVxdWFsc1ggKyBlcXVhbHNXaWR0aCAvIDIgKyBwYWRkaW5nICsgcmlnaHRXaWR0aCAvIDI7XHJcblxyXG4gICAgdGhpcy5lcXVhbHNYUHJvcGVydHkudmFsdWUgPSBlcXVhbHNYO1xyXG4gICAgdGhpcy5zcG90c1sgMCBdLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgPSBuZXcgVmVjdG9yMiggbGVmdFgsIHRoaXMuc3BvdHNbIDAgXS5wb3NpdGlvblByb3BlcnR5LnZhbHVlLnkgKTtcclxuICAgIHRoaXMuc3BvdHNbIDEgXS5wb3NpdGlvblByb3BlcnR5LnZhbHVlID0gbmV3IFZlY3RvcjIoIHJpZ2h0WCwgdGhpcy5zcG90c1sgMSBdLnBvc2l0aW9uUHJvcGVydHkudmFsdWUueSApO1xyXG4gIH1cclxufVxyXG5cclxuZnJhY3Rpb25zQ29tbW9uLnJlZ2lzdGVyKCAnTWF0Y2hUYXJnZXQnLCBNYXRjaFRhcmdldCApO1xyXG5leHBvcnQgZGVmYXVsdCBNYXRjaFRhcmdldDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNw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