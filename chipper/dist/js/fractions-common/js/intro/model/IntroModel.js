// Copyright 2018-2020, University of Colorado Boulder

/**
 * Full model for the "Intro" simulation
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import fractionsCommon from '../../fractionsCommon.js';
import ContainerSetModel from './ContainerSetModel.js';
class IntroModel extends ContainerSetModel {
  /**
   * @param {boolean} allowMixedNumbers
   * @param {Object} [options]
   */
  constructor(allowMixedNumbers, options) {
    options = merge({
      maxContainers: allowMixedNumbers ? 4 : 6
    }, options);
    super(options);

    // @public {boolean} - Whether to allow the display of the fraction as a mixed number
    this.allowMixedNumbers = allowMixedNumbers;

    // @public {Property.<boolean>} - Whether to show mixed numbers or not
    this.showMixedNumbersProperty = new BooleanProperty(false);

    // @public {Property.<boolean>} - Whether the accordion box showing a mixed-number equivalence is expanded.
    this.mixedNumbersBoxExpandedProperty = new BooleanProperty(true);
  }

  /**
   * Resets the model.
   * @public
   * @override
   */
  reset() {
    this.showMixedNumbersProperty.reset();
    this.mixedNumbersBoxExpandedProperty.reset();
    super.reset();
  }
}
fractionsCommon.register('IntroModel', IntroModel);
export default IntroModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJtZXJnZSIsImZyYWN0aW9uc0NvbW1vbiIsIkNvbnRhaW5lclNldE1vZGVsIiwiSW50cm9Nb2RlbCIsImNvbnN0cnVjdG9yIiwiYWxsb3dNaXhlZE51bWJlcnMiLCJvcHRpb25zIiwibWF4Q29udGFpbmVycyIsInNob3dNaXhlZE51bWJlcnNQcm9wZXJ0eSIsIm1peGVkTnVtYmVyc0JveEV4cGFuZGVkUHJvcGVydHkiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSW50cm9Nb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBGdWxsIG1vZGVsIGZvciB0aGUgXCJJbnRyb1wiIHNpbXVsYXRpb25cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGZyYWN0aW9uc0NvbW1vbiBmcm9tICcuLi8uLi9mcmFjdGlvbnNDb21tb24uanMnO1xyXG5pbXBvcnQgQ29udGFpbmVyU2V0TW9kZWwgZnJvbSAnLi9Db250YWluZXJTZXRNb2RlbC5qcyc7XHJcblxyXG5jbGFzcyBJbnRyb01vZGVsIGV4dGVuZHMgQ29udGFpbmVyU2V0TW9kZWwge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dNaXhlZE51bWJlcnNcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGFsbG93TWl4ZWROdW1iZXJzLCBvcHRpb25zICkge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG1heENvbnRhaW5lcnM6IGFsbG93TWl4ZWROdW1iZXJzID8gNCA6IDZcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge2Jvb2xlYW59IC0gV2hldGhlciB0byBhbGxvdyB0aGUgZGlzcGxheSBvZiB0aGUgZnJhY3Rpb24gYXMgYSBtaXhlZCBudW1iZXJcclxuICAgIHRoaXMuYWxsb3dNaXhlZE51bWJlcnMgPSBhbGxvd01peGVkTnVtYmVycztcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48Ym9vbGVhbj59IC0gV2hldGhlciB0byBzaG93IG1peGVkIG51bWJlcnMgb3Igbm90XHJcbiAgICB0aGlzLnNob3dNaXhlZE51bWJlcnNQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPGJvb2xlYW4+fSAtIFdoZXRoZXIgdGhlIGFjY29yZGlvbiBib3ggc2hvd2luZyBhIG1peGVkLW51bWJlciBlcXVpdmFsZW5jZSBpcyBleHBhbmRlZC5cclxuICAgIHRoaXMubWl4ZWROdW1iZXJzQm94RXhwYW5kZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyB0aGUgbW9kZWwuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5zaG93TWl4ZWROdW1iZXJzUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubWl4ZWROdW1iZXJzQm94RXhwYW5kZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG5cclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mcmFjdGlvbnNDb21tb24ucmVnaXN0ZXIoICdJbnRyb01vZGVsJywgSW50cm9Nb2RlbCApO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRyb01vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFFdEQsTUFBTUMsVUFBVSxTQUFTRCxpQkFBaUIsQ0FBQztFQUN6QztBQUNGO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxpQkFBaUIsRUFBRUMsT0FBTyxFQUFHO0lBQ3hDQSxPQUFPLEdBQUdOLEtBQUssQ0FBRTtNQUNmTyxhQUFhLEVBQUVGLGlCQUFpQixHQUFHLENBQUMsR0FBRztJQUN6QyxDQUFDLEVBQUVDLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUEsT0FBUSxDQUFDOztJQUVoQjtJQUNBLElBQUksQ0FBQ0QsaUJBQWlCLEdBQUdBLGlCQUFpQjs7SUFFMUM7SUFDQSxJQUFJLENBQUNHLHdCQUF3QixHQUFHLElBQUlULGVBQWUsQ0FBRSxLQUFNLENBQUM7O0lBRTVEO0lBQ0EsSUFBSSxDQUFDVSwrQkFBK0IsR0FBRyxJQUFJVixlQUFlLENBQUUsSUFBSyxDQUFDO0VBQ3BFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRVcsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxDQUFDRix3QkFBd0IsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDRCwrQkFBK0IsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFFNUMsS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztFQUNmO0FBQ0Y7QUFFQVQsZUFBZSxDQUFDVSxRQUFRLENBQUUsWUFBWSxFQUFFUixVQUFXLENBQUM7QUFDcEQsZUFBZUEsVUFBVSJ9