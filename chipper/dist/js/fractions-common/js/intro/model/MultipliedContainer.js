// Copyright 2018-2020, University of Colorado Boulder

/**
 * A container that behaves like another (source) container, but with each cell split into X others (the multiplier).
 *
 * NOTE: These are kept around for the life of the source container, so they won't need to be disposed.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import fractionsCommon from '../../fractionsCommon.js';
import Container from './Container.js';
class MultipliedContainer extends Container {
  /**
   * @param {Container} container
   * @param {Property.<number>} multiplierProperty
   */
  constructor(container, multiplierProperty) {
    super();

    // @private {Container}
    this.container = container;

    // @private {Property.<number>}
    this.multiplierProperty = multiplierProperty;
    const updateListener = this.update.bind(this);
    container.cells.forEach(cell => {
      cell.isFilledProperty.lazyLink(updateListener);
    });
    container.cells.addItemAddedListener(cell => {
      cell.isFilledProperty.lazyLink(updateListener);
      this.update();
    });
    container.cells.addItemRemovedListener(cell => {
      cell.isFilledProperty.unlink(updateListener);
      this.update();
    });
    multiplierProperty.lazyLink(updateListener);
    this.update();
  }

  /**
   * Updates the status of this entire container, based on its source container.
   * @private
   */
  update() {
    const multiplier = this.multiplierProperty.value;
    const quantity = this.container.cells.length * multiplier;

    // Contain the correct number of cells
    if (this.cells.length > quantity) {
      this.removeCells(this.cells.length - quantity);
    }
    if (quantity > this.cells.length) {
      this.addCells(quantity - this.cells.length);
    }

    // Synchronize the cells
    for (let i = 0; i < this.container.cells.length; i++) {
      const filled = this.container.cells.get(i).isFilledProperty.value;
      for (let j = 0; j < multiplier; j++) {
        this.cells.get(i * multiplier + j).setFilled(filled);
      }
    }
  }
}
fractionsCommon.register('MultipliedContainer', MultipliedContainer);
export default MultipliedContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcmFjdGlvbnNDb21tb24iLCJDb250YWluZXIiLCJNdWx0aXBsaWVkQ29udGFpbmVyIiwiY29uc3RydWN0b3IiLCJjb250YWluZXIiLCJtdWx0aXBsaWVyUHJvcGVydHkiLCJ1cGRhdGVMaXN0ZW5lciIsInVwZGF0ZSIsImJpbmQiLCJjZWxscyIsImZvckVhY2giLCJjZWxsIiwiaXNGaWxsZWRQcm9wZXJ0eSIsImxhenlMaW5rIiwiYWRkSXRlbUFkZGVkTGlzdGVuZXIiLCJhZGRJdGVtUmVtb3ZlZExpc3RlbmVyIiwidW5saW5rIiwibXVsdGlwbGllciIsInZhbHVlIiwicXVhbnRpdHkiLCJsZW5ndGgiLCJyZW1vdmVDZWxscyIsImFkZENlbGxzIiwiaSIsImZpbGxlZCIsImdldCIsImoiLCJzZXRGaWxsZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk11bHRpcGxpZWRDb250YWluZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBjb250YWluZXIgdGhhdCBiZWhhdmVzIGxpa2UgYW5vdGhlciAoc291cmNlKSBjb250YWluZXIsIGJ1dCB3aXRoIGVhY2ggY2VsbCBzcGxpdCBpbnRvIFggb3RoZXJzICh0aGUgbXVsdGlwbGllcikuXHJcbiAqXHJcbiAqIE5PVEU6IFRoZXNlIGFyZSBrZXB0IGFyb3VuZCBmb3IgdGhlIGxpZmUgb2YgdGhlIHNvdXJjZSBjb250YWluZXIsIHNvIHRoZXkgd29uJ3QgbmVlZCB0byBiZSBkaXNwb3NlZC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBmcmFjdGlvbnNDb21tb24gZnJvbSAnLi4vLi4vZnJhY3Rpb25zQ29tbW9uLmpzJztcclxuaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL0NvbnRhaW5lci5qcyc7XHJcblxyXG5jbGFzcyBNdWx0aXBsaWVkQ29udGFpbmVyIGV4dGVuZHMgQ29udGFpbmVyIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge0NvbnRhaW5lcn0gY29udGFpbmVyXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gbXVsdGlwbGllclByb3BlcnR5XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvbnRhaW5lciwgbXVsdGlwbGllclByb3BlcnR5ICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7Q29udGFpbmVyfVxyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge1Byb3BlcnR5LjxudW1iZXI+fVxyXG4gICAgdGhpcy5tdWx0aXBsaWVyUHJvcGVydHkgPSBtdWx0aXBsaWVyUHJvcGVydHk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlTGlzdGVuZXIgPSB0aGlzLnVwZGF0ZS5iaW5kKCB0aGlzICk7XHJcblxyXG4gICAgY29udGFpbmVyLmNlbGxzLmZvckVhY2goIGNlbGwgPT4ge1xyXG4gICAgICBjZWxsLmlzRmlsbGVkUHJvcGVydHkubGF6eUxpbmsoIHVwZGF0ZUxpc3RlbmVyICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29udGFpbmVyLmNlbGxzLmFkZEl0ZW1BZGRlZExpc3RlbmVyKCBjZWxsID0+IHtcclxuICAgICAgY2VsbC5pc0ZpbGxlZFByb3BlcnR5LmxhenlMaW5rKCB1cGRhdGVMaXN0ZW5lciApO1xyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfSApO1xyXG4gICAgY29udGFpbmVyLmNlbGxzLmFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIoIGNlbGwgPT4ge1xyXG4gICAgICBjZWxsLmlzRmlsbGVkUHJvcGVydHkudW5saW5rKCB1cGRhdGVMaXN0ZW5lciApO1xyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfSApO1xyXG4gICAgbXVsdGlwbGllclByb3BlcnR5LmxhenlMaW5rKCB1cGRhdGVMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIHRoZSBzdGF0dXMgb2YgdGhpcyBlbnRpcmUgY29udGFpbmVyLCBiYXNlZCBvbiBpdHMgc291cmNlIGNvbnRhaW5lci5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGNvbnN0IG11bHRpcGxpZXIgPSB0aGlzLm11bHRpcGxpZXJQcm9wZXJ0eS52YWx1ZTtcclxuICAgIGNvbnN0IHF1YW50aXR5ID0gdGhpcy5jb250YWluZXIuY2VsbHMubGVuZ3RoICogbXVsdGlwbGllcjtcclxuXHJcbiAgICAvLyBDb250YWluIHRoZSBjb3JyZWN0IG51bWJlciBvZiBjZWxsc1xyXG4gICAgaWYgKCB0aGlzLmNlbGxzLmxlbmd0aCA+IHF1YW50aXR5ICkge1xyXG4gICAgICB0aGlzLnJlbW92ZUNlbGxzKCB0aGlzLmNlbGxzLmxlbmd0aCAtIHF1YW50aXR5ICk7XHJcbiAgICB9XHJcbiAgICBpZiAoIHF1YW50aXR5ID4gdGhpcy5jZWxscy5sZW5ndGggKSB7XHJcbiAgICAgIHRoaXMuYWRkQ2VsbHMoIHF1YW50aXR5IC0gdGhpcy5jZWxscy5sZW5ndGggKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTeW5jaHJvbml6ZSB0aGUgY2VsbHNcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY29udGFpbmVyLmNlbGxzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBjb25zdCBmaWxsZWQgPSB0aGlzLmNvbnRhaW5lci5jZWxscy5nZXQoIGkgKS5pc0ZpbGxlZFByb3BlcnR5LnZhbHVlO1xyXG4gICAgICBmb3IgKCBsZXQgaiA9IDA7IGogPCBtdWx0aXBsaWVyOyBqKysgKSB7XHJcbiAgICAgICAgdGhpcy5jZWxscy5nZXQoIGkgKiBtdWx0aXBsaWVyICsgaiApLnNldEZpbGxlZCggZmlsbGVkICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ011bHRpcGxpZWRDb250YWluZXInLCBNdWx0aXBsaWVkQ29udGFpbmVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IE11bHRpcGxpZWRDb250YWluZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFFdEMsTUFBTUMsbUJBQW1CLFNBQVNELFNBQVMsQ0FBQztFQUMxQztBQUNGO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxTQUFTLEVBQUVDLGtCQUFrQixFQUFHO0lBQzNDLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDRCxTQUFTLEdBQUdBLFNBQVM7O0lBRTFCO0lBQ0EsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR0Esa0JBQWtCO0lBRTVDLE1BQU1DLGNBQWMsR0FBRyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFFLElBQUssQ0FBQztJQUUvQ0osU0FBUyxDQUFDSyxLQUFLLENBQUNDLE9BQU8sQ0FBRUMsSUFBSSxJQUFJO01BQy9CQSxJQUFJLENBQUNDLGdCQUFnQixDQUFDQyxRQUFRLENBQUVQLGNBQWUsQ0FBQztJQUNsRCxDQUFFLENBQUM7SUFFSEYsU0FBUyxDQUFDSyxLQUFLLENBQUNLLG9CQUFvQixDQUFFSCxJQUFJLElBQUk7TUFDNUNBLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNDLFFBQVEsQ0FBRVAsY0FBZSxDQUFDO01BQ2hELElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUM7SUFDZixDQUFFLENBQUM7SUFDSEgsU0FBUyxDQUFDSyxLQUFLLENBQUNNLHNCQUFzQixDQUFFSixJQUFJLElBQUk7TUFDOUNBLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNJLE1BQU0sQ0FBRVYsY0FBZSxDQUFDO01BQzlDLElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUM7SUFDZixDQUFFLENBQUM7SUFDSEYsa0JBQWtCLENBQUNRLFFBQVEsQ0FBRVAsY0FBZSxDQUFDO0lBRTdDLElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUM7RUFDZjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFQSxNQUFNQSxDQUFBLEVBQUc7SUFDUCxNQUFNVSxVQUFVLEdBQUcsSUFBSSxDQUFDWixrQkFBa0IsQ0FBQ2EsS0FBSztJQUNoRCxNQUFNQyxRQUFRLEdBQUcsSUFBSSxDQUFDZixTQUFTLENBQUNLLEtBQUssQ0FBQ1csTUFBTSxHQUFHSCxVQUFVOztJQUV6RDtJQUNBLElBQUssSUFBSSxDQUFDUixLQUFLLENBQUNXLE1BQU0sR0FBR0QsUUFBUSxFQUFHO01BQ2xDLElBQUksQ0FBQ0UsV0FBVyxDQUFFLElBQUksQ0FBQ1osS0FBSyxDQUFDVyxNQUFNLEdBQUdELFFBQVMsQ0FBQztJQUNsRDtJQUNBLElBQUtBLFFBQVEsR0FBRyxJQUFJLENBQUNWLEtBQUssQ0FBQ1csTUFBTSxFQUFHO01BQ2xDLElBQUksQ0FBQ0UsUUFBUSxDQUFFSCxRQUFRLEdBQUcsSUFBSSxDQUFDVixLQUFLLENBQUNXLE1BQU8sQ0FBQztJQUMvQzs7SUFFQTtJQUNBLEtBQU0sSUFBSUcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ25CLFNBQVMsQ0FBQ0ssS0FBSyxDQUFDVyxNQUFNLEVBQUVHLENBQUMsRUFBRSxFQUFHO01BQ3RELE1BQU1DLE1BQU0sR0FBRyxJQUFJLENBQUNwQixTQUFTLENBQUNLLEtBQUssQ0FBQ2dCLEdBQUcsQ0FBRUYsQ0FBRSxDQUFDLENBQUNYLGdCQUFnQixDQUFDTSxLQUFLO01BQ25FLEtBQU0sSUFBSVEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHVCxVQUFVLEVBQUVTLENBQUMsRUFBRSxFQUFHO1FBQ3JDLElBQUksQ0FBQ2pCLEtBQUssQ0FBQ2dCLEdBQUcsQ0FBRUYsQ0FBQyxHQUFHTixVQUFVLEdBQUdTLENBQUUsQ0FBQyxDQUFDQyxTQUFTLENBQUVILE1BQU8sQ0FBQztNQUMxRDtJQUNGO0VBQ0Y7QUFDRjtBQUVBeEIsZUFBZSxDQUFDNEIsUUFBUSxDQUFFLHFCQUFxQixFQUFFMUIsbUJBQW9CLENBQUM7QUFDdEUsZUFBZUEsbUJBQW1CIn0=