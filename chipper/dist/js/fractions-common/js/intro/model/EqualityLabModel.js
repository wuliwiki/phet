// Copyright 2018-2020, University of Colorado Boulder

/**
 * Model for the "Equality Lab" screen of Fractions: Equality
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import fractionsCommon from '../../fractionsCommon.js';
import ContainerSetModel from './ContainerSetModel.js';
import IntroRepresentation from './IntroRepresentation.js';
import MultipliedContainer from './MultipliedContainer.js';
class EqualityLabModel extends ContainerSetModel {
  constructor() {
    super({
      representations: [IntroRepresentation.CIRCLE, IntroRepresentation.HORIZONTAL_BAR, IntroRepresentation.VERTICAL_BAR, IntroRepresentation.BEAKER],
      initialContainerCount: 4,
      maxContainers: 4,
      maxDenominator: 6,
      isCompact: true,
      bucketWidth: 280
    });

    // @public {Property.<boolean>} - Whether the right side should show a number line instead of the normal
    // representation.
    this.showNumberLineProperty = new BooleanProperty(false);

    // @public {Property.<number>} - The multiplier used to construct the "parallel" fraction
    this.multiplierProperty = new NumberProperty(2, {
      range: new Range(1, 3)
    });

    // @public {Container[]}
    this.multipliedContainers = this.containers.map(container => new MultipliedContainer(container, this.multiplierProperty));
  }

  /**
   * Resets the model.
   * @public
   * @override
   */
  reset() {
    this.showNumberLineProperty.reset();
    this.multiplierProperty.reset();
    super.reset();
  }
}
fractionsCommon.register('EqualityLabModel', EqualityLabModel);
export default EqualityLabModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiZnJhY3Rpb25zQ29tbW9uIiwiQ29udGFpbmVyU2V0TW9kZWwiLCJJbnRyb1JlcHJlc2VudGF0aW9uIiwiTXVsdGlwbGllZENvbnRhaW5lciIsIkVxdWFsaXR5TGFiTW9kZWwiLCJjb25zdHJ1Y3RvciIsInJlcHJlc2VudGF0aW9ucyIsIkNJUkNMRSIsIkhPUklaT05UQUxfQkFSIiwiVkVSVElDQUxfQkFSIiwiQkVBS0VSIiwiaW5pdGlhbENvbnRhaW5lckNvdW50IiwibWF4Q29udGFpbmVycyIsIm1heERlbm9taW5hdG9yIiwiaXNDb21wYWN0IiwiYnVja2V0V2lkdGgiLCJzaG93TnVtYmVyTGluZVByb3BlcnR5IiwibXVsdGlwbGllclByb3BlcnR5IiwicmFuZ2UiLCJtdWx0aXBsaWVkQ29udGFpbmVycyIsImNvbnRhaW5lcnMiLCJtYXAiLCJjb250YWluZXIiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1YWxpdHlMYWJNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlIFwiRXF1YWxpdHkgTGFiXCIgc2NyZWVuIG9mIEZyYWN0aW9uczogRXF1YWxpdHlcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgZnJhY3Rpb25zQ29tbW9uIGZyb20gJy4uLy4uL2ZyYWN0aW9uc0NvbW1vbi5qcyc7XHJcbmltcG9ydCBDb250YWluZXJTZXRNb2RlbCBmcm9tICcuL0NvbnRhaW5lclNldE1vZGVsLmpzJztcclxuaW1wb3J0IEludHJvUmVwcmVzZW50YXRpb24gZnJvbSAnLi9JbnRyb1JlcHJlc2VudGF0aW9uLmpzJztcclxuaW1wb3J0IE11bHRpcGxpZWRDb250YWluZXIgZnJvbSAnLi9NdWx0aXBsaWVkQ29udGFpbmVyLmpzJztcclxuXHJcbmNsYXNzIEVxdWFsaXR5TGFiTW9kZWwgZXh0ZW5kcyBDb250YWluZXJTZXRNb2RlbCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigge1xyXG4gICAgICByZXByZXNlbnRhdGlvbnM6IFtcclxuICAgICAgICBJbnRyb1JlcHJlc2VudGF0aW9uLkNJUkNMRSxcclxuICAgICAgICBJbnRyb1JlcHJlc2VudGF0aW9uLkhPUklaT05UQUxfQkFSLFxyXG4gICAgICAgIEludHJvUmVwcmVzZW50YXRpb24uVkVSVElDQUxfQkFSLFxyXG4gICAgICAgIEludHJvUmVwcmVzZW50YXRpb24uQkVBS0VSXHJcbiAgICAgIF0sXHJcbiAgICAgIGluaXRpYWxDb250YWluZXJDb3VudDogNCxcclxuICAgICAgbWF4Q29udGFpbmVyczogNCxcclxuICAgICAgbWF4RGVub21pbmF0b3I6IDYsXHJcbiAgICAgIGlzQ29tcGFjdDogdHJ1ZSxcclxuICAgICAgYnVja2V0V2lkdGg6IDI4MFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn0gLSBXaGV0aGVyIHRoZSByaWdodCBzaWRlIHNob3VsZCBzaG93IGEgbnVtYmVyIGxpbmUgaW5zdGVhZCBvZiB0aGUgbm9ybWFsXHJcbiAgICAvLyByZXByZXNlbnRhdGlvbi5cclxuICAgIHRoaXMuc2hvd051bWJlckxpbmVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPG51bWJlcj59IC0gVGhlIG11bHRpcGxpZXIgdXNlZCB0byBjb25zdHJ1Y3QgdGhlIFwicGFyYWxsZWxcIiBmcmFjdGlvblxyXG4gICAgdGhpcy5tdWx0aXBsaWVyUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDIsIHtcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMSwgMyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7Q29udGFpbmVyW119XHJcbiAgICB0aGlzLm11bHRpcGxpZWRDb250YWluZXJzID0gdGhpcy5jb250YWluZXJzLm1hcCggY29udGFpbmVyID0+IG5ldyBNdWx0aXBsaWVkQ29udGFpbmVyKCBjb250YWluZXIsIHRoaXMubXVsdGlwbGllclByb3BlcnR5ICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyB0aGUgbW9kZWwuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5zaG93TnVtYmVyTGluZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLm11bHRpcGxpZXJQcm9wZXJ0eS5yZXNldCgpO1xyXG5cclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mcmFjdGlvbnNDb21tb24ucmVnaXN0ZXIoICdFcXVhbGl0eUxhYk1vZGVsJywgRXF1YWxpdHlMYWJNb2RlbCApO1xyXG5leHBvcnQgZGVmYXVsdCBFcXVhbGl0eUxhYk1vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxtQkFBbUIsTUFBTSwwQkFBMEI7QUFDMUQsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBRTFELE1BQU1DLGdCQUFnQixTQUFTSCxpQkFBaUIsQ0FBQztFQUMvQ0ksV0FBV0EsQ0FBQSxFQUFHO0lBQ1osS0FBSyxDQUFFO01BQ0xDLGVBQWUsRUFBRSxDQUNmSixtQkFBbUIsQ0FBQ0ssTUFBTSxFQUMxQkwsbUJBQW1CLENBQUNNLGNBQWMsRUFDbENOLG1CQUFtQixDQUFDTyxZQUFZLEVBQ2hDUCxtQkFBbUIsQ0FBQ1EsTUFBTSxDQUMzQjtNQUNEQyxxQkFBcUIsRUFBRSxDQUFDO01BQ3hCQyxhQUFhLEVBQUUsQ0FBQztNQUNoQkMsY0FBYyxFQUFFLENBQUM7TUFDakJDLFNBQVMsRUFBRSxJQUFJO01BQ2ZDLFdBQVcsRUFBRTtJQUNmLENBQUUsQ0FBQzs7SUFFSDtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxzQkFBc0IsR0FBRyxJQUFJbkIsZUFBZSxDQUFFLEtBQU0sQ0FBQzs7SUFFMUQ7SUFDQSxJQUFJLENBQUNvQixrQkFBa0IsR0FBRyxJQUFJbkIsY0FBYyxDQUFFLENBQUMsRUFBRTtNQUMvQ29CLEtBQUssRUFBRSxJQUFJbkIsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFFO0lBQ3pCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ29CLG9CQUFvQixHQUFHLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxHQUFHLENBQUVDLFNBQVMsSUFBSSxJQUFJbkIsbUJBQW1CLENBQUVtQixTQUFTLEVBQUUsSUFBSSxDQUFDTCxrQkFBbUIsQ0FBRSxDQUFDO0VBQy9IOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU0sS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxDQUFDUCxzQkFBc0IsQ0FBQ08sS0FBSyxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDTixrQkFBa0IsQ0FBQ00sS0FBSyxDQUFDLENBQUM7SUFFL0IsS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztFQUNmO0FBQ0Y7QUFFQXZCLGVBQWUsQ0FBQ3dCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRXBCLGdCQUFpQixDQUFDO0FBQ2hFLGVBQWVBLGdCQUFnQiJ9