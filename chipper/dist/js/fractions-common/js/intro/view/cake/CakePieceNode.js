// Copyright 2018-2020, University of Colorado Boulder

/**
 * The cake variant of a piece node.
 *
 * @author Martin Veillette (Berea College)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import fractionsCommon from '../../../fractionsCommon.js';
import PieceNode from '../PieceNode.js';
import CakeNode from './CakeNode.js';
class CakePieceNode extends PieceNode {
  /**
   * @param {Piece} piece
   * @param {function} finishedAnimatingCallback - Called as function( {Piece} ) with the piece to finish animating.
   * @param {function} droppedCallback - Called as function( {Piece} )
   */
  constructor(piece, finishedAnimatingCallback, droppedCallback) {
    super(piece, finishedAnimatingCallback, droppedCallback, {
      graphic: new CakeNode(piece.denominator, 0, {
        dropShadow: true
      })
    });

    // cake specific
    const originCell = piece.originCell;
    if (originCell) {
      this.graphic.setCakeIndex(originCell.index);
    }
    // cake specific
    const destinationCell = piece.destinationCell;
    if (destinationCell) {
      this.graphic.setCakeIndex(destinationCell.index);
    }
  }

  /**
   * Orients the piece to match the closest cell.
   * @public
   * @override
   *
   * @param {Cell} closestCell
   * @param {number} dt
   */
  orient(closestCell, dt) {
    super.orient(closestCell, dt);
    const midpoint = this.getMidpoint();
    this.graphic.setCakeIndex(closestCell.index);
    this.setMidpoint(midpoint);
  }
}
fractionsCommon.register('CakePieceNode', CakePieceNode);
export default CakePieceNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcmFjdGlvbnNDb21tb24iLCJQaWVjZU5vZGUiLCJDYWtlTm9kZSIsIkNha2VQaWVjZU5vZGUiLCJjb25zdHJ1Y3RvciIsInBpZWNlIiwiZmluaXNoZWRBbmltYXRpbmdDYWxsYmFjayIsImRyb3BwZWRDYWxsYmFjayIsImdyYXBoaWMiLCJkZW5vbWluYXRvciIsImRyb3BTaGFkb3ciLCJvcmlnaW5DZWxsIiwic2V0Q2FrZUluZGV4IiwiaW5kZXgiLCJkZXN0aW5hdGlvbkNlbGwiLCJvcmllbnQiLCJjbG9zZXN0Q2VsbCIsImR0IiwibWlkcG9pbnQiLCJnZXRNaWRwb2ludCIsInNldE1pZHBvaW50IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDYWtlUGllY2VOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBjYWtlIHZhcmlhbnQgb2YgYSBwaWVjZSBub2RlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgZnJhY3Rpb25zQ29tbW9uIGZyb20gJy4uLy4uLy4uL2ZyYWN0aW9uc0NvbW1vbi5qcyc7XHJcbmltcG9ydCBQaWVjZU5vZGUgZnJvbSAnLi4vUGllY2VOb2RlLmpzJztcclxuaW1wb3J0IENha2VOb2RlIGZyb20gJy4vQ2FrZU5vZGUuanMnO1xyXG5cclxuY2xhc3MgQ2FrZVBpZWNlTm9kZSBleHRlbmRzIFBpZWNlTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQaWVjZX0gcGllY2VcclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmaW5pc2hlZEFuaW1hdGluZ0NhbGxiYWNrIC0gQ2FsbGVkIGFzIGZ1bmN0aW9uKCB7UGllY2V9ICkgd2l0aCB0aGUgcGllY2UgdG8gZmluaXNoIGFuaW1hdGluZy5cclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBkcm9wcGVkQ2FsbGJhY2sgLSBDYWxsZWQgYXMgZnVuY3Rpb24oIHtQaWVjZX0gKVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwaWVjZSwgZmluaXNoZWRBbmltYXRpbmdDYWxsYmFjaywgZHJvcHBlZENhbGxiYWNrICkge1xyXG4gICAgc3VwZXIoIHBpZWNlLCBmaW5pc2hlZEFuaW1hdGluZ0NhbGxiYWNrLCBkcm9wcGVkQ2FsbGJhY2ssIHtcclxuICAgICAgZ3JhcGhpYzogbmV3IENha2VOb2RlKCBwaWVjZS5kZW5vbWluYXRvciwgMCwgeyBkcm9wU2hhZG93OiB0cnVlIH0gKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGNha2Ugc3BlY2lmaWNcclxuICAgIGNvbnN0IG9yaWdpbkNlbGwgPSBwaWVjZS5vcmlnaW5DZWxsO1xyXG4gICAgaWYgKCBvcmlnaW5DZWxsICkge1xyXG4gICAgICB0aGlzLmdyYXBoaWMuc2V0Q2FrZUluZGV4KCBvcmlnaW5DZWxsLmluZGV4ICk7XHJcbiAgICB9XHJcbiAgICAvLyBjYWtlIHNwZWNpZmljXHJcbiAgICBjb25zdCBkZXN0aW5hdGlvbkNlbGwgPSBwaWVjZS5kZXN0aW5hdGlvbkNlbGw7XHJcbiAgICBpZiAoIGRlc3RpbmF0aW9uQ2VsbCApIHtcclxuICAgICAgdGhpcy5ncmFwaGljLnNldENha2VJbmRleCggZGVzdGluYXRpb25DZWxsLmluZGV4ICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcmllbnRzIHRoZSBwaWVjZSB0byBtYXRjaCB0aGUgY2xvc2VzdCBjZWxsLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2VsbH0gY2xvc2VzdENlbGxcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHRcclxuICAgKi9cclxuICBvcmllbnQoIGNsb3Nlc3RDZWxsLCBkdCApIHtcclxuICAgIHN1cGVyLm9yaWVudCggY2xvc2VzdENlbGwsIGR0ICk7XHJcblxyXG4gICAgY29uc3QgbWlkcG9pbnQgPSB0aGlzLmdldE1pZHBvaW50KCk7XHJcbiAgICB0aGlzLmdyYXBoaWMuc2V0Q2FrZUluZGV4KCBjbG9zZXN0Q2VsbC5pbmRleCApO1xyXG4gICAgdGhpcy5zZXRNaWRwb2ludCggbWlkcG9pbnQgKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ0Nha2VQaWVjZU5vZGUnLCBDYWtlUGllY2VOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IENha2VQaWVjZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLDZCQUE2QjtBQUN6RCxPQUFPQyxTQUFTLE1BQU0saUJBQWlCO0FBQ3ZDLE9BQU9DLFFBQVEsTUFBTSxlQUFlO0FBRXBDLE1BQU1DLGFBQWEsU0FBU0YsU0FBUyxDQUFDO0VBQ3BDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyx5QkFBeUIsRUFBRUMsZUFBZSxFQUFHO0lBQy9ELEtBQUssQ0FBRUYsS0FBSyxFQUFFQyx5QkFBeUIsRUFBRUMsZUFBZSxFQUFFO01BQ3hEQyxPQUFPLEVBQUUsSUFBSU4sUUFBUSxDQUFFRyxLQUFLLENBQUNJLFdBQVcsRUFBRSxDQUFDLEVBQUU7UUFBRUMsVUFBVSxFQUFFO01BQUssQ0FBRTtJQUNwRSxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxVQUFVLEdBQUdOLEtBQUssQ0FBQ00sVUFBVTtJQUNuQyxJQUFLQSxVQUFVLEVBQUc7TUFDaEIsSUFBSSxDQUFDSCxPQUFPLENBQUNJLFlBQVksQ0FBRUQsVUFBVSxDQUFDRSxLQUFNLENBQUM7SUFDL0M7SUFDQTtJQUNBLE1BQU1DLGVBQWUsR0FBR1QsS0FBSyxDQUFDUyxlQUFlO0lBQzdDLElBQUtBLGVBQWUsRUFBRztNQUNyQixJQUFJLENBQUNOLE9BQU8sQ0FBQ0ksWUFBWSxDQUFFRSxlQUFlLENBQUNELEtBQU0sQ0FBQztJQUNwRDtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsTUFBTUEsQ0FBRUMsV0FBVyxFQUFFQyxFQUFFLEVBQUc7SUFDeEIsS0FBSyxDQUFDRixNQUFNLENBQUVDLFdBQVcsRUFBRUMsRUFBRyxDQUFDO0lBRS9CLE1BQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQ25DLElBQUksQ0FBQ1gsT0FBTyxDQUFDSSxZQUFZLENBQUVJLFdBQVcsQ0FBQ0gsS0FBTSxDQUFDO0lBQzlDLElBQUksQ0FBQ08sV0FBVyxDQUFFRixRQUFTLENBQUM7RUFDOUI7QUFDRjtBQUVBbEIsZUFBZSxDQUFDcUIsUUFBUSxDQUFFLGVBQWUsRUFBRWxCLGFBQWMsQ0FBQztBQUMxRCxlQUFlQSxhQUFhIn0=