// Copyright 2018-2022, University of Colorado Boulder

/**
 * Scene for the cake representation
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import merge from '../../../../../phet-core/js/merge.js';
import { Image } from '../../../../../scenery/js/imports.js';
import cake_1_1_png from '../../../../mipmaps/cake_1_1_png.js';
import fractionsCommon from '../../../fractionsCommon.js';
import CellSceneNode from '../CellSceneNode.js';
import CakeContainerNode from './CakeContainerNode.js';
import CakeNode from './CakeNode.js';
import CakePieceNode from './CakePieceNode.js';
class CakeSceneNode extends CellSceneNode {
  /**
   * @param {ContainerSetScreenView} model
   * @param {Object} [options]
   */
  constructor(model, options) {
    super(model, merge({
      createContainerNode(container, options) {
        return new CakeContainerNode(container, options);
      },
      createPieceNode(piece, finishedAnimatingCallback, droppedCallback) {
        return new CakePieceNode(piece, finishedAnimatingCallback, droppedCallback);
      },
      createCellNode(denominator, index, options) {
        return new CakeNode(denominator, index, options);
      }
    }, options));
  }

  /**
   * Returns the icon node to be used for this representation.
   * @public
   *
   * @param {boolean} useEqualityLabColor
   * @returns {Node}
   */
  static getIcon() {
    return new Image(cake_1_1_png, {
      maxHeight: 75
    });
  }
}
fractionsCommon.register('CakeSceneNode', CakeSceneNode);
export default CakeSceneNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkltYWdlIiwiY2FrZV8xXzFfcG5nIiwiZnJhY3Rpb25zQ29tbW9uIiwiQ2VsbFNjZW5lTm9kZSIsIkNha2VDb250YWluZXJOb2RlIiwiQ2FrZU5vZGUiLCJDYWtlUGllY2VOb2RlIiwiQ2FrZVNjZW5lTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJvcHRpb25zIiwiY3JlYXRlQ29udGFpbmVyTm9kZSIsImNvbnRhaW5lciIsImNyZWF0ZVBpZWNlTm9kZSIsInBpZWNlIiwiZmluaXNoZWRBbmltYXRpbmdDYWxsYmFjayIsImRyb3BwZWRDYWxsYmFjayIsImNyZWF0ZUNlbGxOb2RlIiwiZGVub21pbmF0b3IiLCJpbmRleCIsImdldEljb24iLCJtYXhIZWlnaHQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNha2VTY2VuZU5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2NlbmUgZm9yIHRoZSBjYWtlIHJlcHJlc2VudGF0aW9uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY2FrZV8xXzFfcG5nIGZyb20gJy4uLy4uLy4uLy4uL21pcG1hcHMvY2FrZV8xXzFfcG5nLmpzJztcclxuaW1wb3J0IGZyYWN0aW9uc0NvbW1vbiBmcm9tICcuLi8uLi8uLi9mcmFjdGlvbnNDb21tb24uanMnO1xyXG5pbXBvcnQgQ2VsbFNjZW5lTm9kZSBmcm9tICcuLi9DZWxsU2NlbmVOb2RlLmpzJztcclxuaW1wb3J0IENha2VDb250YWluZXJOb2RlIGZyb20gJy4vQ2FrZUNvbnRhaW5lck5vZGUuanMnO1xyXG5pbXBvcnQgQ2FrZU5vZGUgZnJvbSAnLi9DYWtlTm9kZS5qcyc7XHJcbmltcG9ydCBDYWtlUGllY2VOb2RlIGZyb20gJy4vQ2FrZVBpZWNlTm9kZS5qcyc7XHJcblxyXG5jbGFzcyBDYWtlU2NlbmVOb2RlIGV4dGVuZHMgQ2VsbFNjZW5lTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDb250YWluZXJTZXRTY3JlZW5WaWV3fSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggbW9kZWwsIG1lcmdlKCB7XHJcbiAgICAgIGNyZWF0ZUNvbnRhaW5lck5vZGUoIGNvbnRhaW5lciwgb3B0aW9ucyApIHtcclxuICAgICAgICByZXR1cm4gbmV3IENha2VDb250YWluZXJOb2RlKCBjb250YWluZXIsIG9wdGlvbnMgKTtcclxuICAgICAgfSxcclxuICAgICAgY3JlYXRlUGllY2VOb2RlKCBwaWVjZSwgZmluaXNoZWRBbmltYXRpbmdDYWxsYmFjaywgZHJvcHBlZENhbGxiYWNrICkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2FrZVBpZWNlTm9kZSggcGllY2UsIGZpbmlzaGVkQW5pbWF0aW5nQ2FsbGJhY2ssIGRyb3BwZWRDYWxsYmFjayApO1xyXG4gICAgICB9LFxyXG4gICAgICBjcmVhdGVDZWxsTm9kZSggZGVub21pbmF0b3IsIGluZGV4LCBvcHRpb25zICkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2FrZU5vZGUoIGRlbm9taW5hdG9yLCBpbmRleCwgb3B0aW9ucyApO1xyXG4gICAgICB9XHJcbiAgICB9LCBvcHRpb25zICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGljb24gbm9kZSB0byBiZSB1c2VkIGZvciB0aGlzIHJlcHJlc2VudGF0aW9uLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlRXF1YWxpdHlMYWJDb2xvclxyXG4gICAqIEByZXR1cm5zIHtOb2RlfVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRJY29uKCkge1xyXG4gICAgcmV0dXJuIG5ldyBJbWFnZSggY2FrZV8xXzFfcG5nLCB7XHJcbiAgICAgIG1heEhlaWdodDogNzVcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ0Nha2VTY2VuZU5vZGUnLCBDYWtlU2NlbmVOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IENha2VTY2VuZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxzQ0FBc0M7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLHNDQUFzQztBQUM1RCxPQUFPQyxZQUFZLE1BQU0scUNBQXFDO0FBQzlELE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFDdEQsT0FBT0MsUUFBUSxNQUFNLGVBQWU7QUFDcEMsT0FBT0MsYUFBYSxNQUFNLG9CQUFvQjtBQUU5QyxNQUFNQyxhQUFhLFNBQVNKLGFBQWEsQ0FBQztFQUN4QztBQUNGO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRztJQUM1QixLQUFLLENBQUVELEtBQUssRUFBRVYsS0FBSyxDQUFFO01BQ25CWSxtQkFBbUJBLENBQUVDLFNBQVMsRUFBRUYsT0FBTyxFQUFHO1FBQ3hDLE9BQU8sSUFBSU4saUJBQWlCLENBQUVRLFNBQVMsRUFBRUYsT0FBUSxDQUFDO01BQ3BELENBQUM7TUFDREcsZUFBZUEsQ0FBRUMsS0FBSyxFQUFFQyx5QkFBeUIsRUFBRUMsZUFBZSxFQUFHO1FBQ25FLE9BQU8sSUFBSVYsYUFBYSxDQUFFUSxLQUFLLEVBQUVDLHlCQUF5QixFQUFFQyxlQUFnQixDQUFDO01BQy9FLENBQUM7TUFDREMsY0FBY0EsQ0FBRUMsV0FBVyxFQUFFQyxLQUFLLEVBQUVULE9BQU8sRUFBRztRQUM1QyxPQUFPLElBQUlMLFFBQVEsQ0FBRWEsV0FBVyxFQUFFQyxLQUFLLEVBQUVULE9BQVEsQ0FBQztNQUNwRDtJQUNGLENBQUMsRUFBRUEsT0FBUSxDQUFFLENBQUM7RUFDaEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPVSxPQUFPQSxDQUFBLEVBQUc7SUFDZixPQUFPLElBQUlwQixLQUFLLENBQUVDLFlBQVksRUFBRTtNQUM5Qm9CLFNBQVMsRUFBRTtJQUNiLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQW5CLGVBQWUsQ0FBQ29CLFFBQVEsQ0FBRSxlQUFlLEVBQUVmLGFBQWMsQ0FBQztBQUMxRCxlQUFlQSxhQUFhIn0=