// Copyright 2018-2021, University of Colorado Boulder

/**
 * Scene for the rectangular representation
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import merge from '../../../../../phet-core/js/merge.js';
import FractionsCommonColors from '../../../common/view/FractionsCommonColors.js';
import fractionsCommon from '../../../fractionsCommon.js';
import Container from '../../model/Container.js';
import CellSceneNode from '../CellSceneNode.js';
import RectangularOrientation from '../RectangularOrientation.js';
import RectangularContainerNode from './RectangularContainerNode.js';
import RectangularNode from './RectangularNode.js';
import RectangularPieceNode from './RectangularPieceNode.js';
class RectangularSceneNode extends CellSceneNode {
  /**
   * @param {ContainerSetScreenView} model
   * @param {Object} [options]
   */
  constructor(model, options) {
    assert && assert(RectangularOrientation.includes(options.rectangularOrientation));
    const rectangularOrientation = options.rectangularOrientation;
    const maxContainers = model.containerCountProperty.range.max;
    super(model, merge({
      createContainerNode(container, options) {
        return new RectangularContainerNode(container, merge({
          rectangularOrientation: rectangularOrientation
        }, options));
      },
      createPieceNode(piece, finishedAnimatingCallback, droppedCallback) {
        return new RectangularPieceNode(piece, finishedAnimatingCallback, droppedCallback, {
          rectangularOrientation: rectangularOrientation
        });
      },
      createCellNode(denominator, index, options) {
        return new RectangularNode(denominator, {
          dropShadow: false,
          rectangularOrientation: rectangularOrientation
        });
      },
      maxContainersPerRow: {
        [RectangularOrientation.HORIZONTAL]: {
          false: maxContainers / 2,
          true: 1
        },
        [RectangularOrientation.VERTICAL]: {
          false: maxContainers,
          true: 4
        }
      }[rectangularOrientation][model.isCompact]
    }, options));
  }

  /**
   * Returns the icon node to be used for this representation.
   * @public
   *
   * @param {RectangularOrientation} rectangularOrientation
   * @param {boolean} [useEqualityLabColor]
   * @returns {Node}
   */
  static getIcon(rectangularOrientation, useEqualityLabColor) {
    const iconContainer = new Container();
    iconContainer.addCells(1);
    iconContainer.cells.get(0).fill();
    return new RectangularContainerNode(iconContainer, {
      rectangularOrientation: rectangularOrientation,
      scale: 0.32,
      colorOverride: useEqualityLabColor ? FractionsCommonColors.equalityLabColorProperty : null
    });
  }
}
fractionsCommon.register('RectangularSceneNode', RectangularSceneNode);
export default RectangularSceneNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkZyYWN0aW9uc0NvbW1vbkNvbG9ycyIsImZyYWN0aW9uc0NvbW1vbiIsIkNvbnRhaW5lciIsIkNlbGxTY2VuZU5vZGUiLCJSZWN0YW5ndWxhck9yaWVudGF0aW9uIiwiUmVjdGFuZ3VsYXJDb250YWluZXJOb2RlIiwiUmVjdGFuZ3VsYXJOb2RlIiwiUmVjdGFuZ3VsYXJQaWVjZU5vZGUiLCJSZWN0YW5ndWxhclNjZW5lTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJvcHRpb25zIiwiYXNzZXJ0IiwiaW5jbHVkZXMiLCJyZWN0YW5ndWxhck9yaWVudGF0aW9uIiwibWF4Q29udGFpbmVycyIsImNvbnRhaW5lckNvdW50UHJvcGVydHkiLCJyYW5nZSIsIm1heCIsImNyZWF0ZUNvbnRhaW5lck5vZGUiLCJjb250YWluZXIiLCJjcmVhdGVQaWVjZU5vZGUiLCJwaWVjZSIsImZpbmlzaGVkQW5pbWF0aW5nQ2FsbGJhY2siLCJkcm9wcGVkQ2FsbGJhY2siLCJjcmVhdGVDZWxsTm9kZSIsImRlbm9taW5hdG9yIiwiaW5kZXgiLCJkcm9wU2hhZG93IiwibWF4Q29udGFpbmVyc1BlclJvdyIsIkhPUklaT05UQUwiLCJmYWxzZSIsInRydWUiLCJWRVJUSUNBTCIsImlzQ29tcGFjdCIsImdldEljb24iLCJ1c2VFcXVhbGl0eUxhYkNvbG9yIiwiaWNvbkNvbnRhaW5lciIsImFkZENlbGxzIiwiY2VsbHMiLCJnZXQiLCJmaWxsIiwic2NhbGUiLCJjb2xvck92ZXJyaWRlIiwiZXF1YWxpdHlMYWJDb2xvclByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWN0YW5ndWxhclNjZW5lTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY2VuZSBmb3IgdGhlIHJlY3Rhbmd1bGFyIHJlcHJlc2VudGF0aW9uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IEZyYWN0aW9uc0NvbW1vbkNvbG9ycyBmcm9tICcuLi8uLi8uLi9jb21tb24vdmlldy9GcmFjdGlvbnNDb21tb25Db2xvcnMuanMnO1xyXG5pbXBvcnQgZnJhY3Rpb25zQ29tbW9uIGZyb20gJy4uLy4uLy4uL2ZyYWN0aW9uc0NvbW1vbi5qcyc7XHJcbmltcG9ydCBDb250YWluZXIgZnJvbSAnLi4vLi4vbW9kZWwvQ29udGFpbmVyLmpzJztcclxuaW1wb3J0IENlbGxTY2VuZU5vZGUgZnJvbSAnLi4vQ2VsbFNjZW5lTm9kZS5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhck9yaWVudGF0aW9uIGZyb20gJy4uL1JlY3Rhbmd1bGFyT3JpZW50YXRpb24uanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJDb250YWluZXJOb2RlIGZyb20gJy4vUmVjdGFuZ3VsYXJDb250YWluZXJOb2RlLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyTm9kZSBmcm9tICcuL1JlY3Rhbmd1bGFyTm9kZS5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclBpZWNlTm9kZSBmcm9tICcuL1JlY3Rhbmd1bGFyUGllY2VOb2RlLmpzJztcclxuXHJcbmNsYXNzIFJlY3Rhbmd1bGFyU2NlbmVOb2RlIGV4dGVuZHMgQ2VsbFNjZW5lTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDb250YWluZXJTZXRTY3JlZW5WaWV3fSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG9wdGlvbnMgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBSZWN0YW5ndWxhck9yaWVudGF0aW9uLmluY2x1ZGVzKCBvcHRpb25zLnJlY3Rhbmd1bGFyT3JpZW50YXRpb24gKSApO1xyXG5cclxuICAgIGNvbnN0IHJlY3Rhbmd1bGFyT3JpZW50YXRpb24gPSBvcHRpb25zLnJlY3Rhbmd1bGFyT3JpZW50YXRpb247XHJcbiAgICBjb25zdCBtYXhDb250YWluZXJzID0gbW9kZWwuY29udGFpbmVyQ291bnRQcm9wZXJ0eS5yYW5nZS5tYXg7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCBtZXJnZSgge1xyXG4gICAgICBjcmVhdGVDb250YWluZXJOb2RlKCBjb250YWluZXIsIG9wdGlvbnMgKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5ndWxhckNvbnRhaW5lck5vZGUoIGNvbnRhaW5lciwgbWVyZ2UoIHtcclxuICAgICAgICAgIHJlY3Rhbmd1bGFyT3JpZW50YXRpb246IHJlY3Rhbmd1bGFyT3JpZW50YXRpb25cclxuICAgICAgICB9LCBvcHRpb25zICkgKTtcclxuICAgICAgfSxcclxuICAgICAgY3JlYXRlUGllY2VOb2RlKCBwaWVjZSwgZmluaXNoZWRBbmltYXRpbmdDYWxsYmFjaywgZHJvcHBlZENhbGxiYWNrICkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ3VsYXJQaWVjZU5vZGUoIHBpZWNlLCBmaW5pc2hlZEFuaW1hdGluZ0NhbGxiYWNrLCBkcm9wcGVkQ2FsbGJhY2ssIHtcclxuICAgICAgICAgIHJlY3Rhbmd1bGFyT3JpZW50YXRpb246IHJlY3Rhbmd1bGFyT3JpZW50YXRpb25cclxuICAgICAgICB9ICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNyZWF0ZUNlbGxOb2RlKCBkZW5vbWluYXRvciwgaW5kZXgsIG9wdGlvbnMgKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5ndWxhck5vZGUoIGRlbm9taW5hdG9yLCB7XHJcbiAgICAgICAgICBkcm9wU2hhZG93OiBmYWxzZSxcclxuICAgICAgICAgIHJlY3Rhbmd1bGFyT3JpZW50YXRpb246IHJlY3Rhbmd1bGFyT3JpZW50YXRpb25cclxuICAgICAgICB9ICk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBtYXhDb250YWluZXJzUGVyUm93OiB7XHJcbiAgICAgICAgWyBSZWN0YW5ndWxhck9yaWVudGF0aW9uLkhPUklaT05UQUwgXToge1xyXG4gICAgICAgICAgZmFsc2U6IG1heENvbnRhaW5lcnMgLyAyLFxyXG4gICAgICAgICAgdHJ1ZTogMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgWyBSZWN0YW5ndWxhck9yaWVudGF0aW9uLlZFUlRJQ0FMIF06IHtcclxuICAgICAgICAgIGZhbHNlOiBtYXhDb250YWluZXJzLFxyXG4gICAgICAgICAgdHJ1ZTogNFxyXG4gICAgICAgIH1cclxuICAgICAgfVsgcmVjdGFuZ3VsYXJPcmllbnRhdGlvbiBdWyBtb2RlbC5pc0NvbXBhY3QgXVxyXG4gICAgfSwgb3B0aW9ucyApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBpY29uIG5vZGUgdG8gYmUgdXNlZCBmb3IgdGhpcyByZXByZXNlbnRhdGlvbi5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1JlY3Rhbmd1bGFyT3JpZW50YXRpb259IHJlY3Rhbmd1bGFyT3JpZW50YXRpb25cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1c2VFcXVhbGl0eUxhYkNvbG9yXVxyXG4gICAqIEByZXR1cm5zIHtOb2RlfVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRJY29uKCByZWN0YW5ndWxhck9yaWVudGF0aW9uLCB1c2VFcXVhbGl0eUxhYkNvbG9yICkge1xyXG4gICAgY29uc3QgaWNvbkNvbnRhaW5lciA9IG5ldyBDb250YWluZXIoKTtcclxuICAgIGljb25Db250YWluZXIuYWRkQ2VsbHMoIDEgKTtcclxuICAgIGljb25Db250YWluZXIuY2VsbHMuZ2V0KCAwICkuZmlsbCgpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUmVjdGFuZ3VsYXJDb250YWluZXJOb2RlKCBpY29uQ29udGFpbmVyLCB7XHJcbiAgICAgIHJlY3Rhbmd1bGFyT3JpZW50YXRpb246IHJlY3Rhbmd1bGFyT3JpZW50YXRpb24sXHJcbiAgICAgIHNjYWxlOiAwLjMyLFxyXG4gICAgICBjb2xvck92ZXJyaWRlOiB1c2VFcXVhbGl0eUxhYkNvbG9yID8gRnJhY3Rpb25zQ29tbW9uQ29sb3JzLmVxdWFsaXR5TGFiQ29sb3JQcm9wZXJ0eSA6IG51bGxcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ1JlY3Rhbmd1bGFyU2NlbmVOb2RlJywgUmVjdGFuZ3VsYXJTY2VuZU5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgUmVjdGFuZ3VsYXJTY2VuZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxzQ0FBc0M7QUFDeEQsT0FBT0MscUJBQXFCLE1BQU0sK0NBQStDO0FBQ2pGLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsU0FBUyxNQUFNLDBCQUEwQjtBQUNoRCxPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyx3QkFBd0IsTUFBTSwrQkFBK0I7QUFDcEUsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjtBQUNsRCxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsTUFBTUMsb0JBQW9CLFNBQVNMLGFBQWEsQ0FBQztFQUMvQztBQUNGO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRztJQUM1QkMsTUFBTSxJQUFJQSxNQUFNLENBQUVSLHNCQUFzQixDQUFDUyxRQUFRLENBQUVGLE9BQU8sQ0FBQ0csc0JBQXVCLENBQUUsQ0FBQztJQUVyRixNQUFNQSxzQkFBc0IsR0FBR0gsT0FBTyxDQUFDRyxzQkFBc0I7SUFDN0QsTUFBTUMsYUFBYSxHQUFHTCxLQUFLLENBQUNNLHNCQUFzQixDQUFDQyxLQUFLLENBQUNDLEdBQUc7SUFFNUQsS0FBSyxDQUFFUixLQUFLLEVBQUVYLEtBQUssQ0FBRTtNQUNuQm9CLG1CQUFtQkEsQ0FBRUMsU0FBUyxFQUFFVCxPQUFPLEVBQUc7UUFDeEMsT0FBTyxJQUFJTix3QkFBd0IsQ0FBRWUsU0FBUyxFQUFFckIsS0FBSyxDQUFFO1VBQ3JEZSxzQkFBc0IsRUFBRUE7UUFDMUIsQ0FBQyxFQUFFSCxPQUFRLENBQUUsQ0FBQztNQUNoQixDQUFDO01BQ0RVLGVBQWVBLENBQUVDLEtBQUssRUFBRUMseUJBQXlCLEVBQUVDLGVBQWUsRUFBRztRQUNuRSxPQUFPLElBQUlqQixvQkFBb0IsQ0FBRWUsS0FBSyxFQUFFQyx5QkFBeUIsRUFBRUMsZUFBZSxFQUFFO1VBQ2xGVixzQkFBc0IsRUFBRUE7UUFDMUIsQ0FBRSxDQUFDO01BQ0wsQ0FBQztNQUNEVyxjQUFjQSxDQUFFQyxXQUFXLEVBQUVDLEtBQUssRUFBRWhCLE9BQU8sRUFBRztRQUM1QyxPQUFPLElBQUlMLGVBQWUsQ0FBRW9CLFdBQVcsRUFBRTtVQUN2Q0UsVUFBVSxFQUFFLEtBQUs7VUFDakJkLHNCQUFzQixFQUFFQTtRQUMxQixDQUFFLENBQUM7TUFDTCxDQUFDO01BRURlLG1CQUFtQixFQUFFO1FBQ25CLENBQUV6QixzQkFBc0IsQ0FBQzBCLFVBQVUsR0FBSTtVQUNyQ0MsS0FBSyxFQUFFaEIsYUFBYSxHQUFHLENBQUM7VUFDeEJpQixJQUFJLEVBQUU7UUFDUixDQUFDO1FBQ0QsQ0FBRTVCLHNCQUFzQixDQUFDNkIsUUFBUSxHQUFJO1VBQ25DRixLQUFLLEVBQUVoQixhQUFhO1VBQ3BCaUIsSUFBSSxFQUFFO1FBQ1I7TUFDRixDQUFDLENBQUVsQixzQkFBc0IsQ0FBRSxDQUFFSixLQUFLLENBQUN3QixTQUFTO0lBQzlDLENBQUMsRUFBRXZCLE9BQVEsQ0FBRSxDQUFDO0VBQ2hCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPd0IsT0FBT0EsQ0FBRXJCLHNCQUFzQixFQUFFc0IsbUJBQW1CLEVBQUc7SUFDNUQsTUFBTUMsYUFBYSxHQUFHLElBQUluQyxTQUFTLENBQUMsQ0FBQztJQUNyQ21DLGFBQWEsQ0FBQ0MsUUFBUSxDQUFFLENBQUUsQ0FBQztJQUMzQkQsYUFBYSxDQUFDRSxLQUFLLENBQUNDLEdBQUcsQ0FBRSxDQUFFLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFFbkMsT0FBTyxJQUFJcEMsd0JBQXdCLENBQUVnQyxhQUFhLEVBQUU7TUFDbER2QixzQkFBc0IsRUFBRUEsc0JBQXNCO01BQzlDNEIsS0FBSyxFQUFFLElBQUk7TUFDWEMsYUFBYSxFQUFFUCxtQkFBbUIsR0FBR3BDLHFCQUFxQixDQUFDNEMsd0JBQXdCLEdBQUc7SUFDeEYsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBM0MsZUFBZSxDQUFDNEMsUUFBUSxDQUFFLHNCQUFzQixFQUFFckMsb0JBQXFCLENBQUM7QUFDeEUsZUFBZUEsb0JBQW9CIn0=