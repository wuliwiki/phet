// Copyright 2018-2022, University of Colorado Boulder

/**
 * Displays a beaker graphic
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import NumberProperty from '../../../../../axon/js/NumberProperty.js';
import Range from '../../../../../dot/js/Range.js';
import merge from '../../../../../phet-core/js/merge.js';
import BeakerNode from '../../../../../scenery-phet/js/BeakerNode.js';
import FractionsCommonColors from '../../../common/view/FractionsCommonColors.js';
import fractionsCommon from '../../../fractionsCommon.js';

// constants
const EMPTY_BEAKER_COLOR = FractionsCommonColors.emptyBeakerProperty;
const WATER_COLOR = FractionsCommonColors.waterProperty;
const BEAKER_SHINE_COLOR = FractionsCommonColors.beakerShineProperty;
class FractionsCommonBeakerNode extends BeakerNode {
  /**
   * @param {number} numerator
   * @param {number} denominator
   * @param {Object} [options]
   */
  constructor(numerator, denominator, options) {
    assert && assert(typeof numerator === 'number' && numerator >= 0 && numerator % 1 === 0);
    assert && assert(typeof denominator === 'number' && denominator >= 1 && denominator % 1 === 0);
    options = merge({
      // {number}
      emptyBeakerFill: EMPTY_BEAKER_COLOR,
      solutionFill: options?.colorOverride ? options.colorOverride : WATER_COLOR,
      beakerGlareFill: BEAKER_SHINE_COLOR,
      beakerWidth: 80,
      beakerHeight: FractionsCommonBeakerNode.DEFAULT_BEAKER_HEIGHT,
      yRadiusOfEnds: 12,
      numberOfTicks: denominator - 1,
      ticksVisible: true,
      stroke: 'grey'
    }, options);
    const waterLevelProperty = new NumberProperty(numerator / denominator, {
      range: new Range(0, 1)
    });
    super(waterLevelProperty, options);
  }
}

// @public {number} - The normal height of a beaker
FractionsCommonBeakerNode.DEFAULT_BEAKER_HEIGHT = 150;
fractionsCommon.register('FractionsCommonBeakerNode', FractionsCommonBeakerNode);
export default FractionsCommonBeakerNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwibWVyZ2UiLCJCZWFrZXJOb2RlIiwiRnJhY3Rpb25zQ29tbW9uQ29sb3JzIiwiZnJhY3Rpb25zQ29tbW9uIiwiRU1QVFlfQkVBS0VSX0NPTE9SIiwiZW1wdHlCZWFrZXJQcm9wZXJ0eSIsIldBVEVSX0NPTE9SIiwid2F0ZXJQcm9wZXJ0eSIsIkJFQUtFUl9TSElORV9DT0xPUiIsImJlYWtlclNoaW5lUHJvcGVydHkiLCJGcmFjdGlvbnNDb21tb25CZWFrZXJOb2RlIiwiY29uc3RydWN0b3IiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsIm9wdGlvbnMiLCJhc3NlcnQiLCJlbXB0eUJlYWtlckZpbGwiLCJzb2x1dGlvbkZpbGwiLCJjb2xvck92ZXJyaWRlIiwiYmVha2VyR2xhcmVGaWxsIiwiYmVha2VyV2lkdGgiLCJiZWFrZXJIZWlnaHQiLCJERUZBVUxUX0JFQUtFUl9IRUlHSFQiLCJ5UmFkaXVzT2ZFbmRzIiwibnVtYmVyT2ZUaWNrcyIsInRpY2tzVmlzaWJsZSIsInN0cm9rZSIsIndhdGVyTGV2ZWxQcm9wZXJ0eSIsInJhbmdlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGcmFjdGlvbnNDb21tb25CZWFrZXJOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIGEgYmVha2VyIGdyYXBoaWNcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgQmVha2VyTm9kZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQmVha2VyTm9kZS5qcyc7XHJcbmltcG9ydCBGcmFjdGlvbnNDb21tb25Db2xvcnMgZnJvbSAnLi4vLi4vLi4vY29tbW9uL3ZpZXcvRnJhY3Rpb25zQ29tbW9uQ29sb3JzLmpzJztcclxuaW1wb3J0IGZyYWN0aW9uc0NvbW1vbiBmcm9tICcuLi8uLi8uLi9mcmFjdGlvbnNDb21tb24uanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEVNUFRZX0JFQUtFUl9DT0xPUiA9IEZyYWN0aW9uc0NvbW1vbkNvbG9ycy5lbXB0eUJlYWtlclByb3BlcnR5O1xyXG5jb25zdCBXQVRFUl9DT0xPUiA9IEZyYWN0aW9uc0NvbW1vbkNvbG9ycy53YXRlclByb3BlcnR5O1xyXG5jb25zdCBCRUFLRVJfU0hJTkVfQ09MT1IgPSBGcmFjdGlvbnNDb21tb25Db2xvcnMuYmVha2VyU2hpbmVQcm9wZXJ0eTtcclxuXHJcbmNsYXNzIEZyYWN0aW9uc0NvbW1vbkJlYWtlck5vZGUgZXh0ZW5kcyBCZWFrZXJOb2RlIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtZXJhdG9yXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbm9taW5hdG9yXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBudW1lcmF0b3IsIGRlbm9taW5hdG9yLCBvcHRpb25zICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdHlwZW9mIG51bWVyYXRvciA9PT0gJ251bWJlcicgJiYgbnVtZXJhdG9yID49IDAgJiYgbnVtZXJhdG9yICUgMSA9PT0gMCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdHlwZW9mIGRlbm9taW5hdG9yID09PSAnbnVtYmVyJyAmJiBkZW5vbWluYXRvciA+PSAxICYmIGRlbm9taW5hdG9yICUgMSA9PT0gMCApO1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIC8vIHtudW1iZXJ9XHJcbiAgICAgIGVtcHR5QmVha2VyRmlsbDogRU1QVFlfQkVBS0VSX0NPTE9SLFxyXG4gICAgICBzb2x1dGlvbkZpbGw6IG9wdGlvbnM/LmNvbG9yT3ZlcnJpZGUgPyBvcHRpb25zLmNvbG9yT3ZlcnJpZGUgOiBXQVRFUl9DT0xPUixcclxuICAgICAgYmVha2VyR2xhcmVGaWxsOiBCRUFLRVJfU0hJTkVfQ09MT1IsXHJcbiAgICAgIGJlYWtlcldpZHRoOiA4MCxcclxuICAgICAgYmVha2VySGVpZ2h0OiBGcmFjdGlvbnNDb21tb25CZWFrZXJOb2RlLkRFRkFVTFRfQkVBS0VSX0hFSUdIVCxcclxuICAgICAgeVJhZGl1c09mRW5kczogMTIsXHJcbiAgICAgIG51bWJlck9mVGlja3M6IGRlbm9taW5hdG9yIC0gMSxcclxuICAgICAgdGlja3NWaXNpYmxlOiB0cnVlLFxyXG4gICAgICBzdHJva2U6ICdncmV5J1xyXG4gICAgfSwgb3B0aW9ucyApO1xyXG4gICAgY29uc3Qgd2F0ZXJMZXZlbFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCBudW1lcmF0b3IgLyBkZW5vbWluYXRvciwge1xyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCAwLCAxIClcclxuICAgIH0gKTtcclxuICAgIHN1cGVyKCB3YXRlckxldmVsUHJvcGVydHksIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIEBwdWJsaWMge251bWJlcn0gLSBUaGUgbm9ybWFsIGhlaWdodCBvZiBhIGJlYWtlclxyXG5GcmFjdGlvbnNDb21tb25CZWFrZXJOb2RlLkRFRkFVTFRfQkVBS0VSX0hFSUdIVCA9IDE1MDtcclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ0ZyYWN0aW9uc0NvbW1vbkJlYWtlck5vZGUnLCBGcmFjdGlvbnNDb21tb25CZWFrZXJOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IEZyYWN0aW9uc0NvbW1vbkJlYWtlck5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSwwQ0FBMEM7QUFDckUsT0FBT0MsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxPQUFPQyxLQUFLLE1BQU0sc0NBQXNDO0FBQ3hELE9BQU9DLFVBQVUsTUFBTSw4Q0FBOEM7QUFDckUsT0FBT0MscUJBQXFCLE1BQU0sK0NBQStDO0FBQ2pGLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7O0FBRXpEO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUdGLHFCQUFxQixDQUFDRyxtQkFBbUI7QUFDcEUsTUFBTUMsV0FBVyxHQUFHSixxQkFBcUIsQ0FBQ0ssYUFBYTtBQUN2RCxNQUFNQyxrQkFBa0IsR0FBR04scUJBQXFCLENBQUNPLG1CQUFtQjtBQUVwRSxNQUFNQyx5QkFBeUIsU0FBU1QsVUFBVSxDQUFDO0VBQ2pEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRVUsV0FBV0EsQ0FBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRztJQUM3Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUUsT0FBT0gsU0FBUyxLQUFLLFFBQVEsSUFBSUEsU0FBUyxJQUFJLENBQUMsSUFBSUEsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFFLENBQUM7SUFDMUZHLE1BQU0sSUFBSUEsTUFBTSxDQUFFLE9BQU9GLFdBQVcsS0FBSyxRQUFRLElBQUlBLFdBQVcsSUFBSSxDQUFDLElBQUlBLFdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBRSxDQUFDO0lBQ2hHQyxPQUFPLEdBQUdkLEtBQUssQ0FBRTtNQUNmO01BQ0FnQixlQUFlLEVBQUVaLGtCQUFrQjtNQUNuQ2EsWUFBWSxFQUFFSCxPQUFPLEVBQUVJLGFBQWEsR0FBR0osT0FBTyxDQUFDSSxhQUFhLEdBQUdaLFdBQVc7TUFDMUVhLGVBQWUsRUFBRVgsa0JBQWtCO01BQ25DWSxXQUFXLEVBQUUsRUFBRTtNQUNmQyxZQUFZLEVBQUVYLHlCQUF5QixDQUFDWSxxQkFBcUI7TUFDN0RDLGFBQWEsRUFBRSxFQUFFO01BQ2pCQyxhQUFhLEVBQUVYLFdBQVcsR0FBRyxDQUFDO01BQzlCWSxZQUFZLEVBQUUsSUFBSTtNQUNsQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUFFWixPQUFRLENBQUM7SUFDWixNQUFNYSxrQkFBa0IsR0FBRyxJQUFJN0IsY0FBYyxDQUFFYyxTQUFTLEdBQUdDLFdBQVcsRUFBRTtNQUN0RWUsS0FBSyxFQUFFLElBQUk3QixLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUU7SUFDekIsQ0FBRSxDQUFDO0lBQ0gsS0FBSyxDQUFFNEIsa0JBQWtCLEVBQUViLE9BQVEsQ0FBQztFQUN0QztBQUNGOztBQUVBO0FBQ0FKLHlCQUF5QixDQUFDWSxxQkFBcUIsR0FBRyxHQUFHO0FBRXJEbkIsZUFBZSxDQUFDMEIsUUFBUSxDQUFFLDJCQUEyQixFQUFFbkIseUJBQTBCLENBQUM7QUFDbEYsZUFBZUEseUJBQXlCIn0=