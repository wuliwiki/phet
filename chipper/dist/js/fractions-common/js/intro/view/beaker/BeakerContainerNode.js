// Copyright 2018-2022, University of Colorado Boulder

/**
 * Container for the beaker representation
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Multilink from '../../../../../axon/js/Multilink.js';
import { DragListener } from '../../../../../scenery/js/imports.js';
import fractionsCommon from '../../../fractionsCommon.js';
import ContainerNode from '../ContainerNode.js';
import FractionsCommonBeakerNode from './FractionsCommonBeakerNode.js';
class BeakerContainerNode extends ContainerNode {
  /**
   * @param {Container} container
   * @param {Object} [options]
   */
  constructor(container, options) {
    super(container, options);

    // @private {Multilink}
    this.multilink = Multilink.multilink([container.appearsFilledCellCountProperty, container.cells.lengthProperty], (numerator, denominator) => {
      // Sanity, if these get modified out of order (very possible)
      numerator = Math.min(numerator, denominator);
      this.children = [new FractionsCommonBeakerNode(numerator, denominator, options)];
    });

    // @private
    this.cursorListener = this.updateCursor.bind(this);
    container.appearsFilledCellCountProperty.link(this.cursorListener);
    this.addInputListener(DragListener.createForwardingListener(event => {
      if (container.appearsFilledCellCountProperty.value > 0) {
        this.cellDownCallback(container.getNextAppearsFilledCell(), event);
      }
    }));
    this.mutate(options);
  }

  /**
   * @private
   */
  updateCursor() {
    this.cursor = this.container.appearsFilledCellCountProperty.value > 0 ? 'pointer' : null;
  }

  /**
   * Releases references.
   * @public
   * @override
   */
  dispose() {
    this.multilink.dispose();
    this.container.appearsFilledCellCountProperty.unlink(this.cursorListener);
    super.dispose();
  }
}
fractionsCommon.register('BeakerContainerNode', BeakerContainerNode);
export default BeakerContainerNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJEcmFnTGlzdGVuZXIiLCJmcmFjdGlvbnNDb21tb24iLCJDb250YWluZXJOb2RlIiwiRnJhY3Rpb25zQ29tbW9uQmVha2VyTm9kZSIsIkJlYWtlckNvbnRhaW5lck5vZGUiLCJjb25zdHJ1Y3RvciIsImNvbnRhaW5lciIsIm9wdGlvbnMiLCJtdWx0aWxpbmsiLCJhcHBlYXJzRmlsbGVkQ2VsbENvdW50UHJvcGVydHkiLCJjZWxscyIsImxlbmd0aFByb3BlcnR5IiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJNYXRoIiwibWluIiwiY2hpbGRyZW4iLCJjdXJzb3JMaXN0ZW5lciIsInVwZGF0ZUN1cnNvciIsImJpbmQiLCJsaW5rIiwiYWRkSW5wdXRMaXN0ZW5lciIsImNyZWF0ZUZvcndhcmRpbmdMaXN0ZW5lciIsImV2ZW50IiwidmFsdWUiLCJjZWxsRG93bkNhbGxiYWNrIiwiZ2V0TmV4dEFwcGVhcnNGaWxsZWRDZWxsIiwibXV0YXRlIiwiY3Vyc29yIiwiZGlzcG9zZSIsInVubGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmVha2VyQ29udGFpbmVyTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb250YWluZXIgZm9yIHRoZSBiZWFrZXIgcmVwcmVzZW50YXRpb25cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZnJhY3Rpb25zQ29tbW9uIGZyb20gJy4uLy4uLy4uL2ZyYWN0aW9uc0NvbW1vbi5qcyc7XHJcbmltcG9ydCBDb250YWluZXJOb2RlIGZyb20gJy4uL0NvbnRhaW5lck5vZGUuanMnO1xyXG5pbXBvcnQgRnJhY3Rpb25zQ29tbW9uQmVha2VyTm9kZSBmcm9tICcuL0ZyYWN0aW9uc0NvbW1vbkJlYWtlck5vZGUuanMnO1xyXG5cclxuY2xhc3MgQmVha2VyQ29udGFpbmVyTm9kZSBleHRlbmRzIENvbnRhaW5lck5vZGUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q29udGFpbmVyfSBjb250YWluZXJcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvbnRhaW5lciwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCBjb250YWluZXIsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7TXVsdGlsaW5rfVxyXG4gICAgdGhpcy5tdWx0aWxpbmsgPSBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIGNvbnRhaW5lci5hcHBlYXJzRmlsbGVkQ2VsbENvdW50UHJvcGVydHksIGNvbnRhaW5lci5jZWxscy5sZW5ndGhQcm9wZXJ0eSBdLCAoIG51bWVyYXRvciwgZGVub21pbmF0b3IgKSA9PiB7XHJcbiAgICAgIC8vIFNhbml0eSwgaWYgdGhlc2UgZ2V0IG1vZGlmaWVkIG91dCBvZiBvcmRlciAodmVyeSBwb3NzaWJsZSlcclxuICAgICAgbnVtZXJhdG9yID0gTWF0aC5taW4oIG51bWVyYXRvciwgZGVub21pbmF0b3IgKTtcclxuICAgICAgdGhpcy5jaGlsZHJlbiA9IFtcclxuICAgICAgICBuZXcgRnJhY3Rpb25zQ29tbW9uQmVha2VyTm9kZSggbnVtZXJhdG9yLCBkZW5vbWluYXRvciwgb3B0aW9ucyApXHJcbiAgICAgIF07XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuY3Vyc29yTGlzdGVuZXIgPSB0aGlzLnVwZGF0ZUN1cnNvci5iaW5kKCB0aGlzICk7XHJcbiAgICBjb250YWluZXIuYXBwZWFyc0ZpbGxlZENlbGxDb3VudFByb3BlcnR5LmxpbmsoIHRoaXMuY3Vyc29yTGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLmFkZElucHV0TGlzdGVuZXIoIERyYWdMaXN0ZW5lci5jcmVhdGVGb3J3YXJkaW5nTGlzdGVuZXIoIGV2ZW50ID0+IHtcclxuICAgICAgaWYgKCBjb250YWluZXIuYXBwZWFyc0ZpbGxlZENlbGxDb3VudFByb3BlcnR5LnZhbHVlID4gMCApIHtcclxuICAgICAgICB0aGlzLmNlbGxEb3duQ2FsbGJhY2soIGNvbnRhaW5lci5nZXROZXh0QXBwZWFyc0ZpbGxlZENlbGwoKSwgZXZlbnQgKTtcclxuICAgICAgfVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgdXBkYXRlQ3Vyc29yKCkge1xyXG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmNvbnRhaW5lci5hcHBlYXJzRmlsbGVkQ2VsbENvdW50UHJvcGVydHkudmFsdWUgPiAwID8gJ3BvaW50ZXInIDogbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbGVhc2VzIHJlZmVyZW5jZXMuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLm11bHRpbGluay5kaXNwb3NlKCk7XHJcblxyXG4gICAgdGhpcy5jb250YWluZXIuYXBwZWFyc0ZpbGxlZENlbGxDb3VudFByb3BlcnR5LnVubGluayggdGhpcy5jdXJzb3JMaXN0ZW5lciApO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ0JlYWtlckNvbnRhaW5lck5vZGUnLCBCZWFrZXJDb250YWluZXJOb2RlICk7XHJc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