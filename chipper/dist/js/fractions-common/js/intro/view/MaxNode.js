// Copyright 2018-2023, University of Colorado Boulder

/**
 * Displays an up/down control for handling the maximum number of "containers"
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { AlignBox, HBox, Text, VBox } from '../../../../scenery/js/imports.js';
import fractionsCommon from '../../fractionsCommon.js';
import FractionsCommonStrings from '../../FractionsCommonStrings.js';
import RoundNumberSpinner from './RoundNumberSpinner.js';
const representationMaxString = FractionsCommonStrings.representationMax;
class MaxNode extends VBox {
  /**
   * @param {Property.<number>} containerCountProperty
   * @param {Object} [options]
   */
  constructor(containerCountProperty, options) {
    super();
    options = merge({
      spacing: 5
    }, options);
    const maxText = new Text(representationMaxString, {
      font: new PhetFont(24),
      maxWidth: 100
    });
    const readoutText = new Text('', {
      font: new PhetFont(34)
    });

    // Figure out what the largest bounds are for the readout
    const maxReadoutBounds = Bounds2.NOTHING.copy();
    for (let n = 1; n <= containerCountProperty.range.max; n++) {
      readoutText.string = n;
      maxReadoutBounds.includeBounds(readoutText.bounds);
    }

    // Now update the readout text
    containerCountProperty.link(count => {
      readoutText.string = count;
    });
    this.children = [maxText, new HBox({
      spacing: 5,
      children: [new AlignBox(readoutText, {
        alignBounds: maxReadoutBounds
      }), new RoundNumberSpinner(containerCountProperty, new DerivedProperty([containerCountProperty], value => value < containerCountProperty.range.max), new DerivedProperty([containerCountProperty], value => value > containerCountProperty.range.min))]
    })];
    this.mutate(options);
  }
}
fractionsCommon.register('MaxNode', MaxNode);
export default MaxNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJCb3VuZHMyIiwibWVyZ2UiLCJQaGV0Rm9udCIsIkFsaWduQm94IiwiSEJveCIsIlRleHQiLCJWQm94IiwiZnJhY3Rpb25zQ29tbW9uIiwiRnJhY3Rpb25zQ29tbW9uU3RyaW5ncyIsIlJvdW5kTnVtYmVyU3Bpbm5lciIsInJlcHJlc2VudGF0aW9uTWF4U3RyaW5nIiwicmVwcmVzZW50YXRpb25NYXgiLCJNYXhOb2RlIiwiY29uc3RydWN0b3IiLCJjb250YWluZXJDb3VudFByb3BlcnR5Iiwib3B0aW9ucyIsInNwYWNpbmciLCJtYXhUZXh0IiwiZm9udCIsIm1heFdpZHRoIiwicmVhZG91dFRleHQiLCJtYXhSZWFkb3V0Qm91bmRzIiwiTk9USElORyIsImNvcHkiLCJuIiwicmFuZ2UiLCJtYXgiLCJzdHJpbmciLCJpbmNsdWRlQm91bmRzIiwiYm91bmRzIiwibGluayIsImNvdW50IiwiY2hpbGRyZW4iLCJhbGlnbkJvdW5kcyIsInZhbHVlIiwibWluIiwibXV0YXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYXhOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIGFuIHVwL2Rvd24gY29udHJvbCBmb3IgaGFuZGxpbmcgdGhlIG1heGltdW0gbnVtYmVyIG9mIFwiY29udGFpbmVyc1wiXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IEFsaWduQm94LCBIQm94LCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGZyYWN0aW9uc0NvbW1vbiBmcm9tICcuLi8uLi9mcmFjdGlvbnNDb21tb24uanMnO1xyXG5pbXBvcnQgRnJhY3Rpb25zQ29tbW9uU3RyaW5ncyBmcm9tICcuLi8uLi9GcmFjdGlvbnNDb21tb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IFJvdW5kTnVtYmVyU3Bpbm5lciBmcm9tICcuL1JvdW5kTnVtYmVyU3Bpbm5lci5qcyc7XHJcblxyXG5jb25zdCByZXByZXNlbnRhdGlvbk1heFN0cmluZyA9IEZyYWN0aW9uc0NvbW1vblN0cmluZ3MucmVwcmVzZW50YXRpb25NYXg7XHJcblxyXG5jbGFzcyBNYXhOb2RlIGV4dGVuZHMgVkJveCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gY29udGFpbmVyQ291bnRQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY29udGFpbmVyQ291bnRQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHNwYWNpbmc6IDVcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBtYXhUZXh0ID0gbmV3IFRleHQoIHJlcHJlc2VudGF0aW9uTWF4U3RyaW5nLCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjQgKSxcclxuICAgICAgbWF4V2lkdGg6IDEwMFxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgcmVhZG91dFRleHQgPSBuZXcgVGV4dCggJycsIHsgZm9udDogbmV3IFBoZXRGb250KCAzNCApIH0gKTtcclxuXHJcbiAgICAvLyBGaWd1cmUgb3V0IHdoYXQgdGhlIGxhcmdlc3QgYm91bmRzIGFyZSBmb3IgdGhlIHJlYWRvdXRcclxuICAgIGNvbnN0IG1heFJlYWRvdXRCb3VuZHMgPSBCb3VuZHMyLk5PVEhJTkcuY29weSgpO1xyXG4gICAgZm9yICggbGV0IG4gPSAxOyBuIDw9IGNvbnRhaW5lckNvdW50UHJvcGVydHkucmFuZ2UubWF4OyBuKysgKSB7XHJcbiAgICAgIHJlYWRvdXRUZXh0LnN0cmluZyA9IG47XHJcbiAgICAgIG1heFJlYWRvdXRCb3VuZHMuaW5jbHVkZUJvdW5kcyggcmVhZG91dFRleHQuYm91bmRzICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm93IHVwZGF0ZSB0aGUgcmVhZG91dCB0ZXh0XHJcbiAgICBjb250YWluZXJDb3VudFByb3BlcnR5LmxpbmsoIGNvdW50ID0+IHtcclxuICAgICAgcmVhZG91dFRleHQuc3RyaW5nID0gY291bnQ7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5jaGlsZHJlbiA9IFtcclxuICAgICAgbWF4VGV4dCxcclxuICAgICAgbmV3IEhCb3goIHtcclxuICAgICAgICBzcGFjaW5nOiA1LFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICBuZXcgQWxpZ25Cb3goIHJlYWRvdXRUZXh0LCB7XHJcbiAgICAgICAgICAgIGFsaWduQm91bmRzOiBtYXhSZWFkb3V0Qm91bmRzXHJcbiAgICAgICAgICB9ICksXHJcbiAgICAgICAgICBuZXcgUm91bmROdW1iZXJTcGlubmVyKFxyXG4gICAgICAgICAgICBjb250YWluZXJDb3VudFByb3BlcnR5LFxyXG4gICAgICAgICAgICBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIGNvbnRhaW5lckNvdW50UHJvcGVydHkgXSwgdmFsdWUgPT4gdmFsdWUgPCBjb250YWluZXJDb3VudFByb3BlcnR5LnJhbmdlLm1heCApLFxyXG4gICAgICAgICAgICBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIGNvbnRhaW5lckNvdW50UHJvcGVydHkgXSwgdmFsdWUgPT4gdmFsdWUgPiBjb250YWluZXJDb3VudFByb3BlcnR5LnJhbmdlLm1pbiApXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgXVxyXG4gICAgICB9IClcclxuICAgIF07XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ01heE5vZGUnLCBNYXhOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IE1heE5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHNCQUFzQixNQUFNLGlDQUFpQztBQUNwRSxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFFeEQsTUFBTUMsdUJBQXVCLEdBQUdGLHNCQUFzQixDQUFDRyxpQkFBaUI7QUFFeEUsTUFBTUMsT0FBTyxTQUFTTixJQUFJLENBQUM7RUFDekI7QUFDRjtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsc0JBQXNCLEVBQUVDLE9BQU8sRUFBRztJQUM3QyxLQUFLLENBQUMsQ0FBQztJQUVQQSxPQUFPLEdBQUdkLEtBQUssQ0FBRTtNQUNmZSxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQUVELE9BQVEsQ0FBQztJQUVaLE1BQU1FLE9BQU8sR0FBRyxJQUFJWixJQUFJLENBQUVLLHVCQUF1QixFQUFFO01BQ2pEUSxJQUFJLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRSxFQUFHLENBQUM7TUFDeEJpQixRQUFRLEVBQUU7SUFDWixDQUFFLENBQUM7SUFDSCxNQUFNQyxXQUFXLEdBQUcsSUFBSWYsSUFBSSxDQUFFLEVBQUUsRUFBRTtNQUFFYSxJQUFJLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRSxFQUFHO0lBQUUsQ0FBRSxDQUFDOztJQUVoRTtJQUNBLE1BQU1tQixnQkFBZ0IsR0FBR3JCLE9BQU8sQ0FBQ3NCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDL0MsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLElBQUlWLHNCQUFzQixDQUFDVyxLQUFLLENBQUNDLEdBQUcsRUFBRUYsQ0FBQyxFQUFFLEVBQUc7TUFDNURKLFdBQVcsQ0FBQ08sTUFBTSxHQUFHSCxDQUFDO01BQ3RCSCxnQkFBZ0IsQ0FBQ08sYUFBYSxDQUFFUixXQUFXLENBQUNTLE1BQU8sQ0FBQztJQUN0RDs7SUFFQTtJQUNBZixzQkFBc0IsQ0FBQ2dCLElBQUksQ0FBRUMsS0FBSyxJQUFJO01BQ3BDWCxXQUFXLENBQUNPLE1BQU0sR0FBR0ksS0FBSztJQUM1QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUNkZixPQUFPLEVBQ1AsSUFBSWIsSUFBSSxDQUFFO01BQ1JZLE9BQU8sRUFBRSxDQUFDO01BQ1ZnQixRQUFRLEVBQUUsQ0FDUixJQUFJN0IsUUFBUSxDQUFFaUIsV0FBVyxFQUFFO1FBQ3pCYSxXQUFXLEVBQUVaO01BQ2YsQ0FBRSxDQUFDLEVBQ0gsSUFBSVosa0JBQWtCLENBQ3BCSyxzQkFBc0IsRUFDdEIsSUFBSWYsZUFBZSxDQUFFLENBQUVlLHNCQUFzQixDQUFFLEVBQUVvQixLQUFLLElBQUlBLEtBQUssR0FBR3BCLHNCQUFzQixDQUFDVyxLQUFLLENBQUNDLEdBQUksQ0FBQyxFQUNwRyxJQUFJM0IsZUFBZSxDQUFFLENBQUVlLHNCQUFzQixDQUFFLEVBQUVvQixLQUFLLElBQUlBLEtBQUssR0FBR3BCLHNCQUFzQixDQUFDVyxLQUFLLENBQUNVLEdBQUksQ0FDckcsQ0FBQztJQUVMLENBQUUsQ0FBQyxDQUNKO0lBRUQsSUFBSSxDQUFDQyxNQUFNLENBQUVyQixPQUFRLENBQUM7RUFDeEI7QUFDRjtBQUVBUixlQUFlLENBQUM4QixRQUFRLENBQUUsU0FBUyxFQUFFekIsT0FBUSxDQUFDO0FBQzlDLGVBQWVBLE9BQU8ifQ==