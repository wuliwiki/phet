// Copyright 2018-2020, University of Colorado Boulder

/**
 * The ideal "target" for a collection box, that shows an additional shape-based representation of the fraction to the
 * side.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import fractionsCommon from '../../fractionsCommon.js';
import FilledPartition from './FilledPartition.js';
import Target from './Target.js';
class ShapeTarget extends Target {
  /**
   * @param {Fraction} fraction
   * @param {Array.<FilledPartition>} filledPartitions
   */
  constructor(fraction, filledPartitions) {
    super(fraction);

    // @public {Array.<FilledPartition>}
    this.filledPartitions = filledPartitions;
  }

  /**
   * Returns a target filled in the specified manner.
   * @public
   *
   * @param {ShapePartition} shapePartition
   * @param {Fraction} fraction
   * @param {ColorDef} color
   * @param {FillType} fillType
   * @returns {ShapeTarget}
   */
  static fill(shapePartition, fraction, color, fillType) {
    return new ShapeTarget(fraction, FilledPartition.fill(shapePartition, fraction, color, fillType));
  }

  /**
   * Returns a target filled sequentially from the start.
   * @public
   *
   * @param {ShapePartition} shapePartition
   * @param {Fraction} fraction
   * @param {ColorDef} color
   * @returns {ShapeTarget}
   */
  static sequentialFill(shapePartition, fraction, color) {
    return new ShapeTarget(fraction, FilledPartition.sequentialFill(shapePartition, fraction, color));
  }

  /**
   * Returns a target filled randomly.
   * @public
   *
   * @param {ShapePartition} shapePartition
   * @param {Fraction} fraction
   * @param {ColorDef} color
   * @returns {ShapeTarget}
   */
  static randomFill(shapePartition, fraction, color) {
    return new ShapeTarget(fraction, FilledPartition.randomFill(shapePartition, fraction, color));
  }
}
fractionsCommon.register('ShapeTarget', ShapeTarget);
export default ShapeTarget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcmFjdGlvbnNDb21tb24iLCJGaWxsZWRQYXJ0aXRpb24iLCJUYXJnZXQiLCJTaGFwZVRhcmdldCIsImNvbnN0cnVjdG9yIiwiZnJhY3Rpb24iLCJmaWxsZWRQYXJ0aXRpb25zIiwiZmlsbCIsInNoYXBlUGFydGl0aW9uIiwiY29sb3IiLCJmaWxsVHlwZSIsInNlcXVlbnRpYWxGaWxsIiwicmFuZG9tRmlsbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2hhcGVUYXJnZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIGlkZWFsIFwidGFyZ2V0XCIgZm9yIGEgY29sbGVjdGlvbiBib3gsIHRoYXQgc2hvd3MgYW4gYWRkaXRpb25hbCBzaGFwZS1iYXNlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZnJhY3Rpb24gdG8gdGhlXHJcbiAqIHNpZGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgZnJhY3Rpb25zQ29tbW9uIGZyb20gJy4uLy4uL2ZyYWN0aW9uc0NvbW1vbi5qcyc7XHJcbmltcG9ydCBGaWxsZWRQYXJ0aXRpb24gZnJvbSAnLi9GaWxsZWRQYXJ0aXRpb24uanMnO1xyXG5pbXBvcnQgVGFyZ2V0IGZyb20gJy4vVGFyZ2V0LmpzJztcclxuXHJcbmNsYXNzIFNoYXBlVGFyZ2V0IGV4dGVuZHMgVGFyZ2V0IHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge0ZyYWN0aW9ufSBmcmFjdGlvblxyXG4gICAqIEBwYXJhbSB7QXJyYXkuPEZpbGxlZFBhcnRpdGlvbj59IGZpbGxlZFBhcnRpdGlvbnNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZnJhY3Rpb24sIGZpbGxlZFBhcnRpdGlvbnMgKSB7XHJcbiAgICBzdXBlciggZnJhY3Rpb24gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtBcnJheS48RmlsbGVkUGFydGl0aW9uPn1cclxuICAgIHRoaXMuZmlsbGVkUGFydGl0aW9ucyA9IGZpbGxlZFBhcnRpdGlvbnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgdGFyZ2V0IGZpbGxlZCBpbiB0aGUgc3BlY2lmaWVkIG1hbm5lci5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1NoYXBlUGFydGl0aW9ufSBzaGFwZVBhcnRpdGlvblxyXG4gICAqIEBwYXJhbSB7RnJhY3Rpb259IGZyYWN0aW9uXHJcbiAgICogQHBhcmFtIHtDb2xvckRlZn0gY29sb3JcclxuICAgKiBAcGFyYW0ge0ZpbGxUeXBlfSBmaWxsVHlwZVxyXG4gICAqIEByZXR1cm5zIHtTaGFwZVRhcmdldH1cclxuICAgKi9cclxuICBzdGF0aWMgZmlsbCggc2hhcGVQYXJ0aXRpb24sIGZyYWN0aW9uLCBjb2xvciwgZmlsbFR5cGUgKSB7XHJcbiAgICByZXR1cm4gbmV3IFNoYXBlVGFyZ2V0KCBmcmFjdGlvbiwgRmlsbGVkUGFydGl0aW9uLmZpbGwoIHNoYXBlUGFydGl0aW9uLCBmcmFjdGlvbiwgY29sb3IsIGZpbGxUeXBlICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSB0YXJnZXQgZmlsbGVkIHNlcXVlbnRpYWxseSBmcm9tIHRoZSBzdGFydC5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1NoYXBlUGFydGl0aW9ufSBzaGFwZVBhcnRpdGlvblxyXG4gICAqIEBwYXJhbSB7RnJhY3Rpb259IGZyYWN0aW9uXHJcbiAgICogQHBhcmFtIHtDb2xvckRlZn0gY29sb3JcclxuICAgKiBAcmV0dXJucyB7U2hhcGVUYXJnZXR9XHJcbiAgICovXHJcbiAgc3RhdGljIHNlcXVlbnRpYWxGaWxsKCBzaGFwZVBhcnRpdGlvbiwgZnJhY3Rpb24sIGNvbG9yICkge1xyXG4gICAgcmV0dXJuIG5ldyBTaGFwZVRhcmdldCggZnJhY3Rpb24sIEZpbGxlZFBhcnRpdGlvbi5zZXF1ZW50aWFsRmlsbCggc2hhcGVQYXJ0aXRpb24sIGZyYWN0aW9uLCBjb2xvciApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgdGFyZ2V0IGZpbGxlZCByYW5kb21seS5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1NoYXBlUGFydGl0aW9ufSBzaGFwZVBhcnRpdGlvblxyXG4gICAqIEBwYXJhbSB7RnJhY3Rpb259IGZyYWN0aW9uXHJcbiAgICogQHBhcmFtIHtDb2xvckRlZn0gY29sb3JcclxuICAgKiBAcmV0dXJucyB7U2hhcGVUYXJnZXR9XHJcbiAgICovXHJcbiAgc3RhdGljIHJhbmRvbUZpbGwoIHNoYXBlUGFydGl0aW9uLCBmcmFjdGlvbiwgY29sb3IgKSB7XHJcbiAgICByZXR1cm4gbmV3IFNoYXBlVGFyZ2V0KCBmcmFjdGlvbiwgRmlsbGVkUGFydGl0aW9uLnJhbmRvbUZpbGwoIHNoYXBlUGFydGl0aW9uLCBmcmFjdGlvbiwgY29sb3IgKSApO1xyXG4gIH1cclxufVxyXG5cclxuZnJhY3Rpb25zQ29tbW9uLnJlZ2lzdGVyKCAnU2hhcGVUYXJnZXQnLCBTaGFwZVRhcmdldCApO1xyXG5leHBvcnQgZGVmYXVsdCBTaGFwZVRhcmdldDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFDbEQsT0FBT0MsTUFBTSxNQUFNLGFBQWE7QUFFaEMsTUFBTUMsV0FBVyxTQUFTRCxNQUFNLENBQUM7RUFDL0I7QUFDRjtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsUUFBUSxFQUFFQyxnQkFBZ0IsRUFBRztJQUN4QyxLQUFLLENBQUVELFFBQVMsQ0FBQzs7SUFFakI7SUFDQSxJQUFJLENBQUNDLGdCQUFnQixHQUFHQSxnQkFBZ0I7RUFDMUM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPQyxJQUFJQSxDQUFFQyxjQUFjLEVBQUVILFFBQVEsRUFBRUksS0FBSyxFQUFFQyxRQUFRLEVBQUc7SUFDdkQsT0FBTyxJQUFJUCxXQUFXLENBQUVFLFFBQVEsRUFBRUosZUFBZSxDQUFDTSxJQUFJLENBQUVDLGNBQWMsRUFBRUgsUUFBUSxFQUFFSSxLQUFLLEVBQUVDLFFBQVMsQ0FBRSxDQUFDO0VBQ3ZHOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLE9BQU9DLGNBQWNBLENBQUVILGNBQWMsRUFBRUgsUUFBUSxFQUFFSSxLQUFLLEVBQUc7SUFDdkQsT0FBTyxJQUFJTixXQUFXLENBQUVFLFFBQVEsRUFBRUosZUFBZSxDQUFDVSxjQUFjLENBQUVILGNBQWMsRUFBRUgsUUFBUSxFQUFFSSxLQUFNLENBQUUsQ0FBQztFQUN2Rzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPRyxVQUFVQSxDQUFFSixjQUFjLEVBQUVILFFBQVEsRUFBRUksS0FBSyxFQUFHO0lBQ25ELE9BQU8sSUFBSU4sV0FBVyxDQUFFRSxRQUFRLEVBQUVKLGVBQWUsQ0FBQ1csVUFBVSxDQUFFSixjQUFjLEVBQUVILFFBQVEsRUFBRUksS0FBTSxDQUFFLENBQUM7RUFDbkc7QUFDRjtBQUVBVCxlQUFlLENBQUNhLFFBQVEsQ0FBRSxhQUFhLEVBQUVWLFdBQVksQ0FBQztBQUN0RCxlQUFlQSxXQUFXIn0=