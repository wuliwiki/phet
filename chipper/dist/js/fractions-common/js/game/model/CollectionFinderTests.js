// Copyright 2018-2020, University of Colorado Boulder

/**
 * Tests for CollectionFinder
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import PrimeFactorization from '../../common/model/PrimeFactorization.js';
import CollectionFinder from './CollectionFinder.js';
function compareFractionResults(assert, fraction, finderOptions, searchOptions) {
  const finder = new CollectionFinder(finderOptions);
  const fastResults = finder.search(fraction, searchOptions);
  const bruteResults = finder.bruteForceSearch(fraction, searchOptions);
  fastResults.sort((a, b) => a.compare(b));
  bruteResults.sort((a, b) => a.compare(b));
  assert.ok(fastResults.length === bruteResults.length, `Both result searches should find the same result for ${fraction}`);
  for (let i = 0; i < fastResults.length; i++) {
    assert.ok(fastResults[i].equals(bruteResults[i]), `Entry ${i} for both searches should have the same result`);
  }
}
QUnit.module('CollectionFinder');
QUnit.test('Fractions adding to 1', assert => {
  compareFractionResults(assert, new Fraction(1, 1), {
    denominators: _.range(1, 9).map(PrimeFactorization.factor)
  }, {});
});
QUnit.test('Fractions adding to 2', assert => {
  compareFractionResults(assert, new Fraction(2, 1), {
    denominators: _.range(1, 9).map(PrimeFactorization.factor)
  }, {});
});
QUnit.test('Fractions adding to 4', assert => {
  compareFractionResults(assert, new Fraction(4, 1), {
    denominators: _.range(1, 9).map(PrimeFactorization.factor)
  }, {});
});
QUnit.test('Fractions adding to 7/3', assert => {
  compareFractionResults(assert, new Fraction(7, 3), {
    denominators: _.range(1, 9).map(PrimeFactorization.factor)
  }, {});
});
QUnit.test('Fractions adding to 11/7', assert => {
  compareFractionResults(assert, new Fraction(11, 7), {
    denominators: _.range(1, 9).map(PrimeFactorization.factor)
  }, {});
});
QUnit.test('Fractions adding to 4/1 with 1..12 denominators with no more than 8 each (max total 15)', assert => {
  compareFractionResults(assert, new Fraction(2, 1), {
    denominators: _.range(1, 13).map(PrimeFactorization.factor)
  }, {
    maxQuantity: 8,
    maxTotalQuantity: 15
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGcmFjdGlvbiIsIlByaW1lRmFjdG9yaXphdGlvbiIsIkNvbGxlY3Rpb25GaW5kZXIiLCJjb21wYXJlRnJhY3Rpb25SZXN1bHRzIiwiYXNzZXJ0IiwiZnJhY3Rpb24iLCJmaW5kZXJPcHRpb25zIiwic2VhcmNoT3B0aW9ucyIsImZpbmRlciIsImZhc3RSZXN1bHRzIiwic2VhcmNoIiwiYnJ1dGVSZXN1bHRzIiwiYnJ1dGVGb3JjZVNlYXJjaCIsInNvcnQiLCJhIiwiYiIsImNvbXBhcmUiLCJvayIsImxlbmd0aCIsImkiLCJlcXVhbHMiLCJRVW5pdCIsIm1vZHVsZSIsInRlc3QiLCJkZW5vbWluYXRvcnMiLCJfIiwicmFuZ2UiLCJtYXAiLCJmYWN0b3IiLCJtYXhRdWFudGl0eSIsIm1heFRvdGFsUXVhbnRpdHkiXSwic291cmNlcyI6WyJDb2xsZWN0aW9uRmluZGVyVGVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGVzdHMgZm9yIENvbGxlY3Rpb25GaW5kZXJcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBGcmFjdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL21vZGVsL0ZyYWN0aW9uLmpzJztcclxuaW1wb3J0IFByaW1lRmFjdG9yaXphdGlvbiBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUHJpbWVGYWN0b3JpemF0aW9uLmpzJztcclxuaW1wb3J0IENvbGxlY3Rpb25GaW5kZXIgZnJvbSAnLi9Db2xsZWN0aW9uRmluZGVyLmpzJztcclxuXHJcbmZ1bmN0aW9uIGNvbXBhcmVGcmFjdGlvblJlc3VsdHMoIGFzc2VydCwgZnJhY3Rpb24sIGZpbmRlck9wdGlvbnMsIHNlYXJjaE9wdGlvbnMgKSB7XHJcbiAgY29uc3QgZmluZGVyID0gbmV3IENvbGxlY3Rpb25GaW5kZXIoIGZpbmRlck9wdGlvbnMgKTtcclxuXHJcbiAgY29uc3QgZmFzdFJlc3VsdHMgPSBmaW5kZXIuc2VhcmNoKCBmcmFjdGlvbiwgc2VhcmNoT3B0aW9ucyApO1xyXG4gIGNvbnN0IGJydXRlUmVzdWx0cyA9IGZpbmRlci5icnV0ZUZvcmNlU2VhcmNoKCBmcmFjdGlvbiwgc2VhcmNoT3B0aW9ucyApO1xyXG5cclxuICBmYXN0UmVzdWx0cy5zb3J0KCAoIGEsIGIgKSA9PiBhLmNvbXBhcmUoIGIgKSApO1xyXG4gIGJydXRlUmVzdWx0cy5zb3J0KCAoIGEsIGIgKSA9PiBhLmNvbXBhcmUoIGIgKSApO1xyXG5cclxuICBhc3NlcnQub2soIGZhc3RSZXN1bHRzLmxlbmd0aCA9PT0gYnJ1dGVSZXN1bHRzLmxlbmd0aCwgYEJvdGggcmVzdWx0IHNlYXJjaGVzIHNob3VsZCBmaW5kIHRoZSBzYW1lIHJlc3VsdCBmb3IgJHtmcmFjdGlvbn1gICk7XHJcblxyXG4gIGZvciAoIGxldCBpID0gMDsgaSA8IGZhc3RSZXN1bHRzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgYXNzZXJ0Lm9rKCBmYXN0UmVzdWx0c1sgaSBdLmVxdWFscyggYnJ1dGVSZXN1bHRzWyBpIF0gKSwgYEVudHJ5ICR7aX0gZm9yIGJvdGggc2VhcmNoZXMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgcmVzdWx0YCApO1xyXG4gIH1cclxufVxyXG5cclxuUVVuaXQubW9kdWxlKCAnQ29sbGVjdGlvbkZpbmRlcicgKTtcclxuXHJcblFVbml0LnRlc3QoICdGcmFjdGlvbnMgYWRkaW5nIHRvIDEnLCBhc3NlcnQgPT4ge1xyXG4gIGNvbXBhcmVGcmFjdGlvblJlc3VsdHMoIGFzc2VydCwgbmV3IEZyYWN0aW9uKCAxLCAxICksIHtcclxuICAgIGRlbm9taW5hdG9yczogXy5yYW5nZSggMSwgOSApLm1hcCggUHJpbWVGYWN0b3JpemF0aW9uLmZhY3RvciApXHJcbiAgfSwge30gKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJ0ZyYWN0aW9ucyBhZGRpbmcgdG8gMicsIGFzc2VydCA9PiB7XHJcbiAgY29tcGFyZUZyYWN0aW9uUmVzdWx0cyggYXNzZXJ0LCBuZXcgRnJhY3Rpb24oIDIsIDEgKSwge1xyXG4gICAgZGVub21pbmF0b3JzOiBfLnJhbmdlKCAxLCA5ICkubWFwKCBQcmltZUZhY3Rvcml6YXRpb24uZmFjdG9yIClcclxuICB9LCB7fSApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnRnJhY3Rpb25zIGFkZGluZyB0byA0JywgYXNzZXJ0ID0+IHtcclxuICBjb21wYXJlRnJhY3Rpb25SZXN1bHRzKCBhc3NlcnQsIG5ldyBGcmFjdGlvbiggNCwgMSApLCB7XHJcbiAgICBkZW5vbWluYXRvcnM6IF8ucmFuZ2UoIDEsIDkgKS5tYXAoIFByaW1lRmFjdG9yaXphdGlvbi5mYWN0b3IgKVxyXG4gIH0sIHt9ICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICdGcmFjdGlvbnMgYWRkaW5nIHRvIDcvMycsIGFzc2VydCA9PiB7XHJcbiAgY29tcGFyZUZyYWN0aW9uUmVzdWx0cyggYXNzZXJ0LCBuZXcgRnJhY3Rpb24oIDcsIDMgKSwge1xyXG4gICAgZGVub21pbmF0b3JzOiBfLnJhbmdlKCAxLCA5ICkubWFwKCBQcmltZUZhY3Rvcml6YXRpb24uZmFjdG9yIClcclxuICB9LCB7fSApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnRnJhY3Rpb25zIGFkZGluZyB0byAxMS83JywgYXNzZXJ0ID0+IHtcclxuICBjb21wYXJlRnJhY3Rpb25SZXN1bHRzKCBhc3NlcnQsIG5ldyBGcmFjdGlvbiggMTEsIDcgKSwge1xyXG4gICAgZGVub21pbmF0b3JzOiBfLnJhbmdlKCAxLCA5ICkubWFwKCBQcmltZUZhY3Rvcml6YXRpb24uZmFjdG9yIClcclxuICB9LCB7fSApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnRnJhY3Rpb25zIGFkZGluZyB0byA0LzEgd2l0aCAxLi4xMiBkZW5vbWluYXRvcnMgd2l0aCBubyBtb3JlIHRoYW4gOCBlYWNoIChtYXggdG90YWwgMTUpJywgYXNzZXJ0ID0+IHtcclxuICBjb21wYXJlRnJhY3Rpb25SZXN1bHRzKCBhc3NlcnQsIG5ldyBGcmFjdGlvbiggMiwgMSApLCB7XHJcbiAgICBkZW5vbWluYXRvcnM6IF8ucmFuZ2UoIDEsIDEzICkubWFwKCBQcmltZUZhY3Rvcml6YXRpb24uZmFjdG9yIClcclxuICB9LCB7XHJcbiAgICBtYXhRdWFudGl0eTogOCxcclxuICAgIG1heFRvdGFsUXVhbnRpdHk6IDE1XHJcbiAgfSApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw2Q0FBNkM7QUFDbEUsT0FBT0Msa0JBQWtCLE1BQU0sMENBQTBDO0FBQ3pFLE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUVwRCxTQUFTQyxzQkFBc0JBLENBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLGFBQWEsRUFBRztFQUNoRixNQUFNQyxNQUFNLEdBQUcsSUFBSU4sZ0JBQWdCLENBQUVJLGFBQWMsQ0FBQztFQUVwRCxNQUFNRyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0UsTUFBTSxDQUFFTCxRQUFRLEVBQUVFLGFBQWMsQ0FBQztFQUM1RCxNQUFNSSxZQUFZLEdBQUdILE1BQU0sQ0FBQ0ksZ0JBQWdCLENBQUVQLFFBQVEsRUFBRUUsYUFBYyxDQUFDO0VBRXZFRSxXQUFXLENBQUNJLElBQUksQ0FBRSxDQUFFQyxDQUFDLEVBQUVDLENBQUMsS0FBTUQsQ0FBQyxDQUFDRSxPQUFPLENBQUVELENBQUUsQ0FBRSxDQUFDO0VBQzlDSixZQUFZLENBQUNFLElBQUksQ0FBRSxDQUFFQyxDQUFDLEVBQUVDLENBQUMsS0FBTUQsQ0FBQyxDQUFDRSxPQUFPLENBQUVELENBQUUsQ0FBRSxDQUFDO0VBRS9DWCxNQUFNLENBQUNhLEVBQUUsQ0FBRVIsV0FBVyxDQUFDUyxNQUFNLEtBQUtQLFlBQVksQ0FBQ08sTUFBTSxFQUFHLHdEQUF1RGIsUUFBUyxFQUFFLENBQUM7RUFFM0gsS0FBTSxJQUFJYyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdWLFdBQVcsQ0FBQ1MsTUFBTSxFQUFFQyxDQUFDLEVBQUUsRUFBRztJQUM3Q2YsTUFBTSxDQUFDYSxFQUFFLENBQUVSLFdBQVcsQ0FBRVUsQ0FBQyxDQUFFLENBQUNDLE1BQU0sQ0FBRVQsWUFBWSxDQUFFUSxDQUFDLENBQUcsQ0FBQyxFQUFHLFNBQVFBLENBQUUsZ0RBQWdELENBQUM7RUFDdkg7QUFDRjtBQUVBRSxLQUFLLENBQUNDLE1BQU0sQ0FBRSxrQkFBbUIsQ0FBQztBQUVsQ0QsS0FBSyxDQUFDRSxJQUFJLENBQUUsdUJBQXVCLEVBQUVuQixNQUFNLElBQUk7RUFDN0NELHNCQUFzQixDQUFFQyxNQUFNLEVBQUUsSUFBSUosUUFBUSxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsRUFBRTtJQUNwRHdCLFlBQVksRUFBRUMsQ0FBQyxDQUFDQyxLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDQyxHQUFHLENBQUUxQixrQkFBa0IsQ0FBQzJCLE1BQU87RUFDL0QsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO0FBQ1QsQ0FBRSxDQUFDO0FBRUhQLEtBQUssQ0FBQ0UsSUFBSSxDQUFFLHVCQUF1QixFQUFFbkIsTUFBTSxJQUFJO0VBQzdDRCxzQkFBc0IsQ0FBRUMsTUFBTSxFQUFFLElBQUlKLFFBQVEsQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUU7SUFDcER3QixZQUFZLEVBQUVDLENBQUMsQ0FBQ0MsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQ0MsR0FBRyxDQUFFMUIsa0JBQWtCLENBQUMyQixNQUFPO0VBQy9ELENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztBQUNULENBQUUsQ0FBQztBQUVIUCxLQUFLLENBQUNFLElBQUksQ0FBRSx1QkFBdUIsRUFBRW5CLE1BQU0sSUFBSTtFQUM3Q0Qsc0JBQXNCLENBQUVDLE1BQU0sRUFBRSxJQUFJSixRQUFRLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFO0lBQ3BEd0IsWUFBWSxFQUFFQyxDQUFDLENBQUNDLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUNDLEdBQUcsQ0FBRTFCLGtCQUFrQixDQUFDMkIsTUFBTztFQUMvRCxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7QUFDVCxDQUFFLENBQUM7QUFFSFAsS0FBSyxDQUFDRSxJQUFJLENBQUUseUJBQXlCLEVBQUVuQixNQUFNLElBQUk7RUFDL0NELHNCQUFzQixDQUFFQyxNQUFNLEVBQUUsSUFBSUosUUFBUSxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsRUFBRTtJQUNwRHdCLFlBQVksRUFBRUMsQ0FBQyxDQUFDQyxLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDQyxHQUFHLENBQUUxQixrQkFBa0IsQ0FBQzJCLE1BQU87RUFDL0QsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO0FBQ1QsQ0FBRSxDQUFDO0FBRUhQLEtBQUssQ0FBQ0UsSUFBSSxDQUFFLDBCQUEwQixFQUFFbkIsTUFBTSxJQUFJO0VBQ2hERCxzQkFBc0IsQ0FBRUMsTUFBTSxFQUFFLElBQUlKLFFBQVEsQ0FBRSxFQUFFLEVBQUUsQ0FBRSxDQUFDLEVBQUU7SUFDckR3QixZQUFZLEVBQUVDLENBQUMsQ0FBQ0MsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQ0MsR0FBRyxDQUFFMUIsa0JBQWtCLENBQUMyQixNQUFPO0VBQy9ELENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztBQUNULENBQUUsQ0FBQztBQUVIUCxLQUFLLENBQUNFLElBQUksQ0FBRSx5RkFBeUYsRUFBRW5CLE1BQU0sSUFBSTtFQUMvR0Qsc0JBQXNCLENBQUVDLE1BQU0sRUFBRSxJQUFJSixRQUFRLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFO0lBQ3BEd0IsWUFBWSxFQUFFQyxDQUFDLENBQUNDLEtBQUssQ0FBRSxDQUFDLEVBQUUsRUFBRyxDQUFDLENBQUNDLEdBQUcsQ0FBRTFCLGtCQUFrQixDQUFDMkIsTUFBTztFQUNoRSxDQUFDLEVBQUU7SUFDREMsV0FBVyxFQUFFLENBQUM7SUFDZEMsZ0JBQWdCLEVBQUU7RUFDcEIsQ0FBRSxDQUFDO0FBQ0wsQ0FBRSxDQUFDIn0=