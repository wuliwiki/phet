// Copyright 2018-2022, University of Colorado Boulder

/**
 * Displays a filled partition (shapes) visually.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import merge from '../../../../phet-core/js/merge.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import FractionsCommonColors from '../../common/view/FractionsCommonColors.js';
import fractionsCommon from '../../fractionsCommon.js';
class FilledPartitionNode extends Node {
  /**
   * @param {FilledPartition} filledPartition
   * @param {Object} [options]
   */
  constructor(filledPartition, options) {
    super();
    options = merge({
      // {PaintDef} - Fills and strokes
      primaryFill: filledPartition.color,
      backgroundFill: FractionsCommonColors.shapePartitionBackgroundProperty,
      interiorStroke: FractionsCommonColors.shapePartitionBorderProperty,
      borderStroke: FractionsCommonColors.shapePartitionBorderProperty,
      interiorLineWidth: 0.7,
      borderLineWidth: 2 * 0.7,
      // {number}
      layoutScale: 1,
      // {boolean} - If true, it will apply relative scaling so that partitions will have closer to the same width
      adaptiveScale: false
    }, options);
    assert && assert(options.primaryFill, 'primaryFill should be provided');
    let scale = options.layoutScale;
    if (options.adaptiveScale) {
      const scaleMultiplier = Math.min(96 / filledPartition.shapePartition.outlineShape.bounds.width, 80 / filledPartition.shapePartition.outlineShape.bounds.height);
      scale *= scaleMultiplier;
    }
    this.children = [...filledPartition.shapePartition.shapes.map((shape, index) => new Path(shape, {
      fill: filledPartition.fills[index] ? options.primaryFill : options.backgroundFill,
      stroke: options.interiorStroke,
      lineWidth: options.interiorLineWidth / scale
    })), new Path(filledPartition.shapePartition.outlineShape, {
      stroke: options.borderStroke,
      lineWidth: options.borderLineWidth / scale
    })];
    this.scale(scale);
    this.mutate(options);
  }
}
fractionsCommon.register('FilledPartitionNode', FilledPartitionNode);
export default FilledPartitionNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJQYXRoIiwiRnJhY3Rpb25zQ29tbW9uQ29sb3JzIiwiZnJhY3Rpb25zQ29tbW9uIiwiRmlsbGVkUGFydGl0aW9uTm9kZSIsImNvbnN0cnVjdG9yIiwiZmlsbGVkUGFydGl0aW9uIiwib3B0aW9ucyIsInByaW1hcnlGaWxsIiwiY29sb3IiLCJiYWNrZ3JvdW5kRmlsbCIsInNoYXBlUGFydGl0aW9uQmFja2dyb3VuZFByb3BlcnR5IiwiaW50ZXJpb3JTdHJva2UiLCJzaGFwZVBhcnRpdGlvbkJvcmRlclByb3BlcnR5IiwiYm9yZGVyU3Ryb2tlIiwiaW50ZXJpb3JMaW5lV2lkdGgiLCJib3JkZXJMaW5lV2lkdGgiLCJsYXlvdXRTY2FsZSIsImFkYXB0aXZlU2NhbGUiLCJhc3NlcnQiLCJzY2FsZSIsInNjYWxlTXVsdGlwbGllciIsIk1hdGgiLCJtaW4iLCJzaGFwZVBhcnRpdGlvbiIsIm91dGxpbmVTaGFwZSIsImJvdW5kcyIsIndpZHRoIiwiaGVpZ2h0IiwiY2hpbGRyZW4iLCJzaGFwZXMiLCJtYXAiLCJzaGFwZSIsImluZGV4IiwiZmlsbCIsImZpbGxzIiwic3Ryb2tlIiwibGluZVdpZHRoIiwibXV0YXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGaWxsZWRQYXJ0aXRpb25Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIGEgZmlsbGVkIHBhcnRpdGlvbiAoc2hhcGVzKSB2aXN1YWxseS5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEZyYWN0aW9uc0NvbW1vbkNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9GcmFjdGlvbnNDb21tb25Db2xvcnMuanMnO1xyXG5pbXBvcnQgZnJhY3Rpb25zQ29tbW9uIGZyb20gJy4uLy4uL2ZyYWN0aW9uc0NvbW1vbi5qcyc7XHJcblxyXG5jbGFzcyBGaWxsZWRQYXJ0aXRpb25Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtGaWxsZWRQYXJ0aXRpb259IGZpbGxlZFBhcnRpdGlvblxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZmlsbGVkUGFydGl0aW9uLCBvcHRpb25zICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgLy8ge1BhaW50RGVmfSAtIEZpbGxzIGFuZCBzdHJva2VzXHJcbiAgICAgIHByaW1hcnlGaWxsOiBmaWxsZWRQYXJ0aXRpb24uY29sb3IsXHJcbiAgICAgIGJhY2tncm91bmRGaWxsOiBGcmFjdGlvbnNDb21tb25Db2xvcnMuc2hhcGVQYXJ0aXRpb25CYWNrZ3JvdW5kUHJvcGVydHksXHJcbiAgICAgIGludGVyaW9yU3Ryb2tlOiBGcmFjdGlvbnNDb21tb25Db2xvcnMuc2hhcGVQYXJ0aXRpb25Cb3JkZXJQcm9wZXJ0eSxcclxuICAgICAgYm9yZGVyU3Ryb2tlOiBGcmFjdGlvbnNDb21tb25Db2xvcnMuc2hhcGVQYXJ0aXRpb25Cb3JkZXJQcm9wZXJ0eSxcclxuXHJcbiAgICAgIGludGVyaW9yTGluZVdpZHRoOiAwLjcsXHJcbiAgICAgIGJvcmRlckxpbmVXaWR0aDogMiAqIDAuNyxcclxuXHJcbiAgICAgIC8vIHtudW1iZXJ9XHJcbiAgICAgIGxheW91dFNjYWxlOiAxLFxyXG5cclxuICAgICAgLy8ge2Jvb2xlYW59IC0gSWYgdHJ1ZSwgaXQgd2lsbCBhcHBseSByZWxhdGl2ZSBzY2FsaW5nIHNvIHRoYXQgcGFydGl0aW9ucyB3aWxsIGhhdmUgY2xvc2VyIHRvIHRoZSBzYW1lIHdpZHRoXHJcbiAgICAgIGFkYXB0aXZlU2NhbGU6IGZhbHNlXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy5wcmltYXJ5RmlsbCwgJ3ByaW1hcnlGaWxsIHNob3VsZCBiZSBwcm92aWRlZCcgKTtcclxuXHJcbiAgICBsZXQgc2NhbGUgPSBvcHRpb25zLmxheW91dFNjYWxlO1xyXG4gICAgaWYgKCBvcHRpb25zLmFkYXB0aXZlU2NhbGUgKSB7XHJcbiAgICAgIGNvbnN0IHNjYWxlTXVsdGlwbGllciA9IE1hdGgubWluKFxyXG4gICAgICAgIDk2IC8gZmlsbGVkUGFydGl0aW9uLnNoYXBlUGFydGl0aW9uLm91dGxpbmVTaGFwZS5ib3VuZHMud2lkdGgsXHJcbiAgICAgICAgODAgLyBmaWxsZWRQYXJ0aXRpb24uc2hhcGVQYXJ0aXRpb24ub3V0bGluZVNoYXBlLmJvdW5kcy5oZWlnaHRcclxuICAgICAgKTtcclxuICAgICAgc2NhbGUgKj0gc2NhbGVNdWx0aXBsaWVyO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2hpbGRyZW4gPSBbXHJcbiAgICAgIC4uLmZpbGxlZFBhcnRpdGlvbi5zaGFwZVBhcnRpdGlvbi5zaGFwZXMubWFwKCAoIHNoYXBlLCBpbmRleCApID0+IG5ldyBQYXRoKCBzaGFwZSwge1xyXG4gICAgICAgIGZpbGw6IGZpbGxlZFBhcnRpdGlvbi5maWxsc1sgaW5kZXggXSA/IG9wdGlvbnMucHJpbWFyeUZpbGwgOiBvcHRpb25zLmJhY2tncm91bmRGaWxsLFxyXG4gICAgICAgIHN0cm9rZTogb3B0aW9ucy5pbnRlcmlvclN0cm9rZSxcclxuICAgICAgICBsaW5lV2lkdGg6IG9wdGlvbnMuaW50ZXJpb3JMaW5lV2lkdGggLyBzY2FsZVxyXG4gICAgICB9ICkgKSxcclxuICAgICAgbmV3IFBhdGgoIGZpbGxlZFBhcnRpdGlvbi5zaGFwZVBhcnRpdGlvbi5vdXRsaW5lU2hhcGUsIHtcclxuICAgICAgICBzdHJva2U6IG9wdGlvbnMuYm9yZGVyU3Ryb2tlLFxyXG4gICAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5ib3JkZXJMaW5lV2lkdGggLyBzY2FsZVxyXG4gICAgICB9IClcclxuICAgIF07XHJcblxyXG4gICAgdGhpcy5zY2FsZSggc2NhbGUgKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZnJhY3Rpb25zQ29tbW9uLnJlZ2lzdGVyKCAnRmlsbGVkUGFydGl0aW9uTm9kZScsIEZpbGxlZFBhcnRpdGlvbk5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbGxlZFBhcnRpdGlvbk5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLHFCQUFxQixNQUFNLDRDQUE0QztBQUM5RSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBRXRELE1BQU1DLG1CQUFtQixTQUFTSixJQUFJLENBQUM7RUFDckM7QUFDRjtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxPQUFPLEVBQUc7SUFDdEMsS0FBSyxDQUFDLENBQUM7SUFFUEEsT0FBTyxHQUFHUixLQUFLLENBQUU7TUFDZjtNQUNBUyxXQUFXLEVBQUVGLGVBQWUsQ0FBQ0csS0FBSztNQUNsQ0MsY0FBYyxFQUFFUixxQkFBcUIsQ0FBQ1MsZ0NBQWdDO01BQ3RFQyxjQUFjLEVBQUVWLHFCQUFxQixDQUFDVyw0QkFBNEI7TUFDbEVDLFlBQVksRUFBRVoscUJBQXFCLENBQUNXLDRCQUE0QjtNQUVoRUUsaUJBQWlCLEVBQUUsR0FBRztNQUN0QkMsZUFBZSxFQUFFLENBQUMsR0FBRyxHQUFHO01BRXhCO01BQ0FDLFdBQVcsRUFBRSxDQUFDO01BRWQ7TUFDQUMsYUFBYSxFQUFFO0lBQ2pCLENBQUMsRUFBRVgsT0FBUSxDQUFDO0lBRVpZLE1BQU0sSUFBSUEsTUFBTSxDQUFFWixPQUFPLENBQUNDLFdBQVcsRUFBRSxnQ0FBaUMsQ0FBQztJQUV6RSxJQUFJWSxLQUFLLEdBQUdiLE9BQU8sQ0FBQ1UsV0FBVztJQUMvQixJQUFLVixPQUFPLENBQUNXLGFBQWEsRUFBRztNQUMzQixNQUFNRyxlQUFlLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUM5QixFQUFFLEdBQUdqQixlQUFlLENBQUNrQixjQUFjLENBQUNDLFlBQVksQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLEVBQzdELEVBQUUsR0FBR3JCLGVBQWUsQ0FBQ2tCLGNBQWMsQ0FBQ0MsWUFBWSxDQUFDQyxNQUFNLENBQUNFLE1BQzFELENBQUM7TUFDRFIsS0FBSyxJQUFJQyxlQUFlO0lBQzFCO0lBRUEsSUFBSSxDQUFDUSxRQUFRLEdBQUcsQ0FDZCxHQUFHdkIsZUFBZSxDQUFDa0IsY0FBYyxDQUFDTSxNQUFNLENBQUNDLEdBQUcsQ0FBRSxDQUFFQyxLQUFLLEVBQUVDLEtBQUssS0FBTSxJQUFJaEMsSUFBSSxDQUFFK0IsS0FBSyxFQUFFO01BQ2pGRSxJQUFJLEVBQUU1QixlQUFlLENBQUM2QixLQUFLLENBQUVGLEtBQUssQ0FBRSxHQUFHMUIsT0FBTyxDQUFDQyxXQUFXLEdBQUdELE9BQU8sQ0FBQ0csY0FBYztNQUNuRjBCLE1BQU0sRUFBRTdCLE9BQU8sQ0FBQ0ssY0FBYztNQUM5QnlCLFNBQVMsRUFBRTlCLE9BQU8sQ0FBQ1EsaUJBQWlCLEdBQUdLO0lBQ3pDLENBQUUsQ0FBRSxDQUFDLEVBQ0wsSUFBSW5CLElBQUksQ0FBRUssZUFBZSxDQUFDa0IsY0FBYyxDQUFDQyxZQUFZLEVBQUU7TUFDckRXLE1BQU0sRUFBRTdCLE9BQU8sQ0FBQ08sWUFBWTtNQUM1QnVCLFNBQVMsRUFBRTlCLE9BQU8sQ0FBQ1MsZUFBZSxHQUFHSTtJQUN2QyxDQUFFLENBQUMsQ0FDSjtJQUVELElBQUksQ0FBQ0EsS0FBSyxDQUFFQSxLQUFNLENBQUM7SUFFbkIsSUFBSSxDQUFDa0IsTUFBTSxDQUFFL0IsT0FBUSxDQUFDO0VBQ3hCO0FBQ0Y7QUFFQUosZUFBZSxDQUFDb0MsUUFBUSxDQUFFLHFCQUFxQixFQUFFbkMsbUJBQW9CLENBQUM7QUFFdEUsZUFBZUEsbUJBQW1CIn0=