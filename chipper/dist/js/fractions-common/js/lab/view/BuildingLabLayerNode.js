// Copyright 2018-2020, University of Colorado Boulder

/**
 * Layer implementation for the lab screens (contains views for groups and pieces)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BuildingLayerNode from '../../building/view/BuildingLayerNode.js';
import fractionsCommon from '../../fractionsCommon.js';
class BuildingLabLayerNode extends BuildingLayerNode {
  /**
   * @param {BuildingModel} model
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Property.<Bounds2>} shapeDragBoundsProperty
   * @param {Property.<Bounds2>} numberDragBoundsProperty
   * @param {Node} shapePanel
   * @param {Node} numberPanel
   */
  constructor(model, modelViewTransform, shapeDragBoundsProperty, numberDragBoundsProperty, shapePanel, numberPanel) {
    super(model, modelViewTransform, shapeDragBoundsProperty, numberDragBoundsProperty, shapePanel, numberPanel);

    // @private {Node}
    this.shapePanel = shapePanel;
    this.numberPanel = numberPanel;
    this.initialize();
  }

  /**
   * Called when a ShapeGroup is dropped.
   * @protected
   * @override
   *
   * @param {ShapeGroup} shapeGroup
   */
  onShapeGroupDrop(shapeGroup) {
    super.onShapeGroupDrop(shapeGroup);
    const modelPoints = shapeGroup.centerPoints;
    const viewPoints = modelPoints.map(modelPoint => this.modelViewTransform.modelToViewPosition(modelPoint));
    const panelBounds = this.shapePanel.bounds.dilated(10);
    if (_.some(viewPoints, viewPoints => panelBounds.containsPoint(viewPoints))) {
      this.model.returnShapeGroup(shapeGroup);
    }
  }

  /**
   * Called when a NumberGroup is dropped.
   * @protected
   * @override
   *
   * @param {NumberGroup} numberGroup
   */
  onNumberGroupDrop(numberGroup) {
    super.onNumberGroupDrop(numberGroup);
    if (this.numberPanel.bounds.dilated(10).containsPoint(this.modelViewTransform.modelToViewPosition(numberGroup.positionProperty.value))) {
      this.model.returnNumberGroup(numberGroup);
    }
  }
}
fractionsCommon.register('BuildingLabLayerNode', BuildingLabLayerNode);
export default BuildingLabLayerNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCdWlsZGluZ0xheWVyTm9kZSIsImZyYWN0aW9uc0NvbW1vbiIsIkJ1aWxkaW5nTGFiTGF5ZXJOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInNoYXBlRHJhZ0JvdW5kc1Byb3BlcnR5IiwibnVtYmVyRHJhZ0JvdW5kc1Byb3BlcnR5Iiwic2hhcGVQYW5lbCIsIm51bWJlclBhbmVsIiwiaW5pdGlhbGl6ZSIsIm9uU2hhcGVHcm91cERyb3AiLCJzaGFwZUdyb3VwIiwibW9kZWxQb2ludHMiLCJjZW50ZXJQb2ludHMiLCJ2aWV3UG9pbnRzIiwibWFwIiwibW9kZWxQb2ludCIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJwYW5lbEJvdW5kcyIsImJvdW5kcyIsImRpbGF0ZWQiLCJfIiwic29tZSIsImNvbnRhaW5zUG9pbnQiLCJyZXR1cm5TaGFwZUdyb3VwIiwib25OdW1iZXJHcm91cERyb3AiLCJudW1iZXJHcm91cCIsInBvc2l0aW9uUHJvcGVydHkiLCJ2YWx1ZSIsInJldHVybk51bWJlckdyb3VwIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCdWlsZGluZ0xhYkxheWVyTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMYXllciBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGxhYiBzY3JlZW5zIChjb250YWlucyB2aWV3cyBmb3IgZ3JvdXBzIGFuZCBwaWVjZXMpXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgQnVpbGRpbmdMYXllck5vZGUgZnJvbSAnLi4vLi4vYnVpbGRpbmcvdmlldy9CdWlsZGluZ0xheWVyTm9kZS5qcyc7XHJcbmltcG9ydCBmcmFjdGlvbnNDb21tb24gZnJvbSAnLi4vLi4vZnJhY3Rpb25zQ29tbW9uLmpzJztcclxuXHJcbmNsYXNzIEJ1aWxkaW5nTGFiTGF5ZXJOb2RlIGV4dGVuZHMgQnVpbGRpbmdMYXllck5vZGUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QnVpbGRpbmdNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPEJvdW5kczI+fSBzaGFwZURyYWdCb3VuZHNQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPEJvdW5kczI+fSBudW1iZXJEcmFnQm91bmRzUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge05vZGV9IHNoYXBlUGFuZWxcclxuICAgKiBAcGFyYW0ge05vZGV9IG51bWJlclBhbmVsXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHNoYXBlRHJhZ0JvdW5kc1Byb3BlcnR5LCBudW1iZXJEcmFnQm91bmRzUHJvcGVydHksIHNoYXBlUGFuZWwsIG51bWJlclBhbmVsICkge1xyXG4gICAgc3VwZXIoIG1vZGVsLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHNoYXBlRHJhZ0JvdW5kc1Byb3BlcnR5LCBudW1iZXJEcmFnQm91bmRzUHJvcGVydHksIHNoYXBlUGFuZWwsIG51bWJlclBhbmVsICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge05vZGV9XHJcbiAgICB0aGlzLnNoYXBlUGFuZWwgPSBzaGFwZVBhbmVsO1xyXG4gICAgdGhpcy5udW1iZXJQYW5lbCA9IG51bWJlclBhbmVsO1xyXG5cclxuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gYSBTaGFwZUdyb3VwIGlzIGRyb3BwZWQuXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTaGFwZUdyb3VwfSBzaGFwZUdyb3VwXHJcbiAgICovXHJcbiAgb25TaGFwZUdyb3VwRHJvcCggc2hhcGVHcm91cCApIHtcclxuICAgIHN1cGVyLm9uU2hhcGVHcm91cERyb3AoIHNoYXBlR3JvdXAgKTtcclxuXHJcbiAgICBjb25zdCBtb2RlbFBvaW50cyA9IHNoYXBlR3JvdXAuY2VudGVyUG9pbnRzO1xyXG4gICAgY29uc3Qgdmlld1BvaW50cyA9IG1vZGVsUG9pbnRzLm1hcCggbW9kZWxQb2ludCA9PiB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBtb2RlbFBvaW50ICkgKTtcclxuICAgIGNvbnN0IHBhbmVsQm91bmRzID0gdGhpcy5zaGFwZVBhbmVsLmJvdW5kcy5kaWxhdGVkKCAxMCApO1xyXG5cclxuICAgIGlmICggXy5zb21lKCB2aWV3UG9pbnRzLCB2aWV3UG9pbnRzID0+IHBhbmVsQm91bmRzLmNvbnRhaW5zUG9pbnQoIHZpZXdQb2ludHMgKSApICkge1xyXG4gICAgICB0aGlzLm1vZGVsLnJldHVyblNoYXBlR3JvdXAoIHNoYXBlR3JvdXAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIGEgTnVtYmVyR3JvdXAgaXMgZHJvcHBlZC5cclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge051bWJlckdyb3VwfSBudW1iZXJHcm91cFxyXG4gICAqL1xyXG4gIG9uTnVtYmVyR3JvdXBEcm9wKCBudW1iZXJHcm91cCApIHtcclxuICAgIHN1cGVyLm9uTnVtYmVyR3JvdXBEcm9wKCBudW1iZXJHcm91cCApO1xyXG5cclxuICAgIGlmICggdGhpcy5udW1iZXJQYW5lbC5ib3VuZHMuZGlsYXRlZCggMTAgKS5jb250YWluc1BvaW50KCB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBudW1iZXJHcm91cC5wb3NpdGlvblByb3BlcnR5LnZhbHVlICkgKSApIHtcclxuICAgICAgdGhpcy5tb2RlbC5yZXR1cm5OdW1iZXJHcm91cCggbnVtYmVyR3JvdXAgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ0J1aWxkaW5nTGFiTGF5ZXJOb2RlJywgQnVpbGRpbmdMYWJMYXllck5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQnVpbGRpbmdMYWJMYXllck5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGlCQUFpQixNQUFNLDBDQUEwQztBQUN4RSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBRXRELE1BQU1DLG9CQUFvQixTQUFTRixpQkFBaUIsQ0FBQztFQUNuRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsa0JBQWtCLEVBQUVDLHVCQUF1QixFQUFFQyx3QkFBd0IsRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUc7SUFDbkgsS0FBSyxDQUFFTCxLQUFLLEVBQUVDLGtCQUFrQixFQUFFQyx1QkFBdUIsRUFBRUMsd0JBQXdCLEVBQUVDLFVBQVUsRUFBRUMsV0FBWSxDQUFDOztJQUU5RztJQUNBLElBQUksQ0FBQ0QsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQSxXQUFXO0lBRTlCLElBQUksQ0FBQ0MsVUFBVSxDQUFDLENBQUM7RUFDbkI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsZ0JBQWdCQSxDQUFFQyxVQUFVLEVBQUc7SUFDN0IsS0FBSyxDQUFDRCxnQkFBZ0IsQ0FBRUMsVUFBVyxDQUFDO0lBRXBDLE1BQU1DLFdBQVcsR0FBR0QsVUFBVSxDQUFDRSxZQUFZO0lBQzNDLE1BQU1DLFVBQVUsR0FBR0YsV0FBVyxDQUFDRyxHQUFHLENBQUVDLFVBQVUsSUFBSSxJQUFJLENBQUNaLGtCQUFrQixDQUFDYSxtQkFBbUIsQ0FBRUQsVUFBVyxDQUFFLENBQUM7SUFDN0csTUFBTUUsV0FBVyxHQUFHLElBQUksQ0FBQ1gsVUFBVSxDQUFDWSxNQUFNLENBQUNDLE9BQU8sQ0FBRSxFQUFHLENBQUM7SUFFeEQsSUFBS0MsQ0FBQyxDQUFDQyxJQUFJLENBQUVSLFVBQVUsRUFBRUEsVUFBVSxJQUFJSSxXQUFXLENBQUNLLGFBQWEsQ0FBRVQsVUFBVyxDQUFFLENBQUMsRUFBRztNQUNqRixJQUFJLENBQUNYLEtBQUssQ0FBQ3FCLGdCQUFnQixDQUFFYixVQUFXLENBQUM7SUFDM0M7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFYyxpQkFBaUJBLENBQUVDLFdBQVcsRUFBRztJQUMvQixLQUFLLENBQUNELGlCQUFpQixDQUFFQyxXQUFZLENBQUM7SUFFdEMsSUFBSyxJQUFJLENBQUNsQixXQUFXLENBQUNXLE1BQU0sQ0FBQ0MsT0FBTyxDQUFFLEVBQUcsQ0FBQyxDQUFDRyxhQUFhLENBQUUsSUFBSSxDQUFDbkIsa0JBQWtCLENBQUNhLG1CQUFtQixDQUFFUyxXQUFXLENBQUNDLGdCQUFnQixDQUFDQyxLQUFNLENBQUUsQ0FBQyxFQUFHO01BQzlJLElBQUksQ0FBQ3pCLEtBQUssQ0FBQzBCLGlCQUFpQixDQUFFSCxXQUFZLENBQUM7SUFDN0M7RUFDRjtBQUNGO0FBRUExQixlQUFlLENBQUM4QixRQUFRLENBQUUsc0JBQXNCLEVBQUU3QixvQkFBcUIsQ0FBQztBQUN4RSxlQUFlQSxvQkFBb0IifQ==