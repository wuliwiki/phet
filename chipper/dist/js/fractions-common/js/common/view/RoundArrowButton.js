// Copyright 2018-2022, University of Colorado Boulder

/**
 * Shows a round push-button with a directional arrow.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import { Shape } from '../../../../kite/js/imports.js';
import merge from '../../../../phet-core/js/merge.js';
import { Path } from '../../../../scenery/js/imports.js';
import RoundPushButton from '../../../../sun/js/buttons/RoundPushButton.js';
import fractionsCommon from '../../fractionsCommon.js';
import FractionsCommonConstants from '../FractionsCommonConstants.js';
import FractionsCommonColors from './FractionsCommonColors.js';
class RoundArrowButton extends RoundPushButton {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      radius: FractionsCommonConstants.ROUND_BUTTON_RADIUS,
      xMargin: FractionsCommonConstants.ROUND_BUTTON_MARGIN,
      yMargin: FractionsCommonConstants.ROUND_BUTTON_MARGIN,
      fireOnHold: true,
      arrowRotation: 0,
      baseColor: FractionsCommonColors.greenRoundArrowButtonProperty,
      enabledProperty: new BooleanProperty(true)
    }, options);

    // "center" the shape around the origin (where we want it to rotate around)
    const size = options.radius * 0.5;
    const ratio = 0.4;
    const arrowShape = new Shape().moveTo(-size, ratio * size).lineTo(0, (ratio - 1) * size).lineTo(size, ratio * size);
    const arrowPath = new Path(arrowShape, {
      stroke: 'black',
      lineWidth: size * 0.5,
      lineCap: 'round',
      rotation: options.arrowRotation
    });

    // Provide offsets so that it will place our origin at the actual center
    options.content = arrowPath;
    options.xContentOffset = arrowPath.centerX;
    options.yContentOffset = arrowPath.centerY;
    super(options);
  }
}
fractionsCommon.register('RoundArrowButton', RoundArrowButton);
export default RoundArrowButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJTaGFwZSIsIm1lcmdlIiwiUGF0aCIsIlJvdW5kUHVzaEJ1dHRvbiIsImZyYWN0aW9uc0NvbW1vbiIsIkZyYWN0aW9uc0NvbW1vbkNvbnN0YW50cyIsIkZyYWN0aW9uc0NvbW1vbkNvbG9ycyIsIlJvdW5kQXJyb3dCdXR0b24iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJyYWRpdXMiLCJST1VORF9CVVRUT05fUkFESVVTIiwieE1hcmdpbiIsIlJPVU5EX0JVVFRPTl9NQVJHSU4iLCJ5TWFyZ2luIiwiZmlyZU9uSG9sZCIsImFycm93Um90YXRpb24iLCJiYXNlQ29sb3IiLCJncmVlblJvdW5kQXJyb3dCdXR0b25Qcm9wZXJ0eSIsImVuYWJsZWRQcm9wZXJ0eSIsInNpemUiLCJyYXRpbyIsImFycm93U2hhcGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJhcnJvd1BhdGgiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJsaW5lQ2FwIiwicm90YXRpb24iLCJjb250ZW50IiwieENvbnRlbnRPZmZzZXQiLCJjZW50ZXJYIiwieUNvbnRlbnRPZmZzZXQiLCJjZW50ZXJZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSb3VuZEFycm93QnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNob3dzIGEgcm91bmQgcHVzaC1idXR0b24gd2l0aCBhIGRpcmVjdGlvbmFsIGFycm93LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUm91bmRQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JvdW5kUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBmcmFjdGlvbnNDb21tb24gZnJvbSAnLi4vLi4vZnJhY3Rpb25zQ29tbW9uLmpzJztcclxuaW1wb3J0IEZyYWN0aW9uc0NvbW1vbkNvbnN0YW50cyBmcm9tICcuLi9GcmFjdGlvbnNDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgRnJhY3Rpb25zQ29tbW9uQ29sb3JzIGZyb20gJy4vRnJhY3Rpb25zQ29tbW9uQ29sb3JzLmpzJztcclxuXHJcbmNsYXNzIFJvdW5kQXJyb3dCdXR0b24gZXh0ZW5kcyBSb3VuZFB1c2hCdXR0b24ge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICByYWRpdXM6IEZyYWN0aW9uc0NvbW1vbkNvbnN0YW50cy5ST1VORF9CVVRUT05fUkFESVVTLFxyXG4gICAgICB4TWFyZ2luOiBGcmFjdGlvbnNDb21tb25Db25zdGFudHMuUk9VTkRfQlVUVE9OX01BUkdJTixcclxuICAgICAgeU1hcmdpbjogRnJhY3Rpb25zQ29tbW9uQ29uc3RhbnRzLlJPVU5EX0JVVFRPTl9NQVJHSU4sXHJcbiAgICAgIGZpcmVPbkhvbGQ6IHRydWUsXHJcbiAgICAgIGFycm93Um90YXRpb246IDAsXHJcbiAgICAgIGJhc2VDb2xvcjogRnJhY3Rpb25zQ29tbW9uQ29sb3JzLmdyZWVuUm91bmRBcnJvd0J1dHRvblByb3BlcnR5LFxyXG4gICAgICBlbmFibGVkUHJvcGVydHk6IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUgKVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFwiY2VudGVyXCIgdGhlIHNoYXBlIGFyb3VuZCB0aGUgb3JpZ2luICh3aGVyZSB3ZSB3YW50IGl0IHRvIHJvdGF0ZSBhcm91bmQpXHJcbiAgICBjb25zdCBzaXplID0gb3B0aW9ucy5yYWRpdXMgKiAwLjU7XHJcbiAgICBjb25zdCByYXRpbyA9IDAuNDtcclxuICAgIGNvbnN0IGFycm93U2hhcGUgPSBuZXcgU2hhcGUoKS5tb3ZlVG8oIC1zaXplLCByYXRpbyAqIHNpemUgKS5saW5lVG8oIDAsICggcmF0aW8gLSAxICkgKiBzaXplICkubGluZVRvKCBzaXplLCByYXRpbyAqIHNpemUgKTtcclxuICAgIGNvbnN0IGFycm93UGF0aCA9IG5ldyBQYXRoKCBhcnJvd1NoYXBlLCB7XHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgbGluZVdpZHRoOiBzaXplICogMC41LFxyXG4gICAgICBsaW5lQ2FwOiAncm91bmQnLFxyXG4gICAgICByb3RhdGlvbjogb3B0aW9ucy5hcnJvd1JvdGF0aW9uXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gUHJvdmlkZSBvZmZzZXRzIHNvIHRoYXQgaXQgd2lsbCBwbGFjZSBvdXIgb3JpZ2luIGF0IHRoZSBhY3R1YWwgY2VudGVyXHJcbiAgICBvcHRpb25zLmNvbnRlbnQgPSBhcnJvd1BhdGg7XHJcbiAgICBvcHRpb25zLnhDb250ZW50T2Zmc2V0ID0gYXJyb3dQYXRoLmNlbnRlclg7XHJcbiAgICBvcHRpb25zLnlDb250ZW50T2Zmc2V0ID0gYXJyb3dQYXRoLmNlbnRlclk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uc0NvbW1vbi5yZWdpc3RlciggJ1JvdW5kQXJyb3dCdXR0b24nLCBSb3VuZEFycm93QnV0dG9uICk7XHJcbmV4cG9ydCBkZWZhdWx0IFJvdW5kQXJyb3dCdXR0b247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsZUFBZSxNQUFNLCtDQUErQztBQUMzRSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHdCQUF3QixNQUFNLGdDQUFnQztBQUNyRSxPQUFPQyxxQkFBcUIsTUFBTSw0QkFBNEI7QUFFOUQsTUFBTUMsZ0JBQWdCLFNBQVNKLGVBQWUsQ0FBQztFQUM3QztBQUNGO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsT0FBTyxFQUFHO0lBQ3JCQSxPQUFPLEdBQUdSLEtBQUssQ0FBRTtNQUNmUyxNQUFNLEVBQUVMLHdCQUF3QixDQUFDTSxtQkFBbUI7TUFDcERDLE9BQU8sRUFBRVAsd0JBQXdCLENBQUNRLG1CQUFtQjtNQUNyREMsT0FBTyxFQUFFVCx3QkFBd0IsQ0FBQ1EsbUJBQW1CO01BQ3JERSxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsYUFBYSxFQUFFLENBQUM7TUFDaEJDLFNBQVMsRUFBRVgscUJBQXFCLENBQUNZLDZCQUE2QjtNQUM5REMsZUFBZSxFQUFFLElBQUlwQixlQUFlLENBQUUsSUFBSztJQUM3QyxDQUFDLEVBQUVVLE9BQVEsQ0FBQzs7SUFFWjtJQUNBLE1BQU1XLElBQUksR0FBR1gsT0FBTyxDQUFDQyxNQUFNLEdBQUcsR0FBRztJQUNqQyxNQUFNVyxLQUFLLEdBQUcsR0FBRztJQUNqQixNQUFNQyxVQUFVLEdBQUcsSUFBSXRCLEtBQUssQ0FBQyxDQUFDLENBQUN1QixNQUFNLENBQUUsQ0FBQ0gsSUFBSSxFQUFFQyxLQUFLLEdBQUdELElBQUssQ0FBQyxDQUFDSSxNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUVILEtBQUssR0FBRyxDQUFDLElBQUtELElBQUssQ0FBQyxDQUFDSSxNQUFNLENBQUVKLElBQUksRUFBRUMsS0FBSyxHQUFHRCxJQUFLLENBQUM7SUFDM0gsTUFBTUssU0FBUyxHQUFHLElBQUl2QixJQUFJLENBQUVvQixVQUFVLEVBQUU7TUFDdENJLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLFNBQVMsRUFBRVAsSUFBSSxHQUFHLEdBQUc7TUFDckJRLE9BQU8sRUFBRSxPQUFPO01BQ2hCQyxRQUFRLEVBQUVwQixPQUFPLENBQUNPO0lBQ3BCLENBQUUsQ0FBQzs7SUFFSDtJQUNBUCxPQUFPLENBQUNxQixPQUFPLEdBQUdMLFNBQVM7SUFDM0JoQixPQUFPLENBQUNzQixjQUFjLEdBQUdOLFNBQVMsQ0FBQ08sT0FBTztJQUMxQ3ZCLE9BQU8sQ0FBQ3dCLGNBQWMsR0FBR1IsU0FBUyxDQUFDUyxPQUFPO0lBRTFDLEtBQUssQ0FBRXpCLE9BQVEsQ0FBQztFQUNsQjtBQUNGO0FBRUFMLGVBQWUsQ0FBQytCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRTVCLGdCQUFpQixDQUFDO0FBQ2hFLGVBQWVBLGdCQUFnQiJ9