// Copyright 2021-2023, University of Colorado Boulder

/**
 * HarmonicsChart is the model base class model for the 'Harmonics' chart in the 'Discrete' and 'Wave Game' screens.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import DiscreteAxisDescriptions from '../../discrete/model/DiscreteAxisDescriptions.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import FMWConstants from '../FMWConstants.js';
import DomainChart from './DomainChart.js';
export default class HarmonicsChart extends DomainChart {
  // fixed y-axis
  // A data set for each harmonic, indexed in harmonic order. Points are ordered by increasing x value.
  constructor(fourierSeries, emphasizedHarmonics, domainProperty, seriesTypeProperty, tProperty, xAxisDescriptionProperty, tandem) {
    super(domainProperty, xAxisDescriptionProperty, fourierSeries.L, fourierSeries.T, tandem);
    this.fourierSeries = fourierSeries;
    this.emphasizedHarmonics = emphasizedHarmonics;
    this.yAxisDescription = DiscreteAxisDescriptions.DEFAULT_Y_AXIS_DESCRIPTION;
    this.harmonicDataSetProperties = fourierSeries.harmonics.map(harmonic => {
      // The number of points for each harmonic plot is a function of order, because higher-frequency harmonics require
      // more points to draw a smooth plot.
      const numberOfPoints = Math.ceil(FMWConstants.MAX_POINTS_PER_DATA_SET * harmonic.order / fourierSeries.harmonics.length);

      // the derived data set for this harmonic
      return new DerivedProperty([harmonic.amplitudeProperty, xAxisDescriptionProperty, domainProperty, seriesTypeProperty, tProperty], (amplitude, xAxisDescription, domain, seriesType, t) => {
        return harmonic.createDataSet(numberOfPoints, fourierSeries.L, fourierSeries.T, xAxisDescription, domain, seriesType, t);
      });
    });
  }
}
fourierMakingWaves.register('HarmonicsChart', HarmonicsChart);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJEaXNjcmV0ZUF4aXNEZXNjcmlwdGlvbnMiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJGTVdDb25zdGFudHMiLCJEb21haW5DaGFydCIsIkhhcm1vbmljc0NoYXJ0IiwiY29uc3RydWN0b3IiLCJmb3VyaWVyU2VyaWVzIiwiZW1waGFzaXplZEhhcm1vbmljcyIsImRvbWFpblByb3BlcnR5Iiwic2VyaWVzVHlwZVByb3BlcnR5IiwidFByb3BlcnR5IiwieEF4aXNEZXNjcmlwdGlvblByb3BlcnR5IiwidGFuZGVtIiwiTCIsIlQiLCJ5QXhpc0Rlc2NyaXB0aW9uIiwiREVGQVVMVF9ZX0FYSVNfREVTQ1JJUFRJT04iLCJoYXJtb25pY0RhdGFTZXRQcm9wZXJ0aWVzIiwiaGFybW9uaWNzIiwibWFwIiwiaGFybW9uaWMiLCJudW1iZXJPZlBvaW50cyIsIk1hdGgiLCJjZWlsIiwiTUFYX1BPSU5UU19QRVJfREFUQV9TRVQiLCJvcmRlciIsImxlbmd0aCIsImFtcGxpdHVkZVByb3BlcnR5IiwiYW1wbGl0dWRlIiwieEF4aXNEZXNjcmlwdGlvbiIsImRvbWFpbiIsInNlcmllc1R5cGUiLCJ0IiwiY3JlYXRlRGF0YVNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSGFybW9uaWNzQ2hhcnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSGFybW9uaWNzQ2hhcnQgaXMgdGhlIG1vZGVsIGJhc2UgY2xhc3MgbW9kZWwgZm9yIHRoZSAnSGFybW9uaWNzJyBjaGFydCBpbiB0aGUgJ0Rpc2NyZXRlJyBhbmQgJ1dhdmUgR2FtZScgc2NyZWVucy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IERpc2NyZXRlQXhpc0Rlc2NyaXB0aW9ucyBmcm9tICcuLi8uLi9kaXNjcmV0ZS9tb2RlbC9EaXNjcmV0ZUF4aXNEZXNjcmlwdGlvbnMuanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcbmltcG9ydCBGTVdDb25zdGFudHMgZnJvbSAnLi4vRk1XQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEF4aXNEZXNjcmlwdGlvbiBmcm9tICcuL0F4aXNEZXNjcmlwdGlvbi5qcyc7XHJcbmltcG9ydCBEb21haW5DaGFydCBmcm9tICcuL0RvbWFpbkNoYXJ0LmpzJztcclxuaW1wb3J0IEVtcGhhc2l6ZWRIYXJtb25pY3MgZnJvbSAnLi9FbXBoYXNpemVkSGFybW9uaWNzLmpzJztcclxuaW1wb3J0IEZvdXJpZXJTZXJpZXMgZnJvbSAnLi9Gb3VyaWVyU2VyaWVzLmpzJztcclxuaW1wb3J0IERvbWFpbiBmcm9tICcuL0RvbWFpbi5qcyc7XHJcbmltcG9ydCBTZXJpZXNUeXBlIGZyb20gJy4vU2VyaWVzVHlwZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYXJtb25pY3NDaGFydCBleHRlbmRzIERvbWFpbkNoYXJ0IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGZvdXJpZXJTZXJpZXM6IEZvdXJpZXJTZXJpZXM7XHJcbiAgcHVibGljIHJlYWRvbmx5IGVtcGhhc2l6ZWRIYXJtb25pY3M6IEVtcGhhc2l6ZWRIYXJtb25pY3M7XHJcbiAgcHVibGljIHJlYWRvbmx5IHlBeGlzRGVzY3JpcHRpb246IEF4aXNEZXNjcmlwdGlvbjsgLy8gZml4ZWQgeS1heGlzXHJcblxyXG4gIC8vIEEgZGF0YSBzZXQgZm9yIGVhY2ggaGFybW9uaWMsIGluZGV4ZWQgaW4gaGFybW9uaWMgb3JkZXIuIFBvaW50cyBhcmUgb3JkZXJlZCBieSBpbmNyZWFzaW5nIHggdmFsdWUuXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhcm1vbmljRGF0YVNldFByb3BlcnRpZXM6IFRSZWFkT25seVByb3BlcnR5PFZlY3RvcjJbXT5bXTtcclxuXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCBmb3VyaWVyU2VyaWVzOiBGb3VyaWVyU2VyaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgZW1waGFzaXplZEhhcm1vbmljczogRW1waGFzaXplZEhhcm1vbmljcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpblByb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PERvbWFpbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXNUeXBlUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8U2VyaWVzVHlwZT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB0UHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB4QXhpc0Rlc2NyaXB0aW9uUHJvcGVydHk6IFByb3BlcnR5PEF4aXNEZXNjcmlwdGlvbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggZG9tYWluUHJvcGVydHksIHhBeGlzRGVzY3JpcHRpb25Qcm9wZXJ0eSwgZm91cmllclNlcmllcy5MLCBmb3VyaWVyU2VyaWVzLlQsIHRhbmRlbSApO1xyXG5cclxuICAgIHRoaXMuZm91cmllclNlcmllcyA9IGZvdXJpZXJTZXJpZXM7XHJcbiAgICB0aGlzLmVtcGhhc2l6ZWRIYXJtb25pY3MgPSBlbXBoYXNpemVkSGFybW9uaWNzO1xyXG4gICAgdGhpcy55QXhpc0Rlc2NyaXB0aW9uID0gRGlzY3JldGVBeGlzRGVzY3JpcHRpb25zLkRFRkFVTFRfWV9BWElTX0RFU0NSSVBUSU9OO1xyXG5cclxuICAgIHRoaXMuaGFybW9uaWNEYXRhU2V0UHJvcGVydGllcyA9IGZvdXJpZXJTZXJpZXMuaGFybW9uaWNzLm1hcCggaGFybW9uaWMgPT4ge1xyXG5cclxuICAgICAgLy8gVGhlIG51bWJlciBvZiBwb2ludHMgZm9yIGVhY2ggaGFybW9uaWMgcGxvdCBpcyBhIGZ1bmN0aW9uIG9mIG9yZGVyLCBiZWNhdXNlIGhpZ2hlci1mcmVxdWVuY3kgaGFybW9uaWNzIHJlcXVpcmVcclxuICAgICAgLy8gbW9yZSBwb2ludHMgdG8gZHJhdyBhIHNtb290aCBwbG90LlxyXG4gICAgICBjb25zdCBudW1iZXJPZlBvaW50cyA9IE1hdGguY2VpbCggRk1XQ29uc3RhbnRzLk1BWF9QT0lOVFNfUEVSX0RBVEFfU0VUICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcm1vbmljLm9yZGVyIC8gZm91cmllclNlcmllcy5oYXJtb25pY3MubGVuZ3RoICk7XHJcblxyXG4gICAgICAvLyB0aGUgZGVyaXZlZCBkYXRhIHNldCBmb3IgdGhpcyBoYXJtb25pY1xyXG4gICAgICByZXR1cm4gbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgICBbIGhhcm1vbmljLmFtcGxpdHVkZVByb3BlcnR5LCB4QXhpc0Rlc2NyaXB0aW9uUHJvcGVydHksIGRvbWFpblByb3BlcnR5LCBzZXJpZXNUeXBlUHJvcGVydHksIHRQcm9wZXJ0eSBdLFxyXG4gICAgICAgICggYW1wbGl0dWRlLCB4QXhpc0Rlc2NyaXB0aW9uLCBkb21haW4sIHNlcmllc1R5cGUsIHQgKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gaGFybW9uaWMuY3JlYXRlRGF0YVNldCggbnVtYmVyT2ZQb2ludHMsIGZvdXJpZXJTZXJpZXMuTCwgZm91cmllclNlcmllcy5ULCB4QXhpc0Rlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICBkb21haW4sIHNlcmllc1R5cGUsIHQgKTtcclxuICAgICAgICB9ICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdIYXJtb25pY3NDaGFydCcsIEhhcm1vbmljc0NoYXJ0ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFNcEUsT0FBT0Msd0JBQXdCLE1BQU0sa0RBQWtEO0FBQ3ZGLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxZQUFZLE1BQU0sb0JBQW9CO0FBRTdDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFNMUMsZUFBZSxNQUFNQyxjQUFjLFNBQVNELFdBQVcsQ0FBQztFQUlIO0VBRW5EO0VBR1VFLFdBQVdBLENBQUVDLGFBQTRCLEVBQzVCQyxtQkFBd0MsRUFDeENDLGNBQTJDLEVBQzNDQyxrQkFBbUQsRUFDbkRDLFNBQW9DLEVBQ3BDQyx3QkFBbUQsRUFDbkRDLE1BQWMsRUFBRztJQUV0QyxLQUFLLENBQUVKLGNBQWMsRUFBRUcsd0JBQXdCLEVBQUVMLGFBQWEsQ0FBQ08sQ0FBQyxFQUFFUCxhQUFhLENBQUNRLENBQUMsRUFBRUYsTUFBTyxDQUFDO0lBRTNGLElBQUksQ0FBQ04sYUFBYSxHQUFHQSxhQUFhO0lBQ2xDLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUdBLG1CQUFtQjtJQUM5QyxJQUFJLENBQUNRLGdCQUFnQixHQUFHZix3QkFBd0IsQ0FBQ2dCLDBCQUEwQjtJQUUzRSxJQUFJLENBQUNDLHlCQUF5QixHQUFHWCxhQUFhLENBQUNZLFNBQVMsQ0FBQ0MsR0FBRyxDQUFFQyxRQUFRLElBQUk7TUFFeEU7TUFDQTtNQUNBLE1BQU1DLGNBQWMsR0FBR0MsSUFBSSxDQUFDQyxJQUFJLENBQUVyQixZQUFZLENBQUNzQix1QkFBdUIsR0FDcENKLFFBQVEsQ0FBQ0ssS0FBSyxHQUFHbkIsYUFBYSxDQUFDWSxTQUFTLENBQUNRLE1BQU8sQ0FBQzs7TUFFbkY7TUFDQSxPQUFPLElBQUkzQixlQUFlLENBQ3hCLENBQUVxQixRQUFRLENBQUNPLGlCQUFpQixFQUFFaEIsd0JBQXdCLEVBQUVILGNBQWMsRUFBRUMsa0JBQWtCLEVBQUVDLFNBQVMsQ0FBRSxFQUN2RyxDQUFFa0IsU0FBUyxFQUFFQyxnQkFBZ0IsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLENBQUMsS0FBTTtRQUN4RCxPQUFPWixRQUFRLENBQUNhLGFBQWEsQ0FBRVosY0FBYyxFQUFFZixhQUFhLENBQUNPLENBQUMsRUFBRVAsYUFBYSxDQUFDUSxDQUFDLEVBQUVlLGdCQUFnQixFQUMvRkMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLENBQUUsQ0FBQztNQUMzQixDQUFFLENBQUM7SUFDUCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUEvQixrQkFBa0IsQ0FBQ2lDLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRTlCLGNBQWUsQ0FBQyJ9