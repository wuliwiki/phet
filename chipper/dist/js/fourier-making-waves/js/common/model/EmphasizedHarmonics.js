// Copyright 2021-2023, University of Colorado Boulder

/**
 * EmphasizedHarmonics is an observable set of associations between interactive Nodes and Harmonics.
 *
 * When the user begins interaction with a Node, an entry is added to this set.
 * When the user ends interaction with a Node, an entry is removed from this set.
 * All Harmonic instances appearing in this set are to be emphasized in the Harmonics chart, and that is the
 * responsibility of HarmonicsChartNode.
 *
 * Each Node can interact with 1 Harmonic at a time, while a Harmonic can be manipulated by multiple Nodes
 * simultaneously (e.g. an amplitude slider and a measurement tool) via multi-touch. 'node' is therefore a
 * unique key for elements in this set.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';

// Each element identifies an interactive Node and the harmonic that it is manipulating.

export default class EmphasizedHarmonics {
  constructor() {
    this.observableArray = createObservableArray();
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }

  /**
   * Adds a node/harmonic pair to the set. Enforces uniqueness of the node key.
   */
  push(node, harmonic) {
    assert && assert(!this.includesNode(node), 'node is already in the set');
    this.observableArray.push({
      node: node,
      harmonic: harmonic
    });
  }

  /**
   * Removes the element that corresponds to node, which is a unique key.
   */
  remove(node) {
    const element = _.find(this.observableArray, element => element.node === node);
    assert && assert(element, 'no element in set');
    element && this.observableArray.remove(element);
  }

  /**
   * Does the set include an element related to a specified node?
   */
  includesNode(node) {
    return _.some(this.observableArray, element => element.node === node);
  }

  /**
   * Does the set include an element related to a specified harmonic?
   */
  includesHarmonic(harmonic) {
    return _.some(this.observableArray, element => element.harmonic === harmonic);
  }

  /**
   * Resets (clears) the set.
   */
  reset() {
    this.observableArray.clear();
  }

  /**
   * Gets the number of elements in the set.
   */
  getLength() {
    return this.observableArray.length;
  }
  get length() {
    return this.getLength();
  }

  /**
   * Adds a listener that is called when the set changes.
   * There is no removeChangedListener method because listeners do not need to be removed in this sim.
   */
  addChangedListener(listener) {
    assert && assert(!this.observableArray.lengthProperty.hasListener(listener));
    this.observableArray.lengthProperty.lazyLink(() => listener());
  }
}
fourierMakingWaves.register('EmphasizedHarmonics', EmphasizedHarmonics);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJFbXBoYXNpemVkSGFybW9uaWNzIiwiY29uc3RydWN0b3IiLCJvYnNlcnZhYmxlQXJyYXkiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicHVzaCIsIm5vZGUiLCJoYXJtb25pYyIsImluY2x1ZGVzTm9kZSIsInJlbW92ZSIsImVsZW1lbnQiLCJfIiwiZmluZCIsInNvbWUiLCJpbmNsdWRlc0hhcm1vbmljIiwicmVzZXQiLCJjbGVhciIsImdldExlbmd0aCIsImxlbmd0aCIsImFkZENoYW5nZWRMaXN0ZW5lciIsImxpc3RlbmVyIiwibGVuZ3RoUHJvcGVydHkiLCJoYXNMaXN0ZW5lciIsImxhenlMaW5rIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbXBoYXNpemVkSGFybW9uaWNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVtcGhhc2l6ZWRIYXJtb25pY3MgaXMgYW4gb2JzZXJ2YWJsZSBzZXQgb2YgYXNzb2NpYXRpb25zIGJldHdlZW4gaW50ZXJhY3RpdmUgTm9kZXMgYW5kIEhhcm1vbmljcy5cclxuICpcclxuICogV2hlbiB0aGUgdXNlciBiZWdpbnMgaW50ZXJhY3Rpb24gd2l0aCBhIE5vZGUsIGFuIGVudHJ5IGlzIGFkZGVkIHRvIHRoaXMgc2V0LlxyXG4gKiBXaGVuIHRoZSB1c2VyIGVuZHMgaW50ZXJhY3Rpb24gd2l0aCBhIE5vZGUsIGFuIGVudHJ5IGlzIHJlbW92ZWQgZnJvbSB0aGlzIHNldC5cclxuICogQWxsIEhhcm1vbmljIGluc3RhbmNlcyBhcHBlYXJpbmcgaW4gdGhpcyBzZXQgYXJlIHRvIGJlIGVtcGhhc2l6ZWQgaW4gdGhlIEhhcm1vbmljcyBjaGFydCwgYW5kIHRoYXQgaXMgdGhlXHJcbiAqIHJlc3BvbnNpYmlsaXR5IG9mIEhhcm1vbmljc0NoYXJ0Tm9kZS5cclxuICpcclxuICogRWFjaCBOb2RlIGNhbiBpbnRlcmFjdCB3aXRoIDEgSGFybW9uaWMgYXQgYSB0aW1lLCB3aGlsZSBhIEhhcm1vbmljIGNhbiBiZSBtYW5pcHVsYXRlZCBieSBtdWx0aXBsZSBOb2Rlc1xyXG4gKiBzaW11bHRhbmVvdXNseSAoZS5nLiBhbiBhbXBsaXR1ZGUgc2xpZGVyIGFuZCBhIG1lYXN1cmVtZW50IHRvb2wpIHZpYSBtdWx0aS10b3VjaC4gJ25vZGUnIGlzIHRoZXJlZm9yZSBhXHJcbiAqIHVuaXF1ZSBrZXkgZm9yIGVsZW1lbnRzIGluIHRoaXMgc2V0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBjcmVhdGVPYnNlcnZhYmxlQXJyYXksIHsgT2JzZXJ2YWJsZUFycmF5IH0gZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9jcmVhdGVPYnNlcnZhYmxlQXJyYXkuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5pbXBvcnQgSGFybW9uaWMgZnJvbSAnLi9IYXJtb25pYy5qcyc7XHJcblxyXG4vLyBFYWNoIGVsZW1lbnQgaWRlbnRpZmllcyBhbiBpbnRlcmFjdGl2ZSBOb2RlIGFuZCB0aGUgaGFybW9uaWMgdGhhdCBpdCBpcyBtYW5pcHVsYXRpbmcuXHJcbnR5cGUgQXJyYXlFbGVtZW50ID0ge1xyXG4gIG5vZGU6IE5vZGU7XHJcbiAgaGFybW9uaWM6IEhhcm1vbmljO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1waGFzaXplZEhhcm1vbmljcyB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgb2JzZXJ2YWJsZUFycmF5OiBPYnNlcnZhYmxlQXJyYXk8QXJyYXlFbGVtZW50PjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5vYnNlcnZhYmxlQXJyYXkgPSBjcmVhdGVPYnNlcnZhYmxlQXJyYXkoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgbm9kZS9oYXJtb25pYyBwYWlyIHRvIHRoZSBzZXQuIEVuZm9yY2VzIHVuaXF1ZW5lc3Mgb2YgdGhlIG5vZGUga2V5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwdXNoKCBub2RlOiBOb2RlLCBoYXJtb25pYzogSGFybW9uaWMgKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhdGhpcy5pbmNsdWRlc05vZGUoIG5vZGUgKSwgJ25vZGUgaXMgYWxyZWFkeSBpbiB0aGUgc2V0JyApO1xyXG4gICAgdGhpcy5vYnNlcnZhYmxlQXJyYXkucHVzaCggeyBub2RlOiBub2RlLCBoYXJtb25pYzogaGFybW9uaWMgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyB0aGUgZWxlbWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIG5vZGUsIHdoaWNoIGlzIGEgdW5pcXVlIGtleS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlKCBub2RlOiBOb2RlICk6IHZvaWQge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IF8uZmluZCggdGhpcy5vYnNlcnZhYmxlQXJyYXksIGVsZW1lbnQgPT4gZWxlbWVudC5ub2RlID09PSBub2RlICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBlbGVtZW50LCAnbm8gZWxlbWVudCBpbiBzZXQnICk7XHJcbiAgICBlbGVtZW50ICYmIHRoaXMub2JzZXJ2YWJsZUFycmF5LnJlbW92ZSggZWxlbWVudCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRG9lcyB0aGUgc2V0IGluY2x1ZGUgYW4gZWxlbWVudCByZWxhdGVkIHRvIGEgc3BlY2lmaWVkIG5vZGU/XHJcbiAgICovXHJcbiAgcHVibGljIGluY2x1ZGVzTm9kZSggbm9kZTogTm9kZSApOiBib29sZWFuIHtcclxuICAgIHJldHVybiBfLnNvbWUoIHRoaXMub2JzZXJ2YWJsZUFycmF5LCBlbGVtZW50ID0+IGVsZW1lbnQubm9kZSA9PT0gbm9kZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRG9lcyB0aGUgc2V0IGluY2x1ZGUgYW4gZWxlbWVudCByZWxhdGVkIHRvIGEgc3BlY2lmaWVkIGhhcm1vbmljP1xyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmNsdWRlc0hhcm1vbmljKCBoYXJtb25pYzogSGFybW9uaWMgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gXy5zb21lKCB0aGlzLm9ic2VydmFibGVBcnJheSwgZWxlbWVudCA9PiBlbGVtZW50Lmhhcm1vbmljID09PSBoYXJtb25pYyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIChjbGVhcnMpIHRoZSBzZXQuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5vYnNlcnZhYmxlQXJyYXkuY2xlYXIoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgc2V0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm9ic2VydmFibGVBcnJheS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGxlbmd0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5nZXRMZW5ndGgoKTsgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgc2V0IGNoYW5nZXMuXHJcbiAgICogVGhlcmUgaXMgbm8gcmVtb3ZlQ2hhbmdlZExpc3RlbmVyIG1ldGhvZCBiZWNhdXNlIGxpc3RlbmVycyBkbyBub3QgbmVlZCB0byBiZSByZW1vdmVkIGluIHRoaXMgc2ltLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGRDaGFuZ2VkTGlzdGVuZXIoIGxpc3RlbmVyOiAoKSA9PiB2b2lkICk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIXRoaXMub2JzZXJ2YWJsZUFycmF5Lmxlbmd0aFByb3BlcnR5Lmhhc0xpc3RlbmVyKCBsaXN0ZW5lciApICk7XHJcbiAgICB0aGlzLm9ic2VydmFibGVBcnJheS5sZW5ndGhQcm9wZXJ0eS5sYXp5TGluayggKCkgPT4gbGlzdGVuZXIoKSApO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnRW1waGFzaXplZEhhcm1vbmljcycsIEVtcGhhc2l6ZWRIYXJtb25pY3MgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EscUJBQXFCLE1BQTJCLDhDQUE4QztBQUVyRyxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7O0FBRzVEOztBQU1BLGVBQWUsTUFBTUMsbUJBQW1CLENBQUM7RUFJaENDLFdBQVdBLENBQUEsRUFBRztJQUNuQixJQUFJLENBQUNDLGVBQWUsR0FBR0oscUJBQXFCLENBQUMsQ0FBQztFQUNoRDtFQUVPSyxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsSUFBSUEsQ0FBRUMsSUFBVSxFQUFFQyxRQUFrQixFQUFTO0lBQ2xESCxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDLElBQUksQ0FBQ0ksWUFBWSxDQUFFRixJQUFLLENBQUMsRUFBRSw0QkFBNkIsQ0FBQztJQUM1RSxJQUFJLENBQUNKLGVBQWUsQ0FBQ0csSUFBSSxDQUFFO01BQUVDLElBQUksRUFBRUEsSUFBSTtNQUFFQyxRQUFRLEVBQUVBO0lBQVMsQ0FBRSxDQUFDO0VBQ2pFOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRSxNQUFNQSxDQUFFSCxJQUFVLEVBQVM7SUFDaEMsTUFBTUksT0FBTyxHQUFHQyxDQUFDLENBQUNDLElBQUksQ0FBRSxJQUFJLENBQUNWLGVBQWUsRUFBRVEsT0FBTyxJQUFJQSxPQUFPLENBQUNKLElBQUksS0FBS0EsSUFBSyxDQUFDO0lBQ2hGRixNQUFNLElBQUlBLE1BQU0sQ0FBRU0sT0FBTyxFQUFFLG1CQUFvQixDQUFDO0lBQ2hEQSxPQUFPLElBQUksSUFBSSxDQUFDUixlQUFlLENBQUNPLE1BQU0sQ0FBRUMsT0FBUSxDQUFDO0VBQ25EOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRixZQUFZQSxDQUFFRixJQUFVLEVBQVk7SUFDekMsT0FBT0ssQ0FBQyxDQUFDRSxJQUFJLENBQUUsSUFBSSxDQUFDWCxlQUFlLEVBQUVRLE9BQU8sSUFBSUEsT0FBTyxDQUFDSixJQUFJLEtBQUtBLElBQUssQ0FBQztFQUN6RTs7RUFFQTtBQUNGO0FBQ0E7RUFDU1EsZ0JBQWdCQSxDQUFFUCxRQUFrQixFQUFZO0lBQ3JELE9BQU9JLENBQUMsQ0FBQ0UsSUFBSSxDQUFFLElBQUksQ0FBQ1gsZUFBZSxFQUFFUSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0gsUUFBUSxLQUFLQSxRQUFTLENBQUM7RUFDakY7O0VBRUE7QUFDRjtBQUNBO0VBQ1NRLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNiLGVBQWUsQ0FBQ2MsS0FBSyxDQUFDLENBQUM7RUFDOUI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLFNBQVNBLENBQUEsRUFBVztJQUN6QixPQUFPLElBQUksQ0FBQ2YsZUFBZSxDQUFDZ0IsTUFBTTtFQUNwQztFQUVBLElBQVdBLE1BQU1BLENBQUEsRUFBVztJQUFFLE9BQU8sSUFBSSxDQUFDRCxTQUFTLENBQUMsQ0FBQztFQUFFOztFQUV2RDtBQUNGO0FBQ0E7QUFDQTtFQUNTRSxrQkFBa0JBLENBQUVDLFFBQW9CLEVBQVM7SUFDdERoQixNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDLElBQUksQ0FBQ0YsZUFBZSxDQUFDbUIsY0FBYyxDQUFDQyxXQUFXLENBQUVGLFFBQVMsQ0FBRSxDQUFDO0lBQ2hGLElBQUksQ0FBQ2xCLGVBQWUsQ0FBQ21CLGNBQWMsQ0FBQ0UsUUFBUSxDQUFFLE1BQU1ILFFBQVEsQ0FBQyxDQUFFLENBQUM7RUFDbEU7QUFDRjtBQUVBckIsa0JBQWtCLENBQUN5QixRQUFRLENBQUUscUJBQXFCLEVBQUV4QixtQkFBb0IsQ0FBQyJ9