// Copyright 2020-2023, University of Colorado Boulder

/**
 * Harmonic is the model of a harmonic in a Fourier series, used in the 'Discrete' and 'Wave Game' screens.
 * For the 'Wave Packet' screen, a simpler model is used, due to the number of Fourier components required -
 * see FourierComponent..
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import getAmplitudeFunction from './getAmplitudeFunction.js';
export default class Harmonic extends PhetioObject {
  // See SelfOptions

  // period of the harmonic, in milliseconds

  // amplitude of the harmonic, no units

  constructor(providedOptions) {
    const options = optionize()({
      // HarmonicOptions
      amplitude: 0,
      // PhetioObjectOptions
      phetioState: false
    }, providedOptions);
    assert && assert(Number.isInteger(options.order) && options.order > 0);
    assert && assert(options.frequency > 0);
    assert && assert(options.wavelength > 0);
    super(options);
    this.order = options.order;
    this.frequency = options.frequency;
    this.wavelength = options.wavelength;
    this.amplitudeRange = options.amplitudeRange;
    this.colorProperty = options.colorProperty;
    this.period = 1000 / this.frequency;
    this.amplitudeProperty = new NumberProperty(options.amplitude, {
      range: this.amplitudeRange,
      phetioDocumentation: 'the amplitude of this harmonic',
      tandem: options.tandem.createTandem('amplitudeProperty')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.amplitudeProperty.reset();
  }

  /**
   * Create a data set to approximate this harmonic.
   */
  createDataSet(numberOfPoints, L, T, xAxisDescription, domain, seriesType, t) {
    const order = this.order;
    const amplitude = this.amplitudeProperty.value;
    const xRange = xAxisDescription.createRangeForDomain(domain, L, T);
    return Harmonic.createDataSetStatic(order, amplitude, numberOfPoints, L, T, xRange, domain, seriesType, t);
  }

  /**
   * Creates a data set for any harmonic. This is used in the Wave Packet screen, which does not create Harmonic
   * instances due to the large number of Fourier components involved.
   */
  static createDataSetStatic(order, amplitude, numberOfPoints, L, T, xRange, domain, seriesType, t) {
    assert && assert(Number.isInteger(order) && order > 0);
    assert && assert(Number.isInteger(numberOfPoints) && numberOfPoints > 0);
    assert && assert(L > 0);
    assert && assert(T > 0);
    assert && assert(t >= 0);
    const dataSet = [];
    const amplitudeFunction = getAmplitudeFunction(domain, seriesType);

    // Make dx a bit larger than necessary, so that we cover the entire xRange by slightly exceeding xRange.max.
    const dx = xRange.getLength() / (numberOfPoints - 1);
    let x = xRange.min;
    let y;
    for (let i = 0; i < numberOfPoints; i++) {
      y = amplitudeFunction(amplitude, order, x, t, L, T);
      dataSet.push(new Vector2(x, y));
      x += dx;
    }
    assert && assert(dataSet.length === numberOfPoints, 'incorrect number of points in dataSet');
    return dataSet;
  }
}
fourierMakingWaves.register('Harmonic', Harmonic);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,