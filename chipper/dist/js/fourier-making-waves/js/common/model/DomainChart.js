// Copyright 2021-2023, University of Colorado Boulder

/**
 * DomainChart is the base class model for all charts except the Amplitudes chart in the 'Discrete' and 'Wave Game'
 * screens. It is primarily responsive for the x (Domain) axis, hence the name.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class DomainChart {
  // whether this chart is expanded

  /**
   * @param domainProperty - domain of the x-axis
   * @param xAxisDescriptionProperty - describes the x-axis
   * @param spaceMultiplier - multiplier for x values in the space and space-&-time Domains
   * @param timeMultiplier - multiplier for x values in the time Domain
   * @param tandem
   */
  constructor(domainProperty, xAxisDescriptionProperty, spaceMultiplier, timeMultiplier, tandem) {
    this.domainProperty = domainProperty;
    this.xAxisDescriptionProperty = xAxisDescriptionProperty;
    this.spaceMultiplier = spaceMultiplier;
    this.timeMultiplier = timeMultiplier;
    this.chartExpandedProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('chartExpandedProperty')
    });
  }
  reset() {
    this.chartExpandedProperty.reset();
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
}
fourierMakingWaves.register('DomainChart', DomainChart);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJEb21haW5DaGFydCIsImNvbnN0cnVjdG9yIiwiZG9tYWluUHJvcGVydHkiLCJ4QXhpc0Rlc2NyaXB0aW9uUHJvcGVydHkiLCJzcGFjZU11bHRpcGxpZXIiLCJ0aW1lTXVsdGlwbGllciIsInRhbmRlbSIsImNoYXJ0RXhwYW5kZWRQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInJlc2V0IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRG9tYWluQ2hhcnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRG9tYWluQ2hhcnQgaXMgdGhlIGJhc2UgY2xhc3MgbW9kZWwgZm9yIGFsbCBjaGFydHMgZXhjZXB0IHRoZSBBbXBsaXR1ZGVzIGNoYXJ0IGluIHRoZSAnRGlzY3JldGUnIGFuZCAnV2F2ZSBHYW1lJ1xyXG4gKiBzY3JlZW5zLiBJdCBpcyBwcmltYXJpbHkgcmVzcG9uc2l2ZSBmb3IgdGhlIHggKERvbWFpbikgYXhpcywgaGVuY2UgdGhlIG5hbWUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5pbXBvcnQgQXhpc0Rlc2NyaXB0aW9uIGZyb20gJy4vQXhpc0Rlc2NyaXB0aW9uLmpzJztcclxuaW1wb3J0IERvbWFpbiBmcm9tICcuL0RvbWFpbi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb21haW5DaGFydCB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBkb21haW5Qcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxEb21haW4+O1xyXG4gIHB1YmxpYyByZWFkb25seSB4QXhpc0Rlc2NyaXB0aW9uUHJvcGVydHk6IFByb3BlcnR5PEF4aXNEZXNjcmlwdGlvbj47XHJcbiAgcHVibGljIHJlYWRvbmx5IHNwYWNlTXVsdGlwbGllcjogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB0aW1lTXVsdGlwbGllcjogbnVtYmVyO1xyXG5cclxuICAvLyB3aGV0aGVyIHRoaXMgY2hhcnQgaXMgZXhwYW5kZWRcclxuICBwdWJsaWMgcmVhZG9ubHkgY2hhcnRFeHBhbmRlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGRvbWFpblByb3BlcnR5IC0gZG9tYWluIG9mIHRoZSB4LWF4aXNcclxuICAgKiBAcGFyYW0geEF4aXNEZXNjcmlwdGlvblByb3BlcnR5IC0gZGVzY3JpYmVzIHRoZSB4LWF4aXNcclxuICAgKiBAcGFyYW0gc3BhY2VNdWx0aXBsaWVyIC0gbXVsdGlwbGllciBmb3IgeCB2YWx1ZXMgaW4gdGhlIHNwYWNlIGFuZCBzcGFjZS0mLXRpbWUgRG9tYWluc1xyXG4gICAqIEBwYXJhbSB0aW1lTXVsdGlwbGllciAtIG11bHRpcGxpZXIgZm9yIHggdmFsdWVzIGluIHRoZSB0aW1lIERvbWFpblxyXG4gICAqIEBwYXJhbSB0YW5kZW1cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoIGRvbWFpblByb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PERvbWFpbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB4QXhpc0Rlc2NyaXB0aW9uUHJvcGVydHk6IFByb3BlcnR5PEF4aXNEZXNjcmlwdGlvbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzcGFjZU11bHRpcGxpZXI6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVNdWx0aXBsaWVyOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICB0aGlzLmRvbWFpblByb3BlcnR5ID0gZG9tYWluUHJvcGVydHk7XHJcbiAgICB0aGlzLnhBeGlzRGVzY3JpcHRpb25Qcm9wZXJ0eSA9IHhBeGlzRGVzY3JpcHRpb25Qcm9wZXJ0eTtcclxuICAgIHRoaXMuc3BhY2VNdWx0aXBsaWVyID0gc3BhY2VNdWx0aXBsaWVyO1xyXG4gICAgdGhpcy50aW1lTXVsdGlwbGllciA9IHRpbWVNdWx0aXBsaWVyO1xyXG5cclxuICAgIHRoaXMuY2hhcnRFeHBhbmRlZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjaGFydEV4cGFuZGVkUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuY2hhcnRFeHBhbmRlZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnRG9tYWluQ2hhcnQnLCBEb21haW5DaGFydCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFJcEUsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBSTVELGVBQWUsTUFBTUMsV0FBVyxDQUFDO0VBTy9COztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1lDLFdBQVdBLENBQUVDLGNBQTJDLEVBQzNDQyx3QkFBbUQsRUFDbkRDLGVBQXVCLEVBQ3ZCQyxjQUFzQixFQUN0QkMsTUFBYyxFQUFHO0lBRXRDLElBQUksQ0FBQ0osY0FBYyxHQUFHQSxjQUFjO0lBQ3BDLElBQUksQ0FBQ0Msd0JBQXdCLEdBQUdBLHdCQUF3QjtJQUN4RCxJQUFJLENBQUNDLGVBQWUsR0FBR0EsZUFBZTtJQUN0QyxJQUFJLENBQUNDLGNBQWMsR0FBR0EsY0FBYztJQUVwQyxJQUFJLENBQUNFLHFCQUFxQixHQUFHLElBQUlULGVBQWUsQ0FBRSxJQUFJLEVBQUU7TUFDdERRLE1BQU0sRUFBRUEsTUFBTSxDQUFDRSxZQUFZLENBQUUsdUJBQXdCO0lBQ3ZELENBQUUsQ0FBQztFQUNMO0VBRU9DLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNGLHFCQUFxQixDQUFDRSxLQUFLLENBQUMsQ0FBQztFQUNwQztFQUVPQyxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjtBQUNGO0FBRUFaLGtCQUFrQixDQUFDYSxRQUFRLENBQUUsYUFBYSxFQUFFWixXQUFZLENBQUMifQ==