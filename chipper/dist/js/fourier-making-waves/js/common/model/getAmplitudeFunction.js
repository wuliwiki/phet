// Copyright 2021-2023, University of Colorado Boulder

/**
 * getAmplitudeFunction returns a function that can be used to compute amplitude for a specific Domain (space, time,
 * space & time) and series type (sin, cos).  All of these functions have identical signature, as documented below.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import fourierMakingWaves from '../../fourierMakingWaves.js';
import Domain from './Domain.js';
import SeriesType from './SeriesType.js';

/**
 * @param A - the harmonic's amplitude, unitless
 * @param n - the harmonic's order
 * @param x - x-axis coordinate, whose semantics depend on the domain of the function
 * @param t - the current time, in milliseconds
 * @param L - the harmonic's wavelength, in meters
 * @param T - the harmonic's period, in milliseconds
 * @returns y value (amplitude) at x
 */

/**
 * Gets the function that computes amplitude at an x value.
 */
export default function getAmplitudeFunction(domain, seriesType) {
  let f;
  if (domain === Domain.SPACE) {
    f = seriesType === SeriesType.SIN ? getAmplitudeSpaceSine : getAmplitudeSpaceCosine;
  } else if (domain === Domain.TIME) {
    f = seriesType === SeriesType.SIN ? getAmplitudeTimeSine : getAmplitudeTimeCosine;
  } else if (Domain.SPACE_AND_TIME) {
    f = seriesType === SeriesType.SIN ? getAmplitudeSpaceAndTimeSine : getAmplitudeSpaceAndTimeCosine;
  } else {
    throw new Error(`unsupported domain: ${domain}`);
  }
  return f;
}

// Domain.SPACE, SeriesType.SIN
function getAmplitudeSpaceSine(A, n, x, t, L, T) {
  return A * Math.sin(2 * Math.PI * n * x / L);
}

// Domain.SPACE, SeriesType.COS
function getAmplitudeSpaceCosine(A, n, x, t, L, T) {
  return A * Math.cos(2 * Math.PI * n * x / L);
}

// Domain.TIME, SeriesType.SIN
function getAmplitudeTimeSine(A, n, x, t, L, T) {
  return A * Math.sin(2 * Math.PI * n * x / T);
}

// Domain.TIME, SeriesType.COS
function getAmplitudeTimeCosine(A, n, x, t, L, T) {
  return A * Math.cos(2 * Math.PI * n * x / T);
}

// Domain.SPACE_AND_TIME, SeriesType.SIN
function getAmplitudeSpaceAndTimeSine(A, n, x, t, L, T) {
  return A * Math.sin(2 * Math.PI * n * (x / L - t / T));
}

// Domain.SPACE_AND_TIME, SeriesType.COS
function getAmplitudeSpaceAndTimeCosine(A, n, x, t, L, T) {
  return A * Math.cos(2 * Math.PI * n * (x / L - t / T));
}
fourierMakingWaves.register('getAmplitudeFunction', getAmplitudeFunction);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmb3VyaWVyTWFraW5nV2F2ZXMiLCJEb21haW4iLCJTZXJpZXNUeXBlIiwiZ2V0QW1wbGl0dWRlRnVuY3Rpb24iLCJkb21haW4iLCJzZXJpZXNUeXBlIiwiZiIsIlNQQUNFIiwiU0lOIiwiZ2V0QW1wbGl0dWRlU3BhY2VTaW5lIiwiZ2V0QW1wbGl0dWRlU3BhY2VDb3NpbmUiLCJUSU1FIiwiZ2V0QW1wbGl0dWRlVGltZVNpbmUiLCJnZXRBbXBsaXR1ZGVUaW1lQ29zaW5lIiwiU1BBQ0VfQU5EX1RJTUUiLCJnZXRBbXBsaXR1ZGVTcGFjZUFuZFRpbWVTaW5lIiwiZ2V0QW1wbGl0dWRlU3BhY2VBbmRUaW1lQ29zaW5lIiwiRXJyb3IiLCJBIiwibiIsIngiLCJ0IiwiTCIsIlQiLCJNYXRoIiwic2luIiwiUEkiLCJjb3MiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImdldEFtcGxpdHVkZUZ1bmN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIGdldEFtcGxpdHVkZUZ1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbXB1dGUgYW1wbGl0dWRlIGZvciBhIHNwZWNpZmljIERvbWFpbiAoc3BhY2UsIHRpbWUsXHJcbiAqIHNwYWNlICYgdGltZSkgYW5kIHNlcmllcyB0eXBlIChzaW4sIGNvcykuICBBbGwgb2YgdGhlc2UgZnVuY3Rpb25zIGhhdmUgaWRlbnRpY2FsIHNpZ25hdHVyZSwgYXMgZG9jdW1lbnRlZCBiZWxvdy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcbmltcG9ydCBEb21haW4gZnJvbSAnLi9Eb21haW4uanMnO1xyXG5pbXBvcnQgU2VyaWVzVHlwZSBmcm9tICcuL1Nlcmllc1R5cGUuanMnO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBBIC0gdGhlIGhhcm1vbmljJ3MgYW1wbGl0dWRlLCB1bml0bGVzc1xyXG4gKiBAcGFyYW0gbiAtIHRoZSBoYXJtb25pYydzIG9yZGVyXHJcbiAqIEBwYXJhbSB4IC0geC1heGlzIGNvb3JkaW5hdGUsIHdob3NlIHNlbWFudGljcyBkZXBlbmQgb24gdGhlIGRvbWFpbiBvZiB0aGUgZnVuY3Rpb25cclxuICogQHBhcmFtIHQgLSB0aGUgY3VycmVudCB0aW1lLCBpbiBtaWxsaXNlY29uZHNcclxuICogQHBhcmFtIEwgLSB0aGUgaGFybW9uaWMncyB3YXZlbGVuZ3RoLCBpbiBtZXRlcnNcclxuICogQHBhcmFtIFQgLSB0aGUgaGFybW9uaWMncyBwZXJpb2QsIGluIG1pbGxpc2Vjb25kc1xyXG4gKiBAcmV0dXJucyB5IHZhbHVlIChhbXBsaXR1ZGUpIGF0IHhcclxuICovXHJcbnR5cGUgQW1wbGl0dWRlRnVuY3Rpb24gPSAoIEE6IG51bWJlciwgbjogbnVtYmVyLCB4OiBudW1iZXIsIHQ6IG51bWJlciwgTDogbnVtYmVyLCBUOiBudW1iZXIgKSA9PiBudW1iZXI7XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgZnVuY3Rpb24gdGhhdCBjb21wdXRlcyBhbXBsaXR1ZGUgYXQgYW4geCB2YWx1ZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFtcGxpdHVkZUZ1bmN0aW9uKCBkb21haW46IERvbWFpbiwgc2VyaWVzVHlwZTogU2VyaWVzVHlwZSApOiBBbXBsaXR1ZGVGdW5jdGlvbiB7XHJcbiAgbGV0IGY7XHJcbiAgaWYgKCBkb21haW4gPT09IERvbWFpbi5TUEFDRSApIHtcclxuICAgIGYgPSAoIHNlcmllc1R5cGUgPT09IFNlcmllc1R5cGUuU0lOICkgPyBnZXRBbXBsaXR1ZGVTcGFjZVNpbmUgOiBnZXRBbXBsaXR1ZGVTcGFjZUNvc2luZTtcclxuICB9XHJcbiAgZWxzZSBpZiAoIGRvbWFpbiA9PT0gRG9tYWluLlRJTUUgKSB7XHJcbiAgICBmID0gKCBzZXJpZXNUeXBlID09PSBTZXJpZXNUeXBlLlNJTiApID8gZ2V0QW1wbGl0dWRlVGltZVNpbmUgOiBnZXRBbXBsaXR1ZGVUaW1lQ29zaW5lO1xyXG4gIH1cclxuICBlbHNlIGlmICggRG9tYWluLlNQQUNFX0FORF9USU1FICkge1xyXG4gICAgZiA9ICggc2VyaWVzVHlwZSA9PT0gU2VyaWVzVHlwZS5TSU4gKSA/IGdldEFtcGxpdHVkZVNwYWNlQW5kVGltZVNpbmUgOiBnZXRBbXBsaXR1ZGVTcGFjZUFuZFRpbWVDb3NpbmU7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCBgdW5zdXBwb3J0ZWQgZG9tYWluOiAke2RvbWFpbn1gICk7XHJcbiAgfVxyXG4gIHJldHVybiBmO1xyXG59XHJcblxyXG4vLyBEb21haW4uU1BBQ0UsIFNlcmllc1R5cGUuU0lOXHJcbmZ1bmN0aW9uIGdldEFtcGxpdHVkZVNwYWNlU2luZSggQTogbnVtYmVyLCBuOiBudW1iZXIsIHg6IG51bWJlciwgdDogbnVtYmVyLCBMOiBudW1iZXIsIFQ6IG51bWJlciApOiBudW1iZXIge1xyXG4gIHJldHVybiBBICogTWF0aC5zaW4oIDIgKiBNYXRoLlBJICogbiAqIHggLyBMICk7XHJcbn1cclxuXHJcbi8vIERvbWFpbi5TUEFDRSwgU2VyaWVzVHlwZS5DT1NcclxuZnVuY3Rpb24gZ2V0QW1wbGl0dWRlU3BhY2VDb3NpbmUoIEE6IG51bWJlciwgbjogbnVtYmVyLCB4OiBudW1iZXIsIHQ6IG51bWJlciwgTDogbnVtYmVyLCBUOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICByZXR1cm4gQSAqIE1hdGguY29zKCAyICogTWF0aC5QSSAqIG4gKiB4IC8gTCApO1xyXG59XHJcblxyXG4vLyBEb21haW4uVElNRSwgU2VyaWVzVHlwZS5TSU5cclxuZnVuY3Rpb24gZ2V0QW1wbGl0dWRlVGltZVNpbmUoIEE6IG51bWJlciwgbjogbnVtYmVyLCB4OiBudW1iZXIsIHQ6IG51bWJlciwgTDogbnVtYmVyLCBUOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICByZXR1cm4gQSAqIE1hdGguc2luKCAyICogTWF0aC5QSSAqIG4gKiB4IC8gVCApO1xyXG59XHJcblxyXG4vLyBEb21haW4uVElNRSwgU2VyaWVzVHlwZS5DT1NcclxuZnVuY3Rpb24gZ2V0QW1wbGl0dWRlVGltZUNvc2luZSggQTogbnVtYmVyLCBuOiBudW1iZXIsIHg6IG51bWJlciwgdDogbnVtYmVyLCBMOiBudW1iZXIsIFQ6IG51bWJlciApOiBudW1iZXIge1xyXG4gIHJldHVybiBBICogTWF0aC5jb3MoIDIgKiBNYXRoLlBJICogbiAqIHggLyBUICk7XHJcbn1cclxuXHJcbi8vIERvbWFpbi5TUEFDRV9BTkRfVElNRSwgU2VyaWVzVHlwZS5TSU5cclxuZnVuY3Rpb24gZ2V0QW1wbGl0dWRlU3BhY2VBbmRUaW1lU2luZSggQTogbnVtYmVyLCBuOiBudW1iZXIsIHg6IG51bWJlciwgdDogbnVtYmVyLCBMOiBudW1iZXIsIFQ6IG51bWJlciApOiBudW1iZXIge1xyXG4gIHJldHVybiBBICogTWF0aC5zaW4oIDIgKiBNYXRoLlBJICogbiAqICggeCAvIEwgLSB0IC8gVCApICk7XHJcbn1cclxuXHJcbi8vIERvbWFpbi5TUEFDRV9BTkRfVElNRSwgU2VyaWVzVHlwZS5DT1NcclxuZnVuY3Rpb24gZ2V0QW1wbGl0dWRlU3BhY2VBbmRUaW1lQ29zaW5lKCBBOiBudW1iZXIsIG46IG51bWJlciwgeDogbnVtYmVyLCB0OiBudW1iZXIsIEw6IG51bWJlciwgVDogbnVtYmVyICk6IG51bWJlciB7XHJcbiAgcmV0dXJuIEEgKiBNYXRoLmNvcyggMiAqIE1hdGguUEkgKiBuICogKCB4IC8gTCAtIHQgLyBUICkgKTtcclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnZ2V0QW1wbGl0dWRlRnVuY3Rpb24nLCBnZXRBbXBsaXR1ZGVGdW5jdGlvbiApOyJd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