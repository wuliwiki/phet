// Copyright 2020-2023, University of Colorado Boulder

/**
 * AxisDescription is a data structure used to describe the range, grid lines, and ticks for an axis.
 * An array of AxisDescription can be used to describe the zoom levels for an axis, where a zoom level is an index
 * into the array.
 *
 * Units for the fields in an AxisDescription are specific to the axis.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import Domain from './Domain.js';
export default class AxisDescription {
  constructor(providedOptions) {
    this.range = providedOptions.range;
    this.gridLineSpacing = providedOptions.gridLineSpacing;
    this.tickMarkSpacing = providedOptions.tickMarkSpacing;
    this.tickLabelSpacing = providedOptions.tickLabelSpacing;
  }

  /**
   * Determines whether the range is symmetric about zero. This is a requirement for many of the axes in this sim.
   */
  hasSymmetricRange() {
    return this.range.getCenter() === 0;
  }

  /**
   * Gets AxisDescription that is the best-fit for a specified axis range.
   * This is the first entry in axisDescriptions such that range.max >= axisDescription.range.max.
   */
  static getBestFit(range, axisDescriptions) {
    const axisDescription = _.find(axisDescriptions, axisDescription => range.max >= axisDescription.range.max);
    assert && assert(axisDescription);
    return axisDescription;
  }

  /**
   * Determines whether an array of AxisDescription is sorted by descending range length, from most 'zoomed out' to
   * most 'zoomed in'.
   */
  static isSortedDescending(axisDescriptions) {
    return _.every(axisDescriptions, (axisDescription, index, axisDescriptions) => index === 0 || axisDescriptions[index - 1].range.getLength() > axisDescription.range.getLength());
  }

  /**
   * Creates a range for a specified Domain. This is used wherever the AxisDescriptions for the x-axis contain
   * coefficients to be applied to some constant (L, T, PI), depending on which Domain (space or time) is being plotted.
   */
  createRangeForDomain(domain, spaceMultiplier, timeMultiplier) {
    const value = domain === Domain.TIME ? timeMultiplier : spaceMultiplier;
    const xMin = value * this.range.min;
    const xMax = value * this.range.max;
    return new Range(xMin, xMax);
  }
}
fourierMakingWaves.register('AxisDescription', AxisDescription);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkRvbWFpbiIsIkF4aXNEZXNjcmlwdGlvbiIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwicmFuZ2UiLCJncmlkTGluZVNwYWNpbmciLCJ0aWNrTWFya1NwYWNpbmciLCJ0aWNrTGFiZWxTcGFjaW5nIiwiaGFzU3ltbWV0cmljUmFuZ2UiLCJnZXRDZW50ZXIiLCJnZXRCZXN0Rml0IiwiYXhpc0Rlc2NyaXB0aW9ucyIsImF4aXNEZXNjcmlwdGlvbiIsIl8iLCJmaW5kIiwibWF4IiwiYXNzZXJ0IiwiaXNTb3J0ZWREZXNjZW5kaW5nIiwiZXZlcnkiLCJpbmRleCIsImdldExlbmd0aCIsImNyZWF0ZVJhbmdlRm9yRG9tYWluIiwiZG9tYWluIiwic3BhY2VNdWx0aXBsaWVyIiwidGltZU11bHRpcGxpZXIiLCJ2YWx1ZSIsIlRJTUUiLCJ4TWluIiwibWluIiwieE1heCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXhpc0Rlc2NyaXB0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEF4aXNEZXNjcmlwdGlvbiBpcyBhIGRhdGEgc3RydWN0dXJlIHVzZWQgdG8gZGVzY3JpYmUgdGhlIHJhbmdlLCBncmlkIGxpbmVzLCBhbmQgdGlja3MgZm9yIGFuIGF4aXMuXHJcbiAqIEFuIGFycmF5IG9mIEF4aXNEZXNjcmlwdGlvbiBjYW4gYmUgdXNlZCB0byBkZXNjcmliZSB0aGUgem9vbSBsZXZlbHMgZm9yIGFuIGF4aXMsIHdoZXJlIGEgem9vbSBsZXZlbCBpcyBhbiBpbmRleFxyXG4gKiBpbnRvIHRoZSBhcnJheS5cclxuICpcclxuICogVW5pdHMgZm9yIHRoZSBmaWVsZHMgaW4gYW4gQXhpc0Rlc2NyaXB0aW9uIGFyZSBzcGVjaWZpYyB0byB0aGUgYXhpcy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4vRG9tYWluLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcmFuZ2U6IFJhbmdlOyAvLyByYW5nZSBvZiB0aGUgYXhpc1xyXG4gIGdyaWRMaW5lU3BhY2luZzogbnVtYmVyOyAvLyBzcGFjaW5nIGJldHdlZW4gZ3JpZCBsaW5lc1xyXG4gIHRpY2tNYXJrU3BhY2luZzogbnVtYmVyOyAvLyBzcGFjaW5nIGJldHdlZW4gdGljayBtYXJrc1xyXG4gIHRpY2tMYWJlbFNwYWNpbmc6IG51bWJlcjsgLy8gc3BhY2luZyBiZXR3ZWVuIHRpY2sgbGFiZWxzXHJcbn07XHJcblxyXG50eXBlIEF4aXNEZXNjcmlwdGlvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF4aXNEZXNjcmlwdGlvbiB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSByYW5nZTogUmFuZ2U7XHJcbiAgcHVibGljIHJlYWRvbmx5IGdyaWRMaW5lU3BhY2luZzogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB0aWNrTWFya1NwYWNpbmc6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgdGlja0xhYmVsU3BhY2luZzogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogQXhpc0Rlc2NyaXB0aW9uT3B0aW9ucyApIHtcclxuICAgIHRoaXMucmFuZ2UgPSBwcm92aWRlZE9wdGlvbnMucmFuZ2U7XHJcbiAgICB0aGlzLmdyaWRMaW5lU3BhY2luZyA9IHByb3ZpZGVkT3B0aW9ucy5ncmlkTGluZVNwYWNpbmc7XHJcbiAgICB0aGlzLnRpY2tNYXJrU3BhY2luZyA9IHByb3ZpZGVkT3B0aW9ucy50aWNrTWFya1NwYWNpbmc7XHJcbiAgICB0aGlzLnRpY2tMYWJlbFNwYWNpbmcgPSBwcm92aWRlZE9wdGlvbnMudGlja0xhYmVsU3BhY2luZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgcmFuZ2UgaXMgc3ltbWV0cmljIGFib3V0IHplcm8uIFRoaXMgaXMgYSByZXF1aXJlbWVudCBmb3IgbWFueSBvZiB0aGUgYXhlcyBpbiB0aGlzIHNpbS5cclxuICAgKi9cclxuICBwdWJsaWMgaGFzU3ltbWV0cmljUmFuZ2UoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5yYW5nZS5nZXRDZW50ZXIoKSA9PT0gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgQXhpc0Rlc2NyaXB0aW9uIHRoYXQgaXMgdGhlIGJlc3QtZml0IGZvciBhIHNwZWNpZmllZCBheGlzIHJhbmdlLlxyXG4gICAqIFRoaXMgaXMgdGhlIGZpcnN0IGVudHJ5IGluIGF4aXNEZXNjcmlwdGlvbnMgc3VjaCB0aGF0IHJhbmdlLm1heCA+PSBheGlzRGVzY3JpcHRpb24ucmFuZ2UubWF4LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0QmVzdEZpdCggcmFuZ2U6IFJhbmdlLCBheGlzRGVzY3JpcHRpb25zOiBBeGlzRGVzY3JpcHRpb25bXSApOiBBeGlzRGVzY3JpcHRpb24ge1xyXG4gICAgY29uc3QgYXhpc0Rlc2NyaXB0aW9uID0gXy5maW5kKCBheGlzRGVzY3JpcHRpb25zLCBheGlzRGVzY3JpcHRpb24gPT4gcmFuZ2UubWF4ID49IGF4aXNEZXNjcmlwdGlvbi5yYW5nZS5tYXggKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGF4aXNEZXNjcmlwdGlvbiApO1xyXG4gICAgcmV0dXJuIGF4aXNEZXNjcmlwdGlvbiE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gYXJyYXkgb2YgQXhpc0Rlc2NyaXB0aW9uIGlzIHNvcnRlZCBieSBkZXNjZW5kaW5nIHJhbmdlIGxlbmd0aCwgZnJvbSBtb3N0ICd6b29tZWQgb3V0JyB0b1xyXG4gICAqIG1vc3QgJ3pvb21lZCBpbicuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBpc1NvcnRlZERlc2NlbmRpbmcoIGF4aXNEZXNjcmlwdGlvbnM6IEF4aXNEZXNjcmlwdGlvbltdICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIF8uZXZlcnkoIGF4aXNEZXNjcmlwdGlvbnMsXHJcbiAgICAgICggYXhpc0Rlc2NyaXB0aW9uLCBpbmRleCwgYXhpc0Rlc2NyaXB0aW9ucyApID0+XHJcbiAgICAgICAgKCBpbmRleCA9PT0gMCB8fCBheGlzRGVzY3JpcHRpb25zWyBpbmRleCAtIDEgXS5yYW5nZS5nZXRMZW5ndGgoKSA+IGF4aXNEZXNjcmlwdGlvbi5yYW5nZS5nZXRMZW5ndGgoKSApXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIHJhbmdlIGZvciBhIHNwZWNpZmllZCBEb21haW4uIFRoaXMgaXMgdXNlZCB3aGVyZXZlciB0aGUgQXhpc0Rlc2NyaXB0aW9ucyBmb3IgdGhlIHgtYXhpcyBjb250YWluXHJcbiAgICogY29lZmZpY2llbnRzIHRvIGJlIGFwcGxpZWQgdG8gc29tZSBjb25zdGFudCAoTCwgVCwgUEkpLCBkZXBlbmRpbmcgb24gd2hpY2ggRG9tYWluIChzcGFjZSBvciB0aW1lKSBpcyBiZWluZyBwbG90dGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGVSYW5nZUZvckRvbWFpbiggZG9tYWluOiBEb21haW4sIHNwYWNlTXVsdGlwbGllcjogbnVtYmVyLCB0aW1lTXVsdGlwbGllcjogbnVtYmVyICk6IFJhbmdlIHtcclxuICAgIGNvbnN0IHZhbHVlID0gKCBkb21haW4gPT09IERvbWFpbi5USU1FICkgPyB0aW1lTXVsdGlwbGllciA6IHNwYWNlTXVsdGlwbGllcjtcclxuICAgIGNvbnN0IHhNaW4gPSB2YWx1ZSAqIHRoaXMucmFuZ2UubWluO1xyXG4gICAgY29uc3QgeE1heCA9IHZhbHVlICogdGhpcy5yYW5nZS5tYXg7XHJcbiAgICByZXR1cm4gbmV3IFJhbmdlKCB4TWluLCB4TWF4ICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdBeGlzRGVzY3JpcHRpb24nLCBBeGlzRGVzY3JpcHRpb24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQVdoQyxlQUFlLE1BQU1DLGVBQWUsQ0FBQztFQU81QkMsV0FBV0EsQ0FBRUMsZUFBdUMsRUFBRztJQUM1RCxJQUFJLENBQUNDLEtBQUssR0FBR0QsZUFBZSxDQUFDQyxLQUFLO0lBQ2xDLElBQUksQ0FBQ0MsZUFBZSxHQUFHRixlQUFlLENBQUNFLGVBQWU7SUFDdEQsSUFBSSxDQUFDQyxlQUFlLEdBQUdILGVBQWUsQ0FBQ0csZUFBZTtJQUN0RCxJQUFJLENBQUNDLGdCQUFnQixHQUFHSixlQUFlLENBQUNJLGdCQUFnQjtFQUMxRDs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsaUJBQWlCQSxDQUFBLEVBQVk7SUFDbEMsT0FBTyxJQUFJLENBQUNKLEtBQUssQ0FBQ0ssU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDO0VBQ3JDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0UsT0FBY0MsVUFBVUEsQ0FBRU4sS0FBWSxFQUFFTyxnQkFBbUMsRUFBb0I7SUFDN0YsTUFBTUMsZUFBZSxHQUFHQyxDQUFDLENBQUNDLElBQUksQ0FBRUgsZ0JBQWdCLEVBQUVDLGVBQWUsSUFBSVIsS0FBSyxDQUFDVyxHQUFHLElBQUlILGVBQWUsQ0FBQ1IsS0FBSyxDQUFDVyxHQUFJLENBQUM7SUFDN0dDLE1BQU0sSUFBSUEsTUFBTSxDQUFFSixlQUFnQixDQUFDO0lBQ25DLE9BQU9BLGVBQWU7RUFDeEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRSxPQUFjSyxrQkFBa0JBLENBQUVOLGdCQUFtQyxFQUFZO0lBQy9FLE9BQU9FLENBQUMsQ0FBQ0ssS0FBSyxDQUFFUCxnQkFBZ0IsRUFDOUIsQ0FBRUMsZUFBZSxFQUFFTyxLQUFLLEVBQUVSLGdCQUFnQixLQUN0Q1EsS0FBSyxLQUFLLENBQUMsSUFBSVIsZ0JBQWdCLENBQUVRLEtBQUssR0FBRyxDQUFDLENBQUUsQ0FBQ2YsS0FBSyxDQUFDZ0IsU0FBUyxDQUFDLENBQUMsR0FBR1IsZUFBZSxDQUFDUixLQUFLLENBQUNnQixTQUFTLENBQUMsQ0FDdkcsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NDLG9CQUFvQkEsQ0FBRUMsTUFBYyxFQUFFQyxlQUF1QixFQUFFQyxjQUFzQixFQUFVO0lBQ3BHLE1BQU1DLEtBQUssR0FBS0gsTUFBTSxLQUFLdEIsTUFBTSxDQUFDMEIsSUFBSSxHQUFLRixjQUFjLEdBQUdELGVBQWU7SUFDM0UsTUFBTUksSUFBSSxHQUFHRixLQUFLLEdBQUcsSUFBSSxDQUFDckIsS0FBSyxDQUFDd0IsR0FBRztJQUNuQyxNQUFNQyxJQUFJLEdBQUdKLEtBQUssR0FBRyxJQUFJLENBQUNyQixLQUFLLENBQUNXLEdBQUc7SUFDbkMsT0FBTyxJQUFJakIsS0FBSyxDQUFFNkIsSUFBSSxFQUFFRSxJQUFLLENBQUM7RUFDaEM7QUFDRjtBQUVBOUIsa0JBQWtCLENBQUMrQixRQUFRLENBQUUsaUJBQWlCLEVBQUU3QixlQUFnQixDQUFDIn0=