// Copyright 2020-2023, University of Colorado Boulder

/**
 * FMWComboBox is a specialization of ComboBox that provides an API for specifying combo box items that is more
 * suited to this simulation. Items are specified as a set of value/string choices, and FMWComboBox generates
 * the ComboBoxItems needed by ComboBox.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { RichText } from '../../../../scenery/js/imports.js';
import ComboBox from '../../../../sun/js/ComboBox.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import FMWConstants from '../FMWConstants.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class FMWComboBox extends ComboBox {
  constructor(property, choices, listboxParent, providedOptions) {
    const options = optionize()({
      // SelfOptions
      textOptions: {
        font: FMWConstants.CONTROL_FONT
      },
      // ComboBoxOptions
      xMargin: 12,
      yMargin: 5
    }, providedOptions);
    const items = choices.map(choice => {
      return {
        value: choice.value,
        tandemName: choice.tandemName,
        // The majority of strings in this sim contain RichText markup, used to display symbols in MathSymbolFont.
        // And there is negligible performance impact for using RichText for the strings that don't contain markup.
        createNode: () => new RichText(choice.stringProperty, choice.textOptions || options.textOptions)
      };
    });
    super(property, items, listboxParent, options);
  }
}
fourierMakingWaves.register('FMWComboBox', FMWComboBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSaWNoVGV4dCIsIkNvbWJvQm94IiwiZm91cmllck1ha2luZ1dhdmVzIiwiRk1XQ29uc3RhbnRzIiwib3B0aW9uaXplIiwiRk1XQ29tYm9Cb3giLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwiY2hvaWNlcyIsImxpc3Rib3hQYXJlbnQiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidGV4dE9wdGlvbnMiLCJmb250IiwiQ09OVFJPTF9GT05UIiwieE1hcmdpbiIsInlNYXJnaW4iLCJpdGVtcyIsIm1hcCIsImNob2ljZSIsInZhbHVlIiwidGFuZGVtTmFtZSIsImNyZWF0ZU5vZGUiLCJzdHJpbmdQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRk1XQ29tYm9Cb3gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRk1XQ29tYm9Cb3ggaXMgYSBzcGVjaWFsaXphdGlvbiBvZiBDb21ib0JveCB0aGF0IHByb3ZpZGVzIGFuIEFQSSBmb3Igc3BlY2lmeWluZyBjb21ibyBib3ggaXRlbXMgdGhhdCBpcyBtb3JlXHJcbiAqIHN1aXRlZCB0byB0aGlzIHNpbXVsYXRpb24uIEl0ZW1zIGFyZSBzcGVjaWZpZWQgYXMgYSBzZXQgb2YgdmFsdWUvc3RyaW5nIGNob2ljZXMsIGFuZCBGTVdDb21ib0JveCBnZW5lcmF0ZXNcclxuICogdGhlIENvbWJvQm94SXRlbXMgbmVlZGVkIGJ5IENvbWJvQm94LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUmljaFRleHQsIFJpY2hUZXh0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDb21ib0JveCwgeyBDb21ib0JveEl0ZW0sIENvbWJvQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9Db21ib0JveC5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuaW1wb3J0IEZNV0NvbnN0YW50cyBmcm9tICcuLi9GTVdDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHRleHRPcHRpb25zPzogUmljaFRleHRPcHRpb25zO1xyXG59O1xyXG5cclxudHlwZSBGTVdDb21ib0JveE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIENvbWJvQm94T3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxDb21ib0JveE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCB0eXBlIEZNV0NvbWJvQm94Q2hvaWNlPFQ+ID0ge1xyXG4gIHZhbHVlOiBUO1xyXG4gIHN0cmluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+OyAvLyBzdHJpbmcgbGFiZWwgZm9yIHRoZSBjaG9pY2VcclxuICB0ZXh0T3B0aW9ucz86IFJpY2hUZXh0T3B0aW9ucztcclxuICB0YW5kZW1OYW1lOiBzdHJpbmc7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGTVdDb21ib0JveDxUPiBleHRlbmRzIENvbWJvQm94PFQ+IHtcclxuXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eTogUHJvcGVydHk8VD4sIGNob2ljZXM6IEZNV0NvbWJvQm94Q2hvaWNlPFQ+W10sIGxpc3Rib3hQYXJlbnQ6IE5vZGUsIHByb3ZpZGVkT3B0aW9uczogRk1XQ29tYm9Cb3hPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Rk1XQ29tYm9Cb3hPcHRpb25zLCBTZWxmT3B0aW9ucywgQ29tYm9Cb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgIGZvbnQ6IEZNV0NvbnN0YW50cy5DT05UUk9MX0ZPTlRcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIENvbWJvQm94T3B0aW9uc1xyXG4gICAgICB4TWFyZ2luOiAxMixcclxuICAgICAgeU1hcmdpbjogNVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgaXRlbXM6IENvbWJvQm94SXRlbTxUPltdID0gY2hvaWNlcy5tYXAoIGNob2ljZSA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsdWU6IGNob2ljZS52YWx1ZSxcclxuICAgICAgICB0YW5kZW1OYW1lOiBjaG9pY2UudGFuZGVtTmFtZSxcclxuXHJcbiAgICAgICAgLy8gVGhlIG1ham9yaXR5IG9mIHN0cmluZ3MgaW4gdGhpcyBzaW0gY29udGFpbiBSaWNoVGV4dCBtYXJrdXAsIHVzZWQgdG8gZGlzcGxheSBzeW1ib2xzIGluIE1hdGhTeW1ib2xGb250LlxyXG4gICAgICAgIC8vIEFuZCB0aGVyZSBpcyBuZWdsaWdpYmxlIHBlcmZvcm1hbmNlIGltcGFjdCBmb3IgdXNpbmcgUmljaFRleHQgZm9yIHRoZSBzdHJpbmdzIHRoYXQgZG9uJ3QgY29udGFpbiBtYXJrdXAuXHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFJpY2hUZXh0KCBjaG9pY2Uuc3RyaW5nUHJvcGVydHksIGNob2ljZS50ZXh0T3B0aW9ucyB8fCBvcHRpb25zLnRleHRPcHRpb25zIClcclxuICAgICAgfTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggcHJvcGVydHksIGl0ZW1zLCBsaXN0Ym94UGFyZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdGTVdDb21ib0JveCcsIEZNV0NvbWJvQm94ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxTQUFlQSxRQUFRLFFBQXlCLG1DQUFtQztBQUNuRixPQUFPQyxRQUFRLE1BQXlDLGdDQUFnQztBQUN4RixPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsWUFBWSxNQUFNLG9CQUFvQjtBQUM3QyxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBaUI3RCxlQUFlLE1BQU1DLFdBQVcsU0FBWUosUUFBUSxDQUFJO0VBRTVDSyxXQUFXQSxDQUFFQyxRQUFxQixFQUFFQyxPQUErQixFQUFFQyxhQUFtQixFQUFFQyxlQUFtQyxFQUFHO0lBRXhJLE1BQU1DLE9BQU8sR0FBR1AsU0FBUyxDQUFtRCxDQUFDLENBQUU7TUFFN0U7TUFDQVEsV0FBVyxFQUFFO1FBQ1hDLElBQUksRUFBRVYsWUFBWSxDQUFDVztNQUNyQixDQUFDO01BRUQ7TUFDQUMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxFQUFFTixlQUFnQixDQUFDO0lBRXBCLE1BQU1PLEtBQXdCLEdBQUdULE9BQU8sQ0FBQ1UsR0FBRyxDQUFFQyxNQUFNLElBQUk7TUFDdEQsT0FBTztRQUNMQyxLQUFLLEVBQUVELE1BQU0sQ0FBQ0MsS0FBSztRQUNuQkMsVUFBVSxFQUFFRixNQUFNLENBQUNFLFVBQVU7UUFFN0I7UUFDQTtRQUNBQyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJdEIsUUFBUSxDQUFFbUIsTUFBTSxDQUFDSSxjQUFjLEVBQUVKLE1BQU0sQ0FBQ1AsV0FBVyxJQUFJRCxPQUFPLENBQUNDLFdBQVk7TUFDbkcsQ0FBQztJQUNILENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRUwsUUFBUSxFQUFFVSxLQUFLLEVBQUVSLGFBQWEsRUFBRUUsT0FBUSxDQUFDO0VBQ2xEO0FBQ0Y7QUFFQVQsa0JBQWtCLENBQUNzQixRQUFRLENBQUUsYUFBYSxFQUFFbkIsV0FBWSxDQUFDIn0=