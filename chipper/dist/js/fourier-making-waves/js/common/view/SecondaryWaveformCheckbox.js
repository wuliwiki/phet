// Copyright 2021-2023, University of Colorado Boulder

/**
 * SecondaryWaveformCheckbox is the base class for checkboxes that are used to plot a secondary waveform on a chart.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import { HBox, Line, Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import FMWColors from '../../common/FMWColors.js';
import FMWConstants from '../../common/FMWConstants.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class SecondaryWaveformCheckbox extends Checkbox {
  /**
   * @param {Property.<boolean>} visibleProperty
   * @param {TReadOnlyProperty.<string>} titleStringProperty
   * @param {Object} [options]
   */
  constructor(visibleProperty, titleStringProperty, options) {
    options = merge({}, FMWConstants.CHECKBOX_OPTIONS, {
      textOptions: {
        font: FMWConstants.CONTROL_FONT,
        maxWidth: 200
      },
      tandem: Tandem.REQUIRED
    }, options);
    const infiniteHarmonicsText = new Text(titleStringProperty, merge({}, options.textOptions, {
      tandem: options.tandem.createTandem('infiniteHarmonicsText'),
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }));
    const icon = new Line(0, 0, 20, 0, {
      stroke: FMWColors.secondaryWaveformStrokeProperty,
      lineWidth: FMWConstants.SECONDARY_WAVEFORM_LINE_WIDTH
    });
    const hBox = new HBox({
      children: [infiniteHarmonicsText, icon],
      spacing: 6
    });
    super(visibleProperty, hBox, options);
  }
}
fourierMakingWaves.register('SecondaryWaveformCheckbox', SecondaryWaveformCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkhCb3giLCJMaW5lIiwiVGV4dCIsIkNoZWNrYm94IiwiVGFuZGVtIiwiRk1XQ29sb3JzIiwiRk1XQ29uc3RhbnRzIiwiZm91cmllck1ha2luZ1dhdmVzIiwiU2Vjb25kYXJ5V2F2ZWZvcm1DaGVja2JveCIsImNvbnN0cnVjdG9yIiwidmlzaWJsZVByb3BlcnR5IiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsIm9wdGlvbnMiLCJDSEVDS0JPWF9PUFRJT05TIiwidGV4dE9wdGlvbnMiLCJmb250IiwiQ09OVFJPTF9GT05UIiwibWF4V2lkdGgiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsImluZmluaXRlSGFybW9uaWNzVGV4dCIsImNyZWF0ZVRhbmRlbSIsInZpc2libGVQcm9wZXJ0eU9wdGlvbnMiLCJwaGV0aW9SZWFkT25seSIsImljb24iLCJzdHJva2UiLCJzZWNvbmRhcnlXYXZlZm9ybVN0cm9rZVByb3BlcnR5IiwibGluZVdpZHRoIiwiU0VDT05EQVJZX1dBVkVGT1JNX0xJTkVfV0lEVEgiLCJoQm94IiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTZWNvbmRhcnlXYXZlZm9ybUNoZWNrYm94LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNlY29uZGFyeVdhdmVmb3JtQ2hlY2tib3ggaXMgdGhlIGJhc2UgY2xhc3MgZm9yIGNoZWNrYm94ZXMgdGhhdCBhcmUgdXNlZCB0byBwbG90IGEgc2Vjb25kYXJ5IHdhdmVmb3JtIG9uIGEgY2hhcnQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIExpbmUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0NoZWNrYm94LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEZNV0NvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vRk1XQ29sb3JzLmpzJztcclxuaW1wb3J0IEZNV0NvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vRk1XQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Vjb25kYXJ5V2F2ZWZvcm1DaGVja2JveCBleHRlbmRzIENoZWNrYm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHZpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7VFJlYWRPbmx5UHJvcGVydHkuPHN0cmluZz59IHRpdGxlU3RyaW5nUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHZpc2libGVQcm9wZXJ0eSwgdGl0bGVTdHJpbmdQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCBGTVdDb25zdGFudHMuQ0hFQ0tCT1hfT1BUSU9OUywge1xyXG4gICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgIGZvbnQ6IEZNV0NvbnN0YW50cy5DT05UUk9MX0ZPTlQsXHJcbiAgICAgICAgbWF4V2lkdGg6IDIwMFxyXG4gICAgICB9LFxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGluZmluaXRlSGFybW9uaWNzVGV4dCA9IG5ldyBUZXh0KCB0aXRsZVN0cmluZ1Byb3BlcnR5LCBtZXJnZSgge30sIG9wdGlvbnMudGV4dE9wdGlvbnMsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdpbmZpbml0ZUhhcm1vbmljc1RleHQnICksXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHsgcGhldGlvUmVhZE9ubHk6IHRydWUgfVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IG5ldyBMaW5lKCAwLCAwLCAyMCwgMCwge1xyXG4gICAgICBzdHJva2U6IEZNV0NvbG9ycy5zZWNvbmRhcnlXYXZlZm9ybVN0cm9rZVByb3BlcnR5LFxyXG4gICAgICBsaW5lV2lkdGg6IEZNV0NvbnN0YW50cy5TRUNPTkRBUllfV0FWRUZPUk1fTElORV9XSURUSFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGhCb3ggPSBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogWyBpbmZpbml0ZUhhcm1vbmljc1RleHQsIGljb24gXSxcclxuICAgICAgc3BhY2luZzogNlxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCB2aXNpYmxlUHJvcGVydHksIGhCb3gsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ1NlY29uZGFyeVdhdmVmb3JtQ2hlY2tib3gnLCBTZWNvbmRhcnlXYXZlZm9ybUNoZWNrYm94ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDcEUsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUNyRCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFNBQVMsTUFBTSwyQkFBMkI7QUFDakQsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQUN2RCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFFNUQsZUFBZSxNQUFNQyx5QkFBeUIsU0FBU0wsUUFBUSxDQUFDO0VBRTlEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxtQkFBbUIsRUFBRUMsT0FBTyxFQUFHO0lBRTNEQSxPQUFPLEdBQUdiLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRU8sWUFBWSxDQUFDTyxnQkFBZ0IsRUFBRTtNQUNsREMsV0FBVyxFQUFFO1FBQ1hDLElBQUksRUFBRVQsWUFBWSxDQUFDVSxZQUFZO1FBQy9CQyxRQUFRLEVBQUU7TUFDWixDQUFDO01BQ0RDLE1BQU0sRUFBRWQsTUFBTSxDQUFDZTtJQUNqQixDQUFDLEVBQUVQLE9BQVEsQ0FBQztJQUVaLE1BQU1RLHFCQUFxQixHQUFHLElBQUlsQixJQUFJLENBQUVTLG1CQUFtQixFQUFFWixLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUVhLE9BQU8sQ0FBQ0UsV0FBVyxFQUFFO01BQzNGSSxNQUFNLEVBQUVOLE9BQU8sQ0FBQ00sTUFBTSxDQUFDRyxZQUFZLENBQUUsdUJBQXdCLENBQUM7TUFDOURDLHNCQUFzQixFQUFFO1FBQUVDLGNBQWMsRUFBRTtNQUFLO0lBQ2pELENBQUUsQ0FBRSxDQUFDO0lBRUwsTUFBTUMsSUFBSSxHQUFHLElBQUl2QixJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO01BQ2xDd0IsTUFBTSxFQUFFcEIsU0FBUyxDQUFDcUIsK0JBQStCO01BQ2pEQyxTQUFTLEVBQUVyQixZQUFZLENBQUNzQjtJQUMxQixDQUFFLENBQUM7SUFFSCxNQUFNQyxJQUFJLEdBQUcsSUFBSTdCLElBQUksQ0FBRTtNQUNyQjhCLFFBQVEsRUFBRSxDQUFFVixxQkFBcUIsRUFBRUksSUFBSSxDQUFFO01BQ3pDTyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVyQixlQUFlLEVBQUVtQixJQUFJLEVBQUVqQixPQUFRLENBQUM7RUFDekM7QUFDRjtBQUVBTCxrQkFBa0IsQ0FBQ3lCLFFBQVEsQ0FBRSwyQkFBMkIsRUFBRXhCLHlCQUEwQixDQUFDIn0=