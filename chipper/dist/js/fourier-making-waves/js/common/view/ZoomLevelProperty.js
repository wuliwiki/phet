// Copyright 2021-2023, University of Colorado Boulder

/**
 * ZoomLevelProperty is a NumberProperty that synchronizes itself with a Property.<AxisDescription>.
 *
 * This is an adapter Property, bridging the needs of the sim to the needs of common code.
 * This sim uses AxisDescription to describe the properties of an axis at a particular zoom level.
 * NumberProperty is required by PlusMinusZoomButtonGroup, the common-code component used by this
 * sim for zoom buttons.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class ZoomLevelProperty extends NumberProperty {
  constructor(axisDescriptionProperty, tandem) {
    const axisDescriptions = axisDescriptionProperty.validValues;
    assert && assert(axisDescriptions, 'axisDescriptionProperty should have been defined with validValues option');
    super(axisDescriptions.indexOf(axisDescriptionProperty.value), {
      numberType: 'Integer',
      range: new Range(0, axisDescriptions.length - 1),
      tandem: tandem
    });

    // Keep axisDescriptionProperty and zoomLevelProperty in sync, while avoiding reentrant behavior.
    let isSynchronizing = false;
    axisDescriptionProperty.lazyLink(axisDescription => {
      if (!isSynchronizing) {
        isSynchronizing = true;
        this.value = axisDescriptions.indexOf(axisDescription);
        isSynchronizing = false;
      }
    });
    this.lazyLink(zoomLevel => {
      if (!isSynchronizing) {
        isSynchronizing = true;
        axisDescriptionProperty.value = axisDescriptions[zoomLevel];
        isSynchronizing = false;
      }
    });
  }
}
fourierMakingWaves.register('ZoomLevelProperty', ZoomLevelProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiZm91cmllck1ha2luZ1dhdmVzIiwiWm9vbUxldmVsUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsImF4aXNEZXNjcmlwdGlvblByb3BlcnR5IiwidGFuZGVtIiwiYXhpc0Rlc2NyaXB0aW9ucyIsInZhbGlkVmFsdWVzIiwiYXNzZXJ0IiwiaW5kZXhPZiIsInZhbHVlIiwibnVtYmVyVHlwZSIsInJhbmdlIiwibGVuZ3RoIiwiaXNTeW5jaHJvbml6aW5nIiwibGF6eUxpbmsiLCJheGlzRGVzY3JpcHRpb24iLCJ6b29tTGV2ZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlpvb21MZXZlbFByb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFpvb21MZXZlbFByb3BlcnR5IGlzIGEgTnVtYmVyUHJvcGVydHkgdGhhdCBzeW5jaHJvbml6ZXMgaXRzZWxmIHdpdGggYSBQcm9wZXJ0eS48QXhpc0Rlc2NyaXB0aW9uPi5cclxuICpcclxuICogVGhpcyBpcyBhbiBhZGFwdGVyIFByb3BlcnR5LCBicmlkZ2luZyB0aGUgbmVlZHMgb2YgdGhlIHNpbSB0byB0aGUgbmVlZHMgb2YgY29tbW9uIGNvZGUuXHJcbiAqIFRoaXMgc2ltIHVzZXMgQXhpc0Rlc2NyaXB0aW9uIHRvIGRlc2NyaWJlIHRoZSBwcm9wZXJ0aWVzIG9mIGFuIGF4aXMgYXQgYSBwYXJ0aWN1bGFyIHpvb20gbGV2ZWwuXHJcbiAqIE51bWJlclByb3BlcnR5IGlzIHJlcXVpcmVkIGJ5IFBsdXNNaW51c1pvb21CdXR0b25Hcm91cCwgdGhlIGNvbW1vbi1jb2RlIGNvbXBvbmVudCB1c2VkIGJ5IHRoaXNcclxuICogc2ltIGZvciB6b29tIGJ1dHRvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5pbXBvcnQgQXhpc0Rlc2NyaXB0aW9uIGZyb20gJy4uL21vZGVsL0F4aXNEZXNjcmlwdGlvbi5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFpvb21MZXZlbFByb3BlcnR5IGV4dGVuZHMgTnVtYmVyUHJvcGVydHkge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGF4aXNEZXNjcmlwdGlvblByb3BlcnR5OiBQcm9wZXJ0eTxBeGlzRGVzY3JpcHRpb24+LCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBheGlzRGVzY3JpcHRpb25zID0gYXhpc0Rlc2NyaXB0aW9uUHJvcGVydHkudmFsaWRWYWx1ZXMhO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYXhpc0Rlc2NyaXB0aW9ucywgJ2F4aXNEZXNjcmlwdGlvblByb3BlcnR5IHNob3VsZCBoYXZlIGJlZW4gZGVmaW5lZCB3aXRoIHZhbGlkVmFsdWVzIG9wdGlvbicgKTtcclxuXHJcbiAgICBzdXBlciggYXhpc0Rlc2NyaXB0aW9ucy5pbmRleE9mKCBheGlzRGVzY3JpcHRpb25Qcm9wZXJ0eS52YWx1ZSApLCB7XHJcbiAgICAgIG51bWJlclR5cGU6ICdJbnRlZ2VyJyxcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMCwgYXhpc0Rlc2NyaXB0aW9ucy5sZW5ndGggLSAxICksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gS2VlcCBheGlzRGVzY3JpcHRpb25Qcm9wZXJ0eSBhbmQgem9vbUxldmVsUHJvcGVydHkgaW4gc3luYywgd2hpbGUgYXZvaWRpbmcgcmVlbnRyYW50IGJlaGF2aW9yLlxyXG4gICAgbGV0IGlzU3luY2hyb25pemluZyA9IGZhbHNlO1xyXG4gICAgYXhpc0Rlc2NyaXB0aW9uUHJvcGVydHkubGF6eUxpbmsoIGF4aXNEZXNjcmlwdGlvbiA9PiB7XHJcbiAgICAgIGlmICggIWlzU3luY2hyb25pemluZyApIHtcclxuICAgICAgICBpc1N5bmNocm9uaXppbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBheGlzRGVzY3JpcHRpb25zLmluZGV4T2YoIGF4aXNEZXNjcmlwdGlvbiApO1xyXG4gICAgICAgIGlzU3luY2hyb25pemluZyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmxhenlMaW5rKCB6b29tTGV2ZWwgPT4ge1xyXG4gICAgICBpZiAoICFpc1N5bmNocm9uaXppbmcgKSB7XHJcbiAgICAgICAgaXNTeW5jaHJvbml6aW5nID0gdHJ1ZTtcclxuICAgICAgICBheGlzRGVzY3JpcHRpb25Qcm9wZXJ0eS52YWx1ZSA9IGF4aXNEZXNjcmlwdGlvbnNbIHpvb21MZXZlbCBdO1xyXG4gICAgICAgIGlzU3luY2hyb25pemluZyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdab29tTGV2ZWxQcm9wZXJ0eScsIFpvb21MZXZlbFByb3BlcnR5ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBSzVELGVBQWUsTUFBTUMsaUJBQWlCLFNBQVNILGNBQWMsQ0FBQztFQUVyREksV0FBV0EsQ0FBRUMsdUJBQWtELEVBQUVDLE1BQWMsRUFBRztJQUV2RixNQUFNQyxnQkFBZ0IsR0FBR0YsdUJBQXVCLENBQUNHLFdBQVk7SUFDN0RDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixnQkFBZ0IsRUFBRSwwRUFBMkUsQ0FBQztJQUVoSCxLQUFLLENBQUVBLGdCQUFnQixDQUFDRyxPQUFPLENBQUVMLHVCQUF1QixDQUFDTSxLQUFNLENBQUMsRUFBRTtNQUNoRUMsVUFBVSxFQUFFLFNBQVM7TUFDckJDLEtBQUssRUFBRSxJQUFJWixLQUFLLENBQUUsQ0FBQyxFQUFFTSxnQkFBZ0IsQ0FBQ08sTUFBTSxHQUFHLENBQUUsQ0FBQztNQUNsRFIsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUlTLGVBQWUsR0FBRyxLQUFLO0lBQzNCVix1QkFBdUIsQ0FBQ1csUUFBUSxDQUFFQyxlQUFlLElBQUk7TUFDbkQsSUFBSyxDQUFDRixlQUFlLEVBQUc7UUFDdEJBLGVBQWUsR0FBRyxJQUFJO1FBQ3RCLElBQUksQ0FBQ0osS0FBSyxHQUFHSixnQkFBZ0IsQ0FBQ0csT0FBTyxDQUFFTyxlQUFnQixDQUFDO1FBQ3hERixlQUFlLEdBQUcsS0FBSztNQUN6QjtJQUNGLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0MsUUFBUSxDQUFFRSxTQUFTLElBQUk7TUFDMUIsSUFBSyxDQUFDSCxlQUFlLEVBQUc7UUFDdEJBLGVBQWUsR0FBRyxJQUFJO1FBQ3RCVix1QkFBdUIsQ0FBQ00sS0FBSyxHQUFHSixnQkFBZ0IsQ0FBRVcsU0FBUyxDQUFFO1FBQzdESCxlQUFlLEdBQUcsS0FBSztNQUN6QjtJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWIsa0JBQWtCLENBQUNpQixRQUFRLENBQUUsbUJBQW1CLEVBQUVoQixpQkFBa0IsQ0FBQyJ9