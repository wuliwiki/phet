// Copyright 2021-2023, University of Colorado Boulder

/**
 * DiscreteSumChart is the model for the 'Sum' chart in the 'Discrete' screen.
 * It adds the following the base class:
 * - a data set for preset waveforms that shows what the waveform would look like if approximated by a Fourier Series
 *   with an infinite number of harmonics
 * - x-axis formatting that depends on Domain
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import FMWConstants from '../../common/FMWConstants.js';
import SumChart from '../../common/model/SumChart.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
// constants
const EMPTY_DATA_SET = FMWConstants.EMPTY_DATA_SET;
export default class DiscreteSumChart extends SumChart {
  // whether the Sum chart shows what the waveform looks like for an infinite Fourier series

  // Data set that corresponds to a waveform preset, as if it were approximated using a Fourier series with an
  // infinite number of harmonics. If the preset is not visible, then returns EMPTY_DATA_SET.
  constructor(fourierSeries, domainProperty, seriesTypeProperty, tProperty, xAxisTickLabelFormatProperty, xAxisDescriptionProperty, waveformProperty, tandem) {
    super(fourierSeries, domainProperty, seriesTypeProperty, tProperty, xAxisDescriptionProperty, tandem);
    this.xAxisTickLabelFormatProperty = xAxisTickLabelFormatProperty;
    this.waveformProperty = waveformProperty;
    this.infiniteHarmonicsVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('infiniteHarmonicsVisibleProperty')
    });

    // To improve readability
    const L = fourierSeries.L;
    const T = fourierSeries.T;
    this.infiniteHarmonicsDataSetProperty = new DerivedProperty([this.infiniteHarmonicsVisibleProperty, this.sumDataSetProperty, waveformProperty, domainProperty, seriesTypeProperty, tProperty], (infiniteHarmonicsVisible, sumDataSet, waveform, domain, seriesType, t) => {
      if (infiniteHarmonicsVisible && waveform.supportsInfiniteHarmonics) {
        assert && assert(waveform.getInfiniteHarmonicsDataSet);
        return waveform.getInfiniteHarmonicsDataSet(domain, seriesType, t, L, T);
      } else {
        return EMPTY_DATA_SET;
      }
    });
  }
  reset() {
    super.reset();
    this.infiniteHarmonicsVisibleProperty.reset();
  }
}
fourierMakingWaves.register('DiscreteSumChart', DiscreteSumChart);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,