// Copyright 2020-2023, University of Colorado Boulder

/**
 * Waveform is a set of static instances for the preset waveforms that appear in the 'Discrete' screen.
 * These preset waveforms are all based on a peak amplitude of 1.
 * Since the 'Infinite Harmonics' data sets are small, the data sets always cover the maximum x range.
 *
 * Much of this file is ported from, or loosely based on, Presets.java.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import Domain from '../../common/model/Domain.js';
import SeriesType from '../../common/model/SeriesType.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
const PI = Math.PI; // to improve readability

// parent tandem for all static instances of Waveform
const WAVEFORM_TANDEM = Tandem.ROOT.createTandem('discreteScreen').createTandem('model').createTandem('waveforms');

// These are coefficients for the waveform presets that support getInfiniteHarmonicsDataSet. They are multiplied
// by L (wavelength) or T (period), depending on Domain, to produce a data set that will plot the actual waveform.
// These hard-coded values support both sine and cosine, but for a limited x-axis range. Elements in the arrays
// must be ordered by ascending x-coordinate value.
const INFINITE_HARMONICS_BASE_POINTS = {
  // Ported from Preset.java SINE_TRIANGLE_POINTS
  TRIANGLE: [new Vector2(-11 / 4, 1), new Vector2(-9 / 4, -1), new Vector2(-7 / 4, 1), new Vector2(-5 / 4, -1), new Vector2(-3 / 4, 1), new Vector2(-1 / 4, -1), new Vector2(1 / 4, 1), new Vector2(3 / 4, -1), new Vector2(5 / 4, 1), new Vector2(7 / 4, -1), new Vector2(9 / 4, 1), new Vector2(11 / 4, -1)],
  // Ported from Preset.java SINE_SQUARE_POINTS
  SQUARE: [new Vector2(-3, -1), new Vector2(-3, 1), new Vector2(-5 / 2, 1), new Vector2(-5 / 2, -1), new Vector2(-2, -1), new Vector2(-2, 1), new Vector2(-3 / 2, 1), new Vector2(-3 / 2, -1), new Vector2(-1, -1), new Vector2(-1, 1), new Vector2(-1 / 2, 1), new Vector2(-1 / 2, -1), new Vector2(0, -1), new Vector2(0, 1), new Vector2(1 / 2, 1), new Vector2(1 / 2, -1), new Vector2(1, -1), new Vector2(1, 1), new Vector2(3 / 2, 1), new Vector2(3 / 2, -1), new Vector2(2, -1), new Vector2(2, 1), new Vector2(5 / 2, 1), new Vector2(5 / 2, -1), new Vector2(3, -1), new Vector2(3, 1)],
  // Ported from Preset.java SINE_SAWTOOTH_POINTS
  SAWTOOTH: [new Vector2(-7 / 2, 1), new Vector2(-7 / 2, -1), new Vector2(-5 / 2, 1), new Vector2(-5 / 2, -1), new Vector2(-3 / 2, 1), new Vector2(-3 / 2, -1), new Vector2(-1 / 2, 1), new Vector2(-1 / 2, -1), new Vector2(1 / 2, 1), new Vector2(1 / 2, -1), new Vector2(3 / 2, 1), new Vector2(3 / 2, -1), new Vector2(5 / 2, 1), new Vector2(5 / 2, -1), new Vector2(7 / 2, 1), new Vector2(7 / 2, -1)]
};

/**
 * Determines if an array of Vector2 is ordered by ascending x coordinate.
 */
function isOrderedByAscendingX(array) {
  return _.every(array, (vector, index, array) => index === 0 || array[index - 1].x <= vector.x);
}
assert && assert(isOrderedByAscendingX(INFINITE_HARMONICS_BASE_POINTS.TRIANGLE));
assert && assert(isOrderedByAscendingX(INFINITE_HARMONICS_BASE_POINTS.SQUARE));
assert && assert(isOrderedByAscendingX(INFINITE_HARMONICS_BASE_POINTS.SAWTOOTH));

/**
 * Gets the amplitudes for the harmonics that approximate the waveform.
 * @param numberOfHarmonics - number of non-zero harmonics is the series
 * @param seriesType - sin or cos
 * @returns ordered by increasing harmonic order
 */

/**
 * Gets the data set that can be used to plot the actual waveform, as if the waveform were
 * approximated using a Fourier series with an infinite number of harmonics. Ordered by increasing x coordinate.
 * If this function is null, it means that the waveform does not support the 'Infinite Harmonics' feature.
 * @param domain - Domain of the x-axis
 * @param seriesType - sin or cos
 * @param t - time, in milliseconds
 * @param L - wavelength of the fundamental harmonic, in meters
 * @param T - period of the fundamental harmonic, in milliseconds
 */

export default class Waveform extends PhetioObject {
  // See SelfOptions

  constructor(providedOptions) {
    const options = optionize()({
      // PhetioObjectOptions
      phetioType: Waveform.WaveformIO,
      phetioState: false
    }, providedOptions);
    super(options);
    this.getAmplitudes = options.getAmplitudes;
    this.getInfiniteHarmonicsDataSet = options.getInfiniteHarmonicsDataSet;
    this.supportsInfiniteHarmonics = !!options.getInfiniteHarmonicsDataSet;
  }
  static WaveformIO = new IOType('WaveformIO', {
    valueType: Waveform,
    supertype: ReferenceIO(IOType.ObjectIO)
  });
  static SINUSOID = new Waveform({
    getAmplitudes: (numberOfHarmonics, seriesType) => {
      const amplitudes = [];
      for (let n = 1; n <= numberOfHarmonics; n++) {
        // A1 = 1, all others are 0
        amplitudes.push(n === 1 ? 1 : 0);
      }
      return amplitudes;
    },
    // Infinite Harmonics is not supported for sinusoid.
    getInfiniteHarmonicsDataSet: null,
    tandem: WAVEFORM_TANDEM.createTandem('sinusoid')
  });
  static TRIANGLE = new Waveform({
    // See https://mathworld.wolfram.com/FourierSeriesTriangleWave.html
    getAmplitudes: (numberOfHarmonics, seriesType) => {
      const amplitudes = [];
      for (let n = 1; n <= numberOfHarmonics; n++) {
        if (seriesType === SeriesType.SIN) {
          // 8/(1*PI^2), 0, -8/(9*PI^2), 0, 8/(25*PI^2), 0, -8/(49*PI^2), 0, 8/(81*PI^2), 0, -8/(121*PI^2), ...
          amplitudes.push(n % 2 === 0 ? 0 : Math.pow(-1, (n - 1) / 2) * (8 / (n * n * PI * PI)));
        } else {
          // 8/(1*PI^2), 0, 8/(9*PI^2), 0, 8/(25*PI^2), 0, 8/(49*PI^2), 0, 8/(81*PI^2), 0, 8/(121*PI^2), ...
          amplitudes.push(n % 2 === 0 ? 0 : 8 / (n * n * PI * PI));
        }
      }
      return amplitudes;
    },
    getInfiniteHarmonicsDataSet: (domain, seriesType, t, L, T) => {
      return mapBasePointsToDataSet(INFINITE_HARMONICS_BASE_POINTS.TRIANGLE, domain, seriesType, t, L, T);
    },
    tandem: WAVEFORM_TANDEM.createTandem('triangle')
  });
  static SQUARE = new Waveform({
    // See https://mathworld.wolfram.com/FourierSeriesSquareWave.html
    getAmplitudes: (numberOfHarmonics, seriesType) => {
      const amplitudes = [];
      for (let n = 1; n <= numberOfHarmonics; n++) {
        if (seriesType === SeriesType.SIN) {
          // 4/(1*PI), 0, 4/(3*PI), 0, 4/(5*PI), 0, 4/(7*PI), 0, 4/(9*PI), 0, 4/(11*PI), ...
          amplitudes.push(n % 2 === 0 ? 0 : 4 / (n * PI));
        } else {
          // 4/(1*PI), 0, -4/(3*PI), 0, 4/(5*PI), 0, -4/(7*PI), 0, 4/(9*PI), 0, -4/(11*PI), ...
          amplitudes.push(n % 2 === 0 ? 0 : Math.pow(-1, (n - 1) / 2) * (4 / (n * PI)));
        }
      }
      return amplitudes;
    },
    getInfiniteHarmonicsDataSet: (domain, seriesType, t, L, T) => {
      return mapBasePointsToDataSet(INFINITE_HARMONICS_BASE_POINTS.SQUARE, domain, seriesType, t, L, T);
    },
    tandem: WAVEFORM_TANDEM.createTandem('square')
  });
  static SAWTOOTH = new Waveform({
    // See https://mathworld.wolfram.com/FourierSeriesSawtoothWave.html
    getAmplitudes: (numberOfHarmonics, seriesType) => {
      assert && assert(seriesType !== SeriesType.COS, 'cannot make a sawtooth wave out of cosines');
      const amplitudes = [];
      for (let n = 1; n <= numberOfHarmonics; n++) {
        // 2/(1*PI), -2/(2*PI), 2/(3*PI), -2/(4*PI), 2/(5*PI), -2/(6*PI), 2/(7*PI), -2/(8*PI), 2/(9*PI), -2/(10*PI), 2/(11*PI), ...
        amplitudes.push(Math.pow(-1, n - 1) * (2 / (n * PI)));
      }
      return amplitudes;
    },
    getInfiniteHarmonicsDataSet: (domain, seriesType, t, L, T) => {
      return mapBasePointsToDataSet(INFINITE_HARMONICS_BASE_POINTS.SAWTOOTH, domain, seriesType, t, L, T);
    },
    tandem: WAVEFORM_TANDEM.createTandem('sawtooth')
  });
  static WAVE_PACKET = new Waveform({
    // Presets.java used these same hardcoded amplitude values. It documented an equation, but that equation did not
    // produce these values, and in fact produced invalid values. After repeated attempts to identify a correct equation,
    // we gave up and decided to stick with the hardcoded values.
    // See https://github.com/phetsims/fourier-making-waves/issues/18
    getAmplitudes: (numberOfHarmonics, seriesType) => {
      return [[1.000000], [0.457833, 0.457833], [0.249352, 1.000000, 0.249352], [0.172422, 0.822578, 0.822578, 0.172422], [0.135335, 0.606531, 1.000000, 0.606531, 0.135335], [0.114162, 0.457833, 0.916855, 0.916855, 0.457833, 0.114162], [0.100669, 0.360448, 0.774837, 1.000000, 0.774837, 0.360448, 0.100669], [0.091394, 0.295023, 0.644389, 0.952345, 0.952345, 0.644389, 0.295023, 0.091394], [0.084658, 0.249352, 0.539408, 0.856997, 1.000000, 0.856997, 0.539408, 0.249352, 0.084658], [0.079560, 0.216255, 0.457833, 0.754840, 0.969233, 0.969233, 0.754840, 0.457833, 0.216255, 0.079560], [0.075574, 0.191495, 0.394652, 0.661515, 0.901851, 1.000000, 0.901851, 0.661515, 0.394652, 0.191495, 0.075574]][numberOfHarmonics - 1];
    },
    // Infinite Harmonics is not supported for wave packet.
    getInfiniteHarmonicsDataSet: null,
    tandem: WAVEFORM_TANDEM.createTandem('wavePacket')
  });
  static CUSTOM = new Waveform({
    getAmplitudes: (numberOfHarmonics, seriesType) => {
      throw new Error('getAmplitudes is not supported for CUSTOM.');
    },
    // Infinite Harmonics is not supported for custom.
    getInfiniteHarmonicsDataSet: null,
    tandem: WAVEFORM_TANDEM.createTandem('custom')
  });
}

/**
 * Take an array of base points that describe an 'infinite harmonics' waveform, map it to a data set that is
 * appropriate for a specified Domain, SeriesType, etc.
 * @param basePoints - one of the arrays in INFINITE_HARMONICS_BASE_POINTS
 * @param domain
 * @param seriesType - sine or cosine
 * @param t - the current time
 * @param L - wavelength of the fundamental harmonic, in meters
 * @param T - period of the fundamental harmonic, in milliseconds
 */
function mapBasePointsToDataSet(basePoints, domain, seriesType, t, L, T) {
  // Get the quantity to use for the x axis, based on Domain.
  const x = domain === Domain.TIME ? T : L;

  // cosine shifts the waveform left by 1/4 of the wavelength or period.
  let shiftX = seriesType === SeriesType.SIN ? 0 : -0.25 * x;

  // space & time shifts the waveform by a portion of the wavelength.
  // This computation is similar to what's used in getAmplitudeSpaceAndTimeSine, in getAmplitudeFunction.ts.
  if (domain === Domain.SPACE_AND_TIME) {
    const remainder = (t / T - x / L) % 1;
    shiftX += remainder * x;
  }

  // Apply x and shiftX to the base points.
  return basePoints.map(point => new Vector2(x * point.x + shiftX, point.y));
}
fourierMakingWaves.register('Waveform', Waveform);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwib3B0aW9uaXplIiwiUGhldGlvT2JqZWN0IiwiVGFuZGVtIiwiSU9UeXBlIiwiUmVmZXJlbmNlSU8iLCJEb21haW4iLCJTZXJpZXNUeXBlIiwiZm91cmllck1ha2luZ1dhdmVzIiwiUEkiLCJNYXRoIiwiV0FWRUZPUk1fVEFOREVNIiwiUk9PVCIsImNyZWF0ZVRhbmRlbSIsIklORklOSVRFX0hBUk1PTklDU19CQVNFX1BPSU5UUyIsIlRSSUFOR0xFIiwiU1FVQVJFIiwiU0FXVE9PVEgiLCJpc09yZGVyZWRCeUFzY2VuZGluZ1giLCJhcnJheSIsIl8iLCJldmVyeSIsInZlY3RvciIsImluZGV4IiwieCIsImFzc2VydCIsIldhdmVmb3JtIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicGhldGlvVHlwZSIsIldhdmVmb3JtSU8iLCJwaGV0aW9TdGF0ZSIsImdldEFtcGxpdHVkZXMiLCJnZXRJbmZpbml0ZUhhcm1vbmljc0RhdGFTZXQiLCJzdXBwb3J0c0luZmluaXRlSGFybW9uaWNzIiwidmFsdWVUeXBlIiwic3VwZXJ0eXBlIiwiT2JqZWN0SU8iLCJTSU5VU09JRCIsIm51bWJlck9mSGFybW9uaWNzIiwic2VyaWVzVHlwZSIsImFtcGxpdHVkZXMiLCJuIiwicHVzaCIsInRhbmRlbSIsIlNJTiIsInBvdyIsImRvbWFpbiIsInQiLCJMIiwiVCIsIm1hcEJhc2VQb2ludHNUb0RhdGFTZXQiLCJDT1MiLCJXQVZFX1BBQ0tFVCIsIkNVU1RPTSIsIkVycm9yIiwiYmFzZVBvaW50cyIsIlRJTUUiLCJzaGlmdFgiLCJTUEFDRV9BTkRfVElNRSIsInJlbWFpbmRlciIsIm1hcCIsInBvaW50IiwieSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F2ZWZvcm0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV2F2ZWZvcm0gaXMgYSBzZXQgb2Ygc3RhdGljIGluc3RhbmNlcyBmb3IgdGhlIHByZXNldCB3YXZlZm9ybXMgdGhhdCBhcHBlYXIgaW4gdGhlICdEaXNjcmV0ZScgc2NyZWVuLlxyXG4gKiBUaGVzZSBwcmVzZXQgd2F2ZWZvcm1zIGFyZSBhbGwgYmFzZWQgb24gYSBwZWFrIGFtcGxpdHVkZSBvZiAxLlxyXG4gKiBTaW5jZSB0aGUgJ0luZmluaXRlIEhhcm1vbmljcycgZGF0YSBzZXRzIGFyZSBzbWFsbCwgdGhlIGRhdGEgc2V0cyBhbHdheXMgY292ZXIgdGhlIG1heGltdW0geCByYW5nZS5cclxuICpcclxuICogTXVjaCBvZiB0aGlzIGZpbGUgaXMgcG9ydGVkIGZyb20sIG9yIGxvb3NlbHkgYmFzZWQgb24sIFByZXNldHMuamF2YS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QsIHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9JT1R5cGUuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IERvbWFpbiBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvRG9tYWluLmpzJztcclxuaW1wb3J0IFNlcmllc1R5cGUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1Nlcmllc1R5cGUuanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcblxyXG5jb25zdCBQSSA9IE1hdGguUEk7IC8vIHRvIGltcHJvdmUgcmVhZGFiaWxpdHlcclxuXHJcbi8vIHBhcmVudCB0YW5kZW0gZm9yIGFsbCBzdGF0aWMgaW5zdGFuY2VzIG9mIFdhdmVmb3JtXHJcbmNvbnN0IFdBVkVGT1JNX1RBTkRFTSA9IFRhbmRlbS5ST09ULmNyZWF0ZVRhbmRlbSggJ2Rpc2NyZXRlU2NyZWVuJyApLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApLmNyZWF0ZVRhbmRlbSggJ3dhdmVmb3JtcycgKTtcclxuXHJcbi8vIFRoZXNlIGFyZSBjb2VmZmljaWVudHMgZm9yIHRoZSB3YXZlZm9ybSBwcmVzZXRzIHRoYXQgc3VwcG9ydCBnZXRJbmZpbml0ZUhhcm1vbmljc0RhdGFTZXQuIFRoZXkgYXJlIG11bHRpcGxpZWRcclxuLy8gYnkgTCAod2F2ZWxlbmd0aCkgb3IgVCAocGVyaW9kKSwgZGVwZW5kaW5nIG9uIERvbWFpbiwgdG8gcHJvZHVjZSBhIGRhdGEgc2V0IHRoYXQgd2lsbCBwbG90IHRoZSBhY3R1YWwgd2F2ZWZvcm0uXHJcbi8vIFRoZXNlIGhhcmQtY29kZWQgdmFsdWVzIHN1cHBvcnQgYm90aCBzaW5lIGFuZCBjb3NpbmUsIGJ1dCBmb3IgYSBsaW1pdGVkIHgtYXhpcyByYW5nZS4gRWxlbWVudHMgaW4gdGhlIGFycmF5c1xyXG4vLyBtdXN0IGJlIG9yZGVyZWQgYnkgYXNjZW5kaW5nIHgtY29vcmRpbmF0ZSB2YWx1ZS5cclxuY29uc3QgSU5GSU5JVEVfSEFSTU9OSUNTX0JBU0VfUE9JTlRTID0ge1xyXG5cclxuICAvLyBQb3J0ZWQgZnJvbSBQcmVzZXQuamF2YSBTSU5FX1RSSUFOR0xFX1BPSU5UU1xyXG4gIFRSSUFOR0xFOiBbXHJcbiAgICBuZXcgVmVjdG9yMiggLTExIC8gNCwgMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC05IC8gNCwgLTEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCAtNyAvIDQsIDEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCAtNSAvIDQsIC0xICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTMgLyA0LCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTEgLyA0LCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDEgLyA0LCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggMyAvIDQsIC0xICksXHJcbiAgICBuZXcgVmVjdG9yMiggNSAvIDQsIDEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCA3IC8gNCwgLTEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCA5IC8gNCwgMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDExIC8gNCwgLTEgKVxyXG4gIF0sXHJcblxyXG4gIC8vIFBvcnRlZCBmcm9tIFByZXNldC5qYXZhIFNJTkVfU1FVQVJFX1BPSU5UU1xyXG4gIFNRVUFSRTogW1xyXG4gICAgbmV3IFZlY3RvcjIoIC0zLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC0zLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTUgLyAyLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTUgLyAyLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC0yLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC0yLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTMgLyAyLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTMgLyAyLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC0xLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC0xLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTEgLyAyLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTEgLyAyLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDAsIC0xICksXHJcbiAgICBuZXcgVmVjdG9yMiggMCwgMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDEgLyAyLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggMSAvIDIsIC0xICksXHJcbiAgICBuZXcgVmVjdG9yMiggMSwgLTEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCAxLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggMyAvIDIsIDEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCAzIC8gMiwgLTEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCAyLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDIsIDEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCA1IC8gMiwgMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDUgLyAyLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDMsIC0xICksXHJcbiAgICBuZXcgVmVjdG9yMiggMywgMSApXHJcbiAgXSxcclxuXHJcbiAgLy8gUG9ydGVkIGZyb20gUHJlc2V0LmphdmEgU0lORV9TQVdUT09USF9QT0lOVFNcclxuICBTQVdUT09USDogW1xyXG4gICAgbmV3IFZlY3RvcjIoIC03IC8gMiwgMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC03IC8gMiwgLTEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCAtNSAvIDIsIDEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCAtNSAvIDIsIC0xICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTMgLyAyLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggLTMgLyAyLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC0xIC8gMiwgMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIC0xIC8gMiwgLTEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCAxIC8gMiwgMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDEgLyAyLCAtMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDMgLyAyLCAxICksXHJcbiAgICBuZXcgVmVjdG9yMiggMyAvIDIsIC0xICksXHJcbiAgICBuZXcgVmVjdG9yMiggNSAvIDIsIDEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCA1IC8gMiwgLTEgKSxcclxuICAgIG5ldyBWZWN0b3IyKCA3IC8gMiwgMSApLFxyXG4gICAgbmV3IFZlY3RvcjIoIDcgLyAyLCAtMSApXHJcbiAgXVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIERldGVybWluZXMgaWYgYW4gYXJyYXkgb2YgVmVjdG9yMiBpcyBvcmRlcmVkIGJ5IGFzY2VuZGluZyB4IGNvb3JkaW5hdGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc09yZGVyZWRCeUFzY2VuZGluZ1goIGFycmF5OiBWZWN0b3IyW10gKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIF8uZXZlcnkoIGFycmF5LCAoIHZlY3RvciwgaW5kZXgsIGFycmF5ICkgPT4gKCBpbmRleCA9PT0gMCB8fCBhcnJheVsgaW5kZXggLSAxIF0ueCA8PSB2ZWN0b3IueCApICk7XHJcbn1cclxuXHJcbmFzc2VydCAmJiBhc3NlcnQoIGlzT3JkZXJlZEJ5QXNjZW5kaW5nWCggSU5GSU5JVEVfSEFSTU9OSUNTX0JBU0VfUE9JTlRTLlRSSUFOR0xFICkgKTtcclxuYXNzZXJ0ICYmIGFzc2VydCggaXNPcmRlcmVkQnlBc2NlbmRpbmdYKCBJTkZJTklURV9IQVJNT05JQ1NfQkFTRV9QT0lOVFMuU1FVQVJFICkgKTtcclxuYXNzZXJ0ICYmIGFzc2VydCggaXNPcmRlcmVkQnlBc2NlbmRpbmdYKCBJTkZJTklURV9IQVJNT05JQ1NfQkFTRV9QT0lOVFMuU0FXVE9PVEggKSApO1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGFtcGxpdHVkZXMgZm9yIHRoZSBoYXJtb25pY3MgdGhhdCBhcHByb3hpbWF0ZSB0aGUgd2F2ZWZvcm0uXHJcbiAqIEBwYXJhbSBudW1iZXJPZkhhcm1vbmljcyAtIG51bWJlciBvZiBub24temVybyBoYXJtb25pY3MgaXMgdGhlIHNlcmllc1xyXG4gKiBAcGFyYW0gc2VyaWVzVHlwZSAtIHNpbiBvciBjb3NcclxuICogQHJldHVybnMgb3JkZXJlZCBieSBpbmNyZWFzaW5nIGhhcm1vbmljIG9yZGVyXHJcbiAqL1xyXG50eXBlIEdldEFtcGxpdHVkZXNGdW5jdGlvbiA9ICggbnVtYmVyT2ZIYXJtb25pY3M6IG51bWJlciwgc2VyaWVzVHlwZTogU2VyaWVzVHlwZSApID0+IG51bWJlcltdO1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGRhdGEgc2V0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcGxvdCB0aGUgYWN0dWFsIHdhdmVmb3JtLCBhcyBpZiB0aGUgd2F2ZWZvcm0gd2VyZVxyXG4gKiBhcHByb3hpbWF0ZWQgdXNpbmcgYSBGb3VyaWVyIHNlcmllcyB3aXRoIGFuIGluZmluaXRlIG51bWJlciBvZiBoYXJtb25pY3MuIE9yZGVyZWQgYnkgaW5jcmVhc2luZyB4IGNvb3JkaW5hdGUuXHJcbiAqIElmIHRoaXMgZnVuY3Rpb24gaXMgbnVsbCwgaXQgbWVhbnMgdGhhdCB0aGUgd2F2ZWZvcm0gZG9lcyBub3Qgc3VwcG9ydCB0aGUgJ0luZmluaXRlIEhhcm1vbmljcycgZmVhdHVyZS5cclxuICogQHBhcmFtIGRvbWFpbiAtIERvbWFpbiBvZiB0aGUgeC1heGlzXHJcbiAqIEBwYXJhbSBzZXJpZXNUeXBlIC0gc2luIG9yIGNvc1xyXG4gKiBAcGFyYW0gdCAtIHRpbWUsIGluIG1pbGxpc2Vjb25kc1xyXG4gKiBAcGFyYW0gTCAtIHdhdmVsZW5ndGggb2YgdGhlIGZ1bmRhbWVudGFsIGhhcm1vbmljLCBpbiBtZXRlcnNcclxuICogQHBhcmFtIFQgLSBwZXJpb2Qgb2YgdGhlIGZ1bmRhbWVudGFsIGhhcm1vbmljLCBpbiBtaWxsaXNlY29uZHNcclxuICovXHJcbnR5cGUgR2V0SW5maW5pdGVIYXJtb25pY3NEYXRhU2V0RnVuY3Rpb24gPSAoIGRvbWFpbjogRG9tYWluLCBzZXJpZXNUeXBlOiBTZXJpZXNUeXBlLCB0OiBudW1iZXIsIEw6IG51bWJlciwgVDogbnVtYmVyICkgPT4gVmVjdG9yMltdO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBnZXRBbXBsaXR1ZGVzOiBHZXRBbXBsaXR1ZGVzRnVuY3Rpb247XHJcbiAgZ2V0SW5maW5pdGVIYXJtb25pY3NEYXRhU2V0OiBHZXRJbmZpbml0ZUhhcm1vbmljc0RhdGFTZXRGdW5jdGlvbiB8IG51bGw7XHJcbn07XHJcblxyXG50eXBlIFdhdmVmb3JtT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhdmVmb3JtIGV4dGVuZHMgUGhldGlvT2JqZWN0IHtcclxuXHJcbiAgLy8gU2VlIFNlbGZPcHRpb25zXHJcbiAgcHVibGljIHJlYWRvbmx5IGdldEFtcGxpdHVkZXM6IEdldEFtcGxpdHVkZXNGdW5jdGlvbjtcclxuICBwdWJsaWMgcmVhZG9ubHkgZ2V0SW5maW5pdGVIYXJtb25pY3NEYXRhU2V0OiBHZXRJbmZpbml0ZUhhcm1vbmljc0RhdGFTZXRGdW5jdGlvbiB8IG51bGw7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBzdXBwb3J0c0luZmluaXRlSGFybW9uaWNzOiBib29sZWFuO1xyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IFdhdmVmb3JtT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFdhdmVmb3JtT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBoZXRpb09iamVjdE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFBoZXRpb09iamVjdE9wdGlvbnNcclxuICAgICAgcGhldGlvVHlwZTogV2F2ZWZvcm0uV2F2ZWZvcm1JTyxcclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuZ2V0QW1wbGl0dWRlcyA9IG9wdGlvbnMuZ2V0QW1wbGl0dWRlcztcclxuICAgIHRoaXMuZ2V0SW5maW5pdGVIYXJtb25pY3NEYXRhU2V0ID0gb3B0aW9ucy5nZXRJbmZpbml0ZUhhcm1vbmljc0RhdGFTZXQ7XHJcbiAgICB0aGlzLnN1cHBvcnRzSW5maW5pdGVIYXJtb25pY3MgPSAhIW9wdGlvbnMuZ2V0SW5maW5pdGVIYXJtb25pY3NEYXRhU2V0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBXYXZlZm9ybUlPID0gbmV3IElPVHlwZSggJ1dhdmVmb3JtSU8nLCB7XHJcbiAgICB2YWx1ZVR5cGU6IFdhdmVmb3JtLFxyXG4gICAgc3VwZXJ0eXBlOiBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPIClcclxuICB9ICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU0lOVVNPSUQgPSBuZXcgV2F2ZWZvcm0oIHtcclxuXHJcbiAgICBnZXRBbXBsaXR1ZGVzOiAoIG51bWJlck9mSGFybW9uaWNzOiBudW1iZXIsIHNlcmllc1R5cGU6IFNlcmllc1R5cGUgKTogbnVtYmVyW10gPT4ge1xyXG4gICAgICBjb25zdCBhbXBsaXR1ZGVzID0gW107XHJcbiAgICAgIGZvciAoIGxldCBuID0gMTsgbiA8PSBudW1iZXJPZkhhcm1vbmljczsgbisrICkge1xyXG5cclxuICAgICAgICAvLyBBMSA9IDEsIGFsbCBvdGhlcnMgYXJlIDBcclxuICAgICAgICBhbXBsaXR1ZGVzLnB1c2goIG4gPT09IDEgPyAxIDogMCApO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhbXBsaXR1ZGVzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBJbmZpbml0ZSBIYXJtb25pY3MgaXMgbm90IHN1cHBvcnRlZCBmb3Igc2ludXNvaWQuXHJcbiAgICBnZXRJbmZpbml0ZUhhcm1vbmljc0RhdGFTZXQ6IG51bGwsXHJcblxyXG4gICAgdGFuZGVtOiBXQVZFRk9STV9UQU5ERU0uY3JlYXRlVGFuZGVtKCAnc2ludXNvaWQnIClcclxuICB9ICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVFJJQU5HTEUgPSBuZXcgV2F2ZWZvcm0oIHtcclxuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9tYXRod29ybGQud29sZnJhbS5jb20vRm91cmllclNlcmllc1RyaWFuZ2xlV2F2ZS5odG1sXHJcbiAgICBnZXRBbXBsaXR1ZGVzOiAoIG51bWJlck9mSGFybW9uaWNzOiBudW1iZXIsIHNlcmllc1R5cGU6IFNlcmllc1R5cGUgKTogbnVtYmVyW10gPT4ge1xyXG4gICAgICBjb25zdCBhbXBsaXR1ZGVzID0gW107XHJcbiAgICAgIGZvciAoIGxldCBuID0gMTsgbiA8PSBudW1iZXJPZkhhcm1vbmljczsgbisrICkge1xyXG4gICAgICAgIGlmICggc2VyaWVzVHlwZSA9PT0gU2VyaWVzVHlwZS5TSU4gKSB7XHJcblxyXG4gICAgICAgICAgLy8gOC8oMSpQSV4yKSwgMCwgLTgvKDkqUEleMiksIDAsIDgvKDI1KlBJXjIpLCAwLCAtOC8oNDkqUEleMiksIDAsIDgvKDgxKlBJXjIpLCAwLCAtOC8oMTIxKlBJXjIpLCAuLi5cclxuICAgICAgICAgIGFtcGxpdHVkZXMucHVzaCggbiAlIDIgPT09IDAgPyAwIDogTWF0aC5wb3coIC0xLCAoIG4gLSAxICkgLyAyICkgKiAoIDggLyAoIG4gKiBuICogUEkgKiBQSSApICkgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gOC8oMSpQSV4yKSwgMCwgOC8oOSpQSV4yKSwgMCwgOC8oMjUqUEleMiksIDAsIDgvKDQ5KlBJXjIpLCAwLCA4Lyg4MSpQSV4yKSwgMCwgOC8oMTIxKlBJXjIpLCAuLi5cclxuICAgICAgICAgIGFtcGxpdHVkZXMucHVzaCggbiAlIDIgPT09IDAgPyAwIDogKCA4IC8gKCBuICogbiAqIFBJICogUEkgKSApICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhbXBsaXR1ZGVzO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRJbmZpbml0ZUhhcm1vbmljc0RhdGFTZXQ6ICggZG9tYWluOiBEb21haW4sIHNlcmllc1R5cGU6IFNlcmllc1R5cGUsIHQ6IG51bWJlciwgTDogbnVtYmVyLCBUOiBudW1iZXIgKTogVmVjdG9yMltdID0+IHtcclxuICAgICAgcmV0dXJuIG1hcEJhc2VQb2ludHNUb0RhdGFTZXQoIElORklOSVRFX0hBUk1PTklDU19CQVNFX1BPSU5UUy5UUklBTkdMRSwgZG9tYWluLCBzZXJpZXNUeXBlLCB0LCBMLCBUICk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRhbmRlbTogV0FWRUZPUk1fVEFOREVNLmNyZWF0ZVRhbmRlbSggJ3RyaWFuZ2xlJyApXHJcbiAgfSApO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFNRVUFSRSA9IG5ldyBXYXZlZm9ybSgge1xyXG5cclxuICAgIC8vIFNlZSBodHRwczovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9Gb3VyaWVyU2VyaWVzU3F1YXJlV2F2ZS5odG1sXHJcbiAgICBnZXRBbXBsaXR1ZGVzOiAoIG51bWJlck9mSGFybW9uaWNzOiBudW1iZXIsIHNlcmllc1R5cGU6IFNlcmllc1R5cGUgKTogbnVtYmVyW10gPT4ge1xyXG4gICAgICBjb25zdCBhbXBsaXR1ZGVzID0gW107XHJcbiAgICAgIGZvciAoIGxldCBuID0gMTsgbiA8PSBudW1iZXJPZkhhcm1vbmljczsgbisrICkge1xyXG4gICAgICAgIGlmICggc2VyaWVzVHlwZSA9PT0gU2VyaWVzVHlwZS5TSU4gKSB7XHJcblxyXG4gICAgICAgICAgLy8gNC8oMSpQSSksIDAsIDQvKDMqUEkpLCAwLCA0Lyg1KlBJKSwgMCwgNC8oNypQSSksIDAsIDQvKDkqUEkpLCAwLCA0LygxMSpQSSksIC4uLlxyXG4gICAgICAgICAgYW1wbGl0dWRlcy5wdXNoKCBuICUgMiA9PT0gMCA/IDAgOiAoIDQgLyAoIG4gKiBQSSApICkgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gNC8oMSpQSSksIDAsIC00LygzKlBJKSwgMCwgNC8oNSpQSSksIDAsIC00Lyg3KlBJKSwgMCwgNC8oOSpQSSksIDAsIC00LygxMSpQSSksIC4uLlxyXG4gICAgICAgICAgYW1wbGl0dWRlcy5wdXNoKCBuICUgMiA9PT0gMCA/IDAgOiBNYXRoLnBvdyggLTEsICggbiAtIDEgKSAvIDIgKSAqICggNCAvICggbiAqIFBJICkgKSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYW1wbGl0dWRlcztcclxuICAgIH0sXHJcblxyXG4gICAgZ2V0SW5maW5pdGVIYXJtb25pY3NEYXRhU2V0OiAoIGRvbWFpbjogRG9tYWluLCBzZXJpZXNUeXBlOiBTZXJpZXNUeXBlLCB0OiBudW1iZXIsIEw6IG51bWJlciwgVDogbnVtYmVyICk6IFZlY3RvcjJbXSA9PiB7XHJcbiAgICAgIHJldHVybiBtYXBCYXNlUG9pbnRzVG9EYXRhU2V0KCBJTkZJTklURV9IQVJNT05JQ1NfQkFTRV9QT0lOVFMuU1FVQVJFLCBkb21haW4sIHNlcmllc1R5cGUsIHQsIEwsIFQgKTtcclxuICAgIH0sXHJcblxyXG4gICAgdGFuZGVtOiBXQVZFRk9STV9UQU5ERU0uY3JlYXRlVGFuZGVtKCAnc3F1YXJlJyApXHJcbiAgfSApO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFNBV1RPT1RIID0gbmV3IFdhdmVmb3JtKCB7XHJcblxyXG4gICAgLy8gU2VlIGh0dHBzOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0ZvdXJpZXJTZXJpZXNTYXd0b290aFdhdmUuaHRtbFxyXG4gICAgZ2V0QW1wbGl0dWRlczogKCBudW1iZXJPZkhhcm1vbmljczogbnVtYmVyLCBzZXJpZXNUeXBlOiBTZXJpZXNUeXBlICk6IG51bWJlcltdID0+IHtcclxuXHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHNlcmllc1R5cGUgIT09IFNlcmllc1R5cGUuQ09TLCAnY2Fubm90IG1ha2UgYSBzYXd0b290aCB3YXZlIG91dCBvZiBjb3NpbmVzJyApO1xyXG5cclxuICAgICAgY29uc3QgYW1wbGl0dWRlcyA9IFtdO1xyXG4gICAgICBmb3IgKCBsZXQgbiA9IDE7IG4gPD0gbnVtYmVyT2ZIYXJtb25pY3M7IG4rKyApIHtcclxuXHJcbiAgICAgICAgLy8gMi8oMSpQSSksIC0yLygyKlBJKSwgMi8oMypQSSksIC0yLyg0KlBJKSwgMi8oNSpQSSksIC0yLyg2KlBJKSwgMi8oNypQSSksIC0yLyg4KlBJKSwgMi8oOSpQSSksIC0yLygxMCpQSSksIDIvKDExKlBJKSwgLi4uXHJcbiAgICAgICAgYW1wbGl0dWRlcy5wdXNoKCBNYXRoLnBvdyggLTEsIG4gLSAxICkgKiAoIDIgLyAoIG4gKiBQSSApICkgKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYW1wbGl0dWRlcztcclxuICAgIH0sXHJcblxyXG4gICAgZ2V0SW5maW5pdGVIYXJtb25pY3NEYXRhU2V0OiAoIGRvbWFpbjogRG9tYWluLCBzZXJpZXNUeXBlOiBTZXJpZXNUeXBlLCB0OiBudW1iZXIsIEw6IG51bWJlciwgVDogbnVtYmVyICk6IFZlY3RvcjJbXSA9PiB7XHJcbiAgICAgIHJldHVybiBtYXBCYXNlUG9pbnRzVG9EYXRhU2V0KCBJTkZJTklURV9IQVJNT05JQ1NfQkFTRV9QT0lOVFMuU0FXVE9PVEgsIGRvbWFpbiwgc2VyaWVzVHlwZSwgdCwgTCwgVCApO1xyXG4gICAgfSxcclxuXHJcbiAgICB0YW5kZW06IFdBVkVGT1JNX1RBTkRFTS5jcmVhdGVUYW5kZW0oICdzYXd0b290aCcgKVxyXG4gIH0gKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBXQVZFX1BBQ0tFVCA9IG5ldyBXYXZlZm9ybSgge1xyXG5cclxuICAgIC8vIFByZXNldHMuamF2YSB1c2VkIHRoZXNlIHNhbWUgaGFyZGNvZGVkIGFtcGxpdHVkZSB2YWx1ZXMuIEl0IGRvY3VtZW50ZWQgYW4gZXF1YXRpb24sIGJ1dCB0aGF0IGVxdWF0aW9uIGRpZCBub3RcclxuICAgIC8vIHByb2R1Y2UgdGhlc2UgdmFsdWVzLCBhbmQgaW4gZmFjdCBwcm9kdWNlZCBpbnZhbGlkIHZhbHVlcy4gQWZ0ZXIgcmVwZWF0ZWQgYXR0ZW1wdHMgdG8gaWRlbnRpZnkgYSBjb3JyZWN0IGVxdWF0aW9uLFxyXG4gICAgLy8gd2UgZ2F2ZSB1cCBhbmQgZGVjaWRlZCB0byBzdGljayB3aXRoIHRoZSBoYXJkY29kZWQgdmFsdWVzLlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9mb3VyaWVyLW1ha2luZy13YXZlcy9pc3N1ZXMvMThcclxuICAgIGdldEFtcGxpdHVkZXM6ICggbnVtYmVyT2ZIYXJtb25pY3M6IG51bWJlciwgc2VyaWVzVHlwZTogU2VyaWVzVHlwZSApOiBudW1iZXJbXSA9PiB7XHJcbiAgICAgIHJldHVybiBbXHJcbiAgICAgICAgWyAxLjAwMDAwMCBdLFxyXG4gICAgICAgIFsgMC40NTc4MzMsIDAuNDU3ODMzIF0sXHJcbiAgICAgICAgWyAwLjI0OTM1MiwgMS4wMDAwMDAsIDAuMjQ5MzUyIF0sXHJcbiAgICAgICAgWyAwLjE3MjQyMiwgMC44MjI1NzgsIDAuODIyNTc4LCAwLjE3MjQyMiBdLFxyXG4gICAgICAgIFsgMC4xMzUzMzUsIDAuNjA2NTMxLCAxLjAwMDAwMCwgMC42MDY1MzEsIDAuMTM1MzM1IF0sXHJcbiAgICAgICAgWyAwLjExNDE2MiwgMC40NTc4MzMsIDAuOTE2ODU1LCAwLjkxNjg1NSwgMC40NTc4MzMsIDAuMTE0MTYyIF0sXHJcbiAgICAgICAgWyAwLjEwMDY2OSwgMC4zNjA0NDgsIDAuNzc0ODM3LCAxLjAwMDAwMCwgMC43NzQ4MzcsIDAuMzYwNDQ4LCAwLjEwMDY2OSBdLFxyXG4gICAgICAgIFsgMC4wOTEzOTQsIDAuMjk1MDIzLCAwLjY0NDM4OSwgMC45NTIzNDUsIDAuOTUyMzQ1LCAwLjY0NDM4OSwgMC4yOTUwMjMsIDAuMDkxMzk0IF0sXHJcbiAgICAgICAgWyAwLjA4NDY1OCwgMC4yNDkzNTIsIDAuNTM5NDA4LCAwLjg1Njk5NywgMS4wMDAwMDAsIDAuODU2OTk3LCAwLjUzOTQwOCwgMC4yNDkzNTIsIDAuMDg0NjU4IF0sXHJcbiAgICAgICAgWyAwLjA3OTU2MCwgMC4yMTYyNTUsIDAuNDU3ODMzLCAwLjc1NDg0MCwgMC45NjkyMzMsIDAuOTY5MjMzLCAwLjc1NDg0MCwgMC40NTc4MzMsIDAuMjE2MjU1LCAwLjA3OTU2MCBdLFxyXG4gICAgICAgIFsgMC4wNzU1NzQsIDAuMTkxNDk1LCAwLjM5NDY1MiwgMC42NjE1MTUsIDAuOTAxODUxLCAxLjAwMDAwMCwgMC45MDE4NTEsIDAuNjYxNTE1LCAwLjM5NDY1MiwgMC4xOTE0OTUsIDAuMDc1NTc0IF1cclxuICAgICAgXVsgbnVtYmVyT2ZIYXJtb25pY3MgLSAxIF07XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEluZmluaXRlIEhhcm1vbmljcyBpcyBub3Qgc3VwcG9ydGVkIGZvciB3YXZlIHBhY2tldC5cclxuICAgIGdldEluZmluaXRlSGFybW9uaWNzRGF0YVNldDogbnVsbCxcclxuXHJcbiAgICB0YW5kZW06IFdBVkVGT1JNX1RBTkRFTS5jcmVhdGVUYW5kZW0oICd3YXZlUGFja2V0JyApXHJcbiAgfSApO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENVU1RPTSA9IG5ldyBXYXZlZm9ybSgge1xyXG5cclxuICAgIGdldEFtcGxpdHVkZXM6ICggbnVtYmVyT2ZIYXJtb25pY3M6IG51bWJlciwgc2VyaWVzVHlwZTogU2VyaWVzVHlwZSApOiBudW1iZXJbXSA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ2dldEFtcGxpdHVkZXMgaXMgbm90IHN1cHBvcnRlZCBmb3IgQ1VTVE9NLicgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gSW5maW5pdGUgSGFybW9uaWNzIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIGN1c3RvbS5cclxuICAgIGdldEluZmluaXRlSGFybW9uaWNzRGF0YVNldDogbnVsbCxcclxuXHJcbiAgICB0YW5kZW06IFdBVkVGT1JNX1RBTkRFTS5jcmVhdGVUYW5kZW0oICdjdXN0b20nIClcclxuICB9ICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUYWtlIGFuIGFycmF5IG9mIGJhc2UgcG9pbnRzIHRoYXQgZGVzY3JpYmUgYW4gJ2luZmluaXRlIGhhcm1vbmljcycgd2F2ZWZvcm0sIG1hcCBpdCB0byBhIGRhdGEgc2V0IHRoYXQgaXNcclxuICogYXBwcm9wcmlhdGUgZm9yIGEgc3BlY2lmaWVkIERvbWFpbiwgU2VyaWVzVHlwZSwgZXRjLlxyXG4gKiBAcGFyYW0gYmFzZVBvaW50cyAtIG9uZSBvZiB0aGUgYXJyYXlzIGluIElORklOSVRFX0hBUk1PTklDU19CQVNFX1BPSU5UU1xyXG4gKiBAcGFyYW0gZG9tYWluXHJcbiAqIEBwYXJhbSBzZXJpZXNUeXBlIC0gc2luZSBvciBjb3NpbmVcclxuICogQHBhcmFtIHQgLSB0aGUgY3VycmVudCB0aW1lXHJcbiAqIEBwYXJhbSBMIC0gd2F2ZWxlbmd0aCBvZiB0aGUgZnVuZGFtZW50YWwgaGFybW9uaWMsIGluIG1ldGVyc1xyXG4gKiBAcGFyYW0gVCAtIHBlcmlvZCBvZiB0aGUgZnVuZGFtZW50YWwgaGFybW9uaWMsIGluIG1pbGxpc2Vjb25kc1xyXG4gKi9cclxuZnVuY3Rpb24gbWFwQmFzZVBvaW50c1RvRGF0YVNldCggYmFzZVBvaW50czogVmVjdG9yMltdLCBkb21haW46IERvbWFpbiwgc2VyaWVzVHlwZTogU2VyaWVzVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdDogbnVtYmVyLCBMOiBudW1iZXIsIFQ6IG51bWJlciApOiBWZWN0b3IyW10ge1xyXG5cclxuICAvLyBHZXQgdGhlIHF1YW50aXR5IHRvIHVzZSBmb3IgdGhlIHggYXhpcywgYmFzZWQgb24gRG9tYWluLlxyXG4gIGNvbnN0IHggPSAoIGRvbWFpbiA9PT0gRG9tYWluLlRJTUUgKSA/IFQgOiBMO1xyXG5cclxuICAvLyBjb3NpbmUgc2hpZnRzIHRoZSB3YXZlZm9ybSBsZWZ0IGJ5IDEvNCBvZiB0aGUgd2F2ZWxlbmd0aCBvciBwZXJpb2QuXHJcbiAgbGV0IHNoaWZ0WCA9ICggc2VyaWVzVHlwZSA9PT0gU2VyaWVzVHlwZS5TSU4gKSA/IDAgOiAoIC0wLjI1ICogeCApO1xyXG5cclxuICAvLyBzcGFjZSAmIHRpbWUgc2hpZnRzIHRoZSB3YXZlZm9ybSBieSBhIHBvcnRpb24gb2YgdGhlIHdhdmVsZW5ndGguXHJcbiAgLy8gVGhpcyBjb21wdXRhdGlvbiBpcyBzaW1pbGFyIHRvIHdoYXQncyB1c2VkIGluIGdldEFtcGxpdHVkZVNwYWNlQW5kVGltZVNpbmUsIGluIGdldEFtcGxpdHVkZUZ1bmN0aW9uLnRzLlxyXG4gIGlmICggZG9tYWluID09PSBEb21haW4uU1BBQ0VfQU5EX1RJTUUgKSB7XHJcbiAgICBjb25zdCByZW1haW5kZXIgPSAoIHQgLyBUIC0geCAvIEwgKSAlIDE7XHJcbiAgICBzaGlmdFggKz0gKCByZW1haW5kZXIgKiB4ICk7XHJcbiAgfVxyXG5cclxuICAvLyBBcHBseSB4IGFuZCBzaGlmdFggdG8gdGhlIGJhc2UgcG9pbnRzLlxyXG4gIHJldHVybiBiYXNlUG9pbnRzLm1hcCggcG9pbnQgPT4gbmV3IFZlY3RvcjIoICggeCAqIHBvaW50LnggKSArIHNoaWZ0WCwgcG9pbnQueSApICk7XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ1dhdmVmb3JtJywgV2F2ZWZvcm0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsT0FBT0MsWUFBWSxNQUErQix1Q0FBdUM7QUFDekYsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxNQUFNLE1BQU0sdUNBQXVDO0FBQzFELE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFDcEUsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxVQUFVLE1BQU0sa0NBQWtDO0FB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