// Copyright 2021-2023, University of Colorado Boulder

/**
 * DiscreteFourierSeries is a specialization of FourierSeries that determines how many of the harmonics are 'relevant'.
 *
 * This approach was chosen to simplify the PhET-iO API.  Rather than have a dynamic collection of harmonics, we
 * have a static number of harmonics, for the maximum number of harmonics needed. This was a fundamental team decision,
 * based on anticipated PhET-iO requirements. See https://github.com/phetsims/fourier-making-waves/issues/6.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import FMWConstants from '../../common/FMWConstants.js';
import FourierSeries from '../../common/model/FourierSeries.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class DiscreteFourierSeries extends FourierSeries {
  // the number of harmonics that are relevant in this series

  constructor(providedOptions) {
    super(providedOptions);
    this.numberOfHarmonicsProperty = new NumberProperty(FMWConstants.MAX_HARMONICS, {
      numberType: 'Integer',
      range: new Range(1, FMWConstants.MAX_HARMONICS),
      tandem: providedOptions.tandem.createTandem('numberOfHarmonicsProperty')
    });

    // Zero out amplitudes that are not relevant. Since this causes amplitudesProperty to go through intermediate
    // states, notification of amplitudesProperty listeners is deferred until all harmonics have been updated.
    this.numberOfHarmonicsProperty.link(numberOfHarmonics => {
      this.amplitudesProperty.setDeferred(true);
      for (let i = numberOfHarmonics; i < this.numberOfHarmonicsProperty.range.max; i++) {
        this.harmonics[i].amplitudeProperty.value = 0;
      }
      const notifyListeners = this.amplitudesProperty.setDeferred(false);
      notifyListeners && notifyListeners();
    });
  }
  reset() {
    super.reset();
    this.numberOfHarmonicsProperty.reset();
  }
}
fourierMakingWaves.register('DiscreteFourierSeries', DiscreteFourierSeries);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiRk1XQ29uc3RhbnRzIiwiRm91cmllclNlcmllcyIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkRpc2NyZXRlRm91cmllclNlcmllcyIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwibnVtYmVyT2ZIYXJtb25pY3NQcm9wZXJ0eSIsIk1BWF9IQVJNT05JQ1MiLCJudW1iZXJUeXBlIiwicmFuZ2UiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJsaW5rIiwibnVtYmVyT2ZIYXJtb25pY3MiLCJhbXBsaXR1ZGVzUHJvcGVydHkiLCJzZXREZWZlcnJlZCIsImkiLCJtYXgiLCJoYXJtb25pY3MiLCJhbXBsaXR1ZGVQcm9wZXJ0eSIsInZhbHVlIiwibm90aWZ5TGlzdGVuZXJzIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpc2NyZXRlRm91cmllclNlcmllcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaXNjcmV0ZUZvdXJpZXJTZXJpZXMgaXMgYSBzcGVjaWFsaXphdGlvbiBvZiBGb3VyaWVyU2VyaWVzIHRoYXQgZGV0ZXJtaW5lcyBob3cgbWFueSBvZiB0aGUgaGFybW9uaWNzIGFyZSAncmVsZXZhbnQnLlxyXG4gKlxyXG4gKiBUaGlzIGFwcHJvYWNoIHdhcyBjaG9zZW4gdG8gc2ltcGxpZnkgdGhlIFBoRVQtaU8gQVBJLiAgUmF0aGVyIHRoYW4gaGF2ZSBhIGR5bmFtaWMgY29sbGVjdGlvbiBvZiBoYXJtb25pY3MsIHdlXHJcbiAqIGhhdmUgYSBzdGF0aWMgbnVtYmVyIG9mIGhhcm1vbmljcywgZm9yIHRoZSBtYXhpbXVtIG51bWJlciBvZiBoYXJtb25pY3MgbmVlZGVkLiBUaGlzIHdhcyBhIGZ1bmRhbWVudGFsIHRlYW0gZGVjaXNpb24sXHJcbiAqIGJhc2VkIG9uIGFudGljaXBhdGVkIFBoRVQtaU8gcmVxdWlyZW1lbnRzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2ZvdXJpZXItbWFraW5nLXdhdmVzL2lzc3Vlcy82LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEZNV0NvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vRk1XQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEZvdXJpZXJTZXJpZXMsIHsgRm91cmllclNlcmllc09wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvRm91cmllclNlcmllcy5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBEaXNjcmV0ZUZvdXJpZXJTZXJpZXNPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBGb3VyaWVyU2VyaWVzT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpc2NyZXRlRm91cmllclNlcmllcyBleHRlbmRzIEZvdXJpZXJTZXJpZXMge1xyXG5cclxuICAvLyB0aGUgbnVtYmVyIG9mIGhhcm1vbmljcyB0aGF0IGFyZSByZWxldmFudCBpbiB0aGlzIHNlcmllc1xyXG4gIHB1YmxpYyByZWFkb25seSBudW1iZXJPZkhhcm1vbmljc1Byb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IERpc2NyZXRlRm91cmllclNlcmllc09wdGlvbnMgKSB7XHJcblxyXG4gICAgc3VwZXIoIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubnVtYmVyT2ZIYXJtb25pY3NQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggRk1XQ29uc3RhbnRzLk1BWF9IQVJNT05JQ1MsIHtcclxuICAgICAgbnVtYmVyVHlwZTogJ0ludGVnZXInLFxyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCAxLCBGTVdDb25zdGFudHMuTUFYX0hBUk1PTklDUyApLFxyXG4gICAgICB0YW5kZW06IHByb3ZpZGVkT3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbnVtYmVyT2ZIYXJtb25pY3NQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFplcm8gb3V0IGFtcGxpdHVkZXMgdGhhdCBhcmUgbm90IHJlbGV2YW50LiBTaW5jZSB0aGlzIGNhdXNlcyBhbXBsaXR1ZGVzUHJvcGVydHkgdG8gZ28gdGhyb3VnaCBpbnRlcm1lZGlhdGVcclxuICAgIC8vIHN0YXRlcywgbm90aWZpY2F0aW9uIG9mIGFtcGxpdHVkZXNQcm9wZXJ0eSBsaXN0ZW5lcnMgaXMgZGVmZXJyZWQgdW50aWwgYWxsIGhhcm1vbmljcyBoYXZlIGJlZW4gdXBkYXRlZC5cclxuICAgIHRoaXMubnVtYmVyT2ZIYXJtb25pY3NQcm9wZXJ0eS5saW5rKCBudW1iZXJPZkhhcm1vbmljcyA9PiB7XHJcbiAgICAgIHRoaXMuYW1wbGl0dWRlc1Byb3BlcnR5LnNldERlZmVycmVkKCB0cnVlICk7XHJcbiAgICAgIGZvciAoIGxldCBpID0gbnVtYmVyT2ZIYXJtb25pY3M7IGkgPCB0aGlzLm51bWJlck9mSGFybW9uaWNzUHJvcGVydHkucmFuZ2UubWF4OyBpKysgKSB7XHJcbiAgICAgICAgdGhpcy5oYXJtb25pY3NbIGkgXS5hbXBsaXR1ZGVQcm9wZXJ0eS52YWx1ZSA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3Qgbm90aWZ5TGlzdGVuZXJzID0gdGhpcy5hbXBsaXR1ZGVzUHJvcGVydHkuc2V0RGVmZXJyZWQoIGZhbHNlICk7XHJcbiAgICAgIG5vdGlmeUxpc3RlbmVycyAmJiBub3RpZnlMaXN0ZW5lcnMoKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNldCgpOiB2b2lkIHtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgICB0aGlzLm51bWJlck9mSGFybW9uaWNzUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ0Rpc2NyZXRlRm91cmllclNlcmllcycsIERpc2NyZXRlRm91cmllclNlcmllcyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUUvQyxPQUFPQyxZQUFZLE1BQU0sOEJBQThCO0FBQ3ZELE9BQU9DLGFBQWEsTUFBZ0MscUNBQXFDO0FBQ3pGLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQU01RCxlQUFlLE1BQU1DLHFCQUFxQixTQUFTRixhQUFhLENBQUM7RUFFL0Q7O0VBR09HLFdBQVdBLENBQUVDLGVBQTZDLEVBQUc7SUFFbEUsS0FBSyxDQUFFQSxlQUFnQixDQUFDO0lBRXhCLElBQUksQ0FBQ0MseUJBQXlCLEdBQUcsSUFBSVIsY0FBYyxDQUFFRSxZQUFZLENBQUNPLGFBQWEsRUFBRTtNQUMvRUMsVUFBVSxFQUFFLFNBQVM7TUFDckJDLEtBQUssRUFBRSxJQUFJVixLQUFLLENBQUUsQ0FBQyxFQUFFQyxZQUFZLENBQUNPLGFBQWMsQ0FBQztNQUNqREcsTUFBTSxFQUFFTCxlQUFlLENBQUNLLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLDJCQUE0QjtJQUMzRSxDQUFFLENBQUM7O0lBRUg7SUFDQTtJQUNBLElBQUksQ0FBQ0wseUJBQXlCLENBQUNNLElBQUksQ0FBRUMsaUJBQWlCLElBQUk7TUFDeEQsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0MsV0FBVyxDQUFFLElBQUssQ0FBQztNQUMzQyxLQUFNLElBQUlDLENBQUMsR0FBR0gsaUJBQWlCLEVBQUVHLENBQUMsR0FBRyxJQUFJLENBQUNWLHlCQUF5QixDQUFDRyxLQUFLLENBQUNRLEdBQUcsRUFBRUQsQ0FBQyxFQUFFLEVBQUc7UUFDbkYsSUFBSSxDQUFDRSxTQUFTLENBQUVGLENBQUMsQ0FBRSxDQUFDRyxpQkFBaUIsQ0FBQ0MsS0FBSyxHQUFHLENBQUM7TUFDakQ7TUFDQSxNQUFNQyxlQUFlLEdBQUcsSUFBSSxDQUFDUCxrQkFBa0IsQ0FBQ0MsV0FBVyxDQUFFLEtBQU0sQ0FBQztNQUNwRU0sZUFBZSxJQUFJQSxlQUFlLENBQUMsQ0FBQztJQUN0QyxDQUFFLENBQUM7RUFDTDtFQUVnQkMsS0FBS0EsQ0FBQSxFQUFTO0lBQzVCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7SUFDYixJQUFJLENBQUNoQix5QkFBeUIsQ0FBQ2dCLEtBQUssQ0FBQyxDQUFDO0VBQ3hDO0FBQ0Y7QUFFQXBCLGtCQUFrQixDQUFDcUIsUUFBUSxDQUFFLHVCQUF1QixFQUFFcEIscUJBQXNCLENBQUMifQ==