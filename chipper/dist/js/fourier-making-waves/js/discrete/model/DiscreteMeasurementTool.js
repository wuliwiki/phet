// Copyright 2021-2023, University of Colorado Boulder

/**
 * DiscreteMeasurementTool is the model for a measurement tool in the 'Discrete' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class DiscreteMeasurementTool {
  // whether the Wavelength tool is selected

  // order of the harmonic measured by the tool

  /**
   * @param symbolStringProperty
   * @param numberOfHarmonicsProperty - number of relevant harmonics in the Fourier series
   * @param tandem
   */
  constructor(symbolStringProperty, numberOfHarmonicsProperty, tandem) {
    this.symbolStringProperty = symbolStringProperty;
    this.isSelectedProperty = new BooleanProperty(false, {
      phetioDocumentation: 'whether this tool is selected',
      tandem: tandem.createTandem('isSelectedProperty')
    });
    this.orderProperty = new NumberProperty(1, {
      numberType: 'Integer',
      range: new Range(1, numberOfHarmonicsProperty.value),
      phetioDocumentation: 'order of the harmonic that this tool is measuring',
      tandem: tandem.createTandem('orderProperty')
    });
    numberOfHarmonicsProperty.link(numberOfHarmonics => {
      // Adjust the tool when a harmonic becomes irrelevant.
      if (this.orderProperty.value > numberOfHarmonics) {
        // Deselect the tool.
        this.isSelectedProperty.value = false;

        // Associate the tool with the highest-order harmonic.
        this.orderProperty.value = numberOfHarmonics;
      }

      // Keep the order range in sync with the number of relevant harmonics.
      this.orderProperty.rangeProperty.value = new Range(1, numberOfHarmonics);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.isSelectedProperty.reset();
    this.orderProperty.reset();
  }
}
fourierMakingWaves.register('DiscreteMeasurementTool', DiscreteMeasurementTool);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiZm91cmllck1ha2luZ1dhdmVzIiwiRGlzY3JldGVNZWFzdXJlbWVudFRvb2wiLCJjb25zdHJ1Y3RvciIsInN5bWJvbFN0cmluZ1Byb3BlcnR5IiwibnVtYmVyT2ZIYXJtb25pY3NQcm9wZXJ0eSIsInRhbmRlbSIsImlzU2VsZWN0ZWRQcm9wZXJ0eSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJjcmVhdGVUYW5kZW0iLCJvcmRlclByb3BlcnR5IiwibnVtYmVyVHlwZSIsInJhbmdlIiwidmFsdWUiLCJsaW5rIiwibnVtYmVyT2ZIYXJtb25pY3MiLCJyYW5nZVByb3BlcnR5IiwiZGlzcG9zZSIsImFzc2VydCIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaXNjcmV0ZU1lYXN1cmVtZW50VG9vbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaXNjcmV0ZU1lYXN1cmVtZW50VG9vbCBpcyB0aGUgbW9kZWwgZm9yIGEgbWVhc3VyZW1lbnQgdG9vbCBpbiB0aGUgJ0Rpc2NyZXRlJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXNjcmV0ZU1lYXN1cmVtZW50VG9vbCB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBzeW1ib2xTdHJpbmdQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPjtcclxuXHJcbiAgLy8gd2hldGhlciB0aGUgV2F2ZWxlbmd0aCB0b29sIGlzIHNlbGVjdGVkXHJcbiAgcHVibGljIHJlYWRvbmx5IGlzU2VsZWN0ZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcblxyXG4gIC8vIG9yZGVyIG9mIHRoZSBoYXJtb25pYyBtZWFzdXJlZCBieSB0aGUgdG9vbFxyXG4gIHB1YmxpYyByZWFkb25seSBvcmRlclByb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHN5bWJvbFN0cmluZ1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIG51bWJlck9mSGFybW9uaWNzUHJvcGVydHkgLSBudW1iZXIgb2YgcmVsZXZhbnQgaGFybW9uaWNzIGluIHRoZSBGb3VyaWVyIHNlcmllc1xyXG4gICAqIEBwYXJhbSB0YW5kZW1cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN5bWJvbFN0cmluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZIYXJtb25pY3NQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHksIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIHRoaXMuc3ltYm9sU3RyaW5nUHJvcGVydHkgPSBzeW1ib2xTdHJpbmdQcm9wZXJ0eTtcclxuXHJcbiAgICB0aGlzLmlzU2VsZWN0ZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd3aGV0aGVyIHRoaXMgdG9vbCBpcyBzZWxlY3RlZCcsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2lzU2VsZWN0ZWRQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMub3JkZXJQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMSwge1xyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDEsIG51bWJlck9mSGFybW9uaWNzUHJvcGVydHkudmFsdWUgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ29yZGVyIG9mIHRoZSBoYXJtb25pYyB0aGF0IHRoaXMgdG9vbCBpcyBtZWFzdXJpbmcnLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdvcmRlclByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgbnVtYmVyT2ZIYXJtb25pY3NQcm9wZXJ0eS5saW5rKCBudW1iZXJPZkhhcm1vbmljcyA9PiB7XHJcblxyXG4gICAgICAvLyBBZGp1c3QgdGhlIHRvb2wgd2hlbiBhIGhhcm1vbmljIGJlY29tZXMgaXJyZWxldmFudC5cclxuICAgICAgaWYgKCB0aGlzLm9yZGVyUHJvcGVydHkudmFsdWUgPiBudW1iZXJPZkhhcm1vbmljcyApIHtcclxuXHJcbiAgICAgICAgLy8gRGVzZWxlY3QgdGhlIHRvb2wuXHJcbiAgICAgICAgdGhpcy5pc1NlbGVjdGVkUHJvcGVydHkudmFsdWUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSB0b29sIHdpdGggdGhlIGhpZ2hlc3Qtb3JkZXIgaGFybW9uaWMuXHJcbiAgICAgICAgdGhpcy5vcmRlclByb3BlcnR5LnZhbHVlID0gbnVtYmVyT2ZIYXJtb25pY3M7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEtlZXAgdGhlIG9yZGVyIHJhbmdlIGluIHN5bmMgd2l0aCB0aGUgbnVtYmVyIG9mIHJlbGV2YW50IGhhcm1vbmljcy5cclxuICAgICAgdGhpcy5vcmRlclByb3BlcnR5LnJhbmdlUHJvcGVydHkudmFsdWUgPSBuZXcgUmFuZ2UoIDEsIG51bWJlck9mSGFybW9uaWNzICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc1NlbGVjdGVkUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMub3JkZXJQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnRGlzY3JldGVNZWFzdXJlbWVudFRvb2wnLCBEaXNjcmV0ZU1lYXN1cmVtZW50VG9vbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFHbEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUUvQyxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFFNUQsZUFBZSxNQUFNQyx1QkFBdUIsQ0FBQztFQUkzQzs7RUFHQTs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLG9CQUErQyxFQUMvQ0MseUJBQXlDLEVBQUVDLE1BQWMsRUFBRztJQUU5RSxJQUFJLENBQUNGLG9CQUFvQixHQUFHQSxvQkFBb0I7SUFFaEQsSUFBSSxDQUFDRyxrQkFBa0IsR0FBRyxJQUFJVCxlQUFlLENBQUUsS0FBSyxFQUFFO01BQ3BEVSxtQkFBbUIsRUFBRSwrQkFBK0I7TUFDcERGLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsb0JBQXFCO0lBQ3BELENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsYUFBYSxHQUFHLElBQUlYLGNBQWMsQ0FBRSxDQUFDLEVBQUU7TUFDMUNZLFVBQVUsRUFBRSxTQUFTO01BQ3JCQyxLQUFLLEVBQUUsSUFBSVosS0FBSyxDQUFFLENBQUMsRUFBRUsseUJBQXlCLENBQUNRLEtBQU0sQ0FBQztNQUN0REwsbUJBQW1CLEVBQUUsbURBQW1EO01BQ3hFRixNQUFNLEVBQUVBLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLGVBQWdCO0lBQy9DLENBQUUsQ0FBQztJQUVISix5QkFBeUIsQ0FBQ1MsSUFBSSxDQUFFQyxpQkFBaUIsSUFBSTtNQUVuRDtNQUNBLElBQUssSUFBSSxDQUFDTCxhQUFhLENBQUNHLEtBQUssR0FBR0UsaUJBQWlCLEVBQUc7UUFFbEQ7UUFDQSxJQUFJLENBQUNSLGtCQUFrQixDQUFDTSxLQUFLLEdBQUcsS0FBSzs7UUFFckM7UUFDQSxJQUFJLENBQUNILGFBQWEsQ0FBQ0csS0FBSyxHQUFHRSxpQkFBaUI7TUFDOUM7O01BRUE7TUFDQSxJQUFJLENBQUNMLGFBQWEsQ0FBQ00sYUFBYSxDQUFDSCxLQUFLLEdBQUcsSUFBSWIsS0FBSyxDQUFFLENBQUMsRUFBRWUsaUJBQWtCLENBQUM7SUFDNUUsQ0FBRSxDQUFDO0VBQ0w7RUFFT0UsT0FBT0EsQ0FBQSxFQUFTO0lBQ3JCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7RUFDM0Y7RUFFT0MsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ1osa0JBQWtCLENBQUNZLEtBQUssQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ1QsYUFBYSxDQUFDUyxLQUFLLENBQUMsQ0FBQztFQUM1QjtBQUNGO0FBRUFsQixrQkFBa0IsQ0FBQ21CLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRWxCLHVCQUF3QixDQUFDIn0=