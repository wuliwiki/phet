// Copyright 2020-2023, University of Colorado Boulder

/**
 * DiscreteScreen is the 'Discrete' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.
 */

import Screen from '../../../joist/js/Screen.js';
import FMWColors from '../common/FMWColors.js';
import FMWIconFactory from '../common/view/FMWIconFactory.js';
import fourierMakingWaves from '../fourierMakingWaves.js';
import FourierMakingWavesStrings from '../FourierMakingWavesStrings.js';
import DiscreteModel from './model/DiscreteModel.js';
import DiscreteKeyboardHelpContent from './view/DiscreteKeyboardHelpContent.js';
import DiscreteScreenView from './view/DiscreteScreenView.js';
export default class DiscreteScreen extends Screen {
  constructor(tandem) {
    const options = {
      name: FourierMakingWavesStrings.screen.discreteStringProperty,
      backgroundColorProperty: FMWColors.discreteScreenBackgroundColorProperty,
      homeScreenIcon: FMWIconFactory.createDiscreteHomeScreenIcon(),
      createKeyboardHelpNode: () => new DiscreteKeyboardHelpContent(),
      tandem: tandem
    };
    super(() => new DiscreteModel(options.tandem.createTandem('model')), model => new DiscreteScreenView(model, options.tandem.createTandem('view')), options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
fourierMakingWaves.register('DiscreteScreen', DiscreteScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJGTVdDb2xvcnMiLCJGTVdJY29uRmFjdG9yeSIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MiLCJEaXNjcmV0ZU1vZGVsIiwiRGlzY3JldGVLZXlib2FyZEhlbHBDb250ZW50IiwiRGlzY3JldGVTY3JlZW5WaWV3IiwiRGlzY3JldGVTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwiZGlzY3JldGVTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiZGlzY3JldGVTY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlRGlzY3JldGVIb21lU2NyZWVuSWNvbiIsImNyZWF0ZUtleWJvYXJkSGVscE5vZGUiLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpc2NyZXRlU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc2NyZXRlU2NyZWVuIGlzIHRoZSAnRGlzY3JldGUnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLlxyXG4gKi9cclxuXHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEZNV0NvbG9ycyBmcm9tICcuLi9jb21tb24vRk1XQ29sb3JzLmpzJztcclxuaW1wb3J0IEZNV0ljb25GYWN0b3J5IGZyb20gJy4uL2NvbW1vbi92aWV3L0ZNV0ljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5pbXBvcnQgRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncyBmcm9tICcuLi9Gb3VyaWVyTWFraW5nV2F2ZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IERpc2NyZXRlTW9kZWwgZnJvbSAnLi9tb2RlbC9EaXNjcmV0ZU1vZGVsLmpzJztcclxuaW1wb3J0IERpc2NyZXRlS2V5Ym9hcmRIZWxwQ29udGVudCBmcm9tICcuL3ZpZXcvRGlzY3JldGVLZXlib2FyZEhlbHBDb250ZW50LmpzJztcclxuaW1wb3J0IERpc2NyZXRlU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvRGlzY3JldGVTY3JlZW5WaWV3LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpc2NyZXRlU2NyZWVuIGV4dGVuZHMgU2NyZWVuPERpc2NyZXRlTW9kZWwsIERpc2NyZXRlU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IEZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3Muc2NyZWVuLmRpc2NyZXRlU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBGTVdDb2xvcnMuZGlzY3JldGVTY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IEZNV0ljb25GYWN0b3J5LmNyZWF0ZURpc2NyZXRlSG9tZVNjcmVlbkljb24oKSxcclxuICAgICAgY3JlYXRlS2V5Ym9hcmRIZWxwTm9kZTogKCkgPT4gbmV3IERpc2NyZXRlS2V5Ym9hcmRIZWxwQ29udGVudCgpLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IERpc2NyZXRlTW9kZWwoIG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBEaXNjcmV0ZVNjcmVlblZpZXcoIG1vZGVsLCBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnRGlzY3JldGVTY3JlZW4nLCBEaXNjcmV0ZVNjcmVlbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0sNkJBQTZCO0FBRWhELE9BQU9DLFNBQVMsTUFBTSx3QkFBd0I7QUFDOUMsT0FBT0MsY0FBYyxNQUFNLGtDQUFrQztBQUM3RCxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBQ3ZFLE9BQU9DLGFBQWEsTUFBTSwwQkFBMEI7QUFDcEQsT0FBT0MsMkJBQTJCLE1BQU0sdUNBQXVDO0FBQy9FLE9BQU9DLGtCQUFrQixNQUFNLDhCQUE4QjtBQUU3RCxlQUFlLE1BQU1DLGNBQWMsU0FBU1IsTUFBTSxDQUFvQztFQUU3RVMsV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBRW5DLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVSLHlCQUF5QixDQUFDUyxNQUFNLENBQUNDLHNCQUFzQjtNQUM3REMsdUJBQXVCLEVBQUVkLFNBQVMsQ0FBQ2UscUNBQXFDO01BQ3hFQyxjQUFjLEVBQUVmLGNBQWMsQ0FBQ2dCLDRCQUE0QixDQUFDLENBQUM7TUFDN0RDLHNCQUFzQixFQUFFQSxDQUFBLEtBQU0sSUFBSWIsMkJBQTJCLENBQUMsQ0FBQztNQUMvREksTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJTCxhQUFhLENBQUVNLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDVSxZQUFZLENBQUUsT0FBUSxDQUFFLENBQUMsRUFDakVDLEtBQUssSUFBSSxJQUFJZCxrQkFBa0IsQ0FBRWMsS0FBSyxFQUFFVixPQUFPLENBQUNELE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQy9FVCxPQUNGLENBQUM7RUFDSDtFQUVnQlcsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFuQixrQkFBa0IsQ0FBQ3FCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWhCLGNBQWUsQ0FBQyJ9