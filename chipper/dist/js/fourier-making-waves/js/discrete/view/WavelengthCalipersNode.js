// Copyright 2020-2023, University of Colorado Boulder

/**
 * WavelengthCalipersNode is the tool used to measure a harmonic's wavelength in the 'space' and 'space & time' Domains.
 * Origin is at the tip of the caliper's left jaw.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import ChartTransform from '../../../../bamboo/js/ChartTransform.js';
import merge from '../../../../phet-core/js/merge.js';
import Domain from '../../common/model/Domain.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import DiscreteModel from '../model/DiscreteModel.js';
import DiscreteCalipersNode from './DiscreteCalipersNode.js';
export default class WavelengthCalipersNode extends DiscreteCalipersNode {
  /**
   * @param {DiscreteModel} model
   * @param {ChartTransform} chartTransform - transform for the Harmonics chart
   * @param {Object} [options]
   */
  constructor(model, chartTransform, options) {
    assert && assert(model instanceof DiscreteModel);
    assert && assert(chartTransform instanceof ChartTransform);
    options = merge({
      // DiscreteCalipersNode options
      debugName: 'wavelengthCalipers'
    }, options);
    super(model.wavelengthTool, model.fourierSeries.harmonics, model.harmonicsChart.emphasizedHarmonics, chartTransform, model.domainProperty, [Domain.SPACE, Domain.SPACE_AND_TIME],
    // relevant Domains
    harmonic => harmonic.wavelength,
    // gets the quantity of Harmonic that is being measured
    options);
  }
}
fourierMakingWaves.register('WavelengthCalipersNode', WavelengthCalipersNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGFydFRyYW5zZm9ybSIsIm1lcmdlIiwiRG9tYWluIiwiZm91cmllck1ha2luZ1dhdmVzIiwiRGlzY3JldGVNb2RlbCIsIkRpc2NyZXRlQ2FsaXBlcnNOb2RlIiwiV2F2ZWxlbmd0aENhbGlwZXJzTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJjaGFydFRyYW5zZm9ybSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJkZWJ1Z05hbWUiLCJ3YXZlbGVuZ3RoVG9vbCIsImZvdXJpZXJTZXJpZXMiLCJoYXJtb25pY3MiLCJoYXJtb25pY3NDaGFydCIsImVtcGhhc2l6ZWRIYXJtb25pY3MiLCJkb21haW5Qcm9wZXJ0eSIsIlNQQUNFIiwiU1BBQ0VfQU5EX1RJTUUiLCJoYXJtb25pYyIsIndhdmVsZW5ndGgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldhdmVsZW5ndGhDYWxpcGVyc05vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV2F2ZWxlbmd0aENhbGlwZXJzTm9kZSBpcyB0aGUgdG9vbCB1c2VkIHRvIG1lYXN1cmUgYSBoYXJtb25pYydzIHdhdmVsZW5ndGggaW4gdGhlICdzcGFjZScgYW5kICdzcGFjZSAmIHRpbWUnIERvbWFpbnMuXHJcbiAqIE9yaWdpbiBpcyBhdCB0aGUgdGlwIG9mIHRoZSBjYWxpcGVyJ3MgbGVmdCBqYXcuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IENoYXJ0VHJhbnNmb3JtIGZyb20gJy4uLy4uLy4uLy4uL2JhbWJvby9qcy9DaGFydFRyYW5zZm9ybS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Eb21haW4uanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcbmltcG9ydCBEaXNjcmV0ZU1vZGVsIGZyb20gJy4uL21vZGVsL0Rpc2NyZXRlTW9kZWwuanMnO1xyXG5pbXBvcnQgRGlzY3JldGVDYWxpcGVyc05vZGUgZnJvbSAnLi9EaXNjcmV0ZUNhbGlwZXJzTm9kZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXZlbGVuZ3RoQ2FsaXBlcnNOb2RlIGV4dGVuZHMgRGlzY3JldGVDYWxpcGVyc05vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0Rpc2NyZXRlTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtDaGFydFRyYW5zZm9ybX0gY2hhcnRUcmFuc2Zvcm0gLSB0cmFuc2Zvcm0gZm9yIHRoZSBIYXJtb25pY3MgY2hhcnRcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBjaGFydFRyYW5zZm9ybSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtb2RlbCBpbnN0YW5jZW9mIERpc2NyZXRlTW9kZWwgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNoYXJ0VHJhbnNmb3JtIGluc3RhbmNlb2YgQ2hhcnRUcmFuc2Zvcm0gKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIC8vIERpc2NyZXRlQ2FsaXBlcnNOb2RlIG9wdGlvbnNcclxuICAgICAgZGVidWdOYW1lOiAnd2F2ZWxlbmd0aENhbGlwZXJzJ1xyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICBtb2RlbC53YXZlbGVuZ3RoVG9vbCxcclxuICAgICAgbW9kZWwuZm91cmllclNlcmllcy5oYXJtb25pY3MsXHJcbiAgICAgIG1vZGVsLmhhcm1vbmljc0NoYXJ0LmVtcGhhc2l6ZWRIYXJtb25pY3MsXHJcbiAgICAgIGNoYXJ0VHJhbnNmb3JtLFxyXG4gICAgICBtb2RlbC5kb21haW5Qcm9wZXJ0eSxcclxuICAgICAgWyBEb21haW4uU1BBQ0UsIERvbWFpbi5TUEFDRV9BTkRfVElNRSBdLCAvLyByZWxldmFudCBEb21haW5zXHJcbiAgICAgIGhhcm1vbmljID0+IGhhcm1vbmljLndhdmVsZW5ndGgsIC8vIGdldHMgdGhlIHF1YW50aXR5IG9mIEhhcm1vbmljIHRoYXQgaXMgYmVpbmcgbWVhc3VyZWRcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ1dhdmVsZW5ndGhDYWxpcGVyc05vZGUnLCBXYXZlbGVuZ3RoQ2FsaXBlcnNOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHlDQUF5QztBQUNwRSxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLGFBQWEsTUFBTSwyQkFBMkI7QUFDckQsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBRTVELGVBQWUsTUFBTUMsc0JBQXNCLFNBQVNELG9CQUFvQixDQUFDO0VBRXZFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sRUFBRztJQUU1Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVILEtBQUssWUFBWUosYUFBYyxDQUFDO0lBQ2xETyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsY0FBYyxZQUFZVCxjQUFlLENBQUM7SUFFNURVLE9BQU8sR0FBR1QsS0FBSyxDQUFFO01BRWY7TUFDQVcsU0FBUyxFQUFFO0lBQ2IsQ0FBQyxFQUFFRixPQUFRLENBQUM7SUFFWixLQUFLLENBQ0hGLEtBQUssQ0FBQ0ssY0FBYyxFQUNwQkwsS0FBSyxDQUFDTSxhQUFhLENBQUNDLFNBQVMsRUFDN0JQLEtBQUssQ0FBQ1EsY0FBYyxDQUFDQyxtQkFBbUIsRUFDeENSLGNBQWMsRUFDZEQsS0FBSyxDQUFDVSxjQUFjLEVBQ3BCLENBQUVoQixNQUFNLENBQUNpQixLQUFLLEVBQUVqQixNQUFNLENBQUNrQixjQUFjLENBQUU7SUFBRTtJQUN6Q0MsUUFBUSxJQUFJQSxRQUFRLENBQUNDLFVBQVU7SUFBRTtJQUNqQ1osT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCxrQkFBa0IsQ0FBQ29CLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRWpCLHNCQUF1QixDQUFDIn0=