// Copyright 2021-2023, University of Colorado Boulder

/**
 * PeriodCheckbox is the checkbox that is used to show the period tool.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import { Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import FMWConstants from '../../common/FMWConstants.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import FourierMakingWavesStrings from '../../FourierMakingWavesStrings.js';
export default class PeriodCheckbox extends Checkbox {
  /**
   * @param {Property.<boolean>} isSelectedProperty
   * @param {Object} [options]
   */
  constructor(isSelectedProperty, options) {
    assert && AssertUtils.assertPropertyOf(isSelectedProperty, 'boolean');
    options = merge({}, FMWConstants.CHECKBOX_OPTIONS, {
      tandem: Tandem.REQUIRED
    }, options);
    const periodText = new Text(FourierMakingWavesStrings.periodStringProperty, {
      font: FMWConstants.CONTROL_FONT,
      maxWidth: 80,
      // determined empirically
      tandem: options.tandem.createTandem('periodText')
    });
    super(isSelectedProperty, periodText, options);
  }
}
fourierMakingWaves.register('PeriodCheckbox', PeriodCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFzc2VydFV0aWxzIiwiVGV4dCIsIkNoZWNrYm94IiwiVGFuZGVtIiwiRk1XQ29uc3RhbnRzIiwiZm91cmllck1ha2luZ1dhdmVzIiwiRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncyIsIlBlcmlvZENoZWNrYm94IiwiY29uc3RydWN0b3IiLCJpc1NlbGVjdGVkUHJvcGVydHkiLCJvcHRpb25zIiwiYXNzZXJ0IiwiYXNzZXJ0UHJvcGVydHlPZiIsIkNIRUNLQk9YX09QVElPTlMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsInBlcmlvZFRleHQiLCJwZXJpb2RTdHJpbmdQcm9wZXJ0eSIsImZvbnQiLCJDT05UUk9MX0ZPTlQiLCJtYXhXaWR0aCIsImNyZWF0ZVRhbmRlbSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGVyaW9kQ2hlY2tib3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGVyaW9kQ2hlY2tib3ggaXMgdGhlIGNoZWNrYm94IHRoYXQgaXMgdXNlZCB0byBzaG93IHRoZSBwZXJpb2QgdG9vbC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IEFzc2VydFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvQXNzZXJ0VXRpbHMuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBGTVdDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0ZNV0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuaW1wb3J0IEZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MgZnJvbSAnLi4vLi4vRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJpb2RDaGVja2JveCBleHRlbmRzIENoZWNrYm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGlzU2VsZWN0ZWRQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaXNTZWxlY3RlZFByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBBc3NlcnRVdGlscy5hc3NlcnRQcm9wZXJ0eU9mKCBpc1NlbGVjdGVkUHJvcGVydHksICdib29sZWFuJyApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge30sIEZNV0NvbnN0YW50cy5DSEVDS0JPWF9PUFRJT05TLCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVEXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgcGVyaW9kVGV4dCA9IG5ldyBUZXh0KCBGb3VyaWVyTWFraW5nV2F2ZXNTdHJpbmdzLnBlcmlvZFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IEZNV0NvbnN0YW50cy5DT05UUk9MX0ZPTlQsXHJcbiAgICAgIG1heFdpZHRoOiA4MCwgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BlcmlvZFRleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggaXNTZWxlY3RlZFByb3BlcnR5LCBwZXJpb2RUZXh0LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdQZXJpb2RDaGVja2JveCcsIFBlcmlvZENoZWNrYm94ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLDBDQUEwQztBQUNsRSxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLFFBQVEsTUFBTSxnQ0FBZ0M7QUFDckQsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxZQUFZLE1BQU0sOEJBQThCO0FBQ3ZELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyx5QkFBeUIsTUFBTSxvQ0FBb0M7QUFFMUUsZUFBZSxNQUFNQyxjQUFjLFNBQVNMLFFBQVEsQ0FBQztFQUVuRDtBQUNGO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxrQkFBa0IsRUFBRUMsT0FBTyxFQUFHO0lBRXpDQyxNQUFNLElBQUlYLFdBQVcsQ0FBQ1ksZ0JBQWdCLENBQUVILGtCQUFrQixFQUFFLFNBQVUsQ0FBQztJQUV2RUMsT0FBTyxHQUFHWCxLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUVLLFlBQVksQ0FBQ1MsZ0JBQWdCLEVBQUU7TUFDbERDLE1BQU0sRUFBRVgsTUFBTSxDQUFDWTtJQUNqQixDQUFDLEVBQUVMLE9BQVEsQ0FBQztJQUVaLE1BQU1NLFVBQVUsR0FBRyxJQUFJZixJQUFJLENBQUVLLHlCQUF5QixDQUFDVyxvQkFBb0IsRUFBRTtNQUMzRUMsSUFBSSxFQUFFZCxZQUFZLENBQUNlLFlBQVk7TUFDL0JDLFFBQVEsRUFBRSxFQUFFO01BQUU7TUFDZE4sTUFBTSxFQUFFSixPQUFPLENBQUNJLE1BQU0sQ0FBQ08sWUFBWSxDQUFFLFlBQWE7SUFDcEQsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFWixrQkFBa0IsRUFBRU8sVUFBVSxFQUFFTixPQUFRLENBQUM7RUFDbEQ7QUFDRjtBQUVBTCxrQkFBa0IsQ0FBQ2lCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWYsY0FBZSxDQUFDIn0=