// Copyright 2020-2023, University of Colorado Boulder

/**
 * HarmonicPlot is a specialization of CanvasLinePlot that keeps the plot synchronized with a Harmonic.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Emitter from '../../../../axon/js/Emitter.js';
import CanvasLinePlot from '../../../../bamboo/js/CanvasLinePlot.js';
import ChartTransform from '../../../../bamboo/js/ChartTransform.js';
import merge from '../../../../phet-core/js/merge.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import Harmonic from '../../common/model/Harmonic.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class HarmonicPlot extends CanvasLinePlot {
  /**
   * @param {ChartTransform} chartTransform
   * @param {Harmonic} harmonic
   * @param {ReadOnlyProperty.<Vector2[]>} dataSetProperty
   * @param {Object} [options]
   */
  constructor(chartTransform, harmonic, dataSetProperty, options) {
    assert && assert(chartTransform instanceof ChartTransform);
    assert && assert(harmonic instanceof Harmonic);
    assert && AssertUtils.assertAbstractPropertyOf(dataSetProperty, Array);
    options = merge({}, options);
    assert && assert(!options.stroke, 'HarmonicPlot sets stroke');
    options.stroke = harmonic.colorProperty.value; // CanvasLinePlot does not support Property.<Color>

    super(chartTransform, dataSetProperty.value, options);

    // @public (read-only)
    this.harmonic = harmonic;

    // @public (read-only) fires when the plot needs to be redrawn
    this.changedEmitter = new Emitter();

    // Keep synchronized with the data set.
    dataSetProperty.lazyLink(dataSet => {
      this.setDataSet(dataSet);
      this.changedEmitter.emit();
    });

    // CanvasLinePlot does not support Property.<Color> for its stroke option.
    // So it's the client's responsibility to keep the plot in sync with the colorProfileProperty.
    harmonic.colorProperty.lazyLink(color => {
      this.setStroke(color);
      this.changedEmitter.emit();
    });

    // Hide the plot when its amplitude is zero.
    harmonic.amplitudeProperty.link(amplitude => {
      this.visible = amplitude !== 0;
      this.changedEmitter.emit();
    });
  }
}
fourierMakingWaves.register('HarmonicPlot', HarmonicPlot);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiQ2FudmFzTGluZVBsb3QiLCJDaGFydFRyYW5zZm9ybSIsIm1lcmdlIiwiQXNzZXJ0VXRpbHMiLCJIYXJtb25pYyIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkhhcm1vbmljUGxvdCIsImNvbnN0cnVjdG9yIiwiY2hhcnRUcmFuc2Zvcm0iLCJoYXJtb25pYyIsImRhdGFTZXRQcm9wZXJ0eSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJhc3NlcnRBYnN0cmFjdFByb3BlcnR5T2YiLCJBcnJheSIsInN0cm9rZSIsImNvbG9yUHJvcGVydHkiLCJ2YWx1ZSIsImNoYW5nZWRFbWl0dGVyIiwibGF6eUxpbmsiLCJkYXRhU2V0Iiwic2V0RGF0YVNldCIsImVtaXQiLCJjb2xvciIsInNldFN0cm9rZSIsImFtcGxpdHVkZVByb3BlcnR5IiwibGluayIsImFtcGxpdHVkZSIsInZpc2libGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkhhcm1vbmljUGxvdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBIYXJtb25pY1Bsb3QgaXMgYSBzcGVjaWFsaXphdGlvbiBvZiBDYW52YXNMaW5lUGxvdCB0aGF0IGtlZXBzIHRoZSBwbG90IHN5bmNocm9uaXplZCB3aXRoIGEgSGFybW9uaWMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbWl0dGVyLmpzJztcclxuaW1wb3J0IENhbnZhc0xpbmVQbG90IGZyb20gJy4uLy4uLy4uLy4uL2JhbWJvby9qcy9DYW52YXNMaW5lUGxvdC5qcyc7XHJcbmltcG9ydCBDaGFydFRyYW5zZm9ybSBmcm9tICcuLi8uLi8uLi8uLi9iYW1ib28vanMvQ2hhcnRUcmFuc2Zvcm0uanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IEFzc2VydFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvQXNzZXJ0VXRpbHMuanMnO1xyXG5pbXBvcnQgSGFybW9uaWMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0hhcm1vbmljLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGFybW9uaWNQbG90IGV4dGVuZHMgQ2FudmFzTGluZVBsb3Qge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0NoYXJ0VHJhbnNmb3JtfSBjaGFydFRyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSB7SGFybW9uaWN9IGhhcm1vbmljXHJcbiAgICogQHBhcmFtIHtSZWFkT25seVByb3BlcnR5LjxWZWN0b3IyW10+fSBkYXRhU2V0UHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNoYXJ0VHJhbnNmb3JtLCBoYXJtb25pYywgZGF0YVNldFByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNoYXJ0VHJhbnNmb3JtIGluc3RhbmNlb2YgQ2hhcnRUcmFuc2Zvcm0gKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGhhcm1vbmljIGluc3RhbmNlb2YgSGFybW9uaWMgKTtcclxuICAgIGFzc2VydCAmJiBBc3NlcnRVdGlscy5hc3NlcnRBYnN0cmFjdFByb3BlcnR5T2YoIGRhdGFTZXRQcm9wZXJ0eSwgQXJyYXkgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCBvcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuc3Ryb2tlLCAnSGFybW9uaWNQbG90IHNldHMgc3Ryb2tlJyApO1xyXG4gICAgb3B0aW9ucy5zdHJva2UgPSBoYXJtb25pYy5jb2xvclByb3BlcnR5LnZhbHVlOyAvLyBDYW52YXNMaW5lUGxvdCBkb2VzIG5vdCBzdXBwb3J0IFByb3BlcnR5LjxDb2xvcj5cclxuXHJcbiAgICBzdXBlciggY2hhcnRUcmFuc2Zvcm0sIGRhdGFTZXRQcm9wZXJ0eS52YWx1ZSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSlcclxuICAgIHRoaXMuaGFybW9uaWMgPSBoYXJtb25pYztcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIGZpcmVzIHdoZW4gdGhlIHBsb3QgbmVlZHMgdG8gYmUgcmVkcmF3blxyXG4gICAgdGhpcy5jaGFuZ2VkRW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XHJcblxyXG4gICAgLy8gS2VlcCBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgZGF0YSBzZXQuXHJcbiAgICBkYXRhU2V0UHJvcGVydHkubGF6eUxpbmsoIGRhdGFTZXQgPT4ge1xyXG4gICAgICB0aGlzLnNldERhdGFTZXQoIGRhdGFTZXQgKTtcclxuICAgICAgdGhpcy5jaGFuZ2VkRW1pdHRlci5lbWl0KCk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQ2FudmFzTGluZVBsb3QgZG9lcyBub3Qgc3VwcG9ydCBQcm9wZXJ0eS48Q29sb3I+IGZvciBpdHMgc3Ryb2tlIG9wdGlvbi5cclxuICAgIC8vIFNvIGl0J3MgdGhlIGNsaWVudCdzIHJlc3BvbnNpYmlsaXR5IHRvIGtlZXAgdGhlIHBsb3QgaW4gc3luYyB3aXRoIHRoZSBjb2xvclByb2ZpbGVQcm9wZXJ0eS5cclxuICAgIGhhcm1vbmljLmNvbG9yUHJvcGVydHkubGF6eUxpbmsoIGNvbG9yID0+IHtcclxuICAgICAgdGhpcy5zZXRTdHJva2UoIGNvbG9yICk7XHJcbiAgICAgIHRoaXMuY2hhbmdlZEVtaXR0ZXIuZW1pdCgpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEhpZGUgdGhlIHBsb3Qgd2hlbiBpdHMgYW1wbGl0dWRlIGlzIHplcm8uXHJcbiAgICBoYXJtb25pYy5hbXBsaXR1ZGVQcm9wZXJ0eS5saW5rKCBhbXBsaXR1ZGUgPT4ge1xyXG4gICAgICB0aGlzLnZpc2libGUgPSAoIGFtcGxpdHVkZSAhPT0gMCApO1xyXG4gICAgICB0aGlzLmNoYW5nZWRFbWl0dGVyLmVtaXQoKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ0hhcm1vbmljUGxvdCcsIEhhcm1vbmljUGxvdCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sZ0NBQWdDO0FBQ3BELE9BQU9DLGNBQWMsTUFBTSx5Q0FBeUM7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLHlDQUF5QztBQUNwRSxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSwwQ0FBMEM7QUFDbEUsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUNyRCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFFNUQsZUFBZSxNQUFNQyxZQUFZLFNBQVNOLGNBQWMsQ0FBQztFQUV2RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsY0FBYyxFQUFFQyxRQUFRLEVBQUVDLGVBQWUsRUFBRUMsT0FBTyxFQUFHO0lBRWhFQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUosY0FBYyxZQUFZUCxjQUFlLENBQUM7SUFDNURXLE1BQU0sSUFBSUEsTUFBTSxDQUFFSCxRQUFRLFlBQVlMLFFBQVMsQ0FBQztJQUNoRFEsTUFBTSxJQUFJVCxXQUFXLENBQUNVLHdCQUF3QixDQUFFSCxlQUFlLEVBQUVJLEtBQU0sQ0FBQztJQUV4RUgsT0FBTyxHQUFHVCxLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUVTLE9BQVEsQ0FBQztJQUU5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0QsT0FBTyxDQUFDSSxNQUFNLEVBQUUsMEJBQTJCLENBQUM7SUFDL0RKLE9BQU8sQ0FBQ0ksTUFBTSxHQUFHTixRQUFRLENBQUNPLGFBQWEsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7O0lBRS9DLEtBQUssQ0FBRVQsY0FBYyxFQUFFRSxlQUFlLENBQUNPLEtBQUssRUFBRU4sT0FBUSxDQUFDOztJQUV2RDtJQUNBLElBQUksQ0FBQ0YsUUFBUSxHQUFHQSxRQUFROztJQUV4QjtJQUNBLElBQUksQ0FBQ1MsY0FBYyxHQUFHLElBQUluQixPQUFPLENBQUMsQ0FBQzs7SUFFbkM7SUFDQVcsZUFBZSxDQUFDUyxRQUFRLENBQUVDLE9BQU8sSUFBSTtNQUNuQyxJQUFJLENBQUNDLFVBQVUsQ0FBRUQsT0FBUSxDQUFDO01BQzFCLElBQUksQ0FBQ0YsY0FBYyxDQUFDSSxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFFLENBQUM7O0lBRUg7SUFDQTtJQUNBYixRQUFRLENBQUNPLGFBQWEsQ0FBQ0csUUFBUSxDQUFFSSxLQUFLLElBQUk7TUFDeEMsSUFBSSxDQUFDQyxTQUFTLENBQUVELEtBQU0sQ0FBQztNQUN2QixJQUFJLENBQUNMLGNBQWMsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBRSxDQUFDOztJQUVIO0lBQ0FiLFFBQVEsQ0FBQ2dCLGlCQUFpQixDQUFDQyxJQUFJLENBQUVDLFNBQVMsSUFBSTtNQUM1QyxJQUFJLENBQUNDLE9BQU8sR0FBS0QsU0FBUyxLQUFLLENBQUc7TUFDbEMsSUFBSSxDQUFDVCxjQUFjLENBQUNJLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWpCLGtCQUFrQixDQUFDd0IsUUFBUSxDQUFFLGNBQWMsRUFBRXZCLFlBQWEsQ0FBQyJ9