// Copyright 2021-2023, University of Colorado Boulder

/**
 * InfiniteHarmonicsPlot shows what some of the preset waveforms would look like if they were approximated with
 * an infinite number of harmonics. This is supported for a subset of the Waveform enumeration.  It is specific
 * to the 'Discrete' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Emitter from '../../../../axon/js/Emitter.js';
import CanvasLinePlot from '../../../../bamboo/js/CanvasLinePlot.js';
import merge from '../../../../phet-core/js/merge.js';
import FMWColors from '../../common/FMWColors.js';
import FMWConstants from '../../common/FMWConstants.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class InfiniteHarmonicsPlot extends CanvasLinePlot {
  /**
   * @param {ChartTransform} chartTransform
   * @param {Property.<Vector2[]>} dataSetProperty
   * @param {Property.<boolean>} visibleProperty
   * @param {Object} [options]
   */
  constructor(chartTransform, dataSetProperty, visibleProperty, options) {
    options = merge({
      // CanvasLinePlot options
      lineWidth: FMWConstants.SECONDARY_WAVEFORM_LINE_WIDTH
    }, options);
    super(chartTransform, dataSetProperty.value, options);

    // @public (read-only) fires when the plot needs to be redrawn
    this.changedEmitter = new Emitter();

    // Keep synchronized with the data set.
    dataSetProperty.lazyLink(dataSet => {
      this.setDataSet(dataSet);
      this.changedEmitter.emit();
    });
    visibleProperty.link(visible => {
      this.visible = visible;
      this.changedEmitter.emit();
    });

    // CanvasLinePlot does not support Property.<Color> for its stroke option.
    // So it's the client's responsibility to keep the plot in sync with the colorProfileProperty.
    FMWColors.secondaryWaveformStrokeProperty.link(color => {
      this.setStroke(color);
      this.changedEmitter.emit();
    });
  }
}
fourierMakingWaves.register('InfiniteHarmonicsPlot', InfiniteHarmonicsPlot);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiQ2FudmFzTGluZVBsb3QiLCJtZXJnZSIsIkZNV0NvbG9ycyIsIkZNV0NvbnN0YW50cyIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkluZmluaXRlSGFybW9uaWNzUGxvdCIsImNvbnN0cnVjdG9yIiwiY2hhcnRUcmFuc2Zvcm0iLCJkYXRhU2V0UHJvcGVydHkiLCJ2aXNpYmxlUHJvcGVydHkiLCJvcHRpb25zIiwibGluZVdpZHRoIiwiU0VDT05EQVJZX1dBVkVGT1JNX0xJTkVfV0lEVEgiLCJ2YWx1ZSIsImNoYW5nZWRFbWl0dGVyIiwibGF6eUxpbmsiLCJkYXRhU2V0Iiwic2V0RGF0YVNldCIsImVtaXQiLCJsaW5rIiwidmlzaWJsZSIsInNlY29uZGFyeVdhdmVmb3JtU3Ryb2tlUHJvcGVydHkiLCJjb2xvciIsInNldFN0cm9rZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSW5maW5pdGVIYXJtb25pY3NQbG90LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEluZmluaXRlSGFybW9uaWNzUGxvdCBzaG93cyB3aGF0IHNvbWUgb2YgdGhlIHByZXNldCB3YXZlZm9ybXMgd291bGQgbG9vayBsaWtlIGlmIHRoZXkgd2VyZSBhcHByb3hpbWF0ZWQgd2l0aFxyXG4gKiBhbiBpbmZpbml0ZSBudW1iZXIgb2YgaGFybW9uaWNzLiBUaGlzIGlzIHN1cHBvcnRlZCBmb3IgYSBzdWJzZXQgb2YgdGhlIFdhdmVmb3JtIGVudW1lcmF0aW9uLiAgSXQgaXMgc3BlY2lmaWNcclxuICogdG8gdGhlICdEaXNjcmV0ZScgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW1pdHRlci5qcyc7XHJcbmltcG9ydCBDYW52YXNMaW5lUGxvdCBmcm9tICcuLi8uLi8uLi8uLi9iYW1ib28vanMvQ2FudmFzTGluZVBsb3QuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IEZNV0NvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vRk1XQ29sb3JzLmpzJztcclxuaW1wb3J0IEZNV0NvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vRk1XQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5maW5pdGVIYXJtb25pY3NQbG90IGV4dGVuZHMgQ2FudmFzTGluZVBsb3Qge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0NoYXJ0VHJhbnNmb3JtfSBjaGFydFRyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPFZlY3RvcjJbXT59IGRhdGFTZXRQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSB2aXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNoYXJ0VHJhbnNmb3JtLCBkYXRhU2V0UHJvcGVydHksIHZpc2libGVQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIC8vIENhbnZhc0xpbmVQbG90IG9wdGlvbnNcclxuICAgICAgbGluZVdpZHRoOiBGTVdDb25zdGFudHMuU0VDT05EQVJZX1dBVkVGT1JNX0xJTkVfV0lEVEhcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggY2hhcnRUcmFuc2Zvcm0sIGRhdGFTZXRQcm9wZXJ0eS52YWx1ZSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgZmlyZXMgd2hlbiB0aGUgcGxvdCBuZWVkcyB0byBiZSByZWRyYXduXHJcbiAgICB0aGlzLmNoYW5nZWRFbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcclxuXHJcbiAgICAvLyBLZWVwIHN5bmNocm9uaXplZCB3aXRoIHRoZSBkYXRhIHNldC5cclxuICAgIGRhdGFTZXRQcm9wZXJ0eS5sYXp5TGluayggZGF0YVNldCA9PiB7XHJcbiAgICAgIHRoaXMuc2V0RGF0YVNldCggZGF0YVNldCApO1xyXG4gICAgICB0aGlzLmNoYW5nZWRFbWl0dGVyLmVtaXQoKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB2aXNpYmxlUHJvcGVydHkubGluayggdmlzaWJsZSA9PiB7XHJcbiAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICAgIHRoaXMuY2hhbmdlZEVtaXR0ZXIuZW1pdCgpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENhbnZhc0xpbmVQbG90IGRvZXMgbm90IHN1cHBvcnQgUHJvcGVydHkuPENvbG9yPiBmb3IgaXRzIHN0cm9rZSBvcHRpb24uXHJcbiAgICAvLyBTbyBpdCdzIHRoZSBjbGllbnQncyByZXNwb25zaWJpbGl0eSB0byBrZWVwIHRoZSBwbG90IGluIHN5bmMgd2l0aCB0aGUgY29sb3JQcm9maWxlUHJvcGVydHkuXHJcbiAgICBGTVdDb2xvcnMuc2Vjb25kYXJ5V2F2ZWZvcm1TdHJva2VQcm9wZXJ0eS5saW5rKCBjb2xvciA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3Ryb2tlKCBjb2xvciApO1xyXG4gICAgICB0aGlzLmNoYW5nZWRFbWl0dGVyLmVtaXQoKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ0luZmluaXRlSGFybW9uaWNzUGxvdCcsIEluZmluaXRlSGFybW9uaWNzUGxvdCApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxnQ0FBZ0M7QUFDcEQsT0FBT0MsY0FBYyxNQUFNLHlDQUF5QztBQUNwRSxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFNBQVMsTUFBTSwyQkFBMkI7QUFDakQsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQUN2RCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFFNUQsZUFBZSxNQUFNQyxxQkFBcUIsU0FBU0wsY0FBYyxDQUFDO0VBRWhFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxjQUFjLEVBQUVDLGVBQWUsRUFBRUMsZUFBZSxFQUFFQyxPQUFPLEVBQUc7SUFFdkVBLE9BQU8sR0FBR1QsS0FBSyxDQUFFO01BRWY7TUFDQVUsU0FBUyxFQUFFUixZQUFZLENBQUNTO0lBQzFCLENBQUMsRUFBRUYsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFSCxjQUFjLEVBQUVDLGVBQWUsQ0FBQ0ssS0FBSyxFQUFFSCxPQUFRLENBQUM7O0lBRXZEO0lBQ0EsSUFBSSxDQUFDSSxjQUFjLEdBQUcsSUFBSWYsT0FBTyxDQUFDLENBQUM7O0lBRW5DO0lBQ0FTLGVBQWUsQ0FBQ08sUUFBUSxDQUFFQyxPQUFPLElBQUk7TUFDbkMsSUFBSSxDQUFDQyxVQUFVLENBQUVELE9BQVEsQ0FBQztNQUMxQixJQUFJLENBQUNGLGNBQWMsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBRSxDQUFDO0lBRUhULGVBQWUsQ0FBQ1UsSUFBSSxDQUFFQyxPQUFPLElBQUk7TUFDL0IsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLE9BQU87TUFDdEIsSUFBSSxDQUFDTixjQUFjLENBQUNJLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUUsQ0FBQzs7SUFFSDtJQUNBO0lBQ0FoQixTQUFTLENBQUNtQiwrQkFBK0IsQ0FBQ0YsSUFBSSxDQUFFRyxLQUFLLElBQUk7TUFDdkQsSUFBSSxDQUFDQyxTQUFTLENBQUVELEtBQU0sQ0FBQztNQUN2QixJQUFJLENBQUNSLGNBQWMsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBZCxrQkFBa0IsQ0FBQ29CLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRW5CLHFCQUFzQixDQUFDIn0=