// Copyright 2020-2023, University of Colorado Boulder

/**
 * OrderSpinner is a spinner for selecting harmonic order.
 * It's used to select wavelength and period for the measurement tools on the 'Discrete' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import NumberSpinner from '../../../../sun/js/NumberSpinner.js';
import FMWConstants from '../../common/FMWConstants.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class OrderSpinner extends NumberSpinner {
  /**
   * @param {TReadOnlyProperty.<string>} symbolStringProperty - order is displayed as the subscript of this symbol
   * @param {NumberProperty} orderProperty - the order of the associated harmonic
   * @param {Object} [options]
   */
  constructor(symbolStringProperty, orderProperty, options) {
    assert && assert(orderProperty instanceof NumberProperty);
    options = merge({
      // NumberSpinner options
      arrowsPosition: 'leftRight',
      touchAreaXDilation: 10,
      touchAreaYDilation: 10,
      numberDisplayOptions: {
        useRichText: true,
        align: 'center',
        cornerRadius: 3,
        xMargin: 8,
        yMargin: 2,
        textOptions: {
          font: FMWConstants.MATH_CONTROL_FONT,
          maxWidth: 50 // determined empirically
        }
      }
    }, options);
    super(orderProperty, orderProperty.rangeProperty, options);
    symbolStringProperty.link(symbol => this.setNumberFormatter(order => `${symbol}<sub>${order}</sub>`));
  }
}
fourierMakingWaves.register('OrderSpinner', OrderSpinner);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIm1lcmdlIiwiTnVtYmVyU3Bpbm5lciIsIkZNV0NvbnN0YW50cyIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIk9yZGVyU3Bpbm5lciIsImNvbnN0cnVjdG9yIiwic3ltYm9sU3RyaW5nUHJvcGVydHkiLCJvcmRlclByb3BlcnR5Iiwib3B0aW9ucyIsImFzc2VydCIsImFycm93c1Bvc2l0aW9uIiwidG91Y2hBcmVhWERpbGF0aW9uIiwidG91Y2hBcmVhWURpbGF0aW9uIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJ1c2VSaWNoVGV4dCIsImFsaWduIiwiY29ybmVyUmFkaXVzIiwieE1hcmdpbiIsInlNYXJnaW4iLCJ0ZXh0T3B0aW9ucyIsImZvbnQiLCJNQVRIX0NPTlRST0xfRk9OVCIsIm1heFdpZHRoIiwicmFuZ2VQcm9wZXJ0eSIsImxpbmsiLCJzeW1ib2wiLCJzZXROdW1iZXJGb3JtYXR0ZXIiLCJvcmRlciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiT3JkZXJTcGlubmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE9yZGVyU3Bpbm5lciBpcyBhIHNwaW5uZXIgZm9yIHNlbGVjdGluZyBoYXJtb25pYyBvcmRlci5cclxuICogSXQncyB1c2VkIHRvIHNlbGVjdCB3YXZlbGVuZ3RoIGFuZCBwZXJpb2QgZm9yIHRoZSBtZWFzdXJlbWVudCB0b29scyBvbiB0aGUgJ0Rpc2NyZXRlJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IE51bWJlclNwaW5uZXIgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL051bWJlclNwaW5uZXIuanMnO1xyXG5pbXBvcnQgRk1XQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcmRlclNwaW5uZXIgZXh0ZW5kcyBOdW1iZXJTcGlubmVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUUmVhZE9ubHlQcm9wZXJ0eS48c3RyaW5nPn0gc3ltYm9sU3RyaW5nUHJvcGVydHkgLSBvcmRlciBpcyBkaXNwbGF5ZWQgYXMgdGhlIHN1YnNjcmlwdCBvZiB0aGlzIHN5bWJvbFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyUHJvcGVydHl9IG9yZGVyUHJvcGVydHkgLSB0aGUgb3JkZXIgb2YgdGhlIGFzc29jaWF0ZWQgaGFybW9uaWNcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHN5bWJvbFN0cmluZ1Byb3BlcnR5LCBvcmRlclByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9yZGVyUHJvcGVydHkgaW5zdGFuY2VvZiBOdW1iZXJQcm9wZXJ0eSApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8gTnVtYmVyU3Bpbm5lciBvcHRpb25zXHJcbiAgICAgIGFycm93c1Bvc2l0aW9uOiAnbGVmdFJpZ2h0JyxcclxuICAgICAgdG91Y2hBcmVhWERpbGF0aW9uOiAxMCxcclxuICAgICAgdG91Y2hBcmVhWURpbGF0aW9uOiAxMCxcclxuICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgICB1c2VSaWNoVGV4dDogdHJ1ZSxcclxuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgY29ybmVyUmFkaXVzOiAzLFxyXG4gICAgICAgIHhNYXJnaW46IDgsXHJcbiAgICAgICAgeU1hcmdpbjogMixcclxuICAgICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgICAgZm9udDogRk1XQ29uc3RhbnRzLk1BVEhfQ09OVFJPTF9GT05ULFxyXG4gICAgICAgICAgbWF4V2lkdGg6IDUwIC8vIGRldGVybWluZWQgZW1waXJpY2FsbHlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3JkZXJQcm9wZXJ0eSwgb3JkZXJQcm9wZXJ0eS5yYW5nZVByb3BlcnR5LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3ltYm9sU3RyaW5nUHJvcGVydHkubGluayggc3ltYm9sID0+IHRoaXMuc2V0TnVtYmVyRm9ybWF0dGVyKCBvcmRlciA9PiBgJHtzeW1ib2x9PHN1Yj4ke29yZGVyfTwvc3ViPmAgKSApO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnT3JkZXJTcGlubmVyJywgT3JkZXJTcGlubmVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHVDQUF1QztBQUNsRSxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLGFBQWEsTUFBTSxxQ0FBcUM7QUFDL0QsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQUN2RCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFFNUQsZUFBZSxNQUFNQyxZQUFZLFNBQVNILGFBQWEsQ0FBQztFQUV0RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLG9CQUFvQixFQUFFQyxhQUFhLEVBQUVDLE9BQU8sRUFBRztJQUUxREMsTUFBTSxJQUFJQSxNQUFNLENBQUVGLGFBQWEsWUFBWVIsY0FBZSxDQUFDO0lBRTNEUyxPQUFPLEdBQUdSLEtBQUssQ0FBRTtNQUVmO01BQ0FVLGNBQWMsRUFBRSxXQUFXO01BQzNCQyxrQkFBa0IsRUFBRSxFQUFFO01BQ3RCQyxrQkFBa0IsRUFBRSxFQUFFO01BQ3RCQyxvQkFBb0IsRUFBRTtRQUNwQkMsV0FBVyxFQUFFLElBQUk7UUFDakJDLEtBQUssRUFBRSxRQUFRO1FBQ2ZDLFlBQVksRUFBRSxDQUFDO1FBQ2ZDLE9BQU8sRUFBRSxDQUFDO1FBQ1ZDLE9BQU8sRUFBRSxDQUFDO1FBQ1ZDLFdBQVcsRUFBRTtVQUNYQyxJQUFJLEVBQUVsQixZQUFZLENBQUNtQixpQkFBaUI7VUFDcENDLFFBQVEsRUFBRSxFQUFFLENBQUM7UUFDZjtNQUNGO0lBQ0YsQ0FBQyxFQUFFZCxPQUFRLENBQUM7SUFFWixLQUFLLENBQUVELGFBQWEsRUFBRUEsYUFBYSxDQUFDZ0IsYUFBYSxFQUFFZixPQUFRLENBQUM7SUFFNURGLG9CQUFvQixDQUFDa0IsSUFBSSxDQUFFQyxNQUFNLElBQUksSUFBSSxDQUFDQyxrQkFBa0IsQ0FBRUMsS0FBSyxJQUFLLEdBQUVGLE1BQU8sUUFBT0UsS0FBTSxRQUFRLENBQUUsQ0FBQztFQUMzRztBQUNGO0FBRUF4QixrQkFBa0IsQ0FBQ3lCLFFBQVEsQ0FBRSxjQUFjLEVBQUV4QixZQUFhLENBQUMifQ==