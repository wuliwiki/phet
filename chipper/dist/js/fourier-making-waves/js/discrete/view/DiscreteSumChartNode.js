// Copyright 2021-2023, University of Colorado Boulder

/**
 * DiscreteSumChartNode displays the 'Sum' chart in the 'Discrete' screen. It extends SumChartNode by handling the
 * view responsibilities for things that were added to DiscreteSumChart.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import merge from '../../../../phet-core/js/merge.js';
import SumChartNode from '../../common/view/SumChartNode.js';
import TickLabelUtils from '../../common/view/TickLabelUtils.js';
import ZoomLevelProperty from '../../common/view/ZoomLevelProperty.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import DiscreteSumChart from '../model/DiscreteSumChart.js';
import InfiniteHarmonicsPlot from './InfiniteHarmonicsPlot.js';

// constants
const X_TICK_LABEL_DECIMALS = 2;
const Y_TICK_LABEL_DECIMALS = 1;
export default class DiscreteSumChartNode extends SumChartNode {
  /**
   * @param {DiscreteSumChart} sumChart
   * @param {Object} [options]
   */
  constructor(sumChart, options) {
    assert && assert(sumChart instanceof DiscreteSumChart);
    assert && assert(options && options.tandem);
    options = merge({
      // DomainChartNode options
      xZoomLevelProperty: new ZoomLevelProperty(sumChart.xAxisDescriptionProperty, options.tandem.createTandem('xZoomLevelProperty')),
      xTickLabelSetOptions: {
        createLabel: value => TickLabelUtils.createTickLabelForDomain(value, X_TICK_LABEL_DECIMALS, sumChart.xAxisTickLabelFormatProperty.value, sumChart.domainProperty.value, sumChart.fourierSeries.L, sumChart.fourierSeries.T)
      },
      yTickLabelSetOptions: {
        createLabel: value => TickLabelUtils.createNumericTickLabel(value, Y_TICK_LABEL_DECIMALS)
      }
    }, options);
    super(sumChart, options);

    // Fields of interest in sumChart, to improve readability
    const infiniteHarmonicsVisibleProperty = sumChart.infiniteHarmonicsVisibleProperty;

    // Plot for the 'Infinite Harmonics' feature
    const infiniteHarmonicsPlot = new InfiniteHarmonicsPlot(this.chartTransform, sumChart.infiniteHarmonicsDataSetProperty, infiniteHarmonicsVisibleProperty);

    // When anything about the plot changes, update the associated ChartCanvasNode.
    infiniteHarmonicsPlot.changedEmitter.addListener(() => this.chartCanvasNode.update());

    // Put the infiniteHarmonicsPlot behind plots that were added by the superclass.
    this.chartCanvasNode.setPainters([infiniteHarmonicsPlot, ...this.chartCanvasNode.painters]);

    // Interrupt interaction when visibility changes.
    this.visibleProperty.link(() => this.interruptSubtreeInput());

    // x-axis tick labels are specific to Domain and format (numeric vs symbolic).
    // This causes options.xTickLabelSetOptions.createLabels to be called.
    Multilink.multilink([sumChart.domainProperty, sumChart.xAxisTickLabelFormatProperty], () => this.xTickLabels.invalidateTickLabelSet());
  }
}
fourierMakingWaves.register('DiscreteSumChartNode', DiscreteSumChartNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJtZXJnZSIsIlN1bUNoYXJ0Tm9kZSIsIlRpY2tMYWJlbFV0aWxzIiwiWm9vbUxldmVsUHJvcGVydHkiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJEaXNjcmV0ZVN1bUNoYXJ0IiwiSW5maW5pdGVIYXJtb25pY3NQbG90IiwiWF9USUNLX0xBQkVMX0RFQ0lNQUxTIiwiWV9USUNLX0xBQkVMX0RFQ0lNQUxTIiwiRGlzY3JldGVTdW1DaGFydE5vZGUiLCJjb25zdHJ1Y3RvciIsInN1bUNoYXJ0Iiwib3B0aW9ucyIsImFzc2VydCIsInRhbmRlbSIsInhab29tTGV2ZWxQcm9wZXJ0eSIsInhBeGlzRGVzY3JpcHRpb25Qcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInhUaWNrTGFiZWxTZXRPcHRpb25zIiwiY3JlYXRlTGFiZWwiLCJ2YWx1ZSIsImNyZWF0ZVRpY2tMYWJlbEZvckRvbWFpbiIsInhBeGlzVGlja0xhYmVsRm9ybWF0UHJvcGVydHkiLCJkb21haW5Qcm9wZXJ0eSIsImZvdXJpZXJTZXJpZXMiLCJMIiwiVCIsInlUaWNrTGFiZWxTZXRPcHRpb25zIiwiY3JlYXRlTnVtZXJpY1RpY2tMYWJlbCIsImluZmluaXRlSGFybW9uaWNzVmlzaWJsZVByb3BlcnR5IiwiaW5maW5pdGVIYXJtb25pY3NQbG90IiwiY2hhcnRUcmFuc2Zvcm0iLCJpbmZpbml0ZUhhcm1vbmljc0RhdGFTZXRQcm9wZXJ0eSIsImNoYW5nZWRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJjaGFydENhbnZhc05vZGUiLCJ1cGRhdGUiLCJzZXRQYWludGVycyIsInBhaW50ZXJzIiwidmlzaWJsZVByb3BlcnR5IiwibGluayIsImludGVycnVwdFN1YnRyZWVJbnB1dCIsIm11bHRpbGluayIsInhUaWNrTGFiZWxzIiwiaW52YWxpZGF0ZVRpY2tMYWJlbFNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGlzY3JldGVTdW1DaGFydE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlzY3JldGVTdW1DaGFydE5vZGUgZGlzcGxheXMgdGhlICdTdW0nIGNoYXJ0IGluIHRoZSAnRGlzY3JldGUnIHNjcmVlbi4gSXQgZXh0ZW5kcyBTdW1DaGFydE5vZGUgYnkgaGFuZGxpbmcgdGhlXHJcbiAqIHZpZXcgcmVzcG9uc2liaWxpdGllcyBmb3IgdGhpbmdzIHRoYXQgd2VyZSBhZGRlZCB0byBEaXNjcmV0ZVN1bUNoYXJ0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFN1bUNoYXJ0Tm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9TdW1DaGFydE5vZGUuanMnO1xyXG5pbXBvcnQgVGlja0xhYmVsVXRpbHMgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVGlja0xhYmVsVXRpbHMuanMnO1xyXG5pbXBvcnQgWm9vbUxldmVsUHJvcGVydHkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvWm9vbUxldmVsUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcbmltcG9ydCBEaXNjcmV0ZVN1bUNoYXJ0IGZyb20gJy4uL21vZGVsL0Rpc2NyZXRlU3VtQ2hhcnQuanMnO1xyXG5pbXBvcnQgSW5maW5pdGVIYXJtb25pY3NQbG90IGZyb20gJy4vSW5maW5pdGVIYXJtb25pY3NQbG90LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBYX1RJQ0tfTEFCRUxfREVDSU1BTFMgPSAyO1xyXG5jb25zdCBZX1RJQ0tfTEFCRUxfREVDSU1BTFMgPSAxO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlzY3JldGVTdW1DaGFydE5vZGUgZXh0ZW5kcyBTdW1DaGFydE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0Rpc2NyZXRlU3VtQ2hhcnR9IHN1bUNoYXJ0XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBzdW1DaGFydCwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzdW1DaGFydCBpbnN0YW5jZW9mIERpc2NyZXRlU3VtQ2hhcnQgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMgJiYgb3B0aW9ucy50YW5kZW0gKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIC8vIERvbWFpbkNoYXJ0Tm9kZSBvcHRpb25zXHJcbiAgICAgIHhab29tTGV2ZWxQcm9wZXJ0eTogbmV3IFpvb21MZXZlbFByb3BlcnR5KCBzdW1DaGFydC54QXhpc0Rlc2NyaXB0aW9uUHJvcGVydHksIG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3hab29tTGV2ZWxQcm9wZXJ0eScgKSApLFxyXG4gICAgICB4VGlja0xhYmVsU2V0T3B0aW9uczoge1xyXG4gICAgICAgIGNyZWF0ZUxhYmVsOiB2YWx1ZSA9PlxyXG4gICAgICAgICAgVGlja0xhYmVsVXRpbHMuY3JlYXRlVGlja0xhYmVsRm9yRG9tYWluKCB2YWx1ZSwgWF9USUNLX0xBQkVMX0RFQ0lNQUxTLCBzdW1DaGFydC54QXhpc1RpY2tMYWJlbEZvcm1hdFByb3BlcnR5LnZhbHVlLFxyXG4gICAgICAgICAgICBzdW1DaGFydC5kb21haW5Qcm9wZXJ0eS52YWx1ZSwgc3VtQ2hhcnQuZm91cmllclNlcmllcy5MLCBzdW1DaGFydC5mb3VyaWVyU2VyaWVzLlQgKVxyXG4gICAgICB9LFxyXG4gICAgICB5VGlja0xhYmVsU2V0T3B0aW9uczoge1xyXG4gICAgICAgIGNyZWF0ZUxhYmVsOiB2YWx1ZSA9PiBUaWNrTGFiZWxVdGlscy5jcmVhdGVOdW1lcmljVGlja0xhYmVsKCB2YWx1ZSwgWV9USUNLX0xBQkVMX0RFQ0lNQUxTIClcclxuICAgICAgfVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBzdW1DaGFydCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEZpZWxkcyBvZiBpbnRlcmVzdCBpbiBzdW1DaGFydCwgdG8gaW1wcm92ZSByZWFkYWJpbGl0eVxyXG4gICAgY29uc3QgaW5maW5pdGVIYXJtb25pY3NWaXNpYmxlUHJvcGVydHkgPSBzdW1DaGFydC5pbmZpbml0ZUhhcm1vbmljc1Zpc2libGVQcm9wZXJ0eTtcclxuXHJcbiAgICAvLyBQbG90IGZvciB0aGUgJ0luZmluaXRlIEhhcm1vbmljcycgZmVhdHVyZVxyXG4gICAgY29uc3QgaW5maW5pdGVIYXJtb25pY3NQbG90ID0gbmV3IEluZmluaXRlSGFybW9uaWNzUGxvdCggdGhpcy5jaGFydFRyYW5zZm9ybSxcclxuICAgICAgc3VtQ2hhcnQuaW5maW5pdGVIYXJtb25pY3NEYXRhU2V0UHJvcGVydHksIGluZmluaXRlSGFybW9uaWNzVmlzaWJsZVByb3BlcnR5ICk7XHJcblxyXG4gICAgLy8gV2hlbiBhbnl0aGluZyBhYm91dCB0aGUgcGxvdCBjaGFuZ2VzLCB1cGRhdGUgdGhlIGFzc29jaWF0ZWQgQ2hhcnRDYW52YXNOb2RlLlxyXG4gICAgaW5maW5pdGVIYXJtb25pY3NQbG90LmNoYW5nZWRFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiB0aGlzLmNoYXJ0Q2FudmFzTm9kZS51cGRhdGUoKSApO1xyXG5cclxuICAgIC8vIFB1dCB0aGUgaW5maW5pdGVIYXJtb25pY3NQbG90IGJlaGluZCBwbG90cyB0aGF0IHdlcmUgYWRkZWQgYnkgdGhlIHN1cGVyY2xhc3MuXHJcbiAgICB0aGlzLmNoYXJ0Q2FudmFzTm9kZS5zZXRQYWludGVycyggWyBpbmZpbml0ZUhhcm1vbmljc1Bsb3QsIC4uLnRoaXMuY2hhcnRDYW52YXNOb2RlLnBhaW50ZXJzIF0gKTtcclxuXHJcbiAgICAvLyBJbnRlcnJ1cHQgaW50ZXJhY3Rpb24gd2hlbiB2aXNpYmlsaXR5IGNoYW5nZXMuXHJcbiAgICB0aGlzLnZpc2libGVQcm9wZXJ0eS5saW5rKCAoKSA9PiB0aGlzLmludGVycnVwdFN1YnRyZWVJbnB1dCgpICk7XHJcblxyXG4gICAgLy8geC1heGlzIHRpY2sgbGFiZWxzIGFyZSBzcGVjaWZpYyB0byBEb21haW4gYW5kIGZvcm1hdCAobnVtZXJpYyB2cyBzeW1ib2xpYykuXHJcbiAgICAvLyBUaGlzIGNhdXNlcyBvcHRpb25zLnhUaWNrTGFiZWxTZXRPcHRpb25zLmNyZWF0ZUxhYmVscyB0byBiZSBjYWxsZWQuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHN1bUNoYXJ0LmRvbWFpblByb3BlcnR5LCBzdW1DaGFydC54QXhpc1RpY2tMYWJlbEZvcm1hdFByb3BlcnR5IF0sXHJcbiAgICAgICgpID0+IHRoaXMueFRpY2tMYWJlbHMuaW52YWxpZGF0ZVRpY2tMYWJlbFNldCgpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnRGlzY3JldGVTdW1DaGFydE5vZGUnLCBEaXNjcmV0ZVN1bUNoYXJ0Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxZQUFZLE1BQU0sbUNBQW1DO0FBQzVELE9BQU9DLGNBQWMsTUFBTSxxQ0FBcUM7QUFDaEUsT0FBT0MsaUJBQWlCLE1BQU0sd0NBQXdDO0FBQ3RFLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxnQkFBZ0IsTUFBTSw4QkFBOEI7QUFDM0QsT0FBT0Ms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