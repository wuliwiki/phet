// Copyright 2021-2023, University of Colorado Boulder

/**
 * WavelengthCheckbox is the checkbox that is used to show the wavelength tool.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import { Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import FMWConstants from '../../common/FMWConstants.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import FourierMakingWavesStrings from '../../FourierMakingWavesStrings.js';
export default class WavelengthCheckbox extends Checkbox {
  /**
   * @param {Property.<boolean>} isSelectedProperty
   * @param {Object} [options]
   */
  constructor(isSelectedProperty, options) {
    assert && AssertUtils.assertPropertyOf(isSelectedProperty, 'boolean');
    options = merge({}, FMWConstants.CHECKBOX_OPTIONS, {
      tandem: Tandem.REQUIRED
    }, options);
    const wavelengthText = new Text(FourierMakingWavesStrings.wavelengthStringProperty, {
      font: FMWConstants.CONTROL_FONT,
      maxWidth: 80,
      // determined empirically
      tandem: options.tandem.createTandem('wavelengthText')
    });
    super(isSelectedProperty, wavelengthText, options);
  }
}
fourierMakingWaves.register('WavelengthCheckbox', WavelengthCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFzc2VydFV0aWxzIiwiVGV4dCIsIkNoZWNrYm94IiwiVGFuZGVtIiwiRk1XQ29uc3RhbnRzIiwiZm91cmllck1ha2luZ1dhdmVzIiwiRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncyIsIldhdmVsZW5ndGhDaGVja2JveCIsImNvbnN0cnVjdG9yIiwiaXNTZWxlY3RlZFByb3BlcnR5Iiwib3B0aW9ucyIsImFzc2VydCIsImFzc2VydFByb3BlcnR5T2YiLCJDSEVDS0JPWF9PUFRJT05TIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ3YXZlbGVuZ3RoVGV4dCIsIndhdmVsZW5ndGhTdHJpbmdQcm9wZXJ0eSIsImZvbnQiLCJDT05UUk9MX0ZPTlQiLCJtYXhXaWR0aCIsImNyZWF0ZVRhbmRlbSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F2ZWxlbmd0aENoZWNrYm94LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFdhdmVsZW5ndGhDaGVja2JveCBpcyB0aGUgY2hlY2tib3ggdGhhdCBpcyB1c2VkIHRvIHNob3cgdGhlIHdhdmVsZW5ndGggdG9vbC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IEFzc2VydFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvQXNzZXJ0VXRpbHMuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBGTVdDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0ZNV0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuaW1wb3J0IEZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MgZnJvbSAnLi4vLi4vRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXZlbGVuZ3RoQ2hlY2tib3ggZXh0ZW5kcyBDaGVja2JveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSBpc1NlbGVjdGVkUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGlzU2VsZWN0ZWRQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgQXNzZXJ0VXRpbHMuYXNzZXJ0UHJvcGVydHlPZiggaXNTZWxlY3RlZFByb3BlcnR5LCAnYm9vbGVhbicgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCBGTVdDb25zdGFudHMuQ0hFQ0tCT1hfT1BUSU9OUywge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHdhdmVsZW5ndGhUZXh0ID0gbmV3IFRleHQoIEZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3Mud2F2ZWxlbmd0aFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IEZNV0NvbnN0YW50cy5DT05UUk9MX0ZPTlQsXHJcbiAgICAgIG1heFdpZHRoOiA4MCwgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3dhdmVsZW5ndGhUZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGlzU2VsZWN0ZWRQcm9wZXJ0eSwgd2F2ZWxlbmd0aFRleHQsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ1dhdmVsZW5ndGhDaGVja2JveCcsIFdhdmVsZW5ndGhDaGVja2JveCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSwwQ0FBMEM7QUFDbEUsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQUN2RCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MseUJBQXlCLE1BQU0sb0NBQW9DO0FBRTFFLGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNMLFFBQVEsQ0FBQztFQUV2RDtBQUNGO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxrQkFBa0IsRUFBRUMsT0FBTyxFQUFHO0lBRXpDQyxNQUFNLElBQUlYLFdBQVcsQ0FBQ1ksZ0JBQWdCLENBQUVILGtCQUFrQixFQUFFLFNBQVUsQ0FBQztJQUV2RUMsT0FBTyxHQUFHWCxLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUVLLFlBQVksQ0FBQ1MsZ0JBQWdCLEVBQUU7TUFDbERDLE1BQU0sRUFBRVgsTUFBTSxDQUFDWTtJQUNqQixDQUFDLEVBQUVMLE9BQVEsQ0FBQztJQUVaLE1BQU1NLGNBQWMsR0FBRyxJQUFJZixJQUFJLENBQUVLLHlCQUF5QixDQUFDVyx3QkFBd0IsRUFBRTtNQUNuRkMsSUFBSSxFQUFFZCxZQUFZLENBQUNlLFlBQVk7TUFDL0JDLFFBQVEsRUFBRSxFQUFFO01BQUU7TUFDZE4sTUFBTSxFQUFFSixPQUFPLENBQUNJLE1BQU0sQ0FBQ08sWUFBWSxDQUFFLGdCQUFpQjtJQUN4RCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVaLGtCQUFrQixFQUFFTyxjQUFjLEVBQUVOLE9BQVEsQ0FBQztFQUN0RDtBQUNGO0FBRUFMLGtCQUFrQixDQUFDaUIsUUFBUSxDQUFFLG9CQUFvQixFQUFFZixrQkFBbUIsQ0FBQyJ9