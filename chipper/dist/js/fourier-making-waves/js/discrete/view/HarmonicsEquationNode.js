// Copyright 2020-2023, University of Colorado Boulder

/**
 * HarmonicsEquationNode is the equation that appears above the 'Harmonics' chart in the 'Discrete' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import Multilink from '../../../../axon/js/Multilink.js';
import merge from '../../../../phet-core/js/merge.js';
import { Node, RichText } from '../../../../scenery/js/imports.js';
import FMWConstants from '../../common/FMWConstants.js';
import EquationMarkup from '../../common/view/EquationMarkup.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class HarmonicsEquationNode extends Node {
  /**
   * @param {EnumerationProperty.<Domain>} domainProperty
   * @param {EnumerationProperty.<SeriesType>} seriesTypeProperty
   * @param {EnumerationProperty.<EquationForm>} equationFormProperty
   * @param {Object} [options]
   */
  constructor(domainProperty, seriesTypeProperty, equationFormProperty, options) {
    assert && assert(domainProperty instanceof EnumerationProperty);
    assert && assert(seriesTypeProperty instanceof EnumerationProperty);
    assert && assert(equationFormProperty instanceof EnumerationProperty);
    options = merge({
      textOptions: {
        font: FMWConstants.EQUATION_FONT
      }
    }, options);

    // text is set in multilink below
    const richText = new RichText('', options.textOptions);
    assert && assert(!options.children, 'HarmonicsEquationNode sets children');
    options.children = [richText];
    super(options);
    Multilink.multilink([domainProperty, seriesTypeProperty, equationFormProperty], (domain, seriesType, equationForm) => {
      richText.string = EquationMarkup.getGeneralFormMarkup(domain, seriesType, equationForm);
    });
  }

  /**
   * @public
   * @override
   */
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
fourierMakingWaves.register('HarmonicsEquationNode', HarmonicsEquationNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvblByb3BlcnR5IiwiTXVsdGlsaW5rIiwibWVyZ2UiLCJOb2RlIiwiUmljaFRleHQiLCJGTVdDb25zdGFudHMiLCJFcXVhdGlvbk1hcmt1cCIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkhhcm1vbmljc0VxdWF0aW9uTm9kZSIsImNvbnN0cnVjdG9yIiwiZG9tYWluUHJvcGVydHkiLCJzZXJpZXNUeXBlUHJvcGVydHkiLCJlcXVhdGlvbkZvcm1Qcm9wZXJ0eSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJ0ZXh0T3B0aW9ucyIsImZvbnQiLCJFUVVBVElPTl9GT05UIiwicmljaFRleHQiLCJjaGlsZHJlbiIsIm11bHRpbGluayIsImRvbWFpbiIsInNlcmllc1R5cGUiLCJlcXVhdGlvbkZvcm0iLCJzdHJpbmciLCJnZXRHZW5lcmFsRm9ybU1hcmt1cCIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkhhcm1vbmljc0VxdWF0aW9uTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBIYXJtb25pY3NFcXVhdGlvbk5vZGUgaXMgdGhlIGVxdWF0aW9uIHRoYXQgYXBwZWFycyBhYm92ZSB0aGUgJ0hhcm1vbmljcycgY2hhcnQgaW4gdGhlICdEaXNjcmV0ZScgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUmljaFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgRk1XQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRXF1YXRpb25NYXJrdXAgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvRXF1YXRpb25NYXJrdXAuanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYXJtb25pY3NFcXVhdGlvbk5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFbnVtZXJhdGlvblByb3BlcnR5LjxEb21haW4+fSBkb21haW5Qcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7RW51bWVyYXRpb25Qcm9wZXJ0eS48U2VyaWVzVHlwZT59IHNlcmllc1R5cGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7RW51bWVyYXRpb25Qcm9wZXJ0eS48RXF1YXRpb25Gb3JtPn0gZXF1YXRpb25Gb3JtUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGRvbWFpblByb3BlcnR5LCBzZXJpZXNUeXBlUHJvcGVydHksIGVxdWF0aW9uRm9ybVByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGRvbWFpblByb3BlcnR5IGluc3RhbmNlb2YgRW51bWVyYXRpb25Qcm9wZXJ0eSApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc2VyaWVzVHlwZVByb3BlcnR5IGluc3RhbmNlb2YgRW51bWVyYXRpb25Qcm9wZXJ0eSApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZXF1YXRpb25Gb3JtUHJvcGVydHkgaW5zdGFuY2VvZiBFbnVtZXJhdGlvblByb3BlcnR5ICk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgZm9udDogRk1XQ29uc3RhbnRzLkVRVUFUSU9OX0ZPTlRcclxuICAgICAgfVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHRleHQgaXMgc2V0IGluIG11bHRpbGluayBiZWxvd1xyXG4gICAgY29uc3QgcmljaFRleHQgPSBuZXcgUmljaFRleHQoICcnLCBvcHRpb25zLnRleHRPcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuY2hpbGRyZW4sICdIYXJtb25pY3NFcXVhdGlvbk5vZGUgc2V0cyBjaGlsZHJlbicgKTtcclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIHJpY2hUZXh0IF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICBbIGRvbWFpblByb3BlcnR5LCBzZXJpZXNUeXBlUHJvcGVydHksIGVxdWF0aW9uRm9ybVByb3BlcnR5IF0sXHJcbiAgICAgICggZG9tYWluLCBzZXJpZXNUeXBlLCBlcXVhdGlvbkZvcm0gKSA9PiB7XHJcbiAgICAgICAgcmljaFRleHQuc3RyaW5nID0gRXF1YXRpb25NYXJrdXAuZ2V0R2VuZXJhbEZvcm1NYXJrdXAoIGRvbWFpbiwgc2VyaWVzVHlwZSwgZXF1YXRpb25Gb3JtICk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnSGFybW9uaWNzRXF1YXRpb25Ob2RlJywgSGFybW9uaWNzRXF1YXRpb25Ob2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLG1CQUFtQixNQUFNLDRDQUE0QztBQUM1RSxPQUFPQyxTQUFTLE1BQU0sa0NBQWtDO0FBQ3hELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsSUFBSSxFQUFFQyxRQUFRLFFBQVEsbUNBQW1DO0FBQ2xFLE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0MsY0FBYyxNQUFNLHFDQUFxQztBQUNoRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFFNUQsZUFBZSxNQUFNQyxxQkFBcUIsU0FBU0wsSUFBSSxDQUFDO0VBRXREO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxjQUFjLEVBQUVDLGtCQUFrQixFQUFFQyxvQkFBb0IsRUFBRUMsT0FBTyxFQUFHO0lBRS9FQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUosY0FBYyxZQUFZVixtQkFBb0IsQ0FBQztJQUNqRWMsTUFBTSxJQUFJQSxNQUFNLENBQUVILGtCQUFrQixZQUFZWCxtQkFBb0IsQ0FBQztJQUNyRWMsTUFBTSxJQUFJQSxNQUFNLENBQUVGLG9CQUFvQixZQUFZWixtQkFBb0IsQ0FBQztJQUV2RWEsT0FBTyxHQUFHWCxLQUFLLENBQUU7TUFDZmEsV0FBVyxFQUFFO1FBQ1hDLElBQUksRUFBRVgsWUFBWSxDQUFDWTtNQUNyQjtJQUNGLENBQUMsRUFBRUosT0FBUSxDQUFDOztJQUVaO0lBQ0EsTUFBTUssUUFBUSxHQUFHLElBQUlkLFFBQVEsQ0FBRSxFQUFFLEVBQUVTLE9BQU8sQ0FBQ0UsV0FBWSxDQUFDO0lBRXhERCxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDRCxPQUFPLENBQUNNLFFBQVEsRUFBRSxxQ0FBc0MsQ0FBQztJQUM1RU4sT0FBTyxDQUFDTSxRQUFRLEdBQUcsQ0FBRUQsUUFBUSxDQUFFO0lBRS9CLEtBQUssQ0FBRUwsT0FBUSxDQUFDO0lBRWhCWixTQUFTLENBQUNtQixTQUFTLENBQ2pCLENBQUVWLGNBQWMsRUFBRUMsa0JBQWtCLEVBQUVDLG9CQUFvQixDQUFFLEVBQzVELENBQUVTLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxZQUFZLEtBQU07TUFDdENMLFFBQVEsQ0FBQ00sTUFBTSxHQUFHbEIsY0FBYyxDQUFDbUIsb0JBQW9CLENBQUVKLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxZQUFhLENBQUM7SUFDM0YsQ0FDRixDQUFDO0VBQ0g7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUcsT0FBT0EsQ0FBQSxFQUFHO0lBQ1JaLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNZLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQW5CLGtCQUFrQixDQUFDb0IsUUFBUSxDQUFFLHVCQUF1QixFQUFFbkIscUJBQXNCLENBQUMifQ==