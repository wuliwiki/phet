// Copyright 2020-2023, University of Colorado Boulder

/**
 * PeriodCalipersNode is the tool used to measure a harmonic's period in the time Domain on the 'Discrete' screen.
 * Origin is at the tip of the caliper's left jaw.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import ChartTransform from '../../../../bamboo/js/ChartTransform.js';
import merge from '../../../../phet-core/js/merge.js';
import Domain from '../../common/model/Domain.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import DiscreteModel from '../model/DiscreteModel.js';
import DiscreteCalipersNode from './DiscreteCalipersNode.js';
export default class PeriodCalipersNode extends DiscreteCalipersNode {
  /**
   * @param {DiscreteModel} model
   * @param {ChartTransform} chartTransform
   * @param {Object} [options]
   */
  constructor(model, chartTransform, options) {
    assert && assert(model instanceof DiscreteModel);
    assert && assert(chartTransform instanceof ChartTransform);
    options = merge({
      // DiscreteCalipersNode options
      debugName: 'periodCalipers'
    }, options);
    super(model.periodTool, model.fourierSeries.harmonics, model.harmonicsChart.emphasizedHarmonics, chartTransform, model.domainProperty, [Domain.TIME],
    // relevant Domains
    harmonic => harmonic.period,
    // gets the quantity of Harmonic that is being measured
    options);
  }
}
fourierMakingWaves.register('PeriodCalipersNode', PeriodCalipersNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGFydFRyYW5zZm9ybSIsIm1lcmdlIiwiRG9tYWluIiwiZm91cmllck1ha2luZ1dhdmVzIiwiRGlzY3JldGVNb2RlbCIsIkRpc2NyZXRlQ2FsaXBlcnNOb2RlIiwiUGVyaW9kQ2FsaXBlcnNOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsImNoYXJ0VHJhbnNmb3JtIiwib3B0aW9ucyIsImFzc2VydCIsImRlYnVnTmFtZSIsInBlcmlvZFRvb2wiLCJmb3VyaWVyU2VyaWVzIiwiaGFybW9uaWNzIiwiaGFybW9uaWNzQ2hhcnQiLCJlbXBoYXNpemVkSGFybW9uaWNzIiwiZG9tYWluUHJvcGVydHkiLCJUSU1FIiwiaGFybW9uaWMiLCJwZXJpb2QiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBlcmlvZENhbGlwZXJzTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQZXJpb2RDYWxpcGVyc05vZGUgaXMgdGhlIHRvb2wgdXNlZCB0byBtZWFzdXJlIGEgaGFybW9uaWMncyBwZXJpb2QgaW4gdGhlIHRpbWUgRG9tYWluIG9uIHRoZSAnRGlzY3JldGUnIHNjcmVlbi5cclxuICogT3JpZ2luIGlzIGF0IHRoZSB0aXAgb2YgdGhlIGNhbGlwZXIncyBsZWZ0IGphdy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQ2hhcnRUcmFuc2Zvcm0gZnJvbSAnLi4vLi4vLi4vLi4vYmFtYm9vL2pzL0NoYXJ0VHJhbnNmb3JtLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBEb21haW4gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0RvbWFpbi5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuaW1wb3J0IERpc2NyZXRlTW9kZWwgZnJvbSAnLi4vbW9kZWwvRGlzY3JldGVNb2RlbC5qcyc7XHJcbmltcG9ydCBEaXNjcmV0ZUNhbGlwZXJzTm9kZSBmcm9tICcuL0Rpc2NyZXRlQ2FsaXBlcnNOb2RlLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcmlvZENhbGlwZXJzTm9kZSBleHRlbmRzIERpc2NyZXRlQ2FsaXBlcnNOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtEaXNjcmV0ZU1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7Q2hhcnRUcmFuc2Zvcm19IGNoYXJ0VHJhbnNmb3JtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgY2hhcnRUcmFuc2Zvcm0sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbW9kZWwgaW5zdGFuY2VvZiBEaXNjcmV0ZU1vZGVsICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjaGFydFRyYW5zZm9ybSBpbnN0YW5jZW9mIENoYXJ0VHJhbnNmb3JtICk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcblxyXG4gICAgICAvLyBEaXNjcmV0ZUNhbGlwZXJzTm9kZSBvcHRpb25zXHJcbiAgICAgIGRlYnVnTmFtZTogJ3BlcmlvZENhbGlwZXJzJ1xyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICBtb2RlbC5wZXJpb2RUb29sLFxyXG4gICAgICBtb2RlbC5mb3VyaWVyU2VyaWVzLmhhcm1vbmljcyxcclxuICAgICAgbW9kZWwuaGFybW9uaWNzQ2hhcnQuZW1waGFzaXplZEhhcm1vbmljcyxcclxuICAgICAgY2hhcnRUcmFuc2Zvcm0sXHJcbiAgICAgIG1vZGVsLmRvbWFpblByb3BlcnR5LFxyXG4gICAgICBbIERvbWFpbi5USU1FIF0sIC8vIHJlbGV2YW50IERvbWFpbnNcclxuICAgICAgaGFybW9uaWMgPT4gaGFybW9uaWMucGVyaW9kLCAvLyBnZXRzIHRoZSBxdWFudGl0eSBvZiBIYXJtb25pYyB0aGF0IGlzIGJlaW5nIG1lYXN1cmVkXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdQZXJpb2RDYWxpcGVyc05vZGUnLCBQZXJpb2RDYWxpcGVyc05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0seUNBQXlDO0FBQ3BFLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsYUFBYSxNQUFNLDJCQUEyQjtBQUNyRCxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsZUFBZSxNQUFNQyxrQkFBa0IsU0FBU0Qsb0JBQW9CLENBQUM7RUFFbkU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLGNBQWMsRUFBRUMsT0FBTyxFQUFHO0lBRTVDQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsS0FBSyxZQUFZSixhQUFjLENBQUM7SUFDbERPLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixjQUFjLFlBQVlULGNBQWUsQ0FBQztJQUU1RFUsT0FBTyxHQUFHVCxLQUFLLENBQUU7TUFFZjtNQUNBVyxTQUFTLEVBQUU7SUFDYixDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FDSEYsS0FBSyxDQUFDSyxVQUFVLEVBQ2hCTCxLQUFLLENBQUNNLGFBQWEsQ0FBQ0MsU0FBUyxFQUM3QlAsS0FBSyxDQUFDUSxjQUFjLENBQUNDLG1CQUFtQixFQUN4Q1IsY0FBYyxFQUNkRCxLQUFLLENBQUNVLGNBQWMsRUFDcEIsQ0FBRWhCLE1BQU0sQ0FBQ2lCLElBQUksQ0FBRTtJQUFFO0lBQ2pCQyxRQUFRLElBQUlBLFFBQVEsQ0FBQ0MsTUFBTTtJQUFFO0lBQzdCWCxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFQLGtCQUFrQixDQUFDbUIsUUFBUSxDQUFFLG9CQUFvQixFQUFFaEIsa0JBQW1CLENBQUMifQ==