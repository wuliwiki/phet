// Copyright 2021-2023, University of Colorado Boulder

/**
 * DiscreteAmplitudesChartNode is a specialization of InteractiveAmplitudesChartNode for the 'Discrete' screen.
 * It shows sliders for the relevant harmonics in a Fourier series.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import InteractiveAmplitudesChartNode from '../../common/view/InteractiveAmplitudesChartNode.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import DiscreteAmplitudesChart from '../model/DiscreteAmplitudesChart.js';
export default class DiscreteAmplitudesChartNode extends InteractiveAmplitudesChartNode {
  /**
   * @param {DiscreteAmplitudesChart} amplitudesChart
   * @param {AmplitudeKeypadDialog} amplitudeKeypadDialog - keypad for editing amplitude values
   * @param {Object} [options]
   */
  constructor(amplitudesChart, amplitudeKeypadDialog, options) {
    assert && assert(amplitudesChart instanceof DiscreteAmplitudesChart);
    super(amplitudesChart, amplitudeKeypadDialog, options);

    // Hide sliders and number displays that are not part of the series.
    // Note that it's the model's responsibility to set the amplitude for hidden harmonics to zero.
    amplitudesChart.fourierSeries.numberOfHarmonicsProperty.link(numberOfHarmonics => {
      assert && assert(numberOfHarmonics > 0 && numberOfHarmonics <= this.sliders.length, `unsupported numberOfHarmonics: ${numberOfHarmonics}`);
      for (let i = 0; i < this.sliders.length; i++) {
        const visible = i < numberOfHarmonics;
        this.sliders[i].visible = visible;
        this.numberDisplays[i].visible = visible;
      }
    });
  }
}
fourierMakingWaves.register('DiscreteAmplitudesChartNode', DiscreteAmplitudesChartNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnRlcmFjdGl2ZUFtcGxpdHVkZXNDaGFydE5vZGUiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJEaXNjcmV0ZUFtcGxpdHVkZXNDaGFydCIsIkRpc2NyZXRlQW1wbGl0dWRlc0NoYXJ0Tm9kZSIsImNvbnN0cnVjdG9yIiwiYW1wbGl0dWRlc0NoYXJ0IiwiYW1wbGl0dWRlS2V5cGFkRGlhbG9nIiwib3B0aW9ucyIsImFzc2VydCIsImZvdXJpZXJTZXJpZXMiLCJudW1iZXJPZkhhcm1vbmljc1Byb3BlcnR5IiwibGluayIsIm51bWJlck9mSGFybW9uaWNzIiwic2xpZGVycyIsImxlbmd0aCIsImkiLCJ2aXNpYmxlIiwibnVtYmVyRGlzcGxheXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpc2NyZXRlQW1wbGl0dWRlc0NoYXJ0Tm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaXNjcmV0ZUFtcGxpdHVkZXNDaGFydE5vZGUgaXMgYSBzcGVjaWFsaXphdGlvbiBvZiBJbnRlcmFjdGl2ZUFtcGxpdHVkZXNDaGFydE5vZGUgZm9yIHRoZSAnRGlzY3JldGUnIHNjcmVlbi5cclxuICogSXQgc2hvd3Mgc2xpZGVycyBmb3IgdGhlIHJlbGV2YW50IGhhcm1vbmljcyBpbiBhIEZvdXJpZXIgc2VyaWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBJbnRlcmFjdGl2ZUFtcGxpdHVkZXNDaGFydE5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvSW50ZXJhY3RpdmVBbXBsaXR1ZGVzQ2hhcnROb2RlLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5pbXBvcnQgRGlzY3JldGVBbXBsaXR1ZGVzQ2hhcnQgZnJvbSAnLi4vbW9kZWwvRGlzY3JldGVBbXBsaXR1ZGVzQ2hhcnQuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlzY3JldGVBbXBsaXR1ZGVzQ2hhcnROb2RlIGV4dGVuZHMgSW50ZXJhY3RpdmVBbXBsaXR1ZGVzQ2hhcnROb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtEaXNjcmV0ZUFtcGxpdHVkZXNDaGFydH0gYW1wbGl0dWRlc0NoYXJ0XHJcbiAgICogQHBhcmFtIHtBbXBsaXR1ZGVLZXlwYWREaWFsb2d9IGFtcGxpdHVkZUtleXBhZERpYWxvZyAtIGtleXBhZCBmb3IgZWRpdGluZyBhbXBsaXR1ZGUgdmFsdWVzXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBhbXBsaXR1ZGVzQ2hhcnQsIGFtcGxpdHVkZUtleXBhZERpYWxvZywgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBhbXBsaXR1ZGVzQ2hhcnQgaW5zdGFuY2VvZiBEaXNjcmV0ZUFtcGxpdHVkZXNDaGFydCApO1xyXG5cclxuICAgIHN1cGVyKCBhbXBsaXR1ZGVzQ2hhcnQsIGFtcGxpdHVkZUtleXBhZERpYWxvZywgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEhpZGUgc2xpZGVycyBhbmQgbnVtYmVyIGRpc3BsYXlzIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBzZXJpZXMuXHJcbiAgICAvLyBOb3RlIHRoYXQgaXQncyB0aGUgbW9kZWwncyByZXNwb25zaWJpbGl0eSB0byBzZXQgdGhlIGFtcGxpdHVkZSBmb3IgaGlkZGVuIGhhcm1vbmljcyB0byB6ZXJvLlxyXG4gICAgYW1wbGl0dWRlc0NoYXJ0LmZvdXJpZXJTZXJpZXMubnVtYmVyT2ZIYXJtb25pY3NQcm9wZXJ0eS5saW5rKCBudW1iZXJPZkhhcm1vbmljcyA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIG51bWJlck9mSGFybW9uaWNzID4gMCAmJiBudW1iZXJPZkhhcm1vbmljcyA8PSB0aGlzLnNsaWRlcnMubGVuZ3RoLFxyXG4gICAgICAgIGB1bnN1cHBvcnRlZCBudW1iZXJPZkhhcm1vbmljczogJHtudW1iZXJPZkhhcm1vbmljc31gICk7XHJcblxyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnNsaWRlcnMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgY29uc3QgdmlzaWJsZSA9ICggaSA8IG51bWJlck9mSGFybW9uaWNzICk7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJzWyBpIF0udmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICAgICAgdGhpcy5udW1iZXJEaXNwbGF5c1sgaSBdLnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdEaXNjcmV0ZUFtcGxpdHVkZXNDaGFydE5vZGUnLCBEaXNjcmV0ZUFtcGxpdHVkZXNDaGFydE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSw4QkFBOEIsTUFBTSxxREFBcUQ7QUFDaEcsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLHVCQUF1QixNQUFNLHFDQUFxQztBQUV6RSxlQUFlLE1BQU1DLDJCQUEyQixTQUFTSCw4QkFBOEIsQ0FBQztFQUV0RjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLGVBQWUsRUFBRUMscUJBQXFCLEVBQUVDLE9BQU8sRUFBRztJQUU3REMsTUFBTSxJQUFJQSxNQUFNLENBQUVILGVBQWUsWUFBWUgsdUJBQXdCLENBQUM7SUFFdEUsS0FBSyxDQUFFRyxlQUFlLEVBQUVDLHFCQUFxQixFQUFFQyxPQUFRLENBQUM7O0lBRXhEO0lBQ0E7SUFDQUYsZUFBZSxDQUFDSSxhQUFhLENBQUNDLHlCQUF5QixDQUFDQyxJQUFJLENBQUVDLGlCQUFpQixJQUFJO01BQ2pGSixNQUFNLElBQUlBLE1BQU0sQ0FBRUksaUJBQWlCLEdBQUcsQ0FBQyxJQUFJQSxpQkFBaUIsSUFBSSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsTUFBTSxFQUNoRixrQ0FBaUNGLGlCQUFrQixFQUFFLENBQUM7TUFFekQsS0FBTSxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sRUFBRUMsQ0FBQyxFQUFFLEVBQUc7UUFDOUMsTUFBTUMsT0FBTyxHQUFLRCxDQUFDLEdBQUdILGlCQUFtQjtRQUN6QyxJQUFJLENBQUNDLE9BQU8sQ0FBRUUsQ0FBQyxDQUFFLENBQUNDLE9BQU8sR0FBR0EsT0FBTztRQUNuQyxJQUFJLENBQUNDLGNBQWMsQ0FBRUYsQ0FBQyxDQUFFLENBQUNDLE9BQU8sR0FBR0EsT0FBTztNQUM1QztJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWYsa0JBQWtCLENBQUNpQixRQUFRLENBQUUsNkJBQTZCLEVBQUVmLDJCQUE0QixDQUFDIn0=