// Copyright 2020-2023, University of Colorado Boulder

/**
 * WavePacketScreen is the 'Wave Packet' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.
 */

import Screen from '../../../joist/js/Screen.js';
import FMWColors from '../common/FMWColors.js';
import FMWIconFactory from '../common/view/FMWIconFactory.js';
import fourierMakingWaves from '../fourierMakingWaves.js';
import FourierMakingWavesStrings from '../FourierMakingWavesStrings.js';
import WavePacketModel from './model/WavePacketModel.js';
import WavePacketKeyboardHelpContent from './view/WavePacketKeyboardHelpContent.js';
import WavePacketScreenView from './view/WavePacketScreenView.js';
export default class WavePacketScreen extends Screen {
  constructor(tandem) {
    const options = {
      name: FourierMakingWavesStrings.screen.wavePacketStringProperty,
      backgroundColorProperty: FMWColors.wavePacketScreenBackgroundColorProperty,
      homeScreenIcon: FMWIconFactory.createWavePacketHomeScreenIcon(),
      createKeyboardHelpNode: () => new WavePacketKeyboardHelpContent(),
      tandem: tandem
    };
    super(() => new WavePacketModel(options.tandem.createTandem('model')), model => new WavePacketScreenView(model, options.tandem.createTandem('view')), options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
fourierMakingWaves.register('WavePacketScreen', WavePacketScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJGTVdDb2xvcnMiLCJGTVdJY29uRmFjdG9yeSIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MiLCJXYXZlUGFja2V0TW9kZWwiLCJXYXZlUGFja2V0S2V5Ym9hcmRIZWxwQ29udGVudCIsIldhdmVQYWNrZXRTY3JlZW5WaWV3IiwiV2F2ZVBhY2tldFNjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwib3B0aW9ucyIsIm5hbWUiLCJzY3JlZW4iLCJ3YXZlUGFja2V0U3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIndhdmVQYWNrZXRTY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlV2F2ZVBhY2tldEhvbWVTY3JlZW5JY29uIiwiY3JlYXRlS2V5Ym9hcmRIZWxwTm9kZSIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F2ZVBhY2tldFNjcmVlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXYXZlUGFja2V0U2NyZWVuIGlzIHRoZSAnV2F2ZSBQYWNrZXQnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLlxyXG4gKi9cclxuXHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEZNV0NvbG9ycyBmcm9tICcuLi9jb21tb24vRk1XQ29sb3JzLmpzJztcclxuaW1wb3J0IEZNV0ljb25GYWN0b3J5IGZyb20gJy4uL2NvbW1vbi92aWV3L0ZNV0ljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5pbXBvcnQgRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncyBmcm9tICcuLi9Gb3VyaWVyTWFraW5nV2F2ZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IFdhdmVQYWNrZXRNb2RlbCBmcm9tICcuL21vZGVsL1dhdmVQYWNrZXRNb2RlbC5qcyc7XHJcbmltcG9ydCBXYXZlUGFja2V0S2V5Ym9hcmRIZWxwQ29udGVudCBmcm9tICcuL3ZpZXcvV2F2ZVBhY2tldEtleWJvYXJkSGVscENvbnRlbnQuanMnO1xyXG5pbXBvcnQgV2F2ZVBhY2tldFNjcmVlblZpZXcgZnJvbSAnLi92aWV3L1dhdmVQYWNrZXRTY3JlZW5WaWV3LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhdmVQYWNrZXRTY3JlZW4gZXh0ZW5kcyBTY3JlZW48V2F2ZVBhY2tldE1vZGVsLCBXYXZlUGFja2V0U2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IEZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3Muc2NyZWVuLndhdmVQYWNrZXRTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IEZNV0NvbG9ycy53YXZlUGFja2V0U2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBGTVdJY29uRmFjdG9yeS5jcmVhdGVXYXZlUGFja2V0SG9tZVNjcmVlbkljb24oKSxcclxuICAgICAgY3JlYXRlS2V5Ym9hcmRIZWxwTm9kZTogKCkgPT4gbmV3IFdhdmVQYWNrZXRLZXlib2FyZEhlbHBDb250ZW50KCksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgV2F2ZVBhY2tldE1vZGVsKCBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgV2F2ZVBhY2tldFNjcmVlblZpZXcoIG1vZGVsLCBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnV2F2ZVBhY2tldFNjcmVlbicsIFdhdmVQYWNrZXRTY3JlZW4gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLDZCQUE2QjtBQUVoRCxPQUFPQyxTQUFTLE1BQU0sd0JBQXdCO0FBQzlDLE9BQU9DLGNBQWMsTUFBTSxrQ0FBa0M7QUFDN0QsT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBQ3pELE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxlQUFlLE1BQU0sNEJBQTRCO0FBQ3hELE9BQU9DLDZCQUE2QixNQUFNLHlDQUF5QztBQUNuRixPQUFPQyxvQkFBb0IsTUFBTSxnQ0FBZ0M7QUFFakUsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU1IsTUFBTSxDQUF3QztFQUVuRlMsV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBRW5DLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVSLHlCQUF5QixDQUFDUyxNQUFNLENBQUNDLHdCQUF3QjtNQUMvREMsdUJBQXVCLEVBQUVkLFNBQVMsQ0FBQ2UsdUNBQXVDO01BQzFFQyxjQUFjLEVBQUVmLGNBQWMsQ0FBQ2dCLDhCQUE4QixDQUFDLENBQUM7TUFDL0RDLHNCQUFzQixFQUFFQSxDQUFBLEtBQU0sSUFBSWIsNkJBQTZCLENBQUMsQ0FBQztNQUNqRUksTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJTCxlQUFlLENBQUVNLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDVSxZQUFZLENBQUUsT0FBUSxDQUFFLENBQUMsRUFDbkVDLEtBQUssSUFBSSxJQUFJZCxvQkFBb0IsQ0FBRWMsS0FBSyxFQUFFVixPQUFPLENBQUNELE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQ2pGVCxPQUNGLENBQUM7RUFDSDtFQUVnQlcsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFuQixrQkFBa0IsQ0FBQ3FCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRWhCLGdCQUFpQixDQUFDIn0=