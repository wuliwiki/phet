// Copyright 2021-2023, University of Colorado Boulder

/**
 * ComponentSpacingToolCheckbox is the checkbox for changing visibility of the Component Spacing tool in the
 * 'Wave Packet' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import FMWColors from '../../common/FMWColors.js';
import FMWSymbols from '../../common/FMWSymbols.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import CaliperCheckbox from './CaliperCheckbox.js';
export default class ComponentSpacingToolCheckbox extends CaliperCheckbox {
  /**
   * @param {Property.<boolean>} visibleProperty
   * @param {EnumerationProperty.<Domain>} domainProperty
   * @param {Object} [options]
   */
  constructor(visibleProperty, domainProperty, options) {
    options = merge({
      calipersNodeOptions: {
        pathOptions: {
          fill: FMWColors.componentSpacingToolFillProperty
        }
      }
    }, options);
    const spaceSymbolStringProperty = new DerivedProperty([FMWSymbols.kStringProperty], k => `${k}<sub>1</sub>`);
    const timeSymbolStringProperty = new DerivedProperty([FMWSymbols.omegaStringProperty], omega => `${omega}<sub>1</sub>`);
    super(visibleProperty, domainProperty, spaceSymbolStringProperty, timeSymbolStringProperty, options);
  }
}
fourierMakingWaves.register('ComponentSpacingToolCheckbox', ComponentSpacingToolCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJtZXJnZSIsIkZNV0NvbG9ycyIsIkZNV1N5bWJvbHMiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJDYWxpcGVyQ2hlY2tib3giLCJDb21wb25lbnRTcGFjaW5nVG9vbENoZWNrYm94IiwiY29uc3RydWN0b3IiLCJ2aXNpYmxlUHJvcGVydHkiLCJkb21haW5Qcm9wZXJ0eSIsIm9wdGlvbnMiLCJjYWxpcGVyc05vZGVPcHRpb25zIiwicGF0aE9wdGlvbnMiLCJmaWxsIiwiY29tcG9uZW50U3BhY2luZ1Rvb2xGaWxsUHJvcGVydHkiLCJzcGFjZVN5bWJvbFN0cmluZ1Byb3BlcnR5Iiwia1N0cmluZ1Byb3BlcnR5IiwiayIsInRpbWVTeW1ib2xTdHJpbmdQcm9wZXJ0eSIsIm9tZWdhU3RyaW5nUHJvcGVydHkiLCJvbWVnYSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29tcG9uZW50U3BhY2luZ1Rvb2xDaGVja2JveC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnRTcGFjaW5nVG9vbENoZWNrYm94IGlzIHRoZSBjaGVja2JveCBmb3IgY2hhbmdpbmcgdmlzaWJpbGl0eSBvZiB0aGUgQ29tcG9uZW50IFNwYWNpbmcgdG9vbCBpbiB0aGVcclxuICogJ1dhdmUgUGFja2V0JyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgRk1XQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdDb2xvcnMuanMnO1xyXG5pbXBvcnQgRk1XU3ltYm9scyBmcm9tICcuLi8uLi9jb21tb24vRk1XU3ltYm9scy5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuaW1wb3J0IENhbGlwZXJDaGVja2JveCBmcm9tICcuL0NhbGlwZXJDaGVja2JveC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRTcGFjaW5nVG9vbENoZWNrYm94IGV4dGVuZHMgQ2FsaXBlckNoZWNrYm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHZpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7RW51bWVyYXRpb25Qcm9wZXJ0eS48RG9tYWluPn0gZG9tYWluUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHZpc2libGVQcm9wZXJ0eSwgZG9tYWluUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIGNhbGlwZXJzTm9kZU9wdGlvbnM6IHtcclxuICAgICAgICBwYXRoT3B0aW9uczoge1xyXG4gICAgICAgICAgZmlsbDogRk1XQ29sb3JzLmNvbXBvbmVudFNwYWNpbmdUb29sRmlsbFByb3BlcnR5XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3Qgc3BhY2VTeW1ib2xTdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgRk1XU3ltYm9scy5rU3RyaW5nUHJvcGVydHkgXSxcclxuICAgICAgayA9PiBgJHtrfTxzdWI+MTwvc3ViPmAgKTtcclxuXHJcbiAgICBjb25zdCB0aW1lU3ltYm9sU3RyaW5nUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIEZNV1N5bWJvbHMub21lZ2FTdHJpbmdQcm9wZXJ0eSBdLFxyXG4gICAgICBvbWVnYSA9PiBgJHtvbWVnYX08c3ViPjE8L3N1Yj5gICk7XHJcblxyXG4gICAgc3VwZXIoIHZpc2libGVQcm9wZXJ0eSwgZG9tYWluUHJvcGVydHksIHNwYWNlU3ltYm9sU3RyaW5nUHJvcGVydHksIHRpbWVTeW1ib2xTdHJpbmdQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnQ29tcG9uZW50U3BhY2luZ1Rvb2xDaGVja2JveCcsIENvbXBvbmVudFNwYWNpbmdUb29sQ2hlY2tib3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsU0FBUyxNQUFNLDJCQUEyQjtBQUNqRCxPQUFPQyxVQUFVLE1BQU0sNEJBQTRCO0FBQ25ELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBRWxELGVBQWUsTUFBTUMsNEJBQTRCLFNBQVNELGVBQWUsQ0FBQztFQUV4RTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLGVBQWUsRUFBRUMsY0FBYyxFQUFFQyxPQUFPLEVBQUc7SUFFdERBLE9BQU8sR0FBR1QsS0FBSyxDQUFFO01BQ2ZVLG1CQUFtQixFQUFFO1FBQ25CQyxXQUFXLEVBQUU7VUFDWEMsSUFBSSxFQUFFWCxTQUFTLENBQUNZO1FBQ2xCO01BQ0Y7SUFDRixDQUFDLEVBQUVKLE9BQVEsQ0FBQztJQUVaLE1BQU1LLHlCQUF5QixHQUFHLElBQUlmLGVBQWUsQ0FBRSxDQUFFRyxVQUFVLENBQUNhLGVBQWUsQ0FBRSxFQUNuRkMsQ0FBQyxJQUFLLEdBQUVBLENBQUUsY0FBYyxDQUFDO0lBRTNCLE1BQU1DLHdCQUF3QixHQUFHLElBQUlsQixlQUFlLENBQUUsQ0FBRUcsVUFBVSxDQUFDZ0IsbUJBQW1CLENBQUUsRUFDdEZDLEtBQUssSUFBSyxHQUFFQSxLQUFNLGNBQWMsQ0FBQztJQUVuQyxLQUFLLENBQUVaLGVBQWUsRUFBRUMsY0FBYyxFQUFFTSx5QkFBeUIsRUFBRUcsd0JBQXdCLEVBQUVSLE9BQVEsQ0FBQztFQUN4RztBQUNGO0FBRUFOLGtCQUFrQixDQUFDaUIsUUFBUSxDQUFFLDhCQUE4QixFQUFFZiw0QkFBNkIsQ0FBQyJ9