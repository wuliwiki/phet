// Copyright 2021-2023, University of Colorado Boulder

/**
 * LengthToolCheckbox is the checkbox for changing visibility of the Component Spacing tool in the
 * 'Wave Packet' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import FMWColors from '../../common/FMWColors.js';
import FMWSymbols from '../../common/FMWSymbols.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import CaliperCheckbox from './CaliperCheckbox.js';
export default class LengthToolCheckbox extends CaliperCheckbox {
  /**
   * @param {Property.<boolean>} visibleProperty
   * @param {EnumerationProperty.<Domain>} domainProperty
   * @param {Object} [options]
   */
  constructor(visibleProperty, domainProperty, options) {
    options = merge({
      calipersNodeOptions: {
        pathOptions: {
          fill: FMWColors.wavePacketLengthToolFillProperty
        }
      }
    }, options);
    const spaceSymbolStringProperty = new DerivedProperty([FMWSymbols.lambdaStringProperty], lambda => `${lambda}<sub>1</sub>`);
    const timeSymbolStringProperty = new DerivedProperty([FMWSymbols.TStringProperty], T => `${T}<sub>1</sub>`);
    super(visibleProperty, domainProperty, spaceSymbolStringProperty, timeSymbolStringProperty, options);
  }
}
fourierMakingWaves.register('LengthToolCheckbox', LengthToolCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkRlcml2ZWRQcm9wZXJ0eSIsIkZNV0NvbG9ycyIsIkZNV1N5bWJvbHMiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJDYWxpcGVyQ2hlY2tib3giLCJMZW5ndGhUb29sQ2hlY2tib3giLCJjb25zdHJ1Y3RvciIsInZpc2libGVQcm9wZXJ0eSIsImRvbWFpblByb3BlcnR5Iiwib3B0aW9ucyIsImNhbGlwZXJzTm9kZU9wdGlvbnMiLCJwYXRoT3B0aW9ucyIsImZpbGwiLCJ3YXZlUGFja2V0TGVuZ3RoVG9vbEZpbGxQcm9wZXJ0eSIsInNwYWNlU3ltYm9sU3RyaW5nUHJvcGVydHkiLCJsYW1iZGFTdHJpbmdQcm9wZXJ0eSIsImxhbWJkYSIsInRpbWVTeW1ib2xTdHJpbmdQcm9wZXJ0eSIsIlRTdHJpbmdQcm9wZXJ0eSIsIlQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxlbmd0aFRvb2xDaGVja2JveC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMZW5ndGhUb29sQ2hlY2tib3ggaXMgdGhlIGNoZWNrYm94IGZvciBjaGFuZ2luZyB2aXNpYmlsaXR5IG9mIHRoZSBDb21wb25lbnQgU3BhY2luZyB0b29sIGluIHRoZVxyXG4gKiAnV2F2ZSBQYWNrZXQnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBGTVdDb2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL0ZNV0NvbG9ycy5qcyc7XHJcbmltcG9ydCBGTVdTeW1ib2xzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdTeW1ib2xzLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5pbXBvcnQgQ2FsaXBlckNoZWNrYm94IGZyb20gJy4vQ2FsaXBlckNoZWNrYm94LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExlbmd0aFRvb2xDaGVja2JveCBleHRlbmRzIENhbGlwZXJDaGVja2JveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSB2aXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge0VudW1lcmF0aW9uUHJvcGVydHkuPERvbWFpbj59IGRvbWFpblByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB2aXNpYmxlUHJvcGVydHksIGRvbWFpblByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBjYWxpcGVyc05vZGVPcHRpb25zOiB7XHJcbiAgICAgICAgcGF0aE9wdGlvbnM6IHtcclxuICAgICAgICAgIGZpbGw6IEZNV0NvbG9ycy53YXZlUGFja2V0TGVuZ3RoVG9vbEZpbGxQcm9wZXJ0eVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHNwYWNlU3ltYm9sU3RyaW5nUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIEZNV1N5bWJvbHMubGFtYmRhU3RyaW5nUHJvcGVydHkgXSxcclxuICAgICAgICBsYW1iZGEgPT4gYCR7bGFtYmRhfTxzdWI+MTwvc3ViPmAgKTtcclxuXHJcbiAgICBjb25zdCB0aW1lU3ltYm9sU3RyaW5nUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIEZNV1N5bWJvbHMuVFN0cmluZ1Byb3BlcnR5IF0sXHJcbiAgICAgICAgVCA9PiBgJHtUfTxzdWI+MTwvc3ViPmAgKTtcclxuXHJcbiAgICBzdXBlciggdmlzaWJsZVByb3BlcnR5LCBkb21haW5Qcm9wZXJ0eSwgc3BhY2VTeW1ib2xTdHJpbmdQcm9wZXJ0eSwgdGltZVN5bWJvbFN0cmluZ1Byb3BlcnR5LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdMZW5ndGhUb29sQ2hlY2tib3gnLCBMZW5ndGhUb29sQ2hlY2tib3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsU0FBUyxNQUFNLDJCQUEyQjtBQUNqRCxPQUFPQyxVQUFVLE1BQU0sNEJBQTRCO0FBQ25ELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBRWxELGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNELGVBQWUsQ0FBQztFQUU5RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLGVBQWUsRUFBRUMsY0FBYyxFQUFFQyxPQUFPLEVBQUc7SUFFdERBLE9BQU8sR0FBR1YsS0FBSyxDQUFFO01BQ2ZXLG1CQUFtQixFQUFFO1FBQ25CQyxXQUFXLEVBQUU7VUFDWEMsSUFBSSxFQUFFWCxTQUFTLENBQUNZO1FBQ2xCO01BQ0Y7SUFDRixDQUFDLEVBQUVKLE9BQVEsQ0FBQztJQUVaLE1BQU1LLHlCQUF5QixHQUFHLElBQUlkLGVBQWUsQ0FBRSxDQUFFRSxVQUFVLENBQUNhLG9CQUFvQixDQUFFLEVBQ3RGQyxNQUFNLElBQUssR0FBRUEsTUFBTyxjQUFjLENBQUM7SUFFdkMsTUFBTUMsd0JBQXdCLEdBQUcsSUFBSWpCLGVBQWUsQ0FBRSxDQUFFRSxVQUFVLENBQUNnQixlQUFlLENBQUUsRUFDaEZDLENBQUMsSUFBSyxHQUFFQSxDQUFFLGNBQWMsQ0FBQztJQUU3QixLQUFLLENBQUVaLGVBQWUsRUFBRUMsY0FBYyxFQUFFTSx5QkFBeUIsRUFBRUcsd0JBQXdCLEVBQUVSLE9BQVEsQ0FBQztFQUN4RztBQUNGO0FBRUFOLGtCQUFrQixDQUFDaUIsUUFBUSxDQUFFLG9CQUFvQixFQUFFZixrQkFBbUIsQ0FBQyJ9