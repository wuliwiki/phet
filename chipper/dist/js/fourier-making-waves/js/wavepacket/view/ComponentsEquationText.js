// Copyright 2021-2023, University of Colorado Boulder

/**
 * ComponentsEquationText is the equation that appears above the 'Fourier Components' chart in the 'Wave Packet' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import Multilink from '../../../../axon/js/Multilink.js';
import merge from '../../../../phet-core/js/merge.js';
import { RichText } from '../../../../scenery/js/imports.js';
import FMWConstants from '../../common/FMWConstants.js';
import EquationMarkup from '../../common/view/EquationMarkup.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class ComponentsEquationText extends RichText {
  /**
   * @param {EnumerationProperty.<Domain>} domainProperty
   * @param {EnumerationProperty.<SeriesType>} seriesTypeProperty
   * @param {Object} [options]
   */
  constructor(domainProperty, seriesTypeProperty, options) {
    assert && assert(domainProperty instanceof EnumerationProperty);
    assert && assert(seriesTypeProperty instanceof EnumerationProperty);
    options = merge({
      font: FMWConstants.EQUATION_FONT
    }, options);
    super('', options);
    Multilink.multilink([domainProperty, seriesTypeProperty], (domain, seriesType) => {
      this.string = EquationMarkup.getComponentsEquationMarkup(domain, seriesType);
    });
  }

  /**
   * @public
   * @override
   */
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
fourierMakingWaves.register('ComponentsEquationText', ComponentsEquationText);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvblByb3BlcnR5IiwiTXVsdGlsaW5rIiwibWVyZ2UiLCJSaWNoVGV4dCIsIkZNV0NvbnN0YW50cyIsIkVxdWF0aW9uTWFya3VwIiwiZm91cmllck1ha2luZ1dhdmVzIiwiQ29tcG9uZW50c0VxdWF0aW9uVGV4dCIsImNvbnN0cnVjdG9yIiwiZG9tYWluUHJvcGVydHkiLCJzZXJpZXNUeXBlUHJvcGVydHkiLCJvcHRpb25zIiwiYXNzZXJ0IiwiZm9udCIsIkVRVUFUSU9OX0ZPTlQiLCJtdWx0aWxpbmsiLCJkb21haW4iLCJzZXJpZXNUeXBlIiwic3RyaW5nIiwiZ2V0Q29tcG9uZW50c0VxdWF0aW9uTWFya3VwIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29tcG9uZW50c0VxdWF0aW9uVGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnRzRXF1YXRpb25UZXh0IGlzIHRoZSBlcXVhdGlvbiB0aGF0IGFwcGVhcnMgYWJvdmUgdGhlICdGb3VyaWVyIENvbXBvbmVudHMnIGNoYXJ0IGluIHRoZSAnV2F2ZSBQYWNrZXQnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IFJpY2hUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEZNV0NvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vRk1XQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEVxdWF0aW9uTWFya3VwIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0VxdWF0aW9uTWFya3VwLmpzJztcclxuaW1wb3J0IGZvdXJpZXJNYWtpbmdXYXZlcyBmcm9tICcuLi8uLi9mb3VyaWVyTWFraW5nV2F2ZXMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50c0VxdWF0aW9uVGV4dCBleHRlbmRzIFJpY2hUZXh0IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFbnVtZXJhdGlvblByb3BlcnR5LjxEb21haW4+fSBkb21haW5Qcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7RW51bWVyYXRpb25Qcm9wZXJ0eS48U2VyaWVzVHlwZT59IHNlcmllc1R5cGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZG9tYWluUHJvcGVydHksIHNlcmllc1R5cGVQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBkb21haW5Qcm9wZXJ0eSBpbnN0YW5jZW9mIEVudW1lcmF0aW9uUHJvcGVydHkgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHNlcmllc1R5cGVQcm9wZXJ0eSBpbnN0YW5jZW9mIEVudW1lcmF0aW9uUHJvcGVydHkgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgZm9udDogRk1XQ29uc3RhbnRzLkVRVUFUSU9OX0ZPTlRcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggJycsIG9wdGlvbnMgKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICBbIGRvbWFpblByb3BlcnR5LCBzZXJpZXNUeXBlUHJvcGVydHkgXSxcclxuICAgICAgKCBkb21haW4sIHNlcmllc1R5cGUgKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zdHJpbmcgPSBFcXVhdGlvbk1hcmt1cC5nZXRDb21wb25lbnRzRXF1YXRpb25NYXJrdXAoIGRvbWFpbiwgc2VyaWVzVHlwZSApO1xyXG4gICAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnQ29tcG9uZW50c0VxdWF0aW9uVGV4dCcsIENvbXBvbmVudHNFcXVhdGlvblRleHQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsbUJBQW1CLE1BQU0sNENBQTRDO0FBQzVFLE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxRQUFRLFFBQVEsbUNBQW1DO0FBQzVELE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0MsY0FBYyxNQUFNLHFDQUFxQztBQUNoRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFFNUQsZUFBZSxNQUFNQyxzQkFBc0IsU0FBU0osUUFBUSxDQUFDO0VBRTNEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsY0FBYyxFQUFFQyxrQkFBa0IsRUFBRUMsT0FBTyxFQUFHO0lBRXpEQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsY0FBYyxZQUFZVCxtQkFBb0IsQ0FBQztJQUNqRVksTUFBTSxJQUFJQSxNQUFNLENBQUVGLGtCQUFrQixZQUFZVixtQkFBb0IsQ0FBQztJQUVyRVcsT0FBTyxHQUFHVCxLQUFLLENBQUU7TUFDZlcsSUFBSSxFQUFFVCxZQUFZLENBQUNVO0lBQ3JCLENBQUMsRUFBRUgsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFLEVBQUUsRUFBRUEsT0FBUSxDQUFDO0lBRXBCVixTQUFTLENBQUNjLFNBQVMsQ0FDakIsQ0FBRU4sY0FBYyxFQUFFQyxrQkFBa0IsQ0FBRSxFQUN0QyxDQUFFTSxNQUFNLEVBQUVDLFVBQVUsS0FBTTtNQUN4QixJQUFJLENBQUNDLE1BQU0sR0FBR2IsY0FBYyxDQUFDYywyQkFBMkIsQ0FBRUgsTUFBTSxFQUFFQyxVQUFXLENBQUM7SUFDaEYsQ0FBRSxDQUFDO0VBQ1A7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUcsT0FBT0EsQ0FBQSxFQUFHO0lBQ1JSLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNRLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWQsa0JBQWtCLENBQUNlLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRWQsc0JBQXVCLENBQUMifQ==