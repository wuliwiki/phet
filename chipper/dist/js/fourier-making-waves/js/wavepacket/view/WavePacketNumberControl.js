// Copyright 2021-2023, University of Colorado Boulder

/**
 * WavePacketNumberControl is the base class for NumberControls in the Wave Packet screen.
 * It adds interactive tick labels, isPressedProperty, and synchronizes its display with the Domain.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import NumberControl from '../../../../scenery-phet/js/NumberControl.js';
import { FireListener } from '../../../../scenery/js/imports.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import FMWConstants from '../../common/FMWConstants.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class WavePacketNumberControl extends NumberControl {
  /**
   * @param {NumberProperty} numberProperty
   * @param {EnumerationProperty.<Domain>} domainProperty
   * @param {Object} [options]
   */
  constructor(numberProperty, domainProperty, options) {
    assert && assert(numberProperty instanceof NumberProperty);
    assert && assert(domainProperty instanceof EnumerationProperty);

    //TODO https://github.com/phetsims/fourier-making-waves/issues/56 add Slider sound
    options = merge({
      tandem: Tandem.REQUIRED
    }, FMWConstants.WAVE_PACKET_NUMBER_CONTROL_OPTIONS, options);

    // The layoutFunction doesn't use the title, so provide empty string.
    super('', numberProperty, numberProperty.range, options);

    // Make tick label interactive, so that pressing on a tick label sets the Property to that value.
    if (options.sliderOptions && options.sliderOptions.majorTicks) {
      options.sliderOptions.majorTicks.forEach(majorTick => {
        if (majorTick.label) {
          const value = majorTick.value;
          const label = majorTick.label;

          // Pressing on a tick's label sets the Property to the value of that tick.
          label.addInputListener(new FireListener({
            fire: () => {
              numberProperty.value = value;
            }
          }));

          //TODO https://github.com/phetsims/sun/issues/712 workaround to support interactive tick labels
          label.pickable = true;
        }
      });
    }

    // @public {DerivedProperty.<boolean>} Whether the user is interacting with this control.
    // This is used to ensure that some controls are mutually exclusive. For example,
    // StandardDeviationControl and ConjugateStandardDeviationControl cannot be used at the same time.
    this.isPressedProperty = new DerivedProperty([this.slider.thumbDragListener.isPressedProperty, this.slider.trackDragListener.isPressedProperty], (thumbIsPressed, trackIsPressed) => thumbIsPressed || trackIsPressed);

    // Subclasses generally provide options.numberDisplayOptions.numberFormatter which tailors the value display to
    // the domain. So when the domain changes, this will cause NumberControl tell its NumberDisplay to call
    // that numberFormatter.
    domainProperty.link(() => this.redrawNumberDisplay());
  }
}
fourierMakingWaves.register('WavePacketNumberControl', WavePacketNumberControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJFbnVtZXJhdGlvblByb3BlcnR5IiwiTnVtYmVyUHJvcGVydHkiLCJtZXJnZSIsIk51bWJlckNvbnRyb2wiLCJGaXJlTGlzdGVuZXIiLCJUYW5kZW0iLCJGTVdDb25zdGFudHMiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJXYXZlUGFja2V0TnVtYmVyQ29udHJvbCIsImNvbnN0cnVjdG9yIiwibnVtYmVyUHJvcGVydHkiLCJkb21haW5Qcm9wZXJ0eSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsIldBVkVfUEFDS0VUX05VTUJFUl9DT05UUk9MX09QVElPTlMiLCJyYW5nZSIsInNsaWRlck9wdGlvbnMiLCJtYWpvclRpY2tzIiwiZm9yRWFjaCIsIm1ham9yVGljayIsImxhYmVsIiwidmFsdWUiLCJhZGRJbnB1dExpc3RlbmVyIiwiZmlyZSIsInBpY2thYmxlIiwiaXNQcmVzc2VkUHJvcGVydHkiLCJzbGlkZXIiLCJ0aHVtYkRyYWdMaXN0ZW5lciIsInRyYWNrRHJhZ0xpc3RlbmVyIiwidGh1bWJJc1ByZXNzZWQiLCJ0cmFja0lzUHJlc3NlZCIsImxpbmsiLCJyZWRyYXdOdW1iZXJEaXNwbGF5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYXZlUGFja2V0TnVtYmVyQ29udHJvbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXYXZlUGFja2V0TnVtYmVyQ29udHJvbCBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgTnVtYmVyQ29udHJvbHMgaW4gdGhlIFdhdmUgUGFja2V0IHNjcmVlbi5cclxuICogSXQgYWRkcyBpbnRlcmFjdGl2ZSB0aWNrIGxhYmVscywgaXNQcmVzc2VkUHJvcGVydHksIGFuZCBzeW5jaHJvbml6ZXMgaXRzIGRpc3BsYXkgd2l0aCB0aGUgRG9tYWluLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTnVtYmVyQ29udHJvbC5qcyc7XHJcbmltcG9ydCB7IEZpcmVMaXN0ZW5lciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBGTVdDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0ZNV0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhdmVQYWNrZXROdW1iZXJDb250cm9sIGV4dGVuZHMgTnVtYmVyQ29udHJvbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyUHJvcGVydHl9IG51bWJlclByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtFbnVtZXJhdGlvblByb3BlcnR5LjxEb21haW4+fSBkb21haW5Qcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbnVtYmVyUHJvcGVydHksIGRvbWFpblByb3BlcnR5LCBvcHRpb25zICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbnVtYmVyUHJvcGVydHkgaW5zdGFuY2VvZiBOdW1iZXJQcm9wZXJ0eSApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZG9tYWluUHJvcGVydHkgaW5zdGFuY2VvZiBFbnVtZXJhdGlvblByb3BlcnR5ICk7XHJcblxyXG4gICAgLy9UT0RPIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9mb3VyaWVyLW1ha2luZy13YXZlcy9pc3N1ZXMvNTYgYWRkIFNsaWRlciBzb3VuZFxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVEXHJcbiAgICB9LCBGTVdDb25zdGFudHMuV0FWRV9QQUNLRVRfTlVNQkVSX0NPTlRST0xfT1BUSU9OUywgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFRoZSBsYXlvdXRGdW5jdGlvbiBkb2Vzbid0IHVzZSB0aGUgdGl0bGUsIHNvIHByb3ZpZGUgZW1wdHkgc3RyaW5nLlxyXG4gICAgc3VwZXIoICcnLCBudW1iZXJQcm9wZXJ0eSwgbnVtYmVyUHJvcGVydHkucmFuZ2UsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBNYWtlIHRpY2sgbGFiZWwgaW50ZXJhY3RpdmUsIHNvIHRoYXQgcHJlc3Npbmcgb24gYSB0aWNrIGxhYmVsIHNldHMgdGhlIFByb3BlcnR5IHRvIHRoYXQgdmFsdWUuXHJcbiAgICBpZiAoIG9wdGlvbnMuc2xpZGVyT3B0aW9ucyAmJiBvcHRpb25zLnNsaWRlck9wdGlvbnMubWFqb3JUaWNrcyApIHtcclxuICAgICAgb3B0aW9ucy5zbGlkZXJPcHRpb25zLm1ham9yVGlja3MuZm9yRWFjaCggbWFqb3JUaWNrID0+IHtcclxuICAgICAgICBpZiAoIG1ham9yVGljay5sYWJlbCApIHtcclxuXHJcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IG1ham9yVGljay52YWx1ZTtcclxuICAgICAgICAgIGNvbnN0IGxhYmVsID0gbWFqb3JUaWNrLmxhYmVsO1xyXG5cclxuICAgICAgICAgIC8vIFByZXNzaW5nIG9uIGEgdGljaydzIGxhYmVsIHNldHMgdGhlIFByb3BlcnR5IHRvIHRoZSB2YWx1ZSBvZiB0aGF0IHRpY2suXHJcbiAgICAgICAgICBsYWJlbC5hZGRJbnB1dExpc3RlbmVyKCBuZXcgRmlyZUxpc3RlbmVyKCB7XHJcbiAgICAgICAgICAgIGZpcmU6ICgpID0+IHsgbnVtYmVyUHJvcGVydHkudmFsdWUgPSB2YWx1ZTsgfVxyXG4gICAgICAgICAgfSApICk7XHJcblxyXG4gICAgICAgICAgLy9UT0RPIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zdW4vaXNzdWVzLzcxMiB3b3JrYXJvdW5kIHRvIHN1cHBvcnQgaW50ZXJhY3RpdmUgdGljayBsYWJlbHNcclxuICAgICAgICAgIGxhYmVsLnBpY2thYmxlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBAcHVibGljIHtEZXJpdmVkUHJvcGVydHkuPGJvb2xlYW4+fSBXaGV0aGVyIHRoZSB1c2VyIGlzIGludGVyYWN0aW5nIHdpdGggdGhpcyBjb250cm9sLlxyXG4gICAgLy8gVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHNvbWUgY29udHJvbHMgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gRm9yIGV4YW1wbGUsXHJcbiAgICAvLyBTdGFuZGFyZERldmlhdGlvbkNvbnRyb2wgYW5kIENvbmp1Z2F0ZVN0YW5kYXJkRGV2aWF0aW9uQ29udHJvbCBjYW5ub3QgYmUgdXNlZCBhdCB0aGUgc2FtZSB0aW1lLlxyXG4gICAgdGhpcy5pc1ByZXNzZWRQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgdGhpcy5zbGlkZXIudGh1bWJEcmFnTGlzdGVuZXIuaXNQcmVzc2VkUHJvcGVydHksIHRoaXMuc2xpZGVyLnRyYWNrRHJhZ0xpc3RlbmVyLmlzUHJlc3NlZFByb3BlcnR5IF0sXHJcbiAgICAgICggdGh1bWJJc1ByZXNzZWQsIHRyYWNrSXNQcmVzc2VkICkgPT4gKCB0aHVtYklzUHJlc3NlZCB8fCB0cmFja0lzUHJlc3NlZCApICk7XHJcblxyXG4gICAgLy8gU3ViY2xhc3NlcyBnZW5lcmFsbHkgcHJvdmlkZSBvcHRpb25zLm51bWJlckRpc3BsYXlPcHRpb25zLm51bWJlckZvcm1hdHRlciB3aGljaCB0YWlsb3JzIHRoZSB2YWx1ZSBkaXNwbGF5IHRvXHJcbiAgICAvLyB0aGUgZG9tYWluLiBTbyB3aGVuIHRoZSBkb21haW4gY2hhbmdlcywgdGhpcyB3aWxsIGNhdXNlIE51bWJlckNvbnRyb2wgdGVsbCBpdHMgTnVtYmVyRGlzcGxheSB0byBjYWxsXHJcbiAgICAvLyB0aGF0IG51bWJlckZvcm1hdHRlci5cclxuICAgIGRvbWFpblByb3BlcnR5LmxpbmsoICgpID0+IHRoaXMucmVkcmF3TnVtYmVyRGlzcGxheSgpICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdXYXZlUGFja2V0TnVtYmVyQ29udHJvbCcsIFdhdmVQYWNrZXROdW1iZXJDb250cm9sICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxtQkFBbUIsTUFBTSw0Q0FBNEM7QUFDNUUsT0FBT0MsY0FBYyxNQUFNLHVDQUF1QztBQUNsRSxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLGFBQWEsTUFBTSw4Q0FBOEM7QUFDeEUsU0FBU0MsWUFBWSxRQUFRLG1DQUFtQztBQUNoRSxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBRTVELGVBQWUsTUFBTUMsdUJBQXVCLFNBQVNMLGFBQWEsQ0FBQztFQUVqRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLGNBQWMsRUFBRUMsY0FBYyxFQUFFQyxPQUFPLEVBQUc7SUFDckRDLE1BQU0sSUFBSUEsTUFBTSxDQUFFSCxjQUFjLFlBQVlULGNBQWUsQ0FBQztJQUM1RFksTUFBTSxJQUFJQSxNQUFNLENBQUVGLGNBQWMsWUFBWVgsbUJBQW9CLENBQUM7O0lBRWpFO0lBQ0FZLE9BQU8sR0FBR1YsS0FBSyxDQUFFO01BQ2ZZLE1BQU0sRUFBRVQsTUFBTSxDQUFDVTtJQUNqQixDQUFDLEVBQUVULFlBQVksQ0FBQ1Usa0NBQWtDLEVBQUVKLE9BQVEsQ0FBQzs7SUFFN0Q7SUFDQSxLQUFLLENBQUUsRUFBRSxFQUFFRixjQUFjLEVBQUVBLGNBQWMsQ0FBQ08sS0FBSyxFQUFFTCxPQUFRLENBQUM7O0lBRTFEO0lBQ0EsSUFBS0EsT0FBTyxDQUFDTSxhQUFhLElBQUlOLE9BQU8sQ0FBQ00sYUFBYSxDQUFDQyxVQUFVLEVBQUc7TUFDL0RQLE9BQU8sQ0FBQ00sYUFBYSxDQUFDQyxVQUFVLENBQUNDLE9BQU8sQ0FBRUMsU0FBUyxJQUFJO1FBQ3JELElBQUtBLFNBQVMsQ0FBQ0MsS0FBSyxFQUFHO1VBRXJCLE1BQU1DLEtBQUssR0FBR0YsU0FBUyxDQUFDRSxLQUFLO1VBQzdCLE1BQU1ELEtBQUssR0FBR0QsU0FBUyxDQUFDQyxLQUFLOztVQUU3QjtVQUNBQSxLQUFLLENBQUNFLGdCQUFnQixDQUFFLElBQUlwQixZQUFZLENBQUU7WUFDeENxQixJQUFJLEVBQUVBLENBQUEsS0FBTTtjQUFFZixjQUFjLENBQUNhLEtBQUssR0FBR0EsS0FBSztZQUFFO1VBQzlDLENBQUUsQ0FBRSxDQUFDOztVQUVMO1VBQ0FELEtBQUssQ0FBQ0ksUUFBUSxHQUFHLElBQUk7UUFDdkI7TUFDRixDQUFFLENBQUM7SUFDTDs7SUFFQTtJQUNBO0lBQ0E7SUFDQSxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUk1QixlQUFlLENBQzFDLENBQUUsSUFBSSxDQUFDNkIsTUFBTSxDQUFDQyxpQkFBaUIsQ0FBQ0YsaUJBQWlCLEVBQUUsSUFBSSxDQUFDQyxNQUFNLENBQUNFLGlCQUFpQixDQUFDSCxpQkFBaUIsQ0FBRSxFQUNwRyxDQUFFSSxjQUFjLEVBQUVDLGNBQWMsS0FBUUQsY0FBYyxJQUFJQyxjQUFpQixDQUFDOztJQUU5RTtJQUNBO0lBQ0E7SUFDQXJCLGNBQWMsQ0FBQ3NCLElBQUksQ0FBRSxNQUFNLElBQUksQ0FBQ0MsbUJBQW1CLENBQUMsQ0FBRSxDQUFDO0VBQ3pEO0FBQ0Y7QUFFQTNCLGtCQUFrQixDQUFDNEIsUUFBUSxDQUFFLHlCQUF5QixFQUFFM0IsdUJBQXdCLENBQUMifQ==