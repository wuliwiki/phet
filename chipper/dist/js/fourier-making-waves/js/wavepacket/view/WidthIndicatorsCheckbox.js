// Copyright 2021-2023, University of Colorado Boulder

/**
 * WidthIndicatorsCheckbox is the checkbox used to show width indicators on the 'Wave Packet' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import { HBox, Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import FMWConstants from '../../common/FMWConstants.js';
import FMWIconFactory from '../../common/view/FMWIconFactory.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import FourierMakingWavesStrings from '../../FourierMakingWavesStrings.js';
export default class WidthIndicatorsCheckbox extends Checkbox {
  /**
   * @param {Property.<boolean>} widthIndicatorsVisibleProperty
   * @param {Object} [options]
   */
  constructor(widthIndicatorsVisibleProperty, options) {
    assert && AssertUtils.assertPropertyOf(widthIndicatorsVisibleProperty, 'boolean');
    options = merge({}, FMWConstants.CHECKBOX_OPTIONS, {
      tandem: Tandem.REQUIRED
    }, options);
    const widthIndicatorsText = new Text(FourierMakingWavesStrings.widthIndicatorsStringProperty, {
      font: FMWConstants.CONTROL_FONT,
      maxWidth: 100,
      tandem: options.tandem.createTandem('widthIndicatorsText')
    });
    const iconNode = FMWIconFactory.createWidthIndicatorsIcon();
    const content = new HBox({
      children: [widthIndicatorsText, iconNode],
      spacing: 10
    });
    super(widthIndicatorsVisibleProperty, content, options);
  }
}
fourierMakingWaves.register('WidthIndicatorsCheckbox', WidthIndicatorsCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFzc2VydFV0aWxzIiwiSEJveCIsIlRleHQiLCJDaGVja2JveCIsIlRhbmRlbSIsIkZNV0NvbnN0YW50cyIsIkZNV0ljb25GYWN0b3J5IiwiZm91cmllck1ha2luZ1dhdmVzIiwiRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncyIsIldpZHRoSW5kaWNhdG9yc0NoZWNrYm94IiwiY29uc3RydWN0b3IiLCJ3aWR0aEluZGljYXRvcnNWaXNpYmxlUHJvcGVydHkiLCJvcHRpb25zIiwiYXNzZXJ0IiwiYXNzZXJ0UHJvcGVydHlPZiIsIkNIRUNLQk9YX09QVElPTlMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsIndpZHRoSW5kaWNhdG9yc1RleHQiLCJ3aWR0aEluZGljYXRvcnNTdHJpbmdQcm9wZXJ0eSIsImZvbnQiLCJDT05UUk9MX0ZPTlQiLCJtYXhXaWR0aCIsImNyZWF0ZVRhbmRlbSIsImljb25Ob2RlIiwiY3JlYXRlV2lkdGhJbmRpY2F0b3JzSWNvbiIsImNvbnRlbnQiLCJjaGlsZHJlbiIsInNwYWNpbmciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldpZHRoSW5kaWNhdG9yc0NoZWNrYm94LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFdpZHRoSW5kaWNhdG9yc0NoZWNrYm94IGlzIHRoZSBjaGVja2JveCB1c2VkIHRvIHNob3cgd2lkdGggaW5kaWNhdG9ycyBvbiB0aGUgJ1dhdmUgUGFja2V0JyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBBc3NlcnRVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL0Fzc2VydFV0aWxzLmpzJztcclxuaW1wb3J0IHsgSEJveCwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgRk1XQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRk1XSWNvbkZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvRk1XSWNvbkZhY3RvcnkuanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcbmltcG9ydCBGb3VyaWVyTWFraW5nV2F2ZXNTdHJpbmdzIGZyb20gJy4uLy4uL0ZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2lkdGhJbmRpY2F0b3JzQ2hlY2tib3ggZXh0ZW5kcyBDaGVja2JveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSB3aWR0aEluZGljYXRvcnNWaXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHdpZHRoSW5kaWNhdG9yc1Zpc2libGVQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgQXNzZXJ0VXRpbHMuYXNzZXJ0UHJvcGVydHlPZiggd2lkdGhJbmRpY2F0b3JzVmlzaWJsZVByb3BlcnR5LCAnYm9vbGVhbicgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCBGTVdDb25zdGFudHMuQ0hFQ0tCT1hfT1BUSU9OUywge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHdpZHRoSW5kaWNhdG9yc1RleHQgPSBuZXcgVGV4dCggRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncy53aWR0aEluZGljYXRvcnNTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBGTVdDb25zdGFudHMuQ09OVFJPTF9GT05ULFxyXG4gICAgICBtYXhXaWR0aDogMTAwLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3dpZHRoSW5kaWNhdG9yc1RleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBpY29uTm9kZSA9IEZNV0ljb25GYWN0b3J5LmNyZWF0ZVdpZHRoSW5kaWNhdG9yc0ljb24oKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFsgd2lkdGhJbmRpY2F0b3JzVGV4dCwgaWNvbk5vZGUgXSxcclxuICAgICAgc3BhY2luZzogMTBcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggd2lkdGhJbmRpY2F0b3JzVmlzaWJsZVByb3BlcnR5LCBjb250ZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdXaWR0aEluZGljYXRvcnNDaGVja2JveCcsIFdpZHRoSW5kaWNhdG9yc0NoZWNrYm94ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLDBDQUEwQztBQUNsRSxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUNyRCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0MsY0FBYyxNQUFNLHFDQUFxQztBQUNoRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MseUJBQXlCLE1BQU0sb0NBQW9DO0FBRTFFLGVBQWUsTUFBTUMsdUJBQXVCLFNBQVNOLFFBQVEsQ0FBQztFQUU1RDtBQUNGO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyw4QkFBOEIsRUFBRUMsT0FBTyxFQUFHO0lBRXJEQyxNQUFNLElBQUliLFdBQVcsQ0FBQ2MsZ0JBQWdCLENBQUVILDhCQUE4QixFQUFFLFNBQVUsQ0FBQztJQUVuRkMsT0FBTyxHQUFHYixLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUVNLFlBQVksQ0FBQ1UsZ0JBQWdCLEVBQUU7TUFDbERDLE1BQU0sRUFBRVosTUFBTSxDQUFDYTtJQUNqQixDQUFDLEVBQUVMLE9BQVEsQ0FBQztJQUVaLE1BQU1NLG1CQUFtQixHQUFHLElBQUloQixJQUFJLENBQUVNLHlCQUF5QixDQUFDVyw2QkFBNkIsRUFBRTtNQUM3RkMsSUFBSSxFQUFFZixZQUFZLENBQUNnQixZQUFZO01BQy9CQyxRQUFRLEVBQUUsR0FBRztNQUNiTixNQUFNLEVBQUVKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDTyxZQUFZLENBQUUscUJBQXNCO0lBQzdELENBQUUsQ0FBQztJQUVILE1BQU1DLFFBQVEsR0FBR2xCLGNBQWMsQ0FBQ21CLHlCQUF5QixDQUFDLENBQUM7SUFFM0QsTUFBTUMsT0FBTyxHQUFHLElBQUl6QixJQUFJLENBQUU7TUFDeEIwQixRQUFRLEVBQUUsQ0FBRVQsbUJBQW1CLEVBQUVNLFFBQVEsQ0FBRTtNQUMzQ0ksT0FBTyxFQUFFO0lBQ1gsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFakIsOEJBQThCLEVBQUVlLE9BQU8sRUFBRWQsT0FBUSxDQUFDO0VBQzNEO0FBQ0Y7QUFFQUwsa0JBQWtCLENBQUNzQixRQUFRLENBQUUseUJBQXlCLEVBQUVwQix1QkFBd0IsQ0FBQyJ9