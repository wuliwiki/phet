// Copyright 2021-2023, University of Colorado Boulder

/**
 * CaliperCheckbox is a checkbox for changing the visibility of measurement tools that look like calipers.
 * It shows a small calipers icon, and a label changes dynamically to match the Domain.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import Multilink from '../../../../axon/js/Multilink.js';
import merge from '../../../../phet-core/js/merge.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import FMWConstants from '../../common/FMWConstants.js';
import Domain from '../../common/model/Domain.js';
import CalipersNode from '../../common/view/CalipersNode.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class CaliperCheckbox extends Checkbox {
  /**
   * @param {Property.<boolean>} visibleProperty
   * @param {EnumerationProperty.<Domain>} domainProperty
   * @param {TReadOnlyProperty.<string>} spaceSymbolStringProperty
   * @param {TReadOnlyProperty.<string>} timeSymbolStringProperty
   * @param {Object} [options]
   */
  constructor(visibleProperty, domainProperty, spaceSymbolStringProperty, timeSymbolStringProperty, options) {
    assert && AssertUtils.assertPropertyOf(visibleProperty, 'boolean');
    assert && assert(domainProperty instanceof EnumerationProperty);
    options = merge({}, FMWConstants.CHECKBOX_OPTIONS, {
      calipersNodeOptions: {
        measuredWidth: 65,
        labelPosition: 'left',
        // put label to left of caliper, to minimize vertical space
        scale: 0.5,
        richTextOptions: {
          font: new PhetFont(25)
        }
      },
      // phet-io options
      tandem: Tandem.REQUIRED
    }, options);
    const caliperNode = new CalipersNode(options.calipersNodeOptions);
    Multilink.multilink([domainProperty, spaceSymbolStringProperty, timeSymbolStringProperty], (domain, spaceSymbol, timeSymbol) => caliperNode.setLabel(domain === Domain.SPACE ? spaceSymbol : timeSymbol));
    super(visibleProperty, caliperNode, options);
  }
}
fourierMakingWaves.register('CaliperCheckbox', CaliperCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvblByb3BlcnR5IiwiTXVsdGlsaW5rIiwibWVyZ2UiLCJBc3NlcnRVdGlscyIsIlBoZXRGb250IiwiQ2hlY2tib3giLCJUYW5kZW0iLCJGTVdDb25zdGFudHMiLCJEb21haW4iLCJDYWxpcGVyc05vZGUiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJDYWxpcGVyQ2hlY2tib3giLCJjb25zdHJ1Y3RvciIsInZpc2libGVQcm9wZXJ0eSIsImRvbWFpblByb3BlcnR5Iiwic3BhY2VTeW1ib2xTdHJpbmdQcm9wZXJ0eSIsInRpbWVTeW1ib2xTdHJpbmdQcm9wZXJ0eSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJhc3NlcnRQcm9wZXJ0eU9mIiwiQ0hFQ0tCT1hfT1BUSU9OUyIsImNhbGlwZXJzTm9kZU9wdGlvbnMiLCJtZWFzdXJlZFdpZHRoIiwibGFiZWxQb3NpdGlvbiIsInNjYWxlIiwicmljaFRleHRPcHRpb25zIiwiZm9udCIsInRhbmRlbSIsIlJFUVVJUkVEIiwiY2FsaXBlck5vZGUiLCJtdWx0aWxpbmsiLCJkb21haW4iLCJzcGFjZVN5bWJvbCIsInRpbWVTeW1ib2wiLCJzZXRMYWJlbCIsIlNQQUNFIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDYWxpcGVyQ2hlY2tib3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2FsaXBlckNoZWNrYm94IGlzIGEgY2hlY2tib3ggZm9yIGNoYW5naW5nIHRoZSB2aXNpYmlsaXR5IG9mIG1lYXN1cmVtZW50IHRvb2xzIHRoYXQgbG9vayBsaWtlIGNhbGlwZXJzLlxyXG4gKiBJdCBzaG93cyBhIHNtYWxsIGNhbGlwZXJzIGljb24sIGFuZCBhIGxhYmVsIGNoYW5nZXMgZHluYW1pY2FsbHkgdG8gbWF0Y2ggdGhlIERvbWFpbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBBc3NlcnRVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL0Fzc2VydFV0aWxzLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgRk1XQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Eb21haW4uanMnO1xyXG5pbXBvcnQgQ2FsaXBlcnNOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0NhbGlwZXJzTm9kZS5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbGlwZXJDaGVja2JveCBleHRlbmRzIENoZWNrYm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHZpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7RW51bWVyYXRpb25Qcm9wZXJ0eS48RG9tYWluPn0gZG9tYWluUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1RSZWFkT25seVByb3BlcnR5LjxzdHJpbmc+fSBzcGFjZVN5bWJvbFN0cmluZ1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHtUUmVhZE9ubHlQcm9wZXJ0eS48c3RyaW5nPn0gdGltZVN5bWJvbFN0cmluZ1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB2aXNpYmxlUHJvcGVydHksIGRvbWFpblByb3BlcnR5LCBzcGFjZVN5bWJvbFN0cmluZ1Byb3BlcnR5LCB0aW1lU3ltYm9sU3RyaW5nUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIEFzc2VydFV0aWxzLmFzc2VydFByb3BlcnR5T2YoIHZpc2libGVQcm9wZXJ0eSwgJ2Jvb2xlYW4nICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBkb21haW5Qcm9wZXJ0eSBpbnN0YW5jZW9mIEVudW1lcmF0aW9uUHJvcGVydHkgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCBGTVdDb25zdGFudHMuQ0hFQ0tCT1hfT1BUSU9OUywge1xyXG4gICAgICBjYWxpcGVyc05vZGVPcHRpb25zOiB7XHJcbiAgICAgICAgbWVhc3VyZWRXaWR0aDogNjUsXHJcbiAgICAgICAgbGFiZWxQb3NpdGlvbjogJ2xlZnQnLCAvLyBwdXQgbGFiZWwgdG8gbGVmdCBvZiBjYWxpcGVyLCB0byBtaW5pbWl6ZSB2ZXJ0aWNhbCBzcGFjZVxyXG4gICAgICAgIHNjYWxlOiAwLjUsXHJcbiAgICAgICAgcmljaFRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDI1IClcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBwaGV0LWlvIG9wdGlvbnNcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBjYWxpcGVyTm9kZSA9IG5ldyBDYWxpcGVyc05vZGUoIG9wdGlvbnMuY2FsaXBlcnNOb2RlT3B0aW9ucyApO1xyXG5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoXHJcbiAgICAgIFsgZG9tYWluUHJvcGVydHksIHNwYWNlU3ltYm9sU3RyaW5nUHJvcGVydHksIHRpbWVTeW1ib2xTdHJpbmdQcm9wZXJ0eSBdLFxyXG4gICAgICAoIGRvbWFpbiwgc3BhY2VTeW1ib2wsIHRpbWVTeW1ib2wgKSA9PlxyXG4gICAgICAgIGNhbGlwZXJOb2RlLnNldExhYmVsKCAoIGRvbWFpbiA9PT0gRG9tYWluLlNQQUNFICkgPyBzcGFjZVN5bWJvbCA6IHRpbWVTeW1ib2wgKVxyXG4gICAgKTtcclxuXHJcbiAgICBzdXBlciggdmlzaWJsZVByb3BlcnR5LCBjYWxpcGVyTm9kZSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZm91cmllck1ha2luZ1dhdmVzLnJlZ2lzdGVyKCAnQ2FsaXBlckNoZWNrYm94JywgQ2FsaXBlckNoZWNrYm94ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsbUJBQW1CLE1BQU0sNENBQTRDO0FBQzVFLE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxXQUFXLE1BQU0sMENBQTBDO0FBQ2xFLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUNyRCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxZQUFZLE1BQU0sbUNBQW1DO0FBQzVELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUU1RCxlQUFlLE1BQU1DLGVBQWUsU0FBU04sUUFBUSxDQUFDO0VBRXBEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VPLFdBQVdBLENBQUVDLGVBQWUsRUFBRUMsY0FBYyxFQUFFQyx5QkFBeUIsRUFBRUMsd0JBQXdCLEVBQUVDLE9BQU8sRUFBRztJQUUzR0MsTUFBTSxJQUFJZixXQUFXLENBQUNnQixnQkFBZ0IsQ0FBRU4sZUFBZSxFQUFFLFNBQVUsQ0FBQztJQUNwRUssTUFBTSxJQUFJQSxNQUFNLENBQUVKLGNBQWMsWUFBWWQsbUJBQW9CLENBQUM7SUFFakVpQixPQUFPLEdBQUdmLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRUssWUFBWSxDQUFDYSxnQkFBZ0IsRUFBRTtNQUNsREMsbUJBQW1CLEVBQUU7UUFDbkJDLGFBQWEsRUFBRSxFQUFFO1FBQ2pCQyxhQUFhLEVBQUUsTUFBTTtRQUFFO1FBQ3ZCQyxLQUFLLEVBQUUsR0FBRztRQUNWQyxlQUFlLEVBQUU7VUFDZkMsSUFBSSxFQUFFLElBQUl0QixRQUFRLENBQUUsRUFBRztRQUN6QjtNQUNGLENBQUM7TUFFRDtNQUNBdUIsTUFBTSxFQUFFckIsTUFBTSxDQUFDc0I7SUFDakIsQ0FBQyxFQUFFWCxPQUFRLENBQUM7SUFFWixNQUFNWSxXQUFXLEdBQUcsSUFBSXBCLFlBQVksQ0FBRVEsT0FBTyxDQUFDSSxtQkFBb0IsQ0FBQztJQUVuRXBCLFNBQVMsQ0FBQzZCLFNBQVMsQ0FDakIsQ0FBRWhCLGNBQWMsRUFBRUMseUJBQXlCLEVBQUVDLHdCQUF3QixDQUFFLEVBQ3ZFLENBQUVlLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxVQUFVLEtBQy9CSixXQUFXLENBQUNLLFFBQVEsQ0FBSUgsTUFBTSxLQUFLdkIsTUFBTSxDQUFDMkIsS0FBSyxHQUFLSCxXQUFXLEdBQUdDLFVBQVcsQ0FDakYsQ0FBQztJQUVELEtBQUssQ0FBRXBCLGVBQWUsRUFBRWdCLFdBQVcsRUFBRVosT0FBUSxDQUFDO0VBQ2hEO0FBQ0Y7QUFFQVAsa0JBQWtCLENBQUMwQixRQUFRLENBQUUsaUJBQWlCLEVBQUV6QixlQUFnQixDQUFDIn0=