// Copyright 2021-2023, University of Colorado Boulder

/**
 * FourierComponent is the model of a Fourier component for the Wave Packet screen.
 * In the Discrete and Wave Game screens, we used Harmonic, a much richer implementation.
 * That implementation is overly-complicated for the Wave Packet screen, and we need something more
 * lightweight due to the large number of components.
 *
 * A Fourier component was originally modeled as a Vector2. But FourierComponent is more aligned with MVC pattern -
 * we can refer to waveNumber and amplitude (model properties), instead of Vector2's x and y (view properties).
 * This improves the code and the PhET-iO API.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
export default class FourierComponent {
  /**
   * @param waveNumber - k is spatial wave number in rad/m, omega is angular wave number in rad/ms
   * @param amplitude - unitless
   */
  constructor(waveNumber, amplitude) {
    assert && assert(waveNumber >= 0);
    assert && assert(amplitude >= 0);
    this.waveNumber = waveNumber;
    this.amplitude = amplitude;
  }

  // FourierComponentIO is patterned after Vector2IO.
  static FourierComponentIO = new IOType('FourierComponentIO', {
    valueType: FourierComponent,
    documentation: 'Component of a Fourier series',
    stateSchema: {
      waveNumber: NumberIO,
      amplitude: NumberIO
    },
    toStateObject: fourierComponent => {
      return {
        waveNumber: fourierComponent.waveNumber,
        amplitude: fourierComponent.amplitude
      };
    },
    fromStateObject: stateObject => new FourierComponent(stateObject.waveNumber, stateObject.amplitude)
  });
}
fourierMakingWaves.register('FourierComponent', FourierComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJOdW1iZXJJTyIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkZvdXJpZXJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsIndhdmVOdW1iZXIiLCJhbXBsaXR1ZGUiLCJhc3NlcnQiLCJGb3VyaWVyQ29tcG9uZW50SU8iLCJ2YWx1ZVR5cGUiLCJkb2N1bWVudGF0aW9uIiwic3RhdGVTY2hlbWEiLCJ0b1N0YXRlT2JqZWN0IiwiZm91cmllckNvbXBvbmVudCIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGb3VyaWVyQ29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZvdXJpZXJDb21wb25lbnQgaXMgdGhlIG1vZGVsIG9mIGEgRm91cmllciBjb21wb25lbnQgZm9yIHRoZSBXYXZlIFBhY2tldCBzY3JlZW4uXHJcbiAqIEluIHRoZSBEaXNjcmV0ZSBhbmQgV2F2ZSBHYW1lIHNjcmVlbnMsIHdlIHVzZWQgSGFybW9uaWMsIGEgbXVjaCByaWNoZXIgaW1wbGVtZW50YXRpb24uXHJcbiAqIFRoYXQgaW1wbGVtZW50YXRpb24gaXMgb3Zlcmx5LWNvbXBsaWNhdGVkIGZvciB0aGUgV2F2ZSBQYWNrZXQgc2NyZWVuLCBhbmQgd2UgbmVlZCBzb21ldGhpbmcgbW9yZVxyXG4gKiBsaWdodHdlaWdodCBkdWUgdG8gdGhlIGxhcmdlIG51bWJlciBvZiBjb21wb25lbnRzLlxyXG4gKlxyXG4gKiBBIEZvdXJpZXIgY29tcG9uZW50IHdhcyBvcmlnaW5hbGx5IG1vZGVsZWQgYXMgYSBWZWN0b3IyLiBCdXQgRm91cmllckNvbXBvbmVudCBpcyBtb3JlIGFsaWduZWQgd2l0aCBNVkMgcGF0dGVybiAtXHJcbiAqIHdlIGNhbiByZWZlciB0byB3YXZlTnVtYmVyIGFuZCBhbXBsaXR1ZGUgKG1vZGVsIHByb3BlcnRpZXMpLCBpbnN0ZWFkIG9mIFZlY3RvcjIncyB4IGFuZCB5ICh2aWV3IHByb3BlcnRpZXMpLlxyXG4gKiBUaGlzIGltcHJvdmVzIHRoZSBjb2RlIGFuZCB0aGUgUGhFVC1pTyBBUEkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvdXJpZXJDb21wb25lbnQge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgd2F2ZU51bWJlcjogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBhbXBsaXR1ZGU6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHdhdmVOdW1iZXIgLSBrIGlzIHNwYXRpYWwgd2F2ZSBudW1iZXIgaW4gcmFkL20sIG9tZWdhIGlzIGFuZ3VsYXIgd2F2ZSBudW1iZXIgaW4gcmFkL21zXHJcbiAgICogQHBhcmFtIGFtcGxpdHVkZSAtIHVuaXRsZXNzXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB3YXZlTnVtYmVyOiBudW1iZXIsIGFtcGxpdHVkZTogbnVtYmVyICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggd2F2ZU51bWJlciA+PSAwICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBhbXBsaXR1ZGUgPj0gMCApO1xyXG5cclxuICAgIHRoaXMud2F2ZU51bWJlciA9IHdhdmVOdW1iZXI7XHJcbiAgICB0aGlzLmFtcGxpdHVkZSA9IGFtcGxpdHVkZTtcclxuICB9XHJcblxyXG4gIC8vIEZvdXJpZXJDb21wb25lbnRJTyBpcyBwYXR0ZXJuZWQgYWZ0ZXIgVmVjdG9yMklPLlxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRm91cmllckNvbXBvbmVudElPID0gbmV3IElPVHlwZSggJ0ZvdXJpZXJDb21wb25lbnRJTycsIHtcclxuICAgIHZhbHVlVHlwZTogRm91cmllckNvbXBvbmVudCxcclxuICAgIGRvY3VtZW50YXRpb246ICdDb21wb25lbnQgb2YgYSBGb3VyaWVyIHNlcmllcycsXHJcbiAgICBzdGF0ZVNjaGVtYToge1xyXG4gICAgICB3YXZlTnVtYmVyOiBOdW1iZXJJTyxcclxuICAgICAgYW1wbGl0dWRlOiBOdW1iZXJJT1xyXG4gICAgfSxcclxuICAgIHRvU3RhdGVPYmplY3Q6IGZvdXJpZXJDb21wb25lbnQgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHdhdmVOdW1iZXI6IGZvdXJpZXJDb21wb25lbnQud2F2ZU51bWJlcixcclxuICAgICAgICBhbXBsaXR1ZGU6IGZvdXJpZXJDb21wb25lbnQuYW1wbGl0dWRlXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZnJvbVN0YXRlT2JqZWN0OiBzdGF0ZU9iamVjdCA9PiBuZXcgRm91cmllckNvbXBvbmVudCggc3RhdGVPYmplY3Qud2F2ZU51bWJlciwgc3RhdGVPYmplY3QuYW1wbGl0dWRlIClcclxuICB9ICk7XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ0ZvdXJpZXJDb21wb25lbnQnLCBGb3VyaWVyQ29tcG9uZW50ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLHVDQUF1QztBQUMxRCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUU1RCxlQUFlLE1BQU1DLGdCQUFnQixDQUFDO0VBS3BDO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLFVBQWtCLEVBQUVDLFNBQWlCLEVBQUc7SUFDMURDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixVQUFVLElBQUksQ0FBRSxDQUFDO0lBQ25DRSxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsU0FBUyxJQUFJLENBQUUsQ0FBQztJQUVsQyxJQUFJLENBQUNELFVBQVUsR0FBR0EsVUFBVTtJQUM1QixJQUFJLENBQUNDLFNBQVMsR0FBR0EsU0FBUztFQUM1Qjs7RUFFQTtFQUNBLE9BQXVCRSxrQkFBa0IsR0FBRyxJQUFJUixNQUFNLENBQUUsb0JBQW9CLEVBQUU7SUFDNUVTLFNBQVMsRUFBRU4sZ0JBQWdCO0lBQzNCTyxhQUFhLEVBQUUsK0JBQStCO0lBQzlDQyxXQUFXLEVBQUU7TUFDWE4sVUFBVSxFQUFFSixRQUFRO01BQ3BCSyxTQUFTLEVBQUVMO0lBQ2IsQ0FBQztJQUNEVyxhQUFhLEVBQUVDLGdCQUFnQixJQUFJO01BQ2pDLE9BQU87UUFDTFIsVUFBVSxFQUFFUSxnQkFBZ0IsQ0FBQ1IsVUFBVTtRQUN2Q0MsU0FBUyxFQUFFTyxnQkFBZ0IsQ0FBQ1A7TUFDOUIsQ0FBQztJQUNILENBQUM7SUFDRFEsZUFBZSxFQUFFQyxXQUFXLElBQUksSUFBSVosZ0JBQWdCLENBQUVZLFdBQVcsQ0FBQ1YsVUFBVSxFQUFFVSxXQUFXLENBQUNULFNBQVU7RUFDdEcsQ0FBRSxDQUFDO0FBQ0w7QUFFQUosa0JBQWtCLENBQUNjLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRWIsZ0JBQWlCLENBQUMifQ==