// Copyright 2021-2023, University of Colorado Boulder

/**
 * AnswersNode is used to show the answers in the Wave Game when the ?showAnswers query parameter is present.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import ChartTransform from '../../../../bamboo/js/ChartTransform.js';
import Utils from '../../../../dot/js/Utils.js';
import merge from '../../../../phet-core/js/merge.js';
import NumberDisplay from '../../../../scenery-phet/js/NumberDisplay.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node } from '../../../../scenery/js/imports.js';
import FMWConstants from '../../common/FMWConstants.js';
import FourierSeries from '../../common/model/FourierSeries.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';

// constants
const NUMBER_DISPLAY_OPTIONS = {
  align: 'center',
  xMargin: 0,
  yMargin: 0,
  backgroundFill: null,
  backgroundStroke: null,
  textOptions: {
    font: new PhetFont(12),
    fill: 'red'
  },
  // Do not display zero-amplitude values.
  numberFormatter: amplitude => amplitude === 0 ? '' : Utils.toFixed(amplitude, FMWConstants.WAVE_GAME_AMPLITUDE_DECIMAL_PLACES)
};
export default class AnswersNode extends Node {
  /**
   * @param {ChartTransform} chartTransform - transform for the Amplitudes chart
   * @param {FourierSeries} answerSeries - answer to the challenge
   * @param {Object} [options]
   */
  constructor(chartTransform, answerSeries, options) {
    assert && assert(chartTransform instanceof ChartTransform);
    assert && assert(answerSeries instanceof FourierSeries);
    options = merge({}, options);

    // Add a NumberDisplay for each harmonic's amplitudeProperty, horizontally centered under its associated slider.
    const numberDisplays = answerSeries.harmonics.map((harmonic, index) => new NumberDisplay(harmonic.amplitudeProperty, answerSeries.amplitudeRange, merge({
      centerX: chartTransform.modelToViewX(index + 1)
    }, NUMBER_DISPLAY_OPTIONS)));
    assert && assert(!options.children, 'AnswersNode sets children');
    options.children = numberDisplays;
    super(options);
  }
}
fourierMakingWaves.register('AnswersNode', AnswersNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGFydFRyYW5zZm9ybSIsIlV0aWxzIiwibWVyZ2UiLCJOdW1iZXJEaXNwbGF5IiwiUGhldEZvbnQiLCJOb2RlIiwiRk1XQ29uc3RhbnRzIiwiRm91cmllclNlcmllcyIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIk5VTUJFUl9ESVNQTEFZX09QVElPTlMiLCJhbGlnbiIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiYmFja2dyb3VuZEZpbGwiLCJiYWNrZ3JvdW5kU3Ryb2tlIiwidGV4dE9wdGlvbnMiLCJmb250IiwiZmlsbCIsIm51bWJlckZvcm1hdHRlciIsImFtcGxpdHVkZSIsInRvRml4ZWQiLCJXQVZFX0dBTUVfQU1QTElUVURFX0RFQ0lNQUxfUExBQ0VTIiwiQW5zd2Vyc05vZGUiLCJjb25zdHJ1Y3RvciIsImNoYXJ0VHJhbnNmb3JtIiwiYW5zd2VyU2VyaWVzIiwib3B0aW9ucyIsImFzc2VydCIsIm51bWJlckRpc3BsYXlzIiwiaGFybW9uaWNzIiwibWFwIiwiaGFybW9uaWMiLCJpbmRleCIsImFtcGxpdHVkZVByb3BlcnR5IiwiYW1wbGl0dWRlUmFuZ2UiLCJjZW50ZXJYIiwibW9kZWxUb1ZpZXdYIiwiY2hpbGRyZW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkFuc3dlcnNOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEFuc3dlcnNOb2RlIGlzIHVzZWQgdG8gc2hvdyB0aGUgYW5zd2VycyBpbiB0aGUgV2F2ZSBHYW1lIHdoZW4gdGhlID9zaG93QW5zd2VycyBxdWVyeSBwYXJhbWV0ZXIgaXMgcHJlc2VudC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQ2hhcnRUcmFuc2Zvcm0gZnJvbSAnLi4vLi4vLi4vLi4vYmFtYm9vL2pzL0NoYXJ0VHJhbnNmb3JtLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgTnVtYmVyRGlzcGxheSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTnVtYmVyRGlzcGxheS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEZNV0NvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vRk1XQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEZvdXJpZXJTZXJpZXMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0ZvdXJpZXJTZXJpZXMuanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTlVNQkVSX0RJU1BMQVlfT1BUSU9OUyA9IHtcclxuICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgeE1hcmdpbjogMCxcclxuICB5TWFyZ2luOiAwLFxyXG4gIGJhY2tncm91bmRGaWxsOiBudWxsLFxyXG4gIGJhY2tncm91bmRTdHJva2U6IG51bGwsXHJcbiAgdGV4dE9wdGlvbnM6IHtcclxuICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTIgKSxcclxuICAgIGZpbGw6ICdyZWQnXHJcbiAgfSxcclxuXHJcbiAgLy8gRG8gbm90IGRpc3BsYXkgemVyby1hbXBsaXR1ZGUgdmFsdWVzLlxyXG4gIG51bWJlckZvcm1hdHRlcjogYW1wbGl0dWRlID0+XHJcbiAgICAoIGFtcGxpdHVkZSA9PT0gMCApID8gJycgOiBVdGlscy50b0ZpeGVkKCBhbXBsaXR1ZGUsIEZNV0NvbnN0YW50cy5XQVZFX0dBTUVfQU1QTElUVURFX0RFQ0lNQUxfUExBQ0VTIClcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuc3dlcnNOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q2hhcnRUcmFuc2Zvcm19IGNoYXJ0VHJhbnNmb3JtIC0gdHJhbnNmb3JtIGZvciB0aGUgQW1wbGl0dWRlcyBjaGFydFxyXG4gICAqIEBwYXJhbSB7Rm91cmllclNlcmllc30gYW5zd2VyU2VyaWVzIC0gYW5zd2VyIHRvIHRoZSBjaGFsbGVuZ2VcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNoYXJ0VHJhbnNmb3JtLCBhbnN3ZXJTZXJpZXMsIG9wdGlvbnMgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjaGFydFRyYW5zZm9ybSBpbnN0YW5jZW9mIENoYXJ0VHJhbnNmb3JtICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBhbnN3ZXJTZXJpZXMgaW5zdGFuY2VvZiBGb3VyaWVyU2VyaWVzICk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7fSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEFkZCBhIE51bWJlckRpc3BsYXkgZm9yIGVhY2ggaGFybW9uaWMncyBhbXBsaXR1ZGVQcm9wZXJ0eSwgaG9yaXpvbnRhbGx5IGNlbnRlcmVkIHVuZGVyIGl0cyBhc3NvY2lhdGVkIHNsaWRlci5cclxuICAgIGNvbnN0IG51bWJlckRpc3BsYXlzID0gYW5zd2VyU2VyaWVzLmhhcm1vbmljcy5tYXAoICggaGFybW9uaWMsIGluZGV4ICkgPT5cclxuICAgICAgbmV3IE51bWJlckRpc3BsYXkoIGhhcm1vbmljLmFtcGxpdHVkZVByb3BlcnR5LCBhbnN3ZXJTZXJpZXMuYW1wbGl0dWRlUmFuZ2UsXHJcbiAgICAgICAgbWVyZ2UoIHtcclxuICAgICAgICAgIGNlbnRlclg6IGNoYXJ0VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggaW5kZXggKyAxIClcclxuICAgICAgICB9LCBOVU1CRVJfRElTUExBWV9PUFRJT05TICkgKVxyXG4gICAgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5jaGlsZHJlbiwgJ0Fuc3dlcnNOb2RlIHNldHMgY2hpbGRyZW4nICk7XHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gbnVtYmVyRGlzcGxheXM7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ0Fuc3dlcnNOb2RlJywgQW5zd2Vyc05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHlDQUF5QztBQUNwRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsYUFBYSxNQUFNLDhDQUE4QztBQUN4RSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQUN2RCxPQUFPQyxhQUFhLE1BQU0scUNBQXFDO0FBQy9ELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2Qjs7QUFFNUQ7QUFDQSxNQUFNQyxzQkFBc0IsR0FBRztFQUM3QkMsS0FBSyxFQUFFLFFBQVE7RUFDZkMsT0FBTyxFQUFFLENBQUM7RUFDVkMsT0FBTyxFQUFFLENBQUM7RUFDVkMsY0FBYyxFQUFFLElBQUk7RUFDcEJDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLFdBQVcsRUFBRTtJQUNYQyxJQUFJLEVBQUUsSUFBSVosUUFBUSxDQUFFLEVBQUcsQ0FBQztJQUN4QmEsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUVEO0VBQ0FDLGVBQWUsRUFBRUMsU0FBUyxJQUN0QkEsU0FBUyxLQUFLLENBQUMsR0FBSyxFQUFFLEdBQUdsQixLQUFLLENBQUNtQixPQUFPLENBQUVELFNBQVMsRUFBRWIsWUFBWSxDQUFDZSxrQ0FBbUM7QUFDekcsQ0FBQztBQUVELGVBQWUsTUFBTUMsV0FBVyxTQUFTakIsSUFBSSxDQUFDO0VBRTVDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRWtCLFdBQVdBLENBQUVDLGNBQWMsRUFBRUMsWUFBWSxFQUFFQyxPQUFPLEVBQUc7SUFDbkRDLE1BQU0sSUFBSUEsTUFBTSxDQUFFSCxjQUFjLFlBQVl4QixjQUFlLENBQUM7SUFDNUQyQixNQUFNLElBQUlBLE1BQU0sQ0FBRUYsWUFBWSxZQUFZbEIsYUFBYyxDQUFDO0lBRXpEbUIsT0FBTyxHQUFHeEIsS0FBSyxDQUFFLENBQUMsQ0FBQyxFQUFFd0IsT0FBUSxDQUFDOztJQUU5QjtJQUNBLE1BQU1FLGNBQWMsR0FBR0gsWUFBWSxDQUFDSSxTQUFTLENBQUNDLEdBQUcsQ0FBRSxDQUFFQyxRQUFRLEVBQUVDLEtBQUssS0FDbEUsSUFBSTdCLGFBQWEsQ0FBRTRCLFFBQVEsQ0FBQ0UsaUJBQWlCLEVBQUVSLFlBQVksQ0FBQ1MsY0FBYyxFQUN4RWhDLEtBQUssQ0FBRTtNQUNMaUMsT0FBTyxFQUFFWCxjQUFjLENBQUNZLFlBQVksQ0FBRUosS0FBSyxHQUFHLENBQUU7SUFDbEQsQ0FBQyxFQUFFdkIsc0JBQXVCLENBQUUsQ0FDaEMsQ0FBQztJQUVEa0IsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0QsT0FBTyxDQUFDVyxRQUFRLEVBQUUsMkJBQTRCLENBQUM7SUFDbEVYLE9BQU8sQ0FBQ1csUUFBUSxHQUFHVCxjQUFjO0lBRWpDLEtBQUssQ0FBRUYsT0FBUSxDQUFDO0VBQ2xCO0FBQ0Y7QUFFQWxCLGtCQUFrQixDQUFDOEIsUUFBUSxDQUFFLGFBQWEsRUFBRWhCLFdBQVksQ0FBQyJ9