// Copyright 2021-2023, University of Colorado Boulder

/**
 * WaveGameInfoDialog describes the game levels in the 'Wave Game' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import GameInfoDialog from '../../../../vegas/js/GameInfoDialog.js';
import FMWQueryParameters from '../../common/FMWQueryParameters.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import FourierMakingWavesStrings from '../../FourierMakingWavesStrings.js';
export default class WaveGameInfoDialog extends GameInfoDialog {
  /**
   * @param {WaveGameLevel[]} levels
   * @param {Object} [options]
   */
  constructor(levels, options) {
    options = merge({
      gameLevels: FMWQueryParameters.gameLevels,
      ySpacing: 20,
      bottomMargin: 20,
      // phet-io
      tandem: Tandem.REQUIRED,
      phetioReadOnly: true
    }, options);
    assert && assert(!options.title, 'WaveGameInfoDialog sets title');
    options.title = new Text(FourierMakingWavesStrings.levelsStringProperty, {
      font: new PhetFont(32),
      tandem: options.tandem.createTandem('titleText')
    });
    const descriptions = levels.map(level => level.infoDialogDescriptionProperty);
    super(descriptions, options);
  }
}
fourierMakingWaves.register('WaveGameInfoDialog', WaveGameInfoDialog);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiVGV4dCIsIlRhbmRlbSIsIkdhbWVJbmZvRGlhbG9nIiwiRk1XUXVlcnlQYXJhbWV0ZXJzIiwiZm91cmllck1ha2luZ1dhdmVzIiwiRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncyIsIldhdmVHYW1lSW5mb0RpYWxvZyIsImNvbnN0cnVjdG9yIiwibGV2ZWxzIiwib3B0aW9ucyIsImdhbWVMZXZlbHMiLCJ5U3BhY2luZyIsImJvdHRvbU1hcmdpbiIsInRhbmRlbSIsIlJFUVVJUkVEIiwicGhldGlvUmVhZE9ubHkiLCJhc3NlcnQiLCJ0aXRsZSIsImxldmVsc1N0cmluZ1Byb3BlcnR5IiwiZm9udCIsImNyZWF0ZVRhbmRlbSIsImRlc2NyaXB0aW9ucyIsIm1hcCIsImxldmVsIiwiaW5mb0RpYWxvZ0Rlc2NyaXB0aW9uUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldhdmVHYW1lSW5mb0RpYWxvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXYXZlR2FtZUluZm9EaWFsb2cgZGVzY3JpYmVzIHRoZSBnYW1lIGxldmVscyBpbiB0aGUgJ1dhdmUgR2FtZScgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHYW1lSW5mb0RpYWxvZyBmcm9tICcuLi8uLi8uLi8uLi92ZWdhcy9qcy9HYW1lSW5mb0RpYWxvZy5qcyc7XHJcbmltcG9ydCBGTVdRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vLi4vY29tbW9uL0ZNV1F1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuaW1wb3J0IEZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MgZnJvbSAnLi4vLi4vRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXZlR2FtZUluZm9EaWFsb2cgZXh0ZW5kcyBHYW1lSW5mb0RpYWxvZyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7V2F2ZUdhbWVMZXZlbFtdfSBsZXZlbHNcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGxldmVscywgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgZ2FtZUxldmVsczogRk1XUXVlcnlQYXJhbWV0ZXJzLmdhbWVMZXZlbHMsXHJcbiAgICAgIHlTcGFjaW5nOiAyMCxcclxuICAgICAgYm90dG9tTWFyZ2luOiAyMCxcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMudGl0bGUsICdXYXZlR2FtZUluZm9EaWFsb2cgc2V0cyB0aXRsZScgKTtcclxuICAgIG9wdGlvbnMudGl0bGUgPSBuZXcgVGV4dCggRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncy5sZXZlbHNTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDMyICksXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndGl0bGVUZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgZGVzY3JpcHRpb25zID0gbGV2ZWxzLm1hcCggbGV2ZWwgPT4gbGV2ZWwuaW5mb0RpYWxvZ0Rlc2NyaXB0aW9uUHJvcGVydHkgKTtcclxuXHJcbiAgICBzdXBlciggZGVzY3JpcHRpb25zLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mb3VyaWVyTWFraW5nV2F2ZXMucmVnaXN0ZXIoICdXYXZlR2FtZUluZm9EaWFsb2cnLCBXYXZlR2FtZUluZm9EaWFsb2cgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxjQUFjLE1BQU0sd0NBQXdDO0FBQ25FLE9BQU9DLGtCQUFrQixNQUFNLG9DQUFvQztBQUNuRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MseUJBQXlCLE1BQU0sb0NBQW9DO0FBRTFFLGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNKLGNBQWMsQ0FBQztFQUU3RDtBQUNGO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRztJQUU3QkEsT0FBTyxHQUFHWCxLQUFLLENBQUU7TUFDZlksVUFBVSxFQUFFUCxrQkFBa0IsQ0FBQ08sVUFBVTtNQUN6Q0MsUUFBUSxFQUFFLEVBQUU7TUFDWkMsWUFBWSxFQUFFLEVBQUU7TUFFaEI7TUFDQUMsTUFBTSxFQUFFWixNQUFNLENBQUNhLFFBQVE7TUFDdkJDLGNBQWMsRUFBRTtJQUNsQixDQUFDLEVBQUVOLE9BQVEsQ0FBQztJQUVaTyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDUCxPQUFPLENBQUNRLEtBQUssRUFBRSwrQkFBZ0MsQ0FBQztJQUNuRVIsT0FBTyxDQUFDUSxLQUFLLEdBQUcsSUFBSWpCLElBQUksQ0FBRUsseUJBQXlCLENBQUNhLG9CQUFvQixFQUFFO01BQ3hFQyxJQUFJLEVBQUUsSUFBSXBCLFFBQVEsQ0FBRSxFQUFHLENBQUM7TUFDeEJjLE1BQU0sRUFBRUosT0FBTyxDQUFDSSxNQUFNLENBQUNPLFlBQVksQ0FBRSxXQUFZO0lBQ25ELENBQUUsQ0FBQztJQUVILE1BQU1DLFlBQVksR0FBR2IsTUFBTSxDQUFDYyxHQUFHLENBQUVDLEtBQUssSUFBSUEsS0FBSyxDQUFDQyw2QkFBOEIsQ0FBQztJQUUvRSxLQUFLLENBQUVILFlBQVksRUFBRVosT0FBUSxDQUFDO0VBQ2hDO0FBQ0Y7QUFFQUwsa0JBQWtCLENBQUNxQixRQUFRLENBQUUsb0JBQW9CLEVBQUVuQixrQkFBbUIsQ0FBQyJ9