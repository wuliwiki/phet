// Copyright 2022-2023, University of Colorado Boulder

/**
 * WaveGameLevelSelectionButtonGroup is the group of level-selection buttons for the 'Wave Game' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import LevelSelectionButtonGroup from '../../../../vegas/js/LevelSelectionButtonGroup.js';
import ScoreDisplayNumberAndStar from '../../../../vegas/js/ScoreDisplayNumberAndStar.js';
import FMWColors from '../../common/FMWColors.js';
import FMWQueryParameters from '../../common/FMWQueryParameters.js';
import FMWIconFactory from '../../common/view/FMWIconFactory.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
const BUTTON_WIDTH = 150;
const BUTTON_HEIGHT = 150;

// Layout of buttons
const X_SPACING = 40;
const Y_SPACING = 30;
const BUTTONS_PER_ROW = 3;
export default class WaveGameLevelSelectionButtonGroup extends LevelSelectionButtonGroup {
  /**
   * @param {Property.<WaveGameLevel|null} levelProperty
   * @param {WaveGameLevel[]} levels
   * @param {Object} [options]
   */
  constructor(levelProperty, levels, options) {
    options = merge({
      levelSelectionButtonOptions: {
        baseColor: FMWColors.levelSelectionButtonFillProperty,
        buttonWidth: BUTTON_WIDTH,
        buttonHeight: BUTTON_HEIGHT
      },
      // A maximum number of buttons per row, wrapping to a new row
      flowBoxOptions: {
        spacing: X_SPACING,
        // horizontal spacing
        lineSpacing: Y_SPACING,
        // vertical spacing
        preferredWidth: BUTTONS_PER_ROW * (BUTTON_WIDTH + X_SPACING),
        wrap: true,
        // start a new row when preferredWidth is reached
        justify: 'center' // horizontal justification
      },

      gameLevels: FMWQueryParameters.gameLevels,
      tandem: Tandem.REQUIRED
    }, options);
    const items = levels.map(level => {
      return {
        icon: FMWIconFactory.createLevelSelectionButtonIcon(level.levelNumber, levels.length),
        scoreProperty: level.scoreProperty,
        options: {
          soundPlayerIndex: level.levelNumber - 1,
          listener: () => {
            levelProperty.value = level;
          },
          createScoreDisplay: () => new ScoreDisplayNumberAndStar(level.scoreProperty)
        }
      };
    });
    super(items, options);
  }
}
fourierMakingWaves.register('WaveGameLevelSelectionButtonGroup', WaveGameLevelSelectionButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlRhbmRlbSIsIkxldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAiLCJTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyIiwiRk1XQ29sb3JzIiwiRk1XUXVlcnlQYXJhbWV0ZXJzIiwiRk1XSWNvbkZhY3RvcnkiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJCVVRUT05fV0lEVEgiLCJCVVRUT05fSEVJR0hUIiwiWF9TUEFDSU5HIiwiWV9TUEFDSU5HIiwiQlVUVE9OU19QRVJfUk9XIiwiV2F2ZUdhbWVMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJsZXZlbFByb3BlcnR5IiwibGV2ZWxzIiwib3B0aW9ucyIsImxldmVsU2VsZWN0aW9uQnV0dG9uT3B0aW9ucyIsImJhc2VDb2xvciIsImxldmVsU2VsZWN0aW9uQnV0dG9uRmlsbFByb3BlcnR5IiwiYnV0dG9uV2lkdGgiLCJidXR0b25IZWlnaHQiLCJmbG93Qm94T3B0aW9ucyIsInNwYWNpbmciLCJsaW5lU3BhY2luZyIsInByZWZlcnJlZFdpZHRoIiwid3JhcCIsImp1c3RpZnkiLCJnYW1lTGV2ZWxzIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJpdGVtcyIsIm1hcCIsImxldmVsIiwiaWNvbiIsImNyZWF0ZUxldmVsU2VsZWN0aW9uQnV0dG9uSWNvbiIsImxldmVsTnVtYmVyIiwibGVuZ3RoIiwic2NvcmVQcm9wZXJ0eSIsInNvdW5kUGxheWVySW5kZXgiLCJsaXN0ZW5lciIsInZhbHVlIiwiY3JlYXRlU2NvcmVEaXNwbGF5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYXZlR2FtZUxldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV2F2ZUdhbWVMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwIGlzIHRoZSBncm91cCBvZiBsZXZlbC1zZWxlY3Rpb24gYnV0dG9ucyBmb3IgdGhlICdXYXZlIEdhbWUnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vdmVnYXMvanMvTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyIGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL1Njb3JlRGlzcGxheU51bWJlckFuZFN0YXIuanMnO1xyXG5pbXBvcnQgRk1XQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdDb2xvcnMuanMnO1xyXG5pbXBvcnQgRk1XUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdRdWVyeVBhcmFtZXRlcnMuanMnO1xyXG5pbXBvcnQgRk1XSWNvbkZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvRk1XSWNvbkZhY3RvcnkuanMnO1xyXG5pbXBvcnQgZm91cmllck1ha2luZ1dhdmVzIGZyb20gJy4uLy4uL2ZvdXJpZXJNYWtpbmdXYXZlcy5qcyc7XHJcblxyXG5jb25zdCBCVVRUT05fV0lEVEggPSAxNTA7XHJcbmNvbnN0IEJVVFRPTl9IRUlHSFQgPSAxNTA7XHJcblxyXG4vLyBMYXlvdXQgb2YgYnV0dG9uc1xyXG5jb25zdCBYX1NQQUNJTkcgPSA0MDtcclxuY29uc3QgWV9TUEFDSU5HID0gMzA7XHJcbmNvbnN0IEJVVFRPTlNfUEVSX1JPVyA9IDM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXZlR2FtZUxldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAgZXh0ZW5kcyBMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48V2F2ZUdhbWVMZXZlbHxudWxsfSBsZXZlbFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtXYXZlR2FtZUxldmVsW119IGxldmVsc1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbGV2ZWxQcm9wZXJ0eSwgbGV2ZWxzLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBsZXZlbFNlbGVjdGlvbkJ1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBiYXNlQ29sb3I6IEZNV0NvbG9ycy5sZXZlbFNlbGVjdGlvbkJ1dHRvbkZpbGxQcm9wZXJ0eSxcclxuICAgICAgICBidXR0b25XaWR0aDogQlVUVE9OX1dJRFRILFxyXG4gICAgICAgIGJ1dHRvbkhlaWdodDogQlVUVE9OX0hFSUdIVFxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gQSBtYXhpbXVtIG51bWJlciBvZiBidXR0b25zIHBlciByb3csIHdyYXBwaW5nIHRvIGEgbmV3IHJvd1xyXG4gICAgICBmbG93Qm94T3B0aW9uczoge1xyXG4gICAgICAgIHNwYWNpbmc6IFhfU1BBQ0lORywgLy8gaG9yaXpvbnRhbCBzcGFjaW5nXHJcbiAgICAgICAgbGluZVNwYWNpbmc6IFlfU1BBQ0lORywgLy8gdmVydGljYWwgc3BhY2luZ1xyXG4gICAgICAgIHByZWZlcnJlZFdpZHRoOiBCVVRUT05TX1BFUl9ST1cgKiAoIEJVVFRPTl9XSURUSCArIFhfU1BBQ0lORyApLFxyXG4gICAgICAgIHdyYXA6IHRydWUsIC8vIHN0YXJ0IGEgbmV3IHJvdyB3aGVuIHByZWZlcnJlZFdpZHRoIGlzIHJlYWNoZWRcclxuICAgICAgICBqdXN0aWZ5OiAnY2VudGVyJyAvLyBob3Jpem9udGFsIGp1c3RpZmljYXRpb25cclxuICAgICAgfSxcclxuICAgICAgZ2FtZUxldmVsczogRk1XUXVlcnlQYXJhbWV0ZXJzLmdhbWVMZXZlbHMsXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVEXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgaXRlbXMgPSBsZXZlbHMubWFwKCBsZXZlbCA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWNvbjogRk1XSWNvbkZhY3RvcnkuY3JlYXRlTGV2ZWxTZWxlY3Rpb25CdXR0b25JY29uKCBsZXZlbC5sZXZlbE51bWJlciwgbGV2ZWxzLmxlbmd0aCApLFxyXG4gICAgICAgIHNjb3JlUHJvcGVydHk6IGxldmVsLnNjb3JlUHJvcGVydHksXHJcbiAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgc291bmRQbGF5ZXJJbmRleDogbGV2ZWwubGV2ZWxOdW1iZXIgLSAxLFxyXG4gICAgICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICAgICAgbGV2ZWxQcm9wZXJ0eS52YWx1ZSA9IGxldmVsO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGNyZWF0ZVNjb3JlRGlzcGxheTogKCkgPT4gbmV3IFNjb3JlRGlzcGxheU51bWJlckFuZFN0YXIoIGxldmVsLnNjb3JlUHJvcGVydHkgKVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggaXRlbXMsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ1dhdmVHYW1lTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCcsIFdhdmVHYW1lTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MseUJBQXlCLE1BQU0sbURBQW1EO0FBQ3pGLE9BQU9DLHlCQUF5QixNQUFNLG1EQUFtRDtBQUN6RixPQUFPQyxTQUFTLE1BQU0sMkJBQTJCO0FBQ2pELE9BQU9DLGtCQUFrQixNQUFNLG9DQUFvQztBQUNuRSxPQUFPQyxjQUFjLE1BQU0scUNBQXFDO0FBQ2hFLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUU1RCxNQUFNQyxZQUFZLEdBQUcsR0FBRztBQUN4QixNQUFNQyxhQUFhLEdBQUcsR0FBRzs7QUFFekI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsRUFBRTtBQUNwQixNQUFNQyxTQUFTLEdBQUcsRUFBRTtBQUNwQixNQUFNQyxlQUFlLEdBQUcsQ0FBQztBQUV6QixlQUFlLE1BQU1DLGlDQUFpQyxTQUFTWCx5QkFBeUIsQ0FBQztFQUV2RjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VZLFdBQVdBLENBQUVDLGFBQWEsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUc7SUFFNUNBLE9BQU8sR0FBR2pCLEtBQUssQ0FBRTtNQUNma0IsMkJBQTJCLEVBQUU7UUFDM0JDLFNBQVMsRUFBRWYsU0FBUyxDQUFDZ0IsZ0NBQWdDO1FBQ3JEQyxXQUFXLEVBQUViLFlBQVk7UUFDekJjLFlBQVksRUFBRWI7TUFDaEIsQ0FBQztNQUVEO01BQ0FjLGNBQWMsRUFBRTtRQUNkQyxPQUFPLEVBQUVkLFNBQVM7UUFBRTtRQUNwQmUsV0FBVyxFQUFFZCxTQUFTO1FBQUU7UUFDeEJlLGNBQWMsRUFBRWQsZUFBZSxJQUFLSixZQUFZLEdBQUdFLFNBQVMsQ0FBRTtRQUM5RGlCLElBQUksRUFBRSxJQUFJO1FBQUU7UUFDWkMsT0FBTyxFQUFFLFFBQVEsQ0FBQztNQUNwQixDQUFDOztNQUNEQyxVQUFVLEVBQUV4QixrQkFBa0IsQ0FBQ3dCLFVBQVU7TUFDekNDLE1BQU0sRUFBRTdCLE1BQU0sQ0FBQzhCO0lBQ2pCLENBQUMsRUFBRWQsT0FBUSxDQUFDO0lBRVosTUFBTWUsS0FBSyxHQUFHaEIsTUFBTSxDQUFDaUIsR0FBRyxDQUFFQyxLQUFLLElBQUk7TUFDakMsT0FBTztRQUNMQyxJQUFJLEVBQUU3QixjQUFjLENBQUM4Qiw4QkFBOEIsQ0FBRUYsS0FBSyxDQUFDRyxXQUFXLEVBQUVyQixNQUFNLENBQUNzQixNQUFPLENBQUM7UUFDdkZDLGFBQWEsRUFBRUwsS0FBSyxDQUFDSyxhQUFhO1FBQ2xDdEIsT0FBTyxFQUFFO1VBQ1B1QixnQkFBZ0IsRUFBRU4sS0FBSyxDQUFDRyxXQUFXLEdBQUcsQ0FBQztVQUN2Q0ksUUFBUSxFQUFFQSxDQUFBLEtBQU07WUFDZDFCLGFBQWEsQ0FBQzJCLEtBQUssR0FBR1IsS0FBSztVQUM3QixDQUFDO1VBQ0RTLGtCQUFrQixFQUFFQSxDQUFBLEtBQU0sSUFBSXhDLHlCQUF5QixDQUFFK0IsS0FBSyxDQUFDSyxhQUFjO1FBQy9FO01BQ0YsQ0FBQztJQUNILENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVAsS0FBSyxFQUFFZixPQUFRLENBQUM7RUFDekI7QUFDRjtBQUVBVixrQkFBa0IsQ0FBQ3FDLFFBQVEsQ0FBRSxtQ0FBbUMsRUFBRS9CLGlDQUFrQyxDQUFDIn0=