// Copyright 2021-2023, University of Colorado Boulder

/**
 * AmplitudeControlsSpinner is a labeled spinner used to control the number of amplitude sliders shown in a game challenge.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import NumberSpinner from '../../../../sun/js/NumberSpinner.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import FourierMakingWavesStrings from '../../FourierMakingWavesStrings.js';
export default class AmplitudeControlsSpinner extends VBox {
  /**
   * @param {NumberProperty} numberOfAmplitudeControlsProperty
   * @param {Object} [options]
   */
  constructor(numberOfAmplitudeControlsProperty, options) {
    assert && assert(numberOfAmplitudeControlsProperty instanceof NumberProperty);
    options = merge({
      // NumberSpinner options
      spinnerOptions: {
        arrowsPosition: 'leftRight',
        numberDisplayOptions: {
          align: 'center',
          xMargin: 8,
          yMargin: 2,
          cornerRadius: 3,
          textOptions: {
            font: new PhetFont(14)
          }
        },
        touchAreaXDilation: 25,
        touchAreaYDilation: 12,
        mouseAreaXDilation: 5,
        mouseAreaYDilation: 5
      },
      // Text options
      textOptions: {
        maxWidth: 120
      },
      // VBox options
      spacing: 10
    }, options);
    const amplitudeControlsText = new Text(FourierMakingWavesStrings.amplitudeControlsStringProperty, merge({
      tandem: options.tandem.createTandem('amplitudeControlsText')
    }, options.textOptions));
    const spinner = new NumberSpinner(numberOfAmplitudeControlsProperty, numberOfAmplitudeControlsProperty.rangeProperty, merge({
      tandem: options.tandem.createTandem('spinner')
    }, options.spinnerOptions));
    assert && assert(!options.children, 'AmplitudeControlsSpinner sets children');
    options.children = [amplitudeControlsText, spinner];
    super(options);
  }
}
fourierMakingWaves.register('AmplitudeControlsSpinner', AmplitudeControlsSpinner);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIm1lcmdlIiwiUGhldEZvbnQiLCJUZXh0IiwiVkJveCIsIk51bWJlclNwaW5uZXIiLCJmb3VyaWVyTWFraW5nV2F2ZXMiLCJGb3VyaWVyTWFraW5nV2F2ZXNTdHJpbmdzIiwiQW1wbGl0dWRlQ29udHJvbHNTcGlubmVyIiwiY29uc3RydWN0b3IiLCJudW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzUHJvcGVydHkiLCJvcHRpb25zIiwiYXNzZXJ0Iiwic3Bpbm5lck9wdGlvbnMiLCJhcnJvd3NQb3NpdGlvbiIsIm51bWJlckRpc3BsYXlPcHRpb25zIiwiYWxpZ24iLCJ4TWFyZ2luIiwieU1hcmdpbiIsImNvcm5lclJhZGl1cyIsInRleHRPcHRpb25zIiwiZm9udCIsInRvdWNoQXJlYVhEaWxhdGlvbiIsInRvdWNoQXJlYVlEaWxhdGlvbiIsIm1vdXNlQXJlYVhEaWxhdGlvbiIsIm1vdXNlQXJlYVlEaWxhdGlvbiIsIm1heFdpZHRoIiwic3BhY2luZyIsImFtcGxpdHVkZUNvbnRyb2xzVGV4dCIsImFtcGxpdHVkZUNvbnRyb2xzU3RyaW5nUHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJzcGlubmVyIiwicmFuZ2VQcm9wZXJ0eSIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBbXBsaXR1ZGVDb250cm9sc1NwaW5uZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQW1wbGl0dWRlQ29udHJvbHNTcGlubmVyIGlzIGEgbGFiZWxlZCBzcGlubmVyIHVzZWQgdG8gY29udHJvbCB0aGUgbnVtYmVyIG9mIGFtcGxpdHVkZSBzbGlkZXJzIHNob3duIGluIGEgZ2FtZSBjaGFsbGVuZ2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTnVtYmVyU3Bpbm5lciBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvTnVtYmVyU3Bpbm5lci5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuaW1wb3J0IEZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MgZnJvbSAnLi4vLi4vRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbXBsaXR1ZGVDb250cm9sc1NwaW5uZXIgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtOdW1iZXJQcm9wZXJ0eX0gbnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sc1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBudW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBudW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzUHJvcGVydHkgaW5zdGFuY2VvZiBOdW1iZXJQcm9wZXJ0eSApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8gTnVtYmVyU3Bpbm5lciBvcHRpb25zXHJcbiAgICAgIHNwaW5uZXJPcHRpb25zOiB7XHJcbiAgICAgICAgYXJyb3dzUG9zaXRpb246ICdsZWZ0UmlnaHQnLFxyXG4gICAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgICB4TWFyZ2luOiA4LFxyXG4gICAgICAgICAgeU1hcmdpbjogMixcclxuICAgICAgICAgIGNvcm5lclJhZGl1czogMyxcclxuICAgICAgICAgIHRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTQgKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG91Y2hBcmVhWERpbGF0aW9uOiAyNSxcclxuICAgICAgICB0b3VjaEFyZWFZRGlsYXRpb246IDEyLFxyXG4gICAgICAgIG1vdXNlQXJlYVhEaWxhdGlvbjogNSxcclxuICAgICAgICBtb3VzZUFyZWFZRGlsYXRpb246IDVcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIFRleHQgb3B0aW9uc1xyXG4gICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgIG1heFdpZHRoOiAxMjBcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIFZCb3ggb3B0aW9uc1xyXG4gICAgICBzcGFjaW5nOiAxMFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGFtcGxpdHVkZUNvbnRyb2xzVGV4dCA9IG5ldyBUZXh0KCBGb3VyaWVyTWFraW5nV2F2ZXNTdHJpbmdzLmFtcGxpdHVkZUNvbnRyb2xzU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIG1lcmdlKCB7XHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhbXBsaXR1ZGVDb250cm9sc1RleHQnIClcclxuICAgICAgfSwgb3B0aW9ucy50ZXh0T3B0aW9ucyApICk7XHJcblxyXG4gICAgY29uc3Qgc3Bpbm5lciA9IG5ldyBOdW1iZXJTcGlubmVyKCBudW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzUHJvcGVydHksIG51bWJlck9mQW1wbGl0dWRlQ29udHJvbHNQcm9wZXJ0eS5yYW5nZVByb3BlcnR5LFxyXG4gICAgICBtZXJnZSgge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3Bpbm5lcicgKVxyXG4gICAgICB9LCBvcHRpb25zLnNwaW5uZXJPcHRpb25zICkgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5jaGlsZHJlbiwgJ0FtcGxpdHVkZUNvbnRyb2xzU3Bpbm5lciBzZXRzIGNoaWxkcmVuJyApO1xyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgYW1wbGl0dWRlQ29udHJvbHNUZXh0LCBzcGlubmVyIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ0FtcGxpdHVkZUNvbnRyb2xzU3Bpbm5lcicsIEFtcGxpdHVkZUNvbnRyb2xzU3Bpbm5lciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsYUFBYSxNQUFNLHFDQUFxQztBQUMvRCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MseUJBQXlCLE1BQU0sb0NBQW9DO0FBRTFFLGVBQWUsTUFBTUMsd0JBQXdCLFNBQVNKLElBQUksQ0FBQztFQUV6RDtBQUNGO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxpQ0FBaUMsRUFBRUMsT0FBTyxFQUFHO0lBQ3hEQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsaUNBQWlDLFlBQVlWLGNBQWUsQ0FBQztJQUUvRVcsT0FBTyxHQUFHVixLQUFLLENBQUU7TUFFZjtNQUNBWSxjQUFjLEVBQUU7UUFDZEMsY0FBYyxFQUFFLFdBQVc7UUFDM0JDLG9CQUFvQixFQUFFO1VBQ3BCQyxLQUFLLEVBQUUsUUFBUTtVQUNmQyxPQUFPLEVBQUUsQ0FBQztVQUNWQyxPQUFPLEVBQUUsQ0FBQztVQUNWQyxZQUFZLEVBQUUsQ0FBQztVQUNmQyxXQUFXLEVBQUU7WUFDWEMsSUFBSSxFQUFFLElBQUluQixRQUFRLENBQUUsRUFBRztVQUN6QjtRQUNGLENBQUM7UUFDRG9CLGtCQUFrQixFQUFFLEVBQUU7UUFDdEJDLGtCQUFrQixFQUFFLEVBQUU7UUFDdEJDLGtCQUFrQixFQUFFLENBQUM7UUFDckJDLGtCQUFrQixFQUFFO01BQ3RCLENBQUM7TUFFRDtNQUNBTCxXQUFXLEVBQUU7UUFDWE0sUUFBUSxFQUFFO01BQ1osQ0FBQztNQUVEO01BQ0FDLE9BQU8sRUFBRTtJQUNYLENBQUMsRUFBRWhCLE9BQVEsQ0FBQztJQUVaLE1BQU1pQixxQkFBcUIsR0FBRyxJQUFJekIsSUFBSSxDQUFFSSx5QkFBeUIsQ0FBQ3NCLCtCQUErQixFQUMvRjVCLEtBQUssQ0FBRTtNQUNMNkIsTUFBTSxFQUFFbkIsT0FBTyxDQUFDbUIsTUFBTSxDQUFDQyxZQUFZLENBQUUsdUJBQXdCO0lBQy9ELENBQUMsRUFBRXBCLE9BQU8sQ0FBQ1MsV0FBWSxDQUFFLENBQUM7SUFFNUIsTUFBTVksT0FBTyxHQUFHLElBQUkzQixhQUFhLENBQUVLLGlDQUFpQyxFQUFFQSxpQ0FBaUMsQ0FBQ3VCLGFBQWEsRUFDbkhoQyxLQUFLLENBQUU7TUFDTDZCLE1BQU0sRUFBRW5CLE9BQU8sQ0FBQ21CLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFNBQVU7SUFDakQsQ0FBQyxFQUFFcEIsT0FBTyxDQUFDRSxjQUFlLENBQUUsQ0FBQztJQUUvQkQsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0QsT0FBTyxDQUFDdUIsUUFBUSxFQUFFLHdDQUF5QyxDQUFDO0lBQy9FdkIsT0FBTyxDQUFDdUIsUUFBUSxHQUFHLENBQUVOLHFCQUFxQixFQUFFSSxPQUFPLENBQUU7SUFFckQsS0FBSyxDQUFFckIsT0FBUSxDQUFDO0VBQ2xCO0FBQ0Y7QUFFQUwsa0JBQWtCLENBQUM2QixRQUFRLENBQUUsMEJBQTBCLEVBQUUzQix3QkFBeUIsQ0FBQyJ9