// Copyright 2021-2023, University of Colorado Boulder

/**
 * WaveGameLevel is the model for a game level.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Emitter from '../../../../axon/js/Emitter.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import PatternStringProperty from '../../../../axon/js/PatternStringProperty.js';
import Range from '../../../../dot/js/Range.js';
import optionize from '../../../../phet-core/js/optionize.js';
import AssertUtils from '../../../../phetcommon/js/AssertUtils.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import FMWConstants from '../../common/FMWConstants.js';
import FMWQueryParameters from '../../common/FMWQueryParameters.js';
import Domain from '../../common/model/Domain.js';
import EmphasizedHarmonics from '../../common/model/EmphasizedHarmonics.js';
import FourierSeries from '../../common/model/FourierSeries.js';
import SeriesType from '../../common/model/SeriesType.js';
import DiscreteAxisDescriptions from '../../discrete/model/DiscreteAxisDescriptions.js';
import fourierMakingWaves from '../../fourierMakingWaves.js';
import FourierMakingWavesStrings from '../../FourierMakingWavesStrings.js';
import AmplitudesGenerator from './AmplitudesGenerator.js';
import WaveGameAmplitudesChart from './WaveGameAmplitudesChart.js';
import WaveGameHarmonicsChart from './WaveGameHarmonicsChart.js';
import WaveGameSumChart from './WaveGameSumChart.js';

// constants

// Chart properties that are fixed in the Wave Game, and shared by the Harmonics and Sum charts.
const DOMAIN = Domain.SPACE;
const SERIES_TYPE = SeriesType.SIN;
const t = 0; // lowercase t (time) to distinguish from uppercase T (period)

// A guess amplitude must be at least this close to an answer amplitude,
// see https://github.com/phetsims/fourier-making-waves/issues/97
const AMPLITUDE_THRESHOLD = 0;
export default class WaveGameLevel extends PhetioObject {
  // numbered starting from 1

  // The score is the total number of points that have been awarded for this level.

  // Whether the current challenge has been solved. A challenge is considered solved when the user has
  // correctly guessed the answer, or when the user has pressed the 'Show Answer' button.
  // Generates amplitudes for answerSeries
  // Answer for the challenge, the waveform that the user is attempting to match
  // The Fourier series that corresponds to the user's guess
  // Does the guess currently match the answer, within some threshold?
  // the number of amplitude controls (sliders) to show in the Amplitudes chart
  // The harmonics (in guessSeries) to be emphasized in the Harmonics chart, as the result of UI interactions.
  // charts
  // Fires when a new waveform has been fully initialized, see method newWaveform.
  // Fires when the guess is checked and found to be correct. The argument is the number of points awarded.
  // Fires when the guess is checked and found to be incorrect.
  /**
   * @param levelNumber - numbered starting from 1
   * @param providedOptions
   */
  constructor(levelNumber, providedOptions) {
    assert && AssertUtils.assertPositiveInteger(levelNumber); // numbered starting from 1

    const options = optionize()({
      // SelfOptions
      getNumberOfNonZeroHarmonics: () => levelNumber,
      statusBarMessageProperty: new PatternStringProperty(FourierMakingWavesStrings.matchUsingNHarmonicsStringProperty, {
        levelNumber: levelNumber,
        numberOfHarmonics: levelNumber
      }),
      infoDialogDescriptionProperty: new PatternStringProperty(FourierMakingWavesStrings.infoNHarmonicsStringProperty, {
        levelNumber: levelNumber,
        numberOfHarmonics: levelNumber
      }),
      phetioType: WaveGameLevel.WaveGameLevelIO,
      phetioState: false
    }, providedOptions);
    assert && assert(Number.isInteger(options.defaultNumberOfAmplitudeControls) && options.defaultNumberOfAmplitudeControls >= 0);
    assert && assert(options.defaultNumberOfAmplitudeControls >= levelNumber && options.defaultNumberOfAmplitudeControls <= FMWConstants.MAX_HARMONICS);
    super(options);
    this.levelNumber = levelNumber;
    this.statusBarMessageProperty = options.statusBarMessageProperty;
    this.infoDialogDescriptionProperty = options.infoDialogDescriptionProperty;
    this.defaultNumberOfAmplitudeControls = options.defaultNumberOfAmplitudeControls;
    this.scoreProperty = new NumberProperty(0, {
      numberType: 'Integer',
      isValidValue: value => value >= 0,
      phetioReadOnly: true,
      tandem: options.tandem.createTandem('scoreProperty')
    });
    this.isSolvedProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('isSolvedProperty'),
      phetioReadOnly: true
    });
    this.amplitudesGenerator = new AmplitudesGenerator({
      getNumberOfNonZeroHarmonics: options.getNumberOfNonZeroHarmonics
    });
    const firstAnswer = this.levelNumber === 5 && FMWQueryParameters.answer5 ? FMWQueryParameters.answer5 : this.amplitudesGenerator.createAmplitudes();
    this.answerSeries = new FourierSeries({
      amplitudes: firstAnswer,
      tandem: options.tandem.createTandem('answerSeries')
    });
    this.guessSeries = new FourierSeries({
      tandem: options.tandem.createTandem('guessSeries')
    });
    this.isMatchedProperty = new DerivedProperty([this.guessSeries.amplitudesProperty, this.answerSeries.amplitudesProperty], (guessAmplitudes, answerAmplitudes) => {
      let isMatched = true;
      for (let i = 0; i < guessAmplitudes.length && isMatched; i++) {
        isMatched = Math.abs(guessAmplitudes[i] - answerAmplitudes[i]) <= AMPLITUDE_THRESHOLD;
      }
      return isMatched;
    });
    this.numberOfAmplitudeControlsProperty = new NumberProperty(options.defaultNumberOfAmplitudeControls, {
      numberType: 'Integer',
      range: new Range(this.answerSeries.getNumberOfNonZeroHarmonics(), this.answerSeries.harmonics.length),
      rangePropertyOptions: {
        phetioDocumentation: 'Determines the range of the Amplitude Controls spinner',
        phetioValueType: Range.RangeIO
      },
      tandem: options.tandem.createTandem('numberOfAmplitudeControlsProperty')
    });
    this.emphasizedHarmonics = new EmphasizedHarmonics();

    // Parent tandem for all charts
    const chartsTandem = options.tandem.createTandem('charts');
    this.amplitudesChart = new WaveGameAmplitudesChart(this.answerSeries, this.guessSeries, this.emphasizedHarmonics, this.numberOfAmplitudeControlsProperty, chartsTandem.createTandem('amplitudesChart'));
    this.harmonicsChart = new WaveGameHarmonicsChart(this.guessSeries, this.emphasizedHarmonics, DOMAIN, SERIES_TYPE, t, DiscreteAxisDescriptions.DEFAULT_X_AXIS_DESCRIPTION, DiscreteAxisDescriptions.DEFAULT_Y_AXIS_DESCRIPTION, chartsTandem.createTandem('harmonicsChart'));
    this.sumChart = new WaveGameSumChart(this.answerSeries, this.guessSeries, DOMAIN, SERIES_TYPE, t, DiscreteAxisDescriptions.DEFAULT_X_AXIS_DESCRIPTION, chartsTandem.createTandem('sumChart'));
    this.newWaveformEmitter = new Emitter();
    this.correctEmitter = new Emitter({
      tandem: options.tandem.createTandem('correctEmitter'),
      parameters: [{
        name: 'pointsAwarded',
        phetioType: NumberIO
      }]
    });
    this.incorrectEmitter = new Emitter({
      tandem: options.tandem.createTandem('incorrectEmitter')
    });
  }
  reset() {
    this.scoreProperty.reset();
    this.isSolvedProperty.reset();
    // Not necessary to reset this.numberOfAmplitudeControlsProperty
    this.emphasizedHarmonics.reset();

    // If reset was not called as the result of setting state, start with a new challenge.
    if (!phet.joist.sim.isSettingPhetioStateProperty.value) {
      this.newWaveform();
    }
  }

  /**
   * Sets all amplitudes to zero for the guess.
   * This method is called when the eraser button is pressed.
   */
  eraseAmplitudes() {
    this.guessSeries.setAllAmplitudes(0);
  }

  /**
   * Checks the user's guess, awards points if appropriate, and notifies listeners of the result.
   * This method is called when the 'Check Answer' button is pressed.
   */
  checkAnswer() {
    assert && assert(!this.isSolvedProperty.value);
    if (this.isMatchedProperty.value) {
      const pointAwarded = FMWConstants.POINTS_PER_CHALLENGE;
      this.scoreProperty.value += pointAwarded;
      this.isSolvedProperty.value = true;
      this.correctEmitter.emit(pointAwarded);
    } else {
      this.incorrectEmitter.emit();
    }
  }

  /**
   * Shows the answer for the challenge.
   * This method is called when the 'Show Answer' button is pressed.
   */
  showAnswer() {
    this.isSolvedProperty.value = true;
    this.guessSeries.setAmplitudes(this.answerSeries.amplitudesProperty.value);
  }

  /**
   * Creates a new challenge, by settings all guess amplitudes to zero, and creating a new set of answer amplitudes.
   * This method is called when the 'New Waveform' button is pressed.
   */
  newWaveform() {
    // Set the guess amplitudes to zero.
    this.guessSeries.setAllAmplitudes(0);

    // Create a new answer.
    const previousAmplitudes = this.answerSeries.amplitudesProperty.value;
    const newAmplitudes = this.amplitudesGenerator.createAmplitudes(previousAmplitudes);
    this.answerSeries.setAmplitudes(newAmplitudes);
    phet.log && phet.log(`newWaveform: level=${this.levelNumber} answer=[${newAmplitudes}]`);

    // Things that need to be reset when we start a new challenge.
    this.isSolvedProperty.reset();
    this.emphasizedHarmonics.reset();

    // Adjust the value and range of numberOfAmplitudeControlsProperty to match the answer.
    // If the current value is greater than the default value for the level, keep the current value.
    // See https://github.com/phetsims/fourier-making-waves/issues/63#issuecomment-845466971
    const min = this.answerSeries.getNumberOfNonZeroHarmonics();
    const max = this.numberOfAmplitudeControlsProperty.rangeProperty.value.max;
    const value = Math.max(this.numberOfAmplitudeControlsProperty.value, this.defaultNumberOfAmplitudeControls);
    this.numberOfAmplitudeControlsProperty.setValueAndRange(value, new Range(min, max));

    // Notify listeners that the new waveform is fully initialized
    this.newWaveformEmitter.emit();
  }

  /**
   * WaveGameLevelIO handles PhET-iO serialization of WaveGameLevel. Since all WaveGameLevels are instantiated at
   * startup, it implements 'Reference type serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static WaveGameLevelIO = new IOType('WaveGameLevelIO', {
    valueType: WaveGameLevel,
    supertype: ReferenceIO(IOType.ObjectIO)
  });
}
fourierMakingWaves.register('WaveGameLevel', WaveGameLevel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJFbWl0dGVyIiwiTnVtYmVyUHJvcGVydHkiLCJQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJSYW5nZSIsIm9wdGlvbml6ZSIsIkFzc2VydFV0aWxzIiwiUGhldGlvT2JqZWN0IiwiSU9UeXBlIiwiTnVtYmVySU8iLCJSZWZlcmVuY2VJTyIsIkZNV0NvbnN0YW50cyIsIkZNV1F1ZXJ5UGFyYW1ldGVycyIsIkRvbWFpbiIsIkVtcGhhc2l6ZWRIYXJtb25pY3MiLCJGb3VyaWVyU2VyaWVzIiwiU2VyaWVzVHlwZSIsIkRpc2NyZXRlQXhpc0Rlc2NyaXB0aW9ucyIsImZvdXJpZXJNYWtpbmdXYXZlcyIsIkZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MiLCJBbXBsaXR1ZGVzR2VuZXJhdG9yIiwiV2F2ZUdhbWVBbXBsaXR1ZGVzQ2hhcnQiLCJXYXZlR2FtZUhhcm1vbmljc0NoYXJ0IiwiV2F2ZUdhbWVTdW1DaGFydCIsIkRPTUFJTiIsIlNQQUNFIiwiU0VSSUVTX1RZUEUiLCJTSU4iLCJ0IiwiQU1QTElUVURFX1RIUkVTSE9MRCIsIldhdmVHYW1lTGV2ZWwiLCJjb25zdHJ1Y3RvciIsImxldmVsTnVtYmVyIiwicHJvdmlkZWRPcHRpb25zIiwiYXNzZXJ0IiwiYXNzZXJ0UG9zaXRpdmVJbnRlZ2VyIiwib3B0aW9ucyIsImdldE51bWJlck9mTm9uWmVyb0hhcm1vbmljcyIsInN0YXR1c0Jhck1lc3NhZ2VQcm9wZXJ0eSIsIm1hdGNoVXNpbmdOSGFybW9uaWNzU3RyaW5nUHJvcGVydHkiLCJudW1iZXJPZkhhcm1vbmljcyIsImluZm9EaWFsb2dEZXNjcmlwdGlvblByb3BlcnR5IiwiaW5mb05IYXJtb25pY3NTdHJpbmdQcm9wZXJ0eSIsInBoZXRpb1R5cGUiLCJXYXZlR2FtZUxldmVsSU8iLCJwaGV0aW9TdGF0ZSIsIk51bWJlciIsImlzSW50ZWdlciIsImRlZmF1bHROdW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzIiwiTUFYX0hBUk1PTklDUyIsInNjb3JlUHJvcGVydHkiLCJudW1iZXJUeXBlIiwiaXNWYWxpZFZhbHVlIiwidmFsdWUiLCJwaGV0aW9SZWFkT25seSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImlzU29sdmVkUHJvcGVydHkiLCJhbXBsaXR1ZGVzR2VuZXJhdG9yIiwiZmlyc3RBbnN3ZXIiLCJhbnN3ZXI1IiwiY3JlYXRlQW1wbGl0dWRlcyIsImFuc3dlclNlcmllcyIsImFtcGxpdHVkZXMiLCJndWVzc1NlcmllcyIsImlzTWF0Y2hlZFByb3BlcnR5IiwiYW1wbGl0dWRlc1Byb3BlcnR5IiwiZ3Vlc3NBbXBsaXR1ZGVzIiwiYW5zd2VyQW1wbGl0dWRlcyIsImlzTWF0Y2hlZCIsImkiLCJsZW5ndGgiLCJNYXRoIiwiYWJzIiwibnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sc1Byb3BlcnR5IiwicmFuZ2UiLCJoYXJtb25pY3MiLCJyYW5nZVByb3BlcnR5T3B0aW9ucyIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJwaGV0aW9WYWx1ZVR5cGUiLCJSYW5nZUlPIiwiZW1waGFzaXplZEhhcm1vbmljcyIsImNoYXJ0c1RhbmRlbSIsImFtcGxpdHVkZXNDaGFydCIsImhhcm1vbmljc0NoYXJ0IiwiREVGQVVMVF9YX0FYSVNfREVTQ1JJUFRJT04iLCJERUZBVUxUX1lfQVhJU19ERVNDUklQVElPTiIsInN1bUNoYXJ0IiwibmV3V2F2ZWZvcm1FbWl0dGVyIiwiY29ycmVjdEVtaXR0ZXIiLCJwYXJhbWV0ZXJzIiwibmFtZSIsImluY29ycmVjdEVtaXR0ZXIiLCJyZXNldCIsInBoZXQiLCJqb2lzdCIsInNpbSIsImlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHkiLCJuZXdXYXZlZm9ybSIsImVyYXNlQW1wbGl0dWRlcyIsInNldEFsbEFtcGxpdHVkZXMiLCJjaGVja0Fuc3dlciIsInBvaW50QXdhcmRlZCIsIlBPSU5UU19QRVJfQ0hBTExFTkdFIiwiZW1pdCIsInNob3dBbnN3ZXIiLCJzZXRBbXBsaXR1ZGVzIiwicHJldmlvdXNBbXBsaXR1ZGVzIiwibmV3QW1wbGl0dWRlcyIsImxvZyIsIm1pbiIsIm1heCIsInJhbmdlUHJvcGVydHkiLCJzZXRWYWx1ZUFuZFJhbmdlIiwidmFsdWVUeXBlIiwic3VwZXJ0eXBlIiwiT2JqZWN0SU8iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldhdmVHYW1lTGV2ZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV2F2ZUdhbWVMZXZlbCBpcyB0aGUgbW9kZWwgZm9yIGEgZ2FtZSBsZXZlbC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW1pdHRlci5qcyc7XHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFBhdHRlcm5TdHJpbmdQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1BhdHRlcm5TdHJpbmdQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IEFzc2VydFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvQXNzZXJ0VXRpbHMuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0LCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvUmVmZXJlbmNlSU8uanMnO1xyXG5pbXBvcnQgRk1XQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRk1XUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL2NvbW1vbi9GTVdRdWVyeVBhcmFtZXRlcnMuanMnO1xyXG5pbXBvcnQgRG9tYWluIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Eb21haW4uanMnO1xyXG5pbXBvcnQgRW1waGFzaXplZEhhcm1vbmljcyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvRW1waGFzaXplZEhhcm1vbmljcy5qcyc7XHJcbmltcG9ydCBGb3VyaWVyU2VyaWVzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Gb3VyaWVyU2VyaWVzLmpzJztcclxuaW1wb3J0IFNlcmllc1R5cGUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1Nlcmllc1R5cGUuanMnO1xyXG5pbXBvcnQgRGlzY3JldGVBeGlzRGVzY3JpcHRpb25zIGZyb20gJy4uLy4uL2Rpc2NyZXRlL21vZGVsL0Rpc2NyZXRlQXhpc0Rlc2NyaXB0aW9ucy5qcyc7XHJcbmltcG9ydCBmb3VyaWVyTWFraW5nV2F2ZXMgZnJvbSAnLi4vLi4vZm91cmllck1ha2luZ1dhdmVzLmpzJztcclxuaW1wb3J0IEZvdXJpZXJNYWtpbmdXYXZlc1N0cmluZ3MgZnJvbSAnLi4vLi4vRm91cmllck1ha2luZ1dhdmVzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBBbXBsaXR1ZGVzR2VuZXJhdG9yIGZyb20gJy4vQW1wbGl0dWRlc0dlbmVyYXRvci5qcyc7XHJcbmltcG9ydCBXYXZlR2FtZUFtcGxpdHVkZXNDaGFydCBmcm9tICcuL1dhdmVHYW1lQW1wbGl0dWRlc0NoYXJ0LmpzJztcclxuaW1wb3J0IFdhdmVHYW1lSGFybW9uaWNzQ2hhcnQgZnJvbSAnLi9XYXZlR2FtZUhhcm1vbmljc0NoYXJ0LmpzJztcclxuaW1wb3J0IFdhdmVHYW1lU3VtQ2hhcnQgZnJvbSAnLi9XYXZlR2FtZVN1bUNoYXJ0LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5cclxuLy8gQ2hhcnQgcHJvcGVydGllcyB0aGF0IGFyZSBmaXhlZCBpbiB0aGUgV2F2ZSBHYW1lLCBhbmQgc2hhcmVkIGJ5IHRoZSBIYXJtb25pY3MgYW5kIFN1bSBjaGFydHMuXHJcbmNvbnN0IERPTUFJTiA9IERvbWFpbi5TUEFDRTtcclxuY29uc3QgU0VSSUVTX1RZUEUgPSBTZXJpZXNUeXBlLlNJTjtcclxuY29uc3QgdCA9IDA7IC8vIGxvd2VyY2FzZSB0ICh0aW1lKSB0byBkaXN0aW5ndWlzaCBmcm9tIHVwcGVyY2FzZSBUIChwZXJpb2QpXHJcblxyXG4vLyBBIGd1ZXNzIGFtcGxpdHVkZSBtdXN0IGJlIGF0IGxlYXN0IHRoaXMgY2xvc2UgdG8gYW4gYW5zd2VyIGFtcGxpdHVkZSxcclxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9mb3VyaWVyLW1ha2luZy13YXZlcy9pc3N1ZXMvOTdcclxuY29uc3QgQU1QTElUVURFX1RIUkVTSE9MRCA9IDA7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG5cclxuICAvLyBkZWZhdWx0IG51bWJlciBvZiBhbXBsaXR1ZGUgY29udHJvbHMgdG8gc2hvdyBmb3IgYSBjaGFsbGVuZ2VcclxuICBkZWZhdWx0TnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sczogbnVtYmVyO1xyXG5cclxuICAvLyB0aGUgbnVtYmVyIG9mIG5vbi16ZXJvIGhhcm1vbmljcyBpcyBlYWNoIGNoYWxsZW5nZSwgYnkgZGVmYXVsdCBzYW1lIGFzIGxldmVsIG51bWJlclxyXG4gIGdldE51bWJlck9mTm9uWmVyb0hhcm1vbmljcz86ICgpID0+IG51bWJlcjtcclxuXHJcbiAgLy8gbWVzc2FnZSBzaG93biBpbiB0aGUgc3RhdHVzIGJhciB0aGF0IGFwcGVhcnMgYXQgdGhlIHRvcCBvZiB0aGUgV2F2ZSBHYW1lIHNjcmVlblxyXG4gIHN0YXR1c0Jhck1lc3NhZ2VQcm9wZXJ0eT86IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XHJcblxyXG4gIC8vIHNob3duIGluIHRoZSBpbmZvIGRpYWxvZyB0aGF0IGRlc2NyaWJlcyB0aGUgZ2FtZSBsZXZlbHMsIGRlZmF1bHQgd2lsbCBiZSBzZXQgYmVsb3dcclxuICBpbmZvRGlhbG9nRGVzY3JpcHRpb25Qcm9wZXJ0eT86IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XHJcbn07XHJcblxyXG50eXBlIFdhdmVHYW1lTGV2ZWxPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2F2ZUdhbWVMZXZlbCBleHRlbmRzIFBoZXRpb09iamVjdCB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBsZXZlbE51bWJlcjogbnVtYmVyOyAvLyBudW1iZXJlZCBzdGFydGluZyBmcm9tIDFcclxuICBwdWJsaWMgcmVhZG9ubHkgc3RhdHVzQmFyTWVzc2FnZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+O1xyXG4gIHB1YmxpYyByZWFkb25seSBpbmZvRGlhbG9nRGVzY3JpcHRpb25Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPjtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0TnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sczogbnVtYmVyO1xyXG5cclxuICAvLyBUaGUgc2NvcmUgaXMgdGhlIHRvdGFsIG51bWJlciBvZiBwb2ludHMgdGhhdCBoYXZlIGJlZW4gYXdhcmRlZCBmb3IgdGhpcyBsZXZlbC5cclxuICBwdWJsaWMgcmVhZG9ubHkgc2NvcmVQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcblxyXG4gIC8vIFdoZXRoZXIgdGhlIGN1cnJlbnQgY2hhbGxlbmdlIGhhcyBiZWVuIHNvbHZlZC4gQSBjaGFsbGVuZ2UgaXMgY29uc2lkZXJlZCBzb2x2ZWQgd2hlbiB0aGUgdXNlciBoYXNcclxuICAvLyBjb3JyZWN0bHkgZ3Vlc3NlZCB0aGUgYW5zd2VyLCBvciB3aGVuIHRoZSB1c2VyIGhhcyBwcmVzc2VkIHRoZSAnU2hvdyBBbnN3ZXInIGJ1dHRvbi5cclxuICBwdWJsaWMgcmVhZG9ubHkgaXNTb2x2ZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcblxyXG4gIC8vIEdlbmVyYXRlcyBhbXBsaXR1ZGVzIGZvciBhbnN3ZXJTZXJpZXNcclxuICBwcml2YXRlIHJlYWRvbmx5IGFtcGxpdHVkZXNHZW5lcmF0b3I6IEFtcGxpdHVkZXNHZW5lcmF0b3I7XHJcblxyXG4gIC8vIEFuc3dlciBmb3IgdGhlIGNoYWxsZW5nZSwgdGhlIHdhdmVmb3JtIHRoYXQgdGhlIHVzZXIgaXMgYXR0ZW1wdGluZyB0byBtYXRjaFxyXG4gIHByaXZhdGUgcmVhZG9ubHkgYW5zd2VyU2VyaWVzOiBGb3VyaWVyU2VyaWVzO1xyXG5cclxuICAvLyBUaGUgRm91cmllciBzZXJpZXMgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgdXNlcidzIGd1ZXNzXHJcbiAgcHJpdmF0ZSByZWFkb25seSBndWVzc1NlcmllczogRm91cmllclNlcmllcztcclxuXHJcbiAgLy8gRG9lcyB0aGUgZ3Vlc3MgY3VycmVudGx5IG1hdGNoIHRoZSBhbnN3ZXIsIHdpdGhpbiBzb21lIHRocmVzaG9sZD9cclxuICBwdWJsaWMgcmVhZG9ubHkgaXNNYXRjaGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyB0aGUgbnVtYmVyIG9mIGFtcGxpdHVkZSBjb250cm9scyAoc2xpZGVycykgdG8gc2hvdyBpbiB0aGUgQW1wbGl0dWRlcyBjaGFydFxyXG4gIHB1YmxpYyByZWFkb25seSBudW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICAvLyBUaGUgaGFybW9uaWNzIChpbiBndWVzc1NlcmllcykgdG8gYmUgZW1waGFzaXplZCBpbiB0aGUgSGFybW9uaWNzIGNoYXJ0LCBhcyB0aGUgcmVzdWx0IG9mIFVJIGludGVyYWN0aW9ucy5cclxuICBwcml2YXRlIHJlYWRvbmx5IGVtcGhhc2l6ZWRIYXJtb25pY3M6IEVtcGhhc2l6ZWRIYXJtb25pY3M7XHJcblxyXG4gIC8vIGNoYXJ0c1xyXG4gIHB1YmxpYyByZWFkb25seSBhbXBsaXR1ZGVzQ2hhcnQ6IFdhdmVHYW1lQW1wbGl0dWRlc0NoYXJ0O1xyXG4gIHB1YmxpYyByZWFkb25seSBoYXJtb25pY3NDaGFydDogV2F2ZUdhbWVIYXJtb25pY3NDaGFydDtcclxuICBwdWJsaWMgcmVhZG9ubHkgc3VtQ2hhcnQ6IFdhdmVHYW1lU3VtQ2hhcnQ7XHJcblxyXG4gIC8vIEZpcmVzIHdoZW4gYSBuZXcgd2F2ZWZvcm0gaGFzIGJlZW4gZnVsbHkgaW5pdGlhbGl6ZWQsIHNlZSBtZXRob2QgbmV3V2F2ZWZvcm0uXHJcbiAgcHVibGljIHJlYWRvbmx5IG5ld1dhdmVmb3JtRW1pdHRlcjogRW1pdHRlcjtcclxuXHJcbiAgLy8gRmlyZXMgd2hlbiB0aGUgZ3Vlc3MgaXMgY2hlY2tlZCBhbmQgZm91bmQgdG8gYmUgY29ycmVjdC4gVGhlIGFyZ3VtZW50IGlzIHRoZSBudW1iZXIgb2YgcG9pbnRzIGF3YXJkZWQuXHJcbiAgcHVibGljIHJlYWRvbmx5IGNvcnJlY3RFbWl0dGVyOiBFbWl0dGVyPFtudW1iZXJdPjtcclxuXHJcbiAgLy8gRmlyZXMgd2hlbiB0aGUgZ3Vlc3MgaXMgY2hlY2tlZCBhbmQgZm91bmQgdG8gYmUgaW5jb3JyZWN0LlxyXG4gIHB1YmxpYyByZWFkb25seSBpbmNvcnJlY3RFbWl0dGVyOiBFbWl0dGVyO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gbGV2ZWxOdW1iZXIgLSBudW1iZXJlZCBzdGFydGluZyBmcm9tIDFcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsZXZlbE51bWJlcjogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM6IFdhdmVHYW1lTGV2ZWxPcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBBc3NlcnRVdGlscy5hc3NlcnRQb3NpdGl2ZUludGVnZXIoIGxldmVsTnVtYmVyICk7IC8vIG51bWJlcmVkIHN0YXJ0aW5nIGZyb20gMVxyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8V2F2ZUdhbWVMZXZlbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBQaGV0aW9PYmplY3RPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBnZXROdW1iZXJPZk5vblplcm9IYXJtb25pY3M6ICgpID0+IGxldmVsTnVtYmVyLFxyXG5cclxuICAgICAgc3RhdHVzQmFyTWVzc2FnZVByb3BlcnR5OiBuZXcgUGF0dGVyblN0cmluZ1Byb3BlcnR5KCBGb3VyaWVyTWFraW5nV2F2ZXNTdHJpbmdzLm1hdGNoVXNpbmdOSGFybW9uaWNzU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBsZXZlbE51bWJlcjogbGV2ZWxOdW1iZXIsXHJcbiAgICAgICAgbnVtYmVyT2ZIYXJtb25pY3M6IGxldmVsTnVtYmVyXHJcbiAgICAgIH0gKSxcclxuXHJcbiAgICAgIGluZm9EaWFsb2dEZXNjcmlwdGlvblByb3BlcnR5OiBuZXcgUGF0dGVyblN0cmluZ1Byb3BlcnR5KCBGb3VyaWVyTWFraW5nV2F2ZXNTdHJpbmdzLmluZm9OSGFybW9uaWNzU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBsZXZlbE51bWJlcjogbGV2ZWxOdW1iZXIsXHJcbiAgICAgICAgbnVtYmVyT2ZIYXJtb25pY3M6IGxldmVsTnVtYmVyXHJcbiAgICAgIH0gKSxcclxuXHJcbiAgICAgIHBoZXRpb1R5cGU6IFdhdmVHYW1lTGV2ZWwuV2F2ZUdhbWVMZXZlbElPLFxyXG4gICAgICBwaGV0aW9TdGF0ZTogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIE51bWJlci5pc0ludGVnZXIoIG9wdGlvbnMuZGVmYXVsdE51bWJlck9mQW1wbGl0dWRlQ29udHJvbHMgKSAmJiBvcHRpb25zLmRlZmF1bHROdW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzID49IDAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMuZGVmYXVsdE51bWJlck9mQW1wbGl0dWRlQ29udHJvbHMgPj0gbGV2ZWxOdW1iZXIgJiYgb3B0aW9ucy5kZWZhdWx0TnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9scyA8PSBGTVdDb25zdGFudHMuTUFYX0hBUk1PTklDUyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5sZXZlbE51bWJlciA9IGxldmVsTnVtYmVyO1xyXG4gICAgdGhpcy5zdGF0dXNCYXJNZXNzYWdlUHJvcGVydHkgPSBvcHRpb25zLnN0YXR1c0Jhck1lc3NhZ2VQcm9wZXJ0eTtcclxuICAgIHRoaXMuaW5mb0RpYWxvZ0Rlc2NyaXB0aW9uUHJvcGVydHkgPSBvcHRpb25zLmluZm9EaWFsb2dEZXNjcmlwdGlvblByb3BlcnR5O1xyXG5cclxuICAgIHRoaXMuZGVmYXVsdE51bWJlck9mQW1wbGl0dWRlQ29udHJvbHMgPSBvcHRpb25zLmRlZmF1bHROdW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzO1xyXG5cclxuICAgIHRoaXMuc2NvcmVQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMCwge1xyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgIGlzVmFsaWRWYWx1ZTogdmFsdWUgPT4gKCB2YWx1ZSA+PSAwICksXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Njb3JlUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmlzU29sdmVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2lzU29sdmVkUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hbXBsaXR1ZGVzR2VuZXJhdG9yID0gbmV3IEFtcGxpdHVkZXNHZW5lcmF0b3IoIHtcclxuICAgICAgZ2V0TnVtYmVyT2ZOb25aZXJvSGFybW9uaWNzOiBvcHRpb25zLmdldE51bWJlck9mTm9uWmVyb0hhcm1vbmljc1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGZpcnN0QW5zd2VyID0gKCB0aGlzLmxldmVsTnVtYmVyID09PSA1ICYmIEZNV1F1ZXJ5UGFyYW1ldGVycy5hbnN3ZXI1ICkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGTVdRdWVyeVBhcmFtZXRlcnMuYW5zd2VyNSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW1wbGl0dWRlc0dlbmVyYXRvci5jcmVhdGVBbXBsaXR1ZGVzKCk7XHJcblxyXG4gICAgdGhpcy5hbnN3ZXJTZXJpZXMgPSBuZXcgRm91cmllclNlcmllcygge1xyXG4gICAgICBhbXBsaXR1ZGVzOiBmaXJzdEFuc3dlcixcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhbnN3ZXJTZXJpZXMnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmd1ZXNzU2VyaWVzID0gbmV3IEZvdXJpZXJTZXJpZXMoIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdndWVzc1NlcmllcycgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuaXNNYXRjaGVkUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIHRoaXMuZ3Vlc3NTZXJpZXMuYW1wbGl0dWRlc1Byb3BlcnR5LCB0aGlzLmFuc3dlclNlcmllcy5hbXBsaXR1ZGVzUHJvcGVydHkgXSxcclxuICAgICAgKCBndWVzc0FtcGxpdHVkZXMsIGFuc3dlckFtcGxpdHVkZXMgKSA9PiB7XHJcbiAgICAgICAgbGV0IGlzTWF0Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgZ3Vlc3NBbXBsaXR1ZGVzLmxlbmd0aCAmJiBpc01hdGNoZWQ7IGkrKyApIHtcclxuICAgICAgICAgIGlzTWF0Y2hlZCA9IE1hdGguYWJzKCBndWVzc0FtcGxpdHVkZXNbIGkgXSAtIGFuc3dlckFtcGxpdHVkZXNbIGkgXSApIDw9IEFNUExJVFVERV9USFJFU0hPTEQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc01hdGNoZWQ7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLm51bWJlck9mQW1wbGl0dWRlQ29udHJvbHNQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggb3B0aW9ucy5kZWZhdWx0TnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9scywge1xyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgIHJhbmdlOiBuZXcgUmFuZ2UoIHRoaXMuYW5zd2VyU2VyaWVzLmdldE51bWJlck9mTm9uWmVyb0hhcm1vbmljcygpLCB0aGlzLmFuc3dlclNlcmllcy5oYXJtb25pY3MubGVuZ3RoICksXHJcbiAgICAgIHJhbmdlUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ0RldGVybWluZXMgdGhlIHJhbmdlIG9mIHRoZSBBbXBsaXR1ZGUgQ29udHJvbHMgc3Bpbm5lcicsXHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBSYW5nZS5SYW5nZUlPXHJcbiAgICAgIH0sXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sc1Byb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5lbXBoYXNpemVkSGFybW9uaWNzID0gbmV3IEVtcGhhc2l6ZWRIYXJtb25pY3MoKTtcclxuXHJcbiAgICAvLyBQYXJlbnQgdGFuZGVtIGZvciBhbGwgY2hhcnRzXHJcbiAgICBjb25zdCBjaGFydHNUYW5kZW0gPSBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdjaGFydHMnICk7XHJcblxyXG4gICAgdGhpcy5hbXBsaXR1ZGVzQ2hhcnQgPSBuZXcgV2F2ZUdhbWVBbXBsaXR1ZGVzQ2hhcnQoIHRoaXMuYW5zd2VyU2VyaWVzLCB0aGlzLmd1ZXNzU2VyaWVzLCB0aGlzLmVtcGhhc2l6ZWRIYXJtb25pY3MsXHJcbiAgICAgIHRoaXMubnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sc1Byb3BlcnR5LCBjaGFydHNUYW5kZW0uY3JlYXRlVGFuZGVtKCAnYW1wbGl0dWRlc0NoYXJ0JyApICk7XHJcblxyXG4gICAgdGhpcy5oYXJtb25pY3NDaGFydCA9IG5ldyBXYXZlR2FtZUhhcm1vbmljc0NoYXJ0KCB0aGlzLmd1ZXNzU2VyaWVzLCB0aGlzLmVtcGhhc2l6ZWRIYXJtb25pY3MsIERPTUFJTiwgU0VSSUVTX1RZUEUsIHQsXHJcbiAgICAgIERpc2NyZXRlQXhpc0Rlc2NyaXB0aW9ucy5ERUZBVUxUX1hfQVhJU19ERVNDUklQVElPTiwgRGlzY3JldGVBeGlzRGVzY3JpcHRpb25zLkRFRkFVTFRfWV9BWElTX0RFU0NSSVBUSU9OLFxyXG4gICAgICBjaGFydHNUYW5kZW0uY3JlYXRlVGFuZGVtKCAnaGFybW9uaWNzQ2hhcnQnICkgKTtcclxuXHJcbiAgICB0aGlzLnN1bUNoYXJ0ID0gbmV3IFdhdmVHYW1lU3VtQ2hhcnQoIHRoaXMuYW5zd2VyU2VyaWVzLCB0aGlzLmd1ZXNzU2VyaWVzLCBET01BSU4sIFNFUklFU19UWVBFLCB0LFxyXG4gICAgICBEaXNjcmV0ZUF4aXNEZXNjcmlwdGlvbnMuREVGQVVMVF9YX0FYSVNfREVTQ1JJUFRJT04sIGNoYXJ0c1RhbmRlbS5jcmVhdGVUYW5kZW0oICdzdW1DaGFydCcgKSApO1xyXG5cclxuICAgIHRoaXMubmV3V2F2ZWZvcm1FbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcclxuXHJcbiAgICB0aGlzLmNvcnJlY3RFbWl0dGVyID0gbmV3IEVtaXR0ZXIoIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdjb3JyZWN0RW1pdHRlcicgKSxcclxuICAgICAgcGFyYW1ldGVyczogW1xyXG4gICAgICAgIHsgbmFtZTogJ3BvaW50c0F3YXJkZWQnLCBwaGV0aW9UeXBlOiBOdW1iZXJJTyB9XHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmluY29ycmVjdEVtaXR0ZXIgPSBuZXcgRW1pdHRlcigge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2luY29ycmVjdEVtaXR0ZXInIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2NvcmVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5pc1NvbHZlZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICAvLyBOb3QgbmVjZXNzYXJ5IHRvIHJlc2V0IHRoaXMubnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sc1Byb3BlcnR5XHJcbiAgICB0aGlzLmVtcGhhc2l6ZWRIYXJtb25pY3MucmVzZXQoKTtcclxuXHJcbiAgICAvLyBJZiByZXNldCB3YXMgbm90IGNhbGxlZCBhcyB0aGUgcmVzdWx0IG9mIHNldHRpbmcgc3RhdGUsIHN0YXJ0IHdpdGggYSBuZXcgY2hhbGxlbmdlLlxyXG4gICAgaWYgKCAhcGhldC5qb2lzdC5zaW0uaXNTZXR0aW5nUGhldGlvU3RhdGVQcm9wZXJ0eS52YWx1ZSApIHtcclxuICAgICAgdGhpcy5uZXdXYXZlZm9ybSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyBhbGwgYW1wbGl0dWRlcyB0byB6ZXJvIGZvciB0aGUgZ3Vlc3MuXHJcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIGVyYXNlciBidXR0b24gaXMgcHJlc3NlZC5cclxuICAgKi9cclxuICBwdWJsaWMgZXJhc2VBbXBsaXR1ZGVzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5ndWVzc1Nlcmllcy5zZXRBbGxBbXBsaXR1ZGVzKCAwICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgdGhlIHVzZXIncyBndWVzcywgYXdhcmRzIHBvaW50cyBpZiBhcHByb3ByaWF0ZSwgYW5kIG5vdGlmaWVzIGxpc3RlbmVycyBvZiB0aGUgcmVzdWx0LlxyXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZSAnQ2hlY2sgQW5zd2VyJyBidXR0b24gaXMgcHJlc3NlZC5cclxuICAgKi9cclxuICBwdWJsaWMgY2hlY2tBbnN3ZXIoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhdGhpcy5pc1NvbHZlZFByb3BlcnR5LnZhbHVlICk7XHJcbiAgICBpZiAoIHRoaXMuaXNNYXRjaGVkUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgIGNvbnN0IHBvaW50QXdhcmRlZCA9IEZNV0NvbnN0YW50cy5QT0lOVFNfUEVSX0NIQUxMRU5HRTtcclxuICAgICAgdGhpcy5zY29yZVByb3BlcnR5LnZhbHVlICs9IHBvaW50QXdhcmRlZDtcclxuICAgICAgdGhpcy5pc1NvbHZlZFByb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuICAgICAgdGhpcy5jb3JyZWN0RW1pdHRlci5lbWl0KCBwb2ludEF3YXJkZWQgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmluY29ycmVjdEVtaXR0ZXIuZW1pdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvd3MgdGhlIGFuc3dlciBmb3IgdGhlIGNoYWxsZW5nZS5cclxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgJ1Nob3cgQW5zd2VyJyBidXR0b24gaXMgcHJlc3NlZC5cclxuICAgKi9cclxuICBwdWJsaWMgc2hvd0Fuc3dlcigpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNTb2x2ZWRQcm9wZXJ0eS52YWx1ZSA9IHRydWU7XHJcbiAgICB0aGlzLmd1ZXNzU2VyaWVzLnNldEFtcGxpdHVkZXMoIHRoaXMuYW5zd2VyU2VyaWVzLmFtcGxpdHVkZXNQcm9wZXJ0eS52YWx1ZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBjaGFsbGVuZ2UsIGJ5IHNldHRpbmdzIGFsbCBndWVzcyBhbXBsaXR1ZGVzIHRvIHplcm8sIGFuZCBjcmVhdGluZyBhIG5ldyBzZXQgb2YgYW5zd2VyIGFtcGxpdHVkZXMuXHJcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlICdOZXcgV2F2ZWZvcm0nIGJ1dHRvbiBpcyBwcmVzc2VkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBuZXdXYXZlZm9ybSgpOiB2b2lkIHtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGd1ZXNzIGFtcGxpdHVkZXMgdG8gemVyby5cclxuICAgIHRoaXMuZ3Vlc3NTZXJpZXMuc2V0QWxsQW1wbGl0dWRlcyggMCApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIG5ldyBhbnN3ZXIuXHJcbiAgICBjb25zdCBwcmV2aW91c0FtcGxpdHVkZXMgPSB0aGlzLmFuc3dlclNlcmllcy5hbXBsaXR1ZGVzUHJvcGVydHkudmFsdWU7XHJcbiAgICBjb25zdCBuZXdBbXBsaXR1ZGVzID0gdGhpcy5hbXBsaXR1ZGVzR2VuZXJhdG9yLmNyZWF0ZUFtcGxpdHVkZXMoIHByZXZpb3VzQW1wbGl0dWRlcyApO1xyXG4gICAgdGhpcy5hbnN3ZXJTZXJpZXMuc2V0QW1wbGl0dWRlcyggbmV3QW1wbGl0dWRlcyApO1xyXG4gICAgcGhldC5sb2cgJiYgcGhldC5sb2coIGBuZXdXYXZlZm9ybTogbGV2ZWw9JHt0aGlzLmxldmVsTnVtYmVyfSBhbnN3ZXI9WyR7bmV3QW1wbGl0dWRlc31dYCApO1xyXG5cclxuICAgIC8vIFRoaW5ncyB0aGF0IG5lZWQgdG8gYmUgcmVzZXQgd2hlbiB3ZSBzdGFydCBhIG5ldyBjaGFsbGVuZ2UuXHJcbiAgICB0aGlzLmlzU29sdmVkUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuZW1waGFzaXplZEhhcm1vbmljcy5yZXNldCgpO1xyXG5cclxuICAgIC8vIEFkanVzdCB0aGUgdmFsdWUgYW5kIHJhbmdlIG9mIG51bWJlck9mQW1wbGl0dWRlQ29udHJvbHNQcm9wZXJ0eSB0byBtYXRjaCB0aGUgYW5zd2VyLlxyXG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgbGV2ZWwsIGtlZXAgdGhlIGN1cnJlbnQgdmFsdWUuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2ZvdXJpZXItbWFraW5nLXdhdmVzL2lzc3Vlcy82MyNpc3N1ZWNvbW1lbnQtODQ1NDY2OTcxXHJcbiAgICBjb25zdCBtaW4gPSB0aGlzLmFuc3dlclNlcmllcy5nZXROdW1iZXJPZk5vblplcm9IYXJtb25pY3MoKTtcclxuICAgIGNvbnN0IG1heCA9IHRoaXMubnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sc1Byb3BlcnR5LnJhbmdlUHJvcGVydHkudmFsdWUubWF4O1xyXG4gICAgY29uc3QgdmFsdWUgPSBNYXRoLm1heCggdGhpcy5udW1iZXJPZkFtcGxpdHVkZUNvbnRyb2xzUHJvcGVydHkudmFsdWUsIHRoaXMuZGVmYXVsdE51bWJlck9mQW1wbGl0dWRlQ29udHJvbHMgKTtcclxuICAgIHRoaXMubnVtYmVyT2ZBbXBsaXR1ZGVDb250cm9sc1Byb3BlcnR5LnNldFZhbHVlQW5kUmFuZ2UoIHZhbHVlLCBuZXcgUmFuZ2UoIG1pbiwgbWF4ICkgKTtcclxuXHJcbiAgICAvLyBOb3RpZnkgbGlzdGVuZXJzIHRoYXQgdGhlIG5ldyB3YXZlZm9ybSBpcyBmdWxseSBpbml0aWFsaXplZFxyXG4gICAgdGhpcy5uZXdXYXZlZm9ybUVtaXR0ZXIuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2F2ZUdhbWVMZXZlbElPIGhhbmRsZXMgUGhFVC1pTyBzZXJpYWxpemF0aW9uIG9mIFdhdmVHYW1lTGV2ZWwuIFNpbmNlIGFsbCBXYXZlR2FtZUxldmVscyBhcmUgaW5zdGFudGlhdGVkIGF0XHJcbiAgICogc3RhcnR1cCwgaXQgaW1wbGVtZW50cyAnUmVmZXJlbmNlIHR5cGUgc2VyaWFsaXphdGlvbicsIGFzIGRlc2NyaWJlZCBpbiB0aGUgU2VyaWFsaXphdGlvbiBzZWN0aW9uIG9mXHJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtaW8vYmxvYi9tYXN0ZXIvZG9jL3BoZXQtaW8taW5zdHJ1bWVudGF0aW9uLXRlY2huaWNhbC1ndWlkZS5tZCNzZXJpYWxpemF0aW9uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBXYXZlR2FtZUxldmVsSU8gPSBuZXcgSU9UeXBlKCAnV2F2ZUdhbWVMZXZlbElPJywge1xyXG4gICAgdmFsdWVUeXBlOiBXYXZlR2FtZUxldmVsLFxyXG4gICAgc3VwZXJ0eXBlOiBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPIClcclxuICB9ICk7XHJcbn1cclxuXHJcbmZvdXJpZXJNYWtpbmdXYXZlcy5yZWdpc3RlciggJ1dhdmVHYW1lTGV2ZWwnLCBXYXZlR2FtZUxldmVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxPQUFPLE1BQU0sZ0NBQWdDO0FBQ3BELE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MscUJBQXFCLE1BQU0sOENBQThDO0FBR2hGLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsU0FBUyxNQUFNLHVDQUF1QztBQUU3RCxPQUFPQyxXQUFXLE1BQU0sMENBQTBDO0FBQ2xFLE9BQU9DLFlBQVksTUFBK0IsdUNBQXVDO0FBQ3pGLE9BQU9DLE1BQU0sTUFBTSx1Q0FBdUM7QUFDMUQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0Msa0JBQWtCLE1BQU0sb0NBQW9DO0FBQ25FLE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsbUJBQW1CLE1BQU0sMkNBQTJDO0FBQzNFLE9BQU9DLGFBQWEsTUFBTSxxQ0FBcUM7QUFDL0QsT0FBT0MsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyx3QkFBd0IsTUFBTSxrREFBa0Q7QUFDdkYsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLHlCQUF5QixNQUFNLG9DQUFvQztBQUMxRSxPQUFPQyxt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