// Copyright 2016-2022, University of Colorado Boulder

/**
 * The main screen class for the 'Resistance in a Wire' simulation.  This is where the main model and view instances are
 * created and inserted into the framework.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import SliderControlsAndBasicActionsKeyboardHelpContent from '../../../scenery-phet/js/keyboard/help/SliderControlsAndBasicActionsKeyboardHelpContent.js';
import resistanceInAWire from '../resistanceInAWire.js';
import ResistanceInAWireModel from './model/ResistanceInAWireModel.js';
import ResistanceInAWireScreenView from './view/ResistanceInAWireScreenView.js';
class ResistanceInAWireScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    super(() => new ResistanceInAWireModel(tandem.createTandem('model')), model => new ResistanceInAWireScreenView(model, tandem.createTandem('view')), {
      backgroundColorProperty: new Property('#ffffdf'),
      tandem: tandem,
      createKeyboardHelpNode: () => new SliderControlsAndBasicActionsKeyboardHelpContent()
    });
  }
}
resistanceInAWire.register('ResistanceInAWireScreen', ResistanceInAWireScreen);
export default ResistanceInAWireScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNsaWRlckNvbnRyb2xzQW5kQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwQ29udGVudCIsInJlc2lzdGFuY2VJbkFXaXJlIiwiUmVzaXN0YW5jZUluQVdpcmVNb2RlbCIsIlJlc2lzdGFuY2VJbkFXaXJlU2NyZWVuVmlldyIsIlJlc2lzdGFuY2VJbkFXaXJlU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiY3JlYXRlS2V5Ym9hcmRIZWxwTm9kZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVzaXN0YW5jZUluQVdpcmVTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIG1haW4gc2NyZWVuIGNsYXNzIGZvciB0aGUgJ1Jlc2lzdGFuY2UgaW4gYSBXaXJlJyBzaW11bGF0aW9uLiAgVGhpcyBpcyB3aGVyZSB0aGUgbWFpbiBtb2RlbCBhbmQgdmlldyBpbnN0YW5jZXMgYXJlXHJcbiAqIGNyZWF0ZWQgYW5kIGluc2VydGVkIGludG8gdGhlIGZyYW1ld29yay5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNsaWRlckNvbnRyb2xzQW5kQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwQ29udGVudCBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMva2V5Ym9hcmQvaGVscC9TbGlkZXJDb250cm9sc0FuZEJhc2ljQWN0aW9uc0tleWJvYXJkSGVscENvbnRlbnQuanMnO1xyXG5pbXBvcnQgcmVzaXN0YW5jZUluQVdpcmUgZnJvbSAnLi4vcmVzaXN0YW5jZUluQVdpcmUuanMnO1xyXG5pbXBvcnQgUmVzaXN0YW5jZUluQVdpcmVNb2RlbCBmcm9tICcuL21vZGVsL1Jlc2lzdGFuY2VJbkFXaXJlTW9kZWwuanMnO1xyXG5pbXBvcnQgUmVzaXN0YW5jZUluQVdpcmVTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9SZXNpc3RhbmNlSW5BV2lyZVNjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgUmVzaXN0YW5jZUluQVdpcmVTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRhbmRlbSApIHtcclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgUmVzaXN0YW5jZUluQVdpcmVNb2RlbCggdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBSZXNpc3RhbmNlSW5BV2lyZVNjcmVlblZpZXcoIG1vZGVsLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKSApLCB7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggJyNmZmZmZGYnICksXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgICAgY3JlYXRlS2V5Ym9hcmRIZWxwTm9kZTogKCkgPT4gbmV3IFNsaWRlckNvbnRyb2xzQW5kQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwQ29udGVudCgpXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5yZXNpc3RhbmNlSW5BV2lyZS5yZWdpc3RlciggJ1Jlc2lzdGFuY2VJbkFXaXJlU2NyZWVuJywgUmVzaXN0YW5jZUluQVdpcmVTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgUmVzaXN0YW5jZUluQVdpcmVTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLGdEQUFnRCxNQUFNLDRGQUE0RjtBQUN6SixPQUFPQyxpQkFBaUIsTUFBTSx5QkFBeUI7QUFDdkQsT0FBT0Msc0JBQXNCLE1BQU0sbUNBQW1DO0FBQ3RFLE9BQU9DLDJCQUEyQixNQUFNLHVDQUF1QztBQUUvRSxNQUFNQyx1QkFBdUIsU0FBU0wsTUFBTSxDQUFDO0VBRTNDO0FBQ0Y7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxNQUFNLEVBQUc7SUFDcEIsS0FBSyxDQUNILE1BQU0sSUFBSUosc0JBQXNCLENBQUVJLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQ2xFQyxLQUFLLElBQUksSUFBSUwsMkJBQTJCLENBQUVLLEtBQUssRUFBRUYsTUFBTSxDQUFDQyxZQUFZLENBQUUsTUFBTyxDQUFFLENBQUMsRUFBRTtNQUNoRkUsdUJBQXVCLEVBQUUsSUFBSVgsUUFBUSxDQUFFLFNBQVUsQ0FBQztNQUNsRFEsTUFBTSxFQUFFQSxNQUFNO01BQ2RJLHNCQUFzQixFQUFFQSxDQUFBLEtBQU0sSUFBSVYsZ0RBQWdELENBQUM7SUFDckYsQ0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBQyxpQkFBaUIsQ0FBQ1UsUUFBUSxDQUFFLHlCQUF5QixFQUFFUCx1QkFBd0IsQ0FBQztBQUNoRixlQUFlQSx1QkFBdUIifQ==