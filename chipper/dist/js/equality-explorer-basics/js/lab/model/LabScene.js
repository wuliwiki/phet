// Copyright 2018-2022, University of Colorado Boulder

/**
 * The sole scene in the 'Lab' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import sphere_png from '../../../../equality-explorer/images/sphere_png.js';
import sphereShadow_png from '../../../../equality-explorer/images/sphereShadow_png.js';
import square_png from '../../../../equality-explorer/images/square_png.js';
import squareShadow_png from '../../../../equality-explorer/images/squareShadow_png.js';
import BasicsScene from '../../../../equality-explorer/js/basics/model/BasicsScene.js';
import ObjectVariable from '../../../../equality-explorer/js/common/model/ObjectVariable.js';
import triangle_png from '../../../images/triangle_png.js';
import triangleShadow_png from '../../../images/triangleShadow_png.js';
import equalityExplorerBasics from '../../equalityExplorerBasics.js';
export default class LabScene extends BasicsScene {
  constructor(tandem) {
    const variablesTandem = tandem.createTandem('variables');
    const variables = [
    // sphere
    new ObjectVariable({
      image: sphere_png,
      shadow: sphereShadow_png,
      value: 1,
      tandem: variablesTandem.createTandem('sphere')
    }),
    // square
    new ObjectVariable({
      image: square_png,
      shadow: squareShadow_png,
      value: 2,
      tandem: variablesTandem.createTandem('square')
    }),
    // triangle
    new ObjectVariable({
      image: triangle_png,
      shadow: triangleShadow_png,
      value: 3,
      tandem: variablesTandem.createTandem('triangle')
    })];
    super(variables, {
      numberOfSnapshots: 4,
      // fewer snapshots in this screen because we're short on vertical space
      tandem: tandem
    });
  }
}
equalityExplorerBasics.register('LabScene', LabScene);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzcGhlcmVfcG5nIiwic3BoZXJlU2hhZG93X3BuZyIsInNxdWFyZV9wbmciLCJzcXVhcmVTaGFkb3dfcG5nIiwiQmFzaWNzU2NlbmUiLCJPYmplY3RWYXJpYWJsZSIsInRyaWFuZ2xlX3BuZyIsInRyaWFuZ2xlU2hhZG93X3BuZyIsImVxdWFsaXR5RXhwbG9yZXJCYXNpY3MiLCJMYWJTY2VuZSIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwidmFyaWFibGVzVGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwidmFyaWFibGVzIiwiaW1hZ2UiLCJzaGFkb3ciLCJ2YWx1ZSIsIm51bWJlck9mU25hcHNob3RzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMYWJTY2VuZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgc29sZSBzY2VuZSBpbiB0aGUgJ0xhYicgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBzcGhlcmVfcG5nIGZyb20gJy4uLy4uLy4uLy4uL2VxdWFsaXR5LWV4cGxvcmVyL2ltYWdlcy9zcGhlcmVfcG5nLmpzJztcclxuaW1wb3J0IHNwaGVyZVNoYWRvd19wbmcgZnJvbSAnLi4vLi4vLi4vLi4vZXF1YWxpdHktZXhwbG9yZXIvaW1hZ2VzL3NwaGVyZVNoYWRvd19wbmcuanMnO1xyXG5pbXBvcnQgc3F1YXJlX3BuZyBmcm9tICcuLi8uLi8uLi8uLi9lcXVhbGl0eS1leHBsb3Jlci9pbWFnZXMvc3F1YXJlX3BuZy5qcyc7XHJcbmltcG9ydCBzcXVhcmVTaGFkb3dfcG5nIGZyb20gJy4uLy4uLy4uLy4uL2VxdWFsaXR5LWV4cGxvcmVyL2ltYWdlcy9zcXVhcmVTaGFkb3dfcG5nLmpzJztcclxuaW1wb3J0IEJhc2ljc1NjZW5lIGZyb20gJy4uLy4uLy4uLy4uL2VxdWFsaXR5LWV4cGxvcmVyL2pzL2Jhc2ljcy9tb2RlbC9CYXNpY3NTY2VuZS5qcyc7XHJcbmltcG9ydCBPYmplY3RWYXJpYWJsZSBmcm9tICcuLi8uLi8uLi8uLi9lcXVhbGl0eS1leHBsb3Jlci9qcy9jb21tb24vbW9kZWwvT2JqZWN0VmFyaWFibGUuanMnO1xyXG5pbXBvcnQgdHJpYW5nbGVfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy90cmlhbmdsZV9wbmcuanMnO1xyXG5pbXBvcnQgdHJpYW5nbGVTaGFkb3dfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy90cmlhbmdsZVNoYWRvd19wbmcuanMnO1xyXG5pbXBvcnQgZXF1YWxpdHlFeHBsb3JlckJhc2ljcyBmcm9tICcuLi8uLi9lcXVhbGl0eUV4cGxvcmVyQmFzaWNzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYlNjZW5lIGV4dGVuZHMgQmFzaWNzU2NlbmUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IHZhcmlhYmxlc1RhbmRlbSA9IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2YXJpYWJsZXMnICk7XHJcblxyXG4gICAgY29uc3QgdmFyaWFibGVzID0gW1xyXG5cclxuICAgICAgLy8gc3BoZXJlXHJcbiAgICAgIG5ldyBPYmplY3RWYXJpYWJsZSgge1xyXG4gICAgICAgIGltYWdlOiBzcGhlcmVfcG5nLFxyXG4gICAgICAgIHNoYWRvdzogc3BoZXJlU2hhZG93X3BuZyxcclxuICAgICAgICB2YWx1ZTogMSxcclxuICAgICAgICB0YW5kZW06IHZhcmlhYmxlc1RhbmRlbS5jcmVhdGVUYW5kZW0oICdzcGhlcmUnIClcclxuICAgICAgfSApLFxyXG5cclxuICAgICAgLy8gc3F1YXJlXHJcbiAgICAgIG5ldyBPYmplY3RWYXJpYWJsZSgge1xyXG4gICAgICAgIGltYWdlOiBzcXVhcmVfcG5nLFxyXG4gICAgICAgIHNoYWRvdzogc3F1YXJlU2hhZG93X3BuZyxcclxuICAgICAgICB2YWx1ZTogMixcclxuICAgICAgICB0YW5kZW06IHZhcmlhYmxlc1RhbmRlbS5jcmVhdGVUYW5kZW0oICdzcXVhcmUnIClcclxuICAgICAgfSApLFxyXG5cclxuICAgICAgLy8gdHJpYW5nbGVcclxuICAgICAgbmV3IE9iamVjdFZhcmlhYmxlKCB7XHJcbiAgICAgICAgaW1hZ2U6IHRyaWFuZ2xlX3BuZyxcclxuICAgICAgICBzaGFkb3c6IHRyaWFuZ2xlU2hhZG93X3BuZyxcclxuICAgICAgICB2YWx1ZTogMyxcclxuICAgICAgICB0YW5kZW06IHZhcmlhYmxlc1RhbmRlbS5jcmVhdGVUYW5kZW0oICd0cmlhbmdsZScgKVxyXG4gICAgICB9IClcclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIHZhcmlhYmxlcywge1xyXG4gICAgICBudW1iZXJPZlNuYXBzaG90czogNCwgLy8gZmV3ZXIgc25hcHNob3RzIGluIHRoaXMgc2NyZWVuIGJlY2F1c2Ugd2UncmUgc2hvcnQgb24gdmVydGljYWwgc3BhY2VcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmVxdWFsaXR5RXhwbG9yZXJCYXNpY3MucmVnaXN0ZXIoICdMYWJTY2VuZScsIExhYlNjZW5lICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxvREFBb0Q7QUFDM0UsT0FBT0MsZ0JBQWdCLE1BQU0sMERBQTBEO0FBQ3ZGLE9BQU9DLFVBQVUsTUFBTSxvREFBb0Q7QUFDM0UsT0FBT0MsZ0JBQWdCLE1BQU0sMERBQTBEO0FBQ3ZGLE9BQU9DLFdBQVcsTUFBTSw4REFBOEQ7QUFDdEYsT0FBT0MsY0FBYyxNQUFNLGlFQUFpRTtBQUM1RixPQUFPQyxZQUFZLE1BQU0saUNBQWlDO0FBQzFELE9BQU9DLGtCQUFrQixNQUFNLHVDQUF1QztBQUN0RSxPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFHcEUsZUFBZSxNQUFNQyxRQUFRLFNBQVNMLFdBQVcsQ0FBQztFQUV6Q00sV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBRW5DLE1BQU1DLGVBQWUsR0FBR0QsTUFBTSxDQUFDRSxZQUFZLENBQUUsV0FBWSxDQUFDO0lBRTFELE1BQU1DLFNBQVMsR0FBRztJQUVoQjtJQUNBLElBQUlULGNBQWMsQ0FBRTtNQUNsQlUsS0FBSyxFQUFFZixVQUFVO01BQ2pCZ0IsTUFBTSxFQUFFZixnQkFBZ0I7TUFDeEJnQixLQUFLLEVBQUUsQ0FBQztNQUNSTixNQUFNLEVBQUVDLGVBQWUsQ0FBQ0MsWUFBWSxDQUFFLFFBQVM7SUFDakQsQ0FBRSxDQUFDO0lBRUg7SUFDQSxJQUFJUixjQUFjLENBQUU7TUFDbEJVLEtBQUssRUFBRWIsVUFBVTtNQUNqQmMsTUFBTSxFQUFFYixnQkFBZ0I7TUFDeEJjLEtBQUssRUFBRSxDQUFDO01BQ1JOLE1BQU0sRUFBRUMsZUFBZSxDQUFDQyxZQUFZLENBQUUsUUFBUztJQUNqRCxDQUFFLENBQUM7SUFFSDtJQUNBLElBQUlSLGNBQWMsQ0FBRTtNQUNsQlUsS0FBSyxFQUFFVCxZQUFZO01BQ25CVSxNQUFNLEVBQUVULGtCQUFrQjtNQUMxQlUsS0FBSyxFQUFFLENBQUM7TUFDUk4sTUFBTSxFQUFFQyxlQUFlLENBQUNDLFlBQVksQ0FBRSxVQUFXO0lBQ25ELENBQUUsQ0FBQyxDQUNKO0lBRUQsS0FBSyxDQUFFQyxTQUFTLEVBQUU7TUFDaEJJLGlCQUFpQixFQUFFLENBQUM7TUFBRTtNQUN0QlAsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQUgsc0JBQXNCLENBQUNXLFFBQVEsQ0FBRSxVQUFVLEVBQUVWLFFBQVMsQ0FBQyJ9