// Copyright 2020-2023, University of Colorado Boulder

/**
 * QUnit tests for Emitter
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import TinyProperty from './TinyProperty.js';
QUnit.module('TinyProperty');
QUnit.test('TinyProperty Basics', assert => {
  const property = new TinyProperty('x');
  property.link(value => {
    console.log(value);
  });
  assert.ok(true, 'one test');
});
QUnit.test('TinyProperty onBeforeNotify', assert => {
  class MyObservedObject {
    constructor() {
      this.hasFun = false;
      this.hadFun = false;
      this.hasFunProperty = new TinyProperty(false, (newValue, oldValue) => {
        this.hasFun = newValue;
        this.hadFun = oldValue;
      });
    }
  }
  const x = new MyObservedObject();
  x.hasFunProperty.lazyLink((newValue, oldValue) => {
    assert.ok(x.hadFun === oldValue, 'old value should match');
    assert.ok(x.hasFun === newValue, 'new value should match');
  });
  x.hasFunProperty.value = true;
  x.hasFunProperty.value = false;
  x.hasFunProperty.value = true;

  // TODO: what is this testing? https://github.com/phetsims/axon/issues/421
  // x.hasFunProperty.value = 42;
  // x.hasFunProperty.value = 'duh';
  // x.hasFunProperty.value = 'always';
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW55UHJvcGVydHkiLCJRVW5pdCIsIm1vZHVsZSIsInRlc3QiLCJhc3NlcnQiLCJwcm9wZXJ0eSIsImxpbmsiLCJ2YWx1ZSIsImNvbnNvbGUiLCJsb2ciLCJvayIsIk15T2JzZXJ2ZWRPYmplY3QiLCJjb25zdHJ1Y3RvciIsImhhc0Z1biIsImhhZEZ1biIsImhhc0Z1blByb3BlcnR5IiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIngiLCJsYXp5TGluayJdLCJzb3VyY2VzIjpbIlRpbnlQcm9wZXJ0eVRlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFFVbml0IHRlc3RzIGZvciBFbWl0dGVyXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUaW55UHJvcGVydHkgZnJvbSAnLi9UaW55UHJvcGVydHkuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnVGlueVByb3BlcnR5JyApO1xyXG5cclxuUVVuaXQudGVzdCggJ1RpbnlQcm9wZXJ0eSBCYXNpY3MnLCBhc3NlcnQgPT4ge1xyXG4gIGNvbnN0IHByb3BlcnR5ID0gbmV3IFRpbnlQcm9wZXJ0eSggJ3gnICk7XHJcbiAgcHJvcGVydHkubGluayggdmFsdWUgPT4ge1xyXG4gICAgY29uc29sZS5sb2coIHZhbHVlICk7XHJcbiAgfSApO1xyXG5cclxuICBhc3NlcnQub2soIHRydWUsICdvbmUgdGVzdCcgKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJ1RpbnlQcm9wZXJ0eSBvbkJlZm9yZU5vdGlmeScsIGFzc2VydCA9PiB7XHJcblxyXG4gIGNsYXNzIE15T2JzZXJ2ZWRPYmplY3Qge1xyXG4gICAgcHVibGljIGhhc0Z1bjogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBoYWRGdW46IGJvb2xlYW4gfCBudWxsO1xyXG4gICAgcHVibGljIGhhc0Z1blByb3BlcnR5OiBUaW55UHJvcGVydHk8Ym9vbGVhbj47XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLmhhc0Z1biA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmhhZEZ1biA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmhhc0Z1blByb3BlcnR5ID0gbmV3IFRpbnlQcm9wZXJ0eSggZmFsc2UsICggbmV3VmFsdWUsIG9sZFZhbHVlICkgPT4ge1xyXG4gICAgICAgIHRoaXMuaGFzRnVuID0gbmV3VmFsdWU7XHJcbiAgICAgICAgdGhpcy5oYWRGdW4gPSBvbGRWYWx1ZTtcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgeCA9IG5ldyBNeU9ic2VydmVkT2JqZWN0KCk7XHJcblxyXG4gIHguaGFzRnVuUHJvcGVydHkubGF6eUxpbmsoICggbmV3VmFsdWUsIG9sZFZhbHVlICkgPT4ge1xyXG4gICAgYXNzZXJ0Lm9rKCB4LmhhZEZ1biA9PT0gb2xkVmFsdWUsICdvbGQgdmFsdWUgc2hvdWxkIG1hdGNoJyApO1xyXG4gICAgYXNzZXJ0Lm9rKCB4Lmhhc0Z1biA9PT0gbmV3VmFsdWUsICduZXcgdmFsdWUgc2hvdWxkIG1hdGNoJyApO1xyXG4gIH0gKTtcclxuXHJcblxyXG4gIHguaGFzRnVuUHJvcGVydHkudmFsdWUgPSB0cnVlO1xyXG4gIHguaGFzRnVuUHJvcGVydHkudmFsdWUgPSBmYWxzZTtcclxuICB4Lmhhc0Z1blByb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuXHJcbiAgLy8gVE9ETzogd2hhdCBpcyB0aGlzIHRlc3Rpbmc/IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9heG9uL2lzc3Vlcy80MjFcclxuICAvLyB4Lmhhc0Z1blByb3BlcnR5LnZhbHVlID0gNDI7XHJcbiAgLy8geC5oYXNGdW5Qcm9wZXJ0eS52YWx1ZSA9ICdkdWgnO1xyXG4gIC8vIHguaGFzRnVuUHJvcGVydHkudmFsdWUgPSAnYWx3YXlzJztcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsWUFBWSxNQUFNLG1CQUFtQjtBQUU1Q0MsS0FBSyxDQUFDQyxNQUFNLENBQUUsY0FBZSxDQUFDO0FBRTlCRCxLQUFLLENBQUNFLElBQUksQ0FBRSxxQkFBcUIsRUFBRUMsTUFBTSxJQUFJO0VBQzNDLE1BQU1DLFFBQVEsR0FBRyxJQUFJTCxZQUFZLENBQUUsR0FBSSxDQUFDO0VBQ3hDSyxRQUFRLENBQUNDLElBQUksQ0FBRUMsS0FBSyxJQUFJO0lBQ3RCQyxPQUFPLENBQUNDLEdBQUcsQ0FBRUYsS0FBTSxDQUFDO0VBQ3RCLENBQUUsQ0FBQztFQUVISCxNQUFNLENBQUNNLEVBQUUsQ0FBRSxJQUFJLEVBQUUsVUFBVyxDQUFDO0FBQy9CLENBQUUsQ0FBQztBQUVIVCxLQUFLLENBQUNFLElBQUksQ0FBRSw2QkFBNkIsRUFBRUMsTUFBTSxJQUFJO0VBRW5ELE1BQU1PLGdCQUFnQixDQUFDO0lBS2RDLFdBQVdBLENBQUEsRUFBRztNQUNuQixJQUFJLENBQUNDLE1BQU0sR0FBRyxLQUFLO01BQ25CLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEtBQUs7TUFDbkIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSWYsWUFBWSxDQUFFLEtBQUssRUFBRSxDQUFFZ0IsUUFBUSxFQUFFQyxRQUFRLEtBQU07UUFDdkUsSUFBSSxDQUFDSixNQUFNLEdBQUdHLFFBQVE7UUFDdEIsSUFBSSxDQUFDRixNQUFNLEdBQUdHLFFBQVE7TUFDeEIsQ0FBRSxDQUFDO0lBQ0w7RUFDRjtFQUVBLE1BQU1DLENBQUMsR0FBRyxJQUFJUCxnQkFBZ0IsQ0FBQyxDQUFDO0VBRWhDTyxDQUFDLENBQUNILGNBQWMsQ0FBQ0ksUUFBUSxDQUFFLENBQUVILFFBQVEsRUFBRUMsUUFBUSxLQUFNO0lBQ25EYixNQUFNLENBQUNNLEVBQUUsQ0FBRVEsQ0FBQyxDQUFDSixNQUFNLEtBQUtHLFFBQVEsRUFBRSx3QkFBeUIsQ0FBQztJQUM1RGIsTUFBTSxDQUFDTSxFQUFFLENBQUVRLENBQUMsQ0FBQ0wsTUFBTSxLQUFLRyxRQUFRLEVBQUUsd0JBQXlCLENBQUM7RUFDOUQsQ0FBRSxDQUFDO0VBR0hFLENBQUMsQ0FBQ0gsY0FBYyxDQUFDUixLQUFLLEdBQUcsSUFBSTtFQUM3QlcsQ0FBQyxDQUFDSCxjQUFjLENBQUNSLEtBQUssR0FBRyxLQUFLO0VBQzlCVyxDQUFDLENBQUNILGNBQWMsQ0FBQ1IsS0FBSyxHQUFHLElBQUk7O0VBRTdCO0VBQ0E7RUFDQTtFQUNBO0FBQ0YsQ0FBRSxDQUFDIn0=