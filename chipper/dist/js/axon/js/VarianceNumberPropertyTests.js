// Copyright 2022, University of Colorado Boulder

/**
 * QUnit tests for NumberProperty
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import dotRandom from '../../dot/js/dotRandom.js';
import VarianceNumberProperty from './VarianceNumberProperty.js';
QUnit.module('VarianceNumberProperty');
QUnit.test('Test VarianceNumberProperty', assert => {
  const computeFunction = v => v + 1;
  const property = new VarianceNumberProperty(0, computeFunction);
  assert.ok(property.getRandomizedValue() === 1, 'initial value');
  // assert.ok( v.value === 1, 'value getter' );

  const mean = 6;
  const standardDeviation = 2;
  const computeFunction2 = mean => {
    let u = 0;
    let v = 0;
    while (u === 0) {
      u = dotRandom.nextDouble();
    } //Converting [0,1) to (0,1)
    while (v === 0) {
      v = dotRandom.nextDouble();
    }
    return mean + standardDeviation * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  };
  const secondProperty = new VarianceNumberProperty(mean, computeFunction2);
  assert.ok(secondProperty.getRandomizedValue() !== secondProperty.getRandomizedValue(), 'randomly assigned'); // eslint-disable-line no-self-compare

  // See the standard deviation in action!
  console.log('Variance number property tests:');
  console.log('Mean: ' + mean);
  console.log('Standard deviation: ' + standardDeviation);
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJWYXJpYW5jZU51bWJlclByb3BlcnR5IiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwiY29tcHV0ZUZ1bmN0aW9uIiwidiIsInByb3BlcnR5Iiwib2siLCJnZXRSYW5kb21pemVkVmFsdWUiLCJtZWFuIiwic3RhbmRhcmREZXZpYXRpb24iLCJjb21wdXRlRnVuY3Rpb24yIiwidSIsIm5leHREb3VibGUiLCJNYXRoIiwic3FydCIsImxvZyIsImNvcyIsIlBJIiwic2Vjb25kUHJvcGVydHkiLCJjb25zb2xlIl0sInNvdXJjZXMiOlsiVmFyaWFuY2VOdW1iZXJQcm9wZXJ0eVRlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBRVW5pdCB0ZXN0cyBmb3IgTnVtYmVyUHJvcGVydHlcclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcbmltcG9ydCBWYXJpYW5jZU51bWJlclByb3BlcnR5IGZyb20gJy4vVmFyaWFuY2VOdW1iZXJQcm9wZXJ0eS5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdWYXJpYW5jZU51bWJlclByb3BlcnR5JyApO1xyXG5cclxuUVVuaXQudGVzdCggJ1Rlc3QgVmFyaWFuY2VOdW1iZXJQcm9wZXJ0eScsIGFzc2VydCA9PiB7XHJcblxyXG4gIGNvbnN0IGNvbXB1dGVGdW5jdGlvbiA9ICggdjogbnVtYmVyICkgPT4gdiArIDE7XHJcblxyXG4gIGNvbnN0IHByb3BlcnR5ID0gbmV3IFZhcmlhbmNlTnVtYmVyUHJvcGVydHkoIDAsIGNvbXB1dGVGdW5jdGlvbiApO1xyXG5cclxuICBhc3NlcnQub2soIHByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpID09PSAxLCAnaW5pdGlhbCB2YWx1ZScgKTtcclxuICAvLyBhc3NlcnQub2soIHYudmFsdWUgPT09IDEsICd2YWx1ZSBnZXR0ZXInICk7XHJcblxyXG4gIGNvbnN0IG1lYW4gPSA2O1xyXG4gIGNvbnN0IHN0YW5kYXJkRGV2aWF0aW9uID0gMjtcclxuICBjb25zdCBjb21wdXRlRnVuY3Rpb24yID0gKCBtZWFuOiBudW1iZXIgKTogbnVtYmVyID0+IHtcclxuICAgIGxldCB1ID0gMDtcclxuICAgIGxldCB2ID0gMDtcclxuICAgIHdoaWxlICggdSA9PT0gMCApIHtcclxuICAgICAgdSA9IGRvdFJhbmRvbS5uZXh0RG91YmxlKCk7XHJcbiAgICB9IC8vQ29udmVydGluZyBbMCwxKSB0byAoMCwxKVxyXG4gICAgd2hpbGUgKCB2ID09PSAwICkge1xyXG4gICAgICB2ID0gZG90UmFuZG9tLm5leHREb3VibGUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiAoXHJcbiAgICAgIG1lYW4gK1xyXG4gICAgICBzdGFuZGFyZERldmlhdGlvbiAqXHJcbiAgICAgIE1hdGguc3FydCggLTIuMCAqIE1hdGgubG9nKCB1ICkgKSAqXHJcbiAgICAgIE1hdGguY29zKCAyLjAgKiBNYXRoLlBJICogdiApXHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNlY29uZFByb3BlcnR5ID0gbmV3IFZhcmlhbmNlTnVtYmVyUHJvcGVydHkoIG1lYW4sIGNvbXB1dGVGdW5jdGlvbjIgKTtcclxuXHJcbiAgYXNzZXJ0Lm9rKCBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSAhPT0gc2Vjb25kUHJvcGVydHkuZ2V0UmFuZG9taXplZFZhbHVlKCksICdyYW5kb21seSBhc3NpZ25lZCcgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuXHJcbiAgLy8gU2VlIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24gaW4gYWN0aW9uIVxyXG4gIGNvbnNvbGUubG9nKCAnVmFyaWFuY2UgbnVtYmVyIHByb3BlcnR5IHRlc3RzOicgKTtcclxuICBjb25zb2xlLmxvZyggJ01lYW46ICcgKyBtZWFuICk7XHJcbiAgY29uc29sZS5sb2coICdTdGFuZGFyZCBkZXZpYXRpb246ICcgKyBzdGFuZGFyZERldmlhdGlvbiApO1xyXG4gIGNvbnNvbGUubG9nKCBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSApO1xyXG4gIGNvbnNvbGUubG9nKCBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSApO1xyXG4gIGNvbnNvbGUubG9nKCBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSApO1xyXG4gIGNvbnNvbGUubG9nKCBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSApO1xyXG4gIGNvbnNvbGUubG9nKCBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSApO1xyXG4gIGNvbnNvbGUubG9nKCBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSApO1xyXG4gIGNvbnNvbGUubG9nKCBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSApO1xyXG59ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sMkJBQTJCO0FBQ2pELE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUVoRUMsS0FBSyxDQUFDQyxNQUFNLENBQUUsd0JBQXlCLENBQUM7QUFFeENELEtBQUssQ0FBQ0UsSUFBSSxDQUFFLDZCQUE2QixFQUFFQyxNQUFNLElBQUk7RUFFbkQsTUFBTUMsZUFBZSxHQUFLQyxDQUFTLElBQU1BLENBQUMsR0FBRyxDQUFDO0VBRTlDLE1BQU1DLFFBQVEsR0FBRyxJQUFJUCxzQkFBc0IsQ0FBRSxDQUFDLEVBQUVLLGVBQWdCLENBQUM7RUFFakVELE1BQU0sQ0FBQ0ksRUFBRSxDQUFFRCxRQUFRLENBQUNFLGtCQUFrQixDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsZUFBZ0IsQ0FBQztFQUNqRTs7RUFFQSxNQUFNQyxJQUFJLEdBQUcsQ0FBQztFQUNkLE1BQU1DLGlCQUFpQixHQUFHLENBQUM7RUFDM0IsTUFBTUMsZ0JBQWdCLEdBQUtGLElBQVksSUFBYztJQUNuRCxJQUFJRyxDQUFDLEdBQUcsQ0FBQztJQUNULElBQUlQLENBQUMsR0FBRyxDQUFDO0lBQ1QsT0FBUU8sQ0FBQyxLQUFLLENBQUMsRUFBRztNQUNoQkEsQ0FBQyxHQUFHZCxTQUFTLENBQUNlLFVBQVUsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQztJQUNGLE9BQVFSLENBQUMsS0FBSyxDQUFDLEVBQUc7TUFDaEJBLENBQUMsR0FBR1AsU0FBUyxDQUFDZSxVQUFVLENBQUMsQ0FBQztJQUM1QjtJQUNBLE9BQ0VKLElBQUksR0FDSkMsaUJBQWlCLEdBQ2pCSSxJQUFJLENBQUNDLElBQUksQ0FBRSxDQUFDLEdBQUcsR0FBR0QsSUFBSSxDQUFDRSxHQUFHLENBQUVKLENBQUUsQ0FBRSxDQUFDLEdBQ2pDRSxJQUFJLENBQUNHLEdBQUcsQ0FBRSxHQUFHLEdBQUdILElBQUksQ0FBQ0ksRUFBRSxHQUFHYixDQUFFLENBQUM7RUFFakMsQ0FBQztFQUVELE1BQU1jLGNBQWMsR0FBRyxJQUFJcEIsc0JBQXNCLENBQUVVLElBQUksRUFBRUUsZ0JBQWlCLENBQUM7RUFFM0VSLE1BQU0sQ0FBQ0ksRUFBRSxDQUFFWSxjQUFjLENBQUNYLGtCQUFrQixDQUFDLENBQUMsS0FBS1csY0FBYyxDQUFDWCxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsbUJBQW9CLENBQUMsQ0FBQyxDQUFDOztFQUUvRztFQUNBWSxPQUFPLENBQUNKLEdBQUcsQ0FBRSxpQ0FBa0MsQ0FBQztFQUNoREksT0FBTyxDQUFDSixHQUFHLENBQUUsUUFBUSxHQUFHUCxJQUFLLENBQUM7RUFDOUJXLE9BQU8sQ0FBQ0osR0FBRyxDQUFFLHNCQUFzQixHQUFHTixpQkFBa0IsQ0FBQztFQUN6RFUsT0FBTyxDQUFDSixHQUFHLENBQUVHLGNBQWMsQ0FBQ1gsa0JBQWtCLENBQUMsQ0FBRSxDQUFDO0VBQ2xEWSxPQUFPLENBQUNKLEdBQUcsQ0FBRUcsY0FBYyxDQUFDWCxrQkFBa0IsQ0FBQyxDQUFFLENBQUM7RUFDbERZLE9BQU8sQ0FBQ0osR0FBRyxDQUFFRyxjQUFjLENBQUNYLGtCQUFrQixDQUFDLENBQUUsQ0FBQztFQUNsRFksT0FBTyxDQUFDSixHQUFHLENBQUVHLGNBQWMsQ0FBQ1gsa0JBQWtCLENBQUMsQ0FBRSxDQUFDO0VBQ2xEWSxPQUFPLENBQUNKLEdBQUcsQ0FBRUcsY0FBYyxDQUFDWCxrQkFBa0IsQ0FBQyxDQUFFLENBQUM7RUFDbERZLE9BQU8sQ0FBQ0osR0FBRyxDQUFFRyxjQUFjLENBQUNYLGtCQUFrQixDQUFDLENBQUUsQ0FBQztFQUNsRFksT0FBTyxDQUFDSixHQUFHLENBQUVHLGNBQWMsQ0FBQ1gsa0JBQWtCLENBQUMsQ0FBRSxDQUFDO0FBQ3BELENBQUUsQ0FBQyJ9