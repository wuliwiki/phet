// Copyright 2017-2022, University of Colorado Boulder

/**
 * QUnit tests for StringProperty
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import StringIO from '../../tandem/js/types/StringIO.js';
import StringProperty from './StringProperty.js';
QUnit.module('StringProperty');
QUnit.test('Test StringProperty', assert => {
  let p = null;

  // valueType
  window.assert && assert.throws(() => {
    // @ts-expect-error INTENTIONAL setting valueType option for testing
    p = new StringProperty('foo', {
      valueType: 'string'
    });
  }, 'valueType cannot be set by client');
  p = new StringProperty('foo');
  p.value = 'bar';
  window.assert && assert.throws(() => {
    // @ts-expect-error INTENTIONAL setting wrong value for testing
    p.value = 0;
  }, 'set value fails valueType test');

  // validValues
  window.assert && assert.throws(() => {
    p = new StringProperty('bad', {
      validValues: ['foo', 'bar']
    });
  }, 'initial value is not a member of validValues');
  window.assert && assert.throws(() => {
    p = new StringProperty('foo', {
      // @ts-expect-error INTENTIONAL incorrect valueType for testing
      validValues: ['foo', 'bar', 0]
    });
  }, 'member of validValues has incorrect valueType');
  window.assert && assert.throws(() => {
    p = new StringProperty('foo', {
      validValues: ['foo', 'bar'],
      isValidValue: function (value) {
        return value.startsWith('f');
      }
    });
  }, 'member of validValues fails isValidValue test');
  p = new StringProperty('foo', {
    validValues: ['foo', 'bar']
  });
  p.value = 'bar';
  window.assert && assert.throws(() => {
    p.value = 'bad';
  }, 'set value is not a member of validValues');

  // isValidValue
  p = new StringProperty('foo', {
    isValidValue: function (value) {
      return value.startsWith('f');
    }
  });
  p.value = 'five';
  window.assert && assert.throws(() => {
    p.value = 'bad';
  }, 'set value fails isValidValue test');

  // multiple compatible options
  p = new StringProperty('foo', {
    validValues: ['foo', 'bar'],
    isValidValue: function (value) {
      return value.length === 3;
    }
  });

  // multiple incompatible options
  window.assert && assert.throws(() => {
    p = new StringProperty('foo', {
      validValues: ['foo', 'bar'],
      isValidValue: function (value) {
        return value.length === 4;
      }
    });
  }, 'incompatible validation options fail on initialization');
  window.assert && assert.throws(() => {
    // @ts-expect-error INTENTIONAL setting phetioType for testing
    p = new StringProperty('hello', {
      phetioType: StringIO
    });

    // TODO: Is this still the case? see: https://github.com/phetsims/axon/issues/421
  }, 'EnumerationDeprecatedProperty sets phetioType');
  assert.ok(true, 'so we have at least 1 test in this set');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdJTyIsIlN0cmluZ1Byb3BlcnR5IiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwicCIsIndpbmRvdyIsInRocm93cyIsInZhbHVlVHlwZSIsInZhbHVlIiwidmFsaWRWYWx1ZXMiLCJpc1ZhbGlkVmFsdWUiLCJzdGFydHNXaXRoIiwibGVuZ3RoIiwicGhldGlvVHlwZSIsIm9rIl0sInNvdXJjZXMiOlsiU3RyaW5nUHJvcGVydHlUZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBRVW5pdCB0ZXN0cyBmb3IgU3RyaW5nUHJvcGVydHlcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgU3RyaW5nSU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0cmluZ0lPLmpzJztcclxuaW1wb3J0IFN0cmluZ1Byb3BlcnR5IGZyb20gJy4vU3RyaW5nUHJvcGVydHkuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnU3RyaW5nUHJvcGVydHknICk7XHJcblFVbml0LnRlc3QoICdUZXN0IFN0cmluZ1Byb3BlcnR5JywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgbGV0IHA6IFN0cmluZ1Byb3BlcnR5IHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIC8vIHZhbHVlVHlwZVxyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG5cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSU5URU5USU9OQUwgc2V0dGluZyB2YWx1ZVR5cGUgb3B0aW9uIGZvciB0ZXN0aW5nXHJcbiAgICBwID0gbmV3IFN0cmluZ1Byb3BlcnR5KCAnZm9vJywgeyB2YWx1ZVR5cGU6ICdzdHJpbmcnIH0gKTtcclxuICB9LCAndmFsdWVUeXBlIGNhbm5vdCBiZSBzZXQgYnkgY2xpZW50JyApO1xyXG4gIHAgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdmb28nICk7XHJcbiAgcC52YWx1ZSA9ICdiYXInO1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG5cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSU5URU5USU9OQUwgc2V0dGluZyB3cm9uZyB2YWx1ZSBmb3IgdGVzdGluZ1xyXG4gICAgcC52YWx1ZSA9IDA7XHJcbiAgfSwgJ3NldCB2YWx1ZSBmYWlscyB2YWx1ZVR5cGUgdGVzdCcgKTtcclxuXHJcbiAgLy8gdmFsaWRWYWx1ZXNcclxuICB3aW5kb3cuYXNzZXJ0ICYmIGFzc2VydC50aHJvd3MoICgpID0+IHtcclxuICAgIHAgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdiYWQnLCB7XHJcbiAgICAgIHZhbGlkVmFsdWVzOiBbICdmb28nLCAnYmFyJyBdXHJcbiAgICB9ICk7XHJcbiAgfSwgJ2luaXRpYWwgdmFsdWUgaXMgbm90IGEgbWVtYmVyIG9mIHZhbGlkVmFsdWVzJyApO1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgcCA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJ2ZvbycsIHtcclxuXHJcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSU5URU5USU9OQUwgaW5jb3JyZWN0IHZhbHVlVHlwZSBmb3IgdGVzdGluZ1xyXG4gICAgICB2YWxpZFZhbHVlczogWyAnZm9vJywgJ2JhcicsIDAgXVxyXG4gICAgfSApO1xyXG4gIH0sICdtZW1iZXIgb2YgdmFsaWRWYWx1ZXMgaGFzIGluY29ycmVjdCB2YWx1ZVR5cGUnICk7XHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcbiAgICBwID0gbmV3IFN0cmluZ1Byb3BlcnR5KCAnZm9vJywge1xyXG4gICAgICB2YWxpZFZhbHVlczogWyAnZm9vJywgJ2JhcicgXSxcclxuICAgICAgaXNWYWxpZFZhbHVlOiBmdW5jdGlvbiggdmFsdWUgKSB7IHJldHVybiB2YWx1ZS5zdGFydHNXaXRoKCAnZicgKTsgfVxyXG4gICAgfSApO1xyXG4gIH0sICdtZW1iZXIgb2YgdmFsaWRWYWx1ZXMgZmFpbHMgaXNWYWxpZFZhbHVlIHRlc3QnICk7XHJcbiAgcCA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJ2ZvbycsIHtcclxuICAgIHZhbGlkVmFsdWVzOiBbICdmb28nLCAnYmFyJyBdXHJcbiAgfSApO1xyXG4gIHAudmFsdWUgPSAnYmFyJztcclxuICB3aW5kb3cuYXNzZXJ0ICYmIGFzc2VydC50aHJvd3MoICgpID0+IHtcclxuICAgIHAhLnZhbHVlID0gJ2JhZCc7XHJcbiAgfSwgJ3NldCB2YWx1ZSBpcyBub3QgYSBtZW1iZXIgb2YgdmFsaWRWYWx1ZXMnICk7XHJcblxyXG4gIC8vIGlzVmFsaWRWYWx1ZVxyXG4gIHAgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdmb28nLCB7XHJcbiAgICBpc1ZhbGlkVmFsdWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHsgcmV0dXJuIHZhbHVlLnN0YXJ0c1dpdGgoICdmJyApOyB9XHJcbiAgfSApO1xyXG4gIHAudmFsdWUgPSAnZml2ZSc7XHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcbiAgICBwIS52YWx1ZSA9ICdiYWQnO1xyXG4gIH0sICdzZXQgdmFsdWUgZmFpbHMgaXNWYWxpZFZhbHVlIHRlc3QnICk7XHJcblxyXG4gIC8vIG11bHRpcGxlIGNvbXBhdGlibGUgb3B0aW9uc1xyXG4gIHAgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdmb28nLCB7XHJcbiAgICB2YWxpZFZhbHVlczogWyAnZm9vJywgJ2JhcicgXSxcclxuICAgIGlzVmFsaWRWYWx1ZTogZnVuY3Rpb24oIHZhbHVlICkgeyByZXR1cm4gdmFsdWUubGVuZ3RoID09PSAzOyB9XHJcbiAgfSApO1xyXG5cclxuICAvLyBtdWx0aXBsZSBpbmNvbXBhdGlibGUgb3B0aW9uc1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgcCA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJ2ZvbycsIHtcclxuICAgICAgdmFsaWRWYWx1ZXM6IFsgJ2ZvbycsICdiYXInIF0sXHJcbiAgICAgIGlzVmFsaWRWYWx1ZTogZnVuY3Rpb24oIHZhbHVlICkgeyByZXR1cm4gdmFsdWUubGVuZ3RoID09PSA0OyB9XHJcbiAgICB9ICk7XHJcbiAgfSwgJ2luY29tcGF0aWJsZSB2YWxpZGF0aW9uIG9wdGlvbnMgZmFpbCBvbiBpbml0aWFsaXphdGlvbicgKTtcclxuXHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBJTlRFTlRJT05BTCBzZXR0aW5nIHBoZXRpb1R5cGUgZm9yIHRlc3RpbmdcclxuICAgIHAgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdoZWxsbycsIHsgcGhldGlvVHlwZTogU3RyaW5nSU8gfSApO1xyXG5cclxuICAgIC8vIFRPRE86IElzIHRoaXMgc3RpbGwgdGhlIGNhc2U/IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2F4b24vaXNzdWVzLzQyMVxyXG4gIH0sICdFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSBzZXRzIHBoZXRpb1R5cGUnICk7XHJcblxyXG4gIGFzc2VydC5vayggdHJ1ZSwgJ3NvIHdlIGhhdmUgYXQgbGVhc3QgMSB0ZXN0IGluIHRoaXMgc2V0JyApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLG1DQUFtQztBQUN4RCxPQUFPQyxjQUFjLE1BQU0scUJBQXFCO0FBRWhEQyxLQUFLLENBQUNDLE1BQU0sQ0FBRSxnQkFBaUIsQ0FBQztBQUNoQ0QsS0FBSyxDQUFDRSxJQUFJLENBQUUscUJBQXFCLEVBQUVDLE1BQU0sSUFBSTtFQUUzQyxJQUFJQyxDQUF3QixHQUFHLElBQUk7O0VBRW5DO0VBQ0FDLE1BQU0sQ0FBQ0YsTUFBTSxJQUFJQSxNQUFNLENBQUNHLE1BQU0sQ0FBRSxNQUFNO0lBRXBDO0lBQ0FGLENBQUMsR0FBRyxJQUFJTCxjQUFjLENBQUUsS0FBSyxFQUFFO01BQUVRLFNBQVMsRUFBRTtJQUFTLENBQUUsQ0FBQztFQUMxRCxDQUFDLEVBQUUsbUNBQW9DLENBQUM7RUFDeENILENBQUMsR0FBRyxJQUFJTCxjQUFjLENBQUUsS0FBTSxDQUFDO0VBQy9CSyxDQUFDLENBQUNJLEtBQUssR0FBRyxLQUFLO0VBQ2ZILE1BQU0sQ0FBQ0YsTUFBTSxJQUFJQSxNQUFNLENBQUNHLE1BQU0sQ0FBRSxNQUFNO0lBRXBDO0lBQ0FGLENBQUMsQ0FBQ0ksS0FBSyxHQUFHLENBQUM7RUFDYixDQUFDLEVBQUUsZ0NBQWlDLENBQUM7O0VBRXJDO0VBQ0FILE1BQU0sQ0FBQ0YsTUFBTSxJQUFJQSxNQUFNLENBQUNHLE1BQU0sQ0FBRSxNQUFNO0lBQ3BDRixDQUFDLEdBQUcsSUFBSUwsY0FBYyxDQUFFLEtBQUssRUFBRTtNQUM3QlUsV0FBVyxFQUFFLENBQUUsS0FBSyxFQUFFLEtBQUs7SUFDN0IsQ0FBRSxDQUFDO0VBQ0wsQ0FBQyxFQUFFLDhDQUErQyxDQUFDO0VBQ25ESixNQUFNLENBQUNGLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxNQUFNLENBQUUsTUFBTTtJQUNwQ0YsQ0FBQyxHQUFHLElBQUlMLGNBQWMsQ0FBRSxLQUFLLEVBQUU7TUFFN0I7TUFDQVUsV0FBVyxFQUFFLENBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ2hDLENBQUUsQ0FBQztFQUNMLENBQUMsRUFBRSwrQ0FBZ0QsQ0FBQztFQUNwREosTUFBTSxDQUFDRixNQUFNLElBQUlBLE1BQU0sQ0FBQ0csTUFBTSxDQUFFLE1BQU07SUFDcENGLENBQUMsR0FBRyxJQUFJTCxjQUFjLENBQUUsS0FBSyxFQUFFO01BQzdCVSxXQUFXLEVBQUUsQ0FBRSxLQUFLLEVBQUUsS0FBSyxDQUFFO01BQzdCQyxZQUFZLEVBQUUsU0FBQUEsQ0FBVUYsS0FBSyxFQUFHO1FBQUUsT0FBT0EsS0FBSyxDQUFDRyxVQUFVLENBQUUsR0FBSSxDQUFDO01BQUU7SUFDcEUsQ0FBRSxDQUFDO0VBQ0wsQ0FBQyxFQUFFLCtDQUFnRCxDQUFDO0VBQ3BEUCxDQUFDLEdBQUcsSUFBSUwsY0FBYyxDQUFFLEtBQUssRUFBRTtJQUM3QlUsV0FBVyxFQUFFLENBQUUsS0FBSyxFQUFFLEtBQUs7RUFDN0IsQ0FBRSxDQUFDO0VBQ0hMLENBQUMsQ0FBQ0ksS0FBSyxHQUFHLEtBQUs7RUFDZkgsTUFBTSxDQUFDRixNQUFNLElBQUlBLE1BQU0sQ0FBQ0csTUFBTSxDQUFFLE1BQU07SUFDcENGLENBQUMsQ0FBRUksS0FBSyxHQUFHLEtBQUs7RUFDbEIsQ0FBQyxFQUFFLDBDQUEyQyxDQUFDOztFQUUvQztFQUNBSixDQUFDLEdBQUcsSUFBSUwsY0FBYyxDQUFFLEtBQUssRUFBRTtJQUM3QlcsWUFBWSxFQUFFLFNBQUFBLENBQVVGLEtBQUssRUFBRztNQUFFLE9BQU9BLEtBQUssQ0FBQ0csVUFBVSxDQUFFLEdBQUksQ0FBQztJQUFFO0VBQ3BFLENBQUUsQ0FBQztFQUNIUCxDQUFDLENBQUNJLEtBQUssR0FBRyxNQUFNO0VBQ2hCSCxNQUFNLENBQUNGLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxNQUFNLENBQUUsTUFBTTtJQUNwQ0YsQ0FBQyxDQUFFSSxLQUFLLEdBQUcsS0FBSztFQUNsQixDQUFDLEVBQUUsbUNBQW9DLENBQUM7O0VBRXhDO0VBQ0FKLENBQUMsR0FBRyxJQUFJTCxjQUFjLENBQUUsS0FBSyxFQUFFO0lBQzdCVSxXQUFXLEVBQUUsQ0FBRSxLQUFLLEVBQUUsS0FBSyxDQUFFO0lBQzdCQyxZQUFZLEVBQUUsU0FBQUEsQ0FBVUYsS0FBSyxFQUFHO01BQUUsT0FBT0EsS0FBSyxDQUFDSSxNQUFNLEtBQUssQ0FBQztJQUFFO0VBQy9ELENBQUUsQ0FBQzs7RUFFSDtFQUNBUCxNQUFNLENBQUNGLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxNQUFNLENBQUUsTUFBTTtJQUNwQ0YsQ0FBQyxHQUFHLElBQUlMLGNBQWMsQ0FBRSxLQUFLLEVBQUU7TUFDN0JVLFdBQVcsRUFBRSxDQUFFLEtBQUssRUFBRSxLQUFLLENBQUU7TUFDN0JDLFlBQVksRUFBRSxTQUFBQSxDQUFVRixLQUFLLEVBQUc7UUFBRSxPQUFPQSxLQUFLLENBQUNJLE1BQU0sS0FBSyxDQUFDO01BQUU7SUFDL0QsQ0FBRSxDQUFDO0VBQ0wsQ0FBQyxFQUFFLHdEQUF5RCxDQUFDO0VBRTdEUCxNQUFNLENBQUNGLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxNQUFNLENBQUUsTUFBTTtJQUVwQztJQUNBRixDQUFDLEdBQUcsSUFBSUwsY0FBYyxDQUFFLE9BQU8sRUFBRTtNQUFFYyxVQUFVLEVBQUVmO0lBQVMsQ0FBRSxDQUFDOztJQUUzRDtFQUNGLENBQUMsRUFBRSwrQ0FBZ0QsQ0FBQztFQUVwREssTUFBTSxDQUFDVyxFQUFFLENBQUUsSUFBSSxFQUFFLHdDQUF5QyxDQUFDO0FBQzdELENBQUUsQ0FBQyJ9