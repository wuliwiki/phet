// Copyright 2022, University of Colorado Boulder

/**
 * Similar to DerivedProperty, but restricted to one Property and provides value-mapped and bidirectional support.
 * It's basically a DynamicProperty where you don't need to wrap it in an additional Property, and is typed a bit easier
 *
 * For example:
 *
 * const stringProperty = new Property<string>( 'hello' );
 * const lengthProperty = new MappedProperty( stringProperty, {
 *   map: ( str: string ) => str.length
 * } );
 * lengthProperty.value; // 5
 * stringProperty.value = 'hi';
 * lengthProperty.value; // 2
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import axon from './axon.js';
import DynamicProperty from './DynamicProperty.js';
import TinyProperty from './TinyProperty.js';
export default class MappedProperty extends DynamicProperty {
  constructor(property, providedOptions) {
    super(new TinyProperty(property), providedOptions);
  }
}
axon.register('MappedProperty', MappedProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiRHluYW1pY1Byb3BlcnR5IiwiVGlueVByb3BlcnR5IiwiTWFwcGVkUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYXBwZWRQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2ltaWxhciB0byBEZXJpdmVkUHJvcGVydHksIGJ1dCByZXN0cmljdGVkIHRvIG9uZSBQcm9wZXJ0eSBhbmQgcHJvdmlkZXMgdmFsdWUtbWFwcGVkIGFuZCBiaWRpcmVjdGlvbmFsIHN1cHBvcnQuXHJcbiAqIEl0J3MgYmFzaWNhbGx5IGEgRHluYW1pY1Byb3BlcnR5IHdoZXJlIHlvdSBkb24ndCBuZWVkIHRvIHdyYXAgaXQgaW4gYW4gYWRkaXRpb25hbCBQcm9wZXJ0eSwgYW5kIGlzIHR5cGVkIGEgYml0IGVhc2llclxyXG4gKlxyXG4gKiBGb3IgZXhhbXBsZTpcclxuICpcclxuICogY29uc3Qgc3RyaW5nUHJvcGVydHkgPSBuZXcgUHJvcGVydHk8c3RyaW5nPiggJ2hlbGxvJyApO1xyXG4gKiBjb25zdCBsZW5ndGhQcm9wZXJ0eSA9IG5ldyBNYXBwZWRQcm9wZXJ0eSggc3RyaW5nUHJvcGVydHksIHtcclxuICogICBtYXA6ICggc3RyOiBzdHJpbmcgKSA9PiBzdHIubGVuZ3RoXHJcbiAqIH0gKTtcclxuICogbGVuZ3RoUHJvcGVydHkudmFsdWU7IC8vIDVcclxuICogc3RyaW5nUHJvcGVydHkudmFsdWUgPSAnaGknO1xyXG4gKiBsZW5ndGhQcm9wZXJ0eS52YWx1ZTsgLy8gMlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEtleXNNYXRjaGluZyBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvS2V5c01hdGNoaW5nLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEeW5hbWljUHJvcGVydHksIHsgRHluYW1pY1Byb3BlcnR5T3B0aW9ucyB9IGZyb20gJy4vRHluYW1pY1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRpbnlQcm9wZXJ0eSBmcm9tICcuL1RpbnlQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zPFRoaXNWYWx1ZVR5cGUsIElucHV0VmFsdWVUeXBlPiA9IHtcclxuICAvLyBJZiBzZXQgdG8gdHJ1ZSB0aGVuIGNoYW5nZXMgdG8gdGhpcyBQcm9wZXJ0eSAoaWYgdmFsdWVQcm9wZXJ0eVByb3BlcnR5LnZhbHVlIGlzIG5vbi1udWxsIGF0IHRoZSB0aW1lKSB3aWxsIGFsc28gYmVcclxuICAvLyBtYWRlIHRvIHZhbHVlUHJvcGVydHlQcm9wZXJ0eS52YWx1ZS5cclxuICBiaWRpcmVjdGlvbmFsPzogYm9vbGVhbjtcclxuXHJcbiAgLy8gTWFwcyBvdXIgaW5wdXQgUHJvcGVydHkgdmFsdWUgdG8vZnJvbSB0aGlzIFByb3BlcnR5J3MgdmFsdWUuIFNlZSB0b3AtbGV2ZWwgZG9jdW1lbnRhdGlvbiBmb3IgdXNhZ2UuXHJcbiAgLy8gSWYgaXQncyBhIHN0cmluZywgaXQgd2lsbCBncmFiIHRoYXQgbmFtZWQgcHJvcGVydHkgb3V0IChlLmcuIGl0J3MgbGlrZSBwYXNzaW5nIHUgPT4gdVsgZGVyaXZlIF0pXHJcbiAgbWFwPzogKCAoIGlucHV0VmFsdWU6IElucHV0VmFsdWVUeXBlICkgPT4gVGhpc1ZhbHVlVHlwZSApIHwgS2V5c01hdGNoaW5nPElucHV0VmFsdWVUeXBlLCBUaGlzVmFsdWVUeXBlPjtcclxuICBpbnZlcnNlTWFwPzogKCAoIHRoaXNWYWx1ZTogVGhpc1ZhbHVlVHlwZSApID0+IElucHV0VmFsdWVUeXBlICkgfCBLZXlzTWF0Y2hpbmc8VGhpc1ZhbHVlVHlwZSwgSW5wdXRWYWx1ZVR5cGU+O1xyXG59O1xyXG5cclxudHlwZSBTdXBlck9wdGlvbnM8VGhpc1ZhbHVlVHlwZSwgSW5wdXRWYWx1ZVR5cGU+ID0gU3RyaWN0T21pdDxEeW5hbWljUHJvcGVydHlPcHRpb25zPFRoaXNWYWx1ZVR5cGUsIElucHV0VmFsdWVUeXBlLCBUUmVhZE9ubHlQcm9wZXJ0eTxJbnB1dFZhbHVlVHlwZT4+LCAnZGVmYXVsdFZhbHVlJyB8ICdkZXJpdmUnPjtcclxuXHJcbmV4cG9ydCB0eXBlIE1hcHBlZFByb3BlcnR5T3B0aW9uczxUaGlzVmFsdWVUeXBlLCBJbnB1dFZhbHVlVHlwZT4gPSBTZWxmT3B0aW9uczxUaGlzVmFsdWVUeXBlLCBJbnB1dFZhbHVlVHlwZT4gJiBTdXBlck9wdGlvbnM8VGhpc1ZhbHVlVHlwZSwgSW5wdXRWYWx1ZVR5cGU+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwcGVkUHJvcGVydHk8VGhpc1ZhbHVlVHlwZSwgSW5wdXRWYWx1ZVR5cGU+IGV4dGVuZHMgRHluYW1pY1Byb3BlcnR5PFRoaXNWYWx1ZVR5cGUsIElucHV0VmFsdWVUeXBlLCBUUmVhZE9ubHlQcm9wZXJ0eTxJbnB1dFZhbHVlVHlwZT4+IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxJbnB1dFZhbHVlVHlwZT4sIHByb3ZpZGVkT3B0aW9ucz86IE1hcHBlZFByb3BlcnR5T3B0aW9uczxUaGlzVmFsdWVUeXBlLCBJbnB1dFZhbHVlVHlwZT4gKSB7XHJcbiAgICBzdXBlciggbmV3IFRpbnlQcm9wZXJ0eSggcHJvcGVydHkgKSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5heG9uLnJlZ2lzdGVyKCAnTWFwcGVkUHJvcGVydHknLCBNYXBwZWRQcm9wZXJ0eSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLElBQUksTUFBTSxXQUFXO0FBRTVCLE9BQU9DLGVBQWUsTUFBa0Msc0JBQXNCO0FBQzlFLE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFpQjVDLGVBQWUsTUFBTUMsY0FBYyxTQUF3Q0YsZUFBZSxDQUFtRTtFQUNwSkcsV0FBV0EsQ0FBRUMsUUFBMkMsRUFBRUMsZUFBc0UsRUFBRztJQUN4SSxLQUFLLENBQUUsSUFBSUosWUFBWSxDQUFFRyxRQUFTLENBQUMsRUFBRUMsZUFBZ0IsQ0FBQztFQUN4RDtBQUNGO0FBRUFOLElBQUksQ0FBQ08sUUFBUSxDQUFFLGdCQUFnQixFQUFFSixjQUFlLENBQUMifQ==