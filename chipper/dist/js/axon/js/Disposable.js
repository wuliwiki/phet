// Copyright 2022-2023, University of Colorado Boulder

/**
 * A base class to help with managing disposal. Creates a disposeEmitter that will be fired when disposing. This occurs
 * AFTER all prototype dispose() methods have been called up the hierarchy, so be aware of potential disposal order
 * issues if using disposeEmitter and dispose() logic together.
 *
 * This class also includes a public flag set to true when disposed.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import axon from './axon.js';
import TinyEmitter from './TinyEmitter.js';
class Disposable {
  // Called after all code that is directly in `dispose()` methods, be careful with mixing this pattern and the
  // `this.disposeMyClass()` pattern.
  _disposeEmitter = new TinyEmitter();

  // Marked true when this Disposable has had dispose() called on it (after disposeEmitter is fired)
  _isDisposed = false;

  // Disposable should only be used by subtypes, no need to instantiate one on its own.
  constructor() {
    if (assert) {
      // Wrap the prototype dispose method with a check. NOTE: We will not catch devious cases where the dispose() is
      // overridden after the Node constructor (which may happen).
      const protoDispose = this.dispose;
      this.dispose = () => {
        assert && assert(!this._isDisposed, 'This Disposable has already been disposed, and cannot be disposed again');
        protoDispose.call(this);
        assert && assert(this._isDisposed, 'Disposable.dispose() call is missing from an overridden dispose method');
      };
    }
  }
  getDisposeEmitter() {
    return this._disposeEmitter;
  }
  get disposeEmitter() {
    return this.getDisposeEmitter();
  }
  get isDisposed() {
    return this._isDisposed;
  }
  dispose() {
    assert && assert(!this._isDisposed, 'Disposable can only be disposed once');
    this._disposeEmitter.emit();
    this._disposeEmitter.dispose();
    this._isDisposed = true;
  }
}
axon.register('Disposable', Disposable);
export default Disposable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiVGlueUVtaXR0ZXIiLCJEaXNwb3NhYmxlIiwiX2Rpc3Bvc2VFbWl0dGVyIiwiX2lzRGlzcG9zZWQiLCJjb25zdHJ1Y3RvciIsImFzc2VydCIsInByb3RvRGlzcG9zZSIsImRpc3Bvc2UiLCJjYWxsIiwiZ2V0RGlzcG9zZUVtaXR0ZXIiLCJkaXNwb3NlRW1pdHRlciIsImlzRGlzcG9zZWQiLCJlbWl0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaXNwb3NhYmxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgYmFzZSBjbGFzcyB0byBoZWxwIHdpdGggbWFuYWdpbmcgZGlzcG9zYWwuIENyZWF0ZXMgYSBkaXNwb3NlRW1pdHRlciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBkaXNwb3NpbmcuIFRoaXMgb2NjdXJzXHJcbiAqIEFGVEVSIGFsbCBwcm90b3R5cGUgZGlzcG9zZSgpIG1ldGhvZHMgaGF2ZSBiZWVuIGNhbGxlZCB1cCB0aGUgaGllcmFyY2h5LCBzbyBiZSBhd2FyZSBvZiBwb3RlbnRpYWwgZGlzcG9zYWwgb3JkZXJcclxuICogaXNzdWVzIGlmIHVzaW5nIGRpc3Bvc2VFbWl0dGVyIGFuZCBkaXNwb3NlKCkgbG9naWMgdG9nZXRoZXIuXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3MgYWxzbyBpbmNsdWRlcyBhIHB1YmxpYyBmbGFnIHNldCB0byB0cnVlIHdoZW4gZGlzcG9zZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xyXG5pbXBvcnQgVEVtaXR0ZXIgZnJvbSAnLi9URW1pdHRlci5qcyc7XHJcbmltcG9ydCBUaW55RW1pdHRlciBmcm9tICcuL1RpbnlFbWl0dGVyLmpzJztcclxuXHJcbmNsYXNzIERpc3Bvc2FibGUge1xyXG5cclxuICAvLyBDYWxsZWQgYWZ0ZXIgYWxsIGNvZGUgdGhhdCBpcyBkaXJlY3RseSBpbiBgZGlzcG9zZSgpYCBtZXRob2RzLCBiZSBjYXJlZnVsIHdpdGggbWl4aW5nIHRoaXMgcGF0dGVybiBhbmQgdGhlXHJcbiAgLy8gYHRoaXMuZGlzcG9zZU15Q2xhc3MoKWAgcGF0dGVybi5cclxuICBwdWJsaWMgcmVhZG9ubHkgX2Rpc3Bvc2VFbWl0dGVyOiBURW1pdHRlciA9IG5ldyBUaW55RW1pdHRlcigpO1xyXG5cclxuICAvLyBNYXJrZWQgdHJ1ZSB3aGVuIHRoaXMgRGlzcG9zYWJsZSBoYXMgaGFkIGRpc3Bvc2UoKSBjYWxsZWQgb24gaXQgKGFmdGVyIGRpc3Bvc2VFbWl0dGVyIGlzIGZpcmVkKVxyXG4gIHByaXZhdGUgX2lzRGlzcG9zZWQgPSBmYWxzZTtcclxuXHJcbiAgLy8gRGlzcG9zYWJsZSBzaG91bGQgb25seSBiZSB1c2VkIGJ5IHN1YnR5cGVzLCBubyBuZWVkIHRvIGluc3RhbnRpYXRlIG9uZSBvbiBpdHMgb3duLlxyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGlmICggYXNzZXJ0ICkge1xyXG5cclxuICAgICAgLy8gV3JhcCB0aGUgcHJvdG90eXBlIGRpc3Bvc2UgbWV0aG9kIHdpdGggYSBjaGVjay4gTk9URTogV2Ugd2lsbCBub3QgY2F0Y2ggZGV2aW91cyBjYXNlcyB3aGVyZSB0aGUgZGlzcG9zZSgpIGlzXHJcbiAgICAgIC8vIG92ZXJyaWRkZW4gYWZ0ZXIgdGhlIE5vZGUgY29uc3RydWN0b3IgKHdoaWNoIG1heSBoYXBwZW4pLlxyXG4gICAgICBjb25zdCBwcm90b0Rpc3Bvc2UgPSB0aGlzLmRpc3Bvc2U7XHJcbiAgICAgIHRoaXMuZGlzcG9zZSA9ICgpID0+IHtcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhdGhpcy5faXNEaXNwb3NlZCwgJ1RoaXMgRGlzcG9zYWJsZSBoYXMgYWxyZWFkeSBiZWVuIGRpc3Bvc2VkLCBhbmQgY2Fubm90IGJlIGRpc3Bvc2VkIGFnYWluJyApO1xyXG4gICAgICAgIHByb3RvRGlzcG9zZS5jYWxsKCB0aGlzICk7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5faXNEaXNwb3NlZCwgJ0Rpc3Bvc2FibGUuZGlzcG9zZSgpIGNhbGwgaXMgbWlzc2luZyBmcm9tIGFuIG92ZXJyaWRkZW4gZGlzcG9zZSBtZXRob2QnICk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RGlzcG9zZUVtaXR0ZXIoKTogVEVtaXR0ZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Rpc3Bvc2VFbWl0dGVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkaXNwb3NlRW1pdHRlcigpOiBURW1pdHRlciB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXREaXNwb3NlRW1pdHRlcigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpc0Rpc3Bvc2VkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzRGlzcG9zZWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLl9pc0Rpc3Bvc2VkLCAnRGlzcG9zYWJsZSBjYW4gb25seSBiZSBkaXNwb3NlZCBvbmNlJyApO1xyXG4gICAgdGhpcy5fZGlzcG9zZUVtaXR0ZXIuZW1pdCgpO1xyXG4gICAgdGhpcy5fZGlzcG9zZUVtaXR0ZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XHJcbiAgfVxyXG59XHJcblxyXG5heG9uLnJlZ2lzdGVyKCAnRGlzcG9zYWJsZScsIERpc3Bvc2FibGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgRGlzcG9zYWJsZTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxJQUFJLE1BQU0sV0FBVztBQUU1QixPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRTFDLE1BQU1DLFVBQVUsQ0FBQztFQUVmO0VBQ0E7RUFDZ0JDLGVBQWUsR0FBYSxJQUFJRixXQUFXLENBQUMsQ0FBQzs7RUFFN0Q7RUFDUUcsV0FBVyxHQUFHLEtBQUs7O0VBRTNCO0VBQ1VDLFdBQVdBLENBQUEsRUFBRztJQUN0QixJQUFLQyxNQUFNLEVBQUc7TUFFWjtNQUNBO01BQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUksQ0FBQ0MsT0FBTztNQUNqQyxJQUFJLENBQUNBLE9BQU8sR0FBRyxNQUFNO1FBQ25CRixNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDLElBQUksQ0FBQ0YsV0FBVyxFQUFFLHlFQUEwRSxDQUFDO1FBQ2hIRyxZQUFZLENBQUNFLElBQUksQ0FBRSxJQUFLLENBQUM7UUFDekJILE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0YsV0FBVyxFQUFFLHdFQUF5RSxDQUFDO01BQ2hILENBQUM7SUFDSDtFQUNGO0VBRU9NLGlCQUFpQkEsQ0FBQSxFQUFhO0lBQ25DLE9BQU8sSUFBSSxDQUFDUCxlQUFlO0VBQzdCO0VBRUEsSUFBV1EsY0FBY0EsQ0FBQSxFQUFhO0lBQ3BDLE9BQU8sSUFBSSxDQUFDRCxpQkFBaUIsQ0FBQyxDQUFDO0VBQ2pDO0VBRUEsSUFBV0UsVUFBVUEsQ0FBQSxFQUFZO0lBQy9CLE9BQU8sSUFBSSxDQUFDUixXQUFXO0VBQ3pCO0VBRU9JLE9BQU9BLENBQUEsRUFBUztJQUNyQkYsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUNGLFdBQVcsRUFBRSxzQ0FBdUMsQ0FBQztJQUM3RSxJQUFJLENBQUNELGVBQWUsQ0FBQ1UsSUFBSSxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDVixlQUFlLENBQUNLLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQ0osV0FBVyxHQUFHLElBQUk7RUFDekI7QUFDRjtBQUVBSixJQUFJLENBQUNjLFFBQVEsQ0FBRSxZQUFZLEVBQUVaLFVBQVcsQ0FBQztBQUN6QyxlQUFlQSxVQUFVIn0=