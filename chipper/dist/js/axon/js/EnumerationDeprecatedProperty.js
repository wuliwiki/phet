// Copyright 2019-2022, University of Colorado Boulder

/**
 * Property whose value is a member of an Enumeration.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import deprecationWarning from '../../phet-core/js/deprecationWarning.js';
import EnumerationDeprecated from '../../phet-core/js/EnumerationDeprecated.js';
import merge from '../../phet-core/js/merge.js';
import EnumerationIO from '../../tandem/js/types/EnumerationIO.js';
import axon from './axon.js';
import Property from './Property.js';

/**
 * @deprecated
 */
class EnumerationDeprecatedProperty extends Property {
  /**
   * @param {EnumerationDeprecated} enumeration
   * @param {*} initialValue - one of the values from enumeration
   * @param {Object} [options]
   */
  constructor(enumeration, initialValue, options) {
    deprecationWarning('Use EnumerationProperty. EnumerationDeprecated should be exchanged for classes that extend EnumerationValue, see WilderEnumerationPatterns for examples.');
    assert && assert(enumeration instanceof EnumerationDeprecated, 'likely you are using the new and improved Enumeration, better use EnumerationProperty too.');
    assert && assert(enumeration.VALUES.includes(initialValue), `invalid initialValue: ${initialValue}`);
    if (options) {
      // client cannot specify superclass options that are not supported by EnumerationDeprecatedProperty
      assert && assert(!options.hasOwnProperty('isValidValue'), 'EnumerationDeprecatedProperty does not support isValidValue');

      // client cannot specify superclass options that are controlled by EnumerationDeprecatedProperty
      assert && assert(!options.hasOwnProperty('valueType'), 'EnumerationDeprecatedProperty sets valueType');
      assert && assert(!options.hasOwnProperty('phetioType'), 'EnumerationDeprecatedProperty sets phetioType');
    }
    options = merge({
      valueType: enumeration,
      phetioValueType: EnumerationIO(enumeration),
      validValues: enumeration.VALUES // for PhET-iO documentation and support
    }, options);
    super(initialValue, options);

    // @public (read-only)
    this.enumeration = enumeration;
  }
}
axon.register('EnumerationDeprecatedProperty', EnumerationDeprecatedProperty);
export default EnumerationDeprecatedProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXByZWNhdGlvbldhcm5pbmciLCJFbnVtZXJhdGlvbkRlcHJlY2F0ZWQiLCJtZXJnZSIsIkVudW1lcmF0aW9uSU8iLCJheG9uIiwiUHJvcGVydHkiLCJFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwiZW51bWVyYXRpb24iLCJpbml0aWFsVmFsdWUiLCJvcHRpb25zIiwiYXNzZXJ0IiwiVkFMVUVTIiwiaW5jbHVkZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbHVlVHlwZSIsInBoZXRpb1ZhbHVlVHlwZSIsInZhbGlkVmFsdWVzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0eSB3aG9zZSB2YWx1ZSBpcyBhIG1lbWJlciBvZiBhbiBFbnVtZXJhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgZGVwcmVjYXRpb25XYXJuaW5nIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9kZXByZWNhdGlvbldhcm5pbmcuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb25EZXByZWNhdGVkIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvbkRlcHJlY2F0ZWQuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uSU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0VudW1lcmF0aW9uSU8uanMnO1xyXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi9Qcm9wZXJ0eS5qcyc7XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWRcclxuICovXHJcbmNsYXNzIEVudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5IGV4dGVuZHMgUHJvcGVydHkge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0VudW1lcmF0aW9uRGVwcmVjYXRlZH0gZW51bWVyYXRpb25cclxuICAgKiBAcGFyYW0geyp9IGluaXRpYWxWYWx1ZSAtIG9uZSBvZiB0aGUgdmFsdWVzIGZyb20gZW51bWVyYXRpb25cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGVudW1lcmF0aW9uLCBpbml0aWFsVmFsdWUsIG9wdGlvbnMgKSB7XHJcbiAgICBkZXByZWNhdGlvbldhcm5pbmcoICdVc2UgRW51bWVyYXRpb25Qcm9wZXJ0eS4gRW51bWVyYXRpb25EZXByZWNhdGVkIHNob3VsZCBiZSBleGNoYW5nZWQgZm9yIGNsYXNzZXMgdGhhdCBleHRlbmQgRW51bWVyYXRpb25WYWx1ZSwgc2VlIFdpbGRlckVudW1lcmF0aW9uUGF0dGVybnMgZm9yIGV4YW1wbGVzLicgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBlbnVtZXJhdGlvbiBpbnN0YW5jZW9mIEVudW1lcmF0aW9uRGVwcmVjYXRlZCwgJ2xpa2VseSB5b3UgYXJlIHVzaW5nIHRoZSBuZXcgYW5kIGltcHJvdmVkIEVudW1lcmF0aW9uLCBiZXR0ZXIgdXNlIEVudW1lcmF0aW9uUHJvcGVydHkgdG9vLicgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGVudW1lcmF0aW9uLlZBTFVFUy5pbmNsdWRlcyggaW5pdGlhbFZhbHVlICksIGBpbnZhbGlkIGluaXRpYWxWYWx1ZTogJHtpbml0aWFsVmFsdWV9YCApO1xyXG5cclxuICAgIGlmICggb3B0aW9ucyApIHtcclxuXHJcbiAgICAgIC8vIGNsaWVudCBjYW5ub3Qgc3BlY2lmeSBzdXBlcmNsYXNzIG9wdGlvbnMgdGhhdCBhcmUgbm90IHN1cHBvcnRlZCBieSBFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eVxyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSggJ2lzVmFsaWRWYWx1ZScgKSwgJ0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5IGRvZXMgbm90IHN1cHBvcnQgaXNWYWxpZFZhbHVlJyApO1xyXG5cclxuICAgICAgLy8gY2xpZW50IGNhbm5vdCBzcGVjaWZ5IHN1cGVyY2xhc3Mgb3B0aW9ucyB0aGF0IGFyZSBjb250cm9sbGVkIGJ5IEVudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLmhhc093blByb3BlcnR5KCAndmFsdWVUeXBlJyApLCAnRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkgc2V0cyB2YWx1ZVR5cGUnICk7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLmhhc093blByb3BlcnR5KCAncGhldGlvVHlwZScgKSwgJ0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5IHNldHMgcGhldGlvVHlwZScgKTtcclxuICAgIH1cclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgdmFsdWVUeXBlOiBlbnVtZXJhdGlvbixcclxuICAgICAgcGhldGlvVmFsdWVUeXBlOiBFbnVtZXJhdGlvbklPKCBlbnVtZXJhdGlvbiApLFxyXG4gICAgICB2YWxpZFZhbHVlczogZW51bWVyYXRpb24uVkFMVUVTIC8vIGZvciBQaEVULWlPIGRvY3VtZW50YXRpb24gYW5kIHN1cHBvcnRcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggaW5pdGlhbFZhbHVlLCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy5lbnVtZXJhdGlvbiA9IGVudW1lcmF0aW9uO1xyXG4gIH1cclxufVxyXG5cclxuYXhvbi5yZWdpc3RlciggJ0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5JywgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkgKTtcclxuZXhwb3J0IGRlZmF1bHQgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGtCQUFrQixNQUFNLDBDQUEwQztBQUN6RSxPQUFPQyxxQkFBcUIsTUFBTSw2Q0FBNkM7QUFDL0UsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxhQUFhLE1BQU0sd0NBQXdDO0FBQ2xFLE9BQU9DLElBQUksTUFBTSxXQUFXO0FBQzVCLE9BQU9DLFFBQVEsTUFBTSxlQUFlOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxNQUFNQyw2QkFBNkIsU0FBU0QsUUFBUSxDQUFDO0VBRW5EO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUVDLE9BQU8sRUFBRztJQUNoRFYsa0JBQWtCLENBQUUsMEpBQTJKLENBQUM7SUFFaExXLE1BQU0sSUFBSUEsTUFBTSxDQUFFSCxXQUFXLFlBQVlQLHFCQUFxQixFQUFFLDRGQUE2RixDQUFDO0lBQzlKVSxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsV0FBVyxDQUFDSSxNQUFNLENBQUNDLFFBQVEsQ0FBRUosWUFBYSxDQUFDLEVBQUcseUJBQXdCQSxZQUFhLEVBQUUsQ0FBQztJQUV4RyxJQUFLQyxPQUFPLEVBQUc7TUFFYjtNQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDRCxPQUFPLENBQUNJLGNBQWMsQ0FBRSxjQUFlLENBQUMsRUFBRSw2REFBOEQsQ0FBQzs7TUFFNUg7TUFDQUgsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0QsT0FBTyxDQUFDSSxjQUFjLENBQUUsV0FBWSxDQUFDLEVBQUUsOENBQStDLENBQUM7TUFDMUdILE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNELE9BQU8sQ0FBQ0ksY0FBYyxDQUFFLFlBQWEsQ0FBQyxFQUFFLCtDQUFnRCxDQUFDO0lBQzlHO0lBRUFKLE9BQU8sR0FBR1IsS0FBSyxDQUFFO01BQ2ZhLFNBQVMsRUFBRVAsV0FBVztNQUN0QlEsZUFBZSxFQUFFYixhQUFhLENBQUVLLFdBQVksQ0FBQztNQUM3Q1MsV0FBVyxFQUFFVCxXQUFXLENBQUNJLE1BQU0sQ0FBQztJQUNsQyxDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUQsWUFBWSxFQUFFQyxPQUFRLENBQUM7O0lBRTlCO0lBQ0EsSUFBSSxDQUFDRixXQUFXLEdBQUdBLFdBQVc7RUFDaEM7QUFDRjtBQUVBSixJQUFJLENBQUNjLFFBQVEsQ0FBRSwrQkFBK0IsRUFBRVosNkJBQThCLENBQUM7QUFDL0UsZUFBZUEsNkJBQTZCIn0=