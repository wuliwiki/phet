// Copyright 2020-2023, University of Colorado Boulder

/**
 * A lightweight version of Property (that satisfies some of the interface), meant for high-performance applications
 * where validation, phet-io support and other things are not needed.
 *
 * This directly extends TinyEmitter in order to save memory.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import axon from './axon.js';
import TinyEmitter from './TinyEmitter.js';
export default class TinyProperty extends TinyEmitter {
  // Store the internal value -- NOT for general use (but used in Scenery for performance)

  // Forces use of the deep equality checks. Keeps some compatibility with the Property interface to have the equality
  // check in this type too. Not defining in the general case for memory usage, only using if we notice this flag set.
  constructor(value, onBeforeNotify, hasListenerOrderDependencies) {
    super(onBeforeNotify, hasListenerOrderDependencies);
    this._value = value;
  }

  /**
   * Returns the value.
   *
   * You can also use the es5 getter (property.value) but this means is provided for inner loops
   * or internal code that must be fast.
   */
  get() {
    return this._value;
  }

  /**
   * Returns the value.
   */
  get value() {
    return this.get();
  }

  /**
   * Sets the value.
   */
  set value(newValue) {
    this.set(newValue);
  }

  /**
   * Sets the value and notifies listeners, unless deferred or disposed. You can also use the es5 getter
   * (property.value) but this means is provided for inner loops or internal code that must be fast. If the value
   * hasn't changed, this is a no-op.
   */
  set(value) {
    if (!this.equalsValue(value)) {
      const oldValue = this._value;
      this.setPropertyValue(value);
      this.notifyListeners(oldValue);
    }
  }

  /**
   * Sets the value without notifying any listeners. This is a place to override if a subtype performs additional work
   * when setting the value.
   */
  setPropertyValue(value) {
    this._value = value;
  }

  /**
   * Returns true if and only if the specified value equals the value of this property
   */
  equalsValue(value) {
    return this.areValuesEqual(value, this._value);
  }

  /**
   * Determines equality semantics for the wrapped type, including whether notifications are sent out when the
   * wrapped value changes, and whether onValue is triggered.
   * (Property)
   *
   * useDeepEquality: true => Use the `equals` method on the values
   * useDeepEquality: false => Use === for equality test
   *
   * Alternatively different implementation can be provided by subclasses or instances to change the equals
   * definition. See #10 and #73 and #115
   */
  areValuesEqual(a, b) {
    if (this.useDeepEquality) {
      const aObject = a;
      const bObject = b;
      if (aObject && bObject && aObject.constructor === bObject.constructor) {
        assert && assert(!!aObject.equals, 'no equals function for 1st arg');
        assert && assert(!!bObject.equals, 'no equals function for 2nd arg');
        assert && assert(aObject.equals(bObject) === bObject.equals(aObject), 'incompatible equality checks');
        return aObject.equals(bObject);
      }
    }

    // Reference equality for objects, value equality for primitives
    return a === b;
  }

  /**
   * Directly notifies listeners of changes.
   */
  notifyListeners(oldValue) {
    // We use this._value here for performance, AND to avoid calling onAccessAttempt unnecessarily.
    this.emit(this._value, oldValue, this);
  }

  /**
   * Adds listener and calls it immediately. If listener is already registered, this is a no-op. The initial
   * notification provides the current value for newValue and null for oldValue.
   */
  link(listener) {
    this.addListener(listener);
    listener(this._value, null, this); // null should be used when an object is expected but unavailable
  }

  /**
   * Add an listener to the TinyProperty, without calling it back right away. This is used when you need to register a
   * listener without an immediate callback.
   */
  lazyLink(listener) {
    this.addListener(listener); // Because it's a lazy link, it will never be called with null
  }

  /**
   * Removes a listener. If listener is not registered, this is a no-op.
   */
  unlink(listener) {
    this.removeListener(listener);
  }

  /**
   * Removes all listeners. If no listeners are registered, this is a no-op.
   */
  unlinkAll() {
    this.removeAllListeners();
  }

  /**
   * Links an object's named attribute to this TinyProperty.  Returns a handle so it can be removed using
   * TinyProperty.unlink();
   * Example: modelVisibleProperty.linkAttribute(view, 'visible');
   *
   * NOTE: Duplicated with Property.linkAttribute
   */
  linkAttribute(object, attributeName) {
    const handle = value => {
      object[attributeName] = value;
    };
    this.link(handle);
    return handle;
  }

  /**
   * Returns true if the value can be set externally, using .value= or set()
   */
  isSettable() {
    return true;
  }

  /**
   * Releases references.
   */
  dispose() {
    // Remove any listeners that are still attached (note that the emitter dispose would do this also, but without the
    // potentially-needed extra logic of changeCount, etc.)
    this.unlinkAll();
    super.dispose();
  }
}
axon.register('TinyProperty', TinyProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,