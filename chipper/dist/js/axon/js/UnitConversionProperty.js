// Copyright 2022-2023, University of Colorado Boulder

/**
 * A MappedProperty specialized for unit conversion. Just provide multiplicative factor to convert between the units,
 * or optionally a map/inverseMap. Additionally if there is a rangeProperty on the source, this Property will have a
 * mapped range.
 *
 * For example:
 * const metersProperty = new NumberProperty( 0.5, { range: new Range( 0, 1 ) } );
 * const centimetersProperty = new UnitConversionProperty( metersProperty, { factor: 100 } );
 * centimetersProperty.value; // 50
 * centimetersProperty.range; // Range( 0, 100 )
 *
 * // One way
 * metersProperty.value = 0.25
 * centimetersProperty.value; // 25
 *
 * // Bidirectional
 * centimetersProperty.value = 100;
 * metersProperty.value; // 1
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import axon from './axon.js';
import Range from '../../dot/js/Range.js';
import MappedProperty from './MappedProperty.js';
import Property from './Property.js';
import { DEFAULT_RANGE } from './NumberProperty.js';
import optionize from '../../phet-core/js/optionize.js';
import { isTRangedProperty } from './TRangedProperty.js';
export default class UnitConversionProperty extends MappedProperty {
  constructor(property, providedOptions) {
    const map = input => input * providedOptions.factor;
    const inverseMap = output => output / providedOptions.factor;
    const options = optionize()({
      // Bidirectional by default, since we'll have a map and inverseMap guaranteed
      bidirectional: true,
      map: map,
      inverseMap: inverseMap
    }, providedOptions);

    // @ts-expect-error Expression produces a union type that is too complex to represent.
    super(property, options);
    this._property = property;
    this.rangeProperty = new Property(DEFAULT_RANGE);
    if (isTRangedProperty(property)) {
      // Watch the range of the target Property, and update ours to match
      this._rangeListener = range => {
        const min = map(range.min);
        const max = map(range.max);
        // Handle a negative factor or something else where the min/max gets swapped
        this.rangeProperty.value = new Range(Math.min(min, max), Math.max(min, max));
      };
      property.rangeProperty.link(this._rangeListener);
    }
  }
  get range() {
    return this.rangeProperty.value;
  }

  // NOTE: NOT bidirectional yet!
  set range(value) {
    this.rangeProperty.value = value;
  }
  dispose() {
    if (isTRangedProperty(this._property)) {
      this._property.rangeProperty.unlink(this._rangeListener);
    }
    this.rangeProperty.dispose();
  }
}
axon.register('UnitConversionProperty', UnitConversionProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiUmFuZ2UiLCJNYXBwZWRQcm9wZXJ0eSIsIlByb3BlcnR5IiwiREVGQVVMVF9SQU5HRSIsIm9wdGlvbml6ZSIsImlzVFJhbmdlZFByb3BlcnR5IiwiVW5pdENvbnZlcnNpb25Qcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwicHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJtYXAiLCJpbnB1dCIsImZhY3RvciIsImludmVyc2VNYXAiLCJvdXRwdXQiLCJvcHRpb25zIiwiYmlkaXJlY3Rpb25hbCIsIl9wcm9wZXJ0eSIsInJhbmdlUHJvcGVydHkiLCJfcmFuZ2VMaXN0ZW5lciIsInJhbmdlIiwibWluIiwibWF4IiwidmFsdWUiLCJNYXRoIiwibGluayIsImRpc3Bvc2UiLCJ1bmxpbmsiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVuaXRDb252ZXJzaW9uUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBNYXBwZWRQcm9wZXJ0eSBzcGVjaWFsaXplZCBmb3IgdW5pdCBjb252ZXJzaW9uLiBKdXN0IHByb3ZpZGUgbXVsdGlwbGljYXRpdmUgZmFjdG9yIHRvIGNvbnZlcnQgYmV0d2VlbiB0aGUgdW5pdHMsXHJcbiAqIG9yIG9wdGlvbmFsbHkgYSBtYXAvaW52ZXJzZU1hcC4gQWRkaXRpb25hbGx5IGlmIHRoZXJlIGlzIGEgcmFuZ2VQcm9wZXJ0eSBvbiB0aGUgc291cmNlLCB0aGlzIFByb3BlcnR5IHdpbGwgaGF2ZSBhXHJcbiAqIG1hcHBlZCByYW5nZS5cclxuICpcclxuICogRm9yIGV4YW1wbGU6XHJcbiAqIGNvbnN0IG1ldGVyc1Byb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCAwLjUsIHsgcmFuZ2U6IG5ldyBSYW5nZSggMCwgMSApIH0gKTtcclxuICogY29uc3QgY2VudGltZXRlcnNQcm9wZXJ0eSA9IG5ldyBVbml0Q29udmVyc2lvblByb3BlcnR5KCBtZXRlcnNQcm9wZXJ0eSwgeyBmYWN0b3I6IDEwMCB9ICk7XHJcbiAqIGNlbnRpbWV0ZXJzUHJvcGVydHkudmFsdWU7IC8vIDUwXHJcbiAqIGNlbnRpbWV0ZXJzUHJvcGVydHkucmFuZ2U7IC8vIFJhbmdlKCAwLCAxMDAgKVxyXG4gKlxyXG4gKiAvLyBPbmUgd2F5XHJcbiAqIG1ldGVyc1Byb3BlcnR5LnZhbHVlID0gMC4yNVxyXG4gKiBjZW50aW1ldGVyc1Byb3BlcnR5LnZhbHVlOyAvLyAyNVxyXG4gKlxyXG4gKiAvLyBCaWRpcmVjdGlvbmFsXHJcbiAqIGNlbnRpbWV0ZXJzUHJvcGVydHkudmFsdWUgPSAxMDA7XHJcbiAqIG1ldGVyc1Byb3BlcnR5LnZhbHVlOyAvLyAxXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNYXBwZWRQcm9wZXJ0eSwgeyBNYXBwZWRQcm9wZXJ0eU9wdGlvbnMgfSBmcm9tICcuL01hcHBlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4vUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBERUZBVUxUX1JBTkdFIH0gZnJvbSAnLi9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBUUmFuZ2VkUHJvcGVydHksIHsgaXNUUmFuZ2VkUHJvcGVydHkgfSBmcm9tICcuL1RSYW5nZWRQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIC8vIFRoZSBtdWx0aXBsaWNhdGl2ZSBmYWN0b3IgdG8gY29udmVydCBmcm9tIElOUFVUID0+IE9VVFBVVCwgZS5nLlxyXG4gIC8vIHRoaXMudmFsdWUgPT09IGZhY3RvciAqIHByb3BlcnR5LnZhbHVlXHJcbiAgLy8gVGhpcyB3aWxsIGJlIHVzZWQgdG8gcHJvdmlkZSBkZWZhdWx0cyBmb3IgbWFwL2ludmVyc2VNYXAgaWYgcHJvdmlkZWRcclxuICBmYWN0b3I6IG51bWJlcjtcclxufTtcclxudHlwZSBQYXJlbnRPcHRpb25zID0gTWFwcGVkUHJvcGVydHlPcHRpb25zPG51bWJlciwgbnVtYmVyPjtcclxuZXhwb3J0IHR5cGUgVW5pdENvbnZlcnNpb25Qcm9wZXJ0eU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBhcmVudE9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbml0Q29udmVyc2lvblByb3BlcnR5IGV4dGVuZHMgTWFwcGVkUHJvcGVydHk8bnVtYmVyLCBudW1iZXI+IGltcGxlbWVudHMgVFJhbmdlZFByb3BlcnR5IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHJhbmdlUHJvcGVydHk6IFRQcm9wZXJ0eTxSYW5nZT47XHJcblxyXG4gIHByaXZhdGUgX3Byb3BlcnR5OiAoIFRQcm9wZXJ0eTxudW1iZXI+IHwgVFJhbmdlZFByb3BlcnR5ICk7XHJcbiAgcHJpdmF0ZSBfcmFuZ2VMaXN0ZW5lcj86ICggcmFuZ2U6IFJhbmdlICkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eTogKCBUUHJvcGVydHk8bnVtYmVyPiB8IFRSYW5nZWRQcm9wZXJ0eSApLCBwcm92aWRlZE9wdGlvbnM6IFVuaXRDb252ZXJzaW9uUHJvcGVydHlPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG1hcCA9ICggaW5wdXQ6IG51bWJlciApID0+IGlucHV0ICogcHJvdmlkZWRPcHRpb25zLmZhY3RvcjtcclxuICAgIGNvbnN0IGludmVyc2VNYXAgPSAoIG91dHB1dDogbnVtYmVyICkgPT4gb3V0cHV0IC8gcHJvdmlkZWRPcHRpb25zLmZhY3RvcjtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VW5pdENvbnZlcnNpb25Qcm9wZXJ0eU9wdGlvbnMsIFNlbGZPcHRpb25zLCBQYXJlbnRPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBCaWRpcmVjdGlvbmFsIGJ5IGRlZmF1bHQsIHNpbmNlIHdlJ2xsIGhhdmUgYSBtYXAgYW5kIGludmVyc2VNYXAgZ3VhcmFudGVlZFxyXG4gICAgICBiaWRpcmVjdGlvbmFsOiB0cnVlLFxyXG5cclxuICAgICAgbWFwOiBtYXAsXHJcbiAgICAgIGludmVyc2VNYXA6IGludmVyc2VNYXBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgRXhwcmVzc2lvbiBwcm9kdWNlcyBhIHVuaW9uIHR5cGUgdGhhdCBpcyB0b28gY29tcGxleCB0byByZXByZXNlbnQuXHJcbiAgICBzdXBlciggcHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLl9wcm9wZXJ0eSA9IHByb3BlcnR5O1xyXG5cclxuICAgIHRoaXMucmFuZ2VQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eTxSYW5nZT4oIERFRkFVTFRfUkFOR0UgKTtcclxuXHJcbiAgICBpZiAoIGlzVFJhbmdlZFByb3BlcnR5KCBwcm9wZXJ0eSApICkge1xyXG5cclxuICAgICAgLy8gV2F0Y2ggdGhlIHJhbmdlIG9mIHRoZSB0YXJnZXQgUHJvcGVydHksIGFuZCB1cGRhdGUgb3VycyB0byBtYXRjaFxyXG4gICAgICB0aGlzLl9yYW5nZUxpc3RlbmVyID0gKCByYW5nZTogUmFuZ2UgKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWluID0gbWFwKCByYW5nZS5taW4gKTtcclxuICAgICAgICBjb25zdCBtYXggPSBtYXAoIHJhbmdlLm1heCApO1xyXG4gICAgICAgIC8vIEhhbmRsZSBhIG5lZ2F0aXZlIGZhY3RvciBvciBzb21ldGhpbmcgZWxzZSB3aGVyZSB0aGUgbWluL21heCBnZXRzIHN3YXBwZWRcclxuICAgICAgICB0aGlzLnJhbmdlUHJvcGVydHkudmFsdWUgPSBuZXcgUmFuZ2UoIE1hdGgubWluKCBtaW4sIG1heCApLCBNYXRoLm1heCggbWluLCBtYXggKSApO1xyXG4gICAgICB9O1xyXG4gICAgICBwcm9wZXJ0eS5yYW5nZVByb3BlcnR5LmxpbmsoIHRoaXMuX3JhbmdlTGlzdGVuZXIgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgcmFuZ2UoKTogUmFuZ2Uge1xyXG4gICAgcmV0dXJuIHRoaXMucmFuZ2VQcm9wZXJ0eS52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8vIE5PVEU6IE5PVCBiaWRpcmVjdGlvbmFsIHlldCFcclxuICBwdWJsaWMgc2V0IHJhbmdlKCB2YWx1ZTogUmFuZ2UgKSB7XHJcbiAgICB0aGlzLnJhbmdlUHJvcGVydHkudmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgaWYgKCBpc1RSYW5nZWRQcm9wZXJ0eSggdGhpcy5fcHJvcGVydHkgKSApIHtcclxuICAgICAgdGhpcy5fcHJvcGVydHkucmFuZ2VQcm9wZXJ0eS51bmxpbmsoIHRoaXMuX3JhbmdlTGlzdGVuZXIhICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yYW5nZVByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmF4b24ucmVnaXN0ZXIoICdVbml0Q29udmVyc2lvblByb3BlcnR5JywgVW5pdENvbnZlcnNpb25Qcm9wZXJ0eSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxJQUFJLE1BQU0sV0FBVztBQUM1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