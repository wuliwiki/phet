// Copyright 2022, University of Colorado Boulder

import ReadOnlyProperty from './ReadOnlyProperty.js';
import axon from './axon.js';

/**
 * Adds initial value and reset, and a mutable interface.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
export default class Property extends ReadOnlyProperty {
  constructor(value, providedOptions) {
    super(value, providedOptions);
    this._initialValue = value;
  }

  /**
   * Returns the initial value of this Property.
   */
  getInitialValue() {
    return this._initialValue;
  }
  get initialValue() {
    return this.getInitialValue();
  }

  /**
   * Stores the specified value as the initial value, which will be taken on reset. Sims should use this sparingly,
   * typically only in situations where the initial value is unknowable at instantiation.
   */
  setInitialValue(initialValue) {
    this._initialValue = initialValue;
  }

  /**
   * Overridden to make public
   */
  get value() {
    return super.value;
  }

  /**
   * Overridden to make public
   * We ran performance tests on Chrome, and determined that calling super.value = newValue is statistically significantly
   * slower at the p = 0.10 level( looping over 10,000 value calls). Therefore, we prefer this optimization.
   */
  set value(newValue) {
    super.set(newValue);
  }
  reset() {
    this.set(this._initialValue);
  }

  /**
   * Overridden to make public
   */
  set(value) {
    super.set(value);
  }
  isSettable() {
    return true;
  }
}
axon.register('Property', Property);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFkT25seVByb3BlcnR5IiwiYXhvbiIsIlByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsInByb3ZpZGVkT3B0aW9ucyIsIl9pbml0aWFsVmFsdWUiLCJnZXRJbml0aWFsVmFsdWUiLCJpbml0aWFsVmFsdWUiLCJzZXRJbml0aWFsVmFsdWUiLCJuZXdWYWx1ZSIsInNldCIsInJlc2V0IiwiaXNTZXR0YWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSZWFkT25seVByb3BlcnR5LCB7IFByb3BlcnR5T3B0aW9ucyB9IGZyb20gJy4vUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBheG9uIGZyb20gJy4vYXhvbi5qcyc7XHJcblxyXG4vKipcclxuICogQWRkcyBpbml0aWFsIHZhbHVlIGFuZCByZXNldCwgYW5kIGEgbXV0YWJsZSBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9wZXJ0eTxUPiBleHRlbmRzIFJlYWRPbmx5UHJvcGVydHk8VD4gaW1wbGVtZW50cyBUUHJvcGVydHk8VD4ge1xyXG5cclxuICBwcm90ZWN0ZWQgX2luaXRpYWxWYWx1ZTogVDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZTogVCwgcHJvdmlkZWRPcHRpb25zPzogUHJvcGVydHlPcHRpb25zPFQ+ICkge1xyXG4gICAgc3VwZXIoIHZhbHVlLCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLl9pbml0aWFsVmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGluaXRpYWwgdmFsdWUgb2YgdGhpcyBQcm9wZXJ0eS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0SW5pdGlhbFZhbHVlKCk6IFQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxWYWx1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaW5pdGlhbFZhbHVlKCk6IFQge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0SW5pdGlhbFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9yZXMgdGhlIHNwZWNpZmllZCB2YWx1ZSBhcyB0aGUgaW5pdGlhbCB2YWx1ZSwgd2hpY2ggd2lsbCBiZSB0YWtlbiBvbiByZXNldC4gU2ltcyBzaG91bGQgdXNlIHRoaXMgc3BhcmluZ2x5LFxyXG4gICAqIHR5cGljYWxseSBvbmx5IGluIHNpdHVhdGlvbnMgd2hlcmUgdGhlIGluaXRpYWwgdmFsdWUgaXMgdW5rbm93YWJsZSBhdCBpbnN0YW50aWF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRJbml0aWFsVmFsdWUoIGluaXRpYWxWYWx1ZTogVCApOiB2b2lkIHtcclxuICAgIHRoaXMuX2luaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE92ZXJyaWRkZW4gdG8gbWFrZSBwdWJsaWNcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IHZhbHVlKCk6IFQge1xyXG4gICAgcmV0dXJuIHN1cGVyLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3ZlcnJpZGRlbiB0byBtYWtlIHB1YmxpY1xyXG4gICAqIFdlIHJhbiBwZXJmb3JtYW5jZSB0ZXN0cyBvbiBDaHJvbWUsIGFuZCBkZXRlcm1pbmVkIHRoYXQgY2FsbGluZyBzdXBlci52YWx1ZSA9IG5ld1ZhbHVlIGlzIHN0YXRpc3RpY2FsbHkgc2lnbmlmaWNhbnRseVxyXG4gICAqIHNsb3dlciBhdCB0aGUgcCA9IDAuMTAgbGV2ZWwoIGxvb3Bpbmcgb3ZlciAxMCwwMDAgdmFsdWUgY2FsbHMpLiBUaGVyZWZvcmUsIHdlIHByZWZlciB0aGlzIG9wdGltaXphdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgc2V0IHZhbHVlKCBuZXdWYWx1ZTogVCApIHtcclxuICAgIHN1cGVyLnNldCggbmV3VmFsdWUgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0KCB0aGlzLl9pbml0aWFsVmFsdWUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE92ZXJyaWRkZW4gdG8gbWFrZSBwdWJsaWNcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgc2V0KCB2YWx1ZTogVCApOiB2b2lkIHtcclxuICAgIHN1cGVyLnNldCggdmFsdWUgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBpc1NldHRhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSB7IFByb3BlcnR5T3B0aW9ucyB9O1xyXG5cclxuYXhvbi5yZWdpc3RlciggJ1Byb3BlcnR5JywgUHJvcGVydHkgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUdBLE9BQU9BLGdCQUFnQixNQUEyQix1QkFBdUI7QUFDekUsT0FBT0MsSUFBSSxNQUFNLFdBQVc7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU1DLFFBQVEsU0FBWUYsZ0JBQWdCLENBQTRCO0VBSTVFRyxXQUFXQSxDQUFFQyxLQUFRLEVBQUVDLGVBQW9DLEVBQUc7SUFDbkUsS0FBSyxDQUFFRCxLQUFLLEVBQUVDLGVBQWdCLENBQUM7SUFFL0IsSUFBSSxDQUFDQyxhQUFhLEdBQUdGLEtBQUs7RUFDNUI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NHLGVBQWVBLENBQUEsRUFBTTtJQUMxQixPQUFPLElBQUksQ0FBQ0QsYUFBYTtFQUMzQjtFQUVBLElBQVdFLFlBQVlBLENBQUEsRUFBTTtJQUMzQixPQUFPLElBQUksQ0FBQ0QsZUFBZSxDQUFDLENBQUM7RUFDL0I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDU0UsZUFBZUEsQ0FBRUQsWUFBZSxFQUFTO0lBQzlDLElBQUksQ0FBQ0YsYUFBYSxHQUFHRSxZQUFZO0VBQ25DOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLElBQW9CSixLQUFLQSxDQUFBLEVBQU07SUFDN0IsT0FBTyxLQUFLLENBQUNBLEtBQUs7RUFDcEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFLElBQW9CQSxLQUFLQSxDQUFFTSxRQUFXLEVBQUc7SUFDdkMsS0FBSyxDQUFDQyxHQUFHLENBQUVELFFBQVMsQ0FBQztFQUN2QjtFQUVPRSxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDRCxHQUFHLENBQUUsSUFBSSxDQUFDTCxhQUFjLENBQUM7RUFDaEM7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCSyxHQUFHQSxDQUFFUCxLQUFRLEVBQVM7SUFDcEMsS0FBSyxDQUFDTyxHQUFHLENBQUVQLEtBQU0sQ0FBQztFQUNwQjtFQUVnQlMsVUFBVUEsQ0FBQSxFQUFZO0lBQ3BDLE9BQU8sSUFBSTtFQUNiO0FBQ0Y7QUFJQVosSUFBSSxDQUFDYSxRQUFRLENBQUUsVUFBVSxFQUFFWixRQUFTLENBQUMifQ==