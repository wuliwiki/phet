// Copyright 2022, University of Colorado Boulder

/**
 * A TinyProperty that will take the value of a target Property until it is set to a value. When that happens, it will
 * be its own standalone Property.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import axon from './axon.js';
import TinyProperty from './TinyProperty.js';
export default class TinyOverrideProperty extends TinyProperty {
  // If true, we ignore our targetProperty and just use our value. If false, we only report the value of the
  // targetProperty
  isOverridden = false;
  constructor(targetProperty) {
    super(targetProperty.value);
    this._targetProperty = targetProperty;
    assert && assert(!this.isOverridden, 'Should not be overridden on startup');

    // We'll need to listen to our target to dispatch notifications
    this._targetListener = this.onTargetPropertyChange.bind(this);
    this._targetProperty.lazyLink(this._targetListener);
  }
  set targetProperty(targetProperty) {
    this.setTargetProperty(targetProperty);
  }
  setTargetProperty(targetProperty) {
    // no-op if it's the same Property
    if (this.targetProperty === targetProperty) {
      return;
    }
    const oldValue = this.value;

    // Listeners are only connected if we are NOT overridden
    if (!this.isOverridden) {
      this._targetProperty.unlink(this._targetListener);
    }
    this._targetProperty = targetProperty;

    // Listeners are only connected if we are NOT overridden
    if (!this.isOverridden) {
      this._targetProperty.lazyLink(this._targetListener);

      // If we are overridden, changing the targetProperty will not trigger notifications
      if (!this.equalsValue(oldValue)) {
        this.notifyListeners(oldValue);
      }
    }
  }

  /**
   * Remove the "overridden" nature of this Property, so that it takes on the appearance of the targetProperty
   */
  clearOverride() {
    if (this.isOverridden) {
      const oldValue = this.value;
      this.isOverridden = false;
      this._targetProperty.lazyLink(this._targetListener);

      // This could change our value!
      if (!this.equalsValue(oldValue)) {
        this.notifyListeners(oldValue);
      }
    }
  }
  get() {
    // The main logic for TinyOverrideProperty
    return this.isOverridden ? this._value : this._targetProperty.value;
  }
  set(value) {
    if (!this.isOverridden) {
      // Grab the last value of the Property, as it will be "active" after this
      this._value = this._targetProperty.value;
    }
    super.set(value);
  }
  setPropertyValue(value) {
    // Switch to "override"
    if (!this.isOverridden) {
      this.isOverridden = true;
      this._targetProperty.unlink(this._targetListener);
    }
    super.setPropertyValue(value);
  }

  // We have to override here to have the getter called
  equalsValue(value) {
    return this.areValuesEqual(value, this.value);
  }
  onTargetPropertyChange(newValue, oldValue) {
    if (!this.isOverridden) {
      this.notifyListeners(oldValue);
    }
  }

  // Overridden, since we need to call our getter
  notifyListeners(oldValue) {
    this.emit(this.value, oldValue, this);
  }
  dispose() {
    // If we've been overridden, we will already have removed the listener
    if (!this.isOverridden) {
      this._targetProperty.unlink(this._targetListener);
    }
    super.dispose();
  }
}
axon.register('TinyOverrideProperty', TinyOverrideProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,