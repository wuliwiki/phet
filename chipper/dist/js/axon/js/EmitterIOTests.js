// Copyright 2019-2022, University of Colorado Boulder

/**
 * QUnit tests for EmitterIO
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import merge from '../../phet-core/js/merge.js';
import IOType from '../../tandem/js/types/IOType.js';
import NumberIO from '../../tandem/js/types/NumberIO.js';
import Emitter from './Emitter.js';
QUnit.module('EmitterIO');
QUnit.test('test EmitterIO', assert => {
  let emitter;
  if (window.assert) {
    assert.throws(() => {
      emitter = new Emitter({
        // @ts-expect-error INTENTIONAL, force set phetioType for testing
        phetioType: Emitter.EmitterIO([])
      });
    }, 'cannot supply default EmitterIO type');
    assert.throws(() => {
      emitter = new Emitter({
        // @ts-expect-error INTENTIONAL, force set phetioType for testing
        phetioType: IOType.ObjectIO
      });
    }, 'cannot supply any phetioType');
  }
  emitter = new Emitter({
    parameters: [{
      phetioType: NumberIO,
      name: 'myNumber'
    }]
  });
  emitter.emit(4);
  emitter.emit(10);
  window.assert && assert.throws(() => emitter.emit('string'), 'cannot emit string');
  window.assert && assert.throws(() => emitter.emit(null), 'cannot emit string');
  const validator = {
    isValidValue: v => typeof v === 'number' && v < 3
  };
  emitter = new Emitter({
    parameters: [merge({
      phetioType: NumberIO,
      name: 'helloIAMNumber'
    }, validator)]
  });
  assert.ok(emitter['parameters'][0].isValidValue === validator.isValidValue, 'should use specified validator instead of NumberIO\'s');
  emitter.emit(2);
  window.assert && assert.throws(() => emitter.emit('string'), 'cannot emit string with validator');
  window.assert && assert.throws(() => emitter.emit('a'), 'cannot emit string with  that validator');
  window.assert && assert.throws(() => emitter.emit(4), 'cannot emit incorrect number');
  if (!window.assert) {
    const IOType = Emitter.EmitterIO([NumberIO]);
    IOType.methods.emit.implementation.call(emitter, 2);
    assert.throws(() => IOType.methods.emit.implementation.call(emitter, 4), 'cannot emit incorrect number');
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIklPVHlwZSIsIk51bWJlcklPIiwiRW1pdHRlciIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsImVtaXR0ZXIiLCJ3aW5kb3ciLCJ0aHJvd3MiLCJwaGV0aW9UeXBlIiwiRW1pdHRlcklPIiwiT2JqZWN0SU8iLCJwYXJhbWV0ZXJzIiwibmFtZSIsImVtaXQiLCJ2YWxpZGF0b3IiLCJpc1ZhbGlkVmFsdWUiLCJ2Iiwib2siLCJtZXRob2RzIiwiaW1wbGVtZW50YXRpb24iLCJjYWxsIl0sInNvdXJjZXMiOlsiRW1pdHRlcklPVGVzdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUVVuaXQgdGVzdHMgZm9yIEVtaXR0ZXJJT1xyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBOdW1iZXJJTyBmcm9tICcuLi8uLi90YW5kZW0vanMvdHlwZXMvTnVtYmVySU8uanMnO1xyXG5pbXBvcnQgRW1pdHRlciBmcm9tICcuL0VtaXR0ZXIuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnRW1pdHRlcklPJyApO1xyXG5cclxuUVVuaXQudGVzdCggJ3Rlc3QgRW1pdHRlcklPJywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgbGV0IGVtaXR0ZXI6IEVtaXR0ZXI8WyB1bmtub3duIF0+O1xyXG5cclxuICBpZiAoIHdpbmRvdy5hc3NlcnQgKSB7XHJcblxyXG4gICAgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgICBlbWl0dGVyID0gbmV3IEVtaXR0ZXIoIHtcclxuXHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBJTlRFTlRJT05BTCwgZm9yY2Ugc2V0IHBoZXRpb1R5cGUgZm9yIHRlc3RpbmdcclxuICAgICAgICBwaGV0aW9UeXBlOiBFbWl0dGVyLkVtaXR0ZXJJTyggW10gKVxyXG4gICAgICB9ICk7XHJcbiAgICB9LCAnY2Fubm90IHN1cHBseSBkZWZhdWx0IEVtaXR0ZXJJTyB0eXBlJyApO1xyXG5cclxuICAgIGFzc2VydC50aHJvd3MoICgpID0+IHtcclxuICAgICAgZW1pdHRlciA9IG5ldyBFbWl0dGVyKCB7XHJcblxyXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSU5URU5USU9OQUwsIGZvcmNlIHNldCBwaGV0aW9UeXBlIGZvciB0ZXN0aW5nXHJcbiAgICAgICAgcGhldGlvVHlwZTogSU9UeXBlLk9iamVjdElPXHJcbiAgICAgIH0gKTtcclxuICAgIH0sICdjYW5ub3Qgc3VwcGx5IGFueSBwaGV0aW9UeXBlJyApO1xyXG4gIH1cclxuXHJcbiAgZW1pdHRlciA9IG5ldyBFbWl0dGVyKCB7XHJcbiAgICBwYXJhbWV0ZXJzOiBbXHJcbiAgICAgIHsgcGhldGlvVHlwZTogTnVtYmVySU8sIG5hbWU6ICdteU51bWJlcicgfVxyXG4gICAgXVxyXG4gIH0gKTtcclxuICBlbWl0dGVyLmVtaXQoIDQgKTtcclxuICBlbWl0dGVyLmVtaXQoIDEwICk7XHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiBlbWl0dGVyLmVtaXQoICdzdHJpbmcnICksICdjYW5ub3QgZW1pdCBzdHJpbmcnICk7XHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiBlbWl0dGVyLmVtaXQoIG51bGwgKSwgJ2Nhbm5vdCBlbWl0IHN0cmluZycgKTtcclxuXHJcbiAgY29uc3QgdmFsaWRhdG9yID0geyBpc1ZhbGlkVmFsdWU6ICggdjogdW5rbm93biApID0+IHR5cGVvZiB2ID09PSAnbnVtYmVyJyAmJiB2IDwgMyB9O1xyXG4gIGVtaXR0ZXIgPSBuZXcgRW1pdHRlcigge1xyXG4gICAgcGFyYW1ldGVyczogWyBtZXJnZSggeyBwaGV0aW9UeXBlOiBOdW1iZXJJTywgbmFtZTogJ2hlbGxvSUFNTnVtYmVyJyB9LCB2YWxpZGF0b3IgKSBdXHJcbiAgfSApO1xyXG4gIGFzc2VydC5vayggZW1pdHRlclsgJ3BhcmFtZXRlcnMnIF1bIDAgXS5pc1ZhbGlkVmFsdWUgPT09IHZhbGlkYXRvci5pc1ZhbGlkVmFsdWUsICdzaG91bGQgdXNlIHNwZWNpZmllZCB2YWxpZGF0b3IgaW5zdGVhZCBvZiBOdW1iZXJJT1xcJ3MnICk7XHJcbiAgZW1pdHRlci5lbWl0KCAyICk7XHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiBlbWl0dGVyLmVtaXQoICdzdHJpbmcnICksICdjYW5ub3QgZW1pdCBzdHJpbmcgd2l0aCB2YWxpZGF0b3InICk7XHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiBlbWl0dGVyLmVtaXQoICdhJyApLCAnY2Fubm90IGVtaXQgc3RyaW5nIHdpdGggIHRoYXQgdmFsaWRhdG9yJyApO1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4gZW1pdHRlci5lbWl0KCA0ICksICdjYW5ub3QgZW1pdCBpbmNvcnJlY3QgbnVtYmVyJyApO1xyXG5cclxuICBpZiAoICF3aW5kb3cuYXNzZXJ0ICkge1xyXG4gICAgY29uc3QgSU9UeXBlID0gRW1pdHRlci5FbWl0dGVySU8oIFsgTnVtYmVySU8gXSApO1xyXG4gICAgSU9UeXBlLm1ldGhvZHMhLmVtaXQuaW1wbGVtZW50YXRpb24uY2FsbCggZW1pdHRlciwgMiApO1xyXG5cclxuICAgIGFzc2VydC50aHJvd3MoICgpID0+IElPVHlwZS5tZXRob2RzIS5lbWl0LmltcGxlbWVudGF0aW9uLmNhbGwoIGVtaXR0ZXIsIDQgKSwgJ2Nhbm5vdCBlbWl0IGluY29ycmVjdCBu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