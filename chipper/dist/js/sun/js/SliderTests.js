// Copyright 2020-2021, University of Colorado Boulder

/**
 * QUnit tests for Slider
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import BooleanProperty from '../../axon/js/BooleanProperty.js';
import Property from '../../axon/js/Property.js';
import TinyProperty from '../../axon/js/TinyProperty.js';
import Range from '../../dot/js/Range.js';
import Tandem from '../../tandem/js/Tandem.js';
import HSlider from './HSlider.js';
QUnit.module('Slider');
QUnit.test('Node.enabledProperty in Slider', assert => {
  let slider = new HSlider(new Property(0), new Range(0, 10), {
    tandem: Tandem.ROOT_TEST.createTandem('mySlider')
  });
  testEnabledNode(assert, slider, 'For Slider');
  slider.dispose();
  const myEnabledProperty = new BooleanProperty(true, {
    tandem: Tandem.ROOT_TEST.createTandem('myEnabledProperty')
  });
  slider = new HSlider(new Property(0), new Range(0, 10), {
    tandem: Tandem.ROOT_TEST.createTandem('mySlider'),
    enabledProperty: myEnabledProperty
  });
  testEnabledNode(assert, slider, 'For Slider');
  slider.dispose();
  myEnabledProperty.dispose();
});

/**
 * Test basic functionality for an object that mixes in EnabledComponent
 * @param {Object} assert - from QUnit
 * @param {Object} enabledNode - mixed in with EnabledComponent
 * @param {string} message - to tack onto assert messages
 */
function testEnabledNode(assert, enabledNode, message) {
  assert.ok(enabledNode.enabledProperty instanceof Property || enabledNode.enabledProperty instanceof TinyProperty, `${message}: enabledProperty should exist`);
  assert.ok(enabledNode.enabledProperty.value === enabledNode.enabled, `${message}: test getter`);
  enabledNode.enabled = false;
  assert.ok(enabledNode.enabled === false, `${message}: test setter`);
  assert.ok(enabledNode.enabledProperty.value === enabledNode.enabled, `${message}: test getter after setting`);
  assert.ok(enabledNode.enabledProperty.value === false, `${message}: test getter after setting`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJQcm9wZXJ0eSIsIlRpbnlQcm9wZXJ0eSIsIlJhbmdlIiwiVGFuZGVtIiwiSFNsaWRlciIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsInNsaWRlciIsInRhbmRlbSIsIlJPT1RfVEVTVCIsImNyZWF0ZVRhbmRlbSIsInRlc3RFbmFibGVkTm9kZSIsImRpc3Bvc2UiLCJteUVuYWJsZWRQcm9wZXJ0eSIsImVuYWJsZWRQcm9wZXJ0eSIsImVuYWJsZWROb2RlIiwibWVzc2FnZSIsIm9rIiwidmFsdWUiLCJlbmFibGVkIl0sInNvdXJjZXMiOlsiU2xpZGVyVGVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUVVuaXQgdGVzdHMgZm9yIFNsaWRlclxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVGlueVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVGlueVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBIU2xpZGVyIGZyb20gJy4vSFNsaWRlci5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdTbGlkZXInICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnTm9kZS5lbmFibGVkUHJvcGVydHkgaW4gU2xpZGVyJywgYXNzZXJ0ID0+IHtcclxuICBsZXQgc2xpZGVyID0gbmV3IEhTbGlkZXIoIG5ldyBQcm9wZXJ0eSggMCApLCBuZXcgUmFuZ2UoIDAsIDEwICksIHtcclxuICAgIHRhbmRlbTogVGFuZGVtLlJPT1RfVEVTVC5jcmVhdGVUYW5kZW0oICdteVNsaWRlcicgKVxyXG4gIH0gKTtcclxuICB0ZXN0RW5hYmxlZE5vZGUoIGFzc2VydCwgc2xpZGVyLCAnRm9yIFNsaWRlcicgKTtcclxuICBzbGlkZXIuZGlzcG9zZSgpO1xyXG5cclxuICBjb25zdCBteUVuYWJsZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUsIHsgdGFuZGVtOiBUYW5kZW0uUk9PVF9URVNULmNyZWF0ZVRhbmRlbSggJ215RW5hYmxlZFByb3BlcnR5JyApIH0gKTtcclxuICBzbGlkZXIgPSBuZXcgSFNsaWRlciggbmV3IFByb3BlcnR5KCAwICksIG5ldyBSYW5nZSggMCwgMTAgKSwge1xyXG4gICAgdGFuZGVtOiBUYW5kZW0uUk9PVF9URVNULmNyZWF0ZVRhbmRlbSggJ215U2xpZGVyJyApLFxyXG4gICAgZW5hYmxlZFByb3BlcnR5OiBteUVuYWJsZWRQcm9wZXJ0eVxyXG4gIH0gKTtcclxuICB0ZXN0RW5hYmxlZE5vZGUoIGFzc2VydCwgc2xpZGVyLCAnRm9yIFNsaWRlcicgKTtcclxuICBzbGlkZXIuZGlzcG9zZSgpO1xyXG4gIG15RW5hYmxlZFByb3BlcnR5LmRpc3Bvc2UoKTtcclxufSApO1xyXG5cclxuLyoqXHJcbiAqIFRlc3QgYmFzaWMgZnVuY3Rpb25hbGl0eSBmb3IgYW4gb2JqZWN0IHRoYXQgbWl4ZXMgaW4gRW5hYmxlZENvbXBvbmVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gYXNzZXJ0IC0gZnJvbSBRVW5pdFxyXG4gKiBAcGFyYW0ge09iamVjdH0gZW5hYmxlZE5vZGUgLSBtaXhlZCBpbiB3aXRoIEVuYWJsZWRDb21wb25lbnRcclxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSB0byB0YWNrIG9udG8gYXNzZXJ0IG1lc3NhZ2VzXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZXN0RW5hYmxlZE5vZGUoIGFzc2VydCwgZW5hYmxlZE5vZGUsIG1lc3NhZ2UgKSB7XHJcbiAgYXNzZXJ0Lm9rKCBlbmFibGVkTm9kZS5lbmFibGVkUHJvcGVydHkgaW5zdGFuY2VvZiBQcm9wZXJ0eSB8fCBlbmFibGVkTm9kZS5lbmFibGVkUHJvcGVydHkgaW5zdGFuY2VvZiBUaW55UHJvcGVydHksIGAke21lc3NhZ2V9OiBlbmFibGVkUHJvcGVydHkgc2hvdWxkIGV4aXN0YCApO1xyXG5cclxuICBhc3NlcnQub2soIGVuYWJsZWROb2RlLmVuYWJsZWRQcm9wZXJ0eS52YWx1ZSA9PT0gZW5hYmxlZE5vZGUuZW5hYmxlZCwgYCR7bWVzc2FnZX06IHRlc3QgZ2V0dGVyYCApO1xyXG5cclxuICBlbmFibGVkTm9kZS5lbmFibGVkID0gZmFsc2U7XHJcbiAgYXNzZXJ0Lm9rKCBlbmFibGVkTm9kZS5lbmFibGVkID09PSBmYWxzZSwgYCR7bWVzc2FnZX06IHRlc3Qgc2V0dGVyYCApO1xyXG4gIGFzc2VydC5vayggZW5hYmxlZE5vZGUuZW5hYmxlZFByb3BlcnR5LnZhbHVlID09PSBlbmFibGVkTm9kZS5lbmFibGVkLCBgJHttZXNzYWdlfTogdGVzdCBnZXR0ZXIgYWZ0ZXIgc2V0dGluZ2AgKTtcclxuICBhc3NlcnQub2soIGVuYWJsZWROb2RlLmVuYWJsZWRQcm9wZXJ0eS52YWx1ZSA9PT0gZmFsc2UsIGAke21lc3NhZ2V9OiB0ZXN0IGdldHRlciBhZnRlciBzZXR0aW5nYCApO1xyXG59Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1B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