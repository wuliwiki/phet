// Copyright 2016-2023, University of Colorado Boulder

/**
 * A default slider thumb, currently intended for use only in HSlider. It's a rectangle with a vertical white line down
 * the center.  The origin is at the top left (HSlider uses the thumb center for positioning).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../dot/js/Dimension2.js';
import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { Path, PressListener, Rectangle } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import sun from './sun.js';
export default class SliderThumb extends Rectangle {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      size: new Dimension2(22, 45),
      fillHighlighted: 'rgb( 71, 207, 255 )',
      centerLineStroke: 'white',
      // RectangleOptions
      fill: 'rgb( 50, 145, 184 )',
      stroke: 'black',
      lineWidth: 1,
      tandem: Tandem.REQUIRED,
      // Slider.js adds to this tandem to nest its dragListener under the thumb.
      tandemNameSuffix: 'ThumbNode'
    }, providedOptions);

    // Set a default corner radius
    if (options.cornerRadius === undefined) {
      options.cornerRadius = 0.25 * options.size.width;
    }
    options.cachedPaints = [options.fill, options.fillHighlighted];
    super(0, 0, options.size.width, options.size.height, options);

    // Paint area that is slightly larger than the slider thumb so SVG updates a large enough paintable region.
    // Related to https://github.com/phetsims/masses-and-springs/issues/334
    const paintLayer = Rectangle.bounds(this.bounds.dilated(5), {
      fill: 'transparent',
      localBounds: this.bounds,
      pickable: false
    });
    this.addChild(paintLayer);

    // vertical line down the center
    const centerLineYMargin = 3;
    this.addChild(new Path(Shape.lineSegment(options.size.width / 2, centerLineYMargin, options.size.width / 2, options.size.height - centerLineYMargin), {
      stroke: options.centerLineStroke
    }));

    // highlight thumb on pointer over
    const pressListener = new PressListener({
      attach: false,
      tandem: Tandem.OPT_OUT // Highlighting doesn't need instrumentation
    });

    pressListener.isHighlightedProperty.link(isHighlighted => {
      this.fill = isHighlighted ? options.fillHighlighted : options.fill;
    });
    this.addInputListener(pressListener);
  }
}
sun.register('SliderThumb', SliderThumb);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiU2hhcGUiLCJvcHRpb25pemUiLCJQYXRoIiwiUHJlc3NMaXN0ZW5lciIsIlJlY3RhbmdsZSIsIlRhbmRlbSIsInN1biIsIlNsaWRlclRodW1iIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic2l6ZSIsImZpbGxIaWdobGlnaHRlZCIsImNlbnRlckxpbmVTdHJva2UiLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwiY29ybmVyUmFkaXVzIiwidW5kZWZpbmVkIiwid2lkdGgiLCJjYWNoZWRQYWludHMiLCJoZWlnaHQiLCJwYWludExheWVyIiwiYm91bmRzIiwiZGlsYXRlZCIsImxvY2FsQm91bmRzIiwicGlja2FibGUiLCJhZGRDaGlsZCIsImNlbnRlckxpbmVZTWFyZ2luIiwibGluZVNlZ21lbnQiLCJwcmVzc0xpc3RlbmVyIiwiYXR0YWNoIiwiT1BUX09VVCIsImlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eSIsImxpbmsiLCJpc0hpZ2hsaWdodGVkIiwiYWRkSW5wdXRMaXN0ZW5lciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2xpZGVyVGh1bWIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBkZWZhdWx0IHNsaWRlciB0aHVtYiwgY3VycmVudGx5IGludGVuZGVkIGZvciB1c2Ugb25seSBpbiBIU2xpZGVyLiBJdCdzIGEgcmVjdGFuZ2xlIHdpdGggYSB2ZXJ0aWNhbCB3aGl0ZSBsaW5lIGRvd25cclxuICogdGhlIGNlbnRlci4gIFRoZSBvcmlnaW4gaXMgYXQgdGhlIHRvcCBsZWZ0IChIU2xpZGVyIHVzZXMgdGhlIHRodW1iIGNlbnRlciBmb3IgcG9zaXRpb25pbmcpLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFRQYWludCwgUGF0aCwgUHJlc3NMaXN0ZW5lciwgUmVjdGFuZ2xlLCBSZWN0YW5nbGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuL3N1bi5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNpemU/OiBEaW1lbnNpb24yO1xyXG4gIGZpbGxIaWdobGlnaHRlZD86IFRQYWludDtcclxuICBjZW50ZXJMaW5lU3Ryb2tlPzogVFBhaW50O1xyXG59O1xyXG5cclxudHlwZSBTbGlkZXJUaHVtYk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8UmVjdGFuZ2xlT3B0aW9ucywgJ2NhY2hlZFBhaW50cyc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyVGh1bWIgZXh0ZW5kcyBSZWN0YW5nbGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogU2xpZGVyVGh1bWJPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U2xpZGVyVGh1bWJPcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ2xlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgc2l6ZTogbmV3IERpbWVuc2lvbjIoIDIyLCA0NSApLFxyXG4gICAgICBmaWxsSGlnaGxpZ2h0ZWQ6ICdyZ2IoIDcxLCAyMDcsIDI1NSApJyxcclxuICAgICAgY2VudGVyTGluZVN0cm9rZTogJ3doaXRlJyxcclxuXHJcbiAgICAgIC8vIFJlY3RhbmdsZU9wdGlvbnNcclxuICAgICAgZmlsbDogJ3JnYiggNTAsIDE0NSwgMTg0ICknLFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGxpbmVXaWR0aDogMSxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsIC8vIFNsaWRlci5qcyBhZGRzIHRvIHRoaXMgdGFuZGVtIHRvIG5lc3QgaXRzIGRyYWdMaXN0ZW5lciB1bmRlciB0aGUgdGh1bWIuXHJcbiAgICAgIHRhbmRlbU5hbWVTdWZmaXg6ICdUaHVtYk5vZGUnXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBTZXQgYSBkZWZhdWx0IGNvcm5lciByYWRpdXNcclxuICAgIGlmICggb3B0aW9ucy5jb3JuZXJSYWRpdXMgPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgb3B0aW9ucy5jb3JuZXJSYWRpdXMgPSAwLjI1ICogb3B0aW9ucy5zaXplLndpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdGlvbnMuY2FjaGVkUGFpbnRzID0gWyBvcHRpb25zLmZpbGwsIG9wdGlvbnMuZmlsbEhpZ2hsaWdodGVkIF07XHJcblxyXG4gICAgc3VwZXIoIDAsIDAsIG9wdGlvbnMuc2l6ZS53aWR0aCwgb3B0aW9ucy5zaXplLmhlaWdodCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFBhaW50IGFyZWEgdGhhdCBpcyBzbGlnaHRseSBsYXJnZXIgdGhhbiB0aGUgc2xpZGVyIHRodW1iIHNvIFNWRyB1cGRhdGVzIGEgbGFyZ2UgZW5vdWdoIHBhaW50YWJsZSByZWdpb24uXHJcbiAgICAvLyBSZWxhdGVkIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9tYXNzZXMtYW5kLXNwcmluZ3MvaXNzdWVzLzMzNFxyXG4gICAgY29uc3QgcGFpbnRMYXllciA9IFJlY3RhbmdsZS5ib3VuZHMoIHRoaXMuYm91bmRzLmRpbGF0ZWQoIDUgKSwge1xyXG4gICAgICBmaWxsOiAndHJhbnNwYXJlbnQnLFxyXG4gICAgICBsb2NhbEJvdW5kczogdGhpcy5ib3VuZHMsXHJcbiAgICAgIHBpY2thYmxlOiBmYWxzZVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcGFpbnRMYXllciApO1xyXG5cclxuICAgIC8vIHZlcnRpY2FsIGxpbmUgZG93biB0aGUgY2VudGVyXHJcbiAgICBjb25zdCBjZW50ZXJMaW5lWU1hcmdpbiA9IDM7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgUGF0aCggU2hhcGUubGluZVNlZ21lbnQoXHJcbiAgICAgIG9wdGlvbnMuc2l6ZS53aWR0aCAvIDIsIGNlbnRlckxpbmVZTWFyZ2luLFxyXG4gICAgICBvcHRpb25zLnNpemUud2lkdGggLyAyLCBvcHRpb25zLnNpemUuaGVpZ2h0IC0gY2VudGVyTGluZVlNYXJnaW4gKSwge1xyXG4gICAgICBzdHJva2U6IG9wdGlvbnMuY2VudGVyTGluZVN0cm9rZVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gaGlnaGxpZ2h0IHRodW1iIG9uIHBvaW50ZXIgb3ZlclxyXG4gICAgY29uc3QgcHJlc3NMaXN0ZW5lciA9IG5ldyBQcmVzc0xpc3RlbmVyKCB7XHJcbiAgICAgIGF0dGFjaDogZmFsc2UsXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVQgLy8gSGlnaGxpZ2h0aW5nIGRvZXNuJ3QgbmVlZCBpbnN0cnVtZW50YXRpb25cclxuICAgIH0gKTtcclxuICAgIHByZXNzTGlzdGVuZXIuaXNIaWdobGlnaHRlZFByb3BlcnR5LmxpbmsoIGlzSGlnaGxpZ2h0ZWQgPT4ge1xyXG4gICAgICB0aGlzLmZpbGwgPSBpc0hpZ2hsaWdodGVkID8gb3B0aW9ucy5maWxsSGlnaGxpZ2h0ZWQgOiBvcHRpb25zLmZpbGw7XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZElucHV0TGlzdGVuZXIoIHByZXNzTGlzdGVuZXIgKTtcclxuICB9XHJcbn1cclxuXHJcbnN1bi5yZWdpc3RlciggJ1NsaWRlclRodW1iJywgU2xpZGVyVGh1bWIgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sNEJBQTRCO0FBRW5ELFNBQVNDLEtBQUssUUFBUSwwQkFBMEI7QUFDaEQsT0FBT0MsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxTQUFpQkMsSUFBSSxFQUFFQyxhQUFhLEVBQUVDLFNBQVMsUUFBMEIsNkJBQTZCO0FBQ3RHLE9BQU9DLE1BQU0sTUFBTSwyQkFBMkI7QUFDOUMsT0FBT0MsR0FBRyxNQUFNLFVBQVU7QUFVMUIsZUFBZSxNQUFNQyxXQUFXLFNBQVNILFNBQVMsQ0FBQztFQUUxQ0ksV0FBV0EsQ0FBRUMsZUFBbUMsRUFBRztJQUV4RCxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBb0QsQ0FBQyxDQUFFO01BRTlFO01BQ0FVLElBQUksRUFBRSxJQUFJWixVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztNQUM5QmEsZUFBZSxFQUFFLHFCQUFxQjtNQUN0Q0MsZ0JBQWdCLEVBQUUsT0FBTztNQUV6QjtNQUNBQyxJQUFJLEVBQUUscUJBQXFCO01BQzNCQyxNQUFNLEVBQUUsT0FBTztNQUNmQyxTQUFTLEVBQUUsQ0FBQztNQUNaQyxNQUFNLEVBQUVaLE1BQU0sQ0FBQ2EsUUFBUTtNQUFFO01BQ3pCQyxnQkFBZ0IsRUFBRTtJQUNwQixDQUFDLEVBQUVWLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsSUFBS0MsT0FBTyxDQUFDVSxZQUFZLEtBQUtDLFNBQVMsRUFBRztNQUN4Q1gsT0FBTyxDQUFDVSxZQUFZLEdBQUcsSUFBSSxHQUFHVixPQUFPLENBQUNDLElBQUksQ0FBQ1csS0FBSztJQUNsRDtJQUVBWixPQUFPLENBQUNhLFlBQVksR0FBRyxDQUFFYixPQUFPLENBQUNJLElBQUksRUFBRUosT0FBTyxDQUFDRSxlQUFlLENBQUU7SUFFaEUsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVGLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDVyxLQUFLLEVBQUVaLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDYSxNQUFNLEVBQUVkLE9BQVEsQ0FBQzs7SUFFL0Q7SUFDQTtJQUNBLE1BQU1lLFVBQVUsR0FBR3JCLFNBQVMsQ0FBQ3NCLE1BQU0sQ0FBRSxJQUFJLENBQUNBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFFLENBQUUsQ0FBQyxFQUFFO01BQzdEYixJQUFJLEVBQUUsYUFBYTtNQUNuQmMsV0FBVyxFQUFFLElBQUksQ0FBQ0YsTUFBTTtNQUN4QkcsUUFBUSxFQUFFO0lBQ1osQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDQyxRQUFRLENBQUVMLFVBQVcsQ0FBQzs7SUFFM0I7SUFDQSxNQUFNTSxpQkFBaUIsR0FBRyxDQUFDO0lBQzNCLElBQUksQ0FBQ0QsUUFBUSxDQUFFLElBQUk1QixJQUFJLENBQUVGLEtBQUssQ0FBQ2dDLFdBQVcsQ0FDeEN0QixPQUFPLENBQUNDLElBQUksQ0FBQ1csS0FBSyxHQUFHLENBQUMsRUFBRVMsaUJBQWlCLEVBQ3pDckIsT0FBTyxDQUFDQyxJQUFJLENBQUNXLEtBQUssR0FBRyxDQUFDLEVBQUVaLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDYSxNQUFNLEdBQUdPLGlCQUFrQixDQUFDLEVBQUU7TUFDbkVoQixNQUFNLEVBQUVMLE9BQU8sQ0FBQ0c7SUFDbEIsQ0FBRSxDQUFFLENBQUM7O0lBRUw7SUFDQSxNQUFNb0IsYUFBYSxHQUFHLElBQUk5QixhQUFhLENBQUU7TUFDdkMrQixNQUFNLEVBQUUsS0FBSztNQUNiakIsTUFBTSxFQUFFWixNQUFNLENBQUM4QixPQUFPLENBQUM7SUFDekIsQ0FBRSxDQUFDOztJQUNIRixhQUFhLENBQUNHLHFCQUFxQixDQUFDQyxJQUFJLENBQUVDLGFBQWEsSUFBSTtNQUN6RCxJQUFJLENBQUN4QixJQUFJLEdBQUd3QixhQUFhLEdBQUc1QixPQUFPLENBQUNFLGVBQWUsR0FBR0YsT0FBTyxDQUFDSSxJQUFJO0lBQ3BFLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ3lCLGdCQUFnQixDQUFFTixhQUFjLENBQUM7RUFDeEM7QUFDRjtBQUVBM0IsR0FBRyxDQUFDa0MsUUFBUSxDQUFFLGFBQWEsRUFBRWpDLFdBQVksQ0FBQyJ9