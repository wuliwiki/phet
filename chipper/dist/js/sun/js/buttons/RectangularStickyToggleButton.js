// Copyright 2014-2022, University of Colorado Boulder

/**
 * RectangularStickyToggleButton is a rectangular toggle button that toggles the value of a Property between 2 values.
 * It has a different look (referred to as 'up' and 'down') for the 2 values.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import sun from '../sun.js';
import RectangularButton from './RectangularButton.js';
import StickyToggleButtonInteractionStateProperty from './StickyToggleButtonInteractionStateProperty.js';
import StickyToggleButtonModel from './StickyToggleButtonModel.js';
export default class RectangularStickyToggleButton extends RectangularButton {
  /**
   * @param valueProperty - axon Property that can be either valueUp or valueDown.
   * @param valueUp - value when the toggle is in the 'up' position
   * @param valueDown - value when the toggle is in the 'down' position
   * @param providedOptions?
   */
  constructor(valueProperty, valueUp, valueDown, providedOptions) {
    // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
    const buttonModel = new StickyToggleButtonModel(valueUp, valueDown, valueProperty, providedOptions);
    const stickyToggleButtonInteractionStateProperty = new StickyToggleButtonInteractionStateProperty(buttonModel);
    super(buttonModel, stickyToggleButtonInteractionStateProperty, providedOptions);
    this.disposeRectangularStickyToggleButton = () => {
      buttonModel.dispose();
    };
  }
  dispose() {
    this.disposeRectangularStickyToggleButton();
    super.dispose();
  }
}
sun.register('RectangularStickyToggleButton', RectangularStickyToggleButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdW4iLCJSZWN0YW5ndWxhckJ1dHRvbiIsIlN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsIlN0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsIiwiUmVjdGFuZ3VsYXJTdGlja3lUb2dnbGVCdXR0b24iLCJjb25zdHJ1Y3RvciIsInZhbHVlUHJvcGVydHkiLCJ2YWx1ZVVwIiwidmFsdWVEb3duIiwicHJvdmlkZWRPcHRpb25zIiwiYnV0dG9uTW9kZWwiLCJzdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkiLCJkaXNwb3NlUmVjdGFuZ3VsYXJTdGlja3lUb2dnbGVCdXR0b24iLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWN0YW5ndWxhclN0aWNreVRvZ2dsZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZWN0YW5ndWxhclN0aWNreVRvZ2dsZUJ1dHRvbiBpcyBhIHJlY3Rhbmd1bGFyIHRvZ2dsZSBidXR0b24gdGhhdCB0b2dnbGVzIHRoZSB2YWx1ZSBvZiBhIFByb3BlcnR5IGJldHdlZW4gMiB2YWx1ZXMuXHJcbiAqIEl0IGhhcyBhIGRpZmZlcmVudCBsb29rIChyZWZlcnJlZCB0byBhcyAndXAnIGFuZCAnZG93bicpIGZvciB0aGUgMiB2YWx1ZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuLi9zdW4uanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJCdXR0b24sIHsgUmVjdGFuZ3VsYXJCdXR0b25PcHRpb25zIH0gZnJvbSAnLi9SZWN0YW5ndWxhckJ1dHRvbi5qcyc7XHJcbmltcG9ydCBTdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkgZnJvbSAnLi9TdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU3RpY2t5VG9nZ2xlQnV0dG9uTW9kZWwgZnJvbSAnLi9TdGlja3lUb2dnbGVCdXR0b25Nb2RlbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIFJlY3Rhbmd1bGFyU3RpY2t5VG9nZ2xlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUmVjdGFuZ3VsYXJCdXR0b25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdGFuZ3VsYXJTdGlja3lUb2dnbGVCdXR0b248VD4gZXh0ZW5kcyBSZWN0YW5ndWxhckJ1dHRvbiB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVJlY3Rhbmd1bGFyU3RpY2t5VG9nZ2xlQnV0dG9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gdmFsdWVQcm9wZXJ0eSAtIGF4b24gUHJvcGVydHkgdGhhdCBjYW4gYmUgZWl0aGVyIHZhbHVlVXAgb3IgdmFsdWVEb3duLlxyXG4gICAqIEBwYXJhbSB2YWx1ZVVwIC0gdmFsdWUgd2hlbiB0aGUgdG9nZ2xlIGlzIGluIHRoZSAndXAnIHBvc2l0aW9uXHJcbiAgICogQHBhcmFtIHZhbHVlRG93biAtIHZhbHVlIHdoZW4gdGhlIHRvZ2dsZSBpcyBpbiB0aGUgJ2Rvd24nIHBvc2l0aW9uXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9ucz9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHZhbHVlUHJvcGVydHk6IFRQcm9wZXJ0eTxUPiwgdmFsdWVVcDogVCwgdmFsdWVEb3duOiBULCBwcm92aWRlZE9wdGlvbnM/OiBSZWN0YW5ndWxhclN0aWNreVRvZ2dsZUJ1dHRvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gTm90ZSBpdCBzaGFyZXMgYSB0YW5kZW0gd2l0aCB0aGlzLCBzbyB0aGUgZW1pdHRlciB3aWxsIGJlIGluc3RydW1lbnRlZCBhcyBhIGNoaWxkIG9mIHRoZSBidXR0b25cclxuICAgIGNvbnN0IGJ1dHRvbk1vZGVsID0gbmV3IFN0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsKCB2YWx1ZVVwLCB2YWx1ZURvd24sIHZhbHVlUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gICAgY29uc3Qgc3RpY2t5VG9nZ2xlQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5ID0gbmV3IFN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSggYnV0dG9uTW9kZWwgKTtcclxuXHJcbiAgICBzdXBlciggYnV0dG9uTW9kZWwsIHN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlUmVjdGFuZ3VsYXJTdGlja3lUb2dnbGVCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgIGJ1dHRvbk1vZGVsLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVJlY3Rhbmd1bGFyU3RpY2t5VG9nZ2xlQnV0dG9uKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zdW4ucmVnaXN0ZXIoICdSZWN0YW5ndWxhclN0aWNreVRvZ2dsZUJ1dHRvbicsIFJlY3Rhbmd1bGFyU3RpY2t5VG9nZ2xlQnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxPQUFPQSxHQUFHLE1BQU0sV0FBVztBQUMzQixPQUFPQyxpQkFBaUIsTUFBb0Msd0JBQXdCO0FBQ3BGLE9BQU9DLDBDQUEwQyxNQUFNLGlEQUFpRDtBQUN4RyxPQUFPQyx1QkFBdUIsTUFBTSw4QkFBOEI7QUFNbEUsZUFBZSxNQUFNQyw2QkFBNkIsU0FBWUgsaUJBQWlCLENBQUM7RUFJOUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NJLFdBQVdBLENBQUVDLGFBQTJCLEVBQUVDLE9BQVUsRUFBRUMsU0FBWSxFQUFFQyxlQUFzRCxFQUFHO0lBRWxJO0lBQ0EsTUFBTUMsV0FBVyxHQUFHLElBQUlQLHVCQUF1QixDQUFFSSxPQUFPLEVBQUVDLFNBQVMsRUFBRUYsYUFBYSxFQUFFRyxlQUFnQixDQUFDO0lBQ3JHLE1BQU1FLDBDQUEwQyxHQUFHLElBQUlULDBDQUEwQyxDQUFFUSxXQUFZLENBQUM7SUFFaEgsS0FBSyxDQUFFQSxXQUFXLEVBQUVDLDBDQUEwQyxFQUFFRixlQUFnQixDQUFDO0lBRWpGLElBQUksQ0FBQ0csb0NBQW9DLEdBQUcsTUFBTTtNQUNoREYsV0FBVyxDQUFDRyxPQUFPLENBQUMsQ0FBQztJQUN2QixDQUFDO0VBQ0g7RUFFZ0JBLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNELG9DQUFvQyxDQUFDLENBQUM7SUFDM0MsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFiLEdBQUcsQ0FBQ2MsUUFBUSxDQUFFLCtCQUErQixFQUFFViw2QkFBOEIsQ0FBQyJ9