// Copyright 2013-2022, University of Colorado Boulder

/**
 * This toggle button uses a boolean Property and a trueNode and falseNode to display its content.
 */

import Tandem from '../../../tandem/js/Tandem.js';
import BooleanToggleNode from '../BooleanToggleNode.js';
import sun from '../sun.js';
import RoundToggleButton from './RoundToggleButton.js';
import optionize from '../../../phet-core/js/optionize.js';
class BooleanRoundToggleButton extends RoundToggleButton {
  /**
   * @param booleanProperty
   * @param trueNode - shown when booleanProperty is true
   * @param falseNode - shown when booleanProperty is false
   * @param providedOptions?
   */
  constructor(booleanProperty, trueNode, falseNode, providedOptions) {
    const options = optionize()({
      content: null,
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Button'
    }, providedOptions);
    const content = new BooleanToggleNode(booleanProperty, trueNode, falseNode, {
      tandem: options.tandem.createTandem('toggleNode')
    });
    options.content = content;
    super(booleanProperty, false, true, options);
    this.disposeBooleanRoundToggleButton = function () {
      content.dispose();
    };
  }
  dispose() {
    this.disposeBooleanRoundToggleButton();
    super.dispose();
  }
}
sun.register('BooleanRoundToggleButton', BooleanRoundToggleButton);
export default BooleanRoundToggleButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUYW5kZW0iLCJCb29sZWFuVG9nZ2xlTm9kZSIsInN1biIsIlJvdW5kVG9nZ2xlQnV0dG9uIiwib3B0aW9uaXplIiwiQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uIiwiY29uc3RydWN0b3IiLCJib29sZWFuUHJvcGVydHkiLCJ0cnVlTm9kZSIsImZhbHNlTm9kZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjb250ZW50IiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwiY3JlYXRlVGFuZGVtIiwiZGlzcG9zZUJvb2xlYW5Sb3VuZFRvZ2dsZUJ1dHRvbiIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJvb2xlYW5Sb3VuZFRvZ2dsZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHRvZ2dsZSBidXR0b24gdXNlcyBhIGJvb2xlYW4gUHJvcGVydHkgYW5kIGEgdHJ1ZU5vZGUgYW5kIGZhbHNlTm9kZSB0byBkaXNwbGF5IGl0cyBjb250ZW50LlxyXG4gKi9cclxuXHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBCb29sZWFuVG9nZ2xlTm9kZSBmcm9tICcuLi9Cb29sZWFuVG9nZ2xlTm9kZS5qcyc7XHJcbmltcG9ydCBzdW4gZnJvbSAnLi4vc3VuLmpzJztcclxuaW1wb3J0IFJvdW5kVG9nZ2xlQnV0dG9uLCB7IFJvdW5kVG9nZ2xlQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4vUm91bmRUb2dnbGVCdXR0b24uanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBCb29sZWFuUm91bmRUb2dnbGVCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFJvdW5kVG9nZ2xlQnV0dG9uT3B0aW9ucywgJ2NvbnRlbnQnPjtcclxuXHJcbmNsYXNzIEJvb2xlYW5Sb3VuZFRvZ2dsZUJ1dHRvbiBleHRlbmRzIFJvdW5kVG9nZ2xlQnV0dG9uPGJvb2xlYW4+IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gYm9vbGVhblByb3BlcnR5XHJcbiAgICogQHBhcmFtIHRydWVOb2RlIC0gc2hvd24gd2hlbiBib29sZWFuUHJvcGVydHkgaXMgdHJ1ZVxyXG4gICAqIEBwYXJhbSBmYWxzZU5vZGUgLSBzaG93biB3aGVuIGJvb2xlYW5Qcm9wZXJ0eSBpcyBmYWxzZVxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnM/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBib29sZWFuUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LCB0cnVlTm9kZTogTm9kZSwgZmFsc2VOb2RlOiBOb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJvb2xlYW5Sb3VuZFRvZ2dsZUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSb3VuZFRvZ2dsZUJ1dHRvbk9wdGlvbnM+KCkoIHtcclxuICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHRhbmRlbU5hbWVTdWZmaXg6ICdCdXR0b24nXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gbmV3IEJvb2xlYW5Ub2dnbGVOb2RlKCBib29sZWFuUHJvcGVydHksIHRydWVOb2RlLCBmYWxzZU5vZGUsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd0b2dnbGVOb2RlJyApXHJcbiAgICB9ICk7XHJcbiAgICBvcHRpb25zLmNvbnRlbnQgPSBjb250ZW50O1xyXG5cclxuICAgIHN1cGVyKCBib29sZWFuUHJvcGVydHksIGZhbHNlLCB0cnVlLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNvbnRlbnQuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zdW4ucmVnaXN0ZXIoICdCb29sZWFuUm91bmRUb2dnbGVCdXR0b24nLCBCb29sZWFuUm91bmRUb2dnbGVCdXR0b24gKTtcclxuZXhwb3J0IGRlZmF1bHQgQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsaUJBQWlCLE1BQU0seUJBQXlCO0FBQ3ZELE9BQU9DLEdBQUcsTUFBTSxXQUFXO0FBQzNCLE9BQU9DLGlCQUFpQixNQUFvQyx3QkFBd0I7QUFFcEYsT0FBT0MsU0FBUyxNQUE0QixvQ0FBb0M7QUFRaEYsTUFBTUMsd0JBQXdCLFNBQVNGLGlCQUFpQixDQUFVO0VBSWhFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTRyxXQUFXQSxDQUFFQyxlQUFrQyxFQUFFQyxRQUFjLEVBQUVDLFNBQWUsRUFDbkVDLGVBQWlELEVBQUc7SUFFdEUsTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQXlFLENBQUMsQ0FBRTtNQUNuR1EsT0FBTyxFQUFFLElBQUk7TUFDYkMsTUFBTSxFQUFFYixNQUFNLENBQUNjLFFBQVE7TUFDdkJDLGdCQUFnQixFQUFFO0lBQ3BCLENBQUMsRUFBRUwsZUFBZ0IsQ0FBQztJQUVwQixNQUFNRSxPQUFPLEdBQUcsSUFBSVgsaUJBQWlCLENBQUVNLGVBQWUsRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUU7TUFDM0VJLE1BQU0sRUFBRUYsT0FBTyxDQUFDRSxNQUFNLENBQUNHLFlBQVksQ0FBRSxZQUFhO0lBQ3BELENBQUUsQ0FBQztJQUNITCxPQUFPLENBQUNDLE9BQU8sR0FBR0EsT0FBTztJQUV6QixLQUFLLENBQUVMLGVBQWUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFSSxPQUFRLENBQUM7SUFFOUMsSUFBSSxDQUFDTSwrQkFBK0IsR0FBRyxZQUFXO01BQ2hETCxPQUFPLENBQUNNLE9BQU8sQ0FBQyxDQUFDO0lBQ25CLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0QsK0JBQStCLENBQUMsQ0FBQztJQUN0QyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWhCLEdBQUcsQ0FBQ2lCLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRWQsd0JBQXlCLENBQUM7QUFDcEUsZUFBZUEsd0JBQXdCIn0=