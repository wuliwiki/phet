// Copyright 2014-2022, University of Colorado Boulder

/**
 * Model for a toggle button that changes value on each "up" event when the button is released.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author John Blanco (PhET Interactive Simulations)
 */

import Emitter from '../../../axon/js/Emitter.js';
import optionize from '../../../phet-core/js/optionize.js';
import EventType from '../../../tandem/js/EventType.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import ButtonModel from './ButtonModel.js';
export default class ToggleButtonModel extends ButtonModel {
  /**
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param property - axon Property that can be either valueOff or valueOn.
   * @param [providedOptions]
   */
  constructor(valueOff, valueOn, property, providedOptions) {
    const options = optionize()({
      tandem: Tandem.REQUIRED
    }, providedOptions);
    super(options);
    this.valueOff = valueOff;
    this.valueOn = valueOn;
    this.valueProperty = property;

    // Behaves like a push button (with fireOnDown:false), but toggles its state when the button is released.
    const downListener = down => {
      if ((this.overProperty.get() || this.focusedProperty.get()) && this.enabledProperty.get() && !this.interrupted) {
        if (!down) {
          this.toggle();
        }
      }
    };
    this.downProperty.link(downListener);
    this.toggledEmitter = new Emitter({
      tandem: options.tandem.createTandem('toggledEmitter'),
      phetioDocumentation: 'Emits when the button is toggled',
      phetioEventType: EventType.USER
    });
    const toggleListener = () => {
      assert && assert(this.valueProperty.value === this.valueOff || this.valueProperty.value === this.valueOn, `unrecognized value: ${this.valueProperty.value}`);
      this.valueProperty.value = this.valueProperty.value === this.valueOff ? this.valueOn : this.valueOff;
    };
    this.toggledEmitter.addListener(toggleListener);
    this.disposeToggleButtonModel = () => {
      this.downProperty.unlink(downListener);
      this.toggledEmitter.dispose();
    };
  }
  dispose() {
    this.disposeToggleButtonModel();
    super.dispose();
  }
  toggle() {
    this.toggledEmitter.emit();
    this.produceSoundEmitter.emit();
  }
}
sun.register('ToggleButtonModel', ToggleButtonModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwib3B0aW9uaXplIiwiRXZlbnRUeXBlIiwiVGFuZGVtIiwic3VuIiwiQnV0dG9uTW9kZWwiLCJUb2dnbGVCdXR0b25Nb2RlbCIsImNvbnN0cnVjdG9yIiwidmFsdWVPZmYiLCJ2YWx1ZU9uIiwicHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ2YWx1ZVByb3BlcnR5IiwiZG93bkxpc3RlbmVyIiwiZG93biIsIm92ZXJQcm9wZXJ0eSIsImdldCIsImZvY3VzZWRQcm9wZXJ0eSIsImVuYWJsZWRQcm9wZXJ0eSIsImludGVycnVwdGVkIiwidG9nZ2xlIiwiZG93blByb3BlcnR5IiwibGluayIsInRvZ2dsZWRFbWl0dGVyIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInBoZXRpb0V2ZW50VHlwZSIsIlVTRVIiLCJ0b2dnbGVMaXN0ZW5lciIsImFzc2VydCIsInZhbHVlIiwiYWRkTGlzdGVuZXIiLCJkaXNwb3NlVG9nZ2xlQnV0dG9uTW9kZWwiLCJ1bmxpbmsiLCJkaXNwb3NlIiwiZW1pdCIsInByb2R1Y2VTb3VuZEVtaXR0ZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRvZ2dsZUJ1dHRvbk1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciBhIHRvZ2dsZSBidXR0b24gdGhhdCBjaGFuZ2VzIHZhbHVlIG9uIGVhY2ggXCJ1cFwiIGV2ZW50IHdoZW4gdGhlIGJ1dHRvbiBpcyByZWxlYXNlZC5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRW1pdHRlciBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0VtaXR0ZXIuanMnO1xyXG5pbXBvcnQgVEVtaXR0ZXIgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9URW1pdHRlci5qcyc7XHJcbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEV2ZW50VHlwZSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvRXZlbnRUeXBlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuLi9zdW4uanMnO1xyXG5pbXBvcnQgQnV0dG9uTW9kZWwsIHsgQnV0dG9uTW9kZWxPcHRpb25zIH0gZnJvbSAnLi9CdXR0b25Nb2RlbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIFRvZ2dsZUJ1dHRvbk1vZGVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgQnV0dG9uTW9kZWxPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9nZ2xlQnV0dG9uTW9kZWw8VD4gZXh0ZW5kcyBCdXR0b25Nb2RlbCB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZVByb3BlcnR5OiBUUHJvcGVydHk8VD47XHJcbiAgcHVibGljIHJlYWRvbmx5IHZhbHVlT2ZmOiBUO1xyXG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZU9uOiBUO1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHRvZ2dsZWRFbWl0dGVyOiBURW1pdHRlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VUb2dnbGVCdXR0b25Nb2RlbDogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHZhbHVlT2ZmIC0gdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIGluIHRoZSBvZmYgc3RhdGVcclxuICAgKiBAcGFyYW0gdmFsdWVPbiAtIHZhbHVlIHdoZW4gdGhlIGJ1dHRvbiBpcyBpbiB0aGUgb24gc3RhdGVcclxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBheG9uIFByb3BlcnR5IHRoYXQgY2FuIGJlIGVpdGhlciB2YWx1ZU9mZiBvciB2YWx1ZU9uLlxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdmFsdWVPZmY6IFQsIHZhbHVlT246IFQsIHByb3BlcnR5OiBUUHJvcGVydHk8VD4sIHByb3ZpZGVkT3B0aW9ucz86IFRvZ2dsZUJ1dHRvbk1vZGVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFRvZ2dsZUJ1dHRvbk1vZGVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIEJ1dHRvbk1vZGVsT3B0aW9ucz4oKSgge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnZhbHVlT2ZmID0gdmFsdWVPZmY7XHJcbiAgICB0aGlzLnZhbHVlT24gPSB2YWx1ZU9uO1xyXG4gICAgdGhpcy52YWx1ZVByb3BlcnR5ID0gcHJvcGVydHk7XHJcblxyXG4gICAgLy8gQmVoYXZlcyBsaWtlIGEgcHVzaCBidXR0b24gKHdpdGggZmlyZU9uRG93bjpmYWxzZSksIGJ1dCB0b2dnbGVzIGl0cyBzdGF0ZSB3aGVuIHRoZSBidXR0b24gaXMgcmVsZWFzZWQuXHJcbiAgICBjb25zdCBkb3duTGlzdGVuZXIgPSAoIGRvd246IGJvb2xlYW4gKSA9PiB7XHJcbiAgICAgIGlmICggKCB0aGlzLm92ZXJQcm9wZXJ0eS5nZXQoKSB8fCB0aGlzLmZvY3VzZWRQcm9wZXJ0eS5nZXQoKSApICYmIHRoaXMuZW5hYmxlZFByb3BlcnR5LmdldCgpICYmICF0aGlzLmludGVycnVwdGVkICkge1xyXG4gICAgICAgIGlmICggIWRvd24gKSB7XHJcbiAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuZG93blByb3BlcnR5LmxpbmsoIGRvd25MaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMudG9nZ2xlZEVtaXR0ZXIgPSBuZXcgRW1pdHRlcigge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RvZ2dsZWRFbWl0dGVyJyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnRW1pdHMgd2hlbiB0aGUgYnV0dG9uIGlzIHRvZ2dsZWQnLFxyXG4gICAgICBwaGV0aW9FdmVudFR5cGU6IEV2ZW50VHlwZS5VU0VSXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgdG9nZ2xlTGlzdGVuZXIgPSAoKSA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMudmFsdWVQcm9wZXJ0eS52YWx1ZSA9PT0gdGhpcy52YWx1ZU9mZiB8fCB0aGlzLnZhbHVlUHJvcGVydHkudmFsdWUgPT09IHRoaXMudmFsdWVPbixcclxuICAgICAgICBgdW5yZWNvZ25pemVkIHZhbHVlOiAke3RoaXMudmFsdWVQcm9wZXJ0eS52YWx1ZX1gICk7XHJcblxyXG4gICAgICB0aGlzLnZhbHVlUHJvcGVydHkudmFsdWUgPSB0aGlzLnZhbHVlUHJvcGVydHkudmFsdWUgPT09IHRoaXMudmFsdWVPZmYgPyB0aGlzLnZhbHVlT24gOiB0aGlzLnZhbHVlT2ZmO1xyXG4gICAgfTtcclxuICAgIHRoaXMudG9nZ2xlZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIHRvZ2dsZUxpc3RlbmVyICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlVG9nZ2xlQnV0dG9uTW9kZWwgPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMuZG93blByb3BlcnR5LnVubGluayggZG93bkxpc3RlbmVyICk7XHJcbiAgICAgIHRoaXMudG9nZ2xlZEVtaXR0ZXIuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlVG9nZ2xlQnV0dG9uTW9kZWwoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdG9nZ2xlKCk6IHZvaWQge1xyXG4gICAgdGhpcy50b2dnbGVkRW1pdHRlci5lbWl0KCk7XHJcbiAgICB0aGlzLnByb2R1Y2VTb3VuZEVtaXR0ZXIuZW1pdCgpO1xyXG4gIH1cclxufVxyXG5cclxuc3VuLnJlZ2lzdGVyKCAnVG9nZ2xlQnV0dG9uTW9kZWwnLCBUb2dnbGVCdXR0b25Nb2RlbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSw2QkFBNkI7QUFHakQsT0FBT0MsU0FBUyxNQUE0QixvQ0FBb0M7QUFDaEYsT0FBT0MsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBQ2pELE9BQU9DLEdBQUcsTUFBTSxXQUFXO0FBQzNCLE9BQU9DLFdBQVcsTUFBOEIsa0JBQWtCO0FBTWxFLGVBQWUsTUFBTUMsaUJBQWlCLFNBQVlELFdBQVcsQ0FBQztFQVM1RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0UsV0FBV0EsQ0FBRUMsUUFBVyxFQUFFQyxPQUFVLEVBQUVDLFFBQXNCLEVBQUVDLGVBQTBDLEVBQUc7SUFFaEgsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQTRELENBQUMsQ0FBRTtNQUN0RlksTUFBTSxFQUFFVixNQUFNLENBQUNXO0lBQ2pCLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNKLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTztJQUN0QixJQUFJLENBQUNNLGFBQWEsR0FBR0wsUUFBUTs7SUFFN0I7SUFDQSxNQUFNTSxZQUFZLEdBQUtDLElBQWEsSUFBTTtNQUN4QyxJQUFLLENBQUUsSUFBSSxDQUFDQyxZQUFZLENBQUNDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDQyxlQUFlLENBQUNELEdBQUcsQ0FBQyxDQUFDLEtBQU0sSUFBSSxDQUFDRSxlQUFlLENBQUNGLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUNHLFdBQVcsRUFBRztRQUNsSCxJQUFLLENBQUNMLElBQUksRUFBRztVQUNYLElBQUksQ0FBQ00sTUFBTSxDQUFDLENBQUM7UUFDZjtNQUNGO0lBQ0YsQ0FBQztJQUNELElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxJQUFJLENBQUVULFlBQWEsQ0FBQztJQUV0QyxJQUFJLENBQUNVLGNBQWMsR0FBRyxJQUFJMUIsT0FBTyxDQUFFO01BQ2pDYSxNQUFNLEVBQUVELE9BQU8sQ0FBQ0MsTUFBTSxDQUFDYyxZQUFZLENBQUUsZ0JBQWlCLENBQUM7TUFDdkRDLG1CQUFtQixFQUFFLGtDQUFrQztNQUN2REMsZUFBZSxFQUFFM0IsU0FBUyxDQUFDNEI7SUFDN0IsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsY0FBYyxHQUFHQSxDQUFBLEtBQU07TUFDM0JDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ2pCLGFBQWEsQ0FBQ2tCLEtBQUssS0FBSyxJQUFJLENBQUN6QixRQUFRLElBQUksSUFBSSxDQUFDTyxhQUFhLENBQUNrQixLQUFLLEtBQUssSUFBSSxDQUFDeEIsT0FBTyxFQUN0Ryx1QkFBc0IsSUFBSSxDQUFDTSxhQUFhLENBQUNrQixLQUFNLEVBQUUsQ0FBQztNQUVyRCxJQUFJLENBQUNsQixhQUFhLENBQUNrQixLQUFLLEdBQUcsSUFBSSxDQUFDbEIsYUFBYSxDQUFDa0IsS0FBSyxLQUFLLElBQUksQ0FBQ3pCLFFBQVEsR0FBRyxJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJLENBQUNELFFBQVE7SUFDdEcsQ0FBQztJQUNELElBQUksQ0FBQ2tCLGNBQWMsQ0FBQ1EsV0FBVyxDQUFFSCxjQUFlLENBQUM7SUFFakQsSUFBSSxDQUFDSSx3QkFBd0IsR0FBRyxNQUFNO01BQ3BDLElBQUksQ0FBQ1gsWUFBWSxDQUFDWSxNQUFNLENBQUVwQixZQUFhLENBQUM7TUFDeEMsSUFBSSxDQUFDVSxjQUFjLENBQUNXLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0Ysd0JBQXdCLENBQUMsQ0FBQztJQUMvQixLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0VBRVFkLE1BQU1BLENBQUEsRUFBUztJQUNyQixJQUFJLENBQUNHLGNBQWMsQ0FBQ1ksSUFBSSxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0QsSUFBSSxDQUFDLENBQUM7RUFDakM7QUFDRjtBQUVBbEMsR0FBRyxDQUFDb0MsUUFBUSxDQUFFLG1CQUFtQixFQUFFbEMsaUJBQWtCLENBQUMifQ==