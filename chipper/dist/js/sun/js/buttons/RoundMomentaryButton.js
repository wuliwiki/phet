// Copyright 2015-2022, University of Colorado Boulder

/**
 * RoundMomentaryButton is a round momentary button that toggles a Property between 2 values.
 * The 'off value' is the value when the button is not pressed.
 * The 'on value' is the value when the button is pressed.
 *
 * TODO: Not supported with alternative input, see https://github.com/phetsims/scenery/issues/1117
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import MomentaryButtonInteractionStateProperty from './MomentaryButtonInteractionStateProperty.js';
import MomentaryButtonModel from './MomentaryButtonModel.js';
import RoundButton from './RoundButton.js';
export default class RoundMomentaryButton extends RoundButton {
  /**
   * @param property
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param providedOptions?
   */
  constructor(property, valueOff, valueOn, providedOptions) {
    const options = optionize()({
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Button'
    }, providedOptions);

    // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
    const buttonModel = new MomentaryButtonModel(valueOff, valueOn, property, options);
    super(buttonModel, new MomentaryButtonInteractionStateProperty(buttonModel), options);
    this.disposeRoundMomentaryButton = () => {
      buttonModel.dispose();
    };
  }
  dispose() {
    this.disposeRoundMomentaryButton();
    super.dispose();
  }
}
sun.register('RoundMomentaryButton', RoundMomentaryButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJUYW5kZW0iLCJzdW4iLCJNb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkiLCJNb21lbnRhcnlCdXR0b25Nb2RlbCIsIlJvdW5kQnV0dG9uIiwiUm91bmRNb21lbnRhcnlCdXR0b24iLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwidmFsdWVPZmYiLCJ2YWx1ZU9uIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInRhbmRlbSIsIlJFUVVJUkVEIiwidGFuZGVtTmFtZVN1ZmZpeCIsImJ1dHRvbk1vZGVsIiwiZGlzcG9zZVJvdW5kTW9tZW50YXJ5QnV0dG9uIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUm91bmRNb21lbnRhcnlCdXR0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUm91bmRNb21lbnRhcnlCdXR0b24gaXMgYSByb3VuZCBtb21lbnRhcnkgYnV0dG9uIHRoYXQgdG9nZ2xlcyBhIFByb3BlcnR5IGJldHdlZW4gMiB2YWx1ZXMuXHJcbiAqIFRoZSAnb2ZmIHZhbHVlJyBpcyB0aGUgdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIG5vdCBwcmVzc2VkLlxyXG4gKiBUaGUgJ29uIHZhbHVlJyBpcyB0aGUgdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIHByZXNzZWQuXHJcbiAqXHJcbiAqIFRPRE86IE5vdCBzdXBwb3J0ZWQgd2l0aCBhbHRlcm5hdGl2ZSBpbnB1dCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5L2lzc3Vlcy8xMTE3XHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgc3VuIGZyb20gJy4uL3N1bi5qcyc7XHJcbmltcG9ydCBNb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkgZnJvbSAnLi9Nb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTW9tZW50YXJ5QnV0dG9uTW9kZWwgZnJvbSAnLi9Nb21lbnRhcnlCdXR0b25Nb2RlbC5qcyc7XHJcbmltcG9ydCBSb3VuZEJ1dHRvbiwgeyBSb3VuZEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL1JvdW5kQnV0dG9uLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IHR5cGUgUm91bmRNb21lbnRhcnlCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBSb3VuZEJ1dHRvbk9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3VuZE1vbWVudGFyeUJ1dHRvbjxUPiBleHRlbmRzIFJvdW5kQnV0dG9uIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlUm91bmRNb21lbnRhcnlCdXR0b246ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB2YWx1ZU9mZiAtIHZhbHVlIHdoZW4gdGhlIGJ1dHRvbiBpcyBpbiB0aGUgb2ZmIHN0YXRlXHJcbiAgICogQHBhcmFtIHZhbHVlT24gLSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgaW4gdGhlIG9uIHN0YXRlXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9ucz9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3BlcnR5OiBUUHJvcGVydHk8VD4sIHZhbHVlT2ZmOiBULCB2YWx1ZU9uOiBULCBwcm92aWRlZE9wdGlvbnM/OiBSb3VuZE1vbWVudGFyeUJ1dHRvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSb3VuZE1vbWVudGFyeUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSb3VuZEJ1dHRvbk9wdGlvbnM+KCkoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHRhbmRlbU5hbWVTdWZmaXg6ICdCdXR0b24nXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBOb3RlIGl0IHNoYXJlcyBhIHRhbmRlbSB3aXRoIHRoaXMsIHNvIHRoZSBlbWl0dGVyIHdpbGwgYmUgaW5zdHJ1bWVudGVkIGFzIGEgY2hpbGQgb2YgdGhlIGJ1dHRvblxyXG4gICAgY29uc3QgYnV0dG9uTW9kZWwgPSBuZXcgTW9tZW50YXJ5QnV0dG9uTW9kZWwoIHZhbHVlT2ZmLCB2YWx1ZU9uLCBwcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBidXR0b25Nb2RlbCwgbmV3IE1vbWVudGFyeUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSggYnV0dG9uTW9kZWwgKSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZVJvdW5kTW9tZW50YXJ5QnV0dG9uID0gKCkgPT4ge1xyXG4gICAgICBidXR0b25Nb2RlbC5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VSb3VuZE1vbWVudGFyeUJ1dHRvbigpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuc3VuLnJlZ2lzdGVyKCAnUm91bmRNb21lbnRhcnlCdXR0b24nLCBSb3VuZE1vbWVudGFyeUJ1dHRvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBNEIsb0NBQW9DO0FBQ2hGLE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsR0FBRyxNQUFNLFdBQVc7QUFDM0IsT0FBT0MsdUNBQXVDLE1BQU0sOENBQThDO0FBQ2xHLE9BQU9DLG9CQUFvQixNQUFNLDJCQUEyQjtBQUM1RCxPQUFPQyxXQUFXLE1BQThCLGtCQUFrQjtBQU1sRSxlQUFlLE1BQU1DLG9CQUFvQixTQUFZRCxXQUFXLENBQUM7RUFJL0Q7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NFLFdBQVdBLENBQUVDLFFBQXNCLEVBQUVDLFFBQVcsRUFBRUMsT0FBVSxFQUFFQyxlQUE2QyxFQUFHO0lBRW5ILE1BQU1DLE9BQU8sR0FBR1osU0FBUyxDQUErRCxDQUFDLENBQUU7TUFDekZhLE1BQU0sRUFBRVosTUFBTSxDQUFDYSxRQUFRO01BQ3ZCQyxnQkFBZ0IsRUFBRTtJQUNwQixDQUFDLEVBQUVKLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUssV0FBVyxHQUFHLElBQUlaLG9CQUFvQixDQUFFSyxRQUFRLEVBQUVDLE9BQU8sRUFBRUYsUUFBUSxFQUFFSSxPQUFRLENBQUM7SUFFcEYsS0FBSyxDQUFFSSxXQUFXLEVBQUUsSUFBSWIsdUNBQXVDLENBQUVhLFdBQVksQ0FBQyxFQUFFSixPQUFRLENBQUM7SUFFekYsSUFBSSxDQUFDSywyQkFBMkIsR0FBRyxNQUFNO01BQ3ZDRCxXQUFXLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0QsMkJBQTJCLENBQUMsQ0FBQztJQUNsQyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWhCLEdBQUcsQ0FBQ2lCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRWIsb0JBQXFCLENBQUMifQ==