// Copyright 2014-2022, University of Colorado Boulder

/**
 * RoundToggleButton is a round toggle button that toggles the value of a Property between 2 values.
 * It has the same look for both values.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import toggleOffSoundPlayer from '../../../tambo/js/shared-sound-players/toggleOffSoundPlayer.js';
import toggleOnSoundPlayer from '../../../tambo/js/shared-sound-players/toggleOnSoundPlayer.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import RoundButton from './RoundButton.js';
import ToggleButtonInteractionStateProperty from './ToggleButtonInteractionStateProperty.js';
import ToggleButtonModel from './ToggleButtonModel.js';
export default class RoundToggleButton extends RoundButton {
  /**
   * @param property - axon Property that can be either valueOff or valueOn
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param providedOptions?
   */
  constructor(property, valueOff, valueOn, providedOptions) {
    const options = optionize()({
      // SelfOptions
      valueOffSoundPlayer: toggleOffSoundPlayer,
      valueOnSoundPlayer: toggleOnSoundPlayer,
      // phet-io support
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Button'
    }, providedOptions);

    // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
    const toggleButtonModel = new ToggleButtonModel(valueOff, valueOn, property, options);
    const toggleButtonInteractionStateProperty = new ToggleButtonInteractionStateProperty(toggleButtonModel);
    super(toggleButtonModel, toggleButtonInteractionStateProperty, options);
    this.addLinkedElement(property, {
      tandem: options.tandem.createTandem('property')
    });

    // sound generation
    const playSounds = () => {
      if (property.value === valueOff) {
        options.valueOffSoundPlayer.play();
      } else if (property.value === valueOn) {
        options.valueOnSoundPlayer.play();
      }
    };
    this.buttonModel.produceSoundEmitter.addListener(playSounds);
    this.disposeRoundToggleButton = () => {
      this.buttonModel.produceSoundEmitter.removeListener(playSounds);
      toggleButtonModel.dispose();
    };
  }
  dispose() {
    this.disposeRoundToggleButton();
    super.dispose();
  }
}
sun.register('RoundToggleButton', RoundToggleButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJ0b2dnbGVPZmZTb3VuZFBsYXllciIsInRvZ2dsZU9uU291bmRQbGF5ZXIiLCJUYW5kZW0iLCJzdW4iLCJSb3VuZEJ1dHRvbiIsIlRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsIlRvZ2dsZUJ1dHRvbk1vZGVsIiwiUm91bmRUb2dnbGVCdXR0b24iLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwidmFsdWVPZmYiLCJ2YWx1ZU9uIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInZhbHVlT2ZmU291bmRQbGF5ZXIiLCJ2YWx1ZU9uU291bmRQbGF5ZXIiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsInRhbmRlbU5hbWVTdWZmaXgiLCJ0b2dnbGVCdXR0b25Nb2RlbCIsInRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsImFkZExpbmtlZEVsZW1lbnQiLCJjcmVhdGVUYW5kZW0iLCJwbGF5U291bmRzIiwidmFsdWUiLCJwbGF5IiwiYnV0dG9uTW9kZWwiLCJwcm9kdWNlU291bmRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJkaXNwb3NlUm91bmRUb2dnbGVCdXR0b24iLCJyZW1vdmVMaXN0ZW5lciIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJvdW5kVG9nZ2xlQnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJvdW5kVG9nZ2xlQnV0dG9uIGlzIGEgcm91bmQgdG9nZ2xlIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgdGhlIHZhbHVlIG9mIGEgUHJvcGVydHkgYmV0d2VlbiAyIHZhbHVlcy5cclxuICogSXQgaGFzIHRoZSBzYW1lIGxvb2sgZm9yIGJvdGggdmFsdWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFRTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9UU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgdG9nZ2xlT2ZmU291bmRQbGF5ZXIgZnJvbSAnLi4vLi4vLi4vdGFtYm8vanMvc2hhcmVkLXNvdW5kLXBsYXllcnMvdG9nZ2xlT2ZmU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgdG9nZ2xlT25Tb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9zaGFyZWQtc291bmQtcGxheWVycy90b2dnbGVPblNvdW5kUGxheWVyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuLi9zdW4uanMnO1xyXG5pbXBvcnQgUm91bmRCdXR0b24sIHsgUm91bmRCdXR0b25PcHRpb25zIH0gZnJvbSAnLi9Sb3VuZEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkgZnJvbSAnLi9Ub2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVG9nZ2xlQnV0dG9uTW9kZWwgZnJvbSAnLi9Ub2dnbGVCdXR0b25Nb2RlbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG5cclxuICAvLyBzb3VuZHMgdG8gYmUgcGxheWVkIG9uIHRvZ2dsZSB0cmFuc2l0aW9uc1xyXG4gIHZhbHVlT2ZmU291bmRQbGF5ZXI/OiBUU291bmRQbGF5ZXI7XHJcbiAgdmFsdWVPblNvdW5kUGxheWVyPzogVFNvdW5kUGxheWVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUm91bmRUb2dnbGVCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBSb3VuZEJ1dHRvbk9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3VuZFRvZ2dsZUJ1dHRvbjxUPiBleHRlbmRzIFJvdW5kQnV0dG9uIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlUm91bmRUb2dnbGVCdXR0b246ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIGF4b24gUHJvcGVydHkgdGhhdCBjYW4gYmUgZWl0aGVyIHZhbHVlT2ZmIG9yIHZhbHVlT25cclxuICAgKiBAcGFyYW0gdmFsdWVPZmYgLSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgaW4gdGhlIG9mZiBzdGF0ZVxyXG4gICAqIEBwYXJhbSB2YWx1ZU9uIC0gdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIGluIHRoZSBvbiBzdGF0ZVxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnM/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eTogUHJvcGVydHk8VD4sIHZhbHVlT2ZmOiBULCB2YWx1ZU9uOiBULCBwcm92aWRlZE9wdGlvbnM/OiBSb3VuZFRvZ2dsZUJ1dHRvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSb3VuZFRvZ2dsZUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSb3VuZEJ1dHRvbk9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHZhbHVlT2ZmU291bmRQbGF5ZXI6IHRvZ2dsZU9mZlNvdW5kUGxheWVyLFxyXG4gICAgICB2YWx1ZU9uU291bmRQbGF5ZXI6IHRvZ2dsZU9uU291bmRQbGF5ZXIsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvIHN1cHBvcnRcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHRhbmRlbU5hbWVTdWZmaXg6ICdCdXR0b24nXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBOb3RlIGl0IHNoYXJlcyBhIHRhbmRlbSB3aXRoIHRoaXMsIHNvIHRoZSBlbWl0dGVyIHdpbGwgYmUgaW5zdHJ1bWVudGVkIGFzIGEgY2hpbGQgb2YgdGhlIGJ1dHRvblxyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uTW9kZWwgPSBuZXcgVG9nZ2xlQnV0dG9uTW9kZWwoIHZhbHVlT2ZmLCB2YWx1ZU9uLCBwcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5ID0gbmV3IFRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSggdG9nZ2xlQnV0dG9uTW9kZWwgKTtcclxuXHJcbiAgICBzdXBlciggdG9nZ2xlQnV0dG9uTW9kZWwsIHRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuYWRkTGlua2VkRWxlbWVudCggcHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHNvdW5kIGdlbmVyYXRpb25cclxuICAgIGNvbnN0IHBsYXlTb3VuZHMgPSAoKSA9PiB7XHJcbiAgICAgIGlmICggcHJvcGVydHkudmFsdWUgPT09IHZhbHVlT2ZmICkge1xyXG4gICAgICAgIG9wdGlvbnMudmFsdWVPZmZTb3VuZFBsYXllci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIHByb3BlcnR5LnZhbHVlID09PSB2YWx1ZU9uICkge1xyXG4gICAgICAgIG9wdGlvbnMudmFsdWVPblNvdW5kUGxheWVyLnBsYXkoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuYnV0dG9uTW9kZWwucHJvZHVjZVNvdW5kRW1pdHRlci5hZGRMaXN0ZW5lciggcGxheVNvdW5kcyApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZVJvdW5kVG9nZ2xlQnV0dG9uID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLmJ1dHRvbk1vZGVsLnByb2R1Y2VTb3VuZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIHBsYXlTb3VuZHMgKTtcclxuICAgICAgdG9nZ2xlQnV0dG9uTW9kZWwuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlUm91bmRUb2dnbGVCdXR0b24oKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnN1bi5yZWdpc3RlciggJ1JvdW5kVG9nZ2xlQnV0dG9uJywgUm91bmRUb2dnbGVCdXR0b24gKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQU0sb0NBQW9DO0FBRTFELE9BQU9DLG9CQUFvQixNQUFNLGdFQUFnRTtBQUNqRyxPQUFPQyxtQkFBbUIsTUFBTSwrREFBK0Q7QUFDL0YsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxHQUFHLE1BQU0sV0FBVztBQUMzQixPQUFPQyxXQUFXLE1BQThCLGtCQUFrQjtBQUNsRSxPQUFPQyxvQ0FBb0MsTUFBTSwyQ0FBMkM7QUFDNUYsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBV3RELGVBQWUsTUFBTUMsaUJBQWlCLFNBQVlILFdBQVcsQ0FBQztFQUk1RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsUUFBcUIsRUFBRUMsUUFBVyxFQUFFQyxPQUFVLEVBQUVDLGVBQTBDLEVBQUc7SUFFL0csTUFBTUMsT0FBTyxHQUFHZCxTQUFTLENBQTRELENBQUMsQ0FBRTtNQUV0RjtNQUNBZSxtQkFBbUIsRUFBRWQsb0JBQW9CO01BQ3pDZSxrQkFBa0IsRUFBRWQsbUJBQW1CO01BRXZDO01BQ0FlLE1BQU0sRUFBRWQsTUFBTSxDQUFDZSxRQUFRO01BQ3ZCQyxnQkFBZ0IsRUFBRTtJQUNwQixDQUFDLEVBQUVOLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTU8saUJBQWlCLEdBQUcsSUFBSWIsaUJBQWlCLENBQUVJLFFBQVEsRUFBRUMsT0FBTyxFQUFFRixRQUFRLEVBQUVJLE9BQVEsQ0FBQztJQUN2RixNQUFNTyxvQ0FBb0MsR0FBRyxJQUFJZixvQ0FBb0MsQ0FBRWMsaUJBQWtCLENBQUM7SUFFMUcsS0FBSyxDQUFFQSxpQkFBaUIsRUFBRUMsb0NBQW9DLEVBQUVQLE9BQVEsQ0FBQztJQUV6RSxJQUFJLENBQUNRLGdCQUFnQixDQUFFWixRQUFRLEVBQUU7TUFDL0JPLE1BQU0sRUFBRUgsT0FBTyxDQUFDRyxNQUFNLENBQUNNLFlBQVksQ0FBRSxVQUFXO0lBQ2xELENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLFVBQVUsR0FBR0EsQ0FBQSxLQUFNO01BQ3ZCLElBQUtkLFFBQVEsQ0FBQ2UsS0FBSyxLQUFLZCxRQUFRLEVBQUc7UUFDakNHLE9BQU8sQ0FBQ0MsbUJBQW1CLENBQUNXLElBQUksQ0FBQyxDQUFDO01BQ3BDLENBQUMsTUFDSSxJQUFLaEIsUUFBUSxDQUFDZSxLQUFLLEtBQUtiLE9BQU8sRUFBRztRQUNyQ0UsT0FBTyxDQUFDRSxrQkFBa0IsQ0FBQ1UsSUFBSSxDQUFDLENBQUM7TUFDbkM7SUFDRixDQUFDO0lBQ0QsSUFBSSxDQUFDQyxXQUFXLENBQUNDLG1CQUFtQixDQUFDQyxXQUFXLENBQUVMLFVBQVcsQ0FBQztJQUU5RCxJQUFJLENBQUNNLHdCQUF3QixHQUFHLE1BQU07TUFDcEMsSUFBSSxDQUFDSCxXQUFXLENBQUNDLG1CQUFtQixDQUFDRyxjQUFjLENBQUVQLFVBQVcsQ0FBQztNQUNqRUosaUJBQWlCLENBQUNZLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0Ysd0JBQXdCLENBQUMsQ0FBQztJQUMvQixLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTVCLEdBQUcsQ0FBQzZCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRXpCLGlCQUFrQixDQUFDIn0=