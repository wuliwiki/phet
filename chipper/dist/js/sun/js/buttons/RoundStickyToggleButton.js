// Copyright 2014-2022, University of Colorado Boulder

/**
 * RoundStickyToggleButton is a round toggle button that toggles the value of a Property between 2 values.
 * It has a different look (referred to as 'up' and 'down') for the 2 values.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import pushButtonSoundPlayer from '../../../tambo/js/shared-sound-players/pushButtonSoundPlayer.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import RoundButton from './RoundButton.js';
import StickyToggleButtonInteractionStateProperty from './StickyToggleButtonInteractionStateProperty.js';
import StickyToggleButtonModel from './StickyToggleButtonModel.js';
export default class RoundStickyToggleButton extends RoundButton {
  /**
   * @param valueProperty - axon Property that can be either valueUp or valueDown.
   * @param valueUp - value when the toggle is in the 'up' position
   * @param valueDown - value when the toggle is in the 'down' position
   * @param providedOptions?
   */
  constructor(valueProperty, valueUp, valueDown, providedOptions) {
    const options = optionize()({
      // SelfOptions
      soundPlayer: pushButtonSoundPlayer,
      // RoundButtonOptions
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Button'
    }, providedOptions);

    // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
    const toggleButtonModel = new StickyToggleButtonModel(valueUp, valueDown, valueProperty, options);
    const stickyToggleButtonInteractionStateProperty = new StickyToggleButtonInteractionStateProperty(toggleButtonModel);
    super(toggleButtonModel, stickyToggleButtonInteractionStateProperty, options);

    // sound generation
    const playSound = () => options.soundPlayer.play();
    toggleButtonModel.produceSoundEmitter.addListener(playSound);

    // pdom - signify button is 'pressed' when down
    const setAriaPressed = value => this.setPDOMAttribute('aria-pressed', valueProperty.value === valueDown);
    valueProperty.link(setAriaPressed);
    this.disposeRoundStickyToggleButton = () => {
      valueProperty.unlink(setAriaPressed);
      toggleButtonModel.produceSoundEmitter.removeListener(playSound);
      toggleButtonModel.dispose();
    };
  }
  dispose() {
    this.disposeRoundStickyToggleButton();
    super.dispose();
  }
}
sun.register('RoundStickyToggleButton', RoundStickyToggleButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJwdXNoQnV0dG9uU291bmRQbGF5ZXIiLCJUYW5kZW0iLCJzdW4iLCJSb3VuZEJ1dHRvbiIsIlN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsIlN0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsIiwiUm91bmRTdGlja3lUb2dnbGVCdXR0b24iLCJjb25zdHJ1Y3RvciIsInZhbHVlUHJvcGVydHkiLCJ2YWx1ZVVwIiwidmFsdWVEb3duIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNvdW5kUGxheWVyIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwidG9nZ2xlQnV0dG9uTW9kZWwiLCJzdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkiLCJwbGF5U291bmQiLCJwbGF5IiwicHJvZHVjZVNvdW5kRW1pdHRlciIsImFkZExpc3RlbmVyIiwic2V0QXJpYVByZXNzZWQiLCJ2YWx1ZSIsInNldFBET01BdHRyaWJ1dGUiLCJsaW5rIiwiZGlzcG9zZVJvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uIiwidW5saW5rIiwicmVtb3ZlTGlzdGVuZXIiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbiBpcyBhIHJvdW5kIHRvZ2dsZSBidXR0b24gdGhhdCB0b2dnbGVzIHRoZSB2YWx1ZSBvZiBhIFByb3BlcnR5IGJldHdlZW4gMiB2YWx1ZXMuXHJcbiAqIEl0IGhhcyBhIGRpZmZlcmVudCBsb29rIChyZWZlcnJlZCB0byBhcyAndXAnIGFuZCAnZG93bicpIGZvciB0aGUgMiB2YWx1ZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBUU291bmRQbGF5ZXIgZnJvbSAnLi4vLi4vLi4vdGFtYm8vanMvVFNvdW5kUGxheWVyLmpzJztcclxuaW1wb3J0IHB1c2hCdXR0b25Tb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9zaGFyZWQtc291bmQtcGxheWVycy9wdXNoQnV0dG9uU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgc3VuIGZyb20gJy4uL3N1bi5qcyc7XHJcbmltcG9ydCBSb3VuZEJ1dHRvbiwgeyBSb3VuZEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL1JvdW5kQnV0dG9uLmpzJztcclxuaW1wb3J0IFN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSBmcm9tICcuL1N0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdGlja3lUb2dnbGVCdXR0b25Nb2RlbCBmcm9tICcuL1N0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgc291bmRQbGF5ZXI/OiBUU291bmRQbGF5ZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFJvdW5kQnV0dG9uT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uPFQ+IGV4dGVuZHMgUm91bmRCdXR0b24ge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbjogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHZhbHVlUHJvcGVydHkgLSBheG9uIFByb3BlcnR5IHRoYXQgY2FuIGJlIGVpdGhlciB2YWx1ZVVwIG9yIHZhbHVlRG93bi5cclxuICAgKiBAcGFyYW0gdmFsdWVVcCAtIHZhbHVlIHdoZW4gdGhlIHRvZ2dsZSBpcyBpbiB0aGUgJ3VwJyBwb3NpdGlvblxyXG4gICAqIEBwYXJhbSB2YWx1ZURvd24gLSB2YWx1ZSB3aGVuIHRoZSB0b2dnbGUgaXMgaW4gdGhlICdkb3duJyBwb3NpdGlvblxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnM/XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZVByb3BlcnR5OiBUUHJvcGVydHk8VD4sIHZhbHVlVXA6IFQsIHZhbHVlRG93bjogVCwgcHJvdmlkZWRPcHRpb25zPzogUm91bmRTdGlja3lUb2dnbGVCdXR0b25PcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Um91bmRTdGlja3lUb2dnbGVCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUm91bmRCdXR0b25PcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBzb3VuZFBsYXllcjogcHVzaEJ1dHRvblNvdW5kUGxheWVyLFxyXG5cclxuICAgICAgLy8gUm91bmRCdXR0b25PcHRpb25zXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxyXG4gICAgICB0YW5kZW1OYW1lU3VmZml4OiAnQnV0dG9uJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gTm90ZSBpdCBzaGFyZXMgYSB0YW5kZW0gd2l0aCB0aGlzLCBzbyB0aGUgZW1pdHRlciB3aWxsIGJlIGluc3RydW1lbnRlZCBhcyBhIGNoaWxkIG9mIHRoZSBidXR0b25cclxuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbk1vZGVsID0gbmV3IFN0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsKCB2YWx1ZVVwLCB2YWx1ZURvd24sIHZhbHVlUHJvcGVydHksIG9wdGlvbnMgKTtcclxuICAgIGNvbnN0IHN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSA9IG5ldyBTdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkoIHRvZ2dsZUJ1dHRvbk1vZGVsICk7XHJcblxyXG4gICAgc3VwZXIoIHRvZ2dsZUJ1dHRvbk1vZGVsLCBzdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBzb3VuZCBnZW5lcmF0aW9uXHJcbiAgICBjb25zdCBwbGF5U291bmQgPSAoKSA9PiBvcHRpb25zLnNvdW5kUGxheWVyLnBsYXkoKTtcclxuICAgIHRvZ2dsZUJ1dHRvbk1vZGVsLnByb2R1Y2VTb3VuZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIHBsYXlTb3VuZCApO1xyXG5cclxuICAgIC8vIHBkb20gLSBzaWduaWZ5IGJ1dHRvbiBpcyAncHJlc3NlZCcgd2hlbiBkb3duXHJcbiAgICBjb25zdCBzZXRBcmlhUHJlc3NlZCA9ICggdmFsdWU6IFQgKSA9PiB0aGlzLnNldFBET01BdHRyaWJ1dGUoICdhcmlhLXByZXNzZWQnLCB2YWx1ZVByb3BlcnR5LnZhbHVlID09PSB2YWx1ZURvd24gKTtcclxuICAgIHZhbHVlUHJvcGVydHkubGluayggc2V0QXJpYVByZXNzZWQgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgdmFsdWVQcm9wZXJ0eS51bmxpbmsoIHNldEFyaWFQcmVzc2VkICk7XHJcbiAgICAgIHRvZ2dsZUJ1dHRvbk1vZGVsLnByb2R1Y2VTb3VuZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIHBsYXlTb3VuZCApO1xyXG4gICAgICB0b2dnbGVCdXR0b25Nb2RlbC5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbigpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuc3VuLnJlZ2lzdGVyKCAnUm91bmRTdGlja3lUb2dnbGVCdXR0b24nLCBSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxNQUFNLG9DQUFvQztBQUUxRCxPQUFPQyxxQkFBcUIsTUFBTSxpRUFBaUU7QUFDbkcsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxHQUFHLE1BQU0sV0FBVztBQUMzQixPQUFPQyxXQUFXLE1BQThCLGtCQUFrQjtBQUNsRSxPQUFPQywwQ0FBMEMsTUFBTSxpREFBaUQ7QUFDeEcsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBUWxFLGVBQWUsTUFBTUMsdUJBQXVCLFNBQVlILFdBQVcsQ0FBQztFQUlsRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsYUFBMkIsRUFBRUMsT0FBVSxFQUFFQyxTQUFZLEVBQUVDLGVBQWdELEVBQUc7SUFFNUgsTUFBTUMsT0FBTyxHQUFHYixTQUFTLENBQWtFLENBQUMsQ0FBRTtNQUU1RjtNQUNBYyxXQUFXLEVBQUViLHFCQUFxQjtNQUVsQztNQUNBYyxNQUFNLEVBQUViLE1BQU0sQ0FBQ2MsUUFBUTtNQUN2QkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQyxFQUFFTCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1NLGlCQUFpQixHQUFHLElBQUlaLHVCQUF1QixDQUFFSSxPQUFPLEVBQUVDLFNBQVMsRUFBRUYsYUFBYSxFQUFFSSxPQUFRLENBQUM7SUFDbkcsTUFBTU0sMENBQTBDLEdBQUcsSUFBSWQsMENBQTBDLENBQUVhLGlCQUFrQixDQUFDO0lBRXRILEtBQUssQ0FBRUEsaUJBQWlCLEVBQUVDLDBDQUEwQyxFQUFFTixPQUFRLENBQUM7O0lBRS9FO0lBQ0EsTUFBTU8sU0FBUyxHQUFHQSxDQUFBLEtBQU1QLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDTyxJQUFJLENBQUMsQ0FBQztJQUNsREgsaUJBQWlCLENBQUNJLG1CQUFtQixDQUFDQyxXQUFXLENBQUVILFNBQVUsQ0FBQzs7SUFFOUQ7SUFDQSxNQUFNSSxjQUFjLEdBQUtDLEtBQVEsSUFBTSxJQUFJLENBQUNDLGdCQUFnQixDQUFFLGNBQWMsRUFBRWpCLGFBQWEsQ0FBQ2dCLEtBQUssS0FBS2QsU0FBVSxDQUFDO0lBQ2pIRixhQUFhLENBQUNrQixJQUFJLENBQUVILGNBQWUsQ0FBQztJQUVwQyxJQUFJLENBQUNJLDhCQUE4QixHQUFHLE1BQU07TUFDMUNuQixhQUFhLENBQUNvQixNQUFNLENBQUVMLGNBQWUsQ0FBQztNQUN0Q04saUJBQWlCLENBQUNJLG1CQUFtQixDQUFDUSxjQUFjLENBQUVWLFNBQVUsQ0FBQztNQUNqRUYsaUJBQWlCLENBQUNhLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0gsOEJBQThCLENBQUMsQ0FBQztJQUNyQyxLQUFLLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTVCLEdBQUcsQ0FBQzZCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRXpCLHVCQUF3QixDQUFDIn0=