// Copyright 2015-2022, University of Colorado Boulder

/**
 * Model for a momentary button: on when pressed, off when released.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../phet-core/js/optionize.js';
import PhetioObject from '../../../tandem/js/PhetioObject.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import ButtonModel from './ButtonModel.js';
export default class MomentaryButtonModel extends ButtonModel {
  /**
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param valueProperty
   * @param [providedOptions]
   */
  constructor(valueOff, valueOn, valueProperty, providedOptions) {
    const options = optionize()({
      // phet-io
      tandem: Tandem.REQUIRED,
      // to support properly passing this to children, see https://github.com/phetsims/tandem/issues/60
      phetioReadOnly: PhetioObject.DEFAULT_OPTIONS.phetioReadOnly
    }, providedOptions);
    super(options);
    const downListener = down => {
      // turn on when pressed (if enabled)
      if (down) {
        if (this.enabledProperty.get()) {
          valueProperty.set(valueOn);
        }
      } else {
        valueProperty.set(valueOff);
      }
    };
    this.downProperty.lazyLink(downListener);

    // if valueProperty set externally, signify to ButtonModel
    const valuePropertyListener = value => {
      this.downProperty.set(value === valueOn);
    };
    valueProperty.link(valuePropertyListener);
    this.disposeMomentaryButtonModel = () => {
      this.downProperty.unlink(downListener);
      valueProperty.unlink(valuePropertyListener);
    };
  }
  dispose() {
    this.disposeMomentaryButtonModel();
    super.dispose(); //TODO fails with assertions enabled, see https://github.com/phetsims/sun/issues/212
  }
}

sun.register('MomentaryButtonModel', MomentaryButtonModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0aW9PYmplY3QiLCJUYW5kZW0iLCJzdW4iLCJCdXR0b25Nb2RlbCIsIk1vbWVudGFyeUJ1dHRvbk1vZGVsIiwiY29uc3RydWN0b3IiLCJ2YWx1ZU9mZiIsInZhbHVlT24iLCJ2YWx1ZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInRhbmRlbSIsIlJFUVVJUkVEIiwicGhldGlvUmVhZE9ubHkiLCJERUZBVUxUX09QVElPTlMiLCJkb3duTGlzdGVuZXIiLCJkb3duIiwiZW5hYmxlZFByb3BlcnR5IiwiZ2V0Iiwic2V0IiwiZG93blByb3BlcnR5IiwibGF6eUxpbmsiLCJ2YWx1ZVByb3BlcnR5TGlzdGVuZXIiLCJ2YWx1ZSIsImxpbmsiLCJkaXNwb3NlTW9tZW50YXJ5QnV0dG9uTW9kZWwiLCJ1bmxpbmsiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNb21lbnRhcnlCdXR0b25Nb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgYSBtb21lbnRhcnkgYnV0dG9uOiBvbiB3aGVuIHByZXNzZWQsIG9mZiB3aGVuIHJlbGVhc2VkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBoZXRpb09iamVjdCBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuLi9zdW4uanMnO1xyXG5pbXBvcnQgQnV0dG9uTW9kZWwsIHsgQnV0dG9uTW9kZWxPcHRpb25zIH0gZnJvbSAnLi9CdXR0b25Nb2RlbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIE1vbWVudGFyeUJ1dHRvbk1vZGVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgQnV0dG9uTW9kZWxPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9tZW50YXJ5QnV0dG9uTW9kZWw8VD4gZXh0ZW5kcyBCdXR0b25Nb2RlbCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZU1vbWVudGFyeUJ1dHRvbk1vZGVsOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gdmFsdWVPZmYgLSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgaW4gdGhlIG9mZiBzdGF0ZVxyXG4gICAqIEBwYXJhbSB2YWx1ZU9uIC0gdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIGluIHRoZSBvbiBzdGF0ZVxyXG4gICAqIEBwYXJhbSB2YWx1ZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZU9mZjogVCwgdmFsdWVPbjogVCwgdmFsdWVQcm9wZXJ0eTogVFByb3BlcnR5PFQ+LCBwcm92aWRlZE9wdGlvbnM/OiBNb21lbnRhcnlCdXR0b25Nb2RlbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxNb21lbnRhcnlCdXR0b25Nb2RlbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBCdXR0b25Nb2RlbE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcblxyXG4gICAgICAvLyB0byBzdXBwb3J0IHByb3Blcmx5IHBhc3NpbmcgdGhpcyB0byBjaGlsZHJlbiwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy90YW5kZW0vaXNzdWVzLzYwXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiBQaGV0aW9PYmplY3QuREVGQVVMVF9PUFRJT05TLnBoZXRpb1JlYWRPbmx5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGRvd25MaXN0ZW5lciA9ICggZG93bjogYm9vbGVhbiApID0+IHtcclxuXHJcbiAgICAgIC8vIHR1cm4gb24gd2hlbiBwcmVzc2VkIChpZiBlbmFibGVkKVxyXG4gICAgICBpZiAoIGRvd24gKSB7XHJcbiAgICAgICAgaWYgKCB0aGlzLmVuYWJsZWRQcm9wZXJ0eS5nZXQoKSApIHtcclxuICAgICAgICAgIHZhbHVlUHJvcGVydHkuc2V0KCB2YWx1ZU9uICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHZhbHVlUHJvcGVydHkuc2V0KCB2YWx1ZU9mZiApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy5kb3duUHJvcGVydHkubGF6eUxpbmsoIGRvd25MaXN0ZW5lciApO1xyXG5cclxuICAgIC8vIGlmIHZhbHVlUHJvcGVydHkgc2V0IGV4dGVybmFsbHksIHNpZ25pZnkgdG8gQnV0dG9uTW9kZWxcclxuICAgIGNvbnN0IHZhbHVlUHJvcGVydHlMaXN0ZW5lciA9ICggdmFsdWU6IFQgKSA9PiB7XHJcbiAgICAgIHRoaXMuZG93blByb3BlcnR5LnNldCggdmFsdWUgPT09IHZhbHVlT24gKTtcclxuICAgIH07XHJcbiAgICB2YWx1ZVByb3BlcnR5LmxpbmsoIHZhbHVlUHJvcGVydHlMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZU1vbWVudGFyeUJ1dHRvbk1vZGVsID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLmRvd25Qcm9wZXJ0eS51bmxpbmsoIGRvd25MaXN0ZW5lciApO1xyXG4gICAgICB2YWx1ZVByb3BlcnR5LnVubGluayggdmFsdWVQcm9wZXJ0eUxpc3RlbmVyICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VNb21lbnRhcnlCdXR0b25Nb2RlbCgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpOyAvL1RPRE8gZmFpbHMgd2l0aCBhc3NlcnRpb25zIGVuYWJsZWQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy8yMTJcclxuICB9XHJcbn1cclxuXHJcbnN1bi5yZWdpc3RlciggJ01vbWVudGFyeUJ1dHRvbk1vZGVsJywgTW9tZW50YXJ5QnV0dG9uTW9kZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxNQUE0QixvQ0FBb0M7QUFDaEYsT0FBT0MsWUFBWSxNQUFNLG9DQUFvQztBQUM3RCxPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBQ2pELE9BQU9DLEdBQUcsTUFBTSxXQUFXO0FBQzNCLE9BQU9DLFdBQVcsTUFBOEIsa0JBQWtCO0FBTWxFLGVBQWUsTUFBTUMsb0JBQW9CLFNBQVlELFdBQVcsQ0FBQztFQUkvRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0UsV0FBV0EsQ0FBRUMsUUFBVyxFQUFFQyxPQUFVLEVBQUVDLGFBQTJCLEVBQUVDLGVBQTZDLEVBQUc7SUFFeEgsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQStELENBQUMsQ0FBRTtNQUV6RjtNQUNBWSxNQUFNLEVBQUVWLE1BQU0sQ0FBQ1csUUFBUTtNQUV2QjtNQUNBQyxjQUFjLEVBQUViLFlBQVksQ0FBQ2MsZUFBZSxDQUFDRDtJQUMvQyxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFQyxPQUFRLENBQUM7SUFFaEIsTUFBTUssWUFBWSxHQUFLQyxJQUFhLElBQU07TUFFeEM7TUFDQSxJQUFLQSxJQUFJLEVBQUc7UUFDVixJQUFLLElBQUksQ0FBQ0MsZUFBZSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFHO1VBQ2hDVixhQUFhLENBQUNXLEdBQUcsQ0FBRVosT0FBUSxDQUFDO1FBQzlCO01BQ0YsQ0FBQyxNQUNJO1FBQ0hDLGFBQWEsQ0FBQ1csR0FBRyxDQUFFYixRQUFTLENBQUM7TUFDL0I7SUFDRixDQUFDO0lBQ0QsSUFBSSxDQUFDYyxZQUFZLENBQUNDLFFBQVEsQ0FBRU4sWUFBYSxDQUFDOztJQUUxQztJQUNBLE1BQU1PLHFCQUFxQixHQUFLQyxLQUFRLElBQU07TUFDNUMsSUFBSSxDQUFDSCxZQUFZLENBQUNELEdBQUcsQ0FBRUksS0FBSyxLQUFLaEIsT0FBUSxDQUFDO0lBQzVDLENBQUM7SUFDREMsYUFBYSxDQUFDZ0IsSUFBSSxDQUFFRixxQkFBc0IsQ0FBQztJQUUzQyxJQUFJLENBQUNHLDJCQUEyQixHQUFHLE1BQU07TUFDdkMsSUFBSSxDQUFDTCxZQUFZLENBQUNNLE1BQU0sQ0FBRVgsWUFBYSxDQUFDO01BQ3hDUCxhQUFhLENBQUNrQixNQUFNLENBQUVKLHFCQUFzQixDQUFDO0lBQy9DLENBQUM7RUFDSDtFQUVnQkssT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0YsMkJBQTJCLENBQUMsQ0FBQztJQUNsQyxLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNuQjtBQUNGOztBQUVBekIsR0FBRyxDQUFDMEIsUUFBUSxDQUFFLHNCQUFzQixFQUFFeEIsb0JBQXFCLENBQUMifQ==