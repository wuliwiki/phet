// Copyright 2022, University of Colorado Boulder

/**
 * Ticks for a slider.
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 *
 */

import DerivedProperty from '../../axon/js/DerivedProperty.js';
import { Shape } from '../../kite/js/imports.js';
import Orientation from '../../phet-core/js/Orientation.js';
import { ManualConstraint, Node, Path } from '../../scenery/js/imports.js';
import sun from './sun.js';
import SunConstants from './SunConstants.js';
export default class SliderTick {
  // NOTE: This could be cleaned up, so we could remove ticks or do other nice things
  constructor(parent, value, label, length, stroke, lineWidth, tickOptions, orientation, track) {
    this.parent = parent;
    this.value = value;
    this.label = label;
    this.labelXProperty = new DerivedProperty([track.valueToPositionProperty], valueToPosition => valueToPosition.evaluate(value));

    // ticks
    this.tickNode = new Node();
    parent.addChild(this.tickNode);
    const tickPath = new Path(new Shape().moveTo(0, track.top).lineTo(0, track.top - length), {
      stroke: stroke,
      lineWidth: lineWidth
    });
    this.labelXProperty.link(x => {
      tickPath.x = x;
    });
    this.tickNode.addChild(tickPath);

    // label
    if (label) {
      // For a vertical slider, rotate labels opposite the rotation of the slider, so that they appear as expected.
      if (orientation === Orientation.VERTICAL) {
        label.rotation = -SunConstants.SLIDER_VERTICAL_ROTATION;
      }
      this.tickNode.addChild(label);
      this.manualConstraint = ManualConstraint.create(this.tickNode, [tickPath, label], (tickProxy, labelProxy) => {
        labelProxy.centerX = tickProxy.centerX;
        labelProxy.bottom = tickProxy.top - tickOptions.tickLabelSpacing;
      });
      label.pickable = false;
    }
  }
  dispose() {
    this.parent.removeChild(this.tickNode);
    this.labelXProperty.dispose();
    this.manualConstraint && this.manualConstraint.dispose();
  }
}
sun.register('SliderTick', SliderTick);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJTaGFwZSIsIk9yaWVudGF0aW9uIiwiTWFudWFsQ29uc3RyYWludCIsIk5vZGUiLCJQYXRoIiwic3VuIiwiU3VuQ29uc3RhbnRzIiwiU2xpZGVyVGljayIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwidmFsdWUiLCJsYWJlbCIsImxlbmd0aCIsInN0cm9rZSIsImxpbmVXaWR0aCIsInRpY2tPcHRpb25zIiwib3JpZW50YXRpb24iLCJ0cmFjayIsImxhYmVsWFByb3BlcnR5IiwidmFsdWVUb1Bvc2l0aW9uUHJvcGVydHkiLCJ2YWx1ZVRvUG9zaXRpb24iLCJldmFsdWF0ZSIsInRpY2tOb2RlIiwiYWRkQ2hpbGQiLCJ0aWNrUGF0aCIsIm1vdmVUbyIsInRvcCIsImxpbmVUbyIsImxpbmsiLCJ4IiwiVkVSVElDQUwiLCJyb3RhdGlvbiIsIlNMSURFUl9WRVJUSUNBTF9ST1RBVElPTiIsIm1hbnVhbENvbnN0cmFpbnQiLCJjcmVhdGUiLCJ0aWNrUHJveHkiLCJsYWJlbFByb3h5IiwiY2VudGVyWCIsImJvdHRvbSIsInRpY2tMYWJlbFNwYWNpbmciLCJwaWNrYWJsZSIsImRpc3Bvc2UiLCJyZW1vdmVDaGlsZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2xpZGVyVGljay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGlja3MgZm9yIGEgc2xpZGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKlxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IE9yaWVudGF0aW9uIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9PcmllbnRhdGlvbi5qcyc7XHJcbmltcG9ydCB7IE1hbnVhbENvbnN0cmFpbnQsIE5vZGUsIFBhdGgsIFRQYWludCB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTbGlkZXJUcmFjayBmcm9tICcuL1NsaWRlclRyYWNrLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuL3N1bi5qcyc7XHJcbmltcG9ydCBTdW5Db25zdGFudHMgZnJvbSAnLi9TdW5Db25zdGFudHMuanMnO1xyXG5cclxuZXhwb3J0IHR5cGUgU2xpZGVyVGlja09wdGlvbnMgPSB7XHJcbiAgdGlja0xhYmVsU3BhY2luZz86IG51bWJlcjtcclxuICBtYWpvclRpY2tMZW5ndGg/OiBudW1iZXI7XHJcbiAgbWFqb3JUaWNrU3Ryb2tlPzogVFBhaW50O1xyXG4gIG1ham9yVGlja0xpbmVXaWR0aD86IG51bWJlcjtcclxuICBtaW5vclRpY2tMZW5ndGg/OiBudW1iZXI7XHJcbiAgbWlub3JUaWNrU3Ryb2tlPzogVFBhaW50O1xyXG4gIG1pbm9yVGlja0xpbmVXaWR0aD86IG51bWJlcjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlclRpY2sge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsWFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+O1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgdGlja05vZGU6IE5vZGU7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbWFudWFsQ29uc3RyYWludD86IE1hbnVhbENvbnN0cmFpbnQ8Tm9kZVtdPjtcclxuXHJcbiAgLy8gTk9URTogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLCBzbyB3ZSBjb3VsZCByZW1vdmUgdGlja3Mgb3IgZG8gb3RoZXIgbmljZSB0aGluZ3NcclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhcmVudDogTm9kZSxcclxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZTogbnVtYmVyLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsYWJlbDogTm9kZSB8IHVuZGVmaW5lZCxcclxuICAgIGxlbmd0aDogbnVtYmVyLFxyXG4gICAgc3Ryb2tlOiBUUGFpbnQsXHJcbiAgICBsaW5lV2lkdGg6IG51bWJlcixcclxuICAgIHRpY2tPcHRpb25zOiBSZXF1aXJlZDxTbGlkZXJUaWNrT3B0aW9ucz4sXHJcbiAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb24sXHJcbiAgICB0cmFjazogU2xpZGVyVHJhY2tcclxuICApIHtcclxuXHJcbiAgICB0aGlzLmxhYmVsWFByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB0cmFjay52YWx1ZVRvUG9zaXRpb25Qcm9wZXJ0eSBdLCB2YWx1ZVRvUG9zaXRpb24gPT4gdmFsdWVUb1Bvc2l0aW9uLmV2YWx1YXRlKCB2YWx1ZSApICk7XHJcblxyXG4gICAgLy8gdGlja3NcclxuICAgIHRoaXMudGlja05vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgcGFyZW50LmFkZENoaWxkKCB0aGlzLnRpY2tOb2RlICk7XHJcblxyXG4gICAgY29uc3QgdGlja1BhdGggPSBuZXcgUGF0aCggbmV3IFNoYXBlKClcclxuICAgICAgICAubW92ZVRvKCAwLCB0cmFjay50b3AgKVxyXG4gICAgICAgIC5saW5lVG8oIDAsIHRyYWNrLnRvcCAtIGxlbmd0aCApLFxyXG4gICAgICB7IHN0cm9rZTogc3Ryb2tlLCBsaW5lV2lkdGg6IGxpbmVXaWR0aCB9ICk7XHJcblxyXG4gICAgdGhpcy5sYWJlbFhQcm9wZXJ0eS5saW5rKCB4ID0+IHtcclxuICAgICAgdGlja1BhdGgueCA9IHg7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy50aWNrTm9kZS5hZGRDaGlsZCggdGlja1BhdGggKTtcclxuXHJcbiAgICAvLyBsYWJlbFxyXG4gICAgaWYgKCBsYWJlbCApIHtcclxuXHJcbiAgICAgIC8vIEZvciBhIHZlcnRpY2FsIHNsaWRlciwgcm90YXRlIGxhYmVscyBvcHBvc2l0ZSB0aGUgcm90YXRpb24gb2YgdGhlIHNsaWRlciwgc28gdGhhdCB0aGV5IGFwcGVhciBhcyBleHBlY3RlZC5cclxuICAgICAgaWYgKCBvcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwgKSB7XHJcbiAgICAgICAgbGFiZWwucm90YXRpb24gPSAtU3VuQ29uc3RhbnRzLlNMSURFUl9WRVJUSUNBTF9ST1RBVElPTjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnRpY2tOb2RlLmFkZENoaWxkKCBsYWJlbCApO1xyXG5cclxuICAgICAgdGhpcy5tYW51YWxDb25zdHJhaW50ID0gTWFudWFsQ29uc3RyYWludC5jcmVhdGUoIHRoaXMudGlja05vZGUsIFsgdGlja1BhdGgsIGxhYmVsIF0sICggdGlja1Byb3h5LCBsYWJlbFByb3h5ICkgPT4ge1xyXG4gICAgICAgIGxhYmVsUHJveHkuY2VudGVyWCA9IHRpY2tQcm94eS5jZW50ZXJYO1xyXG4gICAgICAgIGxhYmVsUHJveHkuYm90dG9tID0gdGlja1Byb3h5LnRvcCAtIHRpY2tPcHRpb25zLnRpY2tMYWJlbFNwYWNpbmc7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIGxhYmVsLnBpY2thYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKCB0aGlzLnRpY2tOb2RlICk7XHJcblxyXG4gICAgdGhpcy5sYWJlbFhQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLm1hbnVhbENvbnN0cmFpbnQgJiYgdGhpcy5tYW51YWxDb25zdHJhaW50LmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnN1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