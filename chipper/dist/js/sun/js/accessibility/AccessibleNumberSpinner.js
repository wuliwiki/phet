// Copyright 2018-2022, University of Colorado Boulder

/**
 * A trait for subtypes of Node, used to make the Node behave like a 'number' input with assistive technology.
 * An accessible number spinner behaves like:
 *
 * - Arrow keys increment/decrement the value by a specified step size.
 * - Page Up and Page Down increments/decrements value by an alternative step size, usually larger than default.
 * - Home key sets value to its minimum.
 * - End key sets value to its maximum.
 *
 * This number spinner is different than typical 'number' inputs because it does not support number key control. It
 * was determined that an input of type range is the best match for a PhET Number Spinner, with a custom role
 * description with aria-roledescription. See https://github.com/phetsims/sun/issues/497 for history on this
 * decision.
 *
 * This trait mixes in a "parent" mixin to handle general "value" formatting and aria-valuetext updating, see
 * AccessibleValueHandler.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Michael Barlow (PhET Interactive Simulations)
 */

import CallbackTimer from '../../../axon/js/CallbackTimer.js';
import Emitter from '../../../axon/js/Emitter.js';
import validate from '../../../axon/js/validate.js';
import assertHasProperties from '../../../phet-core/js/assertHasProperties.js';
import optionize from '../../../phet-core/js/optionize.js';
import Orientation from '../../../phet-core/js/Orientation.js';
import { KeyboardUtils } from '../../../scenery/js/imports.js';
import sun from '../sun.js';
import SunStrings from '../SunStrings.js';
import AccessibleValueHandler from './AccessibleValueHandler.js';
/**
 * @param Type
 * @param optionsArgPosition - zero-indexed number that the options argument is provided at
 */
const AccessibleNumberSpinner = (Type, optionsArgPosition) => {
  // eslint-disable-line @typescript-eslint/explicit-module-boundary-types

  return class AccessibleNumberSpinner extends AccessibleValueHandler(Type, optionsArgPosition) {
    // Manages timing must be disposed

    // emits events when increment and decrement actions occur, but only for changes
    // of keyboardStep and shiftKeyboardStep (not pageKeyboardStep)
    constructor(...args) {
      const providedOptions = args[optionsArgPosition];
      assert && providedOptions && assert(Object.getPrototypeOf(providedOptions) === Object.prototype, 'Extra prototype on AccessibleSlider options object is a code smell (or probably a bug)');
      const options = optionize()({
        timerDelay: 400,
        // start to fire continuously after pressing for this long (milliseconds)
        timerInterval: 100,
        // fire continuously at this frequency (milliseconds),

        ariaOrientation: Orientation.VERTICAL // by default, number spinners should be oriented vertically
      }, providedOptions);
      args[optionsArgPosition] = options;
      super(...args);

      // members of the Node API that are used by this trait
      assertHasProperties(this, ['addInputListener']);
      this._callbackTimer = new CallbackTimer({
        delay: options.timerDelay,
        interval: options.timerInterval
      });
      this.incrementDownEmitter = new Emitter({
        parameters: [{
          valueType: 'boolean'
        }]
      });
      this.decrementDownEmitter = new Emitter({
        parameters: [{
          valueType: 'boolean'
        }]
      });
      this.setPDOMAttribute('aria-roledescription', SunStrings.a11y.numberSpinnerRoleDescriptionStringProperty);

      // a callback that is added and removed from the timer depending on keystate
      let downCallback = null;
      let runningTimerCallbackEvent = null; // {Event|null}

      // handle all accessible event input
      const accessibleInputListener = {
        keydown: event => {
          if (this.enabledProperty.get()) {
            // check for relevant keys here
            if (KeyboardUtils.isRangeKey(event.domEvent)) {
              const domEvent = event.domEvent;

              // If the meta key is down we will not even call the keydown listener of the supertype, so we need
              // to be sure that default behavior is prevented so we don't receive `input` and `change` events.
              // See AccessibleValueHandler.handleInput for information on these events and why we don't want
              // to change in response to them.
              domEvent.preventDefault();

              // When the meta key is down Mac will not send keyup events so do not change values or add timer
              // listeners because they will never be removed since we fail to get a keyup event. See
              if (!domEvent.metaKey) {
                if (!this._callbackTimer.isRunning()) {
                  this._accessibleNumberSpinnerHandleKeyDown(event);
                  downCallback = this._accessibleNumberSpinnerHandleKeyDown.bind(this, event);
                  runningTimerCallbackEvent = domEvent;
                  this._callbackTimer.addCallback(downCallback);
                  this._callbackTimer.start();
                }
              }
            }
          }
        },
        keyup: event => {
          const key = KeyboardUtils.getEventCode(event.domEvent);
          if (KeyboardUtils.isRangeKey(event.domEvent)) {
            if (runningTimerCallbackEvent && key === KeyboardUtils.getEventCode(runningTimerCallbackEvent)) {
              this._emitKeyState(event.domEvent, false);
              this._callbackTimer.stop(false);
              assert && assert(downCallback);
              this._callbackTimer.removeCallback(downCallback);
              downCallback = null;
              runningTimerCallbackEvent = null;
            }
            this.handleKeyUp(event);
          }
        },
        blur: event => {
          // if a key is currently down when focus leaves the spinner, stop callbacks and emit that the
          // key is up
          if (downCallback) {
            assert && assert(runningTimerCallbackEvent !== null, 'key should be down if running downCallback');
            this._emitKeyState(runningTimerCallbackEvent, false);
            this._callbackTimer.stop(false);
            this._callbackTimer.removeCallback(downCallback);
          }
          this.handleBlur(event);
        },
        input: this.handleInput.bind(this),
        change: this.handleChange.bind(this)
      };
      this.addInputListener(accessibleInputListener);
      this._disposeAccessibleNumberSpinner = () => {
        this._callbackTimer.dispose();

        // emitters owned by this instance, can be disposed here
        this.incrementDownEmitter.dispose();
        this.decrementDownEmitter.dispose();
        this.removeInputListener(accessibleInputListener);
      };
    }

    /**
     * Handle the keydown event and emit events related to the user interaction. Ideally, this would
     * override AccessibleValueHandler.handleKeyDown, but overriding is not supported with PhET Trait pattern.
     */

    _accessibleNumberSpinnerHandleKeyDown(event) {
      assert && assert(event.domEvent, 'must have a domEvent');
      this.handleKeyDown(event);
      this._emitKeyState(event.domEvent, true);
    }

    /**
     * Emit events related to the keystate of the spinner. Typically used to style the spinner during keyboard
     * interaction.
     *
     * @param domEvent - the code of the key changing state
     * @param isDown - whether or not event was triggered from down or up keys
     */

    _emitKeyState(domEvent, isDown) {
      validate(domEvent, {
        valueType: Event
      });
      if (KeyboardUtils.isAnyKeyEvent(domEvent, [KeyboardUtils.KEY_UP_ARROW, KeyboardUtils.KEY_RIGHT_ARROW])) {
        this.incrementDownEmitter.emit(isDown);
      } else if (KeyboardUtils.isAnyKeyEvent(domEvent, [KeyboardUtils.KEY_DOWN_ARROW, KeyboardUtils.KEY_LEFT_ARROW])) {
        this.decrementDownEmitter.emit(isDown);
      }
    }
    dispose() {
      this._disposeAccessibleNumberSpinner();
      super.dispose();
    }
  };
};
sun.register('AccessibleNumberSpinner', AccessibleNumberSpinner);
export default AccessibleNumberSpinner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYWxsYmFja1RpbWVyIiwiRW1pdHRlciIsInZhbGlkYXRlIiwiYXNzZXJ0SGFzUHJvcGVydGllcyIsIm9wdGlvbml6ZSIsIk9yaWVudGF0aW9uIiwiS2V5Ym9hcmRVdGlscyIsInN1biIsIlN1blN0cmluZ3MiLCJBY2Nlc3NpYmxlVmFsdWVIYW5kbGVyIiwiQWNjZXNzaWJsZU51bWJlclNwaW5uZXIiLCJUeXBlIiwib3B0aW9uc0FyZ1Bvc2l0aW9uIiwiY29uc3RydWN0b3IiLCJhcmdzIiwicHJvdmlkZWRPcHRpb25zIiwiYXNzZXJ0IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJvcHRpb25zIiwidGltZXJEZWxheSIsInRpbWVySW50ZXJ2YWwiLCJhcmlhT3JpZW50YXRpb24iLCJWRVJUSUNBTCIsIl9jYWxsYmFja1RpbWVyIiwiZGVsYXkiLCJpbnRlcnZhbCIsImluY3JlbWVudERvd25FbWl0dGVyIiwicGFyYW1ldGVycyIsInZhbHVlVHlwZSIsImRlY3JlbWVudERvd25FbWl0dGVyIiwic2V0UERPTUF0dHJpYnV0ZSIsImExMXkiLCJudW1iZXJTcGlubmVyUm9sZURlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkiLCJkb3duQ2FsbGJhY2siLCJydW5uaW5nVGltZXJDYWxsYmFja0V2ZW50IiwiYWNjZXNzaWJsZUlucHV0TGlzdGVuZXIiLCJrZXlkb3duIiwiZXZlbnQiLCJlbmFibGVkUHJvcGVydHkiLCJnZXQiLCJpc1JhbmdlS2V5IiwiZG9tRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIm1ldGFLZXkiLCJpc1J1bm5pbmciLCJfYWNjZXNzaWJsZU51bWJlclNwaW5uZXJIYW5kbGVLZXlEb3duIiwiYmluZCIsImFkZENhbGxiYWNrIiwic3RhcnQiLCJrZXl1cCIsImtleSIsImdldEV2ZW50Q29kZSIsIl9lbWl0S2V5U3RhdGUiLCJzdG9wIiwicmVtb3ZlQ2FsbGJhY2siLCJoYW5kbGVLZXlVcCIsImJsdXIiLCJoYW5kbGVCbHVyIiwiaW5wdXQiLCJoYW5kbGVJbnB1dCIsImNoYW5nZSIsImhhbmRsZUNoYW5nZSIsImFkZElucHV0TGlzdGVuZXIiLCJfZGlzcG9zZUFjY2Vzc2libGVOdW1iZXJTcGlubmVyIiwiZGlzcG9zZSIsInJlbW92ZUlucHV0TGlzdGVuZXIiLCJoYW5kbGVLZXlEb3duIiwiaXNEb3duIiwiRXZlbnQiLCJpc0FueUtleUV2ZW50IiwiS0VZX1VQX0FSUk9XIiwiS0VZX1JJR0hUX0FSUk9XIiwiZW1pdCIsIktFWV9ET1dOX0FSUk9XIiwiS0VZX0xFRlRfQVJST1ciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkFjY2Vzc2libGVOdW1iZXJTcGlubmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgdHJhaXQgZm9yIHN1YnR5cGVzIG9mIE5vZGUsIHVzZWQgdG8gbWFrZSB0aGUgTm9kZSBiZWhhdmUgbGlrZSBhICdudW1iZXInIGlucHV0IHdpdGggYXNzaXN0aXZlIHRlY2hub2xvZ3kuXHJcbiAqIEFuIGFjY2Vzc2libGUgbnVtYmVyIHNwaW5uZXIgYmVoYXZlcyBsaWtlOlxyXG4gKlxyXG4gKiAtIEFycm93IGtleXMgaW5jcmVtZW50L2RlY3JlbWVudCB0aGUgdmFsdWUgYnkgYSBzcGVjaWZpZWQgc3RlcCBzaXplLlxyXG4gKiAtIFBhZ2UgVXAgYW5kIFBhZ2UgRG93biBpbmNyZW1lbnRzL2RlY3JlbWVudHMgdmFsdWUgYnkgYW4gYWx0ZXJuYXRpdmUgc3RlcCBzaXplLCB1c3VhbGx5IGxhcmdlciB0aGFuIGRlZmF1bHQuXHJcbiAqIC0gSG9tZSBrZXkgc2V0cyB2YWx1ZSB0byBpdHMgbWluaW11bS5cclxuICogLSBFbmQga2V5IHNldHMgdmFsdWUgdG8gaXRzIG1heGltdW0uXHJcbiAqXHJcbiAqIFRoaXMgbnVtYmVyIHNwaW5uZXIgaXMgZGlmZmVyZW50IHRoYW4gdHlwaWNhbCAnbnVtYmVyJyBpbnB1dHMgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdXBwb3J0IG51bWJlciBrZXkgY29udHJvbC4gSXRcclxuICogd2FzIGRldGVybWluZWQgdGhhdCBhbiBpbnB1dCBvZiB0eXBlIHJhbmdlIGlzIHRoZSBiZXN0IG1hdGNoIGZvciBhIFBoRVQgTnVtYmVyIFNwaW5uZXIsIHdpdGggYSBjdXN0b20gcm9sZVxyXG4gKiBkZXNjcmlwdGlvbiB3aXRoIGFyaWEtcm9sZWRlc2NyaXB0aW9uLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3N1bi9pc3N1ZXMvNDk3IGZvciBoaXN0b3J5IG9uIHRoaXNcclxuICogZGVjaXNpb24uXHJcbiAqXHJcbiAqIFRoaXMgdHJhaXQgbWl4ZXMgaW4gYSBcInBhcmVudFwiIG1peGluIHRvIGhhbmRsZSBnZW5lcmFsIFwidmFsdWVcIiBmb3JtYXR0aW5nIGFuZCBhcmlhLXZhbHVldGV4dCB1cGRhdGluZywgc2VlXHJcbiAqIEFjY2Vzc2libGVWYWx1ZUhhbmRsZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgQmFybG93IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBDYWxsYmFja1RpbWVyLCB7IENhbGxiYWNrVGltZXJDYWxsYmFjayB9IGZyb20gJy4uLy4uLy4uL2F4b24vanMvQ2FsbGJhY2tUaW1lci5qcyc7XHJcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uLy4uLy4uL2F4b24vanMvRW1pdHRlci5qcyc7XHJcbmltcG9ydCB2YWxpZGF0ZSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL3ZhbGlkYXRlLmpzJztcclxuaW1wb3J0IGFzc2VydEhhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2Fzc2VydEhhc1Byb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgQ29uc3RydWN0b3IgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL0NvbnN0cnVjdG9yLmpzJztcclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBPcmllbnRhdGlvbiBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvT3JpZW50YXRpb24uanMnO1xyXG5pbXBvcnQgeyBLZXlib2FyZFV0aWxzLCBOb2RlLCBTY2VuZXJ5RXZlbnQsIFRJbnB1dExpc3RlbmVyIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuLi9zdW4uanMnO1xyXG5pbXBvcnQgU3VuU3RyaW5ncyBmcm9tICcuLi9TdW5TdHJpbmdzLmpzJztcclxuaW1wb3J0IEFjY2Vzc2libGVWYWx1ZUhhbmRsZXIsIHsgQWNjZXNzaWJsZVZhbHVlSGFuZGxlck9wdGlvbnMgfSBmcm9tICcuL0FjY2Vzc2libGVWYWx1ZUhhbmRsZXIuanMnO1xyXG5pbXBvcnQgVEVtaXR0ZXIgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9URW1pdHRlci5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHRpbWVyRGVsYXk/OiBudW1iZXI7XHJcbiAgdGltZXJJbnRlcnZhbD86IG51bWJlcjtcclxufTtcclxuXHJcbnR5cGUgQWNjZXNzaWJsZU51bWJlclNwaW5uZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBBY2Nlc3NpYmxlVmFsdWVIYW5kbGVyT3B0aW9ucztcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gVHlwZVxyXG4gKiBAcGFyYW0gb3B0aW9uc0FyZ1Bvc2l0aW9uIC0gemVyby1pbmRleGVkIG51bWJlciB0aGF0IHRoZSBvcHRpb25zIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGF0XHJcbiAqL1xyXG5jb25zdCBBY2Nlc3NpYmxlTnVtYmVyU3Bpbm5lciA9IDxTdXBlclR5cGUgZXh0ZW5kcyBDb25zdHJ1Y3RvcjxOb2RlPj4oIFR5cGU6IFN1cGVyVHlwZSwgb3B0aW9uc0FyZ1Bvc2l0aW9uOiBudW1iZXIgKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xyXG5cclxuICByZXR1cm4gY2xhc3MgQWNjZXNzaWJsZU51bWJlclNwaW5uZXIgZXh0ZW5kcyBBY2Nlc3NpYmxlVmFsdWVIYW5kbGVyKCBUeXBlLCBvcHRpb25zQXJnUG9zaXRpb24gKSB7XHJcblxyXG4gICAgLy8gTWFuYWdlcyB0aW1pbmcgbXVzdCBiZSBkaXNwb3NlZFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2FsbGJhY2tUaW1lcjogQ2FsbGJhY2tUaW1lcjtcclxuXHJcbiAgICAvLyBlbWl0cyBldmVudHMgd2hlbiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBhY3Rpb25zIG9jY3VyLCBidXQgb25seSBmb3IgY2hhbmdlc1xyXG4gICAgLy8gb2Yga2V5Ym9hcmRTdGVwIGFuZCBzaGlmdEtleWJvYXJkU3RlcCAobm90IHBhZ2VLZXlib2FyZFN0ZXApXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgaW5jcmVtZW50RG93bkVtaXR0ZXI6IFRFbWl0dGVyPFsgYm9vbGVhbiBdPjtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBkZWNyZW1lbnREb3duRW1pdHRlcjogVEVtaXR0ZXI8WyBib29sZWFuIF0+O1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rpc3Bvc2VBY2Nlc3NpYmxlTnVtYmVyU3Bpbm5lcjogKCkgPT4gdm9pZDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoIC4uLmFyZ3M6IEludGVudGlvbmFsQW55W10gKSB7XHJcblxyXG4gICAgICBjb25zdCBwcm92aWRlZE9wdGlvbnMgPSBhcmdzWyBvcHRpb25zQXJnUG9zaXRpb24gXSBhcyBBY2Nlc3NpYmxlVmFsdWVIYW5kbGVyT3B0aW9ucztcclxuXHJcbiAgICAgIGFzc2VydCAmJiBwcm92aWRlZE9wdGlvbnMgJiYgYXNzZXJ0KCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoIHByb3ZpZGVkT3B0aW9ucyApID09PSBPYmplY3QucHJvdG90eXBlLFxyXG4gICAgICAgICdFeHRyYSBwcm90b3R5cGUgb24gQWNjZXNzaWJsZVNsaWRlciBvcHRpb25zIG9iamVjdCBpcyBhIGNvZGUgc21lbGwgKG9yIHByb2JhYmx5IGEgYnVnKScgKTtcclxuXHJcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QWNjZXNzaWJsZU51bWJlclNwaW5uZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgQWNjZXNzaWJsZVZhbHVlSGFuZGxlck9wdGlvbnM+KCkoIHtcclxuICAgICAgICB0aW1lckRlbGF5OiA0MDAsIC8vIHN0YXJ0IHRvIGZpcmUgY29udGludW91c2x5IGFmdGVyIHByZXNzaW5nIGZvciB0aGlzIGxvbmcgKG1pbGxpc2Vjb25kcylcclxuICAgICAgICB0aW1lckludGVydmFsOiAxMDAsIC8vIGZpcmUgY29udGludW91c2x5IGF0IHRoaXMgZnJlcXVlbmN5IChtaWxsaXNlY29uZHMpLFxyXG5cclxuICAgICAgICBhcmlhT3JpZW50YXRpb246IE9yaWVudGF0aW9uLlZFUlRJQ0FMIC8vIGJ5IGRlZmF1bHQsIG51bWJlciBzcGlubmVycyBzaG91bGQgYmUgb3JpZW50ZWQgdmVydGljYWxseVxyXG4gICAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAgIGFyZ3NbIG9wdGlvbnNBcmdQb3NpdGlvbiBdID0gb3B0aW9ucztcclxuXHJcbiAgICAgIHN1cGVyKCAuLi5hcmdzICk7XHJcblxyXG4gICAgICAvLyBtZW1iZXJzIG9mIHRoZSBOb2RlIEFQSSB0aGF0IGFyZSB1c2VkIGJ5IHRoaXMgdHJhaXRcclxuICAgICAgYXNzZXJ0SGFzUHJvcGVydGllcyggdGhpcywgWyAnYWRkSW5wdXRMaXN0ZW5lcicgXSApO1xyXG5cclxuICAgICAgdGhpcy5fY2FsbGJhY2tUaW1lciA9IG5ldyBDYWxsYmFja1RpbWVyKCB7XHJcbiAgICAgICAgZGVsYXk6IG9wdGlvbnMudGltZXJEZWxheSxcclxuICAgICAgICBpbnRlcnZhbDogb3B0aW9ucy50aW1lckludGVydmFsXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIHRoaXMuaW5jcmVtZW50RG93bkVtaXR0ZXIgPSBuZXcgRW1pdHRlciggeyBwYXJhbWV0ZXJzOiBbIHsgdmFsdWVUeXBlOiAnYm9vbGVhbicgfSBdIH0gKTtcclxuICAgICAgdGhpcy5kZWNyZW1lbnREb3duRW1pdHRlciA9IG5ldyBFbWl0dGVyKCB7IHBhcmFtZXRlcnM6IFsgeyB2YWx1ZVR5cGU6ICdib29sZWFuJyB9IF0gfSApO1xyXG5cclxuICAgICAgdGhpcy5zZXRQRE9NQXR0cmlidXRlKCAnYXJpYS1yb2xlZGVzY3JpcHRpb24nLCBTdW5TdHJpbmdzLmExMXkubnVtYmVyU3Bpbm5lclJvbGVEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5ICk7XHJcblxyXG4gICAgICAvLyBhIGNhbGxiYWNrIHRoYXQgaXMgYWRkZWQgYW5kIHJlbW92ZWQgZnJvbSB0aGUgdGltZXIgZGVwZW5kaW5nIG9uIGtleXN0YXRlXHJcbiAgICAgIGxldCBkb3duQ2FsbGJhY2s6IENhbGxiYWNrVGltZXJDYWxsYmFjayB8IG51bGwgPSBudWxsO1xyXG4gICAgICBsZXQgcnVubmluZ1RpbWVyQ2FsbGJhY2tFdmVudDogRXZlbnQgfCBudWxsID0gbnVsbDsgLy8ge0V2ZW50fG51bGx9XHJcblxyXG4gICAgICAvLyBoYW5kbGUgYWxsIGFjY2Vzc2libGUgZXZlbnQgaW5wdXRcclxuICAgICAgY29uc3QgYWNjZXNzaWJsZUlucHV0TGlzdGVuZXI6IFRJbnB1dExpc3RlbmVyID0ge1xyXG4gICAgICAgIGtleWRvd246IGV2ZW50ID0+IHtcclxuICAgICAgICAgIGlmICggdGhpcy5lbmFibGVkUHJvcGVydHkuZ2V0KCkgKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBjaGVjayBmb3IgcmVsZXZhbnQga2V5cyBoZXJlXHJcbiAgICAgICAgICAgIGlmICggS2V5Ym9hcmRVdGlscy5pc1JhbmdlS2V5KCBldmVudC5kb21FdmVudCApICkge1xyXG5cclxuICAgICAgICAgICAgICBjb25zdCBkb21FdmVudCA9IGV2ZW50LmRvbUV2ZW50ITtcclxuXHJcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIG1ldGEga2V5IGlzIGRvd24gd2Ugd2lsbCBub3QgZXZlbiBjYWxsIHRoZSBrZXlkb3duIGxpc3RlbmVyIG9mIHRoZSBzdXBlcnR5cGUsIHNvIHdlIG5lZWRcclxuICAgICAgICAgICAgICAvLyB0byBiZSBzdXJlIHRoYXQgZGVmYXVsdCBiZWhhdmlvciBpcyBwcmV2ZW50ZWQgc28gd2UgZG9uJ3QgcmVjZWl2ZSBgaW5wdXRgIGFuZCBgY2hhbmdlYCBldmVudHMuXHJcbiAgICAgICAgICAgICAgLy8gU2VlIEFjY2Vzc2libGVWYWx1ZUhhbmRsZXIuaGFuZGxlSW5wdXQgZm9yIGluZm9ybWF0aW9uIG9uIHRoZXNlIGV2ZW50cyBhbmQgd2h5IHdlIGRvbid0IHdhbnRcclxuICAgICAgICAgICAgICAvLyB0byBjaGFuZ2UgaW4gcmVzcG9uc2UgdG8gdGhlbS5cclxuICAgICAgICAgICAgICBkb21FdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBtZXRhIGtleSBpcyBkb3duIE1hYyB3aWxsIG5vdCBzZW5kIGtleXVwIGV2ZW50cyBzbyBkbyBub3QgY2hhbmdlIHZhbHVlcyBvciBhZGQgdGltZXJcclxuICAgICAgICAgICAgICAvLyBsaXN0ZW5lcnMgYmVjYXVzZSB0aGV5IHdpbGwgbmV2ZXIgYmUgcmVtb3ZlZCBzaW5jZSB3ZSBmYWlsIHRvIGdldCBhIGtleXVwIGV2ZW50LiBTZWVcclxuICAgICAgICAgICAgICBpZiAoICFkb21FdmVudC5tZXRhS2V5ICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhdGhpcy5fY2FsbGJhY2tUaW1lci5pc1J1bm5pbmcoKSApIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5fYWNjZXNzaWJsZU51bWJlclNwaW5uZXJIYW5kbGVLZXlEb3duKCBldmVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgZG93bkNhbGxiYWNrID0gdGhpcy5fYWNjZXNzaWJsZU51bWJlclNwaW5uZXJIYW5kbGVLZXlEb3duLmJpbmQoIHRoaXMsIGV2ZW50ICk7XHJcbiAgICAgICAgICAgICAgICAgIHJ1bm5pbmdUaW1lckNhbGxiYWNrRXZlbnQgPSBkb21FdmVudDtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tUaW1lci5hZGRDYWxsYmFjayggZG93bkNhbGxiYWNrICk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrVGltZXIuc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGtleXVwOiBldmVudCA9PiB7XHJcblxyXG4gICAgICAgICAgY29uc3Qga2V5ID0gS2V5Ym9hcmRVdGlscy5nZXRFdmVudENvZGUoIGV2ZW50LmRvbUV2ZW50ICk7XHJcblxyXG4gICAgICAgICAgaWYgKCBLZXlib2FyZFV0aWxzLmlzUmFuZ2VLZXkoIGV2ZW50LmRvbUV2ZW50ICkgKSB7XHJcbiAgICAgICAgICAgIGlmICggcnVubmluZ1RpbWVyQ2FsbGJhY2tFdmVudCAmJiBrZXkgPT09IEtleWJvYXJkVXRpbHMuZ2V0RXZlbnRDb2RlKCBydW5uaW5nVGltZXJDYWxsYmFja0V2ZW50ICkgKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5fZW1pdEtleVN0YXRlKCBldmVudC5kb21FdmVudCEsIGZhbHNlICk7XHJcbiAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tUaW1lci5zdG9wKCBmYWxzZSApO1xyXG4gICAgICAgICAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGRvd25DYWxsYmFjayApO1xyXG4gICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrVGltZXIucmVtb3ZlQ2FsbGJhY2soIGRvd25DYWxsYmFjayEgKTtcclxuICAgICAgICAgICAgICBkb3duQ2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgICAgICAgIHJ1bm5pbmdUaW1lckNhbGxiYWNrRXZlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUtleVVwKCBldmVudCApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmx1cjogZXZlbnQgPT4ge1xyXG5cclxuICAgICAgICAgIC8vIGlmIGEga2V5IGlzIGN1cnJlbnRseSBkb3duIHdoZW4gZm9jdXMgbGVhdmVzIHRoZSBzcGlubmVyLCBzdG9wIGNhbGxiYWNrcyBhbmQgZW1pdCB0aGF0IHRoZVxyXG4gICAgICAgICAgLy8ga2V5IGlzIHVwXHJcbiAgICAgICAgICBpZiAoIGRvd25DYWxsYmFjayApIHtcclxuICAgICAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggcnVubmluZ1RpbWVyQ2FsbGJhY2tFdmVudCAhPT0gbnVsbCwgJ2tleSBzaG91bGQgYmUgZG93biBpZiBydW5uaW5nIGRvd25DYWxsYmFjaycgKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2VtaXRLZXlTdGF0ZSggcnVubmluZ1RpbWVyQ2FsbGJhY2tFdmVudCEsIGZhbHNlICk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrVGltZXIuc3RvcCggZmFsc2UgKTtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tUaW1lci5yZW1vdmVDYWxsYmFjayggZG93bkNhbGxiYWNrICk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpcy5oYW5kbGVCbHVyKCBldmVudCApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5wdXQ6IHRoaXMuaGFuZGxlSW5wdXQuYmluZCggdGhpcyApLFxyXG4gICAgICAgIGNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCggdGhpcyApXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggYWNjZXNzaWJsZUlucHV0TGlzdGVuZXIgKTtcclxuXHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2VBY2Nlc3NpYmxlTnVtYmVyU3Bpbm5lciA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jYWxsYmFja1RpbWVyLmRpc3Bvc2UoKTtcclxuXHJcbiAgICAgICAgLy8gZW1pdHRlcnMgb3duZWQgYnkgdGhpcyBpbnN0YW5jZSwgY2FuIGJlIGRpc3Bvc2VkIGhlcmVcclxuICAgICAgICB0aGlzLmluY3JlbWVudERvd25FbWl0dGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLmRlY3JlbWVudERvd25FbWl0dGVyLmRpc3Bvc2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW1vdmVJbnB1dExpc3RlbmVyKCBhY2Nlc3NpYmxlSW5wdXRMaXN0ZW5lciApO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBrZXlkb3duIGV2ZW50IGFuZCBlbWl0IGV2ZW50cyByZWxhdGVkIHRvIHRoZSB1c2VyIGludGVyYWN0aW9uLiBJZGVhbGx5LCB0aGlzIHdvdWxkXHJcbiAgICAgKiBvdmVycmlkZSBBY2Nlc3NpYmxlVmFsdWVIYW5kbGVyLmhhbmRsZUtleURvd24sIGJ1dCBvdmVycmlkaW5nIGlzIG5vdCBzdXBwb3J0ZWQgd2l0aCBQaEVUIFRyYWl0IHBhdHRlcm4uXHJcbiAgICAgKi9cclxuXHJcbiAgICBwcml2YXRlIF9hY2Nlc3NpYmxlTnVtYmVyU3Bpbm5lckhhbmRsZUtleURvd24oIGV2ZW50OiBTY2VuZXJ5RXZlbnQ8S2V5Ym9hcmRFdmVudD4gKTogdm9pZCB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGV2ZW50LmRvbUV2ZW50LCAnbXVzdCBoYXZlIGEgZG9tRXZlbnQnICk7XHJcbiAgICAgIHRoaXMuaGFuZGxlS2V5RG93biggZXZlbnQgKTtcclxuICAgICAgdGhpcy5fZW1pdEtleVN0YXRlKCBldmVudC5kb21FdmVudCEsIHRydWUgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVtaXQgZXZlbnRzIHJlbGF0ZWQgdG8gdGhlIGtleXN0YXRlIG9mIHRoZSBzcGlubmVyLiBUeXBpY2FsbHkgdXNlZCB0byBzdHlsZSB0aGUgc3Bpbm5lciBkdXJpbmcga2V5Ym9hcmRcclxuICAgICAqIGludGVyYWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkb21FdmVudCAtIHRoZSBjb2RlIG9mIHRoZSBrZXkgY2hhbmdpbmcgc3RhdGVcclxuICAgICAqIEBwYXJhbSBpc0Rvd24gLSB3aGV0aGVyIG9yIG5vdCBldmVudCB3YXMgdHJpZ2dlcmVkIGZyb20gZG93biBvciB1cCBrZXlzXHJcbiAgICAgKi9cclxuXHJcbiAgICBwcml2YXRlIF9lbWl0S2V5U3RhdGUoIGRvbUV2ZW50OiBFdmVudCwgaXNEb3duOiBib29sZWFuICk6IHZvaWQge1xyXG4gICAgICB2YWxpZGF0ZSggZG9tRXZlbnQsIHsgdmFsdWVUeXBlOiBFdmVudCB9ICk7XHJcbiAgICAgIGlmICggS2V5Ym9hcmRVdGlscy5pc0FueUtleUV2ZW50KCBkb21FdmVudCwgWyBLZXlib2FyZFV0aWxzLktFWV9VUF9BUlJPVywgS2V5Ym9hcmRVdGlscy5LRVlfUklHSFRfQVJST1cgXSApICkge1xyXG4gICAgICAgIHRoaXMuaW5jcmVtZW50RG93bkVtaXR0ZXIuZW1pdCggaXNEb3duICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIEtleWJvYXJkVXRpbHMuaXNBbnlLZXlFdmVudCggZG9tRXZlbnQsIFsgS2V5Ym9hcmRVdGlscy5LRVlfRE9XTl9BUlJPVywgS2V5Ym9hcmRVdGlscy5LRVlfTEVGVF9BUlJPVyBdICkgKSB7XHJcbiAgICAgICAgdGhpcy5kZWNyZW1lbnREb3duRW1pdHRlci5lbWl0KCBpc0Rvd24gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgICB0aGlzLl9kaXNwb3NlQWNjZXNzaWJsZU51bWJlclNwaW5uZXIoKTtcclxuXHJcbiAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuc3VuLnJlZ2lzdGVyKCAnQWNjZXNzaWJsZU51bWJlclNwaW5uZXInLCBBY2Nlc3NpYmxlTnVtYmVyU3Bpbm5lciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWNjZXNzaWJsZU51bWJlclNwaW5uZXI7XHJcbmV4cG9ydCB0eXBlIHsgQWNjZXNzaWJsZU51bWJlclNwaW5uZXJPcHRpb25zIH07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBaUMsbUNBQW1DO0FBQ3hGLE9BQU9DLE9BQU8sTUFBTSw2QkFBNkI7QUFDakQsT0FBT0MsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxtQkFBbUIsTUFBTSw4Q0FBOEM7QUFHOUUsT0FBT0MsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxXQUFXLE1BQU0sc0NBQXNDO0FBQzlELFNBQVNDLGFBQWEsUUFBNEMsZ0NBQWdDO0FBQ2xHLE9BQU9DLEdBQUcsTUFBTSxXQUFXO0FBQzNCLE9BQU9DLFVBQVUsTUFBTSxrQkFBa0I7QUFDekMsT0FBT0Msc0JBQXNCLE1BQXlDLDZCQUE2QjtBQVVuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLHVCQUF1QixHQUFHQSxDQUF1Q0MsSUFBZSxFQUFFQyxrQkFBMEIsS0FBTTtFQUFF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