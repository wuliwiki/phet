// Copyright 2022, University of Colorado Boulder

/**
 * Demo for various momentary buttons.
 *
 * @author various contributors
 */

import Checkbox from '../../Checkbox.js';
import RoundMomentaryButton from '../../buttons/RoundMomentaryButton.js';
import RectangularMomentaryButton from '../../buttons/RectangularMomentaryButton.js';
import Property from '../../../../axon/js/Property.js';
import { Font, HBox, Text, VBox } from '../../../../scenery/js/imports.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
export default function demoMomentaryButtons(layoutBounds) {
  // For enabling/disabling all buttons
  const buttonsEnabledProperty = new Property(true);
  const buttonsEnabledCheckbox = new Checkbox(buttonsEnabledProperty, new Text('buttons enabled', {
    font: new Font({
      size: 20
    })
  }), {
    tandem: Tandem.OPT_OUT
  });

  // round
  const roundMomentaryProperty = new Property(false);
  roundMomentaryProperty.lazyLink(value => console.log(`roundMomentaryProperty.value = ${value}`));
  const roundMomentaryButton = new RoundMomentaryButton(roundMomentaryProperty, false, true, {
    baseColor: '#D76958',
    enabledProperty: buttonsEnabledProperty,
    tandem: Tandem.OPT_OUT
  });

  // rectangular
  const rectangularMomentaryProperty = new Property(false);
  rectangularMomentaryProperty.lazyLink(value => console.log(`rectangularMomentaryProperty.value = ${value}`));
  const rectangularMomentaryButton = new RectangularMomentaryButton(rectangularMomentaryProperty, false, true, {
    baseColor: '#724C35',
    enabledProperty: buttonsEnabledProperty,
    size: new Dimension2(50, 40),
    tandem: Tandem.OPT_OUT
  });
  return new VBox({
    spacing: 35,
    children: [new HBox({
      children: [roundMomentaryButton, rectangularMomentaryButton],
      spacing: 15
    }), buttonsEnabledCheckbox],
    center: layoutBounds.center
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGVja2JveCIsIlJvdW5kTW9tZW50YXJ5QnV0dG9uIiwiUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b24iLCJQcm9wZXJ0eSIsIkZvbnQiLCJIQm94IiwiVGV4dCIsIlZCb3giLCJUYW5kZW0iLCJEaW1lbnNpb24yIiwiZGVtb01vbWVudGFyeUJ1dHRvbnMiLCJsYXlvdXRCb3VuZHMiLCJidXR0b25zRW5hYmxlZFByb3BlcnR5IiwiYnV0dG9uc0VuYWJsZWRDaGVja2JveCIsImZvbnQiLCJzaXplIiwidGFuZGVtIiwiT1BUX09VVCIsInJvdW5kTW9tZW50YXJ5UHJvcGVydHkiLCJsYXp5TGluayIsInZhbHVlIiwiY29uc29sZSIsImxvZyIsInJvdW5kTW9tZW50YXJ5QnV0dG9uIiwiYmFzZUNvbG9yIiwiZW5hYmxlZFByb3BlcnR5IiwicmVjdGFuZ3VsYXJNb21lbnRhcnlQcm9wZXJ0eSIsInJlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uIiwic3BhY2luZyIsImNoaWxkcmVuIiwiY2VudGVyIl0sInNvdXJjZXMiOlsiZGVtb01vbWVudGFyeUJ1dHRvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERlbW8gZm9yIHZhcmlvdXMgbW9tZW50YXJ5IGJ1dHRvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgdmFyaW91cyBjb250cmlidXRvcnNcclxuICovXHJcblxyXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vLi4vQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgUm91bmRNb21lbnRhcnlCdXR0b24gZnJvbSAnLi4vLi4vYnV0dG9ucy9Sb3VuZE1vbWVudGFyeUJ1dHRvbi5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbiBmcm9tICcuLi8uLi9idXR0b25zL1JlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IEZvbnQsIEhCb3gsIE5vZGUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZW1vTW9tZW50YXJ5QnV0dG9ucyggbGF5b3V0Qm91bmRzOiBCb3VuZHMyICk6IE5vZGUge1xyXG5cclxuICAvLyBGb3IgZW5hYmxpbmcvZGlzYWJsaW5nIGFsbCBidXR0b25zXHJcbiAgY29uc3QgYnV0dG9uc0VuYWJsZWRQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggdHJ1ZSApO1xyXG4gIGNvbnN0IGJ1dHRvbnNFbmFibGVkQ2hlY2tib3ggPSBuZXcgQ2hlY2tib3goIGJ1dHRvbnNFbmFibGVkUHJvcGVydHksIG5ldyBUZXh0KCAnYnV0dG9ucyBlbmFibGVkJywge1xyXG4gICAgZm9udDogbmV3IEZvbnQoIHsgc2l6ZTogMjAgfSApXHJcbiAgfSApLCB7XHJcbiAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXHJcbiAgfSApO1xyXG5cclxuICAvLyByb3VuZFxyXG4gIGNvbnN0IHJvdW5kTW9tZW50YXJ5UHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGZhbHNlICk7XHJcbiAgcm91bmRNb21lbnRhcnlQcm9wZXJ0eS5sYXp5TGluayggdmFsdWUgPT4gY29uc29sZS5sb2coIGByb3VuZE1vbWVudGFyeVByb3BlcnR5LnZhbHVlID0gJHt2YWx1ZX1gICkgKTtcclxuICBjb25zdCByb3VuZE1vbWVudGFyeUJ1dHRvbiA9IG5ldyBSb3VuZE1vbWVudGFyeUJ1dHRvbiggcm91bmRNb21lbnRhcnlQcm9wZXJ0eSwgZmFsc2UsIHRydWUsIHtcclxuICAgIGJhc2VDb2xvcjogJyNENzY5NTgnLFxyXG4gICAgZW5hYmxlZFByb3BlcnR5OiBidXR0b25zRW5hYmxlZFByb3BlcnR5LFxyXG4gICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gIH0gKTtcclxuXHJcbiAgLy8gcmVjdGFuZ3VsYXJcclxuICBjb25zdCByZWN0YW5ndWxhck1vbWVudGFyeVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBmYWxzZSApO1xyXG4gIHJlY3Rhbmd1bGFyTW9tZW50YXJ5UHJvcGVydHkubGF6eUxpbmsoIHZhbHVlID0+IGNvbnNvbGUubG9nKCBgcmVjdGFuZ3VsYXJNb21lbnRhcnlQcm9wZXJ0eS52YWx1ZSA9ICR7dmFsdWV9YCApICk7XHJcbiAgY29uc3QgcmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b24gPSBuZXcgUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b24oIHJlY3Rhbmd1bGFyTW9tZW50YXJ5UHJvcGVydHksIGZhbHNlLCB0cnVlLCB7XHJcbiAgICBiYXNlQ29sb3I6ICcjNzI0QzM1JyxcclxuICAgIGVuYWJsZWRQcm9wZXJ0eTogYnV0dG9uc0VuYWJsZWRQcm9wZXJ0eSxcclxuICAgIHNpemU6IG5ldyBEaW1lbnNpb24yKCA1MCwgNDAgKSxcclxuICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICB9ICk7XHJcblxyXG4gIHJldHVybiBuZXcgVkJveCgge1xyXG4gICAgc3BhY2luZzogMzUsXHJcbiAgICBjaGlsZHJlbjogW1xyXG4gICAgICBuZXcgSEJveCgge1xyXG4gICAgICAgIGNoaWxkcmVuOiBbIHJvdW5kTW9tZW50YXJ5QnV0dG9uLCByZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbiBdLFxyXG4gICAgICAgIHNwYWNpbmc6IDE1XHJcbiAgICAgIH0gKSxcclxuICAgICAgYnV0dG9uc0VuYWJsZWRDaGVja2JveFxyXG4gICAgXSxcclxuICAgIGNlbnRlcjogbGF5b3V0Qm91bmRzLmNlbnRlclxyXG4gIH0gKTtcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sbUJBQW1CO0FBQ3hDLE9BQU9DLG9CQUFvQixNQUFNLHVDQUF1QztBQUN4RSxPQUFPQywwQkFBMEIsTUFBTSw2Q0FBNkM7QUFFcEYsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBUUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ2hGLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsVUFBVSxNQUFNLGtDQUFrQztBQUV6RCxlQUFlLFNBQVNDLG9CQUFvQkEsQ0FBRUMsWUFBcUIsRUFBUztFQUUxRTtFQUNBLE1BQU1DLHNCQUFzQixHQUFHLElBQUlULFFBQVEsQ0FBRSxJQUFLLENBQUM7RUFDbkQsTUFBTVUsc0JBQXNCLEdBQUcsSUFBSWIsUUFBUSxDQUFFWSxzQkFBc0IsRUFBRSxJQUFJTixJQUFJLENBQUUsaUJBQWlCLEVBQUU7SUFDaEdRLElBQUksRUFBRSxJQUFJVixJQUFJLENBQUU7TUFBRVcsSUFBSSxFQUFFO0lBQUcsQ0FBRTtFQUMvQixDQUFFLENBQUMsRUFBRTtJQUNIQyxNQUFNLEVBQUVSLE1BQU0sQ0FBQ1M7RUFDakIsQ0FBRSxDQUFDOztFQUVIO0VBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsSUFBSWYsUUFBUSxDQUFFLEtBQU0sQ0FBQztFQUNwRGUsc0JBQXNCLENBQUNDLFFBQVEsQ0FBRUMsS0FBSyxJQUFJQyxPQUFPLENBQUNDLEdBQUcsQ0FBRyxrQ0FBaUNGLEtBQU0sRUFBRSxDQUFFLENBQUM7RUFDcEcsTUFBTUcsb0JBQW9CLEdBQUcsSUFBSXRCLG9CQUFvQixDQUFFaUIsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtJQUMxRk0sU0FBUyxFQUFFLFNBQVM7SUFDcEJDLGVBQWUsRUFBRWIsc0JBQXNCO0lBQ3ZDSSxNQUFNLEVBQUVSLE1BQU0sQ0FBQ1M7RUFDakIsQ0FBRSxDQUFDOztFQUVIO0VBQ0EsTUFBTVMsNEJBQTRCLEdBQUcsSUFBSXZCLFFBQVEsQ0FBRSxLQUFNLENBQUM7RUFDMUR1Qiw0QkFBNEIsQ0FBQ1AsUUFBUSxDQUFFQyxLQUFLLElBQUlDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFHLHdDQUF1Q0YsS0FBTSxFQUFFLENBQUUsQ0FBQztFQUNoSCxNQUFNTywwQkFBMEIsR0FBRyxJQUFJekIsMEJBQTBCLENBQUV3Qiw0QkFBNEIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0lBQzVHRixTQUFTLEVBQUUsU0FBUztJQUNwQkMsZUFBZSxFQUFFYixzQkFBc0I7SUFDdkNHLElBQUksRUFBRSxJQUFJTixVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztJQUM5Qk8sTUFBTSxFQUFFUixNQUFNLENBQUNTO0VBQ2pCLENBQUUsQ0FBQztFQUVILE9BQU8sSUFBSVYsSUFBSSxDQUFFO0lBQ2ZxQixPQUFPLEVBQUUsRUFBRTtJQUNYQyxRQUFRLEVBQUUsQ0FDUixJQUFJeEIsSUFBSSxDQUFFO01BQ1J3QixRQUFRLEVBQUUsQ0FBRU4sb0JBQW9CLEVBQUVJLDBCQUEwQixDQUFFO01BQzlEQyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUMsRUFDSGYsc0JBQXNCLENBQ3ZCO0lBQ0RpQixNQUFNLEVBQUVuQixZQUFZLENBQUNtQjtFQUN2QixDQUFFLENBQUM7QUFDTCJ9