// Copyright 2022, University of Colorado Boulder

/**
 * Demo for NumberSpinner
 */

import NumberSpinner from '../../NumberSpinner.js';
import Checkbox from '../../Checkbox.js';
import Range from '../../../../dot/js/Range.js';
import Property from '../../../../axon/js/Property.js';
import { Font, Text, VBox } from '../../../../scenery/js/imports.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
export default function demoNumberSpinner(layoutBounds) {
  const valueProperty = new Property(0);
  const valueRangeProperty = new Property(new Range(-5, 5));
  const enabledProperty = new Property(true);

  // options for all spinners
  const spinnerOptions = {
    enabledProperty: enabledProperty,
    deltaValue: 0.1,
    touchAreaXDilation: 20,
    touchAreaYDilation: 10,
    mouseAreaXDilation: 10,
    mouseAreaYDilation: 5,
    numberDisplayOptions: {
      decimalPlaces: 1,
      align: 'center',
      xMargin: 10,
      yMargin: 3,
      minBackgroundWidth: 100,
      textOptions: {
        font: new Font({
          size: 28
        })
      }
    }
  };

  // Demonstrate each value of options.arrowsPosition
  const spinnerLeftRight = new NumberSpinner(valueProperty, valueRangeProperty, combineOptions({}, spinnerOptions, {
    arrowsPosition: 'leftRight',
    numberDisplayOptions: {
      valuePattern: '{{value}} bottles of beer on the wall'
    }
  }));
  const spinnerTopBottom = new NumberSpinner(valueProperty, valueRangeProperty, combineOptions({}, spinnerOptions, {
    arrowsPosition: 'topBottom',
    arrowsScale: 0.65
  }));
  const spinnerBothRight = new NumberSpinner(valueProperty, valueRangeProperty, combineOptions({}, spinnerOptions, {
    arrowsPosition: 'bothRight',
    numberDisplayOptions: {
      yMargin: 10,
      align: 'right'
    }
  }));
  const spinnerBothBottom = new NumberSpinner(valueProperty, valueRangeProperty, combineOptions({}, spinnerOptions, {
    arrowsPosition: 'bothBottom',
    numberDisplayOptions: {
      backgroundFill: 'pink',
      backgroundStroke: 'red',
      backgroundLineWidth: 3,
      align: 'left'
    },
    arrowButtonFill: 'lightblue',
    arrowButtonStroke: 'blue',
    arrowButtonLineWidth: 0.2
  }));
  const enabledCheckbox = new Checkbox(enabledProperty, new Text('enabled', {
    font: new Font({
      size: 20
    })
  }));
  return new VBox({
    children: [spinnerTopBottom, spinnerBothRight, spinnerBothBottom, spinnerLeftRight, enabledCheckbox],
    spacing: 40,
    center: layoutBounds.center
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJTcGlubmVyIiwiQ2hlY2tib3giLCJSYW5nZSIsIlByb3BlcnR5IiwiRm9udCIsIlRleHQiLCJWQm94IiwiY29tYmluZU9wdGlvbnMiLCJkZW1vTnVtYmVyU3Bpbm5lciIsImxheW91dEJvdW5kcyIsInZhbHVlUHJvcGVydHkiLCJ2YWx1ZVJhbmdlUHJvcGVydHkiLCJlbmFibGVkUHJvcGVydHkiLCJzcGlubmVyT3B0aW9ucyIsImRlbHRhVmFsdWUiLCJ0b3VjaEFyZWFYRGlsYXRpb24iLCJ0b3VjaEFyZWFZRGlsYXRpb24iLCJtb3VzZUFyZWFYRGlsYXRpb24iLCJtb3VzZUFyZWFZRGlsYXRpb24iLCJudW1iZXJEaXNwbGF5T3B0aW9ucyIsImRlY2ltYWxQbGFjZXMiLCJhbGlnbiIsInhNYXJnaW4iLCJ5TWFyZ2luIiwibWluQmFja2dyb3VuZFdpZHRoIiwidGV4dE9wdGlvbnMiLCJmb250Iiwic2l6ZSIsInNwaW5uZXJMZWZ0UmlnaHQiLCJhcnJvd3NQb3NpdGlvbiIsInZhbHVlUGF0dGVybiIsInNwaW5uZXJUb3BCb3R0b20iLCJhcnJvd3NTY2FsZSIsInNwaW5uZXJCb3RoUmlnaHQiLCJzcGlubmVyQm90aEJvdHRvbSIsImJhY2tncm91bmRGaWxsIiwiYmFja2dyb3VuZFN0cm9rZSIsImJhY2tncm91bmRMaW5lV2lkdGgiLCJhcnJvd0J1dHRvbkZpbGwiLCJhcnJvd0J1dHRvblN0cm9rZSIsImFycm93QnV0dG9uTGluZVdpZHRoIiwiZW5hYmxlZENoZWNrYm94IiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiY2VudGVyIl0sInNvdXJjZXMiOlsiZGVtb051bWJlclNwaW5uZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERlbW8gZm9yIE51bWJlclNwaW5uZXJcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyU3Bpbm5lciwgeyBOdW1iZXJTcGlubmVyT3B0aW9ucyB9IGZyb20gJy4uLy4uL051bWJlclNwaW5uZXIuanMnO1xyXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vLi4vQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IEZvbnQsIE5vZGUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVtb051bWJlclNwaW5uZXIoIGxheW91dEJvdW5kczogQm91bmRzMiApOiBOb2RlIHtcclxuXHJcbiAgY29uc3QgdmFsdWVQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggMCApO1xyXG4gIGNvbnN0IHZhbHVlUmFuZ2VQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggbmV3IFJhbmdlKCAtNSwgNSApICk7XHJcbiAgY29uc3QgZW5hYmxlZFByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCB0cnVlICk7XHJcblxyXG4gIC8vIG9wdGlvbnMgZm9yIGFsbCBzcGlubmVyc1xyXG4gIGNvbnN0IHNwaW5uZXJPcHRpb25zOiBOdW1iZXJTcGlubmVyT3B0aW9ucyA9IHtcclxuICAgIGVuYWJsZWRQcm9wZXJ0eTogZW5hYmxlZFByb3BlcnR5LFxyXG4gICAgZGVsdGFWYWx1ZTogMC4xLFxyXG4gICAgdG91Y2hBcmVhWERpbGF0aW9uOiAyMCxcclxuICAgIHRvdWNoQXJlYVlEaWxhdGlvbjogMTAsXHJcbiAgICBtb3VzZUFyZWFYRGlsYXRpb246IDEwLFxyXG4gICAgbW91c2VBcmVhWURpbGF0aW9uOiA1LFxyXG4gICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgZGVjaW1hbFBsYWNlczogMSxcclxuICAgICAgYWxpZ246ICdjZW50ZXInLFxyXG4gICAgICB4TWFyZ2luOiAxMCxcclxuICAgICAgeU1hcmdpbjogMyxcclxuICAgICAgbWluQmFja2dyb3VuZFdpZHRoOiAxMDAsXHJcbiAgICAgIHRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgZm9udDogbmV3IEZvbnQoIHsgc2l6ZTogMjggfSApXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBEZW1vbnN0cmF0ZSBlYWNoIHZhbHVlIG9mIG9wdGlvbnMuYXJyb3dzUG9zaXRpb25cclxuICBjb25zdCBzcGlubmVyTGVmdFJpZ2h0ID0gbmV3IE51bWJlclNwaW5uZXIoIHZhbHVlUHJvcGVydHksIHZhbHVlUmFuZ2VQcm9wZXJ0eSxcclxuICAgIGNvbWJpbmVPcHRpb25zPE51bWJlclNwaW5uZXJPcHRpb25zPigge30sIHNwaW5uZXJPcHRpb25zLCB7XHJcbiAgICAgIGFycm93c1Bvc2l0aW9uOiAnbGVmdFJpZ2h0JyxcclxuICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgICB2YWx1ZVBhdHRlcm46ICd7e3ZhbHVlfX0gYm90dGxlcyBvZiBiZWVyIG9uIHRoZSB3YWxsJ1xyXG4gICAgICB9XHJcbiAgICB9ICkgKTtcclxuXHJcbiAgY29uc3Qgc3Bpbm5lclRvcEJvdHRvbSA9IG5ldyBOdW1iZXJTcGlubmVyKCB2YWx1ZVByb3BlcnR5LCB2YWx1ZVJhbmdlUHJvcGVydHksXHJcbiAgICBjb21iaW5lT3B0aW9uczxOdW1iZXJTcGlubmVyT3B0aW9ucz4oIHt9LCBzcGlubmVyT3B0aW9ucywge1xyXG4gICAgICBhcnJvd3NQb3NpdGlvbjogJ3RvcEJvdHRvbScsXHJcbiAgICAgIGFycm93c1NjYWxlOiAwLjY1XHJcbiAgICB9ICkgKTtcclxuXHJcbiAgY29uc3Qgc3Bpbm5lckJvdGhSaWdodCA9IG5ldyBOdW1iZXJTcGlubmVyKCB2YWx1ZVByb3BlcnR5LCB2YWx1ZVJhbmdlUHJvcGVydHksXHJcbiAgICBjb21iaW5lT3B0aW9uczxOdW1iZXJTcGlubmVyT3B0aW9ucz4oIHt9LCBzcGlubmVyT3B0aW9ucywge1xyXG4gICAgICBhcnJvd3NQb3NpdGlvbjogJ2JvdGhSaWdodCcsXHJcbiAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgeU1hcmdpbjogMTAsXHJcbiAgICAgICAgYWxpZ246ICdyaWdodCdcclxuICAgICAgfVxyXG4gICAgfSApICk7XHJcblxyXG4gIGNvbnN0IHNwaW5uZXJCb3RoQm90dG9tID0gbmV3IE51bWJlclNwaW5uZXIoIHZhbHVlUHJvcGVydHksIHZhbHVlUmFuZ2VQcm9wZXJ0eSxcclxuICAgIGNvbWJpbmVPcHRpb25zPE51bWJlclNwaW5uZXJPcHRpb25zPigge30sIHNwaW5uZXJPcHRpb25zLCB7XHJcbiAgICAgIGFycm93c1Bvc2l0aW9uOiAnYm90aEJvdHRvbScsXHJcbiAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgYmFja2dyb3VuZEZpbGw6ICdwaW5rJyxcclxuICAgICAgICBiYWNrZ3JvdW5kU3Ryb2tlOiAncmVkJyxcclxuICAgICAgICBiYWNrZ3JvdW5kTGluZVdpZHRoOiAzLFxyXG4gICAgICAgIGFsaWduOiAnbGVmdCdcclxuICAgICAgfSxcclxuICAgICAgYXJyb3dCdXR0b25GaWxsOiAnbGlnaHRibHVlJyxcclxuICAgICAgYXJyb3dCdXR0b25TdHJva2U6ICdibHVlJyxcclxuICAgICAgYXJyb3dCdXR0b25MaW5lV2lkdGg6IDAuMlxyXG4gICAgfSApICk7XHJcblxyXG4gIGNvbnN0IGVuYWJsZWRDaGVja2JveCA9IG5ldyBDaGVja2JveCggZW5hYmxlZFByb3BlcnR5LCBuZXcgVGV4dCggJ2VuYWJsZWQnLCB7IGZvbnQ6IG5ldyBGb250KCB7IHNpemU6IDIwIH0gKSB9ICkgKTtcclxuXHJcbiAgcmV0dXJuIG5ldyBWQm94KCB7XHJcbiAgICBjaGlsZHJlbjogWyBzcGlubmVyVG9wQm90dG9tLCBzcGlubmVyQm90aFJpZ2h0LCBzcGlubmVyQm90aEJvdHRvbSwgc3Bpbm5lckxlZnRSaWdodCwgZW5hYmxlZENoZWNrYm94IF0sXHJcbiAgICBzcGFjaW5nOiA0MCxcclxuICAgIGNlbnRlcjogbGF5b3V0Qm91bmRzLmNlbnRlclxyXG4gIH0gKTtcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBZ0Msd0JBQXdCO0FBQzVFLE9BQU9DLFFBQVEsTUFBTSxtQkFBbUI7QUFFeEMsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELFNBQVNDLElBQUksRUFBUUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzFFLFNBQVNDLGNBQWMsUUFBUSx1Q0FBdUM7QUFFdEUsZUFBZSxTQUFTQyxpQkFBaUJBLENBQUVDLFlBQXFCLEVBQVM7RUFFdkUsTUFBTUMsYUFBYSxHQUFHLElBQUlQLFFBQVEsQ0FBRSxDQUFFLENBQUM7RUFDdkMsTUFBTVEsa0JBQWtCLEdBQUcsSUFBSVIsUUFBUSxDQUFFLElBQUlELEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFFLENBQUUsQ0FBQztFQUM3RCxNQUFNVSxlQUFlLEdBQUcsSUFBSVQsUUFBUSxDQUFFLElBQUssQ0FBQzs7RUFFNUM7RUFDQSxNQUFNVSxjQUFvQyxHQUFHO0lBQzNDRCxlQUFlLEVBQUVBLGVBQWU7SUFDaENFLFVBQVUsRUFBRSxHQUFHO0lBQ2ZDLGtCQUFrQixFQUFFLEVBQUU7SUFDdEJDLGtCQUFrQixFQUFFLEVBQUU7SUFDdEJDLGtCQUFrQixFQUFFLEVBQUU7SUFDdEJDLGtCQUFrQixFQUFFLENBQUM7SUFDckJDLG9CQUFvQixFQUFFO01BQ3BCQyxhQUFhLEVBQUUsQ0FBQztNQUNoQkMsS0FBSyxFQUFFLFFBQVE7TUFDZkMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFLENBQUM7TUFDVkMsa0JBQWtCLEVBQUUsR0FBRztNQUN2QkMsV0FBVyxFQUFFO1FBQ1hDLElBQUksRUFBRSxJQUFJdEIsSUFBSSxDQUFFO1VBQUV1QixJQUFJLEVBQUU7UUFBRyxDQUFFO01BQy9CO0lBQ0Y7RUFDRixDQUFDOztFQUVEO0VBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSTVCLGFBQWEsQ0FBRVUsYUFBYSxFQUFFQyxrQkFBa0IsRUFDM0VKLGNBQWMsQ0FBd0IsQ0FBQyxDQUFDLEVBQUVNLGNBQWMsRUFBRTtJQUN4RGdCLGNBQWMsRUFBRSxXQUFXO0lBQzNCVixvQkFBb0IsRUFBRTtNQUNwQlcsWUFBWSxFQUFFO0lBQ2hCO0VBQ0YsQ0FBRSxDQUFFLENBQUM7RUFFUCxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJL0IsYUFBYSxDQUFFVSxhQUFhLEVBQUVDLGtCQUFrQixFQUMzRUosY0FBYyxDQUF3QixDQUFDLENBQUMsRUFBRU0sY0FBYyxFQUFFO0lBQ3hEZ0IsY0FBYyxFQUFFLFdBQVc7SUFDM0JHLFdBQVcsRUFBRTtFQUNmLENBQUUsQ0FBRSxDQUFDO0VBRVAsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSWpDLGFBQWEsQ0FBRVUsYUFBYSxFQUFFQyxrQkFBa0IsRUFDM0VKLGNBQWMsQ0FBd0IsQ0FBQyxDQUFDLEVBQUVNLGNBQWMsRUFBRTtJQUN4RGdCLGNBQWMsRUFBRSxXQUFXO0lBQzNCVixvQkFBb0IsRUFBRTtNQUNwQkksT0FBTyxFQUFFLEVBQUU7TUFDWEYsS0FBSyxFQUFFO0lBQ1Q7RUFDRixDQUFFLENBQUUsQ0FBQztFQUVQLE1BQU1hLGlCQUFpQixHQUFHLElBQUlsQyxhQUFhLENBQUVVLGFBQWEsRUFBRUMsa0JBQWtCLEVBQzVFSixjQUFjLENBQXdCLENBQUMsQ0FBQyxFQUFFTSxjQUFjLEVBQUU7SUFDeERnQixjQUFjLEVBQUUsWUFBWTtJQUM1QlYsb0JBQW9CLEVBQUU7TUFDcEJnQixjQUFjLEVBQUUsTUFBTTtNQUN0QkMsZ0JBQWdCLEVBQUUsS0FBSztNQUN2QkMsbUJBQW1CLEVBQUUsQ0FBQztNQUN0QmhCLEtBQUssRUFBRTtJQUNULENBQUM7SUFDRGlCLGVBQWUsRUFBRSxXQUFXO0lBQzVCQyxpQkFBaUIsRUFBRSxNQUFNO0lBQ3pCQyxvQkFBb0IsRUFBRTtFQUN4QixDQUFFLENBQUUsQ0FBQztFQUVQLE1BQU1DLGVBQWUsR0FBRyxJQUFJeEMsUUFBUSxDQUFFVyxlQUFlLEVBQUUsSUFBSVAsSUFBSSxDQUFFLFNBQVMsRUFBRTtJQUFFcUIsSUFBSSxFQUFFLElBQUl0QixJQUFJLENBQUU7TUFBRXVCLElBQUksRUFBRTtJQUFHLENBQUU7RUFBRSxDQUFFLENBQUUsQ0FBQztFQUVsSCxPQUFPLElBQUlyQixJQUFJLENBQUU7SUFDZm9DLFFBQVEsRUFBRSxDQUFFWCxnQkFBZ0IsRUFBRUUsZ0JBQWdCLEVBQUVDLGlCQUFpQixFQUFFTixnQkFBZ0IsRUFBRWEsZUFBZSxDQUFFO0lBQ3RHRSxPQUFPLEVBQUUsRUFBRTtJQUNYQyxNQUFNLEVBQUVuQyxZQUFZLENBQUNtQztFQUN2QixDQUFFLENBQUM7QUFDTCJ9