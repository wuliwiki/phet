// Copyright 2022-2023, University of Colorado Boulder

/**
 * Demo for AlignGroup
 */

import Panel from '../../Panel.js';
import { AlignBox, AlignGroup, HBox, Node, Rectangle, Text, VBox } from '../../../../scenery/js/imports.js';
import dotRandom from '../../../../dot/js/dotRandom.js';
import stepTimer from '../../../../axon/js/stepTimer.js';
export default function demoAlignGroup(layoutBounds) {
  function highlightWrap(node) {
    const rect = Rectangle.bounds(node.bounds, {
      fill: 'rgba(0,0,0,0.25)'
    });
    node.boundsProperty.lazyLink(() => {
      rect.setRectBounds(node.bounds);
    });
    return new Node({
      children: [rect, node]
    });
  }

  // Scheduling randomness in stepTimer on startup leads to a different number of calls in the upstream and downstream
  // sim in the playback wrapper.  This workaround uses Math.random() to avoid a mismatch in the number of dotRandom calls.
  const stepRand = () => {
    return Math.random(); // eslint-disable-line bad-sim-text
  };

  const iconGroup = new AlignGroup();
  const iconRow = new HBox({
    spacing: 10,
    children: _.range(1, 10).map(() => {
      const randomRect = new Rectangle(0, 0, dotRandom.nextDouble() * 60 + 10, dotRandom.nextDouble() * 60 + 10, {
        fill: 'black'
      });
      stepTimer.addListener(() => {
        if (stepRand() < 0.02) {
          randomRect.rectWidth = stepRand() * 60 + 10;
          randomRect.rectHeight = stepRand() * 60 + 10;
        }
      });
      return new AlignBox(randomRect, {
        group: iconGroup,
        margin: 5
      });
    }).map(highlightWrap)
  });
  const panelGroup = new AlignGroup({
    matchVertical: false
  });
  function randomText() {
    const text = new Text('Test', {
      fontSize: 20
    });
    stepTimer.addListener(() => {
      if (stepRand() < 0.03) {
        let string = '';
        while (stepRand() < 0.94 && string.length < 20) {
          string += `${stepRand()}`.slice(-1);
        }
        text.string = string;
      }
    });
    return text;
  }
  const panelRow = new VBox({
    spacing: 10,
    children: [new Panel(new AlignBox(randomText(), {
      group: panelGroup
    })), new Panel(new AlignBox(new VBox({
      spacing: 3,
      children: [randomText(), randomText()]
    }), {
      group: panelGroup
    }))]
  });
  return new VBox({
    spacing: 20,
    children: [iconRow, panelRow],
    center: layoutBounds.center
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYW5lbCIsIkFsaWduQm94IiwiQWxpZ25Hcm91cCIsIkhCb3giLCJOb2RlIiwiUmVjdGFuZ2xlIiwiVGV4dCIsIlZCb3giLCJkb3RSYW5kb20iLCJzdGVwVGltZXIiLCJkZW1vQWxpZ25Hcm91cCIsImxheW91dEJvdW5kcyIsImhpZ2hsaWdodFdyYXAiLCJub2RlIiwicmVjdCIsImJvdW5kcyIsImZpbGwiLCJib3VuZHNQcm9wZXJ0eSIsImxhenlMaW5rIiwic2V0UmVjdEJvdW5kcyIsImNoaWxkcmVuIiwic3RlcFJhbmQiLCJNYXRoIiwicmFuZG9tIiwiaWNvbkdyb3VwIiwiaWNvblJvdyIsInNwYWNpbmciLCJfIiwicmFuZ2UiLCJtYXAiLCJyYW5kb21SZWN0IiwibmV4dERvdWJsZSIsImFkZExpc3RlbmVyIiwicmVjdFdpZHRoIiwicmVjdEhlaWdodCIsImdyb3VwIiwibWFyZ2luIiwicGFuZWxHcm91cCIsIm1hdGNoVmVydGljYWwiLCJyYW5kb21UZXh0IiwidGV4dCIsImZvbnRTaXplIiwic3RyaW5nIiwibGVuZ3RoIiwic2xpY2UiLCJwYW5lbFJvdyIsImNlbnRlciJdLCJzb3VyY2VzIjpbImRlbW9BbGlnbkdyb3VwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERlbW8gZm9yIEFsaWduR3JvdXBcclxuICovXHJcblxyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vUGFuZWwuanMnO1xyXG5pbXBvcnQgeyBBbGlnbkJveCwgQWxpZ25Hcm91cCwgSEJveCwgTm9kZSwgUmVjdGFuZ2xlLCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgZG90UmFuZG9tIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9kb3RSYW5kb20uanMnO1xyXG5pbXBvcnQgc3RlcFRpbWVyIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvc3RlcFRpbWVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlbW9BbGlnbkdyb3VwKCBsYXlvdXRCb3VuZHM6IEJvdW5kczIgKTogTm9kZSB7XHJcblxyXG4gIGZ1bmN0aW9uIGhpZ2hsaWdodFdyYXAoIG5vZGU6IE5vZGUgKTogTm9kZSB7XHJcbiAgICBjb25zdCByZWN0ID0gUmVjdGFuZ2xlLmJvdW5kcyggbm9kZS5ib3VuZHMsIHsgZmlsbDogJ3JnYmEoMCwwLDAsMC4yNSknIH0gKTtcclxuICAgIG5vZGUuYm91bmRzUHJvcGVydHkubGF6eUxpbmsoICgpID0+IHtcclxuICAgICAgcmVjdC5zZXRSZWN0Qm91bmRzKCBub2RlLmJvdW5kcyApO1xyXG4gICAgfSApO1xyXG4gICAgcmV0dXJuIG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgcmVjdCxcclxuICAgICAgICBub2RlXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8vIFNjaGVkdWxpbmcgcmFuZG9tbmVzcyBpbiBzdGVwVGltZXIgb24gc3RhcnR1cCBsZWFkcyB0byBhIGRpZmZlcmVudCBudW1iZXIgb2YgY2FsbHMgaW4gdGhlIHVwc3RyZWFtIGFuZCBkb3duc3RyZWFtXHJcbiAgLy8gc2ltIGluIHRoZSBwbGF5YmFjayB3cmFwcGVyLiAgVGhpcyB3b3JrYXJvdW5kIHVzZXMgTWF0aC5yYW5kb20oKSB0byBhdm9pZCBhIG1pc21hdGNoIGluIHRoZSBudW1iZXIgb2YgZG90UmFuZG9tIGNhbGxzLlxyXG4gIGNvbnN0IHN0ZXBSYW5kID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFkLXNpbS10ZXh0XHJcbiAgfTtcclxuICBjb25zdCBpY29uR3JvdXAgPSBuZXcgQWxpZ25Hcm91cCgpO1xyXG4gIGNvbnN0IGljb25Sb3cgPSBuZXcgSEJveCgge1xyXG4gICAgc3BhY2luZzogMTAsXHJcbiAgICBjaGlsZHJlbjogXy5yYW5nZSggMSwgMTAgKS5tYXAoICgpID0+IHtcclxuICAgICAgY29uc3QgcmFuZG9tUmVjdCA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIGRvdFJhbmRvbS5uZXh0RG91YmxlKCkgKiA2MCArIDEwLCBkb3RSYW5kb20ubmV4dERvdWJsZSgpICogNjAgKyAxMCwge1xyXG4gICAgICAgIGZpbGw6ICdibGFjaydcclxuICAgICAgfSApO1xyXG4gICAgICBzdGVwVGltZXIuYWRkTGlzdGVuZXIoICgpID0+IHtcclxuICAgICAgICBpZiAoIHN0ZXBSYW5kKCkgPCAwLjAyICkge1xyXG4gICAgICAgICAgcmFuZG9tUmVjdC5yZWN0V2lkdGggPSBzdGVwUmFuZCgpICogNjAgKyAxMDtcclxuICAgICAgICAgIHJhbmRvbVJlY3QucmVjdEhlaWdodCA9IHN0ZXBSYW5kKCkgKiA2MCArIDEwO1xyXG4gICAgICAgIH1cclxuICAgICAgfSApO1xyXG4gICAgICByZXR1cm4gbmV3IEFsaWduQm94KCByYW5kb21SZWN0LCB7XHJcbiAgICAgICAgZ3JvdXA6IGljb25Hcm91cCxcclxuICAgICAgICBtYXJnaW46IDVcclxuICAgICAgfSApO1xyXG4gICAgfSApLm1hcCggaGlnaGxpZ2h0V3JhcCApXHJcbiAgfSApO1xyXG5cclxuICBjb25zdCBwYW5lbEdyb3VwID0gbmV3IEFsaWduR3JvdXAoIHsgbWF0Y2hWZXJ0aWNhbDogZmFsc2UgfSApO1xyXG5cclxuICBmdW5jdGlvbiByYW5kb21UZXh0KCk6IFRleHQge1xyXG4gICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0KCAnVGVzdCcsIHsgZm9udFNpemU6IDIwIH0gKTtcclxuICAgIHN0ZXBUaW1lci5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICBpZiAoIHN0ZXBSYW5kKCkgPCAwLjAzICkge1xyXG4gICAgICAgIGxldCBzdHJpbmcgPSAnJztcclxuICAgICAgICB3aGlsZSAoIHN0ZXBSYW5kKCkgPCAwLjk0ICYmIHN0cmluZy5sZW5ndGggPCAyMCApIHtcclxuICAgICAgICAgIHN0cmluZyArPSAoIGAke3N0ZXBSYW5kKCl9YCApLnNsaWNlKCAtMSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0ZXh0LnN0cmluZyA9IHN0cmluZztcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfVxyXG5cclxuICBjb25zdCBwYW5lbFJvdyA9IG5ldyBWQm94KCB7XHJcbiAgICBzcGFjaW5nOiAxMCxcclxuICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgIG5ldyBQYW5lbCggbmV3IEFsaWduQm94KCByYW5kb21UZXh0KCksIHsgZ3JvdXA6IHBhbmVsR3JvdXAgfSApICksXHJcbiAgICAgIG5ldyBQYW5lbCggbmV3IEFsaWduQm94KCBuZXcgVkJveCgge1xyXG4gICAgICAgIHNwYWNpbmc6IDMsXHJcbiAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgIHJhbmRvbVRleHQoKSxcclxuICAgICAgICAgIHJhbmRvbVRleHQoKVxyXG4gICAgICAgIF1cclxuICAgICAgfSApLCB7IGdyb3VwOiBwYW5lbEdyb3VwIH0gKSApXHJcbiAgICBdXHJcbiAgfSApO1xyXG5cclxuICByZXR1cm4gbmV3IFZCb3goIHtcclxuICAgIHNwYWNpbmc6IDIwLFxyXG4gICAgY2hpbGRyZW46IFsgaWNvblJvdywgcGFuZWxSb3cgXSxcclxuICAgIGNlbnRlcjogbGF5b3V0Qm91bmRzLmNlbnRlclxyXG4gIH0gKTtcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxnQkFBZ0I7QUFDbEMsU0FBU0MsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1D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