// Copyright 2018-2022, University of Colorado Boulder

/**
 * View for demonstrating dialogs.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import ScreenView from '../../../../joist/js/ScreenView.js';
import { Font, Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import RectangularPushButton from '../../buttons/RectangularPushButton.js';
import Dialog from '../../Dialog.js';
import sun from '../../sun.js';
// constants
const BUTTON_FONT = new Font({
  size: 20
});
class DialogsScreenView extends ScreenView {
  constructor(providedOptions) {
    super(providedOptions);

    // dialog will be created the first time the button is pressed, lazily because Dialog
    // requires sim bounds during Dialog construction
    let dialog = null;
    const modalDialogButton = new RectangularPushButton({
      content: new Text('modal dialog', {
        font: BUTTON_FONT
      }),
      listener: () => {
        if (!dialog) {
          dialog = createDialog(true);
        }
        dialog.show();
      },
      left: this.layoutBounds.left + 100,
      top: this.layoutBounds.top + 100,
      tandem: Tandem.OPT_OUT
    });
    this.addChild(modalDialogButton);
  }
}
function createDialog(isModal) {
  const resizeButton = new RectangularPushButton({
    content: new Text('Resize', {
      font: new Font({
        size: 18
      })
    })
  });
  const minWidth = 1.5 * resizeButton.width;
  const minHeight = 1.5 * resizeButton.height;

  // This rectangle represents that bounds of the Dialog's content.
  const randomRect = new Rectangle(0, 0, minWidth, minHeight, {
    stroke: 'red'
  });
  resizeButton.center = randomRect.center;
  resizeButton.addListener(() => {
    randomRect.rectWidth = minWidth + dotRandom.nextDouble() * 200;
    randomRect.rectHeight = minHeight + dotRandom.nextDouble() * 100;
    resizeButton.center = randomRect.center;
  });
  const contentNode = new Node({
    children: [randomRect, resizeButton]
  });
  return new Dialog(contentNode, {
    titleAlign: 'center',
    isModal: isModal,
    title: new Text('Title', {
      font: new Font({
        size: 32
      })
    })
  });
}
sun.register('DialogsScreenView', DialogsScreenView);
export default DialogsScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJTY3JlZW5WaWV3IiwiRm9udCIsIk5vZGUiLCJSZWN0YW5nbGUiLCJUZXh0IiwiVGFuZGVtIiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwiRGlhbG9nIiwic3VuIiwiQlVUVE9OX0ZPTlQiLCJzaXplIiwiRGlhbG9nc1NjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsImRpYWxvZyIsIm1vZGFsRGlhbG9nQnV0dG9uIiwiY29udGVudCIsImZvbnQiLCJsaXN0ZW5lciIsImNyZWF0ZURpYWxvZyIsInNob3ciLCJsZWZ0IiwibGF5b3V0Qm91bmRzIiwidG9wIiwidGFuZGVtIiwiT1BUX09VVCIsImFkZENoaWxkIiwiaXNNb2RhbCIsInJlc2l6ZUJ1dHRvbiIsIm1pbldpZHRoIiwid2lkdGgiLCJtaW5IZWlnaHQiLCJoZWlnaHQiLCJyYW5kb21SZWN0Iiwic3Ryb2tlIiwiY2VudGVyIiwiYWRkTGlzdGVuZXIiLCJyZWN0V2lkdGgiLCJuZXh0RG91YmxlIiwicmVjdEhlaWdodCIsImNvbnRlbnROb2RlIiwiY2hpbGRyZW4iLCJ0aXRsZUFsaWduIiwidGl0bGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpYWxvZ3NTY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgZm9yIGRlbW9uc3RyYXRpbmcgZGlhbG9ncy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgZG90UmFuZG9tIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9kb3RSYW5kb20uanMnO1xyXG5pbXBvcnQgU2NyZWVuVmlldyBmcm9tICcuLi8uLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IHsgRm9udCwgTm9kZSwgUmVjdGFuZ2xlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiBmcm9tICcuLi8uLi9idXR0b25zL1JlY3Rhbmd1bGFyUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBEaWFsb2cgZnJvbSAnLi4vLi4vRGlhbG9nLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuLi8uLi9zdW4uanMnO1xyXG5pbXBvcnQgeyBEZW1vc1NjcmVlblZpZXdPcHRpb25zIH0gZnJvbSAnLi4vRGVtb3NTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEJVVFRPTl9GT05UID0gbmV3IEZvbnQoIHsgc2l6ZTogMjAgfSApO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbnR5cGUgRGlhbG9nc1NjcmVlblZpZXdPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8RGVtb3NTY3JlZW5WaWV3T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuY2xhc3MgRGlhbG9nc1NjcmVlblZpZXcgZXh0ZW5kcyBTY3JlZW5WaWV3IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IERpYWxvZ3NTY3JlZW5WaWV3T3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlciggcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gZGlhbG9nIHdpbGwgYmUgY3JlYXRlZCB0aGUgZmlyc3QgdGltZSB0aGUgYnV0dG9uIGlzIHByZXNzZWQsIGxhemlseSBiZWNhdXNlIERpYWxvZ1xyXG4gICAgLy8gcmVxdWlyZXMgc2ltIGJvdW5kcyBkdXJpbmcgRGlhbG9nIGNvbnN0cnVjdGlvblxyXG4gICAgbGV0IGRpYWxvZzogRGlhbG9nIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgY29uc3QgbW9kYWxEaWFsb2dCdXR0b24gPSBuZXcgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uKCB7XHJcbiAgICAgIGNvbnRlbnQ6IG5ldyBUZXh0KCAnbW9kYWwgZGlhbG9nJywgeyBmb250OiBCVVRUT05fRk9OVCB9ICksXHJcbiAgICAgIGxpc3RlbmVyOiAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCAhZGlhbG9nICkge1xyXG4gICAgICAgICAgZGlhbG9nID0gY3JlYXRlRGlhbG9nKCB0cnVlICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpYWxvZy5zaG93KCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGxlZnQ6IHRoaXMubGF5b3V0Qm91bmRzLmxlZnQgKyAxMDAsXHJcbiAgICAgIHRvcDogdGhpcy5sYXlvdXRCb3VuZHMudG9wICsgMTAwLFxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBtb2RhbERpYWxvZ0J1dHRvbiApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRGlhbG9nKCBpc01vZGFsOiBib29sZWFuICk6IERpYWxvZyB7XHJcblxyXG4gIGNvbnN0IHJlc2l6ZUJ1dHRvbiA9IG5ldyBSZWN0YW5ndWxhclB1c2hCdXR0b24oIHtcclxuICAgIGNvbnRlbnQ6IG5ldyBUZXh0KCAnUmVzaXplJywgeyBmb250OiBuZXcgRm9udCggeyBzaXplOiAxOCB9ICkgfSApXHJcbiAgfSApO1xyXG5cclxuICBjb25zdCBtaW5XaWR0aCA9IDEuNSAqIHJlc2l6ZUJ1dHRvbi53aWR0aDtcclxuICBjb25zdCBtaW5IZWlnaHQgPSAxLjUgKiByZXNpemVCdXR0b24uaGVpZ2h0O1xyXG5cclxuICAvLyBUaGlzIHJlY3RhbmdsZSByZXByZXNlbnRzIHRoYXQgYm91bmRzIG9mIHRoZSBEaWFsb2cncyBjb250ZW50LlxyXG4gIGNvbnN0IHJhbmRvbVJlY3QgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCBtaW5XaWR0aCwgbWluSGVpZ2h0LCB7IHN0cm9rZTogJ3JlZCcgfSApO1xyXG4gIHJlc2l6ZUJ1dHRvbi5jZW50ZXIgPSByYW5kb21SZWN0LmNlbnRlcjtcclxuXHJcbiAgcmVzaXplQnV0dG9uLmFkZExpc3RlbmVyKCAoKSA9PiB7XHJcbiAgICByYW5kb21SZWN0LnJlY3RXaWR0aCA9IG1pbldpZHRoICsgZG90UmFuZG9tLm5leHREb3VibGUoKSAqIDIwMDtcclxuICAgIHJhbmRvbVJlY3QucmVjdEhlaWdodCA9IG1pbkhlaWdodCArIGRvdFJhbmRvbS5uZXh0RG91YmxlKCkgKiAxMDA7XHJcbiAgICByZXNpemVCdXR0b24uY2VudGVyID0gcmFuZG9tUmVjdC5jZW50ZXI7XHJcbiAgfSApO1xyXG5cclxuICBjb25zdCBjb250ZW50Tm9kZSA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIHJhbmRvbVJlY3QsIHJlc2l6ZUJ1dHRvbiBdIH0gKTtcclxuXHJcbiAgcmV0dXJuIG5ldyBEaWFsb2coIGNvbnRlbnROb2RlLCB7XHJcbiAgICB0aXRsZUFsaWduOiAnY2VudGVyJyxcclxuICAgIGlzTW9kYWw6IGlzTW9kYWwsXHJcbiAgICB0aXRsZTogbmV3IFRleHQoICdUaXRsZScsIHsgZm9udDogbmV3IEZvbnQoIHsgc2l6ZTogMzIgfSApIH0gKVxyXG4gIH0gKTtcclxufVxyXG5cclxuc3VuLnJlZ2lzdGVyKCAnRGlhbG9nc1NjcmVlblZpZXcnLCBEaWFsb2dzU2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBEaWFsb2dzU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7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