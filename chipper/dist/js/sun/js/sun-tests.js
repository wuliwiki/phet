// Copyright 2020-2022, University of Colorado Boulder

/**
 * Unit tests for sun. Please run once in ?brand=phet and once in ?brand=phet-io to cover all functionality.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import BooleanProperty from '../../axon/js/BooleanProperty.js';
import qunitStart from '../../chipper/js/sim-tests/qunitStart.js';
import merge from '../../phet-core/js/merge.js';
import { Node, SceneryConstants } from '../../scenery/js/imports.js';
import './SliderTests.js';
QUnit.module('sun');
QUnit.test('enabled/disabled appearance', assert => {
  class SunComponentNode extends Node {
    constructor(options) {
      options = merge({
        disabledOpacity: SceneryConstants.DISABLED_OPACITY
      }, options);
      super(options);
    }
  }
  let node = new SunComponentNode();
  const disabledOpacity = 0.2;
  node = new SunComponentNode({
    disabledOpacity: disabledOpacity
  });
  assert.ok(node.effectiveOpacity === new SunComponentNode().opacity, 'opacity should default to Node default');
  node.enabled = false;
  assert.ok(node.effectiveOpacity === disabledOpacity, 'test disabled opacity');
  node.dispose();

  // TinyProperty.isDisposed is only defined when assertions are enabled, for performance
  window.assert && assert.ok(node.enabledProperty.isDisposed, 'should be disposed');
  const myEnabledProperty = new BooleanProperty(true);
  const defaultListenerCount = myEnabledProperty.getListenerCount();
  const node2 = new SunComponentNode({
    enabledProperty: myEnabledProperty
  });
  assert.ok(myEnabledProperty.getListenerCount() > defaultListenerCount, 'listener count should be more since passing in enabledProperty');
  node2.dispose();
  assert.ok(myEnabledProperty.getListenerCount() === defaultListenerCount, 'listener count should match original');
});
qunitStart();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJxdW5pdFN0YXJ0IiwibWVyZ2UiLCJOb2RlIiwiU2NlbmVyeUNvbnN0YW50cyIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsIlN1bkNvbXBvbmVudE5vZGUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJkaXNhYmxlZE9wYWNpdHkiLCJESVNBQkxFRF9PUEFDSVRZIiwibm9kZSIsIm9rIiwiZWZmZWN0aXZlT3BhY2l0eSIsIm9wYWNpdHkiLCJlbmFibGVkIiwiZGlzcG9zZSIsIndpbmRvdyIsImVuYWJsZWRQcm9wZXJ0eSIsImlzRGlzcG9zZWQiLCJteUVuYWJsZWRQcm9wZXJ0eSIsImRlZmF1bHRMaXN0ZW5lckNvdW50IiwiZ2V0TGlzdGVuZXJDb3VudCIsIm5vZGUyIl0sInNvdXJjZXMiOlsic3VuLXRlc3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFVuaXQgdGVzdHMgZm9yIHN1bi4gUGxlYXNlIHJ1biBvbmNlIGluID9icmFuZD1waGV0IGFuZCBvbmNlIGluID9icmFuZD1waGV0LWlvIHRvIGNvdmVyIGFsbCBmdW5jdGlvbmFsaXR5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBxdW5pdFN0YXJ0IGZyb20gJy4uLy4uL2NoaXBwZXIvanMvc2ltLXRlc3RzL3F1bml0U3RhcnQuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgU2NlbmVyeUNvbnN0YW50cyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCAnLi9TbGlkZXJUZXN0cy5qcyc7XHJcblxyXG5cclxuUVVuaXQubW9kdWxlKCAnc3VuJyApO1xyXG5cclxuUVVuaXQudGVzdCggJ2VuYWJsZWQvZGlzYWJsZWQgYXBwZWFyYW5jZScsIGFzc2VydCA9PiB7XHJcblxyXG4gIGNsYXNzIFN1bkNvbXBvbmVudE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuICAgIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG4gICAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgICBkaXNhYmxlZE9wYWNpdHk6IFNjZW5lcnlDb25zdGFudHMuRElTQUJMRURfT1BBQ0lUWVxyXG4gICAgICB9LCBvcHRpb25zICk7XHJcbiAgICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsZXQgbm9kZSA9IG5ldyBTdW5Db21wb25lbnROb2RlKCk7XHJcblxyXG4gIGNvbnN0IGRpc2FibGVkT3BhY2l0eSA9IDAuMjtcclxuICBub2RlID0gbmV3IFN1bkNvbXBvbmVudE5vZGUoIHtcclxuICAgIGRpc2FibGVkT3BhY2l0eTogZGlzYWJsZWRPcGFjaXR5XHJcbiAgfSApO1xyXG5cclxuICBhc3NlcnQub2soIG5vZGUuZWZmZWN0aXZlT3BhY2l0eSA9PT0gbmV3IFN1bkNvbXBvbmVudE5vZGUoKS5vcGFjaXR5LCAnb3BhY2l0eSBzaG91bGQgZGVmYXVsdCB0byBOb2RlIGRlZmF1bHQnICk7XHJcbiAgbm9kZS5lbmFibGVkID0gZmFsc2U7XHJcbiAgYXNzZXJ0Lm9rKCBub2RlLmVmZmVjdGl2ZU9wYWNpdHkgPT09IGRpc2FibGVkT3BhY2l0eSwgJ3Rlc3QgZGlzYWJsZWQgb3BhY2l0eScgKTtcclxuXHJcbiAgbm9kZS5kaXNwb3NlKCk7XHJcblxyXG4gIC8vIFRpbnlQcm9wZXJ0eS5pc0Rpc3Bvc2VkIGlzIG9ubHkgZGVmaW5lZCB3aGVuIGFzc2VydGlvbnMgYXJlIGVuYWJsZWQsIGZvciBwZXJmb3JtYW5jZVxyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0Lm9rKCBub2RlLmVuYWJsZWRQcm9wZXJ0eS5pc0Rpc3Bvc2VkLCAnc2hvdWxkIGJlIGRpc3Bvc2VkJyApO1xyXG5cclxuICBjb25zdCBteUVuYWJsZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUgKTtcclxuICBjb25zdCBkZWZhdWx0TGlzdGVuZXJDb3VudCA9IG15RW5hYmxlZFByb3BlcnR5LmdldExpc3RlbmVyQ291bnQoKTtcclxuICBjb25zdCBub2RlMiA9IG5ldyBTdW5Db21wb25lbnROb2RlKCB7XHJcbiAgICBlbmFibGVkUHJvcGVydHk6IG15RW5hYmxlZFByb3BlcnR5XHJcbiAgfSApO1xyXG4gIGFzc2VydC5vayggbXlFbmFibGVkUHJvcGVydHkuZ2V0TGlzdGVuZXJDb3VudCgpID4gZGVmYXVsdExpc3RlbmVyQ291bnQsICdsaXN0ZW5lciBjb3VudCBzaG91bGQgYmUgbW9yZSBzaW5jZSBwYXNzaW5nIGluIGVuYWJsZWRQcm9wZXJ0eScgKTtcclxuXHJcbiAgbm9kZTIuZGlzcG9zZSgpO1xyXG4gIGFzc2VydC5vayggbXlFbmFibGVkUHJvcGVydHkuZ2V0TGlzdGVuZXJDb3VudCgpID09PSBkZWZhdWx0TGlzdGVuZXJDb3VudCwgJ2xpc3RlbmVyIGNvdW50IHNob3VsZCBtYXRjaCBvcmlnaW5hbCcgKTtcclxufSApO1xyXG5cclxucXVuaXRTdGFydCgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sa0NBQWtDO0FBQzlELE9BQU9DLFVBQVUsTUFBTSwwQ0FBMEM7QUFDakUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxTQUFTQyxJQUFJLEVBQUVDLGdCQUFnQixRQUFRLDZCQUE2QjtBQUNwRSxPQUFPLGtCQUFrQjtBQUd6QkMsS0FBSyxDQUFDQyxNQUFNLENBQUUsS0FBTSxDQUFDO0FBRXJCRCxLQUFLLENBQUNFLElBQUksQ0FBRSw2QkFBNkIsRUFBRUMsTUFBTSxJQUFJO0VBRW5ELE1BQU1DLGdCQUFnQixTQUFTTixJQUFJLENBQUM7SUFDbENPLFdBQVdBLENBQUVDLE9BQU8sRUFBRztNQUNyQkEsT0FBTyxHQUFHVCxLQUFLLENBQUU7UUFDZlUsZUFBZSxFQUFFUixnQkFBZ0IsQ0FBQ1M7TUFDcEMsQ0FBQyxFQUFFRixPQUFRLENBQUM7TUFDWixLQUFLLENBQUVBLE9BQVEsQ0FBQztJQUNsQjtFQUNGO0VBRUEsSUFBSUcsSUFBSSxHQUFHLElBQUlMLGdCQUFnQixDQUFDLENBQUM7RUFFakMsTUFBTUcsZUFBZSxHQUFHLEdBQUc7RUFDM0JFLElBQUksR0FBRyxJQUFJTCxnQkFBZ0IsQ0FBRTtJQUMzQkcsZUFBZSxFQUFFQTtFQUNuQixDQUFFLENBQUM7RUFFSEosTUFBTSxDQUFDTyxFQUFFLENBQUVELElBQUksQ0FBQ0UsZ0JBQWdCLEtBQUssSUFBSVAsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDUSxPQUFPLEVBQUUsd0NBQXlDLENBQUM7RUFDL0dILElBQUksQ0FBQ0ksT0FBTyxHQUFHLEtBQUs7RUFDcEJWLE1BQU0sQ0FBQ08sRUFBRSxDQUFFRCxJQUFJLENBQUNFLGdCQUFnQixLQUFLSixlQUFlLEVBQUUsdUJBQXdCLENBQUM7RUFFL0VFLElBQUksQ0FBQ0ssT0FBTyxDQUFDLENBQUM7O0VBRWQ7RUFDQUMsTUFBTSxDQUFDWixNQUFNLElBQUlBLE1BQU0sQ0FBQ08sRUFBRSxDQUFFRCxJQUFJLENBQUNPLGVBQWUsQ0FBQ0MsVUFBVSxFQUFFLG9CQUFxQixDQUFDO0VBRW5GLE1BQU1DLGlCQUFpQixHQUFHLElBQUl2QixlQUFlLENBQUUsSUFBSyxDQUFDO0VBQ3JELE1BQU13QixvQkFBb0IsR0FBR0QsaUJBQWlCLENBQUNFLGdCQUFnQixDQUFDLENBQUM7RUFDakUsTUFBTUMsS0FBSyxHQUFHLElBQUlqQixnQkFBZ0IsQ0FBRTtJQUNsQ1ksZUFBZSxFQUFFRTtFQUNuQixDQUFFLENBQUM7RUFDSGYsTUFBTSxDQUFDTyxFQUFFLENBQUVRLGlCQUFpQixDQUFDRSxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUdELG9CQUFvQixFQUFFLGdFQUFpRSxDQUFDO0VBRTFJRSxLQUFLLENBQUNQLE9BQU8sQ0FBQyxDQUFDO0VBQ2ZYLE1BQU0sQ0FBQ08sRUFBRSxDQUFFUSxpQkFBaUIsQ0FBQ0UsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLRCxvQkFBb0IsRUFBRSxzQ0FBdUMsQ0FBQztBQUNwSCxDQUFFLENBQUM7QUFFSHZCLFVBQVUsQ0FBQyxDQUFDIn0=