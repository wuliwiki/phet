// Copyright 2014-2023, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author John Blanco
 */

import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import MappedProperty from '../../axon/js/MappedProperty.js';
import AtomicInteractionsScreen from '../../states-of-matter/js/atomic-interactions/AtomicInteractionsScreen.js';
import Tandem from '../../tandem/js/Tandem.js';
import AtomicInteractionsStrings from './AtomicInteractionsStrings.js';
const atomicInteractionsTitleStringProperty = AtomicInteractionsStrings['atomic-interactions'].titleStringProperty;

// You cannot pass the same Property instance as a single as the sim and screen name.
const screenNameProperty = new MappedProperty(atomicInteractionsTitleStringProperty, {
  bidirectional: true,
  map: _.identity,
  inverseMap: _.identity
});
simLauncher.launch(() => {
  const simOptions = {
    credits: {
      leadDesign: 'Paul Beale, Yuen-ying Carpenter, Sarah McKagan, Emily B. Moore, Noah Podolefsky,<br>Amy Rouinfar',
      softwareDevelopment: 'John Blanco, Aaron Davis, Aadish Gupta',
      team: 'Wendy Adams, Jack Barbera, Amy Hanson, Kelly Lancaster, Ariel Paul, Kathy Perkins,<br>Carl Wieman',
      qualityAssurance: 'Steele Dalton, Amanda Davis, Bryce Griebenow, Ethan Johnson, Liam Mulhall,<br>' + 'Oliver Orejola, Laura Rea, Benjamin Roberts, Jacob Romero, Kathryn Woessner, Bryan Yoelin',
      thanks: 'Thanks to Actual Concepts for working with the PhET development team to convert this simulation to HTML5.'
    },
    preferencesModel: new PreferencesModel({
      visualOptions: {
        supportsProjectorMode: true
      }
    })
  };
  const sim = new Sim(atomicInteractionsTitleStringProperty, [new AtomicInteractionsScreen(true, screenNameProperty, Tandem.ROOT.createTandem('atomicInteractionsScreen'))], simOptions);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc01vZGVsIiwiU2ltIiwic2ltTGF1bmNoZXIiLCJNYXBwZWRQcm9wZXJ0eSIsIkF0b21pY0ludGVyYWN0aW9uc1NjcmVlbiIsIlRhbmRlbSIsIkF0b21pY0ludGVyYWN0aW9uc1N0cmluZ3MiLCJhdG9taWNJbnRlcmFjdGlvbnNUaXRsZVN0cmluZ1Byb3BlcnR5IiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsInNjcmVlbk5hbWVQcm9wZXJ0eSIsImJpZGlyZWN0aW9uYWwiLCJtYXAiLCJfIiwiaWRlbnRpdHkiLCJpbnZlcnNlTWFwIiwibGF1bmNoIiwic2ltT3B0aW9ucyIsImNyZWRpdHMiLCJsZWFkRGVzaWduIiwic29mdHdhcmVEZXZlbG9wbWVudCIsInRlYW0iLCJxdWFsaXR5QXNzdXJhbmNlIiwidGhhbmtzIiwicHJlZmVyZW5jZXNNb2RlbCIsInZpc3VhbE9wdGlvbnMiLCJzdXBwb3J0c1Byb2plY3Rvck1vZGUiLCJzaW0iLCJST09UIiwiY3JlYXRlVGFuZGVtIiwic3RhcnQiXSwic291cmNlcyI6WyJhdG9taWMtaW50ZXJhY3Rpb25zLW1haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlIHNpbS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBQcmVmZXJlbmNlc01vZGVsIGZyb20gJy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzTW9kZWwuanMnO1xyXG5pbXBvcnQgU2ltIGZyb20gJy4uLy4uL2pvaXN0L2pzL1NpbS5qcyc7XHJcbmltcG9ydCBzaW1MYXVuY2hlciBmcm9tICcuLi8uLi9qb2lzdC9qcy9zaW1MYXVuY2hlci5qcyc7XHJcbmltcG9ydCBNYXBwZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL01hcHBlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IEF0b21pY0ludGVyYWN0aW9uc1NjcmVlbiBmcm9tICcuLi8uLi9zdGF0ZXMtb2YtbWF0dGVyL2pzL2F0b21pYy1pbnRlcmFjdGlvbnMvQXRvbWljSW50ZXJhY3Rpb25zU2NyZWVuLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEF0b21pY0ludGVyYWN0aW9uc1N0cmluZ3MgZnJvbSAnLi9BdG9taWNJbnRlcmFjdGlvbnNTdHJpbmdzLmpzJztcclxuXHJcbmNvbnN0IGF0b21pY0ludGVyYWN0aW9uc1RpdGxlU3RyaW5nUHJvcGVydHkgPSBBdG9taWNJbnRlcmFjdGlvbnNTdHJpbmdzWyAnYXRvbWljLWludGVyYWN0aW9ucycgXS50aXRsZVN0cmluZ1Byb3BlcnR5O1xyXG5cclxuLy8gWW91IGNhbm5vdCBwYXNzIHRoZSBzYW1lIFByb3BlcnR5IGluc3RhbmNlIGFzIGEgc2luZ2xlIGFzIHRoZSBzaW0gYW5kIHNjcmVlbiBuYW1lLlxyXG5jb25zdCBzY3JlZW5OYW1lUHJvcGVydHkgPSBuZXcgTWFwcGVkUHJvcGVydHkoIGF0b21pY0ludGVyYWN0aW9uc1RpdGxlU3RyaW5nUHJvcGVydHksIHtcclxuICBiaWRpcmVjdGlvbmFsOiB0cnVlLFxyXG4gIG1hcDogXy5pZGVudGl0eSwgaW52ZXJzZU1hcDogXy5pZGVudGl0eVxyXG59ICk7XHJcblxyXG5zaW1MYXVuY2hlci5sYXVuY2goICgpID0+IHtcclxuXHJcbiAgY29uc3Qgc2ltT3B0aW9ucyA9IHtcclxuICAgIGNyZWRpdHM6IHtcclxuICAgICAgbGVhZERlc2lnbjogJ1BhdWwgQmVhbGUsIFl1ZW4teWluZyBDYXJwZW50ZXIsIFNhcmFoIE1jS2FnYW4sIEVtaWx5IEIuIE1vb3JlLCBOb2FoIFBvZG9sZWZza3ksPGJyPkFteSBSb3VpbmZhcicsXHJcbiAgICAgIHNvZnR3YXJlRGV2ZWxvcG1lbnQ6ICdKb2huIEJsYW5jbywgQWFyb24gRGF2aXMsIEFhZGlzaCBHdXB0YScsXHJcbiAgICAgIHRlYW06ICdXZW5keSBBZGFtcywgSmFjayBCYXJiZXJhLCBBbXkgSGFuc29uLCBLZWxseSBMYW5jYXN0ZXIsIEFyaWVsIFBhdWwsIEthdGh5IFBlcmtpbnMsPGJyPkNhcmwgV2llbWFuJyxcclxuICAgICAgcXVhbGl0eUFzc3VyYW5jZTogJ1N0ZWVsZSBEYWx0b24sIEFtYW5kYSBEYXZpcywgQnJ5Y2UgR3JpZWJlbm93LCBFdGhhbiBKb2huc29uLCBMaWFtIE11bGhhbGwsPGJyPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnT2xpdmVyIE9yZWpvbGEsIExhdXJhIFJlYSwgQmVuamFtaW4gUm9iZXJ0cywgSmFjb2IgUm9tZXJvLCBLYXRocnluIFdvZXNzbmVyLCBCcnlhbiBZb2VsaW4nLFxyXG4gICAgICB0aGFua3M6ICdUaGFua3MgdG8gQWN0dWFsIENvbmNlcHRzIGZvciB3b3JraW5nIHdpdGggdGhlIFBoRVQgZGV2ZWxvcG1lbnQgdGVhbSB0byBjb252ZXJ0IHRoaXMgc2ltdWxhdGlvbiB0byBIVE1MNS4nXHJcbiAgICB9LFxyXG5cclxuICAgIHByZWZlcmVuY2VzTW9kZWw6IG5ldyBQcmVmZXJlbmNlc01vZGVsKCB7XHJcbiAgICAgIHZpc3VhbE9wdGlvbnM6IHtcclxuICAgICAgICBzdXBwb3J0c1Byb2plY3Rvck1vZGU6IHRydWVcclxuICAgICAgfVxyXG4gICAgfSApXHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2ltID0gbmV3IFNpbShcclxuICAgIGF0b21pY0ludGVyYWN0aW9uc1RpdGxlU3RyaW5nUHJvcGVydHksXHJcbiAgICBbIG5ldyBBdG9taWNJbnRlcmFjdGlvbnNTY3JlZW4oIHRydWUsIHNjcmVlbk5hbWVQcm9wZXJ0eSwgVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAnYXRvbWljSW50ZXJhY3Rpb25zU2NyZWVuJyApICkgXSxcclxuICAgIHNpbU9wdGlvbnMgKTtcclxuICBzaW0uc3RhcnQoKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSxnREFBZ0Q7QUFDN0UsT0FBT0MsR0FBRyxNQUFNLHVCQUF1QjtBQUN2QyxPQUFPQyxXQUFXLE1BQU0sK0JBQStCO0FBQ3ZELE9BQU9DLGNBQWMsTUFBTSxpQ0FBaUM7QUFDNUQsT0FBT0Msd0JBQXdCLE1BQU0sMkVBQTJFO0FBQ2hILE9BQU9DLE1BQU0sTUFBTSwyQkFBMkI7QUFDOUMsT0FBT0MseUJBQXlCLE1BQU0sZ0NBQWdDO0FBRXRFLE1BQU1DLHFDQUFxQyxHQUFHRCx5QkFBeUIsQ0FBRSxxQkFBcUIsQ0FBRSxDQUFDRSxtQkFBbUI7O0FBRXBIO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsSUFBSU4sY0FBYyxDQUFFSSxxQ0FBcUMsRUFBRTtFQUNwRkcsYUFBYSxFQUFFLElBQUk7RUFDbkJDLEdBQUcsRUFBRUMsQ0FBQyxDQUFDQyxRQUFRO0VBQUVDLFVBQVUsRUFBRUYsQ0FBQyxDQUFDQztBQUNqQyxDQUFFLENBQUM7QUFFSFgsV0FBVyxDQUFDYSxNQUFNLENBQUUsTUFBTTtFQUV4QixNQUFNQyxVQUFVLEdBQUc7SUFDakJDLE9BQU8sRUFBRTtNQUNQQyxVQUFVLEVBQUUsa0dBQWtHO01BQzlHQyxtQkFBbUIsRUFBRSx3Q0FBd0M7TUFDN0RDLElBQUksRUFBRSxtR0FBbUc7TUFDekdDLGdCQUFnQixFQUFFLGdGQUFnRixHQUNoRiwyRkFBMkY7TUFDN0dDLE1BQU0sRUFBRTtJQUNWLENBQUM7SUFFREMsZ0JBQWdCLEVBQUUsSUFBSXZCLGdCQUFnQixDQUFFO01BQ3RDd0IsYUFBYSxFQUFFO1FBQ2JDLHFCQUFxQixFQUFFO01BQ3pCO0lBQ0YsQ0FBRTtFQUNKLENBQUM7RUFFRCxNQUFNQyxHQUFHLEdBQUcsSUFBSXpCLEdBQUcsQ0FDakJNLHFDQUFxQyxFQUNyQyxDQUFFLElBQUlILHdCQUF3QixDQUFFLElBQUksRUFBRUssa0JBQWtCLEVBQUVKLE1BQU0sQ0FBQ3NCLElBQUksQ0FBQ0MsWUFBWSxDQUFFLDBCQUEyQixDQUFFLENBQUMsQ0FBRSxFQUNwSFosVUFBVyxDQUFDO0VBQ2RVLEdBQUcsQ0FBQ0csS0FBSyxDQUFDLENBQUM7QUFDYixDQUFFLENBQUMifQ==