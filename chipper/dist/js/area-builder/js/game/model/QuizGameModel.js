// Copyright 2014-2021, University of Colorado Boulder

/**
 * Framework for a quiz style game where the user is presented with various 'challenges' which must be answered and for
 * which they get points.  This file defines the code that handles the general behavior for PhET's quiz-style games,
 * such as state transitions, timers, best scores, and such.  It works in conjunction with a sim-specific model that
 * handles behavior that is specific to this simulation's game, such as how the model changes when displaying correct
 * answer to the user.
 *
 * This separation of concerns is experimental, and this simulation (Area Builder) is the first one where it is being
 * tried.
 *
 * @author John Blanco
 */

import Property from '../../../../axon/js/Property.js';
import stepTimer from '../../../../axon/js/stepTimer.js';
import merge from '../../../../phet-core/js/merge.js';
import areaBuilder from '../../areaBuilder.js';
import GameState from './GameState.js';
class QuizGameModel {
  /**
   * @param challengeFactory - Factory object that is used to create challenges, examine usage for details.
   * @param simSpecificModel - Model containing the elements of the game that are unique to this sim, used to delegate
   * delegate certain actions.  Look through code for usage details.
   * @param {Object} [options]
   */
  constructor(challengeFactory, simSpecificModel, options) {
    this.challengeFactory = challengeFactory; // @private
    this.simSpecificModel = simSpecificModel; // @public

    options = merge({
      numberOfLevels: 6,
      challengesPerSet: 6,
      maxPointsPerChallenge: 2,
      maxAttemptsPerChallenge: 2
    }, options);

    // @public - model properties
    this.timerEnabledProperty = new Property(false);
    this.levelProperty = new Property(0);
    this.challengeIndexProperty = new Property(0);
    this.currentChallengeProperty = new Property(null);
    this.scoreProperty = new Property(0);
    this.elapsedTimeProperty = new Property(0);
    this.gameStateProperty = new Property(GameState.CHOOSING_LEVEL); // Current state of the game, see GameState for valid values.

    // other public vars
    this.numberOfLevels = options.numberOfLevels; // @public
    this.challengesPerSet = options.challengesPerSet; // @public
    this.maxPointsPerChallenge = options.maxPointsPerChallenge; // @public
    this.maxPossibleScore = options.challengesPerSet * options.maxPointsPerChallenge; // @public
    this.maxAttemptsPerChallenge = options.maxAttemptsPerChallenge; // @private

    // @private Wall time at which current level was started.
    this.gameStartTime = 0;

    // Best times and scores.
    this.bestTimes = []; // @public
    this.bestScoreProperties = []; // @public
    _.times(options.numberOfLevels, () => {
      this.bestTimes.push(null);
      this.bestScoreProperties.push(new Property(0));
    });

    // Counter used to track number of incorrect answers.
    this.incorrectGuessesOnCurrentChallenge = 0; // @public

    // Current set of challenges, which collectively comprise a single level, on which the user is currently working.
    this.challengeList = null; // @private

    // Let the sim-specific model know when the challenge changes.
    this.currentChallengeProperty.lazyLink(challenge => {
      simSpecificModel.setChallenge(challenge);
    });
  }

  // @private
  step(dt) {
    this.simSpecificModel.step(dt);
  }

  /**
   * reset this model
   * @public
   */
  reset() {
    this.timerEnabledProperty.reset();
    this.levelProperty.reset();
    this.challengeIndexProperty.reset();
    this.currentChallengeProperty.reset();
    this.scoreProperty.reset();
    this.elapsedTimeProperty.reset();
    this.gameStateProperty.reset();
    this.bestScoreProperties.forEach(bestScoreProperty => {
      bestScoreProperty.reset();
    });
    this.bestTimes = [];
    _.times(this.numberOfLevels, () => {
      this.bestTimes.push(null);
    });
  }

  /**
   * starts new level
   * @param {number} level
   * @public
   */
  startLevel(level) {
    this.levelProperty.set(level);
    this.scoreProperty.reset();
    this.challengeIndexProperty.set(0);
    this.incorrectGuessesOnCurrentChallenge = 0;
    this.restartGameTimer();

    // Create the list of challenges.
    this.challengeList = this.challengeFactory.generateChallengeSet(level, this.challengesPerSet);

    // Set up the model for the next challenge
    this.currentChallengeProperty.set(this.challengeList[this.challengeIndexProperty.get()]);

    // Let the sim-specific model know that a new level is being started in case it needs to do any initialization.
    this.simSpecificModel.startLevel();

    // Change to new game state.
    this.gameStateProperty.set(GameState.PRESENTING_INTERACTIVE_CHALLENGE);

    // Flag set to indicate new best time, cleared each time a level is started.
    this.newBestTime = false;
  }

  /**
   * @public
   */
  setChoosingLevelState() {
    this.gameStateProperty.set(GameState.CHOOSING_LEVEL);
  }

  /**
   * @public
   */
  getChallengeCurrentPointValue() {
    return Math.max(this.maxPointsPerChallenge - this.incorrectGuessesOnCurrentChallenge, 0);
  }

  /**
   * Check the user's proposed answer.
   * @public
   */
  checkAnswer(answer) {
    this.handleProposedAnswer(this.simSpecificModel.checkAnswer(this.currentChallengeProperty.get()));
  }

  /**
   * @param answerIsCorrect
   * @private
   */
  handleProposedAnswer(answerIsCorrect) {
    let pointsEarned = 0;
    if (answerIsCorrect) {
      // The user answered the challenge correctly.
      this.gameStateProperty.set(GameState.SHOWING_CORRECT_ANSWER_FEEDBACK);
      if (this.incorrectGuessesOnCurrentChallenge === 0) {
        // User got it right the first time.
        pointsEarned = this.maxPointsPerChallenge;
      } else {
        // User got it wrong at first, but got it right now.
        pointsEarned = Math.max(this.maxPointsPerChallenge - this.incorrectGuessesOnCurrentChallenge, 0);
      }
      this.scoreProperty.value += pointsEarned;
    } else {
      // The user got it wrong.
      this.incorrectGuessesOnCurrentChallenge++;
      if (this.incorrectGuessesOnCurrentChallenge < this.maxAttemptsPerChallenge) {
        this.gameStateProperty.set(GameState.SHOWING_INCORRECT_ANSWER_FEEDBACK_TRY_AGAIN);
      } else {
        this.gameStateProperty.set(GameState.SHOWING_INCORRECT_ANSWER_FEEDBACK_MOVE_ON);
      }
    }
  }

  // @private
  newGame() {
    this.stopGameTimer();
    this.gameStateProperty.set(GameState.CHOOSING_LEVEL);
    this.incorrectGuessesOnCurrentChallenge = 0;
  }

  /**
   * Move to the next challenge in the current challenge set.
   * @public
   */
  nextChallenge() {
    const currentLevel = this.levelProperty.get();
    this.incorrectGuessesOnCurrentChallenge = 0;
    if (this.challengeIndexProperty.get() + 1 < this.challengeList.length) {
      // Move to the next challenge.
      this.challengeIndexProperty.value++;
      this.currentChallengeProperty.set(this.challengeList[this.challengeIndexProperty.get()]);
      this.gameStateProperty.set(GameState.PRESENTING_INTERACTIVE_CHALLENGE);
    } else {
      // All challenges completed for this level.  See if this is a new best time and, if so, record it.
      if (this.scoreProperty.get() === this.maxPossibleScore) {
        // Perfect game.  See if new best time.
        if (this.bestTimes[currentLevel] === null || this.elapsedTimeProperty.get() < this.bestTimes[currentLevel]) {
          this.newBestTime = this.bestTimes[currentLevel] !== null; // Don't set this flag for the first 'best time', only when the time improves.
          this.bestTimes[currentLevel] = this.elapsedTimeProperty.get();
        }
      }
      this.bestScoreProperties[currentLevel].value = this.scoreProperty.get();

      // Done with this game, show the results.
      this.gameStateProperty.set(GameState.SHOWING_LEVEL_RESULTS);
    }
  }

  /**
   * @public
   */
  tryAgain() {
    this.simSpecificModel.tryAgain();
    this.gameStateProperty.set(GameState.PRESENTING_INTERACTIVE_CHALLENGE);
  }

  /**
   * @public
   */
  displayCorrectAnswer() {
    // Set the challenge to display the correct answer.
    this.simSpecificModel.displayCorrectAnswer(this.currentChallengeProperty.get());

    // Update the game state.
    this.gameStateProperty.set(GameState.DISPLAYING_CORRECT_ANSWER);
  }

  // @private
  restartGameTimer() {
    if (this.gameTimerId !== null) {
      window.clearInterval(this.gameTimerId);
    }
    this.elapsedTimeProperty.set(0);
    this.gameTimerId = stepTimer.setInterval(() => {
      this.elapsedTimeProperty.value += 1;
    }, 1000);
  }

  // @private
  stopGameTimer() {
    window.clearInterval(this.gameTimerId);
    this.gameTimerId = null;
  }
}
areaBuilder.register('QuizGameModel', QuizGameModel);
export default QuizGameModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsInN0ZXBUaW1lciIsIm1lcmdlIiwiYXJlYUJ1aWxkZXIiLCJHYW1lU3RhdGUiLCJRdWl6R2FtZU1vZGVsIiwiY29uc3RydWN0b3IiLCJjaGFsbGVuZ2VGYWN0b3J5Iiwic2ltU3BlY2lmaWNNb2RlbCIsIm9wdGlvbnMiLCJudW1iZXJPZkxldmVscyIsImNoYWxsZW5nZXNQZXJTZXQiLCJtYXhQb2ludHNQZXJDaGFsbGVuZ2UiLCJtYXhBdHRlbXB0c1BlckNoYWxsZW5nZSIsInRpbWVyRW5hYmxlZFByb3BlcnR5IiwibGV2ZWxQcm9wZXJ0eSIsImNoYWxsZW5nZUluZGV4UHJvcGVydHkiLCJjdXJyZW50Q2hhbGxlbmdlUHJvcGVydHkiLCJzY29yZVByb3BlcnR5IiwiZWxhcHNlZFRpbWVQcm9wZXJ0eSIsImdhbWVTdGF0ZVByb3BlcnR5IiwiQ0hPT1NJTkdfTEVWRUwiLCJtYXhQb3NzaWJsZVNjb3JlIiwiZ2FtZVN0YXJ0VGltZSIsImJlc3RUaW1lcyIsImJlc3RTY29yZVByb3BlcnRpZXMiLCJfIiwidGltZXMiLCJwdXNoIiwiaW5jb3JyZWN0R3Vlc3Nlc09uQ3VycmVudENoYWxsZW5nZSIsImNoYWxsZW5nZUxpc3QiLCJsYXp5TGluayIsImNoYWxsZW5nZSIsInNldENoYWxsZW5nZSIsInN0ZXAiLCJkdCIsInJlc2V0IiwiZm9yRWFjaCIsImJlc3RTY29yZVByb3BlcnR5Iiwic3RhcnRMZXZlbCIsImxldmVsIiwic2V0IiwicmVzdGFydEdhbWVUaW1lciIsImdlbmVyYXRlQ2hhbGxlbmdlU2V0IiwiZ2V0IiwiUFJFU0VOVElOR19JTlRFUkFDVElWRV9DSEFMTEVOR0UiLCJuZXdCZXN0VGltZSIsInNldENob29zaW5nTGV2ZWxTdGF0ZSIsImdldENoYWxsZW5nZUN1cnJlbnRQb2ludFZhbHVlIiwiTWF0aCIsIm1heCIsImNoZWNrQW5zd2VyIiwiYW5zd2VyIiwiaGFuZGxlUHJvcG9zZWRBbnN3ZXIiLCJhbnN3ZXJJc0NvcnJlY3QiLCJwb2ludHNFYXJuZWQiLCJTSE9XSU5HX0NPUlJFQ1RfQU5TV0VSX0ZFRURCQUNLIiwidmFsdWUiLCJTSE9XSU5HX0lOQ09SUkVDVF9BTlNXRVJfRkVFREJBQ0tfVFJZX0FHQUlOIiwiU0hPV0lOR19JTkNPUlJFQ1RfQU5TV0VSX0ZFRURCQUNLX01PVkVfT04iLCJuZXdHYW1lIiwic3RvcEdhbWVUaW1lciIsIm5leHRDaGFsbGVuZ2UiLCJjdXJyZW50TGV2ZWwiLCJsZW5ndGgiLCJTSE9XSU5HX0xFVkVMX1JFU1VMVFMiLCJ0cnlBZ2FpbiIsImRpc3BsYXlDb3JyZWN0QW5zd2VyIiwiRElTUExBWUlOR19DT1JSRUNUX0FOU1dFUiIsImdhbWVUaW1lcklkIiwid2luZG93IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJRdWl6R2FtZU1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZyYW1ld29yayBmb3IgYSBxdWl6IHN0eWxlIGdhbWUgd2hlcmUgdGhlIHVzZXIgaXMgcHJlc2VudGVkIHdpdGggdmFyaW91cyAnY2hhbGxlbmdlcycgd2hpY2ggbXVzdCBiZSBhbnN3ZXJlZCBhbmQgZm9yXHJcbiAqIHdoaWNoIHRoZXkgZ2V0IHBvaW50cy4gIFRoaXMgZmlsZSBkZWZpbmVzIHRoZSBjb2RlIHRoYXQgaGFuZGxlcyB0aGUgZ2VuZXJhbCBiZWhhdmlvciBmb3IgUGhFVCdzIHF1aXotc3R5bGUgZ2FtZXMsXHJcbiAqIHN1Y2ggYXMgc3RhdGUgdHJhbnNpdGlvbnMsIHRpbWVycywgYmVzdCBzY29yZXMsIGFuZCBzdWNoLiAgSXQgd29ya3MgaW4gY29uanVuY3Rpb24gd2l0aCBhIHNpbS1zcGVjaWZpYyBtb2RlbCB0aGF0XHJcbiAqIGhhbmRsZXMgYmVoYXZpb3IgdGhhdCBpcyBzcGVjaWZpYyB0byB0aGlzIHNpbXVsYXRpb24ncyBnYW1lLCBzdWNoIGFzIGhvdyB0aGUgbW9kZWwgY2hhbmdlcyB3aGVuIGRpc3BsYXlpbmcgY29ycmVjdFxyXG4gKiBhbnN3ZXIgdG8gdGhlIHVzZXIuXHJcbiAqXHJcbiAqIFRoaXMgc2VwYXJhdGlvbiBvZiBjb25jZXJucyBpcyBleHBlcmltZW50YWwsIGFuZCB0aGlzIHNpbXVsYXRpb24gKEFyZWEgQnVpbGRlcikgaXMgdGhlIGZpcnN0IG9uZSB3aGVyZSBpdCBpcyBiZWluZ1xyXG4gKiB0cmllZC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHN0ZXBUaW1lciBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL3N0ZXBUaW1lci5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgYXJlYUJ1aWxkZXIgZnJvbSAnLi4vLi4vYXJlYUJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgR2FtZVN0YXRlIGZyb20gJy4vR2FtZVN0YXRlLmpzJztcclxuXHJcbmNsYXNzIFF1aXpHYW1lTW9kZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gY2hhbGxlbmdlRmFjdG9yeSAtIEZhY3Rvcnkgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBjcmVhdGUgY2hhbGxlbmdlcywgZXhhbWluZSB1c2FnZSBmb3IgZGV0YWlscy5cclxuICAgKiBAcGFyYW0gc2ltU3BlY2lmaWNNb2RlbCAtIE1vZGVsIGNvbnRhaW5pbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSBnYW1lIHRoYXQgYXJlIHVuaXF1ZSB0byB0aGlzIHNpbSwgdXNlZCB0byBkZWxlZ2F0ZVxyXG4gICAqIGRlbGVnYXRlIGNlcnRhaW4gYWN0aW9ucy4gIExvb2sgdGhyb3VnaCBjb2RlIGZvciB1c2FnZSBkZXRhaWxzLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY2hhbGxlbmdlRmFjdG9yeSwgc2ltU3BlY2lmaWNNb2RlbCwgb3B0aW9ucyApIHtcclxuICAgIHRoaXMuY2hhbGxlbmdlRmFjdG9yeSA9IGNoYWxsZW5nZUZhY3Rvcnk7IC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLnNpbVNwZWNpZmljTW9kZWwgPSBzaW1TcGVjaWZpY01vZGVsOyAvLyBAcHVibGljXHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG51bWJlck9mTGV2ZWxzOiA2LFxyXG4gICAgICBjaGFsbGVuZ2VzUGVyU2V0OiA2LFxyXG4gICAgICBtYXhQb2ludHNQZXJDaGFsbGVuZ2U6IDIsXHJcbiAgICAgIG1heEF0dGVtcHRzUGVyQ2hhbGxlbmdlOiAyXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAtIG1vZGVsIHByb3BlcnRpZXNcclxuICAgIHRoaXMudGltZXJFbmFibGVkUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGZhbHNlICk7XHJcbiAgICB0aGlzLmxldmVsUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIDAgKTtcclxuICAgIHRoaXMuY2hhbGxlbmdlSW5kZXhQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggMCApO1xyXG4gICAgdGhpcy5jdXJyZW50Q2hhbGxlbmdlUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIG51bGwgKTtcclxuICAgIHRoaXMuc2NvcmVQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggMCApO1xyXG4gICAgdGhpcy5lbGFwc2VkVGltZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCAwICk7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBHYW1lU3RhdGUuQ0hPT1NJTkdfTEVWRUwgKTsgLy8gQ3VycmVudCBzdGF0ZSBvZiB0aGUgZ2FtZSwgc2VlIEdhbWVTdGF0ZSBmb3IgdmFsaWQgdmFsdWVzLlxyXG5cclxuICAgIC8vIG90aGVyIHB1YmxpYyB2YXJzXHJcbiAgICB0aGlzLm51bWJlck9mTGV2ZWxzID0gb3B0aW9ucy5udW1iZXJPZkxldmVsczsgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5jaGFsbGVuZ2VzUGVyU2V0ID0gb3B0aW9ucy5jaGFsbGVuZ2VzUGVyU2V0OyAvLyBAcHVibGljXHJcbiAgICB0aGlzLm1heFBvaW50c1BlckNoYWxsZW5nZSA9IG9wdGlvbnMubWF4UG9pbnRzUGVyQ2hhbGxlbmdlOyAvLyBAcHVibGljXHJcbiAgICB0aGlzLm1heFBvc3NpYmxlU2NvcmUgPSBvcHRpb25zLmNoYWxsZW5nZXNQZXJTZXQgKiBvcHRpb25zLm1heFBvaW50c1BlckNoYWxsZW5nZTsgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5tYXhBdHRlbXB0c1BlckNoYWxsZW5nZSA9IG9wdGlvbnMubWF4QXR0ZW1wdHNQZXJDaGFsbGVuZ2U7IC8vIEBwcml2YXRlXHJcblxyXG4gICAgLy8gQHByaXZhdGUgV2FsbCB0aW1lIGF0IHdoaWNoIGN1cnJlbnQgbGV2ZWwgd2FzIHN0YXJ0ZWQuXHJcbiAgICB0aGlzLmdhbWVTdGFydFRpbWUgPSAwO1xyXG5cclxuICAgIC8vIEJlc3QgdGltZXMgYW5kIHNjb3Jlcy5cclxuICAgIHRoaXMuYmVzdFRpbWVzID0gW107IC8vIEBwdWJsaWNcclxuICAgIHRoaXMuYmVzdFNjb3JlUHJvcGVydGllcyA9IFtdOyAvLyBAcHVibGljXHJcbiAgICBfLnRpbWVzKCBvcHRpb25zLm51bWJlck9mTGV2ZWxzLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuYmVzdFRpbWVzLnB1c2goIG51bGwgKTtcclxuICAgICAgdGhpcy5iZXN0U2NvcmVQcm9wZXJ0aWVzLnB1c2goIG5ldyBQcm9wZXJ0eSggMCApICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQ291bnRlciB1c2VkIHRvIHRyYWNrIG51bWJlciBvZiBpbmNvcnJlY3QgYW5zd2Vycy5cclxuICAgIHRoaXMuaW5jb3JyZWN0R3Vlc3Nlc09uQ3VycmVudENoYWxsZW5nZSA9IDA7IC8vIEBwdWJsaWNcclxuXHJcbiAgICAvLyBDdXJyZW50IHNldCBvZiBjaGFsbGVuZ2VzLCB3aGljaCBjb2xsZWN0aXZlbHkgY29tcHJpc2UgYSBzaW5nbGUgbGV2ZWwsIG9uIHdoaWNoIHRoZSB1c2VyIGlzIGN1cnJlbnRseSB3b3JraW5nLlxyXG4gICAgdGhpcy5jaGFsbGVuZ2VMaXN0ID0gbnVsbDsgIC8vIEBwcml2YXRlXHJcblxyXG4gICAgLy8gTGV0IHRoZSBzaW0tc3BlY2lmaWMgbW9kZWwga25vdyB3aGVuIHRoZSBjaGFsbGVuZ2UgY2hhbmdlcy5cclxuICAgIHRoaXMuY3VycmVudENoYWxsZW5nZVByb3BlcnR5LmxhenlMaW5rKCBjaGFsbGVuZ2UgPT4geyBzaW1TcGVjaWZpY01vZGVsLnNldENoYWxsZW5nZSggY2hhbGxlbmdlICk7IH0gKTtcclxuICB9XHJcblxyXG4gIC8vIEBwcml2YXRlXHJcbiAgc3RlcCggZHQgKSB7XHJcbiAgICB0aGlzLnNpbVNwZWNpZmljTW9kZWwuc3RlcCggZHQgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlc2V0IHRoaXMgbW9kZWxcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnRpbWVyRW5hYmxlZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmxldmVsUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuY2hhbGxlbmdlSW5kZXhQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5jdXJyZW50Q2hhbGxlbmdlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuc2NvcmVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5lbGFwc2VkVGltZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmJlc3RTY29yZVByb3BlcnRpZXMuZm9yRWFjaCggYmVzdFNjb3JlUHJvcGVydHkgPT4geyBiZXN0U2NvcmVQcm9wZXJ0eS5yZXNldCgpOyB9ICk7XHJcbiAgICB0aGlzLmJlc3RUaW1lcyA9IFtdO1xyXG4gICAgXy50aW1lcyggdGhpcy5udW1iZXJPZkxldmVscywgKCkgPT4ge1xyXG4gICAgICB0aGlzLmJlc3RUaW1lcy5wdXNoKCBudWxsICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBzdGFydHMgbmV3IGxldmVsXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxldmVsXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0YXJ0TGV2ZWwoIGxldmVsICkge1xyXG4gICAgdGhpcy5sZXZlbFByb3BlcnR5LnNldCggbGV2ZWwgKTtcclxuICAgIHRoaXMuc2NvcmVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5jaGFsbGVuZ2VJbmRleFByb3BlcnR5LnNldCggMCApO1xyXG4gICAgdGhpcy5pbmNvcnJlY3RHdWVzc2VzT25DdXJyZW50Q2hhbGxlbmdlID0gMDtcclxuICAgIHRoaXMucmVzdGFydEdhbWVUaW1lcigpO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgbGlzdCBvZiBjaGFsbGVuZ2VzLlxyXG4gICAgdGhpcy5jaGFsbGVuZ2VMaXN0ID0gdGhpcy5jaGFsbGVuZ2VGYWN0b3J5LmdlbmVyYXRlQ2hhbGxlbmdlU2V0KCBsZXZlbCwgdGhpcy5jaGFsbGVuZ2VzUGVyU2V0ICk7XHJcblxyXG4gICAgLy8gU2V0IHVwIHRoZSBtb2RlbCBmb3IgdGhlIG5leHQgY2hhbGxlbmdlXHJcbiAgICB0aGlzLmN1cnJlbnRDaGFsbGVuZ2VQcm9wZXJ0eS5zZXQoIHRoaXMuY2hhbGxlbmdlTGlzdFsgdGhpcy5jaGFsbGVuZ2VJbmRleFByb3BlcnR5LmdldCgpIF0gKTtcclxuXHJcbiAgICAvLyBMZXQgdGhlIHNpbS1zcGVjaWZpYyBtb2RlbCBrbm93IHRoYXQgYSBuZXcgbGV2ZWwgaXMgYmVpbmcgc3RhcnRlZCBpbiBjYXNlIGl0IG5lZWRzIHRvIGRvIGFueSBpbml0aWFsaXphdGlvbi5cclxuICAgIHRoaXMuc2ltU3BlY2lmaWNNb2RlbC5zdGFydExldmVsKCk7XHJcblxyXG4gICAgLy8gQ2hhbmdlIHRvIG5ldyBnYW1lIHN0YXRlLlxyXG4gICAgdGhpcy5nYW1lU3RhdGVQcm9wZXJ0eS5zZXQoIEdhbWVTdGF0ZS5QUkVTRU5USU5HX0lOVEVSQUNUSVZFX0NIQUxMRU5HRSApO1xyXG5cclxuICAgIC8vIEZsYWcgc2V0IHRvIGluZGljYXRlIG5ldyBiZXN0IHRpbWUsIGNsZWFyZWQgZWFjaCB0aW1lIGEgbGV2ZWwgaXMgc3RhcnRlZC5cclxuICAgIHRoaXMubmV3QmVzdFRpbWUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzZXRDaG9vc2luZ0xldmVsU3RhdGUoKSB7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZVByb3BlcnR5LnNldCggR2FtZVN0YXRlLkNIT09TSU5HX0xFVkVMICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZ2V0Q2hhbGxlbmdlQ3VycmVudFBvaW50VmFsdWUoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoIHRoaXMubWF4UG9pbnRzUGVyQ2hhbGxlbmdlIC0gdGhpcy5pbmNvcnJlY3RHdWVzc2VzT25DdXJyZW50Q2hhbGxlbmdlLCAwICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayB0aGUgdXNlcidzIHByb3Bvc2VkIGFuc3dlci5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY2hlY2tBbnN3ZXIoIGFuc3dlciApIHtcclxuICAgIHRoaXMuaGFuZGxlUHJvcG9zZWRBbnN3ZXIoIHRoaXMuc2ltU3BlY2lmaWNNb2RlbC5jaGVja0Fuc3dlciggdGhpcy5jdXJyZW50Q2hhbGxlbmdlUHJvcGVydHkuZ2V0KCkgKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGFuc3dlcklzQ29ycmVjdFxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgaGFuZGxlUHJvcG9zZWRBbnN3ZXIoIGFuc3dlcklzQ29ycmVjdCApIHtcclxuICAgIGxldCBwb2ludHNFYXJuZWQgPSAwO1xyXG4gICAgaWYgKCBhbnN3ZXJJc0NvcnJlY3QgKSB7XHJcbiAgICAgIC8vIFRoZSB1c2VyIGFuc3dlcmVkIHRoZSBjaGFsbGVuZ2UgY29ycmVjdGx5LlxyXG4gICAgICB0aGlzLmdhbWVTdGF0ZVByb3BlcnR5LnNldCggR2FtZVN0YXRlLlNIT1dJTkdfQ09SUkVDVF9BTlNXRVJfRkVFREJBQ0sgKTtcclxuICAgICAgaWYgKCB0aGlzLmluY29ycmVjdEd1ZXNzZXNPbkN1cnJlbnRDaGFsbGVuZ2UgPT09IDAgKSB7XHJcbiAgICAgICAgLy8gVXNlciBnb3QgaXQgcmlnaHQgdGhlIGZpcnN0IHRpbWUuXHJcbiAgICAgICAgcG9pbnRzRWFybmVkID0gdGhpcy5tYXhQb2ludHNQZXJDaGFsbGVuZ2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgLy8gVXNlciBnb3QgaXQgd3JvbmcgYXQgZmlyc3QsIGJ1dCBnb3QgaXQgcmlnaHQgbm93LlxyXG4gICAgICAgIHBvaW50c0Vhcm5lZCA9IE1hdGgubWF4KCB0aGlzLm1heFBvaW50c1BlckNoYWxsZW5nZSAtIHRoaXMuaW5jb3JyZWN0R3Vlc3Nlc09uQ3VycmVudENoYWxsZW5nZSwgMCApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2NvcmVQcm9wZXJ0eS52YWx1ZSArPSBwb2ludHNFYXJuZWQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gVGhlIHVzZXIgZ290IGl0IHdyb25nLlxyXG4gICAgICB0aGlzLmluY29ycmVjdEd1ZXNzZXNPbkN1cnJlbnRDaGFsbGVuZ2UrKztcclxuICAgICAgaWYgKCB0aGlzLmluY29ycmVjdEd1ZXNzZXNPbkN1cnJlbnRDaGFsbGVuZ2UgPCB0aGlzLm1heEF0dGVtcHRzUGVyQ2hhbGxlbmdlICkge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlUHJvcGVydHkuc2V0KCBHYW1lU3RhdGUuU0hPV0lOR19JTkNPUlJFQ1RfQU5TV0VSX0ZFRURCQUNLX1RSWV9BR0FJTiApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlUHJvcGVydHkuc2V0KCBHYW1lU3RhdGUuU0hPV0lOR19JTkNPUlJFQ1RfQU5TV0VSX0ZFRURCQUNLX01PVkVfT04gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQHByaXZhdGVcclxuICBuZXdHYW1lKCkge1xyXG4gICAgdGhpcy5zdG9wR2FtZVRpbWVyKCk7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZVByb3BlcnR5LnNldCggR2FtZVN0YXRlLkNIT09TSU5HX0xFVkVMICk7XHJcbiAgICB0aGlzLmluY29ycmVjdEd1ZXNzZXNPbkN1cnJlbnRDaGFsbGVuZ2UgPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTW92ZSB0byB0aGUgbmV4dCBjaGFsbGVuZ2UgaW4gdGhlIGN1cnJlbnQgY2hhbGxlbmdlIHNldC5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgbmV4dENoYWxsZW5nZSgpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRMZXZlbCA9IHRoaXMubGV2ZWxQcm9wZXJ0eS5nZXQoKTtcclxuICAgIHRoaXMuaW5jb3JyZWN0R3Vlc3Nlc09uQ3VycmVudENoYWxsZW5nZSA9IDA7XHJcbiAgICBpZiAoIHRoaXMuY2hhbGxlbmdlSW5kZXhQcm9wZXJ0eS5nZXQoKSArIDEgPCB0aGlzLmNoYWxsZW5nZUxpc3QubGVuZ3RoICkge1xyXG4gICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGNoYWxsZW5nZS5cclxuICAgICAgdGhpcy5jaGFsbGVuZ2VJbmRleFByb3BlcnR5LnZhbHVlKys7XHJcbiAgICAgIHRoaXMuY3VycmVudENoYWxsZW5nZVByb3BlcnR5LnNldCggdGhpcy5jaGFsbGVuZ2VMaXN0WyB0aGlzLmNoYWxsZW5nZUluZGV4UHJvcGVydHkuZ2V0KCkgXSApO1xyXG4gICAgICB0aGlzLmdhbWVTdGF0ZVByb3BlcnR5LnNldCggR2FtZVN0YXRlLlBSRVNFTlRJTkdfSU5URVJBQ1RJVkVfQ0hBTExFTkdFICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gQWxsIGNoYWxsZW5nZXMgY29tcGxldGVkIGZvciB0aGlzIGxldmVsLiAgU2VlIGlmIHRoaXMgaXMgYSBuZXcgYmVzdCB0aW1lIGFuZCwgaWYgc28sIHJlY29yZCBpdC5cclxuICAgICAgaWYgKCB0aGlzLnNjb3JlUHJvcGVydHkuZ2V0KCkgPT09IHRoaXMubWF4UG9zc2libGVTY29yZSApIHtcclxuICAgICAgICAvLyBQZXJmZWN0IGdhbWUuICBTZWUgaWYgbmV3IGJlc3QgdGltZS5cclxuICAgICAgICBpZiAoIHRoaXMuYmVzdFRpbWVzWyBjdXJyZW50TGV2ZWwgXSA9PT0gbnVsbCB8fCB0aGlzLmVsYXBzZWRUaW1lUHJvcGVydHkuZ2V0KCkgPCB0aGlzLmJlc3RUaW1lc1sgY3VycmVudExldmVsIF0gKSB7XHJcbiAgICAgICAgICB0aGlzLm5ld0Jlc3RUaW1lID0gdGhpcy5iZXN0VGltZXNbIGN1cnJlbnRMZXZlbCBdICE9PSBudWxsOyAvLyBEb24ndCBzZXQgdGhpcyBmbGFnIGZvciB0aGUgZmlyc3QgJ2Jlc3QgdGltZScsIG9ubHkgd2hlbiB0aGUgdGltZSBpbXByb3Zlcy5cclxuICAgICAgICAgIHRoaXMuYmVzdFRpbWVzWyBjdXJyZW50TGV2ZWwgXSA9IHRoaXMuZWxhcHNlZFRpbWVQcm9wZXJ0eS5nZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5iZXN0U2NvcmVQcm9wZXJ0aWVzWyBjdXJyZW50TGV2ZWwgXS52YWx1ZSA9IHRoaXMuc2NvcmVQcm9wZXJ0eS5nZXQoKTtcclxuXHJcbiAgICAgIC8vIERvbmUgd2l0aCB0aGlzIGdhbWUsIHNob3cgdGhlIHJlc3VsdHMuXHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlUHJvcGVydHkuc2V0KCBHYW1lU3RhdGUuU0hPV0lOR19MRVZFTF9SRVNVTFRTICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgdHJ5QWdhaW4oKSB7XHJcbiAgICB0aGlzLnNpbVNwZWNpZmljTW9kZWwudHJ5QWdhaW4oKTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlUHJvcGVydHkuc2V0KCBHYW1lU3RhdGUuUFJFU0VOVElOR19JTlRFUkFDVElWRV9DSEFMTEVOR0UgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBkaXNwbGF5Q29ycmVjdEFuc3dlcigpIHtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGNoYWxsZW5nZSB0byBkaXNwbGF5IHRoZSBjb3JyZWN0IGFuc3dlci5cclxuICAgIHRoaXMuc2ltU3BlY2lmaWNNb2RlbC5kaXNwbGF5Q29ycmVjdEFuc3dlciggdGhpcy5jdXJyZW50Q2hhbGxlbmdlUHJvcGVydHkuZ2V0KCkgKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGdhbWUgc3RhdGUuXHJcbiAgICB0aGlzLmdhbWVTdGF0ZVByb3BlcnR5LnNldCggR2FtZVN0YXRlLkRJU1BMQVlJTkdfQ09SUkVDVF9BTlNXRVIgKTtcclxuICB9XHJcblxyXG4gIC8vIEBwcml2YXRlXHJcbiAgcmVzdGFydEdhbWVUaW1lcigpIHtcclxuICAgIGlmICggdGhpcy5nYW1lVGltZXJJZCAhPT0gbnVsbCApIHtcclxuICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoIHRoaXMuZ2FtZVRpbWVySWQgKTtcclxuICAgIH1cclxuICAgIHRoaXMuZWxhcHNlZFRpbWVQcm9wZXJ0eS5zZXQoIDAgKTtcclxuICAgIHRoaXMuZ2FtZVRpbWVySWQgPSBzdGVwVGltZXIuc2V0SW50ZXJ2YWwoICgpID0+IHsgdGhpcy5lbGFwc2VkVGltZVByb3BlcnR5LnZhbHVlICs9IDE7IH0sIDEwMDAgKTtcclxuICB9XHJcblxyXG4gIC8vIEBwcml2YXRlXHJcbiAgc3RvcEdhbWVUaW1lcigpIHtcclxuICAgIHdpbmRvdy5jbGVhckludGVydmFsKCB0aGlzLmdhbWVUaW1lcklkICk7XHJcbiAgICB0aGlzLmdhbWVUaW1lcklkID0gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmFyZWFCdWlsZGVyLnJlZ2lzdGVyKCAnUXVpekdhbWVNb2RlbCcsIFF1aXpHYW1lTW9kZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgUXVpekdhbWVNb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFFdEMsTUFBTUMsYUFBYSxDQUFDO0VBRWxCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxnQkFBZ0IsRUFBRUMsZ0JBQWdCLEVBQUVDLE9BQU8sRUFBRztJQUN6RCxJQUFJLENBQUNGLGdCQUFnQixHQUFHQSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFDLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUdBLGdCQUFnQixDQUFDLENBQUM7O0lBRTFDQyxPQUFPLEdBQUdQLEtBQUssQ0FBRTtNQUNmUSxjQUFjLEVBQUUsQ0FBQztNQUNqQkMsZ0JBQWdCLEVBQUUsQ0FBQztNQUNuQkMscUJBQXFCLEVBQUUsQ0FBQztNQUN4QkMsdUJBQXVCLEVBQUU7SUFDM0IsQ0FBQyxFQUFFSixPQUFRLENBQUM7O0lBRVo7SUFDQSxJQUFJLENBQUNLLG9CQUFvQixHQUFHLElBQUlkLFFBQVEsQ0FBRSxLQUFNLENBQUM7SUFDakQsSUFBSSxDQUFDZSxhQUFhLEdBQUcs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