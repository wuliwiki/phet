// Copyright 2018-2022, University of Colorado Boulder

/**
 * Combine JSON and MD into an HTML report.
 * @author Sam Reid (PhET Interactive Simulations)
 */

// const getMarkdownFileAsHTML = require( './getMarkdownFileAsHTML' );
const fs = require('fs');
const handlebars = require('handlebars');
const marked = require('marked');
const matter = require('gray-matter'); // eslint-disable-line require-statement-match
const path = require('path');

// const apiUrl = '';
const simsDirectory = path.normalize(`${__dirname}/../..`);

// returns an object with the 'data' and 'content' keys
function processFile(filePath) {
  // get the front matter object
  const mdObject = matter.read(filePath);
  const pathArray = filePath.split(path.sep);
  const docIdx = pathArray.indexOf('doc');
  const repo = pathArray[docIdx - 1];
  mdObject.content = marked(mdObject.content).split('<img src="images/').join(`<img src="images/${repo}/`);
  mdObject.repo = repo;
  return mdObject;
}

// responsible for returning a list of all filepaths for files within a `doc` directory for a given sim repo
function getFullDocPaths(repo) {
  const docDir = path.join(simsDirectory, repo, 'doc');
  return getFilePathsFromDir(docDir, []);
}
function getFilePathsFromDir(dir, filelist = []) {
  if (!(dir.includes('templates') || dir.includes('images')) && fs.existsSync(dir)) {
    fs.readdirSync(dir).forEach(file => {
      filelist = fs.statSync(path.join(dir, file)).isDirectory() ? getFilePathsFromDir(path.join(dir, file), filelist) : filelist.concat(path.join(dir, file));
    });
  }
  return filelist;
}

// flattens a multidimensional array
function flatten(arr) {
  return [].concat(...arr);
}

// compile and get the given template file
function getHandlebarsTemplate(filename) {
  const fullPath = path.normalize(`${__dirname}/../templates/${filename}`);
  return handlebars.compile(fs.readFileSync(fullPath, 'utf8'));
}

/**
 * The data object has levels like sims=>components=>dataURLs
 * So each simKey is another object
 * @param {Object} data - see `getFromSimInMaster` for more details.
 * @returns {string} - the HTML
 */
const createHTMLString = function (data) {
  const components = data.components;
  const sims = data.sims;

  // organize the data for the "sims by component" view
  const simsByComponent = Object.keys(components).map(component => {
    return {
      name: component,
      sims: Object.keys(components[component])
    };
  });
  const baseTemplate = getHandlebarsTemplate('base.html');
  const parentComponentTemplate = getHandlebarsTemplate('parentComponent.html');
  const singleComponentTemplate = getHandlebarsTemplate('singleComponent.html');
  const componentsBySimulationTemplate = getHandlebarsTemplate('componentsBySimulation.html');
  const simsByComponentTemplate = getHandlebarsTemplate('simsByComponent.html');
  let contentHTML = '';

  // get list of files in all docs/ directories, excluding binder (can be async)
  const repos = new Set(Object.keys(components).map(item => item.split('/')[0]));
  const documentPaths = flatten([...repos].map(getFullDocPaths));
  const mdData = {};
  for (const docPath of documentPaths) {
    const name = path.basename(docPath, '.md');
    mdData[name] = processFile(docPath);
  }
  const parentComponents = Object.values(mdData).filter(component => component.data.parent);
  // loop over each parent component
  for (const parent of parentComponents) {
    let componentsHTML = '';
    for (const component of parent.data.components) {
      const repoComponent = `${parent.repo}/${component}`;
      const simObject = components[repoComponent];
      const simCount = simObject ? Object.keys(simObject).length : 0;
      const sims = simObject ? Object.keys(simObject).map(simName => {
        return {
          name: simName,
          images: simObject[simName]
        };
      }) : [];
      let markdown = mdData[component] ? mdData[component].content : `<p>No markdown content for ${component} yet.</p>`;
      markdown = new handlebars.SafeString(markdown);
      const componentContext = {
        component: component,
        sims: sims,
        simCount: simCount,
        markdown: markdown,
        repo: parent.repo
      };
      componentsHTML += singleComponentTemplate(componentContext);
    }
    contentHTML += parentComponentTemplate({
      content: new handlebars.SafeString(parent.content),
      title: parent.data.title,
      id: parent.data.category,
      componentsHTML: new handlebars.SafeString(componentsHTML)
    });
  }
  contentHTML += componentsBySimulationTemplate({
    sims: sims
  });
  contentHTML += simsByComponentTemplate({
    components: simsByComponent
  });
  return baseTemplate({
    content: contentHTML,
    parents: parentComponents.map(p => {
      const retObj = p.data;
      retObj.repo = p.repo;
      return retObj;
    })
  });
};

// handlebars helper functions
handlebars.registerHelper('componentLink', (repo, component) => {
  return new handlebars.SafeString(`<a href="https://github.com/phetsims/${repo}/blob/master/js/${component}.js">Source Code and Options</a>`);
});
handlebars.registerHelper('simPageLink', simName => {
  return new handlebars.SafeString(`<a href="https://phet.colorado.edu/en/simulation/${simName}" target="_blank">PhET Simulation Page</a>`);
});
handlebars.registerHelper('navList', (components, repo) => {
  let itemsHTML = components.map(c => `<li><a href="#${repo}-${c}">${c}</a></li>`).join('\n');
  itemsHTML += '<li><a href="#sims">Sorted By Simulation</a></li>';
  return `<ul class="nav bd-sidenav">${itemsHTML}</ul>`;
});

/**
 * @param data sim => componentName => [dataURLs]
 * @returns {string}
 */

module.exports = createHTMLString;

// Shortcut to use stored JSON for quick iteration. See getFromSimInMaster for writing of this data file.
const myArgs = process.argv.slice(2);
if (myArgs[0] && myArgs[0] === 'json') {
  const inputFile = myArgs[1];
  const report = createHTMLString(JSON.parse(fs.readFileSync(inputFile)));
  console.log(report);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJoYW5kbGViYXJzIiwibWFya2VkIiwibWF0dGVyIiwicGF0aCIsInNpbXNEaXJlY3RvcnkiLCJub3JtYWxpemUiLCJfX2Rpcm5hbWUiLCJwcm9jZXNzRmlsZSIsImZpbGVQYXRoIiwibWRPYmplY3QiLCJyZWFkIiwicGF0aEFycmF5Iiwic3BsaXQiLCJzZXAiLCJkb2NJZHgiLCJpbmRleE9mIiwicmVwbyIsImNvbnRlbnQiLCJqb2luIiwiZ2V0RnVsbERvY1BhdGhzIiwiZG9jRGlyIiwiZ2V0RmlsZVBhdGhzRnJvbURpciIsImRpciIsImZpbGVsaXN0IiwiaW5jbHVkZXMiLCJleGlzdHNTeW5jIiwicmVhZGRpclN5bmMiLCJmb3JFYWNoIiwiZmlsZSIsInN0YXRTeW5jIiwiaXNEaXJlY3RvcnkiLCJjb25jYXQiLCJmbGF0dGVuIiwiYXJyIiwiZ2V0SGFuZGxlYmFyc1RlbXBsYXRlIiwiZmlsZW5hbWUiLCJmdWxsUGF0aCIsImNvbXBpbGUiLCJyZWFkRmlsZVN5bmMiLCJjcmVhdGVIVE1MU3RyaW5nIiwiZGF0YSIsImNvbXBvbmVudHMiLCJzaW1zIiwic2ltc0J5Q29tcG9uZW50IiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImNvbXBvbmVudCIsIm5hbWUiLCJiYXNlVGVtcGxhdGUiLCJwYXJlbnRDb21wb25lbnRUZW1wbGF0ZSIsInNpbmdsZUNvbXBvbmVudFRlbXBsYXRlIiwiY29tcG9uZW50c0J5U2ltdWxhdGlvblRlbXBsYXRlIiwic2ltc0J5Q29tcG9uZW50VGVtcGxhdGUiLCJjb250ZW50SFRNTCIsInJlcG9zIiwiU2V0IiwiaXRlbSIsImRvY3VtZW50UGF0aHMiLCJtZERhdGEiLCJkb2NQYXRoIiwiYmFzZW5hbWUiLCJwYXJlbnRDb21wb25lbnRzIiwidmFsdWVzIiwiZmlsdGVyIiwicGFyZW50IiwiY29tcG9uZW50c0hUTUwiLCJyZXBvQ29tcG9uZW50Iiwic2ltT2JqZWN0Iiwic2ltQ291bnQiLCJsZW5ndGgiLCJzaW1OYW1lIiwiaW1hZ2VzIiwibWFya2Rvd24iLCJTYWZlU3RyaW5nIiwiY29tcG9uZW50Q29udGV4dCIsInRpdGxlIiwiaWQiLCJjYXRlZ29yeSIsInBhcmVudHMiLCJwIiwicmV0T2JqIiwicmVnaXN0ZXJIZWxwZXIiLCJpdGVtc0hUTUwiLCJjIiwibW9kdWxlIiwiZXhwb3J0cyIsIm15QXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJpbnB1dEZpbGUiLCJyZXBvcnQiLCJKU09OIiwicGFyc2UiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsiY3JlYXRlSFRNTFN0cmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb21iaW5lIEpTT04gYW5kIE1EIGludG8gYW4gSFRNTCByZXBvcnQuXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuXHJcbi8vIGNvbnN0IGdldE1hcmtkb3duRmlsZUFzSFRNTCA9IHJlcXVpcmUoICcuL2dldE1hcmtkb3duRmlsZUFzSFRNTCcgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZnMnICk7XHJcbmNvbnN0IGhhbmRsZWJhcnMgPSByZXF1aXJlKCAnaGFuZGxlYmFycycgKTtcclxuY29uc3QgbWFya2VkID0gcmVxdWlyZSggJ21hcmtlZCcgKTtcclxuY29uc3QgbWF0dGVyID0gcmVxdWlyZSggJ2dyYXktbWF0dGVyJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtc3RhdGVtZW50LW1hdGNoXHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKCAncGF0aCcgKTtcclxuXHJcbi8vIGNvbnN0IGFwaVVybCA9ICcnO1xyXG5jb25zdCBzaW1zRGlyZWN0b3J5ID0gcGF0aC5ub3JtYWxpemUoIGAke19fZGlybmFtZX0vLi4vLi5gICk7XHJcblxyXG4vLyByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSAnZGF0YScgYW5kICdjb250ZW50JyBrZXlzXHJcbmZ1bmN0aW9uIHByb2Nlc3NGaWxlKCBmaWxlUGF0aCApIHtcclxuXHJcbiAgLy8gZ2V0IHRoZSBmcm9udCBtYXR0ZXIgb2JqZWN0XHJcbiAgY29uc3QgbWRPYmplY3QgPSBtYXR0ZXIucmVhZCggZmlsZVBhdGggKTtcclxuICBjb25zdCBwYXRoQXJyYXkgPSBmaWxlUGF0aC5zcGxpdCggcGF0aC5zZXAgKTtcclxuICBjb25zdCBkb2NJZHggPSBwYXRoQXJyYXkuaW5kZXhPZiggJ2RvYycgKTtcclxuICBjb25zdCByZXBvID0gcGF0aEFycmF5WyBkb2NJZHggLSAxIF07XHJcbiAgbWRPYmplY3QuY29udGVudCA9IG1hcmtlZCggbWRPYmplY3QuY29udGVudCApLnNwbGl0KCAnPGltZyBzcmM9XCJpbWFnZXMvJyApLmpvaW4oIGA8aW1nIHNyYz1cImltYWdlcy8ke3JlcG99L2AgKTtcclxuICBtZE9iamVjdC5yZXBvID0gcmVwbztcclxuICByZXR1cm4gbWRPYmplY3Q7XHJcbn1cclxuXHJcbi8vIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgYSBsaXN0IG9mIGFsbCBmaWxlcGF0aHMgZm9yIGZpbGVzIHdpdGhpbiBhIGBkb2NgIGRpcmVjdG9yeSBmb3IgYSBnaXZlbiBzaW0gcmVwb1xyXG5mdW5jdGlvbiBnZXRGdWxsRG9jUGF0aHMoIHJlcG8gKSB7XHJcbiAgY29uc3QgZG9jRGlyID0gcGF0aC5qb2luKCBzaW1zRGlyZWN0b3J5LCByZXBvLCAnZG9jJyApO1xyXG4gIHJldHVybiBnZXRGaWxlUGF0aHNGcm9tRGlyKCBkb2NEaXIsIFtdICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZpbGVQYXRoc0Zyb21EaXIoIGRpciwgZmlsZWxpc3QgPSBbXSApIHtcclxuICBpZiAoICEoIGRpci5pbmNsdWRlcyggJ3RlbXBsYXRlcycgKSB8fCBkaXIuaW5jbHVkZXMoICdpbWFnZXMnICkgKSAmJiBmcy5leGlzdHNTeW5jKCBkaXIgKSApIHtcclxuICAgIGZzLnJlYWRkaXJTeW5jKCBkaXIgKS5mb3JFYWNoKCBmaWxlID0+IHtcclxuICAgICAgZmlsZWxpc3QgPSBmcy5zdGF0U3luYyggcGF0aC5qb2luKCBkaXIsIGZpbGUgKSApLmlzRGlyZWN0b3J5KClcclxuICAgICAgICAgICAgICAgICA/IGdldEZpbGVQYXRoc0Zyb21EaXIoIHBhdGguam9pbiggZGlyLCBmaWxlICksIGZpbGVsaXN0IClcclxuICAgICAgICAgICAgICAgICA6IGZpbGVsaXN0LmNvbmNhdCggcGF0aC5qb2luKCBkaXIsIGZpbGUgKSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuICByZXR1cm4gZmlsZWxpc3Q7XHJcbn1cclxuXHJcbi8vIGZsYXR0ZW5zIGEgbXVsdGlkaW1lbnNpb25hbCBhcnJheVxyXG5mdW5jdGlvbiBmbGF0dGVuKCBhcnIgKSB7XHJcbiAgcmV0dXJuIFtdLmNvbmNhdCggLi4uYXJyICk7XHJcbn1cclxuXHJcbi8vIGNvbXBpbGUgYW5kIGdldCB0aGUgZ2l2ZW4gdGVtcGxhdGUgZmlsZVxyXG5mdW5jdGlvbiBnZXRIYW5kbGViYXJzVGVtcGxhdGUoIGZpbGVuYW1lICkge1xyXG4gIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5ub3JtYWxpemUoIGAke19fZGlybmFtZX0vLi4vdGVtcGxhdGVzLyR7ZmlsZW5hbWV9YCApO1xyXG4gIHJldHVybiBoYW5kbGViYXJzLmNvbXBpbGUoIGZzLnJlYWRGaWxlU3luYyggZnVsbFBhdGgsICd1dGY4JyApICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgZGF0YSBvYmplY3QgaGFzIGxldmVscyBsaWtlIHNpbXM9PmNvbXBvbmVudHM9PmRhdGFVUkxzXHJcbiAqIFNvIGVhY2ggc2ltS2V5IGlzIGFub3RoZXIgb2JqZWN0XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gc2VlIGBnZXRGcm9tU2ltSW5NYXN0ZXJgIGZvciBtb3JlIGRldGFpbHMuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gdGhlIEhUTUxcclxuICovXHJcbmNvbnN0IGNyZWF0ZUhUTUxTdHJpbmcgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuICBjb25zdCBjb21wb25lbnRzID0gZGF0YS5jb21wb25lbnRzO1xyXG4gIGNvbnN0IHNpbXMgPSBkYXRhLnNpbXM7XHJcblxyXG4gIC8vIG9yZ2FuaXplIHRoZSBkYXRhIGZvciB0aGUgXCJzaW1zIGJ5IGNvbXBvbmVudFwiIHZpZXdcclxuICBjb25zdCBzaW1zQnlDb21wb25lbnQgPSBPYmplY3Qua2V5cyggY29tcG9uZW50cyApLm1hcCggY29tcG9uZW50ID0+IHtcclxuICAgIHJldHVybiB7IG5hbWU6IGNvbXBvbmVudCwgc2ltczogT2JqZWN0LmtleXMoIGNvbXBvbmVudHNbIGNvbXBvbmVudCBdICkgfTtcclxuICB9ICk7XHJcblxyXG4gIGNvbnN0IGJhc2VUZW1wbGF0ZSA9IGdldEhhbmRsZWJhcnNUZW1wbGF0ZSggJ2Jhc2UuaHRtbCcgKTtcclxuICBjb25zdCBwYXJlbnRDb21wb25lbnRUZW1wbGF0ZSA9IGdldEhhbmRsZWJhcnNUZW1wbGF0ZSggJ3BhcmVudENvbXBvbmVudC5odG1sJyApO1xyXG4gIGNvbnN0IHNpbmdsZUNvbXBvbmVudFRlbXBsYXRlID0gZ2V0SGFuZGxlYmFyc1RlbXBsYXRlKCAnc2luZ2xlQ29tcG9uZW50Lmh0bWwnICk7XHJcbiAgY29uc3QgY29tcG9uZW50c0J5U2ltdWxhdGlvblRlbXBsYXRlID0gZ2V0SGFuZGxlYmFyc1RlbXBsYXRlKCAnY29tcG9uZW50c0J5U2ltdWxhdGlvbi5odG1sJyApO1xyXG4gIGNvbnN0IHNpbXNCeUNvbXBvbmVudFRlbXBsYXRlID0gZ2V0SGFuZGxlYmFyc1RlbXBsYXRlKCAnc2ltc0J5Q29tcG9uZW50Lmh0bWwnICk7XHJcbiAgbGV0IGNvbnRlbnRIVE1MID0gJyc7XHJcblxyXG4gIC8vIGdldCBsaXN0IG9mIGZpbGVzIGluIGFsbCBkb2NzLyBkaXJlY3RvcmllcywgZXhjbHVkaW5nIGJpbmRlciAoY2FuIGJlIGFzeW5jKVxyXG4gIGNvbnN0IHJlcG9zID0gbmV3IFNldCggT2JqZWN0LmtleXMoIGNvbXBvbmVudHMgKS5tYXAoIGl0ZW0gPT4gaXRlbS5zcGxpdCggJy8nIClbIDAgXSApICk7XHJcbiAgY29uc3QgZG9jdW1lbnRQYXRocyA9IGZsYXR0ZW4oIFsgLi4ucmVwb3MgXS5tYXAoIGdldEZ1bGxEb2NQYXRocyApICk7XHJcblxyXG4gIGNvbnN0IG1kRGF0YSA9IHt9O1xyXG4gIGZvciAoIGNvbnN0IGRvY1BhdGggb2YgZG9jdW1lbnRQYXRocyApIHtcclxuICAgIGNvbnN0IG5hbWUgPSBwYXRoLmJhc2VuYW1lKCBkb2NQYXRoLCAnLm1kJyApO1xyXG4gICAgbWREYXRhWyBuYW1lIF0gPSBwcm9jZXNzRmlsZSggZG9jUGF0aCApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFyZW50Q29tcG9uZW50cyA9IE9iamVjdC52YWx1ZXMoIG1kRGF0YSApLmZpbHRlciggY29tcG9uZW50ID0+IGNvbXBvbmVudC5kYXRhLnBhcmVudCApO1xyXG4gIC8vIGxvb3Agb3ZlciBlYWNoIHBhcmVudCBjb21wb25lbnRcclxuICBmb3IgKCBjb25zdCBwYXJlbnQgb2YgcGFyZW50Q29tcG9uZW50cyApIHtcclxuICAgIGxldCBjb21wb25lbnRzSFRNTCA9ICcnO1xyXG5cclxuICAgIGZvciAoIGNvbnN0IGNvbXBvbmVudCBvZiBwYXJlbnQuZGF0YS5jb21wb25lbnRzICkge1xyXG4gICAgICBjb25zdCByZXBvQ29tcG9uZW50ID0gYCR7cGFyZW50LnJlcG99LyR7Y29tcG9uZW50fWA7XHJcbiAgICAgIGNvbnN0IHNpbU9iamVjdCA9IGNvbXBvbmVudHNbIHJlcG9Db21wb25lbnQgXTtcclxuICAgICAgY29uc3Qgc2ltQ291bnQgPSBzaW1PYmplY3QgPyBPYmplY3Qua2V5cyggc2ltT2JqZWN0ICkubGVuZ3RoIDogMDtcclxuICAgICAgY29uc3Qgc2ltcyA9IHNpbU9iamVjdCA/XHJcbiAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyggc2ltT2JqZWN0ICkubWFwKCBzaW1OYW1lID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzaW1OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGltYWdlczogc2ltT2JqZWN0WyBzaW1OYW1lIF1cclxuICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgIH0gKSA6IFtdO1xyXG5cclxuICAgICAgbGV0IG1hcmtkb3duID0gbWREYXRhWyBjb21wb25lbnQgXSA/IG1kRGF0YVsgY29tcG9uZW50IF0uY29udGVudCA6IGA8cD5ObyBtYXJrZG93biBjb250ZW50IGZvciAke2NvbXBvbmVudH0geWV0LjwvcD5gO1xyXG4gICAgICBtYXJrZG93biA9IG5ldyBoYW5kbGViYXJzLlNhZmVTdHJpbmcoIG1hcmtkb3duICk7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudENvbnRleHQgPSB7XHJcbiAgICAgICAgY29tcG9uZW50OiBjb21wb25lbnQsXHJcbiAgICAgICAgc2ltczogc2ltcyxcclxuICAgICAgICBzaW1Db3VudDogc2ltQ291bnQsXHJcbiAgICAgICAgbWFya2Rvd246IG1hcmtkb3duLFxyXG4gICAgICAgIHJlcG86IHBhcmVudC5yZXBvXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb21wb25lbnRzSFRNTCArPSBzaW5nbGVDb21wb25lbnRUZW1wbGF0ZSggY29tcG9uZW50Q29udGV4dCApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRlbnRIVE1MICs9IHBhcmVudENvbXBvbmVudFRlbXBsYXRlKCB7XHJcbiAgICAgIGNvbnRlbnQ6IG5ldyBoYW5kbGViYXJzLlNhZmVTdHJpbmcoIHBhcmVudC5jb250ZW50ICksXHJcbiAgICAgIHRpdGxlOiBwYXJlbnQuZGF0YS50aXRsZSxcclxuICAgICAgaWQ6IHBhcmVudC5kYXRhLmNhdGVnb3J5LFxyXG4gICAgICBjb21wb25lbnRzSFRNTDogbmV3IGhhbmRsZWJhcnMuU2FmZVN0cmluZyggY29tcG9uZW50c0hUTUwgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgY29udGVudEhUTUwgKz0gY29tcG9uZW50c0J5U2ltdWxhdGlvblRlbXBsYXRlKCB7IHNpbXM6IHNpbXMgfSApO1xyXG5cclxuICBjb250ZW50SFRNTCArPSBzaW1zQnlDb21wb25lbnRUZW1wbGF0ZSggeyBjb21wb25lbnRzOiBzaW1zQnlDb21wb25lbnQgfSApO1xyXG5cclxuICByZXR1cm4gYmFzZVRlbXBsYXRlKCB7XHJcbiAgICBjb250ZW50OiBjb250ZW50SFRNTCwgcGFyZW50czogcGFyZW50Q29tcG9uZW50cy5tYXAoIHAgPT4ge1xyXG4gICAgICBjb25zdCByZXRPYmogPSBwLmRhdGE7XHJcbiAgICAgIHJldE9iai5yZXBvID0gcC5yZXBvO1xyXG4gICAgICByZXR1cm4gcmV0T2JqO1xyXG4gICAgfSApXHJcbiAgfSApO1xyXG59O1xyXG5cclxuLy8gaGFuZGxlYmFycyBoZWxwZXIgZnVuY3Rpb25zXHJcbmhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoICdjb21wb25lbnRMaW5rJywgKCByZXBvLCBjb21wb25lbnQgKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBoYW5kbGViYXJzLlNhZmVTdHJpbmcoXHJcbiAgICBgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy8ke3JlcG99L2Jsb2IvbWFzdGVyL2pzLyR7Y29tcG9uZW50fS5qc1wiPlNvdXJjZSBDb2RlIGFuZCBPcHRpb25zPC9hPmBcclxuICApO1xyXG59ICk7XHJcblxyXG5oYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCAnc2ltUGFnZUxpbmsnLCBzaW1OYW1lID0+IHtcclxuICByZXR1cm4gbmV3IGhhbmRsZWJhcnMuU2FmZVN0cmluZyhcclxuICAgIGA8YSBocmVmPVwiaHR0cHM6Ly9waGV0LmNvbG9yYWRvLmVkdS9lbi9zaW11bGF0aW9uLyR7c2ltTmFtZX1cIiB0YXJnZXQ9XCJfYmxhbmtcIj5QaEVUIFNpbXVsYXRpb24gUGFnZTwvYT5gXHJcbiAgKTtcclxufSApO1xyXG5cclxuaGFuZGxlYmFycy5yZWdpc3RlckhlbHBlciggJ25hdkxpc3QnLCAoIGNvbXBvbmVudHMsIHJlcG8gKSA9PiB7XHJcbiAgbGV0IGl0ZW1zSFRNTCA9IGNvbXBvbmVudHMubWFwKCBjID0+IGA8bGk+PGEgaHJlZj1cIiMke3JlcG99LSR7Y31cIj4ke2N9PC9hPjwvbGk+YCApLmpvaW4oICdcXG4nICk7XHJcbiAgaXRlbXNIVE1MICs9ICc8bGk+PGEgaHJlZj1cIiNzaW1zXCI+U29ydGVkIEJ5IFNpbXVsYXRpb248L2E+PC9saT4nO1xyXG4gIHJldHVybiBgPHVsIGNsYXNzPVwibmF2IGJkLXNpZGVuYXZcIj4ke2l0ZW1zSFRNTH08L3VsPmA7XHJcbn0gKTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gZGF0YSBzaW0gPT4gY29tcG9uZW50TmFtZSA9PiBbZGF0YVVSTHNdXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVIVE1MU3RyaW5nO1xyXG5cclxuLy8gU2hvcnRjdXQgdG8gdXNlIHN0b3JlZCBKU09OIGZvciBxdWljayBpdGVyYXRpb24uIFNlZSBnZXRGcm9tU2ltSW5NYXN0ZXIgZm9yIHdyaXRpbmcgb2YgdGhpcyBkYXRhIGZpbGUuXHJcbmNvbnN0IG15QXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSggMiApO1xyXG5pZiAoIG15QXJnc1sgMCBdICYmIG15QXJnc1sgMCBdID09PSAnanNvbicgKSB7XHJcbiAgY29uc3QgaW5wdXRGaWxlID0gbXlBcmdzWyAxIF07XHJcbiAgY29uc3QgcmVwb3J0ID0gY3JlYXRlSFRNTFN0cmluZyggSlNPTi5wYXJzZSggZnMucmVhZEZpbGVTeW5jKCBpbnB1dEZpbGUgKSApICk7XHJcbiAgY29uc29sZS5sb2coIHJlcG9ydCApO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7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