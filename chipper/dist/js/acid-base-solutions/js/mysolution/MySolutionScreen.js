// Copyright 2014-2023, University of Colorado Boulder

/**
 * The 'My Solution' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Node, Rectangle } from '../../../scenery/js/imports.js';
import acidBaseSolutions from '../acidBaseSolutions.js';
import AcidBaseSolutionsStrings from '../AcidBaseSolutionsStrings.js';
import ABSColors from '../common/ABSColors.js';
import createParticleNode from '../common/view/createParticleNode.js';
import MySolutionModel from './model/MySolutionModel.js';
import MySolutionScreenView from './view/MySolutionScreenView.js';
export default class MySolutionScreen extends Screen {
  constructor(tandem) {
    const options = {
      name: AcidBaseSolutionsStrings.screen.mySolutionStringProperty,
      backgroundColorProperty: new Property(ABSColors.SCREEN_BACKGROUND),
      homeScreenIcon: createScreenIcon(),
      tandem: tandem
    };
    super(() => new MySolutionModel(tandem.createTandem('model')), model => new MySolutionScreenView(model, tandem.createTandem('view')), options);
  }
}

/**
 * Creates the icon for this screen.
 */
function createScreenIcon() {
  const width = Screen.MINIMUM_HOME_SCREEN_ICON_SIZE.width;
  const height = Screen.MINIMUM_HOME_SCREEN_ICON_SIZE.height;
  const h3oNode = createParticleNode('H3O');
  const ohNode = createParticleNode('OH');

  // Uniformly scale the particles to make them fill the available space.
  const xSpace = 0.06 * width; // horizontal space around the particles
  const maxWidth = Math.max(h3oNode.width, ohNode.width);
  const particleScale = 0.5 * (width - 3 * xSpace) / maxWidth;
  h3oNode.setScaleMagnitude(particleScale, particleScale);
  ohNode.setScaleMagnitude(particleScale, particleScale);

  // position the particles
  h3oNode.left = xSpace;
  ohNode.right = width - xSpace;
  h3oNode.centerY = height / 2;
  ohNode.centerY = h3oNode.centerY;
  const background = new Rectangle(0, 0, width, height, {
    fill: 'white'
  });
  const iconNode = new Node({
    children: [background, h3oNode, ohNode]
  });
  return new ScreenIcon(iconNode, {
    maxIconWidthProportion: 1,
    maxIconHeightProportion: 1
  });
}
acidBaseSolutions.register('MySolutionScreen', MySolutionScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJOb2RlIiwiUmVjdGFuZ2xlIiwiYWNpZEJhc2VTb2x1dGlvbnMiLCJBY2lkQmFzZVNvbHV0aW9uc1N0cmluZ3MiLCJBQlNDb2xvcnMiLCJjcmVhdGVQYXJ0aWNsZU5vZGUiLCJNeVNvbHV0aW9uTW9kZWwiLCJNeVNvbHV0aW9uU2NyZWVuVmlldyIsIk15U29sdXRpb25TY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwibXlTb2x1dGlvblN0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJTQ1JFRU5fQkFDS0dST1VORCIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlU2NyZWVuSWNvbiIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwid2lkdGgiLCJNSU5JTVVNX0hPTUVfU0NSRUVOX0lDT05fU0laRSIsImhlaWdodCIsImgzb05vZGUiLCJvaE5vZGUiLCJ4U3BhY2UiLCJtYXhXaWR0aCIsIk1hdGgiLCJtYXgiLCJwYXJ0aWNsZVNjYWxlIiwic2V0U2NhbGVNYWduaXR1ZGUiLCJsZWZ0IiwicmlnaHQiLCJjZW50ZXJZIiwiYmFja2dyb3VuZCIsImZpbGwiLCJpY29uTm9kZSIsImNoaWxkcmVuIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNeVNvbHV0aW9uU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnTXkgU29sdXRpb24nIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4sIHsgU2NyZWVuT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgYWNpZEJhc2VTb2x1dGlvbnMgZnJvbSAnLi4vYWNpZEJhc2VTb2x1dGlvbnMuanMnO1xyXG5pbXBvcnQgQWNpZEJhc2VTb2x1dGlvbnNTdHJpbmdzIGZyb20gJy4uL0FjaWRCYXNlU29sdXRpb25zU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBBQlNDb2xvcnMgZnJvbSAnLi4vY29tbW9uL0FCU0NvbG9ycy5qcyc7XHJcbmltcG9ydCBjcmVhdGVQYXJ0aWNsZU5vZGUgZnJvbSAnLi4vY29tbW9uL3ZpZXcvY3JlYXRlUGFydGljbGVOb2RlLmpzJztcclxuaW1wb3J0IE15U29sdXRpb25Nb2RlbCBmcm9tICcuL21vZGVsL015U29sdXRpb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBNeVNvbHV0aW9uU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvTXlTb2x1dGlvblNjcmVlblZpZXcuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlTb2x1dGlvblNjcmVlbiBleHRlbmRzIFNjcmVlbjxNeVNvbHV0aW9uTW9kZWwsIE15U29sdXRpb25TY3JlZW5WaWV3PiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9uczogU2NyZWVuT3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogQWNpZEJhc2VTb2x1dGlvbnNTdHJpbmdzLnNjcmVlbi5teVNvbHV0aW9uU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoIEFCU0NvbG9ycy5TQ1JFRU5fQkFDS0dST1VORCApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogY3JlYXRlU2NyZWVuSWNvbigpLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IE15U29sdXRpb25Nb2RlbCggdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBNeVNvbHV0aW9uU2NyZWVuVmlldyggbW9kZWwsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyB0aGUgaWNvbiBmb3IgdGhpcyBzY3JlZW4uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTY3JlZW5JY29uKCk6IFNjcmVlbkljb24ge1xyXG5cclxuICBjb25zdCB3aWR0aCA9IFNjcmVlbi5NSU5JTVVNX0hPTUVfU0NSRUVOX0lDT05fU0laRS53aWR0aDtcclxuICBjb25zdCBoZWlnaHQgPSBTY3JlZW4uTUlOSU1VTV9IT01FX1NDUkVFTl9JQ09OX1NJWkUuaGVpZ2h0O1xyXG5cclxuICBjb25zdCBoM29Ob2RlID0gY3JlYXRlUGFydGljbGVOb2RlKCAnSDNPJyApO1xyXG4gIGNvbnN0IG9oTm9kZSA9IGNyZWF0ZVBhcnRpY2xlTm9kZSggJ09IJyApO1xyXG5cclxuICAvLyBVbmlmb3JtbHkgc2NhbGUgdGhlIHBhcnRpY2xlcyB0byBtYWtlIHRoZW0gZmlsbCB0aGUgYXZhaWxhYmxlIHNwYWNlLlxyXG4gIGNvbnN0IHhTcGFjZSA9IDAuMDYgKiB3aWR0aDsgLy8gaG9yaXpvbnRhbCBzcGFjZSBhcm91bmQgdGhlIHBhcnRpY2xlc1xyXG4gIGNvbnN0IG1heFdpZHRoID0gTWF0aC5tYXgoIGgzb05vZGUud2lkdGgsIG9oTm9kZS53aWR0aCApO1xyXG4gIGNvbnN0IHBhcnRpY2xlU2NhbGUgPSAwLjUgKiAoIHdpZHRoIC0gMyAqIHhTcGFjZSApIC8gbWF4V2lkdGg7XHJcbiAgaDNvTm9kZS5zZXRTY2FsZU1hZ25pdHVkZSggcGFydGljbGVTY2FsZSwgcGFydGljbGVTY2FsZSApO1xyXG4gIG9oTm9kZS5zZXRTY2FsZU1hZ25pdHVkZSggcGFydGljbGVTY2FsZSwgcGFydGljbGVTY2FsZSApO1xyXG5cclxuICAvLyBwb3NpdGlvbiB0aGUgcGFydGljbGVzXHJcbiAgaDNvTm9kZS5sZWZ0ID0geFNwYWNlO1xyXG4gIG9oTm9kZS5yaWdodCA9IHdpZHRoIC0geFNwYWNlO1xyXG4gIGgzb05vZGUuY2VudGVyWSA9IGhlaWdodCAvIDI7XHJcbiAgb2hOb2RlLmNlbnRlclkgPSBoM29Ob2RlLmNlbnRlclk7XHJcblxyXG4gIGNvbnN0IGJhY2tncm91bmQgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCB7IGZpbGw6ICd3aGl0ZScgfSApO1xyXG5cclxuICBjb25zdCBpY29uTm9kZSA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGJhY2tncm91bmQsIGgzb05vZGUsIG9oTm9kZSBdIH0gKTtcclxuXHJcbiAgcmV0dXJuIG5ldyBTY3JlZW5JY29uKCBpY29uTm9kZSwge1xyXG4gICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgfSApO1xyXG59XHJcblxyXG5hY2lkQmFzZVNvbHV0aW9ucy5yZWdpc3RlciggJ015U29sdXRpb25TY3JlZW4nLCBNeVNvbHV0aW9uU2NyZWVuICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxN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