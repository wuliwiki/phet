// Copyright 2014-2023, University of Colorado Boulder

/**
 * InitialConcentrationSlider is a logarithmic slider for controlling concentration.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import acidBaseSolutions from '../../acidBaseSolutions.js';
import LogSlider from '../../common/view/LogSlider.js';
const TICK_LABEL_OPTIONS = {
  font: new PhetFont(10)
};
export default class InitialConcentrationSlider extends LogSlider {
  constructor(concentrationProperty, concentrationRange, tandem) {
    super(concentrationProperty, concentrationRange, {
      trackSize: new Dimension2(125, 4),
      thumbSize: new Dimension2(12, 24),
      thumbTouchAreaXDilation: 6,
      thumbTouchAreaYDilation: 6,
      majorTickLength: 12,
      tickLabelSpacing: 2,
      tandem: tandem
    });

    // tick marks - note that these are hard-coded to a specific range and values
    assert && assert(concentrationRange.min === 0.001 && concentrationRange.max === 1);
    const tickValues = [0.001, 0.01, 0.1, 1];
    tickValues.forEach(tickValue => this.addMajorTick(tickValue, new Text(tickValue, TICK_LABEL_OPTIONS)));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
acidBaseSolutions.register('InitialConcentrationSlider', InitialConcentrationSlider);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiUGhldEZvbnQiLCJUZXh0IiwiYWNpZEJhc2VTb2x1dGlvbnMiLCJMb2dTbGlkZXIiLCJUSUNLX0xBQkVMX09QVElPTlMiLCJmb250IiwiSW5pdGlhbENvbmNlbnRyYXRpb25TbGlkZXIiLCJjb25zdHJ1Y3RvciIsImNvbmNlbnRyYXRpb25Qcm9wZXJ0eSIsImNvbmNlbnRyYXRpb25SYW5nZSIsInRhbmRlbSIsInRyYWNrU2l6ZSIsInRodW1iU2l6ZSIsInRodW1iVG91Y2hBcmVhWERpbGF0aW9uIiwidGh1bWJUb3VjaEFyZWFZRGlsYXRpb24iLCJtYWpvclRpY2tMZW5ndGgiLCJ0aWNrTGFiZWxTcGFjaW5nIiwiYXNzZXJ0IiwibWluIiwibWF4IiwidGlja1ZhbHVlcyIsImZvckVhY2giLCJ0aWNrVmFsdWUiLCJhZGRNYWpvclRpY2siLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbml0aWFsQ29uY2VudHJhdGlvblNsaWRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsQ29uY2VudHJhdGlvblNsaWRlciBpcyBhIGxvZ2FyaXRobWljIHNsaWRlciBmb3IgY29udHJvbGxpbmcgY29uY2VudHJhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFJhbmdlV2l0aFZhbHVlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZVdpdGhWYWx1ZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IGFjaWRCYXNlU29sdXRpb25zIGZyb20gJy4uLy4uL2FjaWRCYXNlU29sdXRpb25zLmpzJztcclxuaW1wb3J0IExvZ1NsaWRlciBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Mb2dTbGlkZXIuanMnO1xyXG5cclxuY29uc3QgVElDS19MQUJFTF9PUFRJT05TID0ge1xyXG4gIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTAgKVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5pdGlhbENvbmNlbnRyYXRpb25TbGlkZXIgZXh0ZW5kcyBMb2dTbGlkZXIge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvbmNlbnRyYXRpb25Qcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgY29uY2VudHJhdGlvblJhbmdlOiBSYW5nZVdpdGhWYWx1ZSwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIGNvbmNlbnRyYXRpb25Qcm9wZXJ0eSwgY29uY2VudHJhdGlvblJhbmdlLCB7XHJcbiAgICAgIHRyYWNrU2l6ZTogbmV3IERpbWVuc2lvbjIoIDEyNSwgNCApLFxyXG4gICAgICB0aHVtYlNpemU6IG5ldyBEaW1lbnNpb24yKCAxMiwgMjQgKSxcclxuICAgICAgdGh1bWJUb3VjaEFyZWFYRGlsYXRpb246IDYsXHJcbiAgICAgIHRodW1iVG91Y2hBcmVhWURpbGF0aW9uOiA2LFxyXG4gICAgICBtYWpvclRpY2tMZW5ndGg6IDEyLFxyXG4gICAgICB0aWNrTGFiZWxTcGFjaW5nOiAyLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHRpY2sgbWFya3MgLSBub3RlIHRoYXQgdGhlc2UgYXJlIGhhcmQtY29kZWQgdG8gYSBzcGVjaWZpYyByYW5nZSBhbmQgdmFsdWVzXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb25jZW50cmF0aW9uUmFuZ2UubWluID09PSAwLjAwMSAmJiBjb25jZW50cmF0aW9uUmFuZ2UubWF4ID09PSAxICk7XHJcbiAgICBjb25zdCB0aWNrVmFsdWVzID0gWyAwLjAwMSwgMC4wMSwgMC4xLCAxIF07XHJcbiAgICB0aWNrVmFsdWVzLmZvckVhY2goIHRpY2tWYWx1ZSA9PiB0aGlzLmFkZE1ham9yVGljayggdGlja1ZhbHVlLCBuZXcgVGV4dCggdGlja1ZhbHVlLCBUSUNLX0xBQkVMX09QVElPTlMgKSApICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuYWNpZEJhc2VTb2x1dGlvbnMucmVnaXN0ZXIoICdJbml0aWFsQ29uY2VudHJhdGlvblNsaWRlcicsIEluaXRpYWxDb25jZW50cmF0aW9uU2xpZGVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFVBQVUsTUFBTSxrQ0FBa0M7QUFFekQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBRXhELE9BQU9DLGlCQUFpQixNQUFNLDRCQUE0QjtBQUMxRCxPQUFPQyxTQUFTLE1BQU0sZ0NBQWdDO0FBRXRELE1BQU1DLGtCQUFrQixHQUFHO0VBQ3pCQyxJQUFJLEVBQUUsSUFBSUwsUUFBUSxDQUFFLEVBQUc7QUFDekIsQ0FBQztBQUVELGVBQWUsTUFBTU0sMEJBQTBCLFNBQVNILFNBQVMsQ0FBQztFQUV6REksV0FBV0EsQ0FBRUMscUJBQXVDLEVBQUVDLGtCQUFrQyxFQUFFQyxNQUFjLEVBQUc7SUFFaEgsS0FBSyxDQUFFRixxQkFBcUIsRUFBRUMsa0JBQWtCLEVBQUU7TUFDaERFLFNBQVMsRUFBRSxJQUFJWixVQUFVLENBQUUsR0FBRyxFQUFFLENBQUUsQ0FBQztNQUNuQ2EsU0FBUyxFQUFFLElBQUliLFVBQVUsQ0FBRSxFQUFFLEVBQUUsRUFBRyxDQUFDO01BQ25DYyx1QkFBdUIsRUFBRSxDQUFDO01BQzFCQyx1QkFBdUIsRUFBRSxDQUFDO01BQzFCQyxlQUFlLEVBQUUsRUFBRTtNQUNuQkMsZ0JBQWdCLEVBQUUsQ0FBQztNQUNuQk4sTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQzs7SUFFSDtJQUNBTyxNQUFNLElBQUlBLE1BQU0sQ0FBRVIsa0JBQWtCLENBQUNTLEdBQUcsS0FBSyxLQUFLLElBQUlULGtCQUFrQixDQUFDVSxHQUFHLEtBQUssQ0FBRSxDQUFDO0lBQ3BGLE1BQU1DLFVBQVUsR0FBRyxDQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBRTtJQUMxQ0EsVUFBVSxDQUFDQyxPQUFPLENBQUVDLFNBQVMsSUFBSSxJQUFJLENBQUNDLFlBQVksQ0FBRUQsU0FBUyxFQUFFLElBQUlyQixJQUFJLENBQUVxQixTQUFTLEVBQUVsQixrQkFBbUIsQ0FBRSxDQUFFLENBQUM7RUFDOUc7RUFFZ0JvQixPQUFPQSxDQUFBLEVBQVM7SUFDOUJQLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNPLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXRCLGlCQUFpQixDQUFDdUIsUUFBUSxDQUFFLDRCQUE0QixFQUFFbkIsMEJBQTJCLENBQUMifQ==