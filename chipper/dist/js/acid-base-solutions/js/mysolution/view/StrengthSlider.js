// Copyright 2014-2022, University of Colorado Boulder

/**
 * StrengthSlider is a logarithmic slider for controlling strength.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import acidBaseSolutions from '../../acidBaseSolutions.js';
import AcidBaseSolutionsStrings from '../../AcidBaseSolutionsStrings.js';
import LogSlider from '../../common/view/LogSlider.js';

// constants
const TICK_LABEL_OPTIONS = {
  font: new PhetFont(12),
  maxWidth: 80 // determined empirically
};

export default class StrengthSlider extends LogSlider {
  constructor(strengthProperty, strengthRange, weakStrongProperty, tandem) {
    super(strengthProperty, strengthRange, {
      visibleProperty: new DerivedProperty([weakStrongProperty], weakStrong => weakStrong === 'weak', {
        tandem: tandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO
      }),
      trackSize: new Dimension2(125, 4),
      thumbSize: new Dimension2(12, 24),
      majorTickLength: 12,
      thumbTouchAreaXDilation: 6,
      thumbTouchAreaYDilation: 6,
      tandem: tandem
    });

    // tick marks
    this.addMajorTick(strengthRange.min, new Text(AcidBaseSolutionsStrings.weakerStringProperty, TICK_LABEL_OPTIONS));
    this.addMajorTick(strengthRange.max, new Text(AcidBaseSolutionsStrings.strongerStringProperty, TICK_LABEL_OPTIONS));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
acidBaseSolutions.register('StrengthSlider', StrengthSlider);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJEaW1lbnNpb24yIiwiUGhldEZvbnQiLCJUZXh0IiwiQm9vbGVhbklPIiwiYWNpZEJhc2VTb2x1dGlvbnMiLCJBY2lkQmFzZVNvbHV0aW9uc1N0cmluZ3MiLCJMb2dTbGlkZXIiLCJUSUNLX0xBQkVMX09QVElPTlMiLCJmb250IiwibWF4V2lkdGgiLCJTdHJlbmd0aFNsaWRlciIsImNvbnN0cnVjdG9yIiwic3RyZW5ndGhQcm9wZXJ0eSIsInN0cmVuZ3RoUmFuZ2UiLCJ3ZWFrU3Ryb25nUHJvcGVydHkiLCJ0YW5kZW0iLCJ2aXNpYmxlUHJvcGVydHkiLCJ3ZWFrU3Ryb25nIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvVmFsdWVUeXBlIiwidHJhY2tTaXplIiwidGh1bWJTaXplIiwibWFqb3JUaWNrTGVuZ3RoIiwidGh1bWJUb3VjaEFyZWFYRGlsYXRpb24iLCJ0aHVtYlRvdWNoQXJlYVlEaWxhdGlvbiIsImFkZE1ham9yVGljayIsIm1pbiIsIndlYWtlclN0cmluZ1Byb3BlcnR5IiwibWF4Iiwic3Ryb25nZXJTdHJpbmdQcm9wZXJ0eSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN0cmVuZ3RoU2xpZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFN0cmVuZ3RoU2xpZGVyIGlzIGEgbG9nYXJpdGhtaWMgc2xpZGVyIGZvciBjb250cm9sbGluZyBzdHJlbmd0aC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU3RyaW5nVW5pb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1N0cmluZ1VuaW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBSYW5nZVdpdGhWYWx1ZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2VXaXRoVmFsdWUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBCb29sZWFuSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0Jvb2xlYW5JTy5qcyc7XHJcbmltcG9ydCBhY2lkQmFzZVNvbHV0aW9ucyBmcm9tICcuLi8uLi9hY2lkQmFzZVNvbHV0aW9ucy5qcyc7XHJcbmltcG9ydCBBY2lkQmFzZVNvbHV0aW9uc1N0cmluZ3MgZnJvbSAnLi4vLi4vQWNpZEJhc2VTb2x1dGlvbnNTdHJpbmdzLmpzJztcclxuaW1wb3J0IHsgV2Vha1N0cm9uZ1R5cGUgfSBmcm9tICcuL015U29sdXRpb25QYW5lbC5qcyc7XHJcbmltcG9ydCBMb2dTbGlkZXIgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTG9nU2xpZGVyLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBUSUNLX0xBQkVMX09QVElPTlMgPSB7XHJcbiAgZm9udDogbmV3IFBoZXRGb250KCAxMiApLFxyXG4gIG1heFdpZHRoOiA4MCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHJlbmd0aFNsaWRlciBleHRlbmRzIExvZ1NsaWRlciB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3RyZW5ndGhQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPixcclxuICAgICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoUmFuZ2U6IFJhbmdlV2l0aFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgd2Vha1N0cm9uZ1Byb3BlcnR5OiBTdHJpbmdVbmlvblByb3BlcnR5PFdlYWtTdHJvbmdUeXBlPixcclxuICAgICAgICAgICAgICAgICAgICAgIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCBzdHJlbmd0aFByb3BlcnR5LCBzdHJlbmd0aFJhbmdlLCB7XHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB3ZWFrU3Ryb25nUHJvcGVydHkgXSwgd2Vha1N0cm9uZyA9PiAoIHdlYWtTdHJvbmcgPT09ICd3ZWFrJyApLCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICAgIHBoZXRpb1ZhbHVlVHlwZTogQm9vbGVhbklPXHJcbiAgICAgIH0gKSxcclxuICAgICAgdHJhY2tTaXplOiBuZXcgRGltZW5zaW9uMiggMTI1LCA0ICksXHJcbiAgICAgIHRodW1iU2l6ZTogbmV3IERpbWVuc2lvbjIoIDEyLCAyNCApLFxyXG4gICAgICBtYWpvclRpY2tMZW5ndGg6IDEyLFxyXG4gICAgICB0aHVtYlRvdWNoQXJlYVhEaWxhdGlvbjogNixcclxuICAgICAgdGh1bWJUb3VjaEFyZWFZRGlsYXRpb246IDYsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gdGljayBtYXJrc1xyXG4gICAgdGhpcy5hZGRNYWpvclRpY2soIHN0cmVuZ3RoUmFuZ2UubWluLCBuZXcgVGV4dCggQWNpZEJhc2VTb2x1dGlvbnNTdHJpbmdzLndlYWtlclN0cmluZ1Byb3BlcnR5LCBUSUNLX0xBQkVMX09QVElPTlMgKSApO1xyXG4gICAgdGhpcy5hZGRNYWpvclRpY2soIHN0cmVuZ3RoUmFuZ2UubWF4LCBuZXcgVGV4dCggQWNpZEJhc2VTb2x1dGlvbnNTdHJpbmdzLnN0cm9uZ2VyU3RyaW5nUHJvcGVydHksIFRJQ0tfTEFCRUxfT1BUSU9OUyApICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuYWNpZEJhc2VTb2x1dGlvbnMucmVnaXN0ZXIoICdTdHJlbmd0aFNsaWRlcicsIFN0cmVuZ3RoU2xpZGVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFHcEUsT0FBT0MsVUFBVSxNQUFNLGtDQUFrQztBQUV6RCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFFeEQsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxPQUFPQyxpQkFBaUIsTUFBTSw0QkFBNEI7QUFDMUQsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBRXhFLE9BQU9DLFNBQVMsTUFBTSxnQ0FBZ0M7O0FBRXREO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUc7RUFDekJDLElBQUksRUFBRSxJQUFJUCxRQUFRLENBQUUsRUFBRyxDQUFDO0VBQ3hCUSxRQUFRLEVBQUUsRUFBRSxDQUFDO0FBQ2YsQ0FBQzs7QUFFRCxlQUFlLE1BQU1DLGNBQWMsU0FBU0osU0FBUyxDQUFDO0VBRTdDSyxXQUFXQSxDQUFFQyxnQkFBa0MsRUFDbENDLGFBQTZCLEVBQzdCQyxrQkFBdUQsRUFDdkRDLE1BQWMsRUFBRztJQUVuQyxLQUFLLENBQUVILGdCQUFnQixFQUFFQyxhQUFhLEVBQUU7TUFDdENHLGVBQWUsRUFBRSxJQUFJakIsZUFBZSxDQUFFLENBQUVlLGtCQUFrQixDQUFFLEVBQUVHLFVBQVUsSUFBTUEsVUFBVSxLQUFLLE1BQVEsRUFBRTtRQUNyR0YsTUFBTSxFQUFFQSxNQUFNLENBQUNHLFlBQVksQ0FBRSxpQkFBa0IsQ0FBQztRQUNoREMsZUFBZSxFQUFFaEI7TUFDbkIsQ0FBRSxDQUFDO01BQ0hpQixTQUFTLEVBQUUsSUFBSXBCLFVBQVUsQ0FBRSxHQUFHLEVBQUUsQ0FBRSxDQUFDO01BQ25DcUIsU0FBUyxFQUFFLElBQUlyQixVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztNQUNuQ3NCLGVBQWUsRUFBRSxFQUFFO01BQ25CQyx1QkFBdUIsRUFBRSxDQUFDO01BQzFCQyx1QkFBdUIsRUFBRSxDQUFDO01BQzFCVCxNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDVSxZQUFZLENBQUVaLGFBQWEsQ0FBQ2EsR0FBRyxFQUFFLElBQUl4QixJQUFJLENBQUVHLHdCQUF3QixDQUFDc0Isb0JBQW9CLEVBQUVwQixrQkFBbUIsQ0FBRSxDQUFDO0lBQ3JILElBQUksQ0FBQ2tCLFlBQVksQ0FBRVosYUFBYSxDQUFDZSxHQUFHLEVBQUUsSUFBSTFCLElBQUksQ0FBRUcsd0JBQXdCLENBQUN3QixzQkFBc0IsRUFBRXRCLGtCQUFtQixDQUFFLENBQUM7RUFDekg7RUFFZ0J1QixPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTFCLGlCQUFpQixDQUFDNEIsUUFBUSxDQUFFLGdCQUFnQixFQUFFdEIsY0FBZSxDQUFDIn0=