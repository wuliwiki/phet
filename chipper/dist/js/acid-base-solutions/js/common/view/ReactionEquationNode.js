// Copyright 2014-2022, University of Colorado Boulder

/**
 * This node displays the reaction equation that appears below the beaker.
 * It displays the equation that corresponds to the selected solution type.
 *
 * @author Andrey Zelenkov (Mlearner)
 */

import { Node } from '../../../../scenery/js/imports.js';
import acidBaseSolutions from '../../acidBaseSolutions.js';
import ReactionEquationFactory from './ReactionEquationFactory.js';
export default class ReactionEquationNode extends Node {
  constructor(beaker, solutionTypeProperty, tandem) {
    super({
      children: [ReactionEquationFactory.createWaterEquation(solutionTypeProperty), ReactionEquationFactory.createStrongAcidEquation(solutionTypeProperty), ReactionEquationFactory.createWeakAcidEquation(solutionTypeProperty), ReactionEquationFactory.createStrongBaseEquation(solutionTypeProperty), ReactionEquationFactory.createWeakBaseEquation(solutionTypeProperty)],
      tandem: tandem
    });

    // center below the beaker
    this.boundsProperty.link(bounds => {
      this.centerX = beaker.position.x;
      this.top = beaker.position.y + 10;
    });
    this.addLinkedElement(solutionTypeProperty, {
      tandem: tandem.createTandem(solutionTypeProperty.tandem.name)
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
acidBaseSolutions.register('ReactionEquationNode', ReactionEquationNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiYWNpZEJhc2VTb2x1dGlvbnMiLCJSZWFjdGlvbkVxdWF0aW9uRmFjdG9yeSIsIlJlYWN0aW9uRXF1YXRpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJiZWFrZXIiLCJzb2x1dGlvblR5cGVQcm9wZXJ0eSIsInRhbmRlbSIsImNoaWxkcmVuIiwiY3JlYXRlV2F0ZXJFcXVhdGlvbiIsImNyZWF0ZVN0cm9uZ0FjaWRFcXVhdGlvbiIsImNyZWF0ZVdlYWtBY2lkRXF1YXRpb24iLCJjcmVhdGVTdHJvbmdCYXNlRXF1YXRpb24iLCJjcmVhdGVXZWFrQmFzZUVxdWF0aW9uIiwiYm91bmRzUHJvcGVydHkiLCJsaW5rIiwiYm91bmRzIiwiY2VudGVyWCIsInBvc2l0aW9uIiwieCIsInRvcCIsInkiLCJhZGRMaW5rZWRFbGVtZW50IiwiY3JlYXRlVGFuZGVtIiwibmFtZSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJlYWN0aW9uRXF1YXRpb25Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgbm9kZSBkaXNwbGF5cyB0aGUgcmVhY3Rpb24gZXF1YXRpb24gdGhhdCBhcHBlYXJzIGJlbG93IHRoZSBiZWFrZXIuXHJcbiAqIEl0IGRpc3BsYXlzIHRoZSBlcXVhdGlvbiB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBzZWxlY3RlZCBzb2x1dGlvbiB0eXBlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJleSBaZWxlbmtvdiAoTWxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBhY2lkQmFzZVNvbHV0aW9ucyBmcm9tICcuLi8uLi9hY2lkQmFzZVNvbHV0aW9ucy5qcyc7XHJcbmltcG9ydCBSZWFjdGlvbkVxdWF0aW9uRmFjdG9yeSBmcm9tICcuL1JlYWN0aW9uRXF1YXRpb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IEJlYWtlciBmcm9tICcuLi9tb2RlbC9CZWFrZXIuanMnO1xyXG5pbXBvcnQgeyBTb2x1dGlvblR5cGUgfSBmcm9tICcuLi9tb2RlbC9Tb2x1dGlvblR5cGUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1JlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhY3Rpb25FcXVhdGlvbk5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBiZWFrZXI6IEJlYWtlciwgc29sdXRpb25UeXBlUHJvcGVydHk6IFJlYWRPbmx5UHJvcGVydHk8U29sdXRpb25UeXBlPiwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBSZWFjdGlvbkVxdWF0aW9uRmFjdG9yeS5jcmVhdGVXYXRlckVxdWF0aW9uKCBzb2x1dGlvblR5cGVQcm9wZXJ0eSApLFxyXG4gICAgICAgIFJlYWN0aW9uRXF1YXRpb25GYWN0b3J5LmNyZWF0ZVN0cm9uZ0FjaWRFcXVhdGlvbiggc29sdXRpb25UeXBlUHJvcGVydHkgKSxcclxuICAgICAgICBSZWFjdGlvbkVxdWF0aW9uRmFjdG9yeS5jcmVhdGVXZWFrQWNpZEVxdWF0aW9uKCBzb2x1dGlvblR5cGVQcm9wZXJ0eSApLFxyXG4gICAgICAgIFJlYWN0aW9uRXF1YXRpb25GYWN0b3J5LmNyZWF0ZVN0cm9uZ0Jhc2VFcXVhdGlvbiggc29sdXRpb25UeXBlUHJvcGVydHkgKSxcclxuICAgICAgICBSZWFjdGlvbkVxdWF0aW9uRmFjdG9yeS5jcmVhdGVXZWFrQmFzZUVxdWF0aW9uKCBzb2x1dGlvblR5cGVQcm9wZXJ0eSApXHJcbiAgICAgIF0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gY2VudGVyIGJlbG93IHRoZSBiZWFrZXJcclxuICAgIHRoaXMuYm91bmRzUHJvcGVydHkubGluayggYm91bmRzID0+IHtcclxuICAgICAgdGhpcy5jZW50ZXJYID0gYmVha2VyLnBvc2l0aW9uLng7XHJcbiAgICAgIHRoaXMudG9wID0gYmVha2VyLnBvc2l0aW9uLnkgKyAxMDtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIHNvbHV0aW9uVHlwZVByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggc29sdXRpb25UeXBlUHJvcGVydHkudGFuZGVtLm5hbWUgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmFjaWRCYXNlU29sdXRpb25zLnJlZ2lzdGVyKCAnUmVhY3Rpb25FcXVhdGlvbk5vZGUnLCBSZWFjdGlvbkVxdWF0aW9uTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsaUJBQWlCLE1BQU0sNEJBQTRCO0FBQzFELE9BQU9DLHVCQUF1QixNQUFNLDhCQUE4QjtBQU1sRSxlQUFlLE1BQU1DLG9CQUFvQixTQUFTSCxJQUFJLENBQUM7RUFFOUNJLFdBQVdBLENBQUVDLE1BQWMsRUFBRUMsb0JBQW9ELEVBQUVDLE1BQWMsRUFBRztJQUV6RyxLQUFLLENBQUU7TUFDTEMsUUFBUSxFQUFFLENBQ1JOLHVCQUF1QixDQUFDTyxtQkFBbUIsQ0FBRUgsb0JBQXFCLENBQUMsRUFDbkVKLHVCQUF1QixDQUFDUSx3QkFBd0IsQ0FBRUosb0JBQXFCLENBQUMsRUFDeEVKLHVCQUF1QixDQUFDUyxzQkFBc0IsQ0FBRUwsb0JBQXFCLENBQUMsRUFDdEVKLHVCQUF1QixDQUFDVSx3QkFBd0IsQ0FBRU4sb0JBQXFCLENBQUMsRUFDeEVKLHVCQUF1QixDQUFDVyxzQkFBc0IsQ0FBRVAsb0JBQXFCLENBQUMsQ0FDdkU7TUFDREMsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ08sY0FBYyxDQUFDQyxJQUFJLENBQUVDLE1BQU0sSUFBSTtNQUNsQyxJQUFJLENBQUNDLE9BQU8sR0FBR1osTUFBTSxDQUFDYSxRQUFRLENBQUNDLENBQUM7TUFDaEMsSUFBSSxDQUFDQyxHQUFHLEdBQUdmLE1BQU0sQ0FBQ2EsUUFBUSxDQUFDRyxDQUFDLEdBQUcsRUFBRTtJQUNuQyxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLGdCQUFnQixDQUFFaEIsb0JBQW9CLEVBQUU7TUFDM0NDLE1BQU0sRUFBRUEsTUFBTSxDQUFDZ0IsWUFBWSxDQUFFakIsb0JBQW9CLENBQUNDLE1BQU0sQ0FBQ2lCLElBQUs7SUFDaEUsQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBeEIsaUJBQWlCLENBQUMwQixRQUFRLENBQUUsc0JBQXNCLEVBQUV4QixvQkFBcUIsQ0FBQyJ9