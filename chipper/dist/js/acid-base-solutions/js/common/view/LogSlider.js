// Copyright 2022, University of Colorado Boulder

/**
 * LogSlider takes a logarithmic model Property, and adapts it to a linear Property as required by Slider.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DynamicProperty from '../../../../axon/js/DynamicProperty.js';
import Property from '../../../../axon/js/Property.js';
import Range from '../../../../dot/js/Range.js';
import Utils from '../../../../dot/js/Utils.js';
import Slider from '../../../../sun/js/Slider.js';
import acidBaseSolutions from '../../acidBaseSolutions.js';
export default class LogSlider extends Slider {
  /**
   * @param logValueProperty - the logarithmic Property
   * @param logValueRange - the logarithmic range of logValueProperty
   * @param providedOptions
   */
  constructor(logValueProperty, logValueRange, providedOptions) {
    // Property that maps between log and linear scales
    const linearValueProperty = new DynamicProperty(new Property(logValueProperty), {
      bidirectional: true,
      reentrant: true,
      // necessary because bidirectional:true
      map: concentration => LogSlider.logToLinear(concentration),
      inverseMap: sliderValue => LogSlider.linearToLog(sliderValue)
    });

    // Convert range from concentration (log)  to sliderValue (linear)
    const linearValueRange = new Range(LogSlider.logToLinear(logValueRange.min), LogSlider.logToLinear(logValueRange.max));
    super(linearValueProperty, linearValueRange, providedOptions);

    // Because linearValueProperty is adapting between linear and log scales, link logValueProperty so that
    // this looks like a standard PhET-iO Slider.
    this.addLinkedElement(logValueProperty, {
      tandem: providedOptions.tandem.createTandem('valueProperty')
    });
    this.disposeLogSlider = () => {
      linearValueProperty.dispose();
    };
  }
  dispose() {
    this.disposeLogSlider();
    super.dispose();
  }
  addMajorTick(logValue, label) {
    super.addMajorTick(LogSlider.logToLinear(logValue), label);
  }
  addMinorTick(logValue, label) {
    super.addMinorTick(LogSlider.logToLinear(logValue), label);
  }
  static logToLinear(value) {
    return Utils.log10(value);
  }
  static linearToLog(value) {
    return Utils.toFixedNumber(Math.pow(10, value), 10);
  }
}
acidBaseSolutions.register('LogSlider', LogSlider);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEeW5hbWljUHJvcGVydHkiLCJQcm9wZXJ0eSIsIlJhbmdlIiwiVXRpbHMiLCJTbGlkZXIiLCJhY2lkQmFzZVNvbHV0aW9ucyIsIkxvZ1NsaWRlciIsImNvbnN0cnVjdG9yIiwibG9nVmFsdWVQcm9wZXJ0eSIsImxvZ1ZhbHVlUmFuZ2UiLCJwcm92aWRlZE9wdGlvbnMiLCJsaW5lYXJWYWx1ZVByb3BlcnR5IiwiYmlkaXJlY3Rpb25hbCIsInJlZW50cmFudCIsIm1hcCIsImNvbmNlbnRyYXRpb24iLCJsb2dUb0xpbmVhciIsImludmVyc2VNYXAiLCJzbGlkZXJWYWx1ZSIsImxpbmVhclRvTG9nIiwibGluZWFyVmFsdWVSYW5nZSIsIm1pbiIsIm1heCIsImFkZExpbmtlZEVsZW1lbnQiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJkaXNwb3NlTG9nU2xpZGVyIiwiZGlzcG9zZSIsImFkZE1ham9yVGljayIsImxvZ1ZhbHVlIiwibGFiZWwiLCJhZGRNaW5vclRpY2siLCJ2YWx1ZSIsImxvZzEwIiwidG9GaXhlZE51bWJlciIsIk1hdGgiLCJwb3ciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxvZ1NsaWRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTG9nU2xpZGVyIHRha2VzIGEgbG9nYXJpdGhtaWMgbW9kZWwgUHJvcGVydHksIGFuZCBhZGFwdHMgaXQgdG8gYSBsaW5lYXIgUHJvcGVydHkgYXMgcmVxdWlyZWQgYnkgU2xpZGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEeW5hbWljUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EeW5hbWljUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgUmFuZ2VXaXRoVmFsdWUgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlV2l0aFZhbHVlLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFNsaWRlciwgeyBTbGlkZXJPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1NsaWRlci5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYWNpZEJhc2VTb2x1dGlvbnMgZnJvbSAnLi4vLi4vYWNpZEJhc2VTb2x1dGlvbnMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBMb2dTbGlkZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTbGlkZXJPcHRpb25zICYgUGlja1JlcXVpcmVkPFNsaWRlck9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ1NsaWRlciBleHRlbmRzIFNsaWRlciB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUxvZ1NsaWRlcjogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGxvZ1ZhbHVlUHJvcGVydHkgLSB0aGUgbG9nYXJpdGhtaWMgUHJvcGVydHlcclxuICAgKiBAcGFyYW0gbG9nVmFsdWVSYW5nZSAtIHRoZSBsb2dhcml0aG1pYyByYW5nZSBvZiBsb2dWYWx1ZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbG9nVmFsdWVQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgbG9nVmFsdWVSYW5nZTogUmFuZ2VXaXRoVmFsdWUsIHByb3ZpZGVkT3B0aW9uczogTG9nU2xpZGVyT3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBQcm9wZXJ0eSB0aGF0IG1hcHMgYmV0d2VlbiBsb2cgYW5kIGxpbmVhciBzY2FsZXNcclxuICAgIGNvbnN0IGxpbmVhclZhbHVlUHJvcGVydHkgPSBuZXcgRHluYW1pY1Byb3BlcnR5KCBuZXcgUHJvcGVydHkoIGxvZ1ZhbHVlUHJvcGVydHkgKSwge1xyXG4gICAgICBiaWRpcmVjdGlvbmFsOiB0cnVlLFxyXG4gICAgICByZWVudHJhbnQ6IHRydWUsIC8vIG5lY2Vzc2FyeSBiZWNhdXNlIGJpZGlyZWN0aW9uYWw6dHJ1ZVxyXG4gICAgICBtYXA6ICggY29uY2VudHJhdGlvbjogbnVtYmVyICkgPT4gTG9nU2xpZGVyLmxvZ1RvTGluZWFyKCBjb25jZW50cmF0aW9uICksXHJcbiAgICAgIGludmVyc2VNYXA6ICggc2xpZGVyVmFsdWU6IG51bWJlciApID0+IExvZ1NsaWRlci5saW5lYXJUb0xvZyggc2xpZGVyVmFsdWUgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENvbnZlcnQgcmFuZ2UgZnJvbSBjb25jZW50cmF0aW9uIChsb2cpICB0byBzbGlkZXJWYWx1ZSAobGluZWFyKVxyXG4gICAgY29uc3QgbGluZWFyVmFsdWVSYW5nZSA9IG5ldyBSYW5nZSggTG9nU2xpZGVyLmxvZ1RvTGluZWFyKCBsb2dWYWx1ZVJhbmdlLm1pbiApLCBMb2dTbGlkZXIubG9nVG9MaW5lYXIoIGxvZ1ZhbHVlUmFuZ2UubWF4ICkgKTtcclxuXHJcbiAgICBzdXBlciggbGluZWFyVmFsdWVQcm9wZXJ0eSwgbGluZWFyVmFsdWVSYW5nZSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gQmVjYXVzZSBsaW5lYXJWYWx1ZVByb3BlcnR5IGlzIGFkYXB0aW5nIGJldHdlZW4gbGluZWFyIGFuZCBsb2cgc2NhbGVzLCBsaW5rIGxvZ1ZhbHVlUHJvcGVydHkgc28gdGhhdFxyXG4gICAgLy8gdGhpcyBsb29rcyBsaWtlIGEgc3RhbmRhcmQgUGhFVC1pTyBTbGlkZXIuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIGxvZ1ZhbHVlUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBwcm92aWRlZE9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZhbHVlUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VMb2dTbGlkZXIgPSAoKSA9PiB7XHJcbiAgICAgIGxpbmVhclZhbHVlUHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlTG9nU2xpZGVyKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgYWRkTWFqb3JUaWNrKCBsb2dWYWx1ZTogbnVtYmVyLCBsYWJlbD86IE5vZGUgKTogdm9pZCB7XHJcbiAgICBzdXBlci5hZGRNYWpvclRpY2soIExvZ1NsaWRlci5sb2dUb0xpbmVhciggbG9nVmFsdWUgKSwgbGFiZWwgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBhZGRNaW5vclRpY2soIGxvZ1ZhbHVlOiBudW1iZXIsIGxhYmVsPzogTm9kZSApOiB2b2lkIHtcclxuICAgIHN1cGVyLmFkZE1pbm9yVGljayggTG9nU2xpZGVyLmxvZ1RvTGluZWFyKCBsb2dWYWx1ZSApLCBsYWJlbCApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBsb2dUb0xpbmVhciggdmFsdWU6IG51bWJlciApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFV0aWxzLmxvZzEwKCB2YWx1ZSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBsaW5lYXJUb0xvZyggdmFsdWU6IG51bWJlciApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFV0aWxzLnRvRml4ZWROdW1iZXIoIE1hdGgucG93KCAxMCwgdmFsdWUgKSwgMTAgKTtcclxuICB9XHJcbn1cclxuXHJcbmFjaWRCYXNlU29sdXRpb25zLnJlZ2lzdGVyKCAnTG9nU2xpZGVyJywgTG9nU2xpZGVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBRS9DLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFHL0MsT0FBT0MsTUFBTSxNQUF5Qiw4QkFBOEI7QUFFcEUsT0FBT0MsaUJBQWlCLE1BQU0sNEJBQTRCO0FBTTFELGVBQWUsTUFBTUMsU0FBUyxTQUFTRixNQUFNLENBQUM7RUFJNUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNTRyxXQUFXQSxDQUFFQyxnQkFBa0MsRUFBRUMsYUFBNkIsRUFBRUMsZUFBaUMsRUFBRztJQUV6SDtJQUNBLE1BQU1DLG1CQUFtQixHQUFHLElBQUlYLGVBQWUsQ0FBRSxJQUFJQyxRQUFRLENBQUVPLGdCQUFpQixDQUFDLEVBQUU7TUFDakZJLGFBQWEsRUFBRSxJQUFJO01BQ25CQyxTQUFTLEVBQUUsSUFBSTtNQUFFO01BQ2pCQyxHQUFHLEVBQUlDLGFBQXFCLElBQU1ULFNBQVMsQ0FBQ1UsV0FBVyxDQUFFRCxhQUFjLENBQUM7TUFDeEVFLFVBQVUsRUFBSUMsV0FBbUIsSUFBTVosU0FBUyxDQUFDYSxXQUFXLENBQUVELFdBQVk7SUFDNUUsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUUsZ0JBQWdCLEdBQUcsSUFBSWxCLEtBQUssQ0FBRUksU0FBUyxDQUFDVSxXQUFXLENBQUVQLGFBQWEsQ0FBQ1ksR0FBSSxDQUFDLEVBQUVmLFNBQVMsQ0FBQ1UsV0FBVyxDQUFFUCxhQUFhLENBQUNhLEdBQUksQ0FBRSxDQUFDO0lBRTVILEtBQUssQ0FBRVgsbUJBQW1CLEVBQUVTLGdCQUFnQixFQUFFVixlQUFnQixDQUFDOztJQUUvRDtJQUNBO0lBQ0EsSUFBSSxDQUFDYSxnQkFBZ0IsQ0FBRWYsZ0JBQWdCLEVBQUU7TUFDdkNnQixNQUFNLEVBQUVkLGVBQWUsQ0FBQ2MsTUFBTSxDQUFDQyxZQUFZLENBQUUsZUFBZ0I7SUFDL0QsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxNQUFNO01BQzVCZixtQkFBbUIsQ0FBQ2dCLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0QsZ0JBQWdCLENBQUMsQ0FBQztJQUN2QixLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0VBRWdCQyxZQUFZQSxDQUFFQyxRQUFnQixFQUFFQyxLQUFZLEVBQVM7SUFDbkUsS0FBSyxDQUFDRixZQUFZLENBQUV0QixTQUFTLENBQUNVLFdBQVcsQ0FBRWEsUUFBUyxDQUFDLEVBQUVDLEtBQU0sQ0FBQztFQUNoRTtFQUVnQkMsWUFBWUEsQ0FBRUYsUUFBZ0IsRUFBRUMsS0FBWSxFQUFTO0lBQ25FLEtBQUssQ0FBQ0MsWUFBWSxDQUFFekIsU0FBUyxDQUFDVSxXQUFXLENBQUVhLFFBQVMsQ0FBQyxFQUFFQyxLQUFNLENBQUM7RUFDaEU7RUFFQSxPQUFjZCxXQUFXQSxDQUFFZ0IsS0FBYSxFQUFXO0lBQ2pELE9BQU83QixLQUFLLENBQUM4QixLQUFLLENBQUVELEtBQU0sQ0FBQztFQUM3QjtFQUVBLE9BQWNiLFdBQVdBLENBQUVhLEtBQWEsRUFBVztJQUNqRCxPQUFPN0IsS0FBSyxDQUFDK0IsYUFBYSxDQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBRSxFQUFFLEVBQUVKLEtBQU0sQ0FBQyxFQUFFLEVBQUcsQ0FBQztFQUN6RDtBQUNGO0FBRUEzQixpQkFBaUIsQ0FBQ2dDLFFBQVEsQ0FBRSxXQUFXLEVBQUUvQixTQUFVLENBQUMifQ==