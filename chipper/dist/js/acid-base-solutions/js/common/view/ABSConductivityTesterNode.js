// Copyright 2015-2022, University of Colorado Boulder

/**
 * Conductivity tester, adapts the model to scenery-phet.ConductivityTesterNode.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import Range from '../../../../dot/js/Range.js';
import ConductivityTesterNode from '../../../../scenery-phet/js/ConductivityTesterNode.js';
import acidBaseSolutions from '../../acidBaseSolutions.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
export default class ABSConductivityTesterNode extends ConductivityTesterNode {
  constructor(conductivityTester, toolModeProperty, tandem) {
    super(conductivityTester.brightnessProperty, new Property(conductivityTester.bulbPosition), conductivityTester.positiveProbePositionProperty, conductivityTester.negativeProbePositionProperty, {
      probeSize: conductivityTester.probeSize,
      probeDragYRange: new Range(conductivityTester.probeDragYRange.min - conductivityTester.bulbPosition.y, conductivityTester.probeDragYRange.max - conductivityTester.bulbPosition.y),
      visibleProperty: new DerivedProperty([toolModeProperty], toolMode => toolMode === 'conductivity', {
        tandem: tandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO
      }),
      tandem: tandem
    });
    this.addLinkedElement(conductivityTester, {
      tandem: tandem.createTandem(conductivityTester.tandem.name)
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
acidBaseSolutions.register('ABSConductivityTesterNode', ABSConductivityTesterNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlJhbmdlIiwiQ29uZHVjdGl2aXR5VGVzdGVyTm9kZSIsImFjaWRCYXNlU29sdXRpb25zIiwiRGVyaXZlZFByb3BlcnR5IiwiQm9vbGVhbklPIiwiQUJTQ29uZHVjdGl2aXR5VGVzdGVyTm9kZSIsImNvbnN0cnVjdG9yIiwiY29uZHVjdGl2aXR5VGVzdGVyIiwidG9vbE1vZGVQcm9wZXJ0eSIsInRhbmRlbSIsImJyaWdodG5lc3NQcm9wZXJ0eSIsImJ1bGJQb3NpdGlvbiIsInBvc2l0aXZlUHJvYmVQb3NpdGlvblByb3BlcnR5IiwibmVnYXRpdmVQcm9iZVBvc2l0aW9uUHJvcGVydHkiLCJwcm9iZVNpemUiLCJwcm9iZURyYWdZUmFuZ2UiLCJtaW4iLCJ5IiwibWF4IiwidmlzaWJsZVByb3BlcnR5IiwidG9vbE1vZGUiLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9WYWx1ZVR5cGUiLCJhZGRMaW5rZWRFbGVtZW50IiwibmFtZSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkFCU0NvbmR1Y3Rpdml0eVRlc3Rlck5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29uZHVjdGl2aXR5IHRlc3RlciwgYWRhcHRzIHRoZSBtb2RlbCB0byBzY2VuZXJ5LXBoZXQuQ29uZHVjdGl2aXR5VGVzdGVyTm9kZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgQ29uZHVjdGl2aXR5VGVzdGVyTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQ29uZHVjdGl2aXR5VGVzdGVyTm9kZS5qcyc7XHJcbmltcG9ydCBhY2lkQmFzZVNvbHV0aW9ucyBmcm9tICcuLi8uLi9hY2lkQmFzZVNvbHV0aW9ucy5qcyc7XHJcbmltcG9ydCBDb25kdWN0aXZpdHlUZXN0ZXIgZnJvbSAnLi4vbW9kZWwvQ29uZHVjdGl2aXR5VGVzdGVyLmpzJztcclxuaW1wb3J0IHsgVG9vbE1vZGUgfSBmcm9tICcuL1Rvb2xNb2RlLmpzJztcclxuaW1wb3J0IFN0cmluZ1VuaW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9TdHJpbmdVbmlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCb29sZWFuSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0Jvb2xlYW5JTy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBQlNDb25kdWN0aXZpdHlUZXN0ZXJOb2RlIGV4dGVuZHMgQ29uZHVjdGl2aXR5VGVzdGVyTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY29uZHVjdGl2aXR5VGVzdGVyOiBDb25kdWN0aXZpdHlUZXN0ZXIsIHRvb2xNb2RlUHJvcGVydHk6IFN0cmluZ1VuaW9uUHJvcGVydHk8VG9vbE1vZGU+LCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggY29uZHVjdGl2aXR5VGVzdGVyLmJyaWdodG5lc3NQcm9wZXJ0eSxcclxuICAgICAgbmV3IFByb3BlcnR5KCBjb25kdWN0aXZpdHlUZXN0ZXIuYnVsYlBvc2l0aW9uICksXHJcbiAgICAgIGNvbmR1Y3Rpdml0eVRlc3Rlci5wb3NpdGl2ZVByb2JlUG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgY29uZHVjdGl2aXR5VGVzdGVyLm5lZ2F0aXZlUHJvYmVQb3NpdGlvblByb3BlcnR5LCB7XHJcbiAgICAgICAgcHJvYmVTaXplOiBjb25kdWN0aXZpdHlUZXN0ZXIucHJvYmVTaXplLFxyXG4gICAgICAgIHByb2JlRHJhZ1lSYW5nZTogbmV3IFJhbmdlKFxyXG4gICAgICAgICAgY29uZHVjdGl2aXR5VGVzdGVyLnByb2JlRHJhZ1lSYW5nZS5taW4gLSBjb25kdWN0aXZpdHlUZXN0ZXIuYnVsYlBvc2l0aW9uLnksXHJcbiAgICAgICAgICBjb25kdWN0aXZpdHlUZXN0ZXIucHJvYmVEcmFnWVJhbmdlLm1heCAtIGNvbmR1Y3Rpdml0eVRlc3Rlci5idWxiUG9zaXRpb24ueVxyXG4gICAgICAgICksXHJcbiAgICAgICAgdmlzaWJsZVByb3BlcnR5OiBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIHRvb2xNb2RlUHJvcGVydHkgXSwgdG9vbE1vZGUgPT4gKCB0b29sTW9kZSA9PT0gJ2NvbmR1Y3Rpdml0eScgKSwge1xyXG4gICAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBCb29sZWFuSU9cclxuICAgICAgICB9ICksXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgICAgfSApO1xyXG5cclxuICAgIHRoaXMuYWRkTGlua2VkRWxlbWVudCggY29uZHVjdGl2aXR5VGVzdGVyLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggY29uZHVjdGl2aXR5VGVzdGVyLnRhbmRlbS5uYW1lIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5hY2lkQmFzZVNvbHV0aW9ucy5yZWdpc3RlciggJ0FCU0NvbmR1Y3Rpdml0eVRlc3Rlck5vZGUnLCBBQlNDb25kdWN0aXZpdHlUZXN0ZXJOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxzQkFBc0IsTUFBTSx1REFBdUQ7QUFDMUYsT0FBT0MsaUJBQWlCLE1BQU0sNEJBQTRCO0FBSzFELE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUVoRSxlQUFlLE1BQU1DLHlCQUF5QixTQUFTSixzQkFBc0IsQ0FBQztFQUVyRUssV0FBV0EsQ0FBRUMsa0JBQXNDLEVBQUVDLGdCQUErQyxFQUFFQyxNQUFjLEVBQUc7SUFFNUgsS0FBSyxDQUFFRixrQkFBa0IsQ0FBQ0csa0JBQWtCLEVBQzFDLElBQUlYLFFBQVEsQ0FBRVEsa0JBQWtCLENBQUNJLFlBQWEsQ0FBQyxFQUMvQ0osa0JBQWtCLENBQUNLLDZCQUE2QixFQUNoREwsa0JBQWtCLENBQUNNLDZCQUE2QixFQUFFO01BQ2hEQyxTQUFTLEVBQUVQLGtCQUFrQixDQUFDTyxTQUFTO01BQ3ZDQyxlQUFlLEVBQUUsSUFBSWYsS0FBSyxDQUN4Qk8sa0JBQWtCLENBQUNRLGVBQWUsQ0FBQ0MsR0FBRyxHQUFHVCxrQkFBa0IsQ0FBQ0ksWUFBWSxDQUFDTSxDQUFDLEVBQzFFVixrQkFBa0IsQ0FBQ1EsZUFBZSxDQUFDRyxHQUFHLEdBQUdYLGtCQUFrQixDQUFDSSxZQUFZLENBQUNNLENBQzNFLENBQUM7TUFDREUsZUFBZSxFQUFFLElBQUloQixlQUFlLENBQUUsQ0FBRUssZ0JBQWdCLENBQUUsRUFBRVksUUFBUSxJQUFNQSxRQUFRLEtBQUssY0FBZ0IsRUFBRTtRQUN2R1gsTUFBTSxFQUFFQSxNQUFNLENBQUNZLFlBQVksQ0FBRSxpQkFBa0IsQ0FBQztRQUNoREMsZUFBZSxFQUFFbEI7TUFDbkIsQ0FBRSxDQUFDO01BQ0hLLE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7SUFFTCxJQUFJLENBQUNjLGdCQUFnQixDQUFFaEIsa0JBQWtCLEVBQUU7TUFDekNFLE1BQU0sRUFBRUEsTUFBTSxDQUFDWSxZQUFZLENBQUVkLGtCQUFrQixDQUFDRSxNQUFNLENBQUNlLElBQUs7SUFDOUQsQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdkIsaUJBQWlCLENBQUN5QixRQUFRLENBQUUsMkJBQTJCLEVBQUV0Qix5QkFBMEIsQ0FBQyJ9