// Copyright 2014-2022, University of Colorado Boulder

/**
 * ABSModel is the base class for models in the 'Acid-Base Solutions' sim.
 *
 * @author Andrey Zelenkov (Mlearner)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import StringUnionProperty from '../../../../axon/js/StringUnionProperty.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import acidBaseSolutions from '../../acidBaseSolutions.js';
import Beaker from './Beaker.js';
import ConcentrationGraph from './ConcentrationGraph.js';
import ConductivityTester from './ConductivityTester.js';
import MagnifyingGlass from './MagnifyingGlass.js';
import PHMeter from './PHMeter.js';
import PHPaper from './PHPaper.js';
export default class ABSModel {
  // type of solution that is currently selected

  // for looking up solution by SolutionType

  // pH of the selected solution

  constructor(solutions, defaultSolutionType, tandem) {
    assert && assert(_.uniqBy(solutions, solution => solution.solutionType).length === solutions.length, 'every solution must have a unique solutionType');
    this.solutionTypeProperty = new StringUnionProperty(defaultSolutionType, {
      validValues: solutions.map(solution => solution.solutionType),
      tandem: tandem.createTandem('solutionTypeProperty')
    });
    this.solutionsMap = new Map();
    solutions.forEach(solution => {
      this.solutionsMap.set(solution.solutionType, solution);
    });
    this.pHProperty = DerivedProperty.deriveAny([this.solutionTypeProperty, ...solutions.map(solution => solution.pHProperty)], () => this.solutionsMap.get(this.solutionTypeProperty.value).pHProperty.value, {
      tandem: tandem.createTandem('pHProperty'),
      phetioValueType: NumberIO
    });
    this.beaker = new Beaker();
    this.magnifyingGlass = new MagnifyingGlass(this.beaker, this.solutionsMap, this.solutionTypeProperty, tandem.createTandem('magnifyingGlass'));
    this.graph = new ConcentrationGraph(this.beaker, this.solutionsMap, this.solutionTypeProperty);
    this.pHMeter = new PHMeter(this.beaker, this.pHProperty, tandem.createTandem('pHMeter'));
    this.pHPaper = new PHPaper(this.beaker, this.pHProperty, this.solutionTypeProperty, tandem.createTandem('pHPaper'));
    this.conductivityTester = new ConductivityTester(this.beaker, this.pHProperty, tandem.createTandem('conductivityTester'));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.solutionTypeProperty.reset();
    this.solutionsMap.forEach((solution, solutionType) => solution.reset());
    this.pHMeter.reset();
    this.pHPaper.reset();
    this.conductivityTester.reset();
  }
}
acidBaseSolutions.register('ABSModel', ABSModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,