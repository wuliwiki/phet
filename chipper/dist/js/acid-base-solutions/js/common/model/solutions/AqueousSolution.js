// Copyright 2014-2022, University of Colorado Boulder

/**
 * AqueousSolution is the base class for solutions.
 *
 * A solution is a homogeneous mixture composed of two or more substances.
 * In such a mixture, a solute is dissolved in another substance, known as a solvent.
 * In an aqueous solution, the solvent is water. The substance that is produced as
 * the result of the solute dissolving is called the product.
 *
 * @author Andrey Zelenkov (Mlearner)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../../axon/js/DerivedProperty.js';
import NumberProperty from '../../../../../axon/js/NumberProperty.js';
import Utils from '../../../../../dot/js/Utils.js';
import NumberIO from '../../../../../tandem/js/types/NumberIO.js';
import acidBaseSolutions from '../../../acidBaseSolutions.js';
export default class AqueousSolution {
  /**
   * @param solutionType
   * @param strength - the strength of the solute
   * @param concentration - the initial concentration of the solute, at the start of the reaction
   * @param particles - the particles that make up the solution. The order of elements in this array determines the
   *   left-to-right order of bars in the graph, and the front-to-back rendering order of particles in the magnifying glass.
   * @param tandem
   */
  constructor(solutionType, strength, concentration, particles, tandem) {
    this.solutionType = solutionType;
    this.particles = particles;
    this.strengthProperty = new NumberProperty(strength, {
      tandem: tandem.createTandem('strengthProperty'),
      phetioReadOnly: true // because ABSConstants.STRONG_STRENGTH must be a constant
    });

    this.concentrationProperty = new NumberProperty(concentration, {
      units: 'mol/L',
      tandem: tandem.createTandem('concentrationProperty')
    });
    this.pHProperty = new DerivedProperty([this.strengthProperty, this.concentrationProperty], (strength, concentration) => {
      return -Utils.roundSymmetric(100 * Utils.log10(this.getH3OConcentration())) / 100;
    }, {
      tandem: tandem.createTandem('pHProperty'),
      phetioValueType: NumberIO
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.strengthProperty.reset();
    this.concentrationProperty.reset();
  }
  getParticleWithKey(particleKey) {
    return _.find(this.particles, particle => particle.key === particleKey) || null;
  }

  // convenience function
  getConcentration() {
    return this.concentrationProperty.value;
  }

  // convenience function
  getStrength() {
    return this.strengthProperty.value;
  }
}
acidBaseSolutions.register('AqueousSolution', AqueousSolution);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,