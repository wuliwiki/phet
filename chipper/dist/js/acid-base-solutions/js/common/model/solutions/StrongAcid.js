// Copyright 2014-2022, University of Colorado Boulder

/**
 * StrongAcid is an aqueous solution whose solute is a strong acid.
 *
 * @author Andrey Zelenkov (Mlearner)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import acidBaseSolutions from '../../../acidBaseSolutions.js';
import ABSConstants from '../../ABSConstants.js';
import AqueousSolution from './AqueousSolution.js';
import ABSColors from '../../ABSColors.js';
export default class StrongAcid extends AqueousSolution {
  constructor(tandem) {
    // particles found in this solution
    const particles = [{
      key: 'HA',
      color: ABSColors.HA,
      getConcentration: () => this.getSoluteConcentration()
    }, {
      key: 'H2O',
      color: ABSColors.H2O,
      getConcentration: () => this.getH2OConcentration()
    }, {
      key: 'A',
      color: ABSColors.A,
      getConcentration: () => this.getProductConcentration()
    }, {
      key: 'H3O',
      color: ABSColors.H3O,
      getConcentration: () => this.getH3OConcentration()
    }];
    super('strongAcid', ABSConstants.STRONG_STRENGTH, ABSConstants.CONCENTRATION_RANGE.defaultValue, particles, tandem);
  }

  // [HA] = 0
  getSoluteConcentration() {
    return 0;
  }

  // [A-] = c
  getProductConcentration() {
    return this.getConcentration();
  }

  // [H3O+] = c
  getH3OConcentration() {
    return this.getConcentration();
  }

  // [OH-] = Kw / [H3O+]
  getOHConcentration() {
    return ABSConstants.WATER_EQUILIBRIUM_CONSTANT / this.getH3OConcentration();
  }

  // [H2O] = W - c
  getH2OConcentration() {
    return ABSConstants.WATER_CONCENTRATION - this.getConcentration();
  }

  // Strong strength is a constant.
  isValidStrength(strength) {
    return strength === ABSConstants.STRONG_STRENGTH;
  }
}
acidBaseSolutions.register('StrongAcid', StrongAcid);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhY2lkQmFzZVNvbHV0aW9ucyIsIkFCU0NvbnN0YW50cyIsIkFxdWVvdXNTb2x1dGlvbiIsIkFCU0NvbG9ycyIsIlN0cm9uZ0FjaWQiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsInBhcnRpY2xlcyIsImtleSIsImNvbG9yIiwiSEEiLCJnZXRDb25jZW50cmF0aW9uIiwiZ2V0U29sdXRlQ29uY2VudHJhdGlvbiIsIkgyTyIsImdldEgyT0NvbmNlbnRyYXRpb24iLCJBIiwiZ2V0UHJvZHVjdENvbmNlbnRyYXRpb24iLCJIM08iLCJnZXRIM09Db25jZW50cmF0aW9uIiwiU1RST05HX1NUUkVOR1RIIiwiQ09OQ0VOVFJBVElPTl9SQU5HRSIsImRlZmF1bHRWYWx1ZSIsImdldE9IQ29uY2VudHJhdGlvbiIsIldBVEVSX0VRVUlMSUJSSVVNX0NPTlNUQU5UIiwiV0FURVJfQ09OQ0VOVFJBVElPTiIsImlzVmFsaWRTdHJlbmd0aCIsInN0cmVuZ3RoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdHJvbmdBY2lkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFN0cm9uZ0FjaWQgaXMgYW4gYXF1ZW91cyBzb2x1dGlvbiB3aG9zZSBzb2x1dGUgaXMgYSBzdHJvbmcgYWNpZC5cclxuICpcclxuICogQGF1dGhvciBBbmRyZXkgWmVsZW5rb3YgKE1sZWFybmVyKVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBhY2lkQmFzZVNvbHV0aW9ucyBmcm9tICcuLi8uLi8uLi9hY2lkQmFzZVNvbHV0aW9ucy5qcyc7XHJcbmltcG9ydCBBQlNDb25zdGFudHMgZnJvbSAnLi4vLi4vQUJTQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEFxdWVvdXNTb2x1dGlvbiBmcm9tICcuL0FxdWVvdXNTb2x1dGlvbi5qcyc7XHJcbmltcG9ydCBBQlNDb2xvcnMgZnJvbSAnLi4vLi4vQUJTQ29sb3JzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHsgUGFydGljbGUgfSBmcm9tICcuL1BhcnRpY2xlLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0cm9uZ0FjaWQgZXh0ZW5kcyBBcXVlb3VzU29sdXRpb24ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIC8vIHBhcnRpY2xlcyBmb3VuZCBpbiB0aGlzIHNvbHV0aW9uXHJcbiAgICBjb25zdCBwYXJ0aWNsZXM6IFBhcnRpY2xlW10gPSBbXHJcbiAgICAgIHsga2V5OiAnSEEnLCBjb2xvcjogQUJTQ29sb3JzLkhBLCBnZXRDb25jZW50cmF0aW9uOiAoKSA9PiB0aGlzLmdldFNvbHV0ZUNvbmNlbnRyYXRpb24oKSB9LFxyXG4gICAgICB7IGtleTogJ0gyTycsIGNvbG9yOiBBQlNDb2xvcnMuSDJPLCBnZXRDb25jZW50cmF0aW9uOiAoKSA9PiB0aGlzLmdldEgyT0NvbmNlbnRyYXRpb24oKSB9LFxyXG4gICAgICB7IGtleTogJ0EnLCBjb2xvcjogQUJTQ29sb3JzLkEsIGdldENvbmNlbnRyYXRpb246ICgpID0+IHRoaXMuZ2V0UHJvZHVjdENvbmNlbnRyYXRpb24oKSB9LFxyXG4gICAgICB7IGtleTogJ0gzTycsIGNvbG9yOiBBQlNDb2xvcnMuSDNPLCBnZXRDb25jZW50cmF0aW9uOiAoKSA9PiB0aGlzLmdldEgzT0NvbmNlbnRyYXRpb24oKSB9XHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCAnc3Ryb25nQWNpZCcsIEFCU0NvbnN0YW50cy5TVFJPTkdfU1RSRU5HVEgsIEFCU0NvbnN0YW50cy5DT05DRU5UUkFUSU9OX1JBTkdFLmRlZmF1bHRWYWx1ZSwgcGFydGljbGVzLCB0YW5kZW0gKTtcclxuICB9XHJcblxyXG4gIC8vIFtIQV0gPSAwXHJcbiAgcHVibGljIG92ZXJyaWRlIGdldFNvbHV0ZUNvbmNlbnRyYXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuXHJcbiAgLy8gW0EtXSA9IGNcclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0UHJvZHVjdENvbmNlbnRyYXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdldENvbmNlbnRyYXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8vIFtIM08rXSA9IGNcclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0SDNPQ29uY2VudHJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q29uY2VudHJhdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgLy8gW09ILV0gPSBLdyAvIFtIM08rXVxyXG4gIHB1YmxpYyBvdmVycmlkZSBnZXRPSENvbmNlbnRyYXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBBQlNDb25zdGFudHMuV0FURVJfRVFVSUxJQlJJVU1fQ09OU1RBTlQgLyB0aGlzLmdldEgzT0NvbmNlbnRyYXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8vIFtIMk9dID0gVyAtIGNcclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0SDJPQ29uY2VudHJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIEFCU0NvbnN0YW50cy5XQVRFUl9DT05DRU5UUkFUSU9OIC0gdGhpcy5nZXRDb25jZW50cmF0aW9uKCk7XHJcbiAgfVxyXG5cclxuICAvLyBTdHJvbmcgc3RyZW5ndGggaXMgYSBjb25zdGFudC5cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgaXNWYWxpZFN0cmVuZ3RoKCBzdHJlbmd0aDogbnVtYmVyICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICggc3RyZW5ndGggPT09IEFCU0NvbnN0YW50cy5TVFJPTkdfU1RSRU5HVEggKTtcclxuICB9XHJcbn1cclxuXHJcbmFjaWRCYXNlU29sdXRpb25zLnJlZ2lzdGVyKCAnU3Ryb25nQWNpZCcsIFN0cm9uZ0FjaWQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxpQkFBaUIsTUFBTSwrQkFBK0I7QUFDN0QsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFJMUMsZUFBZSxNQUFNQyxVQUFVLFNBQVNGLGVBQWUsQ0FBQztFQUUvQ0csV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBRW5DO0lBQ0EsTUFBTUMsU0FBcUIsR0FBRyxDQUM1QjtNQUFFQyxHQUFHLEVBQUUsSUFBSTtNQUFFQyxLQUFLLEVBQUVOLFNBQVMsQ0FBQ08sRUFBRTtNQUFFQyxnQkFBZ0IsRUFBRUEsQ0FBQSxLQUFNLElBQUksQ0FBQ0Msc0JBQXNCLENBQUM7SUFBRSxDQUFDLEVBQ3pGO01BQUVKLEdBQUcsRUFBRSxLQUFLO01BQUVDLEtBQUssRUFBRU4sU0FBUyxDQUFDVSxHQUFHO01BQUVGLGdCQUFnQixFQUFFQSxDQUFBLEtBQU0sSUFBSSxDQUFDRyxtQkFBbUIsQ0FBQztJQUFFLENBQUMsRUFDeEY7TUFBRU4sR0FBRyxFQUFFLEdBQUc7TUFBRUMsS0FBSyxFQUFFTixTQUFTLENBQUNZLENBQUM7TUFBRUosZ0JBQWdCLEVBQUVBLENBQUEsS0FBTSxJQUFJLENBQUNLLHVCQUF1QixDQUFDO0lBQUUsQ0FBQyxFQUN4RjtNQUFFUixHQUFHLEVBQUUsS0FBSztNQUFFQyxLQUFLLEVBQUVOLFNBQVMsQ0FBQ2MsR0FBRztNQUFFTixnQkFBZ0IsRUFBRUEsQ0FBQSxLQUFNLElBQUksQ0FBQ08sbUJBQW1CLENBQUM7SUFBRSxDQUFDLENBQ3pGO0lBRUQsS0FBSyxDQUFFLFlBQVksRUFBRWpCLFlBQVksQ0FBQ2tCLGVBQWUsRUFBRWxCLFlBQVksQ0FBQ21CLG1CQUFtQixDQUFDQyxZQUFZLEVBQUVkLFNBQVMsRUFBRUQsTUFBTyxDQUFDO0VBQ3ZIOztFQUVBO0VBQ2dCTSxzQkFBc0JBLENBQUEsRUFBVztJQUMvQyxPQUFPLENBQUM7RUFDVjs7RUFFQTtFQUNnQkksdUJBQXVCQSxDQUFBLEVBQVc7SUFDaEQsT0FBTyxJQUFJLENBQUNMLGdCQUFnQixDQUFDLENBQUM7RUFDaEM7O0VBRUE7RUFDZ0JPLG1CQUFtQkEsQ0FBQSxFQUFXO0lBQzVDLE9BQU8sSUFBSSxDQUFDUCxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ2hDOztFQUVBO0VBQ2dCVyxrQkFBa0JBLENBQUEsRUFBVztJQUMzQyxPQUFPckIsWUFBWSxDQUFDc0IsMEJBQTBCLEdBQUcsSUFBSSxDQUFDTCxtQkFBbUIsQ0FBQyxDQUFDO0VBQzdFOztFQUVBO0VBQ2dCSixtQkFBbUJBLENBQUEsRUFBVztJQUM1QyxPQUFPYixZQUFZLENBQUN1QixtQkFBbUIsR0FBRyxJQUFJLENBQUNiLGdCQUFnQixDQUFDLENBQUM7RUFDbkU7O0VBRUE7RUFDbUJjLGVBQWVBLENBQUVDLFFBQWdCLEVBQVk7SUFDOUQsT0FBU0EsUUFBUSxLQUFLekIsWUFBWSxDQUFDa0IsZUFBZTtFQUNwRDtBQUNGO0FBRUFuQixpQkFBaUIsQ0FBQzJCLFFBQVEsQ0FBRSxZQUFZLEVBQUV2QixVQUFXLENBQUMifQ==