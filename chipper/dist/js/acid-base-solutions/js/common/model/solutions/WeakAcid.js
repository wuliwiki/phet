// Copyright 2014-2022, University of Colorado Boulder

/**
 * WeakAcid is an aqueous solution whose solute is a weak acid.
 *
 * @author Andrey Zelenkov (Mlearner)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import acidBaseSolutions from '../../../acidBaseSolutions.js';
import ABSConstants from '../../ABSConstants.js';
import AqueousSolution from './AqueousSolution.js';
import ABSColors from '../../ABSColors.js';
export default class WeakAcid extends AqueousSolution {
  constructor(tandem) {
    // particles found in this solution
    const particles = [{
      key: 'HA',
      color: ABSColors.HA,
      getConcentration: () => this.getSoluteConcentration()
    }, {
      key: 'H2O',
      color: ABSColors.H2O,
      getConcentration: () => this.getH2OConcentration()
    }, {
      key: 'A',
      color: ABSColors.A,
      getConcentration: () => this.getProductConcentration()
    }, {
      key: 'H3O',
      color: ABSColors.H3O,
      getConcentration: () => this.getH3OConcentration()
    }];
    super('weakAcid', ABSConstants.WEAK_STRENGTH_RANGE.defaultValue, ABSConstants.CONCENTRATION_RANGE.defaultValue, particles, tandem);
  }

  // [HA] = c - [H3O+]
  getSoluteConcentration() {
    return this.getConcentration() - this.getH3OConcentration();
  }

  // [A-] = [H3O+]
  getProductConcentration() {
    return this.getH3OConcentration();
  }

  // [H3O+] = ( -Ka + sqrt( Ka*Ka + 4*Ka*c ) ) / 2
  getH3OConcentration() {
    const Ka = this.getStrength();
    const c = this.getConcentration();
    return (-Ka + Math.sqrt(Ka * Ka + 4 * Ka * c)) / 2;
  }

  // [OH-] = Kw / [H3O+]
  getOHConcentration() {
    return ABSConstants.WATER_EQUILIBRIUM_CONSTANT / this.getH3OConcentration();
  }

  // [H2O] = W - [A-]
  getH2OConcentration() {
    return ABSConstants.WATER_CONCENTRATION - this.getProductConcentration();
  }

  // Is strength in the weak range?
  isValidStrength(strength) {
    return ABSConstants.WEAK_STRENGTH_RANGE.contains(strength);
  }
}
acidBaseSolutions.register('WeakAcid', WeakAcid);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhY2lkQmFzZVNvbHV0aW9ucyIsIkFCU0NvbnN0YW50cyIsIkFxdWVvdXNTb2x1dGlvbiIsIkFCU0NvbG9ycyIsIldlYWtBY2lkIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJwYXJ0aWNsZXMiLCJrZXkiLCJjb2xvciIsIkhBIiwiZ2V0Q29uY2VudHJhdGlvbiIsImdldFNvbHV0ZUNvbmNlbnRyYXRpb24iLCJIMk8iLCJnZXRIMk9Db25jZW50cmF0aW9uIiwiQSIsImdldFByb2R1Y3RDb25jZW50cmF0aW9uIiwiSDNPIiwiZ2V0SDNPQ29uY2VudHJhdGlvbiIsIldFQUtfU1RSRU5HVEhfUkFOR0UiLCJkZWZhdWx0VmFsdWUiLCJDT05DRU5UUkFUSU9OX1JBTkdFIiwiS2EiLCJnZXRTdHJlbmd0aCIsImMiLCJNYXRoIiwic3FydCIsImdldE9IQ29uY2VudHJhdGlvbiIsIldBVEVSX0VRVUlMSUJSSVVNX0NPTlNUQU5UIiwiV0FURVJfQ09OQ0VOVFJBVElPTiIsImlzVmFsaWRTdHJlbmd0aCIsInN0cmVuZ3RoIiwiY29udGFpbnMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldlYWtBY2lkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFdlYWtBY2lkIGlzIGFuIGFxdWVvdXMgc29sdXRpb24gd2hvc2Ugc29sdXRlIGlzIGEgd2VhayBhY2lkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJleSBaZWxlbmtvdiAoTWxlYXJuZXIpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IGFjaWRCYXNlU29sdXRpb25zIGZyb20gJy4uLy4uLy4uL2FjaWRCYXNlU29sdXRpb25zLmpzJztcclxuaW1wb3J0IEFCU0NvbnN0YW50cyBmcm9tICcuLi8uLi9BQlNDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQXF1ZW91c1NvbHV0aW9uIGZyb20gJy4vQXF1ZW91c1NvbHV0aW9uLmpzJztcclxuaW1wb3J0IEFCU0NvbG9ycyBmcm9tICcuLi8uLi9BQlNDb2xvcnMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgeyBQYXJ0aWNsZSB9IGZyb20gJy4vUGFydGljbGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2Vha0FjaWQgZXh0ZW5kcyBBcXVlb3VzU29sdXRpb24ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIC8vIHBhcnRpY2xlcyBmb3VuZCBpbiB0aGlzIHNvbHV0aW9uXHJcbiAgICBjb25zdCBwYXJ0aWNsZXM6IFBhcnRpY2xlW10gPSBbXHJcbiAgICAgIHsga2V5OiAnSEEnLCBjb2xvcjogQUJTQ29sb3JzLkhBLCBnZXRDb25jZW50cmF0aW9uOiAoKSA9PiB0aGlzLmdldFNvbHV0ZUNvbmNlbnRyYXRpb24oKSB9LFxyXG4gICAgICB7IGtleTogJ0gyTycsIGNvbG9yOiBBQlNDb2xvcnMuSDJPLCBnZXRDb25jZW50cmF0aW9uOiAoKSA9PiB0aGlzLmdldEgyT0NvbmNlbnRyYXRpb24oKSB9LFxyXG4gICAgICB7IGtleTogJ0EnLCBjb2xvcjogQUJTQ29sb3JzLkEsIGdldENvbmNlbnRyYXRpb246ICgpID0+IHRoaXMuZ2V0UHJvZHVjdENvbmNlbnRyYXRpb24oKSB9LFxyXG4gICAgICB7IGtleTogJ0gzTycsIGNvbG9yOiBBQlNDb2xvcnMuSDNPLCBnZXRDb25jZW50cmF0aW9uOiAoKSA9PiB0aGlzLmdldEgzT0NvbmNlbnRyYXRpb24oKSB9XHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCAnd2Vha0FjaWQnLCBBQlNDb25zdGFudHMuV0VBS19TVFJFTkdUSF9SQU5HRS5kZWZhdWx0VmFsdWUsIEFCU0NvbnN0YW50cy5DT05DRU5UUkFUSU9OX1JBTkdFLmRlZmF1bHRWYWx1ZSxcclxuICAgICAgcGFydGljbGVzLCB0YW5kZW0gKTtcclxuICB9XHJcblxyXG4gIC8vIFtIQV0gPSBjIC0gW0gzTytdXHJcbiAgcHVibGljIG92ZXJyaWRlIGdldFNvbHV0ZUNvbmNlbnRyYXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAoIHRoaXMuZ2V0Q29uY2VudHJhdGlvbigpIC0gdGhpcy5nZXRIM09Db25jZW50cmF0aW9uKCkgKTtcclxuICB9XHJcblxyXG4gIC8vIFtBLV0gPSBbSDNPK11cclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0UHJvZHVjdENvbmNlbnRyYXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdldEgzT0NvbmNlbnRyYXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8vIFtIM08rXSA9ICggLUthICsgc3FydCggS2EqS2EgKyA0KkthKmMgKSApIC8gMlxyXG4gIHB1YmxpYyBvdmVycmlkZSBnZXRIM09Db25jZW50cmF0aW9uKCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBLYSA9IHRoaXMuZ2V0U3RyZW5ndGgoKTtcclxuICAgIGNvbnN0IGMgPSB0aGlzLmdldENvbmNlbnRyYXRpb24oKTtcclxuICAgIHJldHVybiAoIC1LYSArIE1hdGguc3FydCggKCBLYSAqIEthICkgKyAoIDQgKiBLYSAqIGMgKSApICkgLyAyO1xyXG4gIH1cclxuXHJcbiAgLy8gW09ILV0gPSBLdyAvIFtIM08rXVxyXG4gIHB1YmxpYyBvdmVycmlkZSBnZXRPSENvbmNlbnRyYXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBBQlNDb25zdGFudHMuV0FURVJfRVFVSUxJQlJJVU1fQ09OU1RBTlQgLyB0aGlzLmdldEgzT0NvbmNlbnRyYXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8vIFtIMk9dID0gVyAtIFtBLV1cclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0SDJPQ29uY2VudHJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICggQUJTQ29uc3RhbnRzLldBVEVSX0NPTkNFTlRSQVRJT04gLSB0aGlzLmdldFByb2R1Y3RDb25jZW50cmF0aW9uKCkgKTtcclxuICB9XHJcblxyXG4gIC8vIElzIHN0cmVuZ3RoIGluIHRoZSB3ZWFrIHJhbmdlP1xyXG4gIHByb3RlY3RlZCBvdmVycmlkZSBpc1ZhbGlkU3RyZW5ndGgoIHN0cmVuZ3RoOiBudW1iZXIgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gQUJTQ29uc3RhbnRzLldFQUtfU1RSRU5HVEhfUkFOR0UuY29udGFpbnMoIHN0cmVuZ3RoICk7XHJcbiAgfVxyXG59XHJcblxyXG5hY2lkQmFzZVNvbHV0aW9ucy5yZWdpc3RlciggJ1dlYWtBY2lkJywgV2Vha0FjaWQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxpQkFBaUIsTUFBTSwrQkFBK0I7QUFDN0QsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFJMUMsZUFBZSxNQUFNQyxRQUFRLFNBQVNGLGVBQWUsQ0FBQztFQUU3Q0csV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBRW5DO0lBQ0EsTUFBTUMsU0FBcUIsR0FBRyxDQUM1QjtNQUFFQyxHQUFHLEVBQUUsSUFBSTtNQUFFQyxLQUFLLEVBQUVOLFNBQVMsQ0FBQ08sRUFBRTtNQUFFQyxnQkFBZ0IsRUFBRUEsQ0FBQSxLQUFNLElBQUksQ0FBQ0Msc0JBQXNCLENBQUM7SUFBRSxDQUFDLEVBQ3pGO01BQUVKLEdBQUcsRUFBRSxLQUFLO01BQUVDLEtBQUssRUFBRU4sU0FBUyxDQUFDVSxHQUFHO01BQUVGLGdCQUFnQixFQUFFQSxDQUFBLEtBQU0sSUFBSSxDQUFDRyxtQkFBbUIsQ0FBQztJQUFFLENBQUMsRUFDeEY7TUFBRU4sR0FBRyxFQUFFLEdBQUc7TUFBRUMsS0FBSyxFQUFFTixTQUFTLENBQUNZLENBQUM7TUFBRUosZ0JBQWdCLEVBQUVBLENBQUEsS0FBTSxJQUFJLENBQUNLLHVCQUF1QixDQUFDO0lBQUUsQ0FBQyxFQUN4RjtNQUFFUixHQUFHLEVBQUUsS0FBSztNQUFFQyxLQUFLLEVBQUVOLFNBQVMsQ0FBQ2MsR0FBRztNQUFFTixnQkFBZ0IsRUFBRUEsQ0FBQSxLQUFNLElBQUksQ0FBQ08sbUJBQW1CLENBQUM7SUFBRSxDQUFDLENBQ3pGO0lBRUQsS0FBSyxDQUFFLFVBQVUsRUFBRWpCLFlBQVksQ0FBQ2tCLG1CQUFtQixDQUFDQyxZQUFZLEVBQUVuQixZQUFZLENBQUNvQixtQkFBbUIsQ0FBQ0QsWUFBWSxFQUM3R2IsU0FBUyxFQUFFRCxNQUFPLENBQUM7RUFDdkI7O0VBRUE7RUFDZ0JNLHNCQUFzQkEsQ0FBQSxFQUFXO0lBQy9DLE9BQVMsSUFBSSxDQUFDRCxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDTyxtQkFBbUIsQ0FBQyxDQUFDO0VBQy9EOztFQUVBO0VBQ2dCRix1QkFBdUJBLENBQUEsRUFBVztJQUNoRCxPQUFPLElBQUksQ0FBQ0UsbUJBQW1CLENBQUMsQ0FBQztFQUNuQzs7RUFFQTtFQUNnQkEsbUJBQW1CQSxDQUFBLEVBQVc7SUFDNUMsTUFBTUksRUFBRSxHQUFHLElBQUksQ0FBQ0MsV0FBVyxDQUFDLENBQUM7SUFDN0IsTUFBTUMsQ0FBQyxHQUFHLElBQUksQ0FBQ2IsZ0JBQWdCLENBQUMsQ0FBQztJQUNqQyxPQUFPLENBQUUsQ0FBQ1csRUFBRSxHQUFHRyxJQUFJLENBQUNDLElBQUksQ0FBSUosRUFBRSxHQUFHQSxFQUFFLEdBQU8sQ0FBQyxHQUFHQSxFQUFFLEdBQUdFLENBQUksQ0FBQyxJQUFLLENBQUM7RUFDaEU7O0VBRUE7RUFDZ0JHLGtCQUFrQkEsQ0FBQSxFQUFXO0lBQzNDLE9BQU8xQixZQUFZLENBQUMyQiwwQkFBMEIsR0FBRyxJQUFJLENBQUNWLG1CQUFtQixDQUFDLENBQUM7RUFDN0U7O0VBRUE7RUFDZ0JKLG1CQUFtQkEsQ0FBQSxFQUFXO0lBQzVDLE9BQVNiLFlBQVksQ0FBQzRCLG1CQUFtQixHQUFHLElBQUksQ0FBQ2IsdUJBQXVCLENBQUMsQ0FBQztFQUM1RTs7RUFFQTtFQUNtQmMsZUFBZUEsQ0FBRUMsUUFBZ0IsRUFBWTtJQUM5RCxPQUFPOUIsWUFBWSxDQUFDa0IsbUJBQW1CLENBQUNhLFFBQVEsQ0FBRUQsUUFBUyxDQUFDO0VBQzlEO0FBQ0Y7QUFFQS9CLGlCQUFpQixDQUFDaUMsUUFBUSxDQUFFLFVBQVUsRUFBRTdCLFFBQVMsQ0FBQyJ9