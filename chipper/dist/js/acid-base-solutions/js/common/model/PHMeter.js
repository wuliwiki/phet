// Copyright 2014-2022, University of Colorado Boulder

/**
 * PHMeter is the model of a movable pH meter. Position is at the tip of the probe.
 *
 * @author Andrey Zelenkov (Mlearner)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Range from '../../../../dot/js/Range.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import acidBaseSolutions from '../../acidBaseSolutions.js';
export default class PHMeter extends PhetioObject {
  // drag range (y coordinate)
  // position, at tip of probe
  // Is the tip of the pH probe in solution?

  constructor(beaker, pHProperty, tandem) {
    super({
      tandem: tandem,
      phetioState: false
    });
    this.beaker = beaker;
    this.pHProperty = pHProperty;
    this.dragYRange = new Range(beaker.top - 5, beaker.top + 60);
    this.positionProperty = new Vector2Property(new Vector2(beaker.right - 65, beaker.top - 5), {
      tandem: tandem.createTandem('positionProperty'),
      phetioReadOnly: true // because position is constrained to dragYRange
    });

    this.isInSolutionProperty = new DerivedProperty([this.positionProperty], position => this.beaker.bounds.containsPoint(this.positionProperty.value), {
      tandem: tandem.createTandem('isInSolutionProperty'),
      phetioValueType: BooleanIO
    });
    this.addLinkedElement(pHProperty, {
      tandem: tandem.createTandem(pHProperty.tandem.name)
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.positionProperty.reset();
  }
}
acidBaseSolutions.register('PHMeter', PHMeter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJSYW5nZSIsIlZlY3RvcjIiLCJWZWN0b3IyUHJvcGVydHkiLCJQaGV0aW9PYmplY3QiLCJCb29sZWFuSU8iLCJhY2lkQmFzZVNvbHV0aW9ucyIsIlBITWV0ZXIiLCJjb25zdHJ1Y3RvciIsImJlYWtlciIsInBIUHJvcGVydHkiLCJ0YW5kZW0iLCJwaGV0aW9TdGF0ZSIsImRyYWdZUmFuZ2UiLCJ0b3AiLCJwb3NpdGlvblByb3BlcnR5IiwicmlnaHQiLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9SZWFkT25seSIsImlzSW5Tb2x1dGlvblByb3BlcnR5IiwicG9zaXRpb24iLCJib3VuZHMiLCJjb250YWluc1BvaW50IiwidmFsdWUiLCJwaGV0aW9WYWx1ZVR5cGUiLCJhZGRMaW5rZWRFbGVtZW50IiwibmFtZSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUEhNZXRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQSE1ldGVyIGlzIHRoZSBtb2RlbCBvZiBhIG1vdmFibGUgcEggbWV0ZXIuIFBvc2l0aW9uIGlzIGF0IHRoZSB0aXAgb2YgdGhlIHByb2JlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJleSBaZWxlbmtvdiAoTWxlYXJuZXIpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9SZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMlByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgQm9vbGVhbklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9Cb29sZWFuSU8uanMnO1xyXG5pbXBvcnQgYWNpZEJhc2VTb2x1dGlvbnMgZnJvbSAnLi4vLi4vYWNpZEJhc2VTb2x1dGlvbnMuanMnO1xyXG5pbXBvcnQgQmVha2VyIGZyb20gJy4vQmVha2VyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBITWV0ZXIgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgYmVha2VyOiBCZWFrZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHBIUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj47XHJcbiAgcHVibGljIHJlYWRvbmx5IGRyYWdZUmFuZ2U6IFJhbmdlOyAvLyBkcmFnIHJhbmdlICh5IGNvb3JkaW5hdGUpXHJcbiAgcHVibGljIHJlYWRvbmx5IHBvc2l0aW9uUHJvcGVydHk6IFByb3BlcnR5PFZlY3RvcjI+OyAvLyBwb3NpdGlvbiwgYXQgdGlwIG9mIHByb2JlXHJcbiAgcHVibGljIHJlYWRvbmx5IGlzSW5Tb2x1dGlvblByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPjsgLy8gSXMgdGhlIHRpcCBvZiB0aGUgcEggcHJvYmUgaW4gc29sdXRpb24/XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYmVha2VyOiBCZWFrZXIsIHBIUHJvcGVydHk6IFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPiwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHBoZXRpb1N0YXRlOiBmYWxzZVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYmVha2VyID0gYmVha2VyO1xyXG4gICAgdGhpcy5wSFByb3BlcnR5ID0gcEhQcm9wZXJ0eTtcclxuICAgIHRoaXMuZHJhZ1lSYW5nZSA9IG5ldyBSYW5nZSggYmVha2VyLnRvcCAtIDUsIGJlYWtlci50b3AgKyA2MCApO1xyXG5cclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eSA9IG5ldyBWZWN0b3IyUHJvcGVydHkoIG5ldyBWZWN0b3IyKCBiZWFrZXIucmlnaHQgLSA2NSwgYmVha2VyLnRvcCAtIDUgKSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdwb3NpdGlvblByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSAvLyBiZWNhdXNlIHBvc2l0aW9uIGlzIGNvbnN0cmFpbmVkIHRvIGRyYWdZUmFuZ2VcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmlzSW5Tb2x1dGlvblByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB0aGlzLnBvc2l0aW9uUHJvcGVydHkgXSxcclxuICAgICAgcG9zaXRpb24gPT4gdGhpcy5iZWFrZXIuYm91bmRzLmNvbnRhaW5zUG9pbnQoIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSApLCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaXNJblNvbHV0aW9uUHJvcGVydHknICksXHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBCb29sZWFuSU9cclxuICAgICAgfSApO1xyXG5cclxuICAgIHRoaXMuYWRkTGlua2VkRWxlbWVudCggcEhQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oIHBIUHJvcGVydHkudGFuZGVtLm5hbWUgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuYWNpZEJhc2VTb2x1dGlvbnMucmVnaXN0ZXIoICdQSE1ldGVyJywgUEhNZXRlciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFJcEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLGVBQWUsTUFBTSx1Q0FBdUM7QUFDbkUsT0FBT0MsWUFBWSxNQUFNLHVDQUF1QztBQUVoRSxPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBQ2hFLE9BQU9DLGlCQUFpQixNQUFNLDRCQUE0QjtBQUcxRCxlQUFlLE1BQU1DLE9BQU8sU0FBU0gsWUFBWSxDQUFDO0VBSWI7RUFDa0I7RUFDYTs7RUFFM0RJLFdBQVdBLENBQUVDLE1BQWMsRUFBRUMsVUFBb0MsRUFBRUMsTUFBYyxFQUFHO0lBRXpGLEtBQUssQ0FBRTtNQUNMQSxNQUFNLEVBQUVBLE1BQU07TUFDZEMsV0FBVyxFQUFFO0lBQ2YsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDSCxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDRyxVQUFVLEdBQUcsSUFBSVosS0FBSyxDQUFFUSxNQUFNLENBQUNLLEdBQUcsR0FBRyxDQUFDLEVBQUVMLE1BQU0sQ0FBQ0ssR0FBRyxHQUFHLEVBQUcsQ0FBQztJQUU5RCxJQUFJLENBQUNDLGdCQUFnQixHQUFHLElBQUlaLGVBQWUsQ0FBRSxJQUFJRCxPQUFPLENBQUVPLE1BQU0sQ0FBQ08sS0FBSyxHQUFHLEVBQUUsRUFBRVAsTUFBTSxDQUFDSyxHQUFHLEdBQUcsQ0FBRSxDQUFDLEVBQUU7TUFDN0ZILE1BQU0sRUFBRUEsTUFBTSxDQUFDTSxZQUFZLENBQUUsa0JBQW1CLENBQUM7TUFDakRDLGNBQWMsRUFBRSxJQUFJLENBQUM7SUFDdkIsQ0FBRSxDQUFDOztJQUVILElBQUksQ0FBQ0Msb0JBQW9CLEdBQUcsSUFBSW5CLGVBQWUsQ0FBRSxDQUFFLElBQUksQ0FBQ2UsZ0JBQWdCLENBQUUsRUFDeEVLLFFBQVEsSUFBSSxJQUFJLENBQUNYLE1BQU0sQ0FBQ1ksTUFBTSxDQUFDQyxhQUFhLENBQUUsSUFBSSxDQUFDUCxnQkFBZ0IsQ0FBQ1EsS0FBTSxDQUFDLEVBQUU7TUFDM0VaLE1BQU0sRUFBRUEsTUFBTSxDQUFDTSxZQUFZLENBQUUsc0JBQXVCLENBQUM7TUFDckRPLGVBQWUsRUFBRW5CO0lBQ25CLENBQUUsQ0FBQztJQUVMLElBQUksQ0FBQ29CLGdCQUFnQixDQUFFZixVQUFVLEVBQUU7TUFDakNDLE1BQU0sRUFBRUEsTUFBTSxDQUFDTSxZQUFZLENBQUVQLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDZSxJQUFLO0lBQ3RELENBQUUsQ0FBQztFQUNMO0VBRWdCQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0VBRU9FLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNkLGdCQUFnQixDQUFDYyxLQUFLLENBQUMsQ0FBQztFQUMvQjtBQUNGO0FBRUF2QixpQkFBaUIsQ0FBQ3dCLFFBQVEsQ0FBRSxTQUFTLEVBQUV2QixPQUFRLENBQUMifQ==