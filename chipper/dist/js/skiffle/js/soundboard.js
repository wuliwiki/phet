// Copyright 2021, University of Colorado Boulder

/**
 * JavaScript for the soundboard HTML file.
 */

// create a Web Audio context
let audioContext = null;
if (window.AudioContext) {
  audioContext = new window.AudioContext();
} else if (window.webkitAudioContext) {
  audioContext = new window.webkitAudioContext();
} else {
  // The browser doesn't support creating an audio context, create an empty object.  Failures will occur the first time
  // any code tries to do anything with the audio context.
  audioContext = {};
  console.error('error: this browser does not support Web Audio');
}

// {Map.<string,AudioBuffer>} - map of file paths to decoded audio buffers, used to cache decoded audio data
const filePathToDecodedAudioBufferMap = new Map();

// {Map.<AudioBuffer,AudioBufferSourceNode>} - map of audio buffers to buffer source nodes, used to stop longer sounds
const audioBufferToBufferSourceNodeMap = new Map();

// function to play a previously decoded audio buffer, or stop playback that is already in progress
const playAudioBuffer = audioBuffer => {
  // Check to see if there is an entry in the audio-buffer-to-buffer-source map.  If there is, it means this sound is
  // currently playing and should be stopped.  This essentially allows users to toggle longer sounds, such as those that
  // used as loops.
  if (audioBufferToBufferSourceNodeMap.has(audioBuffer)) {
    // Stop the sound.  The onended handler should remove it from the map.
    audioBufferToBufferSourceNodeMap.get(audioBuffer).stop();
  } else {
    // This sound isn't currently playing, so create an audio buffer source node and start it up.
    const bufferSource = audioContext.createBufferSource();
    bufferSource.buffer = audioBuffer;
    bufferSource.connect(audioContext.destination);
    audioBufferToBufferSourceNodeMap.set(audioBuffer, bufferSource);
    bufferSource.onended = () => {
      audioBufferToBufferSourceNodeMap.delete(audioBuffer);
      bufferSource.onended = null;
    };
    bufferSource.start();
  }
};

// function to play a sound file, will used cached data if possible or will initiate decode if not
const playSound = soundUrl => {
  // eslint-disable-line no-unused-vars
  const audioBuffer = filePathToDecodedAudioBufferMap.get(soundUrl);
  if (audioBuffer) {
    // This file has already been decoded, so just play it.
    playAudioBuffer(audioBuffer);
  } else {
    // This is the first time this file has been played, so it needs to be decoded and then played.
    window.fetch(soundUrl).then(response => response.arrayBuffer()).then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer)).then(audioBuffer => {
      filePathToDecodedAudioBufferMap.set(soundUrl, audioBuffer);
      playAudioBuffer(audioBuffer);
    }).catch(error => {
      console.log(`unable to play file ${soundUrl}, error = ${error}`);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhdWRpb0NvbnRleHQiLCJ3aW5kb3ciLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJjb25zb2xlIiwiZXJyb3IiLCJmaWxlUGF0aFRvRGVjb2RlZEF1ZGlvQnVmZmVyTWFwIiwiTWFwIiwiYXVkaW9CdWZmZXJUb0J1ZmZlclNvdXJjZU5vZGVNYXAiLCJwbGF5QXVkaW9CdWZmZXIiLCJhdWRpb0J1ZmZlciIsImhhcyIsImdldCIsInN0b3AiLCJidWZmZXJTb3VyY2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJidWZmZXIiLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJzZXQiLCJvbmVuZGVkIiwiZGVsZXRlIiwic3RhcnQiLCJwbGF5U291bmQiLCJzb3VuZFVybCIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwiYXJyYXlCdWZmZXIiLCJkZWNvZGVBdWRpb0RhdGEiLCJjYXRjaCIsImxvZyJdLCJzb3VyY2VzIjpbInNvdW5kYm9hcmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEphdmFTY3JpcHQgZm9yIHRoZSBzb3VuZGJvYXJkIEhUTUwgZmlsZS5cclxuICovXHJcblxyXG4vLyBjcmVhdGUgYSBXZWIgQXVkaW8gY29udGV4dFxyXG5sZXQgYXVkaW9Db250ZXh0ID0gbnVsbDtcclxuaWYgKCB3aW5kb3cuQXVkaW9Db250ZXh0ICkge1xyXG4gIGF1ZGlvQ29udGV4dCA9IG5ldyB3aW5kb3cuQXVkaW9Db250ZXh0KCk7XHJcbn1cclxuZWxzZSBpZiAoIHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQgKSB7XHJcbiAgYXVkaW9Db250ZXh0ID0gbmV3IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQoKTtcclxufVxyXG5lbHNlIHtcclxuXHJcbiAgLy8gVGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNyZWF0aW5nIGFuIGF1ZGlvIGNvbnRleHQsIGNyZWF0ZSBhbiBlbXB0eSBvYmplY3QuICBGYWlsdXJlcyB3aWxsIG9jY3VyIHRoZSBmaXJzdCB0aW1lXHJcbiAgLy8gYW55IGNvZGUgdHJpZXMgdG8gZG8gYW55dGhpbmcgd2l0aCB0aGUgYXVkaW8gY29udGV4dC5cclxuICBhdWRpb0NvbnRleHQgPSB7fTtcclxuICBjb25zb2xlLmVycm9yKCAnZXJyb3I6IHRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFdlYiBBdWRpbycgKTtcclxufVxyXG5cclxuLy8ge01hcC48c3RyaW5nLEF1ZGlvQnVmZmVyPn0gLSBtYXAgb2YgZmlsZSBwYXRocyB0byBkZWNvZGVkIGF1ZGlvIGJ1ZmZlcnMsIHVzZWQgdG8gY2FjaGUgZGVjb2RlZCBhdWRpbyBkYXRhXHJcbmNvbnN0IGZpbGVQYXRoVG9EZWNvZGVkQXVkaW9CdWZmZXJNYXAgPSBuZXcgTWFwKCk7XHJcblxyXG4vLyB7TWFwLjxBdWRpb0J1ZmZlcixBdWRpb0J1ZmZlclNvdXJjZU5vZGU+fSAtIG1hcCBvZiBhdWRpbyBidWZmZXJzIHRvIGJ1ZmZlciBzb3VyY2Ugbm9kZXMsIHVzZWQgdG8gc3RvcCBsb25nZXIgc291bmRzXHJcbmNvbnN0IGF1ZGlvQnVmZmVyVG9CdWZmZXJTb3VyY2VOb2RlTWFwID0gbmV3IE1hcCgpO1xyXG5cclxuLy8gZnVuY3Rpb24gdG8gcGxheSBhIHByZXZpb3VzbHkgZGVjb2RlZCBhdWRpbyBidWZmZXIsIG9yIHN0b3AgcGxheWJhY2sgdGhhdCBpcyBhbHJlYWR5IGluIHByb2dyZXNzXHJcbmNvbnN0IHBsYXlBdWRpb0J1ZmZlciA9IGF1ZGlvQnVmZmVyID0+IHtcclxuXHJcbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZXJlIGlzIGFuIGVudHJ5IGluIHRoZSBhdWRpby1idWZmZXItdG8tYnVmZmVyLXNvdXJjZSBtYXAuICBJZiB0aGVyZSBpcywgaXQgbWVhbnMgdGhpcyBzb3VuZCBpc1xyXG4gIC8vIGN1cnJlbnRseSBwbGF5aW5nIGFuZCBzaG91bGQgYmUgc3RvcHBlZC4gIFRoaXMgZXNzZW50aWFsbHkgYWxsb3dzIHVzZXJzIHRvIHRvZ2dsZSBsb25nZXIgc291bmRzLCBzdWNoIGFzIHRob3NlIHRoYXRcclxuICAvLyB1c2VkIGFzIGxvb3BzLlxyXG4gIGlmICggYXVkaW9CdWZmZXJUb0J1ZmZlclNvdXJjZU5vZGVNYXAuaGFzKCBhdWRpb0J1ZmZlciApICkge1xyXG5cclxuICAgIC8vIFN0b3AgdGhlIHNvdW5kLiAgVGhlIG9uZW5kZWQgaGFuZGxlciBzaG91bGQgcmVtb3ZlIGl0IGZyb20gdGhlIG1hcC5cclxuICAgIGF1ZGlvQnVmZmVyVG9CdWZmZXJTb3VyY2VOb2RlTWFwLmdldCggYXVkaW9CdWZmZXIgKS5zdG9wKCk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG5cclxuICAgIC8vIFRoaXMgc291bmQgaXNuJ3QgY3VycmVudGx5IHBsYXlpbmcsIHNvIGNyZWF0ZSBhbiBhdWRpbyBidWZmZXIgc291cmNlIG5vZGUgYW5kIHN0YXJ0IGl0IHVwLlxyXG4gICAgY29uc3QgYnVmZmVyU291cmNlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xyXG4gICAgYnVmZmVyU291cmNlLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyO1xyXG4gICAgYnVmZmVyU291cmNlLmNvbm5lY3QoIGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbiApO1xyXG4gICAgYXVkaW9CdWZmZXJUb0J1ZmZlclNvdXJjZU5vZGVNYXAuc2V0KCBhdWRpb0J1ZmZlciwgYnVmZmVyU291cmNlICk7XHJcbiAgICBidWZmZXJTb3VyY2Uub25lbmRlZCA9ICgpID0+IHtcclxuICAgICAgYXVkaW9CdWZmZXJUb0J1ZmZlclNvdXJjZU5vZGVNYXAuZGVsZXRlKCBhdWRpb0J1ZmZlciApO1xyXG4gICAgICBidWZmZXJTb3VyY2Uub25lbmRlZCA9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgYnVmZmVyU291cmNlLnN0YXJ0KCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gZnVuY3Rpb24gdG8gcGxheSBhIHNvdW5kIGZpbGUsIHdpbGwgdXNlZCBjYWNoZWQgZGF0YSBpZiBwb3NzaWJsZSBvciB3aWxsIGluaXRpYXRlIGRlY29kZSBpZiBub3RcclxuY29uc3QgcGxheVNvdW5kID0gc291bmRVcmwgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgY29uc3QgYXVkaW9CdWZmZXIgPSBmaWxlUGF0aFRvRGVjb2RlZEF1ZGlvQnVmZmVyTWFwLmdldCggc291bmRVcmwgKTtcclxuICBpZiAoIGF1ZGlvQnVmZmVyICkge1xyXG5cclxuICAgIC8vIFRoaXMgZmlsZSBoYXMgYWxyZWFkeSBiZWVuIGRlY29kZWQsIHNvIGp1c3QgcGxheSBpdC5cclxuICAgIHBsYXlBdWRpb0J1ZmZlciggYXVkaW9CdWZmZXIgKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcblxyXG4gICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGlzIGZpbGUgaGFzIGJlZW4gcGxheWVkLCBzbyBpdCBuZWVkcyB0byBiZSBkZWNvZGVkIGFuZCB0aGVuIHBsYXllZC5cclxuICAgIHdpbmRvdy5mZXRjaCggc291bmRVcmwgKVxyXG4gICAgICAudGhlbiggcmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSApXHJcbiAgICAgIC50aGVuKCBhcnJheUJ1ZmZlciA9PiBhdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKCBhcnJheUJ1ZmZlciApIClcclxuICAgICAgLnRoZW4oIGF1ZGlvQnVmZmVyID0+IHtcclxuICAgICAgICBmaWxlUGF0aFRvRGVjb2RlZEF1ZGlvQnVmZmVyTWFwLnNldCggc291bmRVcmwsIGF1ZGlvQnVmZmVyICk7XHJcbiAgICAgICAgcGxheUF1ZGlvQnVmZmVyKCBhdWRpb0J1ZmZlciApO1xyXG4gICAgICB9IClcclxuICAgICAgLmNhdGNoKCBlcnJvciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coIGB1bmFibGUgdG8gcGxheSBmaWxlICR7c291bmRVcmx9LCBl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