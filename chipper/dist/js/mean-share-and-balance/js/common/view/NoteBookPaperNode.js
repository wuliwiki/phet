// Copyright 2022, University of Colorado Boulder

/**
 * Contains the image and scaling for the notebook paper background for the upper data representations
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 */

import meanShareAndBalance from '../../meanShareAndBalance.js';
import { Node, Rectangle, Image } from '../../../../scenery/js/imports.js';
import MeanShareAndBalanceConstants from '../MeanShareAndBalanceConstants.js';
import notepadRing_png from '../../../images/notepadRing_png.js';
import MeanShareAndBalanceColors from '../MeanShareAndBalanceColors.js';
export default class NoteBookPaperNode extends Node {
  constructor() {
    const paperStackNode = new Node();
    const paperWidth = 720;
    const paperHeight = 240;
    const paperStackHeight = 4;
    const stackOffset = 3;
    for (let i = paperStackHeight; i > 0; i--) {
      const xOffset = i * -stackOffset;
      const yOffset = i * stackOffset;
      const paper = new Rectangle(xOffset, yOffset, paperWidth, paperHeight, {
        fill: MeanShareAndBalanceColors.paperColorProperty,
        stroke: 'black',
        cornerRadius: 10
      });
      paperStackNode.addChild(paper);
    }
    const rings = [];
    const numberOfRings = 8;
    _.times(numberOfRings, i => {
      const x = i * ((paperWidth - 20) / numberOfRings) + 30;
      const image = new Image(notepadRing_png, {
        x: x,
        y: -21.5,
        scale: 0.8
      });
      rings.push(image);
    });
    super({
      children: [paperStackNode, ...rings],
      centerY: MeanShareAndBalanceConstants.NOTEBOOK_PAPER_CENTER_Y
    });
  }
}
meanShareAndBalance.register('NoteBookPaperNode', NoteBookPaperNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZWFuU2hhcmVBbmRCYWxhbmNlIiwiTm9kZSIsIlJlY3RhbmdsZSIsIkltYWdlIiwiTWVhblNoYXJlQW5kQmFsYW5jZUNvbnN0YW50cyIsIm5vdGVwYWRSaW5nX3BuZyIsIk1lYW5TaGFyZUFuZEJhbGFuY2VDb2xvcnMiLCJOb3RlQm9va1BhcGVyTm9kZSIsImNvbnN0cnVjdG9yIiwicGFwZXJTdGFja05vZGUiLCJwYXBlcldpZHRoIiwicGFwZXJIZWlnaHQiLCJwYXBlclN0YWNrSGVpZ2h0Iiwic3RhY2tPZmZzZXQiLCJpIiwieE9mZnNldCIsInlPZmZzZXQiLCJwYXBlciIsImZpbGwiLCJwYXBlckNvbG9yUHJvcGVydHkiLCJzdHJva2UiLCJjb3JuZXJSYWRpdXMiLCJhZGRDaGlsZCIsInJpbmdzIiwibnVtYmVyT2ZSaW5ncyIsIl8iLCJ0aW1lcyIsIngiLCJpbWFnZSIsInkiLCJzY2FsZSIsInB1c2giLCJjaGlsZHJlbiIsImNlbnRlclkiLCJOT1RFQk9PS19QQVBFUl9DRU5URVJfWSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTm90ZUJvb2tQYXBlck5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRhaW5zIHRoZSBpbWFnZSBhbmQgc2NhbGluZyBmb3IgdGhlIG5vdGVib29rIHBhcGVyIGJhY2tncm91bmQgZm9yIHRoZSB1cHBlciBkYXRhIHJlcHJlc2VudGF0aW9uc1xyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcmxhIFNjaHVseiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVhblNoYXJlQW5kQmFsYW5jZSBmcm9tICcuLi8uLi9tZWFuU2hhcmVBbmRCYWxhbmNlLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUmVjdGFuZ2xlLCBJbWFnZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBNZWFuU2hhcmVBbmRCYWxhbmNlQ29uc3RhbnRzIGZyb20gJy4uL01lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgbm90ZXBhZFJpbmdfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9ub3RlcGFkUmluZ19wbmcuanMnO1xyXG5pbXBvcnQgTWVhblNoYXJlQW5kQmFsYW5jZUNvbG9ycyBmcm9tICcuLi9NZWFuU2hhcmVBbmRCYWxhbmNlQ29sb3JzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGVCb29rUGFwZXJOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBjb25zdCBwYXBlclN0YWNrTm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICBjb25zdCBwYXBlcldpZHRoID0gNzIwO1xyXG4gICAgY29uc3QgcGFwZXJIZWlnaHQgPSAyNDA7XHJcbiAgICBjb25zdCBwYXBlclN0YWNrSGVpZ2h0ID0gNDtcclxuICAgIGNvbnN0IHN0YWNrT2Zmc2V0ID0gMztcclxuXHJcbiAgICBmb3IgKCBsZXQgaSA9IHBhcGVyU3RhY2tIZWlnaHQ7IGkgPiAwOyBpLS0gKSB7XHJcbiAgICAgIGNvbnN0IHhPZmZzZXQgPSBpICogLXN0YWNrT2Zmc2V0O1xyXG4gICAgICBjb25zdCB5T2Zmc2V0ID0gaSAqIHN0YWNrT2Zmc2V0O1xyXG4gICAgICBjb25zdCBwYXBlciA9IG5ldyBSZWN0YW5nbGUoIHhPZmZzZXQsIHlPZmZzZXQsIHBhcGVyV2lkdGgsIHBhcGVySGVpZ2h0LCB7XHJcbiAgICAgICAgZmlsbDogTWVhblNoYXJlQW5kQmFsYW5jZUNvbG9ycy5wYXBlckNvbG9yUHJvcGVydHksXHJcbiAgICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICAgIGNvcm5lclJhZGl1czogMTBcclxuICAgICAgfSApO1xyXG4gICAgICBwYXBlclN0YWNrTm9kZS5hZGRDaGlsZCggcGFwZXIgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByaW5nczogQXJyYXk8Tm9kZT4gPSBbXTtcclxuICAgIGNvbnN0IG51bWJlck9mUmluZ3MgPSA4O1xyXG5cclxuICAgIF8udGltZXMoIG51bWJlck9mUmluZ3MsICggaTogbnVtYmVyICkgPT4ge1xyXG4gICAgICBjb25zdCB4ID0gaSAqICggKCBwYXBlcldpZHRoIC0gMjAgKSAvIG51bWJlck9mUmluZ3MgKSArIDMwO1xyXG4gICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSggbm90ZXBhZFJpbmdfcG5nLCB7IHg6IHgsIHk6IC0yMS41LCBzY2FsZTogMC44IH0gKTtcclxuICAgICAgcmluZ3MucHVzaCggaW1hZ2UgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggeyBjaGlsZHJlbjogWyBwYXBlclN0YWNrTm9kZSwgLi4ucmluZ3MgXSwgY2VudGVyWTogTWVhblNoYXJlQW5kQmFsYW5jZUNvbnN0YW50cy5OT1RFQk9PS19QQVBFUl9DRU5URVJfWSB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5tZWFuU2hhcmVBbmRCYWxhbmNlLnJlZ2lzdGVyKCAnTm90ZUJvb2tQYXBlck5vZGUnLCBOb3RlQm9va1BhcGVyTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxtQkFBbUIsTUFBTSw4QkFBOEI7QUFDOUQsU0FBU0MsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLEtBQUssUUFBUSxtQ0FBbUM7QUFDMUUsT0FBT0MsNEJBQTRCLE1BQU0sb0NBQW9DO0FBQzdFLE9BQU9DLGVBQWUsTUFBTSxvQ0FBb0M7QUFDaEUsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBRXZFLGVBQWUsTUFBTUMsaUJBQWlCLFNBQVNOLElBQUksQ0FBQztFQUUzQ08sV0FBV0EsQ0FBQSxFQUFHO0lBRW5CLE1BQU1DLGNBQWMsR0FBRyxJQUFJUixJQUFJLENBQUMsQ0FBQztJQUNqQyxNQUFNUyxVQUFVLEdBQUcsR0FBRztJQUN0QixNQUFNQyxXQUFXLEdBQUcsR0FBRztJQUN2QixNQUFNQyxnQkFBZ0IsR0FBRyxDQUFDO0lBQzFCLE1BQU1DLFdBQVcsR0FBRyxDQUFDO0lBRXJCLEtBQU0sSUFBSUMsQ0FBQyxHQUFHRixnQkFBZ0IsRUFBRUUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUc7TUFDM0MsTUFBTUMsT0FBTyxHQUFHRCxDQUFDLEdBQUcsQ0FBQ0QsV0FBVztNQUNoQyxNQUFNRyxPQUFPLEdBQUdGLENBQUMsR0FBR0QsV0FBVztNQUMvQixNQUFNSSxLQUFLLEdBQUcsSUFBSWYsU0FBUyxDQUFFYSxPQUFPLEVBQUVDLE9BQU8sRUFBRU4sVUFBVSxFQUFFQyxXQUFXLEVBQUU7UUFDdEVPLElBQUksRUFBRVoseUJBQXlCLENBQUNhLGtCQUFrQjtRQUNsREMsTUFBTSxFQUFFLE9BQU87UUFDZkMsWUFBWSxFQUFFO01BQ2hCLENBQUUsQ0FBQztNQUNIWixjQUFjLENBQUNhLFFBQVEsQ0FBRUwsS0FBTSxDQUFDO0lBQ2xDO0lBRUEsTUFBTU0sS0FBa0IsR0FBRyxFQUFFO0lBQzdCLE1BQU1DLGFBQWEsR0FBRyxDQUFDO0lBRXZCQyxDQUFDLENBQUNDLEtBQUssQ0FBRUYsYUFBYSxFQUFJVixDQUFTLElBQU07TUFDdkMsTUFBTWEsQ0FBQyxHQUFHYixDQUFDLElBQUssQ0FBRUosVUFBVSxHQUFHLEVBQUUsSUFBS2MsYUFBYSxDQUFFLEdBQUcsRUFBRTtNQUMxRCxNQUFNSSxLQUFLLEdBQUcsSUFBSXpCLEtBQUssQ0FBRUUsZUFBZSxFQUFFO1FBQUVzQixDQUFDLEVBQUVBLENBQUM7UUFBRUUsQ0FBQyxFQUFFLENBQUMsSUFBSTtRQUFFQyxLQUFLLEVBQUU7TUFBSSxDQUFFLENBQUM7TUFDMUVQLEtBQUssQ0FBQ1EsSUFBSSxDQUFFSCxLQUFNLENBQUM7SUFDckIsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFO01BQUVJLFFBQVEsRUFBRSxDQUFFdkIsY0FBYyxFQUFFLEdBQUdjLEtBQUssQ0FBRTtNQUFFVSxPQUFPLEVBQUU3Qiw0QkFBNEIsQ0FBQzhCO0lBQXdCLENBQUUsQ0FBQztFQUNwSDtBQUNGO0FBRUFsQyxtQkFBbUIsQ0FBQ21DLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRTVCLGlCQUFrQixDQUFDIn0=