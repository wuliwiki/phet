// Copyright 2022, University of Colorado Boulder

/**
 * Model for the Leveling Out Screen which includes people, chocolate bars, visual mean representation,
 * and a numerical mean representation.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import MeanShareAndBalanceModel from '../../common/model/MeanShareAndBalanceModel.js';
import meanShareAndBalance from '../../meanShareAndBalance.js';
import Range from '../../../../dot/js/Range.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import MeanShareAndBalanceConstants from '../../common/MeanShareAndBalanceConstants.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Plate from './Plate.js';
import Person from './Person.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import ChocolateBar from './ChocolateBar.js';
import Property from '../../../../axon/js/Property.js';
const MAX_PEOPLE = 7;
export default class LevelingOutModel extends MeanShareAndBalanceModel {
  constructor(providedOptions) {
    const options = optionize()({}, providedOptions);
    super(options);
    this.meanCalculationDialogVisibleProperty = new BooleanProperty(false, {
      // phet-io
      tandem: options.tandem.createTandem('meanCalculationDialogVisibleProperty')
    });
    this.numberOfPeopleRangeProperty = new Property(new Range(1, MeanShareAndBalanceConstants.MAXIMUM_NUMBER_OF_DATA_SETS), {
      // phet-io
      tandem: options.tandem.createTandem('numberOfPeopleRangeProperty'),
      phetioValueType: Range.RangeIO
    });
    this.numberOfPeopleProperty = new NumberProperty(MeanShareAndBalanceConstants.INITIAL_NUMBER_OF_PEOPLE, {
      numberType: 'Integer',
      range: this.numberOfPeopleRangeProperty,
      // phet-io
      tandem: options.tandem.createTandem('numberOfPeopleProperty')
    });
    this.isMeanAccordionExpandedProperty = new BooleanProperty(false, {
      // phet-io
      tandem: options.tandem.createTandem('isMeanAccordionExpandedProperty')
    });
    this.platesArray = [];
    this.peopleArray = [];
    this.chocolatesArray = [];
    const meanPropertyDependencies = [];
    const chocolateBarsParentTandem = options.tandem.createTandem('chocolateBars');

    // In Mean Share and Balance, we decided arrays start counting at 1
    let totalChocolateCount = 1;

    // Statically allocate plates, people, and chocolates. Whether they particpate in the model is controlled by
    // the isActiveProperty on each one
    for (let personIndex = 0; personIndex < MAX_PEOPLE; personIndex++) {
      const x = personIndex * MeanShareAndBalanceConstants.PERSON_WIDTH;
      const plate = new Plate({
        isActive: personIndex < this.numberOfPeopleProperty.value,
        position: new Vector2(x, MeanShareAndBalanceConstants.PLATE_CHOCOLATE_CENTER_Y),
        linePlacement: personIndex,
        // phet-io
        tandem: options.tandem.createTandem(`plateChocolate${personIndex + 1}`)
      });
      this.platesArray.push(plate);
      const person = new Person({
        position: new Vector2(x, MeanShareAndBalanceConstants.PEOPLE_CENTER_Y),
        isActive: personIndex < this.numberOfPeopleProperty.value,
        linePlacement: personIndex,
        // phet-io
        tandem: options.tandem.createTandem(`person${personIndex + 1}`)
      });
      this.peopleArray.push(person);
      for (let chocolateIndex = 0; chocolateIndex < MeanShareAndBalanceConstants.MAX_NUMBER_OF_CHOCOLATES_PER_PERSON; chocolateIndex++) {
        const x = plate.position.x;
        const y = plate.position.y - (MeanShareAndBalanceConstants.CHOCOLATE_HEIGHT + 2) * (chocolateIndex + 1);
        const isActive = plate.isActiveProperty.value && chocolateIndex < person.chocolateNumberProperty.value;
        const chocolateBar = new ChocolateBar({
          isActive: isActive,
          plate: plate,
          position: new Vector2(x, y),
          // phet-io
          tandem: chocolateBarsParentTandem.createTandem(`chocolateBar${totalChocolateCount++}`)
        });
        this.chocolatesArray.push(chocolateBar);
      }

      // Connect draggable chocolate visibility to plate isActive and chocolateBarsNumber
      plate.isActiveProperty.lazyLink(isActive => {
        const chocolates = this.getChocolatesOnPlate(plate);
        const plateNumberOfChocolates = this.getActiveChocolatesOnPlate(plate).length;

        // If a plate became inactive, we need to account for the extra or missing chocolate
        if (!isActive) {
          const personNumberOfChocolates = this.peopleArray[plate.linePlacement].chocolateNumberProperty.value;
          if (personNumberOfChocolates > plateNumberOfChocolates) {
            this.borrowMisingChocolates(personNumberOfChocolates - plateNumberOfChocolates);
          } else if (personNumberOfChocolates < plateNumberOfChocolates) {
            this.shareExtraChocolates(plateNumberOfChocolates - personNumberOfChocolates);
          }
        }
        chocolates.forEach((chocolate, i) => {
          chocolate.isActiveProperty.value = isActive && i < person.chocolateNumberProperty.value;
          this.reorganizeChocolates(plate);
        });
      });

      // set paper plate chocolate number based on table plate delta change.
      person.chocolateNumberProperty.lazyLink((chocolateNumber, oldChocolateNumber) => {
        if (person.isActiveProperty.value) {
          if (chocolateNumber > oldChocolateNumber) {
            this.personChocolateAmountIncrease(plate, chocolateNumber - oldChocolateNumber);
          } else if (chocolateNumber < oldChocolateNumber) {
            this.personChocolateAmountDecrease(plate, oldChocolateNumber - chocolateNumber);
          }
        }
      });
      meanPropertyDependencies.push(person.chocolateNumberProperty);
      meanPropertyDependencies.push(person.isActiveProperty);
    }

    // Calculates the mean based on the "ground-truth" chocolates on the table
    // Must be deriveAny because .map() does not preserve .length()
    this.meanProperty = DerivedProperty.deriveAny(meanPropertyDependencies, () => {
      const chocolateAmounts = this.getActivePeople().map(person => person.chocolateNumberProperty.value);
      const totalChocolate = _.sum(chocolateAmounts);
      return totalChocolate / chocolateAmounts.length;
    }, {
      tandem: options.tandem.createTandem('meanProperty'),
      phetioValueType: NumberIO
    });
    this.numberOfPeopleProperty.link(numberOfPeople => {
      this.platesArray.forEach((plate, i) => {
        plate.isActiveProperty.value = i < numberOfPeople;
      });
      this.peopleArray.forEach((person, i) => {
        person.isActiveProperty.value = i < numberOfPeople;
      });
    });
  }
  getActivePeople() {
    return this.peopleArray.filter(person => person.isActiveProperty.value);
  }
  getActivePlates() {
    return this.platesArray.filter(plate => plate.isActiveProperty.value);
  }
  getActiveChocolates() {
    return this.chocolatesArray.filter(chocolate => chocolate.isActiveProperty.value);
  }
  getChocolatesOnPlate(plate) {
    return this.chocolatesArray.filter(chocolate => chocolate.parentPlateProperty.value === plate);
  }
  getInactiveChocolatesOnPlate(plate) {
    return this.getChocolatesOnPlate(plate).filter(chocolate => !chocolate.isActiveProperty.value);
  }
  getActiveChocolatesOnPlate(plate) {
    return this.chocolatesArray.filter(chocolate => chocolate.parentPlateProperty.value === plate && chocolate.isActiveProperty.value);
  }
  getTopActiveChocolateOnPlate(plate) {
    const activeChocolatesOnPlate = this.getActiveChocolatesOnPlate(plate);
    assert && assert(activeChocolatesOnPlate.length > 0, `There is no top chocolate on plate since active chocolates is: ${activeChocolatesOnPlate.length}`);
    const topChocolate = _.minBy(activeChocolatesOnPlate, chocolate => chocolate.positionProperty.value.y);
    return topChocolate;
  }
  getBottomInactiveChocolateOnPlate(plate) {
    const inactiveChocolatesOnPlate = this.getInactiveChocolatesOnPlate(plate);
    assert && assert(inactiveChocolatesOnPlate.length > 0, `There is no inactive bottom chocolate on plate since inactive chocolates is: ${inactiveChocolatesOnPlate.length}`);
    const bottomChocolate = _.maxBy(inactiveChocolatesOnPlate, chocolate => chocolate.positionProperty.value.y);
    return bottomChocolate;
  }
  getActivePlateStateChocolates(plate) {
    const chocolates = this.getActiveChocolatesOnPlate(plate);
    return chocolates.filter(chocolate => chocolate.stateProperty.value === 'plate');
  }
  getPlatesWithSpace(plates) {
    return plates.filter(plate => {
      const numberOfChocolates = this.getActivePlateStateChocolates(plate).length;
      return numberOfChocolates < MeanShareAndBalanceConstants.MAX_NUMBER_OF_CHOCOLATES_PER_PERSON;
    });
  }

  /**
   * When chocolates are added to a plate, they may appear in random positions or be overlapping. Re-stack them.
   */
  reorganizeChocolates(plate) {
    const plateStateChocolates = this.getActivePlateStateChocolates(plate);
    plateStateChocolates.forEach((chocolate, i) => {
      const Y_MARGIN = 2; // Distance between adjacent chocolates.  Also distance between plate and lowest chocolate
      const newPosition = new Vector2(plate.position.x, plate.position.y - (MeanShareAndBalanceConstants.CHOCOLATE_HEIGHT + Y_MARGIN) * (i + 1));
      chocolate.positionProperty.set(newPosition);
    });
  }

  /**
   * Called only when a Plate is deactivated (when a person is removed) and the number at the person did not match the
   * amount on the plate.
   */
  shareExtraChocolates(numberOfExtraChocolates) {
    for (let i = 0; i < numberOfExtraChocolates; i++) {
      const minPlate = this.getPlateWithLeastChocolate();
      this.getBottomInactiveChocolateOnPlate(minPlate).isActiveProperty.set(true);
      this.reorganizeChocolates(minPlate);
    }
  }

  /**
   * Called only when a Plate is deactivated (when a person is removed) and the number at the person did not match the
   * amount on the plate.
   */
  borrowMisingChocolates(numberOfMissingChocolates) {
    for (let i = 0; i < numberOfMissingChocolates; i++) {
      const maxPlate = this.getPlateWithMostActiveChocolate();
      this.getTopActiveChocolateOnPlate(maxPlate).isActiveProperty.set(false);
      this.reorganizeChocolates(maxPlate);
    }
  }

  // When an active person adds chocolate to their plate and the paper plate has no more space on it,
  // a piece of chocolate will be added onto the paper plate with the least chocolate.
  personChocolateAmountIncrease(plate, numberOfChocolatesAdded) {
    for (let i = 0; i < numberOfChocolatesAdded; i++) {
      const numberOfChocolatesOnPlate = this.getActivePlateStateChocolates(plate).length;
      if (numberOfChocolatesOnPlate === MeanShareAndBalanceConstants.MAX_NUMBER_OF_CHOCOLATES_PER_PERSON) {
        const minPlate = this.getPlateWithLeastChocolate();
        assert && assert(minPlate !== plate, `minPlate ${minPlate.linePlacement} should not be the same as affected plate: ${plate.linePlacement}`);
        this.getBottomInactiveChocolateOnPlate(minPlate).isActiveProperty.set(true);
        this.reorganizeChocolates(minPlate);
      } else {
        this.getBottomInactiveChocolateOnPlate(plate).isActiveProperty.set(true);
      }
      this.reorganizeChocolates(plate);
    }
  }

  // When an active person removes chocolate from their plate and the paper plate has no chocolate on it,
  // a piece of chocolate will be removed off of the paper plate with the most chocolate.
  personChocolateAmountDecrease(plate, numberOfChocolatesRemoved) {
    for (let i = 0; i < numberOfChocolatesRemoved; i++) {
      const numberOfChocolatesOnPlate = this.getActivePlateStateChocolates(plate).length;
      if (numberOfChocolatesOnPlate === 0) {
        const maxPlate = this.getPlateWithMostActiveChocolate();
        this.getTopActiveChocolateOnPlate(maxPlate).isActiveProperty.set(false);
        this.reorganizeChocolates(maxPlate);
      } else {
        this.getTopActiveChocolateOnPlate(plate).isActiveProperty.set(false);
      }
      this.reorganizeChocolates(plate);
    }
  }
  getPlateWithMostActiveChocolate() {
    const maxPlate = _.maxBy(this.getActivePlates(), plate => this.getActiveChocolatesOnPlate(plate).length);

    // _.maxBy can return undefined if all the elements in the array are null, undefined, or NAN. chocolateBarsNumberProperty will always be a number.
    return maxPlate;
  }
  getPlateWithLeastChocolate() {
    const minPlate = _.minBy(this.getActivePlates(), plate => this.getActiveChocolatesOnPlate(plate).length);

    // _.minBy can return undefined if all the elements in the array are null, undefined, or NAN. chocolateBarsNumberProperty will always be a number.
    return minPlate;
  }
  reset() {
    this.isMeanAccordionExpandedProperty.reset();
    this.numberOfPeopleProperty.reset();
    this.meanCalculationDialogVisibleProperty.reset();
    this.peopleArray.forEach(person => person.reset());
    this.platesArray.forEach(plate => plate.reset());
  }

  /**
   * Propagate the ground truth values (at the bottom of the screen, with the Person objects) to the sketch
   * plates at the top of the screen.
   */
  syncData() {
    this.platesArray.forEach(plate => {
      this.getChocolatesOnPlate(plate).forEach(chocolate => chocolate.reset());
    });
    this.peopleArray.forEach((person, index) => {
      this.getChocolatesOnPlate(this.platesArray[index]).forEach((chocolate, i) => {
        chocolate.isActiveProperty.value = i < person.chocolateNumberProperty.value;
      });
    });
  }
  step(dt) {
    // future implementation
  }
}
meanShareAndBalance.register('LevelingOutModel', LevelingOutModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,