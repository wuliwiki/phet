// Copyright 2022, University of Colorado Boulder

/**
 * Model for the upper representation of chocolate stacks. Tracks whether a stack should be active, it's line placement, and position
 * relative to other stacks.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import meanShareAndBalance from '../../meanShareAndBalance.js';
import optionize from '../../../../phet-core/js/optionize.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';

// REVIEW: These options look identical to PersonOptions, and seem overlapped with options in ChocolateBar

export default class Plate extends PhetioObject {
  // REVIEW: Add a base class that factors out position, isActiveProperty and linePlacement

  // the plate's index

  constructor(providedOptions) {
    const options = optionize()({
      phetioState: false
    }, providedOptions);
    super(options);
    this.isActiveProperty = new BooleanProperty(options.isActive, {
      // phet-io
      tandem: options.tandem.createTandem('isActiveProperty'),
      // Takes its value from LevelingOutModel.numberOfPeopleProperty
      phetioReadOnly: true
    });
    this.position = options.position;
    this.linePlacement = options.linePlacement;
  }
  reset() {
    this.isActiveProperty.reset();
  }
}
meanShareAndBalance.register('Plate', Plate);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0aW9PYmplY3QiLCJtZWFuU2hhcmVBbmRCYWxhbmNlIiwib3B0aW9uaXplIiwiQm9vbGVhblByb3BlcnR5IiwiUGxhdGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJwaGV0aW9TdGF0ZSIsImlzQWN0aXZlUHJvcGVydHkiLCJpc0FjdGl2ZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1JlYWRPbmx5IiwicG9zaXRpb24iLCJsaW5lUGxhY2VtZW50IiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBsYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIHRoZSB1cHBlciByZXByZXNlbnRhdGlvbiBvZiBjaG9jb2xhdGUgc3RhY2tzLiBUcmFja3Mgd2hldGhlciBhIHN0YWNrIHNob3VsZCBiZSBhY3RpdmUsIGl0J3MgbGluZSBwbGFjZW1lbnQsIGFuZCBwb3NpdGlvblxyXG4gKiByZWxhdGl2ZSB0byBvdGhlciBzdGFja3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFybGEgU2NodWx6IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBXaXRoUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1dpdGhSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QsIHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgbWVhblNoYXJlQW5kQmFsYW5jZSBmcm9tICcuLi8uLi9tZWFuU2hhcmVBbmRCYWxhbmNlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuXHJcbi8vIFJFVklFVzogVGhlc2Ugb3B0aW9ucyBsb29rIGlkZW50aWNhbCB0byBQZXJzb25PcHRpb25zLCBhbmQgc2VlbSBvdmVybGFwcGVkIHdpdGggb3B0aW9ucyBpbiBDaG9jb2xhdGVCYXJcclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBwb3NpdGlvbjogVmVjdG9yMjtcclxuICBpc0FjdGl2ZTogYm9vbGVhbjtcclxuICBsaW5lUGxhY2VtZW50OiBudW1iZXI7XHJcbn07XHJcblxyXG50eXBlIFBsYXRlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgV2l0aFJlcXVpcmVkPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXRlIGV4dGVuZHMgUGhldGlvT2JqZWN0IHtcclxuXHJcbiAgLy8gUkVWSUVXOiBBZGQgYSBiYXNlIGNsYXNzIHRoYXQgZmFjdG9ycyBvdXQgcG9zaXRpb24sIGlzQWN0aXZlUHJvcGVydHkgYW5kIGxpbmVQbGFjZW1lbnRcclxuICBwdWJsaWMgcmVhZG9ubHkgcG9zaXRpb246IFZlY3RvcjI7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBpc0FjdGl2ZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgLy8gdGhlIHBsYXRlJ3MgaW5kZXhcclxuICBwdWJsaWMgcmVhZG9ubHkgbGluZVBsYWNlbWVudDogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogUGxhdGVPcHRpb25zICkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQbGF0ZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMsIFBoZXRpb09iamVjdE9wdGlvbnM+KCkoIHtcclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuaXNBY3RpdmVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIG9wdGlvbnMuaXNBY3RpdmUsIHtcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdpc0FjdGl2ZVByb3BlcnR5JyApLFxyXG5cclxuICAgICAgLy8gVGFrZXMgaXRzIHZhbHVlIGZyb20gTGV2ZWxpbmdPdXRNb2RlbC5udW1iZXJPZlBlb3BsZVByb3BlcnR5XHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XHJcblxyXG4gICAgdGhpcy5saW5lUGxhY2VtZW50ID0gb3B0aW9ucy5saW5lUGxhY2VtZW50O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc0FjdGl2ZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5tZWFuU2hhcmVBbmRCYWxhbmNlLnJlZ2lzdGVyKCAnUGxhdGUnLCBQbGF0ZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsWUFBWSxNQUErQix1Q0FBdUM7QUFDekYsT0FBT0MsbUJBQW1CLE1BQU0sOEJBQThCO0FBQzlELE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7O0FBR3BFOztBQVNBLGVBQWUsTUFBTUMsS0FBSyxTQUFTSixZQUFZLENBQUM7RUFFOUM7O0VBS0E7O0VBR09LLFdBQVdBLENBQUVDLGVBQTZCLEVBQUc7SUFDbEQsTUFBTUMsT0FBTyxHQUFHTCxTQUFTLENBQXNELENBQUMsQ0FBRTtNQUNoRk0sV0FBVyxFQUFFO0lBQ2YsQ0FBQyxFQUFFRixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUMsT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ0UsZ0JBQWdCLEdBQUcsSUFBSU4sZUFBZSxDQUFFSSxPQUFPLENBQUNHLFFBQVEsRUFBRTtNQUU3RDtNQUNBQyxNQUFNLEVBQUVKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDQyxZQUFZLENBQUUsa0JBQW1CLENBQUM7TUFFekQ7TUFDQUMsY0FBYyxFQUFFO0lBQ2xCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsUUFBUSxHQUFHUCxPQUFPLENBQUNPLFFBQVE7SUFFaEMsSUFBSSxDQUFDQyxhQUFhLEdBQUdSLE9BQU8sQ0FBQ1EsYUFBYTtFQUM1QztFQUVPQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDUCxnQkFBZ0IsQ0FBQ08sS0FBSyxDQUFDLENBQUM7RUFDL0I7QUFDRjtBQUVBZixtQkFBbUIsQ0FBQ2dCLFFBQVEsQ0FBRSxPQUFPLEVBQUViLEtBQU0sQ0FBQyJ9