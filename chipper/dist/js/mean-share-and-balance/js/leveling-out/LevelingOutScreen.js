// Copyright 2022, University of Colorado Boulder

/**
 * Instantiates Leveling Out Model and Screen View.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import MeanShareAndBalanceColors from '../common/MeanShareAndBalanceColors.js';
import meanShareAndBalance from '../meanShareAndBalance.js';
import optionize from '../../../phet-core/js/optionize.js';
import Screen from '../../../joist/js/Screen.js';
import LevelingOutModel from './model/LevelingOutModel.js';
import LevelingOutScreenView from './view/LevelingOutScreenView.js';
import MeanShareAndBalanceStrings from '../MeanShareAndBalanceStrings.js';
import SliderControlsAndBasicActionsKeyboardHelpContent from '../../../scenery-phet/js/keyboard/help/SliderControlsAndBasicActionsKeyboardHelpContent.js';
export default class LevelingOutScreen extends Screen {
  constructor(providedOptions) {
    const options = optionize()({
      name: MeanShareAndBalanceStrings.screen.levelingOutStringProperty,
      backgroundColorProperty: MeanShareAndBalanceColors.screenBackgroundColorProperty,
      createKeyboardHelpNode: () => new SliderControlsAndBasicActionsKeyboardHelpContent()
    }, providedOptions);
    super(() => new LevelingOutModel({
      tandem: options.tandem.createTandem('model')
    }), model => new LevelingOutScreenView(model, {
      tandem: options.tandem.createTandem('view')
    }), options);
  }
}
meanShareAndBalance.register('LevelingOutScreen', LevelingOutScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNZWFuU2hhcmVBbmRCYWxhbmNlQ29sb3JzIiwibWVhblNoYXJlQW5kQmFsYW5jZSIsIm9wdGlvbml6ZSIsIlNjcmVlbiIsIkxldmVsaW5nT3V0TW9kZWwiLCJMZXZlbGluZ091dFNjcmVlblZpZXciLCJNZWFuU2hhcmVBbmRCYWxhbmNlU3RyaW5ncyIsIlNsaWRlckNvbnRyb2xzQW5kQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwQ29udGVudCIsIkxldmVsaW5nT3V0U2NyZWVuIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsImxldmVsaW5nT3V0U3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsInNjcmVlbkJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiY3JlYXRlS2V5Ym9hcmRIZWxwTm9kZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMZXZlbGluZ091dFNjcmVlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSW5zdGFudGlhdGVzIExldmVsaW5nIE91dCBNb2RlbCBhbmQgU2NyZWVuIFZpZXcuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFybGEgU2NodWx6IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNZWFuU2hhcmVBbmRCYWxhbmNlQ29sb3JzIGZyb20gJy4uL2NvbW1vbi9NZWFuU2hhcmVBbmRCYWxhbmNlQ29sb3JzLmpzJztcclxuaW1wb3J0IG1lYW5TaGFyZUFuZEJhbGFuY2UgZnJvbSAnLi4vbWVhblNoYXJlQW5kQmFsYW5jZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgU2NyZWVuLCB7IFNjcmVlbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgTGV2ZWxpbmdPdXRNb2RlbCBmcm9tICcuL21vZGVsL0xldmVsaW5nT3V0TW9kZWwuanMnO1xyXG5pbXBvcnQgTGV2ZWxpbmdPdXRTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9MZXZlbGluZ091dFNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgTWVhblNoYXJlQW5kQmFsYW5jZVN0cmluZ3MgZnJvbSAnLi4vTWVhblNoYXJlQW5kQmFsYW5jZVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgU2xpZGVyQ29udHJvbHNBbmRCYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBDb250ZW50IGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9rZXlib2FyZC9oZWxwL1NsaWRlckNvbnRyb2xzQW5kQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwQ29udGVudC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgTGV2ZWxpbmdPdXRTY3JlZW5PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8U2NyZWVuT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGV2ZWxpbmdPdXRTY3JlZW4gZXh0ZW5kcyBTY3JlZW48TGV2ZWxpbmdPdXRNb2RlbCwgTGV2ZWxpbmdPdXRTY3JlZW5WaWV3PiB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IExldmVsaW5nT3V0U2NyZWVuT3B0aW9ucyApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TGV2ZWxpbmdPdXRTY3JlZW5PcHRpb25zLCBTZWxmT3B0aW9ucywgU2NyZWVuT3B0aW9ucz4oKSgge1xyXG4gICAgICBuYW1lOiBNZWFuU2hhcmVBbmRCYWxhbmNlU3RyaW5ncy5zY3JlZW4ubGV2ZWxpbmdPdXRTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IE1lYW5TaGFyZUFuZEJhbGFuY2VDb2xvcnMuc2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHksXHJcbiAgICAgIGNyZWF0ZUtleWJvYXJkSGVscE5vZGU6ICgpID0+IG5ldyBTbGlkZXJDb250cm9sc0FuZEJhc2ljQWN0aW9uc0tleWJvYXJkSGVscENvbnRlbnQoKVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IExldmVsaW5nT3V0TW9kZWwoIHsgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSB9ICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBMZXZlbGluZ091dFNjcmVlblZpZXcoIG1vZGVsLCB7IHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKSB9ICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5tZWFuU2hhcmVBbmRCYWxhbmNlLnJlZ2lzdGVyKCAnTGV2ZWxpbmdPdXRTY3JlZW4nLCBMZXZlbGluZ091dFNjcmVlbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHlCQUF5QixNQUFNLHdDQUF3QztBQUM5RSxPQUFPQyxtQkFBbUIsTUFBTSwyQkFBMkI7QUFDM0QsT0FBT0MsU0FBUyxNQUE0QixvQ0FBb0M7QUFFaEYsT0FBT0MsTUFBTSxNQUF5Qiw2QkFBNkI7QUFDbkUsT0FBT0MsZ0JBQWdCLE1BQU0sNkJBQTZCO0FBQzFELE9BQU9DLHFCQUFxQixNQUFNLGlDQUFpQztBQUNuRSxPQUFPQywwQkFBMEIsTUFBTSxrQ0FBa0M7QUFDekUsT0FBT0MsZ0RBQWdELE1BQU0sNEZBQTRGO0FBTXpKLGVBQWUsTUFBTUMsaUJBQWlCLFNBQVNMLE1BQU0sQ0FBMEM7RUFDdEZNLFdBQVdBLENBQUVDLGVBQXlDLEVBQUc7SUFDOUQsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQXVELENBQUMsQ0FBRTtNQUNqRlUsSUFBSSxFQUFFTiwwQkFBMEIsQ0FBQ08sTUFBTSxDQUFDQyx5QkFBeUI7TUFDakVDLHVCQUF1QixFQUFFZix5QkFBeUIsQ0FBQ2dCLDZCQUE2QjtNQUNoRkMsc0JBQXNCLEVBQUVBLENBQUEsS0FBTSxJQUFJVixnREFBZ0QsQ0FBQztJQUNyRixDQUFDLEVBQUVHLGVBQWdCLENBQUM7SUFDcEIsS0FBSyxDQUNILE1BQU0sSUFBSU4sZ0JBQWdCLENBQUU7TUFBRWMsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE9BQVE7SUFBRSxDQUFFLENBQUMsRUFDaEZDLEtBQUssSUFBSSxJQUFJZixxQkFBcUIsQ0FBRWUsS0FBSyxFQUFFO01BQUVGLE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSxNQUFPO0lBQUUsQ0FBRSxDQUFDLEVBQzlGUixPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFWLG1CQUFtQixDQUFDb0IsUUFBUSxDQUFFLG1CQUFtQixFQUFFYixpQkFBa0IsQ0FBQyJ9