// Copyright 2022-2023, University of Colorado Boulder

/**
 * An individual chocolate bar node. These chocolate bars are draggable, and must stay within the notebook paper bounds.
 * Each chocolate bar snaps to the closest plate when dropped, which updates the parentPlate in the model.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 *
 */

import meanShareAndBalance from '../../meanShareAndBalance.js';
import { DragListener, InteractiveHighlighting, Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import MeanShareAndBalanceConstants from '../../common/MeanShareAndBalanceConstants.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import MeanShareAndBalanceColors from '../../common/MeanShareAndBalanceColors.js';
// TODO: Should this be renamed ChocolateBarNode? https://github.com/phetsims/mean-share-and-balance/issues/131
export default class DraggableChocolate extends InteractiveHighlighting(Node) {
  constructor(model, chocolateBar, notebookPaperBoundsProperty, chocolateBarDropped, providedOptions) {
    const chocolateBarRectangle = new Rectangle(0, 0, MeanShareAndBalanceConstants.CHOCOLATE_WIDTH, MeanShareAndBalanceConstants.CHOCOLATE_HEIGHT, {
      fill: MeanShareAndBalanceColors.chocolateColorProperty,
      stroke: 'black'
    });
    const children = [chocolateBarRectangle];

    // In ?dev mode, show the index of the chocolate to help understand how things are organized and how they redistribute
    if (phet.chipper.queryParameters.dev) {
      children.push(new Text(chocolateBar.index, {
        fill: 'white',
        top: 0,
        left: 0
      }));
    }
    const options = optionize()({
      children: children,
      cursor: 'pointer'
    }, providedOptions);
    super(options);
    this.chocolateBar = chocolateBar;
    this.dragListener = new DragListener({
      positionProperty: this.chocolateBar.positionProperty,
      // The origin of the chocolate bar is the top left, so we must erode just on the right and bottom edge to keep
      // the chocolate fully in the paper region
      dragBoundsProperty: new DerivedProperty([notebookPaperBoundsProperty], bounds => new Bounds2(bounds.minX, bounds.minY, bounds.maxX - chocolateBarRectangle.width, bounds.maxY - chocolateBarRectangle.height)),
      start: () => {
        chocolateBar.stateProperty.set('dragging');
        model.reorganizeChocolates(chocolateBar.parentPlateProperty.value);
        this.moveToFront();
      },
      end: () => {
        chocolateBarDropped(this);
        chocolateBar.stateProperty.set('plate');
      },
      tandem: options.tandem.createTandem('dragListener')
    });
    this.addInputListener(this.dragListener);
    this.chocolateBar.positionProperty.link(position => this.setTranslation(position));
  }
}
meanShareAndBalance.register('DraggableChocolate', DraggableChocolate);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,