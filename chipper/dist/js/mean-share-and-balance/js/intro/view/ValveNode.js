// Copyright 2022, University of Colorado Boulder

/**
 * Representation for the valve that opens and closes a pipe.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Shape } from '../../../../kite/js/imports.js';
import { Node, Path, RadialGradient, Rectangle } from '../../../../scenery/js/imports.js';
import MeanShareAndBalanceColors from '../../common/MeanShareAndBalanceColors.js';
import meanShareAndBalance from '../../meanShareAndBalance.js';
import MeanShareAndBalanceConstants from '../../common/MeanShareAndBalanceConstants.js';
const LINE_WIDTH = 1;
export default class ValveNode extends Node {
  constructor(parentCenter, rotationProperty, tandem) {
    // Valve drawing
    const valveGradient = new RadialGradient(0, 0, 0, 0, 0, MeanShareAndBalanceConstants.VALVE_RADIUS + 2).addColorStop(0.5, MeanShareAndBalanceColors.pipeGradientLightColorProperty).addColorStop(1, MeanShareAndBalanceColors.pipeGradientDarkColorProperty);

    // Function to create circle with center rectangle cut out.
    const createInnerCircle = (radius, rectangleWidth) => {
      const circle = Shape.circle(radius - 1);
      const rectangle = Shape.rectangle(-rectangleWidth / 2, -radius - 5, rectangleWidth, (radius + 5) * 2);
      return circle.shapeDifference(rectangle);
    };
    const createOuterCircle = radius => {
      const outerCircle = Shape.circle(radius + 2);
      const innerCircle = Shape.circle(radius - 1);
      return outerCircle.shapeDifference(innerCircle);
    };
    const innerValve = new Path(createInnerCircle(MeanShareAndBalanceConstants.VALVE_RADIUS, MeanShareAndBalanceConstants.PIPE_WIDTH), {
      fill: 'black',
      lineWidth: LINE_WIDTH
    });
    const outerValve = new Path(createOuterCircle(MeanShareAndBalanceConstants.VALVE_RADIUS), {
      fill: valveGradient,
      stroke: 'black',
      lineWidth: LINE_WIDTH
    });

    // Inner pipe shows water color when pipe is opened.
    const innerPipe = new Rectangle(0, 0, MeanShareAndBalanceConstants.PIPE_WIDTH, MeanShareAndBalanceConstants.VALVE_RADIUS * 2, {
      center: innerValve.center
    });
    super({
      children: [innerPipe, outerValve, innerValve],
      cursor: 'pointer',
      x: parentCenter.x,
      y: parentCenter.y,
      // phet-io
      tandem: tandem.createTandem('valveNode')
    });
    rotationProperty.link(rotation => {
      this.rotation = rotation;
      innerPipe.fill = this.rotation >= Math.PI / 3 ? MeanShareAndBalanceColors.waterFillColorProperty : 'grey';
    });
  }
}
meanShareAndBalance.register('ValveNode', ValveNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIk5vZGUiLCJQYXRoIiwiUmFkaWFsR3JhZGllbnQiLCJSZWN0YW5nbGUiLCJNZWFuU2hhcmVBbmRCYWxhbmNlQ29sb3JzIiwibWVhblNoYXJlQW5kQmFsYW5jZSIsIk1lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMiLCJMSU5FX1dJRFRIIiwiVmFsdmVOb2RlIiwiY29uc3RydWN0b3IiLCJwYXJlbnRDZW50ZXIiLCJyb3RhdGlvblByb3BlcnR5IiwidGFuZGVtIiwidmFsdmVHcmFkaWVudCIsIlZBTFZFX1JBRElVUyIsImFkZENvbG9yU3RvcCIsInBpcGVHcmFkaWVudExpZ2h0Q29sb3JQcm9wZXJ0eSIsInBpcGVHcmFkaWVudERhcmtDb2xvclByb3BlcnR5IiwiY3JlYXRlSW5uZXJDaXJjbGUiLCJyYWRpdXMiLCJyZWN0YW5nbGVXaWR0aCIsImNpcmNsZSIsInJlY3RhbmdsZSIsInNoYXBlRGlmZmVyZW5jZSIsImNyZWF0ZU91dGVyQ2lyY2xlIiwib3V0ZXJDaXJjbGUiLCJpbm5lckNpcmNsZSIsImlubmVyVmFsdmUiLCJQSVBFX1dJRFRIIiwiZmlsbCIsImxpbmVXaWR0aCIsIm91dGVyVmFsdmUiLCJzdHJva2UiLCJpbm5lclBpcGUiLCJjZW50ZXIiLCJjaGlsZHJlbiIsImN1cnNvciIsIngiLCJ5IiwiY3JlYXRlVGFuZGVtIiwibGluayIsInJvdGF0aW9uIiwiTWF0aCIsIlBJIiwid2F0ZXJGaWxsQ29sb3JQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVmFsdmVOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRhdGlvbiBmb3IgdGhlIHZhbHZlIHRoYXQgb3BlbnMgYW5kIGNsb3NlcyBhIHBpcGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFybGEgU2NodWx6IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFBhdGgsIFJhZGlhbEdyYWRpZW50LCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgTWVhblNoYXJlQW5kQmFsYW5jZUNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vTWVhblNoYXJlQW5kQmFsYW5jZUNvbG9ycy5qcyc7XHJcbmltcG9ydCBtZWFuU2hhcmVBbmRCYWxhbmNlIGZyb20gJy4uLy4uL21lYW5TaGFyZUFuZEJhbGFuY2UuanMnO1xyXG5pbXBvcnQgTWVhblNoYXJlQW5kQmFsYW5jZUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vTWVhblNoYXJlQW5kQmFsYW5jZUNvbnN0YW50cy5qcyc7XHJcblxyXG5jb25zdCBMSU5FX1dJRFRIID0gMTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbHZlTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHBhcmVudENlbnRlcjogVmVjdG9yMiwgcm90YXRpb25Qcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcbiAgICAvLyBWYWx2ZSBkcmF3aW5nXHJcbiAgICBjb25zdCB2YWx2ZUdyYWRpZW50ID0gbmV3IFJhZGlhbEdyYWRpZW50KCAwLCAwLCAwLCAwLCAwLCBNZWFuU2hhcmVBbmRCYWxhbmNlQ29uc3RhbnRzLlZBTFZFX1JBRElVUyArIDIgKVxyXG4gICAgICAuYWRkQ29sb3JTdG9wKCAwLjUsIE1lYW5TaGFyZUFuZEJhbGFuY2VDb2xvcnMucGlwZUdyYWRpZW50TGlnaHRDb2xvclByb3BlcnR5IClcclxuICAgICAgLmFkZENvbG9yU3RvcCggMSwgTWVhblNoYXJlQW5kQmFsYW5jZUNvbG9ycy5waXBlR3JhZGllbnREYXJrQ29sb3JQcm9wZXJ0eSApO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSBjaXJjbGUgd2l0aCBjZW50ZXIgcmVjdGFuZ2xlIGN1dCBvdXQuXHJcbiAgICBjb25zdCBjcmVhdGVJbm5lckNpcmNsZSA9ICggcmFkaXVzOiBudW1iZXIsIHJlY3RhbmdsZVdpZHRoOiBudW1iZXIgKTogU2hhcGUgPT4ge1xyXG4gICAgICBjb25zdCBjaXJjbGUgPSBTaGFwZS5jaXJjbGUoIHJhZGl1cyAtIDEgKTtcclxuICAgICAgY29uc3QgcmVjdGFuZ2xlID0gU2hhcGUucmVjdGFuZ2xlKCAtcmVjdGFuZ2xlV2lkdGggLyAyLCAtcmFkaXVzIC0gNSwgcmVjdGFuZ2xlV2lkdGgsICggcmFkaXVzICsgNSApICogMiApO1xyXG4gICAgICByZXR1cm4gY2lyY2xlLnNoYXBlRGlmZmVyZW5jZSggcmVjdGFuZ2xlICk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZU91dGVyQ2lyY2xlID0gKCByYWRpdXM6IG51bWJlciApOiBTaGFwZSA9PiB7XHJcbiAgICAgIGNvbnN0IG91dGVyQ2lyY2xlID0gU2hhcGUuY2lyY2xlKCByYWRpdXMgKyAyICk7XHJcbiAgICAgIGNvbnN0IGlubmVyQ2lyY2xlID0gU2hhcGUuY2lyY2xlKCByYWRpdXMgLSAxICk7XHJcblxyXG4gICAgICByZXR1cm4gb3V0ZXJDaXJjbGUuc2hhcGVEaWZmZXJlbmNlKCBpbm5lckNpcmNsZSApO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBpbm5lclZhbHZlID0gbmV3IFBhdGgoIGNyZWF0ZUlubmVyQ2lyY2xlKCBNZWFuU2hhcmVBbmRCYWxhbmNlQ29uc3RhbnRzLlZBTFZFX1JBRElVUywgTWVhblNoYXJlQW5kQmFsYW5jZUNvbnN0YW50cy5QSVBFX1dJRFRIICksXHJcbiAgICAgIHsgZmlsbDogJ2JsYWNrJywgbGluZVdpZHRoOiBMSU5FX1dJRFRIIH0gKTtcclxuICAgIGNvbnN0IG91dGVyVmFsdmUgPSBuZXcgUGF0aCggY3JlYXRlT3V0ZXJDaXJjbGUoIE1lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMuVkFMVkVfUkFESVVTICksXHJcbiAgICAgIHsgZmlsbDogdmFsdmVHcmFkaWVudCwgc3Ryb2tlOiAnYmxhY2snLCBsaW5lV2lkdGg6IExJTkVfV0lEVEggfSApO1xyXG5cclxuICAgIC8vIElubmVyIHBpcGUgc2hvd3Mgd2F0ZXIgY29sb3Igd2hlbiBwaXBlIGlzIG9wZW5lZC5cclxuICAgIGNvbnN0IGlubmVyUGlwZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIE1lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMuUElQRV9XSURUSCwgTWVhblNoYXJlQW5kQmFsYW5jZUNvbnN0YW50cy5WQUxWRV9SQURJVVMgKiAyLCB7XHJcbiAgICAgIGNlbnRlcjogaW5uZXJWYWx2ZS5jZW50ZXJcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBjaGlsZHJlbjogWyBpbm5lclBpcGUsIG91dGVyVmFsdmUsIGlubmVyVmFsdmUgXSxcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICAgIHg6IHBhcmVudENlbnRlci54LFxyXG4gICAgICB5OiBwYXJlbnRDZW50ZXIueSxcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmFsdmVOb2RlJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgcm90YXRpb25Qcm9wZXJ0eS5saW5rKCByb3RhdGlvbiA9PiB7XHJcbiAgICAgIHRoaXMucm90YXRpb24gPSByb3RhdGlvbjtcclxuICAgICAgaW5uZXJQaXBlLmZpbGwgPSB0aGlzLnJvdGF0aW9uID49ICggTWF0aC5QSSAvIDMgKSA/IE1lYW5TaGFyZUFuZEJhbGFuY2VDb2xvcnMud2F0ZXJGaWxsQ29sb3JQcm9wZXJ0eSA6ICdncmV5JztcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbm1lYW5TaGFyZUFuZEJhbGFuY2UucmVnaXN0ZXIoICdWYWx2ZU5vZGUnLCBWYWx2ZU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFTQSxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxjQUFjLEVBQUVDLFNBQVMsUUFBUSxtQ0FBbUM7QUFFekYsT0FBT0MseUJBQXlCLE1BQU0sMkNBQTJDO0FBQ2pGLE9BQU9DLG1CQUFtQixNQUFNLDhCQUE4QjtBQUM5RCxPQUFPQyw0QkFBNEIsTUFBTSw4Q0FBOEM7QUFFdkYsTUFBTUMsVUFBVSxHQUFHLENBQUM7QUFFcEIsZUFBZSxNQUFNQyxTQUFTLFNBQVNSLElBQUksQ0FBQztFQUVuQ1MsV0FBV0EsQ0FBRUMsWUFBcUIsRUFBRUMsZ0JBQWtDLEVBQUVDLE1BQWMsRUFBRztJQUM5RjtJQUNBLE1BQU1DLGFBQWEsR0FBRyxJQUFJWCxjQUFjLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRUksNEJBQTRCLENBQUNRLFlBQVksR0FBRyxDQUFFLENBQUMsQ0FDckdDLFlBQVksQ0FBRSxHQUFHLEVBQUVYLHlCQUF5QixDQUFDWSw4QkFBK0IsQ0FBQyxDQUM3RUQsWUFBWSxDQUFFLENBQUMsRUFBRVgseUJBQXlCLENBQUNhLDZCQUE4QixDQUFDOztJQUU3RTtJQUNBLE1BQU1DLGlCQUFpQixHQUFHQSxDQUFFQyxNQUFjLEVBQUVDLGNBQXNCLEtBQWE7TUFDN0UsTUFBTUMsTUFBTSxHQUFHdEIsS0FBSyxDQUFDc0IsTUFBTSxDQUFFRixNQUFNLEdBQUcsQ0FBRSxDQUFDO01BQ3pDLE1BQU1HLFNBQVMsR0FBR3ZCLEtBQUssQ0FBQ3VCLFNBQVMsQ0FBRSxDQUFDRixjQUFjLEdBQUcsQ0FBQyxFQUFFLENBQUNELE1BQU0sR0FBRyxDQUFDLEVBQUVDLGNBQWMsRUFBRSxDQUFFRCxNQUFNLEdBQUcsQ0FBQyxJQUFLLENBQUUsQ0FBQztNQUN6RyxPQUFPRSxNQUFNLENBQUNFLGVBQWUsQ0FBRUQsU0FBVSxDQUFDO0lBQzVDLENBQUM7SUFFRCxNQUFNRSxpQkFBaUIsR0FBS0wsTUFBYyxJQUFhO01BQ3JELE1BQU1NLFdBQVcsR0FBRzFCLEtBQUssQ0FBQ3NCLE1BQU0sQ0FBRUYsTUFBTSxHQUFHLENBQUUsQ0FBQztNQUM5QyxNQUFNTyxXQUFXLEdBQUczQixLQUFLLENBQUNzQixNQUFNLENBQUVGLE1BQU0sR0FBRyxDQUFFLENBQUM7TUFFOUMsT0FBT00sV0FBVyxDQUFDRixlQUFlLENBQUVHLFdBQVksQ0FBQztJQUNuRCxDQUFDO0lBRUQsTUFBTUMsVUFBVSxHQUFHLElBQUkxQixJQUFJLENBQUVpQixpQkFBaUIsQ0FBRVosNEJBQTRCLENBQUNRLFlBQVksRUFBRVIsNEJBQTRCLENBQUNzQixVQUFXLENBQUMsRUFDbEk7TUFBRUMsSUFBSSxFQUFFLE9BQU87TUFBRUMsU0FBUyxFQUFFdkI7SUFBVyxDQUFFLENBQUM7SUFDNUMsTUFBTXdCLFVBQVUsR0FBRyxJQUFJOUIsSUFBSSxDQUFFdUIsaUJBQWlCLENBQUVsQiw0QkFBNEIsQ0FBQ1EsWUFBYSxDQUFDLEVBQ3pGO01BQUVlLElBQUksRUFBRWhCLGFBQWE7TUFBRW1CLE1BQU0sRUFBRSxPQUFPO01BQUVGLFNBQVMsRUFBRXZCO0lBQVcsQ0FBRSxDQUFDOztJQUVuRTtJQUNBLE1BQU0wQixTQUFTLEdBQUcsSUFBSTlCLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFRyw0QkFBNEIsQ0FBQ3NCLFVBQVUsRUFBRXRCLDRCQUE0QixDQUFDUSxZQUFZLEdBQUcsQ0FBQyxFQUFFO01BQzdIb0IsTUFBTSxFQUFFUCxVQUFVLENBQUNPO0lBQ3JCLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRTtNQUNMQyxRQUFRLEVBQUUsQ0FBRUYsU0FBUyxFQUFFRixVQUFVLEVBQUVKLFVBQVUsQ0FBRTtNQUMvQ1MsTUFBTSxFQUFFLFNBQVM7TUFDakJDLENBQUMsRUFBRTNCLFlBQVksQ0FBQzJCLENBQUM7TUFDakJDLENBQUMsRUFBRTVCLFlBQVksQ0FBQzRCLENBQUM7TUFFakI7TUFDQTFCLE1BQU0sRUFBRUEsTUFBTSxDQUFDMkIsWUFBWSxDQUFFLFdBQVk7SUFDM0MsQ0FBRSxDQUFDO0lBRUg1QixnQkFBZ0IsQ0FBQzZCLElBQUksQ0FBRUMsUUFBUSxJQUFJO01BQ2pDLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO01BQ3hCUixTQUFTLENBQUNKLElBQUksR0FBRyxJQUFJLENBQUNZLFFBQVEsSUFBTUMsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBRyxHQUFHdkMseUJBQXlCLENBQUN3QyxzQkFBc0IsR0FBRyxNQUFNO0lBQy9HLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXZDLG1CQUFtQixDQUFDd0MsUUFBUSxDQUFFLFdBQVcsRUFBRXJDLFNBQVUsQ0FBQyJ9