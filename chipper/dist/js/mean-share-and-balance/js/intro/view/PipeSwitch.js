// Copyright 2022, University of Colorado Boulder

/**
 * VBox that contains the AB Switch that toggles between pipe Open/Closed states
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 *
 */

import meanShareAndBalance from '../../meanShareAndBalance.js';
import ValveNode from './ValveNode.js';
import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import ABSwitch from '../../../../sun/js/ABSwitch.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class PipeSwitch extends ABSwitch {
  constructor(arePipesOpenProperty, tandem) {
    const options = {
      toggleSwitchOptions: {
        size: new Dimension2(40, 20)
      },
      tandem: tandem
    };
    const closedValveIcon = new ValveNode(new Vector2(0, 0), new Property(0), tandem.createTandem('closedValveIcon'));
    const openValveIcon = new ValveNode(new Vector2(0, 0), new Property(Math.PI / 2), tandem.createTandem('openValveIcon'));
    const combinedOptions = combineOptions({
      layoutOptions: {
        column: 0,
        row: 1,
        minContentHeight: 140
      },
      align: 'top',
      justify: 'left'
    }, options);
    super(arePipesOpenProperty, false, closedValveIcon, true, openValveIcon, combinedOptions);
  }
}
meanShareAndBalance.register('PipeSwitch', PipeSwitch);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZWFuU2hhcmVBbmRCYWxhbmNlIiwiVmFsdmVOb2RlIiwiUHJvcGVydHkiLCJWZWN0b3IyIiwiRGltZW5zaW9uMiIsIkFCU3dpdGNoIiwiY29tYmluZU9wdGlvbnMiLCJQaXBlU3dpdGNoIiwiY29uc3RydWN0b3IiLCJhcmVQaXBlc09wZW5Qcm9wZXJ0eSIsInRhbmRlbSIsIm9wdGlvbnMiLCJ0b2dnbGVTd2l0Y2hPcHRpb25zIiwic2l6ZSIsImNsb3NlZFZhbHZlSWNvbiIsImNyZWF0ZVRhbmRlbSIsIm9wZW5WYWx2ZUljb24iLCJNYXRoIiwiUEkiLCJjb21iaW5lZE9wdGlvbnMiLCJsYXlvdXRPcHRpb25zIiwiY29sdW1uIiwicm93IiwibWluQ29udGVudEhlaWdodCIsImFsaWduIiwianVzdGlmeSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGlwZVN3aXRjaC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVkJveCB0aGF0IGNvbnRhaW5zIHRoZSBBQiBTd2l0Y2ggdGhhdCB0b2dnbGVzIGJldHdlZW4gcGlwZSBPcGVuL0Nsb3NlZCBzdGF0ZXNcclxuICpcclxuICogQGF1dGhvciBNYXJsYSBTY2h1bHogKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lYW5TaGFyZUFuZEJhbGFuY2UgZnJvbSAnLi4vLi4vbWVhblNoYXJlQW5kQmFsYW5jZS5qcyc7XHJcbmltcG9ydCBWYWx2ZU5vZGUgZnJvbSAnLi9WYWx2ZU5vZGUuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgQUJTd2l0Y2gsIHsgQUJTd2l0Y2hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FCU3dpdGNoLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBpcGVTd2l0Y2ggZXh0ZW5kcyBBQlN3aXRjaDxib29sZWFuPiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYXJlUGlwZXNPcGVuUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICB0b2dnbGVTd2l0Y2hPcHRpb25zOiB7XHJcbiAgICAgICAgc2l6ZTogbmV3IERpbWVuc2lvbjIoIDQwLCAyMCApXHJcbiAgICAgIH0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNsb3NlZFZhbHZlSWNvbiA9IG5ldyBWYWx2ZU5vZGUoIG5ldyBWZWN0b3IyKCAwLCAwICksIG5ldyBQcm9wZXJ0eSggMCApLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY2xvc2VkVmFsdmVJY29uJyApICk7XHJcblxyXG4gICAgY29uc3Qgb3BlblZhbHZlSWNvbiA9IG5ldyBWYWx2ZU5vZGUoIG5ldyBWZWN0b3IyKCAwLCAwICksIG5ldyBQcm9wZXJ0eSggTWF0aC5QSSAvIDIgKSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ29wZW5WYWx2ZUljb24nICkgKTtcclxuXHJcbiAgICBjb25zdCBjb21iaW5lZE9wdGlvbnMgPSBjb21iaW5lT3B0aW9uczxBQlN3aXRjaE9wdGlvbnM+KCB7IGxheW91dE9wdGlvbnM6IHsgY29sdW1uOiAwLCByb3c6IDEsIG1pbkNvbnRlbnRIZWlnaHQ6IDE0MCB9LCBhbGlnbjogJ3RvcCcsIGp1c3RpZnk6ICdsZWZ0JyB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGFyZVBpcGVzT3BlblByb3BlcnR5LCBmYWxzZSwgY2xvc2VkVmFsdmVJY29uLCB0cnVlLCBvcGVuVmFsdmVJY29uLCBjb21iaW5lZE9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbm1lYW5TaGFyZUFuZEJhbGFuY2UucmVnaXN0ZXIoICdQaXBlU3dpdGNoJywgUGlwZVN3aXRjaCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLG1CQUFtQixNQUFNLDhCQUE4QjtBQUM5RCxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQ3RDLE9BQU9DLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLFFBQVEsTUFBMkIsZ0NBQWdDO0FBRTFFLFNBQVNDLGNBQWMsUUFBUSx1Q0FBdUM7QUFFdEUsZUFBZSxNQUFNQyxVQUFVLFNBQVNGLFFBQVEsQ0FBVTtFQUVqREcsV0FBV0EsQ0FBRUMsb0JBQXVDLEVBQUVDLE1BQWMsRUFBRztJQUU1RSxNQUFNQyxPQUFPLEdBQUc7TUFDZEMsbUJBQW1CLEVBQUU7UUFDbkJDLElBQUksRUFBRSxJQUFJVCxVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUc7TUFDL0IsQ0FBQztNQUNETSxNQUFNLEVBQUVBO0lBQ1YsQ0FBQztJQUVELE1BQU1JLGVBQWUsR0FBRyxJQUFJYixTQUFTLENBQUUsSUFBSUUsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsRUFBRSxJQUFJRCxRQUFRLENBQUUsQ0FBRSxDQUFDLEVBQUVRLE1BQU0sQ0FBQ0ssWUFBWSxDQUFFLGlCQUFrQixDQUFFLENBQUM7SUFFekgsTUFBTUMsYUFBYSxHQUFHLElBQUlmLFNBQVMsQ0FBRSxJQUFJRSxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFLElBQUlELFFBQVEsQ0FBRWUsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBRSxDQUFDLEVBQUVSLE1BQU0sQ0FBQ0ssWUFBWSxDQUFFLGVBQWdCLENBQUUsQ0FBQztJQUUvSCxNQUFNSSxlQUFlLEdBQUdiLGNBQWMsQ0FBbUI7TUFBRWMsYUFBYSxFQUFFO1FBQUVDLE1BQU0sRUFBRSxDQUFDO1FBQUVDLEdBQUcsRUFBRSxDQUFDO1FBQUVDLGdCQUFnQixFQUFFO01BQUksQ0FBQztNQUFFQyxLQUFLLEVBQUUsS0FBSztNQUFFQyxPQUFPLEVBQUU7SUFBTyxDQUFDLEVBQUVkLE9BQVEsQ0FBQztJQUVsSyxLQUFLLENBQUVGLG9CQUFvQixFQUFFLEtBQUssRUFBRUssZUFBZSxFQUFFLElBQUksRUFBRUUsYUFBYSxFQUFFRyxlQUFnQixDQUFDO0VBQzdGO0FBQ0Y7QUFFQW5CLG1CQUFtQixDQUFDMEIsUUFBUSxDQUFFLFlBQVksRUFBRW5CLFVBQVcsQ0FBQyJ9