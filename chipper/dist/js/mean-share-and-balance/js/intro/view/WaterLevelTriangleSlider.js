// Copyright 2022, University of Colorado Boulder

/**
 * Representation for the triangle that adjusts the water level in 3D cups.
 *
 * The triangle code in this Node is duplicated. Transferring to scenery-phet: https://github.com/phetsims/scenery-phet/issues/748
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import meanShareAndBalance from '../../meanShareAndBalance.js';
import optionize from '../../../../phet-core/js/optionize.js';
import VSlider from '../../../../sun/js/VSlider.js';
import MeanShareAndBalanceConstants from '../../common/MeanShareAndBalanceConstants.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import TriangleNode from '../../../../scenery-phet/js/TriangleNode.js';
export default class WaterLevelTriangleSlider extends VSlider {
  constructor(waterLevelProperty, enabledRangeProperty, height, providedOptions) {
    const thumbNode = new TriangleNode({
      fill: '#51CEF4',
      tandem: providedOptions.tandem.createTandem('thumbNode')
    });
    const options = optionize()({
      cursor: 'pointer',
      thumbNode: thumbNode,
      enabledRangeProperty: enabledRangeProperty,
      trackFillEnabled: null,
      trackFillDisabled: null,
      trackStroke: null,
      trackPickable: false,
      trackSize: new Dimension2(0, height)
    }, providedOptions);
    super(waterLevelProperty, MeanShareAndBalanceConstants.WATER_LEVEL_RANGE, options);

    // Set pointer areas for slider thumb node.
    thumbNode.mouseArea = thumbNode.localBounds.dilated(MeanShareAndBalanceConstants.MOUSE_AREA_DILATION);
    thumbNode.touchArea = thumbNode.localBounds.dilated(MeanShareAndBalanceConstants.TOUCH_AREA_DILATION);
  }
}
meanShareAndBalance.register('WaterLevelTriangleSlider', WaterLevelTriangleSlider);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZWFuU2hhcmVBbmRCYWxhbmNlIiwib3B0aW9uaXplIiwiVlNsaWRlciIsIk1lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMiLCJEaW1lbnNpb24yIiwiVHJpYW5nbGVOb2RlIiwiV2F0ZXJMZXZlbFRyaWFuZ2xlU2xpZGVyIiwiY29uc3RydWN0b3IiLCJ3YXRlckxldmVsUHJvcGVydHkiLCJlbmFibGVkUmFuZ2VQcm9wZXJ0eSIsImhlaWdodCIsInByb3ZpZGVkT3B0aW9ucyIsInRodW1iTm9kZSIsImZpbGwiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJvcHRpb25zIiwiY3Vyc29yIiwidHJhY2tGaWxsRW5hYmxlZCIsInRyYWNrRmlsbERpc2FibGVkIiwidHJhY2tTdHJva2UiLCJ0cmFja1BpY2thYmxlIiwidHJhY2tTaXplIiwiV0FURVJfTEVWRUxfUkFOR0UiLCJtb3VzZUFyZWEiLCJsb2NhbEJvdW5kcyIsImRpbGF0ZWQiLCJNT1VTRV9BUkVBX0RJTEFUSU9OIiwidG91Y2hBcmVhIiwiVE9VQ0hfQVJFQV9ESUxBVElPTiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F0ZXJMZXZlbFRyaWFuZ2xlU2xpZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRhdGlvbiBmb3IgdGhlIHRyaWFuZ2xlIHRoYXQgYWRqdXN0cyB0aGUgd2F0ZXIgbGV2ZWwgaW4gM0QgY3Vwcy5cclxuICpcclxuICogVGhlIHRyaWFuZ2xlIGNvZGUgaW4gdGhpcyBOb2RlIGlzIGR1cGxpY2F0ZWQuIFRyYW5zZmVycmluZyB0byBzY2VuZXJ5LXBoZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5LXBoZXQvaXNzdWVzLzc0OFxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcmxhIFNjaHVseiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBtZWFuU2hhcmVBbmRCYWxhbmNlIGZyb20gJy4uLy4uL21lYW5TaGFyZUFuZEJhbGFuY2UuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFZTbGlkZXIsIHsgVlNsaWRlck9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvVlNsaWRlci5qcyc7XHJcbmltcG9ydCBNZWFuU2hhcmVBbmRCYWxhbmNlQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9NZWFuU2hhcmVBbmRCYWxhbmNlQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgVHJpYW5nbGVOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9UcmlhbmdsZU5vZGUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxudHlwZSBXYXRlckxldmVsVHJpYW5nbGVTbGlkZXJPcHRpb25zID1cclxuICBTZWxmT3B0aW9uc1xyXG4gICYgU3RyaWN0T21pdDxWU2xpZGVyT3B0aW9ucywgJ3BpY2thYmxlJyB8ICdpbnB1dEVuYWJsZWQnIHwgJ2N1cnNvcic+XHJcbiAgJiBQaWNrUmVxdWlyZWQ8VlNsaWRlck9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhdGVyTGV2ZWxUcmlhbmdsZVNsaWRlciBleHRlbmRzIFZTbGlkZXIge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHdhdGVyTGV2ZWxQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgZW5hYmxlZFJhbmdlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFJhbmdlPiwgaGVpZ2h0OiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IFdhdGVyTGV2ZWxUcmlhbmdsZVNsaWRlck9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgdGh1bWJOb2RlID0gbmV3IFRyaWFuZ2xlTm9kZSgge1xyXG4gICAgICBmaWxsOiAnIzUxQ0VGNCcsXHJcbiAgICAgIHRhbmRlbTogcHJvdmlkZWRPcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aHVtYk5vZGUnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFdhdGVyTGV2ZWxUcmlhbmdsZVNsaWRlck9wdGlvbnMsIFNlbGZPcHRpb25zLCBWU2xpZGVyT3B0aW9ucz4oKSgge1xyXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxyXG4gICAgICAgIHRodW1iTm9kZTogdGh1bWJOb2RlLFxyXG4gICAgICAgIGVuYWJsZWRSYW5nZVByb3BlcnR5OiBlbmFibGVkUmFuZ2VQcm9wZXJ0eSxcclxuICAgICAgICB0cmFja0ZpbGxFbmFibGVkOiBudWxsLFxyXG4gICAgICAgIHRyYWNrRmlsbERpc2FibGVkOiBudWxsLFxyXG4gICAgICAgIHRyYWNrU3Ryb2tlOiBudWxsLFxyXG4gICAgICAgIHRyYWNrUGlja2FibGU6IGZhbHNlLFxyXG4gICAgICAgIHRyYWNrU2l6ZTogbmV3IERpbWVuc2lvbjIoIDAsIGhlaWdodCApXHJcbiAgICAgIH0sXHJcbiAgICAgIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCB3YXRlckxldmVsUHJvcGVydHksIE1lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMuV0FURVJfTEVWRUxfUkFOR0UsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBTZXQgcG9pbnRlciBhcmVhcyBmb3Igc2xpZGVyIHRodW1iIG5vZGUuXHJcbiAgICB0aHVtYk5vZGUubW91c2VBcmVhID0gdGh1bWJOb2RlLmxvY2FsQm91bmRzLmRpbGF0ZWQoIE1lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMuTU9VU0VfQVJFQV9ESUxBVElPTiApO1xyXG4gICAgdGh1bWJOb2RlLnRvdWNoQXJlYSA9IHRodW1iTm9kZS5sb2NhbEJvdW5kcy5kaWxhdGVkKCBNZWFuU2hhcmVBbmRCYWxhbmNlQ29uc3RhbnRzLlRPVUNIX0FSRUFfRElMQVRJT04gKTtcclxuICB9XHJcbn1cclxuXHJcbm1lYW5TaGFyZUFuZEJhbGFuY2UucmVnaXN0ZXIoICdXYXRlckxldmVsVHJpYW5nbGVTbGlkZXInLCBXYXRlckxldmVsVHJpYW5nbGVTbGlkZXIgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsbUJBQW1CLE1BQU0sOEJBQThCO0FBQzlELE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLE9BQU8sTUFBMEIsK0JBQStCO0FBQ3ZFLE9BQU9DLDRCQUE0QixNQUFNLDhDQUE4QztBQUd2RixPQUFPQyxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLFlBQVksTUFBTSw2Q0FBNkM7QUFVdEUsZUFBZSxNQUFNQyx3QkFBd0IsU0FBU0osT0FBTyxDQUFDO0VBRXJESyxXQUFXQSxDQUFFQyxrQkFBb0MsRUFBRUMsb0JBQThDLEVBQUVDLE1BQWMsRUFDcEdDLGVBQWdELEVBQUc7SUFFckUsTUFBTUMsU0FBUyxHQUFHLElBQUlQLFlBQVksQ0FBRTtNQUNsQ1EsSUFBSSxFQUFFLFNBQVM7TUFDZkMsTUFBTSxFQUFFSCxlQUFlLENBQUNHLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFdBQVk7SUFDM0QsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsT0FBTyxHQUFHZixTQUFTLENBQStELENBQUMsQ0FBRTtNQUN2RmdCLE1BQU0sRUFBRSxTQUFTO01BQ2pCTCxTQUFTLEVBQUVBLFNBQVM7TUFDcEJILG9CQUFvQixFQUFFQSxvQkFBb0I7TUFDMUNTLGdCQUFnQixFQUFFLElBQUk7TUFDdEJDLGlCQUFpQixFQUFFLElBQUk7TUFDdkJDLFdBQVcsRUFBRSxJQUFJO01BQ2pCQyxhQUFhLEVBQUUsS0FBSztNQUNwQkMsU0FBUyxFQUFFLElBQUlsQixVQUFVLENBQUUsQ0FBQyxFQUFFTSxNQUFPO0lBQ3ZDLENBQUMsRUFDREMsZUFBZ0IsQ0FBQztJQUVuQixLQUFLLENBQUVILGtCQUFrQixFQUFFTCw0QkFBNEIsQ0FBQ29CLGlCQUFpQixFQUFFUCxPQUFRLENBQUM7O0lBRXBGO0lBQ0FKLFNBQVMsQ0FBQ1ksU0FBUyxHQUFHWixTQUFTLENBQUNhLFdBQVcsQ0FBQ0MsT0FBTyxDQUFFdkIsNEJBQTRCLENBQUN3QixtQkFBb0IsQ0FBQztJQUN2R2YsU0FBUyxDQUFDZ0IsU0FBUyxHQUFHaEIsU0FBUyxDQUFDYSxXQUFXLENBQUNDLE9BQU8sQ0FBRXZCLDRCQUE0QixDQUFDMEIsbUJBQW9CLENBQUM7RUFDekc7QUFDRjtBQUVBN0IsbUJBQW1CLENBQUM4QixRQUFRLENBQUUsMEJBQTBCLEVBQUV4Qix3QkFBeUIsQ0FBQyJ9