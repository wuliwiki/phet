// Copyright 2022, University of Colorado Boulder

/**
 * Representation for the 3D water cup including draggable water level.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Node } from '../../../../scenery/js/imports.js';
import meanShareAndBalance from '../../meanShareAndBalance.js';
import WaterLevelTriangleSlider from './WaterLevelTriangleSlider.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import MeanShareAndBalanceConstants from '../../common/MeanShareAndBalanceConstants.js';
import BeakerNode from '../../../../scenery-phet/js/BeakerNode.js';
import MeanShareAndBalanceColors from '../../common/MeanShareAndBalanceColors.js';
export default class WaterCup3DNode extends Node {
  constructor(tickMarksVisibleProperty, model, waterCup, modelViewTransform, providedOptions) {
    const options = optionize()({
      y: modelViewTransform.modelToViewY(0) - MeanShareAndBalanceConstants.CUP_HEIGHT,
      left: waterCup.position.x,
      visibleProperty: waterCup.isActiveProperty
    }, providedOptions);

    // The CUP_HEIGHT is the height of the 2d cups.  The 3D cups have to be adjusted accordingly because of the top and bottom ellipses,
    // so they don't seem disproportionately tall
    const beakerHeight = MeanShareAndBalanceConstants.CUP_HEIGHT - 10;
    const beakerLineWidth = 2;
    const waterCupNode = new BeakerNode(waterCup.waterLevelProperty, {
      lineWidth: beakerLineWidth,
      beakerWidth: MeanShareAndBalanceConstants.CUP_WIDTH,
      beakerHeight: beakerHeight,
      solutionFill: MeanShareAndBalanceColors.waterFillColorProperty,
      solutionGlareFill: MeanShareAndBalanceColors.water3DCrescentFillColorProperty,
      solutionShadowFill: MeanShareAndBalanceColors.waterShadowFillColorProperty,
      beakerGlareFill: MeanShareAndBalanceColors.waterCup3DGlareFillColorProperty,
      emptyBeakerFill: MeanShareAndBalanceColors.emptyWaterCup3DColorProperty
    });
    const isShowingTickMarksListener = isShowingTickMarks => waterCupNode.setTicksVisible(isShowingTickMarks);
    tickMarksVisibleProperty.link(isShowingTickMarksListener);
    waterCup.waterLevelProperty.lazyLink((waterLevel, oldWaterlevel) => {
      model.changeWaterLevel(waterCup, waterLevel, oldWaterlevel);
    });
    const waterLevelTriangle = new WaterLevelTriangleSlider(waterCup.waterLevelProperty, waterCup.enabledRangeProperty, beakerHeight, {
      left: MeanShareAndBalanceConstants.CUP_WIDTH * MeanShareAndBalanceConstants.WATER_LEVEL_DEFAULT,
      top: waterCupNode.top + beakerLineWidth * 2,
      // phet-io
      tandem: options.tandem.createTandem('waterLevelSlider')
    });
    const combinedOptions = combineOptions({
      children: [waterCupNode, waterLevelTriangle]
    }, options);
    super(combinedOptions);
  }
}
meanShareAndBalance.register('WaterCup3DNode', WaterCup3DNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,