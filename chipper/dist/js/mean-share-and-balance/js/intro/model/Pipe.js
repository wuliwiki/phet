// Copyright 2022-2023, University of Colorado Boulder

/**
 * Model for pipes and valves.
 * The pipes visually connect the 2D cup representations and the valves control whether water is shared or not.
 * When the valves are open the water flows between all connected cups, and when the valves are closed
 * water is not allowed to flow between cups.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import meanShareAndBalance from '../../meanShareAndBalance.js';
export default class Pipe extends PhetioObject {
  // Whether pipe is enabled in view and data calculations

  // Property tracks if the pipe's valve is in a clicked state.
  isCurrentlyClickedProperty = new BooleanProperty(false);
  // The x and y positions of the pipe in the view.

  // Holds the valve node rotation value. Closed is 0, and open is Pi/2

  constructor(arePipesOpenProperty, providedOptions) {
    const options = optionize()({
      isActive: false,
      // phet-io
      phetioType: Pipe.PipeIO
    }, providedOptions);
    super(options);
    this.rotationProperty = new NumberProperty(0);
    this.arePipesOpenProperty = arePipesOpenProperty;
    this.isActiveProperty = new BooleanProperty(options.isActive);
    this.position = options.position;
  }
  reset() {
    this.isActiveProperty.reset();
    this.rotationProperty.reset();
  }

  // Valve animation
  step(dt) {
    const currentRotation = this.rotationProperty.value;
    const targetRotation = this.arePipesOpenProperty.value ? Math.PI / 2 : 0;
    const delta = targetRotation - currentRotation;
    const rotationThreshold = Math.abs(this.rotationProperty.value - targetRotation) * 0.4;
    const proposedRotation = currentRotation + Math.sign(delta) * dt * 3;
    this.rotationProperty.value = rotationThreshold <= dt ? targetRotation : proposedRotation;
  }
  static PipeIO = new IOType('PipeIO', {
    valueType: Pipe,
    toStateObject: pipe => ({
      position: pipe.position
    }),
    stateObjectToCreateElementArguments: stateObject => {
      return [stateObject.position];
    },
    stateSchema: {
      position: Vector2.Vector2IO
    }
  });
}
meanShareAndBalance.register('Pipe', Pipe);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,