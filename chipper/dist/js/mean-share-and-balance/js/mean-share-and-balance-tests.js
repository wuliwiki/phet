// Copyright 2022, University of Colorado Boulder

/**
 * Unit tests for Mean: Share and Balance
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 */

import qunitStart from '../../chipper/js/sim-tests/qunitStart.js';
import IntroModel from './intro/model/IntroModel.js';
import WaterCup from './intro/model/WaterCup.js';
import MeanShareAndBalanceConstants from './common/MeanShareAndBalanceConstants.js';
import Vector2 from '../../dot/js/Vector2.js';
import Tandem from '../../tandem/js/Tandem.js';
const introModel = new IntroModel({
  tandem: Tandem.OPT_OUT
});
const position = new Vector2(50, MeanShareAndBalanceConstants.CUPS_3D_CENTER_Y);
function testApproximatelyEquals(actual, expected, tolerance, assert, message) {
  assert.equal(actual.length, expected.length, message);
  let failed = false;
  for (let i = 0; i < actual.length; i++) {
    if (Math.abs(actual[i] - expected[i]) > tolerance) {
      failed = true;
    }
  }
  assert.ok(!failed, message + ', expected = ' + expected + ', actual = ' + actual);
}
QUnit.test('distribute ripple', assert => {
  function testDistribution(waterLevels, waterDelta, expectedLevels, message) {
    const connectedCups = waterLevels.map((waterLevel, index) => {
      return new WaterCup(Tandem.OPT_OUT, {
        isActive: true,
        waterLevel: waterLevel,
        linePlacement: index,
        position: position
      });
    });
    introModel['distributeWaterRipple'](connectedCups, connectedCups[2], waterDelta);
    const actual = connectedCups.map(cup => cup.waterLevelProperty.value);
    testApproximatelyEquals(actual, expectedLevels, 1E-8, assert, message);
  }
  testDistribution([0, 0, 1, 0, 0], 1, [0.06, 0.2, 1, 0.2, 0.06], 'center cup rippling out, first pass');
  // testDistribution( [ 0, 0.1, 0.8, 0.1, 0 ], [ 0.01, 0.17, 0.64, 0.17, 0.01 ], 'center cup rippling out, second pass' );
  // testDistribution( [ 0.01, 0.17, 0.64, 0.17, 0.01 ], [ 0.027, 0.217, 0.512, 0.217, 0.027 ], 'center cup rippling out, second pass' );
});

qunitStart();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJxdW5pdFN0YXJ0IiwiSW50cm9Nb2RlbCIsIldhdGVyQ3VwIiwiTWVhblNoYXJlQW5kQmFsYW5jZUNvbnN0YW50cyIsIlZlY3RvcjIiLCJUYW5kZW0iLCJpbnRyb01vZGVsIiwidGFuZGVtIiwiT1BUX09VVCIsInBvc2l0aW9uIiwiQ1VQU18zRF9DRU5URVJfWSIsInRlc3RBcHByb3hpbWF0ZWx5RXF1YWxzIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJ0b2xlcmFuY2UiLCJhc3NlcnQiLCJtZXNzYWdlIiwiZXF1YWwiLCJsZW5ndGgiLCJmYWlsZWQiLCJpIiwiTWF0aCIsImFicyIsIm9rIiwiUVVuaXQiLCJ0ZXN0IiwidGVzdERpc3RyaWJ1dGlvbiIsIndhdGVyTGV2ZWxzIiwid2F0ZXJEZWx0YSIsImV4cGVjdGVkTGV2ZWxzIiwiY29ubmVjdGVkQ3VwcyIsIm1hcCIsIndhdGVyTGV2ZWwiLCJpbmRleCIsImlzQWN0aXZlIiwibGluZVBsYWNlbWVudCIsImN1cCIsIndhdGVyTGV2ZWxQcm9wZXJ0eSIsInZhbHVlIl0sInNvdXJjZXMiOlsibWVhbi1zaGFyZS1hbmQtYmFsYW5jZS10ZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVW5pdCB0ZXN0cyBmb3IgTWVhbjogU2hhcmUgYW5kIEJhbGFuY2VcclxuICpcclxuICogQGF1dGhvciBNYXJsYSBTY2h1bHogKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHF1bml0U3RhcnQgZnJvbSAnLi4vLi4vY2hpcHBlci9qcy9zaW0tdGVzdHMvcXVuaXRTdGFydC5qcyc7XHJcbmltcG9ydCBJbnRyb01vZGVsIGZyb20gJy4vaW50cm8vbW9kZWwvSW50cm9Nb2RlbC5qcyc7XHJcbmltcG9ydCBXYXRlckN1cCBmcm9tICcuL2ludHJvL21vZGVsL1dhdGVyQ3VwLmpzJztcclxuaW1wb3J0IE1lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMgZnJvbSAnLi9jb21tb24vTWVhblNoYXJlQW5kQmFsYW5jZUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbmNvbnN0IGludHJvTW9kZWwgPSBuZXcgSW50cm9Nb2RlbCggeyB0YW5kZW06IFRhbmRlbS5PUFRfT1VUIH0gKTtcclxuY29uc3QgcG9zaXRpb24gPSBuZXcgVmVjdG9yMiggNTAsIE1lYW5TaGFyZUFuZEJhbGFuY2VDb25zdGFudHMuQ1VQU18zRF9DRU5URVJfWSApO1xyXG5cclxuZnVuY3Rpb24gdGVzdEFwcHJveGltYXRlbHlFcXVhbHMoIGFjdHVhbDogbnVtYmVyW10sIGV4cGVjdGVkOiBudW1iZXJbXSwgdG9sZXJhbmNlOiBudW1iZXIsIGFzc2VydDogQXNzZXJ0LCBtZXNzYWdlOiBzdHJpbmcgKTogdm9pZCB7XHJcbiAgYXNzZXJ0LmVxdWFsKCBhY3R1YWwubGVuZ3RoLCBleHBlY3RlZC5sZW5ndGgsIG1lc3NhZ2UgKTtcclxuXHJcbiAgbGV0IGZhaWxlZCA9IGZhbHNlO1xyXG4gIGZvciAoIGxldCBpID0gMDsgaSA8IGFjdHVhbC5sZW5ndGg7IGkrKyApIHtcclxuXHJcblxyXG4gICAgaWYgKCBNYXRoLmFicyggYWN0dWFsWyBpIF0gLSBleHBlY3RlZFsgaSBdICkgPiB0b2xlcmFuY2UgKSB7XHJcbiAgICAgIGZhaWxlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGFzc2VydC5vayggIWZhaWxlZCwgbWVzc2FnZSArICcsIGV4cGVjdGVkID0gJyArIGV4cGVjdGVkICsgJywgYWN0dWFsID0gJyArIGFjdHVhbCApO1xyXG59XHJcblxyXG5RVW5pdC50ZXN0KCAnZGlzdHJpYnV0ZSByaXBwbGUnLCBhc3NlcnQgPT4ge1xyXG4gIGZ1bmN0aW9uIHRlc3REaXN0cmlidXRpb24oIHdhdGVyTGV2ZWxzOiBudW1iZXJbXSwgd2F0ZXJEZWx0YTogbnVtYmVyLCBleHBlY3RlZExldmVsczogbnVtYmVyW10sIG1lc3NhZ2U6IHN0cmluZyApOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbm5lY3RlZEN1cHMgPSB3YXRlckxldmVscy5tYXAoICggd2F0ZXJMZXZlbCwgaW5kZXggKSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgV2F0ZXJDdXAoIFRhbmRlbS5PUFRfT1VULCB7IGlzQWN0aXZlOiB0cnVlLCB3YXRlckxldmVsOiB3YXRlckxldmVsLCBsaW5lUGxhY2VtZW50OiBpbmRleCwgcG9zaXRpb246IHBvc2l0aW9uIH0gKTtcclxuICAgIH0gKTtcclxuICAgIGludHJvTW9kZWxbICdkaXN0cmlidXRlV2F0ZXJSaXBwbGUnIF0oIGNvbm5lY3RlZEN1cHMsIGNvbm5lY3RlZEN1cHNbIDIgXSwgd2F0ZXJEZWx0YSApO1xyXG5cclxuICAgIGNvbnN0IGFjdHVhbCA9IGNvbm5lY3RlZEN1cHMubWFwKCBjdXAgPT4gY3VwLndhdGVyTGV2ZWxQcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgdGVzdEFwcHJveGltYXRlbHlFcXVhbHMoIGFjdHVhbCwgZXhwZWN0ZWRMZXZlbHMsIDFFLTgsIGFzc2VydCwgbWVzc2FnZSApO1xyXG4gIH1cclxuXHJcbiAgdGVzdERpc3RyaWJ1dGlvbiggWyAwLCAwLCAxLCAwLCAwIF0sIDEsIFsgMC4wNiwgMC4yLCAxLCAwLjIsIDAuMDYgXSwgJ2NlbnRlciBjdXAgcmlwcGxpbmcgb3V0LCBmaXJzdCBwYXNzJyApO1xyXG4gIC8vIHRlc3REaXN0cmlidXRpb24oIFsgMCwgMC4xLCAwLjgsIDAuMSwgMCBdLCBbIDAuMDEsIDAuMTcsIDAuNjQsIDAuMTcsIDAuMDEgXSwgJ2NlbnRlciBjdXAgcmlwcGxpbmcgb3V0LCBzZWNvbmQgcGFzcycgKTtcclxuICAvLyB0ZXN0RGlzdHJpYnV0aW9uKCBbIDAuMDEsIDAuMTcsIDAuNjQsIDAuMTcsIDAuMDEgXSwgWyAwLjAyNywgMC4yMTcsIDAuNTEyLCAwLjIxNywgMC4wMjcgXSwgJ2NlbnRlciBjdXAgcmlwcGxpbmcgb3V0LCBzZWNvbmQgcGFzcycgKTtcclxuXHJcbn0gKTtcclxuXHJcbnF1bml0U3RhcnQoKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLDBDQUEwQztBQUNqRSxPQUFPQyxVQUFVLE1BQU0sNkJBQTZCO0FBQ3BELE9BQU9DLFFBQVEsTUFBTSwyQkFBMkI7QUFDaEQsT0FBT0MsNEJBQTRCLE1BQU0sMENBQTBDO0FBQ25GLE9BQU9DLE9BQU8sTUFBTSx5QkFBeUI7QUFDN0MsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUU5QyxNQUFNQyxVQUFVLEdBQUcsSUFBSUwsVUFBVSxDQUFFO0VBQUVNLE1BQU0sRUFBRUYsTUFBTSxDQUFDRztBQUFRLENBQUUsQ0FBQztBQUMvRCxNQUFNQyxRQUFRLEdBQUcsSUFBSUwsT0FBTyxDQUFFLEVBQUUsRUFBRUQsNEJBQTRCLENBQUNPLGdCQUFpQixDQUFDO0FBRWpGLFNBQVNDLHVCQUF1QkEsQ0FBRUMsTUFBZ0IsRUFBRUMsUUFBa0IsRUFBRUMsU0FBaUIsRUFBRUMsTUFBYyxFQUFFQyxPQUFlLEVBQVM7RUFDaklELE1BQU0sQ0FBQ0UsS0FBSyxDQUFFTCxNQUFNLENBQUNNLE1BQU0sRUFBRUwsUUFBUSxDQUFDSyxNQUFNLEVBQUVGLE9BQVEsQ0FBQztFQUV2RCxJQUFJRyxNQUFNLEdBQUcsS0FBSztFQUNsQixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1IsTUFBTSxDQUFDTSxNQUFNLEVBQUVFLENBQUMsRUFBRSxFQUFHO0lBR3hDLElBQUtDLElBQUksQ0FBQ0MsR0FBRyxDQUFFVixNQUFNLENBQUVRLENBQUMsQ0FBRSxHQUFHUCxRQUFRLENBQUVPLENBQUMsQ0FBRyxDQUFDLEdBQUdOLFNBQVMsRUFBRztNQUN6REssTUFBTSxHQUFHLElBQUk7SUFDZjtFQUNGO0VBQ0FKLE1BQU0sQ0FBQ1EsRUFBRSxDQUFFLENBQUNKLE1BQU0sRUFBRUgsT0FBTyxHQUFHLGVBQWUsR0FBR0gsUUFBUSxHQUFHLGFBQWEsR0FBR0QsTUFBTyxDQUFDO0FBQ3JGO0FBRUFZLEtBQUssQ0FBQ0MsSUFBSSxDQUFFLG1CQUFtQixFQUFFVixNQUFNLElBQUk7RUFDekMsU0FBU1csZ0JBQWdCQSxDQUFFQyxXQUFxQixFQUFFQyxVQUFrQixFQUFFQyxjQUF3QixFQUFFYixPQUFlLEVBQVM7SUFDdEgsTUFBTWMsYUFBYSxHQUFHSCxXQUFXLENBQUNJLEdBQUcsQ0FBRSxDQUFFQyxVQUFVLEVBQUVDLEtBQUssS0FBTTtNQUM5RCxPQUFPLElBQUkvQixRQUFRLENBQUVHLE1BQU0sQ0FBQ0csT0FBTyxFQUFFO1FBQUUwQixRQUFRLEVBQUUsSUFBSTtRQUFFRixVQUFVLEVBQUVBLFVBQVU7UUFBRUcsYUFBYSxFQUFFRixLQUFLO1FBQUV4QixRQUFRLEVBQUVBO01BQVMsQ0FBRSxDQUFDO0lBQzdILENBQUUsQ0FBQztJQUNISCxVQUFVLENBQUUsdUJBQXVCLENBQUUsQ0FBRXdCLGFBQWEsRUFBRUEsYUFBYSxDQUFFLENBQUMsQ0FBRSxFQUFFRixVQUFXLENBQUM7SUFFdEYsTUFBTWhCLE1BQU0sR0FBR2tCLGFBQWEsQ0FBQ0MsR0FBRyxDQUFFSyxHQUFHLElBQUlBLEdBQUcsQ0FBQ0Msa0JBQWtCLENBQUNDLEtBQU0sQ0FBQztJQUN2RTNCLHVCQUF1QixDQUFFQyxNQUFNLEVBQUVpQixjQUFjLEVBQUUsSUFBSSxFQUFFZCxNQUFNLEVBQUVDLE9BQVEsQ0FBQztFQUMxRTtFQUVBVSxnQkFBZ0IsQ0FBRSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFFLEVBQUUscUNBQXNDLENBQUM7RUFDNUc7RUFDQTtBQUVGLENBQUUsQ0FBQzs7QUFFSDFCLFVBQVUsQ0FBQyxDQUFDIn0=