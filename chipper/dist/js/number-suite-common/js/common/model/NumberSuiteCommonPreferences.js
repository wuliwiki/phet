// Copyright 2022-2023, University of Colorado Boulder

/**
 * NumberSuiteCommonPreferences is the model for sim-specific preferences for all Number Suite sims, accessed via the
 * Preferences dialog. These preferences are global, and affect all screens.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
import NumberSuiteCommonQueryParameters from '../NumberSuiteCommonQueryParameters.js';
import Property from '../../../../axon/js/Property.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import localeProperty, { availableRuntimeLocales } from '../../../../joist/js/i18n/localeProperty.js';

//TODO https://github.com/phetsims/number-suite-common/issues/18 type string map, perhaps getStringModule.TStringModule?
//TODO https://github.com/phetsims/number-suite-common/issues/18 replace any
// eslint-disable-next-line @typescript-eslint/no-explicit-any
class NumberSuiteCommonPreferences {
  // preference Properties directly controlled by UI

  // whether a second locale should be shown. A toggle switch is added on screens that support two locales when true.

  // the second locale

  // whether the Ones are included on the 'Lab' Screen

  // whether the sim speaks the model value of screens that use speech synthesis when the data or voice changes

  // whether the sim is using its primary locale or a second locale on screens that support two locales

  // the voice of the primary locale

  // the voice of the secondary locale

  // helper Properties derived from preference Properties
  // the set of sim strings for the current secondLocale
  // the 'all' link of this simulation
  constructor(allUrl) {
    // if a valid second locale was provided via a query parameter, display the second locale on sim startup
    this.showSecondLocaleProperty = new BooleanProperty(!!NumberSuiteCommonQueryParameters.secondLocale);

    // if a secondLocale was provided via a query parameter, use that, otherwise default to the primaryLocale
    this.secondLocaleProperty = new Property(NumberSuiteCommonQueryParameters.secondLocale || localeProperty.value, {
      validValues: availableRuntimeLocales
    });
    this.showLabOnesProperty = new BooleanProperty(NumberSuiteCommonQueryParameters.showLabOnes);
    this.autoHearEnabledProperty = new BooleanProperty(NumberSuiteCommonQueryParameters.autoHear);
    this.isPrimaryLocaleProperty = new BooleanProperty(true);
    this.primaryVoiceProperty = new Property(null);
    this.secondVoiceProperty = new Property(null);
    this.secondLocaleStringsProperty = new DerivedProperty([this.secondLocaleProperty], secondLocale => {
      return phet.chipper.strings[secondLocale];
    });
    this.allUrl = allUrl;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
}
numberSuiteCommon.register('NumberSuiteCommonPreferences', NumberSuiteCommonPreferences);
export default NumberSuiteCommonPreferences;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,