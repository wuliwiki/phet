// Copyright 2022-2023, University of Colorado Boulder

/**
 * An Announcer for speech synthesis that can be used with an UtteranceQueue. Used in Number Suite sims on screens that
 * support speech synthesis.
 *
 * Not usable until initialized after the sim is created. See number-play-main.ts and number-compare-main.ts.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import SpeechSynthesisAnnouncer from '../../../../utterance-queue/js/SpeechSynthesisAnnouncer.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import localeProperty from '../../../../joist/js/i18n/localeProperty.js';
import Multilink from '../../../../axon/js/Multilink.js';
class NumberSuiteCommonSpeechSynthesisAnnouncer extends SpeechSynthesisAnnouncer {
  // See doc in NumberSuiteCommonPreferences

  // Whether the current voice (of primaryVoiceProperty or secondVoiceProperty) has a valid voice.

  constructor(isPrimaryLocaleProperty, secondLocaleProperty, primaryVoiceProperty, secondVoiceProperty) {
    super();
    this.secondLocaleProperty = secondLocaleProperty;

    // Update when the primaryVoice, secondVoice, or isPrimaryLocale changes.
    this.hasVoiceProperty = new DerivedProperty([isPrimaryLocaleProperty, primaryVoiceProperty, secondVoiceProperty], (isPrimaryLocale, primaryVoice, secondVoice) => isPrimaryLocale ? !!primaryVoice : !!secondVoice);

    // When the SpeechSynthesisAnnouncer becomes initialized or when the available voices change, set the provided
    // voice Properties to the first available voice for their respective locales.
    Multilink.multilink([this.isInitializedProperty, this.voicesProperty], () => {
      this.setFirstAvailableVoiceForLocale(localeProperty.value, primaryVoiceProperty);
      this.setFirstAvailableVoiceForLocale(secondLocaleProperty.value, secondVoiceProperty);
    });
  }

  /**
   * Set the provided voiceProperty to the first available voice for the provided locale.
   */
  setFirstAvailableVoiceForLocale(locale, voiceProperty) {
    // in case we don't have any voices yet, wait until the voicesProperty is populated
    if (this.initialized && this.voicesProperty.value.length > 0) {
      const translatedVoices = this.getPrioritizedVoicesForLocale(locale);
      if (translatedVoices.length > 0) {
        voiceProperty.value = translatedVoices[0];
      } else {
        voiceProperty.value = null;
      }
    }
  }
}
numberSuiteCommon.register('NumberSuiteCommonSpeechSynthesisAnnouncer', NumberSuiteCommonSpeechSynthesisAnnouncer);
export default NumberSuiteCommonSpeechSynthesisAnnouncer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIiLCJudW1iZXJTdWl0ZUNvbW1vbiIsIkRlcml2ZWRQcm9wZXJ0eSIsImxvY2FsZVByb3BlcnR5IiwiTXVsdGlsaW5rIiwiTnVtYmVyU3VpdGVDb21tb25TcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIiLCJjb25zdHJ1Y3RvciIsImlzUHJpbWFyeUxvY2FsZVByb3BlcnR5Iiwic2Vjb25kTG9jYWxlUHJvcGVydHkiLCJwcmltYXJ5Vm9pY2VQcm9wZXJ0eSIsInNlY29uZFZvaWNlUHJvcGVydHkiLCJoYXNWb2ljZVByb3BlcnR5IiwiaXNQcmltYXJ5TG9jYWxlIiwicHJpbWFyeVZvaWNlIiwic2Vjb25kVm9pY2UiLCJtdWx0aWxpbmsiLCJpc0luaXRpYWxpemVkUHJvcGVydHkiLCJ2b2ljZXNQcm9wZXJ0eSIsInNldEZpcnN0QXZhaWxhYmxlVm9pY2VGb3JMb2NhbGUiLCJ2YWx1ZSIsImxvY2FsZSIsInZvaWNlUHJvcGVydHkiLCJpbml0aWFsaXplZCIsImxlbmd0aCIsInRyYW5zbGF0ZWRWb2ljZXMiLCJnZXRQcmlvcml0aXplZFZvaWNlc0ZvckxvY2FsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVtYmVyU3VpdGVDb21tb25TcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQW4gQW5ub3VuY2VyIGZvciBzcGVlY2ggc3ludGhlc2lzIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBhbiBVdHRlcmFuY2VRdWV1ZS4gVXNlZCBpbiBOdW1iZXIgU3VpdGUgc2ltcyBvbiBzY3JlZW5zIHRoYXRcclxuICogc3VwcG9ydCBzcGVlY2ggc3ludGhlc2lzLlxyXG4gKlxyXG4gKiBOb3QgdXNhYmxlIHVudGlsIGluaXRpYWxpemVkIGFmdGVyIHRoZSBzaW0gaXMgY3JlYXRlZC4gU2VlIG51bWJlci1wbGF5LW1haW4udHMgYW5kIG51bWJlci1jb21wYXJlLW1haW4udHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNwZWVjaFN5bnRoZXNpc0Fubm91bmNlciBmcm9tICcuLi8uLi8uLi8uLi91dHRlcmFuY2UtcXVldWUvanMvU3BlZWNoU3ludGhlc2lzQW5ub3VuY2VyLmpzJztcclxuaW1wb3J0IG51bWJlclN1aXRlQ29tbW9uIGZyb20gJy4uLy4uL251bWJlclN1aXRlQ29tbW9uLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IGxvY2FsZVByb3BlcnR5LCB7IExvY2FsZSB9IGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL2kxOG4vbG9jYWxlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcblxyXG5jbGFzcyBOdW1iZXJTdWl0ZUNvbW1vblNwZWVjaFN5bnRoZXNpc0Fubm91bmNlciBleHRlbmRzIFNwZWVjaFN5bnRoZXNpc0Fubm91bmNlciB7XHJcblxyXG4gIC8vIFNlZSBkb2MgaW4gTnVtYmVyU3VpdGVDb21tb25QcmVmZXJlbmNlc1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgc2Vjb25kTG9jYWxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PExvY2FsZT47XHJcblxyXG4gIC8vIFdoZXRoZXIgdGhlIGN1cnJlbnQgdm9pY2UgKG9mIHByaW1hcnlWb2ljZVByb3BlcnR5IG9yIHNlY29uZFZvaWNlUHJvcGVydHkpIGhhcyBhIHZhbGlkIHZvaWNlLlxyXG4gIHB1YmxpYyByZWFkb25seSBoYXNWb2ljZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgaXNQcmltYXJ5TG9jYWxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgc2Vjb25kTG9jYWxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PExvY2FsZT4sXHJcbiAgICBwcmltYXJ5Vm9pY2VQcm9wZXJ0eTogVFByb3BlcnR5PFNwZWVjaFN5bnRoZXNpc1ZvaWNlIHwgbnVsbD4sXHJcbiAgICBzZWNvbmRWb2ljZVByb3BlcnR5OiBUUHJvcGVydHk8U3BlZWNoU3ludGhlc2lzVm9pY2UgfCBudWxsPlxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnNlY29uZExvY2FsZVByb3BlcnR5ID0gc2Vjb25kTG9jYWxlUHJvcGVydHk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHdoZW4gdGhlIHByaW1hcnlWb2ljZSwgc2Vjb25kVm9pY2UsIG9yIGlzUHJpbWFyeUxvY2FsZSBjaGFuZ2VzLlxyXG4gICAgdGhpcy5oYXNWb2ljZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgWyBpc1ByaW1hcnlMb2NhbGVQcm9wZXJ0eSwgcHJpbWFyeVZvaWNlUHJvcGVydHksIHNlY29uZFZvaWNlUHJvcGVydHkgXSxcclxuICAgICAgKCBpc1ByaW1hcnlMb2NhbGUsIHByaW1hcnlWb2ljZSwgc2Vjb25kVm9pY2UgKSA9PiBpc1ByaW1hcnlMb2NhbGUgPyAhIXByaW1hcnlWb2ljZSA6ICEhc2Vjb25kVm9pY2UgKTtcclxuXHJcbiAgICAvLyBXaGVuIHRoZSBTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIgYmVjb21lcyBpbml0aWFsaXplZCBvciB3aGVuIHRoZSBhdmFpbGFibGUgdm9pY2VzIGNoYW5nZSwgc2V0IHRoZSBwcm92aWRlZFxyXG4gICAgLy8gdm9pY2UgUHJvcGVydGllcyB0byB0aGUgZmlyc3QgYXZhaWxhYmxlIHZvaWNlIGZvciB0aGVpciByZXNwZWN0aXZlIGxvY2FsZXMuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICBbIHRoaXMuaXNJbml0aWFsaXplZFByb3BlcnR5LCB0aGlzLnZvaWNlc1Byb3BlcnR5IF0sICgpID0+IHtcclxuICAgICAgICB0aGlzLnNldEZpcnN0QXZhaWxhYmxlVm9pY2VGb3JMb2NhbGUoIGxvY2FsZVByb3BlcnR5LnZhbHVlLCBwcmltYXJ5Vm9pY2VQcm9wZXJ0eSApO1xyXG4gICAgICAgIHRoaXMuc2V0Rmlyc3RBdmFpbGFibGVWb2ljZUZvckxvY2FsZSggc2Vjb25kTG9jYWxlUHJvcGVydHkudmFsdWUsIHNlY29uZFZvaWNlUHJvcGVydHkgKTtcclxuICAgICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBwcm92aWRlZCB2b2ljZVByb3BlcnR5IHRvIHRoZSBmaXJzdCBhdmFpbGFibGUgdm9pY2UgZm9yIHRoZSBwcm92aWRlZCBsb2NhbGUuXHJcbiAgICovXHJcbiAgcHVibGljIHNldEZpcnN0QXZhaWxhYmxlVm9pY2VGb3JMb2NhbGUoIGxvY2FsZTogTG9jYWxlLCB2b2ljZVByb3BlcnR5OiBUUHJvcGVydHk8U3BlZWNoU3ludGhlc2lzVm9pY2UgfCBudWxsPiApOiB2b2lkIHtcclxuXHJcbiAgICAvLyBpbiBjYXNlIHdlIGRvbid0IGhhdmUgYW55IHZvaWNlcyB5ZXQsIHdhaXQgdW50aWwgdGhlIHZvaWNlc1Byb3BlcnR5IGlzIHBvcHVsYXRlZFxyXG4gICAgaWYgKCB0aGlzLmluaXRpYWxpemVkICYmIHRoaXMudm9pY2VzUHJvcGVydHkudmFsdWUubGVuZ3RoID4gMCApIHtcclxuICAgICAgY29uc3QgdHJhbnNsYXRlZFZvaWNlcyA9IHRoaXMuZ2V0UHJpb3JpdGl6ZWRWb2ljZXNGb3JMb2NhbGUoIGxvY2FsZSApO1xyXG4gICAgICBpZiAoIHRyYW5zbGF0ZWRWb2ljZXMubGVuZ3RoID4gMCApIHtcclxuICAgICAgICB2b2ljZVByb3BlcnR5LnZhbHVlID0gdHJhbnNsYXRlZFZvaWNlc1sgMCBdO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHZvaWNlUHJvcGVydHkudmFsdWUgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJTdWl0ZUNvbW1vbi5yZWdpc3RlciggJ051bWJlclN1aXRlQ29tbW9uU3BlZWNoU3ludGhlc2lzQW5ub3VuY2VyJywgTnVtYmVyU3VpdGVDb21tb25TcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgTnVtYmVyU3VpdGVDb21tb25TcGVlY2hTeW50aGVzaXNBbm5vdW5jZXI7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHdCQUF3QixNQUFNLDREQUE0RDtBQUNqRyxPQUFPQyxpQkFBaUIsTUFBTSw0QkFBNEI7QUFFMUQsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxjQUFjLE1BQWtCLDZDQUE2QztBQUNwRixPQUFPQyxTQUFTLE1BQU0sa0NBQWtDO0FBR3hELE1BQU1DLHlDQUF5QyxTQUFTTCx3QkFBd0IsQ0FBQztFQUUvRTs7RUFHQTs7RUFHT00sV0FBV0EsQ0FDaEJDLHVCQUFtRCxFQUNuREMsb0JBQStDLEVBQy9DQyxvQkFBNEQsRUFDNURDLG1CQUEyRCxFQUMzRDtJQUNBLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDRixvQkFBb0IsR0FBR0Esb0JBQW9COztJQUVoRDtJQUNBLElBQUksQ0FBQ0csZ0JBQWdCLEdBQUcsSUFBSVQsZUFBZSxDQUN6QyxDQUFFSyx1QkFBdUIsRUFBRUUsb0JBQW9CLEVBQUVDLG1CQUFtQixDQUFFLEVBQ3RFLENBQUVFLGVBQWUsRUFBRUMsWUFBWSxFQUFFQyxXQUFXLEtBQU1GLGVBQWUsR0FBRyxDQUFDLENBQUNDLFlBQVksR0FBRyxDQUFDLENBQUNDLFdBQVksQ0FBQzs7SUFFdEc7SUFDQTtJQUNBVixTQUFTLENBQUNXLFNBQVMsQ0FDakIsQ0FBRSxJQUFJLENBQUNDLHFCQUFxQixFQUFFLElBQUksQ0FBQ0MsY0FBYyxDQUFFLEVBQUUsTUFBTTtNQUN6RCxJQUFJLENBQUNDLCtCQUErQixDQUFFZixjQUFjLENBQUNnQixLQUFLLEVBQUVWLG9CQUFxQixDQUFDO01BQ2xGLElBQUksQ0FBQ1MsK0JBQStCLENBQUVWLG9CQUFvQixDQUFDVyxLQUFLLEVBQUVULG1CQUFvQixDQUFDO0lBQ3pGLENBQUUsQ0FBQztFQUNQOztFQUVBO0FBQ0Y7QUFDQTtFQUNTUSwrQkFBK0JBLENBQUVFLE1BQWMsRUFBRUMsYUFBcUQsRUFBUztJQUVwSDtJQUNBLElBQUssSUFBSSxDQUFDQyxXQUFXLElBQUksSUFBSSxDQUFDTCxjQUFjLENBQUNFLEtBQUssQ0FBQ0ksTUFBTSxHQUFHLENBQUMsRUFBRztNQUM5RCxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUNDLDZCQUE2QixDQUFFTCxNQUFPLENBQUM7TUFDckUsSUFBS0ksZ0JBQWdCLENBQUNELE1BQU0sR0FBRyxDQUFDLEVBQUc7UUFDakNGLGFBQWEsQ0FBQ0YsS0FBSyxHQUFHSyxnQkFBZ0IsQ0FBRSxDQUFDLENBQUU7TUFDN0MsQ0FBQyxNQUNJO1FBQ0hILGFBQWEsQ0FBQ0YsS0FBSyxHQUFHLElBQUk7TUFDNUI7SUFDRjtFQUNGO0FBQ0Y7QUFFQWxCLGlCQUFpQixDQUFDeUIsUUFBUSxDQUFFLDJDQUEyQyxFQUFFckIseUNBQTBDLENBQUM7QUFDcEgsZUFBZUEseUNBQXlDIn0=