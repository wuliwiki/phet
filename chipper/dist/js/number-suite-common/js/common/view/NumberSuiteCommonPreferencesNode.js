// Copyright 2022-2023, University of Colorado Boulder

/**
 * NumberSuiteCommonPreferencesNode is the user interface for sim-specific preferences for all Number suite sims,
 * accessed via the Preferences dialog. These preferences are global, and affect all screens.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import { HBox, VBox } from '../../../../scenery/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
import SecondLanguageControl from './SecondLanguageControl.js';
import ShowOnesControl from './ShowOnesControl.js';
import NumberSuiteCommonConstants from '../NumberSuiteCommonConstants.js';
import LabScreen from '../../lab/LabScreen.js';
export default class NumberSuiteCommonPreferencesNode extends HBox {
  constructor(preferences, utteranceQueue, additionalRightControls, providedOptions) {
    const options = optionize()({
      // SelfOptions
      secondLanguageControlEnabled: true,
      // HBoxOptions
      spacing: 40,
      align: 'top'
    }, providedOptions);
    const secondLanguageControl = new SecondLanguageControl(preferences, utteranceQueue, {
      visible: options.secondLanguageControlEnabled
    });
    const showOnesControl = new ShowOnesControl(preferences.showLabOnesProperty, {
      visible: NumberSuiteCommonPreferencesNode.hasScreenType(LabScreen)
    });
    const rightControls = new VBox({
      children: [...additionalRightControls, showOnesControl],
      align: 'left',
      spacing: NumberSuiteCommonConstants.PREFERENCES_VBOX_SPACING
    });
    options.children = [secondLanguageControl, rightControls];
    super(options);
  }

  /**
   * Determines whether the sim is running with a screen of the specified type.
   */
  static hasScreenType(constructor) {
    return _.find(phet.joist.sim.screens, screen => screen instanceof constructor) !== undefined;
  }
}
numberSuiteCommon.register('NumberSuiteCommonPreferencesNode', NumberSuiteCommonPreferencesNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIQm94IiwiVkJveCIsIm9wdGlvbml6ZSIsIm51bWJlclN1aXRlQ29tbW9uIiwiU2Vjb25kTGFuZ3VhZ2VDb250cm9sIiwiU2hvd09uZXNDb250cm9sIiwiTnVtYmVyU3VpdGVDb21tb25Db25zdGFudHMiLCJMYWJTY3JlZW4iLCJOdW1iZXJTdWl0ZUNvbW1vblByZWZlcmVuY2VzTm9kZSIsImNvbnN0cnVjdG9yIiwicHJlZmVyZW5jZXMiLCJ1dHRlcmFuY2VRdWV1ZSIsImFkZGl0aW9uYWxSaWdodENvbnRyb2xzIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNlY29uZExhbmd1YWdlQ29udHJvbEVuYWJsZWQiLCJzcGFjaW5nIiwiYWxpZ24iLCJzZWNvbmRMYW5ndWFnZUNvbnRyb2wiLCJ2aXNpYmxlIiwic2hvd09uZXNDb250cm9sIiwic2hvd0xhYk9uZXNQcm9wZXJ0eSIsImhhc1NjcmVlblR5cGUiLCJyaWdodENvbnRyb2xzIiwiY2hpbGRyZW4iLCJQUkVGRVJFTkNFU19WQk9YX1NQQUNJTkciLCJfIiwiZmluZCIsInBoZXQiLCJqb2lzdCIsInNpbSIsInNjcmVlbnMiLCJzY3JlZW4iLCJ1bmRlZmluZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk51bWJlclN1aXRlQ29tbW9uUHJlZmVyZW5jZXNOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE51bWJlclN1aXRlQ29tbW9uUHJlZmVyZW5jZXNOb2RlIGlzIHRoZSB1c2VyIGludGVyZmFjZSBmb3Igc2ltLXNwZWNpZmljIHByZWZlcmVuY2VzIGZvciBhbGwgTnVtYmVyIHN1aXRlIHNpbXMsXHJcbiAqIGFjY2Vzc2VkIHZpYSB0aGUgUHJlZmVyZW5jZXMgZGlhbG9nLiBUaGVzZSBwcmVmZXJlbmNlcyBhcmUgZ2xvYmFsLCBhbmQgYWZmZWN0IGFsbCBzY3JlZW5zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSEJveCwgSEJveE9wdGlvbnMsIE5vZGUsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgbnVtYmVyU3VpdGVDb21tb24gZnJvbSAnLi4vLi4vbnVtYmVyU3VpdGVDb21tb24uanMnO1xyXG5pbXBvcnQgTnVtYmVyU3VpdGVDb21tb25QcmVmZXJlbmNlcyBmcm9tICcuLi9tb2RlbC9OdW1iZXJTdWl0ZUNvbW1vblByZWZlcmVuY2VzLmpzJztcclxuaW1wb3J0IHsgQW55U2NyZWVuIH0gZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IFNlY29uZExhbmd1YWdlQ29udHJvbCBmcm9tICcuL1NlY29uZExhbmd1YWdlQ29udHJvbC5qcyc7XHJcbmltcG9ydCBTaG93T25lc0NvbnRyb2wgZnJvbSAnLi9TaG93T25lc0NvbnRyb2wuanMnO1xyXG5pbXBvcnQgTnVtYmVyU3VpdGVDb21tb25Db25zdGFudHMgZnJvbSAnLi4vTnVtYmVyU3VpdGVDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgTGFiU2NyZWVuIGZyb20gJy4uLy4uL2xhYi9MYWJTY3JlZW4uanMnO1xyXG5pbXBvcnQgTnVtYmVyU3VpdGVDb21tb25VdHRlcmFuY2VRdWV1ZSBmcm9tICcuL051bWJlclN1aXRlQ29tbW9uVXR0ZXJhbmNlUXVldWUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBzZWNvbmRMYW5ndWFnZUNvbnRyb2xFbmFibGVkPzogYm9vbGVhbjsgLy8gc2hvdWxkIHRoZSAnU2Vjb25kIExhbmd1YWdlJyBjb250cm9sIGJlIGVuYWJsZWQ/XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBOdW1iZXJTdWl0ZUNvbW1vblByZWZlcmVuY2VzTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8SEJveE9wdGlvbnMsICdjaGlsZHJlbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtYmVyU3VpdGVDb21tb25QcmVmZXJlbmNlc05vZGUgZXh0ZW5kcyBIQm94IHtcclxuXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCBwcmVmZXJlbmNlczogTnVtYmVyU3VpdGVDb21tb25QcmVmZXJlbmNlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHV0dGVyYW5jZVF1ZXVlOiBOdW1iZXJTdWl0ZUNvbW1vblV0dGVyYW5jZVF1ZXVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFJpZ2h0Q29udHJvbHM6IE5vZGVbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IE51bWJlclN1aXRlQ29tbW9uUHJlZmVyZW5jZXNOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE51bWJlclN1aXRlQ29tbW9uUHJlZmVyZW5jZXNOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIEhCb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBzZWNvbmRMYW5ndWFnZUNvbnRyb2xFbmFibGVkOiB0cnVlLFxyXG5cclxuICAgICAgLy8gSEJveE9wdGlvbnNcclxuICAgICAgc3BhY2luZzogNDAsXHJcbiAgICAgIGFsaWduOiAndG9wJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3Qgc2Vjb25kTGFuZ3VhZ2VDb250cm9sID0gbmV3IFNlY29uZExhbmd1YWdlQ29udHJvbCggcHJlZmVyZW5jZXMsIHV0dGVyYW5jZVF1ZXVlLCB7XHJcbiAgICAgIHZpc2libGU6IG9wdGlvbnMuc2Vjb25kTGFuZ3VhZ2VDb250cm9sRW5hYmxlZFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHNob3dPbmVzQ29udHJvbCA9IG5ldyBTaG93T25lc0NvbnRyb2woIHByZWZlcmVuY2VzLnNob3dMYWJPbmVzUHJvcGVydHksIHtcclxuICAgICAgdmlzaWJsZTogTnVtYmVyU3VpdGVDb21tb25QcmVmZXJlbmNlc05vZGUuaGFzU2NyZWVuVHlwZSggTGFiU2NyZWVuIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCByaWdodENvbnRyb2xzID0gbmV3IFZCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFsgLi4uYWRkaXRpb25hbFJpZ2h0Q29udHJvbHMsIHNob3dPbmVzQ29udHJvbCBdLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiBOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cy5QUkVGRVJFTkNFU19WQk9YX1NQQUNJTkdcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBzZWNvbmRMYW5ndWFnZUNvbnRyb2wsIHJpZ2h0Q29udHJvbHMgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzaW0gaXMgcnVubmluZyB3aXRoIGEgc2NyZWVuIG9mIHRoZSBzcGVjaWZpZWQgdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGhhc1NjcmVlblR5cGUoIGNvbnN0cnVjdG9yOiBuZXcgKCAuLi5hcmdzOiBJbnRlbnRpb25hbEFueVtdICkgPT4gQW55U2NyZWVuICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICggXy5maW5kKCBwaGV0LmpvaXN0LnNpbS5zY3JlZW5zLCBzY3JlZW4gPT4gc2NyZWVuIGluc3RhbmNlb2YgY29uc3RydWN0b3IgKSAhPT0gdW5kZWZpbmVkICk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJTdWl0ZUNvbW1vbi5yZWdpc3RlciggJ051bWJlclN1aXRlQ29tbW9uUHJlZmVyZW5jZXNOb2RlJywgTnVtYmVyU3VpdGVDb21tb25QcmVmZXJlbmNlc05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLEVBQXFCQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ2pGLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsaUJBQWlCLE1BQU0sNEJBQTRCO0FBSzFELE9BQU9DLHFCQUFxQixNQUFNLDRCQUE0QjtBQUM5RCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLDBCQUEwQixNQUFNLGtDQUFrQztBQUN6RSxPQUFPQyxTQUFTLE1BQU0sd0JBQXdCO0FBUzlDLGVBQWUsTUFBTUMsZ0NBQWdDLFNBQVNSLElBQUksQ0FBQztFQUV2RFMsV0FBV0EsQ0FBRUMsV0FBeUMsRUFDekNDLGNBQStDLEVBQy9DQyx1QkFBK0IsRUFDL0JDLGVBQXlELEVBQUc7SUFFakYsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQW9FLENBQUMsQ0FBRTtNQUU5RjtNQUNBYSw0QkFBNEIsRUFBRSxJQUFJO01BRWxDO01BQ0FDLE9BQU8sRUFBRSxFQUFFO01BQ1hDLEtBQUssRUFBRTtJQUNULENBQUMsRUFBRUosZUFBZ0IsQ0FBQztJQUVwQixNQUFNSyxxQkFBcUIsR0FBRyxJQUFJZCxxQkFBcUIsQ0FBRU0sV0FBVyxFQUFFQyxjQUFjLEVBQUU7TUFDcEZRLE9BQU8sRUFBRUwsT0FBTyxDQUFDQztJQUNuQixDQUFFLENBQUM7SUFFSCxNQUFNSyxlQUFlLEdBQUcsSUFBSWYsZUFBZSxDQUFFSyxXQUFXLENBQUNXLG1CQUFtQixFQUFFO01BQzVFRixPQUFPLEVBQUVYLGdDQUFnQyxDQUFDYyxhQUFhLENBQUVmLFNBQVU7SUFDckUsQ0FBRSxDQUFDO0lBRUgsTUFBTWdCLGFBQWEsR0FBRyxJQUFJdEIsSUFBSSxDQUFFO01BQzlCdUIsUUFBUSxFQUFFLENBQUUsR0FBR1osdUJBQXVCLEVBQUVRLGVBQWUsQ0FBRTtNQUN6REgsS0FBSyxFQUFFLE1BQU07TUFDYkQsT0FBTyxFQUFFViwwQkFBMEIsQ0FBQ21CO0lBQ3RDLENBQUUsQ0FBQztJQUVIWCxPQUFPLENBQUNVLFFBQVEsR0FBRyxDQUFFTixxQkFBcUIsRUFBRUssYUFBYSxDQUFFO0lBRTNELEtBQUssQ0FBRVQsT0FBUSxDQUFDO0VBQ2xCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE9BQWNRLGFBQWFBLENBQUViLFdBQTJELEVBQVk7SUFDbEcsT0FBU2lCLENBQUMsQ0FBQ0MsSUFBSSxDQUFFQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsR0FBRyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sSUFBSUEsTUFBTSxZQUFZdkIsV0FBWSxDQUFDLEtBQUt3QixTQUFTO0VBQ2xHO0FBQ0Y7QUFFQTlCLGlCQUFpQixDQUFDK0IsUUFBUSxDQUFFLGtDQUFrQyxFQUFFMUIsZ0NBQWlDLENBQUMifQ==