// Copyright 2019-2023, University of Colorado Boulder

/**
 * Class for the 'Total' accordion box, which is the panel in the top center of the sim that displays a numerical
 * representation of the current number.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import NumberDisplay from '../../../../scenery-phet/js/NumberDisplay.js';
import { HBox, VBox } from '../../../../scenery/js/imports.js';
import ArrowButton from '../../../../sun/js/buttons/ArrowButton.js';
import NumberSuiteCommonStrings from '../../NumberSuiteCommonStrings.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
import NumberSuiteCommonConstants from '../NumberSuiteCommonConstants.js';
import Range from '../../../../dot/js/Range.js';
import NumberSuiteCommonAccordionBox from './NumberSuiteCommonAccordionBox.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Property from '../../../../axon/js/Property.js';
import CountingCommonConstants from '../../../../counting-common/js/common/CountingCommonConstants.js';

// types

const MAX_SUM = CountingCommonConstants.MAX_IMAGES_PER_COUNTING_OBJECT;
class TotalAccordionBox extends NumberSuiteCommonAccordionBox {
  constructor(countingArea, height, providedOptions) {
    const options = optionize()({
      titleStringProperty: NumberSuiteCommonStrings.totalStringProperty,
      titleTextOptions: {
        maxWidth: 142
      }
    }, providedOptions);
    super(NumberSuiteCommonConstants.TOTAL_ACCORDION_BOX_WIDTH, new Property(height), options);

    // create the NumberDisplay, which is a numerical representation of the current number. always format for numbers
    // up to twenty so the display looks consistent across screens.
    const numberDisplay = new NumberDisplay(countingArea.sumProperty, new Range(0, MAX_SUM), {
      decimalPlaces: 0,
      align: 'right',
      noValueAlign: 'left',
      textOptions: {
        font: options.font
      },
      backgroundFill: null,
      backgroundStroke: null
    });

    // create the arrow buttons, which add or remove countingObjects
    const upArrowButton = new ArrowButton('up', () => {
      countingArea.createCountingObjectFromCreatorNode();
    }, options.arrowButtonOptions);
    const downArrowButton = new ArrowButton('down', () => {
      countingArea.returnCountingObjectToCreatorNode();
    }, options.arrowButtonOptions);
    const arrowButtons = new VBox({
      children: [upArrowButton, downArrowButton],
      spacing: options.arrowButtonSpacing
    });

    // disable the arrow buttons when the currentNumberProperty value is at its min or max range
    const currentNumberPropertyObserver = currentNumber => {
      assert && assert(countingArea.sumProperty.range, 'Range is required for sumProperty in countingAreas');
      upArrowButton.enabled = currentNumber !== countingArea.sumProperty.range.max;
      downArrowButton.enabled = currentNumber !== countingArea.sumProperty.range.min;
    };
    countingArea.sumProperty.link(currentNumberPropertyObserver);

    // arrange and add the number display and arrow buttons
    const numberControl = new HBox({
      children: [numberDisplay, arrowButtons]
    });
    numberControl.center = this.contentBoundsProperty.value.center;
    this.contentNode.addChild(numberControl);
  }
}
numberSuiteCommon.register('TotalAccordionBox', TotalAccordionBox);
export default TotalAccordionBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,