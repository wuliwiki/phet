// Copyright 2021-2023, University of Colorado Boulder

/**
 * Panel that contains a stack of  paper ones or objects, which can be clicked or dragged to create draggable
 * paper ones or objects. It also contains spinner buttons that can send a paper one or object out of the panel, or
 * request them to be brought back into the panel.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import CountingCreatorNode from '../../../../counting-common/js/common/view/CountingCreatorNode.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { HBox, Rectangle, VBox } from '../../../../scenery/js/imports.js';
import ArrowButton from '../../../../sun/js/buttons/ArrowButton.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
import CountingCommonConstants from '../../../../counting-common/js/common/CountingCommonConstants.js';
import NumberSuiteCommonConstants from '../NumberSuiteCommonConstants.js';
import optionize from '../../../../phet-core/js/optionize.js';
import NumberSuiteCommonPanel from './NumberSuiteCommonPanel.js';
class CountingObjectCreatorPanel extends NumberSuiteCommonPanel {
  constructor(countingArea, countingAreaNode, providedOptions) {
    const options = optionize()({
      arrowButtonsVisible: true
    }, providedOptions);

    // create the arrow buttons, which change the value of currentNumberProperty by -1 or +1
    const arrowButtonOptions = {
      arrowWidth: 14,
      arrowHeight: 14,
      visible: options.arrowButtonsVisible
    };
    const upArrowButton = new ArrowButton('up', () => {
      countingArea.createCountingObjectFromCreatorNode();
    }, optionize()({
      touchAreaYShift: -3
    }, arrowButtonOptions));
    const downArrowButton = new ArrowButton('down', () => {
      countingArea.returnCountingObjectToCreatorNode();
    }, optionize()({
      touchAreaYShift: 3
    }, arrowButtonOptions));
    const arrowButtons = new VBox({
      children: [upArrowButton, downArrowButton],
      spacing: 7
    });
    const creatorNodeBackground = new Rectangle(0, 0, CountingCommonConstants.COUNTING_OBJECT_SIZE.width * NumberSuiteCommonConstants.UNGROUPED_STORED_COUNTING_OBJECT_SCALE + 8, NumberSuiteCommonConstants.CREATOR_ICON_HEIGHT);
    const countingCreatorNode = new CountingCreatorNode(0, countingAreaNode, countingArea.sumProperty, countingArea.resetEmitter, countingAreaNode.addAndDragCountingObject.bind(countingAreaNode), {
      countingObjectTypeProperty: countingAreaNode.countingObjectTypeProperty,
      groupingEnabledProperty: countingAreaNode.countingArea.groupingEnabledProperty,
      backTargetOffset: new Vector2(-5, -5),
      ungroupedTargetScale: NumberSuiteCommonConstants.UNGROUPED_STORED_COUNTING_OBJECT_SCALE,
      groupedTargetScale: NumberSuiteCommonConstants.GROUPED_STORED_COUNTING_OBJECT_SCALE,
      pointerAreaXDilation: 6.5,
      pointerAreaYDilation: 5,
      pointerAreaXShift: 3,
      center: creatorNodeBackground.selfBounds.center
    });
    creatorNodeBackground.addChild(countingCreatorNode);
    const hBox = new HBox({
      children: [arrowButtons, creatorNodeBackground],
      spacing: 11,
      align: 'center'
    });
    super(hBox, options);
    this.countingCreatorNode = countingCreatorNode;

    // disable the arrow buttons when the currentNumberProperty value is at its min or max range
    const currentNumberPropertyObserver = currentNumber => {
      upArrowButton.enabled = currentNumber !== countingArea.sumProperty.range.max;
      downArrowButton.enabled = currentNumber !== countingArea.sumProperty.range.min;
    };
    countingArea.sumProperty.link(currentNumberPropertyObserver);
  }
}
numberSuiteCommon.register('CountingObjectCreatorPanel', CountingObjectCreatorPanel);
export default CountingObjectCreatorPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb3VudGluZ0NyZWF0b3JOb2RlIiwiVmVjdG9yMiIsIkhCb3giLCJSZWN0YW5nbGUiLCJWQm94IiwiQXJyb3dCdXR0b24iLCJudW1iZXJTdWl0ZUNvbW1vbiIsIkNvdW50aW5nQ29tbW9uQ29uc3RhbnRzIiwiTnVtYmVyU3VpdGVDb21tb25Db25zdGFudHMiLCJvcHRpb25pemUiLCJOdW1iZXJTdWl0ZUNvbW1vblBhbmVsIiwiQ291bnRpbmdPYmplY3RDcmVhdG9yUGFuZWwiLCJjb25zdHJ1Y3RvciIsImNvdW50aW5nQXJlYSIsImNvdW50aW5nQXJlYU5vZGUiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYXJyb3dCdXR0b25zVmlzaWJsZSIsImFycm93QnV0dG9uT3B0aW9ucyIsImFycm93V2lkdGgiLCJhcnJvd0hlaWdodCIsInZpc2libGUiLCJ1cEFycm93QnV0dG9uIiwiY3JlYXRlQ291bnRpbmdPYmplY3RGcm9tQ3JlYXRvck5vZGUiLCJ0b3VjaEFyZWFZU2hpZnQiLCJkb3duQXJyb3dCdXR0b24iLCJyZXR1cm5Db3VudGluZ09iamVjdFRvQ3JlYXRvck5vZGUiLCJhcnJvd0J1dHRvbnMiLCJjaGlsZHJlbiIsInNwYWNpbmciLCJjcmVhdG9yTm9kZUJhY2tncm91bmQiLCJDT1VOVElOR19PQkpFQ1RfU0laRSIsIndpZHRoIiwiVU5HUk9VUEVEX1NUT1JFRF9DT1VOVElOR19PQkpFQ1RfU0NBTEUiLCJDUkVBVE9SX0lDT05fSEVJR0hUIiwiY291bnRpbmdDcmVhdG9yTm9kZSIsInN1bVByb3BlcnR5IiwicmVzZXRFbWl0dGVyIiwiYWRkQW5kRHJhZ0NvdW50aW5nT2JqZWN0IiwiYmluZCIsImNvdW50aW5nT2JqZWN0VHlwZVByb3BlcnR5IiwiZ3JvdXBpbmdFbmFibGVkUHJvcGVydHkiLCJiYWNrVGFyZ2V0T2Zmc2V0IiwidW5ncm91cGVkVGFyZ2V0U2NhbGUiLCJncm91cGVkVGFyZ2V0U2NhbGUiLCJHUk9VUEVEX1NUT1JFRF9DT1VOVElOR19PQkpFQ1RfU0NBTEUiLCJwb2ludGVyQXJlYVhEaWxhdGlvbiIsInBvaW50ZXJBcmVhWURpbGF0aW9uIiwicG9pbnRlckFyZWFYU2hpZnQiLCJjZW50ZXIiLCJzZWxmQm91bmRzIiwiYWRkQ2hpbGQiLCJoQm94IiwiYWxpZ24iLCJjdXJyZW50TnVtYmVyUHJvcGVydHlPYnNlcnZlciIsImN1cnJlbnROdW1iZXIiLCJlbmFibGVkIiwicmFuZ2UiLCJtYXgiLCJtaW4iLCJsaW5rIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb3VudGluZ09iamVjdENyZWF0b3JQYW5lbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQYW5lbCB0aGF0IGNvbnRhaW5zIGEgc3RhY2sgb2YgIHBhcGVyIG9uZXMgb3Igb2JqZWN0cywgd2hpY2ggY2FuIGJlIGNsaWNrZWQgb3IgZHJhZ2dlZCB0byBjcmVhdGUgZHJhZ2dhYmxlXHJcbiAqIHBhcGVyIG9uZXMgb3Igb2JqZWN0cy4gSXQgYWxzbyBjb250YWlucyBzcGlubmVyIGJ1dHRvbnMgdGhhdCBjYW4gc2VuZCBhIHBhcGVyIG9uZSBvciBvYmplY3Qgb3V0IG9mIHRoZSBwYW5lbCwgb3JcclxuICogcmVxdWVzdCB0aGVtIHRvIGJlIGJyb3VnaHQgYmFjayBpbnRvIHRoZSBwYW5lbC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBDb3VudGluZ0NyZWF0b3JOb2RlIGZyb20gJy4uLy4uLy4uLy4uL2NvdW50aW5nLWNvbW1vbi9qcy9jb21tb24vdmlldy9Db3VudGluZ0NyZWF0b3JOb2RlLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBSZWN0YW5nbGUsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQXJyb3dCdXR0b24sIHsgQXJyb3dCdXR0b25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvQXJyb3dCdXR0b24uanMnO1xyXG5pbXBvcnQgbnVtYmVyU3VpdGVDb21tb24gZnJvbSAnLi4vLi4vbnVtYmVyU3VpdGVDb21tb24uanMnO1xyXG5pbXBvcnQgQ291bnRpbmdBcmVhIGZyb20gJy4uL21vZGVsL0NvdW50aW5nQXJlYS5qcyc7XHJcbmltcG9ydCBDb3VudGluZ0FyZWFOb2RlIGZyb20gJy4vQ291bnRpbmdBcmVhTm9kZS5qcyc7XHJcbmltcG9ydCBDb3VudGluZ0NvbW1vbkNvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9jb3VudGluZy1jb21tb24vanMvY29tbW9uL0NvdW50aW5nQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IE51bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzIGZyb20gJy4uL051bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBOdW1iZXJTdWl0ZUNvbW1vblBhbmVsLCB7IE51bWJlclN1aXRlQ29tbW9uUGFuZWxPcHRpb25zIH0gZnJvbSAnLi9OdW1iZXJTdWl0ZUNvbW1vblBhbmVsLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgYXJyb3dCdXR0b25zVmlzaWJsZT86IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBDb3VudGluZ09iamVjdENyZWF0b3JQYW5lbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE51bWJlclN1aXRlQ29tbW9uUGFuZWxPcHRpb25zO1xyXG5cclxuY2xhc3MgQ291bnRpbmdPYmplY3RDcmVhdG9yUGFuZWwgZXh0ZW5kcyBOdW1iZXJTdWl0ZUNvbW1vblBhbmVsIHtcclxuICBwdWJsaWMgY291bnRpbmdDcmVhdG9yTm9kZTogQ291bnRpbmdDcmVhdG9yTm9kZTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjb3VudGluZ0FyZWE6IENvdW50aW5nQXJlYSxcclxuICAgICAgICAgICAgICAgICAgICAgIGNvdW50aW5nQXJlYU5vZGU6IENvdW50aW5nQXJlYU5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBDb3VudGluZ09iamVjdENyZWF0b3JQYW5lbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxDb3VudGluZ09iamVjdENyZWF0b3JQYW5lbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBOdW1iZXJTdWl0ZUNvbW1vblBhbmVsT3B0aW9ucz4oKSgge1xyXG4gICAgICBhcnJvd0J1dHRvbnNWaXNpYmxlOiB0cnVlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgdGhlIGFycm93IGJ1dHRvbnMsIHdoaWNoIGNoYW5nZSB0aGUgdmFsdWUgb2YgY3VycmVudE51bWJlclByb3BlcnR5IGJ5IC0xIG9yICsxXHJcbiAgICBjb25zdCBhcnJvd0J1dHRvbk9wdGlvbnMgPSB7XHJcbiAgICAgIGFycm93V2lkdGg6IDE0LFxyXG4gICAgICBhcnJvd0hlaWdodDogMTQsXHJcbiAgICAgIHZpc2libGU6IG9wdGlvbnMuYXJyb3dCdXR0b25zVmlzaWJsZVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVwQXJyb3dCdXR0b24gPSBuZXcgQXJyb3dCdXR0b24oICd1cCcsICgpID0+IHtcclxuICAgICAgY291bnRpbmdBcmVhLmNyZWF0ZUNvdW50aW5nT2JqZWN0RnJvbUNyZWF0b3JOb2RlKCk7XHJcbiAgICB9LCBvcHRpb25pemU8QXJyb3dCdXR0b25PcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zPigpKCB7IHRvdWNoQXJlYVlTaGlmdDogLTMgfSwgYXJyb3dCdXR0b25PcHRpb25zICkgKTtcclxuICAgIGNvbnN0IGRvd25BcnJvd0J1dHRvbiA9IG5ldyBBcnJvd0J1dHRvbiggJ2Rvd24nLCAoKSA9PiB7XHJcbiAgICAgIGNvdW50aW5nQXJlYS5yZXR1cm5Db3VudGluZ09iamVjdFRvQ3JlYXRvck5vZGUoKTtcclxuICAgIH0sIG9wdGlvbml6ZTxBcnJvd0J1dHRvbk9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnM+KCkoIHsgdG91Y2hBcmVhWVNoaWZ0OiAzIH0sIGFycm93QnV0dG9uT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCBhcnJvd0J1dHRvbnMgPSBuZXcgVkJveCgge1xyXG4gICAgICBjaGlsZHJlbjogWyB1cEFycm93QnV0dG9uLCBkb3duQXJyb3dCdXR0b24gXSxcclxuICAgICAgc3BhY2luZzogN1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNyZWF0b3JOb2RlQmFja2dyb3VuZCA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsXHJcbiAgICAgIENvdW50aW5nQ29tbW9uQ29uc3RhbnRzLkNPVU5USU5HX09CSkVDVF9TSVpFLndpZHRoICogTnVtYmVyU3VpdGVDb21tb25Db25zdGFudHMuVU5HUk9VUEVEX1NUT1JFRF9DT1VOVElOR19PQkpFQ1RfU0NBTEUgKyA4LFxyXG4gICAgICBOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cy5DUkVBVE9SX0lDT05fSEVJR0hUXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGNvdW50aW5nQ3JlYXRvck5vZGUgPSBuZXcgQ291bnRpbmdDcmVhdG9yTm9kZSggMCwgY291bnRpbmdBcmVhTm9kZSwgY291bnRpbmdBcmVhLnN1bVByb3BlcnR5LFxyXG4gICAgICBjb3VudGluZ0FyZWEucmVzZXRFbWl0dGVyLCBjb3VudGluZ0FyZWFOb2RlLmFkZEFuZERyYWdDb3VudGluZ09iamVjdC5iaW5kKCBjb3VudGluZ0FyZWFOb2RlICksIHtcclxuICAgICAgICBjb3VudGluZ09iamVjdFR5cGVQcm9wZXJ0eTogY291bnRpbmdBcmVhTm9kZS5jb3VudGluZ09iamVjdFR5cGVQcm9wZXJ0eSxcclxuICAgICAgICBncm91cGluZ0VuYWJsZWRQcm9wZXJ0eTogY291bnRpbmdBcmVhTm9kZS5jb3VudGluZ0FyZWEuZ3JvdXBpbmdFbmFibGVkUHJvcGVydHksXHJcbiAgICAgICAgYmFja1RhcmdldE9mZnNldDogbmV3IFZlY3RvcjIoIC01LCAtNSApLFxyXG4gICAgICAgIHVuZ3JvdXBlZFRhcmdldFNjYWxlOiBOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cy5VTkdST1VQRURfU1RPUkVEX0NPVU5USU5HX09CSkVDVF9TQ0FMRSxcclxuICAgICAgICBncm91cGVkVGFyZ2V0U2NhbGU6IE51bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzLkdST1VQRURfU1RPUkVEX0NPVU5USU5HX09CSkVDVF9TQ0FMRSxcclxuICAgICAgICBwb2ludGVyQXJlYVhEaWxhdGlvbjogNi41LFxyXG4gICAgICAgIHBvaW50ZXJBcmVhWURpbGF0aW9uOiA1LFxyXG4gICAgICAgIHBvaW50ZXJBcmVhWFNoaWZ0OiAzLFxyXG4gICAgICAgIGNlbnRlcjogY3JlYXRvck5vZGVCYWNrZ3JvdW5kLnNlbGZCb3VuZHMuY2VudGVyXHJcbiAgICAgIH0gKTtcclxuICAgIGNyZWF0b3JOb2RlQmFja2dyb3VuZC5hZGRDaGlsZCggY291bnRpbmdDcmVhdG9yTm9kZSApO1xyXG5cclxuICAgIGNvbnN0IGhCb3ggPSBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogWyBhcnJvd0J1dHRvbnMsIGNyZWF0b3JOb2RlQmFja2dyb3VuZCBdLFxyXG4gICAgICBzcGFjaW5nOiAxMSxcclxuICAgICAgYWxpZ246ICdjZW50ZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGhCb3gsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmNvdW50aW5nQ3JlYXRvck5vZGUgPSBjb3VudGluZ0NyZWF0b3JOb2RlO1xyXG5cclxuICAgIC8vIGRpc2FibGUgdGhlIGFycm93IGJ1dHRvbnMgd2hlbiB0aGUgY3VycmVudE51bWJlclByb3BlcnR5IHZhbHVlIGlzIGF0IGl0cyBtaW4gb3IgbWF4IHJhbmdlXHJcbiAgICBjb25zdCBjdXJyZW50TnVtYmVyUHJvcGVydHlPYnNlcnZlciA9ICggY3VycmVudE51bWJlcjogbnVtYmVyICkgPT4ge1xyXG4gICAgICB1cEFycm93QnV0dG9uLmVuYWJsZWQgPSBjdXJyZW50TnVtYmVyICE9PSBjb3VudGluZ0FyZWEuc3VtUHJvcGVydHkucmFuZ2UubWF4O1xyXG4gICAgICBkb3duQXJyb3dCdXR0b24uZW5hYmxlZCA9IGN1cnJlbnROdW1iZXIgIT09IGNvdW50aW5nQXJlYS5zdW1Qcm9wZXJ0eS5yYW5nZS5taW47XHJcbiAgICB9O1xyXG4gICAgY291bnRpbmdBcmVhLnN1bVByb3BlcnR5LmxpbmsoIGN1cnJlbnROdW1iZXJQcm9wZXJ0eU9ic2VydmVyICk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJTdWl0ZUNvbW1vbi5yZWdpc3RlciggJ0NvdW50aW5nT2JqZWN0Q3JlYXRvclBhbmVsJywgQ291bnRpbmdPYmplY3RDcmVhdG9yUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ291bnRpbmdPYmplY3RDcmVhdG9yUGFuZWw7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsbUJBQW1CLE1BQU0sbUVBQW1FO0FBQ25HLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDekUsT0FBT0MsV0FBVyxNQUE4QiwyQ0FBMkM7QUFDM0YsT0FBT0MsaUJBQWlCLE1BQU0sNEJBQTRCO0FBRzFELE9BQU9DLHVCQUF1QixNQUFNLGtFQUFrRTtBQUN0RyxPQUFPQywwQkFBMEIsTUFBTSxrQ0FBa0M7QUFDekUs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