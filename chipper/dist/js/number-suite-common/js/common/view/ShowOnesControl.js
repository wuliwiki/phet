// Copyright 2023, University of Colorado Boulder

/**
 * ShowOnesControlOptions is the 'Show Ones' control in the Preferences dialog.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Text } from '../../../../scenery/js/imports.js';
import PreferencesControl from '../../../../joist/js/preferences/PreferencesControl.js';
import PreferencesDialogConstants from '../../../../joist/js/preferences/PreferencesDialogConstants.js';
import optionize from '../../../../phet-core/js/optionize.js';
import NumberSuiteCommonStrings from '../../NumberSuiteCommonStrings.js';
import ToggleSwitch from '../../../../sun/js/ToggleSwitch.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
import NumberSuiteCommonConstants from '../NumberSuiteCommonConstants.js';
export default class ShowOnesControl extends PreferencesControl {
  constructor(showOnesProperty, providedOptions) {
    const labelText = new Text(NumberSuiteCommonStrings.showOnesStringProperty, PreferencesDialogConstants.CONTROL_LABEL_OPTIONS);
    const descriptionText = new Text(NumberSuiteCommonStrings.showOnesDescriptionStringProperty, PreferencesDialogConstants.CONTROL_DESCRIPTION_OPTIONS);
    const toggleSwitch = new ToggleSwitch(showOnesProperty, false, true, PreferencesDialogConstants.TOGGLE_SWITCH_OPTIONS);
    super(optionize()({
      // PreferencesControlOptions
      labelNode: labelText,
      descriptionNode: descriptionText,
      controlNode: toggleSwitch,
      ySpacing: NumberSuiteCommonConstants.PREFERENCES_DESCRIPTION_Y_SPACING
    }, providedOptions));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
numberSuiteCommon.register('ShowOnesControl', ShowOnesControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiUHJlZmVyZW5jZXNDb250cm9sIiwiUHJlZmVyZW5jZXNEaWFsb2dDb25zdGFudHMiLCJvcHRpb25pemUiLCJOdW1iZXJTdWl0ZUNvbW1vblN0cmluZ3MiLCJUb2dnbGVTd2l0Y2giLCJudW1iZXJTdWl0ZUNvbW1vbiIsIk51bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzIiwiU2hvd09uZXNDb250cm9sIiwiY29uc3RydWN0b3IiLCJzaG93T25lc1Byb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwibGFiZWxUZXh0Iiwic2hvd09uZXNTdHJpbmdQcm9wZXJ0eSIsIkNPTlRST0xfTEFCRUxfT1BUSU9OUyIsImRlc2NyaXB0aW9uVGV4dCIsInNob3dPbmVzRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSIsIkNPTlRST0xfREVTQ1JJUFRJT05fT1BUSU9OUyIsInRvZ2dsZVN3aXRjaCIsIlRPR0dMRV9TV0lUQ0hfT1BUSU9OUyIsImxhYmVsTm9kZSIsImRlc2NyaXB0aW9uTm9kZSIsImNvbnRyb2xOb2RlIiwieVNwYWNpbmciLCJQUkVGRVJFTkNFU19ERVNDUklQVElPTl9ZX1NQQUNJTkciLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTaG93T25lc0NvbnRyb2wudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNob3dPbmVzQ29udHJvbE9wdGlvbnMgaXMgdGhlICdTaG93IE9uZXMnIGNvbnRyb2wgaW4gdGhlIFByZWZlcmVuY2VzIGRpYWxvZy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc0NvbnRyb2wsIHsgUHJlZmVyZW5jZXNDb250cm9sT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzQ29udHJvbC5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc0RpYWxvZ0NvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9qb2lzdC9qcy9wcmVmZXJlbmNlcy9QcmVmZXJlbmNlc0RpYWxvZ0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgTnVtYmVyU3VpdGVDb21tb25TdHJpbmdzIGZyb20gJy4uLy4uL051bWJlclN1aXRlQ29tbW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBUb2dnbGVTd2l0Y2ggZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1RvZ2dsZVN3aXRjaC5qcyc7XHJcbmltcG9ydCBudW1iZXJTdWl0ZUNvbW1vbiBmcm9tICcuLi8uLi9udW1iZXJTdWl0ZUNvbW1vbi5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IE51bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzIGZyb20gJy4uL051bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBTaG93T25lc0NvbnRyb2xPcHRpb25zID0gU2VsZk9wdGlvbnMgJlxyXG4gIFN0cmljdE9taXQ8UHJlZmVyZW5jZXNDb250cm9sT3B0aW9ucywgJ2xhYmVsTm9kZScgfCAnZGVzY3JpcHRpb25Ob2RlJyB8ICdjb250cm9sTm9kZSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hvd09uZXNDb250cm9sIGV4dGVuZHMgUHJlZmVyZW5jZXNDb250cm9sIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzaG93T25lc1Byb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgcHJvdmlkZWRPcHRpb25zPzogU2hvd09uZXNDb250cm9sT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBsYWJlbFRleHQgPSBuZXcgVGV4dCggTnVtYmVyU3VpdGVDb21tb25TdHJpbmdzLnNob3dPbmVzU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIFByZWZlcmVuY2VzRGlhbG9nQ29uc3RhbnRzLkNPTlRST0xfTEFCRUxfT1BUSU9OUyApO1xyXG5cclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uVGV4dCA9IG5ldyBUZXh0KCBOdW1iZXJTdWl0ZUNvbW1vblN0cmluZ3Muc2hvd09uZXNEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBQcmVmZXJlbmNlc0RpYWxvZ0NvbnN0YW50cy5DT05UUk9MX0RFU0NSSVBUSU9OX09QVElPTlMgKTtcclxuXHJcbiAgICBjb25zdCB0b2dnbGVTd2l0Y2ggPSBuZXcgVG9nZ2xlU3dpdGNoKCBzaG93T25lc1Byb3BlcnR5LCBmYWxzZSwgdHJ1ZSxcclxuICAgICAgUHJlZmVyZW5jZXNEaWFsb2dDb25zdGFudHMuVE9HR0xFX1NXSVRDSF9PUFRJT05TICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbml6ZTxTaG93T25lc0NvbnRyb2xPcHRpb25zLCBTZWxmT3B0aW9ucywgUHJlZmVyZW5jZXNDb250cm9sT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUHJlZmVyZW5jZXNDb250cm9sT3B0aW9uc1xyXG4gICAgICBsYWJlbE5vZGU6IGxhYmVsVGV4dCxcclxuICAgICAgZGVzY3JpcHRpb25Ob2RlOiBkZXNjcmlwdGlvblRleHQsXHJcbiAgICAgIGNvbnRyb2xOb2RlOiB0b2dnbGVTd2l0Y2gsXHJcbiAgICAgIHlTcGFjaW5nOiBOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cy5QUkVGRVJFTkNFU19ERVNDUklQVElPTl9ZX1NQQUNJTkdcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubnVtYmVyU3VpdGVDb21tb24ucmVnaXN0ZXIoICdTaG93T25lc0NvbnRyb2wnLCBTaG93T25lc0NvbnRyb2wgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLFFBQVEsbUNBQW1DO0FBRXhELE9BQU9DLGtCQUFrQixNQUFxQyx3REFBd0Q7QUFDdEgsT0FBT0MsMEJBQTBCLE1BQU0sZ0VBQWdFO0FBQ3ZHLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLHdCQUF3QixNQUFNLG1DQUFtQztBQUN4RSxPQUFPQyxZQUFZLE1BQU0sb0NBQW9DO0FBQzdELE9BQU9DLGlCQUFpQixNQUFNLDRCQUE0QjtBQUUxRCxPQUFPQywwQkFBMEIsTUFBTSxrQ0FBa0M7QUFPekUsZUFBZSxNQUFNQyxlQUFlLFNBQVNQLGtCQUFrQixDQUFDO0VBRXZEUSxXQUFXQSxDQUFFQyxnQkFBbUMsRUFBRUMsZUFBd0MsRUFBRztJQUVsRyxNQUFNQyxTQUFTLEdBQUcsSUFBSVosSUFBSSxDQUFFSSx3QkFBd0IsQ0FBQ1Msc0JBQXNCLEVBQ3pFWCwwQkFBMEIsQ0FBQ1kscUJBQXNCLENBQUM7SUFFcEQsTUFBTUMsZUFBZSxHQUFHLElBQUlmLElBQUksQ0FBRUksd0JBQXdCLENBQUNZLGlDQUFpQyxFQUMxRmQsMEJBQTBCLENBQUNlLDJCQUE0QixDQUFDO0lBRTFELE1BQU1DLFlBQVksR0FBRyxJQUFJYixZQUFZLENBQUVLLGdCQUFnQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQ2xFUiwwQkFBMEIsQ0FBQ2lCLHFCQUFzQixDQUFDO0lBRXBELEtBQUssQ0FBRWhCLFNBQVMsQ0FBaUUsQ0FBQyxDQUFFO01BRWxGO01BQ0FpQixTQUFTLEVBQUVSLFNBQVM7TUFDcEJTLGVBQWUsRUFBRU4sZUFBZTtNQUNoQ08sV0FBVyxFQUFFSixZQUFZO01BQ3pCSyxRQUFRLEVBQUVoQiwwQkFBMEIsQ0FBQ2lCO0lBQ3ZDLENBQUMsRUFBRWIsZUFBZ0IsQ0FBRSxDQUFDO0VBQ3hCO0VBRWdCYyxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQW5CLGlCQUFpQixDQUFDcUIsUUFBUSxDQUFFLGlCQUFpQixFQUFFbkIsZUFBZ0IsQ0FBQyJ9