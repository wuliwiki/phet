// Copyright 2022-2023, University of Colorado Boulder

/**
 * Panel for creating symbol cards.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import { Rectangle, VBox } from '../../../../scenery/js/imports.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
import NumberSuiteCommonPanel from '../../common/view/NumberSuiteCommonPanel.js';
import SymbolCardNode from './SymbolCardNode.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import CardCreatorNode from './CardCreatorNode.js';
// constants
const MAX_SYMBOL_PIECE_COUNT = 10;
const SPACING = 10;
class SymbolCardCreatorPanel extends NumberSuiteCommonPanel {
  // removes and disposes all types of symbol nodes

  constructor(model, screenView, symbolTypes) {
    const cardsHeight = (SymbolCardNode.WIDTH + SPACING) * symbolTypes.length;
    const yMargin = symbolTypes.length > 3 ? SPACING * 2 : SPACING;
    const creatorNodeBackground = new Rectangle(0, 0, SymbolCardNode.WIDTH, cardsHeight + yMargin);
    const symbolTypeToCountPropertyMap = new Map();
    const symbolTypeToCreatorNodeMap = new Map();
    symbolTypes.forEach(symbolType => {
      // Property to count the number of each type of symbol node
      const countProperty = new NumberProperty(0);
      symbolTypeToCountPropertyMap.set(symbolType, countProperty);

      // make a creator node for the SymbolNode type
      const creatorNode = new CardCreatorNode(screenView, symbolTypeToCountPropertyMap, {
        symbolType: symbolType
      });
      symbolTypeToCreatorNodeMap.set(symbolType, creatorNode);
    });
    const iconNodes = new VBox({
      children: [...Array.from(symbolTypeToCreatorNodeMap.values())],
      spacing: SPACING,
      resize: false // don't shift contents when one of the creator nodes is hidden
    });

    iconNodes.center = creatorNodeBackground.center;
    creatorNodeBackground.addChild(iconNodes);
    super(creatorNodeBackground, {
      xMargin: 10
    });
    this.screenView = screenView;
    this.symbolTypeToCountPropertyMap = symbolTypeToCountPropertyMap;

    // make a creator node invisible if the max number for its type has been created
    symbolTypeToCountPropertyMap.forEach((countProperty, symbolType) => {
      assert && assert(symbolTypeToCreatorNodeMap.has(symbolType), `Node not found for symbolType: ${symbolType}`);
      countProperty.link(count => {
        symbolTypeToCreatorNodeMap.get(symbolType).visible = count < MAX_SYMBOL_PIECE_COUNT;
      });
    });
    this.clearSymbolNodes = () => {
      const allSymbolNodes = this.getAllSymbolNodes();
      allSymbolNodes.forEach(symbolNode => {
        screenView.pieceLayer.removeChild(symbolNode);
        symbolNode.dispose();
      });
    };
  }

  /**
   * Clears all cards and resets their counts.
   */
  reset() {
    this.clearSymbolNodes();
    this.symbolTypeToCountPropertyMap.forEach(countProperty => {
      countProperty.reset();
    });
  }

  /**
   * Returns all existing cards in the countingArea.
   */
  getAllSymbolNodes() {
    const allSymbolNodes = _.filter(this.screenView.pieceLayer.children, child => child instanceof SymbolCardNode);
    return allSymbolNodes;
  }
}
numberSuiteCommon.register('SymbolCardCreatorPanel', SymbolCardCreatorPanel);
export default SymbolCardCreatorPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,