// Copyright 2022-2023, University of Colorado Boulder

/**
 * Panel that contains a stack of  paper ones or objects, which can be clicked or dragged to create draggable
 * paper ones or objects. It also contains spinner buttons that can send a paper one or object out of the panel, or
 * request them to be brought back into the panel.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { DragListener, Rectangle } from '../../../../scenery/js/imports.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
import TenFrameNode from '../../common/view/TenFrameNode.js';
import TenFrame from '../model/TenFrame.js';
import NumberSuiteCommonPanel from '../../common/view/NumberSuiteCommonPanel.js';
import NumberSuiteCommonConstants from '../../common/NumberSuiteCommonConstants.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
const ICON_SIE_LENGTH = 20;
class TenFrameCreatorPanel extends NumberSuiteCommonPanel {
  // the scale of the icon relative to the standard ten frame size, which is the size of the ten frames in the countingArea
  static ICON_SCALE = ICON_SIE_LENGTH / TenFrame.SQUARE_SIDE_LENGTH;
  constructor(model, screenView) {
    // create the ten frame icon and the plus icon
    const iconNode = TenFrameNode.getTenFramePath({
      sideLength: ICON_SIE_LENGTH,
      lineWidth: 0.8,
      visibleProperty: new DerivedProperty([model.tenFrames.lengthProperty], length => length < NumberSuiteCommonConstants.MAX_AMOUNT_OF_TEN_FRAMES)
    });
    const creatorNodeBackground = new Rectangle(0, 0, iconNode.width, NumberSuiteCommonConstants.CREATOR_ICON_HEIGHT);
    iconNode.center = creatorNodeBackground.center;
    creatorNodeBackground.addChild(iconNode);
    const dragListener = DragListener.createForwardingListener(event => {
      const tenFrame = new TenFrame(Vector2.ZERO);
      tenFrame.positionProperty.value = screenView.globalToLocalPoint(event.pointer.point).minus(tenFrame.localBounds.centerBottom);
      model.dragTenFrameFromIcon(tenFrame);
      const tenFrameNode = screenView.getTenFrameNode(tenFrame);
      tenFrameNode.dragListener.press(event, tenFrameNode);
    });
    iconNode.cursor = 'pointer';
    iconNode.inputListeners = [dragListener];
    super(creatorNodeBackground, {
      xMargin: 10
    });
    this.iconNode = iconNode;
  }
}
numberSuiteCommon.register('TenFrameCreatorPanel', TenFrameCreatorPanel);
export default TenFrameCreatorPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiRHJhZ0xpc3RlbmVyIiwiUmVjdGFuZ2xlIiwibnVtYmVyU3VpdGVDb21tb24iLCJUZW5GcmFtZU5vZGUiLCJUZW5GcmFtZSIsIk51bWJlclN1aXRlQ29tbW9uUGFuZWwiLCJOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cyIsIkRlcml2ZWRQcm9wZXJ0eSIsIklDT05fU0lFX0xFTkdUSCIsIlRlbkZyYW1lQ3JlYXRvclBhbmVsIiwiSUNPTl9TQ0FMRSIsIlNRVUFSRV9TSURFX0xFTkdUSCIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJzY3JlZW5WaWV3IiwiaWNvbk5vZGUiLCJnZXRUZW5GcmFtZVBhdGgiLCJzaWRlTGVuZ3RoIiwibGluZVdpZHRoIiwidmlzaWJsZVByb3BlcnR5IiwidGVuRnJhbWVzIiwibGVuZ3RoUHJvcGVydHkiLCJsZW5ndGgiLCJNQVhfQU1PVU5UX09GX1RFTl9GUkFNRVMiLCJjcmVhdG9yTm9kZUJhY2tncm91bmQiLCJ3aWR0aCIsIkNSRUFUT1JfSUNPTl9IRUlHSFQiLCJjZW50ZXIiLCJhZGRDaGlsZCIsImRyYWdMaXN0ZW5lciIsImNyZWF0ZUZvcndhcmRpbmdMaXN0ZW5lciIsImV2ZW50IiwidGVuRnJhbWUiLCJaRVJPIiwicG9zaXRpb25Qcm9wZXJ0eSIsInZhbHVlIiwiZ2xvYmFsVG9Mb2NhbFBvaW50IiwicG9pbnRlciIsInBvaW50IiwibWludXMiLCJsb2NhbEJvdW5kcyIsImNlbnRlckJvdHRvbSIsImRyYWdUZW5GcmFtZUZyb21JY29uIiwidGVuRnJhbWVOb2RlIiwiZ2V0VGVuRnJhbWVOb2RlIiwicHJlc3MiLCJjdXJzb3IiLCJpbnB1dExpc3RlbmVycyIsInhNYXJnaW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRlbkZyYW1lQ3JlYXRvclBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBhbmVsIHRoYXQgY29udGFpbnMgYSBzdGFjayBvZiAgcGFwZXIgb25lcyBvciBvYmplY3RzLCB3aGljaCBjYW4gYmUgY2xpY2tlZCBvciBkcmFnZ2VkIHRvIGNyZWF0ZSBkcmFnZ2FibGVcclxuICogcGFwZXIgb25lcyBvciBvYmplY3RzLiBJdCBhbHNvIGNvbnRhaW5zIHNwaW5uZXIgYnV0dG9ucyB0aGF0IGNhbiBzZW5kIGEgcGFwZXIgb25lIG9yIG9iamVjdCBvdXQgb2YgdGhlIHBhbmVsLCBvclxyXG4gKiByZXF1ZXN0IHRoZW0gdG8gYmUgYnJvdWdodCBiYWNrIGludG8gdGhlIHBhbmVsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIsIE5vZGUsIFByZXNzTGlzdGVuZXJFdmVudCwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG51bWJlclN1aXRlQ29tbW9uIGZyb20gJy4uLy4uL251bWJlclN1aXRlQ29tbW9uLmpzJztcclxuaW1wb3J0IFRlbkZyYW1lTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9UZW5GcmFtZU5vZGUuanMnO1xyXG5pbXBvcnQgVGVuRnJhbWUgZnJvbSAnLi4vbW9kZWwvVGVuRnJhbWUuanMnO1xyXG5pbXBvcnQgTGFiTW9kZWwgZnJvbSAnLi4vbW9kZWwvTGFiTW9kZWwuanMnO1xyXG5pbXBvcnQgTGFiU2NyZWVuVmlldyBmcm9tICcuL0xhYlNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgTnVtYmVyU3VpdGVDb21tb25QYW5lbCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9OdW1iZXJTdWl0ZUNvbW1vblBhbmVsLmpzJztcclxuaW1wb3J0IE51bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9OdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBOdW1iZXJTdWl0ZUNvbW1vblByZWZlcmVuY2VzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9OdW1iZXJTdWl0ZUNvbW1vblByZWZlcmVuY2VzLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcblxyXG5jb25zdCBJQ09OX1NJRV9MRU5HVEggPSAyMDtcclxuXHJcbmNsYXNzIFRlbkZyYW1lQ3JlYXRvclBhbmVsIGV4dGVuZHMgTnVtYmVyU3VpdGVDb21tb25QYW5lbCB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGljb25Ob2RlOiBOb2RlO1xyXG5cclxuICAvLyB0aGUgc2NhbGUgb2YgdGhlIGljb24gcmVsYXRpdmUgdG8gdGhlIHN0YW5kYXJkIHRlbiBmcmFtZSBzaXplLCB3aGljaCBpcyB0aGUgc2l6ZSBvZiB0aGUgdGVuIGZyYW1lcyBpbiB0aGUgY291bnRpbmdBcmVhXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBJQ09OX1NDQUxFID0gSUNPTl9TSUVfTEVOR1RIIC8gVGVuRnJhbWUuU1FVQVJFX1NJREVfTEVOR1RIO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBMYWJNb2RlbCwgc2NyZWVuVmlldzogTGFiU2NyZWVuVmlldzxOdW1iZXJTdWl0ZUNvbW1vblByZWZlcmVuY2VzPiApIHtcclxuXHJcbiAgICAvLyBjcmVhdGUgdGhlIHRlbiBmcmFtZSBpY29uIGFuZCB0aGUgcGx1cyBpY29uXHJcbiAgICBjb25zdCBpY29uTm9kZSA9IFRlbkZyYW1lTm9kZS5nZXRUZW5GcmFtZVBhdGgoIHtcclxuICAgICAgc2lkZUxlbmd0aDogSUNPTl9TSUVfTEVOR1RILFxyXG4gICAgICBsaW5lV2lkdGg6IDAuOCxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIG1vZGVsLnRlbkZyYW1lcy5sZW5ndGhQcm9wZXJ0eSBdLFxyXG4gICAgICAgIGxlbmd0aCA9PiBsZW5ndGggPCBOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cy5NQVhfQU1PVU5UX09GX1RFTl9GUkFNRVMgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNyZWF0b3JOb2RlQmFja2dyb3VuZCA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIGljb25Ob2RlLndpZHRoLCBOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cy5DUkVBVE9SX0lDT05fSEVJR0hUICk7XHJcbiAgICBpY29uTm9kZS5jZW50ZXIgPSBjcmVhdG9yTm9kZUJhY2tncm91bmQuY2VudGVyO1xyXG4gICAgY3JlYXRvck5vZGVCYWNrZ3JvdW5kLmFkZENoaWxkKCBpY29uTm9kZSApO1xyXG5cclxuICAgIGNvbnN0IGRyYWdMaXN0ZW5lciA9IERyYWdMaXN0ZW5lci5jcmVhdGVGb3J3YXJkaW5nTGlzdGVuZXIoICggZXZlbnQ6IFByZXNzTGlzdGVuZXJFdmVudCApID0+IHtcclxuICAgICAgY29uc3QgdGVuRnJhbWUgPSBuZXcgVGVuRnJhbWUoIFZlY3RvcjIuWkVSTyApO1xyXG4gICAgICB0ZW5GcmFtZS5wb3NpdGlvblByb3BlcnR5LnZhbHVlID0gc2NyZWVuVmlldy5nbG9iYWxUb0xvY2FsUG9pbnQoIGV2ZW50LnBvaW50ZXIucG9pbnQgKS5taW51cyggdGVuRnJhbWUubG9jYWxCb3VuZHMuY2VudGVyQm90dG9tICk7XHJcbiAgICAgIG1vZGVsLmRyYWdUZW5GcmFtZUZyb21JY29uKCB0ZW5GcmFtZSApO1xyXG4gICAgICBjb25zdCB0ZW5GcmFtZU5vZGUgPSBzY3JlZW5WaWV3LmdldFRlbkZyYW1lTm9kZSggdGVuRnJhbWUgKTtcclxuICAgICAgdGVuRnJhbWVOb2RlLmRyYWdMaXN0ZW5lci5wcmVzcyggZXZlbnQsIHRlbkZyYW1lTm9kZSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGljb25Ob2RlLmN1cnNvciA9ICdwb2ludGVyJztcclxuICAgIGljb25Ob2RlLmlucHV0TGlzdGVuZXJzID0gWyBkcmFnTGlzdGVuZXIgXTtcclxuXHJcbiAgICBzdXBlciggY3JlYXRvck5vZGVCYWNrZ3JvdW5kLCB7XHJcbiAgICAgIHhNYXJnaW46IDEwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5pY29uTm9kZSA9IGljb25Ob2RlO1xyXG4gIH1cclxufVxyXG5cclxubnVtYmVyU3VpdGVDb21tb24ucmVnaXN0ZXIoICdUZW5GcmFtZUNyZWF0b3JQYW5lbCcsIFRlbkZyYW1lQ3JlYXRvclBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IFRlbkZyYW1lQ3JlYXRvclBhbmVsO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsWUFBWSxFQUE0QkMsU0FBUyxRQUFRLG1DQUFtQztBQUNyRyxPQUFPQyxpQkFBaUIsTUFBTSw0QkFBNEI7QUFDMUQsT0FBT0MsWUFBWSxNQUFNLG1DQUFtQztBQUM1RCxPQUFPQyxRQUFRLE1BQU0sc0JBQXNCO0FBRzNDLE9BQU9DLHNCQUFzQixNQUFNLDZDQUE2QztBQUNoRixPQUFPQywwQkFBMEIsTUFBTSw0Q0FBNEM7QUFFbkYsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUVwRSxNQUFNQyxlQUFlLEdBQUcsRUFBRTtBQUUxQixNQUFNQyxvQkFBb0IsU0FBU0osc0JBQXNCLENBQUM7RUFHeEQ7RUFDQSxPQUF1QkssVUFBVSxHQUFHRixlQUFlLEdBQUdKLFFBQVEsQ0FBQ08sa0JBQWtCO0VBRTFFQyxXQUFXQSxDQUFFQyxLQUFlLEVBQUVDLFVBQXVELEVBQUc7SUFFN0Y7SUFDQSxNQUFNQyxRQUFRLEdBQUdaLFlBQVksQ0FBQ2EsZUFBZSxDQUFFO01BQzdDQyxVQUFVLEVBQUVULGVBQWU7TUFDM0JVLFNBQVMsRUFBRSxHQUFHO01BQ2RDLGVBQWUsRUFBRSxJQUFJWixlQUFlLENBQUUsQ0FBRU0sS0FBSyxDQUFDTyxTQUFTLENBQUNDLGNBQWMsQ0FBRSxFQUN0RUMsTUFBTSxJQUFJQSxNQUFNLEdBQUdoQiwwQkFBMEIsQ0FBQ2lCLHdCQUF5QjtJQUMzRSxDQUFFLENBQUM7SUFFSCxNQUFNQyxxQkFBcUIsR0FBRyxJQUFJdkIsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVjLFFBQVEsQ0FBQ1UsS0FBSyxFQUFFbkIsMEJBQTBCLENBQUNvQixtQkFBb0IsQ0FBQztJQUNuSFgsUUFBUSxDQUFDWSxNQUFNLEdBQUdILHFCQUFxQixDQUFDRyxNQUFNO0lBQzlDSCxxQkFBcUIsQ0FBQ0ksUUFBUSxDQUFFYixRQUFTLENBQUM7SUFFMUMsTUFBTWMsWUFBWSxHQUFHN0IsWUFBWSxDQUFDOEIsd0JBQXdCLENBQUlDLEtBQXlCLElBQU07TUFDM0YsTUFBTUMsUUFBUSxHQUFHLElBQUk1QixRQUFRLENBQUVMLE9BQU8sQ0FBQ2tDLElBQUssQ0FBQztNQUM3Q0QsUUFBUSxDQUFDRSxnQkFBZ0IsQ0FBQ0MsS0FBSyxHQUFHckIsVUFBVSxDQUFDc0Isa0JBQWtCLENBQUVMLEtBQUssQ0FBQ00sT0FBTyxDQUFDQyxLQUFNLENBQUMsQ0FBQ0MsS0FBSyxDQUFFUCxRQUFRLENBQUNRLFdBQVcsQ0FBQ0MsWUFBYSxDQUFDO01BQ2pJNUIsS0FBSyxDQUFDNkIsb0JBQW9CLENBQUVWLFFBQVMsQ0FBQztNQUN0QyxNQUFNVyxZQUFZLEdBQUc3QixVQUFVLENBQUM4QixlQUFlLENBQUVaLFFBQVMsQ0FBQztNQUMzRFcsWUFBWSxDQUFDZCxZQUFZLENBQUNnQixLQUFLLENBQUVkLEtBQUssRUFBRVksWUFBYSxDQUFDO0lBQ3hELENBQUUsQ0FBQztJQUVINUIsUUFBUSxDQUFDK0IsTUFBTSxHQUFHLFNBQVM7SUFDM0IvQixRQUFRLENBQUNnQyxjQUFjLEdBQUcsQ0FBRWxCLFlBQVksQ0FBRTtJQUUxQyxLQUFLLENBQUVMLHFCQUFxQixFQUFFO01BQzVCd0IsT0FBTyxFQUFFO0lBQ1gsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDakMsUUFBUSxHQUFHQSxRQUFRO0VBQzFCO0FBQ0Y7QUFFQWIsaUJBQWlCLENBQUMrQyxRQUFRLENBQUUsc0JBQXNCLEVBQUV4QyxvQkFBcUIsQ0FBQztBQUMxRSxlQUFlQSxvQkFBb0IifQ==