// Copyright 2019-2023, University of Colorado Boulder

/**
 * Model class for the 'Lab' screen.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import createObservableArray from '../../../../axon/js/createObservableArray.js';
import Property from '../../../../axon/js/Property.js';
import CountingArea from '../../common/model/CountingArea.js';
import numberSuiteCommon from '../../numberSuiteCommon.js';
// constants
const HIGHEST_COUNT = 20;
class LabModel {
  constructor(tandem) {
    this.tenFrames = createObservableArray();
    this.selectedTenFrameProperty = new Property(null);

    // create five different kinds of countingAreas
    this.dogCountingArea = new CountingArea(HIGHEST_COUNT, new BooleanProperty(false), {
      tenFrames: this.tenFrames
    });
    this.appleCountingArea = new CountingArea(HIGHEST_COUNT, new BooleanProperty(false), {
      tenFrames: this.tenFrames
    });
    this.butterflyCountingArea = new CountingArea(HIGHEST_COUNT, new BooleanProperty(false), {
      tenFrames: this.tenFrames
    });
    this.ballCountingArea = new CountingArea(HIGHEST_COUNT, new BooleanProperty(false), {
      tenFrames: this.tenFrames
    });
    this.onesCountingArea = new CountingArea(HIGHEST_COUNT, new BooleanProperty(true), {
      tenFrames: this.tenFrames
    });
    this.tenFrames.addItemRemovedListener(tenFrame => {
      tenFrame.dispose();
    });
  }

  /**
   * Called when the user drags a ten frame from a stack.
   */
  dragTenFrameFromIcon(tenFrame) {
    this.tenFrames.push(tenFrame);
  }

  /**
   * Resets the model.
   */
  reset() {
    this.dogCountingArea.reset();
    this.appleCountingArea.reset();
    this.butterflyCountingArea.reset();
    this.ballCountingArea.reset();
    this.onesCountingArea.reset();
    this.tenFrames.clear();
  }
}
numberSuiteCommon.register('LabModel', LabModel);
export default LabModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJQcm9wZXJ0eSIsIkNvdW50aW5nQXJlYSIsIm51bWJlclN1aXRlQ29tbW9uIiwiSElHSEVTVF9DT1VOVCIsIkxhYk1vZGVsIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJ0ZW5GcmFtZXMiLCJzZWxlY3RlZFRlbkZyYW1lUHJvcGVydHkiLCJkb2dDb3VudGluZ0FyZWEiLCJhcHBsZUNvdW50aW5nQXJlYSIsImJ1dHRlcmZseUNvdW50aW5nQXJlYSIsImJhbGxDb3VudGluZ0FyZWEiLCJvbmVzQ291bnRpbmdBcmVhIiwiYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciIsInRlbkZyYW1lIiwiZGlzcG9zZSIsImRyYWdUZW5GcmFtZUZyb21JY29uIiwicHVzaCIsInJlc2V0IiwiY2xlYXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxhYk1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGNsYXNzIGZvciB0aGUgJ0xhYicgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBjcmVhdGVPYnNlcnZhYmxlQXJyYXksIHsgT2JzZXJ2YWJsZUFycmF5IH0gZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9jcmVhdGVPYnNlcnZhYmxlQXJyYXkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVE1vZGVsIGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL1RNb2RlbC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBDb3VudGluZ0FyZWEgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0NvdW50aW5nQXJlYS5qcyc7XHJcbmltcG9ydCBudW1iZXJTdWl0ZUNvbW1vbiBmcm9tICcuLi8uLi9udW1iZXJTdWl0ZUNvbW1vbi5qcyc7XHJcbmltcG9ydCBUZW5GcmFtZSBmcm9tICcuL1RlbkZyYW1lLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBISUdIRVNUX0NPVU5UID0gMjA7XHJcblxyXG5jbGFzcyBMYWJNb2RlbCBpbXBsZW1lbnRzIFRNb2RlbCB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRlbkZyYW1lczogT2JzZXJ2YWJsZUFycmF5PFRlbkZyYW1lPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgb25lc0NvdW50aW5nQXJlYTogQ291bnRpbmdBcmVhO1xyXG4gIHB1YmxpYyByZWFkb25seSBkb2dDb3VudGluZ0FyZWE6IENvdW50aW5nQXJlYTtcclxuICBwdWJsaWMgcmVhZG9ubHkgYXBwbGVDb3VudGluZ0FyZWE6IENvdW50aW5nQXJlYTtcclxuICBwdWJsaWMgcmVhZG9ubHkgYnV0dGVyZmx5Q291bnRpbmdBcmVhOiBDb3VudGluZ0FyZWE7XHJcbiAgcHVibGljIHJlYWRvbmx5IGJhbGxDb3VudGluZ0FyZWE6IENvdW50aW5nQXJlYTtcclxuICBwdWJsaWMgcmVhZG9ubHkgc2VsZWN0ZWRUZW5GcmFtZVByb3BlcnR5OiBUUHJvcGVydHk8VGVuRnJhbWUgfCBudWxsPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICB0aGlzLnRlbkZyYW1lcyA9IGNyZWF0ZU9ic2VydmFibGVBcnJheSgpO1xyXG4gICAgdGhpcy5zZWxlY3RlZFRlbkZyYW1lUHJvcGVydHkgPSBuZXcgUHJvcGVydHk8VGVuRnJhbWUgfCBudWxsPiggbnVsbCApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBmaXZlIGRpZmZlcmVudCBraW5kcyBvZiBjb3VudGluZ0FyZWFzXHJcbiAgICB0aGlzLmRvZ0NvdW50aW5nQXJlYSA9IG5ldyBDb3VudGluZ0FyZWEoXHJcbiAgICAgIEhJR0hFU1RfQ09VTlQsXHJcbiAgICAgIG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICksIHtcclxuICAgICAgICB0ZW5GcmFtZXM6IHRoaXMudGVuRnJhbWVzXHJcbiAgICAgIH0gKTtcclxuICAgIHRoaXMuYXBwbGVDb3VudGluZ0FyZWEgPSBuZXcgQ291bnRpbmdBcmVhKFxyXG4gICAgICBISUdIRVNUX0NPVU5ULFxyXG4gICAgICBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApLCB7XHJcbiAgICAgICAgdGVuRnJhbWVzOiB0aGlzLnRlbkZyYW1lc1xyXG4gICAgICB9ICk7XHJcbiAgICB0aGlzLmJ1dHRlcmZseUNvdW50aW5nQXJlYSA9IG5ldyBDb3VudGluZ0FyZWEoXHJcbiAgICAgIEhJR0hFU1RfQ09VTlQsXHJcbiAgICAgIG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICksIHtcclxuICAgICAgICB0ZW5GcmFtZXM6IHRoaXMudGVuRnJhbWVzXHJcbiAgICAgIH0gKTtcclxuICAgIHRoaXMuYmFsbENvdW50aW5nQXJlYSA9IG5ldyBDb3VudGluZ0FyZWEoXHJcbiAgICAgIEhJR0hFU1RfQ09VTlQsXHJcbiAgICAgIG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICksIHtcclxuICAgICAgICB0ZW5GcmFtZXM6IHRoaXMudGVuRnJhbWVzXHJcbiAgICAgIH0gKTtcclxuICAgIHRoaXMub25lc0NvdW50aW5nQXJlYSA9IG5ldyBDb3VudGluZ0FyZWEoXHJcbiAgICAgIEhJR0hFU1RfQ09VTlQsXHJcbiAgICAgIG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUgKSwge1xyXG4gICAgICAgIHRlbkZyYW1lczogdGhpcy50ZW5GcmFtZXNcclxuICAgICAgfSApO1xyXG5cclxuICAgIHRoaXMudGVuRnJhbWVzLmFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIoIHRlbkZyYW1lID0+IHtcclxuICAgICAgdGVuRnJhbWUuZGlzcG9zZSgpO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgZHJhZ3MgYSB0ZW4gZnJhbWUgZnJvbSBhIHN0YWNrLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkcmFnVGVuRnJhbWVGcm9tSWNvbiggdGVuRnJhbWU6IFRlbkZyYW1lICk6IHZvaWQge1xyXG4gICAgdGhpcy50ZW5GcmFtZXMucHVzaCggdGVuRnJhbWUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyB0aGUgbW9kZWwuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5kb2dDb3VudGluZ0FyZWEucmVzZXQoKTtcclxuICAgIHRoaXMuYXBwbGVDb3VudGluZ0FyZWEucmVzZXQoKTtcclxuICAgIHRoaXMuYnV0dGVyZmx5Q291bnRpbmdBcmVhLnJlc2V0KCk7XHJcbiAgICB0aGlzLmJhbGxDb3VudGluZ0FyZWEucmVzZXQoKTtcclxuICAgIHRoaXMub25lc0NvdW50aW5nQXJlYS5yZXNldCgpO1xyXG4gICAgdGhpcy50ZW5GcmFtZXMuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlclN1aXRlQ29tbW9uLnJlZ2lzdGVyKCAnTGFiTW9kZWwnLCBMYWJNb2RlbCApO1xyXG5leHBvcnQgZGVmYXVsdCBMYWJNb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxxQkFBcUIsTUFBMkIsOENBQThDO0FBQ3JHLE9BQU9D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