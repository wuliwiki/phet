// Copyright 2016-2022, University of Colorado Boulder

/**
 * The 'Explore' screen in the Expression Exchange simulation. Conforms to the contract specified in joist/Screen.
 *
 * @author John Blanco
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import EESharedConstants from '../common/EESharedConstants.js';
import CoinTermCreatorSetID from '../common/enum/CoinTermCreatorSetID.js';
import ExpressionManipulationModel from '../common/model/ExpressionManipulationModel.js';
import ExpressionExplorationScreenView from '../common/view/ExpressionExplorationScreenView.js';
import expressionExchange from '../expressionExchange.js';
import ExpressionExchangeStrings from '../ExpressionExchangeStrings.js';
import EEExploreIconNode from './view/EEExploreIconNode.js';
class EEExploreScreen extends Screen {
  constructor() {
    const options = {
      name: ExpressionExchangeStrings.exploreStringProperty,
      backgroundColorProperty: new Property(EESharedConstants.NON_GAME_SCREENS_BACKGROUND_COLOR),
      homeScreenIcon: new ScreenIcon(new EEExploreIconNode(), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      })
    };
    super(() => new ExpressionManipulationModel(), model => new ExpressionExplorationScreenView(model, CoinTermCreatorSetID.EXPLORE), options);
  }
}
expressionExchange.register('EEExploreScreen', EEExploreScreen);
export default EEExploreScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJFRVNoYXJlZENvbnN0YW50cyIsIkNvaW5UZXJtQ3JlYXRvclNldElEIiwiRXhwcmVzc2lvbk1hbmlwdWxhdGlvbk1vZGVsIiwiRXhwcmVzc2lvbkV4cGxvcmF0aW9uU2NyZWVuVmlldyIsImV4cHJlc3Npb25FeGNoYW5nZSIsIkV4cHJlc3Npb25FeGNoYW5nZVN0cmluZ3MiLCJFRUV4cGxvcmVJY29uTm9kZSIsIkVFRXhwbG9yZVNjcmVlbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm5hbWUiLCJleHBsb3JlU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIk5PTl9HQU1FX1NDUkVFTlNfQkFDS0dST1VORF9DT0xPUiIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwibW9kZWwiLCJFWFBMT1JFIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFRUV4cGxvcmVTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdFeHBsb3JlJyBzY3JlZW4gaW4gdGhlIEV4cHJlc3Npb24gRXhjaGFuZ2Ugc2ltdWxhdGlvbi4gQ29uZm9ybXMgdG8gdGhlIGNvbnRyYWN0IHNwZWNpZmllZCBpbiBqb2lzdC9TY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCBFRVNoYXJlZENvbnN0YW50cyBmcm9tICcuLi9jb21tb24vRUVTaGFyZWRDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ29pblRlcm1DcmVhdG9yU2V0SUQgZnJvbSAnLi4vY29tbW9uL2VudW0vQ29pblRlcm1DcmVhdG9yU2V0SUQuanMnO1xyXG5pbXBvcnQgRXhwcmVzc2lvbk1hbmlwdWxhdGlvbk1vZGVsIGZyb20gJy4uL2NvbW1vbi9tb2RlbC9FeHByZXNzaW9uTWFuaXB1bGF0aW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgRXhwcmVzc2lvbkV4cGxvcmF0aW9uU2NyZWVuVmlldyBmcm9tICcuLi9jb21tb24vdmlldy9FeHByZXNzaW9uRXhwbG9yYXRpb25TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IGV4cHJlc3Npb25FeGNoYW5nZSBmcm9tICcuLi9leHByZXNzaW9uRXhjaGFuZ2UuanMnO1xyXG5pbXBvcnQgRXhwcmVzc2lvbkV4Y2hhbmdlU3RyaW5ncyBmcm9tICcuLi9FeHByZXNzaW9uRXhjaGFuZ2VTdHJpbmdzLmpzJztcclxuaW1wb3J0IEVFRXhwbG9yZUljb25Ob2RlIGZyb20gJy4vdmlldy9FRUV4cGxvcmVJY29uTm9kZS5qcyc7XHJcblxyXG5jbGFzcyBFRUV4cGxvcmVTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiBFeHByZXNzaW9uRXhjaGFuZ2VTdHJpbmdzLmV4cGxvcmVTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggRUVTaGFyZWRDb25zdGFudHMuTk9OX0dBTUVfU0NSRUVOU19CQUNLR1JPVU5EX0NPTE9SICksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU2NyZWVuSWNvbiggbmV3IEVFRXhwbG9yZUljb25Ob2RlKCksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKVxyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IEV4cHJlc3Npb25NYW5pcHVsYXRpb25Nb2RlbCgpLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgRXhwcmVzc2lvbkV4cGxvcmF0aW9uU2NyZWVuVmlldyggbW9kZWwsIENvaW5UZXJtQ3JlYXRvclNldElELkVYUExPUkUgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cHJlc3Npb25FeGNoYW5nZS5yZWdpc3RlciggJ0VFRXhwbG9yZVNjcmVlbicsIEVFRXhwbG9yZVNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBFRUV4cGxvcmVTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELE9BQU9DLGlCQUFpQixNQUFNLGdDQUFnQztBQUM5RCxPQUFPQyxvQkFBb0IsTUFBTSx3Q0FBd0M7QUFDekUsT0FBT0MsMkJBQTJCLE1BQU0sZ0RBQWdEO0FBQ3hGLE9BQU9DLCtCQUErQixNQUFNLG1EQUFtRDtBQUMvRixPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBQ3ZFLE9BQU9DLGlCQUFpQixNQUFNLDZCQUE2QjtBQUUzRCxNQUFNQyxlQUFlLFNBQVNULE1BQU0sQ0FBQztFQUVuQ1UsV0FBV0EsQ0FBQSxFQUFHO0lBRVosTUFBTUMsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRUwseUJBQXlCLENBQUNNLHFCQUFxQjtNQUNyREMsdUJBQXVCLEVBQUUsSUFBSWYsUUFBUSxDQUFFRyxpQkFBaUIsQ0FBQ2EsaUNBQWtDLENBQUM7TUFDNUZDLGNBQWMsRUFBRSxJQUFJZixVQUFVLENBQUUsSUFBSU8saUJBQWlCLENBQUMsQ0FBQyxFQUFFO1FBQ3ZEUyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUlkLDJCQUEyQixDQUFDLENBQUMsRUFDdkNlLEtBQUssSUFBSSxJQUFJZCwrQkFBK0IsQ0FBRWMsS0FBSyxFQUFFaEIsb0JBQW9CLENBQUNpQixPQUFRLENBQUMsRUFDbkZULE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQUwsa0JBQWtCLENBQUNlLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRVosZUFBZ0IsQ0FBQztBQUNqRSxlQUFlQSxlQUFlIn0=