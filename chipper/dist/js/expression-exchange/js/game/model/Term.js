// Copyright 2017-2020, University of Colorado Boulder

/**
 * type that specifies a 'term' used in expressions, and consists of a coefficient and a coin term type ID
 *
 * @author John Blanco
 */

import CoinTermTypeID from '../../common/enum/CoinTermTypeID.js';
import expressionExchange from '../../expressionExchange.js';
class Term {
  /**
   * @param {number} coefficient
   * @param {CoinTermTypeID} coinTermTypeID
   */
  constructor(coefficient, coinTermTypeID) {
    // @public (read-only) {number}
    this.coefficient = coefficient;

    // @public (read-only) {CoinTermTypeID}
    this.coinTermTypeID = coinTermTypeID;
  }

  /**
   * multiply this term by the provide term
   * @param {Term} term
   * @returns {Term}
   * @public
   */
  times(term) {
    const result = new Term(this.coefficient * term.coefficient, null);
    if (this.coinTermTypeID === CoinTermTypeID.CONSTANT) {
      result.coinTermTypeID = term.coinTermTypeID;
    } else if (term.coinTermTypeID === CoinTermTypeID.CONSTANT) {
      result.coinTermTypeID = this.coinTermTypeID;
    } else if (this.coinTermTypeID === CoinTermTypeID.X && term.coinTermTypeID === CoinTermTypeID.X) {
      result.coinTermTypeID = CoinTermTypeID.X_SQUARED;
    } else if (this.coinTermTypeID === CoinTermTypeID.X && term.coinTermTypeID === CoinTermTypeID.Y || this.coinTermTypeID === CoinTermTypeID.Y && term.coinTermTypeID === CoinTermTypeID.X) {
      result.coinTermTypeID = CoinTermTypeID.X_TIMES_Y;
    } else if (this.coinTermTypeID === CoinTermTypeID.Y && term.coinTermTypeID === CoinTermTypeID.Y) {
      result.coinTermTypeID = CoinTermTypeID.Y_SQUARED;
    } else if (this.coinTermTypeID === CoinTermTypeID.X_SQUARED && term.coinTermTypeID === CoinTermTypeID.Y_SQUARED || this.coinTermTypeID === CoinTermTypeID.Y_SQUARED && term.coinTermTypeID === CoinTermTypeID.X_SQUARED) {
      result.coinTermTypeID = CoinTermTypeID.X_SQUARED_TIMES_Y_SQUARED;
    } else {
      throw new Error('unhandled term type combination for multiplication operation');
    }
    return result;
  }

  /**
   * returns true if the provided coin term matches this term
   * @param {CoinTerm} coinTerm
   * @returns {boolean}
   * @public
   */
  matchesCoinTerm(coinTerm) {
    return this.coinTermTypeID === coinTerm.typeID && this.coefficient === coinTerm.totalCountProperty.get();
  }
}
expressionExchange.register('Term', Term);
export default Term;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb2luVGVybVR5cGVJRCIsImV4cHJlc3Npb25FeGNoYW5nZSIsIlRlcm0iLCJjb25zdHJ1Y3RvciIsImNvZWZmaWNpZW50IiwiY29pblRlcm1UeXBlSUQiLCJ0aW1lcyIsInRlcm0iLCJyZXN1bHQiLCJDT05TVEFOVCIsIlgiLCJYX1NRVUFSRUQiLCJZIiwiWF9USU1FU19ZIiwiWV9TUVVBUkVEIiwiWF9TUVVBUkVEX1RJTUVTX1lfU1FVQVJFRCIsIkVycm9yIiwibWF0Y2hlc0NvaW5UZXJtIiwiY29pblRlcm0iLCJ0eXBlSUQiLCJ0b3RhbENvdW50UHJvcGVydHkiLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRlcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogdHlwZSB0aGF0IHNwZWNpZmllcyBhICd0ZXJtJyB1c2VkIGluIGV4cHJlc3Npb25zLCBhbmQgY29uc2lzdHMgb2YgYSBjb2VmZmljaWVudCBhbmQgYSBjb2luIHRlcm0gdHlwZSBJRFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IENvaW5UZXJtVHlwZUlEIGZyb20gJy4uLy4uL2NvbW1vbi9lbnVtL0NvaW5UZXJtVHlwZUlELmpzJztcclxuaW1wb3J0IGV4cHJlc3Npb25FeGNoYW5nZSBmcm9tICcuLi8uLi9leHByZXNzaW9uRXhjaGFuZ2UuanMnO1xyXG5cclxuY2xhc3MgVGVybSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudFxyXG4gICAqIEBwYXJhbSB7Q29pblRlcm1UeXBlSUR9IGNvaW5UZXJtVHlwZUlEXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvZWZmaWNpZW50LCBjb2luVGVybVR5cGVJRCApIHtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtudW1iZXJ9XHJcbiAgICB0aGlzLmNvZWZmaWNpZW50ID0gY29lZmZpY2llbnQ7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSB7Q29pblRlcm1UeXBlSUR9XHJcbiAgICB0aGlzLmNvaW5UZXJtVHlwZUlEID0gY29pblRlcm1UeXBlSUQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtdWx0aXBseSB0aGlzIHRlcm0gYnkgdGhlIHByb3ZpZGUgdGVybVxyXG4gICAqIEBwYXJhbSB7VGVybX0gdGVybVxyXG4gICAqIEByZXR1cm5zIHtUZXJtfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICB0aW1lcyggdGVybSApIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBUZXJtKCB0aGlzLmNvZWZmaWNpZW50ICogdGVybS5jb2VmZmljaWVudCwgbnVsbCApO1xyXG4gICAgaWYgKCB0aGlzLmNvaW5UZXJtVHlwZUlEID09PSBDb2luVGVybVR5cGVJRC5DT05TVEFOVCApIHtcclxuICAgICAgcmVzdWx0LmNvaW5UZXJtVHlwZUlEID0gdGVybS5jb2luVGVybVR5cGVJRDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0ZXJtLmNvaW5UZXJtVHlwZUlEID09PSBDb2luVGVybVR5cGVJRC5DT05TVEFOVCApIHtcclxuICAgICAgcmVzdWx0LmNvaW5UZXJtVHlwZUlEID0gdGhpcy5jb2luVGVybVR5cGVJRDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0aGlzLmNvaW5UZXJtVHlwZUlEID09PSBDb2luVGVybVR5cGVJRC5YICYmIHRlcm0uY29pblRlcm1UeXBlSUQgPT09IENvaW5UZXJtVHlwZUlELlggKSB7XHJcbiAgICAgIHJlc3VsdC5jb2luVGVybVR5cGVJRCA9IENvaW5UZXJtVHlwZUlELlhfU1FVQVJFRDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0aGlzLmNvaW5UZXJtVHlwZUlEID09PSBDb2luVGVybVR5cGVJRC5YICYmIHRlcm0uY29pblRlcm1UeXBlSUQgPT09IENvaW5UZXJtVHlwZUlELlkgfHxcclxuICAgICAgICAgICAgICB0aGlzLmNvaW5UZXJtVHlwZUlEID09PSBDb2luVGVybVR5cGVJRC5ZICYmIHRlcm0uY29pblRlcm1UeXBlSUQgPT09IENvaW5UZXJtVHlwZUlELlggKSB7XHJcbiAgICAgIHJlc3VsdC5jb2luVGVybVR5cGVJRCA9IENvaW5UZXJtVHlwZUlELlhfVElNRVNfWTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0aGlzLmNvaW5UZXJtVHlwZUlEID09PSBDb2luVGVybVR5cGVJRC5ZICYmIHRlcm0uY29pblRlcm1UeXBlSUQgPT09IENvaW5UZXJtVHlwZUlELlkgKSB7XHJcbiAgICAgIHJlc3VsdC5jb2luVGVybVR5cGVJRCA9IENvaW5UZXJtVHlwZUlELllfU1FVQVJFRDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0aGlzLmNvaW5UZXJtVHlwZUlEID09PSBDb2luVGVybVR5cGVJRC5YX1NRVUFSRUQgJiYgdGVybS5jb2luVGVybVR5cGVJRCA9PT0gQ29pblRlcm1UeXBlSUQuWV9TUVVBUkVEIHx8XHJcbiAgICAgICAgICAgICAgdGhpcy5jb2luVGVybVR5cGVJRCA9PT0gQ29pblRlcm1UeXBlSUQuWV9TUVVBUkVEICYmIHRlcm0uY29pblRlcm1UeXBlSUQgPT09IENvaW5UZXJtVHlwZUlELlhfU1FVQVJFRCApIHtcclxuICAgICAgcmVzdWx0LmNvaW5UZXJtVHlwZUlEID0gQ29pblRlcm1UeXBlSUQuWF9TUVVBUkVEX1RJTUVTX1lfU1FVQVJFRDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoICd1bmhhbmRsZWQgdGVybSB0eXBlIGNvbWJpbmF0aW9uIGZvciBtdWx0aXBsaWNhdGlvbiBvcGVyYXRpb24nICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgY29pbiB0ZXJtIG1hdGNoZXMgdGhpcyB0ZXJtXHJcbiAgICogQHBhcmFtIHtDb2luVGVybX0gY29pblRlcm1cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgbWF0Y2hlc0NvaW5UZXJtKCBjb2luVGVybSApIHtcclxuICAgIHJldHVybiB0aGlzLmNvaW5UZXJtVHlwZUlEID09PSBjb2luVGVybS50eXBlSUQgJiYgdGhpcy5jb2VmZmljaWVudCA9PT0gY29pblRlcm0udG90YWxDb3VudFByb3BlcnR5LmdldCgpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwcmVzc2lvbkV4Y2hhbmdlLnJlZ2lzdGVyKCAnVGVybScsIFRlcm0gKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRlcm07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSxxQ0FBcUM7QUFDaEUsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBRTVELE1BQU1DLElBQUksQ0FBQztFQUVUO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLFdBQVcsRUFBRUMsY0FBYyxFQUFHO0lBRXpDO0lBQ0EsSUFBSSxDQUFDRCxXQUFXLEdBQUdBLFdBQVc7O0lBRTlCO0lBQ0EsSUFBSSxDQUFDQyxjQUFjLEdBQUdBLGNBQWM7RUFDdEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLEtBQUtBLENBQUVDLElBQUksRUFBRztJQUNaLE1BQU1DLE1BQU0sR0FBRyxJQUFJTixJQUFJLENBQUUsSUFBSSxDQUFDRSxXQUFXLEdBQUdHLElBQUksQ0FBQ0gsV0FBVyxFQUFFLElBQUssQ0FBQztJQUNwRSxJQUFLLElBQUksQ0FBQ0MsY0FBYyxLQUFLTCxjQUFjLENBQUNTLFFBQVEsRUFBRztNQUNyREQsTUFBTSxDQUFDSCxjQUFjLEdBQUdFLElBQUksQ0FBQ0YsY0FBYztJQUM3QyxDQUFDLE1BQ0ksSUFBS0UsSUFBSSxDQUFDRixjQUFjLEtBQUtMLGNBQWMsQ0FBQ1MsUUFBUSxFQUFHO01BQzFERCxNQUFNLENBQUNILGNBQWMsR0FBRyxJQUFJLENBQUNBLGNBQWM7SUFDN0MsQ0FBQyxNQUNJLElBQUssSUFBSSxDQUFDQSxjQUFjLEtBQUtMLGNBQWMsQ0FBQ1UsQ0FBQyxJQUFJSCxJQUFJLENBQUNGLGNBQWMsS0FBS0wsY0FBYyxDQUFDVSxDQUFDLEVBQUc7TUFDL0ZGLE1BQU0sQ0FBQ0gsY0FBYyxHQUFHTCxjQUFjLENBQUNXLFNBQVM7SUFDbEQsQ0FBQyxNQUNJLElBQUssSUFBSSxDQUFDTixjQUFjLEtBQUtMLGNBQWMsQ0FBQ1UsQ0FBQyxJQUFJSCxJQUFJLENBQUNGLGNBQWMsS0FBS0wsY0FBYyxDQUFDWSxDQUFDLElBQ3BGLElBQUksQ0FBQ1AsY0FBYyxLQUFLTCxjQUFjLENBQUNZLENBQUMsSUFBSUwsSUFBSSxDQUFDRixjQUFjLEtBQUtMLGNBQWMsQ0FBQ1UsQ0FBQyxFQUFHO01BQy9GRixNQUFNLENBQUNILGNBQWMsR0FBR0wsY0FBYyxDQUFDYSxTQUFTO0lBQ2xELENBQUMsTUFDSSxJQUFLLElBQUksQ0FBQ1IsY0FBYyxLQUFLTCxjQUFjLENBQUNZLENBQUMsSUFBSUwsSUFBSSxDQUFDRixjQUFjLEtBQUtMLGNBQWMsQ0FBQ1ksQ0FBQyxFQUFHO01BQy9GSixNQUFNLENBQUNILGNBQWMsR0FBR0wsY0FBYyxDQUFDYyxTQUFTO0lBQ2xELENBQUMsTUFDSSxJQUFLLElBQUksQ0FBQ1QsY0FBYyxLQUFLTCxjQUFjLENBQUNXLFNBQVMsSUFBSUosSUFBSSxDQUFDRixjQUFjLEtBQUtMLGNBQWMsQ0FBQ2MsU0FBUyxJQUNwRyxJQUFJLENBQUNULGNBQWMsS0FBS0wsY0FBYyxDQUFDYyxTQUFTLElBQUlQLElBQUksQ0FBQ0YsY0FBYyxLQUFLTCxjQUFjLENBQUNXLFNBQVMsRUFBRztNQUMvR0gsTUFBTSxDQUFDSCxjQUFjLEdBQUdMLGNBQWMsQ0FBQ2UseUJBQXlCO0lBQ2xFLENBQUMsTUFDSTtNQUNILE1BQU0sSUFBSUMsS0FBSyxDQUFFLDhEQUErRCxDQUFDO0lBQ25GO0lBRUEsT0FBT1IsTUFBTTtFQUNmOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFUyxlQUFlQSxDQUFFQyxRQUFRLEVBQUc7SUFDMUIsT0FBTyxJQUFJLENBQUNiLGNBQWMsS0FBS2EsUUFBUSxDQUFDQyxNQUFNLElBQUksSUFBSSxDQUFDZixXQUFXLEtBQUtjLFFBQVEsQ0FBQ0Usa0JBQWtCLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0VBQzFHO0FBQ0Y7QUFFQXBCLGtCQUFrQixDQUFDcUIsUUFBUSxDQUFFLE1BQU0sRUFBRXBCLElBQUssQ0FBQztBQUUzQyxlQUFlQSxJQUFJIn0=