// Copyright 2017-2022, University of Colorado Boulder

/**
 * view representation of the area where expressions can be collected, used in the game
 */

import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import expressionExchange from '../../expressionExchange.js';
import ExpressionDescriptionNode from './ExpressionDescriptionNode.js';

// constants
const CORNER_RADIUS = 4;
class EECollectionAreaNode extends Node {
  /**
   * @param {EECollectionArea} collectionArea
   */
  constructor(collectionArea) {
    super();

    // create the 'halo' that will turn on as a hint that the user can drop something into the collection area
    const halo = Rectangle.bounds(collectionArea.bounds, {
      lineWidth: 9,
      stroke: '#66FF33',
      cornerRadius: CORNER_RADIUS
    });
    this.addChild(halo);

    // control halo visibility
    collectionArea.haloActiveProperty.linkAttribute(halo, 'visible');

    // create the basic rectangular background
    const collectionAreaRectangle = Rectangle.bounds(collectionArea.bounds, {
      fill: 'white',
      stroke: 'black',
      cornerRadius: CORNER_RADIUS
    });
    this.addChild(collectionAreaRectangle);

    // add the expression description representation, which will update if the expression description changes
    let expressionDescriptionNode = null;
    collectionArea.expressionDescriptionProperty.link(expressionDescription => {
      // remove the previous expression description node, if present
      if (expressionDescriptionNode) {
        this.removeChild(expressionDescriptionNode);
        expressionDescriptionNode = null;
      }

      // add the description node for the new expression
      if (expressionDescription) {
        expressionDescriptionNode = new ExpressionDescriptionNode(expressionDescription, collectionArea.viewMode, {
          left: collectionAreaRectangle.left,
          bottom: collectionAreaRectangle.top - 2
        });
        this.addChild(expressionDescriptionNode);
      }
    });
  }
}
expressionExchange.register('EECollectionAreaNode', EECollectionAreaNode);
export default EECollectionAreaNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiUmVjdGFuZ2xlIiwiZXhwcmVzc2lvbkV4Y2hhbmdlIiwiRXhwcmVzc2lvbkRlc2NyaXB0aW9uTm9kZSIsIkNPUk5FUl9SQURJVVMiLCJFRUNvbGxlY3Rpb25BcmVhTm9kZSIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbkFyZWEiLCJoYWxvIiwiYm91bmRzIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiY29ybmVyUmFkaXVzIiwiYWRkQ2hpbGQiLCJoYWxvQWN0aXZlUHJvcGVydHkiLCJsaW5rQXR0cmlidXRlIiwiY29sbGVjdGlvbkFyZWFSZWN0YW5nbGUiLCJmaWxsIiwiZXhwcmVzc2lvbkRlc2NyaXB0aW9uTm9kZSIsImV4cHJlc3Npb25EZXNjcmlwdGlvblByb3BlcnR5IiwibGluayIsImV4cHJlc3Npb25EZXNjcmlwdGlvbiIsInJlbW92ZUNoaWxkIiwidmlld01vZGUiLCJsZWZ0IiwiYm90dG9tIiwidG9wIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFRUNvbGxlY3Rpb25BcmVhTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiB2aWV3IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBhcmVhIHdoZXJlIGV4cHJlc3Npb25zIGNhbiBiZSBjb2xsZWN0ZWQsIHVzZWQgaW4gdGhlIGdhbWVcclxuICovXHJcblxyXG5pbXBvcnQgeyBOb2RlLCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZXhwcmVzc2lvbkV4Y2hhbmdlIGZyb20gJy4uLy4uL2V4cHJlc3Npb25FeGNoYW5nZS5qcyc7XHJcbmltcG9ydCBFeHByZXNzaW9uRGVzY3JpcHRpb25Ob2RlIGZyb20gJy4vRXhwcmVzc2lvbkRlc2NyaXB0aW9uTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQ09STkVSX1JBRElVUyA9IDQ7XHJcblxyXG5jbGFzcyBFRUNvbGxlY3Rpb25BcmVhTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0VFQ29sbGVjdGlvbkFyZWF9IGNvbGxlY3Rpb25BcmVhXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvbGxlY3Rpb25BcmVhICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgdGhlICdoYWxvJyB0aGF0IHdpbGwgdHVybiBvbiBhcyBhIGhpbnQgdGhhdCB0aGUgdXNlciBjYW4gZHJvcCBzb21ldGhpbmcgaW50byB0aGUgY29sbGVjdGlvbiBhcmVhXHJcbiAgICBjb25zdCBoYWxvID0gUmVjdGFuZ2xlLmJvdW5kcyggY29sbGVjdGlvbkFyZWEuYm91bmRzLCB7XHJcbiAgICAgIGxpbmVXaWR0aDogOSxcclxuICAgICAgc3Ryb2tlOiAnIzY2RkYzMycsXHJcbiAgICAgIGNvcm5lclJhZGl1czogQ09STkVSX1JBRElVU1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggaGFsbyApO1xyXG5cclxuICAgIC8vIGNvbnRyb2wgaGFsbyB2aXNpYmlsaXR5XHJcbiAgICBjb2xsZWN0aW9uQXJlYS5oYWxvQWN0aXZlUHJvcGVydHkubGlua0F0dHJpYnV0ZSggaGFsbywgJ3Zpc2libGUnICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBiYXNpYyByZWN0YW5ndWxhciBiYWNrZ3JvdW5kXHJcbiAgICBjb25zdCBjb2xsZWN0aW9uQXJlYVJlY3RhbmdsZSA9IFJlY3RhbmdsZS5ib3VuZHMoIGNvbGxlY3Rpb25BcmVhLmJvdW5kcywge1xyXG4gICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGNvcm5lclJhZGl1czogQ09STkVSX1JBRElVU1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggY29sbGVjdGlvbkFyZWFSZWN0YW5nbGUgKTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIGV4cHJlc3Npb24gZGVzY3JpcHRpb24gcmVwcmVzZW50YXRpb24sIHdoaWNoIHdpbGwgdXBkYXRlIGlmIHRoZSBleHByZXNzaW9uIGRlc2NyaXB0aW9uIGNoYW5nZXNcclxuICAgIGxldCBleHByZXNzaW9uRGVzY3JpcHRpb25Ob2RlID0gbnVsbDtcclxuICAgIGNvbGxlY3Rpb25BcmVhLmV4cHJlc3Npb25EZXNjcmlwdGlvblByb3BlcnR5LmxpbmsoIGV4cHJlc3Npb25EZXNjcmlwdGlvbiA9PiB7XHJcblxyXG4gICAgICAvLyByZW1vdmUgdGhlIHByZXZpb3VzIGV4cHJlc3Npb24gZGVzY3JpcHRpb24gbm9kZSwgaWYgcHJlc2VudFxyXG4gICAgICBpZiAoIGV4cHJlc3Npb25EZXNjcmlwdGlvbk5vZGUgKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVDaGlsZCggZXhwcmVzc2lvbkRlc2NyaXB0aW9uTm9kZSApO1xyXG4gICAgICAgIGV4cHJlc3Npb25EZXNjcmlwdGlvbk5vZGUgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBhZGQgdGhlIGRlc2NyaXB0aW9uIG5vZGUgZm9yIHRoZSBuZXcgZXhwcmVzc2lvblxyXG4gICAgICBpZiAoIGV4cHJlc3Npb25EZXNjcmlwdGlvbiApIHtcclxuICAgICAgICBleHByZXNzaW9uRGVzY3JpcHRpb25Ob2RlID0gbmV3IEV4cHJlc3Npb25EZXNjcmlwdGlvbk5vZGUoXHJcbiAgICAgICAgICBleHByZXNzaW9uRGVzY3JpcHRpb24sXHJcbiAgICAgICAgICBjb2xsZWN0aW9uQXJlYS52aWV3TW9kZSxcclxuICAgICAgICAgIHsgbGVmdDogY29sbGVjdGlvbkFyZWFSZWN0YW5nbGUubGVmdCwgYm90dG9tOiBjb2xsZWN0aW9uQXJlYVJlY3RhbmdsZS50b3AgLSAyIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoIGV4cHJlc3Npb25EZXNjcmlwdGlvbk5vZGUgKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwcmVzc2lvbkV4Y2hhbmdlLnJlZ2lzdGVyKCAnRUVDb2xsZWN0aW9uQXJlYU5vZGUnLCBFRUNvbGxlY3Rpb25BcmVhTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRUVDb2xsZWN0aW9uQXJlYU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxFQUFFQyxTQUFTLFFBQVEsbUNBQW1DO0FBQ25FLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyx5QkFBeUIsTUFBTSxnQ0FBZ0M7O0FBRXRFO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLENBQUM7QUFFdkIsTUFBTUMsb0JBQW9CLFNBQVNMLElBQUksQ0FBQztFQUV0QztBQUNGO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsY0FBYyxFQUFHO0lBQzVCLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsTUFBTUMsSUFBSSxHQUFHUCxTQUFTLENBQUNRLE1BQU0sQ0FBRUYsY0FBYyxDQUFDRSxNQUFNLEVBQUU7TUFDcERDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLE1BQU0sRUFBRSxTQUFTO01BQ2pCQyxZQUFZLEVBQUVSO0lBQ2hCLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ1MsUUFBUSxDQUFFTCxJQUFLLENBQUM7O0lBRXJCO0lBQ0FELGNBQWMsQ0FBQ08sa0JBQWtCLENBQUNDLGFBQWEsQ0FBRVAsSUFBSSxFQUFFLFNBQVUsQ0FBQzs7SUFFbEU7SUFDQSxNQUFNUSx1QkFBdUIsR0FBR2YsU0FBUyxDQUFDUSxNQUFNLENBQUVGLGNBQWMsQ0FBQ0UsTUFBTSxFQUFFO01BQ3ZFUSxJQUFJLEVBQUUsT0FBTztNQUNiTixNQUFNLEVBQUUsT0FBTztNQUNmQyxZQUFZLEVBQUVSO0lBQ2hCLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ1MsUUFBUSxDQUFFRyx1QkFBd0IsQ0FBQzs7SUFFeEM7SUFDQSxJQUFJRSx5QkFBeUIsR0FBRyxJQUFJO0lBQ3BDWCxjQUFjLENBQUNZLDZCQUE2QixDQUFDQyxJQUFJLENBQUVDLHFCQUFxQixJQUFJO01BRTFFO01BQ0EsSUFBS0gseUJBQXlCLEVBQUc7UUFDL0IsSUFBSSxDQUFDSSxXQUFXLENBQUVKLHlCQUEwQixDQUFDO1FBQzdDQSx5QkFBeUIsR0FBRyxJQUFJO01BQ2xDOztNQUVBO01BQ0EsSUFBS0cscUJBQXFCLEVBQUc7UUFDM0JILHlCQUF5QixHQUFHLElBQUlmLHlCQUF5QixDQUN2RGtCLHFCQUFxQixFQUNyQmQsY0FBYyxDQUFDZ0IsUUFBUSxFQUN2QjtVQUFFQyxJQUFJLEVBQUVSLHVCQUF1QixDQUFDUSxJQUFJO1VBQUVDLE1BQU0sRUFBRVQsdUJBQXVCLENBQUNVLEdBQUcsR0FBRztRQUFFLENBQ2hGLENBQUM7UUFDRCxJQUFJLENBQUNiLFFBQVEsQ0FBRUsseUJBQTBCLENBQUM7TUFDNUM7SUFDRixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFoQixrQkFBa0IsQ0FBQ3lCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRXRCLG9CQUFxQixDQUFDO0FBRTNFLGVBQWVBLG9CQUFvQiJ9