// Copyright 2016-2022, University of Colorado Boulder

/**
 * The 'Explore' screen in the Expression Exchange simulation. Conforms to the contract specified in joist/Screen.
 *
 * @author John Blanco
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import EESharedConstants from '../common/EESharedConstants.js';
import AllowedRepresentations from '../common/enum/AllowedRepresentations.js';
import CoinTermCreatorSetID from '../common/enum/CoinTermCreatorSetID.js';
import ExpressionManipulationModel from '../common/model/ExpressionManipulationModel.js';
import ExpressionExplorationScreenView from '../common/view/ExpressionExplorationScreenView.js';
import expressionExchange from '../expressionExchange.js';
import ExpressionExchangeStrings from '../ExpressionExchangeStrings.js';
import EENegativesIconNode from './view/EENegativesIconNode.js';
class EENegativesScreen extends Screen {
  constructor() {
    const options = {
      name: ExpressionExchangeStrings.negativesStringProperty,
      backgroundColorProperty: new Property(EESharedConstants.NON_GAME_SCREENS_BACKGROUND_COLOR),
      homeScreenIcon: new ScreenIcon(new EENegativesIconNode(), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      })
    };
    super(() => new ExpressionManipulationModel({
      allowedRepresentations: AllowedRepresentations.VARIABLES_ONLY
    }), model => new ExpressionExplorationScreenView(model, CoinTermCreatorSetID.VARIABLES), options);
  }
}
expressionExchange.register('EENegativesScreen', EENegativesScreen);
export default EENegativesScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJFRVNoYXJlZENvbnN0YW50cyIsIkFsbG93ZWRSZXByZXNlbnRhdGlvbnMiLCJDb2luVGVybUNyZWF0b3JTZXRJRCIsIkV4cHJlc3Npb25NYW5pcHVsYXRpb25Nb2RlbCIsIkV4cHJlc3Npb25FeHBsb3JhdGlvblNjcmVlblZpZXciLCJleHByZXNzaW9uRXhjaGFuZ2UiLCJFeHByZXNzaW9uRXhjaGFuZ2VTdHJpbmdzIiwiRUVOZWdhdGl2ZXNJY29uTm9kZSIsIkVFTmVnYXRpdmVzU2NyZWVuIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsIm5lZ2F0aXZlc1N0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJOT05fR0FNRV9TQ1JFRU5TX0JBQ0tHUk9VTkRfQ09MT1IiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsImFsbG93ZWRSZXByZXNlbnRhdGlvbnMiLCJWQVJJQUJMRVNfT05MWSIsIm1vZGVsIiwiVkFSSUFCTEVTIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFRU5lZ2F0aXZlc1NjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgJ0V4cGxvcmUnIHNjcmVlbiBpbiB0aGUgRXhwcmVzc2lvbiBFeGNoYW5nZSBzaW11bGF0aW9uLiBDb25mb3JtcyB0byB0aGUgY29udHJhY3Qgc3BlY2lmaWVkIGluIGpvaXN0L1NjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IEVFU2hhcmVkQ29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbi9FRVNoYXJlZENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBBbGxvd2VkUmVwcmVzZW50YXRpb25zIGZyb20gJy4uL2NvbW1vbi9lbnVtL0FsbG93ZWRSZXByZXNlbnRhdGlvbnMuanMnO1xyXG5pbXBvcnQgQ29pblRlcm1DcmVhdG9yU2V0SUQgZnJvbSAnLi4vY29tbW9uL2VudW0vQ29pblRlcm1DcmVhdG9yU2V0SUQuanMnO1xyXG5pbXBvcnQgRXhwcmVzc2lvbk1hbmlwdWxhdGlvbk1vZGVsIGZyb20gJy4uL2NvbW1vbi9tb2RlbC9FeHByZXNzaW9uTWFuaXB1bGF0aW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgRXhwcmVzc2lvbkV4cGxvcmF0aW9uU2NyZWVuVmlldyBmcm9tICcuLi9jb21tb24vdmlldy9FeHByZXNzaW9uRXhwbG9yYXRpb25TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IGV4cHJlc3Npb25FeGNoYW5nZSBmcm9tICcuLi9leHByZXNzaW9uRXhjaGFuZ2UuanMnO1xyXG5pbXBvcnQgRXhwcmVzc2lvbkV4Y2hhbmdlU3RyaW5ncyBmcm9tICcuLi9FeHByZXNzaW9uRXhjaGFuZ2VTdHJpbmdzLmpzJztcclxuaW1wb3J0IEVFTmVnYXRpdmVzSWNvbk5vZGUgZnJvbSAnLi92aWV3L0VFTmVnYXRpdmVzSWNvbk5vZGUuanMnO1xyXG5cclxuY2xhc3MgRUVOZWdhdGl2ZXNTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiBFeHByZXNzaW9uRXhjaGFuZ2VTdHJpbmdzLm5lZ2F0aXZlc1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBFRVNoYXJlZENvbnN0YW50cy5OT05fR0FNRV9TQ1JFRU5TX0JBQ0tHUk9VTkRfQ09MT1IgKSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgRUVOZWdhdGl2ZXNJY29uTm9kZSgpLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9IClcclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBFeHByZXNzaW9uTWFuaXB1bGF0aW9uTW9kZWwoIHtcclxuICAgICAgICBhbGxvd2VkUmVwcmVzZW50YXRpb25zOiBBbGxvd2VkUmVwcmVzZW50YXRpb25zLlZBUklBQkxFU19PTkxZXHJcbiAgICAgIH0gKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IEV4cHJlc3Npb25FeHBsb3JhdGlvblNjcmVlblZpZXcoIG1vZGVsLCBDb2luVGVybUNyZWF0b3JTZXRJRC5WQVJJQUJMRVMgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cHJlc3Npb25FeGNoYW5nZS5yZWdpc3RlciggJ0VFTmVnYXRpdmVzU2NyZWVuJywgRUVOZWdhdGl2ZXNTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgRUVOZWdhdGl2ZXNTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELE9BQU9DLGlCQUFpQixNQUFNLGdDQUFnQztBQUM5RCxPQUFPQyxzQkFBc0IsTUFBTSwwQ0FBMEM7QUFDN0UsT0FBT0Msb0JBQW9CLE1BQU0sd0NBQXdDO0FBQ3pFLE9BQU9DLDJCQUEyQixNQUFNLGdEQUFnRDtBQUN4RixPQUFPQywrQkFBK0IsTUFBTSxtREFBbUQ7QUFDL0YsT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBQ3pELE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxtQkFBbUIsTUFBTSwrQkFBK0I7QUFFL0QsTUFBTUMsaUJBQWlCLFNBQVNWLE1BQU0sQ0FBQztFQUVyQ1csV0FBV0EsQ0FBQSxFQUFHO0lBRVosTUFBTUMsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRUwseUJBQXlCLENBQUNNLHVCQUF1QjtNQUN2REMsdUJBQXVCLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRUcsaUJBQWlCLENBQUNjLGlDQUFrQyxDQUFDO01BQzVGQyxjQUFjLEVBQUUsSUFBSWhCLFVBQVUsQ0FBRSxJQUFJUSxtQkFBbUIsQ0FBQyxDQUFDLEVBQUU7UUFDekRTLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUU7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUNILE1BQU0sSUFBSWQsMkJBQTJCLENBQUU7TUFDckNlLHNCQUFzQixFQUFFakIsc0JBQXNCLENBQUNrQjtJQUNqRCxDQUFFLENBQUMsRUFDSEMsS0FBSyxJQUFJLElBQUloQiwrQkFBK0IsQ0FBRWdCLEtBQUssRUFBRWxCLG9CQUFvQixDQUFDbUIsU0FBVSxDQUFDLEVBQ3JGWCxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFMLGtCQUFrQixDQUFDaUIsUUFBUSxDQUFFLG1CQUFtQixFQUFFZCxpQkFBa0IsQ0FBQztBQUNyRSxlQUFlQSxpQkFBaUIifQ==