// Copyright 2016-2022, University of Colorado Boulder

/**
 * The 'Explore' screen in the Expression Exchange simulation. Conforms to the contract specified in joist/Screen.
 *
 * @author John Blanco
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import EESharedConstants from '../common/EESharedConstants.js';
import CoinTermCreatorSetID from '../common/enum/CoinTermCreatorSetID.js';
import ExpressionManipulationModel from '../common/model/ExpressionManipulationModel.js';
import ExpressionExplorationScreenView from '../common/view/ExpressionExplorationScreenView.js';
import expressionExchange from '../expressionExchange.js';
import ExpressionExchangeStrings from '../ExpressionExchangeStrings.js';
import EEBasicsIconNode from './view/EEBasicsIconNode.js';
class EEBasicsScreen extends Screen {
  constructor() {
    const options = {
      name: ExpressionExchangeStrings.basicsStringProperty,
      backgroundColorProperty: new Property(EESharedConstants.NON_GAME_SCREENS_BACKGROUND_COLOR),
      homeScreenIcon: new ScreenIcon(new EEBasicsIconNode(), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      })
    };
    super(() => new ExpressionManipulationModel(), model => new ExpressionExplorationScreenView(model, CoinTermCreatorSetID.BASICS), options);
  }
}
expressionExchange.register('EEBasicsScreen', EEBasicsScreen);
export default EEBasicsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJFRVNoYXJlZENvbnN0YW50cyIsIkNvaW5UZXJtQ3JlYXRvclNldElEIiwiRXhwcmVzc2lvbk1hbmlwdWxhdGlvbk1vZGVsIiwiRXhwcmVzc2lvbkV4cGxvcmF0aW9uU2NyZWVuVmlldyIsImV4cHJlc3Npb25FeGNoYW5nZSIsIkV4cHJlc3Npb25FeGNoYW5nZVN0cmluZ3MiLCJFRUJhc2ljc0ljb25Ob2RlIiwiRUVCYXNpY3NTY3JlZW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJuYW1lIiwiYmFzaWNzU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIk5PTl9HQU1FX1NDUkVFTlNfQkFDS0dST1VORF9DT0xPUiIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwibW9kZWwiLCJCQVNJQ1MiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVFQmFzaWNzU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnRXhwbG9yZScgc2NyZWVuIGluIHRoZSBFeHByZXNzaW9uIEV4Y2hhbmdlIHNpbXVsYXRpb24uIENvbmZvcm1zIHRvIHRoZSBjb250cmFjdCBzcGVjaWZpZWQgaW4gam9pc3QvU2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgRUVTaGFyZWRDb25zdGFudHMgZnJvbSAnLi4vY29tbW9uL0VFU2hhcmVkQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENvaW5UZXJtQ3JlYXRvclNldElEIGZyb20gJy4uL2NvbW1vbi9lbnVtL0NvaW5UZXJtQ3JlYXRvclNldElELmpzJztcclxuaW1wb3J0IEV4cHJlc3Npb25NYW5pcHVsYXRpb25Nb2RlbCBmcm9tICcuLi9jb21tb24vbW9kZWwvRXhwcmVzc2lvbk1hbmlwdWxhdGlvbk1vZGVsLmpzJztcclxuaW1wb3J0IEV4cHJlc3Npb25FeHBsb3JhdGlvblNjcmVlblZpZXcgZnJvbSAnLi4vY29tbW9uL3ZpZXcvRXhwcmVzc2lvbkV4cGxvcmF0aW9uU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBleHByZXNzaW9uRXhjaGFuZ2UgZnJvbSAnLi4vZXhwcmVzc2lvbkV4Y2hhbmdlLmpzJztcclxuaW1wb3J0IEV4cHJlc3Npb25FeGNoYW5nZVN0cmluZ3MgZnJvbSAnLi4vRXhwcmVzc2lvbkV4Y2hhbmdlU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBFRUJhc2ljc0ljb25Ob2RlIGZyb20gJy4vdmlldy9FRUJhc2ljc0ljb25Ob2RlLmpzJztcclxuXHJcbmNsYXNzIEVFQmFzaWNzU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogRXhwcmVzc2lvbkV4Y2hhbmdlU3RyaW5ncy5iYXNpY3NTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggRUVTaGFyZWRDb25zdGFudHMuTk9OX0dBTUVfU0NSRUVOU19CQUNLR1JPVU5EX0NPTE9SICksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU2NyZWVuSWNvbiggbmV3IEVFQmFzaWNzSWNvbk5vZGUoKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgRXhwcmVzc2lvbk1hbmlwdWxhdGlvbk1vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBFeHByZXNzaW9uRXhwbG9yYXRpb25TY3JlZW5WaWV3KCBtb2RlbCwgQ29pblRlcm1DcmVhdG9yU2V0SUQuQkFTSUNTICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHByZXNzaW9uRXhjaGFuZ2UucmVnaXN0ZXIoICdFRUJhc2ljc1NjcmVlbicsIEVFQmFzaWNzU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVFQmFzaWNzU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxpQkFBaUIsTUFBTSxnQ0FBZ0M7QUFDOUQsT0FBT0Msb0JBQW9CLE1BQU0sd0NBQXdDO0FBQ3pFLE9BQU9DLDJCQUEyQixNQUFNLGdEQUFnRDtBQUN4RixPQUFPQywrQkFBK0IsTUFBTSxtREFBbUQ7QUFDL0YsT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBQ3pELE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxnQkFBZ0IsTUFBTSw0QkFBNEI7QUFFekQsTUFBTUMsY0FBYyxTQUFTVCxNQUFNLENBQUM7RUFFbENVLFdBQVdBLENBQUEsRUFBRztJQUVaLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVMLHlCQUF5QixDQUFDTSxvQkFBb0I7TUFDcERDLHVCQUF1QixFQUFFLElBQUlmLFFBQVEsQ0FBRUcsaUJBQWlCLENBQUNhLGlDQUFrQyxDQUFDO01BQzVGQyxjQUFjLEVBQUUsSUFBSWYsVUFBVSxDQUFFLElBQUlPLGdCQUFnQixDQUFDLENBQUMsRUFBRTtRQUN0RFMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRTtJQUNKLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJZCwyQkFBMkIsQ0FBQyxDQUFDLEVBQ3ZDZSxLQUFLLElBQUksSUFBSWQsK0JBQStCLENBQUVjLEtBQUssRUFBRWhCLG9CQUFvQixDQUFDaUIsTUFBTyxDQUFDLEVBQ2xGVCxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFMLGtCQUFrQixDQUFDZSxRQUFRLENBQUUsZ0JBQWdCLEVBQUVaLGNBQWUsQ0FBQztBQUMvRCxlQUFlQSxjQUFjIn0=