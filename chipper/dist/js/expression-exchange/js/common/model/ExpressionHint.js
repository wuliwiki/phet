// Copyright 2016-2020, University of Colorado Boulder

/**
 * type that represents a hint that is show to the user when a new expression can be created
 *
 * @author John Blanco
 */

import expressionExchange from '../../expressionExchange.js';
class ExpressionHint {
  /**
   * @param {CoinTerm} anchorCoinTerm - the coin term that is staying put as this expression is being formed
   * @param {CoinTerm} movingCoinTerm - the coin term that is being moved by the user to join this expression
   */
  constructor(anchorCoinTerm, movingCoinTerm) {
    // @public (read-only) {CoinTerm}
    this.anchorCoinTerm = anchorCoinTerm;
    this.movingCoinTerm = movingCoinTerm;

    // @public {boolean}
    this.anchorOnLeft = anchorCoinTerm.positionProperty.get().x < movingCoinTerm.positionProperty.get().x;

    // set the flag indicating that breaking apart is suppressed
    anchorCoinTerm.breakApartAllowedProperty.set(false);
    movingCoinTerm.breakApartAllowedProperty.set(false);
  }

  /**
   * returns true if this expression hint includes the provided coin term
   * @param {CoinTerm} coinTerm
   * @returns {boolean}
   * @public
   */
  containsCoinTerm(coinTerm) {
    return coinTerm === this.anchorCoinTerm || coinTerm === this.movingCoinTerm;
  }

  /**
   * @param {ExpressionHint} otherExpressionHint
   * @returns {boolean}
   * @public
   */
  equals(otherExpressionHint) {
    return otherExpressionHint.anchorCoinTerm === this.anchorCoinTerm && otherExpressionHint.movingCoinTerm === this.movingCoinTerm && otherExpressionHint.anchorOnLeft === this.anchorOnLeft;
  }

  /**
   * Clear this expression hint, generally done just before removing it from the model.  This updated the state of
   * any coin terms that were affected by the existence of the hint.
   * @public
   */
  clear() {
    this.anchorCoinTerm.breakApartAllowedProperty.set(true);
    this.movingCoinTerm.breakApartAllowedProperty.set(true);
  }
}
expressionExchange.register('ExpressionHint', ExpressionHint);
export default ExpressionHint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzaW9uRXhjaGFuZ2UiLCJFeHByZXNzaW9uSGludCIsImNvbnN0cnVjdG9yIiwiYW5jaG9yQ29pblRlcm0iLCJtb3ZpbmdDb2luVGVybSIsImFuY2hvck9uTGVmdCIsInBvc2l0aW9uUHJvcGVydHkiLCJnZXQiLCJ4IiwiYnJlYWtBcGFydEFsbG93ZWRQcm9wZXJ0eSIsInNldCIsImNvbnRhaW5zQ29pblRlcm0iLCJjb2luVGVybSIsImVxdWFscyIsIm90aGVyRXhwcmVzc2lvbkhpbnQiLCJjbGVhciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwcmVzc2lvbkhpbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogdHlwZSB0aGF0IHJlcHJlc2VudHMgYSBoaW50IHRoYXQgaXMgc2hvdyB0byB0aGUgdXNlciB3aGVuIGEgbmV3IGV4cHJlc3Npb24gY2FuIGJlIGNyZWF0ZWRcclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBleHByZXNzaW9uRXhjaGFuZ2UgZnJvbSAnLi4vLi4vZXhwcmVzc2lvbkV4Y2hhbmdlLmpzJztcclxuXHJcbmNsYXNzIEV4cHJlc3Npb25IaW50IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDb2luVGVybX0gYW5jaG9yQ29pblRlcm0gLSB0aGUgY29pbiB0ZXJtIHRoYXQgaXMgc3RheWluZyBwdXQgYXMgdGhpcyBleHByZXNzaW9uIGlzIGJlaW5nIGZvcm1lZFxyXG4gICAqIEBwYXJhbSB7Q29pblRlcm19IG1vdmluZ0NvaW5UZXJtIC0gdGhlIGNvaW4gdGVybSB0aGF0IGlzIGJlaW5nIG1vdmVkIGJ5IHRoZSB1c2VyIHRvIGpvaW4gdGhpcyBleHByZXNzaW9uXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGFuY2hvckNvaW5UZXJtLCBtb3ZpbmdDb2luVGVybSApIHtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtDb2luVGVybX1cclxuICAgIHRoaXMuYW5jaG9yQ29pblRlcm0gPSBhbmNob3JDb2luVGVybTtcclxuICAgIHRoaXMubW92aW5nQ29pblRlcm0gPSBtb3ZpbmdDb2luVGVybTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtib29sZWFufVxyXG4gICAgdGhpcy5hbmNob3JPbkxlZnQgPSBhbmNob3JDb2luVGVybS5wb3NpdGlvblByb3BlcnR5LmdldCgpLnggPCBtb3ZpbmdDb2luVGVybS5wb3NpdGlvblByb3BlcnR5LmdldCgpLng7XHJcblxyXG4gICAgLy8gc2V0IHRoZSBmbGFnIGluZGljYXRpbmcgdGhhdCBicmVha2luZyBhcGFydCBpcyBzdXBwcmVzc2VkXHJcbiAgICBhbmNob3JDb2luVGVybS5icmVha0FwYXJ0QWxsb3dlZFByb3BlcnR5LnNldCggZmFsc2UgKTtcclxuICAgIG1vdmluZ0NvaW5UZXJtLmJyZWFrQXBhcnRBbGxvd2VkUHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmV0dXJucyB0cnVlIGlmIHRoaXMgZXhwcmVzc2lvbiBoaW50IGluY2x1ZGVzIHRoZSBwcm92aWRlZCBjb2luIHRlcm1cclxuICAgKiBAcGFyYW0ge0NvaW5UZXJtfSBjb2luVGVybVxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjb250YWluc0NvaW5UZXJtKCBjb2luVGVybSApIHtcclxuICAgIHJldHVybiAoIGNvaW5UZXJtID09PSB0aGlzLmFuY2hvckNvaW5UZXJtIHx8IGNvaW5UZXJtID09PSB0aGlzLm1vdmluZ0NvaW5UZXJtICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0V4cHJlc3Npb25IaW50fSBvdGhlckV4cHJlc3Npb25IaW50XHJcbiAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGVxdWFscyggb3RoZXJFeHByZXNzaW9uSGludCApIHtcclxuICAgIHJldHVybiAoIG90aGVyRXhwcmVzc2lvbkhpbnQuYW5jaG9yQ29pblRlcm0gPT09IHRoaXMuYW5jaG9yQ29pblRlcm0gJiZcclxuICAgICAgICAgICAgIG90aGVyRXhwcmVzc2lvbkhpbnQubW92aW5nQ29pblRlcm0gPT09IHRoaXMubW92aW5nQ29pblRlcm0gJiZcclxuICAgICAgICAgICAgIG90aGVyRXhwcmVzc2lvbkhpbnQuYW5jaG9yT25MZWZ0ID09PSB0aGlzLmFuY2hvck9uTGVmdFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFyIHRoaXMgZXhwcmVzc2lvbiBoaW50LCBnZW5lcmFsbHkgZG9uZSBqdXN0IGJlZm9yZSByZW1vdmluZyBpdCBmcm9tIHRoZSBtb2RlbC4gIFRoaXMgdXBkYXRlZCB0aGUgc3RhdGUgb2ZcclxuICAgKiBhbnkgY29pbiB0ZXJtcyB0aGF0IHdlcmUgYWZmZWN0ZWQgYnkgdGhlIGV4aXN0ZW5jZSBvZiB0aGUgaGludC5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY2xlYXIoKSB7XHJcbiAgICB0aGlzLmFuY2hvckNvaW5UZXJtLmJyZWFrQXBhcnRBbGxvd2VkUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcbiAgICB0aGlzLm1vdmluZ0NvaW5UZXJtLmJyZWFrQXBhcnRBbGxvd2VkUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHByZXNzaW9uRXhjaGFuZ2UucmVnaXN0ZXIoICdFeHByZXNzaW9uSGludCcsIEV4cHJlc3Npb25IaW50ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFeHByZXNzaW9uSGludDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0Esa0JBQWtCLE1BQU0sNkJBQTZCO0FBRTVELE1BQU1DLGNBQWMsQ0FBQztFQUVuQjtBQUNGO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxjQUFjLEVBQUVDLGNBQWMsRUFBRztJQUU1QztJQUNBLElBQUksQ0FBQ0QsY0FBYyxHQUFHQSxjQUFjO0lBQ3BDLElBQUksQ0FBQ0MsY0FBYyxHQUFHQSxjQUFjOztJQUVwQztJQUNBLElBQUksQ0FBQ0MsWUFBWSxHQUFHRixjQUFjLENBQUNHLGdCQUFnQixDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDQyxDQUFDLEdBQUdKLGNBQWMsQ0FBQ0UsZ0JBQWdCLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUNDLENBQUM7O0lBRXJHO0lBQ0FMLGNBQWMsQ0FBQ00seUJBQXlCLENBQUNDLEdBQUcsQ0FBRSxLQUFNLENBQUM7SUFDckROLGNBQWMsQ0FBQ0sseUJBQXlCLENBQUNDLEdBQUcsQ0FBRSxLQUFNLENBQUM7RUFDdkQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLGdCQUFnQkEsQ0FBRUMsUUFBUSxFQUFHO0lBQzNCLE9BQVNBLFFBQVEsS0FBSyxJQUFJLENBQUNULGNBQWMsSUFBSVMsUUFBUSxLQUFLLElBQUksQ0FBQ1IsY0FBYztFQUMvRTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VTLE1BQU1BLENBQUVDLG1CQUFtQixFQUFHO0lBQzVCLE9BQVNBLG1CQUFtQixDQUFDWCxjQUFjLEtBQUssSUFBSSxDQUFDQSxjQUFjLElBQzFEVyxtQkFBbUIsQ0FBQ1YsY0FBYyxLQUFLLElBQUksQ0FBQ0EsY0FBYyxJQUMxRFUsbUJBQW1CLENBQUNULFlBQVksS0FBSyxJQUFJLENBQUNBLFlBQVk7RUFFakU7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFVSxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNaLGNBQWMsQ0FBQ00seUJBQXlCLENBQUNDLEdBQUcsQ0FBRSxJQUFLLENBQUM7SUFDekQsSUFBSSxDQUFDTixjQUFjLENBQUNLLHlCQUF5QixDQUFDQyxHQUFHLENBQUUsSUFBSyxDQUFDO0VBQzNEO0FBQ0Y7QUFFQVYsa0JBQWtCLENBQUNnQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVmLGNBQWUsQ0FBQztBQUUvRCxlQUFlQSxjQUFjIn0=