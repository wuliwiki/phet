// Copyright 2020-2022, University of Colorado Boulder

/**
 * SubstanceSelectorNode is a node with a label on the left and an icon - generally something that represents and atom
 * or molecule - on the right.  It maintains its initial width if the width of the label changes.
 */

import { Color, HBox, Line } from '../../../../scenery/js/imports.js';
import statesOfMatter from '../../statesOfMatter.js';
class SubstanceSelectorNode extends HBox {
  /**
   * @param {Node} label
   * @param {Node} icon
   * @param {number} width - width of this selector in screen coordinates
   */
  constructor(label, icon, width) {
    // set up the initial horizontal box
    const initialSpacerWidth = width - label.width - icon.width;
    assert && assert(initialSpacerWidth > 0);
    const spacer = new Line(0, 0, initialSpacerWidth, 0, {
      stroke: Color.TRANSPARENT // it can be helpful during debugging to changes this to a visible color
    });

    super({
      children: [label, spacer, icon]
    });

    // resize the spacer if the label size changes
    const updateSpacer = () => {
      const newSpacerWidth = Math.max(width - label.width - icon.width, 0.1);
      spacer.setX2(newSpacerWidth);
      this.updateLayout();
    };
    label.localBoundsProperty.lazyLink(updateSpacer);

    // dispose function
    this.disposeSubstanceSelectorNode = () => {
      label.localBoundsProperty.unlink(updateSpacer);
    };
  }

  /**
   * release all memory to avoid memory leaks
   * @public
   */
  dispose() {
    this.disposeSubstanceSelectorNode();
    super.dispose();
  }
}
statesOfMatter.register('SubstanceSelectorNode', SubstanceSelectorNode);
export default SubstanceSelectorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb2xvciIsIkhCb3giLCJMaW5lIiwic3RhdGVzT2ZNYXR0ZXIiLCJTdWJzdGFuY2VTZWxlY3Rvck5vZGUiLCJjb25zdHJ1Y3RvciIsImxhYmVsIiwiaWNvbiIsIndpZHRoIiwiaW5pdGlhbFNwYWNlcldpZHRoIiwiYXNzZXJ0Iiwic3BhY2VyIiwic3Ryb2tlIiwiVFJBTlNQQVJFTlQiLCJjaGlsZHJlbiIsInVwZGF0ZVNwYWNlciIsIm5ld1NwYWNlcldpZHRoIiwiTWF0aCIsIm1heCIsInNldFgyIiwidXBkYXRlTGF5b3V0IiwibG9jYWxCb3VuZHNQcm9wZXJ0eSIsImxhenlMaW5rIiwiZGlzcG9zZVN1YnN0YW5jZVNlbGVjdG9yTm9kZSIsInVubGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN1YnN0YW5jZVNlbGVjdG9yTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTdWJzdGFuY2VTZWxlY3Rvck5vZGUgaXMgYSBub2RlIHdpdGggYSBsYWJlbCBvbiB0aGUgbGVmdCBhbmQgYW4gaWNvbiAtIGdlbmVyYWxseSBzb21ldGhpbmcgdGhhdCByZXByZXNlbnRzIGFuZCBhdG9tXHJcbiAqIG9yIG1vbGVjdWxlIC0gb24gdGhlIHJpZ2h0LiAgSXQgbWFpbnRhaW5zIGl0cyBpbml0aWFsIHdpZHRoIGlmIHRoZSB3aWR0aCBvZiB0aGUgbGFiZWwgY2hhbmdlcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDb2xvciwgSEJveCwgTGluZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzdGF0ZXNPZk1hdHRlciBmcm9tICcuLi8uLi9zdGF0ZXNPZk1hdHRlci5qcyc7XHJcblxyXG5jbGFzcyBTdWJzdGFuY2VTZWxlY3Rvck5vZGUgZXh0ZW5kcyBIQm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtOb2RlfSBsYWJlbFxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gaWNvblxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIHdpZHRoIG9mIHRoaXMgc2VsZWN0b3IgaW4gc2NyZWVuIGNvb3JkaW5hdGVzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGxhYmVsLCBpY29uLCB3aWR0aCApIHtcclxuXHJcbiAgICAvLyBzZXQgdXAgdGhlIGluaXRpYWwgaG9yaXpvbnRhbCBib3hcclxuICAgIGNvbnN0IGluaXRpYWxTcGFjZXJXaWR0aCA9IHdpZHRoIC0gbGFiZWwud2lkdGggLSBpY29uLndpZHRoO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggaW5pdGlhbFNwYWNlcldpZHRoID4gMCApO1xyXG4gICAgY29uc3Qgc3BhY2VyID0gbmV3IExpbmUoIDAsIDAsIGluaXRpYWxTcGFjZXJXaWR0aCwgMCwge1xyXG4gICAgICBzdHJva2U6IENvbG9yLlRSQU5TUEFSRU5UIC8vIGl0IGNhbiBiZSBoZWxwZnVsIGR1cmluZyBkZWJ1Z2dpbmcgdG8gY2hhbmdlcyB0aGlzIHRvIGEgdmlzaWJsZSBjb2xvclxyXG4gICAgfSApO1xyXG4gICAgc3VwZXIoIHtcclxuICAgICAgY2hpbGRyZW46IFsgbGFiZWwsIHNwYWNlciwgaWNvbiBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gcmVzaXplIHRoZSBzcGFjZXIgaWYgdGhlIGxhYmVsIHNpemUgY2hhbmdlc1xyXG4gICAgY29uc3QgdXBkYXRlU3BhY2VyID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBuZXdTcGFjZXJXaWR0aCA9IE1hdGgubWF4KCB3aWR0aCAtIGxhYmVsLndpZHRoIC0gaWNvbi53aWR0aCwgMC4xICk7XHJcbiAgICAgIHNwYWNlci5zZXRYMiggbmV3U3BhY2VyV2lkdGggKTtcclxuICAgICAgdGhpcy51cGRhdGVMYXlvdXQoKTtcclxuICAgIH07XHJcbiAgICBsYWJlbC5sb2NhbEJvdW5kc1Byb3BlcnR5LmxhenlMaW5rKCB1cGRhdGVTcGFjZXIgKTtcclxuXHJcbiAgICAvLyBkaXNwb3NlIGZ1bmN0aW9uXHJcbiAgICB0aGlzLmRpc3Bvc2VTdWJzdGFuY2VTZWxlY3Rvck5vZGUgPSAoKSA9PiB7XHJcbiAgICAgIGxhYmVsLmxvY2FsQm91bmRzUHJvcGVydHkudW5saW5rKCB1cGRhdGVTcGFjZXIgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiByZWxlYXNlIGFsbCBtZW1vcnkgdG8gYXZvaWQgbWVtb3J5IGxlYWtzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmRpc3Bvc2VTdWJzdGFuY2VTZWxlY3Rvck5vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnN0YXRlc09mTWF0dGVyLnJlZ2lzdGVyKCAnU3Vic3RhbmNlU2VsZWN0b3JOb2RlJywgU3Vic3RhbmNlU2VsZWN0b3JOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFN1YnN0YW5jZVNlbGVjdG9yTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3JFLE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFFcEQsTUFBTUMscUJBQXFCLFNBQVNILElBQUksQ0FBQztFQUV2QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUc7SUFFaEM7SUFDQSxNQUFNQyxrQkFBa0IsR0FBR0QsS0FBSyxHQUFHRixLQUFLLENBQUNFLEtBQUssR0FBR0QsSUFBSSxDQUFDQyxLQUFLO0lBQzNERSxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsa0JBQWtCLEdBQUcsQ0FBRSxDQUFDO0lBQzFDLE1BQU1FLE1BQU0sR0FBRyxJQUFJVCxJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRU8sa0JBQWtCLEVBQUUsQ0FBQyxFQUFFO01BQ3BERyxNQUFNLEVBQUVaLEtBQUssQ0FBQ2EsV0FBVyxDQUFDO0lBQzVCLENBQUUsQ0FBQzs7SUFDSCxLQUFLLENBQUU7TUFDTEMsUUFBUSxFQUFFLENBQUVSLEtBQUssRUFBRUssTUFBTSxFQUFFSixJQUFJO0lBQ2pDLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1RLFlBQVksR0FBR0EsQ0FBQSxLQUFNO01BQ3pCLE1BQU1DLGNBQWMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUVWLEtBQUssR0FBR0YsS0FBSyxDQUFDRSxLQUFLLEdBQUdELElBQUksQ0FBQ0MsS0FBSyxFQUFFLEdBQUksQ0FBQztNQUN4RUcsTUFBTSxDQUFDUSxLQUFLLENBQUVILGNBQWUsQ0FBQztNQUM5QixJQUFJLENBQUNJLFlBQVksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFDRGQsS0FBSyxDQUFDZSxtQkFBbUIsQ0FBQ0MsUUFBUSxDQUFFUCxZQUFhLENBQUM7O0lBRWxEO0lBQ0EsSUFBSSxDQUFDUSw0QkFBNEIsR0FBRyxNQUFNO01BQ3hDakIsS0FBSyxDQUFDZSxtQkFBbUIsQ0FBQ0csTUFBTSxDQUFFVCxZQUFhLENBQUM7SUFDbEQsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VVLE9BQU9BLENBQUEsRUFBRztJQUNSLElBQUksQ0FBQ0YsNEJBQTRCLENBQUMsQ0FBQztJQUNuQyxLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXRCLGNBQWMsQ0FBQ3VCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRXRCLHFCQUFzQixDQUFDO0FBQ3pFLGVBQWVBLHFCQUFxQiJ9