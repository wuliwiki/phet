// Copyright 2014-2021, University of Colorado Boulder

/**
 * This class provides the value of sigma for Lennard-Jones calculations.  The
 * value of sigma is in units of distance, and is (apparently) different for
 * each different pair of atom types.
 *
 * @author John Blanco
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import statesOfMatter from '../../statesOfMatter.js';
import SOMConstants from '../SOMConstants.js';
import AtomType from './AtomType.js';

// static object (no constructor)
const SigmaTable = {
  /**
   * Get the value of sigma, in picometers, for the atom types specified.
   * @public
   * @param {AtomType} atomType1
   * @param {AtomType} atomType2
   * @returns {number}
   */
  getSigma: (atomType1, atomType2) => {
    if (atomType1 === atomType2) {
      // Heterogeneous pair of atoms.
      if (atomType1 === AtomType.NEON) {
        // Source: Noah P, who got it from Robert Parsons.
        return 308;
      } else if (atomType1 === AtomType.ARGON) {
        // Source: Noah P, who got it from Robert Parsons.
        return 376;
      } else if (atomType1 === AtomType.OXYGEN) {
        // "Hollywoded" value to be smaller than other values, but not really as small as bonded oxygen
        return 200;
      } else if (atomType1 === AtomType.ADJUSTABLE) {
        return SOMConstants.ADJUSTABLE_ATTRACTION_DEFAULT_RADIUS * 2;
      } else {
        assert && assert(false, `Error: Interaction potential not available for requested atom: ${atomType1}`);
        return SOMConstants.MAX_EPSILON / 2;
      }
    } else {
      if (atomType1 === AtomType.NEON && atomType2 === AtomType.ARGON || atomType1 === AtomType.ARGON && atomType2 === AtomType.NEON) {
        // Source: Noah P, who got it from Robert Parsons.
        return 343;
      } else if (atomType1 === AtomType.NEON && atomType2 === AtomType.OXYGEN || atomType1 === AtomType.OXYGEN && atomType2 === AtomType.NEON) {
        // Don't have a value for this, Noah P says use average of the diameters.
        return SOMConstants.NEON_RADIUS + SOMConstants.OXYGEN_RADIUS;
      } else if (atomType1 === AtomType.ARGON && atomType2 === AtomType.OXYGEN || atomType1 === AtomType.OXYGEN && atomType2 === AtomType.ARGON) {
        // Don't have a value for this, Noah P says use average of the diameters.
        return SOMConstants.ARGON_RADIUS + SOMConstants.OXYGEN_RADIUS;
      } else if (atomType1 === AtomType.ADJUSTABLE || atomType2 === AtomType.ADJUSTABLE) {
        // In this case, where one of the atoms is adjustable, we just use a default value.
        return SOMConstants.ADJUSTABLE_ATTRACTION_DEFAULT_RADIUS * 2;
      } else {
        assert && assert(false, `Error: sigma data not available for this combination of molecules: ${atomType1}, ${atomType2}`);
        return (SOMConstants.MAX_SIGMA - SOMConstants.MIN_SIGMA) / 2;
      }
    }
  }
};
statesOfMatter.register('SigmaTable', SigmaTable);
export default SigmaTable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGF0ZXNPZk1hdHRlciIsIlNPTUNvbnN0YW50cyIsIkF0b21UeXBlIiwiU2lnbWFUYWJsZSIsImdldFNpZ21hIiwiYXRvbVR5cGUxIiwiYXRvbVR5cGUyIiwiTkVPTiIsIkFSR09OIiwiT1hZR0VOIiwiQURKVVNUQUJMRSIsIkFESlVTVEFCTEVfQVRUUkFDVElPTl9ERUZBVUxUX1JBRElVUyIsImFzc2VydCIsIk1BWF9FUFNJTE9OIiwiTkVPTl9SQURJVVMiLCJPWFlHRU5fUkFESVVTIiwiQVJHT05fUkFESVVTIiwiTUFYX1NJR01BIiwiTUlOX1NJR01BIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTaWdtYVRhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgdGhlIHZhbHVlIG9mIHNpZ21hIGZvciBMZW5uYXJkLUpvbmVzIGNhbGN1bGF0aW9ucy4gIFRoZVxyXG4gKiB2YWx1ZSBvZiBzaWdtYSBpcyBpbiB1bml0cyBvZiBkaXN0YW5jZSwgYW5kIGlzIChhcHBhcmVudGx5KSBkaWZmZXJlbnQgZm9yXHJcbiAqIGVhY2ggZGlmZmVyZW50IHBhaXIgb2YgYXRvbSB0eXBlcy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIFNpZGRoYXJ0aGEgQ2hpbnRoYXBhbGx5IChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHN0YXRlc09mTWF0dGVyIGZyb20gJy4uLy4uL3N0YXRlc09mTWF0dGVyLmpzJztcclxuaW1wb3J0IFNPTUNvbnN0YW50cyBmcm9tICcuLi9TT01Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgQXRvbVR5cGUgZnJvbSAnLi9BdG9tVHlwZS5qcyc7XHJcblxyXG4vLyBzdGF0aWMgb2JqZWN0IChubyBjb25zdHJ1Y3RvcilcclxuY29uc3QgU2lnbWFUYWJsZSA9IHtcclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiBzaWdtYSwgaW4gcGljb21ldGVycywgZm9yIHRoZSBhdG9tIHR5cGVzIHNwZWNpZmllZC5cclxuICAgKiBAcHVibGljXHJcbiAgICogQHBhcmFtIHtBdG9tVHlwZX0gYXRvbVR5cGUxXHJcbiAgICogQHBhcmFtIHtBdG9tVHlwZX0gYXRvbVR5cGUyXHJcbiAgICogQHJldHVybnMge251bWJlcn1cclxuICAgKi9cclxuICBnZXRTaWdtYTogKCBhdG9tVHlwZTEsIGF0b21UeXBlMiApID0+IHtcclxuICAgIGlmICggYXRvbVR5cGUxID09PSBhdG9tVHlwZTIgKSB7XHJcbiAgICAgIC8vIEhldGVyb2dlbmVvdXMgcGFpciBvZiBhdG9tcy5cclxuICAgICAgaWYgKCBhdG9tVHlwZTEgPT09IEF0b21UeXBlLk5FT04gKSB7XHJcbiAgICAgICAgLy8gU291cmNlOiBOb2FoIFAsIHdobyBnb3QgaXQgZnJvbSBSb2JlcnQgUGFyc29ucy5cclxuICAgICAgICByZXR1cm4gMzA4O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBhdG9tVHlwZTEgPT09IEF0b21UeXBlLkFSR09OICkge1xyXG4gICAgICAgIC8vIFNvdXJjZTogTm9haCBQLCB3aG8gZ290IGl0IGZyb20gUm9iZXJ0IFBhcnNvbnMuXHJcbiAgICAgICAgcmV0dXJuIDM3NjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggYXRvbVR5cGUxID09PSBBdG9tVHlwZS5PWFlHRU4gKSB7XHJcbiAgICAgICAgLy8gXCJIb2xseXdvZGVkXCIgdmFsdWUgdG8gYmUgc21hbGxlciB0aGFuIG90aGVyIHZhbHVlcywgYnV0IG5vdCByZWFsbHkgYXMgc21hbGwgYXMgYm9uZGVkIG94eWdlblxyXG4gICAgICAgIHJldHVybiAyMDA7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIGF0b21UeXBlMSA9PT0gQXRvbVR5cGUuQURKVVNUQUJMRSApIHtcclxuICAgICAgICByZXR1cm4gU09NQ29uc3RhbnRzLkFESlVTVEFCTEVfQVRUUkFDVElPTl9ERUZBVUxUX1JBRElVUyAqIDI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsIGBFcnJvcjogSW50ZXJhY3Rpb24gcG90ZW50aWFsIG5vdCBhdmFpbGFibGUgZm9yIHJlcXVlc3RlZCBhdG9tOiAke2F0b21UeXBlMX1gICk7XHJcbiAgICAgICAgcmV0dXJuIFNPTUNvbnN0YW50cy5NQVhfRVBTSUxPTiAvIDI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZiAoICggKCBhdG9tVHlwZTEgPT09IEF0b21UeXBlLk5FT04gKSAmJiAoIGF0b21UeXBlMiA9PT0gQXRvbVR5cGUuQVJHT04gKSApIHx8XHJcbiAgICAgICAgICAgKCBhdG9tVHlwZTEgPT09IEF0b21UeXBlLkFSR09OICkgJiYgKCBhdG9tVHlwZTIgPT09IEF0b21UeXBlLk5FT04gKSApIHtcclxuICAgICAgICAvLyBTb3VyY2U6IE5vYWggUCwgd2hvIGdvdCBpdCBmcm9tIFJvYmVydCBQYXJzb25zLlxyXG4gICAgICAgIHJldHVybiAzNDM7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoICggKCBhdG9tVHlwZTEgPT09IEF0b21UeXBlLk5FT04gKSAmJiAoIGF0b21UeXBlMiA9PT0gQXRvbVR5cGUuT1hZR0VOICkgKSB8fFxyXG4gICAgICAgICAgICAgICAgKCBhdG9tVHlwZTEgPT09IEF0b21UeXBlLk9YWUdFTiApICYmICggYXRvbVR5cGUyID09PSBBdG9tVHlwZS5ORU9OICkgKSB7XHJcbiAgICAgICAgLy8gRG9uJ3QgaGF2ZSBhIHZhbHVlIGZvciB0aGlzLCBOb2FoIFAgc2F5cyB1c2UgYXZlcmFnZSBvZiB0aGUgZGlhbWV0ZXJzLlxyXG4gICAgICAgIHJldHVybiAoIFNPTUNvbnN0YW50cy5ORU9OX1JBRElVUyArIFNPTUNvbnN0YW50cy5PWFlHRU5fUkFESVVTICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoICggKCBhdG9tVHlwZTEgPT09IEF0b21UeXBlLkFSR09OICkgJiYgKCBhdG9tVHlwZTIgPT09IEF0b21UeXBlLk9YWUdFTiApICkgfHxcclxuICAgICAgICAgICAgICAgICggYXRvbVR5cGUxID09PSBBdG9tVHlwZS5PWFlHRU4gKSAmJiAoIGF0b21UeXBlMiA9PT0gQXRvbVR5cGUuQVJHT04gKSApIHtcclxuICAgICAgICAvLyBEb24ndCBoYXZlIGEgdmFsdWUgZm9yIHRoaXMsIE5vYWggUCBzYXlzIHVzZSBhdmVyYWdlIG9mIHRoZSBkaWFtZXRlcnMuXHJcbiAgICAgICAgcmV0dXJuICggU09NQ29uc3RhbnRzLkFSR09OX1JBRElVUyArIFNPTUNvbnN0YW50cy5PWFlHRU5fUkFESVVTICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoICggYXRvbVR5cGUxID09PSBBdG9tVHlwZS5BREpVU1RBQkxFICkgfHwgKCBhdG9tVHlwZTIgPT09IEF0b21UeXBlLkFESlVTVEFCTEUgKSApIHtcclxuICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIHdoZXJlIG9uZSBvZiB0aGUgYXRvbXMgaXMgYWRqdXN0YWJsZSwgd2UganVzdCB1c2UgYSBkZWZhdWx0IHZhbHVlLlxyXG4gICAgICAgIHJldHVybiBTT01Db25zdGFudHMuQURKVVNUQUJMRV9BVFRSQUNUSU9OX0RFRkFVTFRfUkFESVVTICogMjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgYEVycm9yOiBzaWdtYSBkYXRhIG5vdCBhdmFpbGFibGUgZm9yIHRoaXMgY29tYmluYXRpb24gb2YgbW9sZWN1bGVzOiAke2F0b21UeXBlMVxyXG4gICAgICAgIH0sICR7YXRvbVR5cGUyfWAgKTtcclxuICAgICAgICByZXR1cm4gKCBTT01Db25zdGFudHMuTUFYX1NJR01BIC0gU09NQ29uc3RhbnRzLk1JTl9TSUdNQSApIC8gMjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbnN0YXRlc09mTWF0dGVyLnJlZ2lzdGVyKCAnU2lnbWFUYWJsZScsIFNpZ21hVGFibGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZ21hVGFibGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MsWUFBWSxNQUFNLG9CQUFvQjtBQUM3QyxPQUFPQyxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQSxNQUFNQyxVQUFVLEdBQUc7RUFFakI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsUUFBUSxFQUFFQSxDQUFFQyxTQUFTLEVBQUVDLFNBQVMsS0FBTTtJQUNwQyxJQUFLRCxTQUFTLEtBQUtDLFNBQVMsRUFBRztNQUM3QjtNQUNBLElBQUtELFNBQVMsS0FBS0gsUUFBUSxDQUFDSyxJQUFJLEVBQUc7UUFDakM7UUFDQSxPQUFPLEdBQUc7TUFDWixDQUFDLE1BQ0ksSUFBS0YsU0FBUyxLQUFLSCxRQUFRLENBQUNNLEtBQUssRUFBRztRQUN2QztRQUNBLE9BQU8sR0FBRztNQUNaLENBQUMsTUFDSSxJQUFLSCxTQUFTLEtBQUtILFFBQVEsQ0FBQ08sTUFBTSxFQUFHO1FBQ3hDO1FBQ0EsT0FBTyxHQUFHO01BQ1osQ0FBQyxNQUNJLElBQUtKLFNBQVMsS0FBS0gsUUFBUSxDQUFDUSxVQUFVLEVBQUc7UUFDNUMsT0FBT1QsWUFBWSxDQUFDVSxvQ0FBb0MsR0FBRyxDQUFDO01BQzlELENBQUMsTUFDSTtRQUNIQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUcsa0VBQWlFUCxTQUFVLEVBQUUsQ0FBQztRQUN4RyxPQUFPSixZQUFZLENBQUNZLFdBQVcsR0FBRyxDQUFDO01BQ3JDO0lBQ0YsQ0FBQyxNQUNJO01BQ0gsSUFBU1IsU0FBUyxLQUFLSCxRQUFRLENBQUNLLElBQUksSUFBUUQsU0FBUyxLQUFLSixRQUFRLENBQUNNLEtBQU8sSUFDbkVILFNBQVMsS0FBS0gsUUFBUSxDQUFDTSxLQUFLLElBQVFGLFNBQVMsS0FBS0osUUFBUSxDQUFDSyxJQUFNLEVBQUc7UUFDekU7UUFDQSxPQUFPLEdBQUc7TUFDWixDQUFDLE1BQ0ksSUFBU0YsU0FBUyxLQUFLSCxRQUFRLENBQUNLLElBQUksSUFBUUQsU0FBUyxLQUFLSixRQUFRLENBQUNPLE1BQVEsSUFDcEVKLFNBQVMsS0FBS0gsUUFBUSxDQUFDTyxNQUFNLElBQVFILFNBQVMsS0FBS0osUUFBUSxDQUFDSyxJQUFNLEVBQUc7UUFDL0U7UUFDQSxPQUFTTixZQUFZLENBQUNhLFdBQVcsR0FBR2IsWUFBWSxDQUFDYyxhQUFhO01BQ2hFLENBQUMsTUFDSSxJQUFTVixTQUFTLEtBQUtILFFBQVEsQ0FBQ00sS0FBSyxJQUFRRixTQUFTLEtBQUtKLFFBQVEsQ0FBQ08sTUFBUSxJQUNyRUosU0FBUyxLQUFLSCxRQUFRLENBQUNPLE1BQU0sSUFBUUgsU0FBUyxLQUFLSixRQUFRLENBQUNNLEtBQU8sRUFBRztRQUNoRjtRQUNBLE9BQVNQLFlBQVksQ0FBQ2UsWUFBWSxHQUFHZixZQUFZLENBQUNjLGFBQWE7TUFDakUsQ0FBQyxNQUNJLElBQU9WLFNBQVMsS0FBS0gsUUFBUSxDQUFDUSxVQUFVLElBQVFKLFNBQVMsS0FBS0osUUFBUSxDQUFDUSxVQUFZLEVBQUc7UUFDekY7UUFDQSxPQUFPVCxZQUFZLENBQUNVLG9DQUFvQyxHQUFHLENBQUM7TUFDOUQsQ0FBQyxNQUNJO1FBQ0hDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRyxzRUFBcUVQLFNBQzlGLEtBQUlDLFNBQVUsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sQ0FBRUwsWUFBWSxDQUFDZ0IsU0FBUyxHQUFHaEIsWUFBWSxDQUFDaUIsU0FBUyxJQUFLLENBQUM7TUFDaEU7SUFDRjtFQUNGO0FBQ0YsQ0FBQztBQUVEbEIsY0FBYyxDQUFDbUIsUUFBUSxDQUFFLFlBQVksRUFBRWhCLFVBQVcsQ0FBQztBQUVuRCxlQUFlQSxVQUFVIn0=