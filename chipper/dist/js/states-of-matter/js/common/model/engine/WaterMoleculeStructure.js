// Copyright 2014-2020, University of Colorado Boulder

/**
 * This object provides information about the structure of a water molecule,
 * i.e. the spatial and angular relationships between the atoms that comprise
 * the molecule.
 *
 * @author John Blanco
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import statesOfMatter from '../../../statesOfMatter.js';
import SOMConstants from '../../SOMConstants.js';
const moleculeStructureX = [];
const moleculeStructureY = [];

// Initialize the data that defines the molecular structure of the water molecule.  This defines the distances in the
// x and y dimensions from the center of mass when the rotational angle is zero.
moleculeStructureX[0] = 0;
moleculeStructureY[0] = 0;
moleculeStructureX[1] = SOMConstants.DISTANCE_FROM_OXYGEN_TO_HYDROGEN;
moleculeStructureY[1] = 0;
moleculeStructureX[2] = SOMConstants.DISTANCE_FROM_OXYGEN_TO_HYDROGEN * Math.cos(SOMConstants.THETA_HOH);
moleculeStructureY[2] = SOMConstants.DISTANCE_FROM_OXYGEN_TO_HYDROGEN * Math.sin(SOMConstants.THETA_HOH);
const xcm0 = (moleculeStructureX[0] + 0.25 * moleculeStructureX[1] + 0.25 * moleculeStructureX[2]) / 1.5;
const ycm0 = (moleculeStructureY[0] + 0.25 * moleculeStructureY[1] + 0.25 * moleculeStructureY[2]) / 1.5;
for (let i = 0; i < 3; i++) {
  moleculeStructureX[i] -= xcm0;
  moleculeStructureY[i] -= ycm0;
}
const rotationalInertia = Math.pow(moleculeStructureX[0], 2) + Math.pow(moleculeStructureY[0], 2) + 0.25 * (Math.pow(moleculeStructureX[1], 2) + Math.pow(moleculeStructureY[1], 2)) + 0.25 * (Math.pow(moleculeStructureX[2], 2) + Math.pow(moleculeStructureY[2], 2));
const WaterMoleculeStructure = {
  moleculeStructureX: moleculeStructureX,
  moleculeStructureY: moleculeStructureY,
  rotationalInertia: rotationalInertia
};
statesOfMatter.register('WaterMoleculeStructure', WaterMoleculeStructure);
export default WaterMoleculeStructure;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGF0ZXNPZk1hdHRlciIsIlNPTUNvbnN0YW50cyIsIm1vbGVjdWxlU3RydWN0dXJlWCIsIm1vbGVjdWxlU3RydWN0dXJlWSIsIkRJU1RBTkNFX0ZST01fT1hZR0VOX1RPX0hZRFJPR0VOIiwiTWF0aCIsImNvcyIsIlRIRVRBX0hPSCIsInNpbiIsInhjbTAiLCJ5Y20wIiwiaSIsInJvdGF0aW9uYWxJbmVydGlhIiwicG93IiwiV2F0ZXJNb2xlY3VsZVN0cnVjdHVyZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F0ZXJNb2xlY3VsZVN0cnVjdHVyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIG9iamVjdCBwcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3RydWN0dXJlIG9mIGEgd2F0ZXIgbW9sZWN1bGUsXHJcbiAqIGkuZS4gdGhlIHNwYXRpYWwgYW5kIGFuZ3VsYXIgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIHRoZSBhdG9tcyB0aGF0IGNvbXByaXNlXHJcbiAqIHRoZSBtb2xlY3VsZS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIFNpZGRoYXJ0aGEgQ2hpbnRoYXBhbGx5IChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHN0YXRlc09mTWF0dGVyIGZyb20gJy4uLy4uLy4uL3N0YXRlc09mTWF0dGVyLmpzJztcclxuaW1wb3J0IFNPTUNvbnN0YW50cyBmcm9tICcuLi8uLi9TT01Db25zdGFudHMuanMnO1xyXG5cclxuY29uc3QgbW9sZWN1bGVTdHJ1Y3R1cmVYID0gW107XHJcbmNvbnN0IG1vbGVjdWxlU3RydWN0dXJlWSA9IFtdO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSB0aGUgZGF0YSB0aGF0IGRlZmluZXMgdGhlIG1vbGVjdWxhciBzdHJ1Y3R1cmUgb2YgdGhlIHdhdGVyIG1vbGVjdWxlLiAgVGhpcyBkZWZpbmVzIHRoZSBkaXN0YW5jZXMgaW4gdGhlXHJcbi8vIHggYW5kIHkgZGltZW5zaW9ucyBmcm9tIHRoZSBjZW50ZXIgb2YgbWFzcyB3aGVuIHRoZSByb3RhdGlvbmFsIGFuZ2xlIGlzIHplcm8uXHJcbm1vbGVjdWxlU3RydWN0dXJlWFsgMCBdID0gMDtcclxubW9sZWN1bGVTdHJ1Y3R1cmVZWyAwIF0gPSAwO1xyXG5tb2xlY3VsZVN0cnVjdHVyZVhbIDEgXSA9IFNPTUNvbnN0YW50cy5ESVNUQU5DRV9GUk9NX09YWUdFTl9UT19IWURST0dFTjtcclxubW9sZWN1bGVTdHJ1Y3R1cmVZWyAxIF0gPSAwO1xyXG5tb2xlY3VsZVN0cnVjdHVyZVhbIDIgXSA9IFNPTUNvbnN0YW50cy5ESVNUQU5DRV9GUk9NX09YWUdFTl9UT19IWURST0dFTiAqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3MoIFNPTUNvbnN0YW50cy5USEVUQV9IT0ggKTtcclxubW9sZWN1bGVTdHJ1Y3R1cmVZWyAyIF0gPSBTT01Db25zdGFudHMuRElTVEFOQ0VfRlJPTV9PWFlHRU5fVE9fSFlEUk9HRU4gKlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKCBTT01Db25zdGFudHMuVEhFVEFfSE9IICk7XHJcbmNvbnN0IHhjbTAgPSAoIG1vbGVjdWxlU3RydWN0dXJlWFsgMCBdICsgMC4yNSAqIG1vbGVjdWxlU3RydWN0dXJlWFsgMSBdICsgMC4yNSAqIG1vbGVjdWxlU3RydWN0dXJlWFsgMiBdICkgLyAxLjU7XHJcbmNvbnN0IHljbTAgPSAoIG1vbGVjdWxlU3RydWN0dXJlWVsgMCBdICsgMC4yNSAqIG1vbGVjdWxlU3RydWN0dXJlWVsgMSBdICsgMC4yNSAqIG1vbGVjdWxlU3RydWN0dXJlWVsgMiBdICkgLyAxLjU7XHJcbmZvciAoIGxldCBpID0gMDsgaSA8IDM7IGkrKyApIHtcclxuICBtb2xlY3VsZVN0cnVjdHVyZVhbIGkgXSAtPSB4Y20wO1xyXG4gIG1vbGVjdWxlU3RydWN0dXJlWVsgaSBdIC09IHljbTA7XHJcbn1cclxuXHJcbmNvbnN0IHJvdGF0aW9uYWxJbmVydGlhID0gKCBNYXRoLnBvdyggbW9sZWN1bGVTdHJ1Y3R1cmVYWyAwIF0sIDIgKSArIE1hdGgucG93KCBtb2xlY3VsZVN0cnVjdHVyZVlbIDAgXSwgMiApICkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDAuMjUgKiAoIE1hdGgucG93KCBtb2xlY3VsZVN0cnVjdHVyZVhbIDEgXSwgMiApICsgTWF0aC5wb3coIG1vbGVjdWxlU3RydWN0dXJlWVsgMSBdLCAyICkgKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgMC4yNSAqICggTWF0aC5wb3coIG1vbGVjdWxlU3RydWN0dXJlWFsgMiBdLCAyICkgKyBNYXRoLnBvdyggbW9sZWN1bGVTdHJ1Y3R1cmVZWyAyIF0sIDIgKSApO1xyXG5cclxuY29uc3QgV2F0ZXJNb2xlY3VsZVN0cnVjdHVyZSA9IHtcclxuICBtb2xlY3VsZVN0cnVjdHVyZVg6IG1vbGVjdWxlU3RydWN0dXJlWCxcclxuICBtb2xlY3VsZVN0cnVjdHVyZVk6IG1vbGVjdWxlU3RydWN0dXJlWSxcclxuICByb3RhdGlvbmFsSW5lcnRpYTogcm90YXRpb25hbEluZXJ0aWFcclxufTtcclxuXHJcbnN0YXRlc09mTWF0dGVyLnJlZ2lzdGVyKCAnV2F0ZXJNb2xlY3VsZVN0cnVjdHVyZScsIFdhdGVyTW9sZWN1bGVTdHJ1Y3R1cmUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFdhdGVyTW9sZWN1bGVTdHJ1Y3R1cmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSw0QkFBNEI7QUFDdkQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUVoRCxNQUFNQyxrQkFBa0IsR0FBRyxFQUFFO0FBQzdCLE1BQU1DLGtCQUFrQixHQUFHLEVBQUU7O0FBRTdCO0FBQ0E7QUFDQUQsa0JBQWtCLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBQztBQUMzQkMsa0JBQWtCLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBQztBQUMzQkQsa0JBQWtCLENBQUUsQ0FBQyxDQUFFLEdBQUdELFlBQVksQ0FBQ0csZ0NBQWdDO0FBQ3ZFRCxrQkFBa0IsQ0FBRSxDQUFDLENBQUUsR0FBRyxDQUFDO0FBQzNCRCxrQkFBa0IsQ0FBRSxDQUFDLENBQUUsR0FBR0QsWUFBWSxDQUFDRyxnQ0FBZ0MsR0FDN0NDLElBQUksQ0FBQ0MsR0FBRyxDQUFFTCxZQUFZLENBQUNNLFNBQVUsQ0FBQztBQUM1REosa0JBQWtCLENBQUUsQ0FBQyxDQUFFLEdBQUdGLFlBQVksQ0FBQ0csZ0NBQWdDLEdBQzdDQyxJQUFJLENBQUNHLEdBQUcsQ0FBRVAsWUFBWSxDQUFDTSxTQUFVLENBQUM7QUFDNUQsTUFBTUUsSUFBSSxHQUFHLENBQUVQLGtCQUFrQixDQUFFLENBQUMsQ0FBRSxHQUFHLElBQUksR0FBR0Esa0JBQWtCLENBQUUsQ0FBQyxDQUFFLEdBQUcsSUFBSSxHQUFHQSxrQkFBa0IsQ0FBRSxDQUFDLENBQUUsSUFBSyxHQUFHO0FBQ2hILE1BQU1RLElBQUksR0FBRyxDQUFFUCxrQkFBa0IsQ0FBRSxDQUFDLENBQUUsR0FBRyxJQUFJLEdBQUdBLGtCQUFrQixDQUFFLENBQUMsQ0FBRSxHQUFHLElBQUksR0FBR0Esa0JBQWtCLENBQUUsQ0FBQyxDQUFFLElBQUssR0FBRztBQUNoSCxLQUFNLElBQUlRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFHO0VBQzVCVCxrQkFBa0IsQ0FBRVMsQ0FBQyxDQUFFLElBQUlGLElBQUk7RUFDL0JOLGtCQUFrQixDQUFFUSxDQUFDLENBQUUsSUFBSUQsSUFBSTtBQUNqQztBQUVBLE1BQU1FLGlCQUFpQixHQUFLUCxJQUFJLENBQUNRLEdBQUcsQ0FBRVgsa0JBQWtCLENBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBRSxDQUFDLEdBQUdHLElBQUksQ0FBQ1EsR0FBRyxDQUFFVixrQkFBa0IsQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFFLENBQUMsR0FDakYsSUFBSSxJQUFLRSxJQUFJLENBQUNRLEdBQUcsQ0FBRVgsa0JBQWtCLENBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBRSxDQUFDLEdBQUdHLElBQUksQ0FBQ1EsR0FBRyxDQUFFVixrQkFBa0IsQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFFLENBQUMsQ0FBRSxHQUMxRixJQUFJLElBQUtFLElBQUksQ0FBQ1EsR0FBRyxDQUFFWCxrQkFBa0IsQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFFLENBQUMsR0FBR0csSUFBSSxDQUFDUSxHQUFHLENBQUVWLGtCQUFrQixDQUFFLENBQUMsQ0FBRSxFQUFFLENBQUUsQ0FBQyxDQUFFO0FBRXBILE1BQU1XLHNCQUFzQixHQUFHO0VBQzdCWixrQkFBa0IsRUFBRUEsa0JBQWtCO0VBQ3RDQyxrQkFBa0IsRUFBRUEsa0JBQWtCO0VBQ3RDUyxpQkFBaUIsRUFBRUE7QUFDckIsQ0FBQztBQUVEWixjQUFjLENBQUNlLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRUQsc0JBQXVCLENBQUM7QUFFM0UsZUFBZUEsc0JBQXNCIn0=