// Copyright 2014-2020, University of Colorado Boulder

/**
 * Implementation of the Verlet algorithm for simulating molecular interaction based on the Lennard-Jones potential.
 * This is the diatomic (i.e. two atoms per molecule) version.
 *
 * @author John Blanco
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import statesOfMatter from '../../../statesOfMatter.js';
import AbstractVerletAlgorithm from './AbstractVerletAlgorithm.js';
import DiatomicAtomPositionUpdater from './DiatomicAtomPositionUpdater.js';
class DiatomicVerletAlgorithm extends AbstractVerletAlgorithm {
  /**
   * @param {MultipleParticleModel} multipleParticleModel - Model of a set of particles
   */
  constructor(multipleParticleModel) {
    super(multipleParticleModel);
    this.positionUpdater = DiatomicAtomPositionUpdater; // @private
  }

  /**
   * @override
   * @protected
   */
  initializeForces(moleculeDataSet) {
    const accelerationDueToGravity = this.multipleParticleModel.gravitationalAcceleration;
    const nextMoleculeForces = moleculeDataSet.nextMoleculeForces;
    const nextMoleculeTorques = moleculeDataSet.nextMoleculeTorques;
    for (let i = 0; i < moleculeDataSet.getNumberOfMolecules(); i++) {
      nextMoleculeForces[i].setXY(0, accelerationDueToGravity);
      nextMoleculeTorques[i] = 0;
    }
  }

  /**
   * Update the forces acting on each molecule due to the other molecules in the data set.
   * @param moleculeDataSet
   * @private
   */
  updateInteractionForces(moleculeDataSet) {
    const moleculeCenterOfMassPositions = moleculeDataSet.getMoleculeCenterOfMassPositions();
    const nextMoleculeForces = moleculeDataSet.getNextMoleculeForces();
    const atomPositions = moleculeDataSet.getAtomPositions();
    const nextMoleculeTorques = moleculeDataSet.getNextMoleculeTorques();
    const numberOfMolecules = moleculeDataSet.numberOfMolecules;
    for (let i = 0; i < numberOfMolecules; i++) {
      const moleculeCenterOfMassIX = moleculeCenterOfMassPositions[i].x;
      const moleculeCenterOfMassIY = moleculeCenterOfMassPositions[i].y;
      for (let j = i + 1; j < numberOfMolecules; j++) {
        const moleculeCenterOfMassJX = moleculeCenterOfMassPositions[j].x;
        const moleculeCenterOfMassJY = moleculeCenterOfMassPositions[j].y;
        for (let ii = 0; ii < 2; ii++) {
          const atom1PosX = atomPositions[2 * i + ii].x;
          const atom1PosY = atomPositions[2 * i + ii].y;
          for (let jj = 0; jj < 2; jj++) {
            const atom2PosX = atomPositions[2 * j + jj].x;
            const atom2PosY = atomPositions[2 * j + jj].y;

            // Calculate the distance between the potentially interacting atoms.
            const dx = atom1PosX - atom2PosX;
            const dy = atom1PosY - atom2PosY;
            let distanceSquared = dx * dx + dy * dy;
            if (distanceSquared < AbstractVerletAlgorithm.PARTICLE_INTERACTION_DISTANCE_THRESH_SQRD) {
              if (distanceSquared < AbstractVerletAlgorithm.MIN_DISTANCE_SQUARED) {
                distanceSquared = AbstractVerletAlgorithm.MIN_DISTANCE_SQUARED;
              }
              // Calculate the Lennard-Jones interaction forces.
              const r2inv = 1 / distanceSquared;
              const r6inv = r2inv * r2inv * r2inv;
              const forceScalar = 48 * r2inv * r6inv * (r6inv - 0.5);
              const fx = dx * forceScalar;
              const fy = dy * forceScalar;
              nextMoleculeForces[i].addXY(fx, fy);
              nextMoleculeForces[j].subtractXY(fx, fy);
              nextMoleculeTorques[i] += (atom1PosX - moleculeCenterOfMassIX) * fy - (atom1PosY - moleculeCenterOfMassIY) * fx;
              nextMoleculeTorques[j] -= (atom2PosX - moleculeCenterOfMassJX) * fy - (atom2PosY - moleculeCenterOfMassJY) * fx;
              this.potentialEnergy += 4 * r6inv * (r6inv - 1) + 0.016316891136;
            }
          }
        }
      }
    }
  }

  /**
   * Update the translational and rotational velocities for the molecules, calculate the total energy, and record the
   * temperature value for the system.
   * @param moleculeDataSet
   * @param timeStep
   * @private
   */
  updateVelocitiesAndRotationRates(moleculeDataSet, timeStep) {
    // Obtain references to the model data and parameters so that we can perform fast manipulations.
    const moleculeVelocities = moleculeDataSet.getMoleculeVelocities();
    const moleculeForces = moleculeDataSet.getMoleculeForces();
    const nextMoleculeForces = moleculeDataSet.getNextMoleculeForces();
    const numberOfMolecules = moleculeDataSet.getNumberOfMolecules();
    const moleculeRotationRates = moleculeDataSet.getMoleculeRotationRates();
    const moleculeTorques = moleculeDataSet.getMoleculeTorques();
    const nextMoleculeTorques = moleculeDataSet.getNextMoleculeTorques();

    // Initialize other values that will be needed for the calculation.
    const massInverse = 1 / moleculeDataSet.getMoleculeMass();
    const inertiaInverse = 1 / moleculeDataSet.getMoleculeRotationalInertia();
    const timeStepHalf = timeStep / 2;
    let translationalKineticEnergy = 0;
    let rotationalKineticEnergy = 0;

    // Update the velocities and rotation rates based on the forces being exerted on the molecules, then calculate
    // the kinetic energy of the system.
    for (let i = 0; i < numberOfMolecules; i++) {
      const xVel = moleculeVelocities[i].x + timeStepHalf * (moleculeForces[i].x + nextMoleculeForces[i].x) * massInverse;
      const yVel = moleculeVelocities[i].y + timeStepHalf * (moleculeForces[i].y + nextMoleculeForces[i].y) * massInverse;
      moleculeVelocities[i].setXY(xVel, yVel);
      moleculeRotationRates[i] += timeStepHalf * (moleculeTorques[i] + nextMoleculeTorques[i]) * inertiaInverse;
      translationalKineticEnergy += 0.5 * moleculeDataSet.moleculeMass * moleculeVelocities[i].magnitudeSquared;
      rotationalKineticEnergy += 0.5 * moleculeDataSet.moleculeRotationalInertia * Math.pow(moleculeRotationRates[i], 2);

      // Move the newly calculated forces and torques into the current spots.
      moleculeForces[i].setXY(nextMoleculeForces[i].x, nextMoleculeForces[i].y);
      moleculeTorques[i] = nextMoleculeTorques[i];
    }

    // Record the calculated temperature.
    if (numberOfMolecules > 0) {
      this.calculatedTemperature = 2 / 3 * (translationalKineticEnergy + rotationalKineticEnergy) / numberOfMolecules;
    } else {
      this.calculatedTemperature = this.multipleParticleModel.minModelTemperature;
    }
  }
}
statesOfMatter.register('DiatomicVerletAlgorithm', DiatomicVerletAlgorithm);
export default DiatomicVerletAlgorithm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGF0ZXNPZk1hdHRlciIsIkFic3RyYWN0VmVybGV0QWxnb3JpdGhtIiwiRGlhdG9taWNBdG9tUG9zaXRpb25VcGRhdGVyIiwiRGlhdG9taWNWZXJsZXRBbGdvcml0aG0iLCJjb25zdHJ1Y3RvciIsIm11bHRpcGxlUGFydGljbGVNb2RlbCIsInBvc2l0aW9uVXBkYXRlciIsImluaXRpYWxpemVGb3JjZXMiLCJtb2xlY3VsZURhdGFTZXQiLCJhY2NlbGVyYXRpb25EdWVUb0dyYXZpdHkiLCJncmF2aXRhdGlvbmFsQWNjZWxlcmF0aW9uIiwibmV4dE1vbGVjdWxlRm9yY2VzIiwibmV4dE1vbGVjdWxlVG9ycXVlcyIsImkiLCJnZXROdW1iZXJPZk1vbGVjdWxlcyIsInNldFhZIiwidXBkYXRlSW50ZXJhY3Rpb25Gb3JjZXMiLCJtb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9ucyIsImdldE1vbGVjdWxlQ2VudGVyT2ZNYXNzUG9zaXRpb25zIiwiZ2V0TmV4dE1vbGVjdWxlRm9yY2VzIiwiYXRvbVBvc2l0aW9ucyIsImdldEF0b21Qb3NpdGlvbnMiLCJnZXROZXh0TW9sZWN1bGVUb3JxdWVzIiwibnVtYmVyT2ZNb2xlY3VsZXMiLCJtb2xlY3VsZUNlbnRlck9mTWFzc0lYIiwieCIsIm1vbGVjdWxlQ2VudGVyT2ZNYXNzSVkiLCJ5IiwiaiIsIm1vbGVjdWxlQ2VudGVyT2ZNYXNzSlgiLCJtb2xlY3VsZUNlbnRlck9mTWFzc0pZIiwiaWkiLCJhdG9tMVBvc1giLCJhdG9tMVBvc1kiLCJqaiIsImF0b20yUG9zWCIsImF0b20yUG9zWSIsImR4IiwiZHkiLCJkaXN0YW5jZVNxdWFyZWQiLCJQQVJUSUNMRV9JTlRFUkFDVElPTl9ESVNUQU5DRV9USFJFU0hfU1FSRCIsIk1JTl9ESVNUQU5DRV9TUVVBUkVEIiwicjJpbnYiLCJyNmludiIsImZvcmNlU2NhbGFyIiwiZngiLCJmeSIsImFkZFhZIiwic3VidHJhY3RYWSIsInBvdGVudGlhbEVuZXJneSIsInVwZGF0ZVZlbG9jaXRpZXNBbmRSb3RhdGlvblJhdGVzIiwidGltZVN0ZXAiLCJtb2xlY3VsZVZlbG9jaXRpZXMiLCJnZXRNb2xlY3VsZVZlbG9jaXRpZXMiLCJtb2xlY3VsZUZvcmNlcyIsImdldE1vbGVjdWxlRm9yY2VzIiwibW9sZWN1bGVSb3RhdGlvblJhdGVzIiwiZ2V0TW9sZWN1bGVSb3RhdGlvblJhdGVzIiwibW9sZWN1bGVUb3JxdWVzIiwiZ2V0TW9sZWN1bGVUb3JxdWVzIiwibWFzc0ludmVyc2UiLCJnZXRNb2xlY3VsZU1hc3MiLCJpbmVydGlhSW52ZXJzZSIsImdldE1vbGVjdWxlUm90YXRpb25hbEluZXJ0aWEiLCJ0aW1lU3RlcEhhbGYiLCJ0cmFuc2xhdGlvbmFsS2luZXRpY0VuZXJneSIsInJvdGF0aW9uYWxLaW5ldGljRW5lcmd5IiwieFZlbCIsInlWZWwiLCJtb2xlY3VsZU1hc3MiLCJtYWduaXR1ZGVTcXVhcmVkIiwibW9sZWN1bGVSb3RhdGlvbmFsSW5lcnRpYSIsIk1hdGgiLCJwb3ciLCJjYWxjdWxhdGVkVGVtcGVyYXR1cmUiLCJtaW5Nb2RlbFRlbXBlcmF0dXJlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaWF0b21pY1ZlcmxldEFsZ29yaXRobS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgVmVybGV0IGFsZ29yaXRobSBmb3Igc2ltdWxhdGluZyBtb2xlY3VsYXIgaW50ZXJhY3Rpb24gYmFzZWQgb24gdGhlIExlbm5hcmQtSm9uZXMgcG90ZW50aWFsLlxyXG4gKiBUaGlzIGlzIHRoZSBkaWF0b21pYyAoaS5lLiB0d28gYXRvbXMgcGVyIG1vbGVjdWxlKSB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgc3RhdGVzT2ZNYXR0ZXIgZnJvbSAnLi4vLi4vLi4vc3RhdGVzT2ZNYXR0ZXIuanMnO1xyXG5pbXBvcnQgQWJzdHJhY3RWZXJsZXRBbGdvcml0aG0gZnJvbSAnLi9BYnN0cmFjdFZlcmxldEFsZ29yaXRobS5qcyc7XHJcbmltcG9ydCBEaWF0b21pY0F0b21Qb3NpdGlvblVwZGF0ZXIgZnJvbSAnLi9EaWF0b21pY0F0b21Qb3NpdGlvblVwZGF0ZXIuanMnO1xyXG5cclxuY2xhc3MgRGlhdG9taWNWZXJsZXRBbGdvcml0aG0gZXh0ZW5kcyBBYnN0cmFjdFZlcmxldEFsZ29yaXRobSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TXVsdGlwbGVQYXJ0aWNsZU1vZGVsfSBtdWx0aXBsZVBhcnRpY2xlTW9kZWwgLSBNb2RlbCBvZiBhIHNldCBvZiBwYXJ0aWNsZXNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbXVsdGlwbGVQYXJ0aWNsZU1vZGVsICkge1xyXG4gICAgc3VwZXIoIG11bHRpcGxlUGFydGljbGVNb2RlbCApO1xyXG4gICAgdGhpcy5wb3NpdGlvblVwZGF0ZXIgPSBEaWF0b21pY0F0b21Qb3NpdGlvblVwZGF0ZXI7IC8vIEBwcml2YXRlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICovXHJcbiAgaW5pdGlhbGl6ZUZvcmNlcyggbW9sZWN1bGVEYXRhU2V0ICkge1xyXG4gICAgY29uc3QgYWNjZWxlcmF0aW9uRHVlVG9HcmF2aXR5ID0gdGhpcy5tdWx0aXBsZVBhcnRpY2xlTW9kZWwuZ3Jhdml0YXRpb25hbEFjY2VsZXJhdGlvbjtcclxuICAgIGNvbnN0IG5leHRNb2xlY3VsZUZvcmNlcyA9IG1vbGVjdWxlRGF0YVNldC5uZXh0TW9sZWN1bGVGb3JjZXM7XHJcbiAgICBjb25zdCBuZXh0TW9sZWN1bGVUb3JxdWVzID0gbW9sZWN1bGVEYXRhU2V0Lm5leHRNb2xlY3VsZVRvcnF1ZXM7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBtb2xlY3VsZURhdGFTZXQuZ2V0TnVtYmVyT2ZNb2xlY3VsZXMoKTsgaSsrICkge1xyXG4gICAgICBuZXh0TW9sZWN1bGVGb3JjZXNbIGkgXS5zZXRYWSggMCwgYWNjZWxlcmF0aW9uRHVlVG9HcmF2aXR5ICk7XHJcbiAgICAgIG5leHRNb2xlY3VsZVRvcnF1ZXNbIGkgXSA9IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgdGhlIGZvcmNlcyBhY3Rpbmcgb24gZWFjaCBtb2xlY3VsZSBkdWUgdG8gdGhlIG90aGVyIG1vbGVjdWxlcyBpbiB0aGUgZGF0YSBzZXQuXHJcbiAgICogQHBhcmFtIG1vbGVjdWxlRGF0YVNldFxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgdXBkYXRlSW50ZXJhY3Rpb25Gb3JjZXMoIG1vbGVjdWxlRGF0YVNldCApIHtcclxuXHJcbiAgICBjb25zdCBtb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9ucyA9IG1vbGVjdWxlRGF0YVNldC5nZXRNb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9ucygpO1xyXG4gICAgY29uc3QgbmV4dE1vbGVjdWxlRm9yY2VzID0gbW9sZWN1bGVEYXRhU2V0LmdldE5leHRNb2xlY3VsZUZvcmNlcygpO1xyXG4gICAgY29uc3QgYXRvbVBvc2l0aW9ucyA9IG1vbGVjdWxlRGF0YVNldC5nZXRBdG9tUG9zaXRpb25zKCk7XHJcbiAgICBjb25zdCBuZXh0TW9sZWN1bGVUb3JxdWVzID0gbW9sZWN1bGVEYXRhU2V0LmdldE5leHRNb2xlY3VsZVRvcnF1ZXMoKTtcclxuICAgIGNvbnN0IG51bWJlck9mTW9sZWN1bGVzID0gbW9sZWN1bGVEYXRhU2V0Lm51bWJlck9mTW9sZWN1bGVzO1xyXG5cclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG51bWJlck9mTW9sZWN1bGVzOyBpKysgKSB7XHJcbiAgICAgIGNvbnN0IG1vbGVjdWxlQ2VudGVyT2ZNYXNzSVggPSBtb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9uc1sgaSBdLng7XHJcbiAgICAgIGNvbnN0IG1vbGVjdWxlQ2VudGVyT2ZNYXNzSVkgPSBtb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9uc1sgaSBdLnk7XHJcbiAgICAgIGZvciAoIGxldCBqID0gaSArIDE7IGogPCBudW1iZXJPZk1vbGVjdWxlczsgaisrICkge1xyXG4gICAgICAgIGNvbnN0IG1vbGVjdWxlQ2VudGVyT2ZNYXNzSlggPSBtb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9uc1sgaiBdLng7XHJcbiAgICAgICAgY29uc3QgbW9sZWN1bGVDZW50ZXJPZk1hc3NKWSA9IG1vbGVjdWxlQ2VudGVyT2ZNYXNzUG9zaXRpb25zWyBqIF0ueTtcclxuICAgICAgICBmb3IgKCBsZXQgaWkgPSAwOyBpaSA8IDI7IGlpKysgKSB7XHJcbiAgICAgICAgICBjb25zdCBhdG9tMVBvc1ggPSBhdG9tUG9zaXRpb25zWyAyICogaSArIGlpIF0ueDtcclxuICAgICAgICAgIGNvbnN0IGF0b20xUG9zWSA9IGF0b21Qb3NpdGlvbnNbIDIgKiBpICsgaWkgXS55O1xyXG4gICAgICAgICAgZm9yICggbGV0IGpqID0gMDsgamogPCAyOyBqaisrICkge1xyXG4gICAgICAgICAgICBjb25zdCBhdG9tMlBvc1ggPSBhdG9tUG9zaXRpb25zWyAyICogaiArIGpqIF0ueDtcclxuICAgICAgICAgICAgY29uc3QgYXRvbTJQb3NZID0gYXRvbVBvc2l0aW9uc1sgMiAqIGogKyBqaiBdLnk7XHJcblxyXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHBvdGVudGlhbGx5IGludGVyYWN0aW5nIGF0b21zLlxyXG4gICAgICAgICAgICBjb25zdCBkeCA9IGF0b20xUG9zWCAtIGF0b20yUG9zWDtcclxuICAgICAgICAgICAgY29uc3QgZHkgPSBhdG9tMVBvc1kgLSBhdG9tMlBvc1k7XHJcbiAgICAgICAgICAgIGxldCBkaXN0YW5jZVNxdWFyZWQgPSBkeCAqIGR4ICsgZHkgKiBkeTtcclxuICAgICAgICAgICAgaWYgKCBkaXN0YW5jZVNxdWFyZWQgPCBBYnN0cmFjdFZlcmxldEFsZ29yaXRobS5QQVJUSUNMRV9JTlRFUkFDVElPTl9ESVNUQU5DRV9USFJFU0hfU1FSRCApIHtcclxuICAgICAgICAgICAgICBpZiAoIGRpc3RhbmNlU3F1YXJlZCA8IEFic3RyYWN0VmVybGV0QWxnb3JpdGhtLk1JTl9ESVNUQU5DRV9TUVVBUkVEICkge1xyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2VTcXVhcmVkID0gQWJzdHJhY3RWZXJsZXRBbGdvcml0aG0uTUlOX0RJU1RBTkNFX1NRVUFSRUQ7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgTGVubmFyZC1Kb25lcyBpbnRlcmFjdGlvbiBmb3JjZXMuXHJcbiAgICAgICAgICAgICAgY29uc3QgcjJpbnYgPSAxIC8gZGlzdGFuY2VTcXVhcmVkO1xyXG4gICAgICAgICAgICAgIGNvbnN0IHI2aW52ID0gcjJpbnYgKiByMmludiAqIHIyaW52O1xyXG4gICAgICAgICAgICAgIGNvbnN0IGZvcmNlU2NhbGFyID0gNDggKiByMmludiAqIHI2aW52ICogKCByNmludiAtIDAuNSApO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGZ4ID0gZHggKiBmb3JjZVNjYWxhcjtcclxuICAgICAgICAgICAgICBjb25zdCBmeSA9IGR5ICogZm9yY2VTY2FsYXI7XHJcbiAgICAgICAgICAgICAgbmV4dE1vbGVjdWxlRm9yY2VzWyBpIF0uYWRkWFkoIGZ4LCBmeSApO1xyXG4gICAgICAgICAgICAgIG5leHRNb2xlY3VsZUZvcmNlc1sgaiBdLnN1YnRyYWN0WFkoIGZ4LCBmeSApO1xyXG4gICAgICAgICAgICAgIG5leHRNb2xlY3VsZVRvcnF1ZXNbIGkgXSArPSAoIGF0b20xUG9zWCAtIG1vbGVjdWxlQ2VudGVyT2ZNYXNzSVggKSAqIGZ5IC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBhdG9tMVBvc1kgLSBtb2xlY3VsZUNlbnRlck9mTWFzc0lZICkgKiBmeDtcclxuICAgICAgICAgICAgICBuZXh0TW9sZWN1bGVUb3JxdWVzWyBqIF0gLT0gKCBhdG9tMlBvc1ggLSBtb2xlY3VsZUNlbnRlck9mTWFzc0pYICkgKiBmeSAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggYXRvbTJQb3NZIC0gbW9sZWN1bGVDZW50ZXJPZk1hc3NKWSApICogZng7XHJcbiAgICAgICAgICAgICAgdGhpcy5wb3RlbnRpYWxFbmVyZ3kgKz0gNCAqIHI2aW52ICogKCByNmludiAtIDEgKSArIDAuMDE2MzE2ODkxMTM2O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgdGhlIHRyYW5zbGF0aW9uYWwgYW5kIHJvdGF0aW9uYWwgdmVsb2NpdGllcyBmb3IgdGhlIG1vbGVjdWxlcywgY2FsY3VsYXRlIHRoZSB0b3RhbCBlbmVyZ3ksIGFuZCByZWNvcmQgdGhlXHJcbiAgICogdGVtcGVyYXR1cmUgdmFsdWUgZm9yIHRoZSBzeXN0ZW0uXHJcbiAgICogQHBhcmFtIG1vbGVjdWxlRGF0YVNldFxyXG4gICAqIEBwYXJhbSB0aW1lU3RlcFxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgdXBkYXRlVmVsb2NpdGllc0FuZFJvdGF0aW9uUmF0ZXMoIG1vbGVjdWxlRGF0YVNldCwgdGltZVN0ZXAgKSB7XHJcblxyXG4gICAgLy8gT2J0YWluIHJlZmVyZW5jZXMgdG8gdGhlIG1vZGVsIGRhdGEgYW5kIHBhcmFtZXRlcnMgc28gdGhhdCB3ZSBjYW4gcGVyZm9ybSBmYXN0IG1hbmlwdWxhdGlvbnMuXHJcbiAgICBjb25zdCBtb2xlY3VsZVZlbG9jaXRpZXMgPSBtb2xlY3VsZURhdGFTZXQuZ2V0TW9sZWN1bGVWZWxvY2l0aWVzKCk7XHJcbiAgICBjb25zdCBtb2xlY3VsZUZvcmNlcyA9IG1vbGVjdWxlRGF0YVNldC5nZXRNb2xlY3VsZUZvcmNlcygpO1xyXG4gICAgY29uc3QgbmV4dE1vbGVjdWxlRm9yY2VzID0gbW9sZWN1bGVEYXRhU2V0LmdldE5leHRNb2xlY3VsZUZvcmNlcygpO1xyXG4gICAgY29uc3QgbnVtYmVyT2ZNb2xlY3VsZXMgPSBtb2xlY3VsZURhdGFTZXQuZ2V0TnVtYmVyT2ZNb2xlY3VsZXMoKTtcclxuICAgIGNvbnN0IG1vbGVjdWxlUm90YXRpb25SYXRlcyA9IG1vbGVjdWxlRGF0YVNldC5nZXRNb2xlY3VsZVJvdGF0aW9uUmF0ZXMoKTtcclxuICAgIGNvbnN0IG1vbGVjdWxlVG9ycXVlcyA9IG1vbGVjdWxlRGF0YVNldC5nZXRNb2xlY3VsZVRvcnF1ZXMoKTtcclxuICAgIGNvbnN0IG5leHRNb2xlY3VsZVRvcnF1ZXMgPSBtb2xlY3VsZURhdGFTZXQuZ2V0TmV4dE1vbGVjdWxlVG9ycXVlcygpO1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgb3RoZXIgdmFsdWVzIHRoYXQgd2lsbCBiZSBuZWVkZWQgZm9yIHRoZSBjYWxjdWxhdGlvbi5cclxuICAgIGNvbnN0IG1hc3NJbnZlcnNlID0gMSAvIG1vbGVjdWxlRGF0YVNldC5nZXRNb2xlY3VsZU1hc3MoKTtcclxuICAgIGNvbnN0IGluZXJ0aWFJbnZlcnNlID0gMSAvIG1vbGVjdWxlRGF0YVNldC5nZXRNb2xlY3VsZVJvdGF0aW9uYWxJbmVydGlhKCk7XHJcbiAgICBjb25zdCB0aW1lU3RlcEhhbGYgPSB0aW1lU3RlcCAvIDI7XHJcbiAgICBsZXQgdHJhbnNsYXRpb25hbEtpbmV0aWNFbmVyZ3kgPSAwO1xyXG4gICAgbGV0IHJvdGF0aW9uYWxLaW5ldGljRW5lcmd5ID0gMDtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHZlbG9jaXRpZXMgYW5kIHJvdGF0aW9uIHJhdGVzIGJhc2VkIG9uIHRoZSBmb3JjZXMgYmVpbmcgZXhlcnRlZCBvbiB0aGUgbW9sZWN1bGVzLCB0aGVuIGNhbGN1bGF0ZVxyXG4gICAgLy8gdGhlIGtpbmV0aWMgZW5lcmd5IG9mIHRoZSBzeXN0ZW0uXHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1iZXJPZk1vbGVjdWxlczsgaSsrICkge1xyXG4gICAgICBjb25zdCB4VmVsID0gbW9sZWN1bGVWZWxvY2l0aWVzWyBpIF0ueCArXHJcbiAgICAgICAgICAgICAgICAgICB0aW1lU3RlcEhhbGYgKiAoIG1vbGVjdWxlRm9yY2VzWyBpIF0ueCArIG5leHRNb2xlY3VsZUZvcmNlc1sgaSBdLnggKSAqIG1hc3NJbnZlcnNlO1xyXG4gICAgICBjb25zdCB5VmVsID0gbW9sZWN1bGVWZWxvY2l0aWVzWyBpIF0ueSArXHJcbiAgICAgICAgICAgICAgICAgICB0aW1lU3RlcEhhbGYgKiAoIG1vbGVjdWxlRm9yY2VzWyBpIF0ueSArIG5leHRNb2xlY3VsZUZvcmNlc1sgaSBdLnkgKSAqIG1hc3NJbnZlcnNlO1xyXG4gICAgICBtb2xlY3VsZVZlbG9jaXRpZXNbIGkgXS5zZXRYWSggeFZlbCwgeVZlbCApO1xyXG4gICAgICBtb2xlY3VsZVJvdGF0aW9uUmF0ZXNbIGkgXSArPSB0aW1lU3RlcEhhbGYgKiAoIG1vbGVjdWxlVG9ycXVlc1sgaSBdICsgbmV4dE1vbGVjdWxlVG9ycXVlc1sgaSBdICkgKlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmVydGlhSW52ZXJzZTtcclxuICAgICAgdHJhbnNsYXRpb25hbEtpbmV0aWNFbmVyZ3kgKz0gMC41ICogbW9sZWN1bGVEYXRhU2V0Lm1vbGVjdWxlTWFzcyAqIG1vbGVjdWxlVmVsb2NpdGllc1sgaSBdLm1hZ25pdHVkZVNxdWFyZWQ7XHJcbiAgICAgIHJvdGF0aW9uYWxLaW5ldGljRW5lcmd5ICs9IDAuNSAqIG1vbGVjdWxlRGF0YVNldC5tb2xlY3VsZVJvdGF0aW9uYWxJbmVydGlhICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coIG1vbGVjdWxlUm90YXRpb25SYXRlc1sgaSBdLCAyICk7XHJcblxyXG4gICAgICAvLyBNb3ZlIHRoZSBuZXdseSBjYWxjdWxhdGVkIGZvcmNlcyBhbmQgdG9ycXVlcyBpbnRvIHRoZSBjdXJyZW50IHNwb3RzLlxyXG4gICAgICBtb2xlY3VsZUZvcmNlc1sgaSBdLnNldFhZKCBuZXh0TW9sZWN1bGVGb3JjZXNbIGkgXS54LCBuZXh0TW9sZWN1bGVGb3JjZXNbIGkgXS55ICk7XHJcbiAgICAgIG1vbGVjdWxlVG9ycXVlc1sgaSBdID0gbmV4dE1vbGVjdWxlVG9ycXVlc1sgaSBdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlY29yZCB0aGUgY2FsY3VsYXRlZCB0ZW1wZXJhdHVyZS5cclxuICAgIGlmICggbnVtYmVyT2ZNb2xlY3VsZXMgPiAwICkge1xyXG4gICAgICB0aGlzLmNhbGN1bGF0ZWRUZW1wZXJhdHVyZSA9ICggMiAvIDMgKSAqICggdHJhbnNsYXRpb25hbEtpbmV0aWNFbmVyZ3kgKyByb3RhdGlvbmFsS2luZXRpY0VuZXJneSApIC8gbnVtYmVyT2ZNb2xlY3VsZXM7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5jYWxjdWxhdGVkVGVtcGVyYXR1cmUgPSB0aGlzLm11bHRpcGxlUGFydGljbGVNb2RlbC5taW5Nb2RlbFRlbXBlcmF0dXJlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuc3RhdGVzT2ZNYXR0ZXIucmVnaXN0ZXIoICdEaWF0b21pY1ZlcmxldEFsZ29yaXRobScsIERpYXRvbWljVmVybGV0QWxnb3JpdGhtICk7XHJcbmV4cG9ydCBkZWZhdWx0IERpYXRvbWljVmVybGV0QWxnb3JpdGhtOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLDRCQUE0QjtBQUN2RCxPQUFPQyx1QkFBdUIsTUFBTSw4QkFBOEI7QUFDbEUsT0FBT0MsMkJBQTJC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