// Copyright 2014-2020, University of Colorado Boulder

/**
 * This class updates the positions of atoms in a diatomic data set (i.e. where each molecule is made up of two
 * molecules).  IMPORTANT: This class assumes that the two atoms that comprise each molecule are the same, e.g. O2
 * (diatomic oxygen), and not different, such as OH.
 *
 * @author John Blanco
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import statesOfMatter from '../../../statesOfMatter.js';
import SOMConstants from '../../SOMConstants.js';

// static object (no constructor)
const DiatomicAtomPositionUpdater = {
  /**
   * @public
   * @param {MoleculeForceAndMotionDataSet} moleculeDataSet
   */
  updateAtomPositions: moleculeDataSet => {
    // Make sure this is not being used on an inappropriate data set.
    assert && assert(moleculeDataSet.atomsPerMolecule === 2);

    // Get direct references to the data in the data set.
    const atomPositions = moleculeDataSet.atomPositions;
    const moleculeCenterOfMassPositions = moleculeDataSet.moleculeCenterOfMassPositions;
    const moleculeRotationAngles = moleculeDataSet.moleculeRotationAngles;
    let xPos;
    let yPos;
    let cosineTheta;
    let sineTheta;
    for (let i = 0; i < moleculeDataSet.getNumberOfMolecules(); i++) {
      cosineTheta = Math.cos(moleculeRotationAngles[i]);
      sineTheta = Math.sin(moleculeRotationAngles[i]);
      xPos = moleculeCenterOfMassPositions[i].x + cosineTheta * (SOMConstants.DIATOMIC_PARTICLE_DISTANCE / 2);
      yPos = moleculeCenterOfMassPositions[i].y + sineTheta * (SOMConstants.DIATOMIC_PARTICLE_DISTANCE / 2);
      atomPositions[i * 2].setXY(xPos, yPos);
      xPos = moleculeCenterOfMassPositions[i].x - cosineTheta * (SOMConstants.DIATOMIC_PARTICLE_DISTANCE / 2);
      yPos = moleculeCenterOfMassPositions[i].y - sineTheta * (SOMConstants.DIATOMIC_PARTICLE_DISTANCE / 2);
      atomPositions[i * 2 + 1].setXY(xPos, yPos);
    }
  }
};
statesOfMatter.register('DiatomicAtomPositionUpdater', DiatomicAtomPositionUpdater);
export default DiatomicAtomPositionUpdater;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGF0ZXNPZk1hdHRlciIsIlNPTUNvbnN0YW50cyIsIkRpYXRvbWljQXRvbVBvc2l0aW9uVXBkYXRlciIsInVwZGF0ZUF0b21Qb3NpdGlvbnMiLCJtb2xlY3VsZURhdGFTZXQiLCJhc3NlcnQiLCJhdG9tc1Blck1vbGVjdWxlIiwiYXRvbVBvc2l0aW9ucyIsIm1vbGVjdWxlQ2VudGVyT2ZNYXNzUG9zaXRpb25zIiwibW9sZWN1bGVSb3RhdGlvbkFuZ2xlcyIsInhQb3MiLCJ5UG9zIiwiY29zaW5lVGhldGEiLCJzaW5lVGhldGEiLCJpIiwiZ2V0TnVtYmVyT2ZNb2xlY3VsZXMiLCJNYXRoIiwiY29zIiwic2luIiwieCIsIkRJQVRPTUlDX1BBUlRJQ0xFX0RJU1RBTkNFIiwieSIsInNldFhZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaWF0b21pY0F0b21Qb3NpdGlvblVwZGF0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBjbGFzcyB1cGRhdGVzIHRoZSBwb3NpdGlvbnMgb2YgYXRvbXMgaW4gYSBkaWF0b21pYyBkYXRhIHNldCAoaS5lLiB3aGVyZSBlYWNoIG1vbGVjdWxlIGlzIG1hZGUgdXAgb2YgdHdvXHJcbiAqIG1vbGVjdWxlcykuICBJTVBPUlRBTlQ6IFRoaXMgY2xhc3MgYXNzdW1lcyB0aGF0IHRoZSB0d28gYXRvbXMgdGhhdCBjb21wcmlzZSBlYWNoIG1vbGVjdWxlIGFyZSB0aGUgc2FtZSwgZS5nLiBPMlxyXG4gKiAoZGlhdG9taWMgb3h5Z2VuKSwgYW5kIG5vdCBkaWZmZXJlbnQsIHN1Y2ggYXMgT0guXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBTaWRkaGFydGhhIENoaW50aGFwYWxseSAoQWN0dWFsIENvbmNlcHRzKVxyXG4gKi9cclxuXHJcbmltcG9ydCBzdGF0ZXNPZk1hdHRlciBmcm9tICcuLi8uLi8uLi9zdGF0ZXNPZk1hdHRlci5qcyc7XHJcbmltcG9ydCBTT01Db25zdGFudHMgZnJvbSAnLi4vLi4vU09NQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIHN0YXRpYyBvYmplY3QgKG5vIGNvbnN0cnVjdG9yKVxyXG5jb25zdCBEaWF0b21pY0F0b21Qb3NpdGlvblVwZGF0ZXIgPSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge01vbGVjdWxlRm9yY2VBbmRNb3Rpb25EYXRhU2V0fSBtb2xlY3VsZURhdGFTZXRcclxuICAgKi9cclxuICB1cGRhdGVBdG9tUG9zaXRpb25zOiBtb2xlY3VsZURhdGFTZXQgPT4ge1xyXG5cclxuICAgIC8vIE1ha2Ugc3VyZSB0aGlzIGlzIG5vdCBiZWluZyB1c2VkIG9uIGFuIGluYXBwcm9wcmlhdGUgZGF0YSBzZXQuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtb2xlY3VsZURhdGFTZXQuYXRvbXNQZXJNb2xlY3VsZSA9PT0gMiApO1xyXG5cclxuICAgIC8vIEdldCBkaXJlY3QgcmVmZXJlbmNlcyB0byB0aGUgZGF0YSBpbiB0aGUgZGF0YSBzZXQuXHJcbiAgICBjb25zdCBhdG9tUG9zaXRpb25zID0gbW9sZWN1bGVEYXRhU2V0LmF0b21Qb3NpdGlvbnM7XHJcbiAgICBjb25zdCBtb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9ucyA9IG1vbGVjdWxlRGF0YVNldC5tb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9ucztcclxuICAgIGNvbnN0IG1vbGVjdWxlUm90YXRpb25BbmdsZXMgPSBtb2xlY3VsZURhdGFTZXQubW9sZWN1bGVSb3RhdGlvbkFuZ2xlcztcclxuICAgIGxldCB4UG9zO1xyXG4gICAgbGV0IHlQb3M7XHJcbiAgICBsZXQgY29zaW5lVGhldGE7XHJcbiAgICBsZXQgc2luZVRoZXRhO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbW9sZWN1bGVEYXRhU2V0LmdldE51bWJlck9mTW9sZWN1bGVzKCk7IGkrKyApIHtcclxuICAgICAgY29zaW5lVGhldGEgPSBNYXRoLmNvcyggbW9sZWN1bGVSb3RhdGlvbkFuZ2xlc1sgaSBdICk7XHJcbiAgICAgIHNpbmVUaGV0YSA9IE1hdGguc2luKCBtb2xlY3VsZVJvdGF0aW9uQW5nbGVzWyBpIF0gKTtcclxuICAgICAgeFBvcyA9IG1vbGVjdWxlQ2VudGVyT2ZNYXNzUG9zaXRpb25zWyBpIF0ueCArXHJcbiAgICAgICAgICAgICBjb3NpbmVUaGV0YSAqICggU09NQ29uc3RhbnRzLkRJQVRPTUlDX1BBUlRJQ0xFX0RJU1RBTkNFIC8gMiApO1xyXG4gICAgICB5UG9zID0gbW9sZWN1bGVDZW50ZXJPZk1hc3NQb3NpdGlvbnNbIGkgXS55ICtcclxuICAgICAgICAgICAgIHNpbmVUaGV0YSAqICggU09NQ29uc3RhbnRzLkRJQVRPTUlDX1BBUlRJQ0xFX0RJU1RBTkNFIC8gMiApO1xyXG4gICAgICBhdG9tUG9zaXRpb25zWyBpICogMiBdLnNldFhZKCB4UG9zLCB5UG9zICk7XHJcbiAgICAgIHhQb3MgPSBtb2xlY3VsZUNlbnRlck9mTWFzc1Bvc2l0aW9uc1sgaSBdLnggLVxyXG4gICAgICAgICAgICAgY29zaW5lVGhldGEgKiAoIFNPTUNvbnN0YW50cy5ESUFUT01JQ19QQVJUSUNMRV9ESVNUQU5DRSAvIDIgKTtcclxuICAgICAgeVBvcyA9IG1vbGVjdWxlQ2VudGVyT2ZNYXNzUG9zaXRpb25zWyBpIF0ueSAtXHJcbiAgICAgICAgICAgICBzaW5lVGhldGEgKiAoIFNPTUNvbnN0YW50cy5ESUFUT01JQ19QQVJUSUNMRV9ESVNUQU5DRSAvIDIgKTtcclxuICAgICAgYXRvbVBvc2l0aW9uc1sgaSAqIDIgKyAxIF0uc2V0WFkoIHhQb3MsIHlQb3MgKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5zdGF0ZXNPZk1hdHRlci5yZWdpc3RlciggJ0RpYXRvbWljQXRvbVBvc2l0aW9uVXBkYXRlcicsIERpYXRvbWljQXRvbVBvc2l0aW9uVXBkYXRlciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGlhdG9taWNBdG9tUG9zaXRpb25VcGRhdGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sNEJBQTRCO0FBQ3ZELE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7O0FBRWhEO0FBQ0EsTUFBTUMsMkJBQTJCLEdBQUc7RUFFbEM7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsbUJBQW1CLEVBQUVDLGVBQWUsSUFBSTtJQUV0QztJQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsZUFBZSxDQUFDRSxnQkFBZ0IsS0FBSyxDQUFFLENBQUM7O0lBRTFEO0lBQ0EsTUFBTUMsYUFBYSxHQUFHSCxlQUFlLENBQUNHLGFBQWE7SUFDbkQsTUFBTUMsNkJBQTZCLEdBQUdKLGVBQWUsQ0FBQ0ksNkJBQTZCO0lBQ25GLE1BQU1DLHNCQUFzQixHQUFHTCxlQUFlLENBQUNLLHNCQUFzQjtJQUNyRSxJQUFJQyxJQUFJO0lBQ1IsSUFBSUMsSUFBSTtJQUNSLElBQUlDLFdBQVc7SUFDZixJQUFJQyxTQUFTO0lBQ2IsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdWLGVBQWUsQ0FBQ1csb0JBQW9CLENBQUMsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRztNQUNqRUYsV0FBVyxHQUFHSSxJQUFJLENBQUNDLEdBQUcsQ0FBRVIsc0JBQXNCLENBQUVLLENBQUMsQ0FBRyxDQUFDO01BQ3JERCxTQUFTLEdBQUdHLElBQUksQ0FBQ0UsR0FBRyxDQUFFVCxzQkFBc0IsQ0FBRUssQ0FBQyxDQUFHLENBQUM7TUFDbkRKLElBQUksR0FBR0YsNkJBQTZCLENBQUVNLENBQUMsQ0FBRSxDQUFDSyxDQUFDLEdBQ3BDUCxXQUFXLElBQUtYLFlBQVksQ0FBQ21CLDBCQUEwQixHQUFHLENBQUMsQ0FBRTtNQUNwRVQsSUFBSSxHQUFHSCw2QkFBNkIsQ0FBRU0sQ0FBQyxDQUFFLENBQUNPLENBQUMsR0FDcENSLFNBQVMsSUFBS1osWUFBWSxDQUFDbUIsMEJBQTBCLEdBQUcsQ0FBQyxDQUFFO01BQ2xFYixhQUFhLENBQUVPLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQ1EsS0FBSyxDQUFFWixJQUFJLEVBQUVDLElBQUssQ0FBQztNQUMxQ0QsSUFBSSxHQUFHRiw2QkFBNkIsQ0FBRU0sQ0FBQyxDQUFFLENBQUNLLENBQUMsR0FDcENQLFdBQVcsSUFBS1gsWUFBWSxDQUFDbUIsMEJBQTBCLEdBQUcsQ0FBQyxDQUFFO01BQ3BFVCxJQUFJLEdBQUdILDZCQUE2QixDQUFFTSxDQUFDLENBQUUsQ0FBQ08sQ0FBQyxHQUNwQ1IsU0FBUyxJQUFLWixZQUFZLENBQUNtQiwwQkFBMEIsR0FBRyxDQUFDLENBQUU7TUFDbEViLGFBQWEsQ0FBRU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQ1EsS0FBSyxDQUFFWixJQUFJLEVBQUVDLElBQUssQ0FBQztJQUNoRDtFQUNGO0FBQ0YsQ0FBQztBQUVEWCxjQUFjLENBQUN1QixRQUFRLENBQUUsNkJBQTZCLEVBQUVyQiwyQkFBNEIsQ0FBQztBQUVyRixlQUFlQSwyQkFBMkIifQ==