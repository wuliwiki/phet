// Copyright 2014-2022, University of Colorado Boulder

/**
 * The 'Phase Changes' screen. Conforms to the contract specified in joist/Screen.
 *
 * @author Aaron Davis
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import Screen from '../../../joist/js/Screen.js';
import SOMConstants from '../common/SOMConstants.js';
import SOMColors from '../common/view/SOMColors.js';
import statesOfMatter from '../statesOfMatter.js';
import StatesOfMatterStrings from '../StatesOfMatterStrings.js';
import PhaseChangesIcon from './PhaseChangesIcon.js';
import PhaseChangesModel from './PhaseChangesModel.js';
import PhaseChangesScreenView from './view/PhaseChangesScreenView.js';
class PhaseChangesScreen extends Screen {
  /**
   * @param {boolean} isPotentialGraphEnabled
   * @param {Tandem} tandem
   */
  constructor(isPotentialGraphEnabled, tandem) {
    const options = {
      name: StatesOfMatterStrings.phaseChangesStringProperty,
      backgroundColorProperty: SOMColors.backgroundProperty,
      homeScreenIcon: new PhaseChangesIcon(),
      navigationBarIcon: new PhaseChangesIcon({
        size: Screen.MINIMUM_NAVBAR_ICON_SIZE,
        fill: SOMColors.navigationBarIconBackgroundProperty
      }),
      showUnselectedHomeScreenIconFrame: true,
      maxDT: SOMConstants.MAX_DT,
      tandem: tandem
    };
    super(() => new PhaseChangesModel(tandem.createTandem('model')), model => {
      return new PhaseChangesScreenView(model, isPotentialGraphEnabled, tandem.createTandem('view'));
    }, options);
  }
}
statesOfMatter.register('PhaseChangesScreen', PhaseChangesScreen);
export default PhaseChangesScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTT01Db25zdGFudHMiLCJTT01Db2xvcnMiLCJzdGF0ZXNPZk1hdHRlciIsIlN0YXRlc09mTWF0dGVyU3RyaW5ncyIsIlBoYXNlQ2hhbmdlc0ljb24iLCJQaGFzZUNoYW5nZXNNb2RlbCIsIlBoYXNlQ2hhbmdlc1NjcmVlblZpZXciLCJQaGFzZUNoYW5nZXNTY3JlZW4iLCJjb25zdHJ1Y3RvciIsImlzUG90ZW50aWFsR3JhcGhFbmFibGVkIiwidGFuZGVtIiwib3B0aW9ucyIsIm5hbWUiLCJwaGFzZUNoYW5nZXNTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiYmFja2dyb3VuZFByb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJuYXZpZ2F0aW9uQmFySWNvbiIsInNpemUiLCJNSU5JTVVNX05BVkJBUl9JQ09OX1NJWkUiLCJmaWxsIiwibmF2aWdhdGlvbkJhckljb25CYWNrZ3JvdW5kUHJvcGVydHkiLCJzaG93VW5zZWxlY3RlZEhvbWVTY3JlZW5JY29uRnJhbWUiLCJtYXhEVCIsIk1BWF9EVCIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQaGFzZUNoYW5nZXNTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdQaGFzZSBDaGFuZ2VzJyBzY3JlZW4uIENvbmZvcm1zIHRvIHRoZSBjb250cmFjdCBzcGVjaWZpZWQgaW4gam9pc3QvU2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFhcm9uIERhdmlzXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTT01Db25zdGFudHMgZnJvbSAnLi4vY29tbW9uL1NPTUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBTT01Db2xvcnMgZnJvbSAnLi4vY29tbW9uL3ZpZXcvU09NQ29sb3JzLmpzJztcclxuaW1wb3J0IHN0YXRlc09mTWF0dGVyIGZyb20gJy4uL3N0YXRlc09mTWF0dGVyLmpzJztcclxuaW1wb3J0IFN0YXRlc09mTWF0dGVyU3RyaW5ncyBmcm9tICcuLi9TdGF0ZXNPZk1hdHRlclN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUGhhc2VDaGFuZ2VzSWNvbiBmcm9tICcuL1BoYXNlQ2hhbmdlc0ljb24uanMnO1xyXG5pbXBvcnQgUGhhc2VDaGFuZ2VzTW9kZWwgZnJvbSAnLi9QaGFzZUNoYW5nZXNNb2RlbC5qcyc7XHJcbmltcG9ydCBQaGFzZUNoYW5nZXNTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9QaGFzZUNoYW5nZXNTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIFBoYXNlQ2hhbmdlc1NjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNQb3RlbnRpYWxHcmFwaEVuYWJsZWRcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGlzUG90ZW50aWFsR3JhcGhFbmFibGVkLCB0YW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogU3RhdGVzT2ZNYXR0ZXJTdHJpbmdzLnBoYXNlQ2hhbmdlc1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogU09NQ29sb3JzLmJhY2tncm91bmRQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBQaGFzZUNoYW5nZXNJY29uKCksXHJcbiAgICAgIG5hdmlnYXRpb25CYXJJY29uOiBuZXcgUGhhc2VDaGFuZ2VzSWNvbigge1xyXG4gICAgICAgIHNpemU6IFNjcmVlbi5NSU5JTVVNX05BVkJBUl9JQ09OX1NJWkUsXHJcbiAgICAgICAgZmlsbDogU09NQ29sb3JzLm5hdmlnYXRpb25CYXJJY29uQmFja2dyb3VuZFByb3BlcnR5XHJcbiAgICAgIH0gKSxcclxuICAgICAgc2hvd1Vuc2VsZWN0ZWRIb21lU2NyZWVuSWNvbkZyYW1lOiB0cnVlLFxyXG4gICAgICBtYXhEVDogU09NQ29uc3RhbnRzLk1BWF9EVCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBQaGFzZUNoYW5nZXNNb2RlbCggdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFBoYXNlQ2hhbmdlc1NjcmVlblZpZXcoIG1vZGVsLCBpc1BvdGVudGlhbEdyYXBoRW5hYmxlZCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKTtcclxuICAgICAgfSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbnN0YXRlc09mTWF0dGVyLnJlZ2lzdGVyKCAnUGhhc2VDaGFuZ2VzU2NyZWVuJywgUGhhc2VDaGFuZ2VzU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBoYXNlQ2hhbmdlc1NjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFlBQVksTUFBTSwyQkFBMkI7QUFDcEQsT0FBT0MsU0FBUyxNQUFNLDZCQUE2QjtBQUNuRCxPQUFPQyxjQUFjLE1BQU0sc0JBQXNCO0FBQ2pELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUMvRCxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBQ3RELE9BQU9DLHNCQUFzQixNQUFNLGtDQUFrQztBQUVyRSxNQUFNQyxrQkFBa0IsU0FBU1IsTUFBTSxDQUFDO0VBRXRDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VTLFdBQVdBLENBQUVDLHVCQUF1QixFQUFFQyxNQUFNLEVBQUc7SUFFN0MsTUFBTUMsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRVQscUJBQXFCLENBQUNVLDBCQUEwQjtNQUN0REMsdUJBQXVCLEVBQUViLFNBQVMsQ0FBQ2Msa0JBQWtCO01BQ3JEQyxjQUFjLEVBQUUsSUFBSVosZ0JBQWdCLENBQUMsQ0FBQztNQUN0Q2EsaUJBQWlCLEVBQUUsSUFBSWIsZ0JBQWdCLENBQUU7UUFDdkNjLElBQUksRUFBRW5CLE1BQU0sQ0FBQ29CLHdCQUF3QjtRQUNyQ0MsSUFBSSxFQUFFbkIsU0FBUyxDQUFDb0I7TUFDbEIsQ0FBRSxDQUFDO01BQ0hDLGlDQUFpQyxFQUFFLElBQUk7TUFDdkNDLEtBQUssRUFBRXZCLFlBQVksQ0FBQ3dCLE1BQU07TUFDMUJkLE1BQU0sRUFBRUE7SUFDVixDQUFDO0lBRUQsS0FBSyxDQUNILE1BQU0sSUFBSUwsaUJBQWlCLENBQUVLLE1BQU0sQ0FBQ2UsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQzdEQyxLQUFLLElBQUk7TUFDUCxPQUFPLElBQUlwQixzQkFBc0IsQ0FBRW9CLEtBQUssRUFBRWpCLHVCQUF1QixFQUFFQyxNQUFNLENBQUNlLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQztJQUNwRyxDQUFDLEVBQ0RkLE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVQsY0FBYyxDQUFDeUIsUUFBUSxDQUFFLG9CQUFvQixFQUFFcEIsa0JBQW1CLENBQUM7QUFDbkUsZUFBZUEsa0JBQWtCIn0=