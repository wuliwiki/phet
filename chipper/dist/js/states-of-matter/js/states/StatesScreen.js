// Copyright 2014-2022, University of Colorado Boulder

/**
 * The 'Solid Liquid Gas' screen. Conforms to the contract specified in joist/Screen.
 *
 * @author Aaron Davis
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import Screen from '../../../joist/js/Screen.js';
import MultipleParticleModel from '../common/model/MultipleParticleModel.js';
import SOMConstants from '../common/SOMConstants.js';
import SubstanceType from '../common/SubstanceType.js';
import SOMColors from '../common/view/SOMColors.js';
import statesOfMatter from '../statesOfMatter.js';
import StatesOfMatterStrings from '../StatesOfMatterStrings.js';
import StatesIcon from './StatesIcon.js';
import StatesScreenView from './view/StatesScreenView.js';
class StatesScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const options = {
      name: StatesOfMatterStrings.statesStringProperty,
      backgroundColorProperty: SOMColors.backgroundProperty,
      homeScreenIcon: new StatesIcon(),
      navigationBarIcon: new StatesIcon({
        size: Screen.MINIMUM_NAVBAR_ICON_SIZE,
        fill: SOMColors.navigationBarIconBackgroundProperty
      }),
      showUnselectedHomeScreenIconFrame: true,
      maxDT: SOMConstants.MAX_DT,
      tandem: tandem
    };

    // remove the adjustable atom from the list of substances that are supported in this screen
    const validSubstances = SubstanceType.VALUES.filter(substance => substance !== SubstanceType.ADJUSTABLE_ATOM);
    super(() => {
      return new MultipleParticleModel(tandem.createTandem('model'), {
        validSubstances: validSubstances
      });
    }, model => new StatesScreenView(model, tandem.createTandem('view')), options);
  }
}
statesOfMatter.register('StatesScreen', StatesScreen);
export default StatesScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJNdWx0aXBsZVBhcnRpY2xlTW9kZWwiLCJTT01Db25zdGFudHMiLCJTdWJzdGFuY2VUeXBlIiwiU09NQ29sb3JzIiwic3RhdGVzT2ZNYXR0ZXIiLCJTdGF0ZXNPZk1hdHRlclN0cmluZ3MiLCJTdGF0ZXNJY29uIiwiU3RhdGVzU2NyZWVuVmlldyIsIlN0YXRlc1NjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwib3B0aW9ucyIsIm5hbWUiLCJzdGF0ZXNTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiYmFja2dyb3VuZFByb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJuYXZpZ2F0aW9uQmFySWNvbiIsInNpemUiLCJNSU5JTVVNX05BVkJBUl9JQ09OX1NJWkUiLCJmaWxsIiwibmF2aWdhdGlvbkJhckljb25CYWNrZ3JvdW5kUHJvcGVydHkiLCJzaG93VW5zZWxlY3RlZEhvbWVTY3JlZW5JY29uRnJhbWUiLCJtYXhEVCIsIk1BWF9EVCIsInZhbGlkU3Vic3RhbmNlcyIsIlZBTFVFUyIsImZpbHRlciIsInN1YnN0YW5jZSIsIkFESlVTVEFCTEVfQVRPTSIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdGF0ZXNTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdTb2xpZCBMaXF1aWQgR2FzJyBzY3JlZW4uIENvbmZvcm1zIHRvIHRoZSBjb250cmFjdCBzcGVjaWZpZWQgaW4gam9pc3QvU2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFhcm9uIERhdmlzXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBNdWx0aXBsZVBhcnRpY2xlTW9kZWwgZnJvbSAnLi4vY29tbW9uL21vZGVsL011bHRpcGxlUGFydGljbGVNb2RlbC5qcyc7XHJcbmltcG9ydCBTT01Db25zdGFudHMgZnJvbSAnLi4vY29tbW9uL1NPTUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBTdWJzdGFuY2VUeXBlIGZyb20gJy4uL2NvbW1vbi9TdWJzdGFuY2VUeXBlLmpzJztcclxuaW1wb3J0IFNPTUNvbG9ycyBmcm9tICcuLi9jb21tb24vdmlldy9TT01Db2xvcnMuanMnO1xyXG5pbXBvcnQgc3RhdGVzT2ZNYXR0ZXIgZnJvbSAnLi4vc3RhdGVzT2ZNYXR0ZXIuanMnO1xyXG5pbXBvcnQgU3RhdGVzT2ZNYXR0ZXJTdHJpbmdzIGZyb20gJy4uL1N0YXRlc09mTWF0dGVyU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBTdGF0ZXNJY29uIGZyb20gJy4vU3RhdGVzSWNvbi5qcyc7XHJcbmltcG9ydCBTdGF0ZXNTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9TdGF0ZXNTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIFN0YXRlc1NjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IFN0YXRlc09mTWF0dGVyU3RyaW5ncy5zdGF0ZXNTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IFNPTUNvbG9ycy5iYWNrZ3JvdW5kUHJvcGVydHksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU3RhdGVzSWNvbigpLFxyXG4gICAgICBuYXZpZ2F0aW9uQmFySWNvbjogbmV3IFN0YXRlc0ljb24oIHtcclxuICAgICAgICBzaXplOiBTY3JlZW4uTUlOSU1VTV9OQVZCQVJfSUNPTl9TSVpFLFxyXG4gICAgICAgIGZpbGw6IFNPTUNvbG9ycy5uYXZpZ2F0aW9uQmFySWNvbkJhY2tncm91bmRQcm9wZXJ0eVxyXG4gICAgICB9ICksXHJcbiAgICAgIHNob3dVbnNlbGVjdGVkSG9tZVNjcmVlbkljb25GcmFtZTogdHJ1ZSxcclxuICAgICAgbWF4RFQ6IFNPTUNvbnN0YW50cy5NQVhfRFQsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHJlbW92ZSB0aGUgYWRqdXN0YWJsZSBhdG9tIGZyb20gdGhlIGxpc3Qgb2Ygc3Vic3RhbmNlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgaW4gdGhpcyBzY3JlZW5cclxuICAgIGNvbnN0IHZhbGlkU3Vic3RhbmNlcyA9IFN1YnN0YW5jZVR5cGUuVkFMVUVTLmZpbHRlciggc3Vic3RhbmNlID0+IHN1YnN0YW5jZSAhPT0gU3Vic3RhbmNlVHlwZS5BREpVU1RBQkxFX0FUT00gKTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgTXVsdGlwbGVQYXJ0aWNsZU1vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICksIHsgdmFsaWRTdWJzdGFuY2VzOiB2YWxpZFN1YnN0YW5jZXMgfSApO1xyXG4gICAgICB9LFxyXG4gICAgICBtb2RlbCA9PiBuZXcgU3RhdGVzU2NyZWVuVmlldyggbW9kZWwsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5zdGF0ZXNPZk1hdHRlci5yZWdpc3RlciggJ1N0YXRlc1NjcmVlbicsIFN0YXRlc1NjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBTdGF0ZXNTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxxQkFBcUIsTUFBTSwwQ0FBMEM7QUFDNUUsT0FBT0MsWUFBWSxNQUFNLDJCQUEyQjtBQUNwRCxPQUFPQyxhQUFhLE1BQU0sNEJBQTRCO0FBQ3RELE9BQU9DLFNBQVMsTUFBTSw2QkFBNkI7QUFDbkQsT0FBT0MsY0FBYyxNQUFNLHNCQUFzQjtBQUNqRCxPQUFPQyxxQkFBcUIsTUFBTSw2QkFBNkI7QUFDL0QsT0FBT0MsVUFBVSxNQUFNLGlCQUFpQjtBQUN4QyxPQUFPQyxnQkFBZ0IsTUFBTSw0QkFBNEI7QUFFekQsTUFBTUMsWUFBWSxTQUFTVCxNQUFNLENBQUM7RUFFaEM7QUFDRjtBQUNBO0VBQ0VVLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQixNQUFNQyxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFUCxxQkFBcUIsQ0FBQ1Esb0JBQW9CO01BQ2hEQyx1QkFBdUIsRUFBRVgsU0FBUyxDQUFDWSxrQkFBa0I7TUFDckRDLGNBQWMsRUFBRSxJQUFJVixVQUFVLENBQUMsQ0FBQztNQUNoQ1csaUJBQWlCLEVBQUUsSUFBSVgsVUFBVSxDQUFFO1FBQ2pDWSxJQUFJLEVBQUVuQixNQUFNLENBQUNvQix3QkFBd0I7UUFDckNDLElBQUksRUFBRWpCLFNBQVMsQ0FBQ2tCO01BQ2xCLENBQUUsQ0FBQztNQUNIQyxpQ0FBaUMsRUFBRSxJQUFJO01BQ3ZDQyxLQUFLLEVBQUV0QixZQUFZLENBQUN1QixNQUFNO01BQzFCZCxNQUFNLEVBQUVBO0lBQ1YsQ0FBQzs7SUFFRDtJQUNBLE1BQU1lLGVBQWUsR0FBR3ZCLGFBQWEsQ0FBQ3dCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFFQyxTQUFTLElBQUlBLFNBQVMsS0FBSzFCLGFBQWEsQ0FBQzJCLGVBQWdCLENBQUM7SUFFL0csS0FBSyxDQUNILE1BQU07TUFDSixPQUFPLElBQUk3QixxQkFBcUIsQ0FBRVUsTUFBTSxDQUFDb0IsWUFBWSxDQUFFLE9BQVEsQ0FBQyxFQUFFO1FBQUVMLGVBQWUsRUFBRUE7TUFBZ0IsQ0FBRSxDQUFDO0lBQzFHLENBQUMsRUFDRE0sS0FBSyxJQUFJLElBQUl4QixnQkFBZ0IsQ0FBRXdCLEtBQUssRUFBRXJCLE1BQU0sQ0FBQ29CLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUNyRW5CLE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVAsY0FBYyxDQUFDNEIsUUFBUSxDQUFFLGNBQWMsRUFBRXhCLFlBQWEsQ0FBQztBQUN2RCxlQUFlQSxZQUFZIn0=