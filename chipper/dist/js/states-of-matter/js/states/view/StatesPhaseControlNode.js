// Copyright 2014-2022, University of Colorado Boulder

/**
 * A node that allows user to select the phase of a substance.
 *
 * @author Siddhartha Chinthapally (Actual Concepts)
 * @author John Blanco
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationDeprecatedProperty from '../../../../axon/js/EnumerationDeprecatedProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, HStrut, Image, Node, Text, VBox } from '../../../../scenery/js/imports.js';
import BooleanRectangularStickyToggleButton from '../../../../sun/js/buttons/BooleanRectangularStickyToggleButton.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import gasIcon_png from '../../../mipmaps/gasIcon_png.js';
import liquidIcon_png from '../../../mipmaps/liquidIcon_png.js';
import solidIcon_png from '../../../mipmaps/solidIcon_png.js';
import PhaseStateEnum from '../../common/PhaseStateEnum.js';
import statesOfMatter from '../../statesOfMatter.js';
import StatesOfMatterStrings from '../../StatesOfMatterStrings.js';
const gasString = StatesOfMatterStrings.Gas;
const liquidString = StatesOfMatterStrings.Liquid;
const solidString = StatesOfMatterStrings.Solid;

// constants
const DEFAULT_BUTTON_WIDTH = 160;
const ICON_HEIGHT = 25; // in screen coordinates, empirically determined
const SELECTED_BUTTON_COLOR = '#a5a7ff';
const DESELECTED_BUTTON_COLOR = '#F8D980';
class StatesPhaseControlNode extends Node {
  /**
   * @param {MultiParticleModel} model
   * @param {Object} [options] that can be passed on to the underlying node
   */
  constructor(model, options) {
    options = merge({
      xMargin: 5,
      yMargin: 8,
      fill: '#C8C8C8',
      stroke: 'gray',
      lineWidth: 1,
      cornerRadius: 5,
      // radius of the rounded corners on the background
      buttonWidth: DEFAULT_BUTTON_WIDTH,
      tandem: Tandem.REQUIRED
    }, options);
    super();

    // state of the atoms/molecules
    const stateProperty = new EnumerationDeprecatedProperty(PhaseStateEnum, PhaseStateEnum.UNKNOWN, {
      tandem: options.tandem.createTandem('stateProperty'),
      phetioReadOnly: true
    });

    // boolean properties corresponding to each state, one for each of the phase state selection buttons
    const solidSelectedProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('solidSelectedProperty')
    });
    const liquidSelectedProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('liquidSelectedProperty')
    });
    const gasSelectedProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('gasSelectedProperty')
    });

    // convenience constant
    const tandem = options.tandem;

    // create solid state selection button
    const solidStateButton = new BooleanRectangularStickyToggleButton(solidSelectedProperty, {
      content: createButtonContent(solidIcon_png, solidString, options.buttonWidth),
      maxWidth: options.buttonWidth,
      minWidth: options.buttonWidth,
      tandem: tandem.createTandem('solidStateButton')
    });

    // create liquid state selection button
    const liquidStateButton = new BooleanRectangularStickyToggleButton(liquidSelectedProperty, {
      content: createButtonContent(liquidIcon_png, liquidString, options.buttonWidth),
      maxWidth: options.buttonWidth,
      minWidth: options.buttonWidth,
      tandem: tandem.createTandem('liquidStateButton')
    });

    // create gas state selection button
    const gasStateButton = new BooleanRectangularStickyToggleButton(gasSelectedProperty, {
      content: createButtonContent(gasIcon_png, gasString, options.buttonWidth),
      maxWidth: options.buttonWidth,
      minWidth: options.buttonWidth,
      tandem: tandem.createTandem('gasStateButton')
    });

    // set the state when the buttons are pushed
    solidSelectedProperty.link(selected => {
      if (selected) {
        stateProperty.value = PhaseStateEnum.SOLID;
      }
    });
    liquidSelectedProperty.link(selected => {
      if (selected) {
        stateProperty.value = PhaseStateEnum.LIQUID;
      }
    });
    gasSelectedProperty.link(selected => {
      if (selected) {
        stateProperty.value = PhaseStateEnum.GAS;
      }
    });

    // Set the model state and update the button appearances when the user presses one of the buttons.
    stateProperty.link(state => {
      if (state !== PhaseStateEnum.UNKNOWN) {
        // Only set the phase in the model if this change comes directly from user interaction and not from PhET-iO state.
        // If the change is from the state engine, then the phase will be set implicitly when the positions and velocities
        // of the molecules are set.
        if (!phet.joist.sim.isSettingPhetioStateProperty.value) {
          model.setPhase(state);
        }
      }
      solidStateButton.baseColor = state === PhaseStateEnum.SOLID ? SELECTED_BUTTON_COLOR : DESELECTED_BUTTON_COLOR;
      solidStateButton.pickable = state !== PhaseStateEnum.SOLID;
      liquidStateButton.baseColor = state === PhaseStateEnum.LIQUID ? SELECTED_BUTTON_COLOR : DESELECTED_BUTTON_COLOR;
      liquidStateButton.pickable = state !== PhaseStateEnum.LIQUID;
      gasStateButton.baseColor = state === PhaseStateEnum.GAS ? SELECTED_BUTTON_COLOR : DESELECTED_BUTTON_COLOR;
      gasStateButton.pickable = state !== PhaseStateEnum.GAS;
      solidSelectedProperty.value = state === PhaseStateEnum.SOLID;
      liquidSelectedProperty.value = state === PhaseStateEnum.LIQUID;
      gasSelectedProperty.value = state === PhaseStateEnum.GAS;
    });

    // enable/disable the buttons based on the model state
    model.isExplodedProperty.link(isExploded => {
      solidStateButton.setEnabled(!isExploded);
      liquidStateButton.setEnabled(!isExploded);
      gasStateButton.setEnabled(!isExploded);
    });

    // if the user changes the temperature, the phase state becomes undefined
    model.heatingCoolingAmountProperty.lazyLink(() => {
      stateProperty.value = PhaseStateEnum.UNKNOWN;
    });

    // if the model gets reset, set the local phase state value to be undefined until the user selects a phase
    model.resetEmitter.addListener(() => {
      stateProperty.value = PhaseStateEnum.UNKNOWN;
    });

    // put the buttons together in a single VBox
    const buttons = new VBox({
      children: [solidStateButton, liquidStateButton, gasStateButton],
      spacing: 10,
      align: 'center'
    });
    this.addChild(buttons);
    this.mutate(options);
  }
}

// helper function that puts icon and label together with some struts into an HBox for using as content node on button
const createButtonContent = (iconImage, string, buttonWidth) => {
  assert && assert(iconImage && string, 'both icon and label must be defined');

  // Create the image node and scale it so that it is the desired height.  Note that the width may vary.
  const imageNode = new Image(iconImage);
  imageNode.scale(ICON_HEIGHT / imageNode.height);

  // Create the text node, limiting it to 1/2 of the button width.
  const label = new Text(string, {
    font: new PhetFont(14),
    fill: 'black',
    maxWidth: buttonWidth / 2
  });

  // create the left strut such that the icons will be centered around the same horizontal position
  const desiredIconHorizontalCenter = buttonWidth * 0.25; // multiplier is empirically determined
  const leftStrutWidth = Math.max(desiredIconHorizontalCenter - imageNode.width / 2, 0);
  assert && assert(leftStrutWidth > 0, 'icon is too wide, either adjust it or adjust the icon position multiplier');

  // create the center strut such that the labels are centered around the same horizontal position
  const desiredLabelHorizontalCenter = buttonWidth * 0.65;
  const centerStrutWidth = Math.max(desiredLabelHorizontalCenter - label.width / 2 - leftStrutWidth - imageNode.width, 0);
  assert && assert(centerStrutWidth >= 0, 'label is too wide - was it scaled properly?');

  // create the right strut to fill out the rest of the button
  const rightStrutWidth = buttonWidth - leftStrutWidth - imageNode.width - centerStrutWidth - label.width;
  return new HBox({
    children: [new HStrut(leftStrutWidth), imageNode, new HStrut(centerStrutWidth), label, new HStrut(rightStrutWidth)],
    spacing: 0
  });
};
statesOfMatter.register('StatesPhaseControlNode', StatesPhaseControlNode);
export default StatesPhaseControlNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSIsIm1lcmdlIiwiUGhldEZvbnQiLCJIQm94IiwiSFN0cnV0IiwiSW1hZ2UiLCJOb2RlIiwiVGV4dCIsIlZCb3giLCJCb29sZWFuUmVjdGFuZ3VsYXJTdGlja3lUb2dnbGVCdXR0b24iLCJUYW5kZW0iLCJnYXNJY29uX3BuZyIsImxpcXVpZEljb25fcG5nIiwic29saWRJY29uX3BuZyIsIlBoYXNlU3RhdGVFbnVtIiwic3RhdGVzT2ZNYXR0ZXIiLCJTdGF0ZXNPZk1hdHRlclN0cmluZ3MiLCJnYXNTdHJpbmciLCJHYXMiLCJsaXF1aWRTdHJpbmciLCJMaXF1aWQiLCJzb2xpZFN0cmluZyIsIlNvbGlkIiwiREVGQVVMVF9CVVRUT05fV0lEVEgiLCJJQ09OX0hFSUdIVCIsIlNFTEVDVEVEX0JVVFRPTl9DT0xPUiIsIkRFU0VMRUNURURfQlVUVE9OX0NPTE9SIiwiU3RhdGVzUGhhc2VDb250cm9sTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJvcHRpb25zIiwieE1hcmdpbiIsInlNYXJnaW4iLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwiY29ybmVyUmFkaXVzIiwiYnV0dG9uV2lkdGgiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsInN0YXRlUHJvcGVydHkiLCJVTktOT1dOIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvUmVhZE9ubHkiLCJzb2xpZFNlbGVjdGVkUHJvcGVydHkiLCJsaXF1aWRTZWxlY3RlZFByb3BlcnR5IiwiZ2FzU2VsZWN0ZWRQcm9wZXJ0eSIsInNvbGlkU3RhdGVCdXR0b24iLCJjb250ZW50IiwiY3JlYXRlQnV0dG9uQ29udGVudCIsIm1heFdpZHRoIiwibWluV2lkdGgiLCJsaXF1aWRTdGF0ZUJ1dHRvbiIsImdhc1N0YXRlQnV0dG9uIiwibGluayIsInNlbGVjdGVkIiwidmFsdWUiLCJTT0xJRCIsIkxJUVVJRCIsIkdBUyIsInN0YXRlIiwicGhldCIsImpvaXN0Iiwic2ltIiwiaXNTZXR0aW5nUGhldGlvU3RhdGVQcm9wZXJ0eSIsInNldFBoYXNlIiwiYmFzZUNvbG9yIiwicGlja2FibGUiLCJpc0V4cGxvZGVkUHJvcGVydHkiLCJpc0V4cGxvZGVkIiwic2V0RW5hYmxlZCIsImhlYXRpbmdDb29saW5nQW1vdW50UHJvcGVydHkiLCJsYXp5TGluayIsInJlc2V0RW1pdHRlciIsImFkZExpc3RlbmVyIiwiYnV0dG9ucyIsImNoaWxkcmVuIiwic3BhY2luZyIsImFsaWduIiwiYWRkQ2hpbGQiLCJtdXRhdGUiLCJpY29uSW1hZ2UiLCJzdHJpbmciLCJhc3NlcnQiLCJpbWFnZU5vZGUiLCJzY2FsZSIsImhlaWdodCIsImxhYmVsIiwiZm9udCIsImRlc2lyZWRJY29uSG9yaXpvbnRhbENlbnRlciIsImxlZnRTdHJ1dFdpZHRoIiwiTWF0aCIsIm1heCIsIndpZHRoIiwiZGVzaXJlZExhYmVsSG9yaXpvbnRhbENlbnRlciIsImNlbnRlclN0cnV0V2lkdGgiLCJyaWdodFN0cnV0V2lkdGgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN0YXRlc1BoYXNlQ29udHJvbE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBub2RlIHRoYXQgYWxsb3dzIHVzZXIgdG8gc2VsZWN0IHRoZSBwaGFzZSBvZiBhIHN1YnN0YW5jZS5cclxuICpcclxuICogQGF1dGhvciBTaWRkaGFydGhhIENoaW50aGFwYWxseSAoQWN0dWFsIENvbmNlcHRzKVxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBIU3RydXQsIEltYWdlLCBOb2RlLCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEJvb2xlYW5SZWN0YW5ndWxhclN0aWNreVRvZ2dsZUJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9Cb29sZWFuUmVjdGFuZ3VsYXJTdGlja3lUb2dnbGVCdXR0b24uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZ2FzSWNvbl9wbmcgZnJvbSAnLi4vLi4vLi4vbWlwbWFwcy9nYXNJY29uX3BuZy5qcyc7XHJcbmltcG9ydCBsaXF1aWRJY29uX3BuZyBmcm9tICcuLi8uLi8uLi9taXBtYXBzL2xpcXVpZEljb25fcG5nLmpzJztcclxuaW1wb3J0IHNvbGlkSWNvbl9wbmcgZnJvbSAnLi4vLi4vLi4vbWlwbWFwcy9zb2xpZEljb25fcG5nLmpzJztcclxuaW1wb3J0IFBoYXNlU3RhdGVFbnVtIGZyb20gJy4uLy4uL2NvbW1vbi9QaGFzZVN0YXRlRW51bS5qcyc7XHJcbmltcG9ydCBzdGF0ZXNPZk1hdHRlciBmcm9tICcuLi8uLi9zdGF0ZXNPZk1hdHRlci5qcyc7XHJcbmltcG9ydCBTdGF0ZXNPZk1hdHRlclN0cmluZ3MgZnJvbSAnLi4vLi4vU3RhdGVzT2ZNYXR0ZXJTdHJpbmdzLmpzJztcclxuXHJcbmNvbnN0IGdhc1N0cmluZyA9IFN0YXRlc09mTWF0dGVyU3RyaW5ncy5HYXM7XHJcbmNvbnN0IGxpcXVpZFN0cmluZyA9IFN0YXRlc09mTWF0dGVyU3RyaW5ncy5MaXF1aWQ7XHJcbmNvbnN0IHNvbGlkU3RyaW5nID0gU3RhdGVzT2ZNYXR0ZXJTdHJpbmdzLlNvbGlkO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IERFRkFVTFRfQlVUVE9OX1dJRFRIID0gMTYwO1xyXG5jb25zdCBJQ09OX0hFSUdIVCA9IDI1OyAvLyBpbiBzY3JlZW4gY29vcmRpbmF0ZXMsIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuY29uc3QgU0VMRUNURURfQlVUVE9OX0NPTE9SID0gJyNhNWE3ZmYnO1xyXG5jb25zdCBERVNFTEVDVEVEX0JVVFRPTl9DT0xPUiA9ICcjRjhEOTgwJztcclxuXHJcbmNsYXNzIFN0YXRlc1BoYXNlQ29udHJvbE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtNdWx0aVBhcnRpY2xlTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSB0aGF0IGNhbiBiZSBwYXNzZWQgb24gdG8gdGhlIHVuZGVybHlpbmcgbm9kZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgeE1hcmdpbjogNSxcclxuICAgICAgeU1hcmdpbjogOCxcclxuICAgICAgZmlsbDogJyNDOEM4QzgnLFxyXG4gICAgICBzdHJva2U6ICdncmF5JyxcclxuICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICBjb3JuZXJSYWRpdXM6IDUsIC8vIHJhZGl1cyBvZiB0aGUgcm91bmRlZCBjb3JuZXJzIG9uIHRoZSBiYWNrZ3JvdW5kXHJcbiAgICAgIGJ1dHRvbldpZHRoOiBERUZBVUxUX0JVVFRPTl9XSURUSCxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIHN0YXRlIG9mIHRoZSBhdG9tcy9tb2xlY3VsZXNcclxuICAgIGNvbnN0IHN0YXRlUHJvcGVydHkgPSBuZXcgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkoIFBoYXNlU3RhdGVFbnVtLCBQaGFzZVN0YXRlRW51bS5VTktOT1dOLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3RhdGVQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBib29sZWFuIHByb3BlcnRpZXMgY29ycmVzcG9uZGluZyB0byBlYWNoIHN0YXRlLCBvbmUgZm9yIGVhY2ggb2YgdGhlIHBoYXNlIHN0YXRlIHNlbGVjdGlvbiBidXR0b25zXHJcbiAgICBjb25zdCBzb2xpZFNlbGVjdGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NvbGlkU2VsZWN0ZWRQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgbGlxdWlkU2VsZWN0ZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGlxdWlkU2VsZWN0ZWRQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgZ2FzU2VsZWN0ZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnZ2FzU2VsZWN0ZWRQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGNvbnZlbmllbmNlIGNvbnN0YW50XHJcbiAgICBjb25zdCB0YW5kZW0gPSBvcHRpb25zLnRhbmRlbTtcclxuXHJcbiAgICAvLyBjcmVhdGUgc29saWQgc3RhdGUgc2VsZWN0aW9uIGJ1dHRvblxyXG4gICAgY29uc3Qgc29saWRTdGF0ZUJ1dHRvbiA9IG5ldyBCb29sZWFuUmVjdGFuZ3VsYXJTdGlja3lUb2dnbGVCdXR0b24oIHNvbGlkU2VsZWN0ZWRQcm9wZXJ0eSwge1xyXG4gICAgICBjb250ZW50OiBjcmVhdGVCdXR0b25Db250ZW50KCBzb2xpZEljb25fcG5nLCBzb2xpZFN0cmluZywgb3B0aW9ucy5idXR0b25XaWR0aCApLFxyXG4gICAgICBtYXhXaWR0aDogb3B0aW9ucy5idXR0b25XaWR0aCxcclxuICAgICAgbWluV2lkdGg6IG9wdGlvbnMuYnV0dG9uV2lkdGgsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NvbGlkU3RhdGVCdXR0b24nIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgbGlxdWlkIHN0YXRlIHNlbGVjdGlvbiBidXR0b25cclxuICAgIGNvbnN0IGxpcXVpZFN0YXRlQnV0dG9uID0gbmV3IEJvb2xlYW5SZWN0YW5ndWxhclN0aWNreVRvZ2dsZUJ1dHRvbiggbGlxdWlkU2VsZWN0ZWRQcm9wZXJ0eSwge1xyXG4gICAgICBjb250ZW50OiBjcmVhdGVCdXR0b25Db250ZW50KCBsaXF1aWRJY29uX3BuZywgbGlxdWlkU3RyaW5nLCBvcHRpb25zLmJ1dHRvbldpZHRoICksXHJcbiAgICAgIG1heFdpZHRoOiBvcHRpb25zLmJ1dHRvbldpZHRoLFxyXG4gICAgICBtaW5XaWR0aDogb3B0aW9ucy5idXR0b25XaWR0aCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGlxdWlkU3RhdGVCdXR0b24nIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgZ2FzIHN0YXRlIHNlbGVjdGlvbiBidXR0b25cclxuICAgIGNvbnN0IGdhc1N0YXRlQnV0dG9uID0gbmV3IEJvb2xlYW5SZWN0YW5ndWxhclN0aWNreVRvZ2dsZUJ1dHRvbiggZ2FzU2VsZWN0ZWRQcm9wZXJ0eSwge1xyXG4gICAgICBjb250ZW50OiBjcmVhdGVCdXR0b25Db250ZW50KCBnYXNJY29uX3BuZywgZ2FzU3RyaW5nLCBvcHRpb25zLmJ1dHRvbldpZHRoICksXHJcbiAgICAgIG1heFdpZHRoOiBvcHRpb25zLmJ1dHRvbldpZHRoLFxyXG4gICAgICBtaW5XaWR0aDogb3B0aW9ucy5idXR0b25XaWR0aCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnZ2FzU3RhdGVCdXR0b24nIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBzZXQgdGhlIHN0YXRlIHdoZW4gdGhlIGJ1dHRvbnMgYXJlIHB1c2hlZFxyXG4gICAgc29saWRTZWxlY3RlZFByb3BlcnR5LmxpbmsoIHNlbGVjdGVkID0+IHsgaWYgKCBzZWxlY3RlZCApIHsgc3RhdGVQcm9wZXJ0eS52YWx1ZSA9IFBoYXNlU3RhdGVFbnVtLlNPTElEOyB9IH0gKTtcclxuICAgIGxpcXVpZFNlbGVjdGVkUHJvcGVydHkubGluayggc2VsZWN0ZWQgPT4geyBpZiAoIHNlbGVjdGVkICkgeyBzdGF0ZVByb3BlcnR5LnZhbHVlID0gUGhhc2VTdGF0ZUVudW0uTElRVUlEOyB9IH0gKTtcclxuICAgIGdhc1NlbGVjdGVkUHJvcGVydHkubGluayggc2VsZWN0ZWQgPT4geyBpZiAoIHNlbGVjdGVkICkgeyBzdGF0ZVByb3BlcnR5LnZhbHVlID0gUGhhc2VTdGF0ZUVudW0uR0FTOyB9IH0gKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIG1vZGVsIHN0YXRlIGFuZCB1cGRhdGUgdGhlIGJ1dHRvbiBhcHBlYXJhbmNlcyB3aGVuIHRoZSB1c2VyIHByZXNzZXMgb25lIG9mIHRoZSBidXR0b25zLlxyXG4gICAgc3RhdGVQcm9wZXJ0eS5saW5rKCBzdGF0ZSA9PiB7XHJcbiAgICAgIGlmICggc3RhdGUgIT09IFBoYXNlU3RhdGVFbnVtLlVOS05PV04gKSB7XHJcblxyXG4gICAgICAgIC8vIE9ubHkgc2V0IHRoZSBwaGFzZSBpbiB0aGUgbW9kZWwgaWYgdGhpcyBjaGFuZ2UgY29tZXMgZGlyZWN0bHkgZnJvbSB1c2VyIGludGVyYWN0aW9uIGFuZCBub3QgZnJvbSBQaEVULWlPIHN0YXRlLlxyXG4gICAgICAgIC8vIElmIHRoZSBjaGFuZ2UgaXMgZnJvbSB0aGUgc3RhdGUgZW5naW5lLCB0aGVuIHRoZSBwaGFzZSB3aWxsIGJlIHNldCBpbXBsaWNpdGx5IHdoZW4gdGhlIHBvc2l0aW9ucyBhbmQgdmVsb2NpdGllc1xyXG4gICAgICAgIC8vIG9mIHRoZSBtb2xlY3VsZXMgYXJlIHNldC5cclxuICAgICAgICBpZiAoICFwaGV0LmpvaXN0LnNpbS5pc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5LnZhbHVlICkge1xyXG4gICAgICAgICAgbW9kZWwuc2V0UGhhc2UoIHN0YXRlICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzb2xpZFN0YXRlQnV0dG9uLmJhc2VDb2xvciA9IHN0YXRlID09PSBQaGFzZVN0YXRlRW51bS5TT0xJRCA/IFNFTEVDVEVEX0JVVFRPTl9DT0xPUiA6IERFU0VMRUNURURfQlVUVE9OX0NPTE9SO1xyXG4gICAgICBzb2xpZFN0YXRlQnV0dG9uLnBpY2thYmxlID0gc3RhdGUgIT09IFBoYXNlU3RhdGVFbnVtLlNPTElEO1xyXG4gICAgICBsaXF1aWRTdGF0ZUJ1dHRvbi5iYXNlQ29sb3IgPSBzdGF0ZSA9PT0gUGhhc2VTdGF0ZUVudW0uTElRVUlEID8gU0VMRUNURURfQlVUVE9OX0NPTE9SIDogREVTRUxFQ1RFRF9CVVRUT05fQ09MT1I7XHJcbiAgICAgIGxpcXVpZFN0YXRlQnV0dG9uLnBpY2thYmxlID0gc3RhdGUgIT09IFBoYXNlU3RhdGVFbnVtLkxJUVVJRDtcclxuICAgICAgZ2FzU3RhdGVCdXR0b24uYmFzZUNvbG9yID0gc3RhdGUgPT09IFBoYXNlU3RhdGVFbnVtLkdBUyA/IFNFTEVDVEVEX0JVVFRPTl9DT0xPUiA6IERFU0VMRUNURURfQlVUVE9OX0NPTE9SO1xyXG4gICAgICBnYXNTdGF0ZUJ1dHRvbi5waWNrYWJsZSA9IHN0YXRlICE9PSBQaGFzZVN0YXRlRW51bS5HQVM7XHJcbiAgICAgIHNvbGlkU2VsZWN0ZWRQcm9wZXJ0eS52YWx1ZSA9IHN0YXRlID09PSBQaGFzZVN0YXRlRW51bS5TT0xJRDtcclxuICAgICAgbGlxdWlkU2VsZWN0ZWRQcm9wZXJ0eS52YWx1ZSA9IHN0YXRlID09PSBQaGFzZVN0YXRlRW51bS5MSVFVSUQ7XHJcbiAgICAgIGdhc1NlbGVjdGVkUHJvcGVydHkudmFsdWUgPSBzdGF0ZSA9PT0gUGhhc2VTdGF0ZUVudW0uR0FTO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGVuYWJsZS9kaXNhYmxlIHRoZSBidXR0b25zIGJhc2VkIG9uIHRoZSBtb2RlbCBzdGF0ZVxyXG4gICAgbW9kZWwuaXNFeHBsb2RlZFByb3BlcnR5LmxpbmsoIGlzRXhwbG9kZWQgPT4ge1xyXG4gICAgICBzb2xpZFN0YXRlQnV0dG9uLnNldEVuYWJsZWQoICFpc0V4cGxvZGVkICk7XHJcbiAgICAgIGxpcXVpZFN0YXRlQnV0dG9uLnNldEVuYWJsZWQoICFpc0V4cGxvZGVkICk7XHJcbiAgICAgIGdhc1N0YXRlQnV0dG9uLnNldEVuYWJsZWQoICFpc0V4cGxvZGVkICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gaWYgdGhlIHVzZXIgY2hhbmdlcyB0aGUgdGVtcGVyYXR1cmUsIHRoZSBwaGFzZSBzdGF0ZSBiZWNvbWVzIHVuZGVmaW5lZFxyXG4gICAgbW9kZWwuaGVhdGluZ0Nvb2xpbmdBbW91bnRQcm9wZXJ0eS5sYXp5TGluayggKCkgPT4ge1xyXG4gICAgICBzdGF0ZVByb3BlcnR5LnZhbHVlID0gUGhhc2VTdGF0ZUVudW0uVU5LTk9XTjtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBpZiB0aGUgbW9kZWwgZ2V0cyByZXNldCwgc2V0IHRoZSBsb2NhbCBwaGFzZSBzdGF0ZSB2YWx1ZSB0byBiZSB1bmRlZmluZWQgdW50aWwgdGhlIHVzZXIgc2VsZWN0cyBhIHBoYXNlXHJcbiAgICBtb2RlbC5yZXNldEVtaXR0ZXIuYWRkTGlzdGVuZXIoICgpID0+IHsgc3RhdGVQcm9wZXJ0eS52YWx1ZSA9IFBoYXNlU3RhdGVFbnVtLlVOS05PV047IH0gKTtcclxuXHJcbiAgICAvLyBwdXQgdGhlIGJ1dHRvbnMgdG9nZXRoZXIgaW4gYSBzaW5nbGUgVkJveFxyXG4gICAgY29uc3QgYnV0dG9ucyA9IG5ldyBWQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIHNvbGlkU3RhdGVCdXR0b24sIGxpcXVpZFN0YXRlQnV0dG9uLCBnYXNTdGF0ZUJ1dHRvbiBdLFxyXG4gICAgICBzcGFjaW5nOiAxMCxcclxuICAgICAgYWxpZ246ICdjZW50ZXInXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBidXR0b25zICk7XHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuLy8gaGVscGVyIGZ1bmN0aW9uIHRoYXQgcHV0cyBpY29uIGFuZCBsYWJlbCB0b2dldGhlciB3aXRoIHNvbWUgc3RydXRzIGludG8gYW4gSEJveCBmb3IgdXNpbmcgYXMgY29udGVudCBub2RlIG9uIGJ1dHRvblxyXG5jb25zdCBjcmVhdGVCdXR0b25Db250ZW50ID0gKCBpY29uSW1hZ2UsIHN0cmluZywgYnV0dG9uV2lkdGggKSA9PiB7XHJcblxyXG4gIGFzc2VydCAmJiBhc3NlcnQoIGljb25JbWFnZSAmJiBzdHJpbmcsICdib3RoIGljb24gYW5kIGxhYmVsIG11c3QgYmUgZGVmaW5lZCcgKTtcclxuXHJcbiAgLy8gQ3JlYXRlIHRoZSBpbWFnZSBub2RlIGFuZCBzY2FsZSBpdCBzbyB0aGF0IGl0IGlzIHRoZSBkZXNpcmVkIGhlaWdodC4gIE5vdGUgdGhhdCB0aGUgd2lkdGggbWF5IHZhcnkuXHJcbiAgY29uc3QgaW1hZ2VOb2RlID0gbmV3IEltYWdlKCBpY29uSW1hZ2UgKTtcclxuICBpbWFnZU5vZGUuc2NhbGUoIElDT05fSEVJR0hUIC8gaW1hZ2VOb2RlLmhlaWdodCApO1xyXG5cclxuICAvLyBDcmVhdGUgdGhlIHRleHQgbm9kZSwgbGltaXRpbmcgaXQgdG8gMS8yIG9mIHRoZSBidXR0b24gd2lkdGguXHJcbiAgY29uc3QgbGFiZWwgPSBuZXcgVGV4dCggc3RyaW5nLCB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMTQgKSwgZmlsbDogJ2JsYWNrJywgbWF4V2lkdGg6IGJ1dHRvbldpZHRoIC8gMiB9ICk7XHJcblxyXG4gIC8vIGNyZWF0ZSB0aGUgbGVmdCBzdHJ1dCBzdWNoIHRoYXQgdGhlIGljb25zIHdpbGwgYmUgY2VudGVyZWQgYXJvdW5kIHRoZSBzYW1lIGhvcml6b250YWwgcG9zaXRpb25cclxuICBjb25zdCBkZXNpcmVkSWNvbkhvcml6b250YWxDZW50ZXIgPSBidXR0b25XaWR0aCAqIDAuMjU7IC8vIG11bHRpcGxpZXIgaXMgZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxyXG4gIGNvbnN0IGxlZnRTdHJ1dFdpZHRoID0gTWF0aC5tYXgoIGRlc2lyZWRJY29uSG9yaXpvbnRhbENlbnRlciAtICggaW1hZ2VOb2RlLndpZHRoIC8gMiApLCAwICk7XHJcbiAgYXNzZXJ0ICYmIGFzc2VydCggbGVmdFN0cnV0V2lkdGggPiAwLCAnaWNvbiBpcyB0b28gd2lkZSwgZWl0aGVyIGFkanVzdCBpdCBvciBhZGp1c3QgdGhlIGljb24gcG9zaXRpb24gbXVsdGlwbGllcicgKTtcclxuXHJcbiAgLy8gY3JlYXRlIHRoZSBjZW50ZXIgc3RydXQgc3VjaCB0aGF0IHRoZSBsYWJlbHMgYXJlIGNlbnRlcmVkIGFyb3VuZCB0aGUgc2FtZSBob3Jpem9udGFsIHBvc2l0aW9uXHJcbiAgY29uc3QgZGVzaXJlZExhYmVsSG9yaXpvbnRhbENlbnRlciA9IGJ1dHRvbldpZHRoICogMC42NTtcclxuICBjb25zdCBjZW50ZXJTdHJ1dFdpZHRoID0gTWF0aC5tYXgoIGRlc2lyZWRMYWJlbEhvcml6b250YWxDZW50ZXIgLSAoIGxhYmVsLndpZHRoIC8gMiApIC0gbGVmdFN0cnV0V2lkdGggLSBpbWFnZU5vZGUud2lkdGgsIDAgKTtcclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBjZW50ZXJTdHJ1dFdpZHRoID49IDAsICdsYWJlbCBpcyB0b28gd2lkZSAtIHdhcyBpdCBzY2FsZWQgcHJvcGVybHk/JyApO1xyXG5cclxuICAvLyBjcmVhdGUgdGhlIHJpZ2h0IHN0cnV0IHRvIGZpbGwgb3V0IHRoZSByZXN0IG9mIHRoZSBidXR0b25cclxuICBjb25zdCByaWdodFN0cnV0V2lkdGggPSBidXR0b25XaWR0aCAtIGxlZnRTdHJ1dFdpZHRoIC0gaW1hZ2VOb2RlLndpZHRoIC0gY2VudGVyU3RydXRXaWR0aCAtIGxhYmVsLndpZHRoO1xyXG5cclxuICByZXR1cm4gbmV3IEhCb3goIHtcclxuICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgIG5ldyBIU3RydXQoIGxlZnRTdHJ1dFdpZHRoICksXHJcbiAgICAgIGltYWdlTm9kZSxcclxuICAgICAgbmV3IEhTdHJ1dCggY2VudGVyU3RydXRXaWR0aCApLFxyXG4gICAgICBsYWJlbCxcclxuICAgICAgbmV3IEhTdHJ1dCggcmlnaHRTdHJ1dFdpZHRoIClcclxuICAgIF0sXHJcbiAgICBzcGFjaW5nOiAwXHJcbiAgfSApO1xyXG59O1xyXG5cclxuc3RhdGVzT2ZNYXR0ZXIucmVnaXN0ZXIoICdTdGF0ZXNQaGFzZUNvbnRyb2xOb2RlJywgU3RhdGVzUGhhc2VDb250cm9sTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBTdGF0ZXNQaGFzZUNvbnRyb2xOb2RlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLDZCQUE2QixNQUFNLHNEQUFzRDtBQUNoRyxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFD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