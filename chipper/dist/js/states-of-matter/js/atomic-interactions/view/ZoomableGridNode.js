// Copyright 2015-2022, University of Colorado Boulder

/**
 * Scenery node that shows the grid lines.  Highly leveraged from energy-skate-park's GridNode implementation.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Siddhartha Chinthapally
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import { Shape } from '../../../../kite/js/imports.js';
import merge from '../../../../phet-core/js/merge.js';
import MagnifyingGlassZoomButtonGroup from '../../../../scenery-phet/js/MagnifyingGlassZoomButtonGroup.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import ButtonNode from '../../../../sun/js/buttons/ButtonNode.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import SOMColors from '../../common/view/SOMColors.js';
import statesOfMatter from '../../statesOfMatter.js';

// constants
const MIN_LINES_HORIZONTAL = 5;
const GRID_LINES_OPTIONS = {
  stroke: SOMColors.ljGraphAxesAndGridColorProperty,
  lineWidth: 0.8,
  opacity: 0.6
};
class ZoomableGridNode extends Node {
  /**
   * @param atomsView
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} width - width of the graph
   * @param {number} height - height of the graph
   * @param {Object} [options]
   */
  constructor(atomsView, offsetX, offsetY, width, height, options) {
    options = merge({
      addZoomButtons: true,
      tandem: Tandem.REQUIRED
    }, options);
    atomsView.horizontalLineCount = MIN_LINES_HORIZONTAL;
    super(options);

    // @private horizontal grid lines
    this.horizontalLinesNode = new Path(null, GRID_LINES_OPTIONS);

    // vertical grid lines
    const verticalLinesNode = new Path(null, GRID_LINES_OPTIONS);

    // @private - zoom level, passed in to the zoom button group if zoom is enabled
    this.zoomLevelProperty = new NumberProperty(0, {
      tandem: options.tandem.createTandem('zoomFactorProperty'),
      range: new Range(-2, 0)
    });
    if (options.addZoomButtons) {
      // Create the zoom button group that will allow the user to zoom in and out on the vertical range of the grid.
      const zoomButtonGroup = new MagnifyingGlassZoomButtonGroup(this.zoomLevelProperty, {
        orientation: 'vertical',
        spacing: 5,
        // Position the zoom buttons to the left and top of the grid.  The numerical values were empirically determined
        // to match the design.
        right: offsetX - 15,
        top: offsetY - 5,
        magnifyingGlassNodeOptions: {
          glassRadius: 8
        },
        buttonOptions: {
          baseColor: '#FFD333',
          buttonAppearanceStrategy: ButtonNode.FlatAppearanceStrategy,
          xMargin: 3,
          yMargin: 3
        },
        touchAreaXDilation: 8,
        touchAreaYDilation: 8,
        tandem: options.tandem.createTandem('zoomButtonGroup')
      });
      this.addChild(zoomButtonGroup);

      // Keep a record of the default scaling factor so that we can use it for scaling up and down.
      const nominalScalingFactor = atomsView.verticalScalingFactor;

      // Update the vertical scale of the graph as well as the number of horizontal lines when the zoom level changes.
      this.zoomLevelProperty.lazyLink(zoomFactor => {
        atomsView.horizontalLineCount = MIN_LINES_HORIZONTAL - 2 * zoomFactor; // empirically determined to look decent
        this.updateHorizontalLines(offsetX, offsetY, width, height, atomsView.horizontalLineCount);
        atomsView.verticalScalingFactor = nominalScalingFactor * Math.pow(3.33, zoomFactor);
        atomsView.drawPotentialCurve();
      });
    }

    // Add the vertical grid lines.
    const verticalLineShape = new Shape();
    for (let x = 0; x < 4; x++) {
      const viewX = x * (width / 3);
      verticalLineShape.moveTo(viewX + offsetX, offsetY);
      verticalLineShape.lineTo(viewX + offsetX, height + offsetY);
    }
    verticalLinesNode.setShape(verticalLineShape);
    this.addChild(verticalLinesNode);

    // Add the horizontal grid lines.
    this.updateHorizontalLines(offsetX, offsetY, width, height, atomsView.horizontalLineCount);
    this.addChild(this.horizontalLinesNode);
  }

  /**
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} width -- width of the grid
   * @param {number} height -- height of the grid
   * @param {number} horizontalLineCount -- number of horizontal lines
   * @public
   */
  updateHorizontalLines(offsetX, offsetY, width, height, horizontalLineCount) {
    const horizontalLineShape = new Shape();
    for (let y = 0; y < horizontalLineCount; y++) {
      const viewY = y * (height / (horizontalLineCount - 1));
      horizontalLineShape.moveTo(offsetX, viewY + offsetY);
      horizontalLineShape.lineTo(width + offsetX, viewY + offsetY);
    }
    this.horizontalLinesNode.setShape(horizontalLineShape);
  }

  /**
   * restore initial state
   * @public
   */
  reset() {
    this.zoomLevelProperty.reset();
  }
}
statesOfMatter.register('ZoomableGridNode', ZoomableGridNode);
export default ZoomableGridNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiU2hhcGUiLCJtZXJnZSIsIk1hZ25pZnlpbmdHbGFzc1pvb21CdXR0b25Hcm91cCIsIk5vZGUiLCJQYXRoIiwiQnV0dG9uTm9kZSIsIlRhbmRlbSIsIlNPTUNvbG9ycyIsInN0YXRlc09mTWF0dGVyIiwiTUlOX0xJTkVTX0hPUklaT05UQUwiLCJHUklEX0xJTkVTX09QVElPTlMiLCJzdHJva2UiLCJsakdyYXBoQXhlc0FuZEdyaWRDb2xvclByb3BlcnR5IiwibGluZVdpZHRoIiwib3BhY2l0eSIsIlpvb21hYmxlR3JpZE5vZGUiLCJjb25zdHJ1Y3RvciIsImF0b21zVmlldyIsIm9mZnNldFgiLCJvZmZzZXRZIiwid2lkdGgiLCJoZWlnaHQiLCJvcHRpb25zIiwiYWRkWm9vbUJ1dHRvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsImhvcml6b250YWxMaW5lQ291bnQiLCJob3Jpem9udGFsTGluZXNOb2RlIiwidmVydGljYWxMaW5lc05vZGUiLCJ6b29tTGV2ZWxQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInJhbmdlIiwiem9vbUJ1dHRvbkdyb3VwIiwib3JpZW50YXRpb24iLCJzcGFjaW5nIiwicmlnaHQiLCJ0b3AiLCJtYWduaWZ5aW5nR2xhc3NOb2RlT3B0aW9ucyIsImdsYXNzUmFkaXVzIiwiYnV0dG9uT3B0aW9ucyIsImJhc2VDb2xvciIsImJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneSIsIkZsYXRBcHBlYXJhbmNlU3RyYXRlZ3kiLCJ4TWFyZ2luIiwieU1hcmdpbiIsInRvdWNoQXJlYVhEaWxhdGlvbiIsInRvdWNoQXJlYVlEaWxhdGlvbiIsImFkZENoaWxkIiwibm9taW5hbFNjYWxpbmdGYWN0b3IiLCJ2ZXJ0aWNhbFNjYWxpbmdGYWN0b3IiLCJsYXp5TGluayIsInpvb21GYWN0b3IiLCJ1cGRhdGVIb3Jpem9udGFsTGluZXMiLCJNYXRoIiwicG93IiwiZHJhd1BvdGVudGlhbEN1cnZlIiwidmVydGljYWxMaW5lU2hhcGUiLCJ4Iiwidmlld1giLCJtb3ZlVG8iLCJsaW5lVG8iLCJzZXRTaGFwZSIsImhvcml6b250YWxMaW5lU2hhcGUiLCJ5Iiwidmlld1kiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiWm9vbWFibGVHcmlkTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY2VuZXJ5IG5vZGUgdGhhdCBzaG93cyB0aGUgZ3JpZCBsaW5lcy4gIEhpZ2hseSBsZXZlcmFnZWQgZnJvbSBlbmVyZ3ktc2thdGUtcGFyaydzIEdyaWROb2RlIGltcGxlbWVudGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNpZGRoYXJ0aGEgQ2hpbnRoYXBhbGx5XHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IE1hZ25pZnlpbmdHbGFzc1pvb21CdXR0b25Hcm91cCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTWFnbmlmeWluZ0dsYXNzWm9vbUJ1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBCdXR0b25Ob2RlIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL0J1dHRvbk5vZGUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgU09NQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1NPTUNvbG9ycy5qcyc7XHJcbmltcG9ydCBzdGF0ZXNPZk1hdHRlciBmcm9tICcuLi8uLi9zdGF0ZXNPZk1hdHRlci5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTUlOX0xJTkVTX0hPUklaT05UQUwgPSA1O1xyXG5jb25zdCBHUklEX0xJTkVTX09QVElPTlMgPSB7XHJcbiAgc3Ryb2tlOiBTT01Db2xvcnMubGpHcmFwaEF4ZXNBbmRHcmlkQ29sb3JQcm9wZXJ0eSxcclxuICBsaW5lV2lkdGg6IDAuOCxcclxuICBvcGFjaXR5OiAwLjZcclxufTtcclxuXHJcbmNsYXNzIFpvb21hYmxlR3JpZE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGF0b21zVmlld1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRYXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFlcclxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSB3aWR0aCBvZiB0aGUgZ3JhcGhcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gaGVpZ2h0IG9mIHRoZSBncmFwaFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYXRvbXNWaWV3LCBvZmZzZXRYLCBvZmZzZXRZLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBhZGRab29tQnV0dG9uczogdHJ1ZSxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBhdG9tc1ZpZXcuaG9yaXpvbnRhbExpbmVDb3VudCA9IE1JTl9MSU5FU19IT1JJWk9OVEFMO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgaG9yaXpvbnRhbCBncmlkIGxpbmVzXHJcbiAgICB0aGlzLmhvcml6b250YWxMaW5lc05vZGUgPSBuZXcgUGF0aCggbnVsbCwgR1JJRF9MSU5FU19PUFRJT05TICk7XHJcblxyXG4gICAgLy8gdmVydGljYWwgZ3JpZCBsaW5lc1xyXG4gICAgY29uc3QgdmVydGljYWxMaW5lc05vZGUgPSBuZXcgUGF0aCggbnVsbCwgR1JJRF9MSU5FU19PUFRJT05TICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgLSB6b29tIGxldmVsLCBwYXNzZWQgaW4gdG8gdGhlIHpvb20gYnV0dG9uIGdyb3VwIGlmIHpvb20gaXMgZW5hYmxlZFxyXG4gICAgdGhpcy56b29tTGV2ZWxQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMCwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3pvb21GYWN0b3JQcm9wZXJ0eScgKSxcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggLTIsIDAgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGlmICggb3B0aW9ucy5hZGRab29tQnV0dG9ucyApIHtcclxuXHJcbiAgICAgIC8vIENyZWF0ZSB0aGUgem9vbSBidXR0b24gZ3JvdXAgdGhhdCB3aWxsIGFsbG93IHRoZSB1c2VyIHRvIHpvb20gaW4gYW5kIG91dCBvbiB0aGUgdmVydGljYWwgcmFuZ2Ugb2YgdGhlIGdyaWQuXHJcbiAgICAgIGNvbnN0IHpvb21CdXR0b25Hcm91cCA9IG5ldyBNYWduaWZ5aW5nR2xhc3Nab29tQnV0dG9uR3JvdXAoIHRoaXMuem9vbUxldmVsUHJvcGVydHksIHtcclxuICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJyxcclxuICAgICAgICBzcGFjaW5nOiA1LFxyXG5cclxuICAgICAgICAvLyBQb3NpdGlvbiB0aGUgem9vbSBidXR0b25zIHRvIHRoZSBsZWZ0IGFuZCB0b3Agb2YgdGhlIGdyaWQuICBUaGUgbnVtZXJpY2FsIHZhbHVlcyB3ZXJlIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuICAgICAgICAvLyB0byBtYXRjaCB0aGUgZGVzaWduLlxyXG4gICAgICAgIHJpZ2h0OiBvZmZzZXRYIC0gMTUsXHJcbiAgICAgICAgdG9wOiBvZmZzZXRZIC0gNSxcclxuXHJcbiAgICAgICAgbWFnbmlmeWluZ0dsYXNzTm9kZU9wdGlvbnM6IHtcclxuICAgICAgICAgIGdsYXNzUmFkaXVzOiA4XHJcbiAgICAgICAgfSxcclxuICAgICAgICBidXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgICBiYXNlQ29sb3I6ICcjRkZEMzMzJyxcclxuICAgICAgICAgIGJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneTogQnV0dG9uTm9kZS5GbGF0QXBwZWFyYW5jZVN0cmF0ZWd5LFxyXG4gICAgICAgICAgeE1hcmdpbjogMyxcclxuICAgICAgICAgIHlNYXJnaW46IDNcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvdWNoQXJlYVhEaWxhdGlvbjogOCxcclxuICAgICAgICB0b3VjaEFyZWFZRGlsYXRpb246IDgsXHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd6b29tQnV0dG9uR3JvdXAnIClcclxuICAgICAgfSApO1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCB6b29tQnV0dG9uR3JvdXAgKTtcclxuXHJcbiAgICAgIC8vIEtlZXAgYSByZWNvcmQgb2YgdGhlIGRlZmF1bHQgc2NhbGluZyBmYWN0b3Igc28gdGhhdCB3ZSBjYW4gdXNlIGl0IGZvciBzY2FsaW5nIHVwIGFuZCBkb3duLlxyXG4gICAgICBjb25zdCBub21pbmFsU2NhbGluZ0ZhY3RvciA9IGF0b21zVmlldy52ZXJ0aWNhbFNjYWxpbmdGYWN0b3I7XHJcblxyXG4gICAgICAvLyBVcGRhdGUgdGhlIHZlcnRpY2FsIHNjYWxlIG9mIHRoZSBncmFwaCBhcyB3ZWxsIGFzIHRoZSBudW1iZXIgb2YgaG9yaXpvbnRhbCBsaW5lcyB3aGVuIHRoZSB6b29tIGxldmVsIGNoYW5nZXMuXHJcbiAgICAgIHRoaXMuem9vbUxldmVsUHJvcGVydHkubGF6eUxpbmsoIHpvb21GYWN0b3IgPT4ge1xyXG4gICAgICAgIGF0b21zVmlldy5ob3Jpem9udGFsTGluZUNvdW50ID0gTUlOX0xJTkVTX0hPUklaT05UQUwgLSAyICogem9vbUZhY3RvcjsgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZCB0byBsb29rIGRlY2VudFxyXG4gICAgICAgIHRoaXMudXBkYXRlSG9yaXpvbnRhbExpbmVzKCBvZmZzZXRYLCBvZmZzZXRZLCB3aWR0aCwgaGVpZ2h0LCBhdG9tc1ZpZXcuaG9yaXpvbnRhbExpbmVDb3VudCApO1xyXG4gICAgICAgIGF0b21zVmlldy52ZXJ0aWNhbFNjYWxpbmdGYWN0b3IgPSBub21pbmFsU2NhbGluZ0ZhY3RvciAqIE1hdGgucG93KCAzLjMzLCB6b29tRmFjdG9yICk7XHJcbiAgICAgICAgYXRvbXNWaWV3LmRyYXdQb3RlbnRpYWxDdXJ2ZSgpO1xyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIHRoZSB2ZXJ0aWNhbCBncmlkIGxpbmVzLlxyXG4gICAgY29uc3QgdmVydGljYWxMaW5lU2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICAgIGZvciAoIGxldCB4ID0gMDsgeCA8IDQ7IHgrKyApIHtcclxuICAgICAgY29uc3Qgdmlld1ggPSB4ICogKCB3aWR0aCAvIDMgKTtcclxuICAgICAgdmVydGljYWxMaW5lU2hhcGUubW92ZVRvKCB2aWV3WCArIG9mZnNldFgsIG9mZnNldFkgKTtcclxuICAgICAgdmVydGljYWxMaW5lU2hhcGUubGluZVRvKCB2aWV3WCArIG9mZnNldFgsIGhlaWdodCArIG9mZnNldFkgKTtcclxuICAgIH1cclxuICAgIHZlcnRpY2FsTGluZXNOb2RlLnNldFNoYXBlKCB2ZXJ0aWNhbExpbmVTaGFwZSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdmVydGljYWxMaW5lc05vZGUgKTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIGhvcml6b250YWwgZ3JpZCBsaW5lcy5cclxuICAgIHRoaXMudXBkYXRlSG9yaXpvbnRhbExpbmVzKCBvZmZzZXRYLCBvZmZzZXRZLCB3aWR0aCwgaGVpZ2h0LCBhdG9tc1ZpZXcuaG9yaXpvbnRhbExpbmVDb3VudCApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5ob3Jpem9udGFsTGluZXNOb2RlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0WFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRZXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0tIHdpZHRoIG9mIHRoZSBncmlkXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtLSBoZWlnaHQgb2YgdGhlIGdyaWRcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaG9yaXpvbnRhbExpbmVDb3VudCAtLSBudW1iZXIgb2YgaG9yaXpvbnRhbCBsaW5lc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICB1cGRhdGVIb3Jpem9udGFsTGluZXMoIG9mZnNldFgsIG9mZnNldFksIHdpZHRoLCBoZWlnaHQsIGhvcml6b250YWxMaW5lQ291bnQgKSB7XHJcbiAgICBjb25zdCBob3Jpem9udGFsTGluZVNoYXBlID0gbmV3IFNoYXBlKCk7XHJcbiAgICBmb3IgKCBsZXQgeSA9IDA7IHkgPCBob3Jpem9udGFsTGluZUNvdW50OyB5KysgKSB7XHJcbiAgICAgIGNvbnN0IHZpZXdZID0geSAqICggaGVpZ2h0IC8gKCBob3Jpem9udGFsTGluZUNvdW50IC0gMSApICk7XHJcbiAgICAgIGhvcml6b250YWxMaW5lU2hhcGUubW92ZVRvKCBvZmZzZXRYLCB2aWV3WSArIG9mZnNldFkgKTtcclxuICAgICAgaG9yaXpvbnRhbExpbmVTaGFwZS5saW5lVG8oIHdpZHRoICsgb2Zmc2V0WCwgdmlld1kgKyBvZmZzZXRZICk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmhvcml6b250YWxMaW5lc05vZGUuc2V0U2hhcGUoIGhvcml6b250YWxMaW5lU2hhcGUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlc3RvcmUgaW5pdGlhbCBzdGF0ZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuem9vbUxldmVsUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnN0YXRlc09mTWF0dGVyLnJlZ2lzdGVyKCAnWm9vbWFibGVHcmlkTm9kZScsIFpvb21hYmxlR3JpZE5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgWm9vbWFibGVHcmlkTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLDhCQUE4QixNQUFNLCtEQUErRDtBQUMxRyxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsVUFBVSxNQUFNLDBDQUEwQztBQUNqRSxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFNBQVMsTUFBTSxnQ0FBZ0M7QUFDdEQsT0FBT0MsY0FBYyxNQUFNLHlCQUF5Qjs7QUFFcEQ7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxDQUFDO0FBQzlCLE1BQU1DLGtCQUFrQixHQUFHO0VBQ3pCQyxNQUFNLEVBQUVKLFNBQVMsQ0FBQ0ssK0JBQStCO0VBQ2pEQyxTQUFTLEVBQUUsR0FBRztFQUNkQyxPQUFPLEVBQUU7QUFDWCxDQUFDO0FBRUQsTUFBTUMsZ0JBQWdCLFNBQVNaLElBQUksQ0FBQztFQUVsQztBQUNGO0FBQ0E7QUFD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