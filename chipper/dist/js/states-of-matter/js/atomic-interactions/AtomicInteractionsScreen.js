// Copyright 2015-2023, University of Colorado Boulder

/**
 * The 'Atomic Interaction' screen. Conforms to the contract specified in joist/Screen.
 * @author John Blanco
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import Screen from '../../../joist/js/Screen.js';
import SOMConstants from '../common/SOMConstants.js';
import SOMColors from '../common/view/SOMColors.js';
import statesOfMatter from '../statesOfMatter.js';
import AtomicInteractionsIcon from './AtomicInteractionsIcon.js';
import DualAtomModel from './model/DualAtomModel.js';
import AtomicInteractionsScreenView from './view/AtomicInteractionsScreenView.js';
class AtomicInteractionsScreen extends Screen {
  /**
   * @param {boolean} enableHeterogeneousMolecules
   * @param {string} screenTitle
   * @param {Tandem} tandem
   */
  constructor(enableHeterogeneousMolecules, screenTitle, tandem) {
    const options = {
      name: screenTitle,
      backgroundColorProperty: SOMColors.backgroundProperty,
      homeScreenIcon: new AtomicInteractionsIcon(),
      navigationBarIcon: new AtomicInteractionsIcon({
        size: Screen.MINIMUM_NAVBAR_ICON_SIZE,
        fill: SOMColors.navigationBarIconBackgroundProperty
      }),
      showUnselectedHomeScreenIconFrame: true,
      maxDT: SOMConstants.MAX_DT,
      tandem: tandem
    };
    super(() => new DualAtomModel(tandem.createTandem('model'), enableHeterogeneousMolecules), model => new AtomicInteractionsScreenView(model, enableHeterogeneousMolecules, tandem.createTandem('view')), options);
  }
}
statesOfMatter.register('AtomicInteractionsScreen', AtomicInteractionsScreen);
export default AtomicInteractionsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTT01Db25zdGFudHMiLCJTT01Db2xvcnMiLCJzdGF0ZXNPZk1hdHRlciIsIkF0b21pY0ludGVyYWN0aW9uc0ljb24iLCJEdWFsQXRvbU1vZGVsIiwiQXRvbWljSW50ZXJhY3Rpb25zU2NyZWVuVmlldyIsIkF0b21pY0ludGVyYWN0aW9uc1NjcmVlbiIsImNvbnN0cnVjdG9yIiwiZW5hYmxlSGV0ZXJvZ2VuZW91c01vbGVjdWxlcyIsInNjcmVlblRpdGxlIiwidGFuZGVtIiwib3B0aW9ucyIsIm5hbWUiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImJhY2tncm91bmRQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibmF2aWdhdGlvbkJhckljb24iLCJzaXplIiwiTUlOSU1VTV9OQVZCQVJfSUNPTl9TSVpFIiwiZmlsbCIsIm5hdmlnYXRpb25CYXJJY29uQmFja2dyb3VuZFByb3BlcnR5Iiwic2hvd1Vuc2VsZWN0ZWRIb21lU2NyZWVuSWNvbkZyYW1lIiwibWF4RFQiLCJNQVhfRFQiLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXRvbWljSW50ZXJhY3Rpb25zU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnQXRvbWljIEludGVyYWN0aW9uJyBzY3JlZW4uIENvbmZvcm1zIHRvIHRoZSBjb250cmFjdCBzcGVjaWZpZWQgaW4gam9pc3QvU2NyZWVuLlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTT01Db25zdGFudHMgZnJvbSAnLi4vY29tbW9uL1NPTUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBTT01Db2xvcnMgZnJvbSAnLi4vY29tbW9uL3ZpZXcvU09NQ29sb3JzLmpzJztcclxuaW1wb3J0IHN0YXRlc09mTWF0dGVyIGZyb20gJy4uL3N0YXRlc09mTWF0dGVyLmpzJztcclxuaW1wb3J0IEF0b21pY0ludGVyYWN0aW9uc0ljb24gZnJvbSAnLi9BdG9taWNJbnRlcmFjdGlvbnNJY29uLmpzJztcclxuaW1wb3J0IER1YWxBdG9tTW9kZWwgZnJvbSAnLi9tb2RlbC9EdWFsQXRvbU1vZGVsLmpzJztcclxuaW1wb3J0IEF0b21pY0ludGVyYWN0aW9uc1NjcmVlblZpZXcgZnJvbSAnLi92aWV3L0F0b21pY0ludGVyYWN0aW9uc1NjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgQXRvbWljSW50ZXJhY3Rpb25zU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVIZXRlcm9nZW5lb3VzTW9sZWN1bGVzXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNjcmVlblRpdGxlXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBlbmFibGVIZXRlcm9nZW5lb3VzTW9sZWN1bGVzLCBzY3JlZW5UaXRsZSwgdGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IHNjcmVlblRpdGxlLFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogU09NQ29sb3JzLmJhY2tncm91bmRQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBBdG9taWNJbnRlcmFjdGlvbnNJY29uKCksXHJcbiAgICAgIG5hdmlnYXRpb25CYXJJY29uOiBuZXcgQXRvbWljSW50ZXJhY3Rpb25zSWNvbigge1xyXG4gICAgICAgIHNpemU6IFNjcmVlbi5NSU5JTVVNX05BVkJBUl9JQ09OX1NJWkUsXHJcbiAgICAgICAgZmlsbDogU09NQ29sb3JzLm5hdmlnYXRpb25CYXJJY29uQmFja2dyb3VuZFByb3BlcnR5XHJcbiAgICAgIH0gKSxcclxuICAgICAgc2hvd1Vuc2VsZWN0ZWRIb21lU2NyZWVuSWNvbkZyYW1lOiB0cnVlLFxyXG4gICAgICBtYXhEVDogU09NQ29uc3RhbnRzLk1BWF9EVCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBEdWFsQXRvbU1vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICksIGVuYWJsZUhldGVyb2dlbmVvdXNNb2xlY3VsZXMgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IEF0b21pY0ludGVyYWN0aW9uc1NjcmVlblZpZXcoIG1vZGVsLCBlbmFibGVIZXRlcm9nZW5lb3VzTW9sZWN1bGVzLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKSApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuc3RhdGVzT2ZNYXR0ZXIucmVnaXN0ZXIoICdBdG9taWNJbnRlcmFjdGlvbnNTY3JlZW4nLCBBdG9taWNJbnRlcmFjdGlvbnNTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgQXRvbWljSW50ZXJhY3Rpb25zU2NyZWVuO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxZQUFZLE1BQU0sMkJBQTJCO0FBQ3BELE9BQU9DLFNBQVMsTUFBTSw2QkFBNkI7QUFDbkQsT0FBT0MsY0FBYyxNQUFNLHNCQUFzQjtBQUNqRCxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFDaEUsT0FBT0MsYUFBYSxNQUFNLDBCQUEwQjtBQUNwRCxPQUFPQyw0QkFBNEIsTUFBTSx3Q0FBd0M7QUFFakYsTUFBTUMsd0JBQXdCLFNBQVNQLE1BQU0sQ0FBQztFQUU1QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLDRCQUE0QixFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRztJQUUvRCxNQUFNQyxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFSCxXQUFXO01BQ2pCSSx1QkFBdUIsRUFBRVosU0FBUyxDQUFDYSxrQkFBa0I7TUFDckRDLGNBQWMsRUFBRSxJQUFJWixzQkFBc0IsQ0FBQyxDQUFDO01BQzVDYSxpQkFBaUIsRUFBRSxJQUFJYixzQkFBc0IsQ0FBRTtRQUM3Q2MsSUFBSSxFQUFFbEIsTUFBTSxDQUFDbUIsd0JBQXdCO1FBQ3JDQyxJQUFJLEVBQUVsQixTQUFTLENBQUNtQjtNQUNsQixDQUFFLENBQUM7TUFDSEMsaUNBQWlDLEVBQUUsSUFBSTtNQUN2Q0MsS0FBSyxFQUFFdEIsWUFBWSxDQUFDdUIsTUFBTTtNQUMxQmIsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJTixhQUFhLENBQUVNLE1BQU0sQ0FBQ2MsWUFBWSxDQUFFLE9BQVEsQ0FBQyxFQUFFaEIsNEJBQTZCLENBQUMsRUFDdkZpQixLQUFLLElBQUksSUFBSXBCLDRCQUE0QixDQUFFb0IsS0FBSyxFQUFFakIsNEJBQTRCLEVBQUVFLE1BQU0sQ0FBQ2MsWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQy9HYixPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFULGNBQWMsQ0FBQ3dCLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRXBCLHdCQUF5QixDQUFDO0FBQy9FLGVBQWVBLHdCQUF3QiJ9