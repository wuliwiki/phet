// Copyright 2020-2022, University of Colorado Boulder

/**
 * PointNode is a Scenery node that portrays number line points in the view.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import StringProperty from '../../../../axon/js/StringProperty.js';
import Utils from '../../../../dot/js/Utils.js';
import merge from '../../../../phet-core/js/merge.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Circle, Node } from '../../../../scenery/js/imports.js';
import numberLineCommon from '../../numberLineCommon.js';
import ColorizedReadoutNode from './ColorizedReadoutNode.js';

// constants
const DEFAULT_POINT_NODE_RADIUS = 4.5; // in screen coordinates

class PointNode extends Node {
  /**
   * @param {NumberLinePoint} numberLinePoint
   * @param {NumberLine} numberLine
   * @param {Object} [options] - specific to this class, not propagated to super
   * @public
   */
  constructor(numberLinePoint, numberLine, options) {
    options = merge({
      radius: DEFAULT_POINT_NODE_RADIUS,
      // {boolean} - if true, the label text will match the color of the point, if false the label text will be black
      usePointColorForLabelText: true,
      // {boolean} - if true, the label background will be based on the point color, if false the background will have
      // a black stroke and white interior
      colorizeLabelBackground: false,
      // {string} - template to be used when displaying the label
      labelTemplate: '{{number}}',
      // {Font}
      labelFont: new PhetFont(18),
      // {number} - opacity value for the label, 0 to 1
      labelOpacity: 1,
      // true if this point is the opposite of another number line point
      isDoppelganger: false
    }, options);
    super();

    // Add the small circle that will represent the point.
    const circle = new Circle(options.radius, {
      fill: numberLinePoint.colorProperty,
      stroke: options.isDoppelganger ? 'gray' : numberLinePoint.colorProperty
    });
    this.addChild(circle);

    // Create the Property that will contain the label text.
    const labelStringProperty = new StringProperty('');

    // function for updating the label text
    const updateLabelText = value => {
      let stringValue = StringUtils.fillIn(options.labelTemplate, {
        value: Utils.roundSymmetric(Math.abs(value))
      });
      if (value < 0) {
        stringValue = MathSymbols.UNARY_MINUS + stringValue;
      }
      labelStringProperty.set(stringValue);
    };

    // Create a background and add the label text to it.
    const pointLabelNode = new ColorizedReadoutNode(labelStringProperty, numberLinePoint.colorProperty, {
      colorizeBackground: options.colorizeLabelBackground,
      colorizeText: options.usePointColorForLabelText,
      opacity: options.labelOpacity,
      yMargin: 1,
      textOptions: {
        font: options.labelFont,
        maxWidth: 60 // empirically determined to work in all currently needed cases
      }
    });

    // Add the label and link a listener for visibility.
    this.addChild(pointLabelNode);
    const labelVisibilityListener = visible => {
      pointLabelNode.visible = visible;
    };
    numberLine.showPointLabelsProperty.link(labelVisibilityListener);

    // Move in front of other points when being dragged or when the point value is being changed by other means.
    const moveToFrontMultilink = Multilink.multilink([numberLinePoint.isDraggingProperty, numberLinePoint.valueProperty], () => {
      this.moveToFront();
    });

    // Update the point representation as it moves.
    const updatePointRepresentationMultilink = Multilink.multilink([numberLinePoint.valueProperty, numberLine.showOppositesProperty, numberLine.displayedRangeProperty, numberLine.centerPositionProperty, numberLine.orientationProperty], (value, oppositesVisible, displayedRange) => {
      if (displayedRange.contains(value)) {
        this.visible = true;
        if (options.isDoppelganger) {
          value = -value;
          this.visible = oppositesVisible;
        }
        circle.center = numberLine.valueToModelPosition(value);

        // Update the point label text and position.
        updateLabelText(value);
        if (numberLine.isHorizontal) {
          pointLabelNode.centerX = circle.centerX;
          pointLabelNode.bottom = circle.y - 20;
        } else {
          pointLabelNode.right = circle.x - 20;
          pointLabelNode.centerY = circle.centerY;
        }
      } else {
        // Don't show points that are on the number line but out of the displayed range.
        this.visible = false;
      }
    });

    /**
     * @private
     */
    this.disposePointNode = () => {
      numberLine.showPointLabelsProperty.unlink(labelVisibilityListener);
      updatePointRepresentationMultilink.dispose();
      moveToFrontMultilink.dispose();
      pointLabelNode.dispose();
    };
  }

  /**
   * @public
   * @override
   */
  dispose() {
    this.disposePointNode();
    super.dispose();
  }
}
numberLineCommon.register('PointNode', PointNode);
export default PointNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJTdHJpbmdQcm9wZXJ0eSIsIlV0aWxzIiwibWVyZ2UiLCJTdHJpbmdVdGlscyIsIk1hdGhTeW1ib2xzIiwiUGhldEZvbnQiLCJDaXJjbGUiLCJOb2RlIiwibnVtYmVyTGluZUNvbW1vbiIsIkNvbG9yaXplZFJlYWRvdXROb2RlIiwiREVGQVVMVF9QT0lOVF9OT0RFX1JBRElVUyIsIlBvaW50Tm9kZSIsImNvbnN0cnVjdG9yIiwibnVtYmVyTGluZVBvaW50IiwibnVtYmVyTGluZSIsIm9wdGlvbnMiLCJyYWRpdXMiLCJ1c2VQb2ludENvbG9yRm9yTGFiZWxUZXh0IiwiY29sb3JpemVMYWJlbEJhY2tncm91bmQiLCJsYWJlbFRlbXBsYXRlIiwibGFiZWxGb250IiwibGFiZWxPcGFjaXR5IiwiaXNEb3BwZWxnYW5nZXIiLCJjaXJjbGUiLCJmaWxsIiwiY29sb3JQcm9wZXJ0eSIsInN0cm9rZSIsImFkZENoaWxkIiwibGFiZWxTdHJpbmdQcm9wZXJ0eSIsInVwZGF0ZUxhYmVsVGV4dCIsInZhbHVlIiwic3RyaW5nVmFsdWUiLCJmaWxsSW4iLCJyb3VuZFN5bW1ldHJpYyIsIk1hdGgiLCJhYnMiLCJVTkFSWV9NSU5VUyIsInNldCIsInBvaW50TGFiZWxOb2RlIiwiY29sb3JpemVCYWNrZ3JvdW5kIiwiY29sb3JpemVUZXh0Iiwib3BhY2l0eSIsInlNYXJnaW4iLCJ0ZXh0T3B0aW9ucyIsImZvbnQiLCJtYXhXaWR0aCIsImxhYmVsVmlzaWJpbGl0eUxpc3RlbmVyIiwidmlzaWJsZSIsInNob3dQb2ludExhYmVsc1Byb3BlcnR5IiwibGluayIsIm1vdmVUb0Zyb250TXVsdGlsaW5rIiwibXVsdGlsaW5rIiwiaXNEcmFnZ2luZ1Byb3BlcnR5IiwidmFsdWVQcm9wZXJ0eSIsIm1vdmVUb0Zyb250IiwidXBkYXRlUG9pbnRSZXByZXNlbnRhdGlvbk11bHRpbGluayIsInNob3dPcHBvc2l0ZXNQcm9wZXJ0eSIsImRpc3BsYXllZFJhbmdlUHJvcGVydHkiLCJjZW50ZXJQb3NpdGlvblByb3BlcnR5Iiwib3JpZW50YXRpb25Qcm9wZXJ0eSIsIm9wcG9zaXRlc1Zpc2libGUiLCJkaXNwbGF5ZWRSYW5nZSIsImNvbnRhaW5zIiwiY2VudGVyIiwidmFsdWVUb01vZGVsUG9zaXRpb24iLCJpc0hvcml6b250YWwiLCJjZW50ZXJYIiwiYm90dG9tIiwieSIsInJpZ2h0IiwieCIsImNlbnRlclkiLCJkaXNwb3NlUG9pbnROb2RlIiwidW5saW5rIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUG9pbnROb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBvaW50Tm9kZSBpcyBhIFNjZW5lcnkgbm9kZSB0aGF0IHBvcnRyYXlzIG51bWJlciBsaW5lIHBvaW50cyBpbiB0aGUgdmlldy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IFN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvU3RyaW5nUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgTWF0aFN5bWJvbHMgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL01hdGhTeW1ib2xzLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IENpcmNsZSwgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lQ29tbW9uIGZyb20gJy4uLy4uL251bWJlckxpbmVDb21tb24uanMnO1xyXG5pbXBvcnQgQ29sb3JpemVkUmVhZG91dE5vZGUgZnJvbSAnLi9Db2xvcml6ZWRSZWFkb3V0Tm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgREVGQVVMVF9QT0lOVF9OT0RFX1JBRElVUyA9IDQuNTsgLy8gaW4gc2NyZWVuIGNvb3JkaW5hdGVzXHJcblxyXG5jbGFzcyBQb2ludE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtOdW1iZXJMaW5lUG9pbnR9IG51bWJlckxpbmVQb2ludFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyTGluZX0gbnVtYmVyTGluZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBzcGVjaWZpYyB0byB0aGlzIGNsYXNzLCBub3QgcHJvcGFnYXRlZCB0byBzdXBlclxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbnVtYmVyTGluZVBvaW50LCBudW1iZXJMaW5lLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgcmFkaXVzOiBERUZBVUxUX1BPSU5UX05PREVfUkFESVVTLFxyXG5cclxuICAgICAgLy8ge2Jvb2xlYW59IC0gaWYgdHJ1ZSwgdGhlIGxhYmVsIHRleHQgd2lsbCBtYXRjaCB0aGUgY29sb3Igb2YgdGhlIHBvaW50LCBpZiBmYWxzZSB0aGUgbGFiZWwgdGV4dCB3aWxsIGJlIGJsYWNrXHJcbiAgICAgIHVzZVBvaW50Q29sb3JGb3JMYWJlbFRleHQ6IHRydWUsXHJcblxyXG4gICAgICAvLyB7Ym9vbGVhbn0gLSBpZiB0cnVlLCB0aGUgbGFiZWwgYmFja2dyb3VuZCB3aWxsIGJlIGJhc2VkIG9uIHRoZSBwb2ludCBjb2xvciwgaWYgZmFsc2UgdGhlIGJhY2tncm91bmQgd2lsbCBoYXZlXHJcbiAgICAgIC8vIGEgYmxhY2sgc3Ryb2tlIGFuZCB3aGl0ZSBpbnRlcmlvclxyXG4gICAgICBjb2xvcml6ZUxhYmVsQmFja2dyb3VuZDogZmFsc2UsXHJcblxyXG4gICAgICAvLyB7c3RyaW5nfSAtIHRlbXBsYXRlIHRvIGJlIHVzZWQgd2hlbiBkaXNwbGF5aW5nIHRoZSBsYWJlbFxyXG4gICAgICBsYWJlbFRlbXBsYXRlOiAne3tudW1iZXJ9fScsXHJcblxyXG4gICAgICAvLyB7Rm9udH1cclxuICAgICAgbGFiZWxGb250OiBuZXcgUGhldEZvbnQoIDE4ICksXHJcblxyXG4gICAgICAvLyB7bnVtYmVyfSAtIG9wYWNpdHkgdmFsdWUgZm9yIHRoZSBsYWJlbCwgMCB0byAxXHJcbiAgICAgIGxhYmVsT3BhY2l0eTogMSxcclxuXHJcbiAgICAgIC8vIHRydWUgaWYgdGhpcyBwb2ludCBpcyB0aGUgb3Bwb3NpdGUgb2YgYW5vdGhlciBudW1iZXIgbGluZSBwb2ludFxyXG4gICAgICBpc0RvcHBlbGdhbmdlcjogZmFsc2VcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgc21hbGwgY2lyY2xlIHRoYXQgd2lsbCByZXByZXNlbnQgdGhlIHBvaW50LlxyXG4gICAgY29uc3QgY2lyY2xlID0gbmV3IENpcmNsZSggb3B0aW9ucy5yYWRpdXMsIHtcclxuICAgICAgZmlsbDogbnVtYmVyTGluZVBvaW50LmNvbG9yUHJvcGVydHksXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5pc0RvcHBlbGdhbmdlciA/ICdncmF5JyA6IG51bWJlckxpbmVQb2ludC5jb2xvclByb3BlcnR5XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBjaXJjbGUgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIFByb3BlcnR5IHRoYXQgd2lsbCBjb250YWluIHRoZSBsYWJlbCB0ZXh0LlxyXG4gICAgY29uc3QgbGFiZWxTdHJpbmdQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJycgKTtcclxuXHJcbiAgICAvLyBmdW5jdGlvbiBmb3IgdXBkYXRpbmcgdGhlIGxhYmVsIHRleHRcclxuICAgIGNvbnN0IHVwZGF0ZUxhYmVsVGV4dCA9IHZhbHVlID0+IHtcclxuICAgICAgbGV0IHN0cmluZ1ZhbHVlID0gU3RyaW5nVXRpbHMuZmlsbEluKFxyXG4gICAgICAgIG9wdGlvbnMubGFiZWxUZW1wbGF0ZSxcclxuICAgICAgICB7IHZhbHVlOiBVdGlscy5yb3VuZFN5bW1ldHJpYyggTWF0aC5hYnMoIHZhbHVlICkgKSB9XHJcbiAgICAgICk7XHJcbiAgICAgIGlmICggdmFsdWUgPCAwICkge1xyXG4gICAgICAgIHN0cmluZ1ZhbHVlID0gTWF0aFN5bWJvbHMuVU5BUllfTUlOVVMgKyBzdHJpbmdWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgICBsYWJlbFN0cmluZ1Byb3BlcnR5LnNldCggc3RyaW5nVmFsdWUgKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgYmFja2dyb3VuZCBhbmQgYWRkIHRoZSBsYWJlbCB0ZXh0IHRvIGl0LlxyXG4gICAgY29uc3QgcG9pbnRMYWJlbE5vZGUgPSBuZXcgQ29sb3JpemVkUmVhZG91dE5vZGUoIGxhYmVsU3RyaW5nUHJvcGVydHksIG51bWJlckxpbmVQb2ludC5jb2xvclByb3BlcnR5LCB7XHJcbiAgICAgIGNvbG9yaXplQmFja2dyb3VuZDogb3B0aW9ucy5jb2xvcml6ZUxhYmVsQmFja2dyb3VuZCxcclxuICAgICAgY29sb3JpemVUZXh0OiBvcHRpb25zLnVzZVBvaW50Q29sb3JGb3JMYWJlbFRleHQsXHJcbiAgICAgIG9wYWNpdHk6IG9wdGlvbnMubGFiZWxPcGFjaXR5LFxyXG4gICAgICB5TWFyZ2luOiAxLFxyXG4gICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgIGZvbnQ6IG9wdGlvbnMubGFiZWxGb250LFxyXG4gICAgICAgIG1heFdpZHRoOiA2MCAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkIHRvIHdvcmsgaW4gYWxsIGN1cnJlbnRseSBuZWVkZWQgY2FzZXNcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgbGFiZWwgYW5kIGxpbmsgYSBsaXN0ZW5lciBmb3IgdmlzaWJpbGl0eS5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIHBvaW50TGFiZWxOb2RlICk7XHJcbiAgICBjb25zdCBsYWJlbFZpc2liaWxpdHlMaXN0ZW5lciA9IHZpc2libGUgPT4ge3BvaW50TGFiZWxOb2RlLnZpc2libGUgPSB2aXNpYmxlO307XHJcbiAgICBudW1iZXJMaW5lLnNob3dQb2ludExhYmVsc1Byb3BlcnR5LmxpbmsoIGxhYmVsVmlzaWJpbGl0eUxpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gTW92ZSBpbiBmcm9udCBvZiBvdGhlciBwb2ludHMgd2hlbiBiZWluZyBkcmFnZ2VkIG9yIHdoZW4gdGhlIHBvaW50IHZhbHVlIGlzIGJlaW5nIGNoYW5nZWQgYnkgb3RoZXIgbWVhbnMuXHJcbiAgICBjb25zdCBtb3ZlVG9Gcm9udE11bHRpbGluayA9IE11bHRpbGluay5tdWx0aWxpbmsoXHJcbiAgICAgIFsgbnVtYmVyTGluZVBvaW50LmlzRHJhZ2dpbmdQcm9wZXJ0eSwgbnVtYmVyTGluZVBvaW50LnZhbHVlUHJvcGVydHkgXSxcclxuICAgICAgKCkgPT4geyB0aGlzLm1vdmVUb0Zyb250KCk7IH1cclxuICAgICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBwb2ludCByZXByZXNlbnRhdGlvbiBhcyBpdCBtb3Zlcy5cclxuICAgIGNvbnN0IHVwZGF0ZVBvaW50UmVwcmVzZW50YXRpb25NdWx0aWxpbmsgPSBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICBbXHJcbiAgICAgICAgbnVtYmVyTGluZVBvaW50LnZhbHVlUHJvcGVydHksXHJcbiAgICAgICAgbnVtYmVyTGluZS5zaG93T3Bwb3NpdGVzUHJvcGVydHksXHJcbiAgICAgICAgbnVtYmVyTGluZS5kaXNwbGF5ZWRSYW5nZVByb3BlcnR5LFxyXG4gICAgICAgIG51bWJlckxpbmUuY2VudGVyUG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgICBudW1iZXJMaW5lLm9yaWVudGF0aW9uUHJvcGVydHlcclxuICAgICAgXSxcclxuICAgICAgKCB2YWx1ZSwgb3Bwb3NpdGVzVmlzaWJsZSwgZGlzcGxheWVkUmFuZ2UgKSA9PiB7XHJcblxyXG4gICAgICAgIGlmICggZGlzcGxheWVkUmFuZ2UuY29udGFpbnMoIHZhbHVlICkgKSB7XHJcbiAgICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgaWYgKCBvcHRpb25zLmlzRG9wcGVsZ2FuZ2VyICkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gb3Bwb3NpdGVzVmlzaWJsZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNpcmNsZS5jZW50ZXIgPSBudW1iZXJMaW5lLnZhbHVlVG9Nb2RlbFBvc2l0aW9uKCB2YWx1ZSApO1xyXG5cclxuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcG9pbnQgbGFiZWwgdGV4dCBhbmQgcG9zaXRpb24uXHJcbiAgICAgICAgICB1cGRhdGVMYWJlbFRleHQoIHZhbHVlICk7XHJcbiAgICAgICAgICBpZiAoIG51bWJlckxpbmUuaXNIb3Jpem9udGFsICkge1xyXG4gICAgICAgICAgICBwb2ludExhYmVsTm9kZS5jZW50ZXJYID0gY2lyY2xlLmNlbnRlclg7XHJcbiAgICAgICAgICAgIHBvaW50TGFiZWxOb2RlLmJvdHRvbSA9IGNpcmNsZS55IC0gMjA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcG9pbnRMYWJlbE5vZGUucmlnaHQgPSBjaXJjbGUueCAtIDIwO1xyXG4gICAgICAgICAgICBwb2ludExhYmVsTm9kZS5jZW50ZXJZID0gY2lyY2xlLmNlbnRlclk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgIC8vIERvbid0IHNob3cgcG9pbnRzIHRoYXQgYXJlIG9uIHRoZSBudW1iZXIgbGluZSBidXQgb3V0IG9mIHRoZSBkaXNwbGF5ZWQgcmFuZ2UuXHJcbiAgICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5kaXNwb3NlUG9pbnROb2RlID0gKCkgPT4ge1xyXG4gICAgICBudW1iZXJMaW5lLnNob3dQb2ludExhYmVsc1Byb3BlcnR5LnVubGluayggbGFiZWxWaXNpYmlsaXR5TGlzdGVuZXIgKTtcclxuICAgICAgdXBkYXRlUG9pbnRSZXByZXNlbnRhdGlvbk11bHRpbGluay5kaXNwb3NlKCk7XHJcbiAgICAgIG1vdmVUb0Zyb250TXVsdGlsaW5rLmRpc3Bvc2UoKTtcclxuICAgICAgcG9pbnRMYWJlbE5vZGUuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5kaXNwb3NlUG9pbnROb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJMaW5lQ29tbW9uLnJlZ2lzdGVyKCAnUG9pbnROb2RlJywgUG9pbnROb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBvaW50Tm9kZTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9B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