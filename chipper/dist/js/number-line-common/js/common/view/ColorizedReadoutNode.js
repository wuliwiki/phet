// Copyright 2020-2022, University of Colorado Boulder

/**
 * ColorizedReadoutNode is a Scenery node that presents a number enclosed in a rounded rectangle "background",
 * where the color of the stroke and fill of the background changes based on the value of a provided Property.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import BackgroundNode from '../../../../scenery-phet/js/BackgroundNode.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import numberLineCommon from '../../numberLineCommon.js';
import NLCConstants from '../NLCConstants.js';

// constants
const DEFAULT_FONT = new PhetFont(18);
class ColorizedReadoutNode extends BackgroundNode {
  /**
   * @param {StringProperty} stringProperty - a Property that encloses the value to display
   * @param {Property.<Color>} baseColorProperty - a Property that encloses a color from which the fill and stroke are
   * derived
   * @param {Object} [options]
   * @public
   */
  constructor(stringProperty, baseColorProperty, options) {
    options = merge({
      rectangleOptions: {
        lineWidth: 2
      },
      textOptions: {
        font: DEFAULT_FONT
      },
      colorizeBackground: true,
      colorizeText: false
    }, NLCConstants.LABEL_BACKGROUND_OPTIONS, options);

    // text that will be displayed on the background
    const textNode = new Text(stringProperty, options.textOptions);
    super(textNode, options);

    // Update the stroke and background colors as the base color changes.
    const updateColors = baseColor => {
      if (options.colorizeBackground) {
        this.background.stroke = baseColor;

        // Use a lighter version of the base color as the fill.
        this.background.fill = baseColor.colorUtilsBrighter(0.75);
      }
      if (options.colorizeText) {
        textNode.fill = baseColor;
      }
    };
    baseColorProperty.link(updateColors);

    // @private - dispose function
    this.disposeColorizedReadoutNode = () => {
      baseColorProperty.unlink(updateColors);
    };
  }

  /**
   * @public
   * @override
   */
  dispose() {
    this.disposeColorizedReadoutNode();
    super.dispose();
  }
}
numberLineCommon.register('ColorizedReadoutNode', ColorizedReadoutNode);
export default ColorizedReadoutNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkJhY2tncm91bmROb2RlIiwiUGhldEZvbnQiLCJUZXh0IiwibnVtYmVyTGluZUNvbW1vbiIsIk5MQ0NvbnN0YW50cyIsIkRFRkFVTFRfRk9OVCIsIkNvbG9yaXplZFJlYWRvdXROb2RlIiwiY29uc3RydWN0b3IiLCJzdHJpbmdQcm9wZXJ0eSIsImJhc2VDb2xvclByb3BlcnR5Iiwib3B0aW9ucyIsInJlY3RhbmdsZU9wdGlvbnMiLCJsaW5lV2lkdGgiLCJ0ZXh0T3B0aW9ucyIsImZvbnQiLCJjb2xvcml6ZUJhY2tncm91bmQiLCJjb2xvcml6ZVRleHQiLCJMQUJFTF9CQUNLR1JPVU5EX09QVElPTlMiLCJ0ZXh0Tm9kZSIsInVwZGF0ZUNvbG9ycyIsImJhc2VDb2xvciIsImJhY2tncm91bmQiLCJzdHJva2UiLCJmaWxsIiwiY29sb3JVdGlsc0JyaWdodGVyIiwibGluayIsImRpc3Bvc2VDb2xvcml6ZWRSZWFkb3V0Tm9kZSIsInVubGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbG9yaXplZFJlYWRvdXROb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbG9yaXplZFJlYWRvdXROb2RlIGlzIGEgU2NlbmVyeSBub2RlIHRoYXQgcHJlc2VudHMgYSBudW1iZXIgZW5jbG9zZWQgaW4gYSByb3VuZGVkIHJlY3RhbmdsZSBcImJhY2tncm91bmRcIixcclxuICogd2hlcmUgdGhlIGNvbG9yIG9mIHRoZSBzdHJva2UgYW5kIGZpbGwgb2YgdGhlIGJhY2tncm91bmQgY2hhbmdlcyBiYXNlZCBvbiB0aGUgdmFsdWUgb2YgYSBwcm92aWRlZCBQcm9wZXJ0eS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IEJhY2tncm91bmROb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9CYWNrZ3JvdW5kTm9kZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG51bWJlckxpbmVDb21tb24gZnJvbSAnLi4vLi4vbnVtYmVyTGluZUNvbW1vbi5qcyc7XHJcbmltcG9ydCBOTENDb25zdGFudHMgZnJvbSAnLi4vTkxDQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUZBVUxUX0ZPTlQgPSBuZXcgUGhldEZvbnQoIDE4ICk7XHJcblxyXG5jbGFzcyBDb2xvcml6ZWRSZWFkb3V0Tm9kZSBleHRlbmRzIEJhY2tncm91bmROb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtTdHJpbmdQcm9wZXJ0eX0gc3RyaW5nUHJvcGVydHkgLSBhIFByb3BlcnR5IHRoYXQgZW5jbG9zZXMgdGhlIHZhbHVlIHRvIGRpc3BsYXlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxDb2xvcj59IGJhc2VDb2xvclByb3BlcnR5IC0gYSBQcm9wZXJ0eSB0aGF0IGVuY2xvc2VzIGEgY29sb3IgZnJvbSB3aGljaCB0aGUgZmlsbCBhbmQgc3Ryb2tlIGFyZVxyXG4gICAqIGRlcml2ZWRcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBzdHJpbmdQcm9wZXJ0eSwgYmFzZUNvbG9yUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKFxyXG4gICAgICB7XHJcbiAgICAgICAgcmVjdGFuZ2xlT3B0aW9uczogeyBsaW5lV2lkdGg6IDIgfSxcclxuICAgICAgICB0ZXh0T3B0aW9uczogeyBmb250OiBERUZBVUxUX0ZPTlQgfSxcclxuICAgICAgICBjb2xvcml6ZUJhY2tncm91bmQ6IHRydWUsXHJcbiAgICAgICAgY29sb3JpemVUZXh0OiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBOTENDb25zdGFudHMuTEFCRUxfQkFDS0dST1VORF9PUFRJT05TLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG5cclxuICAgIC8vIHRleHQgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBvbiB0aGUgYmFja2dyb3VuZFxyXG4gICAgY29uc3QgdGV4dE5vZGUgPSBuZXcgVGV4dCggc3RyaW5nUHJvcGVydHksIG9wdGlvbnMudGV4dE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggdGV4dE5vZGUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHN0cm9rZSBhbmQgYmFja2dyb3VuZCBjb2xvcnMgYXMgdGhlIGJhc2UgY29sb3IgY2hhbmdlcy5cclxuICAgIGNvbnN0IHVwZGF0ZUNvbG9ycyA9IGJhc2VDb2xvciA9PiB7XHJcbiAgICAgIGlmICggb3B0aW9ucy5jb2xvcml6ZUJhY2tncm91bmQgKSB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kLnN0cm9rZSA9IGJhc2VDb2xvcjtcclxuXHJcbiAgICAgICAgLy8gVXNlIGEgbGlnaHRlciB2ZXJzaW9uIG9mIHRoZSBiYXNlIGNvbG9yIGFzIHRoZSBmaWxsLlxyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZC5maWxsID0gYmFzZUNvbG9yLmNvbG9yVXRpbHNCcmlnaHRlciggMC43NSApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIG9wdGlvbnMuY29sb3JpemVUZXh0ICkge1xyXG4gICAgICAgIHRleHROb2RlLmZpbGwgPSBiYXNlQ29sb3I7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBiYXNlQ29sb3JQcm9wZXJ0eS5saW5rKCB1cGRhdGVDb2xvcnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSAtIGRpc3Bvc2UgZnVuY3Rpb25cclxuICAgIHRoaXMuZGlzcG9zZUNvbG9yaXplZFJlYWRvdXROb2RlID0gKCkgPT4ge1xyXG4gICAgICBiYXNlQ29sb3JQcm9wZXJ0eS51bmxpbmsoIHVwZGF0ZUNvbG9ycyApO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5kaXNwb3NlQ29sb3JpemVkUmVhZG91dE5vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlckxpbmVDb21tb24ucmVnaXN0ZXIoICdDb2xvcml6ZWRSZWFkb3V0Tm9kZScsIENvbG9yaXplZFJlYWRvdXROb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IENvbG9yaXplZFJlYWRvdXROb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsY0FBYyxNQUFNLCtDQUErQztBQUMxRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7O0FBRTdDO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUlKLFFBQVEsQ0FBRSxFQUFHLENBQUM7QUFFdkMsTUFBTUssb0JBQW9CLFNBQVNOLGNBQWMsQ0FBQztFQUVoRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxjQUFjLEVBQUVDLGlCQUFpQixFQUFFQyxPQUFPLEVBQUc7SUFFeERBLE9BQU8sR0FBR1gsS0FBSyxDQUNiO01BQ0VZLGdCQUFnQixFQUFFO1FBQUVDLFNBQVMsRUFBRTtNQUFFLENBQUM7TUFDbENDLFdBQVcsRUFBRTtRQUFFQyxJQUFJLEVBQUVUO01BQWEsQ0FBQztNQUNuQ1Usa0JBQWtCLEVBQUUsSUFBSTtNQUN4QkMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFDRFosWUFBWSxDQUFDYSx3QkFBd0IsRUFDckNQLE9BQ0YsQ0FBQzs7SUFFRDtJQUNBLE1BQU1RLFFBQVEsR0FBRyxJQUFJaEIsSUFBSSxDQUFFTSxjQUFjLEVBQUVFLE9BQU8sQ0FBQ0csV0FBWSxDQUFDO0lBRWhFLEtBQUssQ0FBRUssUUFBUSxFQUFFUixPQUFRLENBQUM7O0lBRTFCO0lBQ0EsTUFBTVMsWUFBWSxHQUFHQyxTQUFTLElBQUk7TUFDaEMsSUFBS1YsT0FBTyxDQUFDSyxrQkFBa0IsRUFBRztRQUNoQyxJQUFJLENBQUNNLFVBQVUsQ0FBQ0MsTUFBTSxHQUFHRixTQUFTOztRQUVsQztRQUNBLElBQUksQ0FBQ0MsVUFBVSxDQUFDRSxJQUFJLEdBQUdILFNBQVMsQ0FBQ0ksa0JBQWtCLENBQUUsSUFBSyxDQUFDO01BQzdEO01BRUEsSUFBS2QsT0FBTyxDQUFDTSxZQUFZLEVBQUc7UUFDMUJFLFFBQVEsQ0FBQ0ssSUFBSSxHQUFHSCxTQUFTO01BQzNCO0lBQ0YsQ0FBQztJQUNEWCxpQkFBaUIsQ0FBQ2dCLElBQUksQ0FBRU4sWUFBYSxDQUFDOztJQUV0QztJQUNBLElBQUksQ0FBQ08sMkJBQTJCLEdBQUcsTUFBTTtNQUN2Q2pCLGlCQUFpQixDQUFDa0IsTUFBTSxDQUFFUixZQUFhLENBQUM7SUFDMUMsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VTLE9BQU9BLENBQUEsRUFBRztJQUNSLElBQUksQ0FBQ0YsMkJBQTJCLENBQUMsQ0FBQztJQUNsQyxLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXpCLGdCQUFnQixDQUFDMEIsUUFBUSxDQUFFLHNCQUFzQixFQUFFdkIsb0JBQXFCLENBQUM7QUFDekUsZUFBZUEsb0JBQW9CIn0=