// Copyright 2020-2022, University of Colorado Boulder

/**
 * a node that represents a piggy bank
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Saurabh Totey
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import { Image, Node, Path } from '../../../../scenery/js/imports.js';
import piggyBankNoDecoration_png from '../../../images/piggyBankNoDecoration_png.js';
import piggyBankWithFlowers_png from '../../../images/piggyBankWithFlowers_png.js';
import piggyBankWithLightning_png from '../../../images/piggyBankWithLightning_png.js';
import numberLineCommon from '../../numberLineCommon.js';
import PiggyBankDecoration from '../model/PiggyBankDecoration.js';
import piggyBankShapes from './piggyBankShapes.js';

// constants
const MAP_DECORATION_TYPE_TO_IMAGE_INFO = new Map();
MAP_DECORATION_TYPE_TO_IMAGE_INFO.set(PiggyBankDecoration.NONE, piggyBankNoDecoration_png);
MAP_DECORATION_TYPE_TO_IMAGE_INFO.set(PiggyBankDecoration.FLOWERS, piggyBankWithFlowers_png);
MAP_DECORATION_TYPE_TO_IMAGE_INFO.set(PiggyBankDecoration.LIGHTNING, piggyBankWithLightning_png);
class PiggyBankNode extends Node {
  /**
   * @param {Object} [options]
   * @public
   */
  constructor(options) {
    options = merge({
      fill: 'rgba( 0, 0, 0, 0 )',
      // initially transparent so that it is invisible but has size
      lineWidth: 0,
      decorationType: PiggyBankDecoration.FLOWERS
    }, options);
    const piggyBankOutlineNode = new Path(piggyBankShapes.MEDIUM_PIGGY_BANK_SHAPE, {
      fill: options.fill,
      lineWidth: options.lineWidth,
      center: Vector2.ZERO
    });
    const overlayImage = new Image(MAP_DECORATION_TYPE_TO_IMAGE_INFO.get(options.decorationType), {
      opacity: 0.9
    });
    overlayImage.setScaleMagnitude(piggyBankOutlineNode.width / overlayImage.width);
    overlayImage.center = Vector2.ZERO;
    options.children = [piggyBankOutlineNode, overlayImage];
    super(options);

    // @private
    this.outline = piggyBankOutlineNode;
  }

  /**
   * @returns {ColorDef} the color of this piggy bank's fill
   * @public
   */
  getFill() {
    return this.outline.fill;
  }
  get fill() {
    return this.getFill();
  }

  /**
   * @param {ColorDef} fill
   * @public
   */
  setFill(fill) {
    this.outline.fill = fill;
  }
  set fill(fill) {
    this.setFill(fill);
  }
}
numberLineCommon.register('PiggyBankNode', PiggyBankNode);
export default PiggyBankNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwibWVyZ2UiLCJJbWFnZSIsIk5vZGUiLCJQYXRoIiwicGlnZ3lCYW5rTm9EZWNvcmF0aW9uX3BuZyIsInBpZ2d5QmFua1dpdGhGbG93ZXJzX3BuZyIsInBpZ2d5QmFua1dpdGhMaWdodG5pbmdfcG5nIiwibnVtYmVyTGluZUNvbW1vbiIsIlBpZ2d5QmFua0RlY29yYXRpb24iLCJwaWdneUJhbmtTaGFwZXMiLCJNQVBfREVDT1JBVElPTl9UWVBFX1RPX0lNQUdFX0lORk8iLCJNYXAiLCJzZXQiLCJOT05FIiwiRkxPV0VSUyIsIkxJR0hUTklORyIsIlBpZ2d5QmFua05vZGUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJmaWxsIiwibGluZVdpZHRoIiwiZGVjb3JhdGlvblR5cGUiLCJwaWdneUJhbmtPdXRsaW5lTm9kZSIsIk1FRElVTV9QSUdHWV9CQU5LX1NIQVBFIiwiY2VudGVyIiwiWkVSTyIsIm92ZXJsYXlJbWFnZSIsImdldCIsIm9wYWNpdHkiLCJzZXRTY2FsZU1hZ25pdHVkZSIsIndpZHRoIiwiY2hpbGRyZW4iLCJvdXRsaW5lIiwiZ2V0RmlsbCIsInNldEZpbGwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBpZ2d5QmFua05vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogYSBub2RlIHRoYXQgcmVwcmVzZW50cyBhIHBpZ2d5IGJhbmtcclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYXVyYWJoIFRvdGV5XHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UsIE5vZGUsIFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgcGlnZ3lCYW5rTm9EZWNvcmF0aW9uX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvcGlnZ3lCYW5rTm9EZWNvcmF0aW9uX3BuZy5qcyc7XHJcbmltcG9ydCBwaWdneUJhbmtXaXRoRmxvd2Vyc19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3BpZ2d5QmFua1dpdGhGbG93ZXJzX3BuZy5qcyc7XHJcbmltcG9ydCBwaWdneUJhbmtXaXRoTGlnaHRuaW5nX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvcGlnZ3lCYW5rV2l0aExpZ2h0bmluZ19wbmcuanMnO1xyXG5pbXBvcnQgbnVtYmVyTGluZUNvbW1vbiBmcm9tICcuLi8uLi9udW1iZXJMaW5lQ29tbW9uLmpzJztcclxuaW1wb3J0IFBpZ2d5QmFua0RlY29yYXRpb24gZnJvbSAnLi4vbW9kZWwvUGlnZ3lCYW5rRGVjb3JhdGlvbi5qcyc7XHJcbmltcG9ydCBwaWdneUJhbmtTaGFwZXMgZnJvbSAnLi9waWdneUJhbmtTaGFwZXMuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IE1BUF9ERUNPUkFUSU9OX1RZUEVfVE9fSU1BR0VfSU5GTyA9IG5ldyBNYXAoKTtcclxuTUFQX0RFQ09SQVRJT05fVFlQRV9UT19JTUFHRV9JTkZPLnNldCggUGlnZ3lCYW5rRGVjb3JhdGlvbi5OT05FLCBwaWdneUJhbmtOb0RlY29yYXRpb25fcG5nICk7XHJcbk1BUF9ERUNPUkFUSU9OX1RZUEVfVE9fSU1BR0VfSU5GTy5zZXQoIFBpZ2d5QmFua0RlY29yYXRpb24uRkxPV0VSUywgcGlnZ3lCYW5rV2l0aEZsb3dlcnNfcG5nICk7XHJcbk1BUF9ERUNPUkFUSU9OX1RZUEVfVE9fSU1BR0VfSU5GTy5zZXQoIFBpZ2d5QmFua0RlY29yYXRpb24uTElHSFROSU5HLCBwaWdneUJhbmtXaXRoTGlnaHRuaW5nX3BuZyApO1xyXG5cclxuY2xhc3MgUGlnZ3lCYW5rTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBmaWxsOiAncmdiYSggMCwgMCwgMCwgMCApJywgLy8gaW5pdGlhbGx5IHRyYW5zcGFyZW50IHNvIHRoYXQgaXQgaXMgaW52aXNpYmxlIGJ1dCBoYXMgc2l6ZVxyXG4gICAgICBsaW5lV2lkdGg6IDAsXHJcbiAgICAgIGRlY29yYXRpb25UeXBlOiBQaWdneUJhbmtEZWNvcmF0aW9uLkZMT1dFUlNcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBwaWdneUJhbmtPdXRsaW5lTm9kZSA9IG5ldyBQYXRoKCBwaWdneUJhbmtTaGFwZXMuTUVESVVNX1BJR0dZX0JBTktfU0hBUEUsIHtcclxuICAgICAgZmlsbDogb3B0aW9ucy5maWxsLFxyXG4gICAgICBsaW5lV2lkdGg6IG9wdGlvbnMubGluZVdpZHRoLFxyXG4gICAgICBjZW50ZXI6IFZlY3RvcjIuWkVST1xyXG4gICAgfSApO1xyXG4gICAgY29uc3Qgb3ZlcmxheUltYWdlID0gbmV3IEltYWdlKFxyXG4gICAgICBNQVBfREVDT1JBVElPTl9UWVBFX1RPX0lNQUdFX0lORk8uZ2V0KCBvcHRpb25zLmRlY29yYXRpb25UeXBlICksXHJcbiAgICAgIHsgb3BhY2l0eTogMC45IH1cclxuICAgICk7XHJcbiAgICBvdmVybGF5SW1hZ2Uuc2V0U2NhbGVNYWduaXR1ZGUoIHBpZ2d5QmFua091dGxpbmVOb2RlLndpZHRoIC8gb3ZlcmxheUltYWdlLndpZHRoICk7XHJcbiAgICBvdmVybGF5SW1hZ2UuY2VudGVyID0gVmVjdG9yMi5aRVJPO1xyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgcGlnZ3lCYW5rT3V0bGluZU5vZGUsIG92ZXJsYXlJbWFnZSBdO1xyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5vdXRsaW5lID0gcGlnZ3lCYW5rT3V0bGluZU5vZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcmV0dXJucyB7Q29sb3JEZWZ9IHRoZSBjb2xvciBvZiB0aGlzIHBpZ2d5IGJhbmsncyBmaWxsXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldEZpbGwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vdXRsaW5lLmZpbGw7XHJcbiAgfVxyXG5cclxuICBnZXQgZmlsbCgpIHsgcmV0dXJuIHRoaXMuZ2V0RmlsbCgpOyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q29sb3JEZWZ9IGZpbGxcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc2V0RmlsbCggZmlsbCApIHtcclxuICAgIHRoaXMub3V0bGluZS5maWxsID0gZmlsbDtcclxuICB9XHJcblxyXG4gIHNldCBmaWxsKCBmaWxsICkgeyB0aGlzLnNldEZpbGwoIGZpbGwgKTsgfVxyXG59XHJcblxyXG5udW1iZXJMaW5lQ29tbW9uLnJlZ2lzdGVyKCAnUGlnZ3lCYW5rTm9kZScsIFBpZ2d5QmFua05vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgUGlnZ3lCYW5rTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDckUsT0FBT0MseUJBQXlCLE1BQU0sOENBQThDO0FBQ3BGLE9BQU9DLHdCQUF3QixNQUFNLDZDQUE2QztBQUNsRixPQUFPQywwQkFBMEIsTUFBTSwrQ0FBK0M7QUFDdEYsT0FBT0MsZ0JBQWdCLE1B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