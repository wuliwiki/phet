// Copyright 2019-2022, University of Colorado Boulder

/**
 * This characterizes events that may be emitted from PhetioObjects to the PhET-iO data stream.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Enumeration from '../../phet-core/js/Enumeration.js';
import EnumerationValue from '../../phet-core/js/EnumerationValue.js';
import TandemConstants from './TandemConstants.js';
import tandemNamespace from './tandemNamespace.js';
import EnumerationIO from './types/EnumerationIO.js';
class EventType extends EnumerationValue {
  // The user has taken an action, such as pressing a button or moving a mouse
  static USER = new EventType();

  // An event was produced by the simulation model. This could be in response to a user event, or something that happens
  // during the simulation step. Note the separation is not model vs view, but user-driven vs automatic.
  static [TandemConstants.EVENT_TYPE_MODEL] = new EventType();

  // An event was triggered by the PhET-iO wrapper, via PhetioEngineIO.triggerEvent
  static WRAPPER = new EventType();

  // These messages are suppressed, use this to opt a PhetioObject out of the data stream feature.
  static OPT_OUT = new EventType();
  static enumeration = new Enumeration(EventType);
  static phetioType = EnumerationIO(EventType);
}
tandemNamespace.register('EventType', EventType);
export default EventType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJUYW5kZW1Db25zdGFudHMiLCJ0YW5kZW1OYW1lc3BhY2UiLCJFbnVtZXJhdGlvbklPIiwiRXZlbnRUeXBlIiwiVVNFUiIsIkVWRU5UX1RZUEVfTU9ERUwiLCJXUkFQUEVSIiwiT1BUX09VVCIsImVudW1lcmF0aW9uIiwicGhldGlvVHlwZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXZlbnRUeXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2hhcmFjdGVyaXplcyBldmVudHMgdGhhdCBtYXkgYmUgZW1pdHRlZCBmcm9tIFBoZXRpb09iamVjdHMgdG8gdGhlIFBoRVQtaU8gZGF0YSBzdHJlYW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb24gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uVmFsdWUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uVmFsdWUuanMnO1xyXG5pbXBvcnQgVGFuZGVtQ29uc3RhbnRzIGZyb20gJy4vVGFuZGVtQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuL3RhbmRlbU5hbWVzcGFjZS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvbklPIGZyb20gJy4vdHlwZXMvRW51bWVyYXRpb25JTy5qcyc7XHJcblxyXG5jbGFzcyBFdmVudFR5cGUgZXh0ZW5kcyBFbnVtZXJhdGlvblZhbHVlIHtcclxuXHJcbiAgLy8gVGhlIHVzZXIgaGFzIHRha2VuIGFuIGFjdGlvbiwgc3VjaCBhcyBwcmVzc2luZyBhIGJ1dHRvbiBvciBtb3ZpbmcgYSBtb3VzZVxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVVNFUiA9IG5ldyBFdmVudFR5cGUoKTtcclxuXHJcbiAgLy8gQW4gZXZlbnQgd2FzIHByb2R1Y2VkIGJ5IHRoZSBzaW11bGF0aW9uIG1vZGVsLiBUaGlzIGNvdWxkIGJlIGluIHJlc3BvbnNlIHRvIGEgdXNlciBldmVudCwgb3Igc29tZXRoaW5nIHRoYXQgaGFwcGVuc1xyXG4gIC8vIGR1cmluZyB0aGUgc2ltdWxhdGlvbiBzdGVwLiBOb3RlIHRoZSBzZXBhcmF0aW9uIGlzIG5vdCBtb2RlbCB2cyB2aWV3LCBidXQgdXNlci1kcml2ZW4gdnMgYXV0b21hdGljLlxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgWyBUYW5kZW1Db25zdGFudHMuRVZFTlRfVFlQRV9NT0RFTCBdID0gbmV3IEV2ZW50VHlwZSgpO1xyXG5cclxuICAvLyBBbiBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSBQaEVULWlPIHdyYXBwZXIsIHZpYSBQaGV0aW9FbmdpbmVJTy50cmlnZ2VyRXZlbnRcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFdSQVBQRVIgPSBuZXcgRXZlbnRUeXBlKCk7XHJcblxyXG4gIC8vIFRoZXNlIG1lc3NhZ2VzIGFyZSBzdXBwcmVzc2VkLCB1c2UgdGhpcyB0byBvcHQgYSBQaGV0aW9PYmplY3Qgb3V0IG9mIHRoZSBkYXRhIHN0cmVhbSBmZWF0dXJlLlxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgT1BUX09VVCA9IG5ldyBFdmVudFR5cGUoKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBlbnVtZXJhdGlvbiA9IG5ldyBFbnVtZXJhdGlvbiggRXZlbnRUeXBlICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBwaGV0aW9UeXBlID0gRW51bWVyYXRpb25JTyggRXZlbnRUeXBlICk7XHJcbn1cclxuXHJcbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ0V2ZW50VHlwZScsIEV2ZW50VHlwZSApO1xyXG5leHBvcnQgZGVmYXVsdCBFdmVudFR5cGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSxtQ0FBbUM7QUFDM0QsT0FBT0MsZ0JBQWdCLE1BQU0sd0NBQXdDO0FBQ3JFLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFDbEQsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjtBQUNsRCxPQUFPQyxhQUFhLE1BQU0sMEJBQTBCO0FBRXBELE1BQU1DLFNBQVMsU0FBU0osZ0JBQWdCLENBQUM7RUFFdkM7RUFDQSxPQUF1QkssSUFBSSxHQUFHLElBQUlELFNBQVMsQ0FBQyxDQUFDOztFQUU3QztFQUNBO0VBQ0EsUUFBeUJILGVBQWUsQ0FBQ0ssZ0JBQWdCLElBQUssSUFBSUYsU0FBUyxDQUFDLENBQUM7O0VBRTdFO0VBQ0EsT0FBdUJHLE9BQU8sR0FBRyxJQUFJSCxTQUFTLENBQUMsQ0FBQzs7RUFFaEQ7RUFDQSxPQUF1QkksT0FBTyxHQUFHLElBQUlKLFNBQVMsQ0FBQyxDQUFDO0VBRWhELE9BQXVCSyxXQUFXLEdBQUcsSUFBSVYsV0FBVyxDQUFFSyxTQUFVLENBQUM7RUFDakUsT0FBdUJNLFVBQVUsR0FBR1AsYUFBYSxDQUFFQyxTQUFVLENBQUM7QUFDaEU7QUFFQUYsZUFBZSxDQUFDUyxRQUFRLENBQUUsV0FBVyxFQUFFUCxTQUFVLENBQUM7QUFDbEQsZUFBZUEsU0FBUyJ9