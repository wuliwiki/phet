// Copyright 2020-2023, University of Colorado Boulder

/**
 * IO Types form a synthetic type system used to describe PhET-iO Elements. A PhET-iO Element is an instrumented PhetioObject
 * that is interoperable from the "wrapper" frame (outside the sim frame). An IO Type includes documentation, methods,
 * names, serialization, etc.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import validate from '../../../axon/js/validate.js';
import Validation from '../../../axon/js/Validation.js';
import optionize from '../../../phet-core/js/optionize.js';
import PhetioConstants from '../PhetioConstants.js';
import TandemConstants from '../TandemConstants.js';
import tandemNamespace from '../tandemNamespace.js';
import StateSchema from './StateSchema.js';
// constants
const VALIDATE_OPTIONS_FALSE = {
  validateValidator: false
};

/**
 * Estimate the core type name from a given IO Type name.
 */
const getCoreTypeName = ioTypeName => {
  const index = ioTypeName.indexOf(PhetioConstants.IO_TYPE_SUFFIX);
  assert && assert(index >= 0, 'IO should be in the type name');
  return ioTypeName.substring(0, index);
};
// TODO: not any, but do we have to serialize type parameters? https://github.com/phetsims/tandem/issues/263
export default class IOType {
  // eslint-disable-line @typescript-eslint/no-explicit-any

  // TODO: instead of unknown this is the second parameter type for PhetioDynamicElementContainer. How? https://github.com/phetsims/tandem/issues/261

  /**
   * @param typeName - The name that this IOType will have in the public PhET-iO API. In general, this should
   *    only be word characters, ending in "IO". Parametric types are a special subset of IOTypes that include their
   *    parameters in their typeName. If an IOType's parameters are other IO Type(s), then they should be included within
   *    angle brackets, like "PropertyIO<BooleanIO>". Some other types use a more custom format for displaying their
   *    parameter types, in this case the parameter section of the type name (immediately following "IO") should begin
   *    with an open paren, "(". Thus the schema for a typeName could be defined (using regex) as `[A-Z]\w*IO([(<].*){0,1}`.
   *    Parameterized types should also include a `parameterTypes` field on the IOType.
   * @param providedOptions
   */
  constructor(typeName, providedOptions) {
    this.typeName = typeName;
    // For reference in the options
    const supertype = providedOptions.supertype || IOType.ObjectIO;
    const toStateObjectSupplied = !!providedOptions.toStateObject;
    const applyStateSupplied = !!providedOptions.applyState;
    const stateSchemaSupplied = !!providedOptions.stateSchema;
    const options = optionize()({
      supertype: IOType.ObjectIO,
      methods: {},
      events: [],
      metadataDefaults: {},
      //  Most likely this will remain PhET-iO internal, and shouldn't need to be used when creating IOTypes outside of tandem/.
      dataDefaults: {},
      methodOrder: [],
      parameterTypes: [],
      documentation: `IO Type for ${getCoreTypeName(typeName)}`,
      isFunctionType: false,
      /**** STATE ****/

      toStateObject: supertype && supertype.toStateObject,
      fromStateObject: supertype && supertype.fromStateObject,
      stateObjectToCreateElementArguments: supertype && supertype.stateObjectToCreateElementArguments,
      applyState: supertype && supertype.applyState,
      stateSchema: null,
      defaultDeserializationMethod: 'fromStateObject',
      addChildElement: supertype && supertype.addChildElement
    }, providedOptions);
    if (assert && supertype) {
      Object.keys(options.metadataDefaults).forEach(metadataDefaultKey => {
        assert && supertype.getAllMetadataDefaults().hasOwnProperty(metadataDefaultKey) && assert(supertype.getAllMetadataDefaults()[metadataDefaultKey] !== options.metadataDefaults[metadataDefaultKey], `${metadataDefaultKey} should not have the same default value as the ancestor metadata default.`);
      });
    }
    this.supertype = supertype;
    this.documentation = options.documentation;
    this.methods = options.methods;
    this.events = options.events;
    this.metadataDefaults = options.metadataDefaults; // just for this level, see getAllMetadataDefaults()
    this.dataDefaults = options.dataDefaults; // just for this level, see getAllDataDefaults()
    this.methodOrder = options.methodOrder;
    this.parameterTypes = options.parameterTypes;

    // Validation
    this.validator = _.pick(options, Validation.VALIDATOR_KEYS);
    this.validator.validationMessage = this.validator.validationMessage || `Validation failed IOType Validator: ${this.typeName}`;
    this.defaultDeserializationMethod = options.defaultDeserializationMethod;
    if (options.stateSchema === null || options.stateSchema instanceof StateSchema) {
      // @ts-expect-error https://github.com/phetsims/tandem/issues/263
      this.stateSchema = options.stateSchema;
    } else {
      const compositeSchema = typeof options.stateSchema === 'function' ? options.stateSchema(this) : options.stateSchema;
      this.stateSchema = new StateSchema({
        compositeSchema: compositeSchema
      });
    }

    // Assert that toStateObject method is provided for value StateSchemas. Do this with the following logic:
    // 1. It is acceptable to not provide a stateSchema (for IOTypes that aren't stateful)
    // 2. You must either provide a toStateObject, or have a composite StateSchema. Composite state schemas support default serialization methods.
    assert && assert(!this.stateSchema || toStateObjectSupplied || this.stateSchema.isComposite(), 'toStateObject method must be provided for value StateSchemas');
    this.toStateObject = coreObject => {
      validate(coreObject, this.validator, VALIDATE_OPTIONS_FALSE);
      let toStateObject;

      // Only do this non-standard toStateObject function if there is a stateSchema but no toStateObject provided
      if (!toStateObjectSupplied && stateSchemaSupplied && this.stateSchema && this.stateSchema.isComposite()) {
        toStateObject = this.stateSchema.defaultToStateObject(coreObject);
      } else {
        toStateObject = options.toStateObject(coreObject);
      }

      // Validate, but only if this IOType instance has more to validate than the supertype
      if (toStateObjectSupplied || stateSchemaSupplied) {
        // Only validate the stateObject if it is phetioState:true.
        // This is an n*m algorithm because for each time toStateObject is called and needs validation, this.validateStateObject
        // looks all the way up the IOType hierarchy. This is not efficient, but gains us the ability to make sure that
        // the stateObject doesn't have any superfluous, unexpected keys. The "m" portion is based on how many sub-properties
        // in a state call `toStateObject`, and the "n" portion is based on how many IOTypes in the hierarchy define a
        // toStateObject or stateSchema. In the future we could potentially improve performance by having validateStateObject
        // only check against the schema at this level, but then extra keys in the stateObject would not be caught. From work done in https://github.com/phetsims/phet-io/issues/1774
        assert && this.validateStateObject(toStateObject);
      }
      return toStateObject;
    };
    this.fromStateObject = options.fromStateObject;
    this.stateObjectToCreateElementArguments = options.stateObjectToCreateElementArguments;
    this.applyState = (coreObject, stateObject) => {
      validate(coreObject, this.validator, VALIDATE_OPTIONS_FALSE);

      // Validate, but only if this IOType instance has more to validate than the supertype
      if (applyStateSupplied || stateSchemaSupplied) {
        // Validate that the provided stateObject is of the expected schema
        // NOTE: Cannot use this.validateStateObject because options adopts supertype.applyState, which is bounds to the
        // parent IO Type. This prevents correct validation because the supertype doesn't know about the subtype schemas.
        // @ts-expect-error we cannot type check against PhetioObject from this file
        assert && coreObject.phetioType.validateStateObject(stateObject);
      }

      // Only do this non-standard applyState function from stateSchema if there is a stateSchema but no applyState provided
      if (!applyStateSupplied && stateSchemaSupplied && this.stateSchema && this.stateSchema.isComposite()) {
        this.stateSchema.defaultApplyState(coreObject, stateObject);
      } else {
        options.applyState(coreObject, stateObject);
      }
    };
    this.isFunctionType = options.isFunctionType;
    this.addChildElement = options.addChildElement;
    if (assert) {
      assert && assert(supertype || this.typeName === 'ObjectIO', 'supertype is required');
      assert && assert(!this.typeName.includes('.'), 'Dots should not appear in type names');
      assert && assert(this.typeName.split(/[<(]/)[0].endsWith(PhetioConstants.IO_TYPE_SUFFIX), `IO Type name must end with ${PhetioConstants.IO_TYPE_SUFFIX}`);
      assert && assert(this.hasOwnProperty('typeName'), 'this.typeName is required');

      // assert that each public method adheres to the expected schema
      this.methods && Object.values(this.methods).forEach(methodObject => {
        if (typeof methodObject === 'object') {
          assert && methodObject.invocableForReadOnlyElements && assert(typeof methodObject.invocableForReadOnlyElements === 'boolean', `invocableForReadOnlyElements must be of type boolean: ${methodObject.invocableForReadOnlyElements}`);
        }
      });
      assert && assert(this.documentation.length > 0, 'documentation must be provided');
      this.methods && this.hasOwnProperty('methodOrder') && this.methodOrder.forEach(methodName => {
        assert && assert(this.methods[methodName], `methodName not in public methods: ${methodName}`);
      });
      if (supertype) {
        const typeHierarchy = supertype.getTypeHierarchy();
        assert && this.events && this.events.forEach(event => {
          // Make sure events are not listed again
          assert && assert(!_.some(typeHierarchy, t => t.events.includes(event)), `IOType should not declare event that parent also has: ${event}`);
        });
      } else {
        // The root IOType must supply all 4 state methods.
        assert && assert(typeof options.toStateObject === 'function', 'toStateObject must be defined');
        assert && assert(typeof options.fromStateObject === 'function', 'fromStateObject must be defined');
        assert && assert(typeof options.stateObjectToCreateElementArguments === 'function', 'stateObjectToCreateElementArguments must be defined');
        assert && assert(typeof options.applyState === 'function', 'applyState must be defined');
      }
    }
  }

  /**
   * Gets an array of IOTypes of the self type and all the supertype ancestors.
   */
  getTypeHierarchy() {
    const array = [];

    // @ts-expect-error Still working out this stuff, https://github.com/phetsims/tandem/issues/263
    let ioType = this; // eslint-disable-line consistent-this, @typescript-eslint/no-this-alias
    while (ioType) {
      array.push(ioType);
      ioType = ioType.supertype;
    }
    return array;
  }

  /**
   * Returns true if this IOType is a subtype of the passed-in type (or if they are the same).
   */
  extends(type) {
    // memory-based implementation OK since this method is only used in assertions
    return this.getTypeHierarchy().includes(type);
  }

  /**
   * Return all the metadata defaults (for the entire IO Type hierarchy)
   */
  getAllMetadataDefaults() {
    return _.merge({}, this.supertype ? this.supertype.getAllMetadataDefaults() : {}, this.metadataDefaults);
  }

  /**
   * Return all the data defaults (for the entire IO Type hierarchy)
   */
  getAllDataDefaults() {
    return _.merge({}, this.supertype ? this.supertype.getAllDataDefaults() : {}, this.dataDefaults);
  }

  /**
   * @param stateObject - the stateObject to validate against
   * @param toAssert=false - whether to assert when invalid
   * @param schemaKeysPresentInStateObject=[]
   * @returns if the stateObject is valid or not.
   */
  isStateObjectValid(stateObject, toAssert = false, schemaKeysPresentInStateObject = []) {
    // Set to false when invalid
    let valid = true;

    // make sure the stateObject has everything the schema requires and nothing more
    if (this.stateSchema) {
      const validSoFar = this.stateSchema.checkStateObjectValid(stateObject, toAssert, schemaKeysPresentInStateObject);

      // null as a marker to keep checking up the hierarchy, otherwise we reached our based case because the stateSchema was a value, not a composite
      if (validSoFar !== null) {
        return validSoFar;
      }
    }
    if (this.supertype) {
      return valid && this.supertype.isStateObjectValid(stateObject, toAssert, schemaKeysPresentInStateObject);
    }

    // When we reach the root, make sure there isn't anything in the stateObject that isn't described by a schema
    if (!this.supertype && stateObject && typeof stateObject !== 'string' && !Array.isArray(stateObject)) {
      // Visit the state
      Object.keys(stateObject).forEach(key => {
        const keyValid = schemaKeysPresentInStateObject.includes(key);
        if (!keyValid) {
          valid = false;
        }
        assert && toAssert && assert(keyValid, `stateObject provided a key that is not in the schema: ${key}`);
      });
      return valid;
    }
    return true;
  }

  /**
   * Assert if the provided stateObject is not valid to this IOType's stateSchema
   */
  validateStateObject(stateObject) {
    this.isStateObjectValid(stateObject, true);
  }
  toString() {
    return this.typeName;
  }
}

// default state value
const DEFAULT_STATE = null;
IOType.ObjectIO = new IOType(TandemConstants.OBJECT_IO_TYPE_NAME, {
  isValidValue: () => true,
  supertype: null,
  documentation: 'The root of the IO Type hierarchy',
  toStateObject: coreObject => {
    if (phet && phet.tandem && phet.tandem.Tandem.VALIDATION) {
      assert && assert(coreObject.tandem, 'coreObject must be PhET-iO object');
      assert && assert(!coreObject.phetioState, `fell back to root serialization state for ${coreObject.tandem.phetioID}. Potential solutions:
         * mark the type as phetioState: false
         * create a custom toStateObject method in your IO Type
         * perhaps you have everything right, but forgot to pass in the IOType via phetioType in the constructor`);
    }
    return DEFAULT_STATE;
  },
  fromStateObject: () => {
    throw new Error('ObjectIO.fromStateObject should not be called');
  },
  stateObjectToCreateElementArguments: () => [],
  applyState: _.noop,
  metadataDefaults: TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS,
  dataDefaults: {
    initialState: DEFAULT_STATE
  },
  stateSchema: null
});
tandemNamespace.register('IOType', IOType);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,