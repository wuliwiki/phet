// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in number type, but adds explicit support for positive and negative infinity.
 * Typical use cases should use NumberIO, but if you have a case that must support infinities, please
 * use this instead.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
const InfiniteNumberIO = new IOType('InfiniteNumberIO', {
  valueType: 'number',
  documentation: 'IO Type for Javascript\'s number primitive type',
  toStateObject: value => value === Number.POSITIVE_INFINITY ? 'POSITIVE_INFINITY' : value === Number.NEGATIVE_INFINITY ? 'NEGATIVE_INFINITY' : value,
  fromStateObject: stateObject => stateObject === 'POSITIVE_INFINITY' ? Number.POSITIVE_INFINITY : stateObject === 'NEGATIVE_INFINITY' ? Number.NEGATIVE_INFINITY : stateObject,
  stateSchema: StateSchema.asValue('\'POSITIVE_INFINITY\'|\'NEGATIVE_INFINITY\'|number', {
    isValidValue: value => value === 'POSITIVE_INFINITY' || value === 'NEGATIVE_INFINITY' || typeof value === 'number' && !isNaN(value)
  })
});
tandemNamespace.register('InfiniteNumberIO', InfiniteNumberIO);
export default InfiniteNumberIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIkluZmluaXRlTnVtYmVySU8iLCJ2YWx1ZVR5cGUiLCJkb2N1bWVudGF0aW9uIiwidG9TdGF0ZU9iamVjdCIsInZhbHVlIiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJORUdBVElWRV9JTkZJTklUWSIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0Iiwic3RhdGVTY2hlbWEiLCJhc1ZhbHVlIiwiaXNWYWxpZFZhbHVlIiwiaXNOYU4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkluZmluaXRlTnVtYmVySU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSU8gVHlwZSBmb3IgSlMncyBidWlsdC1pbiBudW1iZXIgdHlwZSwgYnV0IGFkZHMgZXhwbGljaXQgc3VwcG9ydCBmb3IgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIGluZmluaXR5LlxyXG4gKiBUeXBpY2FsIHVzZSBjYXNlcyBzaG91bGQgdXNlIE51bWJlcklPLCBidXQgaWYgeW91IGhhdmUgYSBjYXNlIHRoYXQgbXVzdCBzdXBwb3J0IGluZmluaXRpZXMsIHBsZWFzZVxyXG4gKiB1c2UgdGhpcyBpbnN0ZWFkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuLi90YW5kZW1OYW1lc3BhY2UuanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcclxuaW1wb3J0IFN0YXRlU2NoZW1hIGZyb20gJy4vU3RhdGVTY2hlbWEuanMnO1xyXG5cclxuZXhwb3J0IHR5cGUgSW5maW5pdGVOdW1iZXJTdGF0ZU9iamVjdCA9IG51bWJlciB8ICdQT1NJVElWRV9JTkZJTklUWScgfCAnTkVHQVRJVkVfSU5GSU5JVFknO1xyXG5cclxuY29uc3QgSW5maW5pdGVOdW1iZXJJTyA9IG5ldyBJT1R5cGU8bnVtYmVyLCBJbmZpbml0ZU51bWJlclN0YXRlT2JqZWN0PiggJ0luZmluaXRlTnVtYmVySU8nLCB7XHJcbiAgdmFsdWVUeXBlOiAnbnVtYmVyJyxcclxuICBkb2N1bWVudGF0aW9uOiAnSU8gVHlwZSBmb3IgSmF2YXNjcmlwdFxcJ3MgbnVtYmVyIHByaW1pdGl2ZSB0eXBlJyxcclxuICB0b1N0YXRlT2JqZWN0OiB2YWx1ZSA9PiB2YWx1ZSA9PT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZID8gJ1BPU0lUSVZFX0lORklOSVRZJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT09IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA/ICdORUdBVElWRV9JTkZJTklUWScgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxyXG4gIGZyb21TdGF0ZU9iamVjdDogc3RhdGVPYmplY3QgPT4gc3RhdGVPYmplY3QgPT09ICdQT1NJVElWRV9JTkZJTklUWScgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVPYmplY3QgPT09ICdORUdBVElWRV9JTkZJTklUWScgPyBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVPYmplY3QsXHJcbiAgc3RhdGVTY2hlbWE6IFN0YXRlU2NoZW1hLmFzVmFsdWU8bnVtYmVyLCBJbmZpbml0ZU51bWJlclN0YXRlT2JqZWN0PiggJ1xcJ1BPU0lUSVZFX0lORklOSVRZXFwnfFxcJ05FR0FUSVZFX0lORklOSVRZXFwnfG51bWJlcicsIHtcclxuICAgIGlzVmFsaWRWYWx1ZTogKCB2YWx1ZTogSW5maW5pdGVOdW1iZXJTdGF0ZU9iamVjdCApID0+IHZhbHVlID09PSAnUE9TSVRJVkVfSU5GSU5JVFknIHx8IHZhbHVlID09PSAnTkVHQVRJVkVfSU5GSU5JVFknIHx8ICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4oIHZhbHVlICkgKVxyXG4gIH0gKVxyXG59ICk7XHJcblxyXG50YW5kZW1OYW1lc3BhY2UucmVnaXN0ZXIoICdJbmZpbml0ZU51bWJlcklPJywgSW5maW5pdGVOdW1iZXJJTyApO1xyXG5leHBvcnQgZGVmYXVsdCBJbmZpbml0ZU51bWJlcklPOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFJMUMsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSUYsTUFBTSxDQUFxQyxrQkFBa0IsRUFBRTtFQUMxRkcsU0FBUyxFQUFFLFFBQVE7RUFDbkJDLGFBQWEsRUFBRSxpREFBaUQ7RUFDaEVDLGFBQWEsRUFBRUMsS0FBSyxJQUFJQSxLQUFLLEtBQUtDLE1BQU0sQ0FBQ0MsaUJBQWlCLEdBQUcsbUJBQW1CLEdBQ3hERixLQUFLLEtBQUtDLE1BQU0sQ0FBQ0UsaUJBQWlCLEdBQUcsbUJBQW1CLEdBQ3hESCxLQUFLO0VBQzdCSSxlQUFlLEVBQUVDLFdBQVcsSUFBSUEsV0FBVyxLQUFLLG1CQUFtQixHQUFHSixNQUFNLENBQUNDLGlCQUFpQixHQUM5REcsV0FBVyxLQUFLLG1CQUFtQixHQUFHSixNQUFNLENBQUNFLGlCQUFpQixHQUM5REUsV0FBVztFQUMzQ0MsV0FBVyxFQUFFWCxXQUFXLENBQUNZLE9BQU8sQ0FBcUMsb0RBQW9ELEVBQUU7SUFDekhDLFlBQVksRUFBSVIsS0FBZ0MsSUFBTUEsS0FBSyxLQUFLLG1CQUFtQixJQUFJQSxLQUFLLEtBQUssbUJBQW1CLElBQU0sT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDUyxLQUFLLENBQUVULEtBQU07RUFDdkssQ0FBRTtBQUNKLENBQUUsQ0FBQztBQUVIUCxlQUFlLENBQUNpQixRQUFRLENBQUUsa0JBQWtCLEVBQUVkLGdCQUFpQixDQUFDO0FBQ2hFLGVBQWVBLGdCQUFnQiJ9