// Copyright 2019-2022, University of Colorado Boulder

/**
 * ReferenceIO uses reference identity for toStateObject/fromStateObject
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import CouldNotYetDeserializeError from '../CouldNotYetDeserializeError.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StringIO from './StringIO.js';

// {Map.<cacheKey:string|*, IOType>} - Cache each parameterized ReferenceIO so that it is only created once
const cache = new Map();
const ReferenceIO = parameterType => {
  assert && assert(parameterType, 'ReferenceIO needs parameterType');
  const cacheKey = parameterType;
  if (!cache.has(cacheKey)) {
    assert && assert(typeof parameterType.typeName === 'string', 'type name should be a string');
    cache.set(cacheKey, new IOType(`ReferenceIO<${parameterType.typeName}>`, {
      isValidValue: value => Validation.isValueValid(value, parameterType.validator),
      documentation: 'Uses reference identity for serializing and deserializing, and validates based on its parameter IO Type.',
      parameterTypes: [parameterType],
      /**
       * Return the json that ReferenceIO is wrapping.  This can be overridden by subclasses, or types can use ReferenceIO type
       * directly to use this implementation.
       */
      toStateObject(phetioObject) {
        // NOTE: We cannot assert that phetioObject.phetioState === false here because sometimes ReferenceIO is used statically like
        // ReferenceIO( Vector2IO ).toStateObject( myVector );
        return {
          phetioID: phetioObject.tandem.phetioID
        };
      },
      stateSchema: {
        phetioID: StringIO
      },
      /**
       * Decodes the object from a state, used in PhetioStateEngine.setState.  This can be overridden by subclasses, or types can
       * use ReferenceIO type directly to use this implementation.
       * @throws CouldNotYetDeserializeError
       */
      fromStateObject(stateObject) {
        assert && assert(stateObject && typeof stateObject.phetioID === 'string', 'phetioID should be a string');
        if (phet.phetio.phetioEngine.hasPhetioObject(stateObject.phetioID)) {
          return phet.phetio.phetioEngine.getPhetioObject(stateObject.phetioID);
        } else {
          throw new CouldNotYetDeserializeError();
        }
      },
      /**
       * References should be using fromStateObject to get a copy of the PhET-iO element.
       */
      applyState(coreObject) {
        assert && assert(false, `ReferenceIO is meant to be used as DataType serialization (see fromStateObject) for phetioID: ${coreObject.tandem.phetioID}`);
      }
    }));
  }
  return cache.get(cacheKey);
};
tandemNamespace.register('ReferenceIO', ReferenceIO);
export default ReferenceIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwiQ291bGROb3RZZXREZXNlcmlhbGl6ZUVycm9yIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RyaW5nSU8iLCJjYWNoZSIsIk1hcCIsIlJlZmVyZW5jZUlPIiwicGFyYW1ldGVyVHlwZSIsImFzc2VydCIsImNhY2hlS2V5IiwiaGFzIiwidHlwZU5hbWUiLCJzZXQiLCJpc1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsImlzVmFsdWVWYWxpZCIsInZhbGlkYXRvciIsImRvY3VtZW50YXRpb24iLCJwYXJhbWV0ZXJUeXBlcyIsInRvU3RhdGVPYmplY3QiLCJwaGV0aW9PYmplY3QiLCJwaGV0aW9JRCIsInRhbmRlbSIsInN0YXRlU2NoZW1hIiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJwaGV0IiwicGhldGlvIiwicGhldGlvRW5naW5lIiwiaGFzUGhldGlvT2JqZWN0IiwiZ2V0UGhldGlvT2JqZWN0IiwiYXBwbHlTdGF0ZSIsImNvcmVPYmplY3QiLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJlZmVyZW5jZUlPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJlZmVyZW5jZUlPIHVzZXMgcmVmZXJlbmNlIGlkZW50aXR5IGZvciB0b1N0YXRlT2JqZWN0L2Zyb21TdGF0ZU9iamVjdFxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVmFsaWRhdGlvbiBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1ZhbGlkYXRpb24uanMnO1xyXG5pbXBvcnQgQ291bGROb3RZZXREZXNlcmlhbGl6ZUVycm9yIGZyb20gJy4uL0NvdWxkTm90WWV0RGVzZXJpYWxpemVFcnJvci5qcyc7XHJcbmltcG9ydCB0YW5kZW1OYW1lc3BhY2UgZnJvbSAnLi4vdGFuZGVtTmFtZXNwYWNlLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBTdHJpbmdJTyBmcm9tICcuL1N0cmluZ0lPLmpzJztcclxuXHJcbi8vIHtNYXAuPGNhY2hlS2V5OnN0cmluZ3wqLCBJT1R5cGU+fSAtIENhY2hlIGVhY2ggcGFyYW1ldGVyaXplZCBSZWZlcmVuY2VJTyBzbyB0aGF0IGl0IGlzIG9ubHkgY3JlYXRlZCBvbmNlXHJcbmNvbnN0IGNhY2hlID0gbmV3IE1hcDxJT1R5cGUsIElPVHlwZT4oKTtcclxuXHJcbmV4cG9ydCB0eXBlIFJlZmVyZW5jZUlPU3RhdGUgPSB7XHJcbiAgcGhldGlvSUQ6IHN0cmluZztcclxufTtcclxuXHJcbmNvbnN0IFJlZmVyZW5jZUlPID0gKCBwYXJhbWV0ZXJUeXBlOiBJT1R5cGUgKTogSU9UeXBlID0+IHtcclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBwYXJhbWV0ZXJUeXBlLCAnUmVmZXJlbmNlSU8gbmVlZHMgcGFyYW1ldGVyVHlwZScgKTtcclxuXHJcbiAgY29uc3QgY2FjaGVLZXkgPSBwYXJhbWV0ZXJUeXBlO1xyXG5cclxuICBpZiAoICFjYWNoZS5oYXMoIGNhY2hlS2V5ICkgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdHlwZW9mIHBhcmFtZXRlclR5cGUudHlwZU5hbWUgPT09ICdzdHJpbmcnLCAndHlwZSBuYW1lIHNob3VsZCBiZSBhIHN0cmluZycgKTtcclxuICAgIGNhY2hlLnNldCggY2FjaGVLZXksIG5ldyBJT1R5cGUoIGBSZWZlcmVuY2VJTzwke3BhcmFtZXRlclR5cGUudHlwZU5hbWV9PmAsIHtcclxuICAgICAgaXNWYWxpZFZhbHVlOiB2YWx1ZSA9PiBWYWxpZGF0aW9uLmlzVmFsdWVWYWxpZCggdmFsdWUsIHBhcmFtZXRlclR5cGUudmFsaWRhdG9yICksXHJcbiAgICAgIGRvY3VtZW50YXRpb246ICdVc2VzIHJlZmVyZW5jZSBpZGVudGl0eSBmb3Igc2VyaWFsaXppbmcgYW5kIGRlc2VyaWFsaXppbmcsIGFuZCB2YWxpZGF0ZXMgYmFzZWQgb24gaXRzIHBhcmFtZXRlciBJTyBUeXBlLicsXHJcbiAgICAgIHBhcmFtZXRlclR5cGVzOiBbIHBhcmFtZXRlclR5cGUgXSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm4gdGhlIGpzb24gdGhhdCBSZWZlcmVuY2VJTyBpcyB3cmFwcGluZy4gIFRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gYnkgc3ViY2xhc3Nlcywgb3IgdHlwZXMgY2FuIHVzZSBSZWZlcmVuY2VJTyB0eXBlXHJcbiAgICAgICAqIGRpcmVjdGx5IHRvIHVzZSB0aGlzIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgKi9cclxuICAgICAgdG9TdGF0ZU9iamVjdCggcGhldGlvT2JqZWN0ICk6IFJlZmVyZW5jZUlPU3RhdGUge1xyXG5cclxuICAgICAgICAvLyBOT1RFOiBXZSBjYW5ub3QgYXNzZXJ0IHRoYXQgcGhldGlvT2JqZWN0LnBoZXRpb1N0YXRlID09PSBmYWxzZSBoZXJlIGJlY2F1c2Ugc29tZXRpbWVzIFJlZmVyZW5jZUlPIGlzIHVzZWQgc3RhdGljYWxseSBsaWtlXHJcbiAgICAgICAgLy8gUmVmZXJlbmNlSU8oIFZlY3RvcjJJTyApLnRvU3RhdGVPYmplY3QoIG15VmVjdG9yICk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHBoZXRpb0lEOiBwaGV0aW9PYmplY3QudGFuZGVtLnBoZXRpb0lEXHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHN0YXRlU2NoZW1hOiB7XHJcbiAgICAgICAgcGhldGlvSUQ6IFN0cmluZ0lPXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRGVjb2RlcyB0aGUgb2JqZWN0IGZyb20gYSBzdGF0ZSwgdXNlZCBpbiBQaGV0aW9TdGF0ZUVuZ2luZS5zZXRTdGF0ZS4gIFRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gYnkgc3ViY2xhc3Nlcywgb3IgdHlwZXMgY2FuXHJcbiAgICAgICAqIHVzZSBSZWZlcmVuY2VJTyB0eXBlIGRpcmVjdGx5IHRvIHVzZSB0aGlzIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgKiBAdGhyb3dzIENvdWxkTm90WWV0RGVzZXJpYWxpemVFcnJvclxyXG4gICAgICAgKi9cclxuICAgICAgZnJvbVN0YXRlT2JqZWN0KCBzdGF0ZU9iamVjdDogUmVmZXJlbmNlSU9TdGF0ZSApIHtcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzdGF0ZU9iamVjdCAmJiB0eXBlb2Ygc3RhdGVPYmplY3QucGhldGlvSUQgPT09ICdzdHJpbmcnLCAncGhldGlvSUQgc2hvdWxkIGJlIGEgc3RyaW5nJyApO1xyXG4gICAgICAgIGlmICggcGhldC5waGV0aW8ucGhldGlvRW5naW5lLmhhc1BoZXRpb09iamVjdCggc3RhdGVPYmplY3QucGhldGlvSUQgKSApIHtcclxuICAgICAgICAgIHJldHVybiBwaGV0LnBoZXRpby5waGV0aW9FbmdpbmUuZ2V0UGhldGlvT2JqZWN0KCBzdGF0ZU9iamVjdC5waGV0aW9JRCApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBDb3VsZE5vdFlldERlc2VyaWFsaXplRXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVmZXJlbmNlcyBzaG91bGQgYmUgdXNpbmcgZnJvbVN0YXRlT2JqZWN0IHRvIGdldCBhIGNvcHkgb2YgdGhlIFBoRVQtaU8gZWxlbWVudC5cclxuICAgICAgICovXHJcbiAgICAgIGFwcGx5U3RhdGUoIGNvcmVPYmplY3QgKSB7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsIGBSZWZlcmVuY2VJTyBpcyBtZWFudCB0byBiZSB1c2VkIGFzIERhdGFUeXBlIHNlcmlhbGl6YXRpb24gKHNlZSBmcm9tU3RhdGVPYmplY3QpIGZvciBwaGV0aW9JRDogJHtjb3JlT2JqZWN0LnRhbmRlbS5waGV0aW9JRH1gICk7XHJcbiAgICAgIH1cclxuICAgIH0gKSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNhY2hlLmdldCggY2FjaGVLZXkgKSE7XHJcbn07XHJcblxyXG50YW5kZW1OYW1lc3BhY2UucmVnaXN0ZXIoICdSZWZlcmVuY2VJTycsIFJlZmVyZW5jZUlPICk7XHJcbmV4cG9ydCBkZWZhdWx0IFJlZmVyZW5jZUlPOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGdDQUFnQztBQUN2RCxPQUFPQywyQkFBMkIsTUFBTSxtQ0FBbUM7QUFDM0UsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSUMsR0FBRyxDQUFpQixDQUFDO0FBTXZDLE1BQU1DLFdBQVcsR0FBS0MsYUFBcUIsSUFBYztFQUN2REMsTUFBTSxJQUFJQSxNQUFNLENBQUVELGFBQWEsRUFBRSxpQ0FBa0MsQ0FBQztFQUVwRSxNQUFNRSxRQUFRLEdBQUdGLGFBQWE7RUFFOUIsSUFBSyxDQUFDSCxLQUFLLENBQUNNLEdBQUcsQ0FBRUQsUUFBUyxDQUFDLEVBQUc7SUFFNUJELE1BQU0sSUFBSUEsTUFBTSxDQUFFLE9BQU9ELGFBQWEsQ0FBQ0ksUUFBUSxLQUFLLFFBQVEsRUFBRSw4QkFBK0IsQ0FBQztJQUM5RlAsS0FBSyxDQUFDUSxHQUFHLENBQUVILFFBQVEsRUFBRSxJQUFJUCxNQUFNLENBQUcsZUFBY0ssYUFBYSxDQUFDSSxRQUFTLEdBQUUsRUFBRTtNQUN6RUUsWUFBWSxFQUFFQyxLQUFLLElBQUlmLFVBQVUsQ0FBQ2dCLFlBQVksQ0FBRUQsS0FBSyxFQUFFUCxhQUFhLENBQUNTLFNBQVUsQ0FBQztNQUNoRkMsYUFBYSxFQUFFLDBHQUEwRztNQUN6SEMsY0FBYyxFQUFFLENBQUVYLGFBQWEsQ0FBRTtNQUVqQztBQUNOO0FBQ0E7QUFDQTtNQUNNWSxhQUFhQSxDQUFFQyxZQUFZLEVBQXFCO1FBRTlDO1FBQ0E7UUFDQSxPQUFPO1VBQ0xDLFFBQVEsRUFBRUQsWUFBWSxDQUFDRSxNQUFNLENBQUNEO1FBQ2hDLENBQUM7TUFDSCxDQUFDO01BRURFLFdBQVcsRUFBRTtRQUNYRixRQUFRLEVBQUVsQjtNQUNaLENBQUM7TUFFRDtBQUNOO0FBQ0E7QUFDQTtBQUNBO01BQ01xQixlQUFlQSxDQUFFQyxXQUE2QixFQUFHO1FBQy9DakIsTUFBTSxJQUFJQSxNQUFNLENBQUVpQixXQUFXLElBQUksT0FBT0EsV0FBVyxDQUFDSixRQUFRLEtBQUssUUFBUSxFQUFFLDZCQUE4QixDQUFDO1FBQzFHLElBQUtLLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxZQUFZLENBQUNDLGVBQWUsQ0FBRUosV0FBVyxDQUFDSixRQUFTLENBQUMsRUFBRztVQUN0RSxPQUFPSyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDRSxlQUFlLENBQUVMLFdBQVcsQ0FBQ0osUUFBUyxDQUFDO1FBQ3pFLENBQUMsTUFDSTtVQUNILE1BQU0sSUFBSXJCLDJCQUEyQixDQUFDLENBQUM7UUFDekM7TUFDRixDQUFDO01BRUQ7QUFDTjtBQUNBO01BQ00rQixVQUFVQSxDQUFFQyxVQUFVLEVBQUc7UUFDdkJ4QixNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUcsaUdBQWdHd0IsVUFBVSxDQUFDVixNQUFNLENBQUNELFFBQVMsRUFBRSxDQUFDO01BQzFKO0lBQ0YsQ0FBRSxDQUFFLENBQUM7RUFDUDtFQUVBLE9BQU9qQixLQUFLLENBQUM2QixHQUFHLENBQUV4QixRQUFTLENBQUM7QUFDOUIsQ0FBQztBQUVEUixlQUFlLENBQUNpQyxRQUFRLENBQUUsYUFBYSxFQUFFNUIsV0FBWSxDQUFDO0FBQ3RELGVBQWVBLFdBQVcifQ==