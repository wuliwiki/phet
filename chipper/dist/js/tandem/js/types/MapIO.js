// Copyright 2021-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in Map type.
 *
 * NOTE: This has not been reviewed, tested or used in production code yet.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';

// Cache each parameterized IOType so that it is only created once.
const cache = new Map();
const ARRAY_OF_ARRAY_VALIDATOR = {
  valueType: Array,
  isValidValue: value => Array.isArray(value) && value.every(element => Array.isArray(element))
};
/**
 * Parametric IO Type constructor.  Given an element type, this function returns an appropriate map IO Type.
 * This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
 */
function MapIO(keyType, valueType) {
  const cacheKey = keyType.typeName + ',' + valueType.typeName;
  if (!cache.has(cacheKey)) {
    cache.set(cacheKey, new IOType(`MapIO<${keyType.typeName},${valueType.typeName}>`, {
      valueType: Map,
      isValidValue: map => {
        for (const [key, value] of map) {
          if (!Validation.isValueValid(key, keyType.validator)) {
            return false;
          }
          if (!Validation.isValueValid(value, valueType.validator)) {
            return false;
          }
        }
        return true;
      },
      parameterTypes: [keyType, valueType],
      toStateObject: map => {
        const array = [];
        for (const [key, value] of map) {
          array.push([keyType.toStateObject(key), valueType.toStateObject(value)]);
        }
        return array;
      },
      fromStateObject: outerArray => {
        const result = outerArray.map(tuple => {
          return [keyType.fromStateObject(tuple[0]), valueType.fromStateObject(tuple[1])];
        });

        // @ts-expect-error not sure how to demonstrate that the argument is readonly, since it is dynamically created
        return new Map(result);
      },
      documentation: 'IO Type for the built-in JS Map type, with the key and value types specified.',
      stateSchema: StateSchema.asValue(`Map<${keyType.typeName},${valueType.typeName}>`, {
        isValidValue: stateObject => {
          if (!Validation.isValueValid(stateObject, ARRAY_OF_ARRAY_VALIDATOR)) {
            return false;
          }
          for (let i = 0; i < stateObject.length; i++) {
            const mapElementArray = stateObject[i];
            if (!Array.isArray(mapElementArray)) {
              return false;
            }
            if (mapElementArray.length !== 2) {
              return false;
            }
            // TODO: check each entry based on the key and value IOType stateSchema, https://github.com/phetsims/tandem/issues/271
          }

          return true;
        }
      })
    }));
  }
  return cache.get(cacheKey);
}
tandemNamespace.register('MapIO', MapIO);
export default MapIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJjYWNoZSIsIk1hcCIsIkFSUkFZX09GX0FSUkFZX1ZBTElEQVRPUiIsInZhbHVlVHlwZSIsIkFycmF5IiwiaXNWYWxpZFZhbHVlIiwidmFsdWUiLCJpc0FycmF5IiwiZXZlcnkiLCJlbGVtZW50IiwiTWFwSU8iLCJrZXlUeXBlIiwiY2FjaGVLZXkiLCJ0eXBlTmFtZSIsImhhcyIsInNldCIsIm1hcCIsImtleSIsImlzVmFsdWVWYWxpZCIsInZhbGlkYXRvciIsInBhcmFtZXRlclR5cGVzIiwidG9TdGF0ZU9iamVjdCIsImFycmF5IiwicHVzaCIsImZyb21TdGF0ZU9iamVjdCIsIm91dGVyQXJyYXkiLCJyZXN1bHQiLCJ0dXBsZSIsImRvY3VtZW50YXRpb24iLCJzdGF0ZVNjaGVtYSIsImFzVmFsdWUiLCJzdGF0ZU9iamVjdCIsImkiLCJsZW5ndGgiLCJtYXBFbGVtZW50QXJyYXkiLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1hcElPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIElPIFR5cGUgZm9yIEpTJ3MgYnVpbHQtaW4gTWFwIHR5cGUuXHJcbiAqXHJcbiAqIE5PVEU6IFRoaXMgaGFzIG5vdCBiZWVuIHJldmlld2VkLCB0ZXN0ZWQgb3IgdXNlZCBpbiBwcm9kdWN0aW9uIGNvZGUgeWV0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVmFsaWRhdGlvbiBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1ZhbGlkYXRpb24uanMnO1xyXG5pbXBvcnQgSW50ZW50aW9uYWxBbnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL0ludGVudGlvbmFsQW55LmpzJztcclxuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuLi90YW5kZW1OYW1lc3BhY2UuanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcclxuaW1wb3J0IFN0YXRlU2NoZW1hIGZyb20gJy4vU3RhdGVTY2hlbWEuanMnO1xyXG5cclxuLy8gQ2FjaGUgZWFjaCBwYXJhbWV0ZXJpemVkIElPVHlwZSBzbyB0aGF0IGl0IGlzIG9ubHkgY3JlYXRlZCBvbmNlLlxyXG5jb25zdCBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBJT1R5cGU+KCk7XHJcblxyXG5jb25zdCBBUlJBWV9PRl9BUlJBWV9WQUxJREFUT1IgPSB7XHJcbiAgdmFsdWVUeXBlOiBBcnJheSxcclxuICBpc1ZhbGlkVmFsdWU6ICggdmFsdWU6IEludGVudGlvbmFsQW55ICkgPT4gQXJyYXkuaXNBcnJheSggdmFsdWUgKSAmJiB2YWx1ZS5ldmVyeSggZWxlbWVudCA9PiBBcnJheS5pc0FycmF5KCBlbGVtZW50ICkgKVxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgTWFwU3RhdGVPYmplY3Q8S1N0YXRlLCBWU3RhdGU+ID0gQXJyYXk8WyBLU3RhdGUsIFZTdGF0ZSBdPjtcclxuXHJcbi8qKlxyXG4gKiBQYXJhbWV0cmljIElPIFR5cGUgY29uc3RydWN0b3IuICBHaXZlbiBhbiBlbGVtZW50IHR5cGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBhcHByb3ByaWF0ZSBtYXAgSU8gVHlwZS5cclxuICogVGhpcyBjYWNoaW5nIGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgb3RoZXIgcGFyYW1ldHJpYyBJTyBUeXBlIGNhY2hpbmcgaW1wbGVtZW50YXRpb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gTWFwSU88S1R5cGUsIEtTdGF0ZVR5cGUsIFZUeXBlLCBWU3RhdGVUeXBlPigga2V5VHlwZTogSU9UeXBlPEtUeXBlLCBLU3RhdGVUeXBlPiwgdmFsdWVUeXBlOiBJT1R5cGU8VlR5cGUsIFZTdGF0ZVR5cGU+ICk6IElPVHlwZSB7XHJcblxyXG4gIGNvbnN0IGNhY2hlS2V5ID0ga2V5VHlwZS50eXBlTmFtZSArICcsJyArIHZhbHVlVHlwZS50eXBlTmFtZTtcclxuICBpZiAoICFjYWNoZS5oYXMoIGNhY2hlS2V5ICkgKSB7XHJcblxyXG4gICAgY2FjaGUuc2V0KCBjYWNoZUtleSwgbmV3IElPVHlwZTxNYXA8S1R5cGUsIFZUeXBlPiwgWyBLU3RhdGVUeXBlLCBWU3RhdGVUeXBlIF1bXT4oIGBNYXBJTzwke2tleVR5cGUudHlwZU5hbWV9LCR7dmFsdWVUeXBlLnR5cGVOYW1lfT5gLCB7XHJcbiAgICAgIHZhbHVlVHlwZTogTWFwLFxyXG4gICAgICBpc1ZhbGlkVmFsdWU6IG1hcCA9PiB7XHJcbiAgICAgICAgZm9yICggY29uc3QgWyBrZXksIHZhbHVlIF0gb2YgbWFwICkge1xyXG4gICAgICAgICAgaWYgKCAhVmFsaWRhdGlvbi5pc1ZhbHVlVmFsaWQoIGtleSwga2V5VHlwZS52YWxpZGF0b3IgKSApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCAhVmFsaWRhdGlvbi5pc1ZhbHVlVmFsaWQoIHZhbHVlLCB2YWx1ZVR5cGUudmFsaWRhdG9yICkgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0sXHJcbiAgICAgIHBhcmFtZXRlclR5cGVzOiBbIGtleVR5cGUsIHZhbHVlVHlwZSBdLFxyXG4gICAgICB0b1N0YXRlT2JqZWN0OiBtYXAgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFycmF5OiBNYXBTdGF0ZU9iamVjdDxLU3RhdGVUeXBlLCBWU3RhdGVUeXBlPiA9IFtdO1xyXG4gICAgICAgIGZvciAoIGNvbnN0IFsga2V5LCB2YWx1ZSBdIG9mIG1hcCApIHtcclxuICAgICAgICAgIGFycmF5LnB1c2goIFsga2V5VHlwZS50b1N0YXRlT2JqZWN0KCBrZXkgKSwgdmFsdWVUeXBlLnRvU3RhdGVPYmplY3QoIHZhbHVlICkgXSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGZyb21TdGF0ZU9iamVjdDogb3V0ZXJBcnJheSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gb3V0ZXJBcnJheS5tYXAoIHR1cGxlID0+IHtcclxuICAgICAgICAgIHJldHVybiBbIGtleVR5cGUuZnJvbVN0YXRlT2JqZWN0KCB0dXBsZVsgMCBdICksIHZhbHVlVHlwZS5mcm9tU3RhdGVPYmplY3QoIHR1cGxlWyAxIF0gKSBdO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBub3Qgc3VyZSBob3cgdG8gZGVtb25zdHJhdGUgdGhhdCB0aGUgYXJndW1lbnQgaXMgcmVhZG9ubHksIHNpbmNlIGl0IGlzIGR5bmFtaWNhbGx5IGNyZWF0ZWRcclxuICAgICAgICByZXR1cm4gbmV3IE1hcCggcmVzdWx0ICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRvY3VtZW50YXRpb246ICdJTyBUeXBlIGZvciB0aGUgYnVpbHQtaW4gSlMgTWFwIHR5cGUsIHdpdGggdGhlIGtleSBhbmQgdmFsdWUgdHlwZXMgc3BlY2lmaWVkLicsXHJcbiAgICAgIHN0YXRlU2NoZW1hOiBTdGF0ZVNjaGVtYS5hc1ZhbHVlKCBgTWFwPCR7a2V5VHlwZS50eXBlTmFtZX0sJHt2YWx1ZVR5cGUudHlwZU5hbWV9PmAsIHtcclxuICAgICAgICBpc1ZhbGlkVmFsdWU6IHN0YXRlT2JqZWN0ID0+IHtcclxuICAgICAgICAgIGlmICggIVZhbGlkYXRpb24uaXNWYWx1ZVZhbGlkKCBzdGF0ZU9iamVjdCwgQVJSQVlfT0ZfQVJSQVlfVkFMSURBVE9SICkgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHN0YXRlT2JqZWN0Lmxlbmd0aDsgaSsrICkge1xyXG4gICAgICAgICAgICBjb25zdCBtYXBFbGVtZW50QXJyYXkgPSBzdGF0ZU9iamVjdFsgaSBdO1xyXG4gICAgICAgICAgICBpZiAoICFBcnJheS5pc0FycmF5KCBtYXBFbGVtZW50QXJyYXkgKSApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCBtYXBFbGVtZW50QXJyYXkubGVuZ3RoICE9PSAyICkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUT0RPOiBjaGVjayBlYWNoIGVudHJ5IGJhc2VkIG9uIHRoZSBrZXkgYW5kIHZhbHVlIElPVHlwZSBzdGF0ZVNjaGVtYSwgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3RhbmRlbS9pc3N1ZXMvMjcxXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2FjaGUuZ2V0KCBjYWNoZUtleSApITtcclxufVxyXG5cclxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnTWFwSU8nLCBNYXBJTyApO1xyXG5leHBvcnQgZGVmYXVsdCBNYXBJTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGdDQUFnQztBQUV2RCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLFdBQVcsTUFBTSxr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