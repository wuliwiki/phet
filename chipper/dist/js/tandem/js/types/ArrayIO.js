// Copyright 2018-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in Array type.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';

// Cache each parameterized IOType so that it is only created once.
const cache = new Map();

/**
 * Parametric IO Type constructor.  Given an element type, this function returns an appropriate array IO Type.
 * This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
 */
const ArrayIO = parameterType => {
  assert && assert(!!parameterType, 'parameterType should be defined');
  if (!cache.has(parameterType)) {
    cache.set(parameterType, new IOType(`ArrayIO<${parameterType.typeName}>`, {
      valueType: Array,
      isValidValue: array => {
        return _.every(array, element => Validation.isValueValid(element, parameterType.validator));
      },
      parameterTypes: [parameterType],
      toStateObject: array => array.map(parameterType.toStateObject),
      fromStateObject: stateObject => stateObject.map(parameterType.fromStateObject),
      documentation: 'IO Type for the built-in JS array type, with the element type specified.',
      stateSchema: StateSchema.asValue(`Array<${parameterType.typeName}>`, {
        isValidValue: array => _.every(array, element => parameterType.isStateObjectValid(element))
      })
    }));
  }
  return cache.get(parameterType);
};
tandemNamespace.register('ArrayIO', ArrayIO);
export default ArrayIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJjYWNoZSIsIk1hcCIsIkFycmF5SU8iLCJwYXJhbWV0ZXJUeXBlIiwiYXNzZXJ0IiwiaGFzIiwic2V0IiwidHlwZU5hbWUiLCJ2YWx1ZVR5cGUiLCJBcnJheSIsImlzVmFsaWRWYWx1ZSIsImFycmF5IiwiXyIsImV2ZXJ5IiwiZWxlbWVudCIsImlzVmFsdWVWYWxpZCIsInZhbGlkYXRvciIsInBhcmFtZXRlclR5cGVzIiwidG9TdGF0ZU9iamVjdCIsIm1hcCIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0IiwiZG9jdW1lbnRhdGlvbiIsInN0YXRlU2NoZW1hIiwiYXNWYWx1ZSIsImlzU3RhdGVPYmplY3RWYWxpZCIsImdldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXJyYXlJTy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJTyBUeXBlIGZvciBKUydzIGJ1aWx0LWluIEFycmF5IHR5cGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWYWxpZGF0aW9uIGZyb20gJy4uLy4uLy4uL2F4b24vanMvVmFsaWRhdGlvbi5qcyc7XHJcbmltcG9ydCB0YW5kZW1OYW1lc3BhY2UgZnJvbSAnLi4vdGFuZGVtTmFtZXNwYWNlLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcclxuXHJcbi8vIENhY2hlIGVhY2ggcGFyYW1ldGVyaXplZCBJT1R5cGUgc28gdGhhdCBpdCBpcyBvbmx5IGNyZWF0ZWQgb25jZS5cclxuY29uc3QgY2FjaGUgPSBuZXcgTWFwPElPVHlwZSwgSU9UeXBlPigpO1xyXG5cclxuLyoqXHJcbiAqIFBhcmFtZXRyaWMgSU8gVHlwZSBjb25zdHJ1Y3Rvci4gIEdpdmVuIGFuIGVsZW1lbnQgdHlwZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGFwcHJvcHJpYXRlIGFycmF5IElPIFR5cGUuXHJcbiAqIFRoaXMgY2FjaGluZyBpbXBsZW1lbnRhdGlvbiBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIG90aGVyIHBhcmFtZXRyaWMgSU8gVHlwZSBjYWNoaW5nIGltcGxlbWVudGF0aW9ucy5cclxuICovXHJcbmNvbnN0IEFycmF5SU8gPSA8UGFyYW1ldGVyVHlwZSwgUGFyYW1ldGVyU3RhdGVUeXBlPiggcGFyYW1ldGVyVHlwZTogSU9UeXBlPFBhcmFtZXRlclR5cGUsIFBhcmFtZXRlclN0YXRlVHlwZT4gKTogSU9UeXBlPFBhcmFtZXRlclR5cGVbXSwgUGFyYW1ldGVyU3RhdGVUeXBlW10+ID0+IHtcclxuICBhc3NlcnQgJiYgYXNzZXJ0KCAhIXBhcmFtZXRlclR5cGUsICdwYXJhbWV0ZXJUeXBlIHNob3VsZCBiZSBkZWZpbmVkJyApO1xyXG4gIGlmICggIWNhY2hlLmhhcyggcGFyYW1ldGVyVHlwZSApICkge1xyXG4gICAgY2FjaGUuc2V0KCBwYXJhbWV0ZXJUeXBlLCBuZXcgSU9UeXBlPFBhcmFtZXRlclR5cGVbXSwgUGFyYW1ldGVyU3RhdGVUeXBlW10+KCBgQXJyYXlJTzwke3BhcmFtZXRlclR5cGUudHlwZU5hbWV9PmAsIHtcclxuICAgICAgdmFsdWVUeXBlOiBBcnJheSxcclxuICAgICAgaXNWYWxpZFZhbHVlOiBhcnJheSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIF8uZXZlcnkoIGFycmF5LCBlbGVtZW50ID0+IFZhbGlkYXRpb24uaXNWYWx1ZVZhbGlkKCBlbGVtZW50LCBwYXJhbWV0ZXJUeXBlLnZhbGlkYXRvciApICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHBhcmFtZXRlclR5cGVzOiBbIHBhcmFtZXRlclR5cGUgXSxcclxuICAgICAgdG9TdGF0ZU9iamVjdDogYXJyYXkgPT4gYXJyYXkubWFwKCBwYXJhbWV0ZXJUeXBlLnRvU3RhdGVPYmplY3QgKSxcclxuICAgICAgZnJvbVN0YXRlT2JqZWN0OiBzdGF0ZU9iamVjdCA9PiBzdGF0ZU9iamVjdC5tYXAoIHBhcmFtZXRlclR5cGUuZnJvbVN0YXRlT2JqZWN0ICksXHJcbiAgICAgIGRvY3VtZW50YXRpb246ICdJTyBUeXBlIGZvciB0aGUgYnVpbHQtaW4gSlMgYXJyYXkgdHlwZSwgd2l0aCB0aGUgZWxlbWVudCB0eXBlIHNwZWNpZmllZC4nLFxyXG4gICAgICBzdGF0ZVNjaGVtYTogU3RhdGVTY2hlbWEuYXNWYWx1ZSggYEFycmF5PCR7cGFyYW1ldGVyVHlwZS50eXBlTmFtZX0+YCwge1xyXG4gICAgICAgIGlzVmFsaWRWYWx1ZTogYXJyYXkgPT4gXy5ldmVyeSggYXJyYXksIGVsZW1lbnQgPT4gcGFyYW1ldGVyVHlwZS5pc1N0YXRlT2JqZWN0VmFsaWQoIGVsZW1lbnQgKSApXHJcbiAgICAgIH0gKVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2FjaGUuZ2V0KCBwYXJhbWV0ZXJUeXBlICkhO1xyXG59O1xyXG5cclxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnQXJyYXlJTycsIEFycmF5SU8gKTtcclxuZXhwb3J0IGRlZmF1bHQgQXJyYXlJTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sZ0NBQWdDO0FBQ3ZELE9BQU9DLGVBQWUsTUFBTSx1QkFBdUI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLGFBQWE7QUFDaEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjs7QUFFMUM7QUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSUMsR0FBRyxDQUFpQixDQUFDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLE9BQU8sR0FBd0NDLGFBQXdELElBQXFEO0VBQ2hLQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDLENBQUNELGFBQWEsRUFBRSxpQ0FBa0MsQ0FBQztFQUN0RSxJQUFLLENBQUNILEtBQUssQ0FBQ0ssR0FBRyxDQUFFRixhQUFjLENBQUMsRUFBRztJQUNqQ0gsS0FBSyxDQUFDTSxHQUFHLENBQUVILGFBQWEsRUFBRSxJQUFJTCxNQUFNLENBQTBDLFdBQVVLLGFBQWEsQ0FBQ0ksUUFBUyxHQUFFLEVBQUU7TUFDakhDLFNBQVMsRUFBRUMsS0FBSztNQUNoQkMsWUFBWSxFQUFFQyxLQUFLLElBQUk7UUFDckIsT0FBT0MsQ0FBQyxDQUFDQyxLQUFLLENBQUVGLEtBQUssRUFBRUcsT0FBTyxJQUFJbEIsVUFBVSxDQUFDbUIsWUFBWSxDQUFFRCxPQUFPLEVBQUVYLGFBQWEsQ0FBQ2EsU0FBVSxDQUFFLENBQUM7TUFDakcsQ0FBQztNQUNEQyxjQUFjLEVBQUUsQ0FBRWQsYUFBYSxDQUFFO01BQ2pDZSxhQUFhLEVBQUVQLEtBQUssSUFBSUEsS0FBSyxDQUFDUSxHQUFHLENBQUVoQixhQUFhLENBQUNlLGFBQWMsQ0FBQztNQUNoRUUsZUFBZSxFQUFFQyxXQUFXLElBQUlBLFdBQVcsQ0FBQ0YsR0FBRyxDQUFFaEIsYUFBYSxDQUFDaUIsZUFBZ0IsQ0FBQztNQUNoRkUsYUFBYSxFQUFFLDBFQUEwRTtNQUN6RkMsV0FBVyxFQUFFeEIsV0FBVyxDQUFDeUIsT0FBTyxDQUFHLFNBQVFyQixhQUFhLENBQUNJLFFBQVMsR0FBRSxFQUFFO1FBQ3BFRyxZQUFZLEVBQUVDLEtBQUssSUFBSUMsQ0FBQyxDQUFDQyxLQUFLLENBQUVGLEtBQUssRUFBRUcsT0FBTyxJQUFJWCxhQUFhLENBQUNzQixrQkFBa0IsQ0FBRVgsT0FBUSxDQUFFO01BQ2hHLENBQUU7SUFDSixDQUFFLENBQUUsQ0FBQztFQUNQO0VBRUEsT0FBT2QsS0FBSyxDQUFDMEIsR0FBRyxDQUFFdkIsYUFBYyxDQUFDO0FBQ25DLENBQUM7QUFFRE4sZUFBZSxDQUFDOEIsUUFBUSxDQUFFLFNBQVMsRUFBRXpCLE9BQVEsQ0FBQztBQUM5QyxlQUFlQSxPQUFPIn0=