// Copyright 2018-2022, University of Colorado Boulder

/**
 * Parametric IO Type that adds support for null values in toStateObject/fromStateObject. This type is to
 * prevent the propagation of null handling, mainly in to/fromStateObject, in each type. This also makes null
 * explicit for phet-io.
 *
 * Sample usage:
 *
 *  this.ageProperty = new Property( null, {
 *    tandem: tandem.createTandem( 'ageProperty' ),
 *    phetioValueType: NullableIO( NumberIO ) // signifies that the Property can be Number or null
 * } );
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';

// Cache each parameterized IOType so that it is only created once
const cache = new Map();
const NullableIO = parameterType => {
  assert && assert(parameterType, 'NullableIO needs parameterType');
  if (!cache.has(parameterType)) {
    cache.set(parameterType, new IOType(`NullableIO<${parameterType.typeName}>`, {
      documentation: 'An IOType adding support for null in addition to the behavior of its parameter.',
      isValidValue: instance => instance === null || Validation.isValueValid(instance, parameterType.validator),
      parameterTypes: [parameterType],
      // If the argument is null, returns null. Otherwise, converts the instance to a state object for serialization.
      toStateObject: instance => instance === null ? null : parameterType.toStateObject(instance),
      // If the argument is null, returns null. Otherwise, converts a state object to an instance of the underlying type.
      fromStateObject: stateObject => stateObject === null ? null : parameterType.fromStateObject(stateObject),
      stateSchema: StateSchema.asValue(`null|<${parameterType.typeName}>`, {
        isValidValue: value => value === null || parameterType.isStateObjectValid(value)
      })
    }));
  }
  return cache.get(parameterType);
};
tandemNamespace.register('NullableIO', NullableIO);
export default NullableIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJjYWNoZSIsIk1hcCIsIk51bGxhYmxlSU8iLCJwYXJhbWV0ZXJUeXBlIiwiYXNzZXJ0IiwiaGFzIiwic2V0IiwidHlwZU5hbWUiLCJkb2N1bWVudGF0aW9uIiwiaXNWYWxpZFZhbHVlIiwiaW5zdGFuY2UiLCJpc1ZhbHVlVmFsaWQiLCJ2YWxpZGF0b3IiLCJwYXJhbWV0ZXJUeXBlcyIsInRvU3RhdGVPYmplY3QiLCJmcm9tU3RhdGVPYmplY3QiLCJzdGF0ZU9iamVjdCIsInN0YXRlU2NoZW1hIiwiYXNWYWx1ZSIsInZhbHVlIiwiaXNTdGF0ZU9iamVjdFZhbGlkIiwiZ2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOdWxsYWJsZUlPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBhcmFtZXRyaWMgSU8gVHlwZSB0aGF0IGFkZHMgc3VwcG9ydCBmb3IgbnVsbCB2YWx1ZXMgaW4gdG9TdGF0ZU9iamVjdC9mcm9tU3RhdGVPYmplY3QuIFRoaXMgdHlwZSBpcyB0b1xyXG4gKiBwcmV2ZW50IHRoZSBwcm9wYWdhdGlvbiBvZiBudWxsIGhhbmRsaW5nLCBtYWlubHkgaW4gdG8vZnJvbVN0YXRlT2JqZWN0LCBpbiBlYWNoIHR5cGUuIFRoaXMgYWxzbyBtYWtlcyBudWxsXHJcbiAqIGV4cGxpY2l0IGZvciBwaGV0LWlvLlxyXG4gKlxyXG4gKiBTYW1wbGUgdXNhZ2U6XHJcbiAqXHJcbiAqICB0aGlzLmFnZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBudWxsLCB7XHJcbiAqICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2FnZVByb3BlcnR5JyApLFxyXG4gKiAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bGxhYmxlSU8oIE51bWJlcklPICkgLy8gc2lnbmlmaWVzIHRoYXQgdGhlIFByb3BlcnR5IGNhbiBiZSBOdW1iZXIgb3IgbnVsbFxyXG4gKiB9ICk7XHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVmFsaWRhdGlvbiBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1ZhbGlkYXRpb24uanMnO1xyXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi9JT1R5cGUuanMnO1xyXG5pbXBvcnQgU3RhdGVTY2hlbWEgZnJvbSAnLi9TdGF0ZVNjaGVtYS5qcyc7XHJcblxyXG4vLyBDYWNoZSBlYWNoIHBhcmFtZXRlcml6ZWQgSU9UeXBlIHNvIHRoYXQgaXQgaXMgb25seSBjcmVhdGVkIG9uY2VcclxuY29uc3QgY2FjaGUgPSBuZXcgTWFwPElPVHlwZSwgSU9UeXBlPigpO1xyXG5cclxuY29uc3QgTnVsbGFibGVJTyA9IDxQYXJhbWV0ZXJUeXBlLCBQYXJhbWV0ZXJTdGF0ZVR5cGU+KCBwYXJhbWV0ZXJUeXBlOiBJT1R5cGU8UGFyYW1ldGVyVHlwZSwgUGFyYW1ldGVyU3RhdGVUeXBlPiApOiBJT1R5cGUgPT4ge1xyXG5cclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBwYXJhbWV0ZXJUeXBlLCAnTnVsbGFibGVJTyBuZWVkcyBwYXJhbWV0ZXJUeXBlJyApO1xyXG5cclxuICBpZiAoICFjYWNoZS5oYXMoIHBhcmFtZXRlclR5cGUgKSApIHtcclxuICAgIGNhY2hlLnNldCggcGFyYW1ldGVyVHlwZSwgbmV3IElPVHlwZTxQYXJhbWV0ZXJUeXBlIHwgbnVsbCwgUGFyYW1ldGVyU3RhdGVUeXBlIHwgbnVsbD4oIGBOdWxsYWJsZUlPPCR7cGFyYW1ldGVyVHlwZS50eXBlTmFtZX0+YCwge1xyXG4gICAgICBkb2N1bWVudGF0aW9uOiAnQW4gSU9UeXBlIGFkZGluZyBzdXBwb3J0IGZvciBudWxsIGluIGFkZGl0aW9uIHRvIHRoZSBiZWhhdmlvciBvZiBpdHMgcGFyYW1ldGVyLicsXHJcbiAgICAgIGlzVmFsaWRWYWx1ZTogaW5zdGFuY2UgPT4gaW5zdGFuY2UgPT09IG51bGwgfHwgVmFsaWRhdGlvbi5pc1ZhbHVlVmFsaWQoIGluc3RhbmNlLCBwYXJhbWV0ZXJUeXBlLnZhbGlkYXRvciApLFxyXG4gICAgICBwYXJhbWV0ZXJUeXBlczogWyBwYXJhbWV0ZXJUeXBlIF0sXHJcblxyXG4gICAgICAvLyBJZiB0aGUgYXJndW1lbnQgaXMgbnVsbCwgcmV0dXJucyBudWxsLiBPdGhlcndpc2UsIGNvbnZlcnRzIHRoZSBpbnN0YW5jZSB0byBhIHN0YXRlIG9iamVjdCBmb3Igc2VyaWFsaXphdGlvbi5cclxuICAgICAgdG9TdGF0ZU9iamVjdDogaW5zdGFuY2UgPT4gaW5zdGFuY2UgPT09IG51bGwgPyBudWxsIDogcGFyYW1ldGVyVHlwZS50b1N0YXRlT2JqZWN0KCBpbnN0YW5jZSApLFxyXG5cclxuICAgICAgLy8gSWYgdGhlIGFyZ3VtZW50IGlzIG51bGwsIHJldHVybnMgbnVsbC4gT3RoZXJ3aXNlLCBjb252ZXJ0cyBhIHN0YXRlIG9iamVjdCB0byBhbiBpbnN0YW5jZSBvZiB0aGUgdW5kZXJseWluZyB0eXBlLlxyXG4gICAgICBmcm9tU3RhdGVPYmplY3Q6IHN0YXRlT2JqZWN0ID0+IHN0YXRlT2JqZWN0ID09PSBudWxsID8gbnVsbCA6IHBhcmFtZXRlclR5cGUuZnJvbVN0YXRlT2JqZWN0KCBzdGF0ZU9iamVjdCApLFxyXG4gICAgICBzdGF0ZVNjaGVtYTogU3RhdGVTY2hlbWEuYXNWYWx1ZSggYG51bGx8PCR7cGFyYW1ldGVyVHlwZS50eXBlTmFtZX0+YCwge1xyXG4gICAgICAgICAgaXNWYWxpZFZhbHVlOiB2YWx1ZSA9PiB2YWx1ZSA9PT0gbnVsbCB8fCBwYXJhbWV0ZXJUeXBlLmlzU3RhdGVPYmplY3RWYWxpZCggdmFsdWUgKVxyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2FjaGUuZ2V0KCBwYXJhbWV0ZXJUeXBlICkhO1xyXG59O1xyXG5cclxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnTnVsbGFibGVJTycsIE51bGxhYmxlSU8gKTtcclxuZXhwb3J0IGRlZmF1bHQgTnVsbGFibGVJTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sZ0NBQWdDO0FBQ3ZELE9BQU9DLGVBQWUsTUFBTSx1QkFBdUI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLGFBQWE7QUFDaEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjs7QUFFMUM7QUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSUMsR0FBRyxDQUFpQixDQUFDO0FBRXZDLE1BQU1DLFVBQVUsR0FBd0NDLGFBQXdELElBQWM7RUFFNUhDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxhQUFhLEVBQUUsZ0NBQWlDLENBQUM7RUFFbkUsSUFBSyxDQUFDSCxLQUFLLENBQUNLLEdBQUcsQ0FBRUYsYUFBYyxDQUFDLEVBQUc7SUFDakNILEtBQUssQ0FBQ00sR0FBRyxDQUFFSCxhQUFhLEVBQUUsSUFBSUwsTUFBTSxDQUFvRCxjQUFhSyxhQUFhLENBQUNJLFFBQVMsR0FBRSxFQUFFO01BQzlIQyxhQUFhLEVBQUUsaUZBQWlGO01BQ2hHQyxZQUFZLEVBQUVDLFFBQVEsSUFBSUEsUUFBUSxLQUFLLElBQUksSUFBSWQsVUFBVSxDQUFDZSxZQUFZLENBQUVELFFBQVEsRUFBRVAsYUFBYSxDQUFDUyxTQUFVLENBQUM7TUFDM0dDLGNBQWMsRUFBRSxDQUFFVixhQUFhLENBQUU7TUFFakM7TUFDQVcsYUFBYSxFQUFFSixRQUFRLElBQUlBLFFBQVEsS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHUCxhQUFhLENBQUNXLGFBQWEsQ0FBRUosUUFBUyxDQUFDO01BRTdGO01BQ0FLLGVBQWUsRUFBRUMsV0FBVyxJQUFJQSxXQUFXLEtBQUssSUFBSSxHQUFHLElBQUksR0FBR2IsYUFBYSxDQUFDWSxlQUFlLENBQUVDLFdBQVksQ0FBQztNQUMxR0MsV0FBVyxFQUFFbEIsV0FBVyxDQUFDbUIsT0FBTyxDQUFHLFNBQVFmLGFBQWEsQ0FBQ0ksUUFBUyxHQUFFLEVBQUU7UUFDbEVFLFlBQVksRUFBRVUsS0FBSyxJQUFJQSxLQUFLLEtBQUssSUFBSSxJQUFJaEIsYUFBYSxDQUFDaUIsa0JBQWtCLENBQUVELEtBQU07TUFDbkYsQ0FDRjtJQUNGLENBQUUsQ0FBRSxDQUFDO0VBQ1A7RUFFQSxPQUFPbkIsS0FBSyxDQUFDcUIsR0FBRyxDQUFFbEIsYUFBYyxDQUFDO0FBQ25DLENBQUM7QUFFRE4sZUFBZSxDQUFDeUIsUUFBUSxDQUFFLFlBQVksRUFBRXBCLFVBQVcsQ0FBQztBQUNwRCxlQUFlQSxVQUFVIn0=