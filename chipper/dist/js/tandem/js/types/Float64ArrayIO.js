// Copyright 2020-2022, University of Colorado Boulder

/**
 * IO Type for JS's built-in Float64Array type
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Chris Klusendorf
 */

import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
const Float64ArrayIO = new IOType('Float64ArrayIO', {
  valueType: Float64Array,
  toStateObject: array => {
    const result = [];
    array.forEach(float => result.push(float));
    return result;
  },
  fromStateObject: stateObject => new Float64Array(stateObject),
  stateSchema: StateSchema.asValue('Float64Array', {
    isValidValue: value => Array.isArray(value) && value.find(v => typeof v !== 'number') === undefined
  }),
  // Float64ArrayIO is a data type, and uses the toStateObject/fromStateObject exclusively for data type serialization.
  // Sites that use Float64ArrayIO as a reference type can use this method to update the state of an existing Float64Arary.
  applyState: (array, stateObject) => array.set(stateObject)
});
tandemNamespace.register('Float64ArrayIO', Float64ArrayIO);
export default Float64ArrayIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIkZsb2F0NjRBcnJheUlPIiwidmFsdWVUeXBlIiwiRmxvYXQ2NEFycmF5IiwidG9TdGF0ZU9iamVjdCIsImFycmF5IiwicmVzdWx0IiwiZm9yRWFjaCIsImZsb2F0IiwicHVzaCIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0Iiwic3RhdGVTY2hlbWEiLCJhc1ZhbHVlIiwiaXNWYWxpZFZhbHVlIiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJmaW5kIiwidiIsInVuZGVmaW5lZCIsImFwcGx5U3RhdGUiLCJzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZsb2F0NjRBcnJheUlPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIElPIFR5cGUgZm9yIEpTJ3MgYnVpbHQtaW4gRmxvYXQ2NEFycmF5IHR5cGVcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmZcclxuICovXHJcblxyXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi9JT1R5cGUuanMnO1xyXG5pbXBvcnQgU3RhdGVTY2hlbWEgZnJvbSAnLi9TdGF0ZVNjaGVtYS5qcyc7XHJcblxyXG5jb25zdCBGbG9hdDY0QXJyYXlJTyA9IG5ldyBJT1R5cGU8RmxvYXQ2NEFycmF5LCBudW1iZXJbXT4oICdGbG9hdDY0QXJyYXlJTycsIHtcclxuICB2YWx1ZVR5cGU6IEZsb2F0NjRBcnJheSxcclxuICB0b1N0YXRlT2JqZWN0OiBhcnJheSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQ6IG51bWJlcltdID0gW107XHJcbiAgICBhcnJheS5mb3JFYWNoKCBmbG9hdCA9PiByZXN1bHQucHVzaCggZmxvYXQgKSApO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9LFxyXG4gIGZyb21TdGF0ZU9iamVjdDogc3RhdGVPYmplY3QgPT4gbmV3IEZsb2F0NjRBcnJheSggc3RhdGVPYmplY3QgKSxcclxuICBzdGF0ZVNjaGVtYTogU3RhdGVTY2hlbWEuYXNWYWx1ZTxGbG9hdDY0QXJyYXksIG51bWJlcltdPiggJ0Zsb2F0NjRBcnJheScsIHtcclxuICAgIGlzVmFsaWRWYWx1ZTogKCB2YWx1ZTogbnVtYmVyW10gKSA9PiBBcnJheS5pc0FycmF5KCB2YWx1ZSApICYmIHZhbHVlLmZpbmQoIHYgPT4gdHlwZW9mIHYgIT09ICdudW1iZXInICkgPT09IHVuZGVmaW5lZFxyXG4gIH0gKSxcclxuXHJcbiAgLy8gRmxvYXQ2NEFycmF5SU8gaXMgYSBkYXRhIHR5cGUsIGFuZCB1c2VzIHRoZSB0b1N0YXRlT2JqZWN0L2Zyb21TdGF0ZU9iamVjdCBleGNsdXNpdmVseSBmb3IgZGF0YSB0eXBlIHNlcmlhbGl6YXRpb24uXHJcbiAgLy8gU2l0ZXMgdGhhdCB1c2UgRmxvYXQ2NEFycmF5SU8gYXMgYSByZWZlcmVuY2UgdHlwZSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHVwZGF0ZSB0aGUgc3RhdGUgb2YgYW4gZXhpc3RpbmcgRmxvYXQ2NEFyYXJ5LlxyXG4gIGFwcGx5U3RhdGU6ICggYXJyYXksIHN0YXRlT2JqZWN0ICkgPT4gYXJyYXkuc2V0KCBzdGF0ZU9iamVjdCApXHJcbn0gKTtcclxuXHJcbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ0Zsb2F0NjRBcnJheUlPJywgRmxvYXQ2NEFycmF5SU8gKTtcclxuZXhwb3J0IGRlZmF1bHQgRmxvYXQ2NEFycmF5SU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRTFDLE1BQU1DLGNBQWMsR0FBRyxJQUFJRixNQUFNLENBQTBCLGdCQUFnQixFQUFFO0VBQzNFRyxTQUFTLEVBQUVDLFlBQVk7RUFDdkJDLGFBQWEsRUFBRUMsS0FBSyxJQUFJO0lBQ3RCLE1BQU1DLE1BQWdCLEdBQUcsRUFBRTtJQUMzQkQsS0FBSyxDQUFDRSxPQUFPLENBQUVDLEtBQUssSUFBSUYsTUFBTSxDQUFDRyxJQUFJLENBQUVELEtBQU0sQ0FBRSxDQUFDO0lBQzlDLE9BQU9GLE1BQU07RUFDZixDQUFDO0VBQ0RJLGVBQWUsRUFBRUMsV0FBVyxJQUFJLElBQUlSLFlBQVksQ0FBRVEsV0FBWSxDQUFDO0VBQy9EQyxXQUFXLEVBQUVaLFdBQVcsQ0FBQ2EsT0FBTyxDQUEwQixjQUFjLEVBQUU7SUFDeEVDLFlBQVksRUFBSUMsS0FBZSxJQUFNQyxLQUFLLENBQUNDLE9BQU8sQ0FBRUYsS0FBTSxDQUFDLElBQUlBLEtBQUssQ0FBQ0csSUFBSSxDQUFFQyxDQUFDLElBQUksT0FBT0EsQ0FBQyxLQUFLLFFBQVMsQ0FBQyxLQUFLQztFQUM5RyxDQUFFLENBQUM7RUFFSDtFQUNBO0VBQ0FDLFVBQVUsRUFBRUEsQ0FBRWhCLEtBQUssRUFBRU0sV0FBVyxLQUFNTixLQUFLLENBQUNpQixHQUFHLENBQUVYLFdBQVk7QUFDL0QsQ0FBRSxDQUFDO0FBRUhiLGVBQWUsQ0FBQ3lCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRXRCLGNBQWUsQ0FBQztBQUM1RCxlQUFlQSxjQUFjIn0=