// Copyright 2022, University of Colorado Boulder

/**
 * Unit tests for PhetioObject
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import PhetioAction from './PhetioAction.js';
import Tandem from './Tandem.js';
import NumberIO from './types/NumberIO.js';
QUnit.module('PhetioAction');
QUnit.test('PhetioAction execute', assert => {
  let count = 0;
  const invokeActionOnce = () => phetioAction.execute(++count);
  const action = currentCount => {
    assert.ok(count === currentCount, 'current count' + count);
    if (currentCount === 1) {
      invokeActionOnce();
    }
  };
  const phetioAction = new PhetioAction(action, {
    parameters: [{
      name: 'count',
      phetioType: NumberIO
    }],
    tandem: Tandem.ROOT_TEST.createTandem('phetioAction')
  });
  invokeActionOnce();
  assert.ok(count === 2, 'called twice');
  invokeActionOnce();
  assert.ok(count === 3, 'and once more');
  phetioAction.dispose();
});
QUnit.test('PhetioAction reentrant disposal', assert => {
  let count = 0;
  const invokeActionOnce = () => phetioAction.execute(++count);

  // We must call super.dispose() immediately, but we delay disposing the executedEmitter to prevent wonky reentrant behavior.
  const actionDisposedItself = () => phetioAction.executedEmitter.isDisposed;
  const action = currentCount => {
    assert.ok(count === currentCount, 'current count' + count);
    if (currentCount === 1) {
      invokeActionOnce();
    } else if (currentCount === 2) {
      invokeActionOnce();
      phetioAction.dispose();
    }
    assert.ok(!actionDisposedItself(), 'should not be disposed until after executing ' + currentCount);
  };
  const phetioAction = new PhetioAction(action, {
    parameters: [{
      name: 'count',
      phetioType: NumberIO
    }],
    tandem: Tandem.ROOT_TEST.createTandem('phetioAction')
  });
  phetioAction.executedEmitter.addListener(currentCount => {
    assert.ok(!actionDisposedItself(), 'should not be disposed until after emitting ' + currentCount);
    assert.ok(count === 3, 'count will always be last because all execute calls come before all emitting ' + currentCount);
  });
  invokeActionOnce();
  assert.ok(count === 3, 'three calls total');
  assert.ok(actionDisposedItself(), 'should now be disposed');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0aW9BY3Rpb24iLCJUYW5kZW0iLCJOdW1iZXJJTyIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsImNvdW50IiwiaW52b2tlQWN0aW9uT25jZSIsInBoZXRpb0FjdGlvbiIsImV4ZWN1dGUiLCJhY3Rpb24iLCJjdXJyZW50Q291bnQiLCJvayIsInBhcmFtZXRlcnMiLCJuYW1lIiwicGhldGlvVHlwZSIsInRhbmRlbSIsIlJPT1RfVEVTVCIsImNyZWF0ZVRhbmRlbSIsImRpc3Bvc2UiLCJhY3Rpb25EaXNwb3NlZEl0c2VsZiIsImV4ZWN1dGVkRW1pdHRlciIsImlzRGlzcG9zZWQiLCJhZGRMaXN0ZW5lciJdLCJzb3VyY2VzIjpbIlBoZXRpb0FjdGlvblRlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBVbml0IHRlc3RzIGZvciBQaGV0aW9PYmplY3RcclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQaGV0aW9BY3Rpb24gZnJvbSAnLi9QaGV0aW9BY3Rpb24uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4vVGFuZGVtLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4vdHlwZXMvTnVtYmVySU8uanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnUGhldGlvQWN0aW9uJyApO1xyXG5cclxuUVVuaXQudGVzdCggJ1BoZXRpb0FjdGlvbiBleGVjdXRlJywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgY29uc3QgaW52b2tlQWN0aW9uT25jZSA9ICgpID0+IHBoZXRpb0FjdGlvbi5leGVjdXRlKCArK2NvdW50ICk7XHJcblxyXG4gIGNvbnN0IGFjdGlvbiA9ICggY3VycmVudENvdW50OiBudW1iZXIgKSA9PiB7XHJcbiAgICBhc3NlcnQub2soIGNvdW50ID09PSBjdXJyZW50Q291bnQsICdjdXJyZW50IGNvdW50JyArIGNvdW50ICk7XHJcblxyXG4gICAgaWYgKCBjdXJyZW50Q291bnQgPT09IDEgKSB7XHJcbiAgICAgIGludm9rZUFjdGlvbk9uY2UoKTtcclxuICAgIH1cclxuICB9O1xyXG4gIGNvbnN0IHBoZXRpb0FjdGlvbiA9IG5ldyBQaGV0aW9BY3Rpb248WyBudW1iZXIgXT4oIGFjdGlvbiwge1xyXG4gICAgcGFyYW1ldGVyczogWyB7IG5hbWU6ICdjb3VudCcsIHBoZXRpb1R5cGU6IE51bWJlcklPIH0gXSxcclxuICAgIHRhbmRlbTogVGFuZGVtLlJPT1RfVEVTVC5jcmVhdGVUYW5kZW0oICdwaGV0aW9BY3Rpb24nIClcclxuICB9ICk7XHJcblxyXG4gIGludm9rZUFjdGlvbk9uY2UoKTtcclxuICBhc3NlcnQub2soIGNvdW50ID09PSAyLCAnY2FsbGVkIHR3aWNlJyApO1xyXG4gIGludm9rZUFjdGlvbk9uY2UoKTtcclxuICBhc3NlcnQub2soIGNvdW50ID09PSAzLCAnYW5kIG9uY2UgbW9yZScgKTtcclxuXHJcbiAgcGhldGlvQWN0aW9uLmRpc3Bvc2UoKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJ1BoZXRpb0FjdGlvbiByZWVudHJhbnQgZGlzcG9zYWwnLCBhc3NlcnQgPT4ge1xyXG5cclxuICBsZXQgY291bnQgPSAwO1xyXG5cclxuICBjb25zdCBpbnZva2VBY3Rpb25PbmNlID0gKCkgPT4gcGhldGlvQWN0aW9uLmV4ZWN1dGUoICsrY291bnQgKTtcclxuXHJcbiAgLy8gV2UgbXVzdCBjYWxsIHN1cGVyLmRpc3Bvc2UoKSBpbW1lZGlhdGVseSwgYnV0IHdlIGRlbGF5IGRpc3Bvc2luZyB0aGUgZXhlY3V0ZWRFbWl0dGVyIHRvIHByZXZlbnQgd29ua3kgcmVlbnRyYW50IGJlaGF2aW9yLlxyXG4gIGNvbnN0IGFjdGlvbkRpc3Bvc2VkSXRzZWxmID0gKCkgPT4gcGhldGlvQWN0aW9uLmV4ZWN1dGVkRW1pdHRlci5pc0Rpc3Bvc2VkO1xyXG5cclxuICBjb25zdCBhY3Rpb24gPSAoIGN1cnJlbnRDb3VudDogbnVtYmVyICkgPT4ge1xyXG4gICAgYXNzZXJ0Lm9rKCBjb3VudCA9PT0gY3VycmVudENvdW50LCAnY3VycmVudCBjb3VudCcgKyBjb3VudCApO1xyXG5cclxuICAgIGlmICggY3VycmVudENvdW50ID09PSAxICkge1xyXG4gICAgICBpbnZva2VBY3Rpb25PbmNlKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggY3VycmVudENvdW50ID09PSAyICkge1xyXG4gICAgICBpbnZva2VBY3Rpb25PbmNlKCk7XHJcbiAgICAgIHBoZXRpb0FjdGlvbi5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBhc3NlcnQub2soICFhY3Rpb25EaXNwb3NlZEl0c2VsZigpLCAnc2hvdWxkIG5vdCBiZSBkaXNwb3NlZCB1bnRpbCBhZnRlciBleGVjdXRpbmcgJyArIGN1cnJlbnRDb3VudCApO1xyXG4gIH07XHJcbiAgY29uc3QgcGhldGlvQWN0aW9uID0gbmV3IFBoZXRpb0FjdGlvbjxbIG51bWJlciBdPiggYWN0aW9uLCB7XHJcbiAgICBwYXJhbWV0ZXJzOiBbIHsgbmFtZTogJ2NvdW50JywgcGhldGlvVHlwZTogTnVtYmVySU8gfSBdLFxyXG4gICAgdGFuZGVtOiBUYW5kZW0uUk9PVF9URVNULmNyZWF0ZVRhbmRlbSggJ3BoZXRpb0FjdGlvbicgKVxyXG4gIH0gKTtcclxuXHJcbiAgcGhldGlvQWN0aW9uLmV4ZWN1dGVkRW1pdHRlci5hZGRMaXN0ZW5lciggKCBjdXJyZW50Q291bnQ6IG51bWJlciApID0+IHtcclxuICAgIGFzc2VydC5vayggIWFjdGlvbkRpc3Bvc2VkSXRzZWxmKCksICdzaG91bGQgbm90IGJlIGRpc3Bvc2VkIHVudGlsIGFmdGVyIGVtaXR0aW5nICcgKyBjdXJyZW50Q291bnQgKTtcclxuICAgIGFzc2VydC5vayggY291bnQgPT09IDMsICdjb3VudCB3aWxsIGFsd2F5cyBiZSBsYXN0IGJlY2F1c2UgYWxsIGV4ZWN1dGUgY2FsbHMgY29tZSBiZWZvcmUgYWxsIGVtaXR0aW5nICcgKyBjdXJyZW50Q291bnQgKTtcclxuICB9ICk7XHJcblxyXG4gIGludm9rZUFjdGlvbk9uY2UoKTtcclxuICBhc3NlcnQub2soIGNvdW50ID09PSAzLCAndGhyZWUgY2FsbHMgdG90YWwnICk7XHJcbiAgYXNzZXJ0Lm9rKCBhY3Rpb25EaXNwb3NlZEl0c2VsZigpLCAnc2hvdWxkIG5vdyBiZSBkaXNwb3NlZCcgKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxZQUFZLE1BQU0sbUJBQW1CO0FBQzVDLE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLFFBQVEsTUFBTSxxQkFBcUI7QUFFMUNDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLGNBQWUsQ0FBQztBQUU5QkQsS0FBSyxDQUFDRSxJQUFJLENBQUUsc0JBQXNCLEVBQUVDLE1BQU0sSUFBSTtFQUU1QyxJQUFJQyxLQUFLLEdBQUcsQ0FBQztFQUViLE1BQU1DLGdCQUFnQixHQUFHQSxDQUFBLEtBQU1DLFlBQVksQ0FBQ0MsT0FBTyxDQUFFLEVBQUVILEtBQU0sQ0FBQztFQUU5RCxNQUFNSSxNQUFNLEdBQUtDLFlBQW9CLElBQU07SUFDekNOLE1BQU0sQ0FBQ08sRUFBRSxDQUFFTixLQUFLLEtBQUtLLFlBQVksRUFBRSxlQUFlLEdBQUdMLEtBQU0sQ0FBQztJQUU1RCxJQUFLSyxZQUFZLEtBQUssQ0FBQyxFQUFHO01BQ3hCSixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BCO0VBQ0YsQ0FBQztFQUNELE1BQU1DLFlBQVksR0FBRyxJQUFJVCxZQUFZLENBQWNXLE1BQU0sRUFBRTtJQUN6REcsVUFBVSxFQUFFLENBQUU7TUFBRUMsSUFBSSxFQUFFLE9BQU87TUFBRUMsVUFBVSxFQUFFZDtJQUFTLENBQUMsQ0FBRTtJQUN2RGUsTUFBTSxFQUFFaEIsTUFBTSxDQUFDaUIsU0FBUyxDQUFDQyxZQUFZLENBQUUsY0FBZTtFQUN4RCxDQUFFLENBQUM7RUFFSFgsZ0JBQWdCLENBQUMsQ0FBQztFQUNsQkYsTUFBTSxDQUFDTyxFQUFFLENBQUVOLEtBQUssS0FBSyxDQUFDLEVBQUUsY0FBZSxDQUFDO0VBQ3hDQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ2xCRixNQUFNLENBQUNPLEVBQUUsQ0FBRU4sS0FBSyxLQUFLLENBQUMsRUFBRSxlQUFnQixDQUFDO0VBRXpDRSxZQUFZLENBQUNXLE9BQU8sQ0FBQyxDQUFDO0FBQ3hCLENBQUUsQ0FBQztBQUVIakIsS0FBSyxDQUFDRSxJQUFJLENBQUUsaUNBQWlDLEVBQUVDLE1BQU0sSUFBSTtFQUV2RCxJQUFJQyxLQUFLLEdBQUcsQ0FBQztFQUViLE1BQU1DLGdCQUFnQixHQUFHQSxDQUFBLEtBQU1DLFlBQVksQ0FBQ0MsT0FBTyxDQUFFLEVBQUVILEtBQU0sQ0FBQzs7RUFFOUQ7RUFDQSxNQUFNYyxvQkFBb0IsR0FBR0EsQ0FBQSxLQUFNWixZQUFZLENBQUNhLGVBQWUsQ0FBQ0MsVUFBVTtFQUUxRSxNQUFNWixNQUFNLEdBQUtDLFlBQW9CLElBQU07SUFDekNOLE1BQU0sQ0FBQ08sRUFBRSxDQUFFTixLQUFLLEtBQUtLLFlBQVksRUFBRSxlQUFlLEdBQUdMLEtBQU0sQ0FBQztJQUU1RCxJQUFLSyxZQUFZLEtBQUssQ0FBQyxFQUFHO01BQ3hCSixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BCLENBQUMsTUFDSSxJQUFLSSxZQUFZLEtBQUssQ0FBQyxFQUFHO01BQzdCSixnQkFBZ0IsQ0FBQyxDQUFDO01BQ2xCQyxZQUFZLENBQUNXLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCO0lBQ0FkLE1BQU0sQ0FBQ08sRUFBRSxDQUFFLENBQUNRLG9CQUFvQixDQUFDLENBQUMsRUFBRSwrQ0FBK0MsR0FBR1QsWUFBYSxDQUFDO0VBQ3RHLENBQUM7RUFDRCxNQUFNSCxZQUFZLEdBQUcsSUFBSVQsWUFBWSxDQUFjVyxNQUFNLEVBQUU7SUFDekRHLFVBQVUsRUFBRSxDQUFFO01BQUVDLElBQUksRUFBRSxPQUFPO01BQUVDLFVBQVUsRUFBRWQ7SUFBUyxDQUFDLENBQUU7SUFDdkRlLE1BQU0sRUFBRWhCLE1BQU0sQ0FBQ2lCLFNBQVMsQ0FBQ0MsWUFBWSxDQUFFLGNBQWU7RUFDeEQsQ0FBRSxDQUFDO0VBRUhWLFlBQVksQ0FBQ2EsZUFBZSxDQUFDRSxXQUFXLENBQUlaLFlBQW9CLElBQU07SUFDcEVOLE1BQU0sQ0FBQ08sRUFBRSxDQUFFLENBQUNRLG9CQUFvQixDQUFDLENBQUMsRUFBRSw4Q0FBOEMsR0FBR1QsWUFBYSxDQUFDO0lBQ25HTixNQUFNLENBQUNPLEVBQUUsQ0FBRU4sS0FBSyxLQUFLLENBQUMsRUFBRSwrRUFBK0UsR0FBR0ssWUFBYSxDQUFDO0VBQzFILENBQUUsQ0FBQztFQUVISixnQkFBZ0IsQ0FBQyxDQUFDO0VBQ2xCRixNQUFNLENBQUNPLEVBQUUsQ0FBRU4sS0FBSyxLQUFLLENBQUMsRUFBRSxtQkFBb0IsQ0FBQztFQUM3Q0QsTUFBTSxDQUFDTyxFQUFFLENBQUVRLG9CQUFvQixDQUFDLENBQUMsRUFBRSx3QkFBeUIsQ0FBQztBQUMvRCxDQUFFLENBQUMifQ==