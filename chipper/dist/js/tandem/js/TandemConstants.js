// Copyright 2021-2023, University of Colorado Boulder

import tandemNamespace from './tandemNamespace.js';

/**
 * Factored-out constant values for use in Tandem.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

const OBJECT_IO_TYPE_NAME = 'ObjectIO';
const EVENT_TYPE_MODEL = 'MODEL';

// In tree structure

// Like the generate API files

// Like the old API schema, where keys are the full, dot-separated phetioID

const metadataDefaults = {
  phetioTypeName: OBJECT_IO_TYPE_NAME,
  phetioDocumentation: '',
  phetioState: true,
  phetioReadOnly: false,
  // NOTE: Relies on the details about how Enumerations are serialized (via name), like EventType.phetioType.toStateObject( object.phetioEventType )
  phetioEventType: EVENT_TYPE_MODEL,
  phetioHighFrequency: false,
  phetioPlayback: false,
  phetioDynamicElement: false,
  phetioIsArchetype: false,
  phetioFeatured: false,
  phetioDesigned: false,
  phetioArchetypePhetioID: null
};
const TandemConstants = {
  OBJECT_IO_TYPE_NAME: OBJECT_IO_TYPE_NAME,
  EVENT_TYPE_MODEL: EVENT_TYPE_MODEL,
  // Default metadata set for an ObjectIO in the PhET-iO API.  These are used as the default options in PhetioObject
  // and when outputting an API (since values that match the defaults are omitted)
  PHET_IO_OBJECT_METADATA_DEFAULTS: metadataDefaults,
  METADATA_KEY_NAME: '_metadata',
  DATA_KEY_NAME: '_data'
};
tandemNamespace.register('TandemConstants', TandemConstants);
export default TandemConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJPQkpFQ1RfSU9fVFlQRV9OQU1FIiwiRVZFTlRfVFlQRV9NT0RFTCIsIm1ldGFkYXRhRGVmYXVsdHMiLCJwaGV0aW9UeXBlTmFtZSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJwaGV0aW9TdGF0ZSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvRXZlbnRUeXBlIiwicGhldGlvSGlnaEZyZXF1ZW5jeSIsInBoZXRpb1BsYXliYWNrIiwicGhldGlvRHluYW1pY0VsZW1lbnQiLCJwaGV0aW9Jc0FyY2hldHlwZSIsInBoZXRpb0ZlYXR1cmVkIiwicGhldGlvRGVzaWduZWQiLCJwaGV0aW9BcmNoZXR5cGVQaGV0aW9JRCIsIlRhbmRlbUNvbnN0YW50cyIsIlBIRVRfSU9fT0JKRUNUX01FVEFEQVRBX0RFRkFVTFRTIiwiTUVUQURBVEFfS0VZX05BTUUiLCJEQVRBX0tFWV9OQU1FIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUYW5kZW1Db25zdGFudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5pbXBvcnQgSW50ZW50aW9uYWxBbnkgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL0ludGVudGlvbmFsQW55LmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuL3RhbmRlbU5hbWVzcGFjZS5qcyc7XHJcblxyXG4vKipcclxuICogRmFjdG9yZWQtb3V0IGNvbnN0YW50IHZhbHVlcyBmb3IgdXNlIGluIFRhbmRlbS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmNvbnN0IE9CSkVDVF9JT19UWVBFX05BTUUgPSAnT2JqZWN0SU8nO1xyXG5jb25zdCBFVkVOVF9UWVBFX01PREVMID0gJ01PREVMJztcclxuXHJcbmV4cG9ydCB0eXBlIFBoZXRpb0lEID0gc3RyaW5nO1xyXG5cclxuZXhwb3J0IHR5cGUgUGhldGlvRWxlbWVudERhdGEgPSB7XHJcbiAgaW5pdGlhbFN0YXRlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFBoZXRpb0VsZW1lbnQgPSB7XHJcbiAgX21ldGFkYXRhOiBQaGV0aW9PYmplY3RNZXRhZGF0YTtcclxuICBfZGF0YT86IFBoZXRpb0VsZW1lbnREYXRhO1xyXG59O1xyXG5cclxuLy8gSW4gdHJlZSBzdHJ1Y3R1cmVcclxuZXhwb3J0IHR5cGUgUGhldGlvRWxlbWVudHMgPSB7XHJcblxyXG4gIC8vIEVhY2ggc3RyaW5nIGlzIGEgY29tcG9uZW50IG5hbWUgb2YgYSBQaGV0aW9JRFxyXG4gIFsgbmFtZTogc3RyaW5nIF06IFBoZXRpb0VsZW1lbnRzO1xyXG59ICYgUGhldGlvRWxlbWVudDtcclxuXHJcbmV4cG9ydCB0eXBlIE1ldGhvZCA9IHtcclxuICByZXR1cm5UeXBlOiBzdHJpbmc7XHJcbiAgcGFyYW1ldGVyVHlwZXM6IHN0cmluZ1tdO1xyXG4gIGRvY3VtZW50YXRpb246IHN0cmluZztcclxuICBpbnZvY2FibGVGb3JSZWFkT25seUVsZW1lbnRzPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFBoZXRpb09iamVjdFN0YXRlID0gUmVjb3JkPHN0cmluZywgSW50ZW50aW9uYWxBbnk+O1xyXG5leHBvcnQgdHlwZSBQaGV0aW9TdGF0ZSA9IFJlY29yZDxQaGV0aW9JRCwgUGhldGlvT2JqZWN0U3RhdGU+O1xyXG5leHBvcnQgdHlwZSBGdWxsUGhldGlvU3RhdGUgPSBSZWNvcmQ8UGhldGlvSUQsIFBoZXRpb09iamVjdFN0YXRlIHwgJ0RFTEVURUQnPjtcclxuXHJcbmV4cG9ydCB0eXBlIE1ldGhvZHMgPSBSZWNvcmQ8c3RyaW5nLCBNZXRob2Q+O1xyXG5cclxuZXhwb3J0IHR5cGUgUGhldGlvVHlwZSA9IHtcclxuICBtZXRob2RzOiBNZXRob2RzO1xyXG4gIHN1cGVydHlwZT86IHN0cmluZzsgLy8gbm8gc3VwZXJ0eXBlIGZvciByb290IG9mIGhpZXJhcmNoeVxyXG4gIHR5cGVOYW1lOiBzdHJpbmc7XHJcbiAgZG9jdW1lbnRhdGlvbj86IHN0cmluZztcclxuICBldmVudHM6IHN0cmluZ1tdO1xyXG4gIG1ldGFkYXRhRGVmYXVsdHM/OiBQYXJ0aWFsPFBoZXRpb09iamVjdE1ldGFkYXRhPjtcclxuICBkYXRhRGVmYXVsdHM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcclxuICBtZXRob2RPcmRlcj86IHN0cmluZ1tdO1xyXG4gIHN0YXRlU2NoZW1hPzogc3RyaW5nIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxuICBwYXJhbWV0ZXJUeXBlcz86IHN0cmluZ1tdOyAvLyBlYWNoIHR5cGVOYW1lXHJcbn07XHJcbmV4cG9ydCB0eXBlIFBoZXRpb1R5cGVzID0gUmVjb3JkPHN0cmluZywgUGhldGlvVHlwZT47XHJcblxyXG5leHBvcnQgdHlwZSBQaGV0aW9PdmVycmlkZXMgPSBSZWNvcmQ8c3RyaW5nLCBQYXJ0aWFsPFBoZXRpb09iamVjdE1ldGFkYXRhPj47XHJcblxyXG4vLyBMaWtlIHRoZSBnZW5lcmF0ZSBBUEkgZmlsZXNcclxuZXhwb3J0IHR5cGUgUGhldGlvQVBJID0ge1xyXG4gIHZlcnNpb246IHtcclxuICAgIG1ham9yOiBudW1iZXI7XHJcbiAgICBtaW5vcjogbnVtYmVyO1xyXG4gIH07XHJcbiAgcGhldGlvRnVsbEFQST86IGJvb2xlYW47XHJcbiAgc2ltOiBzdHJpbmc7XHJcbiAgcGhldGlvRWxlbWVudHM6IFBoZXRpb0VsZW1lbnRzO1xyXG4gIHBoZXRpb1R5cGVzOiBQaGV0aW9UeXBlcztcclxufTtcclxuXHJcbi8vIExpa2UgdGhlIG9sZCBBUEkgc2NoZW1hLCB3aGVyZSBrZXlzIGFyZSB0aGUgZnVsbCwgZG90LXNlcGFyYXRlZCBwaGV0aW9JRFxyXG5leHBvcnQgdHlwZSBBUElGbGF0ID0gUmVjb3JkPFBoZXRpb0lELCBQaGV0aW9FbGVtZW50PjtcclxuXHJcbmV4cG9ydCB0eXBlIElPVHlwZU5hbWUgPSBzdHJpbmc7XHJcblxyXG5leHBvcnQgdHlwZSBQaGV0aW9PYmplY3RNZXRhZGF0YSA9IHtcclxuXHJcbiAgLy8gVXNlZCBpbiBQaGV0aW9PYmplY3RPcHRpb25zXHJcbiAgcGhldGlvU3RhdGU6IGJvb2xlYW47XHJcbiAgcGhldGlvUmVhZE9ubHk6IGJvb2xlYW47XHJcbiAgcGhldGlvRXZlbnRUeXBlOiBzdHJpbmc7XHJcbiAgcGhldGlvRG9jdW1lbnRhdGlvbjogc3RyaW5nO1xyXG4gIHBoZXRpb0hpZ2hGcmVxdWVuY3k6IGJvb2xlYW47IC8vIEBkZXByZWNhdGVkXHJcbiAgcGhldGlvUGxheWJhY2s6IGJvb2xlYW47XHJcbiAgcGhldGlvRmVhdHVyZWQ/OiBib29sZWFuOyAvLyBMaW5rZWRFbGVtZW50cyBoYXZlIG5vIHBoZXRpb0ZlYXR1cmVkIGJlY2F1c2UgdGhleSBkZWZlciB0byB0aGVpciBjb3JlIGVsZW1lbnRcclxuICBwaGV0aW9EeW5hbWljRWxlbWVudDogYm9vbGVhbjtcclxuICBwaGV0aW9EZXNpZ25lZDogYm9vbGVhbjtcclxuXHJcbiAgLy8gU3BlY2lmaWMgdG8gTWV0YWRhdGFcclxuICBwaGV0aW9UeXBlTmFtZTogSU9UeXBlTmFtZTtcclxuICBwaGV0aW9Jc0FyY2hldHlwZTogYm9vbGVhbjtcclxuICBwaGV0aW9BcmNoZXR5cGVQaGV0aW9JRD86IHN0cmluZyB8IG51bGw7XHJcblxyXG4gIC8vIEZvciBQaGV0aW9EeW5hbWljRWxlbWVudENvbnRhaW5lci4gIFRPRE86IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy90YW5kZW0vaXNzdWVzLzI2MyBjYW4gdGhpcyBiZSBlbHNld2hlcmU/XHJcbiAgcGhldGlvRHluYW1pY0VsZW1lbnROYW1lPzogc3RyaW5nIHwgbnVsbDtcclxufTtcclxuXHJcbmNvbnN0IG1ldGFkYXRhRGVmYXVsdHM6IFBoZXRpb09iamVjdE1ldGFkYXRhICYgUGlja1JlcXVpcmVkPFBoZXRpb09iamVjdE1ldGFkYXRhLCAncGhldGlvRmVhdHVyZWQnPiA9IHtcclxuICBwaGV0aW9UeXBlTmFtZTogT0JKRUNUX0lPX1RZUEVfTkFNRSxcclxuICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnJyxcclxuICBwaGV0aW9TdGF0ZTogdHJ1ZSxcclxuICBwaGV0aW9SZWFkT25seTogZmFsc2UsXHJcblxyXG4gIC8vIE5PVEU6IFJlbGllcyBvbiB0aGUgZGV0YWlscyBhYm91dCBob3cgRW51bWVyYXRpb25zIGFyZSBzZXJpYWxpemVkICh2aWEgbmFtZSksIGxpa2UgRXZlbnRUeXBlLnBoZXRpb1R5cGUudG9TdGF0ZU9iamVjdCggb2JqZWN0LnBoZXRpb0V2ZW50VHlwZSApXHJcbiAgcGhldGlvRXZlbnRUeXBlOiBFVkVOVF9UWVBFX01PREVMLFxyXG4gIHBoZXRpb0hpZ2hGcmVxdWVuY3k6IGZhbHNlLFxyXG4gIHBoZXRpb1BsYXliYWNrOiBmYWxzZSxcclxuICBwaGV0aW9EeW5hbWljRWxlbWVudDogZmFsc2UsXHJcbiAgcGhldGlvSXNBcmNoZXR5cGU6IGZhbHNlLFxyXG4gIHBoZXRpb0ZlYXR1cmVkOiBmYWxzZSxcclxuICBwaGV0aW9EZXNpZ25lZDogZmFsc2UsXHJcbiAgcGhldGlvQXJjaGV0eXBlUGhldGlvSUQ6IG51bGxcclxufTtcclxuXHJcblxyXG5jb25zdCBUYW5kZW1Db25zdGFudHMgPSB7XHJcbiAgT0JKRUNUX0lPX1RZUEVfTkFNRTogT0JKRUNUX0lPX1RZUEVfTkFNRSxcclxuICBFVkVOVF9UWVBFX01PREVMOiBFVkVOVF9UWVBFX01PREVMLFxyXG5cclxuICAvLyBEZWZhdWx0IG1ldGFkYXRhIHNldCBmb3IgYW4gT2JqZWN0SU8gaW4gdGhlIFBoRVQtaU8gQVBJLiAgVGhlc2UgYXJlIHVzZWQgYXMgdGhlIGRlZmF1bHQgb3B0aW9ucyBpbiBQaGV0aW9PYmplY3RcclxuICAvLyBhbmQgd2hlbiBvdXRwdXR0aW5nIGFuIEFQSSAoc2luY2UgdmFsdWVzIHRoYXQgbWF0Y2ggdGhlIGRlZmF1bHRzIGFyZSBvbWl0dGVkKVxyXG4gIFBIRVRfSU9fT0JKRUNUX01FVEFEQVRBX0RFRkFVTFRTOiBtZXRhZGF0YURlZmF1bHRzLFxyXG5cclxuICBNRVRBREFUQV9LRVlfTkFNRTogJ19tZXRhZGF0YScsXHJcbiAgREFUQV9LRVlfTkFNRTogJ19kYXRhJ1xyXG5cclxufSBhcyBjb25zdDtcclxuXHJcbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ1RhbmRlbUNvbnN0YW50cycsIFRhbmRlbUNvbnN0YW50cyApO1xyXG5leHBvcnQgZGVmYXVsdCBUYW5kZW1Db25zdGFudHM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFJQSxPQUFPQSxlQUFlLE1BQU0sc0JBQXNCOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUMsbUJBQW1CLEdBQUcsVUFBVTtBQUN0QyxNQUFNQyxnQkFBZ0IsR0FBRyxPQUFPOztBQWFoQzs7QUFvQ0E7O0FBWUE7O0FBMkJBLE1BQU1DLGdCQUE2RixHQUFHO0VBQ3BHQyxjQUFjLEVBQUVILG1CQUFtQjtFQUNuQ0ksbUJBQW1CLEVBQUUsRUFBRTtFQUN2QkMsV0FBVyxFQUFFLElBQUk7RUFDakJDLGNBQWMsRUFBRSxLQUFLO0VBRXJCO0VBQ0FDLGVBQWUsRUFBRU4sZ0JBQWdCO0VBQ2pDTyxtQkFBbUIsRUFBRSxLQUFLO0VBQzFCQyxjQUFjLEVBQUUsS0FBSztFQUNyQkMsb0JBQW9CLEVBQUUsS0FBSztFQUMzQkMsaUJBQWlCLEVBQUUsS0FBSztFQUN4QkMsY0FBYyxFQUFFLEtBQUs7RUFDckJDLGNBQWMsRUFBRSxLQUFLO0VBQ3JCQyx1QkFBdUIsRUFBRTtBQUMzQixDQUFDO0FBR0QsTUFBTUMsZUFBZSxHQUFHO0VBQ3RCZixtQkFBbUIsRUFBRUEsbUJBQW1CO0VBQ3hDQyxnQkFBZ0IsRUFBRUEsZ0JBQWdCO0VBRWxDO0VBQ0E7RUFDQWUsZ0NBQWdDLEVBQUVkLGdCQUFnQjtFQUVsRGUsaUJBQWlCLEVBQUUsV0FBVztFQUM5QkMsYUFBYSxFQUFFO0FBRWpCLENBQVU7QUFFVm5CLGVBQWUsQ0FBQ29CLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRUosZUFBZ0IsQ0FBQztBQUM5RCxlQUFlQSxlQUFlIn0=