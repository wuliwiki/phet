// Copyright 2019-2023, University of Colorado Boulder

/**
 * A PhET-iO class that encapsulates a PhetioObject that is not created during sim startup to provide PhET-iO API
 * validation, API communication (like to view in studio before creation), and to support PhET-iO state if applicable.
 *
 * Constructing a PhetioCapsule creates a container encapsulating a wrapped element that can be of any type.
 *
 * Clients should use myCapsule.getElement() instead of storing the element value itself.
 *
 * NOTE: Be careful about treating the dynamic element as a singleton. When creating the archetype, problems can arise
 * because the capsule creates two instances of the element: one as the archetype and one as the instance. This can
 * result in trouble like in https://github.com/phetsims/joist/issues/821.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import PhetioDynamicElementContainer from './PhetioDynamicElementContainer.js';
import Tandem from './Tandem.js';
import tandemNamespace from './tandemNamespace.js';
import IOType from './types/IOType.js';
import optionize from '../../phet-core/js/optionize.js';
// constants
const DEFAULT_CONTAINER_SUFFIX = 'Capsule';

// cache each parameterized IOType so that it is only created once.
const cache = new Map();
class PhetioCapsule extends PhetioDynamicElementContainer {
  /**
   * @param createElement - function that creates the encapsulated element
   * @param defaultArguments - arguments passed to createElement when creating the archetype
   * @param [options]
   */
  constructor(createElement, defaultArguments, options) {
    options = optionize()({
      tandem: Tandem.OPTIONAL,
      // The capsule's tandem name must have this suffix, and the base tandem name for its wrapped element
      // will consist of the capsule's tandem name with this suffix stripped off.
      containerSuffix: DEFAULT_CONTAINER_SUFFIX
    }, options);
    super(createElement, defaultArguments, options);
    this.element = null;
  }

  /**
   * Dispose the underlying element.  Called by the PhetioStateEngine so the capsule element can be recreated with the
   * correct state.
   */
  disposeElement() {
    assert && assert(this.element, 'cannot dispose if element is not defined');
    super.disposeElement(this.element);
    this.element = null;
  }
  hasElement() {
    return this.element !== null;
  }

  /**
   * Creates the element if it has not been created yet, and returns it.
   */
  getElement(...argsForCreateFunction) {
    if (!this.element) {
      this.create(argsForCreateFunction);
    }
    assert && assert(this.element !== null);
    return this.element;
  }
  clear() {
    if (this.element) {
      this.disposeElement();
    }
  }

  /**
   * Primarily for internal use, clients should usually use getElement.
   * @param argsForCreateFunction
   * @param [fromStateSetting] - used for validation during state setting, see PhetioDynamicElementContainer.disposeElement() for documentation
   * (phet-io)
   */
  create(argsForCreateFunction, fromStateSetting = false) {
    assert && assert(this.isPhetioInstrumented(), 'TODO: support uninstrumented PhetioCapsules? see https://github.com/phetsims/tandem/issues/184');
    assert && this.supportsDynamicState && _.hasIn(window, 'phet.joist.sim.') && phet.joist.sim.isSettingPhetioStateProperty.value && assert(fromStateSetting, 'dynamic elements should only be created by the state engine when setting state.');

    // create with default state and substructure, details will need to be set by setter methods.
    this.element = this.createDynamicElement(this.phetioDynamicElementName, argsForCreateFunction, Tandem.PHET_IO_ENABLED ? this.phetioType.parameterTypes[0] : null // Don't access phetioType in PhET brand
    );

    this.notifyElementCreated(this.element);
    return this.element;
  }

  /**
   * Parametric IO Type constructor.  Given an element type, this function returns a PhetioCapsule IO Type.
   * This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
   * @param parameterType
   * @constructor
   */
  static PhetioCapsuleIO = parameterType => {
    if (!cache.has(parameterType)) {
      cache.set(parameterType, new IOType(`PhetioCapsuleIO<${parameterType.typeName}>`, {
        valueType: PhetioCapsule,
        documentation: 'An array that sends notifications when its values have changed.',
        parameterTypes: [parameterType],
        // This is always specified by PhetioCapsule, and will never be this value. Yes, it is odd to have a default value
        // that can never be the actual value, but we thought it would be simplest to reuse the "options" pipeline
        // rather than inventing a new "required" pipeline.
        metadataDefaults: {
          phetioDynamicElementName: null
        },
        // @ts-expect-error The group is a group, not just a PhetioDynamicElementContainer
        addChildElement(capsule, componentName, stateObject) {
          // should throw CouldNotYetDeserializeError if it can't be created yet. Likely that would be because another
          // element in the state needs to be created first, so we will try again on the next iteration of the state
          // setting engine.
          const args = parameterType.stateObjectToCreateElementArguments(stateObject);

          // @ts-expect-error args is of type P, but we can't really communicate that here
          return capsule.create(args, true);
        }
      }));
    }
    return cache.get(parameterType);
  };
}
tandemNamespace.register('PhetioCapsule', PhetioCapsule);
export default PhetioCapsule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0aW9EeW5hbWljRWxlbWVudENvbnRhaW5lciIsIlRhbmRlbSIsInRhbmRlbU5hbWVzcGFjZSIsIklPVHlwZSIsIm9wdGlvbml6ZSIsIkRFRkFVTFRfQ09OVEFJTkVSX1NVRkZJWCIsImNhY2hlIiwiTWFwIiwiUGhldGlvQ2Fwc3VsZSIsImNvbnN0cnVjdG9yIiwiY3JlYXRlRWxlbWVudCIsImRlZmF1bHRBcmd1bWVudHMiLCJvcHRpb25zIiwidGFuZGVtIiwiT1BUSU9OQUwiLCJjb250YWluZXJTdWZmaXgiLCJlbGVtZW50IiwiZGlzcG9zZUVsZW1lbnQiLCJhc3NlcnQiLCJoYXNFbGVtZW50IiwiZ2V0RWxlbWVudCIsImFyZ3NGb3JDcmVhdGVGdW5jdGlvbiIsImNyZWF0ZSIsImNsZWFyIiwiZnJvbVN0YXRlU2V0dGluZyIsImlzUGhldGlvSW5zdHJ1bWVudGVkIiwic3VwcG9ydHNEeW5hbWljU3RhdGUiLCJfIiwiaGFzSW4iLCJ3aW5kb3ciLCJwaGV0Iiwiam9pc3QiLCJzaW0iLCJpc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5IiwidmFsdWUiLCJjcmVhdGVEeW5hbWljRWxlbWVudCIsInBoZXRpb0R5bmFtaWNFbGVtZW50TmFtZSIsIlBIRVRfSU9fRU5BQkxFRCIsInBoZXRpb1R5cGUiLCJwYXJhbWV0ZXJUeXBlcyIsIm5vdGlmeUVsZW1lbnRDcmVhdGVkIiwiUGhldGlvQ2Fwc3VsZUlPIiwicGFyYW1ldGVyVHlwZSIsImhhcyIsInNldCIsInR5cGVOYW1lIiwidmFsdWVUeXBlIiwiZG9jdW1lbnRhdGlvbiIsIm1ldGFkYXRhRGVmYXVsdHMiLCJhZGRDaGlsZEVsZW1lbnQiLCJjYXBzdWxlIiwiY29tcG9uZW50TmFtZSIsInN0YXRlT2JqZWN0IiwiYXJncyIsInN0YXRlT2JqZWN0VG9DcmVhdGVFbGVtZW50QXJndW1lbnRzIiwiZ2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQaGV0aW9DYXBzdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgUGhFVC1pTyBjbGFzcyB0aGF0IGVuY2Fwc3VsYXRlcyBhIFBoZXRpb09iamVjdCB0aGF0IGlzIG5vdCBjcmVhdGVkIGR1cmluZyBzaW0gc3RhcnR1cCB0byBwcm92aWRlIFBoRVQtaU8gQVBJXHJcbiAqIHZhbGlkYXRpb24sIEFQSSBjb21tdW5pY2F0aW9uIChsaWtlIHRvIHZpZXcgaW4gc3R1ZGlvIGJlZm9yZSBjcmVhdGlvbiksIGFuZCB0byBzdXBwb3J0IFBoRVQtaU8gc3RhdGUgaWYgYXBwbGljYWJsZS5cclxuICpcclxuICogQ29uc3RydWN0aW5nIGEgUGhldGlvQ2Fwc3VsZSBjcmVhdGVzIGEgY29udGFpbmVyIGVuY2Fwc3VsYXRpbmcgYSB3cmFwcGVkIGVsZW1lbnQgdGhhdCBjYW4gYmUgb2YgYW55IHR5cGUuXHJcbiAqXHJcbiAqIENsaWVudHMgc2hvdWxkIHVzZSBteUNhcHN1bGUuZ2V0RWxlbWVudCgpIGluc3RlYWQgb2Ygc3RvcmluZyB0aGUgZWxlbWVudCB2YWx1ZSBpdHNlbGYuXHJcbiAqXHJcbiAqIE5PVEU6IEJlIGNhcmVmdWwgYWJvdXQgdHJlYXRpbmcgdGhlIGR5bmFtaWMgZWxlbWVudCBhcyBhIHNpbmdsZXRvbi4gV2hlbiBjcmVhdGluZyB0aGUgYXJjaGV0eXBlLCBwcm9ibGVtcyBjYW4gYXJpc2VcclxuICogYmVjYXVzZSB0aGUgY2Fwc3VsZSBjcmVhdGVzIHR3byBpbnN0YW5jZXMgb2YgdGhlIGVsZW1lbnQ6IG9uZSBhcyB0aGUgYXJjaGV0eXBlIGFuZCBvbmUgYXMgdGhlIGluc3RhbmNlLiBUaGlzIGNhblxyXG4gKiByZXN1bHQgaW4gdHJvdWJsZSBsaWtlIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvODIxLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUGhldGlvRHluYW1pY0VsZW1lbnRDb250YWluZXIsIHsgUGhldGlvRHluYW1pY0VsZW1lbnRDb250YWluZXJPcHRpb25zIH0gZnJvbSAnLi9QaGV0aW9EeW5hbWljRWxlbWVudENvbnRhaW5lci5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi9UYW5kZW0uanMnO1xyXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4vdGFuZGVtTmFtZXNwYWNlLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QgZnJvbSAnLi9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgREVGQVVMVF9DT05UQUlORVJfU1VGRklYID0gJ0NhcHN1bGUnO1xyXG5cclxuLy8gY2FjaGUgZWFjaCBwYXJhbWV0ZXJpemVkIElPVHlwZSBzbyB0aGF0IGl0IGlzIG9ubHkgY3JlYXRlZCBvbmNlLlxyXG5jb25zdCBjYWNoZSA9IG5ldyBNYXA8SU9UeXBlLCBJT1R5cGU+KCk7XHJcblxyXG5leHBvcnQgdHlwZSBQaGV0aW9DYXBzdWxlT3B0aW9ucyA9IFBoZXRpb0R5bmFtaWNFbGVtZW50Q29udGFpbmVyT3B0aW9ucztcclxuXHJcbmNsYXNzIFBoZXRpb0NhcHN1bGU8VCBleHRlbmRzIFBoZXRpb09iamVjdCwgUCBleHRlbmRzIEludGVudGlvbmFsQW55W10gPSBbXT4gZXh0ZW5kcyBQaGV0aW9EeW5hbWljRWxlbWVudENvbnRhaW5lcjxULCBQPiB7XHJcbiAgcHJpdmF0ZSBlbGVtZW50OiBUIHwgbnVsbDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGNyZWF0ZUVsZW1lbnQgLSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlIGVuY2Fwc3VsYXRlZCBlbGVtZW50XHJcbiAgICogQHBhcmFtIGRlZmF1bHRBcmd1bWVudHMgLSBhcmd1bWVudHMgcGFzc2VkIHRvIGNyZWF0ZUVsZW1lbnQgd2hlbiBjcmVhdGluZyB0aGUgYXJjaGV0eXBlXHJcbiAgICogQHBhcmFtIFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY3JlYXRlRWxlbWVudDogKCB0OiBUYW5kZW0sIC4uLnA6IFAgKSA9PiBULCBkZWZhdWx0QXJndW1lbnRzOiBQIHwgKCAoKSA9PiBQICksIG9wdGlvbnM/OiBQaGV0aW9DYXBzdWxlT3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gb3B0aW9uaXplPFBoZXRpb0NhcHN1bGVPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zLCBQaGV0aW9EeW5hbWljRWxlbWVudENvbnRhaW5lck9wdGlvbnM+KCkoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUSU9OQUwsXHJcblxyXG4gICAgICAvLyBUaGUgY2Fwc3VsZSdzIHRhbmRlbSBuYW1lIG11c3QgaGF2ZSB0aGlzIHN1ZmZpeCwgYW5kIHRoZSBiYXNlIHRhbmRlbSBuYW1lIGZvciBpdHMgd3JhcHBlZCBlbGVtZW50XHJcbiAgICAgIC8vIHdpbGwgY29uc2lzdCBvZiB0aGUgY2Fwc3VsZSdzIHRhbmRlbSBuYW1lIHdpdGggdGhpcyBzdWZmaXggc3RyaXBwZWQgb2ZmLlxyXG4gICAgICBjb250YWluZXJTdWZmaXg6IERFRkFVTFRfQ09OVEFJTkVSX1NVRkZJWFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBjcmVhdGVFbGVtZW50LCBkZWZhdWx0QXJndW1lbnRzLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3Bvc2UgdGhlIHVuZGVybHlpbmcgZWxlbWVudC4gIENhbGxlZCBieSB0aGUgUGhldGlvU3RhdGVFbmdpbmUgc28gdGhlIGNhcHN1bGUgZWxlbWVudCBjYW4gYmUgcmVjcmVhdGVkIHdpdGggdGhlXHJcbiAgICogY29ycmVjdCBzdGF0ZS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZUVsZW1lbnQoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLmVsZW1lbnQsICdjYW5ub3QgZGlzcG9zZSBpZiBlbGVtZW50IGlzIG5vdCBkZWZpbmVkJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZUVsZW1lbnQoIHRoaXMuZWxlbWVudCEgKTtcclxuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFzRWxlbWVudCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnQgIT09IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBlbGVtZW50IGlmIGl0IGhhcyBub3QgYmVlbiBjcmVhdGVkIHlldCwgYW5kIHJldHVybnMgaXQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEVsZW1lbnQoIC4uLmFyZ3NGb3JDcmVhdGVGdW5jdGlvbjogUCApOiBUIHtcclxuICAgIGlmICggIXRoaXMuZWxlbWVudCApIHtcclxuICAgICAgdGhpcy5jcmVhdGUoIGFyZ3NGb3JDcmVhdGVGdW5jdGlvbiApO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5lbGVtZW50ICE9PSBudWxsICk7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50ITtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBjbGVhcigpOiB2b2lkIHtcclxuXHJcbiAgICBpZiAoIHRoaXMuZWxlbWVudCApIHtcclxuICAgICAgdGhpcy5kaXNwb3NlRWxlbWVudCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJpbWFyaWx5IGZvciBpbnRlcm5hbCB1c2UsIGNsaWVudHMgc2hvdWxkIHVzdWFsbHkgdXNlIGdldEVsZW1lbnQuXHJcbiAgICogQHBhcmFtIGFyZ3NGb3JDcmVhdGVGdW5jdGlvblxyXG4gICAqIEBwYXJhbSBbZnJvbVN0YXRlU2V0dGluZ10gLSB1c2VkIGZvciB2YWxpZGF0aW9uIGR1cmluZyBzdGF0ZSBzZXR0aW5nLCBzZWUgUGhldGlvRHluYW1pY0VsZW1lbnRDb250YWluZXIuZGlzcG9zZUVsZW1lbnQoKSBmb3IgZG9jdW1lbnRhdGlvblxyXG4gICAqIChwaGV0LWlvKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGUoIGFyZ3NGb3JDcmVhdGVGdW5jdGlvbjogUCwgZnJvbVN0YXRlU2V0dGluZyA9IGZhbHNlICk6IFQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5pc1BoZXRpb0luc3RydW1lbnRlZCgpLCAnVE9ETzogc3VwcG9ydCB1bmluc3RydW1lbnRlZCBQaGV0aW9DYXBzdWxlcz8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy90YW5kZW0vaXNzdWVzLzE4NCcgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgdGhpcy5zdXBwb3J0c0R5bmFtaWNTdGF0ZSAmJiBfLmhhc0luKCB3aW5kb3csICdwaGV0LmpvaXN0LnNpbS4nICkgJiZcclxuICAgIHBoZXQuam9pc3Quc2ltLmlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHkudmFsdWUgJiYgYXNzZXJ0KCBmcm9tU3RhdGVTZXR0aW5nLFxyXG4gICAgICAnZHluYW1pYyBlbGVtZW50cyBzaG91bGQgb25seSBiZSBjcmVhdGVkIGJ5IHRoZSBzdGF0ZSBlbmdpbmUgd2hlbiBzZXR0aW5nIHN0YXRlLicgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgd2l0aCBkZWZhdWx0IHN0YXRlIGFuZCBzdWJzdHJ1Y3R1cmUsIGRldGFpbHMgd2lsbCBuZWVkIHRvIGJlIHNldCBieSBzZXR0ZXIgbWV0aG9kcy5cclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlRHluYW1pY0VsZW1lbnQoXHJcbiAgICAgIHRoaXMucGhldGlvRHluYW1pY0VsZW1lbnROYW1lLFxyXG4gICAgICBhcmdzRm9yQ3JlYXRlRnVuY3Rpb24sXHJcbiAgICAgIFRhbmRlbS5QSEVUX0lPX0VOQUJMRUQgPyB0aGlzLnBoZXRpb1R5cGUucGFyYW1ldGVyVHlwZXMhWyAwIF0gOiBudWxsIC8vIERvbid0IGFjY2VzcyBwaGV0aW9UeXBlIGluIFBoRVQgYnJhbmRcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5ub3RpZnlFbGVtZW50Q3JlYXRlZCggdGhpcy5lbGVtZW50ICk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhcmFtZXRyaWMgSU8gVHlwZSBjb25zdHJ1Y3Rvci4gIEdpdmVuIGFuIGVsZW1lbnQgdHlwZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgUGhldGlvQ2Fwc3VsZSBJTyBUeXBlLlxyXG4gICAqIFRoaXMgY2FjaGluZyBpbXBsZW1lbnRhdGlvbiBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIG90aGVyIHBhcmFtZXRyaWMgSU8gVHlwZSBjYWNoaW5nIGltcGxlbWVudGF0aW9ucy5cclxuICAgKiBAcGFyYW0gcGFyYW1ldGVyVHlwZVxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgUGhldGlvQ2Fwc3VsZUlPID0gPFBhcmFtZXRlclR5cGUgZXh0ZW5kcyBQaGV0aW9PYmplY3QsIFBhcmFtZXRlclN0YXRlVHlwZT4oIHBhcmFtZXRlclR5cGU6IElPVHlwZTxQYXJhbWV0ZXJUeXBlLCBQYXJhbWV0ZXJTdGF0ZVR5cGU+ICk6IElPVHlwZSA9PiB7XHJcblxyXG4gICAgaWYgKCAhY2FjaGUuaGFzKCBwYXJhbWV0ZXJUeXBlICkgKSB7XHJcbiAgICAgIGNhY2hlLnNldCggcGFyYW1ldGVyVHlwZSwgbmV3IElPVHlwZTxQaGV0aW9DYXBzdWxlPFBhcmFtZXRlclR5cGU+LCBJbnRlbnRpb25hbEFueT4oIGBQaGV0aW9DYXBzdWxlSU88JHtwYXJhbWV0ZXJUeXBlLnR5cGVOYW1lfT5gLCB7XHJcbiAgICAgICAgdmFsdWVUeXBlOiBQaGV0aW9DYXBzdWxlLFxyXG4gICAgICAgIGRvY3VtZW50YXRpb246ICdBbiBhcnJheSB0aGF0IHNlbmRzIG5vdGlmaWNhdGlvbnMgd2hlbiBpdHMgdmFsdWVzIGhhdmUgY2hhbmdlZC4nLFxyXG4gICAgICAgIHBhcmFtZXRlclR5cGVzOiBbIHBhcmFtZXRlclR5cGUgXSxcclxuXHJcbiAgICAgICAgLy8gVGhpcyBpcyBhbHdheXMgc3BlY2lmaWVkIGJ5IFBoZXRpb0NhcHN1bGUsIGFuZCB3aWxsIG5ldmVyIGJlIHRoaXMgdmFsdWUuIFllcywgaXQgaXMgb2RkIHRvIGhhdmUgYSBkZWZhdWx0IHZhbHVlXHJcbiAgICAgICAgLy8gdGhhdCBjYW4gbmV2ZXIgYmUgdGhlIGFjdHVhbCB2YWx1ZSwgYnV0IHdlIHRob3VnaHQgaXQgd291bGQgYmUgc2ltcGxlc3QgdG8gcmV1c2UgdGhlIFwib3B0aW9uc1wiIHBpcGVsaW5lXHJcbiAgICAgICAgLy8gcmF0aGVyIHRoYW4gaW52ZW50aW5nIGEgbmV3IFwicmVxdWlyZWRcIiBwaXBlbGluZS5cclxuICAgICAgICBtZXRhZGF0YURlZmF1bHRzOiB7IHBoZXRpb0R5bmFtaWNFbGVtZW50TmFtZTogbnVsbCB9LFxyXG5cclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRoZSBncm91cCBpcyBhIGdyb3VwLCBub3QganVzdCBhIFBoZXRpb0R5bmFtaWNFbGVtZW50Q29udGFpbmVyXHJcbiAgICAgICAgYWRkQ2hpbGRFbGVtZW50KCBjYXBzdWxlOiBQaGV0aW9DYXBzdWxlPFBhcmFtZXRlclR5cGU+LCBjb21wb25lbnROYW1lOiBzdHJpbmcsIHN0YXRlT2JqZWN0OiBQYXJhbWV0ZXJTdGF0ZVR5cGUgKSB7XHJcblxyXG4gICAgICAgICAgLy8gc2hvdWxkIHRocm93IENvdWxkTm90WWV0RGVzZXJpYWxpemVFcnJvciBpZiBpdCBjYW4ndCBiZSBjcmVhdGVkIHlldC4gTGlrZWx5IHRoYXQgd291bGQgYmUgYmVjYXVzZSBhbm90aGVyXHJcbiAgICAgICAgICAvLyBlbGVtZW50IGluIHRoZSBzdGF0ZSBuZWVkcyB0byBiZSBjcmVhdGVkIGZpcnN0LCBzbyB3ZSB3aWxsIHRyeSBhZ2FpbiBvbiB0aGUgbmV4dCBpdGVyYXRpb24gb2YgdGhlIHN0YXRlXHJcbiAgICAgICAgICAvLyBzZXR0aW5nIGVuZ2luZS5cclxuICAgICAgICAgIGNvbnN0IGFyZ3MgPSBwYXJhbWV0ZXJUeXBlLnN0YXRlT2JqZWN0VG9DcmVhdGVFbGVtZW50QXJndW1lbnRzKCBzdGF0ZU9iamVjdCApO1xyXG5cclxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYXJncyBpcyBvZiB0eXBlIFAsIGJ1dCB3ZSBjYW4ndCByZWFsbHkgY29tbXVuaWNhdGUgdGhhdCBoZXJlXHJcbiAgICAgICAgICByZXR1cm4gY2Fwc3VsZS5jcmVhdGUoIGFyZ3MsIHRydWUgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKSApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjYWNoZS5nZXQoIHBhcmFtZXRlclR5cGUgKSE7XHJcbiAgfTtcclxufVxyXG5cclxuXHJcbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ1BoZXRpb0NhcHN1bGUnLCBQaGV0aW9DYXBzdWxlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBoZXRpb0NhcHN1bGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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