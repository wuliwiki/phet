// Copyright 2016-2022, University of Colorado Boulder

/**
 * MathSymbolFont is the font used for math symbols (e.g. 'x', 'y') in PhET sims.
 * See https://github.com/phetsims/scenery/issues/545
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../axon/js/DerivedProperty.js';
import optionize from '../../phet-core/js/optionize.js';
import StringUtils from '../../phetcommon/js/util/StringUtils.js';
import { Font } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
const DEFAULT_STYLE = 'italic';
export default class MathSymbolFont extends Font {
  static FAMILY = '"Times New Roman", Times, serif';
  constructor(providedOptions) {
    // convenience constructor: new MathSymbolFont( {number|string} size )
    if (typeof providedOptions === 'number' || typeof providedOptions === 'string') {
      providedOptions = {
        size: providedOptions
      };
    }
    const options = optionize()({
      family: MathSymbolFont.FAMILY,
      style: DEFAULT_STYLE
    }, providedOptions);
    super(options);
  }

  /**
   * Converts a string to the markup needed to display that string with RichText, using the same family as MathSymbolFont.
   * @param text
   * @param [style] - see Font options.style
   */
  static getRichTextMarkup(text, style = DEFAULT_STYLE) {
    assert && assert(Font.isFontStyle(style), `invalid style: ${style}`);
    return StringUtils.fillIn('<span style=\'font-family: {{family}};font-style: {{style}}\'>{{text}}</span>', {
      family: MathSymbolFont.FAMILY,
      style: style,
      text: text
    });
  }

  /**
   * Wraps a dynamic string in RichText that will display the string in the same font as MathSymbolFont.
   */
  static createDerivedProperty(symbolStringProperty, style = DEFAULT_STYLE) {
    return new DerivedProperty([symbolStringProperty], symbolString => MathSymbolFont.getRichTextMarkup(symbolString, style));
  }
}
sceneryPhet.register('MathSymbolFont', MathSymbolFont);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJvcHRpb25pemUiLCJTdHJpbmdVdGlscyIsIkZvbnQiLCJzY2VuZXJ5UGhldCIsIkRFRkFVTFRfU1RZTEUiLCJNYXRoU3ltYm9sRm9udCIsIkZBTUlMWSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwic2l6ZSIsIm9wdGlvbnMiLCJmYW1pbHkiLCJzdHlsZSIsImdldFJpY2hUZXh0TWFya3VwIiwidGV4dCIsImFzc2VydCIsImlzRm9udFN0eWxlIiwiZmlsbEluIiwiY3JlYXRlRGVyaXZlZFByb3BlcnR5Iiwic3ltYm9sU3RyaW5nUHJvcGVydHkiLCJzeW1ib2xTdHJpbmciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1hdGhTeW1ib2xGb250LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1hdGhTeW1ib2xGb250IGlzIHRoZSBmb250IHVzZWQgZm9yIG1hdGggc3ltYm9scyAoZS5nLiAneCcsICd5JykgaW4gUGhFVCBzaW1zLlxyXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnkvaXNzdWVzLzU0NVxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBGb250LCBGb250T3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbmNvbnN0IERFRkFVTFRfU1RZTEUgPSAnaXRhbGljJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IHR5cGUgTWF0aFN5bWJvbEZvbnRPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PEZvbnRPcHRpb25zLCAnZmFtaWx5Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRoU3ltYm9sRm9udCBleHRlbmRzIEZvbnQge1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEZBTUlMWSA9ICdcIlRpbWVzIE5ldyBSb21hblwiLCBUaW1lcywgc2VyaWYnO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IG51bWJlciB8IHN0cmluZyB8IE1hdGhTeW1ib2xGb250T3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBjb252ZW5pZW5jZSBjb25zdHJ1Y3RvcjogbmV3IE1hdGhTeW1ib2xGb250KCB7bnVtYmVyfHN0cmluZ30gc2l6ZSApXHJcbiAgICBpZiAoIHR5cGVvZiBwcm92aWRlZE9wdGlvbnMgPT09ICdudW1iZXInIHx8IHR5cGVvZiBwcm92aWRlZE9wdGlvbnMgPT09ICdzdHJpbmcnICkge1xyXG4gICAgICBwcm92aWRlZE9wdGlvbnMgPSB7XHJcbiAgICAgICAgc2l6ZTogcHJvdmlkZWRPcHRpb25zXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxNYXRoU3ltYm9sRm9udE9wdGlvbnMsIFNlbGZPcHRpb25zLCBGb250T3B0aW9ucz4oKSgge1xyXG4gICAgICBmYW1pbHk6IE1hdGhTeW1ib2xGb250LkZBTUlMWSxcclxuICAgICAgc3R5bGU6IERFRkFVTFRfU1RZTEVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byB0aGUgbWFya3VwIG5lZWRlZCB0byBkaXNwbGF5IHRoYXQgc3RyaW5nIHdpdGggUmljaFRleHQsIHVzaW5nIHRoZSBzYW1lIGZhbWlseSBhcyBNYXRoU3ltYm9sRm9udC5cclxuICAgKiBAcGFyYW0gdGV4dFxyXG4gICAqIEBwYXJhbSBbc3R5bGVdIC0gc2VlIEZvbnQgb3B0aW9ucy5zdHlsZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0UmljaFRleHRNYXJrdXAoIHRleHQ6IHN0cmluZywgc3R5bGUgPSBERUZBVUxUX1NUWUxFICk6IHN0cmluZyB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBGb250LmlzRm9udFN0eWxlKCBzdHlsZSApLCBgaW52YWxpZCBzdHlsZTogJHtzdHlsZX1gICk7XHJcbiAgICByZXR1cm4gU3RyaW5nVXRpbHMuZmlsbEluKCAnPHNwYW4gc3R5bGU9XFwnZm9udC1mYW1pbHk6IHt7ZmFtaWx5fX07Zm9udC1zdHlsZToge3tzdHlsZX19XFwnPnt7dGV4dH19PC9zcGFuPicsIHtcclxuICAgICAgZmFtaWx5OiBNYXRoU3ltYm9sRm9udC5GQU1JTFksXHJcbiAgICAgIHN0eWxlOiBzdHlsZSxcclxuICAgICAgdGV4dDogdGV4dFxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV3JhcHMgYSBkeW5hbWljIHN0cmluZyBpbiBSaWNoVGV4dCB0aGF0IHdpbGwgZGlzcGxheSB0aGUgc3RyaW5nIGluIHRoZSBzYW1lIGZvbnQgYXMgTWF0aFN5bWJvbEZvbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVEZXJpdmVkUHJvcGVydHkoIHN5bWJvbFN0cmluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCBzdHlsZSA9IERFRkFVTFRfU1RZTEUgKTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBzeW1ib2xTdHJpbmdQcm9wZXJ0eSBdLFxyXG4gICAgICBzeW1ib2xTdHJpbmcgPT4gTWF0aFN5bWJvbEZvbnQuZ2V0UmljaFRleHRNYXJrdXAoIHN5bWJvbFN0cmluZywgc3R5bGUgKSApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdNYXRoU3ltYm9sRm9udCcsIE1hdGhTeW1ib2xGb250ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLGtDQUFrQztBQUU5RCxPQUFPQyxTQUFTLE1BQTRCLGlDQUFpQztBQUU3RSxPQUFPQyxXQUFXLE1BQU0seUNBQXlDO0FBQ2pFLFNBQVNDLElBQUksUUFBcUIsNkJBQTZCO0FBQy9ELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFFMUMsTUFBTUMsYUFBYSxHQUFHLFFBQVE7QUFNOUIsZUFBZSxNQUFNQyxjQUFjLFNBQVNILElBQUksQ0FBQztFQUUvQyxPQUF1QkksTUFBTSxHQUFHLGlDQUFpQztFQUUxREMsV0FBV0EsQ0FBRUMsZUFBeUQsRUFBRztJQUU5RTtJQUNBLElBQUssT0FBT0EsZUFBZSxLQUFLLFFBQVEsSUFBSSxPQUFPQSxlQUFlLEtBQUssUUFBUSxFQUFHO01BQ2hGQSxlQUFlLEdBQUc7UUFDaEJDLElBQUksRUFBRUQ7TUFDUixDQUFDO0lBQ0g7SUFFQSxNQUFNRSxPQUFPLEdBQUdWLFNBQVMsQ0FBa0QsQ0FBQyxDQUFFO01BQzVFVyxNQUFNLEVBQUVOLGNBQWMsQ0FBQ0MsTUFBTTtNQUM3Qk0sS0FBSyxFQUFFUjtJQUNULENBQUMsRUFBRUksZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVFLE9BQVEsQ0FBQztFQUNsQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBY0csaUJBQWlCQSxDQUFFQyxJQUFZLEVBQUVGLEtBQUssR0FBR1IsYUFBYSxFQUFXO0lBQzdFVyxNQUFNLElBQUlBLE1BQU0sQ0FBRWIsSUFBSSxDQUFDYyxXQUFXLENBQUVKLEtBQU0sQ0FBQyxFQUFHLGtCQUFpQkEsS0FBTSxFQUFFLENBQUM7SUFDeEUsT0FBT1gsV0FBVyxDQUFDZ0IsTUFBTSxDQUFFLCtFQUErRSxFQUFFO01BQzFHTixNQUFNLEVBQUVOLGNBQWMsQ0FBQ0MsTUFBTTtNQUM3Qk0sS0FBSyxFQUFFQSxLQUFLO01BQ1pFLElBQUksRUFBRUE7SUFDUixDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjSSxxQkFBcUJBLENBQUVDLG9CQUErQyxFQUFFUCxLQUFLLEdBQUdSLGFBQWEsRUFBOEI7SUFDdkksT0FBTyxJQUFJTCxlQUFlLENBQUUsQ0FBRW9CLG9CQUFvQixDQUFFLEVBQ2xEQyxZQUFZLElBQUlmLGNBQWMsQ0FBQ1EsaUJBQWlCLENBQUVPLFlBQVksRUFBRVIsS0FBTSxDQUFFLENBQUM7RUFDN0U7QUFDRjtBQUVBVCxXQUFXLENBQUNrQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVoQixjQUFlLENBQUMifQ==