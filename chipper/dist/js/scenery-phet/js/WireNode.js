// Copyright 2018-2022, University of Colorado Boulder

/**
 * View that typically connects a sensor (like a ProbeNode) to its body (where the readout value or chart appears).
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Multilink from '../../axon/js/Multilink.js';
import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { Path } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
export default class WireNode extends Path {
  /**
   * @param position1Property - connects to one object, often this is a DerivedProperty
   * @param normal1Property - defines the control point of the cubic curve, relative to the position1
   * @param position2Property - connects to another object, often this is a DerivedProperty
   * @param normal2Property - defines the control point of the cubic curve, relative to the position2
   * @param [options]
   */
  constructor(position1Property, normal1Property, position2Property, normal2Property, options) {
    options = optionize()({
      stroke: 'black'
    }, options);
    super(null, options);
    this.multilink = Multilink.multilink([position1Property, normal1Property, position2Property, normal2Property], (position1, normal1, position2, normal2) => {
      this.shape = new Shape().moveToPoint(position1).cubicCurveToPoint(position1.plus(normal1), position2.plus(normal2), position2);
    });
  }
  dispose() {
    this.multilink.dispose();
    super.dispose();
  }
}
sceneryPhet.register('WireNode', WireNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJTaGFwZSIsIm9wdGlvbml6ZSIsIlBhdGgiLCJzY2VuZXJ5UGhldCIsIldpcmVOb2RlIiwiY29uc3RydWN0b3IiLCJwb3NpdGlvbjFQcm9wZXJ0eSIsIm5vcm1hbDFQcm9wZXJ0eSIsInBvc2l0aW9uMlByb3BlcnR5Iiwibm9ybWFsMlByb3BlcnR5Iiwib3B0aW9ucyIsInN0cm9rZSIsIm11bHRpbGluayIsInBvc2l0aW9uMSIsIm5vcm1hbDEiLCJwb3NpdGlvbjIiLCJub3JtYWwyIiwic2hhcGUiLCJtb3ZlVG9Qb2ludCIsImN1YmljQ3VydmVUb1BvaW50IiwicGx1cyIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldpcmVOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgdGhhdCB0eXBpY2FsbHkgY29ubmVjdHMgYSBzZW5zb3IgKGxpa2UgYSBQcm9iZU5vZGUpIHRvIGl0cyBib2R5ICh3aGVyZSB0aGUgcmVhZG91dCB2YWx1ZSBvciBjaGFydCBhcHBlYXJzKS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmssIHsgVW5rbm93bk11bHRpbGluayB9IGZyb20gJy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBQYXRoLCBQYXRoT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IHR5cGUgV2lyZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQYXRoT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdpcmVOb2RlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbXVsdGlsaW5rOiBVbmtub3duTXVsdGlsaW5rO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcG9zaXRpb24xUHJvcGVydHkgLSBjb25uZWN0cyB0byBvbmUgb2JqZWN0LCBvZnRlbiB0aGlzIGlzIGEgRGVyaXZlZFByb3BlcnR5XHJcbiAgICogQHBhcmFtIG5vcm1hbDFQcm9wZXJ0eSAtIGRlZmluZXMgdGhlIGNvbnRyb2wgcG9pbnQgb2YgdGhlIGN1YmljIGN1cnZlLCByZWxhdGl2ZSB0byB0aGUgcG9zaXRpb24xXHJcbiAgICogQHBhcmFtIHBvc2l0aW9uMlByb3BlcnR5IC0gY29ubmVjdHMgdG8gYW5vdGhlciBvYmplY3QsIG9mdGVuIHRoaXMgaXMgYSBEZXJpdmVkUHJvcGVydHlcclxuICAgKiBAcGFyYW0gbm9ybWFsMlByb3BlcnR5IC0gZGVmaW5lcyB0aGUgY29udHJvbCBwb2ludCBvZiB0aGUgY3ViaWMgY3VydmUsIHJlbGF0aXZlIHRvIHRoZSBwb3NpdGlvbjJcclxuICAgKiBAcGFyYW0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwb3NpdGlvbjFQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sIG5vcm1hbDFQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjJQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sIG5vcm1hbDJQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPzogV2lyZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBvcHRpb25pemU8V2lyZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGF0aE9wdGlvbnM+KCkoIHtcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG51bGwsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLm11bHRpbGluayA9IE11bHRpbGluay5tdWx0aWxpbmsoIFtcclxuICAgICAgcG9zaXRpb24xUHJvcGVydHksIG5vcm1hbDFQcm9wZXJ0eSwgcG9zaXRpb24yUHJvcGVydHksIG5vcm1hbDJQcm9wZXJ0eVxyXG4gICAgXSwgKCBwb3NpdGlvbjEsIG5vcm1hbDEsIHBvc2l0aW9uMiwgbm9ybWFsMiApID0+IHtcclxuICAgICAgdGhpcy5zaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgICAgLm1vdmVUb1BvaW50KCBwb3NpdGlvbjEgKVxyXG4gICAgICAgIC5jdWJpY0N1cnZlVG9Qb2ludChcclxuICAgICAgICAgIHBvc2l0aW9uMS5wbHVzKCBub3JtYWwxICksXHJcbiAgICAgICAgICBwb3NpdGlvbjIucGx1cyggbm9ybWFsMiApLFxyXG4gICAgICAgICAgcG9zaXRpb24yXHJcbiAgICAgICAgKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5tdWx0aWxpbmsuZGlzcG9zZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdXaXJlTm9kZScsIFdpcmVOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBNEIsNEJBQTRCO0FBRXhFLFNBQVNDLEtBQUssUUFBUSwwQkFBMEI7QUFDaEQsT0FBT0MsU0FBUyxNQUE0QixpQ0FBaUM7QUFDN0UsU0FBU0MsSUFBSSxRQUFxQiw2QkFBNkI7QUFDL0QsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQU0xQyxlQUFlLE1BQU1DLFFBQVEsU0FBU0YsSUFBSSxDQUFDO0VBSXpDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLGlCQUE2QyxFQUFFQyxlQUEyQyxFQUMxRkMsaUJBQTZDLEVBQUVDLGVBQTJDLEVBQzFGQyxPQUF5QixFQUFHO0lBRTlDQSxPQUFPLEdBQUdULFNBQVMsQ0FBNEMsQ0FBQyxDQUFFO01BQ2hFVSxNQUFNLEVBQUU7SUFDVixDQUFDLEVBQUVELE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRSxJQUFJLEVBQUVBLE9BQVEsQ0FBQztJQUV0QixJQUFJLENBQUNFLFNBQVMsR0FBR2IsU0FBUyxDQUFDYSxTQUFTLENBQUUsQ0FDcENOLGlCQUFpQixFQUFFQyxlQUFlLEVBQUVDLGlCQUFpQixFQUFFQyxlQUFlLENBQ3ZFLEVBQUUsQ0FBRUksU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxLQUFNO01BQy9DLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUlqQixLQUFLLENBQUMsQ0FBQyxDQUNyQmtCLFdBQVcsQ0FBRUwsU0FBVSxDQUFDLENBQ3hCTSxpQkFBaUIsQ0FDaEJOLFNBQVMsQ0FBQ08sSUFBSSxDQUFFTixPQUFRLENBQUMsRUFDekJDLFNBQVMsQ0FBQ0ssSUFBSSxDQUFFSixPQUFRLENBQUMsRUFDekJELFNBQ0YsQ0FBQztJQUNMLENBQUUsQ0FBQztFQUNMO0VBRWdCTSxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDVCxTQUFTLENBQUNTLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLEtBQUssQ0FBQ0EsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBbEIsV0FBVyxDQUFDbUIsUUFBUSxDQUFFLFVBQVUsRUFBRWxCLFFBQVMsQ0FBQyJ9