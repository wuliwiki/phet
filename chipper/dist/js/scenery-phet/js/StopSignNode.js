// Copyright 2017-2022, University of Colorado Boulder

/**
 * An octagonal, red stop sign node with a white internal border
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { Node, Path } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import sceneryPhet from './sceneryPhet.js';

// constants
const NUMBER_OF_SIDES = 8;
export default class StopSignNode extends Node {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      fillRadius: 23,
      innerStrokeWidth: 2,
      outerStrokeWidth: 1,
      fill: 'red',
      innerStroke: 'white',
      outerStroke: 'black',
      // NodeOptions
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'StopSignNode'
    }, providedOptions);
    options.children = [createStopSignPath(options.outerStroke, options.fillRadius + options.innerStrokeWidth + options.outerStrokeWidth), createStopSignPath(options.innerStroke, options.fillRadius + options.innerStrokeWidth), createStopSignPath(options.fill, options.fillRadius)];
    super(options);
  }
}
function createStopSignPath(fill, radius) {
  return new Path(Shape.regularPolygon(NUMBER_OF_SIDES, radius), {
    fill: fill,
    rotation: Math.PI / NUMBER_OF_SIDES,
    // To support centering when stacked in z-order
    centerX: 0,
    centerY: 0
  });
}
sceneryPhet.register('StopSignNode', StopSignNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIk5vZGUiLCJQYXRoIiwiVGFuZGVtIiwic2NlbmVyeVBoZXQiLCJOVU1CRVJfT0ZfU0lERVMiLCJTdG9wU2lnbk5vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJmaWxsUmFkaXVzIiwiaW5uZXJTdHJva2VXaWR0aCIsIm91dGVyU3Ryb2tlV2lkdGgiLCJmaWxsIiwiaW5uZXJTdHJva2UiLCJvdXRlclN0cm9rZSIsInRhbmRlbSIsIlJFUVVJUkVEIiwidGFuZGVtTmFtZVN1ZmZpeCIsImNoaWxkcmVuIiwiY3JlYXRlU3RvcFNpZ25QYXRoIiwicmFkaXVzIiwicmVndWxhclBvbHlnb24iLCJyb3RhdGlvbiIsIk1hdGgiLCJQSSIsImNlbnRlclgiLCJjZW50ZXJZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdG9wU2lnbk5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQW4gb2N0YWdvbmFsLCByZWQgc3RvcCBzaWduIG5vZGUgd2l0aCBhIHdoaXRlIGludGVybmFsIGJvcmRlclxyXG4gKlxyXG4gKiBAYXV0aG9yIERlbnplbGwgQmFybmV0dCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgVENvbG9yLCBOb2RlLCBOb2RlT3B0aW9ucywgUGF0aCB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBOVU1CRVJfT0ZfU0lERVMgPSA4O1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBmaWxsUmFkaXVzPzogbnVtYmVyO1xyXG4gIGlubmVyU3Ryb2tlV2lkdGg/OiBudW1iZXI7XHJcbiAgb3V0ZXJTdHJva2VXaWR0aD86IG51bWJlcjtcclxuICBmaWxsPzogVENvbG9yO1xyXG4gIGlubmVyU3Ryb2tlPzogVENvbG9yO1xyXG4gIG91dGVyU3Ryb2tlPzogVENvbG9yO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU3RvcFNpZ25Ob2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9wU2lnbk5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBTdG9wU2lnbk5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U3RvcFNpZ25Ob2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBmaWxsUmFkaXVzOiAyMyxcclxuICAgICAgaW5uZXJTdHJva2VXaWR0aDogMixcclxuICAgICAgb3V0ZXJTdHJva2VXaWR0aDogMSxcclxuICAgICAgZmlsbDogJ3JlZCcsXHJcbiAgICAgIGlubmVyU3Ryb2tlOiAnd2hpdGUnLFxyXG4gICAgICBvdXRlclN0cm9rZTogJ2JsYWNrJyxcclxuXHJcbiAgICAgIC8vIE5vZGVPcHRpb25zXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxyXG4gICAgICB0YW5kZW1OYW1lU3VmZml4OiAnU3RvcFNpZ25Ob2RlJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFtcclxuICAgICAgY3JlYXRlU3RvcFNpZ25QYXRoKCBvcHRpb25zLm91dGVyU3Ryb2tlLCBvcHRpb25zLmZpbGxSYWRpdXMgKyBvcHRpb25zLmlubmVyU3Ryb2tlV2lkdGggKyBvcHRpb25zLm91dGVyU3Ryb2tlV2lkdGggKSxcclxuICAgICAgY3JlYXRlU3RvcFNpZ25QYXRoKCBvcHRpb25zLmlubmVyU3Ryb2tlLCBvcHRpb25zLmZpbGxSYWRpdXMgKyBvcHRpb25zLmlubmVyU3Ryb2tlV2lkdGggKSxcclxuICAgICAgY3JlYXRlU3RvcFNpZ25QYXRoKCBvcHRpb25zLmZpbGwsIG9wdGlvbnMuZmlsbFJhZGl1cyApXHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTdG9wU2lnblBhdGgoIGZpbGw6IFRDb2xvciwgcmFkaXVzOiBudW1iZXIgKTogUGF0aCB7XHJcbiAgcmV0dXJuIG5ldyBQYXRoKCBTaGFwZS5yZWd1bGFyUG9seWdvbiggTlVNQkVSX09GX1NJREVTLCByYWRpdXMgKSwge1xyXG4gICAgZmlsbDogZmlsbCxcclxuICAgIHJvdGF0aW9uOiBNYXRoLlBJIC8gTlVNQkVSX09GX1NJREVTLFxyXG5cclxuICAgIC8vIFRvIHN1cHBvcnQgY2VudGVyaW5nIHdoZW4gc3RhY2tlZCBpbiB6LW9yZGVyXHJcbiAgICBjZW50ZXJYOiAwLFxyXG4gICAgY2VudGVyWTogMFxyXG4gIH0gKTtcclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdTdG9wU2lnbk5vZGUnLCBTdG9wU2lnbk5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsMEJBQTBCO0FBRWhELE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsU0FBaUJDLElBQUksRUFBZUMsSUFBSSxRQUFRLDZCQUE2QjtBQUM3RSxPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7O0FBRTFDO0FBQ0EsTUFBTUMsZUFBZSxHQUFHLENBQUM7QUFhekIsZUFBZSxNQUFNQyxZQUFZLFNBQVNMLElBQUksQ0FBQztFQUV0Q00sV0FBV0EsQ0FBRUMsZUFBcUMsRUFBRztJQUUxRCxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBZ0QsQ0FBQyxDQUFFO01BRTFFO01BQ0FVLFVBQVUsRUFBRSxFQUFFO01BQ2RDLGdCQUFnQixFQUFFLENBQUM7TUFDbkJDLGdCQUFnQixFQUFFLENBQUM7TUFDbkJDLElBQUksRUFBRSxLQUFLO01BQ1hDLFdBQVcsRUFBRSxPQUFPO01BQ3BCQyxXQUFXLEVBQUUsT0FBTztNQUVwQjtNQUNBQyxNQUFNLEVBQUViLE1BQU0sQ0FBQ2MsUUFBUTtNQUN2QkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQyxFQUFFVixlQUFnQixDQUFDO0lBRXBCQyxPQUFPLENBQUNVLFFBQVEsR0FBRyxDQUNqQkMsa0JBQWtCLENBQUVYLE9BQU8sQ0FBQ00sV0FBVyxFQUFFTixPQUFPLENBQUNDLFVBQVUsR0FBR0QsT0FBTyxDQUFDRSxnQkFBZ0IsR0FBR0YsT0FBTyxDQUFDRyxnQkFBaUIsQ0FBQyxFQUNuSFEsa0JBQWtCLENBQUVYLE9BQU8sQ0FBQ0ssV0FBVyxFQUFFTCxPQUFPLENBQUNDLFVBQVUsR0FBR0QsT0FBTyxDQUFDRSxnQkFBaUIsQ0FBQyxFQUN4RlMsa0JBQWtCLENBQUVYLE9BQU8sQ0FBQ0ksSUFBSSxFQUFFSixPQUFPLENBQUNDLFVBQVcsQ0FBQyxDQUN2RDtJQUVELEtBQUssQ0FBRUQsT0FBUSxDQUFDO0VBQ2xCO0FBQ0Y7QUFFQSxTQUFTVyxrQkFBa0JBLENBQUVQLElBQVksRUFBRVEsTUFBYyxFQUFTO0VBQ2hFLE9BQU8sSUFBSW5CLElBQUksQ0FBRUgsS0FBSyxDQUFDdUIsY0FBYyxDQUFFakIsZUFBZSxFQUFFZ0IsTUFBTyxDQUFDLEVBQUU7SUFDaEVSLElBQUksRUFBRUEsSUFBSTtJQUNWVSxRQUFRLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxHQUFHcEIsZUFBZTtJQUVuQztJQUNBcUIsT0FBTyxFQUFFLENBQUM7SUFDVkMsT0FBTyxFQUFFO0VBQ1gsQ0FBRSxDQUFDO0FBQ0w7QUFFQXZCLFdBQVcsQ0FBQ3dCLFFBQVEsQ0FBRSxjQUFjLEVBQUV0QixZQUFhLENBQUMifQ==