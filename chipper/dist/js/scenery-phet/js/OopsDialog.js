// Copyright 2019-2022, University of Colorado Boulder

/**
 * OopsDialog is displayed when some limitation of the simulation is encountered.
 * So named because the messages typically begin with 'Oops!', so that's how people referred to it.
 * See https://github.com/phetsims/equality-explorer/issues/48
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../phet-core/js/optionize.js';
import { HBox, Image, RichText } from '../../scenery/js/imports.js';
import Dialog from '../../sun/js/Dialog.js';
import Tandem from '../../tandem/js/Tandem.js';
import IOType from '../../tandem/js/types/IOType.js';
import phetGirlWaggingFinger_png from '../images/phetGirlWaggingFinger_png.js';
import PhetFont from './PhetFont.js';
import sceneryPhet from './sceneryPhet.js';
export default class OopsDialog extends Dialog {
  /**
   * @param messageString - supports RichText formatting
   * @param [providedOptions]
   */
  constructor(messageString, providedOptions) {
    const options = optionize()({
      // DialogOptions
      topMargin: 20,
      bottomMargin: 20,
      // phet-io
      tandem: Tandem.OPTIONAL,
      phetioType: OopsDialog.OopsDialogIO
    }, providedOptions);
    const text = new RichText(messageString, optionize()({
      font: new PhetFont(20),
      maxWidth: 600,
      maxHeight: 400,
      tandem: options.tandem.createTandem('text')
    }, options.richTextOptions));
    const iconNode = options.iconNode || new Image(phetGirlWaggingFinger_png, {
      maxHeight: 132 // determined empirically
    });

    const content = new HBox({
      spacing: 20,
      children: [text, iconNode]
    });
    super(content, options);
    this.disposeOopsDialog = () => {
      text.dispose();
    };
  }
  dispose() {
    this.disposeOopsDialog();
    super.dispose();
  }
  static OopsDialogIO = new IOType('OopsDialogIO', {
    valueType: OopsDialog,
    supertype: Dialog.DialogIO
  });
}
sceneryPhet.register('OopsDialog', OopsDialog);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJIQm94IiwiSW1hZ2UiLCJSaWNoVGV4dCIsIkRpYWxvZyIsIlRhbmRlbSIsIklPVHlwZSIsInBoZXRHaXJsV2FnZ2luZ0Zpbmdlcl9wbmciLCJQaGV0Rm9udCIsInNjZW5lcnlQaGV0IiwiT29wc0RpYWxvZyIsImNvbnN0cnVjdG9yIiwibWVzc2FnZVN0cmluZyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ0b3BNYXJnaW4iLCJib3R0b21NYXJnaW4iLCJ0YW5kZW0iLCJPUFRJT05BTCIsInBoZXRpb1R5cGUiLCJPb3BzRGlhbG9nSU8iLCJ0ZXh0IiwiZm9udCIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwiY3JlYXRlVGFuZGVtIiwicmljaFRleHRPcHRpb25zIiwiaWNvbk5vZGUiLCJjb250ZW50Iiwic3BhY2luZyIsImNoaWxkcmVuIiwiZGlzcG9zZU9vcHNEaWFsb2ciLCJkaXNwb3NlIiwidmFsdWVUeXBlIiwic3VwZXJ0eXBlIiwiRGlhbG9nSU8iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk9vcHNEaWFsb2cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT29wc0RpYWxvZyBpcyBkaXNwbGF5ZWQgd2hlbiBzb21lIGxpbWl0YXRpb24gb2YgdGhlIHNpbXVsYXRpb24gaXMgZW5jb3VudGVyZWQuXHJcbiAqIFNvIG5hbWVkIGJlY2F1c2UgdGhlIG1lc3NhZ2VzIHR5cGljYWxseSBiZWdpbiB3aXRoICdPb3BzIScsIHNvIHRoYXQncyBob3cgcGVvcGxlIHJlZmVycmVkIHRvIGl0LlxyXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2VxdWFsaXR5LWV4cGxvcmVyL2lzc3Vlcy80OFxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHsgSEJveCwgSW1hZ2UsIE5vZGUsIFJpY2hUZXh0LCBSaWNoVGV4dE9wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgRGlhbG9nLCB7IERpYWxvZ09wdGlvbnMgfSBmcm9tICcuLi8uLi9zdW4vanMvRGlhbG9nLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IHBoZXRHaXJsV2FnZ2luZ0Zpbmdlcl9wbmcgZnJvbSAnLi4vaW1hZ2VzL3BoZXRHaXJsV2FnZ2luZ0Zpbmdlcl9wbmcuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIE9wdGlvbmFsIGljb24gdGhhdCB3aWxsIGJlIHBsYWNlZCB0byB0aGUgcmlnaHQgb2YgdGhlIGltYWdlLlxyXG4gIC8vIElmIG5vdCBwcm92aWRlZCwgdGhlbiBhIFBoRVQgR2lybCBpbWFnZSBpcyB1c2VkLlxyXG4gIC8vIElmIHByb3ZpZGVkLCB0aGUgY2FsbGVyIGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgYXNwZWN0cyBvZiB0aGUgaWNvbiwgaW5jbHVkaW5nIHNjYWxlLlxyXG4gIGljb25Ob2RlPzogTm9kZTtcclxuXHJcbiAgLy8gUGFzc2VkIHRvIFJpY2hUZXh0IG5vZGUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlU3RyaW5nXHJcbiAgcmljaFRleHRPcHRpb25zPzogUmljaFRleHRPcHRpb25zO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgT29wc0RpYWxvZ09wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIERpYWxvZ09wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPb3BzRGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlT29wc0RpYWxvZzogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG1lc3NhZ2VTdHJpbmcgLSBzdXBwb3J0cyBSaWNoVGV4dCBmb3JtYXR0aW5nXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtZXNzYWdlU3RyaW5nOiBzdHJpbmcgfCBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCBwcm92aWRlZE9wdGlvbnM/OiBPb3BzRGlhbG9nT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE9vcHNEaWFsb2dPcHRpb25zLCBTdHJpY3RPbWl0PFNlbGZPcHRpb25zLCAnaWNvbk5vZGUnIHwgJ3JpY2hUZXh0T3B0aW9ucyc+LCBEaWFsb2dPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBEaWFsb2dPcHRpb25zXHJcbiAgICAgIHRvcE1hcmdpbjogMjAsXHJcbiAgICAgIGJvdHRvbU1hcmdpbjogMjAsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVElPTkFMLFxyXG4gICAgICBwaGV0aW9UeXBlOiBPb3BzRGlhbG9nLk9vcHNEaWFsb2dJT1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgdGV4dCA9IG5ldyBSaWNoVGV4dCggbWVzc2FnZVN0cmluZywgb3B0aW9uaXplPFJpY2hUZXh0T3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucywgUmljaFRleHRPcHRpb25zPigpKCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSxcclxuICAgICAgbWF4V2lkdGg6IDYwMCxcclxuICAgICAgbWF4SGVpZ2h0OiA0MDAsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndGV4dCcgKVxyXG4gICAgfSwgb3B0aW9ucy5yaWNoVGV4dE9wdGlvbnMgKSApO1xyXG5cclxuICAgIGNvbnN0IGljb25Ob2RlID0gb3B0aW9ucy5pY29uTm9kZSB8fCBuZXcgSW1hZ2UoIHBoZXRHaXJsV2FnZ2luZ0Zpbmdlcl9wbmcsIHtcclxuICAgICAgbWF4SGVpZ2h0OiAxMzIgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiAyMCxcclxuICAgICAgY2hpbGRyZW46IFsgdGV4dCwgaWNvbk5vZGUgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBjb250ZW50LCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlT29wc0RpYWxvZyA9ICgpID0+IHtcclxuICAgICAgdGV4dC5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VPb3BzRGlhbG9nKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE9vcHNEaWFsb2dJTyA9IG5ldyBJT1R5cGUoICdPb3BzRGlhbG9nSU8nLCB7XHJcbiAgICB2YWx1ZVR5cGU6IE9vcHNEaWFsb2csXHJcbiAgICBzdXBlcnR5cGU6IERpYWxvZy5EaWFsb2dJT1xyXG4gIH0gKTtcclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdPb3BzRGlhbG9nJywgT29wc0RpYWxvZyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxNQUE0QixpQ0FBaUM7QUFFN0UsU0FBU0MsSUFBSSxFQUFFQyxLQUFLLEVBQVFDLFFBQVEsUUFBeUIsNkJBQTZCO0FBQzFGLE9BQU9DLE1BQU0sTUFBeUIsd0JBQXdCO0FBQzlELE9BQU9DLE1BQU0sTUFBTSwyQkFBMkI7QUFDOUMsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyx5QkFBeUIsTUFBTSx3Q0FBd0M7QUFDOUUsT0FBT0MsUUFBUSxNQUFNLGVBQWU7QUFDcEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQWUxQyxlQUFlLE1BQU1DLFVBQVUsU0FBU04sTUFBTSxDQUFDO0VBSTdDO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NPLFdBQVdBLENBQUVDLGFBQWlELEVBQUVDLGVBQW1DLEVBQUc7SUFFM0csTUFBTUMsT0FBTyxHQUFHZCxTQUFTLENBQTRGLENBQUMsQ0FBRTtNQUV0SDtNQUNBZSxTQUFTLEVBQUUsRUFBRTtNQUNiQyxZQUFZLEVBQUUsRUFBRTtNQUVoQjtNQUNBQyxNQUFNLEVBQUVaLE1BQU0sQ0FBQ2EsUUFBUTtNQUN2QkMsVUFBVSxFQUFFVCxVQUFVLENBQUNVO0lBQ3pCLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQztJQUVwQixNQUFNUSxJQUFJLEdBQUcsSUFBSWxCLFFBQVEsQ0FBRVMsYUFBYSxFQUFFWixTQUFTLENBQXFELENBQUMsQ0FBRTtNQUN6R3NCLElBQUksRUFBRSxJQUFJZCxRQUFRLENBQUUsRUFBRyxDQUFDO01BQ3hCZSxRQUFRLEVBQUUsR0FBRztNQUNiQyxTQUFTLEVBQUUsR0FBRztNQUNkUCxNQUFNLEVBQUVILE9BQU8sQ0FBQ0csTUFBTSxDQUFDUSxZQUFZLENBQUUsTUFBTztJQUM5QyxDQUFDLEVBQUVYLE9BQU8sQ0FBQ1ksZUFBZ0IsQ0FBRSxDQUFDO0lBRTlCLE1BQU1DLFFBQVEsR0FBR2IsT0FBTyxDQUFDYSxRQUFRLElBQUksSUFBSXpCLEtBQUssQ0FBRUsseUJBQXlCLEVBQUU7TUFDekVpQixTQUFTLEVBQUUsR0FBRyxDQUFDO0lBQ2pCLENBQUUsQ0FBQzs7SUFFSCxNQUFNSSxPQUFPLEdBQUcsSUFBSTNCLElBQUksQ0FBRTtNQUN4QjRCLE9BQU8sRUFBRSxFQUFFO01BQ1hDLFFBQVEsRUFBRSxDQUFFVCxJQUFJLEVBQUVNLFFBQVE7SUFDNUIsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFQyxPQUFPLEVBQUVkLE9BQVEsQ0FBQztJQUV6QixJQUFJLENBQUNpQixpQkFBaUIsR0FBRyxNQUFNO01BQzdCVixJQUFJLENBQUNXLE9BQU8sQ0FBQyxDQUFDO0lBQ2hCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0QsaUJBQWlCLENBQUMsQ0FBQztJQUN4QixLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0VBRUEsT0FBdUJaLFlBQVksR0FBRyxJQUFJZCxNQUFNLENBQUUsY0FBYyxFQUFFO0lBQ2hFMkIsU0FBUyxFQUFFdkIsVUFBVTtJQUNyQndCLFNBQVMsRUFBRTlCLE1BQU0sQ0FBQytCO0VBQ3BCLENBQUUsQ0FBQztBQUNMO0FBRUExQixXQUFXLENBQUMyQixRQUFRLENBQUUsWUFBWSxFQUFFMUIsVUFBVyxDQUFDIn0=