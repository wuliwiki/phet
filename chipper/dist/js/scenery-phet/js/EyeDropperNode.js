// Copyright 2014-2022, University of Colorado Boulder

/**
 * Eye dropper, with a button for dispensing whatever is in the dropper.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../axon/js/Property.js';
import { Shape } from '../../kite/js/imports.js';
import InstanceRegistry from '../../phet-core/js/documentation/InstanceRegistry.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import { Circle, Image, Node, Path } from '../../scenery/js/imports.js';
import RoundMomentaryButton from '../../sun/js/buttons/RoundMomentaryButton.js';
import Tandem from '../../tandem/js/Tandem.js';
import eyeDropperBackground_png from '../images/eyeDropperBackground_png.js';
import eyeDropperForeground_png from '../images/eyeDropperForeground_png.js';
import sceneryPhet from './sceneryPhet.js';
import DerivedProperty from '../../axon/js/DerivedProperty.js';

// constants
const DEBUG_ORIGIN = false; // if true, put a red dot at the dropper's origin (bottom center)
const BUTTON_CENTER_Y_OFFSET = 32; // y-offset of button's center in dropper image file

export default class EyeDropperNode extends Node {
  // is the dropper dispensing?

  // is the dropper empty of fluid?

  // for clients who want to hide the button

  // fluid in the dropper

  // You'll need these if you want to create fluid coming out of the tip.
  static TIP_WIDTH = 15;
  static TIP_HEIGHT = 4;
  static GLASS_WIDTH = 46;

  // You'll need these if you want to put a label on the glass. Values are relative to bottom center.
  static GLASS_MIN_Y = -124;
  static GLASS_MAX_Y = -18;
  constructor(provideOptions) {
    const options = optionize()({
      // SelfOptions
      isDispensingProperty: new Property(false),
      isEmptyProperty: new Property(false),
      fluidColor: 'yellow',
      buttonOptions: {
        touchAreaDilation: 15,
        baseColor: 'red',
        radius: 18,
        listenerOptions: {
          // We want to be able to drag the dropper WHILE dispensing, see https://github.com/phetsims/ph-scale/issues/86
          attach: false
        }
      },
      // NodeOptions
      cursor: 'pointer',
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'DropperNode'
    }, provideOptions);
    super();
    this.isDispensingProperty = options.isDispensingProperty;
    this.isEmptyProperty = options.isEmptyProperty;

    // fluid fills the glass portion of the dropper, shape is specific to the dropper image file
    const fluidShape = new Shape().moveTo(-EyeDropperNode.TIP_WIDTH / 2, 0).lineTo(-EyeDropperNode.TIP_WIDTH / 2, -EyeDropperNode.TIP_HEIGHT).lineTo(-EyeDropperNode.GLASS_WIDTH / 2, EyeDropperNode.GLASS_MAX_Y).lineTo(-EyeDropperNode.GLASS_WIDTH / 2, EyeDropperNode.GLASS_MIN_Y).lineTo(EyeDropperNode.GLASS_WIDTH / 2, EyeDropperNode.GLASS_MIN_Y).lineTo(EyeDropperNode.GLASS_WIDTH / 2, EyeDropperNode.GLASS_MAX_Y).lineTo(EyeDropperNode.TIP_WIDTH / 2, -EyeDropperNode.TIP_HEIGHT).lineTo(EyeDropperNode.TIP_WIDTH / 2, 0).close();
    this.fluidNode = new Path(fluidShape, {
      fill: options.fluidColor,
      visibleProperty: DerivedProperty.not(this.isEmptyProperty) // visible when not empty
    });

    // body of the dropper, origin at bottom center
    const foreground = new Image(eyeDropperForeground_png);
    const background = new Image(eyeDropperBackground_png, {
      visibleProperty: this.isEmptyProperty // visible when empty
    });

    const bodyNode = new Node({
      children: [background, foreground]
    });
    bodyNode.x = -bodyNode.width / 2;
    bodyNode.y = -bodyNode.height;

    // button, centered in the dropper's bulb
    const button = new RoundMomentaryButton(this.isDispensingProperty, false, true, combineOptions({
      centerX: bodyNode.centerX,
      centerY: bodyNode.top + BUTTON_CENTER_Y_OFFSET,
      tandem: options.tandem.createTandem('button')
    }, options.buttonOptions));
    options.children = [this.fluidNode, bodyNode, button];

    // add a red dot at the origin
    if (DEBUG_ORIGIN) {
      options.children.push(new Circle({
        radius: 3,
        fill: 'red'
      }));
    }
    this.mutate(options);
    this.disposeEyeDropperNode = () => {
      button.dispose();
    };
    this.button = button;

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'EyeDropperNode', this);
  }
  dispose() {
    this.disposeEyeDropperNode();
    super.dispose();
  }

  /**
   * Gets the color of the fluid in the dropper.
   */
  getFluidColor() {
    return this.fluidNode.fill;
  }

  /**
   * Sets the color of the fluid in the dropper.
   */
  setFluidColor(color) {
    this.fluidNode.fill = color;
  }
  get fluidColor() {
    return this.getFluidColor();
  }
  set fluidColor(value) {
    this.setFluidColor(value);
  }
}
sceneryPhet.register('EyeDropperNode', EyeDropperNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,