// Copyright 2022, University of Colorado Boulder

/**
 * When enabled, shows a grid across the play area that helps the user to make quantitative comparisons
 * between distances.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 * @author AgustÃ­n Vallejo
 */

import sceneryPhet from './sceneryPhet.js';
import { Shape } from '../../kite/js/imports.js';
import { Path } from '../../scenery/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
export default class GridNode extends Path {
  /**
   * @param transformProperty
   * @param spacing - spacing between grid lines
   * @param center - center of the grid in model coordinates
   * @param numGridLines - number grid lines on each side of the center
   * @param [providedOptions]
   */
  constructor(transformProperty, spacing, center, numGridLines, providedOptions) {
    const options = optionize()({
      stroke: 'gray'
    }, providedOptions);
    super(null, options);
    transformProperty.link(transform => {
      const shape = new Shape();
      const x1 = -numGridLines * spacing + center.x;
      const x2 = numGridLines * spacing + center.x;
      const y1 = -numGridLines * spacing + center.y;
      const y2 = numGridLines * spacing + center.y;
      for (let i = -numGridLines; i <= numGridLines; i++) {
        const x = i * spacing + center.x;
        const y = i * spacing + center.y;
        shape.moveTo(x1, y).lineTo(x2, y); // horizontal lines
        shape.moveTo(x, y1).lineTo(x, y2); // vertical lines
      }

      this.shape = transform.modelToViewShape(shape);
    });
  }
}
sceneryPhet.register('GridNode', GridNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzY2VuZXJ5UGhldCIsIlNoYXBlIiwiUGF0aCIsIm9wdGlvbml6ZSIsIkdyaWROb2RlIiwiY29uc3RydWN0b3IiLCJ0cmFuc2Zvcm1Qcm9wZXJ0eSIsInNwYWNpbmciLCJjZW50ZXIiLCJudW1HcmlkTGluZXMiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic3Ryb2tlIiwibGluayIsInRyYW5zZm9ybSIsInNoYXBlIiwieDEiLCJ4IiwieDIiLCJ5MSIsInkiLCJ5MiIsImkiLCJtb3ZlVG8iLCJsaW5lVG8iLCJtb2RlbFRvVmlld1NoYXBlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHcmlkTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV2hlbiBlbmFibGVkLCBzaG93cyBhIGdyaWQgYWNyb3NzIHRoZSBwbGF5IGFyZWEgdGhhdCBoZWxwcyB0aGUgdXNlciB0byBtYWtlIHF1YW50aXRhdGl2ZSBjb21wYXJpc29uc1xyXG4gKiBiZXR3ZWVuIGRpc3RhbmNlcy5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBBYXJvbiBEYXZpcyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBBZ3VzdMOtbiBWYWxsZWpvXHJcbiAqL1xyXG5cclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IFBhdGgsIFBhdGhPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9SZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBHcmlkTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBhdGhPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JpZE5vZGUgZXh0ZW5kcyBQYXRoIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHRyYW5zZm9ybVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHNwYWNpbmcgLSBzcGFjaW5nIGJldHdlZW4gZ3JpZCBsaW5lc1xyXG4gICAqIEBwYXJhbSBjZW50ZXIgLSBjZW50ZXIgb2YgdGhlIGdyaWQgaW4gbW9kZWwgY29vcmRpbmF0ZXNcclxuICAgKiBAcGFyYW0gbnVtR3JpZExpbmVzIC0gbnVtYmVyIGdyaWQgbGluZXMgb24gZWFjaCBzaWRlIG9mIHRoZSBjZW50ZXJcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRyYW5zZm9ybVByb3BlcnR5OiBSZWFkT25seVByb3BlcnR5PE1vZGVsVmlld1RyYW5zZm9ybTI+LCBzcGFjaW5nOiBudW1iZXIsIGNlbnRlcjogVmVjdG9yMiwgbnVtR3JpZExpbmVzOiBudW1iZXIsIHByb3ZpZGVkT3B0aW9ucz86IEdyaWROb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEdyaWROb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhdGhPcHRpb25zPigpKCB7XHJcbiAgICAgIHN0cm9rZTogJ2dyYXknXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggbnVsbCwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRyYW5zZm9ybVByb3BlcnR5LmxpbmsoICggdHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yICkgPT4ge1xyXG4gICAgICBjb25zdCBzaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG5cclxuICAgICAgY29uc3QgeDEgPSAtbnVtR3JpZExpbmVzICogc3BhY2luZyArIGNlbnRlci54O1xyXG4gICAgICBjb25zdCB4MiA9IG51bUdyaWRMaW5lcyAqIHNwYWNpbmcgKyBjZW50ZXIueDtcclxuICAgICAgY29uc3QgeTEgPSAtbnVtR3JpZExpbmVzICogc3BhY2luZyArIGNlbnRlci55O1xyXG4gICAgICBjb25zdCB5MiA9IG51bUdyaWRMaW5lcyAqIHNwYWNpbmcgKyBjZW50ZXIueTtcclxuXHJcbiAgICAgIGZvciAoIGxldCBpID0gLW51bUdyaWRMaW5lczsgaSA8PSBudW1HcmlkTGluZXM7IGkrKyApIHtcclxuICAgICAgICBjb25zdCB4ID0gaSAqIHNwYWNpbmcgKyBjZW50ZXIueDtcclxuICAgICAgICBjb25zdCB5ID0gaSAqIHNwYWNpbmcgKyBjZW50ZXIueTtcclxuICAgICAgICBzaGFwZS5tb3ZlVG8oIHgxLCB5ICkubGluZVRvKCB4MiwgeSApOyAvLyBob3Jpem9udGFsIGxpbmVzXHJcbiAgICAgICAgc2hhcGUubW92ZVRvKCB4LCB5MSApLmxpbmVUbyggeCwgeTIgKTsgLy8gdmVydGljYWwgbGluZXNcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zaGFwZSA9IHRyYW5zZm9ybS5tb2RlbFRvVmlld1NoYXBlKCBzaGFwZSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdHcmlkTm9kZScsIEdyaWROb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsU0FBU0MsS0FBSyxRQUFRLDBCQUEwQjtBQUNoRCxTQUFTQyxJQUFJLFFBQXFCLDZCQUE2QjtBQUkvRCxPQUFPQyxTQUFTLE1BQTRCLGlDQUFpQztBQU03RSxlQUFlLE1BQU1DLFFBQVEsU0FBU0YsSUFBSSxDQUFDO0VBRXpDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLGlCQUF3RCxFQUFFQyxPQUFlLEVBQUVDLE1BQWUsRUFBRUMsWUFBb0IsRUFBRUMsZUFBaUMsRUFBRztJQUV4SyxNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBNEMsQ0FBQyxDQUFFO01BQ3RFUyxNQUFNLEVBQUU7SUFDVixDQUFDLEVBQUVGLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFLElBQUksRUFBRUMsT0FBUSxDQUFDO0lBRXRCTCxpQkFBaUIsQ0FBQ08sSUFBSSxDQUFJQyxTQUE4QixJQUFNO01BQzVELE1BQU1DLEtBQUssR0FBRyxJQUFJZCxLQUFLLENBQUMsQ0FBQztNQUV6QixNQUFNZSxFQUFFLEdBQUcsQ0FBQ1AsWUFBWSxHQUFHRixPQUFPLEdBQUdDLE1BQU0sQ0FBQ1MsQ0FBQztNQUM3QyxNQUFNQyxFQUFFLEdBQUdULFlBQVksR0FBR0YsT0FBTyxHQUFHQyxNQUFNLENBQUNTLENBQUM7TUFDNUMsTUFBTUUsRUFBRSxHQUFHLENBQUNWLFlBQVksR0FBR0YsT0FBTyxHQUFHQyxNQUFNLENBQUNZLENBQUM7TUFDN0MsTUFBTUMsRUFBRSxHQUFHWixZQUFZLEdBQUdGLE9BQU8sR0FBR0MsTUFBTSxDQUFDWSxDQUFDO01BRTVDLEtBQU0sSUFBSUUsQ0FBQyxHQUFHLENBQUNiLFlBQVksRUFBRWEsQ0FBQyxJQUFJYixZQUFZLEVBQUVhLENBQUMsRUFBRSxFQUFHO1FBQ3BELE1BQU1MLENBQUMsR0FBR0ssQ0FBQyxHQUFHZixPQUFPLEdBQUdDLE1BQU0sQ0FBQ1MsQ0FBQztRQUNoQyxNQUFNRyxDQUFDLEdBQUdFLENBQUMsR0FBR2YsT0FBTyxHQUFHQyxNQUFNLENBQUNZLENBQUM7UUFDaENMLEtBQUssQ0FBQ1EsTUFBTSxDQUFFUCxFQUFFLEVBQUVJLENBQUUsQ0FBQyxDQUFDSSxNQUFNLENBQUVOLEVBQUUsRUFBRUUsQ0FBRSxDQUFDLENBQUMsQ0FBQztRQUN2Q0wsS0FBSyxDQUFDUSxNQUFNLENBQUVOLENBQUMsRUFBRUUsRUFBRyxDQUFDLENBQUNLLE1BQU0sQ0FBRVAsQ0FBQyxFQUFFSSxFQUFHLENBQUMsQ0FBQyxDQUFDO01BQ3pDOztNQUVBLElBQUksQ0FBQ04sS0FBSyxHQUFHRCxTQUFTLENBQUNXLGdCQUFnQixDQUFFVixLQUFNLENBQUM7SUFDbEQsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBZixXQUFXLENBQUMwQixRQUFRLENBQUUsVUFBVSxFQUFFdEIsUUFBUyxDQUFDIn0=