// Copyright 2022, University of Colorado Boulder

/**
 * Demo for KeyNode and its subtypes
 */

import ArrowKeyNode from '../../keyboard/ArrowKeyNode.js';
import LetterKeyNode from '../../keyboard/LetterKeyNode.js';
import TextKeyNode from '../../keyboard/TextKeyNode.js';
import { HBox, VBox } from '../../../../scenery/js/imports.js';
export default function demoKeyNode(layoutBounds) {
  // example letter keys, portion of a typical keyboard
  const topRowKeyStrings = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '[', ']', '\\'];
  const middleRowKeyStrings = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '"'];
  const bottomRowKeyStrings = ['Z', 'X', 'C', 'V', 'B', 'N', 'M', '\'', '.', '/'];

  // arrays that hold key nodes for each row of a keyboard - each row starts with an additional multi-character key
  const topKeyNodes = [TextKeyNode.tab()];
  const middleKeyNodes = [TextKeyNode.capsLock()];
  const bottomKeyNodes = [TextKeyNode.shift()];
  let i;
  for (i = 0; i < topRowKeyStrings.length; i++) {
    topKeyNodes.push(new LetterKeyNode(topRowKeyStrings[i]));
  }
  for (i = 0; i < middleRowKeyStrings.length; i++) {
    middleKeyNodes.push(new LetterKeyNode(middleRowKeyStrings[i]));
  }
  for (i = 0; i < bottomRowKeyStrings.length; i++) {
    bottomKeyNodes.push(new LetterKeyNode(bottomRowKeyStrings[i]));
  }
  const topArrowKeyNode = new ArrowKeyNode('up');
  const bottomArrowKeyNodes = [new ArrowKeyNode('left'), new ArrowKeyNode('down'), new ArrowKeyNode('right')];
  const bottomArrowKeyBox = new HBox({
    children: bottomArrowKeyNodes,
    spacing: 2
  });

  // add the enter and shift keys to the middle and bottom rows, shift key has extra width for alignment
  middleKeyNodes.push(TextKeyNode.enter());
  bottomKeyNodes.push(TextKeyNode.shift({
    xAlign: 'right',
    xMargin: 4,
    minKeyWidth: 70
  }));
  const topHBox = new HBox({
    children: topKeyNodes,
    spacing: 5
  });
  const middleHBox = new HBox({
    children: middleKeyNodes,
    spacing: 5
  });
  const bottomHBox = new HBox({
    children: bottomKeyNodes,
    spacing: 5
  });
  const arrowKeysVBox = new VBox({
    children: [topArrowKeyNode, bottomArrowKeyBox],
    spacing: 1
  });
  return new VBox({
    children: [topHBox, middleHBox, bottomHBox, arrowKeysVBox],
    center: layoutBounds.center,
    align: 'right',
    spacing: 3,
    scale: 1.5
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcnJvd0tleU5vZGUiLCJMZXR0ZXJLZXlOb2RlIiwiVGV4dEtleU5vZGUiLCJIQm94IiwiVkJveCIsImRlbW9LZXlOb2RlIiwibGF5b3V0Qm91bmRzIiwidG9wUm93S2V5U3RyaW5ncyIsIm1pZGRsZVJvd0tleVN0cmluZ3MiLCJib3R0b21Sb3dLZXlTdHJpbmdzIiwidG9wS2V5Tm9kZXMiLCJ0YWIiLCJtaWRkbGVLZXlOb2RlcyIsImNhcHNMb2NrIiwiYm90dG9tS2V5Tm9kZXMiLCJzaGlmdCIsImkiLCJsZW5ndGgiLCJwdXNoIiwidG9wQXJyb3dLZXlOb2RlIiwiYm90dG9tQXJyb3dLZXlOb2RlcyIsImJvdHRvbUFycm93S2V5Qm94IiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiZW50ZXIiLCJ4QWxpZ24iLCJ4TWFyZ2luIiwibWluS2V5V2lkdGgiLCJ0b3BIQm94IiwibWlkZGxlSEJveCIsImJvdHRvbUhCb3giLCJhcnJvd0tleXNWQm94IiwiY2VudGVyIiwiYWxpZ24iLCJzY2FsZSJdLCJzb3VyY2VzIjpbImRlbW9LZXlOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEZW1vIGZvciBLZXlOb2RlIGFuZCBpdHMgc3VidHlwZXNcclxuICovXHJcblxyXG5pbXBvcnQgQXJyb3dLZXlOb2RlIGZyb20gJy4uLy4uL2tleWJvYXJkL0Fycm93S2V5Tm9kZS5qcyc7XHJcbmltcG9ydCBMZXR0ZXJLZXlOb2RlIGZyb20gJy4uLy4uL2tleWJvYXJkL0xldHRlcktleU5vZGUuanMnO1xyXG5pbXBvcnQgVGV4dEtleU5vZGUgZnJvbSAnLi4vLi4va2V5Ym9hcmQvVGV4dEtleU5vZGUuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVtb0tleU5vZGUoIGxheW91dEJvdW5kczogQm91bmRzMiApOiBOb2RlIHtcclxuXHJcbiAgLy8gZXhhbXBsZSBsZXR0ZXIga2V5cywgcG9ydGlvbiBvZiBhIHR5cGljYWwga2V5Ym9hcmRcclxuICBjb25zdCB0b3BSb3dLZXlTdHJpbmdzID0gWyAnUScsICdXJywgJ0UnLCAnUicsICdUJywgJ1knLCAnVScsICdJJywgJ08nLCAnUCcsICdbJywgJ10nLCAnXFxcXCcgXTtcclxuICBjb25zdCBtaWRkbGVSb3dLZXlTdHJpbmdzID0gWyAnQScsICdTJywgJ0QnLCAnRicsICdHJywgJ0gnLCAnSicsICdLJywgJ0wnLCAnOicsICdcIicgXTtcclxuICBjb25zdCBib3R0b21Sb3dLZXlTdHJpbmdzID0gWyAnWicsICdYJywgJ0MnLCAnVicsICdCJywgJ04nLCAnTScsICdcXCcnLCAnLicsICcvJyBdO1xyXG5cclxuICAvLyBhcnJheXMgdGhhdCBob2xkIGtleSBub2RlcyBmb3IgZWFjaCByb3cgb2YgYSBrZXlib2FyZCAtIGVhY2ggcm93IHN0YXJ0cyB3aXRoIGFuIGFkZGl0aW9uYWwgbXVsdGktY2hhcmFjdGVyIGtleVxyXG4gIGNvbnN0IHRvcEtleU5vZGVzID0gWyBUZXh0S2V5Tm9kZS50YWIoKSBdO1xyXG4gIGNvbnN0IG1pZGRsZUtleU5vZGVzID0gWyBUZXh0S2V5Tm9kZS5jYXBzTG9jaygpIF07XHJcbiAgY29uc3QgYm90dG9tS2V5Tm9kZXMgPSBbIFRleHRLZXlOb2RlLnNoaWZ0KCkgXTtcclxuXHJcbiAgbGV0IGk7XHJcbiAgZm9yICggaSA9IDA7IGkgPCB0b3BSb3dLZXlTdHJpbmdzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgdG9wS2V5Tm9kZXMucHVzaCggbmV3IExldHRlcktleU5vZGUoIHRvcFJvd0tleVN0cmluZ3NbIGkgXSApICk7XHJcbiAgfVxyXG4gIGZvciAoIGkgPSAwOyBpIDwgbWlkZGxlUm93S2V5U3RyaW5ncy5sZW5ndGg7IGkrKyApIHtcclxuICAgIG1pZGRsZUtleU5vZGVzLnB1c2goIG5ldyBMZXR0ZXJLZXlOb2RlKCBtaWRkbGVSb3dLZXlTdHJpbmdzWyBpIF0gKSApO1xyXG4gIH1cclxuICBmb3IgKCBpID0gMDsgaSA8IGJvdHRvbVJvd0tleVN0cmluZ3MubGVuZ3RoOyBpKysgKSB7XHJcbiAgICBib3R0b21LZXlOb2Rlcy5wdXNoKCBuZXcgTGV0dGVyS2V5Tm9kZSggYm90dG9tUm93S2V5U3RyaW5nc1sgaSBdICkgKTtcclxuICB9XHJcbiAgY29uc3QgdG9wQXJyb3dLZXlOb2RlID0gbmV3IEFycm93S2V5Tm9kZSggJ3VwJyApO1xyXG4gIGNvbnN0IGJvdHRvbUFycm93S2V5Tm9kZXMgPSBbIG5ldyBBcnJvd0tleU5vZGUoICdsZWZ0JyApLCBuZXcgQXJyb3dLZXlOb2RlKCAnZG93bicgKSwgbmV3IEFycm93S2V5Tm9kZSggJ3JpZ2h0JyApIF07XHJcbiAgY29uc3QgYm90dG9tQXJyb3dLZXlCb3ggPSBuZXcgSEJveCggeyBjaGlsZHJlbjogYm90dG9tQXJyb3dLZXlOb2Rlcywgc3BhY2luZzogMiB9ICk7XHJcblxyXG4gIC8vIGFkZCB0aGUgZW50ZXIgYW5kIHNoaWZ0IGtleXMgdG8gdGhlIG1pZGRsZSBhbmQgYm90dG9tIHJvd3MsIHNoaWZ0IGtleSBoYXMgZXh0cmEgd2lkdGggZm9yIGFsaWdubWVudFxyXG4gIG1pZGRsZUtleU5vZGVzLnB1c2goIFRleHRLZXlOb2RlLmVudGVyKCkgKTtcclxuICBib3R0b21LZXlOb2Rlcy5wdXNoKCBUZXh0S2V5Tm9kZS5zaGlmdCggeyB4QWxpZ246ICdyaWdodCcsIHhNYXJnaW46IDQsIG1pbktleVdpZHRoOiA3MCB9ICkgKTtcclxuXHJcbiAgY29uc3QgdG9wSEJveCA9IG5ldyBIQm94KCB7IGNoaWxkcmVuOiB0b3BLZXlOb2Rlcywgc3BhY2luZzogNSB9ICk7XHJcbiAgY29uc3QgbWlkZGxlSEJveCA9IG5ldyBIQm94KCB7IGNoaWxkcmVuOiBtaWRkbGVLZXlOb2Rlcywgc3BhY2luZzogNSB9ICk7XHJcbiAgY29uc3QgYm90dG9tSEJveCA9IG5ldyBIQm94KCB7IGNoaWxkcmVuOiBib3R0b21LZXlOb2Rlcywgc3BhY2luZzogNSB9ICk7XHJcbiAgY29uc3QgYXJyb3dLZXlzVkJveCA9IG5ldyBWQm94KCB7XHJcbiAgICBjaGlsZHJlbjogWyB0b3BBcnJvd0tleU5vZGUsIGJvdHRvbUFycm93S2V5Qm94IF0sXHJcbiAgICBzcGFjaW5nOiAxXHJcbiAgfSApO1xyXG5cclxuICByZXR1cm4gbmV3IFZCb3goIHtcclxuICAgIGNoaWxkcmVuOiBbIHRvcEhCb3gsIG1pZGRsZUhCb3gsIGJvdHRvbUhCb3gsIGFycm93S2V5c1ZCb3ggXSxcclxuICAgIGNlbnRlcjogbGF5b3V0Qm91bmRzLmNlbnRlcixcclxuICAgIGFsaWduOiAncmlnaHQnLFxyXG4gICAgc3BhY2luZzogMyxcclxuICAgIHNjYWxlOiAxLjVcclxuICB9ICk7XHJcbn0iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxZQUFZLE1BQU0sZ0NBQWdDO0FBQ3pELE9BQU9DLGFBQWEsTUFBTSxpQ0FBaUM7QUFDM0QsT0FBT0MsV0FBVyxNQUFNLCtCQUErQjtBQUN2RCxTQUFTQyxJQUFJLEVBQVFDLElBQUksUUFBUSxtQ0FBbUM7QUFHcEUsZUFBZSxTQUFTQyxXQUFXQSxDQUFFQyxZQUFxQixFQUFTO0VBRWpFO0VBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUU7RUFDN0YsTUFBTUMsbUJBQW1CLEdBQUcsQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVB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