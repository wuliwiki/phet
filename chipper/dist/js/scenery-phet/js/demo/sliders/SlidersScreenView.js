// Copyright 2014-2022, University of Colorado Boulder

/**
 * Demonstration of scenery-phet sliders.
 * Demos are selected from a combo box, and are instantiated on demand.
 * Use the 'slider' query parameter to set the initial selection of the combo box.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import DemosScreenView from '../../../../sun/js/demo/DemosScreenView.js';
import sceneryPhet from '../../sceneryPhet.js';
import sceneryPhetQueryParameters from '../../sceneryPhetQueryParameters.js';
import demoNumberControl from './demoNumberControl.js';
import demoSliderWithSpectrum from './demoSliderWithSpectrum.js';
import demoWavelengthNumberControl from './demoWavelengthNumberControl.js';
import demoNumberControlWithSpectrum from './demoNumberControlWithSpectrum.js';
export default class SlidersScreenView extends DemosScreenView {
  constructor(providedOptions) {
    const options = optionize()({
      selectedDemoLabel: sceneryPhetQueryParameters.slider
    }, providedOptions);

    // To add a demo, add an entry here of type SunDemo.
    const demos = [{
      label: 'NumberControl',
      createNode: demoNumberControl
    }, {
      label: 'WavelengthNumberControl',
      createNode: demoWavelengthNumberControl
    }, {
      label: 'SpectrumSliderTrack',
      createNode: demoSliderWithSpectrum
    }, {
      label: 'NumberControlWithSpectrum',
      createNode: demoNumberControlWithSpectrum
    }];
    super(demos, options);
  }
}
sceneryPhet.register('SlidersScreenView', SlidersScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJEZW1vc1NjcmVlblZpZXciLCJzY2VuZXJ5UGhldCIsInNjZW5lcnlQaGV0UXVlcnlQYXJhbWV0ZXJzIiwiZGVtb051bWJlckNvbnRyb2wiLCJkZW1vU2xpZGVyV2l0aFNwZWN0cnVtIiwiZGVtb1dhdmVsZW5ndGhOdW1iZXJDb250cm9sIiwiZGVtb051bWJlckNvbnRyb2xXaXRoU3BlY3RydW0iLCJTbGlkZXJzU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNlbGVjdGVkRGVtb0xhYmVsIiwic2xpZGVyIiwiZGVtb3MiLCJsYWJlbCIsImNyZWF0ZU5vZGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNsaWRlcnNTY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERlbW9uc3RyYXRpb24gb2Ygc2NlbmVyeS1waGV0IHNsaWRlcnMuXHJcbiAqIERlbW9zIGFyZSBzZWxlY3RlZCBmcm9tIGEgY29tYm8gYm94LCBhbmQgYXJlIGluc3RhbnRpYXRlZCBvbiBkZW1hbmQuXHJcbiAqIFVzZSB0aGUgJ3NsaWRlcicgcXVlcnkgcGFyYW1ldGVyIHRvIHNldCB0aGUgaW5pdGlhbCBzZWxlY3Rpb24gb2YgdGhlIGNvbWJvIGJveC5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IERlbW9zU2NyZWVuVmlldywgeyBEZW1vc1NjcmVlblZpZXdPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2RlbW8vRGVtb3NTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uLy4uL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0UXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL3NjZW5lcnlQaGV0UXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IGRlbW9OdW1iZXJDb250cm9sIGZyb20gJy4vZGVtb051bWJlckNvbnRyb2wuanMnO1xyXG5pbXBvcnQgZGVtb1NsaWRlcldpdGhTcGVjdHJ1bSBmcm9tICcuL2RlbW9TbGlkZXJXaXRoU3BlY3RydW0uanMnO1xyXG5pbXBvcnQgZGVtb1dhdmVsZW5ndGhOdW1iZXJDb250cm9sIGZyb20gJy4vZGVtb1dhdmVsZW5ndGhOdW1iZXJDb250cm9sLmpzJztcclxuaW1wb3J0IGRlbW9OdW1iZXJDb250cm9sV2l0aFNwZWN0cnVtIGZyb20gJy4vZGVtb051bWJlckNvbnRyb2xXaXRoU3BlY3RydW0uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbnR5cGUgU2xpZGVyc1NjcmVlblZpZXdPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8RGVtb3NTY3JlZW5WaWV3T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyc1NjcmVlblZpZXcgZXh0ZW5kcyBEZW1vc1NjcmVlblZpZXcge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogU2xpZGVyc1NjcmVlblZpZXdPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U2xpZGVyc1NjcmVlblZpZXdPcHRpb25zLCBTZWxmT3B0aW9ucywgRGVtb3NTY3JlZW5WaWV3T3B0aW9ucz4oKSgge1xyXG4gICAgICBzZWxlY3RlZERlbW9MYWJlbDogc2NlbmVyeVBoZXRRdWVyeVBhcmFtZXRlcnMuc2xpZGVyXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBUbyBhZGQgYSBkZW1vLCBhZGQgYW4gZW50cnkgaGVyZSBvZiB0eXBlIFN1bkRlbW8uXHJcbiAgICBjb25zdCBkZW1vcyA9IFtcclxuICAgICAgeyBsYWJlbDogJ051bWJlckNvbnRyb2wnLCBjcmVhdGVOb2RlOiBkZW1vTnVtYmVyQ29udHJvbCB9LFxyXG4gICAgICB7IGxhYmVsOiAnV2F2ZWxlbmd0aE51bWJlckNvbnRyb2wnLCBjcmVhdGVOb2RlOiBkZW1vV2F2ZWxlbmd0aE51bWJlckNvbnRyb2wgfSxcclxuICAgICAgeyBsYWJlbDogJ1NwZWN0cnVtU2xpZGVyVHJhY2snLCBjcmVhdGVOb2RlOiBkZW1vU2xpZGVyV2l0aFNwZWN0cnVtIH0sXHJcbiAgICAgIHsgbGFiZWw6ICdOdW1iZXJDb250cm9sV2l0aFNwZWN0cnVtJywgY3JlYXRlTm9kZTogZGVtb051bWJlckNvbnRyb2xXaXRoU3BlY3RydW0gfVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggZGVtb3MsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnU2xpZGVyc1NjcmVlblZpZXcnLCBTbGlkZXJzU2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxlQUFlLE1BQWtDLDRDQUE0QztBQUNwRyxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLDBCQUEwQixNQUFNLHFDQUFxQztBQUM1RSxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFDdEQsT0FBT0Msc0JBQXNCLE1BQU0sNkJBQTZCO0FBQ2hFLE9BQU9DLDJCQUEyQixNQUFNLGtDQUFrQztBQUMxRSxPQUFPQyw2QkFBNkIsTUFBTSxvQ0FBb0M7QUFLOUUsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU1AsZUFBZSxDQUFDO0VBRXREUSxXQUFXQSxDQUFFQyxlQUF5QyxFQUFHO0lBRTlELE1BQU1DLE9BQU8sR0FBR1gsU0FBUyxDQUFnRSxDQUFDLENBQUU7TUFDMUZZLGlCQUFpQixFQUFFVCwwQkFBMEIsQ0FBQ1U7SUFDaEQsQ0FBQyxFQUFFSCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1JLEtBQUssR0FBRyxDQUNaO01BQUVDLEtBQUssRUFBRSxlQUFlO01BQUVDLFVBQVUsRUFBRVo7SUFBa0IsQ0FBQyxFQUN6RDtNQUFFVyxLQUFLLEVBQUUseUJBQXlCO01BQUVDLFVBQVUsRUFBRVY7SUFBNEIsQ0FBQyxFQUM3RTtNQUFFUyxLQUFLLEVBQUUscUJBQXFCO01BQUVDLFVBQVUsRUFBRVg7SUFBdUIsQ0FBQyxFQUNwRTtNQUFFVSxLQUFLLEVBQUUsMkJBQTJCO01BQUVDLFVBQVUsRUFBRVQ7SUFBOEIsQ0FBQyxDQUNsRjtJQUVELEtBQUssQ0FBRU8sS0FBSyxFQUFFSCxPQUFRLENBQUM7RUFDekI7QUFDRjtBQUVBVCxXQUFXLENBQUNlLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRVQsaUJBQWtCLENBQUMifQ==