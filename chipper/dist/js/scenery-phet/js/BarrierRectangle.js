// Copyright 2017-2023, University of Colorado Boulder

/**
 * Semi-transparent black barrier used to block input events when a dialog (or other popup) is present, and fade out
 * the background.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import { FireListener, Plane } from '../../scenery/js/imports.js';
import EventType from '../../tandem/js/EventType.js';
import dotRandom from '../../dot/js/dotRandom.js';
import sceneryPhet from './sceneryPhet.js';
import optionize from '../../phet-core/js/optionize.js';
import Tandem from '../../tandem/js/Tandem.js';
export default class BarrierRectangle extends Plane {
  constructor(modalNodeStack, providedOptions) {
    const options = optionize()({
      fill: 'rgba( 0, 0, 0, 0.3 )',
      pickable: true,
      tandem: Tandem.OPTIONAL,
      phetioReadOnly: true,
      // Disable controls in the PhET-iO Studio wrapper
      phetioEventType: EventType.USER,
      visiblePropertyOptions: {
        phetioState: false
      }
    }, providedOptions);
    super(options);
    const lengthListener = numberOfBarriers => {
      this.visible = numberOfBarriers > 0;
    };
    modalNodeStack.lengthProperty.link(lengthListener);
    this.addInputListener(new FireListener({
      tandem: options.tandem.createTandem('fireListener'),
      phetioReadOnly: options.phetioReadOnly,
      fire() {
        assert && assert(modalNodeStack.length > 0, 'There must be a Node in the stack to hide.');

        // If fuzzing is enabled, close popups with a reduced probability, to improve testing coverage.
        // As of this writing, this addresses Dialogs and the PhET menu.
        // See https://github.com/phetsims/aqua/issues/136
        if (!phet.chipper.isFuzzEnabled() || dotRandom.nextDouble() < 0.005) {
          modalNodeStack.get(modalNodeStack.length - 1).hide();
        }
      }
    }));
    this.disposeBarrierRectangle = () => {
      if (modalNodeStack.lengthProperty.hasListener(lengthListener)) {
        modalNodeStack.lengthProperty.unlink(lengthListener);
      }
    };
  }
  dispose() {
    this.disposeBarrierRectangle();
    super.dispose();
  }
}
sceneryPhet.register('BarrierRectangle', BarrierRectangle);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaXJlTGlzdGVuZXIiLCJQbGFuZSIsIkV2ZW50VHlwZSIsImRvdFJhbmRvbSIsInNjZW5lcnlQaGV0Iiwib3B0aW9uaXplIiwiVGFuZGVtIiwiQmFycmllclJlY3RhbmdsZSIsImNvbnN0cnVjdG9yIiwibW9kYWxOb2RlU3RhY2siLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZmlsbCIsInBpY2thYmxlIiwidGFuZGVtIiwiT1BUSU9OQUwiLCJwaGV0aW9SZWFkT25seSIsInBoZXRpb0V2ZW50VHlwZSIsIlVTRVIiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvU3RhdGUiLCJsZW5ndGhMaXN0ZW5lciIsIm51bWJlck9mQmFycmllcnMiLCJ2aXNpYmxlIiwibGVuZ3RoUHJvcGVydHkiLCJsaW5rIiwiYWRkSW5wdXRMaXN0ZW5lciIsImNyZWF0ZVRhbmRlbSIsImZpcmUiLCJhc3NlcnQiLCJsZW5ndGgiLCJwaGV0IiwiY2hpcHBlciIsImlzRnV6ekVuYWJsZWQiLCJuZXh0RG91YmxlIiwiZ2V0IiwiaGlkZSIsImRpc3Bvc2VCYXJyaWVyUmVjdGFuZ2xlIiwiaGFzTGlzdGVuZXIiLCJ1bmxpbmsiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCYXJyaWVyUmVjdGFuZ2xlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNlbWktdHJhbnNwYXJlbnQgYmxhY2sgYmFycmllciB1c2VkIHRvIGJsb2NrIGlucHV0IGV2ZW50cyB3aGVuIGEgZGlhbG9nIChvciBvdGhlciBwb3B1cCkgaXMgcHJlc2VudCwgYW5kIGZhZGUgb3V0XHJcbiAqIHRoZSBiYWNrZ3JvdW5kLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRmlyZUxpc3RlbmVyLCBQbGFuZSwgUGxhbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEV2ZW50VHlwZSBmcm9tICcuLi8uLi90YW5kZW0vanMvRXZlbnRUeXBlLmpzJztcclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlQXJyYXkgfSBmcm9tICcuLi8uLi9heG9uL2pzL2NyZWF0ZU9ic2VydmFibGVBcnJheS5qcyc7XHJcbmltcG9ydCB7IFBvcHVwYWJsZU5vZGUgfSBmcm9tICcuLi8uLi9zdW4vanMvUG9wdXBhYmxlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIEJhcnJpZXJSZWN0YW5nbGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQbGFuZU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXJyaWVyUmVjdGFuZ2xlIGV4dGVuZHMgUGxhbmUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VCYXJyaWVyUmVjdGFuZ2xlOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGFsTm9kZVN0YWNrOiBPYnNlcnZhYmxlQXJyYXk8UG9wdXBhYmxlTm9kZT4sIHByb3ZpZGVkT3B0aW9ucz86IEJhcnJpZXJSZWN0YW5nbGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QmFycmllclJlY3RhbmdsZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBQbGFuZU9wdGlvbnM+KCkoIHtcclxuICAgICAgZmlsbDogJ3JnYmEoIDAsIDAsIDAsIDAuMyApJyxcclxuICAgICAgcGlja2FibGU6IHRydWUsXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVElPTkFMLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSwgLy8gRGlzYWJsZSBjb250cm9scyBpbiB0aGUgUGhFVC1pTyBTdHVkaW8gd3JhcHBlclxyXG4gICAgICBwaGV0aW9FdmVudFR5cGU6IEV2ZW50VHlwZS5VU0VSLFxyXG4gICAgICB2aXNpYmxlUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgcGhldGlvU3RhdGU6IGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgbGVuZ3RoTGlzdGVuZXIgPSAoIG51bWJlck9mQmFycmllcnM6IG51bWJlciApID0+IHtcclxuICAgICAgdGhpcy52aXNpYmxlID0gKCBudW1iZXJPZkJhcnJpZXJzID4gMCApO1xyXG4gICAgfTtcclxuICAgIG1vZGFsTm9kZVN0YWNrLmxlbmd0aFByb3BlcnR5LmxpbmsoIGxlbmd0aExpc3RlbmVyICk7XHJcblxyXG4gICAgdGhpcy5hZGRJbnB1dExpc3RlbmVyKCBuZXcgRmlyZUxpc3RlbmVyKCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnZmlyZUxpc3RlbmVyJyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogb3B0aW9ucy5waGV0aW9SZWFkT25seSxcclxuICAgICAgZmlyZSgpIHtcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtb2RhbE5vZGVTdGFjay5sZW5ndGggPiAwLCAnVGhlcmUgbXVzdCBiZSBhIE5vZGUgaW4gdGhlIHN0YWNrIHRvIGhpZGUuJyApO1xyXG5cclxuICAgICAgICAvLyBJZiBmdXp6aW5nIGlzIGVuYWJsZWQsIGNsb3NlIHBvcHVwcyB3aXRoIGEgcmVkdWNlZCBwcm9iYWJpbGl0eSwgdG8gaW1wcm92ZSB0ZXN0aW5nIGNvdmVyYWdlLlxyXG4gICAgICAgIC8vIEFzIG9mIHRoaXMgd3JpdGluZywgdGhpcyBhZGRyZXNzZXMgRGlhbG9ncyBhbmQgdGhlIFBoRVQgbWVudS5cclxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2FxdWEvaXNzdWVzLzEzNlxyXG4gICAgICAgIGlmICggIXBoZXQuY2hpcHBlci5pc0Z1enpFbmFibGVkKCkgfHwgZG90UmFuZG9tLm5leHREb3VibGUoKSA8IDAuMDA1ICkge1xyXG4gICAgICAgICAgbW9kYWxOb2RlU3RhY2suZ2V0KCBtb2RhbE5vZGVTdGFjay5sZW5ndGggLSAxICkuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlQmFycmllclJlY3RhbmdsZSA9ICgpID0+IHtcclxuICAgICAgaWYgKCBtb2RhbE5vZGVTdGFjay5sZW5ndGhQcm9wZXJ0eS5oYXNMaXN0ZW5lciggbGVuZ3RoTGlzdGVuZXIgKSApIHtcclxuICAgICAgICBtb2RhbE5vZGVTdGFjay5sZW5ndGhQcm9wZXJ0eS51bmxpbmsoIGxlbmd0aExpc3RlbmVyICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUJhcnJpZXJSZWN0YW5nbGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnQmFycmllclJlY3RhbmdsZScsIEJhcnJpZXJSZWN0YW5nbGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxZQUFZLEVBQUVDLEtBQUssUUFBc0IsNkJBQTZCO0FBQy9FLE9BQU9DLFNBQVMsTUFBTSw4QkFBOEI7QUFDcEQsT0FBT0MsU0FBUyxNQUFNLDJCQUEyQjtBQUNqRCxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRzFDLE9BQU9DLFNBQVMsTUFBNEIsaUNBQWlDO0FBQzdFLE9BQU9DLE1BQU0sTUFBTSwyQkFBMkI7QUFNOUMsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU04sS0FBSyxDQUFDO0VBSTNDTyxXQUFXQSxDQUFFQyxjQUE4QyxFQUFFQyxlQUF5QyxFQUFHO0lBRTlHLE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUFxRCxDQUFDLENBQUU7TUFDL0VPLElBQUksRUFBRSxzQkFBc0I7TUFDNUJDLFFBQVEsRUFBRSxJQUFJO01BQ2RDLE1BQU0sRUFBRVIsTUFBTSxDQUFDUyxRQUFRO01BQ3ZCQyxjQUFjLEVBQUUsSUFBSTtNQUFFO01BQ3RCQyxlQUFlLEVBQUVmLFNBQVMsQ0FBQ2dCLElBQUk7TUFDL0JDLHNCQUFzQixFQUFFO1FBQ3RCQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUMsRUFBRVYsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixNQUFNVSxjQUFjLEdBQUtDLGdCQUF3QixJQUFNO01BQ3JELElBQUksQ0FBQ0MsT0FBTyxHQUFLRCxnQkFBZ0IsR0FBRyxDQUFHO0lBQ3pDLENBQUM7SUFDRGIsY0FBYyxDQUFDZSxjQUFjLENBQUNDLElBQUksQ0FBRUosY0FBZSxDQUFDO0lBRXBELElBQUksQ0FBQ0ssZ0JBQWdCLENBQUUsSUFBSTFCLFlBQVksQ0FBRTtNQUN2Q2MsTUFBTSxFQUFFSCxPQUFPLENBQUNHLE1BQU0sQ0FBQ2EsWUFBWSxDQUFFLGNBQWUsQ0FBQztNQUNyRFgsY0FBYyxFQUFFTCxPQUFPLENBQUNLLGNBQWM7TUFDdENZLElBQUlBLENBQUEsRUFBRztRQUNMQyxNQUFNLElBQUlBLE1BQU0sQ0FBRXBCLGNBQWMsQ0FBQ3FCLE1BQU0sR0FBRyxDQUFDLEVBQUUsNENBQTZDLENBQUM7O1FBRTNGO1FBQ0E7UUFDQTtRQUNBLElBQUssQ0FBQ0MsSUFBSSxDQUFDQyxPQUFPLENBQUNDLGFBQWEsQ0FBQyxDQUFDLElBQUk5QixTQUFTLENBQUMrQixVQUFVLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRztVQUNyRXpCLGNBQWMsQ0FBQzBCLEdBQUcsQ0FBRTFCLGNBQWMsQ0FBQ3FCLE1BQU0sR0FBRyxDQUFFLENBQUMsQ0FBQ00sSUFBSSxDQUFDLENBQUM7UUFDeEQ7TUFDRjtJQUNGLENBQUUsQ0FBRSxDQUFDO0lBRUwsSUFBSSxDQUFDQyx1QkFBdUIsR0FBRyxNQUFNO01BQ25DLElBQUs1QixjQUFjLENBQUNlLGNBQWMsQ0FBQ2MsV0FBVyxDQUFFakIsY0FBZSxDQUFDLEVBQUc7UUFDakVaLGNBQWMsQ0FBQ2UsY0FBYyxDQUFDZSxNQUFNLENBQUVsQixjQUFlLENBQUM7TUFDeEQ7SUFDRixDQUFDO0VBQ0g7RUFFZ0JtQixPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDSCx1QkFBdUIsQ0FBQyxDQUFDO0lBQzlCLEtBQUssQ0FBQ0csT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBcEMsV0FBVyxDQUFDcUMsUUFBUSxDQUFFLGtCQUFrQixFQUFFbEMsZ0JBQWlCLENBQUMifQ==