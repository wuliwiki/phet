// Copyright 2021-2022, University of Colorado Boulder

/**
 * Button for starting/stopping some behavior. Unlike the PlayPauseButton, this indicates that play will re-start
 * from the beginning after switch from play to stop.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import sceneryPhet from '../sceneryPhet.js';
import SceneryPhetConstants from '../SceneryPhetConstants.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
import StopIconShape from '../StopIconShape.js';
import PlayControlButton from './PlayControlButton.js';
export default class PlayStopButton extends PlayControlButton {
  constructor(isPlayingProperty, providedOptions) {
    const options = optionize()({
      // PlayStopButtonOptions
      radius: SceneryPhetConstants.PLAY_CONTROL_BUTTON_RADIUS,
      endPlayingLabel: SceneryPhetStrings.a11y.playControlButton.stopStringProperty
    }, providedOptions);

    // icon is sized relative to radius
    const stopWidth = options.radius * 0.75;
    const stopPath = new Path(new StopIconShape(stopWidth), {
      fill: 'black'
    });
    super(isPlayingProperty, stopPath, options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'PlayStopButton', this);
  }
}
sceneryPhet.register('PlayStopButton', PlayStopButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiUGF0aCIsInNjZW5lcnlQaGV0IiwiU2NlbmVyeVBoZXRDb25zdGFudHMiLCJTY2VuZXJ5UGhldFN0cmluZ3MiLCJTdG9wSWNvblNoYXBlIiwiUGxheUNvbnRyb2xCdXR0b24iLCJQbGF5U3RvcEJ1dHRvbiIsImNvbnN0cnVjdG9yIiwiaXNQbGF5aW5nUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicmFkaXVzIiwiUExBWV9DT05UUk9MX0JVVFRPTl9SQURJVVMiLCJlbmRQbGF5aW5nTGFiZWwiLCJhMTF5IiwicGxheUNvbnRyb2xCdXR0b24iLCJzdG9wU3RyaW5nUHJvcGVydHkiLCJzdG9wV2lkdGgiLCJzdG9wUGF0aCIsImZpbGwiLCJhc3NlcnQiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxheVN0b3BCdXR0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQnV0dG9uIGZvciBzdGFydGluZy9zdG9wcGluZyBzb21lIGJlaGF2aW9yLiBVbmxpa2UgdGhlIFBsYXlQYXVzZUJ1dHRvbiwgdGhpcyBpbmRpY2F0ZXMgdGhhdCBwbGF5IHdpbGwgcmUtc3RhcnRcclxuICogZnJvbSB0aGUgYmVnaW5uaW5nIGFmdGVyIHN3aXRjaCBmcm9tIHBsYXkgdG8gc3RvcC5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgSW5zdGFuY2VSZWdpc3RyeSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvZG9jdW1lbnRhdGlvbi9JbnN0YW5jZVJlZ2lzdHJ5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgU2NlbmVyeVBoZXRDb25zdGFudHMgZnJvbSAnLi4vU2NlbmVyeVBoZXRDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgU2NlbmVyeVBoZXRTdHJpbmdzIGZyb20gJy4uL1NjZW5lcnlQaGV0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBTdG9wSWNvblNoYXBlIGZyb20gJy4uL1N0b3BJY29uU2hhcGUuanMnO1xyXG5pbXBvcnQgUGxheUNvbnRyb2xCdXR0b24sIHsgUGxheUNvbnRyb2xCdXR0b25PcHRpb25zIH0gZnJvbSAnLi9QbGF5Q29udHJvbEJ1dHRvbi5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIFBsYXlTdG9wQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGxheUNvbnRyb2xCdXR0b25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheVN0b3BCdXR0b24gZXh0ZW5kcyBQbGF5Q29udHJvbEJ1dHRvbiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaXNQbGF5aW5nUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LCBwcm92aWRlZE9wdGlvbnM/OiBQbGF5U3RvcEJ1dHRvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQbGF5U3RvcEJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBQbGF5Q29udHJvbEJ1dHRvbk9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFBsYXlTdG9wQnV0dG9uT3B0aW9uc1xyXG4gICAgICByYWRpdXM6IFNjZW5lcnlQaGV0Q29uc3RhbnRzLlBMQVlfQ09OVFJPTF9CVVRUT05fUkFESVVTLFxyXG4gICAgICBlbmRQbGF5aW5nTGFiZWw6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5LnBsYXlDb250cm9sQnV0dG9uLnN0b3BTdHJpbmdQcm9wZXJ0eVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gaWNvbiBpcyBzaXplZCByZWxhdGl2ZSB0byByYWRpdXNcclxuICAgIGNvbnN0IHN0b3BXaWR0aCA9IG9wdGlvbnMucmFkaXVzICogMC43NTtcclxuICAgIGNvbnN0IHN0b3BQYXRoID0gbmV3IFBhdGgoIG5ldyBTdG9wSWNvblNoYXBlKCBzdG9wV2lkdGggKSwgeyBmaWxsOiAnYmxhY2snIH0gKTtcclxuXHJcbiAgICBzdXBlciggaXNQbGF5aW5nUHJvcGVydHksIHN0b3BQYXRoLCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gc3VwcG9ydCBmb3IgYmluZGVyIGRvY3VtZW50YXRpb24sIHN0cmlwcGVkIG91dCBpbiBidWlsZHMgYW5kIG9ubHkgcnVucyB3aGVuID9iaW5kZXIgaXMgc3BlY2lmaWVkXHJcbiAgICBhc3NlcnQgJiYgcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5iaW5kZXIgJiYgSW5zdGFuY2VSZWdpc3RyeS5yZWdpc3RlckRhdGFVUkwoICdzY2VuZXJ5LXBoZXQnLCAnUGxheVN0b3BCdXR0b24nLCB0aGlzICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1BsYXlTdG9wQnV0dG9uJywgUGxheVN0b3BCdXR0b24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLGdCQUFnQixNQUFNLHlEQUF5RDtBQUN0RixPQUFPQyxTQUFTLE1BQTRCLG9DQUFvQztBQUNoRixTQUFTQyxJQUFJLFFBQVEsZ0NBQWdDO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7QUFDM0MsT0FBT0Msb0JBQW9CLE1BQU0sNEJBQTRCO0FBQzdELE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQUN6RCxPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLGlCQUFpQixNQUFvQyx3QkFBd0I7QUFNcEYsZUFBZSxNQUFNQyxjQUFjLFNBQVNELGlCQUFpQixDQUFDO0VBRXJERSxXQUFXQSxDQUFFQyxpQkFBb0MsRUFBRUMsZUFBdUMsRUFBRztJQUVsRyxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBK0QsQ0FBQyxDQUFFO01BRXpGO01BQ0FZLE1BQU0sRUFBRVQsb0JBQW9CLENBQUNVLDBCQUEwQjtNQUN2REMsZUFBZSxFQUFFVixrQkFBa0IsQ0FBQ1csSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0M7SUFDN0QsQ0FBQyxFQUFFUCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1RLFNBQVMsR0FBR1AsT0FBTyxDQUFDQyxNQUFNLEdBQUcsSUFBSTtJQUN2QyxNQUFNTyxRQUFRLEdBQUcsSUFBSWxCLElBQUksQ0FBRSxJQUFJSSxhQUFhLENBQUVhLFNBQVUsQ0FBQyxFQUFFO01BQUVFLElBQUksRUFBRTtJQUFRLENBQUUsQ0FBQztJQUU5RSxLQUFLLENBQUVYLGlCQUFpQixFQUFFVSxRQUFRLEVBQUVSLE9BQVEsQ0FBQzs7SUFFN0M7SUFDQVUsTUFBTSxJQUFJQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDQyxNQUFNLElBQUkxQixnQkFBZ0IsQ0FBQzJCLGVBQWUsQ0FBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSyxDQUFDO0VBQzdIO0FBQ0Y7QUFFQXhCLFdBQVcsQ0FBQ3lCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRXBCLGNBQWUsQ0FBQyJ9