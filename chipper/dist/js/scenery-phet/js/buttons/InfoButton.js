// Copyright 2018-2022, University of Colorado Boulder

/**
 * Standard PhET button for 'info', uses the international symbol for 'information'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import infoCircleSolidShape from '../../../sherpa/js/fontawesome-5/infoCircleSolidShape.js';
import RoundPushButton from '../../../sun/js/buttons/RoundPushButton.js';
import sceneryPhet from '../sceneryPhet.js';
export default class InfoButton extends RoundPushButton {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      iconFill: 'black',
      // RoundPushButtonOptions
      baseColor: 'rgb( 238, 238, 238 )',
      xMargin: 10,
      yMargin: 10,
      touchAreaDilation: 10
    }, providedOptions);
    options.content = new Path(infoCircleSolidShape, {
      scale: 0.08,
      fill: options.iconFill
    });
    super(options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'InfoButton', this);
  }
}
sceneryPhet.register('InfoButton', InfoButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiUGF0aCIsImluZm9DaXJjbGVTb2xpZFNoYXBlIiwiUm91bmRQdXNoQnV0dG9uIiwic2NlbmVyeVBoZXQiLCJJbmZvQnV0dG9uIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaWNvbkZpbGwiLCJiYXNlQ29sb3IiLCJ4TWFyZ2luIiwieU1hcmdpbiIsInRvdWNoQXJlYURpbGF0aW9uIiwiY29udGVudCIsInNjYWxlIiwiZmlsbCIsImFzc2VydCIsInBoZXQiLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiYmluZGVyIiwicmVnaXN0ZXJEYXRhVVJMIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbmZvQnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFN0YW5kYXJkIFBoRVQgYnV0dG9uIGZvciAnaW5mbycsIHVzZXMgdGhlIGludGVybmF0aW9uYWwgc3ltYm9sIGZvciAnaW5mb3JtYXRpb24nLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBJbnN0YW5jZVJlZ2lzdHJ5IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9kb2N1bWVudGF0aW9uL0luc3RhbmNlUmVnaXN0cnkuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFRDb2xvciwgUGF0aCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBpbmZvQ2lyY2xlU29saWRTaGFwZSBmcm9tICcuLi8uLi8uLi9zaGVycGEvanMvZm9udGF3ZXNvbWUtNS9pbmZvQ2lyY2xlU29saWRTaGFwZS5qcyc7XHJcbmltcG9ydCBSb3VuZFB1c2hCdXR0b24sIHsgUm91bmRQdXNoQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JvdW5kUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi9zY2VuZXJ5UGhldC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGljb25GaWxsPzogVENvbG9yO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgSW5mb0J1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8Um91bmRQdXNoQnV0dG9uT3B0aW9ucywgJ2NvbnRlbnQnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZm9CdXR0b24gZXh0ZW5kcyBSb3VuZFB1c2hCdXR0b24ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IEluZm9CdXR0b25PcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8SW5mb0J1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSb3VuZFB1c2hCdXR0b25PcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBpY29uRmlsbDogJ2JsYWNrJyxcclxuXHJcbiAgICAgIC8vIFJvdW5kUHVzaEJ1dHRvbk9wdGlvbnNcclxuICAgICAgYmFzZUNvbG9yOiAncmdiKCAyMzgsIDIzOCwgMjM4ICknLFxyXG4gICAgICB4TWFyZ2luOiAxMCxcclxuICAgICAgeU1hcmdpbjogMTAsXHJcbiAgICAgIHRvdWNoQXJlYURpbGF0aW9uOiAxMFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy5jb250ZW50ID0gbmV3IFBhdGgoIGluZm9DaXJjbGVTb2xpZFNoYXBlLCB7XHJcbiAgICAgIHNjYWxlOiAwLjA4LFxyXG4gICAgICBmaWxsOiBvcHRpb25zLmljb25GaWxsXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBzdXBwb3J0IGZvciBiaW5kZXIgZG9jdW1lbnRhdGlvbiwgc3RyaXBwZWQgb3V0IGluIGJ1aWxkcyBhbmQgb25seSBydW5zIHdoZW4gP2JpbmRlciBpcyBzcGVjaWZpZWRcclxuICAgIGFzc2VydCAmJiBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLmJpbmRlciAmJiBJbnN0YW5jZVJlZ2lzdHJ5LnJlZ2lzdGVyRGF0YVVSTCggJ3NjZW5lcnktcGhldCcsICdJbmZvQnV0dG9uJywgdGhpcyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdJbmZvQnV0dG9uJywgSW5mb0J1dHRvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSx5REFBeUQ7QUFFdEYsT0FBT0MsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxTQUFpQkMsSUFBSSxRQUFRLGdDQUFnQztBQUM3RCxPQUFPQyxvQkFBb0IsTUFBTSwwREFBMEQ7QUFDM0YsT0FBT0MsZUFBZSxNQUFrQyw0Q0FBNEM7QUFDcEcsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQVEzQyxlQUFlLE1BQU1DLFVBQVUsU0FBU0YsZUFBZSxDQUFDO0VBRS9DRyxXQUFXQSxDQUFFQyxlQUFtQyxFQUFHO0lBRXhELE1BQU1DLE9BQU8sR0FBR1IsU0FBUyxDQUF5RCxDQUFDLENBQUU7TUFFbkY7TUFDQVMsUUFBUSxFQUFFLE9BQU87TUFFakI7TUFDQUMsU0FBUyxFQUFFLHNCQUFzQjtNQUNqQ0MsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsaUJBQWlCLEVBQUU7SUFDckIsQ0FBQyxFQUFFTixlQUFnQixDQUFDO0lBRXBCQyxPQUFPLENBQUNNLE9BQU8sR0FBRyxJQUFJYixJQUFJLENBQUVDLG9CQUFvQixFQUFFO01BQ2hEYSxLQUFLLEVBQUUsSUFBSTtNQUNYQyxJQUFJLEVBQUVSLE9BQU8sQ0FBQ0M7SUFDaEIsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFRCxPQUFRLENBQUM7O0lBRWhCO0lBQ0FTLE1BQU0sSUFBSUMsSUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQWUsQ0FBQ0MsTUFBTSxJQUFJdEIsZ0JBQWdCLENBQUN1QixlQUFlLENBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxJQUFLLENBQUM7RUFDekg7QUFDRjtBQUVBbEIsV0FBVyxDQUFDbUIsUUFBUSxDQUFFLFlBQVksRUFBRWxCLFVBQVcsQ0FBQyJ9