// Copyright 2014-2022, University of Colorado Boulder

/**
 * Zoom button, has an icon with a magnifying glass, with either a plus or minus sign in the center of the glass.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../dot/js/Dimension2.js';
import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize, { combineOptions } from '../../../phet-core/js/optionize.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import Tandem from '../../../tandem/js/Tandem.js';
import MagnifyingGlassNode from '../MagnifyingGlassNode.js';
import MinusNode from '../MinusNode.js';
import PhetColorScheme from '../PhetColorScheme.js';
import PlusNode from '../PlusNode.js';
import sceneryPhet from '../sceneryPhet.js';
export default class ZoomButton extends RectangularPushButton {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      in: true,
      magnifyingGlassOptions: {
        glassRadius: 15
      },
      // RectangularPushButtonOptions
      baseColor: PhetColorScheme.BUTTON_YELLOW,
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Button'
    }, providedOptions);

    // Plus or minus sign in middle of magnifying glass
    const glassRadius = options.magnifyingGlassOptions.glassRadius;
    const signOptions = {
      size: new Dimension2(1.3 * glassRadius, glassRadius / 3)
    };
    const icon = options.in ? new PlusNode(signOptions) : new MinusNode(signOptions);
    options.content = new MagnifyingGlassNode(combineOptions({
      icon: icon
    }, options.magnifyingGlassOptions));
    super(options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'ZoomButton', this);
  }
}
sceneryPhet.register('ZoomButton', ZoomButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiSW5zdGFuY2VSZWdpc3RyeSIsIm9wdGlvbml6ZSIsImNvbWJpbmVPcHRpb25zIiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwiVGFuZGVtIiwiTWFnbmlmeWluZ0dsYXNzTm9kZSIsIk1pbnVzTm9kZSIsIlBoZXRDb2xvclNjaGVtZSIsIlBsdXNOb2RlIiwic2NlbmVyeVBoZXQiLCJab29tQnV0dG9uIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaW4iLCJtYWduaWZ5aW5nR2xhc3NPcHRpb25zIiwiZ2xhc3NSYWRpdXMiLCJiYXNlQ29sb3IiLCJCVVRUT05fWUVMTE9XIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4Iiwic2lnbk9wdGlvbnMiLCJzaXplIiwiaWNvbiIsImNvbnRlbnQiLCJhc3NlcnQiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiWm9vbUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBab29tIGJ1dHRvbiwgaGFzIGFuIGljb24gd2l0aCBhIG1hZ25pZnlpbmcgZ2xhc3MsIHdpdGggZWl0aGVyIGEgcGx1cyBvciBtaW51cyBzaWduIGluIHRoZSBjZW50ZXIgb2YgdGhlIGdsYXNzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgSW5zdGFuY2VSZWdpc3RyeSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvZG9jdW1lbnRhdGlvbi9JbnN0YW5jZVJlZ2lzdHJ5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLCB7IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclB1c2hCdXR0b24uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgTWFnbmlmeWluZ0dsYXNzTm9kZSwgeyBNYWduaWZ5aW5nR2xhc3NOb2RlT3B0aW9ucyB9IGZyb20gJy4uL01hZ25pZnlpbmdHbGFzc05vZGUuanMnO1xyXG5pbXBvcnQgTWludXNOb2RlIGZyb20gJy4uL01pbnVzTm9kZS5qcyc7XHJcbmltcG9ydCBQaGV0Q29sb3JTY2hlbWUgZnJvbSAnLi4vUGhldENvbG9yU2NoZW1lLmpzJztcclxuaW1wb3J0IFBsdXNOb2RlIGZyb20gJy4uL1BsdXNOb2RlLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgaW4/OiBib29sZWFuOyAvLyB0cnVlOiB6b29tLWluIGJ1dHRvbiwgZmFsc2U6IHpvb20tb3V0IGJ1dHRvblxyXG4gIG1hZ25pZnlpbmdHbGFzc09wdGlvbnM/OiBTdHJpY3RPbWl0PE1hZ25pZnlpbmdHbGFzc05vZGVPcHRpb25zLCAnaWNvbic+O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgWm9vbUJ1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8UmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucywgJ2NvbnRlbnQnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFpvb21CdXR0b24gZXh0ZW5kcyBSZWN0YW5ndWxhclB1c2hCdXR0b24ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IFpvb21CdXR0b25PcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Wm9vbUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBpbjogdHJ1ZSxcclxuICAgICAgbWFnbmlmeWluZ0dsYXNzT3B0aW9uczogeyBnbGFzc1JhZGl1czogMTUgfSxcclxuXHJcbiAgICAgIC8vIFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbk9wdGlvbnNcclxuICAgICAgYmFzZUNvbG9yOiBQaGV0Q29sb3JTY2hlbWUuQlVUVE9OX1lFTExPVyxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHRhbmRlbU5hbWVTdWZmaXg6ICdCdXR0b24nXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBQbHVzIG9yIG1pbnVzIHNpZ24gaW4gbWlkZGxlIG9mIG1hZ25pZnlpbmcgZ2xhc3NcclxuICAgIGNvbnN0IGdsYXNzUmFkaXVzID0gb3B0aW9ucy5tYWduaWZ5aW5nR2xhc3NPcHRpb25zLmdsYXNzUmFkaXVzITtcclxuICAgIGNvbnN0IHNpZ25PcHRpb25zID0ge1xyXG4gICAgICBzaXplOiBuZXcgRGltZW5zaW9uMiggMS4zICogZ2xhc3NSYWRpdXMsIGdsYXNzUmFkaXVzIC8gMyApXHJcbiAgICB9O1xyXG4gICAgY29uc3QgaWNvbiA9IG9wdGlvbnMuaW4gPyBuZXcgUGx1c05vZGUoIHNpZ25PcHRpb25zICkgOiBuZXcgTWludXNOb2RlKCBzaWduT3B0aW9ucyApO1xyXG5cclxuICAgIG9wdGlvbnMuY29udGVudCA9IG5ldyBNYWduaWZ5aW5nR2xhc3NOb2RlKCBjb21iaW5lT3B0aW9uczxNYWduaWZ5aW5nR2xhc3NOb2RlT3B0aW9ucz4oIHtcclxuICAgICAgaWNvbjogaWNvblxyXG4gICAgfSwgb3B0aW9ucy5tYWduaWZ5aW5nR2xhc3NPcHRpb25zICkgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHN1cHBvcnQgZm9yIGJpbmRlciBkb2N1bWVudGF0aW9uLCBzdHJpcHBlZCBvdXQgaW4gYnVpbGRzIGFuZCBvbmx5IHJ1bnMgd2hlbiA/YmluZGVyIGlzIHNwZWNpZmllZFxyXG4gICAgYXNzZXJ0ICYmIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuYmluZGVyICYmIEluc3RhbmNlUmVnaXN0cnkucmVnaXN0ZXJEYXRhVVJMKCAnc2NlbmVyeS1waGV0JywgJ1pvb21CdXR0b24nLCB0aGlzICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1pvb21CdXR0b24nLCBab29tQnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSwrQkFBK0I7QUFFdEQsT0FBT0MsZ0JBQWdCLE1BQU0seURBQXlEO0FBQ3RGLE9BQU9DLFNBQVMsSUFBSUMsY0FBYyxRQUFRLG9DQUFvQztBQUM5RSxPQUFPQyxxQkFBcUIsTUFBd0Msa0RBQWtEO0FBQ3RILE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsbUJBQW1CLE1BQXNDLDJCQUEyQjtBQUMzRixPQUFPQyxTQUFTLE1BQU0saUJBQWlCO0FBQ3ZDLE9BQU9DLGVBQWUsTUFBTSx1QkFBdUI7QUFDbkQsT0FBT0MsUUFBUSxNQUFNLGdCQUFnQjtBQUNyQyxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBUzNDLGVBQWUsTUFBTUMsVUFBVSxTQUFTUCxxQkFBcUIsQ0FBQztFQUVyRFEsV0FBV0EsQ0FBRUMsZUFBbUMsRUFBRztJQUV4RCxNQUFNQyxPQUFPLEdBQUdaLFNBQVMsQ0FBK0QsQ0FBQyxDQUFFO01BRXpGO01BQ0FhLEVBQUUsRUFBRSxJQUFJO01BQ1JDLHNCQUFzQixFQUFFO1FBQUVDLFdBQVcsRUFBRTtNQUFHLENBQUM7TUFFM0M7TUFDQUMsU0FBUyxFQUFFVixlQUFlLENBQUNXLGFBQWE7TUFDeENDLE1BQU0sRUFBRWYsTUFBTSxDQUFDZ0IsUUFBUTtNQUN2QkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQyxFQUFFVCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1JLFdBQVcsR0FBR0gsT0FBTyxDQUFDRSxzQkFBc0IsQ0FBQ0MsV0FBWTtJQUMvRCxNQUFNTSxXQUFXLEdBQUc7TUFDbEJDLElBQUksRUFBRSxJQUFJeEIsVUFBVSxDQUFFLEdBQUcsR0FBR2lCLFdBQVcsRUFBRUEsV0FBVyxHQUFHLENBQUU7SUFDM0QsQ0FBQztJQUNELE1BQU1RLElBQUksR0FBR1gsT0FBTyxDQUFDQyxFQUFFLEdBQUcsSUFBSU4sUUFBUSxDQUFFYyxXQUFZLENBQUMsR0FBRyxJQUFJaEIsU0FBUyxDQUFFZ0IsV0FBWSxDQUFDO0lBRXBGVCxPQUFPLENBQUNZLE9BQU8sR0FBRyxJQUFJcEIsbUJBQW1CLENBQUVILGNBQWMsQ0FBOEI7TUFDckZzQixJQUFJLEVBQUVBO0lBQ1IsQ0FBQyxFQUFFWCxPQUFPLENBQUNFLHNCQUF1QixDQUFFLENBQUM7SUFFckMsS0FBSyxDQUFFRixPQUFRLENBQUM7O0lBRWhCO0lBQ0FhLE1BQU0sSUFBSUMsSUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQWUsQ0FBQ0MsTUFBTSxJQUFJOUIsZ0JBQWdCLENBQUMrQixlQUFlLENBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxJQUFLLENBQUM7RUFDekg7QUFDRjtBQUVBdEIsV0FBVyxDQUFDdUIsUUFBUSxDQUFFLFlBQVksRUFBRXRCLFVBQVcsQ0FBQyJ9