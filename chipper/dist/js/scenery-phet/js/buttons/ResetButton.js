// Copyright 2016-2022, University of Colorado Boulder

/**
 * A general button, typically used to reset something.
 * Drawn programmatically, does not use any image files.
 *
 * @author John Blanco
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Matrix3 from '../../../dot/js/Matrix3.js';
import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import RoundPushButton from '../../../sun/js/buttons/RoundPushButton.js';
import Tandem from '../../../tandem/js/Tandem.js';
import ResetShape from '../ResetShape.js';
import sceneryPhet from '../sceneryPhet.js';
export default class ResetButton extends RoundPushButton {
  constructor(providedOptions) {
    // radius is used in computation of defaults for other options
    const BUTTON_RADIUS = providedOptions && providedOptions.radius ? providedOptions.radius : 24;
    const options = optionize()({
      // SelfOptions
      radius: BUTTON_RADIUS,
      arrowColor: 'black',
      // RoundPushButtonOptions
      baseColor: 'white',
      xMargin: 6,
      yMargin: 6,
      // NOTE: this should be handled by RoundButton.ThreeDAppearanceStrategy, see https://github.com/phetsims/sun/issues/236
      // The icon doesn't look right when perfectly centered, account for that here, and see docs in RoundButton.
      // The multiplier values were empirically determined.
      xContentOffset: -0.03 * BUTTON_RADIUS,
      yContentOffset: -0.0125 * BUTTON_RADIUS,
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'ResetButton'
    }, providedOptions);

    // icon, with bounds adjusted so that center of circle appears to be centered on button, see sun#235
    const resetShape = new ResetShape(options.radius);
    const resetIcon = new Path(resetShape, {
      fill: options.arrowColor
    });
    const reflectedIcon = new Path(resetShape.transformed(Matrix3.scaling(-1, -1)));
    resetIcon.localBounds = resetIcon.localBounds.union(reflectedIcon.localBounds);
    options.content = resetIcon;
    super(options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'ResetButton', this);
  }
}
sceneryPhet.register('ResetButton', ResetButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiSW5zdGFuY2VSZWdpc3RyeSIsIm9wdGlvbml6ZSIsIlBhdGgiLCJSb3VuZFB1c2hCdXR0b24iLCJUYW5kZW0iLCJSZXNldFNoYXBlIiwic2NlbmVyeVBoZXQiLCJSZXNldEJ1dHRvbiIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwiQlVUVE9OX1JBRElVUyIsInJhZGl1cyIsIm9wdGlvbnMiLCJhcnJvd0NvbG9yIiwiYmFzZUNvbG9yIiwieE1hcmdpbiIsInlNYXJnaW4iLCJ4Q29udGVudE9mZnNldCIsInlDb250ZW50T2Zmc2V0IiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwicmVzZXRTaGFwZSIsInJlc2V0SWNvbiIsImZpbGwiLCJyZWZsZWN0ZWRJY29uIiwidHJhbnNmb3JtZWQiLCJzY2FsaW5nIiwibG9jYWxCb3VuZHMiLCJ1bmlvbiIsImNvbnRlbnQiLCJhc3NlcnQiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVzZXRCdXR0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBnZW5lcmFsIGJ1dHRvbiwgdHlwaWNhbGx5IHVzZWQgdG8gcmVzZXQgc29tZXRoaW5nLlxyXG4gKiBEcmF3biBwcm9ncmFtbWF0aWNhbGx5LCBkb2VzIG5vdCB1c2UgYW55IGltYWdlIGZpbGVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBJbnN0YW5jZVJlZ2lzdHJ5IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9kb2N1bWVudGF0aW9uL0luc3RhbmNlUmVnaXN0cnkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBUQ29sb3IsIFBhdGggfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUm91bmRQdXNoQnV0dG9uLCB7IFJvdW5kUHVzaEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9Sb3VuZFB1c2hCdXR0b24uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUmVzZXRTaGFwZSBmcm9tICcuLi9SZXNldFNoYXBlLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcmFkaXVzPzogbnVtYmVyO1xyXG4gIGFycm93Q29sb3I/OiBUQ29sb3I7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBSZXNldEJ1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8Um91bmRQdXNoQnV0dG9uT3B0aW9ucywgJ2NvbnRlbnQnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc2V0QnV0dG9uIGV4dGVuZHMgUm91bmRQdXNoQnV0dG9uIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBSZXNldEJ1dHRvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gcmFkaXVzIGlzIHVzZWQgaW4gY29tcHV0YXRpb24gb2YgZGVmYXVsdHMgZm9yIG90aGVyIG9wdGlvbnNcclxuICAgIGNvbnN0IEJVVFRPTl9SQURJVVMgPSAoIHByb3ZpZGVkT3B0aW9ucyAmJiBwcm92aWRlZE9wdGlvbnMucmFkaXVzICkgPyBwcm92aWRlZE9wdGlvbnMucmFkaXVzIDogMjQ7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSZXNldEJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSb3VuZFB1c2hCdXR0b25PcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICByYWRpdXM6IEJVVFRPTl9SQURJVVMsXHJcbiAgICAgIGFycm93Q29sb3I6ICdibGFjaycsXHJcblxyXG4gICAgICAvLyBSb3VuZFB1c2hCdXR0b25PcHRpb25zXHJcbiAgICAgIGJhc2VDb2xvcjogJ3doaXRlJyxcclxuICAgICAgeE1hcmdpbjogNixcclxuICAgICAgeU1hcmdpbjogNixcclxuXHJcbiAgICAgIC8vIE5PVEU6IHRoaXMgc2hvdWxkIGJlIGhhbmRsZWQgYnkgUm91bmRCdXR0b24uVGhyZWVEQXBwZWFyYW5jZVN0cmF0ZWd5LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3N1bi9pc3N1ZXMvMjM2XHJcbiAgICAgIC8vIFRoZSBpY29uIGRvZXNuJ3QgbG9vayByaWdodCB3aGVuIHBlcmZlY3RseSBjZW50ZXJlZCwgYWNjb3VudCBmb3IgdGhhdCBoZXJlLCBhbmQgc2VlIGRvY3MgaW4gUm91bmRCdXR0b24uXHJcbiAgICAgIC8vIFRoZSBtdWx0aXBsaWVyIHZhbHVlcyB3ZXJlIGVtcGlyaWNhbGx5IGRldGVybWluZWQuXHJcbiAgICAgIHhDb250ZW50T2Zmc2V0OiAtMC4wMyAqIEJVVFRPTl9SQURJVVMsXHJcbiAgICAgIHlDb250ZW50T2Zmc2V0OiAtMC4wMTI1ICogQlVUVE9OX1JBRElVUyxcclxuXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxyXG4gICAgICB0YW5kZW1OYW1lU3VmZml4OiAnUmVzZXRCdXR0b24nXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBpY29uLCB3aXRoIGJvdW5kcyBhZGp1c3RlZCBzbyB0aGF0IGNlbnRlciBvZiBjaXJjbGUgYXBwZWFycyB0byBiZSBjZW50ZXJlZCBvbiBidXR0b24sIHNlZSBzdW4jMjM1XHJcbiAgICBjb25zdCByZXNldFNoYXBlID0gbmV3IFJlc2V0U2hhcGUoIG9wdGlvbnMucmFkaXVzICk7XHJcbiAgICBjb25zdCByZXNldEljb24gPSBuZXcgUGF0aCggcmVzZXRTaGFwZSwgeyBmaWxsOiBvcHRpb25zLmFycm93Q29sb3IgfSApO1xyXG4gICAgY29uc3QgcmVmbGVjdGVkSWNvbiA9IG5ldyBQYXRoKCByZXNldFNoYXBlLnRyYW5zZm9ybWVkKCBNYXRyaXgzLnNjYWxpbmcoIC0xLCAtMSApICkgKTtcclxuICAgIHJlc2V0SWNvbi5sb2NhbEJvdW5kcyA9IHJlc2V0SWNvbi5sb2NhbEJvdW5kcy51bmlvbiggcmVmbGVjdGVkSWNvbi5sb2NhbEJvdW5kcyApO1xyXG5cclxuICAgIG9wdGlvbnMuY29udGVudCA9IHJlc2V0SWNvbjtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHN1cHBvcnQgZm9yIGJpbmRlciBkb2N1bWVudGF0aW9uLCBzdHJpcHBlZCBvdXQgaW4gYnVpbGRzIGFuZCBvbmx5IHJ1bnMgd2hlbiA/YmluZGVyIGlzIHNwZWNpZmllZFxyXG4gICAgYXNzZXJ0ICYmIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuYmluZGVyICYmIEluc3RhbmNlUmVnaXN0cnkucmVnaXN0ZXJEYXRhVVJMKCAnc2NlbmVyeS1waGV0JywgJ1Jlc2V0QnV0dG9uJywgdGhpcyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdSZXNldEJ1dHRvbicsIFJlc2V0QnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sNEJBQTRCO0FBRWhELE9BQU9DLGdCQUFnQixNQUFNLHlEQUF5RDtBQUN0RixPQUFPQyxTQUFTLE1BQU0sb0NBQW9DO0FBQzFELFNBQWlCQyxJQUFJLFFBQVEsZ0NBQWdDO0FBQzdELE9BQU9DLGVBQWUsTUFBa0MsNENBQTRDO0FBQ3BHLE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsVUFBVSxNQUFNLGtCQUFrQjtBQUN6QyxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBUzNDLGVBQWUsTUFBTUMsV0FBVyxTQUFTSixlQUFlLENBQUM7RUFFaERLLFdBQVdBLENBQUVDLGVBQW9DLEVBQUc7SUFFekQ7SUFDQSxNQUFNQyxhQUFhLEdBQUtELGVBQWUsSUFBSUEsZUFBZSxDQUFDRSxNQUFNLEdBQUtGLGVBQWUsQ0FBQ0UsTUFBTSxHQUFHLEVBQUU7SUFFakcsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQTBELENBQUMsQ0FBRTtNQUVwRjtNQUNBVSxNQUFNLEVBQUVELGFBQWE7TUFDckJHLFVBQVUsRUFBRSxPQUFPO01BRW5CO01BQ0FDLFNBQVMsRUFBRSxPQUFPO01BQ2xCQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxPQUFPLEVBQUUsQ0FBQztNQUVWO01BQ0E7TUFDQTtNQUNBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLEdBQUdQLGFBQWE7TUFDckNRLGNBQWMsRUFBRSxDQUFDLE1BQU0sR0FBR1IsYUFBYTtNQUV2Q1MsTUFBTSxFQUFFZixNQUFNLENBQUNnQixRQUFRO01BQ3ZCQyxnQkFBZ0IsRUFBRTtJQUNwQixDQUFDLEVBQUVaLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTWEsVUFBVSxHQUFHLElBQUlqQixVQUFVLENBQUVPLE9BQU8sQ0FBQ0QsTUFBTyxDQUFDO0lBQ25ELE1BQU1ZLFNBQVMsR0FBRyxJQUFJckIsSUFBSSxDQUFFb0IsVUFBVSxFQUFFO01BQUVFLElBQUksRUFBRVosT0FBTyxDQUFDQztJQUFXLENBQUUsQ0FBQztJQUN0RSxNQUFNWSxhQUFhLEdBQUcsSUFBSXZCLElBQUksQ0FBRW9CLFVBQVUsQ0FBQ0ksV0FBVyxDQUFFM0IsT0FBTyxDQUFDNEIsT0FBTyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFFLENBQUUsQ0FBQztJQUNyRkosU0FBUyxDQUFDSyxXQUFXLEdBQUdMLFNBQVMsQ0FBQ0ssV0FBVyxDQUFDQyxLQUFLLENBQUVKLGFBQWEsQ0FBQ0csV0FBWSxDQUFDO0lBRWhGaEIsT0FBTyxDQUFDa0IsT0FBTyxHQUFHUCxTQUFTO0lBRTNCLEtBQUssQ0FBRVgsT0FBUSxDQUFDOztJQUVoQjtJQUNBbUIsTUFBTSxJQUFJQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDQyxNQUFNLElBQUluQyxnQkFBZ0IsQ0FBQ29DLGVBQWUsQ0FBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLElBQUssQ0FBQztFQUMxSDtBQUNGO0FBRUE5QixXQUFXLENBQUMrQixRQUFRLENBQUUsYUFBYSxFQUFFOUIsV0FBWSxDQUFDIn0=