// Copyright 2014-2022, University of Colorado Boulder

/**
 * Button that is intended to indicate going backwards, much like the back button on a web browser.  It was originally
 * created for returning to the level selection screen when playing a game.  It looks like a button with an arrow
 * pointing to the left.
 *
 * @author John Blanco
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import SoundClip from '../../../tambo/js/sound-generators/SoundClip.js';
import soundManager from '../../../tambo/js/soundManager.js';
import goBack_mp3 from '../../sounds/goBack_mp3.js';
import ArrowShape from '../ArrowShape.js';
import PhetColorScheme from '../PhetColorScheme.js';
import sceneryPhet from '../sceneryPhet.js';
export default class BackButton extends RectangularPushButton {
  constructor(providedOptions) {
    const options = optionize()({
      // Default margin values were set up to make this button match the size of the refresh button, since these
      // buttons often appear together.  See see https://github.com/phetsims/scenery-phet/issues/44.
      xMargin: 8,
      yMargin: 10.9,
      baseColor: PhetColorScheme.BUTTON_YELLOW
    }, providedOptions);

    // Create and add the default sound generator if none was provided.
    if (!options.soundPlayer) {
      const goBackSoundClip = new SoundClip(goBack_mp3, {
        initialOutputLevel: 0.35
      });
      soundManager.addSoundGenerator(goBackSoundClip, {
        categoryName: 'user-interface'
      });
      options.soundPlayer = goBackSoundClip;
    }
    const arrowShape = new ArrowShape(0, 0, -28.5, 0, {
      tailWidth: 8,
      headWidth: 18,
      headHeight: 15
    });
    options.content = new Path(arrowShape, {
      fill: 'black'
    });
    super(options);
  }
}
sceneryPhet.register('BackButton', BackButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQYXRoIiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwiU291bmRDbGlwIiwic291bmRNYW5hZ2VyIiwiZ29CYWNrX21wMyIsIkFycm93U2hhcGUiLCJQaGV0Q29sb3JTY2hlbWUiLCJzY2VuZXJ5UGhldCIsIkJhY2tCdXR0b24iLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImJhc2VDb2xvciIsIkJVVFRPTl9ZRUxMT1ciLCJzb3VuZFBsYXllciIsImdvQmFja1NvdW5kQ2xpcCIsImluaXRpYWxPdXRwdXRMZXZlbCIsImFkZFNvdW5kR2VuZXJhdG9yIiwiY2F0ZWdvcnlOYW1lIiwiYXJyb3dTaGFwZSIsInRhaWxXaWR0aCIsImhlYWRXaWR0aCIsImhlYWRIZWlnaHQiLCJjb250ZW50IiwiZmlsbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFja0J1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCdXR0b24gdGhhdCBpcyBpbnRlbmRlZCB0byBpbmRpY2F0ZSBnb2luZyBiYWNrd2FyZHMsIG11Y2ggbGlrZSB0aGUgYmFjayBidXR0b24gb24gYSB3ZWIgYnJvd3Nlci4gIEl0IHdhcyBvcmlnaW5hbGx5XHJcbiAqIGNyZWF0ZWQgZm9yIHJldHVybmluZyB0byB0aGUgbGV2ZWwgc2VsZWN0aW9uIHNjcmVlbiB3aGVuIHBsYXlpbmcgYSBnYW1lLiAgSXQgbG9va3MgbGlrZSBhIGJ1dHRvbiB3aXRoIGFuIGFycm93XHJcbiAqIHBvaW50aW5nIHRvIHRoZSBsZWZ0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiwgeyBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IFRTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9UU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgU291bmRDbGlwIGZyb20gJy4uLy4uLy4uL3RhbWJvL2pzL3NvdW5kLWdlbmVyYXRvcnMvU291bmRDbGlwLmpzJztcclxuaW1wb3J0IHNvdW5kTWFuYWdlciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9zb3VuZE1hbmFnZXIuanMnO1xyXG5pbXBvcnQgZ29CYWNrX21wMyBmcm9tICcuLi8uLi9zb3VuZHMvZ29CYWNrX21wMy5qcyc7XHJcbmltcG9ydCBBcnJvd1NoYXBlIGZyb20gJy4uL0Fycm93U2hhcGUuanMnO1xyXG5pbXBvcnQgUGhldENvbG9yU2NoZW1lIGZyb20gJy4uL1BoZXRDb2xvclNjaGVtZS5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi9zY2VuZXJ5UGhldC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNvdW5kUGxheWVyPzogVFNvdW5kUGxheWVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQmFja0J1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8UmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucywgJ2NvbnRlbnQnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhY2tCdXR0b24gZXh0ZW5kcyBSZWN0YW5ndWxhclB1c2hCdXR0b24ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IEJhY2tCdXR0b25PcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QmFja0J1dHRvbk9wdGlvbnMsIFN0cmljdE9taXQ8U2VsZk9wdGlvbnMsICdzb3VuZFBsYXllcic+LCBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBEZWZhdWx0IG1hcmdpbiB2YWx1ZXMgd2VyZSBzZXQgdXAgdG8gbWFrZSB0aGlzIGJ1dHRvbiBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgcmVmcmVzaCBidXR0b24sIHNpbmNlIHRoZXNlXHJcbiAgICAgIC8vIGJ1dHRvbnMgb2Z0ZW4gYXBwZWFyIHRvZ2V0aGVyLiAgU2VlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc2NlbmVyeS1waGV0L2lzc3Vlcy80NC5cclxuICAgICAgeE1hcmdpbjogOCxcclxuICAgICAgeU1hcmdpbjogMTAuOSxcclxuXHJcbiAgICAgIGJhc2VDb2xvcjogUGhldENvbG9yU2NoZW1lLkJVVFRPTl9ZRUxMT1dcclxuXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYW5kIGFkZCB0aGUgZGVmYXVsdCBzb3VuZCBnZW5lcmF0b3IgaWYgbm9uZSB3YXMgcHJvdmlkZWQuXHJcbiAgICBpZiAoICFvcHRpb25zLnNvdW5kUGxheWVyICkge1xyXG4gICAgICBjb25zdCBnb0JhY2tTb3VuZENsaXAgPSBuZXcgU291bmRDbGlwKCBnb0JhY2tfbXAzLCB7IGluaXRpYWxPdXRwdXRMZXZlbDogMC4zNSB9ICk7XHJcbiAgICAgIHNvdW5kTWFuYWdlci5hZGRTb3VuZEdlbmVyYXRvciggZ29CYWNrU291bmRDbGlwLCB7IGNhdGVnb3J5TmFtZTogJ3VzZXItaW50ZXJmYWNlJyB9ICk7XHJcbiAgICAgIG9wdGlvbnMuc291bmRQbGF5ZXIgPSBnb0JhY2tTb3VuZENsaXA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXJyb3dTaGFwZSA9IG5ldyBBcnJvd1NoYXBlKCAwLCAwLCAtMjguNSwgMCwge1xyXG4gICAgICB0YWlsV2lkdGg6IDgsXHJcbiAgICAgIGhlYWRXaWR0aDogMTgsXHJcbiAgICAgIGhlYWRIZWlnaHQ6IDE1XHJcbiAgICB9ICk7XHJcbiAgICBvcHRpb25zLmNvbnRlbnQgPSBuZXcgUGF0aCggYXJyb3dTaGFwZSwgeyBmaWxsOiAnYmxhY2snIH0gKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdCYWNrQnV0dG9uJywgQmFja0J1dHRvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sb0NBQW9DO0FBRTFELFNBQVNDLElBQUksUUFBUSxnQ0FBZ0M7QUFDckQsT0FBT0MscUJBQXFCLE1BQXdDLGtEQUFrRDtBQUV0SCxPQUFPQyxTQUFTLE1BQU0saURBQWlEO0FBQ3ZFLE9BQU9DLFlBQVksTUFBTSxtQ0FBbUM7QUFDNUQsT0FBT0MsVUFBVSxNQUFNLDRCQUE0QjtBQUNuRCxPQUFPQyxVQUFVLE1BQU0sa0JBQWtCO0FBQ3pDLE9BQU9DLGVBQWUsTUFBTSx1QkFBdUI7QUFDbkQsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQVEzQyxlQUFlLE1BQU1DLFVBQVUsU0FBU1AscUJBQXFCLENBQUM7RUFFckRRLFdBQVdBLENBQUVDLGVBQW1DLEVBQUc7SUFFeEQsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQTBGLENBQUMsQ0FBRTtNQUVwSDtNQUNBO01BQ0FhLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLE9BQU8sRUFBRSxJQUFJO01BRWJDLFNBQVMsRUFBRVIsZUFBZSxDQUFDUztJQUU3QixDQUFDLEVBQUVMLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsSUFBSyxDQUFDQyxPQUFPLENBQUNLLFdBQVcsRUFBRztNQUMxQixNQUFNQyxlQUFlLEdBQUcsSUFBSWYsU0FBUyxDQUFFRSxVQUFVLEVBQUU7UUFBRWMsa0JBQWtCLEVBQUU7TUFBSyxDQUFFLENBQUM7TUFDakZmLFlBQVksQ0FBQ2dCLGlCQUFpQixDQUFFRixlQUFlLEVBQUU7UUFBRUcsWUFBWSxFQUFFO01BQWlCLENBQUUsQ0FBQztNQUNyRlQsT0FBTyxDQUFDSyxXQUFXLEdBQUdDLGVBQWU7SUFDdkM7SUFFQSxNQUFNSSxVQUFVLEdBQUcsSUFBSWhCLFVBQVUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtNQUNqRGlCLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFNBQVMsRUFBRSxFQUFFO01BQ2JDLFVBQVUsRUFBRTtJQUNkLENBQUUsQ0FBQztJQUNIYixPQUFPLENBQUNjLE9BQU8sR0FBRyxJQUFJekIsSUFBSSxDQUFFcUIsVUFBVSxFQUFFO01BQUVLLElBQUksRUFBRTtJQUFRLENBQUUsQ0FBQztJQUUzRCxLQUFLLENBQUVmLE9BQVEsQ0FBQztFQUNsQjtBQUNGO0FBRUFKLFdBQVcsQ0FBQ29CLFFBQVEsQ0FBRSxZQUFZLEVBQUVuQixVQUFXLENBQUMifQ==