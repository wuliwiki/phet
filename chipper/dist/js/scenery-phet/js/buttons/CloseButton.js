// Copyright 2015-2022, University of Colorado Boulder

/**
 * Close button, red with a white 'X'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author John Blanco (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import { Shape } from '../../../kite/js/imports.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import PhetColorScheme from '../PhetColorScheme.js';
import sceneryPhet from '../sceneryPhet.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
export default class CloseButton extends RectangularPushButton {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      iconLength: 16,
      pathOptions: {
        stroke: 'white',
        lineWidth: 2.5,
        lineCap: 'round'
      },
      // RectangularPushButton options
      baseColor: PhetColorScheme.RED_COLORBLIND,
      xMargin: 4,
      // {number} x margin around the icon
      yMargin: 4,
      // {number} y margin around the icon

      // pdom
      innerContent: SceneryPhetStrings.a11y.closeStringProperty,
      //voicing
      voicingNameResponse: SceneryPhetStrings.a11y.closeStringProperty
    }, providedOptions);

    // 'X' icon
    const xShape = new Shape().moveTo(-options.iconLength / 2, -options.iconLength / 2).lineTo(options.iconLength / 2, options.iconLength / 2).moveTo(options.iconLength / 2, -options.iconLength / 2).lineTo(-options.iconLength / 2, options.iconLength / 2);
    options.content = new Path(xShape, options.pathOptions);
    super(options);
  }
}
sceneryPhet.register('CloseButton', CloseButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIlBhdGgiLCJSZWN0YW5ndWxhclB1c2hCdXR0b24iLCJQaGV0Q29sb3JTY2hlbWUiLCJzY2VuZXJ5UGhldCIsIlNjZW5lcnlQaGV0U3RyaW5ncyIsIkNsb3NlQnV0dG9uIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaWNvbkxlbmd0aCIsInBhdGhPcHRpb25zIiwic3Ryb2tlIiwibGluZVdpZHRoIiwibGluZUNhcCIsImJhc2VDb2xvciIsIlJFRF9DT0xPUkJMSU5EIiwieE1hcmdpbiIsInlNYXJnaW4iLCJpbm5lckNvbnRlbnQiLCJhMTF5IiwiY2xvc2VTdHJpbmdQcm9wZXJ0eSIsInZvaWNpbmdOYW1lUmVzcG9uc2UiLCJ4U2hhcGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjb250ZW50IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDbG9zZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDbG9zZSBidXR0b24sIHJlZCB3aXRoIGEgd2hpdGUgJ1gnLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgUGF0aCwgUGF0aE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLCB7IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclB1c2hCdXR0b24uanMnO1xyXG5pbXBvcnQgUGhldENvbG9yU2NoZW1lIGZyb20gJy4uL1BoZXRDb2xvclNjaGVtZS5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCBTY2VuZXJ5UGhldFN0cmluZ3MgZnJvbSAnLi4vU2NlbmVyeVBoZXRTdHJpbmdzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgaWNvbkxlbmd0aD86IG51bWJlcjsgLy8gbGVuZ3RoIG9mIHRoZSAnWCcgaWNvbiwgd2hvc2UgYm91bmRzIGFyZSBzcXVhcmVcclxuICBwYXRoT3B0aW9ucz86IFBhdGhPcHRpb25zOyAvLyBvcHRpb25zIHBhc3NlZCBhbG9uZyB0byB0aGUgUGF0aCBmb3IgdGhlICdYJ1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQ2xvc2VCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbk9wdGlvbnMsICdjb250ZW50Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbG9zZUJ1dHRvbiBleHRlbmRzIFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogQ2xvc2VCdXR0b25PcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Q2xvc2VCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgaWNvbkxlbmd0aDogMTYsXHJcbiAgICAgIHBhdGhPcHRpb25zOiB7XHJcbiAgICAgICAgc3Ryb2tlOiAnd2hpdGUnLFxyXG4gICAgICAgIGxpbmVXaWR0aDogMi41LFxyXG4gICAgICAgIGxpbmVDYXA6ICdyb3VuZCdcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiBvcHRpb25zXHJcbiAgICAgIGJhc2VDb2xvcjogUGhldENvbG9yU2NoZW1lLlJFRF9DT0xPUkJMSU5ELFxyXG4gICAgICB4TWFyZ2luOiA0LCAvLyB7bnVtYmVyfSB4IG1hcmdpbiBhcm91bmQgdGhlIGljb25cclxuICAgICAgeU1hcmdpbjogNCwgLy8ge251bWJlcn0geSBtYXJnaW4gYXJvdW5kIHRoZSBpY29uXHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIGlubmVyQ29udGVudDogU2NlbmVyeVBoZXRTdHJpbmdzLmExMXkuY2xvc2VTdHJpbmdQcm9wZXJ0eSxcclxuXHJcbiAgICAgIC8vdm9pY2luZ1xyXG4gICAgICB2b2ljaW5nTmFtZVJlc3BvbnNlOiBTY2VuZXJ5UGhldFN0cmluZ3MuYTExeS5jbG9zZVN0cmluZ1Byb3BlcnR5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyAnWCcgaWNvblxyXG4gICAgY29uc3QgeFNoYXBlID0gbmV3IFNoYXBlKClcclxuICAgICAgLm1vdmVUbyggLW9wdGlvbnMuaWNvbkxlbmd0aCAvIDIsIC1vcHRpb25zLmljb25MZW5ndGggLyAyIClcclxuICAgICAgLmxpbmVUbyggb3B0aW9ucy5pY29uTGVuZ3RoIC8gMiwgb3B0aW9ucy5pY29uTGVuZ3RoIC8gMiApXHJcbiAgICAgIC5tb3ZlVG8oIG9wdGlvbnMuaWNvbkxlbmd0aCAvIDIsIC1vcHRpb25zLmljb25MZW5ndGggLyAyIClcclxuICAgICAgLmxpbmVUbyggLW9wdGlvbnMuaWNvbkxlbmd0aCAvIDIsIG9wdGlvbnMuaWNvbkxlbmd0aCAvIDIgKTtcclxuICAgIG9wdGlvbnMuY29udGVudCA9IG5ldyBQYXRoKCB4U2hhcGUsIG9wdGlvbnMucGF0aE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdDbG9zZUJ1dHRvbicsIENsb3NlQnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsNkJBQTZCO0FBRW5ELE9BQU9DLFNBQVMsTUFBTSxvQ0FBb0M7QUFDMUQsU0FBU0MsSUFBSSxRQUFxQixnQ0FBZ0M7QUFDbEUsT0FBT0MscUJBQXFCLE1BQXdDLGtEQUFrRDtBQUN0SCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7QUFDM0MsT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBU3pELGVBQWUsTUFBTUMsV0FBVyxTQUFTSixxQkFBcUIsQ0FBQztFQUV0REssV0FBV0EsQ0FBRUMsZUFBb0MsRUFBRztJQUV6RCxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBZ0UsQ0FBQyxDQUFFO01BRTFGO01BQ0FVLFVBQVUsRUFBRSxFQUFFO01BQ2RDLFdBQVcsRUFBRTtRQUNYQyxNQUFNLEVBQUUsT0FBTztRQUNmQyxTQUFTLEVBQUUsR0FBRztRQUNkQyxPQUFPLEVBQUU7TUFDWCxDQUFDO01BRUQ7TUFDQUMsU0FBUyxFQUFFWixlQUFlLENBQUNhLGNBQWM7TUFDekNDLE9BQU8sRUFBRSxDQUFDO01BQUU7TUFDWkMsT0FBTyxFQUFFLENBQUM7TUFBRTs7TUFFWjtNQUNBQyxZQUFZLEVBQUVkLGtCQUFrQixDQUFDZSxJQUFJLENBQUNDLG1CQUFtQjtNQUV6RDtNQUNBQyxtQkFBbUIsRUFBRWpCLGtCQUFrQixDQUFDZSxJQUFJLENBQUNDO0lBQy9DLENBQUMsRUFBRWIsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNZSxNQUFNLEdBQUcsSUFBSXhCLEtBQUssQ0FBQyxDQUFDLENBQ3ZCeUIsTUFBTSxDQUFFLENBQUNmLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLENBQUMsRUFBRSxDQUFDRCxPQUFPLENBQUNDLFVBQVUsR0FBRyxDQUFFLENBQUMsQ0FDMURlLE1BQU0sQ0FBRWhCLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLENBQUMsRUFBRUQsT0FBTyxDQUFDQyxVQUFVLEdBQUcsQ0FBRSxDQUFDLENBQ3hEYyxNQUFNLENBQUVmLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLENBQUMsRUFBRSxDQUFDRCxPQUFPLENBQUNDLFVBQVUsR0FBRyxDQUFFLENBQUMsQ0FDekRlLE1BQU0sQ0FBRSxDQUFDaEIsT0FBTyxDQUFDQyxVQUFVLEdBQUcsQ0FBQyxFQUFFRCxPQUFPLENBQUNDLFVBQVUsR0FBRyxDQUFFLENBQUM7SUFDNURELE9BQU8sQ0FBQ2lCLE9BQU8sR0FBRyxJQUFJekIsSUFBSSxDQUFFc0IsTUFBTSxFQUFFZCxPQUFPLENBQUNFLFdBQVksQ0FBQztJQUV6RCxLQUFLLENBQUVGLE9BQVEsQ0FBQztFQUNsQjtBQUNGO0FBRUFMLFdBQVcsQ0FBQ3VCLFFBQVEsQ0FBRSxhQUFhLEVBQUVyQixXQUFZLENBQUMifQ==