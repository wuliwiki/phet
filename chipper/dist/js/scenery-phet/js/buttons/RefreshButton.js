// Copyright 2018-2022, University of Colorado Boulder

/**
 * Standard PhET button for 'refresh'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import syncAltSolidShape from '../../../sherpa/js/fontawesome-5/syncAltSolidShape.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import PhetColorScheme from '../PhetColorScheme.js';
import sceneryPhet from '../sceneryPhet.js';
export default class RefreshButton extends RectangularPushButton {
  constructor(providedOptions) {
    const options = optionize()({
      // RefreshButtonOptions
      iconHeight: 35,
      // RectangularPushButtonOptions
      baseColor: PhetColorScheme.BUTTON_YELLOW,
      tandemNameSuffix: 'RefreshButton'
    }, providedOptions);
    options.content = new Path(syncAltSolidShape, {
      fill: 'black'
    });
    options.content.setScaleMagnitude(options.iconHeight / options.content.height);
    super(options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'RefreshButton', this);
  }
}
sceneryPhet.register('RefreshButton', RefreshButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiUGF0aCIsInN5bmNBbHRTb2xpZFNoYXBlIiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwiUGhldENvbG9yU2NoZW1lIiwic2NlbmVyeVBoZXQiLCJSZWZyZXNoQnV0dG9uIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaWNvbkhlaWdodCIsImJhc2VDb2xvciIsIkJVVFRPTl9ZRUxMT1ciLCJ0YW5kZW1OYW1lU3VmZml4IiwiY29udGVudCIsImZpbGwiLCJzZXRTY2FsZU1hZ25pdHVkZSIsImhlaWdodCIsImFzc2VydCIsInBoZXQiLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiYmluZGVyIiwicmVnaXN0ZXJEYXRhVVJMIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWZyZXNoQnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFN0YW5kYXJkIFBoRVQgYnV0dG9uIGZvciAncmVmcmVzaCcuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgUGF0aCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzeW5jQWx0U29saWRTaGFwZSBmcm9tICcuLi8uLi8uLi9zaGVycGEvanMvZm9udGF3ZXNvbWUtNS9zeW5jQWx0U29saWRTaGFwZS5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclB1c2hCdXR0b24sIHsgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBQaGV0Q29sb3JTY2hlbWUgZnJvbSAnLi4vUGhldENvbG9yU2NoZW1lLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgaWNvbkhlaWdodD86IG51bWJlcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFJlZnJlc2hCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbk9wdGlvbnMsICdjb250ZW50Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZyZXNoQnV0dG9uIGV4dGVuZHMgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBSZWZyZXNoQnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFJlZnJlc2hCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUmVmcmVzaEJ1dHRvbk9wdGlvbnNcclxuICAgICAgaWNvbkhlaWdodDogMzUsXHJcblxyXG4gICAgICAvLyBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zXHJcbiAgICAgIGJhc2VDb2xvcjogUGhldENvbG9yU2NoZW1lLkJVVFRPTl9ZRUxMT1csXHJcblxyXG4gICAgICB0YW5kZW1OYW1lU3VmZml4OiAnUmVmcmVzaEJ1dHRvbidcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIG9wdGlvbnMuY29udGVudCA9IG5ldyBQYXRoKCBzeW5jQWx0U29saWRTaGFwZSwge1xyXG4gICAgICBmaWxsOiAnYmxhY2snXHJcbiAgICB9ICk7XHJcbiAgICBvcHRpb25zLmNvbnRlbnQuc2V0U2NhbGVNYWduaXR1ZGUoIG9wdGlvbnMuaWNvbkhlaWdodCAvIG9wdGlvbnMuY29udGVudC5oZWlnaHQgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHN1cHBvcnQgZm9yIGJpbmRlciBkb2N1bWVudGF0aW9uLCBzdHJpcHBlZCBvdXQgaW4gYnVpbGRzIGFuZCBvbmx5IHJ1bnMgd2hlbiA/YmluZGVyIGlzIHNwZWNpZmllZFxyXG4gICAgYXNzZXJ0ICYmIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuYmluZGVyICYmIEluc3RhbmNlUmVnaXN0cnkucmVnaXN0ZXJEYXRhVVJMKCAnc2NlbmVyeS1waGV0JywgJ1JlZnJlc2hCdXR0b24nLCB0aGlzICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1JlZnJlc2hCdXR0b24nLCBSZWZyZXNoQnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGdCQUFnQixNQUFNLHlEQUF5RDtBQUV0RixPQUFPQyxTQUFTLE1BQU0sb0NBQW9DO0FBQzFELFNBQVNDLElBQUksUUFBUSxnQ0FBZ0M7QUFDckQsT0FBT0MsaUJBQWlCLE1BQU0sdURBQXVEO0FBQ3JGLE9BQU9DLHFCQUFxQixNQUF3QyxrREFBa0Q7QUFDdEgsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBUTNDLGVBQWUsTUFBTUMsYUFBYSxTQUFTSCxxQkFBcUIsQ0FBQztFQUV4REksV0FBV0EsQ0FBRUMsZUFBc0MsRUFBRztJQUUzRCxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBa0UsQ0FBQyxDQUFFO01BRTVGO01BQ0FVLFVBQVUsRUFBRSxFQUFFO01BRWQ7TUFDQUMsU0FBUyxFQUFFUCxlQUFlLENBQUNRLGFBQWE7TUFFeENDLGdCQUFnQixFQUFFO0lBQ3BCLENBQUMsRUFBRUwsZUFBZ0IsQ0FBQztJQUVwQkMsT0FBTyxDQUFDSyxPQUFPLEdBQUcsSUFBSWIsSUFBSSxDQUFFQyxpQkFBaUIsRUFBRTtNQUM3Q2EsSUFBSSxFQUFFO0lBQ1IsQ0FBRSxDQUFDO0lBQ0hOLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDRSxpQkFBaUIsQ0FBRVAsT0FBTyxDQUFDQyxVQUFVLEdBQUdELE9BQU8sQ0FBQ0ssT0FBTyxDQUFDRyxNQUFPLENBQUM7SUFFaEYsS0FBSyxDQUFFUixPQUFRLENBQUM7O0lBRWhCO0lBQ0FTLE1BQU0sSUFBSUMsSUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQWUsQ0FBQ0MsTUFBTSxJQUFJdkIsZ0JBQWdCLENBQUN3QixlQUFlLENBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxJQUFLLENBQUM7RUFDNUg7QUFDRjtBQUVBbEIsV0FBVyxDQUFDbUIsUUFBUSxDQUFFLGVBQWUsRUFBRWxCLGFBQWMsQ0FBQyJ9