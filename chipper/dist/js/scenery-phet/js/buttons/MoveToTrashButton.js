// Copyright 2017-2022, University of Colorado Boulder

/**
 * MoveToTrashButton is a push button whose icon means 'move to trash'.
 * The arrow can be color-coded to the thing being deleted by setting options.arrowColor.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Node, Path } from '../../../scenery/js/imports.js';
import trashAltRegularShape from '../../../sherpa/js/fontawesome-5/trashAltRegularShape.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import CurvedArrowShape from '../CurvedArrowShape.js';
import sceneryPhet from '../sceneryPhet.js';
export default class MoveToTrashButton extends RectangularPushButton {
  constructor(providedOptions) {
    const options = optionize()({
      // MoveToTrashButtonOptions
      arrowColor: 'black',
      iconScale: 0.46
    }, providedOptions);
    const trashNode = new Path(trashAltRegularShape, {
      fill: 'black',
      scale: 0.08
    });
    const arrowShape = new CurvedArrowShape(10, -0.9 * Math.PI, -0.2 * Math.PI, {
      headWidth: 12,
      tailWidth: 4
    });
    const arrowPath = new Path(arrowShape, {
      fill: options.arrowColor,
      right: trashNode.left + 0.75 * trashNode.width,
      // a bit to the left of center
      bottom: trashNode.top
    });
    options.content = new Node({
      children: [trashNode, arrowPath],
      scale: options.iconScale
    });
    super(options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'MoveToTrashButton', this);
  }
}
sceneryPhet.register('MoveToTrashButton', MoveToTrashButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiTm9kZSIsIlBhdGgiLCJ0cmFzaEFsdFJlZ3VsYXJTaGFwZSIsIlJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiIsIkN1cnZlZEFycm93U2hhcGUiLCJzY2VuZXJ5UGhldCIsIk1vdmVUb1RyYXNoQnV0dG9uIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYXJyb3dDb2xvciIsImljb25TY2FsZSIsInRyYXNoTm9kZSIsImZpbGwiLCJzY2FsZSIsImFycm93U2hhcGUiLCJNYXRoIiwiUEkiLCJoZWFkV2lkdGgiLCJ0YWlsV2lkdGgiLCJhcnJvd1BhdGgiLCJyaWdodCIsImxlZnQiLCJ3aWR0aCIsImJvdHRvbSIsInRvcCIsImNvbnRlbnQiLCJjaGlsZHJlbiIsImFzc2VydCIsInBoZXQiLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiYmluZGVyIiwicmVnaXN0ZXJEYXRhVVJMIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNb3ZlVG9UcmFzaEJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb3ZlVG9UcmFzaEJ1dHRvbiBpcyBhIHB1c2ggYnV0dG9uIHdob3NlIGljb24gbWVhbnMgJ21vdmUgdG8gdHJhc2gnLlxyXG4gKiBUaGUgYXJyb3cgY2FuIGJlIGNvbG9yLWNvZGVkIHRvIHRoZSB0aGluZyBiZWluZyBkZWxldGVkIGJ5IHNldHRpbmcgb3B0aW9ucy5hcnJvd0NvbG9yLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgVENvbG9yLCBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHRyYXNoQWx0UmVndWxhclNoYXBlIGZyb20gJy4uLy4uLy4uL3NoZXJwYS9qcy9mb250YXdlc29tZS01L3RyYXNoQWx0UmVndWxhclNoYXBlLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiwgeyBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IEN1cnZlZEFycm93U2hhcGUgZnJvbSAnLi4vQ3VydmVkQXJyb3dTaGFwZS5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi9zY2VuZXJ5UGhldC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGFycm93Q29sb3I/OiBUQ29sb3I7XHJcbiAgaWNvblNjYWxlPzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgTW92ZVRvVHJhc2hCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbk9wdGlvbnMsICdjb250ZW50Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb3ZlVG9UcmFzaEJ1dHRvbiBleHRlbmRzIFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogTW92ZVRvVHJhc2hCdXR0b25PcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TW92ZVRvVHJhc2hCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTW92ZVRvVHJhc2hCdXR0b25PcHRpb25zXHJcbiAgICAgIGFycm93Q29sb3I6ICdibGFjaycsXHJcblxyXG4gICAgICBpY29uU2NhbGU6IDAuNDZcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHRyYXNoTm9kZSA9IG5ldyBQYXRoKCB0cmFzaEFsdFJlZ3VsYXJTaGFwZSwge1xyXG4gICAgICBmaWxsOiAnYmxhY2snLFxyXG4gICAgICBzY2FsZTogMC4wOFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGFycm93U2hhcGUgPSBuZXcgQ3VydmVkQXJyb3dTaGFwZSggMTAsIC0wLjkgKiBNYXRoLlBJLCAtMC4yICogTWF0aC5QSSwge1xyXG4gICAgICBoZWFkV2lkdGg6IDEyLFxyXG4gICAgICB0YWlsV2lkdGg6IDRcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBhcnJvd1BhdGggPSBuZXcgUGF0aCggYXJyb3dTaGFwZSwge1xyXG4gICAgICBmaWxsOiBvcHRpb25zLmFycm93Q29sb3IsXHJcbiAgICAgIHJpZ2h0OiB0cmFzaE5vZGUubGVmdCArICggMC43NSAqIHRyYXNoTm9kZS53aWR0aCApLCAvLyBhIGJpdCB0byB0aGUgbGVmdCBvZiBjZW50ZXJcclxuICAgICAgYm90dG9tOiB0cmFzaE5vZGUudG9wXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jb250ZW50ID0gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgdHJhc2hOb2RlLCBhcnJvd1BhdGggXSxcclxuICAgICAgc2NhbGU6IG9wdGlvbnMuaWNvblNjYWxlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBzdXBwb3J0IGZvciBiaW5kZXIgZG9jdW1lbnRhdGlvbiwgc3RyaXBwZWQgb3V0IGluIGJ1aWxkcyBhbmQgb25seSBydW5zIHdoZW4gP2JpbmRlciBpcyBzcGVjaWZpZWRcclxuICAgIGFzc2VydCAmJiBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLmJpbmRlciAmJiBJbnN0YW5jZVJlZ2lzdHJ5LnJlZ2lzdGVyRGF0YVVSTCggJ3NjZW5lcnktcGhldCcsICdNb3ZlVG9UcmFzaEJ1dHRvbicsIHRoaXMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnTW92ZVRvVHJhc2hCdXR0b24nLCBNb3ZlVG9UcmFzaEJ1dHRvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZ0JBQWdCLE1BQU0seURBQXlEO0FBRXRGLE9BQU9DLFNBQVMsTUFBTSxvQ0FBb0M7QUFDMUQsU0FBaUJDLElBQUksRUFBRUMsSUFBSSxRQUFRLGdDQUFnQztBQUNuRSxPQUFPQyxvQkFBb0IsTUFBTSwwREFBMEQ7QUFDM0YsT0FBT0MscUJBQXFCLE1BQXdDLGtEQUFrRDtBQUN0SCxPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFDckQsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQVMzQyxlQUFlLE1BQU1DLGlCQUFpQixTQUFTSCxxQkFBcUIsQ0FBQztFQUU1REksV0FBV0EsQ0FBRUMsZUFBMEMsRUFBRztJQUUvRCxNQUFNQyxPQUFPLEdBQUdWLFNBQVMsQ0FBc0UsQ0FBQyxDQUFFO01BRWhHO01BQ0FXLFVBQVUsRUFBRSxPQUFPO01BRW5CQyxTQUFTLEVBQUU7SUFDYixDQUFDLEVBQUVILGVBQWdCLENBQUM7SUFFcEIsTUFBTUksU0FBUyxHQUFHLElBQUlYLElBQUksQ0FBRUMsb0JBQW9CLEVBQUU7TUFDaERXLElBQUksRUFBRSxPQUFPO01BQ2JDLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQztJQUVILE1BQU1DLFVBQVUsR0FBRyxJQUFJWCxnQkFBZ0IsQ0FBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUdZLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHRCxJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUMzRUMsU0FBUyxFQUFFLEVBQUU7TUFDYkMsU0FBUyxFQUFFO0lBQ2IsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsU0FBUyxHQUFHLElBQUluQixJQUFJLENBQUVjLFVBQVUsRUFBRTtNQUN0Q0YsSUFBSSxFQUFFSixPQUFPLENBQUNDLFVBQVU7TUFDeEJXLEtBQUssRUFBRVQsU0FBUyxDQUFDVSxJQUFJLEdBQUssSUFBSSxHQUFHVixTQUFTLENBQUNXLEtBQU87TUFBRTtNQUNwREMsTUFBTSxFQUFFWixTQUFTLENBQUNhO0lBQ3BCLENBQUUsQ0FBQztJQUVIaEIsT0FBTyxDQUFDaUIsT0FBTyxHQUFHLElBQUkxQixJQUFJLENBQUU7TUFDMUIyQixRQUFRLEVBQUUsQ0FBRWYsU0FBUyxFQUFFUSxTQUFTLENBQUU7TUFDbENOLEtBQUssRUFBRUwsT0FBTyxDQUFDRTtJQUNqQixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVGLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQW1CLE1BQU0sSUFBSUMsSUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQWUsQ0FBQ0MsTUFBTSxJQUFJbEMsZ0JBQWdCLENBQUNtQyxlQUFlLENBQUUsY0FBYyxFQUFFLG1CQUFtQixFQUFFLElBQUssQ0FBQztFQUNoSTtBQUNGO0FBRUE1QixXQUFXLENBQUM2QixRQUFRLENBQUUsbUJBQW1CLEVBQUU1QixpQkFBa0IsQ0FBQyJ9