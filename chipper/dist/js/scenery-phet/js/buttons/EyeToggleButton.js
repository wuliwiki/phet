// Copyright 2016-2022, University of Colorado Boulder

/**
 * Button that toggles between an open and closed eyeball, used to control the visibility of something.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Node, Path } from '../../../scenery/js/imports.js';
import eyeSlashSolidShape from '../../../sherpa/js/fontawesome-5/eyeSlashSolidShape.js';
import eyeSolidShape from '../../../sherpa/js/fontawesome-5/eyeSolidShape.js';
import RectangularToggleButton from '../../../sun/js/buttons/RectangularToggleButton.js';
import sceneryPhet from '../sceneryPhet.js';
export default class EyeToggleButton extends RectangularToggleButton {
  /**
   * @param eyeOpenProperty - true: eye is open; false: eye is closed
   * @param providedOptions
   */
  constructor(eyeOpenProperty, providedOptions) {
    const options = optionize()({}, providedOptions);

    // icons
    const iconOptions = {
      scale: 0.08,
      fill: 'black'
    };
    const eyeOpenNode = new Path(eyeSolidShape, iconOptions);
    const eyeCloseNode = new Path(eyeSlashSolidShape, iconOptions);
    eyeCloseNode.center = eyeOpenNode.center;

    // button content
    options.content = new Node({
      children: [eyeCloseNode, eyeOpenNode]
    });

    // toggle which icon is shown
    const eyeOpenObserver = eyeOpen => {
      eyeOpenNode.visible = eyeOpen;
      eyeCloseNode.visible = !eyeOpen;
    };
    eyeOpenProperty.link(eyeOpenObserver); // unlink required by dispose

    super(eyeOpenProperty, true, false, options);
    this.disposeEyeToggleButton = () => {
      eyeOpenProperty.unlink(eyeOpenObserver);
    };

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'EyeToggleButton', this);
  }
  dispose() {
    this.disposeEyeToggleButton();
    super.dispose();
  }
}
sceneryPhet.register('EyeToggleButton', EyeToggleButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiTm9kZSIsIlBhdGgiLCJleWVTbGFzaFNvbGlkU2hhcGUiLCJleWVTb2xpZFNoYXBlIiwiUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24iLCJzY2VuZXJ5UGhldCIsIkV5ZVRvZ2dsZUJ1dHRvbiIsImNvbnN0cnVjdG9yIiwiZXllT3BlblByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImljb25PcHRpb25zIiwic2NhbGUiLCJmaWxsIiwiZXllT3Blbk5vZGUiLCJleWVDbG9zZU5vZGUiLCJjZW50ZXIiLCJjb250ZW50IiwiY2hpbGRyZW4iLCJleWVPcGVuT2JzZXJ2ZXIiLCJleWVPcGVuIiwidmlzaWJsZSIsImxpbmsiLCJkaXNwb3NlRXllVG9nZ2xlQnV0dG9uIiwidW5saW5rIiwiYXNzZXJ0IiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJiaW5kZXIiLCJyZWdpc3RlckRhdGFVUkwiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeWVUb2dnbGVCdXR0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQnV0dG9uIHRoYXQgdG9nZ2xlcyBiZXR3ZWVuIGFuIG9wZW4gYW5kIGNsb3NlZCBleWViYWxsLCB1c2VkIHRvIGNvbnRyb2wgdGhlIHZpc2liaWxpdHkgb2Ygc29tZXRoaW5nLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGV5ZVNsYXNoU29saWRTaGFwZSBmcm9tICcuLi8uLi8uLi9zaGVycGEvanMvZm9udGF3ZXNvbWUtNS9leWVTbGFzaFNvbGlkU2hhcGUuanMnO1xyXG5pbXBvcnQgZXllU29saWRTaGFwZSBmcm9tICcuLi8uLi8uLi9zaGVycGEvanMvZm9udGF3ZXNvbWUtNS9leWVTb2xpZFNoYXBlLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uLCB7IFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBFeWVUb2dnbGVCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uT3B0aW9ucywgJ2NvbnRlbnQnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV5ZVRvZ2dsZUJ1dHRvbiBleHRlbmRzIFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uPGJvb2xlYW4+IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlRXllVG9nZ2xlQnV0dG9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gZXllT3BlblByb3BlcnR5IC0gdHJ1ZTogZXllIGlzIG9wZW47IGZhbHNlOiBleWUgaXMgY2xvc2VkXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZXllT3BlblByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgcHJvdmlkZWRPcHRpb25zPzogRXllVG9nZ2xlQnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEV5ZVRvZ2dsZUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbk9wdGlvbnM+KCkoIHt9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBpY29uc1xyXG4gICAgY29uc3QgaWNvbk9wdGlvbnMgPSB7XHJcbiAgICAgIHNjYWxlOiAwLjA4LFxyXG4gICAgICBmaWxsOiAnYmxhY2snXHJcbiAgICB9O1xyXG4gICAgY29uc3QgZXllT3Blbk5vZGUgPSBuZXcgUGF0aCggZXllU29saWRTaGFwZSwgaWNvbk9wdGlvbnMgKTtcclxuICAgIGNvbnN0IGV5ZUNsb3NlTm9kZSA9IG5ldyBQYXRoKCBleWVTbGFzaFNvbGlkU2hhcGUsIGljb25PcHRpb25zICk7XHJcbiAgICBleWVDbG9zZU5vZGUuY2VudGVyID0gZXllT3Blbk5vZGUuY2VudGVyO1xyXG5cclxuICAgIC8vIGJ1dHRvbiBjb250ZW50XHJcbiAgICBvcHRpb25zLmNvbnRlbnQgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyBleWVDbG9zZU5vZGUsIGV5ZU9wZW5Ob2RlIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyB0b2dnbGUgd2hpY2ggaWNvbiBpcyBzaG93blxyXG4gICAgY29uc3QgZXllT3Blbk9ic2VydmVyID0gKCBleWVPcGVuOiBib29sZWFuICkgPT4ge1xyXG4gICAgICBleWVPcGVuTm9kZS52aXNpYmxlID0gZXllT3BlbjtcclxuICAgICAgZXllQ2xvc2VOb2RlLnZpc2libGUgPSAhZXllT3BlbjtcclxuICAgIH07XHJcbiAgICBleWVPcGVuUHJvcGVydHkubGluayggZXllT3Blbk9ic2VydmVyICk7IC8vIHVubGluayByZXF1aXJlZCBieSBkaXNwb3NlXHJcblxyXG4gICAgc3VwZXIoIGV5ZU9wZW5Qcm9wZXJ0eSwgdHJ1ZSwgZmFsc2UsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VFeWVUb2dnbGVCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgIGV5ZU9wZW5Qcm9wZXJ0eS51bmxpbmsoIGV5ZU9wZW5PYnNlcnZlciApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBzdXBwb3J0IGZvciBiaW5kZXIgZG9jdW1lbnRhdGlvbiwgc3RyaXBwZWQgb3V0IGluIGJ1aWxkcyBhbmQgb25seSBydW5zIHdoZW4gP2JpbmRlciBpcyBzcGVjaWZpZWRcclxuICAgIGFzc2VydCAmJiBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLmJpbmRlciAmJiBJbnN0YW5jZVJlZ2lzdHJ5LnJlZ2lzdGVyRGF0YVVSTCggJ3NjZW5lcnktcGhldCcsICdFeWVUb2dnbGVCdXR0b24nLCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUV5ZVRvZ2dsZUJ1dHRvbigpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdFeWVUb2dnbGVCdXR0b24nLCBFeWVUb2dnbGVCdXR0b24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsZ0JBQWdCLE1BQU0seURBQXlEO0FBQ3RGLE9BQU9DLFNBQVMsTUFBNEIsb0NBQW9DO0FBQ2hGLFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLGdDQUFnQztBQUMzRCxPQUFPQyxrQkFBa0IsTUFBTSx3REFBd0Q7QUFDdkYsT0FBT0MsYUFBYSxNQUFNLG1EQUFtRDtBQUM3RSxPQUFPQyx1QkFBdUIsTUFBMEMsb0RBQW9EO0FBQzVILE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7QUFPM0MsZUFBZSxNQUFNQyxlQUFlLFNBQVNGLHVCQUF1QixDQUFVO0VBSTVFO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLGVBQWtDLEVBQUVDLGVBQXdDLEVBQUc7SUFFakcsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQXNFLENBQUMsQ0FBRSxDQUFDLENBQUMsRUFBRVUsZUFBZ0IsQ0FBQzs7SUFFdkg7SUFDQSxNQUFNRSxXQUFXLEdBQUc7TUFDbEJDLEtBQUssRUFBRSxJQUFJO01BQ1hDLElBQUksRUFBRTtJQUNSLENBQUM7SUFDRCxNQUFNQyxXQUFXLEdBQUcsSUFBSWIsSUFBSSxDQUFFRSxhQUFhLEVBQUVRLFdBQVksQ0FBQztJQUMxRCxNQUFNSSxZQUFZLEdBQUcsSUFBSWQsSUFBSSxDQUFFQyxrQkFBa0IsRUFBRVMsV0FBWSxDQUFDO0lBQ2hFSSxZQUFZLENBQUNDLE1BQU0sR0FBR0YsV0FBVyxDQUFDRSxNQUFNOztJQUV4QztJQUNBTixPQUFPLENBQUNPLE9BQU8sR0FBRyxJQUFJakIsSUFBSSxDQUFFO01BQzFCa0IsUUFBUSxFQUFFLENBQUVILFlBQVksRUFBRUQsV0FBVztJQUN2QyxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNSyxlQUFlLEdBQUtDLE9BQWdCLElBQU07TUFDOUNOLFdBQVcsQ0FBQ08sT0FBTyxHQUFHRCxPQUFPO01BQzdCTCxZQUFZLENBQUNNLE9BQU8sR0FBRyxDQUFDRCxPQUFPO0lBQ2pDLENBQUM7SUFDRFosZUFBZSxDQUFDYyxJQUFJLENBQUVILGVBQWdCLENBQUMsQ0FBQyxDQUFDOztJQUV6QyxLQUFLLENBQUVYLGVBQWUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFRSxPQUFRLENBQUM7SUFFOUMsSUFBSSxDQUFDYSxzQkFBc0IsR0FBRyxNQUFNO01BQ2xDZixlQUFlLENBQUNnQixNQUFNLENBQUVMLGVBQWdCLENBQUM7SUFDM0MsQ0FBQzs7SUFFRDtJQUNBTSxNQUFNLElBQUlDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLE1BQU0sSUFBSS9CLGdCQUFnQixDQUFDZ0MsZUFBZSxDQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxJQUFLLENBQUM7RUFDOUg7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNSLHNCQUFzQixDQUFDLENBQUM7SUFDN0IsS0FBSyxDQUFDUSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUExQixXQUFXLENBQUMyQixRQUFRLENBQUUsaUJBQWlCLEVBQUUxQixlQUFnQixDQUFDIn0=