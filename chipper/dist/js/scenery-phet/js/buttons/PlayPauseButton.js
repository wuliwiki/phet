// Copyright 2014-2022, University of Colorado Boulder

/**
 * Play pause button for starting/stopping the sim.  Often appears at the bottom center of the screen.
 * Generated programmatically using RoundPushButton (as opposed to using raster images).
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import PauseIconShape from '../PauseIconShape.js';
import sceneryPhet from '../sceneryPhet.js';
import SceneryPhetConstants from '../SceneryPhetConstants.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
import PlayControlButton from './PlayControlButton.js';
export default class PlayPauseButton extends PlayControlButton {
  constructor(isPlayingProperty, providedOptions) {
    const options = optionize()({
      // PlayPauseButtonOptions
      radius: SceneryPhetConstants.PLAY_CONTROL_BUTTON_RADIUS,
      // PlayControlButtonOptions
      includeGlobalHotkey: true,
      endPlayingLabel: SceneryPhetStrings.a11y.playControlButton.pauseStringProperty
    }, providedOptions);

    // icon sized relative to the radius
    const pauseHeight = options.radius;
    const pauseWidth = options.radius * 0.6;
    const pausePath = new Path(new PauseIconShape(pauseWidth, pauseHeight), {
      fill: 'black'
    });
    super(isPlayingProperty, pausePath, options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'PlayPauseButton', this);
  }
}
sceneryPhet.register('PlayPauseButton', PlayPauseButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiUGF0aCIsIlBhdXNlSWNvblNoYXBlIiwic2NlbmVyeVBoZXQiLCJTY2VuZXJ5UGhldENvbnN0YW50cyIsIlNjZW5lcnlQaGV0U3RyaW5ncyIsIlBsYXlDb250cm9sQnV0dG9uIiwiUGxheVBhdXNlQnV0dG9uIiwiY29uc3RydWN0b3IiLCJpc1BsYXlpbmdQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJyYWRpdXMiLCJQTEFZX0NPTlRST0xfQlVUVE9OX1JBRElVUyIsImluY2x1ZGVHbG9iYWxIb3RrZXkiLCJlbmRQbGF5aW5nTGFiZWwiLCJhMTF5IiwicGxheUNvbnRyb2xCdXR0b24iLCJwYXVzZVN0cmluZ1Byb3BlcnR5IiwicGF1c2VIZWlnaHQiLCJwYXVzZVdpZHRoIiwicGF1c2VQYXRoIiwiZmlsbCIsImFzc2VydCIsInBoZXQiLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiYmluZGVyIiwicmVnaXN0ZXJEYXRhVVJMIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQbGF5UGF1c2VCdXR0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGxheSBwYXVzZSBidXR0b24gZm9yIHN0YXJ0aW5nL3N0b3BwaW5nIHRoZSBzaW0uICBPZnRlbiBhcHBlYXJzIGF0IHRoZSBib3R0b20gY2VudGVyIG9mIHRoZSBzY3JlZW4uXHJcbiAqIEdlbmVyYXRlZCBwcm9ncmFtbWF0aWNhbGx5IHVzaW5nIFJvdW5kUHVzaEJ1dHRvbiAoYXMgb3Bwb3NlZCB0byB1c2luZyByYXN0ZXIgaW1hZ2VzKS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgSW5zdGFuY2VSZWdpc3RyeSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvZG9jdW1lbnRhdGlvbi9JbnN0YW5jZVJlZ2lzdHJ5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGF1c2VJY29uU2hhcGUgZnJvbSAnLi4vUGF1c2VJY29uU2hhcGUuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgU2NlbmVyeVBoZXRDb25zdGFudHMgZnJvbSAnLi4vU2NlbmVyeVBoZXRDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgU2NlbmVyeVBoZXRTdHJpbmdzIGZyb20gJy4uL1NjZW5lcnlQaGV0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBQbGF5Q29udHJvbEJ1dHRvbiwgeyBQbGF5Q29udHJvbEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL1BsYXlDb250cm9sQnV0dG9uLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IHR5cGUgUGxheVBhdXNlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGxheUNvbnRyb2xCdXR0b25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheVBhdXNlQnV0dG9uIGV4dGVuZHMgUGxheUNvbnRyb2xCdXR0b24ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGlzUGxheWluZ1Byb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgcHJvdmlkZWRPcHRpb25zPzogUGxheVBhdXNlQnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFBsYXlQYXVzZUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBQbGF5Q29udHJvbEJ1dHRvbk9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFBsYXlQYXVzZUJ1dHRvbk9wdGlvbnNcclxuICAgICAgcmFkaXVzOiBTY2VuZXJ5UGhldENvbnN0YW50cy5QTEFZX0NPTlRST0xfQlVUVE9OX1JBRElVUyxcclxuXHJcbiAgICAgIC8vIFBsYXlDb250cm9sQnV0dG9uT3B0aW9uc1xyXG4gICAgICBpbmNsdWRlR2xvYmFsSG90a2V5OiB0cnVlLFxyXG4gICAgICBlbmRQbGF5aW5nTGFiZWw6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5LnBsYXlDb250cm9sQnV0dG9uLnBhdXNlU3RyaW5nUHJvcGVydHlcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGljb24gc2l6ZWQgcmVsYXRpdmUgdG8gdGhlIHJhZGl1c1xyXG4gICAgY29uc3QgcGF1c2VIZWlnaHQgPSBvcHRpb25zLnJhZGl1cztcclxuICAgIGNvbnN0IHBhdXNlV2lkdGggPSBvcHRpb25zLnJhZGl1cyAqIDAuNjtcclxuICAgIGNvbnN0IHBhdXNlUGF0aCA9IG5ldyBQYXRoKCBuZXcgUGF1c2VJY29uU2hhcGUoIHBhdXNlV2lkdGgsIHBhdXNlSGVpZ2h0ICksIHsgZmlsbDogJ2JsYWNrJyB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGlzUGxheWluZ1Byb3BlcnR5LCBwYXVzZVBhdGgsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBzdXBwb3J0IGZvciBiaW5kZXIgZG9jdW1lbnRhdGlvbiwgc3RyaXBwZWQgb3V0IGluIGJ1aWxkcyBhbmQgb25seSBydW5zIHdoZW4gP2JpbmRlciBpcyBzcGVjaWZpZWRcclxuICAgIGFzc2VydCAmJiBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLmJpbmRlciAmJiBJbnN0YW5jZVJlZ2lzdHJ5LnJlZ2lzdGVyRGF0YVVSTCggJ3NjZW5lcnktcGhldCcsICdQbGF5UGF1c2VCdXR0b24nLCB0aGlzICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1BsYXlQYXVzZUJ1dHRvbicsIFBsYXlQYXVzZUJ1dHRvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsZ0JBQWdCLE1BQU0seURBQXlEO0FBQ3RGLE9BQU9DLFNBQVMsTUFBNEIsb0NBQW9DO0FBQ2hGLFNBQVNDLElBQUksUUFBUSxnQ0FBZ0M7QUFDckQsT0FBT0MsY0FBYyxNQUFNLHNCQUFzQjtBQUNqRCxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBQzNDLE9BQU9DLG9CQUFvQixNQUFNLDRCQUE0QjtBQUM3RCxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MsaUJBQWlCLE1BQW9DLHdCQUF3QjtBQU1wRixlQUFlLE1BQU1DLGVBQWUsU0FBU0QsaUJBQWlCLENBQUM7RUFFdERFLFdBQVdBLENBQUVDLGlCQUFvQyxFQUFFQyxlQUF3QyxFQUFHO0lBRW5HLE1BQU1DLE9BQU8sR0FBR1gsU0FBUyxDQUFnRSxDQUFDLENBQUU7TUFFMUY7TUFDQVksTUFBTSxFQUFFUixvQkFBb0IsQ0FBQ1MsMEJBQTBCO01BRXZEO01BQ0FDLG1CQUFtQixFQUFFLElBQUk7TUFDekJDLGVBQWUsRUFBRVYsa0JBQWtCLENBQUNXLElBQUksQ0FBQ0MsaUJBQWlCLENBQUNDO0lBQzdELENBQUMsRUFBRVIsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNUyxXQUFXLEdBQUdSLE9BQU8sQ0FBQ0MsTUFBTTtJQUNsQyxNQUFNUSxVQUFVLEdBQUdULE9BQU8sQ0FBQ0MsTUFBTSxHQUFHLEdBQUc7SUFDdkMsTUFBTVMsU0FBUyxHQUFHLElBQUlwQixJQUFJLENBQUUsSUFBSUMsY0FBYyxDQUFFa0IsVUFBVSxFQUFFRCxXQUFZLENBQUMsRUFBRTtNQUFFRyxJQUFJLEVBQUU7SUFBUSxDQUFFLENBQUM7SUFFOUYsS0FBSyxDQUFFYixpQkFBaUIsRUFBRVksU0FBUyxFQUFFVixPQUFRLENBQUM7O0lBRTlDO0lBQ0FZLE1BQU0sSUFBSUMsSUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQWUsQ0FBQ0MsTUFBTSxJQUFJNUIsZ0JBQWdCLENBQUM2QixlQUFlLENBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLElBQUssQ0FBQztFQUM5SDtBQUNGO0FBRUF6QixXQUFXLENBQUMwQixRQUFRLENBQUUsaUJBQWlCLEVBQUV0QixlQUFnQixDQUFDIn0=