// Copyright 2014-2022, University of Colorado Boulder

/**
 * Restart button.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Shape } from '../../../kite/js/imports.js';
import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { HBox, Path, Rectangle } from '../../../scenery/js/imports.js';
import RoundPushButton from '../../../sun/js/buttons/RoundPushButton.js';
import sceneryPhet from '../sceneryPhet.js';

// constants
const scale = 0.75;
const vscale = 1.15;
const barWidth = 4 * scale;
const barHeight = 19 * scale * vscale;
const triangleWidth = 15 * scale;
const triangleHeight = 19 * scale * vscale;
export default class RestartButton extends RoundPushButton {
  constructor(providedOptions) {
    const options = optionize()({}, providedOptions);
    const barPath = new Rectangle(0, 0, barWidth, barHeight, {
      fill: 'black'
    });
    const trianglePath = new Path(new Shape().moveTo(0, triangleHeight / 2).lineTo(-triangleWidth, 0).lineTo(0, -triangleHeight / 2).close(), {
      fill: 'black'
    });
    const trianglePath2 = new Path(new Shape().moveTo(0, triangleHeight / 2).lineTo(-triangleWidth, 0).lineTo(0, -triangleHeight / 2).close(), {
      fill: 'black'
    });
    options.content = new HBox({
      children: [barPath, trianglePath, trianglePath2],
      spacing: -1
    });
    super(options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'RestartButton', this);
  }
}
sceneryPhet.register('RestartButton', RestartButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIkluc3RhbmNlUmVnaXN0cnkiLCJvcHRpb25pemUiLCJIQm94IiwiUGF0aCIsIlJlY3RhbmdsZSIsIlJvdW5kUHVzaEJ1dHRvbiIsInNjZW5lcnlQaGV0Iiwic2NhbGUiLCJ2c2NhbGUiLCJiYXJXaWR0aCIsImJhckhlaWdodCIsInRyaWFuZ2xlV2lkdGgiLCJ0cmlhbmdsZUhlaWdodCIsIlJlc3RhcnRCdXR0b24iLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJiYXJQYXRoIiwiZmlsbCIsInRyaWFuZ2xlUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlIiwidHJpYW5nbGVQYXRoMiIsImNvbnRlbnQiLCJjaGlsZHJlbiIsInNwYWNpbmciLCJhc3NlcnQiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVzdGFydEJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZXN0YXJ0IGJ1dHRvbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBQYXRoLCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUm91bmRQdXNoQnV0dG9uLCB7IFJvdW5kUHVzaEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9Sb3VuZFB1c2hCdXR0b24uanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vc2NlbmVyeVBoZXQuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IHNjYWxlID0gMC43NTtcclxuY29uc3QgdnNjYWxlID0gMS4xNTtcclxuY29uc3QgYmFyV2lkdGggPSA0ICogc2NhbGU7XHJcbmNvbnN0IGJhckhlaWdodCA9IDE5ICogc2NhbGUgKiB2c2NhbGU7XHJcbmNvbnN0IHRyaWFuZ2xlV2lkdGggPSAxNSAqIHNjYWxlO1xyXG5jb25zdCB0cmlhbmdsZUhlaWdodCA9IDE5ICogc2NhbGUgKiB2c2NhbGU7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIFJlc3RhcnRCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFJvdW5kUHVzaEJ1dHRvbk9wdGlvbnMsICdjb250ZW50Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN0YXJ0QnV0dG9uIGV4dGVuZHMgUm91bmRQdXNoQnV0dG9uIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBSZXN0YXJ0QnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFJlc3RhcnRCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUm91bmRQdXNoQnV0dG9uT3B0aW9ucz4oKSgge30sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGJhclBhdGggPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCBiYXJXaWR0aCwgYmFySGVpZ2h0LCB7IGZpbGw6ICdibGFjaycgfSApO1xyXG4gICAgY29uc3QgdHJpYW5nbGVQYXRoID0gbmV3IFBhdGgoIG5ldyBTaGFwZSgpLm1vdmVUbyggMCwgdHJpYW5nbGVIZWlnaHQgLyAyICkubGluZVRvKCAtdHJpYW5nbGVXaWR0aCwgMCApLmxpbmVUbyggMCwgLXRyaWFuZ2xlSGVpZ2h0IC8gMiApLmNsb3NlKCksIHtcclxuICAgICAgZmlsbDogJ2JsYWNrJ1xyXG4gICAgfSApO1xyXG4gICAgY29uc3QgdHJpYW5nbGVQYXRoMiA9IG5ldyBQYXRoKCBuZXcgU2hhcGUoKS5tb3ZlVG8oIDAsIHRyaWFuZ2xlSGVpZ2h0IC8gMiApLmxpbmVUbyggLXRyaWFuZ2xlV2lkdGgsIDAgKS5saW5lVG8oIDAsIC10cmlhbmdsZUhlaWdodCAvIDIgKS5jbG9zZSgpLCB7XHJcbiAgICAgIGZpbGw6ICdibGFjaydcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNvbnRlbnQgPSBuZXcgSEJveCggeyBjaGlsZHJlbjogWyBiYXJQYXRoLCB0cmlhbmdsZVBhdGgsIHRyaWFuZ2xlUGF0aDIgXSwgc3BhY2luZzogLTEgfSApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gc3VwcG9ydCBmb3IgYmluZGVyIGRvY3VtZW50YXRpb24sIHN0cmlwcGVkIG91dCBpbiBidWlsZHMgYW5kIG9ubHkgcnVucyB3aGVuID9iaW5kZXIgaXMgc3BlY2lmaWVkXHJcbiAgICBhc3NlcnQgJiYgcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5iaW5kZXIgJiYgSW5zdGFuY2VSZWdpc3RyeS5yZWdpc3RlckRhdGFVUkwoICdzY2VuZXJ5LXBoZXQnLCAnUmVzdGFydEJ1dHRvbicsIHRoaXMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnUmVzdGFydEJ1dHRvbicsIFJlc3RhcnRCdXR0b24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLDZCQUE2QjtBQUVuRCxPQUFPQyxnQkFBZ0IsTUFBTSx5REFBeUQ7QUFDdEYsT0FBT0MsU0FBUyxNQUE0QixvQ0FBb0M7QUFDaEYsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFNBQVMsUUFBUSxnQ0FBZ0M7QUFDdEUsT0FBT0MsZUFBZSxNQUFrQyw0Q0FBNEM7QUFDcEcsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjs7QUFFM0M7QUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSTtBQUNsQixNQUFNQyxNQUFNLEdBQUcsSUFBSTtBQUNuQixNQUFNQyxRQUFRLEdBQUcsQ0FBQyxHQUFHRixLQUFLO0FBQzFCLE1BQU1HLFNBQVMsR0FBRyxFQUFFLEdBQUdILEtBQUssR0FBR0MsTUFBTTtBQUNyQyxNQUFNRyxhQUFhLEdBQUcsRUFBRSxHQUFHSixLQUFLO0FBQ2hDLE1BQU1LLGNBQWMsR0FBRyxFQUFFLEdBQUdMLEtBQUssR0FBR0MsTUFBTTtBQU0xQyxlQUFlLE1BQU1LLGFBQWEsU0FBU1IsZUFBZSxDQUFDO0VBRWxEUyxXQUFXQSxDQUFFQyxlQUFzQyxFQUFHO0lBRTNELE1BQU1DLE9BQU8sR0FBR2YsU0FBUyxDQUE0RCxDQUFDLENBQUUsQ0FBQyxDQUFDLEVBQUVjLGVBQWdCLENBQUM7SUFFN0csTUFBTUUsT0FBTyxHQUFHLElBQUliLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFSyxRQUFRLEVBQUVDLFNBQVMsRUFBRTtNQUFFUSxJQUFJLEVBQUU7SUFBUSxDQUFFLENBQUM7SUFDN0UsTUFBTUMsWUFBWSxHQUFHLElBQUloQixJQUFJLENBQUUsSUFBSUosS0FBSyxDQUFDLENBQUMsQ0FBQ3FCLE1BQU0sQ0FBRSxDQUFDLEVBQUVSLGNBQWMsR0FBRyxDQUFFLENBQUMsQ0FBQ1MsTUFBTSxDQUFFLENBQUNWLGFBQWEsRUFBRSxDQUFFLENBQUMsQ0FBQ1UsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFDVCxjQUFjLEdBQUcsQ0FBRSxDQUFDLENBQUNVLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDL0lKLElBQUksRUFBRTtJQUNSLENBQUUsQ0FBQztJQUNILE1BQU1LLGFBQWEsR0FBRyxJQUFJcEIsSUFBSSxDQUFFLElBQUlKLEtBQUssQ0FBQyxDQUFDLENBQUNxQixNQUFNLENBQUUsQ0FBQyxFQUFFUixjQUFjLEdBQUcsQ0FBRSxDQUFDLENBQUNTLE1BQU0sQ0FBRSxDQUFDVixhQUFhLEVBQUUsQ0FBRSxDQUFDLENBQUNVLE1BQU0sQ0FBRSxDQUFDLEVBQUUsQ0FBQ1QsY0FBYyxHQUFHLENBQUUsQ0FBQyxDQUFDVSxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQ2hKSixJQUFJLEVBQUU7SUFDUixDQUFFLENBQUM7SUFFSEYsT0FBTyxDQUFDUSxPQUFPLEdBQUcsSUFBSXRCLElBQUksQ0FBRTtNQUFFdUIsUUFBUSxFQUFFLENBQUVSLE9BQU8sRUFBRUUsWUFBWSxFQUFFSSxhQUFhLENBQUU7TUFBRUcsT0FBTyxFQUFFLENBQUM7SUFBRSxDQUFFLENBQUM7SUFFakcsS0FBSyxDQUFFVixPQUFRLENBQUM7O0lBRWhCO0lBQ0FXLE1BQU0sSUFBSUMsSUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQWUsQ0FBQ0MsTUFBTSxJQUFJL0IsZ0JBQWdCLENBQUNnQyxlQUFlLENBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxJQUFLLENBQUM7RUFDNUg7QUFDRjtBQUVBMUIsV0FBVyxDQUFDMkIsUUFBUSxDQUFFLGVBQWUsRUFBRXBCLGFBQWMsQ0FBQyJ9