// Copyright 2018-2022, University of Colorado Boulder

/**
 * Scenery node that shows a handle, which is made of two parts: the "grip" which is where you would grab it and the
 * "attachment" which are elbow-shaped bars that attach the handle to another surface.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Matrix3 from '../../dot/js/Matrix3.js';
import { Shape } from '../../kite/js/imports.js';
import InstanceRegistry from '../../phet-core/js/documentation/InstanceRegistry.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import { LinearGradient, Node, PaintColorProperty, Path } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';

// constants
// grip shape
const GRIP_WIDTH = 100;
const GRIP_HEIGHT = 42;
const GRIP_CORNER_RADIUS = GRIP_WIDTH * 0.03;
const GRIP_END_PAD = GRIP_WIDTH * 0.03; // horizontal line between the edge of the grip and the cubic curves
const GRIP_SINGLE_FINGER_INDENT_DEPTH = GRIP_HEIGHT * 0.11;
const GRIP_SINGLE_FINGER_INDENT_HALF_WIDTH = (GRIP_WIDTH - GRIP_CORNER_RADIUS * 2 - GRIP_END_PAD * 2) / 8;
export default class HandleNode extends Node {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      gripBaseColor: 'rgb( 183, 184, 185 )',
      gripStroke: 'black',
      gripLineWidth: 3,
      attachmentFill: 'gray',
      attachmentStroke: 'black',
      attachmentLineWidth: 3,
      hasLeftAttachment: true,
      hasRightAttachment: true
    }, providedOptions);
    assert && assert(options.hasLeftAttachment || options.hasRightAttachment, 'at least one attachment is required');

    // the grip shape begins on the left edge, middle y
    // this is the upper left corner before grip indents start
    const gripShape = new Shape().moveTo(0, GRIP_HEIGHT / 2).lineTo(0, GRIP_CORNER_RADIUS).arc(GRIP_CORNER_RADIUS, GRIP_CORNER_RADIUS, GRIP_CORNER_RADIUS, Math.PI, Math.PI * 1.5, false).lineToRelative(GRIP_END_PAD, 0);

    // these are the top grip indents
    addGripIndent(gripShape, 1);
    addGripIndent(gripShape, 1);
    addGripIndent(gripShape, 1);
    addGripIndent(gripShape, 1);

    // this is the whole right edge
    gripShape.lineToRelative(GRIP_END_PAD, 0).arc(GRIP_WIDTH - GRIP_CORNER_RADIUS, GRIP_CORNER_RADIUS, GRIP_CORNER_RADIUS, Math.PI * 1.5, 0, false).lineToRelative(0, GRIP_HEIGHT - GRIP_CORNER_RADIUS * 2).arc(GRIP_WIDTH - GRIP_CORNER_RADIUS, GRIP_HEIGHT - GRIP_CORNER_RADIUS, GRIP_CORNER_RADIUS, 0, Math.PI / 2, false).lineToRelative(-GRIP_END_PAD, 0);

    // these are the bottom grip indents
    addGripIndent(gripShape, -1);
    addGripIndent(gripShape, -1);
    addGripIndent(gripShape, -1);
    addGripIndent(gripShape, -1);

    // this is the lower left hand corner
    gripShape.lineToRelative(-GRIP_END_PAD, 0).arc(GRIP_CORNER_RADIUS, GRIP_HEIGHT - GRIP_CORNER_RADIUS, GRIP_CORNER_RADIUS, Math.PI / 2, Math.PI, false).lineTo(0, GRIP_HEIGHT / 2).close();

    // Use PaintColorProperty so that colors can be updated dynamically
    const gripBaseColorProperty = new PaintColorProperty(options.gripBaseColor);
    const brighterColorProperty = new PaintColorProperty(gripBaseColorProperty, {
      luminanceFactor: 0.95
    });
    const darkerColorProperty = new PaintColorProperty(gripBaseColorProperty, {
      luminanceFactor: -0.35
    });

    // add handle grip shape
    const gripPath = new Path(gripShape, {
      lineWidth: options.gripLineWidth,
      stroke: options.gripStroke,
      fill: new LinearGradient(0, 0, 0, GRIP_HEIGHT).addColorStop(0, gripBaseColorProperty).addColorStop(0.4, brighterColorProperty).addColorStop(0.7, gripBaseColorProperty).addColorStop(1.0, darkerColorProperty)
    });
    options.children = [gripPath];

    // handle attachment shape vars
    const attachmentShaftWidth = GRIP_HEIGHT * 0.35;
    const attachmentHeight = GRIP_HEIGHT * 1.15;
    const attachmentBaseNubWidth = attachmentShaftWidth * 0.4;
    const attachmentBaseNubHeight = attachmentHeight * 0.2;
    const attachmentMiddleHeight = attachmentHeight * 0.5;
    const attachmentSmallArcRadius = attachmentShaftWidth * 0.5;
    const attachmentOptions = {
      fill: options.attachmentFill,
      stroke: options.attachmentStroke,
      lineWidth: options.attachmentLineWidth,
      lineJoin: 'round',
      top: gripPath.centerY - attachmentShaftWidth / 2
    };
    const leftAttachmentShape = new Shape()

    // Starts at bottom-left and proceeds clockwise
    .moveTo(0, attachmentHeight).lineToRelative(attachmentBaseNubWidth, -attachmentBaseNubHeight).lineToRelative(0, -attachmentMiddleHeight)

    // The main arc at the top left of the attachment
    .arc(attachmentShaftWidth + attachmentBaseNubWidth + attachmentSmallArcRadius, attachmentHeight - attachmentBaseNubHeight - attachmentMiddleHeight, attachmentShaftWidth + attachmentSmallArcRadius, Math.PI, Math.PI * 1.5, false).lineToRelative(0, attachmentShaftWidth)

    // This is the smaller arc on the underside of the attachment
    .arc(attachmentShaftWidth + attachmentBaseNubWidth + attachmentSmallArcRadius, attachmentHeight - attachmentBaseNubHeight - attachmentMiddleHeight, attachmentSmallArcRadius, Math.PI * 1.5, Math.PI, true).lineToRelative(0, attachmentMiddleHeight).lineToRelative(attachmentBaseNubWidth, attachmentBaseNubHeight).lineToRelative(-attachmentShaftWidth - attachmentBaseNubWidth * 2, 0).close();

    // left attachment
    if (options.hasLeftAttachment) {
      const leftAttachmentPath = new Path(leftAttachmentShape, combineOptions({
        right: gripPath.left + options.gripLineWidth
      }, attachmentOptions));
      options.children.unshift(leftAttachmentPath); // prepend so that attachment is behind grip
    }

    // right attachment, a mirror image of the left
    if (options.hasRightAttachment) {
      const rightAttachmentShape = leftAttachmentShape.transformed(Matrix3.scaling(-1, 1));

      // handle right attachment
      const rightAttachmentPath = new Path(rightAttachmentShape, combineOptions({
        left: gripPath.right - options.gripLineWidth
      }, attachmentOptions));
      options.children.unshift(rightAttachmentPath); // prepend so that attachment is behind grip
    }

    super(options);
    this.disposeHandleNode = () => {
      gripBaseColorProperty.dispose();
      brighterColorProperty.dispose();
      darkerColorProperty.dispose();
    };

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'HandleNode', this);
  }
  dispose() {
    this.disposeHandleNode();
    super.dispose();
  }
}

/**
 * Add an "up/down" combination to either the top or bottom of the grip.
 * @param shape - the shape to append to
 * @param sign - +1 for top side of grip, -1 for bottom side of grip
 */
function addGripIndent(shape, sign) {
  // control points for cubic curve shape on grip
  // each single-finger indent is made of two cubic curves that are mirrored over the y-axis
  const controlPoint1X = GRIP_SINGLE_FINGER_INDENT_HALF_WIDTH / 2;
  const controlPoint1Y = 0;
  const controlPoint2X = GRIP_SINGLE_FINGER_INDENT_HALF_WIDTH / 4;
  const controlPoint2Y = GRIP_SINGLE_FINGER_INDENT_DEPTH;

  // this is a grip indent
  shape.cubicCurveToRelative(sign * controlPoint1X, sign * controlPoint1Y, sign * controlPoint2X, sign * controlPoint2Y, sign * GRIP_SINGLE_FINGER_INDENT_HALF_WIDTH, sign * GRIP_SINGLE_FINGER_INDENT_DEPTH).cubicCurveToRelative(sign * (GRIP_SINGLE_FINGER_INDENT_HALF_WIDTH - controlPoint2X), sign * -controlPoint1Y, sign * (GRIP_SINGLE_FINGER_INDENT_HALF_WIDTH - controlPoint1X), sign * -controlPoint2Y, sign * GRIP_SINGLE_FINGER_INDENT_HALF_WIDTH, sign * -GRIP_SINGLE_FINGER_INDENT_DEPTH);
}
sceneryPhet.register('HandleNode', HandleNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiU2hhcGUiLCJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiY29tYmluZU9wdGlvbnMiLCJMaW5lYXJHcmFkaWVudCIsIk5vZGUiLCJQYWludENvbG9yUHJvcGVydHkiLCJQYXRoIiwic2NlbmVyeVBoZXQiLCJHUklQX1dJRFRIIiwiR1JJUF9IRUlHSFQiLCJHUklQX0NPUk5FUl9SQURJVVMiLCJHUklQX0VORF9QQUQiLCJHUklQX1NJTkdMRV9GSU5HRVJfSU5ERU5UX0RFUFRIIiwiR1JJUF9TSU5HTEVfRklOR0VSX0lOREVOVF9IQUxGX1dJRFRIIiwiSGFuZGxlTm9kZSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImdyaXBCYXNlQ29sb3IiLCJncmlwU3Ryb2tlIiwiZ3JpcExpbmVXaWR0aCIsImF0dGFjaG1lbnRGaWxsIiwiYXR0YWNobWVudFN0cm9rZSIsImF0dGFjaG1lbnRMaW5lV2lkdGgiLCJoYXNMZWZ0QXR0YWNobWVudCIsImhhc1JpZ2h0QXR0YWNobWVudCIsImFzc2VydCIsImdyaXBTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsImFyYyIsIk1hdGgiLCJQSSIsImxpbmVUb1JlbGF0aXZlIiwiYWRkR3JpcEluZGVudCIsImNsb3NlIiwiZ3JpcEJhc2VDb2xvclByb3BlcnR5IiwiYnJpZ2h0ZXJDb2xvclByb3BlcnR5IiwibHVtaW5hbmNlRmFjdG9yIiwiZGFya2VyQ29sb3JQcm9wZXJ0eSIsImdyaXBQYXRoIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiZmlsbCIsImFkZENvbG9yU3RvcCIsImNoaWxkcmVuIiwiYXR0YWNobWVudFNoYWZ0V2lkdGgiLCJhdHRhY2htZW50SGVpZ2h0IiwiYXR0YWNobWVudEJhc2VOdWJXaWR0aCIsImF0dGFjaG1lbnRCYXNlTnViSGVpZ2h0IiwiYXR0YWNobWVudE1pZGRsZUhlaWdodCIsImF0dGFjaG1lbnRTbWFsbEFyY1JhZGl1cyIsImF0dGFjaG1lbnRPcHRpb25zIiwibGluZUpvaW4iLCJ0b3AiLCJjZW50ZXJZIiwibGVmdEF0dGFjaG1lbnRTaGFwZSIsImxlZnRBdHRhY2htZW50UGF0aCIsInJpZ2h0IiwibGVmdCIsInVuc2hpZnQiLCJyaWdodEF0dGFjaG1lbnRTaGFwZSIsInRyYW5zZm9ybWVkIiwic2NhbGluZyIsInJpZ2h0QXR0YWNobWVudFBhdGgiLCJkaXNwb3NlSGFuZGxlTm9kZSIsImRpc3Bvc2UiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsInNoYXBlIiwic2lnbiIsImNvbnRyb2xQb2ludDFYIiwiY29udHJvbFBvaW50MVkiLCJjb250cm9sUG9pbnQyWCIsImNvbnRyb2xQb2ludDJZIiwiY3ViaWNDdXJ2ZVRvUmVsYXRpdmUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkhhbmRsZU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2NlbmVyeSBub2RlIHRoYXQgc2hvd3MgYSBoYW5kbGUsIHdoaWNoIGlzIG1hZGUgb2YgdHdvIHBhcnRzOiB0aGUgXCJncmlwXCIgd2hpY2ggaXMgd2hlcmUgeW91IHdvdWxkIGdyYWIgaXQgYW5kIHRoZVxyXG4gKiBcImF0dGFjaG1lbnRcIiB3aGljaCBhcmUgZWxib3ctc2hhcGVkIGJhcnMgdGhhdCBhdHRhY2ggdGhlIGhhbmRsZSB0byBhbm90aGVyIHN1cmZhY2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTWF0cml4MyBmcm9tICcuLi8uLi9kb3QvanMvTWF0cml4My5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgSW5zdGFuY2VSZWdpc3RyeSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvZG9jdW1lbnRhdGlvbi9JbnN0YW5jZVJlZ2lzdHJ5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBUQ29sb3IsIExpbmVhckdyYWRpZW50LCBOb2RlLCBOb2RlT3B0aW9ucywgUGFpbnRDb2xvclByb3BlcnR5LCBQYXRoLCBQYXRoT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG4vLyBncmlwIHNoYXBlXHJcbmNvbnN0IEdSSVBfV0lEVEggPSAxMDA7XHJcbmNvbnN0IEdSSVBfSEVJR0hUID0gNDI7XHJcbmNvbnN0IEdSSVBfQ09STkVSX1JBRElVUyA9IEdSSVBfV0lEVEggKiAwLjAzO1xyXG5jb25zdCBHUklQX0VORF9QQUQgPSBHUklQX1dJRFRIICogMC4wMzsgLy8gaG9yaXpvbnRhbCBsaW5lIGJldHdlZW4gdGhlIGVkZ2Ugb2YgdGhlIGdyaXAgYW5kIHRoZSBjdWJpYyBjdXJ2ZXNcclxuY29uc3QgR1JJUF9TSU5HTEVfRklOR0VSX0lOREVOVF9ERVBUSCA9IEdSSVBfSEVJR0hUICogMC4xMTtcclxuY29uc3QgR1JJUF9TSU5HTEVfRklOR0VSX0lOREVOVF9IQUxGX1dJRFRIID0gKCBHUklQX1dJRFRIIC0gR1JJUF9DT1JORVJfUkFESVVTICogMiAtIEdSSVBfRU5EX1BBRCAqIDIgKSAvIDg7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG5cclxuICAvLyBvcHRpb25zIGZvciB0aGUgZ3JpcFxyXG4gIGdyaXBCYXNlQ29sb3I/OiBUQ29sb3I7IC8vIGJhc2UgY29sb3Igb2YgZ3JhZGllbnQgb24gdGhlIGdyaXBcclxuICBncmlwU3Ryb2tlPzogVENvbG9yOyAvLyBzdHJva2UgY29sb3Igb2YgdGhlIGdyaXBcclxuICBncmlwTGluZVdpZHRoPzogbnVtYmVyO1xyXG5cclxuICAvLyBvcHRpb25zIGZvciB0aGUgYXR0YWNobWVudChzKVxyXG4gIGF0dGFjaG1lbnRGaWxsPzogVENvbG9yOyAvLyBzb2xpZCBmaWxsIGNvbG9yIGZvciB0aGUgYXR0YWNobWVudHNcclxuICBhdHRhY2htZW50U3Ryb2tlPzogVENvbG9yOyAvLyBzdHJva2UgY29sb3Igb2YgdGhlIGF0dGFjaG1lbnRzXHJcbiAgYXR0YWNobWVudExpbmVXaWR0aD86IG51bWJlcjtcclxuICBoYXNMZWZ0QXR0YWNobWVudD86IGJvb2xlYW47XHJcbiAgaGFzUmlnaHRBdHRhY2htZW50PzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEhhbmRsZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PE5vZGVPcHRpb25zLCAnY2hpbGRyZW4nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhhbmRsZU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlSGFuZGxlTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBIYW5kbGVOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEhhbmRsZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGdyaXBCYXNlQ29sb3I6ICdyZ2IoIDE4MywgMTg0LCAxODUgKScsXHJcbiAgICAgIGdyaXBTdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGdyaXBMaW5lV2lkdGg6IDMsXHJcbiAgICAgIGF0dGFjaG1lbnRGaWxsOiAnZ3JheScsXHJcbiAgICAgIGF0dGFjaG1lbnRTdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGF0dGFjaG1lbnRMaW5lV2lkdGg6IDMsXHJcbiAgICAgIGhhc0xlZnRBdHRhY2htZW50OiB0cnVlLFxyXG4gICAgICBoYXNSaWdodEF0dGFjaG1lbnQ6IHRydWVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMuaGFzTGVmdEF0dGFjaG1lbnQgfHwgb3B0aW9ucy5oYXNSaWdodEF0dGFjaG1lbnQsICdhdCBsZWFzdCBvbmUgYXR0YWNobWVudCBpcyByZXF1aXJlZCcgKTtcclxuXHJcbiAgICAvLyB0aGUgZ3JpcCBzaGFwZSBiZWdpbnMgb24gdGhlIGxlZnQgZWRnZSwgbWlkZGxlIHlcclxuICAgIC8vIHRoaXMgaXMgdGhlIHVwcGVyIGxlZnQgY29ybmVyIGJlZm9yZSBncmlwIGluZGVudHMgc3RhcnRcclxuICAgIGNvbnN0IGdyaXBTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgIC5tb3ZlVG8oIDAsIEdSSVBfSEVJR0hUIC8gMiApXHJcbiAgICAgIC5saW5lVG8oIDAsIEdSSVBfQ09STkVSX1JBRElVUyApXHJcbiAgICAgIC5hcmMoIEdSSVBfQ09STkVSX1JBRElVUywgR1JJUF9DT1JORVJfUkFESVVTLCBHUklQX0NPUk5FUl9SQURJVVMsIE1hdGguUEksIE1hdGguUEkgKiAxLjUsIGZhbHNlIClcclxuICAgICAgLmxpbmVUb1JlbGF0aXZlKCBHUklQX0VORF9QQUQsIDAgKTtcclxuXHJcbiAgICAvLyB0aGVzZSBhcmUgdGhlIHRvcCBncmlwIGluZGVudHNcclxuICAgIGFkZEdyaXBJbmRlbnQoIGdyaXBTaGFwZSwgMSApO1xyXG4gICAgYWRkR3JpcEluZGVudCggZ3JpcFNoYXBlLCAxICk7XHJcbiAgICBhZGRHcmlwSW5kZW50KCBncmlwU2hhcGUsIDEgKTtcclxuICAgIGFkZEdyaXBJbmRlbnQoIGdyaXBTaGFwZSwgMSApO1xyXG5cclxuICAgIC8vIHRoaXMgaXMgdGhlIHdob2xlIHJpZ2h0IGVkZ2VcclxuICAgIGdyaXBTaGFwZS5saW5lVG9SZWxhdGl2ZSggR1JJUF9FTkRfUEFELCAwIClcclxuICAgICAgLmFyYyggR1JJUF9XSURUSCAtIEdSSVBfQ09STkVSX1JBRElVUywgR1JJUF9DT1JORVJfUkFESVVTLCBHUklQX0NPUk5FUl9SQURJVVMsIE1hdGguUEkgKiAxLjUsIDAsIGZhbHNlIClcclxuICAgICAgLmxpbmVUb1JlbGF0aXZlKCAwLCBHUklQX0hFSUdIVCAtICggR1JJUF9DT1JORVJfUkFESVVTICogMiApIClcclxuICAgICAgLmFyYyggR1JJUF9XSURUSCAtIEdSSVBfQ09STkVSX1JBRElVUywgR1JJUF9IRUlHSFQgLSBHUklQX0NPUk5FUl9SQURJVVMsIEdSSVBfQ09STkVSX1JBRElVUywgMCwgTWF0aC5QSSAvIDIsIGZhbHNlIClcclxuICAgICAgLmxpbmVUb1JlbGF0aXZlKCAtR1JJUF9FTkRfUEFELCAwICk7XHJcblxyXG4gICAgLy8gdGhlc2UgYXJlIHRoZSBib3R0b20gZ3JpcCBpbmRlbnRzXHJcbiAgICBhZGRHcmlwSW5kZW50KCBncmlwU2hhcGUsIC0xICk7XHJcbiAgICBhZGRHcmlwSW5kZW50KCBncmlwU2hhcGUsIC0xICk7XHJcbiAgICBhZGRHcmlwSW5kZW50KCBncmlwU2hhcGUsIC0xICk7XHJcbiAgICBhZGRHcmlwSW5kZW50KCBncmlwU2hhcGUsIC0xICk7XHJcblxyXG4gICAgLy8gdGhpcyBpcyB0aGUgbG93ZXIgbGVmdCBoYW5kIGNvcm5lclxyXG4gICAgZ3JpcFNoYXBlLmxpbmVUb1JlbGF0aXZlKCAtR1JJUF9FTkRfUEFELCAwIClcclxuICAgICAgLmFyYyggR1JJUF9DT1JORVJfUkFESVVTLCBHUklQX0hFSUdIVCAtIEdSSVBfQ09STkVSX1JBRElVUywgR1JJUF9DT1JORVJfUkFESVVTLCBNYXRoLlBJIC8gMiwgTWF0aC5QSSwgZmFsc2UgKVxyXG4gICAgICAubGluZVRvKCAwLCBHUklQX0hFSUdIVCAvIDIgKVxyXG4gICAgICAuY2xvc2UoKTtcclxuXHJcbiAgICAvLyBVc2UgUGFpbnRDb2xvclByb3BlcnR5IHNvIHRoYXQgY29sb3JzIGNhbiBiZSB1cGRhdGVkIGR5bmFtaWNhbGx5XHJcbiAgICBjb25zdCBncmlwQmFzZUNvbG9yUHJvcGVydHkgPSBuZXcgUGFpbnRDb2xvclByb3BlcnR5KCBvcHRpb25zLmdyaXBCYXNlQ29sb3IgKTtcclxuICAgIGNvbnN0IGJyaWdodGVyQ29sb3JQcm9wZXJ0eSA9IG5ldyBQYWludENvbG9yUHJvcGVydHkoIGdyaXBCYXNlQ29sb3JQcm9wZXJ0eSwgeyBsdW1pbmFuY2VGYWN0b3I6IDAuOTUgfSApO1xyXG4gICAgY29uc3QgZGFya2VyQ29sb3JQcm9wZXJ0eSA9IG5ldyBQYWludENvbG9yUHJvcGVydHkoIGdyaXBCYXNlQ29sb3JQcm9wZXJ0eSwgeyBsdW1pbmFuY2VGYWN0b3I6IC0wLjM1IH0gKTtcclxuXHJcbiAgICAvLyBhZGQgaGFuZGxlIGdyaXAgc2hhcGVcclxuICAgIGNvbnN0IGdyaXBQYXRoID0gbmV3IFBhdGgoIGdyaXBTaGFwZSwge1xyXG4gICAgICBsaW5lV2lkdGg6IG9wdGlvbnMuZ3JpcExpbmVXaWR0aCxcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLmdyaXBTdHJva2UsXHJcbiAgICAgIGZpbGw6IG5ldyBMaW5lYXJHcmFkaWVudCggMCwgMCwgMCwgR1JJUF9IRUlHSFQgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDAsIGdyaXBCYXNlQ29sb3JQcm9wZXJ0eSApXHJcbiAgICAgICAgLmFkZENvbG9yU3RvcCggMC40LCBicmlnaHRlckNvbG9yUHJvcGVydHkgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDAuNywgZ3JpcEJhc2VDb2xvclByb3BlcnR5IClcclxuICAgICAgICAuYWRkQ29sb3JTdG9wKCAxLjAsIGRhcmtlckNvbG9yUHJvcGVydHkgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGdyaXBQYXRoIF07XHJcblxyXG4gICAgLy8gaGFuZGxlIGF0dGFjaG1lbnQgc2hhcGUgdmFyc1xyXG4gICAgY29uc3QgYXR0YWNobWVudFNoYWZ0V2lkdGggPSBHUklQX0hFSUdIVCAqIDAuMzU7XHJcbiAgICBjb25zdCBhdHRhY2htZW50SGVpZ2h0ID0gR1JJUF9IRUlHSFQgKiAxLjE1O1xyXG4gICAgY29uc3QgYXR0YWNobWVudEJhc2VOdWJXaWR0aCA9IGF0dGFjaG1lbnRTaGFmdFdpZHRoICogMC40O1xyXG4gICAgY29uc3QgYXR0YWNobWVudEJhc2VOdWJIZWlnaHQgPSBhdHRhY2htZW50SGVpZ2h0ICogMC4yO1xyXG4gICAgY29uc3QgYXR0YWNobWVudE1pZGRsZUhlaWdodCA9IGF0dGFjaG1lbnRIZWlnaHQgKiAwLjU7XHJcbiAgICBjb25zdCBhdHRhY2htZW50U21hbGxBcmNSYWRpdXMgPSBhdHRhY2htZW50U2hhZnRXaWR0aCAqIDAuNTtcclxuXHJcbiAgICBjb25zdCBhdHRhY2htZW50T3B0aW9uczogU3RyaWN0T21pdDxQYXRoT3B0aW9ucywgJ2xlZnQnIHwgJ3JpZ2h0Jz4gPSB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuYXR0YWNobWVudEZpbGwsXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5hdHRhY2htZW50U3Ryb2tlLFxyXG4gICAgICBsaW5lV2lkdGg6IG9wdGlvbnMuYXR0YWNobWVudExpbmVXaWR0aCxcclxuICAgICAgbGluZUpvaW46ICdyb3VuZCcsXHJcbiAgICAgIHRvcDogZ3JpcFBhdGguY2VudGVyWSAtIGF0dGFjaG1lbnRTaGFmdFdpZHRoIC8gMlxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBsZWZ0QXR0YWNobWVudFNoYXBlID0gbmV3IFNoYXBlKClcclxuXHJcbiAgICAgIC8vIFN0YXJ0cyBhdCBib3R0b20tbGVmdCBhbmQgcHJvY2VlZHMgY2xvY2t3aXNlXHJcbiAgICAgIC5tb3ZlVG8oIDAsIGF0dGFjaG1lbnRIZWlnaHQgKVxyXG4gICAgICAubGluZVRvUmVsYXRpdmUoIGF0dGFjaG1lbnRCYXNlTnViV2lkdGgsIC1hdHRhY2htZW50QmFzZU51YkhlaWdodCApXHJcbiAgICAgIC5saW5lVG9SZWxhdGl2ZSggMCwgLWF0dGFjaG1lbnRNaWRkbGVIZWlnaHQgKVxyXG5cclxuICAgICAgLy8gVGhlIG1haW4gYXJjIGF0IHRoZSB0b3AgbGVmdCBvZiB0aGUgYXR0YWNobWVudFxyXG4gICAgICAuYXJjKFxyXG4gICAgICAgIGF0dGFjaG1lbnRTaGFmdFdpZHRoICsgYXR0YWNobWVudEJhc2VOdWJXaWR0aCArIGF0dGFjaG1lbnRTbWFsbEFyY1JhZGl1cyxcclxuICAgICAgICBhdHRhY2htZW50SGVpZ2h0IC0gYXR0YWNobWVudEJhc2VOdWJIZWlnaHQgLSBhdHRhY2htZW50TWlkZGxlSGVpZ2h0LFxyXG4gICAgICAgIGF0dGFjaG1lbnRTaGFmdFdpZHRoICsgYXR0YWNobWVudFNtYWxsQXJjUmFkaXVzLFxyXG4gICAgICAgIE1hdGguUEksXHJcbiAgICAgICAgTWF0aC5QSSAqIDEuNSxcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApXHJcbiAgICAgIC5saW5lVG9SZWxhdGl2ZSggMCwgYXR0YWNobWVudFNoYWZ0V2lkdGggKVxyXG5cclxuICAgICAgLy8gVGhpcyBpcyB0aGUgc21hbGxlciBhcmMgb24gdGhlIHVuZGVyc2lkZSBvZiB0aGUgYXR0YWNobWVudFxyXG4gICAgICAuYXJjKFxyXG4gICAgICAgIGF0dGFjaG1lbnRTaGFmdFdpZHRoICsgYXR0YWNobWVudEJhc2VOdWJXaWR0aCArIGF0dGFjaG1lbnRTbWFsbEFyY1JhZGl1cyxcclxuICAgICAgICBhdHRhY2htZW50SGVpZ2h0IC0gYXR0YWNobWVudEJhc2VOdWJIZWlnaHQgLSBhdHRhY2htZW50TWlkZGxlSGVpZ2h0LFxyXG4gICAgICAgIGF0dGFjaG1lbnRTbWFsbEFyY1JhZGl1cyxcclxuICAgICAgICBNYXRoLlBJICogMS41LFxyXG4gICAgICAgIE1hdGguUEksXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApXHJcbiAgICAgIC5saW5lVG9SZWxhdGl2ZSggMCwgYXR0YWNobWVudE1pZGRsZUhlaWdodCApXHJcbiAgICAgIC5saW5lVG9SZWxhdGl2ZSggYXR0YWNobWVudEJhc2VOdWJXaWR0aCwgYXR0YWNobWVudEJhc2VOdWJIZWlnaHQgKVxyXG4gICAgICAubGluZVRvUmVsYXRpdmUoIC1hdHRhY2htZW50U2hhZnRXaWR0aCAtICggYXR0YWNobWVudEJhc2VOdWJXaWR0aCAqIDIgKSwgMCApXHJcbiAgICAgIC5jbG9zZSgpO1xyXG5cclxuICAgIC8vIGxlZnQgYXR0YWNobWVudFxyXG4gICAgaWYgKCBvcHRpb25zLmhhc0xlZnRBdHRhY2htZW50ICkge1xyXG5cclxuICAgICAgY29uc3QgbGVmdEF0dGFjaG1lbnRQYXRoID0gbmV3IFBhdGgoIGxlZnRBdHRhY2htZW50U2hhcGUsIGNvbWJpbmVPcHRpb25zPFBhdGhPcHRpb25zPigge1xyXG4gICAgICAgIHJpZ2h0OiBncmlwUGF0aC5sZWZ0ICsgb3B0aW9ucy5ncmlwTGluZVdpZHRoXHJcbiAgICAgIH0sIGF0dGFjaG1lbnRPcHRpb25zICkgKTtcclxuXHJcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4udW5zaGlmdCggbGVmdEF0dGFjaG1lbnRQYXRoICk7IC8vIHByZXBlbmQgc28gdGhhdCBhdHRhY2htZW50IGlzIGJlaGluZCBncmlwXHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmlnaHQgYXR0YWNobWVudCwgYSBtaXJyb3IgaW1hZ2Ugb2YgdGhlIGxlZnRcclxuICAgIGlmICggb3B0aW9ucy5oYXNSaWdodEF0dGFjaG1lbnQgKSB7XHJcblxyXG4gICAgICBjb25zdCByaWdodEF0dGFjaG1lbnRTaGFwZSA9IGxlZnRBdHRhY2htZW50U2hhcGUudHJhbnNmb3JtZWQoIE1hdHJpeDMuc2NhbGluZyggLTEsIDEgKSApO1xyXG5cclxuICAgICAgLy8gaGFuZGxlIHJpZ2h0IGF0dGFjaG1lbnRcclxuICAgICAgY29uc3QgcmlnaHRBdHRhY2htZW50UGF0aCA9IG5ldyBQYXRoKCByaWdodEF0dGFjaG1lbnRTaGFwZSwgY29tYmluZU9wdGlvbnM8UGF0aE9wdGlvbnM+KCB7XHJcbiAgICAgICAgbGVmdDogZ3JpcFBhdGgucmlnaHQgLSBvcHRpb25zLmdyaXBMaW5lV2lkdGhcclxuICAgICAgfSwgYXR0YWNobWVudE9wdGlvbnMgKSApO1xyXG5cclxuICAgICAgb3B0aW9ucy5jaGlsZHJlbi51bnNoaWZ0KCByaWdodEF0dGFjaG1lbnRQYXRoICk7ICAvLyBwcmVwZW5kIHNvIHRoYXQgYXR0YWNobWVudCBpcyBiZWhpbmQgZ3JpcFxyXG4gICAgfVxyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlSGFuZGxlTm9kZSA9ICgpID0+IHtcclxuICAgICAgZ3JpcEJhc2VDb2xvclByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgYnJpZ2h0ZXJDb2xvclByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgZGFya2VyQ29sb3JQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHN1cHBvcnQgZm9yIGJpbmRlciBkb2N1bWVudGF0aW9uLCBzdHJpcHBlZCBvdXQgaW4gYnVpbGRzIGFuZCBvbmx5IHJ1bnMgd2hlbiA/YmluZGVyIGlzIHNwZWNpZmllZFxyXG4gICAgYXNzZXJ0ICYmIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuYmluZGVyICYmIEluc3RhbmNlUmVnaXN0cnkucmVnaXN0ZXJEYXRhVVJMKCAnc2NlbmVyeS1waGV0JywgJ0hhbmRsZU5vZGUnLCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUhhbmRsZU5vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgYW4gXCJ1cC9kb3duXCIgY29tYmluYXRpb24gdG8gZWl0aGVyIHRoZSB0b3Agb3IgYm90dG9tIG9mIHRoZSBncmlwLlxyXG4gKiBAcGFyYW0gc2hhcGUgLSB0aGUgc2hhcGUgdG8gYXBwZW5kIHRvXHJcbiAqIEBwYXJhbSBzaWduIC0gKzEgZm9yIHRvcCBzaWRlIG9mIGdyaXAsIC0xIGZvciBib3R0b20gc2lkZSBvZiBncmlwXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRHcmlwSW5kZW50KCBzaGFwZTogU2hhcGUsIHNpZ246IDEgfCAtMSApOiB2b2lkIHtcclxuXHJcbiAgLy8gY29udHJvbCBwb2ludHMgZm9yIGN1YmljIGN1cnZlIHNoYXBlIG9uIGdyaXBcclxuICAvLyBlYWNoIHNpbmdsZS1maW5nZXIgaW5kZW50IGlzIG1hZGUgb2YgdHdvIGN1YmljIGN1cnZlcyB0aGF0IGFyZSBtaXJyb3JlZCBvdmVyIHRoZSB5LWF4aXNcclxuICBjb25zdCBjb250cm9sUG9pbnQxWCA9IEdSSVBfU0lOR0xFX0ZJTkdFUl9JTkRFTlRfSEFMRl9XSURUSCAvIDI7XHJcbiAgY29uc3QgY29udHJvbFBvaW50MVkgPSAwO1xyXG4gIGNvbnN0IGNvbnRyb2xQb2ludDJYID0gR1JJUF9TSU5HTEVfRklOR0VSX0lOREVOVF9IQUxGX1dJRFRIIC8gNDtcclxuICBjb25zdCBjb250cm9sUG9pbnQyWSA9IEdSSVBfU0lOR0xFX0ZJTkdFUl9JTkRFTlRfREVQVEg7XHJcblxyXG4gIC8vIHRoaXMgaXMgYSBncmlwIGluZGVudFxyXG4gIHNoYXBlLmN1YmljQ3VydmVUb1JlbGF0aXZlKFxyXG4gICAgc2lnbiAqIGNvbnRyb2xQb2ludDFYLFxyXG4gICAgc2lnbiAqIGNvbnRyb2xQb2ludDFZLFxyXG4gICAgc2lnbiAqIGNvbnRyb2xQb2ludDJYLFxyXG4gICAgc2lnbiAqIGNvbnRyb2xQb2ludDJZLFxyXG4gICAgc2lnbiAqIEdSSVBfU0lOR0xFX0ZJTkdFUl9JTkRFTlRfSEFMRl9XSURUSCxcclxuICAgIHNpZ24gKiBHUklQX1NJTkdMRV9GSU5HRVJfSU5ERU5UX0RFUFRIIClcclxuICAgIC5jdWJpY0N1cnZlVG9SZWxhdGl2ZShcclxuICAgICAgc2lnbiAqICggR1JJUF9TSU5HTEVfRklOR0VSX0lOREVOVF9IQUxGX1dJRFRIIC0gY29udHJvbFBvaW50MlggKSxcclxuICAgICAgc2lnbiAqIC1jb250cm9sUG9pbnQxWSxcclxuICAgICAgc2lnbiAqICggR1JJUF9TSU5HTEVfRklOR0VSX0lOREVOVF9IQUxGX1dJRFRIIC0gY29udHJvbFBvaW50MVggKSxcclxuICAgICAgc2lnbiAqIC1jb250cm9sUG9pbnQyWSxcclxuICAgICAgc2lnbiAqIEdSSVBfU0lOR0xFX0ZJTkdFUl9JTkRFTlRfSEFMRl9XSURUSCxcclxuICAgICAgc2lnbiAqIC1HUklQX1NJTkdMRV9GSU5HRVJfSU5ERU5UX0RFUFRIICk7XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnSGFuZGxlTm9kZScsIEhhbmRsZU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSx5QkFBeUI7QUFFN0MsU0FBU0MsS0FBSyxRQUFRLDBCQUEwQjtBQUNoRCxPQUFPQyxnQkFBZ0IsTUFBTSxzREFBc0Q7QUFDbkYsT0FBT0MsU0FBUyxJQUFJQyxjQUFjLFFBQVEsaUNBQWlDO0FBQzNFLFNBQWlCQyxjQUFjLEVBQUVDLElBQUksRUFBZUMsa0JBQWtCLEVBQUVDLElBQUksUUFBcUIsNkJBQTZCO0FBQzlILE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7O0FBRTFDO0FBQ0E7QUFDQSxNQUFNQyxVQUFVLEdBQUcsR0FBRztBQUN0QixNQUFNQyxXQUFXLEdBQUcsRUFBRTtBQUN0QixNQUFNQyxrQkFBa0IsR0FBR0YsVUFBVSxHQUFHLElBQUk7QUFDNUMsTUFBTUcs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