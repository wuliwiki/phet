// Copyright 2022, University of Colorado Boulder

/**
 * Draws an equilateral or isosceles triangle pointing up by default.
 * triangleWidth sets the base, while triangleHeight sets the altitude.
 * The point of the triangle is drawn to be perpendicular from the halfway point of the base.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 */

import { Shape } from '../../kite/js/imports.js';
import { Path } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
import optionize from '../../phet-core/js/optionize.js';
export default class TriangleNode extends Path {
  constructor(providedOptions) {
    const options = optionize()({
      pointDirection: 'up',
      triangleWidth: 15,
      triangleHeight: 13,
      stroke: 'black',
      lineWidth: 1,
      cursor: 'pointer'
    }, providedOptions);

    // Draws an equilateral or isosceles triangle
    const triangleShape = new Shape().moveTo(options.triangleWidth / 2, 0).lineTo(options.triangleWidth, options.triangleHeight).lineTo(0, options.triangleHeight).close();
    super(triangleShape, options);

    // rotate triangle according to provided options
    this.rotation = options.pointDirection === 'up' ? 0 : options.pointDirection === 'right' ? Math.PI / 2 : options.pointDirection === 'down' ? Math.PI : -Math.PI / 2;
  }
}
sceneryPhet.register('TriangleNode', TriangleNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIlBhdGgiLCJzY2VuZXJ5UGhldCIsIm9wdGlvbml6ZSIsIlRyaWFuZ2xlTm9kZSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInBvaW50RGlyZWN0aW9uIiwidHJpYW5nbGVXaWR0aCIsInRyaWFuZ2xlSGVpZ2h0Iiwic3Ryb2tlIiwibGluZVdpZHRoIiwiY3Vyc29yIiwidHJpYW5nbGVTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlIiwicm90YXRpb24iLCJNYXRoIiwiUEkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRyaWFuZ2xlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRHJhd3MgYW4gZXF1aWxhdGVyYWwgb3IgaXNvc2NlbGVzIHRyaWFuZ2xlIHBvaW50aW5nIHVwIGJ5IGRlZmF1bHQuXHJcbiAqIHRyaWFuZ2xlV2lkdGggc2V0cyB0aGUgYmFzZSwgd2hpbGUgdHJpYW5nbGVIZWlnaHQgc2V0cyB0aGUgYWx0aXR1ZGUuXHJcbiAqIFRoZSBwb2ludCBvZiB0aGUgdHJpYW5nbGUgaXMgZHJhd24gdG8gYmUgcGVycGVuZGljdWxhciBmcm9tIHRoZSBoYWxmd2F5IHBvaW50IG9mIHRoZSBiYXNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcmxhIFNjaHVseiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IFBhdGgsIFBhdGhPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHBvaW50RGlyZWN0aW9uPzogJ3VwJyB8ICdkb3duJyB8ICdyaWdodCcgfCAnbGVmdCc7XHJcbiAgdHJpYW5nbGVXaWR0aD86IG51bWJlcjtcclxuICB0cmlhbmdsZUhlaWdodD86IG51bWJlcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFRyaWFuZ2xlTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8UGF0aE9wdGlvbnMsICdyb3RhdGlvbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJpYW5nbGVOb2RlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBUcmlhbmdsZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VHJpYW5nbGVOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhdGhPcHRpb25zPigpKCB7XHJcbiAgICAgIHBvaW50RGlyZWN0aW9uOiAndXAnLFxyXG4gICAgICB0cmlhbmdsZVdpZHRoOiAxNSxcclxuICAgICAgdHJpYW5nbGVIZWlnaHQ6IDEzLFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGxpbmVXaWR0aDogMSxcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcidcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIERyYXdzIGFuIGVxdWlsYXRlcmFsIG9yIGlzb3NjZWxlcyB0cmlhbmdsZVxyXG4gICAgY29uc3QgdHJpYW5nbGVTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgIC5tb3ZlVG8oIG9wdGlvbnMudHJpYW5nbGVXaWR0aCAvIDIsIDAgKVxyXG4gICAgICAubGluZVRvKCBvcHRpb25zLnRyaWFuZ2xlV2lkdGgsIG9wdGlvbnMudHJpYW5nbGVIZWlnaHQgKVxyXG4gICAgICAubGluZVRvKCAwLCBvcHRpb25zLnRyaWFuZ2xlSGVpZ2h0IClcclxuICAgICAgLmNsb3NlKCk7XHJcblxyXG4gICAgc3VwZXIoIHRyaWFuZ2xlU2hhcGUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyByb3RhdGUgdHJpYW5nbGUgYWNjb3JkaW5nIHRvIHByb3ZpZGVkIG9wdGlvbnNcclxuICAgIHRoaXMucm90YXRpb24gPSBvcHRpb25zLnBvaW50RGlyZWN0aW9uID09PSAndXAnID8gMCA6XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wb2ludERpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/IE1hdGguUEkgLyAyIDpcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBvaW50RGlyZWN0aW9uID09PSAnZG93bicgPyBNYXRoLlBJIDpcclxuICAgICAgICAgICAgICAgICAgICAtTWF0aC5QSSAvIDI7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1RyaWFuZ2xlTm9kZScsIFRyaWFuZ2xlTm9kZSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSwwQkFBMEI7QUFDaEQsU0FBU0MsSUFBSSxRQUFxQiw2QkFBNkI7QUFDL0QsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBV3ZELGVBQWUsTUFBTUMsWUFBWSxTQUFTSCxJQUFJLENBQUM7RUFFdENJLFdBQVdBLENBQUVDLGVBQW9DLEVBQUc7SUFFekQsTUFBTUMsT0FBTyxHQUFHSixTQUFTLENBQWdELENBQUMsQ0FBRTtNQUMxRUssY0FBYyxFQUFFLElBQUk7TUFDcEJDLGFBQWEsRUFBRSxFQUFFO01BQ2pCQyxjQUFjLEVBQUUsRUFBRTtNQUNsQkMsTUFBTSxFQUFFLE9BQU87TUFDZkMsU0FBUyxFQUFFLENBQUM7TUFDWkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUFFUCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1RLGFBQWEsR0FBRyxJQUFJZCxLQUFLLENBQUMsQ0FBQyxDQUM5QmUsTUFBTSxDQUFFUixPQUFPLENBQUNFLGFBQWEsR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQ3RDTyxNQUFNLENBQUVULE9BQU8sQ0FBQ0UsYUFBYSxFQUFFRixPQUFPLENBQUNHLGNBQWUsQ0FBQyxDQUN2RE0sTUFBTSxDQUFFLENBQUMsRUFBRVQsT0FBTyxDQUFDRyxjQUFlLENBQUMsQ0FDbkNPLEtBQUssQ0FBQyxDQUFDO0lBRVYsS0FBSyxDQUFFSCxhQUFhLEVBQUVQLE9BQVEsQ0FBQzs7SUFFL0I7SUFDQSxJQUFJLENBQUNXLFFBQVEsR0FBR1gsT0FBTyxDQUFDQyxjQUFjLEtBQUssSUFBSSxHQUFHLENBQUMsR0FDbkNELE9BQU8sQ0FBQ0MsY0FBYyxLQUFLLE9BQU8sR0FBR1csSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxHQUNoRGIsT0FBTyxDQUFDQyxjQUFjLEtBQUssTUFBTSxHQUFHVyxJQUFJLENBQUNDLEVBQUUsR0FDM0MsQ0FBQ0QsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQztFQUM5QjtBQUNGO0FBRUFsQixXQUFXLENBQUNtQixRQUFRLENBQUUsY0FBYyxFQUFFakIsWUFBYSxDQUFDIn0=