// Copyright 2018-2022, University of Colorado Boulder

/**
 * A node that creates a summary of the screen in the PDOM. This type prevents duplicated code because
 * all screens have an instance of this node that is accessible on the ScreenView type.
 * Do not set the pdomOrder of this Node, as it is ordered in its constructor to accept new children in the
 * proper place. TODO: Add assertions for this, see https://github.com/phetsims/joist/issues/511
 * USAGE: To add content to the screen overview in the PDOM, simply `this.screenSummaryNode.addChild( myNode() )` from
 * the ScreenView subtype, where myNode has accessible content to be displayed in the PDOM.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import { Node } from '../../../../scenery/js/imports.js';
import sceneryPhet from '../../sceneryPhet.js';
import SceneryPhetStrings from '../../SceneryPhetStrings.js';
export default class ScreenSummaryNode extends Node {
  constructor() {
    super();
    this.openingSummaryNode = new Node({
      tagName: 'p'
    });
    const keyboardShortcutsHint = new Node({
      tagName: 'p',
      innerContent: SceneryPhetStrings.a11y.simSection.screenSummary.keyboardShortcutsHintStringProperty
    });
    this.addChild(this.openingSummaryNode);
    this.addChild(keyboardShortcutsHint);

    // set the pdomOrder so that the generic opening summary is first, and the keyboard shortcuts hint is last.
    this.pdomOrder = [this.openingSummaryNode, null, keyboardShortcutsHint];
  }

  /**
   * The parameters are not known in the constructor, so the intro string can be filled after instantiation.
   * @param simName
   * @param screenDisplayName - with the word "Screen" in it, like "Explore Screen"
   * @param isMultiScreen - if the sim has multiple screens
   */
  setIntroString(simName, screenDisplayName, isMultiScreen) {
    // different default string depending on if there are multiple screens
    this.openingSummaryNode.innerContent = isMultiScreen && screenDisplayName ? StringUtils.fillIn(SceneryPhetStrings.a11y.simSection.screenSummary.multiScreenIntroStringProperty, {
      screen: screenDisplayName
    }) : StringUtils.fillIn(SceneryPhetStrings.a11y.simSection.screenSummary.singleScreenIntroPatternStringProperty, {
      sim: simName
    });
  }
}
sceneryPhet.register('ScreenSummaryNode', ScreenSummaryNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIk5vZGUiLCJzY2VuZXJ5UGhldCIsIlNjZW5lcnlQaGV0U3RyaW5ncyIsIlNjcmVlblN1bW1hcnlOb2RlIiwiY29uc3RydWN0b3IiLCJvcGVuaW5nU3VtbWFyeU5vZGUiLCJ0YWdOYW1lIiwia2V5Ym9hcmRTaG9ydGN1dHNIaW50IiwiaW5uZXJDb250ZW50IiwiYTExeSIsInNpbVNlY3Rpb24iLCJzY3JlZW5TdW1tYXJ5Iiwia2V5Ym9hcmRTaG9ydGN1dHNIaW50U3RyaW5nUHJvcGVydHkiLCJhZGRDaGlsZCIsInBkb21PcmRlciIsInNldEludHJvU3RyaW5nIiwic2ltTmFtZSIsInNjcmVlbkRpc3BsYXlOYW1lIiwiaXNNdWx0aVNjcmVlbiIsImZpbGxJbiIsIm11bHRpU2NyZWVuSW50cm9TdHJpbmdQcm9wZXJ0eSIsInNjcmVlbiIsInNpbmdsZVNjcmVlbkludHJvUGF0dGVyblN0cmluZ1Byb3BlcnR5Iiwic2ltIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTY3JlZW5TdW1tYXJ5Tm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIG5vZGUgdGhhdCBjcmVhdGVzIGEgc3VtbWFyeSBvZiB0aGUgc2NyZWVuIGluIHRoZSBQRE9NLiBUaGlzIHR5cGUgcHJldmVudHMgZHVwbGljYXRlZCBjb2RlIGJlY2F1c2VcclxuICogYWxsIHNjcmVlbnMgaGF2ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIG5vZGUgdGhhdCBpcyBhY2Nlc3NpYmxlIG9uIHRoZSBTY3JlZW5WaWV3IHR5cGUuXHJcbiAqIERvIG5vdCBzZXQgdGhlIHBkb21PcmRlciBvZiB0aGlzIE5vZGUsIGFzIGl0IGlzIG9yZGVyZWQgaW4gaXRzIGNvbnN0cnVjdG9yIHRvIGFjY2VwdCBuZXcgY2hpbGRyZW4gaW4gdGhlXHJcbiAqIHByb3BlciBwbGFjZS4gVE9ETzogQWRkIGFzc2VydGlvbnMgZm9yIHRoaXMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzUxMVxyXG4gKiBVU0FHRTogVG8gYWRkIGNvbnRlbnQgdG8gdGhlIHNjcmVlbiBvdmVydmlldyBpbiB0aGUgUERPTSwgc2ltcGx5IGB0aGlzLnNjcmVlblN1bW1hcnlOb2RlLmFkZENoaWxkKCBteU5vZGUoKSApYCBmcm9tXHJcbiAqIHRoZSBTY3JlZW5WaWV3IHN1YnR5cGUsIHdoZXJlIG15Tm9kZSBoYXMgYWNjZXNzaWJsZSBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgUERPTS5cclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uLy4uL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IFNjZW5lcnlQaGV0U3RyaW5ncyBmcm9tICcuLi8uLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NyZWVuU3VtbWFyeU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBvcGVuaW5nU3VtbWFyeU5vZGU6IE5vZGU7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMub3BlbmluZ1N1bW1hcnlOb2RlID0gbmV3IE5vZGUoIHsgdGFnTmFtZTogJ3AnIH0gKTtcclxuXHJcbiAgICBjb25zdCBrZXlib2FyZFNob3J0Y3V0c0hpbnQgPSBuZXcgTm9kZSgge1xyXG4gICAgICB0YWdOYW1lOiAncCcsXHJcbiAgICAgIGlubmVyQ29udGVudDogU2NlbmVyeVBoZXRTdHJpbmdzLmExMXkuc2ltU2VjdGlvbi5zY3JlZW5TdW1tYXJ5LmtleWJvYXJkU2hvcnRjdXRzSGludFN0cmluZ1Byb3BlcnR5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5vcGVuaW5nU3VtbWFyeU5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGtleWJvYXJkU2hvcnRjdXRzSGludCApO1xyXG5cclxuICAgIC8vIHNldCB0aGUgcGRvbU9yZGVyIHNvIHRoYXQgdGhlIGdlbmVyaWMgb3BlbmluZyBzdW1tYXJ5IGlzIGZpcnN0LCBhbmQgdGhlIGtleWJvYXJkIHNob3J0Y3V0cyBoaW50IGlzIGxhc3QuXHJcbiAgICB0aGlzLnBkb21PcmRlciA9IFsgdGhpcy5vcGVuaW5nU3VtbWFyeU5vZGUsIG51bGwsIGtleWJvYXJkU2hvcnRjdXRzSGludCBdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBhcmFtZXRlcnMgYXJlIG5vdCBrbm93biBpbiB0aGUgY29uc3RydWN0b3IsIHNvIHRoZSBpbnRybyBzdHJpbmcgY2FuIGJlIGZpbGxlZCBhZnRlciBpbnN0YW50aWF0aW9uLlxyXG4gICAqIEBwYXJhbSBzaW1OYW1lXHJcbiAgICogQHBhcmFtIHNjcmVlbkRpc3BsYXlOYW1lIC0gd2l0aCB0aGUgd29yZCBcIlNjcmVlblwiIGluIGl0LCBsaWtlIFwiRXhwbG9yZSBTY3JlZW5cIlxyXG4gICAqIEBwYXJhbSBpc011bHRpU2NyZWVuIC0gaWYgdGhlIHNpbSBoYXMgbXVsdGlwbGUgc2NyZWVuc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRJbnRyb1N0cmluZyggc2ltTmFtZTogc3RyaW5nLCBzY3JlZW5EaXNwbGF5TmFtZTogc3RyaW5nIHwgbnVsbCwgaXNNdWx0aVNjcmVlbjogYm9vbGVhbiApOiB2b2lkIHtcclxuXHJcbiAgICAvLyBkaWZmZXJlbnQgZGVmYXVsdCBzdHJpbmcgZGVwZW5kaW5nIG9uIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBzY3JlZW5zXHJcbiAgICB0aGlzLm9wZW5pbmdTdW1tYXJ5Tm9kZS5pbm5lckNvbnRlbnQgPVxyXG4gICAgICAoIGlzTXVsdGlTY3JlZW4gJiYgc2NyZWVuRGlzcGxheU5hbWUgKSA/XHJcbiAgICAgIFN0cmluZ1V0aWxzLmZpbGxJbiggU2NlbmVyeVBoZXRTdHJpbmdzLmExMXkuc2ltU2VjdGlvbi5zY3JlZW5TdW1tYXJ5Lm11bHRpU2NyZWVuSW50cm9TdHJpbmdQcm9wZXJ0eSwgeyBzY3JlZW46IHNjcmVlbkRpc3BsYXlOYW1lIH0gKSA6XHJcbiAgICAgIFN0cmluZ1V0aWxzLmZpbGxJbiggU2NlbmVyeVBoZXRTdHJpbmdzLmExMXkuc2ltU2VjdGlvbi5zY3JlZW5TdW1tYXJ5LnNpbmdsZVNjcmVlbkludHJvUGF0dGVyblN0cmluZ1Byb3BlcnR5LCB7IHNpbTogc2ltTmFtZSB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1NjcmVlblN1bW1hcnlOb2RlJywgU2NyZWVuU3VtbWFyeU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUU1RCxlQUFlLE1BQU1DLGlCQUFpQixTQUFTSCxJQUFJLENBQUM7RUFJM0NJLFdBQVdBLENBQUEsRUFBRztJQUVuQixLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUcsSUFBSUwsSUFBSSxDQUFFO01BQUVNLE9BQU8sRUFBRTtJQUFJLENBQUUsQ0FBQztJQUV0RCxNQUFNQyxxQkFBcUIsR0FBRyxJQUFJUCxJQUFJLENBQUU7TUFDdENNLE9BQU8sRUFBRSxHQUFHO01BQ1pFLFlBQVksRUFBRU4sa0JBQWtCLENBQUNPLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxhQUFhLENBQUNDO0lBQ2pFLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUksQ0FBQ1Isa0JBQW1CLENBQUM7SUFDeEMsSUFBSSxDQUFDUSxRQUFRLENBQUVOLHFCQUFzQixDQUFDOztJQUV0QztJQUNBLElBQUksQ0FBQ08sU0FBUyxHQUFHLENBQUUsSUFBSSxDQUFDVCxrQkFBa0IsRUFBRSxJQUFJLEVBQUVFLHFCQUFxQixDQUFFO0VBQzNFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTUSxjQUFjQSxDQUFFQyxPQUFlLEVBQUVDLGlCQUFnQyxFQUFFQyxhQUFzQixFQUFTO0lBRXZHO0lBQ0EsSUFBSSxDQUFDYixrQkFBa0IsQ0FBQ0csWUFBWSxHQUNoQ1UsYUFBYSxJQUFJRCxpQkFBaUIsR0FDcENsQixXQUFXLENBQUNvQixNQUFNLENBQUVqQixrQkFBa0IsQ0FBQ08sSUFBSSxDQUFDQyxVQUFVLENBQUNDLGFBQWEsQ0FBQ1MsOEJBQThCLEVBQUU7TUFBRUMsTUFBTSxFQUFFSjtJQUFrQixDQUFFLENBQUMsR0FDcElsQixXQUFXLENBQUNvQixNQUFNLENBQUVqQixrQkFBa0IsQ0FBQ08sSUFBSSxDQUFDQyxVQUFVLENBQUNDLGFBQWEsQ0FBQ1csc0NBQXNDLEVBQUU7TUFBRUMsR0FBRyxFQUFFUDtJQUFRLENBQUUsQ0FBQztFQUNuSTtBQUNGO0FBRUFmLFdBQVcsQ0FBQ3VCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRXJCLGlCQUFrQixDQUFDIn0=