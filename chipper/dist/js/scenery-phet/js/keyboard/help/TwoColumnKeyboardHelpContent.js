// Copyright 2019-2022, University of Colorado Boulder

/**
 * TwoColumnKeyboardHelpContentOptions handles layout of KeyboardHelpSections in 2 columns.
 *
 * @author Jesse Greenberg
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HBox, Node, VBox } from '../../../../scenery/js/imports.js';
import sceneryPhet from '../../sceneryPhet.js';
export default class TwoColumnKeyboardHelpContent extends Node {
  /**
   * @param leftSections - KeyboardHelpSections for the left column
   * @param rightSections -  KeyboardHelpSections for the right column
   * @param [providedOptions]
   */
  constructor(leftSections, rightSections, providedOptions) {
    const options = optionize()({
      columnSpacing: 40,
      sectionSpacing: 40
    }, providedOptions);
    const columnOptions = {
      align: 'left',
      spacing: options.sectionSpacing
    };
    const leftColumn = new VBox(combineOptions({
      children: leftSections
    }, columnOptions));
    const rightColumn = new VBox(combineOptions({
      children: rightSections
    }, columnOptions));
    const hBox = new HBox({
      children: [leftColumn, rightColumn],
      spacing: options.columnSpacing,
      align: 'top'
    });
    options.children = [hBox];
    super(options);
    this.disposeTwoColumnKeyboardHelpContent = () => {
      leftColumn.dispose();
      rightColumn.dispose();
      hBox.dispose();
    };
  }
  dispose() {
    this.disposeTwoColumnKeyboardHelpContent();
    super.dispose();
  }
}
sceneryPhet.register('TwoColumnKeyboardHelpContent', TwoColumnKeyboardHelpContent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkhCb3giLCJOb2RlIiwiVkJveCIsInNjZW5lcnlQaGV0IiwiVHdvQ29sdW1uS2V5Ym9hcmRIZWxwQ29udGVudCIsImNvbnN0cnVjdG9yIiwibGVmdFNlY3Rpb25zIiwicmlnaHRTZWN0aW9ucyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjb2x1bW5TcGFjaW5nIiwic2VjdGlvblNwYWNpbmciLCJjb2x1bW5PcHRpb25zIiwiYWxpZ24iLCJzcGFjaW5nIiwibGVmdENvbHVtbiIsImNoaWxkcmVuIiwicmlnaHRDb2x1bW4iLCJoQm94IiwiZGlzcG9zZVR3b0NvbHVtbktleWJvYXJkSGVscENvbnRlbnQiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUd29Db2x1bW5LZXlib2FyZEhlbHBDb250ZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFR3b0NvbHVtbktleWJvYXJkSGVscENvbnRlbnRPcHRpb25zIGhhbmRsZXMgbGF5b3V0IG9mIEtleWJvYXJkSGVscFNlY3Rpb25zIGluIDIgY29sdW1ucy5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHsgSEJveCwgTm9kZSwgTm9kZU9wdGlvbnMsIFZCb3gsIFZCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uLy4uL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IEtleWJvYXJkSGVscFNlY3Rpb24gZnJvbSAnLi9LZXlib2FyZEhlbHBTZWN0aW9uLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIHNwYWNpbmcgYmV0d2VlbiB0aGUgbGVmdCBhbmQgcmlnaHQgY29sdW1ucyBvZiB0aGUgaGVscCBjb250ZW50XHJcbiAgY29sdW1uU3BhY2luZz86IG51bWJlcjtcclxuXHJcbiAgLy8gdmVydGljYWwgc3BhY2luZyBiZXR3ZWVuIEtleWJvYXJkSGVscFNlY3Rpb25zIGluIGVhY2ggY29sdW1uXHJcbiAgc2VjdGlvblNwYWNpbmc/OiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBUd29Db2x1bW5LZXlib2FyZEhlbHBDb250ZW50T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUd29Db2x1bW5LZXlib2FyZEhlbHBDb250ZW50IGV4dGVuZHMgTm9kZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlVHdvQ29sdW1uS2V5Ym9hcmRIZWxwQ29udGVudDogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGxlZnRTZWN0aW9ucyAtIEtleWJvYXJkSGVscFNlY3Rpb25zIGZvciB0aGUgbGVmdCBjb2x1bW5cclxuICAgKiBAcGFyYW0gcmlnaHRTZWN0aW9ucyAtICBLZXlib2FyZEhlbHBTZWN0aW9ucyBmb3IgdGhlIHJpZ2h0IGNvbHVtblxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbGVmdFNlY3Rpb25zOiBLZXlib2FyZEhlbHBTZWN0aW9uW10sIHJpZ2h0U2VjdGlvbnM6IEtleWJvYXJkSGVscFNlY3Rpb25bXSxcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IFR3b0NvbHVtbktleWJvYXJkSGVscENvbnRlbnRPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VHdvQ29sdW1uS2V5Ym9hcmRIZWxwQ29udGVudE9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICBjb2x1bW5TcGFjaW5nOiA0MCxcclxuICAgICAgc2VjdGlvblNwYWNpbmc6IDQwXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBjb2x1bW5PcHRpb25zOiBTdHJpY3RPbWl0PFZCb3hPcHRpb25zLCAnY2hpbGRyZW4nPiA9IHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogb3B0aW9ucy5zZWN0aW9uU3BhY2luZ1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGxlZnRDb2x1bW4gPSBuZXcgVkJveCggY29tYmluZU9wdGlvbnM8VkJveE9wdGlvbnM+KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBsZWZ0U2VjdGlvbnNcclxuICAgIH0sIGNvbHVtbk9wdGlvbnMgKSApO1xyXG4gICAgY29uc3QgcmlnaHRDb2x1bW4gPSBuZXcgVkJveCggY29tYmluZU9wdGlvbnM8VkJveE9wdGlvbnM+KCB7XHJcbiAgICAgIGNoaWxkcmVuOiByaWdodFNlY3Rpb25zXHJcbiAgICB9LCBjb2x1bW5PcHRpb25zICkgKTtcclxuXHJcbiAgICBjb25zdCBoQm94ID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFsgbGVmdENvbHVtbiwgcmlnaHRDb2x1bW4gXSxcclxuICAgICAgc3BhY2luZzogb3B0aW9ucy5jb2x1bW5TcGFjaW5nLFxyXG4gICAgICBhbGlnbjogJ3RvcCdcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBoQm94IF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICAgIHRoaXMuZGlzcG9zZVR3b0NvbHVtbktleWJvYXJkSGVscENvbnRlbnQgPSAoKSA9PiB7XHJcbiAgICAgIGxlZnRDb2x1bW4uZGlzcG9zZSgpO1xyXG4gICAgICByaWdodENvbHVtbi5kaXNwb3NlKCk7XHJcbiAgICAgIGhCb3guZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlVHdvQ29sdW1uS2V5Ym9hcmRIZWxwQ29udGVudCgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdUd29Db2x1bW5LZXlib2FyZEhlbHBDb250ZW50JywgVHdvQ29sdW1uS2V5Ym9hcmRIZWxwQ29udGVudCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLElBQUlDLGNBQWMsUUFBUSx1Q0FBdUM7QUFFakYsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQWVDLElBQUksUUFBcUIsbUNBQW1DO0FBQzlGLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFjOUMsZUFBZSxNQUFNQyw0QkFBNEIsU0FBU0gsSUFBSSxDQUFDO0VBRzdEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsWUFBbUMsRUFBRUMsYUFBb0MsRUFDekVDLGVBQXFELEVBQUc7SUFFMUUsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQWdFLENBQUMsQ0FBRTtNQUMxRlksYUFBYSxFQUFFLEVBQUU7TUFDakJDLGNBQWMsRUFBRTtJQUNsQixDQUFDLEVBQUVILGVBQWdCLENBQUM7SUFFcEIsTUFBTUksYUFBa0QsR0FBRztNQUN6REMsS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFTCxPQUFPLENBQUNFO0lBQ25CLENBQUM7SUFDRCxNQUFNSSxVQUFVLEdBQUcsSUFBSWIsSUFBSSxDQUFFSCxjQUFjLENBQWU7TUFDeERpQixRQUFRLEVBQUVWO0lBQ1osQ0FBQyxFQUFFTSxhQUFjLENBQUUsQ0FBQztJQUNwQixNQUFNSyxXQUFXLEdBQUcsSUFBSWYsSUFBSSxDQUFFSCxjQUFjLENBQWU7TUFDekRpQixRQUFRLEVBQUVUO0lBQ1osQ0FBQyxFQUFFSyxhQUFjLENBQUUsQ0FBQztJQUVwQixNQUFNTSxJQUFJLEdBQUcsSUFBSWxCLElBQUksQ0FBRTtNQUNyQmdCLFFBQVEsRUFBRSxDQUFFRCxVQUFVLEVBQUVFLFdBQVcsQ0FBRTtNQUNyQ0gsT0FBTyxFQUFFTCxPQUFPLENBQUNDLGFBQWE7TUFDOUJHLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQztJQUVISixPQUFPLENBQUNPLFFBQVEsR0FBRyxDQUFFRSxJQUFJLENBQUU7SUFFM0IsS0FBSyxDQUFFVCxPQUFRLENBQUM7SUFDaEIsSUFBSSxDQUFDVSxtQ0FBbUMsR0FBRyxNQUFNO01BQy9DSixVQUFVLENBQUNLLE9BQU8sQ0FBQyxDQUFDO01BQ3BCSCxXQUFXLENBQUNHLE9BQU8sQ0FBQyxDQUFDO01BQ3JCRixJQUFJLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0QsbUNBQW1DLENBQUMsQ0FBQztJQUMxQyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWpCLFdBQVcsQ0FBQ2tCLFFBQVEsQ0FBRSw4QkFBOEIsRUFBRWpCLDRCQUE2QixDQUFDIn0=