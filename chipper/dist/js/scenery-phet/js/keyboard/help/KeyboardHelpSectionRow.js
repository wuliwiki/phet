// Copyright 2022-2023, University of Colorado Boulder

/**
 * A row of KeyboardHelpSection, containing the label, icon, and text. Many of the static functions of
 * KeyboardHelpSection will return a KeyboardHelpSectionRow. The label and icon are often grouped in an AlignGroup for
 * easy positioning in KeyboardHelpSection. This cannot be done in KeyboardHelpSection directly because different
 * labels and icons will have varying layout. For instance, see labelWithIcon vs labelWithIconList.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { AlignGroup, HBox, Node, RichText, Text, VBox } from '../../../../scenery/js/imports.js';
import Disposable from '../../../../axon/js/Disposable.js';
import PhetFont from '../../PhetFont.js';
import sceneryPhet from '../../sceneryPhet.js';
import SceneryPhetStrings from '../../SceneryPhetStrings.js';
import LetterKeyNode from '../LetterKeyNode.js';
import TextKeyNode from '../TextKeyNode.js';
import KeyboardHelpIconFactory from './KeyboardHelpIconFactory.js';
import KeyboardHelpSection from './KeyboardHelpSection.js';

// text fonts and max widths
const LABEL_FONT = new PhetFont(16);
const OR_TEXT_MAX_WIDTH = 16;

// Options type for labelWithIconList, see that function.

// Options type for labelWithIcon, see that function

class KeyboardHelpSectionRow extends Disposable {
  // Includes a reference to the Text because KeyboardHelpSection will constrain the width of all text in its
  // KeyboardHelpSectionRows for i18n.

  // A layout Node containing the readable Text describing this row.

  // An icon Node graphically showing the keyboard keys for this row.

  // voicing - When Voicing is enabled, this is the content for this row that will be spoken with speech synthesis
  // when the row is activated with a click.
  // Reusable font style and size for the KeyboardHelpDialog labels.
  static LABEL_FONT = LABEL_FONT;
  constructor(text, label, icon, providedOptions) {
    const options = optionize()({
      readingBlockContent: null
    }, providedOptions);
    super();
    this.text = text;
    this.label = label;
    this.icon = icon;
    this.readingBlockContent = options.readingBlockContent;
  }

  /**
   * Horizontally align a label and an icon, with the label on the left and the icon on the right. AlignGroup is used
   * to give the label and icon identical dimensions for easy layout in KeyboardHelpSection.
   */
  static labelWithIcon(labelString, icon, providedOptions) {
    const options = optionize()({
      labelInnerContent: null,
      readingBlockContent: null,
      labelOptions: {
        font: LABEL_FONT
      },
      iconOptions: {
        tagName: 'li'
      }
    }, providedOptions);
    const labelText = new RichText(labelString, options.labelOptions);

    // make the label and icon the same height so that they will align when we assemble help section group
    const labelIconGroup = new AlignGroup({
      matchHorizontal: false
    });
    const labelBox = labelIconGroup.createBox(labelText);
    const iconBox = labelIconGroup.createBox(new Node({
      children: [icon]
    }), options.iconOptions);
    iconBox.innerContent = options.labelInnerContent;
    const keyboardHelpSectionRow = new KeyboardHelpSectionRow(labelText, labelBox, iconBox, {
      readingBlockContent: options.readingBlockContent || options.labelInnerContent
    });
    keyboardHelpSectionRow.disposeEmitter.addListener(() => {
      labelIconGroup.dispose();
      labelText.dispose();
    });
    return keyboardHelpSectionRow;
  }

  /**
   * Creates a row with one or more keys, with keys separated by '+'.
   * @param keyStrings - each should be a letter key
   * @param labelString
   * @param [providedOptions]
   */
  static createKeysRowFromStrings(keyStrings, labelString, providedOptions) {
    return KeyboardHelpSectionRow.createKeysRow(keyStrings.map(key => new LetterKeyNode(key)), labelString, providedOptions);
  }

  /**
   * Creates a row with one or more keys, with keys separated by '+'.
   */
  static createKeysRow(keyIcons, labelString, providedOptions) {
    assert && assert(keyIcons.length > 0, 'expected keys');
    let keysNode = null;
    for (let i = 0; i < keyIcons.length; i++) {
      const keyNode = keyIcons[i];

      // Continue to "add" more icons to the end of the keysNode with iconPlusIcon until we go through all keyIcons.
      // If there is only one keyIcon it will just be returned without any '+' icons.
      keysNode = keysNode ? KeyboardHelpIconFactory.iconPlusIcon(keysNode, keyNode) : keyNode;
    }
    assert && assert(keysNode, 'keysNode must be defined since there were more than zero keyIcons.');
    return KeyboardHelpSectionRow.labelWithIcon(labelString, keysNode, providedOptions);
  }

  /**
   * Create an entry for the dialog that looks horizontally aligns a letter key with a 'J' key separated by a plus
   * sign, with a descriptive label. Something like:   * "J + S jumps close to sweater"
   * @param keyString - the letter name that will come after 'J', note this can be hard coded, no need for i18n.
   * @param labelString - visual label
   * @param [providedOptions]
   */
  static createJumpKeyRow(keyString, labelString, providedOptions) {
    return KeyboardHelpSectionRow.createKeysRowFromStrings(['J', keyString], labelString, providedOptions);
  }

  /**
   * Create a KeyboardHelpSectionRow that describes how to play and pause the sim with the "Alt" + "K" hotkey.
   */
  static createPlayPauseKeyRow(labelString, providedOptions) {
    return KeyboardHelpSectionRow.createGlobalHotkeyRow(labelString, SceneryPhetStrings.key.kStringProperty, providedOptions);
  }

  /**
   * Create a KeyboardHelpSectionRow that describes how to step forward the sim with the "Alt" + "L" hotkeys.
   */
  static createStepForwardKeyRow(labelString, providedOptions) {
    return KeyboardHelpSectionRow.createGlobalHotkeyRow(labelString, SceneryPhetStrings.key.lStringProperty, providedOptions);
  }

  /**
   * Create a KeyboardHelpSectionRow that describes how to use a global hotkey. Global hotkeys are triggered with "Alt" plus
   * some other key, to be provided.
   */
  static createGlobalHotkeyRow(labelString, keyString, providedOptions) {
    return KeyboardHelpSectionRow.createKeysRow([TextKeyNode.altOrOption(), new LetterKeyNode(keyString)], labelString, providedOptions);
  }

  /**
   * Create a label with a list of icons. The icons will be vertically aligned, each separated by 'or' text. The
   * label will be vertically centered with the first item in the list of icons. To vertically align the label
   * with the first icon, AlignGroup is used. Finally, an AlignGroup is used to make the label
   * content match height with the entire icon list. When assembled, the label with icon list will look like:
   *
   * This is the label: Icon1 or
   *                    Icon2 or
   *                    Icon3
   */
  static labelWithIconList(labelString, icons, providedOptions) {
    const options = optionize()({
      labelInnerContent: null,
      readingBlockContent: null,
      iconsVBoxOptions: {},
      labelOptions: {
        font: LABEL_FONT
      }
    }, providedOptions);
    options.iconsVBoxOptions = combineOptions({
      spacing: KeyboardHelpSection.DEFAULT_VERTICAL_ICON_SPACING * 0.75,
      // less than the normal vertical icon spacing since it is a group
      align: 'left',
      // pdom - each icon will be presented as a list item under the parent 'ul' of the KeyboardHelpSectionRow.
      tagName: 'li',
      innerContent: options.labelInnerContent
    }, options.iconsVBoxOptions);
    const labelText = new RichText(labelString, options.labelOptions);
    const toDispose = [];

    // horizontally align the label with the first item in the list of icons, guarantees that the label and first
    // icon have identical heights
    const labelFirstIconGroup = new AlignGroup({
      matchHorizontal: false
    });
    labelFirstIconGroup.createBox(new Node({
      children: [icons[0]]
    })); // create the box to restrain bounds, but a reference isn't necessary
    const labelBox = labelFirstIconGroup.createBox(labelText);
    const iconsWithOrText = [];

    // for each of the icons (excluding the last one, add a vertically aligned 'or' text to the right
    for (let i = 0; i < icons.length - 1; i++) {
      const orText = new Text(SceneryPhetStrings.keyboardHelpDialog.orStringProperty, {
        font: LABEL_FONT,
        maxWidth: OR_TEXT_MAX_WIDTH
      });

      // place orText with the icon in an HBox
      const hBox = new HBox({
        children: [new Node({
          children: [icons[i]]
        }), orText],
        spacing: KeyboardHelpIconFactory.DEFAULT_ICON_SPACING
      });
      toDispose.push(orText, hBox);
      iconsWithOrText.push(hBox);
    }
    iconsWithOrText.push(icons[icons.length - 1]);

    // place icons in a VBox, passing through optional spacing and a11y representation
    const iconsVBox = new VBox(combineOptions({
      children: iconsWithOrText
    }, options.iconsVBoxOptions));

    // make the label the same height as the icon list by aligning them in a box that matches height
    const groupOptions = {
      yAlign: 'top'
    };
    const labelIconListGroup = new AlignGroup({
      matchHorizontal: false
    });
    const iconsBox = labelIconListGroup.createBox(iconsVBox, groupOptions); // create the box to match height, but reference not necessary
    const labelWithHeightBox = labelIconListGroup.createBox(labelBox, groupOptions);
    const keyboardHelpSectionRow = new KeyboardHelpSectionRow(labelText, labelWithHeightBox, iconsBox, {
      readingBlockContent: options.readingBlockContent || options.labelInnerContent
    });
    keyboardHelpSectionRow.disposeEmitter.addListener(() => {
      labelFirstIconGroup.dispose();
      labelText.dispose();
      labelIconListGroup.dispose();
      toDispose.forEach(disposable => disposable.dispose());
    });
    return keyboardHelpSectionRow;
  }
}
sceneryPhet.register('KeyboardHelpSectionRow', KeyboardHelpSectionRow);
export default KeyboardHelpSectionRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkFsaWduR3JvdXAiLCJIQm94IiwiTm9kZSIsIlJpY2hUZXh0IiwiVGV4dCIsIlZCb3giLCJEaXNwb3NhYmxlIiwiUGhldEZvbnQiLCJzY2VuZXJ5UGhldCIsIlNjZW5lcnlQaGV0U3RyaW5ncyIsIkxldHRlcktleU5vZGUiLCJUZXh0S2V5Tm9kZSIsIktleWJvYXJkSGVscEljb25GYWN0b3J5IiwiS2V5Ym9hcmRIZWxwU2VjdGlvbiIsIkxBQkVMX0ZPTlQiLCJPUl9URVhUX01BWF9XSURUSCIsIktleWJvYXJkSGVscFNlY3Rpb25Sb3ciLCJjb25zdHJ1Y3RvciIsInRleHQiLCJsYWJlbCIsImljb24iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicmVhZGluZ0Jsb2NrQ29udGVudCIsImxhYmVsV2l0aEljb24iLCJsYWJlbFN0cmluZyIsImxhYmVsSW5uZXJDb250ZW50IiwibGFiZWxPcHRpb25zIiwiZm9udCIsImljb25PcHRpb25zIiwidGFnTmFtZSIsImxhYmVsVGV4dCIsImxhYmVsSWNvbkdyb3VwIiwibWF0Y2hIb3Jpem9udGFsIiwibGFiZWxCb3giLCJjcmVhdGVCb3giLCJpY29uQm94IiwiY2hpbGRyZW4iLCJpbm5lckNvbnRlbnQiLCJrZXlib2FyZEhlbHBTZWN0aW9uUm93IiwiZGlzcG9zZUVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImRpc3Bvc2UiLCJjcmVhdGVLZXlzUm93RnJvbVN0cmluZ3MiLCJrZXlTdHJpbmdzIiwiY3JlYXRlS2V5c1JvdyIsIm1hcCIsImtleSIsImtleUljb25zIiwiYXNzZXJ0IiwibGVuZ3RoIiwia2V5c05vZGUiLCJpIiwia2V5Tm9kZSIsImljb25QbHVzSWNvbiIsImNyZWF0ZUp1bXBLZXlSb3ciLCJrZXlTdHJpbmciLCJjcmVhdGVQbGF5UGF1c2VLZXlSb3ciLCJjcmVhdGVHbG9iYWxIb3RrZXlSb3ciLCJrU3RyaW5nUHJvcGVydHkiLCJjcmVhdGVTdGVwRm9yd2FyZEtleVJvdyIsImxTdHJpbmdQcm9wZXJ0eSIsImFsdE9yT3B0aW9uIiwibGFiZWxXaXRoSWNvbkxpc3QiLCJpY29ucyIsImljb25zVkJveE9wdGlvbnMiLCJzcGFjaW5nIiwiREVGQVVMVF9WRVJUSUNBTF9JQ09OX1NQQUNJTkciLCJhbGlnbiIsInRvRGlzcG9zZSIsImxhYmVsRmlyc3RJY29uR3JvdXAiLCJpY29uc1dpdGhPclRleHQiLCJvclRleHQiLCJrZXlib2FyZEhlbHBEaWFsb2ciLCJvclN0cmluZ1Byb3BlcnR5IiwibWF4V2lkdGgiLCJoQm94IiwiREVGQVVMVF9JQ09OX1NQQUNJTkciLCJwdXNoIiwiaWNvbnNWQm94IiwiZ3JvdXBPcHRpb25zIiwieUFsaWduIiwibGFiZWxJY29uTGlzdEdyb3VwIiwiaWNvbnNCb3giLCJsYWJlbFdpdGhIZWlnaHRCb3giLCJmb3JFYWNoIiwiZGlzcG9zYWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiS2V5Ym9hcmRIZWxwU2VjdGlvblJvdy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHJvdyBvZiBLZXlib2FyZEhlbHBTZWN0aW9uLCBjb250YWluaW5nIHRoZSBsYWJlbCwgaWNvbiwgYW5kIHRleHQuIE1hbnkgb2YgdGhlIHN0YXRpYyBmdW5jdGlvbnMgb2ZcclxuICogS2V5Ym9hcmRIZWxwU2VjdGlvbiB3aWxsIHJldHVybiBhIEtleWJvYXJkSGVscFNlY3Rpb25Sb3cuIFRoZSBsYWJlbCBhbmQgaWNvbiBhcmUgb2Z0ZW4gZ3JvdXBlZCBpbiBhbiBBbGlnbkdyb3VwIGZvclxyXG4gKiBlYXN5IHBvc2l0aW9uaW5nIGluIEtleWJvYXJkSGVscFNlY3Rpb24uIFRoaXMgY2Fubm90IGJlIGRvbmUgaW4gS2V5Ym9hcmRIZWxwU2VjdGlvbiBkaXJlY3RseSBiZWNhdXNlIGRpZmZlcmVudFxyXG4gKiBsYWJlbHMgYW5kIGljb25zIHdpbGwgaGF2ZSB2YXJ5aW5nIGxheW91dC4gRm9yIGluc3RhbmNlLCBzZWUgbGFiZWxXaXRoSWNvbiB2cyBsYWJlbFdpdGhJY29uTGlzdC5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHsgQWxpZ25Cb3hPcHRpb25zLCBBbGlnbkdyb3VwLCBIQm94LCBOb2RlLCBQRE9NVmFsdWVUeXBlLCBSaWNoVGV4dCwgUmljaFRleHRPcHRpb25zLCBUZXh0LCBWQm94LCBWQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBEaXNwb3NhYmxlIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGlzcG9zYWJsZS5qcyc7XHJcbmltcG9ydCB7IFZvaWNpbmdSZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9SZXNwb25zZVBhY2tldC5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi8uLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCBTY2VuZXJ5UGhldFN0cmluZ3MgZnJvbSAnLi4vLi4vU2NlbmVyeVBoZXRTdHJpbmdzLmpzJztcclxuaW1wb3J0IExldHRlcktleU5vZGUgZnJvbSAnLi4vTGV0dGVyS2V5Tm9kZS5qcyc7XHJcbmltcG9ydCBUZXh0S2V5Tm9kZSBmcm9tICcuLi9UZXh0S2V5Tm9kZS5qcyc7XHJcbmltcG9ydCBLZXlib2FyZEhlbHBJY29uRmFjdG9yeSBmcm9tICcuL0tleWJvYXJkSGVscEljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IEtleWJvYXJkSGVscFNlY3Rpb24gZnJvbSAnLi9LZXlib2FyZEhlbHBTZWN0aW9uLmpzJztcclxuXHJcbi8vIHRleHQgZm9udHMgYW5kIG1heCB3aWR0aHNcclxuY29uc3QgTEFCRUxfRk9OVCA9IG5ldyBQaGV0Rm9udCggMTYgKTtcclxuY29uc3QgT1JfVEVYVF9NQVhfV0lEVEggPSAxNjtcclxuXHJcbi8vIE9wdGlvbnMgdHlwZSBmb3IgbGFiZWxXaXRoSWNvbkxpc3QsIHNlZSB0aGF0IGZ1bmN0aW9uLlxyXG50eXBlIExhYmVsV2l0aEljb25MaXN0T3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gY29udGVudCBmb3IgdGhlIHBhcmFsbGVsIERPTSByZXByZXNlbnRpbmcgdGhlIGVudGlyZSByb3csIHJlYWQgYnkgYSBzY3JlZW4gcmVhZGVyXHJcbiAgbGFiZWxJbm5lckNvbnRlbnQ/OiBQRE9NVmFsdWVUeXBlIHwgbnVsbDtcclxuXHJcbiAgLy8gb3B0aW9ucyBwYXNzZWQgdG8gdGhlIFJpY2hUZXh0IGxhYmVsXHJcbiAgbGFiZWxPcHRpb25zPzogUmljaFRleHRPcHRpb25zO1xyXG5cclxuICAvLyB2b2ljaW5nXHJcbiAgLy8gQ29udGVudCBmb3IgdGhpcyBpY29uIHRoYXQgaXMgcmVhZCBieSB0aGUgVm9pY2luZyBmZWF0dXJlIHdoZW4gaW4gYSBLZXlib2FyZEhlbHBTZWN0aW9uLiBJZiBudWxsLFxyXG4gIC8vIHdpbGwgZGVmYXVsdCB0byBvcHRpb25zLmxhYmVsSW5uZXJDb250ZW50LlxyXG4gIHJlYWRpbmdCbG9ja0NvbnRlbnQ/OiBWb2ljaW5nUmVzcG9uc2UgfCBudWxsO1xyXG5cclxuICAvLyBPcHRpb25zIGZvciB0aGUgVkJveCB0aGF0IG1hbmFnZXMgbGF5b3V0IGZvciBhbGwgaWNvbnMgaW4gdGhlIGxpc3QuIE9wdGlvbnMgb21pdHRlZCBhcmUgc2V0IGJ5IHRoZSBmdW5jdGlvbi5cclxuICBpY29uc1ZCb3hPcHRpb25zPzogU3RyaWN0T21pdDxWQm94T3B0aW9ucywgJ2lubmVyQ29udGVudCcgfCAnc3BhY2luZycgfCAnYWxpZ24nIHwgJ3RhZ05hbWUnPjtcclxufTtcclxuXHJcbi8vIE9wdGlvbnMgdHlwZSBmb3IgbGFiZWxXaXRoSWNvbiwgc2VlIHRoYXQgZnVuY3Rpb25cclxudHlwZSBMYWJlbFdpdGhJY29uT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8ge3N0cmluZ3xudWxsfSB0byBwcm92aWRlIHRoZSBQRE9NIGRlc2NyaXB0aW9uIG9mIHRoaXMgcm93XHJcbiAgbGFiZWxJbm5lckNvbnRlbnQ/OiBzdHJpbmcgfCBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+IHwgbnVsbDtcclxuXHJcbiAgLy8ge3N0cmluZ30gLSBDb250ZW50IGZvciB0aGlzIGljb24gdGhhdCBpcyByZWFkIGJ5IHRoZSBWb2ljaW5nIGZlYXR1cmUgd2hlbiBpbiBhIEtleWJvYXJkSGVscFNlY3Rpb24uIElmIG51bGwsXHJcbiAgLy8gd2lsbCBkZWZhdWx0IHRvIHRoZSBvcHRpb25zLmxhYmVsSW5uZXJDb250ZW50LlxyXG4gIHJlYWRpbmdCbG9ja0NvbnRlbnQ/OiBWb2ljaW5nUmVzcG9uc2UgfCBudWxsO1xyXG5cclxuICAvLyBvcHRpb25zIHBhc3NlZCB0byB0aGUgUmljaFRleHQgbGFiZWxcclxuICBsYWJlbE9wdGlvbnM/OiBSaWNoVGV4dE9wdGlvbnM7XHJcblxyXG4gIC8vIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSBBbGlnbkJveCBzdXJyb3VuZGluZyB0aGUgaWNvblxyXG4gIGljb25PcHRpb25zPzogU3RyaWN0T21pdDxBbGlnbkJveE9wdGlvbnMsICdpbm5lckNvbnRlbnQnPjtcclxufTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIHZvaWNpbmcgLSBUaGUgY29udGVudCB0aGF0IGlzIHJlYWQgd2l0aCB0aGUgVm9pY2luZyBmZWF0dXJlIHdoZW4gZW5hYmxlZC4gV2hlbiBjbGlja2VkLCB0aGUgcmVhZGluZ0Jsb2NrQ29udGVudFxyXG4gIC8vIGZvciBldmVyeSBLZXlib2FyZEhlbHBTZWN0aW9uUm93IGluIHRoZSBLZXlib2FyZEhlbHBTZWN0aW9uIGlzIHJlYWQuXHJcbiAgcmVhZGluZ0Jsb2NrQ29udGVudD86IFZvaWNpbmdSZXNwb25zZSB8IG51bGw7XHJcbn07XHJcbnR5cGUgS2V5Ym9hcmRIZWxwU2VjdGlvblJvd09wdGlvbnMgPSBTZWxmT3B0aW9ucztcclxuXHJcbmNsYXNzIEtleWJvYXJkSGVscFNlY3Rpb25Sb3cgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcclxuXHJcbiAgLy8gSW5jbHVkZXMgYSByZWZlcmVuY2UgdG8gdGhlIFRleHQgYmVjYXVzZSBLZXlib2FyZEhlbHBTZWN0aW9uIHdpbGwgY29uc3RyYWluIHRoZSB3aWR0aCBvZiBhbGwgdGV4dCBpbiBpdHNcclxuICAvLyBLZXlib2FyZEhlbHBTZWN0aW9uUm93cyBmb3IgaTE4bi5cclxuICBwdWJsaWMgcmVhZG9ubHkgdGV4dDogVGV4dCB8IFJpY2hUZXh0O1xyXG5cclxuICAvLyBBIGxheW91dCBOb2RlIGNvbnRhaW5pbmcgdGhlIHJlYWRhYmxlIFRleHQgZGVzY3JpYmluZyB0aGlzIHJvdy5cclxuICBwdWJsaWMgcmVhZG9ubHkgbGFiZWw6IE5vZGU7XHJcblxyXG4gIC8vIEFuIGljb24gTm9kZSBncmFwaGljYWxseSBzaG93aW5nIHRoZSBrZXlib2FyZCBrZXlzIGZvciB0aGlzIHJvdy5cclxuICBwdWJsaWMgcmVhZG9ubHkgaWNvbjogTm9kZTtcclxuXHJcbiAgLy8gdm9pY2luZyAtIFdoZW4gVm9pY2luZyBpcyBlbmFibGVkLCB0aGlzIGlzIHRoZSBjb250ZW50IGZvciB0aGlzIHJvdyB0aGF0IHdpbGwgYmUgc3Bva2VuIHdpdGggc3BlZWNoIHN5bnRoZXNpc1xyXG4gIC8vIHdoZW4gdGhlIHJvdyBpcyBhY3RpdmF0ZWQgd2l0aCBhIGNsaWNrLlxyXG4gIHB1YmxpYyByZWFkb25seSByZWFkaW5nQmxvY2tDb250ZW50OiBWb2ljaW5nUmVzcG9uc2UgfCBudWxsO1xyXG5cclxuICAvLyBSZXVzYWJsZSBmb250IHN0eWxlIGFuZCBzaXplIGZvciB0aGUgS2V5Ym9hcmRIZWxwRGlhbG9nIGxhYmVscy5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExBQkVMX0ZPTlQgPSBMQUJFTF9GT05UO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRleHQ6IFRleHQgfCBSaWNoVGV4dCwgbGFiZWw6IE5vZGUsIGljb246IE5vZGUsIHByb3ZpZGVkT3B0aW9ucz86IEtleWJvYXJkSGVscFNlY3Rpb25Sb3dPcHRpb25zICkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxLZXlib2FyZEhlbHBTZWN0aW9uUm93T3B0aW9ucywgU2VsZk9wdGlvbnM+KCkoIHtcclxuICAgICAgcmVhZGluZ0Jsb2NrQ29udGVudDogbnVsbFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgdGhpcy5pY29uID0gaWNvbjtcclxuICAgIHRoaXMucmVhZGluZ0Jsb2NrQ29udGVudCA9IG9wdGlvbnMucmVhZGluZ0Jsb2NrQ29udGVudDtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBIb3Jpem9udGFsbHkgYWxpZ24gYSBsYWJlbCBhbmQgYW4gaWNvbiwgd2l0aCB0aGUgbGFiZWwgb24gdGhlIGxlZnQgYW5kIHRoZSBpY29uIG9uIHRoZSByaWdodC4gQWxpZ25Hcm91cCBpcyB1c2VkXHJcbiAgICogdG8gZ2l2ZSB0aGUgbGFiZWwgYW5kIGljb24gaWRlbnRpY2FsIGRpbWVuc2lvbnMgZm9yIGVhc3kgbGF5b3V0IGluIEtleWJvYXJkSGVscFNlY3Rpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBsYWJlbFdpdGhJY29uKCBsYWJlbFN0cmluZzogc3RyaW5nIHwgVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiwgaWNvbjogTm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IExhYmVsV2l0aEljb25PcHRpb25zICk6IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxMYWJlbFdpdGhJY29uT3B0aW9ucz4oKSgge1xyXG4gICAgICBsYWJlbElubmVyQ29udGVudDogbnVsbCxcclxuICAgICAgcmVhZGluZ0Jsb2NrQ29udGVudDogbnVsbCxcclxuXHJcbiAgICAgIGxhYmVsT3B0aW9uczoge1xyXG4gICAgICAgIGZvbnQ6IExBQkVMX0ZPTlRcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGljb25PcHRpb25zOiB7XHJcbiAgICAgICAgdGFnTmFtZTogJ2xpJ1xyXG4gICAgICB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBsYWJlbFRleHQgPSBuZXcgUmljaFRleHQoIGxhYmVsU3RyaW5nLCBvcHRpb25zLmxhYmVsT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIG1ha2UgdGhlIGxhYmVsIGFuZCBpY29uIHRoZSBzYW1lIGhlaWdodCBzbyB0aGF0IHRoZXkgd2lsbCBhbGlnbiB3aGVuIHdlIGFzc2VtYmxlIGhlbHAgc2VjdGlvbiBncm91cFxyXG4gICAgY29uc3QgbGFiZWxJY29uR3JvdXAgPSBuZXcgQWxpZ25Hcm91cCggeyBtYXRjaEhvcml6b250YWw6IGZhbHNlIH0gKTtcclxuICAgIGNvbnN0IGxhYmVsQm94ID0gbGFiZWxJY29uR3JvdXAuY3JlYXRlQm94KCBsYWJlbFRleHQgKTtcclxuICAgIGNvbnN0IGljb25Cb3ggPSBsYWJlbEljb25Hcm91cC5jcmVhdGVCb3goIG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGljb24gXSB9ICksIG9wdGlvbnMuaWNvbk9wdGlvbnMgKTtcclxuXHJcbiAgICBpY29uQm94LmlubmVyQ29udGVudCA9IG9wdGlvbnMubGFiZWxJbm5lckNvbnRlbnQ7XHJcblxyXG4gICAgY29uc3Qga2V5Ym9hcmRIZWxwU2VjdGlvblJvdyA9IG5ldyBLZXlib2FyZEhlbHBTZWN0aW9uUm93KCBsYWJlbFRleHQsIGxhYmVsQm94LCBpY29uQm94LCB7XHJcbiAgICAgIHJlYWRpbmdCbG9ja0NvbnRlbnQ6IG9wdGlvbnMucmVhZGluZ0Jsb2NrQ29udGVudCB8fCBvcHRpb25zLmxhYmVsSW5uZXJDb250ZW50XHJcbiAgICB9ICk7XHJcblxyXG4gICAga2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5kaXNwb3NlRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICBsYWJlbEljb25Hcm91cC5kaXNwb3NlKCk7XHJcbiAgICAgIGxhYmVsVGV4dC5kaXNwb3NlKCk7XHJcbiAgICB9ICk7XHJcbiAgICByZXR1cm4ga2V5Ym9hcmRIZWxwU2VjdGlvblJvdztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSByb3cgd2l0aCBvbmUgb3IgbW9yZSBrZXlzLCB3aXRoIGtleXMgc2VwYXJhdGVkIGJ5ICcrJy5cclxuICAgKiBAcGFyYW0ga2V5U3RyaW5ncyAtIGVhY2ggc2hvdWxkIGJlIGEgbGV0dGVyIGtleVxyXG4gICAqIEBwYXJhbSBsYWJlbFN0cmluZ1xyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlS2V5c1Jvd0Zyb21TdHJpbmdzKCBrZXlTdHJpbmdzOiBzdHJpbmdbXSwgbGFiZWxTdHJpbmc6IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IExhYmVsV2l0aEljb25PcHRpb25zICk6IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cge1xyXG4gICAgcmV0dXJuIEtleWJvYXJkSGVscFNlY3Rpb25Sb3cuY3JlYXRlS2V5c1Jvdygga2V5U3RyaW5ncy5tYXAoIGtleSA9PiBuZXcgTGV0dGVyS2V5Tm9kZSgga2V5ICkgKSwgbGFiZWxTdHJpbmcsIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIHJvdyB3aXRoIG9uZSBvciBtb3JlIGtleXMsIHdpdGgga2V5cyBzZXBhcmF0ZWQgYnkgJysnLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlS2V5c1Jvdygga2V5SWNvbnM6IE5vZGVbXSwgbGFiZWxTdHJpbmc6IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBMYWJlbFdpdGhJY29uT3B0aW9ucyApOiBLZXlib2FyZEhlbHBTZWN0aW9uUm93IHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGtleUljb25zLmxlbmd0aCA+IDAsICdleHBlY3RlZCBrZXlzJyApO1xyXG4gICAgbGV0IGtleXNOb2RlID0gbnVsbDtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGtleUljb25zLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBjb25zdCBrZXlOb2RlID0ga2V5SWNvbnNbIGkgXTtcclxuXHJcbiAgICAgIC8vIENvbnRpbnVlIHRvIFwiYWRkXCIgbW9yZSBpY29ucyB0byB0aGUgZW5kIG9mIHRoZSBrZXlzTm9kZSB3aXRoIGljb25QbHVzSWNvbiB1bnRpbCB3ZSBnbyB0aHJvdWdoIGFsbCBrZXlJY29ucy5cclxuICAgICAgLy8gSWYgdGhlcmUgaXMgb25seSBvbmUga2V5SWNvbiBpdCB3aWxsIGp1c3QgYmUgcmV0dXJuZWQgd2l0aG91dCBhbnkgJysnIGljb25zLlxyXG4gICAgICBrZXlzTm9kZSA9IGtleXNOb2RlID8gS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnkuaWNvblBsdXNJY29uKCBrZXlzTm9kZSwga2V5Tm9kZSApIDoga2V5Tm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBrZXlzTm9kZSwgJ2tleXNOb2RlIG11c3QgYmUgZGVmaW5lZCBzaW5jZSB0aGVyZSB3ZXJlIG1vcmUgdGhhbiB6ZXJvIGtleUljb25zLicgKTtcclxuICAgIHJldHVybiBLZXlib2FyZEhlbHBTZWN0aW9uUm93LmxhYmVsV2l0aEljb24oIGxhYmVsU3RyaW5nLCBrZXlzTm9kZSEsIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGFuIGVudHJ5IGZvciB0aGUgZGlhbG9nIHRoYXQgbG9va3MgaG9yaXpvbnRhbGx5IGFsaWducyBhIGxldHRlciBrZXkgd2l0aCBhICdKJyBrZXkgc2VwYXJhdGVkIGJ5IGEgcGx1c1xyXG4gICAqIHNpZ24sIHdpdGggYSBkZXNjcmlwdGl2ZSBsYWJlbC4gU29tZXRoaW5nIGxpa2U6ICAgKiBcIkogKyBTIGp1bXBzIGNsb3NlIHRvIHN3ZWF0ZXJcIlxyXG4gICAqIEBwYXJhbSBrZXlTdHJpbmcgLSB0aGUgbGV0dGVyIG5hbWUgdGhhdCB3aWxsIGNvbWUgYWZ0ZXIgJ0onLCBub3RlIHRoaXMgY2FuIGJlIGhhcmQgY29kZWQsIG5vIG5lZWQgZm9yIGkxOG4uXHJcbiAgICogQHBhcmFtIGxhYmVsU3RyaW5nIC0gdmlzdWFsIGxhYmVsXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVKdW1wS2V5Um93KCBrZXlTdHJpbmc6IHN0cmluZywgbGFiZWxTdHJpbmc6IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBMYWJlbFdpdGhJY29uT3B0aW9ucyApOiBLZXlib2FyZEhlbHBTZWN0aW9uUm93IHtcclxuICAgIHJldHVybiBLZXlib2FyZEhlbHBTZWN0aW9uUm93LmNyZWF0ZUtleXNSb3dGcm9tU3RyaW5ncyggWyAnSicsIGtleVN0cmluZyBdLCBsYWJlbFN0cmluZywgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBLZXlib2FyZEhlbHBTZWN0aW9uUm93IHRoYXQgZGVzY3JpYmVzIGhvdyB0byBwbGF5IGFuZCBwYXVzZSB0aGUgc2ltIHdpdGggdGhlIFwiQWx0XCIgKyBcIktcIiBob3RrZXkuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVQbGF5UGF1c2VLZXlSb3coIGxhYmVsU3RyaW5nOiBzdHJpbmcgfCBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBMYWJlbFdpdGhJY29uT3B0aW9ucyApOiBLZXlib2FyZEhlbHBTZWN0aW9uUm93IHtcclxuICAgIHJldHVybiBLZXlib2FyZEhlbHBTZWN0aW9uUm93LmNyZWF0ZUdsb2JhbEhvdGtleVJvdyggbGFiZWxTdHJpbmcsIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkua1N0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIEtleWJvYXJkSGVscFNlY3Rpb25Sb3cgdGhhdCBkZXNjcmliZXMgaG93IHRvIHN0ZXAgZm9yd2FyZCB0aGUgc2ltIHdpdGggdGhlIFwiQWx0XCIgKyBcIkxcIiBob3RrZXlzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlU3RlcEZvcndhcmRLZXlSb3coIGxhYmVsU3RyaW5nOiBzdHJpbmcgfCBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IExhYmVsV2l0aEljb25PcHRpb25zICk6IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cge1xyXG4gICAgcmV0dXJuIEtleWJvYXJkSGVscFNlY3Rpb25Sb3cuY3JlYXRlR2xvYmFsSG90a2V5Um93KCBsYWJlbFN0cmluZywgU2NlbmVyeVBoZXRTdHJpbmdzLmtleS5sU3RyaW5nUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgS2V5Ym9hcmRIZWxwU2VjdGlvblJvdyB0aGF0IGRlc2NyaWJlcyBob3cgdG8gdXNlIGEgZ2xvYmFsIGhvdGtleS4gR2xvYmFsIGhvdGtleXMgYXJlIHRyaWdnZXJlZCB3aXRoIFwiQWx0XCIgcGx1c1xyXG4gICAqIHNvbWUgb3RoZXIga2V5LCB0byBiZSBwcm92aWRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZUdsb2JhbEhvdGtleVJvdyggbGFiZWxTdHJpbmc6IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sIGtleVN0cmluZzogc3RyaW5nIHwgVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogTGFiZWxXaXRoSWNvbk9wdGlvbnMgKTogS2V5Ym9hcmRIZWxwU2VjdGlvblJvdyB7XHJcbiAgICByZXR1cm4gS2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5jcmVhdGVLZXlzUm93KCBbIFRleHRLZXlOb2RlLmFsdE9yT3B0aW9uKCksIG5ldyBMZXR0ZXJLZXlOb2RlKCBrZXlTdHJpbmcgKSBdLCBsYWJlbFN0cmluZywgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBsYWJlbCB3aXRoIGEgbGlzdCBvZiBpY29ucy4gVGhlIGljb25zIHdpbGwgYmUgdmVydGljYWxseSBhbGlnbmVkLCBlYWNoIHNlcGFyYXRlZCBieSAnb3InIHRleHQuIFRoZVxyXG4gICAqIGxhYmVsIHdpbGwgYmUgdmVydGljYWxseSBjZW50ZXJlZCB3aXRoIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0IG9mIGljb25zLiBUbyB2ZXJ0aWNhbGx5IGFsaWduIHRoZSBsYWJlbFxyXG4gICAqIHdpdGggdGhlIGZpcnN0IGljb24sIEFsaWduR3JvdXAgaXMgdXNlZC4gRmluYWxseSwgYW4gQWxpZ25Hcm91cCBpcyB1c2VkIHRvIG1ha2UgdGhlIGxhYmVsXHJcbiAgICogY29udGVudCBtYXRjaCBoZWlnaHQgd2l0aCB0aGUgZW50aXJlIGljb24gbGlzdC4gV2hlbiBhc3NlbWJsZWQsIHRoZSBsYWJlbCB3aXRoIGljb24gbGlzdCB3aWxsIGxvb2sgbGlrZTpcclxuICAgKlxyXG4gICAqIFRoaXMgaXMgdGhlIGxhYmVsOiBJY29uMSBvclxyXG4gICAqICAgICAgICAgICAgICAgICAgICBJY29uMiBvclxyXG4gICAqICAgICAgICAgICAgICAgICAgICBJY29uM1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgbGFiZWxXaXRoSWNvbkxpc3QoIGxhYmVsU3RyaW5nOiBzdHJpbmcgfCBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCBpY29uczogTm9kZVtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IExhYmVsV2l0aEljb25MaXN0T3B0aW9ucyApOiBLZXlib2FyZEhlbHBTZWN0aW9uUm93IHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPExhYmVsV2l0aEljb25MaXN0T3B0aW9ucz4oKSgge1xyXG4gICAgICBsYWJlbElubmVyQ29udGVudDogbnVsbCxcclxuICAgICAgcmVhZGluZ0Jsb2NrQ29udGVudDogbnVsbCxcclxuICAgICAgaWNvbnNWQm94T3B0aW9uczoge30sXHJcbiAgICAgIGxhYmVsT3B0aW9uczoge1xyXG4gICAgICAgIGZvbnQ6IExBQkVMX0ZPTlRcclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy5pY29uc1ZCb3hPcHRpb25zID0gY29tYmluZU9wdGlvbnM8VkJveE9wdGlvbnM+KCB7XHJcbiAgICAgIHNwYWNpbmc6IEtleWJvYXJkSGVscFNlY3Rpb24uREVGQVVMVF9WRVJUSUNBTF9JQ09OX1NQQUNJTkcgKiAwLjc1LCAvLyBsZXNzIHRoYW4gdGhlIG5vcm1hbCB2ZXJ0aWNhbCBpY29uIHNwYWNpbmcgc2luY2UgaXQgaXMgYSBncm91cFxyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG5cclxuICAgICAgLy8gcGRvbSAtIGVhY2ggaWNvbiB3aWxsIGJlIHByZXNlbnRlZCBhcyBhIGxpc3QgaXRlbSB1bmRlciB0aGUgcGFyZW50ICd1bCcgb2YgdGhlIEtleWJvYXJkSGVscFNlY3Rpb25Sb3cuXHJcbiAgICAgIHRhZ05hbWU6ICdsaScsXHJcbiAgICAgIGlubmVyQ29udGVudDogb3B0aW9ucy5sYWJlbElubmVyQ29udGVudFxyXG4gICAgfSwgb3B0aW9ucy5pY29uc1ZCb3hPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFJpY2hUZXh0KCBsYWJlbFN0cmluZywgb3B0aW9ucy5sYWJlbE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB0b0Rpc3Bvc2U6IE5vZGVbXSA9IFtdO1xyXG5cclxuICAgIC8vIGhvcml6b250YWxseSBhbGlnbiB0aGUgbGFiZWwgd2l0aCB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgbGlzdCBvZiBpY29ucywgZ3VhcmFudGVlcyB0aGF0IHRoZSBsYWJlbCBhbmQgZmlyc3RcclxuICAgIC8vIGljb24gaGF2ZSBpZGVudGljYWwgaGVpZ2h0c1xyXG4gICAgY29uc3QgbGFiZWxGaXJzdEljb25Hcm91cCA9IG5ldyBBbGlnbkdyb3VwKCB7IG1hdGNoSG9yaXpvbnRhbDogZmFsc2UgfSApO1xyXG4gICAgbGFiZWxGaXJzdEljb25Hcm91cC5jcmVhdGVCb3goIG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGljb25zWyAwIF0gXSB9ICkgKTsgLy8gY3JlYXRlIHRoZSBib3ggdG8gcmVzdHJhaW4gYm91bmRzLCBidXQgYSByZWZlcmVuY2UgaXNuJ3QgbmVjZXNzYXJ5XHJcbiAgICBjb25zdCBsYWJlbEJveCA9IGxhYmVsRmlyc3RJY29uR3JvdXAuY3JlYXRlQm94KCBsYWJlbFRleHQgKTtcclxuXHJcbiAgICBjb25zdCBpY29uc1dpdGhPclRleHQgPSBbXTtcclxuXHJcbiAgICAvLyBmb3IgZWFjaCBvZiB0aGUgaWNvbnMgKGV4Y2x1ZGluZyB0aGUgbGFzdCBvbmUsIGFkZCBhIHZlcnRpY2FsbHkgYWxpZ25lZCAnb3InIHRleHQgdG8gdGhlIHJpZ2h0XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBpY29ucy5sZW5ndGggLSAxOyBpKysgKSB7XHJcbiAgICAgIGNvbnN0IG9yVGV4dCA9IG5ldyBUZXh0KCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5Ym9hcmRIZWxwRGlhbG9nLm9yU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBmb250OiBMQUJFTF9GT05ULFxyXG4gICAgICAgIG1heFdpZHRoOiBPUl9URVhUX01BWF9XSURUSFxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICAvLyBwbGFjZSBvclRleHQgd2l0aCB0aGUgaWNvbiBpbiBhbiBIQm94XHJcbiAgICAgIGNvbnN0IGhCb3ggPSBuZXcgSEJveCgge1xyXG4gICAgICAgIGNoaWxkcmVuOiBbIG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGljb25zWyBpIF0gXSB9ICksIG9yVGV4dCBdLFxyXG4gICAgICAgIHNwYWNpbmc6IEtleWJvYXJkSGVscEljb25GYWN0b3J5LkRFRkFVTFRfSUNPTl9TUEFDSU5HXHJcbiAgICAgIH0gKTtcclxuICAgICAgdG9EaXNwb3NlLnB1c2goIG9yVGV4dCwgaEJveCApO1xyXG5cclxuICAgICAgaWNvbnNXaXRoT3JUZXh0LnB1c2goIGhCb3ggKTtcclxuICAgIH1cclxuICAgIGljb25zV2l0aE9yVGV4dC5wdXNoKCBpY29uc1sgaWNvbnMubGVuZ3RoIC0gMSBdICk7XHJcblxyXG4gICAgLy8gcGxhY2UgaWNvbnMgaW4gYSBWQm94LCBwYXNzaW5nIHRocm91Z2ggb3B0aW9uYWwgc3BhY2luZyBhbmQgYTExeSByZXByZXNlbnRhdGlvblxyXG4gICAgY29uc3QgaWNvbnNWQm94ID0gbmV3IFZCb3goIGNvbWJpbmVPcHRpb25zPFZCb3hPcHRpb25zPigge1xyXG4gICAgICBjaGlsZHJlbjogaWNvbnNXaXRoT3JUZXh0XHJcbiAgICB9LCBvcHRpb25zLmljb25zVkJveE9wdGlvbnMgKSApO1xyXG5cclxuICAgIC8vIG1ha2UgdGhlIGxhYmVsIHRoZSBzYW1lIGhlaWdodCBhcyB0aGUgaWNvbiBsaXN0IGJ5IGFsaWduaW5nIHRoZW0gaW4gYSBib3ggdGhhdCBtYXRjaGVzIGhlaWdodFxyXG4gICAgY29uc3QgZ3JvdXBPcHRpb25zOiBBbGlnbkJveE9wdGlvbnMgPSB7IHlBbGlnbjogJ3RvcCcgfTtcclxuICAgIGNvbnN0IGxhYmVsSWNvbkxpc3RHcm91cCA9IG5ldyBBbGlnbkdyb3VwKCB7IG1hdGNoSG9yaXpvbnRhbDogZmFsc2UgfSApO1xyXG4gICAgY29uc3QgaWNvbnNCb3ggPSBsYWJlbEljb25MaXN0R3JvdXAuY3JlYXRlQm94KCBpY29uc1ZCb3gsIGdyb3VwT3B0aW9ucyApOyAvLyBjcmVhdGUgdGhlIGJveCB0byBtYXRjaCBoZWlnaHQsIGJ1dCByZWZlcmVuY2Ugbm90IG5lY2Vzc2FyeVxyXG4gICAgY29uc3QgbGFiZWxXaXRoSGVpZ2h0Qm94ID0gbGFiZWxJY29uTGlzdEdyb3VwLmNyZWF0ZUJveCggbGFiZWxCb3gsIGdyb3VwT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGtleWJvYXJkSGVscFNlY3Rpb25Sb3cgPSBuZXcgS2V5Ym9hcmRIZWxwU2VjdGlvblJvdyggbGFiZWxUZXh0LCBsYWJlbFdpdGhIZWlnaHRCb3gsIGljb25zQm94LCB7XHJcbiAgICAgIHJlYWRpbmdCbG9ja0NvbnRlbnQ6IG9wdGlvbnMucmVhZGluZ0Jsb2NrQ29udGVudCB8fCBvcHRpb25zLmxhYmVsSW5uZXJDb250ZW50XHJcbiAgICB9ICk7XHJcblxyXG4gICAga2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5kaXNwb3NlRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICBsYWJlbEZpcnN0SWNvbkdyb3VwLmRpc3Bvc2UoKTtcclxuICAgICAgbGFiZWxUZXh0LmRpc3Bvc2UoKTtcclxuICAgICAgbGFiZWxJY29uTGlzdEdyb3VwLmRpc3Bvc2UoKTtcclxuICAgICAgdG9EaXNwb3NlLmZvckVhY2goIGRpc3Bvc2FibGUgPT4gZGlzcG9zYWJsZS5kaXNwb3NlKCkgKTtcclxuICAgIH0gKTtcclxuICAgIHJldHVybiBrZXlib2FyZEhlbHBTZWN0aW9uUm93O1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdLZXlib2FyZEhlbHBTZWN0aW9uUm93JywgS2V5Ym9hcmRIZWxwU2VjdGlvblJvdyApO1xyXG5leHBvcnQgZGVmYXVsdCBLZXlib2FyZEhlbHBTZWN0aW9uUm93O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxJQUFJQyxjQUFjLFFBQVEsdUNBQXVDO0FBRWpGLFNBQTBCQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFpQkMsUUFBUSxFQUFtQkMsSUFBSSxFQUFFQyxJQUFJLFFBQXFCLG1DQUFtQztBQUM5SixPQUFPQyxVQUFVLE1BQU0sbUNBQW1DO0FBRTFELE9BQU9DLFFBQVEsTUFBTSxtQkFBbUI7QUFDeEMsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsYUFB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