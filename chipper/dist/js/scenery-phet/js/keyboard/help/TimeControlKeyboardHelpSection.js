// Copyright 2022-2023, University of Colorado Boulder

/**
 * Help section that explains how to use a keyboard to toggle play/pause and timing controls.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import sceneryPhet from '../../sceneryPhet.js';
import KeyboardHelpSection from './KeyboardHelpSection.js';
import KeyboardHelpSectionRow from './KeyboardHelpSectionRow.js';
import SceneryPhetStrings from '../../SceneryPhetStrings.js';

// constants
const timingControlsStringProperty = SceneryPhetStrings.keyboardHelpDialog.timingControls.timingControlsStringProperty;
const pauseOrPlayActionStringProperty = SceneryPhetStrings.keyboardHelpDialog.timingControls.pauseOrPlayActionStringProperty;
const pauseOrPlayActionDescriptionStringProperty = SceneryPhetStrings.a11y.keyboardHelpDialog.timingControls.pauseOrPlayActionDescriptionStringProperty;
class TimeControlKeyboardHelpSection extends KeyboardHelpSection {
  constructor(providedOptions) {
    const options = optionize()({
      headingString: timingControlsStringProperty,
      pauseOrPlayActionString: pauseOrPlayActionStringProperty,
      pauseOrPlayActionDescriptionString: pauseOrPlayActionDescriptionStringProperty
    }, providedOptions);
    const playPauseRow = KeyboardHelpSectionRow.createPlayPauseKeyRow(options.pauseOrPlayActionString, {
      labelInnerContent: options.pauseOrPlayActionDescriptionString
    });
    super(options.headingString, [playPauseRow], options);
    this.disposeEmitter.addListener(() => playPauseRow.dispose());
  }
}
sceneryPhet.register('TimeControlKeyboardHelpSection', TimeControlKeyboardHelpSection);
export default TimeControlKeyboardHelpSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIktleWJvYXJkSGVscFNlY3Rpb24iLCJLZXlib2FyZEhlbHBTZWN0aW9uUm93IiwiU2NlbmVyeVBoZXRTdHJpbmdzIiwidGltaW5nQ29udHJvbHNTdHJpbmdQcm9wZXJ0eSIsImtleWJvYXJkSGVscERpYWxvZyIsInRpbWluZ0NvbnRyb2xzIiwicGF1c2VPclBsYXlBY3Rpb25TdHJpbmdQcm9wZXJ0eSIsInBhdXNlT3JQbGF5QWN0aW9uRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSIsImExMXkiLCJUaW1lQ29udHJvbEtleWJvYXJkSGVscFNlY3Rpb24iLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJoZWFkaW5nU3RyaW5nIiwicGF1c2VPclBsYXlBY3Rpb25TdHJpbmciLCJwYXVzZU9yUGxheUFjdGlvbkRlc2NyaXB0aW9uU3RyaW5nIiwicGxheVBhdXNlUm93IiwiY3JlYXRlUGxheVBhdXNlS2V5Um93IiwibGFiZWxJbm5lckNvbnRlbnQiLCJkaXNwb3NlRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGltZUNvbnRyb2xLZXlib2FyZEhlbHBTZWN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEhlbHAgc2VjdGlvbiB0aGF0IGV4cGxhaW5zIGhvdyB0byB1c2UgYSBrZXlib2FyZCB0byB0b2dnbGUgcGxheS9wYXVzZSBhbmQgdGltaW5nIGNvbnRyb2xzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi8uLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCBLZXlib2FyZEhlbHBTZWN0aW9uLCB7IEtleWJvYXJkSGVscFNlY3Rpb25PcHRpb25zIH0gZnJvbSAnLi9LZXlib2FyZEhlbHBTZWN0aW9uLmpzJztcclxuaW1wb3J0IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cgZnJvbSAnLi9LZXlib2FyZEhlbHBTZWN0aW9uUm93LmpzJztcclxuaW1wb3J0IFNjZW5lcnlQaGV0U3RyaW5ncyBmcm9tICcuLi8uLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IHRpbWluZ0NvbnRyb2xzU3RyaW5nUHJvcGVydHkgPSBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5Ym9hcmRIZWxwRGlhbG9nLnRpbWluZ0NvbnRyb2xzLnRpbWluZ0NvbnRyb2xzU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHBhdXNlT3JQbGF5QWN0aW9uU3RyaW5nUHJvcGVydHkgPSBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5Ym9hcmRIZWxwRGlhbG9nLnRpbWluZ0NvbnRyb2xzLnBhdXNlT3JQbGF5QWN0aW9uU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHBhdXNlT3JQbGF5QWN0aW9uRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSA9IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5LmtleWJvYXJkSGVscERpYWxvZy50aW1pbmdDb250cm9scy5wYXVzZU9yUGxheUFjdGlvbkRlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHk7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG5cclxuICAvLyBUaGUgaGVhZGluZyBzdHJpbmcgZm9yIHRoaXMgc2VjdGlvbiBvZiBrZXlib2FyZCBoZWxwIGNvbnRlbnRcclxuICBoZWFkaW5nU3RyaW5nPzogc3RyaW5nIHwgVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPjtcclxuXHJcbiAgLy8gVmlzaWJsZSBzdHJpbmcgdGhhdCBkZXNjcmliZXMgdGhlIGFjdGlvbiBvZiBwYXVzZS9wbGF5IGZyb20gYSBrZXkgY29tbWFuZC4gWW91IG1heSB3YW50IHNpbS1zcGVjaWZpYyB0ZXJtaW5vbG9neVxyXG4gIC8vIGZvciB0aGlzIGNvbW1hbmQuXHJcbiAgcGF1c2VPclBsYXlBY3Rpb25TdHJpbmc/OiBzdHJpbmcgfCBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+O1xyXG5cclxuICAvLyBTdHJpbmcgZm9yIHRoZSBQRE9NIChzY3JlZW4gcmVhZGVycykgdGhhdCBkZXNjcmliZXMgdGhlIGhvdGtleXMgZm9yIHBsYXkvcGF1c2UuXHJcbiAgcGF1c2VPclBsYXlBY3Rpb25EZXNjcmlwdGlvblN0cmluZz86IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XHJcbn07XHJcbnR5cGUgUGFyZW50T3B0aW9ucyA9IEtleWJvYXJkSGVscFNlY3Rpb25PcHRpb25zO1xyXG5leHBvcnQgdHlwZSBUaW1lQ29udHJvbEtleWJvYXJkSGVscFNlY3Rpb25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQYXJlbnRPcHRpb25zO1xyXG5cclxuY2xhc3MgVGltZUNvbnRyb2xLZXlib2FyZEhlbHBTZWN0aW9uIGV4dGVuZHMgS2V5Ym9hcmRIZWxwU2VjdGlvbiB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBUaW1lQ29udHJvbEtleWJvYXJkSGVscFNlY3Rpb25PcHRpb25zICkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxUaW1lQ29udHJvbEtleWJvYXJkSGVscFNlY3Rpb25PcHRpb25zLCBTZWxmT3B0aW9ucywgUGFyZW50T3B0aW9ucz4oKSgge1xyXG4gICAgICBoZWFkaW5nU3RyaW5nOiB0aW1pbmdDb250cm9sc1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBwYXVzZU9yUGxheUFjdGlvblN0cmluZzogcGF1c2VPclBsYXlBY3Rpb25TdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgcGF1c2VPclBsYXlBY3Rpb25EZXNjcmlwdGlvblN0cmluZzogcGF1c2VPclBsYXlBY3Rpb25EZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBwbGF5UGF1c2VSb3cgPSBLZXlib2FyZEhlbHBTZWN0aW9uUm93LmNyZWF0ZVBsYXlQYXVzZUtleVJvdyggb3B0aW9ucy5wYXVzZU9yUGxheUFjdGlvblN0cmluZywge1xyXG4gICAgICBsYWJlbElubmVyQ29udGVudDogb3B0aW9ucy5wYXVzZU9yUGxheUFjdGlvbkRlc2NyaXB0aW9uU3RyaW5nXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMuaGVhZGluZ1N0cmluZywgWyBwbGF5UGF1c2VSb3cgXSwgb3B0aW9ucyApO1xyXG4gICAgdGhpcy5kaXNwb3NlRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4gcGxheVBhdXNlUm93LmRpc3Bvc2UoKSApO1xyXG5cclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnVGltZUNvbnRyb2xLZXlib2FyZEhlbHBTZWN0aW9uJywgVGltZUNvbnRyb2xLZXlib2FyZEhlbHBTZWN0aW9uICk7XHJcbmV4cG9ydCBkZWZhdWx0IFRpbWVDb250cm9sS2V5Ym9hcmRIZWxwU2VjdGlvbjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxtQkFBbUIsTUFBc0MsMEJBQTBCO0FBQzFGLE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUNoRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7O0FBRTVEO0FBQ0EsTUFBTUMsNEJBQTRCLEdBQUdELGtCQUFrQixDQUFDRSxrQkFBa0IsQ0FBQ0MsY0FBYyxDQUFDRiw0QkFBNEI7QUFDdEgsTUFBTUcsK0JBQStCLEdBQUdKLGtCQUFrQixDQUFDRSxrQkFBa0IsQ0FBQ0MsY0FBYyxDQUFDQywrQkFBK0I7QUFDNUgsTUFBTUMsMENBQTBDLEdBQUdMLGtCQUFrQixDQUFDTSxJQUFJLENBQUNKLGtCQUFrQixDQUFDQyxjQUFjLENBQUNFLDBDQUEwQztBQWlCdkosTUFBTUUsOEJBQThCLFNBQVNULG1CQUFtQixDQUFDO0VBQ3hEVSxXQUFXQSxDQUFFQyxlQUF1RCxFQUFHO0lBQzVFLE1BQU1DLE9BQU8sR0FBR2QsU0FBUyxDQUFvRSxDQUFDLENBQUU7TUFDOUZlLGFBQWEsRUFBRVYsNEJBQTRCO01BQzNDVyx1QkFBdUIsRUFBRVIsK0JBQStCO01BQ3hEUyxrQ0FBa0MsRUFBRVI7SUFDdEMsQ0FBQyxFQUFFSSxlQUFnQixDQUFDO0lBRXBCLE1BQU1LLFlBQVksR0FBR2Ysc0JBQXNCLENBQUNnQixxQkFBcUIsQ0FBRUwsT0FBTyxDQUFDRSx1QkFBdUIsRUFBRTtNQUNsR0ksaUJBQWlCLEVBQUVOLE9BQU8sQ0FBQ0c7SUFDN0IsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFSCxPQUFPLENBQUNDLGFBQWEsRUFBRSxDQUFFRyxZQUFZLENBQUUsRUFBRUosT0FBUSxDQUFDO0lBQ3pELElBQUksQ0FBQ08sY0FBYyxDQUFDQyxXQUFXLENBQUUsTUFBTUosWUFBWSxDQUFDSyxPQUFPLENBQUMsQ0FBRSxDQUFDO0VBRWpFO0FBQ0Y7QUFFQXRCLFdBQVcsQ0FBQ3VCLFFBQVEsQ0FBRSxnQ0FBZ0MsRUFBRWIsOEJBQStCLENBQUM7QUFDeEYsZUFBZUEsOEJBQThCIn0=