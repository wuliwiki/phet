// Copyright 2017-2022, University of Colorado Boulder

/**
 * Node that looks like an arrow key on the keyboard.  Default is a rounded triangle centered in a square key.
 *
 * @author Jesse Greenberg
 */

import { Shape } from '../../../kite/js/imports.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import sceneryPhet from '../sceneryPhet.js';
import KeyNode from './KeyNode.js';

// constants
const DEFAULT_ARROW_HEIGHT = 10;
const DEFAULT_ARROW_WIDTH = 0.6 * Math.sqrt(3) * DEFAULT_ARROW_HEIGHT; // for an isosceles triangle

// possible directions for the arrows in the key
const DIRECTION_ANGLES = {
  up: 0,
  down: Math.PI,
  left: -Math.PI / 2,
  right: Math.PI / 2
};
export default class ArrowKeyNode extends KeyNode {
  constructor(direction, providedOptions) {
    assert && assert(DIRECTION_ANGLES[direction] !== undefined, 'Arrow direction must be one of DIRECTION_ANGLES');
    const options = optionize()({
      // SelfOptions
      arrowFill: 'black',
      arrowStroke: 'black',
      arrowLineJoin: 'round',
      arrowLineWidth: 3,
      arrowHeight: DEFAULT_ARROW_HEIGHT,
      arrowWidth: DEFAULT_ARROW_WIDTH,
      // KeyNodeOptions
      yPadding: 13,
      // this way the arrows will be scaled down and given proper margin in the key
      forceSquareKey: true // arrow keys are typically square
    }, providedOptions);
    const arrowHeight = options.arrowHeight;
    const arrowWidth = options.arrowWidth;
    const arrowLineJoin = options.arrowLineJoin;
    const arrowLineWidth = options.arrowLineWidth;
    const arrowFill = options.arrowFill;
    const arrowStroke = options.arrowStroke;

    // draw the arrow shape - default shape pointing up
    const arrowShape = new Shape();
    arrowShape.moveTo(arrowHeight / 2, 0).lineTo(arrowHeight, arrowWidth + 0).lineTo(0, arrowWidth + 0).close();
    const arrowPath = new Path(arrowShape, {
      fill: arrowFill,
      stroke: arrowStroke,
      lineJoin: arrowLineJoin,
      lineWidth: arrowLineWidth,
      rotation: DIRECTION_ANGLES[direction]
    });

    // place the arrow in the key
    super(arrowPath, options);
  }
}
sceneryPhet.register('ArrowKeyNode', ArrowKeyNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIlBhdGgiLCJzY2VuZXJ5UGhldCIsIktleU5vZGUiLCJERUZBVUxUX0FSUk9XX0hFSUdIVCIsIkRFRkFVTFRfQVJST1dfV0lEVEgiLCJNYXRoIiwic3FydCIsIkRJUkVDVElPTl9BTkdMRVMiLCJ1cCIsImRvd24iLCJQSSIsImxlZnQiLCJyaWdodCIsIkFycm93S2V5Tm9kZSIsImNvbnN0cnVjdG9yIiwiZGlyZWN0aW9uIiwicHJvdmlkZWRPcHRpb25zIiwiYXNzZXJ0IiwidW5kZWZpbmVkIiwib3B0aW9ucyIsImFycm93RmlsbCIsImFycm93U3Ryb2tlIiwiYXJyb3dMaW5lSm9pbiIsImFycm93TGluZVdpZHRoIiwiYXJyb3dIZWlnaHQiLCJhcnJvd1dpZHRoIiwieVBhZGRpbmciLCJmb3JjZVNxdWFyZUtleSIsImFycm93U2hhcGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZSIsImFycm93UGF0aCIsImZpbGwiLCJzdHJva2UiLCJsaW5lSm9pbiIsImxpbmVXaWR0aCIsInJvdGF0aW9uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBcnJvd0tleU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTm9kZSB0aGF0IGxvb2tzIGxpa2UgYW4gYXJyb3cga2V5IG9uIHRoZSBrZXlib2FyZC4gIERlZmF1bHQgaXMgYSByb3VuZGVkIHRyaWFuZ2xlIGNlbnRlcmVkIGluIGEgc3F1YXJlIGtleS5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgeyBMaW5lSm9pbiwgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBUQ29sb3IsIFBhdGggfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgS2V5Tm9kZSwgeyBLZXlOb2RlT3B0aW9ucyB9IGZyb20gJy4vS2V5Tm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgREVGQVVMVF9BUlJPV19IRUlHSFQgPSAxMDtcclxuY29uc3QgREVGQVVMVF9BUlJPV19XSURUSCA9IDAuNiAqIE1hdGguc3FydCggMyApICogREVGQVVMVF9BUlJPV19IRUlHSFQ7IC8vIGZvciBhbiBpc29zY2VsZXMgdHJpYW5nbGVcclxuXHJcbnR5cGUgRGlyZWN0aW9uID0gJ3VwJyB8ICdkb3duJyB8ICdsZWZ0JyB8ICdyaWdodCc7XHJcblxyXG4vLyBwb3NzaWJsZSBkaXJlY3Rpb25zIGZvciB0aGUgYXJyb3dzIGluIHRoZSBrZXlcclxuY29uc3QgRElSRUNUSU9OX0FOR0xFUyA9IHtcclxuICB1cDogMCxcclxuICBkb3duOiBNYXRoLlBJLFxyXG4gIGxlZnQ6IC1NYXRoLlBJIC8gMixcclxuICByaWdodDogTWF0aC5QSSAvIDJcclxufTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgYXJyb3dGaWxsPzogVENvbG9yO1xyXG4gIGFycm93U3Ryb2tlPzogVENvbG9yO1xyXG4gIGFycm93TGluZUpvaW4/OiBMaW5lSm9pbjtcclxuICBhcnJvd0xpbmVXaWR0aD86IG51bWJlcjtcclxuICBhcnJvd0hlaWdodD86IG51bWJlcjtcclxuICBhcnJvd1dpZHRoPzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQXJyb3dLZXlOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgS2V5Tm9kZU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcnJvd0tleU5vZGUgZXh0ZW5kcyBLZXlOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBkaXJlY3Rpb246IERpcmVjdGlvbiwgcHJvdmlkZWRPcHRpb25zPzogQXJyb3dLZXlOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBESVJFQ1RJT05fQU5HTEVTWyBkaXJlY3Rpb24gXSAhPT0gdW5kZWZpbmVkLCAnQXJyb3cgZGlyZWN0aW9uIG11c3QgYmUgb25lIG9mIERJUkVDVElPTl9BTkdMRVMnICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxBcnJvd0tleU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgS2V5Tm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGFycm93RmlsbDogJ2JsYWNrJyxcclxuICAgICAgYXJyb3dTdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGFycm93TGluZUpvaW46ICdyb3VuZCcsXHJcbiAgICAgIGFycm93TGluZVdpZHRoOiAzLFxyXG4gICAgICBhcnJvd0hlaWdodDogREVGQVVMVF9BUlJPV19IRUlHSFQsXHJcbiAgICAgIGFycm93V2lkdGg6IERFRkFVTFRfQVJST1dfV0lEVEgsXHJcblxyXG4gICAgICAvLyBLZXlOb2RlT3B0aW9uc1xyXG4gICAgICB5UGFkZGluZzogMTMsIC8vIHRoaXMgd2F5IHRoZSBhcnJvd3Mgd2lsbCBiZSBzY2FsZWQgZG93biBhbmQgZ2l2ZW4gcHJvcGVyIG1hcmdpbiBpbiB0aGUga2V5XHJcbiAgICAgIGZvcmNlU3F1YXJlS2V5OiB0cnVlIC8vIGFycm93IGtleXMgYXJlIHR5cGljYWxseSBzcXVhcmVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGFycm93SGVpZ2h0ID0gb3B0aW9ucy5hcnJvd0hlaWdodDtcclxuICAgIGNvbnN0IGFycm93V2lkdGggPSBvcHRpb25zLmFycm93V2lkdGg7XHJcbiAgICBjb25zdCBhcnJvd0xpbmVKb2luID0gb3B0aW9ucy5hcnJvd0xpbmVKb2luO1xyXG4gICAgY29uc3QgYXJyb3dMaW5lV2lkdGggPSBvcHRpb25zLmFycm93TGluZVdpZHRoO1xyXG4gICAgY29uc3QgYXJyb3dGaWxsID0gb3B0aW9ucy5hcnJvd0ZpbGw7XHJcbiAgICBjb25zdCBhcnJvd1N0cm9rZSA9IG9wdGlvbnMuYXJyb3dTdHJva2U7XHJcblxyXG4gICAgLy8gZHJhdyB0aGUgYXJyb3cgc2hhcGUgLSBkZWZhdWx0IHNoYXBlIHBvaW50aW5nIHVwXHJcbiAgICBjb25zdCBhcnJvd1NoYXBlID0gbmV3IFNoYXBlKCk7XHJcbiAgICBhcnJvd1NoYXBlLm1vdmVUbyggYXJyb3dIZWlnaHQgLyAyLCAwICkubGluZVRvKCBhcnJvd0hlaWdodCwgYXJyb3dXaWR0aCArIDAgKS5saW5lVG8oIDAsIGFycm93V2lkdGggKyAwICkuY2xvc2UoKTtcclxuXHJcbiAgICBjb25zdCBhcnJvd1BhdGggPSBuZXcgUGF0aCggYXJyb3dTaGFwZSwge1xyXG4gICAgICBmaWxsOiBhcnJvd0ZpbGwsXHJcbiAgICAgIHN0cm9rZTogYXJyb3dTdHJva2UsXHJcbiAgICAgIGxpbmVKb2luOiBhcnJvd0xpbmVKb2luLFxyXG4gICAgICBsaW5lV2lkdGg6IGFycm93TGluZVdpZHRoLFxyXG4gICAgICByb3RhdGlvbjogRElSRUNUSU9OX0FOR0xFU1sgZGlyZWN0aW9uIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBwbGFjZSB0aGUgYXJyb3cgaW4gdGhlIGtleVxyXG4gICAgc3VwZXIoIGFycm93UGF0aCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdBcnJvd0tleU5vZGUnLCBBcnJvd0tleU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBbUJBLEtBQUssUUFBUSw2QkFBNkI7QUFDN0QsT0FBT0MsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxTQUFpQkMs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