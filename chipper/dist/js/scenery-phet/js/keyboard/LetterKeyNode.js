// Copyright 2017-2023, University of Colorado Boulder

/**
 * LetterKeyNode is a TextKeyNode with layout and spacing defaults that look best for a single letter. A letter key is
 * square and that looks best for a single character.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import sceneryPhet from '../sceneryPhet.js';
import TextKeyNode from './TextKeyNode.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
export default class LetterKeyNode extends TextKeyNode {
  constructor(letter, providedOptions) {
    const options = optionize()({
      xPadding: 5,
      forceSquareKey: true
    }, providedOptions);
    super(letter, options);
  }

  //-------------------------------------------------------------------------------------------------
  // Static factory methods for specific letter key strings.
  //-------------------------------------------------------------------------------------------------

  static a(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.aStringProperty, providedOptions);
  }
  static c(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.cStringProperty, providedOptions);
  }
  static d(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.dStringProperty, providedOptions);
  }
  static r(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.rStringProperty, providedOptions);
  }
  static s(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.sStringProperty, providedOptions);
  }
  static w(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.wStringProperty, providedOptions);
  }
  static one(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.oneStringProperty, providedOptions);
  }
  static two(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.twoStringProperty, providedOptions);
  }
  static three(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.threeStringProperty, providedOptions);
  }
}
sceneryPhet.register('LetterKeyNode', LetterKeyNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIlRleHRLZXlOb2RlIiwiU2NlbmVyeVBoZXRTdHJpbmdzIiwiTGV0dGVyS2V5Tm9kZSIsImNvbnN0cnVjdG9yIiwibGV0dGVyIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInhQYWRkaW5nIiwiZm9yY2VTcXVhcmVLZXkiLCJhIiwia2V5IiwiYVN0cmluZ1Byb3BlcnR5IiwiYyIsImNTdHJpbmdQcm9wZXJ0eSIsImQiLCJkU3RyaW5nUHJvcGVydHkiLCJyIiwiclN0cmluZ1Byb3BlcnR5IiwicyIsInNTdHJpbmdQcm9wZXJ0eSIsInciLCJ3U3RyaW5nUHJvcGVydHkiLCJvbmUiLCJvbmVTdHJpbmdQcm9wZXJ0eSIsInR3byIsInR3b1N0cmluZ1Byb3BlcnR5IiwidGhyZWUiLCJ0aHJlZVN0cmluZ1Byb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMZXR0ZXJLZXlOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExldHRlcktleU5vZGUgaXMgYSBUZXh0S2V5Tm9kZSB3aXRoIGxheW91dCBhbmQgc3BhY2luZyBkZWZhdWx0cyB0aGF0IGxvb2sgYmVzdCBmb3IgYSBzaW5nbGUgbGV0dGVyLiBBIGxldHRlciBrZXkgaXNcclxuICogc3F1YXJlIGFuZCB0aGF0IGxvb2tzIGJlc3QgZm9yIGEgc2luZ2xlIGNoYXJhY3Rlci5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IFRleHRLZXlOb2RlLCB7IFRleHRLZXlOb2RlT3B0aW9ucyB9IGZyb20gJy4vVGV4dEtleU5vZGUuanMnO1xyXG5pbXBvcnQgS2V5Tm9kZSBmcm9tICcuL0tleU5vZGUuanMnO1xyXG5pbXBvcnQgU2NlbmVyeVBoZXRTdHJpbmdzIGZyb20gJy4uL1NjZW5lcnlQaGV0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IHR5cGUgTGV0dGVyS2V5Tm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8VGV4dEtleU5vZGVPcHRpb25zLCAnZm9yY2VTcXVhcmVLZXknPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExldHRlcktleU5vZGUgZXh0ZW5kcyBUZXh0S2V5Tm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbGV0dGVyOiBzdHJpbmcgfCBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCBwcm92aWRlZE9wdGlvbnM/OiBMZXR0ZXJLZXlOb2RlT3B0aW9ucyApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TGV0dGVyS2V5Tm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBUZXh0S2V5Tm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgeFBhZGRpbmc6IDUsXHJcbiAgICAgIGZvcmNlU3F1YXJlS2V5OiB0cnVlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggbGV0dGVyLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyBTdGF0aWMgZmFjdG9yeSBtZXRob2RzIGZvciBzcGVjaWZpYyBsZXR0ZXIga2V5IHN0cmluZ3MuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYSggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkuYVN0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYyggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkuY1N0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgZCggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkuZFN0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgciggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkuclN0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcyggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkuc1N0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgdyggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkud1N0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgb25lKCBwcm92aWRlZE9wdGlvbnM/OiBMZXR0ZXJLZXlOb2RlT3B0aW9ucyApOiBLZXlOb2RlIHtcclxuICAgIHJldHVybiBuZXcgTGV0dGVyS2V5Tm9kZSggU2NlbmVyeVBoZXRTdHJpbmdzLmtleS5vbmVTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHR3byggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkudHdvU3RyaW5nUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyB0aHJlZSggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkudGhyZWVTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ0xldHRlcktleU5vZGUnLCBMZXR0ZXJLZXlOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0QixvQ0FBb0M7QUFFaEYsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQUMzQyxPQUFPQyxXQUFXLE1BQThCLGtCQUFrQjtBQUVsRSxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFPekQsZUFBZSxNQUFNQyxhQUFhLFNBQVNGLFdBQVcsQ0FBQztFQUU5Q0csV0FBV0EsQ0FBRUMsTUFBMEMsRUFBRUMsZUFBc0MsRUFBRztJQUN2RyxNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBd0QsQ0FBQyxDQUFFO01BQ2xGUyxRQUFRLEVBQUUsQ0FBQztNQUNYQyxjQUFjLEVBQUU7SUFDbEIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsTUFBTSxFQUFFRSxPQUFRLENBQUM7RUFDMUI7O0VBRUE7RUFDQTtFQUNBOztFQUVBLE9BQWNHLENBQUNBLENBQUVKLGVBQXNDLEVBQVk7SUFDakUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNDLGVBQWUsRUFBRU4sZUFBZ0IsQ0FBQztFQUNyRjtFQUVBLE9BQWNPLENBQUNBLENBQUVQLGVBQXNDLEVBQVk7SUFDakUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNHLGVBQWUsRUFBRVIsZUFBZ0IsQ0FBQztFQUNyRjtFQUVBLE9BQWNTLENBQUNBLENBQUVULGVBQXNDLEVBQVk7SUFDakUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNLLGVBQWUsRUFBRVYsZUFBZ0IsQ0FBQztFQUNyRjtFQUVBLE9BQWNXLENBQUNBLENBQUVYLGVBQXNDLEVBQVk7SUFDakUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNPLGVBQWUsRUFBRVosZUFBZ0IsQ0FBQztFQUNyRjtFQUVBLE9BQWNhLENBQUNBLENBQUViLGVBQXNDLEVBQVk7SUFDakUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNTLGVBQWUsRUFBRWQsZUFBZ0IsQ0FBQztFQUNyRjtFQUVBLE9BQWNlLENBQUNBLENBQUVmLGVBQXNDLEVBQVk7SUFDakUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNXLGVBQWUsRUFBRWhCLGVBQWdCLENBQUM7RUFDckY7RUFFQSxPQUFjaUIsR0FBR0EsQ0FBRWpCLGVBQXNDLEVBQVk7SUFDbkUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNhLGlCQUFpQixFQUFFbEIsZUFBZ0IsQ0FBQztFQUN2RjtFQUVBLE9BQWNtQixHQUFHQSxDQUFFbkIsZUFBc0MsRUFBWTtJQUNuRSxPQUFPLElBQUlILGFBQWEsQ0FBRUQsa0JBQWtCLENBQUNTLEdBQUcsQ0FBQ2UsaUJBQWlCLEVBQUVwQixlQUFnQixDQUFDO0VBQ3ZGO0VBRUEsT0FBY3FCLEtBQUtBLENBQUVyQixlQUFzQyxFQUFZO0lBQ3JFLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDaUIsbUJBQW1CLEVBQUV0QixlQUFnQixDQUFDO0VBQ3pGO0FBQ0Y7QUFFQU4sV0FBVyxDQUFDNkIsUUFBUSxDQUFFLGVBQWUsRUFBRTFCLGFBQWMsQ0FBQyJ9