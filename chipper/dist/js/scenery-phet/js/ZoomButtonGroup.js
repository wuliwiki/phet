// Copyright 2020-2023, University of Colorado Boulder

/**
 * ZoomButtonGroup is the base class for a pair of buttons used to zoom 'in' and 'out'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../phet-core/js/merge.js';
import { FlowBox } from '../../scenery/js/imports.js';
import RectangularPushButton from '../../sun/js/buttons/RectangularPushButton.js';
import Tandem from '../../tandem/js/Tandem.js';
import optionize from '../../phet-core/js/optionize.js';
import sceneryPhet from './sceneryPhet.js';
import SceneryPhetStrings from './SceneryPhetStrings.js';
export default class ZoomButtonGroup extends FlowBox {
  /**
   * @param zoomLevelProperty - smaller value means more zoomed out
   * @param zoomInIcon
   * @param zoomOutIcon
   * @param providedOptions?
   */
  constructor(zoomLevelProperty, zoomInIcon, zoomOutIcon, providedOptions) {
    const zoomLevelRange = zoomLevelProperty.range;
    const options = optionize()({
      // ZoomButtonGroupOptions
      applyZoomIn: currentZoom => currentZoom + 1,
      applyZoomOut: currentZoom => currentZoom - 1,
      touchAreaXDilation: 0,
      touchAreaYDilation: 0,
      mouseAreaXDilation: 0,
      mouseAreaYDilation: 0,
      buttonOptions: {
        fireOnHold: true,
        fireOnHoldDelay: 600,
        // ms
        fireOnHoldInterval: 250,
        // ms
        phetioVisiblePropertyInstrumented: false,
        phetioEnabledPropertyInstrumented: false
      },
      // FlowBoxOptions
      spacing: 0,
      orientation: 'horizontal',
      align: 'center',
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'ZoomButtonGroup'
    }, providedOptions);

    // For pointer areas. Dependent on options.spacing, pointer areas will be shifted to prevent overlap.
    const halfSpacing = options.spacing / 2;
    const mouseXShift = Math.max(0, options.orientation === 'horizontal' ? options.mouseAreaXDilation - halfSpacing : 0);
    const touchXShift = Math.max(0, options.orientation === 'horizontal' ? options.touchAreaXDilation - halfSpacing : 0);
    const mouseYShift = Math.max(0, options.orientation === 'vertical' ? options.mouseAreaYDilation - halfSpacing : 0);
    const touchYShift = Math.max(0, options.orientation === 'vertical' ? options.touchAreaYDilation - halfSpacing : 0);

    // zoom in
    const zoomInButton = new RectangularPushButton(merge({
      content: zoomInIcon,
      listener: () => {
        zoomLevelProperty.value = options.applyZoomIn(zoomLevelProperty.value);
      },
      touchAreaXDilation: options.touchAreaXDilation,
      touchAreaYDilation: options.touchAreaYDilation,
      mouseAreaXDilation: options.mouseAreaXDilation,
      mouseAreaYDilation: options.mouseAreaYDilation,
      touchAreaXShift: touchXShift,
      touchAreaYShift: -touchYShift,
      mouseAreaXShift: mouseXShift,
      mouseAreaYShift: -mouseYShift,
      accessibleName: SceneryPhetStrings.a11y.zoomInStringProperty,
      tandem: options.tandem.createTandem('zoomInButton')
    }, options.buttonOptions));

    // zoom out
    const zoomOutButton = new RectangularPushButton(merge({
      content: zoomOutIcon,
      listener: () => {
        zoomLevelProperty.value = options.applyZoomOut(zoomLevelProperty.value);
      },
      touchAreaXDilation: options.touchAreaXDilation,
      touchAreaYDilation: options.touchAreaYDilation,
      mouseAreaXDilation: options.mouseAreaXDilation,
      mouseAreaYDilation: options.mouseAreaYDilation,
      touchAreaXShift: -touchXShift,
      touchAreaYShift: touchYShift,
      mouseAreaXShift: -mouseXShift,
      mouseAreaYShift: mouseYShift,
      accessibleName: SceneryPhetStrings.a11y.zoomOutStringProperty,
      tandem: options.tandem.createTandem('zoomOutButton')
    }, options.buttonOptions));
    options.children = options.orientation === 'horizontal' ? [zoomOutButton, zoomInButton] : [zoomInButton, zoomOutButton];
    super(options);

    // disable a button if we reach the min or max
    const zoomLevelListener = zoomLevel => {
      zoomOutButton.enabled = zoomLevelRange.contains(options.applyZoomOut(zoomLevel));
      zoomInButton.enabled = zoomLevelRange.contains(options.applyZoomIn(zoomLevel));
    };
    zoomLevelProperty.link(zoomLevelListener);
    this.addLinkedElement(zoomLevelProperty, {
      tandem: options.tandem.createTandem('zoomProperty')
    });
    this.disposeZoomButtonGroup = () => {
      zoomInButton.dispose();
      zoomOutButton.dispose();
      zoomLevelProperty.unlink(zoomLevelListener);
    };
  }
  dispose() {
    this.disposeZoomButtonGroup();
    super.dispose();
  }
}
sceneryPhet.register('ZoomButtonGroup', ZoomButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkZsb3dCb3giLCJSZWN0YW5ndWxhclB1c2hCdXR0b24iLCJUYW5kZW0iLCJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIlNjZW5lcnlQaGV0U3RyaW5ncyIsIlpvb21CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwiem9vbUxldmVsUHJvcGVydHkiLCJ6b29tSW5JY29uIiwiem9vbU91dEljb24iLCJwcm92aWRlZE9wdGlvbnMiLCJ6b29tTGV2ZWxSYW5nZSIsInJhbmdlIiwib3B0aW9ucyIsImFwcGx5Wm9vbUluIiwiY3VycmVudFpvb20iLCJhcHBseVpvb21PdXQiLCJ0b3VjaEFyZWFYRGlsYXRpb24iLCJ0b3VjaEFyZWFZRGlsYXRpb24iLCJtb3VzZUFyZWFYRGlsYXRpb24iLCJtb3VzZUFyZWFZRGlsYXRpb24iLCJidXR0b25PcHRpb25zIiwiZmlyZU9uSG9sZCIsImZpcmVPbkhvbGREZWxheSIsImZpcmVPbkhvbGRJbnRlcnZhbCIsInBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZCIsInBoZXRpb0VuYWJsZWRQcm9wZXJ0eUluc3RydW1lbnRlZCIsInNwYWNpbmciLCJvcmllbnRhdGlvbiIsImFsaWduIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwiaGFsZlNwYWNpbmciLCJtb3VzZVhTaGlmdCIsIk1hdGgiLCJtYXgiLCJ0b3VjaFhTaGlmdCIsIm1vdXNlWVNoaWZ0IiwidG91Y2hZU2hpZnQiLCJ6b29tSW5CdXR0b24iLCJjb250ZW50IiwibGlzdGVuZXIiLCJ2YWx1ZSIsInRvdWNoQXJlYVhTaGlmdCIsInRvdWNoQXJlYVlTaGlmdCIsIm1vdXNlQXJlYVhTaGlmdCIsIm1vdXNlQXJlYVlTaGlmdCIsImFjY2Vzc2libGVOYW1lIiwiYTExeSIsInpvb21JblN0cmluZ1Byb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwiem9vbU91dEJ1dHRvbiIsInpvb21PdXRTdHJpbmdQcm9wZXJ0eSIsImNoaWxkcmVuIiwiem9vbUxldmVsTGlzdGVuZXIiLCJ6b29tTGV2ZWwiLCJlbmFibGVkIiwiY29udGFpbnMiLCJsaW5rIiwiYWRkTGlua2VkRWxlbWVudCIsImRpc3Bvc2Vab29tQnV0dG9uR3JvdXAiLCJkaXNwb3NlIiwidW5saW5rIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJab29tQnV0dG9uR3JvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogWm9vbUJ1dHRvbkdyb3VwIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBhIHBhaXIgb2YgYnV0dG9ucyB1c2VkIHRvIHpvb20gJ2luJyBhbmQgJ291dCcuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgRmxvd0JveCwgRmxvd0JveE9wdGlvbnMsIE5vZGUgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLCB7IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclB1c2hCdXR0b24uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCBUUmFuZ2VkUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmFuZ2VkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NlbmVyeVBoZXRTdHJpbmdzIGZyb20gJy4vU2NlbmVyeVBoZXRTdHJpbmdzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIGZ1bmN0aW9uIGFwcGxpZWQgd2hlbiB0aGUgJysnIGJ1dHRvbiBpcyBwcmVzc2VkXHJcbiAgYXBwbHlab29tSW4/OiAoIGN1cnJlbnRab29tOiBudW1iZXIgKSA9PiBudW1iZXI7XHJcblxyXG4gIC8vIGZ1bmN0aW9uIGFwcGxpZWQgd2hlbiB0aGUgJy0nIGJ1dHRvbiBpcyBwcmVzc2VkXHJcbiAgYXBwbHlab29tT3V0PzogKCBjdXJyZW50Wm9vbTogbnVtYmVyICkgPT4gbnVtYmVyO1xyXG5cclxuICAvLyBwcm9wYWdhdGVkIHRvIHRoZSAnKycgYW5kICctJyBwdXNoIGJ1dHRvbnNcclxuICBidXR0b25PcHRpb25zPzogU3RyaWN0T21pdDxSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zLCAnY29udGVudCcgfCAnbGlzdGVuZXInIHwgJ3RhbmRlbSc+O1xyXG5cclxuICAvLyBwb2ludGVyIGFyZWEgZGlsYXRpb24sIGNvcnJlY3QgZm9yIG9wdGlvbnMub3JpZW50YXRpb24sIGFuZCBvdmVybGFwIHdpbGwgYmUgcHJldmVudGVkIGJ5IHNoaWZ0aW5nXHJcbiAgdG91Y2hBcmVhWERpbGF0aW9uPzogbnVtYmVyO1xyXG4gIHRvdWNoQXJlYVlEaWxhdGlvbj86IG51bWJlcjtcclxuICBtb3VzZUFyZWFYRGlsYXRpb24/OiBudW1iZXI7XHJcbiAgbW91c2VBcmVhWURpbGF0aW9uPzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgWm9vbUJ1dHRvbkdyb3VwT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxGbG93Qm94T3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBab29tQnV0dG9uR3JvdXAgZXh0ZW5kcyBGbG93Qm94IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlWm9vbUJ1dHRvbkdyb3VwOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gem9vbUxldmVsUHJvcGVydHkgLSBzbWFsbGVyIHZhbHVlIG1lYW5zIG1vcmUgem9vbWVkIG91dFxyXG4gICAqIEBwYXJhbSB6b29tSW5JY29uXHJcbiAgICogQHBhcmFtIHpvb21PdXRJY29uXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9ucz9cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoIHpvb21MZXZlbFByb3BlcnR5OiBUUmFuZ2VkUHJvcGVydHksIHpvb21Jbkljb246IE5vZGUsIHpvb21PdXRJY29uOiBOb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogWm9vbUJ1dHRvbkdyb3VwT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCB6b29tTGV2ZWxSYW5nZSA9IHpvb21MZXZlbFByb3BlcnR5LnJhbmdlO1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Wm9vbUJ1dHRvbkdyb3VwT3B0aW9ucywgU2VsZk9wdGlvbnMsIEZsb3dCb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBab29tQnV0dG9uR3JvdXBPcHRpb25zXHJcbiAgICAgIGFwcGx5Wm9vbUluOiAoIGN1cnJlbnRab29tOiBudW1iZXIgKSA9PiBjdXJyZW50Wm9vbSArIDEsXHJcbiAgICAgIGFwcGx5Wm9vbU91dDogKCBjdXJyZW50Wm9vbTogbnVtYmVyICkgPT4gY3VycmVudFpvb20gLSAxLFxyXG4gICAgICB0b3VjaEFyZWFYRGlsYXRpb246IDAsXHJcbiAgICAgIHRvdWNoQXJlYVlEaWxhdGlvbjogMCxcclxuICAgICAgbW91c2VBcmVhWERpbGF0aW9uOiAwLFxyXG4gICAgICBtb3VzZUFyZWFZRGlsYXRpb246IDAsXHJcbiAgICAgIGJ1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBmaXJlT25Ib2xkOiB0cnVlLFxyXG4gICAgICAgIGZpcmVPbkhvbGREZWxheTogNjAwLCAvLyBtc1xyXG4gICAgICAgIGZpcmVPbkhvbGRJbnRlcnZhbDogMjUwLCAvLyBtc1xyXG4gICAgICAgIHBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZDogZmFsc2UsXHJcbiAgICAgICAgcGhldGlvRW5hYmxlZFByb3BlcnR5SW5zdHJ1bWVudGVkOiBmYWxzZVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gRmxvd0JveE9wdGlvbnNcclxuICAgICAgc3BhY2luZzogMCxcclxuICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgYWxpZ246ICdjZW50ZXInLFxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRCxcclxuICAgICAgdGFuZGVtTmFtZVN1ZmZpeDogJ1pvb21CdXR0b25Hcm91cCdcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEZvciBwb2ludGVyIGFyZWFzLiBEZXBlbmRlbnQgb24gb3B0aW9ucy5zcGFjaW5nLCBwb2ludGVyIGFyZWFzIHdpbGwgYmUgc2hpZnRlZCB0byBwcmV2ZW50IG92ZXJsYXAuXHJcbiAgICBjb25zdCBoYWxmU3BhY2luZyA9IG9wdGlvbnMuc3BhY2luZyAvIDI7XHJcbiAgICBjb25zdCBtb3VzZVhTaGlmdCA9IE1hdGgubWF4KCAwLCBvcHRpb25zLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgPyBvcHRpb25zLm1vdXNlQXJlYVhEaWxhdGlvbiAtIGhhbGZTcGFjaW5nIDogMCApO1xyXG4gICAgY29uc3QgdG91Y2hYU2hpZnQgPSBNYXRoLm1heCggMCwgb3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnID8gb3B0aW9ucy50b3VjaEFyZWFYRGlsYXRpb24gLSBoYWxmU3BhY2luZyA6IDAgKTtcclxuICAgIGNvbnN0IG1vdXNlWVNoaWZ0ID0gTWF0aC5tYXgoIDAsIG9wdGlvbnMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgPyBvcHRpb25zLm1vdXNlQXJlYVlEaWxhdGlvbiAtIGhhbGZTcGFjaW5nIDogMCApO1xyXG4gICAgY29uc3QgdG91Y2hZU2hpZnQgPSBNYXRoLm1heCggMCwgb3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IG9wdGlvbnMudG91Y2hBcmVhWURpbGF0aW9uIC0gaGFsZlNwYWNpbmcgOiAwICk7XHJcblxyXG4gICAgLy8gem9vbSBpblxyXG4gICAgY29uc3Qgem9vbUluQnV0dG9uID0gbmV3IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiggbWVyZ2UoIHtcclxuICAgICAgY29udGVudDogem9vbUluSWNvbixcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICB6b29tTGV2ZWxQcm9wZXJ0eS52YWx1ZSA9IG9wdGlvbnMuYXBwbHlab29tSW4oIHpvb21MZXZlbFByb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQXJlYVhEaWxhdGlvbjogb3B0aW9ucy50b3VjaEFyZWFYRGlsYXRpb24sXHJcbiAgICAgIHRvdWNoQXJlYVlEaWxhdGlvbjogb3B0aW9ucy50b3VjaEFyZWFZRGlsYXRpb24sXHJcbiAgICAgIG1vdXNlQXJlYVhEaWxhdGlvbjogb3B0aW9ucy5tb3VzZUFyZWFYRGlsYXRpb24sXHJcbiAgICAgIG1vdXNlQXJlYVlEaWxhdGlvbjogb3B0aW9ucy5tb3VzZUFyZWFZRGlsYXRpb24sXHJcbiAgICAgIHRvdWNoQXJlYVhTaGlmdDogdG91Y2hYU2hpZnQsXHJcbiAgICAgIHRvdWNoQXJlYVlTaGlmdDogLXRvdWNoWVNoaWZ0LFxyXG4gICAgICBtb3VzZUFyZWFYU2hpZnQ6IG1vdXNlWFNoaWZ0LFxyXG4gICAgICBtb3VzZUFyZWFZU2hpZnQ6IC1tb3VzZVlTaGlmdCxcclxuICAgICAgYWNjZXNzaWJsZU5hbWU6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5Lnpvb21JblN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3pvb21JbkJ1dHRvbicgKVxyXG4gICAgfSwgb3B0aW9ucy5idXR0b25PcHRpb25zICkgKTtcclxuXHJcbiAgICAvLyB6b29tIG91dFxyXG4gICAgY29uc3Qgem9vbU91dEJ1dHRvbiA9IG5ldyBSZWN0YW5ndWxhclB1c2hCdXR0b24oIG1lcmdlKCB7XHJcbiAgICAgIGNvbnRlbnQ6IHpvb21PdXRJY29uLFxyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG4gICAgICAgIHpvb21MZXZlbFByb3BlcnR5LnZhbHVlID0gb3B0aW9ucy5hcHBseVpvb21PdXQoIHpvb21MZXZlbFByb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQXJlYVhEaWxhdGlvbjogb3B0aW9ucy50b3VjaEFyZWFYRGlsYXRpb24sXHJcbiAgICAgIHRvdWNoQXJlYVlEaWxhdGlvbjogb3B0aW9ucy50b3VjaEFyZWFZRGlsYXRpb24sXHJcbiAgICAgIG1vdXNlQXJlYVhEaWxhdGlvbjogb3B0aW9ucy5tb3VzZUFyZWFYRGlsYXRpb24sXHJcbiAgICAgIG1vdXNlQXJlYVlEaWxhdGlvbjogb3B0aW9ucy5tb3VzZUFyZWFZRGlsYXRpb24sXHJcbiAgICAgIHRvdWNoQXJlYVhTaGlmdDogLXRvdWNoWFNoaWZ0LFxyXG4gICAgICB0b3VjaEFyZWFZU2hpZnQ6IHRvdWNoWVNoaWZ0LFxyXG4gICAgICBtb3VzZUFyZWFYU2hpZnQ6IC1tb3VzZVhTaGlmdCxcclxuICAgICAgbW91c2VBcmVhWVNoaWZ0OiBtb3VzZVlTaGlmdCxcclxuICAgICAgYWNjZXNzaWJsZU5hbWU6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5Lnpvb21PdXRTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd6b29tT3V0QnV0dG9uJyApXHJcbiAgICB9LCBvcHRpb25zLmJ1dHRvbk9wdGlvbnMgKSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSAoIG9wdGlvbnMub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyApID8gWyB6b29tT3V0QnV0dG9uLCB6b29tSW5CdXR0b24gXSA6IFsgem9vbUluQnV0dG9uLCB6b29tT3V0QnV0dG9uIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBkaXNhYmxlIGEgYnV0dG9uIGlmIHdlIHJlYWNoIHRoZSBtaW4gb3IgbWF4XHJcbiAgICBjb25zdCB6b29tTGV2ZWxMaXN0ZW5lciA9ICggem9vbUxldmVsOiBudW1iZXIgKSA9PiB7XHJcbiAgICAgIHpvb21PdXRCdXR0b24uZW5hYmxlZCA9IHpvb21MZXZlbFJhbmdlLmNvbnRhaW5zKCBvcHRpb25zLmFwcGx5Wm9vbU91dCggem9vbUxldmVsICkgKTtcclxuICAgICAgem9vbUluQnV0dG9uLmVuYWJsZWQgPSB6b29tTGV2ZWxSYW5nZS5jb250YWlucyggb3B0aW9ucy5hcHBseVpvb21Jbiggem9vbUxldmVsICkgKTtcclxuICAgIH07XHJcbiAgICB6b29tTGV2ZWxQcm9wZXJ0eS5saW5rKCB6b29tTGV2ZWxMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuYWRkTGlua2VkRWxlbWVudCggem9vbUxldmVsUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd6b29tUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2Vab29tQnV0dG9uR3JvdXAgPSAoKSA9PiB7XHJcbiAgICAgIHpvb21JbkJ1dHRvbi5kaXNwb3NlKCk7XHJcbiAgICAgIHpvb21PdXRCdXR0b24uZGlzcG9zZSgpO1xyXG4gICAgICB6b29tTGV2ZWxQcm9wZXJ0eS51bmxpbmsoIHpvb21MZXZlbExpc3RlbmVyICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2Vab29tQnV0dG9uR3JvdXAoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnWm9vbUJ1dHRvbkdyb3VwJywgWm9vbUJ1dHRvbkdyb3VwICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsU0FBU0MsT0FBTyxRQUE4Qiw2QkFBNkI7QUFDM0UsT0FBT0MscUJBQXFCLE1BQXdDLCtDQUErQztBQUNuSCxPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUUxQyxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFzQnhELGVBQWUsTUFBTUMsZUFBZSxTQUFTTixPQUFPLENBQUM7RUFJbkQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1lPLFdBQVdBLENBQUVDLGlCQUFrQyxFQUFFQyxVQUFnQixFQUFFQyxXQUFpQixFQUN2RUMsZUFBd0MsRUFBRztJQUVoRSxNQUFNQyxjQUFjLEdBQUdKLGlCQUFpQixDQUFDSyxLQUFLO0lBRTlDLE1BQU1DLE9BQU8sR0FBR1gsU0FBUyxDQUFzRCxDQUFDLENBQUU7TUFFaEY7TUFDQVksV0FBVyxFQUFJQyxXQUFtQixJQUFNQSxXQUFXLEdBQUcsQ0FBQztNQUN2REMsWUFBWSxFQUFJRCxXQUFtQixJQUFNQSxXQUFXLEdBQUcsQ0FBQztNQUN4REUsa0JBQWtCLEVBQUUsQ0FBQztNQUNyQkMsa0JBQWtCLEVBQUUsQ0FBQztNQUNyQkMsa0JBQWtCLEVBQUUsQ0FBQztNQUNyQkMsa0JBQWtCLEVBQUUsQ0FBQztNQUNyQkMsYUFBYSxFQUFFO1FBQ2JDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxlQUFl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