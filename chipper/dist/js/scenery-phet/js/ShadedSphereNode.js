// Copyright 2013-2022, University of Colorado Boulder

/**
 * A 3D-looking sphere with a specular highlight.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../phet-core/js/optionize.js';
import { Circle, RadialGradient } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
export default class ShadedSphereNode extends Circle {
  constructor(diameter, providedOptions) {
    const options = optionize()({
      // SelfOptions
      mainColor: 'gray',
      highlightColor: 'white',
      shadowColor: 'black',
      highlightDiameterRatio: 0.5,
      highlightXOffset: -0.4,
      highlightYOffset: -0.4
    }, providedOptions);

    // validate option values
    assert && assert(options.highlightDiameterRatio < 1, `highlightDiameterRatio must be < diameter: ${options.highlightDiameterRatio}`);
    assert && assert(options.highlightXOffset >= -1 && options.highlightXOffset <= 1, `highlightXOffset out of range: ${options.highlightXOffset}`);
    assert && assert(options.highlightYOffset >= -1 && options.highlightYOffset <= 1, `highlightYOffset out of range: ${options.highlightYOffset}`);
    super(diameter / 2, options);
    this.updateShadedSphereFill = () => {
      const radius = this.radius;
      const highlightX = radius * options.highlightXOffset;
      const highlightY = radius * options.highlightYOffset;
      this.fill = new RadialGradient(highlightX, highlightY, 0, highlightX, highlightY, radius * 2).addColorStop(0, options.highlightColor).addColorStop(options.highlightDiameterRatio, options.mainColor).addColorStop(1, options.shadowColor);
    };
    this.updateShadedSphereFill();
  }
  invalidatePath() {
    super.invalidatePath();

    // Called during the super() call, so we may not be defined yet. We'll call this during the constructor
    // manually.
    this.updateShadedSphereFill && this.updateShadedSphereFill();
  }
}
sceneryPhet.register('ShadedSphereNode', ShadedSphereNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJDaXJjbGUiLCJSYWRpYWxHcmFkaWVudCIsInNjZW5lcnlQaGV0IiwiU2hhZGVkU3BoZXJlTm9kZSIsImNvbnN0cnVjdG9yIiwiZGlhbWV0ZXIiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibWFpbkNvbG9yIiwiaGlnaGxpZ2h0Q29sb3IiLCJzaGFkb3dDb2xvciIsImhpZ2hsaWdodERpYW1ldGVyUmF0aW8iLCJoaWdobGlnaHRYT2Zmc2V0IiwiaGlnaGxpZ2h0WU9mZnNldCIsImFzc2VydCIsInVwZGF0ZVNoYWRlZFNwaGVyZUZpbGwiLCJyYWRpdXMiLCJoaWdobGlnaHRYIiwiaGlnaGxpZ2h0WSIsImZpbGwiLCJhZGRDb2xvclN0b3AiLCJpbnZhbGlkYXRlUGF0aCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2hhZGVkU3BoZXJlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIDNELWxvb2tpbmcgc3BoZXJlIHdpdGggYSBzcGVjdWxhciBoaWdobGlnaHQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIENpcmNsZU9wdGlvbnMsIFRDb2xvciwgUmFkaWFsR3JhZGllbnQgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIG1haW5Db2xvcj86IFRDb2xvcjtcclxuICBoaWdobGlnaHRDb2xvcj86IFRDb2xvcjtcclxuICBzaGFkb3dDb2xvcj86IFRDb2xvcjtcclxuICBoaWdobGlnaHREaWFtZXRlclJhdGlvPzogbnVtYmVyO1xyXG4gIGhpZ2hsaWdodFhPZmZzZXQ/OiBudW1iZXI7IC8vIHgtb2Zmc2V0IG9mIHRoZSBoaWdobGlnaHQgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBzcGhlcmUsIHBlcmNlbnRhZ2Ugb2YgcmFkaXVzLCBbLTEsMV1cclxuICBoaWdobGlnaHRZT2Zmc2V0PzogbnVtYmVyOyAvLyB5LW9mZnNldCBvZiB0aGUgaGlnaGxpZ2h0IGZyb20gdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlLCBwZXJjZW50YWdlIG9mIHJhZGl1cywgWy0xLDFdXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxDaXJjbGVPcHRpb25zLCAnZmlsbCc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhZGVkU3BoZXJlTm9kZSBleHRlbmRzIENpcmNsZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgdXBkYXRlU2hhZGVkU3BoZXJlRmlsbDogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBkaWFtZXRlcjogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM/OiBTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFNoYWRlZFNwaGVyZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgQ2lyY2xlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgbWFpbkNvbG9yOiAnZ3JheScsXHJcbiAgICAgIGhpZ2hsaWdodENvbG9yOiAnd2hpdGUnLFxyXG4gICAgICBzaGFkb3dDb2xvcjogJ2JsYWNrJyxcclxuICAgICAgaGlnaGxpZ2h0RGlhbWV0ZXJSYXRpbzogMC41LFxyXG4gICAgICBoaWdobGlnaHRYT2Zmc2V0OiAtMC40LFxyXG4gICAgICBoaWdobGlnaHRZT2Zmc2V0OiAtMC40XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyB2YWxpZGF0ZSBvcHRpb24gdmFsdWVzXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLmhpZ2hsaWdodERpYW1ldGVyUmF0aW8gPCAxLFxyXG4gICAgICBgaGlnaGxpZ2h0RGlhbWV0ZXJSYXRpbyBtdXN0IGJlIDwgZGlhbWV0ZXI6ICR7b3B0aW9ucy5oaWdobGlnaHREaWFtZXRlclJhdGlvfWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMuaGlnaGxpZ2h0WE9mZnNldCA+PSAtMSAmJiBvcHRpb25zLmhpZ2hsaWdodFhPZmZzZXQgPD0gMSxcclxuICAgICAgYGhpZ2hsaWdodFhPZmZzZXQgb3V0IG9mIHJhbmdlOiAke29wdGlvbnMuaGlnaGxpZ2h0WE9mZnNldH1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLmhpZ2hsaWdodFlPZmZzZXQgPj0gLTEgJiYgb3B0aW9ucy5oaWdobGlnaHRZT2Zmc2V0IDw9IDEsXHJcbiAgICAgIGBoaWdobGlnaHRZT2Zmc2V0IG91dCBvZiByYW5nZTogJHtvcHRpb25zLmhpZ2hsaWdodFlPZmZzZXR9YCApO1xyXG5cclxuICAgIHN1cGVyKCBkaWFtZXRlciAvIDIsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVNoYWRlZFNwaGVyZUZpbGwgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMucmFkaXVzO1xyXG4gICAgICBjb25zdCBoaWdobGlnaHRYID0gcmFkaXVzICogb3B0aW9ucy5oaWdobGlnaHRYT2Zmc2V0O1xyXG4gICAgICBjb25zdCBoaWdobGlnaHRZID0gcmFkaXVzICogb3B0aW9ucy5oaWdobGlnaHRZT2Zmc2V0O1xyXG4gICAgICB0aGlzLmZpbGwgPSBuZXcgUmFkaWFsR3JhZGllbnQoIGhpZ2hsaWdodFgsIGhpZ2hsaWdodFksIDAsIGhpZ2hsaWdodFgsIGhpZ2hsaWdodFksIHJhZGl1cyAqIDIgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDAsIG9wdGlvbnMuaGlnaGxpZ2h0Q29sb3IgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIG9wdGlvbnMuaGlnaGxpZ2h0RGlhbWV0ZXJSYXRpbywgb3B0aW9ucy5tYWluQ29sb3IgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDEsIG9wdGlvbnMuc2hhZG93Q29sb3IgKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy51cGRhdGVTaGFkZWRTcGhlcmVGaWxsKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgaW52YWxpZGF0ZVBhdGgoKTogdm9pZCB7XHJcbiAgICBzdXBlci5pbnZhbGlkYXRlUGF0aCgpO1xyXG5cclxuICAgIC8vIENhbGxlZCBkdXJpbmcgdGhlIHN1cGVyKCkgY2FsbCwgc28gd2UgbWF5IG5vdCBiZSBkZWZpbmVkIHlldC4gV2UnbGwgY2FsbCB0aGlzIGR1cmluZyB0aGUgY29uc3RydWN0b3JcclxuICAgIC8vIG1hbnVhbGx5LlxyXG4gICAgdGhpcy51cGRhdGVTaGFkZWRTcGhlcmVGaWxsICYmIHRoaXMudXBkYXRlU2hhZGVkU3BoZXJlRmlsbCgpO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdTaGFkZWRTcGhlcmVOb2RlJywgU2hhZGVkU3BoZXJlTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0saUNBQWlDO0FBRXZELFNBQVNDLE1BQU0sRUFBeUJDLGNBQWMsUUFBUSw2QkFBNkI7QUFDM0YsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQWExQyxlQUFlLE1BQU1DLGdCQUFnQixTQUFTSCxNQUFNLENBQUM7RUFJNUNJLFdBQVdBLENBQUVDLFFBQWdCLEVBQUVDLGVBQXlDLEVBQUc7SUFFaEYsTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQXNELENBQUMsQ0FBRTtNQUVoRjtNQUNBUyxTQUFTLEVBQUUsTUFBTTtNQUNqQkMsY0FBYyxFQUFFLE9BQU87TUFDdkJDLFdBQVcsRUFBRSxPQUFPO01BQ3BCQyxzQkFBc0IsRUFBRSxHQUFHO01BQzNCQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUc7TUFDdEJDLGdCQUFnQixFQUFFLENBQUM7SUFDckIsQ0FBQyxFQUFFUCxlQUFnQixDQUFDOztJQUVwQjtJQUNBUSxNQUFNLElBQUlBLE1BQU0sQ0FBRVAsT0FBTyxDQUFDSSxzQkFBc0IsR0FBRyxDQUFDLEVBQ2pELDhDQUE2Q0osT0FBTyxDQUFDSSxzQkFBdUIsRUFBRSxDQUFDO0lBQ2xGRyxNQUFNLElBQUlBLE1BQU0sQ0FBRVAsT0FBTyxDQUFDSyxnQkFBZ0IsSUFBSSxDQUFDLENBQUMsSUFBSUwsT0FBTyxDQUFDSyxnQkFBZ0IsSUFBSSxDQUFDLEVBQzlFLGtDQUFpQ0wsT0FBTyxDQUFDSyxnQkFBaUIsRUFBRSxDQUFDO0lBQ2hFRSxNQUFNLElBQUlBLE1BQU0sQ0FBRVAsT0FBTyxDQUFDTSxnQkFBZ0IsSUFBSSxDQUFDLENBQUMsSUFBSU4sT0FBTyxDQUFDTSxnQkFBZ0IsSUFBSSxDQUFDLEVBQzlFLGtDQUFpQ04sT0FBTyxDQUFDTSxnQkFBaUIsRUFBRSxDQUFDO0lBRWhFLEtBQUssQ0FBRVIsUUFBUSxHQUFHLENBQUMsRUFBRUUsT0FBUSxDQUFDO0lBRTlCLElBQUksQ0FBQ1Esc0JBQXNCLEdBQUcsTUFBTTtNQUNsQyxNQUFNQyxNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNO01BQzFCLE1BQU1DLFVBQVUsR0FBR0QsTUFBTSxHQUFHVCxPQUFPLENBQUNLLGdCQUFnQjtNQUNwRCxNQUFNTSxVQUFVLEdBQUdGLE1BQU0sR0FBR1QsT0FBTyxDQUFDTSxnQkFBZ0I7TUFDcEQsSUFBSSxDQUFDTSxJQUFJLEdBQUcsSUFBSWxCLGNBQWMsQ0FBRWdCLFVBQVUsRUFBRUMsVUFBVSxFQUFFLENBQUMsRUFBRUQsVUFBVSxFQUFFQyxVQUFVLEVBQUVGLE1BQU0sR0FBRyxDQUFFLENBQUMsQ0FDNUZJLFlBQVksQ0FBRSxDQUFDLEVBQUViLE9BQU8sQ0FBQ0UsY0FBZSxDQUFDLENBQ3pDVyxZQUFZLENBQUViLE9BQU8sQ0FBQ0ksc0JBQXNCLEVBQUVKLE9BQU8sQ0FBQ0MsU0FBVSxDQUFDLENBQ2pFWSxZQUFZLENBQUUsQ0FBQyxFQUFFYixPQUFPLENBQUNHLFdBQVksQ0FBQztJQUMzQyxDQUFDO0lBRUQsSUFBSSxDQUFDSyxzQkFBc0IsQ0FBQyxDQUFDO0VBQy9CO0VBRW1CTSxjQUFjQSxDQUFBLEVBQVM7SUFDeEMsS0FBSyxDQUFDQSxjQUFjLENBQUMsQ0FBQzs7SUFFdEI7SUFDQTtJQUNBLElBQUksQ0FBQ04sc0JBQXNCLElBQUksSUFBSSxDQUFDQSxzQkFBc0IsQ0FBQyxDQUFDO0VBQzlEO0FBQ0Y7QUFFQWIsV0FBVyxDQUFDb0IsUUFBUSxDQUFFLGtCQUFrQixFQUFFbkIsZ0JBQWlCLENBQUMifQ==