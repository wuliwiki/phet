// Copyright 2022-2023, University of Colorado Boulder

/**
 * BackgroundNode puts a Node on a rectangular background, dynamically sized to fit the Node.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import { Node, Rectangle } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
export default class BackgroundNode extends Node {
  // Unfortunate that this is public :(
  /**
   * @param node - the Node that will be put on the background
   * @param providedOptions
   */
  constructor(node, providedOptions) {
    const options = optionize()({
      // BackgroundNodeOptions
      xMargin: 2,
      yMargin: 2,
      rectangleOptions: {
        fill: 'white',
        opacity: 0.75
      }
    }, providedOptions);
    super();

    // translucent rectangle, initial size is arbitrary since it is resized below
    this.background = new Rectangle(0, 0, 1, 1, options.rectangleOptions);

    // Wrap the provided Node in a parent to avoid unneeded notifications in the bounds-change listener.
    const wrapperNode = new Node({
      children: [node]
    });

    // Size the background rectangle to fit the Node.
    node.boundsProperty.link(bounds => {
      if (!bounds.isEmpty()) {
        this.background.setRect(0, 0, node.width + 2 * options.xMargin, node.height + 2 * options.yMargin);
        wrapperNode.center = this.background.center;
      }
    });
    options.children = [this.background, wrapperNode];
    this.mutate(options);
  }
}
sceneryPhet.register('BackgroundNode', BackgroundNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwiUmVjdGFuZ2xlIiwic2NlbmVyeVBoZXQiLCJCYWNrZ3JvdW5kTm9kZSIsImNvbnN0cnVjdG9yIiwibm9kZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsInJlY3RhbmdsZU9wdGlvbnMiLCJmaWxsIiwib3BhY2l0eSIsImJhY2tncm91bmQiLCJ3cmFwcGVyTm9kZSIsImNoaWxkcmVuIiwiYm91bmRzUHJvcGVydHkiLCJsaW5rIiwiYm91bmRzIiwiaXNFbXB0eSIsInNldFJlY3QiLCJ3aWR0aCIsImhlaWdodCIsImNlbnRlciIsIm11dGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFja2dyb3VuZE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmFja2dyb3VuZE5vZGUgcHV0cyBhIE5vZGUgb24gYSByZWN0YW5ndWxhciBiYWNrZ3JvdW5kLCBkeW5hbWljYWxseSBzaXplZCB0byBmaXQgdGhlIE5vZGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBSZWN0YW5nbGUsIFJlY3RhbmdsZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHhNYXJnaW4/OiBudW1iZXI7IC8vIHNldCB0aGUgeCBtYXJnaW4gYmV0d2VlbiB0aGUgTm9kZSBjb250ZW50IGFuZCBiYWNrZ3JvdW5kIGVkZ2VcclxuICB5TWFyZ2luPzogbnVtYmVyOyAvLyBzZXQgdGhlIHkgbWFyZ2luIGJldHdlZW4gdGhlIE5vZGUgY29udGVudCBhbmQgYmFja2dyb3VuZCBlZGdlXHJcbiAgcmVjdGFuZ2xlT3B0aW9ucz86IFJlY3RhbmdsZU9wdGlvbnM7IC8vIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSBiYWNrZ3JvdW5kIHBoZXQuc2NlbmVyeS5SZWN0YW5nbGVcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEJhY2tncm91bmROb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYWNrZ3JvdW5kTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgYmFja2dyb3VuZDogUmVjdGFuZ2xlOyAvLyBVbmZvcnR1bmF0ZSB0aGF0IHRoaXMgaXMgcHVibGljIDooXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBub2RlIC0gdGhlIE5vZGUgdGhhdCB3aWxsIGJlIHB1dCBvbiB0aGUgYmFja2dyb3VuZFxyXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnNcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG5vZGU6IE5vZGUsIHByb3ZpZGVkT3B0aW9ucz86IEJhY2tncm91bmROb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJhY2tncm91bmROb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBCYWNrZ3JvdW5kTm9kZU9wdGlvbnNcclxuICAgICAgeE1hcmdpbjogMixcclxuICAgICAgeU1hcmdpbjogMixcclxuICAgICAgcmVjdGFuZ2xlT3B0aW9uczoge1xyXG4gICAgICAgIGZpbGw6ICd3aGl0ZScsXHJcbiAgICAgICAgb3BhY2l0eTogMC43NVxyXG4gICAgICB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIHRyYW5zbHVjZW50IHJlY3RhbmdsZSwgaW5pdGlhbCBzaXplIGlzIGFyYml0cmFyeSBzaW5jZSBpdCBpcyByZXNpemVkIGJlbG93XHJcbiAgICB0aGlzLmJhY2tncm91bmQgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAxLCAxLCBvcHRpb25zLnJlY3RhbmdsZU9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBXcmFwIHRoZSBwcm92aWRlZCBOb2RlIGluIGEgcGFyZW50IHRvIGF2b2lkIHVubmVlZGVkIG5vdGlmaWNhdGlvbnMgaW4gdGhlIGJvdW5kcy1jaGFuZ2UgbGlzdGVuZXIuXHJcbiAgICBjb25zdCB3cmFwcGVyTm9kZSA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIG5vZGUgXSB9ICk7XHJcblxyXG4gICAgLy8gU2l6ZSB0aGUgYmFja2dyb3VuZCByZWN0YW5nbGUgdG8gZml0IHRoZSBOb2RlLlxyXG4gICAgbm9kZS5ib3VuZHNQcm9wZXJ0eS5saW5rKCBib3VuZHMgPT4ge1xyXG4gICAgICBpZiAoICFib3VuZHMuaXNFbXB0eSgpICkge1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZC5zZXRSZWN0KCAwLCAwLCBub2RlLndpZHRoICsgMiAqIG9wdGlvbnMueE1hcmdpbiwgbm9kZS5oZWlnaHQgKyAyICogb3B0aW9ucy55TWFyZ2luICk7XHJcbiAgICAgICAgd3JhcHBlck5vZGUuY2VudGVyID0gdGhpcy5iYWNrZ3JvdW5kLmNlbnRlcjtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIHRoaXMuYmFja2dyb3VuZCwgd3JhcHBlck5vZGUgXTtcclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ0JhY2tncm91bmROb2RlJywgQmFja2dyb3VuZE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0saUNBQWlDO0FBRXZELFNBQVNDLElBQUksRUFBZUMsU0FBUyxRQUEwQiw2QkFBNkI7QUFDNUYsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQVUxQyxlQUFlLE1BQU1DLGNBQWMsU0FBU0gsSUFBSSxDQUFDO0VBRVI7RUFFdkM7QUFDRjtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsSUFBVSxFQUFFQyxlQUF1QyxFQUFHO0lBRXhFLE1BQU1DLE9BQU8sR0FBR1IsU0FBUyxDQUFrRCxDQUFDLENBQUU7TUFFNUU7TUFDQVMsT0FBTyxFQUFFLENBQUM7TUFDVkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsZ0JBQWdCLEVBQUU7UUFDaEJDLElBQUksRUFBRSxPQUFPO1FBQ2JDLE9BQU8sRUFBRTtNQUNYO0lBQ0YsQ0FBQyxFQUFFTixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDTyxVQUFVLEdBQUcsSUFBSVosU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRU0sT0FBTyxDQUFDRyxnQkFBaUIsQ0FBQzs7SUFFdkU7SUFDQSxNQUFNSSxXQUFXLEdBQUcsSUFBSWQsSUFBSSxDQUFFO01BQUVlLFFBQVEsRUFBRSxDQUFFVixJQUFJO0lBQUcsQ0FBRSxDQUFDOztJQUV0RDtJQUNBQSxJQUFJLENBQUNXLGNBQWMsQ0FBQ0MsSUFBSSxDQUFFQyxNQUFNLElBQUk7TUFDbEMsSUFBSyxDQUFDQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxDQUFDLEVBQUc7UUFDdkIsSUFBSSxDQUFDTixVQUFVLENBQUNPLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFZixJQUFJLENBQUNnQixLQUFLLEdBQUcsQ0FBQyxHQUFHZCxPQUFPLENBQUNDLE9BQU8sRUFBRUgsSUFBSSxDQUFDaUIsTUFBTSxHQUFHLENBQUMsR0FBR2YsT0FBTyxDQUFDRSxPQUFRLENBQUM7UUFDcEdLLFdBQVcsQ0FBQ1MsTUFBTSxHQUFHLElBQUksQ0FBQ1YsVUFBVSxDQUFDVSxNQUFNO01BQzdDO0lBQ0YsQ0FBRSxDQUFDO0lBRUhoQixPQUFPLENBQUNRLFFBQVEsR0FBRyxDQUFFLElBQUksQ0FBQ0YsVUFBVSxFQUFFQyxXQUFXLENBQUU7SUFDbkQsSUFBSSxDQUFDVSxNQUFNLENBQUVqQixPQUFRLENBQUM7RUFDeEI7QUFDRjtBQUVBTCxXQUFXLENBQUN1QixRQUFRLENBQUUsZ0JBQWdCLEVBQUV0QixjQUFlLENBQUMifQ==