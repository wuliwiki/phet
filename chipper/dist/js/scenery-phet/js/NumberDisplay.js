// Copyright 2015-2023, University of Colorado Boulder

/**
 * Displays a Property of type {number} in a background rectangle.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../axon/js/DerivedProperty.js';
import TinyProperty from '../../axon/js/TinyProperty.js';
import Utils from '../../dot/js/Utils.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import StringUtils from '../../phetcommon/js/util/StringUtils.js';
import { Node, Rectangle, RichText, Text, ManualConstraint } from '../../scenery/js/imports.js';
import SunConstants from '../../sun/js/SunConstants.js';
import Tandem from '../../tandem/js/Tandem.js';
import IOType from '../../tandem/js/types/IOType.js';
import StringIO from '../../tandem/js/types/StringIO.js';
import MathSymbols from './MathSymbols.js';
import PhetFont from './PhetFont.js';
import sceneryPhet from './sceneryPhet.js';

// constants
const DEFAULT_FONT = new PhetFont(20);

// valid values for options.align and options.noValueAlign
const ALIGN_VALUES = ['center', 'left', 'right'];
const DEFAULT_DECIMAL_PLACES = 0;
export default class NumberDisplay extends Node {
  // called by dispose
  /**
   * @param numberProperty
   * @param displayRange - this range, with options.decimals or numberFormatter applied, is used to determine
   *                     - the display width. It is unrelated to the range of numberProperty.
   * @param providedOptions
   */
  constructor(numberProperty, displayRange, providedOptions) {
    const options = optionize()({
      align: 'right',
      valuePattern: SunConstants.VALUE_NAMED_PLACEHOLDER,
      decimalPlaces: DEFAULT_DECIMAL_PLACES,
      numberFormatter: null,
      useRichText: false,
      useFullHeight: false,
      textOptions: {
        font: DEFAULT_FONT,
        fill: 'black',
        maxWidth: null,
        // {number|null} if null, then it will be computed based on displayRange
        phetioReadOnly: true
      },
      xMargin: 8,
      yMargin: 2,
      cornerRadius: 0,
      backgroundFill: 'white',
      backgroundStroke: 'lightGray',
      backgroundLineWidth: 1,
      backgroundLineDash: [],
      minBackgroundWidth: 0,
      noValueString: MathSymbols.NO_VALUE,
      noValueAlign: null,
      noValuePattern: null,
      // phet-io
      tandem: Tandem.OPTIONAL,
      phetioType: NumberDisplay.NumberDisplayIO
    }, providedOptions);

    // valuePattern|decimalPlaces is mutually exclusive with numberFormatter
    if (assert) {
      const numberFormatterProvided = !!options.numberFormatter;
      const decimalPlacesProvided = options.decimalPlaces !== DEFAULT_DECIMAL_PLACES;
      const valuePatternProvided = options.valuePattern !== SunConstants.VALUE_NAMED_PLACEHOLDER;
      const decimalOrValueProvided = decimalPlacesProvided || valuePatternProvided;
      if (numberFormatterProvided || decimalOrValueProvided) {
        assert && assert(numberFormatterProvided !== decimalOrValueProvided, 'options.numberFormatter is mutually exclusive with options.valuePattern and options.decimalPlaces');
      }
    }
    const numberFormatterProperty = new TinyProperty(options.numberFormatter ? options.numberFormatter : value => {
      if (options.decimalPlaces === null) {
        return `${value}`;
      } else {
        return Utils.toFixed(value, options.decimalPlaces);
      }
    });
    assert && assert(!options.hasOwnProperty('unitsNode'), 'unitsNode is not a supported option');

    // Set default alignments and validate
    assert && assert(_.includes(ALIGN_VALUES, options.align), `invalid align: ${options.align}`);
    if (!options.noValueAlign) {
      options.noValueAlign = options.align;
    }
    assert && assert(_.includes(ALIGN_VALUES, options.noValueAlign), `invalid noValueAlign: ${options.noValueAlign}`);
    assert && assert(options.textOptions, 'did you accidentally set textOptions to null?');

    // Support numbered (old-style) placeholder by replacing it with the corresponding named placeholder.
    // See https://github.com/phetsims/scenery-phet/issues/446
    const replaceValuePatternValue = valuePattern => {
      if (valuePattern.includes(SunConstants.VALUE_NUMBERED_PLACEHOLDER)) {
        return StringUtils.format(valuePattern, SunConstants.VALUE_NAMED_PLACEHOLDER);
      } else {
        return valuePattern;
      }
    };
    const valuePatternProperty = typeof options.valuePattern === 'string' ? new TinyProperty(replaceValuePatternValue(options.valuePattern)) : new DerivedProperty([options.valuePattern], replaceValuePatternValue);
    assert && assert(!!phet.chipper.queryParameters.stringTest || valuePatternProperty.value.includes(SunConstants.VALUE_NAMED_PLACEHOLDER), `missing value placeholder in options.valuePattern: ${valuePatternProperty.value}`);

    // Set default and validate
    if (!options.noValuePattern) {
      // So we don't have duplicated Properties in our DerivedProperty (it's not supported by that)
      options.noValuePattern = new DerivedProperty([valuePatternProperty], x => x);
    }
    const noValuePatternProperty = typeof options.noValuePattern === 'string' ? new TinyProperty(options.noValuePattern) : options.noValuePattern;
    assert && assert(!!phet.chipper.queryParameters.stringTest || noValuePatternProperty.value.includes(SunConstants.VALUE_NAMED_PLACEHOLDER), `missing value placeholder in options.noValuePattern: ${noValuePatternProperty.value}`);

    // determine the widest value
    const minStringProperty = new DerivedProperty([numberFormatterProperty], numberFormatter => {
      return valueToString(displayRange.min, options.noValueString, numberFormatter);
    });
    const maxStringProperty = new DerivedProperty([numberFormatterProperty], numberFormatter => {
      return valueToString(displayRange.max, options.noValueString, numberFormatter);
    });
    const longestStringProperty = new DerivedProperty([valuePatternProperty, minStringProperty, maxStringProperty], (valuePattern, minString, maxString) => {
      return StringUtils.fillIn(valuePattern, {
        value: minString.length > maxString.length ? minString : maxString
      });
    });

    // value
    const Constructor = options.useRichText ? RichText : Text;
    const valueTextTandem = options.tandem.createTandem('valueText');
    const valueStringProperty = new DerivedProperty([numberProperty, noValuePatternProperty, valuePatternProperty, numberFormatterProperty], (value, noValuePattern, valuePatternValue, numberFormatter) => {
      const valuePattern = value === null && noValuePattern ? noValuePattern : valuePatternValue;
      // NOTE: this.numberFormatter could change, so we support a recomputeText() below that recomputes this derivation
      const stringValue = valueToString(value, options.noValueString, numberFormatter);
      return StringUtils.fillIn(valuePattern, {
        value: stringValue
      });
    }, {
      tandem: valueTextTandem.createTandem(Text.STRING_PROPERTY_TANDEM_NAME),
      phetioValueType: StringIO
    });
    const valueTextOptions = combineOptions({}, options.textOptions, {
      maxWidth: null // we are handling maxWidth manually, so we don't want to provide it initially.
    });

    const valueText = new Constructor(valueStringProperty, combineOptions({
      tandem: valueTextTandem
    }, valueTextOptions));
    const originalTextHeight = valueText.height;

    // background rectangle
    const backgroundNode = new Rectangle({
      cornerRadius: options.cornerRadius,
      fill: options.backgroundFill,
      stroke: options.backgroundStroke,
      lineWidth: options.backgroundLineWidth,
      lineDash: options.backgroundLineDash
    });

    // Manually set maxWidth later, adjusting it to the width of the longest string if it's null
    longestStringProperty.link(longestString => {
      const demoText = new Constructor(longestString, _.omit(valueTextOptions, 'tandem'));
      valueText.maxWidth = options.textOptions.maxWidth !== null ? options.textOptions.maxWidth : demoText.width !== 0 ? demoText.width : null;
      demoText.maxWidth = valueText.maxWidth;
      backgroundNode.rectWidth = Math.max(options.minBackgroundWidth, demoText.width + 2 * options.xMargin);
      backgroundNode.rectHeight = (options.useFullHeight ? originalTextHeight : demoText.height) + 2 * options.yMargin;
    });
    options.children = [backgroundNode, valueText];
    super();
    this.numberFormatterProperty = numberFormatterProperty;
    this.valueText = valueText;
    this.backgroundNode = backgroundNode;

    // Align the value in the background.
    ManualConstraint.create(this, [valueText, backgroundNode], (valueTextProxy, backgroundNodeProxy) => {
      // Alignment depends on whether we have a non-null value.
      const align = numberProperty.value === null ? options.noValueAlign : options.align;

      // horizontal alignment
      if (align === 'center') {
        valueTextProxy.centerX = backgroundNodeProxy.centerX;
      } else if (align === 'left') {
        valueTextProxy.left = backgroundNodeProxy.left + options.xMargin;
      } else {
        // right
        valueTextProxy.right = backgroundNodeProxy.right - options.xMargin;
      }

      // vertical alignment
      valueTextProxy.centerY = backgroundNodeProxy.centerY;
    });
    this.mutate(options);
    this.disposeNumberDisplay = () => {
      valueStringProperty.dispose();
      valuePatternProperty.dispose();
    };
  }
  setNumberFormatter(numberFormatter) {
    this.numberFormatterProperty.value = numberFormatter;
  }

  // Redraw the text when something other than the numberProperty changes (such as units, formatter, etc).
  // @deprecated
  recomputeText() {
    // no-op, not needed now
  }
  dispose() {
    this.disposeNumberDisplay();
    super.dispose();
  }

  /**
   * Sets the number text font.
   */
  setNumberFont(font) {
    this.valueText.font = font;
  }
  set numberFont(value) {
    this.setNumberFont(value);
  }

  /**
   * Sets the number text fill.
   */
  setNumberFill(fill) {
    this.valueText.fill = fill;
  }
  set numberFill(value) {
    this.setNumberFill(value);
  }

  /**
   * Sets the background fill.
   */
  setBackgroundFill(fill) {
    this.backgroundNode.fill = fill;
  }
  set backgroundFill(value) {
    this.setBackgroundFill(value);
  }
  get backgroundFill() {
    return this.getBackgroundFill();
  }

  /**
   * Gets the background fill.
   */
  getBackgroundFill() {
    return this.backgroundNode.fill;
  }

  /**
   * Sets the background stroke.
   */
  setBackgroundStroke(stroke) {
    this.backgroundNode.stroke = stroke;
  }
  set backgroundStroke(value) {
    this.setBackgroundStroke(value);
  }

  /**
   * Get the width of the background.
   */
  getBackgroundWidth() {
    return this.backgroundNode.getRectWidth();
  }

  /**
   * Set the width of the background node.
   */
  setBackgroundWidth(width) {
    this.backgroundNode.setRectWidth(width);
  }
  get backgroundWidth() {
    return this.getBackgroundWidth();
  }
  set backgroundWidth(width) {
    this.setBackgroundWidth(width);
  }
  static NumberDisplayIO = new IOType('NumberDisplayIO', {
    valueType: NumberDisplay,
    supertype: Node.NodeIO,
    documentation: 'A numeric readout with a background'
  });
}
sceneryPhet.register('NumberDisplay', NumberDisplay);

/**
 * Converts a numeric value to a string.
 * @param value
 * @param decimalPlaces - if null, use the full value
 * @param noValueString
 * @param numberFormatter - if provided, function that converts {number} => {string}
 */
const valueToString = (value, noValueString, numberFormatter) => {
  let stringValue = noValueString;
  if (value !== null) {
    stringValue = numberFormatter(value);
  }
  return stringValue;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,