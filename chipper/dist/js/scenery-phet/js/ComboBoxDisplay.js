// Copyright 2019-2023, University of Colorado Boulder

/**
 * ComboBoxDisplay is the lovechild of a ComboBox and a NumberDisplay. It allows the user to choose one of N dynamic
 * numeric values. ComboBox was designed to display static choices, so this component ensures that none of its items
 * grow wider/taller than their initial size.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import ComboBox from '../../sun/js/ComboBox.js';
import NumberDisplay from './NumberDisplay.js';
import PhetFont from './PhetFont.js';
import sceneryPhet from './sceneryPhet.js';
import SceneryPhetStrings from './SceneryPhetStrings.js';
import StringProperty from '../../axon/js/StringProperty.js';
import PatternStringProperty from '../../axon/js/PatternStringProperty.js';

// constants
const DEFAULT_FONT = new PhetFont(14);

// Describes an item in the ComboBoxDisplay

export default class ComboBoxDisplay extends ComboBox {
  /**
   * @param choiceProperty - determines which item is currently selected
   * @param items - describes the items that appear in the ComboBox
   * @param listParent - parent for the ComboBox list
   * @param providedOptions?
   */
  constructor(choiceProperty, items, listParent, providedOptions) {
    const options = optionize()({
      // SelfOptions
      numberDisplayOptions: {
        backgroundFill: null,
        backgroundStroke: null,
        textOptions: {
          font: DEFAULT_FONT
        },
        align: 'right',
        xMargin: 0,
        yMargin: 0
      },
      // ComboBoxOptions
      align: 'right' // we typically want numbers to be right aligned
    }, providedOptions);

    // Convert ComboBoxDisplayItems to ComboBoxItems
    const comboBoxItems = [];
    const valuePatternStringProperties = [];
    items.forEach(item => {
      const unitsProperty = typeof item.units === 'string' ? new StringProperty(item.units) : item.units;
      const valuePatternStringProperty = new PatternStringProperty(SceneryPhetStrings.comboBoxDisplay.valueUnitsStringProperty, {
        units: unitsProperty
      });
      valuePatternStringProperties.push(valuePatternStringProperty);
      const itemNode = new NumberDisplay(item.numberProperty, item.range, combineOptions({
        valuePattern: valuePatternStringProperty
      }, options.numberDisplayOptions, item.numberDisplayOptions));

      // Don't allow the NumberDisplay to grow, since it's in a ComboBox
      itemNode.maxWidth = itemNode.width;
      itemNode.maxHeight = itemNode.height;
      comboBoxItems.push({
        value: item.choice,
        createNode: () => itemNode,
        tandemName: item.tandemName
      });
    });
    super(choiceProperty, comboBoxItems, listParent, options);
    this.disposeComboBoxDisplay = () => {
      valuePatternStringProperties.forEach(property => property.dispose());
    };
  }
  dispose() {
    this.disposeComboBoxDisplay();
    super.dispose();
  }
}
sceneryPhet.register('ComboBoxDisplay', ComboBoxDisplay);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkNvbWJvQm94IiwiTnVtYmVyRGlzcGxheSIsIlBoZXRGb250Iiwic2NlbmVyeVBoZXQiLCJTY2VuZXJ5UGhldFN0cmluZ3MiLCJTdHJpbmdQcm9wZXJ0eSIsIlBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsIkRFRkFVTFRfRk9OVCIsIkNvbWJvQm94RGlzcGxheSIsImNvbnN0cnVjdG9yIiwiY2hvaWNlUHJvcGVydHkiLCJpdGVtcyIsImxpc3RQYXJlbnQiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJiYWNrZ3JvdW5kRmlsbCIsImJhY2tncm91bmRTdHJva2UiLCJ0ZXh0T3B0aW9ucyIsImZvbnQiLCJhbGlnbiIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiY29tYm9Cb3hJdGVtcyIsInZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnRpZXMiLCJmb3JFYWNoIiwiaXRlbSIsInVuaXRzUHJvcGVydHkiLCJ1bml0cyIsInZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwiY29tYm9Cb3hEaXNwbGF5IiwidmFsdWVVbml0c1N0cmluZ1Byb3BlcnR5IiwicHVzaCIsIml0ZW1Ob2RlIiwibnVtYmVyUHJvcGVydHkiLCJyYW5nZSIsInZhbHVlUGF0dGVybiIsIm1heFdpZHRoIiwid2lkdGgiLCJtYXhIZWlnaHQiLCJoZWlnaHQiLCJ2YWx1ZSIsImNob2ljZSIsImNyZWF0ZU5vZGUiLCJ0YW5kZW1OYW1lIiwiZGlzcG9zZUNvbWJvQm94RGlzcGxheSIsInByb3BlcnR5IiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29tYm9Cb3hEaXNwbGF5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbWJvQm94RGlzcGxheSBpcyB0aGUgbG92ZWNoaWxkIG9mIGEgQ29tYm9Cb3ggYW5kIGEgTnVtYmVyRGlzcGxheS4gSXQgYWxsb3dzIHRoZSB1c2VyIHRvIGNob29zZSBvbmUgb2YgTiBkeW5hbWljXHJcbiAqIG51bWVyaWMgdmFsdWVzLiBDb21ib0JveCB3YXMgZGVzaWduZWQgdG8gZGlzcGxheSBzdGF0aWMgY2hvaWNlcywgc28gdGhpcyBjb21wb25lbnQgZW5zdXJlcyB0aGF0IG5vbmUgb2YgaXRzIGl0ZW1zXHJcbiAqIGdyb3cgd2lkZXIvdGFsbGVyIHRoYW4gdGhlaXIgaW5pdGlhbCBzaXplLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDb21ib0JveCwgeyBDb21ib0JveEl0ZW0sIENvbWJvQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uL3N1bi9qcy9Db21ib0JveC5qcyc7XHJcbmltcG9ydCBOdW1iZXJEaXNwbGF5LCB7IE51bWJlckRpc3BsYXlPcHRpb25zIH0gZnJvbSAnLi9OdW1iZXJEaXNwbGF5LmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4vUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCBTY2VuZXJ5UGhldFN0cmluZ3MgZnJvbSAnLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvU3RyaW5nUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUGF0dGVyblN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvUGF0dGVyblN0cmluZ1Byb3BlcnR5LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUZBVUxUX0ZPTlQgPSBuZXcgUGhldEZvbnQoIDE0ICk7XHJcblxyXG50eXBlIFN1YnNldE9mTnVtYmVyRGlzcGxheU9wdGlvbnMgPSBTdHJpY3RPbWl0PE51bWJlckRpc3BsYXlPcHRpb25zLCAndmFsdWVQYXR0ZXJuJz47XHJcblxyXG4vLyBEZXNjcmliZXMgYW4gaXRlbSBpbiB0aGUgQ29tYm9Cb3hEaXNwbGF5XHJcbmV4cG9ydCB0eXBlIENvbWJvQm94RGlzcGxheUl0ZW08VD4gPSB7XHJcblxyXG4gIC8vIGEgdmFsdWUgb2YgY2hvaWNlUHJvcGVydHkgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgaXRlbVxyXG4gIGNob2ljZTogVDtcclxuXHJcbiAgLy8gdGhlIGl0ZW0ncyBudW1lcmljIHZhbHVlXHJcbiAgbnVtYmVyUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlciB8IG51bGw+O1xyXG5cclxuICAvLyB0aGUgcmFuZ2Ugb2YgdGhlIGl0ZW0ncyBudW1lcmljIHZhbHVlXHJcbiAgcmFuZ2U6IFJhbmdlO1xyXG5cclxuICAvLyB0aGUgdW5pdHMgdXNlZCB0byBsYWJlbCB0aGUgaXRlbSdzIG51bWVyaWMgdmFsdWVcclxuICB1bml0czogc3RyaW5nIHwgVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPjtcclxuXHJcbiAgLy8gb3B0aW9ucyBwYXNzZWQgdG8gdGhpcyBpdGVtJ3MgTnVtYmVyRGlzcGxheSwgdGhlc2Ugb3ZlcnJpZGUgQ29tYm9Cb3hEaXNwbGF5T3B0aW9ucy5udW1iZXJEaXNwbGF5T3B0aW9uc1xyXG4gIG51bWJlckRpc3BsYXlPcHRpb25zPzogU3Vic2V0T2ZOdW1iZXJEaXNwbGF5T3B0aW9ucztcclxuXHJcbiAgLy8gdGFuZGVtIG5hbWUgZm9yIHRoZSBpdGVtXHJcbiAgdGFuZGVtTmFtZT86IHN0cmluZztcclxufTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIHByb3BhZ2F0ZWQgdG8gYWxsIE51bWJlckRpc3BsYXkgc3ViY29tcG9uZW50cywgd2lsbCBiZSBvdmVycmlkZGVuIGJ5IENvbWJvQm94RGlzcGxheUl0ZW0ubnVtYmVyRGlzcGxheU9wdGlvbnNcclxuICBudW1iZXJEaXNwbGF5T3B0aW9ucz86IFN1YnNldE9mTnVtYmVyRGlzcGxheU9wdGlvbnM7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBDb21ib0JveERpc3BsYXlPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBDb21ib0JveE9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21ib0JveERpc3BsYXk8VD4gZXh0ZW5kcyBDb21ib0JveDxUPiB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUNvbWJvQm94RGlzcGxheTogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGNob2ljZVByb3BlcnR5IC0gZGV0ZXJtaW5lcyB3aGljaCBpdGVtIGlzIGN1cnJlbnRseSBzZWxlY3RlZFxyXG4gICAqIEBwYXJhbSBpdGVtcyAtIGRlc2NyaWJlcyB0aGUgaXRlbXMgdGhhdCBhcHBlYXIgaW4gdGhlIENvbWJvQm94XHJcbiAgICogQHBhcmFtIGxpc3RQYXJlbnQgLSBwYXJlbnQgZm9yIHRoZSBDb21ib0JveCBsaXN0XHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9ucz9cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNob2ljZVByb3BlcnR5OiBQcm9wZXJ0eTxUPiwgaXRlbXM6IENvbWJvQm94RGlzcGxheUl0ZW08VD5bXSwgbGlzdFBhcmVudDogTm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IENvbWJvQm94RGlzcGxheU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxDb21ib0JveERpc3BsYXlPcHRpb25zLCBTZWxmT3B0aW9ucywgQ29tYm9Cb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgIGJhY2tncm91bmRGaWxsOiBudWxsLFxyXG4gICAgICAgIGJhY2tncm91bmRTdHJva2U6IG51bGwsXHJcbiAgICAgICAgdGV4dE9wdGlvbnM6IHtcclxuICAgICAgICAgIGZvbnQ6IERFRkFVTFRfRk9OVFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWxpZ246ICdyaWdodCcsXHJcbiAgICAgICAgeE1hcmdpbjogMCxcclxuICAgICAgICB5TWFyZ2luOiAwXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBDb21ib0JveE9wdGlvbnNcclxuICAgICAgYWxpZ246ICdyaWdodCcgLy8gd2UgdHlwaWNhbGx5IHdhbnQgbnVtYmVycyB0byBiZSByaWdodCBhbGlnbmVkXHJcblxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gQ29udmVydCBDb21ib0JveERpc3BsYXlJdGVtcyB0byBDb21ib0JveEl0ZW1zXHJcbiAgICBjb25zdCBjb21ib0JveEl0ZW1zOiBDb21ib0JveEl0ZW08VD5bXSA9IFtdO1xyXG4gICAgY29uc3QgdmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydGllczogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPltdID0gW107XHJcbiAgICBpdGVtcy5mb3JFYWNoKCBpdGVtID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IHVuaXRzUHJvcGVydHkgPSAoIHR5cGVvZiBpdGVtLnVuaXRzID09PSAnc3RyaW5nJyApID8gbmV3IFN0cmluZ1Byb3BlcnR5KCBpdGVtLnVuaXRzICkgOiBpdGVtLnVuaXRzO1xyXG4gICAgICBjb25zdCB2YWx1ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSA9IG5ldyBQYXR0ZXJuU3RyaW5nUHJvcGVydHkoIFNjZW5lcnlQaGV0U3RyaW5ncy5jb21ib0JveERpc3BsYXkudmFsdWVVbml0c1N0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgdW5pdHM6IHVuaXRzUHJvcGVydHlcclxuICAgICAgfSApO1xyXG4gICAgICB2YWx1ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0aWVzLnB1c2goIHZhbHVlUGF0dGVyblN0cmluZ1Byb3BlcnR5ICk7XHJcblxyXG4gICAgICBjb25zdCBpdGVtTm9kZSA9IG5ldyBOdW1iZXJEaXNwbGF5KCBpdGVtLm51bWJlclByb3BlcnR5LCBpdGVtLnJhbmdlLFxyXG4gICAgICAgIGNvbWJpbmVPcHRpb25zPE51bWJlckRpc3BsYXlPcHRpb25zPigge1xyXG4gICAgICAgICAgdmFsdWVQYXR0ZXJuOiB2YWx1ZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eVxyXG4gICAgICAgIH0sIG9wdGlvbnMubnVtYmVyRGlzcGxheU9wdGlvbnMsIGl0ZW0ubnVtYmVyRGlzcGxheU9wdGlvbnMgKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gRG9uJ3QgYWxsb3cgdGhlIE51bWJlckRpc3BsYXkgdG8gZ3Jvdywgc2luY2UgaXQncyBpbiBhIENvbWJvQm94XHJcbiAgICAgIGl0ZW1Ob2RlLm1heFdpZHRoID0gaXRlbU5vZGUud2lkdGg7XHJcbiAgICAgIGl0ZW1Ob2RlLm1heEhlaWdodCA9IGl0ZW1Ob2RlLmhlaWdodDtcclxuXHJcbiAgICAgIGNvbWJvQm94SXRlbXMucHVzaCgge1xyXG4gICAgICAgIHZhbHVlOiBpdGVtLmNob2ljZSxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBpdGVtTm9kZSxcclxuICAgICAgICB0YW5kZW1OYW1lOiBpdGVtLnRhbmRlbU5hbWVcclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBjaG9pY2VQcm9wZXJ0eSwgY29tYm9Cb3hJdGVtcywgbGlzdFBhcmVudCwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZUNvbWJvQm94RGlzcGxheSA9ICgpID0+IHtcclxuICAgICAgdmFsdWVQYXR0ZXJuU3RyaW5nUHJvcGVydGllcy5mb3JFYWNoKCBwcm9wZXJ0eSA9PiBwcm9wZXJ0eS5kaXNwb3NlKCkgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUNvbWJvQm94RGlzcGxheSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdDb21ib0JveERpc3BsYXknLCBDb21ib0JveERpc3BsYXkgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLFNBQVMsSUFBSUMsY0FBYyxRQUFRLGlDQUFpQztBQUUzRSxPQUFPQyxRQUFRLE1BQXlDLDBCQUEwQjtBQUNsRixPQUFPQyxhQUFhLE1BQWdDLG9CQUFvQjtBQUN4RSxPQUFPQyxRQUFRLE1BQU0sZUFBZTtBQUNwQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLGtCQUFrQixNQUFNLHlCQUF5QjtBQUd4RCxPQUFPQyxjQUFjLE1BQU0saUNBQWlDO0FBQzVELE9BQU9DLHFCQUFxQixNQUFNLHdDQUF3Qzs7QUFFMUU7QUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBSUwsUUFBUSxDQUFFLEVBQUcsQ0FBQzs7QUFJdkM7O0FBOEJBLGVBQWUsTUFBTU0sZUFBZSxTQUFZUixRQUFRLENBQUk7RUFJMUQ7QUFDRjtBQUNBO0FBQ0E7QUFD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