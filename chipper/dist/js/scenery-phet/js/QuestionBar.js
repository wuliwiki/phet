// Copyright 2022, University of Colorado Boulder

/**
 * In every screen, the question bar at the top provides a framing question and context.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import sceneryPhet from './sceneryPhet.js';
import StatusBar from '../../scenery-phet/js/StatusBar.js';
import { Text } from '../../scenery/js/imports.js';
import PhetFont from '../../scenery-phet/js/PhetFont.js';
import Tandem from '../../tandem/js/Tandem.js';
import Multilink from '../../axon/js/Multilink.js';
const QUESTION_TEXT_MARGIN = 30;
export default class QuestionBar extends StatusBar {
  constructor(layoutBounds, visibleBoundsProperty, providedOptions) {
    const options = optionize()({
      floatToTop: true,
      barHeight: 70,
      tandem: Tandem.OPTIONAL
    }, providedOptions);
    super(layoutBounds, visibleBoundsProperty, options);
    const questionText = new Text(options.questionString, {
      font: new PhetFont({
        weight: 'bold',
        size: '23px'
      }),
      maxWidth: layoutBounds.width - QUESTION_TEXT_MARGIN * 2,
      tandem: options.tandem.createTandem('questionText')
    });
    this.addChild(questionText);
    Multilink.multilink([questionText.localBoundsProperty, this.positioningBoundsProperty], (localBounds, positioningBounds) => {
      questionText.centerY = positioningBounds.centerY;
      questionText.left = QUESTION_TEXT_MARGIN;
    });
    this.disposeQuestionBar = () => {
      questionText.dispose(); // may be linked to a string Property
    };
  }

  dispose() {
    this.disposeQuestionBar();
    super.dispose();
  }
}
sceneryPhet.register('QuestionBar', QuestionBar);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIlN0YXR1c0JhciIsIlRleHQiLCJQaGV0Rm9udCIsIlRhbmRlbSIsIk11bHRpbGluayIsIlFVRVNUSU9OX1RFWFRfTUFSR0lOIiwiUXVlc3Rpb25CYXIiLCJjb25zdHJ1Y3RvciIsImxheW91dEJvdW5kcyIsInZpc2libGVCb3VuZHNQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJmbG9hdFRvVG9wIiwiYmFySGVpZ2h0IiwidGFuZGVtIiwiT1BUSU9OQUwiLCJxdWVzdGlvblRleHQiLCJxdWVzdGlvblN0cmluZyIsImZvbnQiLCJ3ZWlnaHQiLCJzaXplIiwibWF4V2lkdGgiLCJ3aWR0aCIsImNyZWF0ZVRhbmRlbSIsImFkZENoaWxkIiwibXVsdGlsaW5rIiwibG9jYWxCb3VuZHNQcm9wZXJ0eSIsInBvc2l0aW9uaW5nQm91bmRzUHJvcGVydHkiLCJsb2NhbEJvdW5kcyIsInBvc2l0aW9uaW5nQm91bmRzIiwiY2VudGVyWSIsImxlZnQiLCJkaXNwb3NlUXVlc3Rpb25CYXIiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJRdWVzdGlvbkJhci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSW4gZXZlcnkgc2NyZWVuLCB0aGUgcXVlc3Rpb24gYmFyIGF0IHRoZSB0b3AgcHJvdmlkZXMgYSBmcmFtaW5nIHF1ZXN0aW9uIGFuZCBjb250ZXh0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCBTdGF0dXNCYXIsIHsgU3RhdHVzQmFyT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9TdGF0dXNCYXIuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcXVlc3Rpb25TdHJpbmc6IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XHJcbn07XHJcbmV4cG9ydCB0eXBlIFF1ZXN0aW9uQmFyT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxTdGF0dXNCYXJPcHRpb25zLCAnZmxvYXRUb1RvcCc+O1xyXG5cclxuY29uc3QgUVVFU1RJT05fVEVYVF9NQVJHSU4gPSAzMDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFF1ZXN0aW9uQmFyIGV4dGVuZHMgU3RhdHVzQmFyIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlUXVlc3Rpb25CYXI6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbGF5b3V0Qm91bmRzOiBCb3VuZHMyLCB2aXNpYmxlQm91bmRzUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PEJvdW5kczI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogUXVlc3Rpb25CYXJPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UXVlc3Rpb25CYXJPcHRpb25zLCBTZWxmT3B0aW9ucywgU3RhdHVzQmFyT3B0aW9ucz4oKSgge1xyXG4gICAgICBmbG9hdFRvVG9wOiB0cnVlLFxyXG4gICAgICBiYXJIZWlnaHQ6IDcwLFxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRJT05BTFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGxheW91dEJvdW5kcywgdmlzaWJsZUJvdW5kc1Byb3BlcnR5LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgcXVlc3Rpb25UZXh0ID0gbmV3IFRleHQoIG9wdGlvbnMucXVlc3Rpb25TdHJpbmcsIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCB7XHJcbiAgICAgICAgd2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgICAgc2l6ZTogJzIzcHgnXHJcbiAgICAgIH0gKSxcclxuICAgICAgbWF4V2lkdGg6IGxheW91dEJvdW5kcy53aWR0aCAtIFFVRVNUSU9OX1RFWFRfTUFSR0lOICogMixcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdxdWVzdGlvblRleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBxdWVzdGlvblRleHQgKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHF1ZXN0aW9uVGV4dC5sb2NhbEJvdW5kc1Byb3BlcnR5LCB0aGlzLnBvc2l0aW9uaW5nQm91bmRzUHJvcGVydHkgXSwgKCBsb2NhbEJvdW5kcywgcG9zaXRpb25pbmdCb3VuZHMgKSA9PiB7XHJcbiAgICAgIHF1ZXN0aW9uVGV4dC5jZW50ZXJZID0gcG9zaXRpb25pbmdCb3VuZHMuY2VudGVyWTtcclxuICAgICAgcXVlc3Rpb25UZXh0LmxlZnQgPSBRVUVTVElPTl9URVhUX01BUkdJTjtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VRdWVzdGlvbkJhciA9ICgpID0+IHtcclxuICAgICAgcXVlc3Rpb25UZXh0LmRpc3Bvc2UoKTsgLy8gbWF5IGJlIGxpbmtlZCB0byBhIHN0cmluZyBQcm9wZXJ0eVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlUXVlc3Rpb25CYXIoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnUXVlc3Rpb25CYXInLCBRdWVzdGlvbkJhciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFFdkQsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQTRCLG9DQUFvQztBQUNoRixTQUFTQyxJQUFJLFFBQVEsNkJBQTZCO0FBRWxELE9BQU9DLFFBQVEsTUFBTSxtQ0FBbUM7QUFDeEQsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUU5QyxPQUFPQyxTQUFTLE1BQU0sNEJBQTRCO0FBT2xELE1BQU1DLG9CQUFvQixHQUFHLEVBQUU7QUFFL0IsZUFBZSxNQUFNQyxXQUFXLFNBQVNOLFNBQVMsQ0FBQztFQUkxQ08sV0FBV0EsQ0FBRUMsWUFBcUIsRUFBRUMscUJBQWlELEVBQ3hFQyxlQUFvQyxFQUFHO0lBRXpELE1BQU1DLE9BQU8sR0FBR2IsU0FBUyxDQUFvRCxDQUFDLENBQUU7TUFDOUVjLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxTQUFTLEVBQUUsRUFBRTtNQUNiQyxNQUFNLEVBQUVYLE1BQU0sQ0FBQ1k7SUFDakIsQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUYsWUFBWSxFQUFFQyxxQkFBcUIsRUFBRUUsT0FBUSxDQUFDO0lBRXJELE1BQU1LLFlBQVksR0FBRyxJQUFJZixJQUFJLENBQUVVLE9BQU8sQ0FBQ00sY0FBYyxFQUFFO01BQ3JEQyxJQUFJLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRTtRQUNsQmlCLE1BQU0sRUFBRSxNQUFNO1FBQ2RDLElBQUksRUFBRTtNQUNSLENBQUUsQ0FBQztNQUNIQyxRQUFRLEVBQUViLFlBQVksQ0FBQ2MsS0FBSyxHQUFHakIsb0JBQW9CLEdBQUcsQ0FBQztNQUN2RFMsTUFBTSxFQUFFSCxPQUFPLENBQUNHLE1BQU0sQ0FBQ1MsWUFBWSxDQUFFLGNBQWU7SUFDdEQsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxRQUFRLENBQUVSLFlBQWEsQ0FBQztJQUU3QlosU0FBUyxDQUFDcUIsU0FBUyxDQUFFLENBQUVULFlBQVksQ0FBQ1UsbUJBQW1CLEVBQUUsSUFBSSxDQUFDQyx5QkFBeUIsQ0FBRSxFQUFFLENBQUVDLFdBQVcsRUFBRUMsaUJBQWlCLEtBQU07TUFDL0hiLFlBQVksQ0FBQ2MsT0FBTyxHQUFHRCxpQkFBaUIsQ0FBQ0MsT0FBTztNQUNoRGQsWUFBWSxDQUFDZSxJQUFJLEdBQUcxQixvQkFBb0I7SUFDMUMsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDMkIsa0JBQWtCLEdBQUcsTUFBTTtNQUM5QmhCLFlBQVksQ0FBQ2lCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0VBQ0g7O0VBRWdCQSxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDRCxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBbEMsV0FBVyxDQUFDbUMsUUFBUSxDQUFFLGFBQWEsRUFBRTVCLFdBQVksQ0FBQyJ9