// Copyright 2019-2023, University of Colorado Boulder

/**
 * Stopwatch is the model for the stopwatch. It is responsible for time, position, and visibility.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../axon/js/BooleanProperty.js';
import NumberProperty from '../../axon/js/NumberProperty.js';
import Vector2 from '../../dot/js/Vector2.js';
import Range from '../../dot/js/Range.js';
import Vector2Property from '../../dot/js/Vector2Property.js';
import PhetioObject from '../../tandem/js/PhetioObject.js';
import Tandem from '../../tandem/js/Tandem.js';
import IOType from '../../tandem/js/types/IOType.js';
import ReferenceIO from '../../tandem/js/types/ReferenceIO.js';
import sceneryPhet from './sceneryPhet.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
const DEFAULT_TIME_RANGE = new Range(0, Number.POSITIVE_INFINITY);
export default class Stopwatch extends PhetioObject {
  // position of the stopwatch, in view coordinates

  // whether the stopwatch is visible

  // whether the stopwatch is running

  // time displayed on the stopwatch, in units as specified by the client

  static ZERO_TO_ALMOST_SIXTY = new Range(0, 3599.99); // works out to be 59:59.99

  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      position: Vector2.ZERO,
      isVisible: false,
      timePropertyOptions: {
        range: DEFAULT_TIME_RANGE,
        // When time reaches range.max, the Stopwatch automatically pauses.
        units: 's',
        isValidValue: value => value >= 0,
        phetioReadOnly: true,
        phetioHighFrequency: true
      },
      // PhetioObjectOptions
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Stopwatch',
      phetioType: ReferenceIO(IOType.ObjectIO),
      phetioState: false
    }, providedOptions);
    super(options);
    this.positionProperty = new Vector2Property(options.position, {
      tandem: options.tandem.createTandem('positionProperty'),
      phetioDocumentation: `view coordinates for the upper-left of the stopwatch (initially ${options.position.x},${options.position.y})`
    });
    this.isVisibleProperty = new BooleanProperty(options.isVisible, {
      tandem: options.tandem.createTandem('isVisibleProperty')
    });
    this.isRunningProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('isRunningProperty')
    });
    this.timeProperty = new NumberProperty(0, combineOptions({
      tandem: options.tandem.createTandem('timeProperty')
    }, options.timePropertyOptions));

    // When the stopwatch visibility changes, stop it and reset its value.
    const visibilityListener = () => {
      const joistGlobal = _.get(window, 'phet.joist', null); // returns null if global isn't found

      if (!joistGlobal || !joistGlobal.sim.isSettingPhetioStateProperty.value) {
        this.isRunningProperty.value = false;
        this.timeProperty.value = 0;
      }
    };
    this.isVisibleProperty.link(visibilityListener);
    this.disposeStopwatch = () => {
      this.isVisibleProperty.unlink(visibilityListener);
      this.positionProperty.dispose();
      this.isVisibleProperty.dispose();
      this.isRunningProperty.dispose();
      this.timeProperty.dispose();
    };
  }
  dispose() {
    this.disposeStopwatch();
    super.dispose();
  }
  reset() {
    this.positionProperty.reset();
    this.isVisibleProperty.reset();
    this.isRunningProperty.reset();
    this.timeProperty.reset();
  }

  /**
   * Steps the stopwatch.
   * @param dt - time delta, in units as specified by the client
   */
  step(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);
    if (this.isRunningProperty.value) {
      // Increment time, but don't exceed the range.
      this.timeProperty.value = this.timeProperty.range.constrainValue(this.timeProperty.value + dt);

      // If the max is reached, then pause.
      if (this.timeProperty.value >= this.timeProperty.range.max) {
        this.isRunningProperty.value = false;
      }
    }
  }
}
sceneryPhet.register('Stopwatch', Stopwatch);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJSYW5nZSIsIlZlY3RvcjJQcm9wZXJ0eSIsIlBoZXRpb09iamVjdCIsIlRhbmRlbSIsIklPVHlwZSIsIlJlZmVyZW5jZUlPIiwic2NlbmVyeVBoZXQiLCJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkRFRkFVTFRfVElNRV9SQU5HRSIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwiU3RvcHdhdGNoIiwiWkVST19UT19BTE1PU1RfU0lYVFkiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJwb3NpdGlvbiIsIlpFUk8iLCJpc1Zpc2libGUiLCJ0aW1lUHJvcGVydHlPcHRpb25zIiwicmFuZ2UiLCJ1bml0cyIsImlzVmFsaWRWYWx1ZSIsInZhbHVlIiwicGhldGlvUmVhZE9ubHkiLCJwaGV0aW9IaWdoRnJlcXVlbmN5IiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwicGhldGlvVHlwZSIsIk9iamVjdElPIiwicGhldGlvU3RhdGUiLCJwb3NpdGlvblByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsIngiLCJ5IiwiaXNWaXNpYmxlUHJvcGVydHkiLCJpc1J1bm5pbmdQcm9wZXJ0eSIsInRpbWVQcm9wZXJ0eSIsInZpc2liaWxpdHlMaXN0ZW5lciIsImpvaXN0R2xvYmFsIiwiXyIsImdldCIsIndpbmRvdyIsInNpbSIsImlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHkiLCJsaW5rIiwiZGlzcG9zZVN0b3B3YXRjaCIsInVubGluayIsImRpc3Bvc2UiLCJyZXNldCIsInN0ZXAiLCJkdCIsImFzc2VydCIsImNvbnN0cmFpblZhbHVlIiwibWF4IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdG9wd2F0Y2gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3RvcHdhdGNoIGlzIHRoZSBtb2RlbCBmb3IgdGhlIHN0b3B3YXRjaC4gSXQgaXMgcmVzcG9uc2libGUgZm9yIHRpbWUsIHBvc2l0aW9uLCBhbmQgdmlzaWJpbGl0eS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHksIHsgTnVtYmVyUHJvcGVydHlPcHRpb25zIH0gZnJvbSAnLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QsIHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4uLy4uL3RhbmRlbS9qcy90eXBlcy9JT1R5cGUuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbmNvbnN0IERFRkFVTFRfVElNRV9SQU5HRSA9IG5ldyBSYW5nZSggMCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZICk7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHBvc2l0aW9uPzogVmVjdG9yMjtcclxuICBpc1Zpc2libGU/OiBib29sZWFuO1xyXG4gIHRpbWVQcm9wZXJ0eU9wdGlvbnM/OiBTdHJpY3RPbWl0PE51bWJlclByb3BlcnR5T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU3RvcHdhdGNoT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGhldGlvT2JqZWN0T3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3B3YXRjaCBleHRlbmRzIFBoZXRpb09iamVjdCB7XHJcblxyXG4gIC8vIHBvc2l0aW9uIG9mIHRoZSBzdG9wd2F0Y2gsIGluIHZpZXcgY29vcmRpbmF0ZXNcclxuICBwdWJsaWMgcmVhZG9ubHkgcG9zaXRpb25Qcm9wZXJ0eTogUHJvcGVydHk8VmVjdG9yMj47XHJcblxyXG4gIC8vIHdoZXRoZXIgdGhlIHN0b3B3YXRjaCBpcyB2aXNpYmxlXHJcbiAgcHVibGljIHJlYWRvbmx5IGlzVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgLy8gd2hldGhlciB0aGUgc3RvcHdhdGNoIGlzIHJ1bm5pbmdcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNSdW5uaW5nUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyB0aW1lIGRpc3BsYXllZCBvbiB0aGUgc3RvcHdhdGNoLCBpbiB1bml0cyBhcyBzcGVjaWZpZWQgYnkgdGhlIGNsaWVudFxyXG4gIHB1YmxpYyByZWFkb25seSB0aW1lUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VTdG9wd2F0Y2g6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgWkVST19UT19BTE1PU1RfU0lYVFkgPSBuZXcgUmFuZ2UoIDAsIDM1OTkuOTkgKTsgLy8gd29ya3Mgb3V0IHRvIGJlIDU5OjU5Ljk5XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogU3RvcHdhdGNoT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFN0b3B3YXRjaE9wdGlvbnMsIFNlbGZPcHRpb25zLCBQaGV0aW9PYmplY3RPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBwb3NpdGlvbjogVmVjdG9yMi5aRVJPLFxyXG4gICAgICBpc1Zpc2libGU6IGZhbHNlLFxyXG4gICAgICB0aW1lUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgcmFuZ2U6IERFRkFVTFRfVElNRV9SQU5HRSwgLy8gV2hlbiB0aW1lIHJlYWNoZXMgcmFuZ2UubWF4LCB0aGUgU3RvcHdhdGNoIGF1dG9tYXRpY2FsbHkgcGF1c2VzLlxyXG4gICAgICAgIHVuaXRzOiAncycsXHJcbiAgICAgICAgaXNWYWxpZFZhbHVlOiAoIHZhbHVlOiBudW1iZXIgKSA9PiB2YWx1ZSA+PSAwLFxyXG4gICAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgIHBoZXRpb0hpZ2hGcmVxdWVuY3k6IHRydWVcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIFBoZXRpb09iamVjdE9wdGlvbnNcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHRhbmRlbU5hbWVTdWZmaXg6ICdTdG9wd2F0Y2gnLFxyXG4gICAgICBwaGV0aW9UeXBlOiBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPICksXHJcbiAgICAgIHBoZXRpb1N0YXRlOiBmYWxzZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBvcHRpb25zLnBvc2l0aW9uLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncG9zaXRpb25Qcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogYHZpZXcgY29vcmRpbmF0ZXMgZm9yIHRoZSB1cHBlci1sZWZ0IG9mIHRoZSBzdG9wd2F0Y2ggKGluaXRpYWxseSAke29wdGlvbnMucG9zaXRpb24ueH0sJHtvcHRpb25zLnBvc2l0aW9uLnl9KWBcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmlzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggb3B0aW9ucy5pc1Zpc2libGUsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdpc1Zpc2libGVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuaXNSdW5uaW5nUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2lzUnVubmluZ1Byb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy50aW1lUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAsIGNvbWJpbmVPcHRpb25zPE51bWJlclByb3BlcnR5T3B0aW9ucz4oIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aW1lUHJvcGVydHknIClcclxuICAgIH0sIG9wdGlvbnMudGltZVByb3BlcnR5T3B0aW9ucyApICk7XHJcblxyXG4gICAgLy8gV2hlbiB0aGUgc3RvcHdhdGNoIHZpc2liaWxpdHkgY2hhbmdlcywgc3RvcCBpdCBhbmQgcmVzZXQgaXRzIHZhbHVlLlxyXG4gICAgY29uc3QgdmlzaWJpbGl0eUxpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBqb2lzdEdsb2JhbCA9IF8uZ2V0KCB3aW5kb3csICdwaGV0LmpvaXN0JywgbnVsbCApOyAvLyByZXR1cm5zIG51bGwgaWYgZ2xvYmFsIGlzbid0IGZvdW5kXHJcblxyXG4gICAgICBpZiAoICFqb2lzdEdsb2JhbCB8fCAham9pc3RHbG9iYWwuc2ltLmlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgICAgdGhpcy5pc1J1bm5pbmdQcm9wZXJ0eS52YWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudGltZVByb3BlcnR5LnZhbHVlID0gMDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuaXNWaXNpYmxlUHJvcGVydHkubGluayggdmlzaWJpbGl0eUxpc3RlbmVyICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlU3RvcHdhdGNoID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLmlzVmlzaWJsZVByb3BlcnR5LnVubGluayggdmlzaWJpbGl0eUxpc3RlbmVyICk7XHJcbiAgICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICAgIHRoaXMuaXNWaXNpYmxlUHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gICAgICB0aGlzLmlzUnVubmluZ1Byb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy50aW1lUHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlU3RvcHdhdGNoKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuaXNWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuaXNSdW5uaW5nUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMudGltZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGVwcyB0aGUgc3RvcHdhdGNoLlxyXG4gICAqIEBwYXJhbSBkdCAtIHRpbWUgZGVsdGEsIGluIHVuaXRzIGFzIHNwZWNpZmllZCBieSB0aGUgY2xpZW50XHJcbiAgICovXHJcbiAgcHVibGljIHN0ZXAoIGR0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBkdCA+IDAsIGBpbnZhbGlkIGR0OiAke2R0fWAgKTtcclxuXHJcbiAgICBpZiAoIHRoaXMuaXNSdW5uaW5nUHJvcGVydHkudmFsdWUgKSB7XHJcblxyXG4gICAgICAvLyBJbmNyZW1lbnQgdGltZSwgYnV0IGRvbid0IGV4Y2VlZCB0aGUgcmFuZ2UuXHJcbiAgICAgIHRoaXMudGltZVByb3BlcnR5LnZhbHVlID0gdGhpcy50aW1lUHJvcGVydHkucmFuZ2UuY29uc3RyYWluVmFsdWUoIHRoaXMudGltZVByb3BlcnR5LnZhbHVlICsgZHQgKTtcclxuXHJcbiAgICAgIC8vIElmIHRoZSBtYXggaXMgcmVhY2hlZCwgdGhlbiBwYXVzZS5cclxuICAgICAgaWYgKCB0aGlzLnRpbWVQcm9wZXJ0eS52YWx1ZSA+PSB0aGlzLnRpbWVQcm9wZXJ0eS5yYW5nZS5tYXggKSB7XHJcbiAgICAgICAgdGhpcy5pc1J1bm5pbmdQcm9wZXJ0eS52YWx1ZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1N0b3B3YXRjaCcsIFN0b3B3YXRjaCApOyJdLCJtYXBw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