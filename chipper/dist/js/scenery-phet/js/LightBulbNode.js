// Copyright 2015-2022, University of Colorado Boulder

/**
 * Light bulb, made to 'glow' by modulating opacity of the 'on' image.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../dot/js/Utils.js';
import InstanceRegistry from '../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../phet-core/js/optionize.js';
import { Image, Node } from '../../scenery/js/imports.js';
import lightBulbOff_png from '../mipmaps/lightBulbOff_png.js';
import lightBulbOn_png from '../mipmaps/lightBulbOn_png.js';
import LightRaysNode from './LightRaysNode.js';
import sceneryPhet from './sceneryPhet.js';
export default class LightBulbNode extends Node {
  /**
   * @param brightnessProperty - brightness of the bulb, 0 (off) to 1 (full brightness)
   * @param [providedOptions]
   */
  constructor(brightnessProperty, providedOptions) {
    const options = optionize()({
      bulbImageScale: 0.33
    }, providedOptions);
    const onNode = new Image(lightBulbOn_png, {
      scale: options.bulbImageScale,
      centerX: 0,
      bottom: 0
    });
    const offNode = new Image(lightBulbOff_png, {
      scale: options.bulbImageScale,
      centerX: onNode.centerX,
      bottom: onNode.bottom
    });

    // rays
    const bulbRadius = offNode.width / 2; // use 'off' node, the 'on' node is wider because it has a glow around it.
    const raysNode = new LightRaysNode(bulbRadius, optionize()({
      x: onNode.centerX,
      y: offNode.top + bulbRadius
    }, options.lightRaysNodeOptions));
    options.children = [raysNode, offNode, onNode];
    super(options);
    this.onNode = onNode;
    this.raysNode = raysNode;
    this.brightnessProperty = brightnessProperty;

    // Updates this Node when it becomes visible.
    this.visibleProperty.link(visible => visible && this.update());
    const brightnessObserver = brightness => this.update();
    brightnessProperty.link(brightnessObserver);
    this.disposeLightBulbNode = () => {
      brightnessProperty.unlink(brightnessObserver);
    };

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'LightBulbNode', this);
  }
  dispose() {
    this.disposeLightBulbNode();
    super.dispose();
  }

  /**
   * Updates the bulb. For performance, this is a no-op when the bulb is not visible.
   */
  update() {
    if (this.visible) {
      const brightness = this.brightnessProperty.value;
      assert && assert(brightness >= 0 && brightness <= 1);
      this.onNode.visible = brightness > 0;
      if (this.onNode.visible) {
        this.onNode.opacity = Utils.linear(0, 1, 0.3, 1, brightness);
      }
      this.raysNode.setBrightness(brightness);
    }
  }
}
sceneryPhet.register('LightBulbNode', LightBulbNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIkluc3RhbmNlUmVnaXN0cnkiLCJvcHRpb25pemUiLCJJbWFnZSIsIk5vZGUiLCJsaWdodEJ1bGJPZmZfcG5nIiwibGlnaHRCdWxiT25fcG5nIiwiTGlnaHRSYXlzTm9kZSIsInNjZW5lcnlQaGV0IiwiTGlnaHRCdWxiTm9kZSIsImNvbnN0cnVjdG9yIiwiYnJpZ2h0bmVzc1Byb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImJ1bGJJbWFnZVNjYWxlIiwib25Ob2RlIiwic2NhbGUiLCJjZW50ZXJYIiwiYm90dG9tIiwib2ZmTm9kZSIsImJ1bGJSYWRpdXMiLCJ3aWR0aCIsInJheXNOb2RlIiwieCIsInkiLCJ0b3AiLCJsaWdodFJheXNOb2RlT3B0aW9ucyIsImNoaWxkcmVuIiwidmlzaWJsZVByb3BlcnR5IiwibGluayIsInZpc2libGUiLCJ1cGRhdGUiLCJicmlnaHRuZXNzT2JzZXJ2ZXIiLCJicmlnaHRuZXNzIiwiZGlzcG9zZUxpZ2h0QnVsYk5vZGUiLCJ1bmxpbmsiLCJhc3NlcnQiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsImRpc3Bvc2UiLCJ2YWx1ZSIsIm9wYWNpdHkiLCJsaW5lYXIiLCJzZXRCcmlnaHRuZXNzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMaWdodEJ1bGJOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExpZ2h0IGJ1bGIsIG1hZGUgdG8gJ2dsb3cnIGJ5IG1vZHVsYXRpbmcgb3BhY2l0eSBvZiB0aGUgJ29uJyBpbWFnZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgSW5zdGFuY2VSZWdpc3RyeSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvZG9jdW1lbnRhdGlvbi9JbnN0YW5jZVJlZ2lzdHJ5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHsgSW1hZ2UsIE5vZGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGxpZ2h0QnVsYk9mZl9wbmcgZnJvbSAnLi4vbWlwbWFwcy9saWdodEJ1bGJPZmZfcG5nLmpzJztcclxuaW1wb3J0IGxpZ2h0QnVsYk9uX3BuZyBmcm9tICcuLi9taXBtYXBzL2xpZ2h0QnVsYk9uX3BuZy5qcyc7XHJcbmltcG9ydCBMaWdodFJheXNOb2RlLCB7IExpZ2h0UmF5c05vZGVPcHRpb25zIH0gZnJvbSAnLi9MaWdodFJheXNOb2RlLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBidWxiSW1hZ2VTY2FsZT86IG51bWJlcjtcclxuICBsaWdodFJheXNOb2RlT3B0aW9ucz86IExpZ2h0UmF5c05vZGVPcHRpb25zO1xyXG59O1xyXG5leHBvcnQgdHlwZSBMaWdodEJ1bGJOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWdodEJ1bGJOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgb25Ob2RlOiBOb2RlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmF5c05vZGU6IExpZ2h0UmF5c05vZGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBicmlnaHRuZXNzUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj47XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlTGlnaHRCdWxiTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGJyaWdodG5lc3NQcm9wZXJ0eSAtIGJyaWdodG5lc3Mgb2YgdGhlIGJ1bGIsIDAgKG9mZikgdG8gMSAoZnVsbCBicmlnaHRuZXNzKVxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYnJpZ2h0bmVzc1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LCBwcm92aWRlZE9wdGlvbnM/OiBMaWdodEJ1bGJOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPExpZ2h0QnVsYk5vZGVPcHRpb25zLCBTdHJpY3RPbWl0PFNlbGZPcHRpb25zLCAnbGlnaHRSYXlzTm9kZU9wdGlvbnMnPiwgTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgYnVsYkltYWdlU2NhbGU6IDAuMzNcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IG9uTm9kZSA9IG5ldyBJbWFnZSggbGlnaHRCdWxiT25fcG5nLCB7XHJcbiAgICAgIHNjYWxlOiBvcHRpb25zLmJ1bGJJbWFnZVNjYWxlLFxyXG4gICAgICBjZW50ZXJYOiAwLFxyXG4gICAgICBib3R0b206IDBcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBvZmZOb2RlID0gbmV3IEltYWdlKCBsaWdodEJ1bGJPZmZfcG5nLCB7XHJcbiAgICAgIHNjYWxlOiBvcHRpb25zLmJ1bGJJbWFnZVNjYWxlLFxyXG4gICAgICBjZW50ZXJYOiBvbk5vZGUuY2VudGVyWCxcclxuICAgICAgYm90dG9tOiBvbk5vZGUuYm90dG9tXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gcmF5c1xyXG4gICAgY29uc3QgYnVsYlJhZGl1cyA9IG9mZk5vZGUud2lkdGggLyAyOyAvLyB1c2UgJ29mZicgbm9kZSwgdGhlICdvbicgbm9kZSBpcyB3aWRlciBiZWNhdXNlIGl0IGhhcyBhIGdsb3cgYXJvdW5kIGl0LlxyXG4gICAgY29uc3QgcmF5c05vZGUgPSBuZXcgTGlnaHRSYXlzTm9kZSggYnVsYlJhZGl1cyxcclxuICAgICAgb3B0aW9uaXplPExpZ2h0UmF5c05vZGVPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zLCBMaWdodFJheXNOb2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICAgIHg6IG9uTm9kZS5jZW50ZXJYLFxyXG4gICAgICAgIHk6IG9mZk5vZGUudG9wICsgYnVsYlJhZGl1c1xyXG4gICAgICB9LCBvcHRpb25zLmxpZ2h0UmF5c05vZGVPcHRpb25zICkgKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyByYXlzTm9kZSwgb2ZmTm9kZSwgb25Ob2RlIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLm9uTm9kZSA9IG9uTm9kZTtcclxuICAgIHRoaXMucmF5c05vZGUgPSByYXlzTm9kZTtcclxuICAgIHRoaXMuYnJpZ2h0bmVzc1Byb3BlcnR5ID0gYnJpZ2h0bmVzc1Byb3BlcnR5O1xyXG5cclxuICAgIC8vIFVwZGF0ZXMgdGhpcyBOb2RlIHdoZW4gaXQgYmVjb21lcyB2aXNpYmxlLlxyXG4gICAgdGhpcy52aXNpYmxlUHJvcGVydHkubGluayggdmlzaWJsZSA9PiB2aXNpYmxlICYmIHRoaXMudXBkYXRlKCkgKTtcclxuXHJcbiAgICBjb25zdCBicmlnaHRuZXNzT2JzZXJ2ZXIgPSAoIGJyaWdodG5lc3M6IG51bWJlciApID0+IHRoaXMudXBkYXRlKCk7XHJcbiAgICBicmlnaHRuZXNzUHJvcGVydHkubGluayggYnJpZ2h0bmVzc09ic2VydmVyICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlTGlnaHRCdWxiTm9kZSA9ICgpID0+IHtcclxuICAgICAgYnJpZ2h0bmVzc1Byb3BlcnR5LnVubGluayggYnJpZ2h0bmVzc09ic2VydmVyICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHN1cHBvcnQgZm9yIGJpbmRlciBkb2N1bWVudGF0aW9uLCBzdHJpcHBlZCBvdXQgaW4gYnVpbGRzIGFuZCBvbmx5IHJ1bnMgd2hlbiA/YmluZGVyIGlzIHNwZWNpZmllZFxyXG4gICAgYXNzZXJ0ICYmIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuYmluZGVyICYmIEluc3RhbmNlUmVnaXN0cnkucmVnaXN0ZXJEYXRhVVJMKCAnc2NlbmVyeS1waGV0JywgJ0xpZ2h0QnVsYk5vZGUnLCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUxpZ2h0QnVsYk5vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGhlIGJ1bGIuIEZvciBwZXJmb3JtYW5jZSwgdGhpcyBpcyBhIG5vLW9wIHdoZW4gdGhlIGJ1bGIgaXMgbm90IHZpc2libGUuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMudmlzaWJsZSApIHtcclxuICAgICAgY29uc3QgYnJpZ2h0bmVzcyA9IHRoaXMuYnJpZ2h0bmVzc1Byb3BlcnR5LnZhbHVlO1xyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBicmlnaHRuZXNzID49IDAgJiYgYnJpZ2h0bmVzcyA8PSAxICk7XHJcbiAgICAgIHRoaXMub25Ob2RlLnZpc2libGUgPSAoIGJyaWdodG5lc3MgPiAwICk7XHJcbiAgICAgIGlmICggdGhpcy5vbk5vZGUudmlzaWJsZSApIHtcclxuICAgICAgICB0aGlzLm9uTm9kZS5vcGFjaXR5ID0gVXRpbHMubGluZWFyKCAwLCAxLCAwLjMsIDEsIGJyaWdodG5lc3MgKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnJheXNOb2RlLnNldEJyaWdodG5lc3MoIGJyaWdodG5lc3MgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnTGlnaHRCdWxiTm9kZScsIExpZ2h0QnVsYk5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsS0FBSyxNQUFNLHVCQUF1QjtBQUN6QyxPQUFPQyxnQkFBZ0IsTUFBTSxzREFBc0Q7QUFDbkYsT0FBT0MsU0FBUyxNQUE0QixpQ0FBaUM7QUFFN0UsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLFFBQXFCLDZCQUE2QjtBQUN0RSxPQUFPQyxnQkFBZ0IsTUFBTSxnQ0FBZ0M7QUFDN0QsT0FBT0MsZUFBZSxNQUFNLCtCQUErQjtBQUMzRCxPQUFPQyxhQUFhLE1BQWdDLG9CQUFvQjtBQUN4RSxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBUTFDLGVBQWUsTUFBTUMsYUFBYSxTQUFTTCxJQUFJLENBQUM7RUFPOUM7QUFDRjtBQUNBO0FBQ0E7RUFDU00sV0FBV0EsQ0FBRUMsa0JBQTZDLEVBQUVDLGVBQXNDLEVBQUc7SUFFMUcsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQXFGLENBQUMsQ0FBRTtNQUMvR1ksY0FBYyxFQUFFO0lBQ2xCLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQixNQUFNRyxNQUFNLEdBQUcsSUFBSVosS0FBSyxDQUFFRyxlQUFlLEVBQUU7TUFDekNVLEtBQUssRUFBRUgsT0FBTyxDQUFDQyxjQUFjO01BQzdCRyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxNQUFNLEVBQUU7SUFDVixDQUFFLENBQUM7SUFFSCxNQUFNQyxPQUFPLEdBQUcsSUFBSWhCLEtBQUssQ0FBRUUsZ0JBQWdC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