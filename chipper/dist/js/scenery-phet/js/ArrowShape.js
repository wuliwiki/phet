// Copyright 2013-2022, University of Colorado Boulder

/**
 * An arrow shape, either single or double headed.
 * ArrowShape has an optimization that allows you to reuse an array of Vector2.
 * The array will have 0 points if the tail and tip are the same point.
 *
 * @author John Blanco
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Aaron Davis
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Vector2 from '../../dot/js/Vector2.js';
import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import sceneryPhet from './sceneryPhet.js';
export default class ArrowShape extends Shape {
  constructor(tailX, tailY, tipX, tipY, providedOptions) {
    super();
    if (tipX !== tailX || tipY !== tailY) {
      const points = ArrowShape.getArrowShapePoints(tailX, tailY, tipX, tipY, [], providedOptions);

      // Describe the shape
      this.moveTo(points[0].x, points[0].y);
      const tail = _.tail(points);
      _.each(tail, point => this.lineTo(point.x, point.y));
      this.close();
    }
  }

  /**
   * This method is static so it can be used in ArrowShape as well as in ArrowNode.  If the tail and tip are at the
   * same position, there are no points and the arrow will not be shown.
   * @param tailX
   * @param tailY
   * @param tipX
   * @param tipY
   * @param shapePoints - if provided, values will be overwritten. This is to achieve high performance and is used
   *   by ArrowNode to avoid re-creating shapes. Tested this implementation vs the old one by creating hundreds of
   *   arrows and saw significant performance gains.
   * @param providedOptions
   */
  static getArrowShapePoints(tailX, tailY, tipX, tipY, shapePoints, providedOptions) {
    const options = optionize()({
      // ArrowShapeOptions
      tailWidth: 5,
      headWidth: 10,
      headHeight: 10,
      fractionalHeadHeight: 0.5,
      doubleHead: false,
      isHeadDynamic: false,
      scaleTailToo: false
    }, providedOptions);

    // default shapePoints to empty array if it isn't passed in
    if (!shapePoints) {
      shapePoints = [];
    }
    if (tipX === tailX && tipY === tailY) {
      // if arrow has no length, it should have no points so that we don't attempt to draw anything
      shapePoints.length = 0;
    } else {
      // create a vector representation of the arrow
      const vector = new Vector2(tipX - tailX, tipY - tailY);
      const length = vector.magnitude;

      // start with the dimensions specified in options
      let headWidth = options.headWidth;
      let headHeight = options.headHeight;
      let tailWidth = options.tailWidth;

      // handle scaling of the head and tail
      if (options.isHeadDynamic) {
        const maxHeadHeight = options.fractionalHeadHeight * length;

        // scale down the head height if it exceeds the max
        if (options.headHeight > maxHeadHeight) {
          headHeight = maxHeadHeight;

          // optionally scale down the head width and tail width
          if (options.scaleTailToo) {
            headWidth = options.headWidth * headHeight / options.headHeight;
            tailWidth = options.tailWidth * headHeight / options.headHeight;
          }
        }
      } else {
        // otherwise, just make sure that head height is less than arrow length
        headHeight = Math.min(options.headHeight, options.doubleHead ? 0.35 * length : 0.99 * length);
      }

      // Index into shapePoints, incremented each time addPoint is called.
      let index = 0;

      // Set up a coordinate frame that goes from the tail of the arrow to the tip.
      const xHatUnit = vector.normalized();
      const yHatUnit = xHatUnit.rotated(Math.PI / 2);

      // Function to add a point to shapePoints
      const addPoint = function (xHat, yHat) {
        const x = xHatUnit.x * xHat + yHatUnit.x * yHat + tailX;
        const y = xHatUnit.y * xHat + yHatUnit.y * yHat + tailY;
        if (shapePoints[index]) {
          shapePoints[index].x = x;
          shapePoints[index].y = y;
        } else {
          shapePoints.push(new Vector2(x, y));
        }
        index++;
      };

      // Compute points for single- or double-headed arrow
      if (options.doubleHead) {
        addPoint(0, 0);
        addPoint(headHeight, headWidth / 2);
        addPoint(headHeight, tailWidth / 2);
      } else {
        addPoint(0, tailWidth / 2);
      }
      addPoint(length - headHeight, tailWidth / 2);
      addPoint(length - headHeight, headWidth / 2);
      addPoint(length, 0);
      addPoint(length - headHeight, -headWidth / 2);
      addPoint(length - headHeight, -tailWidth / 2);
      if (options.doubleHead) {
        addPoint(headHeight, -tailWidth / 2);
        addPoint(headHeight, -headWidth / 2);
      } else {
        addPoint(0, -tailWidth / 2);
      }
      if (index < shapePoints.length) {
        shapePoints.length = index;
      }
    }
    return shapePoints;
  }
}
sceneryPhet.register('ArrowShape', ArrowShape);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2hhcGUiLCJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIkFycm93U2hhcGUiLCJjb25zdHJ1Y3RvciIsInRhaWxYIiwidGFpbFkiLCJ0aXBYIiwidGlwWSIsInByb3ZpZGVkT3B0aW9ucyIsInBvaW50cyIsImdldEFycm93U2hhcGVQb2ludHMiLCJtb3ZlVG8iLCJ4IiwieSIsInRhaWwiLCJfIiwiZWFjaCIsInBvaW50IiwibGluZVRvIiwiY2xvc2UiLCJzaGFwZVBvaW50cyIsIm9wdGlvbnMiLCJ0YWlsV2lkdGgiLCJoZWFkV2lkdGgiLCJoZWFkSGVpZ2h0IiwiZnJhY3Rpb25hbEhlYWRIZWlnaHQiLCJkb3VibGVIZWFkIiwiaXNIZWFkRHluYW1pYyIsInNjYWxlVGFpbFRvbyIsImxlbmd0aCIsInZlY3RvciIsIm1hZ25pdHVkZSIsIm1heEhlYWRIZWlnaHQiLCJNYXRoIiwibWluIiwiaW5kZXgiLCJ4SGF0VW5pdCIsIm5vcm1hbGl6ZWQiLCJ5SGF0VW5pdCIsInJvdGF0ZWQiLCJQSSIsImFkZFBvaW50IiwieEhhdCIsInlIYXQiLCJwdXNoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBcnJvd1NoYXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEFuIGFycm93IHNoYXBlLCBlaXRoZXIgc2luZ2xlIG9yIGRvdWJsZSBoZWFkZWQuXHJcbiAqIEFycm93U2hhcGUgaGFzIGFuIG9wdGltaXphdGlvbiB0aGF0IGFsbG93cyB5b3UgdG8gcmV1c2UgYW4gYXJyYXkgb2YgVmVjdG9yMi5cclxuICogVGhlIGFycmF5IHdpbGwgaGF2ZSAwIHBvaW50cyBpZiB0aGUgdGFpbCBhbmQgdGlwIGFyZSB0aGUgc2FtZSBwb2ludC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIEFhcm9uIERhdmlzXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbmV4cG9ydCB0eXBlIEFycm93U2hhcGVPcHRpb25zID0ge1xyXG4gIHRhaWxXaWR0aD86IG51bWJlcjtcclxuICBoZWFkV2lkdGg/OiBudW1iZXI7XHJcbiAgaGVhZEhlaWdodD86IG51bWJlcjtcclxuICBmcmFjdGlvbmFsSGVhZEhlaWdodD86IG51bWJlcjsgLy8gaGVhZCB3aWxsIGJlIHNjYWxlZCB3aGVuIGhlYWRIZWlnaHQgaXMgZ3JlYXRlciB0aGFuIGZyYWN0aW9uYWxIZWFkSGVpZ2h0ICogYXJyb3cgbGVuZ3RoXHJcbiAgZG91YmxlSGVhZD86IGJvb2xlYW47IC8vIGRldGVybWluZXMgd2hldGhlciB0aGUgYXJyb3cgaGFzIGEgaGVhZCBhdCBib3RoIGVuZHMgb2YgdGhlIHRhaWxcclxuICBpc0hlYWREeW5hbWljPzogYm9vbGVhbjsgLy8gZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHNjYWxlIGRvd24gdGhlIGFycm93IGhlYWQgaGVpZ2h0IGZvciBmcmFjdGlvbmFsSGVhZEhlaWdodCBjb25zdHJhaW50XHJcbiAgc2NhbGVUYWlsVG9vPzogYm9vbGVhbjsgIC8vIGRldGVybWluZXMgd2hldGhlciB0byBhbHNvIHNjYWxlIGFycm93IGhlYWQgd2lkdGggYW5kIHRhaWwgd2lkdGggd2hlbiBzY2FsaW5nIGhlYWQgaGVpZ2h0XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcnJvd1NoYXBlIGV4dGVuZHMgU2hhcGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhaWxYOiBudW1iZXIsIHRhaWxZOiBudW1iZXIsIHRpcFg6IG51bWJlciwgdGlwWTogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM6IEFycm93U2hhcGVPcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgaWYgKCB0aXBYICE9PSB0YWlsWCB8fCB0aXBZICE9PSB0YWlsWSApIHtcclxuXHJcbiAgICAgIGNvbnN0IHBvaW50cyA9IEFycm93U2hhcGUuZ2V0QXJyb3dTaGFwZVBvaW50cyggdGFpbFgsIHRhaWxZLCB0aXBYLCB0aXBZLCBbXSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgICAvLyBEZXNjcmliZSB0aGUgc2hhcGVcclxuICAgICAgdGhpcy5tb3ZlVG8oIHBvaW50c1sgMCBdLngsIHBvaW50c1sgMCBdLnkgKTtcclxuICAgICAgY29uc3QgdGFpbCA9IF8udGFpbCggcG9pbnRzICk7XHJcbiAgICAgIF8uZWFjaCggdGFpbCwgKCBwb2ludDogVmVjdG9yMiApID0+IHRoaXMubGluZVRvKCBwb2ludC54LCBwb2ludC55ICkgKTtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgaXMgc3RhdGljIHNvIGl0IGNhbiBiZSB1c2VkIGluIEFycm93U2hhcGUgYXMgd2VsbCBhcyBpbiBBcnJvd05vZGUuICBJZiB0aGUgdGFpbCBhbmQgdGlwIGFyZSBhdCB0aGVcclxuICAgKiBzYW1lIHBvc2l0aW9uLCB0aGVyZSBhcmUgbm8gcG9pbnRzIGFuZCB0aGUgYXJyb3cgd2lsbCBub3QgYmUgc2hvd24uXHJcbiAgICogQHBhcmFtIHRhaWxYXHJcbiAgICogQHBhcmFtIHRhaWxZXHJcbiAgICogQHBhcmFtIHRpcFhcclxuICAgKiBAcGFyYW0gdGlwWVxyXG4gICAqIEBwYXJhbSBzaGFwZVBvaW50cyAtIGlmIHByb3ZpZGVkLCB2YWx1ZXMgd2lsbCBiZSBvdmVyd3JpdHRlbi4gVGhpcyBpcyB0byBhY2hpZXZlIGhpZ2ggcGVyZm9ybWFuY2UgYW5kIGlzIHVzZWRcclxuICAgKiAgIGJ5IEFycm93Tm9kZSB0byBhdm9pZCByZS1jcmVhdGluZyBzaGFwZXMuIFRlc3RlZCB0aGlzIGltcGxlbWVudGF0aW9uIHZzIHRoZSBvbGQgb25lIGJ5IGNyZWF0aW5nIGh1bmRyZWRzIG9mXHJcbiAgICogICBhcnJvd3MgYW5kIHNhdyBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBnYWlucy5cclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRBcnJvd1NoYXBlUG9pbnRzKCB0YWlsWDogbnVtYmVyLCB0YWlsWTogbnVtYmVyLCB0aXBYOiBudW1iZXIsIHRpcFk6IG51bWJlciwgc2hhcGVQb2ludHM6IFZlY3RvcjJbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IEFycm93U2hhcGVPcHRpb25zICk6IFZlY3RvcjJbXSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxBcnJvd1NoYXBlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gQXJyb3dTaGFwZU9wdGlvbnNcclxuICAgICAgdGFpbFdpZHRoOiA1LFxyXG4gICAgICBoZWFkV2lkdGg6IDEwLFxyXG4gICAgICBoZWFkSGVpZ2h0OiAxMCxcclxuICAgICAgZnJhY3Rpb25hbEhlYWRIZWlnaHQ6IDAuNSxcclxuICAgICAgZG91YmxlSGVhZDogZmFsc2UsXHJcbiAgICAgIGlzSGVhZER5bmFtaWM6IGZhbHNlLFxyXG4gICAgICBzY2FsZVRhaWxUb286IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBkZWZhdWx0IHNoYXBlUG9pbnRzIHRvIGVtcHR5IGFycmF5IGlmIGl0IGlzbid0IHBhc3NlZCBpblxyXG4gICAgaWYgKCAhc2hhcGVQb2ludHMgKSB7XHJcbiAgICAgIHNoYXBlUG9pbnRzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCB0aXBYID09PSB0YWlsWCAmJiB0aXBZID09PSB0YWlsWSApIHtcclxuXHJcbiAgICAgIC8vIGlmIGFycm93IGhhcyBubyBsZW5ndGgsIGl0IHNob3VsZCBoYXZlIG5vIHBvaW50cyBzbyB0aGF0IHdlIGRvbid0IGF0dGVtcHQgdG8gZHJhdyBhbnl0aGluZ1xyXG4gICAgICBzaGFwZVBvaW50cy5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcblxyXG4gICAgICAvLyBjcmVhdGUgYSB2ZWN0b3IgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFycm93XHJcbiAgICAgIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IyKCB0aXBYIC0gdGFpbFgsIHRpcFkgLSB0YWlsWSApO1xyXG4gICAgICBjb25zdCBsZW5ndGggPSB2ZWN0b3IubWFnbml0dWRlO1xyXG5cclxuICAgICAgLy8gc3RhcnQgd2l0aCB0aGUgZGltZW5zaW9ucyBzcGVjaWZpZWQgaW4gb3B0aW9uc1xyXG4gICAgICBsZXQgaGVhZFdpZHRoID0gb3B0aW9ucy5oZWFkV2lkdGg7XHJcbiAgICAgIGxldCBoZWFkSGVpZ2h0ID0gb3B0aW9ucy5oZWFkSGVpZ2h0O1xyXG4gICAgICBsZXQgdGFpbFdpZHRoID0gb3B0aW9ucy50YWlsV2lkdGg7XHJcblxyXG4gICAgICAvLyBoYW5kbGUgc2NhbGluZyBvZiB0aGUgaGVhZCBhbmQgdGFpbFxyXG4gICAgICBpZiAoIG9wdGlvbnMuaXNIZWFkRHluYW1pYyApIHtcclxuXHJcbiAgICAgICAgY29uc3QgbWF4SGVhZEhlaWdodCA9IG9wdGlvbnMuZnJhY3Rpb25hbEhlYWRIZWlnaHQgKiBsZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIHNjYWxlIGRvd24gdGhlIGhlYWQgaGVpZ2h0IGlmIGl0IGV4Y2VlZHMgdGhlIG1heFxyXG4gICAgICAgIGlmICggb3B0aW9ucy5oZWFkSGVpZ2h0ID4gbWF4SGVhZEhlaWdodCApIHtcclxuICAgICAgICAgIGhlYWRIZWlnaHQgPSBtYXhIZWFkSGVpZ2h0O1xyXG5cclxuICAgICAgICAgIC8vIG9wdGlvbmFsbHkgc2NhbGUgZG93biB0aGUgaGVhZCB3aWR0aCBhbmQgdGFpbCB3aWR0aFxyXG4gICAgICAgICAgaWYgKCBvcHRpb25zLnNjYWxlVGFpbFRvbyApIHtcclxuICAgICAgICAgICAgaGVhZFdpZHRoID0gb3B0aW9ucy5oZWFkV2lkdGggKiBoZWFkSGVpZ2h0IC8gb3B0aW9ucy5oZWFkSGVpZ2h0O1xyXG4gICAgICAgICAgICB0YWlsV2lkdGggPSBvcHRpb25zLnRhaWxXaWR0aCAqIGhlYWRIZWlnaHQgLyBvcHRpb25zLmhlYWRIZWlnaHQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAvLyBvdGhlcndpc2UsIGp1c3QgbWFrZSBzdXJlIHRoYXQgaGVhZCBoZWlnaHQgaXMgbGVzcyB0aGFuIGFycm93IGxlbmd0aFxyXG4gICAgICAgIGhlYWRIZWlnaHQgPSBNYXRoLm1pbiggb3B0aW9ucy5oZWFkSGVpZ2h0LCBvcHRpb25zLmRvdWJsZUhlYWQgPyAwLjM1ICogbGVuZ3RoIDogMC45OSAqIGxlbmd0aCApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBJbmRleCBpbnRvIHNoYXBlUG9pbnRzLCBpbmNyZW1lbnRlZCBlYWNoIHRpbWUgYWRkUG9pbnQgaXMgY2FsbGVkLlxyXG4gICAgICBsZXQgaW5kZXggPSAwO1xyXG5cclxuICAgICAgLy8gU2V0IHVwIGEgY29vcmRpbmF0ZSBmcmFtZSB0aGF0IGdvZXMgZnJvbSB0aGUgdGFpbCBvZiB0aGUgYXJyb3cgdG8gdGhlIHRpcC5cclxuICAgICAgY29uc3QgeEhhdFVuaXQgPSB2ZWN0b3Iubm9ybWFsaXplZCgpO1xyXG4gICAgICBjb25zdCB5SGF0VW5pdCA9IHhIYXRVbml0LnJvdGF0ZWQoIE1hdGguUEkgLyAyICk7XHJcblxyXG4gICAgICAvLyBGdW5jdGlvbiB0byBhZGQgYSBwb2ludCB0byBzaGFwZVBvaW50c1xyXG4gICAgICBjb25zdCBhZGRQb2ludCA9IGZ1bmN0aW9uKCB4SGF0OiBudW1iZXIsIHlIYXQ6IG51bWJlciApIHtcclxuICAgICAgICBjb25zdCB4ID0geEhhdFVuaXQueCAqIHhIYXQgKyB5SGF0VW5pdC54ICogeUhhdCArIHRhaWxYO1xyXG4gICAgICAgIGNvbnN0IHkgPSB4SGF0VW5pdC55ICogeEhhdCArIHlIYXRVbml0LnkgKiB5SGF0ICsgdGFpbFk7XHJcbiAgICAgICAgaWYgKCBzaGFwZVBvaW50c1sgaW5kZXggXSApIHtcclxuICAgICAgICAgIHNoYXBlUG9pbnRzWyBpbmRleCBdLnggPSB4O1xyXG4gICAgICAgICAgc2hhcGVQb2ludHNbIGluZGV4IF0ueSA9IHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgc2hhcGVQb2ludHMucHVzaCggbmV3IFZlY3RvcjIoIHgsIHkgKSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gQ29tcHV0ZSBwb2ludHMgZm9yIHNpbmdsZS0gb3IgZG91YmxlLWhlYWRlZCBhcnJvd1xyXG4gICAgICBpZiAoIG9wdGlvbnMuZG91YmxlSGVhZCApIHtcclxuICAgICAgICBhZGRQb2ludCggMCwgMCApO1xyXG4gICAgICAgIGFkZFBvaW50KCBoZWFkSGVpZ2h0LCBoZWFkV2lkdGggLyAyICk7XHJcbiAgICAgICAgYWRkUG9pbnQoIGhlYWRIZWlnaHQsIHRhaWxXaWR0aCAvIDIgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBhZGRQb2ludCggMCwgdGFpbFdpZHRoIC8gMiApO1xyXG4gICAgICB9XHJcbiAgICAgIGFkZFBvaW50KCBsZW5ndGggLSBoZWFkSGVpZ2h0LCB0YWlsV2lkdGggLyAyICk7XHJcbiAgICAgIGFkZFBvaW50KCBsZW5ndGggLSBoZWFkSGVpZ2h0LCBoZWFkV2lkdGggLyAyICk7XHJcbiAgICAgIGFkZFBvaW50KCBsZW5ndGgsIDAgKTtcclxuICAgICAgYWRkUG9pbnQoIGxlbmd0aCAtIGhlYWRIZWlnaHQsIC1oZWFkV2lkdGggLyAyICk7XHJcbiAgICAgIGFkZFBvaW50KCBsZW5ndGggLSBoZWFkSGVpZ2h0LCAtdGFpbFdpZHRoIC8gMiApO1xyXG4gICAgICBpZiAoIG9wdGlvbnMuZG91YmxlSGVhZCApIHtcclxuICAgICAgICBhZGRQb2ludCggaGVhZEhlaWdodCwgLXRhaWxXaWR0aCAvIDIgKTtcclxuICAgICAgICBhZGRQb2ludCggaGVhZEhlaWdodCwgLWhlYWRXaWR0aCAvIDIgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBhZGRQb2ludCggMCwgLXRhaWxXaWR0aCAvIDIgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCBpbmRleCA8IHNoYXBlUG9pbnRzLmxlbmd0aCApIHtcclxuICAgICAgICBzaGFwZVBvaW50cy5sZW5ndGggPSBpbmRleDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaGFwZVBvaW50cztcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnQXJyb3dTaGFwZScsIEFycm93U2hhcGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSx5QkFBeUI7QUFDN0MsU0FBU0MsS0FBSyxRQUFRLDBCQUEwQjtBQUNoRCxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFZMUMsZUFBZSxNQUFNQyxVQUFVLFNBQVNILEtBQUssQ0FBQztFQUVyQ0ksV0FBV0EsQ0FBRUMsS0FBYSxFQUFFQyxLQUFhLEVBQUVDLElBQVksRUFBRUMsSUFBWSxFQUFFQyxlQUFrQyxFQUFHO0lBRWpILEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBS0YsSUFBSSxLQUFLRixLQUFLLElBQUlHLElBQUksS0FBS0YsS0FBSyxFQUFHO01BRXRDLE1BQU1JLE1BQU0sR0FBR1AsVUFBVSxDQUFDUSxtQkFBbUIsQ0FBRU4sS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFLEVBQUUsRUFBRUMsZUFBZ0IsQ0FBQzs7TUFFOUY7TUFDQSxJQUFJLENBQUNHLE1BQU0sQ0FBRUYsTUFBTSxDQUFFLENBQUMsQ0FBRSxDQUFDRyxDQUFDLEVBQUVILE1BQU0sQ0FBRSxDQUFDLENBQUUsQ0FBQ0ksQ0FBRSxDQUFDO01BQzNDLE1BQU1DLElBQUksR0FBR0MsQ0FBQyxDQUFDRCxJQUFJLENBQUVMLE1BQU8sQ0FBQztNQUM3Qk0sQ0FBQyxDQUFDQyxJQUFJLENBQUVGLElBQUksRUFBSUcsS0FBYyxJQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFFRCxLQUFLLENBQUNMLENBQUMsRUFBRUssS0FBSyxDQUFDSixDQUFFLENBQUUsQ0FBQztNQUNyRSxJQUFJLENBQUNNLEtBQUssQ0FBQyxDQUFDO0lBQ2Q7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFjVCxtQkFBbUJBLENBQUVOLEtBQWEsRUFBRUMsS0FBYSxFQUFFQyxJQUFZLEVBQUVDLElBQVksRUFBRWEsV0FBc0IsRUFDaEZaLGVBQW1DLEVBQWM7SUFFbEYsTUFBTWEsT0FBTyxHQUFHckIsU0FBUyxDQUFvQixDQUFDLENBQUU7TUFFOUM7TUFDQXNCLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFNBQVMsRUFBRSxFQUFFO01BQ2JDLFVBQVUsRUFBRSxFQUFFO01BQ2RDLG9CQUFvQixFQUFFLEdBQUc7TUFDekJDLFVBQVUsRUFBRSxLQUFLO01BQ2pCQyxhQUFhLEVBQUUsS0FBSztNQUNwQkMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFBRXBCLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsSUFBSyxDQUFDWSxXQUFXLEVBQUc7TUFDbEJBLFdBQVcsR0FBRyxFQUFFO0lBQ2xCO0lBRUEsSUFBS2QsSUFBSSxLQUFLRixLQUFLLElBQUlHLElBQUksS0FBS0YsS0FBSyxFQUFHO01BRXRDO01BQ0FlLFdBQVcsQ0FBQ1MsTUFBTSxHQUFHLENBQUM7SUFDeEIsQ0FBQyxNQUNJO01BRUg7TUFDQSxNQUFNQyxNQUFNLEdBQUcsSUFBSWhDLE9BQU8sQ0FBRVEsSUFBSSxHQUFHRixLQUFLLEVBQUVHLElBQUksR0FBR0YsS0FBTSxDQUFDO01BQ3hELE1BQU13QixNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUzs7TUFFL0I7TUFDQSxJQUFJUixTQUFTLEdBQUdGLE9BQU8sQ0FBQ0UsU0FBUztNQUNqQyxJQUFJQyxVQUFVLEdBQUdILE9BQU8sQ0FBQ0csVUFBVTtNQUNuQyxJQUFJRixTQUFTLEdBQUdELE9BQU8sQ0FBQ0MsU0FBUzs7TUFFakM7TUFDQSxJQUFLRCxPQUFPLENBQUNNLGFBQWEsRUFBRztRQUUzQixNQUFNSyxhQUFhLEdBQUdYLE9BQU8sQ0FBQ0ksb0JBQW9CLEdBQUdJLE1BQU07O1FBRTNEO1FBQ0EsSUFBS1IsT0FBTyxDQUFDRyxVQUFVLEdBQUdRLGFBQWEsRUFBRztVQUN4Q1IsVUFBVSxHQUFHUSxhQUFhOztVQUUxQjtVQUNBLElBQUtYLE9BQU8sQ0FBQ08sWUFBWSxFQUFHO1lBQzFCTCxTQUFTLEdBQUdGLE9BQU8sQ0FBQ0UsU0FBUyxHQUFHQyxVQUFVLEdBQUdILE9BQU8sQ0FBQ0csVUFBVTtZQUMvREYsU0FBUyxHQUFHRCxPQUFPLENBQUNDLFNBQVMsR0FBR0UsVUFBVSxHQUFHSCxPQUFPLENBQUNHLFVBQVU7VUFDakU7UUFDRjtNQUNGLENBQUMsTUFDSTtRQUVIO1FBQ0FBLFVBQVUsR0FBR1MsSUFBSSxDQUFDQyxHQUFHLENBQUViLE9BQU8sQ0FBQ0csVUFBVSxFQUFFSCxPQUFPLENBQUNLLFVBQVUsR0FBRyxJQUFJLEdBQUdHLE1BQU0sR0FBRyxJQUFJLEdBQUdBLE1BQU8sQ0FBQztNQUNqRzs7TUFFQTtNQUNBLElBQUlNLEtBQUssR0FBRyxDQUFDOztNQUViO01BQ0EsTUFBTUMsUUFBUSxHQUFHTixNQUFNLENBQUNPLFVBQVUsQ0FBQyxDQUFDO01BQ3BDLE1BQU1DLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxPQUFPLENBQUVOLElBQUksQ0FBQ08sRUFBRSxHQUFHLENBQUUsQ0FBQzs7TUFFaEQ7TUFDQSxNQUFNQyxRQUFRLEdBQUcsU0FBQUEsQ0FBVUMsSUFBWSxFQUFFQyxJQUFZLEVBQUc7UUFDdEQsTUFBTS9CLENBQUMsR0FBR3dCLFFBQVEsQ0FBQ3hCLENBQUMsR0FBRzhCLElBQUksR0FBR0osUUFBUSxDQUFDMUIsQ0FBQyxHQUFHK0IsSUFBSSxHQUFHdkMsS0FBSztRQUN2RCxNQUFNUyxDQUFDLEdBQUd1QixRQUFRLENBQUN2QixDQUFDLEdBQUc2QixJQUFJLEdBQUdKLFFBQVEsQ0FBQ3pCLENBQUMsR0FBRzhCLElBQUksR0FBR3RDLEtBQUs7UUFDdkQsSUFBS2UsV0FBVyxDQUFFZSxLQUFLLENBQUUsRUFBRztVQUMxQmYsV0FBVyxDQUFFZSxLQUFLLENBQUUsQ0FBQ3ZCLENBQUMsR0FBR0EsQ0FBQztVQUMxQlEsV0FBVyxDQUFFZSxLQUFLLENBQUUsQ0FBQ3RCLENBQUMsR0FBR0EsQ0FBQztRQUM1QixDQUFDLE1BQ0k7VUFDSE8sV0FBVyxDQUFDd0IsSUFBSSxDQUFFLElBQUk5QyxPQUFPLENBQUVjLENBQUMsRUFBRUMsQ0FBRSxDQUFFLENBQUM7UUFDekM7UUFDQXNCLEtBQUssRUFBRTtNQUNULENBQUM7O01BRUQ7TUFDQSxJQUFLZCxPQUFPLENBQUNLLFVBQVUsRUFBRztRQUN4QmUsUUFBUSxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7UUFDaEJBLFFBQVEsQ0FBRWpCLFVBQVUsRUFBRUQsU0FBUyxHQUFHLENBQUUsQ0FBQztRQUNyQ2tCLFFBQVEsQ0FBRWpCLFVBQVUsRUFBRUYsU0FBUyxHQUFHLENBQUUsQ0FBQztNQUN2QyxDQUFDLE1BQ0k7UUFDSG1CLFFBQVEsQ0FBRSxDQUFDLEVBQUVuQixTQUFTLEdBQUcsQ0FBRSxDQUFDO01BQzlCO01BQ0FtQixRQUFRLENBQUVaLE1BQU0sR0FBR0wsVUFBVSxFQUFFRixTQUFTLEdBQUcsQ0FBRSxDQUFDO01BQzlDbUIsUUFBUSxDQUFFWixNQUFNLEdBQUdMLFVBQVUsRUFBRUQsU0FBUyxHQUFHLENBQUUsQ0FBQztNQUM5Q2tCLFFBQVEsQ0FBRVosTUFBTSxFQUFFLENBQUUsQ0FBQztNQUNyQlksUUFBUSxDQUFFWixNQUFNLEdBQUdMLFVBQVUsRUFBRSxDQUFDRCxTQUFTLEdBQUcsQ0FBRSxDQUFDO01BQy9Da0IsUUFBUSxDQUFFWixNQUFNLEdBQUdMLFVBQVUsRUFBRSxDQUFDRixTQUFTLEdBQUcsQ0FBRSxDQUFDO01BQy9DLElBQUtELE9BQU8sQ0FBQ0ssVUFBVSxFQUFHO1FBQ3hCZSxRQUFRLENBQUVqQixVQUFVLEVBQUUsQ0FBQ0YsU0FBUyxHQUFHLENBQUUsQ0FBQztRQUN0Q21CLFFBQVEsQ0FBRWpCLFVBQVUsRUFBRSxDQUFDRCxTQUFTLEdBQUcsQ0FBRSxDQUFDO01BQ3hDLENBQUMsTUFDSTtRQUNIa0IsUUFBUSxDQUFFLENBQUMsRUFBRSxDQUFDbkIsU0FBUyxHQUFHLENBQUUsQ0FBQztNQUMvQjtNQUVBLElBQUthLEtBQUssR0FBR2YsV0FBVyxDQUFDUyxNQUFNLEVBQUc7UUFDaENULFdBQVcsQ0FBQ1MsTUFBTSxHQUFHTSxLQUFLO01BQzVCO0lBQ0Y7SUFFQSxPQUFPZixXQUFXO0VBQ3BCO0FBQ0Y7QUFFQW5CLFdBQVcsQ0FBQzRDLFFBQVEsQ0FBRSxZQUFZLEVBQUUzQyxVQUFXLENBQUMifQ==