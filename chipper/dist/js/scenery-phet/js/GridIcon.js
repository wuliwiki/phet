// Copyright 2022, University of Colorado Boulder

/**
 * GridIcon is the icon for an NxN grid of square cells.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../phet-core/js/optionize.js';
import { Path } from '../../scenery/js/imports.js';
import { Shape } from '../../kite/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
export default class GridIcon extends Path {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      size: 30,
      numberOfRows: 4,
      // PathOptions
      stroke: 'rgb( 100, 100, 100 )',
      lineWidth: 1
    }, providedOptions);
    assert && assert(options.size > 0, `invalid size: ${options.size}`);
    assert && assert(Number.isInteger(options.numberOfRows) && options.numberOfRows > 2, `invalid numberOfRows: ${options.numberOfRows}`);
    const shape = new Shape();

    // horizontal lines
    for (let row = 1; row < options.numberOfRows; row++) {
      const y = row / options.numberOfRows * options.size;
      shape.moveTo(0, y);
      shape.lineTo(options.size, y);
    }

    // vertical lines
    const numberOfColumns = options.numberOfRows; // because the grid is NxN
    for (let column = 1; column < numberOfColumns; column++) {
      const x = column / numberOfColumns * options.size;
      shape.moveTo(x, 0);
      shape.lineTo(x, options.size);
    }
    super(shape, options);
  }
}
sceneryPhet.register('GridIcon', GridIcon);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQYXRoIiwiU2hhcGUiLCJzY2VuZXJ5UGhldCIsIkdyaWRJY29uIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic2l6ZSIsIm51bWJlck9mUm93cyIsInN0cm9rZSIsImxpbmVXaWR0aCIsImFzc2VydCIsIk51bWJlciIsImlzSW50ZWdlciIsInNoYXBlIiwicm93IiwieSIsIm1vdmVUbyIsImxpbmVUbyIsIm51bWJlck9mQ29sdW1ucyIsImNvbHVtbiIsIngiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyaWRJY29uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHcmlkSWNvbiBpcyB0aGUgaWNvbiBmb3IgYW4gTnhOIGdyaWQgb2Ygc3F1YXJlIGNlbGxzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFBhdGgsIFBhdGhPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNpemU/OiBudW1iZXI7IC8vIGRpbWVuc2lvbnMgb2YgdGhlIGljb24sIHNhbWUgZm9yIHdpZHRoIGFuZCBoZWlnaHRcclxuICBudW1iZXJPZlJvd3M/OiBudW1iZXI7IC8vIG51bWJlciBvZiByb3dzIGluIHRoZSBncmlkLCBudW1iZXIgb2YgY29sdW1ucyB3aWxsIGJlIHRoZSBzYW1lXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBHcmlkSWNvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBhdGhPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JpZEljb24gZXh0ZW5kcyBQYXRoIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBHcmlkSWNvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxHcmlkSWNvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBQYXRoT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgc2l6ZTogMzAsXHJcbiAgICAgIG51bWJlck9mUm93czogNCxcclxuXHJcbiAgICAgIC8vIFBhdGhPcHRpb25zXHJcbiAgICAgIHN0cm9rZTogJ3JnYiggMTAwLCAxMDAsIDEwMCApJyxcclxuICAgICAgbGluZVdpZHRoOiAxXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLnNpemUgPiAwLCBgaW52YWxpZCBzaXplOiAke29wdGlvbnMuc2l6ZX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBOdW1iZXIuaXNJbnRlZ2VyKCBvcHRpb25zLm51bWJlck9mUm93cyApICYmIG9wdGlvbnMubnVtYmVyT2ZSb3dzID4gMixcclxuICAgICAgYGludmFsaWQgbnVtYmVyT2ZSb3dzOiAke29wdGlvbnMubnVtYmVyT2ZSb3dzfWAgKTtcclxuXHJcbiAgICBjb25zdCBzaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG5cclxuICAgIC8vIGhvcml6b250YWwgbGluZXNcclxuICAgIGZvciAoIGxldCByb3cgPSAxOyByb3cgPCBvcHRpb25zLm51bWJlck9mUm93czsgcm93KysgKSB7XHJcbiAgICAgIGNvbnN0IHkgPSAoIHJvdyAvIG9wdGlvbnMubnVtYmVyT2ZSb3dzICkgKiBvcHRpb25zLnNpemU7XHJcbiAgICAgIHNoYXBlLm1vdmVUbyggMCwgeSApO1xyXG4gICAgICBzaGFwZS5saW5lVG8oIG9wdGlvbnMuc2l6ZSwgeSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHZlcnRpY2FsIGxpbmVzXHJcbiAgICBjb25zdCBudW1iZXJPZkNvbHVtbnMgPSBvcHRpb25zLm51bWJlck9mUm93czsgLy8gYmVjYXVzZSB0aGUgZ3JpZCBpcyBOeE5cclxuICAgIGZvciAoIGxldCBjb2x1bW4gPSAxOyBjb2x1bW4gPCBudW1iZXJPZkNvbHVtbnM7IGNvbHVtbisrICkge1xyXG4gICAgICBjb25zdCB4ID0gKCBjb2x1bW4gLyBudW1iZXJPZkNvbHVtbnMgKSAqIG9wdGlvbnMuc2l6ZTtcclxuICAgICAgc2hhcGUubW92ZVRvKCB4LCAwICk7XHJcbiAgICAgIHNoYXBlLmxpbmVUbyggeCwgb3B0aW9ucy5zaXplICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VwZXIoIHNoYXBlLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ0dyaWRJY29uJywgR3JpZEljb24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxTQUFTQyxJQUFJLFFBQXFCLDZCQUE2QjtBQUMvRCxTQUFTQyxLQUFLLFFBQVEsMEJBQTBCO0FBQ2hELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFTMUMsZUFBZSxNQUFNQyxRQUFRLFNBQVNILElBQUksQ0FBQztFQUVsQ0ksV0FBV0EsQ0FBRUMsZUFBaUMsRUFBRztJQUV0RCxNQUFNQyxPQUFPLEdBQUdQLFNBQVMsQ0FBNEMsQ0FBQyxDQUFFO01BRXRFO01BQ0FRLElBQUksRUFBRSxFQUFFO01BQ1JDLFlBQVksRUFBRSxDQUFDO01BRWY7TUFDQUMsTUFBTSxFQUFFLHNCQUFzQjtNQUM5QkMsU0FBUyxFQUFFO0lBQ2IsQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCTSxNQUFNLElBQUlBLE1BQU0sQ0FBRUwsT0FBTyxDQUFDQyxJQUFJLEdBQUcsQ0FBQyxFQUFHLGlCQUFnQkQsT0FBTyxDQUFDQyxJQUFLLEVBQUUsQ0FBQztJQUNyRUksTUFBTSxJQUFJQSxNQUFNLENBQUVDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFUCxPQUFPLENBQUNFLFlBQWEsQ0FBQyxJQUFJRixPQUFPLENBQUNFLFlBQVksR0FBRyxDQUFDLEVBQ25GLHlCQUF3QkYsT0FBTyxDQUFDRSxZQUFhLEVBQUUsQ0FBQztJQUVuRCxNQUFNTSxLQUFLLEdBQUcsSUFBSWIsS0FBSyxDQUFDLENBQUM7O0lBRXpCO0lBQ0EsS0FBTSxJQUFJYyxHQUFHLEdBQUcsQ0FBQyxFQUFFQSxHQUFHLEdBQUdULE9BQU8sQ0FBQ0UsWUFBWSxFQUFFTyxHQUFHLEVBQUUsRUFBRztNQUNyRCxNQUFNQyxDQUFDLEdBQUtELEdBQUcsR0FBR1QsT0FBTyxDQUFDRSxZQUFZLEdBQUtGLE9BQU8sQ0FBQ0MsSUFBSTtNQUN2RE8sS0FBSyxDQUFDRyxNQUFNLENBQUUsQ0FBQyxFQUFFRCxDQUFFLENBQUM7TUFDcEJGLEtBQUssQ0FBQ0ksTUFBTSxDQUFFWixPQUFPLENBQUNDLElBQUksRUFBRVMsQ0FBRSxDQUFDO0lBQ2pDOztJQUVBO0lBQ0EsTUFBTUcsZUFBZSxHQUFHYixPQUFPLENBQUNFLFlBQVksQ0FBQyxDQUFDO0lBQzlDLEtBQU0sSUFBSVksTUFBTSxHQUFHLENBQUMsRUFBRUEsTUFBTSxHQUFHRCxlQUFlLEVBQUVDLE1BQU0sRUFBRSxFQUFHO01BQ3pELE1BQU1DLENBQUMsR0FBS0QsTUFBTSxHQUFHRCxlQUFlLEdBQUtiLE9BQU8sQ0FBQ0MsSUFBSTtNQUNyRE8sS0FBSyxDQUFDRyxNQUFNLENBQUVJLENBQUMsRUFBRSxDQUFFLENBQUM7TUFDcEJQLEtBQUssQ0FBQ0ksTUFBTSxDQUFFRyxDQUFDLEVBQUVmLE9BQU8sQ0FBQ0MsSUFBSyxDQUFDO0lBQ2pDO0lBRUEsS0FBSyxDQUFFTyxLQUFLLEVBQUVSLE9BQVEsQ0FBQztFQUN6QjtBQUNGO0FBRUFKLFdBQVcsQ0FBQ29CLFFBQVEsQ0FBRSxVQUFVLEVBQUVuQixRQUFTLENBQUMifQ==