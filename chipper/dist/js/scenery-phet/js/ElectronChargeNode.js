// Copyright 2017-2022, University of Colorado Boulder

/**
 * ElectronChargeNode renders a shaded 2d electron with a "-" sign in the middle.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import InstanceRegistry from '../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../phet-core/js/optionize.js';
import { Circle, Node, RadialGradient, Rectangle } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
export default class ElectronChargeNode extends Node {
  constructor(providedOptions) {
    const options = optionize()({
      // Workaround for https://github.com/phetsims/circuit-construction-kit-dc/issues/160
      sphereOpacity: 1,
      minusSignOpacity: 1,
      radius: 10
    }, providedOptions);
    options.children = [
    // The blue shaded sphere
    new Circle(options.radius, {
      opacity: options.sphereOpacity,
      fill: new RadialGradient(2, -3, 2, 2, -3, 7).addColorStop(0, '#4fcfff').addColorStop(0.5, '#2cbef5').addColorStop(1, '#00a9e8')
    }),
    // Minus sign, intentionally not internationalized
    new Rectangle(0, 0, 11, 2, {
      opacity: options.minusSignOpacity,
      fill: 'white',
      centerX: 0,
      centerY: 0
    })];
    super(options);

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet.chipper.queryParameters.binder && InstanceRegistry.registerDataURL('scenery-phet', 'ElectronChargeNode', this);
  }
}
sceneryPhet.register('ElectronChargeNode', ElectronChargeNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiQ2lyY2xlIiwiTm9kZSIsIlJhZGlhbEdyYWRpZW50IiwiUmVjdGFuZ2xlIiwic2NlbmVyeVBoZXQiLCJFbGVjdHJvbkNoYXJnZU5vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzcGhlcmVPcGFjaXR5IiwibWludXNTaWduT3BhY2l0eSIsInJhZGl1cyIsImNoaWxkcmVuIiwib3BhY2l0eSIsImZpbGwiLCJhZGRDb2xvclN0b3AiLCJjZW50ZXJYIiwiY2VudGVyWSIsImFzc2VydCIsInBoZXQiLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiYmluZGVyIiwicmVnaXN0ZXJEYXRhVVJMIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbGVjdHJvbkNoYXJnZU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRWxlY3Ryb25DaGFyZ2VOb2RlIHJlbmRlcnMgYSBzaGFkZWQgMmQgZWxlY3Ryb24gd2l0aCBhIFwiLVwiIHNpZ24gaW4gdGhlIG1pZGRsZS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgSW5zdGFuY2VSZWdpc3RyeSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvZG9jdW1lbnRhdGlvbi9JbnN0YW5jZVJlZ2lzdHJ5LmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIE5vZGUsIE5vZGVPcHRpb25zLCBSYWRpYWxHcmFkaWVudCwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBzcGhlcmVPcGFjaXR5PzogbnVtYmVyO1xyXG4gIG1pbnVzU2lnbk9wYWNpdHk/OiBudW1iZXI7XHJcbiAgcmFkaXVzPzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRWxlY3Ryb25DaGFyZ2VOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVjdHJvbkNoYXJnZU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBFbGVjdHJvbkNoYXJnZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RWxlY3Ryb25DaGFyZ2VOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2lyY3VpdC1jb25zdHJ1Y3Rpb24ta2l0LWRjL2lzc3Vlcy8xNjBcclxuICAgICAgc3BoZXJlT3BhY2l0eTogMSxcclxuICAgICAgbWludXNTaWduT3BhY2l0eTogMSxcclxuICAgICAgcmFkaXVzOiAxMFxyXG5cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbXHJcblxyXG4gICAgICAvLyBUaGUgYmx1ZSBzaGFkZWQgc3BoZXJlXHJcbiAgICAgIG5ldyBDaXJjbGUoIG9wdGlvbnMucmFkaXVzLCB7XHJcbiAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5zcGhlcmVPcGFjaXR5LFxyXG4gICAgICAgIGZpbGw6IG5ldyBSYWRpYWxHcmFkaWVudChcclxuICAgICAgICAgIDIsIC0zLCAyLFxyXG4gICAgICAgICAgMiwgLTMsIDcgKVxyXG4gICAgICAgICAgLmFkZENvbG9yU3RvcCggMCwgJyM0ZmNmZmYnIClcclxuICAgICAgICAgIC5hZGRDb2xvclN0b3AoIDAuNSwgJyMyY2JlZjUnIClcclxuICAgICAgICAgIC5hZGRDb2xvclN0b3AoIDEsICcjMDBhOWU4JyApXHJcbiAgICAgIH0gKSxcclxuXHJcbiAgICAgIC8vIE1pbnVzIHNpZ24sIGludGVudGlvbmFsbHkgbm90IGludGVybmF0aW9uYWxpemVkXHJcbiAgICAgIG5ldyBSZWN0YW5nbGUoIDAsIDAsIDExLCAyLCB7XHJcbiAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5taW51c1NpZ25PcGFjaXR5LFxyXG4gICAgICAgIGZpbGw6ICd3aGl0ZScsXHJcbiAgICAgICAgY2VudGVyWDogMCxcclxuICAgICAgICBjZW50ZXJZOiAwXHJcbiAgICAgIH0gKVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHN1cHBvcnQgZm9yIGJpbmRlciBkb2N1bWVudGF0aW9uLCBzdHJpcHBlZCBvdXQgaW4gYnVpbGRzIGFuZCBvbmx5IHJ1bnMgd2hlbiA/YmluZGVyIGlzIHNwZWNpZmllZFxyXG4gICAgYXNzZXJ0ICYmIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuYmluZGVyICYmIEluc3RhbmNlUmVnaXN0cnkucmVnaXN0ZXJEYXRhVVJMKCAnc2NlbmVyeS1waGV0JywgJ0VsZWN0cm9uQ2hhcmdlTm9kZScsIHRoaXMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnRWxlY3Ryb25DaGFyZ2VOb2RlJywgRWxlY3Ryb25DaGFyZ2VOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGdCQUFnQixNQUFNLHNEQUFzRDtBQUVuRixPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFlQyxjQUFjLEVBQUVDLFNBQVMsUUFBUSw2QkFBNkI7QUFDbEcsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQVUxQyxlQUFlLE1BQU1DLGtCQUFrQixTQUFTSixJQUFJLENBQUM7RUFFNUNLLFdBQVdBLENBQUVDLGVBQTJDLEVBQUc7SUFFaEUsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQXNELENBQUMsQ0FBRTtNQUVoRjtNQUNBVSxhQUFhLEVBQUUsQ0FBQztNQUNoQkMsZ0JBQWdCLEVBQUUsQ0FBQztNQUNuQkMsTUFBTSxFQUFFO0lBRVYsQ0FBQyxFQUFFSixlQUFnQixDQUFDO0lBRXBCQyxPQUFPLENBQUNJLFFBQVEsR0FBRztJQUVqQjtJQUNBLElBQUlaLE1BQU0sQ0FBRVEsT0FBTyxDQUFDRyxNQUFNLEVBQUU7TUFDMUJFLE9BQU8sRUFBRUwsT0FBTyxDQUFDQyxhQUFhO01BQzlCSyxJQUFJLEVBQUUsSUFBSVosY0FBYyxDQUN0QixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNSLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FDVGEsWUFBWSxDQUFFLENBQUMsRUFBRSxTQUFVLENBQUMsQ0FDNUJBLFlBQVksQ0FBRSxHQUFHLEVBQUUsU0FBVSxDQUFDLENBQzlCQSxZQUFZLENBQUUsQ0FBQyxFQUFFLFNBQVU7SUFDaEMsQ0FBRSxDQUFDO0lBRUg7SUFDQSxJQUFJWixTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO01BQzFCVSxPQUFPLEVBQUVMLE9BQU8sQ0FBQ0UsZ0JBQWdCO01BQ2pDSSxJQUFJLEVBQUUsT0FBTztNQUNiRSxPQUFPLEVBQUUsQ0FBQztNQUNWQyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUMsQ0FDSjtJQUVELEtBQUssQ0FBRVQsT0FBUSxDQUFDOztJQUVoQjtJQUNBVSxNQUFNLElBQUlDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLE1BQU0sSUFBSXhCLGdCQUFnQixDQUFDeUIsZUFBZSxDQUFFLGNBQWMsRUFBRSxvQkFBb0IsRUFBRSxJQUFLLENBQUM7RUFDakk7QUFDRjtBQUVBbkIsV0FBVyxDQUFDb0IsUUFBUSxDQUFFLG9CQUFvQixFQUFFbkIsa0JBQW1CLENBQUMifQ==