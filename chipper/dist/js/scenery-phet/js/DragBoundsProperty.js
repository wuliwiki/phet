// Copyright 2019-2023, University of Colorado Boulder

/**
 * DragBoundsProperty derives drag bounds that will keep an entire Node inside some specified bounds.
 * If the Node goes outside of these derived bounds, it's the client's responsibility to detect that
 * and move the Node accordingly.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../axon/js/DerivedProperty.js';
import Property from '../../axon/js/Property.js';
import Bounds2 from '../../dot/js/Bounds2.js';
import Vector2 from '../../dot/js/Vector2.js';
import { Node } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';

/**
 * @deprecated Don't use this, it's a bad approach. See https://github.com/phetsims/scenery-phet/issues/656
 */
class DragBoundsProperty extends DerivedProperty {
  /**
   * @param {Node} targetNode - the Node that is to be constrained
   * @param {TReadOnlyProperty.<Bounds2>} boundsProperty - targetNode will be fully inside these bounds. Should be given in the
   *                                              parent coordinate frame of the targetNode
   */
  constructor(targetNode, boundsProperty) {
    assert && assert(targetNode instanceof Node, `invalid targetNode: ${targetNode}`);
    assert && assert(boundsProperty instanceof Property, `invalid boundsProperty: ${boundsProperty}`);
    super([targetNode.boundsProperty, boundsProperty], (targetNodeBounds, bounds) => {
      // We'll grab the origin in the parent coordinate frame, to determine our bounds offsets in that coordinate frame.
      // This way we'll properly handle scaling/rotation/etc.
      const targetOriginInParentCoordinates = targetNode.localToParentPoint(Vector2.ZERO);

      // We'll adjust the bounds based on the target's bounds relative to its origin.
      return new Bounds2(bounds.minX - (targetNodeBounds.minX - targetOriginInParentCoordinates.x), bounds.minY - (targetNodeBounds.minY - targetOriginInParentCoordinates.y), bounds.maxX - (targetNodeBounds.maxX - targetOriginInParentCoordinates.x), bounds.maxY - (targetNodeBounds.maxY - targetOriginInParentCoordinates.y));
    }, {
      // Don't make spurious changes, we often won't be changing
      valueComparisonStrategy: 'equalsFunction'
    });
  }
}
sceneryPhet.register('DragBoundsProperty', DragBoundsProperty);
export default DragBoundsProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJQcm9wZXJ0eSIsIkJvdW5kczIiLCJWZWN0b3IyIiwiTm9kZSIsInNjZW5lcnlQaGV0IiwiRHJhZ0JvdW5kc1Byb3BlcnR5IiwiY29uc3RydWN0b3IiLCJ0YXJnZXROb2RlIiwiYm91bmRzUHJvcGVydHkiLCJhc3NlcnQiLCJ0YXJnZXROb2RlQm91bmRzIiwiYm91bmRzIiwidGFyZ2V0T3JpZ2luSW5QYXJlbnRDb29yZGluYXRlcyIsImxvY2FsVG9QYXJlbnRQb2ludCIsIlpFUk8iLCJtaW5YIiwieCIsIm1pblkiLCJ5IiwibWF4WCIsIm1heFkiLCJ2YWx1ZUNvbXBhcmlzb25TdHJhdGVneSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRHJhZ0JvdW5kc1Byb3BlcnR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERyYWdCb3VuZHNQcm9wZXJ0eSBkZXJpdmVzIGRyYWcgYm91bmRzIHRoYXQgd2lsbCBrZWVwIGFuIGVudGlyZSBOb2RlIGluc2lkZSBzb21lIHNwZWNpZmllZCBib3VuZHMuXHJcbiAqIElmIHRoZSBOb2RlIGdvZXMgb3V0c2lkZSBvZiB0aGVzZSBkZXJpdmVkIGJvdW5kcywgaXQncyB0aGUgY2xpZW50J3MgcmVzcG9uc2liaWxpdHkgdG8gZGV0ZWN0IHRoYXRcclxuICogYW5kIG1vdmUgdGhlIE5vZGUgYWNjb3JkaW5nbHkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgRG9uJ3QgdXNlIHRoaXMsIGl0J3MgYSBiYWQgYXBwcm9hY2guIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc2NlbmVyeS1waGV0L2lzc3Vlcy82NTZcclxuICovXHJcbmNsYXNzIERyYWdCb3VuZHNQcm9wZXJ0eSBleHRlbmRzIERlcml2ZWRQcm9wZXJ0eSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0Tm9kZSAtIHRoZSBOb2RlIHRoYXQgaXMgdG8gYmUgY29uc3RyYWluZWRcclxuICAgKiBAcGFyYW0ge1RSZWFkT25seVByb3BlcnR5LjxCb3VuZHMyPn0gYm91bmRzUHJvcGVydHkgLSB0YXJnZXROb2RlIHdpbGwgYmUgZnVsbHkgaW5zaWRlIHRoZXNlIGJvdW5kcy4gU2hvdWxkIGJlIGdpdmVuIGluIHRoZVxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCBjb29yZGluYXRlIGZyYW1lIG9mIHRoZSB0YXJnZXROb2RlXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRhcmdldE5vZGUsIGJvdW5kc1Byb3BlcnR5ICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGFyZ2V0Tm9kZSBpbnN0YW5jZW9mIE5vZGUsIGBpbnZhbGlkIHRhcmdldE5vZGU6ICR7dGFyZ2V0Tm9kZX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBib3VuZHNQcm9wZXJ0eSBpbnN0YW5jZW9mIFByb3BlcnR5LCBgaW52YWxpZCBib3VuZHNQcm9wZXJ0eTogJHtib3VuZHNQcm9wZXJ0eX1gICk7XHJcblxyXG4gICAgc3VwZXIoIFsgdGFyZ2V0Tm9kZS5ib3VuZHNQcm9wZXJ0eSwgYm91bmRzUHJvcGVydHkgXSwgKCB0YXJnZXROb2RlQm91bmRzLCBib3VuZHMgKSA9PiB7XHJcbiAgICAgIC8vIFdlJ2xsIGdyYWIgdGhlIG9yaWdpbiBpbiB0aGUgcGFyZW50IGNvb3JkaW5hdGUgZnJhbWUsIHRvIGRldGVybWluZSBvdXIgYm91bmRzIG9mZnNldHMgaW4gdGhhdCBjb29yZGluYXRlIGZyYW1lLlxyXG4gICAgICAvLyBUaGlzIHdheSB3ZSdsbCBwcm9wZXJseSBoYW5kbGUgc2NhbGluZy9yb3RhdGlvbi9ldGMuXHJcbiAgICAgIGNvbnN0IHRhcmdldE9yaWdpbkluUGFyZW50Q29vcmRpbmF0ZXMgPSB0YXJnZXROb2RlLmxvY2FsVG9QYXJlbnRQb2ludCggVmVjdG9yMi5aRVJPICk7XHJcblxyXG4gICAgICAvLyBXZSdsbCBhZGp1c3QgdGhlIGJvdW5kcyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgYm91bmRzIHJlbGF0aXZlIHRvIGl0cyBvcmlnaW4uXHJcbiAgICAgIHJldHVybiBuZXcgQm91bmRzMihcclxuICAgICAgICBib3VuZHMubWluWCAtICggdGFyZ2V0Tm9kZUJvdW5kcy5taW5YIC0gdGFyZ2V0T3JpZ2luSW5QYXJlbnRDb29yZGluYXRlcy54ICksXHJcbiAgICAgICAgYm91bmRzLm1pblkgLSAoIHRhcmdldE5vZGVCb3VuZHMubWluWSAtIHRhcmdldE9yaWdpbkluUGFyZW50Q29vcmRpbmF0ZXMueSApLFxyXG4gICAgICAgIGJvdW5kcy5tYXhYIC0gKCB0YXJnZXROb2RlQm91bmRzLm1heFggLSB0YXJnZXRPcmlnaW5JblBhcmVudENvb3JkaW5hdGVzLnggKSxcclxuICAgICAgICBib3VuZHMubWF4WSAtICggdGFyZ2V0Tm9kZUJvdW5kcy5tYXhZIC0gdGFyZ2V0T3JpZ2luSW5QYXJlbnRDb29yZGluYXRlcy55IClcclxuICAgICAgKTtcclxuICAgIH0sIHtcclxuICAgICAgLy8gRG9uJ3QgbWFrZSBzcHVyaW91cyBjaGFuZ2VzLCB3ZSBvZnRlbiB3b24ndCBiZSBjaGFuZ2luZ1xyXG4gICAgICB2YWx1ZUNvbXBhcmlzb25TdHJhdGVneTogJ2VxdWFsc0Z1bmN0aW9uJ1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdEcmFnQm91bmRzUHJvcGVydHknLCBEcmFnQm91bmRzUHJvcGVydHkgKTtcclxuZXhwb3J0IGRlZmF1bHQgRHJhZ0JvdW5kc1Byb3BlcnR5OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLGtDQUFrQztBQUM5RCxPQUFPQyxRQUFRLE1BQU0sMkJBQTJCO0FBQ2hELE9BQU9DLE9BQU8sTUFBTSx5QkFBeUI7QUFDN0MsT0FBT0MsT0FBTyxNQUFNLHlCQUF5QjtBQUM3QyxTQUFTQyxJQUFJLFFBQVEsNkJBQTZCO0FBQ2xELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGtCQUFrQixTQUFTTixlQUFlLENBQUM7RUFFL0M7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxVQUFVLEVBQUVDLGNBQWMsRUFBRztJQUN4Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVGLFVBQVUsWUFBWUosSUFBSSxFQUFHLHVCQUFzQkksVUFBVyxFQUFFLENBQUM7SUFDbkZFLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxjQUFjLFlBQVlSLFFBQVEsRUFBRywyQkFBMEJRLGNBQWUsRUFBRSxDQUFDO0lBRW5HLEtBQUssQ0FBRSxDQUFFRCxVQUFVLENBQUNDLGNBQWMsRUFBRUEsY0FBYyxDQUFFLEVBQUUsQ0FBRUUsZ0JBQWdCLEVBQUVDLE1BQU0sS0FBTTtNQUNwRjtNQUNBO01BQ0EsTUFBTUMsK0JBQStCLEdBQUdMLFVBQVUsQ0FBQ00sa0JBQWtCLENBQUVYLE9BQU8sQ0FBQ1ksSUFBSyxDQUFDOztNQUVyRjtNQUNBLE9BQU8sSUFBSWIsT0FBTyxDQUNoQlUsTUFBTSxDQUFDSSxJQUFJLElBQUtMLGdCQUFnQixDQUFDSyxJQUFJLEdBQUdILCtCQUErQixDQUFDSSxDQUFDLENBQUUsRUFDM0VMLE1BQU0sQ0FBQ00sSUFBSSxJQUFLUCxnQkFBZ0IsQ0FBQ08sSUFBSSxHQUFHTCwrQkFBK0IsQ0FBQ00sQ0FBQyxDQUFFLEVBQzNFUCxNQUFNLENBQUNRLElBQUksSUFBS1QsZ0JBQWdCLENBQUNTLElBQUksR0FBR1AsK0JBQStCLENBQUNJLENBQUMsQ0FBRSxFQUMzRUwsTUFBTSxDQUFDUyxJQUFJLElBQUtWLGdCQUFnQixDQUFDVSxJQUFJLEdBQUdSLCtCQUErQixDQUFDTSxDQUFDLENBQzNFLENBQUM7SUFDSCxDQUFDLEVBQUU7TUFDRDtNQUNBRyx1QkFBdUIsRUFBRTtJQUMzQixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFqQixXQUFXLENBQUNrQixRQUFRLENBQUUsb0JBQW9CLEVBQUVqQixrQkFBbUIsQ0FBQztBQUNoRSxlQUFlQSxrQkFBa0IifQ==