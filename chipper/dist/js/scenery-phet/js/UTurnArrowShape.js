// Copyright 2014-2022, University of Colorado Boulder

/**
 * U-Turn arrow shape, for use with "reset" or "undo" purposes
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { Shape } from '../../kite/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
export default class UTurnArrowShape extends Shape {
  /**
   * @param size A size factor (it'll be a bit bigger)
   */
  constructor(size) {
    super();
    const strokeWidth = size * 0.3;
    const strokeOffset = strokeWidth / 2;
    const mainWidth = size * 0.6;
    const mainHeight = size;
    const headWidth = size * 0.5;
    const headHeight = size * 0.75;
    const halfHeadWidth = headWidth / 2;
    const halfHeadHeight = headHeight / 2;

    // starts adjacent to the arrowhead on the top, going clockwise
    this.moveTo(halfHeadWidth, -strokeOffset);
    this.lineTo(mainWidth, -strokeOffset);
    // arc (mainWidth,-strokeOffset) => (mainWidth,mainHeight+strokeOffset)
    this.arc(mainWidth, mainHeight / 2, mainHeight / 2 + strokeOffset, -Math.PI / 2, Math.PI / 2, false);
    this.lineTo(0, mainHeight + strokeOffset);
    this.lineTo(0, mainHeight - strokeOffset);
    this.lineTo(mainWidth, mainHeight - strokeOffset);
    // arc (mainWidth,mainHeight-strokeOffset) => (mainWidth,strokeOffset)
    this.arc(mainWidth, mainHeight / 2, mainHeight / 2 - strokeOffset, Math.PI / 2, -Math.PI / 2, true);
    this.lineTo(halfHeadWidth, strokeOffset);
    // three lines of the arrow head
    this.lineTo(halfHeadWidth, halfHeadHeight);
    this.lineTo(-halfHeadWidth, 0);
    this.lineTo(halfHeadWidth, -halfHeadHeight);
    this.close();
  }
}
sceneryPhet.register('UTurnArrowShape', UTurnArrowShape);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsInNjZW5lcnlQaGV0IiwiVVR1cm5BcnJvd1NoYXBlIiwiY29uc3RydWN0b3IiLCJzaXplIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VPZmZzZXQiLCJtYWluV2lkdGgiLCJtYWluSGVpZ2h0IiwiaGVhZFdpZHRoIiwiaGVhZEhlaWdodCIsImhhbGZIZWFkV2lkdGgiLCJoYWxmSGVhZEhlaWdodCIsIm1vdmVUbyIsImxpbmVUbyIsImFyYyIsIk1hdGgiLCJQSSIsImNsb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJVVHVybkFycm93U2hhcGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVS1UdXJuIGFycm93IHNoYXBlLCBmb3IgdXNlIHdpdGggXCJyZXNldFwiIG9yIFwidW5kb1wiIHB1cnBvc2VzXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVUdXJuQXJyb3dTaGFwZSBleHRlbmRzIFNoYXBlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHNpemUgQSBzaXplIGZhY3RvciAoaXQnbGwgYmUgYSBiaXQgYmlnZ2VyKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc2l6ZTogbnVtYmVyICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBjb25zdCBzdHJva2VXaWR0aCA9IHNpemUgKiAwLjM7XHJcbiAgICBjb25zdCBzdHJva2VPZmZzZXQgPSBzdHJva2VXaWR0aCAvIDI7XHJcbiAgICBjb25zdCBtYWluV2lkdGggPSBzaXplICogMC42O1xyXG4gICAgY29uc3QgbWFpbkhlaWdodCA9IHNpemU7XHJcbiAgICBjb25zdCBoZWFkV2lkdGggPSBzaXplICogMC41O1xyXG4gICAgY29uc3QgaGVhZEhlaWdodCA9IHNpemUgKiAwLjc1O1xyXG4gICAgY29uc3QgaGFsZkhlYWRXaWR0aCA9IGhlYWRXaWR0aCAvIDI7XHJcbiAgICBjb25zdCBoYWxmSGVhZEhlaWdodCA9IGhlYWRIZWlnaHQgLyAyO1xyXG5cclxuICAgIC8vIHN0YXJ0cyBhZGphY2VudCB0byB0aGUgYXJyb3doZWFkIG9uIHRoZSB0b3AsIGdvaW5nIGNsb2Nrd2lzZVxyXG4gICAgdGhpcy5tb3ZlVG8oIGhhbGZIZWFkV2lkdGgsIC1zdHJva2VPZmZzZXQgKTtcclxuICAgIHRoaXMubGluZVRvKCBtYWluV2lkdGgsIC1zdHJva2VPZmZzZXQgKTtcclxuICAgIC8vIGFyYyAobWFpbldpZHRoLC1zdHJva2VPZmZzZXQpID0+IChtYWluV2lkdGgsbWFpbkhlaWdodCtzdHJva2VPZmZzZXQpXHJcbiAgICB0aGlzLmFyYyggbWFpbldpZHRoLCBtYWluSGVpZ2h0IC8gMiwgbWFpbkhlaWdodCAvIDIgKyBzdHJva2VPZmZzZXQsIC1NYXRoLlBJIC8gMiwgTWF0aC5QSSAvIDIsIGZhbHNlICk7XHJcbiAgICB0aGlzLmxpbmVUbyggMCwgbWFpbkhlaWdodCArIHN0cm9rZU9mZnNldCApO1xyXG4gICAgdGhpcy5saW5lVG8oIDAsIG1haW5IZWlnaHQgLSBzdHJva2VPZmZzZXQgKTtcclxuICAgIHRoaXMubGluZVRvKCBtYWluV2lkdGgsIG1haW5IZWlnaHQgLSBzdHJva2VPZmZzZXQgKTtcclxuICAgIC8vIGFyYyAobWFpbldpZHRoLG1haW5IZWlnaHQtc3Ryb2tlT2Zmc2V0KSA9PiAobWFpbldpZHRoLHN0cm9rZU9mZnNldClcclxuICAgIHRoaXMuYXJjKCBtYWluV2lkdGgsIG1haW5IZWlnaHQgLyAyLCBtYWluSGVpZ2h0IC8gMiAtIHN0cm9rZU9mZnNldCwgTWF0aC5QSSAvIDIsIC1NYXRoLlBJIC8gMiwgdHJ1ZSApO1xyXG4gICAgdGhpcy5saW5lVG8oIGhhbGZIZWFkV2lkdGgsIHN0cm9rZU9mZnNldCApO1xyXG4gICAgLy8gdGhyZWUgbGluZXMgb2YgdGhlIGFycm93IGhlYWRcclxuICAgIHRoaXMubGluZVRvKCBoYWxmSGVhZFdpZHRoLCBoYWxmSGVhZEhlaWdodCApO1xyXG4gICAgdGhpcy5saW5lVG8oIC1oYWxmSGVhZFdpZHRoLCAwICk7XHJcbiAgICB0aGlzLmxpbmVUbyggaGFsZkhlYWRXaWR0aCwgLWhhbGZIZWFkSGVpZ2h0ICk7XHJcbiAgICB0aGlzLmNsb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1VUdXJuQXJyb3dTaGFwZScsIFVUdXJuQXJyb3dTaGFwZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsMEJBQTBCO0FBQ2hELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFFMUMsZUFBZSxNQUFNQyxlQUFlLFNBQVNGLEtBQUssQ0FBQztFQUVqRDtBQUNGO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsSUFBWSxFQUFHO0lBQ2pDLEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUMsV0FBVyxHQUFHRCxJQUFJLEdBQUcsR0FBRztJQUM5QixNQUFNRSxZQUFZLEdBQUdELFdBQVcsR0FBRyxDQUFDO0lBQ3BDLE1BQU1FLFNBQVMsR0FBR0gsSUFBSSxHQUFHLEdBQUc7SUFDNUIsTUFBTUksVUFBVSxHQUFHSixJQUFJO0lBQ3ZCLE1BQU1LLFNBQVMsR0FBR0wsSUFBSSxHQUFHLEdBQUc7SUFDNUIsTUFBTU0sVUFBVSxHQUFHTixJQUFJLEdBQUcsSUFBSTtJQUM5QixNQUFNTyxhQUFhLEdBQUdGLFNBQVMsR0FBRyxDQUFDO0lBQ25DLE1BQU1HLGNBQWMsR0FBR0YsVUFBVSxHQUFHLENBQUM7O0lBRXJDO0lBQ0EsSUFBSSxDQUFDRyxNQUFNLENBQUVGLGFBQWEsRUFBRSxDQUFDTCxZQUFhLENBQUM7SUFDM0MsSUFBSSxDQUFDUSxNQUFNLENBQUVQLFNBQVMsRUFBRSxDQUFDRCxZQUFhLENBQUM7SUFDdkM7SUFDQSxJQUFJLENBQUNTLEdBQUcsQ0FBRVIsU0FBUyxFQUFFQyxVQUFVLEdBQUcsQ0FBQyxFQUFFQSxVQUFVLEdBQUcsQ0FBQyxHQUFHRixZQUFZLEVBQUUsQ0FBQ1UsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxFQUFFRCxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBTSxDQUFDO0lBQ3RHLElBQUksQ0FBQ0gsTUFBTSxDQUFFLENBQUMsRUFBRU4sVUFBVSxHQUFHRixZQUFhLENBQUM7SUFDM0MsSUFBSSxDQUFDUSxNQUFNLENBQUUsQ0FBQyxFQUFFTixVQUFVLEdBQUdGLFlBQWEsQ0FBQztJQUMzQyxJQUFJLENBQUNRLE1BQU0sQ0FBRVAsU0FBUyxFQUFFQyxVQUFVLEdBQUdGLFlBQWEsQ0FBQztJQUNuRDtJQUNBLElBQUksQ0FBQ1MsR0FBRyxDQUFFUixTQUFTLEVBQUVDLFVBQVUsR0FBRyxDQUFDLEVBQUVBLFVBQVUsR0FBRyxDQUFDLEdBQUdGLFlBQVksRUFBRVUsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUNELElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFLLENBQUM7SUFDckcsSUFBSSxDQUFDSCxNQUFNLENBQUVILGFBQWEsRUFBRUwsWUFBYSxDQUFDO0lBQzFDO0lBQ0EsSUFBSSxDQUFDUSxNQUFNLENBQUVILGFBQWEsRUFBRUMsY0FBZSxDQUFDO0lBQzVDLElBQUksQ0FBQ0UsTUFBTSxDQUFFLENBQUNILGFBQWEsRUFBRSxDQUFFLENBQUM7SUFDaEMsSUFBSSxDQUFDRyxNQUFNLENBQUVILGFBQWEsRUFBRSxDQUFDQyxjQUFlLENBQUM7SUFDN0MsSUFBSSxDQUFDTSxLQUFLLENBQUMsQ0FBQztFQUNkO0FBQ0Y7QUFFQWpCLFdBQVcsQ0FBQ2tCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRWpCLGVBQWdCLENBQUMifQ==