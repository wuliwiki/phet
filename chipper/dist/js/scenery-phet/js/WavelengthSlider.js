// Copyright 2013-2022, University of Colorado Boulder

/**
 * Slider that shows a spectrum of colors for selecting a wavelength.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Utils from '../../dot/js/Utils.js';
import optionize from '../../phet-core/js/optionize.js';
import StringUtils from '../../phetcommon/js/util/StringUtils.js';
import sceneryPhet from './sceneryPhet.js';
import SceneryPhetStrings from './SceneryPhetStrings.js';
import SpectrumSlider from './SpectrumSlider.js';
import VisibleColor from './VisibleColor.js';
/**
 * @deprecated use WavelengthNumberControl, or Slider.js with SpectrumSliderTrack and SpectrumSliderTrack,
 *   see https://github.com/phetsims/scenery-phet/issues/729
 */
export default class WavelengthSlider extends SpectrumSlider {
  /**
   * @param wavelengthProperty - wavelength, in nm
   * @param providedOptions
   */
  constructor(wavelengthProperty, providedOptions) {
    // options that are specific to this type
    const options = optionize()({
      // SelfOptions
      minWavelength: VisibleColor.MIN_WAVELENGTH,
      maxWavelength: VisibleColor.MAX_WAVELENGTH,
      // SpectrumSliderOptions
      valueToString: function (value) {
        // NOTE: Because this class is deprecated, the API was not reworked to support dynamic strings here.
        return StringUtils.format(SceneryPhetStrings.WavelengthSlider.pattern_0wavelength_1unitsStringProperty.value, Utils.toFixed(value, 0), SceneryPhetStrings.units_nmStringProperty.value);
      },
      valueToColor: function (value) {
        return VisibleColor.wavelengthToColor(value);
      }
    }, providedOptions);
    options.minValue = options.minWavelength;
    options.maxValue = options.maxWavelength;
    super(wavelengthProperty, options);
  }
}
sceneryPhet.register('WavelengthSlider', WavelengthSlider);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIm9wdGlvbml6ZSIsIlN0cmluZ1V0aWxzIiwic2NlbmVyeVBoZXQiLCJTY2VuZXJ5UGhldFN0cmluZ3MiLCJTcGVjdHJ1bVNsaWRlciIsIlZpc2libGVDb2xvciIsIldhdmVsZW5ndGhTbGlkZXIiLCJjb25zdHJ1Y3RvciIsIndhdmVsZW5ndGhQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJtaW5XYXZlbGVuZ3RoIiwiTUlOX1dBVkVMRU5HVEgiLCJtYXhXYXZlbGVuZ3RoIiwiTUFYX1dBVkVMRU5HVEgiLCJ2YWx1ZVRvU3RyaW5nIiwidmFsdWUiLCJmb3JtYXQiLCJwYXR0ZXJuXzB3YXZlbGVuZ3RoXzF1bml0c1N0cmluZ1Byb3BlcnR5IiwidG9GaXhlZCIsInVuaXRzX25tU3RyaW5nUHJvcGVydHkiLCJ2YWx1ZVRvQ29sb3IiLCJ3YXZlbGVuZ3RoVG9Db2xvciIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldhdmVsZW5ndGhTbGlkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2xpZGVyIHRoYXQgc2hvd3MgYSBzcGVjdHJ1bSBvZiBjb2xvcnMgZm9yIHNlbGVjdGluZyBhIHdhdmVsZW5ndGguXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCBTY2VuZXJ5UGhldFN0cmluZ3MgZnJvbSAnLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgU3BlY3RydW1TbGlkZXIsIHsgU3BlY3RydW1TbGlkZXJPcHRpb25zIH0gZnJvbSAnLi9TcGVjdHJ1bVNsaWRlci5qcyc7XHJcbmltcG9ydCBWaXNpYmxlQ29sb3IgZnJvbSAnLi9WaXNpYmxlQ29sb3IuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBtaW5XYXZlbGVuZ3RoPzogbnVtYmVyO1xyXG4gIG1heFdhdmVsZW5ndGg/OiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBXYXZlbGVuZ3RoU2xpZGVyT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxTcGVjdHJ1bVNsaWRlck9wdGlvbnMsICdtaW5WYWx1ZScgfCAnbWF4VmFsdWUnPjtcclxuXHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCB1c2UgV2F2ZWxlbmd0aE51bWJlckNvbnRyb2wsIG9yIFNsaWRlci5qcyB3aXRoIFNwZWN0cnVtU2xpZGVyVHJhY2sgYW5kIFNwZWN0cnVtU2xpZGVyVHJhY2ssXHJcbiAqICAgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5LXBoZXQvaXNzdWVzLzcyOVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2F2ZWxlbmd0aFNsaWRlciBleHRlbmRzIFNwZWN0cnVtU2xpZGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHdhdmVsZW5ndGhQcm9wZXJ0eSAtIHdhdmVsZW5ndGgsIGluIG5tXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggd2F2ZWxlbmd0aFByb3BlcnR5OiBUUHJvcGVydHk8bnVtYmVyPiwgcHJvdmlkZWRPcHRpb25zPzogV2F2ZWxlbmd0aFNsaWRlck9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gb3B0aW9ucyB0aGF0IGFyZSBzcGVjaWZpYyB0byB0aGlzIHR5cGVcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8V2F2ZWxlbmd0aFNsaWRlck9wdGlvbnMsIFNlbGZPcHRpb25zLCBTcGVjdHJ1bVNsaWRlck9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIG1pbldhdmVsZW5ndGg6IFZpc2libGVDb2xvci5NSU5fV0FWRUxFTkdUSCxcclxuICAgICAgbWF4V2F2ZWxlbmd0aDogVmlzaWJsZUNvbG9yLk1BWF9XQVZFTEVOR1RILFxyXG5cclxuICAgICAgLy8gU3BlY3RydW1TbGlkZXJPcHRpb25zXHJcbiAgICAgIHZhbHVlVG9TdHJpbmc6IGZ1bmN0aW9uKCB2YWx1ZTogbnVtYmVyICkge1xyXG5cclxuICAgICAgICAvLyBOT1RFOiBCZWNhdXNlIHRoaXMgY2xhc3MgaXMgZGVwcmVjYXRlZCwgdGhlIEFQSSB3YXMgbm90IHJld29ya2VkIHRvIHN1cHBvcnQgZHluYW1pYyBzdHJpbmdzIGhlcmUuXHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ1V0aWxzLmZvcm1hdCggU2NlbmVyeVBoZXRTdHJpbmdzLldhdmVsZW5ndGhTbGlkZXIucGF0dGVybl8wd2F2ZWxlbmd0aF8xdW5pdHNTdHJpbmdQcm9wZXJ0eS52YWx1ZSxcclxuICAgICAgICAgIFV0aWxzLnRvRml4ZWQoIHZhbHVlLCAwICksIFNjZW5lcnlQaGV0U3RyaW5ncy51bml0c19ubVN0cmluZ1Byb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHZhbHVlVG9Db2xvcjogZnVuY3Rpb24oIHZhbHVlOiBudW1iZXIgKSB7XHJcbiAgICAgICAgcmV0dXJuIFZpc2libGVDb2xvci53YXZlbGVuZ3RoVG9Db2xvciggdmFsdWUgKTtcclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy5taW5WYWx1ZSA9IG9wdGlvbnMubWluV2F2ZWxlbmd0aDtcclxuICAgIG9wdGlvbnMubWF4VmFsdWUgPSBvcHRpb25zLm1heFdhdmVsZW5ndGg7XHJcblxyXG4gICAgc3VwZXIoIHdhdmVsZW5ndGhQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdXYXZlbGVuZ3RoU2xpZGVyJywgV2F2ZWxlbmd0aFNsaWRlciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLEtBQUssTUFBTSx1QkFBdUI7QUFDekMsT0FBT0MsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxXQUFXLE1BQU0seUNBQXlDO0FBQ2pFLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBQ3hELE9BQU9DLGNBQWMsTUFBaUMscUJBQXFCO0FBQzNFLE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFTNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU1DLGdCQUFnQixTQUFTRixjQUFjLENBQUM7RUFFM0Q7QUFDRjtBQUNBO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsa0JBQXFDLEVBQUVDLGVBQXlDLEVBQUc7SUFFckc7SUFDQSxNQUFNQyxPQUFPLEdBQUdWLFNBQVMsQ0FBOEQsQ0FBQyxDQUFFO01BRXhGO01BQ0FXLGFBQWEsRUFBRU4sWUFBWSxDQUFDTyxjQUFjO01BQzFDQyxhQUFhLEVBQUVSLFlBQVksQ0FBQ1MsY0FBYztNQUUxQztNQUNBQyxhQUFhLEVBQUUsU0FBQUEsQ0FBVUMsS0FBYSxFQUFHO1FBRXZDO1FBQ0EsT0FBT2YsV0FBVyxDQUFDZ0IsTUFBTSxDQUFFZCxrQkFBa0IsQ0FBQ0csZ0JBQWdCLENBQUNZLHdDQUF3QyxDQUFDRixLQUFLLEVBQzNHakIsS0FBSyxDQUFDb0IsT0FBTyxDQUFFSCxLQUFLLEVBQUUsQ0FBRSxDQUFDLEVBQUViLGtCQUFrQixDQUFDaUIsc0JBQXNCLENBQUNKLEtBQU0sQ0FBQztNQUNoRixDQUFDO01BQ0RLLFlBQVksRUFBRSxTQUFBQSxDQUFVTCxLQUFhLEVBQUc7UUFDdEMsT0FBT1gsWUFBWSxDQUFDaUIsaUJBQWlCLENBQUVOLEtBQU0sQ0FBQztNQUNoRDtJQUNGLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQztJQUVwQkMsT0FBTyxDQUFDYSxRQUFRLEdBQUdiLE9BQU8sQ0FBQ0MsYUFBYTtJQUN4Q0QsT0FBTyxDQUFDYyxRQUFRLEdBQUdkLE9BQU8sQ0FBQ0csYUFBYTtJQUV4QyxLQUFLLENBQUVMLGtCQUFrQixFQUFFRSxPQUFRLENBQUM7RUFDdEM7QUFDRjtBQUVBUixXQUFXLENBQUN1QixRQUFRLENBQUUsa0JBQWtCLEVBQUVuQixnQkFBaUIsQ0FBQyJ9