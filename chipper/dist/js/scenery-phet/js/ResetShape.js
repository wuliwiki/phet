// Copyright 2016-2022, University of Colorado Boulder

/**
 * Shape used to indicate 'reset' of something, used on ResetButton.
 * Origin is at the center of the circle.
 *
 * @author John Blanco
 */

import { Shape } from '../../kite/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
export default class ResetShape extends Shape {
  /**
   * @param radius of the center of the reset arrow
   */
  constructor(radius) {
    super();

    // Adjust these parameters to tweak the appearance of the arrow.
    const INNER_RADIUS = radius * 0.4;
    const OUTER_RADIUS = radius * 0.625;
    const HEAD_WIDTH = 2.25 * (OUTER_RADIUS - INNER_RADIUS);
    const START_ANGLE = -Math.PI * 0.35;
    const END_TO_NECK_ANGULAR_SPAN = -2 * Math.PI * 0.85;
    const ARROW_HEAD_ANGULAR_SPAN = -Math.PI * 0.18;

    // Create the curved arrow shape, starting at the inside of the non-pointed end.
    // Inner edge of end.
    this.moveTo(INNER_RADIUS * Math.cos(START_ANGLE), INNER_RADIUS * Math.sin(START_ANGLE));
    this.lineTo(OUTER_RADIUS * Math.cos(START_ANGLE), OUTER_RADIUS * Math.sin(START_ANGLE));
    const neckAngle = START_ANGLE + END_TO_NECK_ANGULAR_SPAN;

    // Outer curve.
    this.arc(0, 0, OUTER_RADIUS, START_ANGLE, neckAngle, true);
    const HEAD_WIDTHExtrusion = (HEAD_WIDTH - (OUTER_RADIUS - INNER_RADIUS)) / 2;
    this.lineTo((OUTER_RADIUS + HEAD_WIDTHExtrusion) * Math.cos(neckAngle), (OUTER_RADIUS + HEAD_WIDTHExtrusion) * Math.sin(neckAngle));

    // Tip of arrowhead.
    const pointRadius = (OUTER_RADIUS + INNER_RADIUS) * 0.55; // Tweaked a little from center for better look.
    this.lineTo(pointRadius * Math.cos(neckAngle + ARROW_HEAD_ANGULAR_SPAN), pointRadius * Math.sin(neckAngle + ARROW_HEAD_ANGULAR_SPAN));
    this.lineTo((INNER_RADIUS - HEAD_WIDTHExtrusion) * Math.cos(neckAngle), (INNER_RADIUS - HEAD_WIDTHExtrusion) * Math.sin(neckAngle));
    this.lineTo(INNER_RADIUS * Math.cos(neckAngle), INNER_RADIUS * Math.sin(neckAngle));

    // Inner curve.
    this.arc(0, 0, INNER_RADIUS, neckAngle, START_ANGLE);
    this.close();
  }
}
sceneryPhet.register('ResetShape', ResetShape);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsInNjZW5lcnlQaGV0IiwiUmVzZXRTaGFwZSIsImNvbnN0cnVjdG9yIiwicmFkaXVzIiwiSU5ORVJfUkFESVVTIiwiT1VURVJfUkFESVVTIiwiSEVBRF9XSURUSCIsIlNUQVJUX0FOR0xFIiwiTWF0aCIsIlBJIiwiRU5EX1RPX05FQ0tfQU5HVUxBUl9TUEFOIiwiQVJST1dfSEVBRF9BTkdVTEFSX1NQQU4iLCJtb3ZlVG8iLCJjb3MiLCJzaW4iLCJsaW5lVG8iLCJuZWNrQW5nbGUiLCJhcmMiLCJIRUFEX1dJRFRIRXh0cnVzaW9uIiwicG9pbnRSYWRpdXMiLCJjbG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVzZXRTaGFwZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaGFwZSB1c2VkIHRvIGluZGljYXRlICdyZXNldCcgb2Ygc29tZXRoaW5nLCB1c2VkIG9uIFJlc2V0QnV0dG9uLlxyXG4gKiBPcmlnaW4gaXMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY2lyY2xlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNldFNoYXBlIGV4dGVuZHMgU2hhcGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcmFkaXVzIG9mIHRoZSBjZW50ZXIgb2YgdGhlIHJlc2V0IGFycm93XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCByYWRpdXM6IG51bWJlciApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIEFkanVzdCB0aGVzZSBwYXJhbWV0ZXJzIHRvIHR3ZWFrIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBhcnJvdy5cclxuICAgIGNvbnN0IElOTkVSX1JBRElVUyA9IHJhZGl1cyAqIDAuNDtcclxuICAgIGNvbnN0IE9VVEVSX1JBRElVUyA9IHJhZGl1cyAqIDAuNjI1O1xyXG4gICAgY29uc3QgSEVBRF9XSURUSCA9IDIuMjUgKiAoIE9VVEVSX1JBRElVUyAtIElOTkVSX1JBRElVUyApO1xyXG4gICAgY29uc3QgU1RBUlRfQU5HTEUgPSAtTWF0aC5QSSAqIDAuMzU7XHJcbiAgICBjb25zdCBFTkRfVE9fTkVDS19BTkdVTEFSX1NQQU4gPSAtMiAqIE1hdGguUEkgKiAwLjg1O1xyXG4gICAgY29uc3QgQVJST1dfSEVBRF9BTkdVTEFSX1NQQU4gPSAtTWF0aC5QSSAqIDAuMTg7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBjdXJ2ZWQgYXJyb3cgc2hhcGUsIHN0YXJ0aW5nIGF0IHRoZSBpbnNpZGUgb2YgdGhlIG5vbi1wb2ludGVkIGVuZC5cclxuICAgIC8vIElubmVyIGVkZ2Ugb2YgZW5kLlxyXG4gICAgdGhpcy5tb3ZlVG8oIElOTkVSX1JBRElVUyAqIE1hdGguY29zKCBTVEFSVF9BTkdMRSApLCBJTk5FUl9SQURJVVMgKiBNYXRoLnNpbiggU1RBUlRfQU5HTEUgKSApO1xyXG4gICAgdGhpcy5saW5lVG8oIE9VVEVSX1JBRElVUyAqIE1hdGguY29zKCBTVEFSVF9BTkdMRSApLCBPVVRFUl9SQURJVVMgKiBNYXRoLnNpbiggU1RBUlRfQU5HTEUgKSApO1xyXG4gICAgY29uc3QgbmVja0FuZ2xlID0gU1RBUlRfQU5HTEUgKyBFTkRfVE9fTkVDS19BTkdVTEFSX1NQQU47XHJcblxyXG4gICAgLy8gT3V0ZXIgY3VydmUuXHJcbiAgICB0aGlzLmFyYyggMCwgMCwgT1VURVJfUkFESVVTLCBTVEFSVF9BTkdMRSwgbmVja0FuZ2xlLCB0cnVlICk7XHJcbiAgICBjb25zdCBIRUFEX1dJRFRIRXh0cnVzaW9uID0gKCBIRUFEX1dJRFRIIC0gKCBPVVRFUl9SQURJVVMgLSBJTk5FUl9SQURJVVMgKSApIC8gMjtcclxuICAgIHRoaXMubGluZVRvKFxyXG4gICAgICAoIE9VVEVSX1JBRElVUyArIEhFQURfV0lEVEhFeHRydXNpb24gKSAqIE1hdGguY29zKCBuZWNrQW5nbGUgKSxcclxuICAgICAgKCBPVVRFUl9SQURJVVMgKyBIRUFEX1dJRFRIRXh0cnVzaW9uICkgKiBNYXRoLnNpbiggbmVja0FuZ2xlICkgKTtcclxuXHJcbiAgICAvLyBUaXAgb2YgYXJyb3doZWFkLlxyXG4gICAgY29uc3QgcG9pbnRSYWRpdXMgPSAoIE9VVEVSX1JBRElVUyArIElOTkVSX1JBRElVUyApICogMC41NTsgLy8gVHdlYWtlZCBhIGxpdHRsZSBmcm9tIGNlbnRlciBmb3IgYmV0dGVyIGxvb2suXHJcbiAgICB0aGlzLmxpbmVUbyhcclxuICAgICAgcG9pbnRSYWRpdXMgKiBNYXRoLmNvcyggbmVja0FuZ2xlICsgQVJST1dfSEVBRF9BTkdVTEFSX1NQQU4gKSxcclxuICAgICAgcG9pbnRSYWRpdXMgKiBNYXRoLnNpbiggbmVja0FuZ2xlICsgQVJST1dfSEVBRF9BTkdVTEFSX1NQQU4gKSApO1xyXG4gICAgdGhpcy5saW5lVG8oXHJcbiAgICAgICggSU5ORVJfUkFESVVTIC0gSEVBRF9XSURUSEV4dHJ1c2lvbiApICogTWF0aC5jb3MoIG5lY2tBbmdsZSApLFxyXG4gICAgICAoIElOTkVSX1JBRElVUyAtIEhFQURfV0lEVEhFeHRydXNpb24gKSAqIE1hdGguc2luKCBuZWNrQW5nbGUgKSApO1xyXG4gICAgdGhpcy5saW5lVG8oXHJcbiAgICAgIElOTkVSX1JBRElVUyAqIE1hdGguY29zKCBuZWNrQW5nbGUgKSxcclxuICAgICAgSU5ORVJfUkFESVVTICogTWF0aC5zaW4oIG5lY2tBbmdsZSApICk7XHJcblxyXG4gICAgLy8gSW5uZXIgY3VydmUuXHJcbiAgICB0aGlzLmFyYyggMCwgMCwgSU5ORVJfUkFESVVTLCBuZWNrQW5nbGUsIFNUQVJUX0FOR0xFICk7XHJcbiAgICB0aGlzLmNsb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1Jlc2V0U2hhcGUnLCBSZXNldFNoYXBlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLDBCQUEwQjtBQUNoRCxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRTFDLGVBQWUsTUFBTUMsVUFBVSxTQUFTRixLQUFLLENBQUM7RUFFNUM7QUFDRjtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBLE1BQU1DLFlBQVksR0FBR0QsTUFBTSxHQUFHLEdBQUc7SUFDakMsTUFBTUUsWUFBWSxHQUFHRixNQUFNLEdBQUcsS0FBSztJQUNuQyxNQUFNRyxVQUFVLEdBQUcsSUFBSSxJQUFLRCxZQUFZLEdBQUdELFlBQVksQ0FBRTtJQUN6RCxNQUFNRyxXQUFXLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDQyxFQUFFLEdBQUcsSUFBSTtJQUNuQyxNQUFNQyx3QkFBd0IsR0FBRyxDQUFDLENBQUMsR0FBR0YsSUFBSSxDQUFDQyxFQUFFLEdBQUcsSUFBSTtJQUNwRCxNQUFNRSx1QkFBdUIsR0FBRyxDQUFDSCxJQUFJLENBQUNDLEVBQUUsR0FBRyxJQUFJOztJQUUvQztJQUNBO0lBQ0EsSUFBSSxDQUFDRyxNQUFNLENBQUVSLFlBQVksR0FBR0ksSUFBSSxDQUFDSyxHQUFHLENBQUVOLFdBQVksQ0FBQyxFQUFFSCxZQUFZLEdBQUdJLElBQUksQ0FBQ00sR0FBRyxDQUFFUCxXQUFZLENBQUUsQ0FBQztJQUM3RixJQUFJLENBQUNRLE1BQU0sQ0FBRVYsWUFBWSxHQUFHRyxJQUFJLENBQUNLLEdBQUcsQ0FBRU4sV0FBWSxDQUFDLEVBQUVGLFlBQVksR0FBR0csSUFBSSxDQUFDTSxHQUFHLENBQUVQLFdBQVksQ0FBRSxDQUFDO0lBQzdGLE1BQU1TLFNBQVMsR0FBR1QsV0FBVyxHQUFHRyx3QkFBd0I7O0lBRXhEO0lBQ0EsSUFBSSxDQUFDTyxHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVosWUFBWSxFQUFFRSxXQUFXLEVBQUVTLFNBQVMsRUFBRSxJQUFLLENBQUM7SUFDNUQsTUFBTUUsbUJBQW1CLEdBQUcsQ0FBRVosVUFBVSxJQUFLRCxZQUFZLEdBQUdELFlBQVksQ0FBRSxJQUFLLENBQUM7SUFDaEYsSUFBSSxDQUFDVyxNQUFNLENBQ1QsQ0FBRVYsWUFBWSxHQUFHYSxtQkFBbUIsSUFBS1YsSUFBSSxDQUFDSyxHQUFHLENBQUVHLFNBQVUsQ0FBQyxFQUM5RCxDQUFFWCxZQUFZLEdBQUdhLG1CQUFtQixJQUFLVixJQUFJLENBQUNNLEdBQUcsQ0FBRUUsU0FBVSxDQUFFLENBQUM7O0lBRWxFO0lBQ0EsTUFBTUcsV0FBVyxHQUFHLENBQUVkLFlBQVksR0FBR0QsWUFBWSxJQUFLLElBQUksQ0FBQyxDQUFDO0lBQzVELElBQUksQ0FBQ1csTUFBTSxDQUNUSSxXQUFXLEdBQUdYLElBQUksQ0FBQ0ssR0FBRyxDQUFFRyxTQUFTLEdBQUdMLHVCQUF3QixDQUFDLEVBQzdEUSxXQUFXLEdBQUdYLElBQUksQ0FBQ00sR0FBRyxDQUFFRSxTQUFTLEdBQUdMLHVCQUF3QixDQUFFLENBQUM7SUFDakUsSUFBSSxDQUFDSSxNQUFNLENBQ1QsQ0FBRVgsWUFBWSxHQUFHYyxtQkFBbUIsSUFBS1YsSUFBSSxDQUFDSyxHQUFHLENBQUVHLFNBQVUsQ0FBQyxFQUM5RCxDQUFFWixZQUFZLEdBQUdjLG1CQUFtQixJQUFLVixJQUFJLENBQUNNLEdBQUcsQ0FBRUUsU0FBVSxDQUFFLENBQUM7SUFDbEUsSUFBSSxDQUFDRCxNQUFNLENBQ1RYLFlBQVksR0FBR0ksSUFBSSxDQUFDSyxHQUFHLENBQUVHLFNBQVUsQ0FBQyxFQUNwQ1osWUFBWSxHQUFHSSxJQUFJLENBQUNNLEdBQUcsQ0FBRUUsU0FBVSxDQUFFLENBQUM7O0lBRXhDO0lBQ0EsSUFBSSxDQUFDQyxHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRWIsWUFBWSxFQUFFWSxTQUFTLEVBQUVULFdBQVksQ0FBQztJQUN0RCxJQUFJLENBQUNhLEtBQUssQ0FBQyxDQUFDO0VBQ2Q7QUFDRjtBQUVBcEIsV0FBVyxDQUFDcUIsUUFBUSxDQUFFLFlBQVksRUFBRXBCLFVBQVcsQ0FBQyJ9