// Copyright 2019-2021, University of Colorado Boulder

/**
 * Visual representation of a capacitor plate.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import Bounds3 from '../../../dot/js/Bounds3.js';
import { Color } from '../../../scenery/js/imports.js';
import sceneryPhet from '../sceneryPhet.js';
import BoxNode from './BoxNode.js';
import CapacitorConstants from './CapacitorConstants.js';
import PlateChargeNode from './PlateChargeNode.js';

// constants
const PLATE_COLOR = new Color(245, 245, 245); // capacitor plates

class PlateNode extends BoxNode {
  /**
   * @param {Capacitor} capacitor
   * @param {YawPitchModelViewTransform3} modelViewTransform
   * @param {string} polarity - 'POSITIVE' or 'NEGATIVE'
   * @param {number} maxPlateCharge
   * @param {string} orientation
   * @param {boolean} [includeChargeNode=true] - if the charges can be shown.  This option was added for CCK toolbox icons, where
   *                                           - charges are never shown, but the canvas was too large and threw off the bounds
   */
  constructor(capacitor, modelViewTransform, polarity, maxPlateCharge, orientation, includeChargeNode = true) {
    super(modelViewTransform, PLATE_COLOR, capacitor.plateSizeProperty.value);

    // @private {YawPitchModelViewTransform3}
    this.modelViewTransform = modelViewTransform;

    // Charges restricted to the largest possible top face on a capacitor plate.  Bounds needed for canvas.
    const canvasBounds = this.getMaxBoxNodeBounds();

    // @private {PlateChargeNode}
    this.plateChargeNode = new PlateChargeNode(capacitor, modelViewTransform, {
      polarity: polarity,
      maxPlateCharge: maxPlateCharge,
      canvasBounds: canvasBounds,
      orientation: orientation
    });
    includeChargeNode && this.addChild(this.plateChargeNode);
  }

  /**
   * Make the charges on this plate visible.
   * @public
   *
   * @param {boolean} visible
   */
  setChargeVisible(visible) {
    this.plateChargeNode.visible = visible;
  }

  /**
   * Get bounds for a plate with maximum width.  Useful for layout and bounds calculations.
   * @private
   *
   * @returns {Bounds3}
   */
  getMaxBoxNodeBounds() {
    const maxWidthBoxNode = new BoxNode(this.modelViewTransform, PLATE_COLOR, new Bounds3(0, 0, 0, CapacitorConstants.PLATE_WIDTH_RANGE.max, CapacitorConstants.PLATE_HEIGHT, CapacitorConstants.PLATE_WIDTH_RANGE.max));
    return maxWidthBoxNode.bounds;
  }
}
sceneryPhet.register('PlateNode', PlateNode);
export default PlateNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMzIiwiQ29sb3IiLCJzY2VuZXJ5UGhldCIsIkJveE5vZGUiLCJDYXBhY2l0b3JDb25zdGFudHMiLCJQbGF0ZUNoYXJnZU5vZGUiLCJQTEFURV9DT0xPUiIsIlBsYXRlTm9kZSIsImNvbnN0cnVjdG9yIiwiY2FwYWNpdG9yIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicG9sYXJpdHkiLCJtYXhQbGF0ZUNoYXJnZSIsIm9yaWVudGF0aW9uIiwiaW5jbHVkZUNoYXJnZU5vZGUiLCJwbGF0ZVNpemVQcm9wZXJ0eSIsInZhbHVlIiwiY2FudmFzQm91bmRzIiwiZ2V0TWF4Qm94Tm9kZUJvdW5kcyIsInBsYXRlQ2hhcmdlTm9kZSIsImFkZENoaWxkIiwic2V0Q2hhcmdlVmlzaWJsZSIsInZpc2libGUiLCJtYXhXaWR0aEJveE5vZGUiLCJQTEFURV9XSURUSF9SQU5HRSIsIm1heCIsIlBMQVRFX0hFSUdIVCIsImJvdW5kcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxhdGVOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiBhIGNhcGFjaXRvciBwbGF0ZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMzIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMzLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgQm94Tm9kZSBmcm9tICcuL0JveE5vZGUuanMnO1xyXG5pbXBvcnQgQ2FwYWNpdG9yQ29uc3RhbnRzIGZyb20gJy4vQ2FwYWNpdG9yQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFBsYXRlQ2hhcmdlTm9kZSBmcm9tICcuL1BsYXRlQ2hhcmdlTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgUExBVEVfQ09MT1IgPSBuZXcgQ29sb3IoIDI0NSwgMjQ1LCAyNDUgKTsgIC8vIGNhcGFjaXRvciBwbGF0ZXNcclxuXHJcbmNsYXNzIFBsYXRlTm9kZSBleHRlbmRzIEJveE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0NhcGFjaXRvcn0gY2FwYWNpdG9yXHJcbiAgICogQHBhcmFtIHtZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTN9IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwb2xhcml0eSAtICdQT1NJVElWRScgb3IgJ05FR0FUSVZFJ1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQbGF0ZUNoYXJnZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmllbnRhdGlvblxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luY2x1ZGVDaGFyZ2VOb2RlPXRydWVdIC0gaWYgdGhlIGNoYXJnZXMgY2FuIGJlIHNob3duLiAgVGhpcyBvcHRpb24gd2FzIGFkZGVkIGZvciBDQ0sgdG9vbGJveCBpY29ucywgd2hlcmVcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIGNoYXJnZXMgYXJlIG5ldmVyIHNob3duLCBidXQgdGhlIGNhbnZhcyB3YXMgdG9vIGxhcmdlIGFuZCB0aHJldyBvZmYgdGhlIGJvdW5kc1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBjYXBhY2l0b3IsIG1vZGVsVmlld1RyYW5zZm9ybSwgcG9sYXJpdHksIG1heFBsYXRlQ2hhcmdlLCBvcmllbnRhdGlvbiwgaW5jbHVkZUNoYXJnZU5vZGUgPSB0cnVlICkge1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbFZpZXdUcmFuc2Zvcm0sIFBMQVRFX0NPTE9SLCBjYXBhY2l0b3IucGxhdGVTaXplUHJvcGVydHkudmFsdWUgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7WWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zfVxyXG4gICAgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0gPSBtb2RlbFZpZXdUcmFuc2Zvcm07XHJcblxyXG4gICAgLy8gQ2hhcmdlcyByZXN0cmljdGVkIHRvIHRoZSBsYXJnZXN0IHBvc3NpYmxlIHRvcCBmYWNlIG9uIGEgY2FwYWNpdG9yIHBsYXRlLiAgQm91bmRzIG5lZWRlZCBmb3IgY2FudmFzLlxyXG4gICAgY29uc3QgY2FudmFzQm91bmRzID0gdGhpcy5nZXRNYXhCb3hOb2RlQm91bmRzKCk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge1BsYXRlQ2hhcmdlTm9kZX1cclxuICAgIHRoaXMucGxhdGVDaGFyZ2VOb2RlID0gbmV3IFBsYXRlQ2hhcmdlTm9kZSggY2FwYWNpdG9yLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgcG9sYXJpdHk6IHBvbGFyaXR5LFxyXG4gICAgICBtYXhQbGF0ZUNoYXJnZTogbWF4UGxhdGVDaGFyZ2UsXHJcbiAgICAgIGNhbnZhc0JvdW5kczogY2FudmFzQm91bmRzLFxyXG4gICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb25cclxuICAgIH0gKTtcclxuICAgIGluY2x1ZGVDaGFyZ2VOb2RlICYmIHRoaXMuYWRkQ2hpbGQoIHRoaXMucGxhdGVDaGFyZ2VOb2RlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYWtlIHRoZSBjaGFyZ2VzIG9uIHRoaXMgcGxhdGUgdmlzaWJsZS5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZpc2libGVcclxuICAgKi9cclxuICBzZXRDaGFyZ2VWaXNpYmxlKCB2aXNpYmxlICkge1xyXG4gICAgdGhpcy5wbGF0ZUNoYXJnZU5vZGUudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYm91bmRzIGZvciBhIHBsYXRlIHdpdGggbWF4aW11bSB3aWR0aC4gIFVzZWZ1bCBmb3IgbGF5b3V0IGFuZCBib3VuZHMgY2FsY3VsYXRpb25zLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Qm91bmRzM31cclxuICAgKi9cclxuICBnZXRNYXhCb3hOb2RlQm91bmRzKCkge1xyXG4gICAgY29uc3QgbWF4V2lkdGhCb3hOb2RlID0gbmV3IEJveE5vZGUoXHJcbiAgICAgIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICBQTEFURV9DT0xPUixcclxuICAgICAgbmV3IEJvdW5kczMoIDAsIDAsIDAsXHJcbiAgICAgICAgQ2FwYWNpdG9yQ29uc3RhbnRzLlBMQVRFX1dJRFRIX1JBTkdFLm1heCxcclxuICAgICAgICBDYXBhY2l0b3JDb25zdGFudHMuUExBVEVfSEVJR0hULFxyXG4gICAgICAgIENhcGFjaXRvckNvbnN0YW50cy5QTEFURV9XSURUSF9SQU5HRS5tYXggKVxyXG4gICAgKTtcclxuICAgIHJldHVybiBtYXhXaWR0aEJveE5vZGUuYm91bmRzO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdQbGF0ZU5vZGUnLCBQbGF0ZU5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgUGxhdGVOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLDRCQUE0QjtBQUNoRCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7QUFDM0MsT0FBT0MsT0FBTyxNQUFNLGNBQWM7QUFDbEMsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBQ3hELE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7O0FBRWxEO0FBQ0EsTUFBTUMsV0FBVyxHQUFHLElBQUlMLEtBQUssQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUksQ0FBQyxDQUFDLENBQUU7O0FBRWpELE1BQU1NLFNBQVMsU0FBU0osT0FBTyxDQUFDO0VBRTlCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxTQUFTLEVBQUVDLGtCQUFrQixFQUFFQyxRQUFRLEVBQUVDLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxpQkFBaUIsR0FBRyxJQUFJLEVBQUc7SUFFNUcsS0FBSyxDQUFFSixrQkFBa0IsRUFBRUosV0FBVyxFQUFFRyxTQUFTLENBQUNNLGlCQUFpQixDQUFDQyxLQUFNLENBQUM7O0lBRTNFO0lBQ0EsSUFBSSxDQUFDTixrQkFBa0IsR0FBR0Esa0JBQWtCOztJQUU1QztJQUNBLE1BQU1PLFlBQVksR0FBRyxJQUFJLENBQUNDLG1CQUFtQixDQUFDLENBQUM7O0lBRS9DO0lBQ0EsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSWQsZUFBZSxDQUFFSSxTQUFTLEVBQUVDLGtCQUFrQixFQUFFO01BQ3pFQyxRQUFRLEVBQUVBLFFBQVE7TUFDbEJDLGNBQWMsRUFBRUEsY0FBYztNQUM5QkssWUFBWSxFQUFFQSxZQUFZO01BQzFCSixXQUFXLEVBQUVBO0lBQ2YsQ0FBRSxDQUFDO0lBQ0hDLGlCQUFpQixJQUFJLElBQUksQ0FBQ00sUUFBUSxDQUFFLElBQUksQ0FBQ0QsZUFBZ0IsQ0FBQztFQUM1RDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsZ0JBQWdCQSxDQUFFQyxPQUFPLEVBQUc7SUFDMUIsSUFBSSxDQUFDSCxlQUFlLENBQUNHLE9BQU8sR0FBR0EsT0FBTztFQUN4Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUosbUJBQW1CQSxDQUFBLEVBQUc7SUFDcEIsTUFBTUssZUFBZSxHQUFHLElBQUlwQixPQUFPLENBQ2pDLElBQUksQ0FBQ08sa0JBQWtCLEVBQ3ZCSixXQUFXLEVBQ1gsSUFBSU4sT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNsQkksa0JBQWtCLENBQUNvQixpQkFBaUIsQ0FBQ0MsR0FBRyxFQUN4Q3JCLGtCQUFrQixDQUFDc0IsWUFBWSxFQUMvQnRCLGtCQUFrQixDQUFDb0IsaUJBQWlCLENBQUNDLEdBQUksQ0FDN0MsQ0FBQztJQUNELE9BQU9GLGVBQWUsQ0FBQ0ksTUFBTTtFQUMvQjtBQUNGO0FBRUF6QixXQUFXLENBQUMwQixRQUFRLENBQUUsV0FBVyxFQUFFckIsU0FBVSxDQUFDO0FBQzlDLGVBQWVBLFNBQVMifQ==