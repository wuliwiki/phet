// Copyright 2023, University of Colorado Boulder
/**
 *
 * @author Agust√≠n Vallejo (PhET Interactive Simulations)
 */

import { Path } from '../../../scenery/js/imports.js';
import Vector2 from '../../../dot/js/Vector2.js';
import { Shape } from '../../../kite/js/imports.js';
import SolarSystemCommonColors from '../SolarSystemCommonColors.js';
import { combineOptions } from '../../../phet-core/js/optionize.js';
import NumberProperty from '../../../axon/js/NumberProperty.js';
import Animation from '../../../twixt/js/Animation.js';
import Easing from '../../../twixt/js/Easing.js';
import solarSystemCommon from '../solarSystemCommon.js';
export default class ExplosionNode extends Path {
  constructor(providedOptions) {
    const options = combineOptions({
      fill: SolarSystemCommonColors.explosionColorProperty
    }, providedOptions);
    const radius = 40;
    const numSegments = 14;
    const shape = new Shape();
    shape.moveTo(0, 0);
    for (let i = 0; i < numSegments + 1; i++) {
      shape.lineToPoint(Vector2.createPolar(i % 2 === 0 ? radius * 2 : radius, i * Math.PI * 2 / numSegments));
    }
    shape.close();
    super(shape, options);
  }
  static explode(node) {
    const explosionPath = new ExplosionNode({
      center: node.translation
    });
    node.parents[0].addChild(explosionPath);
    const startingRadius = 0.1;
    const maximumRadius = 1;
    const scaleProperty = new NumberProperty(startingRadius);
    scaleProperty.link(scale => explosionPath.setScaleMagnitude(scale));
    const duration = 0.16;
    const firstAnimation = new Animation({
      property: scaleProperty,
      to: maximumRadius,
      duration: duration,
      easing: Easing.QUADRATIC_OUT
    });
    const secondAnimation = new Animation({
      property: scaleProperty,
      to: startingRadius,
      duration: duration,
      easing: Easing.QUADRATIC_IN
    });
    firstAnimation.then(secondAnimation);
    firstAnimation.start();
    secondAnimation.finishEmitter.addListener(() => {
      explosionPath.detach();
    });
  }
}
solarSystemCommon.register('ExplosionNode', ExplosionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXRoIiwiVmVjdG9yMiIsIlNoYXBlIiwiU29sYXJTeXN0ZW1Db21tb25Db2xvcnMiLCJjb21iaW5lT3B0aW9ucyIsIk51bWJlclByb3BlcnR5IiwiQW5pbWF0aW9uIiwiRWFzaW5nIiwic29sYXJTeXN0ZW1Db21tb24iLCJFeHBsb3Npb25Ob2RlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZmlsbCIsImV4cGxvc2lvbkNvbG9yUHJvcGVydHkiLCJyYWRpdXMiLCJudW1TZWdtZW50cyIsInNoYXBlIiwibW92ZVRvIiwiaSIsImxpbmVUb1BvaW50IiwiY3JlYXRlUG9sYXIiLCJNYXRoIiwiUEkiLCJjbG9zZSIsImV4cGxvZGUiLCJub2RlIiwiZXhwbG9zaW9uUGF0aCIsImNlbnRlciIsInRyYW5zbGF0aW9uIiwicGFyZW50cyIsImFkZENoaWxkIiwic3RhcnRpbmdSYWRpdXMiLCJtYXhpbXVtUmFkaXVzIiwic2NhbGVQcm9wZXJ0eSIsImxpbmsiLCJzY2FsZSIsInNldFNjYWxlTWFnbml0dWRlIiwiZHVyYXRpb24iLCJmaXJzdEFuaW1hdGlvbiIsInByb3BlcnR5IiwidG8iLCJlYXNpbmciLCJRVUFEUkFUSUNfT1VUIiwic2Vjb25kQW5pbWF0aW9uIiwiUVVBRFJBVElDX0lOIiwidGhlbiIsInN0YXJ0IiwiZmluaXNoRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZGV0YWNoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeHBsb3Npb25Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLyoqXHJcbiAqXHJcbiAqIEBhdXRob3IgQWd1c3TDrW4gVmFsbGVqbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBQYXRoLCBQYXRoT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgU29sYXJTeXN0ZW1Db21tb25Db2xvcnMgZnJvbSAnLi4vU29sYXJTeXN0ZW1Db21tb25Db2xvcnMuanMnO1xyXG5pbXBvcnQgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBBbmltYXRpb24gZnJvbSAnLi4vLi4vLi4vdHdpeHQvanMvQW5pbWF0aW9uLmpzJztcclxuaW1wb3J0IEVhc2luZyBmcm9tICcuLi8uLi8uLi90d2l4dC9qcy9FYXNpbmcuanMnO1xyXG5pbXBvcnQgQm9keU5vZGUgZnJvbSAnLi9Cb2R5Tm9kZS5qcyc7XHJcbmltcG9ydCBzb2xhclN5c3RlbUNvbW1vbiBmcm9tICcuLi9zb2xhclN5c3RlbUNvbW1vbi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHBsb3Npb25Ob2RlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogUGF0aE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbWJpbmVPcHRpb25zPFBhdGhPcHRpb25zPigge1xyXG4gICAgICBmaWxsOiBTb2xhclN5c3RlbUNvbW1vbkNvbG9ycy5leHBsb3Npb25Db2xvclByb3BlcnR5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCByYWRpdXMgPSA0MDtcclxuICAgIGNvbnN0IG51bVNlZ21lbnRzID0gMTQ7XHJcblxyXG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICAgIHNoYXBlLm1vdmVUbyggMCwgMCApO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbnVtU2VnbWVudHMgKyAxOyBpKysgKSB7XHJcbiAgICAgIHNoYXBlLmxpbmVUb1BvaW50KCBWZWN0b3IyLmNyZWF0ZVBvbGFyKCAoIGkgJSAyID09PSAwICkgPyByYWRpdXMgKiAyIDogcmFkaXVzLCBpICogTWF0aC5QSSAqIDIgLyBudW1TZWdtZW50cyApICk7XHJcbiAgICB9XHJcbiAgICBzaGFwZS5jbG9zZSgpO1xyXG5cclxuICAgIHN1cGVyKCBzaGFwZSwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBleHBsb2RlKCBub2RlOiBCb2R5Tm9kZSApOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBleHBsb3Npb25QYXRoID0gbmV3IEV4cGxvc2lvbk5vZGUoIHtcclxuICAgICAgY2VudGVyOiBub2RlLnRyYW5zbGF0aW9uXHJcbiAgICB9ICk7XHJcblxyXG4gICAgbm9kZS5wYXJlbnRzWyAwIF0uYWRkQ2hpbGQoIGV4cGxvc2lvblBhdGggKTtcclxuXHJcbiAgICBjb25zdCBzdGFydGluZ1JhZGl1cyA9IDAuMTtcclxuICAgIGNvbnN0IG1heGltdW1SYWRpdXMgPSAxO1xyXG5cclxuICAgIGNvbnN0IHNjYWxlUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIHN0YXJ0aW5nUmFkaXVzICk7XHJcbiAgICBzY2FsZVByb3BlcnR5LmxpbmsoIHNjYWxlID0+IGV4cGxvc2lvblBhdGguc2V0U2NhbGVNYWduaXR1ZGUoIHNjYWxlICkgKTtcclxuXHJcbiAgICBjb25zdCBkdXJhdGlvbiA9IDAuMTY7XHJcbiAgICBjb25zdCBmaXJzdEFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oIHtcclxuICAgICAgcHJvcGVydHk6IHNjYWxlUHJvcGVydHksXHJcbiAgICAgIHRvOiBtYXhpbXVtUmFkaXVzLFxyXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgIGVhc2luZzogRWFzaW5nLlFVQURSQVRJQ19PVVRcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHNlY29uZEFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oIHtcclxuICAgICAgcHJvcGVydHk6IHNjYWxlUHJvcGVydHksXHJcbiAgICAgIHRvOiBzdGFydGluZ1JhZGl1cyxcclxuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICBlYXNpbmc6IEVhc2luZy5RVUFEUkFUSUNfSU5cclxuICAgIH0gKTtcclxuXHJcbiAgICBmaXJzdEFuaW1hdGlvbi50aGVuKCBzZWNvbmRBbmltYXRpb24gKTtcclxuICAgIGZpcnN0QW5pbWF0aW9uLnN0YXJ0KCk7XHJcbiAgICBzZWNvbmRBbmltYXRpb24uZmluaXNoRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICBleHBsb3Npb25QYXRoLmRldGFjaCgpO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuc29sYXJTeXN0ZW1Db21tb24ucmVnaXN0ZXIoICdFeHBsb3Npb25Ob2RlJywgRXhwbG9zaW9uTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLFFBQXFCLGdDQUFnQztBQUNsRSxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELFNBQVNDLEtBQUssUUFBUSw2QkFBNkI7QUFDbkQsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLFNBQVNDLGNBQWMsUUFBUSxvQ0FBb0M7QUFDbkUsT0FBT0MsY0FBYyxNQUFNLG9DQUFvQztBQUMvRCxPQUFPQyxTQUFTLE1BQU0sZ0NBQWdDO0FBQ3RELE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFFaEQsT0FBT0MsaUJBQWlCLE1BQU0seUJBQXlCO0FBRXZELGVBQWUsTUFBTUMsYUFBYSxTQUFTVCxJQUFJLENBQUM7RUFFdkNVLFdBQVdBLENBQUVDLGVBQTZCLEVBQUc7SUFFbEQsTUFBTUMsT0FBTyxHQUFHUixjQUFjLENBQWU7TUFDM0NTLElBQUksRUFBRVYsdUJBQXVCLENBQUNXO0lBQ2hDLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixNQUFNSSxNQUFNLEdBQUcsRUFBRTtJQUNqQixNQUFNQyxXQUFXLEdBQUcsRUFBRTtJQUV0QixNQUFNQyxLQUFLLEdBQUcsSUFBSWYsS0FBSyxDQUFDLENBQUM7SUFDekJlLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFDcEIsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdILFdBQVcsR0FBRyxDQUFDLEVBQUVHLENBQUMsRUFBRSxFQUFHO01BQzFDRixLQUFLLENBQUNHLFdBQVcsQ0FBRW5CLE9BQU8sQ0FBQ29CLFdBQVcsQ0FBSUYsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUtKLE1BQU0sR0FBRyxDQUFDLEdBQUdBLE1BQU0sRUFBRUksQ0FBQyxHQUFHRyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDLEdBQUdQLFdBQVksQ0FBRSxDQUFDO0lBQ2xIO0lBQ0FDLEtBQUssQ0FBQ08sS0FBSyxDQUFDLENBQUM7SUFFYixLQUFLLENBQUVQLEtBQUssRUFBRUwsT0FBUSxDQUFDO0VBQ3pCO0VBRUEsT0FBY2EsT0FBT0EsQ0FBRUMsSUFBYyxFQUFTO0lBRTVDLE1BQU1DLGFBQWEsR0FBRyxJQUFJbEIsYUFBYSxDQUFFO01BQ3ZDbUIsTUFBTSxFQUFFRixJQUFJLENBQUNHO0lBQ2YsQ0FBRSxDQUFDO0lBRUhILElBQUksQ0FBQ0ksT0FBTyxDQUFFLENBQUMsQ0FBRSxDQUFDQyxRQUFRLENBQUVKLGFBQWMsQ0FBQztJQUUzQyxNQUFNSyxjQUFjLEdBQUcsR0FBRztJQUMxQixNQUFNQyxhQUFhLEdBQUcsQ0FBQztJQUV2QixNQUFNQyxhQUFhLEdBQUcsSUFBSTdCLGNBQWMsQ0FBRTJCLGNBQWUsQ0FBQztJQUMxREUsYUFBYSxDQUFDQyxJQUFJLENBQUVDLEtBQUssSUFBSVQsYUFBYSxDQUFDVSxpQkFBaUIsQ0FBRUQsS0FBTSxDQUFFLENBQUM7SUFFdkUsTUFBTUUsUUFBUSxHQUFHLElBQUk7SUFDckIsTUFBTUMsY0FBYyxHQUFHLElBQUlqQyxTQUFTLENBQUU7TUFDcENrQyxRQUFRLEVBQUVOLGFBQWE7TUFDdkJPLEVBQUUsRUFBRVIsYUFBYTtNQUNqQkssUUFBUSxFQUFFQSxRQUFRO01BQ2xCSSxNQUFNLEVBQUVuQyxNQUFNLENBQUNvQztJQUNqQixDQUFFLENBQUM7SUFDSCxNQUFNQyxlQUFlLEdBQUcsSUFBSXRDLFNBQVMsQ0FBRTtNQUNyQ2tDLFFBQVEsRUFBRU4sYUFBYTtNQUN2Qk8sRUFBRSxFQUFFVCxjQUFjO01BQ2xCTSxRQUFRLEVBQUVBLFFBQVE7TUFDbEJJLE1BQU0sRUFBRW5DLE1BQU0sQ0FBQ3NDO0lBQ2pCLENBQUUsQ0FBQztJQUVITixjQUFjLENBQUNPLElBQUksQ0FBRUYsZUFBZ0IsQ0FBQztJQUN0Q0wsY0FBYyxDQUFDUSxLQUFLLENBQUMsQ0FBQztJQUN0QkgsZUFBZSxDQUFDSSxhQUFhLENBQUNDLFdBQVcsQ0FBRSxNQUFNO01BQy9DdEIsYUFBYSxDQUFDdUIsTUFBTSxDQUFDLENBQUM7SUFDeEIsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBMUMsaUJBQWlCLENBQUMyQyxRQUFRLENBQUUsZUFBZSxFQUFFMUMsYUFBYyxDQUFDIn0=