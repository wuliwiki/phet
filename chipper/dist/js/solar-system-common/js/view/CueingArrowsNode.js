// Copyright 2023, University of Colorado Boulder

/**
 * CueingArrowsNode is the cueing arrows used to indicate that something can be dragged in some direction.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author AgustÃ­n Vallejo
 */

import { Path } from '../../../scenery/js/imports.js';
import ArrowShape from '../../../scenery-phet/js/ArrowShape.js';
import { Shape } from '../../../kite/js/imports.js';
import optionize from '../../../phet-core/js/optionize.js';
import solarSystemCommon from '../solarSystemCommon.js';
export default class CueingArrowsNode extends Path {
  constructor(providedOptions) {
    const options = optionize()({
      // CueingArrowsNodeOptions
      bodyRadius: 10,
      length: 15,
      rotation: Math.PI / 4,
      // PathOptions
      fill: 'rgb( 0, 200, 0 )',
      stroke: 'black'
    }, providedOptions);
    super(createArrowsShape(options.bodyRadius, options.length), options);
    this.localBoundsProperty.link(localBounds => {
      this.touchArea = localBounds.dilated(5);
      this.mouseArea = localBounds.dilated(3);
    });
  }
}

//REVIEW: This looks somewhat copied from CueingArrowsNode in geometric-optics. Can we factor out cue arrow shape
//REVIEW: creation to somewhere in common code, instead of copying?
const ARROW_SHAPE_OPTIONS = {
  doubleHead: false,
  headWidth: 12,
  headHeight: 8,
  tailWidth: 3
};
function createArrowsShape(radius, length) {
  radius += 5;
  const leftArrowShape = new ArrowShape(-radius, 0, -radius - length, 0, ARROW_SHAPE_OPTIONS);
  const downArrowShape = new ArrowShape(0, -radius, 0, -radius - length, ARROW_SHAPE_OPTIONS);
  const upArrowShape = new ArrowShape(0, radius, 0, radius + length, ARROW_SHAPE_OPTIONS);
  const rightArrowShape = new ArrowShape(radius, 0, radius + length, 0, ARROW_SHAPE_OPTIONS);
  const shape = Shape.union([leftArrowShape, downArrowShape, upArrowShape, rightArrowShape]);
  return shape;
}
solarSystemCommon.register('CueingArrowsNode', CueingArrowsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXRoIiwiQXJyb3dTaGFwZSIsIlNoYXBlIiwib3B0aW9uaXplIiwic29sYXJTeXN0ZW1Db21tb24iLCJDdWVpbmdBcnJvd3NOb2RlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYm9keVJhZGl1cyIsImxlbmd0aCIsInJvdGF0aW9uIiwiTWF0aCIsIlBJIiwiZmlsbCIsInN0cm9rZSIsImNyZWF0ZUFycm93c1NoYXBlIiwibG9jYWxCb3VuZHNQcm9wZXJ0eSIsImxpbmsiLCJsb2NhbEJvdW5kcyIsInRvdWNoQXJlYSIsImRpbGF0ZWQiLCJtb3VzZUFyZWEiLCJBUlJPV19TSEFQRV9PUFRJT05TIiwiZG91YmxlSGVhZCIsImhlYWRXaWR0aCIsImhlYWRIZWlnaHQiLCJ0YWlsV2lkdGgiLCJyYWRpdXMiLCJsZWZ0QXJyb3dTaGFwZSIsImRvd25BcnJvd1NoYXBlIiwidXBBcnJvd1NoYXBlIiwicmlnaHRBcnJvd1NoYXBlIiwic2hhcGUiLCJ1bmlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ3VlaW5nQXJyb3dzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3VlaW5nQXJyb3dzTm9kZSBpcyB0aGUgY3VlaW5nIGFycm93cyB1c2VkIHRvIGluZGljYXRlIHRoYXQgc29tZXRoaW5nIGNhbiBiZSBkcmFnZ2VkIGluIHNvbWUgZGlyZWN0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIEFndXN0w61uIFZhbGxlam9cclxuICovXHJcblxyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zLCBQYXRoLCBQYXRoT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBBcnJvd1NoYXBlIGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd1NoYXBlLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgc29sYXJTeXN0ZW1Db21tb24gZnJvbSAnLi4vc29sYXJTeXN0ZW1Db21tb24uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBsZW5ndGg/OiBudW1iZXI7XHJcbiAgYm9keVJhZGl1cz86IG51bWJlcjtcclxufTtcclxuXHJcbnR5cGUgQ3VlaW5nQXJyb3dzTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmXHJcbiAgUGlja09wdGlvbmFsPFBhdGhPcHRpb25zLCAnZmlsbCcgfCAnc3Ryb2tlJyB8ICdzY2FsZScgfCAndmlzaWJsZVByb3BlcnR5Jz4gJlxyXG4gIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdWVpbmdBcnJvd3NOb2RlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogQ3VlaW5nQXJyb3dzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxDdWVpbmdBcnJvd3NOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhdGhPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBDdWVpbmdBcnJvd3NOb2RlT3B0aW9uc1xyXG4gICAgICBib2R5UmFkaXVzOiAxMCxcclxuICAgICAgbGVuZ3RoOiAxNSxcclxuICAgICAgcm90YXRpb246IE1hdGguUEkgLyA0LFxyXG5cclxuICAgICAgLy8gUGF0aE9wdGlvbnNcclxuICAgICAgZmlsbDogJ3JnYiggMCwgMjAwLCAwICknLFxyXG4gICAgICBzdHJva2U6ICdibGFjaydcclxuXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggY3JlYXRlQXJyb3dzU2hhcGUoIG9wdGlvbnMuYm9keVJhZGl1cywgb3B0aW9ucy5sZW5ndGggKSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubG9jYWxCb3VuZHNQcm9wZXJ0eS5saW5rKCBsb2NhbEJvdW5kcyA9PiB7XHJcbiAgICAgIHRoaXMudG91Y2hBcmVhID0gbG9jYWxCb3VuZHMuZGlsYXRlZCggNSApO1xyXG4gICAgICB0aGlzLm1vdXNlQXJlYSA9IGxvY2FsQm91bmRzLmRpbGF0ZWQoIDMgKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbi8vUkVWSUVXOiBUaGlzIGxvb2tzIHNvbWV3aGF0IGNvcGllZCBmcm9tIEN1ZWluZ0Fycm93c05vZGUgaW4gZ2VvbWV0cmljLW9wdGljcy4gQ2FuIHdlIGZhY3RvciBvdXQgY3VlIGFycm93IHNoYXBlXHJcbi8vUkVWSUVXOiBjcmVhdGlvbiB0byBzb21ld2hlcmUgaW4gY29tbW9uIGNvZGUsIGluc3RlYWQgb2YgY29weWluZz9cclxuY29uc3QgQVJST1dfU0hBUEVfT1BUSU9OUyA9IHtcclxuICBkb3VibGVIZWFkOiBmYWxzZSxcclxuICBoZWFkV2lkdGg6IDEyLFxyXG4gIGhlYWRIZWlnaHQ6IDgsXHJcbiAgdGFpbFdpZHRoOiAzXHJcbn07XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBcnJvd3NTaGFwZSggcmFkaXVzOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyICk6IFNoYXBlIHtcclxuICByYWRpdXMgKz0gNTtcclxuICBjb25zdCBsZWZ0QXJyb3dTaGFwZSA9IG5ldyBBcnJvd1NoYXBlKCAtcmFkaXVzLCAwLCAtcmFkaXVzIC0gbGVuZ3RoLCAwLCBBUlJPV19TSEFQRV9PUFRJT05TICk7XHJcbiAgY29uc3QgZG93bkFycm93U2hhcGUgPSBuZXcgQXJyb3dTaGFwZSggMCwgLXJhZGl1cywgMCwgLXJhZGl1cyAtIGxlbmd0aCwgQVJST1dfU0hBUEVfT1BUSU9OUyApO1xyXG4gIGNvbnN0IHVwQXJyb3dTaGFwZSA9IG5ldyBBcnJvd1NoYXBlKCAwLCByYWRpdXMsIDAsIHJhZGl1cyArIGxlbmd0aCwgQVJST1dfU0hBUEVfT1BUSU9OUyApO1xyXG4gIGNvbnN0IHJpZ2h0QXJyb3dTaGFwZSA9IG5ldyBBcnJvd1NoYXBlKCByYWRpdXMsIDAsIHJhZGl1cyArIGxlbmd0aCwgMCwgQVJST1dfU0hBUEVfT1BUSU9OUyApO1xyXG4gIGNvbnN0IHNoYXBlID0gU2hhcGUudW5pb24oIFsgbGVmdEFycm93U2hhcGUsIGRvd25BcnJvd1NoYXBlLCB1cEFycm93U2hhcGUsIHJpZ2h0QXJyb3dTaGFwZSBdICk7XHJcbiAgcmV0dXJuIHNoYXBlO1xyXG59XHJcblxyXG5zb2xhclN5c3RlbUNvbW1vbi5yZWdpc3RlciggJ0N1ZWluZ0Fycm93c05vZGUnLCBDdWVpbmdBcnJvd3NOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBaUNBLElBQUksUUFBcUIsZ0NBQWdDO0FBQzFGLE9BQU9DLFVBQVUsTUFBTSx3Q0FBd0M7QUFDL0QsU0FBU0MsS0FBSyxRQUFRLDZCQUE2QjtBQUNuRCxPQUFPQyxTQUFTLE1BQU0sb0NBQW9DO0FBRTFELE9BQU9DLGlCQUFpQixNQUFNLHlCQUF5QjtBQVd2RCxlQUFlLE1BQU1DLGdCQUFnQixTQUFTTCxJQUFJLENBQUM7RUFFMUNNLFdBQVdBLENBQUVDLGVBQXlDLEVBQUc7SUFFOUQsTUFBTUMsT0FBTyxHQUFHTCxTQUFTLENBQW9ELENBQUMsQ0FBRTtNQUU5RTtNQUNBTSxVQUFVLEVBQUUsRUFBRTtNQUNkQyxNQUFNLEVBQUUsRUFBRTtNQUNWQyxRQUFRLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUM7TUFFckI7TUFDQUMsSUFBSSxFQUFFLGtCQUFrQjtNQUN4QkMsTUFBTSxFQUFFO0lBRVYsQ0FBQyxFQUFFUixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRVMsaUJBQWlCLENBQUVSLE9BQU8sQ0FBQ0MsVUFBVSxFQUFFRCxPQUFPLENBQUNFLE1BQU8sQ0FBQyxFQUFFRixPQUFRLENBQUM7SUFFekUsSUFBSSxDQUFDUyxtQkFBbUIsQ0FBQ0MsSUFBSSxDQUFFQyxXQUFXLElBQUk7TUFDNUMsSUFBSSxDQUFDQyxTQUFTLEdBQUdELFdBQVcsQ0FBQ0UsT0FBTyxDQUFFLENBQUUsQ0FBQztNQUN6QyxJQUFJLENBQUNDLFNBQVMsR0FBR0gsV0FBVyxDQUFDRSxPQUFPLENBQUUsQ0FBRSxDQUFDO0lBQzNDLENBQUUsQ0FBQztFQUNMO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBLE1BQU1FLG1CQUFtQixHQUFHO0VBQzFCQyxVQUFVLEVBQUUsS0FBSztFQUNqQkMsU0FBUyxFQUFFLEVBQUU7RUFDYkMsVUFBVSxFQUFFLENBQUM7RUFDYkMsU0FBUyxFQUFFO0FBQ2IsQ0FBQztBQUVELFNBQVNYLGlCQUFpQkEsQ0FBRVksTUFBYyxFQUFFbEIsTUFBYyxFQUFVO0VBQ2xFa0IsTUFBTSxJQUFJLENBQUM7RUFDWCxNQUFNQyxjQUFjLEdBQUcsSUFBSTVCLFVBQVUsQ0FBRSxDQUFDMkIsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDQSxNQUFNLEdBQUdsQixNQUFNLEVBQUUsQ0FBQyxFQUFFYSxtQkFBb0IsQ0FBQztFQUM3RixNQUFNTyxjQUFjLEdBQUcsSUFBSTdCLFVBQVUsQ0FBRSxDQUFDLEVBQUUsQ0FBQzJCLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQ0EsTUFBTSxHQUFHbEIsTUFBTSxFQUFFYSxtQkFBb0IsQ0FBQztFQUM3RixNQUFNUSxZQUFZLEdBQUcsSUFBSTlCLFVBQVUsQ0FBRSxDQUFDLEVBQUUyQixNQUFNLEVBQUUsQ0FBQyxFQUFFQSxNQUFNLEdBQUdsQixNQUFNLEVBQUVhLG1CQUFvQixDQUFDO0VBQ3pGLE1BQU1TLGVBQWUsR0FBRyxJQUFJL0IsVUFBVSxDQUFFMkIsTUFBTSxFQUFFLENBQUMsRUFBRUEsTUFBTSxHQUFHbEIsTUFBTSxFQUFFLENBQUMsRUFBRWEsbUJBQW9CLENBQUM7RUFDNUYsTUFBTVUsS0FBSyxHQUFHL0IsS0FBSyxDQUFDZ0MsS0FBSyxDQUFFLENBQUVMLGNBQWMsRUFBRUMsY0FBYyxFQUFFQyxZQUFZLEVBQUVDLGVBQWUsQ0FBRyxDQUFDO0VBQzlGLE9BQU9DLEtBQUs7QUFDZDtBQUVBN0IsaUJBQWlCLENBQUMrQixRQUFRLENBQUUsa0JBQWtCLEVBQUU5QixnQkFBaUIsQ0FBQyJ9