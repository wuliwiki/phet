// Copyright 2023, University of Colorado Boulder

/**
 * Screen view for the My Solar System Screen
 *
 * @author AgustÃ­n Vallejo (PhET Interactive Simulations)
 */

import Vector2 from '../../../dot/js/Vector2.js';
import Multilink from '../../../axon/js/Multilink.js';
import ScreenView from '../../../joist/js/ScreenView.js';
import ModelViewTransform2 from '../../../phetcommon/js/view/ModelViewTransform2.js';
import ResetAllButton from '../../../scenery-phet/js/buttons/ResetAllButton.js';
import { HBox, Node, VBox } from '../../../scenery/js/imports.js';
import SolarSystemCommonConstants from '../SolarSystemCommonConstants.js';
import SolarSystemCommonTimeControlNode from './SolarSystemCommonTimeControlNode.js';
import TextPushButton from '../../../sun/js/buttons/TextPushButton.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import SolarSystemCommonStrings from '../../../solar-system-common/js/SolarSystemCommonStrings.js';
import optionize, { combineOptions } from '../../../phet-core/js/optionize.js';
import MeasuringTapeNode from '../../../scenery-phet/js/MeasuringTapeNode.js';
import Property from '../../../axon/js/Property.js';
import Vector2Property from '../../../dot/js/Vector2Property.js';
import DraggableVectorNode from './DraggableVectorNode.js';
import PhetColorScheme from '../../../scenery-phet/js/PhetColorScheme.js';
import PatternStringProperty from '../../../axon/js/PatternStringProperty.js';
import NumberDisplay from '../../../scenery-phet/js/NumberDisplay.js';
import Panel from '../../../sun/js/Panel.js';
import Range from '../../../dot/js/Range.js';
import solarSystemCommon from '../solarSystemCommon.js';
import BodySoundManager from './BodySoundManager.js';
import GridNode from '../../../scenery-phet/js/GridNode.js';
import SolarSystemCommonColors from '../SolarSystemCommonColors.js';
import SoundClip from '../../../tambo/js/sound-generators/SoundClip.js';
import soundManager from '../../../tambo/js/soundManager.js';
import Grab_Sound_mp3 from '../../sounds/Grab_Sound_mp3.js';
import Release_Sound_mp3 from '../../sounds/Release_Sound_mp3.js';
export default class SolarSystemCommonScreenView extends ScreenView {
  bodiesLayer = new Node();
  componentsLayer = new Node();
  interfaceLayer = new Node();
  topLayer = new Node();
  bottomLayer = new Node();

  // Derived from visibleBoundsProperty to keep the UI elements centered on narrow screens
  // Tracks only the vertical bounds and constrains them to layoutBounds
  constructor(model, providedOptions) {
    const options = optionize()({
      playingAllowedProperty: new Property(true),
      centerOrbitOffset: Vector2.ZERO
    }, providedOptions);
    super(options);
    this.model = model;
    this.availableBoundsProperty = new DerivedProperty([this.visibleBoundsProperty], visibleBounds => {
      return visibleBounds.withMinY(this.layoutBounds.minY).withMaxY(this.layoutBounds.maxY);
    });
    this.addChild(this.bottomLayer);
    this.addChild(this.bodiesLayer);
    this.addChild(this.componentsLayer);
    this.addChild(this.interfaceLayer);
    this.addChild(this.topLayer);
    this.pdomPlayAreaNode.pdomOrder = [this.bodiesLayer, this.componentsLayer, this.topLayer];
    this.pdomControlAreaNode.pdomOrder = [this.bottomLayer, this.interfaceLayer];
    this.bodySoundManager = new BodySoundManager(model);
    model.availableBodies.forEach(body => {
      body.collidedEmitter.addListener(() => {
        this.bodySoundManager.playBodyRemovedSound(3); // Plays the collision sound instead of body index
      });
    });

    this.modelViewTransformProperty = new DerivedProperty([model.zoomProperty], zoom => {
      return ModelViewTransform2.createSinglePointScaleInvertedYMapping(Vector2.ZERO, new Vector2(this.layoutBounds.center.x - options.centerOrbitOffset.x, this.layoutBounds.center.y - options.centerOrbitOffset.y), zoom);
    });

    // Add the node for the overlay grid, setting its visibility based on the model.showGridProperty
    this.interfaceLayer.addChild(new GridNode(this.modelViewTransformProperty, SolarSystemCommonConstants.GRID_SPACING, Vector2.ZERO, 100, {
      stroke: SolarSystemCommonColors.gridIconStrokeColorProperty,
      visibleProperty: model.gridVisibleProperty
    }));
    this.createDraggableVectorNode = (body, options) => {
      return new DraggableVectorNode(body, this.modelViewTransformProperty, model.velocityVisibleProperty, body.velocityProperty, body.positionProperty, 1, SolarSystemCommonStrings.VStringProperty, combineOptions({
        fill: PhetColorScheme.VELOCITY,
        soundViewNode: this,
        mapPosition: this.constrainBoundaryViewPoint.bind(this)
      }, options));
    };

    // UI Elements ===================================================================================================

    const measuringTapeUnitsProperty = new Property({
      name: 'AU',
      multiplier: 0.01
    });
    const dragClipOptions = {
      initialOutputLevel: 2 * SolarSystemCommonConstants.DEFAULT_SOUND_OUTPUT_LEVEL
    };
    const grabClip = new SoundClip(Grab_Sound_mp3, dragClipOptions);
    const releaseClip = new SoundClip(Release_Sound_mp3, dragClipOptions);
    soundManager.addSoundGenerator(grabClip);
    soundManager.addSoundGenerator(releaseClip);

    // Add the MeasuringTapeNode
    const measuringTapeNode = new MeasuringTapeNode(measuringTapeUnitsProperty, {
      visibleProperty: model.measuringTapeVisibleProperty,
      textColor: 'black',
      textBackgroundColor: 'rgba( 255, 255, 255, 0.5 )',
      // translucent red
      textBackgroundXMargin: 10,
      textBackgroundYMargin: 3,
      textBackgroundCornerRadius: 5,
      basePositionProperty: new Vector2Property(new Vector2(0, 100)),
      tipPositionProperty: new Vector2Property(new Vector2(100, 100)),
      tandem: providedOptions.tandem.createTandem('measuringTapeNode'),
      significantFigures: 2,
      baseDragStarted: () => grabClip.play(),
      baseDragEnded: () => releaseClip.play()
    });
    this.topLayer.addChild(measuringTapeNode);
    const timeControlNode = new SolarSystemCommonTimeControlNode(model, {
      enabledProperty: options.playingAllowedProperty || null,
      restartListener: () => model.restart(),
      stepForwardListener: () => model.stepOnce(1 / 8),
      tandem: options.tandem.createTandem('timeControlNode')
    });
    const timeStringPatternProperty = new PatternStringProperty(SolarSystemCommonStrings.pattern.labelUnitsStringProperty, {
      units: SolarSystemCommonStrings.units.yearsStringProperty
    });
    const clockNode = new HBox({
      children: [new NumberDisplay(model.timeProperty, new Range(0, 1000), {
        backgroundFill: null,
        backgroundStroke: null,
        textOptions: combineOptions({
          maxWidth: 80
        }, SolarSystemCommonConstants.TEXT_OPTIONS),
        xMargin: 0,
        yMargin: 0,
        valuePattern: timeStringPatternProperty,
        decimalPlaces: 1
      }), new TextPushButton(SolarSystemCommonStrings.clearStringProperty, {
        font: new PhetFont(16),
        enabledProperty: new DerivedProperty([model.timeProperty], time => time > 0),
        listener: () => model.timeProperty.reset(),
        maxTextWidth: 65,
        tandem: providedOptions.tandem.createTandem('clearButton'),
        touchAreaXDilation: 10,
        touchAreaYDilation: 5
      })],
      spacing: 8
    });
    this.timeBox = new Panel(new VBox({
      children: [timeControlNode, clockNode],
      spacing: 10
    }), SolarSystemCommonConstants.CONTROL_PANEL_OPTIONS);
    this.resetAllButton = new ResetAllButton({
      listener: () => {
        this.interruptSubtreeInput(); // cancel interactions that may be in progress
        model.reset();
        measuringTapeNode.reset();
      },
      touchAreaDilation: 10,
      tandem: providedOptions.tandem.createTandem('resetAllButton')
    });
    Multilink.multilink([this.visibleBoundsProperty, this.modelViewTransformProperty], (visibleBounds, modelViewTransform) => {
      measuringTapeNode.setDragBounds(modelViewTransform.viewToModelBounds(visibleBounds.eroded(50)));
      measuringTapeNode.modelViewTransformProperty.value = modelViewTransform;
    });
  }
  constrainBoundaryViewPoint(point, radius) {
    return point;
  }
}
solarSystemCommon.register('SolarSystemCommonScreenView', SolarSystemCommonScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,