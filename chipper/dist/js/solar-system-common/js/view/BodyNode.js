// Copyright 2023, University of Colorado Boulder

/**
 * Visible Body Node that draws a sphere with size dependent on the Body's mass.
 *
 * @author AgustÃ­n Vallejo (PhET Interactive Simulations)
 */

import { Color, DragListener, InteractiveHighlighting, KeyboardDragListener, Node, Rectangle, RichText } from '../../../scenery/js/imports.js';
import Utils from '../../../dot/js/Utils.js';
import ShadedSphereNode from '../../../scenery-phet/js/ShadedSphereNode.js';
import optionize from '../../../phet-core/js/optionize.js';
import Multilink from '../../../axon/js/Multilink.js';
import SolarSystemCommonStrings from '../../../solar-system-common/js/SolarSystemCommonStrings.js';
import Vector2 from '../../../dot/js/Vector2.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import PatternStringProperty from '../../../axon/js/PatternStringProperty.js';
import ExplosionNode from './ExplosionNode.js';
import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import { Shape } from '../../../kite/js/imports.js';
import SolarSystemCommonConstants from '../SolarSystemCommonConstants.js';
import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import solarSystemCommon from '../solarSystemCommon.js';
import Bodies_Brass_C3_mp3 from '../../sounds/Bodies_Brass_C3_mp3.js';
import Bodies_Flute_g3_mp3 from '../../sounds/Bodies_Flute_g3_mp3.js';
import Bodies_Strings_e3_v2_mp3 from '../../sounds/Bodies_Strings_e3_v2_mp3.js';
import Bodies_Woodwinds_e3_mp3 from '../../sounds/Bodies_Woodwinds_e3_mp3.js';
import Grab_Sound_mp3 from '../../sounds/Grab_Sound_mp3.js';
import Release_Sound_mp3 from '../../sounds/Release_Sound_mp3.js';
import SoundClip from '../../../tambo/js/sound-generators/SoundClip.js';
import soundManager from '../../../tambo/js/soundManager.js';
import CueingArrowsNode from './CueingArrowsNode.js';
const bodySounds = [Bodies_Brass_C3_mp3, Bodies_Woodwinds_e3_mp3, Bodies_Strings_e3_v2_mp3, Bodies_Flute_g3_mp3];
export default class BodyNode extends InteractiveHighlighting(ShadedSphereNode) {
  constructor(body, modelViewTransformProperty, providedOptions) {
    const accessibleName = 'Body ' + (body.index + 1);
    const options = optionize()({
      draggable: true,
      mainColor: body.colorProperty,
      mapPosition: _.identity,
      valuesVisibleProperty: new BooleanProperty(false),
      rectangleOptions: {
        cornerRadius: 2,
        fill: new Color(0, 0, 0, 0.5)
      },
      soundViewNode: null,
      textOptions: {
        fill: 'white',
        // Not a colorProperty because it is not dynamic
        maxWidth: SolarSystemCommonConstants.TEXT_MAX_WIDTH,
        font: new PhetFont(16)
      },
      useCueingArrows: false,
      showVelocityIndex: true,
      // pdom
      tagName: 'div',
      focusable: true,
      ariaLabel: accessibleName,
      // the screen reader Accessible Name
      innerContent: accessibleName,
      // needed to make it focusable in the PDOM
      ariaRole: 'application'
    }, providedOptions);
    options.cursor = options.draggable ? 'pointer' : 'default';
    super(1, options);
    this.body = body;
    this.body = body;
    this.soundClip = new SoundClip(bodySounds[body.index], {
      initialOutputLevel: SolarSystemCommonConstants.DEFAULT_SOUND_OUTPUT_LEVEL,
      loop: true
    });
    const dragClipOptions = {
      initialOutputLevel: 2 * SolarSystemCommonConstants.DEFAULT_SOUND_OUTPUT_LEVEL
    };
    this.grabClip = new SoundClip(Grab_Sound_mp3, dragClipOptions);
    this.releaseClip = new SoundClip(Release_Sound_mp3, dragClipOptions);
    if (options.soundViewNode) {
      soundManager.addSoundGenerator(this.soundClip, {
        associatedViewNode: options.soundViewNode
      });
      soundManager.addSoundGenerator(this.grabClip, {
        associatedViewNode: options.soundViewNode
      });
      soundManager.addSoundGenerator(this.releaseClip, {
        associatedViewNode: options.soundViewNode
      });
    }
    const radiusMultilink = Multilink.multilink([body.radiusProperty, modelViewTransformProperty], (radius, modelViewTransform) => {
      this.radius = modelViewTransform.modelToViewDeltaX(radius);
      // Expand mouse/touch areas to 10 units past
      const area = Shape.circle(0, 0, this.radius + 10);
      this.mouseArea = area;
      this.touchArea = area;
      this.focusHighlight = area;
    });
    const positionMultilink = Multilink.multilink([body.positionProperty, modelViewTransformProperty], (position, modelViewTransform) => {
      this.translation = modelViewTransform.modelToViewPosition(position);

      // If body position is bigger than the provided bounds
      this.body.escapedProperty.value = body.positionProperty.value.magnitude > options.mapPosition(body.positionProperty.value, this.radius).magnitude;
    });
    let keyboardDragListener;
    if (options.draggable) {
      const start = () => {
        body.clearPath();
        body.userControlledPositionProperty.value = true;
        this.grabClip.play();
      };
      const end = () => {
        body.userControlledPositionProperty.value = false;
        this.releaseClip.play();
      };
      const map = point => {
        return options.mapPosition(point, this.radius);
      };
      const bodyDragListener = new DragListener({
        positionProperty: body.positionProperty,
        canStartPress: () => !body.userControlledPositionProperty.value,
        mapPosition: map,
        transform: modelViewTransformProperty,
        start: start,
        end: end
      });
      this.addInputListener(bodyDragListener);
      keyboardDragListener = new KeyboardDragListener({
        positionProperty: body.positionProperty,
        transform: modelViewTransformProperty,
        dragVelocity: 450,
        shiftDragVelocity: 100,
        start: start,
        end: end,
        mapPosition: map
      });
      this.addInputListener(keyboardDragListener);
      this.disposeEmitter.addListener(() => {
        bodyDragListener.dispose();
        keyboardDragListener.dispose();
      });
    }
    const velocityValueProperty = new DerivedProperty([this.body.velocityProperty], velocity => Utils.toFixed(velocity.magnitude * SolarSystemCommonConstants.VELOCITY_MULTIPLIER, 2));
    const readoutStringProperty = new PatternStringProperty(SolarSystemCommonStrings.pattern.velocityValueUnitsStringProperty, {
      index: options.showVelocityIndex ? body.index + 1 : '',
      value: velocityValueProperty,
      units: SolarSystemCommonStrings.units.kmsStringProperty
    });
    const valueNode = new RichText(readoutStringProperty, options.textOptions);
    const valueBackgroundNode = new Rectangle(options.rectangleOptions);

    // Resizes the value background and centers it on the value
    valueNode.boundsProperty.link(bounds => {
      valueBackgroundNode.rectBounds = bounds.dilated(4);
    });

    // Value Container
    const valueContainer = new Node({
      children: [valueBackgroundNode, valueNode],
      visibleProperty: options.valuesVisibleProperty,
      center: new Vector2(0, 30)
    });
    this.addChild(valueContainer);
    const bodyCollisionListener = () => {
      this.interruptSubtreeInput();
      ExplosionNode.explode(this);
    };
    this.body.collidedEmitter.addListener(bodyCollisionListener);
    const cueingVisibleProperty = new DerivedProperty([this.body.userControlledProperty], wasDragged => options.draggable && !wasDragged);
    const cueingArrowsNode = new CueingArrowsNode({
      bodyRadius: this.radius,
      fill: options.mainColor,
      visibleProperty: cueingVisibleProperty
    });
    if (options.useCueingArrows) {
      this.addChild(cueingArrowsNode);
    }
    this.disposeBodyNode = () => {
      valueContainer.dispose(); // Because we provide the visibleProperty
      positionMultilink.dispose();
      radiusMultilink.dispose();
      cueingVisibleProperty.dispose();
      cueingArrowsNode.dispose();
      this.body.collidedEmitter.removeListener(bodyCollisionListener);
      readoutStringProperty.dispose();
      velocityValueProperty.dispose();
      valueNode.dispose();
      this.stopSound();
      if (options.soundViewNode) {
        soundManager.removeSoundGenerator(this.soundClip);
        soundManager.removeSoundGenerator(this.grabClip);
        soundManager.removeSoundGenerator(this.releaseClip);
      }
      this.soundClip.dispose();
      this.grabClip.dispose();
      this.releaseClip.dispose();
    };
  }
  playSound() {
    if (this.body.isActiveProperty.value) {
      this.soundClip.setOutputLevel(this.body.accelerationProperty.value.magnitude / 2000);
      this.soundClip.play();
    } else {
      this.soundClip.stop();
    }
  }
  stopSound() {
    this.soundClip.stop();
  }
  dispose() {
    this.disposeBodyNode();
    super.dispose();
  }
}
solarSystemCommon.register('BodyNode', BodyNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb2xvciIsIkRyYWdMaXN0ZW5lciIsIkludGVyYWN0aXZlSGlnaGxpZ2h0aW5nIiwiS2V5Ym9hcmREcmFnTGlzdGVuZXIiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiUmljaFRleHQiLCJVdGlscyIsIlNoYWRlZFNwaGVyZU5vZGUiLCJvcHRpb25pemUiLCJNdWx0aWxpbmsiLCJTb2xhclN5c3RlbUNvbW1vblN0cmluZ3MiLCJWZWN0b3IyIiwiUGhldEZvbnQiLCJQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJFeHBsb3Npb25Ob2RlIiwiRGVyaXZlZFByb3BlcnR5IiwiU2hhcGUiLCJTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cyIsIkJvb2xlYW5Qcm9wZXJ0eSIsInNvbGFyU3lzdGVtQ29tbW9uIiwiQm9kaWVzX0JyYXNzX0MzX21wMyIsIkJvZGllc19GbHV0ZV9nM19tcDMiLCJCb2RpZXNfU3RyaW5nc19lM192Ml9tcDMiLCJCb2RpZXNfV29vZHdpbmRzX2UzX21wMyIsIkdyYWJfU291bmRfbXAzIiwiUmVsZWFzZV9Tb3VuZF9tcDMiLCJTb3VuZENsaXAiLCJzb3VuZE1hbmFnZXIiLCJDdWVpbmdBcnJvd3NOb2RlIiwiYm9keVNvdW5kcyIsIkJvZHlOb2RlIiwiY29uc3RydWN0b3IiLCJib2R5IiwibW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJhY2Nlc3NpYmxlTmFtZSIsImluZGV4Iiwib3B0aW9ucyIsImRyYWdnYWJsZSIsIm1haW5Db2xvciIsImNvbG9yUHJvcGVydHkiLCJtYXBQb3NpdGlvbiIsIl8iLCJpZGVudGl0eSIsInZhbHVlc1Zpc2libGVQcm9wZXJ0eSIsInJlY3RhbmdsZU9wdGlvbnMiLCJjb3JuZXJSYWRpdXMiLCJmaWxsIiwic291bmRWaWV3Tm9kZSIsInRleHRPcHRpb25zIiwibWF4V2lkdGgiLCJURVhUX01BWF9XSURUSCIsImZvbnQiLCJ1c2VDdWVpbmdBcnJvd3MiLCJzaG93VmVsb2NpdHlJbmRleCIsInRhZ05hbWUiLCJmb2N1c2FibGUiLCJhcmlhTGFiZWwiLCJpbm5lckNvbnRlbnQiLCJhcmlhUm9sZSIsImN1cnNvciIsInNvdW5kQ2xpcCIsImluaXRpYWxPdXRwdXRMZXZlbCIsIkRFRkFVTFRfU09VTkRfT1VUUFVUX0xFVkVMIiwibG9vcCIsImRyYWdDbGlwT3B0aW9ucyIsImdyYWJDbGlwIiwicmVsZWFzZUNsaXAiLCJhZGRTb3VuZEdlbmVyYXRvciIsImFzc29jaWF0ZWRWaWV3Tm9kZSIsInJhZGl1c011bHRpbGluayIsIm11bHRpbGluayIsInJhZGl1c1Byb3BlcnR5IiwicmFkaXVzIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJhcmVhIiwiY2lyY2xlIiwibW91c2VBcmVhIiwidG91Y2hBcmVhIiwiZm9jdXNIaWdobGlnaHQiLCJwb3NpdGlvbk11bHRpbGluayIsInBvc2l0aW9uUHJvcGVydHkiLCJwb3NpdGlvbiIsInRyYW5zbGF0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsImVzY2FwZWRQcm9wZXJ0eSIsInZhbHVlIiwibWFnbml0dWRlIiwia2V5Ym9hcmREcmFnTGlzdGVuZXIiLCJzdGFydCIsImNsZWFyUGF0aCIsInVzZXJDb250cm9sbGVkUG9zaXRpb25Qcm9wZXJ0eSIsInBsYXkiLCJlbmQiLCJtYXAiLCJwb2ludCIsImJvZHlEcmFnTGlzdGVuZXIiLCJjYW5TdGFydFByZXNzIiwidHJhbnNmb3JtIiwiYWRkSW5wdXRMaXN0ZW5lciIsImRyYWdWZWxvY2l0eSIsInNoaWZ0RHJhZ1ZlbG9jaXR5IiwiZGlzcG9zZUVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImRpc3Bvc2UiLCJ2ZWxvY2l0eVZhbHVlUHJvcGVydHkiLCJ2ZWxvY2l0eVByb3BlcnR5IiwidmVsb2NpdHkiLCJ0b0ZpeGVkIiwiVkVMT0NJVFlfTVVMVElQTElFUiIsInJlYWRvdXRTdHJpbmdQcm9wZXJ0eSIsInBhdHRlcm4iLCJ2ZWxvY2l0eVZhbHVlVW5pdHNTdHJpbmdQcm9wZXJ0eSIsInVuaXRzIiwia21zU3RyaW5nUHJvcGVydHkiLCJ2YWx1ZU5vZGUiLCJ2YWx1ZUJhY2tncm91bmROb2RlIiwiYm91bmRzUHJvcGVydHkiLCJsaW5rIiwiYm91bmRzIiwicmVjdEJvdW5kcyIsImRpbGF0ZWQiLCJ2YWx1ZUNvbnRhaW5lciIsImNoaWxkcmVuIiwidmlzaWJsZVByb3BlcnR5IiwiY2VudGVyIiwiYWRkQ2hpbGQiLCJib2R5Q29sbGlzaW9uTGlzdGVuZXIiLCJpbnRlcnJ1cHRTdWJ0cmVlSW5wdXQiLCJleHBsb2RlIiwiY29sbGlkZWRFbWl0dGVyIiwiY3VlaW5nVmlzaWJsZVByb3BlcnR5IiwidXNlckNvbnRyb2xsZWRQcm9wZXJ0eSIsIndhc0RyYWdnZWQiLCJjdWVpbmdBcnJvd3NOb2RlIiwiYm9keVJhZGl1cyIsImRpc3Bvc2VCb2R5Tm9kZSIsInJlbW92ZUxpc3RlbmVyIiwic3RvcFNvdW5kIiwicmVtb3ZlU291bmRHZW5lcmF0b3IiLCJwbGF5U291bmQiLCJpc0FjdGl2ZVByb3BlcnR5Iiwic2V0T3V0cHV0TGV2ZWwiLCJhY2NlbGVyYXRpb25Qcm9wZXJ0eSIsInN0b3AiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJvZHlOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaXNpYmxlIEJvZHkgTm9kZSB0aGF0IGRyYXdzIGEgc3BoZXJlIHdpdGggc2l6ZSBkZXBlbmRlbnQgb24gdGhlIEJvZHkncyBtYXNzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFndXN0w61uIFZhbGxlam8gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29sb3IsIERyYWdMaXN0ZW5lciwgSW50ZXJhY3RpdmVIaWdobGlnaHRpbmcsIEtleWJvYXJkRHJhZ0xpc3RlbmVyLCBOb2RlLCBSZWN0YW5nbGUsIFJlY3RhbmdsZU9wdGlvbnMsIFJpY2hUZXh0LCBUZXh0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgQm9keSBmcm9tICcuLi9tb2RlbC9Cb2R5LmpzJztcclxuaW1wb3J0IFNoYWRlZFNwaGVyZU5vZGUsIHsgU2hhZGVkU3BoZXJlTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvU2hhZGVkU3BoZXJlTm9kZS5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFNvbGFyU3lzdGVtQ29tbW9uU3RyaW5ncyBmcm9tICcuLi8uLi8uLi9zb2xhci1zeXN0ZW0tY29tbW9uL2pzL1NvbGFyU3lzdGVtQ29tbW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBQYXR0ZXJuU3RyaW5nUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9QYXR0ZXJuU3RyaW5nUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRXhwbG9zaW9uTm9kZSBmcm9tICcuL0V4cGxvc2lvbk5vZGUuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgU29sYXJTeXN0ZW1Db21tb25Db25zdGFudHMgZnJvbSAnLi4vU29sYXJTeXN0ZW1Db21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgc29sYXJTeXN0ZW1Db21tb24gZnJvbSAnLi4vc29sYXJTeXN0ZW1Db21tb24uanMnO1xyXG5pbXBvcnQgQm9kaWVzX0JyYXNzX0MzX21wMyBmcm9tICcuLi8uLi9zb3VuZHMvQm9kaWVzX0JyYXNzX0MzX21wMy5qcyc7XHJcbmltcG9ydCBCb2RpZXNfRmx1dGVfZzNfbXAzIGZyb20gJy4uLy4uL3NvdW5kcy9Cb2RpZXNfRmx1dGVfZzNfbXAzLmpzJztcclxuaW1wb3J0IEJvZGllc19TdHJpbmdzX2UzX3YyX21wMyBmcm9tICcuLi8uLi9zb3VuZHMvQm9kaWVzX1N0cmluZ3NfZTNfdjJfbXAzLmpzJztcclxuaW1wb3J0IEJvZGllc19Xb29kd2luZHNfZTNfbXAzIGZyb20gJy4uLy4uL3NvdW5kcy9Cb2RpZXNfV29vZHdpbmRzX2UzX21wMy5qcyc7XHJcbmltcG9ydCBHcmFiX1NvdW5kX21wMyBmcm9tICcuLi8uLi9zb3VuZHMvR3JhYl9Tb3VuZF9tcDMuanMnO1xyXG5pbXBvcnQgUmVsZWFzZV9Tb3VuZF9tcDMgZnJvbSAnLi4vLi4vc291bmRzL1JlbGVhc2VfU291bmRfbXAzLmpzJztcclxuaW1wb3J0IFNvdW5kQ2xpcCBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9zb3VuZC1nZW5lcmF0b3JzL1NvdW5kQ2xpcC5qcyc7XHJcbmltcG9ydCBzb3VuZE1hbmFnZXIgZnJvbSAnLi4vLi4vLi4vdGFtYm8vanMvc291bmRNYW5hZ2VyLmpzJztcclxuaW1wb3J0IEN1ZWluZ0Fycm93c05vZGUgZnJvbSAnLi9DdWVpbmdBcnJvd3NOb2RlLmpzJztcclxuXHJcblxyXG5jb25zdCBib2R5U291bmRzID0gW1xyXG4gIEJvZGllc19CcmFzc19DM19tcDMsXHJcbiAgQm9kaWVzX1dvb2R3aW5kc19lM19tcDMsXHJcbiAgQm9kaWVzX1N0cmluZ3NfZTNfdjJfbXAzLFxyXG4gIEJvZGllc19GbHV0ZV9nM19tcDNcclxuXTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgZHJhZ2dhYmxlPzogYm9vbGVhbjtcclxuICBtYXBQb3NpdGlvbj86ICggcG9zaXRpb246IFZlY3RvcjIsIHJhZGl1czogbnVtYmVyICkgPT4gVmVjdG9yMjtcclxuICB2YWx1ZXNWaXNpYmxlUHJvcGVydHk/OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPjtcclxuICByZWN0YW5nbGVPcHRpb25zPzogUmVjdGFuZ2xlT3B0aW9ucztcclxuICB0ZXh0T3B0aW9ucz86IFRleHRPcHRpb25zO1xyXG4gIHVzZUN1ZWluZ0Fycm93cz86IGJvb2xlYW47XHJcblxyXG4gIHNob3dWZWxvY2l0eUluZGV4PzogYm9vbGVhbjtcclxuXHJcbiAgLy8gSWYgYSBzb3VuZFZpZXdOb2RlIGlzIHByb3ZpZGVkLCB3ZSdsbCBob29rIHVwIGEgc291bmRDbGlwIHRvIGl0IGFuZCBwbGF5IHNvdW5kcyB3aGVuIGl0IGlzIHZpc2libGVcclxuICBzb3VuZFZpZXdOb2RlPzogTm9kZSB8IG51bGw7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBCb2R5Tm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8U2hhZGVkU3BoZXJlTm9kZU9wdGlvbnMsICdjdXJzb3InPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvZHlOb2RlIGV4dGVuZHMgSW50ZXJhY3RpdmVIaWdobGlnaHRpbmcoIFNoYWRlZFNwaGVyZU5vZGUgKSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlQm9keU5vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBzb3VuZENsaXA6IFNvdW5kQ2xpcDtcclxuICBwdWJsaWMgcmVhZG9ubHkgZ3JhYkNsaXA6IFNvdW5kQ2xpcDtcclxuICBwdWJsaWMgcmVhZG9ubHkgcmVsZWFzZUNsaXA6IFNvdW5kQ2xpcDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwdWJsaWMgcmVhZG9ubHkgYm9keTogQm9keSwgbW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PE1vZGVsVmlld1RyYW5zZm9ybTI+LCBwcm92aWRlZE9wdGlvbnM/OiBCb2R5Tm9kZU9wdGlvbnMgKSB7XHJcbiAgICBjb25zdCBhY2Nlc3NpYmxlTmFtZSA9ICdCb2R5ICcgKyAoIGJvZHkuaW5kZXggKyAxICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCb2R5Tm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICBkcmFnZ2FibGU6IHRydWUsXHJcblxyXG4gICAgICBtYWluQ29sb3I6IGJvZHkuY29sb3JQcm9wZXJ0eSxcclxuXHJcbiAgICAgIG1hcFBvc2l0aW9uOiBfLmlkZW50aXR5LFxyXG5cclxuICAgICAgdmFsdWVzVmlzaWJsZVByb3BlcnR5OiBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApLFxyXG5cclxuICAgICAgcmVjdGFuZ2xlT3B0aW9uczoge1xyXG4gICAgICAgIGNvcm5lclJhZGl1czogMixcclxuICAgICAgICBmaWxsOiBuZXcgQ29sb3IoIDAsIDAsIDAsIDAuNSApXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzb3VuZFZpZXdOb2RlOiBudWxsLFxyXG5cclxuICAgICAgdGV4dE9wdGlvbnM6IHtcclxuICAgICAgICBmaWxsOiAnd2hpdGUnLCAvLyBOb3QgYSBjb2xvclByb3BlcnR5IGJlY2F1c2UgaXQgaXMgbm90IGR5bmFtaWNcclxuICAgICAgICBtYXhXaWR0aDogU29sYXJTeXN0ZW1Db21tb25Db25zdGFudHMuVEVYVF9NQVhfV0lEVEgsXHJcbiAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNiApXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICB1c2VDdWVpbmdBcnJvd3M6IGZhbHNlLFxyXG4gICAgICBzaG93VmVsb2NpdHlJbmRleDogdHJ1ZSxcclxuXHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgdGFnTmFtZTogJ2RpdicsXHJcbiAgICAgIGZvY3VzYWJsZTogdHJ1ZSxcclxuICAgICAgYXJpYUxhYmVsOiBhY2Nlc3NpYmxlTmFtZSwgLy8gdGhlIHNjcmVlbiByZWFkZXIgQWNjZXNzaWJsZSBOYW1lXHJcbiAgICAgIGlubmVyQ29udGVudDogYWNjZXNzaWJsZU5hbWUsIC8vIG5lZWRlZCB0byBtYWtlIGl0IGZvY3VzYWJsZSBpbiB0aGUgUERPTVxyXG4gICAgICBhcmlhUm9sZTogJ2FwcGxpY2F0aW9uJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy5jdXJzb3IgPSBvcHRpb25zLmRyYWdnYWJsZSA/ICdwb2ludGVyJyA6ICdkZWZhdWx0JztcclxuXHJcbiAgICBzdXBlciggMSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcblxyXG4gICAgdGhpcy5zb3VuZENsaXAgPSBuZXcgU291bmRDbGlwKCBib2R5U291bmRzWyBib2R5LmluZGV4IF0sIHtcclxuICAgICAgaW5pdGlhbE91dHB1dExldmVsOiBTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cy5ERUZBVUxUX1NPVU5EX09VVFBVVF9MRVZFTCxcclxuICAgICAgbG9vcDogdHJ1ZVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGRyYWdDbGlwT3B0aW9ucyA9IHtcclxuICAgICAgaW5pdGlhbE91dHB1dExldmVsOiAyICogU29sYXJTeXN0ZW1Db21tb25Db25zdGFudHMuREVGQVVMVF9TT1VORF9PVVRQVVRfTEVWRUxcclxuICAgIH07XHJcbiAgICB0aGlzLmdyYWJDbGlwID0gbmV3IFNvdW5kQ2xpcCggR3JhYl9Tb3VuZF9tcDMsIGRyYWdDbGlwT3B0aW9ucyApO1xyXG4gICAgdGhpcy5yZWxlYXNlQ2xpcCA9IG5ldyBTb3VuZENsaXAoIFJlbGVhc2VfU291bmRfbXAzLCBkcmFnQ2xpcE9wdGlvbnMgKTtcclxuXHJcbiAgICBpZiAoIG9wdGlvbnMuc291bmRWaWV3Tm9kZSApIHtcclxuICAgICAgc291bmRNYW5hZ2VyLmFkZFNvdW5kR2VuZXJhdG9yKCB0aGlzLnNvdW5kQ2xpcCwge1xyXG4gICAgICAgIGFzc29jaWF0ZWRWaWV3Tm9kZTogb3B0aW9ucy5zb3VuZFZpZXdOb2RlXHJcbiAgICAgIH0gKTtcclxuICAgICAgc291bmRNYW5hZ2VyLmFkZFNvdW5kR2VuZXJhdG9yKCB0aGlzLmdyYWJDbGlwLCB7XHJcbiAgICAgICAgYXNzb2NpYXRlZFZpZXdOb2RlOiBvcHRpb25zLnNvdW5kVmlld05vZGVcclxuICAgICAgfSApO1xyXG4gICAgICBzb3VuZE1hbmFnZXIuYWRkU291bmRHZW5lcmF0b3IoIHRoaXMucmVsZWFzZUNsaXAsIHtcclxuICAgICAgICBhc3NvY2lhdGVkVmlld05vZGU6IG9wdGlvbnMuc291bmRWaWV3Tm9kZVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmFkaXVzTXVsdGlsaW5rID0gTXVsdGlsaW5rLm11bHRpbGluayhcclxuICAgICAgWyBib2R5LnJhZGl1c1Byb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eSBdLFxyXG4gICAgICAoIHJhZGl1cywgbW9kZWxWaWV3VHJhbnNmb3JtICkgPT4ge1xyXG4gICAgICAgIHRoaXMucmFkaXVzID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCByYWRpdXMgKTtcclxuICAgICAgICAvLyBFeHBhbmQgbW91c2UvdG91Y2ggYXJlYXMgdG8gMTAgdW5pdHMgcGFzdFxyXG4gICAgICAgIGNvbnN0IGFyZWEgPSBTaGFwZS5jaXJjbGUoIDAsIDAsIHRoaXMucmFkaXVzICsgMTAgKTtcclxuICAgICAgICB0aGlzLm1vdXNlQXJlYSA9IGFyZWE7XHJcbiAgICAgICAgdGhpcy50b3VjaEFyZWEgPSBhcmVhO1xyXG4gICAgICAgIHRoaXMuZm9jdXNIaWdobGlnaHQgPSBhcmVhO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgcG9zaXRpb25NdWx0aWxpbmsgPSBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICBbIGJvZHkucG9zaXRpb25Qcm9wZXJ0eSwgbW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHkgXSxcclxuICAgICAgKCBwb3NpdGlvbiwgbW9kZWxWaWV3VHJhbnNmb3JtICkgPT4ge1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRpb24gPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggcG9zaXRpb24gKTtcclxuXHJcbiAgICAgICAgLy8gSWYgYm9keSBwb3NpdGlvbiBpcyBiaWdnZXIgdGhhbiB0aGUgcHJvdmlkZWQgYm91bmRzXHJcbiAgICAgICAgdGhpcy5ib2R5LmVzY2FwZWRQcm9wZXJ0eS52YWx1ZSA9IGJvZHkucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS5tYWduaXR1ZGUgPiBvcHRpb25zLm1hcFBvc2l0aW9uKCBib2R5LnBvc2l0aW9uUHJvcGVydHkudmFsdWUsIHRoaXMucmFkaXVzICkubWFnbml0dWRlO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgbGV0IGtleWJvYXJkRHJhZ0xpc3RlbmVyOiBLZXlib2FyZERyYWdMaXN0ZW5lcjtcclxuXHJcbiAgICBpZiAoIG9wdGlvbnMuZHJhZ2dhYmxlICkge1xyXG4gICAgICBjb25zdCBzdGFydCA9ICgpID0+IHtcclxuICAgICAgICBib2R5LmNsZWFyUGF0aCgpO1xyXG4gICAgICAgIGJvZHkudXNlckNvbnRyb2xsZWRQb3NpdGlvblByb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmdyYWJDbGlwLnBsYXkoKTtcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgZW5kID0gKCkgPT4ge1xyXG4gICAgICAgIGJvZHkudXNlckNvbnRyb2xsZWRQb3NpdGlvblByb3BlcnR5LnZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZWxlYXNlQ2xpcC5wbGF5KCk7XHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IG1hcCA9ICggcG9pbnQ6IFZlY3RvcjIgKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMubWFwUG9zaXRpb24oIHBvaW50LCB0aGlzLnJhZGl1cyApO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgYm9keURyYWdMaXN0ZW5lciA9IG5ldyBEcmFnTGlzdGVuZXIoIHtcclxuICAgICAgICBwb3NpdGlvblByb3BlcnR5OiBib2R5LnBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgICAgY2FuU3RhcnRQcmVzczogKCkgPT4gIWJvZHkudXNlckNvbnRyb2xsZWRQb3NpdGlvblByb3BlcnR5LnZhbHVlLFxyXG4gICAgICAgIG1hcFBvc2l0aW9uOiBtYXAsXHJcbiAgICAgICAgdHJhbnNmb3JtOiBtb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eSxcclxuICAgICAgICBzdGFydDogc3RhcnQsXHJcbiAgICAgICAgZW5kOiBlbmRcclxuICAgICAgfSApO1xyXG4gICAgICB0aGlzLmFkZElucHV0TGlzdGVuZXIoIGJvZHlEcmFnTGlzdGVuZXIgKTtcclxuXHJcbiAgICAgIGtleWJvYXJkRHJhZ0xpc3RlbmVyID0gbmV3IEtleWJvYXJkRHJhZ0xpc3RlbmVyKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHBvc2l0aW9uUHJvcGVydHk6IGJvZHkucG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgICAgIHRyYW5zZm9ybTogbW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHksXHJcbiAgICAgICAgICBkcmFnVmVsb2NpdHk6IDQ1MCxcclxuICAgICAgICAgIHNoaWZ0RHJhZ1ZlbG9jaXR5OiAxMDAsXHJcbiAgICAgICAgICBzdGFydDogc3RhcnQsXHJcbiAgICAgICAgICBlbmQ6IGVuZCxcclxuICAgICAgICAgIG1hcFBvc2l0aW9uOiBtYXBcclxuICAgICAgICB9ICk7XHJcbiAgICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lcigga2V5Ym9hcmREcmFnTGlzdGVuZXIgKTtcclxuICAgICAgdGhpcy5kaXNwb3NlRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICAgIGJvZHlEcmFnTGlzdGVuZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIGtleWJvYXJkRHJhZ0xpc3RlbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZlbG9jaXR5VmFsdWVQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgdGhpcy5ib2R5LnZlbG9jaXR5UHJvcGVydHkgXSxcclxuICAgICAgKCB2ZWxvY2l0eTogVmVjdG9yMiApID0+IFV0aWxzLnRvRml4ZWQoXHJcbiAgICAgICAgdmVsb2NpdHkubWFnbml0dWRlICogU29sYXJTeXN0ZW1Db21tb25Db25zdGFudHMuVkVMT0NJVFlfTVVMVElQTElFUixcclxuICAgICAgICAyXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICBjb25zdCByZWFkb3V0U3RyaW5nUHJvcGVydHkgPSBuZXcgUGF0dGVyblN0cmluZ1Byb3BlcnR5KCBTb2xhclN5c3RlbUNvbW1vblN0cmluZ3MucGF0dGVybi52ZWxvY2l0eVZhbHVlVW5pdHNTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBpbmRleDogb3B0aW9ucy5zaG93VmVsb2NpdHlJbmRleCA/IGJvZHkuaW5kZXggKyAxIDogJycsXHJcbiAgICAgIHZhbHVlOiB2ZWxvY2l0eVZhbHVlUHJvcGVydHksXHJcbiAgICAgIHVuaXRzOiBTb2xhclN5c3RlbUNvbW1vblN0cmluZ3MudW5pdHMua21zU3RyaW5nUHJvcGVydHlcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB2YWx1ZU5vZGUgPSBuZXcgUmljaFRleHQoIHJlYWRvdXRTdHJpbmdQcm9wZXJ0eSwgb3B0aW9ucy50ZXh0T3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHZhbHVlQmFja2dyb3VuZE5vZGUgPSBuZXcgUmVjdGFuZ2xlKCBvcHRpb25zLnJlY3RhbmdsZU9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBSZXNpemVzIHRoZSB2YWx1ZSBiYWNrZ3JvdW5kIGFuZCBjZW50ZXJzIGl0IG9uIHRoZSB2YWx1ZVxyXG4gICAgdmFsdWVOb2RlLmJvdW5kc1Byb3BlcnR5LmxpbmsoIGJvdW5kcyA9PiB7XHJcbiAgICAgIHZhbHVlQmFja2dyb3VuZE5vZGUucmVjdEJvdW5kcyA9IGJvdW5kcy5kaWxhdGVkKCA0ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVmFsdWUgQ29udGFpbmVyXHJcbiAgICBjb25zdCB2YWx1ZUNvbnRhaW5lciA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIHZhbHVlQmFja2dyb3VuZE5vZGUsIHZhbHVlTm9kZSBdLFxyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IG9wdGlvbnMudmFsdWVzVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICBjZW50ZXI6IG5ldyBWZWN0b3IyKCAwLCAzMCApXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB2YWx1ZUNvbnRhaW5lciApO1xyXG5cclxuICAgIGNvbnN0IGJvZHlDb2xsaXNpb25MaXN0ZW5lciA9ICgpID0+IHtcclxuICAgICAgdGhpcy5pbnRlcnJ1cHRTdWJ0cmVlSW5wdXQoKTtcclxuICAgICAgRXhwbG9zaW9uTm9kZS5leHBsb2RlKCB0aGlzICk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuYm9keS5jb2xsaWRlZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIGJvZHlDb2xsaXNpb25MaXN0ZW5lciApO1xyXG5cclxuICAgIGNvbnN0IGN1ZWluZ1Zpc2libGVQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy5ib2R5LnVzZXJDb250cm9sbGVkUHJvcGVydHkgXSwgd2FzRHJhZ2dlZCA9PiAoIG9wdGlvbnMuZHJhZ2dhYmxlICYmICF3YXNEcmFnZ2VkICkgKTtcclxuICAgIGNvbnN0IGN1ZWluZ0Fycm93c05vZGUgPSBuZXcgQ3VlaW5nQXJyb3dzTm9kZSgge1xyXG4gICAgICBib2R5UmFkaXVzOiB0aGlzLnJhZGl1cyxcclxuICAgICAgZmlsbDogb3B0aW9ucy5tYWluQ29sb3IsXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogY3VlaW5nVmlzaWJsZVByb3BlcnR5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgaWYgKCBvcHRpb25zLnVzZUN1ZWluZ0Fycm93cyApIHtcclxuICAgICAgdGhpcy5hZGRDaGlsZCggY3VlaW5nQXJyb3dzTm9kZSApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGlzcG9zZUJvZHlOb2RlID0gKCkgPT4ge1xyXG4gICAgICB2YWx1ZUNvbnRhaW5lci5kaXNwb3NlKCk7IC8vIEJlY2F1c2Ugd2UgcHJvdmlkZSB0aGUgdmlzaWJsZVByb3BlcnR5XHJcbiAgICAgIHBvc2l0aW9uTXVsdGlsaW5rLmRpc3Bvc2UoKTtcclxuICAgICAgcmFkaXVzTXVsdGlsaW5rLmRpc3Bvc2UoKTtcclxuICAgICAgY3VlaW5nVmlzaWJsZVByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgY3VlaW5nQXJyb3dzTm9kZS5kaXNwb3NlKCk7XHJcblxyXG4gICAgICB0aGlzLmJvZHkuY29sbGlkZWRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCBib2R5Q29sbGlzaW9uTGlzdGVuZXIgKTtcclxuICAgICAgcmVhZG91dFN0cmluZ1Byb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgdmVsb2NpdHlWYWx1ZVByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgdmFsdWVOb2RlLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5zdG9wU291bmQoKTtcclxuICAgICAgaWYgKCBvcHRpb25zLnNvdW5kVmlld05vZGUgKSB7XHJcbiAgICAgICAgc291bmRNYW5hZ2VyLnJlbW92ZVNvdW5kR2VuZXJhdG9yKCB0aGlzLnNvdW5kQ2xpcCApO1xyXG4gICAgICAgIHNvdW5kTWFuYWdlci5yZW1vdmVTb3VuZEdlbmVyYXRvciggdGhpcy5ncmFiQ2xpcCApO1xyXG4gICAgICAgIHNvdW5kTWFuYWdlci5yZW1vdmVTb3VuZEdlbmVyYXRvciggdGhpcy5yZWxlYXNlQ2xpcCApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc291bmRDbGlwLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5ncmFiQ2xpcC5kaXNwb3NlKCk7XHJcbiAgICAgIHRoaXMucmVsZWFzZUNsaXAuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwbGF5U291bmQoKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMuYm9keS5pc0FjdGl2ZVByb3BlcnR5LnZhbHVlICkge1xyXG4gICAgICB0aGlzLnNvdW5kQ2xpcC5zZXRPdXRwdXRMZXZlbCggdGhpcy5ib2R5LmFjY2VsZXJhdGlvblByb3BlcnR5LnZhbHVlLm1hZ25pdHVkZSAvIDIwMDAgKTtcclxuICAgICAgdGhpcy5zb3VuZENsaXAucGxheSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc291bmRDbGlwLnN0b3AoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdG9wU291bmQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNvdW5kQ2xpcC5zdG9wKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUJvZHlOb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zb2xhclN5c3RlbUNvbW1vbi5yZWdpc3RlciggJ0JvZHlOb2RlJywgQm9keU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLHVCQUF1QixFQUFFQyxvQkFBb0IsRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQW9CQyxRQUFRLFFBQXFCLGdDQUFnQztBQUM3SyxPQUFPQyxLQUFLLE1BQU0sMEJBQTBCO0FBRTVDLE9BQU9DLGdCQUFnQixNQUFtQyw4Q0FBOEM7QUFFeEcsT0FBT0MsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxTQUFTLE1BQU0sK0JBQStCO0FBRXJELE9BQU9DLHdCQUF3QixNQUFNLDZEQUE2RDtBQUNsRyxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLFFBQVEsTUFBTSxzQ0FBc0M7QUFDM0QsT0FBT0MscUJBQXFCLE1BQU0sMkNBQTJDO0FBQzdFLE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFDOUMsT0FBT0MsZUFBZSxNQUFNLHFDQUFxQztBQUNqRSxTQUFTQyxLQUFLLFFBQVEsNkJBQTZCO0FBQ25ELE9BQU9DLDBCQUEwQixNQUFNLGtDQUFrQztBQUN6RSxPQUFPQyxlQUFlLE1BQU0scUNBQXFDO0FBRWpFLE9BQU9DLGlCQUFpQixNQUFNLHlCQUF5QjtBQUN2RCxPQUFPQyxtQkFBbUIsTUFBTSxxQ0FBcUM7QUFDckUsT0FBT0MsbUJBQW1CLE1BQU0scUNBQXFDO0FBQ3JFLE9BQU9DLHdCQUF3QixNQUFNLDBDQUEwQztBQUMvRSxPQUFPQyx1QkFBdUIsTUFBTSx5Q0FBeUM7QUFDN0UsT0FBT0MsY0FBYyxNQUFNLGdDQUFnQztBQUMzRCxPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFDakUsT0FBT0MsU0FBUyxNQUFNLGlEQUFpRDtBQUN2RSxPQUFPQyxZQUFZLE1BQU0sbUNBQW1DO0FBQzVELE9BQU9DLGdC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