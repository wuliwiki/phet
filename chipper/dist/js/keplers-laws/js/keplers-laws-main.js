// Copyright 2023, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author Agustín Vallejo
 */

import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import Tandem from '../../tandem/js/Tandem.js';
import KeplersLawsStrings from './KeplersLawsStrings.js';
import FirstLawScreen from './first-law/FirstLawScreen.js';
import SecondLawScreen from './second-law/SecondLawScreen.js';
import ThirdLawScreen from './third-law/ThirdLawScreen.js';
import LabScreen from './lab/LabScreen.js';
import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';

// Launch the sim. Beware that scenery Image nodes created outside simLauncher.launch() will have zero bounds
// until the images are fully loaded. See https://github.com/phetsims/coulombs-law/issues/70#issuecomment-429037461
simLauncher.launch(() => {
  const titleStringProperty = KeplersLawsStrings['keplers-laws'].titleStringProperty;
  const screens = [new FirstLawScreen(Tandem.ROOT.createTandem('firstLawScreen')), new SecondLawScreen(Tandem.ROOT.createTandem('secondLawScreen')), new ThirdLawScreen(Tandem.ROOT.createTandem('thirdLawScreen')), new LabScreen(Tandem.ROOT.createTandem('labScreen'))];
  const options = {
    credits: {
      leadDesign: 'Diana López Tavares',
      softwareDevelopment: 'Agustín Vallejo, Jonathan Olson',
      team: 'Emily B. Moore, Sola Olateju, Kathy Perkins, Ariel Paul, Amy Rouinfar',
      qualityAssurance: 'Jaron Droder, Clifford Hardin, Emily Miller, Nancy Salpepi, Kathryn Woessner',
      graphicArts: '',
      soundDesign: 'Ashton Morris',
      thanks: ''
    },
    preferencesModel: new PreferencesModel({
      visualOptions: {
        supportsProjectorMode: true
      }
    })
  };
  const sim = new Sim(titleStringProperty, screens, options);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW0iLCJzaW1MYXVuY2hlciIsIlRhbmRlbSIsIktlcGxlcnNMYXdzU3RyaW5ncyIsIkZpcnN0TGF3U2NyZWVuIiwiU2Vjb25kTGF3U2NyZWVuIiwiVGhpcmRMYXdTY3JlZW4iLCJMYWJTY3JlZW4iLCJQcmVmZXJlbmNlc01vZGVsIiwibGF1bmNoIiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsInNjcmVlbnMiLCJST09UIiwiY3JlYXRlVGFuZGVtIiwib3B0aW9ucyIsImNyZWRpdHMiLCJsZWFkRGVzaWduIiwic29mdHdhcmVEZXZlbG9wbWVudCIsInRlYW0iLCJxdWFsaXR5QXNzdXJhbmNlIiwiZ3JhcGhpY0FydHMiLCJzb3VuZERlc2lnbiIsInRoYW5rcyIsInByZWZlcmVuY2VzTW9kZWwiLCJ2aXN1YWxPcHRpb25zIiwic3VwcG9ydHNQcm9qZWN0b3JNb2RlIiwic2ltIiwic3RhcnQiXSwic291cmNlcyI6WyJrZXBsZXJzLWxhd3MtbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlIHNpbS5cclxuICpcclxuICogQGF1dGhvciBBZ3VzdMOtbiBWYWxsZWpvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNpbSwgeyBTaW1PcHRpb25zIH0gZnJvbSAnLi4vLi4vam9pc3QvanMvU2ltLmpzJztcclxuaW1wb3J0IHNpbUxhdW5jaGVyIGZyb20gJy4uLy4uL2pvaXN0L2pzL3NpbUxhdW5jaGVyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEtlcGxlcnNMYXdzU3RyaW5ncyBmcm9tICcuL0tlcGxlcnNMYXdzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBGaXJzdExhd1NjcmVlbiBmcm9tICcuL2ZpcnN0LWxhdy9GaXJzdExhd1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTZWNvbmRMYXdTY3JlZW4gZnJvbSAnLi9zZWNvbmQtbGF3L1NlY29uZExhd1NjcmVlbi5qcyc7XHJcbmltcG9ydCBUaGlyZExhd1NjcmVlbiBmcm9tICcuL3RoaXJkLWxhdy9UaGlyZExhd1NjcmVlbi5qcyc7XHJcbmltcG9ydCBMYWJTY3JlZW4gZnJvbSAnLi9sYWIvTGFiU2NyZWVuLmpzJztcclxuaW1wb3J0IFByZWZlcmVuY2VzTW9kZWwgZnJvbSAnLi4vLi4vam9pc3QvanMvcHJlZmVyZW5jZXMvUHJlZmVyZW5jZXNNb2RlbC5qcyc7XHJcblxyXG4vLyBMYXVuY2ggdGhlIHNpbS4gQmV3YXJlIHRoYXQgc2NlbmVyeSBJbWFnZSBub2RlcyBjcmVhdGVkIG91dHNpZGUgc2ltTGF1bmNoZXIubGF1bmNoKCkgd2lsbCBoYXZlIHplcm8gYm91bmRzXHJcbi8vIHVudGlsIHRoZSBpbWFnZXMgYXJlIGZ1bGx5IGxvYWRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jb3Vsb21icy1sYXcvaXNzdWVzLzcwI2lzc3VlY29tbWVudC00MjkwMzc0NjFcclxuc2ltTGF1bmNoZXIubGF1bmNoKCAoKSA9PiB7XHJcblxyXG4gIGNvbnN0IHRpdGxlU3RyaW5nUHJvcGVydHkgPSBLZXBsZXJzTGF3c1N0cmluZ3NbICdrZXBsZXJzLWxhd3MnIF0udGl0bGVTdHJpbmdQcm9wZXJ0eTtcclxuXHJcbiAgY29uc3Qgc2NyZWVucyA9IFtcclxuICAgIG5ldyBGaXJzdExhd1NjcmVlbiggVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAnZmlyc3RMYXdTY3JlZW4nICkgKSxcclxuICAgIG5ldyBTZWNvbmRMYXdTY3JlZW4oIFRhbmRlbS5ST09ULmNyZWF0ZVRhbmRlbSggJ3NlY29uZExhd1NjcmVlbicgKSApLFxyXG4gICAgbmV3IFRoaXJkTGF3U2NyZWVuKCBUYW5kZW0uUk9PVC5jcmVhdGVUYW5kZW0oICd0aGlyZExhd1NjcmVlbicgKSApLFxyXG4gICAgbmV3IExhYlNjcmVlbiggVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAnbGFiU2NyZWVuJyApIClcclxuICBdO1xyXG5cclxuICBjb25zdCBvcHRpb25zOiBTaW1PcHRpb25zID0ge1xyXG4gICAgY3JlZGl0czoge1xyXG4gICAgICBsZWFkRGVzaWduOiAnRGlhbmEgTMOzcGV6IFRhdmFyZXMnLFxyXG4gICAgICBzb2Z0d2FyZURldmVsb3BtZW50OiAnQWd1c3TDrW4gVmFsbGVqbywgSm9uYXRoYW4gT2xzb24nLFxyXG4gICAgICB0ZWFtOiAnRW1pbHkgQi4gTW9vcmUsIFNvbGEgT2xhdGVqdSwgS2F0aHkgUGVya2lucywgQXJpZWwgUGF1bCwgQW15IFJvdWluZmFyJyxcclxuICAgICAgcXVhbGl0eUFzc3VyYW5jZTogJ0phcm9uIERyb2RlciwgQ2xpZmZvcmQgSGFyZGluLCBFbWlseSBNaWxsZXIsIE5hbmN5IFNhbHBlcGksIEthdGhyeW4gV29lc3NuZXInLFxyXG4gICAgICBncmFwaGljQXJ0czogJycsXHJcbiAgICAgIHNvdW5kRGVzaWduOiAnQXNodG9uIE1vcnJpcycsXHJcbiAgICAgIHRoYW5rczogJydcclxuICAgIH0sXHJcbiAgICBwcmVmZXJlbmNlc01vZGVsOiBuZXcgUHJlZmVyZW5jZXNNb2RlbCgge1xyXG4gICAgICB2aXN1YWxPcHRpb25zOiB7XHJcbiAgICAgICAgc3VwcG9ydHNQcm9qZWN0b3JNb2RlOiB0cnVlXHJcbiAgICAgIH1cclxuICAgIH0gKVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNpbSA9IG5ldyBTaW0oIHRpdGxlU3RyaW5nUHJvcGVydHksIHNjcmVlbnMsIG9wdGlvbnMgKTtcclxuICBzaW0uc3RhcnQoKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxHQUFHLE1BQXNCLHVCQUF1QjtBQUN2RCxPQUFPQyxXQUFXLE1BQU0sK0JBQStCO0FBQ3ZELE9BQU9DLE1BQU0sTUFBTSwyQkFBMkI7QUFDOUMsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBQ3hELE9BQU9DLGNBQWMsTUFBTSwrQkFBK0I7QUFDMUQsT0FBT0MsZUFBZSxNQUFNLGlDQUFpQztBQUM3RCxPQUFPQyxjQUFjLE1BQU0sK0JBQStCO0FBQzFELE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFDMUMsT0FBT0MsZ0JBQWdCLE1BQU0sZ0RBQWdEOztBQUU3RTtBQUNBO0FBQ0FQLFdBQVcsQ0FBQ1EsTUFBTSxDQUFFLE1BQU07RUFFeEIsTUFBTUMsbUJBQW1CLEdBQUdQLGtCQUFrQixDQUFFLGNBQWMsQ0FBRSxDQUFDTyxtQkFBbUI7RUFFcEYsTUFBTUMsT0FBTyxHQUFHLENBQ2QsSUFBSVAsY0FBYyxDQUFFRixNQUFNLENBQUNVLElBQUksQ0FBQ0MsWUFBWSxDQUFFLGdCQUFpQixDQUFFLENBQUMsRUFDbEUsSUFBSVIsZUFBZSxDQUFFSCxNQUFNLENBQUNVLElBQUksQ0FBQ0MsWUFBWSxDQUFFLGlCQUFrQixDQUFFLENBQUMsRUFDcEUsSUFBSVAsY0FBYyxDQUFFSixNQUFNLENBQUNVLElBQUksQ0FBQ0MsWUFBWSxDQUFFLGdCQUFpQixDQUFFLENBQUMsRUFDbEUsSUFBSU4sU0FBUyxDQUFFTCxNQUFNLENBQUNVLElBQUksQ0FBQ0MsWUFBWSxDQUFFLFdBQVksQ0FBRSxDQUFDLENBQ3pEO0VBRUQsTUFBTUMsT0FBbUIsR0FBRztJQUMxQkMsT0FBTyxFQUFFO01BQ1BDLFVBQVUsRUFBRSxxQkFBcUI7TUFDakNDLG1CQUFtQixFQUFFLGlDQUFpQztNQUN0REMsSUFBSSxFQUFFLHVFQUF1RTtNQUM3RUMsZ0JBQWdCLEVBQUUsOEVBQThFO01BQ2hHQyxXQUFXLEVBQUUsRUFBRTtNQUNmQyxXQUFXLEVBQUUsZUFBZTtNQUM1QkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQztJQUNEQyxnQkFBZ0IsRUFBRSxJQUFJZixnQkFBZ0IsQ0FBRTtNQUN0Q2dCLGFBQWEsRUFBRTtRQUNiQyxxQkFBcUIsRUFBRTtNQUN6QjtJQUNGLENBQUU7RUFDSixDQUFDO0VBRUQsTUFBTUMsR0FBRyxHQUFHLElBQUkxQixHQUFHLENBQUVVLG1CQUFtQixFQUFFQyxPQUFPLEVBQUVHLE9BQVEsQ0FBQztFQUM1RFksR0FBRyxDQUFDQyxLQUFLLENBQUMsQ0FBQztBQUNiLENBQUUsQ0FBQyJ9