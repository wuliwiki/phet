// Copyright 2023, University of Colorado Boulder

/**
 * A simple warning that appears when the user tries to make a forbidden orbit.
 *
 * @author Agust√≠n Vallejo
 */

import SolarSystemCommonConstants from '../../../../solar-system-common/js/SolarSystemCommonConstants.js';
import { Node, RichText } from '../../../../scenery/js/imports.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import OrbitTypes from '../model/OrbitTypes.js';
import KeplersLawsStrings from '../../../../keplers-laws/js/KeplersLawsStrings.js';
import Multilink from '../../../../axon/js/Multilink.js';
import keplersLaws from '../../keplersLaws.js';
export default class OrbitalWarningMessage extends Node {
  constructor(model, modelViewTransformProperty) {
    const options = {
      visibleProperty: DerivedProperty.not(model.engine.allowedOrbitProperty),
      center: modelViewTransformProperty.value.modelToViewPosition(new Vector2(0, -50))
    };

    //REVIEW: Why a local variable for this?
    //REVIEW: Please create a DerivedProperty<string> for this, and then pass that to the RichText constructor 1st param
    //REVIEW: instead of the multilink that is used.
    //REVIEW: no need for `message` variable
    let message = '';
    const warningText = new RichText(message, SolarSystemCommonConstants.TITLE_OPTIONS);
    Multilink.multilink([model.engine.orbitTypeProperty, KeplersLawsStrings.warning.warningStringProperty, KeplersLawsStrings.warning.crashOrbitStringProperty, KeplersLawsStrings.warning.escapeOrbitStringProperty], (orbitType, warningString, crashOrbitString, escapeOrbitString) => {
      //REVIEW: I believe i18n patterns should be used for this, instead of string concatenation with a colon
      //REVIEW: why is the colon, space, and placeholder not available in the warning.warning string?
      message = warningString + ': ';
      switch (orbitType) {
        case OrbitTypes.CRASH_ORBIT:
          message += crashOrbitString;
          break;
        case OrbitTypes.ESCAPE_ORBIT:
          message += escapeOrbitString;
          break;
        default:
          break;
      }
      warningText.setString(message);

      //REVIEW: This would be a separate link to keep things centered
      warningText.center = options.center;
    });
    super({
      children: [warningText],
      ...options
    });
  }
}
keplersLaws.register('OrbitalWarningMessage', OrbitalWarningMessage);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cyIsIk5vZGUiLCJSaWNoVGV4dCIsIkRlcml2ZWRQcm9wZXJ0eSIsIlZlY3RvcjIiLCJPcmJpdFR5cGVzIiwiS2VwbGVyc0xhd3NTdHJpbmdzIiwiTXVsdGlsaW5rIiwia2VwbGVyc0xhd3MiLCJPcmJpdGFsV2FybmluZ01lc3NhZ2UiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwibW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHkiLCJvcHRpb25zIiwidmlzaWJsZVByb3BlcnR5Iiwibm90IiwiZW5naW5lIiwiYWxsb3dlZE9yYml0UHJvcGVydHkiLCJjZW50ZXIiLCJ2YWx1ZSIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJtZXNzYWdlIiwid2FybmluZ1RleHQiLCJUSVRMRV9PUFRJT05TIiwibXVsdGlsaW5rIiwib3JiaXRUeXBlUHJvcGVydHkiLCJ3YXJuaW5nIiwid2FybmluZ1N0cmluZ1Byb3BlcnR5IiwiY3Jhc2hPcmJpdFN0cmluZ1Byb3BlcnR5IiwiZXNjYXBlT3JiaXRTdHJpbmdQcm9wZXJ0eSIsIm9yYml0VHlwZSIsIndhcm5pbmdTdHJpbmciLCJjcmFzaE9yYml0U3RyaW5nIiwiZXNjYXBlT3JiaXRTdHJpbmciLCJDUkFTSF9PUkJJVCIsIkVTQ0FQRV9PUkJJVCIsInNldFN0cmluZyIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPcmJpdGFsV2FybmluZ01lc3NhZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgc2ltcGxlIHdhcm5pbmcgdGhhdCBhcHBlYXJzIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG8gbWFrZSBhIGZvcmJpZGRlbiBvcmJpdC5cclxuICpcclxuICogQGF1dGhvciBBZ3VzdMOtbiBWYWxsZWpvXHJcbiAqL1xyXG5cclxuaW1wb3J0IEtlcGxlcnNMYXdzTW9kZWwgZnJvbSAnLi4vbW9kZWwvS2VwbGVyc0xhd3NNb2RlbC5qcyc7XHJcbmltcG9ydCBTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9zb2xhci1zeXN0ZW0tY29tbW9uL2pzL1NvbGFyU3lzdGVtQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUmljaFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE9yYml0VHlwZXMgZnJvbSAnLi4vbW9kZWwvT3JiaXRUeXBlcy5qcyc7XHJcbmltcG9ydCBLZXBsZXJzTGF3c1N0cmluZ3MgZnJvbSAnLi4vLi4vLi4vLi4va2VwbGVycy1sYXdzL2pzL0tlcGxlcnNMYXdzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQga2VwbGVyc0xhd3MgZnJvbSAnLi4vLi4va2VwbGVyc0xhd3MuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JiaXRhbFdhcm5pbmdNZXNzYWdlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IEtlcGxlcnNMYXdzTW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxNb2RlbFZpZXdUcmFuc2Zvcm0yPiApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogRGVyaXZlZFByb3BlcnR5Lm5vdCggbW9kZWwuZW5naW5lLmFsbG93ZWRPcmJpdFByb3BlcnR5ICksXHJcbiAgICAgIGNlbnRlcjogbW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHkudmFsdWUubW9kZWxUb1ZpZXdQb3NpdGlvbiggbmV3IFZlY3RvcjIoIDAsIC01MCApIClcclxuICAgIH07XHJcblxyXG4gICAgLy9SRVZJRVc6IFdoeSBhIGxvY2FsIHZhcmlhYmxlIGZvciB0aGlzP1xyXG4gICAgLy9SRVZJRVc6IFBsZWFzZSBjcmVhdGUgYSBEZXJpdmVkUHJvcGVydHk8c3RyaW5nPiBmb3IgdGhpcywgYW5kIHRoZW4gcGFzcyB0aGF0IHRvIHRoZSBSaWNoVGV4dCBjb25zdHJ1Y3RvciAxc3QgcGFyYW1cclxuICAgIC8vUkVWSUVXOiBpbnN0ZWFkIG9mIHRoZSBtdWx0aWxpbmsgdGhhdCBpcyB1c2VkLlxyXG4gICAgLy9SRVZJRVc6IG5vIG5lZWQgZm9yIGBtZXNzYWdlYCB2YXJpYWJsZVxyXG4gICAgbGV0IG1lc3NhZ2UgPSAnJztcclxuICAgIGNvbnN0IHdhcm5pbmdUZXh0ID0gbmV3IFJpY2hUZXh0KCBtZXNzYWdlLCBTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cy5USVRMRV9PUFRJT05TICk7XHJcblxyXG5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoXHJcbiAgICAgIFtcclxuICAgICAgICBtb2RlbC5lbmdpbmUub3JiaXRUeXBlUHJvcGVydHksXHJcbiAgICAgICAgS2VwbGVyc0xhd3NTdHJpbmdzLndhcm5pbmcud2FybmluZ1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgIEtlcGxlcnNMYXdzU3RyaW5ncy53YXJuaW5nLmNyYXNoT3JiaXRTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgICBLZXBsZXJzTGF3c1N0cmluZ3Mud2FybmluZy5lc2NhcGVPcmJpdFN0cmluZ1Byb3BlcnR5XHJcbiAgICAgIF0sXHJcbiAgICAgICggb3JiaXRUeXBlLCB3YXJuaW5nU3RyaW5nLCBjcmFzaE9yYml0U3RyaW5nLCBlc2NhcGVPcmJpdFN0cmluZyApID0+IHtcclxuICAgICAgICAvL1JFVklFVzogSSBiZWxpZXZlIGkxOG4gcGF0dGVybnMgc2hvdWxkIGJlIHVzZWQgZm9yIHRoaXMsIGluc3RlYWQgb2Ygc3RyaW5nIGNvbmNhdGVuYXRpb24gd2l0aCBhIGNvbG9uXHJcbiAgICAgICAgLy9SRVZJRVc6IHdoeSBpcyB0aGUgY29sb24sIHNwYWNlLCBhbmQgcGxhY2Vob2xkZXIgbm90IGF2YWlsYWJsZSBpbiB0aGUgd2FybmluZy53YXJuaW5nIHN0cmluZz9cclxuICAgICAgICBtZXNzYWdlID0gd2FybmluZ1N0cmluZyArICc6ICc7XHJcbiAgICAgICAgc3dpdGNoKCBvcmJpdFR5cGUgKSB7XHJcbiAgICAgICAgICBjYXNlIE9yYml0VHlwZXMuQ1JBU0hfT1JCSVQ6XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gY3Jhc2hPcmJpdFN0cmluZztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIE9yYml0VHlwZXMuRVNDQVBFX09SQklUOlxyXG4gICAgICAgICAgICBtZXNzYWdlICs9IGVzY2FwZU9yYml0U3RyaW5nO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2FybmluZ1RleHQuc2V0U3RyaW5nKCBtZXNzYWdlICk7XHJcblxyXG4gICAgICAgIC8vUkVWSUVXOiBUaGlzIHdvdWxkIGJlIGEgc2VwYXJhdGUgbGluayB0byBrZWVwIHRoaW5ncyBjZW50ZXJlZFxyXG4gICAgICAgIHdhcm5pbmdUZXh0LmNlbnRlciA9IG9wdGlvbnMuY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIHdhcm5pbmdUZXh0IF0sXHJcbiAgICAgIC4uLm9wdGlvbnNcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmtlcGxlcnNMYXdzLnJlZ2lzdGVyKCAnT3JiaXRhbFdhcm5pbmdNZXNzYWdlJywgT3JiaXRhbFdhcm5pbmdNZXNzYWdlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLDBCQUEwQixNQUFNLGtFQUFrRTtBQUN6RyxTQUFTQyxJQUFJLEVBQUVDLFFBQVEsUUFBUSxtQ0FBbUM7QUFDbEUsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUdwRSxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFVBQVUsTUFBTSx3QkFBd0I7QUFDL0MsT0FBT0Msa0JBQWtCLE1BQU0sbURBQW1EO0FBQ2xGLE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUU5QyxlQUFlLE1BQU1DLHFCQUFxQixTQUFTUixJQUFJLENBQUM7RUFFL0NTLFdBQVdBLENBQUVDLEtBQXVCLEVBQUVDLDBCQUFrRSxFQUFHO0lBQ2hILE1BQU1DLE9BQU8sR0FBRztNQUNkQyxlQUFlLEVBQUVYLGVBQWUsQ0FBQ1ksR0FBRyxDQUFFSixLQUFLLENBQUNLLE1BQU0sQ0FBQ0Msb0JBQXFCLENBQUM7TUFDekVDLE1BQU0sRUFBRU4sMEJBQTBCLENBQUNPLEtBQUssQ0FBQ0MsbUJBQW1CLENBQUUsSUFBSWhCLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFHLENBQUU7SUFDdEYsQ0FBQzs7SUFFRDtJQUNBO0lBQ0E7SUFDQTtJQUNBLElBQUlpQixPQUFPLEdBQUcsRUFBRTtJQUNoQixNQUFNQyxXQUFXLEdBQUcsSUFBSXBCLFFBQVEsQ0FBRW1CLE9BQU8sRUFBRXJCLDBCQUEwQixDQUFDdUIsYUFBYyxDQUFDO0lBR3JGaEIsU0FBUyxDQUFDaUIsU0FBUyxDQUNqQixDQUNFYixLQUFLLENBQUNLLE1BQU0sQ0FBQ1MsaUJBQWlCLEVBQzlCbkIsa0JBQWtCLENBQUNvQixPQUFPLENBQUNDLHFCQUFxQixFQUNoRHJCLGtCQUFrQixDQUFDb0IsT0FBTyxDQUFDRSx3QkFBd0IsRUFDbkR0QixrQkFBa0IsQ0FBQ29CLE9BQU8sQ0FBQ0cseUJBQXlCLENBQ3JELEVBQ0QsQ0FBRUMsU0FBUyxFQUFFQyxhQUFhLEVBQUVDLGdCQUFnQixFQUFFQyxpQkFBaUIsS0FBTTtNQUNuRTtNQUNBO01BQ0FaLE9BQU8sR0FBR1UsYUFBYSxHQUFHLElBQUk7TUFDOUIsUUFBUUQsU0FBUztRQUNmLEtBQUt6QixVQUFVLENBQUM2QixXQUFXO1VBQ3pCYixPQUFPLElBQUlXLGdCQUFnQjtVQUMzQjtRQUNGLEtBQUszQixVQUFVLENBQUM4QixZQUFZO1VBQzFCZCxPQUFPLElBQUlZLGlCQUFpQjtVQUM1QjtRQUNGO1VBQ0U7TUFDSjtNQUVBWCxXQUFXLENBQUNjLFNBQVMsQ0FBRWYsT0FBUSxDQUFDOztNQUVoQztNQUNBQyxXQUFXLENBQUNKLE1BQU0sR0FBR0wsT0FBTyxDQUFDSyxNQUFNO0lBQ3JDLENBQ0YsQ0FBQztJQUVELEtBQUssQ0FBRTtNQUNMbUIsUUFBUSxFQUFFLENBQUVmLFdBQVcsQ0FBRTtNQUN6QixHQUFHVDtJQUNMLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQUwsV0FBVyxDQUFDOEIsUUFBUSxDQUFFLHVCQUF1QixFQUFFN0IscUJBQXNCLENBQUMifQ==