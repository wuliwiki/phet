// Copyright 2023, University of Colorado Boulder

/**
 * Visual representation of space object's property checkbox.
 *
 * @author Agust√≠n Vallejo
 */

import { HSeparator, Text, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import SolarSystemCommonConstants from '../../../../solar-system-common/js/SolarSystemCommonConstants.js';
import createArrowsVisibilityCheckboxes from '../../../../solar-system-common/js/view/createArrowsVisibilityCheckboxes.js';
import createVisibilityInformationCheckboxes from '../../../../solar-system-common/js/view/createVisibilityInformationCheckboxes.js';
import KeplersLawsOrbitalInformationBox from './KeplersLawsOrbitalInformationBox.js';
import keplersLaws from '../../keplersLaws.js';
import KeplersLawsStrings from '../../KeplersLawsStrings.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
class KeplersLawsControls extends Panel {
  constructor(model, tandem) {
    super(new VBox({
      children: [new KeplersLawsOrbitalInformationBox(model, {
        tandem: tandem
      }), new HSeparator(SolarSystemCommonConstants.HSEPARATOR_OPTIONS), new Checkbox(model.alwaysCircularProperty, new Text(KeplersLawsStrings.circularOrbitStringProperty, SolarSystemCommonConstants.TEXT_OPTIONS), SolarSystemCommonConstants.CHECKBOX_OPTIONS), new HSeparator(SolarSystemCommonConstants.HSEPARATOR_OPTIONS), ...createArrowsVisibilityCheckboxes(model, tandem), new HSeparator(SolarSystemCommonConstants.HSEPARATOR_OPTIONS), ...createVisibilityInformationCheckboxes(model, tandem, false)],
      spacing: 5,
      align: 'left',
      stretch: true,
      maxWidth: SolarSystemCommonConstants.TEXT_MAX_WIDTH
    }), SolarSystemCommonConstants.CONTROL_PANEL_OPTIONS);
  }
}
keplersLaws.register('KeplersLawsControls', KeplersLawsControls);
export default KeplersLawsControls;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIU2VwYXJhdG9yIiwiVGV4dCIsIlZCb3giLCJQYW5lbCIsIlNvbGFyU3lzdGVtQ29tbW9uQ29uc3RhbnRzIiwiY3JlYXRlQXJyb3dzVmlzaWJpbGl0eUNoZWNrYm94ZXMiLCJjcmVhdGVWaXNpYmlsaXR5SW5mb3JtYXRpb25DaGVja2JveGVzIiwiS2VwbGVyc0xhd3NPcmJpdGFsSW5mb3JtYXRpb25Cb3giLCJrZXBsZXJzTGF3cyIsIktlcGxlcnNMYXdzU3RyaW5ncyIsIkNoZWNrYm94IiwiS2VwbGVyc0xhd3NDb250cm9scyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJjaGlsZHJlbiIsIkhTRVBBUkFUT1JfT1BUSU9OUyIsImFsd2F5c0NpcmN1bGFyUHJvcGVydHkiLCJjaXJjdWxhck9yYml0U3RyaW5nUHJvcGVydHkiLCJURVhUX09QVElPTlMiLCJDSEVDS0JPWF9PUFRJT05TIiwic3BhY2luZyIsImFsaWduIiwic3RyZXRjaCIsIm1heFdpZHRoIiwiVEVYVF9NQVhfV0lEVEgiLCJDT05UUk9MX1BBTkVMX09QVElPTlMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIktlcGxlcnNMYXdzQ29udHJvbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuXHJcbi8qKlxyXG4gKiBWaXN1YWwgcmVwcmVzZW50YXRpb24gb2Ygc3BhY2Ugb2JqZWN0J3MgcHJvcGVydHkgY2hlY2tib3guXHJcbiAqXHJcbiAqIEBhdXRob3IgQWd1c3TDrW4gVmFsbGVqb1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IEhTZXBhcmF0b3IsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFNvbGFyU3lzdGVtQ29tbW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uLy4uL3NvbGFyLXN5c3RlbS1jb21tb24vanMvU29sYXJTeXN0ZW1Db21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgY3JlYXRlQXJyb3dzVmlzaWJpbGl0eUNoZWNrYm94ZXMgZnJvbSAnLi4vLi4vLi4vLi4vc29sYXItc3lzdGVtLWNvbW1vbi9qcy92aWV3L2NyZWF0ZUFycm93c1Zpc2liaWxpdHlDaGVja2JveGVzLmpzJztcclxuaW1wb3J0IGNyZWF0ZVZpc2liaWxpdHlJbmZvcm1hdGlvbkNoZWNrYm94ZXMgZnJvbSAnLi4vLi4vLi4vLi4vc29sYXItc3lzdGVtLWNvbW1vbi9qcy92aWV3L2NyZWF0ZVZpc2liaWxpdHlJbmZvcm1hdGlvbkNoZWNrYm94ZXMuanMnO1xyXG5pbXBvcnQgS2VwbGVyc0xhd3NNb2RlbCBmcm9tICcuLi9tb2RlbC9LZXBsZXJzTGF3c01vZGVsLmpzJztcclxuaW1wb3J0IEtlcGxlcnNMYXdzT3JiaXRhbEluZm9ybWF0aW9uQm94IGZyb20gJy4vS2VwbGVyc0xhd3NPcmJpdGFsSW5mb3JtYXRpb25Cb3guanMnO1xyXG5pbXBvcnQga2VwbGVyc0xhd3MgZnJvbSAnLi4vLi4va2VwbGVyc0xhd3MuanMnO1xyXG5pbXBvcnQgS2VwbGVyc0xhd3NTdHJpbmdzIGZyb20gJy4uLy4uL0tlcGxlcnNMYXdzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ2hlY2tib3guanMnO1xyXG5cclxuY2xhc3MgS2VwbGVyc0xhd3NDb250cm9scyBleHRlbmRzIFBhbmVsIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBLZXBsZXJzTGF3c01vZGVsLCB0YW5kZW06IFRhbmRlbSApIHtcclxuICAgIHN1cGVyKCBuZXcgVkJveCgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBLZXBsZXJzTGF3c09yYml0YWxJbmZvcm1hdGlvbkJveCggbW9kZWwsIHtcclxuICAgICAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIG5ldyBIU2VwYXJhdG9yKCBTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cy5IU0VQQVJBVE9SX09QVElPTlMgKSxcclxuICAgICAgICBuZXcgQ2hlY2tib3goXHJcbiAgICAgICAgICBtb2RlbC5hbHdheXNDaXJjdWxhclByb3BlcnR5LFxyXG4gICAgICAgICAgbmV3IFRleHQoIEtlcGxlcnNMYXdzU3RyaW5ncy5jaXJjdWxhck9yYml0U3RyaW5nUHJvcGVydHksIFNvbGFyU3lzdGVtQ29tbW9uQ29uc3RhbnRzLlRFWFRfT1BUSU9OUyApLFxyXG4gICAgICAgICAgU29sYXJTeXN0ZW1Db21tb25Db25zdGFudHMuQ0hFQ0tCT1hfT1BUSU9OUyApLFxyXG4gICAgICAgIG5ldyBIU2VwYXJhdG9yKCBTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cy5IU0VQQVJBVE9SX09QVElPTlMgKSxcclxuICAgICAgICAuLi5jcmVhdGVBcnJvd3NWaXNpYmlsaXR5Q2hlY2tib3hlcyggbW9kZWwsIHRhbmRlbSApLFxyXG4gICAgICAgIG5ldyBIU2VwYXJhdG9yKCBTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cy5IU0VQQVJBVE9SX09QVElPTlMgKSxcclxuICAgICAgICAuLi5jcmVhdGVWaXNpYmlsaXR5SW5mb3JtYXRpb25DaGVja2JveGVzKCBtb2RlbCwgdGFuZGVtLCBmYWxzZSApXHJcbiAgICAgIF0sXHJcbiAgICAgIHNwYWNpbmc6IDUsXHJcbiAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgIHN0cmV0Y2g6IHRydWUsXHJcbiAgICAgIG1heFdpZHRoOiBTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cy5URVhUX01BWF9XSURUSFxyXG4gICAgfSApLCBTb2xhclN5c3RlbUNvbW1vbkNvbnN0YW50cy5DT05UUk9MX1BBTkVMX09QVElPTlMgKTtcclxuICB9XHJcbn1cclxuXHJcbmtlcGxlcnNMYXdzLnJlZ2lzdGVyKCAnS2VwbGVyc0xhd3NDb250cm9scycsIEtlcGxlcnNMYXdzQ29udHJvbHMgKTtcclxuZXhwb3J0IGRlZmF1bHQgS2VwbGVyc0xhd3NDb250cm9sczsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsVUFBVSxFQUFFQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDMUUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUUvQyxPQUFPQywwQkFBMEIsTUFBTSxrRUFBa0U7QUFDekcsT0FBT0MsZ0NBQWdDLE1BQU0sNkVBQTZFO0FBQzFILE9BQU9DLHFDQUFxQyxNQUFNLGtGQUFrRjtBQUVwSSxPQUFPQyxnQ0FBZ0MsTUFBTSx1Q0FBdUM7QUFDcEYsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUVyRCxNQUFNQyxtQkFBbUIsU0FBU1IsS0FBSyxDQUFDO0VBQy9CUyxXQUFXQSxDQUFFQyxLQUF1QixFQUFFQyxNQUFjLEVBQUc7SUFDNUQsS0FBSyxDQUFFLElBQUlaLElBQUksQ0FBRTtNQUNmYSxRQUFRLEVBQUUsQ0FDUixJQUFJUixnQ0FBZ0MsQ0FBRU0sS0FBSyxFQUFFO1FBQzNDQyxNQUFNLEVBQUVBO01BQ1YsQ0FBRSxDQUFDLEVBQ0gsSUFBSWQsVUFBVSxDQUFFSSwwQkFBMEIsQ0FBQ1ksa0JBQW1CLENBQUMsRUFDL0QsSUFBSU4sUUFBUSxDQUNWRyxLQUFLLENBQUNJLHNCQUFzQixFQUM1QixJQUFJaEIsSUFBSSxDQUFFUSxrQkFBa0IsQ0FBQ1MsMkJBQTJCLEVBQUVkLDBCQUEwQixDQUFDZSxZQUFhLENBQUMsRUFDbkdmLDBCQUEwQixDQUFDZ0IsZ0JBQWlCLENBQUMsRUFDL0MsSUFBSXBCLFVBQVUsQ0FBRUksMEJBQTBCLENBQUNZLGtCQUFtQixDQUFDLEVBQy9ELEdBQUdYLGdDQUFnQyxDQUFFUSxLQUFLLEVBQUVDLE1BQU8sQ0FBQyxFQUNwRCxJQUFJZCxVQUFVLENBQUVJLDBCQUEwQixDQUFDWSxrQkFBbUIsQ0FBQyxFQUMvRCxHQUFHVixxQ0FBcUMsQ0FBRU8sS0FBSyxFQUFFQyxNQUFNLEVBQUUsS0FBTSxDQUFDLENBQ2pFO01BQ0RPLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLEtBQUssRUFBRSxNQUFNO01BQ2JDLE9BQU8sRUFBRSxJQUFJO01BQ2JDLFFBQVEsRUFBRXBCLDBCQUEwQixDQUFDcUI7SUFDdkMsQ0FBRSxDQUFDLEVBQUVyQiwwQkFBMEIsQ0FBQ3NCLHFCQUFzQixDQUFDO0VBQ3pEO0FBQ0Y7QUFFQWxCLFdBQVcsQ0FBQ21CLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWhCLG1CQUFvQixDQUFDO0FBQ2xFLGVBQWVBLG1CQUFtQiJ9