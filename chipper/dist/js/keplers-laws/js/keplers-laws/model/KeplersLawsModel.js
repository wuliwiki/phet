// Copyright 2023, University of Colorado Boulder

/**
 * The model in charge of the Kepler's Laws Screen components.
 *
 * @author AgustÃ­n Vallejo
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import SolarSystemCommonModel from '../../../../solar-system-common/js/model/SolarSystemCommonModel.js';
import optionize from '../../../../phet-core/js/optionize.js';
import LawMode from './LawMode.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import EllipticalOrbitEngine from './EllipticalOrbitEngine.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Emitter from '../../../../axon/js/Emitter.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Stopwatch from '../../../../scenery-phet/js/Stopwatch.js';
import keplersLaws from '../../keplersLaws.js';
class KeplersLawsModel extends SolarSystemCommonModel {
  alwaysCircularProperty = new BooleanProperty(false);

  // Booleans to keep track of which law is selected
  isFirstLawProperty = new BooleanProperty(false);
  isSecondLawProperty = new BooleanProperty(false);
  isThirdLawProperty = new BooleanProperty(false);
  lawUpdatedEmitter = new Emitter();

  // First Law Properties
  axisVisibleProperty = new BooleanProperty(false);
  semiaxisVisibleProperty = new BooleanProperty(false);
  fociVisibleProperty = new BooleanProperty(false);
  stringsVisibleProperty = new BooleanProperty(false);
  eccentricityVisibleProperty = new BooleanProperty(false);

  // Second Law properties
  apoapsisVisibleProperty = new BooleanProperty(false);
  periapsisVisibleProperty = new BooleanProperty(false);
  periodDivisionProperty = new NumberProperty(4);
  areaValuesVisibleProperty = new BooleanProperty(false);

  // Third law properties
  semiMajorAxisVisibleProperty = new BooleanProperty(false);
  periodVisibleProperty = new BooleanProperty(false);
  selectedAxisPowerProperty = new NumberProperty(1);
  selectedPeriodPowerProperty = new NumberProperty(1);
  constructor(providedOptions) {
    const options = optionize()({
      engineFactory: bodies => new EllipticalOrbitEngine(bodies),
      isLab: false,
      timeScale: 2,
      timeMultiplier: 1 / 12.7,
      initialLaw: LawMode.FIRST_LAW
    }, providedOptions);
    super(options);
    this.isPlayingProperty.link(isPlaying => {
      if (isPlaying) {
        this.userControlledProperty.value = true;
      }
    });
    this.selectedLawProperty = new EnumerationProperty(options.initialLaw);
    this.defaultBodyState = [{
      active: true,
      mass: 200,
      position: new Vector2(0, 0),
      velocity: new Vector2(0, 0)
    }, {
      active: true,
      mass: 50,
      position: new Vector2(200, 0),
      velocity: new Vector2(0, 100)
    }];
    this.loadBodyStates(this.defaultBodyState);
    this.selectedLawProperty.link(law => {
      this.visibilityReset();
      this.isFirstLawProperty.value = law === LawMode.FIRST_LAW;
      this.isSecondLawProperty.value = law === LawMode.SECOND_LAW;
      this.isThirdLawProperty.value = law === LawMode.THIRD_LAW;
      this.lawUpdatedEmitter.emit();
    });
    this.periodDivisionProperty.link(divisions => {
      this.engine.periodDivisions = divisions;
      this.engine.resetOrbitalAreas();
    });
    this.axisVisibleProperty.link(axisVisible => {
      this.semiaxisVisibleProperty.value = axisVisible ? this.semiaxisVisibleProperty.value : false;
      //REVIEW: commented-out code
      // this.eccentricityVisibleProperty.value = axisVisible ? this.eccentricityVisibleProperty.value : false;
    });

    this.fociVisibleProperty.link(fociVisible => {
      this.stringsVisibleProperty.value = fociVisible ? this.stringsVisibleProperty.value : false;
    });
    this.velocityVisibleProperty.value = true;
    this.velocityVisibleProperty.setInitialValue(true);

    // Powered values of semiMajor axis and period
    this.poweredSemiMajorAxisProperty = new DerivedProperty([this.selectedAxisPowerProperty, this.engine.semiMajorAxisProperty], (power, semiMajorAxis) => Math.pow(semiMajorAxis, power));
    this.poweredPeriodProperty = new DerivedProperty([this.selectedPeriodPowerProperty, this.engine.periodProperty], (power, period) => Math.pow(period, power));
    this.alwaysCircularProperty.link(alwaysCircular => {
      this.engine.alwaysCircles = alwaysCircular;
      this.engine.update();
    });
    this.stopwatch = new Stopwatch({
      position: new Vector2(-50, -250),
      timePropertyOptions: {
        range: Stopwatch.ZERO_TO_ALMOST_SIXTY,
        units: 's'
      }
    });
    this.forceScaleProperty.value = 0.5;
  }
  loadBodyStates(bodiesInfo) {
    super.loadBodyStates(bodiesInfo);
    this.engine && this.engine.update();
  }
  visibilityReset() {
    // Calls reset only on the visibilityProperties to avoid reentries on selectedLawProperty
    // First Law
    this.axisVisibleProperty.reset();
    this.semiaxisVisibleProperty.reset();
    this.fociVisibleProperty.reset();
    this.eccentricityVisibleProperty.reset();
    this.stringsVisibleProperty.reset();

    // Second Law
    this.apoapsisVisibleProperty.reset();
    this.periapsisVisibleProperty.reset();

    // Third Law
    this.semiMajorAxisVisibleProperty.reset();
    this.periodVisibleProperty.reset();
  }
  reset() {
    super.reset();
    this.selectedLawProperty.reset();
    this.periodDivisionProperty.reset();
    this.selectedAxisPowerProperty.reset();
    this.selectedPeriodPowerProperty.reset();
    this.alwaysCircularProperty.reset();
    this.visibilityReset();
    this.engine.updateAllowed = true;
    this.engine.reset();
    this.engine.update();
    this.loadBodyStates(this.defaultBodyState);
  }
  update() {
    if (this.engine.updateAllowed) {
      this.engine.update();
    }
  }
}
keplersLaws.register('KeplersLawsModel', KeplersLawsModel);
export default KeplersLawsModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,