// Copyright 2014-2020, University of Colorado Boulder
/**
 * Factory to create different types of MembraneChannels
 *
 * @author John Blanco
 * @author Sharfudeen Ashraf (for Ghent University)
 */

import neuron from '../../neuron.js';
import MembraneChannelTypes from './MembraneChannelTypes.js';
import PotassiumGatedChannel from './PotassiumGatedChannel.js';
import PotassiumLeakageChannel from './PotassiumLeakageChannel.js';
import SodiumDualGatedChannel from './SodiumDualGatedChannel.js';
import SodiumLeakageChannel from './SodiumLeakageChannel.js';
const MembraneChannelFactory = {
  /**
   * factory method for creating a MembraneChannel of the specified type.
   * @param {MembraneChannelTypes} channelType
   * @param {NeuronModel} particleModel
   * @param {HodgkinHuxleyModel} hodgkinHuxleyModel
   * @returns {MembraneChannel}
   * @public
   */
  createMembraneChannel(channelType, particleModel, hodgkinHuxleyModel) {
    let membraneChannel = null;
    switch (channelType) {
      case MembraneChannelTypes.SODIUM_LEAKAGE_CHANNEL:
        membraneChannel = new SodiumLeakageChannel(particleModel, hodgkinHuxleyModel);
        break;
      case MembraneChannelTypes.SODIUM_GATED_CHANNEL:
        membraneChannel = new SodiumDualGatedChannel(particleModel, hodgkinHuxleyModel);
        break;
      case MembraneChannelTypes.POTASSIUM_LEAKAGE_CHANNEL:
        membraneChannel = new PotassiumLeakageChannel(particleModel, hodgkinHuxleyModel);
        break;
      case MembraneChannelTypes.POTASSIUM_GATED_CHANNEL:
        membraneChannel = new PotassiumGatedChannel(particleModel, hodgkinHuxleyModel);
        break;
      default:
        assert && assert(false, 'Error: Unrecognized channelType type.');
    }
    return membraneChannel;
  }
};
neuron.register('MembraneChannelFactory', MembraneChannelFactory);
export default MembraneChannelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuZXVyb24iLCJNZW1icmFuZUNoYW5uZWxUeXBlcyIsIlBvdGFzc2l1bUdhdGVkQ2hhbm5lbCIsIlBvdGFzc2l1bUxlYWthZ2VDaGFubmVsIiwiU29kaXVtRHVhbEdhdGVkQ2hhbm5lbCIsIlNvZGl1bUxlYWthZ2VDaGFubmVsIiwiTWVtYnJhbmVDaGFubmVsRmFjdG9yeSIsImNyZWF0ZU1lbWJyYW5lQ2hhbm5lbCIsImNoYW5uZWxUeXBlIiwicGFydGljbGVNb2RlbCIsImhvZGdraW5IdXhsZXlNb2RlbCIsIm1lbWJyYW5lQ2hhbm5lbCIsIlNPRElVTV9MRUFLQUdFX0NIQU5ORUwiLCJTT0RJVU1fR0FURURfQ0hBTk5FTCIsIlBPVEFTU0lVTV9MRUFLQUdFX0NIQU5ORUwiLCJQT1RBU1NJVU1fR0FURURfQ0hBTk5FTCIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWVtYnJhbmVDaGFubmVsRmFjdG9yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLyoqXHJcbiAqIEZhY3RvcnkgdG8gY3JlYXRlIGRpZmZlcmVudCB0eXBlcyBvZiBNZW1icmFuZUNoYW5uZWxzXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZiAoZm9yIEdoZW50IFVuaXZlcnNpdHkpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG5ldXJvbiBmcm9tICcuLi8uLi9uZXVyb24uanMnO1xyXG5pbXBvcnQgTWVtYnJhbmVDaGFubmVsVHlwZXMgZnJvbSAnLi9NZW1icmFuZUNoYW5uZWxUeXBlcy5qcyc7XHJcbmltcG9ydCBQb3Rhc3NpdW1HYXRlZENoYW5uZWwgZnJvbSAnLi9Qb3Rhc3NpdW1HYXRlZENoYW5uZWwuanMnO1xyXG5pbXBvcnQgUG90YXNzaXVtTGVha2FnZUNoYW5uZWwgZnJvbSAnLi9Qb3Rhc3NpdW1MZWFrYWdlQ2hhbm5lbC5qcyc7XHJcbmltcG9ydCBTb2RpdW1EdWFsR2F0ZWRDaGFubmVsIGZyb20gJy4vU29kaXVtRHVhbEdhdGVkQ2hhbm5lbC5qcyc7XHJcbmltcG9ydCBTb2RpdW1MZWFrYWdlQ2hhbm5lbCBmcm9tICcuL1NvZGl1bUxlYWthZ2VDaGFubmVsLmpzJztcclxuXHJcbmNvbnN0IE1lbWJyYW5lQ2hhbm5lbEZhY3RvcnkgPSB7XHJcbiAgLyoqXHJcbiAgICogZmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGEgTWVtYnJhbmVDaGFubmVsIG9mIHRoZSBzcGVjaWZpZWQgdHlwZS5cclxuICAgKiBAcGFyYW0ge01lbWJyYW5lQ2hhbm5lbFR5cGVzfSBjaGFubmVsVHlwZVxyXG4gICAqIEBwYXJhbSB7TmV1cm9uTW9kZWx9IHBhcnRpY2xlTW9kZWxcclxuICAgKiBAcGFyYW0ge0hvZGdraW5IdXhsZXlNb2RlbH0gaG9kZ2tpbkh1eGxleU1vZGVsXHJcbiAgICogQHJldHVybnMge01lbWJyYW5lQ2hhbm5lbH1cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY3JlYXRlTWVtYnJhbmVDaGFubmVsKCBjaGFubmVsVHlwZSwgcGFydGljbGVNb2RlbCwgaG9kZ2tpbkh1eGxleU1vZGVsICkge1xyXG4gICAgbGV0IG1lbWJyYW5lQ2hhbm5lbCA9IG51bGw7XHJcbiAgICBzd2l0Y2goIGNoYW5uZWxUeXBlICkge1xyXG4gICAgICBjYXNlIE1lbWJyYW5lQ2hhbm5lbFR5cGVzLlNPRElVTV9MRUFLQUdFX0NIQU5ORUw6XHJcbiAgICAgICAgbWVtYnJhbmVDaGFubmVsID0gbmV3IFNvZGl1bUxlYWthZ2VDaGFubmVsKCBwYXJ0aWNsZU1vZGVsLCBob2Rna2luSHV4bGV5TW9kZWwgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBNZW1icmFuZUNoYW5uZWxUeXBlcy5TT0RJVU1fR0FURURfQ0hBTk5FTDpcclxuICAgICAgICBtZW1icmFuZUNoYW5uZWwgPSBuZXcgU29kaXVtRHVhbEdhdGVkQ2hhbm5lbCggcGFydGljbGVNb2RlbCwgaG9kZ2tpbkh1eGxleU1vZGVsICk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgTWVtYnJhbmVDaGFubmVsVHlwZXMuUE9UQVNTSVVNX0xFQUtBR0VfQ0hBTk5FTDpcclxuICAgICAgICBtZW1icmFuZUNoYW5uZWwgPSBuZXcgUG90YXNzaXVtTGVha2FnZUNoYW5uZWwoIHBhcnRpY2xlTW9kZWwsIGhvZGdraW5IdXhsZXlNb2RlbCApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIE1lbWJyYW5lQ2hhbm5lbFR5cGVzLlBPVEFTU0lVTV9HQVRFRF9DSEFOTkVMOlxyXG4gICAgICAgIG1lbWJyYW5lQ2hhbm5lbCA9IG5ldyBQb3Rhc3NpdW1HYXRlZENoYW5uZWwoIHBhcnRpY2xlTW9kZWwsIGhvZGdraW5IdXhsZXlNb2RlbCApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnRXJyb3I6IFVucmVjb2duaXplZCBjaGFubmVsVHlwZSB0eXBlLicgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtZW1icmFuZUNoYW5uZWw7XHJcbiAgfVxyXG59O1xyXG5cclxubmV1cm9uLnJlZ2lzdGVyKCAnTWVtYnJhbmVDaGFubmVsRmFjdG9yeScsIE1lbWJyYW5lQ2hhbm5lbEZhY3RvcnkgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lbWJyYW5lQ2hhbm5lbEZhY3Rvcnk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0saUJBQWlCO0FBQ3BDLE9BQU9DLG9CQUFvQixNQUFNLDJCQUEyQjtBQUM1RCxPQUFPQyxxQkFBcUIsTUFBTSw0QkFBNEI7QUFDOUQsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBQ2xFLE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUNoRSxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsTUFBTUMsc0JBQXNCLEdBQUc7RUFDN0I7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxxQkFBcUJBLENBQUVDLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxrQkFBa0IsRUFBRztJQUN0RSxJQUFJQyxlQUFlLEdBQUcsSUFBSTtJQUMxQixRQUFRSCxXQUFXO01BQ2pCLEtBQUtQLG9CQUFvQixDQUFDVyxzQkFBc0I7UUFDOUNELGVBQWUsR0FBRyxJQUFJTixvQkFBb0IsQ0FBRUksYUFBYSxFQUFFQyxrQkFBbUIsQ0FBQztRQUMvRTtNQUNGLEtBQUtULG9CQUFvQixDQUFDWSxvQkFBb0I7UUFDNUNGLGVBQWUsR0FBRyxJQUFJUCxzQkFBc0IsQ0FBRUssYUFBYSxFQUFFQyxrQkFBbUIsQ0FBQztRQUNqRjtNQUNGLEtBQUtULG9CQUFvQixDQUFDYSx5QkFBeUI7UUFDakRILGVBQWUsR0FBRyxJQUFJUix1QkFBdUIsQ0FBRU0sYUFBYSxFQUFFQyxrQkFBbUIsQ0FBQztRQUNsRjtNQUNGLEtBQUtULG9CQUFvQixDQUFDYyx1QkFBdUI7UUFDL0NKLGVBQWUsR0FBRyxJQUFJVCxxQkFBcUIsQ0FBRU8sYUFBYSxFQUFFQyxrQkFBbUIsQ0FBQztRQUNoRjtNQUNGO1FBQ0VNLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSx1Q0FBd0MsQ0FBQztJQUN0RTtJQUNBLE9BQU9MLGVBQWU7RUFDeEI7QUFDRixDQUFDO0FBRURYLE1BQU0sQ0FBQ2lCLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRVgsc0JBQXVCLENBQUM7QUFFbkUsZUFBZUEsc0JBQXNCIn0=