// Copyright 2014-2020, University of Colorado Boulder
/**
 * Base class for gated membrane channels, i.e. channels that open and close.
 *
 * @author John Blanco
 * @author Sharfudeen Ashraf (for Ghent University)
 */

import neuron from '../../neuron.js';
import MembraneChannel from './MembraneChannel.js';
class GatedChannel extends MembraneChannel {
  /**
   * @param {number} channelWidth
   * @param {number} channelHeight
   * @param {NeuronModel} modelContainingParticles
   */
  constructor(channelWidth, channelHeight, modelContainingParticles) {
    super(channelWidth, channelHeight, modelContainingParticles);
    this.setOpenness(0); // Gated channels are assumed to be initially closed.
  }

  // @public
  reset() {
    this.setOpenness(0); // Gated channels are assumed to be initially closed...
    this.setInactivationAmount(0); // ...but not inactivated.
  }
}

neuron.register('GatedChannel', GatedChannel);
export default GatedChannel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuZXVyb24iLCJNZW1icmFuZUNoYW5uZWwiLCJHYXRlZENoYW5uZWwiLCJjb25zdHJ1Y3RvciIsImNoYW5uZWxXaWR0aCIsImNoYW5uZWxIZWlnaHQiLCJtb2RlbENvbnRhaW5pbmdQYXJ0aWNsZXMiLCJzZXRPcGVubmVzcyIsInJlc2V0Iiwic2V0SW5hY3RpdmF0aW9uQW1vdW50IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHYXRlZENoYW5uZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIGZvciBnYXRlZCBtZW1icmFuZSBjaGFubmVscywgaS5lLiBjaGFubmVscyB0aGF0IG9wZW4gYW5kIGNsb3NlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWYgKGZvciBHaGVudCBVbml2ZXJzaXR5KVxyXG4gKi9cclxuXHJcbmltcG9ydCBuZXVyb24gZnJvbSAnLi4vLi4vbmV1cm9uLmpzJztcclxuaW1wb3J0IE1lbWJyYW5lQ2hhbm5lbCBmcm9tICcuL01lbWJyYW5lQ2hhbm5lbC5qcyc7XHJcblxyXG5jbGFzcyBHYXRlZENoYW5uZWwgZXh0ZW5kcyBNZW1icmFuZUNoYW5uZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbm5lbFdpZHRoXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNoYW5uZWxIZWlnaHRcclxuICAgKiBAcGFyYW0ge05ldXJvbk1vZGVsfSBtb2RlbENvbnRhaW5pbmdQYXJ0aWNsZXNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY2hhbm5lbFdpZHRoLCBjaGFubmVsSGVpZ2h0LCBtb2RlbENvbnRhaW5pbmdQYXJ0aWNsZXMgKSB7XHJcbiAgICBzdXBlciggY2hhbm5lbFdpZHRoLCBjaGFubmVsSGVpZ2h0LCBtb2RlbENvbnRhaW5pbmdQYXJ0aWNsZXMgKTtcclxuICAgIHRoaXMuc2V0T3Blbm5lc3MoIDAgKTsgIC8vIEdhdGVkIGNoYW5uZWxzIGFyZSBhc3N1bWVkIHRvIGJlIGluaXRpYWxseSBjbG9zZWQuXHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnNldE9wZW5uZXNzKCAwICk7ICAgICAgICAgLy8gR2F0ZWQgY2hhbm5lbHMgYXJlIGFzc3VtZWQgdG8gYmUgaW5pdGlhbGx5IGNsb3NlZC4uLlxyXG4gICAgdGhpcy5zZXRJbmFjdGl2YXRpb25BbW91bnQoIDAgKTsgIC8vIC4uLmJ1dCBub3QgaW5hY3RpdmF0ZWQuXHJcbiAgfVxyXG59XHJcblxyXG5uZXVyb24ucmVnaXN0ZXIoICdHYXRlZENoYW5uZWwnLCBHYXRlZENoYW5uZWwgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdhdGVkQ2hhbm5lbDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSxpQkFBaUI7QUFDcEMsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjtBQUVsRCxNQUFNQyxZQUFZLFNBQVNELGVBQWUsQ0FBQztFQUV6QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLFlBQVksRUFBRUMsYUFBYSxFQUFFQyx3QkFBd0IsRUFBRztJQUNuRSxLQUFLLENBQUVGLFlBQVksRUFBRUMsYUFBYSxFQUFFQyx3QkFBeUIsQ0FBQztJQUM5RCxJQUFJLENBQUNDLFdBQVcsQ0FBRSxDQUFFLENBQUMsQ0FBQyxDQUFFO0VBQzFCOztFQUVBO0VBQ0FDLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ0QsV0FBVyxDQUFFLENBQUUsQ0FBQyxDQUFDLENBQVM7SUFDL0IsSUFBSSxDQUFDRSxxQkFBcUIsQ0FBRSxDQUFFLENBQUMsQ0FBQyxDQUFFO0VBQ3BDO0FBQ0Y7O0FBRUFULE1BQU0sQ0FBQ1UsUUFBUSxDQUFFLGNBQWMsRUFBRVIsWUFBYSxDQUFDO0FBRS9DLGVBQWVBLFlBQVkifQ==