// Copyright 2014-2020, University of Colorado Boulder

/**
 * Class that is used in the model to represent particles during playback.  It
 * is similar to a full blown particle but contains less data and implements
 * less capability, and this is faster and easier to create.  This is intended
 * for use as part of the implementation of the record-and-playback feature.
 *
 * @author John Blanco
 * @author Sharfudeen Ashraf (for Ghent University)
 */

import neuron from '../../neuron.js';
import PotassiumIon from './PotassiumIon.js';
import ViewableParticle from './ViewableParticle.js';
class PlaybackParticle extends ViewableParticle {
  /**
   * Construct a playback particle.
   * @param {Particle} particle - Real particle from which this playback particle should be constructed.
   */
  constructor(particle) {
    particle = particle || new PotassiumIon(); // Construct as potassium by default.  This choice is arbitrary.

    super({
      appearanceChanged: false
    });

    // @private, accessed through methods defined below
    this.positionX = particle.getPositionX();
    this.positionY = particle.getPositionY();
    this.opacity = particle.getOpacity();
    this.representationColor = particle.getRepresentationColor();
    this.radius = particle.getRadius();
    this.particleType = particle.getType();
  }

  /**
   * @public
   * @param {ParticlePlaybackMemento} memento
   */
  restoreFromMemento(memento) {
    this.setPosition(memento.getPositionX(), memento.getPositionY());
    let appearanceChanged = false;
    if (this.opacity !== memento.getOpacity()) {
      this.opacity = memento.getOpacity();
      appearanceChanged = true;
    }
    if (this.particleType !== memento.getParticleType()) {
      this.particleType = memento.getParticleType();
      appearanceChanged = true;
    }
    if (this.representationColor !== memento.getRepresentationColor()) {
      this.representationColor = memento.getRepresentationColor();
      appearanceChanged = true;
    }
    if (appearanceChanged) {
      this.appearanceChanged = !this.appearanceChanged;
    }
  }

  // @public
  getPositionX() {
    return this.positionX;
  }

  // @public
  getPositionY() {
    return this.positionY;
  }

  // @public
  setPosition(x, y) {
    this.positionX = x;
    this.positionY = y;
  }

  // @public
  getRepresentationColor() {
    return this.representationColor;
  }

  // @public
  getOpacity() {
    return this.opacity;
  }

  // @public
  getRadius() {
    return this.radius;
  }

  // @public
  getType() {
    return this.particleType;
  }
}
neuron.register('PlaybackParticle', PlaybackParticle);
export default PlaybackParticle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuZXVyb24iLCJQb3Rhc3NpdW1Jb24iLCJWaWV3YWJsZVBhcnRpY2xlIiwiUGxheWJhY2tQYXJ0aWNsZSIsImNvbnN0cnVjdG9yIiwicGFydGljbGUiLCJhcHBlYXJhbmNlQ2hhbmdlZCIsInBvc2l0aW9uWCIsImdldFBvc2l0aW9uWCIsInBvc2l0aW9uWSIsImdldFBvc2l0aW9uWSIsIm9wYWNpdHkiLCJnZXRPcGFjaXR5IiwicmVwcmVzZW50YXRpb25Db2xvciIsImdldFJlcHJlc2VudGF0aW9uQ29sb3IiLCJyYWRpdXMiLCJnZXRSYWRpdXMiLCJwYXJ0aWNsZVR5cGUiLCJnZXRUeXBlIiwicmVzdG9yZUZyb21NZW1lbnRvIiwibWVtZW50byIsInNldFBvc2l0aW9uIiwiZ2V0UGFydGljbGVUeXBlIiwieCIsInkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBsYXliYWNrUGFydGljbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2xhc3MgdGhhdCBpcyB1c2VkIGluIHRoZSBtb2RlbCB0byByZXByZXNlbnQgcGFydGljbGVzIGR1cmluZyBwbGF5YmFjay4gIEl0XHJcbiAqIGlzIHNpbWlsYXIgdG8gYSBmdWxsIGJsb3duIHBhcnRpY2xlIGJ1dCBjb250YWlucyBsZXNzIGRhdGEgYW5kIGltcGxlbWVudHNcclxuICogbGVzcyBjYXBhYmlsaXR5LCBhbmQgdGhpcyBpcyBmYXN0ZXIgYW5kIGVhc2llciB0byBjcmVhdGUuICBUaGlzIGlzIGludGVuZGVkXHJcbiAqIGZvciB1c2UgYXMgcGFydCBvZiB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIHJlY29yZC1hbmQtcGxheWJhY2sgZmVhdHVyZS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIFNoYXJmdWRlZW4gQXNocmFmIChmb3IgR2hlbnQgVW5pdmVyc2l0eSlcclxuICovXHJcblxyXG5pbXBvcnQgbmV1cm9uIGZyb20gJy4uLy4uL25ldXJvbi5qcyc7XHJcbmltcG9ydCBQb3Rhc3NpdW1Jb24gZnJvbSAnLi9Qb3Rhc3NpdW1Jb24uanMnO1xyXG5pbXBvcnQgVmlld2FibGVQYXJ0aWNsZSBmcm9tICcuL1ZpZXdhYmxlUGFydGljbGUuanMnO1xyXG5cclxuY2xhc3MgUGxheWJhY2tQYXJ0aWNsZSBleHRlbmRzIFZpZXdhYmxlUGFydGljbGUge1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3QgYSBwbGF5YmFjayBwYXJ0aWNsZS5cclxuICAgKiBAcGFyYW0ge1BhcnRpY2xlfSBwYXJ0aWNsZSAtIFJlYWwgcGFydGljbGUgZnJvbSB3aGljaCB0aGlzIHBsYXliYWNrIHBhcnRpY2xlIHNob3VsZCBiZSBjb25zdHJ1Y3RlZC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggcGFydGljbGUgKSB7XHJcbiAgICBwYXJ0aWNsZSA9IHBhcnRpY2xlIHx8IG5ldyBQb3Rhc3NpdW1Jb24oKTsvLyBDb25zdHJ1Y3QgYXMgcG90YXNzaXVtIGJ5IGRlZmF1bHQuICBUaGlzIGNob2ljZSBpcyBhcmJpdHJhcnkuXHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgYXBwZWFyYW5jZUNoYW5nZWQ6IGZhbHNlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUsIGFjY2Vzc2VkIHRocm91Z2ggbWV0aG9kcyBkZWZpbmVkIGJlbG93XHJcbiAgICB0aGlzLnBvc2l0aW9uWCA9IHBhcnRpY2xlLmdldFBvc2l0aW9uWCgpO1xyXG4gICAgdGhpcy5wb3NpdGlvblkgPSBwYXJ0aWNsZS5nZXRQb3NpdGlvblkoKTtcclxuICAgIHRoaXMub3BhY2l0eSA9IHBhcnRpY2xlLmdldE9wYWNpdHkoKTtcclxuICAgIHRoaXMucmVwcmVzZW50YXRpb25Db2xvciA9IHBhcnRpY2xlLmdldFJlcHJlc2VudGF0aW9uQ29sb3IoKTtcclxuICAgIHRoaXMucmFkaXVzID0gcGFydGljbGUuZ2V0UmFkaXVzKCk7XHJcbiAgICB0aGlzLnBhcnRpY2xlVHlwZSA9IHBhcnRpY2xlLmdldFR5cGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge1BhcnRpY2xlUGxheWJhY2tNZW1lbnRvfSBtZW1lbnRvXHJcbiAgICovXHJcbiAgcmVzdG9yZUZyb21NZW1lbnRvKCBtZW1lbnRvICkge1xyXG4gICAgdGhpcy5zZXRQb3NpdGlvbiggbWVtZW50by5nZXRQb3NpdGlvblgoKSwgbWVtZW50by5nZXRQb3NpdGlvblkoKSApO1xyXG5cclxuICAgIGxldCBhcHBlYXJhbmNlQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgaWYgKCB0aGlzLm9wYWNpdHkgIT09IG1lbWVudG8uZ2V0T3BhY2l0eSgpICkge1xyXG4gICAgICB0aGlzLm9wYWNpdHkgPSBtZW1lbnRvLmdldE9wYWNpdHkoKTtcclxuICAgICAgYXBwZWFyYW5jZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKCB0aGlzLnBhcnRpY2xlVHlwZSAhPT0gbWVtZW50by5nZXRQYXJ0aWNsZVR5cGUoKSApIHtcclxuICAgICAgdGhpcy5wYXJ0aWNsZVR5cGUgPSBtZW1lbnRvLmdldFBhcnRpY2xlVHlwZSgpO1xyXG4gICAgICBhcHBlYXJhbmNlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoIHRoaXMucmVwcmVzZW50YXRpb25Db2xvciAhPT0gbWVtZW50by5nZXRSZXByZXNlbnRhdGlvbkNvbG9yKCkgKSB7XHJcbiAgICAgIHRoaXMucmVwcmVzZW50YXRpb25Db2xvciA9IG1lbWVudG8uZ2V0UmVwcmVzZW50YXRpb25Db2xvcigpO1xyXG4gICAgICBhcHBlYXJhbmNlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoIGFwcGVhcmFuY2VDaGFuZ2VkICkge1xyXG4gICAgICB0aGlzLmFwcGVhcmFuY2VDaGFuZ2VkID0gIXRoaXMuYXBwZWFyYW5jZUNoYW5nZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgZ2V0UG9zaXRpb25YKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb25YO1xyXG4gIH1cclxuXHJcbiAgLy8gQHB1YmxpY1xyXG4gIGdldFBvc2l0aW9uWSgpIHtcclxuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uWTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBzZXRQb3NpdGlvbiggeCwgeSApIHtcclxuICAgIHRoaXMucG9zaXRpb25YID0geDtcclxuICAgIHRoaXMucG9zaXRpb25ZID0geTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBnZXRSZXByZXNlbnRhdGlvbkNvbG9yKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwcmVzZW50YXRpb25Db2xvcjtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBnZXRPcGFjaXR5KCkge1xyXG4gICAgcmV0dXJuIHRoaXMub3BhY2l0eTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBnZXRSYWRpdXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yYWRpdXM7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgZ2V0VHlwZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnBhcnRpY2xlVHlwZTtcclxuICB9XHJcbn1cclxuXHJcbm5ldXJvbi5yZWdpc3RlciggJ1BsYXliYWNrUGFydGljbGUnLCBQbGF5YmFja1BhcnRpY2xlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQbGF5YmFja1BhcnRpY2xlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSxpQkFBaUI7QUFDcEMsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUM1QyxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFFcEQsTUFBTUMsZ0JBQWdC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