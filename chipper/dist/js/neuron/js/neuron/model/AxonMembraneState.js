// Copyright 2014-2020, University of Colorado Boulder

/**
 * A type that represents the state of the axon membrane, used primarily for record and playback.  It is, at the time
 * of this writing, very simple - so simple that one might wonder whether it makes sense for it to exist at all.  Here
 * is the justification: It exists primarily for consistency with other state variables related to playback and record,
 * and so that it is easy to add new information if the state of the axon membrane were to become more complex.
 *
 * @author John Blanco
 * @author Sharfudeen Ashraf (for Ghent University)
 */

import neuron from '../../neuron.js';
class AxonMembraneState {
  /**
   * @param {TravelingActionPotentialState} travelingActionPotentialState
   */
  constructor(travelingActionPotentialState) {
    this.travelingActionPotentialState = travelingActionPotentialState; // @private
  }

  /**
   * Return the state of the traveling action potential.  If null, no traveling action potential exists.
   * @return
   * @public
   */
  getTravelingActionPotentialState() {
    return this.travelingActionPotentialState;
  }
}
neuron.register('AxonMembraneState', AxonMembraneState);
export default AxonMembraneState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuZXVyb24iLCJBeG9uTWVtYnJhbmVTdGF0ZSIsImNvbnN0cnVjdG9yIiwidHJhdmVsaW5nQWN0aW9uUG90ZW50aWFsU3RhdGUiLCJnZXRUcmF2ZWxpbmdBY3Rpb25Qb3RlbnRpYWxTdGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXhvbk1lbWJyYW5lU3RhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSB0eXBlIHRoYXQgcmVwcmVzZW50cyB0aGUgc3RhdGUgb2YgdGhlIGF4b24gbWVtYnJhbmUsIHVzZWQgcHJpbWFyaWx5IGZvciByZWNvcmQgYW5kIHBsYXliYWNrLiAgSXQgaXMsIGF0IHRoZSB0aW1lXHJcbiAqIG9mIHRoaXMgd3JpdGluZywgdmVyeSBzaW1wbGUgLSBzbyBzaW1wbGUgdGhhdCBvbmUgbWlnaHQgd29uZGVyIHdoZXRoZXIgaXQgbWFrZXMgc2Vuc2UgZm9yIGl0IHRvIGV4aXN0IGF0IGFsbC4gIEhlcmVcclxuICogaXMgdGhlIGp1c3RpZmljYXRpb246IEl0IGV4aXN0cyBwcmltYXJpbHkgZm9yIGNvbnNpc3RlbmN5IHdpdGggb3RoZXIgc3RhdGUgdmFyaWFibGVzIHJlbGF0ZWQgdG8gcGxheWJhY2sgYW5kIHJlY29yZCxcclxuICogYW5kIHNvIHRoYXQgaXQgaXMgZWFzeSB0byBhZGQgbmV3IGluZm9ybWF0aW9uIGlmIHRoZSBzdGF0ZSBvZiB0aGUgYXhvbiBtZW1icmFuZSB3ZXJlIHRvIGJlY29tZSBtb3JlIGNvbXBsZXguXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZiAoZm9yIEdoZW50IFVuaXZlcnNpdHkpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG5ldXJvbiBmcm9tICcuLi8uLi9uZXVyb24uanMnO1xyXG5cclxuY2xhc3MgQXhvbk1lbWJyYW5lU3RhdGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1RyYXZlbGluZ0FjdGlvblBvdGVudGlhbFN0YXRlfSB0cmF2ZWxpbmdBY3Rpb25Qb3RlbnRpYWxTdGF0ZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0cmF2ZWxpbmdBY3Rpb25Qb3RlbnRpYWxTdGF0ZSApIHtcclxuICAgIHRoaXMudHJhdmVsaW5nQWN0aW9uUG90ZW50aWFsU3RhdGUgPSB0cmF2ZWxpbmdBY3Rpb25Qb3RlbnRpYWxTdGF0ZTsgIC8vIEBwcml2YXRlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm4gdGhlIHN0YXRlIG9mIHRoZSB0cmF2ZWxpbmcgYWN0aW9uIHBvdGVudGlhbC4gIElmIG51bGwsIG5vIHRyYXZlbGluZyBhY3Rpb24gcG90ZW50aWFsIGV4aXN0cy5cclxuICAgKiBAcmV0dXJuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldFRyYXZlbGluZ0FjdGlvblBvdGVudGlhbFN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhdmVsaW5nQWN0aW9uUG90ZW50aWFsU3RhdGU7XHJcbiAgfVxyXG59XHJcblxyXG5uZXVyb24ucmVnaXN0ZXIoICdBeG9uTWVtYnJhbmVTdGF0ZScsIEF4b25NZW1icmFuZVN0YXRlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBeG9uTWVtYnJhbmVTdGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0saUJBQWlCO0FBRXBDLE1BQU1DLGlCQUFpQixDQUFDO0VBRXRCO0FBQ0Y7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyw2QkFBNkIsRUFBRztJQUMzQyxJQUFJLENBQUNBLDZCQUE2QixHQUFHQSw2QkFBNkIsQ0FBQyxDQUFFO0VBQ3ZFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsZ0NBQWdDQSxDQUFBLEVBQUc7SUFDakMsT0FBTyxJQUFJLENBQUNELDZCQUE2QjtFQUMzQztBQUNGO0FBRUFILE1BQU0sQ0FBQ0ssUUFBUSxDQUFFLG1CQUFtQixFQUFFSixpQkFBa0IsQ0FBQztBQUV6RCxlQUFlQSxpQkFBaUIifQ==