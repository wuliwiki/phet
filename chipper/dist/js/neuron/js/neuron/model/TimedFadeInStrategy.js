// Copyright 2014-2020, University of Colorado Boulder

/**
 * A strategy that controls fading in for a particle based on time.
 *
 * @author John Blanco
 * @author Sharfudeen Ashraf (for Ghent University)
 */

import neuron from '../../neuron.js';
import FadeStrategy from './FadeStrategy.js';
import NullFadeStrategy from './NullFadeStrategy.js';
class TimedFadeInStrategy extends FadeStrategy {
  /**
   * Constructor that assumes full fade in.
   *
   * @param {number} fadeTime - time, in seconds of sim time, for this to fade in
   */
  constructor(fadeTime) {
    super();
    this.fadeTime = fadeTime; // @private
    this.fadeCountdownTimer = fadeTime; // @private
    this.opacityTarget = 1; // @private
  }

  // @public, @override
  updateOpacity(fadableModelElement, dt) {
    fadableModelElement.setOpacity(Math.min((1 - this.fadeCountdownTimer / this.fadeTime) * this.opacityTarget, 1));
    this.fadeCountdownTimer -= dt;
    if (this.fadeCountdownTimer < 0) {
      this.fadeCountdownTimer = 0;
      // Done with the fade in, so set a null fade strategy.
      fadableModelElement.setFadeStrategy(NullFadeStrategy.getInstance());
    }
  }
}
neuron.register('TimedFadeInStrategy', TimedFadeInStrategy);
export default TimedFadeInStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuZXVyb24iLCJGYWRlU3RyYXRlZ3kiLCJOdWxsRmFkZVN0cmF0ZWd5IiwiVGltZWRGYWRlSW5TdHJhdGVneSIsImNvbnN0cnVjdG9yIiwiZmFkZVRpbWUiLCJmYWRlQ291bnRkb3duVGltZXIiLCJvcGFjaXR5VGFyZ2V0IiwidXBkYXRlT3BhY2l0eSIsImZhZGFibGVNb2RlbEVsZW1lbnQiLCJkdCIsInNldE9wYWNpdHkiLCJNYXRoIiwibWluIiwic2V0RmFkZVN0cmF0ZWd5IiwiZ2V0SW5zdGFuY2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRpbWVkRmFkZUluU3RyYXRlZ3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBzdHJhdGVneSB0aGF0IGNvbnRyb2xzIGZhZGluZyBpbiBmb3IgYSBwYXJ0aWNsZSBiYXNlZCBvbiB0aW1lLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWYgKGZvciBHaGVudCBVbml2ZXJzaXR5KVxyXG4gKi9cclxuXHJcbmltcG9ydCBuZXVyb24gZnJvbSAnLi4vLi4vbmV1cm9uLmpzJztcclxuaW1wb3J0IEZhZGVTdHJhdGVneSBmcm9tICcuL0ZhZGVTdHJhdGVneS5qcyc7XHJcbmltcG9ydCBOdWxsRmFkZVN0cmF0ZWd5IGZyb20gJy4vTnVsbEZhZGVTdHJhdGVneS5qcyc7XHJcblxyXG5jbGFzcyBUaW1lZEZhZGVJblN0cmF0ZWd5IGV4dGVuZHMgRmFkZVN0cmF0ZWd5IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IgdGhhdCBhc3N1bWVzIGZ1bGwgZmFkZSBpbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmYWRlVGltZSAtIHRpbWUsIGluIHNlY29uZHMgb2Ygc2ltIHRpbWUsIGZvciB0aGlzIHRvIGZhZGUgaW5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZmFkZVRpbWUgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5mYWRlVGltZSA9IGZhZGVUaW1lOyAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5mYWRlQ291bnRkb3duVGltZXIgPSBmYWRlVGltZTsgLy8gQHByaXZhdGVcclxuICAgIHRoaXMub3BhY2l0eVRhcmdldCA9IDE7IC8vIEBwcml2YXRlXHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljLCBAb3ZlcnJpZGVcclxuICB1cGRhdGVPcGFjaXR5KCBmYWRhYmxlTW9kZWxFbGVtZW50LCBkdCApIHtcclxuICAgIGZhZGFibGVNb2RlbEVsZW1lbnQuc2V0T3BhY2l0eSggTWF0aC5taW4oICggMSAtIHRoaXMuZmFkZUNvdW50ZG93blRpbWVyIC8gdGhpcy5mYWRlVGltZSApICogdGhpcy5vcGFjaXR5VGFyZ2V0LCAxICkgKTtcclxuICAgIHRoaXMuZmFkZUNvdW50ZG93blRpbWVyIC09IGR0O1xyXG4gICAgaWYgKCB0aGlzLmZhZGVDb3VudGRvd25UaW1lciA8IDAgKSB7XHJcbiAgICAgIHRoaXMuZmFkZUNvdW50ZG93blRpbWVyID0gMDtcclxuICAgICAgLy8gRG9uZSB3aXRoIHRoZSBmYWRlIGluLCBzbyBzZXQgYSBudWxsIGZhZGUgc3RyYXRlZ3kuXHJcbiAgICAgIGZhZGFibGVNb2RlbEVsZW1lbnQuc2V0RmFkZVN0cmF0ZWd5KCBOdWxsRmFkZVN0cmF0ZWd5LmdldEluc3RhbmNlKCkgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbm5ldXJvbi5yZWdpc3RlciggJ1RpbWVkRmFkZUluU3RyYXRlZ3knLCBUaW1lZEZhZGVJblN0cmF0ZWd5ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUaW1lZEZhZGVJblN0cmF0ZWd5OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSxpQkFBaUI7QUFDcEMsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUM1QyxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFFcEQsTUFBTUMsbUJBQW1CLFNBQVNGLFlBQVksQ0FBQztFQUU3QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLFFBQVEsRUFBRztJQUN0QixLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRLENBQUMsQ0FBQztJQUMxQixJQUFJLENBQUNDLGtCQUFrQixHQUFHRCxRQUFRLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUNFLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUMxQjs7RUFFQTtFQUNBQyxhQUFhQSxDQUFFQyxtQkFBbUIsRUFBRUMsRUFBRSxFQUFHO0lBQ3ZDRCxtQkFBbUIsQ0FBQ0UsVUFBVSxDQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBRSxDQUFFLENBQUMsR0FBRyxJQUFJLENBQUNQLGtCQUFrQixHQUFHLElBQUksQ0FBQ0QsUUFBUSxJQUFLLElBQUksQ0FBQ0UsYUFBYSxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQ3JILElBQUksQ0FBQ0Qsa0JBQWtCLElBQUlJLEVBQUU7SUFDN0IsSUFBSyxJQUFJLENBQUNKLGtCQUFrQixHQUFHLENBQUMsRUFBRztNQUNqQyxJQUFJLENBQUNBLGtCQUFrQixHQUFHLENBQUM7TUFDM0I7TUFDQUcsbUJBQW1CLENBQUNLLGVBQWUsQ0FBRVosZ0JBQWdCLENBQUNhLFdBQVcsQ0FBQyxDQUFFLENBQUM7SUFDdkU7RUFDRjtBQUNGO0FBRUFmLE1BQU0sQ0FBQ2dCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWIsbUJBQW9CLENBQUM7QUFFN0QsZUFBZUEsbUJBQW1CIn0=