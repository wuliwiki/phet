// Copyright 2014-2021, University of Colorado Boulder
/**
 * NeuronConstants is a collection of constants that configure global properties. If you change something here, it will
 * change *everywhere* in this simulation.
 *
 * @author Sharfudeen Ashraf (for Ghent University)
 * @author John Blanco
 */

import PhetColorScheme from '../../../../scenery-phet/js/PhetColorScheme.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Color } from '../../../../scenery/js/imports.js';
import neuron from '../../neuron.js';

// constants
const CLOCK_FRAME_RATE = 60;
const MIN_ACTION_POTENTIAL_CLOCK_DT = 1 / CLOCK_FRAME_RATE / 3000;
const MAX_ACTION_POTENTIAL_CLOCK_DT = 1 / CLOCK_FRAME_RATE / 1000;
const NeuronConstants = {
  // Fonts
  CONTROL_PANEL_TITLE_FONT: new PhetFont({
    weight: 'bold',
    size: 14
  }),
  CONTROL_PANEL_CONTROL_FONT: new PhetFont({
    size: 14
  }),
  // Fill and stroke colors
  CANVAS_BACKGROUND: new Color(204, 255, 249),
  CONTROL_PANEL_BACKGROUND: new Color(239, 239, 195),
  CONTROL_PANEL_STROKE: new Color(100, 100, 100),
  // Colors to use when representing various atoms.
  SODIUM_COLOR: PhetColorScheme.RED_COLORBLIND,
  POTASSIUM_COLOR: new Color(0, 240, 100),
  PROJECT_NAME: 'neuron',
  MEMBRANE_THICKNESS: 4,
  // In nanometers, obtained from web research.
  DEFAULT_DIAMETER: 150,
  // In nanometers.
  SCREEN_BACKGROUND: '#ccfefa',
  // Set up the clock ranges for the various modules.  Note that for this sim the clock rates are often several orders
  // of magnitude slower than real time.
  MIN_ACTION_POTENTIAL_CLOCK_DT: MIN_ACTION_POTENTIAL_CLOCK_DT,
  MAX_ACTION_POTENTIAL_CLOCK_DT: MAX_ACTION_POTENTIAL_CLOCK_DT,
  DEFAULT_ACTION_POTENTIAL_CLOCK_DT: (MIN_ACTION_POTENTIAL_CLOCK_DT + MAX_ACTION_POTENTIAL_CLOCK_DT) * 0.55,
  TIME_SPAN: 25,
  // In seconds.
  DEFAULT_MAX_VELOCITY: 40000
};

// verify that enum is immutable, without the runtime penalty in production code
if (assert) {
  Object.freeze(NeuronConstants);
}
neuron.register('NeuronConstants', NeuronConstants);
export default NeuronConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Q29sb3JTY2hlbWUiLCJQaGV0Rm9udCIsIkNvbG9yIiwibmV1cm9uIiwiQ0xPQ0tfRlJBTUVfUkFURSIsIk1JTl9BQ1RJT05fUE9URU5USUFMX0NMT0NLX0RUIiwiTUFYX0FDVElPTl9QT1RFTlRJQUxfQ0xPQ0tfRFQiLCJOZXVyb25Db25zdGFudHMiLCJDT05UUk9MX1BBTkVMX1RJVExFX0ZPTlQiLCJ3ZWlnaHQiLCJzaXplIiwiQ09OVFJPTF9QQU5FTF9DT05UUk9MX0ZPTlQiLCJDQU5WQVNfQkFDS0dST1VORCIsIkNPTlRST0xfUEFORUxfQkFDS0dST1VORCIsIkNPTlRST0xfUEFORUxfU1RST0tFIiwiU09ESVVNX0NPTE9SIiwiUkVEX0NPTE9SQkxJTkQiLCJQT1RBU1NJVU1fQ09MT1IiLCJQUk9KRUNUX05BTUUiLCJNRU1CUkFORV9USElDS05FU1MiLCJERUZBVUxUX0RJQU1FVEVSIiwiU0NSRUVOX0JBQ0tHUk9VTkQiLCJERUZBVUxUX0FDVElPTl9QT1RFTlRJQUxfQ0xPQ0tfRFQiLCJUSU1FX1NQQU4iLCJERUZBVUxUX01BWF9WRUxPQ0lUWSIsImFzc2VydCIsIk9iamVjdCIsImZyZWV6ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTmV1cm9uQ29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG4vKipcclxuICogTmV1cm9uQ29uc3RhbnRzIGlzIGEgY29sbGVjdGlvbiBvZiBjb25zdGFudHMgdGhhdCBjb25maWd1cmUgZ2xvYmFsIHByb3BlcnRpZXMuIElmIHlvdSBjaGFuZ2Ugc29tZXRoaW5nIGhlcmUsIGl0IHdpbGxcclxuICogY2hhbmdlICpldmVyeXdoZXJlKiBpbiB0aGlzIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWYgKGZvciBHaGVudCBVbml2ZXJzaXR5KVxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBoZXRDb2xvclNjaGVtZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldENvbG9yU2NoZW1lLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG5ldXJvbiBmcm9tICcuLi8uLi9uZXVyb24uanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IENMT0NLX0ZSQU1FX1JBVEUgPSA2MDtcclxuY29uc3QgTUlOX0FDVElPTl9QT1RFTlRJQUxfQ0xPQ0tfRFQgPSAoIDEgLyBDTE9DS19GUkFNRV9SQVRFICkgLyAzMDAwO1xyXG5jb25zdCBNQVhfQUNUSU9OX1BPVEVOVElBTF9DTE9DS19EVCA9ICggMSAvIENMT0NLX0ZSQU1FX1JBVEUgKSAvIDEwMDA7XHJcblxyXG5jb25zdCBOZXVyb25Db25zdGFudHMgPSB7XHJcblxyXG4gIC8vIEZvbnRzXHJcbiAgQ09OVFJPTF9QQU5FTF9USVRMRV9GT05UOiBuZXcgUGhldEZvbnQoIHsgd2VpZ2h0OiAnYm9sZCcsIHNpemU6IDE0IH0gKSxcclxuICBDT05UUk9MX1BBTkVMX0NPTlRST0xfRk9OVDogbmV3IFBoZXRGb250KCB7IHNpemU6IDE0IH0gKSxcclxuXHJcbiAgLy8gRmlsbCBhbmQgc3Ryb2tlIGNvbG9yc1xyXG4gIENBTlZBU19CQUNLR1JPVU5EOiBuZXcgQ29sb3IoIDIwNCwgMjU1LCAyNDkgKSxcclxuICBDT05UUk9MX1BBTkVMX0JBQ0tHUk9VTkQ6IG5ldyBDb2xvciggMjM5LCAyMzksIDE5NSApLFxyXG4gIENPTlRST0xfUEFORUxfU1RST0tFOiBuZXcgQ29sb3IoIDEwMCwgMTAwLCAxMDAgKSxcclxuXHJcbiAgLy8gQ29sb3JzIHRvIHVzZSB3aGVuIHJlcHJlc2VudGluZyB2YXJpb3VzIGF0b21zLlxyXG4gIFNPRElVTV9DT0xPUjogUGhldENvbG9yU2NoZW1lLlJFRF9DT0xPUkJMSU5ELFxyXG4gIFBPVEFTU0lVTV9DT0xPUjogbmV3IENvbG9yKCAwLCAyNDAsIDEwMCApLFxyXG4gIFBST0pFQ1RfTkFNRTogJ25ldXJvbicsXHJcbiAgTUVNQlJBTkVfVEhJQ0tORVNTOiA0LCAvLyBJbiBuYW5vbWV0ZXJzLCBvYnRhaW5lZCBmcm9tIHdlYiByZXNlYXJjaC5cclxuICBERUZBVUxUX0RJQU1FVEVSOiAxNTAsIC8vIEluIG5hbm9tZXRlcnMuXHJcbiAgU0NSRUVOX0JBQ0tHUk9VTkQ6ICcjY2NmZWZhJyxcclxuXHJcbiAgLy8gU2V0IHVwIHRoZSBjbG9jayByYW5nZXMgZm9yIHRoZSB2YXJpb3VzIG1vZHVsZXMuICBOb3RlIHRoYXQgZm9yIHRoaXMgc2ltIHRoZSBjbG9jayByYXRlcyBhcmUgb2Z0ZW4gc2V2ZXJhbCBvcmRlcnNcclxuICAvLyBvZiBtYWduaXR1ZGUgc2xvd2VyIHRoYW4gcmVhbCB0aW1lLlxyXG4gIE1JTl9BQ1RJT05fUE9URU5USUFMX0NMT0NLX0RUOiBNSU5fQUNUSU9OX1BPVEVOVElBTF9DTE9DS19EVCxcclxuICBNQVhfQUNUSU9OX1BPVEVOVElBTF9DTE9DS19EVDogTUFYX0FDVElPTl9QT1RFTlRJQUxfQ0xPQ0tfRFQsXHJcbiAgREVGQVVMVF9BQ1RJT05fUE9URU5USUFMX0NMT0NLX0RUOiAoIE1JTl9BQ1RJT05fUE9URU5USUFMX0NMT0NLX0RUICsgTUFYX0FDVElPTl9QT1RFTlRJQUxfQ0xPQ0tfRFQgKSAqIDAuNTUsXHJcbiAgVElNRV9TUEFOOiAyNSwgLy8gSW4gc2Vjb25kcy5cclxuICBERUZBVUxUX01BWF9WRUxPQ0lUWTogNDAwMDBcclxufTtcclxuXHJcbi8vIHZlcmlmeSB0aGF0IGVudW0gaXMgaW1tdXRhYmxlLCB3aXRob3V0IHRoZSBydW50aW1lIHBlbmFsdHkgaW4gcHJvZHVjdGlvbiBjb2RlXHJcbmlmICggYXNzZXJ0ICkgeyBPYmplY3QuZnJlZXplKCBOZXVyb25Db25zdGFudHMgKTsgfVxyXG5cclxubmV1cm9uLnJlZ2lzdGVyKCAnTmV1cm9uQ29uc3RhbnRzJywgTmV1cm9uQ29uc3RhbnRzICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOZXVyb25Db25zdGFudHM7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSxnREFBZ0Q7QUFDNUUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxLQUFLLFFBQVEsbUNBQW1DO0FBQ3pELE9BQU9DLE1BQU0sTUFBTSxpQkFBaUI7O0FBRXBDO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsRUFBRTtBQUMzQixNQUFNQyw2QkFBNkIsR0FBSyxDQUFDLEdBQUdELGdCQUFnQixHQUFLLElBQUk7QUFDckUsTUFBTUUsNkJBQTZCLEdBQUssQ0FBQyxHQUFHRixnQkFBZ0IsR0FBSyxJQUFJO0FBRXJFLE1BQU1HLGVBQWUsR0FBRztFQUV0QjtFQUNBQyx3QkFBd0IsRUFBRSxJQUFJUCxRQUFRLENBQUU7SUFBRVEsTUFBTSxFQUFFLE1BQU07SUFBRUMsSUFBSSxFQUFFO0VBQUcsQ0FBRSxDQUFDO0VBQ3RFQywwQkFBMEIsRUFBRSxJQUFJVixRQUFRLENBQUU7SUFBRVMsSUFBSSxFQUFFO0VBQUcsQ0FBRSxDQUFDO0VBRXhEO0VBQ0FFLGlCQUFpQixFQUFFLElBQUlWLEtBQUssQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUksQ0FBQztFQUM3Q1csd0JBQXdCLEVBQUUsSUFBSVgsS0FBSyxDQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBSSxDQUFDO0VBQ3BEWSxvQkFBb0IsRUFBRSxJQUFJWixLQUFLLENBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFJLENBQUM7RUFFaEQ7RUFDQWEsWUFBWSxFQUFFZixlQUFlLENBQUNnQixjQUFjO0VBQzVDQyxlQUFlLEVBQUUsSUFBSWYsS0FBSyxDQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBSSxDQUFDO0VBQ3pDZ0IsWUFBWSxFQUFFLFFBQVE7RUFDdEJDLGtCQUFrQixFQUFFLENBQUM7RUFBRTtFQUN2QkMsZ0JBQWdCLEVBQUUsR0FBRztFQUFFO0VBQ3ZCQyxpQkFBaUIsRUFBRSxTQUFTO0VBRTVCO0VBQ0E7RUFDQWhCLDZCQUE2QixFQUFFQSw2QkFBNkI7RUFDNURDLDZCQUE2QixFQUFFQSw2QkFBNkI7RUFDNURnQixpQ0FBaUMsRUFBRSxDQUFFakIsNkJBQTZCLEdBQUdDLDZCQUE2QixJQUFLLElBQUk7RUFDM0dpQixTQUFTLEVBQUUsRUFBRTtFQUFFO0VBQ2ZDLG9CQUFvQixFQUFFO0FBQ3hCLENBQUM7O0FBRUQ7QUFDQSxJQUFLQyxNQUFNLEVBQUc7RUFBRUMsTUFBTSxDQUFDQyxNQUFNLENBQUVwQixlQUFnQixDQUFDO0FBQUU7QUFFbERKLE1BQU0sQ0FBQ3lCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRXJCLGVBQWdCLENBQUM7QUFFckQsZUFBZUEsZUFBZSJ9