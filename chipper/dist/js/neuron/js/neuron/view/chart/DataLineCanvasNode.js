// Copyright 2015-2021, University of Colorado Boulder

/**
 * A node that represents a line created from a collection of points, intended to be used  to represent data on a
 * graph.  This is created as part of an effort to improve the performance of the dynamic chart in the Neuron sim.
 */

import Bounds2 from '../../../../../dot/js/Bounds2.js';
import { CanvasNode } from '../../../../../scenery/js/imports.js';
import neuron from '../../../neuron.js';

// constants
const LINE_COLOR = '#ff5500'; // colorblind-friendly red
const LINE_WIDTH = 1;
class DataLineCanvasNode extends CanvasNode {
  /**
   * @param {number} width
   * @param {number} height
   * @param {DynamicSeries} dataSeries
   * @param {ModelViewTransform2} mvt - model-view transform for mapping data points to the chart
   */
  constructor(width, height, dataSeries, mvt) {
    // call super-constructor
    super({
      pickable: false,
      canvasBounds: new Bounds2(0, 0, width, height)
    });
    this.dataSeries = dataSeries; // @private
    this.mvt = mvt; // @private

    // cause the canvas to get updated each time new data is added to the data series
    dataSeries.addDynamicSeriesListener(() => this.invalidatePaint());
  }

  /**
   * method that paints the data line on the canvas
   * @param {CanvasRenderingContext2D} context
   * @protected
   * @override
   */
  paintCanvas(context) {
    context.save();
    if (this.dataSeries.getLength() >= 2) {
      context.strokeStyle = LINE_COLOR;
      context.lineWidth = LINE_WIDTH;
      context.beginPath();
      context.moveTo(this.mvt.modelToViewX(this.dataSeries.getDataPoint(0).x), this.mvt.modelToViewY(this.dataSeries.getDataPoint(0).y));
      for (let i = 1; i < this.dataSeries.getLength(); i++) {
        const endPointX = this.mvt.modelToViewX(this.dataSeries.getDataPoint(i).x);
        const endPointY = this.mvt.modelToViewY(this.dataSeries.getDataPoint(i).y);
        context.lineTo(endPointX, endPointY);
      }
      context.stroke();
    }
    context.restore();
  }
}
neuron.register('DataLineCanvasNode', DataLineCanvasNode);
export default DataLineCanvasNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiQ2FudmFzTm9kZSIsIm5ldXJvbiIsIkxJTkVfQ09MT1IiLCJMSU5FX1dJRFRIIiwiRGF0YUxpbmVDYW52YXNOb2RlIiwiY29uc3RydWN0b3IiLCJ3aWR0aCIsImhlaWdodCIsImRhdGFTZXJpZXMiLCJtdnQiLCJwaWNrYWJsZSIsImNhbnZhc0JvdW5kcyIsImFkZER5bmFtaWNTZXJpZXNMaXN0ZW5lciIsImludmFsaWRhdGVQYWludCIsInBhaW50Q2FudmFzIiwiY29udGV4dCIsInNhdmUiLCJnZXRMZW5ndGgiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImJlZ2luUGF0aCIsIm1vdmVUbyIsIm1vZGVsVG9WaWV3WCIsImdldERhdGFQb2ludCIsIngiLCJtb2RlbFRvVmlld1kiLCJ5IiwiaSIsImVuZFBvaW50WCIsImVuZFBvaW50WSIsImxpbmVUbyIsInN0cm9rZSIsInJlc3RvcmUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRhdGFMaW5lQ2FudmFzTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIG5vZGUgdGhhdCByZXByZXNlbnRzIGEgbGluZSBjcmVhdGVkIGZyb20gYSBjb2xsZWN0aW9uIG9mIHBvaW50cywgaW50ZW5kZWQgdG8gYmUgdXNlZCAgdG8gcmVwcmVzZW50IGRhdGEgb24gYVxyXG4gKiBncmFwaC4gIFRoaXMgaXMgY3JlYXRlZCBhcyBwYXJ0IG9mIGFuIGVmZm9ydCB0byBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgZHluYW1pYyBjaGFydCBpbiB0aGUgTmV1cm9uIHNpbS5cclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCB7IENhbnZhc05vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbmV1cm9uIGZyb20gJy4uLy4uLy4uL25ldXJvbi5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTElORV9DT0xPUiA9ICcjZmY1NTAwJzsgLy8gY29sb3JibGluZC1mcmllbmRseSByZWRcclxuY29uc3QgTElORV9XSURUSCA9IDE7XHJcblxyXG5jbGFzcyBEYXRhTGluZUNhbnZhc05vZGUgZXh0ZW5kcyBDYW52YXNOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxyXG4gICAqIEBwYXJhbSB7RHluYW1pY1Nlcmllc30gZGF0YVNlcmllc1xyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbXZ0IC0gbW9kZWwtdmlldyB0cmFuc2Zvcm0gZm9yIG1hcHBpbmcgZGF0YSBwb2ludHMgdG8gdGhlIGNoYXJ0XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHdpZHRoLCBoZWlnaHQsIGRhdGFTZXJpZXMsIG12dCApIHtcclxuXHJcbiAgICAvLyBjYWxsIHN1cGVyLWNvbnN0cnVjdG9yXHJcbiAgICBzdXBlciggeyBwaWNrYWJsZTogZmFsc2UsIGNhbnZhc0JvdW5kczogbmV3IEJvdW5kczIoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKSB9ICk7XHJcblxyXG4gICAgdGhpcy5kYXRhU2VyaWVzID0gZGF0YVNlcmllczsgLy8gQHByaXZhdGVcclxuICAgIHRoaXMubXZ0ID0gbXZ0OyAvLyBAcHJpdmF0ZVxyXG5cclxuICAgIC8vIGNhdXNlIHRoZSBjYW52YXMgdG8gZ2V0IHVwZGF0ZWQgZWFjaCB0aW1lIG5ldyBkYXRhIGlzIGFkZGVkIHRvIHRoZSBkYXRhIHNlcmllc1xyXG4gICAgZGF0YVNlcmllcy5hZGREeW5hbWljU2VyaWVzTGlzdGVuZXIoICgpID0+IHRoaXMuaW52YWxpZGF0ZVBhaW50KCkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1ldGhvZCB0aGF0IHBhaW50cyB0aGUgZGF0YSBsaW5lIG9uIHRoZSBjYW52YXNcclxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dFxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwYWludENhbnZhcyggY29udGV4dCApIHtcclxuXHJcbiAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICBpZiAoIHRoaXMuZGF0YVNlcmllcy5nZXRMZW5ndGgoKSA+PSAyICkge1xyXG4gICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gTElORV9DT0xPUjtcclxuICAgICAgY29udGV4dC5saW5lV2lkdGggPSBMSU5FX1dJRFRIO1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0Lm1vdmVUbyggdGhpcy5tdnQubW9kZWxUb1ZpZXdYKCB0aGlzLmRhdGFTZXJpZXMuZ2V0RGF0YVBvaW50KCAwICkueCApLCB0aGlzLm12dC5tb2RlbFRvVmlld1koIHRoaXMuZGF0YVNlcmllcy5nZXREYXRhUG9pbnQoIDAgKS55ICkgKTtcclxuICAgICAgZm9yICggbGV0IGkgPSAxOyBpIDwgdGhpcy5kYXRhU2VyaWVzLmdldExlbmd0aCgpOyBpKysgKSB7XHJcbiAgICAgICAgY29uc3QgZW5kUG9pbnRYID0gdGhpcy5tdnQubW9kZWxUb1ZpZXdYKCB0aGlzLmRhdGFTZXJpZXMuZ2V0RGF0YVBvaW50KCBpICkueCApO1xyXG4gICAgICAgIGNvbnN0IGVuZFBvaW50WSA9IHRoaXMubXZ0Lm1vZGVsVG9WaWV3WSggdGhpcy5kYXRhU2VyaWVzLmdldERhdGFQb2ludCggaSApLnkgKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyggZW5kUG9pbnRYLCBlbmRQb2ludFkgKTtcclxuICAgICAgfVxyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gIH1cclxufVxyXG5cclxubmV1cm9uLnJlZ2lzdGVyKCAnRGF0YUxpbmVDYW52YXNOb2RlJywgRGF0YUxpbmVDYW52YXNOb2RlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEYXRhTGluZUNhbnZhc05vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sa0NBQWtDO0FBQ3RELFNBQVNDLFVBQVUsUUFBUSxzQ0FBc0M7QUFDakUsT0FBT0MsTUFBTSxNQUFNLG9CQUFvQjs7QUFFdkM7QUFDQSxNQUFNQyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDOUIsTUFBTUMsVUFBVSxHQUFHLENBQUM7QUFFcEIsTUFBTUMsa0JBQWtCLFNBQVNKLFVBQVUsQ0FBQztFQUUxQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsR0FBRyxFQUFHO0lBRTVDO0lBQ0EsS0FBSyxDQUFFO01BQUVDLFFBQVEsRUFBRSxLQUFLO01BQUVDLFlBQVksRUFBRSxJQUFJWixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRU8sS0FBSyxFQUFFQyxNQUFPO0lBQUUsQ0FBRSxDQUFDO0lBRTlFLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUNDLEdBQUcsR0FBR0EsR0FBRyxDQUFDLENBQUM7O0lBRWhCO0lBQ0FELFVBQVUsQ0FBQ0ksd0JBQXdCLENBQUUsTUFBTSxJQUFJLENBQUNDLGVBQWUsQ0FBQyxDQUFFLENBQUM7RUFDckU7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUVyQkEsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQztJQUVkLElBQUssSUFBSSxDQUFDUixVQUFVLENBQUNTLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFHO01BQ3RDRixPQUFPLENBQUNHLFdBQVcsR0FBR2hCLFVBQVU7TUFDaENhLE9BQU8sQ0FBQ0ksU0FBUyxHQUFHaEIsVUFBVTtNQUM5QlksT0FBTyxDQUFDSyxTQUFTLENBQUMsQ0FBQztNQUNuQkwsT0FBTyxDQUFDTSxNQUFNLENBQUUsSUFBSSxDQUFDWixHQUFHLENBQUNhLFlBQVksQ0FBRSxJQUFJLENBQUNkLFVBQVUsQ0FBQ2UsWUFBWSxDQUFFLENBQUUsQ0FBQyxDQUFDQyxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUNmLEdBQUcsQ0FBQ2dCLFlBQVksQ0FBRSxJQUFJLENBQUNqQixVQUFVLENBQUNlLFlBQVksQ0FBRSxDQUFFLENBQUMsQ0FBQ0csQ0FBRSxDQUFFLENBQUM7TUFDNUksS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDbkIsVUFBVSxDQUFDUyxTQUFTLENBQUMsQ0FBQyxFQUFFVSxDQUFDLEVBQUUsRUFBRztRQUN0RCxNQUFNQyxTQUFTLEdBQUcsSUFBSSxDQUFDbkIsR0FBRyxDQUFDYSxZQUFZLENBQUUsSUFBSSxDQUFDZCxVQUFVLENBQUNlLFlBQVksQ0FBRUksQ0FBRSxDQUFDLENBQUNILENBQUUsQ0FBQztRQUM5RSxNQUFNSyxTQUFTLEdBQUcsSUFBSSxDQUFDcEIsR0FBRyxDQUFDZ0IsWUFBWSxDQUFFLElBQUksQ0FBQ2pCLFVBQVUsQ0FBQ2UsWUFBWSxDQUFFSSxDQUFFLENBQUMsQ0FBQ0QsQ0FBRSxDQUFDO1FBQzlFWCxPQUFPLENBQUNlLE1BQU0sQ0FBRUYsU0FBUyxFQUFFQyxTQUFVLENBQUM7TUFDeEM7TUFDQWQsT0FBTyxDQUFDZ0IsTUFBTSxDQUFDLENBQUM7SUFDbEI7SUFFQWhCLE9BQU8sQ0FBQ2lCLE9BQU8sQ0FBQyxDQUFDO0VBQ25CO0FBQ0Y7QUFFQS9CLE1BQU0sQ0FBQ2dDLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRTdCLGtCQUFtQixDQUFDO0FBRTNELGVBQWVBLGtCQUFrQiJ9