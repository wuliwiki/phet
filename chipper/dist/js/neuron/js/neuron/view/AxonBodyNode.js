// Copyright 2014-2022, University of Colorado Boulder
/**
 * Representation of the axon membrane body in the view.  This is the part
 * that the action potential travels along, and is supposed to look sort of
 * 3D.
 *
 * @author John Blanco
 * @author Sharfudeen Ashraf (for Ghent University)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Color, Line, LinearGradient, Node, Path } from '../../../../scenery/js/imports.js';
import neuron from '../../neuron.js';
import TravelingActionPotentialCanvasNode from './TravelingActionPotentialCanvasNode.js';

// constants
const AXON_BODY_COLOR = new Color(221, 216, 44);
const LINE_WIDTH = 1; // STROKE
const SHOW_GRADIENT_LINE = false;
class AxonBodyNode extends Node {
  /**
   * Constructor for the AxonBodyNode
   * @param {NeuronModel} axonMembraneModel
   * @param {Bounds2} canvasBounds - bounds of the canvas for portraying the action potential, must be large enough
   * to not get cut off when view is at max zoom out
   * @param {ModelViewTransform2} mvt
   */
  constructor(axonMembraneModel, canvasBounds, mvt) {
    super({});
    this.axonMembraneModel = axonMembraneModel;
    this.mvt = mvt;

    // Add the axon body.
    const axonBodyShape = this.mvt.modelToViewShape(axonMembraneModel.axonBodyShape);
    const axonBodyBounds = axonBodyShape.bounds;
    const gradientOrigin = new Vector2(axonBodyBounds.getMaxX(), axonBodyBounds.getMaxY());
    const gradientExtent = new Vector2(mvt.modelToViewX(axonMembraneModel.crossSectionCircleCenter.x), mvt.modelToViewDeltaX(axonMembraneModel.crossSectionCircleRadius));
    const axonBodyGradient = new LinearGradient(gradientOrigin.x, gradientOrigin.y, gradientExtent.x, gradientExtent.y);
    axonBodyGradient.addColorStop(0, AXON_BODY_COLOR.darkerColor(0.5));
    axonBodyGradient.addColorStop(1, AXON_BODY_COLOR.brighterColor(0.5));
    const axonBody = new Path(axonBodyShape, {
      fill: axonBodyGradient,
      stroke: 'black',
      lineWidth: LINE_WIDTH
    });
    this.addChild(axonBody);
    if (SHOW_GRADIENT_LINE) {
      // The following line is useful when trying to debug the gradient.
      this.addChild(new Line(gradientOrigin, gradientExtent));
    }
    const travelingActionPotentialNode = new TravelingActionPotentialCanvasNode(this.mvt, canvasBounds);
    this.addChild(travelingActionPotentialNode);
    this.axonMembraneModel.travelingActionPotentialStarted.addListener(() => {
      travelingActionPotentialNode.travelingActionPotentialStarted(axonMembraneModel.travelingActionPotential);
    });
    this.axonMembraneModel.travelingActionPotentialEnded.addListener(() => {
      travelingActionPotentialNode.travelingActionPotentialEnded();
    });
  }
}
neuron.register('AxonBodyNode', AxonBodyNode);
export default AxonBodyNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiQ29sb3IiLCJMaW5lIiwiTGluZWFyR3JhZGllbnQiLCJOb2RlIiwiUGF0aCIsIm5ldXJvbiIsIlRyYXZlbGluZ0FjdGlvblBvdGVudGlhbENhbnZhc05vZGUiLCJBWE9OX0JPRFlfQ09MT1IiLCJMSU5FX1dJRFRIIiwiU0hPV19HUkFESUVOVF9MSU5FIiwiQXhvbkJvZHlOb2RlIiwiY29uc3RydWN0b3IiLCJheG9uTWVtYnJhbmVNb2RlbCIsImNhbnZhc0JvdW5kcyIsIm12dCIsImF4b25Cb2R5U2hhcGUiLCJtb2RlbFRvVmlld1NoYXBlIiwiYXhvbkJvZHlCb3VuZHMiLCJib3VuZHMiLCJncmFkaWVudE9yaWdpbiIsImdldE1heFgiLCJnZXRNYXhZIiwiZ3JhZGllbnRFeHRlbnQiLCJtb2RlbFRvVmlld1giLCJjcm9zc1NlY3Rpb25DaXJjbGVDZW50ZXIiLCJ4IiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJjcm9zc1NlY3Rpb25DaXJjbGVSYWRpdXMiLCJheG9uQm9keUdyYWRpZW50IiwieSIsImFkZENvbG9yU3RvcCIsImRhcmtlckNvbG9yIiwiYnJpZ2h0ZXJDb2xvciIsImF4b25Cb2R5IiwiZmlsbCIsInN0cm9rZSIsImxpbmVXaWR0aCIsImFkZENoaWxkIiwidHJhdmVsaW5nQWN0aW9uUG90ZW50aWFsTm9kZSIsInRyYXZlbGluZ0FjdGlvblBvdGVudGlhbFN0YXJ0ZWQiLCJhZGRMaXN0ZW5lciIsInRyYXZlbGluZ0FjdGlvblBvdGVudGlhbCIsInRyYXZlbGluZ0FjdGlvblBvdGVudGlhbEVuZGVkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBeG9uQm9keU5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRhdGlvbiBvZiB0aGUgYXhvbiBtZW1icmFuZSBib2R5IGluIHRoZSB2aWV3LiAgVGhpcyBpcyB0aGUgcGFydFxyXG4gKiB0aGF0IHRoZSBhY3Rpb24gcG90ZW50aWFsIHRyYXZlbHMgYWxvbmcsIGFuZCBpcyBzdXBwb3NlZCB0byBsb29rIHNvcnQgb2ZcclxuICogM0QuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZiAoZm9yIEdoZW50IFVuaXZlcnNpdHkpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgTGluZSwgTGluZWFyR3JhZGllbnQsIE5vZGUsIFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbmV1cm9uIGZyb20gJy4uLy4uL25ldXJvbi5qcyc7XHJcbmltcG9ydCBUcmF2ZWxpbmdBY3Rpb25Qb3RlbnRpYWxDYW52YXNOb2RlIGZyb20gJy4vVHJhdmVsaW5nQWN0aW9uUG90ZW50aWFsQ2FudmFzTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQVhPTl9CT0RZX0NPTE9SID0gbmV3IENvbG9yKCAyMjEsIDIxNiwgNDQgKTtcclxuY29uc3QgTElORV9XSURUSCA9IDE7Ly8gU1RST0tFXHJcbmNvbnN0IFNIT1dfR1JBRElFTlRfTElORSA9IGZhbHNlO1xyXG5cclxuY2xhc3MgQXhvbkJvZHlOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yIGZvciB0aGUgQXhvbkJvZHlOb2RlXHJcbiAgICogQHBhcmFtIHtOZXVyb25Nb2RlbH0gYXhvbk1lbWJyYW5lTW9kZWxcclxuICAgKiBAcGFyYW0ge0JvdW5kczJ9IGNhbnZhc0JvdW5kcyAtIGJvdW5kcyBvZiB0aGUgY2FudmFzIGZvciBwb3J0cmF5aW5nIHRoZSBhY3Rpb24gcG90ZW50aWFsLCBtdXN0IGJlIGxhcmdlIGVub3VnaFxyXG4gICAqIHRvIG5vdCBnZXQgY3V0IG9mZiB3aGVuIHZpZXcgaXMgYXQgbWF4IHpvb20gb3V0XHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtdnRcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYXhvbk1lbWJyYW5lTW9kZWwsIGNhbnZhc0JvdW5kcywgbXZ0ICkge1xyXG5cclxuICAgIHN1cGVyKCB7fSApO1xyXG4gICAgdGhpcy5heG9uTWVtYnJhbmVNb2RlbCA9IGF4b25NZW1icmFuZU1vZGVsO1xyXG4gICAgdGhpcy5tdnQgPSBtdnQ7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBheG9uIGJvZHkuXHJcbiAgICBjb25zdCBheG9uQm9keVNoYXBlID0gdGhpcy5tdnQubW9kZWxUb1ZpZXdTaGFwZSggYXhvbk1lbWJyYW5lTW9kZWwuYXhvbkJvZHlTaGFwZSApO1xyXG4gICAgY29uc3QgYXhvbkJvZHlCb3VuZHMgPSBheG9uQm9keVNoYXBlLmJvdW5kcztcclxuICAgIGNvbnN0IGdyYWRpZW50T3JpZ2luID0gbmV3IFZlY3RvcjIoIGF4b25Cb2R5Qm91bmRzLmdldE1heFgoKSwgYXhvbkJvZHlCb3VuZHMuZ2V0TWF4WSgpICk7XHJcbiAgICBjb25zdCBncmFkaWVudEV4dGVudCA9IG5ldyBWZWN0b3IyKCBtdnQubW9kZWxUb1ZpZXdYKCBheG9uTWVtYnJhbmVNb2RlbC5jcm9zc1NlY3Rpb25DaXJjbGVDZW50ZXIueCApLFxyXG4gICAgICBtdnQubW9kZWxUb1ZpZXdEZWx0YVgoIGF4b25NZW1icmFuZU1vZGVsLmNyb3NzU2VjdGlvbkNpcmNsZVJhZGl1cyApICk7XHJcbiAgICBjb25zdCBheG9uQm9keUdyYWRpZW50ID0gbmV3IExpbmVhckdyYWRpZW50KCBncmFkaWVudE9yaWdpbi54LCBncmFkaWVudE9yaWdpbi55LCBncmFkaWVudEV4dGVudC54LCBncmFkaWVudEV4dGVudC55ICk7XHJcbiAgICBheG9uQm9keUdyYWRpZW50LmFkZENvbG9yU3RvcCggMCwgQVhPTl9CT0RZX0NPTE9SLmRhcmtlckNvbG9yKCAwLjUgKSApO1xyXG4gICAgYXhvbkJvZHlHcmFkaWVudC5hZGRDb2xvclN0b3AoIDEsIEFYT05fQk9EWV9DT0xPUi5icmlnaHRlckNvbG9yKCAwLjUgKSApO1xyXG5cclxuICAgIGNvbnN0IGF4b25Cb2R5ID0gbmV3IFBhdGgoIGF4b25Cb2R5U2hhcGUsIHtcclxuICAgICAgZmlsbDogYXhvbkJvZHlHcmFkaWVudCxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IExJTkVfV0lEVEhcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGF4b25Cb2R5ICk7XHJcblxyXG4gICAgaWYgKCBTSE9XX0dSQURJRU5UX0xJTkUgKSB7XHJcbiAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbGluZSBpcyB1c2VmdWwgd2hlbiB0cnlpbmcgdG8gZGVidWcgdGhlIGdyYWRpZW50LlxyXG4gICAgICB0aGlzLmFkZENoaWxkKCBuZXcgTGluZSggZ3JhZGllbnRPcmlnaW4sIGdyYWRpZW50RXh0ZW50ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cmF2ZWxpbmdBY3Rpb25Qb3RlbnRpYWxOb2RlID0gbmV3IFRyYXZlbGluZ0FjdGlvblBvdGVudGlhbENhbnZhc05vZGUoIHRoaXMubXZ0LCBjYW52YXNCb3VuZHMgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRyYXZlbGluZ0FjdGlvblBvdGVudGlhbE5vZGUgKTtcclxuXHJcbiAgICB0aGlzLmF4b25NZW1icmFuZU1vZGVsLnRyYXZlbGluZ0FjdGlvblBvdGVudGlhbFN0YXJ0ZWQuYWRkTGlzdGVuZXIoICgpID0+IHtcclxuICAgICAgdHJhdmVsaW5nQWN0aW9uUG90ZW50aWFsTm9kZS50cmF2ZWxpbmdBY3Rpb25Qb3RlbnRpYWxTdGFydGVkKCBheG9uTWVtYnJhbmVNb2RlbC50cmF2ZWxpbmdBY3Rpb25Qb3RlbnRpYWwgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmF4b25NZW1icmFuZU1vZGVsLnRyYXZlbGluZ0FjdGlvblBvdGVudGlhbEVuZGVkLmFkZExpc3RlbmVyKCAoKSA9PiB7XHJcbiAgICAgIHRyYXZlbGluZ0FjdGlvblBvdGVudGlhbE5vZGUudHJhdmVsaW5nQWN0aW9uUG90ZW50aWFsRW5kZWQoKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbm5ldXJvbi5yZWdpc3RlciggJ0F4b25Cb2R5Tm9kZScsIEF4b25Cb2R5Tm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXhvbkJvZHlOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLGNBQWMsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzNGLE9BQU9DLE1BQU0sTUFBTSxpQkFBaUI7QUFDcEMsT0FBT0Msa0NBQWtDLE1BQU0seUNBQXlDOztBQUV4RjtBQUNBLE1BQU1DLGVBQWUsR0FBRyxJQUFJUCxLQUFLLENBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFHLENBQUM7QUFDakQsTUFBTVEsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNyQixNQUFNQyxrQkFBa0IsR0FBRyxLQUFLO0FBRWhDLE1BQU1DLFlBQVksU0FBU1AsSUFBSSxDQUFDO0VBRTlCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLGlCQUFpQixFQUFFQyxZQUFZLEVBQUVDLEdBQUcsRUFBRztJQUVsRCxLQUFLLENBQUUsQ0FBQyxDQUFFLENBQUM7SUFDWCxJQUFJLENBQUNGLGlCQUFpQixHQUFHQSxpQkFBaUI7SUFDMUMsSUFBSSxDQUFDRSxHQUFHLEdBQUdBLEdBQUc7O0lBRWQ7SUFDQSxNQUFNQyxhQUFhLEdBQUcsSUFBSSxDQUFDRCxHQUFHLENBQUNFLGdCQUFnQixDQUFFSixpQkFBaUIsQ0FBQ0csYUFBYyxDQUFDO0lBQ2xGLE1BQU1FLGNBQWMsR0FBR0YsYUFBYSxDQUFDRyxNQUFNO0lBQzNDLE1BQU1DLGNBQWMsR0FBRyxJQUFJcEIsT0FBTyxDQUFFa0IsY0FBYyxDQUFDRyxPQUFPLENBQUMsQ0FBQyxFQUFFSCxjQUFjLENBQUNJLE9BQU8sQ0FBQyxDQUFFLENBQUM7SUFDeEYsTUFBTUMsY0FBYyxHQUFHLElBQUl2QixPQUFPLENBQUVlLEdBQUcsQ0FBQ1MsWUFBWSxDQUFFWCxpQkFBaUIsQ0FBQ1ksd0JBQXdCLENBQUNDLENBQUUsQ0FBQyxFQUNsR1gsR0FBRyxDQUFDWSxpQkFBaUIsQ0FBRWQsaUJBQWlCLENBQUNlLHdCQUF5QixDQUFFLENBQUM7SUFDdkUsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSTFCLGNBQWMsQ0FBRWlCLGNBQWMsQ0FBQ00sQ0FBQyxFQUFFTixjQUFjLENBQUNVLENBQUMsRUFBRVAsY0FBYyxDQUFDRyxDQUFDLEVBQUVILGNBQWMsQ0FBQ08sQ0FBRSxDQUFDO0lBQ3JIRCxnQkFBZ0IsQ0FBQ0UsWUFBWSxDQUFFLENBQUMsRUFBRXZCLGVBQWUsQ0FBQ3dCLFdBQVcsQ0FBRSxHQUFJLENBQUUsQ0FBQztJQUN0RUgsZ0JBQWdCLENBQUNFLFlBQVksQ0FBRSxDQUFDLEVBQUV2QixlQUFlLENBQUN5QixhQUFhLENBQUUsR0FBSSxDQUFFLENBQUM7SUFFeEUsTUFBTUMsUUFBUSxHQUFHLElBQUk3QixJQUFJLENBQUVXLGFBQWEsRUFBRTtNQUN4Q21CLElBQUksRUFBRU4sZ0JBQWdCO01BQ3RCTyxNQUFNLEVBQUUsT0FBTztNQUNmQyxTQUFTLEVBQUU1QjtJQUNiLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQzZCLFFBQVEsQ0FBRUosUUFBUyxDQUFDO0lBRXpCLElBQUt4QixrQkFBa0IsRUFBRztNQUN4QjtNQUNBLElBQUksQ0FBQzRCLFFBQVEsQ0FBRSxJQUFJcEMsSUFBSSxDQUFFa0IsY0FBYyxFQUFFRyxjQUFlLENBQUUsQ0FBQztJQUM3RDtJQUVBLE1BQU1nQiw0QkFBNEIsR0FBRyxJQUFJaEMsa0NBQWtDLENBQUUsSUFBSSxDQUFDUSxHQUFHLEVBQUVELFlBQWEsQ0FBQztJQUNyRyxJQUFJLENBQUN3QixRQUFRLENBQUVDLDRCQUE2QixDQUFDO0lBRTdDLElBQUksQ0FBQzFCLGlCQUFpQixDQUFDMkIsK0JBQStCLENBQUNDLFdBQVcsQ0FBRSxNQUFNO01BQ3hFRiw0QkFBNEIsQ0FBQ0MsK0JBQStCLENBQUUzQixpQkFBaUIsQ0FBQzZCLHdCQUF5QixDQUFDO0lBQzVHLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQzdCLGlCQUFpQixDQUFDOEIsNkJBQTZCLENBQUNGLFdBQVcsQ0FBRSxNQUFNO01BQ3RFRiw0QkFBNEIsQ0FBQ0ksNkJBQTZCLENBQUMsQ0FBQztJQUM5RCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFyQyxNQUFNLENBQUNzQyxRQUFRLENBQUUsY0FBYyxFQUFFakMsWUFBYSxDQUFDO0FBRS9DLGVBQWVBLFlBQVkifQ==