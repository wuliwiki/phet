// Copyright 2018-2020, University of Colorado Boulder

/**
 * Model for one of the spherical draggable masses.
 *
 * @author Aadish Gupta (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import ISLCObject from '../../../inverse-square-law-common/js/model/ISLCObject.js';
import gravityForceLab from '../gravityForceLab.js';

// constants
// scale to brighten the base color to achieve rgba(150, 150, 255) but still be red or blue
const baseColorModifier = 0.59;
class Mass extends ISLCObject {
  /**
   * @param {number} initialMass
   * @param {Vector2} initialPosition
   * @param {Range} valueRange
   * @param {number} density
   * @param {Property.<boolean>} constantRadiusProperty
   * @param {Color} baseColor
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(initialMass, initialPosition, valueRange, density, constantRadiusProperty, baseColor, tandem, options) {
    super(initialMass, initialPosition, valueRange, constantRadiusProperty, mass => Mass.calculateRadius(mass, density), tandem, options);

    // @private
    this.density = density;

    // see ISLCObject, mass color is will change with value of constantRadiusProperty (set within sim)
    this.baseColorProperty = new DerivedProperty([this.valueProperty, constantRadiusProperty], (value, constantRadius) => {
      return constantRadius ? baseColor.colorUtilsBrighter(1 - Math.abs(value) / valueRange.max) : baseColor.colorUtilsBrighter(baseColorModifier);
    });
  }

  /**
   * calculates the radius based on mass of object maintaining constant density
   * calculations are made using the density formula and volume of a sphere
   * @public
   * @override
   * @param {number} mass
   * @param {number} density
   */
  static calculateRadius(mass, density) {
    return Math.pow(3 * mass / density / (4 * Math.PI), 1 / 3);
  }
}
gravityForceLab.register('Mass', Mass);
export default Mass;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJJU0xDT2JqZWN0IiwiZ3Jhdml0eUZvcmNlTGFiIiwiYmFzZUNvbG9yTW9kaWZpZXIiLCJNYXNzIiwiY29uc3RydWN0b3IiLCJpbml0aWFsTWFzcyIsImluaXRpYWxQb3NpdGlvbiIsInZhbHVlUmFuZ2UiLCJkZW5zaXR5IiwiY29uc3RhbnRSYWRpdXNQcm9wZXJ0eSIsImJhc2VDb2xvciIsInRhbmRlbSIsIm9wdGlvbnMiLCJtYXNzIiwiY2FsY3VsYXRlUmFkaXVzIiwiYmFzZUNvbG9yUHJvcGVydHkiLCJ2YWx1ZVByb3BlcnR5IiwidmFsdWUiLCJjb25zdGFudFJhZGl1cyIsImNvbG9yVXRpbHNCcmlnaHRlciIsIk1hdGgiLCJhYnMiLCJtYXgiLCJwb3ciLCJQSSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWFzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3Igb25lIG9mIHRoZSBzcGhlcmljYWwgZHJhZ2dhYmxlIG1hc3Nlcy5cclxuICpcclxuICogQGF1dGhvciBBYWRpc2ggR3VwdGEgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBJU0xDT2JqZWN0IGZyb20gJy4uLy4uLy4uL2ludmVyc2Utc3F1YXJlLWxhdy1jb21tb24vanMvbW9kZWwvSVNMQ09iamVjdC5qcyc7XHJcbmltcG9ydCBncmF2aXR5Rm9yY2VMYWIgZnJvbSAnLi4vZ3Jhdml0eUZvcmNlTGFiLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG4vLyBzY2FsZSB0byBicmlnaHRlbiB0aGUgYmFzZSBjb2xvciB0byBhY2hpZXZlIHJnYmEoMTUwLCAxNTAsIDI1NSkgYnV0IHN0aWxsIGJlIHJlZCBvciBibHVlXHJcbmNvbnN0IGJhc2VDb2xvck1vZGlmaWVyID0gMC41OTtcclxuXHJcbmNsYXNzIE1hc3MgZXh0ZW5kcyBJU0xDT2JqZWN0IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluaXRpYWxNYXNzXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBpbml0aWFsUG9zaXRpb25cclxuICAgKiBAcGFyYW0ge1JhbmdlfSB2YWx1ZVJhbmdlXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbnNpdHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gY29uc3RhbnRSYWRpdXNQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7Q29sb3J9IGJhc2VDb2xvclxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGluaXRpYWxNYXNzLCBpbml0aWFsUG9zaXRpb24sIHZhbHVlUmFuZ2UsIGRlbnNpdHksIGNvbnN0YW50UmFkaXVzUHJvcGVydHksIGJhc2VDb2xvciwgdGFuZGVtLCBvcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBpbml0aWFsTWFzcywgaW5pdGlhbFBvc2l0aW9uLCB2YWx1ZVJhbmdlLCBjb25zdGFudFJhZGl1c1Byb3BlcnR5LFxyXG4gICAgICBtYXNzID0+IE1hc3MuY2FsY3VsYXRlUmFkaXVzKCBtYXNzLCBkZW5zaXR5ICksXHJcbiAgICAgIHRhbmRlbSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLmRlbnNpdHkgPSBkZW5zaXR5O1xyXG5cclxuXHJcbiAgICAvLyBzZWUgSVNMQ09iamVjdCwgbWFzcyBjb2xvciBpcyB3aWxsIGNoYW5nZSB3aXRoIHZhbHVlIG9mIGNvbnN0YW50UmFkaXVzUHJvcGVydHkgKHNldCB3aXRoaW4gc2ltKVxyXG4gICAgdGhpcy5iYXNlQ29sb3JQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy52YWx1ZVByb3BlcnR5LCBjb25zdGFudFJhZGl1c1Byb3BlcnR5IF0sXHJcbiAgICAgICggdmFsdWUsIGNvbnN0YW50UmFkaXVzICkgPT4ge1xyXG4gICAgICAgIHJldHVybiBjb25zdGFudFJhZGl1cyA/XHJcbiAgICAgICAgICAgICAgIGJhc2VDb2xvci5jb2xvclV0aWxzQnJpZ2h0ZXIoIDEgLSBNYXRoLmFicyggdmFsdWUgKSAvIHZhbHVlUmFuZ2UubWF4ICkgOlxyXG4gICAgICAgICAgICAgICBiYXNlQ29sb3IuY29sb3JVdGlsc0JyaWdodGVyKCBiYXNlQ29sb3JNb2RpZmllciApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogY2FsY3VsYXRlcyB0aGUgcmFkaXVzIGJhc2VkIG9uIG1hc3Mgb2Ygb2JqZWN0IG1haW50YWluaW5nIGNvbnN0YW50IGRlbnNpdHlcclxuICAgKiBjYWxjdWxhdGlvbnMgYXJlIG1hZGUgdXNpbmcgdGhlIGRlbnNpdHkgZm9ybXVsYSBhbmQgdm9sdW1lIG9mIGEgc3BoZXJlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXNzXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbnNpdHlcclxuICAgKi9cclxuICBzdGF0aWMgY2FsY3VsYXRlUmFkaXVzKCBtYXNzLCBkZW5zaXR5ICkge1xyXG4gICAgcmV0dXJuIE1hdGgucG93KCAoIDMgKiBtYXNzIC8gZGVuc2l0eSApIC8gKCA0ICogTWF0aC5QSSApLCAxIC8gMyApO1xyXG4gIH1cclxufVxyXG5cclxuZ3Jhdml0eUZvcmNlTGFiLnJlZ2lzdGVyKCAnTWFzcycsIE1hc3MgKTtcclxuZXhwb3J0IGRlZmF1bHQgTWFzczsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHFDQUFxQztBQUNqRSxPQUFPQyxVQUFVLE1BQU0sMkRBQTJEO0FBQ2xGLE9BQU9DLGVBQWUsTUFBTSx1QkFBdUI7O0FBRW5EO0FBQ0E7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxJQUFJO0FBRTlCLE1BQU1DLElBQUksU0FBU0gsVUFBVSxDQUFDO0VBRTVCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLFdBQVcsRUFBRUMsZUFBZSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsc0JBQXNCLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUc7SUFFbkgsS0FBSyxDQUFFUCxXQUFXLEVBQUVDLGVBQWUsRUFBRUMsVUFBVSxFQUFFRSxzQkFBc0IsRUFDckVJLElBQUksSUFBSVYsSUFBSSxDQUFDVyxlQUFlLENBQUVELElBQUksRUFBRUwsT0FBUSxDQUFDLEVBQzdDRyxNQUFNLEVBQUVDLE9BQVEsQ0FBQzs7SUFFbkI7SUFDQSxJQUFJLENBQUNKLE9BQU8sR0FBR0EsT0FBTzs7SUFHdEI7SUFDQSxJQUFJLENBQUNPLGlCQUFpQixHQUFHLElBQUloQixlQUFlLENBQUUsQ0FBRSxJQUFJLENBQUNpQixhQUFhLEVBQUVQLHNCQUFzQixDQUFFLEVBQzFGLENBQUVRLEtBQUssRUFBRUMsY0FBYyxLQUFNO01BQzNCLE9BQU9BLGNBQWMsR0FDZFIsU0FBUyxDQUFDUyxrQkFBa0IsQ0FBRSxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFFSixLQUFNLENBQUMsR0FBR1YsVUFBVSxDQUFDZSxHQUFJLENBQUMsR0FDdEVaLFNBQVMsQ0FBQ1Msa0JBQWtCLENBQUVqQixpQkFBa0IsQ0FBQztJQUMxRCxDQUFFLENBQUM7RUFFUDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBT1ksZUFBZUEsQ0FBRUQsSUFBSSxFQUFFTCxPQUFPLEVBQUc7SUFDdEMsT0FBT1ksSUFBSSxDQUFDRyxHQUFHLENBQUksQ0FBQyxHQUFHVixJQUFJLEdBQUdMLE9BQU8sSUFBTyxDQUFDLEdBQUdZLElBQUksQ0FBQ0ksRUFBRSxDQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUUsQ0FBQztFQUNwRTtBQUNGO0FBRUF2QixlQUFlLENBQUN3QixRQUFRLENBQUUsTUFBTSxFQUFFdEIsSUFBSyxDQUFDO0FBQ3hDLGVBQWVBLElBQUkifQ==