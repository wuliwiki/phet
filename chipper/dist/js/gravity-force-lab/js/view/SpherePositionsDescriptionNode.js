// Copyright 2019-2022, University of Colorado Boulder

/**
 * Simple PDOM node to hold the two interactive mass spheres.
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Multilink from '../../../axon/js/Multilink.js';
import InverseSquareLawCommonStrings from '../../../inverse-square-law-common/js/InverseSquareLawCommonStrings.js';
import merge from '../../../phet-core/js/merge.js';
import { Node } from '../../../scenery/js/imports.js';
import gravityForceLab from '../gravityForceLab.js';

// constants
const spherePositionsString = InverseSquareLawCommonStrings.a11y.sphere.spherePositions;
class SpherePositionsDescriptionNode extends Node {
  /**
   * @param {ISLCModel} model
   * @param {PositionDescriber} positionDescriber
   * @param {Object} [options]
   */
  constructor(model, positionDescriber, options) {
    options = merge({
      tagName: 'div',
      labelTagName: 'h3',
      labelContent: spherePositionsString,
      additionalDescriptionDependencies: [] // {Property[]} to be added to the multilink
    }, options);
    super(options);
    Multilink.multilink([
    // Linking to `model.separationProperty` caused the same bug as in GFLB#103, so we are linking to
    // both objects' positionProperty instead.
    model.object1.positionProperty, model.object2.positionProperty].concat(options.additionalDescriptionDependencies), () => {
      this.descriptionContent = positionDescriber.getSpherePositionsHelpText();
    });
  }
}
gravityForceLab.register('SpherePositionsDescriptionNode', SpherePositionsDescriptionNode);
export default SpherePositionsDescriptionNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJJbnZlcnNlU3F1YXJlTGF3Q29tbW9uU3RyaW5ncyIsIm1lcmdlIiwiTm9kZSIsImdyYXZpdHlGb3JjZUxhYiIsInNwaGVyZVBvc2l0aW9uc1N0cmluZyIsImExMXkiLCJzcGhlcmUiLCJzcGhlcmVQb3NpdGlvbnMiLCJTcGhlcmVQb3NpdGlvbnNEZXNjcmlwdGlvbk5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwicG9zaXRpb25EZXNjcmliZXIiLCJvcHRpb25zIiwidGFnTmFtZSIsImxhYmVsVGFnTmFtZSIsImxhYmVsQ29udGVudCIsImFkZGl0aW9uYWxEZXNjcmlwdGlvbkRlcGVuZGVuY2llcyIsIm11bHRpbGluayIsIm9iamVjdDEiLCJwb3NpdGlvblByb3BlcnR5Iiwib2JqZWN0MiIsImNvbmNhdCIsImRlc2NyaXB0aW9uQ29udGVudCIsImdldFNwaGVyZVBvc2l0aW9uc0hlbHBUZXh0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTcGhlcmVQb3NpdGlvbnNEZXNjcmlwdGlvbk5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2ltcGxlIFBET00gbm9kZSB0byBob2xkIHRoZSB0d28gaW50ZXJhY3RpdmUgbWFzcyBzcGhlcmVzLlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBJbnZlcnNlU3F1YXJlTGF3Q29tbW9uU3RyaW5ncyBmcm9tICcuLi8uLi8uLi9pbnZlcnNlLXNxdWFyZS1sYXctY29tbW9uL2pzL0ludmVyc2VTcXVhcmVMYXdDb21tb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ3Jhdml0eUZvcmNlTGFiIGZyb20gJy4uL2dyYXZpdHlGb3JjZUxhYi5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3Qgc3BoZXJlUG9zaXRpb25zU3RyaW5nID0gSW52ZXJzZVNxdWFyZUxhd0NvbW1vblN0cmluZ3MuYTExeS5zcGhlcmUuc3BoZXJlUG9zaXRpb25zO1xyXG5cclxuY2xhc3MgU3BoZXJlUG9zaXRpb25zRGVzY3JpcHRpb25Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7SVNMQ01vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7UG9zaXRpb25EZXNjcmliZXJ9IHBvc2l0aW9uRGVzY3JpYmVyXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgcG9zaXRpb25EZXNjcmliZXIsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICBsYWJlbFRhZ05hbWU6ICdoMycsXHJcbiAgICAgIGxhYmVsQ29udGVudDogc3BoZXJlUG9zaXRpb25zU3RyaW5nLFxyXG4gICAgICBhZGRpdGlvbmFsRGVzY3JpcHRpb25EZXBlbmRlbmNpZXM6IFtdIC8vIHtQcm9wZXJ0eVtdfSB0byBiZSBhZGRlZCB0byB0aGUgbXVsdGlsaW5rXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbXHJcblxyXG4gICAgICAgIC8vIExpbmtpbmcgdG8gYG1vZGVsLnNlcGFyYXRpb25Qcm9wZXJ0eWAgY2F1c2VkIHRoZSBzYW1lIGJ1ZyBhcyBpbiBHRkxCIzEwMywgc28gd2UgYXJlIGxpbmtpbmcgdG9cclxuICAgICAgICAvLyBib3RoIG9iamVjdHMnIHBvc2l0aW9uUHJvcGVydHkgaW5zdGVhZC5cclxuICAgICAgICBtb2RlbC5vYmplY3QxLnBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgICAgbW9kZWwub2JqZWN0Mi5wb3NpdGlvblByb3BlcnR5IF0uY29uY2F0KCBvcHRpb25zLmFkZGl0aW9uYWxEZXNjcmlwdGlvbkRlcGVuZGVuY2llcyApLFxyXG4gICAgICAoKSA9PiB7IHRoaXMuZGVzY3JpcHRpb25Db250ZW50ID0gcG9zaXRpb25EZXNjcmliZXIuZ2V0U3BoZXJlUG9zaXRpb25zSGVscFRleHQoKTsgfVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXZpdHlGb3JjZUxhYi5yZWdpc3RlciggJ1NwaGVyZVBvc2l0aW9uc0Rlc2NyaXB0aW9uTm9kZScsIFNwaGVyZVBvc2l0aW9uc0Rlc2NyaXB0aW9uTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBTcGhlcmVQb3NpdGlvbnNEZXNjcmlwdGlvbk5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sK0JBQStCO0FBQ3JELE9BQU9DLDZCQUE2QixNQUFNLHdFQUF3RTtBQUNsSCxPQUFPQyxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELFNBQVNDLElBQUksUUFBUSxnQ0FBZ0M7QUFDckQsT0FBT0MsZUFBZSxNQUFNLHVCQUF1Qjs7QUFFbkQ7QUFDQSxNQUFNQyxxQkFBcUIsR0FBR0osNkJBQTZCLENBQUNLLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxlQUFlO0FBRXZGLE1BQU1DLDhCQUE4QixTQUFTTixJQUFJLENBQUM7RUFFaEQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLGlCQUFpQixFQUFFQyxPQUFPLEVBQUc7SUFFL0NBLE9BQU8sR0FBR1gsS0FBSyxDQUFFO01BQ2ZZLE9BQU8sRUFBRSxLQUFLO01BQ2RDLFlBQVksRUFBRSxJQUFJO01BQ2xCQyxZQUFZLEVBQUVYLHFCQUFxQjtNQUNuQ1ksaUNBQWlDLEVBQUUsRUFBRSxDQUFDO0lBQ3hDLENBQUMsRUFBRUosT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFQSxPQUFRLENBQUM7SUFFaEJiLFNBQVMsQ0FBQ2tCLFNBQVMsQ0FBRTtJQUVqQjtJQUNBO0lBQ0FQLEtBQUssQ0FBQ1EsT0FBTyxDQUFDQyxnQkFBZ0IsRUFDOUJULEtBQUssQ0FBQ1UsT0FBTyxDQUFDRCxnQkFBZ0IsQ0FBRSxDQUFDRSxNQUFNLENBQUVULE9BQU8sQ0FBQ0ksaUNBQWtDLENBQUMsRUFDdEYsTUFBTTtNQUFFLElBQUksQ0FBQ00sa0JBQWtCLEdBQUdYLGlCQUFpQixDQUFDWSwwQkFBMEIsQ0FBQyxDQUFDO0lBQUUsQ0FDcEYsQ0FBQztFQUNIO0FBQ0Y7QUFFQXBCLGVBQWUsQ0FBQ3FCLFFBQVEsQ0FBRSxnQ0FBZ0MsRUFBRWhCLDhCQUErQixDQUFDO0FBQzVGLGVBQWVBLDhCQUE4QiJ9