// Copyright 2018-2022, University of Colorado Boulder

/**
 * A node to control the PDOM content for the Screen Summary of the sim.
 *
 * @author Michael Barlow (PhET Interactive Simulations)
 */

import Multilink from '../../../axon/js/Multilink.js';
import InverseSquareLawCommonStrings from '../../../inverse-square-law-common/js/InverseSquareLawCommonStrings.js';
import merge from '../../../phet-core/js/merge.js';
import StringUtils from '../../../phetcommon/js/util/StringUtils.js';
import { Node } from '../../../scenery/js/imports.js';
import gravityForceLab from '../gravityForceLab.js';
import GravityForceLabStrings from '../GravityForceLabStrings.js';
const screenSummaryPlayAreaOverviewString = GravityForceLabStrings.a11y.screenSummary.playAreaOverview;
const screenSummaryPlayAreaControlsString = GravityForceLabStrings.a11y.screenSummary.playAreaControls;
const screenSummarySecondaryDescriptionString = GravityForceLabStrings.a11y.screenSummary.secondaryDescription;
const simStateListLabelString = GravityForceLabStrings.a11y.screenSummary.simStateListLabel;
const massString = GravityForceLabStrings.a11y.mass;

// import from ISLC so that coulombs-law can use it too
const summaryInteractionHintPatternString = InverseSquareLawCommonStrings.a11y.screenSummary.summaryInteractionHintPattern;
class GravityForceLabScreenSummaryNode extends Node {
  /**
   * @param {ISLCModel} model
   * @param {MassDescriber} massDescriber
   * @param {GravityForceLabForceDescriber} forceDescriber
   * @param {GravityForceLabPositionDescriber} positionDescriber
   * @param {Object} [options]
   */
  constructor(model, massDescriber, forceDescriber, positionDescriber, options) {
    options = merge({
      // {Property[]} - a way to provide extra Properties to that will update the mass and distance summary sections
      // on change
      additionalMassDistanceProperties: [],
      // {string}
      screenSummaryPlayAreaOverview: screenSummaryPlayAreaOverviewString,
      screenSummaryPlayAreaControls: screenSummaryPlayAreaControlsString,
      // {string}
      secondaryDescriptionContent: screenSummarySecondaryDescriptionString,
      // {string}
      simStateLabel: simStateListLabelString
    }, options);
    super();

    // @private - describers
    this.forceDescriber = forceDescriber;
    this.positionDescriber = positionDescriber;
    this.massDescriber = massDescriber;
    const liOptions = {
      tagName: 'li'
    };

    // @private - Nodes for PDOM content
    this.forceVectorsSummaryItem = new Node(liOptions);
    this.objectDistanceSummaryItem = new Node(liOptions);
    this.massValuesSummaryItem = new Node(liOptions);
    this.robotsSummaryItem = new Node(liOptions);

    // initialize the list contents
    this.updateSimStateList();
    const simStateNode = new Node({
      tagName: 'ul',
      labelContent: options.simStateLabel
    });
    const screenSummaryPlayAreaOverviewNode = new Node({
      tagName: 'p',
      innerContent: options.screenSummaryPlayAreaOverview
    });
    const screenSummaryPlayAreaControlsNode = new Node({
      tagName: 'p',
      innerContent: options.screenSummaryPlayAreaControls
    });
    const secondSummaryDescriptionNode = new Node({
      tagName: 'p',
      innerContent: options.secondaryDescriptionContent
    });
    simStateNode.children = [this.forceVectorsSummaryItem, this.objectDistanceSummaryItem, this.massValuesSummaryItem, this.robotsSummaryItem];
    const interactionHintNode = new Node({
      tagName: 'p',
      innerContent: StringUtils.fillIn(summaryInteractionHintPatternString, {
        massOrCharge: massString
      })
    });
    this.children = [screenSummaryPlayAreaOverviewNode, screenSummaryPlayAreaControlsNode, secondSummaryDescriptionNode, simStateNode, interactionHintNode];
    Multilink.multilink([model.forceProperty, model.showForceValuesProperty], () => {
      this.updateForceVectorSummary();
      this.updateRobotEffort();
    });
    Multilink.multilink([model.object1.positionProperty, model.object1.valueProperty, model.object2.positionProperty, model.object2.valueProperty, model.constantRadiusProperty // not really needed, but for completeness it is good to have.
    ].concat(options.additionalMassDistanceProperties), () => {
      this.updateObjectDistanceSummary();
      this.updateMassValuesSummary();
    });
    model.forceValuesDisplayProperty && model.forceValuesDisplayProperty.link(() => {
      this.updateForceVectorSummary();
    });
  }

  // @private
  updateSimStateList() {
    this.updateForceVectorSummary();
    this.updateObjectDistanceSummary();
    this.updateMassValuesSummary();
    this.updateRobotEffort();
  }

  // @private
  updateForceVectorSummary() {
    this.forceVectorsSummaryItem.innerContent = this.forceDescriber.getForceVectorsSummaryText();
  }

  // @private
  updateObjectDistanceSummary() {
    this.objectDistanceSummaryItem.innerContent = this.positionDescriber.getObjectDistanceSummary();
  }

  // @private
  updateMassValuesSummary() {
    this.massValuesSummaryItem.innerContent = this.massDescriber.getMassValuesSummaryText();
  }

  // @private
  updateRobotEffort() {
    this.robotsSummaryItem.innerContent = this.forceDescriber.getRobotEffortSummaryText();
  }
}
gravityForceLab.register('GravityForceLabScreenSummaryNode', GravityForceLabScreenSummaryNode);
export default GravityForceLabScreenSummaryNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJJbnZlcnNlU3F1YXJlTGF3Q29tbW9uU3RyaW5ncyIsIm1lcmdlIiwiU3RyaW5nVXRpbHMiLCJOb2RlIiwiZ3Jhdml0eUZvcmNlTGFiIiwiR3Jhdml0eUZvcmNlTGFiU3RyaW5ncyIsInNjcmVlblN1bW1hcnlQbGF5QXJlYU92ZXJ2aWV3U3RyaW5nIiwiYTExeSIsInNjcmVlblN1bW1hcnkiLCJwbGF5QXJlYU92ZXJ2aWV3Iiwic2NyZWVuU3VtbWFyeVBsYXlBcmVhQ29udHJvbHNTdHJpbmciLCJwbGF5QXJlYUNvbnRyb2xzIiwic2NyZWVuU3VtbWFyeVNlY29uZGFyeURlc2NyaXB0aW9uU3RyaW5nIiwic2Vjb25kYXJ5RGVzY3JpcHRpb24iLCJzaW1TdGF0ZUxpc3RMYWJlbFN0cmluZyIsInNpbVN0YXRlTGlzdExhYmVsIiwibWFzc1N0cmluZyIsIm1hc3MiLCJzdW1tYXJ5SW50ZXJhY3Rpb25IaW50UGF0dGVyblN0cmluZyIsInN1bW1hcnlJbnRlcmFjdGlvbkhpbnRQYXR0ZXJuIiwiR3Jhdml0eUZvcmNlTGFiU2NyZWVuU3VtbWFyeU5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwibWFzc0Rlc2NyaWJlciIsImZvcmNlRGVzY3JpYmVyIiwicG9zaXRpb25EZXNjcmliZXIiLCJvcHRpb25zIiwiYWRkaXRpb25hbE1hc3NEaXN0YW5jZVByb3BlcnRpZXMiLCJzY3JlZW5TdW1tYXJ5UGxheUFyZWFPdmVydmlldyIsInNjcmVlblN1bW1hcnlQbGF5QXJlYUNvbnRyb2xzIiwic2Vjb25kYXJ5RGVzY3JpcHRpb25Db250ZW50Iiwic2ltU3RhdGVMYWJlbCIsImxpT3B0aW9ucyIsInRhZ05hbWUiLCJmb3JjZVZlY3RvcnNTdW1tYXJ5SXRlbSIsIm9iamVjdERpc3RhbmNlU3VtbWFyeUl0ZW0iLCJtYXNzVmFsdWVzU3VtbWFyeUl0ZW0iLCJyb2JvdHNTdW1tYXJ5SXRlbSIsInVwZGF0ZVNpbVN0YXRlTGlzdCIsInNpbVN0YXRlTm9kZSIsImxhYmVsQ29udGVudCIsInNjcmVlblN1bW1hcnlQbGF5QXJlYU92ZXJ2aWV3Tm9kZSIsImlubmVyQ29udGVudCIsInNjcmVlblN1bW1hcnlQbGF5QXJlYUNvbnRyb2xzTm9kZSIsInNlY29uZFN1bW1hcnlEZXNjcmlwdGlvbk5vZGUiLCJjaGlsZHJlbiIsImludGVyYWN0aW9uSGludE5vZGUiLCJmaWxsSW4iLCJtYXNzT3JDaGFyZ2UiLCJtdWx0aWxpbmsiLCJmb3JjZVByb3BlcnR5Iiwic2hvd0ZvcmNlVmFsdWVzUHJvcGVydHkiLCJ1cGRhdGVGb3JjZVZlY3RvclN1bW1hcnkiLCJ1cGRhdGVSb2JvdEVmZm9ydCIsIm9iamVjdDEiLCJwb3NpdGlvblByb3BlcnR5IiwidmFsdWVQcm9wZXJ0eSIsIm9iamVjdDIiLCJjb25zdGFudFJhZGl1c1Byb3BlcnR5IiwiY29uY2F0IiwidXBkYXRlT2JqZWN0RGlzdGFuY2VTdW1tYXJ5IiwidXBkYXRlTWFzc1ZhbHVlc1N1bW1hcnkiLCJmb3JjZVZhbHVlc0Rpc3BsYXlQcm9wZXJ0eSIsImxpbmsiLCJnZXRGb3JjZVZlY3RvcnNTdW1tYXJ5VGV4dCIsImdldE9iamVjdERpc3RhbmNlU3VtbWFyeSIsImdldE1hc3NWYWx1ZXNTdW1tYXJ5VGV4dCIsImdldFJvYm90RWZmb3J0U3VtbWFyeVRleHQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyYXZpdHlGb3JjZUxhYlNjcmVlblN1bW1hcnlOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgbm9kZSB0byBjb250cm9sIHRoZSBQRE9NIGNvbnRlbnQgZm9yIHRoZSBTY3JlZW4gU3VtbWFyeSBvZiB0aGUgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgQmFybG93IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgSW52ZXJzZVNxdWFyZUxhd0NvbW1vblN0cmluZ3MgZnJvbSAnLi4vLi4vLi4vaW52ZXJzZS1zcXVhcmUtbGF3LWNvbW1vbi9qcy9JbnZlcnNlU3F1YXJlTGF3Q29tbW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBncmF2aXR5Rm9yY2VMYWIgZnJvbSAnLi4vZ3Jhdml0eUZvcmNlTGFiLmpzJztcclxuaW1wb3J0IEdyYXZpdHlGb3JjZUxhYlN0cmluZ3MgZnJvbSAnLi4vR3Jhdml0eUZvcmNlTGFiU3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBzY3JlZW5TdW1tYXJ5UGxheUFyZWFPdmVydmlld1N0cmluZyA9IEdyYXZpdHlGb3JjZUxhYlN0cmluZ3MuYTExeS5zY3JlZW5TdW1tYXJ5LnBsYXlBcmVhT3ZlcnZpZXc7XHJcbmNvbnN0IHNjcmVlblN1bW1hcnlQbGF5QXJlYUNvbnRyb2xzU3RyaW5nID0gR3Jhdml0eUZvcmNlTGFiU3RyaW5ncy5hMTF5LnNjcmVlblN1bW1hcnkucGxheUFyZWFDb250cm9scztcclxuY29uc3Qgc2NyZWVuU3VtbWFyeVNlY29uZGFyeURlc2NyaXB0aW9uU3RyaW5nID0gR3Jhdml0eUZvcmNlTGFiU3RyaW5ncy5hMTF5LnNjcmVlblN1bW1hcnkuc2Vjb25kYXJ5RGVzY3JpcHRpb247XHJcbmNvbnN0IHNpbVN0YXRlTGlzdExhYmVsU3RyaW5nID0gR3Jhdml0eUZvcmNlTGFiU3RyaW5ncy5hMTF5LnNjcmVlblN1bW1hcnkuc2ltU3RhdGVMaXN0TGFiZWw7XHJcbmNvbnN0IG1hc3NTdHJpbmcgPSBHcmF2aXR5Rm9yY2VMYWJTdHJpbmdzLmExMXkubWFzcztcclxuXHJcbi8vIGltcG9ydCBmcm9tIElTTEMgc28gdGhhdCBjb3Vsb21icy1sYXcgY2FuIHVzZSBpdCB0b29cclxuY29uc3Qgc3VtbWFyeUludGVyYWN0aW9uSGludFBhdHRlcm5TdHJpbmcgPSBJbnZlcnNlU3F1YXJlTGF3Q29tbW9uU3RyaW5ncy5hMTF5LnNjcmVlblN1bW1hcnkuc3VtbWFyeUludGVyYWN0aW9uSGludFBhdHRlcm47XHJcblxyXG5jbGFzcyBHcmF2aXR5Rm9yY2VMYWJTY3JlZW5TdW1tYXJ5Tm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0lTTENNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge01hc3NEZXNjcmliZXJ9IG1hc3NEZXNjcmliZXJcclxuICAgKiBAcGFyYW0ge0dyYXZpdHlGb3JjZUxhYkZvcmNlRGVzY3JpYmVyfSBmb3JjZURlc2NyaWJlclxyXG4gICAqIEBwYXJhbSB7R3Jhdml0eUZvcmNlTGFiUG9zaXRpb25EZXNjcmliZXJ9IHBvc2l0aW9uRGVzY3JpYmVyXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgbWFzc0Rlc2NyaWJlciwgZm9yY2VEZXNjcmliZXIsIHBvc2l0aW9uRGVzY3JpYmVyLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8ge1Byb3BlcnR5W119IC0gYSB3YXkgdG8gcHJvdmlkZSBleHRyYSBQcm9wZXJ0aWVzIHRvIHRoYXQgd2lsbCB1cGRhdGUgdGhlIG1hc3MgYW5kIGRpc3RhbmNlIHN1bW1hcnkgc2VjdGlvbnNcclxuICAgICAgLy8gb24gY2hhbmdlXHJcbiAgICAgIGFkZGl0aW9uYWxNYXNzRGlzdGFuY2VQcm9wZXJ0aWVzOiBbXSxcclxuXHJcbiAgICAgIC8vIHtzdHJpbmd9XHJcbiAgICAgIHNjcmVlblN1bW1hcnlQbGF5QXJlYU92ZXJ2aWV3OiBzY3JlZW5TdW1tYXJ5UGxheUFyZWFPdmVydmlld1N0cmluZyxcclxuICAgICAgc2NyZWVuU3VtbWFyeVBsYXlBcmVhQ29udHJvbHM6IHNjcmVlblN1bW1hcnlQbGF5QXJlYUNvbnRyb2xzU3RyaW5nLFxyXG5cclxuICAgICAgLy8ge3N0cmluZ31cclxuICAgICAgc2Vjb25kYXJ5RGVzY3JpcHRpb25Db250ZW50OiBzY3JlZW5TdW1tYXJ5U2Vjb25kYXJ5RGVzY3JpcHRpb25TdHJpbmcsXHJcblxyXG4gICAgICAvLyB7c3RyaW5nfVxyXG4gICAgICBzaW1TdGF0ZUxhYmVsOiBzaW1TdGF0ZUxpc3RMYWJlbFN0cmluZ1xyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgLSBkZXNjcmliZXJzXHJcbiAgICB0aGlzLmZvcmNlRGVzY3JpYmVyID0gZm9yY2VEZXNjcmliZXI7XHJcbiAgICB0aGlzLnBvc2l0aW9uRGVzY3JpYmVyID0gcG9zaXRpb25EZXNjcmliZXI7XHJcbiAgICB0aGlzLm1hc3NEZXNjcmliZXIgPSBtYXNzRGVzY3JpYmVyO1xyXG5cclxuICAgIGNvbnN0IGxpT3B0aW9ucyA9IHsgdGFnTmFtZTogJ2xpJyB9O1xyXG5cclxuICAgIC8vIEBwcml2YXRlIC0gTm9kZXMgZm9yIFBET00gY29udGVudFxyXG4gICAgdGhpcy5mb3JjZVZlY3RvcnNTdW1tYXJ5SXRlbSA9IG5ldyBOb2RlKCBsaU9wdGlvbnMgKTtcclxuICAgIHRoaXMub2JqZWN0RGlzdGFuY2VTdW1tYXJ5SXRlbSA9IG5ldyBOb2RlKCBsaU9wdGlvbnMgKTtcclxuICAgIHRoaXMubWFzc1ZhbHVlc1N1bW1hcnlJdGVtID0gbmV3IE5vZGUoIGxpT3B0aW9ucyApO1xyXG4gICAgdGhpcy5yb2JvdHNTdW1tYXJ5SXRlbSA9IG5ldyBOb2RlKCBsaU9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBpbml0aWFsaXplIHRoZSBsaXN0IGNvbnRlbnRzXHJcbiAgICB0aGlzLnVwZGF0ZVNpbVN0YXRlTGlzdCgpO1xyXG5cclxuICAgIGNvbnN0IHNpbVN0YXRlTm9kZSA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIHRhZ05hbWU6ICd1bCcsXHJcbiAgICAgIGxhYmVsQ29udGVudDogb3B0aW9ucy5zaW1TdGF0ZUxhYmVsXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgc2NyZWVuU3VtbWFyeVBsYXlBcmVhT3ZlcnZpZXdOb2RlID0gbmV3IE5vZGUoIHtcclxuICAgICAgdGFnTmFtZTogJ3AnLFxyXG4gICAgICBpbm5lckNvbnRlbnQ6IG9wdGlvbnMuc2NyZWVuU3VtbWFyeVBsYXlBcmVhT3ZlcnZpZXdcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHNjcmVlblN1bW1hcnlQbGF5QXJlYUNvbnRyb2xzTm9kZSA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIHRhZ05hbWU6ICdwJyxcclxuICAgICAgaW5uZXJDb250ZW50OiBvcHRpb25zLnNjcmVlblN1bW1hcnlQbGF5QXJlYUNvbnRyb2xzXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBzZWNvbmRTdW1tYXJ5RGVzY3JpcHRpb25Ob2RlID0gbmV3IE5vZGUoIHtcclxuICAgICAgdGFnTmFtZTogJ3AnLFxyXG4gICAgICBpbm5lckNvbnRlbnQ6IG9wdGlvbnMuc2Vjb25kYXJ5RGVzY3JpcHRpb25Db250ZW50XHJcbiAgICB9ICk7XHJcblxyXG4gICAgc2ltU3RhdGVOb2RlLmNoaWxkcmVuID0gW1xyXG4gICAgICB0aGlzLmZvcmNlVmVjdG9yc1N1bW1hcnlJdGVtLFxyXG4gICAgICB0aGlzLm9iamVjdERpc3RhbmNlU3VtbWFyeUl0ZW0sXHJcbiAgICAgIHRoaXMubWFzc1ZhbHVlc1N1bW1hcnlJdGVtLFxyXG4gICAgICB0aGlzLnJvYm90c1N1bW1hcnlJdGVtXHJcbiAgICBdO1xyXG5cclxuICAgIGNvbnN0IGludGVyYWN0aW9uSGludE5vZGUgPSBuZXcgTm9kZSgge1xyXG4gICAgICB0YWdOYW1lOiAncCcsXHJcbiAgICAgIGlubmVyQ29udGVudDogU3RyaW5nVXRpbHMuZmlsbEluKFxyXG4gICAgICAgIHN1bW1hcnlJbnRlcmFjdGlvbkhpbnRQYXR0ZXJuU3RyaW5nLFxyXG4gICAgICAgIHsgbWFzc09yQ2hhcmdlOiBtYXNzU3RyaW5nIH1cclxuICAgICAgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuY2hpbGRyZW4gPSBbXHJcbiAgICAgIHNjcmVlblN1bW1hcnlQbGF5QXJlYU92ZXJ2aWV3Tm9kZSxcclxuICAgICAgc2NyZWVuU3VtbWFyeVBsYXlBcmVhQ29udHJvbHNOb2RlLFxyXG4gICAgICBzZWNvbmRTdW1tYXJ5RGVzY3JpcHRpb25Ob2RlLFxyXG4gICAgICBzaW1TdGF0ZU5vZGUsXHJcbiAgICAgIGludGVyYWN0aW9uSGludE5vZGVcclxuICAgIF07XHJcblxyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggWyBtb2RlbC5mb3JjZVByb3BlcnR5LCBtb2RlbC5zaG93Rm9yY2VWYWx1ZXNQcm9wZXJ0eSBdLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMudXBkYXRlRm9yY2VWZWN0b3JTdW1tYXJ5KCk7XHJcbiAgICAgIHRoaXMudXBkYXRlUm9ib3RFZmZvcnQoKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICBbIG1vZGVsLm9iamVjdDEucG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgICBtb2RlbC5vYmplY3QxLnZhbHVlUHJvcGVydHksXHJcbiAgICAgICAgbW9kZWwub2JqZWN0Mi5wb3NpdGlvblByb3BlcnR5LFxyXG4gICAgICAgIG1vZGVsLm9iamVjdDIudmFsdWVQcm9wZXJ0eSxcclxuICAgICAgICBtb2RlbC5jb25zdGFudFJhZGl1c1Byb3BlcnR5IC8vIG5vdCByZWFsbHkgbmVlZGVkLCBidXQgZm9yIGNvbXBsZXRlbmVzcyBpdCBpcyBnb29kIHRvIGhhdmUuXHJcbiAgICAgIF0uY29uY2F0KCBvcHRpb25zLmFkZGl0aW9uYWxNYXNzRGlzdGFuY2VQcm9wZXJ0aWVzICksXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICB0aGlzLnVwZGF0ZU9iamVjdERpc3RhbmNlU3VtbWFyeSgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTWFzc1ZhbHVlc1N1bW1hcnkoKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBtb2RlbC5mb3JjZVZhbHVlc0Rpc3BsYXlQcm9wZXJ0eSAmJiBtb2RlbC5mb3JjZVZhbHVlc0Rpc3BsYXlQcm9wZXJ0eS5saW5rKCAoKSA9PiB7XHJcbiAgICAgIHRoaXMudXBkYXRlRm9yY2VWZWN0b3JTdW1tYXJ5KCk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHJpdmF0ZVxyXG4gIHVwZGF0ZVNpbVN0YXRlTGlzdCgpIHtcclxuICAgIHRoaXMudXBkYXRlRm9yY2VWZWN0b3JTdW1tYXJ5KCk7XHJcbiAgICB0aGlzLnVwZGF0ZU9iamVjdERpc3RhbmNlU3VtbWFyeSgpO1xyXG4gICAgdGhpcy51cGRhdGVNYXNzVmFsdWVzU3VtbWFyeSgpO1xyXG4gICAgdGhpcy51cGRhdGVSb2JvdEVmZm9ydCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gQHByaXZhdGVcclxuICB1cGRhdGVGb3JjZVZlY3RvclN1bW1hcnkoKSB7XHJcbiAgICB0aGlzLmZvcmNlVmVjdG9yc1N1bW1hcnlJdGVtLmlubmVyQ29udGVudCA9IHRoaXMuZm9yY2VEZXNjcmliZXIuZ2V0Rm9yY2VWZWN0b3JzU3VtbWFyeVRleHQoKTtcclxuICB9XHJcblxyXG4gIC8vIEBwcml2YXRlXHJcbiAgdXBkYXRlT2JqZWN0RGlzdGFuY2VTdW1tYXJ5KCkge1xyXG4gICAgdGhpcy5vYmplY3REaXN0YW5jZVN1bW1hcnlJdGVtLmlubmVyQ29udGVudCA9IHRoaXMucG9zaXRpb25EZXNjcmliZXIuZ2V0T2JqZWN0RGlzdGFuY2VTdW1tYXJ5KCk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHJpdmF0ZVxyXG4gIHVwZGF0ZU1hc3NWYWx1ZXNTdW1tYXJ5KCkge1xyXG4gICAgdGhpcy5tYXNzVmFsdWVzU3VtbWFyeUl0ZW0uaW5uZXJDb250ZW50ID0gdGhpcy5tYXNzRGVzY3JpYmVyLmdldE1hc3NWYWx1ZXNTdW1tYXJ5VGV4dCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gQHByaXZhdGVcclxuICB1cGRhdGVSb2JvdEVmZm9ydCgpIHtcclxuICAgIHRoaXMucm9ib3RzU3VtbWFyeUl0ZW0uaW5uZXJDb250ZW50ID0gdGhpcy5mb3JjZURlc2NyaWJlci5nZXRSb2JvdEVmZm9ydFN1bW1hcnlUZXh0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmF2aXR5Rm9yY2VMYWIucmVnaXN0ZXIoICdHcmF2aXR5Rm9yY2VMYWJTY3JlZW5TdW1tYXJ5Tm9kZScsIEdyYXZpdHlGb3JjZUxhYlNjcmVlblN1bW1hcnlOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IEdyYXZpdHlGb3JjZUxhYlNjcmVlblN1bW1hcnlOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sK0JBQStCO0FBQ3JELE9BQU9DLDZCQUE2QixNQUFNLHdFQUF3RTtBQUNsSCxPQUFPQyxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFDcEUsU0FBU0MsSUFBSSxRQUFRLGdDQUFnQztBQUNyRCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUVqRSxNQUFNQyxtQ0FBbUMsR0FBR0Qsc0JBQXNCLENBQUNFLElBQUksQ0FBQ0MsYUFBYSxDQUFDQyxnQkFBZ0I7QUFDdEcsTUFBTUMsbUNBQW1DLEdBQUdMLHNCQUFzQixDQUFDRSxJQUFJLENBQUNDLGFBQWEsQ0FBQ0csZ0JBQWdCO0FBQ3RHLE1BQU1DLHVDQUF1QyxHQUFHUCxzQkFBc0IsQ0FBQ0UsSUFBSSxDQUFDQyxhQUFhLENBQUNLLG9CQUFvQjtBQUM5RyxN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