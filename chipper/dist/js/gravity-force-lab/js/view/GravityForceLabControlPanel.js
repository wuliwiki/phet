// Copyright 2019-2023, University of Colorado Boulder

/**
 * A Panel that has control UI for adjusting the sim. This includes radio buttons for the force values display, and a
 * checkbox for toggling constant radius.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import ISLCConstants from '../../../inverse-square-law-common/js/ISLCConstants.js';
import ISLCForceValuesDisplayControl from '../../../inverse-square-law-common/js/view/ISLCForceValuesDisplayControl.js';
import ISLCPanel from '../../../inverse-square-law-common/js/view/ISLCPanel.js';
import merge from '../../../phet-core/js/merge.js';
import { HSeparator, Text, VBox } from '../../../scenery/js/imports.js';
import Checkbox from '../../../sun/js/Checkbox.js';
import Tandem from '../../../tandem/js/Tandem.js';
import gravityForceLab from '../gravityForceLab.js';
import GravityForceLabStrings from '../GravityForceLabStrings.js';
const constantSizeString = GravityForceLabStrings.constantSize;
const constantSizeCheckboxHelpTextString = GravityForceLabStrings.a11y.controls.constantSizeCheckboxHelpText;

// constants
const CHECKBOX_TEXT_SIZE = 15;
class GravityForceLabControlPanel extends ISLCPanel {
  /**
   * @param {ISLCModel} model
   * @param {Options} options
   */
  constructor(model, options) {
    options = merge({
      tandem: Tandem.REQUIRED
    }, options);
    const forceValuesDisplayControl = new ISLCForceValuesDisplayControl(model.forceValuesDisplayProperty, {
      tandem: options.tandem.createTandem('forceValuesDisplayControl')
    });
    const constantSizeCheckboxTandem = options.tandem.createTandem('constantSizeCheckbox');
    const constantSizeText = new Text(constantSizeString, merge({}, ISLCConstants.UI_TEXT_OPTIONS, {
      tandem: constantSizeCheckboxTandem.createTandem('labelText')
    }));
    const constantSizeCheckbox = new Checkbox(model.constantRadiusProperty, constantSizeText, merge({}, ISLCConstants.CHECKBOX_OPTIONS, {
      tandem: constantSizeCheckboxTandem,
      accessibleName: constantSizeString,
      descriptionContent: constantSizeCheckboxHelpTextString,
      textSize: CHECKBOX_TEXT_SIZE,
      spacing: 4
    }));
    super(new VBox({
      children: [forceValuesDisplayControl, new HSeparator(), constantSizeCheckbox],
      spacing: 10,
      align: 'left'
    }), options);
  }
}
gravityForceLab.register('GravityForceLabControlPanel', GravityForceLabControlPanel);
export default GravityForceLabControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJU0xDQ29uc3RhbnRzIiwiSVNMQ0ZvcmNlVmFsdWVzRGlzcGxheUNvbnRyb2wiLCJJU0xDUGFuZWwiLCJtZXJnZSIsIkhTZXBhcmF0b3IiLCJUZXh0IiwiVkJveCIsIkNoZWNrYm94IiwiVGFuZGVtIiwiZ3Jhdml0eUZvcmNlTGFiIiwiR3Jhdml0eUZvcmNlTGFiU3RyaW5ncyIsImNvbnN0YW50U2l6ZVN0cmluZyIsImNvbnN0YW50U2l6ZSIsImNvbnN0YW50U2l6ZUNoZWNrYm94SGVscFRleHRTdHJpbmciLCJhMTF5IiwiY29udHJvbHMiLCJjb25zdGFudFNpemVDaGVja2JveEhlbHBUZXh0IiwiQ0hFQ0tCT1hfVEVYVF9TSVpFIiwiR3Jhdml0eUZvcmNlTGFiQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsImZvcmNlVmFsdWVzRGlzcGxheUNvbnRyb2wiLCJmb3JjZVZhbHVlc0Rpc3BsYXlQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsImNvbnN0YW50U2l6ZUNoZWNrYm94VGFuZGVtIiwiY29uc3RhbnRTaXplVGV4dCIsIlVJX1RFWFRfT1BUSU9OUyIsImNvbnN0YW50U2l6ZUNoZWNrYm94IiwiY29uc3RhbnRSYWRpdXNQcm9wZXJ0eSIsIkNIRUNLQk9YX09QVElPTlMiLCJhY2Nlc3NpYmxlTmFtZSIsImRlc2NyaXB0aW9uQ29udGVudCIsInRleHRTaXplIiwic3BhY2luZyIsImNoaWxkcmVuIiwiYWxpZ24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyYXZpdHlGb3JjZUxhYkNvbnRyb2xQYW5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIFBhbmVsIHRoYXQgaGFzIGNvbnRyb2wgVUkgZm9yIGFkanVzdGluZyB0aGUgc2ltLiBUaGlzIGluY2x1ZGVzIHJhZGlvIGJ1dHRvbnMgZm9yIHRoZSBmb3JjZSB2YWx1ZXMgZGlzcGxheSwgYW5kIGFcclxuICogY2hlY2tib3ggZm9yIHRvZ2dsaW5nIGNvbnN0YW50IHJhZGl1cy5cclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBJU0xDQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uL2ludmVyc2Utc3F1YXJlLWxhdy1jb21tb24vanMvSVNMQ0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBJU0xDRm9yY2VWYWx1ZXNEaXNwbGF5Q29udHJvbCBmcm9tICcuLi8uLi8uLi9pbnZlcnNlLXNxdWFyZS1sYXctY29tbW9uL2pzL3ZpZXcvSVNMQ0ZvcmNlVmFsdWVzRGlzcGxheUNvbnRyb2wuanMnO1xyXG5pbXBvcnQgSVNMQ1BhbmVsIGZyb20gJy4uLy4uLy4uL2ludmVyc2Utc3F1YXJlLWxhdy1jb21tb24vanMvdmlldy9JU0xDUGFuZWwuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgSFNlcGFyYXRvciwgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi8uLi9zdW4vanMvQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZ3Jhdml0eUZvcmNlTGFiIGZyb20gJy4uL2dyYXZpdHlGb3JjZUxhYi5qcyc7XHJcbmltcG9ydCBHcmF2aXR5Rm9yY2VMYWJTdHJpbmdzIGZyb20gJy4uL0dyYXZpdHlGb3JjZUxhYlN0cmluZ3MuanMnO1xyXG5cclxuY29uc3QgY29uc3RhbnRTaXplU3RyaW5nID0gR3Jhdml0eUZvcmNlTGFiU3RyaW5ncy5jb25zdGFudFNpemU7XHJcblxyXG5jb25zdCBjb25zdGFudFNpemVDaGVja2JveEhlbHBUZXh0U3RyaW5nID0gR3Jhdml0eUZvcmNlTGFiU3RyaW5ncy5hMTF5LmNvbnRyb2xzLmNvbnN0YW50U2l6ZUNoZWNrYm94SGVscFRleHQ7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQ0hFQ0tCT1hfVEVYVF9TSVpFID0gMTU7XHJcblxyXG5jbGFzcyBHcmF2aXR5Rm9yY2VMYWJDb250cm9sUGFuZWwgZXh0ZW5kcyBJU0xDUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0lTTENNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVEXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgZm9yY2VWYWx1ZXNEaXNwbGF5Q29udHJvbCA9IG5ldyBJU0xDRm9yY2VWYWx1ZXNEaXNwbGF5Q29udHJvbCggbW9kZWwuZm9yY2VWYWx1ZXNEaXNwbGF5UHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdmb3JjZVZhbHVlc0Rpc3BsYXlDb250cm9sJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgY29uc3RhbnRTaXplQ2hlY2tib3hUYW5kZW0gPSBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdjb25zdGFudFNpemVDaGVja2JveCcgKTtcclxuICAgIGNvbnN0IGNvbnN0YW50U2l6ZVRleHQgPSBuZXcgVGV4dCggY29uc3RhbnRTaXplU3RyaW5nLCBtZXJnZSgge30sIElTTENDb25zdGFudHMuVUlfVEVYVF9PUFRJT05TLCB7XHJcbiAgICAgIHRhbmRlbTogY29uc3RhbnRTaXplQ2hlY2tib3hUYW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxUZXh0JyApXHJcbiAgICB9ICkgKTtcclxuICAgIGNvbnN0IGNvbnN0YW50U2l6ZUNoZWNrYm94ID0gbmV3IENoZWNrYm94KCBtb2RlbC5jb25zdGFudFJhZGl1c1Byb3BlcnR5LCBjb25zdGFudFNpemVUZXh0LCBtZXJnZSgge30sIElTTENDb25zdGFudHMuQ0hFQ0tCT1hfT1BUSU9OUywge1xyXG4gICAgICB0YW5kZW06IGNvbnN0YW50U2l6ZUNoZWNrYm94VGFuZGVtLFxyXG4gICAgICBhY2Nlc3NpYmxlTmFtZTogY29uc3RhbnRTaXplU3RyaW5nLFxyXG4gICAgICBkZXNjcmlwdGlvbkNvbnRlbnQ6IGNvbnN0YW50U2l6ZUNoZWNrYm94SGVscFRleHRTdHJpbmcsXHJcbiAgICAgIHRleHRTaXplOiBDSEVDS0JPWF9URVhUX1NJWkUsXHJcbiAgICAgIHNwYWNpbmc6IDRcclxuICAgIH0gKSApO1xyXG5cclxuICAgIHN1cGVyKCBuZXcgVkJveCgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIGZvcmNlVmFsdWVzRGlzcGxheUNvbnRyb2wsXHJcbiAgICAgICAgbmV3IEhTZXBhcmF0b3IoKSxcclxuICAgICAgICBjb25zdGFudFNpemVDaGVja2JveFxyXG4gICAgICBdLFxyXG4gICAgICBzcGFjaW5nOiAxMCxcclxuICAgICAgYWxpZ246ICdsZWZ0J1xyXG4gICAgfSApLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmF2aXR5Rm9yY2VMYWIucmVnaXN0ZXIoICdHcmF2aXR5Rm9yY2VMYWJDb250cm9sUGFuZWwnLCBHcmF2aXR5Rm9yY2VMYWJDb250cm9sUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgR3Jhdml0eUZvcmNlTGFiQ29udHJvbFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBTSx3REFBd0Q7QUFDbEYsT0FBT0MsNkJBQTZCLE1BQU0sNkVBQTZFO0FBQ3ZILE9BQU9DLFNBQVMsTUFBTSx5REFBeUQ7QUFDL0UsT0FBT0MsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxTQUFTQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLGdDQUFnQztBQUN2RSxPQUFPQyxRQUFRLE1BQU0sNkJBQTZCO0FBQ2xELE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxzQkFBc0IsTUFBTSw4QkFBOEI7QUFFakUsTUFBTUMsa0JBQWtCLEdBQUdELHNCQUFzQixDQUFDRSxZQUFZO0FBRTlELE1BQU1DLGtDQUFrQyxHQUFHSCxzQkFBc0IsQ0FBQ0ksSUFBSSxDQUFDQyxRQUFRLENBQUNDLDRCQUE0Qjs7QUFFNUc7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxFQUFFO0FBRTdCLE1BQU1DLDJCQUEyQixTQUFTaEIsU0FBUyxDQUFDO0VBRWxEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VpQixXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRztJQUU1QkEsT0FBTyxHQUFHbEIsS0FBSyxDQUFFO01BQ2ZtQixNQUFNLEVBQUVkLE1BQU0sQ0FBQ2U7SUFDakIsQ0FBQyxFQUFFRixPQUFRLENBQUM7SUFFWixNQUFNRyx5QkFBeUIsR0FBRyxJQUFJdkIsNkJBQTZCLENBQUVtQixLQUFLLENBQUNLLDBCQUEwQixFQUFFO01BQ3JHSCxNQUFNLEVBQUVELE9BQU8sQ0FBQ0MsTUFBTSxDQUFDSSxZQUFZLENBQUUsMkJBQTRCO0lBQ25FLENBQUUsQ0FBQztJQUVILE1BQU1DLDBCQUEwQixHQUFHTixPQUFPLENBQUNDLE1BQU0sQ0FBQ0ksWUFBWSxDQUFFLHNCQUF1QixDQUFDO0lBQ3hGLE1BQU1FLGdCQUFnQixHQUFHLElBQUl2QixJQUFJLENBQUVNLGtCQUFrQixFQUFFUixLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUVILGFBQWEsQ0FBQzZCLGVBQWUsRUFBRTtNQUMvRlAsTUFBTSxFQUFFSywwQkFBMEIsQ0FBQ0QsWUFBWSxDQUFFLFdBQVk7SUFDL0QsQ0FBRSxDQUFFLENBQUM7SUFDTCxNQUFNSSxvQkFBb0IsR0FBRyxJQUFJdkIsUUFBUSxDQUFFYSxLQUFLLENBQUNXLHNCQUFzQixFQUFFSCxnQkFBZ0IsRUFBRXpCLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRUgsYUFBYSxDQUFDZ0MsZ0JBQWdCLEVBQUU7TUFDcElWLE1BQU0sRUFBRUssMEJBQTBCO01BQ2xDTSxjQUFjLEVBQUV0QixrQkFBa0I7TUFDbEN1QixrQkFBa0IsRUFBRXJCLGtDQUFrQztNQUN0RHNCLFFBQVEsRUFBRWxCLGtCQUFrQjtNQUM1Qm1CLE9BQU8sRUFBRTtJQUNYLENBQUUsQ0FBRSxDQUFDO0lBRUwsS0FBSyxDQUFFLElBQUk5QixJQUFJLENBQUU7TUFDZitCLFFBQVEsRUFBRSxDQUNSYix5QkFBeUIsRUFDekIsSUFBSXBCLFVBQVUsQ0FBQyxDQUFDLEVBQ2hCMEIsb0JBQW9CLENBQ3JCO01BQ0RNLE9BQU8sRUFBRSxFQUFFO01BQ1hFLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQyxFQUFFakIsT0FBUSxDQUFDO0VBQ2hCO0FBQ0Y7QUFFQVosZUFBZSxDQUFDOEIsUUFBUSxDQUFFLDZCQUE2QixFQUFFckIsMkJBQTRCLENBQUM7QUFDdEYsZUFBZUEsMkJBQTJCIn0=