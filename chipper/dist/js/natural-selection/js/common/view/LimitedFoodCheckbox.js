// Copyright 2019-2022, University of Colorado Boulder

/**
 * LimitedFoodCheckbox is a checkbox for enabling the 'Limited Food' environmental factor.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Text } from '../../../../scenery/js/imports.js';
import naturalSelection from '../../naturalSelection.js';
import NaturalSelectionStrings from '../../NaturalSelectionStrings.js';
import NaturalSelectionColors from '../NaturalSelectionColors.js';
import NaturalSelectionConstants from '../NaturalSelectionConstants.js';
import EnvironmentalFactorCheckbox from './EnvironmentalFactorCheckbox.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class LimitedFoodCheckbox extends EnvironmentalFactorCheckbox {
  constructor(limitedFoodProperty, alignGroup, providedOptions) {
    const options = optionize()({
      // EnvironmentalFactorCheckboxOptions
      clockSliceRange: NaturalSelectionConstants.CLOCK_FOOD_RANGE,
      clockSliceColor: NaturalSelectionColors.CLOCK_FOOD_SLICE_COLOR
    }, providedOptions);
    const labelText = new Text(NaturalSelectionStrings.limitedFoodStringProperty, {
      font: NaturalSelectionConstants.CHECKBOX_FONT,
      maxWidth: 90,
      // determined empirically
      tandem: options.tandem.createTandem('labelText')
    });
    super(limitedFoodProperty, labelText, alignGroup, options);
  }
}
naturalSelection.register('LimitedFoodCheckbox', LimitedFoodCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwibmF0dXJhbFNlbGVjdGlvbiIsIk5hdHVyYWxTZWxlY3Rpb25TdHJpbmdzIiwiTmF0dXJhbFNlbGVjdGlvbkNvbG9ycyIsIk5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMiLCJFbnZpcm9ubWVudGFsRmFjdG9yQ2hlY2tib3giLCJvcHRpb25pemUiLCJMaW1pdGVkRm9vZENoZWNrYm94IiwiY29uc3RydWN0b3IiLCJsaW1pdGVkRm9vZFByb3BlcnR5IiwiYWxpZ25Hcm91cCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjbG9ja1NsaWNlUmFuZ2UiLCJDTE9DS19GT09EX1JBTkdFIiwiY2xvY2tTbGljZUNvbG9yIiwiQ0xPQ0tfRk9PRF9TTElDRV9DT0xPUiIsImxhYmVsVGV4dCIsImxpbWl0ZWRGb29kU3RyaW5nUHJvcGVydHkiLCJmb250IiwiQ0hFQ0tCT1hfRk9OVCIsIm1heFdpZHRoIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMaW1pdGVkRm9vZENoZWNrYm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExpbWl0ZWRGb29kQ2hlY2tib3ggaXMgYSBjaGVja2JveCBmb3IgZW5hYmxpbmcgdGhlICdMaW1pdGVkIEZvb2QnIGVudmlyb25tZW50YWwgZmFjdG9yLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFsaWduR3JvdXAsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbmF0dXJhbFNlbGVjdGlvbiBmcm9tICcuLi8uLi9uYXR1cmFsU2VsZWN0aW9uLmpzJztcclxuaW1wb3J0IE5hdHVyYWxTZWxlY3Rpb25TdHJpbmdzIGZyb20gJy4uLy4uL05hdHVyYWxTZWxlY3Rpb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IE5hdHVyYWxTZWxlY3Rpb25Db2xvcnMgZnJvbSAnLi4vTmF0dXJhbFNlbGVjdGlvbkNvbG9ycy5qcyc7XHJcbmltcG9ydCBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzIGZyb20gJy4uL05hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgRW52aXJvbm1lbnRhbEZhY3RvckNoZWNrYm94LCB7IEVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveE9wdGlvbnMgfSBmcm9tICcuL0Vudmlyb25tZW50YWxGYWN0b3JDaGVja2JveC5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgTGltaXRlZEZvb2RDaGVja2JveE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxFbnZpcm9ubWVudGFsRmFjdG9yQ2hlY2tib3hPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaW1pdGVkRm9vZENoZWNrYm94IGV4dGVuZHMgRW52aXJvbm1lbnRhbEZhY3RvckNoZWNrYm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsaW1pdGVkRm9vZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgYWxpZ25Hcm91cDogQWxpZ25Hcm91cCwgcHJvdmlkZWRPcHRpb25zOiBMaW1pdGVkRm9vZENoZWNrYm94T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPExpbWl0ZWRGb29kQ2hlY2tib3hPcHRpb25zLCBTZWxmT3B0aW9ucywgRW52aXJvbm1lbnRhbEZhY3RvckNoZWNrYm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gRW52aXJvbm1lbnRhbEZhY3RvckNoZWNrYm94T3B0aW9uc1xyXG4gICAgICBjbG9ja1NsaWNlUmFuZ2U6IE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuQ0xPQ0tfRk9PRF9SQU5HRSxcclxuICAgICAgY2xvY2tTbGljZUNvbG9yOiBOYXR1cmFsU2VsZWN0aW9uQ29sb3JzLkNMT0NLX0ZPT0RfU0xJQ0VfQ09MT1JcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGxhYmVsVGV4dCA9IG5ldyBUZXh0KCBOYXR1cmFsU2VsZWN0aW9uU3RyaW5ncy5saW1pdGVkRm9vZFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuQ0hFQ0tCT1hfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDkwLCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxUZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGxpbWl0ZWRGb29kUHJvcGVydHksIGxhYmVsVGV4dCwgYWxpZ25Hcm91cCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubmF0dXJhbFNlbGVjdGlvbi5yZWdpc3RlciggJ0xpbWl0ZWRGb29kQ2hlY2tib3gnLCBMaW1pdGVkRm9vZENoZWNrYm94ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQXFCQSxJQUFJLFFBQVEsbUNBQW1DO0FBQ3BFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsT0FBT0Msc0JBQXNCLE1BQU0sOEJBQThCO0FBQ2pFLE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQywyQkFBMkIsTUFBOEMsa0NBQWtDO0FBRWxILE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBT25GLGVBQWUsTUFBTUMsbUJBQW1CLFNBQVNGLDJCQUEyQixDQUFDO0VBRXBFRyxXQUFXQSxDQUFFQyxtQkFBc0MsRUFBRUMsVUFBc0IsRUFBRUMsZUFBMkMsRUFBRztJQUVoSSxNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBOEUsQ0FBQyxDQUFFO01BRXhHO01BQ0FPLGVBQWUsRUFBRVQseUJBQXlCLENBQUNVLGdCQUFnQjtNQUMzREMsZUFBZSxFQUFFWixzQkFBc0IsQ0FBQ2E7SUFDMUMsQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCLE1BQU1NLFNBQVMsR0FBRyxJQUFJakIsSUFBSSxDQUFFRSx1QkFBdUIsQ0FBQ2dCLHlCQUF5QixFQUFFO01BQzdFQyxJQUFJLEVBQUVmLHlCQUF5QixDQUFDZ0IsYUFBYTtNQUM3Q0MsUUFBUSxFQUFFLEVBQUU7TUFBRTtNQUNkQyxNQUFNLEVBQUVWLE9BQU8sQ0FBQ1UsTUFBTSxDQUFDQyxZQUFZLENBQUUsV0FBWTtJQUNuRCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVkLG1CQUFtQixFQUFFUSxTQUFTLEVBQUVQLFVBQVUsRUFBRUUsT0FBUSxDQUFDO0VBQzlEO0FBQ0Y7QUFFQVgsZ0JBQWdCLENBQUN1QixRQUFRLENBQUUscUJBQXFCLEVBQUVqQixtQkFBb0IsQ0FBQyJ9