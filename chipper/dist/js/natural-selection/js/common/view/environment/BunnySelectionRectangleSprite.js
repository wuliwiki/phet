// Copyright 2020-2022, University of Colorado Boulder

/**
 * BunnySelectionRectangleSprite is the sprite for the bunny selection rectangle.
 * It looks the same as the selection rectangle in the Pedigree graph.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Bounds2 from '../../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../../dot/js/Vector2.js';
import { Sprite, SpriteImage } from '../../../../../scenery/js/imports.js';
import naturalSelection from '../../../naturalSelection.js';
import BunnySelectionRectangle from '../BunnySelectionRectangle.js';

// constants
const SELECTION_RECTANGLE_DILATION = 8;
export default class BunnySelectionRectangleSprite extends Sprite {
  /**
   * @param maxImage - the largest bunny image
   */
  constructor(maxImage) {
    assert && assert(maxImage.width > 0 && maxImage.height > 0, 'maxImage does not have valid dimensions');

    // Make the selection rectangle a little larger than the bunny image
    const selectionRectangleBounds = new Bounds2(0, 0, maxImage.width, maxImage.height).dilated(SELECTION_RECTANGLE_DILATION);
    const selectionRectangle = new BunnySelectionRectangle(selectionRectangleBounds, {
      lineWidth: 5 // determined empirically, to match the lineWidth in Pedigree graph
    });

    // Convert to {HTMLCanvasElement}, as required by Sprite
    let selectionRectangleSpriteImage;
    selectionRectangle.toCanvas(canvas => {
      const offset = new Vector2(selectionRectangleBounds.width / 2, selectionRectangleBounds.height - SELECTION_RECTANGLE_DILATION);
      selectionRectangleSpriteImage = new SpriteImage(canvas, offset, {
        pickable: false
      });
    });
    super(selectionRectangleSpriteImage);
  }
}
naturalSelection.register('BunnySelectionRectangleSprite', BunnySelectionRectangleSprite);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiVmVjdG9yMiIsIlNwcml0ZSIsIlNwcml0ZUltYWdlIiwibmF0dXJhbFNlbGVjdGlvbiIsIkJ1bm55U2VsZWN0aW9uUmVjdGFuZ2xlIiwiU0VMRUNUSU9OX1JFQ1RBTkdMRV9ESUxBVElPTiIsIkJ1bm55U2VsZWN0aW9uUmVjdGFuZ2xlU3ByaXRlIiwiY29uc3RydWN0b3IiLCJtYXhJbWFnZSIsImFzc2VydCIsIndpZHRoIiwiaGVpZ2h0Iiwic2VsZWN0aW9uUmVjdGFuZ2xlQm91bmRzIiwiZGlsYXRlZCIsInNlbGVjdGlvblJlY3RhbmdsZSIsImxpbmVXaWR0aCIsInNlbGVjdGlvblJlY3RhbmdsZVNwcml0ZUltYWdlIiwidG9DYW52YXMiLCJjYW52YXMiLCJvZmZzZXQiLCJwaWNrYWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQnVubnlTZWxlY3Rpb25SZWN0YW5nbGVTcHJpdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQnVubnlTZWxlY3Rpb25SZWN0YW5nbGVTcHJpdGUgaXMgdGhlIHNwcml0ZSBmb3IgdGhlIGJ1bm55IHNlbGVjdGlvbiByZWN0YW5nbGUuXHJcbiAqIEl0IGxvb2tzIHRoZSBzYW1lIGFzIHRoZSBzZWxlY3Rpb24gcmVjdGFuZ2xlIGluIHRoZSBQZWRpZ3JlZSBncmFwaC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU3ByaXRlLCBTcHJpdGVJbWFnZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5pbXBvcnQgQnVubnlTZWxlY3Rpb25SZWN0YW5nbGUgZnJvbSAnLi4vQnVubnlTZWxlY3Rpb25SZWN0YW5nbGUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFNFTEVDVElPTl9SRUNUQU5HTEVfRElMQVRJT04gPSA4O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVubnlTZWxlY3Rpb25SZWN0YW5nbGVTcHJpdGUgZXh0ZW5kcyBTcHJpdGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gbWF4SW1hZ2UgLSB0aGUgbGFyZ2VzdCBidW5ueSBpbWFnZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbWF4SW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbWF4SW1hZ2Uud2lkdGggPiAwICYmIG1heEltYWdlLmhlaWdodCA+IDAsICdtYXhJbWFnZSBkb2VzIG5vdCBoYXZlIHZhbGlkIGRpbWVuc2lvbnMnICk7XHJcblxyXG4gICAgLy8gTWFrZSB0aGUgc2VsZWN0aW9uIHJlY3RhbmdsZSBhIGxpdHRsZSBsYXJnZXIgdGhhbiB0aGUgYnVubnkgaW1hZ2VcclxuICAgIGNvbnN0IHNlbGVjdGlvblJlY3RhbmdsZUJvdW5kcyA9IG5ldyBCb3VuZHMyKCAwLCAwLCBtYXhJbWFnZS53aWR0aCwgbWF4SW1hZ2UuaGVpZ2h0IClcclxuICAgICAgLmRpbGF0ZWQoIFNFTEVDVElPTl9SRUNUQU5HTEVfRElMQVRJT04gKTtcclxuXHJcbiAgICBjb25zdCBzZWxlY3Rpb25SZWN0YW5nbGUgPSBuZXcgQnVubnlTZWxlY3Rpb25SZWN0YW5nbGUoIHNlbGVjdGlvblJlY3RhbmdsZUJvdW5kcywge1xyXG4gICAgICBsaW5lV2lkdGg6IDUgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseSwgdG8gbWF0Y2ggdGhlIGxpbmVXaWR0aCBpbiBQZWRpZ3JlZSBncmFwaFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENvbnZlcnQgdG8ge0hUTUxDYW52YXNFbGVtZW50fSwgYXMgcmVxdWlyZWQgYnkgU3ByaXRlXHJcbiAgICBsZXQgc2VsZWN0aW9uUmVjdGFuZ2xlU3ByaXRlSW1hZ2U6IFNwcml0ZUltYWdlO1xyXG4gICAgc2VsZWN0aW9uUmVjdGFuZ2xlLnRvQ2FudmFzKCBjYW52YXMgPT4ge1xyXG4gICAgICBjb25zdCBvZmZzZXQgPSBuZXcgVmVjdG9yMiggc2VsZWN0aW9uUmVjdGFuZ2xlQm91bmRzLndpZHRoIC8gMiwgc2VsZWN0aW9uUmVjdGFuZ2xlQm91bmRzLmhlaWdodCAtIFNFTEVDVElPTl9SRUNUQU5HTEVfRElMQVRJT04gKTtcclxuICAgICAgc2VsZWN0aW9uUmVjdGFuZ2xlU3ByaXRlSW1hZ2UgPSBuZXcgU3ByaXRlSW1hZ2UoIGNhbnZhcywgb2Zmc2V0LCB7IHBpY2thYmxlOiBmYWxzZSB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHNlbGVjdGlvblJlY3RhbmdsZVNwcml0ZUltYWdlISApO1xyXG4gIH1cclxufVxyXG5cclxubmF0dXJhbFNlbGVjdGlvbi5yZWdpc3RlciggJ0J1bm55U2VsZWN0aW9uUmVjdGFuZ2xlU3ByaXRlJywgQnVubnlTZWxlY3Rpb25SZWN0YW5nbGVTcHJpdGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sa0NBQWtDO0FBQ3RELE9BQU9DLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsU0FBU0MsTUFBTSxFQUFFQyxXQUFXLFFBQVEsc0NBQXNDO0FBQzFFLE9BQU9DLGdCQUFnQixNQUFNLDhCQUE4QjtBQUMzRCxPQUFPQyx1QkFBdUIsTUFBTSwrQkFBK0I7O0FBRW5FO0FBQ0EsTUFBTUMsNEJBQTRCLEdBQUcsQ0FBQztBQUV0QyxlQUFlLE1BQU1DLDZCQUE2QixTQUFTTCxNQUFNLENBQUM7RUFFaEU7QUFDRjtBQUNBO0VBQ1NNLFdBQVdBLENBQUVDLFFBQTBCLEVBQUc7SUFFL0NDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxRQUFRLENBQUNFLEtBQUssR0FBRyxDQUFDLElBQUlGLFFBQVEsQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRSx5Q0FBMEMsQ0FBQzs7SUFFeEc7SUFDQSxNQUFNQyx3QkFBd0IsR0FBRyxJQUFJYixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVMsUUFBUSxDQUFDRSxLQUFLLEVBQUVGLFFBQVEsQ0FBQ0csTUFBTyxDQUFDLENBQ2xGRSxPQUFPLENBQUVSLDRCQUE2QixDQUFDO0lBRTFDLE1BQU1TLGtCQUFrQixHQUFHLElBQUlWLHVCQUF1QixDQUFFUSx3QkFBd0IsRUFBRTtNQUNoRkcsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNmLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUlDLDZCQUEwQztJQUM5Q0Ysa0JBQWtCLENBQUNHLFFBQVEsQ0FBRUMsTUFBTSxJQUFJO01BQ3JDLE1BQU1DLE1BQU0sR0FBRyxJQUFJbkIsT0FBTyxDQUFFWSx3QkFBd0IsQ0FBQ0YsS0FBSyxHQUFHLENBQUMsRUFBRUUsd0JBQXdCLENBQUNELE1BQU0sR0FBR04sNEJBQTZCLENBQUM7TUFDaElXLDZCQUE2QixHQUFHLElBQUlkLFdBQVcsQ0FBRWdCLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQUVDLFFBQVEsRUFBRTtNQUFNLENBQUUsQ0FBQztJQUN4RixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVKLDZCQUErQixDQUFDO0VBQ3pDO0FBQ0Y7QUFFQWIsZ0JBQWdCLENBQUNrQixRQUFRLENBQUUsK0JBQStCLEVBQUVmLDZCQUE4QixDQUFDIn0=