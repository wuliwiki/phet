// Copyright 2020-2022, University of Colorado Boulder

/*
 * FastForwardButton is the fast-forward button. To make the sim run faster, press and hold this button.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import TimeSpeed from '../../../../scenery-phet/js/TimeSpeed.js';
import { Path } from '../../../../scenery/js/imports.js';
import RoundMomentaryButton from '../../../../sun/js/buttons/RoundMomentaryButton.js';
import naturalSelection from '../../naturalSelection.js';
export default class FastForwardButton extends RoundMomentaryButton {
  constructor(timeSpeedProperty, providedOptions) {
    const options = optionize()({
      // RoundMomentaryButtonOptions
      radius: 16,
      xMargin: 8,
      yMargin: 8
    }, providedOptions);
    const radius = options.radius;
    assert && assert(radius !== null);

    // Two right-pointing arrow heads, drawn clockwise from the top-left corner.
    const fastForwardShape = new Shape().moveTo(0, 0).lineTo(radius / 2, radius / 2).lineTo(radius / 2, 0).lineTo(radius, radius / 2).lineTo(radius / 2, radius).lineTo(radius / 2, radius / 2).lineTo(0, radius).close();
    options.content = new Path(fastForwardShape, {
      fill: 'black'
    });
    super(timeSpeedProperty, TimeSpeed.NORMAL, TimeSpeed.FAST, options);
    this.fastForwardButtonModel = this.buttonModel;
    this.addLinkedElement(timeSpeedProperty, {
      tandem: options.tandem.createTandem('timeSpeedProperty')
    });
  }
}
naturalSelection.register('FastForwardButton', FastForwardButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIlRpbWVTcGVlZCIsIlBhdGgiLCJSb3VuZE1vbWVudGFyeUJ1dHRvbiIsIm5hdHVyYWxTZWxlY3Rpb24iLCJGYXN0Rm9yd2FyZEJ1dHRvbiIsImNvbnN0cnVjdG9yIiwidGltZVNwZWVkUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicmFkaXVzIiwieE1hcmdpbiIsInlNYXJnaW4iLCJhc3NlcnQiLCJmYXN0Rm9yd2FyZFNoYXBlIiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2UiLCJjb250ZW50IiwiZmlsbCIsIk5PUk1BTCIsIkZBU1QiLCJmYXN0Rm9yd2FyZEJ1dHRvbk1vZGVsIiwiYnV0dG9uTW9kZWwiLCJhZGRMaW5rZWRFbGVtZW50IiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGYXN0Rm9yd2FyZEJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qXHJcbiAqIEZhc3RGb3J3YXJkQnV0dG9uIGlzIHRoZSBmYXN0LWZvcndhcmQgYnV0dG9uLiBUbyBtYWtlIHRoZSBzaW0gcnVuIGZhc3RlciwgcHJlc3MgYW5kIGhvbGQgdGhpcyBidXR0b24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgVGltZVNwZWVkIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9UaW1lU3BlZWQuanMnO1xyXG5pbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEJ1dHRvbk1vZGVsIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL0J1dHRvbk1vZGVsLmpzJztcclxuaW1wb3J0IFJvdW5kTW9tZW50YXJ5QnV0dG9uLCB7IFJvdW5kTW9tZW50YXJ5QnV0dG9uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JvdW5kTW9tZW50YXJ5QnV0dG9uLmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgRmFzdEZvcndhcmRCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJlxyXG4gIFN0cmljdE9taXQ8Um91bmRNb21lbnRhcnlCdXR0b25PcHRpb25zLCAnY29udGVudCc+ICZcclxuICBQaWNrUmVxdWlyZWQ8Um91bmRNb21lbnRhcnlCdXR0b25PcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGYXN0Rm9yd2FyZEJ1dHRvbiBleHRlbmRzIFJvdW5kTW9tZW50YXJ5QnV0dG9uPFRpbWVTcGVlZD4ge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgZmFzdEZvcndhcmRCdXR0b25Nb2RlbDogQnV0dG9uTW9kZWw7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGltZVNwZWVkUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8VGltZVNwZWVkPiwgcHJvdmlkZWRPcHRpb25zOiBGYXN0Rm9yd2FyZEJ1dHRvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxGYXN0Rm9yd2FyZEJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSb3VuZE1vbWVudGFyeUJ1dHRvbk9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFJvdW5kTW9tZW50YXJ5QnV0dG9uT3B0aW9uc1xyXG4gICAgICByYWRpdXM6IDE2LFxyXG4gICAgICB4TWFyZ2luOiA4LFxyXG4gICAgICB5TWFyZ2luOiA4XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyE7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCByYWRpdXMgIT09IG51bGwgKTtcclxuXHJcbiAgICAvLyBUd28gcmlnaHQtcG9pbnRpbmcgYXJyb3cgaGVhZHMsIGRyYXduIGNsb2Nrd2lzZSBmcm9tIHRoZSB0b3AtbGVmdCBjb3JuZXIuXHJcbiAgICBjb25zdCBmYXN0Rm9yd2FyZFNoYXBlID0gbmV3IFNoYXBlKClcclxuICAgICAgLm1vdmVUbyggMCwgMCApXHJcbiAgICAgIC5saW5lVG8oIHJhZGl1cyAvIDIsIHJhZGl1cyAvIDIgKVxyXG4gICAgICAubGluZVRvKCByYWRpdXMgLyAyLCAwIClcclxuICAgICAgLmxpbmVUbyggcmFkaXVzLCByYWRpdXMgLyAyIClcclxuICAgICAgLmxpbmVUbyggcmFkaXVzIC8gMiwgcmFkaXVzIClcclxuICAgICAgLmxpbmVUbyggcmFkaXVzIC8gMiwgcmFkaXVzIC8gMiApXHJcbiAgICAgIC5saW5lVG8oIDAsIHJhZGl1cyApXHJcbiAgICAgIC5jbG9zZSgpO1xyXG5cclxuICAgIG9wdGlvbnMuY29udGVudCA9IG5ldyBQYXRoKCBmYXN0Rm9yd2FyZFNoYXBlLCB7XHJcbiAgICAgIGZpbGw6ICdibGFjaydcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggdGltZVNwZWVkUHJvcGVydHksIFRpbWVTcGVlZC5OT1JNQUwsIFRpbWVTcGVlZC5GQVNULCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5mYXN0Rm9yd2FyZEJ1dHRvbk1vZGVsID0gdGhpcy5idXR0b25Nb2RlbDtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIHRpbWVTcGVlZFByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndGltZVNwZWVkUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdGYXN0Rm9yd2FyZEJ1dHRvbicsIEZhc3RGb3J3YXJkQnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFHbkYsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBRXhELE9BQU9DLG9CQUFvQixNQUF1QyxvREFBb0Q7QUFDdEgsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBUXhELGVBQWUsTUFBTUMsaUJBQWlCLFNBQVNGLG9CQUFvQixDQUFZO0VBSXRFRyxXQUFXQSxDQUFFQyxpQkFBaUQsRUFBRUMsZUFBeUMsRUFBRztJQUVqSCxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBcUUsQ0FBQyxDQUFFO01BRS9GO01BQ0FVLE1BQU0sRUFBRSxFQUFFO01BQ1ZDLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLE9BQU8sRUFBRTtJQUNYLENBQUMsRUFBRUosZUFBZ0IsQ0FBQztJQUVwQixNQUFNRSxNQUFNLEdBQUdELE9BQU8sQ0FBQ0MsTUFBTztJQUM5QkcsTUFBTSxJQUFJQSxNQUFNLENBQUVILE1BQU0sS0FBSyxJQUFLLENBQUM7O0lBRW5DO0lBQ0EsTUFBTUksZ0JBQWdCLEdBQUcsSUFBSWYsS0FBSyxDQUFDLENBQUMsQ0FDakNnQixNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUNkQyxNQUFNLENBQUVOLE1BQU0sR0FBRyxDQUFDLEVBQUVBLE1BQU0sR0FBRyxDQUFFLENBQUMsQ0FDaENNLE1BQU0sQ0FBRU4sTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FDdkJNLE1BQU0sQ0FBRU4sTUFBTSxFQUFFQSxNQUFNLEdBQUcsQ0FBRSxDQUFDLENBQzVCTSxNQUFNLENBQUVOLE1BQU0sR0FBRyxDQUFDLEVBQUVBLE1BQU8sQ0FBQyxDQUM1Qk0sTUFBTSxDQUFFTixNQUFNLEdBQUcsQ0FBQyxFQUFFQSxNQUFNLEdBQUcsQ0FBRSxDQUFDLENBQ2hDTSxNQUFNLENBQUUsQ0FBQyxFQUFFTixNQUFPLENBQUMsQ0FDbkJPLEtBQUssQ0FBQyxDQUFDO0lBRVZSLE9BQU8sQ0FBQ1MsT0FBTyxHQUFHLElBQUloQixJQUFJLENBQUVZLGdCQUFnQixFQUFFO01BQzVDSyxJQUFJLEVBQUU7SUFDUixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVaLGlCQUFpQixFQUFFTixTQUFTLENBQUNtQixNQUFNLEVBQUVuQixTQUFTLENBQUNvQixJQUFJLEVBQUVaLE9BQVEsQ0FBQztJQUVyRSxJQUFJLENBQUNhLHNCQUFzQixHQUFHLElBQUksQ0FBQ0MsV0FBVztJQUU5QyxJQUFJLENBQUNDLGdCQUFnQixDQUFFakIsaUJBQWlCLEVBQUU7TUFDeENrQixNQUFNLEVBQUVoQixPQUFPLENBQUNnQixNQUFNLENBQUNDLFlBQVksQ0FBRSxtQkFBb0I7SUFDM0QsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBdEIsZ0JBQWdCLENBQUN1QixRQUFRLENBQUUsbUJBQW1CLEVBQUV0QixpQkFBa0IsQ0FBQyJ9