// Copyright 2019-2022, University of Colorado Boulder

/**
 * ProportionsLegendNode displays the legend in the control panel for the Proportions graph.
 * It shows the color-coding and fill styles used for each allele.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { optionize4 } from '../../../../../phet-core/js/optionize.js';
import { HBox, Rectangle, Text, VBox } from '../../../../../scenery/js/imports.js';
import naturalSelection from '../../../naturalSelection.js';
import NaturalSelectionConstants from '../../NaturalSelectionConstants.js';
import HatchingRectangle from '../HatchingRectangle.js';

// constants
const RECTANGLE_WIDTH = 25;
const RECTANGLE_HEIGHT = 15;
export default class ProportionsLegendNode extends VBox {
  constructor(genePool, providedOptions) {
    const options = optionize4()({}, NaturalSelectionConstants.VBOX_OPTIONS, {
      // VBoxOptions
      align: 'left',
      spacing: 25
    }, providedOptions);

    // A legend for each gene
    const legendNodes = _.map(genePool.genes, gene => new GeneLegendNode(gene, {
      tandem: options.tandem.createTandem(`${gene.tandemPrefix}LegendNode`),
      normalTandemName: `${gene.normalAllele.tandemPrefix}LegendNode`,
      mutantTandemName: `${gene.mutantAllele.tandemPrefix}LegendNode`
    }));
    options.children = legendNodes;
    super(options);
    this.legendNodes = legendNodes;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Sets visibility of the UI components related to a specific gene.
   */
  setGeneVisible(gene, visible) {
    const legendNode = _.find(this.legendNodes, legendNode => legendNode.gene === gene);
    assert && assert(legendNode, `legendNode not found for ${gene.nameProperty.value} gene`);
    legendNode.visible = visible;
  }
}

/**
 * GeneLegendNode is the legend for one gene. It shows the color and fill-style used for both the normal allele and
 * the mutation allele.
 */

class GeneLegendNode extends VBox {
  constructor(gene, providedOptions) {
    const options = optionize4()({}, NaturalSelectionConstants.VBOX_OPTIONS, {
      // VBoxOptions
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);
    options.children = [new AlleleLegendNode(gene.normalAllele.nameProperty, gene.color, {
      tandem: options.tandem.createTandem(options.normalTandemName)
    }), new AlleleLegendNode(gene.mutantAllele.nameProperty, gene.color, {
      isMutant: true,
      tandem: options.tandem.createTandem(options.mutantTandemName)
    })];
    super(options);
    this.gene = gene;
  }
  dispose() {
    assert && assert(false, 'GeneLegendNode does not support dispose');
    super.dispose();
  }
}

/**
 * AlleleLegendNode is the legend for one allele. It describes the color and fill style used for a specific allele.
 * Mutations are use a hatching fill style, while non-mutations use a solid fill style.
 */

class AlleleLegendNode extends HBox {
  constructor(alleleNameProperty, color, providedOptions) {
    const options = optionize()({
      // AlleleLegendNodeSelfOptions
      isMutant: false,
      // HBoxOptions
      spacing: 5,
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);
    const rectangleOptions = {
      fill: color,
      stroke: color
    };
    const rectangleNode = options.isMutant ? new HatchingRectangle(0, 0, RECTANGLE_WIDTH, RECTANGLE_HEIGHT, rectangleOptions) : new Rectangle(0, 0, RECTANGLE_WIDTH, RECTANGLE_HEIGHT, rectangleOptions);
    const text = new Text(alleleNameProperty, {
      font: NaturalSelectionConstants.PROPORTIONS_LEGEND_FONT,
      maxWidth: 92,
      // determined empirically
      tandem: options.tandem.createTandem('text')
    });
    options.children = [rectangleNode, text];
    super(options);
  }
  dispose() {
    assert && assert(false, 'AlleleLegendNode does not support dispose');
    super.dispose();
  }
}
naturalSelection.register('ProportionsLegendNode', ProportionsLegendNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,