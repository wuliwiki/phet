// Copyright 2020-2022, University of Colorado Boulder

/**
 * ProportionsGenerationSpinner is the spinner used to select the generation displayed by the Proportions graph.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../../phet-core/js/optionize.js';
import NumberSpinner from '../../../../../sun/js/NumberSpinner.js';
import naturalSelection from '../../../naturalSelection.js';
import NaturalSelectionStrings from '../../../NaturalSelectionStrings.js';
import NaturalSelectionConstants from '../../NaturalSelectionConstants.js';
export default class ProportionsGenerationSpinner extends NumberSpinner {
  constructor(proportionsGenerationProperty, providedOptions) {
    const options = optionize()({
      // NumberSpinnerOptions
      xSpacing: 10,
      arrowsPosition: 'leftRight',
      touchAreaXDilation: 20,
      touchAreaYDilation: 10,
      mouseAreaXDilation: 10,
      mouseAreaYDilation: 5,
      numberDisplayOptions: {
        valuePattern: NaturalSelectionStrings.generationValueStringProperty,
        align: 'center',
        xMargin: 0,
        yMargin: 0,
        backgroundStroke: null,
        backgroundFill: null,
        minBackgroundWidth: 100,
        // determined empirically
        textOptions: {
          font: NaturalSelectionConstants.PROPORTIONS_GENERATION_CONTROL_FONT,
          maxWidth: 250 // determined empirically
        }
      }
    }, providedOptions);
    super(proportionsGenerationProperty, proportionsGenerationProperty.rangeProperty, options);
  }
}
naturalSelection.register('ProportionsGenerationSpinner', ProportionsGenerationSpinner);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOdW1iZXJTcGlubmVyIiwibmF0dXJhbFNlbGVjdGlvbiIsIk5hdHVyYWxTZWxlY3Rpb25TdHJpbmdzIiwiTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyIsIlByb3BvcnRpb25zR2VuZXJhdGlvblNwaW5uZXIiLCJjb25zdHJ1Y3RvciIsInByb3BvcnRpb25zR2VuZXJhdGlvblByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInhTcGFjaW5nIiwiYXJyb3dzUG9zaXRpb24iLCJ0b3VjaEFyZWFYRGlsYXRpb24iLCJ0b3VjaEFyZWFZRGlsYXRpb24iLCJtb3VzZUFyZWFYRGlsYXRpb24iLCJtb3VzZUFyZWFZRGlsYXRpb24iLCJudW1iZXJEaXNwbGF5T3B0aW9ucyIsInZhbHVlUGF0dGVybiIsImdlbmVyYXRpb25WYWx1ZVN0cmluZ1Byb3BlcnR5IiwiYWxpZ24iLCJ4TWFyZ2luIiwieU1hcmdpbiIsImJhY2tncm91bmRTdHJva2UiLCJiYWNrZ3JvdW5kRmlsbCIsIm1pbkJhY2tncm91bmRXaWR0aCIsInRleHRPcHRpb25zIiwiZm9udCIsIlBST1BPUlRJT05TX0dFTkVSQVRJT05fQ09OVFJPTF9GT05UIiwibWF4V2lkdGgiLCJyYW5nZVByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm9wb3J0aW9uc0dlbmVyYXRpb25TcGlubmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFByb3BvcnRpb25zR2VuZXJhdGlvblNwaW5uZXIgaXMgdGhlIHNwaW5uZXIgdXNlZCB0byBzZWxlY3QgdGhlIGdlbmVyYXRpb24gZGlzcGxheWVkIGJ5IHRoZSBQcm9wb3J0aW9ucyBncmFwaC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgTnVtYmVyU3Bpbm5lciwgeyBOdW1iZXJTcGlubmVyT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9OdW1iZXJTcGlubmVyLmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBOYXR1cmFsU2VsZWN0aW9uU3RyaW5ncyBmcm9tICcuLi8uLi8uLi9OYXR1cmFsU2VsZWN0aW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL05hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFByb3BvcnRpb25zR2VuZXJhdGlvblNwaW5uZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8TnVtYmVyU3Bpbm5lck9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3BvcnRpb25zR2VuZXJhdGlvblNwaW5uZXIgZXh0ZW5kcyBOdW1iZXJTcGlubmVyIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm9wb3J0aW9uc0dlbmVyYXRpb25Qcm9wZXJ0eTogTnVtYmVyUHJvcGVydHksIHByb3ZpZGVkT3B0aW9uczogUHJvcG9ydGlvbnNHZW5lcmF0aW9uU3Bpbm5lck9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQcm9wb3J0aW9uc0dlbmVyYXRpb25TcGlubmVyT3B0aW9ucywgU2VsZk9wdGlvbnMsIE51bWJlclNwaW5uZXJPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBOdW1iZXJTcGlubmVyT3B0aW9uc1xyXG4gICAgICB4U3BhY2luZzogMTAsXHJcbiAgICAgIGFycm93c1Bvc2l0aW9uOiAnbGVmdFJpZ2h0JyxcclxuICAgICAgdG91Y2hBcmVhWERpbGF0aW9uOiAyMCxcclxuICAgICAgdG91Y2hBcmVhWURpbGF0aW9uOiAxMCxcclxuICAgICAgbW91c2VBcmVhWERpbGF0aW9uOiAxMCxcclxuICAgICAgbW91c2VBcmVhWURpbGF0aW9uOiA1LFxyXG4gICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgIHZhbHVlUGF0dGVybjogTmF0dXJhbFNlbGVjdGlvblN0cmluZ3MuZ2VuZXJhdGlvblZhbHVlU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgIHhNYXJnaW46IDAsXHJcbiAgICAgICAgeU1hcmdpbjogMCxcclxuICAgICAgICBiYWNrZ3JvdW5kU3Ryb2tlOiBudWxsLFxyXG4gICAgICAgIGJhY2tncm91bmRGaWxsOiBudWxsLFxyXG4gICAgICAgIG1pbkJhY2tncm91bmRXaWR0aDogMTAwLCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICAgICAgdGV4dE9wdGlvbnM6IHtcclxuICAgICAgICAgIGZvbnQ6IE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuUFJPUE9SVElPTlNfR0VORVJBVElPTl9DT05UUk9MX0ZPTlQsXHJcbiAgICAgICAgICBtYXhXaWR0aDogMjUwIC8vIGRldGVybWluZWQgZW1waXJpY2FsbHlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBwcm9wb3J0aW9uc0dlbmVyYXRpb25Qcm9wZXJ0eSwgcHJvcG9ydGlvbnNHZW5lcmF0aW9uUHJvcGVydHkucmFuZ2VQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubmF0dXJhbFNlbGVjdGlvbi5yZWdpc3RlciggJ1Byb3BvcnRpb25zR2VuZXJhdGlvblNwaW5uZXInLCBQcm9wb3J0aW9uc0dlbmVyYXRpb25TcGlubmVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBNEIsMENBQTBDO0FBRXRGLE9BQU9DLGFBQWEsTUFBZ0Msd0NBQXdDO0FBQzVGLE9BQU9DLGdCQUFnQixNQUFNLDhCQUE4QjtBQUMzRCxPQUFPQyx1QkFBdUIsTUFBTSxxQ0FBcUM7QUFDekUsT0FBT0MseUJBQXlCLE1BQU0sb0NBQW9DO0FBTTFFLGVBQWUsTUFBTUMsNEJBQTRCLFNBQVNKLGFBQWEsQ0FBQztFQUUvREssV0FBV0EsQ0FBRUMsNkJBQTZDLEVBQUVDLGVBQW9ELEVBQUc7SUFFeEgsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQXlFLENBQUMsQ0FBRTtNQUVuRztNQUNBVSxRQUFRLEVBQUUsRUFBRTtNQUNaQyxjQUFjLEVBQUUsV0FBVztNQUMzQkMsa0JBQWtCLEVBQUUsRUFBRTtNQUN0QkMsa0JBQWtCLEVBQUUsRUFBRTtNQUN0QkMsa0JBQWtCLEVBQUUsRUFBRTtNQUN0QkMsa0JBQWtCLEVBQUUsQ0FBQztNQUNyQkMsb0JBQW9CLEVBQUU7UUFDcEJDLFlBQVksRUFBRWQsdUJBQXVCLENBQUNlLDZCQUE2QjtRQUNuRUMsS0FBSyxFQUFFLFFBQVE7UUFDZkMsT0FBTyxFQUFFLENBQUM7UUFDVkMsT0FBTyxFQUFFLENBQUM7UUFDVkMsZ0JBQWdCLEVBQUUsSUFBSTtRQUN0QkMsY0FBYyxFQUFFLElBQUk7UUFDcEJDLGtCQUFrQixFQUFFLEdBQUc7UUFBRTtRQUN6QkMsV0FBVyxFQUFFO1VBQ1hDLElBQUksRUFBRXRCLHlCQUF5QixDQUFDdUIsbUNBQW1DO1VBQ25FQyxRQUFRLEVBQUUsR0FBRyxDQUFDO1FBQ2hCO01BQ0Y7SUFDRixDQUFDLEVBQUVwQixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsNkJBQTZCLEVBQUVBLDZCQUE2QixDQUFDc0IsYUFBYSxFQUFFcEIsT0FBUSxDQUFDO0VBQzlGO0FBQ0Y7QUFFQVAsZ0JBQWdCLENBQUM0QixRQUFRLENBQUUsOEJBQThCLEVBQUV6Qiw0QkFBNkIsQ0FBQyJ9