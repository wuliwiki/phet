// Copyright 2019-2023, University of Colorado Boulder

/**
 * HatchingRectangle is a Rectangle that appears as if it's filled with a hatching pattern.
 * The hatching pattern is a set of equally-spaced parallel lines, arranged at some angle.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Path, Rectangle } from '../../../../scenery/js/imports.js';
import naturalSelection from '../../naturalSelection.js';
export default class HatchingRectangle extends Rectangle {
  constructor(x, y, width, height, providedOptions) {
    const options = optionize()({
      // SelfOptions
      hatchingOptions: {
        stroke: 'white',
        lineWidth: 2,
        rotation: -Math.PI / 4
      }
    }, providedOptions);
    super(0, 0, width, height, options);
    this.hatchingLineWidth = options.hatchingOptions.lineWidth;
    this.linesPath = new Path(new Shape(), options.hatchingOptions);
    this.addChild(this.linesPath);

    // this.linesPath did not exist the first time that invalidateRectangle was called by super.
    this.invalidateRectangle();
  }

  /**
   * Notifies that the rectangle has changed, and invalidates path information and our cached shape.
   */
  invalidateRectangle() {
    super.invalidateRectangle();

    // this.linesPath did not exist the first time that invalidateRectangle was called by super.
    if (this.linesPath) {
      // Draw equally-spaces lines on top of the rectangle to create a hatching pattern. The lines are drawn
      // horizontally as a single Shape, then rotated to the desired angle. The bounds of the lines is 2x the
      // largest dimensions of the rectangle, so that the hatching pattern can be rotated arbitrarily.
      let lineY = 0;
      const linesShape = new Shape();
      const maxDimension = Math.max(this.rectWidth, this.rectHeight);
      while (lineY <= 2 * maxDimension) {
        linesShape.moveTo(0, lineY).lineTo(2 * maxDimension, lineY);
        lineY = lineY + 2 * this.hatchingLineWidth;
      }
      this.linesPath.setShape(linesShape);

      // Center hatching lines in the rectangle
      this.linesPath.centerX = this.rectX + this.rectWidth / 2;
      this.linesPath.centerY = this.rectY + this.rectHeight / 2;
    }

    // Clip to the shape of the rectangle
    this.clipArea = this.shape;
  }
}
naturalSelection.register('HatchingRectangle', HatchingRectangle);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIlBhdGgiLCJSZWN0YW5nbGUiLCJuYXR1cmFsU2VsZWN0aW9uIiwiSGF0Y2hpbmdSZWN0YW5nbGUiLCJjb25zdHJ1Y3RvciIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaGF0Y2hpbmdPcHRpb25zIiwic3Ryb2tlIiwibGluZVdpZHRoIiwicm90YXRpb24iLCJNYXRoIiwiUEkiLCJoYXRjaGluZ0xpbmVXaWR0aCIsImxpbmVzUGF0aCIsImFkZENoaWxkIiwiaW52YWxpZGF0ZVJlY3RhbmdsZSIsImxpbmVZIiwibGluZXNTaGFwZSIsIm1heERpbWVuc2lvbiIsIm1heCIsInJlY3RXaWR0aCIsInJlY3RIZWlnaHQiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzZXRTaGFwZSIsImNlbnRlclgiLCJyZWN0WCIsImNlbnRlclkiLCJyZWN0WSIsImNsaXBBcmVhIiwic2hhcGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkhhdGNoaW5nUmVjdGFuZ2xlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEhhdGNoaW5nUmVjdGFuZ2xlIGlzIGEgUmVjdGFuZ2xlIHRoYXQgYXBwZWFycyBhcyBpZiBpdCdzIGZpbGxlZCB3aXRoIGEgaGF0Y2hpbmcgcGF0dGVybi5cclxuICogVGhlIGhhdGNoaW5nIHBhdHRlcm4gaXMgYSBzZXQgb2YgZXF1YWxseS1zcGFjZWQgcGFyYWxsZWwgbGluZXMsIGFycmFuZ2VkIGF0IHNvbWUgYW5nbGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBQYXRoLCBSZWN0YW5nbGUsIFJlY3RhbmdsZU9wdGlvbnMsIFRDb2xvciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBoYXRjaGluZ09wdGlvbnM/OiB7XHJcbiAgICBzdHJva2U6IFRDb2xvcjtcclxuICAgIGxpbmVXaWR0aDogbnVtYmVyO1xyXG4gICAgcm90YXRpb246IG51bWJlcjtcclxuICB9O1xyXG59O1xyXG5cclxudHlwZSBIYXRjaGluZ1JlY3RhbmdsZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxSZWN0YW5nbGVPcHRpb25zLCAnZmlsbCcgfCAnc3Ryb2tlJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYXRjaGluZ1JlY3RhbmdsZSBleHRlbmRzIFJlY3RhbmdsZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGluZXNQYXRoOiBQYXRoO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgaGF0Y2hpbmdMaW5lV2lkdGg6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHByb3ZpZGVkT3B0aW9ucz86IEhhdGNoaW5nUmVjdGFuZ2xlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEhhdGNoaW5nUmVjdGFuZ2xlT3B0aW9ucywgU2VsZk9wdGlvbnMsIFJlY3RhbmdsZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGhhdGNoaW5nT3B0aW9uczoge1xyXG4gICAgICAgIHN0cm9rZTogJ3doaXRlJyxcclxuICAgICAgICBsaW5lV2lkdGg6IDIsXHJcbiAgICAgICAgcm90YXRpb246IC1NYXRoLlBJIC8gNFxyXG4gICAgICB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggMCwgMCwgd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuaGF0Y2hpbmdMaW5lV2lkdGggPSBvcHRpb25zLmhhdGNoaW5nT3B0aW9ucy5saW5lV2lkdGg7XHJcblxyXG4gICAgdGhpcy5saW5lc1BhdGggPSBuZXcgUGF0aCggbmV3IFNoYXBlKCksIG9wdGlvbnMuaGF0Y2hpbmdPcHRpb25zICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLmxpbmVzUGF0aCApO1xyXG5cclxuICAgIC8vIHRoaXMubGluZXNQYXRoIGRpZCBub3QgZXhpc3QgdGhlIGZpcnN0IHRpbWUgdGhhdCBpbnZhbGlkYXRlUmVjdGFuZ2xlIHdhcyBjYWxsZWQgYnkgc3VwZXIuXHJcbiAgICB0aGlzLmludmFsaWRhdGVSZWN0YW5nbGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE5vdGlmaWVzIHRoYXQgdGhlIHJlY3RhbmdsZSBoYXMgY2hhbmdlZCwgYW5kIGludmFsaWRhdGVzIHBhdGggaW5mb3JtYXRpb24gYW5kIG91ciBjYWNoZWQgc2hhcGUuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIGludmFsaWRhdGVSZWN0YW5nbGUoKTogdm9pZCB7XHJcbiAgICBzdXBlci5pbnZhbGlkYXRlUmVjdGFuZ2xlKCk7XHJcblxyXG4gICAgLy8gdGhpcy5saW5lc1BhdGggZGlkIG5vdCBleGlzdCB0aGUgZmlyc3QgdGltZSB0aGF0IGludmFsaWRhdGVSZWN0YW5nbGUgd2FzIGNhbGxlZCBieSBzdXBlci5cclxuICAgIGlmICggdGhpcy5saW5lc1BhdGggKSB7XHJcblxyXG4gICAgICAvLyBEcmF3IGVxdWFsbHktc3BhY2VzIGxpbmVzIG9uIHRvcCBvZiB0aGUgcmVjdGFuZ2xlIHRvIGNyZWF0ZSBhIGhhdGNoaW5nIHBhdHRlcm4uIFRoZSBsaW5lcyBhcmUgZHJhd25cclxuICAgICAgLy8gaG9yaXpvbnRhbGx5IGFzIGEgc2luZ2xlIFNoYXBlLCB0aGVuIHJvdGF0ZWQgdG8gdGhlIGRlc2lyZWQgYW5nbGUuIFRoZSBib3VuZHMgb2YgdGhlIGxpbmVzIGlzIDJ4IHRoZVxyXG4gICAgICAvLyBsYXJnZXN0IGRpbWVuc2lvbnMgb2YgdGhlIHJlY3RhbmdsZSwgc28gdGhhdCB0aGUgaGF0Y2hpbmcgcGF0dGVybiBjYW4gYmUgcm90YXRlZCBhcmJpdHJhcmlseS5cclxuICAgICAgbGV0IGxpbmVZID0gMDtcclxuICAgICAgY29uc3QgbGluZXNTaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG4gICAgICBjb25zdCBtYXhEaW1lbnNpb24gPSBNYXRoLm1heCggdGhpcy5yZWN0V2lkdGgsIHRoaXMucmVjdEhlaWdodCApO1xyXG4gICAgICB3aGlsZSAoIGxpbmVZIDw9IDIgKiBtYXhEaW1lbnNpb24gKSB7XHJcbiAgICAgICAgbGluZXNTaGFwZS5tb3ZlVG8oIDAsIGxpbmVZICkubGluZVRvKCAyICogbWF4RGltZW5zaW9uLCBsaW5lWSApO1xyXG4gICAgICAgIGxpbmVZID0gbGluZVkgKyAyICogdGhpcy5oYXRjaGluZ0xpbmVXaWR0aDtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxpbmVzUGF0aC5zZXRTaGFwZSggbGluZXNTaGFwZSApO1xyXG5cclxuICAgICAgLy8gQ2VudGVyIGhhdGNoaW5nIGxpbmVzIGluIHRoZSByZWN0YW5nbGVcclxuICAgICAgdGhpcy5saW5lc1BhdGguY2VudGVyWCA9IHRoaXMucmVjdFggKyB0aGlzLnJlY3RXaWR0aCAvIDI7XHJcbiAgICAgIHRoaXMubGluZXNQYXRoLmNlbnRlclkgPSB0aGlzLnJlY3RZICsgdGhpcy5yZWN0SGVpZ2h0IC8gMjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDbGlwIHRvIHRoZSBzaGFwZSBvZiB0aGUgcmVjdGFuZ2xlXHJcbiAgICB0aGlzLmNsaXBBcmVhID0gdGhpcy5zaGFwZTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdIYXRjaGluZ1JlY3RhbmdsZScsIEhhdGNoaW5nUmVjdGFuZ2xlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBRTdELFNBQVNDLElBQUksRUFBRUMsU0FBUyxRQUFrQyxtQ0FBbUM7QUFDN0YsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBWXhELGVBQWUsTUFBTUMsaUJBQWlCLFNBQVNGLFNBQVMsQ0FBQztFQUtoREcsV0FBV0EsQ0FBRUMsQ0FBUyxFQUFFQyxDQUFTLEVBQUVDLEtBQWEsRUFBRUMsTUFBYyxFQUFFQyxlQUEwQyxFQUFHO0lBRXBILE1BQU1DLE9BQU8sR0FBR1gsU0FBUyxDQUEwRCxDQUFDLENBQUU7TUFFcEY7TUFDQVksZUFBZSxFQUFFO1FBQ2ZDLE1BQU0sRUFBRSxPQUFPO1FBQ2ZDLFNBQVMsRUFBRSxDQUFDO1FBQ1pDLFFBQVEsRUFBRSxDQUFDQyxJQUFJLENBQUNDLEVBQUUsR0FBRztNQUN2QjtJQUNGLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRUYsS0FBSyxFQUFFQyxNQUFNLEVBQUVFLE9BQVEsQ0FBQztJQUVyQyxJQUFJLENBQUNPLGlCQUFpQixHQUFHUCxPQUFPLENBQUNDLGVBQWUsQ0FBQ0UsU0FBUztJQUUxRCxJQUFJLENBQUNLLFNBQVMsR0FBRyxJQUFJbEIsSUFBSSxDQUFFLElBQUlGLEtBQUssQ0FBQyxDQUFDLEVBQUVZLE9BQU8sQ0FBQ0MsZUFBZ0IsQ0FBQztJQUNqRSxJQUFJLENBQUNRLFFBQVEsQ0FBRSxJQUFJLENBQUNELFNBQVUsQ0FBQzs7SUFFL0I7SUFDQSxJQUFJLENBQUNFLG1CQUFtQixDQUFDLENBQUM7RUFDNUI7O0VBRUE7QUFDRjtBQUNBO0VBQ3FCQSxtQkFBbUJBLENBQUEsRUFBUztJQUM3QyxLQUFLLENBQUNBLG1CQUFtQixDQUFDLENBQUM7O0lBRTNCO0lBQ0EsSUFBSyxJQUFJLENBQUNGLFNBQVMsRUFBRztNQUVwQjtNQUNBO01BQ0E7TUFDQSxJQUFJRyxLQUFLLEdBQUcsQ0FBQztNQUNiLE1BQU1DLFVBQVUsR0FBRyxJQUFJeEIsS0FBSyxDQUFDLENBQUM7TUFDOUIsTUFBTXlCLFlBQVksR0FBR1IsSUFBSSxDQUFDUyxHQUFHLENBQUUsSUFBSSxDQUFDQyxTQUFTLEVBQUUsSUFBSSxDQUFDQyxVQUFXLENBQUM7TUFDaEUsT0FBUUwsS0FBSyxJQUFJLENBQUMsR0FBR0UsWUFBWSxFQUFHO1FBQ2xDRCxVQUFVLENBQUNLLE1BQU0sQ0FBRSxDQUFDLEVBQUVOLEtBQU0sQ0FBQyxDQUFDTyxNQUFNLENBQUUsQ0FBQyxHQUFHTCxZQUFZLEVBQUVGLEtBQU0sQ0FBQztRQUMvREEsS0FBSyxHQUFHQSxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQ0osaUJBQWlCO01BQzVDO01BQ0EsSUFBSSxDQUFDQyxTQUFTLENBQUNXLFFBQVEsQ0FBRVAsVUFBVyxDQUFDOztNQUVyQztNQUNBLElBQUksQ0FBQ0osU0FBUyxDQUFDWSxPQUFPLEdBQUcsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDTixTQUFTLEdBQUcsQ0FBQztNQUN4RCxJQUFJLENBQUNQLFNBQVMsQ0FBQ2MsT0FBTyxHQUFHLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ1AsVUFBVSxHQUFHLENBQUM7SUFDM0Q7O0lBRUE7SUFDQSxJQUFJLENBQUNRLFFBQVEsR0FBRyxJQUFJLENBQUNDLEtBQUs7RUFDNUI7QUFDRjtBQUVBakMsZ0JBQWdCLENBQUNrQyxRQUFRLENBQUUsbUJBQW1CLEVBQUVqQyxpQkFBa0IsQ0FBQyJ9