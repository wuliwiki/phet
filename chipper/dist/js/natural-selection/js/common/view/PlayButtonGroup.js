// Copyright 2020-2022, University of Colorado Boulder

/**
 * PlayButtonGroup contains the buttons that can be used to make the simulation begin playing. These buttons are
 * mutually exclusive - at most 1 is visible, depending on the state of the simulation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import stepTimer from '../../../../axon/js/stepTimer.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import naturalSelection from '../../naturalSelection.js';
import NaturalSelectionStrings from '../../NaturalSelectionStrings.js';
import SimulationMode from '../model/SimulationMode.js';
import NaturalSelectionColors from '../NaturalSelectionColors.js';
import NaturalSelectionConstants from '../NaturalSelectionConstants.js';
export default class PlayButtonGroup extends Node {
  constructor(simulationModeProperty, bunnyCountProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      addAMate: _.noop,
      play: _.noop,
      startOver: _.noop
    }, providedOptions);

    // 'Add a Mate' push button, for when the initial population consists of a single bunny.
    const addAMateButton = new TextPushButton(NaturalSelectionStrings.addAMateStringProperty, {
      listener: () => {
        options.addAMate();
        simulationModeProperty.value = SimulationMode.ACTIVE;
      },
      tandem: options.tandem.createTandem('addAMateButton')
    });

    // 'Play' push button, for when the initial population consists of more than one bunny.
    const playButton = new TextPushButton(NaturalSelectionStrings.playStringProperty, {
      listener: () => {
        options.play();
        simulationModeProperty.value = SimulationMode.ACTIVE;
      },
      tandem: options.tandem.createTandem('playButton')
    });

    // 'Start Over' push button, displayed after the game ends (bunnie take over the world, or all bunnies die),
    // while the user is reviewing the final state.
    const startOverButton = new TextPushButton(NaturalSelectionStrings.startOverStringProperty, {
      listener: () => {
        options.startOver();
        simulationModeProperty.value = SimulationMode.STAGED;
      },
      tandem: options.tandem.createTandem('startOverButton')
    });
    options.children = [addAMateButton, playButton, startOverButton];
    super(options);

    // Make all buttons have the same center
    Multilink.multilink([addAMateButton.boundsProperty, playButton.boundsProperty, startOverButton.boundsProperty], () => {
      playButton.center = addAMateButton.center;
      startOverButton.center = addAMateButton.center;
    });

    // Make at most 1 button visible. unlink is not necessary.
    simulationModeProperty.link(simulationMode => {
      // start with all buttons hidden
      addAMateButton.visible = false;
      playButton.visible = false;
      startOverButton.visible = false;
      if (simulationMode === SimulationMode.STAGED) {
        // Show 'Add a Mate' or 'Play' button, depending on the size of the population.
        // Make one of these buttons visible on the next frame, so that a double-click on the 'Start Over' button
        // doesn't fire the button that is made visible. See https://github.com/phetsims/natural-selection/issues/166
        const bunnyCount = bunnyCountProperty.value;
        stepTimer.runOnNextTick(() => {
          // Checking simulationModeProperty to make sure it hasn't changed again before this callback fires.
          // See https://github.com/phetsims/natural-selection/issues/235
          if (simulationModeProperty.value === SimulationMode.STAGED) {
            addAMateButton.visible = bunnyCount === 1;
            playButton.visible = bunnyCount > 1;
          }
        });
      } else if (simulationMode === SimulationMode.ACTIVE) {
        // do nothing, all buttons remain hidden
      } else if (simulationMode === SimulationMode.COMPLETED) {
        // Show 'Start Over' button.
        startOverButton.visible = true;
      } else {
        throw new Error(`unsupported simulationMode: ${simulationMode}`);
      }
    });
  }
  dispose() {
    assert && assert(false, 'PlayButtonGroup does not support dispose');
    super.dispose();
  }
}
class TextPushButton extends RectangularPushButton {
  constructor(stringProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      textOptions: {
        font: NaturalSelectionConstants.PUSH_BUTTON_FONT,
        maxWidth: 150 // determined empirically
      },

      // RectangularPushButtonOptions
      baseColor: NaturalSelectionColors.PLAY_BUTTON,
      cornerRadius: 5,
      xMargin: 12,
      yMargin: 8,
      phetioReadOnly: true // because sim state controls when this button is visible
    }, providedOptions);
    options.content = new Text(stringProperty, combineOptions({}, options.textOptions, {
      tandem: options.tandem.createTandem('labelText')
    }));
    super(options);
  }
}
naturalSelection.register('PlayButtonGroup', PlayButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,