// Copyright 2019-2022, University of Colorado Boulder

/**
 * MutationComingNode is a popup 'alert' that informs the user that a mutation is about to occur,
 * and gives the user an opportunity to cancel the mutation.  It is not implemented using SUN/Dialog because
 * (at the time of implementation) non-modal dialogs are not supported.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../kite/js/imports.js';
import { HBox, Node, Path, Text } from '../../../../scenery/js/imports.js';
import naturalSelection from '../../naturalSelection.js';
import NaturalSelectionStrings from '../../NaturalSelectionStrings.js';
import NaturalSelectionConstants from '../NaturalSelectionConstants.js';
import CancelMutationButton from './CancelMutationButton.js';
import optionize from '../../../../phet-core/js/optionize.js';

// constants
const X_MARGIN = 8;
const Y_MARGIN = 4;
const POINTER_WIDTH = 15;
export default class MutationComingNode extends Node {
  constructor(gene, providedOptions) {
    const options = optionize()({
      // NodeOptions
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);
    const cancelButton = new CancelMutationButton({
      listener: () => gene.cancelMutation()
    });
    const labelText = new Text(NaturalSelectionStrings.mutationComingStringProperty, {
      font: NaturalSelectionConstants.MUTATION_COMING_FONT,
      maxWidth: 128,
      // determined empirically
      tandem: options.tandem.createTandem('labelText')
    });
    const hBox = new HBox({
      spacing: 6,
      children: [cancelButton, labelText]
    });
    const backgroundWidth = hBox.width + 2 * X_MARGIN;
    const backgroundHeight = hBox.height + 2 * Y_MARGIN;
    const backgroundShape = new Shape().moveTo(0, 0).lineTo(backgroundWidth, 0).lineTo(backgroundWidth + POINTER_WIDTH, backgroundHeight / 2).lineTo(backgroundWidth, backgroundHeight).lineTo(0, backgroundHeight).close();
    const backgroundPath = new Path(backgroundShape, {
      stroke: 'black',
      fill: 'rgba( 255, 255, 255, 0.75 )'
    });

    // Center content in the background
    hBox.left = backgroundPath.left + X_MARGIN;
    hBox.centerY = backgroundPath.centerY;
    options.children = [backgroundPath, hBox];
    super(options);
    this.gene = gene;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
naturalSelection.register('MutationComingNode', MutationComingNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIkhCb3giLCJOb2RlIiwiUGF0aCIsIlRleHQiLCJuYXR1cmFsU2VsZWN0aW9uIiwiTmF0dXJhbFNlbGVjdGlvblN0cmluZ3MiLCJOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzIiwiQ2FuY2VsTXV0YXRpb25CdXR0b24iLCJvcHRpb25pemUiLCJYX01BUkdJTiIsIllfTUFSR0lOIiwiUE9JTlRFUl9XSURUSCIsIk11dGF0aW9uQ29taW5nTm9kZSIsImNvbnN0cnVjdG9yIiwiZ2VuZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvUmVhZE9ubHkiLCJjYW5jZWxCdXR0b24iLCJsaXN0ZW5lciIsImNhbmNlbE11dGF0aW9uIiwibGFiZWxUZXh0IiwibXV0YXRpb25Db21pbmdTdHJpbmdQcm9wZXJ0eSIsImZvbnQiLCJNVVRBVElPTl9DT01JTkdfRk9OVCIsIm1heFdpZHRoIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiaEJveCIsInNwYWNpbmciLCJjaGlsZHJlbiIsImJhY2tncm91bmRXaWR0aCIsIndpZHRoIiwiYmFja2dyb3VuZEhlaWdodCIsImhlaWdodCIsImJhY2tncm91bmRTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlIiwiYmFja2dyb3VuZFBhdGgiLCJzdHJva2UiLCJmaWxsIiwibGVmdCIsImNlbnRlclkiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNdXRhdGlvbkNvbWluZ05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTXV0YXRpb25Db21pbmdOb2RlIGlzIGEgcG9wdXAgJ2FsZXJ0JyB0aGF0IGluZm9ybXMgdGhlIHVzZXIgdGhhdCBhIG11dGF0aW9uIGlzIGFib3V0IHRvIG9jY3VyLFxyXG4gKiBhbmQgZ2l2ZXMgdGhlIHVzZXIgYW4gb3Bwb3J0dW5pdHkgdG8gY2FuY2VsIHRoZSBtdXRhdGlvbi4gIEl0IGlzIG5vdCBpbXBsZW1lbnRlZCB1c2luZyBTVU4vRGlhbG9nIGJlY2F1c2VcclxuICogKGF0IHRoZSB0aW1lIG9mIGltcGxlbWVudGF0aW9uKSBub24tbW9kYWwgZGlhbG9ncyBhcmUgbm90IHN1cHBvcnRlZC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIE5vZGUsIE5vZGVPcHRpb25zLCBQYXRoLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBOYXR1cmFsU2VsZWN0aW9uU3RyaW5ncyBmcm9tICcuLi8uLi9OYXR1cmFsU2VsZWN0aW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBHZW5lIGZyb20gJy4uL21vZGVsL0dlbmUuanMnO1xyXG5pbXBvcnQgTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyBmcm9tICcuLi9OYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENhbmNlbE11dGF0aW9uQnV0dG9uIGZyb20gJy4vQ2FuY2VsTXV0YXRpb25CdXR0b24uanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBYX01BUkdJTiA9IDg7XHJcbmNvbnN0IFlfTUFSR0lOID0gNDtcclxuY29uc3QgUE9JTlRFUl9XSURUSCA9IDE1O1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIE11dGF0aW9uQ29taW5nTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxOb2RlT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXV0YXRpb25Db21pbmdOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBnZW5lOiBHZW5lO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdlbmU6IEdlbmUsIHByb3ZpZGVkT3B0aW9uczogTXV0YXRpb25Db21pbmdOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE11dGF0aW9uQ29taW5nTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTm9kZU9wdGlvbnNcclxuICAgICAgdmlzaWJsZVByb3BlcnR5T3B0aW9uczogeyBwaGV0aW9SZWFkT25seTogdHJ1ZSB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBuZXcgQ2FuY2VsTXV0YXRpb25CdXR0b24oIHtcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IGdlbmUuY2FuY2VsTXV0YXRpb24oKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGxhYmVsVGV4dCA9IG5ldyBUZXh0KCBOYXR1cmFsU2VsZWN0aW9uU3RyaW5ncy5tdXRhdGlvbkNvbWluZ1N0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuTVVUQVRJT05fQ09NSU5HX0ZPTlQsXHJcbiAgICAgIG1heFdpZHRoOiAxMjgsIC8vIGRldGVybWluZWQgZW1waXJpY2FsbHlcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBoQm94ID0gbmV3IEhCb3goIHtcclxuICAgICAgc3BhY2luZzogNixcclxuICAgICAgY2hpbGRyZW46IFsgY2FuY2VsQnV0dG9uLCBsYWJlbFRleHQgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGJhY2tncm91bmRXaWR0aCA9IGhCb3gud2lkdGggKyAyICogWF9NQVJHSU47XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kSGVpZ2h0ID0gaEJveC5oZWlnaHQgKyAyICogWV9NQVJHSU47XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kU2hhcGUgPSBuZXcgU2hhcGUoKVxyXG4gICAgICAubW92ZVRvKCAwLCAwIClcclxuICAgICAgLmxpbmVUbyggYmFja2dyb3VuZFdpZHRoLCAwIClcclxuICAgICAgLmxpbmVUbyggYmFja2dyb3VuZFdpZHRoICsgUE9JTlRFUl9XSURUSCwgYmFja2dyb3VuZEhlaWdodCAvIDIgKVxyXG4gICAgICAubGluZVRvKCBiYWNrZ3JvdW5kV2lkdGgsIGJhY2tncm91bmRIZWlnaHQgKVxyXG4gICAgICAubGluZVRvKCAwLCBiYWNrZ3JvdW5kSGVpZ2h0IClcclxuICAgICAgLmNsb3NlKCk7XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kUGF0aCA9IG5ldyBQYXRoKCBiYWNrZ3JvdW5kU2hhcGUsIHtcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBmaWxsOiAncmdiYSggMjU1LCAyNTUsIDI1NSwgMC43NSApJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENlbnRlciBjb250ZW50IGluIHRoZSBiYWNrZ3JvdW5kXHJcbiAgICBoQm94LmxlZnQgPSBiYWNrZ3JvdW5kUGF0aC5sZWZ0ICsgWF9NQVJHSU47XHJcbiAgICBoQm94LmNlbnRlclkgPSBiYWNrZ3JvdW5kUGF0aC5jZW50ZXJZO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGJhY2tncm91bmRQYXRoLCBoQm94IF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmdlbmUgPSBnZW5lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdNdXRhdGlvbkNvbWluZ05vZGUnLCBNdXRhdGlvbkNvbWluZ05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQWVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUN2RixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBRXRFLE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7O0FBRW5GO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDbEIsTUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDbEIsTUFBTUMsYUFBYSxHQUFHLEVBQUU7QUFNeEIsZUFBZSxNQUFNQyxrQkFBa0IsU0FBU1gsSUFBSSxDQUFDO0VBSTVDWSxXQUFXQSxDQUFFQyxJQUFVLEVBQUVDLGVBQTBDLEVBQUc7SUFFM0UsTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQXNELENBQUMsQ0FBRTtNQUVoRjtNQUNBUyxzQkFBc0IsRUFBRTtRQUFFQyxjQUFjLEVBQUU7TUFBSztJQUNqRCxDQUFDLEVBQUVILGVBQWdCLENBQUM7SUFFcEIsTUFBTUksWUFBWSxHQUFHLElBQUlaLG9CQUFvQixDQUFFO01BQzdDYSxRQUFRLEVBQUVBLENBQUEsS0FBTU4sSUFBSSxDQUFDTyxjQUFjLENBQUM7SUFDdEMsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsU0FBUyxHQUFHLElBQUluQixJQUFJLENBQUVFLHVCQUF1QixDQUFDa0IsNEJBQTRCLEVBQUU7TUFDaEZDLElBQUksRUFBRWxCLHlCQUF5QixDQUFDbUIsb0JBQW9CO01BQ3BEQyxRQUFRLEVBQUUsR0FBRztNQUFFO01BQ2ZDLE1BQU0sRUFBRVgsT0FBTyxDQUFDVyxNQUFNLENBQUNDLFlBQVksQ0FBRSxXQUFZO0lBQ25ELENBQUUsQ0FBQztJQUVILE1BQU1DLElBQUksR0FBRyxJQUFJN0IsSUFBSSxDQUFFO01BQ3JCOEIsT0FBTyxFQUFFLENBQUM7TUFDVkMsUUFBUSxFQUFFLENBQUVaLFlBQVksRUFBRUcsU0FBUztJQUNyQyxDQUFFLENBQUM7SUFFSCxNQUFNVSxlQUFlLEdBQUdILElBQUksQ0FBQ0ksS0FBSyxHQUFHLENBQUMsR0FBR3hCLFFBQVE7SUFDakQsTUFBTXlCLGdCQUFnQixHQUFHTCxJQUFJLENBQUNNLE1BQU0sR0FBRyxDQUFDLEdBQUd6QixRQUFRO0lBQ25ELE1BQU0wQixlQUFlLEdBQUcsSUFBSXJDLEtBQUssQ0FBQyxDQUFDLENBQ2hDc0MsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FDZEMsTUFBTSxDQUFFTixlQUFlLEVBQUUsQ0FBRSxDQUFDLENBQzVCTSxNQUFNLENBQUVOLGVBQWUsR0FBR3JCLGFBQWEsRUFBRXVCLGdCQUFnQixHQUFHLENBQUUsQ0FBQyxDQUMvREksTUFBTSxDQUFFTixlQUFlLEVBQUVFLGdCQUFpQixDQUFDLENBQzNDSSxNQUFNLENBQUUsQ0FBQyxFQUFFSixnQkFBaUIsQ0FBQyxDQUM3QkssS0FBSyxDQUFDLENBQUM7SUFDVixNQUFNQyxjQUFjLEdBQUcsSUFBSXRDLElBQUksQ0FBRWtDLGVBQWUsRUFBRTtNQUNoREssTUFBTSxFQUFFLE9BQU87TUFDZkMsSUFBSSxFQUFFO0lBQ1IsQ0FBRSxDQUFDOztJQUVIO0lBQ0FiLElBQUksQ0FBQ2MsSUFBSSxHQUFHSCxjQUFjLENBQUNHLElBQUksR0FBR2xDLFFBQVE7SUFDMUNvQixJQUFJLENBQUNlLE9BQU8sR0FBR0osY0FBYyxDQUFDSSxPQUFPO0lBRXJDNUIsT0FBTyxDQUFDZSxRQUFRLEdBQUcsQ0FBRVMsY0FBYyxFQUFFWCxJQUFJLENBQUU7SUFFM0MsS0FBSyxDQUFFYixPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDRixJQUFJLEdBQUdBLElBQUk7RUFDbEI7RUFFZ0IrQixPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXpDLGdCQUFnQixDQUFDMkMsUUFBUSxDQUFFLG9CQUFvQixFQUFFbkMsa0JBQW1CLENBQUMifQ==