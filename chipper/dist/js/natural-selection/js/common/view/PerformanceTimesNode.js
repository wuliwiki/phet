// Copyright 2020-2022, University of Colorado Boulder

/**
 * PerformanceTimesNode displays times related to performance critical parts of the simulation. This is added via
 * the ?showTimes query parameter, and is for debugging only. It is not translated or instrumented for PhET-iO.
 * See https://github.com/phetsims/natural-selection/issues/60 and https://github.com/phetsims/natural-selection/issues/140
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Utils from '../../../../dot/js/Utils.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import naturalSelection from '../../naturalSelection.js';
import NaturalSelectionConstants from '../NaturalSelectionConstants.js';
export default class PerformanceTimesNode extends VBox {
  constructor(timeToMateProperty, timeToStartOverProperty, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: 5
    }, providedOptions);

    // unlink is not necessary.
    const timeToMateDerivedStringProperty = new DerivedProperty([timeToMateProperty], timeToMate => `time to mate = ${Utils.roundSymmetric(timeToMate)} ms`);
    timeToMateDerivedStringProperty.link(timeToMateString => console.log(timeToMateString));

    // Time that it last took to mate.
    // See https://github.com/phetsims/natural-selection/issues/60
    const timeToMateNode = new Text(timeToMateDerivedStringProperty, {
      font: NaturalSelectionConstants.INSTRUCTIONS_FONT
    });

    // unlink is not necessary.
    const timeToStartOverPropertyDerivedStringProperty = new DerivedProperty([timeToStartOverProperty], timeToStartOver => `time to Start Over = ${Utils.roundSymmetric(timeToStartOver)} ms`);
    timeToStartOverPropertyDerivedStringProperty.link(timeToStartOverString => console.log(timeToStartOverString));

    // Time that it last took to perform the 'Start Over' button callback.
    // See https://github.com/phetsims/natural-selection/issues/140
    const timeToStartOverNode = new Text(timeToStartOverPropertyDerivedStringProperty, {
      font: NaturalSelectionConstants.INSTRUCTIONS_FONT
    });
    options.children = [timeToMateNode, timeToStartOverNode];
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
naturalSelection.register('PerformanceTimesNode', PerformanceTimesNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJVdGlscyIsIm9wdGlvbml6ZSIsIlRleHQiLCJWQm94IiwibmF0dXJhbFNlbGVjdGlvbiIsIk5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMiLCJQZXJmb3JtYW5jZVRpbWVzTm9kZSIsImNvbnN0cnVjdG9yIiwidGltZVRvTWF0ZVByb3BlcnR5IiwidGltZVRvU3RhcnRPdmVyUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYWxpZ24iLCJzcGFjaW5nIiwidGltZVRvTWF0ZURlcml2ZWRTdHJpbmdQcm9wZXJ0eSIsInRpbWVUb01hdGUiLCJyb3VuZFN5bW1ldHJpYyIsImxpbmsiLCJ0aW1lVG9NYXRlU3RyaW5nIiwiY29uc29sZSIsImxvZyIsInRpbWVUb01hdGVOb2RlIiwiZm9udCIsIklOU1RSVUNUSU9OU19GT05UIiwidGltZVRvU3RhcnRPdmVyUHJvcGVydHlEZXJpdmVkU3RyaW5nUHJvcGVydHkiLCJ0aW1lVG9TdGFydE92ZXIiLCJ0aW1lVG9TdGFydE92ZXJTdHJpbmciLCJ0aW1lVG9TdGFydE92ZXJOb2RlIiwiY2hpbGRyZW4iLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQZXJmb3JtYW5jZVRpbWVzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtYW5jZVRpbWVzTm9kZSBkaXNwbGF5cyB0aW1lcyByZWxhdGVkIHRvIHBlcmZvcm1hbmNlIGNyaXRpY2FsIHBhcnRzIG9mIHRoZSBzaW11bGF0aW9uLiBUaGlzIGlzIGFkZGVkIHZpYVxyXG4gKiB0aGUgP3Nob3dUaW1lcyBxdWVyeSBwYXJhbWV0ZXIsIGFuZCBpcyBmb3IgZGVidWdnaW5nIG9ubHkuIEl0IGlzIG5vdCB0cmFuc2xhdGVkIG9yIGluc3RydW1lbnRlZCBmb3IgUGhFVC1pTy5cclxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9uYXR1cmFsLXNlbGVjdGlvbi9pc3N1ZXMvNjAgYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9uYXR1cmFsLXNlbGVjdGlvbi9pc3N1ZXMvMTQwXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zLCBUZXh0LCBWQm94LCBWQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5pbXBvcnQgTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyBmcm9tICcuLi9OYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBQZXJmb3JtYW5jZVRpbWVzTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJmb3JtYW5jZVRpbWVzTm9kZSBleHRlbmRzIFZCb3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRpbWVUb01hdGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPixcclxuICAgICAgICAgICAgICAgICAgICAgIHRpbWVUb1N0YXJ0T3ZlclByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogUGVyZm9ybWFuY2VUaW1lc05vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UGVyZm9ybWFuY2VUaW1lc05vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgVkJveE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFZCb3hPcHRpb25zXHJcbiAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgIHNwYWNpbmc6IDVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHVubGluayBpcyBub3QgbmVjZXNzYXJ5LlxyXG4gICAgY29uc3QgdGltZVRvTWF0ZURlcml2ZWRTdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGltZVRvTWF0ZVByb3BlcnR5IF0sXHJcbiAgICAgIHRpbWVUb01hdGUgPT4gYHRpbWUgdG8gbWF0ZSA9ICR7VXRpbHMucm91bmRTeW1tZXRyaWMoIHRpbWVUb01hdGUgKX0gbXNgXHJcbiAgICApO1xyXG4gICAgdGltZVRvTWF0ZURlcml2ZWRTdHJpbmdQcm9wZXJ0eS5saW5rKCB0aW1lVG9NYXRlU3RyaW5nID0+IGNvbnNvbGUubG9nKCB0aW1lVG9NYXRlU3RyaW5nICkgKTtcclxuXHJcbiAgICAvLyBUaW1lIHRoYXQgaXQgbGFzdCB0b29rIHRvIG1hdGUuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL25hdHVyYWwtc2VsZWN0aW9uL2lzc3Vlcy82MFxyXG4gICAgY29uc3QgdGltZVRvTWF0ZU5vZGUgPSBuZXcgVGV4dCggdGltZVRvTWF0ZURlcml2ZWRTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLklOU1RSVUNUSU9OU19GT05UXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gdW5saW5rIGlzIG5vdCBuZWNlc3NhcnkuXHJcbiAgICBjb25zdCB0aW1lVG9TdGFydE92ZXJQcm9wZXJ0eURlcml2ZWRTdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGltZVRvU3RhcnRPdmVyUHJvcGVydHkgXSxcclxuICAgICAgdGltZVRvU3RhcnRPdmVyID0+IGB0aW1lIHRvIFN0YXJ0IE92ZXIgPSAke1V0aWxzLnJvdW5kU3ltbWV0cmljKCB0aW1lVG9TdGFydE92ZXIgKX0gbXNgXHJcbiAgICApO1xyXG4gICAgdGltZVRvU3RhcnRPdmVyUHJvcGVydHlEZXJpdmVkU3RyaW5nUHJvcGVydHkubGluayggdGltZVRvU3RhcnRPdmVyU3RyaW5nID0+IGNvbnNvbGUubG9nKCB0aW1lVG9TdGFydE92ZXJTdHJpbmcgKSApO1xyXG5cclxuICAgIC8vIFRpbWUgdGhhdCBpdCBsYXN0IHRvb2sgdG8gcGVyZm9ybSB0aGUgJ1N0YXJ0IE92ZXInIGJ1dHRvbiBjYWxsYmFjay5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvbmF0dXJhbC1zZWxlY3Rpb24vaXNzdWVzLzE0MFxyXG4gICAgY29uc3QgdGltZVRvU3RhcnRPdmVyTm9kZSA9IG5ldyBUZXh0KCB0aW1lVG9TdGFydE92ZXJQcm9wZXJ0eURlcml2ZWRTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLklOU1RSVUNUSU9OU19GT05UXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgdGltZVRvTWF0ZU5vZGUsIHRpbWVUb1N0YXJ0T3Zlck5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdQZXJmb3JtYW5jZVRpbWVzTm9kZScsIFBlcmZvcm1hbmNlVGltZXNOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBRXBFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFDbkYsU0FBaUNDLElBQUksRUFBRUMsSUFBSSxRQUFxQixtQ0FBbUM7QUFDbkcsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQU12RSxlQUFlLE1BQU1DLG9CQUFvQixTQUFTSCxJQUFJLENBQUM7RUFFOUNJLFdBQVdBLENBQUVDLGtCQUE2QyxFQUM3Q0MsdUJBQWtELEVBQ2xEQyxlQUE2QyxFQUFHO0lBRWxFLE1BQU1DLE9BQU8sR0FBR1YsU0FBUyxDQUF3RCxDQUFDLENBQUU7TUFFbEY7TUFDQVcsS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxFQUFFSCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1JLCtCQUErQixHQUFHLElBQUlmLGVBQWUsQ0FBRSxDQUFFUyxrQkFBa0IsQ0FBRSxFQUNqRk8sVUFBVSxJQUFLLGtCQUFpQmYsS0FBSyxDQUFDZ0IsY0FBYyxDQUFFRCxVQUFXLENBQUUsS0FDckUsQ0FBQztJQUNERCwrQkFBK0IsQ0FBQ0csSUFBSSxDQUFFQyxnQkFBZ0IsSUFBSUMsT0FBTyxDQUFDQyxHQUFHLENBQUVGLGdCQUFpQixDQUFFLENBQUM7O0lBRTNGO0lBQ0E7SUFDQSxNQUFNRyxjQUFjLEdBQUcsSUFBSW5CLElBQUksQ0FBRVksK0JBQStCLEVBQUU7TUFDaEVRLElBQUksRUFBRWpCLHlCQUF5QixDQUFDa0I7SUFDbEMsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsNENBQTRDLEdBQUcsSUFBSXpCLGVBQWUsQ0FBRSxDQUFFVSx1QkFBdUIsQ0FBRSxFQUNuR2dCLGVBQWUsSUFBSyx3QkFBdUJ6QixLQUFLLENBQUNnQixjQUFjLENBQUVTLGVBQWdCLENBQUUsS0FDckYsQ0FBQztJQUNERCw0Q0FBNEMsQ0FBQ1AsSUFBSSxDQUFFUyxxQkFBcUIsSUFBSVAsT0FBTyxDQUFDQyxHQUFHLENBQUVNLHFCQUFzQixDQUFFLENBQUM7O0lBRWxIO0lBQ0E7SUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJekIsSUFBSSxDQUFFc0IsNENBQTRDLEVBQUU7TUFDbEZGLElBQUksRUFBRWpCLHlCQUF5QixDQUFDa0I7SUFDbEMsQ0FBRSxDQUFDO0lBRUhaLE9BQU8sQ0FBQ2lCLFFBQVEsR0FBRyxDQUFFUCxjQUFjLEVBQUVNLG1CQUFtQixDQUFFO0lBRTFELEtBQUssQ0FBRWhCLE9BQVEsQ0FBQztFQUNsQjtFQUVnQmtCLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBekIsZ0JBQWdCLENBQUMyQixRQUFRLENBQUUsc0JBQXNCLEVBQUV6QixvQkFBcUIsQ0FBQyJ9