// Copyright 2019-2022, University of Colorado Boulder

/**
 * MemoryLimitDialog is displayed when the sim has hit its memory limit.
 *
 * It's possible to put this sim in a state where the population stabilizes, and the sim will run forever. The sim
 * would continue to create data points for the Population graph, and would eventually crash the browser. So the sim
 * has a limit on the number of generations, see maxGenerations in NaturalSelectionQueryParameters. When this limit
 * is reached, the sim stops, MemoryLimitDialog is displayed, and the student can review the final state of the sim.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { optionize4 } from '../../../../phet-core/js/optionize.js';
import OopsDialog from '../../../../scenery-phet/js/OopsDialog.js';
import { Image } from '../../../../scenery/js/imports.js';
import bunnyBrownFurStraightEarsLongTeeth_png from '../../../images/bunnyBrownFurStraightEarsLongTeeth_png.js';
import naturalSelection from '../../naturalSelection.js';
import NaturalSelectionStrings from '../../NaturalSelectionStrings.js';
import NaturalSelectionConstants from '../NaturalSelectionConstants.js';

// constants
const ICON_SCALE = 0.75;
export default class MemoryLimitDialog extends OopsDialog {
  constructor(providedOptions) {
    const iconNode = new Image(bunnyBrownFurStraightEarsLongTeeth_png);
    iconNode.setScaleMagnitude(-ICON_SCALE, ICON_SCALE);
    const options = optionize4()({}, NaturalSelectionConstants.DIALOG_OPTIONS, {
      // OopsDialogOptions
      topMargin: 50,
      bottomMargin: 50,
      iconNode: iconNode,
      richTextOptions: {
        font: NaturalSelectionConstants.DIALOG_FONT
      },
      phetioReadOnly: true,
      phetioDocumentation: 'This dialog is displayed when the sim has reached its memory limit.'
    }, providedOptions);
    super(NaturalSelectionStrings.memoryLimitMessageStringProperty, options);
  }
}
naturalSelection.register('MemoryLimitDialog', MemoryLimitDialog);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemU0IiwiT29wc0RpYWxvZyIsIkltYWdlIiwiYnVubnlCcm93bkZ1clN0cmFpZ2h0RWFyc0xvbmdUZWV0aF9wbmciLCJuYXR1cmFsU2VsZWN0aW9uIiwiTmF0dXJhbFNlbGVjdGlvblN0cmluZ3MiLCJOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzIiwiSUNPTl9TQ0FMRSIsIk1lbW9yeUxpbWl0RGlhbG9nIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJpY29uTm9kZSIsInNldFNjYWxlTWFnbml0dWRlIiwib3B0aW9ucyIsIkRJQUxPR19PUFRJT05TIiwidG9wTWFyZ2luIiwiYm90dG9tTWFyZ2luIiwicmljaFRleHRPcHRpb25zIiwiZm9udCIsIkRJQUxPR19GT05UIiwicGhldGlvUmVhZE9ubHkiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwibWVtb3J5TGltaXRNZXNzYWdlU3RyaW5nUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1lbW9yeUxpbWl0RGlhbG9nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1lbW9yeUxpbWl0RGlhbG9nIGlzIGRpc3BsYXllZCB3aGVuIHRoZSBzaW0gaGFzIGhpdCBpdHMgbWVtb3J5IGxpbWl0LlxyXG4gKlxyXG4gKiBJdCdzIHBvc3NpYmxlIHRvIHB1dCB0aGlzIHNpbSBpbiBhIHN0YXRlIHdoZXJlIHRoZSBwb3B1bGF0aW9uIHN0YWJpbGl6ZXMsIGFuZCB0aGUgc2ltIHdpbGwgcnVuIGZvcmV2ZXIuIFRoZSBzaW1cclxuICogd291bGQgY29udGludWUgdG8gY3JlYXRlIGRhdGEgcG9pbnRzIGZvciB0aGUgUG9wdWxhdGlvbiBncmFwaCwgYW5kIHdvdWxkIGV2ZW50dWFsbHkgY3Jhc2ggdGhlIGJyb3dzZXIuIFNvIHRoZSBzaW1cclxuICogaGFzIGEgbGltaXQgb24gdGhlIG51bWJlciBvZiBnZW5lcmF0aW9ucywgc2VlIG1heEdlbmVyYXRpb25zIGluIE5hdHVyYWxTZWxlY3Rpb25RdWVyeVBhcmFtZXRlcnMuIFdoZW4gdGhpcyBsaW1pdFxyXG4gKiBpcyByZWFjaGVkLCB0aGUgc2ltIHN0b3BzLCBNZW1vcnlMaW1pdERpYWxvZyBpcyBkaXNwbGF5ZWQsIGFuZCB0aGUgc3R1ZGVudCBjYW4gcmV2aWV3IHRoZSBmaW5hbCBzdGF0ZSBvZiB0aGUgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMsIG9wdGlvbml6ZTQgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IE9vcHNEaWFsb2csIHsgT29wc0RpYWxvZ09wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvT29wc0RpYWxvZy5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJ1bm55QnJvd25GdXJTdHJhaWdodEVhcnNMb25nVGVldGhfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9idW5ueUJyb3duRnVyU3RyYWlnaHRFYXJzTG9uZ1RlZXRoX3BuZy5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5pbXBvcnQgTmF0dXJhbFNlbGVjdGlvblN0cmluZ3MgZnJvbSAnLi4vLi4vTmF0dXJhbFNlbGVjdGlvblN0cmluZ3MuanMnO1xyXG5pbXBvcnQgTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyBmcm9tICcuLi9OYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBJQ09OX1NDQUxFID0gMC43NTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBNZW1vcnlMaW1pdERpYWxvZ09wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxPb3BzRGlhbG9nT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVtb3J5TGltaXREaWFsb2cgZXh0ZW5kcyBPb3BzRGlhbG9nIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IE1lbW9yeUxpbWl0RGlhbG9nT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBpY29uTm9kZSA9IG5ldyBJbWFnZSggYnVubnlCcm93bkZ1clN0cmFpZ2h0RWFyc0xvbmdUZWV0aF9wbmcgKTtcclxuICAgIGljb25Ob2RlLnNldFNjYWxlTWFnbml0dWRlKCAtSUNPTl9TQ0FMRSwgSUNPTl9TQ0FMRSApO1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU0PE1lbW9yeUxpbWl0RGlhbG9nT3B0aW9ucywgU2VsZk9wdGlvbnMsIE9vcHNEaWFsb2dPcHRpb25zPigpKFxyXG4gICAgICB7fSwgTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cy5ESUFMT0dfT1BUSU9OUywge1xyXG5cclxuICAgICAgICAvLyBPb3BzRGlhbG9nT3B0aW9uc1xyXG4gICAgICAgIHRvcE1hcmdpbjogNTAsXHJcbiAgICAgICAgYm90dG9tTWFyZ2luOiA1MCxcclxuICAgICAgICBpY29uTm9kZTogaWNvbk5vZGUsXHJcbiAgICAgICAgcmljaFRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgICBmb250OiBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLkRJQUxPR19GT05UXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVGhpcyBkaWFsb2cgaXMgZGlzcGxheWVkIHdoZW4gdGhlIHNpbSBoYXMgcmVhY2hlZCBpdHMgbWVtb3J5IGxpbWl0LidcclxuICAgICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIE5hdHVyYWxTZWxlY3Rpb25TdHJpbmdzLm1lbW9yeUxpbWl0TWVzc2FnZVN0cmluZ1Byb3BlcnR5LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5uYXR1cmFsU2VsZWN0aW9uLnJlZ2lzdGVyKCAnTWVtb3J5TGltaXREaWFsb2cnLCBNZW1vcnlMaW1pdERpYWxvZyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBMkJBLFVBQVUsUUFBUSx1Q0FBdUM7QUFFcEYsT0FBT0MsVUFBVSxNQUE2QiwyQ0FBMkM7QUFDekYsU0FBU0MsS0FBSyxRQUFRLG1DQUFtQztBQUN6RCxPQUFPQyxzQ0FBc0MsTUFBTSwyREFBMkQ7QUFDOUcsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyx5QkFBeUIsTUFBTSxpQ0FBaUM7O0FBRXZFO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUk7QUFNdkIsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU1AsVUFBVSxDQUFDO0VBRWpEUSxXQUFXQSxDQUFFQyxlQUF5QyxFQUFHO0lBRTlELE1BQU1DLFFBQVEsR0FBRyxJQUFJVCxLQUFLLENBQUVDLHNDQUF1QyxDQUFDO0lBQ3BFUSxRQUFRLENBQUNDLGlCQUFpQixDQUFFLENBQUNMLFVBQVUsRUFBRUEsVUFBVyxDQUFDO0lBRXJELE1BQU1NLE9BQU8sR0FBR2IsVUFBVSxDQUEyRCxDQUFDLENBQ3BGLENBQUMsQ0FBQyxFQUFFTSx5QkFBeUIsQ0FBQ1EsY0FBYyxFQUFFO01BRTVDO01BQ0FDLFNBQVMsRUFBRSxFQUFFO01BQ2JDLFlBQVksRUFBRSxFQUFFO01BQ2hCTCxRQUFRLEVBQUVBLFFBQVE7TUFDbEJNLGVBQWUsRUFBRTtRQUNmQyxJQUFJLEVBQUVaLHlCQUF5QixDQUFDYTtNQUNsQyxDQUFDO01BQ0RDLGNBQWMsRUFBRSxJQUFJO01BQ3BCQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFDLEVBQUVYLGVBQWdCLENBQUM7SUFFdEIsS0FBSyxDQUFFTCx1QkFBdUIsQ0FBQ2lCLGdDQUFnQyxFQUFFVCxPQUFRLENBQUM7RUFDNUU7QUFDRjtBQUVBVCxnQkFBZ0IsQ0FBQ21CLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRWYsaUJBQWtCLENBQUMifQ==