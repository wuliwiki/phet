// Copyright 2019-2022, University of Colorado Boulder

/**
 * PopulationNode is the parent for all parts of the 'Population' view.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../../phet-core/js/optionize.js';
import { Node } from '../../../../../scenery/js/imports.js';
import naturalSelection from '../../../naturalSelection.js';
import NaturalSelectionConstants from '../../NaturalSelectionConstants.js';
import PopulationGraphNode from './PopulationGraphNode.js';
import PopulationPanel from './PopulationPanel.js';
export default class PopulationNode extends Node {
  /**
   * @param populationModel
   * @param size - dimensions of the rectangle available for this Node and its children
   * @param [providedOptions]
   */
  constructor(populationModel, size, providedOptions) {
    const options = optionize()({
      // NodeOptions
      phetioDocumentation: 'the Population graph and its control panel',
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);

    // Divvy up the width
    const panelWidth = 175; // determined empirically
    const graphWidth = size.width - panelWidth - NaturalSelectionConstants.SCREEN_VIEW_X_SPACING;
    const populationPanel = new PopulationPanel(populationModel, {
      fixedWidth: panelWidth,
      maxHeight: size.height,
      tandem: options.tandem.createTandem('populationPanel')
    });
    const populationGraphNode = new PopulationGraphNode(populationModel, {
      graphWidth: graphWidth,
      graphHeight: size.height,
      y: populationPanel.top,
      left: populationPanel.right + NaturalSelectionConstants.SCREEN_VIEW_X_SPACING,
      tandem: options.tandem.createTandem('populationGraphNode')
    });
    options.children = [populationPanel, populationGraphNode];
    super(options);

    // Create a Studio link to the model
    this.addLinkedElement(populationModel, {
      tandem: options.tandem.createTandem('populationModel')
    });
    this.populationPanel = populationPanel;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Sets visibility of the UI components related to a specific gene.
   */
  setGeneVisible(gene, visible) {
    this.populationPanel.setGeneVisible(gene, visible);
  }
}
naturalSelection.register('PopulationNode', PopulationNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwibmF0dXJhbFNlbGVjdGlvbiIsIk5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMiLCJQb3B1bGF0aW9uR3JhcGhOb2RlIiwiUG9wdWxhdGlvblBhbmVsIiwiUG9wdWxhdGlvbk5vZGUiLCJjb25zdHJ1Y3RvciIsInBvcHVsYXRpb25Nb2RlbCIsInNpemUiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInZpc2libGVQcm9wZXJ0eU9wdGlvbnMiLCJwaGV0aW9SZWFkT25seSIsInBhbmVsV2lkdGgiLCJncmFwaFdpZHRoIiwid2lkdGgiLCJTQ1JFRU5fVklFV19YX1NQQUNJTkciLCJwb3B1bGF0aW9uUGFuZWwiLCJmaXhlZFdpZHRoIiwibWF4SGVpZ2h0IiwiaGVpZ2h0IiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicG9wdWxhdGlvbkdyYXBoTm9kZSIsImdyYXBoSGVpZ2h0IiwieSIsInRvcCIsImxlZnQiLCJyaWdodCIsImNoaWxkcmVuIiwiYWRkTGlua2VkRWxlbWVudCIsImRpc3Bvc2UiLCJhc3NlcnQiLCJzZXRHZW5lVmlzaWJsZSIsImdlbmUiLCJ2aXNpYmxlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQb3B1bGF0aW9uTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQb3B1bGF0aW9uTm9kZSBpcyB0aGUgcGFyZW50IGZvciBhbGwgcGFydHMgb2YgdGhlICdQb3B1bGF0aW9uJyB2aWV3LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBOb2RlVHJhbnNsYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBHZW5lIGZyb20gJy4uLy4uL21vZGVsL0dlbmUuanMnO1xyXG5pbXBvcnQgUG9wdWxhdGlvbk1vZGVsIGZyb20gJy4uLy4uL21vZGVsL1BvcHVsYXRpb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL05hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgUG9wdWxhdGlvbkdyYXBoTm9kZSBmcm9tICcuL1BvcHVsYXRpb25HcmFwaE5vZGUuanMnO1xyXG5pbXBvcnQgUG9wdWxhdGlvblBhbmVsIGZyb20gJy4vUG9wdWxhdGlvblBhbmVsLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBQb3B1bGF0aW9uTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVsYXRpb25Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgcG9wdWxhdGlvblBhbmVsOiBQb3B1bGF0aW9uUGFuZWw7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwb3B1bGF0aW9uTW9kZWxcclxuICAgKiBAcGFyYW0gc2l6ZSAtIGRpbWVuc2lvbnMgb2YgdGhlIHJlY3RhbmdsZSBhdmFpbGFibGUgZm9yIHRoaXMgTm9kZSBhbmQgaXRzIGNoaWxkcmVuXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwb3B1bGF0aW9uTW9kZWw6IFBvcHVsYXRpb25Nb2RlbCwgc2l6ZTogRGltZW5zaW9uMiwgcHJvdmlkZWRPcHRpb25zOiBQb3B1bGF0aW9uTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQb3B1bGF0aW9uTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTm9kZU9wdGlvbnNcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3RoZSBQb3B1bGF0aW9uIGdyYXBoIGFuZCBpdHMgY29udHJvbCBwYW5lbCcsXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHsgcGhldGlvUmVhZE9ubHk6IHRydWUgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gRGl2dnkgdXAgdGhlIHdpZHRoXHJcbiAgICBjb25zdCBwYW5lbFdpZHRoID0gMTc1OyAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICBjb25zdCBncmFwaFdpZHRoID0gc2l6ZS53aWR0aCAtIHBhbmVsV2lkdGggLSBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLlNDUkVFTl9WSUVXX1hfU1BBQ0lORztcclxuXHJcbiAgICBjb25zdCBwb3B1bGF0aW9uUGFuZWwgPSBuZXcgUG9wdWxhdGlvblBhbmVsKCBwb3B1bGF0aW9uTW9kZWwsIHtcclxuICAgICAgZml4ZWRXaWR0aDogcGFuZWxXaWR0aCxcclxuICAgICAgbWF4SGVpZ2h0OiBzaXplLmhlaWdodCxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwb3B1bGF0aW9uUGFuZWwnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBwb3B1bGF0aW9uR3JhcGhOb2RlID0gbmV3IFBvcHVsYXRpb25HcmFwaE5vZGUoIHBvcHVsYXRpb25Nb2RlbCwge1xyXG4gICAgICBncmFwaFdpZHRoOiBncmFwaFdpZHRoLFxyXG4gICAgICBncmFwaEhlaWdodDogc2l6ZS5oZWlnaHQsXHJcbiAgICAgIHk6IHBvcHVsYXRpb25QYW5lbC50b3AsXHJcbiAgICAgIGxlZnQ6IHBvcHVsYXRpb25QYW5lbC5yaWdodCArIE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuU0NSRUVOX1ZJRVdfWF9TUEFDSU5HLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BvcHVsYXRpb25HcmFwaE5vZGUnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBwb3B1bGF0aW9uUGFuZWwsIHBvcHVsYXRpb25HcmFwaE5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIFN0dWRpbyBsaW5rIHRvIHRoZSBtb2RlbFxyXG4gICAgdGhpcy5hZGRMaW5rZWRFbGVtZW50KCBwb3B1bGF0aW9uTW9kZWwsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwb3B1bGF0aW9uTW9kZWwnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnBvcHVsYXRpb25QYW5lbCA9IHBvcHVsYXRpb25QYW5lbDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHZpc2liaWxpdHkgb2YgdGhlIFVJIGNvbXBvbmVudHMgcmVsYXRlZCB0byBhIHNwZWNpZmljIGdlbmUuXHJcbiAgICovXHJcbiAgcHVibGljIHNldEdlbmVWaXNpYmxlKCBnZW5lOiBHZW5lLCB2aXNpYmxlOiBib29sZWFuICk6IHZvaWQge1xyXG4gICAgdGhpcy5wb3B1bGF0aW9uUGFuZWwuc2V0R2VuZVZpc2libGUoIGdlbmUsIHZpc2libGUgKTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdQb3B1bGF0aW9uTm9kZScsIFBvcHVsYXRpb25Ob2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBNEIsMENBQTBDO0FBRXRGLFNBQVNDLElBQUksUUFBNkMsc0NBQXNDO0FBQ2hHLE9BQU9DLGdCQUFnQixNQUFNLDhCQUE4QjtBQUczRCxPQUFPQyx5QkFBeUIsTUFBTSxvQ0FBb0M7QUFDMUUsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBQzFELE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFNbEQsZUFBZSxNQUFNQyxjQUFjLFNBQVNMLElBQUksQ0FBQztFQUkvQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NNLFdBQVdBLENBQUVDLGVBQWdDLEVBQUVDLElBQWdCLEVBQUVDLGVBQXNDLEVBQUc7SUFFL0csTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQWtELENBQUMsQ0FBRTtNQUU1RTtNQUNBWSxtQkFBbUIsRUFBRSw0Q0FBNEM7TUFDakVDLHNCQUFzQixFQUFFO1FBQUVDLGNBQWMsRUFBRTtNQUFLO0lBQ2pELENBQUMsRUFBRUosZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNSyxVQUFVLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDeEIsTUFBTUMsVUFBVSxHQUFHUCxJQUFJLENBQUNRLEtBQUssR0FBR0YsVUFBVSxHQUFHWix5QkFBeUIsQ0FBQ2UscUJBQXFCO0lBRTVGLE1BQU1DLGVBQWUsR0FBRyxJQUFJZCxlQUFlLENBQUVHLGVBQWUsRUFBRTtNQUM1RFksVUFBVSxFQUFFTCxVQUFVO01BQ3RCTSxTQUFTLEVBQUVaLElBQUksQ0FBQ2EsTUFBTTtNQUN0QkMsTUFBTSxFQUFFWixPQUFPLENBQUNZLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLGlCQUFrQjtJQUN6RCxDQUFFLENBQUM7SUFFSCxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJckIsbUJBQW1CLENBQUVJLGVBQWUsRUFBRTtNQUNwRVEsVUFBVSxFQUFFQSxVQUFVO01BQ3RCVSxXQUFXLEVBQUVqQixJQUFJLENBQUNhLE1BQU07TUFDeEJLLENBQUMsRUFBRVIsZUFBZSxDQUFDUyxHQUFHO01BQ3RCQyxJQUFJLEVBQUVWLGVBQWUsQ0FBQ1csS0FBSyxHQUFHM0IseUJBQXlCLENBQUNlLHFCQUFxQjtNQUM3RUssTUFBTSxFQUFFWixPQUFPLENBQUNZLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHFCQUFzQjtJQUM3RCxDQUFFLENBQUM7SUFFSGIsT0FBTyxDQUFDb0IsUUFBUSxHQUFHLENBQUVaLGVBQWUsRUFBRU0sbUJBQW1CLENBQUU7SUFFM0QsS0FBSyxDQUFFZCxPQUFRLENBQUM7O0lBRWhCO0lBQ0EsSUFBSSxDQUFDcUIsZ0JBQWdCLENBQUV4QixlQUFlLEVBQUU7TUFDdENlLE1BQU0sRUFBRVosT0FBTyxDQUFDWSxNQUFNLENBQUNDLFlBQVksQ0FBRSxpQkFBa0I7SUFDekQsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDTCxlQUFlLEdBQUdBLGVBQWU7RUFDeEM7RUFFZ0JjLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NFLGNBQWNBLENBQUVDLElBQVUsRUFBRUMsT0FBZ0IsRUFBUztJQUMxRCxJQUFJLENBQUNsQixlQUFlLENBQUNnQixjQUFjLENBQUVDLElBQUksRUFBRUMsT0FBUSxDQUFDO0VBQ3REO0FBQ0Y7QUFFQW5DLGdCQUFnQixDQUFDb0MsUUFBUSxDQUFFLGdCQUFnQixFQUFFaEMsY0FBZSxDQUFDIn0=