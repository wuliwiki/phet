// Copyright 2019-2022, University of Colorado Boulder

/**
 * PopulationLegendCheckbox is a checkbox in the control panel for the Population graph.
 * It serves as a legend (shows the color and line style used for a plot) and controls visibility of a plot.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { optionize4 } from '../../../../../phet-core/js/optionize.js';
import { AlignBox, HBox, Line, Text } from '../../../../../scenery/js/imports.js';
import Checkbox from '../../../../../sun/js/Checkbox.js';
import naturalSelection from '../../../naturalSelection.js';
import NaturalSelectionConstants from '../../NaturalSelectionConstants.js';

// constants
const LINE_DASH = NaturalSelectionConstants.POPULATION_MUTANT_LINE_DASH;

// Compute line length so that we have uniform dash length
assert && assert(LINE_DASH.length === 2, 'unsupported LINE_DASH');
const NUMBER_OF_DASHES = 5;
const LINE_LENGTH = NUMBER_OF_DASHES * LINE_DASH[0] + (NUMBER_OF_DASHES - 1) * LINE_DASH[1];
export default class PopulationLegendCheckbox extends Checkbox {
  /**
   * @param plotVisibleProperty - visibility of the associated plot on the Population graph
   * @param labelStringProperty - the label on the checkbox
   * @param contentAlignGroup - to make all checkbox content have the same effective size
   * @param [providedOptions]
   */
  constructor(plotVisibleProperty, labelStringProperty, contentAlignGroup, providedOptions) {
    const options = optionize4()({}, NaturalSelectionConstants.CHECKBOX_OPTIONS, {
      lineColor: 'black',
      isLineDashed: false
    }, providedOptions);

    // solid or dashed line
    const lineNode = new Line(0, 0, LINE_LENGTH, 0, {
      lineWidth: 3,
      stroke: options.lineColor,
      lineDash: options.isLineDashed ? LINE_DASH : []
    });

    // text label
    const labelText = new Text(labelStringProperty, {
      font: NaturalSelectionConstants.CHECKBOX_FONT,
      maxWidth: 100,
      // determined empirically
      tandem: options.tandem.createTandem('labelText')
    });
    const hBox = new HBox({
      spacing: 5,
      children: [lineNode, labelText]
    });
    const content = new AlignBox(hBox, {
      group: contentAlignGroup,
      xAlign: 'left'
    });
    super(plotVisibleProperty, content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
naturalSelection.register('PopulationLegendCheckbox', PopulationLegendCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemU0IiwiQWxpZ25Cb3giLCJIQm94IiwiTGluZSIsIlRleHQiLCJDaGVja2JveCIsIm5hdHVyYWxTZWxlY3Rpb24iLCJOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzIiwiTElORV9EQVNIIiwiUE9QVUxBVElPTl9NVVRBTlRfTElORV9EQVNIIiwiYXNzZXJ0IiwibGVuZ3RoIiwiTlVNQkVSX09GX0RBU0hFUyIsIkxJTkVfTEVOR1RIIiwiUG9wdWxhdGlvbkxlZ2VuZENoZWNrYm94IiwiY29uc3RydWN0b3IiLCJwbG90VmlzaWJsZVByb3BlcnR5IiwibGFiZWxTdHJpbmdQcm9wZXJ0eSIsImNvbnRlbnRBbGlnbkdyb3VwIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIkNIRUNLQk9YX09QVElPTlMiLCJsaW5lQ29sb3IiLCJpc0xpbmVEYXNoZWQiLCJsaW5lTm9kZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsImxpbmVEYXNoIiwibGFiZWxUZXh0IiwiZm9udCIsIkNIRUNLQk9YX0ZPTlQiLCJtYXhXaWR0aCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImhCb3giLCJzcGFjaW5nIiwiY2hpbGRyZW4iLCJjb250ZW50IiwiZ3JvdXAiLCJ4QWxpZ24iLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQb3B1bGF0aW9uTGVnZW5kQ2hlY2tib3gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUG9wdWxhdGlvbkxlZ2VuZENoZWNrYm94IGlzIGEgY2hlY2tib3ggaW4gdGhlIGNvbnRyb2wgcGFuZWwgZm9yIHRoZSBQb3B1bGF0aW9uIGdyYXBoLlxyXG4gKiBJdCBzZXJ2ZXMgYXMgYSBsZWdlbmQgKHNob3dzIHRoZSBjb2xvciBhbmQgbGluZSBzdHlsZSB1c2VkIGZvciBhIHBsb3QpIGFuZCBjb250cm9scyB2aXNpYmlsaXR5IG9mIGEgcGxvdC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgb3B0aW9uaXplNCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBBbGlnbkJveCwgQWxpZ25Hcm91cCwgSEJveCwgTGluZSwgVENvbG9yLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94LCB7IENoZWNrYm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5pbXBvcnQgTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyBmcm9tICcuLi8uLi9OYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBMSU5FX0RBU0ggPSBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLlBPUFVMQVRJT05fTVVUQU5UX0xJTkVfREFTSDtcclxuXHJcbi8vIENvbXB1dGUgbGluZSBsZW5ndGggc28gdGhhdCB3ZSBoYXZlIHVuaWZvcm0gZGFzaCBsZW5ndGhcclxuYXNzZXJ0ICYmIGFzc2VydCggTElORV9EQVNILmxlbmd0aCA9PT0gMiwgJ3Vuc3VwcG9ydGVkIExJTkVfREFTSCcgKTtcclxuY29uc3QgTlVNQkVSX09GX0RBU0hFUyA9IDU7XHJcbmNvbnN0IExJTkVfTEVOR1RIID0gTlVNQkVSX09GX0RBU0hFUyAqIExJTkVfREFTSFsgMCBdICsgKCBOVU1CRVJfT0ZfREFTSEVTIC0gMSApICogTElORV9EQVNIWyAxIF07XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGxpbmVDb2xvcj86IFRDb2xvcjtcclxuICBpc0xpbmVEYXNoZWQ/OiBib29sZWFuO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUG9wdWxhdGlvbkxlZ2VuZENoZWNrYm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPENoZWNrYm94T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdWxhdGlvbkxlZ2VuZENoZWNrYm94IGV4dGVuZHMgQ2hlY2tib3gge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcGxvdFZpc2libGVQcm9wZXJ0eSAtIHZpc2liaWxpdHkgb2YgdGhlIGFzc29jaWF0ZWQgcGxvdCBvbiB0aGUgUG9wdWxhdGlvbiBncmFwaFxyXG4gICAqIEBwYXJhbSBsYWJlbFN0cmluZ1Byb3BlcnR5IC0gdGhlIGxhYmVsIG9uIHRoZSBjaGVja2JveFxyXG4gICAqIEBwYXJhbSBjb250ZW50QWxpZ25Hcm91cCAtIHRvIG1ha2UgYWxsIGNoZWNrYm94IGNvbnRlbnQgaGF2ZSB0aGUgc2FtZSBlZmZlY3RpdmUgc2l6ZVxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcGxvdFZpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbFN0cmluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudEFsaWduR3JvdXA6IEFsaWduR3JvdXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IFBvcHVsYXRpb25MZWdlbmRDaGVja2JveE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTQ8UG9wdWxhdGlvbkxlZ2VuZENoZWNrYm94T3B0aW9ucywgU2VsZk9wdGlvbnMsIENoZWNrYm94T3B0aW9ucz4oKShcclxuICAgICAge30sIE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuQ0hFQ0tCT1hfT1BUSU9OUywge1xyXG4gICAgICAgIGxpbmVDb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICBpc0xpbmVEYXNoZWQ6IGZhbHNlXHJcbiAgICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHNvbGlkIG9yIGRhc2hlZCBsaW5lXHJcbiAgICBjb25zdCBsaW5lTm9kZSA9IG5ldyBMaW5lKCAwLCAwLCBMSU5FX0xFTkdUSCwgMCwge1xyXG4gICAgICBsaW5lV2lkdGg6IDMsXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5saW5lQ29sb3IsXHJcbiAgICAgIGxpbmVEYXNoOiAoIG9wdGlvbnMuaXNMaW5lRGFzaGVkID8gTElORV9EQVNIIDogW10gKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHRleHQgbGFiZWxcclxuICAgIGNvbnN0IGxhYmVsVGV4dCA9IG5ldyBUZXh0KCBsYWJlbFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuQ0hFQ0tCT1hfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDEwMCwgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsVGV4dCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGhCb3ggPSBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiA1LFxyXG4gICAgICBjaGlsZHJlbjogWyBsaW5lTm9kZSwgbGFiZWxUZXh0IF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gbmV3IEFsaWduQm94KCBoQm94LCB7XHJcbiAgICAgIGdyb3VwOiBjb250ZW50QWxpZ25Hcm91cCxcclxuICAgICAgeEFsaWduOiAnbGVmdCdcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggcGxvdFZpc2libGVQcm9wZXJ0eSwgY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdQb3B1bGF0aW9uTGVnZW5kQ2hlY2tib3gnLCBQb3B1bGF0aW9uTGVnZW5kQ2hlY2tib3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFTQSxVQUFVLFFBQVEsMENBQTBDO0FBRXJFLFNBQVNDLFFBQVEsRUFBY0MsSUFBSSxFQUFFQyxJQUFJLEVBQVVDLElBQUksUUFBUSxzQ0FBc0M7QUFDckcsT0FBT0MsUUFBUSxNQUEyQixtQ0FBbUM7QUFDN0UsT0FBT0MsZ0JBQWdCLE1BQU0sOEJBQThCO0FBQzNELE9BQU9DLHlCQUF5QixNQUFNLG9DQUFvQzs7QUFFMUU7QUFDQSxNQUFNQyxTQUFTLEdBQUdELHlCQUF5QixDQUFDRSwyQkFBMkI7O0FBRXZFO0FBQ0FDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixTQUFTLENBQUNHLE1BQU0sS0FBSyxDQUFDLEVBQUUsdUJBQXdCLENBQUM7QUFDbkUsTUFBTUMsZ0JBQWdCLEdBQUcsQ0FBQztBQUMxQixNQUFNQyxXQUFXLEdBQUdELGdCQUFnQixHQUFHSixTQUFTLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBRUksZ0JBQWdCLEdBQUcsQ0FBQyxJQUFLSixTQUFTLENBQUUsQ0FBQyxDQUFFO0FBU2pHLGVBQWUsTUFBTU0sd0JBQXdCLFNBQVNULFFBQVEsQ0FBQztFQUU3RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU1UsV0FBV0EsQ0FBRUMsbUJBQXNDLEVBQ3RDQyxtQkFBOEMsRUFDOUNDLGlCQUE2QixFQUM3QkMsZUFBZ0QsRUFBRztJQUVyRSxNQUFNQyxPQUFPLEdBQUdwQixVQUFVLENBQWdFLENBQUMsQ0FDekYsQ0FBQyxDQUFDLEVBQUVPLHlCQUF5QixDQUFDYyxnQkFBZ0IsRUFBRTtNQUM5Q0MsU0FBUyxFQUFFLE9BQU87TUFDbEJDLFlBQVksRUFBRTtJQUNoQixDQUFDLEVBQUVKLGVBQWdCLENBQUM7O0lBRXRCO0lBQ0EsTUFBTUssUUFBUSxHQUFHLElBQUlyQixJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVUsV0FBVyxFQUFFLENBQUMsRUFBRTtNQUMvQ1ksU0FBUyxFQUFFLENBQUM7TUFDWkMsTUFBTSxFQUFFTixPQUFPLENBQUNFLFNBQVM7TUFDekJLLFFBQVEsRUFBSVAsT0FBTyxDQUFDRyxZQUFZLEdBQUdmLFNBQVMsR0FBRztJQUNqRCxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNb0IsU0FBUyxHQUFHLElBQUl4QixJQUFJLENBQUVhLG1CQUFtQixFQUFFO01BQy9DWSxJQUFJLEVBQUV0Qix5QkFBeUIsQ0FBQ3VCLGFBQWE7TUFDN0NDLFFBQVEsRUFBRSxHQUFHO01BQUU7TUFDZkMsTUFBTSxFQUFFWixPQUFPLENBQUNZLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFdBQVk7SUFDbkQsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsSUFBSSxHQUFHLElBQUloQyxJQUFJLENBQUU7TUFDckJpQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxRQUFRLEVBQUUsQ0FBRVosUUFBUSxFQUFFSSxTQUFTO0lBQ2pDLENBQUUsQ0FBQztJQUVILE1BQU1TLE9BQU8sR0FBRyxJQUFJcEMsUUFBUSxDQUFFaUMsSUFBSSxFQUFFO01BQ2xDSSxLQUFLLEVBQUVwQixpQkFBaUI7TUFDeEJxQixNQUFNLEVBQUU7SUFDVixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUV2QixtQkFBbUIsRUFBRXFCLE9BQU8sRUFBRWpCLE9BQVEsQ0FBQztFQUNoRDtFQUVnQm9CLE9BQU9BLENBQUEsRUFBUztJQUM5QjlCLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUM4QixPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFsQyxnQkFBZ0IsQ0FBQ21DLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRTNCLHdCQUF5QixDQUFDIn0=