// Copyright 2019-2023, University of Colorado Boulder

/**
 * PopulationGridNode is the 2D grid for the Population graph, including grid lines and tick marks.
 * The grid scrolls horizontally as the x-axis range changes, and zooms in/out vertically as the y-axis range changes.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../../kite/js/imports.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../../scenery-phet/js/PhetFont.js';
import { Node, Path, Rectangle, Text } from '../../../../../scenery/js/imports.js';
import naturalSelection from '../../../naturalSelection.js';
import NaturalSelectionColors from '../../NaturalSelectionColors.js';

// constants
const GRID_LINES_LINE_WIDTH = 1;
const TICK_MARKS_LINE_WIDTH = 1;
const TICK_MARKS_LENGTH = 4;
const TICK_LABEL_SPACING = 3;
const TICK_MARKS_FONT = new PhetFont(10);
export default class PopulationGridNode extends Node {
  constructor(populationModel, providedOptions) {
    const options = optionize()({
      // SelfOptions
      gridWidth: 100,
      gridHeight: 100
    }, providedOptions);

    // Background rectangle
    const rectangleNode = new Rectangle(0, 0, options.gridWidth, options.gridHeight, {
      fill: NaturalSelectionColors.POPULATION_GRAPH_FILL
    });

    // Grid lines for the x-axis
    const xGridLines = new VerticalLines(populationModel.xRangeProperty, {
      xAxisWidth: options.gridWidth,
      xSpacingModel: populationModel.xAxisTickSpacing,
      lineLength: options.gridHeight,
      pathOptions: {
        stroke: NaturalSelectionColors.POPULATION_GRID_LINES_STROKE,
        lineWidth: GRID_LINES_LINE_WIDTH
      },
      // Clip to the background bounds, because we'll be horizontally translating the x-axis grid lines
      clipArea: Shape.rectangle(0, 0, options.gridWidth, options.gridHeight)
    });

    // Grid lines for the y-axis
    const yGridLines = new HorizontalLines(populationModel.yRangeProperty, () => populationModel.getYTickSpacing(), {
      yAxisHeight: options.gridHeight,
      lineLength: options.gridWidth,
      stroke: NaturalSelectionColors.POPULATION_GRID_LINES_STROKE,
      lineWidth: GRID_LINES_LINE_WIDTH
    });

    // Group the grid lines, in case we want to be able to show/hide them in the future.
    const gridLinesNode = new Node({
      children: [xGridLines, yGridLines]
    });

    // Tick-mark lines for the x-axis
    const xTickLines = new VerticalLines(populationModel.xRangeProperty, {
      xSpacingModel: populationModel.xAxisTickSpacing,
      xAxisWidth: options.gridWidth,
      lineLength: TICK_MARKS_LENGTH,
      pathOptions: {
        stroke: NaturalSelectionColors.POPULATION_TICK_MARKS_STROKE,
        lineWidth: TICK_MARKS_LINE_WIDTH
      },
      top: rectangleNode.bottom,
      // Clip to the tick mark bounds below the x-axis, because we'll be horizontally translating the x-axis tick marks
      clipArea: Shape.rectangle(0, 0, options.gridWidth, options.gridHeight + TICK_MARKS_LENGTH)
    });

    // Tick-mark labels for the x-axis
    const xTickLabels = new XTickLabels(populationModel.xRangeProperty, {
      xSpacingModel: populationModel.xAxisTickSpacing,
      xAxisWidth: options.gridWidth,
      top: xTickLines.bottom + TICK_LABEL_SPACING
    });

    // Tick-mark lines for the y-axis
    const yTickLines = new HorizontalLines(populationModel.yRangeProperty, () => populationModel.getYTickSpacing(), {
      yAxisHeight: options.gridHeight,
      lineLength: TICK_MARKS_LENGTH,
      stroke: NaturalSelectionColors.POPULATION_TICK_MARKS_STROKE,
      lineWidth: TICK_MARKS_LINE_WIDTH,
      right: rectangleNode.left
    });

    // Tick-mark labels for the y-axis
    const yTickLabels = new YTickLabels(populationModel.yRangeProperty, () => populationModel.getYTickSpacing(), {
      yAxisHeight: options.gridHeight,
      right: yTickLines.left - TICK_LABEL_SPACING
    });

    // Group the tick marks, in case we want to be able to show/hide them in the future.
    const tickMarksNode = new Node({
      children: [xTickLines, xTickLabels, yTickLines, yTickLabels]
    });

    // A crisp frame in the foreground, to hide overlapping of tick marks and grid lines
    const frameNode = new Rectangle(0, 0, options.gridWidth, options.gridHeight, {
      stroke: NaturalSelectionColors.PANEL_STROKE,
      lineWidth: 1.5
    });
    options.children = [rectangleNode, gridLinesNode, tickMarksNode, frameNode];
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}

/**
 * VerticalLines are used for x-axis tick marks and grid lines.  The x-axis tick spacing never changes, but the range
 * changes as time progresses.  So we create a single Shape for the vertical lines, then translate it as the
 * x-axis range changes.  Bounds are clipped to the background dimensions.
 */

class VerticalLines extends Node {
  /**
   * @param xRangeProperty - range of the x-axis, in model coordinates
   * @param [providedOptions]
   */
  constructor(xRangeProperty, providedOptions) {
    const options = optionize()({
      // VerticalLinesSelfOptions
      xSpacingModel: 1,
      xAxisWidth: 100,
      lineLength: 100
    }, providedOptions);

    // Compute the number of lines and their spacing, in view coordinates
    const numberOfLines = getNumberOfVerticalLines(xRangeProperty.value, options.xSpacingModel);
    const xSpacingView = getXSpacingView(xRangeProperty.value, options.xSpacingModel, options.xAxisWidth);

    // Create the lines
    const shape = new Shape();
    for (let i = 0; i < numberOfLines; i++) {
      const x = options.xAxisWidth - i * xSpacingView;
      shape.moveTo(x, 0);
      shape.lineTo(x, options.lineLength);
    }
    const path = new Path(shape, options.pathOptions);

    // Wrapped in a Node because we're going to translate the Path
    options.children = [path];

    // Translate the lines as time progresses. unlink is not necessary.
    xRangeProperty.link(xRange => {
      path.x = -xSpacingView * (xRange.max % options.xSpacingModel / options.xSpacingModel);
    });
    super(options);
  }
  dispose() {
    assert && assert(false, 'VerticalLines does not support dispose');
    super.dispose();
  }
}

/**
 * HorizontalLines are used for y-axis tick marks and grid lines.
 * They are recreated on demand, when the zoom control is used.
 */

class HorizontalLines extends Path {
  /**
   * @param yRangeProperty - range of the y-axis range, in model coordinates
   * @param getYSpacing - gets the y-spacing for the current value of yRangeProperty
   * @param [providedOptions]
   */
  constructor(yRangeProperty, getYSpacing, providedOptions) {
    const options = optionize()({
      // HorizontalLinesSelfOptions
      yAxisHeight: 100,
      lineLength: 100
    }, providedOptions);
    super(new Shape());

    // Recreate the lines when the y-axis range changes. unlink is not necessary.
    yRangeProperty.link(yRange => {
      // Compute the number of lines and their spacing, in view coordinates
      const ySpacingModel = getYSpacing();
      const numberOfLines = getNumberOfHorizontalLines(yRange, ySpacingModel);
      const ySpacingView = getYSpacingView(yRange, ySpacingModel, options.yAxisHeight);

      // Create the grid lines
      const shape = new Shape();
      for (let i = 0; i < numberOfLines; i++) {
        const y = options.yAxisHeight - i * ySpacingView;
        shape.moveTo(0, y);
        shape.lineTo(options.lineLength, y);
      }
      this.shape = shape;
    });
    this.mutate(options);
  }
  dispose() {
    assert && assert(false, 'HorizontalLines does not support dispose');
    super.dispose();
  }
}

/**
 * XTickLabels renders the x-axis tick-mark labels. (The tick-mark lines are rendered by VerticalLines.)
 * There is a static number of labels, reused and repositioned as the x-axis range changes.
 */

class XTickLabels extends Node {
  /**
   * @param xRangeProperty - the x-axis range, in model coordinates
   * @param [providedOptions]
   */
  constructor(xRangeProperty, providedOptions) {
    const options = optionize()({
      // XTickLabelsSelfOptions
      xSpacingModel: 1,
      xAxisWidth: 100
    }, providedOptions);

    // Compute the number of labels and their spacing, in view coordinates
    const numberOfLabels = getNumberOfVerticalLines(xRangeProperty.value, options.xSpacingModel);
    const xSpacingView = getXSpacingView(xRangeProperty.value, options.xSpacingModel, options.xAxisWidth);

    // Create a fixed number of labels.
    // These instances of Text do not take a string Property because they display a number.
    // The numbers and positions are adjusted by xRangeProperty listener below.
    const labelNodes = [];
    for (let i = 0; i < numberOfLabels; i++) {
      labelNodes.push(new Text(i, {
        font: TICK_MARKS_FONT
      }));
    }
    options.children = labelNodes;
    super(options);

    // Adjusts the text and position for all labels when the x-axis range changes. unlink is not necessary.
    xRangeProperty.link(xRange => {
      const xOffsetModel = Math.floor(options.xSpacingModel * xRange.min / options.xSpacingModel);
      const xOffsetView = -xSpacingView * (xRange.max % options.xSpacingModel / options.xSpacingModel);
      for (let i = 0; i < numberOfLabels; i++) {
        const labelNode = labelNodes[i];
        const xModel = xOffsetModel + i * options.xSpacingModel;
        labelNode.visible = xRange.contains(xModel);
        if (labelNode.visible) {
          labelNode.string = xModel;
          labelNode.centerX = xOffsetView + i * xSpacingView;
        }
      }
    });
  }
  dispose() {
    assert && assert(false, 'XTickLabels does not support dispose');
    super.dispose();
  }
}

/**
 * YTickLabels renders the y-axis tick-mark labels. (The tick-mark lines are rendered by HorizontalLines.)
 * They are recreated on demand, when the zoom control is used.
 */

class YTickLabels extends Node {
  /**
   * @param yRangeProperty - the y-axis range, in model coordinates
   * @param getYSpacing - gets the y-spacing for the current value of yRangeProperty
   * @param [providedOptions]
   */
  constructor(yRangeProperty, getYSpacing, providedOptions) {
    const options = optionize()({
      // YTickLabelsSelfOptions
      yAxisHeight: 100
    }, providedOptions);
    super();

    // Recreate the labels when the y-axis range changes. unlink is not necessary.
    yRangeProperty.link(yRange => {
      // Compute the number of tick marks and their spacing, in view coordinates
      const ySpacingModel = getYSpacing();
      const numberOfTickMarks = getNumberOfHorizontalLines(yRange, ySpacingModel);
      const ySpacingView = getYSpacingView(yRange, ySpacingModel, options.yAxisHeight);

      // Create the tick mark labels
      const labelNodes = [];
      for (let i = 0; i < numberOfTickMarks; i++) {
        const labelNode = new Text(yRange.min + i * ySpacingModel, {
          font: TICK_MARKS_FONT,
          right: 0,
          centerY: options.yAxisHeight - i * ySpacingView
        });
        labelNodes.push(labelNode);
      }
      this.children = labelNodes;
    });
    this.mutate(options);
  }
  dispose() {
    assert && assert(false, 'YTickLabels does not support dispose');
    super.dispose();
  }
}

/**
 * Gets the number of vertical lines in the grid.
 * @param xRange - range of the x-axis, in model coordinates
 * @param xSpacing - space between vertical grid lines, in model coordinates
 */
function getNumberOfVerticalLines(xRange, xSpacing) {
  return Math.floor(xRange.getLength() / xSpacing) + 1;
}

/**
 * Gets the spacing between vertical lines, in view coordinates.
 * @param xRange - range of the x-axis, in model coordinates
 * @param xSpacing - space between vertical grid lines, in model coordinates
 * @param xAxisWidth - width of the x-axis, in view coordinates
 */
function getXSpacingView(xRange, xSpacing, xAxisWidth) {
  return xSpacing / xRange.getLength() * xAxisWidth;
}

/**
 * Gets the number of horizontal lines in the grid.
 * @param yRange - range of the y-axis, in model coordinates
 * @param ySpacing - space between horizontal grid lines, in model coordinates
 */
function getNumberOfHorizontalLines(yRange, ySpacing) {
  return Math.floor(yRange.getLength() / ySpacing) + 1;
}

/**
 * Gets the spacing between horizontal lines, in view coordinates.
 * @param yRange - range of the y-axis, in model coordinates
 * @param ySpacing - space between horizontal grid lines, in model coordinates
 * @param yAxisHeight - width of the y-axis, in view coordinates
 */
function getYSpacingView(yRange, ySpacing, yAxisHeight) {
  return ySpacing / yRange.getLength() * yAxisHeight;
}
naturalSelection.register('PopulationGridNode', PopulationGridNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,