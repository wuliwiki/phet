// Copyright 2019-2022, University of Colorado Boulder

/**
 * WolvesCheckbox is a checkbox for enabling the 'Wolves' environmental factor.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { HBox, Image, Text } from '../../../../scenery/js/imports.js';
import wolf_png from '../../../images/wolf_png.js';
import naturalSelection from '../../naturalSelection.js';
import NaturalSelectionStrings from '../../NaturalSelectionStrings.js';
import NaturalSelectionColors from '../NaturalSelectionColors.js';
import NaturalSelectionConstants from '../NaturalSelectionConstants.js';
import EnvironmentalFactorCheckbox from './EnvironmentalFactorCheckbox.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class WolvesCheckbox extends EnvironmentalFactorCheckbox {
  constructor(wolvesEnabledProperty, alignGroup, providedOptions) {
    const options = optionize()({
      // EnvironmentalFactorCheckboxOptions
      clockSliceRange: NaturalSelectionConstants.CLOCK_WOLVES_RANGE,
      clockSliceColor: NaturalSelectionColors.CLOCK_WOLVES_SLICE_COLOR
    }, providedOptions);
    const labelText = new Text(NaturalSelectionStrings.wolvesStringProperty, {
      font: NaturalSelectionConstants.CHECKBOX_FONT,
      maxWidth: 90,
      // determined empirically
      tandem: options.tandem.createTandem('labelText')
    });
    const icon = new Image(wolf_png);
    const scale = 0.13; // determined empirically
    icon.setScaleMagnitude(-scale, scale); // reflect so the wolf is facing left

    const labelNode = new HBox({
      children: [labelText, icon],
      spacing: NaturalSelectionConstants.CHECKBOX_X_SPACING
    });
    super(wolvesEnabledProperty, labelNode, alignGroup, options);
  }
}
naturalSelection.register('WolvesCheckbox', WolvesCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIQm94IiwiSW1hZ2UiLCJUZXh0Iiwid29sZl9wbmciLCJuYXR1cmFsU2VsZWN0aW9uIiwiTmF0dXJhbFNlbGVjdGlvblN0cmluZ3MiLCJOYXR1cmFsU2VsZWN0aW9uQ29sb3JzIiwiTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyIsIkVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveCIsIm9wdGlvbml6ZSIsIldvbHZlc0NoZWNrYm94IiwiY29uc3RydWN0b3IiLCJ3b2x2ZXNFbmFibGVkUHJvcGVydHkiLCJhbGlnbkdyb3VwIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImNsb2NrU2xpY2VSYW5nZSIsIkNMT0NLX1dPTFZFU19SQU5HRSIsImNsb2NrU2xpY2VDb2xvciIsIkNMT0NLX1dPTFZFU19TTElDRV9DT0xPUiIsImxhYmVsVGV4dCIsIndvbHZlc1N0cmluZ1Byb3BlcnR5IiwiZm9udCIsIkNIRUNLQk9YX0ZPTlQiLCJtYXhXaWR0aCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImljb24iLCJzY2FsZSIsInNldFNjYWxlTWFnbml0dWRlIiwibGFiZWxOb2RlIiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiQ0hFQ0tCT1hfWF9TUEFDSU5HIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXb2x2ZXNDaGVja2JveC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXb2x2ZXNDaGVja2JveCBpcyBhIGNoZWNrYm94IGZvciBlbmFibGluZyB0aGUgJ1dvbHZlcycgZW52aXJvbm1lbnRhbCBmYWN0b3IuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQWxpZ25Hcm91cCwgSEJveCwgSW1hZ2UsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgd29sZl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3dvbGZfcG5nLmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBOYXR1cmFsU2VsZWN0aW9uU3RyaW5ncyBmcm9tICcuLi8uLi9OYXR1cmFsU2VsZWN0aW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBOYXR1cmFsU2VsZWN0aW9uQ29sb3JzIGZyb20gJy4uL05hdHVyYWxTZWxlY3Rpb25Db2xvcnMuanMnO1xyXG5pbXBvcnQgTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyBmcm9tICcuLi9OYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveCwgeyBFbnZpcm9ubWVudGFsRmFjdG9yQ2hlY2tib3hPcHRpb25zIH0gZnJvbSAnLi9FbnZpcm9ubWVudGFsRmFjdG9yQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFdvbHZlc0NoZWNrYm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPEVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvbHZlc0NoZWNrYm94IGV4dGVuZHMgRW52aXJvbm1lbnRhbEZhY3RvckNoZWNrYm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB3b2x2ZXNFbmFibGVkUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LCBhbGlnbkdyb3VwOiBBbGlnbkdyb3VwLCBwcm92aWRlZE9wdGlvbnM6IFdvbHZlc0NoZWNrYm94T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFdvbHZlc0NoZWNrYm94T3B0aW9ucywgU2VsZk9wdGlvbnMsIEVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIEVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveE9wdGlvbnNcclxuICAgICAgY2xvY2tTbGljZVJhbmdlOiBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLkNMT0NLX1dPTFZFU19SQU5HRSxcclxuICAgICAgY2xvY2tTbGljZUNvbG9yOiBOYXR1cmFsU2VsZWN0aW9uQ29sb3JzLkNMT0NLX1dPTFZFU19TTElDRV9DT0xPUlxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFRleHQoIE5hdHVyYWxTZWxlY3Rpb25TdHJpbmdzLndvbHZlc1N0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuQ0hFQ0tCT1hfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDkwLCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxUZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IG5ldyBJbWFnZSggd29sZl9wbmcgKTtcclxuICAgIGNvbnN0IHNjYWxlID0gMC4xMzsgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gICAgaWNvbi5zZXRTY2FsZU1hZ25pdHVkZSggLXNjYWxlLCBzY2FsZSApOyAvLyByZWZsZWN0IHNvIHRoZSB3b2xmIGlzIGZhY2luZyBsZWZ0XHJcblxyXG4gICAgY29uc3QgbGFiZWxOb2RlID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFsgbGFiZWxUZXh0LCBpY29uIF0sXHJcbiAgICAgIHNwYWNpbmc6IE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMuQ0hFQ0tCT1hfWF9TUEFDSU5HXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHdvbHZlc0VuYWJsZWRQcm9wZXJ0eSwgbGFiZWxOb2RlLCBhbGlnbkdyb3VwLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5uYXR1cmFsU2VsZWN0aW9uLnJlZ2lzdGVyKCAnV29sdmVzQ2hlY2tib3gnLCBXb2x2ZXNDaGVja2JveCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFxQkEsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDakYsT0FBT0MsUUFBUSxNQUFNLDZCQUE2QjtBQUNsRCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBQ3RFLE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyx5QkFBeUIsTUFBTSxpQ0FBaUM7QUFDdkUsT0FBT0MsMkJBQTJCLE1BQThDLGtDQUFrQztBQUVsSCxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQU9uRixlQUFlLE1BQU1DLGNBQWMsU0FBU0YsMkJBQTJCLENBQUM7RUFFL0RHLFdBQVdBLENBQUVDLHFCQUF3QyxFQUFFQyxVQUFzQixFQUFFQyxlQUFzQyxFQUFHO0lBRTdILE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUF5RSxDQUFDLENBQUU7TUFFbkc7TUFDQU8sZUFBZSxFQUFFVCx5QkFBeUIsQ0FBQ1Usa0JBQWtCO01BQzdEQyxlQUFlLEVBQUVaLHNCQUFzQixDQUFDYTtJQUMxQyxDQUFDLEVBQUVMLGVBQWdCLENBQUM7SUFFcEIsTUFBTU0sU0FBUyxHQUFHLElBQUlsQixJQUFJLENBQUVHLHVCQUF1QixDQUFDZ0Isb0JBQW9CLEVBQUU7TUFDeEVDLElBQUksRUFBRWYseUJBQXlCLENBQUNnQixhQUFhO01BQzdDQyxRQUFRLEVBQUUsRUFBRTtNQUFFO01BQ2RDLE1BQU0sRUFBRVYsT0FBTyxDQUFDVSxNQUFNLENBQUNDLFlBQVksQ0FBRSxXQUFZO0lBQ25ELENBQUUsQ0FBQztJQUVILE1BQU1DLElBQUksR0FBRyxJQUFJMUIsS0FBSyxDQUFFRSxRQUFTLENBQUM7SUFDbEMsTUFBTXlCLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNwQkQsSUFBSSxDQUFDRSxpQkFBaUIsQ0FBRSxDQUFDRCxLQUFLLEVBQUVBLEtBQU0sQ0FBQyxDQUFDLENBQUM7O0lBRXpDLE1BQU1FLFNBQVMsR0FBRyxJQUFJOUIsSUFBSSxDQUFFO01BQzFCK0IsUUFBUSxFQUFFLENBQUVYLFNBQVMsRUFBRU8sSUFBSSxDQUFFO01BQzdCSyxPQUFPLEVBQUV6Qix5QkFBeUIsQ0FBQzBCO0lBQ3JDLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRXJCLHFCQUFxQixFQUFFa0IsU0FBUyxFQUFFakIsVUFBVSxFQUFFRSxPQUFRLENBQUM7RUFDaEU7QUFDRjtBQUVBWCxnQkFBZ0IsQ0FBQzhCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRXhCLGNBQWUsQ0FBQyJ9