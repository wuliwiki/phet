// Copyright 2020-2022, University of Colorado Boulder

/**
 * NaturalSelectionTimeControlNode is the time control for this sim. It has a play/pause button and a fast-forward
 * button. To make the sim run faster, press and hold the fast-forward button.  It has nothing in common with PhET's
 * standard TimeControlNode other than a PlayPauseButton, so it does not extend TimeControlNode.
 * See https://github.com/phetsims/natural-selection/issues/179 for some design history.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PlayPauseButton from '../../../../scenery-phet/js/buttons/PlayPauseButton.js';
import { HBox, SceneryConstants } from '../../../../scenery/js/imports.js';
import naturalSelection from '../../naturalSelection.js';
import FastForwardButton from './FastForwardButton.js';

// constants
const PLAY_BUTTON_RADIUS = 20;
const FAST_FORWARD_BUTTON_RADIUS = 16;
export default class NaturalSelectionTimeControlNode extends HBox {
  constructor(isPlayingProperty, timeSpeedProperty, providedOptions) {
    const options = optionize()({
      // HBoxOptions
      spacing: 10,
      disabledOpacity: SceneryConstants.DISABLED_OPACITY,
      phetioEnabledPropertyInstrumented: true // opt into default PhET-iO instrumented enabledProperty
    }, providedOptions);
    const playPauseButton = new PlayPauseButton(isPlayingProperty, {
      radius: PLAY_BUTTON_RADIUS,
      tandem: options.tandem.createTandem('playPauseButton')
    });
    const fastForwardButton = new FastForwardButton(timeSpeedProperty, {
      radius: FAST_FORWARD_BUTTON_RADIUS,
      touchAreaDilation: PLAY_BUTTON_RADIUS - FAST_FORWARD_BUTTON_RADIUS,
      tandem: options.tandem.createTandem('fastForwardButton')
    });
    options.children = [playPauseButton, fastForwardButton];
    super(options);

    // Save state of whether the sim is playing, so it can be restored when fast-forward is released.
    // This value does not need to be captured in the PhET-iO state because it is driven by the buttonModel.downProperty
    // which is not captured in the PhET-iO state, and hence will be overwritten on next down.
    let isPlayingSaved = isPlayingProperty.value;

    // unlink is not necessary.
    fastForwardButton.fastForwardButtonModel.downProperty.link(down => {
      playPauseButton.enabled = !down;
      if (down) {
        // Disable playPauseButton when fastForwardButton is pressed.
        playPauseButton.enabled = false;
        isPlayingSaved = isPlayingProperty.value;
        isPlayingProperty.value = true;
      } else {
        // Restore state of playPauseButton when fastForwardButton is released.
        playPauseButton.enabled = true;

        // But when playing back states, the ground truth is specified by the state and should not be overwritten by this listener
        if (!phet.joist.sim.isSettingPhetioStateProperty.value) {
          isPlayingProperty.value = isPlayingSaved;
        }
      }
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
naturalSelection.register('NaturalSelectionTimeControlNode', NaturalSelectionTimeControlNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,