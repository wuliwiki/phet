// Copyright 2019-2022, University of Colorado Boulder

/**
 * MutationAlertsNode manages the position and visibility of 'Mutation Coming' alerts.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Node } from '../../../../scenery/js/imports.js';
import naturalSelection from '../../naturalSelection.js';
import MutationComingNode from './MutationComingNode.js';
import optionize from '../../../../phet-core/js/optionize.js';

// constants
const X_OFFSET = -5;
export default class MutationAlertsNode extends Node {
  constructor(genePool, addMutationsPanel, providedOptions) {
    const options = optionize()({
      // NodeOptions
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);

    // Create a MutationComingNode (aka 'alert') for each gene
    const mutationComingNodes = _.map(genePool.genes, gene => new MutationComingNode(gene, {
      tandem: options.tandem.createTandem(`${gene.tandemPrefix}MutationComingNode`)
    }));
    assert && assert(!options.children, 'MutationAlertsNode sets children');
    options.children = mutationComingNodes;
    super(options);

    // When a mutation is coming, make its associated alert visible. unlinks are not necessary.
    mutationComingNodes.forEach(mutationComingNode => {
      mutationComingNode.gene.mutationComingProperty.link(mutationComing => {
        mutationComingNode.visible = mutationComing;
      });
    });

    // Alerts point at rows in the Add Mutations panel. Since rows can be dynamically hidden via PhET-iO, manage
    // the logistics of that here. unlink is not necessary.
    addMutationsPanel.boundsProperty.link(() => {
      mutationComingNodes.forEach(mutationComingNode => {
        // Position the alert to the left of its associated rows.
        const row = addMutationsPanel.getRow(mutationComingNode.gene);
        const globalPoint = row.parentToGlobalPoint(new Vector2(row.left, row.centerY)).addXY(X_OFFSET, 0);
        mutationComingNode.rightCenter = mutationComingNode.globalToParentPoint(globalPoint);

        // If the row was made invisible for a gene that has a mutation was coming, cancel the mutation.
        if (!row.visible && mutationComingNode.gene.mutationComingProperty.value) {
          mutationComingNode.gene.cancelMutation();
        }
      });
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
naturalSelection.register('MutationAlertsNode', MutationAlertsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiTm9kZSIsIm5hdHVyYWxTZWxlY3Rpb24iLCJNdXRhdGlvbkNvbWluZ05vZGUiLCJvcHRpb25pemUiLCJYX09GRlNFVCIsIk11dGF0aW9uQWxlcnRzTm9kZSIsImNvbnN0cnVjdG9yIiwiZ2VuZVBvb2wiLCJhZGRNdXRhdGlvbnNQYW5lbCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQiLCJtdXRhdGlvbkNvbWluZ05vZGVzIiwiXyIsIm1hcCIsImdlbmVzIiwiZ2VuZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInRhbmRlbVByZWZpeCIsImFzc2VydCIsImNoaWxkcmVuIiwiZm9yRWFjaCIsIm11dGF0aW9uQ29taW5nTm9kZSIsIm11dGF0aW9uQ29taW5nUHJvcGVydHkiLCJsaW5rIiwibXV0YXRpb25Db21pbmciLCJ2aXNpYmxlIiwiYm91bmRzUHJvcGVydHkiLCJyb3ciLCJnZXRSb3ciLCJnbG9iYWxQb2ludCIsInBhcmVudFRvR2xvYmFsUG9pbnQiLCJsZWZ0IiwiY2VudGVyWSIsImFkZFhZIiwicmlnaHRDZW50ZXIiLCJnbG9iYWxUb1BhcmVudFBvaW50IiwidmFsdWUiLCJjYW5jZWxNdXRhdGlvbiIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk11dGF0aW9uQWxlcnRzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNdXRhdGlvbkFsZXJ0c05vZGUgbWFuYWdlcyB0aGUgcG9zaXRpb24gYW5kIHZpc2liaWxpdHkgb2YgJ011dGF0aW9uIENvbWluZycgYWxlcnRzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbmF0dXJhbFNlbGVjdGlvbiBmcm9tICcuLi8uLi9uYXR1cmFsU2VsZWN0aW9uLmpzJztcclxuaW1wb3J0IEdlbmVQb29sIGZyb20gJy4uL21vZGVsL0dlbmVQb29sLmpzJztcclxuaW1wb3J0IEFkZE11dGF0aW9uc1BhbmVsIGZyb20gJy4vQWRkTXV0YXRpb25zUGFuZWwuanMnO1xyXG5pbXBvcnQgTXV0YXRpb25Db21pbmdOb2RlIGZyb20gJy4vTXV0YXRpb25Db21pbmdOb2RlLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgWF9PRkZTRVQgPSAtNTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBNdXRhdGlvbkFsZXJ0c05vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE11dGF0aW9uQWxlcnRzTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdlbmVQb29sOiBHZW5lUG9vbCwgYWRkTXV0YXRpb25zUGFuZWw6IEFkZE11dGF0aW9uc1BhbmVsLCBwcm92aWRlZE9wdGlvbnM6IE11dGF0aW9uQWxlcnRzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxNdXRhdGlvbkFsZXJ0c05vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIE5vZGVPcHRpb25zXHJcbiAgICAgIHBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZDogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIE11dGF0aW9uQ29taW5nTm9kZSAoYWthICdhbGVydCcpIGZvciBlYWNoIGdlbmVcclxuICAgIGNvbnN0IG11dGF0aW9uQ29taW5nTm9kZXMgPSBfLm1hcCggZ2VuZVBvb2wuZ2VuZXMsIGdlbmUgPT4gbmV3IE11dGF0aW9uQ29taW5nTm9kZSggZ2VuZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggYCR7Z2VuZS50YW5kZW1QcmVmaXh9TXV0YXRpb25Db21pbmdOb2RlYCApXHJcbiAgICB9ICkgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLmNoaWxkcmVuLCAnTXV0YXRpb25BbGVydHNOb2RlIHNldHMgY2hpbGRyZW4nICk7XHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gbXV0YXRpb25Db21pbmdOb2RlcztcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFdoZW4gYSBtdXRhdGlvbiBpcyBjb21pbmcsIG1ha2UgaXRzIGFzc29jaWF0ZWQgYWxlcnQgdmlzaWJsZS4gdW5saW5rcyBhcmUgbm90IG5lY2Vzc2FyeS5cclxuICAgIG11dGF0aW9uQ29taW5nTm9kZXMuZm9yRWFjaCggbXV0YXRpb25Db21pbmdOb2RlID0+IHtcclxuICAgICAgbXV0YXRpb25Db21pbmdOb2RlLmdlbmUubXV0YXRpb25Db21pbmdQcm9wZXJ0eS5saW5rKCBtdXRhdGlvbkNvbWluZyA9PiB7XHJcbiAgICAgICAgbXV0YXRpb25Db21pbmdOb2RlLnZpc2libGUgPSBtdXRhdGlvbkNvbWluZztcclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEFsZXJ0cyBwb2ludCBhdCByb3dzIGluIHRoZSBBZGQgTXV0YXRpb25zIHBhbmVsLiBTaW5jZSByb3dzIGNhbiBiZSBkeW5hbWljYWxseSBoaWRkZW4gdmlhIFBoRVQtaU8sIG1hbmFnZVxyXG4gICAgLy8gdGhlIGxvZ2lzdGljcyBvZiB0aGF0IGhlcmUuIHVubGluayBpcyBub3QgbmVjZXNzYXJ5LlxyXG4gICAgYWRkTXV0YXRpb25zUGFuZWwuYm91bmRzUHJvcGVydHkubGluayggKCkgPT4ge1xyXG4gICAgICBtdXRhdGlvbkNvbWluZ05vZGVzLmZvckVhY2goIG11dGF0aW9uQ29taW5nTm9kZSA9PiB7XHJcblxyXG4gICAgICAgIC8vIFBvc2l0aW9uIHRoZSBhbGVydCB0byB0aGUgbGVmdCBvZiBpdHMgYXNzb2NpYXRlZCByb3dzLlxyXG4gICAgICAgIGNvbnN0IHJvdyA9IGFkZE11dGF0aW9uc1BhbmVsLmdldFJvdyggbXV0YXRpb25Db21pbmdOb2RlLmdlbmUgKTtcclxuICAgICAgICBjb25zdCBnbG9iYWxQb2ludCA9IHJvdy5wYXJlbnRUb0dsb2JhbFBvaW50KCBuZXcgVmVjdG9yMiggcm93LmxlZnQsIHJvdy5jZW50ZXJZICkgKS5hZGRYWSggWF9PRkZTRVQsIDAgKTtcclxuICAgICAgICBtdXRhdGlvbkNvbWluZ05vZGUucmlnaHRDZW50ZXIgPSBtdXRhdGlvbkNvbWluZ05vZGUuZ2xvYmFsVG9QYXJlbnRQb2ludCggZ2xvYmFsUG9pbnQgKTtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIHJvdyB3YXMgbWFkZSBpbnZpc2libGUgZm9yIGEgZ2VuZSB0aGF0IGhhcyBhIG11dGF0aW9uIHdhcyBjb21pbmcsIGNhbmNlbCB0aGUgbXV0YXRpb24uXHJcbiAgICAgICAgaWYgKCAhcm93LnZpc2libGUgJiYgbXV0YXRpb25Db21pbmdOb2RlLmdlbmUubXV0YXRpb25Db21pbmdQcm9wZXJ0eS52YWx1ZSApIHtcclxuICAgICAgICAgIG11dGF0aW9uQ29taW5nTm9kZS5nZW5lLmNhbmNlbE11dGF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubmF0dXJhbFNlbGVjdGlvbi5yZWdpc3RlciggJ011dGF0aW9uQWxlcnRzTm9kZScsIE11dGF0aW9uQWxlcnRzTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLElBQUksUUFBcUIsbUNBQW1DO0FBQ3JFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUd4RCxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFFeEQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7O0FBRW5GO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLENBQUMsQ0FBQztBQU1uQixlQUFlLE1BQU1DLGtCQUFrQixTQUFTTCxJQUFJLENBQUM7RUFFNUNNLFdBQVdBLENBQUVDLFFBQWtCLEVBQUVDLGlCQUFvQyxFQUFFQyxlQUEwQyxFQUFHO0lBRXpILE1BQU1DLE9BQU8sR0FBR1AsU0FBUyxDQUFzRCxDQUFDLENBQUU7TUFFaEY7TUFDQVEsaUNBQWlDLEVBQUU7SUFDckMsQ0FBQyxFQUFFRixlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1HLG1CQUFtQixHQUFHQyxDQUFDLENBQUNDLEdBQUcsQ0FBRVAsUUFBUSxDQUFDUSxLQUFLLEVBQUVDLElBQUksSUFBSSxJQUFJZCxrQkFBa0IsQ0FBRWMsSUFBSSxFQUFFO01BQ3ZGQyxNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUcsR0FBRUYsSUFBSSxDQUFDRyxZQUFhLG9CQUFvQjtJQUNoRixDQUFFLENBQUUsQ0FBQztJQUNMQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDVixPQUFPLENBQUNXLFFBQVEsRUFBRSxrQ0FBbUMsQ0FBQztJQUN6RVgsT0FBTyxDQUFDVyxRQUFRLEdBQUdULG1CQUFtQjtJQUV0QyxLQUFLLENBQUVGLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQUUsbUJBQW1CLENBQUNVLE9BQU8sQ0FBRUMsa0JBQWtCLElBQUk7TUFDakRBLGtCQUFrQixDQUFDUCxJQUFJLENBQUNRLHNCQUFzQixDQUFDQyxJQUFJLENBQUVDLGNBQWMsSUFBSTtRQUNyRUgsa0JBQWtCLENBQUNJLE9BQU8sR0FBR0QsY0FBYztNQUM3QyxDQUFFLENBQUM7SUFDTCxDQUFFLENBQUM7O0lBRUg7SUFDQTtJQUNBbEIsaUJBQWlCLENBQUNvQixjQUFjLENBQUNILElBQUksQ0FBRSxNQUFNO01BQzNDYixtQkFBbUIsQ0FBQ1UsT0FBTyxDQUFFQyxrQkFBa0IsSUFBSTtRQUVqRDtRQUNBLE1BQU1NLEdBQUcsR0FBR3JCLGlCQUFpQixDQUFDc0IsTUFBTSxDQUFFUCxrQkFBa0IsQ0FBQ1AsSUFBSyxDQUFDO1FBQy9ELE1BQU1lLFdBQVcsR0FBR0YsR0FBRyxDQUFDRyxtQkFBbUIsQ0FBRSxJQUFJakMsT0FBTyxDQUFFOEIsR0FBRyxDQUFDSSxJQUFJLEVBQUVKLEdBQUcsQ0FBQ0ssT0FBUSxDQUFFLENBQUMsQ0FBQ0MsS0FBSyxDQUFFL0IsUUFBUSxFQUFFLENBQUUsQ0FBQztRQUN4R21CLGtCQUFrQixDQUFDYSxXQUFXLEdBQUdiLGtCQUFrQixDQUFDYyxtQkFBbUIsQ0FBRU4sV0FBWSxDQUFDOztRQUV0RjtRQUNBLElBQUssQ0FBQ0YsR0FBRyxDQUFDRixPQUFPLElBQUlKLGtCQUFrQixDQUFDUCxJQUFJLENBQUNRLHNCQUFzQixDQUFDYyxLQUFLLEVBQUc7VUFDMUVmLGtCQUFrQixDQUFDUCxJQUFJLENBQUN1QixjQUFjLENBQUMsQ0FBQztRQUMxQztNQUNGLENBQUUsQ0FBQztJQUNMLENBQUUsQ0FBQztFQUNMO0VBRWdCQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUJwQixNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDb0IsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdkMsZ0JBQWdCLENBQUN3QyxRQUFRLENBQUUsb0JBQW9CLEVBQUVwQyxrQkFBbUIsQ0FBQyJ9