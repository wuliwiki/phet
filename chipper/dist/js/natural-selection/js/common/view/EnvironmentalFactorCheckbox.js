// Copyright 2020-2022, University of Colorado Boulder

/**
 * EnvironmentalFactorCheckbox is the base class for all checkboxes in the 'Environmental Factors' panel.
 * It makes all checkbox labels have the same effective size. And it adds a generation-clock icon to the right of
 * the checkbox's label, to signify which clock slice corresponds to the time during which the environmental factor
 * will be applied.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
import { AlignBox, HBox } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import naturalSelection from '../../naturalSelection.js';
import NaturalSelectionConstants from '../NaturalSelectionConstants.js';
import GenerationClockNode from './GenerationClockNode.js';

// constants
const DEFAULT_CLOCK_SLICE_RANGE = new Range(0, 1);
export default class EnvironmentalFactorCheckbox extends Checkbox {
  /**
   * @param enabledProperty - whether the environmental factor is enabled
   * @param labelNode - the label that appears to the right of the box
   * @param alignGroup - sets the effective size of labelNode
   * @param [providedOptions]
   */
  constructor(enabledProperty, labelNode, alignGroup, providedOptions) {
    const options = optionize4()({}, NaturalSelectionConstants.CHECKBOX_OPTIONS, {
      // SelfOptions
      clockSliceRange: DEFAULT_CLOCK_SLICE_RANGE,
      clockSliceColor: 'black'
    }, providedOptions);
    const alignBox = new AlignBox(labelNode, {
      group: alignGroup,
      xAlign: 'left'
    });
    const clockSliceNode = GenerationClockNode.createSliceIcon(options.clockSliceRange, options.clockSliceColor);
    const content = new HBox({
      spacing: 2 * NaturalSelectionConstants.CHECKBOX_X_SPACING,
      children: [alignBox, clockSliceNode]
    });
    super(enabledProperty, content, options);
  }
}
naturalSelection.register('EnvironmentalFactorCheckbox', EnvironmentalFactorCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIm9wdGlvbml6ZTQiLCJBbGlnbkJveCIsIkhCb3giLCJDaGVja2JveCIsIm5hdHVyYWxTZWxlY3Rpb24iLCJOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzIiwiR2VuZXJhdGlvbkNsb2NrTm9kZSIsIkRFRkFVTFRfQ0xPQ0tfU0xJQ0VfUkFOR0UiLCJFbnZpcm9ubWVudGFsRmFjdG9yQ2hlY2tib3giLCJjb25zdHJ1Y3RvciIsImVuYWJsZWRQcm9wZXJ0eSIsImxhYmVsTm9kZSIsImFsaWduR3JvdXAiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiQ0hFQ0tCT1hfT1BUSU9OUyIsImNsb2NrU2xpY2VSYW5nZSIsImNsb2NrU2xpY2VDb2xvciIsImFsaWduQm94IiwiZ3JvdXAiLCJ4QWxpZ24iLCJjbG9ja1NsaWNlTm9kZSIsImNyZWF0ZVNsaWNlSWNvbiIsImNvbnRlbnQiLCJzcGFjaW5nIiwiQ0hFQ0tCT1hfWF9TUEFDSU5HIiwiY2hpbGRyZW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFbnZpcm9ubWVudGFsRmFjdG9yQ2hlY2tib3ggaXMgdGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBjaGVja2JveGVzIGluIHRoZSAnRW52aXJvbm1lbnRhbCBGYWN0b3JzJyBwYW5lbC5cclxuICogSXQgbWFrZXMgYWxsIGNoZWNrYm94IGxhYmVscyBoYXZlIHRoZSBzYW1lIGVmZmVjdGl2ZSBzaXplLiBBbmQgaXQgYWRkcyBhIGdlbmVyYXRpb24tY2xvY2sgaWNvbiB0byB0aGUgcmlnaHQgb2ZcclxuICogdGhlIGNoZWNrYm94J3MgbGFiZWwsIHRvIHNpZ25pZnkgd2hpY2ggY2xvY2sgc2xpY2UgY29ycmVzcG9uZHMgdG8gdGhlIHRpbWUgZHVyaW5nIHdoaWNoIHRoZSBlbnZpcm9ubWVudGFsIGZhY3RvclxyXG4gKiB3aWxsIGJlIGFwcGxpZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IHsgb3B0aW9uaXplNCB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBBbGlnbkJveCwgQWxpZ25Hcm91cCwgSEJveCwgTm9kZSwgVENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94LCB7IENoZWNrYm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5pbXBvcnQgTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyBmcm9tICcuLi9OYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdlbmVyYXRpb25DbG9ja05vZGUgZnJvbSAnLi9HZW5lcmF0aW9uQ2xvY2tOb2RlLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUZBVUxUX0NMT0NLX1NMSUNFX1JBTkdFID0gbmV3IFJhbmdlKCAwLCAxICk7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGNsb2NrU2xpY2VSYW5nZT86IFJhbmdlO1xyXG4gIGNsb2NrU2xpY2VDb2xvcj86IFRDb2xvcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmXHJcbiAgUGlja09wdGlvbmFsPENoZWNrYm94T3B0aW9ucywgJ3Zpc2libGUnPiAmXHJcbiAgUGlja1JlcXVpcmVkPENoZWNrYm94T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW52aXJvbm1lbnRhbEZhY3RvckNoZWNrYm94IGV4dGVuZHMgQ2hlY2tib3gge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gZW5hYmxlZFByb3BlcnR5IC0gd2hldGhlciB0aGUgZW52aXJvbm1lbnRhbCBmYWN0b3IgaXMgZW5hYmxlZFxyXG4gICAqIEBwYXJhbSBsYWJlbE5vZGUgLSB0aGUgbGFiZWwgdGhhdCBhcHBlYXJzIHRvIHRoZSByaWdodCBvZiB0aGUgYm94XHJcbiAgICogQHBhcmFtIGFsaWduR3JvdXAgLSBzZXRzIHRoZSBlZmZlY3RpdmUgc2l6ZSBvZiBsYWJlbE5vZGVcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGVuYWJsZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIGxhYmVsTm9kZTogTm9kZSwgYWxpZ25Hcm91cDogQWxpZ25Hcm91cCxcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogRW52aXJvbm1lbnRhbEZhY3RvckNoZWNrYm94T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplNDxFbnZpcm9ubWVudGFsRmFjdG9yQ2hlY2tib3hPcHRpb25zLCBTZWxmT3B0aW9ucywgQ2hlY2tib3hPcHRpb25zPigpKFxyXG4gICAgICB7fSwgTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cy5DSEVDS0JPWF9PUFRJT05TLCB7XHJcblxyXG4gICAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgICAgY2xvY2tTbGljZVJhbmdlOiBERUZBVUxUX0NMT0NLX1NMSUNFX1JBTkdFLFxyXG4gICAgICAgIGNsb2NrU2xpY2VDb2xvcjogJ2JsYWNrJ1xyXG4gICAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBhbGlnbkJveCA9IG5ldyBBbGlnbkJveCggbGFiZWxOb2RlLCB7XHJcbiAgICAgIGdyb3VwOiBhbGlnbkdyb3VwLFxyXG4gICAgICB4QWxpZ246ICdsZWZ0J1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNsb2NrU2xpY2VOb2RlID0gR2VuZXJhdGlvbkNsb2NrTm9kZS5jcmVhdGVTbGljZUljb24oIG9wdGlvbnMuY2xvY2tTbGljZVJhbmdlLCBvcHRpb25zLmNsb2NrU2xpY2VDb2xvciApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiAyICogTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cy5DSEVDS0JPWF9YX1NQQUNJTkcsXHJcbiAgICAgIGNoaWxkcmVuOiBbIGFsaWduQm94LCBjbG9ja1NsaWNlTm9kZSBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGVuYWJsZWRQcm9wZXJ0eSwgY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubmF0dXJhbFNlbGVjdGlvbi5yZWdpc3RlciggJ0Vudmlyb25tZW50YWxGYWN0b3JDaGVja2JveCcsIEVudmlyb25tZW50YWxGYWN0b3JDaGVja2JveCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLFNBQVNDLFVBQVUsUUFBUSx1Q0FBdUM7QUFHbEUsU0FBU0MsUUFBUSxFQUFjQyxJQUFJLFFBQXNCLG1DQUFtQztBQUM1RixPQUFPQyxRQUFRLE1BQTJCLGdDQUFnQztBQUMxRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBQ3ZFLE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjs7QUFFMUQ7QUFDQSxNQUFNQyx5QkFBeUIsR0FBRyxJQUFJUixLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztBQVduRCxlQUFlLE1BQU1TLDJCQUEyQixTQUFTTCxRQUFRLENBQUM7RUFFaEU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NNLFdBQVdBLENBQUVDLGVBQWtDLEVBQUVDLFNBQWUsRUFBRUMsVUFBc0IsRUFDM0VDLGVBQW1ELEVBQUc7SUFFeEUsTUFBTUMsT0FBTyxHQUFHZCxVQUFVLENBQW1FLENBQUMsQ0FDNUYsQ0FBQyxDQUFDLEVBQUVLLHlCQUF5QixDQUFDVSxnQkFBZ0IsRUFBRTtNQUU5QztNQUNBQyxlQUFlLEVBQUVULHlCQUF5QjtNQUMxQ1UsZUFBZSxFQUFFO0lBQ25CLENBQUMsRUFBRUosZUFBZ0IsQ0FBQztJQUV0QixNQUFNSyxRQUFRLEdBQUcsSUFBSWpCLFFBQVEsQ0FBRVUsU0FBUyxFQUFFO01BQ3hDUSxLQUFLLEVBQUVQLFVBQVU7TUFDakJRLE1BQU0sRUFBRTtJQUNWLENBQUUsQ0FBQztJQUVILE1BQU1DLGNBQWMsR0FBR2YsbUJBQW1CLENBQUNnQixlQUFlLENBQUVSLE9BQU8sQ0FBQ0UsZUFBZSxFQUFFRixPQUFPLENBQUNHLGVBQWdCLENBQUM7SUFFOUcsTUFBTU0sT0FBTyxHQUFHLElBQUlyQixJQUFJLENBQUU7TUFDeEJzQixPQUFPLEVBQUUsQ0FBQyxHQUFHbkIseUJBQXlCLENBQUNvQixrQkFBa0I7TUFDekRDLFFBQVEsRUFBRSxDQUFFUixRQUFRLEVBQUVHLGNBQWM7SUFDdEMsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFWCxlQUFlLEVBQUVhLE9BQU8sRUFBRVQsT0FBUSxDQUFDO0VBQzVDO0FBQ0Y7QUFFQVYsZ0JBQWdCLENBQUN1QixRQUFRLENBQUUsNkJBQTZCLEVBQUVuQiwyQkFBNEIsQ0FBQyJ9