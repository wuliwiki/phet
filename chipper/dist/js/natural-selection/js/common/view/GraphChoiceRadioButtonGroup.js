// Copyright 2019-2022, University of Colorado Boulder

/**
 * GraphsRadioButtonGroup is the radio button group for selecting which of the graphs is visible.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { Text } from '../../../../scenery/js/imports.js';
import AquaRadioButton from '../../../../sun/js/AquaRadioButton.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import naturalSelection from '../../naturalSelection.js';
import NaturalSelectionStrings from '../../NaturalSelectionStrings.js';
import NaturalSelectionConstants from '../NaturalSelectionConstants.js';
import GraphChoice from './GraphChoice.js';

// constants
const TEXT_OPTIONS = {
  font: NaturalSelectionConstants.RADIO_BUTTON_FONT,
  maxWidth: 175 // determined empirically
};

export default class GraphChoiceRadioButtonGroup extends VerticalAquaRadioButtonGroup {
  constructor(graphChoiceProperty, providedOptions) {
    const options = optionize()({
      // VerticalAquaRadioButtonGroupOptions
      spacing: 12,
      touchAreaXDilation: 8,
      mouseAreaXDilation: 8
    }, providedOptions);

    // Create the description of the buttons
    const items = [
    // Population
    {
      value: GraphChoice.POPULATION,
      createNode: tandem => new Text(NaturalSelectionStrings.populationStringProperty, combineOptions({
        tandem: tandem.createTandem('labelText')
      }, TEXT_OPTIONS)),
      tandemName: `population${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    },
    // Proportions
    {
      value: GraphChoice.PROPORTIONS,
      createNode: tandem => new Text(NaturalSelectionStrings.proportionsStringProperty, combineOptions({
        tandem: tandem.createTandem('labelText')
      }, TEXT_OPTIONS)),
      tandemName: `proportions${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    },
    // Pedigree
    {
      value: GraphChoice.PEDIGREE,
      createNode: tandem => new Text(NaturalSelectionStrings.pedigreeStringProperty, combineOptions({
        tandem: tandem.createTandem('labelText')
      }, TEXT_OPTIONS)),
      tandemName: `pedigree${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    },
    // None
    {
      value: GraphChoice.NONE,
      createNode: tandem => new Text(NaturalSelectionStrings.noneStringProperty, combineOptions({
        tandem: tandem.createTandem('labelText')
      }, TEXT_OPTIONS)),
      tandemName: `none${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    }];
    super(graphChoiceProperty, items, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
naturalSelection.register('GraphChoiceRadioButtonGroup', GraphChoiceRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,