// Copyright 2022, University of Colorado Boulder

/**
 * AlleleNode displays the abbreviation and icon for an allele.
 *
 * This was factored out of AllelesPanel.ts on 11/10/2022, so look there for git history.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../../phet-core/js/optionize.js';
import { HBox, Image, Text } from '../../../../../scenery/js/imports.js';
import NaturalSelectionConstants from '../../NaturalSelectionConstants.js';
import naturalSelection from '../../../naturalSelection.js';
export default class AlleleNode extends HBox {
  /**
   * @param abbreviationProperty - the abbreviation used for the allele
   * @param image
   * @param [providedOptions]
   */
  constructor(abbreviationProperty, image, providedOptions) {
    const options = optionize()({
      // HBoxOptions
      spacing: 6,
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);
    const text = new Text(abbreviationProperty, {
      font: NaturalSelectionConstants.CHECKBOX_FONT,
      maxWidth: 12,
      // determined empirically
      tandem: options.tandem.createTandem('text')
    });
    const imageNode = new Image(image, {
      scale: 0.5 // determined empirically
    });

    assert && assert(!options.children, 'AlleleNode sets children');
    options.children = [text, imageNode];
    super(options);
    this.imageNode = imageNode;
  }

  /**
   * Sets the allele image for this node.
   */
  set image(value) {
    this.imageNode.image = value;
  }
}
naturalSelection.register('AlleleNode', AlleleNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJIQm94IiwiSW1hZ2UiLCJUZXh0IiwiTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cyIsIm5hdHVyYWxTZWxlY3Rpb24iLCJBbGxlbGVOb2RlIiwiY29uc3RydWN0b3IiLCJhYmJyZXZpYXRpb25Qcm9wZXJ0eSIsImltYWdlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNwYWNpbmciLCJwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQiLCJ0ZXh0IiwiZm9udCIsIkNIRUNLQk9YX0ZPTlQiLCJtYXhXaWR0aCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImltYWdlTm9kZSIsInNjYWxlIiwiYXNzZXJ0IiwiY2hpbGRyZW4iLCJ2YWx1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQWxsZWxlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQWxsZWxlTm9kZSBkaXNwbGF5cyB0aGUgYWJicmV2aWF0aW9uIGFuZCBpY29uIGZvciBhbiBhbGxlbGUuXHJcbiAqXHJcbiAqIFRoaXMgd2FzIGZhY3RvcmVkIG91dCBvZiBBbGxlbGVzUGFuZWwudHMgb24gMTEvMTAvMjAyMiwgc28gbG9vayB0aGVyZSBmb3IgZ2l0IGhpc3RvcnkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgSEJveCwgSEJveE9wdGlvbnMsIEltYWdlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IE5hdHVyYWxTZWxlY3Rpb25Db25zdGFudHMgZnJvbSAnLi4vLi4vTmF0dXJhbFNlbGVjdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEFsbGVsZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8SEJveE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsbGVsZU5vZGUgZXh0ZW5kcyBIQm94IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBpbWFnZU5vZGU6IEltYWdlO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gYWJicmV2aWF0aW9uUHJvcGVydHkgLSB0aGUgYWJicmV2aWF0aW9uIHVzZWQgZm9yIHRoZSBhbGxlbGVcclxuICAgKiBAcGFyYW0gaW1hZ2VcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGFiYnJldmlhdGlvblByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEFsbGVsZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QWxsZWxlTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBIQm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gSEJveE9wdGlvbnNcclxuICAgICAgc3BhY2luZzogNixcclxuICAgICAgcGhldGlvVmlzaWJsZVByb3BlcnR5SW5zdHJ1bWVudGVkOiBmYWxzZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0KCBhYmJyZXZpYXRpb25Qcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBOYXR1cmFsU2VsZWN0aW9uQ29uc3RhbnRzLkNIRUNLQk9YX0ZPTlQsXHJcbiAgICAgIG1heFdpZHRoOiAxMiwgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBpbWFnZU5vZGUgPSBuZXcgSW1hZ2UoIGltYWdlLCB7XHJcbiAgICAgIHNjYWxlOiAwLjUgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gICAgfSApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLmNoaWxkcmVuLCAnQWxsZWxlTm9kZSBzZXRzIGNoaWxkcmVuJyApO1xyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgdGV4dCwgaW1hZ2VOb2RlIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmltYWdlTm9kZSA9IGltYWdlTm9kZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGFsbGVsZSBpbWFnZSBmb3IgdGhpcyBub2RlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXQgaW1hZ2UoIHZhbHVlOiBIVE1MSW1hZ2VFbGVtZW50ICkge1xyXG4gICAgdGhpcy5pbWFnZU5vZGUuaW1hZ2UgPSB2YWx1ZTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdBbGxlbGVOb2RlJywgQWxsZWxlTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxNQUE0QiwwQ0FBMEM7QUFFdEYsU0FBU0MsSUFBSSxFQUFlQyxLQUFLLEVBQUVDLElBQUksUUFBUSxzQ0FBc0M7QUFDckYsT0FBT0MseUJBQXlCLE1BQU0sb0NBQW9DO0FBQzFFLE9BQU9DLGdCQUFnQixNQUFNLDhCQUE4QjtBQU0zRCxlQUFlLE1BQU1DLFVBQVUsU0FBU0wsSUFBSSxDQUFDO0VBSTNDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU00sV0FBV0EsQ0FBRUMsb0JBQStDLEVBQy9DQyxLQUF1QixFQUN2QkMsZUFBa0MsRUFBRztJQUV2RCxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBOEMsQ0FBQyxDQUFFO01BRXhFO01BQ0FZLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLGlDQUFpQyxFQUFFO0lBQ3JDLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixNQUFNSSxJQUFJLEdBQUcsSUFBSVgsSUFBSSxDQUFFSyxvQkFBb0IsRUFBRTtNQUMzQ08sSUFBSSxFQUFFWCx5QkFBeUIsQ0FBQ1ksYUFBYTtNQUM3Q0MsUUFBUSxFQUFFLEVBQUU7TUFBRTtNQUNkQyxNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUUsTUFBTztJQUM5QyxDQUFFLENBQUM7SUFFSCxNQUFNQyxTQUFTLEdBQUcsSUFBSWxCLEtBQUssQ0FBRU8sS0FBSyxFQUFFO01BQ2xDWSxLQUFLLEVBQUUsR0FBRyxDQUFDO0lBQ2IsQ0FBRSxDQUFDOztJQUVIQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDWCxPQUFPLENBQUNZLFFBQVEsRUFBRSwwQkFBMkIsQ0FBQztJQUNqRVosT0FBTyxDQUFDWSxRQUFRLEdBQUcsQ0FBRVQsSUFBSSxFQUFFTSxTQUFTLENBQUU7SUFFdEMsS0FBSyxDQUFFVCxPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDUyxTQUFTLEdBQUdBLFNBQVM7RUFDNUI7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsSUFBV1gsS0FBS0EsQ0FBRWUsS0FBdUIsRUFBRztJQUMxQyxJQUFJLENBQUNKLFNBQVMsQ0FBQ1gsS0FBSyxHQUFHZSxLQUFLO0VBQzlCO0FBQ0Y7QUFFQW5CLGdCQUFnQixDQUFDb0IsUUFBUSxDQUFFLFlBQVksRUFBRW5CLFVBQVcsQ0FBQyJ9