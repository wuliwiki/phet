// Copyright 2020-2022, University of Colorado Boulder

/**
 * WolfGroup is the PhetioGroup for Wolf.  It manages dynamic instances of Wolf, as required by PhET-iO.
 * All Wolf instances are created and disposed via this group.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetioGroup from '../../../../tandem/js/PhetioGroup.js';
import naturalSelection from '../../naturalSelection.js';
import Wolf from './Wolf.js';
export default class WolfGroup extends PhetioGroup {
  constructor(modelViewTransform, providedOptions) {
    const options = optionize()({
      // PhetioGroupOptions
      phetioType: PhetioGroup.PhetioGroupIO(Wolf.WolfIO),
      phetioDocumentation: 'manages dynamic PhET-iO elements of type Wolf'
    }, providedOptions);

    /**
     * Called to instantiate a Wolf. Note that modelViewTransform is passed via closure, so we don't
     * have to create it as part of defaultArguments, and don't have to deal with serializing it in WolfIO.
     * @param tandem - PhetioGroup requires tandem to be the first param
     */
    const createElement = tandem => new Wolf(modelViewTransform, tandem);

    // defaultArguments, passed to createElement during API harvest
    const defaultArguments = [];
    super(createElement, defaultArguments, options);
  }
}
naturalSelection.register('WolfGroup', WolfGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0aW9Hcm91cCIsIm5hdHVyYWxTZWxlY3Rpb24iLCJXb2xmIiwiV29sZkdyb3VwIiwiY29uc3RydWN0b3IiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicGhldGlvVHlwZSIsIlBoZXRpb0dyb3VwSU8iLCJXb2xmSU8iLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwiY3JlYXRlRWxlbWVudCIsInRhbmRlbSIsImRlZmF1bHRBcmd1bWVudHMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldvbGZHcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXb2xmR3JvdXAgaXMgdGhlIFBoZXRpb0dyb3VwIGZvciBXb2xmLiAgSXQgbWFuYWdlcyBkeW5hbWljIGluc3RhbmNlcyBvZiBXb2xmLCBhcyByZXF1aXJlZCBieSBQaEVULWlPLlxyXG4gKiBBbGwgV29sZiBpbnN0YW5jZXMgYXJlIGNyZWF0ZWQgYW5kIGRpc3Bvc2VkIHZpYSB0aGlzIGdyb3VwLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgUGhldGlvR3JvdXAsIHsgUGhldGlvR3JvdXBPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb0dyb3VwLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBFbnZpcm9ubWVudE1vZGVsVmlld1RyYW5zZm9ybSBmcm9tICcuL0Vudmlyb25tZW50TW9kZWxWaWV3VHJhbnNmb3JtLmpzJztcclxuaW1wb3J0IFdvbGYgZnJvbSAnLi9Xb2xmLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBXb2xmR3JvdXBPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvR3JvdXBPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb2xmR3JvdXAgZXh0ZW5kcyBQaGV0aW9Hcm91cDxXb2xmPiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWxWaWV3VHJhbnNmb3JtOiBFbnZpcm9ubWVudE1vZGVsVmlld1RyYW5zZm9ybSwgcHJvdmlkZWRPcHRpb25zOiBXb2xmR3JvdXBPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8V29sZkdyb3VwT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBoZXRpb0dyb3VwT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUGhldGlvR3JvdXBPcHRpb25zXHJcbiAgICAgIHBoZXRpb1R5cGU6IFBoZXRpb0dyb3VwLlBoZXRpb0dyb3VwSU8oIFdvbGYuV29sZklPICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdtYW5hZ2VzIGR5bmFtaWMgUGhFVC1pTyBlbGVtZW50cyBvZiB0eXBlIFdvbGYnXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB0byBpbnN0YW50aWF0ZSBhIFdvbGYuIE5vdGUgdGhhdCBtb2RlbFZpZXdUcmFuc2Zvcm0gaXMgcGFzc2VkIHZpYSBjbG9zdXJlLCBzbyB3ZSBkb24ndFxyXG4gICAgICogaGF2ZSB0byBjcmVhdGUgaXQgYXMgcGFydCBvZiBkZWZhdWx0QXJndW1lbnRzLCBhbmQgZG9uJ3QgaGF2ZSB0byBkZWFsIHdpdGggc2VyaWFsaXppbmcgaXQgaW4gV29sZklPLlxyXG4gICAgICogQHBhcmFtIHRhbmRlbSAtIFBoZXRpb0dyb3VwIHJlcXVpcmVzIHRhbmRlbSB0byBiZSB0aGUgZmlyc3QgcGFyYW1cclxuICAgICAqL1xyXG4gICAgY29uc3QgY3JlYXRlRWxlbWVudCA9ICggdGFuZGVtOiBUYW5kZW0gKSA9PiBuZXcgV29sZiggbW9kZWxWaWV3VHJhbnNmb3JtLCB0YW5kZW0gKTtcclxuXHJcbiAgICAvLyBkZWZhdWx0QXJndW1lbnRzLCBwYXNzZWQgdG8gY3JlYXRlRWxlbWVudCBkdXJpbmcgQVBJIGhhcnZlc3RcclxuICAgIGNvbnN0IGRlZmF1bHRBcmd1bWVudHM6IFtdID0gW107XHJcblxyXG4gICAgc3VwZXIoIGNyZWF0ZUVsZW1lbnQsIGRlZmF1bHRBcmd1bWVudHMsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdXb2xmR3JvdXAnLCBXb2xmR3JvdXAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxXQUFXLE1BQThCLHNDQUFzQztBQUV0RixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFFeEQsT0FBT0MsSUFBSSxNQUFNLFdBQVc7QUFNNUIsZUFBZSxNQUFNQyxTQUFTLFNBQVNILFdBQVcsQ0FBTztFQUVoREksV0FBV0EsQ0FBRUMsa0JBQWlELEVBQUVDLGVBQWlDLEVBQUc7SUFFekcsTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQW9ELENBQUMsQ0FBRTtNQUU5RTtNQUNBUyxVQUFVLEVBQUVSLFdBQVcsQ0FBQ1MsYUFBYSxDQUFFUCxJQUFJLENBQUNRLE1BQU8sQ0FBQztNQUNwREMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBQyxFQUFFTCxlQUFnQixDQUFDOztJQUVwQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksTUFBTU0sYUFBYSxHQUFLQyxNQUFjLElBQU0sSUFBSVgsSUFBSSxDQUFFRyxrQkFBa0IsRUFBRVEsTUFBTyxDQUFDOztJQUVsRjtJQUNBLE1BQU1DLGdCQUFvQixHQUFHLEVBQUU7SUFFL0IsS0FBSyxDQUFFRixhQUFhLEVBQUVFLGdCQUFnQixFQUFFUCxPQUFRLENBQUM7RUFDbkQ7QUFDRjtBQUVBTixnQkFBZ0IsQ0FBQ2MsUUFBUSxDQUFFLFdBQVcsRUFBRVosU0FBVSxDQUFDIn0=