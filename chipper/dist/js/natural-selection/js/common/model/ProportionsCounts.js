// Copyright 2020-2022, University of Colorado Boulder

/**
 * ProportionsCounts is a data structure used by the Proportions model. It describes the bunny population at
 * the start and end of a generation. This is static, immutable data.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import naturalSelection from '../../naturalSelection.js';
import BunnyCounts from './BunnyCounts.js';
import NaturalSelectionUtils from '../NaturalSelectionUtils.js';
export default class ProportionsCounts {
  constructor(generation, startCounts, endCounts) {
    assert && assert(NaturalSelectionUtils.isNonNegativeInteger(generation), 'invalid generation');
    this.generation = generation;
    this.startCounts = startCounts;
    this.endCounts = endCounts;
  }

  //--------------------------------------------------------------------------------------------------------------------
  // Below here are methods used by ProportionsCountsIO to serialize PhET-iO state.
  //--------------------------------------------------------------------------------------------------------------------

  /**
   * Serializes this ProportionsCounts instance.
   */
  toStateObject() {
    return {
      generation: this.generation,
      startCounts: BunnyCounts.BunnyCountsIO.toStateObject(this.startCounts),
      endCounts: BunnyCounts.BunnyCountsIO.toStateObject(this.endCounts)
    };
  }

  /**
   * Deserializes a ProportionsCounts instance.
   */
  static fromStateObject(stateObject) {
    return new ProportionsCounts(stateObject.generation, BunnyCounts.BunnyCountsIO.fromStateObject(stateObject.startCounts), BunnyCounts.BunnyCountsIO.fromStateObject(stateObject.endCounts));
  }

  /**
   * ProportionsCountsIO handles PhET-iO serialization of ProportionsCounts.
   * It implements 'Data type serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static ProportionsCountsIO = new IOType('ProportionsCountsIO', {
    valueType: ProportionsCounts,
    stateSchema: {
      generation: NumberIO,
      startCounts: BunnyCounts.BunnyCountsIO,
      endCounts: BunnyCounts.BunnyCountsIO
    },
    toStateObject: proportionCounts => proportionCounts.toStateObject(),
    fromStateObject: stateObject => ProportionsCounts.fromStateObject(stateObject)
  });
}
naturalSelection.register('ProportionsCounts', ProportionsCounts);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJOdW1iZXJJTyIsIm5hdHVyYWxTZWxlY3Rpb24iLCJCdW5ueUNvdW50cyIsIk5hdHVyYWxTZWxlY3Rpb25VdGlscyIsIlByb3BvcnRpb25zQ291bnRzIiwiY29uc3RydWN0b3IiLCJnZW5lcmF0aW9uIiwic3RhcnRDb3VudHMiLCJlbmRDb3VudHMiLCJhc3NlcnQiLCJpc05vbk5lZ2F0aXZlSW50ZWdlciIsInRvU3RhdGVPYmplY3QiLCJCdW5ueUNvdW50c0lPIiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJQcm9wb3J0aW9uc0NvdW50c0lPIiwidmFsdWVUeXBlIiwic3RhdGVTY2hlbWEiLCJwcm9wb3J0aW9uQ291bnRzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm9wb3J0aW9uc0NvdW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQcm9wb3J0aW9uc0NvdW50cyBpcyBhIGRhdGEgc3RydWN0dXJlIHVzZWQgYnkgdGhlIFByb3BvcnRpb25zIG1vZGVsLiBJdCBkZXNjcmliZXMgdGhlIGJ1bm55IHBvcHVsYXRpb24gYXRcclxuICogdGhlIHN0YXJ0IGFuZCBlbmQgb2YgYSBnZW5lcmF0aW9uLiBUaGlzIGlzIHN0YXRpYywgaW1tdXRhYmxlIGRhdGEuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5pbXBvcnQgQnVubnlDb3VudHMsIHsgQnVubnlDb3VudHNTdGF0ZU9iamVjdCB9IGZyb20gJy4vQnVubnlDb3VudHMuanMnO1xyXG5pbXBvcnQgTmF0dXJhbFNlbGVjdGlvblV0aWxzIGZyb20gJy4uL05hdHVyYWxTZWxlY3Rpb25VdGlscy5qcyc7XHJcblxyXG50eXBlIFByb3BvcnRpb25zQ291bnRzU3RhdGVPYmplY3QgPSB7XHJcbiAgZ2VuZXJhdGlvbjogbnVtYmVyO1xyXG4gIHN0YXJ0Q291bnRzOiBCdW5ueUNvdW50c1N0YXRlT2JqZWN0O1xyXG4gIGVuZENvdW50czogQnVubnlDb3VudHNTdGF0ZU9iamVjdDtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3BvcnRpb25zQ291bnRzIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGdlbmVyYXRpb246IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgc3RhcnRDb3VudHM6IEJ1bm55Q291bnRzO1xyXG4gIHB1YmxpYyByZWFkb25seSBlbmRDb3VudHM6IEJ1bm55Q291bnRzO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdlbmVyYXRpb246IG51bWJlciwgc3RhcnRDb3VudHM6IEJ1bm55Q291bnRzLCBlbmRDb3VudHM6IEJ1bm55Q291bnRzICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIE5hdHVyYWxTZWxlY3Rpb25VdGlscy5pc05vbk5lZ2F0aXZlSW50ZWdlciggZ2VuZXJhdGlvbiApLCAnaW52YWxpZCBnZW5lcmF0aW9uJyApO1xyXG5cclxuICAgIHRoaXMuZ2VuZXJhdGlvbiA9IGdlbmVyYXRpb247XHJcbiAgICB0aGlzLnN0YXJ0Q291bnRzID0gc3RhcnRDb3VudHM7XHJcbiAgICB0aGlzLmVuZENvdW50cyA9IGVuZENvdW50cztcclxuICB9XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyBCZWxvdyBoZXJlIGFyZSBtZXRob2RzIHVzZWQgYnkgUHJvcG9ydGlvbnNDb3VudHNJTyB0byBzZXJpYWxpemUgUGhFVC1pTyBzdGF0ZS5cclxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8qKlxyXG4gICAqIFNlcmlhbGl6ZXMgdGhpcyBQcm9wb3J0aW9uc0NvdW50cyBpbnN0YW5jZS5cclxuICAgKi9cclxuICBwcml2YXRlIHRvU3RhdGVPYmplY3QoKTogUHJvcG9ydGlvbnNDb3VudHNTdGF0ZU9iamVjdCB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBnZW5lcmF0aW9uOiB0aGlzLmdlbmVyYXRpb24sXHJcbiAgICAgIHN0YXJ0Q291bnRzOiBCdW5ueUNvdW50cy5CdW5ueUNvdW50c0lPLnRvU3RhdGVPYmplY3QoIHRoaXMuc3RhcnRDb3VudHMgKSxcclxuICAgICAgZW5kQ291bnRzOiBCdW5ueUNvdW50cy5CdW5ueUNvdW50c0lPLnRvU3RhdGVPYmplY3QoIHRoaXMuZW5kQ291bnRzIClcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXNlcmlhbGl6ZXMgYSBQcm9wb3J0aW9uc0NvdW50cyBpbnN0YW5jZS5cclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBmcm9tU3RhdGVPYmplY3QoIHN0YXRlT2JqZWN0OiBQcm9wb3J0aW9uc0NvdW50c1N0YXRlT2JqZWN0ICk6IFByb3BvcnRpb25zQ291bnRzIHtcclxuICAgIHJldHVybiBuZXcgUHJvcG9ydGlvbnNDb3VudHMoXHJcbiAgICAgIHN0YXRlT2JqZWN0LmdlbmVyYXRpb24sXHJcbiAgICAgIEJ1bm55Q291bnRzLkJ1bm55Q291bnRzSU8uZnJvbVN0YXRlT2JqZWN0KCBzdGF0ZU9iamVjdC5zdGFydENvdW50cyApLFxyXG4gICAgICBCdW5ueUNvdW50cy5CdW5ueUNvdW50c0lPLmZyb21TdGF0ZU9iamVjdCggc3RhdGVPYmplY3QuZW5kQ291bnRzIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcm9wb3J0aW9uc0NvdW50c0lPIGhhbmRsZXMgUGhFVC1pTyBzZXJpYWxpemF0aW9uIG9mIFByb3BvcnRpb25zQ291bnRzLlxyXG4gICAqIEl0IGltcGxlbWVudHMgJ0RhdGEgdHlwZSBzZXJpYWxpemF0aW9uJywgYXMgZGVzY3JpYmVkIGluIHRoZSBTZXJpYWxpemF0aW9uIHNlY3Rpb24gb2ZcclxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGhldC1pby9ibG9iL21hc3Rlci9kb2MvcGhldC1pby1pbnN0cnVtZW50YXRpb24tdGVjaG5pY2FsLWd1aWRlLm1kI3NlcmlhbGl6YXRpb25cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFByb3BvcnRpb25zQ291bnRzSU8gPSBuZXcgSU9UeXBlPFByb3BvcnRpb25zQ291bnRzLCBQcm9wb3J0aW9uc0NvdW50c1N0YXRlT2JqZWN0PiggJ1Byb3BvcnRpb25zQ291bnRzSU8nLCB7XHJcbiAgICB2YWx1ZVR5cGU6IFByb3BvcnRpb25zQ291bnRzLFxyXG4gICAgc3RhdGVTY2hlbWE6IHtcclxuICAgICAgZ2VuZXJhdGlvbjogTnVtYmVySU8sXHJcbiAgICAgIHN0YXJ0Q291bnRzOiBCdW5ueUNvdW50cy5CdW5ueUNvdW50c0lPLFxyXG4gICAgICBlbmRDb3VudHM6IEJ1bm55Q291bnRzLkJ1bm55Q291bnRzSU9cclxuICAgIH0sXHJcbiAgICB0b1N0YXRlT2JqZWN0OiBwcm9wb3J0aW9uQ291bnRzID0+IHByb3BvcnRpb25Db3VudHMudG9TdGF0ZU9iamVjdCgpLFxyXG4gICAgZnJvbVN0YXRlT2JqZWN0OiBzdGF0ZU9iamVjdCA9PiBQcm9wb3J0aW9uc0NvdW50cy5mcm9tU3RhdGVPYmplY3QoIHN0YXRlT2JqZWN0IClcclxuICB9ICk7XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdQcm9wb3J0aW9uc0NvdW50cycsIFByb3BvcnRpb25zQ291bnRzICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLHVDQUF1QztBQUMxRCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxXQUFXLE1BQWtDLGtCQUFrQjtBQUN0RSxPQUFPQyxxQkFBcUIsTUFBTSw2QkFBNkI7QUFRL0QsZUFBZSxNQUFNQyxpQkFBaUIsQ0FBQztFQU05QkMsV0FBV0EsQ0FBRUMsVUFBa0IsRUFBRUMsV0FBd0IsRUFBRUMsU0FBc0IsRUFBRztJQUV6RkMsTUFBTSxJQUFJQSxNQUFNLENBQUVOLHFCQUFxQixDQUFDTyxvQkFBb0IsQ0FBRUosVUFBVyxDQUFDLEVBQUUsb0JBQXFCLENBQUM7SUFFbEcsSUFBSSxDQUFDQSxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDQyxXQUFXLEdBQUdBLFdBQVc7SUFDOUIsSUFBSSxDQUFDQyxTQUFTLEdBQUdBLFNBQVM7RUFDNUI7O0VBRUE7RUFDQTtFQUNBOztFQUVBO0FBQ0Y7QUFDQTtFQUNVRyxhQUFhQSxDQUFBLEVBQWlDO0lBQ3BELE9BQU87TUFDTEwsVUFBVSxFQUFFLElBQUksQ0FBQ0EsVUFBVTtNQUMzQkMsV0FBVyxFQUFFTCxXQUFXLENBQUNVLGFBQWEsQ0FBQ0QsYUFBYSxDQUFFLElBQUksQ0FBQ0osV0FBWSxDQUFDO01BQ3hFQyxTQUFTLEVBQUVOLFdBQVcsQ0FBQ1UsYUFBYSxDQUFDRCxhQUFhLENBQUUsSUFBSSxDQUFDSCxTQUFVO0lBQ3JFLENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFlSyxlQUFlQSxDQUFFQyxXQUF5QyxFQUFzQjtJQUM3RixPQUFPLElBQUlWLGlCQUFpQixDQUMxQlUsV0FBVyxDQUFDUixVQUFVLEVBQ3RCSixXQUFXLENBQUNVLGFBQWEsQ0FBQ0MsZUFBZSxDQUFFQyxXQUFXLENBQUNQLFdBQVksQ0FBQyxFQUNwRUwsV0FBVyxDQUFDVSxhQUFhLENBQUNDLGVBQWUsQ0FBRUMsV0FBVyxDQUFDTixTQUFVLENBQ25FLENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBdUJPLG1CQUFtQixHQUFHLElBQUloQixNQUFNLENBQW1ELHFCQUFxQixFQUFFO0lBQy9IaUIsU0FBUyxFQUFFWixpQkFBaUI7SUFDNUJhLFdBQVcsRUFBRTtNQUNYWCxVQUFVLEVBQUVOLFFBQVE7TUFDcEJPLFdBQVcsRUFBRUwsV0FBVyxDQUFDVSxhQUFhO01BQ3RDSixTQUFTLEVBQUVOLFdBQVcsQ0FBQ1U7SUFDekIsQ0FBQztJQUNERCxhQUFhLEVBQUVPLGdCQUFnQixJQUFJQSxnQkFBZ0IsQ0FBQ1AsYUFBYSxDQUFDLENBQUM7SUFDbkVFLGVBQWUsRUFBRUMsV0FBVyxJQUFJVixpQkFBaUIsQ0FBQ1MsZUFBZSxDQUFFQyxXQUFZO0VBQ2pGLENBQUUsQ0FBQztBQUNMO0FBRUFiLGdCQUFnQixDQUFDa0IsUUFBUSxDQUFFLG1CQUFtQixFQUFFZixpQkFBa0IsQ0FBQyJ9