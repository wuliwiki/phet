// Copyright 2020-2022, University of Colorado Boulder

/**
 * Phenotype describes the appearance of a bunny, the manifestation of its genotype.
 * See the 'Genotype and Phenotype' section of model.md at
 * https://github.com/phetsims/natural-selection/blob/master/doc/model.md#genotype-and-phenotype
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import required from '../../../../phet-core/js/required.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import naturalSelection from '../../naturalSelection.js';
import Allele from './Allele.js';
export default class Phenotype extends PhetioObject {
  // The alleles that determine the bunny's appearance.
  // They are private because applyState must restore them, but clients should not be able to set them.

  constructor(genotype, providedOptions) {
    const options = optionize()({
      // PhetioObjectOptions
      phetioType: Phenotype.PhenotypeIO,
      phetioDocumentation: 'the appearance of the bunny, the manifestation of its genotype'
    }, providedOptions);
    super(options);
    this._furAllele = genotype.furGenePair.getVisibleAllele();
    this._earsAllele = genotype.earsGenePair.getVisibleAllele();
    this._teethAllele = genotype.teethGenePair.getVisibleAllele();
  }
  get furAllele() {
    return this._furAllele;
  }
  get earsAllele() {
    return this._earsAllele;
  }
  get teethAllele() {
    return this._teethAllele;
  }

  /**
   * Does the phenotype show white fur?
   */
  hasWhiteFur() {
    return this.furAllele === Allele.WHITE_FUR;
  }

  /**
   * Does the phenotype show brown fur?
   */
  hasBrownFur() {
    return this.furAllele === Allele.BROWN_FUR;
  }

  /**
   * Does the phenotype show straight ears?
   */
  hasStraightEars() {
    return this.earsAllele === Allele.STRAIGHT_EARS;
  }

  /**
   * Does the phenotype show floppy ears?
   */
  hasFloppyEars() {
    return this.earsAllele === Allele.FLOPPY_EARS;
  }

  /**
   * Does the phenotype show short teeth?
   */
  hasShortTeeth() {
    return this.teethAllele === Allele.SHORT_TEETH;
  }

  /**
   * Does the phenotype show long teeth?
   */
  hasLongTeeth() {
    return this.teethAllele === Allele.LONG_TEETH;
  }

  //--------------------------------------------------------------------------------------------------------------------
  // Below here are methods used by PhenotypeIO to serialize PhET-iO state.
  //--------------------------------------------------------------------------------------------------------------------

  /**
   * Serializes this Phenotype instance.
   */
  toStateObject() {
    return {
      furAllele: Allele.AlleleIO.toStateObject(this.furAllele),
      earsAllele: Allele.AlleleIO.toStateObject(this.earsAllele),
      teethAllele: Allele.AlleleIO.toStateObject(this.teethAllele)
    };
  }

  /**
   * Restores Phenotype state after instantiation.
   */
  applyState(stateObject) {
    this._furAllele = required(Allele.AlleleIO.fromStateObject(stateObject.furAllele));
    this._earsAllele = required(Allele.AlleleIO.fromStateObject(stateObject.earsAllele));
    this._teethAllele = required(Allele.AlleleIO.fromStateObject(stateObject.teethAllele));
  }

  /**
   * PhenotypeIO handles PhET-iO serialization of Phenotype.
   * It implements 'Dynamic element serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static PhenotypeIO = new IOType('PhenotypeIO', {
    valueType: Phenotype,
    stateSchema: {
      furAllele: Allele.AlleleIO,
      earsAllele: Allele.AlleleIO,
      teethAllele: Allele.AlleleIO
    },
    toStateObject: phenotype => phenotype.toStateObject(),
    applyState: (phenotype, stateObject) => phenotype.applyState(stateObject)
  });
}
naturalSelection.register('Phenotype', Phenotype);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,