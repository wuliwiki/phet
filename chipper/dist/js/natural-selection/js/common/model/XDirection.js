// Copyright 2020-2022, University of Colorado Boulder

/**
 * XDirection is the direction that an Organism (bunny, wolf, shrub) is facing along the x-axis.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import Enumeration from '../../../../phet-core/js/Enumeration.js';
import EnumerationValue from '../../../../phet-core/js/EnumerationValue.js';
import naturalSelection from '../../naturalSelection.js';
export default class XDirection extends EnumerationValue {
  static LEFT = new XDirection();
  static RIGHT = new XDirection();
  static enumeration = new Enumeration(XDirection);

  /**
   * Gets a random enumeration value.
   */
  static getRandom() {
    return dotRandom.nextBoolean() ? XDirection.RIGHT : XDirection.LEFT;
  }

  /**
   * Gets the opposite direction.
   */
  static opposite(xDirection) {
    return xDirection === XDirection.RIGHT ? XDirection.LEFT : XDirection.RIGHT;
  }

  /**
   * Converts an XDirection to a sign, relative to the x-axis. Used to set the sign of the view's x scale, which will
   * reflect the organism about the y-axis, making it appear to face in the desired direction. This assumes that the
   * default x direction for all organisms is XDirection.RIGHT. For example, this means that all bunny PNG files
   * were drawn with the bunny facing right.
   */
  static toSign(xDirection) {
    return xDirection === XDirection.RIGHT ? 1 : -1;
  }
}
naturalSelection.register('XDirection', XDirection);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJuYXR1cmFsU2VsZWN0aW9uIiwiWERpcmVjdGlvbiIsIkxFRlQiLCJSSUdIVCIsImVudW1lcmF0aW9uIiwiZ2V0UmFuZG9tIiwibmV4dEJvb2xlYW4iLCJvcHBvc2l0ZSIsInhEaXJlY3Rpb24iLCJ0b1NpZ24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlhEaXJlY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogWERpcmVjdGlvbiBpcyB0aGUgZGlyZWN0aW9uIHRoYXQgYW4gT3JnYW5pc20gKGJ1bm55LCB3b2xmLCBzaHJ1YikgaXMgZmFjaW5nIGFsb25nIHRoZSB4LWF4aXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvbi5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblZhbHVlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvblZhbHVlLmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYRGlyZWN0aW9uIGV4dGVuZHMgRW51bWVyYXRpb25WYWx1ZSB7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTEVGVCA9IG5ldyBYRGlyZWN0aW9uKCk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBSSUdIVCA9IG5ldyBYRGlyZWN0aW9uKCk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIFhEaXJlY3Rpb24gKTtcclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhIHJhbmRvbSBlbnVtZXJhdGlvbiB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldFJhbmRvbSgpOiBYRGlyZWN0aW9uIHtcclxuICAgIHJldHVybiBkb3RSYW5kb20ubmV4dEJvb2xlYW4oKSA/IFhEaXJlY3Rpb24uUklHSFQgOiBYRGlyZWN0aW9uLkxFRlQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBvcHBvc2l0ZSggeERpcmVjdGlvbjogWERpcmVjdGlvbiApOiBYRGlyZWN0aW9uIHtcclxuICAgIHJldHVybiAoIHhEaXJlY3Rpb24gPT09IFhEaXJlY3Rpb24uUklHSFQgKSA/IFhEaXJlY3Rpb24uTEVGVCA6IFhEaXJlY3Rpb24uUklHSFQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0cyBhbiBYRGlyZWN0aW9uIHRvIGEgc2lnbiwgcmVsYXRpdmUgdG8gdGhlIHgtYXhpcy4gVXNlZCB0byBzZXQgdGhlIHNpZ24gb2YgdGhlIHZpZXcncyB4IHNjYWxlLCB3aGljaCB3aWxsXHJcbiAgICogcmVmbGVjdCB0aGUgb3JnYW5pc20gYWJvdXQgdGhlIHktYXhpcywgbWFraW5nIGl0IGFwcGVhciB0byBmYWNlIGluIHRoZSBkZXNpcmVkIGRpcmVjdGlvbi4gVGhpcyBhc3N1bWVzIHRoYXQgdGhlXHJcbiAgICogZGVmYXVsdCB4IGRpcmVjdGlvbiBmb3IgYWxsIG9yZ2FuaXNtcyBpcyBYRGlyZWN0aW9uLlJJR0hULiBGb3IgZXhhbXBsZSwgdGhpcyBtZWFucyB0aGF0IGFsbCBidW5ueSBQTkcgZmlsZXNcclxuICAgKiB3ZXJlIGRyYXduIHdpdGggdGhlIGJ1bm55IGZhY2luZyByaWdodC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHRvU2lnbiggeERpcmVjdGlvbjogWERpcmVjdGlvbiApOiAxIHwgLTEge1xyXG4gICAgcmV0dXJuICggeERpcmVjdGlvbiA9PT0gWERpcmVjdGlvbi5SSUdIVCApID8gMSA6IC0xO1xyXG4gIH1cclxufVxyXG5cclxubmF0dXJhbFNlbGVjdGlvbi5yZWdpc3RlciggJ1hEaXJlY3Rpb24nLCBYRGlyZWN0aW9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsV0FBVyxNQUFNLHlDQUF5QztBQUNqRSxPQUFPQyxnQkFBZ0IsTUFBTSw4Q0FBOEM7QUFDM0UsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBRXhELGVBQWUsTUFBTUMsVUFBVSxTQUFTRixnQkFBZ0IsQ0FBQztFQUV2RCxPQUF1QkcsSUFBSSxHQUFHLElBQUlELFVBQVUsQ0FBQyxDQUFDO0VBQzlDLE9BQXVCRSxLQUFLLEdBQUcsSUFBSUYsVUFBVSxDQUFDLENBQUM7RUFFL0MsT0FBdUJHLFdBQVcsR0FBRyxJQUFJTixXQUFXLENBQUVHLFVBQVcsQ0FBQzs7RUFFbEU7QUFDRjtBQUNBO0VBQ0UsT0FBY0ksU0FBU0EsQ0FBQSxFQUFlO0lBQ3BDLE9BQU9SLFNBQVMsQ0FBQ1MsV0FBVyxDQUFDLENBQUMsR0FBR0wsVUFBVSxDQUFDRSxLQUFLLEdBQUdGLFVBQVUsQ0FBQ0MsSUFBSTtFQUNyRTs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjSyxRQUFRQSxDQUFFQyxVQUFzQixFQUFlO0lBQzNELE9BQVNBLFVBQVUsS0FBS1AsVUFBVSxDQUFDRSxLQUFLLEdBQUtGLFVBQVUsQ0FBQ0MsSUFBSSxHQUFHRCxVQUFVLENBQUNFLEtBQUs7RUFDakY7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBY00sTUFBTUEsQ0FBRUQsVUFBc0IsRUFBVztJQUNyRCxPQUFTQSxVQUFVLEtBQUtQLFVBQVUsQ0FBQ0UsS0FBSyxHQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDckQ7QUFDRjtBQUVBSCxnQkFBZ0IsQ0FBQ1UsUUFBUSxDQUFFLFlBQVksRUFBRVQsVUFBVyxDQUFDIn0=