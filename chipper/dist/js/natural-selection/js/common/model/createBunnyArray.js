// Copyright 2020-2022, University of Colorado Boulder

/**
 * createBunnyArray creates an observable Array that has counts for each phenotype.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import Property from '../../../../axon/js/Property.js';
import optionize from '../../../../phet-core/js/optionize.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import naturalSelection from '../../naturalSelection.js';
import Bunny from './Bunny.js';
import BunnyCounts from './BunnyCounts.js';

// Additional properties that will be added to ObservableArray<Bunny>

export default function createBunnyArray(providedOptions) {
  const options = optionize()({
    // ObservableArrayOptions
    phetioType: createObservableArray.ObservableArrayIO(ReferenceIO(Bunny.BunnyIO)),
    phetioState: false
  }, providedOptions);

  // We want to add countsProperty later, so do a little TypeScript hackery here to make that possible.
  const bunnyArray = createObservableArray(options);
  const countsProperty = new Property(BunnyCounts.withZero(), {
    tandem: options.tandem.createTandem('countsProperty'),
    phetioValueType: BunnyCounts.BunnyCountsIO,
    phetioState: false // because counts will be restored as Bunny instances are restored to BunnyGroup
  });

  bunnyArray.countsProperty = countsProperty;

  // Update counts when a bunny is added. removeItemAddedListener is not necessary.
  bunnyArray.addItemAddedListener(bunny => {
    countsProperty.value = countsProperty.value.plus(bunny);
    assert && assert(countsProperty.value.totalCount === bunnyArray.length, 'counts out of sync');
  });

  // Update counts when a bunny is removed. removeItemAddedListener is not necessary.
  bunnyArray.addItemRemovedListener(bunny => {
    countsProperty.value = countsProperty.value.minus(bunny);
    assert && assert(countsProperty.value.totalCount === bunnyArray.length, 'counts out of sync');
  });
  bunnyArray.dispose = () => {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  };
  return bunnyArray;
}
naturalSelection.register('createBunnyArray', createBunnyArray);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJQcm9wZXJ0eSIsIm9wdGlvbml6ZSIsIlJlZmVyZW5jZUlPIiwibmF0dXJhbFNlbGVjdGlvbiIsIkJ1bm55IiwiQnVubnlDb3VudHMiLCJjcmVhdGVCdW5ueUFycmF5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInBoZXRpb1R5cGUiLCJPYnNlcnZhYmxlQXJyYXlJTyIsIkJ1bm55SU8iLCJwaGV0aW9TdGF0ZSIsImJ1bm55QXJyYXkiLCJjb3VudHNQcm9wZXJ0eSIsIndpdGhaZXJvIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvVmFsdWVUeXBlIiwiQnVubnlDb3VudHNJTyIsImFkZEl0ZW1BZGRlZExpc3RlbmVyIiwiYnVubnkiLCJ2YWx1ZSIsInBsdXMiLCJhc3NlcnQiLCJ0b3RhbENvdW50IiwibGVuZ3RoIiwiYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciIsIm1pbnVzIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiY3JlYXRlQnVubnlBcnJheS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBjcmVhdGVCdW5ueUFycmF5IGNyZWF0ZXMgYW4gb2JzZXJ2YWJsZSBBcnJheSB0aGF0IGhhcyBjb3VudHMgZm9yIGVhY2ggcGhlbm90eXBlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBjcmVhdGVPYnNlcnZhYmxlQXJyYXksIHsgT2JzZXJ2YWJsZUFycmF5LCBPYnNlcnZhYmxlQXJyYXlPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9jcmVhdGVPYnNlcnZhYmxlQXJyYXkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBCdW5ueSBmcm9tICcuL0J1bm55LmpzJztcclxuaW1wb3J0IEJ1bm55Q291bnRzIGZyb20gJy4vQnVubnlDb3VudHMuanMnO1xyXG5cclxuLy8gQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSBhZGRlZCB0byBPYnNlcnZhYmxlQXJyYXk8QnVubnk+XHJcbnR5cGUgQWRkaXRpb25hbFByb3BlcnRpZXMgPSB7XHJcbiAgY291bnRzUHJvcGVydHk6IFByb3BlcnR5PEJ1bm55Q291bnRzPjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEJ1bm55QXJyYXkgPSBPYnNlcnZhYmxlQXJyYXk8QnVubnk+ICYgQWRkaXRpb25hbFByb3BlcnRpZXM7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgQnVubnlBcnJheU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE9ic2VydmFibGVBcnJheU9wdGlvbnM8QnVubnk+ICZcclxuICBQaWNrUmVxdWlyZWQ8T2JzZXJ2YWJsZUFycmF5T3B0aW9uczxCdW5ueT4sICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJ1bm55QXJyYXkoIHByb3ZpZGVkT3B0aW9uczogQnVubnlBcnJheU9wdGlvbnMgKTogQnVubnlBcnJheSB7XHJcblxyXG4gIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QnVubnlBcnJheU9wdGlvbnMsIFNlbGZPcHRpb25zLCBPYnNlcnZhYmxlQXJyYXlPcHRpb25zPEJ1bm55Pj4oKSgge1xyXG5cclxuICAgIC8vIE9ic2VydmFibGVBcnJheU9wdGlvbnNcclxuICAgIHBoZXRpb1R5cGU6IGNyZWF0ZU9ic2VydmFibGVBcnJheS5PYnNlcnZhYmxlQXJyYXlJTyggUmVmZXJlbmNlSU8oIEJ1bm55LkJ1bm55SU8gKSApLFxyXG4gICAgcGhldGlvU3RhdGU6IGZhbHNlXHJcbiAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gIC8vIFdlIHdhbnQgdG8gYWRkIGNvdW50c1Byb3BlcnR5IGxhdGVyLCBzbyBkbyBhIGxpdHRsZSBUeXBlU2NyaXB0IGhhY2tlcnkgaGVyZSB0byBtYWtlIHRoYXQgcG9zc2libGUuXHJcbiAgY29uc3QgYnVubnlBcnJheTogT2JzZXJ2YWJsZUFycmF5PEJ1bm55PiAmIFBhcnRpYWw8QWRkaXRpb25hbFByb3BlcnRpZXM+ID0gY3JlYXRlT2JzZXJ2YWJsZUFycmF5KCBvcHRpb25zICk7XHJcblxyXG4gIGNvbnN0IGNvdW50c1Byb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBCdW5ueUNvdW50cy53aXRoWmVybygpLCB7XHJcbiAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvdW50c1Byb3BlcnR5JyApLFxyXG4gICAgcGhldGlvVmFsdWVUeXBlOiBCdW5ueUNvdW50cy5CdW5ueUNvdW50c0lPLFxyXG4gICAgcGhldGlvU3RhdGU6IGZhbHNlIC8vIGJlY2F1c2UgY291bnRzIHdpbGwgYmUgcmVzdG9yZWQgYXMgQnVubnkgaW5zdGFuY2VzIGFyZSByZXN0b3JlZCB0byBCdW5ueUdyb3VwXHJcbiAgfSApO1xyXG5cclxuICBidW5ueUFycmF5LmNvdW50c1Byb3BlcnR5ID0gY291bnRzUHJvcGVydHk7XHJcblxyXG4gIC8vIFVwZGF0ZSBjb3VudHMgd2hlbiBhIGJ1bm55IGlzIGFkZGVkLiByZW1vdmVJdGVtQWRkZWRMaXN0ZW5lciBpcyBub3QgbmVjZXNzYXJ5LlxyXG4gIGJ1bm55QXJyYXkuYWRkSXRlbUFkZGVkTGlzdGVuZXIoIGJ1bm55ID0+IHtcclxuICAgIGNvdW50c1Byb3BlcnR5LnZhbHVlID0gY291bnRzUHJvcGVydHkudmFsdWUucGx1cyggYnVubnkgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvdW50c1Byb3BlcnR5LnZhbHVlLnRvdGFsQ291bnQgPT09IGJ1bm55QXJyYXkubGVuZ3RoLCAnY291bnRzIG91dCBvZiBzeW5jJyApO1xyXG4gIH0gKTtcclxuXHJcbiAgLy8gVXBkYXRlIGNvdW50cyB3aGVuIGEgYnVubnkgaXMgcmVtb3ZlZC4gcmVtb3ZlSXRlbUFkZGVkTGlzdGVuZXIgaXMgbm90IG5lY2Vzc2FyeS5cclxuICBidW5ueUFycmF5LmFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIoIGJ1bm55ID0+IHtcclxuICAgIGNvdW50c1Byb3BlcnR5LnZhbHVlID0gY291bnRzUHJvcGVydHkudmFsdWUubWludXMoIGJ1bm55ICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb3VudHNQcm9wZXJ0eS52YWx1ZS50b3RhbENvdW50ID09PSBidW5ueUFycmF5Lmxlbmd0aCwgJ2NvdW50cyBvdXQgb2Ygc3luYycgKTtcclxuICB9ICk7XHJcblxyXG4gIGJ1bm55QXJyYXkuZGlzcG9zZSA9ICgpID0+IHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBidW5ueUFycmF5IGFzIEJ1bm55QXJyYXk7XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdjcmVhdGVCdW5ueUFycmF5JywgY3JlYXRlQnVubnlBcnJheSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxxQkFBcUIsTUFBbUQsOENBQThDO0FBQzdILE9BQU9DLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0MsV0FBVyxNQUFNLDRDQUE0QztBQUNwRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjs7QUFFMUM7O0FBWUEsZUFBZSxTQUFTQyxnQkFBZ0JBLENBQUVDLGVBQWtDLEVBQWU7RUFFekYsTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQWdFLENBQUMsQ0FBRTtJQUUxRjtJQUNBUSxVQUFVLEVBQUVWLHFCQUFxQixDQUFDVyxpQkFBaUIsQ0FBRVIsV0FBVyxDQUFFRSxLQUFLLENBQUNPLE9BQVEsQ0FBRSxDQUFDO0lBQ25GQyxXQUFXLEVBQUU7RUFDZixDQUFDLEVBQUVMLGVBQWdCLENBQUM7O0VBRXBCO0VBQ0EsTUFBTU0sVUFBa0UsR0FBR2QscUJBQXFCLENBQUVTLE9BQVEsQ0FBQztFQUUzRyxNQUFNTSxjQUFjLEdBQUcsSUFBSWQsUUFBUSxDQUFFSyxXQUFXLENBQUNVLFFBQVEsQ0FBQyxDQUFDLEVBQUU7SUFDM0RDLE1BQU0sRUFBRVIsT0FBTyxDQUFDUSxNQUFNLENBQUNDLFlBQVksQ0FBRSxnQkFBaUIsQ0FBQztJQUN2REMsZUFBZSxFQUFFYixXQUFXLENBQUNjLGFBQWE7SUFDMUNQLFdBQVcsRUFBRSxLQUFLLENBQUM7RUFDckIsQ0FBRSxDQUFDOztFQUVIQyxVQUFVLENBQUNDLGNBQWMsR0FBR0EsY0FBYzs7RUFFMUM7RUFDQUQsVUFBVSxDQUFDTyxvQkFBb0IsQ0FBRUMsS0FBSyxJQUFJO0lBQ3hDUCxjQUFjLENBQUNRLEtBQUssR0FBR1IsY0FBYyxDQUFDUSxLQUFLLENBQUNDLElBQUksQ0FBRUYsS0FBTSxDQUFDO0lBQ3pERyxNQUFNLElBQUlBLE1BQU0sQ0FBRVYsY0FBYyxDQUFDUSxLQUFLLENBQUNHLFVBQVUsS0FBS1osVUFBVSxDQUFDYSxNQUFNLEVBQUUsb0JBQXFCLENBQUM7RUFDakcsQ0FBRSxDQUFDOztFQUVIO0VBQ0FiLFVBQVUsQ0FBQ2Msc0JBQXNCLENBQUVOLEtBQUssSUFBSTtJQUMxQ1AsY0FBYyxDQUFDUSxLQUFLLEdBQUdSLGNBQWMsQ0FBQ1EsS0FBSyxDQUFDTSxLQUFLLENBQUVQLEtBQU0sQ0FBQztJQUMxREcsTUFBTSxJQUFJQSxNQUFNLENBQUVWLGNBQWMsQ0FBQ1EsS0FBSyxDQUFDRyxVQUFVLEtBQUtaLFVBQVUsQ0FBQ2EsTUFBTSxFQUFFLG9CQUFxQixDQUFDO0VBQ2pHLENBQUUsQ0FBQztFQUVIYixVQUFVLENBQUNnQixPQUFPLEdBQUcsTUFBTTtJQUN6QkwsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0VBQzNGLENBQUM7RUFFRCxPQUFPWCxVQUFVO0FBQ25CO0FBRUFWLGdCQUFnQixDQUFDMkIsUUFBUSxDQUFFLGtCQUFrQixFQUFFeEIsZ0JBQWlCLENBQUMifQ==