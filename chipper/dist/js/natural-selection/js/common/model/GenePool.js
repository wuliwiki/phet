// Copyright 2020-2022, University of Colorado Boulder

/**
 * GenePool is the pool of genes for the bunny population.
 * There is one instance of GenePool per screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import naturalSelection from '../../naturalSelection.js';
import Gene from './Gene.js';
export default class GenePool {
  // For situations where it's possible to iterate over genes, the order here determines the order of UI components.

  constructor(providedOptions) {
    const options = providedOptions;
    this.furGene = Gene.createFurGene(options.tandem.createTandem('furGene'));
    this.earsGene = Gene.createEarsGene(options.tandem.createTandem('earsGene'));
    this.teethGene = Gene.createTeethGene(options.tandem.createTandem('teethGene'));
    this.genes = [this.furGene, this.earsGene, this.teethGene];
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.genes.forEach(gene => gene.reset());
  }

  /**
   * Resets mutationComingProperty for all genes in the pool. This is called after a mating cycle has completed, and
   * mutations have been applied.
   */
  resetMutationComing() {
    this.genes.forEach(gene => gene.mutationComingProperty.reset());
  }

  /**
   * Is the specified allele a recessive mutation?
   */
  isRecessiveMutation(allele) {
    let isRecessiveMutation = false;
    for (let i = 0; i < this.genes.length && !isRecessiveMutation; i++) {
      isRecessiveMutation = this.genes[i].mutantAllele === allele && this.genes[i].recessiveAlleleProperty.value === allele;
    }
    return isRecessiveMutation;
  }

  /**
   * Gets the dependencies on dynamic strings that are used to derive the abbreviations for genes in the pool.
   * These strings may be changed via PhET-iO, or by changing the global localeProperty.
   */
  getGenotypeAbbreviationStringDependencies() {
    const dependencies = [];
    this.genes.forEach(gene => {
      dependencies.push(gene.dominantAbbreviationTranslatedProperty);
      dependencies.push(gene.recessiveAbbreviationTranslatedProperty);
    });
    return dependencies;
  }
}
naturalSelection.register('GenePool', GenePool);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuYXR1cmFsU2VsZWN0aW9uIiwiR2VuZSIsIkdlbmVQb29sIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZnVyR2VuZSIsImNyZWF0ZUZ1ckdlbmUiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJlYXJzR2VuZSIsImNyZWF0ZUVhcnNHZW5lIiwidGVldGhHZW5lIiwiY3JlYXRlVGVldGhHZW5lIiwiZ2VuZXMiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVzZXQiLCJmb3JFYWNoIiwiZ2VuZSIsInJlc2V0TXV0YXRpb25Db21pbmciLCJtdXRhdGlvbkNvbWluZ1Byb3BlcnR5IiwiaXNSZWNlc3NpdmVNdXRhdGlvbiIsImFsbGVsZSIsImkiLCJsZW5ndGgiLCJtdXRhbnRBbGxlbGUiLCJyZWNlc3NpdmVBbGxlbGVQcm9wZXJ0eSIsInZhbHVlIiwiZ2V0R2Vub3R5cGVBYmJyZXZpYXRpb25TdHJpbmdEZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmNpZXMiLCJwdXNoIiwiZG9taW5hbnRBYmJyZXZpYXRpb25UcmFuc2xhdGVkUHJvcGVydHkiLCJyZWNlc3NpdmVBYmJyZXZpYXRpb25UcmFuc2xhdGVkUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdlbmVQb29sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdlbmVQb29sIGlzIHRoZSBwb29sIG9mIGdlbmVzIGZvciB0aGUgYnVubnkgcG9wdWxhdGlvbi5cclxuICogVGhlcmUgaXMgb25lIGluc3RhbmNlIG9mIEdlbmVQb29sIHBlciBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IG5hdHVyYWxTZWxlY3Rpb24gZnJvbSAnLi4vLi4vbmF0dXJhbFNlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBBbGxlbGUgZnJvbSAnLi9BbGxlbGUuanMnO1xyXG5pbXBvcnQgR2VuZSBmcm9tICcuL0dlbmUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEdlbmVQb29sT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlbmVQb29sIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGZ1ckdlbmU6IEdlbmU7XHJcbiAgcHVibGljIHJlYWRvbmx5IGVhcnNHZW5lOiBHZW5lO1xyXG4gIHB1YmxpYyByZWFkb25seSB0ZWV0aEdlbmU6IEdlbmU7XHJcblxyXG4gIC8vIEZvciBzaXR1YXRpb25zIHdoZXJlIGl0J3MgcG9zc2libGUgdG8gaXRlcmF0ZSBvdmVyIGdlbmVzLCB0aGUgb3JkZXIgaGVyZSBkZXRlcm1pbmVzIHRoZSBvcmRlciBvZiBVSSBjb21wb25lbnRzLlxyXG4gIHB1YmxpYyByZWFkb25seSBnZW5lczogR2VuZVtdO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogR2VuZVBvb2xPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBwcm92aWRlZE9wdGlvbnM7XHJcblxyXG4gICAgdGhpcy5mdXJHZW5lID0gR2VuZS5jcmVhdGVGdXJHZW5lKCBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdmdXJHZW5lJyApICk7XHJcbiAgICB0aGlzLmVhcnNHZW5lID0gR2VuZS5jcmVhdGVFYXJzR2VuZSggb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnZWFyc0dlbmUnICkgKTtcclxuICAgIHRoaXMudGVldGhHZW5lID0gR2VuZS5jcmVhdGVUZWV0aEdlbmUoIG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RlZXRoR2VuZScgKSApO1xyXG4gICAgdGhpcy5nZW5lcyA9IFsgdGhpcy5mdXJHZW5lLCB0aGlzLmVhcnNHZW5lLCB0aGlzLnRlZXRoR2VuZSBdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZ2VuZXMuZm9yRWFjaCggZ2VuZSA9PiBnZW5lLnJlc2V0KCkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyBtdXRhdGlvbkNvbWluZ1Byb3BlcnR5IGZvciBhbGwgZ2VuZXMgaW4gdGhlIHBvb2wuIFRoaXMgaXMgY2FsbGVkIGFmdGVyIGEgbWF0aW5nIGN5Y2xlIGhhcyBjb21wbGV0ZWQsIGFuZFxyXG4gICAqIG11dGF0aW9ucyBoYXZlIGJlZW4gYXBwbGllZC5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzZXRNdXRhdGlvbkNvbWluZygpOiB2b2lkIHtcclxuICAgIHRoaXMuZ2VuZXMuZm9yRWFjaCggZ2VuZSA9PiBnZW5lLm11dGF0aW9uQ29taW5nUHJvcGVydHkucmVzZXQoKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSXMgdGhlIHNwZWNpZmllZCBhbGxlbGUgYSByZWNlc3NpdmUgbXV0YXRpb24/XHJcbiAgICovXHJcbiAgcHVibGljIGlzUmVjZXNzaXZlTXV0YXRpb24oIGFsbGVsZTogQWxsZWxlIHwgbnVsbCApOiBib29sZWFuIHtcclxuXHJcbiAgICBsZXQgaXNSZWNlc3NpdmVNdXRhdGlvbiA9IGZhbHNlO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5nZW5lcy5sZW5ndGggJiYgIWlzUmVjZXNzaXZlTXV0YXRpb247IGkrKyApIHtcclxuICAgICAgaXNSZWNlc3NpdmVNdXRhdGlvbiA9ICggdGhpcy5nZW5lc1sgaSBdLm11dGFudEFsbGVsZSA9PT0gYWxsZWxlICkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICggdGhpcy5nZW5lc1sgaSBdLnJlY2Vzc2l2ZUFsbGVsZVByb3BlcnR5LnZhbHVlID09PSBhbGxlbGUgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpc1JlY2Vzc2l2ZU11dGF0aW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgZGVwZW5kZW5jaWVzIG9uIGR5bmFtaWMgc3RyaW5ncyB0aGF0IGFyZSB1c2VkIHRvIGRlcml2ZSB0aGUgYWJicmV2aWF0aW9ucyBmb3IgZ2VuZXMgaW4gdGhlIHBvb2wuXHJcbiAgICogVGhlc2Ugc3RyaW5ncyBtYXkgYmUgY2hhbmdlZCB2aWEgUGhFVC1pTywgb3IgYnkgY2hhbmdpbmcgdGhlIGdsb2JhbCBsb2NhbGVQcm9wZXJ0eS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0R2Vub3R5cGVBYmJyZXZpYXRpb25TdHJpbmdEZXBlbmRlbmNpZXMoKTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPltdIHtcclxuICAgIGNvbnN0IGRlcGVuZGVuY2llczogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPltdID0gW107XHJcbiAgICB0aGlzLmdlbmVzLmZvckVhY2goIGdlbmUgPT4ge1xyXG4gICAgICBkZXBlbmRlbmNpZXMucHVzaCggZ2VuZS5kb21pbmFudEFiYnJldmlhdGlvblRyYW5zbGF0ZWRQcm9wZXJ0eSApO1xyXG4gICAgICBkZXBlbmRlbmNpZXMucHVzaCggZ2VuZS5yZWNlc3NpdmVBYmJyZXZpYXRpb25UcmFuc2xhdGVkUHJvcGVydHkgKTtcclxuICAgIH0gKTtcclxuICAgIHJldHVybiBkZXBlbmRlbmNpZXM7XHJcbiAgfVxyXG59XHJcblxyXG5uYXR1cmFsU2VsZWN0aW9uLnJlZ2lzdGVyKCAnR2VuZVBvb2wnLCBHZW5lUG9vbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1BLE9BQU9BLGdCQUFnQixNQUFNLDJCQUEyQjtBQUV4RCxPQUFPQyxJQUFJLE1BQU0sV0FBVztBQU01QixlQUFlLE1BQU1DLFFBQVEsQ0FBQztFQU01Qjs7RUFHT0MsV0FBV0EsQ0FBRUMsZUFBZ0MsRUFBRztJQUVyRCxNQUFNQyxPQUFPLEdBQUdELGVBQWU7SUFFL0IsSUFBSSxDQUFDRSxPQUFPLEdBQUdMLElBQUksQ0FBQ00sYUFBYSxDQUFFRixPQUFPLENBQUNHLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFNBQVUsQ0FBRSxDQUFDO0lBQzdFLElBQUksQ0FBQ0MsUUFBUSxHQUFHVCxJQUFJLENBQUNVLGNBQWMsQ0FBRU4sT0FBTyxDQUFDRyxNQUFNLENBQUNDLFlBQVksQ0FBRSxVQUFXLENBQUUsQ0FBQztJQUNoRixJQUFJLENBQUNHLFNBQVMsR0FBR1gsSUFBSSxDQUFDWSxlQUFlLENBQUVSLE9BQU8sQ0FBQ0csTUFBTSxDQUFDQyxZQUFZLENBQUUsV0FBWSxDQUFFLENBQUM7SUFDbkYsSUFBSSxDQUFDSyxLQUFLLEdBQUcsQ0FBRSxJQUFJLENBQUNSLE9BQU8sRUFBRSxJQUFJLENBQUNJLFFBQVEsRUFBRSxJQUFJLENBQUNFLFNBQVMsQ0FBRTtFQUM5RDtFQUVPRyxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjtFQUVPQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDSCxLQUFLLENBQUNJLE9BQU8sQ0FBRUMsSUFBSSxJQUFJQSxJQUFJLENBQUNGLEtBQUssQ0FBQyxDQUFFLENBQUM7RUFDNUM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDU0csbUJBQW1CQSxDQUFBLEVBQVM7SUFDakMsSUFBSSxDQUFDTixLQUFLLENBQUNJLE9BQU8sQ0FBRUMsSUFBSSxJQUFJQSxJQUFJLENBQUNFLHNCQUFzQixDQUFDSixLQUFLLENBQUMsQ0FBRSxDQUFDO0VBQ25FOztFQUVBO0FBQ0Y7QUFDQTtFQUNTSyxtQkFBbUJBLENBQUVDLE1BQXFCLEVBQVk7SUFFM0QsSUFBSUQsbUJBQW1CLEdBQUcsS0FBSztJQUMvQixLQUFNLElBQUlFLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNWLEtBQUssQ0FBQ1csTUFBTSxJQUFJLENBQUNILG1CQUFtQixFQUFFRSxDQUFDLEVBQUUsRUFBRztNQUNwRUYsbUJBQW1CLEdBQUssSUFBSSxDQUFDUixLQUFLLENBQUVVLENBQUMsQ0FBRSxDQUFDRSxZQUFZLEtBQUtILE1BQU0sSUFDdkMsSUFBSSxDQUFDVCxLQUFLLENBQUVVLENBQUMsQ0FBRSxDQUFDRyx1QkFBdUIsQ0FBQ0MsS0FBSyxLQUFLTCxNQUFRO0lBQ3BGO0lBQ0EsT0FBT0QsbUJBQW1CO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NPLHlDQUF5Q0EsQ0FBQSxFQUFnQztJQUM5RSxNQUFNQyxZQUF5QyxHQUFHLEVBQUU7SUFDcEQsSUFBSSxDQUFDaEIsS0FBSyxDQUFDSSxPQUFPLENBQUVDLElBQUksSUFBSTtNQUMxQlcsWUFBWSxDQUFDQyxJQUFJLENBQUVaLElBQUksQ0FBQ2Esc0NBQXVDLENBQUM7TUFDaEVGLFlBQVksQ0FBQ0MsSUFBSSxDQUFFWixJQUFJLENBQUNjLHVDQUF3QyxDQUFDO0lBQ25FLENBQUUsQ0FBQztJQUNILE9BQU9ILFlBQVk7RUFDckI7QUFDRjtBQUVBOUIsZ0JBQWdCLENBQUNrQyxRQUFRLENBQUUsVUFBVSxFQUFFaEMsUUFBUyxDQUFDIn0=