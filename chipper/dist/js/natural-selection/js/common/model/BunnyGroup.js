// Copyright 2020-2022, University of Colorado Boulder

/**
 * BunnyGroup is the PhetioGroup for Bunny.  It manages dynamic instances of Bunny, as required by PhET-iO.
 * All Bunny instances are created and disposed via this group.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import PhetioGroup from '../../../../tandem/js/PhetioGroup.js';
import naturalSelection from '../../naturalSelection.js';
import Bunny from './Bunny.js';

// tandem is omitted because BunnyGroup provides the tandem.

// Arguments to createElement, other than tandem.

export default class BunnyGroup extends PhetioGroup {
  constructor(genePool, modelViewTransform, bunnyRestRangeProperty, providedOptions) {
    const options = optionize()({
      // PhetioGroupOptions
      phetioType: PhetioGroup.PhetioGroupIO(Bunny.BunnyIO),
      phetioDocumentation: 'manages dynamic PhET-iO elements of type Bunny, including live and dead bunnies'
    }, providedOptions);

    /**
     * Called to instantiate a Bunny. Note that genePool and modelViewTransform arguments to Bunny constructor
     * are passed via closure, so we don't have to create them as part of defaultArguments, and don't have to
     * deal with serializing them in BunnyIO.
     * @param tandem - PhetioGroup requires tandem to be the first param
     * @param providedOptions - not actually optional, because createElement must have a fixed number of args
     */
    const createElement = (tandem, providedOptions) => {
      return new Bunny(genePool, modelViewTransform, bunnyRestRangeProperty, combineOptions({
        tandem: tandem
      }, providedOptions));
    };

    // defaultArguments, passed to createElement during API harvest
    const defaultArguments = [{}];
    super(createElement, defaultArguments, options);
  }
}
naturalSelection.register('BunnyGroup', BunnyGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIlBoZXRpb0dyb3VwIiwibmF0dXJhbFNlbGVjdGlvbiIsIkJ1bm55IiwiQnVubnlHcm91cCIsImNvbnN0cnVjdG9yIiwiZ2VuZVBvb2wiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJidW5ueVJlc3RSYW5nZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInBoZXRpb1R5cGUiLCJQaGV0aW9Hcm91cElPIiwiQnVubnlJTyIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJjcmVhdGVFbGVtZW50IiwidGFuZGVtIiwiZGVmYXVsdEFyZ3VtZW50cyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQnVubnlHcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCdW5ueUdyb3VwIGlzIHRoZSBQaGV0aW9Hcm91cCBmb3IgQnVubnkuICBJdCBtYW5hZ2VzIGR5bmFtaWMgaW5zdGFuY2VzIG9mIEJ1bm55LCBhcyByZXF1aXJlZCBieSBQaEVULWlPLlxyXG4gKiBBbGwgQnVubnkgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFuZCBkaXNwb3NlZCB2aWEgdGhpcyBncm91cC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IFBoZXRpb0dyb3VwLCB7IFBoZXRpb0dyb3VwT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9Hcm91cC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5pbXBvcnQgQnVubnksIHsgQnVubnlPcHRpb25zIH0gZnJvbSAnLi9CdW5ueS5qcyc7XHJcbmltcG9ydCBFbnZpcm9ubWVudE1vZGVsVmlld1RyYW5zZm9ybSBmcm9tICcuL0Vudmlyb25tZW50TW9kZWxWaWV3VHJhbnNmb3JtLmpzJztcclxuaW1wb3J0IEdlbmVQb29sIGZyb20gJy4vR2VuZVBvb2wuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEJ1bm55R3JvdXBPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvR3JvdXBPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG4vLyB0YW5kZW0gaXMgb21pdHRlZCBiZWNhdXNlIEJ1bm55R3JvdXAgcHJvdmlkZXMgdGhlIHRhbmRlbS5cclxuZXhwb3J0IHR5cGUgQnVubnlHcm91cENyZWF0ZUVsZW1lbnRPcHRpb25zID0gU3RyaWN0T21pdDxCdW5ueU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbi8vIEFyZ3VtZW50cyB0byBjcmVhdGVFbGVtZW50LCBvdGhlciB0aGFuIHRhbmRlbS5cclxuZXhwb3J0IHR5cGUgQnVubnlHcm91cENyZWF0ZUVsZW1lbnRBcmd1bWVudHMgPSBbIEJ1bm55R3JvdXBDcmVhdGVFbGVtZW50T3B0aW9ucyBdO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVubnlHcm91cCBleHRlbmRzIFBoZXRpb0dyb3VwPEJ1bm55LCBCdW5ueUdyb3VwQ3JlYXRlRWxlbWVudEFyZ3VtZW50cz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdlbmVQb29sOiBHZW5lUG9vbCxcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld1RyYW5zZm9ybTogRW52aXJvbm1lbnRNb2RlbFZpZXdUcmFuc2Zvcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgICBidW5ueVJlc3RSYW5nZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxSYW5nZT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEJ1bm55R3JvdXBPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QnVubnlHcm91cE9wdGlvbnMsIFNlbGZPcHRpb25zLCBQaGV0aW9Hcm91cE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFBoZXRpb0dyb3VwT3B0aW9uc1xyXG4gICAgICBwaGV0aW9UeXBlOiBQaGV0aW9Hcm91cC5QaGV0aW9Hcm91cElPKCBCdW5ueS5CdW5ueUlPICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdtYW5hZ2VzIGR5bmFtaWMgUGhFVC1pTyBlbGVtZW50cyBvZiB0eXBlIEJ1bm55LCBpbmNsdWRpbmcgbGl2ZSBhbmQgZGVhZCBidW5uaWVzJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgdG8gaW5zdGFudGlhdGUgYSBCdW5ueS4gTm90ZSB0aGF0IGdlbmVQb29sIGFuZCBtb2RlbFZpZXdUcmFuc2Zvcm0gYXJndW1lbnRzIHRvIEJ1bm55IGNvbnN0cnVjdG9yXHJcbiAgICAgKiBhcmUgcGFzc2VkIHZpYSBjbG9zdXJlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIGNyZWF0ZSB0aGVtIGFzIHBhcnQgb2YgZGVmYXVsdEFyZ3VtZW50cywgYW5kIGRvbid0IGhhdmUgdG9cclxuICAgICAqIGRlYWwgd2l0aCBzZXJpYWxpemluZyB0aGVtIGluIEJ1bm55SU8uXHJcbiAgICAgKiBAcGFyYW0gdGFuZGVtIC0gUGhldGlvR3JvdXAgcmVxdWlyZXMgdGFuZGVtIHRvIGJlIHRoZSBmaXJzdCBwYXJhbVxyXG4gICAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9ucyAtIG5vdCBhY3R1YWxseSBvcHRpb25hbCwgYmVjYXVzZSBjcmVhdGVFbGVtZW50IG11c3QgaGF2ZSBhIGZpeGVkIG51bWJlciBvZiBhcmdzXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAoIHRhbmRlbTogVGFuZGVtLCBwcm92aWRlZE9wdGlvbnM6IEJ1bm55R3JvdXBDcmVhdGVFbGVtZW50T3B0aW9ucyApID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBCdW5ueSggZ2VuZVBvb2wsIG1vZGVsVmlld1RyYW5zZm9ybSwgYnVubnlSZXN0UmFuZ2VQcm9wZXJ0eSxcclxuICAgICAgICBjb21iaW5lT3B0aW9uczxCdW5ueU9wdGlvbnM+KCB7XHJcbiAgICAgICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGRlZmF1bHRBcmd1bWVudHMsIHBhc3NlZCB0byBjcmVhdGVFbGVtZW50IGR1cmluZyBBUEkgaGFydmVzdFxyXG4gICAgY29uc3QgZGVmYXVsdEFyZ3VtZW50czogQnVubnlHcm91cENyZWF0ZUVsZW1lbnRBcmd1bWVudHMgPSBbIHt9IF07XHJcblxyXG4gICAgc3VwZXIoIGNyZWF0ZUVsZW1lbnQsIGRlZmF1bHRBcmd1bWVudHMsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbm5hdHVyYWxTZWxlY3Rpb24ucmVnaXN0ZXIoICdCdW5ueUdyb3VwJywgQnVubnlHcm91cCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLFNBQVMsSUFBSUMsY0FBYyxRQUEwQix1Q0FBdUM7QUFHbkcsT0FBT0MsV0FBVyxNQUE4QixzQ0FBc0M7QUFFdEYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLEtBQUssTUFBd0IsWUFBWTs7QUFRaEQ7O0FBR0E7O0FBR0EsZUFBZSxNQUFNQyxVQUFVLFNBQVNILFdBQVcsQ0FBMEM7RUFFcEZJLFdBQVdBLENBQUVDLFFBQWtCLEVBQ2xCQyxrQkFBaUQsRUFDakRDLHNCQUFnRCxFQUNoREMsZUFBa0MsRUFBRztJQUV2RCxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBcUQsQ0FBQyxDQUFFO01BRS9FO01BQ0FZLFVBQVUsRUFBRVYsV0FBVyxDQUFDVyxhQUFhLENBQUVULEtBQUssQ0FBQ1UsT0FBUSxDQUFDO01BQ3REQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFDLEVBQUVMLGVBQWdCLENBQUM7O0lBRXBCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksTUFBTU0sYUFBYSxHQUFHQSxDQUFFQyxNQUFjLEVBQUVQLGVBQStDLEtBQU07TUFDM0YsT0FBTyxJQUFJTixLQUFLLENBQUVHLFFBQVEsRUFBRUMsa0JBQWtCLEVBQUVDLHNCQUFzQixFQUNwRVIsY0FBYyxDQUFnQjtRQUM1QmdCLE1BQU0sRUFBRUE7TUFDVixDQUFDLEVBQUVQLGVBQWdCLENBQUUsQ0FBQztJQUMxQixDQUFDOztJQUVEO0lBQ0EsTUFBTVEsZ0JBQWtELEdBQUcsQ0FBRSxDQUFDLENBQUMsQ0FBRTtJQUVqRSxLQUFLLENBQUVGLGFBQWEsRUFBRUUsZ0JBQWdCLEVBQUVQLE9BQVEsQ0FBQztFQUNuRDtBQUNGO0FBRUFSLGdCQUFnQixDQUFDZ0IsUUFBUSxDQUFFLFlBQVksRUFBRWQsVUFBVyxDQUFDIn0=