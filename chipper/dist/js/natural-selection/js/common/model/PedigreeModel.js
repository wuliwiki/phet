// Copyright 2020-2022, University of Colorado Boulder

/**
 * PedigreeModel is the sub-model for the Pedigree graph.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import naturalSelection from '../../naturalSelection.js';
export default class PedigreeModel extends PhetioObject {
  // visibility of each gene in the genotype abbreviation that appears in the Pedigree tree

  constructor(providedOptions) {
    const options = optionize()({
      // PhetioObjectOptions
      phetioState: false,
      // to prevent serialization, because we don't have an IO Type
      phetioDocumentation: 'model elements that are specific to the Pedigree feature'
    }, providedOptions);
    super(options);
    this.furAllelesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('furAllelesVisibleProperty')
    });
    this.earsAllelesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('earsAllelesVisibleProperty')
    });
    this.teethAllelesVisibleProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('teethAllelesVisibleProperty')
    });
  }
  reset() {
    this.furAllelesVisibleProperty.reset();
    this.earsAllelesVisibleProperty.reset();
    this.teethAllelesVisibleProperty.reset();
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
naturalSelection.register('PedigreeModel', PedigreeModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJvcHRpb25pemUiLCJQaGV0aW9PYmplY3QiLCJuYXR1cmFsU2VsZWN0aW9uIiwiUGVkaWdyZWVNb2RlbCIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInBoZXRpb1N0YXRlIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsImZ1ckFsbGVsZXNWaXNpYmxlUHJvcGVydHkiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJlYXJzQWxsZWxlc1Zpc2libGVQcm9wZXJ0eSIsInRlZXRoQWxsZWxlc1Zpc2libGVQcm9wZXJ0eSIsInJlc2V0IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGVkaWdyZWVNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQZWRpZ3JlZU1vZGVsIGlzIHRoZSBzdWItbW9kZWwgZm9yIHRoZSBQZWRpZ3JlZSBncmFwaC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFBoZXRpb09iamVjdCwgeyBQaGV0aW9PYmplY3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb09iamVjdC5qcyc7XHJcbmltcG9ydCBuYXR1cmFsU2VsZWN0aW9uIGZyb20gJy4uLy4uL25hdHVyYWxTZWxlY3Rpb24uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFBlZGlncmVlTW9kZWxPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVkaWdyZWVNb2RlbCBleHRlbmRzIFBoZXRpb09iamVjdCB7XHJcblxyXG4gIC8vIHZpc2liaWxpdHkgb2YgZWFjaCBnZW5lIGluIHRoZSBnZW5vdHlwZSBhYmJyZXZpYXRpb24gdGhhdCBhcHBlYXJzIGluIHRoZSBQZWRpZ3JlZSB0cmVlXHJcbiAgcHVibGljIHJlYWRvbmx5IGZ1ckFsbGVsZXNWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG4gIHB1YmxpYyByZWFkb25seSBlYXJzQWxsZWxlc1Zpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHVibGljIHJlYWRvbmx5IHRlZXRoQWxsZWxlc1Zpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBQZWRpZ3JlZU1vZGVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFBlZGlncmVlTW9kZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgUGhldGlvT2JqZWN0T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUGhldGlvT2JqZWN0T3B0aW9uc1xyXG4gICAgICBwaGV0aW9TdGF0ZTogZmFsc2UsIC8vIHRvIHByZXZlbnQgc2VyaWFsaXphdGlvbiwgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGFuIElPIFR5cGVcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ21vZGVsIGVsZW1lbnRzIHRoYXQgYXJlIHNwZWNpZmljIHRvIHRoZSBQZWRpZ3JlZSBmZWF0dXJlJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmZ1ckFsbGVsZXNWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Z1ckFsbGVsZXNWaXNpYmxlUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmVhcnNBbGxlbGVzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdlYXJzQWxsZWxlc1Zpc2libGVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMudGVldGhBbGxlbGVzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd0ZWV0aEFsbGVsZXNWaXNpYmxlUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZnVyQWxsZWxlc1Zpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5lYXJzQWxsZWxlc1Zpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy50ZWV0aEFsbGVsZXNWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5uYXR1cmFsU2VsZWN0aW9uLnJlZ2lzdGVyKCAnUGVkaWdyZWVNb2RlbCcsIFBlZGlncmVlTW9kZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUVwRSxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxZQUFZLE1BQStCLHVDQUF1QztBQUN6RixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFNeEQsZUFBZSxNQUFNQyxhQUFhLFNBQVNGLFlBQVksQ0FBQztFQUV0RDs7RUFLT0csV0FBV0EsQ0FBRUMsZUFBcUMsRUFBRztJQUUxRCxNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBeUQsQ0FBQyxDQUFFO01BRW5GO01BQ0FPLFdBQVcsRUFBRSxLQUFLO01BQUU7TUFDcEJDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNHLHlCQUF5QixHQUFHLElBQUlWLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDM0RXLE1BQU0sRUFBRUosT0FBTyxDQUFDSSxNQUFNLENBQUNDLFlBQVksQ0FBRSwyQkFBNEI7SUFDbkUsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQywwQkFBMEIsR0FBRyxJQUFJYixlQUFlLENBQUUsS0FBSyxFQUFFO01BQzVEVyxNQUFNLEVBQUVKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDQyxZQUFZLENBQUUsNEJBQTZCO0lBQ3BFLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0UsMkJBQTJCLEdBQUcsSUFBSWQsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUM3RFcsTUFBTSxFQUFFSixPQUFPLENBQUNJLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLDZCQUE4QjtJQUNyRSxDQUFFLENBQUM7RUFDTDtFQUVPRyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDTCx5QkFBeUIsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDRiwwQkFBMEIsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7SUFDdkMsSUFBSSxDQUFDRCwyQkFBMkIsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDMUM7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBYixnQkFBZ0IsQ0FBQ2UsUUFBUSxDQUFFLGVBQWUsRUFBRWQsYUFBYyxDQUFDIn0=