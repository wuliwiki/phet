// Copyright 2020-2022, University of Colorado Boulder

/**
 * GenePair is a pair of alleles for a specific Gene, one inherited from each parent.
 * If an individual's alleles are identical, it is homozygous. If its alleles are different, it is heterozygous.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import naturalSelection from '../../naturalSelection.js';
import Allele from './Allele.js';
import Gene from './Gene.js';
export default class GenePair extends PhetioObject {
  // Private because applyState must restore it, but clients should not be able to set it.

  constructor(gene, fatherAllele, motherAllele, providedOptions) {
    const options = optionize()({
      // PhetioObjectOptions
      phetioType: GenePair.GenePairIO
    }, providedOptions);
    super(options);
    this._gene = gene;
    this.fatherAllele = fatherAllele;
    this.motherAllele = motherAllele;
  }
  get gene() {
    return this._gene;
  }

  /**
   * Mutates the gene pair.
   */
  mutate(mutantAllele) {
    // The mutation is randomly applied to either the father or mother allele, but not both. If the mutant allele is
    // recessive, the mutation will not immediately affect appearance. It appears in the phenotype in some later
    // generation, when a homozygous recessive bunny is born.
    if (dotRandom.nextBoolean()) {
      this.fatherAllele = mutantAllele;
    } else {
      this.motherAllele = mutantAllele;
    }
  }

  /**
   * Is this gene pair homozygous (same alleles)?
   */
  isHomozygous() {
    return this.fatherAllele === this.motherAllele;
  }

  /**
   * Is this gene pair heterozygous (different alleles)?
   */
  isHeterozygous() {
    return this.fatherAllele !== this.motherAllele;
  }

  /**
   * Gets the allele that determines the bunny's appearance. This is how genotype manifests as phenotype.
   */
  getVisibleAllele() {
    if (this.isHomozygous()) {
      return this.fatherAllele;
    } else {
      const dominantAllele = this.gene.dominantAlleleProperty.value;
      assert && assert(dominantAllele !== null, 'dominantAllele should not be null');
      return dominantAllele;
    }
  }

  /**
   * Does this gene pair contain a specific allele?
   */
  hasAllele(allele) {
    return this.fatherAllele === allele || this.motherAllele === allele;
  }

  /**
   * Gets the genotype abbreviation for the alleles in this gene pair. If there is no dominant gene (and therefore
   * no dominance relationship), then an abbreviation is meaningless, and the empty string is returned.
   * @param translated - true = translated (default), false = untranslated
   */
  getGenotypeAbbreviation(translated = true) {
    const dominantAbbreviation = translated ? this.gene.dominantAbbreviationTranslatedProperty.value : this.gene.dominantAbbreviationEnglish;
    const recessiveAbbreviation = translated ? this.gene.recessiveAbbreviationTranslatedProperty.value : this.gene.recessiveAbbreviationEnglish;
    let s = '';
    const dominantAllele = this.gene.dominantAlleleProperty.value;
    if (dominantAllele) {
      s = this.fatherAllele === dominantAllele ? dominantAbbreviation : recessiveAbbreviation;
      s += this.motherAllele === dominantAllele ? dominantAbbreviation : recessiveAbbreviation;
    }
    return s;
  }

  //--------------------------------------------------------------------------------------------------------------------
  // Below here are methods used by GenePairIO to serialize PhET-iO state.
  //--------------------------------------------------------------------------------------------------------------------

  /**
   * Serializes a GenePair instance.
   * Because this._gene is private, it does not match the gene field name in stateSchema, and we cannot use
   * the default implementation of toStateObject.
   */
  toStateObject() {
    return {
      gene: Gene.GeneIO.toStateObject(this._gene),
      fatherAllele: Allele.AlleleIO.toStateObject(this.fatherAllele),
      motherAllele: Allele.AlleleIO.toStateObject(this.motherAllele)
    };
  }

  /**
   * Restores GenePair state after instantiation.
   */
  applyState(stateObject) {
    this._gene = Gene.GeneIO.fromStateObject(stateObject.gene);
    this.fatherAllele = Allele.AlleleIO.fromStateObject(stateObject.fatherAllele);
    this.motherAllele = Allele.AlleleIO.fromStateObject(stateObject.motherAllele);
  }

  /**
   * GenePairIO handles PhET-iO serialization of GenePair.
   * It implements 'Dynamic element serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static GenePairIO = new IOType('GenePairIO', {
    valueType: GenePair,
    stateSchema: {
      gene: Gene.GeneIO,
      fatherAllele: Allele.AlleleIO,
      motherAllele: Allele.AlleleIO
    },
    toStateObject: genePair => genePair.toStateObject(),
    applyState: (genePair, stateObject) => genePair.applyState(stateObject)
  });
}
naturalSelection.register('GenePair', GenePair);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,