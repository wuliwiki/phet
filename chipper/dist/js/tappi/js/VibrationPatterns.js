// Copyright 2019-2022, University of Colorado Boulder

/**
 * Collection of reusable patterns that may be useful with vibrationManager. For example, try
 * vibrationManager.startVibrate( VibrationPatterns.FLUTTER )
 *
 * @author Jesse Greenberg
 */

import tappi from './tappi.js';
import stepTimer from '../../axon/js/stepTimer.js';
const VibrationPatterns = {
  // frequency patterns
  HZ_2_5: [200, 200],
  HZ_5: [100, 100],
  HZ_10: [50, 50],
  HZ_25: [25, 25],
  // default vibration, no pattern
  MOTOR_CALL: null,
  // these patterns are faster than 60 fps and will not appear or work well
  // NOTE: @jessegreenberg added these and they are porbably not right...
  HZ_50: [10, 10],
  // HZ_100: [ 5, 5 ],
  HZ_200: [5, 5],
  // effects pattens
  QUICK_BALL_ROLL: [70, 100],
  SLOW_BALL_ROLL: [700, 300],
  FLUTTER: [10, 10, 10, 10, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 50, 10, 50, 10, 50, 10, 50, 10, 50, 10, 70, 10, 70, 10, 70, 10],
  SLOW_DOWN: [70, 300, 70, 400, 100, 500, 200, 500],
  HEARTBEAT: [100, 100, 150, 1000],
  QUICK_HEARTBEAT: [50, 50, 100, 700],
  /**
   * Request three rapid transient vibrations to indicate a successful UI interaction.
   */
  interactionSuccess: vibrationManager => {
    const resetVibrationInterval = 150; // ms
    vibrationManager.vibrateTransient();
    stepTimer.setTimeout(() => {
      vibrationManager.vibrateTransient();
      stepTimer.setTimeout(() => {
        vibrationManager.vibrateTransient();
      }, resetVibrationInterval);
    }, resetVibrationInterval);
  }
};
tappi.register('VibrationPatterns', VibrationPatterns);
export default VibrationPatterns;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YXBwaSIsInN0ZXBUaW1lciIsIlZpYnJhdGlvblBhdHRlcm5zIiwiSFpfMl81IiwiSFpfNSIsIkhaXzEwIiwiSFpfMjUiLCJNT1RPUl9DQUxMIiwiSFpfNTAiLCJIWl8yMDAiLCJRVUlDS19CQUxMX1JPTEwiLCJTTE9XX0JBTExfUk9MTCIsIkZMVVRURVIiLCJTTE9XX0RPV04iLCJIRUFSVEJFQVQiLCJRVUlDS19IRUFSVEJFQVQiLCJpbnRlcmFjdGlvblN1Y2Nlc3MiLCJ2aWJyYXRpb25NYW5hZ2VyIiwicmVzZXRWaWJyYXRpb25JbnRlcnZhbCIsInZpYnJhdGVUcmFuc2llbnQiLCJzZXRUaW1lb3V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJWaWJyYXRpb25QYXR0ZXJucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb2xsZWN0aW9uIG9mIHJldXNhYmxlIHBhdHRlcm5zIHRoYXQgbWF5IGJlIHVzZWZ1bCB3aXRoIHZpYnJhdGlvbk1hbmFnZXIuIEZvciBleGFtcGxlLCB0cnlcclxuICogdmlicmF0aW9uTWFuYWdlci5zdGFydFZpYnJhdGUoIFZpYnJhdGlvblBhdHRlcm5zLkZMVVRURVIgKVxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCB0YXBwaSBmcm9tICcuL3RhcHBpLmpzJztcclxuaW1wb3J0IHN0ZXBUaW1lciBmcm9tICcuLi8uLi9heG9uL2pzL3N0ZXBUaW1lci5qcyc7XHJcbmltcG9ydCBWaWJyYXRpb25NYW5hZ2VyaU9TIGZyb20gJy4vVmlicmF0aW9uTWFuYWdlcmlPUy5qcyc7XHJcblxyXG5jb25zdCBWaWJyYXRpb25QYXR0ZXJucyA9IHtcclxuXHJcbiAgLy8gZnJlcXVlbmN5IHBhdHRlcm5zXHJcbiAgSFpfMl81OiBbIDIwMCwgMjAwIF0sXHJcbiAgSFpfNTogWyAxMDAsIDEwMCBdLFxyXG4gIEhaXzEwOiBbIDUwLCA1MCBdLFxyXG4gIEhaXzI1OiBbIDI1LCAyNSBdLFxyXG5cclxuICAvLyBkZWZhdWx0IHZpYnJhdGlvbiwgbm8gcGF0dGVyblxyXG4gIE1PVE9SX0NBTEw6IG51bGwsXHJcblxyXG4gIC8vIHRoZXNlIHBhdHRlcm5zIGFyZSBmYXN0ZXIgdGhhbiA2MCBmcHMgYW5kIHdpbGwgbm90IGFwcGVhciBvciB3b3JrIHdlbGxcclxuICAvLyBOT1RFOiBAamVzc2VncmVlbmJlcmcgYWRkZWQgdGhlc2UgYW5kIHRoZXkgYXJlIHBvcmJhYmx5IG5vdCByaWdodC4uLlxyXG4gIEhaXzUwOiBbIDEwLCAxMCBdLFxyXG4gIC8vIEhaXzEwMDogWyA1LCA1IF0sXHJcbiAgSFpfMjAwOiBbIDUsIDUgXSxcclxuXHJcblxyXG4gIC8vIGVmZmVjdHMgcGF0dGVuc1xyXG4gIFFVSUNLX0JBTExfUk9MTDogWyA3MCwgMTAwIF0sXHJcbiAgU0xPV19CQUxMX1JPTEw6IFsgNzAwLCAzMDAgXSxcclxuICBGTFVUVEVSOiBbIDEwLCAxMCwgMTAsIDEwLCAxMCwgMjAsIDEwLCAyMCwgMTAsIDIwLCAxMCwgMjAsIDEwLCAyMCwgMTAsIDUwLCAxMCwgNTAsIDEwLCA1MCwgMTAsIDUwLCAxMCwgNTAsIDEwLCA3MCwgMTAsIDcwLCAxMCwgNzAsIDEwIF0sXHJcbiAgU0xPV19ET1dOOiBbIDcwLCAzMDAsIDcwLCA0MDAsIDEwMCwgNTAwLCAyMDAsIDUwMCBdLFxyXG4gIEhFQVJUQkVBVDogWyAxMDAsIDEwMCwgMTUwLCAxMDAwIF0sXHJcbiAgUVVJQ0tfSEVBUlRCRUFUOiBbIDUwLCA1MCwgMTAwLCA3MDAgXSxcclxuXHJcbiAgLyoqXHJcbiAgICogUmVxdWVzdCB0aHJlZSByYXBpZCB0cmFuc2llbnQgdmlicmF0aW9ucyB0byBpbmRpY2F0ZSBhIHN1Y2Nlc3NmdWwgVUkgaW50ZXJhY3Rpb24uXHJcbiAgICovXHJcbiAgaW50ZXJhY3Rpb25TdWNjZXNzOiAoIHZpYnJhdGlvbk1hbmFnZXI6IFZpYnJhdGlvbk1hbmFnZXJpT1MgKTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCByZXNldFZpYnJhdGlvbkludGVydmFsID0gMTUwOyAvLyBtc1xyXG4gICAgdmlicmF0aW9uTWFuYWdlci52aWJyYXRlVHJhbnNpZW50KCk7XHJcbiAgICBzdGVwVGltZXIuc2V0VGltZW91dCggKCkgPT4ge1xyXG4gICAgICB2aWJyYXRpb25NYW5hZ2VyLnZpYnJhdGVUcmFuc2llbnQoKTtcclxuXHJcbiAgICAgIHN0ZXBUaW1lci5zZXRUaW1lb3V0KCAoKSA9PiB7XHJcbiAgICAgICAgdmlicmF0aW9uTWFuYWdlci52aWJyYXRlVHJhbnNpZW50KCk7XHJcbiAgICAgIH0sIHJlc2V0VmlicmF0aW9uSW50ZXJ2YWwgKTtcclxuICAgIH0sIHJlc2V0VmlicmF0aW9uSW50ZXJ2YWwgKTtcclxuICB9XHJcbn07XHJcblxyXG50YXBwaS5yZWdpc3RlciggJ1ZpYnJhdGlvblBhdHRlcm5zJywgVmlicmF0aW9uUGF0dGVybnMgKTtcclxuZXhwb3J0IGRlZmF1bHQgVmlicmF0aW9uUGF0dGVybnM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsU0FBUyxNQUFNLDRCQUE0QjtBQUdsRCxNQUFNQyxpQkFBaUIsR0FBRztFQUV4QjtFQUNBQyxNQUFNLEVBQUUsQ0FBRSxHQUFHLEVBQUUsR0FBRyxDQUFFO0VBQ3BCQyxJQUFJLEVBQUUsQ0FBRSxHQUFHLEVBQUUsR0FBRyxDQUFFO0VBQ2xCQyxLQUFLLEVBQUUsQ0FBRSxFQUFFLEVBQUUsRUFBRSxDQUFFO0VBQ2pCQyxLQUFLLEVBQUUsQ0FBRSxFQUFFLEVBQUUsRUFBRSxDQUFFO0VBRWpCO0VBQ0FDLFVBQVUsRUFBRSxJQUFJO0VBRWhCO0VBQ0E7RUFDQUMsS0FBSyxFQUFFLENBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBRTtFQUNqQjtFQUNBQyxNQUFNLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFO0VBR2hCO0VBQ0FDLGVBQWUsRUFBRSxDQUFFLEVBQUUsRUFBRSxHQUFHLENBQUU7RUFDNUJDLGNBQWMsRUFBRSxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUU7RUFDNUJDLE9BQU8sRUFBRSxDQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBRTtFQUN2SUMsU0FBUyxFQUFFLENBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRTtFQUNuREMsU0FBUyxFQUFFLENBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFFO0VBQ2xDQyxlQUFlLEVBQUUsQ0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUU7RUFFckM7QUFDRjtBQUNBO0VBQ0VDLGtCQUFrQixFQUFJQyxnQkFBcUMsSUFBWTtJQUNyRSxNQUFNQyxzQkFBc0IsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNwQ0QsZ0JBQWdCLENBQUNFLGdCQUFnQixDQUFDLENBQUM7SUFDbkNsQixTQUFTLENBQUNtQixVQUFVLENBQUUsTUFBTTtNQUMxQkgsZ0JBQWdCLENBQUNFLGdCQUFnQixDQUFDLENBQUM7TUFFbkNsQixTQUFTLENBQUNtQixVQUFVLENBQUUsTUFBTTtRQUMxQkgsZ0JBQWdCLENBQUNFLGdCQUFnQixDQUFDLENBQUM7TUFDckMsQ0FBQyxFQUFFRCxzQkFBdUIsQ0FBQztJQUM3QixDQUFDLEVBQUVBLHNCQUF1QixDQUFDO0VBQzdCO0FBQ0YsQ0FBQztBQUVEbEIsS0FBSyxDQUFDcUIsUUFBUSxDQUFFLG1CQUFtQixFQUFFbkIsaUJBQWtCLENBQUM7QUFDeEQsZUFBZUEsaUJBQWlCIn0=