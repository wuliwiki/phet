// Copyright 2013-2022, University of Colorado Boulder

/**
 * C2H6 Molecule
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../phet-core/js/merge.js';
import Element from '../Element.js';
import nitroglycerin from '../nitroglycerin.js';
import AtomNode from './AtomNode.js';
import MoleculeNode from './MoleculeNode.js';
export default class C2H6Node extends MoleculeNode {
  constructor(providedOptions) {
    const atomNodeOptions = providedOptions?.atomNodeOptions;

    // atoms
    const leftNode = new AtomNode(Element.C, atomNodeOptions);
    const rightNode = new AtomNode(Element.C, merge({
      centerX: leftNode.right + 0.25 * leftNode.width,
      centerY: leftNode.centerY
    }, atomNodeOptions));
    const smallTopLeftNode = new AtomNode(Element.H, merge({
      centerX: leftNode.centerX,
      centerY: leftNode.top
    }, atomNodeOptions));
    const smallBottomLeftNode = new AtomNode(Element.H, merge({
      centerX: smallTopLeftNode.centerX,
      centerY: leftNode.bottom
    }, atomNodeOptions));
    const smallLeftNode = new AtomNode(Element.H, merge({
      centerX: leftNode.left,
      centerY: leftNode.centerY
    }, atomNodeOptions));
    const smallTopRightNode = new AtomNode(Element.H, merge({
      centerX: rightNode.centerX,
      centerY: rightNode.top
    }, atomNodeOptions));
    const smallBottomRightNode = new AtomNode(Element.H, merge({
      centerX: rightNode.centerX,
      centerY: rightNode.bottom
    }, atomNodeOptions));
    const smallRightNode = new AtomNode(Element.H, merge({
      centerX: rightNode.right,
      centerY: rightNode.centerY
    }, atomNodeOptions));
    const atomNodes = [smallBottomRightNode, smallTopRightNode, rightNode, smallRightNode, smallLeftNode, leftNode, smallBottomLeftNode, smallTopLeftNode];
    super(atomNodes, providedOptions);
  }
}
nitroglycerin.register('C2H6Node', C2H6Node);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkVsZW1lbnQiLCJuaXRyb2dseWNlcmluIiwiQXRvbU5vZGUiLCJNb2xlY3VsZU5vZGUiLCJDMkg2Tm9kZSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwiYXRvbU5vZGVPcHRpb25zIiwibGVmdE5vZGUiLCJDIiwicmlnaHROb2RlIiwiY2VudGVyWCIsInJpZ2h0Iiwid2lkdGgiLCJjZW50ZXJZIiwic21hbGxUb3BMZWZ0Tm9kZSIsIkgiLCJ0b3AiLCJzbWFsbEJvdHRvbUxlZnROb2RlIiwiYm90dG9tIiwic21hbGxMZWZ0Tm9kZSIsImxlZnQiLCJzbWFsbFRvcFJpZ2h0Tm9kZSIsInNtYWxsQm90dG9tUmlnaHROb2RlIiwic21hbGxSaWdodE5vZGUiLCJhdG9tTm9kZXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkMySDZOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEMySDYgTW9sZWN1bGVcclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgRWxlbWVudCBmcm9tICcuLi9FbGVtZW50LmpzJztcclxuaW1wb3J0IG5pdHJvZ2x5Y2VyaW4gZnJvbSAnLi4vbml0cm9nbHljZXJpbi5qcyc7XHJcbmltcG9ydCBBdG9tTm9kZSBmcm9tICcuL0F0b21Ob2RlLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlTm9kZSwgeyBNb2xlY3VsZU5vZGVPcHRpb25zIH0gZnJvbSAnLi9Nb2xlY3VsZU5vZGUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbmV4cG9ydCB0eXBlIEMySDZOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTW9sZWN1bGVOb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEMySDZOb2RlIGV4dGVuZHMgTW9sZWN1bGVOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBDMkg2Tm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgYXRvbU5vZGVPcHRpb25zID0gcHJvdmlkZWRPcHRpb25zPy5hdG9tTm9kZU9wdGlvbnM7XHJcblxyXG4gICAgLy8gYXRvbXNcclxuICAgIGNvbnN0IGxlZnROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkMsIGF0b21Ob2RlT3B0aW9ucyApO1xyXG4gICAgY29uc3QgcmlnaHROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkMsIG1lcmdlKCB7XHJcbiAgICAgIGNlbnRlclg6IGxlZnROb2RlLnJpZ2h0ICsgKCAwLjI1ICogbGVmdE5vZGUud2lkdGggKSxcclxuICAgICAgY2VudGVyWTogbGVmdE5vZGUuY2VudGVyWVxyXG4gICAgfSwgYXRvbU5vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IHNtYWxsVG9wTGVmdE5vZGUgPSBuZXcgQXRvbU5vZGUoIEVsZW1lbnQuSCwgbWVyZ2UoIHtcclxuICAgICAgY2VudGVyWDogbGVmdE5vZGUuY2VudGVyWCxcclxuICAgICAgY2VudGVyWTogbGVmdE5vZGUudG9wXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG4gICAgY29uc3Qgc21hbGxCb3R0b21MZWZ0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5ILCBtZXJnZSgge1xyXG4gICAgICBjZW50ZXJYOiBzbWFsbFRvcExlZnROb2RlLmNlbnRlclgsXHJcbiAgICAgIGNlbnRlclk6IGxlZnROb2RlLmJvdHRvbVxyXG4gICAgfSwgYXRvbU5vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IHNtYWxsTGVmdE5vZGUgPSBuZXcgQXRvbU5vZGUoIEVsZW1lbnQuSCwgbWVyZ2UoIHtcclxuICAgICAgY2VudGVyWDogbGVmdE5vZGUubGVmdCxcclxuICAgICAgY2VudGVyWTogbGVmdE5vZGUuY2VudGVyWVxyXG4gICAgfSwgYXRvbU5vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IHNtYWxsVG9wUmlnaHROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkgsIG1lcmdlKCB7XHJcbiAgICAgIGNlbnRlclg6IHJpZ2h0Tm9kZS5jZW50ZXJYLFxyXG4gICAgICBjZW50ZXJZOiByaWdodE5vZGUudG9wXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG4gICAgY29uc3Qgc21hbGxCb3R0b21SaWdodE5vZGUgPSBuZXcgQXRvbU5vZGUoIEVsZW1lbnQuSCwgbWVyZ2UoIHtcclxuICAgICAgY2VudGVyWDogcmlnaHROb2RlLmNlbnRlclgsXHJcbiAgICAgIGNlbnRlclk6IHJpZ2h0Tm9kZS5ib3R0b21cclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCBzbWFsbFJpZ2h0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5ILCBtZXJnZSgge1xyXG4gICAgICBjZW50ZXJYOiByaWdodE5vZGUucmlnaHQsXHJcbiAgICAgIGNlbnRlclk6IHJpZ2h0Tm9kZS5jZW50ZXJZXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG5cclxuICAgIGNvbnN0IGF0b21Ob2RlcyA9IFtcclxuICAgICAgc21hbGxCb3R0b21SaWdodE5vZGUsIHNtYWxsVG9wUmlnaHROb2RlLCByaWdodE5vZGUsIHNtYWxsUmlnaHROb2RlLFxyXG4gICAgICBzbWFsbExlZnROb2RlLCBsZWZ0Tm9kZSwgc21hbGxCb3R0b21MZWZ0Tm9kZSwgc21hbGxUb3BMZWZ0Tm9kZVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggYXRvbU5vZGVzLCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbm5pdHJvZ2x5Y2VyaW4ucmVnaXN0ZXIoICdDMkg2Tm9kZScsIEMySDZOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxnQ0FBZ0M7QUFFbEQsT0FBT0MsT0FBTyxNQUFNLGVBQWU7QUFDbkMsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxRQUFRLE1BQU0sZUFBZTtBQUNwQyxPQUFPQyxZQUFZLE1BQStCLG1CQUFtQjtBQUtyRSxlQUFlLE1BQU1DLFFBQVEsU0FBU0QsWUFBWSxDQUFDO0VBRTFDRSxXQUFXQSxDQUFFQyxlQUFpQyxFQUFHO0lBRXRELE1BQU1DLGVBQWUsR0FBR0QsZUFBZSxFQUFFQyxlQUFlOztJQUV4RDtJQUNBLE1BQU1DLFFBQVEsR0FBRyxJQUFJTixRQUFRLENBQUVGLE9BQU8sQ0FBQ1MsQ0FBQyxFQUFFRixlQUFnQixDQUFDO0lBQzNELE1BQU1HLFNBQVMsR0FBRyxJQUFJUixRQUFRLENBQUVGLE9BQU8sQ0FBQ1MsQ0FBQyxFQUFFVixLQUFLLENBQUU7TUFDaERZLE9BQU8sRUFBRUgsUUFBUSxDQUFDSSxLQUFLLEdBQUssSUFBSSxHQUFHSixRQUFRLENBQUNLLEtBQU87TUFDbkRDLE9BQU8sRUFBRU4sUUFBUSxDQUFDTTtJQUNwQixDQUFDLEVBQUVQLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNUSxnQkFBZ0IsR0FBRyxJQUFJYixRQUFRLENBQUVGLE9BQU8sQ0FBQ2dCLENBQUMsRUFBRWpCLEtBQUssQ0FBRTtNQUN2RFksT0FBTyxFQUFFSCxRQUFRLENBQUNHLE9BQU87TUFDekJHLE9BQU8sRUFBRU4sUUFBUSxDQUFDUztJQUNwQixDQUFDLEVBQUVWLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNVyxtQkFBbUIsR0FBRyxJQUFJaEIsUUFBUSxDQUFFRixPQUFPLENBQUNnQixDQUFDLEVBQUVqQixLQUFLLENBQUU7TUFDMURZLE9BQU8sRUFBRUksZ0JBQWdCLENBQUNKLE9BQU87TUFDakNHLE9BQU8sRUFBRU4sUUFBUSxDQUFDVztJQUNwQixDQUFDLEVBQUVaLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNYSxhQUFhLEdBQUcsSUFBSWxCLFFBQVEsQ0FBRUYsT0FBTyxDQUFDZ0IsQ0FBQyxFQUFFakIsS0FBSyxDQUFFO01BQ3BEWSxPQUFPLEVBQUVILFFBQVEsQ0FBQ2EsSUFBSTtNQUN0QlAsT0FBTyxFQUFFTixRQUFRLENBQUNNO0lBQ3BCLENBQUMsRUFBRVAsZUFBZ0IsQ0FBRSxDQUFDO0lBQ3RCLE1BQU1lLGlCQUFpQixHQUFHLElBQUlwQixRQUFRLENBQUVGLE9BQU8sQ0FBQ2dCLENBQUMsRUFBRWpCLEtBQUssQ0FBRTtNQUN4RFksT0FBTyxFQUFFRCxTQUFTLENBQUNDLE9BQU87TUFDMUJHLE9BQU8sRUFBRUosU0FBUyxDQUFDTztJQUNyQixDQUFDLEVBQUVWLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNZ0Isb0JBQW9CLEdBQUcsSUFBSXJCLFFBQVEsQ0FBRUYsT0FBTyxDQUFDZ0IsQ0FBQyxFQUFFakIsS0FBSyxDQUFFO01BQzNEWSxPQUFPLEVBQUVELFNBQVMsQ0FBQ0MsT0FBTztNQUMxQkcsT0FBTyxFQUFFSixTQUFTLENBQUNTO0lBQ3JCLENBQUMsRUFBRVosZUFBZ0IsQ0FBRSxDQUFDO0lBQ3RCLE1BQU1pQixjQUFjLEdBQUcsSUFBSXRCLFFBQVEsQ0FBRUYsT0FBTyxDQUFDZ0IsQ0FBQyxFQUFFakIsS0FBSyxDQUFFO01BQ3JEWSxPQUFPLEVBQUVELFNBQVMsQ0FBQ0UsS0FBSztNQUN4QkUsT0FBTyxFQUFFSixTQUFTLENBQUNJO0lBQ3JCLENBQUMsRUFBRVAsZUFBZ0IsQ0FBRSxDQUFDO0lBRXRCLE1BQU1rQixTQUFTLEdBQUcsQ0FDaEJGLG9CQUFvQixFQUFFRCxpQkFBaUIsRUFBRVosU0FBUyxFQUFFYyxjQUFjLEVBQ2xFSixhQUFhLEVBQUVaLFFBQVEsRUFBRVUsbUJBQW1CLEVBQUVILGdCQUFnQixDQUMvRDtJQUVELEtBQUssQ0FBRVUsU0FBUyxFQUFFbkIsZUFBZ0IsQ0FBQztFQUNyQztBQUNGO0FBRUFMLGFBQWEsQ0FBQ3lCLFFBQVEsQ0FBRSxVQUFVLEVBQUV0QixRQUFTLENBQUMifQ==