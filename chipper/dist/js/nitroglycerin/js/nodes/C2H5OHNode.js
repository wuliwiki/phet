// Copyright 2013-2022, University of Colorado Boulder

/**
 * C2H5OH Molecule
 * Structure is similar to C2H6, but with OH replacing one of the H's.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { combineOptions } from '../../../phet-core/js/optionize.js';
import Element from '../Element.js';
import nitroglycerin from '../nitroglycerin.js';
import AtomNode from './AtomNode.js';
import MoleculeNode from './MoleculeNode.js';
export default class C2H5OHNode extends MoleculeNode {
  constructor(providedOptions) {
    const atomNodeOptions = providedOptions?.atomNodeOptions;

    // atoms
    const leftNode = new AtomNode(Element.C, atomNodeOptions);
    const centerNode = new AtomNode(Element.C, combineOptions({
      centerX: leftNode.right + 0.25 * leftNode.width,
      centerY: leftNode.centerY
    }, atomNodeOptions));
    const smallTopLeftNode = new AtomNode(Element.H, combineOptions({
      centerX: leftNode.centerX,
      centerY: leftNode.top
    }, atomNodeOptions));
    const smallBottomLeftNode = new AtomNode(Element.H, combineOptions({
      centerX: smallTopLeftNode.centerX,
      centerY: leftNode.bottom
    }, atomNodeOptions));
    const smallLeftNode = new AtomNode(Element.H, combineOptions({
      centerX: leftNode.left,
      centerY: leftNode.centerY
    }, atomNodeOptions));
    const smallTopRightNode = new AtomNode(Element.H, combineOptions({
      centerX: centerNode.centerX,
      centerY: centerNode.top
    }, atomNodeOptions));
    const smallBottomRightNode = new AtomNode(Element.H, combineOptions({
      centerX: centerNode.centerX,
      centerY: centerNode.bottom
    }, atomNodeOptions));
    const rightNode = new AtomNode(Element.O, combineOptions({
      centerX: centerNode.right,
      centerY: centerNode.centerY
    }, atomNodeOptions));
    const smallRightNode = new AtomNode(Element.H, combineOptions({
      centerX: rightNode.right,
      centerY: rightNode.centerY
    }, atomNodeOptions));
    const atomNodes = [smallBottomRightNode, smallTopRightNode, centerNode, smallRightNode, rightNode, smallLeftNode, leftNode, smallBottomLeftNode, smallTopLeftNode];
    super(atomNodes, providedOptions);
  }
}
nitroglycerin.register('C2H5OHNode', C2H5OHNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21iaW5lT3B0aW9ucyIsIkVsZW1lbnQiLCJuaXRyb2dseWNlcmluIiwiQXRvbU5vZGUiLCJNb2xlY3VsZU5vZGUiLCJDMkg1T0hOb2RlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJhdG9tTm9kZU9wdGlvbnMiLCJsZWZ0Tm9kZSIsIkMiLCJjZW50ZXJOb2RlIiwiY2VudGVyWCIsInJpZ2h0Iiwid2lkdGgiLCJjZW50ZXJZIiwic21hbGxUb3BMZWZ0Tm9kZSIsIkgiLCJ0b3AiLCJzbWFsbEJvdHRvbUxlZnROb2RlIiwiYm90dG9tIiwic21hbGxMZWZ0Tm9kZSIsImxlZnQiLCJzbWFsbFRvcFJpZ2h0Tm9kZSIsInNtYWxsQm90dG9tUmlnaHROb2RlIiwicmlnaHROb2RlIiwiTyIsInNtYWxsUmlnaHROb2RlIiwiYXRvbU5vZGVzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDMkg1T0hOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEMySDVPSCBNb2xlY3VsZVxyXG4gKiBTdHJ1Y3R1cmUgaXMgc2ltaWxhciB0byBDMkg2LCBidXQgd2l0aCBPSCByZXBsYWNpbmcgb25lIG9mIHRoZSBIJ3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgY29tYmluZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi4vRWxlbWVudC5qcyc7XHJcbmltcG9ydCBuaXRyb2dseWNlcmluIGZyb20gJy4uL25pdHJvZ2x5Y2VyaW4uanMnO1xyXG5pbXBvcnQgQXRvbU5vZGUsIHsgQXRvbU5vZGVPcHRpb25zIH0gZnJvbSAnLi9BdG9tTm9kZS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZU5vZGUsIHsgTW9sZWN1bGVOb2RlT3B0aW9ucyB9IGZyb20gJy4vTW9sZWN1bGVOb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBDMkg1T0hOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTW9sZWN1bGVOb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEMySDVPSE5vZGUgZXh0ZW5kcyBNb2xlY3VsZU5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IEMySDVPSE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IGF0b21Ob2RlT3B0aW9ucyA9IHByb3ZpZGVkT3B0aW9ucz8uYXRvbU5vZGVPcHRpb25zO1xyXG5cclxuICAgIC8vIGF0b21zXHJcbiAgICBjb25zdCBsZWZ0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5DLCBhdG9tTm9kZU9wdGlvbnMgKTtcclxuICAgIGNvbnN0IGNlbnRlck5vZGUgPSBuZXcgQXRvbU5vZGUoIEVsZW1lbnQuQywgY29tYmluZU9wdGlvbnM8QXRvbU5vZGVPcHRpb25zPigge1xyXG4gICAgICBjZW50ZXJYOiBsZWZ0Tm9kZS5yaWdodCArICggMC4yNSAqIGxlZnROb2RlLndpZHRoICksXHJcbiAgICAgIGNlbnRlclk6IGxlZnROb2RlLmNlbnRlcllcclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCBzbWFsbFRvcExlZnROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkgsIGNvbWJpbmVPcHRpb25zPEF0b21Ob2RlT3B0aW9ucz4oIHtcclxuICAgICAgY2VudGVyWDogbGVmdE5vZGUuY2VudGVyWCxcclxuICAgICAgY2VudGVyWTogbGVmdE5vZGUudG9wXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG4gICAgY29uc3Qgc21hbGxCb3R0b21MZWZ0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5ILCBjb21iaW5lT3B0aW9uczxBdG9tTm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IHNtYWxsVG9wTGVmdE5vZGUuY2VudGVyWCxcclxuICAgICAgY2VudGVyWTogbGVmdE5vZGUuYm90dG9tXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG4gICAgY29uc3Qgc21hbGxMZWZ0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5ILCBjb21iaW5lT3B0aW9uczxBdG9tTm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IGxlZnROb2RlLmxlZnQsXHJcbiAgICAgIGNlbnRlclk6IGxlZnROb2RlLmNlbnRlcllcclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCBzbWFsbFRvcFJpZ2h0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5ILCBjb21iaW5lT3B0aW9uczxBdG9tTm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IGNlbnRlck5vZGUuY2VudGVyWCxcclxuICAgICAgY2VudGVyWTogY2VudGVyTm9kZS50b3BcclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCBzbWFsbEJvdHRvbVJpZ2h0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5ILCBjb21iaW5lT3B0aW9uczxBdG9tTm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IGNlbnRlck5vZGUuY2VudGVyWCxcclxuICAgICAgY2VudGVyWTogY2VudGVyTm9kZS5ib3R0b21cclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCByaWdodE5vZGUgPSBuZXcgQXRvbU5vZGUoIEVsZW1lbnQuTywgY29tYmluZU9wdGlvbnM8QXRvbU5vZGVPcHRpb25zPigge1xyXG4gICAgICBjZW50ZXJYOiBjZW50ZXJOb2RlLnJpZ2h0LFxyXG4gICAgICBjZW50ZXJZOiBjZW50ZXJOb2RlLmNlbnRlcllcclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCBzbWFsbFJpZ2h0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5ILCBjb21iaW5lT3B0aW9uczxBdG9tTm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IHJpZ2h0Tm9kZS5yaWdodCxcclxuICAgICAgY2VudGVyWTogcmlnaHROb2RlLmNlbnRlcllcclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcblxyXG4gICAgY29uc3QgYXRvbU5vZGVzID0gW1xyXG4gICAgICBzbWFsbEJvdHRvbVJpZ2h0Tm9kZSwgc21hbGxUb3BSaWdodE5vZGUsIGNlbnRlck5vZGUsIHNtYWxsUmlnaHROb2RlLCByaWdodE5vZGUsXHJcbiAgICAgIHNtYWxsTGVmdE5vZGUsIGxlZnROb2RlLCBzbWFsbEJvdHRvbUxlZnROb2RlLCBzbWFsbFRvcExlZnROb2RlXHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCBhdG9tTm9kZXMsIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubml0cm9nbHljZXJpbi5yZWdpc3RlciggJ0MySDVPSE5vZGUnLCBDMkg1T0hOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsY0FBYyxRQUEwQixvQ0FBb0M7QUFDckYsT0FBT0MsT0FBTyxNQUFNLGVBQWU7QUFDbkMsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxRQUFRLE1BQTJCLGVBQWU7QUFDekQsT0FBT0MsWUFBWSxNQUErQixtQkFBbUI7QUFLckUsZUFBZSxNQUFNQyxVQUFVLFNBQVNELFlBQVksQ0FBQztFQUU1Q0UsV0FBV0EsQ0FBRUMsZUFBbUMsRUFBRztJQUV4RCxNQUFNQyxlQUFlLEdBQUdELGVBQWUsRUFBRUMsZUFBZTs7SUFFeEQ7SUFDQSxN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