// Copyright 2013-2022, University of Colorado Boulder

/**
 * Base class for molecules with N atoms aligned on the horizontal axis, for N > 0.
 * Note that here is technically no such thing as a single-atom molecule,
 * but allowing N=1 simplifies the Equation model.
 *
 * Origin is at geometric center of the node's bounding rectangle.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import optionize from '../../../phet-core/js/optionize.js';
import nitroglycerin from '../nitroglycerin.js';
import AtomNode from './AtomNode.js';
import MoleculeNode from './MoleculeNode.js';
export default class HorizontalMoleculeNode extends MoleculeNode {
  constructor(elements, providedOptions) {
    const options = optionize()({
      direction: 'leftToRight',
      overlapPercent: 0.25
    }, providedOptions);

    // Add atoms from left to right, overlapping consistently.
    const atomNodes = [];
    let previousNode = null;
    elements.forEach(element => {
      const currentNode = new AtomNode(element, options.atomNodeOptions);
      atomNodes.push(currentNode);
      if (previousNode !== null) {
        const overlap = options.overlapPercent * currentNode.width;
        if (options.direction === 'leftToRight') {
          currentNode.left = previousNode.right - overlap;
        } else {
          currentNode.right = previousNode.left + overlap;
        }
      }
      previousNode = currentNode;
    });
    super(atomNodes, options);
  }
}
nitroglycerin.register('HorizontalMoleculeNode', HorizontalMoleculeNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJuaXRyb2dseWNlcmluIiwiQXRvbU5vZGUiLCJNb2xlY3VsZU5vZGUiLCJIb3Jpem9udGFsTW9sZWN1bGVOb2RlIiwiY29uc3RydWN0b3IiLCJlbGVtZW50cyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJkaXJlY3Rpb24iLCJvdmVybGFwUGVyY2VudCIsImF0b21Ob2RlcyIsInByZXZpb3VzTm9kZSIsImZvckVhY2giLCJlbGVtZW50IiwiY3VycmVudE5vZGUiLCJhdG9tTm9kZU9wdGlvbnMiLCJwdXNoIiwib3ZlcmxhcCIsIndpZHRoIiwibGVmdCIsInJpZ2h0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJIb3Jpem9udGFsTW9sZWN1bGVOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIG1vbGVjdWxlcyB3aXRoIE4gYXRvbXMgYWxpZ25lZCBvbiB0aGUgaG9yaXpvbnRhbCBheGlzLCBmb3IgTiA+IDAuXHJcbiAqIE5vdGUgdGhhdCBoZXJlIGlzIHRlY2huaWNhbGx5IG5vIHN1Y2ggdGhpbmcgYXMgYSBzaW5nbGUtYXRvbSBtb2xlY3VsZSxcclxuICogYnV0IGFsbG93aW5nIE49MSBzaW1wbGlmaWVzIHRoZSBFcXVhdGlvbiBtb2RlbC5cclxuICpcclxuICogT3JpZ2luIGlzIGF0IGdlb21ldHJpYyBjZW50ZXIgb2YgdGhlIG5vZGUncyBib3VuZGluZyByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG5pdHJvZ2x5Y2VyaW4gZnJvbSAnLi4vbml0cm9nbHljZXJpbi5qcyc7XHJcbmltcG9ydCBBdG9tTm9kZSBmcm9tICcuL0F0b21Ob2RlLmpzJztcclxuaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi4vRWxlbWVudC5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZU5vZGUsIHsgTW9sZWN1bGVOb2RlT3B0aW9ucyB9IGZyb20gJy4vTW9sZWN1bGVOb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIGRpcmVjdGlvbiBvZiBvdmVybGFwLCBsZWZ0VG9SaWdodCBvciByaWdodFRvTGVmdFxyXG4gIGRpcmVjdGlvbj86ICdsZWZ0VG9SaWdodCcgfCAncmlnaHRUb0xlZnQnO1xyXG5cclxuICAvLyBhbW91bnQgb2Ygb3ZlcmxhcCBiZXR3ZWVuIGF0b21zXHJcbiAgb3ZlcmxhcFBlcmNlbnQ/OiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBIb3Jpem9udGFsTW9sZWN1bGVOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTW9sZWN1bGVOb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvcml6b250YWxNb2xlY3VsZU5vZGUgZXh0ZW5kcyBNb2xlY3VsZU5vZGUge1xyXG5cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoIGVsZW1lbnRzOiBFbGVtZW50W10sIHByb3ZpZGVkT3B0aW9ucz86IEhvcml6b250YWxNb2xlY3VsZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8SG9yaXpvbnRhbE1vbGVjdWxlTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBNb2xlY3VsZU5vZGVPcHRpb25zPigpKCB7XHJcbiAgICAgIGRpcmVjdGlvbjogJ2xlZnRUb1JpZ2h0JyxcclxuICAgICAgb3ZlcmxhcFBlcmNlbnQ6IDAuMjVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEFkZCBhdG9tcyBmcm9tIGxlZnQgdG8gcmlnaHQsIG92ZXJsYXBwaW5nIGNvbnNpc3RlbnRseS5cclxuICAgIGNvbnN0IGF0b21Ob2RlczogQXRvbU5vZGVbXSA9IFtdO1xyXG4gICAgbGV0IHByZXZpb3VzTm9kZTogTm9kZSB8IG51bGwgPSBudWxsO1xyXG4gICAgZWxlbWVudHMuZm9yRWFjaCggZWxlbWVudCA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gbmV3IEF0b21Ob2RlKCBlbGVtZW50LCBvcHRpb25zLmF0b21Ob2RlT3B0aW9ucyApO1xyXG4gICAgICBhdG9tTm9kZXMucHVzaCggY3VycmVudE5vZGUgKTtcclxuICAgICAgaWYgKCBwcmV2aW91c05vZGUgIT09IG51bGwgKSB7XHJcbiAgICAgICAgY29uc3Qgb3ZlcmxhcCA9ICggb3B0aW9ucy5vdmVybGFwUGVyY2VudCAqIGN1cnJlbnROb2RlLndpZHRoICk7XHJcbiAgICAgICAgaWYgKCBvcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnRUb1JpZ2h0JyApIHtcclxuICAgICAgICAgIGN1cnJlbnROb2RlLmxlZnQgPSBwcmV2aW91c05vZGUucmlnaHQgLSBvdmVybGFwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGN1cnJlbnROb2RlLnJpZ2h0ID0gcHJldmlvdXNOb2RlLmxlZnQgKyBvdmVybGFwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBwcmV2aW91c05vZGUgPSBjdXJyZW50Tm9kZTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggYXRvbU5vZGVzLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5uaXRyb2dseWNlcmluLnJlZ2lzdGVyKCAnSG9yaXpvbnRhbE1vbGVjdWxlTm9kZScsIEhvcml6b250YWxNb2xlY3VsZU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxvQ0FBb0M7QUFFMUQsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxRQUFRLE1BQU0sZUFBZTtBQUVwQyxPQUFPQyxZQUFZLE1BQStCLG1CQUFtQjtBQWFyRSxlQUFlLE1BQU1DLHNCQUFzQixTQUFTRCxZQUFZLENBQUM7RUFFckRFLFdBQVdBLENBQUVDLFFBQW1CLEVBQUVDLGVBQStDLEVBQUc7SUFFNUYsTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQWtFLENBQUMsQ0FBRTtNQUM1RlMsU0FBUyxFQUFFLGFBQWE7TUFDeEJDLGNBQWMsRUFBRTtJQUNsQixDQUFDLEVBQUVILGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUksU0FBcUIsR0FBRyxFQUFFO0lBQ2hDLElBQUlDLFlBQXlCLEdBQUcsSUFBSTtJQUNwQ04sUUFBUSxDQUFDTyxPQUFPLENBQUVDLE9BQU8sSUFBSTtNQUMzQixNQUFNQyxXQUFXLEdBQUcsSUFBSWIsUUFBUSxDQUFFWSxPQUFPLEVBQUVOLE9BQU8sQ0FBQ1EsZUFBZ0IsQ0FBQztNQUNwRUwsU0FBUyxDQUFDTSxJQUFJLENBQUVGLFdBQVksQ0FBQztNQUM3QixJQUFLSCxZQUFZLEtBQUssSUFBSSxFQUFHO1FBQzNCLE1BQU1NLE9BQU8sR0FBS1YsT0FBTyxDQUFDRSxjQUFjLEdBQUdLLFdBQVcsQ0FBQ0ksS0FBTztRQUM5RCxJQUFLWCxPQUFPLENBQUNDLFNBQVMsS0FBSyxhQUFhLEVBQUc7VUFDekNNLFdBQVcsQ0FBQ0ssSUFBSSxHQUFHUixZQUFZLENBQUNTLEtBQUssR0FBR0gsT0FBTztRQUNqRCxDQUFDLE1BQ0k7VUFDSEgsV0FBVyxDQUFDTSxLQUFLLEdBQUdULFlBQVksQ0FBQ1EsSUFBSSxHQUFHRixPQUFPO1FBQ2pEO01BQ0Y7TUFDQU4sWUFBWSxHQUFHRyxXQUFXO0lBQzVCLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRUosU0FBUyxFQUFFSCxPQUFRLENBQUM7RUFDN0I7QUFDRjtBQUVBUCxhQUFhLENBQUNxQixRQUFRLENBQUUsd0JBQXdCLEVBQUVsQixzQkFBdUIsQ0FBQyJ9