// Copyright 2013-2022, University of Colorado Boulder

/**
 * C2H5Cl Molecule
 * Structure is similar to C2H6, but with Cl replacing one of the H's.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { combineOptions } from '../../../phet-core/js/optionize.js';
import Element from '../Element.js';
import nitroglycerin from '../nitroglycerin.js';
import AtomNode from './AtomNode.js';
import MoleculeNode from './MoleculeNode.js';
export default class C2H5ClNode extends MoleculeNode {
  constructor(providedOptions) {
    const atomNodeOptions = providedOptions?.atomNodeOptions;

    // atoms
    const leftNode = new AtomNode(Element.C, atomNodeOptions);
    const centerNode = new AtomNode(Element.C, combineOptions({
      centerX: leftNode.right + 0.25 * leftNode.width,
      centerY: leftNode.centerY
    }, atomNodeOptions));
    const smallTopLeftNode = new AtomNode(Element.H, combineOptions({
      centerX: leftNode.centerX,
      centerY: leftNode.top
    }, atomNodeOptions));
    const smallBottomLeftNode = new AtomNode(Element.H, combineOptions({
      centerX: smallTopLeftNode.centerX,
      centerY: leftNode.bottom
    }, atomNodeOptions));
    const smallLeftNode = new AtomNode(Element.H, combineOptions({
      centerX: leftNode.left,
      centerY: leftNode.centerY
    }, atomNodeOptions));
    const smallTopRightNode = new AtomNode(Element.H, combineOptions({
      centerX: centerNode.centerX,
      centerY: centerNode.top
    }, atomNodeOptions));
    const smallBottomRightNode = new AtomNode(Element.H, combineOptions({
      centerX: centerNode.centerX,
      centerY: centerNode.bottom
    }, atomNodeOptions));
    const rightNode = new AtomNode(Element.Cl, combineOptions({
      left: centerNode.centerX + 0.11 * leftNode.width,
      centerY: centerNode.centerY
    }, atomNodeOptions));
    const atomNodes = [smallBottomRightNode, smallTopRightNode, centerNode, rightNode, smallLeftNode, leftNode, smallBottomLeftNode, smallTopLeftNode];
    super(atomNodes, providedOptions);
  }
}
nitroglycerin.register('C2H5ClNode', C2H5ClNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21iaW5lT3B0aW9ucyIsIkVsZW1lbnQiLCJuaXRyb2dseWNlcmluIiwiQXRvbU5vZGUiLCJNb2xlY3VsZU5vZGUiLCJDMkg1Q2xOb2RlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJhdG9tTm9kZU9wdGlvbnMiLCJsZWZ0Tm9kZSIsIkMiLCJjZW50ZXJOb2RlIiwiY2VudGVyWCIsInJpZ2h0Iiwid2lkdGgiLCJjZW50ZXJZIiwic21hbGxUb3BMZWZ0Tm9kZSIsIkgiLCJ0b3AiLCJzbWFsbEJvdHRvbUxlZnROb2RlIiwiYm90dG9tIiwic21hbGxMZWZ0Tm9kZSIsImxlZnQiLCJzbWFsbFRvcFJpZ2h0Tm9kZSIsInNtYWxsQm90dG9tUmlnaHROb2RlIiwicmlnaHROb2RlIiwiQ2wiLCJhdG9tTm9kZXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkMySDVDbE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQzJINUNsIE1vbGVjdWxlXHJcbiAqIFN0cnVjdHVyZSBpcyBzaW1pbGFyIHRvIEMySDYsIGJ1dCB3aXRoIENsIHJlcGxhY2luZyBvbmUgb2YgdGhlIEgncy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBjb21iaW5lT3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgRWxlbWVudCBmcm9tICcuLi9FbGVtZW50LmpzJztcclxuaW1wb3J0IG5pdHJvZ2x5Y2VyaW4gZnJvbSAnLi4vbml0cm9nbHljZXJpbi5qcyc7XHJcbmltcG9ydCBBdG9tTm9kZSwgeyBBdG9tTm9kZU9wdGlvbnMgfSBmcm9tICcuL0F0b21Ob2RlLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlTm9kZSwgeyBNb2xlY3VsZU5vZGVPcHRpb25zIH0gZnJvbSAnLi9Nb2xlY3VsZU5vZGUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbmV4cG9ydCB0eXBlIEMySDVDbE5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBNb2xlY3VsZU5vZGVPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQzJINUNsTm9kZSBleHRlbmRzIE1vbGVjdWxlTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogQzJINUNsTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgYXRvbU5vZGVPcHRpb25zID0gcHJvdmlkZWRPcHRpb25zPy5hdG9tTm9kZU9wdGlvbnM7XHJcblxyXG4gICAgLy8gYXRvbXNcclxuICAgIGNvbnN0IGxlZnROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkMsIGF0b21Ob2RlT3B0aW9ucyApO1xyXG4gICAgY29uc3QgY2VudGVyTm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5DLCBjb21iaW5lT3B0aW9uczxBdG9tTm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IGxlZnROb2RlLnJpZ2h0ICsgKCAwLjI1ICogbGVmdE5vZGUud2lkdGggKSxcclxuICAgICAgY2VudGVyWTogbGVmdE5vZGUuY2VudGVyWVxyXG4gICAgfSwgYXRvbU5vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IHNtYWxsVG9wTGVmdE5vZGUgPSBuZXcgQXRvbU5vZGUoIEVsZW1lbnQuSCwgY29tYmluZU9wdGlvbnM8QXRvbU5vZGVPcHRpb25zPigge1xyXG4gICAgICBjZW50ZXJYOiBsZWZ0Tm9kZS5jZW50ZXJYLFxyXG4gICAgICBjZW50ZXJZOiBsZWZ0Tm9kZS50b3BcclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCBzbWFsbEJvdHRvbUxlZnROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkgsIGNvbWJpbmVPcHRpb25zPEF0b21Ob2RlT3B0aW9ucz4oIHtcclxuICAgICAgY2VudGVyWDogc21hbGxUb3BMZWZ0Tm9kZS5jZW50ZXJYLFxyXG4gICAgICBjZW50ZXJZOiBsZWZ0Tm9kZS5ib3R0b21cclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcbiAgICBjb25zdCBzbWFsbExlZnROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkgsIGNvbWJpbmVPcHRpb25zPEF0b21Ob2RlT3B0aW9ucz4oIHtcclxuICAgICAgY2VudGVyWDogbGVmdE5vZGUubGVmdCxcclxuICAgICAgY2VudGVyWTogbGVmdE5vZGUuY2VudGVyWVxyXG4gICAgfSwgYXRvbU5vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IHNtYWxsVG9wUmlnaHROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkgsIGNvbWJpbmVPcHRpb25zPEF0b21Ob2RlT3B0aW9ucz4oIHtcclxuICAgICAgY2VudGVyWDogY2VudGVyTm9kZS5jZW50ZXJYLFxyXG4gICAgICBjZW50ZXJZOiBjZW50ZXJOb2RlLnRvcFxyXG4gICAgfSwgYXRvbU5vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IHNtYWxsQm90dG9tUmlnaHROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkgsIGNvbWJpbmVPcHRpb25zPEF0b21Ob2RlT3B0aW9ucz4oIHtcclxuICAgICAgY2VudGVyWDogY2VudGVyTm9kZS5jZW50ZXJYLFxyXG4gICAgICBjZW50ZXJZOiBjZW50ZXJOb2RlLmJvdHRvbVxyXG4gICAgfSwgYXRvbU5vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IHJpZ2h0Tm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5DbCwgY29tYmluZU9wdGlvbnM8QXRvbU5vZGVPcHRpb25zPigge1xyXG4gICAgICBsZWZ0OiBjZW50ZXJOb2RlLmNlbnRlclggKyAoIDAuMTEgKiBsZWZ0Tm9kZS53aWR0aCApLFxyXG4gICAgICBjZW50ZXJZOiBjZW50ZXJOb2RlLmNlbnRlcllcclxuICAgIH0sIGF0b21Ob2RlT3B0aW9ucyApICk7XHJcblxyXG4gICAgY29uc3QgYXRvbU5vZGVzID0gW1xyXG4gICAgICBzbWFsbEJvdHRvbVJpZ2h0Tm9kZSwgc21hbGxUb3BSaWdodE5vZGUsIGNlbnRlck5vZGUsIHJpZ2h0Tm9kZSxcclxuICAgICAgc21hbGxMZWZ0Tm9kZSwgbGVmdE5vZGUsIHNtYWxsQm90dG9tTGVmdE5vZGUsIHNtYWxsVG9wTGVmdE5vZGVcclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIGF0b21Ob2RlcywgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5uaXRyb2dseWNlcmluLnJlZ2lzdGVyKCAnQzJINUNsTm9kZScsIEMySDVDbE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxjQUFjLFFBQTBCLG9DQUFvQztBQUNyRixPQUFPQyxPQUFPLE1BQU0sZUFBZTtBQUNuQyxPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLFFBQVEsTUFBMkIsZUFBZTtBQUN6RCxPQUFPQyxZQUFZLE1BQStCLG1CQUFtQjtBQUtyRSxlQUFlLE1BQU1DLFVBQVUsU0FBU0QsWUFBWSxDQUFDO0VBRTVDRSxXQUFXQSxDQUFFQyxlQUFtQyxFQUFHO0lBRXhELE1BQU1DLGVBQWUsR0FBR0QsZUFBZSxFQUFFQyxlQUFlOztJQUV4RDtJQUNBLE1BQU1DLFFBQVEsR0FBRyxJQUFJTixRQUFRLENBQUVGLE9BQU8sQ0FBQ1MsQ0FBQyxFQUFFRixlQUFnQixDQUFDO0lBQzNELE1BQU1HLFVBQVUsR0FBRyxJQUFJUixRQUFRLENBQUVGLE9BQU8sQ0FBQ1MsQ0FBQyxFQUFFVixjQUFjLENBQW1CO01BQzNFWSxPQUFPLEVBQUVILFFBQVEsQ0FBQ0ksS0FBSyxHQUFLLElBQUksR0FBR0osUUFBUSxDQUFDSyxLQUFPO01BQ25EQyxPQUFPLEVBQUVOLFFBQVEsQ0FBQ007SUFDcEIsQ0FBQyxFQUFFUCxlQUFnQixDQUFFLENBQUM7SUFDdEIsTUFBTVEsZ0JBQWdCLEdBQUcsSUFBSWIsUUFBUSxDQUFFRixPQUFPLENBQUNnQixDQUFDLEVBQUVqQixjQUFjLENBQW1CO01BQ2pGWSxPQUFPLEVBQUVILFFBQVEsQ0FBQ0csT0FBTztNQUN6QkcsT0FBTyxFQUFFTixRQUFRLENBQUNTO0lBQ3BCLENBQUMsRUFBRVYsZUFBZ0IsQ0FBRSxDQUFDO0lBQ3RCLE1BQU1XLG1CQUFtQixHQUFHLElBQUloQixRQUFRLENBQUVGLE9BQU8sQ0FBQ2dCLENBQUMsRUFBRWpCLGNBQWMsQ0FBbUI7TUFDcEZZLE9BQU8sRUFBRUksZ0JBQWdCLENBQUNKLE9BQU87TUFDakNHLE9BQU8sRUFBRU4sUUFBUSxDQUFDVztJQUNwQixDQUFDLEVBQUVaLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNYSxhQUFhLEdBQUcsSUFBSWxCLFFBQVEsQ0FBRUYsT0FBTyxDQUFDZ0IsQ0FBQyxFQUFFakIsY0FBYyxDQUFtQjtNQUM5RVksT0FBTyxFQUFFSCxRQUFRLENBQUNhLElBQUk7TUFDdEJQLE9BQU8sRUFBRU4sUUFBUSxDQUFDTTtJQUNwQixDQUFDLEVBQUVQLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNZSxpQkFBaUIsR0FBRyxJQUFJcEIsUUFBUSxDQUFFRixPQUFPLENBQUNnQixDQUFDLEVBQUVqQixjQUFjLENBQW1CO01BQ2xGWSxPQUFPLEVBQUVELFVBQVUsQ0FBQ0MsT0FBTztNQUMzQkcsT0FBTyxFQUFFSixVQUFVLENBQUNPO0lBQ3RCLENBQUMsRUFBRVYsZUFBZ0IsQ0FBRSxDQUFDO0lBQ3RCLE1BQU1nQixvQkFBb0IsR0FBRyxJQUFJckIsUUFBUSxDQUFFRixPQUFPLENBQUNnQixDQUFDLEVBQUVqQixjQUFjLENBQW1CO01BQ3JGWSxPQUFPLEVBQUVELFVBQVUsQ0FBQ0MsT0FBTztNQUMzQkcsT0FBTyxFQUFFSixVQUFVLENBQUNTO0lBQ3RCLENBQUMsRUFBRVosZUFBZ0IsQ0FBRSxDQUFDO0lBQ3RCLE1BQU1pQixTQUFTLEdBQUcsSUFBSXRCLFFBQVEsQ0FBRUYsT0FBTyxDQUFDeUIsRUFBRSxFQUFFMUIsY0FBYyxDQUFtQjtNQUMzRXNCLElBQUksRUFBRVgsVUFBVSxDQUFDQyxPQUFPLEdBQUssSUFBSSxHQUFHSCxRQUFRLENBQUNLLEtBQU87TUFDcERDLE9BQU8sRUFBRUosVUFBVSxDQUFDSTtJQUN0QixDQUFDLEVBQUVQLGVBQWdCLENBQUUsQ0FBQztJQUV0QixNQUFNbUIsU0FBUyxHQUFHLENBQ2hCSCxvQkFBb0IsRUFBRUQsaUJBQWlCLEVBQUVaLFVBQVUsRUFBRWMsU0FBUyxFQUM5REosYUFBYSxFQUFFWixRQUFRLEVBQUVVLG1CQUFtQixFQUFFSCxnQkFBZ0IsQ0FDL0Q7SUFFRCxLQUFLLENBQUVXLFNBQVMsRUFBRXBCLGVBQWdCLENBQUM7RUFDckM7QUFDRjtBQUVBTCxhQUFhLENBQUMwQixRQUFRLENBQUUsWUFBWSxFQUFFdkIsVUFBVyxDQUFDIn0=