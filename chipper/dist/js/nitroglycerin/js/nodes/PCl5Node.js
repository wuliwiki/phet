// Copyright 2013-2022, University of Colorado Boulder

/**
 * PCl5 Molecule
 * Structure has 2 H's on the vertical axis, and 3 H's arranged in a triangle in the horizontal plane.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { combineOptions } from '../../../phet-core/js/optionize.js';
import Element from '../Element.js';
import nitroglycerin from '../nitroglycerin.js';
import AtomNode from './AtomNode.js';
import MoleculeNode from './MoleculeNode.js';
export default class PCl5Node extends MoleculeNode {
  constructor(providedOptions) {
    const atomNodeOptions = providedOptions?.atomNodeOptions;

    // atoms
    const centerNode = new AtomNode(Element.P, atomNodeOptions);
    const topNode = new AtomNode(Element.Cl, combineOptions({
      centerX: centerNode.centerX,
      centerY: centerNode.top
    }, atomNodeOptions));
    const bottomNode = new AtomNode(Element.Cl, combineOptions({
      centerX: centerNode.centerX,
      centerY: centerNode.bottom
    }, atomNodeOptions));
    const rightNode = new AtomNode(Element.Cl, combineOptions({
      centerX: centerNode.right,
      centerY: centerNode.centerY
    }, atomNodeOptions));
    const topLeftNode = new AtomNode(Element.Cl, combineOptions({
      centerX: centerNode.left + 0.25 * centerNode.width,
      centerY: centerNode.top + 0.25 * centerNode.height
    }, atomNodeOptions));
    const bottomLeftNode = new AtomNode(Element.Cl, combineOptions({
      centerX: centerNode.left + 0.1 * centerNode.width,
      centerY: centerNode.bottom - 0.1 * centerNode.height
    }, atomNodeOptions));
    const atomNodes = [rightNode, bottomNode, topLeftNode, centerNode, topNode, bottomLeftNode];
    super(atomNodes, providedOptions);
  }
}
nitroglycerin.register('PCl5Node', PCl5Node);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21iaW5lT3B0aW9ucyIsIkVsZW1lbnQiLCJuaXRyb2dseWNlcmluIiwiQXRvbU5vZGUiLCJNb2xlY3VsZU5vZGUiLCJQQ2w1Tm9kZSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwiYXRvbU5vZGVPcHRpb25zIiwiY2VudGVyTm9kZSIsIlAiLCJ0b3BOb2RlIiwiQ2wiLCJjZW50ZXJYIiwiY2VudGVyWSIsInRvcCIsImJvdHRvbU5vZGUiLCJib3R0b20iLCJyaWdodE5vZGUiLCJyaWdodCIsInRvcExlZnROb2RlIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiYm90dG9tTGVmdE5vZGUiLCJhdG9tTm9kZXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBDbDVOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBDbDUgTW9sZWN1bGVcclxuICogU3RydWN0dXJlIGhhcyAyIEgncyBvbiB0aGUgdmVydGljYWwgYXhpcywgYW5kIDMgSCdzIGFycmFuZ2VkIGluIGEgdHJpYW5nbGUgaW4gdGhlIGhvcml6b250YWwgcGxhbmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgY29tYmluZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi4vRWxlbWVudC5qcyc7XHJcbmltcG9ydCBuaXRyb2dseWNlcmluIGZyb20gJy4uL25pdHJvZ2x5Y2VyaW4uanMnO1xyXG5pbXBvcnQgQXRvbU5vZGUsIHsgQXRvbU5vZGVPcHRpb25zIH0gZnJvbSAnLi9BdG9tTm9kZS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZU5vZGUsIHsgTW9sZWN1bGVOb2RlT3B0aW9ucyB9IGZyb20gJy4vTW9sZWN1bGVOb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBQQ2w1Tm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE1vbGVjdWxlTm9kZU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQQ2w1Tm9kZSBleHRlbmRzIE1vbGVjdWxlTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogUENsNU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IGF0b21Ob2RlT3B0aW9ucyA9IHByb3ZpZGVkT3B0aW9ucz8uYXRvbU5vZGVPcHRpb25zO1xyXG5cclxuICAgIC8vIGF0b21zXHJcbiAgICBjb25zdCBjZW50ZXJOb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LlAsIGF0b21Ob2RlT3B0aW9ucyApO1xyXG4gICAgY29uc3QgdG9wTm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5DbCwgY29tYmluZU9wdGlvbnM8QXRvbU5vZGVPcHRpb25zPigge1xyXG4gICAgICBjZW50ZXJYOiBjZW50ZXJOb2RlLmNlbnRlclgsXHJcbiAgICAgIGNlbnRlclk6IGNlbnRlck5vZGUudG9wXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG4gICAgY29uc3QgYm90dG9tTm9kZSA9IG5ldyBBdG9tTm9kZSggRWxlbWVudC5DbCwgY29tYmluZU9wdGlvbnM8QXRvbU5vZGVPcHRpb25zPigge1xyXG4gICAgICBjZW50ZXJYOiBjZW50ZXJOb2RlLmNlbnRlclgsXHJcbiAgICAgIGNlbnRlclk6IGNlbnRlck5vZGUuYm90dG9tXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG4gICAgY29uc3QgcmlnaHROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkNsLCBjb21iaW5lT3B0aW9uczxBdG9tTm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IGNlbnRlck5vZGUucmlnaHQsXHJcbiAgICAgIGNlbnRlclk6IGNlbnRlck5vZGUuY2VudGVyWVxyXG4gICAgfSwgYXRvbU5vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IHRvcExlZnROb2RlID0gbmV3IEF0b21Ob2RlKCBFbGVtZW50LkNsLCBjb21iaW5lT3B0aW9uczxBdG9tTm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IGNlbnRlck5vZGUubGVmdCArICggMC4yNSAqIGNlbnRlck5vZGUud2lkdGggKSxcclxuICAgICAgY2VudGVyWTogY2VudGVyTm9kZS50b3AgKyAoIDAuMjUgKiBjZW50ZXJOb2RlLmhlaWdodCApXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG4gICAgY29uc3QgYm90dG9tTGVmdE5vZGUgPSBuZXcgQXRvbU5vZGUoIEVsZW1lbnQuQ2wsIGNvbWJpbmVPcHRpb25zPEF0b21Ob2RlT3B0aW9ucz4oIHtcclxuICAgICAgY2VudGVyWDogY2VudGVyTm9kZS5sZWZ0ICsgKCAwLjEgKiBjZW50ZXJOb2RlLndpZHRoICksXHJcbiAgICAgIGNlbnRlclk6IGNlbnRlck5vZGUuYm90dG9tIC0gKCAwLjEgKiBjZW50ZXJOb2RlLmhlaWdodCApXHJcbiAgICB9LCBhdG9tTm9kZU9wdGlvbnMgKSApO1xyXG5cclxuICAgIGNvbnN0IGF0b21Ob2RlcyA9IFsgcmlnaHROb2RlLCBib3R0b21Ob2RlLCB0b3BMZWZ0Tm9kZSwgY2VudGVyTm9kZSwgdG9wTm9kZSwgYm90dG9tTGVmdE5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggYXRvbU5vZGVzLCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbm5pdHJvZ2x5Y2VyaW4ucmVnaXN0ZXIoICdQQ2w1Tm9kZScsIFBDbDVOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsY0FBYyxRQUEwQixvQ0FBb0M7QUFDckYsT0FBT0MsT0FBTyxNQUFNLGVBQWU7QUFDbkMsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxRQUFRLE1BQTJCLGVBQWU7QUFDekQsT0FBT0MsWUFBWSxNQUErQixtQkFBbUI7QUFLckUsZUFBZSxNQUFNQyxRQUFRLFNBQVNELFlBQVksQ0FBQztFQUUxQ0UsV0FBV0EsQ0FBRUMsZUFBaUMsRUFBRztJQUV0RCxNQUFNQyxlQUFlLEdBQUdELGVBQWUsRUFBRUMsZUFBZTs7SUFFeEQ7SUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSU4sUUFBUSxDQUFFRixPQUFPLENBQUNTLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUM3RCxNQUFNRyxPQUFPLEdBQUcsSUFBSVIsUUFBUSxDQUFFRixPQUFPLENBQUNXLEVBQUUsRUFBRVosY0FBYyxDQUFtQjtNQUN6RWEsT0FBTyxFQUFFSixVQUFVLENBQUNJLE9BQU87TUFDM0JDLE9BQU8sRUFBRUwsVUFBVSxDQUFDTTtJQUN0QixDQUFDLEVBQUVQLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNUSxVQUFVLEdBQUcsSUFBSWIsUUFBUSxDQUFFRixPQUFPLENBQUNXLEVBQUUsRUFBRVosY0FBYyxDQUFtQjtNQUM1RWEsT0FBTyxFQUFFSixVQUFVLENBQUNJLE9BQU87TUFDM0JDLE9BQU8sRUFBRUwsVUFBVSxDQUFDUTtJQUN0QixDQUFDLEVBQUVULGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNVSxTQUFTLEdBQUcsSUFBSWYsUUFBUSxDQUFFRixPQUFPLENBQUNXLEVBQUUsRUFBRVosY0FBYyxDQUFtQjtNQUMzRWEsT0FBTyxFQUFFSixVQUFVLENBQUNVLEtBQUs7TUFDekJMLE9BQU8sRUFBRUwsVUFBVSxDQUFDSztJQUN0QixDQUFDLEVBQUVOLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNWSxXQUFXLEdBQUcsSUFBSWpCLFFBQVEsQ0FBRUYsT0FBTyxDQUFDVyxFQUFFLEVBQUVaLGNBQWMsQ0FBbUI7TUFDN0VhLE9BQU8sRUFBRUosVUFBVSxDQUFDWSxJQUFJLEdBQUssSUFBSSxHQUFHWixVQUFVLENBQUNhLEtBQU87TUFDdERSLE9BQU8sRUFBRUwsVUFBVSxDQUFDTSxHQUFHLEdBQUssSUFBSSxHQUFHTixVQUFVLENBQUNjO0lBQ2hELENBQUMsRUFBRWYsZUFBZ0IsQ0FBRSxDQUFDO0lBQ3RCLE1BQU1nQixjQUFjLEdBQUcsSUFBSXJCLFFBQVEsQ0FBRUYsT0FBTyxDQUFDVyxFQUFFLEVBQUVaLGNBQWMsQ0FBbUI7TUFDaEZhLE9BQU8sRUFBRUosVUFBVSxDQUFDWSxJQUFJLEdBQUssR0FBRyxHQUFHWixVQUFVLENBQUNhLEtBQU87TUFDckRSLE9BQU8sRUFBRUwsVUFBVSxDQUFDUSxNQUFNLEdBQUssR0FBRyxHQUFHUixVQUFVLENBQUNjO0lBQ2xELENBQUMsRUFBRWYsZUFBZ0IsQ0FBRSxDQUFDO0lBRXRCLE1BQU1pQixTQUFTLEdBQUcsQ0FBRVAsU0FBUyxFQUFFRixVQUFVLEVBQUVJLFdBQVcsRUFBRVgsVUFBVSxFQUFFRSxPQUFPLEVBQUVhLGNBQWMsQ0FBRTtJQUU3RixLQUFLLENBQUVDLFNBQVMsRUFBRWxCLGVBQWdCLENBQUM7RUFDckM7QUFDRjtBQUVBTCxhQUFhLENBQUN3QixRQUFRLENBQUUsVUFBVSxFQUFFckIsUUFBUyxDQUFDIn0=