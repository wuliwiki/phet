/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';
const soundURI = 'data:audio/mpeg;base64,//s0xAAABPgpA1SRADEro+y3HnADAAAJopUMBGjnOc50QAmG3qIMXboDA3kNxz1O4neD7+f/OFHf//6wQcMgFAhEAqFIhAYCAIAztARk4RukdsK8f4Xn6GKAOiuLUAMC/Yg4lixeQIQnEgd/IGSpM0buP/q78m7oY//+NNf///nnz///8wwmstAFrFbAMGch//s0xAQAB3w9aTzzADD+CCnpl5ic07aGoAzCHD1E5OlQstHyuZnxFiSW//XYUDQdxFBU7gqCoNVgrMYdDRUNO6wVez/+sFXYK+AftY45GBUtQI7rVDdwEBXznQtQq4/ZnxoACgmW6zJoj8ZMo+CqAEGjJwesMlgBKh02HTTzv3U5HkZLkutwSdWwF2Wyy22g//s0xAOAB4SPX6ekSvDyDybpxg1UAMqORA6oInYlGZiMViHksFklQqHxsybQnu0eFAotWKNQCJLAW5Uih1Z6dlBoFakOhynmdEaABuBKaUAHLD+vay8xpASKIw+GAzNXz1BmqFQhJTirpkolntyw4JtgxFlnZbTsKvOKgPCazFCWIbh2K6SSDACktts0DAGt//s0xASAB+x9Pa2YbuD1E6e1ow3ct4/kDChCdYKIGMeiL6Q86bsONT4xYIRirISRSrUNWx1EktptYVQurWHCkGhkFgPhNzUPeb/9YZEW0u1trAAx7VchuaEk4MEiGtTWK+DYm/sQC/WdMRz1RpEzx6Gotrz5K9YjCqrw/rHb8IqQId//KdEzn23gHNbKtpzy//s0xAODx1RhJC4kapDpjGPBjhiYACBcanXOaYsFSCj+AQBI4mwrBo5JyL7hLJkRwSYiHw1FlR3EI56rUKasqXDMY28V/ZZ/S02A3JjyCUxkNXjg8xyzhZLEhIDgukC3aUzRw4gKKec7nTDtFMuLZf5tW3L5MjYEXPBpEUexKVn0DOwEgDACVZwRH2PpumAp//s0xAaACBCHHnWzABEFEagjMsAAxwNEYNjGfEACQGXy2PTmErpSeYg8kIQ9zDYgr0PKaCBBUXVnnnIT735HybZSEHLq3Hf5MABljFmAAD8db+4SAOQ8wcw0wXM5YfyC3MrYs0OulQeVJqllq3/N4MMZt/3+bIw7DPg+5j7M07rzchrCqmjXOo+hCAK/NwA///s0xAMARwh3LT2hgAjSjeTUbIyq+4UylSxmjggeEHjoPzEiyYCWASXEFzdUEGJhwisK34plz/4bBlc/zYj4GAoRTa+jXXxALwN4nD518Fb0LjHcN1w1+A1w+kgwhibB4ZYQrhEhRBI4w6mrqXkaRVwg9P0GYUMA+UN/1GAABkvCzs2qVuq9VSrKNDIN2FAY//s0xAoABuR/IkFoxYiQhqh0FhkeU35dXVeKxlqjL6PJId8an7/X37bNX79v6OPOJeTQkoKsKo7aI5EnIJHAAFfmjUCUmLSJcchyWyQiGEtlbt32WjTpGDT/dfvqCBV52ajgmTOvotZnJeYv0lqCBhv4gqNT7hq/KXZa9Kew0t6wC7iL68qe3ZH/4adSKAAL//s0xBmABdA9CCCbQQCNhiL0EaWOaiUgE1PJ2GTalwCCwavYDU9hose6YVoEPbnt3/9n05bqGkZthAAARFnrXCT1Tp01sDtfCbv/QFlMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xC4BwvQBB6CEYDAEgEAAkAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray(phetAudioContext, soundURI);
const unlock = asyncLoader.createLock(soundURI);
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if (!unlocked) {
    unlock();
    unlocked = true;
  }
};
const onDecodeSuccess = decodedAudio => {
  if (wrappedAudioBuffer.audioBufferProperty.value === null) {
    wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn('decode of audio data failed, using stubbed sound, error: ' + decodeError);
  wrappedAudioBuffer.audioBufferProperty.set(phetAudioContext.createBuffer(1, 1, phetAudioContext.sampleRate));
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData(soundByteArray.buffer, onDecodeSuccess, onDecodeError);
if (decodePromise) {
  decodePromise.then(decodedAudio => {
    if (wrappedAudioBuffer.audioBufferProperty.value === null) {
      wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
      safeUnlock();
    }
  }).catch(e => {
    console.warn('promise rejection caught for audio decode, error = ' + e);
    safeUnlock();
  });
}
export default wrappedAudioBuffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3luY0xvYWRlciIsImJhc2U2NFNvdW5kVG9CeXRlQXJyYXkiLCJXcmFwcGVkQXVkaW9CdWZmZXIiLCJwaGV0QXVkaW9Db250ZXh0Iiwic291bmRVUkkiLCJzb3VuZEJ5dGVBcnJheSIsInVubG9jayIsImNyZWF0ZUxvY2siLCJ3cmFwcGVkQXVkaW9CdWZmZXIiLCJ1bmxvY2tlZCIsInNhZmVVbmxvY2siLCJvbkRlY29kZVN1Y2Nlc3MiLCJkZWNvZGVkQXVkaW8iLCJhdWRpb0J1ZmZlclByb3BlcnR5IiwidmFsdWUiLCJzZXQiLCJvbkRlY29kZUVycm9yIiwiZGVjb2RlRXJyb3IiLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZUJ1ZmZlciIsInNhbXBsZVJhdGUiLCJkZWNvZGVQcm9taXNlIiwiZGVjb2RlQXVkaW9EYXRhIiwiYnVmZmVyIiwidGhlbiIsImNhdGNoIiwiZSJdLCJzb3VyY2VzIjpbIndhdGVyRHJvcFY1XzAwMV9tcDMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cclxuaW1wb3J0IGFzeW5jTG9hZGVyIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9hc3luY0xvYWRlci5qcyc7XHJcbmltcG9ydCBiYXNlNjRTb3VuZFRvQnl0ZUFycmF5IGZyb20gJy4uLy4uL3RhbWJvL2pzL2Jhc2U2NFNvdW5kVG9CeXRlQXJyYXkuanMnO1xyXG5pbXBvcnQgV3JhcHBlZEF1ZGlvQnVmZmVyIGZyb20gJy4uLy4uL3RhbWJvL2pzL1dyYXBwZWRBdWRpb0J1ZmZlci5qcyc7XHJcbmltcG9ydCBwaGV0QXVkaW9Db250ZXh0IGZyb20gJy4uLy4uL3RhbWJvL2pzL3BoZXRBdWRpb0NvbnRleHQuanMnO1xyXG5cclxuY29uc3Qgc291bmRVUkkgPSAnZGF0YTphdWRpby9tcGVnO2Jhc2U2NCwvL3MweEFBQUJQZ3BBMVNSQURFcm8reTNIbkFEQUFBSm9wVU1CR2puT2M1MFFBbUczcUlNWGJvREEza054ejFPNG5lRDcrZi9PRkhmLy82d1FjTWdGQWhFQXFGSWhBWUNBSUF6dEFSazRSdWtkc0s4ZjRYbjZHS0FPaXVMVUFNQy9ZZzRsaXhlUUlRbkVnZC9JR1NwTTBidVAvcTc4bTdvWS8vK05OZi8vL25uei8vLzh3d21zdEFGckZiQU1HY2gvL3MweEFRQUIzdzlhVHp6QUREK0NDbnBsNWljMDdhR29BekNIRDFFNU9sUXN0SHl1Wm54RmlTVy8vWFlVRFFkeEZCVTdncUNvTlZnck1ZZERSVU5PNndWZXovK3NGWFlLK0FmdFk0NUdCVXRRSTdyVkRkd0VCWHpuUXRRcTQvWm54b0FDZ21XNnpKb2o4Wk1vK0NxQUVHakp3ZXNNbGdCS2gwMkhUVHp2M1U1SGtaTGt1dHdTZFd3RjJXeXkyMmcvL3MweEFPQUI0U1BYNmVrU3ZEeUR5YnB4ZzFVQU1xT1JBNm9JbllsR1ppTVZpSGtzRmtsUXFIeHN5YlFudTBlRkFvdFdLTlFDSkxBVzVVaWgxWjZkbEJvRmFrT2h5bm1kRWFBQnVCS2FVQUhMRCt2YXk4eHBBU0tJdytHQXpOWHoxQm1xRlFoSlRpcnBrb2xudHl3NEp0Z3hGbG5aYlRzS3ZPS2dQQ2F6RkNXSWJoMks2U1NEQUNrdHRzMERBR3QvL3MweEFTQUIreDlQYTJZYnVEMUU2ZTFvdzNjdDQva0RDaENkWUtJR01laUw2UTg2YnNPTlQ0eFlJUmlySVNSU3JVTld4MUVrdHB0WVZRdXJXSENrR2hrRmdQaE56VVBlYi85WVpFVzB1MXRyQUF4N1ZjaHVhRWs0TUVpR3RUV0srRFltL3NRQy9XZE1SejFScEV6eDZHb3RyejVLOVlqQ3Fydy9ySGI4SXFRSWQvL0tkRXpuMjNnSE5iS3RwenkvL3MweEFPRHgxUmhKQzRrYXBEcGpHUEJqaGlZQUNCY2FuWE9hWXNGU0NqK0FRQkk0bXdyQm81SnlMN2hMSmtSd1NZaUh3MUZsUjNFSTU2clVLYXNxWERNWTI4Vi9aWi9TMDJBM0pqeUNVeGtOWGpnOHh5emhaTEVoSURndWtDM2FVelJ3NGdLS2VjN25URHRGTXVMWmY1dFczTDVNallFWFBCcEVVZXhLVm4wRE93RWdEQUNWWndSSDJQcHVtQXAvL3MweEFhQUNCQ0hIbld6QUJFRkVhZ2pNc0FBeHdORVlOakdmRUFDUUdYeTJQVG1FcnBTZVlnOGtJUTl6RFlncjBQS2FDQkJVWFZubm5JVDczNUh5YlpTRUhMcTNIZjVNQUJsakZtQUFEOGRiKzRTQU9ROHdjdzB3WE01WWZ5QzNNcllzME91bFFlVkpxbGxxMy9ONE1NWnQvMytiSXc3RFBnKzVqN00wN3J6Y2hyQ3FtalhPbytoQ0FLL053QS8vL3MweEFNQVJ3aDNMVDJoZ0FqU2plVFViSXlxKzRVeWxTeG1qZ2dlRUhqb1B6RWl5WUNXQVNYRUZ6ZFVFR0pod2lzSzM0cGx6LzRiQmxjL3pZajRHQW9SVGEralhYeEFMd040bkQ1MThGYjBMakhjTjF3MStBMXcra2d3aGliQjRaWVFyaEVoUkJJNHc2bXJxWGthUlZ3ZzlQMEdZVU1BK1VOLzFHQUFCa3ZDenMycVZ1cTlWU3JLTkRJTjJGQVkvL3MweEFvQUJ1Ui9Ja0ZveFlpUWhxaDBGaGtlVTM1ZFhWZUt4bHFqTDZQSklkOGFuNy9YMzdiTlg3OXY2T1BPSmVUUWtvS3NLbzdhSTVFbklKSEFBRmZtalVDVW1MU0pjY2h5V3lRaUdFdGxidDMyV2pUcEdEVC9kZnZxQ0JWNTJhamdtVE92b3RabkplWXYwbHFDQmh2NGdxTlQ3aHEvS1haYTlLZXcwdDZ3QzdpTDY4cWUzWkgvNGFkU0tBQUwvL3MweEJtQUJkQTlDQ0NiUVFDTmhpTDBFYVdPYWlVZ0UxUEoyR1RhbHdDQ3dhdllEVTlob3NlNllWb0VQYm50My85bjA1YnFHa1p0aEFBQVJGbnJYQ1QxVHAwMXNEdGZDYnYvUUZsTVFVMUZNeTQ1T1M0MVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYvL3MweEM0Qnd2UUJCNkNFWURBRWdFQUFrQUFFVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYnO1xyXG5jb25zdCBzb3VuZEJ5dGVBcnJheSA9IGJhc2U2NFNvdW5kVG9CeXRlQXJyYXkoIHBoZXRBdWRpb0NvbnRleHQsIHNvdW5kVVJJICk7XHJcbmNvbnN0IHVubG9jayA9IGFzeW5jTG9hZGVyLmNyZWF0ZUxvY2soIHNvdW5kVVJJICk7XHJcbmNvbnN0IHdyYXBwZWRBdWRpb0J1ZmZlciA9IG5ldyBXcmFwcGVkQXVkaW9CdWZmZXIoKTtcclxuXHJcbi8vIHNhZmUgd2F5IHRvIHVubG9ja1xyXG5sZXQgdW5sb2NrZWQgPSBmYWxzZTtcclxuY29uc3Qgc2FmZVVubG9jayA9ICgpID0+IHtcclxuICBpZiAoICF1bmxvY2tlZCApIHtcclxuICAgIHVubG9jaygpO1xyXG4gICAgdW5sb2NrZWQgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IG9uRGVjb2RlU3VjY2VzcyA9IGRlY29kZWRBdWRpbyA9PiB7XHJcbiAgaWYgKCB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS52YWx1ZSA9PT0gbnVsbCApIHtcclxuICAgIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnNldCggZGVjb2RlZEF1ZGlvICk7XHJcbiAgICBzYWZlVW5sb2NrKCk7XHJcbiAgfVxyXG59O1xyXG5jb25zdCBvbkRlY29kZUVycm9yID0gZGVjb2RlRXJyb3IgPT4ge1xyXG4gIGNvbnNvbGUud2FybiggJ2RlY29kZSBvZiBhdWRpbyBkYXRhIGZhaWxlZCwgdXNpbmcgc3R1YmJlZCBzb3VuZCwgZXJyb3I6ICcgKyBkZWNvZGVFcnJvciApO1xyXG4gIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnNldCggcGhldEF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoIDEsIDEsIHBoZXRBdWRpb0NvbnRleHQuc2FtcGxlUmF0ZSApICk7XHJcbiAgc2FmZVVubG9jaygpO1xyXG59O1xyXG5jb25zdCBkZWNvZGVQcm9taXNlID0gcGhldEF1ZGlvQ29udGV4dC5kZWNvZGVBdWRpb0RhdGEoIHNvdW5kQnl0ZUFycmF5LmJ1ZmZlciwgb25EZWNvZGVTdWNjZXNzLCBvbkRlY29kZUVycm9yICk7XHJcbmlmICggZGVjb2RlUHJvbWlzZSApIHtcclxuICBkZWNvZGVQcm9taXNlXHJcbiAgICAudGhlbiggZGVjb2RlZEF1ZGlvID0+IHtcclxuICAgICAgaWYgKCB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS52YWx1ZSA9PT0gbnVsbCApIHtcclxuICAgICAgICB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS5zZXQoIGRlY29kZWRBdWRpbyApO1xyXG4gICAgICAgIHNhZmVVbmxvY2soKTtcclxuICAgICAgfVxyXG4gICAgfSApXHJcbiAgICAuY2F0Y2goIGUgPT4ge1xyXG4gICAgICBjb25zb2xlLndhcm4oICdwcm9taXNlIHJlamVjdGlvbiBjYXVnaHQgZm9yIGF1ZGlvIGRlY29kZSwgZXJyb3IgPSAnICsgZSApO1xyXG4gICAgICBzYWZlVW5sb2NrKCk7XHJcbiAgICB9ICk7XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgd3JhcHBlZEF1ZGlvQnVmZmVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxPQUFPQSxXQUFXLE1BQU0sbUNBQW1DO0FBQzNELE9BQU9DLHNCQUFzQixNQUFNLDBDQUEwQztBQUM3RSxPQUFPQyxrQkFBa0IsTUFBTSxzQ0FBc0M7QUFDckUsT0FBT0MsZ0JBQWdCLE1BQU0sb0NBQW9DO0FBRWpFLE1BQU1DLFFBQVEsR0FBRyx5NURBQXk1RDtBQUMxNkQsTUFBTUMsY0FBYyxHQUFHSixzQkFBc0IsQ0FBRUUsZ0JBQWdCLEVBQUVDLFFBQVMsQ0FBQztBQUMzRSxNQUFNRSxNQUFNLEdBQUdOLFdBQVcsQ0FBQ08sVUFBVSxDQUFFSCxRQUFTLENBQUM7QUFDakQsTUFBTUksa0JBQWtCLEdBQUcsSUFBSU4sa0JBQWtCLENBQUMsQ0FBQzs7QUFFbkQ7QUFDQSxJQUFJTyxRQUFRLEdBQUcsS0FBSztBQUNwQixNQUFNQyxVQUFVLEdBQUdBLENBQUEsS0FBTTtFQUN2QixJQUFLLENBQUNELFFBQVEsRUFBRztJQUNmSCxNQUFNLENBQUMsQ0FBQztJQUNSRyxRQUFRLEdBQUcsSUFBSTtFQUNqQjtBQUNGLENBQUM7QUFFRCxNQUFNRSxlQUFlLEdBQUdDLFlBQVksSUFBSTtFQUN0QyxJQUFLSixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNDLEtBQUssS0FBSyxJQUFJLEVBQUc7SUFDM0ROLGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFSCxZQUFhLENBQUM7SUFDMURGLFVBQVUsQ0FBQyxDQUFDO0VBQ2Q7QUFDRixDQUFDO0FBQ0QsTUFBTU0sYUFBYSxHQUFHQyxXQUFXLElBQUk7RUFDbkNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLDJEQUEyRCxHQUFHRixXQUFZLENBQUM7RUFDekZULGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFWixnQkFBZ0IsQ0FBQ2lCLFlBQVksQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFakIsZ0JBQWdCLENBQUNrQixVQUFXLENBQUUsQ0FBQztFQUNoSFgsVUFBVSxDQUFDLENBQUM7QUFDZCxDQUFDO0FBQ0QsTUFBTVksYUFBYSxHQUFHbkIsZ0JBQWdCLENBQUNvQixlQUFlLENBQUVsQixjQUFjLENBQUNtQixNQUFNLEVBQUViLGVBQWUsRUFBRUssYUFBYyxDQUFDO0FBQy9HLElBQUtNLGFBQWEsRUFBRztFQUNuQkEsYUFBYSxDQUNWRyxJQUFJLENBQUViLFlBQVksSUFBSTtJQUNyQixJQUFLSixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNDLEtBQUssS0FBSyxJQUFJLEVBQUc7TUFDM0ROLGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFSCxZQUFhLENBQUM7TUFDMURGLFVBQVUsQ0FBQyxDQUFDO0lBQ2Q7RUFDRixDQUFFLENBQUMsQ0FDRmdCLEtBQUssQ0FBRUMsQ0FBQyxJQUFJO0lBQ1hULE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLHFEQUFxRCxHQUFHUSxDQUFFLENBQUM7SUFDekVqQixVQUFVLENBQUMsQ0FBQztFQUNkLENBQUUsQ0FBQztBQUNQO0FBQ0EsZUFBZUYsa0JBQWtCIn0=