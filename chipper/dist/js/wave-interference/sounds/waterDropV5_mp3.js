/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';
const soundURI = 'data:audio/mpeg;base64,//s0xAAABPgpA1SRADEro+y3HnADAAAJopUMBGjnOc50QAmG3qIMXboDA3kNxz1O4neD7+f/OFHf//6wQcMgFAhEAqFIhAYCAIAztARk4RukdsK8f4Xn6GKAOiuLUAMC/Yg4lixeQIQnEgd/IGSpM0buP/q78m7oY//+NNf///nnz///8wwmstAFrFbAMGch//s0xAQAB3w9aTzzADD+CCmplhjc07aGoAzCHD1E5OlQstHyuZnxFiSW//XYUDQdxFBU7gqCoNVgrMYdDRUNO6wVez/+sFXYK+AfrIo5EBMWnka6xo5ekuYNBMPyaTg5iXMmB8EzTJGTRH4ybHxKgBBoy4esMlgBKh02HTTzv3SOR5GS4K9bglVABE3/wCWy//s0xAOAB3B/Py2YTWD5D2t0F5gveAF7FnTBZUBRiAKAkgbUDVnamHIli0UyIbpXJpJk7l1fko8ybnKkULUr07KFBkbB45Ts+NdATs11u1oACRykNuEJKzozrTY0wl4GNM6gEaNOsiR86eBV6ORzz9cw0staLKfezIwb1dDGDHFNu/4z40/+lQwAXZXNrGAB//s0xAQAB7BvPa28ZuD3EKs0F6A2zN7HYhYgDQmAUsK5hYEch6sQpXvVoAVGCiKpzQx9mFIeXKowUEuDGUMwUJB0ApB1YlpAVPkXmNN9tttY4ApyiSJMIYU7hGMReP5NxGEynzEHNbWSKkacBCsS6touoxLGyS7XN/czPEUTlPE0rJJd/r/1elVRhO23S2Ng//s0xAOAB0xnS6G8wTjmDKepgaWmADU/lsog0gByF+I29KBlJmqZh0JHFuKROQZCFvK5mute2c4XZWu6+/0xxH6yT+Vw/9irZIf/qNkkAc+MyiWvUnGcvlloeMB6GekuXBgSAKjGuXdJoVLCM1j1MIOz76zwAJBwnPAJF1h5NHp/1FIgtbdbYwwAsUPO1QNC//s0xAcABqxNTaDgw3EBDackF5h+eqHVQuednFoGuQBFbG3OYXodRbqe1TOWWwQHBcRk1CzyBxqbv//9M2M9XSmBE71DRykhTwwSQNo/VgAfgKA6JhJwj4KtC1Gr9swDC7PMZsNsxrtkOzwZf/dGIGFigYOGE6OXiX//8RUAgkgBz8rlq27TDWqxdzYPY4CR//s0xAmCB7SBJsykcICzjCRInA2QDHePtoxbUQBgZCBx3lANACAqSSIVEW93+xyWl7NGc18EdWZAwoZX1t/8gMLAf3UFT0g0hMKkMyVNExLNj1VzN9kgQOVbzDl/nY0pme0bMMKUXqfr2f1ehYAkok/AdokyS1VWKFUhDiBuU4koakFSLgrEq71N0HnrdkfU//s0xBGABUw5IOGl6lCAhuW2gmAG+1P3//+7xPCkyiSko22wEduc3ZqFFv+0kSDLpr6KHdWsr/zrf/0+tRweAAIhYNBmQ1UquAAOPDjwH/1nHhRP4jPZXk+Fi/wyE7OOeofVN6/iBKy+OoY1gH0DfDoOH/X////PJkaGOcz7X6aOjr5K4wBAB4AwAgUhDdJC//s0xCmACPCVUbgXsFFho6S7AtABDAC/JeRsWYt6SkuypUXUFUuiJ6BkgXocp1p3XWjEaHMSRLI9dutHNuv6DGhc9JHrTdkHYwNCgcGEIBTSnBxE01Jximgg36kFlxvl1hQAAAAYeyAFAf/ncRA0DWWBrxF////gr+tx1UxBTUUzLjk5LjVVVVVVVVVVVVVV//s0xBcDwxQBDbwBABACAEAAEAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray(phetAudioContext, soundURI);
const unlock = asyncLoader.createLock(soundURI);
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if (!unlocked) {
    unlock();
    unlocked = true;
  }
};
const onDecodeSuccess = decodedAudio => {
  if (wrappedAudioBuffer.audioBufferProperty.value === null) {
    wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn('decode of audio data failed, using stubbed sound, error: ' + decodeError);
  wrappedAudioBuffer.audioBufferProperty.set(phetAudioContext.createBuffer(1, 1, phetAudioContext.sampleRate));
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData(soundByteArray.buffer, onDecodeSuccess, onDecodeError);
if (decodePromise) {
  decodePromise.then(decodedAudio => {
    if (wrappedAudioBuffer.audioBufferProperty.value === null) {
      wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
      safeUnlock();
    }
  }).catch(e => {
    console.warn('promise rejection caught for audio decode, error = ' + e);
    safeUnlock();
  });
}
export default wrappedAudioBuffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3luY0xvYWRlciIsImJhc2U2NFNvdW5kVG9CeXRlQXJyYXkiLCJXcmFwcGVkQXVkaW9CdWZmZXIiLCJwaGV0QXVkaW9Db250ZXh0Iiwic291bmRVUkkiLCJzb3VuZEJ5dGVBcnJheSIsInVubG9jayIsImNyZWF0ZUxvY2siLCJ3cmFwcGVkQXVkaW9CdWZmZXIiLCJ1bmxvY2tlZCIsInNhZmVVbmxvY2siLCJvbkRlY29kZVN1Y2Nlc3MiLCJkZWNvZGVkQXVkaW8iLCJhdWRpb0J1ZmZlclByb3BlcnR5IiwidmFsdWUiLCJzZXQiLCJvbkRlY29kZUVycm9yIiwiZGVjb2RlRXJyb3IiLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZUJ1ZmZlciIsInNhbXBsZVJhdGUiLCJkZWNvZGVQcm9taXNlIiwiZGVjb2RlQXVkaW9EYXRhIiwiYnVmZmVyIiwidGhlbiIsImNhdGNoIiwiZSJdLCJzb3VyY2VzIjpbIndhdGVyRHJvcFY1X21wMy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5pbXBvcnQgYXN5bmNMb2FkZXIgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL2FzeW5jTG9hZGVyLmpzJztcclxuaW1wb3J0IGJhc2U2NFNvdW5kVG9CeXRlQXJyYXkgZnJvbSAnLi4vLi4vdGFtYm8vanMvYmFzZTY0U291bmRUb0J5dGVBcnJheS5qcyc7XHJcbmltcG9ydCBXcmFwcGVkQXVkaW9CdWZmZXIgZnJvbSAnLi4vLi4vdGFtYm8vanMvV3JhcHBlZEF1ZGlvQnVmZmVyLmpzJztcclxuaW1wb3J0IHBoZXRBdWRpb0NvbnRleHQgZnJvbSAnLi4vLi4vdGFtYm8vanMvcGhldEF1ZGlvQ29udGV4dC5qcyc7XHJcblxyXG5jb25zdCBzb3VuZFVSSSA9ICdkYXRhOmF1ZGlvL21wZWc7YmFzZTY0LC8vczB4QUFBQlBncEExU1JBREVybyt5M0huQURBQUFKb3BVTUJHam5PYzUwUUFtRzNxSU1YYm9EQTNrTnh6MU80bmVENytmL09GSGYvLzZ3UWNNZ0ZBaEVBcUZJaEFZQ0FJQXp0QVJrNFJ1a2RzSzhmNFhuNkdLQU9pdUxVQU1DL1lnNGxpeGVRSVFuRWdkL0lHU3BNMGJ1UC9xNzhtN29ZLy8rTk5mLy8vbm56Ly8vOHd3bXN0QUZyRmJBTUdjaC8vczB4QVFBQjN3OWFUenpBREQrQ0NtcGxoamMwN2FHb0F6Q0hEMUU1T2xRc3RIeXVabnhGaVNXLy9YWVVEUWR4RkJVN2dxQ29OVmdyTVlkRFJVTk82d1Zlei8rc0ZYWUsrQWZySW81RUJNV25rYTZ4bzVla3VZTkJNUHlhVGc1aVhNbUI4RXpUSkdUUkg0eWJIeEtnQkJveTRlc01sZ0JLaDAySFRUenYzU09SNUdTNEs5YmdsVkFCRTMvd0NXeS8vczB4QU9BQjNCL1B5MllUV0Q1RDJ0MEY1Z3ZlQUY3Rm5UQlpVQlJpQUtBa2diVURWbmFtSElsaTBVeUlicFhKcEprN2wxZmtvOHlibktrVUxVcjA3S0ZCa2JCNDVUcytOZEFUczExdTFvQUNSeWtOdUVKS3pvenJUWTB3bDRHTk02Z0VhTk9zaVI4NmVCVjZPUnp6OWN3MHN0YUxLZmV6SXdiMWRER0RIRk51LzR6NDAvK2xRd0FYWlhOckdBQi8vczB4QVFBQjdCdlBhMjhadUQzRUtzMEY2QTJ6TjdIWWhZZ0RRbUFVc0s1aFlFY2g2c1FwWHZWb0FWR0NpS3B6UXg5bUZJZVhLb3dVRXVER1VNd1VKQjBBcEIxWWxwQVZQa1htTk45dHR0WTRBcHlpU0pNSVlVN2hHTVJlUDVOeEdFeW56RUhOYldTS2thY0JDc1M2dG91b3hMR3lTN1hOL2N6UEVVVGxQRTBySkpkL3IvMWVsVlJoTzIzUzJOZy8vczB4QU9BQjB4blM2Rzh3VGptREtlcGdhV21BRFUvbHNvZzBnQnlGK0kyOUtCbEptcVpoMEpIRnVLUk9RWkNGdks1bXV0ZTJjNFhaV3U2Ky8weHhINnlUK1Z3LzlpclpJZi9xTmtrQWMrTXlpV3ZVbkdjdmxsb2VNQjZHZWt1WEJnU0FLakd1WGRKb1ZMQ00xajFNSU96NzZ6d0FKQnduUEFKRjFoNU5IcC8xRklndGJkYll3d0FzVVBPMVFOQy8vczB4QWNBQnF4TlRhRGd3M0VCRGFja0Y1aCtlcUhWUXVlZG5Gb0d1UUJGYkczT1lYb2RSYnFlMVRPV1d3UUhCY1JrMUN6eUJ4cWJ2Ly85TTJNOVhTbUJFNzFEUnlraFR3d1NRTm8vVmdBZmdLQTZKaEp3ajRLdEMxR3I5c3dEQzdQTVpzTnN4cnRrT3p3WmYvZEdJR0ZpZ1lPR0U2T1hpWC8vOFJVQWdrZ0J6OHJscTI3VERXcXhkellQWTRDUi8vczB4QW1DQjdTQkpzeWtjSUN6akNSSW5BMlFESGVQdG94YlVRQmdaQ0J4M2xBTkFDQXFTU0lWRVc5Myt4eVdsN05HYzE4RWRXWkF3b1pYMXQvOGdNTEFmM1VGVDBnMGhNS2tNeVZORXhMTmoxVnpOOWtnUU9WYnpEbC9uWTBwbWUwYk1NS1VYcWZyMmYxZWhZQWtvay9BZG9reVMxVldLRlVoRGlCdVU0a29ha0ZTTGdyRXE3MU4wSG5yZGtmVS8vczB4QkdBQlV3NUlPR2w2bENBaHVXMmdtQUcrMVAzLy8rN3hQQ2t5aVNrbzIyd0VkdWMzWnFGRnYrMGtTRExwcjZLSGRXc3IvenJmLzArdFJ3ZUFBSWhZTkJtUTFVcXVBQU9QRGp3SC8xbkhoUlA0alBaWGsrRmkvd3lFN09PZW9mVk42L2lCS3krT29ZMWdIMERmRG9PSC9YLy8vL1BKa2FHT2N6N1g2YU9qcjVLNHdCQUI0QXdBZ1VoRGRKQy8vczB4Q21BQ1BDVlViZ1hzRkZobzZTN0F0QUJEQUMvSmVSc1dZdDZTa3V5cFVYVUZVdWlKNkJrZ1hvY3AxcDNYV2pFYUhNU1JMSTlkdXRITnV2NkRHaGM5SkhyVGRrSFl3TkNnY0dFSUJUU25CeEUwMUp4aW1nZzM2a0ZseHZsMWhRQUFBQVlleUFGQWYvbmNSQTBEV1dCcnhGLy8vL2dyK3R4MVV4QlRVVXpMams1TGpWVlZWVlZWVlZWVlZWVi8vczB4QmNEd3hRQkRid0JBQkFDQUVBQUVBQUVWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVic7XHJcbmNvbnN0IHNvdW5kQnl0ZUFycmF5ID0gYmFzZTY0U291bmRUb0J5dGVBcnJheSggcGhldEF1ZGlvQ29udGV4dCwgc291bmRVUkkgKTtcclxuY29uc3QgdW5sb2NrID0gYXN5bmNMb2FkZXIuY3JlYXRlTG9jayggc291bmRVUkkgKTtcclxuY29uc3Qgd3JhcHBlZEF1ZGlvQnVmZmVyID0gbmV3IFdyYXBwZWRBdWRpb0J1ZmZlcigpO1xyXG5cclxuLy8gc2FmZSB3YXkgdG8gdW5sb2NrXHJcbmxldCB1bmxvY2tlZCA9IGZhbHNlO1xyXG5jb25zdCBzYWZlVW5sb2NrID0gKCkgPT4ge1xyXG4gIGlmICggIXVubG9ja2VkICkge1xyXG4gICAgdW5sb2NrKCk7XHJcbiAgICB1bmxvY2tlZCA9IHRydWU7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3Qgb25EZWNvZGVTdWNjZXNzID0gZGVjb2RlZEF1ZGlvID0+IHtcclxuICBpZiAoIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnZhbHVlID09PSBudWxsICkge1xyXG4gICAgd3JhcHBlZEF1ZGlvQnVmZmVyLmF1ZGlvQnVmZmVyUHJvcGVydHkuc2V0KCBkZWNvZGVkQXVkaW8gKTtcclxuICAgIHNhZmVVbmxvY2soKTtcclxuICB9XHJcbn07XHJcbmNvbnN0IG9uRGVjb2RlRXJyb3IgPSBkZWNvZGVFcnJvciA9PiB7XHJcbiAgY29uc29sZS53YXJuKCAnZGVjb2RlIG9mIGF1ZGlvIGRhdGEgZmFpbGVkLCB1c2luZyBzdHViYmVkIHNvdW5kLCBlcnJvcjogJyArIGRlY29kZUVycm9yICk7XHJcbiAgd3JhcHBlZEF1ZGlvQnVmZmVyLmF1ZGlvQnVmZmVyUHJvcGVydHkuc2V0KCBwaGV0QXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlciggMSwgMSwgcGhldEF1ZGlvQ29udGV4dC5zYW1wbGVSYXRlICkgKTtcclxuICBzYWZlVW5sb2NrKCk7XHJcbn07XHJcbmNvbnN0IGRlY29kZVByb21pc2UgPSBwaGV0QXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YSggc291bmRCeXRlQXJyYXkuYnVmZmVyLCBvbkRlY29kZVN1Y2Nlc3MsIG9uRGVjb2RlRXJyb3IgKTtcclxuaWYgKCBkZWNvZGVQcm9taXNlICkge1xyXG4gIGRlY29kZVByb21pc2VcclxuICAgIC50aGVuKCBkZWNvZGVkQXVkaW8gPT4ge1xyXG4gICAgICBpZiAoIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnZhbHVlID09PSBudWxsICkge1xyXG4gICAgICAgIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnNldCggZGVjb2RlZEF1ZGlvICk7XHJcbiAgICAgICAgc2FmZVVubG9jaygpO1xyXG4gICAgICB9XHJcbiAgICB9IClcclxuICAgIC5jYXRjaCggZSA9PiB7XHJcbiAgICAgIGNvbnNvbGUud2FybiggJ3Byb21pc2UgcmVqZWN0aW9uIGNhdWdodCBmb3IgYXVkaW8gZGVjb2RlLCBlcnJvciA9ICcgKyBlICk7XHJcbiAgICAgIHNhZmVVbmxvY2soKTtcclxuICAgIH0gKTtcclxufVxyXG5leHBvcnQgZGVmYXVsdCB3cmFwcGVkQXVkaW9CdWZmZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE9BQU9BLFdBQVcsTUFBTSxtQ0FBbUM7QUFDM0QsT0FBT0Msc0JBQXNCLE1BQU0sMENBQTBDO0FBQzdFLE9BQU9DLGtCQUFrQixNQUFNLHNDQUFzQztBQUNyRSxPQUFPQyxnQkFBZ0IsTUFBTSxvQ0FBb0M7QUFFakUsTUFBTUMsUUFBUSxHQUFHLHk1REFBeTVEO0FBQzE2RCxNQUFNQyxjQUFjLEdBQUdKLHNCQUFzQixDQUFFRSxnQkFBZ0IsRUFBRUMsUUFBUyxDQUFDO0FBQzNFLE1BQU1FLE1BQU0sR0FBR04sV0FBVyxDQUFDTyxVQUFVLENBQUVILFFBQVMsQ0FBQztBQUNqRCxNQUFNSSxrQkFBa0IsR0FBRyxJQUFJTixrQkFBa0IsQ0FBQyxDQUFDOztBQUVuRDtBQUNBLElBQUlPLFFBQVEsR0FBRyxLQUFLO0FBQ3BCLE1BQU1DLFVBQVUsR0FBR0EsQ0FBQSxLQUFNO0VBQ3ZCLElBQUssQ0FBQ0QsUUFBUSxFQUFHO0lBQ2ZILE1BQU0sQ0FBQyxDQUFDO0lBQ1JHLFFBQVEsR0FBRyxJQUFJO0VBQ2pCO0FBQ0YsQ0FBQztBQUVELE1BQU1FLGVBQWUsR0FBR0MsWUFBWSxJQUFJO0VBQ3RDLElBQUtKLGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0MsS0FBSyxLQUFLLElBQUksRUFBRztJQUMzRE4sa0JBQWtCLENBQUNLLG1CQUFtQixDQUFDRSxHQUFHLENBQUVILFlBQWEsQ0FBQztJQUMxREYsVUFBVSxDQUFDLENBQUM7RUFDZDtBQUNGLENBQUM7QUFDRCxNQUFNTSxhQUFhLEdBQUdDLFdBQVcsSUFBSTtFQUNuQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUUsMkRBQTJELEdBQUdGLFdBQVksQ0FBQztFQUN6RlQsa0JBQWtCLENBQUNLLG1CQUFtQixDQUFDRSxHQUFHLENBQUVaLGdCQUFnQixDQUFDaUIsWUFBWSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVqQixnQkFBZ0IsQ0FBQ2tCLFVBQVcsQ0FBRSxDQUFDO0VBQ2hIWCxVQUFVLENBQUMsQ0FBQztBQUNkLENBQUM7QUFDRCxNQUFNWSxhQUFhLEdBQUduQixnQkFBZ0IsQ0FBQ29CLGVBQWUsQ0FBRWxCLGNBQWMsQ0FBQ21CLE1BQU0sRUFBRWIsZUFBZSxFQUFFSyxhQUFjLENBQUM7QUFDL0csSUFBS00sYUFBYSxFQUFHO0VBQ25CQSxhQUFhLENBQ1ZHLElBQUksQ0FBRWIsWUFBWSxJQUFJO0lBQ3JCLElBQUtKLGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0MsS0FBSyxLQUFLLElBQUksRUFBRztNQUMzRE4sa0JBQWtCLENBQUNLLG1CQUFtQixDQUFDRSxHQUFHLENBQUVILFlBQWEsQ0FBQztNQUMxREYsVUFBVSxDQUFDLENBQUM7SUFDZDtFQUNGLENBQUUsQ0FBQyxDQUNGZ0IsS0FBSyxDQUFFQyxDQUFDLElBQUk7SUFDWFQsT0FBTyxDQUFDQyxJQUFJLENBQUUscURBQXFELEdBQUdRLENBQUUsQ0FBQztJQUN6RWpCLFVBQVUsQ0FBQyxDQUFDO0VBQ2QsQ0FBRSxDQUFDO0FBQ1A7QUFDQSxlQUFlRixrQkFBa0IifQ==