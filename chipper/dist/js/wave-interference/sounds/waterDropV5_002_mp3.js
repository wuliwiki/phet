/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';
const soundURI = 'data:audio/mpeg;base64,//s0xAAABPgpA1SRADEro+y3HnADAAAJopUMBGjnOc50QAmG3qIMXboDA3kNxz1O4neD7+f/OFHf//6wQcMgFAhEAqFIhAYCAIAztARk4RukdsK8f4Xn6GKAOiuLUAMC/Yg4lixeQIQnEgd/IGSpM0buP/q78m7oY//+NNf///nnz///8wwmstAFrFbAMGch//s0xAQAB3w9aTzzADD/iCnpl5ic07aGoAzCHD1E5OlQstHyuZnxFiSW//XYUDQdxFBU7gqCoNVgrMYdDRUNO6wVez/+sFXYK+AftY47GBUtQI7rVDdwEBXznQtQq4/ZnxoACiMt1mTRH4yZR8FUAINGTg9YZLACVDpsOmnnfukcRcjJcl1uCTqwB2Wyy22g//s0xAOAB3SPX6ekSvD7D2f1tJlMAMqORA6oInZ4RmIxXw8lgskqFQ+IzJtCe7R2CiotWKNQCJLCtypFDqz/ZQaBWpDocp5nRGhgAxRNzVwAC9xyWrQ+YhGlDz1SG22jwSaA4LFUBY0KlGrmXznlb6OxXn65hpZq0ei+/tMG9TSTrh0blnizcfUMAFzSvXVg//s0xAOAR4yDP62kaWDmk6Ylsw2kAczeR9IUIhk5AaQsb6UjCILkAaRqmkDLt7GMvl2M9jZHpHKpKhEDJWFBVZjqx3EoXDaSxv1iENv31nKMs4QbBQabzNiUw46lrGmRQuxQhVAwBfN2SJmoc4Jmm89JeshhargnPWGvWTJSBD+k9W6JWa2NPxb4oCDAIvOv//s0xAYDR/hZHg5gxoD9D6QFtg2Ydc0gLzVJQkZMJFh+U2aFaMJBXDmSKxis3zUd9bX3oqYJSotaUUSWAUkYxpUQD3NZ//J/os+U3EcmUmBhZpoqetVnnlJhYmlEvVhEmnikXSMLh0MzArsIZ8oWNtIxDlYZ/KyBS15CWkTPimkHunn6Nn//6gAAZJtfAAVt//s0xAQAR6xFNYRsReDtDadkfJi+LANdBmwjPkeAaAqxrmQ0aKmurCpkxhBcSFR7LOwnDD00wYqBIKDgBMxfzuxxEBRgsUB38jLhIX8/HqAJDy5i4wGBSeTXGgn2eZc0LkLEJYhLEoTsfOdIRkqqOJC5XC5df//1hZBfcKBRQs4TCWFNETJwOiAai0uFAq1B//s0xAUABixDJiVh5NCvBud0FLCedQOECVDWkUS1MhiiNS+fwYS+S05UwpCXN7yLK3Kg1dTema/////zzhSbTUbYdBAWUtKqnQFBlng6JIDS2H+mLg4lmWmASHkQVO5Civ+nF/1f//TVljcckslrAACx1syWAY/lhUEolNpPlULcrrp1mH09JAAAEACFALK2//s0xBOAA8wpQ6CZhPClHSLoEwh2Y4fZGmPZLToOpRGX0ZmbRf/1Zf/0dP+T////6v8Ad/EStlbjkkssDYDmqLKfOgGKkLes8tT2/rtkU///2/6drcNbNbdbGA4kCrhlQFlWHYvdzzaVnZbW49v9/9/5KK/katuOBtttQBIARJAzZ1HZUBC7j3bYd/////5b//s0xC0AA7ABMaCERzCHACR0EIzm/JAKTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//s0xEqBw3QBC6CEQDAEgEAAYAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';
const soundByteArray = base64SoundToByteArray(phetAudioContext, soundURI);
const unlock = asyncLoader.createLock(soundURI);
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if (!unlocked) {
    unlock();
    unlocked = true;
  }
};
const onDecodeSuccess = decodedAudio => {
  if (wrappedAudioBuffer.audioBufferProperty.value === null) {
    wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn('decode of audio data failed, using stubbed sound, error: ' + decodeError);
  wrappedAudioBuffer.audioBufferProperty.set(phetAudioContext.createBuffer(1, 1, phetAudioContext.sampleRate));
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData(soundByteArray.buffer, onDecodeSuccess, onDecodeError);
if (decodePromise) {
  decodePromise.then(decodedAudio => {
    if (wrappedAudioBuffer.audioBufferProperty.value === null) {
      wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
      safeUnlock();
    }
  }).catch(e => {
    console.warn('promise rejection caught for audio decode, error = ' + e);
    safeUnlock();
  });
}
export default wrappedAudioBuffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3luY0xvYWRlciIsImJhc2U2NFNvdW5kVG9CeXRlQXJyYXkiLCJXcmFwcGVkQXVkaW9CdWZmZXIiLCJwaGV0QXVkaW9Db250ZXh0Iiwic291bmRVUkkiLCJzb3VuZEJ5dGVBcnJheSIsInVubG9jayIsImNyZWF0ZUxvY2siLCJ3cmFwcGVkQXVkaW9CdWZmZXIiLCJ1bmxvY2tlZCIsInNhZmVVbmxvY2siLCJvbkRlY29kZVN1Y2Nlc3MiLCJkZWNvZGVkQXVkaW8iLCJhdWRpb0J1ZmZlclByb3BlcnR5IiwidmFsdWUiLCJzZXQiLCJvbkRlY29kZUVycm9yIiwiZGVjb2RlRXJyb3IiLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZUJ1ZmZlciIsInNhbXBsZVJhdGUiLCJkZWNvZGVQcm9taXNlIiwiZGVjb2RlQXVkaW9EYXRhIiwiYnVmZmVyIiwidGhlbiIsImNhdGNoIiwiZSJdLCJzb3VyY2VzIjpbIndhdGVyRHJvcFY1XzAwMl9tcDMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cclxuaW1wb3J0IGFzeW5jTG9hZGVyIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9hc3luY0xvYWRlci5qcyc7XHJcbmltcG9ydCBiYXNlNjRTb3VuZFRvQnl0ZUFycmF5IGZyb20gJy4uLy4uL3RhbWJvL2pzL2Jhc2U2NFNvdW5kVG9CeXRlQXJyYXkuanMnO1xyXG5pbXBvcnQgV3JhcHBlZEF1ZGlvQnVmZmVyIGZyb20gJy4uLy4uL3RhbWJvL2pzL1dyYXBwZWRBdWRpb0J1ZmZlci5qcyc7XHJcbmltcG9ydCBwaGV0QXVkaW9Db250ZXh0IGZyb20gJy4uLy4uL3RhbWJvL2pzL3BoZXRBdWRpb0NvbnRleHQuanMnO1xyXG5cclxuY29uc3Qgc291bmRVUkkgPSAnZGF0YTphdWRpby9tcGVnO2Jhc2U2NCwvL3MweEFBQUJQZ3BBMVNSQURFcm8reTNIbkFEQUFBSm9wVU1CR2puT2M1MFFBbUczcUlNWGJvREEza054ejFPNG5lRDcrZi9PRkhmLy82d1FjTWdGQWhFQXFGSWhBWUNBSUF6dEFSazRSdWtkc0s4ZjRYbjZHS0FPaXVMVUFNQy9ZZzRsaXhlUUlRbkVnZC9JR1NwTTBidVAvcTc4bTdvWS8vK05OZi8vL25uei8vLzh3d21zdEFGckZiQU1HY2gvL3MweEFRQUIzdzlhVHp6QUREL2lDbnBsNWljMDdhR29BekNIRDFFNU9sUXN0SHl1Wm54RmlTVy8vWFlVRFFkeEZCVTdncUNvTlZnck1ZZERSVU5PNndWZXovK3NGWFlLK0FmdFk0N0dCVXRRSTdyVkRkd0VCWHpuUXRRcTQvWm54b0FDaU10MW1UUkg0eVpSOEZVQUlOR1RnOVlaTEFDVkRwc09tbm5mdWtjUmNqSmNsMXVDVHF3QjJXeXkyMmcvL3MweEFPQUIzU1BYNmVrU3ZEN0QyZjF0SmxNQU1xT1JBNm9Jblo0Um1JeFh3OGxnc2txRlErSXpKdENlN1IyQ2lvdFdLTlFDSkxDdHlwRkRxei9aUWFCV3BEb2NwNW5SR2hnQXhSTnpWd0FDOXh5V3JRK1loR2xEejFTRzIyandTYUE0TEZVQlkwS2xHcm1Yem5sYjZPeFhuNjVocFpxMGVpKy90TUc5VFNUcmgwYmxuaXpjZlVNQUZ6U3ZYVmcvL3MweEFPQVI0eURQNjJrYVdEbWs2WWxzdzJrQWN6ZVI5SVVJaGs1QWFRc2I2VWpDSUxrQWFScW1rREx0N0dNdmwyTTlqWkhwSEtwS2hFREpXRkJWWmpxeDNFb1hEYVN4djFpRU52MzFuS01zNFFiQlFhYnpOaVV3NDZsckdtUlF1eFFoVkF3QmZOMlNKbW9jNEptbTg5SmVzaGhhcmduUFdHdldUSlNCRCtrOVc2SldhMk5QeGI0b0NEQUl2T3YvL3MweEFZRFIvaFpIZzVneG9EOUQ2UUZ0ZzJZZGMwZ0x6VkpRa1pNSkZoK1UyYUZhTUpCWERtU0t4aXMzelVkOWJYM29xWUpTb3RhVVVTV0FVa1l4cFVRRDNOWi8vSi9vcytVM0VjbVVtQmhacG9xZXRWbm5sSmhZbWxFdlZoRW1uaWtYU01MaDBNekFyc0laOG9XTnRJeERsWVovS3lCUzE1Q1drVFBpbWtIdW5uNk5uLy82Z0FBWkp0ZkFBVnQvL3MweEFRQVI2eEZOWVJzUmVEdERhZGtmSmkrTEFOZEJtd2pQa2VBYUFxeHJtUTBhS211ckNwa3hoQmNTRlI3TE93bkREMDB3WXFCSUtEZ0JNeGZ6dXh4RUJSZ3NVQjM4akxoSVg4L0hxQUpEeTVpNHdHQlNlVFhHZ24yZVpjMExrTEVKWWhMRW9Uc2ZPZElSa3FxT0pDNVhDNWRmLy8xaFpCZmNLQlJRczRUQ1dGTkVUSndPaUFhaTB1RkFxMUIvL3MweEFVQUJpeERKaVZoNU5DdkJ1ZDBGTENlZFFPRUNWRFdrVVMxTWhpaU5TK2Z3WVMrUzA1VXdwQ1hON3lMSzNLZzFkVGVtYS8vLy8venpoU2JUVWJZZEJBV1V0S3FuUUZCbG5nNkpJRFMySCttTGc0bG1XbUFTSGtRVk81Q2l2K25GLzFmLy9UVmxqY2Nrc2xyQUFDeDFzeVdBWS9saFVFb2xOcFBsVUxjcnJwMW1IMDlKQUFBRUFDRkFMSzIvL3MweEJPQUE4d3BRNkNaaFBDbEhTTG9Fd2gyWTRmWkdtUFpMVG9PcFJHWDBabWJSZi8xWmYvMGRQK1QvLy8vNnY4QWQvRVN0bGJqa2tzc0RZRG1xTEtmT2dHS2tMZXM4dFQyL3J0a1UvLy8yLzZkcmNOYk5iZGJHQTRrQ3JobFFGbFdIWXZkenphVm5aYlc0OXY5LzkvNUtLL2thdHVPQnR0dFFCSUFSSkF6WjFIWlVCQzdqM2JZZC8vLy8vNWIvL3MweEMwQUE3QUJNYUNFUnpDSEFDUjBFSXptL0pBS1RFRk5SVE11T1RrdU5hcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXEvL3MweEVxQnczUUJDNkNFUURBRWdFQUFZQUFFcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXEnO1xyXG5jb25zdCBzb3VuZEJ5dGVBcnJheSA9IGJhc2U2NFNvdW5kVG9CeXRlQXJyYXkoIHBoZXRBdWRpb0NvbnRleHQsIHNvdW5kVVJJICk7XHJcbmNvbnN0IHVubG9jayA9IGFzeW5jTG9hZGVyLmNyZWF0ZUxvY2soIHNvdW5kVVJJICk7XHJcbmNvbnN0IHdyYXBwZWRBdWRpb0J1ZmZlciA9IG5ldyBXcmFwcGVkQXVkaW9CdWZmZXIoKTtcclxuXHJcbi8vIHNhZmUgd2F5IHRvIHVubG9ja1xyXG5sZXQgdW5sb2NrZWQgPSBmYWxzZTtcclxuY29uc3Qgc2FmZVVubG9jayA9ICgpID0+IHtcclxuICBpZiAoICF1bmxvY2tlZCApIHtcclxuICAgIHVubG9jaygpO1xyXG4gICAgdW5sb2NrZWQgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IG9uRGVjb2RlU3VjY2VzcyA9IGRlY29kZWRBdWRpbyA9PiB7XHJcbiAgaWYgKCB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS52YWx1ZSA9PT0gbnVsbCApIHtcclxuICAgIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnNldCggZGVjb2RlZEF1ZGlvICk7XHJcbiAgICBzYWZlVW5sb2NrKCk7XHJcbiAgfVxyXG59O1xyXG5jb25zdCBvbkRlY29kZUVycm9yID0gZGVjb2RlRXJyb3IgPT4ge1xyXG4gIGNvbnNvbGUud2FybiggJ2RlY29kZSBvZiBhdWRpbyBkYXRhIGZhaWxlZCwgdXNpbmcgc3R1YmJlZCBzb3VuZCwgZXJyb3I6ICcgKyBkZWNvZGVFcnJvciApO1xyXG4gIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnNldCggcGhldEF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoIDEsIDEsIHBoZXRBdWRpb0NvbnRleHQuc2FtcGxlUmF0ZSApICk7XHJcbiAgc2FmZVVubG9jaygpO1xyXG59O1xyXG5jb25zdCBkZWNvZGVQcm9taXNlID0gcGhldEF1ZGlvQ29udGV4dC5kZWNvZGVBdWRpb0RhdGEoIHNvdW5kQnl0ZUFycmF5LmJ1ZmZlciwgb25EZWNvZGVTdWNjZXNzLCBvbkRlY29kZUVycm9yICk7XHJcbmlmICggZGVjb2RlUHJvbWlzZSApIHtcclxuICBkZWNvZGVQcm9taXNlXHJcbiAgICAudGhlbiggZGVjb2RlZEF1ZGlvID0+IHtcclxuICAgICAgaWYgKCB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS52YWx1ZSA9PT0gbnVsbCApIHtcclxuICAgICAgICB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS5zZXQoIGRlY29kZWRBdWRpbyApO1xyXG4gICAgICAgIHNhZmVVbmxvY2soKTtcclxuICAgICAgfVxyXG4gICAgfSApXHJcbiAgICAuY2F0Y2goIGUgPT4ge1xyXG4gICAgICBjb25zb2xlLndhcm4oICdwcm9taXNlIHJlamVjdGlvbiBjYXVnaHQgZm9yIGF1ZGlvIGRlY29kZSwgZXJyb3IgPSAnICsgZSApO1xyXG4gICAgICBzYWZlVW5sb2NrKCk7XHJcbiAgICB9ICk7XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgd3JhcHBlZEF1ZGlvQnVmZmVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxPQUFPQSxXQUFXLE1BQU0sbUNBQW1DO0FBQzNELE9BQU9DLHNCQUFzQixNQUFNLDBDQUEwQztBQUM3RSxPQUFPQyxrQkFBa0IsTUFBTSxzQ0FBc0M7QUFDckUsT0FBT0MsZ0JBQWdCLE1BQU0sb0NBQW9DO0FBRWpFLE1BQU1DLFFBQVEsR0FBRyx5NURBQXk1RDtBQUMxNkQsTUFBTUMsY0FBYyxHQUFHSixzQkFBc0IsQ0FBRUUsZ0JBQWdCLEVBQUVDLFFBQVMsQ0FBQztBQUMzRSxNQUFNRSxNQUFNLEdBQUdOLFdBQVcsQ0FBQ08sVUFBVSxDQUFFSCxRQUFTLENBQUM7QUFDakQsTUFBTUksa0JBQWtCLEdBQUcsSUFBSU4sa0JBQWtCLENBQUMsQ0FBQzs7QUFFbkQ7QUFDQSxJQUFJTyxRQUFRLEdBQUcsS0FBSztBQUNwQixNQUFNQyxVQUFVLEdBQUdBLENBQUEsS0FBTTtFQUN2QixJQUFLLENBQUNELFFBQVEsRUFBRztJQUNmSCxNQUFNLENBQUMsQ0FBQztJQUNSRyxRQUFRLEdBQUcsSUFBSTtFQUNqQjtBQUNGLENBQUM7QUFFRCxNQUFNRSxlQUFlLEdBQUdDLFlBQVksSUFBSTtFQUN0QyxJQUFLSixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNDLEtBQUssS0FBSyxJQUFJLEVBQUc7SUFDM0ROLGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFSCxZQUFhLENBQUM7SUFDMURGLFVBQVUsQ0FBQyxDQUFDO0VBQ2Q7QUFDRixDQUFDO0FBQ0QsTUFBTU0sYUFBYSxHQUFHQyxXQUFXLElBQUk7RUFDbkNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLDJEQUEyRCxHQUFHRixXQUFZLENBQUM7RUFDekZULGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFWixnQkFBZ0IsQ0FBQ2lCLFlBQVksQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFakIsZ0JBQWdCLENBQUNrQixVQUFXLENBQUUsQ0FBQztFQUNoSFgsVUFBVSxDQUFDLENBQUM7QUFDZCxDQUFDO0FBQ0QsTUFBTVksYUFBYSxHQUFHbkIsZ0JBQWdCLENBQUNvQixlQUFlLENBQUVsQixjQUFjLENBQUNtQixNQUFNLEVBQUViLGVBQWUsRUFBRUssYUFBYyxDQUFDO0FBQy9HLElBQUtNLGFBQWEsRUFBRztFQUNuQkEsYUFBYSxDQUNWRyxJQUFJLENBQUViLFlBQVksSUFBSTtJQUNyQixJQUFLSixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNDLEtBQUssS0FBSyxJQUFJLEVBQUc7TUFDM0ROLGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFSCxZQUFhLENBQUM7TUFDMURGLFVBQVUsQ0FBQyxDQUFDO0lBQ2Q7RUFDRixDQUFFLENBQUMsQ0FDRmdCLEtBQUssQ0FBRUMsQ0FBQyxJQUFJO0lBQ1hULE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLHFEQUFxRCxHQUFHUSxDQUFFLENBQUM7SUFDekVqQixVQUFVLENBQUMsQ0FBQztFQUNkLENBQUUsQ0FBQztBQUNQO0FBQ0EsZUFBZUYsa0JBQWtCIn0=