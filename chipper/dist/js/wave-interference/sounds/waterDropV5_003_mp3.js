/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';
const soundURI = 'data:audio/mpeg;base64,//s0xAAABPgpA1SRADEro+y3HnADAAAJopUMBGjnOc50QAmG3qIMXboDA3kNxz1O4neD7+f/OFHf//6wQcMgFAhEAqFIhAYCAIAztARk4RukdsK8f4Xn6GKAOiuLUAMC/Yg4lixeQIQnEgd/IGSpM0buP/q78m7oY//+NNf///nnz///8wwmstAFrFbAMGch//s0xAQAB3w9aTzzADD/iCnpl5ic07aGoAzCHD1E5OlQstHyuZnxFiSW//XYUDQdxFBU7gqCoNVgrMYdDRUNO6wVez/+sFXYK+AftY47GBUtQI7rVDdwEBXznQtQq4/ZnxoACiMt1mTRH4yZR8FUAINGTg9YZLACVDpsOmnnfukcRcjJcl1uCTqAJt1JLQAJ//s0xAOAR7iPQ00kauDsj2h1pg0cbFo42yJoF3grAmFGlu0zfLBZKJCdEZk2hPdpyCisW5KNwCTVQpfrMULqnz8qDgVeMHY5TzOiNEABrrk115xyWoxsw2kis+zTYuTEZ4TiUcrIVJ8olnVaWHBNsGEjMJzoS2nYX/FQLjHyRi4ckblnizcfAAJWqwAvV2oO//s0xASAR8iDLy1wZQjvE+Xlsw2kQnmZLmfMNgGLA8HlVWjNefeGH6jcpgYAVDoBRLMYgx8MwEV1OWEqF1VZgpRjJYdAdd8WJyXEAWaWZ3KUrEQbHhk8XVEnlqTuqHKpQuxMhVHAFH1ppEzxlDUWb/pV6xGFKnD+sducyUgQ//5TonAifWpViu3b7ayNgIz0//s0xAUAB7hZU6C8wTDdDOn08ZmuVa4LuBqwCcHQpFSs3NrRhJfcyQowpANtIpK++loh2NC4ICVirUKasAlwywJNQxemwq7/pUgM1l2usEgGu9hK0uSfBSiN6Qs8TCVqm2Sf3ooSCrAEGHCWCz+cYvAsjyiC7x2EMiWW3/d/9upuISS222ONgLJtXCRn4Q4s//s0xAgABoxPSaC8wXDUjedkF4xmmQHtIsSRIexd4r5rEGfM1AZLdPkDjBMIVHLlY/ZK3fTnf/ktQ2Nf/7+CkdS4jJBuiTACUCcHwNRz0syLAnBjAXGVQgpdAZzXk/BHxgYCDsZfz3lP2f/Janl1ALJLbkkjggC+NCMkKohoALgIpXPIpRbg0kKICpotFsP9//s0xBCARRghM6Cx4uC6kGUk8JocnN/s7f///nQACRaTX+fiFJo5U7Z8qi3APIgR0KOfG5+/4cv/Nu75AzYQQcHC6IJpqBD////9Sq5ADX/+6vnyITmkWTsV8A3AD59F7WlGKFVlB2prd1dDaPW2uwe08dHZKJ2MiCHpCA9Gueaet0wDCAAQSiSxwFOZVpqg//s0xCIABuSFJEeVkMDEBuS0E2DKFLpKwFMVyCsqcTuv7Z5Vq2fvJUhQ8S1gqCoLPNh3JfiL///0VS5QGTaVYA3ZHk7AhYeeIrt2e2pWIn7vskZ7+qpUpN1IASxSJawEH0yOGvln1bqn1+eX/pLf/X1Kutkjd211AADHFSLXWjyVEc/cz6auSYgEakxBTUUz//s0xCsBA2glJUCASjBwgGHoAIgGLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//s0xEyBwuABCaCEQDAFAEAAkAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';
const soundByteArray = base64SoundToByteArray(phetAudioContext, soundURI);
const unlock = asyncLoader.createLock(soundURI);
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if (!unlocked) {
    unlock();
    unlocked = true;
  }
};
const onDecodeSuccess = decodedAudio => {
  if (wrappedAudioBuffer.audioBufferProperty.value === null) {
    wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn('decode of audio data failed, using stubbed sound, error: ' + decodeError);
  wrappedAudioBuffer.audioBufferProperty.set(phetAudioContext.createBuffer(1, 1, phetAudioContext.sampleRate));
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData(soundByteArray.buffer, onDecodeSuccess, onDecodeError);
if (decodePromise) {
  decodePromise.then(decodedAudio => {
    if (wrappedAudioBuffer.audioBufferProperty.value === null) {
      wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
      safeUnlock();
    }
  }).catch(e => {
    console.warn('promise rejection caught for audio decode, error = ' + e);
    safeUnlock();
  });
}
export default wrappedAudioBuffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3luY0xvYWRlciIsImJhc2U2NFNvdW5kVG9CeXRlQXJyYXkiLCJXcmFwcGVkQXVkaW9CdWZmZXIiLCJwaGV0QXVkaW9Db250ZXh0Iiwic291bmRVUkkiLCJzb3VuZEJ5dGVBcnJheSIsInVubG9jayIsImNyZWF0ZUxvY2siLCJ3cmFwcGVkQXVkaW9CdWZmZXIiLCJ1bmxvY2tlZCIsInNhZmVVbmxvY2siLCJvbkRlY29kZVN1Y2Nlc3MiLCJkZWNvZGVkQXVkaW8iLCJhdWRpb0J1ZmZlclByb3BlcnR5IiwidmFsdWUiLCJzZXQiLCJvbkRlY29kZUVycm9yIiwiZGVjb2RlRXJyb3IiLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZUJ1ZmZlciIsInNhbXBsZVJhdGUiLCJkZWNvZGVQcm9taXNlIiwiZGVjb2RlQXVkaW9EYXRhIiwiYnVmZmVyIiwidGhlbiIsImNhdGNoIiwiZSJdLCJzb3VyY2VzIjpbIndhdGVyRHJvcFY1XzAwM19tcDMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cclxuaW1wb3J0IGFzeW5jTG9hZGVyIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9hc3luY0xvYWRlci5qcyc7XHJcbmltcG9ydCBiYXNlNjRTb3VuZFRvQnl0ZUFycmF5IGZyb20gJy4uLy4uL3RhbWJvL2pzL2Jhc2U2NFNvdW5kVG9CeXRlQXJyYXkuanMnO1xyXG5pbXBvcnQgV3JhcHBlZEF1ZGlvQnVmZmVyIGZyb20gJy4uLy4uL3RhbWJvL2pzL1dyYXBwZWRBdWRpb0J1ZmZlci5qcyc7XHJcbmltcG9ydCBwaGV0QXVkaW9Db250ZXh0IGZyb20gJy4uLy4uL3RhbWJvL2pzL3BoZXRBdWRpb0NvbnRleHQuanMnO1xyXG5cclxuY29uc3Qgc291bmRVUkkgPSAnZGF0YTphdWRpby9tcGVnO2Jhc2U2NCwvL3MweEFBQUJQZ3BBMVNSQURFcm8reTNIbkFEQUFBSm9wVU1CR2puT2M1MFFBbUczcUlNWGJvREEza054ejFPNG5lRDcrZi9PRkhmLy82d1FjTWdGQWhFQXFGSWhBWUNBSUF6dEFSazRSdWtkc0s4ZjRYbjZHS0FPaXVMVUFNQy9ZZzRsaXhlUUlRbkVnZC9JR1NwTTBidVAvcTc4bTdvWS8vK05OZi8vL25uei8vLzh3d21zdEFGckZiQU1HY2gvL3MweEFRQUIzdzlhVHp6QUREL2lDbnBsNWljMDdhR29BekNIRDFFNU9sUXN0SHl1Wm54RmlTVy8vWFlVRFFkeEZCVTdncUNvTlZnck1ZZERSVU5PNndWZXovK3NGWFlLK0FmdFk0N0dCVXRRSTdyVkRkd0VCWHpuUXRRcTQvWm54b0FDaU10MW1UUkg0eVpSOEZVQUlOR1RnOVlaTEFDVkRwc09tbm5mdWtjUmNqSmNsMXVDVHFBSnQxSkxRQUovL3MweEFPQVI3aVBRMDBrYXVEc2oyaDFwZzBjYkZvNDJ5Sm9GM2dyQW1GR2x1MHpmTEJaS0pDZEVaazJoUGRweUNpc1c1S053Q1RWUXBmck1VTHFuejhxRGdWZU1IWTVUek9pTkVBQnJyazExNXh5V294c3cya2lzK3pUWXVURVo0VGlVY3JJVko4b2xuVmFXSEJOc0dFak1Kem9TMm5ZWC9GUUxqSHlSaTRja2Jsbml6Y2ZBQUpXcXdBdlYyb08vL3MweEFTQVI4aURMeTF3WlFqdkUrWGxzdzJrUW5tWkxtZk1OZ0dMQThIbFZXak5lZmVHSDZqY3BnWUFWRG9CUkxNWWd4OE13RVYxT1dFcUYxVlpncFJqSllkQWRkOFdKeVhFQVdhV1ozS1VyRVFiSGhrOFhWRW5scVR1cUhLcFF1eE1oVkhBRkgxcHBFenhsRFVXYi9wVjZ4R0ZLbkQrc2R1Y3lVZ1EvLzVUb25BaWZXcFZpdTNiN2F5TmdJejAvL3MweEFVQUI3aFpVNkM4d1REZERPbjA4Wm11VmE0THVCcXdDY0hRcEZTczNOclJoSmZjeVFvd3BBTnRJcEsrK2xvaDJOQzRJQ1ZpclVLYXNBbHd5d0pOUXhlbXdxNy9wVWdNMWwydXNFZ0d1OWhLMHVTZkJTaU42UXM4VENWcW0yU2Yzb29TQ3JBRUdIQ1dDeitjWXZBc2p5aUM3eDJFTWlXVzMvZC85dXB1SVNTMjIyT05nTEp0WENSbjRRNHMvL3MweEFnQUJveFBTYUM4d1hEVWplZGtGNHhtbVFIdElzU1JJZXhkNHI1ckVHZk0xQVpMZFBrRGpCTUlWSExsWS9aSzNmVG5mL2t0UTJOZi83K0NrZFM0akpCdWlUQUNVQ2NId05SejBzeUxBbkJqQVhHVlFncGRBWnpYay9CSHhnWUNEc1pmejNsUDJmL0phbmwxQUxKTGJra2pnZ0MrTkNNa0tvaG9BTGdJcFhQSXBSYmcwa0tJQ3BvdEZzUDkvL3MweEJDQVJSZ2hNNkN4NHVDNmtHVWs4Sm9jbk4vczdmLy8vblFBQ1JhVFgrZmlGSm81VTdaOHFpM0FQSWdSMEtPZkc1Ky80Y3YvTnU3NUF6WVFRY0hDNklKcHFCRC8vLy85U3E1QURYLys2dm55SVRta1dUc1Y4QTNBRDU5RjdXbEdLRlZsQjJwcmQxZERhUFcydXdlMDhkSFpLSjJNaUNIcENBOUd1ZWFldDB3RENBQVFTaVN4d0ZPWlZwcWcvL3MweENJQUJ1U0ZKRWVWa01ERUJ1UzBFMkRLRkxwS3dGTVZ5Q3NxY1R1djdaNVZxMmZ2SlVoUThTMWdxQ29MUE5oM0pmaUwvLy8wVlM1UUdUYVZZQTNaSGs3QWhZZWVJcnQyZTJwV0luN3Zza1o3K3FwVXBOMUlBU3hTSmF3RUgweU9HdmxuMWJxbjErZVgvcExmL1gxS3V0a2pkMjExQUFESEZTTFhXanlWRWMvY3o2YXVTWWdFYWt4QlRVVXovL3MweENzQkEyZ2xKVUNBU2pCd2dHSG9BSWdHTGprNUxqV3FxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXEvL3MweEV5Qnd1QUJDYUNFUURBRkFFQUFrQUFFcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXEnO1xyXG5jb25zdCBzb3VuZEJ5dGVBcnJheSA9IGJhc2U2NFNvdW5kVG9CeXRlQXJyYXkoIHBoZXRBdWRpb0NvbnRleHQsIHNvdW5kVVJJICk7XHJcbmNvbnN0IHVubG9jayA9IGFzeW5jTG9hZGVyLmNyZWF0ZUxvY2soIHNvdW5kVVJJICk7XHJcbmNvbnN0IHdyYXBwZWRBdWRpb0J1ZmZlciA9IG5ldyBXcmFwcGVkQXVkaW9CdWZmZXIoKTtcclxuXHJcbi8vIHNhZmUgd2F5IHRvIHVubG9ja1xyXG5sZXQgdW5sb2NrZWQgPSBmYWxzZTtcclxuY29uc3Qgc2FmZVVubG9jayA9ICgpID0+IHtcclxuICBpZiAoICF1bmxvY2tlZCApIHtcclxuICAgIHVubG9jaygpO1xyXG4gICAgdW5sb2NrZWQgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IG9uRGVjb2RlU3VjY2VzcyA9IGRlY29kZWRBdWRpbyA9PiB7XHJcbiAgaWYgKCB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS52YWx1ZSA9PT0gbnVsbCApIHtcclxuICAgIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnNldCggZGVjb2RlZEF1ZGlvICk7XHJcbiAgICBzYWZlVW5sb2NrKCk7XHJcbiAgfVxyXG59O1xyXG5jb25zdCBvbkRlY29kZUVycm9yID0gZGVjb2RlRXJyb3IgPT4ge1xyXG4gIGNvbnNvbGUud2FybiggJ2RlY29kZSBvZiBhdWRpbyBkYXRhIGZhaWxlZCwgdXNpbmcgc3R1YmJlZCBzb3VuZCwgZXJyb3I6ICcgKyBkZWNvZGVFcnJvciApO1xyXG4gIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnNldCggcGhldEF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoIDEsIDEsIHBoZXRBdWRpb0NvbnRleHQuc2FtcGxlUmF0ZSApICk7XHJcbiAgc2FmZVVubG9jaygpO1xyXG59O1xyXG5jb25zdCBkZWNvZGVQcm9taXNlID0gcGhldEF1ZGlvQ29udGV4dC5kZWNvZGVBdWRpb0RhdGEoIHNvdW5kQnl0ZUFycmF5LmJ1ZmZlciwgb25EZWNvZGVTdWNjZXNzLCBvbkRlY29kZUVycm9yICk7XHJcbmlmICggZGVjb2RlUHJvbWlzZSApIHtcclxuICBkZWNvZGVQcm9taXNlXHJcbiAgICAudGhlbiggZGVjb2RlZEF1ZGlvID0+IHtcclxuICAgICAgaWYgKCB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS52YWx1ZSA9PT0gbnVsbCApIHtcclxuICAgICAgICB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS5zZXQoIGRlY29kZWRBdWRpbyApO1xyXG4gICAgICAgIHNhZmVVbmxvY2soKTtcclxuICAgICAgfVxyXG4gICAgfSApXHJcbiAgICAuY2F0Y2goIGUgPT4ge1xyXG4gICAgICBjb25zb2xlLndhcm4oICdwcm9taXNlIHJlamVjdGlvbiBjYXVnaHQgZm9yIGF1ZGlvIGRlY29kZSwgZXJyb3IgPSAnICsgZSApO1xyXG4gICAgICBzYWZlVW5sb2NrKCk7XHJcbiAgICB9ICk7XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgd3JhcHBlZEF1ZGlvQnVmZmVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxPQUFPQSxXQUFXLE1BQU0sbUNBQW1DO0FBQzNELE9BQU9DLHNCQUFzQixNQUFNLDBDQUEwQztBQUM3RSxPQUFPQyxrQkFBa0IsTUFBTSxzQ0FBc0M7QUFDckUsT0FBT0MsZ0JBQWdCLE1BQU0sb0NBQW9DO0FBRWpFLE1BQU1DLFFBQVEsR0FBRyx5NURBQXk1RDtBQUMxNkQsTUFBTUMsY0FBYyxHQUFHSixzQkFBc0IsQ0FBRUUsZ0JBQWdCLEVBQUVDLFFBQVMsQ0FBQztBQUMzRSxNQUFNRSxNQUFNLEdBQUdOLFdBQVcsQ0FBQ08sVUFBVSxDQUFFSCxRQUFTLENBQUM7QUFDakQsTUFBTUksa0JBQWtCLEdBQUcsSUFBSU4sa0JBQWtCLENBQUMsQ0FBQzs7QUFFbkQ7QUFDQSxJQUFJTyxRQUFRLEdBQUcsS0FBSztBQUNwQixNQUFNQyxVQUFVLEdBQUdBLENBQUEsS0FBTTtFQUN2QixJQUFLLENBQUNELFFBQVEsRUFBRztJQUNmSCxNQUFNLENBQUMsQ0FBQztJQUNSRyxRQUFRLEdBQUcsSUFBSTtFQUNqQjtBQUNGLENBQUM7QUFFRCxNQUFNRSxlQUFlLEdBQUdDLFlBQVksSUFBSTtFQUN0QyxJQUFLSixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNDLEtBQUssS0FBSyxJQUFJLEVBQUc7SUFDM0ROLGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFSCxZQUFhLENBQUM7SUFDMURGLFVBQVUsQ0FBQyxDQUFDO0VBQ2Q7QUFDRixDQUFDO0FBQ0QsTUFBTU0sYUFBYSxHQUFHQyxXQUFXLElBQUk7RUFDbkNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLDJEQUEyRCxHQUFHRixXQUFZLENBQUM7RUFDekZULGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFWixnQkFBZ0IsQ0FBQ2lCLFlBQVksQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFakIsZ0JBQWdCLENBQUNrQixVQUFXLENBQUUsQ0FBQztFQUNoSFgsVUFBVSxDQUFDLENBQUM7QUFDZCxDQUFDO0FBQ0QsTUFBTVksYUFBYSxHQUFHbkIsZ0JBQWdCLENBQUNvQixlQUFlLENBQUVsQixjQUFjLENBQUNtQixNQUFNLEVBQUViLGVBQWUsRUFBRUssYUFBYyxDQUFDO0FBQy9HLElBQUtNLGFBQWEsRUFBRztFQUNuQkEsYUFBYSxDQUNWRyxJQUFJLENBQUViLFlBQVksSUFBSTtJQUNyQixJQUFLSixrQkFBa0IsQ0FBQ0ssbUJBQW1CLENBQUNDLEtBQUssS0FBSyxJQUFJLEVBQUc7TUFDM0ROLGtCQUFrQixDQUFDSyxtQkFBbUIsQ0FBQ0UsR0FBRyxDQUFFSCxZQUFhLENBQUM7TUFDMURGLFVBQVUsQ0FBQyxDQUFDO0lBQ2Q7RUFDRixDQUFFLENBQUMsQ0FDRmdCLEtBQUssQ0FBRUMsQ0FBQyxJQUFJO0lBQ1hULE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLHFEQUFxRCxHQUFHUSxDQUFFLENBQUM7SUFDekVqQixVQUFVLENBQUMsQ0FBQztFQUNkLENBQUUsQ0FBQztBQUNQO0FBQ0EsZUFBZUYsa0JBQWtCIn0=