// Copyright 2017-2023, University of Colorado Boulder

/**
 * Screen for the Diffraction screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import Tandem from '../../../tandem/js/Tandem.js';
import diffraction_screen_icon_png from '../../images/diffraction_screen_icon_png.js';
import waveInterference from '../waveInterference.js';
import WaveInterferenceStrings from '../WaveInterferenceStrings.js';
import DiffractionModel from './model/DiffractionModel.js';
import DiffractionScreenView from './view/DiffractionScreenView.js';
class DiffractionScreen extends Screen {
  constructor() {
    const options = {
      backgroundColorProperty: new Property('white'),
      name: WaveInterferenceStrings.screen.diffractionStringProperty,
      homeScreenIcon: new ScreenIcon(new Image(diffraction_screen_icon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      showUnselectedHomeScreenIconFrame: true,
      showScreenIconFrameForNavigationBarFill: 'black',
      tandem: Tandem.OPT_OUT
    };
    super(() => new DiffractionModel(), model => new DiffractionScreenView(model), options);
  }
}
waveInterference.register('DiffractionScreen', DiffractionScreen);
export default DiffractionScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsIlRhbmRlbSIsImRpZmZyYWN0aW9uX3NjcmVlbl9pY29uX3BuZyIsIndhdmVJbnRlcmZlcmVuY2UiLCJXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncyIsIkRpZmZyYWN0aW9uTW9kZWwiLCJEaWZmcmFjdGlvblNjcmVlblZpZXciLCJEaWZmcmFjdGlvblNjcmVlbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwibmFtZSIsInNjcmVlbiIsImRpZmZyYWN0aW9uU3RyaW5nUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsInNob3dVbnNlbGVjdGVkSG9tZVNjcmVlbkljb25GcmFtZSIsInNob3dTY3JlZW5JY29uRnJhbWVGb3JOYXZpZ2F0aW9uQmFyRmlsbCIsInRhbmRlbSIsIk9QVF9PVVQiLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGlmZnJhY3Rpb25TY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2NyZWVuIGZvciB0aGUgRGlmZnJhY3Rpb24gc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZGlmZnJhY3Rpb25fc2NyZWVuX2ljb25fcG5nIGZyb20gJy4uLy4uL2ltYWdlcy9kaWZmcmFjdGlvbl9zY3JlZW5faWNvbl9wbmcuanMnO1xyXG5pbXBvcnQgd2F2ZUludGVyZmVyZW5jZSBmcm9tICcuLi93YXZlSW50ZXJmZXJlbmNlLmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VTdHJpbmdzIGZyb20gJy4uL1dhdmVJbnRlcmZlcmVuY2VTdHJpbmdzLmpzJztcclxuaW1wb3J0IERpZmZyYWN0aW9uTW9kZWwgZnJvbSAnLi9tb2RlbC9EaWZmcmFjdGlvbk1vZGVsLmpzJztcclxuaW1wb3J0IERpZmZyYWN0aW9uU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvRGlmZnJhY3Rpb25TY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIERpZmZyYWN0aW9uU2NyZWVuIGV4dGVuZHMgU2NyZWVuPERpZmZyYWN0aW9uTW9kZWwsIERpZmZyYWN0aW9uU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCAnd2hpdGUnICksXHJcbiAgICAgIG5hbWU6IFdhdmVJbnRlcmZlcmVuY2VTdHJpbmdzLnNjcmVlbi5kaWZmcmFjdGlvblN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggZGlmZnJhY3Rpb25fc2NyZWVuX2ljb25fcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKSxcclxuICAgICAgc2hvd1Vuc2VsZWN0ZWRIb21lU2NyZWVuSWNvbkZyYW1lOiB0cnVlLFxyXG4gICAgICBzaG93U2NyZWVuSWNvbkZyYW1lRm9yTmF2aWdhdGlvbkJhckZpbGw6ICdibGFjaycsXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBEaWZmcmFjdGlvbk1vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBEaWZmcmFjdGlvblNjcmVlblZpZXcoIG1vZGVsICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnRGlmZnJhY3Rpb25TY3JlZW4nLCBEaWZmcmFjdGlvblNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBEaWZmcmFjdGlvblNjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBQ2pELE9BQU9DLDJCQUEyQixNQUFNLDZDQUE2QztBQUNyRixPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFDckQsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLGdCQUFnQixNQUFNLDZCQUE2QjtBQUMxRCxPQUFPQyxxQkFBcUIsTUFBTSxpQ0FBaUM7QUFFbkUsTUFBTUMsaUJBQWlCLFNBQVNULE1BQU0sQ0FBMEM7RUFFdkVVLFdBQVdBLENBQUEsRUFBRztJQUNuQixNQUFNQyxPQUFPLEdBQUc7TUFDZEMsdUJBQXVCLEVBQUUsSUFBSWIsUUFBUSxDQUFFLE9BQVEsQ0FBQztNQUNoRGMsSUFBSSxFQUFFUCx1QkFBdUIsQ0FBQ1EsTUFBTSxDQUFDQyx5QkFBeUI7TUFDOURDLGNBQWMsRUFBRSxJQUFJZixVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFRSwyQkFBNEIsQ0FBQyxFQUFFO1FBQ3hFYSxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSEMsaUNBQWlDLEVBQUUsSUFBSTtNQUN2Q0MsdUNBQXVDLEVBQUUsT0FBTztNQUNoREMsTUFBTSxFQUFFbEIsTUFBTSxDQUFDbUI7SUFDakIsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUlmLGdCQUFnQixDQUFDLENBQUMsRUFDNUJnQixLQUFLLElBQUksSUFBSWYscUJBQXFCLENBQUVlLEtBQU0sQ0FBQyxFQUMzQ1osT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBTixnQkFBZ0IsQ0FBQ21CLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRWYsaUJBQWtCLENBQUM7QUFDbkUsZUFBZUEsaUJBQWlCIn0=