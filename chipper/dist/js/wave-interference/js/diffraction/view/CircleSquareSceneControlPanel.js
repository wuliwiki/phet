// Copyright 2019-2022, University of Colorado Boulder
// @ts-nocheck
/**
 * Control panel for the CircleSquareScene.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import { HBox } from '../../../../scenery/js/imports.js';
import WaveInterferencePanel from '../../common/view/WaveInterferencePanel.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
import WaveInterferenceStrings from '../../WaveInterferenceStrings.js';
import DiffractionNumberControl from './DiffractionNumberControl.js';
const circleDiameterString = WaveInterferenceStrings.circleDiameter;
const mmValueString = WaveInterferenceStrings.mmValue;
const squareWidthString = WaveInterferenceStrings.squareWidth;
class CircleSquareSceneControlPanel extends WaveInterferencePanel {
  constructor(circleSquareScene, options) {
    super(new HBox({
      spacing: WaveInterferenceConstants.DIFFRACTION_HBOX_SPACING,
      align: 'bottom',
      children: [new DiffractionNumberControl(circleDiameterString, circleSquareScene.circleDiameterProperty, {
        delta: 10 * 1E-3,
        numberDisplayOptions: {
          valuePattern: mmValueString,
          decimalPlaces: 2
        },
        sliderOptions: {
          constrainValue: value => Utils.roundToInterval(value, 10 * 1E-3)
        }
      }), new DiffractionNumberControl(squareWidthString, circleSquareScene.squareWidthProperty, {
        delta: 10 * 1E-3,
        numberDisplayOptions: {
          valuePattern: mmValueString,
          decimalPlaces: 2
        },
        sliderOptions: {
          constrainValue: value => Utils.roundToInterval(value, 10 * 1E-3)
        }
      })]
    }), options);
  }
}
waveInterference.register('CircleSquareSceneControlPanel', CircleSquareSceneControlPanel);
export default CircleSquareSceneControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIkhCb3giLCJXYXZlSW50ZXJmZXJlbmNlUGFuZWwiLCJXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIiwid2F2ZUludGVyZmVyZW5jZSIsIldhdmVJbnRlcmZlcmVuY2VTdHJpbmdzIiwiRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sIiwiY2lyY2xlRGlhbWV0ZXJTdHJpbmciLCJjaXJjbGVEaWFtZXRlciIsIm1tVmFsdWVTdHJpbmciLCJtbVZhbHVlIiwic3F1YXJlV2lkdGhTdHJpbmciLCJzcXVhcmVXaWR0aCIsIkNpcmNsZVNxdWFyZVNjZW5lQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJjaXJjbGVTcXVhcmVTY2VuZSIsIm9wdGlvbnMiLCJzcGFjaW5nIiwiRElGRlJBQ1RJT05fSEJPWF9TUEFDSU5HIiwiYWxpZ24iLCJjaGlsZHJlbiIsImNpcmNsZURpYW1ldGVyUHJvcGVydHkiLCJkZWx0YSIsIm51bWJlckRpc3BsYXlPcHRpb25zIiwidmFsdWVQYXR0ZXJuIiwiZGVjaW1hbFBsYWNlcyIsInNsaWRlck9wdGlvbnMiLCJjb25zdHJhaW5WYWx1ZSIsInZhbHVlIiwicm91bmRUb0ludGVydmFsIiwic3F1YXJlV2lkdGhQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2lyY2xlU3F1YXJlU2NlbmVDb250cm9sUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8vIEB0cy1ub2NoZWNrXHJcbi8qKlxyXG4gKiBDb250cm9sIHBhbmVsIGZvciB0aGUgQ2lyY2xlU3F1YXJlU2NlbmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IEhCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVBhbmVsIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1dhdmVJbnRlcmZlcmVuY2VQYW5lbC5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9XYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHdhdmVJbnRlcmZlcmVuY2UgZnJvbSAnLi4vLi4vd2F2ZUludGVyZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncyBmcm9tICcuLi8uLi9XYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBEaWZmcmFjdGlvbk51bWJlckNvbnRyb2wgZnJvbSAnLi9EaWZmcmFjdGlvbk51bWJlckNvbnRyb2wuanMnO1xyXG5cclxuY29uc3QgY2lyY2xlRGlhbWV0ZXJTdHJpbmcgPSBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy5jaXJjbGVEaWFtZXRlcjtcclxuY29uc3QgbW1WYWx1ZVN0cmluZyA9IFdhdmVJbnRlcmZlcmVuY2VTdHJpbmdzLm1tVmFsdWU7XHJcbmNvbnN0IHNxdWFyZVdpZHRoU3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3Muc3F1YXJlV2lkdGg7XHJcblxyXG5jbGFzcyBDaXJjbGVTcXVhcmVTY2VuZUNvbnRyb2xQYW5lbCBleHRlbmRzIFdhdmVJbnRlcmZlcmVuY2VQYW5lbCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY2lyY2xlU3F1YXJlU2NlbmUsIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggbmV3IEhCb3goIHtcclxuICAgICAgc3BhY2luZzogV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5ESUZGUkFDVElPTl9IQk9YX1NQQUNJTkcsXHJcbiAgICAgIGFsaWduOiAnYm90dG9tJyxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sKCBjaXJjbGVEaWFtZXRlclN0cmluZywgY2lyY2xlU3F1YXJlU2NlbmUuY2lyY2xlRGlhbWV0ZXJQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgZGVsdGE6IDEwICogMUUtMyxcclxuICAgICAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHZhbHVlUGF0dGVybjogbW1WYWx1ZVN0cmluZyxcclxuICAgICAgICAgICAgZGVjaW1hbFBsYWNlczogMlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNsaWRlck9wdGlvbnM6IHtcclxuICAgICAgICAgICAgY29uc3RyYWluVmFsdWU6IHZhbHVlID0+IFV0aWxzLnJvdW5kVG9JbnRlcnZhbCggdmFsdWUsIDEwICogMUUtMyApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIG5ldyBEaWZmcmFjdGlvbk51bWJlckNvbnRyb2woIHNxdWFyZVdpZHRoU3RyaW5nLCBjaXJjbGVTcXVhcmVTY2VuZS5zcXVhcmVXaWR0aFByb3BlcnR5LCB7XHJcbiAgICAgICAgICBkZWx0YTogMTAgKiAxRS0zLFxyXG4gICAgICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgdmFsdWVQYXR0ZXJuOiBtbVZhbHVlU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWNpbWFsUGxhY2VzOiAyXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG4gICAgICAgICAgICBjb25zdHJhaW5WYWx1ZTogdmFsdWUgPT4gVXRpbHMucm91bmRUb0ludGVydmFsKCB2YWx1ZSwgMTAgKiAxRS0zIClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IClcclxuICAgICAgXVxyXG4gICAgfSApLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnQ2lyY2xlU3F1YXJlU2NlbmVDb250cm9sUGFuZWwnLCBDaXJjbGVTcXVhcmVTY2VuZUNvbnRyb2xQYW5lbCApO1xyXG5leHBvcnQgZGVmYXVsdCBDaXJjbGVTcXVhcmVTY2VuZUNvbnRyb2xQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxxQkFBcUIsTUFBTSw0Q0FBNEM7QUFDOUUsT0FBT0MseUJBQXlCLE1BQU0sMkNBQTJDO0FBQ2pGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsT0FBT0Msd0JBQXdCLE1BQU0sK0JBQStCO0FBRXBFLE1BQU1DLG9CQUFvQixHQUFHRix1QkFBdUIsQ0FBQ0csY0FBYztBQUNuRSxNQUFNQyxhQUFhLEdBQUdKLHVCQUF1QixDQUFDSyxPQUFPO0FBQ3JELE1BQU1DLGlCQUFpQixHQUFHTix1QkFBdUIsQ0FBQ08sV0FBVztBQUU3RCxNQUFNQyw2QkFBNkIsU0FBU1gscUJBQXFCLENBQUM7RUFFekRZLFdBQVdBLENBQUVDLGlCQUFpQixFQUFFQyxPQUFPLEVBQUc7SUFDL0MsS0FBSyxDQUFFLElBQUlmLElBQUksQ0FBRTtNQUNmZ0IsT0FBTyxFQUFFZCx5QkFBeUIsQ0FBQ2Usd0JBQXdCO01BQzNEQyxLQUFLLEVBQUUsUUFBUTtNQUNmQyxRQUFRLEVBQUUsQ0FDUixJQUFJZCx3QkFBd0IsQ0FBRUMsb0JBQW9CLEVBQUVRLGlCQUFpQixDQUFDTSxzQkFBc0IsRUFBRTtRQUM1RkMsS0FBSyxFQUFFLEVBQUUsR0FBRyxJQUFJO1FBQ2hCQyxvQkFBb0IsRUFBRTtVQUNwQkMsWUFBWSxFQUFFZixhQUFhO1VBQzNCZ0IsYUFBYSxFQUFFO1FBQ2pCLENBQUM7UUFDREMsYUFBYSxFQUFFO1VBQ2JDLGNBQWMsRUFBRUMsS0FBSyxJQUFJNUIsS0FBSyxDQUFDNkIsZUFBZSxDQUFFRCxLQUFLLEVBQUUsRUFBRSxHQUFHLElBQUs7UUFDbkU7TUFDRixDQUFFLENBQUMsRUFDSCxJQUFJdEIsd0JBQXdCLENBQUVLLGlCQUFpQixFQUFFSSxpQkFBaUIsQ0FBQ2UsbUJBQW1CLEVBQUU7UUFDdEZSLEtBQUssRUFBRSxFQUFFLEdBQUcsSUFBSTtRQUNoQkMsb0JBQW9CLEVBQUU7VUFDcEJDLFlBQVksRUFBRWYsYUFBYTtVQUMzQmdCLGFBQWEsRUFBRTtRQUNqQixDQUFDO1FBQ0RDLGFBQWEsRUFBRTtVQUNiQyxjQUFjLEVBQUVDLEtBQUssSUFBSTVCLEtBQUssQ0FBQzZCLGVBQWUsQ0FBRUQsS0FBSyxFQUFFLEVBQUUsR0FBRyxJQUFLO1FBQ25FO01BQ0YsQ0FBRSxDQUFDO0lBRVAsQ0FBRSxDQUFDLEVBQUVaLE9BQVEsQ0FBQztFQUNoQjtBQUNGO0FBRUFaLGdCQUFnQixDQUFDMkIsUUFBUSxDQUFFLCtCQUErQixFQUFFbEIsNkJBQThCLENBQUM7QUFDM0YsZUFBZUEsNkJBQTZCIn0=