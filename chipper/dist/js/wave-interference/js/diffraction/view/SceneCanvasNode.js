// Copyright 2019-2022, University of Colorado Boulder
// @ts-nocheck
/**
 * Uses the model's renderToContext function to draw directly to the view canvas, so the aperture views are anti-aliased
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import merge from '../../../../phet-core/js/merge.js';
import { CanvasNode } from '../../../../scenery/js/imports.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
class SceneCanvasNode extends CanvasNode {
  constructor(sceneProperty, options) {
    super(merge({
      // only use the visible part for the bounds (not the damping regions)
      canvasBounds: new Bounds2(0, 0, WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION, WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION)
    }, options));

    // @private
    this.sceneProperty = sceneProperty;
  }

  /**
   * Redraws the aperture
   */
  paintCanvas(context) {
    context.save();

    // Fill the background
    context.fillStyle = 'black';
    context.fillRect(0, 0, WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION, WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION);

    // Draw the aperture
    context.fillStyle = 'white';
    this.sceneProperty.value.renderToContext(context);
    context.restore();
  }
}
waveInterference.register('SceneCanvasNode', SceneCanvasNode);
export default SceneCanvasNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwibWVyZ2UiLCJDYW52YXNOb2RlIiwiV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cyIsIndhdmVJbnRlcmZlcmVuY2UiLCJTY2VuZUNhbnZhc05vZGUiLCJjb25zdHJ1Y3RvciIsInNjZW5lUHJvcGVydHkiLCJvcHRpb25zIiwiY2FudmFzQm91bmRzIiwiRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiIsInBhaW50Q2FudmFzIiwiY29udGV4dCIsInNhdmUiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInZhbHVlIiwicmVuZGVyVG9Db250ZXh0IiwicmVzdG9yZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2NlbmVDYW52YXNOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG4vLyBAdHMtbm9jaGVja1xyXG4vKipcclxuICogVXNlcyB0aGUgbW9kZWwncyByZW5kZXJUb0NvbnRleHQgZnVuY3Rpb24gdG8gZHJhdyBkaXJlY3RseSB0byB0aGUgdmlldyBjYW52YXMsIHNvIHRoZSBhcGVydHVyZSB2aWV3cyBhcmUgYW50aS1hbGlhc2VkXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgQ2FudmFzTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9XYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHdhdmVJbnRlcmZlcmVuY2UgZnJvbSAnLi4vLi4vd2F2ZUludGVyZmVyZW5jZS5qcyc7XHJcblxyXG5jbGFzcyBTY2VuZUNhbnZhc05vZGUgZXh0ZW5kcyBDYW52YXNOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzY2VuZVByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBtZXJnZSgge1xyXG4gICAgICAvLyBvbmx5IHVzZSB0aGUgdmlzaWJsZSBwYXJ0IGZvciB0aGUgYm91bmRzIChub3QgdGhlIGRhbXBpbmcgcmVnaW9ucylcclxuICAgICAgY2FudmFzQm91bmRzOiBuZXcgQm91bmRzMiggMCwgMCxcclxuICAgICAgICBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLkRJRkZSQUNUSU9OX01BVFJJWF9ESU1FTlNJT04sXHJcbiAgICAgICAgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5ESUZGUkFDVElPTl9NQVRSSVhfRElNRU5TSU9OXHJcbiAgICAgIClcclxuICAgIH0sIG9wdGlvbnMgKSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLnNjZW5lUHJvcGVydHkgPSBzY2VuZVByb3BlcnR5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVkcmF3cyB0aGUgYXBlcnR1cmVcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcGFpbnRDYW52YXMoIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgIC8vIEZpbGwgdGhlIGJhY2tncm91bmRcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgIGNvbnRleHQuZmlsbFJlY3QoIDAsIDAsIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiwgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5ESUZGUkFDVElPTl9NQVRSSVhfRElNRU5TSU9OICk7XHJcblxyXG4gICAgLy8gRHJhdyB0aGUgYXBlcnR1cmVcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3doaXRlJztcclxuICAgIHRoaXMuc2NlbmVQcm9wZXJ0eS52YWx1ZS5yZW5kZXJUb0NvbnRleHQoIGNvbnRleHQgKTtcclxuXHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICB9XHJcbn1cclxuXHJcbndhdmVJbnRlcmZlcmVuY2UucmVnaXN0ZXIoICdTY2VuZUNhbnZhc05vZGUnLCBTY2VuZUNhbnZhc05vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgU2NlbmVDYW52YXNOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELFNBQVNDLFVBQVUsUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MseUJBQXlCLE1BQU0sMkNBQTJDO0FBQ2pGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUV4RCxNQUFNQyxlQUFlLFNBQVNILFVBQVUsQ0FBQztFQUVoQ0ksV0FBV0EsQ0FBRUMsYUFBYSxFQUFFQyxPQUFPLEVBQUc7SUFFM0MsS0FBSyxDQUFFUCxLQUFLLENBQUU7TUFDWjtNQUNBUSxZQUFZLEVBQUUsSUFBSVQsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQzdCRyx5QkFBeUIsQ0FBQ08sNEJBQTRCLEVBQ3REUCx5QkFBeUIsQ0FBQ08sNEJBQzVCO0lBQ0YsQ0FBQyxFQUFFRixPQUFRLENBQUUsQ0FBQzs7SUFFZDtJQUNBLElBQUksQ0FBQ0QsYUFBYSxHQUFHQSxhQUFhO0VBQ3BDOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkksV0FBV0EsQ0FBRUMsT0FBaUMsRUFBUztJQUNyRUEsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQzs7SUFFZDtJQUNBRCxPQUFPLENBQUNFLFNBQVMsR0FBRyxPQUFPO0lBQzNCRixPQUFPLENBQUNHLFFBQVEsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFWix5QkFBeUIsQ0FBQ08sNEJBQTRCLEVBQUVQLHlCQUF5QixDQUFDTyw0QkFBNkIsQ0FBQzs7SUFFeEk7SUFDQUUsT0FBTyxDQUFDRSxTQUFTLEdBQUcsT0FBTztJQUMzQixJQUFJLENBQUNQLGFBQWEsQ0FBQ1MsS0FBSyxDQUFDQyxlQUFlLENBQUVMLE9BQVEsQ0FBQztJQUVuREEsT0FBTyxDQUFDTSxPQUFPLENBQUMsQ0FBQztFQUNuQjtBQUNGO0FBRUFkLGdCQUFnQixDQUFDZSxRQUFRLENBQUUsaUJBQWlCLEVBQUVkLGVBQWdCLENBQUM7QUFDL0QsZUFBZUEsZUFBZSJ9