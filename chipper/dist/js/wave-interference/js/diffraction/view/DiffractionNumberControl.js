// Copyright 2019-2022, University of Colorado Boulder

/**
 * Number controls for each scene in the diffraction screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Utils from '../../../../dot/js/Utils.js';
import merge from '../../../../phet-core/js/merge.js';
import NumberControl from '../../../../scenery-phet/js/NumberControl.js';
import WaveInterferenceText from '../../common/view/WaveInterferenceText.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
class DiffractionNumberControl extends NumberControl {
  constructor(title, property, options) {
    const mergedOptions = merge({}, WaveInterferenceConstants.NUMBER_CONTROL_OPTIONS, {
      sliderOptions: {
        majorTicks: [{
          value: property.range.min,
          label: new WaveInterferenceText(Utils.toFixed(property.range.min, 2))
        }, {
          value: property.range.max,
          label: new WaveInterferenceText(Utils.toFixed(property.range.max, 2))
        }]
      }
    }, options);

    // make wider to give more room for layout and breathing room for i18n
    const expandedOptions = merge(mergedOptions, {
      sliderOptions: {
        trackSize: new Dimension2(140, 1),
        thumbSize: new Dimension2(13, 24.2)
      },
      titleNodeOptions: {
        maxWidth: 130
      },
      numberDisplayOptions: {
        maxWidth: 80
      }
    });
    super(title, property, property.range, expandedOptions);
  }
}
waveInterference.register('DiffractionNumberControl', DiffractionNumberControl);
export default DiffractionNumberControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVXRpbHMiLCJtZXJnZSIsIk51bWJlckNvbnRyb2wiLCJXYXZlSW50ZXJmZXJlbmNlVGV4dCIsIldhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMiLCJ3YXZlSW50ZXJmZXJlbmNlIiwiRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sIiwiY29uc3RydWN0b3IiLCJ0aXRsZSIsInByb3BlcnR5Iiwib3B0aW9ucyIsIm1lcmdlZE9wdGlvbnMiLCJOVU1CRVJfQ09OVFJPTF9PUFRJT05TIiwic2xpZGVyT3B0aW9ucyIsIm1ham9yVGlja3MiLCJ2YWx1ZSIsInJhbmdlIiwibWluIiwibGFiZWwiLCJ0b0ZpeGVkIiwibWF4IiwiZXhwYW5kZWRPcHRpb25zIiwidHJhY2tTaXplIiwidGh1bWJTaXplIiwidGl0bGVOb2RlT3B0aW9ucyIsIm1heFdpZHRoIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpZmZyYWN0aW9uTnVtYmVyQ29udHJvbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOdW1iZXIgY29udHJvbHMgZm9yIGVhY2ggc2NlbmUgaW4gdGhlIGRpZmZyYWN0aW9uIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgTnVtYmVyQ29udHJvbCwgeyBOdW1iZXJDb250cm9sT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9OdW1iZXJDb250cm9sLmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VUZXh0IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1dhdmVJbnRlcmZlcmVuY2VUZXh0LmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1dhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgd2F2ZUludGVyZmVyZW5jZSBmcm9tICcuLi8uLi93YXZlSW50ZXJmZXJlbmNlLmpzJztcclxuXHJcbmNsYXNzIERpZmZyYWN0aW9uTnVtYmVyQ29udHJvbCBleHRlbmRzIE51bWJlckNvbnRyb2wge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRpdGxlOiBzdHJpbmcsIHByb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eSwgb3B0aW9ucz86IE51bWJlckNvbnRyb2xPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSBtZXJnZSgge30sIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuTlVNQkVSX0NPTlRST0xfT1BUSU9OUywge1xyXG4gICAgICBzbGlkZXJPcHRpb25zOiB7XHJcbiAgICAgICAgbWFqb3JUaWNrczogWyB7XHJcbiAgICAgICAgICB2YWx1ZTogcHJvcGVydHkucmFuZ2UubWluLFxyXG4gICAgICAgICAgbGFiZWw6IG5ldyBXYXZlSW50ZXJmZXJlbmNlVGV4dCggVXRpbHMudG9GaXhlZCggcHJvcGVydHkucmFuZ2UubWluLCAyICkgKVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgIHZhbHVlOiBwcm9wZXJ0eS5yYW5nZS5tYXgsXHJcbiAgICAgICAgICBsYWJlbDogbmV3IFdhdmVJbnRlcmZlcmVuY2VUZXh0KCBVdGlscy50b0ZpeGVkKCBwcm9wZXJ0eS5yYW5nZS5tYXgsIDIgKSApXHJcbiAgICAgICAgfSBdXHJcbiAgICAgIH1cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBtYWtlIHdpZGVyIHRvIGdpdmUgbW9yZSByb29tIGZvciBsYXlvdXQgYW5kIGJyZWF0aGluZyByb29tIGZvciBpMThuXHJcbiAgICBjb25zdCBleHBhbmRlZE9wdGlvbnMgPSBtZXJnZSggbWVyZ2VkT3B0aW9ucywge1xyXG4gICAgICBzbGlkZXJPcHRpb25zOiB7XHJcbiAgICAgICAgdHJhY2tTaXplOiBuZXcgRGltZW5zaW9uMiggMTQwLCAxICksXHJcbiAgICAgICAgdGh1bWJTaXplOiBuZXcgRGltZW5zaW9uMiggMTMsIDI0LjIgKVxyXG4gICAgICB9LFxyXG4gICAgICB0aXRsZU5vZGVPcHRpb25zOiB7XHJcbiAgICAgICAgbWF4V2lkdGg6IDEzMFxyXG4gICAgICB9LFxyXG4gICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgIG1heFdpZHRoOiA4MFxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgICBzdXBlciggdGl0bGUsIHByb3BlcnR5LCBwcm9wZXJ0eS5yYW5nZSwgZXhwYW5kZWRPcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sJywgRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sICk7XHJcbmV4cG9ydCBkZWZhdWx0IERpZmZyYWN0aW9uTnVtYmVyQ29udHJvbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsYUFBYSxNQUFnQyw4Q0FBOEM7QUFDbEcsT0FBT0Msb0JBQW9CLE1BQU0sMkNBQTJDO0FBQzVFLE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQztBQUNqRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFFeEQsTUFBTUMsd0JBQXdCLFNBQVNKLGFBQWEsQ0FBQztFQUU1Q0ssV0FBV0EsQ0FBRUMsS0FBYSxFQUFFQyxRQUF3QixFQUFFQyxPQUE4QixFQUFHO0lBRTVGLE1BQU1DLGFBQWEsR0FBR1YsS0FBSyxDQUFFLENBQUMsQ0FBQyxFQUFFRyx5QkFBeUIsQ0FBQ1Esc0JBQXNCLEVBQUU7TUFDakZDLGFBQWEsRUFBRTtRQUNiQyxVQUFVLEVBQUUsQ0FBRTtVQUNaQyxLQUFLLEVBQUVOLFFBQVEsQ0FBQ08sS0FBSyxDQUFDQyxHQUFHO1VBQ3pCQyxLQUFLLEVBQUUsSUFBSWYsb0JBQW9CLENBQUVILEtBQUssQ0FBQ21CLE9BQU8sQ0FBRVYsUUFBUSxDQUFDTyxLQUFLLENBQUNDLEdBQUcsRUFBRSxDQUFFLENBQUU7UUFDMUUsQ0FBQyxFQUFFO1VBQ0RGLEtBQUssRUFBRU4sUUFBUSxDQUFDTyxLQUFLLENBQUNJLEdBQUc7VUFDekJGLEtBQUssRUFBRSxJQUFJZixvQkFBb0IsQ0FBRUgsS0FBSyxDQUFDbUIsT0FBTyxDQUFFVixRQUFRLENBQUNPLEtBQUssQ0FBQ0ksR0FBRyxFQUFFLENBQUUsQ0FBRTtRQUMxRSxDQUFDO01BQ0g7SUFDRixDQUFDLEVBQUVWLE9BQVEsQ0FBQzs7SUFFWjtJQUNBLE1BQU1XLGVBQWUsR0FBR3BCLEtBQUssQ0FBRVUsYUFBYSxFQUFFO01BQzVDRSxhQUFhLEVBQUU7UUFDYlMsU0FBUyxFQUFFLElBQUl2QixVQUFVLENBQUUsR0FBRyxFQUFFLENBQUUsQ0FBQztRQUNuQ3dCLFNBQVMsRUFBRSxJQUFJeEIsVUFBVSxDQUFFLEVBQUUsRUFBRSxJQUFLO01BQ3RDLENBQUM7TUFDRHlCLGdCQUFnQixFQUFFO1FBQ2hCQyxRQUFRLEVBQUU7TUFDWixDQUFDO01BQ0RDLG9CQUFvQixFQUFFO1FBQ3BCRCxRQUFRLEVBQUU7TUFDWjtJQUNGLENBQUUsQ0FBQztJQUNILEtBQUssQ0FBRWpCLEtBQUssRUFBRUMsUUFBUSxFQUFFQSxRQUFRLENBQUNPLEtBQUssRUFBRUssZUFBZ0IsQ0FBQztFQUMzRDtBQUNGO0FBRUFoQixnQkFBZ0IsQ0FBQ3NCLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRXJCLHdCQUF5QixDQUFDO0FBQ2pGLGVBQWVBLHdCQUF3QiJ9