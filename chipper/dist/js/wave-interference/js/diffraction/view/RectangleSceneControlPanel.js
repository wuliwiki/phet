// Copyright 2019-2022, University of Colorado Boulder
// @ts-nocheck
/**
 * Control panel for the RectangleScene.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import { HBox } from '../../../../scenery/js/imports.js';
import WaveInterferencePanel from '../../common/view/WaveInterferencePanel.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
import WaveInterferenceStrings from '../../WaveInterferenceStrings.js';
import DiffractionNumberControl from './DiffractionNumberControl.js';
const heightString = WaveInterferenceStrings.height;
const mmValueString = WaveInterferenceStrings.mmValue;
const widthString = WaveInterferenceStrings.width;
class RectangleSceneControlPanel extends WaveInterferencePanel {
  constructor(rectangleScene, options) {
    super(new HBox({
      spacing: WaveInterferenceConstants.DIFFRACTION_HBOX_SPACING,
      align: 'bottom',
      children: [new DiffractionNumberControl(widthString, rectangleScene.widthProperty, {
        delta: 10 * 1E-3,
        numberDisplayOptions: {
          valuePattern: mmValueString,
          decimalPlaces: 2
        },
        sliderOptions: {
          constrainValue: value => Utils.roundToInterval(value, 20E-3)
        }
      }), new DiffractionNumberControl(heightString, rectangleScene.heightProperty, {
        delta: 10 * 1E-3,
        numberDisplayOptions: {
          valuePattern: mmValueString,
          decimalPlaces: 2
        },
        sliderOptions: {
          constrainValue: value => Utils.roundToInterval(value, 20E-3)
        }
      })]
    }), options);
  }
}
waveInterference.register('RectangleSceneControlPanel', RectangleSceneControlPanel);
export default RectangleSceneControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIkhCb3giLCJXYXZlSW50ZXJmZXJlbmNlUGFuZWwiLCJXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIiwid2F2ZUludGVyZmVyZW5jZSIsIldhdmVJbnRlcmZlcmVuY2VTdHJpbmdzIiwiRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sIiwiaGVpZ2h0U3RyaW5nIiwiaGVpZ2h0IiwibW1WYWx1ZVN0cmluZyIsIm1tVmFsdWUiLCJ3aWR0aFN0cmluZyIsIndpZHRoIiwiUmVjdGFuZ2xlU2NlbmVDb250cm9sUGFuZWwiLCJjb25zdHJ1Y3RvciIsInJlY3RhbmdsZVNjZW5lIiwib3B0aW9ucyIsInNwYWNpbmciLCJESUZGUkFDVElPTl9IQk9YX1NQQUNJTkciLCJhbGlnbiIsImNoaWxkcmVuIiwid2lkdGhQcm9wZXJ0eSIsImRlbHRhIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJ2YWx1ZVBhdHRlcm4iLCJkZWNpbWFsUGxhY2VzIiwic2xpZGVyT3B0aW9ucyIsImNvbnN0cmFpblZhbHVlIiwidmFsdWUiLCJyb3VuZFRvSW50ZXJ2YWwiLCJoZWlnaHRQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVjdGFuZ2xlU2NlbmVDb250cm9sUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8vIEB0cy1ub2NoZWNrXHJcbi8qKlxyXG4gKiBDb250cm9sIHBhbmVsIGZvciB0aGUgUmVjdGFuZ2xlU2NlbmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IEhCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVBhbmVsIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1dhdmVJbnRlcmZlcmVuY2VQYW5lbC5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9XYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHdhdmVJbnRlcmZlcmVuY2UgZnJvbSAnLi4vLi4vd2F2ZUludGVyZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncyBmcm9tICcuLi8uLi9XYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBEaWZmcmFjdGlvbk51bWJlckNvbnRyb2wgZnJvbSAnLi9EaWZmcmFjdGlvbk51bWJlckNvbnRyb2wuanMnO1xyXG5cclxuY29uc3QgaGVpZ2h0U3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MuaGVpZ2h0O1xyXG5jb25zdCBtbVZhbHVlU3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MubW1WYWx1ZTtcclxuY29uc3Qgd2lkdGhTdHJpbmcgPSBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy53aWR0aDtcclxuXHJcbmNsYXNzIFJlY3RhbmdsZVNjZW5lQ29udHJvbFBhbmVsIGV4dGVuZHMgV2F2ZUludGVyZmVyZW5jZVBhbmVsIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCByZWN0YW5nbGVTY2VuZSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLkRJRkZSQUNUSU9OX0hCT1hfU1BBQ0lORyxcclxuICAgICAgYWxpZ246ICdib3R0b20nLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBEaWZmcmFjdGlvbk51bWJlckNvbnRyb2woIHdpZHRoU3RyaW5nLCByZWN0YW5nbGVTY2VuZS53aWR0aFByb3BlcnR5LCB7XHJcbiAgICAgICAgICBkZWx0YTogMTAgKiAxRS0zLFxyXG4gICAgICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgdmFsdWVQYXR0ZXJuOiBtbVZhbHVlU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWNpbWFsUGxhY2VzOiAyXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG4gICAgICAgICAgICBjb25zdHJhaW5WYWx1ZTogdmFsdWUgPT4gVXRpbHMucm91bmRUb0ludGVydmFsKCB2YWx1ZSwgMjBFLTMgKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKSxcclxuICAgICAgICBuZXcgRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sKCBoZWlnaHRTdHJpbmcsIHJlY3RhbmdsZVNjZW5lLmhlaWdodFByb3BlcnR5LCB7XHJcbiAgICAgICAgICBkZWx0YTogMTAgKiAxRS0zLFxyXG4gICAgICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgdmFsdWVQYXR0ZXJuOiBtbVZhbHVlU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWNpbWFsUGxhY2VzOiAyXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG4gICAgICAgICAgICBjb25zdHJhaW5WYWx1ZTogdmFsdWUgPT4gVXRpbHMucm91bmRUb0ludGVydmFsKCB2YWx1ZSwgMjBFLTMgKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKSBdXHJcbiAgICB9ICksIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbndhdmVJbnRlcmZlcmVuY2UucmVnaXN0ZXIoICdSZWN0YW5nbGVTY2VuZUNvbnRyb2xQYW5lbCcsIFJlY3RhbmdsZVNjZW5lQ29udHJvbFBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IFJlY3RhbmdsZVNjZW5lQ29udHJvbFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLHFCQUFxQixNQUFNLDRDQUE0QztBQUM5RSxPQUFPQyx5QkFBeUIsTUFBTSwyQ0FBMkM7QUFDakYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyx3QkFBd0IsTUFBTSwrQkFBK0I7QUFFcEUsTUFBTUMsWUFBWSxHQUFHRix1QkFBdUIsQ0FBQ0csTUFBTTtBQUNuRCxNQUFNQyxhQUFhLEdBQUdKLHVCQUF1QixDQUFDSyxPQUFPO0FBQ3JELE1BQU1DLFdBQVcsR0FBR04sdUJBQXVCLENBQUNPLEtBQUs7QUFFakQsTUFBTUMsMEJBQTBCLFNBQVNYLHFCQUFxQixDQUFDO0VBRXREWSxXQUFXQSxDQUFFQyxjQUFjLEVBQUVDLE9BQU8sRUFBRztJQUM1QyxLQUFLLENBQUUsSUFBSWYsSUFBSSxDQUFFO01BQ2ZnQixPQUFPLEVBQUVkLHlCQUF5QixDQUFDZSx3QkFBd0I7TUFDM0RDLEtBQUssRUFBRSxRQUFRO01BQ2ZDLFFBQVEsRUFBRSxDQUNSLElBQUlkLHdCQUF3QixDQUFFSyxXQUFXLEVBQUVJLGNBQWMsQ0FBQ00sYUFBYSxFQUFFO1FBQ3ZFQyxLQUFLLEVBQUUsRUFBRSxHQUFHLElBQUk7UUFDaEJDLG9CQUFvQixFQUFFO1VBQ3BCQyxZQUFZLEVBQUVmLGFBQWE7VUFDM0JnQixhQUFhLEVBQUU7UUFDakIsQ0FBQztRQUNEQyxhQUFhLEVBQUU7VUFDYkMsY0FBYyxFQUFFQyxLQUFLLElBQUk1QixLQUFLLENBQUM2QixlQUFlLENBQUVELEtBQUssRUFBRSxLQUFNO1FBQy9EO01BQ0YsQ0FBRSxDQUFDLEVBQ0gsSUFBSXRCLHdCQUF3QixDQUFFQyxZQUFZLEVBQUVRLGNBQWMsQ0FBQ2UsY0FBYyxFQUFFO1FBQ3pFUixLQUFLLEVBQUUsRUFBRSxHQUFHLElBQUk7UUFDaEJDLG9CQUFvQixFQUFFO1VBQ3BCQyxZQUFZLEVBQUVmLGFBQWE7VUFDM0JnQixhQUFhLEVBQUU7UUFDakIsQ0FBQztRQUNEQyxhQUFhLEVBQUU7VUFDYkMsY0FBYyxFQUFFQyxLQUFLLElBQUk1QixLQUFLLENBQUM2QixlQUFlLENBQUVELEtBQUssRUFBRSxLQUFNO1FBQy9EO01BQ0YsQ0FBRSxDQUFDO0lBQ1AsQ0FBRSxDQUFDLEVBQUVaLE9BQVEsQ0FBQztFQUNoQjtBQUNGO0FBRUFaLGdCQUFnQixDQUFDMkIsUUFBUSxDQUFFLDRCQUE0QixFQUFFbEIsMEJBQTJCLENBQUM7QUFDckYsZUFBZUEsMEJBQTBCIn0=