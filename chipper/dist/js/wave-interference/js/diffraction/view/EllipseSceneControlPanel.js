// Copyright 2019-2022, University of Colorado Boulder
// @ts-nocheck
/**
 * Control panel for the EllipseScene.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import { HBox } from '../../../../scenery/js/imports.js';
import WaveInterferencePanel from '../../common/view/WaveInterferencePanel.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
import WaveInterferenceStrings from '../../WaveInterferenceStrings.js';
import DiffractionNumberControl from './DiffractionNumberControl.js';
const diameterString = WaveInterferenceStrings.diameter;
const eccentricityString = WaveInterferenceStrings.eccentricity;
const mmValueString = WaveInterferenceStrings.mmValue;
class EllipseSceneControlPanel extends WaveInterferencePanel {
  constructor(ellipseScene, options) {
    super(new HBox({
      spacing: WaveInterferenceConstants.DIFFRACTION_HBOX_SPACING,
      align: 'bottom',
      children: [new DiffractionNumberControl(diameterString, ellipseScene.diameterProperty, {
        delta: 10 * 1E-3,
        numberDisplayOptions: {
          valuePattern: mmValueString,
          decimalPlaces: 2
        },
        sliderOptions: {
          constrainValue: value => Utils.roundToInterval(value, 20E-3)
        }
      }), new DiffractionNumberControl(eccentricityString, ellipseScene.eccentricityProperty, {
        delta: 0.01,
        numberDisplayOptions: {
          decimalPlaces: 2
        },
        sliderOptions: {
          // Constrain by 0.05 but do not exceed the max
          constrainValue: value => Math.min(Utils.roundToInterval(value, 0.05), ellipseScene.eccentricityProperty.range.max)
        }
      })]
    }), options);
  }
}
waveInterference.register('EllipseSceneControlPanel', EllipseSceneControlPanel);
export default EllipseSceneControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIkhCb3giLCJXYXZlSW50ZXJmZXJlbmNlUGFuZWwiLCJXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIiwid2F2ZUludGVyZmVyZW5jZSIsIldhdmVJbnRlcmZlcmVuY2VTdHJpbmdzIiwiRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sIiwiZGlhbWV0ZXJTdHJpbmciLCJkaWFtZXRlciIsImVjY2VudHJpY2l0eVN0cmluZyIsImVjY2VudHJpY2l0eSIsIm1tVmFsdWVTdHJpbmciLCJtbVZhbHVlIiwiRWxsaXBzZVNjZW5lQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJlbGxpcHNlU2NlbmUiLCJvcHRpb25zIiwic3BhY2luZyIsIkRJRkZSQUNUSU9OX0hCT1hfU1BBQ0lORyIsImFsaWduIiwiY2hpbGRyZW4iLCJkaWFtZXRlclByb3BlcnR5IiwiZGVsdGEiLCJudW1iZXJEaXNwbGF5T3B0aW9ucyIsInZhbHVlUGF0dGVybiIsImRlY2ltYWxQbGFjZXMiLCJzbGlkZXJPcHRpb25zIiwiY29uc3RyYWluVmFsdWUiLCJ2YWx1ZSIsInJvdW5kVG9JbnRlcnZhbCIsImVjY2VudHJpY2l0eVByb3BlcnR5IiwiTWF0aCIsIm1pbiIsInJhbmdlIiwibWF4IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbGxpcHNlU2NlbmVDb250cm9sUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8vIEB0cy1ub2NoZWNrXHJcbi8qKlxyXG4gKiBDb250cm9sIHBhbmVsIGZvciB0aGUgRWxsaXBzZVNjZW5lLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBIQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VQYW5lbCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9XYXZlSW50ZXJmZXJlbmNlUGFuZWwuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MgZnJvbSAnLi4vLi4vV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sIGZyb20gJy4vRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sLmpzJztcclxuXHJcbmNvbnN0IGRpYW1ldGVyU3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MuZGlhbWV0ZXI7XHJcbmNvbnN0IGVjY2VudHJpY2l0eVN0cmluZyA9IFdhdmVJbnRlcmZlcmVuY2VTdHJpbmdzLmVjY2VudHJpY2l0eTtcclxuY29uc3QgbW1WYWx1ZVN0cmluZyA9IFdhdmVJbnRlcmZlcmVuY2VTdHJpbmdzLm1tVmFsdWU7XHJcblxyXG5jbGFzcyBFbGxpcHNlU2NlbmVDb250cm9sUGFuZWwgZXh0ZW5kcyBXYXZlSW50ZXJmZXJlbmNlUGFuZWwge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGVsbGlwc2VTY2VuZSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLkRJRkZSQUNUSU9OX0hCT1hfU1BBQ0lORyxcclxuICAgICAgYWxpZ246ICdib3R0b20nLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBEaWZmcmFjdGlvbk51bWJlckNvbnRyb2woIGRpYW1ldGVyU3RyaW5nLCBlbGxpcHNlU2NlbmUuZGlhbWV0ZXJQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgZGVsdGE6IDEwICogMUUtMyxcclxuICAgICAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHZhbHVlUGF0dGVybjogbW1WYWx1ZVN0cmluZyxcclxuICAgICAgICAgICAgZGVjaW1hbFBsYWNlczogMlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNsaWRlck9wdGlvbnM6IHtcclxuICAgICAgICAgICAgY29uc3RyYWluVmFsdWU6IHZhbHVlID0+IFV0aWxzLnJvdW5kVG9JbnRlcnZhbCggdmFsdWUsIDIwRS0zIClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ICksXHJcbiAgICAgICAgbmV3IERpZmZyYWN0aW9uTnVtYmVyQ29udHJvbCggZWNjZW50cmljaXR5U3RyaW5nLCBlbGxpcHNlU2NlbmUuZWNjZW50cmljaXR5UHJvcGVydHksIHtcclxuICAgICAgICAgIGRlbHRhOiAwLjAxLFxyXG4gICAgICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgZGVjaW1hbFBsYWNlczogMlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNsaWRlck9wdGlvbnM6IHtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbnN0cmFpbiBieSAwLjA1IGJ1dCBkbyBub3QgZXhjZWVkIHRoZSBtYXhcclxuICAgICAgICAgICAgY29uc3RyYWluVmFsdWU6IHZhbHVlID0+IE1hdGgubWluKCBVdGlscy5yb3VuZFRvSW50ZXJ2YWwoIHZhbHVlLCAwLjA1ICksIGVsbGlwc2VTY2VuZS5lY2NlbnRyaWNpdHlQcm9wZXJ0eS5yYW5nZS5tYXggKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKVxyXG4gICAgICBdXHJcbiAgICB9ICksIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbndhdmVJbnRlcmZlcmVuY2UucmVnaXN0ZXIoICdFbGxpcHNlU2NlbmVDb250cm9sUGFuZWwnLCBFbGxpcHNlU2NlbmVDb250cm9sUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgRWxsaXBzZVNjZW5lQ29udHJvbFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLHFCQUFxQixNQUFNLDRDQUE0QztBQUM5RSxPQUFPQyx5QkFBeUIsTUFBTSwyQ0FBMkM7QUFDakYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyx3QkFBd0IsTUFBTSwrQkFBK0I7QUFFcEUsTUFBTUMsY0FBYyxHQUFHRix1QkFBdUIsQ0FBQ0csUUFBUTtBQUN2RCxNQUFNQyxrQkFBa0IsR0FBR0osdUJBQXVCLENBQUNLLFlBQVk7QUFDL0QsTUFBTUMsYUFBYSxHQUFHTix1QkFBdUIsQ0FBQ08sT0FBTztBQUVyRCxNQUFNQyx3QkFBd0IsU0FBU1gscUJBQXFCLENBQUM7RUFFcERZLFdBQVdBLENBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFHO0lBQzFDLEtBQUssQ0FBRSxJQUFJZixJQUFJLENBQUU7TUFDZmdCLE9BQU8sRUFBRWQseUJBQXlCLENBQUNlLHdCQUF3QjtNQUMzREMsS0FBSyxFQUFFLFFBQVE7TUFDZkMsUUFBUSxFQUFFLENBQ1IsSUFBSWQsd0JBQXdCLENBQUVDLGNBQWMsRUFBRVEsWUFBWSxDQUFDTSxnQkFBZ0IsRUFBRTtRQUMzRUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxJQUFJO1FBQ2hCQyxvQkFBb0IsRUFBRTtVQUNwQkMsWUFBWSxFQUFFYixhQUFhO1VBQzNCYyxhQUFhLEVBQUU7UUFDakIsQ0FBQztRQUNEQyxhQUFhLEVBQUU7VUFDYkMsY0FBYyxFQUFFQyxLQUFLLElBQUk1QixLQUFLLENBQUM2QixlQUFlLENBQUVELEtBQUssRUFBRSxLQUFNO1FBQy9EO01BQ0YsQ0FBRSxDQUFDLEVBQ0gsSUFBSXRCLHdCQUF3QixDQUFFRyxrQkFBa0IsRUFBRU0sWUFBWSxDQUFDZSxvQkFBb0IsRUFBRTtRQUNuRlIsS0FBSyxFQUFFLElBQUk7UUFDWEMsb0JBQW9CLEVBQUU7VUFDcEJFLGFBQWEsRUFBRTtRQUNqQixDQUFDO1FBQ0RDLGFBQWEsRUFBRTtVQUViO1VBQ0FDLGNBQWMsRUFBRUMsS0FBSyxJQUFJRyxJQUFJLENBQUNDLEdBQUcsQ0FBRWhDLEtBQUssQ0FBQzZCLGVBQWUsQ0FBRUQsS0FBSyxFQUFFLElBQUssQ0FBQyxFQUFFYixZQUFZLENBQUNlLG9CQUFvQixDQUFDRyxLQUFLLENBQUNDLEdBQUk7UUFDdkg7TUFDRixDQUFFLENBQUM7SUFFUCxDQUFFLENBQUMsRUFBRWxCLE9BQVEsQ0FBQztFQUNoQjtBQUNGO0FBRUFaLGdCQUFnQixDQUFDK0IsUUFBUSxDQUFFLDBCQUEwQixFQUFFdEIsd0JBQXlCLENBQUM7QUFDakYsZUFBZUEsd0JBQXdCIn0=