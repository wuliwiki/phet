// Copyright 2019-2022, University of Colorado Boulder
// @ts-nocheck
/**
 * Control panel for the DisorderScene.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import { HBox } from '../../../../scenery/js/imports.js';
import WaveInterferencePanel from '../../common/view/WaveInterferencePanel.js';
import WaveInterferenceText from '../../common/view/WaveInterferenceText.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
import WaveInterferenceStrings from '../../WaveInterferenceStrings.js';
import DiffractionNumberControl from './DiffractionNumberControl.js';
const circleDiameterString = WaveInterferenceStrings.circleDiameter;
const disorderString = WaveInterferenceStrings.disorder;
const latticeSpacingString = WaveInterferenceStrings.latticeSpacing;
const lotsString = WaveInterferenceStrings.lots;
const mmValueString = WaveInterferenceStrings.mmValue;
const noneString = WaveInterferenceStrings.none;
class DisorderSceneControlPanel extends WaveInterferencePanel {
  constructor(disorderScene, options) {
    super(new HBox({
      spacing: WaveInterferenceConstants.DIFFRACTION_HBOX_SPACING,
      align: 'bottom',
      children: [new DiffractionNumberControl(circleDiameterString, disorderScene.diameterProperty, {
        delta: 10E-3,
        numberDisplayOptions: {
          valuePattern: mmValueString,
          decimalPlaces: 2
        },
        sliderOptions: {
          constrainValue: value => Utils.roundToInterval(value, 10E-3)
        }
      }), new DiffractionNumberControl(latticeSpacingString, disorderScene.latticeSpacingProperty, {
        delta: 10E-3,
        numberDisplayOptions: {
          valuePattern: mmValueString,
          decimalPlaces: 2
        },
        sliderOptions: {
          constrainValue: value => Utils.roundToInterval(value, 10E-3)
        }
      }), new DiffractionNumberControl(disorderString, disorderScene.disorderProperty, {
        numberDisplayOptions: {
          visible: false
        },
        sliderOptions: {
          majorTicks: [{
            value: disorderScene.disorderProperty.range.min,
            label: new WaveInterferenceText(noneString, {
              maxWidth: 60
            })
          }, {
            value: disorderScene.disorderProperty.range.max,
            label: new WaveInterferenceText(lotsString, {
              maxWidth: 60
            })
          }],
          minorTickSpacing: 1
        }
      })]
    }), options);
  }
}
waveInterference.register('DisorderSceneControlPanel', DisorderSceneControlPanel);
export default DisorderSceneControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIkhCb3giLCJXYXZlSW50ZXJmZXJlbmNlUGFuZWwiLCJXYXZlSW50ZXJmZXJlbmNlVGV4dCIsIldhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMiLCJ3YXZlSW50ZXJmZXJlbmNlIiwiV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MiLCJEaWZmcmFjdGlvbk51bWJlckNvbnRyb2wiLCJjaXJjbGVEaWFtZXRlclN0cmluZyIsImNpcmNsZURpYW1ldGVyIiwiZGlzb3JkZXJTdHJpbmciLCJkaXNvcmRlciIsImxhdHRpY2VTcGFjaW5nU3RyaW5nIiwibGF0dGljZVNwYWNpbmciLCJsb3RzU3RyaW5nIiwibG90cyIsIm1tVmFsdWVTdHJpbmciLCJtbVZhbHVlIiwibm9uZVN0cmluZyIsIm5vbmUiLCJEaXNvcmRlclNjZW5lQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJkaXNvcmRlclNjZW5lIiwib3B0aW9ucyIsInNwYWNpbmciLCJESUZGUkFDVElPTl9IQk9YX1NQQUNJTkciLCJhbGlnbiIsImNoaWxkcmVuIiwiZGlhbWV0ZXJQcm9wZXJ0eSIsImRlbHRhIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJ2YWx1ZVBhdHRlcm4iLCJkZWNpbWFsUGxhY2VzIiwic2xpZGVyT3B0aW9ucyIsImNvbnN0cmFpblZhbHVlIiwidmFsdWUiLCJyb3VuZFRvSW50ZXJ2YWwiLCJsYXR0aWNlU3BhY2luZ1Byb3BlcnR5IiwiZGlzb3JkZXJQcm9wZXJ0eSIsInZpc2libGUiLCJtYWpvclRpY2tzIiwicmFuZ2UiLCJtaW4iLCJsYWJlbCIsIm1heFdpZHRoIiwibWF4IiwibWlub3JUaWNrU3BhY2luZyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGlzb3JkZXJTY2VuZUNvbnRyb2xQYW5lbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLy8gQHRzLW5vY2hlY2tcclxuLyoqXHJcbiAqIENvbnRyb2wgcGFuZWwgZm9yIHRoZSBEaXNvcmRlclNjZW5lLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBIQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VQYW5lbCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9XYXZlSW50ZXJmZXJlbmNlUGFuZWwuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVRleHQgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvV2F2ZUludGVyZmVyZW5jZVRleHQuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MgZnJvbSAnLi4vLi4vV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sIGZyb20gJy4vRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sLmpzJztcclxuXHJcbmNvbnN0IGNpcmNsZURpYW1ldGVyU3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MuY2lyY2xlRGlhbWV0ZXI7XHJcbmNvbnN0IGRpc29yZGVyU3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MuZGlzb3JkZXI7XHJcbmNvbnN0IGxhdHRpY2VTcGFjaW5nU3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MubGF0dGljZVNwYWNpbmc7XHJcbmNvbnN0IGxvdHNTdHJpbmcgPSBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy5sb3RzO1xyXG5jb25zdCBtbVZhbHVlU3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MubW1WYWx1ZTtcclxuY29uc3Qgbm9uZVN0cmluZyA9IFdhdmVJbnRlcmZlcmVuY2VTdHJpbmdzLm5vbmU7XHJcblxyXG5jbGFzcyBEaXNvcmRlclNjZW5lQ29udHJvbFBhbmVsIGV4dGVuZHMgV2F2ZUludGVyZmVyZW5jZVBhbmVsIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBkaXNvcmRlclNjZW5lLCBvcHRpb25zICkge1xyXG4gICAgc3VwZXIoIG5ldyBIQm94KCB7XHJcbiAgICAgIHNwYWNpbmc6IFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fSEJPWF9TUEFDSU5HLFxyXG4gICAgICBhbGlnbjogJ2JvdHRvbScsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IERpZmZyYWN0aW9uTnVtYmVyQ29udHJvbCggY2lyY2xlRGlhbWV0ZXJTdHJpbmcsIGRpc29yZGVyU2NlbmUuZGlhbWV0ZXJQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgZGVsdGE6IDEwRS0zLFxyXG4gICAgICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgdmFsdWVQYXR0ZXJuOiBtbVZhbHVlU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWNpbWFsUGxhY2VzOiAyXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG4gICAgICAgICAgICBjb25zdHJhaW5WYWx1ZTogdmFsdWUgPT4gVXRpbHMucm91bmRUb0ludGVydmFsKCB2YWx1ZSwgMTBFLTMgKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKSxcclxuICAgICAgICBuZXcgRGlmZnJhY3Rpb25OdW1iZXJDb250cm9sKCBsYXR0aWNlU3BhY2luZ1N0cmluZywgZGlzb3JkZXJTY2VuZS5sYXR0aWNlU3BhY2luZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgICBkZWx0YTogMTBFLTMsXHJcbiAgICAgICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgICAgICB2YWx1ZVBhdHRlcm46IG1tVmFsdWVTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlY2ltYWxQbGFjZXM6IDJcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzbGlkZXJPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpblZhbHVlOiB2YWx1ZSA9PiBVdGlscy5yb3VuZFRvSW50ZXJ2YWwoIHZhbHVlLCAxMEUtMyApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIG5ldyBEaWZmcmFjdGlvbk51bWJlckNvbnRyb2woIGRpc29yZGVyU3RyaW5nLCBkaXNvcmRlclNjZW5lLmRpc29yZGVyUHJvcGVydHksIHtcclxuICAgICAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG4gICAgICAgICAgICBtYWpvclRpY2tzOiBbIHtcclxuICAgICAgICAgICAgICB2YWx1ZTogZGlzb3JkZXJTY2VuZS5kaXNvcmRlclByb3BlcnR5LnJhbmdlLm1pbixcclxuICAgICAgICAgICAgICBsYWJlbDogbmV3IFdhdmVJbnRlcmZlcmVuY2VUZXh0KCBub25lU3RyaW5nLCB7IG1heFdpZHRoOiA2MCB9IClcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgIHZhbHVlOiBkaXNvcmRlclNjZW5lLmRpc29yZGVyUHJvcGVydHkucmFuZ2UubWF4LFxyXG4gICAgICAgICAgICAgIGxhYmVsOiBuZXcgV2F2ZUludGVyZmVyZW5jZVRleHQoIGxvdHNTdHJpbmcsIHsgbWF4V2lkdGg6IDYwIH0gKVxyXG4gICAgICAgICAgICB9IF0sXHJcbiAgICAgICAgICAgIG1pbm9yVGlja1NwYWNpbmc6IDFcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IClcclxuICAgICAgXVxyXG4gICAgfSApLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnRGlzb3JkZXJTY2VuZUNvbnRyb2xQYW5lbCcsIERpc29yZGVyU2NlbmVDb250cm9sUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgRGlzb3JkZXJTY2VuZUNvbnRyb2xQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxxQkFBcUIsTUFBTSw0Q0FBNEM7QUFDOUUsT0FBT0Msb0JBQW9CLE1BQU0sMkNBQTJDO0FBQzVFLE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQztBQUNqRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBQ3RFLE9BQU9DLHdCQUF3QixNQUFNLCtCQUErQjtBQUVwRSxNQUFNQyxvQkFBb0IsR0FBR0YsdUJBQXVCLENBQUNHLGNBQWM7QUFDbkUsTUFBTUMsY0FBYyxHQUFHSix1QkFBdUIsQ0FBQ0ssUUFBUTtBQUN2RCxNQUFNQyxvQkFBb0IsR0FBR04sdUJBQXVCLENBQUNPLGNBQWM7QUFDbkUsTUFBTUMsVUFBVSxHQUFHUix1QkFBdUIsQ0FBQ1MsSUFBSTtBQUMvQyxNQUFNQyxhQUFhLEdBQUdWLHVCQUF1QixDQUFDVyxPQUFPO0FBQ3JELE1BQU1DLFVBQVUsR0FBR1osdUJBQXVCLENBQUNhLElBQUk7QUFFL0MsTUFBTUMseUJBQXlCLFNBQVNsQixxQkFBcUIsQ0FBQztFQUVyRG1CLFdBQVdBLENBQUVDLGFBQWEsRUFBRUMsT0FBTyxFQUFHO0lBQzNDLEtBQUssQ0FBRSxJQUFJdEIsSUFBSSxDQUFFO01BQ2Z1QixPQUFPLEVBQUVwQix5QkFBeUIsQ0FBQ3FCLHdCQUF3QjtNQUMzREMsS0FBSyxFQUFFLFFBQVE7TUFDZkMsUUFBUSxFQUFFLENBQ1IsSUFBSXBCLHdCQUF3QixDQUFFQyxvQkFBb0IsRUFBRWMsYUFBYSxDQUFDTSxnQkFBZ0IsRUFBRTtRQUNsRkMsS0FBSyxFQUFFLEtBQUs7UUFDWkMsb0JBQW9CLEVBQUU7VUFDcEJDLFlBQVksRUFBRWYsYUFBYTtVQUMzQmdCLGFBQWEsRUFBRTtRQUNqQixDQUFDO1FBQ0RDLGFBQWEsRUFBRTtVQUNiQyxjQUFjLEVBQUVDLEtBQUssSUFBSW5DLEtBQUssQ0FBQ29DLGVBQWUsQ0FBRUQsS0FBSyxFQUFFLEtBQU07UUFDL0Q7TUFDRixDQUFFLENBQUMsRUFDSCxJQUFJNUIsd0JBQXdCLENBQUVLLG9CQUFvQixFQUFFVSxhQUFhLENBQUNlLHNCQUFzQixFQUFFO1FBQ3hGUixLQUFLLEVBQUUsS0FBSztRQUNaQyxvQkFBb0IsRUFBRTtVQUNwQkMsWUFBWSxFQUFFZixhQUFhO1VBQzNCZ0IsYUFBYSxFQUFFO1FBQ2pCLENBQUM7UUFDREMsYUFBYSxFQUFFO1VBQ2JDLGNBQWMsRUFBRUMsS0FBSyxJQUFJbkMsS0FBSyxDQUFDb0MsZUFBZSxDQUFFRCxLQUFLLEVBQUUsS0FBTTtRQUMvRDtNQUNGLENBQUUsQ0FBQyxFQUNILElBQUk1Qix3QkFBd0IsQ0FBRUcsY0FBYyxFQUFFWSxhQUFhLENBQUNnQixnQkFBZ0IsRUFBRTtRQUM1RVIsb0JBQW9CLEVBQUU7VUFDcEJTLE9BQU8sRUFBRTtRQUNYLENBQUM7UUFDRE4sYUFBYSxFQUFFO1VBQ2JPLFVBQVUsRUFBRSxDQUFFO1lBQ1pMLEtBQUssRUFBRWIsYUFBYSxDQUFDZ0IsZ0JBQWdCLENBQUNHLEtBQUssQ0FBQ0MsR0FBRztZQUMvQ0MsS0FBSyxFQUFFLElBQUl4QyxvQkFBb0IsQ0FBRWUsVUFBVSxFQUFFO2NBQUUwQixRQUFRLEVBQUU7WUFBRyxDQUFFO1VBQ2hFLENBQUMsRUFBRTtZQUNEVCxLQUFLLEVBQUViLGFBQWEsQ0FBQ2dCLGdCQUFnQixDQUFDRyxLQUFLLENBQUNJLEdBQUc7WUFDL0NGLEtBQUssRUFBRSxJQUFJeEMsb0JBQW9CLENBQUVXLFVBQVUsRUFBRTtjQUFFOEIsUUFBUSxFQUFFO1lBQUcsQ0FBRTtVQUNoRSxDQUFDLENBQUU7VUFDSEUsZ0JBQWdCLEVBQUU7UUFDcEI7TUFDRixDQUFFLENBQUM7SUFFUCxDQUFFLENBQUMsRUFBRXZCLE9BQVEsQ0FBQztFQUNoQjtBQUNGO0FBRUFsQixnQkFBZ0IsQ0FBQzBDLFFBQVEsQ0FBRSwyQkFBMkIsRUFBRTNCLHlCQUEwQixDQUFDO0FBQ25GLGVBQWVBLHlCQUF5QiJ9