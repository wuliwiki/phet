// Copyright 2019-2022, University of Colorado Boulder

/**
 * This scene shows a single elliptical aperture.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
import DiffractionScene from './DiffractionScene.js';
class EllipseScene extends DiffractionScene {
  // mm
  // unitless

  constructor() {
    const diameterProperty = new NumberProperty(100E-3, {
      range: new Range(40E-3, 400E-3),
      units: 'mm'
    });
    const eccentricityProperty = new NumberProperty(0, {
      range: new Range(0, 0.99)
    });
    super([diameterProperty, eccentricityProperty]);
    this.diameterProperty = diameterProperty;
    this.eccentricityProperty = eccentricityProperty;
  }

  /**
   * Render the aperture shape(s) to the canvas context.
   */
  renderToContext(context) {
    const eccentricity = this.eccentricityProperty.value;
    const diameter = this.diameterProperty.value;
    const rx = diameter / 2 * WaveInterferenceConstants.DIFFRACTION_MODEL_TO_MATRIX_SCALE;
    const ry = Math.sqrt(rx * rx * (1 - eccentricity * eccentricity));
    context.beginPath();
    if (context.ellipse) {
      context.ellipse(WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION / 2, WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION / 2, rx, ry, 0, 0, Math.PI * 2);
    } else {
      // context.ellipse is not supported on IE11, see https://github.com/phetsims/wave-interference/issues/424
      // In that case, render as a scaled circle
      context.save();
      context.translate(WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION / 2, WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION / 2);
      context.scale(rx, ry);
      context.arc(0, 0, 1, 0, Math.PI * 2);
      context.restore();
    }
    context.fill();
  }
}
waveInterference.register('EllipseScene', EllipseScene);
export default EllipseScene;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cyIsIndhdmVJbnRlcmZlcmVuY2UiLCJEaWZmcmFjdGlvblNjZW5lIiwiRWxsaXBzZVNjZW5lIiwiY29uc3RydWN0b3IiLCJkaWFtZXRlclByb3BlcnR5IiwicmFuZ2UiLCJ1bml0cyIsImVjY2VudHJpY2l0eVByb3BlcnR5IiwicmVuZGVyVG9Db250ZXh0IiwiY29udGV4dCIsImVjY2VudHJpY2l0eSIsInZhbHVlIiwiZGlhbWV0ZXIiLCJyeCIsIkRJRkZSQUNUSU9OX01PREVMX1RPX01BVFJJWF9TQ0FMRSIsInJ5IiwiTWF0aCIsInNxcnQiLCJiZWdpblBhdGgiLCJlbGxpcHNlIiwiRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiIsIlBJIiwic2F2ZSIsInRyYW5zbGF0ZSIsInNjYWxlIiwiYXJjIiwicmVzdG9yZSIsImZpbGwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVsbGlwc2VTY2VuZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHNjZW5lIHNob3dzIGEgc2luZ2xlIGVsbGlwdGljYWwgYXBlcnR1cmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1dhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgd2F2ZUludGVyZmVyZW5jZSBmcm9tICcuLi8uLi93YXZlSW50ZXJmZXJlbmNlLmpzJztcclxuaW1wb3J0IERpZmZyYWN0aW9uU2NlbmUgZnJvbSAnLi9EaWZmcmFjdGlvblNjZW5lLmpzJztcclxuXHJcbmNsYXNzIEVsbGlwc2VTY2VuZSBleHRlbmRzIERpZmZyYWN0aW9uU2NlbmUge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgZGlhbWV0ZXJQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7IC8vIG1tXHJcbiAgcHVibGljIHJlYWRvbmx5IGVjY2VudHJpY2l0eVByb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eTsgLy8gdW5pdGxlc3NcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIGNvbnN0IGRpYW1ldGVyUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDEwMEUtMywge1xyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCA0MEUtMywgNDAwRS0zICksXHJcbiAgICAgIHVuaXRzOiAnbW0nXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgZWNjZW50cmljaXR5UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAsIHtcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMCwgMC45OSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIFsgZGlhbWV0ZXJQcm9wZXJ0eSwgZWNjZW50cmljaXR5UHJvcGVydHkgXSApO1xyXG5cclxuICAgIHRoaXMuZGlhbWV0ZXJQcm9wZXJ0eSA9IGRpYW1ldGVyUHJvcGVydHk7XHJcbiAgICB0aGlzLmVjY2VudHJpY2l0eVByb3BlcnR5ID0gZWNjZW50cmljaXR5UHJvcGVydHk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW5kZXIgdGhlIGFwZXJ0dXJlIHNoYXBlKHMpIHRvIHRoZSBjYW52YXMgY29udGV4dC5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgcmVuZGVyVG9Db250ZXh0KCBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgKTogdm9pZCB7XHJcbiAgICBjb25zdCBlY2NlbnRyaWNpdHkgPSB0aGlzLmVjY2VudHJpY2l0eVByb3BlcnR5LnZhbHVlO1xyXG4gICAgY29uc3QgZGlhbWV0ZXIgPSB0aGlzLmRpYW1ldGVyUHJvcGVydHkudmFsdWU7XHJcbiAgICBjb25zdCByeCA9IGRpYW1ldGVyIC8gMiAqIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTU9ERUxfVE9fTUFUUklYX1NDQUxFO1xyXG4gICAgY29uc3QgcnkgPSBNYXRoLnNxcnQoIHJ4ICogcnggKiAoIDEgLSBlY2NlbnRyaWNpdHkgKiBlY2NlbnRyaWNpdHkgKSApO1xyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgaWYgKCBjb250ZXh0LmVsbGlwc2UgKSB7XHJcbiAgICAgIGNvbnRleHQuZWxsaXBzZShcclxuICAgICAgICBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLkRJRkZSQUNUSU9OX01BVFJJWF9ESU1FTlNJT04gLyAyLFxyXG4gICAgICAgIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiAvIDIsXHJcbiAgICAgICAgcngsIHJ5LCAwLCAwLCBNYXRoLlBJICogMlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcblxyXG4gICAgICAvLyBjb250ZXh0LmVsbGlwc2UgaXMgbm90IHN1cHBvcnRlZCBvbiBJRTExLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3dhdmUtaW50ZXJmZXJlbmNlL2lzc3Vlcy80MjRcclxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCByZW5kZXIgYXMgYSBzY2FsZWQgY2lyY2xlXHJcbiAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICBjb250ZXh0LnRyYW5zbGF0ZSggV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5ESUZGUkFDVElPTl9NQVRSSVhfRElNRU5TSU9OIC8gMiwgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5ESUZGUkFDVElPTl9NQVRSSVhfRElNRU5TSU9OIC8gMiApO1xyXG4gICAgICBjb250ZXh0LnNjYWxlKCByeCwgcnkgKTtcclxuICAgICAgY29udGV4dC5hcmMoIDAsIDAsIDEsIDAsIE1hdGguUEkgKiAyICk7XHJcbiAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gIH1cclxufVxyXG5cclxud2F2ZUludGVyZmVyZW5jZS5yZWdpc3RlciggJ0VsbGlwc2VTY2VuZScsIEVsbGlwc2VTY2VuZSApO1xyXG5leHBvcnQgZGVmYXVsdCBFbGxpcHNlU2NlbmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyx5QkFBeUIsTUFBTSwyQ0FBMkM7QUFDakYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUVwRCxNQUFNQyxZQUFZLFNBQVNELGdCQUFnQixDQUFDO0VBRVE7RUFDSTs7RUFFL0NFLFdBQVdBLENBQUEsRUFBRztJQUVuQixNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJUCxjQUFjLENBQUUsTUFBTSxFQUFFO01BQ25EUSxLQUFLLEVBQUUsSUFBSVAsS0FBSyxDQUFFLEtBQUssRUFBRSxNQUFPLENBQUM7TUFDakNRLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQztJQUVILE1BQU1DLG9CQUFvQixHQUFHLElBQUlWLGNBQWMsQ0FBRSxDQUFDLEVBQUU7TUFDbERRLEtBQUssRUFBRSxJQUFJUCxLQUFLLENBQUUsQ0FBQyxFQUFFLElBQUs7SUFDNUIsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFLENBQUVNLGdCQUFnQixFQUFFRyxvQkFBb0IsQ0FBRyxDQUFDO0lBRW5ELElBQUksQ0FBQ0gsZ0JBQWdCLEdBQUdBLGdCQUFnQjtJQUN4QyxJQUFJLENBQUNHLG9CQUFvQixHQUFHQSxvQkFBb0I7RUFDbEQ7O0VBRUE7QUFDRjtBQUNBO0VBQ3FCQyxlQUFlQSxDQUFFQyxPQUFpQyxFQUFTO0lBQzVFLE1BQU1DLFlBQVksR0FBRyxJQUFJLENBQUNILG9CQUFvQixDQUFDSSxLQUFLO0lBQ3BELE1BQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNSLGdCQUFnQixDQUFDTyxLQUFLO0lBQzVDLE1BQU1FLEVBQUUsR0FBR0QsUUFBUSxHQUFHLENBQUMsR0FBR2IseUJBQXlCLENBQUNlLGlDQUFpQztJQUNyRixNQUFNQyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsSUFBSSxDQUFFSixFQUFFLEdBQUdBLEVBQUUsSUFBSyxDQUFDLEdBQUdILFlBQVksR0FBR0EsWUFBWSxDQUFHLENBQUM7SUFFckVELE9BQU8sQ0FBQ1MsU0FBUyxDQUFDLENBQUM7SUFFbkIsSUFBS1QsT0FBTyxDQUFDVSxPQUFPLEVBQUc7TUFDckJWLE9BQU8sQ0FBQ1UsT0FBTyxDQUNicEIseUJBQXlCLENBQUNxQiw0QkFBNEIsR0FBRyxDQUFDLEVBQzFEckIseUJBQXlCLENBQUNxQiw0QkFBNEIsR0FBRyxDQUFDLEVBQzFEUCxFQUFFLEVBQUVFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFQyxJQUFJLENBQUNLLEVBQUUsR0FBRyxDQUMxQixDQUFDO0lBQ0gsQ0FBQyxNQUNJO01BRUg7TUFDQTtNQUNBWixPQUFPLENBQUNhLElBQUksQ0FBQyxDQUFDO01BQ2RiLE9BQU8sQ0FBQ2MsU0FBUyxDQUFFeEIseUJBQXlCLENBQUNxQiw0QkFBNEIsR0FBRyxDQUFDLEVBQUVyQix5QkFBeUIsQ0FBQ3FCLDRCQUE0QixHQUFHLENBQUUsQ0FBQztNQUMzSVgsT0FBTyxDQUFDZSxLQUFLLENBQUVYLEVBQUUsRUFBRUUsRUFBRyxDQUFDO01BQ3ZCTixPQUFPLENBQUNnQixHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFVCxJQUFJLENBQUNLLEVBQUUsR0FBRyxDQUFFLENBQUM7TUFDdENaLE9BQU8sQ0FBQ2lCLE9BQU8sQ0FBQyxDQUFDO0lBQ25CO0lBRUFqQixPQUFPLENBQUNrQixJQUFJLENBQUMsQ0FBQztFQUNoQjtBQUNGO0FBRUEzQixnQkFBZ0IsQ0FBQzRCLFFBQVEsQ0FBRSxjQUFjLEVBQUUxQixZQUFhLENBQUM7QUFDekQsZUFBZUEsWUFBWSJ9