// Copyright 2019-2022, University of Colorado Boulder

/**
 * This scene shows a single rectangular aperture with an adjustable width and height.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import Utils from '../../../../dot/js/Utils.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
import DiffractionScene from './DiffractionScene.js';
class RectangleScene extends DiffractionScene {
  // mm
  // mm

  constructor() {
    const widthProperty = new NumberProperty(100E-3, {
      range: new Range(40E-3, 400E-3),
      units: 'mm'
    });
    const heightProperty = new NumberProperty(100E-3, {
      range: new Range(40E-3, 400E-3),
      units: 'mm'
    });
    super([widthProperty, heightProperty]);
    this.widthProperty = widthProperty;
    this.heightProperty = heightProperty;
  }

  /**
   * Render the aperture shape(s) to the canvas context.
   */
  renderToContext(context) {
    const modelToMatrixScale = WaveInterferenceConstants.DIFFRACTION_MODEL_TO_MATRIX_SCALE;
    const columnRadius = Utils.roundSymmetric(this.widthProperty.value * modelToMatrixScale / 2);
    const rowRadius = Utils.roundSymmetric(this.heightProperty.value * modelToMatrixScale / 2);
    context.fillRect(WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION / 2 - columnRadius, WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION / 2 - rowRadius, columnRadius * 2, rowRadius * 2);
  }
}
waveInterference.register('RectangleScene', RectangleScene);
export default RectangleScene;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiVXRpbHMiLCJXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIiwid2F2ZUludGVyZmVyZW5jZSIsIkRpZmZyYWN0aW9uU2NlbmUiLCJSZWN0YW5nbGVTY2VuZSIsImNvbnN0cnVjdG9yIiwid2lkdGhQcm9wZXJ0eSIsInJhbmdlIiwidW5pdHMiLCJoZWlnaHRQcm9wZXJ0eSIsInJlbmRlclRvQ29udGV4dCIsImNvbnRleHQiLCJtb2RlbFRvTWF0cml4U2NhbGUiLCJESUZGUkFDVElPTl9NT0RFTF9UT19NQVRSSVhfU0NBTEUiLCJjb2x1bW5SYWRpdXMiLCJyb3VuZFN5bW1ldHJpYyIsInZhbHVlIiwicm93UmFkaXVzIiwiZmlsbFJlY3QiLCJESUZGUkFDVElPTl9NQVRSSVhfRElNRU5TSU9OIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWN0YW5nbGVTY2VuZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHNjZW5lIHNob3dzIGEgc2luZ2xlIHJlY3Rhbmd1bGFyIGFwZXJ0dXJlIHdpdGggYW4gYWRqdXN0YWJsZSB3aWR0aCBhbmQgaGVpZ2h0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgRGlmZnJhY3Rpb25TY2VuZSBmcm9tICcuL0RpZmZyYWN0aW9uU2NlbmUuanMnO1xyXG5cclxuY2xhc3MgUmVjdGFuZ2xlU2NlbmUgZXh0ZW5kcyBEaWZmcmFjdGlvblNjZW5lIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHdpZHRoUHJvcGVydHk6IE51bWJlclByb3BlcnR5OyAvLyBtbVxyXG4gIHB1YmxpYyByZWFkb25seSBoZWlnaHRQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7IC8vIG1tXHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBjb25zdCB3aWR0aFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCAxMDBFLTMsIHtcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggNDBFLTMsIDQwMEUtMyApLFxyXG4gICAgICB1bml0czogJ21tJ1xyXG4gICAgfSApO1xyXG4gICAgY29uc3QgaGVpZ2h0UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDEwMEUtMywge1xyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCA0MEUtMywgNDAwRS0zICksXHJcbiAgICAgIHVuaXRzOiAnbW0nXHJcbiAgICB9ICk7XHJcbiAgICBzdXBlciggWyB3aWR0aFByb3BlcnR5LCBoZWlnaHRQcm9wZXJ0eSBdICk7XHJcblxyXG4gICAgdGhpcy53aWR0aFByb3BlcnR5ID0gd2lkdGhQcm9wZXJ0eTtcclxuICAgIHRoaXMuaGVpZ2h0UHJvcGVydHkgPSBoZWlnaHRQcm9wZXJ0eTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbmRlciB0aGUgYXBlcnR1cmUgc2hhcGUocykgdG8gdGhlIGNhbnZhcyBjb250ZXh0LlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBvdmVycmlkZSByZW5kZXJUb0NvbnRleHQoIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuICAgIGNvbnN0IG1vZGVsVG9NYXRyaXhTY2FsZSA9IFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTU9ERUxfVE9fTUFUUklYX1NDQUxFO1xyXG4gICAgY29uc3QgY29sdW1uUmFkaXVzID0gVXRpbHMucm91bmRTeW1tZXRyaWMoIHRoaXMud2lkdGhQcm9wZXJ0eS52YWx1ZSAqIG1vZGVsVG9NYXRyaXhTY2FsZSAvIDIgKTtcclxuICAgIGNvbnN0IHJvd1JhZGl1cyA9IFV0aWxzLnJvdW5kU3ltbWV0cmljKCB0aGlzLmhlaWdodFByb3BlcnR5LnZhbHVlICogbW9kZWxUb01hdHJpeFNjYWxlIC8gMiApO1xyXG5cclxuICAgIGNvbnRleHQuZmlsbFJlY3QoXHJcbiAgICAgIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiAvIDIgLSBjb2x1bW5SYWRpdXMsXHJcbiAgICAgIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiAvIDIgLSByb3dSYWRpdXMsXHJcbiAgICAgIGNvbHVtblJhZGl1cyAqIDIsIHJvd1JhZGl1cyAqIDJcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnUmVjdGFuZ2xlU2NlbmUnLCBSZWN0YW5nbGVTY2VuZSApO1xyXG5leHBvcnQgZGVmYXVsdCBSZWN0YW5nbGVTY2VuZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHVDQUF1QztBQUNsRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MseUJBQXlCLE1BQU0sMkNBQTJDO0FBQ2pGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFFcEQsTUFBTUMsY0FBYyxTQUFTRCxnQkFBZ0IsQ0FBQztFQUVHO0VBQ0M7O0VBRXpDRSxXQUFXQSxDQUFBLEVBQUc7SUFFbkIsTUFBTUMsYUFBYSxHQUFHLElBQUlSLGNBQWMsQ0FBRSxNQUFNLEVBQUU7TUFDaERTLEtBQUssRUFBRSxJQUFJUixLQUFLLENBQUUsS0FBSyxFQUFFLE1BQU8sQ0FBQztNQUNqQ1MsS0FBSyxFQUFFO0lBQ1QsQ0FBRSxDQUFDO0lBQ0gsTUFBTUMsY0FBYyxHQUFHLElBQUlYLGNBQWMsQ0FBRSxNQUFNLEVBQUU7TUFDakRTLEtBQUssRUFBRSxJQUFJUixLQUFLLENBQUUsS0FBSyxFQUFFLE1BQU8sQ0FBQztNQUNqQ1MsS0FBSyxFQUFFO0lBQ1QsQ0FBRSxDQUFDO0lBQ0gsS0FBSyxDQUFFLENBQUVGLGFBQWEsRUFBRUcsY0FBYyxDQUFHLENBQUM7SUFFMUMsSUFBSSxDQUFDSCxhQUFhLEdBQUdBLGFBQWE7SUFDbEMsSUFBSSxDQUFDRyxjQUFjLEdBQUdBLGNBQWM7RUFDdEM7O0VBRUE7QUFDRjtBQUNBO0VBQ3FCQyxlQUFlQSxDQUFFQyxPQUFpQyxFQUFTO0lBQzVFLE1BQU1DLGtCQUFrQixHQUFHWCx5QkFBeUIsQ0FBQ1ksaUNBQWlDO0lBQ3RGLE1BQU1DLFlBQVksR0FBR2QsS0FBSyxDQUFDZSxjQUFjLENBQUUsSUFBSSxDQUFDVCxhQUFhLENBQUNVLEtBQUssR0FBR0osa0JBQWtCLEdBQUcsQ0FBRSxDQUFDO0lBQzlGLE1BQU1LLFNBQVMsR0FBR2pCLEtBQUssQ0FBQ2UsY0FBYyxDQUFFLElBQUksQ0FBQ04sY0FBYyxDQUFDTyxLQUFLLEdBQUdKLGtCQUFrQixHQUFHLENBQUUsQ0FBQztJQUU1RkQsT0FBTyxDQUFDTyxRQUFRLENBQ2RqQix5QkFBeUIsQ0FBQ2tCLDRCQUE0QixHQUFHLENBQUMsR0FBR0wsWUFBWSxFQUN6RWIseUJBQXlCLENBQUNrQiw0QkFBNEIsR0FBRyxDQUFDLEdBQUdGLFNBQVMsRUFDdEVILFlBQVksR0FBRyxDQUFDLEVBQUVHLFNBQVMsR0FBRyxDQUNoQyxDQUFDO0VBQ0g7QUFDRjtBQUVBZixnQkFBZ0IsQ0FBQ2tCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWhCLGNBQWUsQ0FBQztBQUM3RCxlQUFlQSxjQUFjIn0=