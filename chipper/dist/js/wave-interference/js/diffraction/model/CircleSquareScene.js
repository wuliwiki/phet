// Copyright 2019-2022, University of Colorado Boulder

/**
 * This scene shows an aperture with an adjustable circle and square.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import Utils from '../../../../dot/js/Utils.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
import DiffractionScene from './DiffractionScene.js';
class CircleSquareScene extends DiffractionScene {
  // mm
  // mm

  constructor() {
    const circleDiameterProperty = new NumberProperty(50 * 1E-3, {
      range: new Range(40 * 1E-3, 150 * 1E-3),
      units: 'mm'
    });
    const squareWidthProperty = new NumberProperty(50 * 1E-3, {
      range: new Range(40 * 1E-3, 150 * 1E-3),
      units: 'mm'
    });
    super([circleDiameterProperty, squareWidthProperty]);
    this.circleDiameterProperty = circleDiameterProperty;
    this.squareWidthProperty = squareWidthProperty;
  }

  /**
   * Render the aperture shape(s) to the canvas context.
   */
  renderToContext(context) {
    const delta = 0.1;
    const circleCenterX = Utils.roundSymmetric(WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION * (1 / 2 - delta));
    const circleCenterY = Utils.roundSymmetric(WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION * (1 / 2 - delta));
    const circleRadius = this.circleDiameterProperty.value / 2 * WaveInterferenceConstants.DIFFRACTION_MODEL_TO_MATRIX_SCALE;
    const squareCenterX = Utils.roundSymmetric(WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION * (1 / 2 + delta));
    const squareCenterY = Utils.roundSymmetric(WaveInterferenceConstants.DIFFRACTION_MATRIX_DIMENSION * (1 / 2 + delta));
    const squareRadius = this.squareWidthProperty.value / 2 * WaveInterferenceConstants.DIFFRACTION_MODEL_TO_MATRIX_SCALE;
    context.beginPath();
    context.arc(circleCenterX, circleCenterY, circleRadius, 0, Math.PI * 2);
    context.fill();
    context.fillRect(squareCenterX - squareRadius, squareCenterY - squareRadius, squareRadius * 2, squareRadius * 2);
  }
}
waveInterference.register('CircleSquareScene', CircleSquareScene);
export default CircleSquareScene;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiVXRpbHMiLCJXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIiwid2F2ZUludGVyZmVyZW5jZSIsIkRpZmZyYWN0aW9uU2NlbmUiLCJDaXJjbGVTcXVhcmVTY2VuZSIsImNvbnN0cnVjdG9yIiwiY2lyY2xlRGlhbWV0ZXJQcm9wZXJ0eSIsInJhbmdlIiwidW5pdHMiLCJzcXVhcmVXaWR0aFByb3BlcnR5IiwicmVuZGVyVG9Db250ZXh0IiwiY29udGV4dCIsImRlbHRhIiwiY2lyY2xlQ2VudGVyWCIsInJvdW5kU3ltbWV0cmljIiwiRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiIsImNpcmNsZUNlbnRlclkiLCJjaXJjbGVSYWRpdXMiLCJ2YWx1ZSIsIkRJRkZSQUNUSU9OX01PREVMX1RPX01BVFJJWF9TQ0FMRSIsInNxdWFyZUNlbnRlclgiLCJzcXVhcmVDZW50ZXJZIiwic3F1YXJlUmFkaXVzIiwiYmVnaW5QYXRoIiwiYXJjIiwiTWF0aCIsIlBJIiwiZmlsbCIsImZpbGxSZWN0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDaXJjbGVTcXVhcmVTY2VuZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHNjZW5lIHNob3dzIGFuIGFwZXJ0dXJlIHdpdGggYW4gYWRqdXN0YWJsZSBjaXJjbGUgYW5kIHNxdWFyZS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1dhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgd2F2ZUludGVyZmVyZW5jZSBmcm9tICcuLi8uLi93YXZlSW50ZXJmZXJlbmNlLmpzJztcclxuaW1wb3J0IERpZmZyYWN0aW9uU2NlbmUgZnJvbSAnLi9EaWZmcmFjdGlvblNjZW5lLmpzJztcclxuXHJcbmNsYXNzIENpcmNsZVNxdWFyZVNjZW5lIGV4dGVuZHMgRGlmZnJhY3Rpb25TY2VuZSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGNpcmNsZURpYW1ldGVyUHJvcGVydHk6IE51bWJlclByb3BlcnR5OyAvLyBtbVxyXG4gIHB1YmxpYyByZWFkb25seSBzcXVhcmVXaWR0aFByb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eTsgLy8gbW1cclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIGNvbnN0IGNpcmNsZURpYW1ldGVyUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDUwICogMUUtMywge1xyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCA0MCAqIDFFLTMsIDE1MCAqIDFFLTMgKSxcclxuICAgICAgdW5pdHM6ICdtbSdcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBzcXVhcmVXaWR0aFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCA1MCAqIDFFLTMsIHtcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggNDAgKiAxRS0zLCAxNTAgKiAxRS0zICksXHJcbiAgICAgIHVuaXRzOiAnbW0nXHJcbiAgICB9ICk7XHJcbiAgICBzdXBlciggWyBjaXJjbGVEaWFtZXRlclByb3BlcnR5LCBzcXVhcmVXaWR0aFByb3BlcnR5IF0gKTtcclxuXHJcbiAgICB0aGlzLmNpcmNsZURpYW1ldGVyUHJvcGVydHkgPSBjaXJjbGVEaWFtZXRlclByb3BlcnR5O1xyXG4gICAgdGhpcy5zcXVhcmVXaWR0aFByb3BlcnR5ID0gc3F1YXJlV2lkdGhQcm9wZXJ0eTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbmRlciB0aGUgYXBlcnR1cmUgc2hhcGUocykgdG8gdGhlIGNhbnZhcyBjb250ZXh0LlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBvdmVycmlkZSByZW5kZXJUb0NvbnRleHQoIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCApOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBkZWx0YSA9IDAuMTtcclxuXHJcbiAgICBjb25zdCBjaXJjbGVDZW50ZXJYID0gVXRpbHMucm91bmRTeW1tZXRyaWMoIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiAqICggMSAvIDIgLSBkZWx0YSApICk7XHJcbiAgICBjb25zdCBjaXJjbGVDZW50ZXJZID0gVXRpbHMucm91bmRTeW1tZXRyaWMoIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTUFUUklYX0RJTUVOU0lPTiAqICggMSAvIDIgLSBkZWx0YSApICk7XHJcbiAgICBjb25zdCBjaXJjbGVSYWRpdXMgPSB0aGlzLmNpcmNsZURpYW1ldGVyUHJvcGVydHkudmFsdWUgLyAyICogV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5ESUZGUkFDVElPTl9NT0RFTF9UT19NQVRSSVhfU0NBTEU7XHJcblxyXG4gICAgY29uc3Qgc3F1YXJlQ2VudGVyWCA9IFV0aWxzLnJvdW5kU3ltbWV0cmljKCBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLkRJRkZSQUNUSU9OX01BVFJJWF9ESU1FTlNJT04gKiAoIDEgLyAyICsgZGVsdGEgKSApO1xyXG4gICAgY29uc3Qgc3F1YXJlQ2VudGVyWSA9IFV0aWxzLnJvdW5kU3ltbWV0cmljKCBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLkRJRkZSQUNUSU9OX01BVFJJWF9ESU1FTlNJT04gKiAoIDEgLyAyICsgZGVsdGEgKSApO1xyXG4gICAgY29uc3Qgc3F1YXJlUmFkaXVzID0gdGhpcy5zcXVhcmVXaWR0aFByb3BlcnR5LnZhbHVlIC8gMiAqIFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuRElGRlJBQ1RJT05fTU9ERUxfVE9fTUFUUklYX1NDQUxFO1xyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LmFyYyggY2lyY2xlQ2VudGVyWCwgY2lyY2xlQ2VudGVyWSwgY2lyY2xlUmFkaXVzLCAwLCBNYXRoLlBJICogMiApO1xyXG4gICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgY29udGV4dC5maWxsUmVjdCggc3F1YXJlQ2VudGVyWCAtIHNxdWFyZVJhZGl1cywgc3F1YXJlQ2VudGVyWSAtIHNxdWFyZVJhZGl1cywgc3F1YXJlUmFkaXVzICogMiwgc3F1YXJlUmFkaXVzICogMiApO1xyXG4gIH1cclxufVxyXG5cclxud2F2ZUludGVyZmVyZW5jZS5yZWdpc3RlciggJ0NpcmNsZVNxdWFyZVNjZW5lJywgQ2lyY2xlU3F1YXJlU2NlbmUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlU3F1YXJlU2NlbmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQztBQUNqRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBRXBELE1BQU1DLGlCQUFpQixTQUFTRCxnQkFBZ0IsQ0FBQztFQUNTO0VBQ0g7O0VBRTlDRSxXQUFXQSxDQUFBLEVBQUc7SUFFbkIsTUFBTUMsc0JBQXNCLEdBQUcsSUFBSVIsY0FBYyxDQUFFLEVBQUUsR0FBRyxJQUFJLEVBQUU7TUFDNURTLEtBQUssRUFBRSxJQUFJUixLQUFLLENBQUUsRUFBRSxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsSUFBSyxDQUFDO01BQ3pDUyxLQUFLLEVBQUU7SUFDVCxDQUFFLENBQUM7SUFFSCxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJWCxjQUFjLENBQUUsRUFBRSxHQUFHLElBQUksRUFBRTtNQUN6RFMsS0FBSyxFQUFFLElBQUlSLEtBQUssQ0FBRSxFQUFFLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxJQUFLLENBQUM7TUFDekNTLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQztJQUNILEtBQUssQ0FBRSxDQUFFRixzQkFBc0IsRUFBRUcsbUJBQW1CLENBQUcsQ0FBQztJQUV4RCxJQUFJLENBQUNILHNCQUFzQixHQUFHQSxzQkFBc0I7SUFDcEQsSUFBSSxDQUFDRyxtQkFBbUIsR0FBR0EsbUJBQW1CO0VBQ2hEOztFQUVBO0FBQ0Y7QUFDQTtFQUNxQkMsZUFBZUEsQ0FBRUMsT0FBaUMsRUFBUztJQUU1RSxNQUFNQyxLQUFLLEdBQUcsR0FBRztJQUVqQixNQUFNQyxhQUFhLEdBQUdiLEtBQUssQ0FBQ2MsY0FBYyxDQUFFYix5QkFBeUIsQ0FBQ2MsNEJBQTRCLElBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0gsS0FBSyxDQUFHLENBQUM7SUFDeEgsTUFBTUksYUFBYSxHQUFHaEIsS0FBSyxDQUFDYyxjQUFjLENBQUViLHlCQUF5QixDQUFDYyw0QkFBNEIsSUFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHSCxLQUFLLENBQUcsQ0FBQztJQUN4SCxNQUFNSyxZQUFZLEdBQUcsSUFBSSxDQUFDWCxzQkFBc0IsQ0FBQ1ksS0FBSyxHQUFHLENBQUMsR0FBR2pCLHlCQUF5QixDQUFDa0IsaUNBQWlDO0lBRXhILE1BQU1DLGFBQWEsR0FBR3BCLEtBQUssQ0FBQ2MsY0FBYyxDQUFFYix5QkFBeUIsQ0FBQ2MsNEJBQTRCLElBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0gsS0FBSyxDQUFHLENBQUM7SUFDeEgsTUFBTVMsYUFBYSxHQUFHckIsS0FBSyxDQUFDYyxjQUFjLENBQUViLHlCQUF5QixDQUFDYyw0QkFBNEIsSUFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHSCxLQUFLLENBQUcsQ0FBQztJQUN4SCxNQUFNVSxZQUFZLEdBQUcsSUFBSSxDQUFDYixtQkFBbUIsQ0FBQ1MsS0FBSyxHQUFHLENBQUMsR0FBR2pCLHlCQUF5QixDQUFDa0IsaUNBQWlDO0lBRXJIUixPQUFPLENBQUNZLFNBQVMsQ0FBQyxDQUFDO0lBQ25CWixPQUFPLENBQUNhLEdBQUcsQ0FBRVgsYUFBYSxFQUFFRyxhQUFhLEVBQUVDLFlBQVksRUFBRSxDQUFDLEVBQUVRLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUUsQ0FBQztJQUN6RWYsT0FBTyxDQUFDZ0IsSUFBSSxDQUFDLENBQUM7SUFFZGhCLE9BQU8sQ0FBQ2lCLFFBQVEsQ0FBRVIsYUFBYSxHQUFHRSxZQUFZLEVBQUVELGFBQWEsR0FBR0MsWUFBWSxFQUFFQSxZQUFZLEdBQUcsQ0FBQyxFQUFFQSxZQUFZLEdBQUcsQ0FBRSxDQUFDO0VBQ3BIO0FBQ0Y7QUFFQXBCLGdCQUFnQixDQUFDMkIsUUFBUSxDQUFFLG1CQUFtQixFQUFFekIsaUJBQWtCLENBQUM7QUFDbkUsZUFBZUEsaUJBQWlCIn0=