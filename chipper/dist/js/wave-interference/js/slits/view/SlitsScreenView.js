// Copyright 2018-2022, University of Colorado Boulder
// @ts-nocheck
/**
 * ScreenView for the Slits screen
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import { Shape } from '../../../../kite/js/imports.js';
import WaveInterferenceQueryParameters from '../../common/WaveInterferenceQueryParameters.js';
import waveInterference from '../../waveInterference.js';
import WavesModel from '../../waves/model/WavesModel.js';
import WavesScreenView from '../../waves/view/WavesScreenView.js';
import BarriersNode from './BarriersNode.js';
import PlaneWaveGeneratorNode from './PlaneWaveGeneratorNode.js';
import SlitsControlPanel from './SlitsControlPanel.js';
import TheoryInterferenceOverlay from './TheoryInterferenceOverlay.js';
class SlitsScreenView extends WavesScreenView {
  /**
   * @param model
   * @param alignGroup - for aligning the control panels on the right side of the lattice
   */
  constructor(model, alignGroup) {
    super(model, alignGroup, {
      showPulseContinuousRadioButtons: false,
      // Show the plane wave generator instead of the individual scene-specific emitters
      showSceneSpecificWaveGeneratorNodes: false
    });

    // The Slits screen has an additional control panel below the main control panel, which controls the barrier/slits
    const slitControlPanel = new SlitsControlPanel(alignGroup, model.sceneProperty, model.waterScene, model.soundScene, model.lightScene, this);

    // When the alignGroup changes the size of the slitsControlPanel, readjust its positioning.  Should only happen
    // during startup.  Use the same pattern as required in WavesScreenView for consistency.
    const updateSlitControlPanel = () => {
      slitControlPanel.mutate({
        left: this.controlPanel.left,
        top: this.controlPanel.bottom + WavesScreenView.SPACING
      });
    };
    updateSlitControlPanel();
    slitControlPanel.boundsProperty.lazyLink(updateSlitControlPanel);
    this.controlPanel.boundsProperty.lazyLink(updateSlitControlPanel);
    this.addChild(slitControlPanel);

    // Make sure tools go in front of this control panel, see https://github.com/phetsims/wave-interference/issues/218
    slitControlPanel.moveToBack();

    // Show the barriers when appropriate. Cannot use ToggleNode because of asymmetry, see the multilink
    const waterBarriersNode = new BarriersNode(model, model.waterScene, this.waveAreaNode.bounds);
    const soundBarriersNode = new BarriersNode(model, model.soundScene, this.waveAreaNode.bounds);
    const lightBarriersNode = new BarriersNode(model, model.lightScene, this.waveAreaNode.bounds);
    Multilink.multilink([model.sceneProperty, model.rotationAmountProperty, model.isRotatingProperty, model.viewpointProperty], (scene, rotationAmount, isRotating, viewpoint) => {
      // Hide the barriers for water side view and while rotating
      const hide = scene === model.waterScene && viewpoint === WavesModel.Viewpoint.SIDE || isRotating;
      waterBarriersNode.visible = !hide && scene === model.waterScene;
      soundBarriersNode.visible = !hide && scene === model.soundScene;
      lightBarriersNode.visible = !hide && scene === model.lightScene;
    });
    this.afterWaveAreaNode.addChild(waterBarriersNode);
    this.afterWaveAreaNode.addChild(soundBarriersNode);
    this.afterWaveAreaNode.addChild(lightBarriersNode);

    // When enabled by a query parameter, show the theoretical interference pattern.
    if (WaveInterferenceQueryParameters.theory) {
      this.addChild(new TheoryInterferenceOverlay(model.sceneProperty, model.scenes, this.waveAreaNode.bounds, {
        interferenceScreen: false,
        clipArea: Shape.bounds(this.waveAreaNode.bounds)
      }));
    }

    // Show the plane wave generator instead of the individual scene-specific emitters
    const planeWaveGeneratorNode = new PlaneWaveGeneratorNode(model, this.waveAreaNode.bounds);
    this.waveGeneratorLayer.addChild(planeWaveGeneratorNode);
  }
}
waveInterference.register('SlitsScreenView', SlitsScreenView);
export default SlitsScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJTaGFwZSIsIldhdmVJbnRlcmZlcmVuY2VRdWVyeVBhcmFtZXRlcnMiLCJ3YXZlSW50ZXJmZXJlbmNlIiwiV2F2ZXNNb2RlbCIsIldhdmVzU2NyZWVuVmlldyIsIkJhcnJpZXJzTm9kZSIsIlBsYW5lV2F2ZUdlbmVyYXRvck5vZGUiLCJTbGl0c0NvbnRyb2xQYW5lbCIsIlRoZW9yeUludGVyZmVyZW5jZU92ZXJsYXkiLCJTbGl0c1NjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwiYWxpZ25Hcm91cCIsInNob3dQdWxzZUNvbnRpbnVvdXNSYWRpb0J1dHRvbnMiLCJzaG93U2NlbmVTcGVjaWZpY1dhdmVHZW5lcmF0b3JOb2RlcyIsInNsaXRDb250cm9sUGFuZWwiLCJzY2VuZVByb3BlcnR5Iiwid2F0ZXJTY2VuZSIsInNvdW5kU2NlbmUiLCJsaWdodFNjZW5lIiwidXBkYXRlU2xpdENvbnRyb2xQYW5lbCIsIm11dGF0ZSIsImxlZnQiLCJjb250cm9sUGFuZWwiLCJ0b3AiLCJib3R0b20iLCJTUEFDSU5HIiwiYm91bmRzUHJvcGVydHkiLCJsYXp5TGluayIsImFkZENoaWxkIiwibW92ZVRvQmFjayIsIndhdGVyQmFycmllcnNOb2RlIiwid2F2ZUFyZWFOb2RlIiwiYm91bmRzIiwic291bmRCYXJyaWVyc05vZGUiLCJsaWdodEJhcnJpZXJzTm9kZSIsIm11bHRpbGluayIsInJvdGF0aW9uQW1vdW50UHJvcGVydHkiLCJpc1JvdGF0aW5nUHJvcGVydHkiLCJ2aWV3cG9pbnRQcm9wZXJ0eSIsInNjZW5lIiwicm90YXRpb25BbW91bnQiLCJpc1JvdGF0aW5nIiwidmlld3BvaW50IiwiaGlkZSIsIlZpZXdwb2ludCIsIlNJREUiLCJ2aXNpYmxlIiwiYWZ0ZXJXYXZlQXJlYU5vZGUiLCJ0aGVvcnkiLCJzY2VuZXMiLCJpbnRlcmZlcmVuY2VTY3JlZW4iLCJjbGlwQXJlYSIsInBsYW5lV2F2ZUdlbmVyYXRvck5vZGUiLCJ3YXZlR2VuZXJhdG9yTGF5ZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNsaXRzU2NyZWVuVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLy8gQHRzLW5vY2hlY2tcclxuLyoqXHJcbiAqIFNjcmVlblZpZXcgZm9yIHRoZSBTbGl0cyBzY3JlZW5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vV2F2ZUludGVyZmVyZW5jZVF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgV2F2ZXNNb2RlbCBmcm9tICcuLi8uLi93YXZlcy9tb2RlbC9XYXZlc01vZGVsLmpzJztcclxuaW1wb3J0IFdhdmVzU2NyZWVuVmlldyBmcm9tICcuLi8uLi93YXZlcy92aWV3L1dhdmVzU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBCYXJyaWVyc05vZGUgZnJvbSAnLi9CYXJyaWVyc05vZGUuanMnO1xyXG5pbXBvcnQgUGxhbmVXYXZlR2VuZXJhdG9yTm9kZSBmcm9tICcuL1BsYW5lV2F2ZUdlbmVyYXRvck5vZGUuanMnO1xyXG5pbXBvcnQgU2xpdHNDb250cm9sUGFuZWwgZnJvbSAnLi9TbGl0c0NvbnRyb2xQYW5lbC5qcyc7XHJcbmltcG9ydCBUaGVvcnlJbnRlcmZlcmVuY2VPdmVybGF5IGZyb20gJy4vVGhlb3J5SW50ZXJmZXJlbmNlT3ZlcmxheS5qcyc7XHJcblxyXG5jbGFzcyBTbGl0c1NjcmVlblZpZXcgZXh0ZW5kcyBXYXZlc1NjcmVlblZpZXcge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gbW9kZWxcclxuICAgKiBAcGFyYW0gYWxpZ25Hcm91cCAtIGZvciBhbGlnbmluZyB0aGUgY29udHJvbCBwYW5lbHMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGxhdHRpY2VcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsLCBhbGlnbkdyb3VwICkge1xyXG4gICAgc3VwZXIoIG1vZGVsLCBhbGlnbkdyb3VwLCB7XHJcbiAgICAgIHNob3dQdWxzZUNvbnRpbnVvdXNSYWRpb0J1dHRvbnM6IGZhbHNlLFxyXG5cclxuICAgICAgLy8gU2hvdyB0aGUgcGxhbmUgd2F2ZSBnZW5lcmF0b3IgaW5zdGVhZCBvZiB0aGUgaW5kaXZpZHVhbCBzY2VuZS1zcGVjaWZpYyBlbWl0dGVyc1xyXG4gICAgICBzaG93U2NlbmVTcGVjaWZpY1dhdmVHZW5lcmF0b3JOb2RlczogZmFsc2VcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBUaGUgU2xpdHMgc2NyZWVuIGhhcyBhbiBhZGRpdGlvbmFsIGNvbnRyb2wgcGFuZWwgYmVsb3cgdGhlIG1haW4gY29udHJvbCBwYW5lbCwgd2hpY2ggY29udHJvbHMgdGhlIGJhcnJpZXIvc2xpdHNcclxuICAgIGNvbnN0IHNsaXRDb250cm9sUGFuZWwgPSBuZXcgU2xpdHNDb250cm9sUGFuZWwoXHJcbiAgICAgIGFsaWduR3JvdXAsIG1vZGVsLnNjZW5lUHJvcGVydHksIG1vZGVsLndhdGVyU2NlbmUsIG1vZGVsLnNvdW5kU2NlbmUsIG1vZGVsLmxpZ2h0U2NlbmUsIHRoaXNcclxuICAgICk7XHJcblxyXG4gICAgLy8gV2hlbiB0aGUgYWxpZ25Hcm91cCBjaGFuZ2VzIHRoZSBzaXplIG9mIHRoZSBzbGl0c0NvbnRyb2xQYW5lbCwgcmVhZGp1c3QgaXRzIHBvc2l0aW9uaW5nLiAgU2hvdWxkIG9ubHkgaGFwcGVuXHJcbiAgICAvLyBkdXJpbmcgc3RhcnR1cC4gIFVzZSB0aGUgc2FtZSBwYXR0ZXJuIGFzIHJlcXVpcmVkIGluIFdhdmVzU2NyZWVuVmlldyBmb3IgY29uc2lzdGVuY3kuXHJcbiAgICBjb25zdCB1cGRhdGVTbGl0Q29udHJvbFBhbmVsID0gKCkgPT4ge1xyXG4gICAgICBzbGl0Q29udHJvbFBhbmVsLm11dGF0ZSgge1xyXG4gICAgICAgIGxlZnQ6IHRoaXMuY29udHJvbFBhbmVsLmxlZnQsXHJcbiAgICAgICAgdG9wOiB0aGlzLmNvbnRyb2xQYW5lbC5ib3R0b20gKyBXYXZlc1NjcmVlblZpZXcuU1BBQ0lOR1xyXG4gICAgICB9ICk7XHJcbiAgICB9O1xyXG4gICAgdXBkYXRlU2xpdENvbnRyb2xQYW5lbCgpO1xyXG4gICAgc2xpdENvbnRyb2xQYW5lbC5ib3VuZHNQcm9wZXJ0eS5sYXp5TGluayggdXBkYXRlU2xpdENvbnRyb2xQYW5lbCApO1xyXG4gICAgdGhpcy5jb250cm9sUGFuZWwuYm91bmRzUHJvcGVydHkubGF6eUxpbmsoIHVwZGF0ZVNsaXRDb250cm9sUGFuZWwgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHNsaXRDb250cm9sUGFuZWwgKTtcclxuXHJcbiAgICAvLyBNYWtlIHN1cmUgdG9vbHMgZ28gaW4gZnJvbnQgb2YgdGhpcyBjb250cm9sIHBhbmVsLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3dhdmUtaW50ZXJmZXJlbmNlL2lzc3Vlcy8yMThcclxuICAgIHNsaXRDb250cm9sUGFuZWwubW92ZVRvQmFjaygpO1xyXG5cclxuICAgIC8vIFNob3cgdGhlIGJhcnJpZXJzIHdoZW4gYXBwcm9wcmlhdGUuIENhbm5vdCB1c2UgVG9nZ2xlTm9kZSBiZWNhdXNlIG9mIGFzeW1tZXRyeSwgc2VlIHRoZSBtdWx0aWxpbmtcclxuICAgIGNvbnN0IHdhdGVyQmFycmllcnNOb2RlID0gbmV3IEJhcnJpZXJzTm9kZSggbW9kZWwsIG1vZGVsLndhdGVyU2NlbmUsIHRoaXMud2F2ZUFyZWFOb2RlLmJvdW5kcyApO1xyXG4gICAgY29uc3Qgc291bmRCYXJyaWVyc05vZGUgPSBuZXcgQmFycmllcnNOb2RlKCBtb2RlbCwgbW9kZWwuc291bmRTY2VuZSwgdGhpcy53YXZlQXJlYU5vZGUuYm91bmRzICk7XHJcbiAgICBjb25zdCBsaWdodEJhcnJpZXJzTm9kZSA9IG5ldyBCYXJyaWVyc05vZGUoIG1vZGVsLCBtb2RlbC5saWdodFNjZW5lLCB0aGlzLndhdmVBcmVhTm9kZS5ib3VuZHMgKTtcclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoXHJcbiAgICAgIFsgbW9kZWwuc2NlbmVQcm9wZXJ0eSwgbW9kZWwucm90YXRpb25BbW91bnRQcm9wZXJ0eSwgbW9kZWwuaXNSb3RhdGluZ1Byb3BlcnR5LCBtb2RlbC52aWV3cG9pbnRQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHNjZW5lLCByb3RhdGlvbkFtb3VudCwgaXNSb3RhdGluZywgdmlld3BvaW50ICkgPT4ge1xyXG5cclxuICAgICAgICAvLyBIaWRlIHRoZSBiYXJyaWVycyBmb3Igd2F0ZXIgc2lkZSB2aWV3IGFuZCB3aGlsZSByb3RhdGluZ1xyXG4gICAgICAgIGNvbnN0IGhpZGUgPSBzY2VuZSA9PT0gbW9kZWwud2F0ZXJTY2VuZSAmJiB2aWV3cG9pbnQgPT09IFdhdmVzTW9kZWwuVmlld3BvaW50LlNJREUgfHwgaXNSb3RhdGluZztcclxuICAgICAgICB3YXRlckJhcnJpZXJzTm9kZS52aXNpYmxlID0gIWhpZGUgJiYgc2NlbmUgPT09IG1vZGVsLndhdGVyU2NlbmU7XHJcbiAgICAgICAgc291bmRCYXJyaWVyc05vZGUudmlzaWJsZSA9ICFoaWRlICYmIHNjZW5lID09PSBtb2RlbC5zb3VuZFNjZW5lO1xyXG4gICAgICAgIGxpZ2h0QmFycmllcnNOb2RlLnZpc2libGUgPSAhaGlkZSAmJiBzY2VuZSA9PT0gbW9kZWwubGlnaHRTY2VuZTtcclxuICAgICAgfSApO1xyXG4gICAgdGhpcy5hZnRlcldhdmVBcmVhTm9kZS5hZGRDaGlsZCggd2F0ZXJCYXJyaWVyc05vZGUgKTtcclxuICAgIHRoaXMuYWZ0ZXJXYXZlQXJlYU5vZGUuYWRkQ2hpbGQoIHNvdW5kQmFycmllcnNOb2RlICk7XHJcbiAgICB0aGlzLmFmdGVyV2F2ZUFyZWFOb2RlLmFkZENoaWxkKCBsaWdodEJhcnJpZXJzTm9kZSApO1xyXG5cclxuICAgIC8vIFdoZW4gZW5hYmxlZCBieSBhIHF1ZXJ5IHBhcmFtZXRlciwgc2hvdyB0aGUgdGhlb3JldGljYWwgaW50ZXJmZXJlbmNlIHBhdHRlcm4uXHJcbiAgICBpZiAoIFdhdmVJbnRlcmZlcmVuY2VRdWVyeVBhcmFtZXRlcnMudGhlb3J5ICkge1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCBuZXcgVGhlb3J5SW50ZXJmZXJlbmNlT3ZlcmxheSggbW9kZWwuc2NlbmVQcm9wZXJ0eSwgbW9kZWwuc2NlbmVzLCB0aGlzLndhdmVBcmVhTm9kZS5ib3VuZHMsIHtcclxuICAgICAgICBpbnRlcmZlcmVuY2VTY3JlZW46IGZhbHNlLFxyXG4gICAgICAgIGNsaXBBcmVhOiBTaGFwZS5ib3VuZHMoIHRoaXMud2F2ZUFyZWFOb2RlLmJvdW5kcyApXHJcbiAgICAgIH0gKSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNob3cgdGhlIHBsYW5lIHdhdmUgZ2VuZXJhdG9yIGluc3RlYWQgb2YgdGhlIGluZGl2aWR1YWwgc2NlbmUtc3BlY2lmaWMgZW1pdHRlcnNcclxuICAgIGNvbnN0IHBsYW5lV2F2ZUdlbmVyYXRvck5vZGUgPSBuZXcgUGxhbmVXYXZlR2VuZXJhdG9yTm9kZSggbW9kZWwsIHRoaXMud2F2ZUFyZWFOb2RlLmJvdW5kcyApO1xyXG4gICAgdGhpcy53YXZlR2VuZXJhdG9yTGF5ZXIuYWRkQ2hpbGQoIHBsYW5lV2F2ZUdlbmVyYXRvck5vZGUgKTtcclxuICB9XHJcbn1cclxuXHJcbndhdmVJbnRlcmZlcmVuY2UucmVnaXN0ZXIoICdTbGl0c1NjcmVlblZpZXcnLCBTbGl0c1NjcmVlblZpZXcgKTtcclxu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