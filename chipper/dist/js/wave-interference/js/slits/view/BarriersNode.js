// Copyright 2018-2022, University of Colorado Boulder
// @ts-nocheck
/**
 * Renders the draggable barrier with one or two slits.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import DynamicProperty from '../../../../axon/js/DynamicProperty.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import { DragListener, Node, Rectangle } from '../../../../scenery/js/imports.js';
import Scene from '../../common/model/Scene.js';
import WaveInterferenceConstants from '../../common/WaveInterferenceConstants.js';
import waveInterference from '../../waveInterference.js';
// constants
const CORNER_RADIUS = 2;
class BarriersNode extends Node {
  constructor(model, scene, waveAreaViewBounds) {
    /**
     * Creates one of the 3 recycled rectangles used for rendering the barriers.
     */
    const createRectangle = () => new Rectangle(0, 0, 0, 0, {
      fill: '#f3d99b',
      stroke: 'black',
      lineWidth: 1,
      cornerRadius: CORNER_RADIUS
    });
    const rectangleA = createRectangle();
    const rectangleB = createRectangle();
    const rectangleC = createRectangle();
    super({
      cursor: 'pointer',
      children: [rectangleA, rectangleB, rectangleC]
    });
    this.model = model;
    this.scene = scene;
    this.waveAreaViewBounds = waveAreaViewBounds;
    this.rectangleA = rectangleA;
    this.rectangleB = rectangleB;
    this.rectangleC = rectangleC;

    // @private - Width of the barrier
    this.barrierWidth = scene.latticeToViewTransform.modelToViewDeltaX(WaveInterferenceConstants.CALIBRATION_SCALE);
    this.addInputListener(new DragListener({
      mapPosition: modelPosition => {
        // Constrain to lie within 80% of the wave area
        const erodedBounds = scene.lattice.visibleBounds.erodedX(scene.lattice.visibleBounds.width / 10);
        return erodedBounds.closestPointTo(modelPosition);
      },
      // Use continuous value for drag handler
      positionProperty: scene.barrierPositionProperty,
      transform: scene.latticeToViewTransform
    }));

    // @private - draggable double-headed arrow beneath the barrier
    this.arrowNode = new ArrowNode(0, 0, 56, 0, {
      doubleHead: true,
      fill: '#61af5e',
      headHeight: 18,
      headWidth: 18,
      tailWidth: 8
    });
    this.addChild(this.arrowNode);
    const barrierTypeDynamicProperty = new DynamicProperty(model.sceneProperty, {
      derive: 'barrierTypeProperty',
      bidirectional: true
    });

    // Update shapes when the model parameters change
    const update = this.update.bind(this);
    barrierTypeDynamicProperty.link(update);
    scene.barrierLatticeCoordinateProperty.link(update);
    scene.slitWidthProperty.link(update);
    scene.slitSeparationProperty.link(update);
    model.resetEmitter.addListener(update);
  }

  /**
   * Update the shapes and text when the rotationAmount has changed
   */
  update() {
    const barrierType = this.scene.barrierTypeProperty.get();
    const scene = this.scene;
    const slitWidth = scene.slitWidthProperty.get();
    const slitSeparation = scene.slitSeparationProperty.get();

    // Barrier origin in view coordinates, sets the parent node position for compatibility with DragListener,
    // see https://github.com/phetsims/wave-interference/issues/75
    this.x = scene.latticeToViewTransform.modelToViewX(scene.barrierLatticeCoordinateProperty.value);
    if (barrierType === Scene.BarrierType.NO_BARRIER) {
      // No need to add children
      this.rectangleA.visible = false;
      this.rectangleB.visible = false;
      this.rectangleC.visible = false;
      this.arrowNode.visible = false;
    } else {
      const waveAreaTop = this.waveAreaViewBounds.top;
      if (barrierType === Scene.BarrierType.ONE_SLIT) {
        this.rectangleA.visible = true;
        this.rectangleB.visible = true;
        this.rectangleC.visible = false;
        this.arrowNode.visible = true;
        const slitWidthView = scene.modelViewTransform.modelToViewDeltaY(slitWidth);
        const y1 = this.waveAreaViewBounds.centerY - slitWidthView / 2;
        const y2 = this.waveAreaViewBounds.centerY + slitWidthView / 2;
        this.rectangleA.setRect(0, waveAreaTop, this.barrierWidth, y1 - waveAreaTop, CORNER_RADIUS, CORNER_RADIUS);
        this.rectangleB.setRect(0, y2, this.barrierWidth, this.waveAreaViewBounds.bottom - y2, CORNER_RADIUS, CORNER_RADIUS);
        this.arrowNode.centerX = this.barrierWidth / 2;
        this.arrowNode.top = this.rectangleB.bottom + 2;
      } else if (barrierType === Scene.BarrierType.TWO_SLITS) {
        this.rectangleA.visible = true;
        this.rectangleB.visible = true;
        this.rectangleC.visible = true;
        this.arrowNode.visible = true;
        const waveAreaWidth = scene.waveAreaWidth;
        const bottomOfTopBarrier = scene.modelViewTransform.modelToViewY(waveAreaWidth / 2 - slitSeparation / 2 - slitWidth / 2);
        const topOfCentralBarrier = scene.modelViewTransform.modelToViewY(waveAreaWidth / 2 - slitSeparation / 2 + slitWidth / 2);
        const bottomOfCentralBarrier = scene.modelViewTransform.modelToViewY(waveAreaWidth / 2 + slitSeparation / 2 - slitWidth / 2);
        const topOfBottomBarrier = scene.modelViewTransform.modelToViewY(waveAreaWidth / 2 + slitSeparation / 2 + slitWidth / 2);
        this.rectangleA.setRect(0, waveAreaTop, this.barrierWidth, Math.max(0, bottomOfTopBarrier - waveAreaTop), CORNER_RADIUS, CORNER_RADIUS);
        this.rectangleB.setRect(0, topOfCentralBarrier, this.barrierWidth, Math.max(bottomOfCentralBarrier - topOfCentralBarrier, 0), CORNER_RADIUS, CORNER_RADIUS);
        this.rectangleC.setRect(0, topOfBottomBarrier, this.barrierWidth, Math.max(this.waveAreaViewBounds.bottom - topOfBottomBarrier), CORNER_RADIUS, CORNER_RADIUS);
        this.arrowNode.centerX = this.barrierWidth / 2;
        this.arrowNode.top = this.rectangleC.bottom + 2;
      }
    }
  }
}
waveInterference.register('BarriersNode', BarriersNode);
export default BarriersNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEeW5hbWljUHJvcGVydHkiLCJBcnJvd05vZGUiLCJEcmFnTGlzdGVuZXIiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiU2NlbmUiLCJXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIiwid2F2ZUludGVyZmVyZW5jZSIsIkNPUk5FUl9SQURJVVMiLCJCYXJyaWVyc05vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwic2NlbmUiLCJ3YXZlQXJlYVZpZXdCb3VuZHMiLCJjcmVhdGVSZWN0YW5nbGUiLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwiY29ybmVyUmFkaXVzIiwicmVjdGFuZ2xlQSIsInJlY3RhbmdsZUIiLCJyZWN0YW5nbGVDIiwiY3Vyc29yIiwiY2hpbGRyZW4iLCJiYXJyaWVyV2lkdGgiLCJsYXR0aWNlVG9WaWV3VHJhbnNmb3JtIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJDQUxJQlJBVElPTl9TQ0FMRSIsImFkZElucHV0TGlzdGVuZXIiLCJtYXBQb3NpdGlvbiIsIm1vZGVsUG9zaXRpb24iLCJlcm9kZWRCb3VuZHMiLCJsYXR0aWNlIiwidmlzaWJsZUJvdW5kcyIsImVyb2RlZFgiLCJ3aWR0aCIsImNsb3Nlc3RQb2ludFRvIiwicG9zaXRpb25Qcm9wZXJ0eSIsImJhcnJpZXJQb3NpdGlvblByb3BlcnR5IiwidHJhbnNmb3JtIiwiYXJyb3dOb2RlIiwiZG91YmxlSGVhZCIsImhlYWRIZWlnaHQiLCJoZWFkV2lkdGgiLCJ0YWlsV2lkdGgiLCJhZGRDaGlsZCIsImJhcnJpZXJUeXBlRHluYW1pY1Byb3BlcnR5Iiwic2NlbmVQcm9wZXJ0eSIsImRlcml2ZSIsImJpZGlyZWN0aW9uYWwiLCJ1cGRhdGUiLCJiaW5kIiwibGluayIsImJhcnJpZXJMYXR0aWNlQ29vcmRpbmF0ZVByb3BlcnR5Iiwic2xpdFdpZHRoUHJvcGVydHkiLCJzbGl0U2VwYXJhdGlvblByb3BlcnR5IiwicmVzZXRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJiYXJyaWVyVHlwZSIsImJhcnJpZXJUeXBlUHJvcGVydHkiLCJnZXQiLCJzbGl0V2lkdGgiLCJzbGl0U2VwYXJhdGlvbiIsIngiLCJtb2RlbFRvVmlld1giLCJ2YWx1ZSIsIkJhcnJpZXJUeXBlIiwiTk9fQkFSUklFUiIsInZpc2libGUiLCJ3YXZlQXJlYVRvcCIsInRvcCIsIk9ORV9TTElUIiwic2xpdFdpZHRoVmlldyIsIm1vZGVsVmlld1RyYW5zZm9ybSIsIm1vZGVsVG9WaWV3RGVsdGFZIiwieTEiLCJjZW50ZXJZIiwieTIiLCJzZXRSZWN0IiwiYm90dG9tIiwiY2VudGVyWCIsIlRXT19TTElUUyIsIndhdmVBcmVhV2lkdGgiLCJib3R0b21PZlRvcEJhcnJpZXIiLCJtb2RlbFRvVmlld1kiLCJ0b3BPZkNlbnRyYWxCYXJyaWVyIiwiYm90dG9tT2ZDZW50cmFsQmFycmllciIsInRvcE9mQm90dG9tQmFycmllciIsIk1hdGgiLCJtYXgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJhcnJpZXJzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLy8gQHRzLW5vY2hlY2tcclxuLyoqXHJcbiAqIFJlbmRlcnMgdGhlIGRyYWdnYWJsZSBiYXJyaWVyIHdpdGggb25lIG9yIHR3byBzbGl0cy5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRHluYW1pY1Byb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRHluYW1pY1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIsIE5vZGUsIFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTY2VuZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU2NlbmUuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgU2xpdHNNb2RlbCBmcm9tICcuLi9tb2RlbC9TbGl0c01vZGVsLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBDT1JORVJfUkFESVVTID0gMjtcclxuXHJcbmNsYXNzIEJhcnJpZXJzTm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVjdGFuZ2xlQTogUmVjdGFuZ2xlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVjdGFuZ2xlQjogUmVjdGFuZ2xlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVjdGFuZ2xlQzogUmVjdGFuZ2xlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYmFycmllcldpZHRoOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBhcnJvd05vZGU6IEFycm93Tm9kZTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcml2YXRlIHJlYWRvbmx5IG1vZGVsOiBTbGl0c01vZGVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzY2VuZTogU2NlbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHdhdmVBcmVhVmlld0JvdW5kczogQm91bmRzMiApIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgb25lIG9mIHRoZSAzIHJlY3ljbGVkIHJlY3RhbmdsZXMgdXNlZCBmb3IgcmVuZGVyaW5nIHRoZSBiYXJyaWVycy5cclxuICAgICAqL1xyXG4gICAgY29uc3QgY3JlYXRlUmVjdGFuZ2xlID0gKCkgPT4gbmV3IFJlY3RhbmdsZSggMCwgMCwgMCwgMCwge1xyXG4gICAgICBmaWxsOiAnI2YzZDk5YicsXHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICBjb3JuZXJSYWRpdXM6IENPUk5FUl9SQURJVVNcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCByZWN0YW5nbGVBID0gY3JlYXRlUmVjdGFuZ2xlKCk7XHJcbiAgICBjb25zdCByZWN0YW5nbGVCID0gY3JlYXRlUmVjdGFuZ2xlKCk7XHJcbiAgICBjb25zdCByZWN0YW5nbGVDID0gY3JlYXRlUmVjdGFuZ2xlKCk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICAgIGNoaWxkcmVuOiBbIHJlY3RhbmdsZUEsIHJlY3RhbmdsZUIsIHJlY3RhbmdsZUMgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMucmVjdGFuZ2xlQSA9IHJlY3RhbmdsZUE7XHJcbiAgICB0aGlzLnJlY3RhbmdsZUIgPSByZWN0YW5nbGVCO1xyXG4gICAgdGhpcy5yZWN0YW5nbGVDID0gcmVjdGFuZ2xlQztcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSAtIFdpZHRoIG9mIHRoZSBiYXJyaWVyXHJcbiAgICB0aGlzLmJhcnJpZXJXaWR0aCA9IHNjZW5lLmxhdHRpY2VUb1ZpZXdUcmFuc2Zvcm0hLm1vZGVsVG9WaWV3RGVsdGFYKCBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLkNBTElCUkFUSU9OX1NDQUxFICk7XHJcblxyXG4gICAgdGhpcy5hZGRJbnB1dExpc3RlbmVyKCBuZXcgRHJhZ0xpc3RlbmVyKCB7XHJcbiAgICAgIG1hcFBvc2l0aW9uOiBtb2RlbFBvc2l0aW9uID0+IHtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RyYWluIHRvIGxpZSB3aXRoaW4gODAlIG9mIHRoZSB3YXZlIGFyZWFcclxuICAgICAgICBjb25zdCBlcm9kZWRCb3VuZHMgPSBzY2VuZS5sYXR0aWNlLnZpc2libGVCb3VuZHMuZXJvZGVkWCggc2NlbmUubGF0dGljZS52aXNpYmxlQm91bmRzLndpZHRoIC8gMTAgKTtcclxuICAgICAgICByZXR1cm4gZXJvZGVkQm91bmRzLmNsb3Nlc3RQb2ludFRvKCBtb2RlbFBvc2l0aW9uICk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBVc2UgY29udGludW91cyB2YWx1ZSBmb3IgZHJhZyBoYW5kbGVyXHJcbiAgICAgIHBvc2l0aW9uUHJvcGVydHk6IHNjZW5lLmJhcnJpZXJQb3NpdGlvblByb3BlcnR5LFxyXG4gICAgICB0cmFuc2Zvcm06IHNjZW5lLmxhdHRpY2VUb1ZpZXdUcmFuc2Zvcm1cclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIC0gZHJhZ2dhYmxlIGRvdWJsZS1oZWFkZWQgYXJyb3cgYmVuZWF0aCB0aGUgYmFycmllclxyXG4gICAgdGhpcy5hcnJvd05vZGUgPSBuZXcgQXJyb3dOb2RlKCAwLCAwLCA1NiwgMCwge1xyXG4gICAgICBkb3VibGVIZWFkOiB0cnVlLFxyXG4gICAgICBmaWxsOiAnIzYxYWY1ZScsXHJcbiAgICAgIGhlYWRIZWlnaHQ6IDE4LFxyXG4gICAgICBoZWFkV2lkdGg6IDE4LFxyXG4gICAgICB0YWlsV2lkdGg6IDhcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuYXJyb3dOb2RlICk7XHJcblxyXG4gICAgY29uc3QgYmFycmllclR5cGVEeW5hbWljUHJvcGVydHkgPSBuZXcgRHluYW1pY1Byb3BlcnR5KCBtb2RlbC5zY2VuZVByb3BlcnR5LCB7XHJcbiAgICAgIGRlcml2ZTogJ2JhcnJpZXJUeXBlUHJvcGVydHknLFxyXG4gICAgICBiaWRpcmVjdGlvbmFsOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHNoYXBlcyB3aGVuIHRoZSBtb2RlbCBwYXJhbWV0ZXJzIGNoYW5nZVxyXG4gICAgY29uc3QgdXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCggdGhpcyApO1xyXG4gICAgYmFycmllclR5cGVEeW5hbWljUHJvcGVydHkubGluayggdXBkYXRlICk7XHJcbiAgICBzY2VuZS5iYXJyaWVyTGF0dGljZUNvb3JkaW5hdGVQcm9wZXJ0eS5saW5rKCB1cGRhdGUgKTtcclxuICAgIHNjZW5lLnNsaXRXaWR0aFByb3BlcnR5LmxpbmsoIHVwZGF0ZSApO1xyXG4gICAgc2NlbmUuc2xpdFNlcGFyYXRpb25Qcm9wZXJ0eS5saW5rKCB1cGRhdGUgKTtcclxuICAgIG1vZGVsLnJlc2V0RW1pdHRlci5hZGRMaXN0ZW5lciggdXBkYXRlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgdGhlIHNoYXBlcyBhbmQgdGV4dCB3aGVuIHRoZSByb3RhdGlvbkFtb3VudCBoYXMgY2hhbmdlZFxyXG4gICAqL1xyXG4gIHByaXZhdGUgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgY29uc3QgYmFycmllclR5cGUgPSB0aGlzLnNjZW5lLmJhcnJpZXJUeXBlUHJvcGVydHkuZ2V0KCk7XHJcbiAgICBjb25zdCBzY2VuZSA9IHRoaXMuc2NlbmU7XHJcbiAgICBjb25zdCBzbGl0V2lkdGggPSBzY2VuZS5zbGl0V2lkdGhQcm9wZXJ0eS5nZXQoKTtcclxuICAgIGNvbnN0IHNsaXRTZXBhcmF0aW9uID0gc2NlbmUuc2xpdFNlcGFyYXRpb25Qcm9wZXJ0eS5nZXQoKTtcclxuXHJcbiAgICAvLyBCYXJyaWVyIG9yaWdpbiBpbiB2aWV3IGNvb3JkaW5hdGVzLCBzZXRzIHRoZSBwYXJlbnQgbm9kZSBwb3NpdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIERyYWdMaXN0ZW5lcixcclxuICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvd2F2ZS1pbnRlcmZlcmVuY2UvaXNzdWVzLzc1XHJcbiAgICB0aGlzLnggPSBzY2VuZS5sYXR0aWNlVG9WaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggc2NlbmUuYmFycmllckxhdHRpY2VDb29yZGluYXRlUHJvcGVydHkudmFsdWUgKTtcclxuXHJcbiAgICBpZiAoIGJhcnJpZXJUeXBlID09PSBTY2VuZS5CYXJyaWVyVHlwZS5OT19CQVJSSUVSICkge1xyXG5cclxuICAgICAgLy8gTm8gbmVlZCB0byBhZGQgY2hpbGRyZW5cclxuICAgICAgdGhpcy5yZWN0YW5nbGVBLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5yZWN0YW5nbGVCLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5yZWN0YW5nbGVDLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5hcnJvd05vZGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNvbnN0IHdhdmVBcmVhVG9wID0gdGhpcy53YXZlQXJlYVZpZXdCb3VuZHMudG9wO1xyXG4gICAgICBpZiAoIGJhcnJpZXJUeXBlID09PSBTY2VuZS5CYXJyaWVyVHlwZS5PTkVfU0xJVCApIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZWN0YW5nbGVBLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVjdGFuZ2xlQi52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlY3RhbmdsZUMudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXJyb3dOb2RlLnZpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICBjb25zdCBzbGl0V2lkdGhWaWV3ID0gc2NlbmUubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCBzbGl0V2lkdGggKTtcclxuICAgICAgICBjb25zdCB5MSA9IHRoaXMud2F2ZUFyZWFWaWV3Qm91bmRzLmNlbnRlclkgLSBzbGl0V2lkdGhWaWV3IC8gMjtcclxuICAgICAgICBjb25zdCB5MiA9IHRoaXMud2F2ZUFyZWFWaWV3Qm91bmRzLmNlbnRlclkgKyBzbGl0V2lkdGhWaWV3IC8gMjtcclxuICAgICAgICB0aGlzLnJlY3RhbmdsZUEuc2V0UmVjdCggMCwgd2F2ZUFyZWFUb3AsIHRoaXMuYmFycmllcldpZHRoLCB5MSAtIHdhdmVBcmVhVG9wLCBDT1JORVJfUkFESVVTLCBDT1JORVJfUkFESVVTICk7XHJcbiAgICAgICAgdGhpcy5yZWN0YW5nbGVCLnNldFJlY3QoIDAsIHkyLCB0aGlzLmJhcnJpZXJXaWR0aCwgdGhpcy53YXZlQXJlYVZpZXdCb3VuZHMuYm90dG9tIC0geTIsIENPUk5FUl9SQURJVVMsIENPUk5FUl9SQURJVVMgKTtcclxuICAgICAgICB0aGlzLmFycm93Tm9kZS5jZW50ZXJYID0gdGhpcy5iYXJyaWVyV2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMuYXJyb3dOb2RlLnRvcCA9IHRoaXMucmVjdGFuZ2xlQi5ib3R0b20gKyAyO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBiYXJyaWVyVHlwZSA9PT0gU2NlbmUuQmFycmllclR5cGUuVFdPX1NMSVRTICkge1xyXG4gICAgICAgIHRoaXMucmVjdGFuZ2xlQS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlY3RhbmdsZUIudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWN0YW5nbGVDLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYXJyb3dOb2RlLnZpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICBjb25zdCB3YXZlQXJlYVdpZHRoID0gc2NlbmUud2F2ZUFyZWFXaWR0aDtcclxuICAgICAgICBjb25zdCBib3R0b21PZlRvcEJhcnJpZXIgPSBzY2VuZS5tb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgICAgICAgIC5tb2RlbFRvVmlld1koIHdhdmVBcmVhV2lkdGggLyAyIC0gc2xpdFNlcGFyYXRpb24gLyAyIC0gc2xpdFdpZHRoIC8gMiApO1xyXG4gICAgICAgIGNvbnN0IHRvcE9mQ2VudHJhbEJhcnJpZXIgPSBzY2VuZS5tb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgICAgICAgIC5tb2RlbFRvVmlld1koIHdhdmVBcmVhV2lkdGggLyAyIC0gc2xpdFNlcGFyYXRpb24gLyAyICsgc2xpdFdpZHRoIC8gMiApO1xyXG4gICAgICAgIGNvbnN0IGJvdHRvbU9mQ2VudHJhbEJhcnJpZXIgPSBzY2VuZS5tb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgICAgICAgIC5tb2RlbFRvVmlld1koIHdhdmVBcmVhV2lkdGggLyAyICsgc2xpdFNlcGFyYXRpb24gLyAyIC0gc2xpdFdpZHRoIC8gMiApO1xyXG4gICAgICAgIGNvbnN0IHRvcE9mQm90dG9tQmFycmllciA9IHNjZW5lLm1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAgICAgICAgLm1vZGVsVG9WaWV3WSggd2F2ZUFyZWFXaWR0aCAvIDIgKyBzbGl0U2VwYXJhdGlvbiAvIDIgKyBzbGl0V2lkdGggLyAyICk7XHJcbiAgICAgICAgdGhpcy5yZWN0YW5nbGVBLnNldFJlY3QoXHJcbiAgICAgICAgICAwLCB3YXZlQXJlYVRvcCxcclxuICAgICAgICAgIHRoaXMuYmFycmllcldpZHRoLCBNYXRoLm1heCggMCwgYm90dG9tT2ZUb3BCYXJyaWVyIC0gd2F2ZUFyZWFUb3AgKSxcclxuICAgICAgICAgIENPUk5FUl9SQURJVVMsIENPUk5FUl9SQURJVVNcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMucmVjdGFuZ2xlQi5zZXRSZWN0KFxyXG4gICAgICAgICAgMCwgdG9wT2ZDZW50cmFsQmFycmllcixcclxuICAgICAgICAgIHRoaXMuYmFycmllcldpZHRoLCBNYXRoLm1heCggYm90dG9tT2ZDZW50cmFsQmFycmllciAtIHRvcE9mQ2VudHJhbEJhcnJpZXIsIDAgKSxcclxuICAgICAgICAgIENPUk5FUl9SQURJVVMsIENPUk5FUl9SQURJVVNcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMucmVjdGFuZ2xlQy5zZXRSZWN0KFxyXG4gICAgICAgICAgMCwgdG9wT2ZCb3R0b21CYXJyaWVyLFxyXG4gICAgICAgICAgdGhpcy5iYXJyaWVyV2lkdGgsIE1hdGgubWF4KCB0aGlzLndhdmVBcmVhVmlld0JvdW5kcy5ib3R0b20gLSB0b3BPZkJvdHRvbUJhcnJpZXIgKSxcclxuICAgICAgICAgIENPUk5FUl9SQURJVVMsIENPUk5FUl9SQURJVVNcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuYXJyb3dOb2RlLmNlbnRlclggPSB0aGlzLmJhcnJpZXJXaWR0aCAvIDI7XHJcbiAgICAgICAgdGhpcy5hcnJvd05vZGUudG9wID0gdGhpcy5yZWN0YW5nbGVDLmJvdHRvbSArIDI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbndhdmVJbnRlcmZlcmVuY2UucmVnaXN0ZXIoICdCYXJyaWVyc05vZGUnLCBCYXJyaWVyc05vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQmFycmllcnNOb2RlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFFcEUsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxTQUFTQyxZQUFZLEVBQUVDLElBQUksRUFBRUMsU0FBUyxRQUFRLG1DQUFtQztBQUNqRixPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQztBQUNqRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFHeEQ7QUFDQSxNQUFNQyxhQUFhLEdBQUcsQ0FBQztBQUV2QixNQUFNQyxZQUFZLFNBQVNOLElBQUksQ0FBQztFQU92Qk8sV0FBV0EsQ0FBbUJDLEtBQWlCLEVBQ2pCQyxLQUFZLEVBQ1pDLGtCQUEyQixFQUFHO0lBRWpFO0FBQ0o7QUFDQTtJQUNJLE1BQU1DLGVBQWUsR0FBR0EsQ0FBQSxLQUFNLElBQUlWLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7TUFDdkRXLElBQUksRUFBRSxTQUFTO01BQ2ZDLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLFNB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