// Copyright 2018-2022, University of Colorado Boulder

/**
 * Controls the amplitude for each Scene.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Node } from '../../../../scenery/js/imports.js';
import waveInterference from '../../waveInterference.js';
import WaveInterferenceStrings from '../../WaveInterferenceStrings.js';
import WaterScene from '../model/WaterScene.js';
import WaveInterferenceUtils from '../WaveInterferenceUtils.js';
import SceneToggleNode from './SceneToggleNode.js';
import WaveInterferenceSlider from './WaveInterferenceSlider.js';
import WaveInterferenceText from './WaveInterferenceText.js';
const amplitudeString = WaveInterferenceStrings.amplitude;
class AmplitudeControl extends Node {
  constructor(model) {
    const amplitudeTitle = new WaveInterferenceText(amplitudeString);
    const sliderContainer = new SceneToggleNode(model, scene => {
      // For water scene, control the desiredAmplitude (which determines the size of the water drops)
      // For other scenes, control the amplitude directly.
      return new WaveInterferenceSlider(scene instanceof WaterScene ? scene.desiredAmplitudeProperty : scene.amplitudeProperty);
    });
    sliderContainer.centerX = amplitudeTitle.centerX;
    sliderContainer.top = amplitudeTitle.bottom + WaveInterferenceUtils.getSliderTitleSpacing(amplitudeTitle);
    super({
      children: [amplitudeTitle, sliderContainer]
    });
  }
}
waveInterference.register('AmplitudeControl', AmplitudeControl);
export default AmplitudeControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwid2F2ZUludGVyZmVyZW5jZSIsIldhdmVJbnRlcmZlcmVuY2VTdHJpbmdzIiwiV2F0ZXJTY2VuZSIsIldhdmVJbnRlcmZlcmVuY2VVdGlscyIsIlNjZW5lVG9nZ2xlTm9kZSIsIldhdmVJbnRlcmZlcmVuY2VTbGlkZXIiLCJXYXZlSW50ZXJmZXJlbmNlVGV4dCIsImFtcGxpdHVkZVN0cmluZyIsImFtcGxpdHVkZSIsIkFtcGxpdHVkZUNvbnRyb2wiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwiYW1wbGl0dWRlVGl0bGUiLCJzbGlkZXJDb250YWluZXIiLCJzY2VuZSIsImRlc2lyZWRBbXBsaXR1ZGVQcm9wZXJ0eSIsImFtcGxpdHVkZVByb3BlcnR5IiwiY2VudGVyWCIsInRvcCIsImJvdHRvbSIsImdldFNsaWRlclRpdGxlU3BhY2luZyIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBbXBsaXR1ZGVDb250cm9sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2xzIHRoZSBhbXBsaXR1ZGUgZm9yIGVhY2ggU2NlbmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MgZnJvbSAnLi4vLi4vV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgV2F2ZXNNb2RlbCBmcm9tICcuLi8uLi93YXZlcy9tb2RlbC9XYXZlc01vZGVsLmpzJztcclxuaW1wb3J0IFdhdGVyU2NlbmUgZnJvbSAnLi4vbW9kZWwvV2F0ZXJTY2VuZS5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlVXRpbHMgZnJvbSAnLi4vV2F2ZUludGVyZmVyZW5jZVV0aWxzLmpzJztcclxuaW1wb3J0IFNjZW5lVG9nZ2xlTm9kZSBmcm9tICcuL1NjZW5lVG9nZ2xlTm9kZS5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlU2xpZGVyIGZyb20gJy4vV2F2ZUludGVyZmVyZW5jZVNsaWRlci5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlVGV4dCBmcm9tICcuL1dhdmVJbnRlcmZlcmVuY2VUZXh0LmpzJztcclxuXHJcbmNvbnN0IGFtcGxpdHVkZVN0cmluZyA9IFdhdmVJbnRlcmZlcmVuY2VTdHJpbmdzLmFtcGxpdHVkZTtcclxuXHJcbmNsYXNzIEFtcGxpdHVkZUNvbnRyb2wgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbDogV2F2ZXNNb2RlbCApIHtcclxuXHJcbiAgICBjb25zdCBhbXBsaXR1ZGVUaXRsZSA9IG5ldyBXYXZlSW50ZXJmZXJlbmNlVGV4dCggYW1wbGl0dWRlU3RyaW5nICk7XHJcblxyXG4gICAgY29uc3Qgc2xpZGVyQ29udGFpbmVyID0gbmV3IFNjZW5lVG9nZ2xlTm9kZSggbW9kZWwsIHNjZW5lID0+IHtcclxuXHJcbiAgICAgIC8vIEZvciB3YXRlciBzY2VuZSwgY29udHJvbCB0aGUgZGVzaXJlZEFtcGxpdHVkZSAod2hpY2ggZGV0ZXJtaW5lcyB0aGUgc2l6ZSBvZiB0aGUgd2F0ZXIgZHJvcHMpXHJcbiAgICAgIC8vIEZvciBvdGhlciBzY2VuZXMsIGNvbnRyb2wgdGhlIGFtcGxpdHVkZSBkaXJlY3RseS5cclxuICAgICAgcmV0dXJuIG5ldyBXYXZlSW50ZXJmZXJlbmNlU2xpZGVyKCBzY2VuZSBpbnN0YW5jZW9mIFdhdGVyU2NlbmUgPyBzY2VuZS5kZXNpcmVkQW1wbGl0dWRlUHJvcGVydHkgOiBzY2VuZS5hbXBsaXR1ZGVQcm9wZXJ0eSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHNsaWRlckNvbnRhaW5lci5jZW50ZXJYID0gYW1wbGl0dWRlVGl0bGUuY2VudGVyWDtcclxuICAgIHNsaWRlckNvbnRhaW5lci50b3AgPSBhbXBsaXR1ZGVUaXRsZS5ib3R0b20gKyBXYXZlSW50ZXJmZXJlbmNlVXRpbHMuZ2V0U2xpZGVyVGl0bGVTcGFjaW5nKCBhbXBsaXR1ZGVUaXRsZSApO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIGFtcGxpdHVkZVRpdGxlLCBzbGlkZXJDb250YWluZXIgXVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxud2F2ZUludGVyZmVyZW5jZS5yZWdpc3RlciggJ0FtcGxpdHVkZUNvbnRyb2wnLCBBbXBsaXR1ZGVDb250cm9sICk7XHJcbmV4cG9ydCBkZWZhdWx0IEFtcGxpdHVkZUNvbnRyb2w7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUV0RSxPQUFPQyxVQUFVLE1BQU0sd0JBQXdCO0FBQy9DLE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUMvRCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUNoRSxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsTUFBTUMsZUFBZSxHQUFHTix1QkFBdUIsQ0FBQ08sU0FBUztBQUV6RCxNQUFNQyxnQkFBZ0IsU0FBU1YsSUFBSSxDQUFDO0VBRTNCVyxXQUFXQSxDQUFFQyxLQUFpQixFQUFHO0lBRXRDLE1BQU1DLGNBQWMsR0FBRyxJQUFJTixvQkFBb0IsQ0FBRUMsZUFBZ0IsQ0FBQztJQUVsRSxNQUFNTSxlQUFlLEdBQUcsSUFBSVQsZUFBZSxDQUFFTyxLQUFLLEVBQUVHLEtBQUssSUFBSTtNQUUzRDtNQUNBO01BQ0EsT0FBTyxJQUFJVCxzQkFBc0IsQ0FBRVMsS0FBSyxZQUFZWixVQUFVLEdBQUdZLEtBQUssQ0FBQ0Msd0JBQXdCLEdBQUdELEtBQUssQ0FBQ0UsaUJBQWtCLENBQUM7SUFDN0gsQ0FBRSxDQUFDO0lBRUhILGVBQWUsQ0FBQ0ksT0FBTyxHQUFHTCxjQUFjLENBQUNLLE9BQU87SUFDaERKLGVBQWUsQ0FBQ0ssR0FBRyxHQUFHTixjQUFjLENBQUNPLE1BQU0sR0FBR2hCLHFCQUFxQixDQUFDaUIscUJBQXFCLENBQUVSLGNBQWUsQ0FBQztJQUUzRyxLQUFLLENBQUU7TUFDTFMsUUFBUSxFQUFFLENBQUVULGNBQWMsRUFBRUMsZUFBZTtJQUM3QyxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFiLGdCQUFnQixDQUFDc0IsUUFBUSxDQUFFLGtCQUFrQixFQUFFYixnQkFBaUIsQ0FBQztBQUNqRSxlQUFlQSxnQkFBZ0IifQ==