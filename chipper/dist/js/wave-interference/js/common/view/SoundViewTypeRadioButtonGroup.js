// Copyright 2018-2023, University of Colorado Boulder
// @ts-nocheck
/**
 * Convenience class for the radio button group that chooses between SoundScene.SoundViewType.VALUES.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import waveInterference from '../../waveInterference.js';
import WaveInterferenceStrings from '../../WaveInterferenceStrings.js';
import SoundScene from '../model/SoundScene.js';
import WaveInterferenceConstants from '../WaveInterferenceConstants.js';
import WaveInterferenceText from './WaveInterferenceText.js';
const bothString = WaveInterferenceStrings.both;
const particlesString = WaveInterferenceStrings.particles;
const wavesString = WaveInterferenceStrings.waves;
class SoundViewTypeRadioButtonGroup extends VerticalAquaRadioButtonGroup {
  constructor(model) {
    super(model.soundScene.soundViewTypeProperty, [{
      createNode: () => new WaveInterferenceText(wavesString, WaveInterferenceConstants.CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS),
      value: SoundScene.SoundViewType.WAVES
    }, {
      createNode: () => new WaveInterferenceText(particlesString, WaveInterferenceConstants.CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS),
      value: SoundScene.SoundViewType.PARTICLES
    }, {
      createNode: () => new WaveInterferenceText(bothString, WaveInterferenceConstants.CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS),
      value: SoundScene.SoundViewType.BOTH
    }], {
      spacing: 4,
      radioButtonOptions: {
        // Manually tuned so the radio buttons have the same width as the "Graph" checkbox
        radius: 6.5
      }
    });
  }
}
waveInterference.register('SoundViewTypeRadioButtonGroup', SoundViewTypeRadioButtonGroup);
export default SoundViewTypeRadioButtonGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIiwid2F2ZUludGVyZmVyZW5jZSIsIldhdmVJbnRlcmZlcmVuY2VTdHJpbmdzIiwiU291bmRTY2VuZSIsIldhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMiLCJXYXZlSW50ZXJmZXJlbmNlVGV4dCIsImJvdGhTdHJpbmciLCJib3RoIiwicGFydGljbGVzU3RyaW5nIiwicGFydGljbGVzIiwid2F2ZXNTdHJpbmciLCJ3YXZlcyIsIlNvdW5kVmlld1R5cGVSYWRpb0J1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInNvdW5kU2NlbmUiLCJzb3VuZFZpZXdUeXBlUHJvcGVydHkiLCJjcmVhdGVOb2RlIiwiQ09OVFJPTF9QQU5FTF9URVhUX01BWF9XSURUSF9PUFRJT05TIiwidmFsdWUiLCJTb3VuZFZpZXdUeXBlIiwiV0FWRVMiLCJQQVJUSUNMRVMiLCJCT1RIIiwic3BhY2luZyIsInJhZGlvQnV0dG9uT3B0aW9ucyIsInJhZGl1cyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU291bmRWaWV3VHlwZVJhZGlvQnV0dG9uR3JvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8vIEB0cy1ub2NoZWNrXHJcbi8qKlxyXG4gKiBDb252ZW5pZW5jZSBjbGFzcyBmb3IgdGhlIHJhZGlvIGJ1dHRvbiBncm91cCB0aGF0IGNob29zZXMgYmV0d2VlbiBTb3VuZFNjZW5lLlNvdW5kVmlld1R5cGUuVkFMVUVTLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9WZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IHdhdmVJbnRlcmZlcmVuY2UgZnJvbSAnLi4vLi4vd2F2ZUludGVyZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncyBmcm9tICcuLi8uLi9XYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBTb3VuZFNjZW5lIGZyb20gJy4uL21vZGVsL1NvdW5kU2NlbmUuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cyBmcm9tICcuLi9XYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VUZXh0IGZyb20gJy4vV2F2ZUludGVyZmVyZW5jZVRleHQuanMnO1xyXG5pbXBvcnQgV2F2ZXNNb2RlbCBmcm9tICcuLi8uLi93YXZlcy9tb2RlbC9XYXZlc01vZGVsLmpzJztcclxuXHJcbmNvbnN0IGJvdGhTdHJpbmcgPSBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy5ib3RoO1xyXG5jb25zdCBwYXJ0aWNsZXNTdHJpbmcgPSBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy5wYXJ0aWNsZXM7XHJcbmNvbnN0IHdhdmVzU3RyaW5nID0gV2F2ZUludGVyZmVyZW5jZVN0cmluZ3Mud2F2ZXM7XHJcblxyXG5jbGFzcyBTb3VuZFZpZXdUeXBlUmFkaW9CdXR0b25Hcm91cCBleHRlbmRzIFZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBXYXZlc01vZGVsICkge1xyXG4gICAgc3VwZXIoIG1vZGVsLnNvdW5kU2NlbmUuc291bmRWaWV3VHlwZVByb3BlcnR5LCBbIHtcclxuICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFdhdmVJbnRlcmZlcmVuY2VUZXh0KCB3YXZlc1N0cmluZywgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5DT05UUk9MX1BBTkVMX1RFWFRfTUFYX1dJRFRIX09QVElPTlMgKSxcclxuICAgICAgdmFsdWU6IFNvdW5kU2NlbmUuU291bmRWaWV3VHlwZS5XQVZFU1xyXG4gICAgfSwge1xyXG4gICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgV2F2ZUludGVyZmVyZW5jZVRleHQoIHBhcnRpY2xlc1N0cmluZywgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5DT05UUk9MX1BBTkVMX1RFWFRfTUFYX1dJRFRIX09QVElPTlMgKSxcclxuICAgICAgdmFsdWU6IFNvdW5kU2NlbmUuU291bmRWaWV3VHlwZS5QQVJUSUNMRVNcclxuICAgIH0sIHtcclxuICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFdhdmVJbnRlcmZlcmVuY2VUZXh0KCBib3RoU3RyaW5nLCBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfVEVYVF9NQVhfV0lEVEhfT1BUSU9OUyApLFxyXG4gICAgICB2YWx1ZTogU291bmRTY2VuZS5Tb3VuZFZpZXdUeXBlLkJPVEhcclxuICAgIH0gXSwge1xyXG4gICAgICBzcGFjaW5nOiA0LFxyXG4gICAgICByYWRpb0J1dHRvbk9wdGlvbnM6IHtcclxuXHJcbiAgICAgICAgLy8gTWFudWFsbHkgdHVuZWQgc28gdGhlIHJhZGlvIGJ1dHRvbnMgaGF2ZSB0aGUgc2FtZSB3aWR0aCBhcyB0aGUgXCJHcmFwaFwiIGNoZWNrYm94XHJcbiAgICAgICAgcmFkaXVzOiA2LjVcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxud2F2ZUludGVyZmVyZW5jZS5yZWdpc3RlciggJ1NvdW5kVmlld1R5cGVSYWRpb0J1dHRvbkdyb3VwJywgU291bmRWaWV3VHlwZVJhZGlvQnV0dG9uR3JvdXAgKTtcclxuZXhwb3J0IGRlZmF1bHQgU291bmRWaWV3VHlwZVJhZGlvQnV0dG9uR3JvdXA7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSw0QkFBNEIsTUFBTSxvREFBb0Q7QUFDN0YsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyxVQUFVLE1BQU0sd0JBQXdCO0FBQy9DLE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFHNUQsTUFBTUMsVUFBVSxHQUFHSix1QkFBdUIsQ0FBQ0ssSUFBSTtBQUMvQyxNQUFNQyxlQUFlLEdBQUdOLHVCQUF1QixDQUFDTyxTQUFTO0FBQ3pELE1BQU1DLFdBQVcsR0FBR1IsdUJBQXVCLENBQUNTLEtBQUs7QUFFakQsTUFBTUMsNkJBQTZCLFNBQVNaLDRCQUE0QixDQUFDO0VBRWhFYSxXQUFXQSxDQUFFQyxLQUFpQixFQUFHO0lBQ3RDLEtBQUssQ0FBRUEsS0FBSyxDQUFDQyxVQUFVLENBQUNDLHFCQUFxQixFQUFFLENBQUU7TUFDL0NDLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUlaLG9CQUFvQixDQUFFSyxXQUFXLEVBQUVOLHlCQUF5QixDQUFDYyxvQ0FBcUMsQ0FBQztNQUN6SEMsS0FBSyxFQUFFaEIsVUFBVSxDQUFDaUIsYUFBYSxDQUFDQztJQUNsQyxDQUFDLEVBQUU7TUFDREosVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSVosb0JBQW9CLENBQUVHLGVBQWUsRUFBRUoseUJBQXlCLENBQUNjLG9DQUFxQyxDQUFDO01BQzdIQyxLQUFLLEVBQUVoQixVQUFVLENBQUNpQixhQUFhLENBQUNFO0lBQ2xDLENBQUMsRUFBRTtNQUNETCxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJWixvQkFBb0IsQ0FBRUMsVUFBVSxFQUFFRix5QkFBeUIsQ0FBQ2Msb0NBQXFDLENBQUM7TUFDeEhDLEtBQUssRUFBRWhCLFVBQVUsQ0FBQ2lCLGFBQWEsQ0FBQ0c7SUFDbEMsQ0FBQyxDQUFFLEVBQUU7TUFDSEMsT0FBTyxFQUFFLENBQUM7TUFDVkMsa0JBQWtCLEVBQUU7UUFFbEI7UUFDQUMsTUFBTSxFQUFFO01BQ1Y7SUFDRixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUF6QixnQkFBZ0IsQ0FBQzBCLFFBQVEsQ0FBRSwrQkFBK0IsRUFBRWYsNkJBQThCLENBQUM7QUFDM0YsZUFBZUEsNkJBQTZCIn0=