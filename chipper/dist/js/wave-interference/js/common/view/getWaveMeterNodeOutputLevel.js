// Copyright 2020-2022, University of Colorado Boulder

import PiecewiseLinearFunction from '../../../../dot/js/PiecewiseLinearFunction.js';
import Utils from '../../../../dot/js/Utils.js';

/**
 * Converts a wave value to a volume for the WaveMeterNode
 * @author Sam Reid (PhET Interactive Simulations)
 */
const getWaveMeterNodeOutputLevel = value => {
  // Linearize based on the sine value
  const clampedValue = Utils.clamp(value, -1.6, 1.6);
  const normalized = Utils.linear(-1.6, 1.6, -1, 1, clampedValue);
  const arcsin1 = Math.asin(normalized); // between -pi/2 and +pi/2
  const arcsin1Mapped = Utils.linear(-Math.PI / 2, Math.PI / 2, -1, 1, arcsin1);
  const arcsin2 = Math.asin(arcsin1Mapped);
  const arcsin2Mapped = Utils.linear(-Math.PI / 2, Math.PI / 2, -1, 1, arcsin2);
  let outputLevel = Math.abs(arcsin2Mapped);
  if (outputLevel < 0.05) {
    outputLevel = 0.05;
  }
  if (outputLevel > 0.4) {
    outputLevel = 0.4;
  }

  // Roughly quadratic
  outputLevel = PiecewiseLinearFunction.evaluate([0.05, 0, 0.1, 0.05, 0.2, 0.2, 0.3, 0.5, 0.4, 1], outputLevel);
  return outputLevel / 0.15;
};
export default getWaveMeterNodeOutputLevel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaWVjZXdpc2VMaW5lYXJGdW5jdGlvbiIsIlV0aWxzIiwiZ2V0V2F2ZU1ldGVyTm9kZU91dHB1dExldmVsIiwidmFsdWUiLCJjbGFtcGVkVmFsdWUiLCJjbGFtcCIsIm5vcm1hbGl6ZWQiLCJsaW5lYXIiLCJhcmNzaW4xIiwiTWF0aCIsImFzaW4iLCJhcmNzaW4xTWFwcGVkIiwiUEkiLCJhcmNzaW4yIiwiYXJjc2luMk1hcHBlZCIsIm91dHB1dExldmVsIiwiYWJzIiwiZXZhbHVhdGUiXSwic291cmNlcyI6WyJnZXRXYXZlTWV0ZXJOb2RlT3V0cHV0TGV2ZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5pbXBvcnQgUGllY2V3aXNlTGluZWFyRnVuY3Rpb24gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1BpZWNld2lzZUxpbmVhckZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgYSB3YXZlIHZhbHVlIHRvIGEgdm9sdW1lIGZvciB0aGUgV2F2ZU1ldGVyTm9kZVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuY29uc3QgZ2V0V2F2ZU1ldGVyTm9kZU91dHB1dExldmVsID0gKCB2YWx1ZTogbnVtYmVyICk6IG51bWJlciA9PiB7XHJcblxyXG4gIC8vIExpbmVhcml6ZSBiYXNlZCBvbiB0aGUgc2luZSB2YWx1ZVxyXG4gIGNvbnN0IGNsYW1wZWRWYWx1ZSA9IFV0aWxzLmNsYW1wKCB2YWx1ZSwgLTEuNiwgMS42ICk7XHJcbiAgY29uc3Qgbm9ybWFsaXplZCA9IFV0aWxzLmxpbmVhciggLTEuNiwgMS42LCAtMSwgMSwgY2xhbXBlZFZhbHVlICk7XHJcblxyXG4gIGNvbnN0IGFyY3NpbjEgPSBNYXRoLmFzaW4oIG5vcm1hbGl6ZWQgKTsgLy8gYmV0d2VlbiAtcGkvMiBhbmQgK3BpLzJcclxuICBjb25zdCBhcmNzaW4xTWFwcGVkID0gVXRpbHMubGluZWFyKCAtTWF0aC5QSSAvIDIsIE1hdGguUEkgLyAyLCAtMSwgMSwgYXJjc2luMSApO1xyXG4gIGNvbnN0IGFyY3NpbjIgPSBNYXRoLmFzaW4oIGFyY3NpbjFNYXBwZWQgKTtcclxuICBjb25zdCBhcmNzaW4yTWFwcGVkID0gVXRpbHMubGluZWFyKCAtTWF0aC5QSSAvIDIsIE1hdGguUEkgLyAyLCAtMSwgMSwgYXJjc2luMiApO1xyXG5cclxuICBsZXQgb3V0cHV0TGV2ZWwgPSBNYXRoLmFicyggYXJjc2luMk1hcHBlZCApO1xyXG5cclxuICBpZiAoIG91dHB1dExldmVsIDwgMC4wNSApIHtcclxuICAgIG91dHB1dExldmVsID0gMC4wNTtcclxuICB9XHJcbiAgaWYgKCBvdXRwdXRMZXZlbCA+IDAuNCApIHtcclxuICAgIG91dHB1dExldmVsID0gMC40O1xyXG4gIH1cclxuXHJcbiAgLy8gUm91Z2hseSBxdWFkcmF0aWNcclxuICBvdXRwdXRMZXZlbCA9IFBpZWNld2lzZUxpbmVhckZ1bmN0aW9uLmV2YWx1YXRlKCBbXHJcbiAgICAwLjA1LCAwLFxyXG4gICAgMC4xLCAwLjA1LFxyXG4gICAgMC4yLCAwLjIsXHJcbiAgICAwLjMsIDAuNSxcclxuICAgIDAuNCwgMVxyXG4gIF0sIG91dHB1dExldmVsICk7XHJcblxyXG4gIHJldHVybiBvdXRwdXRMZXZlbCAvIDAuMTU7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGdldFdhdmVNZXRlck5vZGVPdXRwdXRMZXZlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQU9BLHVCQUF1QixNQUFNLCtDQUErQztBQUNuRixPQUFPQyxLQUFLLE1BQU0sNkJBQTZCOztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLDJCQUEyQixHQUFLQyxLQUFhLElBQWM7RUFFL0Q7RUFDQSxNQUFNQyxZQUFZLEdBQUdILEtBQUssQ0FBQ0ksS0FBSyxDQUFFRixLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBSSxDQUFDO0VBQ3BELE1BQU1HLFVBQVUsR0FBR0wsS0FBSyxDQUFDTSxNQUFNLENBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRUgsWUFBYSxDQUFDO0VBRWpFLE1BQU1JLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxJQUFJLENBQUVKLFVBQVcsQ0FBQyxDQUFDLENBQUM7RUFDekMsTUFBTUssYUFBYSxHQUFHVixLQUFLLENBQUNNLE1BQU0sQ0FBRSxDQUFDRSxJQUFJLENBQUNHLEVBQUUsR0FBRyxDQUFDLEVBQUVILElBQUksQ0FBQ0csRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVKLE9BQVEsQ0FBQztFQUMvRSxNQUFNSyxPQUFPLEdBQUdKLElBQUksQ0FBQ0MsSUFBSSxDQUFFQyxhQUFjLENBQUM7RUFDMUMsTUFBTUcsYUFBYSxHQUFHYixLQUFLLENBQUNNLE1BQU0sQ0FBRSxDQUFDRSxJQUFJLENBQUNHLEVBQUUsR0FBRyxDQUFDLEVBQUVILElBQUksQ0FBQ0csRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVDLE9BQVEsQ0FBQztFQUUvRSxJQUFJRSxXQUFXLEdBQUdOLElBQUksQ0FBQ08sR0FBRyxDQUFFRixhQUFjLENBQUM7RUFFM0MsSUFBS0MsV0FBVyxHQUFHLElBQUksRUFBRztJQUN4QkEsV0FBVyxHQUFHLElBQUk7RUFDcEI7RUFDQSxJQUFLQSxXQUFXLEdBQUcsR0FBRyxFQUFHO0lBQ3ZCQSxXQUFXLEdBQUcsR0FBRztFQUNuQjs7RUFFQTtFQUNBQSxXQUFXLEdBQUdmLHVCQUF1QixDQUFDaUIsUUFBUSxDQUFFLENBQzlDLElBQUksRUFBRSxDQUFDLEVBQ1AsR0FBRyxFQUFFLElBQUksRUFDVCxHQUFHLEVBQUUsR0FBRyxFQUNSLEdBQUcsRUFBRSxHQUFHLEVBQ1IsR0FBRyxFQUFFLENBQUMsQ0FDUCxFQUFFRixXQUFZLENBQUM7RUFFaEIsT0FBT0EsV0FBVyxHQUFHLElBQUk7QUFDM0IsQ0FBQztBQUNELGVBQWViLDJCQUEyQiJ9