// Copyright 2019-2022, University of Colorado Boulder

/**
 * A StopwatchNode customized for Wave Interference
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import StringProperty from '../../../../axon/js/StringProperty.js';
import Range from '../../../../dot/js/Range.js';
import merge from '../../../../phet-core/js/merge.js';
import StopwatchNode from '../../../../scenery-phet/js/StopwatchNode.js';
import waveInterference from '../../waveInterference.js';
import WaveInterferenceConstants from '../WaveInterferenceConstants.js';
import WaveInterferenceText from './WaveInterferenceText.js';
class WaveInterferenceStopwatchNode extends StopwatchNode {
  constructor(model, config) {
    // Construct the StopwatchNode with the unitsNode reserving the max amount of space it will need
    const widestScene = _.maxBy(model.scenes, scene => new WaveInterferenceText(scene.timeUnits).width);
    const unitsProperty = new StringProperty(widestScene.timeUnits);
    const createNumberFormatter = units => StopwatchNode.createRichTextNumberFormatter({
      showAsMinutesAndSeconds: false,
      units: units
    });
    config = merge({
      numberDisplayRange: new Range(0, 999.99),
      numberDisplayOptions: {
        numberFormatter: createNumberFormatter(unitsProperty.value),
        maxWidth: WaveInterferenceConstants.MAX_WIDTH
      }
    }, config);
    assert && assert(!!config.dragListenerOptions, 'end is a required argument');
    assert && assert(!!config.dragBoundsProperty, 'dragBoundsProperty is a required argument');
    super(model.stopwatch, config);
    unitsProperty.link(units => this.setNumberFormatter(createNumberFormatter(units)));

    // After the StopwatchNode is initialized with the maximal layout, use the correct initial value for the current
    // timeUnits
    model.sceneProperty.link(scene => {
      unitsProperty.value = scene.timeUnits;
      this.redrawNumberDisplay();
    });
  }
}
waveInterference.register('WaveInterferenceStopwatchNode', WaveInterferenceStopwatchNode);
export default WaveInterferenceStopwatchNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdQcm9wZXJ0eSIsIlJhbmdlIiwibWVyZ2UiLCJTdG9wd2F0Y2hOb2RlIiwid2F2ZUludGVyZmVyZW5jZSIsIldhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMiLCJXYXZlSW50ZXJmZXJlbmNlVGV4dCIsIldhdmVJbnRlcmZlcmVuY2VTdG9wd2F0Y2hOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsImNvbmZpZyIsIndpZGVzdFNjZW5lIiwiXyIsIm1heEJ5Iiwic2NlbmVzIiwic2NlbmUiLCJ0aW1lVW5pdHMiLCJ3aWR0aCIsInVuaXRzUHJvcGVydHkiLCJjcmVhdGVOdW1iZXJGb3JtYXR0ZXIiLCJ1bml0cyIsImNyZWF0ZVJpY2hUZXh0TnVtYmVyRm9ybWF0dGVyIiwic2hvd0FzTWludXRlc0FuZFNlY29uZHMiLCJudW1iZXJEaXNwbGF5UmFuZ2UiLCJudW1iZXJEaXNwbGF5T3B0aW9ucyIsIm51bWJlckZvcm1hdHRlciIsInZhbHVlIiwibWF4V2lkdGgiLCJNQVhfV0lEVEgiLCJhc3NlcnQiLCJkcmFnTGlzdGVuZXJPcHRpb25zIiwiZHJhZ0JvdW5kc1Byb3BlcnR5Iiwic3RvcHdhdGNoIiwibGluayIsInNldE51bWJlckZvcm1hdHRlciIsInNjZW5lUHJvcGVydHkiLCJyZWRyYXdOdW1iZXJEaXNwbGF5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYXZlSW50ZXJmZXJlbmNlU3RvcHdhdGNoTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIFN0b3B3YXRjaE5vZGUgY3VzdG9taXplZCBmb3IgV2F2ZSBJbnRlcmZlcmVuY2VcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgU3RyaW5nUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9TdHJpbmdQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFN0b3B3YXRjaE5vZGUsIHsgU3RvcHdhdGNoTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvU3RvcHdhdGNoTm9kZS5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgV2F2ZXNNb2RlbCBmcm9tICcuLi8uLi93YXZlcy9tb2RlbC9XYXZlc01vZGVsLmpzJztcclxuaW1wb3J0IFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMgZnJvbSAnLi4vV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlVGV4dCBmcm9tICcuL1dhdmVJbnRlcmZlcmVuY2VUZXh0LmpzJztcclxuXHJcbmNsYXNzIFdhdmVJbnRlcmZlcmVuY2VTdG9wd2F0Y2hOb2RlIGV4dGVuZHMgU3RvcHdhdGNoTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IFdhdmVzTW9kZWwsIGNvbmZpZz86IFN0b3B3YXRjaE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIC8vIENvbnN0cnVjdCB0aGUgU3RvcHdhdGNoTm9kZSB3aXRoIHRoZSB1bml0c05vZGUgcmVzZXJ2aW5nIHRoZSBtYXggYW1vdW50IG9mIHNwYWNlIGl0IHdpbGwgbmVlZFxyXG4gICAgY29uc3Qgd2lkZXN0U2NlbmUgPSBfLm1heEJ5KCBtb2RlbC5zY2VuZXMsIHNjZW5lID0+IG5ldyBXYXZlSW50ZXJmZXJlbmNlVGV4dCggc2NlbmUudGltZVVuaXRzICkud2lkdGggKSE7XHJcblxyXG4gICAgY29uc3QgdW5pdHNQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggd2lkZXN0U2NlbmUudGltZVVuaXRzICk7XHJcblxyXG4gICAgY29uc3QgY3JlYXRlTnVtYmVyRm9ybWF0dGVyID0gKCB1bml0czogc3RyaW5nICkgPT4gU3RvcHdhdGNoTm9kZS5jcmVhdGVSaWNoVGV4dE51bWJlckZvcm1hdHRlcigge1xyXG4gICAgICBzaG93QXNNaW51dGVzQW5kU2Vjb25kczogZmFsc2UsXHJcbiAgICAgIHVuaXRzOiB1bml0c1xyXG4gICAgfSApO1xyXG4gICAgY29uZmlnID0gbWVyZ2UoIHtcclxuICAgICAgbnVtYmVyRGlzcGxheVJhbmdlOiBuZXcgUmFuZ2UoIDAsIDk5OS45OSApLFxyXG4gICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgIG51bWJlckZvcm1hdHRlcjogY3JlYXRlTnVtYmVyRm9ybWF0dGVyKCB1bml0c1Byb3BlcnR5LnZhbHVlICksXHJcbiAgICAgICAgbWF4V2lkdGg6IFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuTUFYX1dJRFRIXHJcbiAgICAgIH1cclxuICAgIH0sIGNvbmZpZyApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICEhY29uZmlnLmRyYWdMaXN0ZW5lck9wdGlvbnMsICdlbmQgaXMgYSByZXF1aXJlZCBhcmd1bWVudCcgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICEhY29uZmlnLmRyYWdCb3VuZHNQcm9wZXJ0eSwgJ2RyYWdCb3VuZHNQcm9wZXJ0eSBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50JyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbC5zdG9wd2F0Y2gsIGNvbmZpZyApO1xyXG5cclxuICAgIHVuaXRzUHJvcGVydHkubGluayggdW5pdHMgPT4gdGhpcy5zZXROdW1iZXJGb3JtYXR0ZXIoIGNyZWF0ZU51bWJlckZvcm1hdHRlciggdW5pdHMgKSApICk7XHJcblxyXG4gICAgLy8gQWZ0ZXIgdGhlIFN0b3B3YXRjaE5vZGUgaXMgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgbWF4aW1hbCBsYXlvdXQsIHVzZSB0aGUgY29ycmVjdCBpbml0aWFsIHZhbHVlIGZvciB0aGUgY3VycmVudFxyXG4gICAgLy8gdGltZVVuaXRzXHJcbiAgICBtb2RlbC5zY2VuZVByb3BlcnR5LmxpbmsoIHNjZW5lID0+IHtcclxuICAgICAgdW5pdHNQcm9wZXJ0eS52YWx1ZSA9IHNjZW5lLnRpbWVVbml0cztcclxuICAgICAgdGhpcy5yZWRyYXdOdW1iZXJEaXNwbGF5KCk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnV2F2ZUludGVyZmVyZW5jZVN0b3B3YXRjaE5vZGUnLCBXYXZlSW50ZXJmZXJlbmNlU3RvcHdhdGNoTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBXYXZlSW50ZXJmZXJlbmNlU3RvcHdhdGNoTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHVDQUF1QztBQUNsRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsYUFBYSxNQUFnQyw4Q0FBOEM7QUFDbEcsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBRXhELE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsTUFBTUMsNkJBQTZCLFNBQVNKLGFBQWEsQ0FBQztFQUVqREssV0FBV0EsQ0FBRUMsS0FBaUIsRUFBRUMsTUFBNkIsRUFBRztJQUVyRTtJQUNBLE1BQU1DLFdBQVcsR0FBR0MsQ0FBQyxDQUFDQyxLQUFLLENBQUVKLEtBQUssQ0FBQ0ssTUFBTSxFQUFFQyxLQUFLLElBQUksSUFBSVQsb0JBQW9CLENBQUVTLEtBQUssQ0FBQ0MsU0FBVSxDQUFDLENBQUNDLEtBQU0sQ0FBRTtJQUV4RyxNQUFNQyxhQUFhLEdBQUcsSUFBSWxCLGNBQWMsQ0FBRVcsV0FBVyxDQUFDSyxTQUFVLENBQUM7SUFFakUsTUFBTUcscUJBQXFCLEdBQUtDLEtBQWEsSUFBTWpCLGFBQWEsQ0FBQ2tCLDZCQUE2QixDQUFFO01BQzlGQyx1QkFBdUIsRUFBRSxLQUFLO01BQzlCRixLQUFLLEVBQUVBO0lBQ1QsQ0FBRSxDQUFDO0lBQ0hWLE1BQU0sR0FBR1IsS0FBSyxDQUFFO01BQ2RxQixrQkFBa0IsRUFBRSxJQUFJdEIsS0FBSyxDQUFFLENBQUMsRUFBRSxNQUFPLENBQUM7TUFDMUN1QixvQkFBb0IsRUFBRTtRQUNwQkMsZUFBZSxFQUFFTixxQkFBcUIsQ0FBRUQsYUFBYSxDQUFDUSxLQUFNLENBQUM7UUFDN0RDLFFBQVEsRUFBRXRCLHlCQUF5QixDQUFDdUI7TUFDdEM7SUFDRixDQUFDLEVBQUVsQixNQUFPLENBQUM7SUFFWG1CLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsQ0FBQ25CLE1BQU0sQ0FBQ29CLG1CQUFtQixFQUFFLDRCQUE2QixDQUFDO0lBQzlFRCxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDLENBQUNuQixNQUFNLENBQUNxQixrQkFBa0IsRUFBRSwyQ0FBNEMsQ0FBQztJQUU1RixLQUFLLENBQUV0QixLQUFLLENBQUN1QixTQUFTLEVBQUV0QixNQUFPLENBQUM7SUFFaENRLGFBQWEsQ0FBQ2UsSUFBSSxDQUFFYixLQUFLLElBQUksSUFBSSxDQUFDYyxrQkFBa0IsQ0FBRWYscUJBQXFCLENBQUVDLEtBQU0sQ0FBRSxDQUFFLENBQUM7O0lBRXhGO0lBQ0E7SUFDQVgsS0FBSyxDQUFDMEIsYUFBYSxDQUFDRixJQUFJLENBQUVsQixLQUFLLElBQUk7TUFDakNHLGFBQWEsQ0FBQ1EsS0FBSyxHQUFHWCxLQUFLLENBQUNDLFNBQVM7TUFDckMsSUFBSSxDQUFDb0IsbUJBQW1CLENBQUMsQ0FBQztJQUM1QixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFoQyxnQkFBZ0IsQ0FBQ2lDLFFBQVEsQ0FBRSwrQkFBK0IsRUFBRTlCLDZCQUE4QixDQUFDO0FBQzNGLGVBQWVBLDZCQUE2QiJ9