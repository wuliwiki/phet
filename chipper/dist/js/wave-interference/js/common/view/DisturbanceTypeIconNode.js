// Copyright 2018-2022, University of Colorado Boulder
// @ts-nocheck
/**
 * Shows the icons for the radio buttons that choose between pulse and continuous waves.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import { LineStyles, Shape } from '../../../../kite/js/imports.js';
import merge from '../../../../phet-core/js/merge.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import waveInterference from '../../waveInterference.js';
import Scene from '../model/Scene.js';

// constants
const NUMBER_OF_SAMPLES = 100; // Number of samples to take along the curve
const WAVE_HEIGHT = 10; // Amplitude of the wave for the icon
const MAX_ANGLE = Math.PI * 2 + Math.PI; // Angle at which the wave ends, in radians
const MARGIN = 10; // Width of the pulse side segments, in pixels
const WIDTH = 50; // Size of wave, in pixels

class DisturbanceTypeIconNode extends Node {
  constructor(disturbanceType, options) {
    options = merge({
      stroked: false
    }, options);
    super();
    const minAngle = disturbanceType === Scene.DisturbanceType.PULSE ? Math.PI : 0;
    const minX = disturbanceType === Scene.DisturbanceType.PULSE ? MARGIN : 0;
    const maxX = disturbanceType === Scene.DisturbanceType.PULSE ? WIDTH - MARGIN : WIDTH;
    const shape = new Shape();
    for (let i = 0; i < NUMBER_OF_SAMPLES; i++) {
      const angle = Utils.linear(0, NUMBER_OF_SAMPLES - 1, minAngle, MAX_ANGLE, i);
      const y = -Math.cos(angle) * WAVE_HEIGHT;
      const x = Utils.linear(minAngle, MAX_ANGLE, minX, maxX, angle);
      if (i === 0) {
        if (disturbanceType === Scene.DisturbanceType.PULSE) {
          shape.moveTo(x - MARGIN, y);
          shape.lineTo(x, y);
        } else {
          shape.moveTo(x, y);
        }
      } else {
        shape.lineTo(x, y);
      }
    }
    if (disturbanceType === Scene.DisturbanceType.PULSE) {
      shape.lineToRelative(MARGIN, 0);
    }

    // In the pulse button, there is a white stroke
    const child = options.stroked ? new Path(shape.getStrokedShape(new LineStyles({
      lineWidth: 6
    })), {
      fill: 'black',
      stroke: 'white',
      lineWidth: 2.5
    }) : new Path(shape, {
      stroke: 'black',
      lineWidth: 2
    });
    this.addChild(child);
    this.mutate(options);
  }
}
waveInterference.register('DisturbanceTypeIconNode', DisturbanceTypeIconNode);
export default DisturbanceTypeIconNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIkxpbmVTdHlsZXMiLCJTaGFwZSIsIm1lcmdlIiwiTm9kZSIsIlBhdGgiLCJ3YXZlSW50ZXJmZXJlbmNlIiwiU2NlbmUiLCJOVU1CRVJfT0ZfU0FNUExFUyIsIldBVkVfSEVJR0hUIiwiTUFYX0FOR0xFIiwiTWF0aCIsIlBJIiwiTUFSR0lOIiwiV0lEVEgiLCJEaXN0dXJiYW5jZVR5cGVJY29uTm9kZSIsImNvbnN0cnVjdG9yIiwiZGlzdHVyYmFuY2VUeXBlIiwib3B0aW9ucyIsInN0cm9rZWQiLCJtaW5BbmdsZSIsIkRpc3R1cmJhbmNlVHlwZSIsIlBVTFNFIiwibWluWCIsIm1heFgiLCJzaGFwZSIsImkiLCJhbmdsZSIsImxpbmVhciIsInkiLCJjb3MiLCJ4IiwibW92ZVRvIiwibGluZVRvIiwibGluZVRvUmVsYXRpdmUiLCJjaGlsZCIsImdldFN0cm9rZWRTaGFwZSIsImxpbmVXaWR0aCIsImZpbGwiLCJzdHJva2UiLCJhZGRDaGlsZCIsIm11dGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGlzdHVyYmFuY2VUeXBlSWNvbk5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8vIEB0cy1ub2NoZWNrXHJcbi8qKlxyXG4gKiBTaG93cyB0aGUgaWNvbnMgZm9yIHRoZSByYWRpbyBidXR0b25zIHRoYXQgY2hvb3NlIGJldHdlZW4gcHVsc2UgYW5kIGNvbnRpbnVvdXMgd2F2ZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IExpbmVTdHlsZXMsIFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgd2F2ZUludGVyZmVyZW5jZSBmcm9tICcuLi8uLi93YXZlSW50ZXJmZXJlbmNlLmpzJztcclxuaW1wb3J0IFNjZW5lIGZyb20gJy4uL21vZGVsL1NjZW5lLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBOVU1CRVJfT0ZfU0FNUExFUyA9IDEwMDsgICAgICAgICAgIC8vIE51bWJlciBvZiBzYW1wbGVzIHRvIHRha2UgYWxvbmcgdGhlIGN1cnZlXHJcbmNvbnN0IFdBVkVfSEVJR0hUID0gMTA7ICAgICAgICAgICAgICAgICAgLy8gQW1wbGl0dWRlIG9mIHRoZSB3YXZlIGZvciB0aGUgaWNvblxyXG5jb25zdCBNQVhfQU5HTEUgPSBNYXRoLlBJICogMiArIE1hdGguUEk7IC8vIEFuZ2xlIGF0IHdoaWNoIHRoZSB3YXZlIGVuZHMsIGluIHJhZGlhbnNcclxuY29uc3QgTUFSR0lOID0gMTA7ICAgICAgICAgICAgICAgICAgICAgICAvLyBXaWR0aCBvZiB0aGUgcHVsc2Ugc2lkZSBzZWdtZW50cywgaW4gcGl4ZWxzXHJcbmNvbnN0IFdJRFRIID0gNTA7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2l6ZSBvZiB3YXZlLCBpbiBwaXhlbHNcclxuXHJcbmNsYXNzIERpc3R1cmJhbmNlVHlwZUljb25Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZGlzdHVyYmFuY2VUeXBlLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBzdHJva2VkOiBmYWxzZVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBjb25zdCBtaW5BbmdsZSA9IGRpc3R1cmJhbmNlVHlwZSA9PT0gU2NlbmUuRGlzdHVyYmFuY2VUeXBlLlBVTFNFID8gTWF0aC5QSSA6IDA7XHJcbiAgICBjb25zdCBtaW5YID0gZGlzdHVyYmFuY2VUeXBlID09PSBTY2VuZS5EaXN0dXJiYW5jZVR5cGUuUFVMU0UgPyBNQVJHSU4gOiAwO1xyXG4gICAgY29uc3QgbWF4WCA9IGRpc3R1cmJhbmNlVHlwZSA9PT0gU2NlbmUuRGlzdHVyYmFuY2VUeXBlLlBVTFNFID8gKCBXSURUSCAtIE1BUkdJTiApIDogV0lEVEg7XHJcblxyXG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IE5VTUJFUl9PRl9TQU1QTEVTOyBpKysgKSB7XHJcbiAgICAgIGNvbnN0IGFuZ2xlID0gVXRpbHMubGluZWFyKCAwLCBOVU1CRVJfT0ZfU0FNUExFUyAtIDEsIG1pbkFuZ2xlLCBNQVhfQU5HTEUsIGkgKTtcclxuICAgICAgY29uc3QgeSA9IC1NYXRoLmNvcyggYW5nbGUgKSAqIFdBVkVfSEVJR0hUO1xyXG4gICAgICBjb25zdCB4ID0gVXRpbHMubGluZWFyKCBtaW5BbmdsZSwgTUFYX0FOR0xFLCBtaW5YLCBtYXhYLCBhbmdsZSApO1xyXG4gICAgICBpZiAoIGkgPT09IDAgKSB7XHJcbiAgICAgICAgaWYgKCBkaXN0dXJiYW5jZVR5cGUgPT09IFNjZW5lLkRpc3R1cmJhbmNlVHlwZS5QVUxTRSApIHtcclxuICAgICAgICAgIHNoYXBlLm1vdmVUbyggeCAtIE1BUkdJTiwgeSApO1xyXG4gICAgICAgICAgc2hhcGUubGluZVRvKCB4LCB5ICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgc2hhcGUubW92ZVRvKCB4LCB5ICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNoYXBlLmxpbmVUbyggeCwgeSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIGRpc3R1cmJhbmNlVHlwZSA9PT0gU2NlbmUuRGlzdHVyYmFuY2VUeXBlLlBVTFNFICkge1xyXG4gICAgICBzaGFwZS5saW5lVG9SZWxhdGl2ZSggTUFSR0lOLCAwICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW4gdGhlIHB1bHNlIGJ1dHRvbiwgdGhlcmUgaXMgYSB3aGl0ZSBzdHJva2VcclxuICAgIGNvbnN0IGNoaWxkID0gb3B0aW9ucy5zdHJva2VkID9cclxuICAgICAgICAgICAgICAgICAgbmV3IFBhdGgoIHNoYXBlLmdldFN0cm9rZWRTaGFwZSggbmV3IExpbmVTdHlsZXMoIHsgbGluZVdpZHRoOiA2IH0gKSApLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsYWNrJyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICd3aGl0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAyLjVcclxuICAgICAgICAgICAgICAgICAgfSApIDpcclxuICAgICAgICAgICAgICAgICAgbmV3IFBhdGgoIHNoYXBlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMlxyXG4gICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBjaGlsZCApO1xyXG5cclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnRGlzdHVyYmFuY2VUeXBlSWNvbk5vZGUnLCBEaXN0dXJiYW5jZVR5cGVJY29uTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBEaXN0dXJiYW5jZVR5cGVJY29uTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsU0FBU0MsVUFBVSxFQUFFQyxLQUFLLFFBQVEsZ0NBQWdDO0FB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