// Copyright 2018-2022, University of Colorado Boulder

/**
 * Creates a set of uniformly-sized icons for each of the scenes.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import FaucetNode from '../../../../scenery-phet/js/FaucetNode.js';
import LaserPointerNode from '../../../../scenery-phet/js/LaserPointerNode.js';
import { Image } from '../../../../scenery/js/imports.js';
import speaker_MID_png from '../../../../scenery-phet/images/speaker/speaker_MID_png.js';
import waveInterference from '../../waveInterference.js';
import LightWaveGeneratorNode from './LightWaveGeneratorNode.js';
class WaveInterferenceSceneIcons {
  // Faucet icon, rasterized to clip out invisible parts (like the ShooterNode)
  waterIcon = new FaucetNode(1, new NumberProperty(0), new BooleanProperty(true), {
    interactiveProperty: new BooleanProperty(false)
  }).rasterized();
  soundIcon = new Image(speaker_MID_png);
  lightIcon = new LaserPointerNode(new BooleanProperty(false), LightWaveGeneratorNode.DEFAULT_NODE_OPTIONS);
  constructor() {
    // Icon sizes
    const waterIconWidth = 20.3;
    const iconWidth = 29;
    this.waterIcon.scale(waterIconWidth / this.waterIcon.width);
    this.soundIcon.scale(iconWidth / this.soundIcon.height);
    this.lightIcon.scale(iconWidth / this.lightIcon.width);
  }
}
waveInterference.register('WaveInterferenceSceneIcons', WaveInterferenceSceneIcons);
export default WaveInterferenceSceneIcons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIkZhdWNldE5vZGUiLCJMYXNlclBvaW50ZXJOb2RlIiwiSW1hZ2UiLCJzcGVha2VyX01JRF9wbmciLCJ3YXZlSW50ZXJmZXJlbmNlIiwiTGlnaHRXYXZlR2VuZXJhdG9yTm9kZSIsIldhdmVJbnRlcmZlcmVuY2VTY2VuZUljb25zIiwid2F0ZXJJY29uIiwiaW50ZXJhY3RpdmVQcm9wZXJ0eSIsInJhc3Rlcml6ZWQiLCJzb3VuZEljb24iLCJsaWdodEljb24iLCJERUZBVUxUX05PREVfT1BUSU9OUyIsImNvbnN0cnVjdG9yIiwid2F0ZXJJY29uV2lkdGgiLCJpY29uV2lkdGgiLCJzY2FsZSIsIndpZHRoIiwiaGVpZ2h0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYXZlSW50ZXJmZXJlbmNlU2NlbmVJY29ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgc2V0IG9mIHVuaWZvcm1seS1zaXplZCBpY29ucyBmb3IgZWFjaCBvZiB0aGUgc2NlbmVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBGYXVjZXROb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9GYXVjZXROb2RlLmpzJztcclxuaW1wb3J0IExhc2VyUG9pbnRlck5vZGUgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL0xhc2VyUG9pbnRlck5vZGUuanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzcGVha2VyX01JRF9wbmcgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2ltYWdlcy9zcGVha2VyL3NwZWFrZXJfTUlEX3BuZy5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgTGlnaHRXYXZlR2VuZXJhdG9yTm9kZSBmcm9tICcuL0xpZ2h0V2F2ZUdlbmVyYXRvck5vZGUuanMnO1xyXG5cclxuY2xhc3MgV2F2ZUludGVyZmVyZW5jZVNjZW5lSWNvbnMge1xyXG5cclxuICAvLyBGYXVjZXQgaWNvbiwgcmFzdGVyaXplZCB0byBjbGlwIG91dCBpbnZpc2libGUgcGFydHMgKGxpa2UgdGhlIFNob290ZXJOb2RlKVxyXG4gIHB1YmxpYyB3YXRlckljb24gPSBuZXcgRmF1Y2V0Tm9kZSggMSwgbmV3IE51bWJlclByb3BlcnR5KCAwICksIG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUgKSwge1xyXG4gICAgaW50ZXJhY3RpdmVQcm9wZXJ0eTogbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKVxyXG4gIH0gKS5yYXN0ZXJpemVkKCk7XHJcblxyXG4gIHB1YmxpYyBzb3VuZEljb24gPSBuZXcgSW1hZ2UoIHNwZWFrZXJfTUlEX3BuZyApO1xyXG4gIHB1YmxpYyBsaWdodEljb24gPSBuZXcgTGFzZXJQb2ludGVyTm9kZSggbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKSwgTGlnaHRXYXZlR2VuZXJhdG9yTm9kZS5ERUZBVUxUX05PREVfT1BUSU9OUyApO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgLy8gSWNvbiBzaXplc1xyXG4gICAgY29uc3Qgd2F0ZXJJY29uV2lkdGggPSAyMC4zO1xyXG4gICAgY29uc3QgaWNvbldpZHRoID0gMjk7XHJcbiAgICB0aGlzLndhdGVySWNvbi5zY2FsZSggd2F0ZXJJY29uV2lkdGggLyB0aGlzLndhdGVySWNvbi53aWR0aCApO1xyXG4gICAgdGhpcy5zb3VuZEljb24uc2NhbGUoIGljb25XaWR0aCAvIHRoaXMuc291bmRJY29uLmhlaWdodCApO1xyXG4gICAgdGhpcy5saWdodEljb24uc2NhbGUoIGljb25XaWR0aCAvIHRoaXMubGlnaHRJY29uLndpZHRoICk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxud2F2ZUludGVyZmVyZW5jZS5yZWdpc3RlciggJ1dhdmVJbnRlcmZlcmVuY2VTY2VuZUljb25zJywgV2F2ZUludGVyZmVyZW5jZVNjZW5lSWNvbnMgKTtcclxuZXhwb3J0IGRlZmF1bHQgV2F2ZUludGVyZmVyZW5jZVNjZW5lSWNvbnM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLHVDQUF1QztBQUNsRSxPQUFPQyxVQUFVLE1BQU0sMkNBQTJDO0FBQ2xFLE9BQU9DLGdCQUFnQixNQUFNLGlEQUFpRDtBQUM5RSxTQUFTQyxLQUFLLFFBQVEsbUNBQW1DO0FBQ3pELE9BQU9DLGVBQWUsTUFBTSw0REFBNEQ7QUFDeEYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUVoRSxNQUFNQywwQkFBMEIsQ0FBQztFQUUvQjtFQUNPQyxTQUFTLEdBQUcsSUFBSVAsVUFBVSxDQUFFLENBQUMsRUFBRSxJQUFJRCxjQUFjLENBQUUsQ0FBRSxDQUFDLEVBQUUsSUFBSUQsZUFBZSxDQUFFLElBQUssQ0FBQyxFQUFFO0lBQzFGVSxtQkFBbUIsRUFBRSxJQUFJVixlQUFlLENBQUUsS0FBTTtFQUNsRCxDQUFFLENBQUMsQ0FBQ1csVUFBVSxDQUFDLENBQUM7RUFFVEMsU0FBUyxHQUFHLElBQUlSLEtBQUssQ0FBRUMsZUFBZ0IsQ0FBQztFQUN4Q1EsU0FBUyxHQUFHLElBQUlWLGdCQUFnQixDQUFFLElBQUlILGVBQWUsQ0FBRSxLQUFNLENBQUMsRUFBRU8sc0JBQXNCLENBQUNPLG9CQUFxQixDQUFDO0VBRTdHQyxXQUFXQSxDQUFBLEVBQUc7SUFFbkI7SUFDQSxNQUFNQyxjQUFjLEdBQUcsSUFBSTtJQUMzQixNQUFNQyxTQUFTLEdBQUcsRUFBRTtJQUNwQixJQUFJLENBQUNSLFNBQVMsQ0FBQ1MsS0FBSyxDQUFFRixjQUFjLEdBQUcsSUFBSSxDQUFDUCxTQUFTLENBQUNVLEtBQU0sQ0FBQztJQUM3RCxJQUFJLENBQUNQLFNBQVMsQ0FBQ00sS0FBSyxDQUFFRCxTQUFTLEdBQUcsSUFBSSxDQUFDTCxTQUFTLENBQUNRLE1BQU8sQ0FBQztJQUN6RCxJQUFJLENBQUNQLFNBQVMsQ0FBQ0ssS0FBSyxDQUFFRCxTQUFTLEdBQUcsSUFBSSxDQUFDSixTQUFTLENBQUNNLEtBQU0sQ0FBQztFQUMxRDtBQUNGO0FBR0FiLGdCQUFnQixDQUFDZSxRQUFRLENBQUUsNEJBQTRCLEVBQUViLDBCQUEyQixDQUFDO0FBQ3JGLGVBQWVBLDBCQUEwQiJ9