// Copyright 2018-2022, University of Colorado Boulder

/**
 * Shows the water from the side view.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Path } from '../../../../scenery/js/imports.js';
import waveInterference from '../../waveInterference.js';
import WaveInterferenceConstants from '../WaveInterferenceConstants.js';
import WaveInterferenceUtils from '../WaveInterferenceUtils.js';
// constants
// the index in the un-padded lattice array where the source appears
const SOURCE_INDEX = WaveInterferenceConstants.POINT_SOURCE_HORIZONTAL_COORDINATE - WaveInterferenceConstants.LATTICE_PADDING;
class WaterSideViewNode extends Path {
  // reduce garbage by reusing the same array to get model values
  array = [];
  waterSideViewNodeTopY = null;
  constructor(waveAreaBounds, waterScene) {
    super(null, {
      lineJoin: WaveInterferenceConstants.CHART_LINE_JOIN,
      fill: WaveInterferenceConstants.WATER_SIDE_COLOR
    });
    this.waveAreaBounds = waveAreaBounds;
    this.waterScene = waterScene;
    this.waveAreaBounds = waveAreaBounds;
    this.waterScene = waterScene;
    waterScene.lattice.changedEmitter.addListener(() => this.update());
  }

  /**
   * update the shape when the rotationAmount or lattice has changed
   */
  update() {
    const bounds = this.waveAreaBounds;
    const waterSideShape = WaveInterferenceUtils.getWaterSideShape(this.array, this.waterScene.lattice, bounds, 0, 0);
    this.shape = waterSideShape.lineTo(waterSideShape.bounds.right, bounds.maxY).lineTo(waterSideShape.bounds.left, bounds.maxY).close();

    // Look up the height of the topmost curve.  Do this after getWaterSideShape since we read a value
    // from the array.  Used to determine if a water drop has fallen into the water.
    this.waterSideViewNodeTopY = WaveInterferenceUtils.getWaterSideY(bounds, this.array[SOURCE_INDEX]);
  }
}
waveInterference.register('WaterSideViewNode', WaterSideViewNode);
export default WaterSideViewNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXRoIiwid2F2ZUludGVyZmVyZW5jZSIsIldhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMiLCJXYXZlSW50ZXJmZXJlbmNlVXRpbHMiLCJTT1VSQ0VfSU5ERVgiLCJQT0lOVF9TT1VSQ0VfSE9SSVpPTlRBTF9DT09SRElOQVRFIiwiTEFUVElDRV9QQURESU5HIiwiV2F0ZXJTaWRlVmlld05vZGUiLCJhcnJheSIsIndhdGVyU2lkZVZpZXdOb2RlVG9wWSIsImNvbnN0cnVjdG9yIiwid2F2ZUFyZWFCb3VuZHMiLCJ3YXRlclNjZW5lIiwibGluZUpvaW4iLCJDSEFSVF9MSU5FX0pPSU4iLCJmaWxsIiwiV0FURVJfU0lERV9DT0xPUiIsImxhdHRpY2UiLCJjaGFuZ2VkRW1pdHRlciIsImFkZExpc3RlbmVyIiwidXBkYXRlIiwiYm91bmRzIiwid2F0ZXJTaWRlU2hhcGUiLCJnZXRXYXRlclNpZGVTaGFwZSIsInNoYXBlIiwibGluZVRvIiwicmlnaHQiLCJtYXhZIiwibGVmdCIsImNsb3NlIiwiZ2V0V2F0ZXJTaWRlWSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F0ZXJTaWRlVmlld05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2hvd3MgdGhlIHdhdGVyIGZyb20gdGhlIHNpZGUgdmlldy5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHdhdmVJbnRlcmZlcmVuY2UgZnJvbSAnLi4vLi4vd2F2ZUludGVyZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlQ29uc3RhbnRzIGZyb20gJy4uL1dhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVV0aWxzIGZyb20gJy4uL1dhdmVJbnRlcmZlcmVuY2VVdGlscy5qcyc7XHJcbmltcG9ydCBXYXRlclNjZW5lIGZyb20gJy4uL21vZGVsL1dhdGVyU2NlbmUuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuLy8gdGhlIGluZGV4IGluIHRoZSB1bi1wYWRkZWQgbGF0dGljZSBhcnJheSB3aGVyZSB0aGUgc291cmNlIGFwcGVhcnNcclxuY29uc3QgU09VUkNFX0lOREVYID0gV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5QT0lOVF9TT1VSQ0VfSE9SSVpPTlRBTF9DT09SRElOQVRFIC1cclxuICAgICAgICAgICAgICAgICAgICAgV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5MQVRUSUNFX1BBRERJTkc7XHJcblxyXG5jbGFzcyBXYXRlclNpZGVWaWV3Tm9kZSBleHRlbmRzIFBhdGgge1xyXG5cclxuICAvLyByZWR1Y2UgZ2FyYmFnZSBieSByZXVzaW5nIHRoZSBzYW1lIGFycmF5IHRvIGdldCBtb2RlbCB2YWx1ZXNcclxuICBwcml2YXRlIHJlYWRvbmx5IGFycmF5ID0gW107XHJcbiAgcHJpdmF0ZSB3YXRlclNpZGVWaWV3Tm9kZVRvcFk6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByaXZhdGUgcmVhZG9ubHkgd2F2ZUFyZWFCb3VuZHM6IEJvdW5kczIsIHByaXZhdGUgcmVhZG9ubHkgd2F0ZXJTY2VuZTogV2F0ZXJTY2VuZSApIHtcclxuXHJcbiAgICBzdXBlciggbnVsbCwge1xyXG4gICAgICBsaW5lSm9pbjogV2F2ZUludGVyZmVyZW5jZUNvbnN0YW50cy5DSEFSVF9MSU5FX0pPSU4sXHJcbiAgICAgIGZpbGw6IFdhdmVJbnRlcmZlcmVuY2VDb25zdGFudHMuV0FURVJfU0lERV9DT0xPUlxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMud2F2ZUFyZWFCb3VuZHMgPSB3YXZlQXJlYUJvdW5kcztcclxuICAgIHRoaXMud2F0ZXJTY2VuZSA9IHdhdGVyU2NlbmU7XHJcblxyXG4gICAgd2F0ZXJTY2VuZS5sYXR0aWNlLmNoYW5nZWRFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiB0aGlzLnVwZGF0ZSgpICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1cGRhdGUgdGhlIHNoYXBlIHdoZW4gdGhlIHJvdGF0aW9uQW1vdW50IG9yIGxhdHRpY2UgaGFzIGNoYW5nZWRcclxuICAgKi9cclxuICBwcml2YXRlIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMud2F2ZUFyZWFCb3VuZHM7XHJcbiAgICBjb25zdCB3YXRlclNpZGVTaGFwZSA9IFdhdmVJbnRlcmZlcmVuY2VVdGlscy5nZXRXYXRlclNpZGVTaGFwZSggdGhpcy5hcnJheSwgdGhpcy53YXRlclNjZW5lLmxhdHRpY2UsIGJvdW5kcywgMCwgMCApO1xyXG4gICAgdGhpcy5zaGFwZSA9IHdhdGVyU2lkZVNoYXBlXHJcbiAgICAgIC5saW5lVG8oIHdhdGVyU2lkZVNoYXBlLmJvdW5kcy5yaWdodCwgYm91bmRzLm1heFkgKVxyXG4gICAgICAubGluZVRvKCB3YXRlclNpZGVTaGFwZS5ib3VuZHMubGVmdCwgYm91bmRzLm1heFkgKVxyXG4gICAgICAuY2xvc2UoKTtcclxuXHJcbiAgICAvLyBMb29rIHVwIHRoZSBoZWlnaHQgb2YgdGhlIHRvcG1vc3QgY3VydmUuICBEbyB0aGlzIGFmdGVyIGdldFdhdGVyU2lkZVNoYXBlIHNpbmNlIHdlIHJlYWQgYSB2YWx1ZVxyXG4gICAgLy8gZnJvbSB0aGUgYXJyYXkuICBVc2VkIHRvIGRldGVybWluZSBpZiBhIHdhdGVyIGRyb3AgaGFzIGZhbGxlbiBpbnRvIHRoZSB3YXRlci5cclxuICAgIHRoaXMud2F0ZXJTaWRlVmlld05vZGVUb3BZID0gV2F2ZUludGVyZmVyZW5jZVV0aWxzLmdldFdhdGVyU2lkZVkoIGJvdW5kcywgdGhpcy5hcnJheVsgU09VUkNFX0lOREVYIF0gKTtcclxuICB9XHJcbn1cclxuXHJcbndhdmVJbnRlcmZlcmVuY2UucmVnaXN0ZXIoICdXYXRlclNpZGVWaWV3Tm9kZScsIFdhdGVyU2lkZVZpZXdOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFdhdGVyU2lkZVZpZXdOb2RlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBQ3ZFLE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUkvRDtBQUNBO0FBQ0EsTUFBTUMsWUFBWSxHQUFHRix5QkFBeUIsQ0FBQ0csa0NBQWtDLEdBQzVESCx5QkFBeUIsQ0FBQ0ksZUFBZTtBQUU5RCxNQUFNQyxpQkFBaUIsU0FBU1AsSUFBSSxDQUFDO0VBRW5DO0VBQ2lCUSxLQUFLLEdBQUcsRUFBRTtFQUNuQkMscUJBQXFCLEdBQWtCLElBQUk7RUFFNUNDLFdBQVdBLENBQW1CQyxjQUF1QixFQUFtQkMsVUFBc0IsRUFBRztJQUV0RyxLQUFLLENBQUUsSUFBSSxFQUFFO01BQ1hDLFFBQVEsRUFBRVgseUJBQXlCLENBQUNZLGVBQWU7TUFDbkRDLElBQUksRUFBRWIseUJBQXlCLENBQUNjO0lBQ2xDLENBQUUsQ0FBQztJQUFDLEtBTCtCTCxjQUF1QixHQUF2QkEsY0FBdUI7SUFBQSxLQUFtQkMsVUFBc0IsR0FBdEJBLFVBQXNCO0lBT25HLElBQUksQ0FBQ0QsY0FBYyxHQUFHQSxjQUFjO0lBQ3BDLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0lBRTVCQSxVQUFVLENBQUNLLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDQyxXQUFXLENBQUUsTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFFLENBQUM7RUFDdEU7O0VBRUE7QUFDRjtBQUNBO0VBQ1VBLE1BQU1BLENBQUEsRUFBUztJQUNyQixNQUFNQyxNQUFNLEdBQUcsSUFBSSxDQUFDVixjQUFjO0lBQ2xDLE1BQU1XLGNBQWMsR0FBR25CLHFCQUFxQixDQUFDb0IsaUJBQWlCLENBQUUsSUFBSSxDQUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDSSxVQUFVLENBQUNLLE9BQU8sRUFBRUksTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFDbkgsSUFBSSxDQUFDRyxLQUFLLEdBQUdGLGNBQWMsQ0FDeEJHLE1BQU0sQ0FBRUgsY0FBYyxDQUFDRCxNQUFNLENBQUNLLEtBQUssRUFBRUwsTUFBTSxDQUFDTSxJQUFLLENBQUMsQ0FDbERGLE1BQU0sQ0FBRUgsY0FBYyxDQUFDRCxNQUFNLENBQUNPLElBQUksRUFBRVAsTUFBTSxDQUFDTSxJQUFLLENBQUMsQ0FDakRFLEtBQUssQ0FBQyxDQUFDOztJQUVWO0lBQ0E7SUFDQSxJQUFJLENBQUNwQixxQkFBcUIsR0FBR04scUJBQXFCLENBQUMyQixhQUFhLENBQUVULE1BQU0sRUFBRSxJQUFJLENBQUNiLEtBQUssQ0FBRUosWUFBWSxDQUFHLENBQUM7RUFDeEc7QUFDRjtBQUVBSCxnQkFBZ0IsQ0FBQzhCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRXhCLGlCQUFrQixDQUFDO0FBQ25FLGVBQWVBLGlCQUFpQiJ9