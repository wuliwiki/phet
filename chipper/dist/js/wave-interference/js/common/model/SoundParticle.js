// Copyright 2018-2022, University of Colorado Boulder

/**
 * When the sound wave generator is selected, shows discrete, moving particles for the sound scene.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import Utils from '../../../../dot/js/Utils.js';
import waveInterference from '../../waveInterference.js';
// constants
// At each time step, a random force is applied in both the x and y directions.  The magnitude of the force
// in each direction is is a random value between -RANDOMNESS and +RANDOMNESS.  This is to show
// motion even in the absence of waves, since we are not at absolute zero.
const RANDOMNESS = 14.75;

// At each time step, the velocity is multiplied by FRICTION_SCALE.  If FRICTION_SCALE is 1, that means the velocity is
// not damped out at all.  For a value < 1, this amounts to exponential decay in the speed.
const FRICTION_SCALE = 0.732;
const RESTORATION_FORCE_SCALE = 0.5; // Additional scaling for the home force

class SoundParticle {
  /**
   * @param i - horizontal lattice coordinate of the particle
   * @param j - vertical lattice coordinate of the particle
   * @param x - initial x coordinate of the particle, in model coordinates
   * @param y - initial y coordinate of the particle, in model coordinates
   */
  constructor(i, j, x, y) {
    this.i = i;
    this.j = j;
    this.x = x;
    this.y = y;
    this.initialX = x;
    this.initialY = y;
    this.vx = 0;
    this.vy = 0;
  }

  /**
   * Applies a force toward the given point with the given strength;
   * @param fx - sum of applied forces in the x direction
   * @param fy - sum of applied forces in the y direction
   * @param dt - time to integrate
   * @param soundScene - to get the frequency range and value
   */
  applyForce(fx, fy, dt, soundScene) {
    // the particles move randomly even when there are no waves, because they are not at absolute zero
    // see https://github.com/phetsims/wave-interference/issues/123
    fx += (dotRandom.nextDouble() - 0.5) * 2 * RANDOMNESS;
    fy += (dotRandom.nextDouble() - 0.5) * 2 * RANDOMNESS;

    // use the airK as the magnitude and the forceCenter for direction only.
    const restorationSpringConstant = Utils.linear(soundScene.frequencyProperty.range.min, soundScene.frequencyProperty.range.max, 2 * 1.05, 6.5 * 0.8, soundScene.frequencyProperty.value) * RESTORATION_FORCE_SCALE;
    const fSpringX = -restorationSpringConstant * (this.x - this.initialX);
    const fSpringY = -restorationSpringConstant * (this.y - this.initialY);
    this.vx += fx + fSpringX;
    this.vy += fy + fSpringY;

    // friction
    this.vx *= FRICTION_SCALE;
    this.vy *= FRICTION_SCALE;

    // motion
    this.x += this.vx * dt;
    this.y += this.vy * dt;
  }
}
waveInterference.register('SoundParticle', SoundParticle);
export default SoundParticle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJVdGlscyIsIndhdmVJbnRlcmZlcmVuY2UiLCJSQU5ET01ORVNTIiwiRlJJQ1RJT05fU0NBTEUiLCJSRVNUT1JBVElPTl9GT1JDRV9TQ0FMRSIsIlNvdW5kUGFydGljbGUiLCJjb25zdHJ1Y3RvciIsImkiLCJqIiwieCIsInkiLCJpbml0aWFsWCIsImluaXRpYWxZIiwidngiLCJ2eSIsImFwcGx5Rm9yY2UiLCJmeCIsImZ5IiwiZHQiLCJzb3VuZFNjZW5lIiwibmV4dERvdWJsZSIsInJlc3RvcmF0aW9uU3ByaW5nQ29uc3RhbnQiLCJsaW5lYXIiLCJmcmVxdWVuY3lQcm9wZXJ0eSIsInJhbmdlIiwibWluIiwibWF4IiwidmFsdWUiLCJmU3ByaW5nWCIsImZTcHJpbmdZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTb3VuZFBhcnRpY2xlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFdoZW4gdGhlIHNvdW5kIHdhdmUgZ2VuZXJhdG9yIGlzIHNlbGVjdGVkLCBzaG93cyBkaXNjcmV0ZSwgbW92aW5nIHBhcnRpY2xlcyBmb3IgdGhlIHNvdW5kIHNjZW5lLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgd2F2ZUludGVyZmVyZW5jZSBmcm9tICcuLi8uLi93YXZlSW50ZXJmZXJlbmNlLmpzJztcclxuaW1wb3J0IFNvdW5kU2NlbmUgZnJvbSAnLi9Tb3VuZFNjZW5lLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG4vLyBBdCBlYWNoIHRpbWUgc3RlcCwgYSByYW5kb20gZm9yY2UgaXMgYXBwbGllZCBpbiBib3RoIHRoZSB4IGFuZCB5IGRpcmVjdGlvbnMuICBUaGUgbWFnbml0dWRlIG9mIHRoZSBmb3JjZVxyXG4vLyBpbiBlYWNoIGRpcmVjdGlvbiBpcyBpcyBhIHJhbmRvbSB2YWx1ZSBiZXR3ZWVuIC1SQU5ET01ORVNTIGFuZCArUkFORE9NTkVTUy4gIFRoaXMgaXMgdG8gc2hvd1xyXG4vLyBtb3Rpb24gZXZlbiBpbiB0aGUgYWJzZW5jZSBvZiB3YXZlcywgc2luY2Ugd2UgYXJlIG5vdCBhdCBhYnNvbHV0ZSB6ZXJvLlxyXG5jb25zdCBSQU5ET01ORVNTID0gMTQuNzU7XHJcblxyXG4vLyBBdCBlYWNoIHRpbWUgc3RlcCwgdGhlIHZlbG9jaXR5IGlzIG11bHRpcGxpZWQgYnkgRlJJQ1RJT05fU0NBTEUuICBJZiBGUklDVElPTl9TQ0FMRSBpcyAxLCB0aGF0IG1lYW5zIHRoZSB2ZWxvY2l0eSBpc1xyXG4vLyBub3QgZGFtcGVkIG91dCBhdCBhbGwuICBGb3IgYSB2YWx1ZSA8IDEsIHRoaXMgYW1vdW50cyB0byBleHBvbmVudGlhbCBkZWNheSBpbiB0aGUgc3BlZWQuXHJcbmNvbnN0IEZSSUNUSU9OX1NDQUxFID0gMC43MzI7XHJcbmNvbnN0IFJFU1RPUkFUSU9OX0ZPUkNFX1NDQUxFID0gMC41OyAvLyBBZGRpdGlvbmFsIHNjYWxpbmcgZm9yIHRoZSBob21lIGZvcmNlXHJcblxyXG5jbGFzcyBTb3VuZFBhcnRpY2xlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGluaXRpYWxYOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBpbml0aWFsWTogbnVtYmVyO1xyXG4gIHByaXZhdGUgdng6IG51bWJlcjtcclxuICBwcml2YXRlIHZ5OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBpIC0gaG9yaXpvbnRhbCBsYXR0aWNlIGNvb3JkaW5hdGUgb2YgdGhlIHBhcnRpY2xlXHJcbiAgICogQHBhcmFtIGogLSB2ZXJ0aWNhbCBsYXR0aWNlIGNvb3JkaW5hdGUgb2YgdGhlIHBhcnRpY2xlXHJcbiAgICogQHBhcmFtIHggLSBpbml0aWFsIHggY29vcmRpbmF0ZSBvZiB0aGUgcGFydGljbGUsIGluIG1vZGVsIGNvb3JkaW5hdGVzXHJcbiAgICogQHBhcmFtIHkgLSBpbml0aWFsIHkgY29vcmRpbmF0ZSBvZiB0aGUgcGFydGljbGUsIGluIG1vZGVsIGNvb3JkaW5hdGVzXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwdWJsaWMgcmVhZG9ubHkgaTogbnVtYmVyLCBwdWJsaWMgcmVhZG9ubHkgajogbnVtYmVyLCBwdWJsaWMgeDogbnVtYmVyLCBwdWJsaWMgeTogbnVtYmVyICkge1xyXG4gICAgdGhpcy5pbml0aWFsWCA9IHg7XHJcbiAgICB0aGlzLmluaXRpYWxZID0geTtcclxuICAgIHRoaXMudnggPSAwO1xyXG4gICAgdGhpcy52eSA9IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBcHBsaWVzIGEgZm9yY2UgdG93YXJkIHRoZSBnaXZlbiBwb2ludCB3aXRoIHRoZSBnaXZlbiBzdHJlbmd0aDtcclxuICAgKiBAcGFyYW0gZnggLSBzdW0gb2YgYXBwbGllZCBmb3JjZXMgaW4gdGhlIHggZGlyZWN0aW9uXHJcbiAgICogQHBhcmFtIGZ5IC0gc3VtIG9mIGFwcGxpZWQgZm9yY2VzIGluIHRoZSB5IGRpcmVjdGlvblxyXG4gICAqIEBwYXJhbSBkdCAtIHRpbWUgdG8gaW50ZWdyYXRlXHJcbiAgICogQHBhcmFtIHNvdW5kU2NlbmUgLSB0byBnZXQgdGhlIGZyZXF1ZW5jeSByYW5nZSBhbmQgdmFsdWVcclxuICAgKi9cclxuICBwdWJsaWMgYXBwbHlGb3JjZSggZng6IG51bWJlciwgZnk6IG51bWJlciwgZHQ6IG51bWJlciwgc291bmRTY2VuZTogU291bmRTY2VuZSApOiB2b2lkIHtcclxuXHJcbiAgICAvLyB0aGUgcGFydGljbGVzIG1vdmUgcmFuZG9tbHkgZXZlbiB3aGVuIHRoZXJlIGFyZSBubyB3YXZlcywgYmVjYXVzZSB0aGV5IGFyZSBub3QgYXQgYWJzb2x1dGUgemVyb1xyXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy93YXZlLWludGVyZmVyZW5jZS9pc3N1ZXMvMTIzXHJcbiAgICBmeCArPSAoIGRvdFJhbmRvbS5uZXh0RG91YmxlKCkgLSAwLjUgKSAqIDIgKiBSQU5ET01ORVNTO1xyXG4gICAgZnkgKz0gKCBkb3RSYW5kb20ubmV4dERvdWJsZSgpIC0gMC41ICkgKiAyICogUkFORE9NTkVTUztcclxuXHJcbiAgICAvLyB1c2UgdGhlIGFpcksgYXMgdGhlIG1hZ25pdHVkZSBhbmQgdGhlIGZvcmNlQ2VudGVyIGZvciBkaXJlY3Rpb24gb25seS5cclxuICAgIGNvbnN0IHJlc3RvcmF0aW9uU3ByaW5nQ29uc3RhbnQgPSBVdGlscy5saW5lYXIoXHJcbiAgICAgIHNvdW5kU2NlbmUuZnJlcXVlbmN5UHJvcGVydHkucmFuZ2UubWluLCBzb3VuZFNjZW5lLmZyZXF1ZW5jeVByb3BlcnR5LnJhbmdlLm1heCxcclxuICAgICAgKCAyICogMS4wNSApLCAoIDYuNSAqIDAuOCApLFxyXG4gICAgICBzb3VuZFNjZW5lLmZyZXF1ZW5jeVByb3BlcnR5LnZhbHVlXHJcbiAgICApICogUkVTVE9SQVRJT05fRk9SQ0VfU0NBTEU7XHJcbiAgICBjb25zdCBmU3ByaW5nWCA9IC1yZXN0b3JhdGlvblNwcmluZ0NvbnN0YW50ICogKCB0aGlzLnggLSB0aGlzLmluaXRpYWxYICk7XHJcbiAgICBjb25zdCBmU3ByaW5nWSA9IC1yZXN0b3JhdGlvblNwcmluZ0NvbnN0YW50ICogKCB0aGlzLnkgLSB0aGlzLmluaXRpYWxZICk7XHJcbiAgICB0aGlzLnZ4ICs9IGZ4ICsgZlNwcmluZ1g7XHJcbiAgICB0aGlzLnZ5ICs9IGZ5ICsgZlNwcmluZ1k7XHJcblxyXG4gICAgLy8gZnJpY3Rpb25cclxuICAgIHRoaXMudnggKj0gRlJJQ1RJT05fU0NBTEU7XHJcbiAgICB0aGlzLnZ5ICo9IEZSSUNUSU9OX1NDQUxFO1xyXG5cclxuICAgIC8vIG1vdGlvblxyXG4gICAgdGhpcy54ICs9IHRoaXMudnggKiBkdDtcclxuICAgIHRoaXMueSArPSB0aGlzLnZ5ICogZHQ7XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnU291bmRQYXJ0aWNsZScsIFNvdW5kUGFydGljbGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgU291bmRQYXJ0aWNsZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUd4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxLQUFLOztBQUV4QjtBQUNBO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLEtBQUs7QUFDNUIsTUFBTUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLENBQUM7O0FBRXJDLE1BQU1DLGFBQWEsQ0FBQztFQU1sQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBa0JDLENBQVMsRUFBa0JDLENBQVMsRUFBU0MsQ0FBUyxFQUFTQyxDQUFTLEVBQUc7SUFBQSxLQUEzRUgsQ0FBUyxHQUFUQSxDQUFTO0lBQUEsS0FBa0JDLENBQVMsR0FBVEEsQ0FBUztJQUFBLEtBQVNDLENBQVMsR0FBVEEsQ0FBUztJQUFBLEtBQVNDLENBQVMsR0FBVEEsQ0FBUztJQUMxRyxJQUFJLENBQUNDLFFBQVEsR0FBR0YsQ0FBQztJQUNqQixJQUFJLENBQUNHLFFBQVEsR0FBR0YsQ0FBQztJQUNqQixJQUFJLENBQUNHLEVBQUUsR0FBRyxDQUFDO0lBQ1gsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQztFQUNiOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLFVBQVVBLENBQUVDLEVBQVUsRUFBRUMsRUFBVSxFQUFFQyxFQUFVLEVBQUVDLFVBQXNCLEVBQVM7SUFFcEY7SUFDQTtJQUNBSCxFQUFFLElBQUksQ0FBRWpCLFNBQVMsQ0FBQ3FCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFLLENBQUMsR0FBR2xCLFVBQVU7SUFDdkRlLEVBQUUsSUFBSSxDQUFFbEIsU0FBUyxDQUFDcUIsVUFBVSxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUssQ0FBQyxHQUFHbEIsVUFBVTs7SUFFdkQ7SUFDQSxNQUFNbUIseUJBQXlCLEdBQUdyQixLQUFLLENBQUNzQixNQUFNLENBQzVDSCxVQUFVLENBQUNJLGlCQUFpQixDQUFDQyxLQUFLLENBQUNDLEdBQUcsRUFBRU4sVUFBVSxDQUFDSSxpQkFBaUIsQ0FBQ0MsS0FBSyxDQUFDRSxHQUFHLEVBQzVFLENBQUMsR0FBRyxJQUFJLEVBQU0sR0FBRyxHQUFHLEdBQUcsRUFDekJQLFVBQVUsQ0FBQ0ksaUJBQWlCLENBQUNJLEtBQy9CLENBQUMsR0FBR3ZCLHVCQUF1QjtJQUMzQixNQUFNd0IsUUFBUSxHQUFHLENBQUNQLHlCQUF5QixJQUFLLElBQUksQ0FBQ1osQ0FBQyxHQUFHLElBQUksQ0FBQ0UsUUFBUSxDQUFFO0lBQ3hFLE1BQU1rQixRQUFRLEdBQUcsQ0FBQ1IseUJBQXlCLElBQUssSUFBSSxDQUFDWCxDQUFDLEdBQUcsSUFBSSxDQUFDRSxRQUFRLENBQUU7SUFDeEUsSUFBSSxDQUFDQyxFQUFFLElBQUlHLEVBQUUsR0FBR1ksUUFBUTtJQUN4QixJQUFJLENBQUNkLEVBQUUsSUFBSUcsRUFBRSxHQUFHWSxRQUFROztJQUV4QjtJQUNBLElBQUksQ0FBQ2hCLEVBQUUsSUFBSVYsY0FBYztJQUN6QixJQUFJLENBQUNXLEVBQUUsSUFBSVgsY0FBYzs7SUFFekI7SUFDQSxJQUFJLENBQUNNLENBQUMsSUFBSSxJQUFJLENBQUNJLEVBQUUsR0FBR0ssRUFBRTtJQUN0QixJQUFJLENBQUNSLENBQUMsSUFBSSxJQUFJLENBQUNJLEVBQUUsR0FBR0ksRUFBRTtFQUN4QjtBQUNGO0FBRUFqQixnQkFBZ0IsQ0FBQzZCLFFBQVEsQ0FBRSxlQUFlLEVBQUV6QixhQUFjLENBQUM7QUFDM0QsZUFBZUEsYUFBYSJ9