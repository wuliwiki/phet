// Copyright 2018-2022, University of Colorado Boulder

/**
 * ScreenView for the "Interference" screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Shape } from '../../../../kite/js/imports.js';
import WaveInterferenceQueryParameters from '../../common/WaveInterferenceQueryParameters.js';
import TheoryInterferenceOverlay from '../../slits/view/TheoryInterferenceOverlay.js';
import waveInterference from '../../waveInterference.js';
import WavesScreenView from '../../waves/view/WavesScreenView.js';
import SeparationControl from './SeparationControl.js';
class InterferenceScreenView extends WavesScreenView {
  /**
   * @param model
   * @param alignGroup - for aligning the control panels on the right side of the lattice
   */
  constructor(model, alignGroup) {
    super(model, alignGroup, {
      // The pulse option does not appear in the Interference screen, because it is distracting and does not meet a
      // specific learning goal in this context.
      showPulseContinuousRadioButtons: false,
      controlPanelOptions: {
        additionalControl: new SeparationControl(model)
      }
    });

    // When enabled by a query parameter, show the theoretical interference pattern.
    if (WaveInterferenceQueryParameters.theory) {
      this.addChild(new TheoryInterferenceOverlay(model.sceneProperty, model.scenes, this.waveAreaNode.bounds, {
        clipArea: Shape.bounds(this.waveAreaNode.bounds)
      }));
    }
  }
}
waveInterference.register('InterferenceScreenView', InterferenceScreenView);
export default InterferenceScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIldhdmVJbnRlcmZlcmVuY2VRdWVyeVBhcmFtZXRlcnMiLCJUaGVvcnlJbnRlcmZlcmVuY2VPdmVybGF5Iiwid2F2ZUludGVyZmVyZW5jZSIsIldhdmVzU2NyZWVuVmlldyIsIlNlcGFyYXRpb25Db250cm9sIiwiSW50ZXJmZXJlbmNlU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJhbGlnbkdyb3VwIiwic2hvd1B1bHNlQ29udGludW91c1JhZGlvQnV0dG9ucyIsImNvbnRyb2xQYW5lbE9wdGlvbnMiLCJhZGRpdGlvbmFsQ29udHJvbCIsInRoZW9yeSIsImFkZENoaWxkIiwic2NlbmVQcm9wZXJ0eSIsInNjZW5lcyIsIndhdmVBcmVhTm9kZSIsImJvdW5kcyIsImNsaXBBcmVhIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnRlcmZlcmVuY2VTY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNjcmVlblZpZXcgZm9yIHRoZSBcIkludGVyZmVyZW5jZVwiIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IEFsaWduR3JvdXAgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgV2F2ZUludGVyZmVyZW5jZVF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vV2F2ZUludGVyZmVyZW5jZVF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBUaGVvcnlJbnRlcmZlcmVuY2VPdmVybGF5IGZyb20gJy4uLy4uL3NsaXRzL3ZpZXcvVGhlb3J5SW50ZXJmZXJlbmNlT3ZlcmxheS5qcyc7XHJcbmltcG9ydCB3YXZlSW50ZXJmZXJlbmNlIGZyb20gJy4uLy4uL3dhdmVJbnRlcmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgV2F2ZXNTY3JlZW5WaWV3IGZyb20gJy4uLy4uL3dhdmVzL3ZpZXcvV2F2ZXNTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFNlcGFyYXRpb25Db250cm9sIGZyb20gJy4vU2VwYXJhdGlvbkNvbnRyb2wuanMnO1xyXG5pbXBvcnQgSW50ZXJmZXJlbmNlTW9kZWwgZnJvbSAnLi4vbW9kZWwvSW50ZXJmZXJlbmNlTW9kZWwuanMnO1xyXG5cclxuY2xhc3MgSW50ZXJmZXJlbmNlU2NyZWVuVmlldyBleHRlbmRzIFdhdmVzU2NyZWVuVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBtb2RlbFxyXG4gICAqIEBwYXJhbSBhbGlnbkdyb3VwIC0gZm9yIGFsaWduaW5nIHRoZSBjb250cm9sIHBhbmVscyBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgbGF0dGljZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IEludGVyZmVyZW5jZU1vZGVsLCBhbGlnbkdyb3VwOiBBbGlnbkdyb3VwICkge1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgYWxpZ25Hcm91cCwge1xyXG5cclxuICAgICAgLy8gVGhlIHB1bHNlIG9wdGlvbiBkb2VzIG5vdCBhcHBlYXIgaW4gdGhlIEludGVyZmVyZW5jZSBzY3JlZW4sIGJlY2F1c2UgaXQgaXMgZGlzdHJhY3RpbmcgYW5kIGRvZXMgbm90IG1lZXQgYVxyXG4gICAgICAvLyBzcGVjaWZpYyBsZWFybmluZyBnb2FsIGluIHRoaXMgY29udGV4dC5cclxuICAgICAgc2hvd1B1bHNlQ29udGludW91c1JhZGlvQnV0dG9uczogZmFsc2UsXHJcbiAgICAgIGNvbnRyb2xQYW5lbE9wdGlvbnM6IHtcclxuICAgICAgICBhZGRpdGlvbmFsQ29udHJvbDogbmV3IFNlcGFyYXRpb25Db250cm9sKCBtb2RlbCApXHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBXaGVuIGVuYWJsZWQgYnkgYSBxdWVyeSBwYXJhbWV0ZXIsIHNob3cgdGhlIHRoZW9yZXRpY2FsIGludGVyZmVyZW5jZSBwYXR0ZXJuLlxyXG4gICAgaWYgKCBXYXZlSW50ZXJmZXJlbmNlUXVlcnlQYXJhbWV0ZXJzLnRoZW9yeSApIHtcclxuICAgICAgdGhpcy5hZGRDaGlsZCggbmV3IFRoZW9yeUludGVyZmVyZW5jZU92ZXJsYXkoIG1vZGVsLnNjZW5lUHJvcGVydHksIG1vZGVsLnNjZW5lcywgdGhpcy53YXZlQXJlYU5vZGUuYm91bmRzLCB7XHJcbiAgICAgICAgY2xpcEFyZWE6IFNoYXBlLmJvdW5kcyggdGhpcy53YXZlQXJlYU5vZGUuYm91bmRzIClcclxuICAgICAgfSApICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG53YXZlSW50ZXJmZXJlbmNlLnJlZ2lzdGVyKCAnSW50ZXJmZXJlbmNlU2NyZWVuVmlldycsIEludGVyZmVyZW5jZVNjcmVlblZpZXcgKTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmZXJlbmNlU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLGdDQUFnQztBQUV0RCxPQUFPQywrQkFBK0IsTUFBTSxpREFBaUQ7QUFDN0YsT0FBT0MseUJBQXlCLE1BQU0sK0NBQStDO0FBQ3JGLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxlQUFlLE1BQU0scUNBQXFDO0FBQ2pFLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUd0RCxNQUFNQyxzQkFBc0IsU0FBU0YsZUFBZSxDQUFDO0VBRW5EO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLEtBQXdCLEVBQUVDLFVBQXNCLEVBQUc7SUFFckUsS0FBSyxDQUFFRCxLQUFLLEVBQUVDLFVBQVUsRUFBRTtNQUV4QjtNQUNBO01BQ0FDLCtCQUErQixFQUFFLEtBQUs7TUFDdENDLG1CQUFtQixFQUFFO1FBQ25CQyxpQkFBaUIsRUFBRSxJQUFJUCxpQkFBaUIsQ0FBRUcsS0FBTTtNQUNsRDtJQUNGLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUtQLCtCQUErQixDQUFDWSxNQUFNLEVBQUc7TUFDNUMsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSVoseUJBQXlCLENBQUVNLEtBQUssQ0FBQ08sYUFBYSxFQUFFUCxLQUFLLENBQUNRLE1BQU0sRUFBRSxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsTUFBTSxFQUFFO1FBQ3pHQyxRQUFRLEVBQUVuQixLQUFLLENBQUNrQixNQUFNLENBQUUsSUFBSSxDQUFDRCxZQUFZLENBQUNDLE1BQU87TUFDbkQsQ0FBRSxDQUFFLENBQUM7SUFDUDtFQUNGO0FBQ0Y7QUFFQWYsZ0JBQWdCLENBQUNpQixRQUFRLENBQUUsd0JBQXdCLEVBQUVkLHNCQUF1QixDQUFDO0FBQzdFLGVBQWVBLHNCQUFzQiJ9