// Copyright 2017-2023, University of Colorado Boulder
// @ts-nocheck
/**
 * "Interference" screen in the Wave Interference simulation.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import Tandem from '../../../tandem/js/Tandem.js';
import interference_screen_icon_png from '../../images/interference_screen_icon_png.js';
import waveInterference from '../waveInterference.js';
import WaveInterferenceStrings from '../WaveInterferenceStrings.js';
import InterferenceModel from './model/InterferenceModel.js';
import InterferenceScreenView from './view/InterferenceScreenView.js';
class InterferenceScreen extends Screen {
  /**
   * @param alignGroup - for aligning the control panels on the right side of the lattice
   */
  constructor(alignGroup) {
    const options = {
      backgroundColorProperty: new Property('white'),
      name: WaveInterferenceStrings.screen.interferenceStringProperty,
      homeScreenIcon: new ScreenIcon(new Image(interference_screen_icon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      showUnselectedHomeScreenIconFrame: true,
      showScreenIconFrameForNavigationBarFill: 'black',
      tandem: Tandem.OPT_OUT
    };
    super(() => new InterferenceModel(), model => new InterferenceScreenView(model, alignGroup), options);
  }
}
waveInterference.register('InterferenceScreen', InterferenceScreen);
export default InterferenceScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsIlRhbmRlbSIsImludGVyZmVyZW5jZV9zY3JlZW5faWNvbl9wbmciLCJ3YXZlSW50ZXJmZXJlbmNlIiwiV2F2ZUludGVyZmVyZW5jZVN0cmluZ3MiLCJJbnRlcmZlcmVuY2VNb2RlbCIsIkludGVyZmVyZW5jZVNjcmVlblZpZXciLCJJbnRlcmZlcmVuY2VTY3JlZW4iLCJjb25zdHJ1Y3RvciIsImFsaWduR3JvdXAiLCJvcHRpb25zIiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJuYW1lIiwic2NyZWVuIiwiaW50ZXJmZXJlbmNlU3RyaW5nUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsInNob3dVbnNlbGVjdGVkSG9tZVNjcmVlbkljb25GcmFtZSIsInNob3dTY3JlZW5JY29uRnJhbWVGb3JOYXZpZ2F0aW9uQmFyRmlsbCIsInRhbmRlbSIsIk9QVF9PVVQiLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSW50ZXJmZXJlbmNlU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG4vLyBAdHMtbm9jaGVja1xyXG4vKipcclxuICogXCJJbnRlcmZlcmVuY2VcIiBzY3JlZW4gaW4gdGhlIFdhdmUgSW50ZXJmZXJlbmNlIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBBbGlnbkdyb3VwLCBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBpbnRlcmZlcmVuY2Vfc2NyZWVuX2ljb25fcG5nIGZyb20gJy4uLy4uL2ltYWdlcy9pbnRlcmZlcmVuY2Vfc2NyZWVuX2ljb25fcG5nLmpzJztcclxuaW1wb3J0IHdhdmVJbnRlcmZlcmVuY2UgZnJvbSAnLi4vd2F2ZUludGVyZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBXYXZlSW50ZXJmZXJlbmNlU3RyaW5ncyBmcm9tICcuLi9XYXZlSW50ZXJmZXJlbmNlU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBJbnRlcmZlcmVuY2VNb2RlbCBmcm9tICcuL21vZGVsL0ludGVyZmVyZW5jZU1vZGVsLmpzJztcclxuaW1wb3J0IEludGVyZmVyZW5jZVNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0ludGVyZmVyZW5jZVNjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgSW50ZXJmZXJlbmNlU2NyZWVuIGV4dGVuZHMgU2NyZWVuPEludGVyZmVyZW5jZU1vZGVsLCBJbnRlcmZlcmVuY2VTY3JlZW5WaWV3PiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBhbGlnbkdyb3VwIC0gZm9yIGFsaWduaW5nIHRoZSBjb250cm9sIHBhbmVscyBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgbGF0dGljZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYWxpZ25Hcm91cDogQWxpZ25Hcm91cCApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoICd3aGl0ZScgKSxcclxuICAgICAgbmFtZTogV2F2ZUludGVyZmVyZW5jZVN0cmluZ3Muc2NyZWVuLmludGVyZmVyZW5jZVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggaW50ZXJmZXJlbmNlX3NjcmVlbl9pY29uX3BuZyApLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9ICksXHJcbiAgICAgIHNob3dVbnNlbGVjdGVkSG9tZVNjcmVlbkljb25GcmFtZTogdHJ1ZSxcclxuICAgICAgc2hvd1NjcmVlbkljb25GcmFtZUZvck5hdmlnYXRpb25CYXJGaWxsOiAnYmxhY2snLFxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXHJcbiAgICB9O1xyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBJbnRlcmZlcmVuY2VNb2RlbCgpLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgSW50ZXJmZXJlbmNlU2NyZWVuVmlldyggbW9kZWwsIGFsaWduR3JvdXAgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbndhdmVJbnRlcmZlcmVuY2UucmVnaXN0ZXIoICdJbnRlcmZlcmVuY2VTY3JlZW4nLCBJbnRlcmZlcmVuY2VTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmZXJlbmNlU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBcUJDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDbEUsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyw0QkFBNEIsTUFBTSw4Q0FBOEM7QUFDdkYsT0FBT0MsZ0JBQWdCLE1BQU0sd0JBQXdCO0FBQ3JELE9BQU9DLHVCQUF1QixNQUFNLCtCQUErQjtBQUNuRSxPQUFPQyxpQkFBaUIsTUFBTSw4QkFBOEI7QUFDNUQsT0FBT0Msc0JBQXNCLE1BQU0sa0NBQWtDO0FBRXJFLE1BQU1DLGtCQUFrQixTQUFTVCxNQUFNLENBQTRDO0VBRWpGO0FBQ0Y7QUFDQTtFQUNTVSxXQUFXQSxDQUFFQyxVQUFzQixFQUFHO0lBQzNDLE1BQU1DLE9BQU8sR0FBRztNQUNkQyx1QkFBdUIsRUFBRSxJQUFJZCxRQUFRLENBQUUsT0FBUSxDQUFDO01BQ2hEZSxJQUFJLEVBQUVSLHVCQUF1QixDQUFDUyxNQUFNLENBQUNDLDBCQUEwQjtNQUMvREMsY0FBYyxFQUFFLElBQUloQixVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFRSw0QkFBNkIsQ0FBQyxFQUFFO1FBQ3pFYyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSEMsaUNBQWlDLEVBQUUsSUFBSTtNQUN2Q0MsdUNBQXVDLEVBQUUsT0FBTztNQUNoREMsTUFBTSxFQUFFbkIsTUFBTSxDQUFDb0I7SUFDakIsQ0FBQztJQUNELEtBQUssQ0FDSCxNQUFNLElBQUloQixpQkFBaUIsQ0FBQyxDQUFDLEVBQzdCaUIsS0FBSyxJQUFJLElBQUloQixzQkFBc0IsQ0FBRWdCLEtBQUssRUFBRWIsVUFBVyxDQUFDLEVBQ3hEQyxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFQLGdCQUFnQixDQUFDb0IsUUFBUSxDQUFFLG9CQUFvQixFQUFFaEIsa0JBQW1CLENBQUM7QUFDckUsZUFBZUEsa0JBQWtCIn0=