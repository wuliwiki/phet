// Copyright 2022-2023, University of Colorado Boulder

/**
 * Model class which the 'Decay' and 'Nuclide Chart' screen will extend.
 *
 * @author Luisa Vargas
 */

import buildANucleus from '../../buildANucleus.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import AtomIdentifier from '../../../../shred/js/AtomIdentifier.js';
import createObservableArray from '../../../../axon/js/createObservableArray.js';
import Range from '../../../../dot/js/Range.js';
import ParticleType from '../view/ParticleType.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
class BANModel {
  // the stability of the nuclide

  // if a nuclide exists

  // arrays of all Particle's that exist in all places

  // the atom that the user will build, modify, and generally play with.

  // the range of the number of protons allowed

  // the range of the number of neutrons allowed

  // array of particles sent to the nucleus but not there yet

  // keep track of when the double arrow buttons are clicked or when the single arrow buttons are clicked

  // keep track of any particle related animations that may need to be cancelled at some point

  // array of all emitted particles

  constructor(maximumProtonNumber, maximumNeutronNumber, particleAtom) {
    // Create the atom
    this.particleAtom = particleAtom;
    this.particles = createObservableArray();
    this.incomingProtons = createObservableArray();
    this.incomingNeutrons = createObservableArray();
    this.userControlledProtons = createObservableArray();
    this.userControlledNeutrons = createObservableArray();
    this.outgoingParticles = createObservableArray();
    this.particleAnimations = createObservableArray();
    this.particleAnimations.addItemRemovedListener(animation => {
      animation && animation.stop();
      animation = null;
    });
    this.doubleArrowButtonClickedBooleanProperty = new BooleanProperty(false);
    this.protonCountRange = new Range(0, maximumProtonNumber);
    this.neutronCountRange = new Range(0, maximumNeutronNumber);

    // the stability of the nuclide is determined by the given number of protons and neutrons
    this.isStableBooleanProperty = new DerivedProperty([this.particleAtom.protonCountProperty, this.particleAtom.neutronCountProperty], (protonCount, neutronCount) => AtomIdentifier.isStable(protonCount, neutronCount));

    // if a nuclide with a given number of protons and neutrons exists
    this.doesNuclideExistBooleanProperty = new DerivedProperty([this.particleAtom.protonCountProperty, this.particleAtom.neutronCountProperty], (protonCount, neutronCount) => AtomIdentifier.doesExist(protonCount, neutronCount));

    // TODO: this might be causing bugs since it's being called twice
    // reconfigure the nucleus when the massNumber changes
    this.particleAtom.massNumberProperty.link(() => this.particleAtom.reconfigureNucleus());
  }

  /**
   * Select the particle closest to its creator node.
   */
  getParticleToReturn(particleType, creatorNodePosition) {
    const sortedParticles = _.sortBy(this.getParticlesByType(particleType), particle => {
      return particle.positionProperty.value.distance(creatorNodePosition);
    });

    // We know that sortedParticles is not empty, and does not contain null.
    return sortedParticles.shift();
  }

  /**
   * Return array of all the particles that are of particleType and part of the particleAtom
   */
  getParticlesByType(particleType) {
    const filteredParticles = _.filter(this.particles, particle => {
      return this.particleAtom.containsParticle(particle) && particle.type === particleType.name.toLowerCase();
    });
    assert && assert(filteredParticles.length !== 0, 'No particles of particleType ' + particleType.name + ' are in the particleAtom.');
    return filteredParticles;
  }

  /**
   * Return the destination of a particle when it's added to the particle atom
   */
  getParticleDestination(particleType, particle) {
    return this.particleAtom.positionProperty.value;
  }

  /**
   * Add a Particle to the model
   */
  addParticle(particle) {
    assert && assert(_.some(ParticleType.enumeration.values, particleType => {
      return particle.type === particleType.name.toLowerCase();
    }), 'Particles must be one of the types in ParticleType ' + particle.type);
    this.particles.push(particle);
  }

  /**
   * Remove a Particle from the model
   */
  removeParticle(particle) {
    this.particles.remove(particle);
  }
  reset() {
    this.particleAtom.clear();
    this.particles.clear();
    this.incomingProtons.clear();
    this.incomingNeutrons.clear();
    this.outgoingParticles.clear();
    this.userControlledProtons.clear();
    this.userControlledNeutrons.clear();
    this.particleAnimations.clear();
  }

  /**
   * @param dt - time step, in seconds
   */
  step(dt) {
    // Update particle positions
    this.particles.forEach(particle => {
      particle.step(dt);
    });
  }
}
buildANucleus.register('BANModel', BANModel);
export default BANModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,