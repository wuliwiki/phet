// Copyright 2022-2023, University of Colorado Boulder

/**
 * ParticleType identifies the particle types and their colors.
 *
 * @author Luisa Vargas
 */

import EnumerationValue from '../../../../phet-core/js/EnumerationValue.js';
import buildANucleus from '../../buildANucleus.js';
import Enumeration from '../../../../phet-core/js/Enumeration.js';
import BuildANucleusStrings from '../../BuildANucleusStrings.js';
import BANColors from '../BANColors.js';
class ParticleType extends EnumerationValue {
  static PROTON = new ParticleType(BuildANucleusStrings.proton, BANColors.protonColorProperty);
  static NEUTRON = new ParticleType(BuildANucleusStrings.neutronUppercase, BANColors.neutronColorProperty);
  static ELECTRON = new ParticleType(BuildANucleusStrings.electron, BANColors.electronColorProperty);
  static POSITRON = new ParticleType(BuildANucleusStrings.positron, BANColors.positronColorProperty);
  static enumeration = new Enumeration(ParticleType);
  constructor(label, colorProperty) {
    super();
    this.label = label;
    this.colorProperty = colorProperty;
  }
}
buildANucleus.register('ParticleType', ParticleType);
export default ParticleType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvblZhbHVlIiwiYnVpbGRBTnVjbGV1cyIsIkVudW1lcmF0aW9uIiwiQnVpbGRBTnVjbGV1c1N0cmluZ3MiLCJCQU5Db2xvcnMiLCJQYXJ0aWNsZVR5cGUiLCJQUk9UT04iLCJwcm90b24iLCJwcm90b25Db2xvclByb3BlcnR5IiwiTkVVVFJPTiIsIm5ldXRyb25VcHBlcmNhc2UiLCJuZXV0cm9uQ29sb3JQcm9wZXJ0eSIsIkVMRUNUUk9OIiwiZWxlY3Ryb24iLCJlbGVjdHJvbkNvbG9yUHJvcGVydHkiLCJQT1NJVFJPTiIsInBvc2l0cm9uIiwicG9zaXRyb25Db2xvclByb3BlcnR5IiwiZW51bWVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImxhYmVsIiwiY29sb3JQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGFydGljbGVUeXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBhcnRpY2xlVHlwZSBpZGVudGlmaWVzIHRoZSBwYXJ0aWNsZSB0eXBlcyBhbmQgdGhlaXIgY29sb3JzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEx1aXNhIFZhcmdhc1xyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvblZhbHVlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvblZhbHVlLmpzJztcclxuaW1wb3J0IGJ1aWxkQU51Y2xldXMgZnJvbSAnLi4vLi4vYnVpbGRBTnVjbGV1cy5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvRW51bWVyYXRpb24uanMnO1xyXG5pbXBvcnQgeyBQcm9maWxlQ29sb3JQcm9wZXJ0eSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBCdWlsZEFOdWNsZXVzU3RyaW5ncyBmcm9tICcuLi8uLi9CdWlsZEFOdWNsZXVzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBCQU5Db2xvcnMgZnJvbSAnLi4vQkFOQ29sb3JzLmpzJztcclxuXHJcbmNsYXNzIFBhcnRpY2xlVHlwZSBleHRlbmRzIEVudW1lcmF0aW9uVmFsdWUge1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBST1RPTiA9IG5ldyBQYXJ0aWNsZVR5cGUoIEJ1aWxkQU51Y2xldXNTdHJpbmdzLnByb3RvbiwgQkFOQ29sb3JzLnByb3RvbkNvbG9yUHJvcGVydHkgKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBORVVUUk9OID0gbmV3IFBhcnRpY2xlVHlwZSggQnVpbGRBTnVjbGV1c1N0cmluZ3MubmV1dHJvblVwcGVyY2FzZSwgQkFOQ29sb3JzLm5ldXRyb25Db2xvclByb3BlcnR5ICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRUxFQ1RST04gPSBuZXcgUGFydGljbGVUeXBlKCBCdWlsZEFOdWNsZXVzU3RyaW5ncy5lbGVjdHJvbiwgQkFOQ29sb3JzLmVsZWN0cm9uQ29sb3JQcm9wZXJ0eSApO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBPU0lUUk9OID0gbmV3IFBhcnRpY2xlVHlwZSggQnVpbGRBTnVjbGV1c1N0cmluZ3MucG9zaXRyb24sIEJBTkNvbG9ycy5wb3NpdHJvbkNvbG9yUHJvcGVydHkgKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBlbnVtZXJhdGlvbiA9IG5ldyBFbnVtZXJhdGlvbiggUGFydGljbGVUeXBlICk7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBsYWJlbDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBjb2xvclByb3BlcnR5OiBQcm9maWxlQ29sb3JQcm9wZXJ0eTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsYWJlbDogc3RyaW5nLCBjb2xvclByb3BlcnR5OiBQcm9maWxlQ29sb3JQcm9wZXJ0eSApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgdGhpcy5jb2xvclByb3BlcnR5ID0gY29sb3JQcm9wZXJ0eTtcclxuXHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFOdWNsZXVzLnJlZ2lzdGVyKCAnUGFydGljbGVUeXBlJywgUGFydGljbGVUeXBlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBhcnRpY2xlVHlwZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZ0JBQWdCLE1BQU0sOENBQThDO0FBQzNFLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0MsV0FBVyxNQUFNLHlDQUF5QztBQUVqRSxPQUFPQyxvQkFBb0IsTUFBTSwrQkFBK0I7QUFDaEUsT0FBT0MsU0FBUyxNQUFNLGlCQUFpQjtBQUV2QyxNQUFNQyxZQUFZLFNBQVNMLGdCQUFnQixDQUFDO0VBRTFDLE9BQXVCTSxNQUFNLEdBQUcsSUFBSUQsWUFBWSxDQUFFRixvQkFBb0IsQ0FBQ0ksTUFBTSxFQUFFSCxTQUFTLENBQUNJLG1CQUFvQixDQUFDO0VBRTlHLE9BQXVCQyxPQUFPLEdBQUcsSUFBSUosWUFBWSxDQUFFRixvQkFBb0IsQ0FBQ08sZ0JBQWdCLEVBQUVOLFNBQVMsQ0FBQ08sb0JBQXFCLENBQUM7RUFFMUgsT0FBdUJDLFFBQVEsR0FBRyxJQUFJUCxZQUFZLENBQUVGLG9CQUFvQixDQUFDVSxRQUFRLEVBQUVULFNBQVMsQ0FBQ1UscUJBQXNCLENBQUM7RUFFcEgsT0FBdUJDLFFBQVEsR0FBRyxJQUFJVixZQUFZLENBQUVGLG9CQUFvQixDQUFDYSxRQUFRLEVBQUVaLFNBQVMsQ0FBQ2EscUJBQXNCLENBQUM7RUFFcEgsT0FBdUJDLFdBQVcsR0FBRyxJQUFJaEIsV0FBVyxDQUFFRyxZQUFhLENBQUM7RUFLN0RjLFdBQVdBLENBQUVDLEtBQWEsRUFBRUMsYUFBbUMsRUFBRztJQUN2RSxLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0QsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQSxhQUFhO0VBRXBDO0FBQ0Y7QUFFQXBCLGFBQWEsQ0FBQ3FCLFFBQVEsQ0FBRSxjQUFjLEVBQUVqQixZQUFhLENBQUM7QUFDdEQsZUFBZUEsWUFBWSJ9