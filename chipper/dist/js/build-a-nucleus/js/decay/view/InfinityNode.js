// Copyright 2022, University of Colorado Boulder

/**
 * A symmetrical infinity symbol.
 *
 * @author Luisa Vargas
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import buildANucleus from '../../buildANucleus.js';
import { Color, Path } from '../../../../scenery/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Shape } from '../../../../kite/js/imports.js';
class InfinityNode extends Path {
  constructor(providedOptions) {
    const options = optionize()({
      radius: 6,
      lineWidth: 2,
      stroke: Color.BLACK
    }, providedOptions);
    const radius = options.radius; // for convenience
    const distanceBetweenCircles = 2.85 * radius; // empirically determined to have the straight lines form an 'X'

    const infinityShape = new Shape().ellipticalArc(0, -radius, radius, radius, 0, Math.PI / 4, -Math.PI / 4, false).ellipticalArc(distanceBetweenCircles, -radius, radius, radius, 0, 3 * Math.PI / 4, 5 * Math.PI / 4, true).close();
    super(infinityShape, options);
  }
}
buildANucleus.register('InfinityNode', InfinityNode);
export default InfinityNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZEFOdWNsZXVzIiwiQ29sb3IiLCJQYXRoIiwib3B0aW9uaXplIiwiU2hhcGUiLCJJbmZpbml0eU5vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJyYWRpdXMiLCJsaW5lV2lkdGgiLCJzdHJva2UiLCJCTEFDSyIsImRpc3RhbmNlQmV0d2VlbkNpcmNsZXMiLCJpbmZpbml0eVNoYXBlIiwiZWxsaXB0aWNhbEFyYyIsIk1hdGgiLCJQSSIsImNsb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbmZpbml0eU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgc3ltbWV0cmljYWwgaW5maW5pdHkgc3ltYm9sLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEx1aXNhIFZhcmdhc1xyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGJ1aWxkQU51Y2xldXMgZnJvbSAnLi4vLi4vYnVpbGRBTnVjbGV1cy5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBQYXRoLCBQYXRoT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcmFkaXVzPzogbnVtYmVyO1xyXG59O1xyXG5leHBvcnQgdHlwZSBJbmZpbml0eU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQYXRoT3B0aW9ucztcclxuXHJcbmNsYXNzIEluZmluaXR5Tm9kZSBleHRlbmRzIFBhdGgge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IEluZmluaXR5Tm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxJbmZpbml0eU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGF0aE9wdGlvbnM+KCkoIHtcclxuICAgICAgcmFkaXVzOiA2LFxyXG4gICAgICBsaW5lV2lkdGg6IDIsXHJcbiAgICAgIHN0cm9rZTogQ29sb3IuQkxBQ0tcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzOyAvLyBmb3IgY29udmVuaWVuY2VcclxuICAgIGNvbnN0IGRpc3RhbmNlQmV0d2VlbkNpcmNsZXMgPSAyLjg1ICogcmFkaXVzOyAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkIHRvIGhhdmUgdGhlIHN0cmFpZ2h0IGxpbmVzIGZvcm0gYW4gJ1gnXHJcblxyXG4gICAgY29uc3QgaW5maW5pdHlTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgIC5lbGxpcHRpY2FsQXJjKCAwLCAtcmFkaXVzLCByYWRpdXMsIHJhZGl1cywgMCwgTWF0aC5QSSAvIDQsIC1NYXRoLlBJIC8gNCwgZmFsc2UgKVxyXG4gICAgICAuZWxsaXB0aWNhbEFyYyggZGlzdGFuY2VCZXR3ZWVuQ2lyY2xlcywgLXJhZGl1cywgcmFkaXVzLCByYWRpdXMsIDAsIDMgKiBNYXRoLlBJIC8gNCwgNSAqIE1hdGguUEkgLyA0LCB0cnVlIClcclxuICAgICAgLmNsb3NlKCk7XHJcblxyXG4gICAgc3VwZXIoIGluZmluaXR5U2hhcGUsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmJ1aWxkQU51Y2xldXMucmVnaXN0ZXIoICdJbmZpbml0eU5vZGUnLCBJbmZpbml0eU5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgSW5maW5pdHlOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLFFBQXFCLG1DQUFtQztBQUM1RSxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFPdEQsTUFBTUMsWUFBWSxTQUFTSCxJQUFJLENBQUM7RUFFdkJJLFdBQVdBLENBQUVDLGVBQXFDLEVBQUc7SUFFMUQsTUFBTUMsT0FBTyxHQUFHTCxTQUFTLENBQWdELENBQUMsQ0FBRTtNQUMxRU0sTUFBTSxFQUFFLENBQUM7TUFDVEMsU0FBUyxFQUFFLENBQUM7TUFDWkMsTUFBTSxFQUFFVixLQUFLLENBQUNXO0lBQ2hCLENBQUMsRUFBRUwsZUFBZ0IsQ0FBQztJQUVwQixNQUFNRSxNQUFNLEdBQUdELE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUM7SUFDL0IsTUFBTUksc0JBQXNCLEdBQUcsSUFBSSxHQUFHSixNQUFNLENBQUMsQ0FBQzs7SUFFOUMsTUFBTUssYUFBYSxHQUFHLElBQUlWLEtBQUssQ0FBQyxDQUFDLENBQzlCVyxhQUFhLENBQUUsQ0FBQyxFQUFFLENBQUNOLE1BQU0sRUFBRUEsTUFBTSxFQUFFQSxNQUFNLEVBQUUsQ0FBQyxFQUFFTyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQ0QsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQU0sQ0FBQyxDQUNoRkYsYUFBYSxDQUFFRixzQkFBc0IsRUFBRSxDQUFDSixNQUFNLEVBQUVBLE1BQU0sRUFBRUEsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUdPLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFLLENBQUMsQ0FDM0dDLEtBQUssQ0FBQyxDQUFDO0lBRVYsS0FBSyxDQUFFSixhQUFhLEVBQUVOLE9BQVEsQ0FBQztFQUNqQztBQUNGO0FBRUFSLGFBQWEsQ0FBQ21CLFFBQVEsQ0FBRSxjQUFjLEVBQUVkLFlBQWEsQ0FBQztBQUN0RCxlQUFlQSxZQUFZIn0=