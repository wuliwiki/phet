// Copyright 2021-2022, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author Luisa Vargas
 */

import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import BuildANucleusStrings from './BuildANucleusStrings.js';
import DecayScreen from './decay/DecayScreen.js';
import ChartIntroScreen from './chart-intro/ChartIntroScreen.js';
import BANQueryParameters from './common/BANQueryParameters.js';
import AtomIdentifier from '../../shred/js/AtomIdentifier.js';
import BANConstants from './common/BANConstants.js';
const buildANucleusTitleStringProperty = BuildANucleusStrings['build-a-nucleus'].titleStringProperty;
const simOptions = {
  credits: {
    leadDesign: 'Luisa Vargas, Ariel Paul',
    softwareDevelopment: 'Luisa Vargas, Chris Klusendorf',
    team: 'Jason Donev (University of Calgary), Kathy Perkins, Amy Rouinfar',
    qualityAssurance: 'Clifford Hardin, Emily Miller, Nancy Salpepi, Kathryn Woessner',
    graphicArts: '',
    soundDesign: '',
    thanks: 'We gratefully acknowledge the support of ECO Canada for helping to fund this sim.'
  }
};

// launch the sim - beware that scenery Image nodes created outside of simLauncher.launch() will have zero bounds
// until the images are fully loaded, see https://github.com/phetsims/coulombs-law/issues/70
simLauncher.launch(() => {
  // check if a nuclide with the given query parameters exists and reset to default values if not
  if (!AtomIdentifier.doesExist(BANQueryParameters.protons, BANQueryParameters.neutrons)) {
    const errorMessage = `A nuclide with ${BANQueryParameters.protons} protons and ${BANQueryParameters.neutrons} neutrons does not exist`;

    // add a warning if the protons or neutrons query parameter was part of an invalid combo
    // there may have already been a warning added if the query parameter value is outside the valid range, so check first
    if (!_.some(QueryStringMachine.warnings, warning => warning.key === 'protons') && QueryStringMachine.containsKey('protons')) {
      QueryStringMachine.addWarning('protons', BANQueryParameters.protons, errorMessage);
    }
    if (!_.some(QueryStringMachine.warnings, warning => warning.key === 'neutrons') && QueryStringMachine.containsKey('neutrons')) {
      QueryStringMachine.addWarning('neutrons', BANQueryParameters.neutrons, errorMessage);
    }
    BANQueryParameters.protons = BANConstants.DEFAULT_INITIAL_PROTON_COUNT;
    BANQueryParameters.neutrons = BANConstants.DEFAULT_INITIAL_NEUTRON_COUNT;
  }
  const sim = new Sim(buildANucleusTitleStringProperty, [new DecayScreen(), new ChartIntroScreen()], simOptions);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW0iLCJzaW1MYXVuY2hlciIsIkJ1aWxkQU51Y2xldXNTdHJpbmdzIiwiRGVjYXlTY3JlZW4iLCJDaGFydEludHJvU2NyZWVuIiwiQkFOUXVlcnlQYXJhbWV0ZXJzIiwiQXRvbUlkZW50aWZpZXIiLCJCQU5Db25zdGFudHMiLCJidWlsZEFOdWNsZXVzVGl0bGVTdHJpbmdQcm9wZXJ0eSIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJzaW1PcHRpb25zIiwiY3JlZGl0cyIsImxlYWREZXNpZ24iLCJzb2Z0d2FyZURldmVsb3BtZW50IiwidGVhbSIsInF1YWxpdHlBc3N1cmFuY2UiLCJncmFwaGljQXJ0cyIsInNvdW5kRGVzaWduIiwidGhhbmtzIiwibGF1bmNoIiwiZG9lc0V4aXN0IiwicHJvdG9ucyIsIm5ldXRyb25zIiwiZXJyb3JNZXNzYWdlIiwiXyIsInNvbWUiLCJRdWVyeVN0cmluZ01hY2hpbmUiLCJ3YXJuaW5ncyIsIndhcm5pbmciLCJrZXkiLCJjb250YWluc0tleSIsImFkZFdhcm5pbmciLCJERUZBVUxUX0lOSVRJQUxfUFJPVE9OX0NPVU5UIiwiREVGQVVMVF9JTklUSUFMX05FVVRST05fQ09VTlQiLCJzaW0iLCJzdGFydCJdLCJzb3VyY2VzIjpbImJ1aWxkLWEtbnVjbGV1cy1tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBzaW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgTHVpc2EgVmFyZ2FzXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNpbSwgeyBTaW1PcHRpb25zIH0gZnJvbSAnLi4vLi4vam9pc3QvanMvU2ltLmpzJztcclxuaW1wb3J0IHNpbUxhdW5jaGVyIGZyb20gJy4uLy4uL2pvaXN0L2pzL3NpbUxhdW5jaGVyLmpzJztcclxuaW1wb3J0IEJ1aWxkQU51Y2xldXNTdHJpbmdzIGZyb20gJy4vQnVpbGRBTnVjbGV1c1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgRGVjYXlTY3JlZW4gZnJvbSAnLi9kZWNheS9EZWNheVNjcmVlbi5qcyc7XHJcbmltcG9ydCBDaGFydEludHJvU2NyZWVuIGZyb20gJy4vY2hhcnQtaW50cm8vQ2hhcnRJbnRyb1NjcmVlbi5qcyc7XHJcbmltcG9ydCBCQU5RdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi9jb21tb24vQkFOUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IEF0b21JZGVudGlmaWVyIGZyb20gJy4uLy4uL3NocmVkL2pzL0F0b21JZGVudGlmaWVyLmpzJztcclxuaW1wb3J0IEJBTkNvbnN0YW50cyBmcm9tICcuL2NvbW1vbi9CQU5Db25zdGFudHMuanMnO1xyXG5cclxuY29uc3QgYnVpbGRBTnVjbGV1c1RpdGxlU3RyaW5nUHJvcGVydHkgPSBCdWlsZEFOdWNsZXVzU3RyaW5nc1sgJ2J1aWxkLWEtbnVjbGV1cycgXS50aXRsZVN0cmluZ1Byb3BlcnR5O1xyXG5cclxuY29uc3Qgc2ltT3B0aW9uczogU2ltT3B0aW9ucyA9IHtcclxuXHJcbiAgY3JlZGl0czoge1xyXG4gICAgbGVhZERlc2lnbjogJ0x1aXNhIFZhcmdhcywgQXJpZWwgUGF1bCcsXHJcbiAgICBzb2Z0d2FyZURldmVsb3BtZW50OiAnTHVpc2EgVmFyZ2FzLCBDaHJpcyBLbHVzZW5kb3JmJyxcclxuICAgIHRlYW06ICdKYXNvbiBEb25ldiAoVW5pdmVyc2l0eSBvZiBDYWxnYXJ5KSwgS2F0aHkgUGVya2lucywgQW15IFJvdWluZmFyJyxcclxuICAgIHF1YWxpdHlBc3N1cmFuY2U6ICdDbGlmZm9yZCBIYXJkaW4sIEVtaWx5IE1pbGxlciwgTmFuY3kgU2FscGVwaSwgS2F0aHJ5biBXb2Vzc25lcicsXHJcbiAgICBncmFwaGljQXJ0czogJycsXHJcbiAgICBzb3VuZERlc2lnbjogJycsXHJcbiAgICB0aGFua3M6ICdXZSBncmF0ZWZ1bGx5IGFja25vd2xlZGdlIHRoZSBzdXBwb3J0IG9mIEVDTyBDYW5hZGEgZm9yIGhlbHBpbmcgdG8gZnVuZCB0aGlzIHNpbS4nXHJcbiAgfVxyXG59O1xyXG5cclxuLy8gbGF1bmNoIHRoZSBzaW0gLSBiZXdhcmUgdGhhdCBzY2VuZXJ5IEltYWdlIG5vZGVzIGNyZWF0ZWQgb3V0c2lkZSBvZiBzaW1MYXVuY2hlci5sYXVuY2goKSB3aWxsIGhhdmUgemVybyBib3VuZHNcclxuLy8gdW50aWwgdGhlIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NvdWxvbWJzLWxhdy9pc3N1ZXMvNzBcclxuc2ltTGF1bmNoZXIubGF1bmNoKCAoKSA9PiB7XHJcblxyXG4gIC8vIGNoZWNrIGlmIGEgbnVjbGlkZSB3aXRoIHRoZSBnaXZlbiBxdWVyeSBwYXJhbWV0ZXJzIGV4aXN0cyBhbmQgcmVzZXQgdG8gZGVmYXVsdCB2YWx1ZXMgaWYgbm90XHJcbiAgaWYgKCAhQXRvbUlkZW50aWZpZXIuZG9lc0V4aXN0KCBCQU5RdWVyeVBhcmFtZXRlcnMucHJvdG9ucywgQkFOUXVlcnlQYXJhbWV0ZXJzLm5ldXRyb25zICkgKSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgQSBudWNsaWRlIHdpdGggJHtCQU5RdWVyeVBhcmFtZXRlcnMucHJvdG9uc30gcHJvdG9ucyBhbmQgJHtCQU5RdWVyeVBhcmFtZXRlcnMubmV1dHJvbnN9IG5ldXRyb25zIGRvZXMgbm90IGV4aXN0YDtcclxuXHJcbiAgICAvLyBhZGQgYSB3YXJuaW5nIGlmIHRoZSBwcm90b25zIG9yIG5ldXRyb25zIHF1ZXJ5IHBhcmFtZXRlciB3YXMgcGFydCBvZiBhbiBpbnZhbGlkIGNvbWJvXHJcbiAgICAvLyB0aGVyZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gYSB3YXJuaW5nIGFkZGVkIGlmIHRoZSBxdWVyeSBwYXJhbWV0ZXIgdmFsdWUgaXMgb3V0c2lkZSB0aGUgdmFsaWQgcmFuZ2UsIHNvIGNoZWNrIGZpcnN0XHJcbiAgICBpZiAoICFfLnNvbWUoIFF1ZXJ5U3RyaW5nTWFjaGluZS53YXJuaW5ncywgd2FybmluZyA9PiB3YXJuaW5nLmtleSA9PT0gJ3Byb3RvbnMnICkgJiYgUXVlcnlTdHJpbmdNYWNoaW5lLmNvbnRhaW5zS2V5KCAncHJvdG9ucycgKSApIHtcclxuICAgICAgUXVlcnlTdHJpbmdNYWNoaW5lLmFkZFdhcm5pbmcoICdwcm90b25zJywgQkFOUXVlcnlQYXJhbWV0ZXJzLnByb3RvbnMsIGVycm9yTWVzc2FnZSApO1xyXG4gICAgfVxyXG4gICAgaWYgKCAhXy5zb21lKCBRdWVyeVN0cmluZ01hY2hpbmUud2FybmluZ3MsIHdhcm5pbmcgPT4gd2FybmluZy5rZXkgPT09ICduZXV0cm9ucycgKSAmJiBRdWVyeVN0cmluZ01hY2hpbmUuY29udGFpbnNLZXkoICduZXV0cm9ucycgKSApIHtcclxuICAgICAgUXVlcnlTdHJpbmdNYWNoaW5lLmFkZFdhcm5pbmcoICduZXV0cm9ucycsIEJBTlF1ZXJ5UGFyYW1ldGVycy5uZXV0cm9ucywgZXJyb3JNZXNzYWdlICk7XHJcbiAgICB9XHJcbiAgICBCQU5RdWVyeVBhcmFtZXRlcnMucHJvdG9ucyA9IEJBTkNvbnN0YW50cy5ERUZBVUxUX0lOSVRJQUxfUFJPVE9OX0NPVU5UO1xyXG4gICAgQkFOUXVlcnlQYXJhbWV0ZXJzLm5ldXRyb25zID0gQkFOQ29uc3RhbnRzLkRFRkFVTFRfSU5JVElBTF9ORVVUUk9OX0NPVU5UO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2ltID0gbmV3IFNpbSggYnVpbGRBTnVjbGV1c1RpdGxlU3RyaW5nUHJvcGVydHksIFtcclxuICAgIG5ldyBEZWNheVNjcmVlbigpLFxyXG4gICAgbmV3IENoYXJ0SW50cm9TY3JlZW4oKVxyXG4gIF0sIHNpbU9wdGlvbnMgKTtcclxuICBzaW0uc3RhcnQoKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxHQUFHLE1BQXNCLHVCQUF1QjtBQUN2RCxPQUFPQyxXQUFXLE1BQU0sK0JBQStCO0FBQ3ZELE9BQU9DLG9CQUFvQixNQUFNLDJCQUEyQjtBQUM1RCxPQUFPQyxXQUFXLE1BQU0sd0JBQXdCO0FBQ2hELE9BQU9DLGdCQUFnQixNQUFNLG1DQUFtQztBQUNoRSxPQUFPQyxrQkFBa0IsTUFBTSxnQ0FBZ0M7QUFDL0QsT0FBT0MsY0FBYyxNQUFNLGtDQUFrQztBQUM3RCxPQUFPQyxZQUFZLE1BQU0sMEJBQTBCO0FBRW5ELE1BQU1DLGdDQUFnQyxHQUFHTixvQkFBb0IsQ0FBRSxpQkFBaUIsQ0FBRSxDQUFDTyxtQkFBbUI7QUFFdEcsTUFBTUMsVUFBc0IsR0FBRztFQUU3QkMsT0FBTyxFQUFFO0lBQ1BDLFVBQVUsRUFBRSwwQkFBMEI7SUFDdENDLG1CQUFtQixFQUFFLGdDQUFnQztJQUNyREMsSUFBSSxFQUFFLGtFQUFrRTtJQUN4RUMsZ0JBQWdCLEVBQUUsZ0VBQWdFO0lBQ2xGQyxXQUFXLEVBQUUsRUFBRTtJQUNmQyxXQUFXLEVBQUUsRUFBRTtJQUNmQyxNQUFNLEVBQUU7RUFDVjtBQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBakIsV0FBVyxDQUFDa0IsTUFBTSxDQUFFLE1BQU07RUFFeEI7RUFDQSxJQUFLLENBQUNiLGNBQWMsQ0FBQ2MsU0FBUyxDQUFFZixrQkFBa0IsQ0FBQ2dCLE9BQU8sRUFBRWhCLGtCQUFrQixDQUFDaUIsUUFBUyxDQUFDLEVBQUc7SUFDMUYsTUFBTUMsWUFBWSxHQUFJLGtCQUFpQmxCLGtCQUFrQixDQUFDZ0IsT0FBUSxnQkFBZWhCLGtCQUFrQixDQUFDaUIsUUFBUywwQkFBeUI7O0lBRXRJO0lBQ0E7SUFDQSxJQUFLLENBQUNFLENBQUMsQ0FBQ0MsSUFBSSxDQUFFQyxrQkFBa0IsQ0FBQ0MsUUFBUSxFQUFFQyxPQUFPLElBQUlBLE9BQU8sQ0FBQ0MsR0FBRyxLQUFLLFNBQVUsQ0FBQyxJQUFJSCxrQkFBa0IsQ0FBQ0ksV0FBVyxDQUFFLFNBQVUsQ0FBQyxFQUFHO01BQ2pJSixrQkFBa0IsQ0FBQ0ssVUFBVSxDQUFFLFNBQVMsRUFBRTFCLGtCQUFrQixDQUFDZ0IsT0FBTyxFQUFFRSxZQUFhLENBQUM7SUFDdEY7SUFDQSxJQUFLLENBQUNDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFQyxrQkFBa0IsQ0FBQ0MsUUFBUSxFQUFFQyxPQUFPLElBQUlBLE9BQU8sQ0FBQ0MsR0FBRyxLQUFLLFVBQVcsQ0FBQyxJQUFJSCxrQkFBa0IsQ0FBQ0ksV0FBVyxDQUFFLFVBQVcsQ0FBQyxFQUFHO01BQ25JSixrQkFBa0IsQ0FBQ0ssVUFBVSxDQUFFLFVBQVUsRUFBRTFCLGtCQUFrQixDQUFDaUIsUUFBUSxFQUFFQyxZQUFhLENBQUM7SUFDeEY7SUFDQWxCLGtCQUFrQixDQUFDZ0IsT0FBTyxHQUFHZCxZQUFZLENBQUN5Qiw0QkFBNEI7SUFDdEUzQixrQkFBa0IsQ0FBQ2lCLFFBQVEsR0FBR2YsWUFBWSxDQUFDMEIsNkJBQTZCO0VBQzFFO0VBRUEsTUFBTUMsR0FBRyxHQUFHLElBQUlsQyxHQUFHLENBQUVRLGdDQUFnQyxFQUFFLENBQ3JELElBQUlMLFdBQVcsQ0FBQyxDQUFDLEVBQ2pCLElBQUlDLGdCQUFnQixDQUFDLENBQUMsQ0FDdkIsRUFBRU0sVUFBVyxDQUFDO0VBQ2Z3QixHQUFHLENBQUNDLEtBQUssQ0FBQyxDQUFDO0FBQ2IsQ0FBRSxDQUFDIn0=