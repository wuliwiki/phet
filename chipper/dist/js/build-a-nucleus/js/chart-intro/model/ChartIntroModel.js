// Copyright 2022-2023, University of Colorado Boulder

/**
 * Model class for the 'Chart Intro' screen.
 *
 * @author Luisa Vargas
 */

import buildANucleus from '../../buildANucleus.js';
import BANModel from '../../common/model/BANModel.js';
import ParticleNucleus from './ParticleNucleus.js';
// TODO: move ParticelType into model folder, see: https://github.com/phetsims/chipper/issues/1385
import Particle from '../../../../shred/js/model/Particle.js';
import BANConstants from '../../common/BANConstants.js';
import ParticleAtom from '../../../../shred/js/model/ParticleAtom.js';
import Property from '../../../../axon/js/Property.js';

// types

class ChartIntroModel extends BANModel {
  constructor() {
    const particleAtom = new ParticleNucleus(); // this is our ground truth 'atom'

    // empirically determined, the last nuclide the NuclideChartIntro screen goes up to is Neon-22 (10 protons and 12 neutrons)
    super(BANConstants.CHART_MAX_NUMBER_OF_PROTONS, BANConstants.CHART_MAX_NUMBER_OF_NEUTRONS, particleAtom);
    this.particleNucleus = particleAtom;

    // this is the mini-nucleus that updates based on the particleAtom
    this.miniParticleAtom = new ParticleAtom();
    this.selectedNuclideChartProperty = new Property('partial');
  }

  /**
   * Create model for particle in mini-nucleus.
   */
  createMiniParticleModel(particleType) {
    const particle = new Particle(particleType.name.toLowerCase(), {
      inputEnabled: false
    });
    this.miniParticleAtom.addParticle(particle);
    return particle;
  }

  /**
   * Select the particle closest to its creator node.
   */
  getParticleToReturn(particleType, creatorNodePosition) {
    const particleToReturn = this.particleNucleus.getLastParticleInShell(particleType);
    assert && assert(particleToReturn, 'No particle of type ' + particleType.name + ' exists in the particleAtom.');

    // We know that sortedParticles is not empty, and does not contain null.
    return particleToReturn;
  }
  getParticleDestination(particleType, particle) {
    return this.particleNucleus.getParticleDestination(particleType, particle);
  }
  reset() {
    super.reset();
  }

  /**
   * @param dt - time step, in seconds
   */
  step(dt) {
    super.step(dt);
    this.miniParticleAtom.protons.forEach(particle => {
      particle.step(dt);
    });
    this.miniParticleAtom.neutrons.forEach(particle => {
      particle.step(dt);
    });
  }
}
buildANucleus.register('ChartIntroModel', ChartIntroModel);
export default ChartIntroModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZEFOdWNsZXVzIiwiQkFOTW9kZWwiLCJQYXJ0aWNsZU51Y2xldXMiLCJQYXJ0aWNsZSIsIkJBTkNvbnN0YW50cyIsIlBhcnRpY2xlQXRvbSIsIlByb3BlcnR5IiwiQ2hhcnRJbnRyb01vZGVsIiwiY29uc3RydWN0b3IiLCJwYXJ0aWNsZUF0b20iLCJDSEFSVF9NQVhfTlVNQkVSX09GX1BST1RPTlMiLCJDSEFSVF9NQVhfTlVNQkVSX09GX05FVVRST05TIiwicGFydGljbGVOdWNsZXVzIiwibWluaVBhcnRpY2xlQXRvbSIsInNlbGVjdGVkTnVjbGlkZUNoYXJ0UHJvcGVydHkiLCJjcmVhdGVNaW5pUGFydGljbGVNb2RlbCIsInBhcnRpY2xlVHlwZSIsInBhcnRpY2xlIiwibmFtZSIsInRvTG93ZXJDYXNlIiwiaW5wdXRFbmFibGVkIiwiYWRkUGFydGljbGUiLCJnZXRQYXJ0aWNsZVRvUmV0dXJuIiwiY3JlYXRvck5vZGVQb3NpdGlvbiIsInBhcnRpY2xlVG9SZXR1cm4iLCJnZXRMYXN0UGFydGljbGVJblNoZWxsIiwiYXNzZXJ0IiwiZ2V0UGFydGljbGVEZXN0aW5hdGlvbiIsInJlc2V0Iiwic3RlcCIsImR0IiwicHJvdG9ucyIsImZvckVhY2giLCJuZXV0cm9ucyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2hhcnRJbnRyb01vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGNsYXNzIGZvciB0aGUgJ0NoYXJ0IEludHJvJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgTHVpc2EgVmFyZ2FzXHJcbiAqL1xyXG5cclxuaW1wb3J0IGJ1aWxkQU51Y2xldXMgZnJvbSAnLi4vLi4vYnVpbGRBTnVjbGV1cy5qcyc7XHJcbmltcG9ydCBCQU5Nb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQkFOTW9kZWwuanMnO1xyXG5pbXBvcnQgUGFydGljbGVOdWNsZXVzIGZyb20gJy4vUGFydGljbGVOdWNsZXVzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgUGFydGljbGVUeXBlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1BhcnRpY2xlVHlwZS5qcyc7IC8vIFRPRE86IG1vdmUgUGFydGljZWxUeXBlIGludG8gbW9kZWwgZm9sZGVyLCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jaGlwcGVyL2lzc3Vlcy8xMzg1XHJcbmltcG9ydCBQYXJ0aWNsZSBmcm9tICcuLi8uLi8uLi8uLi9zaHJlZC9qcy9tb2RlbC9QYXJ0aWNsZS5qcyc7XHJcbmltcG9ydCBCQU5Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0JBTkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBQYXJ0aWNsZUF0b20gZnJvbSAnLi4vLi4vLi4vLi4vc2hyZWQvanMvbW9kZWwvUGFydGljbGVBdG9tLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5cclxuLy8gdHlwZXNcclxuZXhwb3J0IHR5cGUgU2VsZWN0ZWRDaGFydFR5cGUgPSAncGFydGlhbCcgfCAnem9vbSc7XHJcblxyXG5jbGFzcyBDaGFydEludHJvTW9kZWwgZXh0ZW5kcyBCQU5Nb2RlbDxQYXJ0aWNsZU51Y2xldXM+IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHBhcnRpY2xlTnVjbGV1czogUGFydGljbGVOdWNsZXVzO1xyXG4gIHB1YmxpYyByZWFkb25seSBtaW5pUGFydGljbGVBdG9tOiBQYXJ0aWNsZUF0b207XHJcbiAgcHVibGljIHJlYWRvbmx5IHNlbGVjdGVkTnVjbGlkZUNoYXJ0UHJvcGVydHk6IFByb3BlcnR5PFNlbGVjdGVkQ2hhcnRUeXBlPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIGNvbnN0IHBhcnRpY2xlQXRvbSA9IG5ldyBQYXJ0aWNsZU51Y2xldXMoKTsgLy8gdGhpcyBpcyBvdXIgZ3JvdW5kIHRydXRoICdhdG9tJ1xyXG5cclxuICAgIC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWQsIHRoZSBsYXN0IG51Y2xpZGUgdGhlIE51Y2xpZGVDaGFydEludHJvIHNjcmVlbiBnb2VzIHVwIHRvIGlzIE5lb24tMjIgKDEwIHByb3RvbnMgYW5kIDEyIG5ldXRyb25zKVxyXG4gICAgc3VwZXIoIEJBTkNvbnN0YW50cy5DSEFSVF9NQVhfTlVNQkVSX09GX1BST1RPTlMsIEJBTkNvbnN0YW50cy5DSEFSVF9NQVhfTlVNQkVSX09GX05FVVRST05TLCBwYXJ0aWNsZUF0b20gKTtcclxuXHJcbiAgICB0aGlzLnBhcnRpY2xlTnVjbGV1cyA9IHBhcnRpY2xlQXRvbTtcclxuXHJcbiAgICAvLyB0aGlzIGlzIHRoZSBtaW5pLW51Y2xldXMgdGhhdCB1cGRhdGVzIGJhc2VkIG9uIHRoZSBwYXJ0aWNsZUF0b21cclxuICAgIHRoaXMubWluaVBhcnRpY2xlQXRvbSA9IG5ldyBQYXJ0aWNsZUF0b20oKTtcclxuXHJcbiAgICB0aGlzLnNlbGVjdGVkTnVjbGlkZUNoYXJ0UHJvcGVydHkgPSBuZXcgUHJvcGVydHk8U2VsZWN0ZWRDaGFydFR5cGU+KCAncGFydGlhbCcgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBtb2RlbCBmb3IgcGFydGljbGUgaW4gbWluaS1udWNsZXVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGVNaW5pUGFydGljbGVNb2RlbCggcGFydGljbGVUeXBlOiBQYXJ0aWNsZVR5cGUgKTogUGFydGljbGUge1xyXG4gICAgY29uc3QgcGFydGljbGUgPSBuZXcgUGFydGljbGUoIHBhcnRpY2xlVHlwZS5uYW1lLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgIHsgaW5wdXRFbmFibGVkOiBmYWxzZSB9ICk7XHJcbiAgICB0aGlzLm1pbmlQYXJ0aWNsZUF0b20uYWRkUGFydGljbGUoIHBhcnRpY2xlICk7XHJcbiAgICByZXR1cm4gcGFydGljbGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZWxlY3QgdGhlIHBhcnRpY2xlIGNsb3Nlc3QgdG8gaXRzIGNyZWF0b3Igbm9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0UGFydGljbGVUb1JldHVybiggcGFydGljbGVUeXBlOiBQYXJ0aWNsZVR5cGUsIGNyZWF0b3JOb2RlUG9zaXRpb246IFZlY3RvcjIgKTogUGFydGljbGUge1xyXG4gICAgY29uc3QgcGFydGljbGVUb1JldHVybiA9IHRoaXMucGFydGljbGVOdWNsZXVzLmdldExhc3RQYXJ0aWNsZUluU2hlbGwoIHBhcnRpY2xlVHlwZSApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggcGFydGljbGVUb1JldHVybiwgJ05vIHBhcnRpY2xlIG9mIHR5cGUgJyArIHBhcnRpY2xlVHlwZS5uYW1lICsgJyBleGlzdHMgaW4gdGhlIHBhcnRpY2xlQXRvbS4nICk7XHJcblxyXG4gICAgLy8gV2Uga25vdyB0aGF0IHNvcnRlZFBhcnRpY2xlcyBpcyBub3QgZW1wdHksIGFuZCBkb2VzIG5vdCBjb250YWluIG51bGwuXHJcbiAgICByZXR1cm4gcGFydGljbGVUb1JldHVybiE7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0UGFydGljbGVEZXN0aW5hdGlvbiggcGFydGljbGVUeXBlOiBQYXJ0aWNsZVR5cGUsIHBhcnRpY2xlOiBQYXJ0aWNsZSApOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLnBhcnRpY2xlTnVjbGV1cy5nZXRQYXJ0aWNsZURlc3RpbmF0aW9uKCBwYXJ0aWNsZVR5cGUsIHBhcnRpY2xlICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGR0IC0gdGltZSBzdGVwLCBpbiBzZWNvbmRzXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHN0ZXAoIGR0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBzdXBlci5zdGVwKCBkdCApO1xyXG4gICAgdGhpcy5taW5pUGFydGljbGVBdG9tLnByb3RvbnMuZm9yRWFjaCggcGFydGljbGUgPT4ge1xyXG4gICAgICBwYXJ0aWNsZS5zdGVwKCBkdCApO1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5taW5pUGFydGljbGVBdG9tLm5ldXRyb25zLmZvckVhY2goIHBhcnRpY2xlID0+IHtcclxuICAgICAgcGFydGljbGUuc3RlcCggZHQgKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmJ1aWxkQU51Y2xldXMucmVnaXN0ZXIoICdDaGFydEludHJvTW9kZWwnLCBDaGFydEludHJvTW9kZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ2hhcnRJbnRyb01vZGVsO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsYUFBYSxNQUFNLHdCQUF3QjtBQUNsRCxPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFWTtBQUM5RCxPQUFPQyxRQUFRLE1BQU0sd0NBQXdDO0FBQzdELE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0MsWUFBWSxNQUFNLDRDQUE0QztBQUNyRSxPQUFPQyxRQUFRLE1BQU0saUNBQWlDOztBQUV0RDs7QUFHQSxNQUFNQyxlQUFlLFNBQVNOLFFBQVEsQ0FBa0I7RUFNL0NPLFdBQVdBLENBQUEsRUFBRztJQUVuQixNQUFNQyxZQUFZLEdBQUcsSUFBSVAsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUU1QztJQUNBLEtBQUssQ0FBRUUsWUFBWSxDQUFDTSwyQkFBMkIsRUFBRU4sWUFBWSxDQUFDTyw0QkFBNEIsRUFBRUYsWUFBYSxDQUFDO0lBRTFHLElBQUksQ0FBQ0csZUFBZSxHQUFHSCxZQUFZOztJQUVuQztJQUNBLElBQUksQ0FBQ0ksZ0JBQWdCLEdBQUcsSUFBSVIsWUFBWSxDQUFDLENBQUM7SUFFMUMsSUFBSSxDQUFDUyw0QkFBNEIsR0FBRyxJQUFJUixRQUFRLENBQXFCLFNBQVUsQ0FBQztFQUNsRjs7RUFFQTtBQUNGO0FBQ0E7RUFDU1MsdUJBQXVCQSxDQUFFQyxZQUEwQixFQUFhO0lBQ3JFLE1BQU1DLFFBQVEsR0FBRyxJQUFJZCxRQUFRLENBQUVhLFlBQVksQ0FBQ0UsSUFBSSxDQUFDQyxXQUFXLENBQUMsQ0FBQyxFQUM1RDtNQUFFQyxZQUFZLEVBQUU7SUFBTSxDQUFFLENBQUM7SUFDM0IsSUFBSSxDQUFDUCxnQkFBZ0IsQ0FBQ1EsV0FBVyxDQUFFSixRQUFTLENBQUM7SUFDN0MsT0FBT0EsUUFBUTtFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JLLG1CQUFtQkEsQ0FBRU4sWUFBMEIsRUFBRU8sbUJBQTRCLEVBQWE7SUFDeEcsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDWixlQUFlLENBQUNhLHNCQUFzQixDQUFFVCxZQUFhLENBQUM7SUFDcEZVLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixnQkFBZ0IsRUFBRSxzQkFBc0IsR0FBR1IsWUFBWSxDQUFDRSxJQUFJLEdBQUcsOEJBQStCLENBQUM7O0lBRWpIO0lBQ0EsT0FBT00sZ0JBQWdCO0VBQ3pCO0VBRWdCRyxzQkFBc0JBLENBQUVYLFlBQTBCLEVBQUVDLFFBQWtCLEVBQVk7SUFDaEcsT0FBTyxJQUFJLENBQUNMLGVBQWUsQ0FBQ2Usc0JBQXNCLENBQUVYLFlBQVksRUFBRUMsUUFBUyxDQUFDO0VBQzlFO0VBRWdCVyxLQUFLQSxDQUFBLEVBQVM7SUFDNUIsS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztFQUNmOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsSUFBSUEsQ0FBRUMsRUFBVSxFQUFTO0lBQ3ZDLEtBQUssQ0FBQ0QsSUFBSSxDQUFFQyxFQUFHLENBQUM7SUFDaEIsSUFBSSxDQUFDakIsZ0JBQWdCLENBQUNrQixPQUFPLENBQUNDLE9BQU8sQ0FBRWYsUUFBUSxJQUFJO01BQ2pEQSxRQUFRLENBQUNZLElBQUksQ0FBRUMsRUFBRyxDQUFDO0lBQ3JCLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ2pCLGdCQUFnQixDQUFDb0IsUUFBUSxDQUFDRCxPQUFPLENBQUVmLFFBQVEsSUFBSTtNQUNsREEsUUFBUSxDQUFDWSxJQUFJLENBQUVDLEVBQUcsQ0FBQztJQUNyQixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUE5QixhQUFhLENBQUNrQyxRQUFRLENBQUUsaUJBQWlCLEVBQUUzQixlQUFnQixDQUFDO0FBQzVELGVBQWVBLGVBQWUifQ==