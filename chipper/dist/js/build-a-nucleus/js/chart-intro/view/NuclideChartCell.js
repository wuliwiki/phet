// Copyright 2023, University of Colorado Boulder

/**
 * Node that represents a single cell in the nuclide chart.
 *
 * @author Luisa Vargas
 */

import { Text, Color, Rectangle } from '../../../../scenery/js/imports.js';
import buildANucleus from '../../buildANucleus.js';
import DecayType from '../../common/view/DecayType.js';
import optionize from '../../../../phet-core/js/optionize.js';
import BANConstants from '../../common/BANConstants.js';
class NuclideChartCell extends Rectangle {
  constructor(cellLength, elementSymbol, protonNumber, neutronNumber, decayType, providedOptions) {
    const options = optionize()({
      stroke: Color.GRAY,
      lineWidth: BANConstants.NUCLIDE_CHART_CELL_LINE_WIDTH,
      fill: Color.GRAY
    }, providedOptions);
    super(0, 0, cellLength, cellLength, 0, 0, options);

    // labels the cell with the elementSymbol
    this.labelText = new Text(elementSymbol, {
      fontSize: options.cellTextFontSize,
      center: this.center,
      fill: options.fill === DecayType.ALPHA_DECAY.colorProperty.value || options.fill === DecayType.BETA_MINUS_DECAY.colorProperty.value ? Color.BLACK : Color.WHITE,
      maxWidth: cellLength * 0.75
    });
    this.labelText.visible = false;
    this.addChild(this.labelText);
    this.protonNumber = protonNumber;
    this.neutronNumber = neutronNumber;
    this.decayType = decayType;
  }

  // show the label text when highlighting the cell
  setHighlighted(highlighted) {
    this.labelText.visible = highlighted;
  }

  // make cell more opaque to de-emphasize the cell
  makeOpaque(protonDelta, neutronDelta) {
    this.opacity = protonDelta > 2 || neutronDelta > 2 ? 0.65 : 1;
  }
}
buildANucleus.register('NuclideChartCell', NuclideChartCell);
export default NuclideChartCell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiQ29sb3IiLCJSZWN0YW5nbGUiLCJidWlsZEFOdWNsZXVzIiwiRGVjYXlUeXBlIiwib3B0aW9uaXplIiwiQkFOQ29uc3RhbnRzIiwiTnVjbGlkZUNoYXJ0Q2VsbCIsImNvbnN0cnVjdG9yIiwiY2VsbExlbmd0aCIsImVsZW1lbnRTeW1ib2wiLCJwcm90b25OdW1iZXIiLCJuZXV0cm9uTnVtYmVyIiwiZGVjYXlUeXBlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInN0cm9rZSIsIkdSQVkiLCJsaW5lV2lkdGgiLCJOVUNMSURFX0NIQVJUX0NFTExfTElORV9XSURUSCIsImZpbGwiLCJsYWJlbFRleHQiLCJmb250U2l6ZSIsImNlbGxUZXh0Rm9udFNpemUiLCJjZW50ZXIiLCJBTFBIQV9ERUNBWSIsImNvbG9yUHJvcGVydHkiLCJ2YWx1ZSIsIkJFVEFfTUlOVVNfREVDQVkiLCJCTEFDSyIsIldISVRFIiwibWF4V2lkdGgiLCJ2aXNpYmxlIiwiYWRkQ2hpbGQiLCJzZXRIaWdobGlnaHRlZCIsImhpZ2hsaWdodGVkIiwibWFrZU9wYXF1ZSIsInByb3RvbkRlbHRhIiwibmV1dHJvbkRlbHRhIiwib3BhY2l0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVjbGlkZUNoYXJ0Q2VsbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTm9kZSB0aGF0IHJlcHJlc2VudHMgYSBzaW5nbGUgY2VsbCBpbiB0aGUgbnVjbGlkZSBjaGFydC5cclxuICpcclxuICogQGF1dGhvciBMdWlzYSBWYXJnYXNcclxuICovXHJcblxyXG5pbXBvcnQgeyBUZXh0LCBDb2xvciwgUmVjdGFuZ2xlLCBSZWN0YW5nbGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJ1aWxkQU51Y2xldXMgZnJvbSAnLi4vLi4vYnVpbGRBTnVjbGV1cy5qcyc7XHJcbmltcG9ydCBEZWNheVR5cGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvRGVjYXlUeXBlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEJBTkNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vQkFOQ29uc3RhbnRzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgY2VsbFRleHRGb250U2l6ZTogbnVtYmVyO1xyXG59O1xyXG5cclxudHlwZSBOdWNsaWRlQ2hhcnRDZWxsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUmVjdGFuZ2xlT3B0aW9ucztcclxuXHJcbmNsYXNzIE51Y2xpZGVDaGFydENlbGwgZXh0ZW5kcyBSZWN0YW5nbGUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsVGV4dDogVGV4dDtcclxuICBwdWJsaWMgcmVhZG9ubHkgcHJvdG9uTnVtYmVyOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG5ldXRyb25OdW1iZXI6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgZGVjYXlUeXBlOiBzdHJpbmc7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY2VsbExlbmd0aDogbnVtYmVyLCBlbGVtZW50U3ltYm9sOiBzdHJpbmcsIHByb3Rvbk51bWJlcjogbnVtYmVyLCBuZXV0cm9uTnVtYmVyOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBkZWNheVR5cGU6IHN0cmluZywgcHJvdmlkZWRPcHRpb25zOiBOdWNsaWRlQ2hhcnRDZWxsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE51Y2xpZGVDaGFydENlbGxPcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ2xlT3B0aW9ucz4oKSgge1xyXG4gICAgICBzdHJva2U6IENvbG9yLkdSQVksXHJcbiAgICAgIGxpbmVXaWR0aDogQkFOQ29uc3RhbnRzLk5VQ0xJREVfQ0hBUlRfQ0VMTF9MSU5FX1dJRFRILFxyXG4gICAgICBmaWxsOiBDb2xvci5HUkFZXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggMCwgMCwgY2VsbExlbmd0aCwgY2VsbExlbmd0aCwgMCwgMCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGxhYmVscyB0aGUgY2VsbCB3aXRoIHRoZSBlbGVtZW50U3ltYm9sXHJcbiAgICB0aGlzLmxhYmVsVGV4dCA9IG5ldyBUZXh0KCBlbGVtZW50U3ltYm9sLCB7XHJcbiAgICAgIGZvbnRTaXplOiBvcHRpb25zLmNlbGxUZXh0Rm9udFNpemUsXHJcbiAgICAgIGNlbnRlcjogdGhpcy5jZW50ZXIsXHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuZmlsbCA9PT0gRGVjYXlUeXBlLkFMUEhBX0RFQ0FZLmNvbG9yUHJvcGVydHkudmFsdWUgfHxcclxuICAgICAgICAgICAgb3B0aW9ucy5maWxsID09PSBEZWNheVR5cGUuQkVUQV9NSU5VU19ERUNBWS5jb2xvclByb3BlcnR5LnZhbHVlID9cclxuICAgICAgICAgICAgQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURSxcclxuICAgICAgbWF4V2lkdGg6IGNlbGxMZW5ndGggKiAwLjc1XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmxhYmVsVGV4dC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLmxhYmVsVGV4dCApO1xyXG5cclxuICAgIHRoaXMucHJvdG9uTnVtYmVyID0gcHJvdG9uTnVtYmVyO1xyXG4gICAgdGhpcy5uZXV0cm9uTnVtYmVyID0gbmV1dHJvbk51bWJlcjtcclxuICAgIHRoaXMuZGVjYXlUeXBlID0gZGVjYXlUeXBlO1xyXG4gIH1cclxuXHJcbiAgLy8gc2hvdyB0aGUgbGFiZWwgdGV4dCB3aGVuIGhpZ2hsaWdodGluZyB0aGUgY2VsbFxyXG4gIHB1YmxpYyBzZXRIaWdobGlnaHRlZCggaGlnaGxpZ2h0ZWQ6IGJvb2xlYW4gKTogdm9pZCB7XHJcbiAgICB0aGlzLmxhYmVsVGV4dC52aXNpYmxlID0gaGlnaGxpZ2h0ZWQ7XHJcbiAgfVxyXG5cclxuICAvLyBtYWtlIGNlbGwgbW9yZSBvcGFxdWUgdG8gZGUtZW1waGFzaXplIHRoZSBjZWxsXHJcbiAgcHVibGljIG1ha2VPcGFxdWUoIHByb3RvbkRlbHRhOiBudW1iZXIsIG5ldXRyb25EZWx0YTogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgdGhpcy5vcGFjaXR5ID0gcHJvdG9uRGVsdGEgPiAyIHx8IG5ldXRyb25EZWx0YSA+IDIgPyAwLjY1IDogMTtcclxuICB9XHJcbn1cclxuXHJcbmJ1aWxkQU51Y2xldXMucmVnaXN0ZXIoICdOdWNsaWRlQ2hhcnRDZWxsJywgTnVjbGlkZUNoYXJ0Q2VsbCApO1xyXG5leHBvcnQgZGVmYXVsdCBOdWNsaWRlQ2hhcnRDZWxsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxRQUEwQixtQ0FBbUM7QUFDNUYsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUNsRCxPQUFPQyxTQUFTLE1BQU0sZ0NBQWdDO0FBQ3RELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQVF2RCxNQUFNQyxnQkFBZ0IsU0FBU0wsU0FBUyxDQUFDO0VBT2hDTSxXQUFXQSxDQUFFQyxVQUFrQixFQUFFQyxhQUFxQixFQUFFQyxZQUFvQixFQUFFQyxhQUFxQixFQUN0RkMsU0FBaUIsRUFBRUMsZUFBd0MsRUFBRztJQUVoRixNQUFNQyxPQUFPLEdBQUdWLFNBQVMsQ0FBeUQsQ0FBQyxDQUFFO01BQ25GVyxNQUFNLEVBQUVmLEtBQUssQ0FBQ2dCLElBQUk7TUFDbEJDLFNBQVMsRUFBRVosWUFBWSxDQUFDYSw2QkFBNkI7TUFDckRDLElBQUksRUFBRW5CLEtBQUssQ0FBQ2dCO0lBQ2QsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFTCxVQUFVLEVBQUVBLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFTSxPQUFRLENBQUM7O0lBRXBEO0lBQ0EsSUFBSSxDQUFDTSxTQUFTLEdBQUcsSUFBSXJCLElBQUksQ0FBRVUsYUFBYSxFQUFFO01BQ3hDWSxRQUFRLEVBQUVQLE9BQU8sQ0FBQ1EsZ0JBQWdCO01BQ2xDQyxNQUFNLEVBQUUsSUFBSSxDQUFDQSxNQUFNO01BQ25CSixJQUFJLEVBQUVMLE9BQU8sQ0FBQ0ssSUFBSSxLQUFLaEIsU0FBUyxDQUFDcUIsV0FBVyxDQUFDQyxhQUFhLENBQUNDLEtBQUssSUFDMURaLE9BQU8sQ0FBQ0ssSUFBSSxLQUFLaEIsU0FBUyxDQUFDd0IsZ0JBQWdCLENBQUNGLGFBQWEsQ0FBQ0MsS0FBSyxHQUMvRDFCLEtBQUssQ0FBQzRCLEtBQUssR0FBRzVCLEtBQUssQ0FBQzZCLEtBQUs7TUFDL0JDLFFBQVEsRUFBRXRCLFVBQVUsR0FBRztJQUN6QixDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNZLFNBQVMsQ0FBQ1csT0FBTyxHQUFHLEtBQUs7SUFDOUIsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSSxDQUFDWixTQUFVLENBQUM7SUFFL0IsSUFBSSxDQUFDVixZQUFZLEdBQUdBLFlBQVk7SUFDaEMsSUFBSSxDQUFDQyxhQUFhLEdBQUdBLGFBQWE7SUFDbEMsSUFBSSxDQUFDQyxTQUFTLEdBQUdBLFNBQVM7RUFDNUI7O0VBRUE7RUFDT3FCLGNBQWNBLENBQUVDLFdBQW9CLEVBQVM7SUFDbEQsSUFBSSxDQUFDZCxTQUFTLENBQUNXLE9BQU8sR0FBR0csV0FBVztFQUN0Qzs7RUFFQTtFQUNPQyxVQUFVQSxDQUFFQyxXQUFtQixFQUFFQyxZQUFvQixFQUFTO0lBQ25FLElBQUksQ0FBQ0MsT0FBTyxHQUFHRixXQUFXLEdBQUcsQ0FBQyxJQUFJQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO0VBQy9EO0FBQ0Y7QUFFQW5DLGFBQWEsQ0FBQ3FDLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRWpDLGdCQUFpQixDQUFDO0FBQzlELGVBQWVBLGdCQUFnQiJ9