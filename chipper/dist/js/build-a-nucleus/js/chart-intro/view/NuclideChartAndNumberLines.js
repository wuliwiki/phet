// Copyright 2022-2023, University of Colorado Boulder

/**
 * Node that contains some content in the 'Nuclide Chart', including the proton and neutron NucleonNumberLine's,
 * and the NuclideChartNode.
 *
 * @author Luisa Vargas
 */

import { Node } from '../../../../scenery/js/imports.js';
import buildANucleus from '../../buildANucleus.js';
import BANColors from '../../common/BANColors.js';
import BuildANucleusStrings from '../../BuildANucleusStrings.js';
import NucleonNumberLine from './NucleonNumberLine.js';
import Orientation from '../../../../phet-core/js/Orientation.js';
import NuclideChartNode from './NuclideChartNode.js';
class NuclideChartAndNumberLines extends Node {
  constructor(protonCountProperty, neutronCountProperty, chartTransform, providedOptions) {
    // create and add the nuclideChartNode
    const nuclideChartNode = new NuclideChartNode(protonCountProperty, neutronCountProperty, chartTransform, {
      cellTextFontSize: 14,
      arrowSymbol: true
    });
    const protonNumberLine = new NucleonNumberLine(chartTransform, protonCountProperty, Orientation.VERTICAL, {
      labelHighlightColorProperty: BANColors.protonColorProperty,
      axisLabel: BuildANucleusStrings.axis.protonNumber
    });
    const neutronNumberLine = new NucleonNumberLine(chartTransform, neutronCountProperty, Orientation.HORIZONTAL, {
      labelHighlightColorProperty: BANColors.neutronColorProperty,
      axisLabel: BuildANucleusStrings.axis.neutronNumber
    });
    neutronNumberLine.top = protonNumberLine.bottom;
    neutronNumberLine.left = protonNumberLine.right;
    nuclideChartNode.left = neutronNumberLine.left;
    super({
      ...providedOptions,
      excludeInvisibleChildrenFromBounds: true,
      children: [nuclideChartNode, protonNumberLine, neutronNumberLine]
    });
  }
}
buildANucleus.register('NuclideChartAndNumberLines', NuclideChartAndNumberLines);
export default NuclideChartAndNumberLines;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiYnVpbGRBTnVjbGV1cyIsIkJBTkNvbG9ycyIsIkJ1aWxkQU51Y2xldXNTdHJpbmdzIiwiTnVjbGVvbk51bWJlckxpbmUiLCJPcmllbnRhdGlvbiIsIk51Y2xpZGVDaGFydE5vZGUiLCJOdWNsaWRlQ2hhcnRBbmROdW1iZXJMaW5lcyIsImNvbnN0cnVjdG9yIiwicHJvdG9uQ291bnRQcm9wZXJ0eSIsIm5ldXRyb25Db3VudFByb3BlcnR5IiwiY2hhcnRUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJudWNsaWRlQ2hhcnROb2RlIiwiY2VsbFRleHRGb250U2l6ZSIsImFycm93U3ltYm9sIiwicHJvdG9uTnVtYmVyTGluZSIsIlZFUlRJQ0FMIiwibGFiZWxIaWdobGlnaHRDb2xvclByb3BlcnR5IiwicHJvdG9uQ29sb3JQcm9wZXJ0eSIsImF4aXNMYWJlbCIsImF4aXMiLCJwcm90b25OdW1iZXIiLCJuZXV0cm9uTnVtYmVyTGluZSIsIkhPUklaT05UQUwiLCJuZXV0cm9uQ29sb3JQcm9wZXJ0eSIsIm5ldXRyb25OdW1iZXIiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJleGNsdWRlSW52aXNpYmxlQ2hpbGRyZW5Gcm9tQm91bmRzIiwiY2hpbGRyZW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk51Y2xpZGVDaGFydEFuZE51bWJlckxpbmVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vZGUgdGhhdCBjb250YWlucyBzb21lIGNvbnRlbnQgaW4gdGhlICdOdWNsaWRlIENoYXJ0JywgaW5jbHVkaW5nIHRoZSBwcm90b24gYW5kIG5ldXRyb24gTnVjbGVvbk51bWJlckxpbmUncyxcclxuICogYW5kIHRoZSBOdWNsaWRlQ2hhcnROb2RlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEx1aXNhIFZhcmdhc1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJ1aWxkQU51Y2xldXMgZnJvbSAnLi4vLi4vYnVpbGRBTnVjbGV1cy5qcyc7XHJcbmltcG9ydCBCQU5Db2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL0JBTkNvbG9ycy5qcyc7XHJcbmltcG9ydCBCdWlsZEFOdWNsZXVzU3RyaW5ncyBmcm9tICcuLi8uLi9CdWlsZEFOdWNsZXVzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBOdWNsZW9uTnVtYmVyTGluZSBmcm9tICcuL051Y2xlb25OdW1iZXJMaW5lLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgT3JpZW50YXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL09yaWVudGF0aW9uLmpzJztcclxuaW1wb3J0IE51Y2xpZGVDaGFydE5vZGUgZnJvbSAnLi9OdWNsaWRlQ2hhcnROb2RlLmpzJztcclxuaW1wb3J0IENoYXJ0VHJhbnNmb3JtIGZyb20gJy4uLy4uLy4uLy4uL2JhbWJvby9qcy9DaGFydFRyYW5zZm9ybS5qcyc7XHJcblxyXG50eXBlIE51Y2xpZGVDaGFydE5vZGVPcHRpb25zID0gTm9kZU9wdGlvbnM7XHJcblxyXG5jbGFzcyBOdWNsaWRlQ2hhcnRBbmROdW1iZXJMaW5lcyBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3RvbkNvdW50UHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sIG5ldXRyb25Db3VudFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgY2hhcnRUcmFuc2Zvcm06IENoYXJ0VHJhbnNmb3JtLCBwcm92aWRlZE9wdGlvbnM/OiBOdWNsaWRlQ2hhcnROb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBjcmVhdGUgYW5kIGFkZCB0aGUgbnVjbGlkZUNoYXJ0Tm9kZVxyXG4gICAgY29uc3QgbnVjbGlkZUNoYXJ0Tm9kZSA9IG5ldyBOdWNsaWRlQ2hhcnROb2RlKCBwcm90b25Db3VudFByb3BlcnR5LCBuZXV0cm9uQ291bnRQcm9wZXJ0eSwgY2hhcnRUcmFuc2Zvcm0sIHtcclxuICAgICAgY2VsbFRleHRGb250U2l6ZTogMTQsXHJcbiAgICAgIGFycm93U3ltYm9sOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgcHJvdG9uTnVtYmVyTGluZSA9IG5ldyBOdWNsZW9uTnVtYmVyTGluZSggY2hhcnRUcmFuc2Zvcm0sIHByb3RvbkNvdW50UHJvcGVydHksIE9yaWVudGF0aW9uLlZFUlRJQ0FMLCB7XHJcbiAgICAgIGxhYmVsSGlnaGxpZ2h0Q29sb3JQcm9wZXJ0eTogQkFOQ29sb3JzLnByb3RvbkNvbG9yUHJvcGVydHksXHJcbiAgICAgIGF4aXNMYWJlbDogQnVpbGRBTnVjbGV1c1N0cmluZ3MuYXhpcy5wcm90b25OdW1iZXJcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBuZXV0cm9uTnVtYmVyTGluZSA9IG5ldyBOdWNsZW9uTnVtYmVyTGluZSggY2hhcnRUcmFuc2Zvcm0sIG5ldXRyb25Db3VudFByb3BlcnR5LCBPcmllbnRhdGlvbi5IT1JJWk9OVEFMLCB7XHJcbiAgICAgIGxhYmVsSGlnaGxpZ2h0Q29sb3JQcm9wZXJ0eTogQkFOQ29sb3JzLm5ldXRyb25Db2xvclByb3BlcnR5LFxyXG4gICAgICBheGlzTGFiZWw6IEJ1aWxkQU51Y2xldXNTdHJpbmdzLmF4aXMubmV1dHJvbk51bWJlclxyXG4gICAgfSApO1xyXG4gICAgbmV1dHJvbk51bWJlckxpbmUudG9wID0gcHJvdG9uTnVtYmVyTGluZS5ib3R0b207XHJcbiAgICBuZXV0cm9uTnVtYmVyTGluZS5sZWZ0ID0gcHJvdG9uTnVtYmVyTGluZS5yaWdodDtcclxuICAgIG51Y2xpZGVDaGFydE5vZGUubGVmdCA9IG5ldXRyb25OdW1iZXJMaW5lLmxlZnQ7XHJcblxyXG4gICAgc3VwZXIoIHsgLi4ucHJvdmlkZWRPcHRpb25zLCBleGNsdWRlSW52aXNpYmxlQ2hpbGRyZW5Gcm9tQm91bmRzOiB0cnVlLCBjaGlsZHJlbjpcclxuICAgICAgICBbIG51Y2xpZGVDaGFydE5vZGUsIHByb3Rvbk51bWJlckxpbmUsIG5ldXRyb25OdW1iZXJMaW5lIF0gfSApO1xyXG4gIH1cclxufVxyXG5cclxuYnVpbGRBTnVjbGV1cy5yZWdpc3RlciggJ051Y2xpZGVDaGFydEFuZE51bWJlckxpbmVzJywgTnVjbGlkZUNoYXJ0QW5kTnVtYmVyTGluZXMgKTtcclxuZXhwb3J0IGRlZmF1bHQgTnVjbGlkZUNoYXJ0QW5kTnVtYmVyTGluZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxRQUFxQixtQ0FBbUM7QUFDckUsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUNsRCxPQUFPQyxTQUFTLE1BQU0sMkJBQTJCO0FBQ2pELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUNoRSxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFFdEQsT0FBT0MsV0FBVyxNQUFNLHlDQUF5QztBQUNqRSxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFLcEQsTUFBTUMsMEJBQTBCLFNBQVNQLElBQUksQ0FBQztFQUVyQ1EsV0FBV0EsQ0FBRUMsbUJBQThDLEVBQUVDLG9CQUErQyxFQUMvRkMsY0FBOEIsRUFBRUMsZUFBeUMsRUFBRztJQUU5RjtJQUNBLE1BQU1DLGdCQUFnQixHQUFHLElBQUlQLGdCQUFnQixDQUFFRyxtQkFBbUIsRUFBRUMsb0JBQW9CLEVBQUVDLGNBQWMsRUFBRTtNQUN4R0csZ0JBQWdCLEVBQUUsRUFBRTtNQUNwQkMsV0FBVyxFQUFFO0lBQ2YsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSVosaUJBQWlCLENBQUVPLGNBQWMsRUFBRUYsbUJBQW1CLEVBQUVKLFdBQVcsQ0FBQ1ksUUFBUSxFQUFFO01BQ3pHQywyQkFBMkIsRUFBRWhCLFNBQVMsQ0FBQ2lCLG1CQUFtQjtNQUMxREMsU0FBUyxFQUFFakIsb0JBQW9CLENBQUNrQixJQUFJLENBQUNDO0lBQ3ZDLENBQUUsQ0FBQztJQUVILE1BQU1DLGlCQUFpQixHQUFHLElBQUluQixpQkFBaUIsQ0FBRU8sY0FBYyxFQUFFRCxvQkFBb0IsRUFBRUwsV0FBVyxDQUFDbUIsVUFBVSxFQUFFO01BQzdHTiwyQkFBMkIsRUFBRWhCLFNBQVMsQ0FBQ3VCLG9CQUFvQjtNQUMzREwsU0FBUyxFQUFFakIsb0JBQW9CLENBQUNrQixJQUFJLENBQUNLO0lBQ3ZDLENBQUUsQ0FBQztJQUNISCxpQkFBaUIsQ0FBQ0ksR0FBRyxHQUFHWCxnQkFBZ0IsQ0FBQ1ksTUFBTTtJQUMvQ0wsaUJBQWlCLENBQUNNLElBQUksR0FBR2IsZ0JBQWdCLENBQUNjLEtBQUs7SUFDL0NqQixnQkFBZ0IsQ0FBQ2dCLElBQUksR0FBR04saUJBQWlCLENBQUNNLElBQUk7SUFFOUMsS0FBSyxDQUFFO01BQUUsR0FBR2pCLGVBQWU7TUFBRW1CLGtDQUFrQyxFQUFFLElBQUk7TUFBRUMsUUFBUSxFQUMzRSxDQUFFbkIsZ0JBQWdCLEVBQUVHLGdCQUFnQixFQUFFTyxpQkFBaUI7SUFBRyxDQUFFLENBQUM7RUFDbkU7QUFDRjtBQUVBdEIsYUFBYSxDQUFDZ0MsUUFBUSxDQUFFLDRCQUE0QixFQUFFMUIsMEJBQTJCLENBQUM7QUFDbEYsZUFBZUEsMEJBQTBCIn0=