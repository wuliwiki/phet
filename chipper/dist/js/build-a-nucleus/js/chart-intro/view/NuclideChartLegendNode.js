// Copyright 2023, University of Colorado Boulder

/**
 * Node that represents the legend of the nuclide chart, square boxes with different background colors for each decay type.
 *
 * @author Luisa Vargas
 */

import { GridBox, HBox, Node, Rectangle, RichText } from '../../../../scenery/js/imports.js';
import buildANucleus from '../../buildANucleus.js';
import BANColors from '../../common/BANColors.js';
import BuildANucleusStrings from '../../BuildANucleusStrings.js';
import DecayType from '../../common/view/DecayType.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';

// constants
const LEGEND_FONT = new PhetFont(12);
const LEGEND_KEY_BOX_SIZE = 14;
class NuclideChartLegendNode extends Node {
  constructor() {
    super();

    // create a legend item which consists of a box with the legend color and the string of the decay type to its right
    const createLegendItem = (decayTypeText, decayTypeColor) => {
      return new HBox({
        children: [new Rectangle({
          rectSize: new Dimension2(LEGEND_KEY_BOX_SIZE, LEGEND_KEY_BOX_SIZE),
          fill: decayTypeColor,
          stroke: BANColors.nuclideChartBorderColorProperty
        }), new RichText(decayTypeText, {
          font: LEGEND_FONT
        })],
        spacing: 5
        // TODO: add maxWidth
      });
    };

    // to store all legend items
    const decayHBoxes = [];
    const stableHBox = createLegendItem(BuildANucleusStrings.stable, BANColors.stableColorProperty);
    decayHBoxes.push(stableHBox);

    // create the legend item for each decay type in a grid box
    DecayType.enumeration.values.forEach(decayType => {
      decayHBoxes.push(createLegendItem(decayType.label, decayType.colorProperty));
    });
    const legendGridBox = new GridBox({
      children: decayHBoxes,
      autoColumns: 2,
      ySpacing: 5,
      xSpacing: 80,
      xAlign: 'left'
    });
    this.addChild(legendGridBox);
  }
}
buildANucleus.register('NuclideChartLegendNode', NuclideChartLegendNode);
export default NuclideChartLegendNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHcmlkQm94IiwiSEJveCIsIk5vZGUiLCJSZWN0YW5nbGUiLCJSaWNoVGV4dCIsImJ1aWxkQU51Y2xldXMiLCJCQU5Db2xvcnMiLCJCdWlsZEFOdWNsZXVzU3RyaW5ncyIsIkRlY2F5VHlwZSIsIkRpbWVuc2lvbjIiLCJQaGV0Rm9udCIsIkxFR0VORF9GT05UIiwiTEVHRU5EX0tFWV9CT1hfU0laRSIsIk51Y2xpZGVDaGFydExlZ2VuZE5vZGUiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZUxlZ2VuZEl0ZW0iLCJkZWNheVR5cGVUZXh0IiwiZGVjYXlUeXBlQ29sb3IiLCJjaGlsZHJlbiIsInJlY3RTaXplIiwiZmlsbCIsInN0cm9rZSIsIm51Y2xpZGVDaGFydEJvcmRlckNvbG9yUHJvcGVydHkiLCJmb250Iiwic3BhY2luZyIsImRlY2F5SEJveGVzIiwic3RhYmxlSEJveCIsInN0YWJsZSIsInN0YWJsZUNvbG9yUHJvcGVydHkiLCJwdXNoIiwiZW51bWVyYXRpb24iLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiZGVjYXlUeXBlIiwibGFiZWwiLCJjb2xvclByb3BlcnR5IiwibGVnZW5kR3JpZEJveCIsImF1dG9Db2x1bW5zIiwieVNwYWNpbmciLCJ4U3BhY2luZyIsInhBbGlnbiIsImFkZENoaWxkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOdWNsaWRlQ2hhcnRMZWdlbmROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOb2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgbGVnZW5kIG9mIHRoZSBudWNsaWRlIGNoYXJ0LCBzcXVhcmUgYm94ZXMgd2l0aCBkaWZmZXJlbnQgYmFja2dyb3VuZCBjb2xvcnMgZm9yIGVhY2ggZGVjYXkgdHlwZS5cclxuICpcclxuICogQGF1dGhvciBMdWlzYSBWYXJnYXNcclxuICovXHJcblxyXG5pbXBvcnQgeyBHcmlkQm94LCBIQm94LCBOb2RlLCBQcm9maWxlQ29sb3JQcm9wZXJ0eSwgUmVjdGFuZ2xlLCBSaWNoVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBidWlsZEFOdWNsZXVzIGZyb20gJy4uLy4uL2J1aWxkQU51Y2xldXMuanMnO1xyXG5pbXBvcnQgQkFOQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9CQU5Db2xvcnMuanMnO1xyXG5pbXBvcnQgQnVpbGRBTnVjbGV1c1N0cmluZ3MgZnJvbSAnLi4vLi4vQnVpbGRBTnVjbGV1c1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgRGVjYXlUeXBlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0RlY2F5VHlwZS5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTEVHRU5EX0ZPTlQgPSBuZXcgUGhldEZvbnQoIDEyICk7XHJcbmNvbnN0IExFR0VORF9LRVlfQk9YX1NJWkUgPSAxNDtcclxuXHJcbmNsYXNzIE51Y2xpZGVDaGFydExlZ2VuZE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgYSBsZWdlbmQgaXRlbSB3aGljaCBjb25zaXN0cyBvZiBhIGJveCB3aXRoIHRoZSBsZWdlbmQgY29sb3IgYW5kIHRoZSBzdHJpbmcgb2YgdGhlIGRlY2F5IHR5cGUgdG8gaXRzIHJpZ2h0XHJcbiAgICBjb25zdCBjcmVhdGVMZWdlbmRJdGVtID0gKCBkZWNheVR5cGVUZXh0OiBzdHJpbmcsIGRlY2F5VHlwZUNvbG9yOiBQcm9maWxlQ29sb3JQcm9wZXJ0eSApOiBIQm94ID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBIQm94KCB7XHJcbiAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgIG5ldyBSZWN0YW5nbGUoIHtcclxuICAgICAgICAgICAgcmVjdFNpemU6IG5ldyBEaW1lbnNpb24yKCBMRUdFTkRfS0VZX0JPWF9TSVpFLCBMRUdFTkRfS0VZX0JPWF9TSVpFICksXHJcbiAgICAgICAgICAgIGZpbGw6IGRlY2F5VHlwZUNvbG9yLFxyXG4gICAgICAgICAgICBzdHJva2U6IEJBTkNvbG9ycy5udWNsaWRlQ2hhcnRCb3JkZXJDb2xvclByb3BlcnR5XHJcbiAgICAgICAgICB9ICksXHJcbiAgICAgICAgICBuZXcgUmljaFRleHQoIGRlY2F5VHlwZVRleHQsIHsgZm9udDogTEVHRU5EX0ZPTlQgfSApXHJcbiAgICAgICAgXSxcclxuICAgICAgICBzcGFjaW5nOiA1XHJcbiAgICAgICAgLy8gVE9ETzogYWRkIG1heFdpZHRoXHJcbiAgICAgIH0gKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gdG8gc3RvcmUgYWxsIGxlZ2VuZCBpdGVtc1xyXG4gICAgY29uc3QgZGVjYXlIQm94ZXMgPSBbXTtcclxuICAgIGNvbnN0IHN0YWJsZUhCb3ggPSBjcmVhdGVMZWdlbmRJdGVtKCBCdWlsZEFOdWNsZXVzU3RyaW5ncy5zdGFibGUsIEJBTkNvbG9ycy5zdGFibGVDb2xvclByb3BlcnR5ICk7XHJcbiAgICBkZWNheUhCb3hlcy5wdXNoKCBzdGFibGVIQm94ICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBsZWdlbmQgaXRlbSBmb3IgZWFjaCBkZWNheSB0eXBlIGluIGEgZ3JpZCBib3hcclxuICAgIERlY2F5VHlwZS5lbnVtZXJhdGlvbi52YWx1ZXMuZm9yRWFjaCggZGVjYXlUeXBlID0+IHtcclxuICAgICAgZGVjYXlIQm94ZXMucHVzaCggY3JlYXRlTGVnZW5kSXRlbSggZGVjYXlUeXBlLmxhYmVsLCBkZWNheVR5cGUuY29sb3JQcm9wZXJ0eSApICk7XHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBsZWdlbmRHcmlkQm94ID0gbmV3IEdyaWRCb3goIHtcclxuICAgICAgY2hpbGRyZW46IGRlY2F5SEJveGVzLFxyXG4gICAgICBhdXRvQ29sdW1uczogMixcclxuICAgICAgeVNwYWNpbmc6IDUsXHJcbiAgICAgIHhTcGFjaW5nOiA4MCxcclxuICAgICAgeEFsaWduOiAnbGVmdCdcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGxlZ2VuZEdyaWRCb3ggKTtcclxuXHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFOdWNsZXVzLnJlZ2lzdGVyKCAnTnVjbGlkZUNoYXJ0TGVnZW5kTm9kZScsIE51Y2xpZGVDaGFydExlZ2VuZE5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgTnVjbGlkZUNoYXJ0TGVnZW5kTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBd0JDLFNBQVMsRUFBRUMsUUFBUSxRQUFRLG1DQUFtQztBQUNsSCxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLFNBQVMsTUFBTSwyQkFBMkI7QUFDakQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLFNBQVMsTUFBTSxnQ0FBZ0M7QUFDdEQsT0FBT0MsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDOztBQUU5RDtBQUNBLE1BQU1DLFdBQVcsR0FBRyxJQUFJRCxRQUFRLENBQUUsRUFBRyxDQUFDO0FBQ3RDLE1BQU1FLG1CQUFtQixHQUFHLEVBQUU7QUFFOUIsTUFBTUMsc0JBQXNCLFNBQVNYLElBQUksQ0FBQztFQUVqQ1ksV0FBV0EsQ0FBQSxFQUFHO0lBQ25CLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsTUFBTUMsZ0JBQWdCLEdBQUdBLENBQUVDLGFBQXFCLEVBQUVDLGNBQW9DLEtBQVk7TUFDaEcsT0FBTyxJQUFJaEIsSUFBSSxDQUFFO1FBQ2ZpQixRQUFRLEVBQUUsQ0FDUixJQUFJZixTQUFTLENBQUU7VUFDYmdCLFFBQVEsRUFBRSxJQUFJVixVQUFVLENBQUVHLG1CQUFtQixFQUFFQSxtQkFBb0IsQ0FBQztVQUNwRVEsSUFBSSxFQUFFSCxjQUFjO1VBQ3BCSSxNQUFNLEVBQUVmLFNBQVMsQ0FBQ2dCO1FBQ3BCLENBQUUsQ0FBQyxFQUNILElBQUlsQixRQUFRLENBQUVZLGFBQWEsRUFBRTtVQUFFTyxJQUFJLEVBQUVaO1FBQVksQ0FBRSxDQUFDLENBQ3JEO1FBQ0RhLE9BQU8sRUFBRTtRQUNUO01BQ0YsQ0FBRSxDQUFDO0lBQ0wsQ0FBQzs7SUFFRDtJQUNBLE1BQU1DLFdBQVcsR0FBRyxFQUFFO0lBQ3RCLE1BQU1DLFVBQVUsR0FBR1gsZ0JBQWdCLENBQUVSLG9CQUFvQixDQUFDb0IsTUFBTSxFQUFFckIsU0FBUyxDQUFDc0IsbUJBQW9CLENBQUM7SUFDakdILFdBQVcsQ0FBQ0ksSUFBSSxDQUFFSCxVQUFXLENBQUM7O0lBRTlCO0lBQ0FsQixTQUFTLENBQUNzQixXQUFXLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFFQyxTQUFTLElBQUk7TUFDakRSLFdBQVcsQ0FBQ0ksSUFBSSxDQUFFZCxnQkFBZ0IsQ0FBRWtCLFNBQVMsQ0FBQ0MsS0FBSyxFQUFFRCxTQUFTLENBQUNFLGFBQWMsQ0FBRSxDQUFDO0lBQ2xGLENBQUUsQ0FBQztJQUNILE1BQU1DLGFBQWEsR0FBRyxJQUFJcEMsT0FBTyxDQUFFO01BQ2pDa0IsUUFBUSxFQUFFTyxXQUFXO01BQ3JCWSxXQUFXLEVBQUUsQ0FBQztNQUNkQyxRQUFRLEVBQUUsQ0FBQztNQUNYQyxRQUFRLEVBQUUsRUFBRTtNQUNaQyxNQUFNLEVBQUU7SUFDVixDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNDLFFBQVEsQ0FBRUwsYUFBYyxDQUFDO0VBRWhDO0FBQ0Y7QUFFQS9CLGFBQWEsQ0FBQ3FDLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRTdCLHNCQUF1QixDQUFDO0FBQzFFLGVBQWVBLHNCQUFzQiJ9