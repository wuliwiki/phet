// Copyright 2023, University of Colorado Boulder

/**
 * Node that focuses on current nuclide in NuclideChartNode.
 *
 * @author Luisa Vargas
 * @author Marla Schulz (PhET Interactive Simulations)
 */

import NuclideChartNode from './NuclideChartNode.js';
import buildANucleus from '../../buildANucleus.js';
import BANConstants from '../../common/BANConstants.js';
import Property from '../../../../axon/js/Property.js';
import { Color, Rectangle } from '../../../../scenery/js/imports.js';
import Multilink from '../../../../axon/js/Multilink.js';
import AtomIdentifier from '../../../../shred/js/AtomIdentifier.js';
import Vector2 from '../../../../dot/js/Vector2.js';
const HIGHLIGHT_RECTANGLE_LINE_WIDTH = 1.5;
class FocusedNuclideChartNode extends NuclideChartNode {
  constructor(protonCountProperty, neutronCountProperty, chartTransform) {
    super(protonCountProperty, neutronCountProperty, chartTransform, {
      cellTextFontSize: 6,
      arrowSymbol: false
    });

    // keep track of the current center of the highlight rectangle
    const viewHighlightRectangleCenterProperty = new Property(chartTransform.modelToViewXY(1 + BANConstants.X_SHIFT_HIGHLIGHT_RECTANGLE, 1 + BANConstants.Y_SHIFT_HIGHLIGHT_RECTANGLE));
    const nuclideChartBounds = this.bounds.copy();
    const backgroundRectangle = new Rectangle(this.bounds.dilated(2), {
      stroke: 'white'
    });

    // create and add a box around current nuclide
    const squareLength = chartTransform.modelToViewDeltaX(5);
    const highlightRectangle = new Rectangle(0, 0, squareLength, squareLength, {
      stroke: Color.BLACK,
      lineWidth: HIGHLIGHT_RECTANGLE_LINE_WIDTH
    });
    this.addChild(highlightRectangle);

    // update the box position to current nuclide
    Multilink.multilink([protonCountProperty, neutronCountProperty], (protonCount, neutronCount) => {
      const cellX = neutronCount;
      const cellY = protonCount;
      if (AtomIdentifier.doesExist(protonCount, neutronCount)) {
        // constrain the bounds of the highlightRectangle
        const constrainedCenter = chartTransform.modelToViewXY(cellX + BANConstants.X_SHIFT_HIGHLIGHT_RECTANGLE, cellY + BANConstants.Y_SHIFT_HIGHLIGHT_RECTANGLE);
        viewHighlightRectangleCenterProperty.value = new Vector2(constrainedCenter.x, constrainedCenter.y);
      }
    });
    this.addChild(backgroundRectangle);
    const updateHighlightRectangleCenter = () => {
      highlightRectangle.center = viewHighlightRectangleCenterProperty.value;
      if (highlightRectangle.left < nuclideChartBounds.left) {
        highlightRectangle.left = nuclideChartBounds.left - (HIGHLIGHT_RECTANGLE_LINE_WIDTH - BANConstants.NUCLIDE_CHART_CELL_LINE_WIDTH) / 2;
      }
      if (highlightRectangle.right > nuclideChartBounds.right) {
        highlightRectangle.right = nuclideChartBounds.right + (HIGHLIGHT_RECTANGLE_LINE_WIDTH - BANConstants.NUCLIDE_CHART_CELL_LINE_WIDTH) / 2;
      }
      if (highlightRectangle.top < nuclideChartBounds.top) {
        highlightRectangle.top = nuclideChartBounds.top - (HIGHLIGHT_RECTANGLE_LINE_WIDTH - BANConstants.NUCLIDE_CHART_CELL_LINE_WIDTH) / 2;
      }
      if (highlightRectangle.bottom > nuclideChartBounds.bottom) {
        highlightRectangle.bottom = nuclideChartBounds.bottom + (HIGHLIGHT_RECTANGLE_LINE_WIDTH - BANConstants.NUCLIDE_CHART_CELL_LINE_WIDTH) / 2;
      }

      // make opaque any cells too far away from the center of the highlight rectangle
      this.cells.forEach(nuclideChartCellRow => {
        nuclideChartCellRow.forEach(nuclideChartCell => {
          if (nuclideChartCell) {
            const protonDelta = Math.abs(chartTransform.viewToModelY(highlightRectangle.center.y) - BANConstants.Y_SHIFT_HIGHLIGHT_RECTANGLE - nuclideChartCell?.protonNumber);
            const neutronDelta = Math.abs(chartTransform.viewToModelX(highlightRectangle.center.x) - BANConstants.X_SHIFT_HIGHLIGHT_RECTANGLE - nuclideChartCell?.neutronNumber);
            nuclideChartCell?.makeOpaque(protonDelta, neutronDelta);
          }
        });
      });
    };

    // update the center of the highLightRectangle
    viewHighlightRectangleCenterProperty.link(updateHighlightRectangleCenter);
  }
}
buildANucleus.register('FocusedNuclideChartNode', FocusedNuclideChartNode);
export default FocusedNuclideChartNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdWNsaWRlQ2hhcnROb2RlIiwiYnVpbGRBTnVjbGV1cyIsIkJBTkNvbnN0YW50cyIsIlByb3BlcnR5IiwiQ29sb3IiLCJSZWN0YW5nbGUiLCJNdWx0aWxpbmsiLCJBdG9tSWRlbnRpZmllciIsIlZlY3RvcjIiLCJISUdITElHSFRfUkVDVEFOR0xFX0xJTkVfV0lEVEgiLCJGb2N1c2VkTnVjbGlkZUNoYXJ0Tm9kZSIsImNvbnN0cnVjdG9yIiwicHJvdG9uQ291bnRQcm9wZXJ0eSIsIm5ldXRyb25Db3VudFByb3BlcnR5IiwiY2hhcnRUcmFuc2Zvcm0iLCJjZWxsVGV4dEZvbnRTaXplIiwiYXJyb3dTeW1ib2wiLCJ2aWV3SGlnaGxpZ2h0UmVjdGFuZ2xlQ2VudGVyUHJvcGVydHkiLCJtb2RlbFRvVmlld1hZIiwiWF9TSElGVF9ISUdITElHSFRfUkVDVEFOR0xFIiwiWV9TSElGVF9ISUdITElHSFRfUkVDVEFOR0xFIiwibnVjbGlkZUNoYXJ0Qm91bmRzIiwiYm91bmRzIiwiY29weSIsImJhY2tncm91bmRSZWN0YW5nbGUiLCJkaWxhdGVkIiwic3Ryb2tlIiwic3F1YXJlTGVuZ3RoIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJoaWdobGlnaHRSZWN0YW5nbGUiLCJCTEFDSyIsImxpbmVXaWR0aCIsImFkZENoaWxkIiwibXVsdGlsaW5rIiwicHJvdG9uQ291bnQiLCJuZXV0cm9uQ291bnQiLCJjZWxsWCIsImNlbGxZIiwiZG9lc0V4aXN0IiwiY29uc3RyYWluZWRDZW50ZXIiLCJ2YWx1ZSIsIngiLCJ5IiwidXBkYXRlSGlnaGxpZ2h0UmVjdGFuZ2xlQ2VudGVyIiwiY2VudGVyIiwibGVmdCIsIk5VQ0xJREVfQ0hBUlRfQ0VMTF9MSU5FX1dJRFRIIiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJjZWxscyIsImZvckVhY2giLCJudWNsaWRlQ2hhcnRDZWxsUm93IiwibnVjbGlkZUNoYXJ0Q2VsbCIsInByb3RvbkRlbHRhIiwiTWF0aCIsImFicyIsInZpZXdUb01vZGVsWSIsInByb3Rvbk51bWJlciIsIm5ldXRyb25EZWx0YSIsInZpZXdUb01vZGVsWCIsIm5ldXRyb25OdW1iZXIiLCJtYWtlT3BhcXVlIiwibGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRm9jdXNlZE51Y2xpZGVDaGFydE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vZGUgdGhhdCBmb2N1c2VzIG9uIGN1cnJlbnQgbnVjbGlkZSBpbiBOdWNsaWRlQ2hhcnROb2RlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEx1aXNhIFZhcmdhc1xyXG4gKiBAYXV0aG9yIE1hcmxhIFNjaHVseiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTnVjbGlkZUNoYXJ0Tm9kZSBmcm9tICcuL051Y2xpZGVDaGFydE5vZGUuanMnO1xyXG5pbXBvcnQgYnVpbGRBTnVjbGV1cyBmcm9tICcuLi8uLi9idWlsZEFOdWNsZXVzLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQ2hhcnRUcmFuc2Zvcm0gZnJvbSAnLi4vLi4vLi4vLi4vYmFtYm9vL2pzL0NoYXJ0VHJhbnNmb3JtLmpzJztcclxuaW1wb3J0IEJBTkNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vQkFOQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBBdG9tSWRlbnRpZmllciBmcm9tICcuLi8uLi8uLi8uLi9zaHJlZC9qcy9BdG9tSWRlbnRpZmllci5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuXHJcbmNvbnN0IEhJR0hMSUdIVF9SRUNUQU5HTEVfTElORV9XSURUSCA9IDEuNTtcclxuXHJcbmNsYXNzIEZvY3VzZWROdWNsaWRlQ2hhcnROb2RlIGV4dGVuZHMgTnVjbGlkZUNoYXJ0Tm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdG9uQ291bnRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPiwgbmV1dHJvbkNvdW50UHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBjaGFydFRyYW5zZm9ybTogQ2hhcnRUcmFuc2Zvcm0gKSB7XHJcbiAgICBzdXBlciggcHJvdG9uQ291bnRQcm9wZXJ0eSwgbmV1dHJvbkNvdW50UHJvcGVydHksIGNoYXJ0VHJhbnNmb3JtLCB7IGNlbGxUZXh0Rm9udFNpemU6IDYsIGFycm93U3ltYm9sOiBmYWxzZSB9ICk7XHJcblxyXG4gICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgY3VycmVudCBjZW50ZXIgb2YgdGhlIGhpZ2hsaWdodCByZWN0YW5nbGVcclxuICAgIGNvbnN0IHZpZXdIaWdobGlnaHRSZWN0YW5nbGVDZW50ZXJQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eShcclxuICAgICAgY2hhcnRUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYWSggMSArIEJBTkNvbnN0YW50cy5YX1NISUZUX0hJR0hMSUdIVF9SRUNUQU5HTEUsIDEgKyBCQU5Db25zdGFudHMuWV9TSElGVF9ISUdITElHSFRfUkVDVEFOR0xFICkgKTtcclxuICAgIGNvbnN0IG51Y2xpZGVDaGFydEJvdW5kcyA9IHRoaXMuYm91bmRzLmNvcHkoKTtcclxuICAgIGNvbnN0IGJhY2tncm91bmRSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKCB0aGlzLmJvdW5kcy5kaWxhdGVkKCAyICksIHsgc3Ryb2tlOiAnd2hpdGUnIH0gKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgYW5kIGFkZCBhIGJveCBhcm91bmQgY3VycmVudCBudWNsaWRlXHJcbiAgICBjb25zdCBzcXVhcmVMZW5ndGggPSBjaGFydFRyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggNSApO1xyXG4gICAgY29uc3QgaGlnaGxpZ2h0UmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSggMCwgMCxcclxuICAgICAgc3F1YXJlTGVuZ3RoLCBzcXVhcmVMZW5ndGgsIHsgc3Ryb2tlOiBDb2xvci5CTEFDSywgbGluZVdpZHRoOiBISUdITElHSFRfUkVDVEFOR0xFX0xJTkVfV0lEVEggfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggaGlnaGxpZ2h0UmVjdGFuZ2xlICk7XHJcblxyXG4gICAgLy8gdXBkYXRlIHRoZSBib3ggcG9zaXRpb24gdG8gY3VycmVudCBudWNsaWRlXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHByb3RvbkNvdW50UHJvcGVydHksIG5ldXRyb25Db3VudFByb3BlcnR5IF0sICggcHJvdG9uQ291bnQsIG5ldXRyb25Db3VudCApID0+IHtcclxuICAgICAgY29uc3QgY2VsbFggPSBuZXV0cm9uQ291bnQ7XHJcbiAgICAgIGNvbnN0IGNlbGxZID0gcHJvdG9uQ291bnQ7XHJcbiAgICAgIGlmICggQXRvbUlkZW50aWZpZXIuZG9lc0V4aXN0KCBwcm90b25Db3VudCwgbmV1dHJvbkNvdW50ICkgKSB7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0cmFpbiB0aGUgYm91bmRzIG9mIHRoZSBoaWdobGlnaHRSZWN0YW5nbGVcclxuICAgICAgICBjb25zdCBjb25zdHJhaW5lZENlbnRlciA9IGNoYXJ0VHJhbnNmb3JtLm1vZGVsVG9WaWV3WFkoIGNlbGxYICsgQkFOQ29uc3RhbnRzLlhfU0hJRlRfSElHSExJR0hUX1JFQ1RBTkdMRSxcclxuICAgICAgICAgIGNlbGxZICsgQkFOQ29uc3RhbnRzLllfU0hJRlRfSElHSExJR0hUX1JFQ1RBTkdMRSApO1xyXG4gICAgICAgIHZpZXdIaWdobGlnaHRSZWN0YW5nbGVDZW50ZXJQcm9wZXJ0eS52YWx1ZSA9IG5ldyBWZWN0b3IyKCBjb25zdHJhaW5lZENlbnRlci54LCBjb25zdHJhaW5lZENlbnRlci55ICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBiYWNrZ3JvdW5kUmVjdGFuZ2xlICk7XHJcbiAgICBjb25zdCB1cGRhdGVIaWdobGlnaHRSZWN0YW5nbGVDZW50ZXIgPSAoKSA9PiB7XHJcbiAgICAgIGhpZ2hsaWdodFJlY3RhbmdsZS5jZW50ZXIgPSB2aWV3SGlnaGxpZ2h0UmVjdGFuZ2xlQ2VudGVyUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIGlmICggaGlnaGxpZ2h0UmVjdGFuZ2xlLmxlZnQgPCBudWNsaWRlQ2hhcnRCb3VuZHMubGVmdCApIHtcclxuICAgICAgICBoaWdobGlnaHRSZWN0YW5nbGUubGVmdCA9IG51Y2xpZGVDaGFydEJvdW5kcy5sZWZ0IC0gKCBISUdITElHSFRfUkVDVEFOR0xFX0xJTkVfV0lEVEggLSBCQU5Db25zdGFudHMuTlVDTElERV9DSEFSVF9DRUxMX0xJTkVfV0lEVEggKSAvIDI7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCBoaWdobGlnaHRSZWN0YW5nbGUucmlnaHQgPiBudWNsaWRlQ2hhcnRCb3VuZHMucmlnaHQgKSB7XHJcblxyXG4gICAgICAgIGhpZ2hsaWdodFJlY3RhbmdsZS5yaWdodCA9IG51Y2xpZGVDaGFydEJvdW5kcy5yaWdodCArICggSElHSExJR0hUX1JFQ1RBTkdMRV9MSU5FX1dJRFRIIC0gQkFOQ29uc3RhbnRzLk5VQ0xJREVfQ0hBUlRfQ0VMTF9MSU5FX1dJRFRIICkgLyAyO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICggaGlnaGxpZ2h0UmVjdGFuZ2xlLnRvcCA8IG51Y2xpZGVDaGFydEJvdW5kcy50b3AgKSB7XHJcbiAgICAgICAgaGlnaGxpZ2h0UmVjdGFuZ2xlLnRvcCA9IG51Y2xpZGVDaGFydEJvdW5kcy50b3AgLSAoIEhJR0hMSUdIVF9SRUNUQU5HTEVfTElORV9XSURUSCAtIEJBTkNvbnN0YW50cy5OVUNMSURFX0NIQVJUX0NFTExfTElORV9XSURUSCApIC8gMjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIGhpZ2hsaWdodFJlY3RhbmdsZS5ib3R0b20gPiBudWNsaWRlQ2hhcnRCb3VuZHMuYm90dG9tICkge1xyXG4gICAgICAgIGhpZ2hsaWdodFJlY3RhbmdsZS5ib3R0b20gPSBudWNsaWRlQ2hhcnRCb3VuZHMuYm90dG9tICsgKCBISUdITElHSFRfUkVDVEFOR0xFX0xJTkVfV0lEVEggLSBCQU5Db25zdGFudHMuTlVDTElERV9DSEFSVF9DRUxMX0xJTkVfV0lEVEggKSAvIDI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIG1ha2Ugb3BhcXVlIGFueSBjZWxscyB0b28gZmFyIGF3YXkgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBoaWdobGlnaHQgcmVjdGFuZ2xlXHJcbiAgICAgIHRoaXMuY2VsbHMuZm9yRWFjaCggbnVjbGlkZUNoYXJ0Q2VsbFJvdyA9PiB7XHJcbiAgICAgICAgbnVjbGlkZUNoYXJ0Q2VsbFJvdy5mb3JFYWNoKCBudWNsaWRlQ2hhcnRDZWxsID0+IHtcclxuICAgICAgICAgIGlmICggbnVjbGlkZUNoYXJ0Q2VsbCApIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvdG9uRGVsdGEgPSBNYXRoLmFicyggY2hhcnRUcmFuc2Zvcm0udmlld1RvTW9kZWxZKCBoaWdobGlnaHRSZWN0YW5nbGUuY2VudGVyLnkgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIEJBTkNvbnN0YW50cy5ZX1NISUZUX0hJR0hMSUdIVF9SRUNUQU5HTEUgLSBudWNsaWRlQ2hhcnRDZWxsPy5wcm90b25OdW1iZXIgKTtcclxuICAgICAgICAgICAgY29uc3QgbmV1dHJvbkRlbHRhID0gTWF0aC5hYnMoIGNoYXJ0VHJhbnNmb3JtLnZpZXdUb01vZGVsWCggaGlnaGxpZ2h0UmVjdGFuZ2xlLmNlbnRlci54IClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gQkFOQ29uc3RhbnRzLlhfU0hJRlRfSElHSExJR0hUX1JFQ1RBTkdMRSAtIG51Y2xpZGVDaGFydENlbGw/Lm5ldXRyb25OdW1iZXIgKTtcclxuICAgICAgICAgICAgbnVjbGlkZUNoYXJ0Q2VsbD8ubWFrZU9wYXF1ZSggcHJvdG9uRGVsdGEsIG5ldXRyb25EZWx0YSApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKTtcclxuICAgICAgfSApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyB1cGRhdGUgdGhlIGNlbnRlciBvZiB0aGUgaGlnaExpZ2h0UmVjdGFuZ2xlXHJcbiAgICB2aWV3SGlnaGxpZ2h0UmVjdGFuZ2xlQ2VudGVyUHJvcGVydHkubGluayggdXBkYXRlSGlnaGxpZ2h0UmVjdGFuZ2xlQ2VudGVyICk7XHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFOdWNsZXVzLnJlZ2lzdGVyKCAnRm9jdXNlZE51Y2xpZGVDaGFydE5vZGUnLCBGb2N1c2VkTnVjbGlkZUNoYXJ0Tm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBGb2N1c2VkTnVjbGlkZUNoYXJ0Tm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUdsRCxPQUFPQyxZQUFZLE1BQU0sOEJBQThCO0FBQ3ZELE9BQU9DLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsU0FBU0MsS0FBSyxFQUFFQyxTQUFTLFFBQVEsbUNBQW1DO0FBQ3BFLE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsY0FBYyxNQUFNLHdDQUF3QztBQUNuRSxPQUFPQyxP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