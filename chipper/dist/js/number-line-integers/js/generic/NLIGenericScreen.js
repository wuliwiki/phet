// Copyright 2019-2022, University of Colorado Boulder

/**
 * the 'Generic' screen in the Number Line: Integers simulation
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import genericScreenHome_png from '../../images/genericScreenHome_png.js';
import genericScreenNav_png from '../../images/genericScreenNav_png.js';
import numberLineIntegers from '../numberLineIntegers.js';
import NumberLineIntegersStrings from '../NumberLineIntegersStrings.js';
import NLIGenericModel from './model/NLIGenericModel.js';
import NLIGenericScreenView from './view/NLIGenericScreenView.js';
class NLIGenericScreen extends Screen {
  /**
   * @param {Tandem} tandem
   * @public
   */
  constructor(tandem) {
    const options = {
      name: NumberLineIntegersStrings.screen.genericStringProperty,
      backgroundColorProperty: new Property('rgb( 245, 255, 254 )'),
      homeScreenIcon: new ScreenIcon(new Image(genericScreenHome_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      navigationBarIcon: new ScreenIcon(new Image(genericScreenNav_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    };
    super(() => new NLIGenericModel(), model => new NLIGenericScreenView(model), options);
  }
}
numberLineIntegers.register('NLIGenericScreen', NLIGenericScreen);
export default NLIGenericScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsImdlbmVyaWNTY3JlZW5Ib21lX3BuZyIsImdlbmVyaWNTY3JlZW5OYXZfcG5nIiwibnVtYmVyTGluZUludGVnZXJzIiwiTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncyIsIk5MSUdlbmVyaWNNb2RlbCIsIk5MSUdlbmVyaWNTY3JlZW5WaWV3IiwiTkxJR2VuZXJpY1NjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwib3B0aW9ucyIsIm5hbWUiLCJzY3JlZW4iLCJnZW5lcmljU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwibmF2aWdhdGlvbkJhckljb24iLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTkxJR2VuZXJpY1NjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiB0aGUgJ0dlbmVyaWMnIHNjcmVlbiBpbiB0aGUgTnVtYmVyIExpbmU6IEludGVnZXJzIHNpbXVsYXRpb25cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdlbmVyaWNTY3JlZW5Ib21lX3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvZ2VuZXJpY1NjcmVlbkhvbWVfcG5nLmpzJztcclxuaW1wb3J0IGdlbmVyaWNTY3JlZW5OYXZfcG5nIGZyb20gJy4uLy4uL2ltYWdlcy9nZW5lcmljU2NyZWVuTmF2X3BuZy5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lSW50ZWdlcnMgZnJvbSAnLi4vbnVtYmVyTGluZUludGVnZXJzLmpzJztcclxuaW1wb3J0IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MgZnJvbSAnLi4vTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBOTElHZW5lcmljTW9kZWwgZnJvbSAnLi9tb2RlbC9OTElHZW5lcmljTW9kZWwuanMnO1xyXG5pbXBvcnQgTkxJR2VuZXJpY1NjcmVlblZpZXcgZnJvbSAnLi92aWV3L05MSUdlbmVyaWNTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIE5MSUdlbmVyaWNTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy5zY3JlZW4uZ2VuZXJpY1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCAncmdiKCAyNDUsIDI1NSwgMjU0ICknICksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU2NyZWVuSWNvbiggbmV3IEltYWdlKCBnZW5lcmljU2NyZWVuSG9tZV9wbmcgKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICBuYXZpZ2F0aW9uQmFySWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggZ2VuZXJpY1NjcmVlbk5hdl9wbmcgKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlciggKCkgPT4gbmV3IE5MSUdlbmVyaWNNb2RlbCgpLCBtb2RlbCA9PiBuZXcgTkxJR2VuZXJpY1NjcmVlblZpZXcoIG1vZGVsICksIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlckxpbmVJbnRlZ2Vycy5yZWdpc3RlciggJ05MSUdlbmVyaWNTY3JlZW4nLCBOTElHZW5lcmljU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IE5MSUdlbmVyaWNTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MscUJBQXFCLE1BQU0sdUNBQXVDO0FBQ3pFLE9BQU9DLG9CQUFvQixNQUFNLHNDQUFzQztBQUN2RSxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBQ3ZFLE9BQU9DLGVBQWUsTUFBTSw0QkFBNEI7QUFDeEQsT0FBT0Msb0JBQW9CLE1BQU0sZ0NBQWdDO0FBRWpFLE1BQU1DLGdCQUFnQixTQUFTVCxNQUFNLENBQUM7RUFFcEM7QUFDRjtBQUNBO0FBQ0E7RUFDRVUsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBRXBCLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVQLHlCQUF5QixDQUFDUSxNQUFNLENBQUNDLHFCQUFxQjtNQUM1REMsdUJBQXVCLEVBQUUsSUFBSWpCLFFBQVEsQ0FBRSxzQkFBdUIsQ0FBQztNQUMvRGtCLGNBQWMsRUFBRSxJQUFJaEIsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUMscUJBQXNCLENBQUMsRUFBRTtRQUNsRWUsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hDLGlCQUFpQixFQUFFLElBQUluQixVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFRSxvQkFBcUIsQ0FBQyxFQUFFO1FBQ3BFYyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSFIsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQUUsTUFBTSxJQUFJSixlQUFlLENBQUMsQ0FBQyxFQUFFYyxLQUFLLElBQUksSUFBSWIsb0JBQW9CLENBQUVhLEtBQU0sQ0FBQyxFQUFFVCxPQUFRLENBQUM7RUFDM0Y7QUFDRjtBQUVBUCxrQkFBa0IsQ0FBQ2lCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRWIsZ0JBQWlCLENBQUM7QUFDbkUsZUFBZUEsZ0JBQWdCIn0=