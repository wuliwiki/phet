// Copyright 2019-2022, University of Colorado Boulder

/**
 * ComparisonStatementAccordionBox is an accordion box that contains a "comparison statement", which is a mathematical
 * statement comparing up to three values.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import NLCConstants from '../../../../number-line-common/js/common/NLCConstants.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import numberLineIntegers from '../../numberLineIntegers.js';
import NumberLineIntegersStrings from '../../NumberLineIntegersStrings.js';
import ComparisonStatementNode from './ComparisonStatementNode.js';
const comparisonStatementString = NumberLineIntegersStrings.comparisonStatement;

// constants
const TITLE_FONT = new PhetFont(18);
const COMPARISON_STATEMENT_BOX_WIDTH = 340; // empirically determined to look decent
const DEFAULT_OPTIONS = {
  contentAlign: 'right',
  minWidth: COMPARISON_STATEMENT_BOX_WIDTH,
  maxWidth: COMPARISON_STATEMENT_BOX_WIDTH
};
class ComparisonStatementAccordionBox extends AccordionBox {
  /**
   * @param {NumberLine} numberLine - the number line whose point values are being depicted
   * @param {Object} [options]
   * @public
   */
  constructor(numberLine, options) {
    // Create the comparison statement node.
    const comparisonStatementNode = new ComparisonStatementNode(numberLine);

    // Embed the comparison statement in an accordion box.
    super(comparisonStatementNode, merge({}, DEFAULT_OPTIONS, options, NLCConstants.ACCORDION_BOX_COMMON_OPTIONS, {
      titleNode: new Text(comparisonStatementString, {
        font: TITLE_FONT,
        maxWidth: COMPARISON_STATEMENT_BOX_WIDTH * 0.8
      })
    }));

    // @public (read-only) - make the comparison statement node visible to clients
    this.comparisonStatementNode = comparisonStatementNode;
  }

  /**
   * @public
   */
  reset() {
    this.comparisonStatementNode.selectedOperatorProperty.reset();
    this.expandedProperty.reset();
  }
}
numberLineIntegers.register('ComparisonStatementAccordionBox', ComparisonStatementAccordionBox);
export default ComparisonStatementAccordionBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOTENDb25zdGFudHMiLCJtZXJnZSIsIlBoZXRGb250IiwiVGV4dCIsIkFjY29yZGlvbkJveCIsIm51bWJlckxpbmVJbnRlZ2VycyIsIk51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MiLCJDb21wYXJpc29uU3RhdGVtZW50Tm9kZSIsImNvbXBhcmlzb25TdGF0ZW1lbnRTdHJpbmciLCJjb21wYXJpc29uU3RhdGVtZW50IiwiVElUTEVfRk9OVCIsIkNPTVBBUklTT05fU1RBVEVNRU5UX0JPWF9XSURUSCIsIkRFRkFVTFRfT1BUSU9OUyIsImNvbnRlbnRBbGlnbiIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJDb21wYXJpc29uU3RhdGVtZW50QWNjb3JkaW9uQm94IiwiY29uc3RydWN0b3IiLCJudW1iZXJMaW5lIiwib3B0aW9ucyIsImNvbXBhcmlzb25TdGF0ZW1lbnROb2RlIiwiQUNDT1JESU9OX0JPWF9DT01NT05fT1BUSU9OUyIsInRpdGxlTm9kZSIsImZvbnQiLCJyZXNldCIsInNlbGVjdGVkT3BlcmF0b3JQcm9wZXJ0eSIsImV4cGFuZGVkUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbXBhcmlzb25TdGF0ZW1lbnRBY2NvcmRpb25Cb3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveCBpcyBhbiBhY2NvcmRpb24gYm94IHRoYXQgY29udGFpbnMgYSBcImNvbXBhcmlzb24gc3RhdGVtZW50XCIsIHdoaWNoIGlzIGEgbWF0aGVtYXRpY2FsXHJcbiAqIHN0YXRlbWVudCBjb21wYXJpbmcgdXAgdG8gdGhyZWUgdmFsdWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOTENDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLWxpbmUtY29tbW9uL2pzL2NvbW1vbi9OTENDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQWNjb3JkaW9uQm94IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9BY2NvcmRpb25Cb3guanMnO1xyXG5pbXBvcnQgbnVtYmVyTGluZUludGVnZXJzIGZyb20gJy4uLy4uL251bWJlckxpbmVJbnRlZ2Vycy5qcyc7XHJcbmltcG9ydCBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzIGZyb20gJy4uLy4uL051bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ29tcGFyaXNvblN0YXRlbWVudE5vZGUgZnJvbSAnLi9Db21wYXJpc29uU3RhdGVtZW50Tm9kZS5qcyc7XHJcblxyXG5jb25zdCBjb21wYXJpc29uU3RhdGVtZW50U3RyaW5nID0gTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy5jb21wYXJpc29uU3RhdGVtZW50O1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFRJVExFX0ZPTlQgPSBuZXcgUGhldEZvbnQoIDE4ICk7XHJcbmNvbnN0IENPTVBBUklTT05fU1RBVEVNRU5UX0JPWF9XSURUSCA9IDM0MDsgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZCB0byBsb29rIGRlY2VudFxyXG5jb25zdCBERUZBVUxUX09QVElPTlMgPSB7XHJcbiAgY29udGVudEFsaWduOiAncmlnaHQnLFxyXG4gIG1pbldpZHRoOiBDT01QQVJJU09OX1NUQVRFTUVOVF9CT1hfV0lEVEgsXHJcbiAgbWF4V2lkdGg6IENPTVBBUklTT05fU1RBVEVNRU5UX0JPWF9XSURUSFxyXG59O1xyXG5cclxuY2xhc3MgQ29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveCBleHRlbmRzIEFjY29yZGlvbkJveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyTGluZX0gbnVtYmVyTGluZSAtIHRoZSBudW1iZXIgbGluZSB3aG9zZSBwb2ludCB2YWx1ZXMgYXJlIGJlaW5nIGRlcGljdGVkXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbnVtYmVyTGluZSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGNvbXBhcmlzb24gc3RhdGVtZW50IG5vZGUuXHJcbiAgICBjb25zdCBjb21wYXJpc29uU3RhdGVtZW50Tm9kZSA9IG5ldyBDb21wYXJpc29uU3RhdGVtZW50Tm9kZSggbnVtYmVyTGluZSApO1xyXG5cclxuICAgIC8vIEVtYmVkIHRoZSBjb21wYXJpc29uIHN0YXRlbWVudCBpbiBhbiBhY2NvcmRpb24gYm94LlxyXG4gICAgc3VwZXIoIGNvbXBhcmlzb25TdGF0ZW1lbnROb2RlLCBtZXJnZSgge30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucywgTkxDQ29uc3RhbnRzLkFDQ09SRElPTl9CT1hfQ09NTU9OX09QVElPTlMsIHtcclxuICAgICAgdGl0bGVOb2RlOiBuZXcgVGV4dCggY29tcGFyaXNvblN0YXRlbWVudFN0cmluZywge1xyXG4gICAgICAgIGZvbnQ6IFRJVExFX0ZPTlQsXHJcbiAgICAgICAgbWF4V2lkdGg6IENPTVBBUklTT05fU1RBVEVNRU5UX0JPWF9XSURUSCAqIDAuOFxyXG4gICAgICB9IClcclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgLSBtYWtlIHRoZSBjb21wYXJpc29uIHN0YXRlbWVudCBub2RlIHZpc2libGUgdG8gY2xpZW50c1xyXG4gICAgdGhpcy5jb21wYXJpc29uU3RhdGVtZW50Tm9kZSA9IGNvbXBhcmlzb25TdGF0ZW1lbnROb2RlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5jb21wYXJpc29uU3RhdGVtZW50Tm9kZS5zZWxlY3RlZE9wZXJhdG9yUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuZXhwYW5kZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxubnVtYmVyTGluZUludGVnZXJzLnJlZ2lzdGVyKCAnQ29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveCcsIENvbXBhcmlzb25TdGF0ZW1lbnRBY2NvcmRpb25Cb3ggKTtcclxuZXhwb3J0IGRlZmF1bHQgQ29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsWUFBWSxNQUFNLDBEQUEwRDtBQUNuRixPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxZQUFZLE1BQU0sb0NBQW9DO0FBQzdELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyx5QkFBeUIsTUFBTSxvQ0FBb0M7QUFDMUUsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBRWxFLE1BQU1DLHlCQUF5QixHQUFHRix5QkFBeUIsQ0FBQ0csbUJBQW1COztBQUUvRTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxJQUFJUixRQUFRLENBQUUsRUFBRyxDQUFDO0FBQ3JDLE1BQU1TLDhCQUE4QixHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLE1BQU1DLGVBQWUsR0FBRztFQUN0QkMsWUFBWSxFQUFFLE9BQU87RUFDckJDLFFBQVEsRUFBRUgsOEJBQThCO0VBQ3hDSSxRQUFRLEVBQUVKO0FBQ1osQ0FBQztBQUVELE1BQU1LLCtCQUErQixTQUFTWixZQUFZLENBQUM7RUFFekQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFYSxXQUFXQSxDQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRztJQUVqQztJQUNBLE1BQU1DLHVCQUF1QixHQUFHLElBQUliLHVCQUF1QixDQUFFVyxVQUFXLENBQUM7O0lBRXpFO0lBQ0EsS0FBSyxDQUFFRSx1QkFBdUIsRUFBRW5CLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRVcsZUFBZSxFQUFFTyxPQUFPLEVBQUVuQixZQUFZLENBQUNxQiw0QkFBNEIsRUFBRTtNQUM5R0MsU0FBUyxFQUFFLElBQUluQixJQUFJLENBQUVLLHlCQUF5QixFQUFFO1FBQzlDZSxJQUFJLEVBQUViLFVBQVU7UUFDaEJLLFFBQVEsRUFBRUosOEJBQThCLEdBQUc7TUFDN0MsQ0FBRTtJQUNKLENBQUUsQ0FBRSxDQUFDOztJQUVMO0lBQ0EsSUFBSSxDQUFDUyx1QkFBdUIsR0FBR0EsdUJBQXVCO0VBQ3hEOztFQUVBO0FBQ0Y7QUFDQTtFQUNFSSxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNKLHVCQUF1QixDQUFDSyx3QkFBd0IsQ0FBQ0QsS0FBSyxDQUFDLENBQUM7SUFDN0QsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ0YsS0FBSyxDQUFDLENBQUM7RUFDL0I7QUFDRjtBQUVBbkIsa0JBQWtCLENBQUNzQixRQUFRLENBQUUsaUNBQWlDLEVBQUVYLCtCQUFnQyxDQUFDO0FBQ2pHLGVBQWVBLCtCQUErQiJ9