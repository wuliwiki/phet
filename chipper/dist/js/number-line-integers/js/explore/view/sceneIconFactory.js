// Copyright 2019-2022, University of Colorado Boulder

/**
 * sceneIconFactory is a singleton that has methods for creating the icons used in the radio buttons that select the
 * various scenes.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import birdInAir_png from '../../../../number-line-common/images/birdInAir_png.js';
import PiggyBankDecoration from '../../../../number-line-common/js/explore/model/PiggyBankDecoration.js';
import PiggyBankNode from '../../../../number-line-common/js/explore/view/PiggyBankNode.js';
import ThermometerNode from '../../../../scenery-phet/js/ThermometerNode.js';
import { Color, Image, Rectangle } from '../../../../scenery/js/imports.js';
import numberLineIntegers from '../../numberLineIntegers.js';
import NLIScene from '../model/NLIScene.js';

// constants
const ICON_SIZE = new Dimension2(38, 38);

// map of values to icons, populated lazily to avoid race conditions with image loading
const sceneIdToIconsMap = new Map();
const sceneIconFactory = {
  /**
   * Generate and return an icon for the specified scene ID.
   * @param {SceneID} sceneIdentifier
   * @returns {Node}
   * @public
   */
  getIcon: sceneIdentifier => {
    // The icon nodes are not created until the first time they are needed, which prevents race conditions with image
    // loading.
    if (!sceneIdToIconsMap.get(sceneIdentifier)) {
      if (sceneIdentifier === NLIScene.ELEVATION) {
        const elevationSceneIconNode = new Image(birdInAir_png);
        const xScale = ICON_SIZE.width / elevationSceneIconNode.width;
        const yScale = ICON_SIZE.height / elevationSceneIconNode.height;
        elevationSceneIconNode.setScaleMagnitude(xScale, yScale);
        sceneIdToIconsMap.set(NLIScene.ELEVATION, elevationSceneIconNode);
      } else if (sceneIdentifier === NLIScene.BANK) {
        const piggyBankNode = new PiggyBankNode({
          decorationType: PiggyBankDecoration.LIGHTNING
        });
        piggyBankNode.fill = '#1fb493';
        piggyBankNode.setScaleMagnitude(ICON_SIZE.width / piggyBankNode.width);
        sceneIdToIconsMap.set(NLIScene.BANK, piggyBankNode);
      } else if (sceneIdentifier === NLIScene.TEMPERATURE) {
        const temperatureSceneIconRoot = new Rectangle(0, 0, ICON_SIZE.width, ICON_SIZE.height, {
          fill: Color.TRANSPARENT
        });
        const thermometerNode = new ThermometerNode(new NumberProperty(0.5), 0, 1);
        thermometerNode.setScaleMagnitude(ICON_SIZE.height / thermometerNode.height);
        thermometerNode.center = temperatureSceneIconRoot.center;
        temperatureSceneIconRoot.addChild(thermometerNode);
        sceneIdToIconsMap.set(NLIScene.TEMPERATURE, temperatureSceneIconRoot);
      }
    }

    // Return the icon instance.
    return sceneIdToIconsMap.get(sceneIdentifier);
  }
};
numberLineIntegers.register('sceneIconFactory', sceneIconFactory);
export default sceneIconFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIkRpbWVuc2lvbjIiLCJiaXJkSW5BaXJfcG5nIiwiUGlnZ3lCYW5rRGVjb3JhdGlvbiIsIlBpZ2d5QmFua05vZGUiLCJUaGVybW9tZXRlck5vZGUiLCJDb2xvciIsIkltYWdlIiwiUmVjdGFuZ2xlIiwibnVtYmVyTGluZUludGVnZXJzIiwiTkxJU2NlbmUiLCJJQ09OX1NJWkUiLCJzY2VuZUlkVG9JY29uc01hcCIsIk1hcCIsInNjZW5lSWNvbkZhY3RvcnkiLCJnZXRJY29uIiwic2NlbmVJZGVudGlmaWVyIiwiZ2V0IiwiRUxFVkFUSU9OIiwiZWxldmF0aW9uU2NlbmVJY29uTm9kZSIsInhTY2FsZSIsIndpZHRoIiwieVNjYWxlIiwiaGVpZ2h0Iiwic2V0U2NhbGVNYWduaXR1ZGUiLCJzZXQiLCJCQU5LIiwicGlnZ3lCYW5rTm9kZSIsImRlY29yYXRpb25UeXBlIiwiTElHSFROSU5HIiwiZmlsbCIsIlRFTVBFUkFUVVJFIiwidGVtcGVyYXR1cmVTY2VuZUljb25Sb290IiwiVFJBTlNQQVJFTlQiLCJ0aGVybW9tZXRlck5vZGUiLCJjZW50ZXIiLCJhZGRDaGlsZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsic2NlbmVJY29uRmFjdG9yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBzY2VuZUljb25GYWN0b3J5IGlzIGEgc2luZ2xldG9uIHRoYXQgaGFzIG1ldGhvZHMgZm9yIGNyZWF0aW5nIHRoZSBpY29ucyB1c2VkIGluIHRoZSByYWRpbyBidXR0b25zIHRoYXQgc2VsZWN0IHRoZVxyXG4gKiB2YXJpb3VzIHNjZW5lcy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IGJpcmRJbkFpcl9wbmcgZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLWxpbmUtY29tbW9uL2ltYWdlcy9iaXJkSW5BaXJfcG5nLmpzJztcclxuaW1wb3J0IFBpZ2d5QmFua0RlY29yYXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLWxpbmUtY29tbW9uL2pzL2V4cGxvcmUvbW9kZWwvUGlnZ3lCYW5rRGVjb3JhdGlvbi5qcyc7XHJcbmltcG9ydCBQaWdneUJhbmtOb2RlIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9qcy9leHBsb3JlL3ZpZXcvUGlnZ3lCYW5rTm9kZS5qcyc7XHJcbmltcG9ydCBUaGVybW9tZXRlck5vZGUgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1RoZXJtb21ldGVyTm9kZS5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBJbWFnZSwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG51bWJlckxpbmVJbnRlZ2VycyBmcm9tICcuLi8uLi9udW1iZXJMaW5lSW50ZWdlcnMuanMnO1xyXG5pbXBvcnQgTkxJU2NlbmUgZnJvbSAnLi4vbW9kZWwvTkxJU2NlbmUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IElDT05fU0laRSA9IG5ldyBEaW1lbnNpb24yKCAzOCwgMzggKTtcclxuXHJcblxyXG4vLyBtYXAgb2YgdmFsdWVzIHRvIGljb25zLCBwb3B1bGF0ZWQgbGF6aWx5IHRvIGF2b2lkIHJhY2UgY29uZGl0aW9ucyB3aXRoIGltYWdlIGxvYWRpbmdcclxuY29uc3Qgc2NlbmVJZFRvSWNvbnNNYXAgPSBuZXcgTWFwKCk7XHJcblxyXG5jb25zdCBzY2VuZUljb25GYWN0b3J5ID0ge1xyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZSBhbmQgcmV0dXJuIGFuIGljb24gZm9yIHRoZSBzcGVjaWZpZWQgc2NlbmUgSUQuXHJcbiAgICogQHBhcmFtIHtTY2VuZUlEfSBzY2VuZUlkZW50aWZpZXJcclxuICAgKiBAcmV0dXJucyB7Tm9kZX1cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZ2V0SWNvbjogc2NlbmVJZGVudGlmaWVyID0+IHtcclxuXHJcbiAgICAvLyBUaGUgaWNvbiBub2RlcyBhcmUgbm90IGNyZWF0ZWQgdW50aWwgdGhlIGZpcnN0IHRpbWUgdGhleSBhcmUgbmVlZGVkLCB3aGljaCBwcmV2ZW50cyByYWNlIGNvbmRpdGlvbnMgd2l0aCBpbWFnZVxyXG4gICAgLy8gbG9hZGluZy5cclxuICAgIGlmICggIXNjZW5lSWRUb0ljb25zTWFwLmdldCggc2NlbmVJZGVudGlmaWVyICkgKSB7XHJcbiAgICAgIGlmICggc2NlbmVJZGVudGlmaWVyID09PSBOTElTY2VuZS5FTEVWQVRJT04gKSB7XHJcbiAgICAgICAgY29uc3QgZWxldmF0aW9uU2NlbmVJY29uTm9kZSA9IG5ldyBJbWFnZSggYmlyZEluQWlyX3BuZyApO1xyXG4gICAgICAgIGNvbnN0IHhTY2FsZSA9IElDT05fU0laRS53aWR0aCAvIGVsZXZhdGlvblNjZW5lSWNvbk5vZGUud2lkdGg7XHJcbiAgICAgICAgY29uc3QgeVNjYWxlID0gSUNPTl9TSVpFLmhlaWdodCAvIGVsZXZhdGlvblNjZW5lSWNvbk5vZGUuaGVpZ2h0O1xyXG4gICAgICAgIGVsZXZhdGlvblNjZW5lSWNvbk5vZGUuc2V0U2NhbGVNYWduaXR1ZGUoIHhTY2FsZSwgeVNjYWxlICk7XHJcbiAgICAgICAgc2NlbmVJZFRvSWNvbnNNYXAuc2V0KCBOTElTY2VuZS5FTEVWQVRJT04sIGVsZXZhdGlvblNjZW5lSWNvbk5vZGUgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggc2NlbmVJZGVudGlmaWVyID09PSBOTElTY2VuZS5CQU5LICkge1xyXG4gICAgICAgIGNvbnN0IHBpZ2d5QmFua05vZGUgPSBuZXcgUGlnZ3lCYW5rTm9kZSggeyBkZWNvcmF0aW9uVHlwZTogUGlnZ3lCYW5rRGVjb3JhdGlvbi5MSUdIVE5JTkcgfSApO1xyXG4gICAgICAgIHBpZ2d5QmFua05vZGUuZmlsbCA9ICcjMWZiNDkzJztcclxuICAgICAgICBwaWdneUJhbmtOb2RlLnNldFNjYWxlTWFnbml0dWRlKCBJQ09OX1NJWkUud2lkdGggLyBwaWdneUJhbmtOb2RlLndpZHRoICk7XHJcbiAgICAgICAgc2NlbmVJZFRvSWNvbnNNYXAuc2V0KCBOTElTY2VuZS5CQU5LLCBwaWdneUJhbmtOb2RlICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIHNjZW5lSWRlbnRpZmllciA9PT0gTkxJU2NlbmUuVEVNUEVSQVRVUkUgKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcGVyYXR1cmVTY2VuZUljb25Sb290ID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgSUNPTl9TSVpFLndpZHRoLCBJQ09OX1NJWkUuaGVpZ2h0LCB7XHJcbiAgICAgICAgICBmaWxsOiBDb2xvci5UUkFOU1BBUkVOVFxyXG4gICAgICAgIH0gKTtcclxuICAgICAgICBjb25zdCB0aGVybW9tZXRlck5vZGUgPSBuZXcgVGhlcm1vbWV0ZXJOb2RlKCBuZXcgTnVtYmVyUHJvcGVydHkoIDAuNSApLCAwLCAxICk7XHJcbiAgICAgICAgdGhlcm1vbWV0ZXJOb2RlLnNldFNjYWxlTWFnbml0dWRlKCBJQ09OX1NJWkUuaGVpZ2h0IC8gdGhlcm1vbWV0ZXJOb2RlLmhlaWdodCApO1xyXG4gICAgICAgIHRoZXJtb21ldGVyTm9kZS5jZW50ZXIgPSB0ZW1wZXJhdHVyZVNjZW5lSWNvblJvb3QuY2VudGVyO1xyXG4gICAgICAgIHRlbXBlcmF0dXJlU2NlbmVJY29uUm9vdC5hZGRDaGlsZCggdGhlcm1vbWV0ZXJOb2RlICk7XHJcbiAgICAgICAgc2NlbmVJZFRvSWNvbnNNYXAuc2V0KCBOTElTY2VuZS5URU1QRVJBVFVSRSwgdGVtcGVyYXR1cmVTY2VuZUljb25Sb290ICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIGljb24gaW5zdGFuY2UuXHJcbiAgICByZXR1cm4gc2NlbmVJZFRvSWNvbnNNYXAuZ2V0KCBzY2VuZUlkZW50aWZpZXIgKTtcclxuICB9XHJcbn07XHJcblxyXG5udW1iZXJMaW5lSW50ZWdlcnMucmVnaXN0ZXIoICdzY2VuZUljb25GYWN0b3J5Jywgc2NlbmVJY29uRmFjdG9yeSApO1xyXG5leHBvcnQgZGVmYXVsdCBzY2VuZUljb25GYWN0b3J5O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsT0FBT0MsYUFBYSxNQUFNLHdEQUF3RDtBQUNsRixPQUFPQyxtQkFBbUIsTUFBTSx3RUFBd0U7QUFDeEcsT0FBT0MsYUFBYSxNQUFNLGlFQUFpRTtBQUMzRixPQUFPQyxlQUFlLE1BQU0sZ0RBQWdEO0FBQzVFLFNBQVNDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxTQUFTLFFBQVEsbUNBQW1DO0FBQzNFLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxRQUFRLE1BQU0sc0JBQXNCOztBQUUzQztBQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJVixVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQzs7QUFHMUM7QUFDQSxNQUFNVyxpQkFBaUIsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztBQUVuQyxNQUFNQyxnQkFBZ0IsR0FBRztFQUV2QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsT0FBTyxFQUFFQyxlQUFlLElBQUk7SUFFMUI7SUFDQTtJQUNBLElBQUssQ0FBQ0osaUJBQWlCLENBQUNLLEdBQUcsQ0FBRUQsZUFBZ0IsQ0FBQyxFQUFHO01BQy9DLElBQUtBLGVBQWUsS0FBS04sUUFBUSxDQUFDUSxTQUFTLEVBQUc7UUFDNUMsTUFBTUMsc0JBQXNCLEdBQUcsSUFBSVosS0FBSyxDQUFFTCxhQUFjLENBQUM7UUFDekQsTUFBTWtCLE1BQU0sR0FBR1QsU0FBUyxDQUFDVSxLQUFLLEdBQUdGLHNCQUFzQixDQUFDRSxLQUFLO1FBQzdELE1BQU1DLE1BQU0sR0FBR1gsU0FBUyxDQUFDWSxNQUFNLEdBQUdKLHNCQUFzQixDQUFDSSxNQUFNO1FBQy9ESixzQkFBc0IsQ0FBQ0ssaUJBQWlCLENBQUVKLE1BQU0sRUFBRUUsTUFBTyxDQUFDO1FBQzFEVixpQkFBaUIsQ0FBQ2EsR0FBRyxDQUFFZixRQUFRLENBQUNRLFNBQVMsRUFBRUMsc0JBQXVCLENBQUM7TUFDckUsQ0FBQyxNQUNJLElBQUtILGVBQWUsS0FBS04sUUFBUSxDQUFDZ0IsSUFBSSxFQUFHO1FBQzVDLE1BQU1DLGFBQWEsR0FBRyxJQUFJdkIsYUFBYSxDQUFFO1VBQUV3QixjQUFjLEVBQUV6QixtQkFBbUIsQ0FBQzBCO1FBQVUsQ0FBRSxDQUFDO1FBQzVGRixhQUFhLENBQUNHLElBQUksR0FBRyxTQUFTO1FBQzlCSCxhQUFhLENBQUNILGlCQUFpQixDQUFFYixTQUFTLENBQUNVLEtBQUssR0FBR00sYUFBYSxDQUFDTixLQUFNLENBQUM7UUFDeEVULGlCQUFpQixDQUFDYSxHQUFHLENBQUVmLFFBQVEsQ0FBQ2dCLElBQUksRUFBRUMsYUFBYyxDQUFDO01BQ3ZELENBQUMsTUFDSSxJQUFLWCxlQUFlLEtBQUtOLFFBQVEsQ0FBQ3FCLFdBQVcsRUFBRztRQUNuRCxNQUFNQyx3QkFBd0IsR0FBRyxJQUFJeEIsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVHLFNBQVMsQ0FBQ1UsS0FBSyxFQUFFVixTQUFTLENBQUNZLE1BQU0sRUFBRTtVQUN2Rk8sSUFBSSxFQUFFeEIsS0FBSyxDQUFDMkI7UUFDZCxDQUFFLENBQUM7UUFDSCxNQUFNQyxlQUFlLEdBQUcsSUFBSTdCLGVBQWUsQ0FBRSxJQUFJTCxjQUFjLENBQUUsR0FBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztRQUM5RWtDLGVBQWUsQ0FBQ1YsaUJBQWlCLENBQUViLFNBQVMsQ0FBQ1ksTUFBTSxHQUFHVyxlQUFlLENBQUNYLE1BQU8sQ0FBQztRQUM5RVcsZUFBZSxDQUFDQyxNQUFNLEdBQUdILHdCQUF3QixDQUFDRyxNQUFNO1FBQ3hESCx3QkFBd0IsQ0FBQ0ksUUFBUSxDQUFFRixlQUFnQixDQUFDO1FBQ3BEdEIsaUJBQWlCLENBQUNhLEdBQUcsQ0FBRWYsUUFBUSxDQUFDcUIsV0FBVyxFQUFFQyx3QkFBeUIsQ0FBQztNQUN6RTtJQUNGOztJQUVBO0lBQ0EsT0FBT3BCLGlCQUFpQixDQUFDSyxHQUFHLENBQUVELGVBQWdCLENBQUM7RUFDakQ7QUFDRixDQUFDO0FBRURQLGtCQUFrQixDQUFDNEIsUUFBUSxDQUFFLGtCQUFrQixFQUFFdkIsZ0JBQWlCLENBQUM7QUFDbkUsZUFBZUEsZ0JBQWdCIn0=