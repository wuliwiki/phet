// Copyright 2019-2023, University of Colorado Boulder

/**
 * view for the "Temperature" scene
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Saurabh Totey
 * @author Arnab Purkayastha
 */

import Multilink from '../../../../axon/js/Multilink.js';
import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ColorizedReadoutNode from '../../../../number-line-common/js/common/view/ColorizedReadoutNode.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Rectangle, RichText, Text } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import NLIConstants from '../../common/NLIConstants.js';
import numberLineIntegers from '../../numberLineIntegers.js';
import NumberLineIntegersStrings from '../../NumberLineIntegersStrings.js';
import TemperatureSceneModel from '../model/TemperatureSceneModel.js';
import MonthsComboBox from './MonthsComboBox.js';
import SceneView from './SceneView.js';
import TemperatureMapNode from './TemperatureMapNode.js';
import TemperaturePointControllerNode from './TemperaturePointControllerNode.js';

// constants
const NUMBER_LINE_LABEL_FONT = new PhetFont({
  size: 18,
  weight: 'bold'
});
const UNITS_SELECTOR_LABEL_FONT = new PhetFont({
  size: 18
});
const UNITS_SELECTOR_TEXT_OPTIONS = {
  font: UNITS_SELECTOR_LABEL_FONT,
  maxWidth: 40 // empirically determined to work with other aspects of the layout
};

const NUMBER_LINE_PANEL_WIDTH = 200; // empirically determined
const NUMBER_LINE_PANEL_MARGINS = 10;
const NUMBER_LINE_CONTENT_WIDTH = NUMBER_LINE_PANEL_WIDTH - 2 * NUMBER_LINE_PANEL_MARGINS;
const TITLE_TO_SELECTOR_SPACING = 10;
const CELSIUS_NUMBER_LINE_INDEX = TemperatureSceneModel.CELSIUS_NUMBER_LINE_INDEX;
const FAHRENHEIT_NUMBER_LINE_INDEX = TemperatureSceneModel.FAHRENHEIT_NUMBER_LINE_INDEX;
const temperatureAmountCelsiusString = NumberLineIntegersStrings.temperatureAmountCelsius;
const temperatureAmountFahrenheitString = NumberLineIntegersStrings.temperatureAmountFahrenheit;
const temperatureLabelCelsiusString = NumberLineIntegersStrings.temperatureLabelCelsius;
const temperatureLabelFahrenheitString = NumberLineIntegersStrings.temperatureLabelFahrenheit;
const temperatureMapCaptionString = NumberLineIntegersStrings.temperatureMapCaption;
const temperatureString = NumberLineIntegersStrings.temperature;
class TemperatureSceneView extends SceneView {
  /**
   * @param {TemperatureSceneModel} sceneModel
   * @param {Bounds2} layoutBounds
   * @public
   */
  constructor(sceneModel, layoutBounds) {
    super(sceneModel, layoutBounds, {
      // options common to both number lines
      commonNumberLineNodeOptions: {
        tickMarkLabelPositionWhenVertical: 'left',
        pointNodeOptions: {
          usePointColorForLabelText: false,
          colorizeLabelBackground: true
        }
      },
      // options unique to the individual number lines, must be in correct order
      uniqueNumberLineNodeOptionsList: [{
        numericalLabelTemplate: temperatureAmountFahrenheitString
      }, {
        numericalLabelTemplate: temperatureAmountCelsiusString
      }],
      // Don't have the super constructor add the number line nodes - that will be done below.
      automaticallyAddNLNodes: false
    });

    // Put the number lines on their own layer so that their position can be easily adjusted.
    const numberLinesRootNode = new Node();
    const fahrenheitNumberLineNode = this.numberLineNodes[FAHRENHEIT_NUMBER_LINE_INDEX];
    const celsiusNumberLineNode = this.numberLineNodes[CELSIUS_NUMBER_LINE_INDEX];
    numberLinesRootNode.addChild(fahrenheitNumberLineNode);
    numberLinesRootNode.addChild(celsiusNumberLineNode);

    // Get local references to other items needed to manage the two separate number lines.
    const fahrenheitNumberLine = sceneModel.numberLines[FAHRENHEIT_NUMBER_LINE_INDEX];
    const fahrenheitComparisonStatementAccordionBox = this.comparisonStatementAccordionBoxes[FAHRENHEIT_NUMBER_LINE_INDEX];
    const celsiusNumberLine = sceneModel.numberLines[CELSIUS_NUMBER_LINE_INDEX];
    const celsiusComparisonStatementAccordionBox = this.comparisonStatementAccordionBoxes[CELSIUS_NUMBER_LINE_INDEX];

    // node where the contents of the number line panel will be placed
    const numberLinePanelContent = new Node();
    numberLinePanelContent.addChild(numberLinesRootNode);

    // Make sure that the same operator is being used in both the celsius and fahrenheit comparison statements.
    celsiusComparisonStatementAccordionBox.comparisonStatementNode.selectedOperatorProperty.link(selectedOperator => {
      fahrenheitComparisonStatementAccordionBox.comparisonStatementNode.selectedOperatorProperty.set(selectedOperator);
    });
    fahrenheitComparisonStatementAccordionBox.comparisonStatementNode.selectedOperatorProperty.link(selectedOperator => {
      celsiusComparisonStatementAccordionBox.comparisonStatementNode.selectedOperatorProperty.set(selectedOperator);
    });

    // @private
    this.monthsComboBox = new MonthsComboBox(sceneModel.monthProperty, this.controlsLayer, {
      left: this.checkboxGroup.left,
      top: sceneModel.mapBounds.minY,
      buttonTouchAreaXDilation: 7,
      buttonTouchAreaYDilation: 7
    });
    this.controlsLayer.addChild(this.monthsComboBox);

    // @private - map of the world that depicts temperature data
    this.temperatureMap = new TemperatureMapNode(sceneModel.monthProperty, sceneModel.mapBounds);
    this.temperatureMap.center = sceneModel.mapBounds.center;
    this.scenesLayer.addChild(this.temperatureMap);

    // Add the node that represents the box that will hold the thermometers.
    const thermometerBox = Rectangle.bounds(sceneModel.thermometerBoxBounds, {
      fill: 'white',
      stroke: 'black',
      cornerRadius: 6
    });
    this.scenesLayer.addChild(thermometerBox);

    // caption for the temperature map
    const temperatureMapCaption = new RichText(temperatureMapCaptionString, {
      align: 'center',
      centerX: this.temperatureMap.centerX,
      top: this.temperatureMap.bottom + 7,
      // a little bit under the map
      font: new PhetFont(10),
      fill: '#707070'
    });
    this.scenesLayer.addChild(temperatureMapCaption);

    // radio button group for selecting the temperature units
    const temperatureUnitsSelector = new VerticalAquaRadioButtonGroup(sceneModel.temperatureUnitsProperty, [{
      value: NLIConstants.TEMPERATURE_UNITS.FAHRENHEIT,
      createNode: () => new Text(temperatureLabelFahrenheitString, UNITS_SELECTOR_TEXT_OPTIONS)
    }, {
      value: NLIConstants.TEMPERATURE_UNITS.CELSIUS,
      createNode: () => new Text(temperatureLabelCelsiusString, UNITS_SELECTOR_TEXT_OPTIONS)
    }], {
      // Limit the width to half the panel height to handle long labels from translations and string tests.
      maxWidth: (NUMBER_LINE_PANEL_WIDTH - 2 * NUMBER_LINE_PANEL_MARGINS) / 2,
      // This should appear in the upper left of the panel.
      right: NUMBER_LINE_CONTENT_WIDTH,
      top: 0
    });
    numberLinePanelContent.addChild(temperatureUnitsSelector);

    // title for the panel where the number line will appear
    const numberLinePanelTitle = new Text(temperatureString, {
      font: NUMBER_LINE_LABEL_FONT,
      maxWidth: NUMBER_LINE_PANEL_WIDTH - temperatureUnitsSelector.width - TITLE_TO_SELECTOR_SPACING - 2 * NUMBER_LINE_PANEL_MARGINS,
      // This should be at the top of the node, centered between the left edge and the units selector.
      centerX: (NUMBER_LINE_CONTENT_WIDTH - temperatureUnitsSelector.width) / 2,
      top: 0
    });
    numberLinePanelContent.addChild(numberLinePanelTitle);

    // Manage the label texts for each thermometer.
    const celsiusLabelsLayer = new Node();
    const fahrenheitLabelsLayer = new Node();
    const onAddedNumberLinePoint = (numberLine, labelsLayer, addedNumberLinePoint) => {
      // Create the textual label.
      const labelNode = new ColorizedReadoutNode(new Property(addedNumberLinePoint.controller.label), addedNumberLinePoint.colorProperty, {
        textOptions: {
          font: new PhetFont(16),
          maxWidth: 20 // empirically determined to prevent layout problems with long and RTL strings
        }
      });

      labelsLayer.addChild(labelNode);
      const numberLinePointListener = () => {
        labelNode.leftCenter = addedNumberLinePoint.getPositionInModelSpace().plus(new Vector2(15, 0));
      };
      addedNumberLinePoint.valueProperty.link(numberLinePointListener);
      const dragStateChangeHandler = dragging => {
        if (dragging) {
          labelNode.moveToFront();
        }
      };
      addedNumberLinePoint.isDraggingProperty.link(dragStateChangeHandler);
      const removalListener = removedNumberLinePoint => {
        if (removedNumberLinePoint !== addedNumberLinePoint) {
          return;
        }
        numberLine.residentPoints.removeItemRemovedListener(removalListener);
        labelsLayer.removeChild(labelNode);
        labelNode.dispose();
        addedNumberLinePoint.valueProperty.unlink(numberLinePointListener);
      };
      numberLine.residentPoints.addItemRemovedListener(removalListener);
    };
    celsiusNumberLine.residentPoints.addItemAddedListener(addedPoint => {
      onAddedNumberLinePoint(celsiusNumberLine, celsiusLabelsLayer, addedPoint);
    });
    fahrenheitNumberLine.residentPoints.addItemAddedListener(addedPoint => {
      onAddedNumberLinePoint(fahrenheitNumberLine, fahrenheitLabelsLayer, addedPoint);
    });
    numberLinesRootNode.addChild(celsiusLabelsLayer);
    numberLinesRootNode.addChild(fahrenheitLabelsLayer);

    // Set the number line position to be fixed, roughly horizontally centered in the panel, and just below the header
    // label.  It's important that these be absolute numbers so that the layout of the panel doesn't change
    // dramatically as the string sizes change (e.g. in translations and string tests).  The right side of the number
    // line is used to set the X position because there is no text there, so the position won't change if different
    // size labels are present.
    numberLinesRootNode.top = 25;
    numberLinesRootNode.right = 110;
    const numberLinePanel = new Panel(numberLinePanelContent, {
      fill: 'lightgray',
      stroke: 'transparent',
      align: 'center',
      resize: false,
      xMargin: NUMBER_LINE_PANEL_MARGINS,
      yMargin: NUMBER_LINE_PANEL_MARGINS,
      centerX: this.temperatureMap.left / 2,
      // centered between left edge of scene and left edge of map
      centerY: this.layoutBounds.minY + this.layoutBounds.maxY / 2,
      // centered vertically in the layout bounds
      minWidth: NUMBER_LINE_PANEL_WIDTH,
      maxWidth: NUMBER_LINE_PANEL_WIDTH
    });
    this.numberLinesLayer.addChild(numberLinePanel);
    Multilink.multilink([sceneModel.temperatureUnitsProperty, sceneModel.showNumberLineProperty], (temperatureUnits, showNumberLine) => {
      celsiusNumberLineNode.visible = temperatureUnits === NLIConstants.TEMPERATURE_UNITS.CELSIUS;
      celsiusComparisonStatementAccordionBox.visible = celsiusNumberLineNode.visible;
      celsiusLabelsLayer.visible = celsiusNumberLineNode.visible;
      fahrenheitNumberLineNode.visible = temperatureUnits === NLIConstants.TEMPERATURE_UNITS.FAHRENHEIT;
      fahrenheitComparisonStatementAccordionBox.visible = fahrenheitNumberLineNode.visible;
      fahrenheitLabelsLayer.visible = fahrenheitNumberLineNode.visible;
      numberLinePanel.visible = showNumberLine;
    });
    this.scenesLayer.addChild(new Node({
      children: sceneModel.permanentPointControllers.map(pointController => new TemperaturePointControllerNode(pointController, sceneModel.numberLineAbsoluteValueIndicatorsVisibleProperty, sceneModel.temperatureUnitsProperty))
    }));
  }
}
numberLineIntegers.register('TemperatureSceneView', TemperatureSceneView);
export default TemperatureSceneView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJDb2xvcml6ZWRSZWFkb3V0Tm9kZSIsIlBoZXRGb250IiwiTm9kZSIsIlJlY3RhbmdsZSIsIlJpY2hUZXh0IiwiVGV4dCIsIlBhbmVsIiwiVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cCIsIk5MSUNvbnN0YW50cyIsIm51bWJlckxpbmVJbnRlZ2VycyIsIk51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MiLCJUZW1wZXJhdHVyZVNjZW5lTW9kZWwiLCJNb250aHNDb21ib0JveCIsIlNjZW5lVmlldyIsIlRlbXBlcmF0dXJlTWFwTm9kZSIsIlRlbXBlcmF0dXJlUG9pbnRDb250cm9sbGVyTm9kZSIsIk5VTUJFUl9MSU5FX0xBQkVMX0ZPTlQiLCJzaXplIiwid2VpZ2h0IiwiVU5JVFNfU0VMRUNUT1JfTEFCRUxfRk9OVCIsIlVOSVRTX1NFTEVDVE9SX1RFWFRfT1BUSU9OUyIsImZvbnQiLCJtYXhXaWR0aCIsIk5VTUJFUl9MSU5FX1BBTkVMX1dJRFRIIiwiTlVNQkVSX0xJTkVfUEFORUxfTUFSR0lOUyIsIk5VTUJFUl9MSU5FX0NPTlRFTlRfV0lEVEgiLCJUSVRMRV9UT19TRUxFQ1RPUl9TUEFDSU5HIiwiQ0VMU0lVU19OVU1CRVJfTElORV9JTkRFWCIsIkZBSFJFTkhFSVRfTlVNQkVSX0xJTkVfSU5ERVgiLCJ0ZW1wZXJhdHVyZUFtb3VudENlbHNpdXNTdHJpbmciLCJ0ZW1wZXJhdHVyZUFtb3VudENlbHNpdXMiLCJ0ZW1wZXJhdHVyZUFtb3VudEZhaHJlbmhlaXRTdHJpbmciLCJ0ZW1wZXJhdHVyZUFtb3VudEZhaHJlbmhlaXQiLCJ0ZW1wZXJhdHVyZUxhYmVsQ2Vsc2l1c1N0cmluZyIsInRlbXBlcmF0dXJlTGFiZWxDZWxzaXVzIiwidGVtcGVyYXR1cmVMYWJlbEZhaHJlbmhlaXRTdHJpbmciLCJ0ZW1wZXJhdHVyZUxhYmVsRmFocmVuaGVpdCIsInRlbXBlcmF0dXJlTWFwQ2FwdGlvblN0cmluZyIsInRlbXBlcmF0dXJlTWFwQ2FwdGlvbiIsInRlbXBlcmF0dXJlU3RyaW5nIiwidGVtcGVyYXR1cmUiLCJUZW1wZXJhdHVyZVNjZW5lVmlldyIsImNvbnN0cnVjdG9yIiwic2NlbmVNb2RlbCIsImxheW91dEJvdW5kcyIsImNvbW1vbk51bWJlckxpbmVOb2RlT3B0aW9ucyIsInRpY2tNYXJrTGFiZWxQb3NpdGlvbldoZW5WZXJ0aWNhbCIsInBvaW50Tm9kZU9wdGlvbnMiLCJ1c2VQb2ludENvbG9yRm9yTGFiZWxUZXh0IiwiY29sb3JpemVMYWJlbEJhY2tncm91bmQiLCJ1bmlxdWVOdW1iZXJMaW5lTm9kZU9wdGlvbnNMaXN0IiwibnVtZXJpY2FsTGFiZWxUZW1wbGF0ZSIsImF1dG9tYXRpY2FsbHlBZGROTE5vZGVzIiwibnVtYmVyTGluZXNSb290Tm9kZSIsImZhaHJlbmhlaXROdW1iZXJMaW5lTm9kZSIsIm51bWJlckxpbmVOb2RlcyIsImNlbHNpdXNOdW1iZXJMaW5lTm9kZSIsImFkZENoaWxkIiwiZmFocmVuaGVpdE51bWJlckxpbmUiLCJudW1iZXJMaW5lcyIsImZhaHJlbmhlaXRDb21wYXJpc29uU3RhdGVtZW50QWNjb3JkaW9uQm94IiwiY29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveGVzIiwiY2Vsc2l1c051bWJlckxpbmUiLCJjZWxzaXVzQ29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveCIsIm51bWJlckxpbmVQYW5lbENvbnRlbnQiLCJjb21wYXJpc29uU3RhdGVtZW50Tm9kZSIsInNlbGVjdGVkT3BlcmF0b3JQcm9wZXJ0eSIsImxpbmsiLCJzZWxlY3RlZE9wZXJhdG9yIiwic2V0IiwibW9udGhzQ29tYm9Cb3giLCJtb250aFByb3BlcnR5IiwiY29udHJvbHNMYXllciIsImxlZnQiLCJjaGVja2JveEdyb3VwIiwidG9wIiwibWFwQm91bmRzIiwibWluWSIsImJ1dHRvblRvdWNoQXJlYVhEaWxhdGlvbiIsImJ1dHRvblRvdWNoQXJlYVlEaWxhdGlvbiIsInRlbXBlcmF0dXJlTWFwIiwiY2VudGVyIiwic2NlbmVzTGF5ZXIiLCJ0aGVybW9tZXRlckJveCIsImJvdW5kcyIsInRoZXJtb21ldGVyQm94Qm91bmRzIiwiZmlsbCIsInN0cm9rZSIsImNvcm5lclJhZGl1cyIsImFsaWduIiwiY2VudGVyWCIsImJvdHRvbSIsInRlbXBlcmF0dXJlVW5pdHNTZWxlY3RvciIsInRlbXBlcmF0dXJlVW5pdHNQcm9wZXJ0eSIsInZhbHVlIiwiVEVNUEVSQVRVUkVfVU5JVFMiLCJGQUhSRU5IRUlUIiwiY3JlYXRlTm9kZSIsIkNFTFNJVVMiLCJyaWdodCIsIm51bWJlckxpbmVQYW5lbFRpdGxlIiwid2lkdGgiLCJjZWxzaXVzTGFiZWxzTGF5ZXIiLCJmYWhyZW5oZWl0TGFiZWxzTGF5ZXIiLCJvbkFkZGVkTnVtYmVyTGluZVBvaW50IiwibnVtYmVyTGluZSIsImxhYmVsc0xheWVyIiwiYWRkZWROdW1iZXJMaW5lUG9pbnQiLCJsYWJlbE5vZGUiLCJjb250cm9sbGVyIiwibGFiZWwiLCJjb2xvclByb3BlcnR5IiwidGV4dE9wdGlvbnMiLCJudW1iZXJMaW5lUG9pbnRMaXN0ZW5lciIsImxlZnRDZW50ZXIiLCJnZXRQb3NpdGlvbkluTW9kZWxTcGFjZSIsInBsdXMiLCJ2YWx1ZVByb3BlcnR5IiwiZHJhZ1N0YXRlQ2hhbmdlSGFuZGxlciIsImRyYWdnaW5nIiwibW92ZVRvRnJvbnQiLCJpc0RyYWdnaW5nUHJvcGVydHkiLCJyZW1vdmFsTGlzdGVuZXIiLCJyZW1vdmVkTnVtYmVyTGluZVBvaW50IiwicmVzaWRlbnRQb2ludHMiLCJyZW1vdmVJdGVtUmVtb3ZlZExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJkaXNwb3NlIiwidW5saW5rIiwiYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciIsImFkZEl0ZW1BZGRlZExpc3RlbmVyIiwiYWRkZWRQb2ludCIsIm51bWJlckxpbmVQYW5lbCIsInJlc2l6ZSIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiY2VudGVyWSIsIm1heFkiLCJtaW5XaWR0aCIsIm51bWJlckxpbmVzTGF5ZXIiLCJtdWx0aWxpbmsiLCJzaG93TnVtYmVyTGluZVByb3BlcnR5IiwidGVtcGVyYXR1cmVVbml0cyIsInNob3dOdW1iZXJMaW5lIiwidmlzaWJsZSIsImNoaWxkcmVuIiwicGVybWFuZW50UG9pbnRDb250cm9sbGVycyIsIm1hcCIsInBvaW50Q29udHJvbGxlciIsIm51bWJlckxpbmVBYnNvbHV0ZVZhbHVlSW5kaWNhdG9yc1Zpc2libGVQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGVtcGVyYXR1cmVTY2VuZVZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogdmlldyBmb3IgdGhlIFwiVGVtcGVyYXR1cmVcIiBzY2VuZVxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhdXJhYmggVG90ZXlcclxuICogQGF1dGhvciBBcm5hYiBQdXJrYXlhc3RoYVxyXG4gKi9cclxuXHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IENvbG9yaXplZFJlYWRvdXROb2RlIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9qcy9jb21tb24vdmlldy9Db2xvcml6ZWRSZWFkb3V0Tm9kZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBSZWN0YW5nbGUsIFJpY2hUZXh0LCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9WZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IE5MSUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vTkxJQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IG51bWJlckxpbmVJbnRlZ2VycyBmcm9tICcuLi8uLi9udW1iZXJMaW5lSW50ZWdlcnMuanMnO1xyXG5pbXBvcnQgTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncyBmcm9tICcuLi8uLi9OdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzLmpzJztcclxuaW1wb3J0IFRlbXBlcmF0dXJlU2NlbmVNb2RlbCBmcm9tICcuLi9tb2RlbC9UZW1wZXJhdHVyZVNjZW5lTW9kZWwuanMnO1xyXG5pbXBvcnQgTW9udGhzQ29tYm9Cb3ggZnJvbSAnLi9Nb250aHNDb21ib0JveC5qcyc7XHJcbmltcG9ydCBTY2VuZVZpZXcgZnJvbSAnLi9TY2VuZVZpZXcuanMnO1xyXG5pbXBvcnQgVGVtcGVyYXR1cmVNYXBOb2RlIGZyb20gJy4vVGVtcGVyYXR1cmVNYXBOb2RlLmpzJztcclxuaW1wb3J0IFRlbXBlcmF0dXJlUG9pbnRDb250cm9sbGVyTm9kZSBmcm9tICcuL1RlbXBlcmF0dXJlUG9pbnRDb250cm9sbGVyTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTlVNQkVSX0xJTkVfTEFCRUxfRk9OVCA9IG5ldyBQaGV0Rm9udCggeyBzaXplOiAxOCwgd2VpZ2h0OiAnYm9sZCcgfSApO1xyXG5jb25zdCBVTklUU19TRUxFQ1RPUl9MQUJFTF9GT05UID0gbmV3IFBoZXRGb250KCB7IHNpemU6IDE4IH0gKTtcclxuY29uc3QgVU5JVFNfU0VMRUNUT1JfVEVYVF9PUFRJT05TID0ge1xyXG4gIGZvbnQ6IFVOSVRTX1NFTEVDVE9SX0xBQkVMX0ZPTlQsXHJcbiAgbWF4V2lkdGg6IDQwIC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWQgdG8gd29yayB3aXRoIG90aGVyIGFzcGVjdHMgb2YgdGhlIGxheW91dFxyXG59O1xyXG5jb25zdCBOVU1CRVJfTElORV9QQU5FTF9XSURUSCA9IDIwMDsgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxyXG5jb25zdCBOVU1CRVJfTElORV9QQU5FTF9NQVJHSU5TID0gMTA7XHJcbmNvbnN0IE5VTUJFUl9MSU5FX0NPTlRFTlRfV0lEVEggPSBOVU1CRVJfTElORV9QQU5FTF9XSURUSCAtIDIgKiBOVU1CRVJfTElORV9QQU5FTF9NQVJHSU5TO1xyXG5jb25zdCBUSVRMRV9UT19TRUxFQ1RPUl9TUEFDSU5HID0gMTA7XHJcbmNvbnN0IENFTFNJVVNfTlVNQkVSX0xJTkVfSU5ERVggPSBUZW1wZXJhdHVyZVNjZW5lTW9kZWwuQ0VMU0lVU19OVU1CRVJfTElORV9JTkRFWDtcclxuY29uc3QgRkFIUkVOSEVJVF9OVU1CRVJfTElORV9JTkRFWCA9IFRlbXBlcmF0dXJlU2NlbmVNb2RlbC5GQUhSRU5IRUlUX05VTUJFUl9MSU5FX0lOREVYO1xyXG5cclxuY29uc3QgdGVtcGVyYXR1cmVBbW91bnRDZWxzaXVzU3RyaW5nID0gTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy50ZW1wZXJhdHVyZUFtb3VudENlbHNpdXM7XHJcbmNvbnN0IHRlbXBlcmF0dXJlQW1vdW50RmFocmVuaGVpdFN0cmluZyA9IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MudGVtcGVyYXR1cmVBbW91bnRGYWhyZW5oZWl0O1xyXG5jb25zdCB0ZW1wZXJhdHVyZUxhYmVsQ2Vsc2l1c1N0cmluZyA9IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MudGVtcGVyYXR1cmVMYWJlbENlbHNpdXM7XHJcbmNvbnN0IHRlbXBlcmF0dXJlTGFiZWxGYWhyZW5oZWl0U3RyaW5nID0gTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy50ZW1wZXJhdHVyZUxhYmVsRmFocmVuaGVpdDtcclxuY29uc3QgdGVtcGVyYXR1cmVNYXBDYXB0aW9uU3RyaW5nID0gTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy50ZW1wZXJhdHVyZU1hcENhcHRpb247XHJcbmNvbnN0IHRlbXBlcmF0dXJlU3RyaW5nID0gTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy50ZW1wZXJhdHVyZTtcclxuXHJcbmNsYXNzIFRlbXBlcmF0dXJlU2NlbmVWaWV3IGV4dGVuZHMgU2NlbmVWaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUZW1wZXJhdHVyZVNjZW5lTW9kZWx9IHNjZW5lTW9kZWxcclxuICAgKiBAcGFyYW0ge0JvdW5kczJ9IGxheW91dEJvdW5kc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggc2NlbmVNb2RlbCwgbGF5b3V0Qm91bmRzICkge1xyXG5cclxuICAgIHN1cGVyKCBzY2VuZU1vZGVsLCBsYXlvdXRCb3VuZHMsIHtcclxuXHJcbiAgICAgIC8vIG9wdGlvbnMgY29tbW9uIHRvIGJvdGggbnVtYmVyIGxpbmVzXHJcbiAgICAgIGNvbW1vbk51bWJlckxpbmVOb2RlT3B0aW9uczoge1xyXG4gICAgICAgIHRpY2tNYXJrTGFiZWxQb3NpdGlvbldoZW5WZXJ0aWNhbDogJ2xlZnQnLFxyXG4gICAgICAgIHBvaW50Tm9kZU9wdGlvbnM6IHtcclxuICAgICAgICAgIHVzZVBvaW50Q29sb3JGb3JMYWJlbFRleHQ6IGZhbHNlLFxyXG4gICAgICAgICAgY29sb3JpemVMYWJlbEJhY2tncm91bmQ6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBvcHRpb25zIHVuaXF1ZSB0byB0aGUgaW5kaXZpZHVhbCBudW1iZXIgbGluZXMsIG11c3QgYmUgaW4gY29ycmVjdCBvcmRlclxyXG4gICAgICB1bmlxdWVOdW1iZXJMaW5lTm9kZU9wdGlvbnNMaXN0OiBbXHJcbiAgICAgICAgeyBudW1lcmljYWxMYWJlbFRlbXBsYXRlOiB0ZW1wZXJhdHVyZUFtb3VudEZhaHJlbmhlaXRTdHJpbmcgfSxcclxuICAgICAgICB7IG51bWVyaWNhbExhYmVsVGVtcGxhdGU6IHRlbXBlcmF0dXJlQW1vdW50Q2Vsc2l1c1N0cmluZyB9XHJcbiAgICAgIF0sXHJcblxyXG4gICAgICAvLyBEb24ndCBoYXZlIHRoZSBzdXBlciBjb25zdHJ1Y3RvciBhZGQgdGhlIG51bWJlciBsaW5lIG5vZGVzIC0gdGhhdCB3aWxsIGJlIGRvbmUgYmVsb3cuXHJcbiAgICAgIGF1dG9tYXRpY2FsbHlBZGROTE5vZGVzOiBmYWxzZVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFB1dCB0aGUgbnVtYmVyIGxpbmVzIG9uIHRoZWlyIG93biBsYXllciBzbyB0aGF0IHRoZWlyIHBvc2l0aW9uIGNhbiBiZSBlYXNpbHkgYWRqdXN0ZWQuXHJcbiAgICBjb25zdCBudW1iZXJMaW5lc1Jvb3ROb2RlID0gbmV3IE5vZGUoKTtcclxuICAgIGNvbnN0IGZhaHJlbmhlaXROdW1iZXJMaW5lTm9kZSA9IHRoaXMubnVtYmVyTGluZU5vZGVzWyBGQUhSRU5IRUlUX05VTUJFUl9MSU5FX0lOREVYIF07XHJcbiAgICBjb25zdCBjZWxzaXVzTnVtYmVyTGluZU5vZGUgPSB0aGlzLm51bWJlckxpbmVOb2Rlc1sgQ0VMU0lVU19OVU1CRVJfTElORV9JTkRFWCBdO1xyXG4gICAgbnVtYmVyTGluZXNSb290Tm9kZS5hZGRDaGlsZCggZmFocmVuaGVpdE51bWJlckxpbmVOb2RlICk7XHJcbiAgICBudW1iZXJMaW5lc1Jvb3ROb2RlLmFkZENoaWxkKCBjZWxzaXVzTnVtYmVyTGluZU5vZGUgKTtcclxuXHJcbiAgICAvLyBHZXQgbG9jYWwgcmVmZXJlbmNlcyB0byBvdGhlciBpdGVtcyBuZWVkZWQgdG8gbWFuYWdlIHRoZSB0d28gc2VwYXJhdGUgbnVtYmVyIGxpbmVzLlxyXG4gICAgY29uc3QgZmFocmVuaGVpdE51bWJlckxpbmUgPSBzY2VuZU1vZGVsLm51bWJlckxpbmVzWyBGQUhSRU5IRUlUX05VTUJFUl9MSU5FX0lOREVYIF07XHJcbiAgICBjb25zdCBmYWhyZW5oZWl0Q29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveCA9IHRoaXMuY29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveGVzWyBGQUhSRU5IRUlUX05VTUJFUl9MSU5FX0lOREVYIF07XHJcbiAgICBjb25zdCBjZWxzaXVzTnVtYmVyTGluZSA9IHNjZW5lTW9kZWwubnVtYmVyTGluZXNbIENFTFNJVVNfTlVNQkVSX0xJTkVfSU5ERVggXTtcclxuICAgIGNvbnN0IGNlbHNpdXNDb21wYXJpc29uU3RhdGVtZW50QWNjb3JkaW9uQm94ID0gdGhpcy5jb21wYXJpc29uU3RhdGVtZW50QWNjb3JkaW9uQm94ZXNbIENFTFNJVVNfTlVNQkVSX0xJTkVfSU5ERVggXTtcclxuXHJcbiAgICAvLyBub2RlIHdoZXJlIHRoZSBjb250ZW50cyBvZiB0aGUgbnVtYmVyIGxpbmUgcGFuZWwgd2lsbCBiZSBwbGFjZWRcclxuICAgIGNvbnN0IG51bWJlckxpbmVQYW5lbENvbnRlbnQgPSBuZXcgTm9kZSgpO1xyXG4gICAgbnVtYmVyTGluZVBhbmVsQ29udGVudC5hZGRDaGlsZCggbnVtYmVyTGluZXNSb290Tm9kZSApO1xyXG5cclxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBzYW1lIG9wZXJhdG9yIGlzIGJlaW5nIHVzZWQgaW4gYm90aCB0aGUgY2Vsc2l1cyBhbmQgZmFocmVuaGVpdCBjb21wYXJpc29uIHN0YXRlbWVudHMuXHJcbiAgICBjZWxzaXVzQ29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveC5jb21wYXJpc29uU3RhdGVtZW50Tm9kZS5zZWxlY3RlZE9wZXJhdG9yUHJvcGVydHkubGluayggc2VsZWN0ZWRPcGVyYXRvciA9PiB7XHJcbiAgICAgIGZhaHJlbmhlaXRDb21wYXJpc29uU3RhdGVtZW50QWNjb3JkaW9uQm94LmNvbXBhcmlzb25TdGF0ZW1lbnROb2RlLnNlbGVjdGVkT3BlcmF0b3JQcm9wZXJ0eS5zZXQoIHNlbGVjdGVkT3BlcmF0b3IgKTtcclxuICAgIH0gKTtcclxuICAgIGZhaHJlbmhlaXRDb21wYXJpc29uU3RhdGVtZW50QWNjb3JkaW9uQm94LmNvbXBhcmlzb25TdGF0ZW1lbnROb2RlLnNlbGVjdGVkT3BlcmF0b3JQcm9wZXJ0eS5saW5rKCBzZWxlY3RlZE9wZXJhdG9yID0+IHtcclxuICAgICAgY2Vsc2l1c0NvbXBhcmlzb25TdGF0ZW1lbnRBY2NvcmRpb25Cb3guY29tcGFyaXNvblN0YXRlbWVudE5vZGUuc2VsZWN0ZWRPcGVyYXRvclByb3BlcnR5LnNldCggc2VsZWN0ZWRPcGVyYXRvciApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLm1vbnRoc0NvbWJvQm94ID0gbmV3IE1vbnRoc0NvbWJvQm94KCBzY2VuZU1vZGVsLm1vbnRoUHJvcGVydHksIHRoaXMuY29udHJvbHNMYXllciwge1xyXG4gICAgICBsZWZ0OiB0aGlzLmNoZWNrYm94R3JvdXAubGVmdCxcclxuICAgICAgdG9wOiBzY2VuZU1vZGVsLm1hcEJvdW5kcy5taW5ZLFxyXG4gICAgICBidXR0b25Ub3VjaEFyZWFYRGlsYXRpb246IDcsXHJcbiAgICAgIGJ1dHRvblRvdWNoQXJlYVlEaWxhdGlvbjogN1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5jb250cm9sc0xheWVyLmFkZENoaWxkKCB0aGlzLm1vbnRoc0NvbWJvQm94ICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgLSBtYXAgb2YgdGhlIHdvcmxkIHRoYXQgZGVwaWN0cyB0ZW1wZXJhdHVyZSBkYXRhXHJcbiAgICB0aGlzLnRlbXBlcmF0dXJlTWFwID0gbmV3IFRlbXBlcmF0dXJlTWFwTm9kZSggc2NlbmVNb2RlbC5tb250aFByb3BlcnR5LCBzY2VuZU1vZGVsLm1hcEJvdW5kcyApO1xyXG4gICAgdGhpcy50ZW1wZXJhdHVyZU1hcC5jZW50ZXIgPSBzY2VuZU1vZGVsLm1hcEJvdW5kcy5jZW50ZXI7XHJcbiAgICB0aGlzLnNjZW5lc0xheWVyLmFkZENoaWxkKCB0aGlzLnRlbXBlcmF0dXJlTWFwICk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBub2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgYm94IHRoYXQgd2lsbCBob2xkIHRoZSB0aGVybW9tZXRlcnMuXHJcbiAgICBjb25zdCB0aGVybW9tZXRlckJveCA9IFJlY3RhbmdsZS5ib3VuZHMoIHNjZW5lTW9kZWwudGhlcm1vbWV0ZXJCb3hCb3VuZHMsIHtcclxuICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBjb3JuZXJSYWRpdXM6IDZcclxuICAgIH0gKTtcclxuICAgIHRoaXMuc2NlbmVzTGF5ZXIuYWRkQ2hpbGQoIHRoZXJtb21ldGVyQm94ICk7XHJcblxyXG4gICAgLy8gY2FwdGlvbiBmb3IgdGhlIHRlbXBlcmF0dXJlIG1hcFxyXG4gICAgY29uc3QgdGVtcGVyYXR1cmVNYXBDYXB0aW9uID0gbmV3IFJpY2hUZXh0KCB0ZW1wZXJhdHVyZU1hcENhcHRpb25TdHJpbmcsIHtcclxuICAgICAgYWxpZ246ICdjZW50ZXInLFxyXG4gICAgICBjZW50ZXJYOiB0aGlzLnRlbXBlcmF0dXJlTWFwLmNlbnRlclgsXHJcbiAgICAgIHRvcDogdGhpcy50ZW1wZXJhdHVyZU1hcC5ib3R0b20gKyA3LCAvLyBhIGxpdHRsZSBiaXQgdW5kZXIgdGhlIG1hcFxyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDEwICksXHJcbiAgICAgIGZpbGw6ICcjNzA3MDcwJ1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5zY2VuZXNMYXllci5hZGRDaGlsZCggdGVtcGVyYXR1cmVNYXBDYXB0aW9uICk7XHJcblxyXG4gICAgLy8gcmFkaW8gYnV0dG9uIGdyb3VwIGZvciBzZWxlY3RpbmcgdGhlIHRlbXBlcmF0dXJlIHVuaXRzXHJcbiAgICBjb25zdCB0ZW1wZXJhdHVyZVVuaXRzU2VsZWN0b3IgPSBuZXcgVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cChcclxuICAgICAgc2NlbmVNb2RlbC50ZW1wZXJhdHVyZVVuaXRzUHJvcGVydHksXHJcbiAgICAgIFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICB2YWx1ZTogTkxJQ29uc3RhbnRzLlRFTVBFUkFUVVJFX1VOSVRTLkZBSFJFTkhFSVQsXHJcbiAgICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggdGVtcGVyYXR1cmVMYWJlbEZhaHJlbmhlaXRTdHJpbmcsIFVOSVRTX1NFTEVDVE9SX1RFWFRfT1BUSU9OUyApXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB2YWx1ZTogTkxJQ29uc3RhbnRzLlRFTVBFUkFUVVJFX1VOSVRTLkNFTFNJVVMsXHJcbiAgICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggdGVtcGVyYXR1cmVMYWJlbENlbHNpdXNTdHJpbmcsIFVOSVRTX1NFTEVDVE9SX1RFWFRfT1BUSU9OUyApXHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICB7XHJcbiAgICAgICAgLy8gTGltaXQgdGhlIHdpZHRoIHRvIGhhbGYgdGhlIHBhbmVsIGhlaWdodCB0byBoYW5kbGUgbG9uZyBsYWJlbHMgZnJvbSB0cmFuc2xhdGlvbnMgYW5kIHN0cmluZyB0ZXN0cy5cclxuICAgICAgICBtYXhXaWR0aDogKCBOVU1CRVJfTElORV9QQU5FTF9XSURUSCAtIDIgKiBOVU1CRVJfTElORV9QQU5FTF9NQVJHSU5TICkgLyAyLFxyXG5cclxuICAgICAgICAvLyBUaGlzIHNob3VsZCBhcHBlYXIgaW4gdGhlIHVwcGVyIGxlZnQgb2YgdGhlIHBhbmVsLlxyXG4gICAgICAgIHJpZ2h0OiBOVU1CRVJfTElORV9DT05URU5UX1dJRFRILFxyXG4gICAgICAgIHRvcDogMFxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gICAgbnVtYmVyTGluZVBhbmVsQ29udGVudC5hZGRDaGlsZCggdGVtcGVyYXR1cmVVbml0c1NlbGVjdG9yICk7XHJcblxyXG4gICAgLy8gdGl0bGUgZm9yIHRoZSBwYW5lbCB3aGVyZSB0aGUgbnVtYmVyIGxpbmUgd2lsbCBhcHBlYXJcclxuICAgIGNvbnN0IG51bWJlckxpbmVQYW5lbFRpdGxlID0gbmV3IFRleHQoIHRlbXBlcmF0dXJlU3RyaW5nLCB7XHJcbiAgICAgIGZvbnQ6IE5VTUJFUl9MSU5FX0xBQkVMX0ZPTlQsXHJcbiAgICAgIG1heFdpZHRoOiBOVU1CRVJfTElORV9QQU5FTF9XSURUSCAtIHRlbXBlcmF0dXJlVW5pdHNTZWxlY3Rvci53aWR0aCAtIFRJVExFX1RPX1NFTEVDVE9SX1NQQUNJTkcgLVxyXG4gICAgICAgICAgICAgICAgMiAqIE5VTUJFUl9MSU5FX1BBTkVMX01BUkdJTlMsXHJcblxyXG4gICAgICAvLyBUaGlzIHNob3VsZCBiZSBhdCB0aGUgdG9wIG9mIHRoZSBub2RlLCBjZW50ZXJlZCBiZXR3ZWVuIHRoZSBsZWZ0IGVkZ2UgYW5kIHRoZSB1bml0cyBzZWxlY3Rvci5cclxuICAgICAgY2VudGVyWDogKCBOVU1CRVJfTElORV9DT05URU5UX1dJRFRIIC0gdGVtcGVyYXR1cmVVbml0c1NlbGVjdG9yLndpZHRoICkgLyAyLFxyXG4gICAgICB0b3A6IDBcclxuICAgIH0gKTtcclxuICAgIG51bWJlckxpbmVQYW5lbENvbnRlbnQuYWRkQ2hpbGQoIG51bWJlckxpbmVQYW5lbFRpdGxlICk7XHJcblxyXG4gICAgLy8gTWFuYWdlIHRoZSBsYWJlbCB0ZXh0cyBmb3IgZWFjaCB0aGVybW9tZXRlci5cclxuICAgIGNvbnN0IGNlbHNpdXNMYWJlbHNMYXllciA9IG5ldyBOb2RlKCk7XHJcbiAgICBjb25zdCBmYWhyZW5oZWl0TGFiZWxzTGF5ZXIgPSBuZXcgTm9kZSgpO1xyXG4gICAgY29uc3Qgb25BZGRlZE51bWJlckxpbmVQb2ludCA9ICggbnVtYmVyTGluZSwgbGFiZWxzTGF5ZXIsIGFkZGVkTnVtYmVyTGluZVBvaW50ICkgPT4ge1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIHRoZSB0ZXh0dWFsIGxhYmVsLlxyXG4gICAgICBjb25zdCBsYWJlbE5vZGUgPSBuZXcgQ29sb3JpemVkUmVhZG91dE5vZGUoXHJcbiAgICAgICAgbmV3IFByb3BlcnR5KCBhZGRlZE51bWJlckxpbmVQb2ludC5jb250cm9sbGVyLmxhYmVsICksXHJcbiAgICAgICAgYWRkZWROdW1iZXJMaW5lUG9pbnQuY29sb3JQcm9wZXJ0eSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE2ICksXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiAyMCAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkIHRvIHByZXZlbnQgbGF5b3V0IHByb2JsZW1zIHdpdGggbG9uZyBhbmQgUlRMIHN0cmluZ3NcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICAgIGxhYmVsc0xheWVyLmFkZENoaWxkKCBsYWJlbE5vZGUgKTtcclxuXHJcbiAgICAgIGNvbnN0IG51bWJlckxpbmVQb2ludExpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICAgIGxhYmVsTm9kZS5sZWZ0Q2VudGVyID0gYWRkZWROdW1iZXJMaW5lUG9pbnQuZ2V0UG9zaXRpb25Jbk1vZGVsU3BhY2UoKS5wbHVzKCBuZXcgVmVjdG9yMiggMTUsIDAgKSApO1xyXG4gICAgICB9O1xyXG4gICAgICBhZGRlZE51bWJlckxpbmVQb2ludC52YWx1ZVByb3BlcnR5LmxpbmsoIG51bWJlckxpbmVQb2ludExpc3RlbmVyICk7XHJcblxyXG4gICAgICBjb25zdCBkcmFnU3RhdGVDaGFuZ2VIYW5kbGVyID0gZHJhZ2dpbmcgPT4ge1xyXG4gICAgICAgIGlmICggZHJhZ2dpbmcgKSB7XHJcbiAgICAgICAgICBsYWJlbE5vZGUubW92ZVRvRnJvbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIGFkZGVkTnVtYmVyTGluZVBvaW50LmlzRHJhZ2dpbmdQcm9wZXJ0eS5saW5rKCBkcmFnU3RhdGVDaGFuZ2VIYW5kbGVyICk7XHJcblxyXG4gICAgICBjb25zdCByZW1vdmFsTGlzdGVuZXIgPSByZW1vdmVkTnVtYmVyTGluZVBvaW50ID0+IHtcclxuICAgICAgICBpZiAoIHJlbW92ZWROdW1iZXJMaW5lUG9pbnQgIT09IGFkZGVkTnVtYmVyTGluZVBvaW50ICkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBudW1iZXJMaW5lLnJlc2lkZW50UG9pbnRzLnJlbW92ZUl0ZW1SZW1vdmVkTGlzdGVuZXIoIHJlbW92YWxMaXN0ZW5lciApO1xyXG4gICAgICAgIGxhYmVsc0xheWVyLnJlbW92ZUNoaWxkKCBsYWJlbE5vZGUgKTtcclxuICAgICAgICBsYWJlbE5vZGUuZGlzcG9zZSgpO1xyXG4gICAgICAgIGFkZGVkTnVtYmVyTGluZVBvaW50LnZhbHVlUHJvcGVydHkudW5saW5rKCBudW1iZXJMaW5lUG9pbnRMaXN0ZW5lciApO1xyXG4gICAgICB9O1xyXG4gICAgICBudW1iZXJMaW5lLnJlc2lkZW50UG9pbnRzLmFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIoIHJlbW92YWxMaXN0ZW5lciApO1xyXG4gICAgfTtcclxuXHJcbiAgICBjZWxzaXVzTnVtYmVyTGluZS5yZXNpZGVudFBvaW50cy5hZGRJdGVtQWRkZWRMaXN0ZW5lciggYWRkZWRQb2ludCA9PiB7XHJcbiAgICAgIG9uQWRkZWROdW1iZXJMaW5lUG9pbnQoIGNlbHNpdXNOdW1iZXJMaW5lLCBjZWxzaXVzTGFiZWxzTGF5ZXIsIGFkZGVkUG9pbnQgKTtcclxuICAgIH0gKTtcclxuICAgIGZhaHJlbmhlaXROdW1iZXJMaW5lLnJlc2lkZW50UG9pbnRzLmFkZEl0ZW1BZGRlZExpc3RlbmVyKCBhZGRlZFBvaW50ID0+IHtcclxuICAgICAgb25BZGRlZE51bWJlckxpbmVQb2ludCggZmFocmVuaGVpdE51bWJlckxpbmUsIGZhaHJlbmhlaXRMYWJlbHNMYXllciwgYWRkZWRQb2ludCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIG51bWJlckxpbmVzUm9vdE5vZGUuYWRkQ2hpbGQoIGNlbHNpdXNMYWJlbHNMYXllciApO1xyXG4gICAgbnVtYmVyTGluZXNSb290Tm9kZS5hZGRDaGlsZCggZmFocmVuaGVpdExhYmVsc0xheWVyICk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSBudW1iZXIgbGluZSBwb3NpdGlvbiB0byBiZSBmaXhlZCwgcm91Z2hseSBob3Jpem9udGFsbHkgY2VudGVyZWQgaW4gdGhlIHBhbmVsLCBhbmQganVzdCBiZWxvdyB0aGUgaGVhZGVyXHJcbiAgICAvLyBsYWJlbC4gIEl0J3MgaW1wb3J0YW50IHRoYXQgdGhlc2UgYmUgYWJzb2x1dGUgbnVtYmVycyBzbyB0aGF0IHRoZSBsYXlvdXQgb2YgdGhlIHBhbmVsIGRvZXNuJ3QgY2hhbmdlXHJcbiAgICAvLyBkcmFtYXRpY2FsbHkgYXMgdGhlIHN0cmluZyBzaXplcyBjaGFuZ2UgKGUuZy4gaW4gdHJhbnNsYXRpb25zIGFuZCBzdHJpbmcgdGVzdHMpLiAgVGhlIHJpZ2h0IHNpZGUgb2YgdGhlIG51bWJlclxyXG4gICAgLy8gbGluZSBpcyB1c2VkIHRvIHNldCB0aGUgWCBwb3NpdGlvbiBiZWNhdXNlIHRoZXJlIGlzIG5vIHRleHQgdGhlcmUsIHNvIHRoZSBwb3NpdGlvbiB3b24ndCBjaGFuZ2UgaWYgZGlmZmVyZW50XHJcbiAgICAvLyBzaXplIGxhYmVscyBhcmUgcHJlc2VudC5cclxuICAgIG51bWJlckxpbmVzUm9vdE5vZGUudG9wID0gMjU7XHJcbiAgICBudW1iZXJMaW5lc1Jvb3ROb2RlLnJpZ2h0ID0gMTEwO1xyXG5cclxuICAgIGNvbnN0IG51bWJlckxpbmVQYW5lbCA9IG5ldyBQYW5lbChcclxuICAgICAgbnVtYmVyTGluZVBhbmVsQ29udGVudCxcclxuICAgICAge1xyXG4gICAgICAgIGZpbGw6ICdsaWdodGdyYXknLFxyXG4gICAgICAgIHN0cm9rZTogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgcmVzaXplOiBmYWxzZSxcclxuICAgICAgICB4TWFyZ2luOiBOVU1CRVJfTElORV9QQU5FTF9NQVJHSU5TLFxyXG4gICAgICAgIHlNYXJnaW46IE5VTUJFUl9MSU5FX1BBTkVMX01BUkdJTlMsXHJcbiAgICAgICAgY2VudGVyWDogdGhpcy50ZW1wZXJhdHVyZU1hcC5sZWZ0IC8gMiwgLy8gY2VudGVyZWQgYmV0d2VlbiBsZWZ0IGVkZ2Ugb2Ygc2NlbmUgYW5kIGxlZnQgZWRnZSBvZiBtYXBcclxuICAgICAgICBjZW50ZXJZOiB0aGlzLmxheW91dEJvdW5kcy5taW5ZICsgdGhpcy5sYXlvdXRCb3VuZHMubWF4WSAvIDIsIC8vIGNlbnRlcmVkIHZlcnRpY2FsbHkgaW4gdGhlIGxheW91dCBib3VuZHNcclxuICAgICAgICBtaW5XaWR0aDogTlVNQkVSX0xJTkVfUEFORUxfV0lEVEgsXHJcbiAgICAgICAgbWF4V2lkdGg6IE5VTUJFUl9MSU5FX1BBTkVMX1dJRFRIXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgICB0aGlzLm51bWJlckxpbmVzTGF5ZXIuYWRkQ2hpbGQoIG51bWJlckxpbmVQYW5lbCApO1xyXG5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoXHJcbiAgICAgIFsgc2NlbmVNb2RlbC50ZW1wZXJhdHVyZVVuaXRzUHJvcGVydHksIHNjZW5lTW9kZWwuc2hvd051bWJlckxpbmVQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHRlbXBlcmF0dXJlVW5pdHMsIHNob3dOdW1iZXJMaW5lICkgPT4ge1xyXG4gICAgICAgIGNlbHNpdXNOdW1iZXJMaW5lTm9kZS52aXNpYmxlID0gdGVtcGVyYXR1cmVVbml0cyA9PT0gTkxJQ29uc3RhbnRzLlRFTVBFUkFUVVJFX1VOSVRTLkNFTFNJVVM7XHJcbiAgICAgICAgY2Vsc2l1c0NvbXBhcmlzb25TdGF0ZW1lbnRBY2NvcmRpb25Cb3gudmlzaWJsZSA9IGNlbHNpdXNOdW1iZXJMaW5lTm9kZS52aXNpYmxlO1xyXG4gICAgICAgIGNlbHNpdXNMYWJlbHNMYXllci52aXNpYmxlID0gY2Vsc2l1c051bWJlckxpbmVOb2RlLnZpc2libGU7XHJcbiAgICAgICAgZmFocmVuaGVpdE51bWJlckxpbmVOb2RlLnZpc2libGUgPSB0ZW1wZXJhdHVyZVVuaXRzID09PSBOTElDb25zdGFudHMuVEVNUEVSQVRVUkVfVU5JVFMuRkFIUkVOSEVJVDtcclxuICAgICAgICBmYWhyZW5oZWl0Q29tcGFyaXNvblN0YXRlbWVudEFjY29yZGlvbkJveC52aXNpYmxlID0gZmFocmVuaGVpdE51bWJlckxpbmVOb2RlLnZpc2libGU7XHJcbiAgICAgICAgZmFocmVuaGVpdExhYmVsc0xheWVyLnZpc2libGUgPSBmYWhyZW5oZWl0TnVtYmVyTGluZU5vZGUudmlzaWJsZTtcclxuICAgICAgICBudW1iZXJMaW5lUGFuZWwudmlzaWJsZSA9IHNob3dOdW1iZXJMaW5lO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuc2NlbmVzTGF5ZXIuYWRkQ2hpbGQoIG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBzY2VuZU1vZGVsLnBlcm1hbmVudFBvaW50Q29udHJvbGxlcnMubWFwKFxyXG4gICAgICAgIHBvaW50Q29udHJvbGxlciA9PiBuZXcgVGVtcGVyYXR1cmVQb2ludENvbnRyb2xsZXJOb2RlKFxyXG4gICAgICAgICAgcG9pbnRDb250cm9sbGVyLFxyXG4gICAgICAgICAgc2NlbmVNb2RlbC5udW1iZXJMaW5lQWJzb2x1dGVWYWx1ZUluZGljYXRvcnNWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgICAgICBzY2VuZU1vZGVsLnRlbXBlcmF0dXJlVW5pdHNQcm9wZXJ0eVxyXG4gICAgICAgIClcclxuICAgICAgKVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJMaW5lSW50ZWdlcnMucmVnaXN0ZXIoICdUZW1wZXJhdHVyZVNjZW5lVmlldycsIFRlbXBlcmF0dXJlU2Nl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