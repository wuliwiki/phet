// Copyright 2019-2023, University of Colorado Boulder

/**
 * A combo box that can be used to change the month of the year for the map in the Temperature scene
 *
 * @author Arnab Purkayastha
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import ComboBox from '../../../../sun/js/ComboBox.js';
import numberLineIntegers from '../../numberLineIntegers.js';
import NumberLineIntegersStrings from '../../NumberLineIntegersStrings.js';
const januaryString = NumberLineIntegersStrings.january;
const februaryString = NumberLineIntegersStrings.february;
const marchString = NumberLineIntegersStrings.march;
const aprilString = NumberLineIntegersStrings.april;
const mayString = NumberLineIntegersStrings.may;
const juneString = NumberLineIntegersStrings.june;
const julyString = NumberLineIntegersStrings.july;
const augustString = NumberLineIntegersStrings.august;
const septemberString = NumberLineIntegersStrings.september;
const octoberString = NumberLineIntegersStrings.october;
const novemberString = NumberLineIntegersStrings.november;
const decemberString = NumberLineIntegersStrings.december;
const MONTH_STRINGS = [
// These must be in order of occurrence, not sorted alphabetically.
januaryString, februaryString, marchString, aprilString, mayString, juneString, julyString, augustString, septemberString, octoberString, novemberString, decemberString];

// constants
const COMBO_BOX_ITEM_OPTIONS = {
  font: new PhetFont(16),
  maxWidth: 100
};
class MonthsComboBox extends ComboBox {
  /**
   * @param {NumberProperty} monthProperty
   * @param {Node} listParent - node which the ComboBoxListBox will be added
   * @param {Object} [options]
   * @public
   */
  constructor(monthProperty, listParent, options) {
    options = merge({
      xMargin: 13,
      yMargin: 6
    }, options);
    const comboBoxItems = [];
    MONTH_STRINGS.forEach((monthString, index) => {
      comboBoxItems.push({
        value: index + 1,
        createNode: () => new Text(monthString, COMBO_BOX_ITEM_OPTIONS)
      });
    });
    super(monthProperty, comboBoxItems, listParent, options);
  }
}
numberLineIntegers.register('MonthsComboBox', MonthsComboBox);
export default MonthsComboBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiVGV4dCIsIkNvbWJvQm94IiwibnVtYmVyTGluZUludGVnZXJzIiwiTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncyIsImphbnVhcnlTdHJpbmciLCJqYW51YXJ5IiwiZmVicnVhcnlTdHJpbmciLCJmZWJydWFyeSIsIm1hcmNoU3RyaW5nIiwibWFyY2giLCJhcHJpbFN0cmluZyIsImFwcmlsIiwibWF5U3RyaW5nIiwibWF5IiwianVuZVN0cmluZyIsImp1bmUiLCJqdWx5U3RyaW5nIiwianVseSIsImF1Z3VzdFN0cmluZyIsImF1Z3VzdCIsInNlcHRlbWJlclN0cmluZyIsInNlcHRlbWJlciIsIm9jdG9iZXJTdHJpbmciLCJvY3RvYmVyIiwibm92ZW1iZXJTdHJpbmciLCJub3ZlbWJlciIsImRlY2VtYmVyU3RyaW5nIiwiZGVjZW1iZXIiLCJNT05USF9TVFJJTkdTIiwiQ09NQk9fQk9YX0lURU1fT1BUSU9OUyIsImZvbnQiLCJtYXhXaWR0aCIsIk1vbnRoc0NvbWJvQm94IiwiY29uc3RydWN0b3IiLCJtb250aFByb3BlcnR5IiwibGlzdFBhcmVudCIsIm9wdGlvbnMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImNvbWJvQm94SXRlbXMiLCJmb3JFYWNoIiwibW9udGhTdHJpbmciLCJpbmRleCIsInB1c2giLCJ2YWx1ZSIsImNyZWF0ZU5vZGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1vbnRoc0NvbWJvQm94LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgY29tYm8gYm94IHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hhbmdlIHRoZSBtb250aCBvZiB0aGUgeWVhciBmb3IgdGhlIG1hcCBpbiB0aGUgVGVtcGVyYXR1cmUgc2NlbmVcclxuICpcclxuICogQGF1dGhvciBBcm5hYiBQdXJrYXlhc3RoYVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDb21ib0JveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ29tYm9Cb3guanMnO1xyXG5pbXBvcnQgbnVtYmVyTGluZUludGVnZXJzIGZyb20gJy4uLy4uL251bWJlckxpbmVJbnRlZ2Vycy5qcyc7XHJcbmltcG9ydCBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzIGZyb20gJy4uLy4uL051bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MuanMnO1xyXG5cclxuY29uc3QgamFudWFyeVN0cmluZyA9IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MuamFudWFyeTtcclxuY29uc3QgZmVicnVhcnlTdHJpbmcgPSBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzLmZlYnJ1YXJ5O1xyXG5jb25zdCBtYXJjaFN0cmluZyA9IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MubWFyY2g7XHJcbmNvbnN0IGFwcmlsU3RyaW5nID0gTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy5hcHJpbDtcclxuY29uc3QgbWF5U3RyaW5nID0gTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncy5tYXk7XHJcbmNvbnN0IGp1bmVTdHJpbmcgPSBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzLmp1bmU7XHJcbmNvbnN0IGp1bHlTdHJpbmcgPSBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzLmp1bHk7XHJcbmNvbnN0IGF1Z3VzdFN0cmluZyA9IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MuYXVndXN0O1xyXG5jb25zdCBzZXB0ZW1iZXJTdHJpbmcgPSBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzLnNlcHRlbWJlcjtcclxuY29uc3Qgb2N0b2JlclN0cmluZyA9IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3Mub2N0b2JlcjtcclxuY29uc3Qgbm92ZW1iZXJTdHJpbmcgPSBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzLm5vdmVtYmVyO1xyXG5jb25zdCBkZWNlbWJlclN0cmluZyA9IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MuZGVjZW1iZXI7XHJcblxyXG5jb25zdCBNT05USF9TVFJJTkdTID0gW1xyXG5cclxuICAvLyBUaGVzZSBtdXN0IGJlIGluIG9yZGVyIG9mIG9jY3VycmVuY2UsIG5vdCBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkuXHJcbiAgamFudWFyeVN0cmluZyxcclxuICBmZWJydWFyeVN0cmluZyxcclxuICBtYXJjaFN0cmluZyxcclxuICBhcHJpbFN0cmluZyxcclxuICBtYXlTdHJpbmcsXHJcbiAganVuZVN0cmluZyxcclxuICBqdWx5U3RyaW5nLFxyXG4gIGF1Z3VzdFN0cmluZyxcclxuICBzZXB0ZW1iZXJTdHJpbmcsXHJcbiAgb2N0b2JlclN0cmluZyxcclxuICBub3ZlbWJlclN0cmluZyxcclxuICBkZWNlbWJlclN0cmluZ1xyXG5dO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IENPTUJPX0JPWF9JVEVNX09QVElPTlMgPSB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMTYgKSwgbWF4V2lkdGg6IDEwMCB9O1xyXG5cclxuY2xhc3MgTW9udGhzQ29tYm9Cb3ggZXh0ZW5kcyBDb21ib0JveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyUHJvcGVydHl9IG1vbnRoUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge05vZGV9IGxpc3RQYXJlbnQgLSBub2RlIHdoaWNoIHRoZSBDb21ib0JveExpc3RCb3ggd2lsbCBiZSBhZGRlZFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vbnRoUHJvcGVydHksIGxpc3RQYXJlbnQsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHhNYXJnaW46IDEzLFxyXG4gICAgICB5TWFyZ2luOiA2XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgY29tYm9Cb3hJdGVtcyA9IFtdO1xyXG4gICAgTU9OVEhfU1RSSU5HUy5mb3JFYWNoKCAoIG1vbnRoU3RyaW5nLCBpbmRleCApID0+IHtcclxuICAgICAgY29tYm9Cb3hJdGVtcy5wdXNoKCB7XHJcbiAgICAgICAgdmFsdWU6IGluZGV4ICsgMSxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggbW9udGhTdHJpbmcsIENPTUJPX0JPWF9JVEVNX09QVElPTlMgKVxyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIG1vbnRoUHJvcGVydHksIGNvbWJvQm94SXRlbXMsIGxpc3RQYXJlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlckxpbmVJbnRlZ2Vycy5yZWdpc3RlciggJ01vbnRoc0NvbWJvQm94JywgTW9udGhzQ29tYm9Cb3ggKTtcclxuZXhwb3J0IGRlZmF1bHQgTW9udGhzQ29tYm9Cb3g7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLFFBQVEsTUFBTSxnQ0FBZ0M7QUFDckQsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLHlCQUF5QixNQUFNLG9DQUFvQztBQUUxRSxNQUFNQyxhQUFhLEdBQUdELHlCQUF5QixDQUFDRSxPQUFPO0FBQ3ZELE1BQU1DLGNBQWMsR0FBR0gseUJBQXlCLENBQUNJLFFBQVE7QUFDekQsTUFBTUMsV0FBVyxHQUFHTCx5QkFBeUIsQ0FBQ00sS0FBSztBQUNuRCxNQUFNQyxXQUFXLEdBQUdQLHlCQUF5QixDQUFDUSxLQUFLO0FBQ25ELE1BQU1DLFNBQVMsR0FBR1QseUJBQXlCLENBQUNVLEdBQUc7QUFDL0MsTUFBTUMsVUFBVSxHQUFHWCx5QkFBeUIsQ0FBQ1ksSUFBSTtBQUNqRCxNQUFNQyxVQUFVLEdBQUdiLHlCQUF5QixDQUFDYyxJQUFJO0FBQ2pELE1BQU1DLFlBQVksR0FBR2YseUJBQXlCLENBQUNnQixNQUFNO0FBQ3JELE1BQU1DLGVBQWUsR0FBR2pCLHlCQUF5QixDQUFDa0IsU0FBUztBQUMzRCxNQUFNQyxhQUFhLEdBQUduQix5QkFBeUIsQ0FBQ29CLE9BQU87QUFDdkQsTUFBTUMsY0FBYyxHQUFHckIseUJBQXlCLENBQUNzQixRQUFRO0FBQ3pELE1BQU1DLGNBQWMsR0FBR3ZCLHlCQUF5QixDQUFDd0IsUUFBUTtBQUV6RCxNQUFNQyxhQUFhLEdBQUc7QUFFcEI7QUFDQXhCLGFBQWEsRUFDYkUsY0FBYyxFQUNkRSxXQUFXLEVBQ1hFLFdBQVcsRUFDWEUsU0FBUyxFQUNURSxVQUFVLEVBQ1ZFLFVBQVUsRUFDVkUsWUFBWSxFQUNaRSxlQUFlLEVBQ2ZFLGFBQWEsRUFDYkUsY0FBYyxFQUNkRSxjQUFjLENBQ2Y7O0FBRUQ7QUFDQSxNQUFNRyxzQkFBc0IsR0FBRztFQUFFQyxJQUFJLEVBQUUsSUFBSS9CLFFBQVEsQ0FBRSxFQUFHLENBQUM7RUFBRWdDLFFBQVEsRUFBRTtBQUFJLENBQUM7QUFFMUUsTUFBTUMsY0FBYyxTQUFTL0IsUUFBUSxDQUFDO0VBRXBDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFZ0MsV0FBV0EsQ0FBRUMsYUFBYSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRztJQUVoREEsT0FBTyxHQUFHdEMsS0FBSyxDQUFFO01BQ2Z1QyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLE1BQU1HLGFBQWEsR0FBRyxFQUFFO0lBQ3hCWCxhQUFhLENBQUNZLE9BQU8sQ0FBRSxDQUFFQyxXQUFXLEVBQUVDLEtBQUssS0FBTTtNQUMvQ0gsYUFBYSxDQUFDSSxJQUFJLENBQUU7UUFDbEJDLEtBQUssRUFBRUYsS0FBSyxHQUFHLENBQUM7UUFDaEJHLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUk3QyxJQUFJLENBQUV5QyxXQUFXLEVBQUVaLHNCQUF1QjtNQUNsRSxDQUFFLENBQUM7SUFDTCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVLLGFBQWEsRUFBRUssYUFBYSxFQUFFSixVQUFVLEVBQUVDLE9BQVEsQ0FBQztFQUM1RDtBQUNGO0FBRUFsQyxrQkFBa0IsQ0FBQzRDLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWQsY0FBZSxDQUFDO0FBQy9ELGVBQWVBLGNBQWMifQ==