// Copyright 2019-2022, University of Colorado Boulder

/**
 * A node that represents the temperature scene's map image
 *
 * @author Arnab Purkayastha
 */

import { Image, Node } from '../../../../scenery/js/imports.js';
import worldTemperaturesMonthlyAveragedApr2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedApr2018_jpg.js';
import worldTemperaturesMonthlyAveragedAug2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedAug2018_jpg.js';
import worldTemperaturesMonthlyAveragedDec2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedDec2018_jpg.js';
import worldTemperaturesMonthlyAveragedFeb2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedFeb2018_jpg.js';
import worldTemperaturesMonthlyAveragedJan2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedJan2018_jpg.js';
import worldTemperaturesMonthlyAveragedJul2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedJul2018_jpg.js';
import worldTemperaturesMonthlyAveragedJun2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedJun2018_jpg.js';
import worldTemperaturesMonthlyAveragedMar2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedMar2018_jpg.js';
import worldTemperaturesMonthlyAveragedMay2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedMay2018_jpg.js';
import worldTemperaturesMonthlyAveragedNov2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedNov2018_jpg.js';
import worldTemperaturesMonthlyAveragedOct2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedOct2018_jpg.js';
import worldTemperaturesMonthlyAveragedSep2018_jpg from '../../../images/worldTemperaturesMonthlyAveragedSep2018_jpg.js';
import numberLineIntegers from '../../numberLineIntegers.js';

// constants
const TEMPERATURE_IMAGES_MONTHS = [worldTemperaturesMonthlyAveragedJan2018_jpg, worldTemperaturesMonthlyAveragedFeb2018_jpg, worldTemperaturesMonthlyAveragedMar2018_jpg, worldTemperaturesMonthlyAveragedApr2018_jpg, worldTemperaturesMonthlyAveragedMay2018_jpg, worldTemperaturesMonthlyAveragedJun2018_jpg, worldTemperaturesMonthlyAveragedJul2018_jpg, worldTemperaturesMonthlyAveragedAug2018_jpg, worldTemperaturesMonthlyAveragedSep2018_jpg, worldTemperaturesMonthlyAveragedOct2018_jpg, worldTemperaturesMonthlyAveragedNov2018_jpg, worldTemperaturesMonthlyAveragedDec2018_jpg];
class TemperatureMapNode extends Node {
  /**
   * @param {NumberProperty} monthProperty
   * @param {Bounds2} mapBounds
   * @public
   */
  constructor(monthProperty, mapBounds) {
    super();

    // @private
    this.mapBounds = mapBounds;
    let lastMonth = 1;
    const images = _.map(TEMPERATURE_IMAGES_MONTHS, image => {
      const imageNode = new Image(image, {
        visible: false
      });
      imageNode.scale(this.mapBounds.width / imageNode.width, this.mapBounds.height / imageNode.height);
      this.addChild(imageNode);
      return imageNode;
    });
    monthProperty.link(month => {
      images[lastMonth - 1].visible = false;
      images[month - 1].visible = true;
      lastMonth = month;
    });
  }
}
numberLineIntegers.register('TemperatureMapNode', TemperatureMapNode);
export default TemperatureMapNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZSIsIk5vZGUiLCJ3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEFwcjIwMThfanBnIiwid29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRBdWcyMDE4X2pwZyIsIndvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkRGVjMjAxOF9qcGciLCJ3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEZlYjIwMThfanBnIiwid29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRKYW4yMDE4X2pwZyIsIndvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkSnVsMjAxOF9qcGciLCJ3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEp1bjIwMThfanBnIiwid29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRNYXIyMDE4X2pwZyIsIndvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkTWF5MjAxOF9qcGciLCJ3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZE5vdjIwMThfanBnIiwid29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRPY3QyMDE4X2pwZyIsIndvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkU2VwMjAxOF9qcGciLCJudW1iZXJMaW5lSW50ZWdlcnMiLCJURU1QRVJBVFVSRV9JTUFHRVNfTU9OVEhTIiwiVGVtcGVyYXR1cmVNYXBOb2RlIiwiY29uc3RydWN0b3IiLCJtb250aFByb3BlcnR5IiwibWFwQm91bmRzIiwibGFzdE1vbnRoIiwiaW1hZ2VzIiwiXyIsIm1hcCIsImltYWdlIiwiaW1hZ2VOb2RlIiwidmlzaWJsZSIsInNjYWxlIiwid2lkdGgiLCJoZWlnaHQiLCJhZGRDaGlsZCIsImxpbmsiLCJtb250aCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGVtcGVyYXR1cmVNYXBOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgbm9kZSB0aGF0IHJlcHJlc2VudHMgdGhlIHRlbXBlcmF0dXJlIHNjZW5lJ3MgbWFwIGltYWdlXHJcbiAqXHJcbiAqIEBhdXRob3IgQXJuYWIgUHVya2F5YXN0aGFcclxuICovXHJcblxyXG5pbXBvcnQgeyBJbWFnZSwgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEFwcjIwMThfanBnIGZyb20gJy4uLy4uLy4uL2ltYWdlcy93b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEFwcjIwMThfanBnLmpzJztcclxuaW1wb3J0IHdvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkQXVnMjAxOF9qcGcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3dvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkQXVnMjAxOF9qcGcuanMnO1xyXG5pbXBvcnQgd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWREZWMyMDE4X2pwZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWREZWMyMDE4X2pwZy5qcyc7XHJcbmltcG9ydCB3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEZlYjIwMThfanBnIGZyb20gJy4uLy4uLy4uL2ltYWdlcy93b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEZlYjIwMThfanBnLmpzJztcclxuaW1wb3J0IHdvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkSmFuMjAxOF9qcGcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3dvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkSmFuMjAxOF9qcGcuanMnO1xyXG5pbXBvcnQgd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRKdWwyMDE4X2pwZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRKdWwyMDE4X2pwZy5qcyc7XHJcbmltcG9ydCB3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEp1bjIwMThfanBnIGZyb20gJy4uLy4uLy4uL2ltYWdlcy93b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEp1bjIwMThfanBnLmpzJztcclxuaW1wb3J0IHdvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkTWFyMjAxOF9qcGcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3dvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkTWFyMjAxOF9qcGcuanMnO1xyXG5pbXBvcnQgd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRNYXkyMDE4X2pwZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRNYXkyMDE4X2pwZy5qcyc7XHJcbmltcG9ydCB3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZE5vdjIwMThfanBnIGZyb20gJy4uLy4uLy4uL2ltYWdlcy93b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZE5vdjIwMThfanBnLmpzJztcclxuaW1wb3J0IHdvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkT2N0MjAxOF9qcGcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3dvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkT2N0MjAxOF9qcGcuanMnO1xyXG5pbXBvcnQgd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRTZXAyMDE4X2pwZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRTZXAyMDE4X2pwZy5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lSW50ZWdlcnMgZnJvbSAnLi4vLi4vbnVtYmVyTGluZUludGVnZXJzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBURU1QRVJBVFVSRV9JTUFHRVNfTU9OVEhTID0gW1xyXG4gIHdvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkSmFuMjAxOF9qcGcsXHJcbiAgd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRGZWIyMDE4X2pwZyxcclxuICB3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZE1hcjIwMThfanBnLFxyXG4gIHdvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkQXByMjAxOF9qcGcsXHJcbiAgd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRNYXkyMDE4X2pwZyxcclxuICB3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZEp1bjIwMThfanBnLFxyXG4gIHdvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkSnVsMjAxOF9qcGcsXHJcbiAgd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWRBdWcyMDE4X2pwZyxcclxuICB3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZFNlcDIwMThfanBnLFxyXG4gIHdvcmxkVGVtcGVyYXR1cmVzTW9udGhseUF2ZXJhZ2VkT2N0MjAxOF9qcGcsXHJcbiAgd29ybGRUZW1wZXJhdHVyZXNNb250aGx5QXZlcmFnZWROb3YyMDE4X2pwZyxcclxuICB3b3JsZFRlbXBlcmF0dXJlc01vbnRobHlBdmVyYWdlZERlYzIwMThfanBnXHJcbl07XHJcblxyXG5jbGFzcyBUZW1wZXJhdHVyZU1hcE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtOdW1iZXJQcm9wZXJ0eX0gbW9udGhQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7Qm91bmRzMn0gbWFwQm91bmRzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb250aFByb3BlcnR5LCBtYXBCb3VuZHMgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLm1hcEJvdW5kcyA9IG1hcEJvdW5kcztcclxuXHJcbiAgICBsZXQgbGFzdE1vbnRoID0gMTtcclxuXHJcbiAgICBjb25zdCBpbWFnZXMgPSBfLm1hcCggVEVNUEVSQVRVUkVfSU1BR0VTX01PTlRIUywgaW1hZ2UgPT4ge1xyXG4gICAgICBjb25zdCBpbWFnZU5vZGUgPSBuZXcgSW1hZ2UoIGltYWdlLCB7IHZpc2libGU6IGZhbHNlIH0gKTtcclxuICAgICAgaW1hZ2VOb2RlLnNjYWxlKFxyXG4gICAgICAgIHRoaXMubWFwQm91bmRzLndpZHRoIC8gaW1hZ2VOb2RlLndpZHRoLFxyXG4gICAgICAgIHRoaXMubWFwQm91bmRzLmhlaWdodCAvIGltYWdlTm9kZS5oZWlnaHRcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5hZGRDaGlsZCggaW1hZ2VOb2RlICk7XHJcbiAgICAgIHJldHVybiBpbWFnZU5vZGU7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgbW9udGhQcm9wZXJ0eS5saW5rKCBtb250aCA9PiB7XHJcbiAgICAgIGltYWdlc1sgbGFzdE1vbnRoIC0gMSBdLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgaW1hZ2VzWyBtb250aCAtIDEgXS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgbGFzdE1vbnRoID0gbW9udGg7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJMaW5lSW50ZWdlcnMucmVnaXN0ZXIoICdUZW1wZXJhdHVyZU1hcE5vZGUnLCBUZW1wZXJhdHVyZU1hcE5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgVGVtcGVyYXR1cmVNYXBOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDL0QsT0FBT0MsMkNBQTJDLE1BQU0sZ0VBQWdFO0FBQ3hILE9BQU9DLDJDQUEyQyxNQUFNLGdFQUFnRTtBQUN4SCxPQUFPQywyQ0FBMkMsTUFBTSxnRUFBZ0U7QUFDeEgsT0FBT0MsMkNBQTJDLE1BQU0sZ0VBQWdFO0FBQ3hILE9BQU9DLDJDQUEyQyxNQUFNLGdFQUFnRTtBQUN4SCxPQUFPQywyQ0FBMkMsTUFBTSxnRUFBZ0U7QUFDeEgsT0FBT0MsMkNBQTJDLE1BQU0sZ0VBQWdFO0FBQ3hILE9BQU9DLDJDQUEyQyxNQUFNLGdFQUFnRTtBQUN4SCxPQUFPQywyQ0FBMkMsTUFBTSxnRUFBZ0U7QUFDeEgsT0FBT0MsMkNBQTJDLE1BQU0sZ0VBQWdFO0FBQ3hILE9BQU9DLDJDQUEyQyxNQUFNLGdFQUFnRTtBQUN4SCxPQUFPQywyQ0FBMkMsTUFBTSxnRUFBZ0U7QUFDeEgsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCOztBQUU1RDtBQUNBLE1BQU1DLHlCQUF5QixHQUFHLENBQ2hDVCwyQ0FBMkMsRUFDM0NELDJDQUEyQyxFQUMzQ0ksMkNBQTJDLEVBQzNDUCwyQ0FBMkMsRUFDM0NRLDJDQUEyQyxFQUMzQ0YsMkNBQTJDLEVBQzNDRCwyQ0FBMkMsRUFDM0NKLDJDQUEyQyxFQUMzQ1UsMkNBQTJDLEVBQzNDRCwyQ0FBMkMsRUFDM0NELDJDQUEyQyxFQUMzQ1AsMkNBQTJDLENBQzVDO0FBRUQsTUFBTVksa0JBQWtCLFNBQVNmLElBQUksQ0FBQztFQUVwQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VnQixXQUFXQSxDQUFFQyxhQUFhLEVBQUVDLFNBQVMsRUFBRztJQUN0QyxLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBLElBQUksQ0FBQ0EsU0FBUyxHQUFHQSxTQUFTO0lBRTFCLElBQUlDLFNBQVMsR0FBRyxDQUFDO0lBRWpCLE1BQU1DLE1BQU0sR0FBR0MsQ0FBQyxDQUFDQyxHQUFHLENBQUVSLHlCQUF5QixFQUFFUyxLQUFLLElBQUk7TUFDeEQsTUFBTUMsU0FBUyxHQUFHLElBQUl6QixLQUFLLENBQUV3QixLQUFLLEVBQUU7UUFBRUUsT0FBTyxFQUFFO01BQU0sQ0FBRSxDQUFDO01BQ3hERCxTQUFTLENBQUNFLEtBQUssQ0FDYixJQUFJLENBQUNSLFNBQVMsQ0FBQ1MsS0FBSyxHQUFHSCxTQUFTLENBQUNHLEtBQUssRUFDdEMsSUFBSSxDQUFDVCxTQUFTLENBQUNVLE1BQU0sR0FBR0osU0FBUyxDQUFDSSxNQUNwQyxDQUFDO01BQ0QsSUFBSSxDQUFDQyxRQUFRLENBQUVMLFNBQVUsQ0FBQztNQUMxQixPQUFPQSxTQUFTO0lBQ2xCLENBQUUsQ0FBQztJQUVIUCxhQUFhLENBQUNhLElBQUksQ0FBRUMsS0FBSyxJQUFJO01BQzNCWCxNQUFNLENBQUVELFNBQVMsR0FBRyxDQUFDLENBQUUsQ0FBQ00sT0FBTyxHQUFHLEtBQUs7TUFDdkNMLE1BQU0sQ0FBRVcsS0FBSyxHQUFHLENBQUMsQ0FBRSxDQUFDTixPQUFPLEdBQUcsSUFBSTtNQUNsQ04sU0FBUyxHQUFHWSxLQUFLO0lBQ25CLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWxCLGtCQUFrQixDQUFDbUIsUUFBUSxDQUFFLG9CQUFvQixFQUFFakIsa0JBQW1CLENBQUM7QUFDdkUsZUFBZUEsa0JBQWtCIn0=