// Copyright 2019-2022, University of Colorado Boulder

/**
 * AccountBalanceControllerNode is a Scenery node that is used to add and remove money from a property that represents
 * a bank account balance.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import Emitter from '../../../../axon/js/Emitter.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Color, Image, Node, Text, VBox } from '../../../../scenery/js/imports.js';
import RoundPushButton from '../../../../sun/js/buttons/RoundPushButton.js';
import coinInHand_png from '../../../images/coinInHand_png.js';
import coinInSlot_png from '../../../images/coinInSlot_png.js';
import numberLineIntegers from '../../numberLineIntegers.js';
import NumberLineIntegersStrings from '../../NumberLineIntegersStrings.js';

// constants
const MARGIN = 10;
const BUTTON_OPTIONS = {
  xMargin: MARGIN,
  yMargin: MARGIN,
  fireOnHold: true,
  fireOnHoldDelay: 400,
  fireOnHoldInterval: 30
};
const CURRENCY_SYMBOL_FONT = new PhetFont(12);
const CURRENCY_SYMBOL_MAX_WIDTH = 10;
const BUTTON_ICON_WIDTH = 38;
const currencyUnitsString = NumberLineIntegersStrings.currencyUnits;
class AccountBalanceControllerNode extends VBox {
  /**
   * @param {NumberProperty} balanceProperty
   * @param {Emitter} balanceChangedByButtonEmitter
   * @param {Range} range
   * @param {number} changeAmount
   * @param {Object} [options]
   * @public
   */
  constructor(balanceProperty, balanceChangedByButtonEmitter, range, changeAmount, options) {
    options = merge({}, {
      buttonBaseColor: Color.blue
    }, options);

    // Closure for making changes to the balance.
    const changeBalance = balanceChangeAmount => {
      if (balanceChangeAmount > 0 && balanceProperty.value < range.max || balanceChangeAmount < 0 && balanceProperty.value > range.min) {
        balanceProperty.value += balanceChangeAmount;
        balanceChangedByButtonEmitter.emit(balanceChangeAmount);
      }
    };

    // Create the icons that will be used in the buttons.  Sizes and positions were empirically determined.
    const depositIcon = new Node({
      children: [new Image(coinInSlot_png, {
        maxWidth: BUTTON_ICON_WIDTH,
        centerY: -10
      }), new Text(currencyUnitsString, {
        center: new Vector2(21, -9),
        font: CURRENCY_SYMBOL_FONT,
        maxWidth: CURRENCY_SYMBOL_MAX_WIDTH
      })]
    });
    const withdrawIcon = new Node({
      children: [new Image(coinInHand_png, {
        maxWidth: BUTTON_ICON_WIDTH
      }), new Text(currencyUnitsString, {
        center: new Vector2(22, 9),
        font: CURRENCY_SYMBOL_FONT,
        maxWidth: CURRENCY_SYMBOL_MAX_WIDTH
      })]
    });

    // Create the buttons that the user can use to add and remove money.
    const upButton = new RoundPushButton(merge({
      content: depositIcon,
      baseColor: options.buttonBaseColor,
      listener: () => {
        changeBalance(changeAmount);
      }
    }, BUTTON_OPTIONS));
    const downButton = new RoundPushButton(merge({
      content: withdrawIcon,
      baseColor: options.buttonBaseColor,
      listener: () => {
        changeBalance(-changeAmount);
      }
    }, BUTTON_OPTIONS));

    // Control the enabled states of the buttons.
    balanceProperty.link(balance => {
      upButton.enabled = balance < range.max;
      downButton.enabled = balance > range.min;
    });
    options = merge({
      children: [upButton, downButton],
      spacing: 15
    }, options);
    super(options);

    // @public (read-only) - emitter that fires when either button is released
    this.buttonReleasedEmitter = new Emitter();

    // Monitor the downProperty for each button, locking out the other button and performing emits when released.
    upButton.buttonModel.downProperty.lazyLink(down => {
      if (down) {
        // To prevent multi-touch issues, don't let the other button be pushed while this one is down.
        downButton.pickable = false;
      } else {
        // The button has been released, trigger the emitter.
        this.buttonReleasedEmitter.emit();

        // Restore pickability of peer button.
        downButton.pickable = true;
      }
    });
    downButton.buttonModel.downProperty.lazyLink(down => {
      if (down) {
        // To prevent multi-touch issues, don't let the other button be pushed while this one is down.
        upButton.pickable = false;
      } else {
        // The button has been released, trigger the emitter.
        this.buttonReleasedEmitter.emit();

        // Restore pickability of peer button.
        upButton.pickable = true;
      }
    });
  }
}
numberLineIntegers.register('AccountBalanceControllerNode', AccountBalanceControllerNode);
export default AccountBalanceControllerNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiVmVjdG9yMiIsIm1lcmdlIiwiUGhldEZvbnQiLCJDb2xvciIsIkltYWdlIiwiTm9kZSIsIlRleHQiLCJWQm94IiwiUm91bmRQdXNoQnV0dG9uIiwiY29pbkluSGFuZF9wbmciLCJjb2luSW5TbG90X3BuZyIsIm51bWJlckxpbmVJbnRlZ2VycyIsIk51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MiLCJNQVJHSU4iLCJCVVRUT05fT1BUSU9OUyIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiZmlyZU9uSG9sZCIsImZpcmVPbkhvbGREZWxheSIsImZpcmVPbkhvbGRJbnRlcnZhbCIsIkNVUlJFTkNZX1NZTUJPTF9GT05UIiwiQ1VSUkVOQ1lfU1lNQk9MX01BWF9XSURUSCIsIkJVVFRPTl9JQ09OX1dJRFRIIiwiY3VycmVuY3lVbml0c1N0cmluZyIsImN1cnJlbmN5VW5pdHMiLCJBY2NvdW50QmFsYW5jZUNvbnRyb2xsZXJOb2RlIiwiY29uc3RydWN0b3IiLCJiYWxhbmNlUHJvcGVydHkiLCJiYWxhbmNlQ2hhbmdlZEJ5QnV0dG9uRW1pdHRlciIsInJhbmdlIiwiY2hhbmdlQW1vdW50Iiwib3B0aW9ucyIsImJ1dHRvbkJhc2VDb2xvciIsImJsdWUiLCJjaGFuZ2VCYWxhbmNlIiwiYmFsYW5jZUNoYW5nZUFtb3VudCIsInZhbHVlIiwibWF4IiwibWluIiwiZW1pdCIsImRlcG9zaXRJY29uIiwiY2hpbGRyZW4iLCJtYXhXaWR0aCIsImNlbnRlclkiLCJjZW50ZXIiLCJmb250Iiwid2l0aGRyYXdJY29uIiwidXBCdXR0b24iLCJjb250ZW50IiwiYmFzZUNvbG9yIiwibGlzdGVuZXIiLCJkb3duQnV0dG9uIiwibGluayIsImJhbGFuY2UiLCJlbmFibGVkIiwic3BhY2luZyIsImJ1dHRvblJlbGVhc2VkRW1pdHRlciIsImJ1dHRvbk1vZGVsIiwiZG93blByb3BlcnR5IiwibGF6eUxpbmsiLCJkb3duIiwicGlja2FibGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkFjY291bnRCYWxhbmNlQ29udHJvbGxlck5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQWNjb3VudEJhbGFuY2VDb250cm9sbGVyTm9kZSBpcyBhIFNjZW5lcnkgbm9kZSB0aGF0IGlzIHVzZWQgdG8gYWRkIGFuZCByZW1vdmUgbW9uZXkgZnJvbSBhIHByb3BlcnR5IHRoYXQgcmVwcmVzZW50c1xyXG4gKiBhIGJhbmsgYWNjb3VudCBiYWxhbmNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW1pdHRlci5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgSW1hZ2UsIE5vZGUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUm91bmRQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JvdW5kUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBjb2luSW5IYW5kX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY29pbkluSGFuZF9wbmcuanMnO1xyXG5pbXBvcnQgY29pbkluU2xvdF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2NvaW5JblNsb3RfcG5nLmpzJztcclxuaW1wb3J0IG51bWJlckxpbmVJbnRlZ2VycyBmcm9tICcuLi8uLi9udW1iZXJMaW5lSW50ZWdlcnMuanMnO1xyXG5pbXBvcnQgTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncyBmcm9tICcuLi8uLi9OdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBNQVJHSU4gPSAxMDtcclxuY29uc3QgQlVUVE9OX09QVElPTlMgPSB7XHJcbiAgeE1hcmdpbjogTUFSR0lOLFxyXG4gIHlNYXJnaW46IE1BUkdJTixcclxuICBmaXJlT25Ib2xkOiB0cnVlLFxyXG4gIGZpcmVPbkhvbGREZWxheTogNDAwLFxyXG4gIGZpcmVPbkhvbGRJbnRlcnZhbDogMzBcclxufTtcclxuY29uc3QgQ1VSUkVOQ1lfU1lNQk9MX0ZPTlQgPSBuZXcgUGhldEZvbnQoIDEyICk7XHJcbmNvbnN0IENVUlJFTkNZX1NZTUJPTF9NQVhfV0lEVEggPSAxMDtcclxuY29uc3QgQlVUVE9OX0lDT05fV0lEVEggPSAzODtcclxuXHJcbmNvbnN0IGN1cnJlbmN5VW5pdHNTdHJpbmcgPSBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzLmN1cnJlbmN5VW5pdHM7XHJcblxyXG5cclxuY2xhc3MgQWNjb3VudEJhbGFuY2VDb250cm9sbGVyTm9kZSBleHRlbmRzIFZCb3gge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge051bWJlclByb3BlcnR5fSBiYWxhbmNlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge0VtaXR0ZXJ9IGJhbGFuY2VDaGFuZ2VkQnlCdXR0b25FbWl0dGVyXHJcbiAgICogQHBhcmFtIHtSYW5nZX0gcmFuZ2VcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbmdlQW1vdW50XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYmFsYW5jZVByb3BlcnR5LCBiYWxhbmNlQ2hhbmdlZEJ5QnV0dG9uRW1pdHRlciwgcmFuZ2UsIGNoYW5nZUFtb3VudCwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCB7IGJ1dHRvbkJhc2VDb2xvcjogQ29sb3IuYmx1ZSB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQ2xvc3VyZSBmb3IgbWFraW5nIGNoYW5nZXMgdG8gdGhlIGJhbGFuY2UuXHJcbiAgICBjb25zdCBjaGFuZ2VCYWxhbmNlID0gYmFsYW5jZUNoYW5nZUFtb3VudCA9PiB7XHJcbiAgICAgIGlmICggKCBiYWxhbmNlQ2hhbmdlQW1vdW50ID4gMCAmJiBiYWxhbmNlUHJvcGVydHkudmFsdWUgPCByYW5nZS5tYXggKSB8fFxyXG4gICAgICAgICAgICggYmFsYW5jZUNoYW5nZUFtb3VudCA8IDAgJiYgYmFsYW5jZVByb3BlcnR5LnZhbHVlID4gcmFuZ2UubWluICkgKSB7XHJcbiAgICAgICAgYmFsYW5jZVByb3BlcnR5LnZhbHVlICs9IGJhbGFuY2VDaGFuZ2VBbW91bnQ7XHJcbiAgICAgICAgYmFsYW5jZUNoYW5nZWRCeUJ1dHRvbkVtaXR0ZXIuZW1pdCggYmFsYW5jZUNoYW5nZUFtb3VudCApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgaWNvbnMgdGhhdCB3aWxsIGJlIHVzZWQgaW4gdGhlIGJ1dHRvbnMuICBTaXplcyBhbmQgcG9zaXRpb25zIHdlcmUgZW1waXJpY2FsbHkgZGV0ZXJtaW5lZC5cclxuICAgIGNvbnN0IGRlcG9zaXRJY29uID0gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgSW1hZ2UoIGNvaW5JblNsb3RfcG5nLCB7IG1heFdpZHRoOiBCVVRUT05fSUNPTl9XSURUSCwgY2VudGVyWTogLTEwIH0gKSxcclxuICAgICAgICBuZXcgVGV4dCggY3VycmVuY3lVbml0c1N0cmluZywge1xyXG4gICAgICAgICAgY2VudGVyOiBuZXcgVmVjdG9yMiggMjEsIC05ICksXHJcbiAgICAgICAgICBmb250OiBDVVJSRU5DWV9TWU1CT0xfRk9OVCxcclxuICAgICAgICAgIG1heFdpZHRoOiBDVVJSRU5DWV9TWU1CT0xfTUFYX1dJRFRIXHJcbiAgICAgICAgfSApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHdpdGhkcmF3SWNvbiA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IEltYWdlKCBjb2luSW5IYW5kX3BuZywgeyBtYXhXaWR0aDogQlVUVE9OX0lDT05fV0lEVEggfSApLFxyXG4gICAgICAgIG5ldyBUZXh0KCBjdXJyZW5jeVVuaXRzU3RyaW5nLCB7XHJcbiAgICAgICAgICBjZW50ZXI6IG5ldyBWZWN0b3IyKCAyMiwgOSApLFxyXG4gICAgICAgICAgZm9udDogQ1VSUkVOQ1lfU1lNQk9MX0ZPTlQsXHJcbiAgICAgICAgICBtYXhXaWR0aDogQ1VSUkVOQ1lfU1lNQk9MX01BWF9XSURUSFxyXG4gICAgICAgIH0gKVxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBidXR0b25zIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSB0byBhZGQgYW5kIHJlbW92ZSBtb25leS5cclxuICAgIGNvbnN0IHVwQnV0dG9uID0gbmV3IFJvdW5kUHVzaEJ1dHRvbiggbWVyZ2UoIHtcclxuICAgICAgY29udGVudDogZGVwb3NpdEljb24sXHJcbiAgICAgIGJhc2VDb2xvcjogb3B0aW9ucy5idXR0b25CYXNlQ29sb3IsXHJcbiAgICAgIGxpc3RlbmVyOiAoKSA9PiB7IGNoYW5nZUJhbGFuY2UoIGNoYW5nZUFtb3VudCApOyB9XHJcbiAgICB9LCBCVVRUT05fT1BUSU9OUyApICk7XHJcbiAgICBjb25zdCBkb3duQnV0dG9uID0gbmV3IFJvdW5kUHVzaEJ1dHRvbiggbWVyZ2UoIHtcclxuICAgICAgY29udGVudDogd2l0aGRyYXdJY29uLFxyXG4gICAgICBiYXNlQ29sb3I6IG9wdGlvbnMuYnV0dG9uQmFzZUNvbG9yLFxyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4geyBjaGFuZ2VCYWxhbmNlKCAtY2hhbmdlQW1vdW50ICk7IH1cclxuICAgIH0sIEJVVFRPTl9PUFRJT05TICkgKTtcclxuXHJcbiAgICAvLyBDb250cm9sIHRoZSBlbmFibGVkIHN0YXRlcyBvZiB0aGUgYnV0dG9ucy5cclxuICAgIGJhbGFuY2VQcm9wZXJ0eS5saW5rKCBiYWxhbmNlID0+IHtcclxuICAgICAgdXBCdXR0b24uZW5hYmxlZCA9IGJhbGFuY2UgPCByYW5nZS5tYXg7XHJcbiAgICAgIGRvd25CdXR0b24uZW5hYmxlZCA9IGJhbGFuY2UgPiByYW5nZS5taW47XHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgdXBCdXR0b24sXHJcbiAgICAgICAgZG93bkJ1dHRvblxyXG4gICAgICBdLFxyXG4gICAgICBzcGFjaW5nOiAxNVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSAtIGVtaXR0ZXIgdGhhdCBmaXJlcyB3aGVuIGVpdGhlciBidXR0b24gaXMgcmVsZWFzZWRcclxuICAgIHRoaXMuYnV0dG9uUmVsZWFzZWRFbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcclxuXHJcbiAgICAvLyBNb25pdG9yIHRoZSBkb3duUHJvcGVydHkgZm9yIGVhY2ggYnV0dG9uLCBsb2NraW5nIG91dCB0aGUgb3RoZXIgYnV0dG9uIGFuZCBwZXJmb3JtaW5nIGVtaXRzIHdoZW4gcmVsZWFzZWQuXHJcbiAgICB1cEJ1dHRvbi5idXR0b25Nb2RlbC5kb3duUHJvcGVydHkubGF6eUxpbmsoIGRvd24gPT4ge1xyXG4gICAgICBpZiAoIGRvd24gKSB7XHJcblxyXG4gICAgICAgIC8vIFRvIHByZXZlbnQgbXVsdGktdG91Y2ggaXNzdWVzLCBkb24ndCBsZXQgdGhlIG90aGVyIGJ1dHRvbiBiZSBwdXNoZWQgd2hpbGUgdGhpcyBvbmUgaXMgZG93bi5cclxuICAgICAgICBkb3duQnV0dG9uLnBpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIFRoZSBidXR0b24gaGFzIGJlZW4gcmVsZWFzZWQsIHRyaWdnZXIgdGhlIGVtaXR0ZXIuXHJcbiAgICAgICAgdGhpcy5idXR0b25SZWxlYXNlZEVtaXR0ZXIuZW1pdCgpO1xyXG5cclxuICAgICAgICAvLyBSZXN0b3JlIHBpY2thYmlsaXR5IG9mIHBlZXIgYnV0dG9uLlxyXG4gICAgICAgIGRvd25CdXR0b24ucGlja2FibGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgICBkb3duQnV0dG9uLmJ1dHRvbk1vZGVsLmRvd25Qcm9wZXJ0eS5sYXp5TGluayggZG93biA9PiB7XHJcbiAgICAgIGlmICggZG93biApIHtcclxuXHJcbiAgICAgICAgLy8gVG8gcHJldmVudCBtdWx0aS10b3VjaCBpc3N1ZXMsIGRvbid0IGxldCB0aGUgb3RoZXIgYnV0dG9uIGJlIHB1c2hlZCB3aGlsZSB0aGlzIG9uZSBpcyBkb3duLlxyXG4gICAgICAgIHVwQnV0dG9uLnBpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIFRoZSBidXR0b24gaGFzIGJlZW4gcmVsZWFzZWQsIHRyaWdnZXIgdGhlIGVtaXR0ZXIuXHJcbiAgICAgICAgdGhpcy5idXR0b25SZWxlYXNlZEVtaXR0ZXIuZW1pdCgpO1xyXG5cclxuICAgICAgICAvLyBSZXN0b3JlIHBpY2thYmlsaXR5IG9mIHBlZXIgYnV0dG9uLlxyXG4gICAgICAgIHVwQnV0dG9uLnBpY2thYmxlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxubnVtYmVyTGluZUludGVnZXJzLnJlZ2lzdGVyKCAnQWNjb3VudEJhbGFuY2VDb250cm9sbGVyTm9kZScsIEFjY291bnRCYWxhbmNlQ29udHJvbGxlck5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQWNjb3VudEJhbGFuY2VDb250cm9sbGVyTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sZ0NBQWdDO0FBQ3BELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNsRixPQUFPQyxlQUFlLE1BQU0sK0NBQStDO0FBQzNFLE9BQU9DLGNBQWMsTUFBTSxtQ0FBbUM7QUFDOUQsT0FBT0MsY0FBYyxNQUFNLG1DQUFtQztBQUM5RCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MseUJBQXlCLE1BQU0sb0NBQW9DOztBQUUxRTtBQUNBLE1BQU1DLE1BQU0sR0FBRyxFQUFFO0FBQ2pCLE1BQU1DLGNBQWMsR0FBRztFQUNyQkMsT0FBTyxFQUFFRixNQUFNO0VBQ2ZHLE9BQU8sRUFBRUgsTUFBTTtFQUNmSSxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsZUFBZSxFQUFFLEdBQUc7RUFDcEJDLGtCQUFrQixFQUFFO0FBQ3RCLENBQUM7QUFDRCxNQUFNQyxvQkFBb0IsR0FBRyxJQUFJbEIsUUFBUSxDQUFFLEVBQUcsQ0FBQztBQUMvQyxNQUFNbUIseUJBQXlCLEdBQUcsRUFBRTtBQUNwQyxNQUFNQyxpQkFBaUIsR0FBRyxFQUFFO0FBRTVCLE1BQU1DLG1CQUFtQixHQUFHWCx5QkFBeUIsQ0FBQ1ksYUFBYTtBQUduRSxNQUFNQyw0QkFBNEIsU0FBU2xCLElBQUksQ0FBQztFQUU5QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VtQixXQUFXQSxDQUFFQyxlQUFlLEVBQUVDLDZCQUE2QixFQUFF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