// Copyright 2019-2022, University of Colorado Boulder

/**
 * base class for all scenes in the "Explore" screen
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Range from '../../../../dot/js/Range.js';
import SpatializedNumberLine from '../../../../number-line-common/js/common/model/SpatializedNumberLine.js';
import merge from '../../../../phet-core/js/merge.js';
import NLIConstants from '../../common/NLIConstants.js';
import numberLineIntegers from '../../numberLineIntegers.js';

// constants
const SCENE_BOUNDS = NLIConstants.NLI_LAYOUT_BOUNDS; // bounds for the scenes match the layout bounds

class SceneModel {
  /**
   * @param [Object] options
   * @public
   */
  constructor(options) {
    options = merge({
      // {number} - the number of number lines to be created and managed in this model
      numberOfNumberLines: 1,
      // {Object|null} - number line options that are common to all number lines created in this constructor
      commonNumberLineOptions: {
        initialDisplayedRange: new Range(-100, 100),
        initialPointSpecs: []
      },
      // {Vector[]} - zero positions for each of the number lines, length must match number of number lines
      numberLineZeroPositions: [SCENE_BOUNDS.center],
      // {null|Object[]} - options that are unique to the individual number lines being created, null if not needed
      uniqueNumberLineOptionsList: null
    }, options);

    // options checking
    assert && assert(options.numberOfNumberLines === options.numberLineZeroPositions.length);
    assert && assert(!options.uniqueNumberLineOptionsList || options.uniqueNumberLineOptionsList.length === options.numberOfNumberLines);

    // @public - whether or not the number lines are visible
    this.showNumberLineProperty = new BooleanProperty(true);

    // @public (read-only) {NumberLine[]} - the number line(s) for this scene
    this.numberLines = [];
    _.times(options.numberOfNumberLines, count => {
      this.numberLines.push(new SpatializedNumberLine(options.numberLineZeroPositions[count], merge({}, options.commonNumberLineOptions, options.uniqueNumberLineOptionsList ? options.uniqueNumberLineOptionsList[count] : {})));
    });

    // @public - controls whether the labels on the number lines are visible
    this.numberLineLabelsVisibleProperty = new BooleanProperty(true);
    this.numberLineLabelsVisibleProperty.link(visible => {
      this.numberLines.forEach(nl => {
        nl.showPointLabelsProperty.set(visible);
      });
    });

    // @public - controls whether the absolute value indicators on the number lines are visible
    this.numberLineAbsoluteValueIndicatorsVisibleProperty = new BooleanProperty(false);
    this.numberLineAbsoluteValueIndicatorsVisibleProperty.link(visible => {
      this.numberLines.forEach(nl => {
        nl.showAbsoluteValuesProperty.set(visible);
      });
    });
  }

  /**
   * @public
   */
  reset() {
    this.resetScene();
    this.showNumberLineProperty.reset();
    this.numberLineLabelsVisibleProperty.reset();
    this.numberLineAbsoluteValueIndicatorsVisibleProperty.reset();
  }

  /**
   * Do scene-specific reset.
   * @protected
   */
  resetScene() {
    // Override as needed in descendant classes.
  }
}
numberLineIntegers.register('SceneModel', SceneModel);
export default SceneModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJSYW5nZSIsIlNwYXRpYWxpemVkTnVtYmVyTGluZSIsIm1lcmdlIiwiTkxJQ29uc3RhbnRzIiwibnVtYmVyTGluZUludGVnZXJzIiwiU0NFTkVfQk9VTkRTIiwiTkxJX0xBWU9VVF9CT1VORFMiLCJTY2VuZU1vZGVsIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibnVtYmVyT2ZOdW1iZXJMaW5lcyIsImNvbW1vbk51bWJlckxpbmVPcHRpb25zIiwiaW5pdGlhbERpc3BsYXllZFJhbmdlIiwiaW5pdGlhbFBvaW50U3BlY3MiLCJudW1iZXJMaW5lWmVyb1Bvc2l0aW9ucyIsImNlbnRlciIsInVuaXF1ZU51bWJlckxpbmVPcHRpb25zTGlzdCIsImFzc2VydCIsImxlbmd0aCIsInNob3dOdW1iZXJMaW5lUHJvcGVydHkiLCJudW1iZXJMaW5lcyIsIl8iLCJ0aW1lcyIsImNvdW50IiwicHVzaCIsIm51bWJlckxpbmVMYWJlbHNWaXNpYmxlUHJvcGVydHkiLCJsaW5rIiwidmlzaWJsZSIsImZvckVhY2giLCJubCIsInNob3dQb2ludExhYmVsc1Byb3BlcnR5Iiwic2V0IiwibnVtYmVyTGluZUFic29sdXRlVmFsdWVJbmRpY2F0b3JzVmlzaWJsZVByb3BlcnR5Iiwic2hvd0Fic29sdXRlVmFsdWVzUHJvcGVydHkiLCJyZXNldCIsInJlc2V0U2NlbmUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNjZW5lTW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogYmFzZSBjbGFzcyBmb3IgYWxsIHNjZW5lcyBpbiB0aGUgXCJFeHBsb3JlXCIgc2NyZWVuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgU3BhdGlhbGl6ZWROdW1iZXJMaW5lIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1saW5lLWNvbW1vbi9qcy9jb21tb24vbW9kZWwvU3BhdGlhbGl6ZWROdW1iZXJMaW5lLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBOTElDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL05MSUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lSW50ZWdlcnMgZnJvbSAnLi4vLi4vbnVtYmVyTGluZUludGVnZXJzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBTQ0VORV9CT1VORFMgPSBOTElDb25zdGFudHMuTkxJX0xBWU9VVF9CT1VORFM7IC8vIGJvdW5kcyBmb3IgdGhlIHNjZW5lcyBtYXRjaCB0aGUgbGF5b3V0IGJvdW5kc1xyXG5cclxuY2xhc3MgU2NlbmVNb2RlbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBbT2JqZWN0XSBvcHRpb25zXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8ge251bWJlcn0gLSB0aGUgbnVtYmVyIG9mIG51bWJlciBsaW5lcyB0byBiZSBjcmVhdGVkIGFuZCBtYW5hZ2VkIGluIHRoaXMgbW9kZWxcclxuICAgICAgbnVtYmVyT2ZOdW1iZXJMaW5lczogMSxcclxuXHJcbiAgICAgIC8vIHtPYmplY3R8bnVsbH0gLSBudW1iZXIgbGluZSBvcHRpb25zIHRoYXQgYXJlIGNvbW1vbiB0byBhbGwgbnVtYmVyIGxpbmVzIGNyZWF0ZWQgaW4gdGhpcyBjb25zdHJ1Y3RvclxyXG4gICAgICBjb21tb25OdW1iZXJMaW5lT3B0aW9uczoge1xyXG4gICAgICAgIGluaXRpYWxEaXNwbGF5ZWRSYW5nZTogbmV3IFJhbmdlKCAtMTAwLCAxMDAgKSxcclxuICAgICAgICBpbml0aWFsUG9pbnRTcGVjczogW11cclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIHtWZWN0b3JbXX0gLSB6ZXJvIHBvc2l0aW9ucyBmb3IgZWFjaCBvZiB0aGUgbnVtYmVyIGxpbmVzLCBsZW5ndGggbXVzdCBtYXRjaCBudW1iZXIgb2YgbnVtYmVyIGxpbmVzXHJcbiAgICAgIG51bWJlckxpbmVaZXJvUG9zaXRpb25zOiBbIFNDRU5FX0JPVU5EUy5jZW50ZXIgXSxcclxuXHJcbiAgICAgIC8vIHtudWxsfE9iamVjdFtdfSAtIG9wdGlvbnMgdGhhdCBhcmUgdW5pcXVlIHRvIHRoZSBpbmRpdmlkdWFsIG51bWJlciBsaW5lcyBiZWluZyBjcmVhdGVkLCBudWxsIGlmIG5vdCBuZWVkZWRcclxuICAgICAgdW5pcXVlTnVtYmVyTGluZU9wdGlvbnNMaXN0OiBudWxsXHJcblxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIG9wdGlvbnMgY2hlY2tpbmdcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMubnVtYmVyT2ZOdW1iZXJMaW5lcyA9PT0gb3B0aW9ucy5udW1iZXJMaW5lWmVyb1Bvc2l0aW9ucy5sZW5ndGggKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLnVuaXF1ZU51bWJlckxpbmVPcHRpb25zTGlzdCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy51bmlxdWVOdW1iZXJMaW5lT3B0aW9uc0xpc3QubGVuZ3RoID09PSBvcHRpb25zLm51bWJlck9mTnVtYmVyTGluZXMgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIC0gd2hldGhlciBvciBub3QgdGhlIG51bWJlciBsaW5lcyBhcmUgdmlzaWJsZVxyXG4gICAgdGhpcy5zaG93TnVtYmVyTGluZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkge051bWJlckxpbmVbXX0gLSB0aGUgbnVtYmVyIGxpbmUocykgZm9yIHRoaXMgc2NlbmVcclxuICAgIHRoaXMubnVtYmVyTGluZXMgPSBbXTtcclxuICAgIF8udGltZXMoIG9wdGlvbnMubnVtYmVyT2ZOdW1iZXJMaW5lcywgY291bnQgPT4ge1xyXG4gICAgICB0aGlzLm51bWJlckxpbmVzLnB1c2goIG5ldyBTcGF0aWFsaXplZE51bWJlckxpbmUoXHJcbiAgICAgICAgb3B0aW9ucy5udW1iZXJMaW5lWmVyb1Bvc2l0aW9uc1sgY291bnQgXSxcclxuICAgICAgICBtZXJnZShcclxuICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgb3B0aW9ucy5jb21tb25OdW1iZXJMaW5lT3B0aW9ucyxcclxuICAgICAgICAgIG9wdGlvbnMudW5pcXVlTnVtYmVyTGluZU9wdGlvbnNMaXN0ID8gb3B0aW9ucy51bmlxdWVOdW1iZXJMaW5lT3B0aW9uc0xpc3RbIGNvdW50IF0gOiB7fVxyXG4gICAgICAgIClcclxuICAgICAgKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgLSBjb250cm9scyB3aGV0aGVyIHRoZSBsYWJlbHMgb24gdGhlIG51bWJlciBsaW5lcyBhcmUgdmlzaWJsZVxyXG4gICAgdGhpcy5udW1iZXJMaW5lTGFiZWxzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSApO1xyXG4gICAgdGhpcy5udW1iZXJMaW5lTGFiZWxzVmlzaWJsZVByb3BlcnR5LmxpbmsoIHZpc2libGUgPT4ge1xyXG4gICAgICB0aGlzLm51bWJlckxpbmVzLmZvckVhY2goIG5sID0+IHsgbmwuc2hvd1BvaW50TGFiZWxzUHJvcGVydHkuc2V0KCB2aXNpYmxlICk7IH0gKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIC0gY29udHJvbHMgd2hldGhlciB0aGUgYWJzb2x1dGUgdmFsdWUgaW5kaWNhdG9ycyBvbiB0aGUgbnVtYmVyIGxpbmVzIGFyZSB2aXNpYmxlXHJcbiAgICB0aGlzLm51bWJlckxpbmVBYnNvbHV0ZVZhbHVlSW5kaWNhdG9yc1Zpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcbiAgICB0aGlzLm51bWJlckxpbmVBYnNvbHV0ZVZhbHVlSW5kaWNhdG9yc1Zpc2libGVQcm9wZXJ0eS5saW5rKCB2aXNpYmxlID0+IHtcclxuICAgICAgdGhpcy5udW1iZXJMaW5lcy5mb3JFYWNoKCBubCA9PiB7IG5sLnNob3dBYnNvbHV0ZVZhbHVlc1Byb3BlcnR5LnNldCggdmlzaWJsZSApOyB9ICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnJlc2V0U2NlbmUoKTtcclxuICAgIHRoaXMuc2hvd051bWJlckxpbmVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5udW1iZXJMaW5lTGFiZWxzVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLm51bWJlckxpbmVBYnNvbHV0ZVZhbHVlSW5kaWNhdG9yc1Zpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRG8gc2NlbmUtc3BlY2lmaWMgcmVzZXQuXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqL1xyXG4gIHJlc2V0U2NlbmUoKSB7XHJcbiAgICAvLyBPdmVycmlkZSBhcyBuZWVkZWQgaW4gZGVzY2VuZGFudCBjbGFzc2VzLlxyXG4gIH1cclxufVxyXG5cclxubnVtYmVyTGluZUludGVnZXJzLnJlZ2lzdGVyKCAnU2NlbmVNb2RlbCcsIFNjZW5lTW9kZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgU2NlbmVNb2RlbDsiXSwibWFwcGluZ3Mi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