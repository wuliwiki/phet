// Copyright 2019-2022, University of Colorado Boulder

/**
 * The 'Explore' screen in the Number Line: Integers simulation.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import exploreScreenHome_png from '../../images/exploreScreenHome_png.js';
import exploreScreenNav_png from '../../images/exploreScreenNav_png.js';
import numberLineIntegers from '../numberLineIntegers.js';
import NumberLineIntegersStrings from '../NumberLineIntegersStrings.js';
import NLIExploreModel from './model/NLIExploreModel.js';
import NLIExploreScreenView from './view/NLIExploreScreenView.js';
class NLIExploreScreen extends Screen {
  /**
   * @param {Tandem} tandem
   * @public
   */
  constructor(tandem) {
    const options = {
      name: NumberLineIntegersStrings.screen.exploreStringProperty,
      backgroundColorProperty: new Property('rgb( 254, 247, 233 )'),
      homeScreenIcon: new ScreenIcon(new Image(exploreScreenHome_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      navigationBarIcon: new ScreenIcon(new Image(exploreScreenNav_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    };
    super(() => new NLIExploreModel(), model => new NLIExploreScreenView(model), options);
  }
}
numberLineIntegers.register('NLIExploreScreen', NLIExploreScreen);
export default NLIExploreScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsImV4cGxvcmVTY3JlZW5Ib21lX3BuZyIsImV4cGxvcmVTY3JlZW5OYXZfcG5nIiwibnVtYmVyTGluZUludGVnZXJzIiwiTnVtYmVyTGluZUludGVnZXJzU3RyaW5ncyIsIk5MSUV4cGxvcmVNb2RlbCIsIk5MSUV4cGxvcmVTY3JlZW5WaWV3IiwiTkxJRXhwbG9yZVNjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwib3B0aW9ucyIsIm5hbWUiLCJzY3JlZW4iLCJleHBsb3JlU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwibmF2aWdhdGlvbkJhckljb24iLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTkxJRXhwbG9yZVNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgJ0V4cGxvcmUnIHNjcmVlbiBpbiB0aGUgTnVtYmVyIExpbmU6IEludGVnZXJzIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBleHBsb3JlU2NyZWVuSG9tZV9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2V4cGxvcmVTY3JlZW5Ib21lX3BuZy5qcyc7XHJcbmltcG9ydCBleHBsb3JlU2NyZWVuTmF2X3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvZXhwbG9yZVNjcmVlbk5hdl9wbmcuanMnO1xyXG5pbXBvcnQgbnVtYmVyTGluZUludGVnZXJzIGZyb20gJy4uL251bWJlckxpbmVJbnRlZ2Vycy5qcyc7XHJcbmltcG9ydCBOdW1iZXJMaW5lSW50ZWdlcnNTdHJpbmdzIGZyb20gJy4uL051bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgTkxJRXhwbG9yZU1vZGVsIGZyb20gJy4vbW9kZWwvTkxJRXhwbG9yZU1vZGVsLmpzJztcclxuaW1wb3J0IE5MSUV4cGxvcmVTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9OTElFeHBsb3JlU2NyZWVuVmlldy5qcyc7XHJcblxyXG5jbGFzcyBOTElFeHBsb3JlU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IE51bWJlckxpbmVJbnRlZ2Vyc1N0cmluZ3Muc2NyZWVuLmV4cGxvcmVTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggJ3JnYiggMjU0LCAyNDcsIDIzMyApJyApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggZXhwbG9yZVNjcmVlbkhvbWVfcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKSxcclxuICAgICAgbmF2aWdhdGlvbkJhckljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgSW1hZ2UoIGV4cGxvcmVTY3JlZW5OYXZfcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoICgpID0+IG5ldyBOTElFeHBsb3JlTW9kZWwoKSwgbW9kZWwgPT4gbmV3IE5MSUV4cGxvcmVTY3JlZW5WaWV3KCBtb2RlbCApLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJMaW5lSW50ZWdlcnMucmVnaXN0ZXIoICdOTElFeHBsb3JlU2NyZWVuJywgTkxJRXhwbG9yZVNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBOTElFeHBsb3JlU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLHFCQUFxQixNQUFNLHVDQUF1QztBQUN6RSxPQUFPQyxvQkFBb0IsTUFBTSxzQ0FBc0M7QUFDdkUsT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBQ3pELE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxlQUFlLE1BQU0sNEJBQTRCO0FBQ3hELE9BQU9DLG9CQUFvQixNQUFNLGdDQUFnQztBQUVqRSxNQUFNQyxnQkFBZ0IsU0FBU1QsTUFBTSxDQUFDO0VBRXBDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VVLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQixNQUFNQyxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFUCx5QkFBeUIsQ0FBQ1EsTUFBTSxDQUFDQyxxQkFBcUI7TUFDNURDLHVCQUF1QixFQUFFLElBQUlqQixRQUFRLENBQUUsc0JBQXVCLENBQUM7TUFDL0RrQixjQUFjLEVBQUUsSUFBSWhCLFVBQVUsQ0FBRSxJQUFJQyxLQUFLLENBQUVDLHFCQUFzQixDQUFDLEVBQUU7UUFDbEVlLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUUsQ0FBQztNQUNIQyxpQkFBaUIsRUFBRSxJQUFJbkIsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUUsb0JBQXFCLENBQUMsRUFBRTtRQUNwRWMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hSLE1BQU0sRUFBRUE7SUFDVixDQUFDO0lBRUQsS0FBSyxDQUFFLE1BQU0sSUFBSUosZUFBZSxDQUFDLENBQUMsRUFBRWMsS0FBSyxJQUFJLElBQUliLG9CQUFvQixDQUFFYSxLQUFNLENBQUMsRUFBRVQsT0FBUSxDQUFDO0VBQzNGO0FBQ0Y7QUFFQVAsa0JBQWtCLENBQUNpQixRQUFRLENBQUUsa0JBQWtCLEVBQUViLGdCQUFpQixDQUFDO0FBQ25FLGVBQWVBLGdCQUFnQiJ9