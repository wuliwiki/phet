// Copyright 2018-2022, University of Colorado Boulder

/**
 * The sole scene in the 'Two Variables' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import EqualityExplorerColors from '../../../../equality-explorer/js/common/EqualityExplorerColors.js';
import ConstantTermCreator from '../../../../equality-explorer/js/common/model/ConstantTermCreator.js';
import EqualityExplorerScene from '../../../../equality-explorer/js/common/model/EqualityExplorerScene.js';
import Variable from '../../../../equality-explorer/js/common/model/Variable.js';
import VariableTermCreator from '../../../../equality-explorer/js/common/model/VariableTermCreator.js';
import EqualityExplorerStrings from '../../../../equality-explorer/js/EqualityExplorerStrings.js';
import equalityExplorerTwoVariables from '../../equalityExplorerTwoVariables.js';
import EqualityExplorerTwoVariablesStrings from '../../EqualityExplorerTwoVariablesStrings.js';
export default class TwoVariablesScene extends EqualityExplorerScene {
  constructor(tandem) {
    const variablesTandem = tandem.createTandem('variables');
    const x = new Variable(EqualityExplorerStrings.xStringProperty, {
      tandem: variablesTandem.createTandem('x')
    });
    const y = new Variable(EqualityExplorerTwoVariablesStrings.yStringProperty, {
      tandem: variablesTandem.createTandem('y')
    });
    const createLeftTermCreators = (lockedProperty, tandem) => createTermCreators(x, y, lockedProperty, tandem);
    const createRightTermCreators = (lockedProperty, tandem) => createTermCreators(x, y, lockedProperty, tandem);
    super(createLeftTermCreators, createRightTermCreators, {
      variables: [x, y],
      numberOfSnapshots: 4,
      tandem: tandem
    });
  }
}

/**
 * Creates the term creators for this scene.
 */
function createTermCreators(x, y, lockedProperty, parentTandem) {
  return [
  // x & -x
  new VariableTermCreator(x, {
    lockedProperty: lockedProperty,
    tandem: parentTandem.createTandem('xTermCreator')
  }),
  // y & -y
  new VariableTermCreator(y, {
    lockedProperty: lockedProperty,
    positiveFill: EqualityExplorerColors.POSITIVE_Y_FILL,
    negativeFill: EqualityExplorerColors.NEGATIVE_Y_FILL,
    tandem: parentTandem.createTandem('yTermCreator')
  }),
  // 1 & -1
  new ConstantTermCreator({
    lockedProperty: lockedProperty,
    tandem: parentTandem.createTandem('constantTermCreator')
  })];
}
equalityExplorerTwoVariables.register('TwoVariablesScene', TwoVariablesScene);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFcXVhbGl0eUV4cGxvcmVyQ29sb3JzIiwiQ29uc3RhbnRUZXJtQ3JlYXRvciIsIkVxdWFsaXR5RXhwbG9yZXJTY2VuZSIsIlZhcmlhYmxlIiwiVmFyaWFibGVUZXJtQ3JlYXRvciIsIkVxdWFsaXR5RXhwbG9yZXJTdHJpbmdzIiwiZXF1YWxpdHlFeHBsb3JlclR3b1ZhcmlhYmxlcyIsIkVxdWFsaXR5RXhwbG9yZXJUd29WYXJpYWJsZXNTdHJpbmdzIiwiVHdvVmFyaWFibGVzU2NlbmUiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsInZhcmlhYmxlc1RhbmRlbSIsImNyZWF0ZVRhbmRlbSIsIngiLCJ4U3RyaW5nUHJvcGVydHkiLCJ5IiwieVN0cmluZ1Byb3BlcnR5IiwiY3JlYXRlTGVmdFRlcm1DcmVhdG9ycyIsImxvY2tlZFByb3BlcnR5IiwiY3JlYXRlVGVybUNyZWF0b3JzIiwiY3JlYXRlUmlnaHRUZXJtQ3JlYXRvcnMiLCJ2YXJpYWJsZXMiLCJudW1iZXJPZlNuYXBzaG90cyIsInBhcmVudFRhbmRlbSIsInBvc2l0aXZlRmlsbCIsIlBPU0lUSVZFX1lfRklMTCIsIm5lZ2F0aXZlRmlsbCIsIk5FR0FUSVZFX1lfRklMTCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVHdvVmFyaWFibGVzU2NlbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIHNvbGUgc2NlbmUgaW4gdGhlICdUd28gVmFyaWFibGVzJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRXF1YWxpdHlFeHBsb3JlckNvbG9ycyBmcm9tICcuLi8uLi8uLi8uLi9lcXVhbGl0eS1leHBsb3Jlci9qcy9jb21tb24vRXF1YWxpdHlFeHBsb3JlckNvbG9ycy5qcyc7XHJcbmltcG9ydCBDb25zdGFudFRlcm1DcmVhdG9yIGZyb20gJy4uLy4uLy4uLy4uL2VxdWFsaXR5LWV4cGxvcmVyL2pzL2NvbW1vbi9tb2RlbC9Db25zdGFudFRlcm1DcmVhdG9yLmpzJztcclxuaW1wb3J0IEVxdWFsaXR5RXhwbG9yZXJTY2VuZSBmcm9tICcuLi8uLi8uLi8uLi9lcXVhbGl0eS1leHBsb3Jlci9qcy9jb21tb24vbW9kZWwvRXF1YWxpdHlFeHBsb3JlclNjZW5lLmpzJztcclxuaW1wb3J0IFRlcm1DcmVhdG9yIGZyb20gJy4uLy4uLy4uLy4uL2VxdWFsaXR5LWV4cGxvcmVyL2pzL2NvbW1vbi9tb2RlbC9UZXJtQ3JlYXRvci5qcyc7XHJcbmltcG9ydCBWYXJpYWJsZSBmcm9tICcuLi8uLi8uLi8uLi9lcXVhbGl0eS1leHBsb3Jlci9qcy9jb21tb24vbW9kZWwvVmFyaWFibGUuanMnO1xyXG5pbXBvcnQgVmFyaWFibGVUZXJtQ3JlYXRvciBmcm9tICcuLi8uLi8uLi8uLi9lcXVhbGl0eS1leHBsb3Jlci9qcy9jb21tb24vbW9kZWwvVmFyaWFibGVUZXJtQ3JlYXRvci5qcyc7XHJcbmltcG9ydCBFcXVhbGl0eUV4cGxvcmVyU3RyaW5ncyBmcm9tICcuLi8uLi8uLi8uLi9lcXVhbGl0eS1leHBsb3Jlci9qcy9FcXVhbGl0eUV4cGxvcmVyU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyVHdvVmFyaWFibGVzIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXJUd29WYXJpYWJsZXMuanMnO1xyXG5pbXBvcnQgRXF1YWxpdHlFeHBsb3JlclR3b1ZhcmlhYmxlc1N0cmluZ3MgZnJvbSAnLi4vLi4vRXF1YWxpdHlFeHBsb3JlclR3b1ZhcmlhYmxlc1N0cmluZ3MuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHdvVmFyaWFibGVzU2NlbmUgZXh0ZW5kcyBFcXVhbGl0eUV4cGxvcmVyU2NlbmUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IHZhcmlhYmxlc1RhbmRlbSA9IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2YXJpYWJsZXMnICk7XHJcblxyXG4gICAgY29uc3QgeCA9IG5ldyBWYXJpYWJsZSggRXF1YWxpdHlFeHBsb3JlclN0cmluZ3MueFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogdmFyaWFibGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3gnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB5ID0gbmV3IFZhcmlhYmxlKCBFcXVhbGl0eUV4cGxvcmVyVHdvVmFyaWFibGVzU3RyaW5ncy55U3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiB2YXJpYWJsZXNUYW5kZW0uY3JlYXRlVGFuZGVtKCAneScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZUxlZnRUZXJtQ3JlYXRvcnMgPSAoIGxvY2tlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiB8IG51bGwsIHRhbmRlbTogVGFuZGVtICkgPT5cclxuICAgICAgY3JlYXRlVGVybUNyZWF0b3JzKCB4LCB5LCBsb2NrZWRQcm9wZXJ0eSwgdGFuZGVtICk7XHJcblxyXG4gICAgY29uc3QgY3JlYXRlUmlnaHRUZXJtQ3JlYXRvcnMgPSAoIGxvY2tlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiB8IG51bGwsIHRhbmRlbTogVGFuZGVtICkgPT5cclxuICAgICAgY3JlYXRlVGVybUNyZWF0b3JzKCB4LCB5LCBsb2NrZWRQcm9wZXJ0eSwgdGFuZGVtICk7XHJcblxyXG4gICAgc3VwZXIoIGNyZWF0ZUxlZnRUZXJtQ3JlYXRvcnMsIGNyZWF0ZVJpZ2h0VGVybUNyZWF0b3JzLCB7XHJcbiAgICAgIHZhcmlhYmxlczogWyB4LCB5IF0sXHJcbiAgICAgIG51bWJlck9mU25hcHNob3RzOiA0LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgdGhlIHRlcm0gY3JlYXRvcnMgZm9yIHRoaXMgc2NlbmUuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVUZXJtQ3JlYXRvcnMoIHg6IFZhcmlhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IFZhcmlhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2tlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiB8IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50VGFuZGVtOiBUYW5kZW0gKTogVGVybUNyZWF0b3JbXSB7XHJcblxyXG4gIHJldHVybiBbXHJcblxyXG4gICAgLy8geCAmIC14XHJcbiAgICBuZXcgVmFyaWFibGVUZXJtQ3JlYXRvciggeCwge1xyXG4gICAgICBsb2NrZWRQcm9wZXJ0eTogbG9ja2VkUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbTogcGFyZW50VGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3hUZXJtQ3JlYXRvcicgKVxyXG4gICAgfSApLFxyXG5cclxuICAgIC8vIHkgJiAteVxyXG4gICAgbmV3IFZhcmlhYmxlVGVybUNyZWF0b3IoIHksIHtcclxuICAgICAgbG9ja2VkUHJvcGVydHk6IGxvY2tlZFByb3BlcnR5LFxyXG4gICAgICBwb3NpdGl2ZUZpbGw6IEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMuUE9TSVRJVkVfWV9GSUxMLFxyXG4gICAgICBuZWdhdGl2ZUZpbGw6IEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMuTkVHQVRJVkVfWV9GSUxMLFxyXG4gICAgICB0YW5kZW06IHBhcmVudFRhbmRlbS5jcmVhdGVUYW5kZW0oICd5VGVybUNyZWF0b3InIClcclxuICAgIH0gKSxcclxuXHJcbiAgICAvLyAxICYgLTFcclxuICAgIG5ldyBDb25zdGFudFRlcm1DcmVhdG9yKCB7XHJcbiAgICAgIGxvY2tlZFByb3BlcnR5OiBsb2NrZWRQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtOiBwYXJlbnRUYW5kZW0uY3JlYXRlVGFuZGVtKCAnY29uc3RhbnRUZXJtQ3JlYXRvcicgKVxyXG4gICAgfSApXHJcbiAgXTtcclxufVxyXG5cclxuZXF1YWxpdHlFeHBsb3JlclR3b1ZhcmlhYmxlcy5yZWdpc3RlciggJ1R3b1ZhcmlhYmxlc1NjZW5lJywgVHdvVmFyaWFibGVzU2NlbmUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0Esc0JBQXNCLE1BQU0sbUVBQW1FO0FBQ3RHLE9BQU9DLG1CQUFtQixNQUFNLHNFQUFzRTtBQUN0RyxPQUFPQyxxQkFBcUIsTUFBTSx3RUFBd0U7QUFFMUcsT0FBT0MsUUFBUSxNQUFNLDJEQUEyRDtBQUNoRixPQUFPQyxtQkFBbUIsTUFBTSxzRUFBc0U7QUFDdEcsT0FBT0MsdUJBQXVCLE1BQU0sNkRBQTZEO0FBRWpHLE9BQU9DLDRCQUE0QixNQUFNLHVDQUF1QztBQUNoRixPQUFPQyxtQ0FBbUMsTUFBTSw4Q0FBOEM7QUFFOUYsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU04scUJBQXFCLENBQUM7RUFFNURPLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxlQUFlLEdBQUdELE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLFdBQVksQ0FBQztJQUUxRCxNQUFNQyxDQUFDLEdBQUcsSUFBSVYsUUFBUSxDQUFFRSx1QkFBdUIsQ0FBQ1MsZUFBZSxFQUFFO01BQy9ESixNQUFNLEVBQUVDLGVBQWUsQ0FBQ0MsWUFBWSxDQUFFLEdBQUk7SUFDNUMsQ0FBRSxDQUFDO0lBRUgsTUFBTUcsQ0FBQyxHQUFHLElBQUlaLFFBQVEsQ0FBRUksbUNBQW1DLENBQUNTLGVBQWUsRUFBRTtNQUMzRU4sTUFBTSxFQUFFQyxlQUFlLENBQUNDLFlBQVksQ0FBRSxHQUFJO0lBQzVDLENBQUUsQ0FBQztJQUVILE1BQU1LLHNCQUFzQixHQUFHQSxDQUFFQyxjQUF3QyxFQUFFUixNQUFjLEtBQ3ZGUyxrQkFBa0IsQ0FBRU4sQ0FBQyxFQUFFRSxDQUFDLEVBQUVHLGNBQWMsRUFBRVIsTUFBTyxDQUFDO0lBRXBELE1BQU1VLHVCQUF1QixHQUFHQSxDQUFFRixjQUF3QyxFQUFFUixNQUFjLEtBQ3hGUyxrQkFBa0IsQ0FBRU4sQ0FBQyxFQUFFRSxDQUFDLEVBQUVHLGNBQWMsRUFBRVIsTUFBTyxDQUFDO0lBRXBELEtBQUssQ0FBRU8sc0JBQXNCLEVBQUVHLHVCQUF1QixFQUFFO01BQ3REQyxTQUFTLEVBQUUsQ0FBRVIsQ0FBQyxFQUFFRSxDQUFDLENBQUU7TUFDbkJPLGlCQUFpQixFQUFFLENBQUM7TUFDcEJaLE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7RUFDTDtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNTLGtCQUFrQkEsQ0FBRU4sQ0FBVyxFQUNYRSxDQUFXLEVBQ1hHLGNBQXdDLEVBQ3hDSyxZQUFvQixFQUFrQjtFQUVqRSxPQUFPO0VBRUw7RUFDQSxJQUFJbkIsbUJBQW1CLENBQUVTLENBQUMsRUFBRTtJQUMxQkssY0FBYyxFQUFFQSxjQUFjO0lBQzlCUixNQUFNLEVBQUVhLFlBQVksQ0FBQ1gsWUFBWSxDQUFFLGNBQWU7RUFDcEQsQ0FBRSxDQUFDO0VBRUg7RUFDQSxJQUFJUixtQkFBbUIsQ0FBRVcsQ0FBQyxFQUFFO0lBQzFCRyxjQUFjLEVBQUVBLGNBQWM7SUFDOUJNLFlBQVksRUFBRXhCLHNCQUFzQixDQUFDeUIsZUFBZTtJQUNwREMsWUFBWSxFQUFFMUIsc0JBQXNCLENBQUMyQixlQUFlO0lBQ3BEakIsTUFBTSxFQUFFYSxZQUFZLENBQUNYLFlBQVksQ0FBRSxjQUFlO0VBQ3BELENBQUUsQ0FBQztFQUVIO0VBQ0EsSUFBSVgsbUJBQW1CLENBQUU7SUFDdkJpQixjQUFjLEVBQUVBLGNBQWM7SUFDOUJSLE1BQU0sRUFBRWEsWUFBWSxDQUFDWCxZQUFZLENBQUUscUJBQXNCO0VBQzNELENBQUUsQ0FBQyxDQUNKO0FBQ0g7QUFFQU4sNEJBQTRCLENBQUNzQixRQUFRLENBQUUsbUJBQW1CLEVBQUVwQixpQkFBa0IsQ0FBQyJ9