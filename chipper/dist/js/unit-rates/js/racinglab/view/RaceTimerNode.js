// Copyright 2017-2023, University of Colorado Boulder

/**
 * Timer in the 'Racing Lab' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import merge from '../../../../phet-core/js/merge.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import ValueNode from '../../common/view/ValueNode.js';
import ValuePanel from '../../common/view/ValuePanel.js';
import unitRates from '../../unitRates.js';
import UnitRatesStrings from '../../UnitRatesStrings.js';

// constants
const TIMER_FONT = new PhetFont(16);
const DECIMAL_PLACES = 2;
export default class RaceTimerNode extends ValuePanel {
  /**
   * @param {Property.<number>} timeProperty
   * @param {Property.<boolean>} expandedProperty
   * @param {string} titleString
   * @param {Object} [options]
   */
  constructor(timeProperty, expandedProperty, titleString, options) {
    // dispose not required, exists for sim lifetime
    const valueNode = new ValueNode(timeProperty, {
      font: TIMER_FONT,
      valueToString: value => StringUtils.format(UnitRatesStrings.pattern_0value_1units, Utils.toFixed(value, DECIMAL_PLACES), UnitRatesStrings.hours)
    });
    super(valueNode, merge({
      panelWidth: 132,
      expandedProperty: expandedProperty,
      titleString: titleString,
      titleFont: TIMER_FONT
    }, options));
  }
}
unitRates.register('RaceTimerNode', RaceTimerNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIm1lcmdlIiwiU3RyaW5nVXRpbHMiLCJQaGV0Rm9udCIsIlZhbHVlTm9kZSIsIlZhbHVlUGFuZWwiLCJ1bml0UmF0ZXMiLCJVbml0UmF0ZXNTdHJpbmdzIiwiVElNRVJfRk9OVCIsIkRFQ0lNQUxfUExBQ0VTIiwiUmFjZVRpbWVyTm9kZSIsImNvbnN0cnVjdG9yIiwidGltZVByb3BlcnR5IiwiZXhwYW5kZWRQcm9wZXJ0eSIsInRpdGxlU3RyaW5nIiwib3B0aW9ucyIsInZhbHVlTm9kZSIsImZvbnQiLCJ2YWx1ZVRvU3RyaW5nIiwidmFsdWUiLCJmb3JtYXQiLCJwYXR0ZXJuXzB2YWx1ZV8xdW5pdHMiLCJ0b0ZpeGVkIiwiaG91cnMiLCJwYW5lbFdpZHRoIiwidGl0bGVGb250IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSYWNlVGltZXJOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRpbWVyIGluIHRoZSAnUmFjaW5nIExhYicgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgVmFsdWVOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1ZhbHVlTm9kZS5qcyc7XHJcbmltcG9ydCBWYWx1ZVBhbmVsIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1ZhbHVlUGFuZWwuanMnO1xyXG5pbXBvcnQgdW5pdFJhdGVzIGZyb20gJy4uLy4uL3VuaXRSYXRlcy5qcyc7XHJcbmltcG9ydCBVbml0UmF0ZXNTdHJpbmdzIGZyb20gJy4uLy4uL1VuaXRSYXRlc1N0cmluZ3MuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFRJTUVSX0ZPTlQgPSBuZXcgUGhldEZvbnQoIDE2ICk7XHJcbmNvbnN0IERFQ0lNQUxfUExBQ0VTID0gMjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhY2VUaW1lck5vZGUgZXh0ZW5kcyBWYWx1ZVBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gdGltZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGV4cGFuZGVkUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVTdHJpbmdcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRpbWVQcm9wZXJ0eSwgZXhwYW5kZWRQcm9wZXJ0eSwgdGl0bGVTdHJpbmcsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gZGlzcG9zZSBub3QgcmVxdWlyZWQsIGV4aXN0cyBmb3Igc2ltIGxpZmV0aW1lXHJcbiAgICBjb25zdCB2YWx1ZU5vZGUgPSBuZXcgVmFsdWVOb2RlKCB0aW1lUHJvcGVydHksIHtcclxuICAgICAgZm9udDogVElNRVJfRk9OVCxcclxuICAgICAgdmFsdWVUb1N0cmluZzogdmFsdWUgPT4gU3RyaW5nVXRpbHMuZm9ybWF0KCBVbml0UmF0ZXNTdHJpbmdzLnBhdHRlcm5fMHZhbHVlXzF1bml0cyxcclxuICAgICAgICBVdGlscy50b0ZpeGVkKCB2YWx1ZSwgREVDSU1BTF9QTEFDRVMgKSwgVW5pdFJhdGVzU3RyaW5ncy5ob3VycyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHZhbHVlTm9kZSwgbWVyZ2UoIHtcclxuICAgICAgcGFuZWxXaWR0aDogMTMyLFxyXG4gICAgICBleHBhbmRlZFByb3BlcnR5OiBleHBhbmRlZFByb3BlcnR5LFxyXG4gICAgICB0aXRsZVN0cmluZzogdGl0bGVTdHJpbmcsXHJcbiAgICAgIHRpdGxlRm9udDogVElNRVJfRk9OVFxyXG4gICAgfSwgb3B0aW9ucyApICk7XHJcbiAgfVxyXG59XHJcblxyXG51bml0UmF0ZXMucmVnaXN0ZXIoICdSYWNlVGltZXJOb2RlJywgUmFjZVRpbWVyTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLFNBQVMsTUFBTSxnQ0FBZ0M7QUFDdEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxTQUFTLE1BQU0sb0JBQW9CO0FBQzFDLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjs7QUFFeEQ7QUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSUwsUUFBUSxDQUFFLEVBQUcsQ0FBQztBQUNyQyxNQUFNTSxjQUFjLEdBQUcsQ0FBQztBQUV4QixlQUFlLE1BQU1DLGFBQWEsU0FBU0wsVUFBVSxDQUFDO0VBRXBEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRztJQUVsRTtJQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJWixTQUFTLENBQUVRLFlBQVksRUFBRTtNQUM3Q0ssSUFBSSxFQUFFVCxVQUFVO01BQ2hCVSxhQUFhLEVBQUVDLEtBQUssSUFBSWpCLFdBQVcsQ0FBQ2tCLE1BQU0sQ0FBRWIsZ0JBQWdCLENBQUNjLHFCQUFxQixFQUNoRnJCLEtBQUssQ0FBQ3NCLE9BQU8sQ0FBRUgsS0FBSyxFQUFFVixjQUFlLENBQUMsRUFBRUYsZ0JBQWdCLENBQUNnQixLQUFNO0lBQ25FLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVAsU0FBUyxFQUFFZixLQUFLLENBQUU7TUFDdkJ1QixVQUFVLEVBQUUsR0FBRztNQUNmWCxnQkFBZ0IsRUFBRUEsZ0JBQWdCO01BQ2xDQyxXQUFXLEVBQUVBLFdBQVc7TUFDeEJXLFNBQVMsRUFBRWpCO0lBQ2IsQ0FBQyxFQUFFTyxPQUFRLENBQUUsQ0FBQztFQUNoQjtBQUNGO0FBRUFULFNBQVMsQ0FBQ29CLFFBQVEsQ0FBRSxlQUFlLEVBQUVoQixhQUFjLENBQUMifQ==