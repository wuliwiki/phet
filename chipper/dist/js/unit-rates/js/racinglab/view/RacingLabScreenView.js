// Copyright 2017-2023, University of Colorado Boulder

/**
 * View for the 'Racing Lab' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import ScreenView from '../../../../joist/js/ScreenView.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import { Node } from '../../../../scenery/js/imports.js';
import URConstants from '../../common/URConstants.js';
import DoubleNumberLineAccordionBox from '../../common/view/DoubleNumberLineAccordionBox.js';
import KeypadLayer from '../../common/view/KeypadLayer.js';
import unitRates from '../../unitRates.js';
import UnitRatesStrings from '../../UnitRatesStrings.js';
import NumberOfCarsRadioButtonGroup from './NumberOfCarsRadioButtonGroup.js';
import RaceCarRateAccordionBox from './RaceCarRateAccordionBox.js';
import RaceTrackNode from './RaceTrackNode.js';
import RacingLabViewProperties from './RacingLabViewProperties.js';
import ResetRaceButton from './ResetRaceButton.js';
import StartStopButton from './StartStopButton.js';

// constants
const BUTTON_X_SPACE = 20; // space between buttons
const ACCORDION_BOX_X_SPACE = 10; // space between accordion boxes

export default class RacingLabScreenView extends ScreenView {
  /**
   * @param {RacingLabModel} model
   * @param {Object} [options]
   */
  constructor(model, options) {
    super(options);

    // Properties that are specific to the view
    const viewProperties = new RacingLabViewProperties();

    // parent for everything expect the keypad
    const playAreaLayer = new Node();
    this.addChild(playAreaLayer);

    // separate layer for model keypad
    const keypadLayer = new KeypadLayer();
    this.addChild(keypadLayer);

    // Double number line for car1
    const doubleNumberLineAccordionBox1 = new DoubleNumberLineAccordionBox(model.car1.doubleNumberLine, model.car1.markerEditor, keypadLayer, {
      axisViewLength: URConstants.RACING_LAB_AXIS_LENGTH,
      titleString: UnitRatesStrings.doubleNumberLine1StringProperty,
      expandedProperty: viewProperties.doubleNumberLineExpandedProperty1,
      indicatorXProperty: model.car1.distanceProperty,
      indicatorColor: model.car1.color,
      keypadPosition: 'below',
      left: this.layoutBounds.left + URConstants.SCREEN_X_MARGIN,
      top: this.layoutBounds.top + URConstants.SCREEN_Y_MARGIN
    });
    playAreaLayer.addChild(doubleNumberLineAccordionBox1);

    // Double number line for car2
    const doubleNumberLineAccordionBox2 = new DoubleNumberLineAccordionBox(model.car2.doubleNumberLine, model.car2.markerEditor, keypadLayer, {
      axisViewLength: URConstants.RACING_LAB_AXIS_LENGTH,
      titleString: UnitRatesStrings.doubleNumberLine2StringProperty,
      expandedProperty: viewProperties.doubleNumberLineExpandedProperty2,
      indicatorXProperty: model.car2.distanceProperty,
      indicatorColor: model.car2.color,
      keypadPosition: 'above',
      left: this.layoutBounds.left + URConstants.SCREEN_X_MARGIN,
      bottom: this.layoutBounds.bottom - URConstants.SCREEN_Y_MARGIN
    });
    playAreaLayer.addChild(doubleNumberLineAccordionBox2);

    // Rate control for car1
    const rateAccordionBox1 = new RaceCarRateAccordionBox(model.car1, {
      titleString: UnitRatesStrings.rate1StringProperty,
      expandedProperty: viewProperties.rateExpandedProperty1,
      left: doubleNumberLineAccordionBox1.right + ACCORDION_BOX_X_SPACE,
      top: doubleNumberLineAccordionBox1.top
    });
    playAreaLayer.addChild(rateAccordionBox1);

    // Rate control for car2
    const rateAccordionBox2 = new RaceCarRateAccordionBox(model.car2, {
      titleString: UnitRatesStrings.rate2StringProperty,
      expandedProperty: viewProperties.rateExpandedProperty2,
      left: doubleNumberLineAccordionBox2.right + ACCORDION_BOX_X_SPACE,
      top: doubleNumberLineAccordionBox2.top
    });
    playAreaLayer.addChild(rateAccordionBox2);

    // Track for car1
    const trackNode1 = new RaceTrackNode(model.car1, viewProperties.timerExpandedProperty1, viewProperties.arrowsVisibleProperty, {
      timerTitleString: UnitRatesStrings.timer1StringProperty,
      trackViewLength: URConstants.RACING_LAB_AXIS_LENGTH,
      x: this.globalToLocalPoint(doubleNumberLineAccordionBox1.getGlobalOrigin()).x,
      // aligned with double number line
      bottom: this.layoutBounds.centerY - 10
    });
    playAreaLayer.addChild(trackNode1);

    // Track for car2
    const trackNode2 = new RaceTrackNode(model.car2, viewProperties.timerExpandedProperty2, viewProperties.arrowsVisibleProperty, {
      timerTitleString: UnitRatesStrings.timer2StringProperty,
      trackViewLength: URConstants.RACING_LAB_AXIS_LENGTH,
      x: this.globalToLocalPoint(doubleNumberLineAccordionBox2.getGlobalOrigin()).x,
      // aligned with double number line
      top: this.layoutBounds.centerY + (this.layoutBounds.centerY - trackNode1.bottom)
    });
    playAreaLayer.addChild(trackNode2);

    // Radio button group for number of cars
    const numberOfCarsRadioButtonGroup = new NumberOfCarsRadioButtonGroup(model.car2.visibleProperty, {
      right: this.layoutBounds.maxX - URConstants.SCREEN_X_MARGIN,
      centerY: this.layoutBounds.centerY
    });
    playAreaLayer.addChild(numberOfCarsRadioButtonGroup);

    // Start/Stop button
    const startStopButton = new StartStopButton(model.runningProperty, {
      right: numberOfCarsRadioButtonGroup.left - BUTTON_X_SPACE,
      centerY: this.layoutBounds.centerY
    });
    playAreaLayer.addChild(startStopButton);

    // Reset Race button
    const resetRace = new ResetRaceButton({
      listener: () => {
        model.runningProperty.value = false;
        model.car1.resetRace();
        model.car2.resetRace();
      },
      right: startStopButton.left - BUTTON_X_SPACE,
      centerY: startStopButton.centerY
    });
    playAreaLayer.addChild(resetRace);

    // Reset All button
    const resetAllButton = new ResetAllButton({
      listener: () => {
        this.interruptSubtreeInput();
        model.reset();
        viewProperties.reset();
      },
      right: this.layoutBounds.maxX - URConstants.SCREEN_X_MARGIN,
      bottom: this.layoutBounds.maxY - URConstants.SCREEN_Y_MARGIN
    });
    playAreaLayer.addChild(resetAllButton);

    // car1 should always be visible, because the view doesn't doesn't support hiding it. unlink not needed.
    model.car1.visibleProperty.link(visible => {
      assert && assert(model.car1.visibleProperty.value, 'car1 should always be visible');
    });

    // Show/hide components related to car2. unlink not needed.
    model.car2.visibleProperty.link(visible => {
      rateAccordionBox2.visible = visible;
      doubleNumberLineAccordionBox2.visible = visible;
      trackNode2.visible = visible;
    });

    // Disable the restart button when both cars are at the starting line. unmultilink not needed
    Multilink.multilink([model.car1.distanceProperty, model.car2.distanceProperty], (distance1, distance2) => {
      resetRace.enabled = !(distance1 === 0 && distance2 === 0);
    });
  }
}
unitRates.register('RacingLabScreenView', RacingLabScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJTY3JlZW5WaWV3IiwiUmVzZXRBbGxCdXR0b24iLCJOb2RlIiwiVVJDb25zdGFudHMiLCJEb3VibGVOdW1iZXJMaW5lQWNjb3JkaW9uQm94IiwiS2V5cGFkTGF5ZXIiLCJ1bml0UmF0ZXMiLCJVbml0UmF0ZXNTdHJpbmdzIiwiTnVtYmVyT2ZDYXJzUmFkaW9CdXR0b25Hcm91cCIsIlJhY2VDYXJSYXRlQWNjb3JkaW9uQm94IiwiUmFjZVRyYWNrTm9kZSIsIlJhY2luZ0xhYlZpZXdQcm9wZXJ0aWVzIiwiUmVzZXRSYWNlQnV0dG9uIiwiU3RhcnRTdG9wQnV0dG9uIiwiQlVUVE9OX1hfU1BBQ0UiLCJBQ0NPUkRJT05fQk9YX1hfU1BBQ0UiLCJSYWNpbmdMYWJTY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm9wdGlvbnMiLCJ2aWV3UHJvcGVydGllcyIsInBsYXlBcmVhTGF5ZXIiLCJhZGRDaGlsZCIsImtleXBhZExheWVyIiwiZG91YmxlTnVtYmVyTGluZUFjY29yZGlvbkJveDEiLCJjYXIxIiwiZG91YmxlTnVtYmVyTGluZSIsIm1hcmtlckVkaXRvciIsImF4aXNWaWV3TGVuZ3RoIiwiUkFDSU5HX0xBQl9BWElTX0xFTkdUSCIsInRpdGxlU3RyaW5nIiwiZG91YmxlTnVtYmVyTGluZTFTdHJpbmdQcm9wZXJ0eSIsImV4cGFuZGVkUHJvcGVydHkiLCJkb3VibGVOdW1iZXJMaW5lRXhwYW5kZWRQcm9wZXJ0eTEiLCJpbmRpY2F0b3JYUHJvcGVydHkiLCJkaXN0YW5jZVByb3BlcnR5IiwiaW5kaWNhdG9yQ29sb3IiLCJjb2xvciIsImtleXBhZFBvc2l0aW9uIiwibGVmdCIsImxheW91dEJvdW5kcyIsIlNDUkVFTl9YX01BUkdJTiIsInRvcCIsIlNDUkVFTl9ZX01BUkdJTiIsImRvdWJsZU51bWJlckxpbmVBY2NvcmRpb25Cb3gyIiwiY2FyMiIsImRvdWJsZU51bWJlckxpbmUyU3RyaW5nUHJvcGVydHkiLCJkb3VibGVOdW1iZXJMaW5lRXhwYW5kZWRQcm9wZXJ0eTIiLCJib3R0b20iLCJyYXRlQWNjb3JkaW9uQm94MSIsInJhdGUxU3RyaW5nUHJvcGVydHkiLCJyYXRlRXhwYW5kZWRQcm9wZXJ0eTEiLCJyaWdodCIsInJhdGVBY2NvcmRpb25Cb3gyIiwicmF0ZTJTdHJpbmdQcm9wZXJ0eSIsInJhdGVFeHBhbmRlZFByb3BlcnR5MiIsInRyYWNrTm9kZTEiLCJ0aW1lckV4cGFuZGVkUHJvcGVydHkxIiwiYXJyb3dzVmlzaWJsZVByb3BlcnR5IiwidGltZXJUaXRsZVN0cmluZyIsInRpbWVyMVN0cmluZ1Byb3BlcnR5IiwidHJhY2tWaWV3TGVuZ3RoIiwieCIsImdsb2JhbFRvTG9jYWxQb2ludCIsImdldEdsb2JhbE9yaWdpbiIsImNlbnRlclkiLCJ0cmFja05vZGUyIiwidGltZXJFeHBhbmRlZFByb3BlcnR5MiIsInRpbWVyMlN0cmluZ1Byb3BlcnR5IiwibnVtYmVyT2ZDYXJzUmFkaW9CdXR0b25Hcm91cCIsInZpc2libGVQcm9wZXJ0eSIsIm1heFgiLCJzdGFydFN0b3BCdXR0b24iLCJydW5uaW5nUHJvcGVydHkiLCJyZXNldFJhY2UiLCJsaXN0ZW5lciIsInZhbHVlIiwicmVzZXRBbGxCdXR0b24iLCJpbnRlcnJ1cHRTdWJ0cmVlSW5wdXQiLCJyZXNldCIsIm1heFkiLCJsaW5rIiwidmlzaWJsZSIsImFzc2VydCIsIm11bHRpbGluayIsImRpc3RhbmNlMSIsImRpc3RhbmNlMiIsImVuYWJsZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJhY2luZ0xhYlNjcmVlblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgdGhlICdSYWNpbmcgTGFiJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBTY3JlZW5WaWV3IGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgUmVzZXRBbGxCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2J1dHRvbnMvUmVzZXRBbGxCdXR0b24uanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFVSQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9VUkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBEb3VibGVOdW1iZXJMaW5lQWNjb3JkaW9uQm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0RvdWJsZU51bWJlckxpbmVBY2NvcmRpb25Cb3guanMnO1xyXG5pbXBvcnQgS2V5cGFkTGF5ZXIgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvS2V5cGFkTGF5ZXIuanMnO1xyXG5pbXBvcnQgdW5pdFJhdGVzIGZyb20gJy4uLy4uL3VuaXRSYXRlcy5qcyc7XHJcbmltcG9ydCBVbml0UmF0ZXNTdHJpbmdzIGZyb20gJy4uLy4uL1VuaXRSYXRlc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgTnVtYmVyT2ZDYXJzUmFkaW9CdXR0b25Hcm91cCBmcm9tICcuL051bWJlck9mQ2Fyc1JhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgUmFjZUNhclJhdGVBY2NvcmRpb25Cb3ggZnJvbSAnLi9SYWNlQ2FyUmF0ZUFjY29yZGlvbkJveC5qcyc7XHJcbmltcG9ydCBSYWNlVHJhY2tOb2RlIGZyb20gJy4vUmFjZVRyYWNrTm9kZS5qcyc7XHJcbmltcG9ydCBSYWNpbmdMYWJWaWV3UHJvcGVydGllcyBmcm9tICcuL1JhY2luZ0xhYlZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IFJlc2V0UmFjZUJ1dHRvbiBmcm9tICcuL1Jlc2V0UmFjZUJ1dHRvbi5qcyc7XHJcbmltcG9ydCBTdGFydFN0b3BCdXR0b24gZnJvbSAnLi9TdGFydFN0b3BCdXR0b24uanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEJVVFRPTl9YX1NQQUNFID0gMjA7IC8vIHNwYWNlIGJldHdlZW4gYnV0dG9uc1xyXG5jb25zdCBBQ0NPUkRJT05fQk9YX1hfU1BBQ0UgPSAxMDsgLy8gc3BhY2UgYmV0d2VlbiBhY2NvcmRpb24gYm94ZXNcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhY2luZ0xhYlNjcmVlblZpZXcgZXh0ZW5kcyBTY3JlZW5WaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtSYWNpbmdMYWJNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBvcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gUHJvcGVydGllcyB0aGF0IGFyZSBzcGVjaWZpYyB0byB0aGUgdmlld1xyXG4gICAgY29uc3Qgdmlld1Byb3BlcnRpZXMgPSBuZXcgUmFjaW5nTGFiVmlld1Byb3BlcnRpZXMoKTtcclxuXHJcbiAgICAvLyBwYXJlbnQgZm9yIGV2ZXJ5dGhpbmcgZXhwZWN0IHRoZSBrZXlwYWRcclxuICAgIGNvbnN0IHBsYXlBcmVhTGF5ZXIgPSBuZXcgTm9kZSgpO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcGxheUFyZWFMYXllciApO1xyXG5cclxuICAgIC8vIHNlcGFyYXRlIGxheWVyIGZvciBtb2RlbCBrZXlwYWRcclxuICAgIGNvbnN0IGtleXBhZExheWVyID0gbmV3IEtleXBhZExheWVyKCk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBrZXlwYWRMYXllciApO1xyXG5cclxuICAgIC8vIERvdWJsZSBudW1iZXIgbGluZSBmb3IgY2FyMVxyXG4gICAgY29uc3QgZG91YmxlTnVtYmVyTGluZUFjY29yZGlvbkJveDEgPSBuZXcgRG91YmxlTnVtYmVyTGluZUFjY29yZGlvbkJveChcclxuICAgICAgbW9kZWwuY2FyMS5kb3VibGVOdW1iZXJMaW5lLCBtb2RlbC5jYXIxLm1hcmtlckVkaXRvciwga2V5cGFkTGF5ZXIsIHtcclxuICAgICAgICBheGlzVmlld0xlbmd0aDogVVJDb25zdGFudHMuUkFDSU5HX0xBQl9BWElTX0xFTkdUSCxcclxuICAgICAgICB0aXRsZVN0cmluZzogVW5pdFJhdGVzU3RyaW5ncy5kb3VibGVOdW1iZXJMaW5lMVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgIGV4cGFuZGVkUHJvcGVydHk6IHZpZXdQcm9wZXJ0aWVzLmRvdWJsZU51bWJlckxpbmVFeHBhbmRlZFByb3BlcnR5MSxcclxuICAgICAgICBpbmRpY2F0b3JYUHJvcGVydHk6IG1vZGVsLmNhcjEuZGlzdGFuY2VQcm9wZXJ0eSxcclxuICAgICAgICBpbmRpY2F0b3JDb2xvcjogbW9kZWwuY2FyMS5jb2xvcixcclxuICAgICAgICBrZXlwYWRQb3NpdGlvbjogJ2JlbG93JyxcclxuICAgICAgICBsZWZ0OiB0aGlzLmxheW91dEJvdW5kcy5sZWZ0ICsgVVJDb25zdGFudHMuU0NSRUVOX1hfTUFSR0lOLFxyXG4gICAgICAgIHRvcDogdGhpcy5sYXlvdXRCb3VuZHMudG9wICsgVVJDb25zdGFudHMuU0NSRUVOX1lfTUFSR0lOXHJcbiAgICAgIH0gKTtcclxuICAgIHBsYXlBcmVhTGF5ZXIuYWRkQ2hpbGQoIGRvdWJsZU51bWJlckxpbmVBY2NvcmRpb25Cb3gxICk7XHJcblxyXG4gICAgLy8gRG91YmxlIG51bWJlciBsaW5lIGZvciBjYXIyXHJcbiAgICBjb25zdCBkb3VibGVOdW1iZXJMaW5lQWNjb3JkaW9uQm94MiA9IG5ldyBEb3VibGVOdW1iZXJMaW5lQWNjb3JkaW9uQm94KFxyXG4gICAgICBtb2RlbC5jYXIyLmRvdWJsZU51bWJlckxpbmUsIG1vZGVsLmNhcjIubWFya2VyRWRpdG9yLCBrZXlwYWRMYXllciwge1xyXG4gICAgICAgIGF4aXNWaWV3TGVuZ3RoOiBVUkNvbnN0YW50cy5SQUNJTkdfTEFCX0FYSVNfTEVOR1RILFxyXG4gICAgICAgIHRpdGxlU3RyaW5nOiBVbml0UmF0ZXNTdHJpbmdzLmRvdWJsZU51bWJlckxpbmUyU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgZXhwYW5kZWRQcm9wZXJ0eTogdmlld1Byb3BlcnRpZXMuZG91YmxlTnVtYmVyTGluZUV4cGFuZGVkUHJvcGVydHkyLFxyXG4gICAgICAgIGluZGljYXRvclhQcm9wZXJ0eTogbW9kZWwuY2FyMi5kaXN0YW5jZVByb3BlcnR5LFxyXG4gICAgICAgIGluZGljYXRvckNvbG9yOiBtb2RlbC5jYXIyLmNvbG9yLFxyXG4gICAgICAgIGtleXBhZFBvc2l0aW9uOiAnYWJvdmUnLFxyXG4gICAgICAgIGxlZnQ6IHRoaXMubGF5b3V0Qm91bmRzLmxlZnQgKyBVUkNvbnN0YW50cy5TQ1JFRU5fWF9NQVJHSU4sXHJcbiAgICAgICAgYm90dG9tOiB0aGlzLmxheW91dEJvdW5kcy5ib3R0b20gLSBVUkNvbnN0YW50cy5TQ1JFRU5fWV9NQVJHSU5cclxuICAgICAgfSApO1xyXG4gICAgcGxheUFyZWFMYXllci5hZGRDaGlsZCggZG91YmxlTnVtYmVyTGluZUFjY29yZGlvbkJveDIgKTtcclxuXHJcbiAgICAvLyBSYXRlIGNvbnRyb2wgZm9yIGNhcjFcclxuICAgIGNvbnN0IHJhdGVBY2NvcmRpb25Cb3gxID0gbmV3IFJhY2VDYXJSYXRlQWNjb3JkaW9uQm94KCBtb2RlbC5jYXIxLCB7XHJcbiAgICAgIHRpdGxlU3RyaW5nOiBVbml0UmF0ZXNTdHJpbmdzLnJhdGUxU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGV4cGFuZGVkUHJvcGVydHk6IHZpZXdQcm9wZXJ0aWVzLnJhdGVFeHBhbmRlZFByb3BlcnR5MSxcclxuICAgICAgbGVmdDogZG91YmxlTnVtYmVyTGluZUFjY29yZGlvbkJveDEucmlnaHQgKyBBQ0NPUkRJT05fQk9YX1hfU1BBQ0UsXHJcbiAgICAgIHRvcDogZG91YmxlTnVtYmVyTGluZUFjY29yZGlvbkJveDEudG9wXHJcbiAgICB9ICk7XHJcbiAgICBwbGF5QXJlYUxheWVyLmFkZENoaWxkKCByYXRlQWNjb3JkaW9uQm94MSApO1xyXG5cclxuICAgIC8vIFJhdGUgY29udHJvbCBmb3IgY2FyMlxyXG4gICAgY29uc3QgcmF0ZUFjY29yZGlvbkJveDIgPSBuZXcgUmFjZUNhclJhdGVBY2NvcmRpb25Cb3goIG1vZGVsLmNhcjIsIHtcclxuICAgICAgdGl0bGVTdHJpbmc6IFVuaXRSYXRlc1N0cmluZ3MucmF0ZTJTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgZXhwYW5kZWRQcm9wZXJ0eTogdmlld1Byb3BlcnRpZXMucmF0ZUV4cGFuZGVkUHJvcGVydHkyLFxyXG4gICAgICBsZWZ0OiBkb3VibGVOdW1iZXJMaW5lQWNjb3JkaW9uQm94Mi5yaWdodCArIEFDQ09SRElPTl9CT1hfWF9TUEFDRSxcclxuICAgICAgdG9wOiBkb3VibGVOdW1iZXJMaW5lQWNjb3JkaW9uQm94Mi50b3BcclxuICAgIH0gKTtcclxuICAgIHBsYXlBcmVhTGF5ZXIuYWRkQ2hpbGQoIHJhdGVBY2NvcmRpb25Cb3gyICk7XHJcblxyXG4gICAgLy8gVHJhY2sgZm9yIGNhcjFcclxuICAgIGNvbnN0IHRyYWNrTm9kZTEgPSBuZXcgUmFjZVRyYWNrTm9kZSggbW9kZWwuY2FyMSwgdmlld1Byb3BlcnRpZXMudGltZXJFeHBhbmRlZFByb3BlcnR5MSwgdmlld1Byb3BlcnRpZXMuYXJyb3dzVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgIHRpbWVyVGl0bGVTdHJpbmc6IFVuaXRSYXRlc1N0cmluZ3MudGltZXIxU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIHRyYWNrVmlld0xlbmd0aDogVVJDb25zdGFudHMuUkFDSU5HX0xBQl9BWElTX0xFTkdUSCxcclxuICAgICAgeDogdGhpcy5nbG9iYWxUb0xvY2FsUG9pbnQoIGRvdWJsZU51bWJlckxpbmVBY2NvcmRpb25Cb3gxLmdldEdsb2JhbE9yaWdpbigpICkueCwgLy8gYWxpZ25lZCB3aXRoIGRvdWJsZSBudW1iZXIgbGluZVxyXG4gICAgICBib3R0b206IHRoaXMubGF5b3V0Qm91bmRzLmNlbnRlclkgLSAxMFxyXG4gICAgfSApO1xyXG4gICAgcGxheUFyZWFMYXllci5hZGRDaGlsZCggdHJhY2tOb2RlMSApO1xyXG5cclxuICAgIC8vIFRyYWNrIGZvciBjYXIyXHJcbiAgICBjb25zdCB0cmFja05vZGUyID0gbmV3IFJhY2VUcmFja05vZGUoIG1vZGVsLmNhcjIsIHZpZXdQcm9wZXJ0aWVzLnRpbWVyRXhwYW5kZWRQcm9wZXJ0eTIsIHZpZXdQcm9wZXJ0aWVzLmFycm93c1Zpc2libGVQcm9wZXJ0eSwge1xyXG4gICAgICB0aW1lclRpdGxlU3RyaW5nOiBVbml0UmF0ZXNTdHJpbmdzLnRpbWVyMlN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICB0cmFja1ZpZXdMZW5ndGg6IFVSQ29uc3RhbnRzLlJBQ0lOR19MQUJfQVhJU19MRU5HVEgsXHJcbiAgICAgIHg6IHRoaXMuZ2xvYmFsVG9Mb2NhbFBvaW50KCBkb3VibGVOdW1iZXJMaW5lQWNjb3JkaW9uQm94Mi5nZXRHbG9iYWxPcmlnaW4oKSApLngsIC8vIGFsaWduZWQgd2l0aCBkb3VibGUgbnVtYmVyIGxpbmVcclxuICAgICAgdG9wOiB0aGlzLmxheW91dEJvdW5kcy5jZW50ZXJZICsgKCB0aGlzLmxheW91dEJvdW5kcy5jZW50ZXJZIC0gdHJhY2tOb2RlMS5ib3R0b20gKVxyXG4gICAgfSApO1xyXG4gICAgcGxheUFyZWFMYXllci5hZGRDaGlsZCggdHJhY2tOb2RlMiApO1xyXG5cclxuICAgIC8vIFJhZGlvIGJ1dHRvbiBncm91cCBmb3IgbnVtYmVyIG9mIGNhcnNcclxuICAgIGNvbnN0IG51bWJlck9mQ2Fyc1JhZGlvQnV0dG9uR3JvdXAgPSBuZXcgTnVtYmVyT2ZDYXJzUmFkaW9CdXR0b25Hcm91cCggbW9kZWwuY2FyMi52aXNpYmxlUHJvcGVydHksIHtcclxuICAgICAgcmlnaHQ6IHRoaXMubGF5b3V0Qm91bmRzLm1heFggLSBVUkNvbnN0YW50cy5TQ1JFRU5fWF9NQVJHSU4sXHJcbiAgICAgIGNlbnRlclk6IHRoaXMubGF5b3V0Qm91bmRzLmNlbnRlcllcclxuICAgIH0gKTtcclxuICAgIHBsYXlBcmVhTGF5ZXIuYWRkQ2hpbGQoIG51bWJlck9mQ2Fyc1JhZGlvQnV0dG9uR3JvdXAgKTtcclxuXHJcbiAgICAvLyBTdGFydC9TdG9wIGJ1dHRvblxyXG4gICAgY29uc3Qgc3RhcnRTdG9wQnV0dG9uID0gbmV3IFN0YXJ0U3RvcEJ1dHRvbiggbW9kZWwucnVubmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIHJpZ2h0OiBudW1iZXJPZkNhcnNSYWRpb0J1dHRvbkdyb3VwLmxlZnQgLSBCVVRUT05fWF9TUEFDRSxcclxuICAgICAgY2VudGVyWTogdGhpcy5sYXlvdXRCb3VuZHMuY2VudGVyWVxyXG4gICAgfSApO1xyXG4gICAgcGxheUFyZWFMYXllci5hZGRDaGlsZCggc3RhcnRTdG9wQnV0dG9uICk7XHJcblxyXG4gICAgLy8gUmVzZXQgUmFjZSBidXR0b25cclxuICAgIGNvbnN0IHJlc2V0UmFjZSA9IG5ldyBSZXNldFJhY2VCdXR0b24oIHtcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICBtb2RlbC5ydW5uaW5nUHJvcGVydHkudmFsdWUgPSBmYWxzZTtcclxuICAgICAgICBtb2RlbC5jYXIxLnJlc2V0UmFjZSgpO1xyXG4gICAgICAgIG1vZGVsLmNhcjIucmVzZXRSYWNlKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJpZ2h0OiBzdGFydFN0b3BCdXR0b24ubGVmdCAtIEJVVFRPTl9YX1NQQUNFLFxyXG4gICAgICBjZW50ZXJZOiBzdGFydFN0b3BCdXR0b24uY2VudGVyWVxyXG4gICAgfSApO1xyXG4gICAgcGxheUFyZWFMYXllci5hZGRDaGlsZCggcmVzZXRSYWNlICk7XHJcblxyXG4gICAgLy8gUmVzZXQgQWxsIGJ1dHRvblxyXG4gICAgY29uc3QgcmVzZXRBbGxCdXR0b24gPSBuZXcgUmVzZXRBbGxCdXR0b24oIHtcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICB0aGlzLmludGVycnVwdFN1YnRyZWVJbnB1dCgpO1xyXG4gICAgICAgIG1vZGVsLnJlc2V0KCk7XHJcbiAgICAgICAgdmlld1Byb3BlcnRpZXMucmVzZXQoKTtcclxuICAgICAgfSxcclxuICAgICAgcmlnaHQ6IHRoaXMubGF5b3V0Qm91bmRzLm1heFggLSBVUkNvbnN0YW50cy5TQ1JFRU5fWF9NQVJHSU4sXHJcbiAgICAgIGJvdHRvbTogdGhpcy5sYXlvdXRCb3VuZHMubWF4WSAtIFVSQ29uc3RhbnRzLlNDUkVFTl9ZX01BUkdJTlxyXG4gICAgfSApO1xyXG4gICAgcGxheUFyZWFMYXllci5hZGRDaGlsZCggcmVzZXRBbGxCdXR0b24gKTtcclxuXHJcbiAgICAvLyBjYXIxIHNob3VsZCBhbHdheXMgYmUgdmlzaWJsZSwgYmVjYXVzZSB0aGUgdmlldyBkb2Vzbid0IGRvZXNuJ3Qgc3VwcG9ydCBoaWRpbmcgaXQuIHVubGluayBub3QgbmVlZGVkLlxyXG4gICAgbW9kZWwuY2FyMS52aXNpYmxlUHJvcGVydHkubGluayggdmlzaWJsZSA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIG1vZGVsLmNhcjEudmlzaWJsZVByb3BlcnR5LnZhbHVlLCAnY2FyMSBzaG91bGQgYWx3YXlzIGJlIHZpc2libGUnICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gU2hvdy9oaWRlIGNvbXBvbmVudHMgcmVsYXRlZCB0byBjYXIyLiB1bmxpbmsgbm90IG5lZWRlZC5cclxuICAgIG1vZGVsLmNhcjIudmlzaWJsZVByb3BlcnR5LmxpbmsoIHZpc2libGUgPT4ge1xyXG4gICAgICByYXRlQWNjb3JkaW9uQm94Mi52aXNpYmxlID0gdmlzaWJsZTtcclxuICAgICAgZG91YmxlTnVtYmVyTGluZUFjY29yZGlvbkJveDIudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICAgIHRyYWNrTm9kZTIudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gRGlzYWJsZSB0aGUgcmVzdGFydCBidXR0b24gd2hlbiBib3RoIGNhcnMgYXJlIGF0IHRoZSBzdGFydGluZyBsaW5lLiB1bm11bHRpbGluayBub3QgbmVlZGVkXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIG1vZGVsLmNhcjEuZGlzdGFuY2VQcm9wZXJ0eSwgbW9kZWwuY2FyMi5kaXN0YW5jZVByb3BlcnR5IF0sXHJcbiAgICAgICggZGlzdGFuY2UxLCBkaXN0YW5jZTIgKSA9PiB7XHJcbiAgICAgICAgcmVzZXRSYWNlLmVuYWJsZWQgPSAhKCBkaXN0YW5jZTEgPT09IDAgJiYgZGlzdGFuY2UyID09PSAwICk7XHJcbiAgICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbnVuaXRSYXRlcy5yZWdpc3RlciggJ1JhY2luZ0xhYlNjcmVlblZpZXcnLCBSYWNpbmdMYWJTY3JlZW5WaWV3ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsVUFBVSxNQUFNLG9DQUFvQztBQUMzRCxPQUFPQyxjQUFjLE1BQU0sdURBQXVEO0FBQ2xGLFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsV0FBVyxNQUFNLDZCQUE2QjtBQUNyRCxPQUFPQyw0QkFBNEIsTUFBTSxtREFBbUQ7QUFDNUYsT0FBT0MsV0FBVyxNQUFNLGtDQUFrQztBQUMxRCxPQUFPQyxTQUFTLE1BQU0sb0JBQW9CO0FBQzFDLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyw0QkFBNEIsTUFBTSxtQ0FBbUM7QUFDNUUsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBQ2xFLE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFDOUMsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBQ2xFLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFDbEQsT0FB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