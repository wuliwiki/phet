// Copyright 2017-2023, University of Colorado Boulder

/**
 * Model of a rate.
 *
 * A ratio is a comparison of two numbers.
 * The two numbers are called terms, herein referred to as numerator and denominator.
 * A rate is a ratio where the measurements are in different units.
 * A unit rate is a rate where the denominator is 1.
 *
 * Note that the model does not include units. This sim has multiple ways of displaying units that are
 * semantically equivalent (e.g. pound, pounds, lbs), so units are the responsibility of the client.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Utils from '../../../../dot/js/Utils.js';
import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import unitRates from '../../unitRates.js';
import URUtils from '../URUtils.js';
export default class Rate {
  /**
   * @param {number} numerator - the rate's numerator, must be an integer
   * @param {number} denominator - the rate's denominator, must be an integer
   */
  constructor(numerator, denominator) {
    assert && assert(Number.isInteger(numerator), `numerator must be an integer: ${numerator}`);
    assert && assert(Number.isInteger(denominator), `denominator must be an integer: ${denominator}`);

    // @public
    this.numeratorProperty = new NumberProperty(numerator);
    this.denominatorProperty = new NumberProperty(denominator);

    // @public (read-only) dispose not needed
    this.unitRateProperty = new DerivedProperty([this.numeratorProperty, this.denominatorProperty], (numerator, denominator) => numerator / denominator);
  }

  // @public
  reset() {
    this.numeratorProperty.reset();
    this.denominatorProperty.reset();
  }

  /**
   * String representation. For debugging and logging only. Do not rely on the format of this!
   * @returns {string}
   * @public
   */
  toString() {
    return `${this.numeratorProperty.value}/${this.denominatorProperty.value}`;
  }

  /**
   * Creates a Rate using a unit rate.
   * The Rate returned is the closest rate that can be represented with integers.
   * @param {number} unitRate
   * @returns {Rate}
   * @public
   * @static
   */
  static withUnitRate(unitRate) {
    // compute corresponding numerator and denominator
    const denominator = Math.pow(10, URUtils.decimalPlaces(unitRate));
    const fraction = new Fraction(unitRate * denominator, denominator);
    fraction.reduce();

    // use closest integer values
    return new Rate(Utils.toFixedNumber(fraction.numerator, 0), Utils.toFixedNumber(fraction.denominator, 0));
  }
}
unitRates.register('Rate', Rate);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlV0aWxzIiwiRnJhY3Rpb24iLCJ1bml0UmF0ZXMiLCJVUlV0aWxzIiwiUmF0ZSIsImNvbnN0cnVjdG9yIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJhc3NlcnQiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJudW1lcmF0b3JQcm9wZXJ0eSIsImRlbm9taW5hdG9yUHJvcGVydHkiLCJ1bml0UmF0ZVByb3BlcnR5IiwicmVzZXQiLCJ0b1N0cmluZyIsInZhbHVlIiwid2l0aFVuaXRSYXRlIiwidW5pdFJhdGUiLCJNYXRoIiwicG93IiwiZGVjaW1hbFBsYWNlcyIsImZyYWN0aW9uIiwicmVkdWNlIiwidG9GaXhlZE51bWJlciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBvZiBhIHJhdGUuXHJcbiAqXHJcbiAqIEEgcmF0aW8gaXMgYSBjb21wYXJpc29uIG9mIHR3byBudW1iZXJzLlxyXG4gKiBUaGUgdHdvIG51bWJlcnMgYXJlIGNhbGxlZCB0ZXJtcywgaGVyZWluIHJlZmVycmVkIHRvIGFzIG51bWVyYXRvciBhbmQgZGVub21pbmF0b3IuXHJcbiAqIEEgcmF0ZSBpcyBhIHJhdGlvIHdoZXJlIHRoZSBtZWFzdXJlbWVudHMgYXJlIGluIGRpZmZlcmVudCB1bml0cy5cclxuICogQSB1bml0IHJhdGUgaXMgYSByYXRlIHdoZXJlIHRoZSBkZW5vbWluYXRvciBpcyAxLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgdGhlIG1vZGVsIGRvZXMgbm90IGluY2x1ZGUgdW5pdHMuIFRoaXMgc2ltIGhhcyBtdWx0aXBsZSB3YXlzIG9mIGRpc3BsYXlpbmcgdW5pdHMgdGhhdCBhcmVcclxuICogc2VtYW50aWNhbGx5IGVxdWl2YWxlbnQgKGUuZy4gcG91bmQsIHBvdW5kcywgbGJzKSwgc28gdW5pdHMgYXJlIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgY2xpZW50LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgRnJhY3Rpb24gZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy9tb2RlbC9GcmFjdGlvbi5qcyc7XHJcbmltcG9ydCB1bml0UmF0ZXMgZnJvbSAnLi4vLi4vdW5pdFJhdGVzLmpzJztcclxuaW1wb3J0IFVSVXRpbHMgZnJvbSAnLi4vVVJVdGlscy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYXRlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWVyYXRvciAtIHRoZSByYXRlJ3MgbnVtZXJhdG9yLCBtdXN0IGJlIGFuIGludGVnZXJcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVub21pbmF0b3IgLSB0aGUgcmF0ZSdzIGRlbm9taW5hdG9yLCBtdXN0IGJlIGFuIGludGVnZXJcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbnVtZXJhdG9yLCBkZW5vbWluYXRvciApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBOdW1iZXIuaXNJbnRlZ2VyKCBudW1lcmF0b3IgKSwgYG51bWVyYXRvciBtdXN0IGJlIGFuIGludGVnZXI6ICR7bnVtZXJhdG9yfWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIE51bWJlci5pc0ludGVnZXIoIGRlbm9taW5hdG9yICksIGBkZW5vbWluYXRvciBtdXN0IGJlIGFuIGludGVnZXI6ICR7ZGVub21pbmF0b3J9YCApO1xyXG5cclxuICAgIC8vIEBwdWJsaWNcclxuICAgIHRoaXMubnVtZXJhdG9yUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIG51bWVyYXRvciApO1xyXG4gICAgdGhpcy5kZW5vbWluYXRvclByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCBkZW5vbWluYXRvciApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgZGlzcG9zZSBub3QgbmVlZGVkXHJcbiAgICB0aGlzLnVuaXRSYXRlUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIHRoaXMubnVtZXJhdG9yUHJvcGVydHksIHRoaXMuZGVub21pbmF0b3JQcm9wZXJ0eSBdLFxyXG4gICAgICAoIG51bWVyYXRvciwgZGVub21pbmF0b3IgKSA9PiAoIG51bWVyYXRvciAvIGRlbm9taW5hdG9yIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLm51bWVyYXRvclByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmRlbm9taW5hdG9yUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0cmluZyByZXByZXNlbnRhdGlvbi4gRm9yIGRlYnVnZ2luZyBhbmQgbG9nZ2luZyBvbmx5LiBEbyBub3QgcmVseSBvbiB0aGUgZm9ybWF0IG9mIHRoaXMhXHJcbiAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy5udW1lcmF0b3JQcm9wZXJ0eS52YWx1ZX0vJHt0aGlzLmRlbm9taW5hdG9yUHJvcGVydHkudmFsdWV9YDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBSYXRlIHVzaW5nIGEgdW5pdCByYXRlLlxyXG4gICAqIFRoZSBSYXRlIHJldHVybmVkIGlzIHRoZSBjbG9zZXN0IHJhdGUgdGhhdCBjYW4gYmUgcmVwcmVzZW50ZWQgd2l0aCBpbnRlZ2Vycy5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gdW5pdFJhdGVcclxuICAgKiBAcmV0dXJucyB7UmF0ZX1cclxuICAgKiBAcHVibGljXHJcbiAgICogQHN0YXRpY1xyXG4gICAqL1xyXG4gIHN0YXRpYyB3aXRoVW5pdFJhdGUoIHVuaXRSYXRlICkge1xyXG5cclxuICAgIC8vIGNvbXB1dGUgY29ycmVzcG9uZGluZyBudW1lcmF0b3IgYW5kIGRlbm9taW5hdG9yXHJcbiAgICBjb25zdCBkZW5vbWluYXRvciA9IE1hdGgucG93KCAxMCwgVVJVdGlscy5kZWNpbWFsUGxhY2VzKCB1bml0UmF0ZSApICk7XHJcbiAgICBjb25zdCBmcmFjdGlvbiA9IG5ldyBGcmFjdGlvbiggdW5pdFJhdGUgKiBkZW5vbWluYXRvciwgZGVub21pbmF0b3IgKTtcclxuICAgIGZyYWN0aW9uLnJlZHVjZSgpO1xyXG5cclxuICAgIC8vIHVzZSBjbG9zZXN0IGludGVnZXIgdmFsdWVzXHJcbiAgICByZXR1cm4gbmV3IFJhdGUoIFV0aWxzLnRvRml4ZWROdW1iZXIoIGZyYWN0aW9uLm51bWVyYXRvciwgMCApLCBVdGlscy50b0ZpeGVkTnVtYmVyKCBmcmFjdGlvbi5kZW5vbWluYXRvciwgMCApICk7XHJcbiAgfVxyXG59XHJcblxyXG51bml0UmF0ZXMucmVnaXN0ZXIoICdSYXRlJywgUmF0ZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsUUFBUSxNQUFNLDZDQUE2QztBQUNsRSxPQUFPQyxTQUFTLE1BQU0sb0JBQW9CO0FBQzFDLE9BQU9DLE9BQU8sTUFBTSxlQUFlO0FBRW5DLGVBQWUsTUFBTUMsSUFBSSxDQUFDO0VBRXhCO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLFNBQVMsRUFBRUMsV0FBVyxFQUFHO0lBRXBDQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsTUFBTSxDQUFDQyxTQUFTLENBQUVKLFNBQVUsQ0FBQyxFQUFHLGlDQUFnQ0EsU0FBVSxFQUFFLENBQUM7SUFDL0ZFLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxNQUFNLENBQUNDLFNBQVMsQ0FBRUgsV0FBWSxDQUFDLEVBQUcsbUNBQWtDQSxXQUFZLEVBQUUsQ0FBQzs7SUFFckc7SUFDQSxJQUFJLENBQUNJLGlCQUFpQixHQUFHLElBQUlaLGNBQWMsQ0FBRU8sU0FBVSxDQUFDO0lBQ3hELElBQUksQ0FBQ00sbUJBQW1CLEdBQUcsSUFBSWIsY0FBYyxDQUFFUSxXQUFZLENBQUM7O0lBRTVEO0lBQ0EsSUFBSSxDQUFDTSxnQkFBZ0IsR0FBRyxJQUFJZixlQUFlLENBQ3pDLENBQUUsSUFBSSxDQUFDYSxpQkFBaUIsRUFBRSxJQUFJLENBQUNDLG1CQUFtQixDQUFFLEVBQ3BELENBQUVOLFNBQVMsRUFBRUMsV0FBVyxLQUFRRCxTQUFTLEdBQUdDLFdBQzlDLENBQUM7RUFDSDs7RUFFQTtFQUNBTyxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNILGlCQUFpQixDQUFDRyxLQUFLLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUNGLG1CQUFtQixDQUFDRSxLQUFLLENBQUMsQ0FBQztFQUNsQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFFBQVFBLENBQUEsRUFBRztJQUNULE9BQVEsR0FBRSxJQUFJLENBQUNKLGlCQUFpQixDQUFDSyxLQUFNLElBQUcsSUFBSSxDQUFDSixtQkFBbUIsQ0FBQ0ksS0FBTSxFQUFDO0VBQzVFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPQyxZQUFZQSxDQUFFQyxRQUFRLEVBQUc7SUFFOUI7SUFDQSxNQUFNWCxXQUFXLEdBQUdZLElBQUksQ0FBQ0MsR0FBRyxDQUFFLEVBQUUsRUFBRWpCLE9BQU8sQ0FBQ2tCLGFBQWEsQ0FBRUgsUUFBUyxDQUFFLENBQUM7SUFDckUsTUFBTUksUUFBUSxHQUFHLElBQUlyQixRQUFRLENBQUVpQixRQUFRLEdBQUdYLFdBQVcsRUFBRUEsV0FBWSxDQUFDO0lBQ3BFZSxRQUFRLENBQUNDLE1BQU0sQ0FBQyxDQUFDOztJQUVqQjtJQUNBLE9BQU8sSUFBSW5CLElBQUksQ0FBRUosS0FBSyxDQUFDd0IsYUFBYSxDQUFFRixRQUFRLENBQUNoQixTQUFTLEVBQUUsQ0FBRSxDQUFDLEVBQUVOLEtBQUssQ0FBQ3dCLGFBQWEsQ0FBRUYsUUFBUSxDQUFDZixXQUFXLEVBQUUsQ0FBRSxDQUFFLENBQUM7RUFDakg7QUFDRjtBQUVBTCxTQUFTLENBQUN1QixRQUFRLENBQUUsTUFBTSxFQUFFckIsSUFBSyxDQUFDIn0=