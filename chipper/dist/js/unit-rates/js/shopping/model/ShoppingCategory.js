// Copyright 2016-2023, University of Colorado Boulder

/**
 * A category in the 'Shopping' screen. A category is a group of related scenes.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import dotRandom from '../../../../dot/js/dotRandom.js';
import merge from '../../../../phet-core/js/merge.js';
import URQueryParameters from '../../common/URQueryParameters.js';
import unitRates from '../../unitRates.js';
export default class ShoppingCategory {
  /**
   * @param {HTMLImageElement} image - image used to represent the category
   * @param {ShoppingScene[]} shoppingScenes - scenes in the category
   * @param {Object} [options]
   */
  constructor(image, shoppingScenes, options) {
    assert && assert(shoppingScenes.length > 0, 'at least 1 ShoppingScene is required');
    options = merge({
      // index of the scene that is initially selected, randomly chosen
      shoppingSceneIndex: URQueryParameters.randomEnabled ? dotRandom.nextIntBetween(0, shoppingScenes.length - 1) : 0
    }, options);

    // validate options
    assert && assert(options.shoppingSceneIndex >= 0 && options.shoppingSceneIndex < shoppingScenes.length, `invalid shoppingSceneIndex: ${options.shoppingSceneIndex}`);

    // @public (read-only)
    this.image = image;
    this.shoppingScenes = shoppingScenes;
    this.shoppingSceneProperty = new Property(shoppingScenes[options.shoppingSceneIndex]);
  }

  // @public
  reset() {
    // Reset all scenes
    this.shoppingScenes.forEach(shoppingScene => shoppingScene.reset());
    this.shoppingSceneProperty.reset();
  }

  /**
   * Updates time-dependent parts of the model.
   * @param {number} dt - time since the previous step, in seconds
   * @public
   */
  step(dt) {
    // step the selected scene
    this.shoppingSceneProperty.value.step(dt);
  }
}
unitRates.register('ShoppingCategory', ShoppingCategory);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsImRvdFJhbmRvbSIsIm1lcmdlIiwiVVJRdWVyeVBhcmFtZXRlcnMiLCJ1bml0UmF0ZXMiLCJTaG9wcGluZ0NhdGVnb3J5IiwiY29uc3RydWN0b3IiLCJpbWFnZSIsInNob3BwaW5nU2NlbmVzIiwib3B0aW9ucyIsImFzc2VydCIsImxlbmd0aCIsInNob3BwaW5nU2NlbmVJbmRleCIsInJhbmRvbUVuYWJsZWQiLCJuZXh0SW50QmV0d2VlbiIsInNob3BwaW5nU2NlbmVQcm9wZXJ0eSIsInJlc2V0IiwiZm9yRWFjaCIsInNob3BwaW5nU2NlbmUiLCJzdGVwIiwiZHQiLCJ2YWx1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2hvcHBpbmdDYXRlZ29yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGNhdGVnb3J5IGluIHRoZSAnU2hvcHBpbmcnIHNjcmVlbi4gQSBjYXRlZ29yeSBpcyBhIGdyb3VwIG9mIHJlbGF0ZWQgc2NlbmVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBVUlF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vVVJRdWVyeVBhcmFtZXRlcnMuanMnO1xyXG5pbXBvcnQgdW5pdFJhdGVzIGZyb20gJy4uLy4uL3VuaXRSYXRlcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG9wcGluZ0NhdGVnb3J5IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtIVE1MSW1hZ2VFbGVtZW50fSBpbWFnZSAtIGltYWdlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBjYXRlZ29yeVxyXG4gICAqIEBwYXJhbSB7U2hvcHBpbmdTY2VuZVtdfSBzaG9wcGluZ1NjZW5lcyAtIHNjZW5lcyBpbiB0aGUgY2F0ZWdvcnlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGltYWdlLCBzaG9wcGluZ1NjZW5lcywgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzaG9wcGluZ1NjZW5lcy5sZW5ndGggPiAwLCAnYXQgbGVhc3QgMSBTaG9wcGluZ1NjZW5lIGlzIHJlcXVpcmVkJyApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8gaW5kZXggb2YgdGhlIHNjZW5lIHRoYXQgaXMgaW5pdGlhbGx5IHNlbGVjdGVkLCByYW5kb21seSBjaG9zZW5cclxuICAgICAgc2hvcHBpbmdTY2VuZUluZGV4OiBVUlF1ZXJ5UGFyYW1ldGVycy5yYW5kb21FbmFibGVkID8gZG90UmFuZG9tLm5leHRJbnRCZXR3ZWVuKCAwLCBzaG9wcGluZ1NjZW5lcy5sZW5ndGggLSAxICkgOiAwXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gdmFsaWRhdGUgb3B0aW9uc1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy5zaG9wcGluZ1NjZW5lSW5kZXggPj0gMCAmJiBvcHRpb25zLnNob3BwaW5nU2NlbmVJbmRleCA8IHNob3BwaW5nU2NlbmVzLmxlbmd0aCxcclxuICAgICAgYGludmFsaWQgc2hvcHBpbmdTY2VuZUluZGV4OiAke29wdGlvbnMuc2hvcHBpbmdTY2VuZUluZGV4fWAgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpXHJcbiAgICB0aGlzLmltYWdlID0gaW1hZ2U7XHJcbiAgICB0aGlzLnNob3BwaW5nU2NlbmVzID0gc2hvcHBpbmdTY2VuZXM7XHJcbiAgICB0aGlzLnNob3BwaW5nU2NlbmVQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggc2hvcHBpbmdTY2VuZXNbIG9wdGlvbnMuc2hvcHBpbmdTY2VuZUluZGV4IF0gKTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICByZXNldCgpIHtcclxuXHJcbiAgICAvLyBSZXNldCBhbGwgc2NlbmVzXHJcbiAgICB0aGlzLnNob3BwaW5nU2NlbmVzLmZvckVhY2goIHNob3BwaW5nU2NlbmUgPT4gc2hvcHBpbmdTY2VuZS5yZXNldCgpICk7XHJcblxyXG4gICAgdGhpcy5zaG9wcGluZ1NjZW5lUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGltZS1kZXBlbmRlbnQgcGFydHMgb2YgdGhlIG1vZGVsLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdCAtIHRpbWUgc2luY2UgdGhlIHByZXZpb3VzIHN0ZXAsIGluIHNlY29uZHNcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCggZHQgKSB7XHJcblxyXG4gICAgLy8gc3RlcCB0aGUgc2VsZWN0ZWQgc2NlbmVcclxuICAgIHRoaXMuc2hvcHBpbmdTY2VuZVByb3BlcnR5LnZhbHVlLnN0ZXAoIGR0ICk7XHJcbiAgfVxyXG59XHJcblxyXG51bml0UmF0ZXMucmVnaXN0ZXIoICdTaG9wcGluZ0NhdGVnb3J5JywgU2hvcHBpbmdDYXRlZ29yeSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFDakUsT0FBT0MsU0FBUyxNQUFNLG9CQUFvQjtBQUUxQyxlQUFlLE1BQU1DLGdCQUFnQixDQUFDO0VBRXBDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sRUFBRztJQUU1Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVGLGNBQWMsQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRSxzQ0FBdUMsQ0FBQztJQUVyRkYsT0FBTyxHQUFHUCxLQUFLLENBQUU7TUFFZjtNQUNBVSxrQkFBa0IsRUFBRVQsaUJBQWlCLENBQUNVLGFBQWEsR0FBR1osU0FBUyxDQUFDYSxjQUFjLENBQUUsQ0FBQyxFQUFFTixjQUFjLENBQUNHLE1BQU0sR0FBRyxDQUFFLENBQUMsR0FBRztJQUNuSCxDQUFDLEVBQUVGLE9BQVEsQ0FBQzs7SUFFWjtJQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsT0FBTyxDQUFDRyxrQkFBa0IsSUFBSSxDQUFDLElBQUlILE9BQU8sQ0FBQ0csa0JBQWtCLEdBQUdKLGNBQWMsQ0FBQ0csTUFBTSxFQUNwRywrQkFBOEJGLE9BQU8sQ0FBQ0csa0JBQW1CLEVBQUUsQ0FBQzs7SUFFL0Q7SUFDQSxJQUFJLENBQUNMLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNDLGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNPLHFCQUFxQixHQUFHLElBQUlmLFFBQVEsQ0FBRVEsY0FBYyxDQUFFQyxPQUFPLENBQUNHLGtCQUFrQixDQUFHLENBQUM7RUFDM0Y7O0VBRUE7RUFDQUksS0FBS0EsQ0FBQSxFQUFHO0lBRU47SUFDQSxJQUFJLENBQUNSLGNBQWMsQ0FBQ1MsT0FBTyxDQUFFQyxhQUFhLElBQUlBLGFBQWEsQ0FBQ0YsS0FBSyxDQUFDLENBQUUsQ0FBQztJQUVyRSxJQUFJLENBQUNELHFCQUFxQixDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNwQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLElBQUlBLENBQUVDLEVBQUUsRUFBRztJQUVUO0lBQ0EsSUFBSSxDQUFDTCxxQkFBcUIsQ0FBQ00sS0FBSyxDQUFDRixJQUFJLENBQUVDLEVBQUcsQ0FBQztFQUM3QztBQUNGO0FBRUFoQixTQUFTLENBQUNrQixRQUFRLENBQUUsa0JBQWtCLEVBQUVqQixnQkFBaUIsQ0FBQyJ9