// Copyright 2016-2023, University of Colorado Boulder

/**
 * The candy scene in the Shopping screen.
 * Candy differs significantly from other item types, as described by the ShoppingScene constructor options.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import merge from '../../../../phet-core/js/merge.js';
import URUtils from '../../common/URUtils.js';
import unitRates from '../../unitRates.js';
import UnitRatesStrings from '../../UnitRatesStrings.js';
import ShoppingItemData from './ShoppingItemData.js';
import ShoppingScene from './ShoppingScene.js';
export default class CandyScene extends ShoppingScene {
  /**
   * @param {Object} itemData - data structure that describes a type of candy, see ShoppingItemData
   * @param {Object} [options]
   */
  constructor(itemData, options) {
    assert && assert(_.includes(_.values(ShoppingItemData.Candy), itemData), 'itemData is not a candy');
    options = merge({
      // range of denominator, in pounds
      fixedAxisRange: new Range(0, 1.6),
      // Candy quantity is in pounds
      quantitySingularUnits: UnitRatesStrings.pound,
      quantityPluralUnits: UnitRatesStrings.pounds,
      // Candy questions require capitalization of 'Pounds', e.g. 'Pounds for $10.50?'
      // This hack was required by https://github.com/phetsims/unit-rates/issues/20
      amountOfQuestionUnits: UnitRatesStrings.poundsCapitalized,
      // {*|null} nest options for the rate's denominator, defaults provided below
      denominatorOptions: null,
      // Scale displays quantity in 'lbs' for Candy
      scaleQuantityIsDisplayed: true,
      scaleQuantityUnits: UnitRatesStrings.lbs,
      // Major markers have 1 decimal place in the denominator
      isMajorMarker: (numerator, denominator) => URUtils.decimalPlaces(denominator) <= 1
    }, options);
    options.denominatorOptions = merge({
      axisLabel: UnitRatesStrings.pounds
    }, options.denominatorOptions);
    super(itemData, options);
  }
}
unitRates.register('CandyScene', CandyScene);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIm1lcmdlIiwiVVJVdGlscyIsInVuaXRSYXRlcyIsIlVuaXRSYXRlc1N0cmluZ3MiLCJTaG9wcGluZ0l0ZW1EYXRhIiwiU2hvcHBpbmdTY2VuZSIsIkNhbmR5U2NlbmUiLCJjb25zdHJ1Y3RvciIsIml0ZW1EYXRhIiwib3B0aW9ucyIsImFzc2VydCIsIl8iLCJpbmNsdWRlcyIsInZhbHVlcyIsIkNhbmR5IiwiZml4ZWRBeGlzUmFuZ2UiLCJxdWFudGl0eVNpbmd1bGFyVW5pdHMiLCJwb3VuZCIsInF1YW50aXR5UGx1cmFsVW5pdHMiLCJwb3VuZHMiLCJhbW91bnRPZlF1ZXN0aW9uVW5pdHMiLCJwb3VuZHNDYXBpdGFsaXplZCIsImRlbm9taW5hdG9yT3B0aW9ucyIsInNjYWxlUXVhbnRpdHlJc0Rpc3BsYXllZCIsInNjYWxlUXVhbnRpdHlVbml0cyIsImxicyIsImlzTWFqb3JNYXJrZXIiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsImRlY2ltYWxQbGFjZXMiLCJheGlzTGFiZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNhbmR5U2NlbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIGNhbmR5IHNjZW5lIGluIHRoZSBTaG9wcGluZyBzY3JlZW4uXHJcbiAqIENhbmR5IGRpZmZlcnMgc2lnbmlmaWNhbnRseSBmcm9tIG90aGVyIGl0ZW0gdHlwZXMsIGFzIGRlc2NyaWJlZCBieSB0aGUgU2hvcHBpbmdTY2VuZSBjb25zdHJ1Y3RvciBvcHRpb25zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFVSVXRpbHMgZnJvbSAnLi4vLi4vY29tbW9uL1VSVXRpbHMuanMnO1xyXG5pbXBvcnQgdW5pdFJhdGVzIGZyb20gJy4uLy4uL3VuaXRSYXRlcy5qcyc7XHJcbmltcG9ydCBVbml0UmF0ZXNTdHJpbmdzIGZyb20gJy4uLy4uL1VuaXRSYXRlc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgU2hvcHBpbmdJdGVtRGF0YSBmcm9tICcuL1Nob3BwaW5nSXRlbURhdGEuanMnO1xyXG5pbXBvcnQgU2hvcHBpbmdTY2VuZSBmcm9tICcuL1Nob3BwaW5nU2NlbmUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FuZHlTY2VuZSBleHRlbmRzIFNob3BwaW5nU2NlbmUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlbURhdGEgLSBkYXRhIHN0cnVjdHVyZSB0aGF0IGRlc2NyaWJlcyBhIHR5cGUgb2YgY2FuZHksIHNlZSBTaG9wcGluZ0l0ZW1EYXRhXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBpdGVtRGF0YSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBfLmluY2x1ZGVzKCBfLnZhbHVlcyggU2hvcHBpbmdJdGVtRGF0YS5DYW5keSApLCBpdGVtRGF0YSApLCAnaXRlbURhdGEgaXMgbm90IGEgY2FuZHknICk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcblxyXG4gICAgICAvLyByYW5nZSBvZiBkZW5vbWluYXRvciwgaW4gcG91bmRzXHJcbiAgICAgIGZpeGVkQXhpc1JhbmdlOiBuZXcgUmFuZ2UoIDAsIDEuNiApLFxyXG5cclxuICAgICAgLy8gQ2FuZHkgcXVhbnRpdHkgaXMgaW4gcG91bmRzXHJcbiAgICAgIHF1YW50aXR5U2luZ3VsYXJVbml0czogVW5pdFJhdGVzU3RyaW5ncy5wb3VuZCxcclxuICAgICAgcXVhbnRpdHlQbHVyYWxVbml0czogVW5pdFJhdGVzU3RyaW5ncy5wb3VuZHMsXHJcblxyXG4gICAgICAvLyBDYW5keSBxdWVzdGlvbnMgcmVxdWlyZSBjYXBpdGFsaXphdGlvbiBvZiAnUG91bmRzJywgZS5nLiAnUG91bmRzIGZvciAkMTAuNTA/J1xyXG4gICAgICAvLyBUaGlzIGhhY2sgd2FzIHJlcXVpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy91bml0LXJhdGVzL2lzc3Vlcy8yMFxyXG4gICAgICBhbW91bnRPZlF1ZXN0aW9uVW5pdHM6IFVuaXRSYXRlc1N0cmluZ3MucG91bmRzQ2FwaXRhbGl6ZWQsXHJcblxyXG4gICAgICAvLyB7KnxudWxsfSBuZXN0IG9wdGlvbnMgZm9yIHRoZSByYXRlJ3MgZGVub21pbmF0b3IsIGRlZmF1bHRzIHByb3ZpZGVkIGJlbG93XHJcbiAgICAgIGRlbm9taW5hdG9yT3B0aW9uczogbnVsbCxcclxuXHJcbiAgICAgIC8vIFNjYWxlIGRpc3BsYXlzIHF1YW50aXR5IGluICdsYnMnIGZvciBDYW5keVxyXG4gICAgICBzY2FsZVF1YW50aXR5SXNEaXNwbGF5ZWQ6IHRydWUsXHJcbiAgICAgIHNjYWxlUXVhbnRpdHlVbml0czogVW5pdFJhdGVzU3RyaW5ncy5sYnMsXHJcblxyXG4gICAgICAvLyBNYWpvciBtYXJrZXJzIGhhdmUgMSBkZWNpbWFsIHBsYWNlIGluIHRoZSBkZW5vbWluYXRvclxyXG4gICAgICBpc01ham9yTWFya2VyOiAoIG51bWVyYXRvciwgZGVub21pbmF0b3IgKSA9PiAoIFVSVXRpbHMuZGVjaW1hbFBsYWNlcyggZGVub21pbmF0b3IgKSA8PSAxIClcclxuXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy5kZW5vbWluYXRvck9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBheGlzTGFiZWw6IFVuaXRSYXRlc1N0cmluZ3MucG91bmRzXHJcbiAgICB9LCBvcHRpb25zLmRlbm9taW5hdG9yT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBpdGVtRGF0YSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxudW5pdFJhdGVzLnJlZ2lzdGVyKCAnQ2FuZHlTY2VuZScsIENhbmR5U2NlbmUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsT0FBTyxNQUFNLHlCQUF5QjtBQUM3QyxPQUFPQyxTQUFTLE1BQU0sb0JBQW9CO0FBQzFDLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsYUFBYSxNQUFNLG9CQUFvQjtBQUU5QyxlQUFlLE1BQU1DLFVBQVUsU0FBU0QsYUFBYSxDQUFDO0VBRXBEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFHO0lBRS9CQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsQ0FBQyxDQUFDQyxRQUFRLENBQUVELENBQUMsQ0FBQ0UsTUFBTSxDQUFFVCxnQkFBZ0IsQ0FBQ1UsS0FBTSxDQUFDLEVBQUVOLFFBQVMsQ0FBQyxFQUFFLHlCQUEwQixDQUFDO0lBRXpHQyxPQUFPLEdBQUdULEtBQUssQ0FBRTtNQUVmO01BQ0FlLGNBQWMsRUFBRSxJQUFJaEIsS0FBSyxDQUFFLENBQUMsRUFBRSxHQUFJLENBQUM7TUFFbkM7TUFDQWlCLHFCQUFxQixFQUFFYixnQkFBZ0IsQ0FBQ2MsS0FBSztNQUM3Q0MsbUJBQW1CLEVBQUVmLGdCQUFnQixDQUFDZ0IsTUFBTTtNQUU1QztNQUNBO01BQ0FDLHFCQUFxQixFQUFFakIsZ0JBQWdCLENBQUNrQixpQkFBaUI7TUFFekQ7TUFDQUMsa0JBQWtCLEVBQUUsSUFBSTtNQUV4QjtNQUNBQyx3QkFBd0IsRUFBRSxJQUFJO01BQzlCQyxrQkFBa0IsRUFBRXJCLGdCQUFnQixDQUFDc0IsR0FBRztNQUV4QztNQUNBQyxhQUFhLEVBQUVBLENBQUVDLFNBQVMsRUFBRUMsV0FBVyxLQUFRM0IsT0FBTyxDQUFDNEIsYUFBYSxDQUFFRCxXQUFZLENBQUMsSUFBSTtJQUV6RixDQUFDLEVBQUVuQixPQUFRLENBQUM7SUFFWkEsT0FBTyxDQUFDYSxrQkFBa0IsR0FBR3RCLEtBQUssQ0FBRTtNQUNsQzhCLFNBQVMsRUFBRTNCLGdCQUFnQixDQUFDZ0I7SUFDOUIsQ0FBQyxFQUFFVixPQUFPLENBQUNhLGtCQUFtQixDQUFDO0lBRS9CLEtBQUssQ0FBRWQsUUFBUSxFQUFFQyxPQUFRLENBQUM7RUFDNUI7QUFDRjtBQUVBUCxTQUFTLENBQUM2QixRQUFRLENBQUUsWUFBWSxFQUFFekIsVUFBVyxDQUFDIn0=