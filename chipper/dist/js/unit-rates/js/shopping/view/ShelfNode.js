// Copyright 2017-2023, University of Colorado Boulder

/**
 * View of the shelf, shows the front and top faces.
 * Origin is at the center of the top face.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../kite/js/imports.js';
import { Circle, Line, Node, Path } from '../../../../scenery/js/imports.js';
import URColors from '../../common/URColors.js';
import unitRates from '../../unitRates.js';
export default class ShelfNode extends Node {
  /**
   * @param {Shelf} shelf
   */
  constructor(shelf) {
    // shelf.width is the width at the midpoint of the shelf's top face, compute the foreground and background widths
    const foregroundWidth = shelf.width + shelf.perspectiveXOffset;
    const backgroundWidth = shelf.width - shelf.perspectiveXOffset;

    // draw top face clockwise, starting at front-left corner, in pseudo-3D using parallel perspective
    const shelfShape = new Shape().moveTo(0, 0).lineTo(shelf.perspectiveXOffset, -shelf.depth).lineTo(shelf.perspectiveXOffset + backgroundWidth, -shelf.depth).lineTo(foregroundWidth, 0);

    // add front face
    shelfShape.rect(0, 0, shelf.width + shelf.perspectiveXOffset, shelf.height);

    // origin at center of top face
    const shelfNode = new Path(shelfShape, {
      fill: URColors.shelf,
      stroke: 'black',
      lineJoin: 'round',
      x: -foregroundWidth / 2,
      y: shelf.depth / 2
    });

    // This type does not propagate options to the supertype because the model determines position.
    super({
      children: [shelfNode]
    });

    // red dot at origin
    if (phet.chipper.queryParameters.dev) {
      this.addChild(new Circle(2, {
        fill: 'red'
      }));
      this.addChild(new Line(-shelf.width / 2, 0, shelf.width / 2, 0, {
        stroke: 'red'
      }));
    }

    // move to model position
    this.translation = shelf.position;
  }
}
unitRates.register('ShelfNode', ShelfNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIkNpcmNsZSIsIkxpbmUiLCJOb2RlIiwiUGF0aCIsIlVSQ29sb3JzIiwidW5pdFJhdGVzIiwiU2hlbGZOb2RlIiwiY29uc3RydWN0b3IiLCJzaGVsZiIsImZvcmVncm91bmRXaWR0aCIsIndpZHRoIiwicGVyc3BlY3RpdmVYT2Zmc2V0IiwiYmFja2dyb3VuZFdpZHRoIiwic2hlbGZTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsImRlcHRoIiwicmVjdCIsImhlaWdodCIsInNoZWxmTm9kZSIsImZpbGwiLCJzdHJva2UiLCJsaW5lSm9pbiIsIngiLCJ5IiwiY2hpbGRyZW4iLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImRldiIsImFkZENoaWxkIiwidHJhbnNsYXRpb24iLCJwb3NpdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2hlbGZOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgb2YgdGhlIHNoZWxmLCBzaG93cyB0aGUgZnJvbnQgYW5kIHRvcCBmYWNlcy5cclxuICogT3JpZ2luIGlzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIHRvcCBmYWNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBMaW5lLCBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFVSQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9VUkNvbG9ycy5qcyc7XHJcbmltcG9ydCB1bml0UmF0ZXMgZnJvbSAnLi4vLi4vdW5pdFJhdGVzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoZWxmTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1NoZWxmfSBzaGVsZlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBzaGVsZiApIHtcclxuXHJcbiAgICAvLyBzaGVsZi53aWR0aCBpcyB0aGUgd2lkdGggYXQgdGhlIG1pZHBvaW50IG9mIHRoZSBzaGVsZidzIHRvcCBmYWNlLCBjb21wdXRlIHRoZSBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kIHdpZHRoc1xyXG4gICAgY29uc3QgZm9yZWdyb3VuZFdpZHRoID0gc2hlbGYud2lkdGggKyBzaGVsZi5wZXJzcGVjdGl2ZVhPZmZzZXQ7XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kV2lkdGggPSBzaGVsZi53aWR0aCAtIHNoZWxmLnBlcnNwZWN0aXZlWE9mZnNldDtcclxuXHJcbiAgICAvLyBkcmF3IHRvcCBmYWNlIGNsb2Nrd2lzZSwgc3RhcnRpbmcgYXQgZnJvbnQtbGVmdCBjb3JuZXIsIGluIHBzZXVkby0zRCB1c2luZyBwYXJhbGxlbCBwZXJzcGVjdGl2ZVxyXG4gICAgY29uc3Qgc2hlbGZTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgIC5tb3ZlVG8oIDAsIDAgKVxyXG4gICAgICAubGluZVRvKCBzaGVsZi5wZXJzcGVjdGl2ZVhPZmZzZXQsIC1zaGVsZi5kZXB0aCApXHJcbiAgICAgIC5saW5lVG8oIHNoZWxmLnBlcnNwZWN0aXZlWE9mZnNldCArIGJhY2tncm91bmRXaWR0aCwgLXNoZWxmLmRlcHRoIClcclxuICAgICAgLmxpbmVUbyggZm9yZWdyb3VuZFdpZHRoLCAwICk7XHJcblxyXG4gICAgLy8gYWRkIGZyb250IGZhY2VcclxuICAgIHNoZWxmU2hhcGUucmVjdCggMCwgMCwgc2hlbGYud2lkdGggKyBzaGVsZi5wZXJzcGVjdGl2ZVhPZmZzZXQsIHNoZWxmLmhlaWdodCApO1xyXG5cclxuICAgIC8vIG9yaWdpbiBhdCBjZW50ZXIgb2YgdG9wIGZhY2VcclxuICAgIGNvbnN0IHNoZWxmTm9kZSA9IG5ldyBQYXRoKCBzaGVsZlNoYXBlLCB7XHJcbiAgICAgIGZpbGw6IFVSQ29sb3JzLnNoZWxmLFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGxpbmVKb2luOiAncm91bmQnLFxyXG4gICAgICB4OiAtZm9yZWdyb3VuZFdpZHRoIC8gMixcclxuICAgICAgeTogc2hlbGYuZGVwdGggLyAyXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVGhpcyB0eXBlIGRvZXMgbm90IHByb3BhZ2F0ZSBvcHRpb25zIHRvIHRoZSBzdXBlcnR5cGUgYmVjYXVzZSB0aGUgbW9kZWwgZGV0ZXJtaW5lcyBwb3NpdGlvbi5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIHNoZWxmTm9kZSBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gcmVkIGRvdCBhdCBvcmlnaW5cclxuICAgIGlmICggcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5kZXYgKSB7XHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBDaXJjbGUoIDIsIHsgZmlsbDogJ3JlZCcgfSApICk7XHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBMaW5lKCAtc2hlbGYud2lkdGggLyAyLCAwLCBzaGVsZi53aWR0aCAvIDIsIDAsIHsgc3Ryb2tlOiAncmVkJyB9ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBtb3ZlIHRvIG1vZGVsIHBvc2l0aW9uXHJcbiAgICB0aGlzLnRyYW5zbGF0aW9uID0gc2hlbGYucG9zaXRpb247XHJcbiAgfVxyXG59XHJcblxyXG51bml0UmF0ZXMucmVnaXN0ZXIoICdTaGVsZk5vZGUnLCBTaGVsZk5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDNUUsT0FBT0MsUUFBUSxNQUFNLDBCQUEwQjtBQUMvQyxPQUFPQyxTQUFTLE1BQU0sb0JBQW9CO0FBRTFDLGVBQWUsTUFBTUMsU0FBUyxTQUFTSixJQUFJLENBQUM7RUFFMUM7QUFDRjtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLEtBQUssRUFBRztJQUVuQjtJQUNBLE1BQU1DLGVBQWUsR0FBR0QsS0FBSyxDQUFDRSxLQUFLLEdBQUdGLEtBQUssQ0FBQ0csa0JBQWtCO0lBQzlELE1BQU1DLGVBQWUsR0FBR0osS0FBSyxDQUFDRSxLQUFLLEdBQUdGLEtBQUssQ0FBQ0csa0JBQWtCOztJQUU5RDtJQUNBLE1BQU1FLFVBQVUsR0FBRyxJQUFJZCxLQUFLLENBQUMsQ0FBQyxDQUMzQmUsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FDZEMsTUFBTSxDQUFFUCxLQUFLLENBQUNHLGtCQUFrQixFQUFFLENBQUNILEtBQUssQ0FBQ1EsS0FBTSxDQUFDLENBQ2hERCxNQUFNLENBQUVQLEtBQUssQ0FBQ0csa0JBQWtCLEdBQUdDLGVBQWUsRUFBRSxDQUFDSixLQUFLLENBQUNRLEtBQU0sQ0FBQyxDQUNsRUQsTUFBTSxDQUFFTixlQUFlLEVBQUUsQ0FBRSxDQUFDOztJQUUvQjtJQUNBSSxVQUFVLENBQUNJLElBQUksQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFVCxLQUFLLENBQUNFLEtBQUssR0FBR0YsS0FBSyxDQUFDRyxrQkFBa0IsRUFBRUgsS0FBSyxDQUFDVSxNQUFPLENBQUM7O0lBRTdFO0lBQ0EsTUFBTUMsU0FBUyxHQUFHLElBQUloQixJQUFJLENBQUVVLFVBQVUsRUFBRTtNQUN0Q08sSUFBSSxFQUFFaEIsUUFBUSxDQUFDSSxLQUFLO01BQ3BCYSxNQUFNLEVBQUUsT0FBTztNQUNmQyxRQUFRLEVBQUUsT0FBTztNQUNqQkMsQ0FBQyxFQUFFLENBQUNkLGVBQWUsR0FBRyxDQUFDO01BQ3ZCZSxDQUFDLEVBQUVoQixLQUFLLENBQUNRLEtBQUssR0FBRztJQUNuQixDQUFFLENBQUM7O0lBRUg7SUFDQSxLQUFLLENBQUU7TUFDTFMsUUFBUSxFQUFFLENBQUVOLFNBQVM7SUFDdkIsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBS08sSUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQWUsQ0FBQ0MsR0FBRyxFQUFHO01BQ3RDLElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUk5QixNQUFNLENBQUUsQ0FBQyxFQUFFO1FBQUVvQixJQUFJLEVBQUU7TUFBTSxDQUFFLENBQUUsQ0FBQztNQUNqRCxJQUFJLENBQUNVLFFBQVEsQ0FBRSxJQUFJN0IsSUFBSSxDQUFFLENBQUNPLEtBQUssQ0FBQ0UsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUVGLEtBQUssQ0FBQ0UsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFBRVcsTUFBTSxFQUFFO01BQU0sQ0FBRSxDQUFFLENBQUM7SUFDekY7O0lBRUE7SUFDQSxJQUFJLENBQUNVLFdBQVcsR0FBR3ZCLEtBQUssQ0FBQ3dCLFFBQVE7RUFDbkM7QUFDRjtBQUVBM0IsU0FBUyxDQUFDNEIsUUFBUSxDQUFFLFdBQVcsRUFBRTNCLFNBQVUsQ0FBQyJ9