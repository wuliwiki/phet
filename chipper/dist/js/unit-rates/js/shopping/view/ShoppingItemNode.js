// Copyright 2017-2023, University of Colorado Boulder

/**
 * View of a shopping item.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Image } from '../../../../scenery/js/imports.js';
import URConstants from '../../common/URConstants.js';
import unitRates from '../../unitRates.js';
import ShoppingItemDragListener from './ShoppingItemDragListener.js';
export default class ShoppingItemNode extends Image {
  /**
   * @param {ShoppingItem} item
   * @param {Shelf} shelf
   * @param {Scale} scale
   * @param {Node} frontItemLayer
   * @param {Node} backItemLayer
   * @param {Node} dragLayer
   */
  constructor(item, shelf, scale, frontItemLayer, backItemLayer, dragLayer) {
    // This type does not propagate options to the supertype because the model determines position.
    super(item.image, {
      scale: URConstants.SHOPPING_ITEM_IMAGE_SCALE,
      cursor: 'pointer'
    });

    // origin is at bottom center
    const positionObserver = position => {
      this.centerX = position.x;
      this.bottom = position.y;
    };
    item.positionProperty.link(positionObserver); // unlink in dispose

    const visibleObserver = visible => {
      this.visible = visible;
      if (visible) {
        this.getParent() && this.getParent().removeChild(this);

        // put the Node in the proper layer
        if (shelf.isItemInFrontRow(item) || scale.isItemInFrontRow(item)) {
          frontItemLayer.addChild(this);
        } else {
          backItemLayer.addChild(this);
        }
      }
    };
    item.visibleProperty.link(visibleObserver); // unlink in dispose

    const dragListener = new ShoppingItemDragListener(this, item, shelf, scale, frontItemLayer, backItemLayer, dragLayer);
    this.addInputListener(dragListener); // removeInputListener in dispose

    // @private
    this.disposeShoppingItemNode = () => {
      item.positionProperty.unlink(positionObserver);
      item.visibleProperty.unlink(visibleObserver);
      this.removeInputListener(dragListener);
    };
  }

  /**
   * @public
   * @override
   */
  dispose() {
    this.disposeShoppingItemNode();
    super.dispose();
  }
}
unitRates.register('ShoppingItemNode', ShoppingItemNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZSIsIlVSQ29uc3RhbnRzIiwidW5pdFJhdGVzIiwiU2hvcHBpbmdJdGVtRHJhZ0xpc3RlbmVyIiwiU2hvcHBpbmdJdGVtTm9kZSIsImNvbnN0cnVjdG9yIiwiaXRlbSIsInNoZWxmIiwic2NhbGUiLCJmcm9udEl0ZW1MYXllciIsImJhY2tJdGVtTGF5ZXIiLCJkcmFnTGF5ZXIiLCJpbWFnZSIsIlNIT1BQSU5HX0lURU1fSU1BR0VfU0NBTEUiLCJjdXJzb3IiLCJwb3NpdGlvbk9ic2VydmVyIiwicG9zaXRpb24iLCJjZW50ZXJYIiwieCIsImJvdHRvbSIsInkiLCJwb3NpdGlvblByb3BlcnR5IiwibGluayIsInZpc2libGVPYnNlcnZlciIsInZpc2libGUiLCJnZXRQYXJlbnQiLCJyZW1vdmVDaGlsZCIsImlzSXRlbUluRnJvbnRSb3ciLCJhZGRDaGlsZCIsInZpc2libGVQcm9wZXJ0eSIsImRyYWdMaXN0ZW5lciIsImFkZElucHV0TGlzdGVuZXIiLCJkaXNwb3NlU2hvcHBpbmdJdGVtTm9kZSIsInVubGluayIsInJlbW92ZUlucHV0TGlzdGVuZXIiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTaG9wcGluZ0l0ZW1Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgb2YgYSBzaG9wcGluZyBpdGVtLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFVSQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9VUkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB1bml0UmF0ZXMgZnJvbSAnLi4vLi4vdW5pdFJhdGVzLmpzJztcclxuaW1wb3J0IFNob3BwaW5nSXRlbURyYWdMaXN0ZW5lciBmcm9tICcuL1Nob3BwaW5nSXRlbURyYWdMaXN0ZW5lci5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG9wcGluZ0l0ZW1Ob2RlIGV4dGVuZHMgSW1hZ2Uge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Nob3BwaW5nSXRlbX0gaXRlbVxyXG4gICAqIEBwYXJhbSB7U2hlbGZ9IHNoZWxmXHJcbiAgICogQHBhcmFtIHtTY2FsZX0gc2NhbGVcclxuICAgKiBAcGFyYW0ge05vZGV9IGZyb250SXRlbUxheWVyXHJcbiAgICogQHBhcmFtIHtOb2RlfSBiYWNrSXRlbUxheWVyXHJcbiAgICogQHBhcmFtIHtOb2RlfSBkcmFnTGF5ZXJcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaXRlbSwgc2hlbGYsIHNjYWxlLCBmcm9udEl0ZW1MYXllciwgYmFja0l0ZW1MYXllciwgZHJhZ0xheWVyICkge1xyXG5cclxuICAgIC8vIFRoaXMgdHlwZSBkb2VzIG5vdCBwcm9wYWdhdGUgb3B0aW9ucyB0byB0aGUgc3VwZXJ0eXBlIGJlY2F1c2UgdGhlIG1vZGVsIGRldGVybWluZXMgcG9zaXRpb24uXHJcbiAgICBzdXBlciggaXRlbS5pbWFnZSwge1xyXG4gICAgICBzY2FsZTogVVJDb25zdGFudHMuU0hPUFBJTkdfSVRFTV9JTUFHRV9TQ0FMRSxcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcidcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBvcmlnaW4gaXMgYXQgYm90dG9tIGNlbnRlclxyXG4gICAgY29uc3QgcG9zaXRpb25PYnNlcnZlciA9IHBvc2l0aW9uID0+IHtcclxuICAgICAgdGhpcy5jZW50ZXJYID0gcG9zaXRpb24ueDtcclxuICAgICAgdGhpcy5ib3R0b20gPSBwb3NpdGlvbi55O1xyXG4gICAgfTtcclxuICAgIGl0ZW0ucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBwb3NpdGlvbk9ic2VydmVyICk7IC8vIHVubGluayBpbiBkaXNwb3NlXHJcblxyXG4gICAgY29uc3QgdmlzaWJsZU9ic2VydmVyID0gdmlzaWJsZSA9PiB7XHJcbiAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICAgIGlmICggdmlzaWJsZSApIHtcclxuICAgICAgICB0aGlzLmdldFBhcmVudCgpICYmIHRoaXMuZ2V0UGFyZW50KCkucmVtb3ZlQ2hpbGQoIHRoaXMgKTtcclxuXHJcbiAgICAgICAgLy8gcHV0IHRoZSBOb2RlIGluIHRoZSBwcm9wZXIgbGF5ZXJcclxuICAgICAgICBpZiAoIHNoZWxmLmlzSXRlbUluRnJvbnRSb3coIGl0ZW0gKSB8fCBzY2FsZS5pc0l0ZW1JbkZyb250Um93KCBpdGVtICkgKSB7XHJcbiAgICAgICAgICBmcm9udEl0ZW1MYXllci5hZGRDaGlsZCggdGhpcyApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGJhY2tJdGVtTGF5ZXIuYWRkQ2hpbGQoIHRoaXMgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBpdGVtLnZpc2libGVQcm9wZXJ0eS5saW5rKCB2aXNpYmxlT2JzZXJ2ZXIgKTsgLy8gdW5saW5rIGluIGRpc3Bvc2VcclxuXHJcbiAgICBjb25zdCBkcmFnTGlzdGVuZXIgPSBuZXcgU2hvcHBpbmdJdGVtRHJhZ0xpc3RlbmVyKCB0aGlzLCBpdGVtLCBzaGVsZiwgc2NhbGUsIGZyb250SXRlbUxheWVyLCBiYWNrSXRlbUxheWVyLCBkcmFnTGF5ZXIgKTtcclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggZHJhZ0xpc3RlbmVyICk7IC8vIHJlbW92ZUlucHV0TGlzdGVuZXIgaW4gZGlzcG9zZVxyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLmRpc3Bvc2VTaG9wcGluZ0l0ZW1Ob2RlID0gKCkgPT4ge1xyXG4gICAgICBpdGVtLnBvc2l0aW9uUHJvcGVydHkudW5saW5rKCBwb3NpdGlvbk9ic2VydmVyICk7XHJcbiAgICAgIGl0ZW0udmlzaWJsZVByb3BlcnR5LnVubGluayggdmlzaWJsZU9ic2VydmVyICk7XHJcbiAgICAgIHRoaXMucmVtb3ZlSW5wdXRMaXN0ZW5lciggZHJhZ0xpc3RlbmVyICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmRpc3Bvc2VTaG9wcGluZ0l0ZW1Ob2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG51bml0UmF0ZXMucmVnaXN0ZXIoICdTaG9wcGluZ0l0ZW1Ob2RlJywgU2hvcHBpbmdJdGVtTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsbUNBQW1DO0FBQ3pELE9BQU9DLFdBQVcsTUFBTSw2QkFBNkI7QUFDckQsT0FBT0MsU0FBUyxNQUFNLG9CQUFvQjtBQUMxQyxPQUFPQyx3QkFBd0IsTUFBTSwrQkFBK0I7QUFFcEUsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU0osS0FBSyxDQUFDO0VBRWxEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsY0FBYyxFQUFFQyxhQUFhLEVBQUVDLFNBQVMsRUFBRztJQUUxRTtJQUNBLEtBQUssQ0FBRUwsSUFBSSxDQUFDTSxLQUFLLEVBQUU7TUFDakJKLEtBQUssRUFBRVAsV0FBVyxDQUFDWSx5QkFBeUI7TUFDNUNDLE1BQU0sRUFBRTtJQUNWLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLGdCQUFnQixHQUFHQyxRQUFRLElBQUk7TUFDbkMsSUFBSSxDQUFDQyxPQUFPLEdBQUdELFFBQVEsQ0FBQ0UsQ0FBQztNQUN6QixJQUFJLENBQUNDLE1BQU0sR0FBR0gsUUFBUSxDQUFDSSxDQUFDO0lBQzFCLENBQUM7SUFDRGQsSUFBSSxDQUFDZSxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFFUCxnQkFBaUIsQ0FBQyxDQUFDLENBQUM7O0lBRWhELE1BQU1RLGVBQWUsR0FBR0MsT0FBTyxJQUFJO01BQ2pDLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxPQUFPO01BQ3RCLElBQUtBLE9BQU8sRUFBRztRQUNiLElBQUksQ0FBQ0MsU0FBUyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUNBLFNBQVMsQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBRSxJQUFLLENBQUM7O1FBRXhEO1FBQ0EsSUFBS25CLEtBQUssQ0FBQ29CLGdCQUFnQixDQUFFckIsSUFBSyxDQUFDLElBQUlFLEtBQUssQ0FBQ21CLGdCQUFnQixDQUFFckIsSUFBSyxDQUFDLEVBQUc7VUFDdEVHLGNBQWMsQ0FBQ21CLFFBQVEsQ0FBRSxJQUFLLENBQUM7UUFDakMsQ0FBQyxNQUNJO1VBQ0hsQixhQUFhLENBQUNrQixRQUFRLENBQUUsSUFBSyxDQUFDO1FBQ2hDO01BQ0Y7SUFDRixDQUFDO0lBQ0R0QixJQUFJLENBQUN1QixlQUFlLENBQUNQLElBQUksQ0FBRUMsZUFBZ0IsQ0FBQyxDQUFDLENBQUM7O0lBRTlDLE1BQU1PLFlBQVksR0FBRyxJQUFJM0Isd0JBQXdCLENBQUUsSUFBSSxFQUFFRyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLGFBQWEsRUFBRUMsU0FBVSxDQUFDO0lBQ3ZILElBQUksQ0FBQ29CLGdCQUFnQixDQUFFRCxZQUFhLENBQUMsQ0FBQyxDQUFDOztJQUV2QztJQUNBLElBQUksQ0FBQ0UsdUJBQXVCLEdBQUcsTUFBTTtNQUNuQzFCLElBQUksQ0FBQ2UsZ0JBQWdCLENBQUNZLE1BQU0sQ0FBRWxCLGdCQUFpQixDQUFDO01BQ2hEVCxJQUFJLENBQUN1QixlQUFlLENBQUNJLE1BQU0sQ0FBRVYsZUFBZ0IsQ0FBQztNQUM5QyxJQUFJLENBQUNXLG1CQUFtQixDQUFFSixZQUFhLENBQUM7SUFDMUMsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VLLE9BQU9BLENBQUEsRUFBRztJQUNSLElBQUksQ0FBQ0gsdUJBQXVCLENBQUMsQ0FBQztJQUM5QixLQUFLLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWpDLFNBQVMsQ0FBQ2tDLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRWhDLGdCQUFpQixDQUFDIn0=