// Copyright 2017-2023, University of Colorado Boulder

/**
 * View of a shopping bag.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Image } from '../../../../scenery/js/imports.js';
import URConstants from '../../common/URConstants.js';
import unitRates from '../../unitRates.js';
import BagDragListener from './BagDragListener.js';
export default class BagNode extends Image {
  /**
   * @param {Bag} bag
   * @param {Shelf} shelf
   * @param {Scale} scale
   * @param {Node} bagLayer
   * @param {Node} dragLayer
   */
  constructor(bag, shelf, scale, bagLayer, dragLayer) {
    // This type does not propagate options to the supertype because the model determines position.
    super(bag.image, {
      scale: URConstants.BAG_IMAGE_SCALE,
      cursor: 'pointer'
    });

    // origin is at bottom center
    const positionObserver = position => {
      this.centerX = position.x;
      this.bottom = position.y;
    };
    bag.positionProperty.link(positionObserver); // unlink in dispose

    const visibleObserver = visible => {
      this.visible = visible;
    };
    bag.visibleProperty.link(visibleObserver); // unlink in dispose

    const dragListener = new BagDragListener(this, bag, shelf, scale, bagLayer, dragLayer);
    this.addInputListener(dragListener); // removeInputListener in dispose

    // @private
    this.disposeBagNode = () => {
      bag.positionProperty.unlink(positionObserver);
      bag.visibleProperty.unlink(visibleObserver);
      this.removeInputListener(dragListener);
    };
  }

  /**
   * @public
   * @override
   */
  dispose() {
    this.disposeBagNode();
    super.dispose();
  }
}
unitRates.register('BagNode', BagNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZSIsIlVSQ29uc3RhbnRzIiwidW5pdFJhdGVzIiwiQmFnRHJhZ0xpc3RlbmVyIiwiQmFnTm9kZSIsImNvbnN0cnVjdG9yIiwiYmFnIiwic2hlbGYiLCJzY2FsZSIsImJhZ0xheWVyIiwiZHJhZ0xheWVyIiwiaW1hZ2UiLCJCQUdfSU1BR0VfU0NBTEUiLCJjdXJzb3IiLCJwb3NpdGlvbk9ic2VydmVyIiwicG9zaXRpb24iLCJjZW50ZXJYIiwieCIsImJvdHRvbSIsInkiLCJwb3NpdGlvblByb3BlcnR5IiwibGluayIsInZpc2libGVPYnNlcnZlciIsInZpc2libGUiLCJ2aXNpYmxlUHJvcGVydHkiLCJkcmFnTGlzdGVuZXIiLCJhZGRJbnB1dExpc3RlbmVyIiwiZGlzcG9zZUJhZ05vZGUiLCJ1bmxpbmsiLCJyZW1vdmVJbnB1dExpc3RlbmVyIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFnTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IG9mIGEgc2hvcHBpbmcgYmFnLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFVSQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9VUkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB1bml0UmF0ZXMgZnJvbSAnLi4vLi4vdW5pdFJhdGVzLmpzJztcclxuaW1wb3J0IEJhZ0RyYWdMaXN0ZW5lciBmcm9tICcuL0JhZ0RyYWdMaXN0ZW5lci5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYWdOb2RlIGV4dGVuZHMgSW1hZ2Uge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0JhZ30gYmFnXHJcbiAgICogQHBhcmFtIHtTaGVsZn0gc2hlbGZcclxuICAgKiBAcGFyYW0ge1NjYWxlfSBzY2FsZVxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gYmFnTGF5ZXJcclxuICAgKiBAcGFyYW0ge05vZGV9IGRyYWdMYXllclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBiYWcsIHNoZWxmLCBzY2FsZSwgYmFnTGF5ZXIsIGRyYWdMYXllciApIHtcclxuXHJcbiAgICAvLyBUaGlzIHR5cGUgZG9lcyBub3QgcHJvcGFnYXRlIG9wdGlvbnMgdG8gdGhlIHN1cGVydHlwZSBiZWNhdXNlIHRoZSBtb2RlbCBkZXRlcm1pbmVzIHBvc2l0aW9uLlxyXG4gICAgc3VwZXIoIGJhZy5pbWFnZSwge1xyXG4gICAgICBzY2FsZTogVVJDb25zdGFudHMuQkFHX0lNQUdFX1NDQUxFLFxyXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIG9yaWdpbiBpcyBhdCBib3R0b20gY2VudGVyXHJcbiAgICBjb25zdCBwb3NpdGlvbk9ic2VydmVyID0gcG9zaXRpb24gPT4ge1xyXG4gICAgICB0aGlzLmNlbnRlclggPSBwb3NpdGlvbi54O1xyXG4gICAgICB0aGlzLmJvdHRvbSA9IHBvc2l0aW9uLnk7XHJcbiAgICB9O1xyXG4gICAgYmFnLnBvc2l0aW9uUHJvcGVydHkubGluayggcG9zaXRpb25PYnNlcnZlciApOyAvLyB1bmxpbmsgaW4gZGlzcG9zZVxyXG5cclxuICAgIGNvbnN0IHZpc2libGVPYnNlcnZlciA9IHZpc2libGUgPT4ge1xyXG4gICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgfTtcclxuICAgIGJhZy52aXNpYmxlUHJvcGVydHkubGluayggdmlzaWJsZU9ic2VydmVyICk7IC8vIHVubGluayBpbiBkaXNwb3NlXHJcblxyXG4gICAgY29uc3QgZHJhZ0xpc3RlbmVyID0gbmV3IEJhZ0RyYWdMaXN0ZW5lciggdGhpcywgYmFnLCBzaGVsZiwgc2NhbGUsIGJhZ0xheWVyLCBkcmFnTGF5ZXIgKTtcclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggZHJhZ0xpc3RlbmVyICk7IC8vIHJlbW92ZUlucHV0TGlzdGVuZXIgaW4gZGlzcG9zZVxyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLmRpc3Bvc2VCYWdOb2RlID0gKCkgPT4ge1xyXG4gICAgICBiYWcucG9zaXRpb25Qcm9wZXJ0eS51bmxpbmsoIHBvc2l0aW9uT2JzZXJ2ZXIgKTtcclxuICAgICAgYmFnLnZpc2libGVQcm9wZXJ0eS51bmxpbmsoIHZpc2libGVPYnNlcnZlciApO1xyXG4gICAgICB0aGlzLnJlbW92ZUlucHV0TGlzdGVuZXIoIGRyYWdMaXN0ZW5lciApO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5kaXNwb3NlQmFnTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxudW5pdFJhdGVzLnJlZ2lzdGVyKCAnQmFnTm9kZScsIEJhZ05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLG1DQUFtQztBQUN6RCxPQUFPQyxXQUFXLE1BQU0sNkJBQTZCO0FBQ3JELE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFDMUMsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjtBQUVsRCxlQUFlLE1BQU1DLE9BQU8sU0FBU0osS0FBSyxDQUFDO0VBRXpDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFHO0lBRXBEO0lBQ0EsS0FBSyxDQUFFSixHQUFHLENBQUNLLEtBQUssRUFBRTtNQUNoQkgsS0FBSyxFQUFFUCxXQUFXLENBQUNXLGVBQWU7TUFDbENDLE1BQU0sRUFBRTtJQUNWLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLGdCQUFnQixHQUFHQyxRQUFRLElBQUk7TUFDbkMsSUFBSSxDQUFDQyxPQUFPLEdBQUdELFFBQVEsQ0FBQ0UsQ0FBQztNQUN6QixJQUFJLENBQUNDLE1BQU0sR0FBR0gsUUFBUSxDQUFDSSxDQUFDO0lBQzFCLENBQUM7SUFDRGIsR0FBRyxDQUFDYyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFFUCxnQkFBaUIsQ0FBQyxDQUFDLENBQUM7O0lBRS9DLE1BQU1RLGVBQWUsR0FBR0MsT0FBTyxJQUFJO01BQ2pDLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxPQUFPO0lBQ3hCLENBQUM7SUFDRGpCLEdBQUcsQ0FBQ2tCLGVBQWUsQ0FBQ0gsSUFBSSxDQUFFQyxlQUFnQixDQUFDLENBQUMsQ0FBQzs7SUFFN0MsTUFBTUcsWUFBWSxHQUFHLElBQUl0QixlQUFlLENBQUUsSUFBSSxFQUFFRyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFNBQVUsQ0FBQztJQUN4RixJQUFJLENBQUNnQixnQkFBZ0IsQ0FBRUQsWUFBYSxDQUFDLENBQUMsQ0FBQzs7SUFFdkM7SUFDQSxJQUFJLENBQUNFLGNBQWMsR0FBRyxNQUFNO01BQzFCckIsR0FBRyxDQUFDYyxnQkFBZ0IsQ0FBQ1EsTUFBTSxDQUFFZCxnQkFBaUIsQ0FBQztNQUMvQ1IsR0FBRyxDQUFDa0IsZUFBZSxDQUFDSSxNQUFNLENBQUVOLGVBQWdCLENBQUM7TUFDN0MsSUFBSSxDQUFDTyxtQkFBbUIsQ0FBRUosWUFBYSxDQUFDO0lBQzFDLENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFSyxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNILGNBQWMsQ0FBQyxDQUFDO0lBQ3JCLEtBQUssQ0FBQ0csT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBNUIsU0FBUyxDQUFDNkIsUUFBUSxDQUFFLFNBQVMsRUFBRTNCLE9BQVEsQ0FBQyJ9