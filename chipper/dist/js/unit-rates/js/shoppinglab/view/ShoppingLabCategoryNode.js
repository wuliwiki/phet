// Copyright 2017-2023, University of Colorado Boulder

/**
 * View components that are specific to a category in the 'Shopping Lab' screen.
 * Since the Shopping Lab only has 1 scene per category, this is simply a parent node that controls visibility of that scene.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node } from '../../../../scenery/js/imports.js';
import unitRates from '../../unitRates.js';
import ShoppingLabSceneNode from './ShoppingLabSceneNode.js';
export default class ShoppingLabCategoryNode extends Node {
  /**
   * @param {ShoppingCategory} category
   * @param {Property.<ShoppingCategory>} categoryProperty
   * @param {Bounds2} layoutBounds
   * @param {KeypadLayer} keypadLayer
   * @param {ShoppingViewProperties} viewProperties
   * @param {Object} [options]
   */
  constructor(category, categoryProperty, layoutBounds, keypadLayer, viewProperties, options) {
    super();

    // parent for stuff that's specific to a scene, to maintain rendering order
    assert && assert(category.shoppingScenes.length === 1, 'Shopping Lab screen supports 1 scene per category');
    const shoppingSceneNode = new ShoppingLabSceneNode(category.shoppingScenes[0], layoutBounds, keypadLayer, viewProperties);
    this.addChild(shoppingSceneNode);
    this.mutate(options);

    // Show this category when it's selected.
    const categoryObserver = newCategory => {
      this.visible = newCategory === category;
    };
    categoryProperty.link(categoryObserver); // unlink in dispose

    // @private
    this.disposeShoppingLabCategoryNode = () => {
      categoryProperty.unlink(categoryObserver);
      shoppingSceneNode.dispose();
    };
  }

  /**
   * @public
   * @override
   */
  dispose() {
    this.disposeShoppingLabCategoryNode();
    super.dispose();
  }
}
unitRates.register('ShoppingLabCategoryNode', ShoppingLabCategoryNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwidW5pdFJhdGVzIiwiU2hvcHBpbmdMYWJTY2VuZU5vZGUiLCJTaG9wcGluZ0xhYkNhdGVnb3J5Tm9kZSIsImNvbnN0cnVjdG9yIiwiY2F0ZWdvcnkiLCJjYXRlZ29yeVByb3BlcnR5IiwibGF5b3V0Qm91bmRzIiwia2V5cGFkTGF5ZXIiLCJ2aWV3UHJvcGVydGllcyIsIm9wdGlvbnMiLCJhc3NlcnQiLCJzaG9wcGluZ1NjZW5lcyIsImxlbmd0aCIsInNob3BwaW5nU2NlbmVOb2RlIiwiYWRkQ2hpbGQiLCJtdXRhdGUiLCJjYXRlZ29yeU9ic2VydmVyIiwibmV3Q2F0ZWdvcnkiLCJ2aXNpYmxlIiwibGluayIsImRpc3Bvc2VTaG9wcGluZ0xhYkNhdGVnb3J5Tm9kZSIsInVubGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNob3BwaW5nTGFiQ2F0ZWdvcnlOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgY29tcG9uZW50cyB0aGF0IGFyZSBzcGVjaWZpYyB0byBhIGNhdGVnb3J5IGluIHRoZSAnU2hvcHBpbmcgTGFiJyBzY3JlZW4uXHJcbiAqIFNpbmNlIHRoZSBTaG9wcGluZyBMYWIgb25seSBoYXMgMSBzY2VuZSBwZXIgY2F0ZWdvcnksIHRoaXMgaXMgc2ltcGx5IGEgcGFyZW50IG5vZGUgdGhhdCBjb250cm9scyB2aXNpYmlsaXR5IG9mIHRoYXQgc2NlbmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB1bml0UmF0ZXMgZnJvbSAnLi4vLi4vdW5pdFJhdGVzLmpzJztcclxuaW1wb3J0IFNob3BwaW5nTGFiU2NlbmVOb2RlIGZyb20gJy4vU2hvcHBpbmdMYWJTY2VuZU5vZGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hvcHBpbmdMYWJDYXRlZ29yeU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtTaG9wcGluZ0NhdGVnb3J5fSBjYXRlZ29yeVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPFNob3BwaW5nQ2F0ZWdvcnk+fSBjYXRlZ29yeVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtCb3VuZHMyfSBsYXlvdXRCb3VuZHNcclxuICAgKiBAcGFyYW0ge0tleXBhZExheWVyfSBrZXlwYWRMYXllclxyXG4gICAqIEBwYXJhbSB7U2hvcHBpbmdWaWV3UHJvcGVydGllc30gdmlld1Byb3BlcnRpZXNcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNhdGVnb3J5LCBjYXRlZ29yeVByb3BlcnR5LCBsYXlvdXRCb3VuZHMsIGtleXBhZExheWVyLCB2aWV3UHJvcGVydGllcywgb3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIHBhcmVudCBmb3Igc3R1ZmYgdGhhdCdzIHNwZWNpZmljIHRvIGEgc2NlbmUsIHRvIG1haW50YWluIHJlbmRlcmluZyBvcmRlclxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggY2F0ZWdvcnkuc2hvcHBpbmdTY2VuZXMubGVuZ3RoID09PSAxLCAnU2hvcHBpbmcgTGFiIHNjcmVlbiBzdXBwb3J0cyAxIHNjZW5lIHBlciBjYXRlZ29yeScgKTtcclxuICAgIGNvbnN0IHNob3BwaW5nU2NlbmVOb2RlID0gbmV3IFNob3BwaW5nTGFiU2NlbmVOb2RlKCBjYXRlZ29yeS5zaG9wcGluZ1NjZW5lc1sgMCBdLCBsYXlvdXRCb3VuZHMsIGtleXBhZExheWVyLCB2aWV3UHJvcGVydGllcyApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggc2hvcHBpbmdTY2VuZU5vZGUgKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFNob3cgdGhpcyBjYXRlZ29yeSB3aGVuIGl0J3Mgc2VsZWN0ZWQuXHJcbiAgICBjb25zdCBjYXRlZ29yeU9ic2VydmVyID0gbmV3Q2F0ZWdvcnkgPT4ge1xyXG4gICAgICB0aGlzLnZpc2libGUgPSAoIG5ld0NhdGVnb3J5ID09PSBjYXRlZ29yeSApO1xyXG4gICAgfTtcclxuICAgIGNhdGVnb3J5UHJvcGVydHkubGluayggY2F0ZWdvcnlPYnNlcnZlciApOyAvLyB1bmxpbmsgaW4gZGlzcG9zZVxyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLmRpc3Bvc2VTaG9wcGluZ0xhYkNhdGVnb3J5Tm9kZSA9ICgpID0+IHtcclxuICAgICAgY2F0ZWdvcnlQcm9wZXJ0eS51bmxpbmsoIGNhdGVnb3J5T2JzZXJ2ZXIgKTtcclxuICAgICAgc2hvcHBpbmdTY2VuZU5vZGUuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5kaXNwb3NlU2hvcHBpbmdMYWJDYXRlZ29yeU5vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnVuaXRSYXRlcy5yZWdpc3RlciggJ1Nob3BwaW5nTGFiQ2F0ZWdvcnlOb2RlJywgU2hvcHBpbmdMYWJDYXRlZ29yeU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFDMUMsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBRTVELGVBQWUsTUFBTUMsdUJBQXVCLFNBQVNILElBQUksQ0FBQztFQUV4RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLFFBQVEsRUFBRUMsZ0JBQWdCLEVBQUVDLFlBQVksRUFBRUMsV0FBVyxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sRUFBRztJQUU1RixLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRU4sUUFBUSxDQUFDTyxjQUFjLENBQUNDLE1BQU0sS0FBSyxDQUFDLEVBQUUsbURBQW9ELENBQUM7SUFDN0csTUFBTUMsaUJBQWlCLEdBQUcsSUFBSVosb0JBQW9CLENBQUVHLFFBQVEsQ0FBQ08sY0FBYyxDQUFFLENBQUMsQ0FBRSxFQUFFTCxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsY0FBZSxDQUFDO0lBQzdILElBQUksQ0FBQ00sUUFBUSxDQUFFRCxpQkFBa0IsQ0FBQztJQUVsQyxJQUFJLENBQUNFLE1BQU0sQ0FBRU4sT0FBUSxDQUFDOztJQUV0QjtJQUNBLE1BQU1PLGdCQUFnQixHQUFHQyxXQUFXLElBQUk7TUFDdEMsSUFBSSxDQUFDQyxPQUFPLEdBQUtELFdBQVcsS0FBS2IsUUFBVTtJQUM3QyxDQUFDO0lBQ0RDLGdCQUFnQixDQUFDYyxJQUFJLENBQUVILGdCQUFpQixDQUFDLENBQUMsQ0FBQzs7SUFFM0M7SUFDQSxJQUFJLENBQUNJLDhCQUE4QixHQUFHLE1BQU07TUFDMUNmLGdCQUFnQixDQUFDZ0IsTUFBTSxDQUFFTCxnQkFBaUIsQ0FBQztNQUMzQ0gsaUJBQWlCLENBQUNTLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFQSxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNGLDhCQUE4QixDQUFDLENBQUM7SUFDckMsS0FBSyxDQUFDRSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUF0QixTQUFTLENBQUN1QixRQUFRLENBQUUseUJBQXlCLEVBQUVyQix1QkFBd0IsQ0FBQyJ9