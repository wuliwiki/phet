// Copyright 2022, University of Colorado Boulder

/**
 * Tests for Enumeration, EnumerationValue
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Enumeration from './Enumeration.js';
import EnumerationValue from './EnumerationValue.js';
QUnit.module('Enumeration');
QUnit.test('Enumeration', assert => {
  class MyEnumeration extends EnumerationValue {
    static ITEM_1 = new MyEnumeration();
    static ITEM_2 = new MyEnumeration();
    static ITEM_3 = new MyEnumeration();
    static enumeration = new Enumeration(MyEnumeration);
  }
  assert.ok(MyEnumeration.enumeration.keys.length === 3, 'keys all there');
  assert.ok(MyEnumeration.enumeration.values.length === 3, 'values all there');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_1.enumeration, 'enumeration instances are the same');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_2.enumeration, 'enumeration instances are the same 2');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_3.enumeration, 'enumeration instances are the same 3');
  window.assert && assert.throws(() => {
    return new MyEnumeration();
  }, 'cannot create new instances after class is defined and sealed');
});
QUnit.test('Enumeration Subtyping', assert => {
  class MyEnumeration extends EnumerationValue {
    static ITEM_1 = new MyEnumeration();
    static ITEM_2 = new MyEnumeration();
    static ITEM_3 = new MyEnumeration();
    static enumeration = new Enumeration(MyEnumeration);
  }
  class MySubEnumeration extends MyEnumeration {
    static ITEM_4 = new MySubEnumeration();
    static enumeration = new Enumeration(MySubEnumeration, {
      instanceType: MyEnumeration
    });
  }
  assert.ok(MySubEnumeration.enumeration.keys.length === 4, 'keys all there');
  assert.ok(MySubEnumeration.enumeration.values.length === 4, 'values all there');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_1.enumeration, 'enumeration instances from parent');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_2.enumeration, 'enumeration instances from parent 2');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_3.enumeration, 'enumeration instances from parent 3');
  assert.ok(MySubEnumeration.enumeration !== MySubEnumeration.ITEM_1.enumeration, 'enumeration instances not from child');
  assert.ok(MySubEnumeration.enumeration !== MySubEnumeration.ITEM_2.enumeration, 'enumeration instances not from child 2');

  // @ts-expect-error INTENTIONAL - we know this doesn't exist, but still want the runtime check
  assert.ok(!MyEnumeration.ITEM_4, 'super should not have sub item');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJRVW5pdCIsIm1vZHVsZSIsInRlc3QiLCJhc3NlcnQiLCJNeUVudW1lcmF0aW9uIiwiSVRFTV8xIiwiSVRFTV8yIiwiSVRFTV8zIiwiZW51bWVyYXRpb24iLCJvayIsImtleXMiLCJsZW5ndGgiLCJ2YWx1ZXMiLCJ3aW5kb3ciLCJ0aHJvd3MiLCJNeVN1YkVudW1lcmF0aW9uIiwiSVRFTV80IiwiaW5zdGFuY2VUeXBlIl0sInNvdXJjZXMiOlsiRW51bWVyYXRpb25UZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGVzdHMgZm9yIEVudW1lcmF0aW9uLCBFbnVtZXJhdGlvblZhbHVlXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb24gZnJvbSAnLi9FbnVtZXJhdGlvbi5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblZhbHVlIGZyb20gJy4vRW51bWVyYXRpb25WYWx1ZS5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdFbnVtZXJhdGlvbicgKTtcclxuXHJcblFVbml0LnRlc3QoICdFbnVtZXJhdGlvbicsIGFzc2VydCA9PiB7XHJcblxyXG4gIGNsYXNzIE15RW51bWVyYXRpb24gZXh0ZW5kcyBFbnVtZXJhdGlvblZhbHVlIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSVRFTV8xID0gbmV3IE15RW51bWVyYXRpb24oKTtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSVRFTV8yID0gbmV3IE15RW51bWVyYXRpb24oKTtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSVRFTV8zID0gbmV3IE15RW51bWVyYXRpb24oKTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBNeUVudW1lcmF0aW9uICk7XHJcbiAgfVxyXG5cclxuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24ua2V5cy5sZW5ndGggPT09IDMsICdrZXlzIGFsbCB0aGVyZScgKTtcclxuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24udmFsdWVzLmxlbmd0aCA9PT0gMywgJ3ZhbHVlcyBhbGwgdGhlcmUnICk7XHJcbiAgYXNzZXJ0Lm9rKCBNeUVudW1lcmF0aW9uLmVudW1lcmF0aW9uID09PSBNeUVudW1lcmF0aW9uLklURU1fMS5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBhcmUgdGhlIHNhbWUnICk7XHJcbiAgYXNzZXJ0Lm9rKCBNeUVudW1lcmF0aW9uLmVudW1lcmF0aW9uID09PSBNeUVudW1lcmF0aW9uLklURU1fMi5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBhcmUgdGhlIHNhbWUgMicgKTtcclxuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24gPT09IE15RW51bWVyYXRpb24uSVRFTV8zLmVudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gaW5zdGFuY2VzIGFyZSB0aGUgc2FtZSAzJyApO1xyXG5cclxuICB3aW5kb3cuYXNzZXJ0ICYmIGFzc2VydC50aHJvd3MoICgpID0+IHtcclxuICAgIHJldHVybiBuZXcgTXlFbnVtZXJhdGlvbigpO1xyXG4gIH0sICdjYW5ub3QgY3JlYXRlIG5ldyBpbnN0YW5jZXMgYWZ0ZXIgY2xhc3MgaXMgZGVmaW5lZCBhbmQgc2VhbGVkJyApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnRW51bWVyYXRpb24gU3VidHlwaW5nJywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgY2xhc3MgTXlFbnVtZXJhdGlvbiBleHRlbmRzIEVudW1lcmF0aW9uVmFsdWUge1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzEgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzIgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzMgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIE15RW51bWVyYXRpb24gKTtcclxuICB9XHJcblxyXG4gIGNsYXNzIE15U3ViRW51bWVyYXRpb24gZXh0ZW5kcyBNeUVudW1lcmF0aW9uIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSVRFTV80ID0gbmV3IE15U3ViRW51bWVyYXRpb24oKTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBNeVN1YkVudW1lcmF0aW9uLCB7XHJcbiAgICAgIGluc3RhbmNlVHlwZTogTXlFbnVtZXJhdGlvblxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgYXNzZXJ0Lm9rKCBNeVN1YkVudW1lcmF0aW9uLmVudW1lcmF0aW9uLmtleXMubGVuZ3RoID09PSA0LCAna2V5cyBhbGwgdGhlcmUnICk7XHJcbiAgYXNzZXJ0Lm9rKCBNeVN1YkVudW1lcmF0aW9uLmVudW1lcmF0aW9uLnZhbHVlcy5sZW5ndGggPT09IDQsICd2YWx1ZXMgYWxsIHRoZXJlJyApO1xyXG4gIGFzc2VydC5vayggTXlFbnVtZXJhdGlvbi5lbnVtZXJhdGlvbiA9PT0gTXlTdWJFbnVtZXJhdGlvbi5JVEVNXzEuZW51bWVyYXRpb24sICdlbnVtZXJhdGlvbiBpbnN0YW5jZXMgZnJvbSBwYXJlbnQnICk7XHJcbiAgYXNzZXJ0Lm9rKCBNeUVudW1lcmF0aW9uLmVudW1lcmF0aW9uID09PSBNeVN1YkVudW1lcmF0aW9uLklURU1fMi5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBmcm9tIHBhcmVudCAyJyApO1xyXG4gIGFzc2VydC5vayggTXlFbnVtZXJhdGlvbi5lbnVtZXJhdGlvbiA9PT0gTXlTdWJFbnVtZXJhdGlvbi5JVEVNXzMuZW51bWVyYXRpb24sICdlbnVtZXJhdGlvbiBpbnN0YW5jZXMgZnJvbSBwYXJlbnQgMycgKTtcclxuICBhc3NlcnQub2soIE15U3ViRW51bWVyYXRpb24uZW51bWVyYXRpb24gIT09IE15U3ViRW51bWVyYXRpb24uSVRFTV8xLmVudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gaW5zdGFuY2VzIG5vdCBmcm9tIGNoaWxkJyApO1xyXG4gIGFzc2VydC5vayggTXlTdWJFbnVtZXJhdGlvbi5lbnVtZXJhdGlvbiAhPT0gTXlTdWJFbnVtZXJhdGlvbi5JVEVNXzIuZW51bWVyYXRpb24sICdlbnVtZXJhdGlvbiBpbnN0YW5jZXMgbm90IGZyb20gY2hpbGQgMicgKTtcclxuXHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBJTlRFTlRJT05BTCAtIHdlIGtub3cgdGhpcyBkb2Vzbid0IGV4aXN0LCBidXQgc3RpbGwgd2FudCB0aGUgcnVudGltZSBjaGVja1xyXG4gIGFzc2VydC5vayggIU15RW51bWVyYXRpb24uSVRFTV80LCAnc3VwZXIgc2hvdWxkIG5vdCBoYXZlIHN1YiBpdGVtJyApO1xyXG59ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUVwREMsS0FBSyxDQUFDQyxNQUFNLENBQUUsYUFBYyxDQUFDO0FBRTdCRCxLQUFLLENBQUNFLElBQUksQ0FBRSxhQUFhLEVBQUVDLE1BQU0sSUFBSTtFQUVuQyxNQUFNQyxhQUFhLFNBQVNMLGdCQUFnQixDQUFDO0lBQzNDLE9BQXVCTSxNQUFNLEdBQUcsSUFBSUQsYUFBYSxDQUFD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