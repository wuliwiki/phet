// Copyright 2019-2023, University of Colorado Boulder

/**
 * Either horizontal or vertical, with helper values.  Moved from Area Model Common on Nov 7, 2019
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Sam Reid (PhET Interactive Simulations)
 */

import phetCore from './phetCore.js';
import Enumeration from './Enumeration.js';
import EnumerationValue from './EnumerationValue.js';

// So we don't introduce a dependency on phetcommon

class Orientation extends EnumerationValue {
  static HORIZONTAL = new Orientation('x', 'centerX', 'minX', 'maxX', 'left', 'right', 'minWidth', 'maxWidth', 'rectX', 'rectWidth', 'horizontal', 'width', 'column', 'preferredWidth', 'localPreferredWidth', 'widthSizable', (modelViewTransform, value) => modelViewTransform.modelToViewX(value), (modelViewTransform, value) => modelViewTransform.viewToModelX(value), (a, b, VectorType) => new VectorType(a, b, 0, 0));
  static VERTICAL = new Orientation('y', 'centerY', 'minY', 'maxY', 'top', 'bottom', 'minHeight', 'maxHeight', 'rectY', 'rectHeight', 'vertical', 'height', 'row', 'preferredHeight', 'localPreferredHeight', 'heightSizable', (modelViewTransform, value) => modelViewTransform.modelToViewY(value), (modelViewTransform, value) => modelViewTransform.viewToModelY(value), (a, b, VectorType) => new VectorType(b, a, 0, 0));
  static enumeration = new Enumeration(Orientation, {
    phetioDocumentation: 'Horizontal or vertical orientation'
  });
  static fromLayoutOrientation(layoutOrientation) {
    return layoutOrientation === 'horizontal' ? Orientation.HORIZONTAL : Orientation.VERTICAL;
  }

  // So you can position things like node[ orientation.coordinate ] = value
  // So you can center things like node[ orientation.centerCoordinate ] = value
  // So you can center things like bounds[ orientation.minCoordinate ] = value
  // So you can center things like bounds[ orientation.maxCoordinate ] = value
  // For getting the minimal/maximal values from bounds/nodes

  // For being able to handle Rectangles (x/y) and (width/height)

  // The name of the orientation when used for FlowBox

  // The value of the aria-orientation attribute for this Orientation.
  // Returns the single coordinate transformed by the appropriate dimension.
  // Creates a vector (primary,secondary) for horizontal orientations, and (secondary,primary) for vertical orientations.
  // @ts-expect-error - Assigned after instantiation, see below
  constructor(coordinate, centerCoordinate, minCoordinate, maxCoordinate, minSide, maxSide, minSize, maxSize, rectCoordinate, rectSize, flowBoxOrientation, size, line, preferredSize, localPreferredSize, sizable, modelToView, viewToModel, toVector) {
    super();
    this.coordinate = coordinate;
    this.centerCoordinate = centerCoordinate;
    this.minCoordinate = minCoordinate;
    this.maxCoordinate = maxCoordinate;
    this.minSide = minSide;
    this.maxSide = maxSide;
    this.minSize = minSize;
    this.maxSize = maxSize;
    this.rectCoordinate = rectCoordinate;
    this.rectSize = rectSize;
    this.flowBoxOrientation = flowBoxOrientation;
    this.size = size;
    this.line = line;
    this.preferredSize = preferredSize;
    this.localPreferredSize = localPreferredSize;
    this.sizable = sizable;
    this.ariaOrientation = flowBoxOrientation;
    this.modelToView = modelToView;
    this.viewToModel = viewToModel;
    this.toVector = toVector;
  }
}

// Set up opposites as object references (circular)
Orientation.HORIZONTAL.opposite = Orientation.VERTICAL;
Orientation.VERTICAL.opposite = Orientation.HORIZONTAL;
phetCore.register('Orientation', Orientation);
export default Orientation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,