// Copyright 2018-2020, University of Colorado Boulder

/**
 * Tests for dimensionForEach
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import dimensionForEach from './dimensionForEach.js';
QUnit.module('dimensionForEach');
QUnit.test('1 dimensional', assert => {
  const normalValues = [];
  const ourValues = [];
  const arr = [1, 2, 4, 9];
  arr.forEach((element, index) => {
    normalValues.push({
      element: element,
      index: index
    });
  });
  dimensionForEach(1, arr, (element, index) => {
    ourValues.push({
      element: element,
      index: index
    });
  });
  assert.ok(_.isEqual(normalValues, ourValues), '1-dimensional comparison');
});
QUnit.test('2 dimensional', assert => {
  const arr = [[1, 2, 4], [9, 5]];
  const values = [];
  const expectedValues = [{
    element: 1,
    idx1: 0,
    idx2: 0
  }, {
    element: 2,
    idx1: 0,
    idx2: 1
  }, {
    element: 4,
    idx1: 0,
    idx2: 2
  }, {
    element: 9,
    idx1: 1,
    idx2: 0
  }, {
    element: 5,
    idx1: 1,
    idx2: 1
  }];
  dimensionForEach(2, arr, (element, idx1, idx2) => {
    values.push({
      element: element,
      idx1: idx1,
      idx2: idx2
    });
  });
  assert.ok(_.isEqual(values, expectedValues), '2-dimensional comparison');
});
QUnit.test('3 dimensional', assert => {
  const arr = [[[1, 5], [9, 2]], [[3, 3, 4]]];
  const values = [];
  const expectedValues = [{
    element: 1,
    idx1: 0,
    idx2: 0,
    idx3: 0
  }, {
    element: 5,
    idx1: 0,
    idx2: 0,
    idx3: 1
  }, {
    element: 9,
    idx1: 0,
    idx2: 1,
    idx3: 0
  }, {
    element: 2,
    idx1: 0,
    idx2: 1,
    idx3: 1
  }, {
    element: 3,
    idx1: 1,
    idx2: 0,
    idx3: 0
  }, {
    element: 3,
    idx1: 1,
    idx2: 0,
    idx3: 1
  }, {
    element: 4,
    idx1: 1,
    idx2: 0,
    idx3: 2
  }];
  dimensionForEach(3, arr, (element, idx1, idx2, idx3) => {
    values.push({
      element: element,
      idx1: idx1,
      idx2: idx2,
      idx3: idx3
    });
  });
  assert.ok(_.isEqual(values, expectedValues), '3-dimensional comparison');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaW1lbnNpb25Gb3JFYWNoIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0Iiwibm9ybWFsVmFsdWVzIiwib3VyVmFsdWVzIiwiYXJyIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJpbmRleCIsInB1c2giLCJvayIsIl8iLCJpc0VxdWFsIiwidmFsdWVzIiwiZXhwZWN0ZWRWYWx1ZXMiLCJpZHgxIiwiaWR4MiIsImlkeDMiXSwic291cmNlcyI6WyJkaW1lbnNpb25Gb3JFYWNoVGVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGVzdHMgZm9yIGRpbWVuc2lvbkZvckVhY2hcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBkaW1lbnNpb25Gb3JFYWNoIGZyb20gJy4vZGltZW5zaW9uRm9yRWFjaC5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdkaW1lbnNpb25Gb3JFYWNoJyApO1xyXG5cclxuUVVuaXQudGVzdCggJzEgZGltZW5zaW9uYWwnLCBhc3NlcnQgPT4ge1xyXG4gIGNvbnN0IG5vcm1hbFZhbHVlcyA9IFtdO1xyXG4gIGNvbnN0IG91clZhbHVlcyA9IFtdO1xyXG5cclxuICBjb25zdCBhcnIgPSBbIDEsIDIsIDQsIDkgXTtcclxuXHJcbiAgYXJyLmZvckVhY2goICggZWxlbWVudCwgaW5kZXggKSA9PiB7XHJcbiAgICBub3JtYWxWYWx1ZXMucHVzaCgge1xyXG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICBpbmRleDogaW5kZXhcclxuICAgIH0gKTtcclxuICB9ICk7XHJcblxyXG4gIGRpbWVuc2lvbkZvckVhY2goIDEsIGFyciwgKCBlbGVtZW50LCBpbmRleCApID0+IHtcclxuICAgIG91clZhbHVlcy5wdXNoKCB7XHJcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXHJcbiAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgfSApO1xyXG4gIH0gKTtcclxuXHJcbiAgYXNzZXJ0Lm9rKCBfLmlzRXF1YWwoIG5vcm1hbFZhbHVlcywgb3VyVmFsdWVzICksICcxLWRpbWVuc2lvbmFsIGNvbXBhcmlzb24nICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICcyIGRpbWVuc2lvbmFsJywgYXNzZXJ0ID0+IHtcclxuICBjb25zdCBhcnIgPSBbXHJcbiAgICBbIDEsIDIsIDQgXSxcclxuICAgIFsgOSwgNSBdXHJcbiAgXTtcclxuICBjb25zdCB2YWx1ZXMgPSBbXTtcclxuICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IFtcclxuICAgIHsgZWxlbWVudDogMSwgaWR4MTogMCwgaWR4MjogMCB9LFxyXG4gICAgeyBlbGVtZW50OiAyLCBpZHgxOiAwLCBpZHgyOiAxIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDQsIGlkeDE6IDAsIGlkeDI6IDIgfSxcclxuICAgIHsgZWxlbWVudDogOSwgaWR4MTogMSwgaWR4MjogMCB9LFxyXG4gICAgeyBlbGVtZW50OiA1LCBpZHgxOiAxLCBpZHgyOiAxIH1cclxuICBdO1xyXG5cclxuICBkaW1lbnNpb25Gb3JFYWNoKCAyLCBhcnIsICggZWxlbWVudCwgaWR4MSwgaWR4MiApID0+IHtcclxuICAgIHZhbHVlcy5wdXNoKCB7XHJcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXHJcbiAgICAgIGlkeDE6IGlkeDEsXHJcbiAgICAgIGlkeDI6IGlkeDJcclxuICAgIH0gKTtcclxuICB9ICk7XHJcblxyXG4gIGFzc2VydC5vayggXy5pc0VxdWFsKCB2YWx1ZXMsIGV4cGVjdGVkVmFsdWVzICksICcyLWRpbWVuc2lvbmFsIGNvbXBhcmlzb24nICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICczIGRpbWVuc2lvbmFsJywgYXNzZXJ0ID0+IHtcclxuICBjb25zdCBhcnIgPSBbXHJcbiAgICBbXHJcbiAgICAgIFsgMSwgNSBdLFxyXG4gICAgICBbIDksIDIgXVxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgWyAzLCAzLCA0IF1cclxuICAgIF1cclxuICBdO1xyXG4gIGNvbnN0IHZhbHVlcyA9IFtdO1xyXG4gIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gW1xyXG4gICAgeyBlbGVtZW50OiAxLCBpZHgxOiAwLCBpZHgyOiAwLCBpZHgzOiAwIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDUsIGlkeDE6IDAsIGlkeDI6IDAsIGlkeDM6IDEgfSxcclxuICAgIHsgZWxlbWVudDogOSwgaWR4MTogMCwgaWR4MjogMSwgaWR4MzogMCB9LFxyXG4gICAgeyBlbGVtZW50OiAyLCBpZHgxOiAwLCBpZHgyOiAxLCBpZHgzOiAxIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDMsIGlkeDE6IDEsIGlkeDI6IDAsIGlkeDM6IDAgfSxcclxuICAgIHsgZWxlbWVudDogMywgaWR4MTogMSwgaWR4MjogMCwgaWR4MzogMSB9LFxyXG4gICAgeyBlbGVtZW50OiA0LCBpZHgxOiAxLCBpZHgyOiAwLCBpZHgzOiAyIH1cclxuICBdO1xyXG5cclxuICBkaW1lbnNpb25Gb3JFYWNoKCAzLCBhcnIsICggZWxlbWVudCwgaWR4MSwgaWR4MiwgaWR4MyApID0+IHtcclxuICAgIHZhbHVlcy5wdXNoKCB7XHJcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXHJcbiAgICAgIGlkeDE6IGlkeDEsXHJcbiAgICAgIGlkeDI6IGlkeDIsXHJcbiAgICAgIGlkeDM6IGlkeDNcclxuICAgIH0gKTtcclxuICB9ICk7XHJcblxyXG4gIGFzc2VydC5vayggXy5pc0VxdWFsKCB2YWx1ZXMsIGV4cGVjdGVkVmFsdWVzICksICczLWRpbWVuc2lvbmFsIGNvbXBhcmlzb24nICk7XHJcbn0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBRXBEQyxLQUFLLENBQUND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