// Copyright 2021-2023, University of Colorado Boulder

/**
 * EnumerationValue is the base class for enumeration value instances.
 * See https://github.com/phetsims/phet-info/blob/master/doc/phet-software-design-patterns.md#enumeration
 *
 * PhET's Enumeration pattern is:
 *
 * class MyEnumeration extends EnumerationValue {
 *   public static VALUE_1 = new MyEnumeration();
 *   public static VALUE_2 = new MyEnumeration();
 *
 *   // Make sure this is last, once all EnumerationValues have been declared statically.
 *   public static enumeration = new Enumeration( MyEnumeration );
 * }
 *
 * // Usage
 * console.log( MyEnumeration.VALUE_1 );
 * const printValue = enumValue => {
 *   assert && assert( enumValue.enumeration.values.includes(enumValue));
 *   console.log( enumValue );
 * };
 * printValue( MyEnumeration.VALUE_2 );
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import phetCore from './phetCore.js';
class EnumerationValue {
  // null until set by Enumeration. Once set, cannot be changed.

  // After an Enumeration is constructed, no new instances of that exact type can be made (though it is OK to
  // create subtypes)
  static sealedCache = new Set();
  toString() {
    return this.name;
  }

  // This method is unused, but needs to remain here so other types don't accidentally structurally match
  // enumeration values.  Without this, string satisfies the EnumerationValue interface, but we don't want it to.
  isEnumerationValue() {
    return true;
  }
  constructor() {
    const c = this.constructor;
    assert && assert(!EnumerationValue.sealedCache.has(c), 'cannot create instanceof of a sealed constructor');
    this._name = null;
    this._enumeration = null;
  }
  set name(name) {
    assert && assert(!this._name, 'name cannot be changed once defined.');
    this._name = name;
  }
  get name() {
    assert && assert(this._name, 'name cannot be retrieved until it has been filled in by Enumeration.');
    return this._name;
  }
  set enumeration(enumeration) {
    assert && assert(!this._enumeration, 'enumeration cannot be changed once defined.');
    this._enumeration = enumeration;
  }
  get enumeration() {
    assert && assert(this._enumeration, 'enumeration cannot be retrieved until it has been filled in by Enumeration.');
    return this._enumeration;
  }
}
phetCore.register('EnumerationValue', EnumerationValue);
export default EnumerationValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsIkVudW1lcmF0aW9uVmFsdWUiLCJzZWFsZWRDYWNoZSIsIlNldCIsInRvU3RyaW5nIiwibmFtZSIsImlzRW51bWVyYXRpb25WYWx1ZSIsImNvbnN0cnVjdG9yIiwiYyIsImFzc2VydCIsImhhcyIsIl9uYW1lIiwiX2VudW1lcmF0aW9uIiwiZW51bWVyYXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVudW1lcmF0aW9uVmFsdWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRW51bWVyYXRpb25WYWx1ZSBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgZW51bWVyYXRpb24gdmFsdWUgaW5zdGFuY2VzLlxyXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtaW5mby9ibG9iL21hc3Rlci9kb2MvcGhldC1zb2Z0d2FyZS1kZXNpZ24tcGF0dGVybnMubWQjZW51bWVyYXRpb25cclxuICpcclxuICogUGhFVCdzIEVudW1lcmF0aW9uIHBhdHRlcm4gaXM6XHJcbiAqXHJcbiAqIGNsYXNzIE15RW51bWVyYXRpb24gZXh0ZW5kcyBFbnVtZXJhdGlvblZhbHVlIHtcclxuICogICBwdWJsaWMgc3RhdGljIFZBTFVFXzEgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xyXG4gKiAgIHB1YmxpYyBzdGF0aWMgVkFMVUVfMiA9IG5ldyBNeUVudW1lcmF0aW9uKCk7XHJcbiAqXHJcbiAqICAgLy8gTWFrZSBzdXJlIHRoaXMgaXMgbGFzdCwgb25jZSBhbGwgRW51bWVyYXRpb25WYWx1ZXMgaGF2ZSBiZWVuIGRlY2xhcmVkIHN0YXRpY2FsbHkuXHJcbiAqICAgcHVibGljIHN0YXRpYyBlbnVtZXJhdGlvbiA9IG5ldyBFbnVtZXJhdGlvbiggTXlFbnVtZXJhdGlvbiApO1xyXG4gKiB9XHJcbiAqXHJcbiAqIC8vIFVzYWdlXHJcbiAqIGNvbnNvbGUubG9nKCBNeUVudW1lcmF0aW9uLlZBTFVFXzEgKTtcclxuICogY29uc3QgcHJpbnRWYWx1ZSA9IGVudW1WYWx1ZSA9PiB7XHJcbiAqICAgYXNzZXJ0ICYmIGFzc2VydCggZW51bVZhbHVlLmVudW1lcmF0aW9uLnZhbHVlcy5pbmNsdWRlcyhlbnVtVmFsdWUpKTtcclxuICogICBjb25zb2xlLmxvZyggZW51bVZhbHVlICk7XHJcbiAqIH07XHJcbiAqIHByaW50VmFsdWUoIE15RW51bWVyYXRpb24uVkFMVUVfMiApO1xyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb24gZnJvbSAnLi9FbnVtZXJhdGlvbi5qcyc7XHJcbmltcG9ydCBDb25zdHJ1Y3RvciBmcm9tICcuL3R5cGVzL0NvbnN0cnVjdG9yLmpzJztcclxuXHJcbmNsYXNzIEVudW1lcmF0aW9uVmFsdWUge1xyXG5cclxuICAvLyBudWxsIHVudGlsIHNldCBieSBFbnVtZXJhdGlvbi4gT25jZSBzZXQsIGNhbm5vdCBiZSBjaGFuZ2VkLlxyXG4gIHByaXZhdGUgX25hbWU6IHN0cmluZyB8IG51bGw7XHJcbiAgcHJpdmF0ZSBfZW51bWVyYXRpb246IEVudW1lcmF0aW9uPHRoaXM+IHwgbnVsbDtcclxuXHJcbiAgLy8gQWZ0ZXIgYW4gRW51bWVyYXRpb24gaXMgY29uc3RydWN0ZWQsIG5vIG5ldyBpbnN0YW5jZXMgb2YgdGhhdCBleGFjdCB0eXBlIGNhbiBiZSBtYWRlICh0aG91Z2ggaXQgaXMgT0sgdG9cclxuICAvLyBjcmVhdGUgc3VidHlwZXMpXHJcbiAgcHVibGljIHN0YXRpYyBzZWFsZWRDYWNoZSA9IG5ldyBTZXQ8Q29uc3RydWN0b3I8RW51bWVyYXRpb25WYWx1ZT4+KCk7XHJcblxyXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICB9XHJcblxyXG4gIC8vIFRoaXMgbWV0aG9kIGlzIHVudXNlZCwgYnV0IG5lZWRzIHRvIHJlbWFpbiBoZXJlIHNvIG90aGVyIHR5cGVzIGRvbid0IGFjY2lkZW50YWxseSBzdHJ1Y3R1cmFsbHkgbWF0Y2hcclxuICAvLyBlbnVtZXJhdGlvbiB2YWx1ZXMuICBXaXRob3V0IHRoaXMsIHN0cmluZyBzYXRpc2ZpZXMgdGhlIEVudW1lcmF0aW9uVmFsdWUgaW50ZXJmYWNlLCBidXQgd2UgZG9uJ3Qgd2FudCBpdCB0by5cclxuICBwcml2YXRlIGlzRW51bWVyYXRpb25WYWx1ZSgpOiBib29sZWFuIHtyZXR1cm4gdHJ1ZTt9XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnN0IGMgPSB0aGlzLmNvbnN0cnVjdG9yIGFzIENvbnN0cnVjdG9yPEVudW1lcmF0aW9uVmFsdWU+O1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIUVudW1lcmF0aW9uVmFsdWUuc2VhbGVkQ2FjaGUuaGFzKCBjICksICdjYW5ub3QgY3JlYXRlIGluc3RhbmNlb2Ygb2YgYSBzZWFsZWQgY29uc3RydWN0b3InICk7XHJcblxyXG4gICAgdGhpcy5fbmFtZSA9IG51bGw7XHJcbiAgICB0aGlzLl9lbnVtZXJhdGlvbiA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IG5hbWUoIG5hbWU6IHN0cmluZyApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLl9uYW1lLCAnbmFtZSBjYW5ub3QgYmUgY2hhbmdlZCBvbmNlIGRlZmluZWQuJyApO1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuX25hbWUsICduYW1lIGNhbm5vdCBiZSByZXRyaWV2ZWQgdW50aWwgaXQgaGFzIGJlZW4gZmlsbGVkIGluIGJ5IEVudW1lcmF0aW9uLicgKTtcclxuICAgIHJldHVybiB0aGlzLl9uYW1lITtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgZW51bWVyYXRpb24oIGVudW1lcmF0aW9uOiBFbnVtZXJhdGlvbjx0aGlzPiApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLl9lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGNhbm5vdCBiZSBjaGFuZ2VkIG9uY2UgZGVmaW5lZC4nICk7XHJcbiAgICB0aGlzLl9lbnVtZXJhdGlvbiA9IGVudW1lcmF0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBlbnVtZXJhdGlvbigpOiBFbnVtZXJhdGlvbjx0aGlzPiB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLl9lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGNhbm5vdCBiZSByZXRyaWV2ZWQgdW50aWwgaXQgaGFzIGJlZW4gZmlsbGVkIGluIGJ5IEVudW1lcmF0aW9uLicgKTtcclxuICAgIHJldHVybiB0aGlzLl9lbnVtZXJhdGlvbiE7XHJcbiAgfVxyXG59XHJcblxyXG5waGV0Q29yZS5yZWdpc3RlciggJ0VudW1lcmF0aW9uVmFsdWUnLCBFbnVtZXJhdGlvblZhbHVlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFbnVtZXJhdGlvblZhbHVlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGVBQWU7QUFJcEMsTUFBTUMsZ0JBQWdCLENBQUM7RUFFckI7O0VBSUE7RUFDQTtFQUNBLE9BQWNDLFdBQVcsR0FBRyxJQUFJQyxHQUFHLENBQWdDLENBQUM7RUFFN0RDLFFBQVFBLENBQUEsRUFBVztJQUN4QixPQUFPLElBQUksQ0FBQ0MsSUFBSTtFQUNsQjs7RUFFQTtFQUNBO0VBQ1FDLGtCQUFrQkEsQ0FBQSxFQUFZO0lBQUMsT0FBTyxJQUFJO0VBQUM7RUFFNUNDLFdBQVdBLENBQUEsRUFBRztJQUNuQixNQUFNQyxDQUFDLEdBQUcsSUFBSSxDQUFDRCxXQUE0QztJQUMzREUsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ1IsZ0JBQWdCLENBQUNDLFdBQVcsQ0FBQ1EsR0FBRyxDQUFFRixDQUFFLENBQUMsRUFBRSxrREFBbUQsQ0FBQztJQUU5RyxJQUFJLENBQUNHLEtBQUssR0FBRyxJQUFJO0lBQ2pCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUk7RUFDMUI7RUFFQSxJQUFXUCxJQUFJQSxDQUFFQSxJQUFZLEVBQUc7SUFDOUJJLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFDRSxLQUFLLEVBQUUsc0NBQXVDLENBQUM7SUFDdkUsSUFBSSxDQUFDQSxLQUFLLEdBQUdOLElBQUk7RUFDbkI7RUFFQSxJQUFXQSxJQUFJQSxDQUFBLEVBQVc7SUFDeEJJLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0UsS0FBSyxFQUFFLHNFQUF1RSxDQUFDO0lBQ3RHLE9BQU8sSUFBSSxDQUFDQSxLQUFLO0VBQ25CO0VBRUEsSUFBV0UsV0FBV0EsQ0FBRUEsV0FBOEIsRUFBRztJQUN2REosTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUNHLFlBQVksRUFBRSw2Q0FBOEMsQ0FBQztJQUNyRixJQUFJLENBQUNBLFlBQVksR0FBR0MsV0FBVztFQUNqQztFQUVBLElBQVdBLFdBQVdBLENBQUEsRUFBc0I7SUFDMUNKLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0csWUFBWSxFQUFFLDZFQUE4RSxDQUFDO0lBQ3BILE9BQU8sSUFBSSxDQUFDQSxZQUFZO0VBQzFCO0FBQ0Y7QUFFQVosUUFBUSxDQUFDYyxRQUFRLENBQUUsa0JBQWtCLEVBQUViLGdCQUFpQixDQUFDO0FBRXpELGVBQWVBLGdCQUFnQiJ9