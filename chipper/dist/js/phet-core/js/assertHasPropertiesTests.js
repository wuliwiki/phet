// Copyright 2020-2021, University of Colorado Boulder

/**
 * Tests for assertHasProperties
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import assertHasProperties from './assertHasProperties.js';
QUnit.module('assertHasProperties');
QUnit.test('assertHasProperties', assert => {
  assert.ok(true, 'one test whether or not assertions are enabled');
  if (window.assert) {
    class MyObject {
      // @public
      aFunction() {}
      get getter() {
        return 'hi';
      }
    }
    class MyChild extends MyObject {
      // @public
      childMethod() {}
      get childGetter() {
        return 'I am a middle child';
      }
    }

    // Should not throw error because options are all from one set.
    assertHasProperties({
      a: true,
      b: false
    }, ['a']);
    assertHasProperties({
      a: true,
      b: false
    }, ['a', 'b']);
    assertHasProperties({
      b: undefined
    }, ['b']);
    assertHasProperties({
      b: null
    }, ['b']);
    assertHasProperties({
      get b() {
        return 5;
      }
    }, ['b']);
    assertHasProperties({
      b() {}
    }, ['b']);
    assertHasProperties({
      set b(b) {}
    }, ['b']);
    assertHasProperties(new MyObject(), ['aFunction', 'getter']);
    assertHasProperties(new MyChild(), ['aFunction', 'getter', 'childMethod', 'childGetter']);

    // Simulate scenery Node style types
    class Parent {
      constructor() {
        this.opacityProperty = {};
      }

      // @public
      getOpacity() {
        return 0;
      }

      // @public
      get opacity() {
        return 0;
      }
    }
    class Circle extends Parent {}

    // on direct prototype
    assertHasProperties(new Parent(), ['getOpacity', 'opacity', 'opacityProperty']);

    // on ancestor parent prototype
    assertHasProperties(new Circle(), ['getOpacity', 'opacity', 'opacityProperty']);

    // Should error because properties are not provided
    assert.throws(() => assertHasProperties({
      b: false
    }, ['a']));
    assert.throws(() => assertHasProperties({}, ['a']));
    assert.throws(() => assertHasProperties({
      ab: 'something'
    }, ['a']));
    assert.throws(() => assertHasProperties({
      a: true,
      b: false
    }, ['a', 'b', 'c']));
    assert.throws(() => assertHasProperties({
      a: true,
      c: undefined
    }, ['a', 'b', 'c']));
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnRIYXNQcm9wZXJ0aWVzIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0Iiwib2siLCJ3aW5kb3ciLCJNeU9iamVjdCIsImFGdW5jdGlvbiIsImdldHRlciIsIk15Q2hpbGQiLCJjaGlsZE1ldGhvZCIsImNoaWxkR2V0dGVyIiwiYSIsImIiLCJ1bmRlZmluZWQiLCJQYXJlbnQiLCJjb25zdHJ1Y3RvciIsIm9wYWNpdHlQcm9wZXJ0eSIsImdldE9wYWNpdHkiLCJvcGFjaXR5IiwiQ2lyY2xlIiwidGhyb3dzIiwiYWIiLCJjIl0sInNvdXJjZXMiOlsiYXNzZXJ0SGFzUHJvcGVydGllc1Rlc3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGZvciBhc3NlcnRIYXNQcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgYXNzZXJ0SGFzUHJvcGVydGllcyBmcm9tICcuL2Fzc2VydEhhc1Byb3BlcnRpZXMuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnYXNzZXJ0SGFzUHJvcGVydGllcycgKTtcclxuXHJcblFVbml0LnRlc3QoICdhc3NlcnRIYXNQcm9wZXJ0aWVzJywgYXNzZXJ0ID0+IHtcclxuICBhc3NlcnQub2soIHRydWUsICdvbmUgdGVzdCB3aGV0aGVyIG9yIG5vdCBhc3NlcnRpb25zIGFyZSBlbmFibGVkJyApO1xyXG5cclxuICBpZiAoIHdpbmRvdy5hc3NlcnQgKSB7XHJcblxyXG4gICAgY2xhc3MgTXlPYmplY3Qge1xyXG5cclxuICAgICAgLy8gQHB1YmxpY1xyXG4gICAgICBhRnVuY3Rpb24oKSB7fVxyXG5cclxuICAgICAgZ2V0IGdldHRlcigpIHtyZXR1cm4gJ2hpJzsgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsYXNzIE15Q2hpbGQgZXh0ZW5kcyBNeU9iamVjdCB7XHJcblxyXG4gICAgICAvLyBAcHVibGljXHJcbiAgICAgIGNoaWxkTWV0aG9kKCkge31cclxuXHJcbiAgICAgIGdldCBjaGlsZEdldHRlcigpIHsgcmV0dXJuICdJIGFtIGEgbWlkZGxlIGNoaWxkJzsgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNob3VsZCBub3QgdGhyb3cgZXJyb3IgYmVjYXVzZSBvcHRpb25zIGFyZSBhbGwgZnJvbSBvbmUgc2V0LlxyXG4gICAgYXNzZXJ0SGFzUHJvcGVydGllcyggeyBhOiB0cnVlLCBiOiBmYWxzZSB9LCBbICdhJyBdICk7XHJcbiAgICBhc3NlcnRIYXNQcm9wZXJ0aWVzKCB7IGE6IHRydWUsIGI6IGZhbHNlIH0sIFsgJ2EnLCAnYicgXSApO1xyXG4gICAgYXNzZXJ0SGFzUHJvcGVydGllcyggeyBiOiB1bmRlZmluZWQgfSwgWyAnYicgXSApO1xyXG4gICAgYXNzZXJ0SGFzUHJvcGVydGllcyggeyBiOiBudWxsIH0sIFsgJ2InIF0gKTtcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgZ2V0IGIoKSB7IHJldHVybiA1OyB9IH0sIFsgJ2InIF0gKTtcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgYigpIHsgfSB9LCBbICdiJyBdICk7XHJcbiAgICBhc3NlcnRIYXNQcm9wZXJ0aWVzKCB7IHNldCBiKCBiICkgeyB9IH0sIFsgJ2InIF0gKTtcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIG5ldyBNeU9iamVjdCgpLCBbICdhRnVuY3Rpb24nLCAnZ2V0dGVyJyBdICk7XHJcbiAgICBhc3NlcnRIYXNQcm9wZXJ0aWVzKCBuZXcgTXlDaGlsZCgpLCBbICdhRnVuY3Rpb24nLCAnZ2V0dGVyJywgJ2NoaWxkTWV0aG9kJywgJ2NoaWxkR2V0dGVyJyBdICk7XHJcblxyXG4gICAgLy8gU2ltdWxhdGUgc2NlbmVyeSBOb2RlIHN0eWxlIHR5cGVzXHJcbiAgICBjbGFzcyBQYXJlbnQge1xyXG4gICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLm9wYWNpdHlQcm9wZXJ0eSA9IHt9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBAcHVibGljXHJcbiAgICAgIGdldE9wYWNpdHkoKSB7cmV0dXJuIDA7fVxyXG5cclxuICAgICAgLy8gQHB1YmxpY1xyXG4gICAgICBnZXQgb3BhY2l0eSgpIHsgcmV0dXJuIDA7fVxyXG4gICAgfVxyXG5cclxuICAgIGNsYXNzIENpcmNsZSBleHRlbmRzIFBhcmVudCB7fVxyXG5cclxuICAgIC8vIG9uIGRpcmVjdCBwcm90b3R5cGVcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIG5ldyBQYXJlbnQoKSwgWyAnZ2V0T3BhY2l0eScsICdvcGFjaXR5JywgJ29wYWNpdHlQcm9wZXJ0eScgXSApO1xyXG5cclxuICAgIC8vIG9uIGFuY2VzdG9yIHBhcmVudCBwcm90b3R5cGVcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIG5ldyBDaXJjbGUoKSwgWyAnZ2V0T3BhY2l0eScsICdvcGFjaXR5JywgJ29wYWNpdHlQcm9wZXJ0eScgXSApO1xyXG5cclxuICAgIC8vIFNob3VsZCBlcnJvciBiZWNhdXNlIHByb3BlcnRpZXMgYXJlIG5vdCBwcm92aWRlZFxyXG4gICAgYXNzZXJ0LnRocm93cyggKCkgPT4gYXNzZXJ0SGFzUHJvcGVydGllcyggeyBiOiBmYWxzZSB9LCBbICdhJyBdICkgKTtcclxuICAgIGFzc2VydC50aHJvd3MoICgpID0+IGFzc2VydEhhc1Byb3BlcnRpZXMoIHt9LCBbICdhJyBdICkgKTtcclxuICAgIGFzc2VydC50aHJvd3MoICgpID0+IGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgYWI6ICdzb21ldGhpbmcnIH0sIFsgJ2EnIF0gKSApO1xyXG4gICAgYXNzZXJ0LnRocm93cyggKCkgPT4gYXNzZXJ0SGFzUHJvcGVydGllcyggeyBhOiB0cnVlLCBiOiBmYWxzZSB9LCBbICdhJywgJ2InLCAnYycgXSApICk7XHJcbiAgICBhc3NlcnQudGhyb3dzKCAoKSA9PiBhc3NlcnRIYXNQcm9wZXJ0aWVzKCB7IGE6IHRydWUsIGM6IHVuZGVmaW5lZCB9LCBbICdhJywgJ2InLCAnYycgXSApICk7XHJcbiAgfVxyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLG1CQUFtQixNQUFNLDBCQUEwQjtBQUUxREMsS0FBSyxDQUFDQyxNQUFNLENBQUUscUJBQXNCLENBQUM7QUFFckNELEtBQUssQ0FBQ0UsSUFBSSxDQUFFLHFCQUFxQixFQUFFQyxNQUFNLElBQUk7RUFDM0NBLE1BQU0sQ0FBQ0MsRUFBRSxDQUFFLElBQUksRUFBRSxnREFBaUQsQ0FBQztFQUVuRSxJQUFLQyxNQUFNLENBQUNGLE1BQU0sRUFBRztJQUVuQixNQUFNRyxRQUFRLENBQUM7TUFFYjtNQUNBQyxTQUFTQSxDQUFBLEVBQUcsQ0FBQztNQUViLElBQUlDLE1BQU1BLENBQUEsRUFBRztRQUFDLE9BQU8sSUFBSTtNQUFFO0lBQzdCO0lBRUEsTUFBTUMsT0FBTyxTQUFTSCxRQUFRLENBQUM7TUFFN0I7TUFDQUksV0FBV0EsQ0FBQSxFQUFHLENBQUM7TUFFZixJQUFJQyxXQUFXQSxDQUFBLEVBQUc7UUFBRSxPQUFPLHFCQUFxQjtNQUFFO0lBQ3BEOztJQUVBO0lBQ0FaLG1CQUFtQixDQUFFO01BQUVhLENBQUMsRUFBRSxJQUFJO01BQUVDLENBQUMsRUFBRTtJQUFNLENBQUMsRUFBRSxDQUFFLEdBQUcsQ0FBRyxDQUFDO0lBQ3JEZCxtQkFBbUIsQ0FBRTtNQUFFYSxDQUFDLEVBQUUsSUFBSTtNQUFFQyxDQUFDLEVBQUU7SUFBTSxDQUFDLEVBQUUsQ0FBRSxHQUFHLEVBQUUsR0FBRyxDQUFHLENBQUM7SUFDMURkLG1CQUFtQixDQUFFO01BQUVjLENBQUMsRUFBRUM7SUFBVSxDQUFDLEVBQUUsQ0FBRSxHQUFHLENBQUcsQ0FBQztJQUNoRGYsbUJBQW1CLENBQUU7TUFBRWMsQ0FBQyxFQUFFO0lBQUss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