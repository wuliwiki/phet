// Copyright 2019-2022, University of Colorado Boulder

/**
 * The main model for the Explore screen of the Buoyancy simulation.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import Matrix3 from '../../../../dot/js/Matrix3.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Cube from '../../common/model/Cube.js';
import DensityBuoyancyModel from '../../common/model/DensityBuoyancyModel.js';
import { MassTag } from '../../common/model/Mass.js';
import Material from '../../common/model/Material.js';
import Scale, { DisplayType } from '../../common/model/Scale.js';
import TwoBlockMode from '../../common/model/TwoBlockMode.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
export default class BuoyancyExploreModel extends DensityBuoyancyModel {
  constructor(options) {
    const tandem = options.tandem;
    super(options);
    this.modeProperty = new EnumerationProperty(TwoBlockMode.ONE_BLOCK, {
      tandem: tandem.createTandem('modeProperty')
    });
    const blocksTandem = tandem.createTandem('blocks');
    this.primaryMass = Cube.createWithMass(this.engine, Material.WOOD, new Vector2(-0.2, 0.2), 2, {
      tag: MassTag.PRIMARY,
      tandem: blocksTandem.createTandem('blockA')
    });
    this.availableMasses.push(this.primaryMass);
    this.secondaryMass = Cube.createWithMass(this.engine, Material.ALUMINUM, new Vector2(0.05, 0.35), 13.5, {
      tag: MassTag.SECONDARY,
      tandem: blocksTandem.createTandem('blockB'),
      visible: false
    });
    this.availableMasses.push(this.secondaryMass);
    this.modeProperty.link(mode => {
      this.secondaryMass.internalVisibleProperty.value = mode === TwoBlockMode.TWO_BLOCKS;
    });

    // Left scale
    this.availableMasses.push(new Scale(this.engine, this.gravityProperty, {
      matrix: Matrix3.translation(-0.65, -Scale.SCALE_BASE_BOUNDS.minY),
      displayType: DisplayType.NEWTONS,
      tandem: tandem.createTandem('leftScale'),
      canMove: true
    }));

    // Pool scale
    const poolScale = new Scale(this.engine, this.gravityProperty, {
      matrix: Matrix3.translation(0.3, -Scale.SCALE_BASE_BOUNDS.minY + this.poolBounds.minY),
      displayType: DisplayType.NEWTONS,
      tandem: tandem.createTandem('poolScale'),
      canMove: true
    });
    this.availableMasses.push(poolScale);

    // Adjust pool volume so that it's at the desired value WITH the pool scale inside.
    this.pool.liquidVolumeProperty.value -= poolScale.volumeProperty.value;
    this.pool.liquidVolumeProperty.setInitialValue(this.pool.liquidVolumeProperty.value);
    this.densityExpandedProperty = new BooleanProperty(false);
  }

  /**
   * Resets things to their original values.
   */
  reset() {
    this.modeProperty.reset();
    this.primaryMass.reset();
    this.secondaryMass.reset();
    this.densityExpandedProperty.reset();
    super.reset();
  }
}
densityBuoyancyCommon.register('BuoyancyExploreModel', BuoyancyExploreModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbnVtZXJhdGlvblByb3BlcnR5IiwiTWF0cml4MyIsIlZlY3RvcjIiLCJDdWJlIiwiRGVuc2l0eUJ1b3lhbmN5TW9kZWwiLCJNYXNzVGFnIiwiTWF0ZXJpYWwiLCJTY2FsZSIsIkRpc3BsYXlUeXBlIiwiVHdvQmxvY2tNb2RlIiwiZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIiwiQnVveWFuY3lFeHBsb3JlTW9kZWwiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJtb2RlUHJvcGVydHkiLCJPTkVfQkxPQ0siLCJjcmVhdGVUYW5kZW0iLCJibG9ja3NUYW5kZW0iLCJwcmltYXJ5TWFzcyIsImNyZWF0ZVdpdGhNYXNzIiwiZW5naW5lIiwiV09PRCIsInRhZyIsIlBSSU1BUlkiLCJhdmFpbGFibGVNYXNzZXMiLCJwdXNoIiwic2Vjb25kYXJ5TWFzcyIsIkFMVU1JTlVNIiwiU0VDT05EQVJZIiwidmlzaWJsZSIsImxpbmsiLCJtb2RlIiwiaW50ZXJuYWxWaXNpYmxlUHJvcGVydHkiLCJ2YWx1ZSIsIlRXT19CTE9DS1MiLCJncmF2aXR5UHJvcGVydHkiLCJtYXRyaXgiLCJ0cmFuc2xhdGlvbiIsIlNDQUxFX0JBU0VfQk9VTkRTIiwibWluWSIsImRpc3BsYXlUeXBlIiwiTkVXVE9OUyIsImNhbk1vdmUiLCJwb29sU2NhbGUiLCJwb29sQm91bmRzIiwicG9vbCIsImxpcXVpZFZvbHVtZVByb3BlcnR5Iiwidm9sdW1lUHJvcGVydHkiLCJzZXRJbml0aWFsVmFsdWUiLCJkZW5zaXR5RXhwYW5kZWRQcm9wZXJ0eSIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCdW95YW5jeUV4cGxvcmVNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgbWFpbiBtb2RlbCBmb3IgdGhlIEV4cGxvcmUgc2NyZWVuIG9mIHRoZSBCdW95YW5jeSBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBDdWJlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9DdWJlLmpzJztcclxuaW1wb3J0IERlbnNpdHlCdW95YW5jeU1vZGVsLCB7IERlbnNpdHlCdW95YW5jeU1vZGVsT3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9EZW5zaXR5QnVveWFuY3lNb2RlbC5qcyc7XHJcbmltcG9ydCB7IE1hc3NUYWcgfSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvTWFzcy5qcyc7XHJcbmltcG9ydCBNYXRlcmlhbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgU2NhbGUsIHsgRGlzcGxheVR5cGUgfSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU2NhbGUuanMnO1xyXG5pbXBvcnQgVHdvQmxvY2tNb2RlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Ud29CbG9ja01vZGUuanMnO1xyXG5pbXBvcnQgZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIGZyb20gJy4uLy4uL2RlbnNpdHlCdW95YW5jeUNvbW1vbi5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBCdW95YW5jeUV4cGxvcmVNb2RlbE9wdGlvbnMgPSBEZW5zaXR5QnVveWFuY3lNb2RlbE9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdW95YW5jeUV4cGxvcmVNb2RlbCBleHRlbmRzIERlbnNpdHlCdW95YW5jeU1vZGVsIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IG1vZGVQcm9wZXJ0eTogUHJvcGVydHk8VHdvQmxvY2tNb2RlPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgcHJpbWFyeU1hc3M6IEN1YmU7XHJcbiAgcHVibGljIHJlYWRvbmx5IHNlY29uZGFyeU1hc3M6IEN1YmU7XHJcbiAgcHVibGljIHJlYWRvbmx5IGRlbnNpdHlFeHBhbmRlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBvcHRpb25zOiBCdW95YW5jeUV4cGxvcmVNb2RlbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgdGFuZGVtID0gb3B0aW9ucy50YW5kZW07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLm1vZGVQcm9wZXJ0eSA9IG5ldyBFbnVtZXJhdGlvblByb3BlcnR5KCBUd29CbG9ja01vZGUuT05FX0JMT0NLLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGJsb2Nrc1RhbmRlbSA9IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdibG9ja3MnICk7XHJcblxyXG4gICAgdGhpcy5wcmltYXJ5TWFzcyA9IEN1YmUuY3JlYXRlV2l0aE1hc3MoIHRoaXMuZW5naW5lLCBNYXRlcmlhbC5XT09ELCBuZXcgVmVjdG9yMiggLTAuMiwgMC4yICksIDIsIHtcclxuICAgICAgdGFnOiBNYXNzVGFnLlBSSU1BUlksXHJcbiAgICAgIHRhbmRlbTogYmxvY2tzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Jsb2NrQScgKVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hdmFpbGFibGVNYXNzZXMucHVzaCggdGhpcy5wcmltYXJ5TWFzcyApO1xyXG4gICAgdGhpcy5zZWNvbmRhcnlNYXNzID0gQ3ViZS5jcmVhdGVXaXRoTWFzcyggdGhpcy5lbmdpbmUsIE1hdGVyaWFsLkFMVU1JTlVNLCBuZXcgVmVjdG9yMiggMC4wNSwgMC4zNSApLCAxMy41LCB7XHJcbiAgICAgIHRhZzogTWFzc1RhZy5TRUNPTkRBUlksXHJcbiAgICAgIHRhbmRlbTogYmxvY2tzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Jsb2NrQicgKSxcclxuICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYXZhaWxhYmxlTWFzc2VzLnB1c2goIHRoaXMuc2Vjb25kYXJ5TWFzcyApO1xyXG5cclxuICAgIHRoaXMubW9kZVByb3BlcnR5LmxpbmsoIG1vZGUgPT4ge1xyXG4gICAgICB0aGlzLnNlY29uZGFyeU1hc3MuaW50ZXJuYWxWaXNpYmxlUHJvcGVydHkudmFsdWUgPSBtb2RlID09PSBUd29CbG9ja01vZGUuVFdPX0JMT0NLUztcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBMZWZ0IHNjYWxlXHJcbiAgICB0aGlzLmF2YWlsYWJsZU1hc3Nlcy5wdXNoKCBuZXcgU2NhbGUoIHRoaXMuZW5naW5lLCB0aGlzLmdyYXZpdHlQcm9wZXJ0eSwge1xyXG4gICAgICBtYXRyaXg6IE1hdHJpeDMudHJhbnNsYXRpb24oIC0wLjY1LCAtU2NhbGUuU0NBTEVfQkFTRV9CT1VORFMubWluWSApLFxyXG4gICAgICBkaXNwbGF5VHlwZTogRGlzcGxheVR5cGUuTkVXVE9OUyxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGVmdFNjYWxlJyApLFxyXG4gICAgICBjYW5Nb3ZlOiB0cnVlXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICAvLyBQb29sIHNjYWxlXHJcbiAgICBjb25zdCBwb29sU2NhbGUgPSBuZXcgU2NhbGUoIHRoaXMuZW5naW5lLCB0aGlzLmdyYXZpdHlQcm9wZXJ0eSwge1xyXG4gICAgICBtYXRyaXg6IE1hdHJpeDMudHJhbnNsYXRpb24oIDAuMywgLVNjYWxlLlNDQUxFX0JBU0VfQk9VTkRTLm1pblkgKyB0aGlzLnBvb2xCb3VuZHMubWluWSApLFxyXG4gICAgICBkaXNwbGF5VHlwZTogRGlzcGxheVR5cGUuTkVXVE9OUyxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncG9vbFNjYWxlJyApLFxyXG4gICAgICBjYW5Nb3ZlOiB0cnVlXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmF2YWlsYWJsZU1hc3Nlcy5wdXNoKCBwb29sU2NhbGUgKTtcclxuXHJcbiAgICAvLyBBZGp1c3QgcG9vbCB2b2x1bWUgc28gdGhhdCBpdCdzIGF0IHRoZSBkZXNpcmVkIHZhbHVlIFdJVEggdGhlIHBvb2wgc2NhbGUgaW5zaWRlLlxyXG4gICAgdGhpcy5wb29sLmxpcXVpZFZvbHVtZVByb3BlcnR5LnZhbHVlIC09IHBvb2xTY2FsZS52b2x1bWVQcm9wZXJ0eS52YWx1ZTtcclxuICAgIHRoaXMucG9vbC5saXF1aWRWb2x1bWVQcm9wZXJ0eS5zZXRJbml0aWFsVmFsdWUoIHRoaXMucG9vbC5saXF1aWRWb2x1bWVQcm9wZXJ0eS52YWx1ZSApO1xyXG5cclxuICAgIHRoaXMuZGVuc2l0eUV4cGFuZGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoaW5ncyB0byB0aGVpciBvcmlnaW5hbCB2YWx1ZXMuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5tb2RlUHJvcGVydHkucmVzZXQoKTtcclxuXHJcbiAgICB0aGlzLnByaW1hcnlNYXNzLnJlc2V0KCk7XHJcbiAgICB0aGlzLnNlY29uZGFyeU1hc3MucmVzZXQoKTtcclxuXHJcbiAgICB0aGlzLmRlbnNpdHlFeHBhbmRlZFByb3BlcnR5LnJlc2V0KCk7XHJcblxyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmRlbnNpdHlCdW95YW5jeUNvbW1vbi5yZWdpc3RlciggJ0J1b3lhbmN5RXhwbG9yZU1vZGVsJywgQnVveWFuY3lFeHBsb3JlTW9kZWwgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsbUJBQW1CLE1BQU0sNENBQTRDO0FBRTVFLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxJQUFJLE1BQU0sNEJBQTRCO0FBQzdDLE9BQU9DLG9CQUFvQixNQUF1Qyw0Q0FBNEM7QUFDOUcsU0FBU0MsT0FBTyxRQUFRLDRCQUE0QjtBQUNwRCxPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLEtBQUssSUFBSUMsV0FBVyxRQUFRLDZCQUE2QjtBQUNoRSxPQUFPQyxZQUFZLE1BQU0sb0NBQW9DO0FBQzdELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUlsRSxlQUFlLE1BQU1DLG9CQUFvQixTQUFTUCxvQkFBb0IsQ0FBQztFQU85RFEsV0FBV0EsQ0FBRUMsT0FBb0MsRUFBRztJQUV6RCxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQ0MsTUFBTTtJQUU3QixLQUFLLENBQUVELE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNFLFlBQVksR0FBRyxJQUFJZixtQkFBbUIsQ0FBRVMsWUFBWSxDQUFDTyxTQUFTLEVBQUU7TUFDbkVGLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsY0FBZTtJQUM5QyxDQUFFLENBQUM7SUFFSCxNQUFNQyxZQUFZLEdBQUdKLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLFFBQVMsQ0FBQztJQUVwRCxJQUFJ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