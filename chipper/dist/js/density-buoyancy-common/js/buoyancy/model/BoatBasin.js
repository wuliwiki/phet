// Copyright 2020-2022, University of Colorado Boulder

/**
 * Represents basin of the interior of the boat (that a liquid can reside in at a specific level).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import Basin from '../../common/model/Basin.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import BoatDesign from './BoatDesign.js';
export default class BoatBasin extends Basin {
  // Used for intersection

  constructor(boat) {
    super({
      initialVolume: 0,
      initialY: 0,
      // TODO: tandem here
      tandem: Tandem.OPT_OUT
    });
    this.boat = boat;
    this.oneLiterShape = Shape.polygon(BoatDesign.getBasinOneLiterVertices());
  }

  /**
   * Returns whether a given mass is inside this basin (e.g. if filled with liquid, would it be displacing any
   * liquid).
   */
  isMassInside(mass) {
    const slip = 1e-2;
    if (mass === this.boat || mass.stepBottom >= this.stepTop || mass.stepTop <= this.stepBottom - slip) {
      return false;
    }
    const oneLiterBottomPoint = new Vector2(mass.stepX, mass.stepBottom).minus(this.boat.matrix.translation).timesScalar(1 / this.boat.stepMultiplier);

    // Check both a point slightly below AND the actual point.
    const slippedPoint = oneLiterBottomPoint.plusXY(0, slip);
    return (this.oneLiterShape.bounds.containsPoint(oneLiterBottomPoint) || this.oneLiterShape.bounds.containsPoint(slippedPoint)) && (this.oneLiterShape.containsPoint(oneLiterBottomPoint) || this.oneLiterShape.containsPoint(slippedPoint));
  }

  /**
   * Returns the maximum area that could be contained with liquid at a given y value.
   */
  getMaximumArea(y) {
    return this.boat.getBasinArea(y);
  }

  /**
   * Returns the maximum volume that could be contained with liquid up to a given y value.
   */
  getMaximumVolume(y) {
    return this.boat.getBasinVolume(y);
  }
}
densityBuoyancyCommon.register('BoatBasin', BoatBasin);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2hhcGUiLCJUYW5kZW0iLCJCYXNpbiIsImRlbnNpdHlCdW95YW5jeUNvbW1vbiIsIkJvYXREZXNpZ24iLCJCb2F0QmFzaW4iLCJjb25zdHJ1Y3RvciIsImJvYXQiLCJpbml0aWFsVm9sdW1lIiwiaW5pdGlhbFkiLCJ0YW5kZW0iLCJPUFRfT1VUIiwib25lTGl0ZXJTaGFwZSIsInBvbHlnb24iLCJnZXRCYXNpbk9uZUxpdGVyVmVydGljZXMiLCJpc01hc3NJbnNpZGUiLCJtYXNzIiwic2xpcCIsInN0ZXBCb3R0b20iLCJzdGVwVG9wIiwib25lTGl0ZXJCb3R0b21Qb2ludCIsInN0ZXBYIiwibWludXMiLCJtYXRyaXgiLCJ0cmFuc2xhdGlvbiIsInRpbWVzU2NhbGFyIiwic3RlcE11bHRpcGxpZXIiLCJzbGlwcGVkUG9pbnQiLCJwbHVzWFkiLCJib3VuZHMiLCJjb250YWluc1BvaW50IiwiZ2V0TWF4aW11bUFyZWEiLCJ5IiwiZ2V0QmFzaW5BcmVhIiwiZ2V0TWF4aW11bVZvbHVtZSIsImdldEJhc2luVm9sdW1lIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCb2F0QmFzaW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBiYXNpbiBvZiB0aGUgaW50ZXJpb3Igb2YgdGhlIGJvYXQgKHRoYXQgYSBsaXF1aWQgY2FuIHJlc2lkZSBpbiBhdCBhIHNwZWNpZmljIGxldmVsKS5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgQmFzaW4gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0Jhc2luLmpzJztcclxuaW1wb3J0IE1hc3MgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL01hc3MuanMnO1xyXG5pbXBvcnQgZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIGZyb20gJy4uLy4uL2RlbnNpdHlCdW95YW5jeUNvbW1vbi5qcyc7XHJcbmltcG9ydCBCb2F0IGZyb20gJy4vQm9hdC5qcyc7XHJcbmltcG9ydCBCb2F0RGVzaWduIGZyb20gJy4vQm9hdERlc2lnbi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb2F0QmFzaW4gZXh0ZW5kcyBCYXNpbiB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgYm9hdDogQm9hdDtcclxuXHJcbiAgLy8gVXNlZCBmb3IgaW50ZXJzZWN0aW9uXHJcbiAgcHVibGljIHJlYWRvbmx5IG9uZUxpdGVyU2hhcGU6IFNoYXBlO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGJvYXQ6IEJvYXQgKSB7XHJcbiAgICBzdXBlcigge1xyXG4gICAgICBpbml0aWFsVm9sdW1lOiAwLFxyXG4gICAgICBpbml0aWFsWTogMCxcclxuICAgICAgLy8gVE9ETzogdGFuZGVtIGhlcmVcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYm9hdCA9IGJvYXQ7XHJcbiAgICB0aGlzLm9uZUxpdGVyU2hhcGUgPSBTaGFwZS5wb2x5Z29uKCBCb2F0RGVzaWduLmdldEJhc2luT25lTGl0ZXJWZXJ0aWNlcygpICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBnaXZlbiBtYXNzIGlzIGluc2lkZSB0aGlzIGJhc2luIChlLmcuIGlmIGZpbGxlZCB3aXRoIGxpcXVpZCwgd291bGQgaXQgYmUgZGlzcGxhY2luZyBhbnlcclxuICAgKiBsaXF1aWQpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc01hc3NJbnNpZGUoIG1hc3M6IE1hc3MgKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBzbGlwID0gMWUtMjtcclxuICAgIGlmICggbWFzcyA9PT0gdGhpcy5ib2F0IHx8IG1hc3Muc3RlcEJvdHRvbSA+PSB0aGlzLnN0ZXBUb3AgfHwgbWFzcy5zdGVwVG9wIDw9IHRoaXMuc3RlcEJvdHRvbSAtIHNsaXAgKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IG9uZUxpdGVyQm90dG9tUG9pbnQgPSBuZXcgVmVjdG9yMiggbWFzcy5zdGVwWCwgbWFzcy5zdGVwQm90dG9tICkubWludXMoIHRoaXMuYm9hdC5tYXRyaXgudHJhbnNsYXRpb24gKS50aW1lc1NjYWxhciggMSAvIHRoaXMuYm9hdC5zdGVwTXVsdGlwbGllciApO1xyXG5cclxuICAgIC8vIENoZWNrIGJvdGggYSBwb2ludCBzbGlnaHRseSBiZWxvdyBBTkQgdGhlIGFjdHVhbCBwb2ludC5cclxuICAgIGNvbnN0IHNsaXBwZWRQb2ludCA9IG9uZUxpdGVyQm90dG9tUG9pbnQucGx1c1hZKCAwLCBzbGlwICk7XHJcbiAgICByZXR1cm4gKCB0aGlzLm9uZUxpdGVyU2hhcGUuYm91bmRzLmNvbnRhaW5zUG9pbnQoIG9uZUxpdGVyQm90dG9tUG9pbnQgKSB8fCB0aGlzLm9uZUxpdGVyU2hhcGUuYm91bmRzLmNvbnRhaW5zUG9pbnQoIHNsaXBwZWRQb2ludCApICkgJiZcclxuICAgICAgICAgICAoIHRoaXMub25lTGl0ZXJTaGFwZS5jb250YWluc1BvaW50KCBvbmVMaXRlckJvdHRvbVBvaW50ICkgfHwgdGhpcy5vbmVMaXRlclNoYXBlLmNvbnRhaW5zUG9pbnQoIHNsaXBwZWRQb2ludCApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCBjb3VsZCBiZSBjb250YWluZWQgd2l0aCBsaXF1aWQgYXQgYSBnaXZlbiB5IHZhbHVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXhpbXVtQXJlYSggeTogbnVtYmVyICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5ib2F0LmdldEJhc2luQXJlYSggeSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgbWF4aW11bSB2b2x1bWUgdGhhdCBjb3VsZCBiZSBjb250YWluZWQgd2l0aCBsaXF1aWQgdXAgdG8gYSBnaXZlbiB5IHZhbHVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXhpbXVtVm9sdW1lKCB5OiBudW1iZXIgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmJvYXQuZ2V0QmFzaW5Wb2x1bWUoIHkgKTtcclxuICB9XHJcbn1cclxuXHJcbmRlbnNpdHlCdW95YW5jeUNvbW1vbi5yZWdpc3RlciggJ0JvYXRCYXNpbicsIEJvYXRCYXNpbiApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUUvQyxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFFbEUsT0FBT0MsVUFBVSxNQUFNLGlCQUFpQjtBQUV4QyxlQUFlLE1BQU1DLFNBQVMsU0FBU0gsS0FBSyxDQUFDO0VBSTNDOztFQUdPSSxXQUFXQSxDQUFFQyxJQUFVLEVBQUc7SUFDL0IsS0FBSyxDQUFFO01BQ0xDLGFBQWEsRUFBRSxDQUFDO01BQ2hCQyxRQUFRLEVBQUUsQ0FBQztNQUNYO01BQ0FDLE1BQU0sRUFBRVQsTUFBTSxDQUFDVTtJQUNqQixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNKLElBQUksR0FBR0EsSUFBSTtJQUNoQixJQUFJLENBQUNLLGFBQWEsR0FBR1osS0FBSyxDQUFDYSxPQUFPLENBQUVULFVBQVUsQ0FBQ1Usd0JBQXdCLENBQUMsQ0FBRSxDQUFDO0VBQzdFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NDLFlBQVlBLENBQUVDLElBQVUsRUFBWTtJQUN6QyxNQUFNQyxJQUFJLEdBQUcsSUFBSTtJQUNqQixJQUFLRCxJQUFJLEtBQUssSUFBSSxDQUFDVCxJQUFJLElBQUlTLElBQUksQ0FBQ0UsVUFBVSxJQUFJLElBQUksQ0FBQ0MsT0FBTyxJQUFJSCxJQUFJLENBQUNHLE9BQU8sSUFBSSxJQUFJLENBQUNELFVBQVUsR0FBR0QsSUFBSSxFQUFHO01BQ3JHLE9BQU8sS0FBSztJQUNkO0lBQ0EsTUFBTUcsbUJBQW1CLEdBQUcsSUFBSXJCLE9BQU8sQ0FBRWlCLElBQUksQ0FBQ0ssS0FBSyxFQUFFTCxJQUFJLENBQUNFLFVBQVcsQ0FBQyxDQUFDSSxLQUFLLENBQUUsSUFBSSxDQUFDZixJQUFJLENBQUNnQixNQUFNLENBQUNDLFdBQVksQ0FBQyxDQUFDQyxXQUFXLENBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQ2xCLElBQUksQ0FBQ21CLGNBQWUsQ0FBQzs7SUFFeEo7SUFDQSxNQUFNQyxZQUFZLEdBQUdQLG1CQUFtQixDQUFDUSxNQUFNLENBQUUsQ0FBQyxFQUFFWCxJQUFLLENBQUM7SUFDMUQsT0FBTyxDQUFFLElBQUksQ0FBQ0wsYUFBYSxDQUFDaUIsTUFBTSxDQUFDQyxhQUFhLENBQUVWLG1CQUFvQixDQUFDLElBQUksSUFBSSxDQUFDUixhQUFhLENBQUNpQixNQUFNLENBQUNDLGFBQWEsQ0FBRUgsWUFBYSxDQUFDLE1BQ3pILElBQUksQ0FBQ2YsYUFBYSxDQUFDa0IsYUFBYSxDQUFFVixtQkFBb0IsQ0FBQyxJQUFJLElBQUksQ0FBQ1IsYUFBYSxDQUFDa0IsYUFBYSxDQUFFSCxZQUFhLENBQUMsQ0FBRTtFQUN4SDs7RUFFQTtBQUNGO0FBQ0E7RUFDU0ksY0FBY0EsQ0FBRUMsQ0FBUyxFQUFXO0lBQ3pDLE9BQU8sSUFBSSxDQUFDekIsSUFBSSxDQUFDMEIsWUFBWSxDQUFFRCxDQUFFLENBQUM7RUFDcEM7O0VBRUE7QUFDRjtBQUNBO0VBQ1NFLGdCQUFnQkEsQ0FBRUYsQ0FBUyxFQUFXO0lBQzNDLE9BQU8sSUFBSSxDQUFDekIsSUFBSSxDQUFDNEIsY0FBYyxDQUFFSCxDQUFFLENBQUM7RUFDdEM7QUFDRjtBQUVBN0IscUJBQXFCLENBQUNpQyxRQUFRLENBQUUsV0FBVyxFQUFFL0IsU0FBVSxDQUFDIn0=