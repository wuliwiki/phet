// Copyright 2019-2022, University of Colorado Boulder

/**
 * The main view for the Intro screen of the Buoyancy simulation.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector3 from '../../../../dot/js/Vector3.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { AlignBox, HBox, Node, Text } from '../../../../scenery/js/imports.js';
import AquaRadioButton from '../../../../sun/js/AquaRadioButton.js';
import Panel from '../../../../sun/js/Panel.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import DensityBuoyancyCommonConstants from '../../common/DensityBuoyancyCommonConstants.js';
import Material from '../../common/model/Material.js';
import DensityBuoyancyScreenView from '../../common/view/DensityBuoyancyScreenView.js';
import DisplayOptionsNode from '../../common/view/DisplayOptionsNode.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';
import { BlockSet } from '../model/BuoyancyIntroModel.js';

// constants
const blockSetStringMap = {
  [BlockSet.SAME_MASS.name]: DensityBuoyancyCommonStrings.blockSet.sameMassStringProperty,
  [BlockSet.SAME_VOLUME.name]: DensityBuoyancyCommonStrings.blockSet.sameVolumeStringProperty,
  [BlockSet.SAME_DENSITY.name]: DensityBuoyancyCommonStrings.blockSet.sameDensityStringProperty
};
const blockSetTandemNameMap = {
  [BlockSet.SAME_MASS.name]: 'sameMassLabel',
  [BlockSet.SAME_VOLUME.name]: 'sameVolumeLabel',
  [BlockSet.SAME_DENSITY.name]: 'sameDensityLabel'
};
const MARGIN = DensityBuoyancyCommonConstants.MARGIN;
export default class BuoyancyIntroScreenView extends DensityBuoyancyScreenView {
  constructor(model, options) {
    super(model, combineOptions({
      // Custom just for this screen
      cameraLookAt: new Vector3(0, -0.1, 0)
    }, options));
    const blocksRadioButtonGroupTandem = options.tandem.createTandem('blocksRadioButtonGroup');
    const blocksRadioButtonGroup = new VerticalAquaRadioButtonGroup(model.blockSetProperty, BlockSet.enumeration.values.map(blockSet => {
      return {
        createNode: tandem => new Text(blockSetStringMap[blockSet.name], {
          font: DensityBuoyancyCommonConstants.RADIO_BUTTON_FONT,
          maxWidth: 160,
          tandem: tandem.createTandem('labelText')
        }),
        value: blockSet,
        tandemName: `${blockSetTandemNameMap[blockSet.name]}RadioButton`
      };
    }), {
      align: 'left',
      tandem: blocksRadioButtonGroupTandem
    });
    const blockSetPanel = new Panel(blocksRadioButtonGroup, DensityBuoyancyCommonConstants.PANEL_OPTIONS);
    this.addChild(new AlignBox(blockSetPanel, {
      alignBoundsProperty: this.visibleBoundsProperty,
      xAlign: 'right',
      yAlign: 'top',
      margin: MARGIN
    }));
    const displayOptionsPanel = new Panel(new DisplayOptionsNode(model), DensityBuoyancyCommonConstants.PANEL_OPTIONS);
    this.addChild(new AlignBox(displayOptionsPanel, {
      alignBoundsProperty: this.visibleBoundsProperty,
      xAlign: 'left',
      yAlign: 'bottom',
      margin: MARGIN
    }));
    const radioButtonLabelOptions = {
      font: new PhetFont(14),
      maxWidth: 120
    };
    const fluidBox = new HBox({
      spacing: 20,
      children: [new AquaRadioButton(model.liquidMaterialProperty, Material.GASOLINE, new Text(Material.GASOLINE.nameProperty, radioButtonLabelOptions)), new AquaRadioButton(model.liquidMaterialProperty, Material.WATER, new Text(Material.WATER.nameProperty, radioButtonLabelOptions)), new AquaRadioButton(model.liquidMaterialProperty, Material.SEAWATER, new Text(Material.SEAWATER.nameProperty, radioButtonLabelOptions)), new AquaRadioButton(model.liquidMaterialProperty, Material.HONEY, new Text(Material.HONEY.nameProperty, radioButtonLabelOptions))]
    });
    const fluidTitle = new Text(DensityBuoyancyCommonStrings.fluid, {
      font: DensityBuoyancyCommonConstants.TITLE_FONT,
      right: fluidBox.left,
      bottom: fluidBox.top - 3,
      maxWidth: 160
    });
    const fluidPanel = new Panel(new Node({
      children: [fluidTitle, fluidBox]
    }), DensityBuoyancyCommonConstants.PANEL_OPTIONS);
    this.addChild(new AlignBox(fluidPanel, {
      alignBoundsProperty: this.visibleBoundsProperty,
      xAlign: 'center',
      yAlign: 'bottom',
      margin: MARGIN
    }));
    this.addChild(this.popupLayer);
  }
}
densityBuoyancyCommon.register('BuoyancyIntroScreenView', BuoyancyIntroScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IzIiwiY29tYmluZU9wdGlvbnMiLCJQaGV0Rm9udCIsIkFsaWduQm94IiwiSEJveCIsIk5vZGUiLCJUZXh0IiwiQXF1YVJhZGlvQnV0dG9uIiwiUGFuZWwiLCJWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIiwiRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzIiwiTWF0ZXJpYWwiLCJEZW5zaXR5QnVveWFuY3lTY3JlZW5WaWV3IiwiRGlzcGxheU9wdGlvbnNOb2RlIiwiZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIiwiRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncyIsIkJsb2NrU2V0IiwiYmxvY2tTZXRTdHJpbmdNYXAiLCJTQU1FX01BU1MiLCJuYW1lIiwiYmxvY2tTZXQiLCJzYW1lTWFzc1N0cmluZ1Byb3BlcnR5IiwiU0FNRV9WT0xVTUUiLCJzYW1lVm9sdW1lU3RyaW5nUHJvcGVydHkiLCJTQU1FX0RFTlNJVFkiLCJzYW1lRGVuc2l0eVN0cmluZ1Byb3BlcnR5IiwiYmxvY2tTZXRUYW5kZW1OYW1lTWFwIiwiTUFSR0lOIiwiQnVveWFuY3lJbnRyb1NjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwib3B0aW9ucyIsImNhbWVyYUxvb2tBdCIsImJsb2Nrc1JhZGlvQnV0dG9uR3JvdXBUYW5kZW0iLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJibG9ja3NSYWRpb0J1dHRvbkdyb3VwIiwiYmxvY2tTZXRQcm9wZXJ0eSIsImVudW1lcmF0aW9uIiwidmFsdWVzIiwibWFwIiwiY3JlYXRlTm9kZSIsImZvbnQiLCJSQURJT19CVVRUT05fRk9OVCIsIm1heFdpZHRoIiwidmFsdWUiLCJ0YW5kZW1OYW1lIiwiYWxpZ24iLCJibG9ja1NldFBhbmVsIiwiUEFORUxfT1BUSU9OUyIsImFkZENoaWxkIiwiYWxpZ25Cb3VuZHNQcm9wZXJ0eSIsInZpc2libGVCb3VuZHNQcm9wZXJ0eSIsInhBbGlnbiIsInlBbGlnbiIsIm1hcmdpbiIsImRpc3BsYXlPcHRpb25zUGFuZWwiLCJyYWRpb0J1dHRvbkxhYmVsT3B0aW9ucyIsImZsdWlkQm94Iiwic3BhY2luZyIsImNoaWxkcmVuIiwibGlxdWlkTWF0ZXJpYWxQcm9wZXJ0eSIsIkdBU09MSU5FIiwibmFtZVByb3BlcnR5IiwiV0FURVIiLCJTRUFXQVRFUiIsIkhPTkVZIiwiZmx1aWRUaXRsZSIsImZsdWlkIiwiVElUTEVfRk9OVCIsInJpZ2h0IiwibGVmdCIsImJvdHRvbSIsInRvcCIsImZsdWlkUGFuZWwiLCJwb3B1cExheWVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCdW95YW5jeUludHJvU2NyZWVuVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgbWFpbiB2aWV3IGZvciB0aGUgSW50cm8gc2NyZWVuIG9mIHRoZSBCdW95YW5jeSBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgQWxpZ25Cb3gsIEhCb3gsIE5vZGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQXF1YVJhZGlvQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9BcXVhUmFkaW9CdXR0b24uanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IFZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1ZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9EZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgTWF0ZXJpYWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL01hdGVyaWFsLmpzJztcclxuaW1wb3J0IERlbnNpdHlCdW95YW5jeVNjcmVlblZpZXcsIHsgRGVuc2l0eUJ1b3lhbmN5U2NyZWVuVmlld09wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9EZW5zaXR5QnVveWFuY3lTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IERpc3BsYXlPcHRpb25zTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9EaXNwbGF5T3B0aW9uc05vZGUuanMnO1xyXG5pbXBvcnQgZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIGZyb20gJy4uLy4uL2RlbnNpdHlCdW95YW5jeUNvbW1vbi5qcyc7XHJcbmltcG9ydCBEZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzIGZyb20gJy4uLy4uL0RlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQnVveWFuY3lJbnRyb01vZGVsLCB7IEJsb2NrU2V0IH0gZnJvbSAnLi4vbW9kZWwvQnVveWFuY3lJbnRyb01vZGVsLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBibG9ja1NldFN0cmluZ01hcCA9IHtcclxuICBbIEJsb2NrU2V0LlNBTUVfTUFTUy5uYW1lIF06IERlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MuYmxvY2tTZXQuc2FtZU1hc3NTdHJpbmdQcm9wZXJ0eSxcclxuICBbIEJsb2NrU2V0LlNBTUVfVk9MVU1FLm5hbWUgXTogRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncy5ibG9ja1NldC5zYW1lVm9sdW1lU3RyaW5nUHJvcGVydHksXHJcbiAgWyBCbG9ja1NldC5TQU1FX0RFTlNJVFkubmFtZSBdOiBEZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzLmJsb2NrU2V0LnNhbWVEZW5zaXR5U3RyaW5nUHJvcGVydHlcclxufTtcclxuY29uc3QgYmxvY2tTZXRUYW5kZW1OYW1lTWFwID0ge1xyXG4gIFsgQmxvY2tTZXQuU0FNRV9NQVNTLm5hbWUgXTogJ3NhbWVNYXNzTGFiZWwnLFxyXG4gIFsgQmxvY2tTZXQuU0FNRV9WT0xVTUUubmFtZSBdOiAnc2FtZVZvbHVtZUxhYmVsJyxcclxuICBbIEJsb2NrU2V0LlNBTUVfREVOU0lUWS5uYW1lIF06ICdzYW1lRGVuc2l0eUxhYmVsJ1xyXG59O1xyXG5jb25zdCBNQVJHSU4gPSBEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuTUFSR0lOO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVveWFuY3lJbnRyb1NjcmVlblZpZXcgZXh0ZW5kcyBEZW5zaXR5QnVveWFuY3lTY3JlZW5WaWV3PEJ1b3lhbmN5SW50cm9Nb2RlbD4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBCdW95YW5jeUludHJvTW9kZWwsIG9wdGlvbnM6IERlbnNpdHlCdW95YW5jeVNjcmVlblZpZXdPcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgY29tYmluZU9wdGlvbnM8RGVuc2l0eUJ1b3lhbmN5U2NyZWVuVmlld09wdGlvbnM+KCB7XHJcbiAgICAgIC8vIEN1c3RvbSBqdXN0IGZvciB0aGlzIHNjcmVlblxyXG4gICAgICBjYW1lcmFMb29rQXQ6IG5ldyBWZWN0b3IzKCAwLCAtMC4xLCAwIClcclxuICAgIH0sIG9wdGlvbnMgKSApO1xyXG5cclxuICAgIGNvbnN0IGJsb2Nrc1JhZGlvQnV0dG9uR3JvdXBUYW5kZW0gPSBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdibG9ja3NSYWRpb0J1dHRvbkdyb3VwJyApO1xyXG5cclxuICAgIGNvbnN0IGJsb2Nrc1JhZGlvQnV0dG9uR3JvdXAgPSBuZXcgVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cCggbW9kZWwuYmxvY2tTZXRQcm9wZXJ0eSwgQmxvY2tTZXQuZW51bWVyYXRpb24udmFsdWVzLm1hcCggYmxvY2tTZXQgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGNyZWF0ZU5vZGU6IHRhbmRlbSA9PiBuZXcgVGV4dCggYmxvY2tTZXRTdHJpbmdNYXBbIGJsb2NrU2V0Lm5hbWUgXSwge1xyXG4gICAgICAgICAgZm9udDogRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzLlJBRElPX0JVVFRPTl9GT05ULFxyXG4gICAgICAgICAgbWF4V2lkdGg6IDE2MCxcclxuICAgICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsVGV4dCcgKVxyXG4gICAgICAgIH0gKSxcclxuICAgICAgICB2YWx1ZTogYmxvY2tTZXQsXHJcbiAgICAgICAgdGFuZGVtTmFtZTogYCR7YmxvY2tTZXRUYW5kZW1OYW1lTWFwWyBibG9ja1NldC5uYW1lIF19UmFkaW9CdXR0b25gXHJcbiAgICAgIH07XHJcbiAgICB9ICksIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgdGFuZGVtOiBibG9ja3NSYWRpb0J1dHRvbkdyb3VwVGFuZGVtXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBibG9ja1NldFBhbmVsID0gbmV3IFBhbmVsKCBibG9ja3NSYWRpb0J1dHRvbkdyb3VwLCBEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuUEFORUxfT1BUSU9OUyApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBBbGlnbkJveCggYmxvY2tTZXRQYW5lbCwge1xyXG4gICAgICBhbGlnbkJvdW5kc1Byb3BlcnR5OiB0aGlzLnZpc2libGVCb3VuZHNQcm9wZXJ0eSxcclxuICAgICAgeEFsaWduOiAncmlnaHQnLFxyXG4gICAgICB5QWxpZ246ICd0b3AnLFxyXG4gICAgICBtYXJnaW46IE1BUkdJTlxyXG4gICAgfSApICk7XHJcblxyXG4gICAgY29uc3QgZGlzcGxheU9wdGlvbnNQYW5lbCA9IG5ldyBQYW5lbCggbmV3IERpc3BsYXlPcHRpb25zTm9kZSggbW9kZWwgKSwgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzLlBBTkVMX09QVElPTlMgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBBbGlnbkJveCggZGlzcGxheU9wdGlvbnNQYW5lbCwge1xyXG4gICAgICBhbGlnbkJvdW5kc1Byb3BlcnR5OiB0aGlzLnZpc2libGVCb3VuZHNQcm9wZXJ0eSxcclxuICAgICAgeEFsaWduOiAnbGVmdCcsXHJcbiAgICAgIHlBbGlnbjogJ2JvdHRvbScsXHJcbiAgICAgIG1hcmdpbjogTUFSR0lOXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICBjb25zdCByYWRpb0J1dHRvbkxhYmVsT3B0aW9ucyA9IHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNCApLFxyXG4gICAgICBtYXhXaWR0aDogMTIwXHJcbiAgICB9O1xyXG4gICAgY29uc3QgZmx1aWRCb3ggPSBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiAyMCxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgQXF1YVJhZGlvQnV0dG9uKCBtb2RlbC5saXF1aWRNYXRlcmlhbFByb3BlcnR5LCBNYXRlcmlhbC5HQVNPTElORSwgbmV3IFRleHQoIE1hdGVyaWFsLkdBU09MSU5FLm5hbWVQcm9wZXJ0eSwgcmFkaW9CdXR0b25MYWJlbE9wdGlvbnMgKSApLFxyXG4gICAgICAgIG5ldyBBcXVhUmFkaW9CdXR0b24oIG1vZGVsLmxpcXVpZE1hdGVyaWFsUHJvcGVydHksIE1hdGVyaWFsLldBVEVSLCBuZXcgVGV4dCggTWF0ZXJpYWwuV0FURVIubmFtZVByb3BlcnR5LCByYWRpb0J1dHRvbkxhYmVsT3B0aW9ucyApICksXHJcbiAgICAgICAgbmV3IEFxdWFSYWRpb0J1dHRvbiggbW9kZWwubGlxdWlkTWF0ZXJpYWxQcm9wZXJ0eSwgTWF0ZXJpYWwuU0VBV0FURVIsIG5ldyBUZXh0KCBNYXRlcmlhbC5TRUFXQVRFUi5uYW1lUHJvcGVydHksIHJhZGlvQnV0dG9uTGFiZWxPcHRpb25zICkgKSxcclxuICAgICAgICBuZXcgQXF1YVJhZGlvQnV0dG9uKCBtb2RlbC5saXF1aWRNYXRlcmlhbFByb3BlcnR5LCBNYXRlcmlhbC5IT05FWSwgbmV3IFRleHQoIE1hdGVyaWFsLkhPTkVZLm5hbWVQcm9wZXJ0eSwgcmFkaW9CdXR0b25MYWJlbE9wdGlvbnMgKSApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGZsdWlkVGl0bGUgPSBuZXcgVGV4dCggRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncy5mbHVpZCwge1xyXG4gICAgICBmb250OiBEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuVElUTEVfRk9OVCxcclxuICAgICAgcmlnaHQ6IGZsdWlkQm94LmxlZnQsXHJcbiAgICAgIGJvdHRvbTogZmx1aWRCb3gudG9wIC0gMyxcclxuICAgICAgbWF4V2lkdGg6IDE2MFxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgZmx1aWRQYW5lbCA9IG5ldyBQYW5lbCggbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgZmx1aWRUaXRsZSwgZmx1aWRCb3ggXVxyXG4gICAgfSApLCBEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuUEFORUxfT1BUSU9OUyApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBBbGlnbkJveCggZmx1aWRQYW5lbCwge1xyXG4gICAgICBhbGlnbkJvdW5kc1Byb3BlcnR5OiB0aGlzLnZpc2libGVCb3VuZHNQcm9wZXJ0eSxcclxuICAgICAgeEFsaWduOiAnY2VudGVyJyxcclxuICAgICAgeUFsaWduOiAnYm90dG9tJyxcclxuICAgICAgbWFyZ2luOiBNQVJHSU5cclxuICAgIH0gKSApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMucG9wdXBMYXllciApO1xyXG4gIH1cclxufVxyXG5cclxuZGVuc2l0eUJ1b3lhbmN5Q29tbW9uLnJlZ2lzdGVyKCAnQnVveWFuY3lJbnRyb1NjcmVlblZpZXcnLCBCdW95YW5jeUludHJvU2NyZWVuVmlldyApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxTQUFTQyxjQUFjLFFBQVEsdUNBQXVDO0FBQ3RFLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RSxPQUFPQyxlQUFlLE1BQU0sdUNBQXVDO0FBQ25FLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsNEJBQTRCLE1BQU0sb0RBQW9EO0FBQzdGLE9BQU9DLDhCQUE4QixNQUFNLGdEQUFnRDtBQUMzRixPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLHlCQUF5QixNQUE0QyxnREFBZ0Q7QUFDNUgsT0FBT0Msa0JBQWtCLE1BQU0seUNBQXlDO0FBQ3hFLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyw0QkFBNEIsTUFBTSx1Q0FBdUM7QUFDaEYsU0FBNkJDLFFBQVEsUUFBUSxnQ0FBZ0M7O0FBRTdFO0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUc7RUFDeEIsQ0FBRUQsUUFBUSxDQUFDRSxTQUFTLENBQUNDLElBQUksR0FBSUosNEJBQTRCLENBQUNLLFFBQVEsQ0FBQ0Msc0JBQXNCO0VBQ3pGLENBQUVMLFFBQVEsQ0FBQ00sV0FBVyxDQUFDSCxJQUFJLEdBQUlKLDRCQUE0QixDQUFDSyxRQUFRLENBQUNHLHdCQUF3QjtFQUM3RixDQUFFUCxRQUFRLENBQUNRLFlBQVksQ0FBQ0wsSUFB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