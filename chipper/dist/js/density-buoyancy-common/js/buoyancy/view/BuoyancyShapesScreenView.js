// Copyright 2019-2022, University of Colorado Boulder

/**
 * The main view for the Shapes screen of the Buoyancy simulation.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import DynamicProperty from '../../../../axon/js/DynamicProperty.js';
import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { AlignBox, HStrut, Text, VBox } from '../../../../scenery/js/imports.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import Panel from '../../../../sun/js/Panel.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import DensityBuoyancyCommonConstants from '../../common/DensityBuoyancyCommonConstants.js';
import Material from '../../common/model/Material.js';
import DensityControlNode from '../../common/view/DensityControlNode.js';
import DisplayOptionsNode from '../../common/view/DisplayOptionsNode.js';
import PrimarySecondaryPanelsNode from '../../common/view/PrimarySecondaryPanelsNode.js';
import SecondaryMassScreenView from '../../common/view/SecondaryMassScreenView.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';
import DensityReadoutListNode from './DensityReadoutListNode.js';
import ShapeSizeControlNode from './ShapeSizeControlNode.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';

// constants
const MARGIN = DensityBuoyancyCommonConstants.MARGIN;
export default class BuoyancyShapesScreenView extends SecondaryMassScreenView {
  constructor(model, options) {
    const tandem = options.tandem;
    super(model, combineOptions({
      cameraLookAt: DensityBuoyancyCommonConstants.BUOYANCY_CAMERA_LOOK_AT
    }, options));
    const densityControlPanel = new Panel(new DensityControlNode(model.liquidMaterialProperty, [Material.GASOLINE, Material.OIL, Material.WATER, Material.SEAWATER, Material.HONEY, Material.MERCURY, Material.DENSITY_C, Material.DENSITY_D], this.popupLayer, tandem.createTandem('densityControlNode')), DensityBuoyancyCommonConstants.PANEL_OPTIONS);
    this.addChild(new AlignBox(densityControlPanel, {
      alignBoundsProperty: this.visibleBoundsProperty,
      xAlign: 'center',
      yAlign: 'bottom',
      margin: MARGIN
    }));
    const displayOptionsNode = new DisplayOptionsNode(model);
    const densityContainer = new VBox({
      spacing: 0,
      children: [new HStrut(displayOptionsNode.width - 10),
      // Same internal size as displayOptionsNode
      new DensityReadoutListNode([new Property(Material.WOOD, {
        tandem: Tandem.OPT_OUT
      })])]
    });
    const densityBox = new AccordionBox(densityContainer, combineOptions({
      titleNode: new Text(DensityBuoyancyCommonStrings.densityStringProperty, {
        font: DensityBuoyancyCommonConstants.TITLE_FONT,
        maxWidth: 160
      }),
      expandedProperty: model.densityExpandedProperty
    }, DensityBuoyancyCommonConstants.ACCORDION_BOX_OPTIONS));
    this.addChild(new AlignBox(new VBox({
      spacing: 10,
      children: [densityBox, new Panel(displayOptionsNode, DensityBuoyancyCommonConstants.PANEL_OPTIONS)]
    }), {
      alignBoundsProperty: this.visibleBoundsProperty,
      xAlign: 'left',
      yAlign: 'bottom',
      margin: MARGIN
    }));
    this.rightBox = new PrimarySecondaryPanelsNode(new ShapeSizeControlNode(model.primaryShapeProperty, model.primaryWidthRatioProperty, model.primaryHeightRatioProperty, new DynamicProperty(model.primaryMassProperty, {
      derive: 'volumeProperty'
    }), this.popupLayer, {
      labelNode: PrimarySecondaryPanelsNode.getPrimaryLabelNode()
    }), new ShapeSizeControlNode(model.secondaryShapeProperty, model.secondaryWidthRatioProperty, model.secondaryHeightRatioProperty, new DynamicProperty(model.secondaryMassProperty, {
      derive: 'volumeProperty'
    }), this.popupLayer, {
      labelNode: PrimarySecondaryPanelsNode.getSecondaryLabelNode(),
      visibleProperty: new DynamicProperty(model.secondaryMassProperty, {
        derive: 'internalVisibleProperty'
      })
    }));
    this.addChild(new AlignBox(this.rightBox, {
      alignBoundsProperty: this.visibleBoundsProperty,
      xAlign: 'right',
      yAlign: 'top',
      margin: MARGIN
    }));

    // DerivedProperty doesn't need disposal, since everything here lives for the lifetime of the simulation
    this.rightBarrierViewPointProperty.value = new DerivedProperty([this.rightBox.boundsProperty, this.visibleBoundsProperty], (boxBounds, visibleBounds) => {
      // We might not have a box, see https://github.com/phetsims/density/issues/110
      return new Vector2(isFinite(boxBounds.left) ? boxBounds.left : visibleBounds.right, visibleBounds.centerY);
    });
    this.addSecondMassControl(model.modeProperty);
    this.addChild(this.popupLayer);
  }
}
densityBuoyancyCommon.register('BuoyancyShapesScreenView', BuoyancyShapesScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,