// Copyright 2019-2023, University of Colorado Boulder

/**
 * A table of common densities shown for reference.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Utils from '../../../../dot/js/Utils.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
import Orientation from '../../../../phet-core/js/Orientation.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { GridBackgroundNode, GridBox, Node, Rectangle, Text, RichText } from '../../../../scenery/js/imports.js';
import DensityBuoyancyCommonConstants from '../../common/DensityBuoyancyCommonConstants.js';
import DensityBuoyancyCommonPreferences from '../../common/model/DensityBuoyancyCommonPreferences.js';
import DensityBuoyancyCommonColors from '../../common/view/DensityBuoyancyCommonColors.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';

// constants
const headerFont = new PhetFont({
  size: 12,
  weight: 'bold'
});
const bodyFont = new PhetFont({
  size: 12
});
const materials = _.sortBy(DensityBuoyancyCommonConstants.DENSITY_MYSTERY_MATERIALS, material => material.density);
export default class DensityTableNode extends Node {
  constructor() {
    super();
    const layoutOptions = {
      xMargin: 5,
      yMargin: 2
    };
    const gridBox = new GridBox({
      children: [new Text(DensityBuoyancyCommonStrings.material.nameStringProperty, {
        font: headerFont,
        maxWidth: 160,
        layoutOptions: combineOptions({
          column: 0,
          row: 0,
          xAlign: 'left'
        }, layoutOptions)
      }), new RichText(new DerivedProperty([DensityBuoyancyCommonPreferences.volumeUnitsProperty, DensityBuoyancyCommonStrings.densityKgLStringProperty, DensityBuoyancyCommonStrings.densityKgdm3StringProperty], (units, litersString, decimetersCubedString) => {
        return units === 'liters' ? litersString : decimetersCubedString;
      }), {
        font: headerFont,
        maxWidth: 160,
        layoutOptions: combineOptions({
          column: 1,
          row: 0,
          xAlign: 'right'
        }, layoutOptions)
      }), ...materials.map((material, index) => new Text(material.nameProperty, {
        font: bodyFont,
        maxWidth: 200,
        layoutOptions: combineOptions({
          column: 0,
          row: index + 1,
          xAlign: 'left'
        }, layoutOptions)
      })), ...materials.map((material, index) => new Text(Utils.toFixed(material.density / 1000, 2), {
        font: bodyFont,
        maxWidth: 150,
        layoutOptions: combineOptions({
          column: 1,
          row: index + 1,
          xAlign: 'right'
        }, layoutOptions)
      }))]
    });
    const gridBackground = new GridBackgroundNode(gridBox.constraint, {
      createCellBackground: cell => {
        return Rectangle.bounds(cell.lastAvailableBounds, {
          fill: cell.position.get(Orientation.VERTICAL) === 0 ? DensityBuoyancyCommonColors.chartHeaderColorProperty : 'white',
          stroke: 'black'
        });
      }
    });
    this.children = [gridBackground, gridBox];
  }
}
densityBuoyancyCommon.register('DensityTableNode', DensityTableNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJVdGlscyIsImNvbWJpbmVPcHRpb25zIiwiT3JpZW50YXRpb24iLCJQaGV0Rm9udCIsIkdyaWRCYWNrZ3JvdW5kTm9kZSIsIkdyaWRCb3giLCJOb2RlIiwiUmVjdGFuZ2xlIiwiVGV4dCIsIlJpY2hUZXh0IiwiRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzIiwiRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUHJlZmVyZW5jZXMiLCJEZW5zaXR5QnVveWFuY3lDb21tb25Db2xvcnMiLCJkZW5zaXR5QnVveWFuY3lDb21tb24iLCJEZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzIiwiaGVhZGVyRm9udCIsInNpemUiLCJ3ZWlnaHQiLCJib2R5Rm9udCIsIm1hdGVyaWFscyIsIl8iLCJzb3J0QnkiLCJERU5TSVRZX01ZU1RFUllfTUFURVJJQUxTIiwibWF0ZXJpYWwiLCJkZW5zaXR5IiwiRGVuc2l0eVRhYmxlTm9kZSIsImNvbnN0cnVjdG9yIiwibGF5b3V0T3B0aW9ucyIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiZ3JpZEJveCIsImNoaWxkcmVuIiwibmFtZVN0cmluZ1Byb3BlcnR5IiwiZm9udCIsIm1heFdpZHRoIiwiY29sdW1uIiwicm93IiwieEFsaWduIiwidm9sdW1lVW5pdHNQcm9wZXJ0eSIsImRlbnNpdHlLZ0xTdHJpbmdQcm9wZXJ0eSIsImRlbnNpdHlLZ2RtM1N0cmluZ1Byb3BlcnR5IiwidW5pdHMiLCJsaXRlcnNTdHJpbmciLCJkZWNpbWV0ZXJzQ3ViZWRTdHJpbmciLCJtYXAiLCJpbmRleCIsIm5hbWVQcm9wZXJ0eSIsInRvRml4ZWQiLCJncmlkQmFja2dyb3VuZCIsImNvbnN0cmFpbnQiLCJjcmVhdGVDZWxsQmFja2dyb3VuZCIsImNlbGwiLCJib3VuZHMiLCJsYXN0QXZhaWxhYmxlQm91bmRzIiwiZmlsbCIsInBvc2l0aW9uIiwiZ2V0IiwiVkVSVElDQUwiLCJjaGFydEhlYWRlckNvbG9yUHJvcGVydHkiLCJzdHJva2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRlbnNpdHlUYWJsZU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSB0YWJsZSBvZiBjb21tb24gZGVuc2l0aWVzIHNob3duIGZvciByZWZlcmVuY2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBPcmllbnRhdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvT3JpZW50YXRpb24uanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgR3JpZEJhY2tncm91bmROb2RlLCBHcmlkQm94LCBUTGF5b3V0T3B0aW9ucywgTm9kZSwgUmVjdGFuZ2xlLCBUZXh0LCBSaWNoVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0RlbnNpdHlCdW95YW5jeUNvbW1vbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBEZW5zaXR5QnVveWFuY3lDb21tb25QcmVmZXJlbmNlcyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUHJlZmVyZW5jZXMuanMnO1xyXG5pbXBvcnQgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0RlbnNpdHlCdW95YW5jeUNvbW1vbkNvbG9ycy5qcyc7XHJcbmltcG9ydCBkZW5zaXR5QnVveWFuY3lDb21tb24gZnJvbSAnLi4vLi4vZGVuc2l0eUJ1b3lhbmN5Q29tbW9uLmpzJztcclxuaW1wb3J0IERlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MgZnJvbSAnLi4vLi4vRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgaGVhZGVyRm9udCA9IG5ldyBQaGV0Rm9udCggeyBzaXplOiAxMiwgd2VpZ2h0OiAnYm9sZCcgfSApO1xyXG5jb25zdCBib2R5Rm9udCA9IG5ldyBQaGV0Rm9udCggeyBzaXplOiAxMiB9ICk7XHJcbmNvbnN0IG1hdGVyaWFscyA9IF8uc29ydEJ5KCBEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuREVOU0lUWV9NWVNURVJZX01BVEVSSUFMUywgbWF0ZXJpYWwgPT4gbWF0ZXJpYWwuZGVuc2l0eSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVuc2l0eVRhYmxlTm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgY29uc3QgbGF5b3V0T3B0aW9ucyA9IHtcclxuICAgICAgeE1hcmdpbjogNSxcclxuICAgICAgeU1hcmdpbjogMlxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBncmlkQm94ID0gbmV3IEdyaWRCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgVGV4dCggRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncy5tYXRlcmlhbC5uYW1lU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgIGZvbnQ6IGhlYWRlckZvbnQsXHJcbiAgICAgICAgICBtYXhXaWR0aDogMTYwLFxyXG4gICAgICAgICAgbGF5b3V0T3B0aW9uczogY29tYmluZU9wdGlvbnM8VExheW91dE9wdGlvbnM+KCB7IGNvbHVtbjogMCwgcm93OiAwLCB4QWxpZ246ICdsZWZ0JyB9LCBsYXlvdXRPcHRpb25zIClcclxuICAgICAgICB9ICksXHJcblxyXG4gICAgICAgIG5ldyBSaWNoVGV4dCggbmV3IERlcml2ZWRQcm9wZXJ0eSggW1xyXG4gICAgICAgICAgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUHJlZmVyZW5jZXMudm9sdW1lVW5pdHNQcm9wZXJ0eSxcclxuICAgICAgICAgIERlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MuZGVuc2l0eUtnTFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgICAgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncy5kZW5zaXR5S2dkbTNTdHJpbmdQcm9wZXJ0eVxyXG4gICAgICAgIF0sICggdW5pdHMsIGxpdGVyc1N0cmluZywgZGVjaW1ldGVyc0N1YmVkU3RyaW5nICkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbGl0ZXJzJyA/IGxpdGVyc1N0cmluZyA6IGRlY2ltZXRlcnNDdWJlZFN0cmluZztcclxuICAgICAgICB9ICksIHtcclxuICAgICAgICAgIGZvbnQ6IGhlYWRlckZvbnQsXHJcbiAgICAgICAgICBtYXhXaWR0aDogMTYwLFxyXG4gICAgICAgICAgbGF5b3V0T3B0aW9uczogY29tYmluZU9wdGlvbnM8VExheW91dE9wdGlvbnM+KCB7IGNvbHVtbjogMSwgcm93OiAwLCB4QWxpZ246ICdyaWdodCcgfSwgbGF5b3V0T3B0aW9ucyApXHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIC4uLm1hdGVyaWFscy5tYXAoICggbWF0ZXJpYWwsIGluZGV4ICkgPT4gbmV3IFRleHQoIG1hdGVyaWFsLm5hbWVQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgZm9udDogYm9keUZvbnQsXHJcbiAgICAgICAgICBtYXhXaWR0aDogMjAwLFxyXG4gICAgICAgICAgbGF5b3V0T3B0aW9uczogY29tYmluZU9wdGlvbnM8VExheW91dE9wdGlvbnM+KCB7IGNvbHVtbjogMCwgcm93OiBpbmRleCArIDEsIHhBbGlnbjogJ2xlZnQnIH0sIGxheW91dE9wdGlvbnMgKVxyXG4gICAgICAgIH0gKSApLFxyXG4gICAgICAgIC4uLm1hdGVyaWFscy5tYXAoICggbWF0ZXJpYWwsIGluZGV4ICkgPT4gbmV3IFRleHQoIFV0aWxzLnRvRml4ZWQoIG1hdGVyaWFsLmRlbnNpdHkgLyAxMDAwLCAyICksIHtcclxuICAgICAgICAgIGZvbnQ6IGJvZHlGb250LFxyXG4gICAgICAgICAgbWF4V2lkdGg6IDE1MCxcclxuICAgICAgICAgIGxheW91dE9wdGlvbnM6IGNvbWJpbmVPcHRpb25zPFRMYXlvdXRPcHRpb25zPiggeyBjb2x1bW46IDEsIHJvdzogaW5kZXggKyAxLCB4QWxpZ246ICdyaWdodCcgfSwgbGF5b3V0T3B0aW9ucyApXHJcbiAgICAgICAgfSApIClcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGdyaWRCYWNrZ3JvdW5kID0gbmV3IEdyaWRCYWNrZ3JvdW5kTm9kZSggZ3JpZEJveC5jb25zdHJhaW50LCB7XHJcbiAgICAgIGNyZWF0ZUNlbGxCYWNrZ3JvdW5kOiBjZWxsID0+IHtcclxuICAgICAgICByZXR1cm4gUmVjdGFuZ2xlLmJvdW5kcyggY2VsbC5sYXN0QXZhaWxhYmxlQm91bmRzLCB7XHJcbiAgICAgICAgICBmaWxsOiBjZWxsLnBvc2l0aW9uLmdldCggT3JpZW50YXRpb24uVkVSVElDQUwgKSA9PT0gMCA/IERlbnNpdHlCdW95YW5jeUNvbW1vbkNvbG9ycy5jaGFydEhlYWRlckNvbG9yUHJvcGVydHkgOiAnd2hpdGUnLFxyXG4gICAgICAgICAgc3Ryb2tlOiAnYmxhY2snXHJcbiAgICAgICAgfSApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5jaGlsZHJlbiA9IFtcclxuICAgICAgZ3JpZEJhY2tncm91bmQsXHJcbiAgICAgIGdyaWRCb3hcclxuICAgIF07XHJcbiAgfVxyXG59XHJcblxyXG5kZW5zaXR5QnVveWFuY3lDb21tb24ucmVnaXN0ZXIoICdEZW5zaXR5VGFibGVOb2RlJywgRGVuc2l0eVRhYmxlTm9kZSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLFNBQVNDLGNBQWMsUUFBUSx1Q0FBdUM7QUFDdEUsT0FBT0MsV0FBVyxNQUFNLHlDQUF5QztBQUNqRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLGtCQUFrQixFQUFFQyxPQUFPLEVBQWtCQyxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxFQUFFQyxRQUFRLFFBQVEsbUNBQW1DO0FBQ2hJLE9BQU9DLDhCQUE4QixNQUFNLGdEQUFnRDtBQUMzRixPQUFPQyxnQ0FBZ0MsTUFBTSx3REFBd0Q7QUFDckcsT0FBT0MsMkJBQTJCLE1BQU0sa0RBQWtEO0FBQzFGLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyw0QkFBNEIsTUFBTSx1Q0FBdUM7O0FBRWhGO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUlaLFFBQVEsQ0FBRTtFQUFFYSxJQUFJLEVBQUUsRUFBRTtFQUFFQyxNQUFNLEVBQUU7QUFBTyxDQUFFLENBQUM7QUFDL0QsTUFBTUMsUUFBUSxHQUFHLElBQUlmLFFBQVEsQ0FBRTtFQUFFYSxJQUFJLEVBQUU7QUFBRyxDQUFFLENBQUM7QUFDN0MsTUFBTUcsU0FBUyxHQUFHQyxDQUFDLENBQUNDLE1BQU0sQ0FBRVgsOEJBQThCLENBQUNZLHlCQUF5QixFQUFFQyxRQUFRLElBQUlBLFFBQVEsQ0FBQ0MsT0FBUSxDQUFDO0FBRXBILGVBQWUsTUFBTUMsZ0JBQWdCLFNBQVNuQixJQUFJLENBQUM7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