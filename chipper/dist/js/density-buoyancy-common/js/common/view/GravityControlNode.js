// Copyright 2019-2023, University of Colorado Boulder

/**
 * Shows a NumberControl/ComboBox to control the gravity.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Range from '../../../../dot/js/Range.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';
import DensityBuoyancyCommonConstants from '../DensityBuoyancyCommonConstants.js';
import Gravity from '../model/Gravity.js';
import ComboNumberControl from './ComboNumberControl.js';
import DensityBuoyancyCommonQueryParameters from '../DensityBuoyancyCommonQueryParameters.js';
import ComboBox from '../../../../sun/js/ComboBox.js';
export default class GravityControlNode extends ComboNumberControl {
  constructor(gravityProperty, listParent, tandem) {
    const customValue = Gravity.createCustomGravity(DensityBuoyancyCommonQueryParameters.gEarth);
    super({
      tandem: tandem,
      titleProperty: DensityBuoyancyCommonStrings.gravity.nameStringProperty,
      valuePatternProperty: DensityBuoyancyCommonStrings.metersPerSecondSquaredPatternStringProperty,
      property: gravityProperty,
      range: new Range(0, 25),
      toNumericValue: gravity => gravity.value,
      createCustomValue: Gravity.createCustomGravity,
      isCustomValue: gravity => gravity.custom,
      isHiddenValue: gravity => gravity.hidden,
      listParent: listParent,
      comboItems: [Gravity.MOON, Gravity.EARTH, Gravity.JUPITER, Gravity.PLANET_X, customValue].map(gravity => {
        return {
          value: gravity,
          createNode: () => new Text(gravity.nameProperty, {
            font: DensityBuoyancyCommonConstants.COMBO_BOX_ITEM_FONT,
            maxWidth: 160
          }),
          tandemName: `${gravity.tandemName}${ComboBox.ITEM_TANDEM_NAME_SUFFIX}`
        };
      }),
      customValue: customValue,
      numberControlOptions: {
        delta: 0.1
      },
      comboBoxOptions: {
        listPosition: 'above'
      },
      getFallbackNode: gravity => {
        if (gravity.hidden) {
          return new Text(DensityBuoyancyCommonStrings.whatIsTheValueOfGravityStringProperty, {
            font: new PhetFont(14)
          });
        } else {
          return null;
        }
      }
    });
  }
}
densityBuoyancyCommon.register('GravityControlNode', GravityControlNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlBoZXRGb250IiwiVGV4dCIsImRlbnNpdHlCdW95YW5jeUNvbW1vbiIsIkRlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MiLCJEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMiLCJHcmF2aXR5IiwiQ29tYm9OdW1iZXJDb250cm9sIiwiRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUXVlcnlQYXJhbWV0ZXJzIiwiQ29tYm9Cb3giLCJHcmF2aXR5Q29udHJvbE5vZGUiLCJjb25zdHJ1Y3RvciIsImdyYXZpdHlQcm9wZXJ0eSIsImxpc3RQYXJlbnQiLCJ0YW5kZW0iLCJjdXN0b21WYWx1ZSIsImNyZWF0ZUN1c3RvbUdyYXZpdHkiLCJnRWFydGgiLCJ0aXRsZVByb3BlcnR5IiwiZ3Jhdml0eSIsIm5hbWVTdHJpbmdQcm9wZXJ0eSIsInZhbHVlUGF0dGVyblByb3BlcnR5IiwibWV0ZXJzUGVyU2Vjb25kU3F1YXJlZFBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsInByb3BlcnR5IiwicmFuZ2UiLCJ0b051bWVyaWNWYWx1ZSIsInZhbHVlIiwiY3JlYXRlQ3VzdG9tVmFsdWUiLCJpc0N1c3RvbVZhbHVlIiwiY3VzdG9tIiwiaXNIaWRkZW5WYWx1ZSIsImhpZGRlbiIsImNvbWJvSXRlbXMiLCJNT09OIiwiRUFSVEgiLCJKVVBJVEVSIiwiUExBTkVUX1giLCJtYXAiLCJjcmVhdGVOb2RlIiwibmFtZVByb3BlcnR5IiwiZm9udCIsIkNPTUJPX0JPWF9JVEVNX0ZPTlQiLCJtYXhXaWR0aCIsInRhbmRlbU5hbWUiLCJJVEVNX1RBTkRFTV9OQU1FX1NVRkZJWCIsIm51bWJlckNvbnRyb2xPcHRpb25zIiwiZGVsdGEiLCJjb21ib0JveE9wdGlvbnMiLCJsaXN0UG9zaXRpb24iLCJnZXRGYWxsYmFja05vZGUiLCJ3aGF0SXNUaGVWYWx1ZU9mR3Jhdml0eVN0cmluZ1Byb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHcmF2aXR5Q29udHJvbE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2hvd3MgYSBOdW1iZXJDb250cm9sL0NvbWJvQm94IHRvIGNvbnRyb2wgdGhlIGdyYXZpdHkuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBkZW5zaXR5QnVveWFuY3lDb21tb24gZnJvbSAnLi4vLi4vZGVuc2l0eUJ1b3lhbmN5Q29tbW9uLmpzJztcclxuaW1wb3J0IERlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MgZnJvbSAnLi4vLi4vRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMgZnJvbSAnLi4vRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdyYXZpdHkgZnJvbSAnLi4vbW9kZWwvR3Jhdml0eS5qcyc7XHJcbmltcG9ydCBDb21ib051bWJlckNvbnRyb2wgZnJvbSAnLi9Db21ib051bWJlckNvbnRyb2wuanMnO1xyXG5pbXBvcnQgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uL0RlbnNpdHlCdW95YW5jeUNvbW1vblF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBDb21ib0JveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ29tYm9Cb3guanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3Jhdml0eUNvbnRyb2xOb2RlIGV4dGVuZHMgQ29tYm9OdW1iZXJDb250cm9sPEdyYXZpdHk+IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdyYXZpdHlQcm9wZXJ0eTogUHJvcGVydHk8R3Jhdml0eT4sIGxpc3RQYXJlbnQ6IE5vZGUsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IGN1c3RvbVZhbHVlID0gR3Jhdml0eS5jcmVhdGVDdXN0b21HcmF2aXR5KCBEZW5zaXR5QnVveWFuY3lDb21tb25RdWVyeVBhcmFtZXRlcnMuZ0VhcnRoICk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHRpdGxlUHJvcGVydHk6IERlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MuZ3Jhdml0eS5uYW1lU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIHZhbHVlUGF0dGVyblByb3BlcnR5OiBEZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzLm1ldGVyc1BlclNlY29uZFNxdWFyZWRQYXR0ZXJuU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIHByb3BlcnR5OiBncmF2aXR5UHJvcGVydHksXHJcbiAgICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAsIDI1ICksXHJcbiAgICAgIHRvTnVtZXJpY1ZhbHVlOiBncmF2aXR5ID0+IGdyYXZpdHkudmFsdWUsXHJcbiAgICAgIGNyZWF0ZUN1c3RvbVZhbHVlOiBHcmF2aXR5LmNyZWF0ZUN1c3RvbUdyYXZpdHksXHJcbiAgICAgIGlzQ3VzdG9tVmFsdWU6IGdyYXZpdHkgPT4gZ3Jhdml0eS5jdXN0b20sXHJcbiAgICAgIGlzSGlkZGVuVmFsdWU6IGdyYXZpdHkgPT4gZ3Jhdml0eS5oaWRkZW4sXHJcbiAgICAgIGxpc3RQYXJlbnQ6IGxpc3RQYXJlbnQsXHJcbiAgICAgIGNvbWJvSXRlbXM6IFtcclxuICAgICAgICBHcmF2aXR5Lk1PT04sXHJcbiAgICAgICAgR3Jhdml0eS5FQVJUSCxcclxuICAgICAgICBHcmF2aXR5LkpVUElURVIsXHJcbiAgICAgICAgR3Jhdml0eS5QTEFORVRfWCxcclxuICAgICAgICBjdXN0b21WYWx1ZVxyXG4gICAgICBdLm1hcCggZ3Jhdml0eSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhbHVlOiBncmF2aXR5LFxyXG4gICAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFRleHQoIGdyYXZpdHkubmFtZVByb3BlcnR5LCB7XHJcbiAgICAgICAgICAgIGZvbnQ6IERlbnNpdHlCdW95YW5jeUNvbW1vbkNvbnN0YW50cy5DT01CT19CT1hfSVRFTV9GT05ULFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogMTYwXHJcbiAgICAgICAgICB9ICksXHJcbiAgICAgICAgICB0YW5kZW1OYW1lOiBgJHtncmF2aXR5LnRhbmRlbU5hbWV9JHtDb21ib0JveC5JVEVNX1RBTkRFTV9OQU1FX1NVRkZJWH1gXHJcbiAgICAgICAgfTtcclxuICAgICAgfSApLFxyXG4gICAgICBjdXN0b21WYWx1ZTogY3VzdG9tVmFsdWUsXHJcbiAgICAgIG51bWJlckNvbnRyb2xPcHRpb25zOiB7XHJcbiAgICAgICAgZGVsdGE6IDAuMVxyXG4gICAgICB9LFxyXG4gICAgICBjb21ib0JveE9wdGlvbnM6IHtcclxuICAgICAgICBsaXN0UG9zaXRpb246ICdhYm92ZSdcclxuICAgICAgfSxcclxuICAgICAgZ2V0RmFsbGJhY2tOb2RlOiBncmF2aXR5ID0+IHtcclxuICAgICAgICBpZiAoIGdyYXZpdHkuaGlkZGVuICkge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBUZXh0KCBEZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzLndoYXRJc1RoZVZhbHVlT2ZHcmF2aXR5U3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNCApXHJcbiAgICAgICAgICB9ICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5kZW5zaXR5QnVveWFuY3lDb21tb24ucmVnaXN0ZXIoICdHcmF2aXR5Q29udHJvbE5vZGUnLCBHcmF2aXR5Q29udHJvbE5vZGUgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFlQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyw0QkFBNEIsTUFBTSx1Q0FBdUM7QUFDaEYsT0FBT0MsOEJBQThCLE1BQU0sc0NBQXNDO0FBQ2pGLE9BQU9DLE9BQU8sTUFBTSxxQkFBcUI7QUFDekMsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBQ3hELE9BQU9DLG9DQUFvQyxNQUFNLDRDQUE0QztBQUM3RixPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBR3JELGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNILGtCQUFrQixDQUFVO0VBQ25FSSxXQUFXQSxDQUFFQyxlQUFrQyxFQUFFQyxVQUFnQixFQUFFQyxNQUFjLEVBQUc7SUFFekYsTUFBTUMsV0FBVyxHQUFHVCxPQUFPLENBQUNVLG1CQUFtQixDQUFFUixvQ0FBb0MsQ0FBQ1MsTUFBTyxDQUFDO0lBRTlGLEtBQUssQ0FBRTtNQUNMSCxNQUFNLEVBQUVBLE1BQU07TUFDZEksYUFBYSxFQUFFZCw0QkFBNEIsQ0FBQ2UsT0FBTyxDQUFDQyxrQkFBa0I7TUFDdEVDLG9CQUFvQixFQUFFakIsNEJBQTRCLENBQUNrQiwyQ0FBMkM7TUFDOUZDLFFBQVEsRUFBRVgsZUFBZTtNQUN6QlksS0FBSyxFQUFFLElBQUl4QixLQUFLLENBQUUsQ0FBQyxFQUFFLEVBQUcsQ0FBQztNQUN6QnlCLGNBQWMsRUFBRU4sT0FBTyxJQUFJQSxPQUFPLENBQUNPLEtBQUs7TUFDeENDLGlCQUFpQixFQUFFckIsT0FBTyxDQUFDVSxtQkFBbUI7TUFDOUNZLGFBQWEsRUFBRVQsT0FBTyxJQUFJQSxPQUFPLENBQUNVLE1BQU07TUFDeENDLGFBQWEsRUFBRVgsT0FBTyxJQUFJQSxPQUFPLENBQUNZLE1BQU07TUFDeENsQixVQUFVLEVBQUVBLFVBQVU7TUFDdEJtQixVQUFVLEVBQUUsQ0FDVjFCLE9BQU8sQ0FBQzJCLElBQUksRUFDWjNCLE9BQU8sQ0FBQzRCLEtBQUssRUFDYjVCLE9BQU8sQ0FBQzZCLE9BQU8sRUFDZjdCLE9BQU8sQ0FBQzhCLFFBQVEsRUFDaEJyQixXQUFXLENBQ1osQ0FBQ3NCLEdBQUcsQ0FBRWxCLE9BQU8sSUFBSTtRQUNoQixPQUFPO1VBQ0xPLEtBQUssRUFBRVAsT0FBTztVQUNkbUIsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSXBDLElBQUksQ0FBRWlCLE9BQU8sQ0FBQ29CLFlBQVksRUFBRTtZQUNoREMsSUFBSSxFQUFFbkMsOEJBQThCLENBQUNvQyxtQkFBbUI7WUFDeERDLFFBQVEsRUFBRTtVQUNaLENBQUUsQ0FBQztVQUNIQyxVQUFVLEVBQUcsR0FBRXhCLE9BQU8sQ0FBQ3dCLFVBQVcsR0FBRWxDLFFBQVEsQ0FBQ21DLHVCQUF3QjtRQUN2RSxDQUFDO01BQ0gsQ0FBRSxDQUFDO01BQ0g3QixXQUFXLEVBQUVBLFdBQVc7TUFDeEI4QixvQkFBb0IsRUFBRTtRQUNwQkMsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUNEQyxlQUFlLEVBQUU7UUFDZkMsWUFBWSxFQUFFO01BQ2hCLENBQUM7TUFDREMsZUFBZSxFQUFFOUIsT0FBTyxJQUFJO1FBQzFCLElBQUtBLE9BQU8sQ0FBQ1ksTUFBTSxFQUFHO1VBQ3BCLE9BQU8sSUFBSTdCLElBQUksQ0FBRUUsNEJBQTRCLENBQUM4QyxxQ0FBcUMsRUFBRTtZQUNuRlYsSUFBSSxFQUFFLElBQUl2QyxRQUFRLENBQUUsRUFBRztVQUN6QixDQUFFLENBQUM7UUFDTCxDQUFDLE1BQ0k7VUFDSCxPQUFPLElBQUk7UUFDYjtNQUNGO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBRSxxQkFBcUIsQ0FBQ2dELFFBQVEsQ0FBRSxvQkFBb0IsRUFBRXpDLGtCQUFtQixDQUFDIn0=