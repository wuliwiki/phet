// Copyright 2019-2022, University of Colorado Boulder

/**
 * The 3D view for a Ellipsoid.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Bounds3 from '../../../../dot/js/Bounds3.js';
import Vector3 from '../../../../dot/js/Vector3.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import MassView, { TAG_OFFSET } from './MassView.js';
export default class EllipsoidView extends MassView {
  constructor(ellipsoid) {
    const ellipsoidGeometry = new THREE.SphereGeometry(1, 30, 24);
    super(ellipsoid, ellipsoidGeometry);
    this.ellipsoid = ellipsoid;
    this.ellipsoidGeometry = ellipsoidGeometry;
    const positionTag = () => {
      const size = ellipsoid.sizeProperty.value;
      this.tagOffsetProperty.value = new Vector3(size.minX + TAG_OFFSET, size.maxY - this.tagHeight - TAG_OFFSET, size.maxZ);
    };
    positionTag();
    this.updateListener = (newSize, oldSize) => {
      positionTag();
      // @ts-expect-error OLD version possibly?
      ellipsoidGeometry.applyMatrix(new THREE.Matrix4().makeScale(newSize.width / oldSize.width, newSize.height / oldSize.height, newSize.depth / oldSize.depth));
      ellipsoidGeometry.computeBoundingSphere();
      this.updateMatrix();
    };
    this.ellipsoid.sizeProperty.lazyLink(this.updateListener);
    this.updateListener(this.ellipsoid.sizeProperty.value, new Bounds3(-1, -1, -1, 1, 1, 1));
  }

  /**
   * Releases references.
   */
  dispose() {
    this.ellipsoid.sizeProperty.unlink(this.updateListener);
    this.ellipsoidGeometry.dispose();
    super.dispose();
  }
}
densityBuoyancyCommon.register('EllipsoidView', EllipsoidView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMzIiwiVmVjdG9yMyIsImRlbnNpdHlCdW95YW5jeUNvbW1vbiIsIk1hc3NWaWV3IiwiVEFHX09GRlNFVCIsIkVsbGlwc29pZFZpZXciLCJjb25zdHJ1Y3RvciIsImVsbGlwc29pZCIsImVsbGlwc29pZEdlb21ldHJ5IiwiVEhSRUUiLCJTcGhlcmVHZW9tZXRyeSIsInBvc2l0aW9uVGFnIiwic2l6ZSIsInNpemVQcm9wZXJ0eSIsInZhbHVlIiwidGFnT2Zmc2V0UHJvcGVydHkiLCJtaW5YIiwibWF4WSIsInRhZ0hlaWdodCIsIm1heFoiLCJ1cGRhdGVMaXN0ZW5lciIsIm5ld1NpemUiLCJvbGRTaXplIiwiYXBwbHlNYXRyaXgiLCJNYXRyaXg0IiwibWFrZVNjYWxlIiwid2lkdGgiLCJoZWlnaHQiLCJkZXB0aCIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsInVwZGF0ZU1hdHJpeCIsImxhenlMaW5rIiwiZGlzcG9zZSIsInVubGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWxsaXBzb2lkVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgM0QgdmlldyBmb3IgYSBFbGxpcHNvaWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMy5qcyc7XHJcbmltcG9ydCBWZWN0b3IzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IzLmpzJztcclxuaW1wb3J0IGRlbnNpdHlCdW95YW5jeUNvbW1vbiBmcm9tICcuLi8uLi9kZW5zaXR5QnVveWFuY3lDb21tb24uanMnO1xyXG5pbXBvcnQgRWxsaXBzb2lkIGZyb20gJy4uL21vZGVsL0VsbGlwc29pZC5qcyc7XHJcbmltcG9ydCBNYXNzVmlldywgeyBUQUdfT0ZGU0VUIH0gZnJvbSAnLi9NYXNzVmlldy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGxpcHNvaWRWaWV3IGV4dGVuZHMgTWFzc1ZpZXcge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgZWxsaXBzb2lkOiBFbGxpcHNvaWQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBlbGxpcHNvaWRHZW9tZXRyeTogVEhSRUUuU3BoZXJlR2VvbWV0cnk7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB1cGRhdGVMaXN0ZW5lcjogKCBuZXdTaXplOiBCb3VuZHMzLCBvbGRTaXplOiBCb3VuZHMzICkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBlbGxpcHNvaWQ6IEVsbGlwc29pZCApIHtcclxuXHJcbiAgICBjb25zdCBlbGxpcHNvaWRHZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSggMSwgMzAsIDI0ICk7XHJcblxyXG4gICAgc3VwZXIoIGVsbGlwc29pZCwgZWxsaXBzb2lkR2VvbWV0cnkgKTtcclxuXHJcbiAgICB0aGlzLmVsbGlwc29pZCA9IGVsbGlwc29pZDtcclxuICAgIHRoaXMuZWxsaXBzb2lkR2VvbWV0cnkgPSBlbGxpcHNvaWRHZW9tZXRyeTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvblRhZyA9ICgpID0+IHtcclxuICAgICAgY29uc3Qgc2l6ZSA9IGVsbGlwc29pZC5zaXplUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIHRoaXMudGFnT2Zmc2V0UHJvcGVydHkudmFsdWUgPSBuZXcgVmVjdG9yMyggc2l6ZS5taW5YICsgVEFHX09GRlNFVCwgc2l6ZS5tYXhZIC0gdGhpcy50YWdIZWlnaHQhIC0gVEFHX09GRlNFVCwgc2l6ZS5tYXhaICk7XHJcbiAgICB9O1xyXG4gICAgcG9zaXRpb25UYWcoKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZUxpc3RlbmVyID0gKCBuZXdTaXplOiBCb3VuZHMzLCBvbGRTaXplOiBCb3VuZHMzICkgPT4ge1xyXG4gICAgICBwb3NpdGlvblRhZygpO1xyXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIE9MRCB2ZXJzaW9uIHBvc3NpYmx5P1xyXG4gICAgICBlbGxpcHNvaWRHZW9tZXRyeS5hcHBseU1hdHJpeCggbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlU2NhbGUoXHJcbiAgICAgICAgbmV3U2l6ZS53aWR0aCAvIG9sZFNpemUud2lkdGgsXHJcbiAgICAgICAgbmV3U2l6ZS5oZWlnaHQgLyBvbGRTaXplLmhlaWdodCxcclxuICAgICAgICBuZXdTaXplLmRlcHRoIC8gb2xkU2l6ZS5kZXB0aFxyXG4gICAgICApICk7XHJcbiAgICAgIGVsbGlwc29pZEdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG4gICAgICB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuZWxsaXBzb2lkLnNpemVQcm9wZXJ0eS5sYXp5TGluayggdGhpcy51cGRhdGVMaXN0ZW5lciApO1xyXG4gICAgdGhpcy51cGRhdGVMaXN0ZW5lciggdGhpcy5lbGxpcHNvaWQuc2l6ZVByb3BlcnR5LnZhbHVlLCBuZXcgQm91bmRzMyggLTEsIC0xLCAtMSwgMSwgMSwgMSApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxlYXNlcyByZWZlcmVuY2VzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5lbGxpcHNvaWQuc2l6ZVByb3BlcnR5LnVubGluayggdGhpcy51cGRhdGVMaXN0ZW5lciApO1xyXG4gICAgdGhpcy5lbGxpcHNvaWRHZW9tZXRyeS5kaXNwb3NlKCk7XHJcblxyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZGVuc2l0eUJ1b3lhbmN5Q29tbW9uLnJlZ2lzdGVyKCAnRWxsaXBzb2lkVmlldycsIEVsbGlwc29pZFZpZXcgKTtcclxuIl0s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