// Copyright 2019-2022, University of Colorado Boulder

/**
 * The 3D view for a Scale.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector3 from '../../../../dot/js/Vector3.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import Scale from '../model/Scale.js';
import CuboidView from './CuboidView.js';
import MassView from './MassView.js';
import VerticalCylinderView from './VerticalCylinderView.js';
export default class ScaleView extends MassView {
  constructor(mass) {
    const scaleGeometry = ScaleView.getScaleGeometry();
    super(mass, scaleGeometry);
    this.scaleGeometry = scaleGeometry;
  }

  /**
   * Releases references.
   */
  dispose() {
    this.scaleGeometry.dispose();
    super.dispose();
  }

  /**
   * Returns the geometry used for the scale
   */
  static getScaleGeometry() {
    const cuboidElements = 18 * 3;
    const cylinderElements = 12 * 64;
    const numElements = cuboidElements + cylinderElements;
    const positionArray = new Float32Array(numElements * 3);
    const normalArray = new Float32Array(numElements * 3);
    const uvArray = new Float32Array(numElements * 2);
    const topOffset = new Vector3(0, (Scale.SCALE_HEIGHT - Scale.SCALE_TOP_HEIGHT) / 2, 0);
    CuboidView.updateArrays(positionArray, normalArray, uvArray, Scale.SCALE_BASE_BOUNDS);
    VerticalCylinderView.updateArrays(positionArray, normalArray, uvArray, Scale.SCALE_WIDTH / 2, Scale.SCALE_TOP_HEIGHT, cuboidElements, topOffset);
    const scaleGeometry = new THREE.BufferGeometry();
    scaleGeometry.addAttribute('position', new THREE.BufferAttribute(positionArray, 3));
    scaleGeometry.addAttribute('normal', new THREE.BufferAttribute(normalArray, 3));
    scaleGeometry.addAttribute('uv', new THREE.BufferAttribute(uvArray, 2));
    return scaleGeometry;
  }
}
densityBuoyancyCommon.register('ScaleView', ScaleView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IzIiwiZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIiwiU2NhbGUiLCJDdWJvaWRWaWV3IiwiTWFzc1ZpZXciLCJWZXJ0aWNhbEN5bGluZGVyVmlldyIsIlNjYWxlVmlldyIsImNvbnN0cnVjdG9yIiwibWFzcyIsInNjYWxlR2VvbWV0cnkiLCJnZXRTY2FsZUdlb21ldHJ5IiwiZGlzcG9zZSIsImN1Ym9pZEVsZW1lbnRzIiwiY3lsaW5kZXJFbGVtZW50cyIsIm51bUVsZW1lbnRzIiwicG9zaXRpb25BcnJheSIsIkZsb2F0MzJBcnJheSIsIm5vcm1hbEFycmF5IiwidXZBcnJheSIsInRvcE9mZnNldCIsIlNDQUxFX0hFSUdIVCIsIlNDQUxFX1RPUF9IRUlHSFQiLCJ1cGRhdGVBcnJheXMiLCJTQ0FMRV9CQVNFX0JPVU5EUyIsIlNDQUxFX1dJRFRIIiwiVEhSRUUiLCJCdWZmZXJHZW9tZXRyeSIsImFkZEF0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2NhbGVWaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAzRCB2aWV3IGZvciBhIFNjYWxlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIGZyb20gJy4uLy4uL2RlbnNpdHlCdW95YW5jeUNvbW1vbi5qcyc7XHJcbmltcG9ydCBTY2FsZSBmcm9tICcuLi9tb2RlbC9TY2FsZS5qcyc7XHJcbmltcG9ydCBDdWJvaWRWaWV3IGZyb20gJy4vQ3Vib2lkVmlldy5qcyc7XHJcbmltcG9ydCBNYXNzVmlldyBmcm9tICcuL01hc3NWaWV3LmpzJztcclxuaW1wb3J0IFZlcnRpY2FsQ3lsaW5kZXJWaWV3IGZyb20gJy4vVmVydGljYWxDeWxpbmRlclZpZXcuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NhbGVWaWV3IGV4dGVuZHMgTWFzc1ZpZXcge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHNjYWxlR2VvbWV0cnk6IFRIUkVFLkJ1ZmZlckdlb21ldHJ5O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1hc3M6IFNjYWxlICkge1xyXG5cclxuICAgIGNvbnN0IHNjYWxlR2VvbWV0cnkgPSBTY2FsZVZpZXcuZ2V0U2NhbGVHZW9tZXRyeSgpO1xyXG5cclxuICAgIHN1cGVyKCBtYXNzLCBzY2FsZUdlb21ldHJ5ICk7XHJcblxyXG4gICAgdGhpcy5zY2FsZUdlb21ldHJ5ID0gc2NhbGVHZW9tZXRyeTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbGVhc2VzIHJlZmVyZW5jZXMuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNjYWxlR2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGdlb21ldHJ5IHVzZWQgZm9yIHRoZSBzY2FsZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0U2NhbGVHZW9tZXRyeSgpOiBUSFJFRS5CdWZmZXJHZW9tZXRyeSB7XHJcbiAgICBjb25zdCBjdWJvaWRFbGVtZW50cyA9IDE4ICogMztcclxuICAgIGNvbnN0IGN5bGluZGVyRWxlbWVudHMgPSAxMiAqIDY0O1xyXG4gICAgY29uc3QgbnVtRWxlbWVudHMgPSBjdWJvaWRFbGVtZW50cyArIGN5bGluZGVyRWxlbWVudHM7XHJcblxyXG4gICAgY29uc3QgcG9zaXRpb25BcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIG51bUVsZW1lbnRzICogMyApO1xyXG4gICAgY29uc3Qgbm9ybWFsQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBudW1FbGVtZW50cyAqIDMgKTtcclxuICAgIGNvbnN0IHV2QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBudW1FbGVtZW50cyAqIDIgKTtcclxuXHJcbiAgICBjb25zdCB0b3BPZmZzZXQgPSBuZXcgVmVjdG9yMyhcclxuICAgICAgMCxcclxuICAgICAgKCBTY2FsZS5TQ0FMRV9IRUlHSFQgLSBTY2FsZS5TQ0FMRV9UT1BfSEVJR0hUICkgLyAyLFxyXG4gICAgICAwXHJcbiAgICApO1xyXG5cclxuICAgIEN1Ym9pZFZpZXcudXBkYXRlQXJyYXlzKCBwb3NpdGlvbkFycmF5LCBub3JtYWxBcnJheSwgdXZBcnJheSwgU2NhbGUuU0NBTEVfQkFTRV9CT1VORFMgKTtcclxuICAgIFZlcnRpY2FsQ3lsaW5kZXJWaWV3LnVwZGF0ZUFycmF5cyggcG9zaXRpb25BcnJheSwgbm9ybWFsQXJyYXksIHV2QXJyYXksIFNjYWxlLlNDQUxFX1dJRFRIIC8gMiwgU2NhbGUuU0NBTEVfVE9QX0hFSUdIVCwgY3Vib2lkRWxlbWVudHMsIHRvcE9mZnNldCApO1xyXG5cclxuICAgIGNvbnN0IHNjYWxlR2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcclxuICAgIHNjYWxlR2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkFycmF5LCAzICkgKTtcclxuICAgIHNjYWxlR2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXJyYXksIDMgKSApO1xyXG4gICAgc2NhbGVHZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIHV2QXJyYXksIDIgKSApO1xyXG5cclxuICAgIHJldHVybiBzY2FsZUdlb21ldHJ5O1xyXG4gIH1cclxufVxyXG5cclxuZGVuc2l0eUJ1b3lhbmN5Q29tbW9uLnJlZ2lzdGVyKCAnU2NhbGVWaWV3JywgU2NhbGVWaWV3ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyxLQUFLLE1BQU0sbUJBQW1CO0FBQ3JDLE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFDeEMsT0FBT0MsUUFBUSxNQUFNLGVBQWU7QUFDcEMsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBRTVELGVBQWUsTUFBTUMsU0FBUyxTQUFTRixRQUFRLENBQUM7RUFJdkNHLFdBQVdBLENBQUVDLElBQVcsRUFBRztJQUVoQyxNQUFNQyxhQUFhLEdBQUdILFNBQVMsQ0FBQ0ksZ0JBQWdCLENBQUMsQ0FBQztJQUVsRCxLQUFLLENBQUVGLElBQUksRUFBRUMsYUFBYyxDQUFDO0lBRTVCLElBQUksQ0FBQ0EsYUFBYSxHQUFHQSxhQUFhO0VBQ3BDOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkUsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0YsYUFBYSxDQUFDRSxPQUFPLENBQUMsQ0FBQztJQUU1QixLQUFLLENBQUNBLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE9BQWNELGdCQUFnQkEsQ0FBQSxFQUF5QjtJQUNyRCxNQUFNRSxjQUFjLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDN0IsTUFBTUMsZ0JBQWdCLEdBQUcsRUFBRSxHQUFHLEVBQUU7SUFDaEMsTUFBTUMsV0FBVyxHQUFHRixjQUFjLEdBQUdDLGdCQUFnQjtJQUVyRCxNQUFNRSxhQUFhLEdBQUcsSUFBSUMsWUFBWSxDQUFFRixXQUFXLEdBQUcsQ0FBRSxDQUFDO0lBQ3pELE1BQU1HLFdBQVcsR0FBRyxJQUFJRCxZQUFZLENBQUVGLFdBQVcsR0FBRyxDQUFFLENBQUM7SUFDdkQsTUFBTUksT0FBTyxHQUFHLElBQUlGLFlBQVksQ0FBRUYsV0FBVyxHQUFHLENBQUUsQ0FBQztJQUVuRCxNQUFNSyxTQUFTLEdBQUcsSUFBSW5CLE9BQU8sQ0FDM0IsQ0FBQyxFQUNELENBQUVFLEtBQUssQ0FBQ2tCLFlBQVksR0FBR2xCLEtBQUssQ0FBQ21CLGdCQUFnQixJQUFLLENBQUMsRUFDbkQsQ0FDRixDQUFDO0lBRURsQixVQUFVLENBQUNtQixZQUFZLENBQUVQLGFBQWEsRUFBRUUsV0FBVyxFQUFFQyxPQUFPLEVBQUVoQixLQUFLLENBQUNxQixpQkFBa0IsQ0FBQztJQUN2RmxCLG9CQUFvQixDQUFDaUIsWUFBWSxDQUFFUCxhQUFhLEVBQUVFLFdBQVcsRUFBRUMsT0FBTyxFQUFFaEIsS0FBSyxDQUFDc0IsV0FBVyxHQUFHLENBQUMsRUFBRXRCLEtBQUssQ0FBQ21CLGdCQUFnQixFQUFFVCxjQUFjLEVBQUVPLFNBQVUsQ0FBQztJQUVsSixNQUFNVixhQUFhLEdBQUcsSUFBSWdCLEtBQUssQ0FBQ0MsY0FBYyxDQUFDLENBQUM7SUFDaERqQixhQUFhLENBQUNrQixZQUFZLENBQUUsVUFBVSxFQUFFLElBQUlGLEtBQUssQ0FBQ0csZUFBZSxDQUFFYixhQUFhLEVBQUUsQ0FBRSxDQUFFLENBQUM7SUFDdkZOLGFBQWEsQ0FBQ2tCLFlBQVksQ0FBRSxRQUFRLEVBQUUsSUFBSUYsS0FBSyxDQUFDRyxlQUFlLENBQUVYLFdBQVcsRUFBRSxDQUFFLENBQUUsQ0FBQztJQUNuRlIsYUFBYSxDQUFDa0IsWUFBWSxDQUFFLElBQUksRUFBRSxJQUFJRixLQUFLLENBQUNHLGVBQWUsQ0FBRVYsT0FBTyxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBRTNFLE9BQU9ULGFBQWE7RUFDdEI7QUFDRjtBQUVBUixxQkFBcUIsQ0FBQzRCLFFBQVEsQ0FBRSxXQUFXLEVBQUV2QixTQUFVLENBQUMifQ==