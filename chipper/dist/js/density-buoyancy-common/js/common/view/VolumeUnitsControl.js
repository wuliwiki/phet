// Copyright 2023, University of Colorado Boulder

/**
 * For the Preferences dialog, controls the volume units
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { HBox, RichText, Text } from '../../../../scenery/js/imports.js';
import AquaRadioButtonGroup from '../../../../sun/js/AquaRadioButtonGroup.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import AquaRadioButton from '../../../../sun/js/AquaRadioButton.js';
import PreferencesDialog from '../../../../joist/js/preferences/PreferencesDialog.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';
export default class VolumeUnitsControl extends HBox {
  constructor(beakerUnitsProperty, providedOptions) {
    const options = optionize()({
      spacing: 15
    }, providedOptions);
    const labelText = new Text(DensityBuoyancyCommonStrings.volumeUnitsStringProperty, {
      font: PreferencesDialog.CONTENT_FONT,
      tandem: options.tandem.createTandem('labelText')
    });
    const radioButtonGroup = new VolumeUnitsRadioButtonGroup(beakerUnitsProperty, {
      tandem: options.tandem.createTandem('radioButtonGroup')
    });
    options.children = [labelText, radioButtonGroup];
    super(options);
    this.addLinkedElement(beakerUnitsProperty, {
      tandem: options.tandem.createTandem(beakerUnitsProperty.tandem.name)
    });
    this.disposeVolumeUnitsControl = () => {
      labelText.dispose();
      radioButtonGroup.dispose();
    };
  }
  dispose() {
    super.dispose();
    this.disposeVolumeUnitsControl();
  }
}
class VolumeUnitsRadioButtonGroup extends AquaRadioButtonGroup {
  constructor(beakerUnitsProperty, providedOptions) {
    const options = optionize()({
      // AquaRadioButtonGroupOptions
      orientation: 'horizontal',
      spacing: 15
    }, providedOptions);
    const items = [createItem('liters', DensityBuoyancyCommonStrings.litersStringProperty), createItem('decimetersCubed', DensityBuoyancyCommonStrings.decimetersCubedStringProperty)];
    super(beakerUnitsProperty, items, options);
  }
}
function createItem(value, stringProperty) {
  return {
    value: value,
    createNode: tandem => new RichText(stringProperty, {
      font: PreferencesDialog.CONTENT_FONT,
      maxWidth: 200,
      tandem: tandem.createTandem('text')
    }),
    tandemName: `${value}${AquaRadioButton.TANDEM_NAME_SUFFIX}`
  };
}
densityBuoyancyCommon.register('VolumeUnitsControl', VolumeUnitsControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,