// Copyright 2019-2023, University of Colorado Boulder

/**
 * Shows a combined NumberControl/ComboBox for controlling liquid density.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Range from '../../../../dot/js/Range.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';
import DensityBuoyancyCommonConstants from '../DensityBuoyancyCommonConstants.js';
import Material from '../model/Material.js';
import ComboNumberControl from './ComboNumberControl.js';
export default class DensityControlNode extends ComboNumberControl {
  constructor(liquidMaterialProperty, materials, listParent, tandem) {
    const customValue = Material.createCustomLiquidMaterial({
      density: 1000
    });
    super({
      tandem: tandem,
      titleProperty: DensityBuoyancyCommonStrings.fluidDensityStringProperty,
      valuePatternProperty: DensityBuoyancyCommonConstants.KILOGRAMS_PER_VOLUME_PATTERN_STRING_PROPERTY,
      property: liquidMaterialProperty,
      range: new Range(0.5, 15),
      toNumericValue: material => material.density / 1000,
      createCustomValue: density => Material.createCustomLiquidMaterial({
        density: density * 1000
      }),
      isCustomValue: material => material.custom,
      isHiddenValue: material => material.hidden,
      listParent: listParent,
      comboItems: [...materials, customValue].map(material => {
        return {
          value: material,
          createNode: () => new Text(material.nameProperty, {
            font: DensityBuoyancyCommonConstants.COMBO_BOX_ITEM_FONT,
            maxWidth: 160
          }),
          tandemName: `${material.tandemName}Item`
        };
      }),
      customValue: customValue,
      numberControlOptions: {
        delta: 0.01,
        sliderOptions: {
          // Slightly longer, see https://github.com/phetsims/buoyancy/issues/33
          trackSize: new Dimension2(130, 0.5)
        }
      },
      comboBoxOptions: {
        listPosition: 'above'
      },
      getFallbackNode: material => {
        if (material.hidden) {
          return new Text(DensityBuoyancyCommonStrings.whatIsTheFluidDensityStringProperty, {
            font: new PhetFont(14)
          });
        } else {
          return null;
        }
      }
    });
  }
}
densityBuoyancyCommon.register('DensityControlNode', DensityControlNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiUmFuZ2UiLCJQaGV0Rm9udCIsIlRleHQiLCJkZW5zaXR5QnVveWFuY3lDb21tb24iLCJEZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzIiwiRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzIiwiTWF0ZXJpYWwiLCJDb21ib051bWJlckNvbnRyb2wiLCJEZW5zaXR5Q29udHJvbE5vZGUiLCJjb25zdHJ1Y3RvciIsImxpcXVpZE1hdGVyaWFsUHJvcGVydHkiLCJtYXRlcmlhbHMiLCJsaXN0UGFyZW50IiwidGFuZGVtIiwiY3VzdG9tVmFsdWUiLCJjcmVhdGVDdXN0b21MaXF1aWRNYXRlcmlhbCIsImRlbnNpdHkiLCJ0aXRsZVByb3BlcnR5IiwiZmx1aWREZW5zaXR5U3RyaW5nUHJvcGVydHkiLCJ2YWx1ZVBhdHRlcm5Qcm9wZXJ0eSIsIktJTE9HUkFNU19QRVJfVk9MVU1FX1BBVFRFUk5fU1RSSU5HX1BST1BFUlRZIiwicHJvcGVydHkiLCJyYW5nZSIsInRvTnVtZXJpY1ZhbHVlIiwibWF0ZXJpYWwiLCJjcmVhdGVDdXN0b21WYWx1ZSIsImlzQ3VzdG9tVmFsdWUiLCJjdXN0b20iLCJpc0hpZGRlblZhbHVlIiwiaGlkZGVuIiwiY29tYm9JdGVtcyIsIm1hcCIsInZhbHVlIiwiY3JlYXRlTm9kZSIsIm5hbWVQcm9wZXJ0eSIsImZvbnQiLCJDT01CT19CT1hfSVRFTV9GT05UIiwibWF4V2lkdGgiLCJ0YW5kZW1OYW1lIiwibnVtYmVyQ29udHJvbE9wdGlvbnMiLCJkZWx0YSIsInNsaWRlck9wdGlvbnMiLCJ0cmFja1NpemUiLCJjb21ib0JveE9wdGlvbnMiLCJsaXN0UG9zaXRpb24iLCJnZXRGYWxsYmFja05vZGUiLCJ3aGF0SXNUaGVGbHVpZERlbnNpdHlTdHJpbmdQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGVuc2l0eUNvbnRyb2xOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNob3dzIGEgY29tYmluZWQgTnVtYmVyQ29udHJvbC9Db21ib0JveCBmb3IgY29udHJvbGxpbmcgbGlxdWlkIGRlbnNpdHkuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IGRlbnNpdHlCdW95YW5jeUNvbW1vbiBmcm9tICcuLi8uLi9kZW5zaXR5QnVveWFuY3lDb21tb24uanMnO1xyXG5pbXBvcnQgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncyBmcm9tICcuLi8uLi9EZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IERlbnNpdHlCdW95YW5jeUNvbW1vbkNvbnN0YW50cyBmcm9tICcuLi9EZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgTWF0ZXJpYWwgZnJvbSAnLi4vbW9kZWwvTWF0ZXJpYWwuanMnO1xyXG5pbXBvcnQgQ29tYm9OdW1iZXJDb250cm9sIGZyb20gJy4vQ29tYm9OdW1iZXJDb250cm9sLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbnNpdHlDb250cm9sTm9kZSBleHRlbmRzIENvbWJvTnVtYmVyQ29udHJvbDxNYXRlcmlhbD4ge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbGlxdWlkTWF0ZXJpYWxQcm9wZXJ0eTogUHJvcGVydHk8TWF0ZXJpYWw+LCBtYXRlcmlhbHM6IE1hdGVyaWFsW10sIGxpc3RQYXJlbnQ6IE5vZGUsIHRhbmRlbTogVGFuZGVtICkge1xyXG4gICAgY29uc3QgY3VzdG9tVmFsdWUgPSBNYXRlcmlhbC5jcmVhdGVDdXN0b21MaXF1aWRNYXRlcmlhbCgge1xyXG4gICAgICBkZW5zaXR5OiAxMDAwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHRpdGxlUHJvcGVydHk6IERlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MuZmx1aWREZW5zaXR5U3RyaW5nUHJvcGVydHksXHJcbiAgICAgIHZhbHVlUGF0dGVyblByb3BlcnR5OiBEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuS0lMT0dSQU1TX1BFUl9WT0xVTUVfUEFUVEVSTl9TVFJJTkdfUFJPUEVSVFksXHJcbiAgICAgIHByb3BlcnR5OiBsaXF1aWRNYXRlcmlhbFByb3BlcnR5LFxyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCAwLjUsIDE1ICksXHJcbiAgICAgIHRvTnVtZXJpY1ZhbHVlOiBtYXRlcmlhbCA9PiBtYXRlcmlhbC5kZW5zaXR5IC8gMTAwMCxcclxuICAgICAgY3JlYXRlQ3VzdG9tVmFsdWU6IGRlbnNpdHkgPT4gTWF0ZXJpYWwuY3JlYXRlQ3VzdG9tTGlxdWlkTWF0ZXJpYWwoIHtcclxuICAgICAgICBkZW5zaXR5OiBkZW5zaXR5ICogMTAwMFxyXG4gICAgICB9ICksXHJcbiAgICAgIGlzQ3VzdG9tVmFsdWU6IG1hdGVyaWFsID0+IG1hdGVyaWFsLmN1c3RvbSxcclxuICAgICAgaXNIaWRkZW5WYWx1ZTogbWF0ZXJpYWwgPT4gbWF0ZXJpYWwuaGlkZGVuLFxyXG4gICAgICBsaXN0UGFyZW50OiBsaXN0UGFyZW50LFxyXG4gICAgICBjb21ib0l0ZW1zOiBbXHJcbiAgICAgICAgLi4ubWF0ZXJpYWxzLFxyXG4gICAgICAgIGN1c3RvbVZhbHVlXHJcbiAgICAgIF0ubWFwKCBtYXRlcmlhbCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhbHVlOiBtYXRlcmlhbCxcclxuICAgICAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IG5ldyBUZXh0KCBtYXRlcmlhbC5uYW1lUHJvcGVydHksIHtcclxuICAgICAgICAgICAgZm9udDogRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzLkNPTUJPX0JPWF9JVEVNX0ZPTlQsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiAxNjBcclxuICAgICAgICAgIH0gKSxcclxuICAgICAgICAgIHRhbmRlbU5hbWU6IGAke21hdGVyaWFsLnRhbmRlbU5hbWV9SXRlbWBcclxuICAgICAgICB9O1xyXG4gICAgICB9ICksXHJcbiAgICAgIGN1c3RvbVZhbHVlOiBjdXN0b21WYWx1ZSxcclxuICAgICAgbnVtYmVyQ29udHJvbE9wdGlvbnM6IHtcclxuICAgICAgICBkZWx0YTogMC4wMSxcclxuICAgICAgICBzbGlkZXJPcHRpb25zOiB7XHJcbiAgICAgICAgICAvLyBTbGlnaHRseSBsb25nZXIsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvYnVveWFuY3kvaXNzdWVzLzMzXHJcbiAgICAgICAgICB0cmFja1NpemU6IG5ldyBEaW1lbnNpb24yKCAxMzAsIDAuNSApXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBjb21ib0JveE9wdGlvbnM6IHtcclxuICAgICAgICBsaXN0UG9zaXRpb246ICdhYm92ZSdcclxuICAgICAgfSxcclxuICAgICAgZ2V0RmFsbGJhY2tOb2RlOiBtYXRlcmlhbCA9PiB7XHJcbiAgICAgICAgaWYgKCBtYXRlcmlhbC5oaWRkZW4gKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmV3IFRleHQoIERlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3Mud2hhdElzVGhlRmx1aWREZW5zaXR5U3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNCApXHJcbiAgICAgICAgICB9ICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5kZW5zaXR5QnVveWFuY3lDb21tb24ucmVnaXN0ZXIoICdEZW5zaXR5Q29udHJvbE5vZGUnLCBEZW5zaXR5Q29udHJvbE5vZGUgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQWVDLElBQUksUUFBUSxtQ0FBbUM7QUFFOUQsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBQ2xFLE9BQU9DLDRCQUE0QixNQUFNLHVDQUF1QztBQUNoRixPQUFPQyw4QkFBOEIsTUFBTSxzQ0FBc0M7QUFDakYsT0FBT0MsUUFBUSxNQUFNLHNCQUFzQjtBQUMzQyxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFFeEQsZUFBZSxNQUFNQyxrQkFBa0IsU0FBU0Qsa0JBQWtCLENBQVc7RUFDcEVFLFdBQVdBLENBQUVDLHNCQUEwQyxFQUFFQyxTQUFxQixFQUFFQyxVQUFnQixFQUFFQyxNQUFjLEVBQUc7SUFDeEgsTUFBTUMsV0FBVyxHQUFHUixRQUFRLENBQUNTLDBCQUEwQixDQUFFO01BQ3ZEQyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUU7TUFDTEgsTUFBTSxFQUFFQSxNQUFNO01BQ2RJLGFBQWEsRUFBRWIsNEJBQTRCLENBQUNjLDBCQUEwQjtNQUN0RUMsb0JBQW9CLEVBQUVkLDhCQUE4QixDQUFDZSw0Q0FBNEM7TUFDakdDLFFBQVEsRUFBRVgsc0JBQXNCO01BQ2hDWSxLQUFLLEVBQUUsSUFBSXRCLEtBQUssQ0FBRSxHQUFHLEVBQUUsRUFBRyxDQUFDO01BQzNCdUIsY0FBYyxFQUFFQyxRQUFRLElBQUlBLFFBQVEsQ0FBQ1IsT0FBTyxHQUFHLElBQUk7TUFDbkRTLGlCQUFpQixFQUFFVCxPQUFPLElBQUlWLFFBQVEsQ0FBQ1MsMEJBQTBCLENBQUU7UUFDakVDLE9BQU8sRUFBRUEsT0FBTyxHQUFHO01BQ3JCLENBQUUsQ0FBQztNQUNIVSxhQUFhLEVBQUVGLFFBQVEsSUFBSUEsUUFBUSxDQUFDRyxNQUFNO01BQzFDQyxhQUFhLEVBQUVKLFFBQVEsSUFBSUEsUUFBUSxDQUFDSyxNQUFNO01BQzFDakIsVUFBVSxFQUFFQSxVQUFVO01BQ3RCa0IsVUFBVSxFQUFFLENBQ1YsR0FBR25CLFNBQVMsRUFDWkcsV0FBVyxDQUNaLENBQUNpQixHQUFHLENBQUVQLFFBQVEsSUFBSTtRQUNqQixPQUFPO1VBQ0xRLEtBQUssRUFBRVIsUUFBUTtVQUNmUyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJL0IsSUFBSSxDQUFFc0IsUUFBUSxDQUFDVSxZQUFZLEVBQUU7WUFDakRDLElBQUksRUFBRTlCLDhCQUE4QixDQUFDK0IsbUJBQW1CO1lBQ3hEQyxRQUFRLEVBQUU7VUFDWixDQUFFLENBQUM7VUFDSEMsVUFBVSxFQUFHLEdBQUVkLFFBQVEsQ0FBQ2MsVUFBVztRQUNyQyxDQUFDO01BQ0gsQ0FBRSxDQUFDO01BQ0h4QixXQUFXLEVBQUVBLFdBQVc7TUFDeEJ5QixvQkFBb0IsRUFBRTtRQUNwQkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsYUFBYSxFQUFFO1VBQ2I7VUFDQUMsU0FBUyxFQUFFLElBQUkzQyxVQUFVLENBQUUsR0FBRyxFQUFFLEdBQUk7UUFDdEM7TUFDRixDQUFDO01BQ0Q0QyxlQUFlLEVBQUU7UUFDZkMsWUFBWSxFQUFFO01BQ2hCLENBQUM7TUFDREMsZUFBZSxFQUFFckIsUUFBUSxJQUFJO1FBQzNCLElBQUtBLFFBQVEsQ0FBQ0ssTUFBTSxFQUFHO1VBQ3JCLE9BQU8sSUFBSTNCLElBQUksQ0FBRUUsNEJBQTRCLENBQUMwQyxtQ0FBbUMsRUFBRTtZQUNqRlgsSUFBSSxFQUFFLElBQUlsQyxRQUFRLENBQUUsRUFBRztVQUN6QixDQUFFLENBQUM7UUFDTCxDQUFDLE1BQ0k7VUFDSCxPQUFPLElBQUk7UUFDYjtNQUNGO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBRSxxQkFBcUIsQ0FBQzRDLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRXZDLGtCQUFtQixDQUFDIn0=