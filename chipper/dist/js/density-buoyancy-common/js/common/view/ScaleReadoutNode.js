// Copyright 2019-2022, University of Colorado Boulder

/**
 * Shows a readout in front of a scale, for its measured mass/weight.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';
import DensityBuoyancyCommonConstants from '../DensityBuoyancyCommonConstants.js';
import { DisplayType } from '../model/Scale.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
export default class ScaleReadoutNode extends Node {
  constructor(mass, gravityProperty) {
    super({
      pickable: false
    });
    this.stringProperty = new DerivedProperty([mass.scaleForceInterpolatedProperty, gravityProperty, DensityBuoyancyCommonStrings.newtonsPatternStringProperty, DensityBuoyancyCommonStrings.kilogramsPatternStringProperty], (scaleForce, gravity, newtonsPattern, kilogramsPattern) => {
      if (mass.displayType === DisplayType.NEWTONS) {
        return StringUtils.fillIn(newtonsPattern, {
          newtons: Utils.toFixed(scaleForce, 2)
        });
      } else {
        return StringUtils.fillIn(kilogramsPattern, {
          kilograms: gravity.value > 0 ? Utils.toFixed(scaleForce / gravity.value, 2) : '-'
        });
      }
    });
    const readoutText = new Text(this.stringProperty, {
      font: new PhetFont({
        size: 16,
        weight: 'bold'
      }),
      maxWidth: 85
    });
    const readoutPanel = new Panel(readoutText, {
      cornerRadius: DensityBuoyancyCommonConstants.CORNER_RADIUS,
      xMargin: 2,
      yMargin: 2,
      fill: null,
      stroke: null
    });
    readoutPanel.localBoundsProperty.link(() => {
      readoutPanel.center = Vector2.ZERO;
    });
    this.addChild(readoutPanel);
    this.mass = mass;
  }

  /**
   * Releases references.
   */
  dispose() {
    this.stringProperty.dispose();
    super.dispose();
  }
}
densityBuoyancyCommon.register('ScaleReadoutNode', ScaleReadoutNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJTdHJpbmdVdGlscyIsIlBoZXRGb250IiwiTm9kZSIsIlRleHQiLCJQYW5lbCIsImRlbnNpdHlCdW95YW5jeUNvbW1vbiIsIkRlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3MiLCJEZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMiLCJEaXNwbGF5VHlwZSIsIkRlcml2ZWRQcm9wZXJ0eSIsIlNjYWxlUmVhZG91dE5vZGUiLCJjb25zdHJ1Y3RvciIsIm1hc3MiLCJncmF2aXR5UHJvcGVydHkiLCJwaWNrYWJsZSIsInN0cmluZ1Byb3BlcnR5Iiwic2NhbGVGb3JjZUludGVycG9sYXRlZFByb3BlcnR5IiwibmV3dG9uc1BhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsImtpbG9ncmFtc1BhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsInNjYWxlRm9yY2UiLCJncmF2aXR5IiwibmV3dG9uc1BhdHRlcm4iLCJraWxvZ3JhbXNQYXR0ZXJuIiwiZGlzcGxheVR5cGUiLCJORVdUT05TIiwiZmlsbEluIiwibmV3dG9ucyIsInRvRml4ZWQiLCJraWxvZ3JhbXMiLCJ2YWx1ZSIsInJlYWRvdXRUZXh0IiwiZm9udCIsInNpemUiLCJ3ZWlnaHQiLCJtYXhXaWR0aCIsInJlYWRvdXRQYW5lbCIsImNvcm5lclJhZGl1cyIsIkNPUk5FUl9SQURJVVMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImZpbGwiLCJzdHJva2UiLCJsb2NhbEJvdW5kc1Byb3BlcnR5IiwibGluayIsImNlbnRlciIsIlpFUk8iLCJhZGRDaGlsZCIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNjYWxlUmVhZG91dE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2hvd3MgYSByZWFkb3V0IGluIGZyb250IG9mIGEgc2NhbGUsIGZvciBpdHMgbWVhc3VyZWQgbWFzcy93ZWlnaHQuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IGRlbnNpdHlCdW95YW5jeUNvbW1vbiBmcm9tICcuLi8uLi9kZW5zaXR5QnVveWFuY3lDb21tb24uanMnO1xyXG5pbXBvcnQgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uU3RyaW5ncyBmcm9tICcuLi8uLi9EZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IERlbnNpdHlCdW95YW5jeUNvbW1vbkNvbnN0YW50cyBmcm9tICcuLi9EZW5zaXR5QnVveWFuY3lDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgU2NhbGUsIHsgRGlzcGxheVR5cGUgfSBmcm9tICcuLi9tb2RlbC9TY2FsZS5qcyc7XHJcbmltcG9ydCBHcmF2aXR5IGZyb20gJy4uL21vZGVsL0dyYXZpdHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NhbGVSZWFkb3V0Tm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgbWFzczogU2NhbGU7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgc3RyaW5nUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbWFzczogU2NhbGUsIGdyYXZpdHlQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8R3Jhdml0eT4gKSB7XHJcbiAgICBzdXBlcigge1xyXG4gICAgICBwaWNrYWJsZTogZmFsc2VcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnN0cmluZ1Byb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggW1xyXG4gICAgICBtYXNzLnNjYWxlRm9yY2VJbnRlcnBvbGF0ZWRQcm9wZXJ0eSxcclxuICAgICAgZ3Jhdml0eVByb3BlcnR5LFxyXG4gICAgICBEZW5zaXR5QnVveWFuY3lDb21tb25TdHJpbmdzLm5ld3RvbnNQYXR0ZXJuU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIERlbnNpdHlCdW95YW5jeUNvbW1vblN0cmluZ3Mua2lsb2dyYW1zUGF0dGVyblN0cmluZ1Byb3BlcnR5XHJcbiAgICBdLCAoIHNjYWxlRm9yY2UsIGdyYXZpdHksIG5ld3RvbnNQYXR0ZXJuLCBraWxvZ3JhbXNQYXR0ZXJuICkgPT4ge1xyXG4gICAgICBpZiAoIG1hc3MuZGlzcGxheVR5cGUgPT09IERpc3BsYXlUeXBlLk5FV1RPTlMgKSB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ1V0aWxzLmZpbGxJbiggbmV3dG9uc1BhdHRlcm4sIHtcclxuICAgICAgICAgIG5ld3RvbnM6IFV0aWxzLnRvRml4ZWQoIHNjYWxlRm9yY2UsIDIgKVxyXG4gICAgICAgIH0gKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nVXRpbHMuZmlsbEluKCBraWxvZ3JhbXNQYXR0ZXJuLCB7XHJcbiAgICAgICAgICBraWxvZ3JhbXM6IGdyYXZpdHkudmFsdWUgPiAwID8gVXRpbHMudG9GaXhlZCggc2NhbGVGb3JjZSAvIGdyYXZpdHkudmFsdWUsIDIgKSA6ICctJ1xyXG4gICAgICAgIH0gKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHJlYWRvdXRUZXh0ID0gbmV3IFRleHQoIHRoaXMuc3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCB7XHJcbiAgICAgICAgc2l6ZTogMTYsXHJcbiAgICAgICAgd2VpZ2h0OiAnYm9sZCdcclxuICAgICAgfSApLFxyXG4gICAgICBtYXhXaWR0aDogODVcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCByZWFkb3V0UGFuZWwgPSBuZXcgUGFuZWwoIHJlYWRvdXRUZXh0LCB7XHJcbiAgICAgIGNvcm5lclJhZGl1czogRGVuc2l0eUJ1b3lhbmN5Q29tbW9uQ29uc3RhbnRzLkNPUk5FUl9SQURJVVMsXHJcbiAgICAgIHhNYXJnaW46IDIsXHJcbiAgICAgIHlNYXJnaW46IDIsXHJcbiAgICAgIGZpbGw6IG51bGwsXHJcbiAgICAgIHN0cm9rZTogbnVsbFxyXG4gICAgfSApO1xyXG5cclxuICAgIHJlYWRvdXRQYW5lbC5sb2NhbEJvdW5kc1Byb3BlcnR5LmxpbmsoICgpID0+IHtcclxuICAgICAgcmVhZG91dFBhbmVsLmNlbnRlciA9IFZlY3RvcjIuWkVSTztcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCByZWFkb3V0UGFuZWwgKTtcclxuXHJcbiAgICB0aGlzLm1hc3MgPSBtYXNzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVsZWFzZXMgcmVmZXJlbmNlcy5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RyaW5nUHJvcGVydHkuZGlzcG9zZSgpO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmRlbnNpdHlCdW95YW5jeUNvbW1vbi5yZWdpc3RlciggJ1NjYWxlUmVhZG91dE5vZGUnLCBTY2FsZVJlYWRvdXROb2RlICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyw0QkFBNEIsTUFBTSx1Q0FBdUM7QUFDaEYsT0FBT0MsOEJBQThCLE1BQU0sc0NBQXNDO0FBQ2pGLFNBQWdCQyxXQUFXLFFBQVEsbUJBQW1CO0FBR3RELE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFFcEUsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU1IsSUFBSSxDQUFDO0VBTTFDUyxXQUFXQSxDQUFFQyxJQUFXLEVBQUVDLGVBQTJDLEVBQUc7SUFDN0UsS0FBSyxDQUFFO01BQ0xDLFFBQVEsRUFBRTtJQUNaLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUlOLGVBQWUsQ0FBRSxDQUN6Q0csSUFBSSxDQUFDSSw4QkFBOEIsRUFDbkNILGVBQWUsRUFDZlAsNEJBQTRCLENBQUNXLDRCQUE0QixFQUN6RFgsNEJBQTRCLENBQUNZLDhCQUE4QixDQUM1RCxFQUFFLENBQUVDLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxjQUFjLEVBQUVDLGdCQUFnQixLQUFNO01BQzlELElBQUtWLElBQUksQ0FBQ1csV0FBVyxLQUFLZixXQUFXLENBQUNnQixPQUFPLEVBQUc7UUFDOUMsT0FBT3hCLFdBQVcsQ0FBQ3lCLE1BQU0sQ0FBRUosY0FBYyxFQUFFO1VBQ3pDSyxPQUFPLEVBQUU1QixLQUFLLENBQUM2QixPQUFPLENBQUVSLFVBQVUsRUFBRSxDQUFFO1FBQ3hDLENBQUUsQ0FBQztNQUNMLENBQUMsTUFDSTtRQUNILE9BQU9uQixXQUFXLENBQUN5QixNQUFNLENBQUVILGdCQUFnQixFQUFFO1VBQzNDTSxTQUFTLEVBQUVSLE9BQU8sQ0FBQ1MsS0FBSyxHQUFHLENBQUMsR0FBRy9CLEtBQUssQ0FBQzZCLE9BQU8sQ0FBRVIsVUFBVSxHQUFHQyxPQUFPLENBQUNTLEtBQUssRUFBRSxDQUFFLENBQUMsR0FBRztRQUNsRixDQUFFLENBQUM7TUFDTDtJQUNGLENBQUUsQ0FBQztJQUVILE1BQU1DLFdBQVcsR0FBRyxJQUFJM0IsSUFBSSxDQUFFLElBQUksQ0FBQ1ksY0FBYyxFQUFFO01BQ2pEZ0IsSUFBSSxFQUFFLElBQUk5QixRQUFRLENBQUU7UUFDbEIrQixJQUFJLEVBQUUsRUFBRTtRQUNSQyxNQUFNLEVBQUU7TUFDVixDQUFFLENBQUM7TUFDSEMsUUFBUSxFQUFFO0lBQ1osQ0FBRSxDQUFDO0lBRUgsTUFBTUMsWUFBWSxHQUFHLElBQUkvQixLQUFLLENBQUUwQixXQUFXLEVBQUU7TUFDM0NNLFlBQVksRUFBRTdCLDhCQUE4QixDQUFDOEIsYUFBYTtNQUMxREMsT0FBTyxFQUFFLENBQUM7TUFDVkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsSUFBSSxFQUFFLElBQUk7TUFDVkMsTUFBTSxFQUFFO0lBQ1YsQ0FBRSxDQUFDO0lBRUhOLFlBQVksQ0FBQ08sbUJBQW1CLENBQUNDLElBQUksQ0FBRSxNQUFNO01BQzNDUixZQUFZLENBQUNTLE1BQU0sR0FBRzdDLE9BQU8sQ0FBQzhDLElBQUk7SUFDcEMsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxRQUFRLENBQUVYLFlBQWEsQ0FBQztJQUU3QixJQUFJLENBQUN2QixJQUFJLEdBQUdBLElBQUk7RUFDbEI7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCbUMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ2hDLGNBQWMsQ0FBQ2dDLE9BQU8sQ0FBQyxDQUFDO0lBRTdCLEtBQUssQ0FBQ0EsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBMUMscUJBQXFCLENBQUMyQyxRQUFRLENBQUUsa0JBQWtCLEVBQUV0QyxnQkFBaUIsQ0FBQyJ9