// Copyright 2020-2022, University of Colorado Boulder

/**
 * A custom slider thumb (that appears like our wavelength sliders) with a thin line on the actual slider track.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Line, Node, Path } from '../../../../scenery/js/imports.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
export default class PrecisionSliderThumb extends Node {
  constructor(providedOptions) {
    const options = optionize()({
      thumbFill: '#eee',
      thumbStroke: '#000',
      mainHeight: 15,
      taperHeight: 5,
      thumbWidth: 15,
      lineHeight: 5,
      touchXDilation: 5,
      touchYDilation: 10
    }, providedOptions);
    const precisionLine = new Line(0, -options.lineHeight / 2, 0, options.lineHeight / 2, {
      stroke: options.thumbStroke
    });
    const thumbShape = new Shape().moveTo(0, options.lineHeight / 2).lineToRelative(options.thumbWidth / 2, options.taperHeight).lineToRelative(0, options.mainHeight).lineToRelative(-options.thumbWidth, 0).lineToRelative(0, -options.mainHeight).close();
    const thumbPath = new Path(thumbShape, {
      fill: options.thumbFill,
      stroke: options.thumbStroke
    });
    options.children = [precisionLine, thumbPath];
    super(options);
    this.touchArea = this.localBounds.dilatedXY(options.touchXDilation, options.touchYDilation);
  }
}
densityBuoyancyCommon.register('PrecisionSliderThumb', PrecisionSliderThumb);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIkxpbmUiLCJOb2RlIiwiUGF0aCIsImRlbnNpdHlCdW95YW5jeUNvbW1vbiIsIlByZWNpc2lvblNsaWRlclRodW1iIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidGh1bWJGaWxsIiwidGh1bWJTdHJva2UiLCJtYWluSGVpZ2h0IiwidGFwZXJIZWlnaHQiLCJ0aHVtYldpZHRoIiwibGluZUhlaWdodCIsInRvdWNoWERpbGF0aW9uIiwidG91Y2hZRGlsYXRpb24iLCJwcmVjaXNpb25MaW5lIiwic3Ryb2tlIiwidGh1bWJTaGFwZSIsIm1vdmVUbyIsImxpbmVUb1JlbGF0aXZlIiwiY2xvc2UiLCJ0aHVtYlBhdGgiLCJmaWxsIiwiY2hpbGRyZW4iLCJ0b3VjaEFyZWEiLCJsb2NhbEJvdW5kcyIsImRpbGF0ZWRYWSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUHJlY2lzaW9uU2xpZGVyVGh1bWIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBjdXN0b20gc2xpZGVyIHRodW1iICh0aGF0IGFwcGVhcnMgbGlrZSBvdXIgd2F2ZWxlbmd0aCBzbGlkZXJzKSB3aXRoIGEgdGhpbiBsaW5lIG9uIHRoZSBhY3R1YWwgc2xpZGVyIHRyYWNrLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBUUGFpbnQsIExpbmUsIE5vZGUsIE5vZGVPcHRpb25zLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGRlbnNpdHlCdW95YW5jeUNvbW1vbiBmcm9tICcuLi8uLi9kZW5zaXR5QnVveWFuY3lDb21tb24uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB0aHVtYkZpbGw/OiBUUGFpbnQ7XHJcbiAgdGh1bWJTdHJva2U/OiBUUGFpbnQ7XHJcblxyXG4gIG1haW5IZWlnaHQ/OiBudW1iZXI7XHJcbiAgdGFwZXJIZWlnaHQ/OiBudW1iZXI7XHJcbiAgdGh1bWJXaWR0aD86IG51bWJlcjtcclxuICBsaW5lSGVpZ2h0PzogbnVtYmVyO1xyXG4gIHRvdWNoWERpbGF0aW9uPzogbnVtYmVyO1xyXG4gIHRvdWNoWURpbGF0aW9uPzogbnVtYmVyO1xyXG59O1xyXG5leHBvcnQgdHlwZSBQcmVjaXNpb25TbGlkZXJUaHVtYk9wdGlvbnMgPSBOb2RlT3B0aW9ucyAmIFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlY2lzaW9uU2xpZGVyVGh1bWIgZXh0ZW5kcyBOb2RlIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IFByZWNpc2lvblNsaWRlclRodW1iT3B0aW9ucyApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UHJlY2lzaW9uU2xpZGVyVGh1bWJPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgdGh1bWJGaWxsOiAnI2VlZScsXHJcbiAgICAgIHRodW1iU3Ryb2tlOiAnIzAwMCcsXHJcbiAgICAgIG1haW5IZWlnaHQ6IDE1LFxyXG4gICAgICB0YXBlckhlaWdodDogNSxcclxuICAgICAgdGh1bWJXaWR0aDogMTUsXHJcbiAgICAgIGxpbmVIZWlnaHQ6IDUsXHJcbiAgICAgIHRvdWNoWERpbGF0aW9uOiA1LFxyXG4gICAgICB0b3VjaFlEaWxhdGlvbjogMTBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHByZWNpc2lvbkxpbmUgPSBuZXcgTGluZSggMCwgLW9wdGlvbnMubGluZUhlaWdodCAvIDIsIDAsIG9wdGlvbnMubGluZUhlaWdodCAvIDIsIHtcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLnRodW1iU3Ryb2tlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgdGh1bWJTaGFwZSA9IG5ldyBTaGFwZSgpLm1vdmVUbyggMCwgb3B0aW9ucy5saW5lSGVpZ2h0IC8gMiApXHJcbiAgICAgIC5saW5lVG9SZWxhdGl2ZSggb3B0aW9ucy50aHVtYldpZHRoIC8gMiwgb3B0aW9ucy50YXBlckhlaWdodCApXHJcbiAgICAgIC5saW5lVG9SZWxhdGl2ZSggMCwgb3B0aW9ucy5tYWluSGVpZ2h0IClcclxuICAgICAgLmxpbmVUb1JlbGF0aXZlKCAtb3B0aW9ucy50aHVtYldpZHRoLCAwIClcclxuICAgICAgLmxpbmVUb1JlbGF0aXZlKCAwLCAtb3B0aW9ucy5tYWluSGVpZ2h0IClcclxuICAgICAgLmNsb3NlKCk7XHJcblxyXG4gICAgY29uc3QgdGh1bWJQYXRoID0gbmV3IFBhdGgoIHRodW1iU2hhcGUsIHtcclxuICAgICAgZmlsbDogb3B0aW9ucy50aHVtYkZpbGwsXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy50aHVtYlN0cm9rZVxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbXHJcbiAgICAgIHByZWNpc2lvbkxpbmUsXHJcbiAgICAgIHRodW1iUGF0aFxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMudG91Y2hBcmVhID0gdGhpcy5sb2NhbEJvdW5kcy5kaWxhdGVkWFkoIG9wdGlvbnMudG91Y2hYRGlsYXRpb24sIG9wdGlvbnMudG91Y2hZRGlsYXRpb24gKTtcclxuICB9XHJcbn1cclxuXHJcbmRlbnNpdHlCdW95YW5jeUNvbW1vbi5yZWdpc3RlciggJ1ByZWNpc2lvblNsaWRlclRodW1iJywgUHJlY2lzaW9uU2xpZGVyVGh1bWIgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsU0FBUyxNQUFNLHVDQUF1QztBQUM3RCxTQUFpQkMsSUFBSSxFQUFFQyxJQUFJLEVBQWVDLElBQUksUUFBUSxtQ0FBbUM7QUFDekYsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBZWxFLGVBQWUsTUFBTUMsb0JBQW9CLFNBQVNILElBQUksQ0FBQztFQUM5Q0ksV0FBV0EsQ0FBRUMsZUFBNkMsRUFBRztJQUNsRSxNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBd0QsQ0FBQyxDQUFFO01BQ2xGUyxTQUFTLEVBQUUsTUFBTTtNQUNqQkMsV0FBVyxFQUFFLE1BQU07TUFDbkJDLFVBQVUsRUFBRSxFQUFFO01BQ2RDLFdBQVcsRUFBRSxDQUFDO01BQ2RDLFVBQVUsRUFBRSxFQUFFO01BQ2RDLFVBQVUsRUFBRSxDQUFDO01BQ2JDLGNBQWMsRUFBRSxDQUFDO01BQ2pCQyxjQUFjLEVBQUU7SUFDbEIsQ0FBQyxFQUFFVCxlQUFnQixDQUFDO0lBRXBCLE1BQU1VLGFBQWEsR0FBRyxJQUFJaEIsSUFBSSxDQUFFLENBQUMsRUFBRSxDQUFDTyxPQUFPLENBQUNNLFVBQVUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFTixPQUFPLENBQUNNLFVBQVUsR0FBRyxDQUFDLEVBQUU7TUFDckZJLE1BQU0sRUFBRVYsT0FBTyxDQUFDRTtJQUNsQixDQUFFLENBQUM7SUFFSCxNQUFNUyxVQUFVLEdBQUcsSUFBSXBCLEtBQUssQ0FBQyxDQUFDLENBQUNxQixNQUFNLENBQUUsQ0FBQyxFQUFFWixPQUFPLENBQUNNLFVBQVUsR0FBRyxDQUFFLENBQUMsQ0FDL0RPLGNBQWMsQ0FBRWIsT0FBTyxDQUFDSyxVQUFVLEdBQUcsQ0FBQyxFQUFFTCxPQUFPLENBQUNJLFdBQVksQ0FBQyxDQUM3RFMsY0FBYyxDQUFFLENBQUMsRUFBRWIsT0FBTyxDQUFDRyxVQUFXLENBQUMsQ0FDdkNVLGNBQWMsQ0FBRSxDQUFDYixPQUFPLENBQUNLLFVBQVUsRUFBRSxDQUFFLENBQUMsQ0FDeENRLGNBQWMsQ0FBRSxDQUFDLEVBQUUsQ0FBQ2IsT0FBTyxDQUFDRyxVQUFXLENBQUMsQ0FDeENXLEtBQUssQ0FBQyxDQUFDO0lBRVYsTUFBTUMsU0FBUyxHQUFHLElBQUlwQixJQUFJLENBQUVnQixVQUFVLEVBQUU7TUFDdENLLElBQUksRUFBRWhCLE9BQU8sQ0FBQ0MsU0FBUztNQUN2QlMsTUFBTSxFQUFFVixPQUFPLENBQUNFO0lBQ2xCLENBQUUsQ0FBQztJQUVIRixPQUFPLENBQUNpQixRQUFRLEdBQUcsQ0FDakJSLGFBQWEsRUFDYk0sU0FBUyxDQUNWO0lBRUQsS0FBSyxDQUFFZixPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDa0IsU0FBUyxHQUFHLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxTQUFTLENBQUVwQixPQUFPLENBQUNPLGNBQWMsRUFBRVAsT0FBTyxDQUFDUSxjQUFlLENBQUM7RUFDL0Y7QUFDRjtBQUVBWixxQkFBcUIsQ0FBQ3lCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRXhCLG9CQUFxQixDQUFDIn0=