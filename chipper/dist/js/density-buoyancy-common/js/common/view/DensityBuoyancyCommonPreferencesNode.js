// Copyright 2023, University of Colorado Boulder

/**
 * DensityBuoyancyCommonPreferencesNode is the user interface for sim-specific preferences, accessed via the Preferences dialog.
 * These preferences are global, and affect all screens.
 *
 * The Preferences dialog is created on demand by joist, using a PhetioCapsule. So DensityBuoyancyCommonPreferencesNode and its
 * subcomponents must implement dispose.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { VBox } from '../../../../scenery/js/imports.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonPreferences from '../model/DensityBuoyancyCommonPreferences.js';
import VolumeUnitsControl from './VolumeUnitsControl.js';
export default class DensityBuoyancyCommonPreferencesNode extends VBox {
  constructor(providedOptions) {
    const options = optionize()({
      align: 'left',
      spacing: 20,
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);
    const beakerUnitsControl = new VolumeUnitsControl(DensityBuoyancyCommonPreferences.volumeUnitsProperty, {
      tandem: options.tandem.createTandem('beakerUnitsControl')
    });
    options.children = [beakerUnitsControl];
    super(options);
    this.disposeDensityBuoyancyCommonPreferencesNode = () => {
      beakerUnitsControl.dispose();
    };
  }
  dispose() {
    this.disposeDensityBuoyancyCommonPreferencesNode();
    super.dispose();
  }
}
densityBuoyancyCommon.register('DensityBuoyancyCommonPreferencesNode', DensityBuoyancyCommonPreferencesNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJWQm94IiwiZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIiwiRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUHJlZmVyZW5jZXMiLCJWb2x1bWVVbml0c0NvbnRyb2wiLCJEZW5zaXR5QnVveWFuY3lDb21tb25QcmVmZXJlbmNlc05vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJhbGlnbiIsInNwYWNpbmciLCJwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQiLCJiZWFrZXJVbml0c0NvbnRyb2wiLCJ2b2x1bWVVbml0c1Byb3BlcnR5IiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiY2hpbGRyZW4iLCJkaXNwb3NlRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUHJlZmVyZW5jZXNOb2RlIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUHJlZmVyZW5jZXNOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEZW5zaXR5QnVveWFuY3lDb21tb25QcmVmZXJlbmNlc05vZGUgaXMgdGhlIHVzZXIgaW50ZXJmYWNlIGZvciBzaW0tc3BlY2lmaWMgcHJlZmVyZW5jZXMsIGFjY2Vzc2VkIHZpYSB0aGUgUHJlZmVyZW5jZXMgZGlhbG9nLlxyXG4gKiBUaGVzZSBwcmVmZXJlbmNlcyBhcmUgZ2xvYmFsLCBhbmQgYWZmZWN0IGFsbCBzY3JlZW5zLlxyXG4gKlxyXG4gKiBUaGUgUHJlZmVyZW5jZXMgZGlhbG9nIGlzIGNyZWF0ZWQgb24gZGVtYW5kIGJ5IGpvaXN0LCB1c2luZyBhIFBoZXRpb0NhcHN1bGUuIFNvIERlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzTm9kZSBhbmQgaXRzXHJcbiAqIHN1YmNvbXBvbmVudHMgbXVzdCBpbXBsZW1lbnQgZGlzcG9zZS5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBWQm94LCBWQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBkZW5zaXR5QnVveWFuY3lDb21tb24gZnJvbSAnLi4vLi4vZGVuc2l0eUJ1b3lhbmN5Q29tbW9uLmpzJztcclxuaW1wb3J0IERlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzIGZyb20gJy4uL21vZGVsL0RlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzLmpzJztcclxuaW1wb3J0IFZvbHVtZVVuaXRzQ29udHJvbCBmcm9tICcuL1ZvbHVtZVVuaXRzQ29udHJvbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIERlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxWQm94T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVuc2l0eUJ1b3lhbmN5Q29tbW9uUHJlZmVyZW5jZXNOb2RlIGV4dGVuZHMgVkJveCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZURlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IERlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxEZW5zaXR5QnVveWFuY3lDb21tb25QcmVmZXJlbmNlc05vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgVkJveE9wdGlvbnM+KCkoIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogMjAsXHJcbiAgICAgIHBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZDogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGJlYWtlclVuaXRzQ29udHJvbCA9IG5ldyBWb2x1bWVVbml0c0NvbnRyb2woIERlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzLnZvbHVtZVVuaXRzUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdiZWFrZXJVbml0c0NvbnRyb2wnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gW1xyXG4gICAgICBiZWFrZXJVbml0c0NvbnRyb2xcclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VEZW5zaXR5QnVveWFuY3lDb21tb25QcmVmZXJlbmNlc05vZGUgPSAoKSA9PiB7XHJcbiAgICAgIGJlYWtlclVuaXRzQ29udHJvbC5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VEZW5zaXR5QnVveWFuY3lDb21tb25QcmVmZXJlbmNlc05vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmRlbnNpdHlCdW95YW5jeUNvbW1vbi5yZWdpc3RlciggJ0RlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzTm9kZScsIERlbnNpdHlCdW95YW5jeUNvbW1vblByZWZlcmVuY2VzTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLFNBQVNDLElBQUksUUFBcUIsbUNBQW1DO0FBQ3JFLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyxnQ0FBZ0MsTUFBTSw4Q0FBOEM7QUFDM0YsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBTXhELGVBQWUsTUFBTUMsb0NBQW9DLFNBQVNKLElBQUksQ0FBQztFQUk5REssV0FBV0EsQ0FBRUMsZUFBNEQsRUFBRztJQUVqRixNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBd0UsQ0FBQyxDQUFFO01BQ2xHUyxLQUFLLEVBQUUsTUFBTTtNQUNiQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxpQ0FBaUMsRUFBRTtJQUNyQyxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsTUFBTUssa0JBQWtCLEdBQUcsSUFBSVIsa0JBQWtCLENBQUVELGdDQUFnQyxDQUFDVSxtQkFBbUIsRUFBRTtNQUN2R0MsTUFBTSxFQUFFTixPQUFPLENBQUNNLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLG9CQUFxQjtJQUM1RCxDQUFFLENBQUM7SUFFSFAsT0FBTyxDQUFDUSxRQUFRLEdBQUcsQ0FDakJKLGtCQUFrQixDQUNuQjtJQUVELEtBQUssQ0FBRUosT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ1MsMkNBQTJDLEdBQUcsTUFBTTtNQUN2REwsa0JBQWtCLENBQUNNLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0QsMkNBQTJDLENBQUMsQ0FBQztJQUNsRCxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWhCLHFCQUFxQixDQUFDaUIsUUFBUSxDQUFFLHNDQUFzQyxFQUFFZCxvQ0FBcUMsQ0FBQyJ9