// Copyright 2022, University of Colorado Boulder

/**
 * Mix-in for modal Density/Buoyancy models, where callbacks will create/position masses for each set.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import DensityBuoyancyModel from '../../common/model/DensityBuoyancyModel.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
export default class BlockSetModel extends DensityBuoyancyModel {
  constructor(options) {
    super(options);
    this.BlockSet = options.BlockSet;
    const tandem = options.tandem;

    // {Property.<BlockSet>}
    this.blockSetProperty = new EnumerationProperty(options.initialMode, {
      tandem: tandem.createTandem('blockSets').createTandem('blockSetProperty')
    });
    this.createMassesCallback = options.createMassesCallback;
    this.regenerateMassesCallback = options.regenerateMassesCallback;
    this.positionMassesCallback = options.positionMassesCallback;
    this.blockSetToMassesMap = new Map();

    // Create and position masses on startup
    options.BlockSet.values.forEach(blockSet => {
      this.blockSetToMassesMap.set(blockSet, this.createMassesCallback(this, blockSet));

      // Make them invisible by default, they will be made visible when their blockSet is up
      this.blockSetToMassesMap.get(blockSet).forEach(mass => {
        mass.internalVisibleProperty.value = false;
        this.availableMasses.push(mass);
      });
      this.positionMasses(blockSet);
    });

    // This instance lives for the lifetime of the simulation, so we don't need to remove this listener
    this.blockSetProperty.link((blockSet, oldBlockSet) => {
      if (oldBlockSet) {
        this.blockSetToMassesMap.get(oldBlockSet).forEach(mass => {
          mass.internalVisibleProperty.value = false;
        });
      }
      this.blockSetToMassesMap.get(blockSet).forEach(mass => {
        mass.internalVisibleProperty.value = true;
      });
    });
  }

  /**
   * Positions masses.
   */
  positionMasses(blockSet) {
    this.positionMassesCallback(this, blockSet, this.blockSetToMassesMap.get(blockSet));
  }

  /**
   * Regenerates the masses for a specific blockSet.
   */
  regenerate(blockSet) {
    this.regenerateMassesCallback(this, blockSet, this.blockSetToMassesMap.get(blockSet));
    this.positionMasses(blockSet);
  }

  /**
   * Resets values to their original state
   */
  reset() {
    this.blockSetProperty.reset();

    // Reset every available mass.
    this.BlockSet.values.forEach(blockSet => this.blockSetToMassesMap.get(blockSet).forEach(mass => mass.reset()));
    super.reset();

    // Reposition AFTER the reset
    this.BlockSet.values.forEach(blockSet => this.positionMasses(blockSet));

    // Reset the previous positions on masses
    this.BlockSet.values.forEach(blockSet => this.blockSetToMassesMap.get(blockSet).forEach(mass => {
      this.engine.bodySynchronizePrevious(mass.body);
    }));

    // Rehandle visibility, since we reset them
    this.BlockSet.values.forEach(blockSet => this.blockSetToMassesMap.get(blockSet).forEach(mass => {
      mass.internalVisibleProperty.value = blockSet === this.blockSetProperty.value;
    }));
  }
}
densityBuoyancyCommon.register('BlockSetModel', BlockSetModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,