// Copyright 2022, University of Colorado Boulder

/**
 * Abstract base type for handling physics engines
 *
 * PhysicsEngine.Body represents an opaque object reference type that is specific to the engine it was created from.
 * These can be created with the create* methods, and are passed in to many methods.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
export default class PhysicsEngine {
  // Engines typically work in fixed-time steps, this is how far we are in the
  // display from the "previous" step (0) to the "next" step (1).

  constructor() {
    this.interpolationRatio = 1;
  }

  /**
   * Steps forward in time.
   */

  /**
   * Adds a body into the engine, so that it will be tracked during the step.
   */

  /**
   * Removes a body from the engine, so that it will not be tracked during the step anymore.
   */

  /**
   * Sets the mass of a body (and whether it can rotate, which for some engines needs to be set at the same time).
   */

  /**
   * Sets the provided matrix to the current transformation matrix of the body (to reduce allocations)
   */

  /**
   * Sets the provided matrix to the current transformation matrix of the body (to reduce allocations)
   */

  /**
   * Sets the position of a body.
   */

  /**
   * Sets the rotation of a body.
   */

  /**
   * Returns the velocity of a body.
   */

  /**
   * Sets the velocity of a body.
   */

  /**
   * Applies a given force to a body (should be in the post-step listener ideally)
   */

  /**
   * Returns the applied contact force computed in the last step.
   */

  /**
   * Returns the applied contact force computed in the last step (as a force on A from B).
   */

  /**
   * Resets the contact forces that have happened on a body to 0 after measurement.
   */

  /**
   * Returns a serialized form of a body
   */

  /**
   * Applies a given state object to a body.
   */

  /**
   * Returns a serialized form of a body
   */

  /**
   * Sets the previous position of a body to the current position
   */

  /**
   * Creates a (static) ground body with the given vertices.
   */

  /**
   * Creates a (static) barrier body with the given vertices.
   */

  /**
   * Creates a (dynamic) box body, with the origin at the center of the box.
   */

  /**
   * Updates the width/height of a box body.
   */

  /**
   * Creates a (dynamic) body, with the origin at the centroid.
   */

  /**
   * Updates the vertices of a dynamic vertex-based body.
   */

  /**
   * Adds a listener to be called after each internal step.
   */

  /**
   * Removes a listener to be called after each internal step.
   */

  /**
   * Adds in a pointer constraint so that the body's current point at the position will stay at the position
   * (if the body is getting dragged).
   */

  /**
   * Updates a pointer constraint so that the body will essentially be dragged to the new position.
   */

  /**
   * Removes a pointer constraint.
   */
}

// NOTE: if we're using something other than P2, we'll need to improve this typing

densityBuoyancyCommon.register('PhysicsEngine', PhysicsEngine);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,