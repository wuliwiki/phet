// Copyright 2021-2023, University of Colorado Boulder

/**
 * A cuboid with the same dimension in all directions (allows adjusting volume on the fly)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Bounds3 from '../../../../dot/js/Bounds3.js';
import Matrix3 from '../../../../dot/js/Matrix3.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import Cuboid from './Cuboid.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class Cube extends Cuboid {
  constructor(engine, volume, providedConfig) {
    let config = optionize()({
      adjustVolumeOnMassChanged: false,
      volumePropertyOptions: {
        phetioReadOnly: false
      }
    }, providedConfig);
    if (config.adjustVolumeOnMassChanged) {
      config = combineOptions({
        massPropertyOptions: {
          phetioReadOnly: false
        }
      }, config);
    }
    super(engine, Cube.boundsFromVolume(volume), config);

    // Hook volumeProperty to adjust the size
    this.volumeProperty.lazyLink(volume => {
      if (!this.volumeLock) {
        this.updateSize(Cube.boundsFromVolume(volume));
      }
    });
    if (config.adjustVolumeOnMassChanged) {
      // Hook massProperty to adjust the size
      this.massProperty.lazyLink(mass => {
        if (!this.massLock) {
          this.updateSize(Cube.boundsFromVolume(mass / this.materialProperty.value.density));
        }
      });
    }
  }

  /**
   * Returns the Bounds3 for a Cube that would be used for a specific volume (cubical).
   */
  static boundsFromVolume(volume) {
    const halfSideLength = Math.pow(volume, 1 / 3) / 2;
    return new Bounds3(-halfSideLength, -halfSideLength, -halfSideLength, halfSideLength, halfSideLength, halfSideLength);
  }

  /**
   * Creates a Cube with a defined volume
   */
  static createWithVolume(engine, material, position, volume, options) {
    return new Cube(engine, volume, combineOptions({
      matrix: Matrix3.translation(position.x, position.y),
      material: material
    }, options));
  }

  /**
   * Creates a Cube with a defined volume
   */
  static createWithMass(engine, material, position, mass, options) {
    return Cube.createWithVolume(engine, material, position, mass / material.density, options);
  }
}
densityBuoyancyCommon.register('Cube', Cube);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMzIiwiTWF0cml4MyIsImRlbnNpdHlCdW95YW5jeUNvbW1vbiIsIkN1Ym9pZCIsIm9wdGlvbml6ZSIsImNvbWJpbmVPcHRpb25zIiwiQ3ViZSIsImNvbnN0cnVjdG9yIiwiZW5naW5lIiwidm9sdW1lIiwicHJvdmlkZWRDb25maWciLCJjb25maWciLCJhZGp1c3RWb2x1bWVPbk1hc3NDaGFuZ2VkIiwidm9sdW1lUHJvcGVydHlPcHRpb25zIiwicGhldGlvUmVhZE9ubHkiLCJtYXNzUHJvcGVydHlPcHRpb25zIiwiYm91bmRzRnJvbVZvbHVtZSIsInZvbHVtZVByb3BlcnR5IiwibGF6eUxpbmsiLCJ2b2x1bWVMb2NrIiwidXBkYXRlU2l6ZSIsIm1hc3NQcm9wZXJ0eSIsIm1hc3MiLCJtYXNzTG9jayIsIm1hdGVyaWFsUHJvcGVydHkiLCJ2YWx1ZSIsImRlbnNpdHkiLCJoYWxmU2lkZUxlbmd0aCIsIk1hdGgiLCJwb3ciLCJjcmVhdGVXaXRoVm9sdW1lIiwibWF0ZXJpYWwiLCJwb3NpdGlvbiIsIm9wdGlvbnMiLCJtYXRyaXgiLCJ0cmFuc2xhdGlvbiIsIngiLCJ5IiwiY3JlYXRlV2l0aE1hc3MiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1YmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBjdWJvaWQgd2l0aCB0aGUgc2FtZSBkaW1lbnNpb24gaW4gYWxsIGRpcmVjdGlvbnMgKGFsbG93cyBhZGp1c3Rpbmcgdm9sdW1lIG9uIHRoZSBmbHkpXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMy5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgZGVuc2l0eUJ1b3lhbmN5Q29tbW9uIGZyb20gJy4uLy4uL2RlbnNpdHlCdW95YW5jeUNvbW1vbi5qcyc7XHJcbmltcG9ydCBDdWJvaWQsIHsgQ3Vib2lkT3B0aW9ucyB9IGZyb20gJy4vQ3Vib2lkLmpzJztcclxuaW1wb3J0IFBoeXNpY3NFbmdpbmUgZnJvbSAnLi9QaHlzaWNzRW5naW5lLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgTWF0ZXJpYWwgZnJvbSAnLi9NYXRlcmlhbC5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgYWRqdXN0Vm9sdW1lT25NYXNzQ2hhbmdlZD86IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBDdWJlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgQ3Vib2lkT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1YmUgZXh0ZW5kcyBDdWJvaWQge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZW5naW5lOiBQaHlzaWNzRW5naW5lLCB2b2x1bWU6IG51bWJlciwgcHJvdmlkZWRDb25maWc6IEN1YmVPcHRpb25zICkge1xyXG5cclxuICAgIGxldCBjb25maWcgPSBvcHRpb25pemU8Q3ViZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBDdWJvaWRPcHRpb25zPigpKCB7XHJcbiAgICAgIGFkanVzdFZvbHVtZU9uTWFzc0NoYW5nZWQ6IGZhbHNlLFxyXG5cclxuICAgICAgdm9sdW1lUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgcGhldGlvUmVhZE9ubHk6IGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkQ29uZmlnICk7XHJcblxyXG4gICAgaWYgKCBjb25maWcuYWRqdXN0Vm9sdW1lT25NYXNzQ2hhbmdlZCApIHtcclxuICAgICAgY29uZmlnID0gY29tYmluZU9wdGlvbnM8dHlwZW9mIGNvbmZpZz4oIHtcclxuICAgICAgICBtYXNzUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgICBwaGV0aW9SZWFkT25seTogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgIH0sIGNvbmZpZyApO1xyXG4gICAgfVxyXG5cclxuICAgIHN1cGVyKCBlbmdpbmUsIEN1YmUuYm91bmRzRnJvbVZvbHVtZSggdm9sdW1lICksIGNvbmZpZyApO1xyXG5cclxuICAgIC8vIEhvb2sgdm9sdW1lUHJvcGVydHkgdG8gYWRqdXN0IHRoZSBzaXplXHJcbiAgICB0aGlzLnZvbHVtZVByb3BlcnR5LmxhenlMaW5rKCB2b2x1bWUgPT4ge1xyXG4gICAgICBpZiAoICF0aGlzLnZvbHVtZUxvY2sgKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTaXplKCBDdWJlLmJvdW5kc0Zyb21Wb2x1bWUoIHZvbHVtZSApICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICBpZiAoIGNvbmZpZy5hZGp1c3RWb2x1bWVPbk1hc3NDaGFuZ2VkICkge1xyXG4gICAgICAvLyBIb29rIG1hc3NQcm9wZXJ0eSB0byBhZGp1c3QgdGhlIHNpemVcclxuICAgICAgdGhpcy5tYXNzUHJvcGVydHkubGF6eUxpbmsoIG1hc3MgPT4ge1xyXG4gICAgICAgIGlmICggIXRoaXMubWFzc0xvY2sgKSB7XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoIEN1YmUuYm91bmRzRnJvbVZvbHVtZSggbWFzcyAvIHRoaXMubWF0ZXJpYWxQcm9wZXJ0eS52YWx1ZS5kZW5zaXR5ICkgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIEJvdW5kczMgZm9yIGEgQ3ViZSB0aGF0IHdvdWxkIGJlIHVzZWQgZm9yIGEgc3BlY2lmaWMgdm9sdW1lIChjdWJpY2FsKS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGJvdW5kc0Zyb21Wb2x1bWUoIHZvbHVtZTogbnVtYmVyICk6IEJvdW5kczMge1xyXG4gICAgY29uc3QgaGFsZlNpZGVMZW5ndGggPSBNYXRoLnBvdyggdm9sdW1lLCAxIC8gMyApIC8gMjtcclxuICAgIHJldHVybiBuZXcgQm91bmRzMyhcclxuICAgICAgLWhhbGZTaWRlTGVuZ3RoLFxyXG4gICAgICAtaGFsZlNpZGVMZW5ndGgsXHJcbiAgICAgIC1oYWxmU2lkZUxlbmd0aCxcclxuICAgICAgaGFsZlNpZGVMZW5ndGgsXHJcbiAgICAgIGhhbGZTaWRlTGVuZ3RoLFxyXG4gICAgICBoYWxmU2lkZUxlbmd0aFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBDdWJlIHdpdGggYSBkZWZpbmVkIHZvbHVtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlV2l0aFZvbHVtZSggZW5naW5lOiBQaHlzaWNzRW5naW5lLCBtYXRlcmlhbDogTWF0ZXJpYWwsIHBvc2l0aW9uOiBWZWN0b3IyLCB2b2x1bWU6IG51bWJlciwgb3B0aW9ucz86IFN0cmljdE9taXQ8Q3ViZU9wdGlvbnMsICdtYXRyaXgnIHwgJ21hdGVyaWFsJz4gKTogQ3ViZSB7XHJcbiAgICByZXR1cm4gbmV3IEN1YmUoIGVuZ2luZSwgdm9sdW1lLCBjb21iaW5lT3B0aW9uczxDdWJlT3B0aW9ucz4oIHtcclxuICAgICAgbWF0cml4OiBNYXRyaXgzLnRyYW5zbGF0aW9uKCBwb3NpdGlvbi54LCBwb3NpdGlvbi55ICksXHJcbiAgICAgIG1hdGVyaWFsOiBtYXRlcmlhbFxyXG4gICAgfSwgb3B0aW9ucyApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgQ3ViZSB3aXRoIGEgZGVmaW5lZCB2b2x1bWVcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZVdpdGhNYXNzKCBlbmdpbmU6IFBoeXNpY3NFbmdpbmUsIG1hdGVyaWFsOiBNYXRlcmlhbCwgcG9zaXRpb246IFZlY3RvcjIsIG1hc3M6IG51bWJlciwgb3B0aW9ucz86IFN0cmljdE9taXQ8Q3ViZU9wdGlvbnMsICdtYXRyaXgnIHwgJ21hdGVyaWFsJz4gKTogQ3ViZSB7XHJcbiAgICByZXR1cm4gQ3ViZS5jcmVhdGVXaXRoVm9sdW1lKCBlbmdpbmUsIG1hdGVyaWFsLCBwb3NpdGlvbiwgbWFzcyAvIG1hdGVyaWFsLmRlbnNpdHksIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmRlbnNpdHlCdW95YW5jeUNvbW1vbi5yZWdpc3RlciggJ0N1YmUnLCBDdWJlICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBRW5ELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBQ2xFLE9BQU9DLE1BQU0sTUFBeUIsYUFBYTtBQUVuRCxPQUFPQyxTQUFTLElBQUlDLGNBQWMsUUFBUSx1Q0FBdUM7QUFVakYsZUFBZSxNQUFNQyxJQUFJLFNBQVNILE1BQU0sQ0FBQztFQUNoQ0ksV0FBV0EsQ0FBRUMsTUFBcUIsRUFBRUMsTUFBYyxFQUFFQyxjQUEyQixFQUFHO0lBRXZGLElBQUlDLE1BQU0sR0FBR1AsU0FBUyxDQUEwQyxDQUFDLENBQUU7TUFDakVRLHlCQUF5QixFQUFFLEtBQUs7TUFFaENDLHFCQUFxQixFQUFFO1FBQ3JCQyxjQUFjLEVBQUU7TUFDbEI7SUFDRixDQUFDLEVBQUVKLGNBQWUsQ0FBQztJQUVuQixJQUFLQyxNQUFNLENBQUNDLHlCQUF5QixFQUFHO01BQ3RDRCxNQUFNLEdBQUdOLGNBQWMsQ0FBaUI7UUFDdENVLG1CQUFtQixFQUFFO1VBQ25CRCxjQUFjLEVBQUU7UUFDbEI7TUFDRixDQUFDLEVBQUVILE1BQU8sQ0FBQztJQUNiO0lBRUEsS0FBSyxDQUFFSCxNQUFNLEVBQUVGLElBQUksQ0FBQ1UsZ0JBQWdCLENBQUVQLE1BQU8sQ0FBQyxFQUFFRSxNQUFPLENBQUM7O0lBRXhEO0lBQ0EsSUFBSSxDQUFDTSxjQUFjLENBQUNDLFFBQVEsQ0FBRVQsTUFBTSxJQUFJO01BQ3RDLElBQUssQ0FBQyxJQUFJLENBQUNVLFVBQVUsRUFBRztRQUN0QixJQUFJLENBQUNDLFVBQVUsQ0FBRWQsSUFBSSxDQUFDVSxnQkFBZ0IsQ0FBRVAsTUFBTyxDQUFFLENBQUM7TUFDcEQ7SUFDRixDQUFFLENBQUM7SUFFSCxJQUFLRSxNQUFNLENBQUNDLHlCQUF5QixFQUFHO01BQ3RDO01BQ0EsSUFBSSxDQUFDUyxZQUFZLENBQUNILFFBQVEsQ0FBRUksSUFBSSxJQUFJO1FBQ2xDLElBQUssQ0FBQyxJQUFJLENBQUNDLFFBQVEsRUFBRztVQUNwQixJQUFJLENBQUNILFVBQVUsQ0FBRWQsSUFBSSxDQUFDVSxnQkFBZ0IsQ0FBRU0sSUFBSSxHQUFHLElBQUksQ0FBQ0UsZ0JBQWdCLENBQUNDLEtBQUssQ0FBQ0MsT0FBUSxDQUFFLENBQUM7UUFDeEY7TUFDRixDQUFFLENBQUM7SUFDTDtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE9BQWNWLGdCQUFnQkEsQ0FBRVAsTUFBYyxFQUFZO0lBQ3hELE1BQU1rQixjQUFjLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFFcEIsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFFLENBQUMsR0FBRyxDQUFDO0lBQ3BELE9BQU8sSUFBSVQsT0FBTyxDQUNoQixDQUFDMkIsY0FBYyxFQUNmLENBQUNBLGNBQWMsRUFDZixDQUFDQSxjQUFjLEVBQ2ZBLGNBQWMsRUFDZEEsY0FBYyxFQUNkQSxjQUNGLENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjRyxnQkFBZ0JBLENBQUV0QixNQUFxQixFQUFFdUIsUUFBa0IsRUFBRUMsUUFBaUIsRUFBRXZCLE1BQWMsRUFBRXdCLE9BQXdELEVBQVM7SUFDN0ssT0FBTyxJQUFJM0IsSUFBSSxDQUFFRSxNQUFNLEVBQUVDLE1BQU0sRUFBRUosY0FBYyxDQUFlO01BQzVENkIsTUFBTSxFQUFFakMsT0FBTyxDQUFDa0MsV0FBVyxDQUFFSCxRQUFRLENBQUNJLENBQUMsRUFBRUosUUFBUSxDQUFDSyxDQUFFLENBQUM7TUFDckROLFFBQVEsRUFBRUE7SUFDWixDQUFDLEVBQUVFLE9BQVEsQ0FBRSxDQUFDO0VBQ2hCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE9BQWNLLGNBQWNBLENBQUU5QixNQUFxQixFQUFFdUIsUUFBa0IsRUFBRUMsUUFBaUIsRUFBRVYsSUFBWSxFQUFFVyxPQUF3RCxFQUFTO0lBQ3pLLE9BQU8zQixJQUFJLENBQUN3QixnQkFBZ0IsQ0FBRXRCLE1BQU0sRUFBRXVCLFFBQVEsRUFBRUMsUUFBUSxFQUFFVixJQUFJLEdBQUdTLFFBQVEsQ0FBQ0wsT0FBTyxFQUFFTyxPQUFRLENBQUM7RUFDOUY7QUFDRjtBQUVBL0IscUJBQXFCLENBQUNxQyxRQUFRLENBQUUsTUFBTSxFQUFFakMsSUFBSyxDQUFDIn0=