// Copyright 2019-2023, University of Colorado Boulder

/**
 * Represents different gravity values, including a custom option.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import ReadOnlyProperty from '../../../../axon/js/ReadOnlyProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import StringIO from '../../../../tandem/js/types/StringIO.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import DensityBuoyancyCommonStrings from '../../DensityBuoyancyCommonStrings.js';
import DensityBuoyancyCommonQueryParameters from '../DensityBuoyancyCommonQueryParameters.js';
export default class Gravity {
  constructor(providedConfig) {
    const config = optionize()({
      custom: false,
      hidden: false
    }, providedConfig);
    this.nameProperty = config.nameProperty;
    this.tandemName = config.tandemName;
    this.value = config.value;
    this.custom = config.custom;
    this.hidden = config.hidden;
  }

  /**
   * Returns a custom material that can be modified at will.
   */
  static createCustomGravity(value) {
    return new Gravity({
      nameProperty: DensityBuoyancyCommonStrings.gravity.customStringProperty,
      tandemName: 'custom',
      value: value,
      custom: true
    });
  }
  static EARTH = new Gravity({
    nameProperty: DensityBuoyancyCommonStrings.gravity.earthStringProperty,
    tandemName: 'earth',
    value: DensityBuoyancyCommonQueryParameters.gEarth
  });
  static JUPITER = new Gravity({
    nameProperty: DensityBuoyancyCommonStrings.gravity.jupiterStringProperty,
    tandemName: 'jupiter',
    value: 24.8
  });
  static MOON = new Gravity({
    nameProperty: DensityBuoyancyCommonStrings.gravity.moonStringProperty,
    tandemName: 'moon',
    value: 1.6
  });
  static PLANET_X = new Gravity({
    nameProperty: DensityBuoyancyCommonStrings.gravity.planetXStringProperty,
    tandemName: 'planetX',
    value: 19.6,
    hidden: true
  });
  static GRAVITIES = [Gravity.EARTH, Gravity.JUPITER, Gravity.MOON, Gravity.PLANET_X];
  static GravityIO = new IOType('GravityIO', {
    valueType: Gravity,
    documentation: 'Represents a specific value of gravity (m/s^2)',
    toStateObject: function (gravity) {
      return {
        name: ReferenceIO(ReadOnlyProperty.PropertyIO(StringIO)).toStateObject(gravity.nameProperty),
        tandemName: gravity.tandemName,
        value: gravity.value,
        custom: gravity.custom,
        hidden: gravity.hidden
      };
    },
    fromStateObject: stateObject => {
      if (stateObject.custom) {
        stateObject.name = ReferenceIO(ReadOnlyProperty.PropertyIO(StringIO)).fromStateObject(stateObject.name);
        return new Gravity(stateObject);
      } else {
        return _.find(Gravity.GRAVITIES, gravity => gravity.value === stateObject.value);
      }
    },
    stateSchema: {
      name: ReferenceIO(ReadOnlyProperty.PropertyIO(StringIO)),
      tandemName: NullableIO(StringIO),
      value: NumberIO,
      custom: BooleanIO,
      hidden: BooleanIO
    }
  });
}
densityBuoyancyCommon.register('Gravity', Gravity);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,