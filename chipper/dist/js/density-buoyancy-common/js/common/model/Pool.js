// Copyright 2020-2022, University of Colorado Boulder

/**
 * The main pool of liquid, cut into the ground.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import optionize from '../../../../phet-core/js/optionize.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
import Basin from './Basin.js';
export default class Pool extends Basin {
  constructor(bounds, options) {
    const initialVolume = 0.1;
    super(optionize()({
      initialVolume: initialVolume,
      initialY: bounds.minY + initialVolume / (bounds.width * bounds.depth)
    }, options));
    this.bounds = bounds;

    // These won't change over the life of the pool.
    this.stepBottom = bounds.minY;
    this.stepTop = bounds.maxY;
  }

  /**
   * Returns whether a given mass is inside this basin (e.g. if filled with liquid, would it be displacing any
   * liquid).
   */
  isMassInside(mass) {
    return mass.stepBottom < this.stepTop;
  }

  /**
   * Returns the maximum area that could be contained with liquid at a given y value.
   */
  getMaximumArea(y) {
    if (y < this.bounds.minY || y > this.bounds.maxY) {
      return 0;
    } else {
      return this.bounds.width * this.bounds.depth;
    }
  }

  /**
   * Returns the maximum volume that could be contained with liquid up to a given y value.
   */
  getMaximumVolume(y) {
    if (y <= this.bounds.minY) {
      return 0;
    } else if (y >= this.bounds.maxY) {
      return this.bounds.width * this.bounds.depth * this.bounds.height;
    } else {
      return this.bounds.width * this.bounds.depth * (y - this.bounds.minY);
    }
  }
}
densityBuoyancyCommon.register('Pool', Pool);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJkZW5zaXR5QnVveWFuY3lDb21tb24iLCJCYXNpbiIsIlBvb2wiLCJjb25zdHJ1Y3RvciIsImJvdW5kcyIsIm9wdGlvbnMiLCJpbml0aWFsVm9sdW1lIiwiaW5pdGlhbFkiLCJtaW5ZIiwid2lkdGgiLCJkZXB0aCIsInN0ZXBCb3R0b20iLCJzdGVwVG9wIiwibWF4WSIsImlzTWFzc0luc2lkZSIsIm1hc3MiLCJnZXRNYXhpbXVtQXJlYSIsInkiLCJnZXRNYXhpbXVtVm9sdW1lIiwiaGVpZ2h0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQb29sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBtYWluIHBvb2wgb2YgbGlxdWlkLCBjdXQgaW50byB0aGUgZ3JvdW5kLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvdW5kczMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IGRlbnNpdHlCdW95YW5jeUNvbW1vbiBmcm9tICcuLi8uLi9kZW5zaXR5QnVveWFuY3lDb21tb24uanMnO1xyXG5pbXBvcnQgQmFzaW4sIHsgQmFzaW5PcHRpb25zIH0gZnJvbSAnLi9CYXNpbi5qcyc7XHJcbmltcG9ydCBNYXNzIGZyb20gJy4vTWFzcy5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBQb29sT3B0aW9ucyA9IEJhc2luT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvb2wgZXh0ZW5kcyBCYXNpbiB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBib3VuZHM6IEJvdW5kczM7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYm91bmRzOiBCb3VuZHMzLCBvcHRpb25zPzogUG9vbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgaW5pdGlhbFZvbHVtZSA9IDAuMTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9uaXplPFBvb2xPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zLCBCYXNpbk9wdGlvbnM+KCkoIHtcclxuICAgICAgaW5pdGlhbFZvbHVtZTogaW5pdGlhbFZvbHVtZSxcclxuICAgICAgaW5pdGlhbFk6IGJvdW5kcy5taW5ZICsgaW5pdGlhbFZvbHVtZSAvICggYm91bmRzLndpZHRoICogYm91bmRzLmRlcHRoIClcclxuICAgIH0sIG9wdGlvbnMgKSApO1xyXG5cclxuICAgIHRoaXMuYm91bmRzID0gYm91bmRzO1xyXG5cclxuICAgIC8vIFRoZXNlIHdvbid0IGNoYW5nZSBvdmVyIHRoZSBsaWZlIG9mIHRoZSBwb29sLlxyXG4gICAgdGhpcy5zdGVwQm90dG9tID0gYm91bmRzLm1pblk7XHJcbiAgICB0aGlzLnN0ZXBUb3AgPSBib3VuZHMubWF4WTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgd2hldGhlciBhIGdpdmVuIG1hc3MgaXMgaW5zaWRlIHRoaXMgYmFzaW4gKGUuZy4gaWYgZmlsbGVkIHdpdGggbGlxdWlkLCB3b3VsZCBpdCBiZSBkaXNwbGFjaW5nIGFueVxyXG4gICAqIGxpcXVpZCkuXHJcbiAgICovXHJcbiAgcHVibGljIGlzTWFzc0luc2lkZSggbWFzczogTWFzcyApOiBib29sZWFuIHtcclxuICAgIHJldHVybiBtYXNzLnN0ZXBCb3R0b20gPCB0aGlzLnN0ZXBUb3A7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCBjb3VsZCBiZSBjb250YWluZWQgd2l0aCBsaXF1aWQgYXQgYSBnaXZlbiB5IHZhbHVlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXhpbXVtQXJlYSggeTogbnVtYmVyICk6IG51bWJlciB7XHJcbiAgICBpZiAoIHkgPCB0aGlzLmJvdW5kcy5taW5ZIHx8IHkgPiB0aGlzLmJvdW5kcy5tYXhZICkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3VuZHMud2lkdGggKiB0aGlzLmJvdW5kcy5kZXB0aDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIG1heGltdW0gdm9sdW1lIHRoYXQgY291bGQgYmUgY29udGFpbmVkIHdpdGggbGlxdWlkIHVwIHRvIGEgZ2l2ZW4geSB2YWx1ZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TWF4aW11bVZvbHVtZSggeTogbnVtYmVyICk6IG51bWJlciB7XHJcbiAgICBpZiAoIHkgPD0gdGhpcy5ib3VuZHMubWluWSApIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggeSA+PSB0aGlzLmJvdW5kcy5tYXhZICkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3VuZHMud2lkdGggKiB0aGlzLmJvdW5kcy5kZXB0aCAqIHRoaXMuYm91bmRzLmhlaWdodDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5ib3VuZHMud2lkdGggKiB0aGlzLmJvdW5kcy5kZXB0aCAqICggeSAtIHRoaXMuYm91bmRzLm1pblkgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmRlbnNpdHlCdW95YW5jeUNvbW1vbi5yZWdpc3RlciggJ1Bvb2wnLCBQb29sICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUNuRixPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsS0FBSyxNQUF3QixZQUFZO0FBS2hELGVBQWUsTUFBTUMsSUFBSSxTQUFTRCxLQUFLLENBQUM7RUFJL0JFLFdBQVdBLENBQUVDLE1BQWUsRUFBRUMsT0FBcUIsRUFBRztJQUUzRCxNQUFNQyxhQUFhLEdBQUcsR0FBRztJQUV6QixLQUFLLENBQUVQLFNBQVMsQ0FBOEMsQ0FBQyxDQUFFO01BQy9ETyxhQUFhLEVBQUVBLGFBQWE7TUFDNUJDLFFBQVEsRUFBRUgsTUFBTSxDQUFDSSxJQUFJLEdBQUdGLGFBQWEsSUFBS0YsTUFBTSxDQUFDSyxLQUFLLEdBQUdMLE1BQU0sQ0FBQ00sS0FBSztJQUN2RSxDQUFDLEVBQUVMLE9BQVEsQ0FBRSxDQUFDO0lBRWQsSUFBSSxDQUFDRCxNQUFNLEdBQUdBLE1BQU07O0lBRXBCO0lBQ0EsSUFBSSxDQUFDTyxVQUFVLEdBQUdQLE1BQU0sQ0FBQ0ksSUFBSTtJQUM3QixJQUFJLENBQUNJLE9BQU8sR0FBR1IsTUFBTSxDQUFDUyxJQUFJO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NDLFlBQVlBLENBQUVDLElBQVUsRUFBWTtJQUN6QyxPQUFPQSxJQUFJLENBQUNKLFVBQVUsR0FBRyxJQUFJLENBQUNDLE9BQU87RUFDdkM7O0VBRUE7QUFDRjtBQUNBO0VBQ1NJLGNBQWNBLENBQUVDLENBQVMsRUFBVztJQUN6QyxJQUFLQSxDQUFDLEdBQUcsSUFBSSxDQUFDYixNQUFNLENBQUNJLElBQUksSUFBSVMsQ0FBQyxHQUFHLElBQUksQ0FBQ2IsTUFBTSxDQUFDUyxJQUFJLEVBQUc7TUFDbEQsT0FBTyxDQUFDO0lBQ1YsQ0FBQyxNQUNJO01BQ0gsT0FBTyxJQUFJLENBQUNULE1BQU0sQ0FBQ0ssS0FBSyxHQUFHLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxLQUFLO0lBQzlDO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ1NRLGdCQUFnQkEsQ0FBRUQsQ0FBUyxFQUFXO0lBQzNDLElBQUtBLENBQUMsSUFBSSxJQUFJLENBQUNiLE1BQU0sQ0FBQ0ksSUFBSSxFQUFHO01BQzNCLE9BQU8sQ0FBQztJQUNWLENBQUMsTUFDSSxJQUFLUyxDQUFDLElBQUksSUFBSSxDQUFDYixNQUFNLENBQUNTLElBQUksRUFBRztNQUNoQyxPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDSyxLQUFLLEdBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUNNLEtBQUssR0FBRyxJQUFJLENBQUNOLE1BQU0sQ0FBQ2UsTUFBTTtJQUNuRSxDQUFDLE1BQ0k7TUFDSCxPQUFPLElBQUksQ0FBQ2YsTUFBTSxDQUFDSyxLQUFLLEdBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUNNLEtBQUssSUFBS08sQ0FBQyxHQUFHLElBQUksQ0FBQ2IsTUFBTSxDQUFDSSxJQUFJLENBQUU7SUFDekU7RUFDRjtBQUNGO0FBRUFSLHFCQUFxQixDQUFDb0IsUUFBUSxDQUFFLE1BQU0sRUFBRWxCLElBQUssQ0FBQyJ9