// Copyright 2019-2023, University of Colorado Boulder

/**
 * A Property that is based on the step-based interpolation between a current and previous value.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../../axon/js/Property.js';
import optionize from '../../../../phet-core/js/optionize.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import densityBuoyancyCommon from '../../densityBuoyancyCommon.js';
export default class InterpolatedProperty extends Property {
  constructor(initialValue, providedConfig) {
    const config = optionize()({
      phetioOuterType: InterpolatedProperty.InterpolatedPropertyIO
    }, providedConfig);
    super(initialValue, config);
    this.interpolate = config.interpolate;
    this.currentValue = initialValue;
    this.previousValue = initialValue;
    this.ratio = 0;
  }

  /**
   * Sets the next value to be used (will NOT change the value of this Property).
   */
  setNextValue(value) {
    this.previousValue = this.currentValue;
    this.currentValue = value;
  }

  /**
   * Sets the ratio to use for interpolated values (WILL change the value of this Property generally).
   */
  setRatio(ratio) {
    this.ratio = ratio;
    this.value = this.interpolate(this.previousValue, this.currentValue, this.ratio);
  }

  /**
   * Resets the Property to its initial state.
   */
  reset() {
    super.reset();
    this.currentValue = this.value;
    this.previousValue = this.value;
    this.ratio = 0;
  }

  /**
   * Interpolation for numbers.
   */
  static interpolateNumber(a, b, ratio) {
    return a + (b - a) * ratio;
  }

  /**
   * Interpolation for Vector2.
   */
  static interpolateVector2(a, b, ratio) {
    return a.blend(b, ratio);
  }

  /**
   * Interpolation for Vector3.
   */
  static interpolateVector3(a, b, ratio) {
    return a.blend(b, ratio);
  }
  static InterpolatedPropertyIO = parameterType => {
    assert && assert(parameterType, 'InterpolatedPropertyIO needs parameterType');
    if (!cache.has(parameterType)) {
      const PropertyIOImpl = Property.PropertyIO(parameterType);
      const ioType = new IOType(`InterpolatedPropertyIO<${parameterType.typeName}>`, {
        valueType: InterpolatedProperty,
        supertype: PropertyIOImpl,
        parameterTypes: [parameterType],
        documentation: 'Extends PropertyIO to interpolation (with a current/previous value, and a ratio between the two)',
        toStateObject: interpolatedProperty => {
          const parentStateObject = PropertyIOImpl.toStateObject(interpolatedProperty);
          parentStateObject.currentValue = parameterType.toStateObject(interpolatedProperty.currentValue);
          parentStateObject.previousValue = parameterType.toStateObject(interpolatedProperty.previousValue);
          parentStateObject.ratio = interpolatedProperty.ratio;
          return parentStateObject;
        },
        applyState: (interpolatedProperty, stateObject) => {
          PropertyIOImpl.applyState(interpolatedProperty, stateObject);
          interpolatedProperty.currentValue = parameterType.fromStateObject(stateObject.currentValue);
          interpolatedProperty.previousValue = parameterType.fromStateObject(stateObject.previousValue);
          interpolatedProperty.ratio = stateObject.ratio;
        },
        stateSchema: {
          currentValue: parameterType,
          previousValue: parameterType,
          ratio: NumberIO
        }
      });
      cache.set(parameterType, ioType);
    }
    return cache.get(parameterType);
  };
}

// {Map.<IOType, IOType>} - Cache each parameterized PropertyIO based on
// the parameter type, so that it is only created once
const cache = new Map();
densityBuoyancyCommon.register('InterpolatedProperty', InterpolatedProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,