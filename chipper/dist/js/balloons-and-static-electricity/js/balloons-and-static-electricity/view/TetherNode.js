// Copyright 2017-2022, University of Colorado Boulder

/**
 * A node that looks like a tether that holds the balloon to the ground. The use of the word 'string' has been avoided
 * in the name and the documentation for (hopefully) obvious reasons.
 *
 * @author John Blanco
 */

import { Shape } from '../../../../kite/js/imports.js';
import { Path } from '../../../../scenery/js/imports.js';
import balloonsAndStaticElectricity from '../../balloonsAndStaticElectricity.js';
class TetherNode extends Path {
  /**
   * @param  {BalloonModel} balloonModel
   * @param  {Vector2} anchorPoint
   * @param  {Vector2} tetherPointOffset
   * @param  {Tandem} tandem
   */
  constructor(balloonModel, anchorPoint, tetherPointOffset, tandem) {
    super(null, {
      stroke: '#000000',
      lineWidth: 1,
      pickable: false,
      tandem: tandem
    });
    const anchorPointCopy = anchorPoint.copy();
    balloonModel.positionProperty.link(position => {
      const attachmentPoint = position.plus(tetherPointOffset);
      this.shape = new Shape().moveToPoint(anchorPointCopy).quadraticCurveTo(attachmentPoint.x, (anchorPointCopy.y + attachmentPoint.y) / 2, attachmentPoint.x, attachmentPoint.y);
    });
  }
}
balloonsAndStaticElectricity.register('TetherNode', TetherNode);
export default TetherNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIlBhdGgiLCJiYWxsb29uc0FuZFN0YXRpY0VsZWN0cmljaXR5IiwiVGV0aGVyTm9kZSIsImNvbnN0cnVjdG9yIiwiYmFsbG9vbk1vZGVsIiwiYW5jaG9yUG9pbnQiLCJ0ZXRoZXJQb2ludE9mZnNldCIsInRhbmRlbSIsInN0cm9rZSIsImxpbmVXaWR0aCIsInBpY2thYmxlIiwiYW5jaG9yUG9pbnRDb3B5IiwiY29weSIsInBvc2l0aW9uUHJvcGVydHkiLCJsaW5rIiwicG9zaXRpb24iLCJhdHRhY2htZW50UG9pbnQiLCJwbHVzIiwic2hhcGUiLCJtb3ZlVG9Qb2ludCIsInF1YWRyYXRpY0N1cnZlVG8iLCJ4IiwieSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGV0aGVyTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIG5vZGUgdGhhdCBsb29rcyBsaWtlIGEgdGV0aGVyIHRoYXQgaG9sZHMgdGhlIGJhbGxvb24gdG8gdGhlIGdyb3VuZC4gVGhlIHVzZSBvZiB0aGUgd29yZCAnc3RyaW5nJyBoYXMgYmVlbiBhdm9pZGVkXHJcbiAqIGluIHRoZSBuYW1lIGFuZCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgKGhvcGVmdWxseSkgb2J2aW91cyByZWFzb25zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJhbGxvb25zQW5kU3RhdGljRWxlY3RyaWNpdHkgZnJvbSAnLi4vLi4vYmFsbG9vbnNBbmRTdGF0aWNFbGVjdHJpY2l0eS5qcyc7XHJcblxyXG5jbGFzcyBUZXRoZXJOb2RlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSAge0JhbGxvb25Nb2RlbH0gYmFsbG9vbk1vZGVsXHJcbiAgICogQHBhcmFtICB7VmVjdG9yMn0gYW5jaG9yUG9pbnRcclxuICAgKiBAcGFyYW0gIHtWZWN0b3IyfSB0ZXRoZXJQb2ludE9mZnNldFxyXG4gICAqIEBwYXJhbSAge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGJhbGxvb25Nb2RlbCwgYW5jaG9yUG9pbnQsIHRldGhlclBvaW50T2Zmc2V0LCB0YW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIG51bGwsIHtcclxuICAgICAgc3Ryb2tlOiAnIzAwMDAwMCcsXHJcbiAgICAgIGxpbmVXaWR0aDogMSxcclxuICAgICAgcGlja2FibGU6IGZhbHNlLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGFuY2hvclBvaW50Q29weSA9IGFuY2hvclBvaW50LmNvcHkoKTtcclxuXHJcbiAgICBiYWxsb29uTW9kZWwucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBwb3NpdGlvbiA9PiB7XHJcbiAgICAgIGNvbnN0IGF0dGFjaG1lbnRQb2ludCA9IHBvc2l0aW9uLnBsdXMoIHRldGhlclBvaW50T2Zmc2V0ICk7XHJcbiAgICAgIHRoaXMuc2hhcGUgPSBuZXcgU2hhcGUoKVxyXG4gICAgICAgIC5tb3ZlVG9Qb2ludCggYW5jaG9yUG9pbnRDb3B5IClcclxuICAgICAgICAucXVhZHJhdGljQ3VydmVUbyhcclxuICAgICAgICAgIGF0dGFjaG1lbnRQb2ludC54LFxyXG4gICAgICAgICAgKCBhbmNob3JQb2ludENvcHkueSArIGF0dGFjaG1lbnRQb2ludC55ICkgLyAyLFxyXG4gICAgICAgICAgYXR0YWNobWVudFBvaW50LngsXHJcbiAgICAgICAgICBhdHRhY2htZW50UG9pbnQueVxyXG4gICAgICAgICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5iYWxsb29uc0FuZFN0YXRpY0VsZWN0cmljaXR5LnJlZ2lzdGVyKCAnVGV0aGVyTm9kZScsIFRldGhlck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRldGhlck5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLDRCQUE0QixNQUFNLHVDQUF1QztBQUVoRixNQUFNQyxVQUFVLFNBQVNGLElBQUksQ0FBQztFQUU1QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsWUFBWSxFQUFFQyxXQUFXLEVBQUVDLGlCQUFpQixFQUFFQyxNQUFNLEVBQUc7SUFFbEUsS0FBSyxDQUFFLElBQUksRUFBRTtNQUNYQyxNQUFNLEVBQUUsU0FBUztNQUNqQkMsU0FBUyxFQUFFLENBQUM7TUFDWkMsUUFBUSxFQUFFLEtBQUs7TUFDZkgsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztJQUVILE1BQU1JLGVBQWUsR0FBR04sV0FBVyxDQUFDTyxJQUFJLENBQUMsQ0FBQztJQUUxQ1IsWUFBWSxDQUFDUyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFFQyxRQUFRLElBQUk7TUFDOUMsTUFBTUMsZUFBZSxHQUFHRCxRQUFRLENBQUNFLElBQUksQ0FBRVgsaUJBQWtCLENBQUM7TUFDMUQsSUFBSSxDQUFDWSxLQUFLLEdBQUcsSUFBSW5CLEtBQUssQ0FBQyxDQUFDLENBQ3JCb0IsV0FBVyxDQUFFUixlQUFnQixDQUFDLENBQzlCUyxnQkFBZ0IsQ0FDZkosZUFBZSxDQUFDSyxDQUFDLEVBQ2pCLENBQUVWLGVBQWUsQ0FBQ1csQ0FBQyxHQUFHTixlQUFlLENBQUNNLENBQUMsSUFBSyxDQUFDLEVBQzdDTixlQUFlLENBQUNLLENBQUMsRUFDakJMLGVBQWUsQ0FBQ00sQ0FDbEIsQ0FBQztJQUNMLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXJCLDRCQUE0QixDQUFDc0IsUUFBUSxDQUFFLFlBQVksRUFBRXJCLFVBQVcsQ0FBQztBQUVqRSxlQUFlQSxVQUFVIn0=