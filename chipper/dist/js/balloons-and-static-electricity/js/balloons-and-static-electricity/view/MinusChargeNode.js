// Copyright 2013-2022, University of Colorado Boulder

/**
 * Scenery display object (scene graph node) for minusCharge.
 *
 @author Vasily Shakhov (Mlearner)
 */

import merge from '../../../../phet-core/js/merge.js';
import { Circle, Node, RadialGradient, Rectangle } from '../../../../scenery/js/imports.js';
import '../../../../scenery/js/nodes/Image.js'; // to support static call to rasterize, see https://github.com/phetsims/chipper/issues/871
import balloonsAndStaticElectricity from '../../balloonsAndStaticElectricity.js';
import BASEConstants from '../BASEConstants.js';
import PointChargeModel from '../model/PointChargeModel.js';
const RADIUS = PointChargeModel.RADIUS;
const icon = new Node({
  children: [new Circle(RADIUS, {
    x: 0,
    y: 0,
    fill: new RadialGradient(2, -3, 2, 2, -3, 7).addColorStop(0, '#4fcfff').addColorStop(0.5, '#2cbef5').addColorStop(1, '#00a9e8')
  }), new Rectangle(0, 0, 11, 2, {
    fill: 'white',
    centerX: 0,
    centerY: 0
  })]
});
const sharedMinusChargeNode = icon.rasterized({
  resolution: BASEConstants.IMAGE_SCALE
});
class MinusChargeNode extends Node {
  /**
   * @param {Vector2} position
   * @param {Object} [options]
   */
  constructor(position, options) {
    options = merge({
      pickable: false
    }, options);
    super(options);
    this.translate(position.x + BASEConstants.IMAGE_PADDING, position.y + BASEConstants.IMAGE_PADDING);
    this.addChild(sharedMinusChargeNode);
  }
}
balloonsAndStaticElectricity.register('MinusChargeNode', MinusChargeNode);
export default MinusChargeNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkNpcmNsZSIsIk5vZGUiLCJSYWRpYWxHcmFkaWVudCIsIlJlY3RhbmdsZSIsImJhbGxvb25zQW5kU3RhdGljRWxlY3RyaWNpdHkiLCJCQVNFQ29uc3RhbnRzIiwiUG9pbnRDaGFyZ2VNb2RlbCIsIlJBRElVUyIsImljb24iLCJjaGlsZHJlbiIsIngiLCJ5IiwiZmlsbCIsImFkZENvbG9yU3RvcCIsImNlbnRlclgiLCJjZW50ZXJZIiwic2hhcmVkTWludXNDaGFyZ2VOb2RlIiwicmFzdGVyaXplZCIsInJlc29sdXRpb24iLCJJTUFHRV9TQ0FMRSIsIk1pbnVzQ2hhcmdlTm9kZSIsImNvbnN0cnVjdG9yIiwicG9zaXRpb24iLCJvcHRpb25zIiwicGlja2FibGUiLCJ0cmFuc2xhdGUiLCJJTUFHRV9QQURESU5HIiwiYWRkQ2hpbGQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1pbnVzQ2hhcmdlTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY2VuZXJ5IGRpc3BsYXkgb2JqZWN0IChzY2VuZSBncmFwaCBub2RlKSBmb3IgbWludXNDaGFyZ2UuXHJcbiAqXHJcbiBAYXV0aG9yIFZhc2lseSBTaGFraG92IChNbGVhcm5lcilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBOb2RlLCBSYWRpYWxHcmFkaWVudCwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0ICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL25vZGVzL0ltYWdlLmpzJzsgLy8gdG8gc3VwcG9ydCBzdGF0aWMgY2FsbCB0byByYXN0ZXJpemUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2hpcHBlci9pc3N1ZXMvODcxXHJcbmltcG9ydCBiYWxsb29uc0FuZFN0YXRpY0VsZWN0cmljaXR5IGZyb20gJy4uLy4uL2JhbGxvb25zQW5kU3RhdGljRWxlY3RyaWNpdHkuanMnO1xyXG5pbXBvcnQgQkFTRUNvbnN0YW50cyBmcm9tICcuLi9CQVNFQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFBvaW50Q2hhcmdlTW9kZWwgZnJvbSAnLi4vbW9kZWwvUG9pbnRDaGFyZ2VNb2RlbC5qcyc7XHJcblxyXG5jb25zdCBSQURJVVMgPSBQb2ludENoYXJnZU1vZGVsLlJBRElVUztcclxuXHJcbmNvbnN0IGljb24gPSBuZXcgTm9kZSgge1xyXG4gIGNoaWxkcmVuOiBbXHJcbiAgICBuZXcgQ2lyY2xlKCBSQURJVVMsIHtcclxuICAgICAgeDogMCwgeTogMCxcclxuICAgICAgZmlsbDogbmV3IFJhZGlhbEdyYWRpZW50KCAyLCAtMywgMiwgMiwgLTMsIDcgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDAsICcjNGZjZmZmJyApXHJcbiAgICAgICAgLmFkZENvbG9yU3RvcCggMC41LCAnIzJjYmVmNScgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDEsICcjMDBhOWU4JyApXHJcbiAgICB9ICksXHJcblxyXG4gICAgbmV3IFJlY3RhbmdsZSggMCwgMCwgMTEsIDIsIHtcclxuICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgY2VudGVyWDogMCxcclxuICAgICAgY2VudGVyWTogMFxyXG4gICAgfSApXHJcbiAgXVxyXG59ICk7XHJcbmNvbnN0IHNoYXJlZE1pbnVzQ2hhcmdlTm9kZSA9IGljb24ucmFzdGVyaXplZCggeyByZXNvbHV0aW9uOiBCQVNFQ29uc3RhbnRzLklNQUdFX1NDQUxFIH0gKTtcclxuXHJcbmNsYXNzIE1pbnVzQ2hhcmdlTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IHBvc2l0aW9uXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwb3NpdGlvbiwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgcGlja2FibGU6IGZhbHNlXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnRyYW5zbGF0ZSggcG9zaXRpb24ueCArIEJBU0VDb25zdGFudHMuSU1BR0VfUEFERElORywgcG9zaXRpb24ueSArIEJBU0VDb25zdGFudHMuSU1BR0VfUEFERElORyApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIHNoYXJlZE1pbnVzQ2hhcmdlTm9kZSApO1xyXG4gIH1cclxufVxyXG5cclxuYmFsbG9vbnNBbmRTdGF0aWNFbGVjdHJpY2l0eS5yZWdpc3RlciggJ01pbnVzQ2hhcmdlTm9kZScsIE1pbnVzQ2hhcmdlTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWludXNDaGFyZ2VOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxjQUFjLEVBQUVDLFNBQVMsUUFBUSxtQ0FBbUM7QUFDM0YsT0FBTyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQ2hELE9BQU9DLDRCQUE0QixNQUFNLHVDQUF1QztBQUNoRixPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLGdCQUFnQixNQUFNLDhCQUE4QjtBQUUzRCxNQUFNQyxNQUFNLEdBQUdELGdCQUFnQixDQUFDQyxNQUFNO0FBRXRDLE1BQU1DLElBQUksR0FBRyxJQUFJUCxJQUFJLENBQUU7RUFDckJRLFFBQVEsRUFBRSxDQUNSLElBQUlULE1BQU0sQ0FBRU8sTUFBTSxFQUFFO0lBQ2xCRyxDQUFDLEVBQUUsQ0FBQztJQUFFQyxDQUFDLEVBQUUsQ0FBQztJQUNWQyxJQUFJLEVBQUUsSUFBSVYsY0FBYyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUMzQ1csWUFBWSxDQUFFLENBQUMsRUFBRSxTQUFVLENBQUMsQ0FDNUJBLFlBQVksQ0FBRSxHQUFHLEVBQUUsU0FBVSxDQUFDLENBQzlCQSxZQUFZLENBQUUsQ0FBQyxFQUFFLFNBQVU7RUFDaEMsQ0FBRSxDQUFDLEVBRUgsSUFBSVYsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtJQUMxQlMsSUFBSSxFQUFFLE9BQU87SUFDYkUsT0FBTyxFQUFFLENBQUM7SUFDVkMsT0FBTyxFQUFFO0VBQ1gsQ0FBRSxDQUFDO0FBRVAsQ0FBRSxDQUFDO0FBQ0gsTUFBTUMscUJBQXFCLEdBQUdSLElBQUksQ0FBQ1MsVUFBVSxDQUFFO0VBQUVDLFVBQVUsRUFBRWIsYUFBYSxDQUFDYztBQUFZLENBQUUsQ0FBQztBQUUxRixNQUFNQyxlQUFlLFNBQVNuQixJQUFJLENBQUM7RUFFakM7QUFDRjtBQUNBO0FBQ0E7RUFDRW9CLFdBQVdBLENBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFHO0lBRS9CQSxPQUFPLEdBQUd4QixLQUFLLENBQUU7TUFDZnlCLFFBQVEsRUFBRTtJQUNaLENBQUMsRUFBRUQsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFQSxPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDRSxTQUFTLENBQUVILFFBQVEsQ0FBQ1osQ0FBQyxHQUFHTCxhQUFhLENBQUNxQixhQUFhLEVBQUVKLFFBQVEsQ0FBQ1gsQ0FBQyxHQUFHTixhQUFhLENBQUNxQixhQUFjLENBQUM7SUFFcEcsSUFBSSxDQUFDQyxRQUFRLENBQUVYLHFCQUFzQixDQUFDO0VBQ3hDO0FBQ0Y7QUFFQVosNEJBQTRCLENBQUN3QixRQUFRLENBQUUsaUJBQWlCLEVBQUVSLGVBQWdCLENBQUM7QUFFM0UsZUFBZUEsZUFBZSJ9