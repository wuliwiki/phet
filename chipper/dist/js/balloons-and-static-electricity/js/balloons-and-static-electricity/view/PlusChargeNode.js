// Copyright 2013-2022, University of Colorado Boulder

/**
 * Scenery display object (scene graph node) for the plusCharge.
 *
 @author Vasily Shakhov (Mlearner)
 */

import { Circle, Node, RadialGradient, Rectangle } from '../../../../scenery/js/imports.js';
import balloonsAndStaticElectricity from '../../balloonsAndStaticElectricity.js';
import BASEConstants from '../BASEConstants.js';
import PointChargeModel from '../model/PointChargeModel.js';
const RADIUS = PointChargeModel.RADIUS;
const icon = new Node({
  children: [new Circle(RADIUS, {
    x: 0,
    y: 0,
    fill: new RadialGradient(2, -3, 2, 2, -3, 7).addColorStop(0, '#f97d7d').addColorStop(0.5, '#ed4545').addColorStop(1, '#f00')
  }), new Rectangle(0, 0, 11, 2, {
    fill: 'white',
    centerX: 0,
    centerY: 0
  }), new Rectangle(0, 0, 2, 11, {
    fill: 'white',
    centerX: 0,
    centerY: 0
  })]
});
const sharedPlusChargeNode = icon.rasterized({
  resolution: BASEConstants.IMAGE_SCALE
});
class PlusChargeNode extends Node {
  /**
   * @param {Vector2} position
   */
  constructor(position) {
    super({
      pickable: false
    });
    this.translate(position.x + BASEConstants.IMAGE_PADDING, position.y + BASEConstants.IMAGE_PADDING);
    this.addChild(sharedPlusChargeNode);
  }
}
balloonsAndStaticElectricity.register('PlusChargeNode', PlusChargeNode);
export default PlusChargeNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaXJjbGUiLCJOb2RlIiwiUmFkaWFsR3JhZGllbnQiLCJSZWN0YW5nbGUiLCJiYWxsb29uc0FuZFN0YXRpY0VsZWN0cmljaXR5IiwiQkFTRUNvbnN0YW50cyIsIlBvaW50Q2hhcmdlTW9kZWwiLCJSQURJVVMiLCJpY29uIiwiY2hpbGRyZW4iLCJ4IiwieSIsImZpbGwiLCJhZGRDb2xvclN0b3AiLCJjZW50ZXJYIiwiY2VudGVyWSIsInNoYXJlZFBsdXNDaGFyZ2VOb2RlIiwicmFzdGVyaXplZCIsInJlc29sdXRpb24iLCJJTUFHRV9TQ0FMRSIsIlBsdXNDaGFyZ2VOb2RlIiwiY29uc3RydWN0b3IiLCJwb3NpdGlvbiIsInBpY2thYmxlIiwidHJhbnNsYXRlIiwiSU1BR0VfUEFERElORyIsImFkZENoaWxkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQbHVzQ2hhcmdlTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY2VuZXJ5IGRpc3BsYXkgb2JqZWN0IChzY2VuZSBncmFwaCBub2RlKSBmb3IgdGhlIHBsdXNDaGFyZ2UuXHJcbiAqXHJcbiBAYXV0aG9yIFZhc2lseSBTaGFraG92IChNbGVhcm5lcilcclxuICovXHJcblxyXG5pbXBvcnQgeyBDaXJjbGUsIE5vZGUsIFJhZGlhbEdyYWRpZW50LCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmFsbG9vbnNBbmRTdGF0aWNFbGVjdHJpY2l0eSBmcm9tICcuLi8uLi9iYWxsb29uc0FuZFN0YXRpY0VsZWN0cmljaXR5LmpzJztcclxuaW1wb3J0IEJBU0VDb25zdGFudHMgZnJvbSAnLi4vQkFTRUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBQb2ludENoYXJnZU1vZGVsIGZyb20gJy4uL21vZGVsL1BvaW50Q2hhcmdlTW9kZWwuanMnO1xyXG5cclxuY29uc3QgUkFESVVTID0gUG9pbnRDaGFyZ2VNb2RlbC5SQURJVVM7XHJcblxyXG5jb25zdCBpY29uID0gbmV3IE5vZGUoIHtcclxuICBjaGlsZHJlbjogW1xyXG4gICAgbmV3IENpcmNsZSggUkFESVVTLCB7XHJcbiAgICAgIHg6IDAsIHk6IDAsXHJcbiAgICAgIGZpbGw6IG5ldyBSYWRpYWxHcmFkaWVudCggMiwgLTMsIDIsIDIsIC0zLCA3IClcclxuICAgICAgICAuYWRkQ29sb3JTdG9wKCAwLCAnI2Y5N2Q3ZCcgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDAuNSwgJyNlZDQ1NDUnIClcclxuICAgICAgICAuYWRkQ29sb3JTdG9wKCAxLCAnI2YwMCcgKVxyXG4gICAgfSApLFxyXG5cclxuICAgIG5ldyBSZWN0YW5nbGUoIDAsIDAsIDExLCAyLCB7XHJcbiAgICAgIGZpbGw6ICd3aGl0ZScsXHJcbiAgICAgIGNlbnRlclg6IDAsXHJcbiAgICAgIGNlbnRlclk6IDBcclxuICAgIH0gKSxcclxuXHJcbiAgICBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAyLCAxMSwge1xyXG4gICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICBjZW50ZXJYOiAwLFxyXG4gICAgICBjZW50ZXJZOiAwXHJcbiAgICB9IClcclxuICBdXHJcbn0gKTtcclxuY29uc3Qgc2hhcmVkUGx1c0NoYXJnZU5vZGUgPSBpY29uLnJhc3Rlcml6ZWQoIHsgcmVzb2x1dGlvbjogQkFTRUNvbnN0YW50cy5JTUFHRV9TQ0FMRSB9ICk7XHJcblxyXG5jbGFzcyBQbHVzQ2hhcmdlTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IHBvc2l0aW9uXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHBvc2l0aW9uICkge1xyXG5cclxuICAgIHN1cGVyKCB7IHBpY2thYmxlOiBmYWxzZSB9ICk7XHJcblxyXG4gICAgdGhpcy50cmFuc2xhdGUoIHBvc2l0aW9uLnggKyBCQVNFQ29uc3RhbnRzLklNQUdFX1BBRERJTkcsIHBvc2l0aW9uLnkgKyBCQVNFQ29uc3RhbnRzLklNQUdFX1BBRERJTkcgKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBzaGFyZWRQbHVzQ2hhcmdlTm9kZSApO1xyXG4gIH1cclxufVxyXG5cclxuYmFsbG9vbnNBbmRTdGF0aWNFbGVjdHJpY2l0eS5yZWdpc3RlciggJ1BsdXNDaGFyZ2VOb2RlJywgUGx1c0NoYXJnZU5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBsdXNDaGFyZ2VOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxNQUFNLEVBQUVDLElBQUksRUFBRUMsY0FBYyxFQUFFQyxTQUFTLFFBQVEsbUNBQW1DO0FBQzNGLE9BQU9DLDRCQUE0QixNQUFNLHVDQUF1QztBQUNoRixPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLGdCQUFnQixNQUFNLDhCQUE4QjtBQUUzRCxNQUFNQyxNQUFNLEdBQUdELGdCQUFnQixDQUFDQyxNQUFNO0FBRXRDLE1BQU1DLElBQUksR0FBRyxJQUFJUCxJQUFJLENBQUU7RUFDckJRLFFBQVEsRUFBRSxDQUNSLElBQUlULE1BQU0sQ0FBRU8sTUFBTSxFQUFFO0lBQ2xCRyxDQUFDLEVBQUUsQ0FBQztJQUFFQyxDQUFDLEVBQUUsQ0FBQztJQUNWQyxJQUFJLEVBQUUsSUFBSVYsY0FBYyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUMzQ1csWUFBWSxDQUFFLENBQUMsRUFBRSxTQUFVLENBQUMsQ0FDNUJBLFlBQVksQ0FBRSxHQUFHLEVBQUUsU0FBVSxDQUFDLENBQzlCQSxZQUFZLENBQUUsQ0FBQyxFQUFFLE1BQU87RUFDN0IsQ0FBRSxDQUFDLEVBRUgsSUFBSVYsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtJQUMxQlMsSUFBSSxFQUFFLE9BQU87SUFDYkUsT0FBTyxFQUFFLENBQUM7SUFDVkMsT0FBTyxFQUFFO0VBQ1gsQ0FBRSxDQUFDLEVBRUgsSUFBSVosU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUMxQlMsSUFBSSxFQUFFLE9BQU87SUFDYkUsT0FBTyxFQUFFLENBQUM7SUFDVkMsT0FBTyxFQUFFO0VBQ1gsQ0FBRSxDQUFDO0FBRVAsQ0FBRSxDQUFDO0FBQ0gsTUFBTUMsb0JBQW9CLEdBQUdSLElBQUksQ0FBQ1MsVUFBVSxDQUFFO0VBQUVDLFVBQVUsRUFBRWIsYUFBYSxDQUFDYztBQUFZLENBQUUsQ0FBQztBQUV6RixNQUFNQyxjQUFjLFNBQVNuQixJQUFJLENBQUM7RUFFaEM7QUFDRjtBQUNBO0VBQ0VvQixXQUFXQSxDQUFFQyxRQUFRLEVBQUc7SUFFdEIsS0FBSyxDQUFFO01BQUVDLFFBQVEsRUFBRTtJQUFNLENBQUUsQ0FBQztJQUU1QixJQUFJLENBQUNDLFNBQVMsQ0FBRUYsUUFBUSxDQUFDWixDQUFDLEdBQUdMLGFBQWEsQ0FBQ29CLGFBQWEsRUFBRUgsUUFBUSxDQUFDWCxDQUFDLEdBQUdOLGFBQWEsQ0FBQ29CLGFBQWMsQ0FBQztJQUVwRyxJQUFJLENBQUNDLFFBQVEsQ0FBRVYsb0JBQXFCLENBQUM7RUFDdkM7QUFDRjtBQUVBWiw0QkFBNEIsQ0FBQ3VCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRVAsY0FBZSxDQUFDO0FBRXpFLGVBQWVBLGNBQWMifQ==