// Copyright 2018-2023, University of Colorado Boulder

/**
 * The 'Focus and Directrix' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import GQColors from '../common/GQColors.js';
import GQScreenIconFactory from '../common/view/GQScreenIconFactory.js';
import graphingQuadratics from '../graphingQuadratics.js';
import GraphingQuadraticsStrings from '../GraphingQuadraticsStrings.js';
import FocusAndDirectrixModel from './model/FocusAndDirectrixModel.js';
import FocusAndDirectrixScreenView from './view/FocusAndDirectrixScreenView.js';
export default class FocusAndDirectrixScreen extends Screen {
  constructor(tandem) {
    const options = {
      // ScreenOptions
      name: GraphingQuadraticsStrings.screen.focusAndDirectrixStringProperty,
      backgroundColorProperty: new Property(GQColors.SCREEN_BACKGROUND),
      homeScreenIcon: GQScreenIconFactory.createFocusAndDirectrixScreenIcon(),
      // Workaround for https://github.com/phetsims/joist/issues/532, which will not be fixed.
      navigationBarIcon: GQScreenIconFactory.createFocusAndDirectrixScreenIcon(),
      // phet-io
      tandem: tandem
    };
    super(() => new FocusAndDirectrixModel(tandem.createTandem('model')), model => new FocusAndDirectrixScreenView(model, tandem.createTandem('view')), options);
  }
}
graphingQuadratics.register('FocusAndDirectrixScreen', FocusAndDirectrixScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIkdRQ29sb3JzIiwiR1FTY3JlZW5JY29uRmFjdG9yeSIsImdyYXBoaW5nUXVhZHJhdGljcyIsIkdyYXBoaW5nUXVhZHJhdGljc1N0cmluZ3MiLCJGb2N1c0FuZERpcmVjdHJpeE1vZGVsIiwiRm9jdXNBbmREaXJlY3RyaXhTY3JlZW5WaWV3IiwiRm9jdXNBbmREaXJlY3RyaXhTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwiZm9jdXNBbmREaXJlY3RyaXhTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiU0NSRUVOX0JBQ0tHUk9VTkQiLCJob21lU2NyZWVuSWNvbiIsImNyZWF0ZUZvY3VzQW5kRGlyZWN0cml4U2NyZWVuSWNvbiIsIm5hdmlnYXRpb25CYXJJY29uIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZvY3VzQW5kRGlyZWN0cml4U2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnRm9jdXMgYW5kIERpcmVjdHJpeCcgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgR1FDb2xvcnMgZnJvbSAnLi4vY29tbW9uL0dRQ29sb3JzLmpzJztcclxuaW1wb3J0IEdRU2NyZWVuSWNvbkZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL3ZpZXcvR1FTY3JlZW5JY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuaW1wb3J0IEdyYXBoaW5nUXVhZHJhdGljc1N0cmluZ3MgZnJvbSAnLi4vR3JhcGhpbmdRdWFkcmF0aWNzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBGb2N1c0FuZERpcmVjdHJpeE1vZGVsIGZyb20gJy4vbW9kZWwvRm9jdXNBbmREaXJlY3RyaXhNb2RlbC5qcyc7XHJcbmltcG9ydCBGb2N1c0FuZERpcmVjdHJpeFNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0ZvY3VzQW5kRGlyZWN0cml4U2NyZWVuVmlldy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb2N1c0FuZERpcmVjdHJpeFNjcmVlbiBleHRlbmRzIFNjcmVlbjxGb2N1c0FuZERpcmVjdHJpeE1vZGVsLCBGb2N1c0FuZERpcmVjdHJpeFNjcmVlblZpZXc+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG5cclxuICAgICAgLy8gU2NyZWVuT3B0aW9uc1xyXG4gICAgICBuYW1lOiBHcmFwaGluZ1F1YWRyYXRpY3NTdHJpbmdzLnNjcmVlbi5mb2N1c0FuZERpcmVjdHJpeFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBHUUNvbG9ycy5TQ1JFRU5fQkFDS0dST1VORCApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogR1FTY3JlZW5JY29uRmFjdG9yeS5jcmVhdGVGb2N1c0FuZERpcmVjdHJpeFNjcmVlbkljb24oKSxcclxuXHJcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvNTMyLCB3aGljaCB3aWxsIG5vdCBiZSBmaXhlZC5cclxuICAgICAgbmF2aWdhdGlvbkJhckljb246IEdRU2NyZWVuSWNvbkZhY3RvcnkuY3JlYXRlRm9jdXNBbmREaXJlY3RyaXhTY3JlZW5JY29uKCksXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgRm9jdXNBbmREaXJlY3RyaXhNb2RlbCggdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBGb2N1c0FuZERpcmVjdHJpeFNjcmVlblZpZXcoIG1vZGVsLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKSApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdRdWFkcmF0aWNzLnJlZ2lzdGVyKCAnRm9jdXNBbmREaXJlY3RyaXhTY3JlZW4nLCBGb2N1c0FuZERpcmVjdHJpeFNjcmVlbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFFaEQsT0FBT0MsUUFBUSxNQUFNLHVCQUF1QjtBQUM1QyxPQUFPQyxtQkFBbUIsTUFBTSx1Q0FBdUM7QUFDdkUsT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBQ3pELE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxzQkFBc0IsTUFBTSxtQ0FBbUM7QUFDdEUsT0FBT0MsMkJBQTJCLE1BQU0sdUNBQXVDO0FBRS9FLGVBQWUsTUFBTUMsdUJBQXVCLFNBQVNQLE1BQU0sQ0FBc0Q7RUFFeEdRLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxPQUFPLEdBQUc7TUFFZDtNQUNBQyxJQUFJLEVBQUVQLHlCQUF5QixDQUFDUSxNQUFNLENBQUNDLCtCQUErQjtNQUN0RUMsdUJBQXVCLEVBQUUsSUFBSWYsUUFBUSxDQUFFRSxRQUFRLENBQUNjLGlCQUFrQixDQUFDO01BQ25FQyxjQUFjLEVBQUVkLG1CQUFtQixDQUFDZSxpQ0FBaUMsQ0FBQyxDQUFDO01BRXZFO01BQ0FDLGlCQUFpQixFQUFFaEIsbUJBQW1CLENBQUNlLGlDQUFpQyxDQUFDLENBQUM7TUFFMUU7TUFDQVIsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJSixzQkFBc0IsQ0FBRUksTUFBTSxDQUFDVSxZQUFZLENBQUUsT0FBUSxDQUFFLENBQUMsRUFDbEVDLEtBQUssSUFBSSxJQUFJZCwyQkFBMkIsQ0FBRWMsS0FBSyxFQUFFWCxNQUFNLENBQUNVLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUNoRlQsT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCxrQkFBa0IsQ0FBQ2tCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRWQsdUJBQXdCLENBQUMifQ==