// Copyright 2018-2023, University of Colorado Boulder

/**
 * Panel that contains controls for various features related to the graph on the 'Focus and Directrix' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HSeparator, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import GQColors from '../../common/GQColors.js';
import GQConstants from '../../common/GQConstants.js';
import GQCheckbox from '../../common/view/GQCheckbox.js';
import graphingQuadratics from '../../graphingQuadratics.js';
export default class FocusAndDirectrixGraphControlPanel extends Panel {
  constructor(viewProperties, tandem) {
    const options = combineOptions({}, GQConstants.PANEL_OPTIONS, {
      tandem: tandem,
      phetioDocumentation: 'panel that contains controls related to the graph'
    });
    const coordinatesVisibleProperty = viewProperties.coordinatesVisibleProperty;
    assert && assert(coordinatesVisibleProperty);
    const vertexVisibleProperty = viewProperties.vertexVisibleProperty;
    assert && assert(vertexVisibleProperty);

    // checkboxes
    const vertexCheckbox = GQCheckbox.createVertexManipulatorCheckbox(vertexVisibleProperty, tandem.createTandem('vertexCheckbox'));
    const focusCheckbox = GQCheckbox.createFocusCheckbox(viewProperties.focusVisibleProperty, tandem.createTandem('focusCheckbox'));
    const directrixCheckbox = GQCheckbox.createDirectrixCheckbox(viewProperties.directrixVisibleProperty, tandem.createTandem('directrixCheckbox'));
    const pointOnParabolaCheckbox = GQCheckbox.createPointOnParabolaCheckbox(viewProperties.pointOnParabolaVisibleProperty, tandem.createTandem('pointOnParabolaCheckbox'));
    const equationsCheckbox = GQCheckbox.createEquationsCheckbox(viewProperties.equationsVisibleProperty, tandem.createTandem('equationsCheckbox'));
    const coordinatesCheckbox = GQCheckbox.createCoordinatesCheckbox(coordinatesVisibleProperty, tandem.createTandem('coordinatesCheckbox'));

    // vertical layout
    const contentNode = new VBox({
      align: 'left',
      spacing: GQConstants.CHECKBOXES_Y_SPACING,
      children: [vertexCheckbox, focusCheckbox, directrixCheckbox, pointOnParabolaCheckbox, new HSeparator({
        stroke: GQColors.SEPARATOR
      }), equationsCheckbox, coordinatesCheckbox]
    });
    super(contentNode, options);
  }
}
graphingQuadratics.register('FocusAndDirectrixGraphControlPanel', FocusAndDirectrixGraphControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21iaW5lT3B0aW9ucyIsIkhTZXBhcmF0b3IiLCJWQm94IiwiUGFuZWwiLCJHUUNvbG9ycyIsIkdRQ29uc3RhbnRzIiwiR1FDaGVja2JveCIsImdyYXBoaW5nUXVhZHJhdGljcyIsIkZvY3VzQW5kRGlyZWN0cml4R3JhcGhDb250cm9sUGFuZWwiLCJjb25zdHJ1Y3RvciIsInZpZXdQcm9wZXJ0aWVzIiwidGFuZGVtIiwib3B0aW9ucyIsIlBBTkVMX09QVElPTlMiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwiY29vcmRpbmF0ZXNWaXNpYmxlUHJvcGVydHkiLCJhc3NlcnQiLCJ2ZXJ0ZXhWaXNpYmxlUHJvcGVydHkiLCJ2ZXJ0ZXhDaGVja2JveCIsImNyZWF0ZVZlcnRleE1hbmlwdWxhdG9yQ2hlY2tib3giLCJjcmVhdGVUYW5kZW0iLCJmb2N1c0NoZWNrYm94IiwiY3JlYXRlRm9jdXNDaGVja2JveCIsImZvY3VzVmlzaWJsZVByb3BlcnR5IiwiZGlyZWN0cml4Q2hlY2tib3giLCJjcmVhdGVEaXJlY3RyaXhDaGVja2JveCIsImRpcmVjdHJpeFZpc2libGVQcm9wZXJ0eSIsInBvaW50T25QYXJhYm9sYUNoZWNrYm94IiwiY3JlYXRlUG9pbnRPblBhcmFib2xhQ2hlY2tib3giLCJwb2ludE9uUGFyYWJvbGFWaXNpYmxlUHJvcGVydHkiLCJlcXVhdGlvbnNDaGVja2JveCIsImNyZWF0ZUVxdWF0aW9uc0NoZWNrYm94IiwiZXF1YXRpb25zVmlzaWJsZVByb3BlcnR5IiwiY29vcmRpbmF0ZXNDaGVja2JveCIsImNyZWF0ZUNvb3JkaW5hdGVzQ2hlY2tib3giLCJjb250ZW50Tm9kZSIsImFsaWduIiwic3BhY2luZyIsIkNIRUNLQk9YRVNfWV9TUEFDSU5HIiwiY2hpbGRyZW4iLCJzdHJva2UiLCJTRVBBUkFUT1IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZvY3VzQW5kRGlyZWN0cml4R3JhcGhDb250cm9sUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGFuZWwgdGhhdCBjb250YWlucyBjb250cm9scyBmb3IgdmFyaW91cyBmZWF0dXJlcyByZWxhdGVkIHRvIHRoZSBncmFwaCBvbiB0aGUgJ0ZvY3VzIGFuZCBEaXJlY3RyaXgnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBIU2VwYXJhdG9yLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhbmVsLCB7IFBhbmVsT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHUUNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vR1FDb2xvcnMuanMnO1xyXG5pbXBvcnQgR1FDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0dRQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdRQ2hlY2tib3ggZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvR1FDaGVja2JveC5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuaW1wb3J0IEZvY3VzQW5kRGlyZWN0cml4Vmlld1Byb3BlcnRpZXMgZnJvbSAnLi9Gb2N1c0FuZERpcmVjdHJpeFZpZXdQcm9wZXJ0aWVzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvY3VzQW5kRGlyZWN0cml4R3JhcGhDb250cm9sUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggdmlld1Byb3BlcnRpZXM6IEZvY3VzQW5kRGlyZWN0cml4Vmlld1Byb3BlcnRpZXMsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBjb21iaW5lT3B0aW9uczxQYW5lbE9wdGlvbnM+KCB7fSwgR1FDb25zdGFudHMuUEFORUxfT1BUSU9OUywge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3BhbmVsIHRoYXQgY29udGFpbnMgY29udHJvbHMgcmVsYXRlZCB0byB0aGUgZ3JhcGgnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgY29vcmRpbmF0ZXNWaXNpYmxlUHJvcGVydHkgPSB2aWV3UHJvcGVydGllcy5jb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSE7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSApO1xyXG4gICAgY29uc3QgdmVydGV4VmlzaWJsZVByb3BlcnR5ID0gdmlld1Byb3BlcnRpZXMudmVydGV4VmlzaWJsZVByb3BlcnR5ITtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHZlcnRleFZpc2libGVQcm9wZXJ0eSApO1xyXG5cclxuICAgIC8vIGNoZWNrYm94ZXNcclxuICAgIGNvbnN0IHZlcnRleENoZWNrYm94ID0gR1FDaGVja2JveC5jcmVhdGVWZXJ0ZXhNYW5pcHVsYXRvckNoZWNrYm94KCB2ZXJ0ZXhWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2ZXJ0ZXhDaGVja2JveCcgKSApO1xyXG4gICAgY29uc3QgZm9jdXNDaGVja2JveCA9IEdRQ2hlY2tib3guY3JlYXRlRm9jdXNDaGVja2JveCggdmlld1Byb3BlcnRpZXMuZm9jdXNWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdmb2N1c0NoZWNrYm94JyApICk7XHJcbiAgICBjb25zdCBkaXJlY3RyaXhDaGVja2JveCA9IEdRQ2hlY2tib3guY3JlYXRlRGlyZWN0cml4Q2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLmRpcmVjdHJpeFZpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2RpcmVjdHJpeENoZWNrYm94JyApICk7XHJcbiAgICBjb25zdCBwb2ludE9uUGFyYWJvbGFDaGVja2JveCA9IEdRQ2hlY2tib3guY3JlYXRlUG9pbnRPblBhcmFib2xhQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLnBvaW50T25QYXJhYm9sYVZpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BvaW50T25QYXJhYm9sYUNoZWNrYm94JyApICk7XHJcbiAgICBjb25zdCBlcXVhdGlvbnNDaGVja2JveCA9IEdRQ2hlY2tib3guY3JlYXRlRXF1YXRpb25zQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLmVxdWF0aW9uc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2VxdWF0aW9uc0NoZWNrYm94JyApICk7XHJcbiAgICBjb25zdCBjb29yZGluYXRlc0NoZWNrYm94ID0gR1FDaGVja2JveC5jcmVhdGVDb29yZGluYXRlc0NoZWNrYm94KCBjb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Nvb3JkaW5hdGVzQ2hlY2tib3gnICkgKTtcclxuXHJcbiAgICAvLyB2ZXJ0aWNhbCBsYXlvdXRcclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gbmV3IFZCb3goIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogR1FDb25zdGFudHMuQ0hFQ0tCT1hFU19ZX1NQQUNJTkcsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgdmVydGV4Q2hlY2tib3gsXHJcbiAgICAgICAgZm9jdXNDaGVja2JveCxcclxuICAgICAgICBkaXJlY3RyaXhDaGVja2JveCxcclxuICAgICAgICBwb2ludE9uUGFyYWJvbGFDaGVja2JveCxcclxuICAgICAgICBuZXcgSFNlcGFyYXRvciggeyBzdHJva2U6IEdRQ29sb3JzLlNFUEFSQVRPUiB9ICksXHJcbiAgICAgICAgZXF1YXRpb25zQ2hlY2tib3gsXHJcbiAgICAgICAgY29vcmRpbmF0ZXNDaGVja2JveFxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnROb2RlLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmFwaGluZ1F1YWRyYXRpY3MucmVnaXN0ZXIoICdGb2N1c0FuZERpcmVjdHJpeEdyYXBoQ29udHJvbFBhbmVsJywgRm9jdXNBbmREaXJlY3RyaXhHcmFwaENvbnRyb2xQYW5lbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxjQUFjLFFBQVEsdUNBQXVDO0FBQ3RFLFNBQVNDLFVBQVUsRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNwRSxPQUFPQyxLQUFLLE1BQXdCLDZCQUE2QjtBQUVqRSxPQUFPQyxRQUFRLE1BQU0sMEJBQTBCO0FBQy9DLE9BQU9DLFdBQVcsTUFBTSw2QkFBNkI7QUFDckQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFHNUQsZUFBZSxNQUFNQyxrQ0FBa0MsU0FBU0wsS0FBSyxDQUFDO0VBRTdETSxXQUFXQSxDQUFFQyxjQUErQyxFQUFFQyxNQUFjLEVBQUc7SUFFcEYsTUFBTUMsT0FBTyxHQUFHWixjQUFjLENBQWdCLENBQUMsQ0FBQyxFQUFFSyxXQUFXLENBQUNRLGFBQWEsRUFBRTtNQUMzRUYsTUFBTSxFQUFFQSxNQUFNO01BQ2RHLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVILE1BQU1DLDBCQUEwQixHQUFHTCxjQUFjLENBQUNLLDBCQUEyQjtJQUM3RUMsTUFBTSxJQUFJQSxNQUFNLENBQUVELDBCQUEyQixDQUFDO0lBQzlDLE1BQU1FLHFCQUFxQixHQUFHUCxjQUFjLENBQUNPLHFCQUFzQjtJQUNuRUQsTUFBTSxJQUFJQSxNQUFNLENBQUVDLHFCQUFzQixDQUFDOztJQUV6QztJQUNBLE1BQU1DLGNBQWMsR0FBR1osVUFBVSxDQUFDYSwrQkFBK0IsQ0FBRUYscUJBQXFCLEVBQ3RGTixNQUFNLENBQUNTLFlBQVksQ0FBRSxnQkFBaUIsQ0FBRSxDQUFDO0lBQzNDLE1BQU1DLGFBQWEsR0FBR2YsVUFBVSxDQUFDZ0IsbUJBQW1CLENBQUVaLGNBQWMsQ0FBQ2Esb0JBQW9CLEVBQ3ZGWixNQUFNLENBQUNTLFlBQVksQ0FBRSxlQUFnQixDQUFFLENBQUM7SUFDMUMsTUFBTUksaUJBQWlCLEdBQUdsQixVQUFVLENBQUNtQix1QkFBdUIsQ0FBRWYsY0FBYyxDQUFDZ0Isd0JBQXdCLEVBQ25HZixNQUFNLENBQUNTLFlBQVksQ0FBRSxtQkFBb0IsQ0FBRSxDQUFDO0lBQzlDLE1BQU1PLHVCQUF1QixHQUFHckIsVUFBVSxDQUFDc0IsNkJBQTZCLENBQUVsQixjQUFjLENBQUNtQiw4QkFBOEIsRUFDckhsQixNQUFNLENBQUNTLFlBQVksQ0FBRSx5QkFBMEIsQ0FBRSxDQUFDO0lBQ3BELE1BQU1VLGlCQUFpQixHQUFHeEIsVUFBVSxDQUFDeUIsdUJBQXVCLENBQUVyQixjQUFjLENBQUNzQix3QkFBd0IsRUFDbkdyQixNQUFNLENBQUNTLFlBQVksQ0FBRSxtQkFBb0IsQ0FBRSxDQUFDO0lBQzlDLE1BQU1hLG1CQUFtQixHQUFHM0IsVUFBVSxDQUFDNEIseUJBQXlCLENBQUVuQiwwQkFBMEIsRUFDMUZKLE1BQU0sQ0FBQ1MsWUFBWSxDQUFFLHFCQUFzQixDQUFFLENBQUM7O0lBRWhEO0lBQ0EsTUFBTWUsV0FBVyxHQUFHLElBQUlqQyxJQUFJLENBQUU7TUFDNUJrQyxLQUFLLEVBQUUsTUFBTTtNQUNiQyxPQUFPLEVBQUVoQyxXQUFXLENBQUNpQyxvQkFBb0I7TUFDekNDLFFBQVEsRUFBRSxDQUNSckIsY0FBYyxFQUNkRyxhQUFhLEVBQ2JHLGlCQUFpQixFQUNqQkcsdUJBQXVCLEVBQ3ZCLElBQUkxQixVQUFVLENBQUU7UUFBRXVDLE1BQU0sRUFBRXBDLFFBQVEsQ0FBQ3FDO01BQVUsQ0FBRSxDQUFDLEVBQ2hEWCxpQkFBaUIsRUFDakJHLG1CQUFtQjtJQUV2QixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVFLFdBQVcsRUFBRXZCLE9BQVEsQ0FBQztFQUMvQjtBQUNGO0FBRUFMLGtCQUFrQixDQUFDbUMsUUFBUSxDQUFFLG9DQUFvQyxFQUFFbEMsa0NBQW1DLENBQUMifQ==