// Copyright 2018-2023, University of Colorado Boulder

/**
 * Displays the directrix for a quadratic.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import { Line, Node } from '../../../../scenery/js/imports.js';
import GQColors from '../../common/GQColors.js';
import GQConstants from '../../common/GQConstants.js';
import GQEquationFactory from '../../common/view/GQEquationFactory.js';
import GQEquationNode from '../../common/view/GQEquationNode.js';
import graphingQuadratics from '../../graphingQuadratics.js';
export default class DirectrixNode extends Node {
  constructor(quadraticProperty, graph, modelViewTransform, directrixVisibleProperty, equationsVisibleProperty) {
    // horizontal line
    const lineNode = new Line(0, 0, 0, 1, {
      stroke: GQColors.DIRECTRIX,
      lineWidth: GQConstants.DIRECTRIX_LINE_WIDTH,
      lineDash: GQConstants.DIRECTRIX_LINE_DASH
    });

    // equation on a translucent background
    const equationNode = new GQEquationNode({
      textOptions: {
        fill: GQColors.DIRECTRIX
      },
      visibleProperty: equationsVisibleProperty,
      maxWidth: 100 // determined empirically
    });

    super({
      children: [lineNode, equationNode],
      visibleProperty: new DerivedProperty([directrixVisibleProperty, quadraticProperty], (directrixVisible, quadratic) => directrixVisible &&
      // the Directrix checkbox is checked
      quadratic.directrix !== undefined &&
      // the quadratic has a directrix
      graph.yRange.contains(quadratic.directrix) // the directrix (y=N) is on the graph
      )
    });

    // endpoints of the line in model coordinates
    const minX = modelViewTransform.modelToViewX(graph.xRange.min);
    const maxX = modelViewTransform.modelToViewX(graph.xRange.max);

    // update when the interactive quadratic changes
    quadraticProperty.link(quadratic => {
      assert && assert(quadratic.isaParabola(), `expected a parabola, quadratic=${quadratic}`);
      const directrix = quadratic.directrix || 0;
      const vertex = quadratic.vertex;
      assert && assert(vertex);

      // update the horizontal line
      const y = modelViewTransform.modelToViewY(directrix);
      lineNode.setLine(minX, y, maxX, y);

      // update the equation's text
      equationNode.setTextString(GQEquationFactory.createDirectrix(directrix));

      // position the equation to avoid overlapping vertex and x-axis
      if (vertex.x >= 0) {
        // vertex is at or to the right of origin, so put equation on left end of line
        equationNode.left = modelViewTransform.modelToViewX(graph.xRange.min + GQConstants.EQUATION_X_MARGIN);
      } else {
        // vertex is to the left of origin, so put equation on right end of line
        equationNode.right = modelViewTransform.modelToViewX(graph.xRange.max - GQConstants.EQUATION_X_MARGIN);
      }

      // space between the equation and directrix
      if (directrix > graph.xRange.max - 1) {
        equationNode.top = lineNode.bottom + GQConstants.EQUATION_CURVE_SPACING;
      } else {
        equationNode.bottom = lineNode.top - GQConstants.EQUATION_CURVE_SPACING;
      }
    });
  }
}
graphingQuadratics.register('DirectrixNode', DirectrixNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJMaW5lIiwiTm9kZSIsIkdRQ29sb3JzIiwiR1FDb25zdGFudHMiLCJHUUVxdWF0aW9uRmFjdG9yeSIsIkdRRXF1YXRpb25Ob2RlIiwiZ3JhcGhpbmdRdWFkcmF0aWNzIiwiRGlyZWN0cml4Tm9kZSIsImNvbnN0cnVjdG9yIiwicXVhZHJhdGljUHJvcGVydHkiLCJncmFwaCIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImRpcmVjdHJpeFZpc2libGVQcm9wZXJ0eSIsImVxdWF0aW9uc1Zpc2libGVQcm9wZXJ0eSIsImxpbmVOb2RlIiwic3Ryb2tlIiwiRElSRUNUUklYIiwibGluZVdpZHRoIiwiRElSRUNUUklYX0xJTkVfV0lEVEgiLCJsaW5lRGFzaCIsIkRJUkVDVFJJWF9MSU5FX0RBU0giLCJlcXVhdGlvbk5vZGUiLCJ0ZXh0T3B0aW9ucyIsImZpbGwiLCJ2aXNpYmxlUHJvcGVydHkiLCJtYXhXaWR0aCIsImNoaWxkcmVuIiwiZGlyZWN0cml4VmlzaWJsZSIsInF1YWRyYXRpYyIsImRpcmVjdHJpeCIsInVuZGVmaW5lZCIsInlSYW5nZSIsImNvbnRhaW5zIiwibWluWCIsIm1vZGVsVG9WaWV3WCIsInhSYW5nZSIsIm1pbiIsIm1heFgiLCJtYXgiLCJsaW5rIiwiYXNzZXJ0IiwiaXNhUGFyYWJvbGEiLCJ2ZXJ0ZXgiLCJ5IiwibW9kZWxUb1ZpZXdZIiwic2V0TGluZSIsInNldFRleHRTdHJpbmciLCJjcmVhdGVEaXJlY3RyaXgiLCJ4IiwibGVmdCIsIkVRVUFUSU9OX1hfTUFSR0lOIiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJFUVVBVElPTl9DVVJWRV9TUEFDSU5HIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaXJlY3RyaXhOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIHRoZSBkaXJlY3RyaXggZm9yIGEgcXVhZHJhdGljLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEdRQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9HUUNvbG9ycy5qcyc7XHJcbmltcG9ydCBHUUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vR1FDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgR1FFcXVhdGlvbkZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvR1FFcXVhdGlvbkZhY3RvcnkuanMnO1xyXG5pbXBvcnQgR1FFcXVhdGlvbk5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvR1FFcXVhdGlvbk5vZGUuanMnO1xyXG5pbXBvcnQgZ3JhcGhpbmdRdWFkcmF0aWNzIGZyb20gJy4uLy4uL2dyYXBoaW5nUXVhZHJhdGljcy5qcyc7XHJcbmltcG9ydCBRdWFkcmF0aWMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1F1YWRyYXRpYy5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IEdyYXBoIGZyb20gJy4uLy4uLy4uLy4uL2dyYXBoaW5nLWxpbmVzL2pzL2NvbW1vbi9tb2RlbC9HcmFwaC5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpcmVjdHJpeE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBxdWFkcmF0aWNQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8UXVhZHJhdGljPixcclxuICAgICAgICAgICAgICAgICAgICAgIGdyYXBoOiBHcmFwaCwgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZGlyZWN0cml4VmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIGVxdWF0aW9uc1Zpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4gKSB7XHJcblxyXG4gICAgLy8gaG9yaXpvbnRhbCBsaW5lXHJcbiAgICBjb25zdCBsaW5lTm9kZSA9IG5ldyBMaW5lKCAwLCAwLCAwLCAxLCB7XHJcbiAgICAgIHN0cm9rZTogR1FDb2xvcnMuRElSRUNUUklYLFxyXG4gICAgICBsaW5lV2lkdGg6IEdRQ29uc3RhbnRzLkRJUkVDVFJJWF9MSU5FX1dJRFRILFxyXG4gICAgICBsaW5lRGFzaDogR1FDb25zdGFudHMuRElSRUNUUklYX0xJTkVfREFTSFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGVxdWF0aW9uIG9uIGEgdHJhbnNsdWNlbnQgYmFja2dyb3VuZFxyXG4gICAgY29uc3QgZXF1YXRpb25Ob2RlID0gbmV3IEdRRXF1YXRpb25Ob2RlKCB7XHJcbiAgICAgIHRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgZmlsbDogR1FDb2xvcnMuRElSRUNUUklYXHJcbiAgICAgIH0sXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogZXF1YXRpb25zVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICBtYXhXaWR0aDogMTAwIC8vIGRldGVybWluZWQgZW1waXJpY2FsbHlcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBjaGlsZHJlbjogWyBsaW5lTm9kZSwgZXF1YXRpb25Ob2RlIF0sXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgICBbIGRpcmVjdHJpeFZpc2libGVQcm9wZXJ0eSwgcXVhZHJhdGljUHJvcGVydHkgXSxcclxuICAgICAgICAoIGRpcmVjdHJpeFZpc2libGUsIHF1YWRyYXRpYyApID0+XHJcbiAgICAgICAgICBkaXJlY3RyaXhWaXNpYmxlICYmICAvLyB0aGUgRGlyZWN0cml4IGNoZWNrYm94IGlzIGNoZWNrZWRcclxuICAgICAgICAgICggcXVhZHJhdGljLmRpcmVjdHJpeCAhPT0gdW5kZWZpbmVkICkgJiYgLy8gdGhlIHF1YWRyYXRpYyBoYXMgYSBkaXJlY3RyaXhcclxuICAgICAgICAgIGdyYXBoLnlSYW5nZS5jb250YWlucyggcXVhZHJhdGljLmRpcmVjdHJpeCApIC8vIHRoZSBkaXJlY3RyaXggKHk9TikgaXMgb24gdGhlIGdyYXBoXHJcbiAgICAgIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBlbmRwb2ludHMgb2YgdGhlIGxpbmUgaW4gbW9kZWwgY29vcmRpbmF0ZXNcclxuICAgIGNvbnN0IG1pblggPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBncmFwaC54UmFuZ2UubWluICk7XHJcbiAgICBjb25zdCBtYXhYID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggZ3JhcGgueFJhbmdlLm1heCApO1xyXG5cclxuICAgIC8vIHVwZGF0ZSB3aGVuIHRoZSBpbnRlcmFjdGl2ZSBxdWFkcmF0aWMgY2hhbmdlc1xyXG4gICAgcXVhZHJhdGljUHJvcGVydHkubGluayggcXVhZHJhdGljID0+IHtcclxuXHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHF1YWRyYXRpYy5pc2FQYXJhYm9sYSgpLCBgZXhwZWN0ZWQgYSBwYXJhYm9sYSwgcXVhZHJhdGljPSR7cXVhZHJhdGljfWAgKTtcclxuICAgICAgY29uc3QgZGlyZWN0cml4ID0gcXVhZHJhdGljLmRpcmVjdHJpeCB8fCAwO1xyXG4gICAgICBjb25zdCB2ZXJ0ZXggPSBxdWFkcmF0aWMudmVydGV4ITtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdmVydGV4ICk7XHJcblxyXG4gICAgICAvLyB1cGRhdGUgdGhlIGhvcml6b250YWwgbGluZVxyXG4gICAgICBjb25zdCB5ID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggZGlyZWN0cml4ICk7XHJcbiAgICAgIGxpbmVOb2RlLnNldExpbmUoIG1pblgsIHksIG1heFgsIHkgKTtcclxuXHJcbiAgICAgIC8vIHVwZGF0ZSB0aGUgZXF1YXRpb24ncyB0ZXh0XHJcbiAgICAgIGVxdWF0aW9uTm9kZS5zZXRUZXh0U3RyaW5nKCBHUUVxdWF0aW9uRmFjdG9yeS5jcmVhdGVEaXJlY3RyaXgoIGRpcmVjdHJpeCApICk7XHJcblxyXG4gICAgICAvLyBwb3NpdGlvbiB0aGUgZXF1YXRpb24gdG8gYXZvaWQgb3ZlcmxhcHBpbmcgdmVydGV4IGFuZCB4LWF4aXNcclxuICAgICAgaWYgKCB2ZXJ0ZXgueCA+PSAwICkge1xyXG5cclxuICAgICAgICAvLyB2ZXJ0ZXggaXMgYXQgb3IgdG8gdGhlIHJpZ2h0IG9mIG9yaWdpbiwgc28gcHV0IGVxdWF0aW9uIG9uIGxlZnQgZW5kIG9mIGxpbmVcclxuICAgICAgICBlcXVhdGlvbk5vZGUubGVmdCA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIGdyYXBoLnhSYW5nZS5taW4gKyBHUUNvbnN0YW50cy5FUVVBVElPTl9YX01BUkdJTiApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHZlcnRleCBpcyB0byB0aGUgbGVmdCBvZiBvcmlnaW4sIHNvIHB1dCBlcXVhdGlvbiBvbiByaWdodCBlbmQgb2YgbGluZVxyXG4gICAgICAgIGVxdWF0aW9uTm9kZS5yaWdodCA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIGdyYXBoLnhSYW5nZS5tYXggLSBHUUNvbnN0YW50cy5FUVVBVElPTl9YX01BUkdJTiApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBzcGFjZSBiZXR3ZWVuIHRoZSBlcXVhdGlvbiBhbmQgZGlyZWN0cml4XHJcbiAgICAgIGlmICggZGlyZWN0cml4ID4gZ3JhcGgueFJhbmdlLm1heCAtIDEgKSB7XHJcbiAgICAgICAgZXF1YXRpb25Ob2RlLnRvcCA9IGxpbmVOb2RlLmJvdHRvbSArIEdRQ29uc3RhbnRzLkVRVUFUSU9OX0NVUlZFX1NQQUNJTkc7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZXF1YXRpb25Ob2RlLmJvdHRvbSA9IGxpbmVOb2RlLnRvcCAtIEdRQ29uc3RhbnRzLkVRVUFUSU9OX0NVUlZFX1NQQUNJTkc7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nUXVhZHJhdGljcy5yZWdpc3RlciggJ0RpcmVjdHJpeE5vZGUnLCBEaXJlY3RyaXhOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLFFBQVEsTUFBTSwwQkFBMEI7QUFDL0MsT0FBT0MsV0FBVyxNQUFNLDZCQUE2QjtBQUNyRCxPQUFPQyxpQkFBaUIsTUFBTSx3Q0FBd0M7QUFDdEUsT0FBT0MsY0FBYyxNQUFNLHFDQUFxQztBQUNoRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFNNUQsZUFBZSxNQUFNQyxhQUFhLFNBQVNOLElBQUksQ0FBQztFQUV2Q08sV0FBV0EsQ0FBRUMsaUJBQStDLEVBQy9DQyxLQUFZLEVBQUVDLGtCQUF1QyxFQUNyREMsd0JBQW9ELEVBQ3BEQyx3QkFBb0QsRUFBRztJQUV6RTtJQUNBLE1BQU1DLFFBQVEsR0FBRyxJQUFJZCxJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUs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