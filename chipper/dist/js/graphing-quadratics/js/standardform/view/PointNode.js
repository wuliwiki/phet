// Copyright 2018-2023, University of Colorado Boulder

/**
 * PointNode is a non-interactive point on the graph, labeled with (x,y) coordinates.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Circle, Node } from '../../../../scenery/js/imports.js';
import CoordinatesNode from '../../common/view/CoordinatesNode.js';
import graphingQuadratics from '../../graphingQuadratics.js';

// Positions the coordinates relative to the point

const DEFAULT_LAYOUT_COORDINATES = (coordinatesNode, pointNode) => {
  // centered above the point
  coordinatesNode.centerX = pointNode.centerX;
  coordinatesNode.bottom = pointNode.top - 5;
};
export default class PointNode extends Node {
  constructor(coordinatesProperty, coordinatesVisibleProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      radius: 10,
      coordinatesBackgroundColor: 'black',
      coordinatesForegroundColor: 'white',
      coordinatesDecimals: 0,
      layoutCoordinates: DEFAULT_LAYOUT_COORDINATES,
      // NodeOptions
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);

    // the point
    const pointNode = new Circle(options.radius, {
      fill: options.coordinatesBackgroundColor,
      x: 0,
      y: 0
    });

    // the coordinates
    const coordinatesNode = new CoordinatesNode(coordinatesProperty, {
      backgroundColor: options.coordinatesBackgroundColor,
      foregroundColor: options.coordinatesForegroundColor,
      decimals: options.coordinatesDecimals,
      visibleProperty: coordinatesVisibleProperty,
      tandem: options.tandem.createTandem('coordinatesNode'),
      phetioDocumentation: 'coordinates displayed on this point'
    });
    options.children = [pointNode, coordinatesNode];
    super(options);

    // Update layout
    coordinatesNode.boundsProperty.link(() => options.layoutCoordinates(coordinatesNode, pointNode));
  }
}
graphingQuadratics.register('PointNode', PointNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJDaXJjbGUiLCJOb2RlIiwiQ29vcmRpbmF0ZXNOb2RlIiwiZ3JhcGhpbmdRdWFkcmF0aWNzIiwiREVGQVVMVF9MQVlPVVRfQ09PUkRJTkFURVMiLCJjb29yZGluYXRlc05vZGUiLCJwb2ludE5vZGUiLCJjZW50ZXJYIiwiYm90dG9tIiwidG9wIiwiUG9pbnROb2RlIiwiY29uc3RydWN0b3IiLCJjb29yZGluYXRlc1Byb3BlcnR5IiwiY29vcmRpbmF0ZXNWaXNpYmxlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicmFkaXVzIiwiY29vcmRpbmF0ZXNCYWNrZ3JvdW5kQ29sb3IiLCJjb29yZGluYXRlc0ZvcmVncm91bmRDb2xvciIsImNvb3JkaW5hdGVzRGVjaW1hbHMiLCJsYXlvdXRDb29yZGluYXRlcyIsInZpc2libGVQcm9wZXJ0eU9wdGlvbnMiLCJwaGV0aW9SZWFkT25seSIsImZpbGwiLCJ4IiwieSIsImJhY2tncm91bmRDb2xvciIsImZvcmVncm91bmRDb2xvciIsImRlY2ltYWxzIiwidmlzaWJsZVByb3BlcnR5IiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsImNoaWxkcmVuIiwiYm91bmRzUHJvcGVydHkiLCJsaW5rIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQb2ludE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUG9pbnROb2RlIGlzIGEgbm9uLWludGVyYWN0aXZlIHBvaW50IG9uIHRoZSBncmFwaCwgbGFiZWxlZCB3aXRoICh4LHkpIGNvb3JkaW5hdGVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIE5vZGUsIE5vZGVPcHRpb25zLCBOb2RlVHJhbnNsYXRpb25PcHRpb25zLCBUQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQ29vcmRpbmF0ZXNOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0Nvb3JkaW5hdGVzTm9kZS5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuXHJcbi8vIFBvc2l0aW9ucyB0aGUgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gdGhlIHBvaW50XHJcbnR5cGUgTGF5b3V0Q29vcmRpbmF0ZXNGdW5jdGlvbiA9ICggY29vcmRpbmF0ZXNOb2RlOiBOb2RlLCBwb2ludE5vZGU6IE5vZGUgKSA9PiB2b2lkO1xyXG5cclxuY29uc3QgREVGQVVMVF9MQVlPVVRfQ09PUkRJTkFURVM6IExheW91dENvb3JkaW5hdGVzRnVuY3Rpb24gPSAoIGNvb3JkaW5hdGVzTm9kZSwgcG9pbnROb2RlICkgPT4ge1xyXG4gIC8vIGNlbnRlcmVkIGFib3ZlIHRoZSBwb2ludFxyXG4gIGNvb3JkaW5hdGVzTm9kZS5jZW50ZXJYID0gcG9pbnROb2RlLmNlbnRlclg7XHJcbiAgY29vcmRpbmF0ZXNOb2RlLmJvdHRvbSA9IHBvaW50Tm9kZS50b3AgLSA1O1xyXG59O1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gcmFkaXVzIG9mIHRoZSBwb2ludFxyXG4gIHJhZGl1cz86IG51bWJlcjtcclxuXHJcbiAgLy8gb3B0aW9ucyBwYXNzZWQgdG8gQ29vcmRpbmF0ZXNOb2RlXHJcbiAgY29vcmRpbmF0ZXNCYWNrZ3JvdW5kQ29sb3I/OiBUQ29sb3I7XHJcbiAgY29vcmRpbmF0ZXNGb3JlZ3JvdW5kQ29sb3I/OiBUQ29sb3I7XHJcbiAgY29vcmRpbmF0ZXNEZWNpbWFscz86IG51bWJlcjtcclxuXHJcbiAgLy8gUG9zaXRpb25zIHRoZSBjb29yZGluYXRlcyB3aGVuIGNvb3JkaW5hdGVzUHJvcGVydHkgY2hhbmdlc1xyXG4gIGxheW91dENvb3JkaW5hdGVzPzogTGF5b3V0Q29vcmRpbmF0ZXNGdW5jdGlvbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFBvaW50Tm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgJlxyXG4gIFBpY2tPcHRpb25hbDxOb2RlT3B0aW9ucywgJ3Zpc2libGVQcm9wZXJ0eScgfCAncGhldGlvRG9jdW1lbnRhdGlvbic+ICZcclxuICBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvaW50Tm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvb3JkaW5hdGVzUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFZlY3RvcjIgfCBudWxsPixcclxuICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzVmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogUG9pbnROb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFBvaW50Tm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgcmFkaXVzOiAxMCxcclxuICAgICAgY29vcmRpbmF0ZXNCYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycsXHJcbiAgICAgIGNvb3JkaW5hdGVzRm9yZWdyb3VuZENvbG9yOiAnd2hpdGUnLFxyXG4gICAgICBjb29yZGluYXRlc0RlY2ltYWxzOiAwLFxyXG4gICAgICBsYXlvdXRDb29yZGluYXRlczogREVGQVVMVF9MQVlPVVRfQ09PUkRJTkFURVMsXHJcblxyXG4gICAgICAvLyBOb2RlT3B0aW9uc1xyXG4gICAgICB2aXNpYmxlUHJvcGVydHlPcHRpb25zOiB7IHBoZXRpb1JlYWRPbmx5OiB0cnVlIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHRoZSBwb2ludFxyXG4gICAgY29uc3QgcG9pbnROb2RlID0gbmV3IENpcmNsZSggb3B0aW9ucy5yYWRpdXMsIHtcclxuICAgICAgZmlsbDogb3B0aW9ucy5jb29yZGluYXRlc0JhY2tncm91bmRDb2xvcixcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHRoZSBjb29yZGluYXRlc1xyXG4gICAgY29uc3QgY29vcmRpbmF0ZXNOb2RlID0gbmV3IENvb3JkaW5hdGVzTm9kZSggY29vcmRpbmF0ZXNQcm9wZXJ0eSwge1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuY29vcmRpbmF0ZXNCYWNrZ3JvdW5kQ29sb3IsXHJcbiAgICAgIGZvcmVncm91bmRDb2xvcjogb3B0aW9ucy5jb29yZGluYXRlc0ZvcmVncm91bmRDb2xvcixcclxuICAgICAgZGVjaW1hbHM6IG9wdGlvbnMuY29vcmRpbmF0ZXNEZWNpbWFscyxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBjb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdjb29yZGluYXRlc05vZGUnICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdjb29yZGluYXRlcyBkaXNwbGF5ZWQgb24gdGhpcyBwb2ludCdcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBwb2ludE5vZGUsIGNvb3JkaW5hdGVzTm9kZSBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIGxheW91dFxyXG4gICAgY29vcmRpbmF0ZXNOb2RlLmJvdW5kc1Byb3BlcnR5LmxpbmsoICgpID0+IG9wdGlvbnMubGF5b3V0Q29vcmRpbmF0ZXMoIGNvb3JkaW5hdGVzTm9kZSwgcG9pbnROb2RlICkgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nUXVhZHJhdGljcy5yZWdpc3RlciggJ1BvaW50Tm9kZScsIFBvaW50Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxPQUFPQSxTQUFTLE1BQU0sdUNBQXVDO0FBRzdELFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxRQUFxRCxtQ0FBbUM7QUFDN0csT0FBT0MsZUFBZSxNQUFNLHNDQUFzQztBQUNsRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7O0FBRTVEOztBQUdBLE1BQU1DLDBCQUFxRCxHQUFHQSxDQUFFQyxlQUFlLEVBQUVDLFNBQVMsS0FBTTtFQUM5RjtFQUNBRCxlQUFlLENBQUNFLE9BQU8sR0FBR0QsU0FBUyxDQUFDQyxPQUFPO0VBQzNDRixlQUFlLENBQUNHLE1BQU0sR0FBR0YsU0FBUyxDQUFDRyxHQUFHLEdBQUcsQ0FBQztBQUM1QyxDQUFDO0FBb0JELGVBQWUsTUFBTUMsU0FBUyxTQUFTVCxJQUFJLENBQUM7RUFFbkNVLFdBQVdBLENBQUVDLG1CQUFzRCxFQUN0REMsMEJBQXNELEVBQ3REQyxlQUFpQyxFQUFHO0lBRXRELE1BQU1DLE9BQU8sR0FBR2hCLFNBQVMsQ0FBNkMsQ0FBQyxDQUFFO01BRXZFO01BQ0FpQixNQUFNLEVBQUUsRUFBRTtNQUNWQywwQkFBMEIsRUFBRSxPQUFPO01BQ25DQywwQkFBMEIsRUFBRSxPQUFPO01BQ25DQyxtQkFBbUIsRUFBRSxDQUFDO01BQ3RCQyxpQkFBaUIsRUFBRWhCLDBCQUEwQjtNQUU3QztNQUNBaUIsc0JBQXNCLEVBQUU7UUFBRUMsY0FBYyxFQUFFO01BQUs7SUFDakQsQ0FBQyxFQUFFUixlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1SLFNBQVMsR0FBRyxJQUFJTixNQUFNLENBQUVlLE9BQU8sQ0FBQ0MsTUFBTSxFQUFFO01BQzVDTyxJQUFJLEVBQUVSLE9BQU8sQ0FBQ0UsMEJBQTBCO01BQ3hDTyxDQUFDLEVBQUUsQ0FBQztNQUNKQyxDQUFDLEVBQUU7SUFDTCxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNcEIsZUFBZSxHQUFHLElBQUlILGVBQWUsQ0FBRVUsbUJBQW1CLEVBQUU7TUFDaEVjLGVBQWUsRUFBRVgsT0FBTyxDQUFDRSwwQkFBMEI7TUFDbkRVLGVBQWUsRUFBRVosT0FBTyxDQUFDRywwQkFBMEI7TUFDbkRVLFFBQVEsRUFBRWIsT0FBTyxDQUFDSSxtQkFBbUI7TUFDckNVLGVBQWUsRUFBRWhCLDBCQUEwQjtNQUMzQ2lCLE1BQU0sRUFBRWYsT0FBTyxDQUFDZSxNQUFNLENBQUNDLFlBQVksQ0FBRSxpQkFBa0IsQ0FBQztNQUN4REMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUhqQixPQUFPLENBQUNrQixRQUFRLEdBQUcsQ0FBRTNCLFNBQVMsRUFBRUQsZUFBZSxDQUFFO0lBRWpELEtBQUssQ0FBRVUsT0FBUSxDQUFDOztJQUVoQjtJQUNBVixlQUFlLENBQUM2QixjQUFjLENBQUNDLElBQUksQ0FBRSxNQUFNcEIsT0FBTyxDQUFDSyxpQkFBaUIsQ0FBRWYsZUFBZSxFQUFFQyxTQUFVLENBQUUsQ0FBQztFQUN0RztBQUNGO0FBRUFILGtCQUFrQixDQUFDaUMsUUFBUSxDQUFFLFdBQVcsRUFBRTFCLFNBQVUsQ0FBQyJ9