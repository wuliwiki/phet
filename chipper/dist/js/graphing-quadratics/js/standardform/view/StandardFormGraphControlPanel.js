// Copyright 2018-2023, University of Colorado Boulder

/**
 * Panel that contains controls for various features related to the graph on the 'Standard Form' screen.
 *
 * @author Andrea Lin
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HSeparator, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import GQColors from '../../common/GQColors.js';
import GQConstants from '../../common/GQConstants.js';
import GQCheckbox from '../../common/view/GQCheckbox.js';
import graphingQuadratics from '../../graphingQuadratics.js';
export default class StandardFormGraphControlPanel extends Panel {
  constructor(viewProperties, tandem) {
    const options = combineOptions({}, GQConstants.PANEL_OPTIONS, {
      tandem: tandem,
      phetioDocumentation: 'panel that contains controls related to the graph'
    });
    const axisOfSymmetryVisibleProperty = viewProperties.axisOfSymmetryVisibleProperty;
    assert && assert(axisOfSymmetryVisibleProperty);
    const coordinatesVisibleProperty = viewProperties.coordinatesVisibleProperty;
    assert && assert(coordinatesVisibleProperty);
    const vertexVisibleProperty = viewProperties.vertexVisibleProperty;
    assert && assert(vertexVisibleProperty);

    // checkboxes
    const vertexCheckbox = GQCheckbox.createVertexPointCheckbox(vertexVisibleProperty, tandem.createTandem('vertexCheckbox'));
    const axisOfSymmetryCheckbox = GQCheckbox.createAxisOfSymmetryCheckbox(axisOfSymmetryVisibleProperty, tandem.createTandem('axisOfSymmetryCheckbox'));
    const rootsCheckbox = GQCheckbox.createRootsCheckbox(viewProperties.rootsVisibleProperty, tandem.createTandem('rootsCheckbox'));
    const equationsCheckbox = GQCheckbox.createEquationsCheckbox(viewProperties.equationsVisibleProperty, tandem.createTandem('equationsCheckbox'));
    const coordinatesCheckbox = GQCheckbox.createCoordinatesCheckbox(coordinatesVisibleProperty, tandem.createTandem('coordinatesCheckbox'));

    // vertical layout
    const contentNode = new VBox({
      align: 'left',
      spacing: GQConstants.CHECKBOXES_Y_SPACING,
      children: [vertexCheckbox, axisOfSymmetryCheckbox, rootsCheckbox, new HSeparator({
        stroke: GQColors.SEPARATOR
      }), equationsCheckbox, coordinatesCheckbox]
    });
    super(contentNode, options);
  }
}
graphingQuadratics.register('StandardFormGraphControlPanel', StandardFormGraphControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21iaW5lT3B0aW9ucyIsIkhTZXBhcmF0b3IiLCJWQm94IiwiUGFuZWwiLCJHUUNvbG9ycyIsIkdRQ29uc3RhbnRzIiwiR1FDaGVja2JveCIsImdyYXBoaW5nUXVhZHJhdGljcyIsIlN0YW5kYXJkRm9ybUdyYXBoQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJ2aWV3UHJvcGVydGllcyIsInRhbmRlbSIsIm9wdGlvbnMiLCJQQU5FTF9PUFRJT05TIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsImF4aXNPZlN5bW1ldHJ5VmlzaWJsZVByb3BlcnR5IiwiYXNzZXJ0IiwiY29vcmRpbmF0ZXNWaXNpYmxlUHJvcGVydHkiLCJ2ZXJ0ZXhWaXNpYmxlUHJvcGVydHkiLCJ2ZXJ0ZXhDaGVja2JveCIsImNyZWF0ZVZlcnRleFBvaW50Q2hlY2tib3giLCJjcmVhdGVUYW5kZW0iLCJheGlzT2ZTeW1tZXRyeUNoZWNrYm94IiwiY3JlYXRlQXhpc09mU3ltbWV0cnlDaGVja2JveCIsInJvb3RzQ2hlY2tib3giLCJjcmVhdGVSb290c0NoZWNrYm94Iiwicm9vdHNWaXNpYmxlUHJvcGVydHkiLCJlcXVhdGlvbnNDaGVja2JveCIsImNyZWF0ZUVxdWF0aW9uc0NoZWNrYm94IiwiZXF1YXRpb25zVmlzaWJsZVByb3BlcnR5IiwiY29vcmRpbmF0ZXNDaGVja2JveCIsImNyZWF0ZUNvb3JkaW5hdGVzQ2hlY2tib3giLCJjb250ZW50Tm9kZSIsImFsaWduIiwic3BhY2luZyIsIkNIRUNLQk9YRVNfWV9TUEFDSU5HIiwiY2hpbGRyZW4iLCJzdHJva2UiLCJTRVBBUkFUT1IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN0YW5kYXJkRm9ybUdyYXBoQ29udHJvbFBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBhbmVsIHRoYXQgY29udGFpbnMgY29udHJvbHMgZm9yIHZhcmlvdXMgZmVhdHVyZXMgcmVsYXRlZCB0byB0aGUgZ3JhcGggb24gdGhlICdTdGFuZGFyZCBGb3JtJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmVhIExpblxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IEhTZXBhcmF0b3IsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwsIHsgUGFuZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEdRQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9HUUNvbG9ycy5qcyc7XHJcbmltcG9ydCBHUUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vR1FDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgR1FDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9HUUNoZWNrYm94LmpzJztcclxuaW1wb3J0IGdyYXBoaW5nUXVhZHJhdGljcyBmcm9tICcuLi8uLi9ncmFwaGluZ1F1YWRyYXRpY3MuanMnO1xyXG5pbXBvcnQgU3RhbmRhcmRGb3JtVmlld1Byb3BlcnRpZXMgZnJvbSAnLi9TdGFuZGFyZEZvcm1WaWV3UHJvcGVydGllcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGFuZGFyZEZvcm1HcmFwaENvbnRyb2xQYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2aWV3UHJvcGVydGllczogU3RhbmRhcmRGb3JtVmlld1Byb3BlcnRpZXMsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBjb21iaW5lT3B0aW9uczxQYW5lbE9wdGlvbnM+KCB7fSwgR1FDb25zdGFudHMuUEFORUxfT1BUSU9OUywge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3BhbmVsIHRoYXQgY29udGFpbnMgY29udHJvbHMgcmVsYXRlZCB0byB0aGUgZ3JhcGgnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgYXhpc09mU3ltbWV0cnlWaXNpYmxlUHJvcGVydHkgPSB2aWV3UHJvcGVydGllcy5heGlzT2ZTeW1tZXRyeVZpc2libGVQcm9wZXJ0eSE7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBheGlzT2ZTeW1tZXRyeVZpc2libGVQcm9wZXJ0eSApO1xyXG4gICAgY29uc3QgY29vcmRpbmF0ZXNWaXNpYmxlUHJvcGVydHkgPSB2aWV3UHJvcGVydGllcy5jb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSE7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSApO1xyXG4gICAgY29uc3QgdmVydGV4VmlzaWJsZVByb3BlcnR5ID0gdmlld1Byb3BlcnRpZXMudmVydGV4VmlzaWJsZVByb3BlcnR5ITtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHZlcnRleFZpc2libGVQcm9wZXJ0eSApO1xyXG5cclxuICAgIC8vIGNoZWNrYm94ZXNcclxuICAgIGNvbnN0IHZlcnRleENoZWNrYm94ID0gR1FDaGVja2JveC5jcmVhdGVWZXJ0ZXhQb2ludENoZWNrYm94KCB2ZXJ0ZXhWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2ZXJ0ZXhDaGVja2JveCcgKSApO1xyXG4gICAgY29uc3QgYXhpc09mU3ltbWV0cnlDaGVja2JveCA9IEdRQ2hlY2tib3guY3JlYXRlQXhpc09mU3ltbWV0cnlDaGVja2JveChcclxuICAgICAgYXhpc09mU3ltbWV0cnlWaXNpYmxlUHJvcGVydHksIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdheGlzT2ZTeW1tZXRyeUNoZWNrYm94JyApICk7XHJcbiAgICBjb25zdCByb290c0NoZWNrYm94ID0gR1FDaGVja2JveC5jcmVhdGVSb290c0NoZWNrYm94KCB2aWV3UHJvcGVydGllcy5yb290c1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Jvb3RzQ2hlY2tib3gnICkgKTtcclxuICAgIGNvbnN0IGVxdWF0aW9uc0NoZWNrYm94ID0gR1FDaGVja2JveC5jcmVhdGVFcXVhdGlvbnNDaGVja2JveCggdmlld1Byb3BlcnRpZXMuZXF1YXRpb25zVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnZXF1YXRpb25zQ2hlY2tib3gnICkgKTtcclxuICAgIGNvbnN0IGNvb3JkaW5hdGVzQ2hlY2tib3ggPSBHUUNoZWNrYm94LmNyZWF0ZUNvb3JkaW5hdGVzQ2hlY2tib3goIGNvb3JkaW5hdGVzVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY29vcmRpbmF0ZXNDaGVja2JveCcgKSApO1xyXG5cclxuICAgIC8vIHZlcnRpY2FsIGxheW91dFxyXG4gICAgY29uc3QgY29udGVudE5vZGUgPSBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiBHUUNvbnN0YW50cy5DSEVDS0JPWEVTX1lfU1BBQ0lORyxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICB2ZXJ0ZXhDaGVja2JveCxcclxuICAgICAgICBheGlzT2ZTeW1tZXRyeUNoZWNrYm94LFxyXG4gICAgICAgIHJvb3RzQ2hlY2tib3gsXHJcbiAgICAgICAgbmV3IEhTZXBhcmF0b3IoIHsgc3Ryb2tlOiBHUUNvbG9ycy5TRVBBUkFUT1IgfSApLFxyXG4gICAgICAgIGVxdWF0aW9uc0NoZWNrYm94LFxyXG4gICAgICAgIGNvb3JkaW5hdGVzQ2hlY2tib3hcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBjb250ZW50Tm9kZSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdRdWFkcmF0aWNzLnJlZ2lzdGVyKCAnU3RhbmRhcmRGb3JtR3JhcGhDb250cm9sUGFuZWwnLCBTdGFuZGFyZEZvcm1HcmFwaENvbnRyb2xQYW5lbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLGNBQWMsUUFBUSx1Q0FBdUM7QUFDdEUsU0FBU0MsVUFBVSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3BFLE9BQU9DLEtBQUssTUFBd0IsNkJBQTZCO0FBRWpFLE9BQU9DLFFBQVEsTUFBTSwwQkFBMEI7QUFDL0MsT0FBT0MsV0FBVyxNQUFNLDZCQUE2QjtBQUNyRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUc1RCxlQUFlLE1BQU1DLDZCQUE2QixTQUFTTCxLQUFLLENBQUM7RUFFeERNLFdBQVdBLENBQUVDLGNBQTBDLEVBQUVDLE1BQWMsRUFBRztJQUUvRSxNQUFNQyxPQUFPLEdBQUdaLGNBQWMsQ0FBZ0IsQ0FBQyxDQUFDLEVBQUVLLFdBQVcsQ0FBQ1EsYUFBYSxFQUFFO01BQzNFRixNQUFNLEVBQUVBLE1BQU07TUFDZEcsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsNkJBQTZCLEdBQUdMLGNBQWMsQ0FBQ0ssNkJBQThCO0lBQ25GQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsNkJBQThCLENBQUM7SUFDakQsTUFBTUUsMEJBQTBCLEdBQUdQLGNBQWMsQ0FBQ08sMEJBQTJCO0lBQzdFRCxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsMEJBQTJCLENBQUM7SUFDOUMsTUFBTUMscUJBQXFCLEdBQUdSLGNBQWMsQ0FBQ1EscUJBQXNCO0lBQ25FRixNQUFNLElBQUlBLE1BQU0sQ0FBRUUscUJBQXNCLENBQUM7O0lBRXpDO0lBQ0EsTUFBTUMsY0FBYyxHQUFHYixVQUFVLENBQUNjLHlCQUF5QixDQUFFRixxQkFBcUIsRUFDaEZQLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLGdCQUFpQixDQUFFLENBQUM7SUFDM0MsTUFBTUMsc0JBQXNCLEdBQUdoQixVQUFVLENBQUNpQiw0QkFBNEIsQ0FDcEVSLDZCQUE2QixFQUFFSixNQUFNLENBQUNVLFlBQVksQ0FBRSx3QkFBeUIsQ0FBRSxDQUFDO0lBQ2xGLE1BQU1HLGFBQWEsR0FBR2xCLFVBQVUsQ0FBQ21CLG1CQUFtQixDQUFFZixjQUFjLENBQUNnQixvQkFBb0IsRUFDdkZmLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLGVBQWdCLENBQUUsQ0FBQztJQUMxQyxNQUFNTSxpQkFBaUIsR0FBR3JCLFVBQVUsQ0FBQ3NCLHVCQUF1QixDQUFFbEIsY0FBYyxDQUFDbUIsd0JBQXdCLEVBQ25HbEIsTUFBTSxDQUFDVSxZQUFZLENBQUUsbUJBQW9CLENBQUUsQ0FBQztJQUM5QyxNQUFNUyxtQkFBbUIsR0FBR3hCLFVBQVUsQ0FBQ3lCLHlCQUF5QixDQUFFZCwwQkFBMEIsRUFDMUZOLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLHFCQUFzQixDQUFFLENBQUM7O0lBRWhEO0lBQ0EsTUFBTVcsV0FBVyxHQUFHLElBQUk5QixJQUFJLENBQUU7TUFDNUIrQixLQUFLLEVBQUUsTUFBTTtNQUNiQyxPQUFPLEVBQUU3QixXQUFXLENBQUM4QixvQkFBb0I7TUFDekNDLFFBQVEsRUFBRSxDQUNSakIsY0FBYyxFQUNkRyxzQkFBc0IsRUFDdEJFLGFBQWEsRUFDYixJQUFJdkIsVUFBVSxDQUFFO1FBQUVvQyxNQUFNLEVBQUVqQyxRQUFRLENBQUNrQztNQUFVLENBQUUsQ0FBQyxFQUNoRFgsaUJBQWlCLEVBQ2pCRyxtQkFBbUI7SUFFdkIsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFRSxXQUFXLEVBQUVwQixPQUFRLENBQUM7RUFDL0I7QUFDRjtBQUVBTCxrQkFBa0IsQ0FBQ2dDLFFBQVEsQ0FBRSwrQkFBK0IsRUFBRS9CLDZCQUE4QixDQUFDIn0=