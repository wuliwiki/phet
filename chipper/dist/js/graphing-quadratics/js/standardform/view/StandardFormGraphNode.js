// Copyright 2018-2023, University of Colorado Boulder

/**
 * StandardFormGraphNode is the graph for the 'Standard Form' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import AxisOfSymmetryNode from '../../common/view/AxisOfSymmetryNode.js';
import GQGraphNode from '../../common/view/GQGraphNode.js';
import graphingQuadratics from '../../graphingQuadratics.js';
import NoRealRootsNode from './NoRealRootsNode.js';
import RootsNode from './RootsNode.js';
import VertexNode from './VertexNode.js';
export default class StandardFormGraphNode extends GQGraphNode {
  constructor(model, viewProperties, tandem) {
    const axisOfSymmetryVisibleProperty = viewProperties.axisOfSymmetryVisibleProperty;
    assert && assert(axisOfSymmetryVisibleProperty);
    const coordinatesVisibleProperty = viewProperties.coordinatesVisibleProperty;
    assert && assert(coordinatesVisibleProperty);
    const vertexVisibleProperty = viewProperties.vertexVisibleProperty;
    assert && assert(vertexVisibleProperty);

    // We do NOT want to instrument the graph, so tandem is not propagated via options
    const options = {};

    // Axis of symmetry line
    const axisOfSymmetryNode = new AxisOfSymmetryNode(model.quadraticProperty, model.graph, model.modelViewTransform, axisOfSymmetryVisibleProperty, viewProperties.equationsVisibleProperty);

    // Roots
    const rootsNode = new RootsNode(model.quadraticProperty, model.graph, model.modelViewTransform, viewProperties.rootsVisibleProperty, coordinatesVisibleProperty, tandem.createTandem('rootsNode'));

    // Vertex
    const vertexNode = new VertexNode(model.quadraticProperty, model.graph, model.modelViewTransform, vertexVisibleProperty, coordinatesVisibleProperty, tandem.createTandem('vertexNode'));

    // 'NO REAL ROOTS' label
    const noRealRootsNode = new NoRealRootsNode(viewProperties.rootsVisibleProperty, vertexVisibleProperty, coordinatesVisibleProperty, model.quadraticProperty, model.modelViewTransform, tandem.createTandem('noRealRootsNode'));
    options.otherCurves = [axisOfSymmetryNode];
    options.decorations = [rootsNode, vertexNode, noRealRootsNode]; // rendered in this order

    super(model, viewProperties, options);
  }
}
graphingQuadratics.register('StandardFormGraphNode', StandardFormGraphNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBeGlzT2ZTeW1tZXRyeU5vZGUiLCJHUUdyYXBoTm9kZSIsImdyYXBoaW5nUXVhZHJhdGljcyIsIk5vUmVhbFJvb3RzTm9kZSIsIlJvb3RzTm9kZSIsIlZlcnRleE5vZGUiLCJTdGFuZGFyZEZvcm1HcmFwaE5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidmlld1Byb3BlcnRpZXMiLCJ0YW5kZW0iLCJheGlzT2ZTeW1tZXRyeVZpc2libGVQcm9wZXJ0eSIsImFzc2VydCIsImNvb3JkaW5hdGVzVmlzaWJsZVByb3BlcnR5IiwidmVydGV4VmlzaWJsZVByb3BlcnR5Iiwib3B0aW9ucyIsImF4aXNPZlN5bW1ldHJ5Tm9kZSIsInF1YWRyYXRpY1Byb3BlcnR5IiwiZ3JhcGgiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJlcXVhdGlvbnNWaXNpYmxlUHJvcGVydHkiLCJyb290c05vZGUiLCJyb290c1Zpc2libGVQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInZlcnRleE5vZGUiLCJub1JlYWxSb290c05vZGUiLCJvdGhlckN1cnZlcyIsImRlY29yYXRpb25zIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdGFuZGFyZEZvcm1HcmFwaE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3RhbmRhcmRGb3JtR3JhcGhOb2RlIGlzIHRoZSBncmFwaCBmb3IgdGhlICdTdGFuZGFyZCBGb3JtJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEF4aXNPZlN5bW1ldHJ5Tm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9BeGlzT2ZTeW1tZXRyeU5vZGUuanMnO1xyXG5pbXBvcnQgR1FHcmFwaE5vZGUsIHsgR1FHcmFwaE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvR1FHcmFwaE5vZGUuanMnO1xyXG5pbXBvcnQgZ3JhcGhpbmdRdWFkcmF0aWNzIGZyb20gJy4uLy4uL2dyYXBoaW5nUXVhZHJhdGljcy5qcyc7XHJcbmltcG9ydCBTdGFuZGFyZEZvcm1Nb2RlbCBmcm9tICcuLi9tb2RlbC9TdGFuZGFyZEZvcm1Nb2RlbC5qcyc7XHJcbmltcG9ydCBOb1JlYWxSb290c05vZGUgZnJvbSAnLi9Ob1JlYWxSb290c05vZGUuanMnO1xyXG5pbXBvcnQgUm9vdHNOb2RlIGZyb20gJy4vUm9vdHNOb2RlLmpzJztcclxuaW1wb3J0IFN0YW5kYXJkRm9ybVZpZXdQcm9wZXJ0aWVzIGZyb20gJy4vU3RhbmRhcmRGb3JtVmlld1Byb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgVmVydGV4Tm9kZSBmcm9tICcuL1ZlcnRleE5vZGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhbmRhcmRGb3JtR3JhcGhOb2RlIGV4dGVuZHMgR1FHcmFwaE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBTdGFuZGFyZEZvcm1Nb2RlbCwgdmlld1Byb3BlcnRpZXM6IFN0YW5kYXJkRm9ybVZpZXdQcm9wZXJ0aWVzLCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBheGlzT2ZTeW1tZXRyeVZpc2libGVQcm9wZXJ0eSA9IHZpZXdQcm9wZXJ0aWVzLmF4aXNPZlN5bW1ldHJ5VmlzaWJsZVByb3BlcnR5ITtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGF4aXNPZlN5bW1ldHJ5VmlzaWJsZVByb3BlcnR5ICk7XHJcbiAgICBjb25zdCBjb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSA9IHZpZXdQcm9wZXJ0aWVzLmNvb3JkaW5hdGVzVmlzaWJsZVByb3BlcnR5ITtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvb3JkaW5hdGVzVmlzaWJsZVByb3BlcnR5ICk7XHJcbiAgICBjb25zdCB2ZXJ0ZXhWaXNpYmxlUHJvcGVydHkgPSB2aWV3UHJvcGVydGllcy52ZXJ0ZXhWaXNpYmxlUHJvcGVydHkhO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdmVydGV4VmlzaWJsZVByb3BlcnR5ICk7XHJcblxyXG4gICAgLy8gV2UgZG8gTk9UIHdhbnQgdG8gaW5zdHJ1bWVudCB0aGUgZ3JhcGgsIHNvIHRhbmRlbSBpcyBub3QgcHJvcGFnYXRlZCB2aWEgb3B0aW9uc1xyXG4gICAgY29uc3Qgb3B0aW9uczogR1FHcmFwaE5vZGVPcHRpb25zID0ge307XHJcblxyXG4gICAgLy8gQXhpcyBvZiBzeW1tZXRyeSBsaW5lXHJcbiAgICBjb25zdCBheGlzT2ZTeW1tZXRyeU5vZGUgPSBuZXcgQXhpc09mU3ltbWV0cnlOb2RlKFxyXG4gICAgICBtb2RlbC5xdWFkcmF0aWNQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwuZ3JhcGgsXHJcbiAgICAgIG1vZGVsLm1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgYXhpc09mU3ltbWV0cnlWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIHZpZXdQcm9wZXJ0aWVzLmVxdWF0aW9uc1Zpc2libGVQcm9wZXJ0eSApO1xyXG5cclxuICAgIC8vIFJvb3RzXHJcbiAgICBjb25zdCByb290c05vZGUgPSBuZXcgUm9vdHNOb2RlKFxyXG4gICAgICBtb2RlbC5xdWFkcmF0aWNQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwuZ3JhcGgsXHJcbiAgICAgIG1vZGVsLm1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgdmlld1Byb3BlcnRpZXMucm9vdHNWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIGNvb3JkaW5hdGVzVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncm9vdHNOb2RlJyApXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFZlcnRleFxyXG4gICAgY29uc3QgdmVydGV4Tm9kZSA9IG5ldyBWZXJ0ZXhOb2RlKFxyXG4gICAgICBtb2RlbC5xdWFkcmF0aWNQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwuZ3JhcGgsXHJcbiAgICAgIG1vZGVsLm1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgdmVydGV4VmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICBjb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZlcnRleE5vZGUnIClcclxuICAgICk7XHJcblxyXG4gICAgLy8gJ05PIFJFQUwgUk9PVFMnIGxhYmVsXHJcbiAgICBjb25zdCBub1JlYWxSb290c05vZGUgPSBuZXcgTm9SZWFsUm9vdHNOb2RlKFxyXG4gICAgICB2aWV3UHJvcGVydGllcy5yb290c1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdmVydGV4VmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICBjb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwucXVhZHJhdGljUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLm1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ25vUmVhbFJvb3RzTm9kZScgKVxyXG4gICAgKTtcclxuXHJcbiAgICBvcHRpb25zLm90aGVyQ3VydmVzID0gWyBheGlzT2ZTeW1tZXRyeU5vZGUgXTtcclxuICAgIG9wdGlvbnMuZGVjb3JhdGlvbnMgPSBbIHJvb3RzTm9kZSwgdmVydGV4Tm9kZSwgbm9SZWFsUm9vdHNOb2RlIF07IC8vIHJlbmRlcmVkIGluIHRoaXMgb3JkZXJcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHZpZXdQcm9wZXJ0aWVzLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmFwaGluZ1F1YWRyYXRpY3MucmVnaXN0ZXIoICdTdGFuZGFyZEZvcm1HcmFwaE5vZGUnLCBTdGFuZGFyZEZvcm1HcmFwaE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztB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