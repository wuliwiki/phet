// Copyright 2014-2023, University of Colorado Boulder

/**
 * The 'Vertex Form' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import GQColors from '../common/GQColors.js';
import GQScreenIconFactory from '../common/view/GQScreenIconFactory.js';
import graphingQuadratics from '../graphingQuadratics.js';
import GraphingQuadraticsStrings from '../GraphingQuadraticsStrings.js';
import VertexFormModel from './model/VertexFormModel.js';
import VertexFormScreenView from './view/VertexFormScreenView.js';
export default class VertexFormScreen extends Screen {
  constructor(tandem) {
    const options = {
      // ScreenOptions
      name: GraphingQuadraticsStrings.screen.vertexFormStringProperty,
      backgroundColorProperty: new Property(GQColors.SCREEN_BACKGROUND),
      homeScreenIcon: GQScreenIconFactory.createVertexFormScreenIcon(),
      // Workaround for https://github.com/phetsims/joist/issues/532, which will not be fixed.
      navigationBarIcon: GQScreenIconFactory.createVertexFormScreenIcon(),
      // phet-io
      tandem: tandem
    };
    super(() => new VertexFormModel(tandem.createTandem('model')), model => new VertexFormScreenView(model, tandem.createTandem('view')), options);
  }
}
graphingQuadratics.register('VertexFormScreen', VertexFormScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIkdRQ29sb3JzIiwiR1FTY3JlZW5JY29uRmFjdG9yeSIsImdyYXBoaW5nUXVhZHJhdGljcyIsIkdyYXBoaW5nUXVhZHJhdGljc1N0cmluZ3MiLCJWZXJ0ZXhGb3JtTW9kZWwiLCJWZXJ0ZXhGb3JtU2NyZWVuVmlldyIsIlZlcnRleEZvcm1TY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwidmVydGV4Rm9ybVN0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJTQ1JFRU5fQkFDS0dST1VORCIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlVmVydGV4Rm9ybVNjcmVlbkljb24iLCJuYXZpZ2F0aW9uQmFySWNvbiIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJWZXJ0ZXhGb3JtU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnVmVydGV4IEZvcm0nIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEdRQ29sb3JzIGZyb20gJy4uL2NvbW1vbi9HUUNvbG9ycy5qcyc7XHJcbmltcG9ydCBHUVNjcmVlbkljb25GYWN0b3J5IGZyb20gJy4uL2NvbW1vbi92aWV3L0dRU2NyZWVuSWNvbkZhY3RvcnkuanMnO1xyXG5pbXBvcnQgZ3JhcGhpbmdRdWFkcmF0aWNzIGZyb20gJy4uL2dyYXBoaW5nUXVhZHJhdGljcy5qcyc7XHJcbmltcG9ydCBHcmFwaGluZ1F1YWRyYXRpY3NTdHJpbmdzIGZyb20gJy4uL0dyYXBoaW5nUXVhZHJhdGljc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgVmVydGV4Rm9ybU1vZGVsIGZyb20gJy4vbW9kZWwvVmVydGV4Rm9ybU1vZGVsLmpzJztcclxuaW1wb3J0IFZlcnRleEZvcm1TY3JlZW5WaWV3IGZyb20gJy4vdmlldy9WZXJ0ZXhGb3JtU2NyZWVuVmlldy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJ0ZXhGb3JtU2NyZWVuIGV4dGVuZHMgU2NyZWVuPFZlcnRleEZvcm1Nb2RlbCwgVmVydGV4Rm9ybVNjcmVlblZpZXc+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG5cclxuICAgICAgLy8gU2NyZWVuT3B0aW9uc1xyXG4gICAgICBuYW1lOiBHcmFwaGluZ1F1YWRyYXRpY3NTdHJpbmdzLnNjcmVlbi52ZXJ0ZXhGb3JtU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoIEdRQ29sb3JzLlNDUkVFTl9CQUNLR1JPVU5EICksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBHUVNjcmVlbkljb25GYWN0b3J5LmNyZWF0ZVZlcnRleEZvcm1TY3JlZW5JY29uKCksXHJcblxyXG4gICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzUzMiwgd2hpY2ggd2lsbCBub3QgYmUgZml4ZWQuXHJcbiAgICAgIG5hdmlnYXRpb25CYXJJY29uOiBHUVNjcmVlbkljb25GYWN0b3J5LmNyZWF0ZVZlcnRleEZvcm1TY3JlZW5JY29uKCksXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgVmVydGV4Rm9ybU1vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IFZlcnRleEZvcm1TY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nUXVhZHJhdGljcy5yZWdpc3RlciggJ1ZlcnRleEZvcm1TY3JlZW4nLCBWZXJ0ZXhGb3JtU2NyZWVuICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUVoRCxPQUFPQyxRQUFRLE1BQU0sdUJBQXVCO0FBQzVDLE9BQU9DLG1CQUFtQixNQUFNLHVDQUF1QztBQUN2RSxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBQ3ZFLE9BQU9DLGVBQWUsTUFBTSw0QkFBNEI7QUFDeEQsT0FBT0Msb0JBQW9CLE1BQU0sZ0NBQWdDO0FBRWpFLGVBQWUsTUFBTUMsZ0JBQWdCLFNBQVNQLE1BQU0sQ0FBd0M7RUFFbkZRLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxPQUFPLEdBQUc7TUFFZDtNQUNBQyxJQUFJLEVBQUVQLHlCQUF5QixDQUFDUSxNQUFNLENBQUNDLHdCQUF3QjtNQUMvREMsdUJBQXVCLEVBQUUsSUFBSWYsUUFBUSxDQUFFRSxRQUFRLENBQUNjLGlCQUFrQixDQUFDO01BQ25FQyxjQUFjLEVBQUVkLG1CQUFtQixDQUFDZSwwQkFBMEIsQ0FBQyxDQUFDO01BRWhFO01BQ0FDLGlCQUFpQixFQUFFaEIsbUJBQW1CLENBQUNlLDBCQUEwQixDQUFDLENBQUM7TUFFbkU7TUFDQVIsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJSixlQUFlLENBQUVJLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQzNEQyxLQUFLLElBQUksSUFBSWQsb0JBQW9CLENBQUVjLEtBQUssRUFBRVgsTUFBTSxDQUFDVSxZQUFZLENBQUUsTUFBTyxDQUFFLENBQUMsRUFDekVULE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVAsa0JBQWtCLENBQUNrQixRQUFRLENBQUUsa0JBQWtCLEVBQUVkLGdCQUFpQixDQUFDIn0=