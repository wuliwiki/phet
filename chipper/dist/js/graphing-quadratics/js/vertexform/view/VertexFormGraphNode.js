// Copyright 2018-2023, University of Colorado Boulder

/**
 * VertexFormGraphNode is the graph for the 'Vertex Form' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import AxisOfSymmetryNode from '../../common/view/AxisOfSymmetryNode.js';
import GQGraphNode from '../../common/view/GQGraphNode.js';
import VertexManipulator from '../../common/view/VertexManipulator.js';
import graphingQuadratics from '../../graphingQuadratics.js';
export default class VertexFormGraphNode extends GQGraphNode {
  constructor(model, viewProperties, tandem) {
    const axisOfSymmetryVisibleProperty = viewProperties.axisOfSymmetryVisibleProperty;
    assert && assert(axisOfSymmetryVisibleProperty);
    const coordinatesVisibleProperty = viewProperties.coordinatesVisibleProperty;
    assert && assert(coordinatesVisibleProperty);
    const vertexVisibleProperty = viewProperties.vertexVisibleProperty;
    assert && assert(vertexVisibleProperty);

    // We do NOT want to instrument the graph, so tandem is not propagated via options
    const options = {};

    // Axis of symmetry
    const axisOfSymmetryNode = new AxisOfSymmetryNode(model.quadraticProperty, model.graph, model.modelViewTransform, axisOfSymmetryVisibleProperty, viewProperties.equationsVisibleProperty);

    // Vertex
    const vertexManipulator = new VertexManipulator(model.hProperty, model.kProperty, model.quadraticProperty, model.graph, model.modelViewTransform, vertexVisibleProperty, coordinatesVisibleProperty, {
      tandem: tandem.createTandem('vertexManipulator'),
      phetioDocumentation: 'manipulator for the vertex'
    });
    options.otherCurves = [axisOfSymmetryNode];
    options.decorations = [vertexManipulator];
    super(model, viewProperties, options);
  }
}
graphingQuadratics.register('VertexFormGraphNode', VertexFormGraphNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBeGlzT2ZTeW1tZXRyeU5vZGUiLCJHUUdyYXBoTm9kZSIsIlZlcnRleE1hbmlwdWxhdG9yIiwiZ3JhcGhpbmdRdWFkcmF0aWNzIiwiVmVydGV4Rm9ybUdyYXBoTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ2aWV3UHJvcGVydGllcyIsInRhbmRlbSIsImF4aXNPZlN5bW1ldHJ5VmlzaWJsZVByb3BlcnR5IiwiYXNzZXJ0IiwiY29vcmRpbmF0ZXNWaXNpYmxlUHJvcGVydHkiLCJ2ZXJ0ZXhWaXNpYmxlUHJvcGVydHkiLCJvcHRpb25zIiwiYXhpc09mU3ltbWV0cnlOb2RlIiwicXVhZHJhdGljUHJvcGVydHkiLCJncmFwaCIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImVxdWF0aW9uc1Zpc2libGVQcm9wZXJ0eSIsInZlcnRleE1hbmlwdWxhdG9yIiwiaFByb3BlcnR5Iiwia1Byb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsIm90aGVyQ3VydmVzIiwiZGVjb3JhdGlvbnMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZlcnRleEZvcm1HcmFwaE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmVydGV4Rm9ybUdyYXBoTm9kZSBpcyB0aGUgZ3JhcGggZm9yIHRoZSAnVmVydGV4IEZvcm0nIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgQXhpc09mU3ltbWV0cnlOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0F4aXNPZlN5bW1ldHJ5Tm9kZS5qcyc7XHJcbmltcG9ydCBHUUdyYXBoTm9kZSwgeyBHUUdyYXBoTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9HUUdyYXBoTm9kZS5qcyc7XHJcbmltcG9ydCBWZXJ0ZXhNYW5pcHVsYXRvciBmcm9tICcuLi8uLi9jb21tb24vdmlldy9WZXJ0ZXhNYW5pcHVsYXRvci5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuaW1wb3J0IFZlcnRleEZvcm1Nb2RlbCBmcm9tICcuLi9tb2RlbC9WZXJ0ZXhGb3JtTW9kZWwuanMnO1xyXG5pbXBvcnQgVmVydGV4Rm9ybVZpZXdQcm9wZXJ0aWVzIGZyb20gJy4vVmVydGV4Rm9ybVZpZXdQcm9wZXJ0aWVzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlcnRleEZvcm1HcmFwaE5vZGUgZXh0ZW5kcyBHUUdyYXBoTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IFZlcnRleEZvcm1Nb2RlbCwgdmlld1Byb3BlcnRpZXM6IFZlcnRleEZvcm1WaWV3UHJvcGVydGllcywgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgYXhpc09mU3ltbWV0cnlWaXNpYmxlUHJvcGVydHkgPSB2aWV3UHJvcGVydGllcy5heGlzT2ZTeW1tZXRyeVZpc2libGVQcm9wZXJ0eSE7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBheGlzT2ZTeW1tZXRyeVZpc2libGVQcm9wZXJ0eSApO1xyXG4gICAgY29uc3QgY29vcmRpbmF0ZXNWaXNpYmxlUHJvcGVydHkgPSB2aWV3UHJvcGVydGllcy5jb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSE7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb29yZGluYXRlc1Zpc2libGVQcm9wZXJ0eSApO1xyXG4gICAgY29uc3QgdmVydGV4VmlzaWJsZVByb3BlcnR5ID0gdmlld1Byb3BlcnRpZXMudmVydGV4VmlzaWJsZVByb3BlcnR5ITtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHZlcnRleFZpc2libGVQcm9wZXJ0eSApO1xyXG5cclxuICAgIC8vIFdlIGRvIE5PVCB3YW50IHRvIGluc3RydW1lbnQgdGhlIGdyYXBoLCBzbyB0YW5kZW0gaXMgbm90IHByb3BhZ2F0ZWQgdmlhIG9wdGlvbnNcclxuICAgIGNvbnN0IG9wdGlvbnM6IEdRR3JhcGhOb2RlT3B0aW9ucyA9IHt9O1xyXG5cclxuICAgIC8vIEF4aXMgb2Ygc3ltbWV0cnlcclxuICAgIGNvbnN0IGF4aXNPZlN5bW1ldHJ5Tm9kZSA9IG5ldyBBeGlzT2ZTeW1tZXRyeU5vZGUoXHJcbiAgICAgIG1vZGVsLnF1YWRyYXRpY1Byb3BlcnR5LFxyXG4gICAgICBtb2RlbC5ncmFwaCxcclxuICAgICAgbW9kZWwubW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICBheGlzT2ZTeW1tZXRyeVZpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdmlld1Byb3BlcnRpZXMuZXF1YXRpb25zVmlzaWJsZVByb3BlcnR5ICk7XHJcblxyXG4gICAgLy8gVmVydGV4XHJcbiAgICBjb25zdCB2ZXJ0ZXhNYW5pcHVsYXRvciA9IG5ldyBWZXJ0ZXhNYW5pcHVsYXRvcihcclxuICAgICAgbW9kZWwuaFByb3BlcnR5LFxyXG4gICAgICBtb2RlbC5rUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLnF1YWRyYXRpY1Byb3BlcnR5LFxyXG4gICAgICBtb2RlbC5ncmFwaCxcclxuICAgICAgbW9kZWwubW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICB2ZXJ0ZXhWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIGNvb3JkaW5hdGVzVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmVydGV4TWFuaXB1bGF0b3InICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ21hbmlwdWxhdG9yIGZvciB0aGUgdmVydGV4J1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5vdGhlckN1cnZlcyA9IFsgYXhpc09mU3ltbWV0cnlOb2RlIF07XHJcbiAgICBvcHRpb25zLmRlY29yYXRpb25zID0gWyB2ZXJ0ZXhNYW5pcHVsYXRvciBdO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgdmlld1Byb3BlcnRpZXMsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nUXVhZHJhdGljcy5yZWdpc3RlciggJ1ZlcnRleEZvcm1HcmFwaE5vZGUnLCBWZXJ0ZXhGb3JtR3JhcGhOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLGtCQUFrQixNQUFNLHlDQUF5QztBQUN4RSxPQUFPQyxXQUFXLE1BQThCLGtDQUFrQztBQUNsRixPQUFPQyxpQkFBaUIsTUFBTSx3Q0FBd0M7QUFDdEUsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBSTVELGVBQWUsTUFBTUMsbUJBQW1CLFNBQVNILFdBQVcsQ0FBQztFQUVwREksV0FBV0EsQ0FBRUMsS0FBc0IsRUFBRUMsY0FBd0MsRUFBRUMsTUFBYyxFQUFHO0lBRXJHLE1BQU1DLDZCQUE2QixHQUFHRixjQUFjLENBQUNFLDZCQUE4QjtJQUNuRkMsTUFBTSxJQUFJQSxNQUFNLENBQUVELDZCQUE4QixDQUFDO0lBQ2pELE1BQU1FLDBCQUEwQixHQUFHSixjQUFjLENBQUNJLDBCQUEyQjtJQUM3RUQsTUFBTSxJQUFJQSxNQUFNLENBQUVDLDBCQUEyQixDQUFDO0lBQzlDLE1BQU1DLHFCQUFxQixHQUFHTCxjQUFjLENBQUNLLHFCQUFzQjtJQUNuRUYsTUFBTSxJQUFJQSxNQUFNLENBQUVFLHFCQUFzQixDQUFDOztJQUV6QztJQUNBLE1BQU1DLE9BQTJCLEdBQUcsQ0FBQyxDQUFDOztJQUV0QztJQUNBLE1BQU1DLGtCQUFrQixHQUFHLElBQUlkLGtCQUFrQixDQUMvQ00sS0FBSyxDQUFDUyxpQkFBaUIsRUFDdkJULEtBQUssQ0FBQ1UsS0FBSyxFQUNYVixLQUFLLENBQUNXLGtCQUFrQixFQUN4QlIsNkJBQTZCLEVBQzdCRixjQUFjLENBQUNXLHdCQUF5QixDQUFDOztJQUUzQztJQUNBLE1BQU1DLGlCQUFpQixHQUFHLElBQUlqQixpQkFBaUIsQ0FDN0NJLEtBQUssQ0FBQ2MsU0FBUyxFQUNmZCxLQUFLLENBQUNlLFNBQVMsRUFDZmYsS0FBSyxDQUFDUyxpQkFBaUIsRUFDdkJULEtBQUssQ0FBQ1UsS0FBSyxFQUNYVixLQUFLLENBQUNXLGtCQUFrQixFQUN4QkwscUJBQXFCLEVBQ3JCRCwwQkFBMEIsRUFBRTtNQUMxQkgsTUFBTSxFQUFFQSxNQUFNLENBQUNjLFlBQVksQ0FBRSxtQkFBb0IsQ0FBQztNQUNsREMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUxWLE9BQU8sQ0FBQ1csV0FBVyxHQUFHLENBQUVWLGtCQUFrQixDQUFFO0lBQzVDRCxPQUFPLENBQUNZLFdBQVcsR0FBRyxDQUFFTixpQkFBaUIsQ0FBRTtJQUUzQyxLQUFLLENBQUViLEtBQUssRUFBRUMsY0FBYyxFQUFFTSxPQUFRLENBQUM7RUFDekM7QUFDRjtBQUVBVixrQkFBa0IsQ0FBQ3VCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRXRCLG1CQUFvQixDQUFDIn0=