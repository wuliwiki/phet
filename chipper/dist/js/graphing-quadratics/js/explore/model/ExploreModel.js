// Copyright 2018-2023, University of Colorado Boulder

/**
 * Model for the 'Explore' screen.  Extends the 'Standard Form' model by adding curves for
 * the individual terms of the interactive quadratic.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Quadratic from '../../common/model/Quadratic.js';
import graphingQuadratics from '../../graphingQuadratics.js';
import StandardFormModel from '../../standardform/model/StandardFormModel.js';
export default class ExploreModel extends StandardFormModel {
  // Individual terms of the quadratic equation

  constructor(tandem) {
    super(tandem, {
      // NumberProperty coefficients values in this screen are continuous, controlled by sliders
      numberType: 'FloatingPoint'
    });
    this.quadraticTermProperty = new DerivedProperty([this.quadraticProperty], quadratic => quadratic.getQuadraticTerm(), {
      tandem: tandem.createTandem('quadraticTermProperty'),
      phetioDocumentation: 'the quadratic term (y = ax^2) of the interactive quadratic',
      phetioValueType: Quadratic.QuadraticIO
    });
    this.linearTermProperty = new DerivedProperty([this.quadraticProperty], quadratic => quadratic.getLinearTerm(), {
      tandem: tandem.createTandem('linearTermProperty'),
      phetioDocumentation: 'the linear term (y = bx) of the interactive quadratic',
      phetioValueType: Quadratic.QuadraticIO
    });
    this.constantTermProperty = new DerivedProperty([this.quadraticProperty], quadratic => quadratic.getConstantTerm(), {
      tandem: tandem.createTandem('constantTermProperty'),
      phetioDocumentation: 'the constant term (y = c) of the interactive quadratic',
      phetioValueType: Quadratic.QuadraticIO
    });
  }
}
graphingQuadratics.register('ExploreModel', ExploreModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJRdWFkcmF0aWMiLCJncmFwaGluZ1F1YWRyYXRpY3MiLCJTdGFuZGFyZEZvcm1Nb2RlbCIsIkV4cGxvcmVNb2RlbCIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwibnVtYmVyVHlwZSIsInF1YWRyYXRpY1Rlcm1Qcm9wZXJ0eSIsInF1YWRyYXRpY1Byb3BlcnR5IiwicXVhZHJhdGljIiwiZ2V0UXVhZHJhdGljVGVybSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJwaGV0aW9WYWx1ZVR5cGUiLCJRdWFkcmF0aWNJTyIsImxpbmVhclRlcm1Qcm9wZXJ0eSIsImdldExpbmVhclRlcm0iLCJjb25zdGFudFRlcm1Qcm9wZXJ0eSIsImdldENvbnN0YW50VGVybSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwbG9yZU1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciB0aGUgJ0V4cGxvcmUnIHNjcmVlbi4gIEV4dGVuZHMgdGhlICdTdGFuZGFyZCBGb3JtJyBtb2RlbCBieSBhZGRpbmcgY3VydmVzIGZvclxyXG4gKiB0aGUgaW5kaXZpZHVhbCB0ZXJtcyBvZiB0aGUgaW50ZXJhY3RpdmUgcXVhZHJhdGljLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBRdWFkcmF0aWMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1F1YWRyYXRpYy5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuaW1wb3J0IFN0YW5kYXJkRm9ybU1vZGVsIGZyb20gJy4uLy4uL3N0YW5kYXJkZm9ybS9tb2RlbC9TdGFuZGFyZEZvcm1Nb2RlbC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHBsb3JlTW9kZWwgZXh0ZW5kcyBTdGFuZGFyZEZvcm1Nb2RlbCB7XHJcblxyXG4gIC8vIEluZGl2aWR1YWwgdGVybXMgb2YgdGhlIHF1YWRyYXRpYyBlcXVhdGlvblxyXG4gIHB1YmxpYyByZWFkb25seSBxdWFkcmF0aWNUZXJtUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFF1YWRyYXRpYz47XHJcbiAgcHVibGljIHJlYWRvbmx5IGxpbmVhclRlcm1Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8UXVhZHJhdGljPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgY29uc3RhbnRUZXJtUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFF1YWRyYXRpYz47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIHRhbmRlbSwge1xyXG5cclxuICAgICAgLy8gTnVtYmVyUHJvcGVydHkgY29lZmZpY2llbnRzIHZhbHVlcyBpbiB0aGlzIHNjcmVlbiBhcmUgY29udGludW91cywgY29udHJvbGxlZCBieSBzbGlkZXJzXHJcbiAgICAgIG51bWJlclR5cGU6ICdGbG9hdGluZ1BvaW50J1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMucXVhZHJhdGljVGVybVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB0aGlzLnF1YWRyYXRpY1Byb3BlcnR5IF0sXHJcbiAgICAgIHF1YWRyYXRpYyA9PiBxdWFkcmF0aWMuZ2V0UXVhZHJhdGljVGVybSgpLCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncXVhZHJhdGljVGVybVByb3BlcnR5JyApLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd0aGUgcXVhZHJhdGljIHRlcm0gKHkgPSBheF4yKSBvZiB0aGUgaW50ZXJhY3RpdmUgcXVhZHJhdGljJyxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IFF1YWRyYXRpYy5RdWFkcmF0aWNJT1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5saW5lYXJUZXJtUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIHRoaXMucXVhZHJhdGljUHJvcGVydHkgXSxcclxuICAgICAgcXVhZHJhdGljID0+IHF1YWRyYXRpYy5nZXRMaW5lYXJUZXJtKCksIHtcclxuICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdsaW5lYXJUZXJtUHJvcGVydHknICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3RoZSBsaW5lYXIgdGVybSAoeSA9IGJ4KSBvZiB0aGUgaW50ZXJhY3RpdmUgcXVhZHJhdGljJyxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IFF1YWRyYXRpYy5RdWFkcmF0aWNJT1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5jb25zdGFudFRlcm1Qcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy5xdWFkcmF0aWNQcm9wZXJ0eSBdLFxyXG4gICAgICBxdWFkcmF0aWMgPT4gcXVhZHJhdGljLmdldENvbnN0YW50VGVybSgpLCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY29uc3RhbnRUZXJtUHJvcGVydHknICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3RoZSBjb25zdGFudCB0ZXJtICh5ID0gYykgb2YgdGhlIGludGVyYWN0aXZlIHF1YWRyYXRpYycsXHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBRdWFkcmF0aWMuUXVhZHJhdGljSU9cclxuICAgICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdRdWFkcmF0aWNzLnJlZ2lzdGVyKCAnRXhwbG9yZU1vZGVsJywgRXhwbG9yZU1vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUdwRSxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxpQkFBaUIsTUFBTSwrQ0FBK0M7QUFFN0UsZUFBZSxNQUFNQyxZQUFZLFNBQVNELGlCQUFpQixDQUFDO0VBRTFEOztFQUtPRSxXQUFXQSxDQUFFQyxNQUFjLEVBQUc7SUFFbkMsS0FBSyxDQUFFQSxNQUFNLEVBQUU7TUFFYjtNQUNBQyxVQUFVLEVBQUU7SUFDZCxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLHFCQUFxQixHQUFHLElBQUlSLGVBQWUsQ0FBRSxDQUFFLElBQUksQ0FBQ1MsaUJBQWlCLENBQUUsRUFDMUVDLFNBQVMsSUFBSUEsU0FBUyxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUU7TUFDekNMLE1BQU0sRUFBRUEsTUFBTSxDQUFDTSxZQUFZLENBQUUsdUJBQXdCLENBQUM7TUFDdERDLG1CQUFtQixFQUFFLDREQUE0RDtNQUNqRkMsZUFBZSxFQUFFYixTQUFTLENBQUNjO0lBQzdCLENBQUUsQ0FBQztJQUVMLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUcsSUFBSWhCLGVBQWUsQ0FBRSxDQUFFLElBQUksQ0FBQ1MsaUJBQWlCLENBQUUsRUFDdkVDLFNBQVMsSUFBSUEsU0FBUyxDQUFDTyxhQUFhLENBQUMsQ0FBQyxFQUFFO01BQ3RDWCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ00sWUFBWSxDQUFFLG9CQUFxQixDQUFDO01BQ25EQyxtQkFBbUIsRUFBRSx1REFBdUQ7TUFDNUVDLGVBQWUsRUFBRWIsU0FBUyxDQUFDYztJQUM3QixDQUFFLENBQUM7SUFFTCxJQUFJLENBQUNHLG9CQUFvQixHQUFHLElBQUlsQixlQUFlLENBQUUsQ0FBRSxJQUFJLENBQUNTLGlCQUFpQixDQUFFLEVBQ3pFQyxTQUFTLElBQUlBLFNBQVMsQ0FBQ1MsZUFBZSxDQUFDLENBQUMsRUFBRTtNQUN4Q2IsTUFBTSxFQUFFQSxNQUFNLENBQUNNLFlBQVksQ0FBRSxzQkFBdUIsQ0FBQztNQUNyREMsbUJBQW1CLEVBQUUsd0RBQXdEO01BQzdFQyxlQUFlLEVBQUViLFNBQVMsQ0FBQ2M7SUFDN0IsQ0FBRSxDQUFDO0VBQ1A7QUFDRjtBQUVBYixrQkFBa0IsQ0FBQ2tCLFFBQVEsQ0FBRSxjQUFjLEVBQUVoQixZQUFhLENBQUMifQ==