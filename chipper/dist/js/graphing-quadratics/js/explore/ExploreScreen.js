// Copyright 2018-2023, University of Colorado Boulder

/**
 * The 'Explore' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import GQColors from '../common/GQColors.js';
import GQScreenIconFactory from '../common/view/GQScreenIconFactory.js';
import graphingQuadratics from '../graphingQuadratics.js';
import GraphingQuadraticsStrings from '../GraphingQuadraticsStrings.js';
import ExploreModel from './model/ExploreModel.js';
import ExploreScreenView from './view/ExploreScreenView.js';
export default class ExploreScreen extends Screen {
  constructor(tandem) {
    const options = {
      // ScreenOptions
      name: GraphingQuadraticsStrings.screen.exploreStringProperty,
      backgroundColorProperty: new Property(GQColors.SCREEN_BACKGROUND),
      homeScreenIcon: GQScreenIconFactory.createExploreScreenIcon(),
      // Workaround for https://github.com/phetsims/joist/issues/532, which will not be fixed.
      navigationBarIcon: GQScreenIconFactory.createExploreScreenIcon(),
      // phet-io
      tandem: tandem
    };
    super(() => new ExploreModel(tandem.createTandem('model')), model => new ExploreScreenView(model, tandem.createTandem('view')), options);
  }
}
graphingQuadratics.register('ExploreScreen', ExploreScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIkdRQ29sb3JzIiwiR1FTY3JlZW5JY29uRmFjdG9yeSIsImdyYXBoaW5nUXVhZHJhdGljcyIsIkdyYXBoaW5nUXVhZHJhdGljc1N0cmluZ3MiLCJFeHBsb3JlTW9kZWwiLCJFeHBsb3JlU2NyZWVuVmlldyIsIkV4cGxvcmVTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwiZXhwbG9yZVN0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJTQ1JFRU5fQkFDS0dST1VORCIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlRXhwbG9yZVNjcmVlbkljb24iLCJuYXZpZ2F0aW9uQmFySWNvbiIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeHBsb3JlU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnRXhwbG9yZScgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgR1FDb2xvcnMgZnJvbSAnLi4vY29tbW9uL0dRQ29sb3JzLmpzJztcclxuaW1wb3J0IEdRU2NyZWVuSWNvbkZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL3ZpZXcvR1FTY3JlZW5JY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuaW1wb3J0IEdyYXBoaW5nUXVhZHJhdGljc1N0cmluZ3MgZnJvbSAnLi4vR3JhcGhpbmdRdWFkcmF0aWNzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBFeHBsb3JlTW9kZWwgZnJvbSAnLi9tb2RlbC9FeHBsb3JlTW9kZWwuanMnO1xyXG5pbXBvcnQgRXhwbG9yZVNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0V4cGxvcmVTY3JlZW5WaWV3LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4cGxvcmVTY3JlZW4gZXh0ZW5kcyBTY3JlZW48RXhwbG9yZU1vZGVsLCBFeHBsb3JlU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcblxyXG4gICAgICAvLyBTY3JlZW5PcHRpb25zXHJcbiAgICAgIG5hbWU6IEdyYXBoaW5nUXVhZHJhdGljc1N0cmluZ3Muc2NyZWVuLmV4cGxvcmVTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggR1FDb2xvcnMuU0NSRUVOX0JBQ0tHUk9VTkQgKSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IEdRU2NyZWVuSWNvbkZhY3RvcnkuY3JlYXRlRXhwbG9yZVNjcmVlbkljb24oKSxcclxuXHJcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvNTMyLCB3aGljaCB3aWxsIG5vdCBiZSBmaXhlZC5cclxuICAgICAgbmF2aWdhdGlvbkJhckljb246IEdRU2NyZWVuSWNvbkZhY3RvcnkuY3JlYXRlRXhwbG9yZVNjcmVlbkljb24oKSxcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBFeHBsb3JlTW9kZWwoIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgRXhwbG9yZVNjcmVlblZpZXcoIG1vZGVsLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKSApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdRdWFkcmF0aWNzLnJlZ2lzdGVyKCAnRXhwbG9yZVNjcmVlbicsIEV4cGxvcmVTY3JlZW4gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBRWhELE9BQU9DLFFBQVEsTUFBTSx1QkFBdUI7QUFDNUMsT0FBT0MsbUJBQW1CLE1BQU0sdUNBQXVDO0FBQ3ZFLE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQUN6RCxPQUFPQyx5QkFBeUIsTUFBTSxpQ0FBaUM7QUFDdkUsT0FBT0MsWUFBWSxNQUFNLHlCQUF5QjtBQUNsRCxPQUFPQyxpQkFBaUIsTUFBTSw2QkFBNkI7QUFFM0QsZUFBZSxNQUFNQyxhQUFhLFNBQVNQLE1BQU0sQ0FBa0M7RUFFMUVRLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxPQUFPLEdBQUc7TUFFZDtNQUNBQyxJQUFJLEVBQUVQLHlCQUF5QixDQUFDUSxNQUFNLENBQUNDLHFCQUFxQjtNQUM1REMsdUJBQXVCLEVBQUUsSUFBSWYsUUFBUSxDQUFFRSxRQUFRLENBQUNjLGlCQUFrQixDQUFDO01BQ25FQyxjQUFjLEVBQUVkLG1CQUFtQixDQUFDZSx1QkFBdUIsQ0FBQyxDQUFDO01BRTdEO01BQ0FDLGlCQUFpQixFQUFFaEIsbUJBQW1CLENBQUNlLHVCQUF1QixDQUFDLENBQUM7TUFFaEU7TUFDQVIsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJSixZQUFZLENBQUVJLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQ3hEQyxLQUFLLElBQUksSUFBSWQsaUJBQWlCLENBQUVjLEtBQUssRUFBRVgsTUFBTSxDQUFDVSxZQUFZLENBQUUsTUFBTyxDQUFFLENBQUMsRUFDdEVULE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVAsa0JBQWtCLENBQUNrQixRQUFRLENBQUUsZUFBZSxFQUFFZCxhQUFjLENBQUMifQ==