// Copyright 2014-2023, University of Colorado Boulder

/**
 * GQModel is the base class for the top-level model in Graphing Quadratics.
 *
 * @author Andrea Lin
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Property from '../../../../axon/js/Property.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Graph from '../../../../graphing-lines/js/common/model/Graph.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import graphingQuadratics from '../../graphingQuadratics.js';
import GQColors from '../GQColors.js';
import GQConstants from '../GQConstants.js';
import PointTool from './PointTool.js';
import Quadratic from './Quadratic.js';

// constants
const GRAPH_VIEW_ORIGIN = new Vector2(345, 330); // position of the graph's origin, in view coordinates
const GRAPH_VIEW_WIDTH = 530; // width of the graph, in view coordinates

export default class GQModel {
  // graph where the quadratics will be plotted
  // the interactive quadratic
  // the saved quadratic, null if nothing is saved
  // model-view transform, created in the model because it's dependent on graph axes ranges
  // Quadratic terms to be displayed, in the order that they will be considered by point tools (foreground to background).
  // The array may be empty. ObservableArray is not used here because we need to change the entire array contents atomically.
  constructor(quadraticProperty, tandem) {
    this.graph = new Graph(GQConstants.X_AXIS_RANGE, GQConstants.Y_AXIS_RANGE);
    this.quadraticProperty = quadraticProperty;
    this.savedQuadraticProperty = new Property(null, {
      valueType: [Quadratic, null],
      tandem: tandem.createTandem('savedQuadraticProperty'),
      phetioDocumentation: 'the saved quadratic, null if there is no saved quadratic',
      phetioValueType: NullableIO(Quadratic.QuadraticIO)
    });

    // scale from model to view
    const modelViewTransformScale = GRAPH_VIEW_WIDTH / this.graph.xRange.getLength();
    this.modelViewTransform = ModelViewTransform2.createOffsetXYScaleMapping(GRAPH_VIEW_ORIGIN, modelViewTransformScale, -modelViewTransformScale // y is inverted (+y is up in the model, +y is down in the view)
    );

    this.quadraticTermsProperty = new Property([]);

    // {DerivedProperty.<Quadratic[]>} Quadratics that are visible to the point tools,
    // in the order that they will be considered by point tools (foreground to background).
    // ObservableArrayDef is not used here because we need to change the entire array contents atomically.
    const pointToolQuadraticsProperty = new DerivedProperty([this.quadraticProperty, this.quadraticTermsProperty, this.savedQuadraticProperty], (quadratic, quadraticTerms, savedQuadratic) => {
      // order is important! compact to remove nulls
      return _.compact([quadratic, ...quadraticTerms, savedQuadratic]);
    });
    this.leftPointTool = new PointTool(pointToolQuadraticsProperty, this.graph, {
      probeSide: 'right',
      // probe is attached to the right side
      position: new Vector2(-2, this.graph.yRange.min - 2),
      // below the graph
      dragBounds: new Bounds2(this.graph.xRange.min - 1, this.graph.yRange.min - 3, this.graph.xRange.max + 1, this.graph.yRange.max + 1),
      tandem: tandem.createTandem('leftPointTool'),
      phetioDocumentation: 'The point tool that is initially on the left. It is typically grabbed from the left, and its probe is on the right.'
    });
    this.rightPointTool = new PointTool(pointToolQuadraticsProperty, this.graph, {
      probeSide: 'left',
      // probe is attached to the left side
      position: new Vector2(2, this.graph.yRange.min - 2),
      // below the graph
      dragBounds: new Bounds2(this.graph.xRange.min - 1, this.graph.yRange.min - 3, this.graph.xRange.max + 1, this.graph.yRange.max + 1),
      tandem: tandem.createTandem('rightPointTool'),
      phetioDocumentation: 'The point tool that is initially on the right. It is typically grabbed from the right, and its probe is on the left.'
    });
  }
  reset() {
    this.savedQuadraticProperty.reset();
    this.leftPointTool.reset();
    this.rightPointTool.reset();
  }

  /**
   * Saves the interactive quadratic.
   */
  saveQuadratic() {
    this.savedQuadraticProperty.value = this.quadraticProperty.value.withColor(GQColors.SAVED_CURVE);
  }

  /**
   * Erases the saved quadratic.
   */
  eraseQuadratic() {
    this.savedQuadraticProperty.value = null;
  }
}
graphingQuadratics.register('GQModel', GQModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJQcm9wZXJ0eSIsIkJvdW5kczIiLCJWZWN0b3IyIiwiR3JhcGgiLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiTnVsbGFibGVJTyIsImdyYXBoaW5nUXVhZHJhdGljcyIsIkdRQ29sb3JzIiwiR1FDb25zdGFudHMiLCJQb2ludFRvb2wiLCJRdWFkcmF0aWMiLCJHUkFQSF9WSUVXX09SSUdJTiIsIkdSQVBIX1ZJRVdfV0lEVEgiLCJHUU1vZGVsIiwiY29uc3RydWN0b3IiLCJxdWFkcmF0aWNQcm9wZXJ0eSIsInRhbmRlbSIsImdyYXBoIiwiWF9BWElTX1JBTkdFIiwiWV9BWElTX1JBTkdFIiwic2F2ZWRRdWFkcmF0aWNQcm9wZXJ0eSIsInZhbHVlVHlwZSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJwaGV0aW9WYWx1ZVR5cGUiLCJRdWFkcmF0aWNJTyIsIm1vZGVsVmlld1RyYW5zZm9ybVNjYWxlIiwieFJhbmdlIiwiZ2V0TGVuZ3RoIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiY3JlYXRlT2Zmc2V0WFlTY2FsZU1hcHBpbmciLCJxdWFkcmF0aWNUZXJtc1Byb3BlcnR5IiwicG9pbnRUb29sUXVhZHJhdGljc1Byb3BlcnR5IiwicXVhZHJhdGljIiwicXVhZHJhdGljVGVybXMiLCJzYXZlZFF1YWRyYXRpYyIsIl8iLCJjb21wYWN0IiwibGVmdFBvaW50VG9vbCIsInByb2JlU2lkZSIsInBvc2l0aW9uIiwieVJhbmdlIiwibWluIiwiZHJhZ0JvdW5kcyIsIm1heCIsInJpZ2h0UG9pbnRUb29sIiwicmVzZXQiLCJzYXZlUXVhZHJhdGljIiwidmFsdWUiLCJ3aXRoQ29sb3IiLCJTQVZFRF9DVVJWRSIsImVyYXNlUXVhZHJhdGljIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHUU1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdRTW9kZWwgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIHRoZSB0b3AtbGV2ZWwgbW9kZWwgaW4gR3JhcGhpbmcgUXVhZHJhdGljcy5cclxuICpcclxuICogQGF1dGhvciBBbmRyZWEgTGluXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IEdyYXBoIGZyb20gJy4uLy4uLy4uLy4uL2dyYXBoaW5nLWxpbmVzL2pzL2NvbW1vbi9tb2RlbC9HcmFwaC5qcyc7XHJcbmltcG9ydCBUTW9kZWwgZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvVE1vZGVsLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgTnVsbGFibGVJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvTnVsbGFibGVJTy5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuaW1wb3J0IEdRQ29sb3JzIGZyb20gJy4uL0dRQ29sb3JzLmpzJztcclxuaW1wb3J0IEdRQ29uc3RhbnRzIGZyb20gJy4uL0dRQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFBvaW50VG9vbCBmcm9tICcuL1BvaW50VG9vbC5qcyc7XHJcbmltcG9ydCBRdWFkcmF0aWMgZnJvbSAnLi9RdWFkcmF0aWMuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEdSQVBIX1ZJRVdfT1JJR0lOID0gbmV3IFZlY3RvcjIoIDM0NSwgMzMwICk7IC8vIHBvc2l0aW9uIG9mIHRoZSBncmFwaCdzIG9yaWdpbiwgaW4gdmlldyBjb29yZGluYXRlc1xyXG5jb25zdCBHUkFQSF9WSUVXX1dJRFRIID0gNTMwOyAvLyB3aWR0aCBvZiB0aGUgZ3JhcGgsIGluIHZpZXcgY29vcmRpbmF0ZXNcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdRTW9kZWwgaW1wbGVtZW50cyBUTW9kZWwge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgZ3JhcGg6IEdyYXBoOyAvLyBncmFwaCB3aGVyZSB0aGUgcXVhZHJhdGljcyB3aWxsIGJlIHBsb3R0ZWRcclxuICBwdWJsaWMgcmVhZG9ubHkgcXVhZHJhdGljUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFF1YWRyYXRpYz47IC8vIHRoZSBpbnRlcmFjdGl2ZSBxdWFkcmF0aWNcclxuICBwdWJsaWMgcmVhZG9ubHkgc2F2ZWRRdWFkcmF0aWNQcm9wZXJ0eTogUHJvcGVydHk8UXVhZHJhdGljIHwgbnVsbD47IC8vIHRoZSBzYXZlZCBxdWFkcmF0aWMsIG51bGwgaWYgbm90aGluZyBpcyBzYXZlZFxyXG5cclxuICAvLyBtb2RlbC12aWV3IHRyYW5zZm9ybSwgY3JlYXRlZCBpbiB0aGUgbW9kZWwgYmVjYXVzZSBpdCdzIGRlcGVuZGVudCBvbiBncmFwaCBheGVzIHJhbmdlc1xyXG4gIHB1YmxpYyByZWFkb25seSBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTI7XHJcblxyXG4gIC8vIFF1YWRyYXRpYyB0ZXJtcyB0byBiZSBkaXNwbGF5ZWQsIGluIHRoZSBvcmRlciB0aGF0IHRoZXkgd2lsbCBiZSBjb25zaWRlcmVkIGJ5IHBvaW50IHRvb2xzIChmb3JlZ3JvdW5kIHRvIGJhY2tncm91bmQpLlxyXG4gIC8vIFRoZSBhcnJheSBtYXkgYmUgZW1wdHkuIE9ic2VydmFibGVBcnJheSBpcyBub3QgdXNlZCBoZXJlIGJlY2F1c2Ugd2UgbmVlZCB0byBjaGFuZ2UgdGhlIGVudGlyZSBhcnJheSBjb250ZW50cyBhdG9taWNhbGx5LlxyXG4gIHB1YmxpYyByZWFkb25seSBxdWFkcmF0aWNUZXJtc1Byb3BlcnR5OiBQcm9wZXJ0eTxRdWFkcmF0aWNbXT47XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBsZWZ0UG9pbnRUb29sOiBQb2ludFRvb2w7XHJcbiAgcHVibGljIHJlYWRvbmx5IHJpZ2h0UG9pbnRUb29sOiBQb2ludFRvb2w7XHJcblxyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvciggcXVhZHJhdGljUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFF1YWRyYXRpYz4sIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIHRoaXMuZ3JhcGggPSBuZXcgR3JhcGgoIEdRQ29uc3RhbnRzLlhfQVhJU19SQU5HRSwgR1FDb25zdGFudHMuWV9BWElTX1JBTkdFICk7XHJcblxyXG4gICAgdGhpcy5xdWFkcmF0aWNQcm9wZXJ0eSA9IHF1YWRyYXRpY1Byb3BlcnR5O1xyXG5cclxuICAgIHRoaXMuc2F2ZWRRdWFkcmF0aWNQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eTxRdWFkcmF0aWMgfCBudWxsPiggbnVsbCwge1xyXG4gICAgICB2YWx1ZVR5cGU6IFsgUXVhZHJhdGljLCBudWxsIF0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NhdmVkUXVhZHJhdGljUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd0aGUgc2F2ZWQgcXVhZHJhdGljLCBudWxsIGlmIHRoZXJlIGlzIG5vIHNhdmVkIHF1YWRyYXRpYycsXHJcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogTnVsbGFibGVJTyggUXVhZHJhdGljLlF1YWRyYXRpY0lPIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBzY2FsZSBmcm9tIG1vZGVsIHRvIHZpZXdcclxuICAgIGNvbnN0IG1vZGVsVmlld1RyYW5zZm9ybVNjYWxlID0gR1JBUEhfVklFV19XSURUSCAvIHRoaXMuZ3JhcGgueFJhbmdlLmdldExlbmd0aCgpO1xyXG4gICAgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0gPSBNb2RlbFZpZXdUcmFuc2Zvcm0yLmNyZWF0ZU9mZnNldFhZU2NhbGVNYXBwaW5nKFxyXG4gICAgICBHUkFQSF9WSUVXX09SSUdJTixcclxuICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtU2NhbGUsXHJcbiAgICAgIC1tb2RlbFZpZXdUcmFuc2Zvcm1TY2FsZSAvLyB5IGlzIGludmVydGVkICgreSBpcyB1cCBpbiB0aGUgbW9kZWwsICt5IGlzIGRvd24gaW4gdGhlIHZpZXcpXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMucXVhZHJhdGljVGVybXNQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eTxRdWFkcmF0aWNbXT4oIFtdICk7XHJcblxyXG4gICAgLy8ge0Rlcml2ZWRQcm9wZXJ0eS48UXVhZHJhdGljW10+fSBRdWFkcmF0aWNzIHRoYXQgYXJlIHZpc2libGUgdG8gdGhlIHBvaW50IHRvb2xzLFxyXG4gICAgLy8gaW4gdGhlIG9yZGVyIHRoYXQgdGhleSB3aWxsIGJlIGNvbnNpZGVyZWQgYnkgcG9pbnQgdG9vbHMgKGZvcmVncm91bmQgdG8gYmFja2dyb3VuZCkuXHJcbiAgICAvLyBPYnNlcnZhYmxlQXJyYXlEZWYgaXMgbm90IHVzZWQgaGVyZSBiZWNhdXNlIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBlbnRpcmUgYXJyYXkgY29udGVudHMgYXRvbWljYWxseS5cclxuICAgIGNvbnN0IHBvaW50VG9vbFF1YWRyYXRpY3NQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgdGhpcy5xdWFkcmF0aWNQcm9wZXJ0eSwgdGhpcy5xdWFkcmF0aWNUZXJtc1Byb3BlcnR5LCB0aGlzLnNhdmVkUXVhZHJhdGljUHJvcGVydHkgXSxcclxuICAgICAgKCBxdWFkcmF0aWMsIHF1YWRyYXRpY1Rlcm1zLCBzYXZlZFF1YWRyYXRpYyApID0+IHtcclxuICAgICAgICAvLyBvcmRlciBpcyBpbXBvcnRhbnQhIGNvbXBhY3QgdG8gcmVtb3ZlIG51bGxzXHJcbiAgICAgICAgcmV0dXJuIF8uY29tcGFjdCggWyBxdWFkcmF0aWMsIC4uLnF1YWRyYXRpY1Rlcm1zLCBzYXZlZFF1YWRyYXRpYyBdICk7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmxlZnRQb2ludFRvb2wgPSBuZXcgUG9pbnRUb29sKCBwb2ludFRvb2xRdWFkcmF0aWNzUHJvcGVydHksIHRoaXMuZ3JhcGgsIHtcclxuICAgICAgcHJvYmVTaWRlOiAncmlnaHQnLCAvLyBwcm9iZSBpcyBhdHRhY2hlZCB0byB0aGUgcmlnaHQgc2lkZVxyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjIoIC0yLCB0aGlzLmdyYXBoLnlSYW5nZS5taW4gLSAyICksIC8vIGJlbG93IHRoZSBncmFwaFxyXG4gICAgICBkcmFnQm91bmRzOiBuZXcgQm91bmRzMihcclxuICAgICAgICB0aGlzLmdyYXBoLnhSYW5nZS5taW4gLSAxLCB0aGlzLmdyYXBoLnlSYW5nZS5taW4gLSAzLFxyXG4gICAgICAgIHRoaXMuZ3JhcGgueFJhbmdlLm1heCArIDEsIHRoaXMuZ3JhcGgueVJhbmdlLm1heCArIDEgKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGVmdFBvaW50VG9vbCcgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1RoZSBwb2ludCB0b29sIHRoYXQgaXMgaW5pdGlhbGx5IG9uIHRoZSBsZWZ0LiBJdCBpcyB0eXBpY2FsbHkgZ3JhYmJlZCBmcm9tIHRoZSBsZWZ0LCBhbmQgaXRzIHByb2JlIGlzIG9uIHRoZSByaWdodC4nXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5yaWdodFBvaW50VG9vbCA9IG5ldyBQb2ludFRvb2woIHBvaW50VG9vbFF1YWRyYXRpY3NQcm9wZXJ0eSwgdGhpcy5ncmFwaCwge1xyXG4gICAgICBwcm9iZVNpZGU6ICdsZWZ0JywgLy8gcHJvYmUgaXMgYXR0YWNoZWQgdG8gdGhlIGxlZnQgc2lkZVxyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjIoIDIsIHRoaXMuZ3JhcGgueVJhbmdlLm1pbiAtIDIgKSwgLy8gYmVsb3cgdGhlIGdyYXBoXHJcbiAgICAgIGRyYWdCb3VuZHM6IG5ldyBCb3VuZHMyKFxyXG4gICAgICAgIHRoaXMuZ3JhcGgueFJhbmdlLm1pbiAtIDEsIHRoaXMuZ3JhcGgueVJhbmdlLm1pbiAtIDMsXHJcbiAgICAgICAgdGhpcy5ncmFwaC54UmFuZ2UubWF4ICsgMSwgdGhpcy5ncmFwaC55UmFuZ2UubWF4ICsgMSApLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdyaWdodFBvaW50VG9vbCcgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1RoZSBwb2ludCB0b29sIHRoYXQgaXMgaW5pdGlhbGx5IG9uIHRoZSByaWdodC4gSXQgaXMgdHlwaWNhbGx5IGdyYWJiZWQgZnJvbSB0aGUgcmlnaHQsIGFuZCBpdHMgcHJvYmUgaXMgb24gdGhlIGxlZnQuJ1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5zYXZlZFF1YWRyYXRpY1Byb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmxlZnRQb2ludFRvb2wucmVzZXQoKTtcclxuICAgIHRoaXMucmlnaHRQb2ludFRvb2wucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNhdmVzIHRoZSBpbnRlcmFjdGl2ZSBxdWFkcmF0aWMuXHJcbiAgICovXHJcbiAgcHVibGljIHNhdmVRdWFkcmF0aWMoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNhdmVkUXVhZHJhdGljUHJvcGVydHkudmFsdWUgPSB0aGlzLnF1YWRyYXRpY1Byb3BlcnR5LnZhbHVlLndpdGhDb2xvciggR1FDb2xvcnMuU0FWRURfQ1VSVkUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVyYXNlcyB0aGUgc2F2ZWQgcXVhZHJhdGljLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcmFzZVF1YWRyYXRpYygpOiB2b2lkIHtcclxuICAgIHRoaXMuc2F2ZWRRdWFkcmF0aWNQcm9wZXJ0eS52YWx1ZSA9IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5ncmFwaGluZ1F1YWRyYXRpY3MucmVnaXN0ZXIoICdHUU1vZGVsJywgR1FNb2RlbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUV0RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLHFEQUFxRDtBQUV2RSxPQUFPQyxtQkFBbUIsTUFBTSx1REFBdUQ7QUFFdkYsT0FBT0MsVUFBVSxNQUFNLDJDQUEyQztBQUNsRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsUUFBUSxNQUFNLGdCQUFnQjtBQUNyQyxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBQzNDLE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFDdEMsT0FBT0MsU0FBUyxNQUFNLGdCQUFnQjs7QUFFdEM7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxJQUFJVCxPQUFPLENBQUUsR0FBRyxFQUFFLEdBQUksQ0FBQyxDQUFDLENBQUM7QUFDbkQsTUFB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