// Copyright 2018-2023, University of Colorado Boulder

/**
 * GQEquationFactory creates strings that display various equations needed by this sim.
 * The strings contain markup that is compatible with SCENERY/RichText.
 * Equations are reduced so that they don't contain terms that evaluate to zero,
 * and coefficients are displayed as positive decimal numbers.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import graphingQuadratics from '../../graphingQuadratics.js';
import GQConstants from '../GQConstants.js';
import GQSymbols from '../GQSymbols.js';
// constants
const Y_EQUALS_STRING = `${GQSymbols.y} ${MathSymbols.EQUAL_TO}`; // 'y ='

const GQEquationFactory = {
  /**
   * Creates the RichText string for an equation in standard form, y = ax^2 + bx + c
   */
  createStandardForm(quadratic) {
    // use toFixedNumber so we don't have trailing zeros
    const a = Utils.toFixedNumber(quadratic.a, GQConstants.EXPLORE_DECIMALS_A);
    const b = Utils.toFixedNumber(quadratic.b, GQConstants.EXPLORE_DECIMALS_B);
    const c = Utils.toFixedNumber(quadratic.c, GQConstants.EXPLORE_DECIMALS_C);

    // y =
    let equationString = `${Y_EQUALS_STRING} `;
    if (a === 0 && b === 0 && c === 0) {
      // y = 0
      equationString += '0';
    } else {
      // ax^2 term
      if (a !== 0) {
        if (a === -1) {
          equationString += MathSymbols.UNARY_MINUS; // -x^2
        } else if (a !== 1) {
          equationString += a; // ax^2
        }

        equationString += GQSymbols.xSquared;
        if (b !== 0 || c !== 0) {
          equationString += ' ';
        }
      }

      // bx term
      if (b !== 0) {
        if (a === 0) {
          if (b === -1) {
            equationString += MathSymbols.UNARY_MINUS; // -x
          } else if (b !== 1) {
            equationString += b; // bx
          }

          equationString += GQSymbols.x;
        } else {
          equationString += b > 0 ? MathSymbols.PLUS : MathSymbols.MINUS;
          equationString += ' ';
          if (Math.abs(b) !== 1) {
            equationString += Math.abs(b);
          }
          equationString += GQSymbols.x;
        }
        if (c !== 0) {
          equationString += ' ';
        }
      }

      // c term
      if (c !== 0) {
        if (a === 0 && b === 0) {
          equationString += c;
        } else {
          equationString += c > 0 ? MathSymbols.PLUS : MathSymbols.MINUS;
          equationString += ` ${Math.abs(c)}`;
        }
      }
    }
    return equationString;
  },
  /**
   * Creates the RichText string for an equation in vertex form, y = a(x - h)^2 + k
   */
  createVertexForm(quadratic) {
    // use toFixedNumber so we don't have trailing zeros
    const a = Utils.toFixedNumber(quadratic.a, GQConstants.FOCUS_AND_DIRECTRIX_DECIMALS_A);
    const h = quadratic.h === undefined ? 0 : Utils.toFixedNumber(quadratic.h, GQConstants.FOCUS_AND_DIRECTRIX_DECIMALS_H);
    const k = quadratic.k === undefined ? 0 : Utils.toFixedNumber(quadratic.k, GQConstants.FOCUS_AND_DIRECTRIX_DECIMALS_K);

    // y =
    let equationString = `${Y_EQUALS_STRING} `;
    if (a === 0 && k === 0) {
      // y = 0
      equationString += '0';
    } else if (a === 0) {
      // y = c
      equationString += Utils.toFixedNumber(quadratic.c, GQConstants.FOCUS_AND_DIRECTRIX_DECIMALS_K);
    } else {
      // a(x - h)^2 term
      if (a === -1) {
        equationString += MathSymbols.UNARY_MINUS;
      } else if (a !== 1) {
        equationString += a;
      }
      if (h === 0) {
        equationString += GQSymbols.xSquared;
      } else {
        equationString += `(${GQSymbols.x} `;
        equationString += h > 0 ? MathSymbols.MINUS : MathSymbols.PLUS;
        equationString += ` ${Math.abs(h)}`;
        equationString += ')<sup>2</sup>';
      }
      if (k !== 0) {
        equationString += ' ';
      }

      // k term
      if (k !== 0) {
        if (a === 0) {
          equationString += k;
        } else {
          equationString += k > 0 ? MathSymbols.PLUS : MathSymbols.MINUS;
          equationString += ` ${Math.abs(k)}`;
        }
      }
    }
    return equationString;
  },
  /**
   * Creates the RichText string for the directrix equation.
   */
  createDirectrix(directrix) {
    return `${Y_EQUALS_STRING} ${Utils.toFixedNumber(directrix, GQConstants.DIRECTRIX_DECIMALS)}`;
  },
  /**
   * Creates the RichText string for the axis of symmetry equation.
   */
  createAxisOfSymmetry(axisOfSymmetry) {
    return `${GQSymbols.x} ${MathSymbols.EQUAL_TO} ${Utils.toFixedNumber(axisOfSymmetry, GQConstants.AXIS_OF_SYMMETRY_DECIMALS)}`;
  }
};
graphingQuadratics.register('GQEquationFactory', GQEquationFactory);
export default GQEquationFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIk1hdGhTeW1ib2xzIiwiZ3JhcGhpbmdRdWFkcmF0aWNzIiwiR1FDb25zdGFudHMiLCJHUVN5bWJvbHMiLCJZX0VRVUFMU19TVFJJTkciLCJ5IiwiRVFVQUxfVE8iLCJHUUVxdWF0aW9uRmFjdG9yeSIsImNyZWF0ZVN0YW5kYXJkRm9ybSIsInF1YWRyYXRpYyIsImEiLCJ0b0ZpeGVkTnVtYmVyIiwiRVhQTE9SRV9ERUNJTUFMU19BIiwiYiIsIkVYUExPUkVfREVDSU1BTFNfQiIsImMiLCJFWFBMT1JFX0RFQ0lNQUxTX0MiLCJlcXVhdGlvblN0cmluZyIsIlVOQVJZX01JTlVTIiwieFNxdWFyZWQiLCJ4IiwiUExVUyIsIk1JTlVTIiwiTWF0aCIsImFicyIsImNyZWF0ZVZlcnRleEZvcm0iLCJGT0NVU19BTkRfRElSRUNUUklYX0RFQ0lNQUxTX0EiLCJoIiwidW5kZWZpbmVkIiwiRk9DVVNfQU5EX0RJUkVDVFJJWF9ERUNJTUFMU19IIiwiayIsIkZPQ1VTX0FORF9ESVJFQ1RSSVhfREVDSU1BTFNfSyIsImNyZWF0ZURpcmVjdHJpeCIsImRpcmVjdHJpeCIsIkRJUkVDVFJJWF9ERUNJTUFMUyIsImNyZWF0ZUF4aXNPZlN5bW1ldHJ5IiwiYXhpc09mU3ltbWV0cnkiLCJBWElTX09GX1NZTU1FVFJZX0RFQ0lNQUxTIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHUUVxdWF0aW9uRmFjdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHUUVxdWF0aW9uRmFjdG9yeSBjcmVhdGVzIHN0cmluZ3MgdGhhdCBkaXNwbGF5IHZhcmlvdXMgZXF1YXRpb25zIG5lZWRlZCBieSB0aGlzIHNpbS5cclxuICogVGhlIHN0cmluZ3MgY29udGFpbiBtYXJrdXAgdGhhdCBpcyBjb21wYXRpYmxlIHdpdGggU0NFTkVSWS9SaWNoVGV4dC5cclxuICogRXF1YXRpb25zIGFyZSByZWR1Y2VkIHNvIHRoYXQgdGhleSBkb24ndCBjb250YWluIHRlcm1zIHRoYXQgZXZhbHVhdGUgdG8gemVybyxcclxuICogYW5kIGNvZWZmaWNpZW50cyBhcmUgZGlzcGxheWVkIGFzIHBvc2l0aXZlIGRlY2ltYWwgbnVtYmVycy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IE1hdGhTeW1ib2xzIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9NYXRoU3ltYm9scy5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuaW1wb3J0IEdRQ29uc3RhbnRzIGZyb20gJy4uL0dRQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdRU3ltYm9scyBmcm9tICcuLi9HUVN5bWJvbHMuanMnO1xyXG5pbXBvcnQgUXVhZHJhdGljIGZyb20gJy4uL21vZGVsL1F1YWRyYXRpYy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgWV9FUVVBTFNfU1RSSU5HID0gYCR7R1FTeW1ib2xzLnl9ICR7TWF0aFN5bWJvbHMuRVFVQUxfVE99YDsgLy8gJ3kgPSdcclxuXHJcbmNvbnN0IEdRRXF1YXRpb25GYWN0b3J5ID0ge1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBSaWNoVGV4dCBzdHJpbmcgZm9yIGFuIGVxdWF0aW9uIGluIHN0YW5kYXJkIGZvcm0sIHkgPSBheF4yICsgYnggKyBjXHJcbiAgICovXHJcbiAgY3JlYXRlU3RhbmRhcmRGb3JtKCBxdWFkcmF0aWM6IFF1YWRyYXRpYyApOiBzdHJpbmcge1xyXG5cclxuICAgIC8vIHVzZSB0b0ZpeGVkTnVtYmVyIHNvIHdlIGRvbid0IGhhdmUgdHJhaWxpbmcgemVyb3NcclxuICAgIGNvbnN0IGEgPSBVdGlscy50b0ZpeGVkTnVtYmVyKCBxdWFkcmF0aWMuYSwgR1FDb25zdGFudHMuRVhQTE9SRV9ERUNJTUFMU19BICk7XHJcbiAgICBjb25zdCBiID0gVXRpbHMudG9GaXhlZE51bWJlciggcXVhZHJhdGljLmIsIEdRQ29uc3RhbnRzLkVYUExPUkVfREVDSU1BTFNfQiApO1xyXG4gICAgY29uc3QgYyA9IFV0aWxzLnRvRml4ZWROdW1iZXIoIHF1YWRyYXRpYy5jLCBHUUNvbnN0YW50cy5FWFBMT1JFX0RFQ0lNQUxTX0MgKTtcclxuXHJcbiAgICAvLyB5ID1cclxuICAgIGxldCBlcXVhdGlvblN0cmluZyA9IGAke1lfRVFVQUxTX1NUUklOR30gYDtcclxuXHJcbiAgICBpZiAoIGEgPT09IDAgJiYgYiA9PT0gMCAmJiBjID09PSAwICkge1xyXG5cclxuICAgICAgLy8geSA9IDBcclxuICAgICAgZXF1YXRpb25TdHJpbmcgKz0gJzAnO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcblxyXG4gICAgICAvLyBheF4yIHRlcm1cclxuICAgICAgaWYgKCBhICE9PSAwICkge1xyXG5cclxuICAgICAgICBpZiAoIGEgPT09IC0xICkge1xyXG4gICAgICAgICAgZXF1YXRpb25TdHJpbmcgKz0gTWF0aFN5bWJvbHMuVU5BUllfTUlOVVM7IC8vIC14XjJcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIGEgIT09IDEgKSB7XHJcbiAgICAgICAgICBlcXVhdGlvblN0cmluZyArPSBhOyAvLyBheF4yXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlcXVhdGlvblN0cmluZyArPSBHUVN5bWJvbHMueFNxdWFyZWQ7XHJcblxyXG4gICAgICAgIGlmICggYiAhPT0gMCB8fCBjICE9PSAwICkge1xyXG4gICAgICAgICAgZXF1YXRpb25TdHJpbmcgKz0gJyAnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gYnggdGVybVxyXG4gICAgICBpZiAoIGIgIT09IDAgKSB7XHJcblxyXG4gICAgICAgIGlmICggYSA9PT0gMCApIHtcclxuICAgICAgICAgIGlmICggYiA9PT0gLTEgKSB7XHJcbiAgICAgICAgICAgIGVxdWF0aW9uU3RyaW5nICs9IE1hdGhTeW1ib2xzLlVOQVJZX01JTlVTOyAvLyAteFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZiAoIGIgIT09IDEgKSB7XHJcbiAgICAgICAgICAgIGVxdWF0aW9uU3RyaW5nICs9IGI7IC8vIGJ4XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlcXVhdGlvblN0cmluZyArPSBHUVN5bWJvbHMueDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBlcXVhdGlvblN0cmluZyArPSAoIGIgPiAwICkgPyBNYXRoU3ltYm9scy5QTFVTIDogTWF0aFN5bWJvbHMuTUlOVVM7XHJcbiAgICAgICAgICBlcXVhdGlvblN0cmluZyArPSAnICc7XHJcbiAgICAgICAgICBpZiAoIE1hdGguYWJzKCBiICkgIT09IDEgKSB7XHJcbiAgICAgICAgICAgIGVxdWF0aW9uU3RyaW5nICs9IE1hdGguYWJzKCBiICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlcXVhdGlvblN0cmluZyArPSBHUVN5bWJvbHMueDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggYyAhPT0gMCApIHtcclxuICAgICAgICAgIGVxdWF0aW9uU3RyaW5nICs9ICcgJztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGMgdGVybVxyXG4gICAgICBpZiAoIGMgIT09IDAgKSB7XHJcbiAgICAgICAgaWYgKCBhID09PSAwICYmIGIgPT09IDAgKSB7XHJcbiAgICAgICAgICBlcXVhdGlvblN0cmluZyArPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGVxdWF0aW9uU3RyaW5nICs9ICggYyA+IDAgKSA/IE1hdGhTeW1ib2xzLlBMVVMgOiBNYXRoU3ltYm9scy5NSU5VUztcclxuICAgICAgICAgIGVxdWF0aW9uU3RyaW5nICs9IGAgJHtNYXRoLmFicyggYyApfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVxdWF0aW9uU3RyaW5nO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgdGhlIFJpY2hUZXh0IHN0cmluZyBmb3IgYW4gZXF1YXRpb24gaW4gdmVydGV4IGZvcm0sIHkgPSBhKHggLSBoKV4yICsga1xyXG4gICAqL1xyXG4gIGNyZWF0ZVZlcnRleEZvcm0oIHF1YWRyYXRpYzogUXVhZHJhdGljICk6IHN0cmluZyB7XHJcblxyXG4gICAgLy8gdXNlIHRvRml4ZWROdW1iZXIgc28gd2UgZG9uJ3QgaGF2ZSB0cmFpbGluZyB6ZXJvc1xyXG4gICAgY29uc3QgYSA9IFV0aWxzLnRvRml4ZWROdW1iZXIoIHF1YWRyYXRpYy5hLCBHUUNvbnN0YW50cy5GT0NVU19BTkRfRElSRUNUUklYX0RFQ0lNQUxTX0EgKTtcclxuICAgIGNvbnN0IGggPSAoIHF1YWRyYXRpYy5oID09PSB1bmRlZmluZWQgKSA/IDAgOiBVdGlscy50b0ZpeGVkTnVtYmVyKCBxdWFkcmF0aWMuaCwgR1FDb25zdGFudHMuRk9DVVNfQU5EX0RJUkVDVFJJWF9ERUNJTUFMU19IICk7XHJcbiAgICBjb25zdCBrID0gKCBxdWFkcmF0aWMuayA9PT0gdW5kZWZpbmVkICkgPyAwIDogVXRpbHMudG9GaXhlZE51bWJlciggcXVhZHJhdGljLmssIEdRQ29uc3RhbnRzLkZPQ1VTX0FORF9ESVJFQ1RSSVhfREVDSU1BTFNfSyApO1xyXG5cclxuICAgIC8vIHkgPVxyXG4gICAgbGV0IGVxdWF0aW9uU3RyaW5nID0gYCR7WV9FUVVBTFNfU1RSSU5HfSBgO1xyXG5cclxuICAgIGlmICggYSA9PT0gMCAmJiBrID09PSAwICkge1xyXG5cclxuICAgICAgLy8geSA9IDBcclxuICAgICAgZXF1YXRpb25TdHJpbmcgKz0gJzAnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIGEgPT09IDAgKSB7XHJcblxyXG4gICAgICAvLyB5ID0gY1xyXG4gICAgICBlcXVhdGlvblN0cmluZyArPSBVdGlscy50b0ZpeGVkTnVtYmVyKCBxdWFkcmF0aWMuYywgR1FDb25zdGFudHMuRk9DVVNfQU5EX0RJUkVDVFJJWF9ERUNJTUFMU19LICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuXHJcbiAgICAgIC8vIGEoeCAtIGgpXjIgdGVybVxyXG4gICAgICBpZiAoIGEgPT09IC0xICkge1xyXG4gICAgICAgIGVxdWF0aW9uU3RyaW5nICs9IE1hdGhTeW1ib2xzLlVOQVJZX01JTlVTO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBhICE9PSAxICkge1xyXG4gICAgICAgIGVxdWF0aW9uU3RyaW5nICs9IGE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICggaCA9PT0gMCApIHtcclxuICAgICAgICBlcXVhdGlvblN0cmluZyArPSBHUVN5bWJvbHMueFNxdWFyZWQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZXF1YXRpb25TdHJpbmcgKz0gYCgke0dRU3ltYm9scy54fSBgO1xyXG4gICAgICAgIGVxdWF0aW9uU3RyaW5nICs9ICggaCA+IDAgKSA/IE1hdGhTeW1ib2xzLk1JTlVTIDogTWF0aFN5bWJvbHMuUExVUztcclxuICAgICAgICBlcXVhdGlvblN0cmluZyArPSBgICR7TWF0aC5hYnMoIGggKX1gO1xyXG4gICAgICAgIGVxdWF0aW9uU3RyaW5nICs9ICcpPHN1cD4yPC9zdXA+JztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCBrICE9PSAwICkge1xyXG4gICAgICAgIGVxdWF0aW9uU3RyaW5nICs9ICcgJztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gayB0ZXJtXHJcbiAgICAgIGlmICggayAhPT0gMCApIHtcclxuICAgICAgICBpZiAoIGEgPT09IDAgKSB7XHJcbiAgICAgICAgICBlcXVhdGlvblN0cmluZyArPSBrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGVxdWF0aW9uU3RyaW5nICs9ICggayA+IDAgKSA/IE1hdGhTeW1ib2xzLlBMVVMgOiBNYXRoU3ltYm9scy5NSU5VUztcclxuICAgICAgICAgIGVxdWF0aW9uU3RyaW5nICs9IGAgJHtNYXRoLmFicyggayApfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVxdWF0aW9uU3RyaW5nO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgdGhlIFJpY2hUZXh0IHN0cmluZyBmb3IgdGhlIGRpcmVjdHJpeCBlcXVhdGlvbi5cclxuICAgKi9cclxuICBjcmVhdGVEaXJlY3RyaXgoIGRpcmVjdHJpeDogbnVtYmVyICk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7WV9FUVVBTFNfU1RSSU5HfSAke1V0aWxzLnRvRml4ZWROdW1iZXIoIGRpcmVjdHJpeCwgR1FDb25zdGFudHMuRElSRUNUUklYX0RFQ0lNQUxTICl9YDtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBSaWNoVGV4dCBzdHJpbmcgZm9yIHRoZSBheGlzIG9mIHN5bW1ldHJ5IGVxdWF0aW9uLlxyXG4gICAqL1xyXG4gIGNyZWF0ZUF4aXNPZlN5bW1ldHJ5KCBheGlzT2ZTeW1tZXRyeTogbnVtYmVyICk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7R1FTeW1ib2xzLnh9ICR7TWF0aFN5bWJvbHMuRVFVQUxfVE99ICR7VXRpbHMudG9GaXhlZE51bWJlciggYXhpc09mU3ltbWV0cnksIEdRQ29uc3RhbnRzLkFYSVNfT0ZfU1lNTUVUUllfREVDSU1BTFMgKX1gO1xyXG4gIH1cclxufTtcclxuXHJcbmdyYXBoaW5nUXVhZHJhdGljcy5yZWdpc3RlciggJ0dRRXF1YXRpb25GYWN0b3J5JywgR1FFcXVhdGlvbkZhY3RvcnkgKTtcclxuZXhw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