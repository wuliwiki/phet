// Copyright 2018-2023, University of Colorado Boulder

/**
 * GQCheckbox is the base class for a checkbox that is labeled with text, with an optional icon to the right of the text.
 * This provides consistent font and textNode.maxWidth for all checkboxes in the sim, and factory methods for
 * creating each checkbox.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Circle, HBox, Line, RichText } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import graphingQuadratics from '../../graphingQuadratics.js';
import GQConstants from '../GQConstants.js';
import GraphingQuadraticsStrings from '../../GraphingQuadraticsStrings.js';
import GQColors from '../GQColors.js';
import GQSymbols from '../GQSymbols.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import Manipulator from '../../../../graphing-lines/js/common/view/manipulator/Manipulator.js';
export default class GQCheckbox extends Checkbox {
  constructor(booleanProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      textFill: 'black',
      textMaxWidth: 180,
      // determined empirically
      font: GQConstants.CHECKBOX_LABEL_FONT
    }, providedOptions);
    const text = new RichText(options.string, {
      fill: options.textFill,
      font: options.font,
      maxWidth: options.textMaxWidth,
      tandem: options.tandem.createTandem('text')
    });
    const content = !options.icon ? text : new HBox({
      align: 'center',
      spacing: 8,
      children: [text, options.icon]
    });
    super(booleanProperty, content, options);
  }

  /**
   * Creates the checkbox for the quadratic term, y = ax^2
   */
  static createQuadraticTermCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: `${GQSymbols.y} ${MathSymbols.EQUAL_TO} ${GQSymbols.a}${GQSymbols.xSquared}`,
      // y = ax^2
      textFill: GQColors.QUADRATIC_TERM,
      tandem: tandem,
      phetioDocumentation: 'checkbox that makes the quadratic term (y = ax^2) visible on the graph'
    });
  }

  /**
   * Creates the checkbox for the linear term, y = bx
   */
  static createLinearTermCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: `${GQSymbols.y} ${MathSymbols.EQUAL_TO} ${GQSymbols.b}${GQSymbols.x}`,
      // y = bx
      textFill: GQColors.LINEAR_TERM,
      tandem: tandem,
      phetioDocumentation: 'checkbox that makes the linear term (y = bx) visible on the graph'
    });
  }

  /**
   * Creates the checkbox for the constant term, y = c
   */
  static createConstantTermCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: `${GQSymbols.y} ${MathSymbols.EQUAL_TO} ${GQSymbols.c}`,
      // y = c
      textFill: GQColors.CONSTANT_TERM,
      tandem: tandem,
      phetioDocumentation: 'checkbox that makes the constant term (y = c) visible on the graph'
    });
  }

  /**
   * Creates the 'Axis of Symmetry' checkbox, with a vertical dashed line for the icon.
   */
  static createAxisOfSymmetryCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.axisOfSymmetryStringProperty,
      icon: new Line(0, 0, 0, 5 * GQConstants.AXIS_OF_SYMMETRY_LINE_DASH[0], {
        stroke: GQColors.AXIS_OF_SYMMETRY,
        lineWidth: GQConstants.AXIS_OF_SYMMETRY_LINE_WIDTH,
        lineDash: GQConstants.AXIS_OF_SYMMETRY_LINE_DASH
      }),
      tandem: tandem,
      phetioDocumentation: 'checkbox that makes the axis of symmetry visible on the graph'
    });
  }

  /**
   * Creates the 'Coordinates' checkbox.
   */
  static createCoordinatesCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.coordinatesStringProperty,
      tandem: tandem,
      phetioDocumentation: 'checkbox that makes the (x,y) coordinates visible on points on the graph'
    });
  }

  /**
   * Creates the 'Directrix' checkbox, with a horizontal dashed line for the icon.
   */
  static createDirectrixCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.directrixStringProperty,
      icon: new Line(0, 0, 5 * GQConstants.DIRECTRIX_LINE_DASH[0], 0, {
        stroke: GQColors.DIRECTRIX,
        lineWidth: GQConstants.DIRECTRIX_LINE_WIDTH,
        lineDash: GQConstants.DIRECTRIX_LINE_DASH
      }),
      tandem: tandem,
      phetioDocumentation: 'checkbox that shows the directrix on the graph'
    });
  }

  /**
   * Creates the 'Equations' checkbox.
   */
  static createEquationsCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.equationsStringProperty,
      tandem: tandem,
      phetioDocumentation: 'checkbox that shows equations on graphed curves'
    });
  }

  /**
   * Creates the 'Focus' checkbox, with a manipulator icon.
   */
  static createFocusCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.focusStringProperty,
      icon: Manipulator.createIcon(8, GQColors.FOCUS),
      tandem: tandem,
      phetioDocumentation: 'checkbox that shows the focus on the graph'
    });
  }

  /**
   * Creates the 'Point on Parabola' checkbox, with a manipulator icon.
   */
  static createPointOnParabolaCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.pointOnParabolaStringProperty,
      icon: Manipulator.createIcon(8, GQColors.POINT_ON_PARABOLA),
      tandem: tandem,
      phetioDocumentation: 'checkbox that shows the point on the parabola on the graph'
    });
  }

  /**
   * Creates the 'Roots' checkbox, with a pair of flat points for the icon.
   */
  static createRootsCheckbox(property, tandem) {
    const circleOptions = {
      radius: 6,
      fill: GQColors.ROOTS
    };
    const icon = new HBox({
      align: 'center',
      spacing: 5,
      children: [new Circle(circleOptions), new Circle(circleOptions)]
    });
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.rootsStringProperty,
      icon: icon,
      tandem: tandem,
      phetioDocumentation: 'checkbox that shows roots on the graph'
    });
  }

  /**
   * Creates the 'Vertex' checkbox, with a flat point for the icon.
   */
  static createVertexPointCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.vertexStringProperty,
      icon: new Circle(6, {
        fill: GQColors.VERTEX
      }),
      tandem: tandem,
      phetioDocumentation: 'checkbox that shows the vertex on the graph'
    });
  }

  /**
   * Creates the 'Vertex' checkbox, with a manipulator icon.
   */
  static createVertexManipulatorCheckbox(property, tandem) {
    return new GQCheckbox(property, {
      string: GraphingQuadraticsStrings.vertexStringProperty,
      icon: Manipulator.createIcon(8, GQColors.VERTEX),
      tandem: tandem,
      phetioDocumentation: 'checkbox that shows the vertex manipulator on the graph'
    });
  }
}
graphingQuadratics.register('GQCheckbox', GQCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,