// Copyright 2018-2023, University of Colorado Boulder

/**
 * Displays '(x, y)' coordinates.  If the coordinates are null, this displays '(?, ?)'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Utils from '../../../../dot/js/Utils.js';
import optionize from '../../../../phet-core/js/optionize.js';
import BackgroundNode from '../../../../scenery-phet/js/BackgroundNode.js';
import { Text } from '../../../../scenery/js/imports.js';
import graphingQuadratics from '../../graphingQuadratics.js';
import GraphingQuadraticsStrings from '../../GraphingQuadraticsStrings.js';
import GQConstants from '../GQConstants.js';
export default class CoordinatesNode extends BackgroundNode {
  constructor(coordinatesProperty, providedOptions) {
    const options = optionize()({
      // BackgroundNodeOptions
      xMargin: 4,
      yMargin: 2,
      rectangleOptions: {
        cornerRadius: 4,
        fill: providedOptions.backgroundColor
      },
      maxWidth: 100 // determined empirically
    }, providedOptions);
    const stringProperty = new DerivedProperty([coordinatesProperty, GraphingQuadraticsStrings.coordinateUnknownStringProperty], (coordinates, coordinateUnknownString) => {
      const x = coordinates ? Utils.toFixedNumber(coordinates.x, options.decimals) : coordinateUnknownString;
      const y = coordinates ? Utils.toFixedNumber(coordinates.y, options.decimals) : coordinateUnknownString;
      return `(${x}, ${y})`;
    });
    const text = new Text(stringProperty, {
      font: GQConstants.COORDINATES_FONT,
      fill: options.foregroundColor
    });
    super(text, options);
  }
}
graphingQuadratics.register('CoordinatesNode', CoordinatesNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJVdGlscyIsIm9wdGlvbml6ZSIsIkJhY2tncm91bmROb2RlIiwiVGV4dCIsImdyYXBoaW5nUXVhZHJhdGljcyIsIkdyYXBoaW5nUXVhZHJhdGljc1N0cmluZ3MiLCJHUUNvbnN0YW50cyIsIkNvb3JkaW5hdGVzTm9kZSIsImNvbnN0cnVjdG9yIiwiY29vcmRpbmF0ZXNQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsInJlY3RhbmdsZU9wdGlvbnMiLCJjb3JuZXJSYWRpdXMiLCJmaWxsIiwiYmFja2dyb3VuZENvbG9yIiwibWF4V2lkdGgiLCJzdHJpbmdQcm9wZXJ0eSIsImNvb3JkaW5hdGVVbmtub3duU3RyaW5nUHJvcGVydHkiLCJjb29yZGluYXRlcyIsImNvb3JkaW5hdGVVbmtub3duU3RyaW5nIiwieCIsInRvRml4ZWROdW1iZXIiLCJkZWNpbWFscyIsInkiLCJ0ZXh0IiwiZm9udCIsIkNPT1JESU5BVEVTX0ZPTlQiLCJmb3JlZ3JvdW5kQ29sb3IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvb3JkaW5hdGVzTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaXNwbGF5cyAnKHgsIHkpJyBjb29yZGluYXRlcy4gIElmIHRoZSBjb29yZGluYXRlcyBhcmUgbnVsbCwgdGhpcyBkaXNwbGF5cyAnKD8sID8pJy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgQmFja2dyb3VuZE5vZGUsIHsgQmFja2dyb3VuZE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL0JhY2tncm91bmROb2RlLmpzJztcclxuaW1wb3J0IHsgVENvbG9yLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdyYXBoaW5nUXVhZHJhdGljcyBmcm9tICcuLi8uLi9ncmFwaGluZ1F1YWRyYXRpY3MuanMnO1xyXG5pbXBvcnQgR3JhcGhpbmdRdWFkcmF0aWNzU3RyaW5ncyBmcm9tICcuLi8uLi9HcmFwaGluZ1F1YWRyYXRpY3NTdHJpbmdzLmpzJztcclxuaW1wb3J0IEdRQ29uc3RhbnRzIGZyb20gJy4uL0dRQ29uc3RhbnRzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgZGVjaW1hbHM6IG51bWJlcjtcclxuICBmb3JlZ3JvdW5kQ29sb3I6IFRDb2xvcjtcclxuICBiYWNrZ3JvdW5kQ29sb3I6IFRDb2xvcjtcclxufTtcclxuXHJcbnR5cGUgQ29vcmRpbmF0ZXNOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICZcclxuICBQaWNrUmVxdWlyZWQ8QmFja2dyb3VuZE5vZGVPcHRpb25zLCAndmlzaWJsZVByb3BlcnR5JyB8ICd0YW5kZW0nIHwgJ3BoZXRpb0RvY3VtZW50YXRpb24nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvb3JkaW5hdGVzTm9kZSBleHRlbmRzIEJhY2tncm91bmROb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjb29yZGluYXRlc1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxWZWN0b3IyIHwgbnVsbD4sIHByb3ZpZGVkT3B0aW9uczogQ29vcmRpbmF0ZXNOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPENvb3JkaW5hdGVzTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBCYWNrZ3JvdW5kTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIEJhY2tncm91bmROb2RlT3B0aW9uc1xyXG4gICAgICB4TWFyZ2luOiA0LFxyXG4gICAgICB5TWFyZ2luOiAyLFxyXG4gICAgICByZWN0YW5nbGVPcHRpb25zOiB7XHJcbiAgICAgICAgY29ybmVyUmFkaXVzOiA0LFxyXG4gICAgICAgIGZpbGw6IHByb3ZpZGVkT3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3JcclxuICAgICAgfSxcclxuICAgICAgbWF4V2lkdGg6IDEwMCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBzdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgY29vcmRpbmF0ZXNQcm9wZXJ0eSwgR3JhcGhpbmdRdWFkcmF0aWNzU3RyaW5ncy5jb29yZGluYXRlVW5rbm93blN0cmluZ1Byb3BlcnR5IF0sXHJcbiAgICAgICggY29vcmRpbmF0ZXMsIGNvb3JkaW5hdGVVbmtub3duU3RyaW5nICkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHggPSBjb29yZGluYXRlcyA/IFV0aWxzLnRvRml4ZWROdW1iZXIoIGNvb3JkaW5hdGVzLngsIG9wdGlvbnMuZGVjaW1hbHMgKSA6IGNvb3JkaW5hdGVVbmtub3duU3RyaW5nO1xyXG4gICAgICAgIGNvbnN0IHkgPSBjb29yZGluYXRlcyA/IFV0aWxzLnRvRml4ZWROdW1iZXIoIGNvb3JkaW5hdGVzLnksIG9wdGlvbnMuZGVjaW1hbHMgKSA6IGNvb3JkaW5hdGVVbmtub3duU3RyaW5nO1xyXG4gICAgICAgIHJldHVybiBgKCR7eH0sICR7eX0pYDtcclxuICAgICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dCggc3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogR1FDb25zdGFudHMuQ09PUkRJTkFURVNfRk9OVCxcclxuICAgICAgZmlsbDogb3B0aW9ucy5mb3JlZ3JvdW5kQ29sb3JcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggdGV4dCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdRdWFkcmF0aWNzLnJlZ2lzdGVyKCAnQ29vcmRpbmF0ZXNOb2RlJywgQ29vcmRpbmF0ZXNOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFFcEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUUvQyxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBRTdELE9BQU9DLGNBQWMsTUFBaUMsK0NBQStDO0FBQ3JHLFNBQWlCQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ2hFLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyx5QkFBeUIsTUFBTSxvQ0FBb0M7QUFDMUUsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQVczQyxlQUFlLE1BQU1DLGVBQWUsU0FBU0wsY0FBYyxDQUFDO0VBRW5ETSxXQUFXQSxDQUFFQyxtQkFBc0QsRUFBRUMsZUFBdUMsRUFBRztJQUVwSCxNQUFNQyxPQUFPLEdBQUdWLFNBQVMsQ0FBNkQsQ0FBQyxDQUFFO01BRXZGO01BQ0FXLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLGdCQUFnQixFQUFFO1FBQ2hCQyxZQUFZLEVBQUUsQ0FBQztRQUNmQyxJQUFJLEVBQUVOLGVBQWUsQ0FBQ087TUFDeEIsQ0FBQztNQUNEQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0lBQ2hCLENBQUMsRUFBRVIsZUFBZ0IsQ0FBQztJQUVwQixNQUFNUyxjQUFjLEdBQUcsSUFBSXBCLGVBQWUsQ0FDeEMsQ0FBRVUsbUJBQW1CLEVBQUVKLHlCQUF5QixDQUFDZSwrQkFBK0IsQ0FBRSxFQUNsRixDQUFFQyxXQUFXLEVBQUVDLHVCQUF1QixLQUFNO01BQzFDLE1BQU1DLENBQUMsR0FBR0YsV0FBVyxHQUFHckIsS0FBSyxDQUFDd0IsYUFBYSxDQUFFSCxXQUFXLENBQUNFLENBQUMsRUFBRVosT0FBTyxDQUFDYyxRQUFTLENBQUMsR0FBR0gsdUJBQXVCO01BQ3hHLE1BQU1JLENBQUMsR0FBR0wsV0FBVyxHQUFHckIsS0FBSyxDQUFDd0IsYUFBYSxDQUFFSCxXQUFXLENBQUNLLENBQUMsRUFBRWYsT0FBTyxDQUFDYyxRQUFTLENBQUMsR0FBR0gsdUJBQXVCO01BQ3hHLE9BQVEsSUFBR0MsQ0FBRSxLQUFJRyxDQUFFLEdBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUwsTUFBTUMsSUFBSSxHQUFHLElBQUl4QixJQUFJLENBQUVnQixjQUFjLEVBQUU7TUFDckNTLElBQUksRUFBRXRCLFdBQVcsQ0FBQ3VCLGdCQUFnQjtNQUNsQ2IsSUFBSSxFQUFFTCxPQUFPLENBQUNtQjtJQUNoQixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVILElBQUksRUFBRWhCLE9BQVEsQ0FBQztFQUN4QjtBQUNGO0FBRUFQLGtCQUFrQixDQUFDMkIsUUFBUSxDQUFFLGlCQUFpQixFQUFFeEIsZUFBZ0IsQ0FBQyJ9