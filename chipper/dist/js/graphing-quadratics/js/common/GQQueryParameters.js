// Copyright 2018-2023, University of Colorado Boulder

/**
 * Query parameters supported by this simulation.
 *
 * Running with ?log will print these query parameters and their values to the console,
 * as well as changes to selective model Properties.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import logGlobal from '../../../phet-core/js/logGlobal.js';
import graphingQuadratics from '../graphingQuadratics.js';
const GQQueryParameters = QueryStringMachine.getAll({
  // Point tools will snap ON to a curve when <= this distance from the curve, in model coordinates.
  // See https://github.com/phetsims/graphing-quadratics/issues/47
  // For internal use only.
  snapOnDistance: {
    type: 'number',
    defaultValue: 0.5,
    isValidValue: value => value > 0
  },
  // Point tools will snap OFF of a curve when > this distance from the curve, in model coordinates.
  // See https://github.com/phetsims/graphing-quadratics/issues/47
  // For internal use only.
  snapOffDistance: {
    type: 'number',
    defaultValue: 2,
    isValidValue: value => value > 0
  },
  // Distance that a point tool must be from a curve in order to register as being ON the curve, in model coordinates.
  // See https://github.com/phetsims/graphing-quadratics/issues/81
  // For internal use only.
  pointToolThreshold: {
    type: 'number',
    defaultValue: 0.1,
    isValidValue: value => value > 0
  },
  // Puts a red dot at the origin of Nodes that required transform debugging during implementation.
  // For internal use only.
  showOrigin: {
    type: 'flag'
  },
  // CSS color used for the translucent background behind equations on curves. Used for debugging.
  // For internal use only.
  equationsBackgroundColor: {
    type: 'string',
    defaultValue: 'white'
  }
});
graphingQuadratics.register('GQQueryParameters', GQQueryParameters);

// Log query parameters
logGlobal('phet.chipper.queryParameters');
logGlobal('phet.preloads.phetio.queryParameters');
logGlobal('phet.graphingQuadratics.GQQueryParameters');
export default GQQueryParameters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dHbG9iYWwiLCJncmFwaGluZ1F1YWRyYXRpY3MiLCJHUVF1ZXJ5UGFyYW1ldGVycyIsIlF1ZXJ5U3RyaW5nTWFjaGluZSIsImdldEFsbCIsInNuYXBPbkRpc3RhbmNlIiwidHlwZSIsImRlZmF1bHRWYWx1ZSIsImlzVmFsaWRWYWx1ZSIsInZhbHVlIiwic25hcE9mZkRpc3RhbmNlIiwicG9pbnRUb29sVGhyZXNob2xkIiwic2hvd09yaWdpbiIsImVxdWF0aW9uc0JhY2tncm91bmRDb2xvciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR1FRdWVyeVBhcmFtZXRlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUXVlcnkgcGFyYW1ldGVycyBzdXBwb3J0ZWQgYnkgdGhpcyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBSdW5uaW5nIHdpdGggP2xvZyB3aWxsIHByaW50IHRoZXNlIHF1ZXJ5IHBhcmFtZXRlcnMgYW5kIHRoZWlyIHZhbHVlcyB0byB0aGUgY29uc29sZSxcclxuICogYXMgd2VsbCBhcyBjaGFuZ2VzIHRvIHNlbGVjdGl2ZSBtb2RlbCBQcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBsb2dHbG9iYWwgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2xvZ0dsb2JhbC5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1F1YWRyYXRpY3MgZnJvbSAnLi4vZ3JhcGhpbmdRdWFkcmF0aWNzLmpzJztcclxuXHJcbmNvbnN0IEdRUXVlcnlQYXJhbWV0ZXJzID0gUXVlcnlTdHJpbmdNYWNoaW5lLmdldEFsbCgge1xyXG5cclxuICAvLyBQb2ludCB0b29scyB3aWxsIHNuYXAgT04gdG8gYSBjdXJ2ZSB3aGVuIDw9IHRoaXMgZGlzdGFuY2UgZnJvbSB0aGUgY3VydmUsIGluIG1vZGVsIGNvb3JkaW5hdGVzLlxyXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ3JhcGhpbmctcXVhZHJhdGljcy9pc3N1ZXMvNDdcclxuICAvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXHJcbiAgc25hcE9uRGlzdGFuY2U6IHtcclxuICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgZGVmYXVsdFZhbHVlOiAwLjUsXHJcbiAgICBpc1ZhbGlkVmFsdWU6IHZhbHVlID0+ICggdmFsdWUgPiAwIClcclxuICB9LFxyXG5cclxuICAvLyBQb2ludCB0b29scyB3aWxsIHNuYXAgT0ZGIG9mIGEgY3VydmUgd2hlbiA+IHRoaXMgZGlzdGFuY2UgZnJvbSB0aGUgY3VydmUsIGluIG1vZGVsIGNvb3JkaW5hdGVzLlxyXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ3JhcGhpbmctcXVhZHJhdGljcy9pc3N1ZXMvNDdcclxuICAvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXHJcbiAgc25hcE9mZkRpc3RhbmNlOiB7XHJcbiAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgIGRlZmF1bHRWYWx1ZTogMixcclxuICAgIGlzVmFsaWRWYWx1ZTogdmFsdWUgPT4gKCB2YWx1ZSA+IDAgKVxyXG4gIH0sXHJcblxyXG4gIC8vIERpc3RhbmNlIHRoYXQgYSBwb2ludCB0b29sIG11c3QgYmUgZnJvbSBhIGN1cnZlIGluIG9yZGVyIHRvIHJlZ2lzdGVyIGFzIGJlaW5nIE9OIHRoZSBjdXJ2ZSwgaW4gbW9kZWwgY29vcmRpbmF0ZXMuXHJcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9ncmFwaGluZy1xdWFkcmF0aWNzL2lzc3Vlcy84MVxyXG4gIC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuICBwb2ludFRvb2xUaHJlc2hvbGQ6IHtcclxuICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgZGVmYXVsdFZhbHVlOiAwLjEsXHJcbiAgICBpc1ZhbGlkVmFsdWU6IHZhbHVlID0+ICggdmFsdWUgPiAwIClcclxuICB9LFxyXG5cclxuICAvLyBQdXRzIGEgcmVkIGRvdCBhdCB0aGUgb3JpZ2luIG9mIE5vZGVzIHRoYXQgcmVxdWlyZWQgdHJhbnNmb3JtIGRlYnVnZ2luZyBkdXJpbmcgaW1wbGVtZW50YXRpb24uXHJcbiAgLy8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxyXG4gIHNob3dPcmlnaW46IHsgdHlwZTogJ2ZsYWcnIH0sXHJcblxyXG4gIC8vIENTUyBjb2xvciB1c2VkIGZvciB0aGUgdHJhbnNsdWNlbnQgYmFja2dyb3VuZCBiZWhpbmQgZXF1YXRpb25zIG9uIGN1cnZlcy4gVXNlZCBmb3IgZGVidWdnaW5nLlxyXG4gIC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuICBlcXVhdGlvbnNCYWNrZ3JvdW5kQ29sb3I6IHtcclxuICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgZGVmYXVsdFZhbHVlOiAnd2hpdGUnXHJcbiAgfVxyXG59ICk7XHJcblxyXG5ncmFwaGluZ1F1YWRyYXRpY3MucmVnaXN0ZXIoICdHUVF1ZXJ5UGFyYW1ldGVycycsIEdRUXVlcnlQYXJhbWV0ZXJzICk7XHJcblxyXG4vLyBMb2cgcXVlcnkgcGFyYW1ldGVyc1xyXG5sb2dHbG9iYWwoICdwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzJyApO1xyXG5sb2dHbG9iYWwoICdwaGV0LnByZWxvYWRzLnBoZXRpby5xdWVyeVBhcmFtZXRlcnMnICk7XHJcbmxvZ0dsb2JhbCggJ3BoZXQuZ3JhcGhpbmdRdWFkcmF0aWNzLkdRUXVlcnlQYXJhbWV0ZXJzJyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR1FRdWVyeVBhcmFtZXRlcnM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxvQ0FBb0M7QUFDMUQsT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBRXpELE1BQU1DLGlCQUFpQixHQUFHQyxrQkFBa0IsQ0FBQ0MsTUFBTSxDQUFFO0VBRW5EO0VBQ0E7RUFDQTtFQUNBQyxjQUFjLEVBQUU7SUFDZEMsSUFBSSxFQUFFLFFBQVE7SUFDZEMsWUFBWSxFQUFFLEdBQUc7SUFDakJDLFlBQVksRUFBRUMsS0FBSyxJQUFNQSxLQUFLLEdBQUc7RUFDbkMsQ0FBQztFQUVEO0VBQ0E7RUFDQTtFQUNBQyxlQUFlLEVBQUU7SUFDZkosSUFBSSxFQUFFLFFBQVE7SUFDZEMsWUFBWSxFQUFFLENBQUM7SUFDZkMsWUFBWSxFQUFFQyxLQUFLLElBQU1BLEtBQUssR0FBRztFQUNuQyxDQUFDO0VBRUQ7RUFDQTtFQUNBO0VBQ0FFLGtCQUFrQixFQUFFO0lBQ2xCTCxJQUFJLEVBQUUsUUFBUTtJQUNkQyxZQUFZLEVBQUUsR0FBRztJQUNqQkMsWUFBWSxFQUFFQyxLQUFLLElBQU1BLEtBQUssR0FBRztFQUNuQyxDQUFDO0VBRUQ7RUFDQTtFQUNBRyxVQUFVLEVBQUU7SUFBRU4sSUFBSSxFQUFFO0VBQU8sQ0FBQztFQUU1QjtFQUNBO0VBQ0FPLHdCQUF3QixFQUFFO0lBQ3hCUCxJQUFJLEVBQUUsUUFBUTtJQUNkQyxZQUFZLEVBQUU7RUFDaEI7QUFDRixDQUFFLENBQUM7QUFFSE4sa0JBQWtCLENBQUNhLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRVosaUJBQWtCLENBQUM7O0FBRXJFO0FBQ0FGLFNBQVMsQ0FBRSw4QkFBK0IsQ0FBQztBQUMzQ0EsU0FBUyxDQUFFLHNDQUF1QyxDQUFDO0FBQ25EQSxTQUFTLENBQUUsMkNBQTRDLENBQUM7QUFFeEQsZUFBZUUsaUJBQWlCIn0=