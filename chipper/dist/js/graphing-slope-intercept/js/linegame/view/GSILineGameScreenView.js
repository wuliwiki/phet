// Copyright 2017-2023, University of Colorado Boulder

/**
 * View for the 'Line Game' screen in the 'Graphing Slope-Intercept' sim.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import level1_png from '../../../../graphing-lines/images/level1_png.js';
import level3_png from '../../../../graphing-lines/images/level3_png.js';
import level5_png from '../../../../graphing-lines/images/level5_png.js';
import level6_png from '../../../../graphing-lines/images/level6_png.js';
import BaseGameScreenView from '../../../../graphing-lines/js/linegame/view/BaseGameScreenView.js';
import GLRewardNode from '../../../../graphing-lines/js/linegame/view/GLRewardNode.js';
import graphingSlopeIntercept from '../../graphingSlopeIntercept.js';
export default class GSILineGameScreenView extends BaseGameScreenView {
  constructor(model, tandem) {
    // Images for the level-selection buttons, ordered by level. Note that this reuses images from graphing-lines,
    // but assigns them to different levels than their file names indicate.
    const levelImages = [level1_png, level3_png, level5_png, level6_png];

    // functions that create nodes for the game reward, ordered by level
    const rewardNodeFunctions = [GLRewardNode.createGraphNodes, GLRewardNode.createPointToolNodes, GLRewardNode.createPaperAirplaneNodes, GLRewardNode.createSmileyFaceNodes];
    super(model, levelImages, rewardNodeFunctions, tandem);
  }
}
graphingSlopeIntercept.register('GSILineGameScreenView', GSILineGameScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsZXZlbDFfcG5nIiwibGV2ZWwzX3BuZyIsImxldmVsNV9wbmciLCJsZXZlbDZfcG5nIiwiQmFzZUdhbWVTY3JlZW5WaWV3IiwiR0xSZXdhcmROb2RlIiwiZ3JhcGhpbmdTbG9wZUludGVyY2VwdCIsIkdTSUxpbmVHYW1lU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJsZXZlbEltYWdlcyIsInJld2FyZE5vZGVGdW5jdGlvbnMiLCJjcmVhdGVHcmFwaE5vZGVzIiwiY3JlYXRlUG9pbnRUb29sTm9kZXMiLCJjcmVhdGVQYXBlckFpcnBsYW5lTm9kZXMiLCJjcmVhdGVTbWlsZXlGYWNlTm9kZXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdTSUxpbmVHYW1lU2NyZWVuVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IGZvciB0aGUgJ0xpbmUgR2FtZScgc2NyZWVuIGluIHRoZSAnR3JhcGhpbmcgU2xvcGUtSW50ZXJjZXB0JyBzaW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IGxldmVsMV9wbmcgZnJvbSAnLi4vLi4vLi4vLi4vZ3JhcGhpbmctbGluZXMvaW1hZ2VzL2xldmVsMV9wbmcuanMnO1xyXG5pbXBvcnQgbGV2ZWwzX3BuZyBmcm9tICcuLi8uLi8uLi8uLi9ncmFwaGluZy1saW5lcy9pbWFnZXMvbGV2ZWwzX3BuZy5qcyc7XHJcbmltcG9ydCBsZXZlbDVfcG5nIGZyb20gJy4uLy4uLy4uLy4uL2dyYXBoaW5nLWxpbmVzL2ltYWdlcy9sZXZlbDVfcG5nLmpzJztcclxuaW1wb3J0IGxldmVsNl9wbmcgZnJvbSAnLi4vLi4vLi4vLi4vZ3JhcGhpbmctbGluZXMvaW1hZ2VzL2xldmVsNl9wbmcuanMnO1xyXG5pbXBvcnQgQmFzZUdhbWVTY3JlZW5WaWV3IGZyb20gJy4uLy4uLy4uLy4uL2dyYXBoaW5nLWxpbmVzL2pzL2xpbmVnYW1lL3ZpZXcvQmFzZUdhbWVTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IEdMUmV3YXJkTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9ncmFwaGluZy1saW5lcy9qcy9saW5lZ2FtZS92aWV3L0dMUmV3YXJkTm9kZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBncmFwaGluZ1Nsb3BlSW50ZXJjZXB0IGZyb20gJy4uLy4uL2dyYXBoaW5nU2xvcGVJbnRlcmNlcHQuanMnO1xyXG5pbXBvcnQgR1NJTGluZUdhbWVNb2RlbCBmcm9tICcuLi9tb2RlbC9HU0lMaW5lR2FtZU1vZGVsLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdTSUxpbmVHYW1lU2NyZWVuVmlldyBleHRlbmRzIEJhc2VHYW1lU2NyZWVuVmlldyB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IEdTSUxpbmVHYW1lTW9kZWwsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIC8vIEltYWdlcyBmb3IgdGhlIGxldmVsLXNlbGVjdGlvbiBidXR0b25zLCBvcmRlcmVkIGJ5IGxldmVsLiBOb3RlIHRoYXQgdGhpcyByZXVzZXMgaW1hZ2VzIGZyb20gZ3JhcGhpbmctbGluZXMsXHJcbiAgICAvLyBidXQgYXNzaWducyB0aGVtIHRvIGRpZmZlcmVudCBsZXZlbHMgdGhhbiB0aGVpciBmaWxlIG5hbWVzIGluZGljYXRlLlxyXG4gICAgY29uc3QgbGV2ZWxJbWFnZXMgPSBbIGxldmVsMV9wbmcsIGxldmVsM19wbmcsIGxldmVsNV9wbmcsIGxldmVsNl9wbmcgXTtcclxuXHJcbiAgICAvLyBmdW5jdGlvbnMgdGhhdCBjcmVhdGUgbm9kZXMgZm9yIHRoZSBnYW1lIHJld2FyZCwgb3JkZXJlZCBieSBsZXZlbFxyXG4gICAgY29uc3QgcmV3YXJkTm9kZUZ1bmN0aW9ucyA9IFtcclxuICAgICAgR0xSZXdhcmROb2RlLmNyZWF0ZUdyYXBoTm9kZXMsXHJcbiAgICAgIEdMUmV3YXJkTm9kZS5jcmVhdGVQb2ludFRvb2xOb2RlcyxcclxuICAgICAgR0xSZXdhcmROb2RlLmNyZWF0ZVBhcGVyQWlycGxhbmVOb2RlcyxcclxuICAgICAgR0xSZXdhcmROb2RlLmNyZWF0ZVNtaWxleUZhY2VOb2Rlc1xyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIGxldmVsSW1hZ2VzLCByZXdhcmROb2RlRnVuY3Rpb25zLCB0YW5kZW0gKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nU2xvcGVJbnRlcmNlcHQucmVnaXN0ZXIoICdHU0lMaW5lR2FtZVNjcmVlblZpZXcnLCBHU0lMaW5lR2FtZVNjcmVlblZpZXcgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGlEQUFpRDtBQUN4RSxPQUFPQyxVQUFVLE1BQU0saURBQWlEO0FBQ3hFLE9BQU9DLFVBQVUsTUFBTSxpREFBaUQ7QUFDeEUsT0FBT0MsVUFBVSxNQUFNLGlEQUFpRDtBQUN4RSxPQUFPQyxrQkFBa0IsTUFBTSxtRUFBbUU7QUFDbEcsT0FBT0MsWUFBWSxNQUFNLDZEQUE2RDtBQUV0RixPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFHcEUsZUFBZSxNQUFNQyxxQkFBcUIsU0FBU0gsa0JBQWtCLENBQUM7RUFFN0RJLFdBQVdBLENBQUVDLEtBQXVCLEVBQUVDLE1BQWMsRUFBRztJQUU1RDtJQUNBO0lBQ0EsTUFBTUMsV0FBVyxHQUFHLENBQUVYLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsQ0FBRTs7SUFFdEU7SUFDQSxNQUFNUyxtQkFBbUIsR0FBRyxDQUMxQlAsWUFBWSxDQUFDUSxnQkFBZ0IsRUFDN0JSLFlBQVksQ0FBQ1Msb0JBQW9CLEVBQ2pDVCxZQUFZLENBQUNVLHdCQUF3QixFQUNyQ1YsWUFBWSxDQUFDVyxxQkFBcUIsQ0FDbkM7SUFFRCxLQUFLLENBQUVQLEtBQUssRUFBRUUsV0FBVyxFQUFFQyxtQkFBbUIsRUFBRUYsTUFBTyxDQUFDO0VBQzFEO0FBQ0Y7QUFFQUosc0JBQXNCLENBQUNXLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRVYscUJBQXNCLENBQUMifQ==