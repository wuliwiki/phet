// Copyright 2017-2023, University of Colorado Boulder

/**
 * Creates game challenges for Level 2 in the 'Graphing Slope-Intercept' sim.
 * Identical to Level 1, but with different sets of possible slopes and y-intercepts.
 * See createSlopeArrays and createYInterceptArrays.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import ValuePool from '../../../../graphing-lines/js/linegame/model/ValuePool.js';
import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import graphingSlopeIntercept from '../../graphingSlopeIntercept.js';
import GSIChallengeFactory1 from './GSIChallengeFactory1.js';
export default class GSIChallengeFactory2 extends GSIChallengeFactory1 {
  constructor() {
    super();
  }

  /**
   * Level 2 has a different set of possible slopes, so override this function.
   * Creates the sets of slopes used for generating challenges.
   */
  createSlopeArrays() {
    return [
    // positive and negative integers
    [new Fraction(1, 1), new Fraction(2, 1), new Fraction(3, 1), new Fraction(4, 1), new Fraction(5, 1), new Fraction(-1, 1), new Fraction(-2, 1), new Fraction(-3, 1), new Fraction(-4, 1), new Fraction(-5, 1)],
    // positive fractions
    [new Fraction(1, 4), new Fraction(1, 5), new Fraction(1, 6), new Fraction(1, 7), new Fraction(2, 5), new Fraction(3, 5), new Fraction(2, 7), new Fraction(3, 7), new Fraction(4, 7), new Fraction(5, 2), new Fraction(3, 2), new Fraction(7, 2), new Fraction(7, 3), new Fraction(7, 4)],
    // negative fractions
    [new Fraction(-1, 2), new Fraction(-1, 3), new Fraction(-1, 4), new Fraction(-1, 5), new Fraction(-2, 3), new Fraction(-3, 4), new Fraction(-2, 5), new Fraction(-3, 5), new Fraction(-4, 5), new Fraction(-3, 2), new Fraction(-4, 3), new Fraction(-5, 2), new Fraction(-5, 3), new Fraction(-5, 4)]];
  }

  /**
   * Level 2 has a different set of possible y-intercepts, so override this function.
   * Creates the sets of y-intercepts used for generating challenges.
   */
  createYInterceptArrays() {
    return [ValuePool.rangeToArray(new Range(this.yRange.min, -1)),
    // negative intercepts
    ValuePool.rangeToArray(new Range(1, this.yRange.max)) // positive intercepts
    ];
  }
}

graphingSlopeIntercept.register('GSIChallengeFactory2', GSIChallengeFactory2);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlZhbHVlUG9vbCIsIkZyYWN0aW9uIiwiZ3JhcGhpbmdTbG9wZUludGVyY2VwdCIsIkdTSUNoYWxsZW5nZUZhY3RvcnkxIiwiR1NJQ2hhbGxlbmdlRmFjdG9yeTIiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZVNsb3BlQXJyYXlzIiwiY3JlYXRlWUludGVyY2VwdEFycmF5cyIsInJhbmdlVG9BcnJheSIsInlSYW5nZSIsIm1pbiIsIm1heCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR1NJQ2hhbGxlbmdlRmFjdG9yeTIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBnYW1lIGNoYWxsZW5nZXMgZm9yIExldmVsIDIgaW4gdGhlICdHcmFwaGluZyBTbG9wZS1JbnRlcmNlcHQnIHNpbS5cclxuICogSWRlbnRpY2FsIHRvIExldmVsIDEsIGJ1dCB3aXRoIGRpZmZlcmVudCBzZXRzIG9mIHBvc3NpYmxlIHNsb3BlcyBhbmQgeS1pbnRlcmNlcHRzLlxyXG4gKiBTZWUgY3JlYXRlU2xvcGVBcnJheXMgYW5kIGNyZWF0ZVlJbnRlcmNlcHRBcnJheXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBWYWx1ZVBvb2wgZnJvbSAnLi4vLi4vLi4vLi4vZ3JhcGhpbmctbGluZXMvanMvbGluZWdhbWUvbW9kZWwvVmFsdWVQb29sLmpzJztcclxuaW1wb3J0IEZyYWN0aW9uIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvbW9kZWwvRnJhY3Rpb24uanMnO1xyXG5pbXBvcnQgZ3JhcGhpbmdTbG9wZUludGVyY2VwdCBmcm9tICcuLi8uLi9ncmFwaGluZ1Nsb3BlSW50ZXJjZXB0LmpzJztcclxuaW1wb3J0IEdTSUNoYWxsZW5nZUZhY3RvcnkxIGZyb20gJy4vR1NJQ2hhbGxlbmdlRmFjdG9yeTEuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR1NJQ2hhbGxlbmdlRmFjdG9yeTIgZXh0ZW5kcyBHU0lDaGFsbGVuZ2VGYWN0b3J5MSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMZXZlbCAyIGhhcyBhIGRpZmZlcmVudCBzZXQgb2YgcG9zc2libGUgc2xvcGVzLCBzbyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uLlxyXG4gICAqIENyZWF0ZXMgdGhlIHNldHMgb2Ygc2xvcGVzIHVzZWQgZm9yIGdlbmVyYXRpbmcgY2hhbGxlbmdlcy5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgY3JlYXRlU2xvcGVBcnJheXMoKTogRnJhY3Rpb25bXVtdIHtcclxuICAgIHJldHVybiBbXHJcblxyXG4gICAgICAvLyBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgaW50ZWdlcnNcclxuICAgICAgW1xyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggMSwgMSApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggMiwgMSApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggMywgMSApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggNCwgMSApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggNSwgMSApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggLTEsIDEgKSxcclxuICAgICAgICBuZXcgRnJhY3Rpb24oIC0yLCAxICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAtMywgMSApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggLTQsIDEgKSxcclxuICAgICAgICBuZXcgRnJhY3Rpb24oIC01LCAxIClcclxuICAgICAgXSxcclxuXHJcbiAgICAgIC8vIHBvc2l0aXZlIGZyYWN0aW9uc1xyXG4gICAgICBbXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAxLCA0ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAxLCA1ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAxLCA2ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAxLCA3ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAyLCA1ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAzLCA1ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAyLCA3ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAzLCA3ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCA0LCA3ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCA1LCAyICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAzLCAyICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCA3LCAyICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCA3LCAzICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCA3LCA0IClcclxuICAgICAgXSxcclxuXHJcbiAgICAgIC8vIG5lZ2F0aXZlIGZyYWN0aW9uc1xyXG4gICAgICBbXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAtMSwgMiApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggLTEsIDMgKSxcclxuICAgICAgICBuZXcgRnJhY3Rpb24oIC0xLCA0ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAtMSwgNSApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggLTIsIDMgKSxcclxuICAgICAgICBuZXcgRnJhY3Rpb24oIC0zLCA0ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAtMiwgNSApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggLTMsIDUgKSxcclxuICAgICAgICBuZXcgRnJhY3Rpb24oIC00LCA1ICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAtMywgMiApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggLTQsIDMgKSxcclxuICAgICAgICBuZXcgRnJhY3Rpb24oIC01LCAyICksXHJcbiAgICAgICAgbmV3IEZyYWN0aW9uKCAtNSwgMyApLFxyXG4gICAgICAgIG5ldyBGcmFjdGlvbiggLTUsIDQgKVxyXG4gICAgICBdXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTGV2ZWwgMiBoYXMgYSBkaWZmZXJlbnQgc2V0IG9mIHBvc3NpYmxlIHktaW50ZXJjZXB0cywgc28gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbi5cclxuICAgKiBDcmVhdGVzIHRoZSBzZXRzIG9mIHktaW50ZXJjZXB0cyB1c2VkIGZvciBnZW5lcmF0aW5nIGNoYWxsZW5nZXMuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIGNyZWF0ZVlJbnRlcmNlcHRBcnJheXMoKTogbnVtYmVyW11bXSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBWYWx1ZVBvb2wucmFuZ2VUb0FycmF5KCBuZXcgUmFuZ2UoIHRoaXMueVJhbmdlLm1pbiwgLTEgKSApLCAvLyBuZWdhdGl2ZSBpbnRlcmNlcHRzXHJcbiAgICAgIFZhbHVlUG9vbC5yYW5nZVRvQXJyYXkoIG5ldyBSYW5nZSggMSwgdGhpcy55UmFuZ2UubWF4ICkgKSAgIC8vIHBvc2l0aXZlIGludGVyY2VwdHNcclxuICAgIF07XHJcbiAgfVxyXG59XHJcblxyXG5ncmFwaGluZ1Nsb3BlSW50ZXJjZXB0LnJlZ2lzdGVyKCAnR1NJQ2hhbGxlbmdlRmFjdG9yeTInLCBHU0lDaGFsbGVuZ2VGYWN0b3J5MiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxTQUFTLE1BQU0sMkRBQTJEO0FBQ2pGLE9BQU9DLFFBQVEsTUFBTSw2Q0FBNkM7QUFDbEUsT0FBT0Msc0JBQXNCLE1BQU0saUNBQWlDO0FBQ3BFLE9BQU9DLG9CQUFvQixNQUFNLDJC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