// Copyright 2015-2022, University of Colorado Boulder

/**
 * Models dispersion functions for each material. Uses the actual dispersion equation for air (A) and the actual
 * dispersion equation for glass (G) then interpolates between the functions n(lambda) = beta * A(lambda) + (1-beta) *
 * G(lambda) where 0<=beta<=infinity is a characteristic of the material. The material is characterized by a reference
 * wavelength, so that when light is the specified wavelength, the index of refraction takes the reference value.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import Utils from '../../../../dot/js/Utils.js';
import bendingLight from '../../bendingLight.js';
import BendingLightConstants from '../BendingLightConstants.js';
class DispersionFunction {
  /**
   * @param referenceIndexOfRefraction - IndexOfRefraction of medium
   * @param wavelength - wavelength in meters
   */
  constructor(referenceIndexOfRefraction, wavelength) {
    this.referenceIndexOfRefraction = referenceIndexOfRefraction;
    this.referenceWavelength = wavelength;
  }

  /**
   * See http://en.wikipedia.org/wiki/Sellmeier_equation
   * @param wavelength - wavelength in meters
   */
  getSellmeierValue(wavelength) {
    const L2 = wavelength * wavelength;
    const B1 = 1.03961212;
    const B2 = 0.231792344;
    const B3 = 1.01046945;

    // convert to metric
    const C1 = 6.00069867E-3 * 1E-12;
    const C2 = 2.00179144E-2 * 1E-12;
    const C3 = 1.03560653E2 * 1E-12;
    return Math.sqrt(1 + B1 * L2 / (L2 - C1) + B2 * L2 / (L2 - C2) + B3 * L2 / (L2 - C3));
  }

  // Determines the index of refraction for the WAVELENGTH_RED
  getIndexOfRefractionForRed() {
    return this.getIndexOfRefraction(BendingLightConstants.WAVELENGTH_RED);
  }

  /**
   * See class-level documentation for an explanation of this algorithm
   * @param wavelength - wavelength in meters
   */
  getIndexOfRefraction(wavelength) {
    // get the reference values
    const nAirReference = this.getAirIndex(this.referenceWavelength);
    const nGlassReference = this.getSellmeierValue(this.referenceWavelength);

    // determine the mapping and make sure it is in a good range
    const delta = nGlassReference - nAirReference;

    // 0 to 1 (air to glass)
    let x = (this.referenceIndexOfRefraction - nAirReference) / delta;
    x = Utils.clamp(x, 0, Number.POSITIVE_INFINITY);

    // take a linear combination of glass and air equations
    return x * this.getSellmeierValue(wavelength) + (1 - x) * this.getAirIndex(wavelength);
  }

  /**
   * See http://refractiveindex.info/?group=GASES&material=Air
   * @param wavelength - wavelength in meters
   */
  getAirIndex(wavelength) {
    return 1 + 5792105E-8 / (238.0185 - Math.pow(wavelength * 1E6, -2)) + 167917E-8 / (57.362 - Math.pow(wavelength * 1E6, -2));
  }
}
bendingLight.register('DispersionFunction', DispersionFunction);
export default DispersionFunction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsImJlbmRpbmdMaWdodCIsIkJlbmRpbmdMaWdodENvbnN0YW50cyIsIkRpc3BlcnNpb25GdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwicmVmZXJlbmNlSW5kZXhPZlJlZnJhY3Rpb24iLCJ3YXZlbGVuZ3RoIiwicmVmZXJlbmNlV2F2ZWxlbmd0aCIsImdldFNlbGxtZWllclZhbHVlIiwiTDIiLCJCMSIsIkIyIiwiQjMiLCJDMSIsIkMyIiwiQzMiLCJNYXRoIiwic3FydCIsImdldEluZGV4T2ZSZWZyYWN0aW9uRm9yUmVkIiwiZ2V0SW5kZXhPZlJlZnJhY3Rpb24iLCJXQVZFTEVOR1RIX1JFRCIsIm5BaXJSZWZlcmVuY2UiLCJnZXRBaXJJbmRleCIsIm5HbGFzc1JlZmVyZW5jZSIsImRlbHRhIiwieCIsImNsYW1wIiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJwb3ciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpc3BlcnNpb25GdW5jdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbHMgZGlzcGVyc2lvbiBmdW5jdGlvbnMgZm9yIGVhY2ggbWF0ZXJpYWwuIFVzZXMgdGhlIGFjdHVhbCBkaXNwZXJzaW9uIGVxdWF0aW9uIGZvciBhaXIgKEEpIGFuZCB0aGUgYWN0dWFsXHJcbiAqIGRpc3BlcnNpb24gZXF1YXRpb24gZm9yIGdsYXNzIChHKSB0aGVuIGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBmdW5jdGlvbnMgbihsYW1iZGEpID0gYmV0YSAqIEEobGFtYmRhKSArICgxLWJldGEpICpcclxuICogRyhsYW1iZGEpIHdoZXJlIDA8PWJldGE8PWluZmluaXR5IGlzIGEgY2hhcmFjdGVyaXN0aWMgb2YgdGhlIG1hdGVyaWFsLiBUaGUgbWF0ZXJpYWwgaXMgY2hhcmFjdGVyaXplZCBieSBhIHJlZmVyZW5jZVxyXG4gKiB3YXZlbGVuZ3RoLCBzbyB0aGF0IHdoZW4gbGlnaHQgaXMgdGhlIHNwZWNpZmllZCB3YXZlbGVuZ3RoLCB0aGUgaW5kZXggb2YgcmVmcmFjdGlvbiB0YWtlcyB0aGUgcmVmZXJlbmNlIHZhbHVlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENoYW5kcmFzaGVrYXIgQmVtYWdvbmkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IGJlbmRpbmdMaWdodCBmcm9tICcuLi8uLi9iZW5kaW5nTGlnaHQuanMnO1xyXG5pbXBvcnQgQmVuZGluZ0xpZ2h0Q29uc3RhbnRzIGZyb20gJy4uL0JlbmRpbmdMaWdodENvbnN0YW50cy5qcyc7XHJcblxyXG5jbGFzcyBEaXNwZXJzaW9uRnVuY3Rpb24ge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVmZXJlbmNlSW5kZXhPZlJlZnJhY3Rpb246IG51bWJlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IHJlZmVyZW5jZVdhdmVsZW5ndGg6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHJlZmVyZW5jZUluZGV4T2ZSZWZyYWN0aW9uIC0gSW5kZXhPZlJlZnJhY3Rpb24gb2YgbWVkaXVtXHJcbiAgICogQHBhcmFtIHdhdmVsZW5ndGggLSB3YXZlbGVuZ3RoIGluIG1ldGVyc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcmVmZXJlbmNlSW5kZXhPZlJlZnJhY3Rpb246IG51bWJlciwgd2F2ZWxlbmd0aDogbnVtYmVyICkge1xyXG4gICAgdGhpcy5yZWZlcmVuY2VJbmRleE9mUmVmcmFjdGlvbiA9IHJlZmVyZW5jZUluZGV4T2ZSZWZyYWN0aW9uO1xyXG4gICAgdGhpcy5yZWZlcmVuY2VXYXZlbGVuZ3RoID0gd2F2ZWxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NlbGxtZWllcl9lcXVhdGlvblxyXG4gICAqIEBwYXJhbSB3YXZlbGVuZ3RoIC0gd2F2ZWxlbmd0aCBpbiBtZXRlcnNcclxuICAgKi9cclxuICBwcml2YXRlIGdldFNlbGxtZWllclZhbHVlKCB3YXZlbGVuZ3RoOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IEwyID0gd2F2ZWxlbmd0aCAqIHdhdmVsZW5ndGg7XHJcbiAgICBjb25zdCBCMSA9IDEuMDM5NjEyMTI7XHJcbiAgICBjb25zdCBCMiA9IDAuMjMxNzkyMzQ0O1xyXG4gICAgY29uc3QgQjMgPSAxLjAxMDQ2OTQ1O1xyXG5cclxuICAgIC8vIGNvbnZlcnQgdG8gbWV0cmljXHJcbiAgICBjb25zdCBDMSA9IDYuMDAwNjk4NjdFLTMgKiAxRS0xMjtcclxuICAgIGNvbnN0IEMyID0gMi4wMDE3OTE0NEUtMiAqIDFFLTEyO1xyXG4gICAgY29uc3QgQzMgPSAxLjAzNTYwNjUzRTIgKiAxRS0xMjtcclxuICAgIHJldHVybiBNYXRoLnNxcnQoIDEgKyBCMSAqIEwyIC8gKCBMMiAtIEMxICkgKyBCMiAqIEwyIC8gKCBMMiAtIEMyICkgKyBCMyAqIEwyIC8gKCBMMiAtIEMzICkgKTtcclxuICB9XHJcblxyXG4gIC8vIERldGVybWluZXMgdGhlIGluZGV4IG9mIHJlZnJhY3Rpb24gZm9yIHRoZSBXQVZFTEVOR1RIX1JFRFxyXG4gIHB1YmxpYyBnZXRJbmRleE9mUmVmcmFjdGlvbkZvclJlZCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0SW5kZXhPZlJlZnJhY3Rpb24oIEJlbmRpbmdMaWdodENvbnN0YW50cy5XQVZFTEVOR1RIX1JFRCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VlIGNsYXNzLWxldmVsIGRvY3VtZW50YXRpb24gZm9yIGFuIGV4cGxhbmF0aW9uIG9mIHRoaXMgYWxnb3JpdGhtXHJcbiAgICogQHBhcmFtIHdhdmVsZW5ndGggLSB3YXZlbGVuZ3RoIGluIG1ldGVyc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRJbmRleE9mUmVmcmFjdGlvbiggd2F2ZWxlbmd0aDogbnVtYmVyICk6IG51bWJlciB7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSByZWZlcmVuY2UgdmFsdWVzXHJcbiAgICBjb25zdCBuQWlyUmVmZXJlbmNlID0gdGhpcy5nZXRBaXJJbmRleCggdGhpcy5yZWZlcmVuY2VXYXZlbGVuZ3RoICk7XHJcbiAgICBjb25zdCBuR2xhc3NSZWZlcmVuY2UgPSB0aGlzLmdldFNlbGxtZWllclZhbHVlKCB0aGlzLnJlZmVyZW5jZVdhdmVsZW5ndGggKTtcclxuXHJcbiAgICAvLyBkZXRlcm1pbmUgdGhlIG1hcHBpbmcgYW5kIG1ha2Ugc3VyZSBpdCBpcyBpbiBhIGdvb2QgcmFuZ2VcclxuICAgIGNvbnN0IGRlbHRhID0gbkdsYXNzUmVmZXJlbmNlIC0gbkFpclJlZmVyZW5jZTtcclxuXHJcbiAgICAvLyAwIHRvIDEgKGFpciB0byBnbGFzcylcclxuICAgIGxldCB4ID0gKCB0aGlzLnJlZmVyZW5jZUluZGV4T2ZSZWZyYWN0aW9uIC0gbkFpclJlZmVyZW5jZSApIC8gZGVsdGE7XHJcbiAgICB4ID0gVXRpbHMuY2xhbXAoIHgsIDAsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSApO1xyXG5cclxuICAgIC8vIHRha2UgYSBsaW5lYXIgY29tYmluYXRpb24gb2YgZ2xhc3MgYW5kIGFpciBlcXVhdGlvbnNcclxuICAgIHJldHVybiB4ICogdGhpcy5nZXRTZWxsbWVpZXJWYWx1ZSggd2F2ZWxlbmd0aCApICsgKCAxIC0geCApICogdGhpcy5nZXRBaXJJbmRleCggd2F2ZWxlbmd0aCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VlIGh0dHA6Ly9yZWZyYWN0aXZlaW5kZXguaW5mby8/Z3JvdXA9R0FTRVMmbWF0ZXJpYWw9QWlyXHJcbiAgICogQHBhcmFtIHdhdmVsZW5ndGggLSB3YXZlbGVuZ3RoIGluIG1ldGVyc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0QWlySW5kZXgoIHdhdmVsZW5ndGg6IG51bWJlciApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIDEgK1xyXG4gICAgICAgICAgIDU3OTIxMDVFLTggLyAoIDIzOC4wMTg1IC0gTWF0aC5wb3coIHdhdmVsZW5ndGggKiAxRTYsIC0yICkgKSArXHJcbiAgICAgICAgICAgMTY3OTE3RS04IC8gKCA1Ny4zNjIgLSBNYXRoLnBvdyggd2F2ZWxlbmd0aCAqIDFFNiwgLTIgKSApO1xyXG4gIH1cclxufVxyXG5cclxuYmVuZGluZ0xpZ2h0LnJlZ2lzdGVyKCAnRGlzcGVyc2lvbkZ1bmN0aW9uJywgRGlzcGVyc2lvbkZ1bmN0aW9uICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEaXNwZXJzaW9uRnVuY3Rpb247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUUvRCxNQUFNQyxrQkFBa0IsQ0FBQztFQUl2QjtBQUNGO0FBQ0E7QUFDQTtFQUNTQyxXQUFXQSxDQUFFQywwQkFBa0MsRUFBRUMsVUFBa0IsRUFBRztJQUMzRSxJQUFJLENBQUNELDBCQUEwQixHQUFHQSwwQkFBMEI7SUFDNUQsSUFBSSxDQUFDRSxtQkFBbUIsR0FBR0QsVUFBVTtFQUN2Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNVRSxpQkFBaUJBLENBQUVGLFVBQWtCLEVBQVc7SUFDdEQsTUFBTUcsRUFBRSxHQUFHSCxVQUFVLEdBQUdBLFVBQVU7SUFDbEMsTUFBTUksRUFBRSxHQUFHLFVBQVU7SUFDckIsTUFBTUMsRUFBRSxHQUFHLFdBQVc7SUFDdEIsTUFBTUMsRUFBRSxHQUFHLFVBQVU7O0lBRXJCO0lBQ0EsTUFBTUMsRUFBRSxHQUFHLGFBQWEsR0FBRyxLQUFLO0lBQ2hDLE1BQU1DLEVBQUUsR0FBRyxhQUFhLEdBQUcsS0FBSztJQUNoQyxNQUFNQyxFQUFFLEdBQUcsWUFBWSxHQUFHLEtBQUs7SUFDL0IsT0FBT0MsSUFBSSxDQUFDQyxJQUFJLENBQUUsQ0FBQyxHQUFHUCxFQUFFLEdBQUdELEVBQUUsSUFBS0EsRUFBRSxHQUFHSSxFQUFFLENBQUUsR0FBR0YsRUFBRSxHQUFHRixFQUFFLElBQUtBLEVBQUUsR0FBR0ssRUFBRSxDQUFFLEdBQUdGLEVBQUUsR0FBR0gsRUFBRSxJQUFLQSxFQUFFLEdBQUdNLEVBQUUsQ0FBRyxDQUFDO0VBQy9GOztFQUVBO0VBQ09HLDBCQUEwQkEsQ0FBQSxFQUFXO0lBQzFDLE9BQU8sSUFBSSxDQUFDQyxvQkFBb0IsQ0FBRWpCLHFCQUFxQixDQUFDa0IsY0FBZSxDQUFDO0VBQzFFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NELG9CQUFvQkEsQ0FBRWIsVUFBa0IsRUFBVztJQUV4RDtJQUNBLE1BQU1lLGFBQWEsR0FBRyxJQUFJLENBQUNDLFdBQVcsQ0FBRSxJQUFJLENBQUNmLG1CQUFvQixDQUFDO0lBQ2xFLE1BQU1nQixlQUFlLEdBQUcsSUFBSSxDQUFDZixpQkFBaUIsQ0FBRSxJQUFJLENBQUNELG1CQUFvQixDQUFDOztJQUUxRTtJQUNBLE1BQU1pQixLQUFLLEdBQUdELGVBQWUsR0FBR0YsYUFBYTs7SUFFN0M7SUFDQSxJQUFJSSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUNwQiwwQkFBMEIsR0FBR2dCLGFBQWEsSUFBS0csS0FBSztJQUNuRUMsQ0FBQyxHQUFHekIsS0FBSyxDQUFDMEIsS0FBSyxDQUFFRCxDQUFDLEVBQUUsQ0FBQyxFQUFFRSxNQUFNLENBQUNDLGlCQUFrQixDQUFDOztJQUVqRDtJQUNBLE9BQU9ILENBQUMsR0FBRyxJQUFJLENBQUNqQixpQkFBaUIsQ0FBRUYsVUFBVyxDQUFDLEdBQUcsQ0FBRSxDQUFDLEdBQUdtQixDQUFDLElBQUssSUFBSSxDQUFDSCxXQUFXLENBQUVoQixVQUFXLENBQUM7RUFDOUY7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDVWdCLFdBQVdBLENBQUVoQixVQUFrQixFQUFXO0lBQ2hELE9BQU8sQ0FBQyxHQUNELFVBQVUsSUFBSyxRQUFRLEdBQUdVLElBQUksQ0FBQ2EsR0FBRyxDQUFFdkIsVUFBVSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLEdBQzVELFNBQVMsSUFBSyxNQUFNLEdBQUdVLElBQUksQ0FBQ2EsR0FBRyxDQUFFdkIsVUFBVSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUUsQ0FBQyxDQUFFO0VBQ2xFO0FBQ0Y7QUFFQUwsWUFBWSxDQUFDNkIsUUFBUSxDQUFFLG9CQUFvQixFQUFFM0Isa0JBQW1CLENBQUM7QUFFakUsZUFBZUEsa0JBQWtCIn0=