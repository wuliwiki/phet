// Copyright 2015-2022, University of Colorado Boulder

/**
 * Immutable state for a medium, with the name and dispersion function, and flags for "mystery" and "custom".
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import BendingLightStrings from '../../BendingLightStrings.js';
import bendingLight from '../../bendingLight.js';
import BendingLightConstants from '../BendingLightConstants.js';
import DispersionFunction from './DispersionFunction.js';
const airStringProperty = BendingLightStrings.airStringProperty;
const diamondStringProperty = BendingLightStrings.diamondStringProperty;
const glassStringProperty = BendingLightStrings.glassStringProperty;
const mysteryAStringProperty = BendingLightStrings.mysteryAStringProperty;
const mysteryBStringProperty = BendingLightStrings.mysteryBStringProperty;
const waterStringProperty = BendingLightStrings.waterStringProperty;

// constants
const DIAMOND_INDEX_OF_REFRACTION_FOR_RED_LIGHT = 2.419;
class Substance {
  static AIR = new Substance(airStringProperty, 1.000293, false, false);
  static WATER = new Substance(waterStringProperty, 1.333, false, false);
  static GLASS = new Substance(glassStringProperty, 1.5, false, false);
  static DIAMOND = new Substance(diamondStringProperty, DIAMOND_INDEX_OF_REFRACTION_FOR_RED_LIGHT, false, false);
  static MYSTERY_A = new Substance(mysteryAStringProperty, DIAMOND_INDEX_OF_REFRACTION_FOR_RED_LIGHT, true, false);
  static MYSTERY_B = new Substance(mysteryBStringProperty, 1.4, true, false);
  static DIAMOND_INDEX_OF_REFRACTION_FOR_RED_LIGHT = DIAMOND_INDEX_OF_REFRACTION_FOR_RED_LIGHT;

  /**
   * @param nameProperty - name of the medium
   * @param indexForRed - index of refraction of medium
   * @param mystery - true if medium state is mystery else other state
   * @param custom - true if medium state is custom else other state
   */
  constructor(nameProperty, indexForRed, mystery, custom) {
    this.nameProperty = nameProperty; // (read-only)
    this.dispersionFunction = new DispersionFunction(indexForRed, BendingLightConstants.WAVELENGTH_RED); // (read-only)
    this.mystery = mystery; // (read-only)
    this.custom = custom; // (read-only)
    this.indexOfRefractionForRedLight = this.dispersionFunction.getIndexOfRefraction(BendingLightConstants.WAVELENGTH_RED);
    this.indexForRed = indexForRed; // (read-only)
  }
}

bendingLight.register('Substance', Substance);
export default Substance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCZW5kaW5nTGlnaHRTdHJpbmdzIiwiYmVuZGluZ0xpZ2h0IiwiQmVuZGluZ0xpZ2h0Q29uc3RhbnRzIiwiRGlzcGVyc2lvbkZ1bmN0aW9uIiwiYWlyU3RyaW5nUHJvcGVydHkiLCJkaWFtb25kU3RyaW5nUHJvcGVydHkiLCJnbGFzc1N0cmluZ1Byb3BlcnR5IiwibXlzdGVyeUFTdHJpbmdQcm9wZXJ0eSIsIm15c3RlcnlCU3RyaW5nUHJvcGVydHkiLCJ3YXRlclN0cmluZ1Byb3BlcnR5IiwiRElBTU9ORF9JTkRFWF9PRl9SRUZSQUNUSU9OX0ZPUl9SRURfTElHSFQiLCJTdWJzdGFuY2UiLCJBSVIiLCJXQVRFUiIsIkdMQVNTIiwiRElBTU9ORCIsIk1ZU1RFUllfQSIsIk1ZU1RFUllfQiIsImNvbnN0cnVjdG9yIiwibmFtZVByb3BlcnR5IiwiaW5kZXhGb3JSZWQiLCJteXN0ZXJ5IiwiY3VzdG9tIiwiZGlzcGVyc2lvbkZ1bmN0aW9uIiwiV0FWRUxFTkdUSF9SRUQiLCJpbmRleE9mUmVmcmFjdGlvbkZvclJlZExpZ2h0IiwiZ2V0SW5kZXhPZlJlZnJhY3Rpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN1YnN0YW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJbW11dGFibGUgc3RhdGUgZm9yIGEgbWVkaXVtLCB3aXRoIHRoZSBuYW1lIGFuZCBkaXNwZXJzaW9uIGZ1bmN0aW9uLCBhbmQgZmxhZ3MgZm9yIFwibXlzdGVyeVwiIGFuZCBcImN1c3RvbVwiLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENoYW5kcmFzaGVrYXIgQmVtYWdvbmkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgQmVuZGluZ0xpZ2h0U3RyaW5ncyBmcm9tICcuLi8uLi9CZW5kaW5nTGlnaHRTdHJpbmdzLmpzJztcclxuaW1wb3J0IGJlbmRpbmdMaWdodCBmcm9tICcuLi8uLi9iZW5kaW5nTGlnaHQuanMnO1xyXG5pbXBvcnQgQmVuZGluZ0xpZ2h0Q29uc3RhbnRzIGZyb20gJy4uL0JlbmRpbmdMaWdodENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBEaXNwZXJzaW9uRnVuY3Rpb24gZnJvbSAnLi9EaXNwZXJzaW9uRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcblxyXG5jb25zdCBhaXJTdHJpbmdQcm9wZXJ0eSA9IEJlbmRpbmdMaWdodFN0cmluZ3MuYWlyU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGRpYW1vbmRTdHJpbmdQcm9wZXJ0eSA9IEJlbmRpbmdMaWdodFN0cmluZ3MuZGlhbW9uZFN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBnbGFzc1N0cmluZ1Byb3BlcnR5ID0gQmVuZGluZ0xpZ2h0U3RyaW5ncy5nbGFzc1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBteXN0ZXJ5QVN0cmluZ1Byb3BlcnR5ID0gQmVuZGluZ0xpZ2h0U3RyaW5ncy5teXN0ZXJ5QVN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBteXN0ZXJ5QlN0cmluZ1Byb3BlcnR5ID0gQmVuZGluZ0xpZ2h0U3RyaW5ncy5teXN0ZXJ5QlN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCB3YXRlclN0cmluZ1Byb3BlcnR5ID0gQmVuZGluZ0xpZ2h0U3RyaW5ncy53YXRlclN0cmluZ1Byb3BlcnR5O1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IERJQU1PTkRfSU5ERVhfT0ZfUkVGUkFDVElPTl9GT1JfUkVEX0xJR0hUID0gMi40MTk7XHJcblxyXG5jbGFzcyBTdWJzdGFuY2Uge1xyXG4gIHB1YmxpYyByZWFkb25seSBkaXNwZXJzaW9uRnVuY3Rpb246IERpc3BlcnNpb25GdW5jdGlvbjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbXlzdGVyeTogYm9vbGVhbjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaW5kZXhPZlJlZnJhY3Rpb25Gb3JSZWRMaWdodDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XHJcbiAgcHVibGljIHJlYWRvbmx5IGluZGV4Rm9yUmVkOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGN1c3RvbTogYm9vbGVhbjtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFJUiA9IG5ldyBTdWJzdGFuY2UoIGFpclN0cmluZ1Byb3BlcnR5LCAxLjAwMDI5MywgZmFsc2UsIGZhbHNlICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBXQVRFUiA9IG5ldyBTdWJzdGFuY2UoIHdhdGVyU3RyaW5nUHJvcGVydHksIDEuMzMzLCBmYWxzZSwgZmFsc2UgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEdMQVNTID0gbmV3IFN1YnN0YW5jZSggZ2xhc3NTdHJpbmdQcm9wZXJ0eSwgMS41LCBmYWxzZSwgZmFsc2UgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERJQU1PTkQgPSBuZXcgU3Vic3RhbmNlKCBkaWFtb25kU3RyaW5nUHJvcGVydHksIERJQU1PTkRfSU5ERVhfT0ZfUkVGUkFDVElPTl9GT1JfUkVEX0xJR0hULCBmYWxzZSwgZmFsc2UgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1ZU1RFUllfQSA9IG5ldyBTdWJzdGFuY2UoIG15c3RlcnlBU3RyaW5nUHJvcGVydHksIERJQU1PTkRfSU5ERVhfT0ZfUkVGUkFDVElPTl9GT1JfUkVEX0xJR0hULCB0cnVlLCBmYWxzZSApO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTVlTVEVSWV9CID0gbmV3IFN1YnN0YW5jZSggbXlzdGVyeUJTdHJpbmdQcm9wZXJ0eSwgMS40LCB0cnVlLCBmYWxzZSApO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRElBTU9ORF9JTkRFWF9PRl9SRUZSQUNUSU9OX0ZPUl9SRURfTElHSFQgPSBESUFNT05EX0lOREVYX09GX1JFRlJBQ1RJT05fRk9SX1JFRF9MSUdIVDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG5hbWVQcm9wZXJ0eSAtIG5hbWUgb2YgdGhlIG1lZGl1bVxyXG4gICAqIEBwYXJhbSBpbmRleEZvclJlZCAtIGluZGV4IG9mIHJlZnJhY3Rpb24gb2YgbWVkaXVtXHJcbiAgICogQHBhcmFtIG15c3RlcnkgLSB0cnVlIGlmIG1lZGl1bSBzdGF0ZSBpcyBteXN0ZXJ5IGVsc2Ugb3RoZXIgc3RhdGVcclxuICAgKiBAcGFyYW0gY3VzdG9tIC0gdHJ1ZSBpZiBtZWRpdW0gc3RhdGUgaXMgY3VzdG9tIGVsc2Ugb3RoZXIgc3RhdGVcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG5hbWVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiwgaW5kZXhGb3JSZWQ6IG51bWJlciwgbXlzdGVyeTogYm9vbGVhbiwgY3VzdG9tOiBib29sZWFuICkge1xyXG4gICAgdGhpcy5uYW1lUHJvcGVydHkgPSBuYW1lUHJvcGVydHk7IC8vIChyZWFkLW9ubHkpXHJcbiAgICB0aGlzLmRpc3BlcnNpb25GdW5jdGlvbiA9IG5ldyBEaXNwZXJzaW9uRnVuY3Rpb24oIGluZGV4Rm9yUmVkLCBCZW5kaW5nTGlnaHRDb25zdGFudHMuV0FWRUxFTkdUSF9SRUQgKTsgLy8gKHJlYWQtb25seSlcclxuICAgIHRoaXMubXlzdGVyeSA9IG15c3Rlcnk7IC8vIChyZWFkLW9ubHkpXHJcbiAgICB0aGlzLmN1c3RvbSA9IGN1c3RvbTsgLy8gKHJlYWQtb25seSlcclxuICAgIHRoaXMuaW5kZXhPZlJlZnJhY3Rpb25Gb3JSZWRMaWdodCA9IHRoaXMuZGlzcGVyc2lvbkZ1bmN0aW9uLmdldEluZGV4T2ZSZWZyYWN0aW9uKCBCZW5kaW5nTGlnaHRDb25zdGFudHMuV0FWRUxFTkdUSF9SRUQgKTtcclxuICAgIHRoaXMuaW5kZXhGb3JSZWQgPSBpbmRleEZvclJlZDsgLy8gKHJlYWQtb25seSlcclxuICB9XHJcbn1cclxuXHJcbmJlbmRpbmdMaWdodC5yZWdpc3RlciggJ1N1YnN0YW5jZScsIFN1YnN0YW5jZSApO1xyXG5leHBvcnQgZGVmYXVsdCBTdWJzdGFuY2U7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsbUJBQW1CLE1BQU0sOEJBQThCO0FBQzlELE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MscUJBQXFCLE1BQU0sNkJBQTZCO0FBQy9ELE9BQU9DLGtCQUFrQixNQUFNLHlCQUF5QjtBQUd4RCxNQUFNQyxpQkFBaUIsR0FBR0osbUJBQW1CLENBQUNJLGlCQUFpQjtBQUMvRCxNQUFNQyxxQkFBcUIsR0FBR0wsbUJBQW1CLENBQUNLLHFCQUFxQjtBQUN2RSxNQUFNQyxtQkFBbUIsR0FBR04sbUJBQW1CLENBQUNNLG1CQUFtQjtBQUNuRSxNQUFNQyxzQkFBc0IsR0FBR1AsbUJBQW1CLENBQUNPLHNCQUFzQjtBQUN6RSxNQUFNQyxzQkFBc0IsR0FBR1IsbUJBQW1CLENBQUNRLHNCQUFzQjtBQUN6RSxNQUFNQyxtQkFBbUIsR0FBR1QsbUJBQW1CLENBQUNTLG1CQUFtQjs7QUFFbkU7QUFDQSxNQUFNQyx5Q0FBeUMsR0FBRyxLQUFLO0FBRXZELE1BQU1DLFNBQVMsQ0FBQztFQU9kLE9BQXVCQyxHQUFHLEdBQUcsSUFBSUQsU0FBUyxDQUFFUCxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQU0sQ0FBQztFQUN2RixPQUF1QlMsS0FBSyxHQUFHLElBQUlGLFNBQVMsQ0FBRUYsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFNLENBQUM7RUFDeEYsT0FBdUJLLEtBQUssR0FBRyxJQUFJSCxTQUFTLENBQUVMLG1CQUFtQixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBTSxDQUFDO0VBQ3RGLE9BQXVCUyxPQUFPLEdBQUcsSUFBSUosU0FBUyxDQUFFTixxQkFBcUIsRUFBRUsseUNBQXlDLEVBQUUsS0FBSyxFQUFFLEtBQU0sQ0FBQztFQUNoSSxPQUF1Qk0sU0FBUyxHQUFHLElBQUlMLFNBQVMsQ0FBRUosc0JBQXNCLEVBQUVHLHlDQUF5QyxFQUFFLElBQUksRUFBRSxLQUFNLENBQUM7RUFDbEksT0FBdUJPLFNBQVMsR0FBRyxJQUFJTixTQUFTLENBQUVILHNCQUFzQixFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBTSxDQUFDO0VBQzVGLE9BQXVCRSx5Q0FBeUMsR0FBR0EseUNBQXlDOztFQUU1RztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU1EsV0FBV0EsQ0FBRUMsWUFBdUMsRUFBRUMsV0FBbUIsRUFBRUMsT0FBZ0IsRUFBRUMsTUFBZSxFQUFHO0lBQ3BILElBQUksQ0FBQ0gsWUFBWSxHQUFHQSxZQUFZLENBQUMsQ0FBQztJQUNsQyxJQUFJLENBQUNJLGtCQUFrQixHQUFHLElBQUlwQixrQkFBa0IsQ0FBRWlCLFdBQVcsRUFBRWxCLHFCQUFxQixDQUFDc0IsY0FBZSxDQUFDLENBQUMsQ0FBQztJQUN2RyxJQUFJLENBQUNILE9BQU8sR0FBR0EsT0FBTyxDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLElBQUksQ0FBQ0csNEJBQTRCLEdBQUcsSUFBSSxDQUFDRixrQkFBa0IsQ0FBQ0csb0JBQW9CLENBQUV4QixxQkFBcUIsQ0FBQ3NCLGNBQWUsQ0FBQztJQUN4SCxJQUFJLENBQUNKLFdBQVcsR0FBR0EsV0FBVyxDQUFDLENBQUM7RUFDbEM7QUFDRjs7QUFFQW5CLFlBQVksQ0FBQzBCLFFBQVEsQ0FBRSxXQUFXLEVBQUVoQixTQUFVLENBQUM7QUFDL0MsZUFBZUEsU0FBUyJ9