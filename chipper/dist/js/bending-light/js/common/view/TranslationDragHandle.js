// Copyright 2015-2022, University of Colorado Boulder

/**
 * Graphic that depicts how the laser may be moved.
 * It is only shown when the cursor is over the laser and is non-interactive.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import { Node } from '../../../../scenery/js/imports.js';
import bendingLight from '../../bendingLight.js';
class TranslationDragHandle extends Node {
  /**
   * @param modelViewTransform - converts between model and view co-ordinate frames
   * @param laser - model of laser
   * @param dx - length of horizontal arrow
   * @param dy - length of vertical arrow
   * @param showDragHandlesProperty - determines whether to show arrows
   * @param laserImageWidth - width of the laser
   */
  constructor(modelViewTransform, laser, dx, dy, showDragHandlesProperty, laserImageWidth) {
    super();
    showDragHandlesProperty.linkAttribute(this, 'visible');
    const arrowNode = new ArrowNode(0, 0, 0, 0, {
      headHeight: 16,
      headWidth: 16,
      tailWidth: 8,
      fill: '#33FF00',
      doubleHead: true
    });
    this.addChild(arrowNode);
    arrowNode.setTailAndTip(-dx, -dy, +dx, +dy);

    // update the position when laser pivot or emission point change
    Multilink.multilink([laser.pivotProperty, laser.emissionPointProperty, showDragHandlesProperty], (laserPivot, laserEmission, showDragHandles) => {
      if (showDragHandlesProperty.get()) {
        const laserAngle = -laser.getAngle();
        const magnitude = laserImageWidth * 0.35;
        const viewDeltaX = magnitude * Math.cos(laserAngle);
        const viewDeltaY = magnitude * Math.sin(laserAngle);
        const tailX = modelViewTransform.modelToViewX(laserEmission.x) + viewDeltaX;
        const tailY = modelViewTransform.modelToViewY(laserEmission.y) + viewDeltaY;
        arrowNode.setTranslation(tailX, tailY);
      }
    });
  }
}
bendingLight.register('TranslationDragHandle', TranslationDragHandle);
export default TranslationDragHandle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJBcnJvd05vZGUiLCJOb2RlIiwiYmVuZGluZ0xpZ2h0IiwiVHJhbnNsYXRpb25EcmFnSGFuZGxlIiwiY29uc3RydWN0b3IiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJsYXNlciIsImR4IiwiZHkiLCJzaG93RHJhZ0hhbmRsZXNQcm9wZXJ0eSIsImxhc2VySW1hZ2VXaWR0aCIsImxpbmtBdHRyaWJ1dGUiLCJhcnJvd05vZGUiLCJoZWFkSGVpZ2h0IiwiaGVhZFdpZHRoIiwidGFpbFdpZHRoIiwiZmlsbCIsImRvdWJsZUhlYWQiLCJhZGRDaGlsZCIsInNldFRhaWxBbmRUaXAiLCJtdWx0aWxpbmsiLCJwaXZvdFByb3BlcnR5IiwiZW1pc3Npb25Qb2ludFByb3BlcnR5IiwibGFzZXJQaXZvdCIsImxhc2VyRW1pc3Npb24iLCJzaG93RHJhZ0hhbmRsZXMiLCJnZXQiLCJsYXNlckFuZ2xlIiwiZ2V0QW5nbGUiLCJtYWduaXR1ZGUiLCJ2aWV3RGVsdGFYIiwiTWF0aCIsImNvcyIsInZpZXdEZWx0YVkiLCJzaW4iLCJ0YWlsWCIsIm1vZGVsVG9WaWV3WCIsIngiLCJ0YWlsWSIsIm1vZGVsVG9WaWV3WSIsInkiLCJzZXRUcmFuc2xhdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVHJhbnNsYXRpb25EcmFnSGFuZGxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdyYXBoaWMgdGhhdCBkZXBpY3RzIGhvdyB0aGUgbGFzZXIgbWF5IGJlIG1vdmVkLlxyXG4gKiBJdCBpcyBvbmx5IHNob3duIHdoZW4gdGhlIGN1cnNvciBpcyBvdmVyIHRoZSBsYXNlciBhbmQgaXMgbm9uLWludGVyYWN0aXZlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENoYW5kcmFzaGVrYXIgQmVtYWdvbmkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBBcnJvd05vZGUgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL0Fycm93Tm9kZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmVuZGluZ0xpZ2h0IGZyb20gJy4uLy4uL2JlbmRpbmdMaWdodC5qcyc7XHJcbmltcG9ydCBMYXNlciBmcm9tICcuLi9tb2RlbC9MYXNlci5qcyc7XHJcblxyXG5jbGFzcyBUcmFuc2xhdGlvbkRyYWdIYW5kbGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG1vZGVsVmlld1RyYW5zZm9ybSAtIGNvbnZlcnRzIGJldHdlZW4gbW9kZWwgYW5kIHZpZXcgY28tb3JkaW5hdGUgZnJhbWVzXHJcbiAgICogQHBhcmFtIGxhc2VyIC0gbW9kZWwgb2YgbGFzZXJcclxuICAgKiBAcGFyYW0gZHggLSBsZW5ndGggb2YgaG9yaXpvbnRhbCBhcnJvd1xyXG4gICAqIEBwYXJhbSBkeSAtIGxlbmd0aCBvZiB2ZXJ0aWNhbCBhcnJvd1xyXG4gICAqIEBwYXJhbSBzaG93RHJhZ0hhbmRsZXNQcm9wZXJ0eSAtIGRldGVybWluZXMgd2hldGhlciB0byBzaG93IGFycm93c1xyXG4gICAqIEBwYXJhbSBsYXNlckltYWdlV2lkdGggLSB3aWR0aCBvZiB0aGUgbGFzZXJcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMiwgbGFzZXI6IExhc2VyLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyLCBzaG93RHJhZ0hhbmRsZXNQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIGxhc2VySW1hZ2VXaWR0aDogbnVtYmVyICkge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgc2hvd0RyYWdIYW5kbGVzUHJvcGVydHkubGlua0F0dHJpYnV0ZSggdGhpcywgJ3Zpc2libGUnICk7XHJcblxyXG4gICAgY29uc3QgYXJyb3dOb2RlID0gbmV3IEFycm93Tm9kZSggMCwgMCwgMCwgMCwge1xyXG4gICAgICBoZWFkSGVpZ2h0OiAxNixcclxuICAgICAgaGVhZFdpZHRoOiAxNixcclxuICAgICAgdGFpbFdpZHRoOiA4LFxyXG4gICAgICBmaWxsOiAnIzMzRkYwMCcsXHJcbiAgICAgIGRvdWJsZUhlYWQ6IHRydWVcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGFycm93Tm9kZSApO1xyXG5cclxuICAgIGFycm93Tm9kZS5zZXRUYWlsQW5kVGlwKCAtZHgsIC1keSwgK2R4LCArZHkgKTtcclxuXHJcbiAgICAvLyB1cGRhdGUgdGhlIHBvc2l0aW9uIHdoZW4gbGFzZXIgcGl2b3Qgb3IgZW1pc3Npb24gcG9pbnQgY2hhbmdlXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIGxhc2VyLnBpdm90UHJvcGVydHksIGxhc2VyLmVtaXNzaW9uUG9pbnRQcm9wZXJ0eSwgc2hvd0RyYWdIYW5kbGVzUHJvcGVydHkgXSxcclxuICAgICAgKCBsYXNlclBpdm90LCBsYXNlckVtaXNzaW9uLCBzaG93RHJhZ0hhbmRsZXMgKSA9PiB7XHJcbiAgICAgICAgaWYgKCBzaG93RHJhZ0hhbmRsZXNQcm9wZXJ0eS5nZXQoKSApIHtcclxuICAgICAgICAgIGNvbnN0IGxhc2VyQW5nbGUgPSAtbGFzZXIuZ2V0QW5nbGUoKTtcclxuICAgICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IGxhc2VySW1hZ2VXaWR0aCAqIDAuMzU7XHJcbiAgICAgICAgICBjb25zdCB2aWV3RGVsdGFYID0gbWFnbml0dWRlICogTWF0aC5jb3MoIGxhc2VyQW5nbGUgKTtcclxuICAgICAgICAgIGNvbnN0IHZpZXdEZWx0YVkgPSBtYWduaXR1ZGUgKiBNYXRoLnNpbiggbGFzZXJBbmdsZSApO1xyXG4gICAgICAgICAgY29uc3QgdGFpbFggPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBsYXNlckVtaXNzaW9uLnggKSArIHZpZXdEZWx0YVg7XHJcbiAgICAgICAgICBjb25zdCB0YWlsWSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIGxhc2VyRW1pc3Npb24ueSApICsgdmlld0RlbHRhWTtcclxuICAgICAgICAgIGFycm93Tm9kZS5zZXRUcmFuc2xhdGlvbiggdGFpbFgsIHRhaWxZICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5iZW5kaW5nTGlnaHQucmVnaXN0ZXIoICdUcmFuc2xhdGlvbkRyYWdIYW5kbGUnLCBUcmFuc2xhdGlvbkRyYWdIYW5kbGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRyYW5zbGF0aW9uRHJhZ0hhbmRsZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxrQ0FBa0M7QUFHeEQsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFHaEQsTUFBTUMscUJBQXFCLFNBQVNGLElBQUksQ0FBQztFQUV2QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLGtCQUF1QyxFQUFFQyxLQUFZLEVBQUVDLEVBQVUsRUFBRUMsRUFBVSxFQUFFQyx1QkFBMEMsRUFBRUMsZUFBdUIsRUFBRztJQUV2SyxLQUFLLENBQUMsQ0FBQztJQUVQRCx1QkFBdUIsQ0FBQ0UsYUFBYSxDQUFFLElBQUksRUFBRSxTQUFVLENBQUM7SUFFeEQsTUFBTUMsU0FBUyxHQUFHLElBQUlaLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7TUFDM0NhLFVBQVUsRUFBRSxFQUFFO01BQ2RDLFNBQVMsRUFBRSxFQUFFO01BQ2JDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLElBQUksRUFBRSxTQUFTO01BQ2ZDLFVBQVUsRUFBRTtJQUNkLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0MsUUFBUSxDQUFFTixTQUFVLENBQUM7SUFFMUJBLFNBQVMsQ0FBQ08sYUFBYSxDQUFFLENBQUNaLEVBQUUsRUFBRSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0QsRUFBRSxFQUFFLENBQUNDLEVBQUcsQ0FBQzs7SUFFN0M7SUFDQVQsU0FBUyxDQUFDcUIsU0FBUyxDQUFFLENBQUVkLEtBQUssQ0FBQ2UsYUFBYSxFQUFFZixLQUFLLENBQUNnQixxQkFBcUIsRUFBRWIsdUJBQXVCLENBQUUsRUFDaEcsQ0FBRWMsVUFBVSxFQUFFQyxhQUFhLEVBQUVDLGVBQWUsS0FBTTtNQUNoRCxJQUFLaEIsdUJBQXVCLENBQUNpQixHQUFHLENBQUMsQ0FBQyxFQUFHO1FBQ25DLE1BQU1DLFVBQVUsR0FBRyxDQUFDckIsS0FBSyxDQUFDc0IsUUFBUSxDQUFDLENBQUM7UUFDcEMsTUFBTUMsU0FBUyxHQUFHbkIsZUFBZSxHQUFHLElBQUk7UUFDeEMsTUFBTW9CLFVBQVUsR0FBR0QsU0FBUyxHQUFHRSxJQUFJLENBQUNDLEdBQUcsQ0FBRUwsVUFBVyxDQUFDO1FBQ3JELE1BQU1NLFVBQVUsR0FBR0osU0FBUyxHQUFHRSxJQUFJLENBQUNHLEdBQUcsQ0FBRVAsVUFBVyxDQUFDO1FBQ3JELE1BQU1RLEtBQUssR0FBRzlCLGtCQUFrQixDQUFDK0IsWUFBWSxDQUFFWixhQUFhLENBQUNhLENBQUUsQ0FBQyxHQUFHUCxVQUFVO1FBQzdFLE1BQU1RLEtBQUssR0FBR2pDLGtCQUFrQixDQUFDa0MsWUFBWSxDQUFFZixhQUFhLENBQUNnQixDQUFFLENBQUMsR0FBR1AsVUFBVTtRQUM3RXJCLFNBQVMsQ0FBQzZCLGNBQWMsQ0FBRU4sS0FBSyxFQUFFRyxLQUFNLENBQUM7TUFDMUM7SUFDRixDQUFFLENBQUM7RUFDUDtBQUNGO0FBRUFwQyxZQUFZLENBQUN3QyxRQUFRLENBQUUsdUJBQXVCLEVBQUV2QyxxQkFBc0IsQ0FBQztBQUV2RSxlQUFlQSxxQkFBcUIifQ==