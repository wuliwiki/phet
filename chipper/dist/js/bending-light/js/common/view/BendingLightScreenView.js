// Copyright 2015-2022, University of Colorado Boulder

/**
 * Base class for Bending Light
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ScreenView from '../../../../joist/js/ScreenView.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import { Node } from '../../../../scenery/js/imports.js';
import bendingLight from '../../bendingLight.js';
import LaserNode from './LaserNode.js';
import RotationDragHandle from './RotationDragHandle.js';
import SingleColorLightCanvasNode from './SingleColorLightCanvasNode.js';
import ColorModeEnum from '../model/ColorModeEnum.js';
import LaserViewEnum from '../model/LaserViewEnum.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Multilink from '../../../../axon/js/Multilink.js';
class BendingLightScreenView extends ScreenView {
  /**
   * @param bendingLightModel - main model of the simulations
   * @param laserHasKnob - laser image
   * @param [providedOptions]
   */
  constructor(bendingLightModel, laserHasKnob, providedOptions) {
    const options = optionize()({
      occlusionHandler: _.noop,
      // {function} moves objects out from behind a control panel if dropped there
      ccwArrowNotAtMax: () => true,
      // {function} shows whether laser at min angle
      clockwiseArrowNotAtMax: () => true,
      // {function} shows whether laser at max angle, In prisms tab
      // laser node can rotate 360 degrees.so arrows showing all the times when laser node rotate
      clampDragAngle: angle => angle,
      // {function} function that limits the angle of laser to its bounds
      horizontalPlayAreaOffset: 0,
      // {number} in stage coordinates, how far to shift the play area horizontally
      verticalPlayAreaOffset: 0 // {number} in stage coordinates, how far to shift the play area vertically.  In the
      // prisms screen, it is shifted up a bit to center the play area above the south control panel
    }, providedOptions);
    super({
      layoutBounds: new Bounds2(0, 0, 834, 504),
      tandem: options.tandem
    });
    this.occlusionHandler = options.occlusionHandler;
    this.bendingLightModel = bendingLightModel;
    this.showProtractorProperty = new BooleanProperty(false); // (read-only)

    // In order to make controls (including the laser itself) accessible (not obscured by the large protractor), KP
    // suggested this layering order:
    // laser on top
    // Control boxes next
    // Protractor
    // Laser beam
    // To implement this, we specify 2 before light layers and 2 after light layers
    this.beforeLightLayer = new Node(); // (read-only)
    this.beforeLightLayer2 = new Node(); // (read-only)

    // in back of afterLightLayer2
    this.afterLightLayer = new Node(); // (read-only)
    this.afterLightLayer2 = new Node(); // (read-only)
    this.afterLightLayer3 = new Node(); // (read-only)

    const stageWidth = this.layoutBounds.width;
    const stageHeight = this.layoutBounds.height;

    // center the stage in the canvas, specifies how things scale up and down with window size, maps stage to pixels
    // create the transform from model (SI) to view (stage) coordinates
    const scale = stageHeight / bendingLightModel.modelHeight;

    // (read-only)
    this.modelViewTransform = ModelViewTransform2.createSinglePointScaleInvertedYMapping(new Vector2(0, 0), new Vector2(388 - options.horizontalPlayAreaOffset, stageHeight / 2 + options.verticalPlayAreaOffset), scale);

    // create and add the graphic for the environment medium
    this.mediumNode = new Node(); // (read-only)
    this.addChild(this.mediumNode);
    this.incidentWaveLayer = new Node(); // (read-only)

    this.singleColorLightNode = new SingleColorLightCanvasNode(this.modelViewTransform, stageWidth, stageHeight, bendingLightModel.rays);

    // layering
    this.addChild(this.beforeLightLayer);
    this.addChild(this.beforeLightLayer2);
    this.addLightNodes(bendingLightModel); // Nodes specific to that view
    this.addChild(this.singleColorLightNode);
    this.addChild(this.afterLightLayer);

    // This layer is to add laser view control panel
    // Note: this layer to make protractor behind laser view panel and laser node on top of laser view panel.
    this.laserViewLayer = new Node(); // (read-only)
    this.addChild(this.laserViewLayer);

    // add rotation for the laser that show if/when the laser can be rotated about its pivot
    const showRotationDragHandlesProperty = new BooleanProperty(false);
    const showTranslationDragHandlesProperty = new BooleanProperty(false);
    const laserNode = new LaserNode(this.modelViewTransform, bendingLightModel.laser, showRotationDragHandlesProperty, showTranslationDragHandlesProperty, options.clampDragAngle, laserHasKnob, this.visibleBoundsProperty, this.occlusionHandler, {
      tandem: options.tandem.createTandem('laserNode')
    });

    // add laser node rotation and translation arrows in array, to move them to front of all other nodes in prism screen
    this.addLaserHandles(showRotationDragHandlesProperty, showTranslationDragHandlesProperty, options.clockwiseArrowNotAtMax, options.ccwArrowNotAtMax, laserNode.laserImageWidth);

    // add the laser
    this.addChild(laserNode);
    this.addChild(this.afterLightLayer2);

    // Layer for the rightmost control panels, so that all sensors will go behind them
    this.addChild(this.afterLightLayer3);

    // switches between ray and wave
    bendingLightModel.laserViewProperty.link(laserView => {
      bendingLightModel.laser.waveProperty.value = laserView === LaserViewEnum.WAVE;
    });
    Multilink.multilink([bendingLightModel.laser.colorModeProperty, bendingLightModel.laserViewProperty], (colorMode, laserView) => {
      this.singleColorLightNode.visible = laserView === LaserViewEnum.RAY && colorMode !== ColorModeEnum.WHITE;
    });
    this.visibleBoundsProperty.link(visibleBounds => this.singleColorLightNode.setCanvasBounds(visibleBounds));
  }

  /**
   */
  reset() {
    this.showProtractorProperty.reset();
  }

  // intended to be overridden by subclasses
  step() {
    if (this.singleColorLightNode.visible) {
      this.singleColorLightNode.step();
    }
  }

  /**
   * overridden for IntroScreenView to add the wave nodes
   */

  addLaserHandles(showRotationDragHandlesProperty, showTranslationDragHandlesProperty, clockwiseArrowNotAtMax, ccwArrowNotAtMax, laserImageWidth) {
    const bendingLightModel = this.bendingLightModel;
    if (typeof bendingLightModel.rotationArrowAngleOffset === 'number') {
      // Shows the direction in which laser can be rotated
      // for laser left rotation
      const leftRotationDragHandle = new RotationDragHandle(this.modelViewTransform, bendingLightModel.laser, Math.PI / 23, showRotationDragHandlesProperty, clockwiseArrowNotAtMax, laserImageWidth * 0.58, bendingLightModel.rotationArrowAngleOffset);
      this.addChild(leftRotationDragHandle);

      // for laser right rotation
      const rightRotationDragHandle = new RotationDragHandle(this.modelViewTransform, bendingLightModel.laser, -Math.PI / 23, showRotationDragHandlesProperty, ccwArrowNotAtMax, laserImageWidth * 0.58, bendingLightModel.rotationArrowAngleOffset);
      this.addChild(rightRotationDragHandle);
    } else {
      assert && assert(false, 'should have been a number');
    }
  }
}
bendingLight.register('BendingLightScreenView', BendingLightScreenView);
export default BendingLightScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiVmVjdG9yMiIsIlNjcmVlblZpZXciLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiTm9kZSIsImJlbmRpbmdMaWdodCIsIkxhc2VyTm9kZSIsIlJvdGF0aW9uRHJhZ0hhbmRsZSIsIlNpbmdsZUNvbG9yTGlnaHRDYW52YXNOb2RlIiwiQ29sb3JNb2RlRW51bSIsIkxhc2VyVmlld0VudW0iLCJCb29sZWFuUHJvcGVydHkiLCJvcHRpb25pemUiLCJNdWx0aWxpbmsiLCJCZW5kaW5nTGlnaHRTY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJiZW5kaW5nTGlnaHRNb2RlbCIsImxhc2VySGFzS25vYiIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJvY2NsdXNpb25IYW5kbGVyIiwiXyIsIm5vb3AiLCJjY3dBcnJvd05vdEF0TWF4IiwiY2xvY2t3aXNlQXJyb3dOb3RBdE1heCIsImNsYW1wRHJhZ0FuZ2xlIiwiYW5nbGUiLCJob3Jpem9udGFsUGxheUFyZWFPZmZzZXQiLCJ2ZXJ0aWNhbFBsYXlBcmVhT2Zmc2V0IiwibGF5b3V0Qm91bmRzIiwidGFuZGVtIiwic2hvd1Byb3RyYWN0b3JQcm9wZXJ0eSIsImJlZm9yZUxpZ2h0TGF5ZXIiLCJiZWZvcmVMaWdodExheWVyMiIsImFmdGVyTGlnaHRMYXllciIsImFmdGVyTGlnaHRMYXllcjIiLCJhZnRlckxpZ2h0TGF5ZXIzIiwic3RhZ2VXaWR0aCIsIndpZHRoIiwic3RhZ2VIZWlnaHQiLCJoZWlnaHQiLCJzY2FsZSIsIm1vZGVsSGVpZ2h0IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiY3JlYXRlU2luZ2xlUG9pbnRTY2FsZUludmVydGVkWU1hcHBpbmciLCJtZWRpdW1Ob2RlIiwiYWRkQ2hpbGQiLCJpbmNpZGVudFdhdmVMYXllciIsInNpbmdsZUNvbG9yTGlnaHROb2RlIiwicmF5cyIsImFkZExpZ2h0Tm9kZXMiLCJsYXNlclZpZXdMYXllciIsInNob3dSb3RhdGlvbkRyYWdIYW5kbGVzUHJvcGVydHkiLCJzaG93VHJhbnNsYXRpb25EcmFnSGFuZGxlc1Byb3BlcnR5IiwibGFzZXJOb2RlIiwibGFzZXIiLCJ2aXNpYmxlQm91bmRzUHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJhZGRMYXNlckhhbmRsZXMiLCJsYXNlckltYWdlV2lkdGgiLCJsYXNlclZpZXdQcm9wZXJ0eSIsImxpbmsiLCJsYXNlclZpZXciLCJ3YXZlUHJvcGVydHkiLCJ2YWx1ZSIsIldBVkUiLCJtdWx0aWxpbmsiLCJjb2xvck1vZGVQcm9wZXJ0eSIsImNvbG9yTW9kZSIsInZpc2libGUiLCJSQVkiLCJXSElURSIsInZpc2libGVCb3VuZHMiLCJzZXRDYW52YXNCb3VuZHMiLCJyZXNldCIsInN0ZXAiLCJyb3RhdGlvbkFycm93QW5nbGVPZmZzZXQiLCJsZWZ0Um90YXRpb25EcmFnSGFuZGxlIiwiTWF0aCIsIlBJIiwicmlnaHRSb3RhdGlvbkRyYWdIYW5kbGUiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJlbmRpbmdMaWdodFNjcmVlblZpZXcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgQmVuZGluZyBMaWdodFxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENoYW5kcmFzaGVrYXIgQmVtYWdvbmkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgU2NyZWVuVmlldywgeyBTY3JlZW5WaWV3T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmVuZGluZ0xpZ2h0IGZyb20gJy4uLy4uL2JlbmRpbmdMaWdodC5qcyc7XHJcbmltcG9ydCBCZW5kaW5nTGlnaHRNb2RlbCBmcm9tICcuLi9tb2RlbC9CZW5kaW5nTGlnaHRNb2RlbC5qcyc7XHJcbmltcG9ydCBMYXNlck5vZGUgZnJvbSAnLi9MYXNlck5vZGUuanMnO1xyXG5pbXBvcnQgUm90YXRpb25EcmFnSGFuZGxlIGZyb20gJy4vUm90YXRpb25EcmFnSGFuZGxlLmpzJztcclxuaW1wb3J0IFNpbmdsZUNvbG9yTGlnaHRDYW52YXNOb2RlIGZyb20gJy4vU2luZ2xlQ29sb3JMaWdodENhbnZhc05vZGUuanMnO1xyXG5pbXBvcnQgQ29sb3JNb2RlRW51bSBmcm9tICcuLi9tb2RlbC9Db2xvck1vZGVFbnVtLmpzJztcclxuaW1wb3J0IExhc2VyVmlld0VudW0gZnJvbSAnLi4vbW9kZWwvTGFzZXJWaWV3RW51bS5qcyc7XHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgb2NjbHVzaW9uSGFuZGxlcj86ICggbm9kZTogTm9kZSApID0+IHZvaWQ7XHJcbiAgaG9yaXpvbnRhbFBsYXlBcmVhT2Zmc2V0PzogbnVtYmVyO1xyXG4gIHZlcnRpY2FsUGxheUFyZWFPZmZzZXQ/OiBudW1iZXI7XHJcbiAgY2xhbXBEcmFnQW5nbGU/OiAoIGFuZ2xlOiBudW1iZXIgKSA9PiBudW1iZXI7XHJcbiAgY2N3QXJyb3dOb3RBdE1heD86ICggYW5nbGU6IG51bWJlciApID0+IGJvb2xlYW47XHJcbiAgY2xvY2t3aXNlQXJyb3dOb3RBdE1heD86ICggYW5nbGU6IG51bWJlciApID0+IGJvb2xlYW47XHJcbn07XHJcbnR5cGUgQmVuZGluZ0xpZ2h0U2NyZWVuVmlld09wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFNjcmVlblZpZXdPcHRpb25zO1xyXG5cclxuYWJzdHJhY3QgY2xhc3MgQmVuZGluZ0xpZ2h0U2NyZWVuVmlldyBleHRlbmRzIFNjcmVlblZpZXcge1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBzaG93UHJvdHJhY3RvclByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgYmVuZGluZ0xpZ2h0TW9kZWw6IEJlbmRpbmdMaWdodE1vZGVsO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBiZWZvcmVMaWdodExheWVyOiBOb2RlO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBiZWZvcmVMaWdodExheWVyMjogTm9kZTtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgYWZ0ZXJMaWdodExheWVyOiBOb2RlO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBhZnRlckxpZ2h0TGF5ZXIyOiBOb2RlO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBhZnRlckxpZ2h0TGF5ZXIzOiBOb2RlO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBtZWRpdW1Ob2RlOiBOb2RlO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBpbmNpZGVudFdhdmVMYXllcjogTm9kZTtcclxuICBwcml2YXRlIHJlYWRvbmx5IHNpbmdsZUNvbG9yTGlnaHROb2RlOiBTaW5nbGVDb2xvckxpZ2h0Q2FudmFzTm9kZTtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgbGFzZXJWaWV3TGF5ZXI6IE5vZGU7XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IG9jY2x1c2lvbkhhbmRsZXI6ICggbjogTm9kZSApID0+IHZvaWQ7XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGJlbmRpbmdMaWdodE1vZGVsIC0gbWFpbiBtb2RlbCBvZiB0aGUgc2ltdWxhdGlvbnNcclxuICAgKiBAcGFyYW0gbGFzZXJIYXNLbm9iIC0gbGFzZXIgaW1hZ2VcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGJlbmRpbmdMaWdodE1vZGVsOiBCZW5kaW5nTGlnaHRNb2RlbCwgbGFzZXJIYXNLbm9iOiBib29sZWFuLCBwcm92aWRlZE9wdGlvbnM/OiBCZW5kaW5nTGlnaHRTY3JlZW5WaWV3T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJlbmRpbmdMaWdodFNjcmVlblZpZXdPcHRpb25zLCBTZWxmT3B0aW9ucywgU2NyZWVuVmlld09wdGlvbnM+KCkoIHtcclxuICAgICAgb2NjbHVzaW9uSGFuZGxlcjogXy5ub29wLCAvLyB7ZnVuY3Rpb259IG1vdmVzIG9iamVjdHMgb3V0IGZyb20gYmVoaW5kIGEgY29udHJvbCBwYW5lbCBpZiBkcm9wcGVkIHRoZXJlXHJcbiAgICAgIGNjd0Fycm93Tm90QXRNYXg6ICgpID0+IHRydWUsIC8vIHtmdW5jdGlvbn0gc2hvd3Mgd2hldGhlciBsYXNlciBhdCBtaW4gYW5nbGVcclxuICAgICAgY2xvY2t3aXNlQXJyb3dOb3RBdE1heDogKCkgPT4gdHJ1ZSwgLy8ge2Z1bmN0aW9ufSBzaG93cyB3aGV0aGVyIGxhc2VyIGF0IG1heCBhbmdsZSwgSW4gcHJpc21zIHRhYlxyXG4gICAgICAvLyBsYXNlciBub2RlIGNhbiByb3RhdGUgMzYwIGRlZ3JlZXMuc28gYXJyb3dzIHNob3dpbmcgYWxsIHRoZSB0aW1lcyB3aGVuIGxhc2VyIG5vZGUgcm90YXRlXHJcbiAgICAgIGNsYW1wRHJhZ0FuZ2xlOiAoIGFuZ2xlOiBudW1iZXIgKSA9PiBhbmdsZSwgLy8ge2Z1bmN0aW9ufSBmdW5jdGlvbiB0aGF0IGxpbWl0cyB0aGUgYW5nbGUgb2YgbGFzZXIgdG8gaXRzIGJvdW5kc1xyXG4gICAgICBob3Jpem9udGFsUGxheUFyZWFPZmZzZXQ6IDAsIC8vIHtudW1iZXJ9IGluIHN0YWdlIGNvb3JkaW5hdGVzLCBob3cgZmFyIHRvIHNoaWZ0IHRoZSBwbGF5IGFyZWEgaG9yaXpvbnRhbGx5XHJcbiAgICAgIHZlcnRpY2FsUGxheUFyZWFPZmZzZXQ6IDAgLy8ge251bWJlcn0gaW4gc3RhZ2UgY29vcmRpbmF0ZXMsIGhvdyBmYXIgdG8gc2hpZnQgdGhlIHBsYXkgYXJlYSB2ZXJ0aWNhbGx5LiAgSW4gdGhlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJpc21zIHNjcmVlbiwgaXQgaXMgc2hpZnRlZCB1cCBhIGJpdCB0byBjZW50ZXIgdGhlIHBsYXkgYXJlYSBhYm92ZSB0aGUgc291dGggY29udHJvbCBwYW5lbFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgbGF5b3V0Qm91bmRzOiBuZXcgQm91bmRzMiggMCwgMCwgODM0LCA1MDQgKSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMub2NjbHVzaW9uSGFuZGxlciA9IG9wdGlvbnMub2NjbHVzaW9uSGFuZGxlcjtcclxuICAgIHRoaXMuYmVuZGluZ0xpZ2h0TW9kZWwgPSBiZW5kaW5nTGlnaHRNb2RlbDtcclxuXHJcbiAgICB0aGlzLnNob3dQcm90cmFjdG9yUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApOyAvLyAocmVhZC1vbmx5KVxyXG5cclxuICAgIC8vIEluIG9yZGVyIHRvIG1ha2UgY29udHJvbHMgKGluY2x1ZGluZyB0aGUgbGFzZXIgaXRzZWxmKSBhY2Nlc3NpYmxlIChub3Qgb2JzY3VyZWQgYnkgdGhlIGxhcmdlIHByb3RyYWN0b3IpLCBLUFxyXG4gICAgLy8gc3VnZ2VzdGVkIHRoaXMgbGF5ZXJpbmcgb3JkZXI6XHJcbiAgICAvLyBsYXNlciBvbiB0b3BcclxuICAgIC8vIENvbnRyb2wgYm94ZXMgbmV4dFxyXG4gICAgLy8gUHJvdHJhY3RvclxyXG4gICAgLy8gTGFzZXIgYmVhbVxyXG4gICAgLy8gVG8gaW1wbGVtZW50IHRoaXMsIHdlIHNwZWNpZnkgMiBiZWZvcmUgbGlnaHQgbGF5ZXJzIGFuZCAyIGFmdGVyIGxpZ2h0IGxheWVyc1xyXG4gICAgdGhpcy5iZWZvcmVMaWdodExheWVyID0gbmV3IE5vZGUoKTsgLy8gKHJlYWQtb25seSlcclxuICAgIHRoaXMuYmVmb3JlTGlnaHRMYXllcjIgPSBuZXcgTm9kZSgpOyAvLyAocmVhZC1vbmx5KVxyXG5cclxuICAgIC8vIGluIGJhY2sgb2YgYWZ0ZXJMaWdodExheWVyMlxyXG4gICAgdGhpcy5hZnRlckxpZ2h0TGF5ZXIgPSBuZXcgTm9kZSgpOyAvLyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy5hZnRlckxpZ2h0TGF5ZXIyID0gbmV3IE5vZGUoKTsgLy8gKHJlYWQtb25seSlcclxuICAgIHRoaXMuYWZ0ZXJMaWdodExheWVyMyA9IG5ldyBOb2RlKCk7IC8vIChyZWFkLW9ubHkpXHJcblxyXG4gICAgY29uc3Qgc3RhZ2VXaWR0aCA9IHRoaXMubGF5b3V0Qm91bmRzLndpZHRoO1xyXG4gICAgY29uc3Qgc3RhZ2VIZWlnaHQgPSB0aGlzLmxheW91dEJvdW5kcy5oZWlnaHQ7XHJcblxyXG4gICAgLy8gY2VudGVyIHRoZSBzdGFnZSBpbiB0aGUgY2FudmFzLCBzcGVjaWZpZXMgaG93IHRoaW5ncyBzY2FsZSB1cCBhbmQgZG93biB3aXRoIHdpbmRvdyBzaXplLCBtYXBzIHN0YWdlIHRvIHBpeGVsc1xyXG4gICAgLy8gY3JlYXRlIHRoZSB0cmFuc2Zvcm0gZnJvbSBtb2RlbCAoU0kpIHRvIHZpZXcgKHN0YWdlKSBjb29yZGluYXRlc1xyXG4gICAgY29uc3Qgc2NhbGUgPSBzdGFnZUhlaWdodCAvIGJlbmRpbmdMaWdodE1vZGVsLm1vZGVsSGVpZ2h0O1xyXG5cclxuICAgIC8vIChyZWFkLW9ubHkpXHJcbiAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlU2luZ2xlUG9pbnRTY2FsZUludmVydGVkWU1hcHBpbmcoXHJcbiAgICAgIG5ldyBWZWN0b3IyKCAwLCAwICksXHJcbiAgICAgIG5ldyBWZWN0b3IyKCAzODggLSBvcHRpb25zLmhvcml6b250YWxQbGF5QXJlYU9mZnNldCwgc3RhZ2VIZWlnaHQgLyAyICsgb3B0aW9ucy52ZXJ0aWNhbFBsYXlBcmVhT2Zmc2V0ICksXHJcbiAgICAgIHNjYWxlXHJcbiAgICApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBhbmQgYWRkIHRoZSBncmFwaGljIGZvciB0aGUgZW52aXJvbm1lbnQgbWVkaXVtXHJcbiAgICB0aGlzLm1lZGl1bU5vZGUgPSBuZXcgTm9kZSgpOyAvLyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5tZWRpdW1Ob2RlICk7XHJcbiAgICB0aGlzLmluY2lkZW50V2F2ZUxheWVyID0gbmV3IE5vZGUoKTsgLy8gKHJlYWQtb25seSlcclxuXHJcbiAgICB0aGlzLnNpbmdsZUNvbG9yTGlnaHROb2RlID0gbmV3IFNpbmdsZUNvbG9yTGlnaHRDYW52YXNOb2RlKFxyXG4gICAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgc3RhZ2VXaWR0aCxcclxuICAgICAgc3RhZ2VIZWlnaHQsXHJcbiAgICAgIGJlbmRpbmdMaWdodE1vZGVsLnJheXNcclxuICAgICk7XHJcblxyXG4gICAgLy8gbGF5ZXJpbmdcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuYmVmb3JlTGlnaHRMYXllciApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5iZWZvcmVMaWdodExheWVyMiApO1xyXG4gICAgdGhpcy5hZGRMaWdodE5vZGVzKCBiZW5kaW5nTGlnaHRNb2RlbCApOyAvLyBOb2RlcyBzcGVjaWZpYyB0byB0aGF0IHZpZXdcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuc2luZ2xlQ29sb3JMaWdodE5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuYWZ0ZXJMaWdodExheWVyICk7XHJcblxyXG4gICAgLy8gVGhpcyBsYXllciBpcyB0byBhZGQgbGFzZXIgdmlldyBjb250cm9sIHBhbmVsXHJcbiAgICAvLyBOb3RlOiB0aGlzIGxheWVyIHRvIG1ha2UgcHJvdHJhY3RvciBiZWhpbmQgbGFzZXIgdmlldyBwYW5lbCBhbmQgbGFzZXIgbm9kZSBvbiB0b3Agb2YgbGFzZXIgdmlldyBwYW5lbC5cclxuICAgIHRoaXMubGFzZXJWaWV3TGF5ZXIgPSBuZXcgTm9kZSgpOyAvLyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5sYXNlclZpZXdMYXllciApO1xyXG5cclxuICAgIC8vIGFkZCByb3RhdGlvbiBmb3IgdGhlIGxhc2VyIHRoYXQgc2hvdyBpZi93aGVuIHRoZSBsYXNlciBjYW4gYmUgcm90YXRlZCBhYm91dCBpdHMgcGl2b3RcclxuICAgIGNvbnN0IHNob3dSb3RhdGlvbkRyYWdIYW5kbGVzUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG4gICAgY29uc3Qgc2hvd1RyYW5zbGF0aW9uRHJhZ0hhbmRsZXNQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgY29uc3QgbGFzZXJOb2RlID0gbmV3IExhc2VyTm9kZShcclxuICAgICAgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0sXHJcbiAgICAgIGJlbmRpbmdMaWdodE1vZGVsLmxhc2VyLFxyXG4gICAgICBzaG93Um90YXRpb25EcmFnSGFuZGxlc1Byb3BlcnR5LFxyXG4gICAgICBzaG93VHJhbnNsYXRpb25EcmFnSGFuZGxlc1Byb3BlcnR5LFxyXG4gICAgICBvcHRpb25zLmNsYW1wRHJhZ0FuZ2xlLFxyXG4gICAgICBsYXNlckhhc0tub2IsXHJcbiAgICAgIHRoaXMudmlzaWJsZUJvdW5kc1Byb3BlcnR5LFxyXG4gICAgICB0aGlzLm9jY2x1c2lvbkhhbmRsZXIsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhc2VyTm9kZScgKVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIGFkZCBsYXNlciBub2RlIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGlvbiBhcnJvd3MgaW4gYXJyYXksIHRvIG1vdmUgdGhlbSB0byBmcm9udCBvZiBhbGwgb3RoZXIgbm9kZXMgaW4gcHJpc20gc2NyZWVuXHJcbiAgICB0aGlzLmFkZExhc2VySGFuZGxlcyhcclxuICAgICAgc2hvd1JvdGF0aW9uRHJhZ0hhbmRsZXNQcm9wZXJ0eSxcclxuICAgICAgc2hvd1RyYW5zbGF0aW9uRHJhZ0hhbmRsZXNQcm9wZXJ0eSxcclxuICAgICAgb3B0aW9ucy5jbG9ja3dpc2VBcnJvd05vdEF0TWF4LFxyXG4gICAgICBvcHRpb25zLmNjd0Fycm93Tm90QXRNYXgsXHJcbiAgICAgIGxhc2VyTm9kZS5sYXNlckltYWdlV2lkdGhcclxuICAgICk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBsYXNlclxyXG4gICAgdGhpcy5hZGRDaGlsZCggbGFzZXJOb2RlICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5hZnRlckxpZ2h0TGF5ZXIyICk7XHJcblxyXG4gICAgLy8gTGF5ZXIgZm9yIHRoZSByaWdodG1vc3QgY29udHJvbCBwYW5lbHMsIHNvIHRoYXQgYWxsIHNlbnNvcnMgd2lsbCBnbyBiZWhpbmQgdGhlbVxyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5hZnRlckxpZ2h0TGF5ZXIzICk7XHJcblxyXG4gICAgLy8gc3dpdGNoZXMgYmV0d2VlbiByYXkgYW5kIHdhdmVcclxuICAgIGJlbmRpbmdMaWdodE1vZGVsLmxhc2VyVmlld1Byb3BlcnR5LmxpbmsoIGxhc2VyVmlldyA9PiB7XHJcbiAgICAgIGJlbmRpbmdMaWdodE1vZGVsLmxhc2VyLndhdmVQcm9wZXJ0eS52YWx1ZSA9ICggbGFzZXJWaWV3ID09PSBMYXNlclZpZXdFbnVtLldBVkUgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIGJlbmRpbmdMaWdodE1vZGVsLmxhc2VyLmNvbG9yTW9kZVByb3BlcnR5LCBiZW5kaW5nTGlnaHRNb2RlbC5sYXNlclZpZXdQcm9wZXJ0eSBdLFxyXG4gICAgICAoIGNvbG9yTW9kZSwgbGFzZXJWaWV3ICkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2luZ2xlQ29sb3JMaWdodE5vZGUudmlzaWJsZSA9IGxhc2VyVmlldyA9PT0gTGFzZXJWaWV3RW51bS5SQVkgJiYgY29sb3JNb2RlICE9PSBDb2xvck1vZGVFbnVtLldISVRFO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMudmlzaWJsZUJvdW5kc1Byb3BlcnR5LmxpbmsoICggdmlzaWJsZUJvdW5kczogQm91bmRzMiApID0+IHRoaXMuc2luZ2xlQ29sb3JMaWdodE5vZGUuc2V0Q2FudmFzQm91bmRzKCB2aXNpYmxlQm91bmRzICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2hvd1Byb3RyYWN0b3JQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gaW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSBzdWJjbGFzc2VzXHJcbiAgcHVibGljIG92ZXJyaWRlIHN0ZXAoKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMuc2luZ2xlQ29sb3JMaWdodE5vZGUudmlzaWJsZSApIHtcclxuICAgICAgdGhpcy5zaW5nbGVDb2xvckxpZ2h0Tm9kZS5zdGVwKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBvdmVycmlkZGVuIGZvciBJbnRyb1NjcmVlblZpZXcgdG8gYWRkIHRoZSB3YXZlIG5vZGVzXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFkZExpZ2h0Tm9kZXMoIGJlbmRpbmdMaWdodE1vZGVsOiBCZW5kaW5nTGlnaHRNb2RlbCApOiB2b2lkO1xyXG5cclxuICBwcm90ZWN0ZWQgYWRkTGFzZXJIYW5kbGVzKCBzaG93Um90YXRpb25EcmFnSGFuZGxlc1Byb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgc2hvd1RyYW5zbGF0aW9uRHJhZ0hhbmRsZXNQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2t3aXNlQXJyb3dOb3RBdE1heDogKCBuOiBudW1iZXIgKSA9PiBib29sZWFuLCBjY3dBcnJvd05vdEF0TWF4OiAoIG46IG51bWJlciApID0+IGJvb2xlYW4sIGxhc2VySW1hZ2VXaWR0aDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgY29uc3QgYmVuZGluZ0xpZ2h0TW9kZWwgPSB0aGlzLmJlbmRpbmdMaWdodE1vZGVsO1xyXG5cclxuICAgIGlmICggdHlwZW9mIGJlbmRpbmdMaWdodE1vZGVsLnJvdGF0aW9uQXJyb3dBbmdsZU9mZnNldCA9PT0gJ251bWJlcicgKSB7XHJcbiAgICAgIC8vIFNob3dzIHRoZSBkaXJlY3Rpb24gaW4gd2hpY2ggbGFzZXIgY2FuIGJlIHJvdGF0ZWRcclxuICAgICAgLy8gZm9yIGxhc2VyIGxlZnQgcm90YXRpb25cclxuICAgICAgY29uc3QgbGVmdFJvdGF0aW9uRHJhZ0hhbmRsZSA9IG5ldyBSb3RhdGlvbkRyYWdIYW5kbGUoIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLCBiZW5kaW5nTGlnaHRNb2RlbC5sYXNlcixcclxuICAgICAgICBNYXRoLlBJIC8gMjMsIHNob3dSb3RhdGlvbkRyYWdIYW5kbGVzUHJvcGVydHksIGNsb2Nrd2lzZUFycm93Tm90QXRNYXgsIGxhc2VySW1hZ2VXaWR0aCAqIDAuNTgsXHJcbiAgICAgICAgYmVuZGluZ0xpZ2h0TW9kZWwucm90YXRpb25BcnJvd0FuZ2xlT2Zmc2V0ICk7XHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIGxlZnRSb3RhdGlvbkRyYWdIYW5kbGUgKTtcclxuXHJcbiAgICAgIC8vIGZvciBsYXNlciByaWdodCByb3RhdGlvblxyXG4gICAgICBjb25zdCByaWdodFJvdGF0aW9uRHJhZ0hhbmRsZSA9IG5ldyBSb3RhdGlvbkRyYWdIYW5kbGUoIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLCBiZW5kaW5nTGlnaHRNb2RlbC5sYXNlcixcclxuICAgICAgICAtTWF0aC5QSSAvIDIzLFxyXG4gICAgICAgIHNob3dSb3RhdGlvbkRyYWdIYW5kbGVzUHJvcGVydHksIGNjd0Fycm93Tm90QXRNYXgsIGxhc2VySW1hZ2VXaWR0aCAqIDAuNTgsXHJcbiAgICAgICAgYmVuZGluZ0xpZ2h0TW9kZWwucm90YXRpb25BcnJvd0FuZ2xlT2Zmc2V0XHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIHJpZ2h0Um90YXRpb25EcmFnSGFuZGxlICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdzaG91bGQgaGF2ZSBiZWVuIGEgbnVtYmVyJyApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuYmVuZGluZ0xpZ2h0LnJlZ2lzdGVyKCAnQmVuZGluZ0xpZ2h0U2NyZWVuVmlldycsIEJlbmRpbmdMaWdodFNjcmVlblZpZXcgKTtcclxuZXhwb3J0IHR5cGUgeyBCZW5kaW5nTGlnaHRTY3JlZW5WaWV3T3B0aW9ucyB9O1xyXG5leHBvcnQgZGVmYXVsdCBCZW5kaW5nTGlnaHRTY3Jl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