// Copyright 2015-2022, University of Colorado Boulder

/**
 * VelocitySensor that has a position and measures velocity
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import bendingLight from '../../bendingLight.js';
class VelocitySensor {
  constructor() {
    // position of the sensor. Sampled by running the sim with a console.log statement
    this.positionProperty = new Vector2Property(new Vector2(-0.00002051402284781722, -0.0000025716197470420186));

    // velocity as measured by the sensor
    this.valueProperty = new Vector2Property(new Vector2(0, 0));

    // True if it is in the play area
    this.enabledProperty = new BooleanProperty(false);

    // shows the visibility of arrows
    this.isArrowVisibleProperty = new DerivedProperty([this.valueProperty], value => value.magnitude > 0);
  }

  /**
   * Restore the initial values.
   */
  reset() {
    this.positionProperty.reset();
    this.valueProperty.reset();
    this.enabledProperty.reset();
  }

  // Make a copy for use in the toolbox icon
  copy() {
    const velocitySensor = new VelocitySensor();
    velocitySensor.positionProperty.value = this.positionProperty.value.copy();
    velocitySensor.valueProperty.value = this.valueProperty.value.copy();
    velocitySensor.enabledProperty.value = this.enabledProperty.value;
    return velocitySensor;
  }

  /**
   * Translate the velocity sensor in model
   * @param delta - amount of space to be translated
   */
  translate(delta) {
    this.positionProperty.set(this.positionProperty.value.plus(delta));
  }
}
bendingLight.register('VelocitySensor', VelocitySensor);
export default VelocitySensor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwiYmVuZGluZ0xpZ2h0IiwiVmVsb2NpdHlTZW5zb3IiLCJjb25zdHJ1Y3RvciIsInBvc2l0aW9uUHJvcGVydHkiLCJ2YWx1ZVByb3BlcnR5IiwiZW5hYmxlZFByb3BlcnR5IiwiaXNBcnJvd1Zpc2libGVQcm9wZXJ0eSIsInZhbHVlIiwibWFnbml0dWRlIiwicmVzZXQiLCJjb3B5IiwidmVsb2NpdHlTZW5zb3IiLCJ0cmFuc2xhdGUiLCJkZWx0YSIsInNldCIsInBsdXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZlbG9jaXR5U2Vuc29yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZlbG9jaXR5U2Vuc29yIHRoYXQgaGFzIGEgcG9zaXRpb24gYW5kIG1lYXN1cmVzIHZlbG9jaXR5XHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBiZW5kaW5nTGlnaHQgZnJvbSAnLi4vLi4vYmVuZGluZ0xpZ2h0LmpzJztcclxuXHJcbmNsYXNzIFZlbG9jaXR5U2Vuc29yIHtcclxuICBwdWJsaWMgcmVhZG9ubHkgcG9zaXRpb25Qcm9wZXJ0eTogUHJvcGVydHk8VmVjdG9yMj47XHJcbiAgcHVibGljIHJlYWRvbmx5IHZhbHVlUHJvcGVydHk6IFByb3BlcnR5PFZlY3RvcjI+O1xyXG4gIHB1YmxpYyByZWFkb25seSBlbmFibGVkUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG4gIHB1YmxpYyByZWFkb25seSBpc0Fycm93VmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIC8vIHBvc2l0aW9uIG9mIHRoZSBzZW5zb3IuIFNhbXBsZWQgYnkgcnVubmluZyB0aGUgc2ltIHdpdGggYSBjb25zb2xlLmxvZyBzdGF0ZW1lbnRcclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eSA9IG5ldyBWZWN0b3IyUHJvcGVydHkoIG5ldyBWZWN0b3IyKCAtMC4wMDAwMjA1MTQwMjI4NDc4MTcyMiwgLTAuMDAwMDAyNTcxNjE5NzQ3MDQyMDE4NiApICk7XHJcblxyXG4gICAgLy8gdmVsb2NpdHkgYXMgbWVhc3VyZWQgYnkgdGhlIHNlbnNvclxyXG4gICAgdGhpcy52YWx1ZVByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggbmV3IFZlY3RvcjIoIDAsIDAgKSApO1xyXG5cclxuICAgIC8vIFRydWUgaWYgaXQgaXMgaW4gdGhlIHBsYXkgYXJlYVxyXG4gICAgdGhpcy5lbmFibGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG5cclxuICAgIC8vIHNob3dzIHRoZSB2aXNpYmlsaXR5IG9mIGFycm93c1xyXG4gICAgdGhpcy5pc0Fycm93VmlzaWJsZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB0aGlzLnZhbHVlUHJvcGVydHkgXSwgdmFsdWUgPT4gdmFsdWUubWFnbml0dWRlID4gMCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdG9yZSB0aGUgaW5pdGlhbCB2YWx1ZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnZhbHVlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuZW5hYmxlZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvLyBNYWtlIGEgY29weSBmb3IgdXNlIGluIHRoZSB0b29sYm94IGljb25cclxuICBwdWJsaWMgY29weSgpOiBWZWxvY2l0eVNlbnNvciB7XHJcbiAgICBjb25zdCB2ZWxvY2l0eVNlbnNvciA9IG5ldyBWZWxvY2l0eVNlbnNvcigpO1xyXG4gICAgdmVsb2NpdHlTZW5zb3IucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSA9IHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS5jb3B5KCk7XHJcbiAgICB2ZWxvY2l0eVNlbnNvci52YWx1ZVByb3BlcnR5LnZhbHVlID0gdGhpcy52YWx1ZVByb3BlcnR5LnZhbHVlLmNvcHkoKTtcclxuICAgIHZlbG9jaXR5U2Vuc29yLmVuYWJsZWRQcm9wZXJ0eS52YWx1ZSA9IHRoaXMuZW5hYmxlZFByb3BlcnR5LnZhbHVlO1xyXG4gICAgcmV0dXJuIHZlbG9jaXR5U2Vuc29yO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVHJhbnNsYXRlIHRoZSB2ZWxvY2l0eSBzZW5zb3IgaW4gbW9kZWxcclxuICAgKiBAcGFyYW0gZGVsdGEgLSBhbW91bnQgb2Ygc3BhY2UgdG8gYmUgdHJhbnNsYXRlZFxyXG4gICAqL1xyXG4gIHByaXZhdGUgdHJhbnNsYXRlKCBkZWx0YTogVmVjdG9yMiApOiB2b2lkIHtcclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5zZXQoIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS5wbHVzKCBkZWx0YSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5iZW5kaW5nTGlnaHQucmVnaXN0ZXIoICdWZWxvY2l0eVNlbnNvcicsIFZlbG9jaXR5U2Vuc29yICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWZWxvY2l0eVNlbnNvcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFHcEUsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxlQUFlLE1BQU0sdUNBQXVDO0FBQ25FLE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFFaEQsTUFBTUMsY0FBYyxDQUFDO0VBTVpDLFdBQVdBLENBQUEsRUFBRztJQUVuQjtJQUNBLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsSUFBSUosZUFBZSxDQUFFLElBQUlELE9BQU8sQ0FBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsd0JBQXlCLENBQUUsQ0FBQzs7SUFFaEg7SUFDQSxJQUFJLENBQUNNLGFBQWEsR0FBRyxJQUFJTCxlQUFlLENBQUUsSUFBSUQsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUUsQ0FBQzs7SUFFL0Q7SUFDQSxJQUFJLENBQUNPLGVBQWUsR0FBRyxJQUFJVCxlQUFlLENBQUUsS0FBTSxDQUFDOztJQUVuRDtJQUNBLElBQUksQ0FBQ1Usc0JBQXNCLEdBQUcsSUFBSVQsZUFBZSxDQUFFLENBQUUsSUFBSSxDQUFDTyxhQUFhLENBQUUsRUFBRUcsS0FBSyxJQUFJQSxLQUFLLENBQUNDLFNBQVMsR0FBRyxDQUFFLENBQUM7RUFDM0c7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNOLGdCQUFnQixDQUFDTSxLQUFLLENBQUMsQ0FBQztJQUM3QixJQUFJLENBQUNMLGFBQWEsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDSixlQUFlLENBQUNJLEtBQUssQ0FBQyxDQUFDO0VBQzlCOztFQUVBO0VBQ09DLElBQUlBLENBQUEsRUFBbUI7SUFDNUIsTUFBTUMsY0FBYyxHQUFHLElBQUlWLGNBQWMsQ0FBQyxDQUFDO0lBQzNDVSxjQUFjLENBQUNSLGdCQUFnQixDQUFDSSxLQUFLLEdBQUcsSUFBSSxDQUFDSixnQkFBZ0IsQ0FBQ0ksS0FBSyxDQUFDRyxJQUFJLENBQUMsQ0FBQztJQUMxRUMsY0FBYyxDQUFDUCxhQUFhLENBQUNHLEtBQUssR0FBRyxJQUFJLENBQUNILGFBQWEsQ0FBQ0csS0FBSyxDQUFDRyxJQUFJLENBQUMsQ0FBQztJQUNwRUMsY0FBYyxDQUFDTixlQUFlLENBQUNFLEtBQUssR0FBRyxJQUFJLENBQUNGLGVBQWUsQ0FBQ0UsS0FBSztJQUNqRSxPQUFPSSxjQUFjO0VBQ3ZCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1VDLFNBQVNBLENBQUVDLEtBQWMsRUFBUztJQUN4QyxJQUFJLENBQUNWLGdCQUFnQixDQUFDVyxHQUFHLENBQUUsSUFBSSxDQUFDWCxnQkFBZ0IsQ0FBQ0ksS0FBSyxDQUFDUSxJQUFJLENBQUVGLEtBQU0sQ0FBRSxDQUFDO0VBQ3hFO0FBQ0Y7QUFFQWIsWUFBWSxDQUFDZ0IsUUFBUSxDQUFFLGdCQUFnQixFQUFFZixjQUFlLENBQUM7QUFFekQsZUFBZUEsY0FBYyJ9