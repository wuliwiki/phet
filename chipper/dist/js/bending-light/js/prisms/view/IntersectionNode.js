// Copyright 2015-2023, University of Colorado Boulder

/**
 * Node that depicts a the normal vector at a light-ray / medium interface intersection.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import { Line } from '../../../../scenery/js/imports.js';
import bendingLight from '../../bendingLight.js';
class IntersectionNode extends Line {
  /**
   * @param modelViewTransform - Transform between model and view coordinate frames
   * @param intersection - specifies details of intersection point and unit normal
   * @param strokeProperty - the stroke to use for the intersection node
   */
  constructor(modelViewTransform, intersection, strokeProperty) {
    const centerX = modelViewTransform.modelToViewX(intersection.point.x);
    const centerY = modelViewTransform.modelToViewY(intersection.point.y);
    const normalX = modelViewTransform.modelToViewDeltaX(intersection.unitNormal.x);
    const normalY = modelViewTransform.modelToViewDeltaY(intersection.unitNormal.y);
    const normalMagnitude = Math.sqrt(normalX * normalX + normalY * normalY);
    const unitNormalX = normalX / normalMagnitude;
    const unitNormalY = normalY / normalMagnitude;
    const length = 100; //in stage coordinates

    // Show a dotted line of the normal at the interface between two mediums where the laser struck
    const x1 = centerX + unitNormalX * length / 2;
    const y1 = centerY + unitNormalY * length / 2;
    const x2 = centerX + unitNormalX * -length / 2;
    const y2 = centerY + unitNormalY * -length / 2;
    super(x1, y1, x2, y2, {
      stroke: strokeProperty.value,
      lineDash: [10, 5]
    });
    const handle = stroke => {
      this.stroke = stroke;
    };
    strokeProperty.link(handle);

    // dispose of the IntersectionNode, getting rid of the attached listeners
    this.disposeIntersectionLine = () => strokeProperty.unlink(handle);
  }
  dispose() {
    this.disposeIntersectionLine();
    super.dispose();
  }
}
bendingLight.register('IntersectionNode', IntersectionNode);
export default IntersectionNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lIiwiYmVuZGluZ0xpZ2h0IiwiSW50ZXJzZWN0aW9uTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiaW50ZXJzZWN0aW9uIiwic3Ryb2tlUHJvcGVydHkiLCJjZW50ZXJYIiwibW9kZWxUb1ZpZXdYIiwicG9pbnQiLCJ4IiwiY2VudGVyWSIsIm1vZGVsVG9WaWV3WSIsInkiLCJub3JtYWxYIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJ1bml0Tm9ybWFsIiwibm9ybWFsWSIsIm1vZGVsVG9WaWV3RGVsdGFZIiwibm9ybWFsTWFnbml0dWRlIiwiTWF0aCIsInNxcnQiLCJ1bml0Tm9ybWFsWCIsInVuaXROb3JtYWxZIiwibGVuZ3RoIiwieDEiLCJ5MSIsIngyIiwieTIiLCJzdHJva2UiLCJ2YWx1ZSIsImxpbmVEYXNoIiwiaGFuZGxlIiwibGluayIsImRpc3Bvc2VJbnRlcnNlY3Rpb25MaW5lIiwidW5saW5rIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSW50ZXJzZWN0aW9uTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOb2RlIHRoYXQgZGVwaWN0cyBhIHRoZSBub3JtYWwgdmVjdG9yIGF0IGEgbGlnaHQtcmF5IC8gbWVkaXVtIGludGVyZmFjZSBpbnRlcnNlY3Rpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQ2hhbmRyYXNoZWthciBCZW1hZ29uaSAoQWN0dWFsIENvbmNlcHRzKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJlbmRpbmdMaWdodCBmcm9tICcuLi8uLi9iZW5kaW5nTGlnaHQuanMnO1xyXG5pbXBvcnQgSW50ZXJzZWN0aW9uIGZyb20gJy4uL21vZGVsL0ludGVyc2VjdGlvbi5qcyc7XHJcblxyXG5jbGFzcyBJbnRlcnNlY3Rpb25Ob2RlIGV4dGVuZHMgTGluZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlSW50ZXJzZWN0aW9uTGluZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG1vZGVsVmlld1RyYW5zZm9ybSAtIFRyYW5zZm9ybSBiZXR3ZWVuIG1vZGVsIGFuZCB2aWV3IGNvb3JkaW5hdGUgZnJhbWVzXHJcbiAgICogQHBhcmFtIGludGVyc2VjdGlvbiAtIHNwZWNpZmllcyBkZXRhaWxzIG9mIGludGVyc2VjdGlvbiBwb2ludCBhbmQgdW5pdCBub3JtYWxcclxuICAgKiBAcGFyYW0gc3Ryb2tlUHJvcGVydHkgLSB0aGUgc3Ryb2tlIHRvIHVzZSBmb3IgdGhlIGludGVyc2VjdGlvbiBub2RlXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsIGludGVyc2VjdGlvbjogSW50ZXJzZWN0aW9uLCBzdHJva2VQcm9wZXJ0eTogUHJvcGVydHk8c3RyaW5nPiApIHtcclxuXHJcbiAgICBjb25zdCBjZW50ZXJYID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggaW50ZXJzZWN0aW9uLnBvaW50LnggKTtcclxuICAgIGNvbnN0IGNlbnRlclkgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCBpbnRlcnNlY3Rpb24ucG9pbnQueSApO1xyXG4gICAgY29uc3Qgbm9ybWFsWCA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggaW50ZXJzZWN0aW9uLnVuaXROb3JtYWwueCApO1xyXG4gICAgY29uc3Qgbm9ybWFsWSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggaW50ZXJzZWN0aW9uLnVuaXROb3JtYWwueSApO1xyXG4gICAgY29uc3Qgbm9ybWFsTWFnbml0dWRlID0gTWF0aC5zcXJ0KCBub3JtYWxYICogbm9ybWFsWCArIG5vcm1hbFkgKiBub3JtYWxZICk7XHJcbiAgICBjb25zdCB1bml0Tm9ybWFsWCA9IG5vcm1hbFggLyBub3JtYWxNYWduaXR1ZGU7XHJcbiAgICBjb25zdCB1bml0Tm9ybWFsWSA9IG5vcm1hbFkgLyBub3JtYWxNYWduaXR1ZGU7XHJcbiAgICBjb25zdCBsZW5ndGggPSAxMDA7Ly9pbiBzdGFnZSBjb29yZGluYXRlc1xyXG5cclxuICAgIC8vIFNob3cgYSBkb3R0ZWQgbGluZSBvZiB0aGUgbm9ybWFsIGF0IHRoZSBpbnRlcmZhY2UgYmV0d2VlbiB0d28gbWVkaXVtcyB3aGVyZSB0aGUgbGFzZXIgc3RydWNrXHJcbiAgICBjb25zdCB4MSA9IGNlbnRlclggKyB1bml0Tm9ybWFsWCAqIGxlbmd0aCAvIDI7XHJcbiAgICBjb25zdCB5MSA9IGNlbnRlclkgKyB1bml0Tm9ybWFsWSAqIGxlbmd0aCAvIDI7XHJcbiAgICBjb25zdCB4MiA9IGNlbnRlclggKyB1bml0Tm9ybWFsWCAqIC1sZW5ndGggLyAyO1xyXG4gICAgY29uc3QgeTIgPSBjZW50ZXJZICsgdW5pdE5vcm1hbFkgKiAtbGVuZ3RoIC8gMjtcclxuICAgIHN1cGVyKCB4MSwgeTEsIHgyLCB5Miwge1xyXG4gICAgICBzdHJva2U6IHN0cm9rZVByb3BlcnR5LnZhbHVlLFxyXG4gICAgICBsaW5lRGFzaDogWyAxMCwgNSBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlID0gKCBzdHJva2U6IHN0cmluZyApID0+IHtcclxuICAgICAgdGhpcy5zdHJva2UgPSBzdHJva2U7XHJcbiAgICB9O1xyXG4gICAgc3Ryb2tlUHJvcGVydHkubGluayggaGFuZGxlICk7XHJcblxyXG4gICAgLy8gZGlzcG9zZSBvZiB0aGUgSW50ZXJzZWN0aW9uTm9kZSwgZ2V0dGluZyByaWQgb2YgdGhlIGF0dGFjaGVkIGxpc3RlbmVyc1xyXG4gICAgdGhpcy5kaXNwb3NlSW50ZXJzZWN0aW9uTGluZSA9ICgpID0+IHN0cm9rZVByb3BlcnR5LnVubGluayggaGFuZGxlICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUludGVyc2VjdGlvbkxpbmUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmJlbmRpbmdMaWdodC5yZWdpc3RlciggJ0ludGVyc2VjdGlvbk5vZGUnLCBJbnRlcnNlY3Rpb25Ob2RlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbnRlcnNlY3Rpb25Ob2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLFNBQVNBLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUdoRCxNQUFNQyxnQkFBZ0IsU0FBU0YsSUFBSSxDQUFDO0VBR2xDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsa0JBQXVDLEVBQUVDLFlBQTBCLEVBQUVDLGNBQWdDLEVBQUc7SUFFMUgsTUFBTUMsT0FBTyxHQUFHSCxrQkFBa0IsQ0FBQ0ksWUFBWSxDQUFFSCxZQUFZLENBQUNJLEtBQUssQ0FBQ0MsQ0FBRSxDQUFDO0lBQ3ZFLE1BQU1DLE9BQU8sR0FBR1Asa0JBQWtCLENBQUNRLFlBQVksQ0FBRVAsWUFBWSxDQUFDSSxLQUFLLENBQUNJLENBQUUsQ0FBQztJQUN2RSxNQUFNQyxPQUFPLEdBQUdWLGtCQUFrQixDQUFDVyxpQkFBaUIsQ0FBRVYsWUFBWSxDQUFDVyxVQUFVLENBQUNOLENBQUUsQ0FBQztJQUNqRixNQUFNTyxPQUFPLEdBQUdiLGtCQUFrQixDQUFDYyxpQkFBaUIsQ0FBRWIsWUFBWSxDQUFDVyxVQUFVLENBQUNILENBQUUsQ0FBQztJQUNqRixNQUFNTSxlQUFlLEdBQUdDLElBQUksQ0FBQ0MsSUFBSSxDQUFFUCxPQUFPLEdBQUdBLE9BQU8sR0FBR0csT0FBTyxHQUFHQSxPQUFRLENBQUM7SUFDMUUsTUFBTUssV0FBVyxHQUFHUixPQUFPLEdBQUdLLGVBQWU7SUFDN0MsTUFBTUksV0FBVyxHQUFHTixPQUFPLEdBQUdFLGVBQWU7SUFDN0MsTUFBTUssTUFBTSxHQUFHLEdBQUcsQ0FBQzs7SUFFbkI7SUFDQSxNQUFNQyxFQUFFLEdBQUdsQixPQUFPLEdBQUdlLFdBQVcsR0FBR0UsTUFBTSxHQUFHLENBQUM7SUFDN0MsTUFBTUUsRUFBRSxHQUFHZixPQUFPLEdBQUdZLFdBQVcsR0FBR0MsTUFBTSxHQUFHLENBQUM7SUFDN0MsTUFBTUcsRUFBRSxHQUFHcEIsT0FBTyxHQUFHZSxXQUFXLEdBQUcsQ0FBQ0UsTUFBTSxHQUFHLENBQUM7SUFDOUMsTUFBTUksRUFBRSxHQUFHakIsT0FBTyxHQUFHWSxXQUFXLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHLENBQUM7SUFDOUMsS0FBSyxDQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUU7TUFDckJDLE1BQU0sRUFBRXZCLGNBQWMsQ0FBQ3dCLEtBQUs7TUFDNUJDLFFBQVEsRUFBRSxDQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ25CLENBQUUsQ0FBQztJQUVILE1BQU1DLE1BQU0sR0FBS0gsTUFBYyxJQUFNO01BQ25DLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNO0lBQ3RCLENBQUM7SUFDRHZCLGNBQWMsQ0FBQzJCLElBQUksQ0FBRUQsTUFBTyxDQUFDOztJQUU3QjtJQUNBLElBQUksQ0FBQ0UsdUJBQXVCLEdBQUcsTUFBTTVCLGNBQWMsQ0FBQzZCLE1BQU0sQ0FBRUgsTUFBTyxDQUFDO0VBQ3RFO0VBRWdCSSxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDRix1QkFBdUIsQ0FBQyxDQUFDO0lBQzlCLEtBQUssQ0FBQ0UsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBbkMsWUFBWSxDQUFDb0MsUUFBUSxDQUFFLGtCQUFrQixFQUFFbkMsZ0JBQWlCLENBQUM7QUFFN0QsZUFBZUEsZ0JBQWdCIn0=