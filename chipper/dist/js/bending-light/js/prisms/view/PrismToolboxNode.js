// Copyright 2015-2022, University of Colorado Boulder

/**
 * Prism toolbox which contains draggable prisms as well as the control panel for their index of refraction.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import { Shape } from '../../../../kite/js/imports.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import ProtractorNode from '../../../../scenery-phet/js/ProtractorNode.js';
import { DragListener, HBox, HStrut, Node, Path, Rectangle, Text, VBox } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import bendingLight from '../../bendingLight.js';
import BendingLightStrings from '../../BendingLightStrings.js';
import MediumControlPanel from '../../common/view/MediumControlPanel.js';
import PrismNode from './PrismNode.js';
const normalLineStringProperty = BendingLightStrings.normalLineStringProperty;
const objectsStringProperty = BendingLightStrings.objectsStringProperty;
const protractorStringProperty = BendingLightStrings.protractorStringProperty;
const reflectionsStringProperty = BendingLightStrings.reflectionsStringProperty;

// constants
const MAX_TEXT_WIDTH = 115;
const MAX_PRISM_COUNT = 6; // for each type

class PrismToolboxNode extends Node {
  /**
   * @param modelViewTransform - converts between model and view co-ordinates
   * @param prismsModel - model of the prism screen
   * @param prismLayer - layer in which prisms are present when in play area
   * @param dragBoundsProperty - Bounds of prisms screen.
   * @param occlusionHandler - function that takes one node as a parameter and updates it if occluded by a
   *                                    - control panel
   * @param [providedOptions] that can be passed on to the underlying node
   */
  constructor(modelViewTransform, prismsModel, prismLayer, dragBoundsProperty, occlusionHandler, providedOptions) {
    super();
    const content = new HBox({
      spacing: 8.4,
      excludeInvisibleChildrenFromBounds: false
    });

    // Create prism icon
    const createPrismIcon = prism => {
      const prismShape = prism.copy();
      return new PrismNode(prismsModel, modelViewTransform, prismShape, this, prismLayer, dragBoundsProperty, occlusionHandler, true);
    };

    // Iterate over the prism prototypes in the model and create a draggable icon for each one
    let prismNode;
    prismsModel.getPrismPrototypes().forEach(prism => {
      const prismIcon = createPrismIcon(prism);
      const listener = () => {
        const count = prismsModel.prisms.count(p => p.typeName === prism.typeName);
        prismIcon.visible = count < MAX_PRISM_COUNT;
      };
      prismsModel.prisms.addItemAddedListener(listener);
      prismsModel.prisms.addItemRemovedListener(listener);
      const prismIconBounds = prismIcon.bounds;
      prismIcon.scale(55 / prismIcon.height);
      const prismToolboxIconNode = new Path(Shape.rectangle(prismIconBounds.minX, prismIconBounds.minY, prismIconBounds.getWidth(), prismIconBounds.getHeight()), {
        pickable: true,
        cursor: 'pointer'
      });

      // Add drag listener for the prisms icon
      const dragListener = DragListener.createForwardingListener(event => {
        const start = this.globalToParentPoint(event.pointer.point);
        const prismShape = prism.copy();
        prismShape.translate(modelViewTransform.viewToModelX(start.x), modelViewTransform.viewToModelY(start.y));

        // add prism model to the prisms model
        prismsModel.addPrism(prismShape);

        // create a prism node and add to the prisms layer
        prismNode = new PrismNode(prismsModel, modelViewTransform, prismShape, this, prismLayer, dragBoundsProperty, occlusionHandler, false);
        prismLayer.addChild(prismNode);

        // @ts-expect-error
        prismNode.dragListener.press(event, prismNode);
      });
      prismToolboxIconNode.addInputListener(dragListener);

      // touch area
      prismIcon.touchArea = prismIcon.localBounds;
      content.addChild(prismIcon);
      prismIcon.addChild(prismToolboxIconNode);
    });

    // Allow the user to control the type of material in the prisms
    const environmentMediumMaterialListParent = new Node();

    // @ts-expect-error
    const objectMediumControlPanel = new MediumControlPanel(environmentMediumMaterialListParent, prismsModel.mediumColorFactory, prismsModel.prismMediumProperty, objectsStringProperty, false, prismsModel.wavelengthProperty, 2, {
      lineWidth: 0,
      yMargin: 4
    });
    this.objectMediumControlPanel = objectMediumControlPanel;
    const dividerBetweenPrismsAndPanel = new Rectangle(0, 0, 0.6, objectMediumControlPanel.height - 10, 10, 10, {
      stroke: 'gray',
      lineWidth: 0.2,
      fill: 'gray'
    });
    content.addChild(dividerBetweenPrismsAndPanel);
    content.addChild(objectMediumControlPanel);
    const dividerBetweenMediumPanelAndControlPanel = new Rectangle(0, 0, 0.6, objectMediumControlPanel.height - 10, 10, 10, {
      stroke: 'gray',
      lineWidth: 0.2,
      fill: 'gray'
    });
    content.addChild(dividerBetweenMediumPanelAndControlPanel);

    // Add checkboxes
    const textOptions = {
      font: new PhetFont(10)
    };

    // itemSpec describes the pieces that make up an item in the control panel,
    // conforms to the contract: { label: {Node}, icon: {Node} (optional) }
    const showReflections = {
      label: new Text(reflectionsStringProperty, textOptions),
      icon: null
    };
    const showNormal = {
      label: new Text(normalLineStringProperty, textOptions),
      icon: null
    };
    const showProtractor = {
      label: new Text(protractorStringProperty, textOptions),
      icon: ProtractorNode.createIcon({
        scale: 0.066 // determined empirically
      })
    };

    // compute the maximum item width

    // @ts-expect-error
    const widestItem = _.maxBy([showReflections, showNormal, showProtractor], item => item.label.width + (item.icon ? item.icon.width : 0));
    const widestItemWidth = widestItem.label.width + (widestItem.icon ? widestItem.icon.width : 0);
    const maxWidth = Math.min(widestItemWidth + 10, MAX_TEXT_WIDTH);

    // pad inserts a spacing node (HStrut) so that the text, space and image together occupy a certain fixed width.
    const createItem = itemSpec => {
      if (itemSpec.icon) {
        const textWidth = maxWidth - itemSpec.icon.width - 10;
        if (itemSpec.label.width > textWidth) {
          itemSpec.label.scale(textWidth / itemSpec.label.width);
        }
        const strutWidth = maxWidth - itemSpec.label.width - itemSpec.icon.width;
        return new HBox({
          children: [itemSpec.label, new HStrut(strutWidth), itemSpec.icon]
        });
      } else {
        if (itemSpec.label.width > maxWidth) {
          itemSpec.label.scale(MAX_TEXT_WIDTH / itemSpec.label.width);
        }
        return new HBox({
          children: [itemSpec.label]
        });
      }
    };
    const checkboxOptions = {
      boxWidth: 15,
      spacing: 5
    };

    // add checkboxes for reflections, normal and protractor
    const showReflectionsCheckbox = new Checkbox(prismsModel.showReflectionsProperty, createItem(showReflections), checkboxOptions);
    const showNormalCheckbox = new Checkbox(prismsModel.showNormalsProperty, createItem(showNormal), checkboxOptions);
    const showProtractorCheckbox = new Checkbox(prismsModel.showProtractorProperty, createItem(showProtractor), checkboxOptions);

    // @ts-expect-error
    const maxCheckboxWidth = _.maxBy([showReflectionsCheckbox, showNormalCheckbox, showProtractorCheckbox], item => item.width).width + 5;
    const SPACING = 9;

    // touch Areas
    showReflectionsCheckbox.touchArea = new Bounds2(showReflectionsCheckbox.localBounds.minX - 5, showReflectionsCheckbox.localBounds.minY, showReflectionsCheckbox.localBounds.minX + maxCheckboxWidth, showReflectionsCheckbox.localBounds.maxY).dilatedY(SPACING / 2);
    showNormalCheckbox.touchArea = new Bounds2(showNormalCheckbox.localBounds.minX - 5, showNormalCheckbox.localBounds.minY, showNormalCheckbox.localBounds.minX + maxCheckboxWidth, showNormalCheckbox.localBounds.maxY).dilatedY(SPACING / 2);
    showProtractorCheckbox.touchArea = new Bounds2(showProtractorCheckbox.localBounds.minX - 5, showProtractorCheckbox.localBounds.minY, showProtractorCheckbox.localBounds.minX + maxCheckboxWidth, showProtractorCheckbox.localBounds.maxY).dilatedY(SPACING / 2);

    // pad all the rows so the text nodes are left aligned and the icons is right aligned
    const checkboxes = new VBox({
      align: 'left',
      spacing: SPACING,
      children: [showReflectionsCheckbox, showNormalCheckbox, showProtractorCheckbox]
    });
    content.addChild(checkboxes);

    // Add the sensors panel
    const background = new Rectangle(0, 0, content.width + 25, content.height + 2, 5, 5, {
      stroke: '#696969',
      lineWidth: 1.5,
      fill: '#EEEEEE'
    });
    this.addChild(background);
    this.addChild(content);
    this.addChild(environmentMediumMaterialListParent);
    content.centerX = background.centerX;
    content.centerY = background.centerY;
    this.mutate(providedOptions);
  }
}
bendingLight.register('PrismToolboxNode', PrismToolboxNode);
export default PrismToolboxNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiU2hhcGUiLCJQaGV0Rm9udCIsIlByb3RyYWN0b3JOb2RlIiwiRHJhZ0xpc3RlbmVyIiwiSEJveCIsIkhTdHJ1dCIsIk5vZGUiLCJQYXRoIiwiUmVjdGFuZ2xlIiwiVGV4dCIsIlZCb3giLCJDaGVja2JveCIsImJlbmRpbmdMaWdodCIsIkJlbmRpbmdMaWdodFN0cmluZ3MiLCJNZWRpdW1Db250cm9sUGFuZWwiLCJQcmlzbU5vZGUiLCJub3JtYWxMaW5lU3RyaW5nUHJvcGVydHkiLCJvYmplY3RzU3RyaW5nUHJvcGVydHkiLCJwcm90cmFjdG9yU3RyaW5nUHJvcGVydHkiLCJyZWZsZWN0aW9uc1N0cmluZ1Byb3BlcnR5IiwiTUFYX1RFWFRfV0lEVEgiLCJNQVhfUFJJU01fQ09VTlQiLCJQcmlzbVRvb2xib3hOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcmlzbXNNb2RlbCIsInByaXNtTGF5ZXIiLCJkcmFnQm91bmRzUHJvcGVydHkiLCJvY2NsdXNpb25IYW5kbGVyIiwicHJvdmlkZWRPcHRpb25zIiwiY29udGVudCIsInNwYWNpbmciLCJleGNsdWRlSW52aXNpYmxlQ2hpbGRyZW5Gcm9tQm91bmRzIiwiY3JlYXRlUHJpc21JY29uIiwicHJpc20iLCJwcmlzbVNoYXBlIiwiY29weSIsInByaXNtTm9kZSIsImdldFByaXNtUHJvdG90eXBlcyIsImZvckVhY2giLCJwcmlzbUljb24iLCJsaXN0ZW5lciIsImNvdW50IiwicHJpc21zIiwicCIsInR5cGVOYW1lIiwidmlzaWJsZSIsImFkZEl0ZW1BZGRlZExpc3RlbmVyIiwiYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciIsInByaXNtSWNvbkJvdW5kcyIsImJvdW5kcyIsInNjYWxlIiwiaGVpZ2h0IiwicHJpc21Ub29sYm94SWNvbk5vZGUiLCJyZWN0YW5nbGUiLCJtaW5YIiwibWluWSIsImdldFdpZHRoIiwiZ2V0SGVpZ2h0IiwicGlja2FibGUiLCJjdXJzb3IiLCJkcmFnTGlzdGVuZXIiLCJjcmVhdGVGb3J3YXJkaW5nTGlzdGVuZXIiLCJldmVudCIsInN0YXJ0IiwiZ2xvYmFsVG9QYXJlbnRQb2ludCIsInBvaW50ZXIiLCJwb2ludCIsInRyYW5zbGF0ZSIsInZpZXdUb01vZGVsWCIsIngiLCJ2aWV3VG9Nb2RlbFkiLCJ5IiwiYWRkUHJpc20iLCJhZGRDaGlsZCIsInByZXNzIiwiYWRkSW5wdXRMaXN0ZW5lciIsInRvdWNoQXJlYSIsImxvY2FsQm91bmRzIiwiZW52aXJvbm1lbnRNZWRpdW1NYXRlcmlhbExpc3RQYXJlbnQiLCJvYmplY3RNZWRpdW1Db250cm9sUGFuZWwiLCJtZWRpdW1Db2xvckZhY3RvcnkiLCJwcmlzbU1lZGl1bVByb3BlcnR5Iiwid2F2ZWxlbmd0aFByb3BlcnR5IiwibGluZVdpZHRoIiwieU1hcmdpbiIsImRpdmlkZXJCZXR3ZWVuUHJpc21zQW5kUGFuZWwiLCJzdHJva2UiLCJmaWxsIiwiZGl2aWRlckJldHdlZW5NZWRpdW1QYW5lbEFuZENvbnRyb2xQYW5lbCIsInRleHRPcHRpb25zIiwiZm9udCIsInNob3dSZWZsZWN0aW9ucyIsImxhYmVsIiwiaWNvbiIsInNob3dOb3JtYWwiLCJzaG93UHJvdHJhY3RvciIsImNyZWF0ZUljb24iLCJ3aWRlc3RJdGVtIiwiXyIsIm1heEJ5IiwiaXRlbSIsIndpZHRoIiwid2lkZXN0SXRlbVdpZHRoIiwibWF4V2lkdGgiLCJNYXRoIiwibWluIiwiY3JlYXRlSXRlbSIsIml0ZW1TcGVjIiwidGV4dFdpZHRoIiwic3RydXRXaWR0aCIsImNoaWxkcmVuIiwiY2hlY2tib3hPcHRpb25zIiwiYm94V2lkdGgiLCJzaG93UmVmbGVjdGlvbnNDaGVja2JveCIsInNob3dSZWZsZWN0aW9uc1Byb3BlcnR5Iiwic2hvd05vcm1hbENoZWNrYm94Iiwic2hvd05vcm1hbHNQcm9wZXJ0eSIsInNob3dQcm90cmFjdG9yQ2hlY2tib3giLCJzaG93UHJvdHJhY3RvclByb3BlcnR5IiwibWF4Q2hlY2tib3hXaWR0aCIsIlNQQUNJTkciLCJtYXhZIiwiZGlsYXRlZFkiLCJjaGVja2JveGVzIiwiYWxpZ24iLCJiYWNrZ3JvdW5kIiwiY2VudGVyWCIsImNlbnRlclkiLCJtdXRhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByaXNtVG9vbGJveE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUHJpc20gdG9vbGJveCB3aGljaCBjb250YWlucyBkcmFnZ2FibGUgcHJpc21zIGFzIHdlbGwgYXMgdGhlIGNvbnRyb2wgcGFuZWwgZm9yIHRoZWlyIGluZGV4IG9mIHJlZnJhY3Rpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQ2hhbmRyYXNoZWthciBCZW1hZ29uaSAoQWN0dWFsIENvbmNlcHRzKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBQcm90cmFjdG9yTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUHJvdHJhY3Rvck5vZGUuanMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIsIEhCb3gsIEhTdHJ1dCwgTm9kZSwgTm9kZU9wdGlvbnMsIFBhdGgsIFJlY3RhbmdsZSwgU2NlbmVyeUV2ZW50LCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBiZW5kaW5nTGlnaHQgZnJvbSAnLi4vLi4vYmVuZGluZ0xpZ2h0LmpzJztcclxuaW1wb3J0IEJlbmRpbmdMaWdodFN0cmluZ3MgZnJvbSAnLi4vLi4vQmVuZGluZ0xpZ2h0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBNZWRpdW1Db250cm9sUGFuZWwgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTWVkaXVtQ29udHJvbFBhbmVsLmpzJztcclxuaW1wb3J0IFByaXNtIGZyb20gJy4uL21vZGVsL1ByaXNtLmpzJztcclxuaW1wb3J0IFByaXNtc01vZGVsIGZyb20gJy4uL21vZGVsL1ByaXNtc01vZGVsLmpzJztcclxuaW1wb3J0IFByaXNtTm9kZSBmcm9tICcuL1ByaXNtTm9kZS5qcyc7XHJcblxyXG5jb25zdCBub3JtYWxMaW5lU3RyaW5nUHJvcGVydHkgPSBCZW5kaW5nTGlnaHRTdHJpbmdzLm5vcm1hbExpbmVTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3Qgb2JqZWN0c1N0cmluZ1Byb3BlcnR5ID0gQmVuZGluZ0xpZ2h0U3RyaW5ncy5vYmplY3RzU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHByb3RyYWN0b3JTdHJpbmdQcm9wZXJ0eSA9IEJlbmRpbmdMaWdodFN0cmluZ3MucHJvdHJhY3RvclN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCByZWZsZWN0aW9uc1N0cmluZ1Byb3BlcnR5ID0gQmVuZGluZ0xpZ2h0U3RyaW5ncy5yZWZsZWN0aW9uc1N0cmluZ1Byb3BlcnR5O1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IE1BWF9URVhUX1dJRFRIID0gMTE1O1xyXG5jb25zdCBNQVhfUFJJU01fQ09VTlQgPSA2OyAvLyBmb3IgZWFjaCB0eXBlXHJcblxyXG5jbGFzcyBQcmlzbVRvb2xib3hOb2RlIGV4dGVuZHMgTm9kZSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IG9iamVjdE1lZGl1bUNvbnRyb2xQYW5lbDogTWVkaXVtQ29udHJvbFBhbmVsO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gbW9kZWxWaWV3VHJhbnNmb3JtIC0gY29udmVydHMgYmV0d2VlbiBtb2RlbCBhbmQgdmlldyBjby1vcmRpbmF0ZXNcclxuICAgKiBAcGFyYW0gcHJpc21zTW9kZWwgLSBtb2RlbCBvZiB0aGUgcHJpc20gc2NyZWVuXHJcbiAgICogQHBhcmFtIHByaXNtTGF5ZXIgLSBsYXllciBpbiB3aGljaCBwcmlzbXMgYXJlIHByZXNlbnQgd2hlbiBpbiBwbGF5IGFyZWFcclxuICAgKiBAcGFyYW0gZHJhZ0JvdW5kc1Byb3BlcnR5IC0gQm91bmRzIG9mIHByaXNtcyBzY3JlZW4uXHJcbiAgICogQHBhcmFtIG9jY2x1c2lvbkhhbmRsZXIgLSBmdW5jdGlvbiB0aGF0IHRha2VzIG9uZSBub2RlIGFzIGEgcGFyYW1ldGVyIGFuZCB1cGRhdGVzIGl0IGlmIG9jY2x1ZGVkIGJ5IGFcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gY29udHJvbCBwYW5lbFxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXSB0aGF0IGNhbiBiZSBwYXNzZWQgb24gdG8gdGhlIHVuZGVybHlpbmcgbm9kZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLCBwcmlzbXNNb2RlbDogUHJpc21zTW9kZWwsIHByaXNtTGF5ZXI6IE5vZGUsIGRyYWdCb3VuZHNQcm9wZXJ0eTogUHJvcGVydHk8Qm91bmRzMj4sIG9jY2x1c2lvbkhhbmRsZXI6ICggbjogTm9kZSApID0+IHZvaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBQYXJ0aWFsPE5vZGVPcHRpb25zPiApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBIQm94KCB7XHJcbiAgICAgIHNwYWNpbmc6IDguNCxcclxuICAgICAgZXhjbHVkZUludmlzaWJsZUNoaWxkcmVuRnJvbUJvdW5kczogZmFsc2VcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgcHJpc20gaWNvblxyXG4gICAgY29uc3QgY3JlYXRlUHJpc21JY29uID0gKCBwcmlzbTogUHJpc20gKSA9PiB7XHJcbiAgICAgIGNvbnN0IHByaXNtU2hhcGUgPSBwcmlzbS5jb3B5KCk7XHJcbiAgICAgIHJldHVybiBuZXcgUHJpc21Ob2RlKCBwcmlzbXNNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtLCBwcmlzbVNoYXBlLCB0aGlzLCBwcmlzbUxheWVyLFxyXG4gICAgICAgIGRyYWdCb3VuZHNQcm9wZXJ0eSwgb2NjbHVzaW9uSGFuZGxlciwgdHJ1ZSApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIHByaXNtIHByb3RvdHlwZXMgaW4gdGhlIG1vZGVsIGFuZCBjcmVhdGUgYSBkcmFnZ2FibGUgaWNvbiBmb3IgZWFjaCBvbmVcclxuICAgIGxldCBwcmlzbU5vZGU6IFByaXNtTm9kZTtcclxuICAgIHByaXNtc01vZGVsLmdldFByaXNtUHJvdG90eXBlcygpLmZvckVhY2goIHByaXNtID0+IHtcclxuICAgICAgY29uc3QgcHJpc21JY29uID0gY3JlYXRlUHJpc21JY29uKCBwcmlzbSApO1xyXG5cclxuICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBwcmlzbXNNb2RlbC5wcmlzbXMuY291bnQoICggcDogUHJpc20gKSA9PiBwLnR5cGVOYW1lID09PSBwcmlzbS50eXBlTmFtZSApO1xyXG4gICAgICAgIHByaXNtSWNvbi52aXNpYmxlID0gY291bnQgPCBNQVhfUFJJU01fQ09VTlQ7XHJcbiAgICAgIH07XHJcbiAgICAgIHByaXNtc01vZGVsLnByaXNtcy5hZGRJdGVtQWRkZWRMaXN0ZW5lciggbGlzdGVuZXIgKTtcclxuICAgICAgcHJpc21zTW9kZWwucHJpc21zLmFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIoIGxpc3RlbmVyICk7XHJcbiAgICAgIGNvbnN0IHByaXNtSWNvbkJvdW5kcyA9IHByaXNtSWNvbi5ib3VuZHM7XHJcbiAgICAgIHByaXNtSWNvbi5zY2FsZSggNTUgLyBwcmlzbUljb24uaGVpZ2h0ICk7XHJcbiAgICAgIGNvbnN0IHByaXNtVG9vbGJveEljb25Ob2RlID0gbmV3IFBhdGgoIFNoYXBlLnJlY3RhbmdsZShcclxuICAgICAgICBwcmlzbUljb25Cb3VuZHMubWluWCxcclxuICAgICAgICBwcmlzbUljb25Cb3VuZHMubWluWSxcclxuICAgICAgICBwcmlzbUljb25Cb3VuZHMuZ2V0V2lkdGgoKSxcclxuICAgICAgICBwcmlzbUljb25Cb3VuZHMuZ2V0SGVpZ2h0KClcclxuICAgICAgKSwge1xyXG4gICAgICAgIHBpY2thYmxlOiB0cnVlLFxyXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIC8vIEFkZCBkcmFnIGxpc3RlbmVyIGZvciB0aGUgcHJpc21zIGljb25cclxuICAgICAgY29uc3QgZHJhZ0xpc3RlbmVyID0gRHJhZ0xpc3RlbmVyLmNyZWF0ZUZvcndhcmRpbmdMaXN0ZW5lciggKCBldmVudDogU2NlbmVyeUV2ZW50ICkgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMuZ2xvYmFsVG9QYXJlbnRQb2ludCggZXZlbnQucG9pbnRlci5wb2ludCApO1xyXG4gICAgICAgIGNvbnN0IHByaXNtU2hhcGUgPSBwcmlzbS5jb3B5KCk7XHJcbiAgICAgICAgcHJpc21TaGFwZS50cmFuc2xhdGUoXHJcbiAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm0udmlld1RvTW9kZWxYKCBzdGFydC54ICksXHJcbiAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm0udmlld1RvTW9kZWxZKCBzdGFydC55IClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBhZGQgcHJpc20gbW9kZWwgdG8gdGhlIHByaXNtcyBtb2RlbFxyXG4gICAgICAgIHByaXNtc01vZGVsLmFkZFByaXNtKCBwcmlzbVNoYXBlICk7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSBhIHByaXNtIG5vZGUgYW5kIGFkZCB0byB0aGUgcHJpc21zIGxheWVyXHJcbiAgICAgICAgcHJpc21Ob2RlID0gbmV3IFByaXNtTm9kZSggcHJpc21zTW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybSwgcHJpc21TaGFwZSwgdGhpcywgcHJpc21MYXllciwgZHJhZ0JvdW5kc1Byb3BlcnR5LCBvY2NsdXNpb25IYW5kbGVyLCBmYWxzZSApO1xyXG4gICAgICAgIHByaXNtTGF5ZXIuYWRkQ2hpbGQoIHByaXNtTm9kZSApO1xyXG5cclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgcHJpc21Ob2RlLmRyYWdMaXN0ZW5lci5wcmVzcyggZXZlbnQsIHByaXNtTm9kZSApO1xyXG4gICAgICB9ICk7XHJcbiAgICAgIHByaXNtVG9vbGJveEljb25Ob2RlLmFkZElucHV0TGlzdGVuZXIoIGRyYWdMaXN0ZW5lciApO1xyXG5cclxuICAgICAgLy8gdG91Y2ggYXJlYVxyXG4gICAgICBwcmlzbUljb24udG91Y2hBcmVhID0gcHJpc21JY29uLmxvY2FsQm91bmRzO1xyXG4gICAgICBjb250ZW50LmFkZENoaWxkKCBwcmlzbUljb24gKTtcclxuICAgICAgcHJpc21JY29uLmFkZENoaWxkKCBwcmlzbVRvb2xib3hJY29uTm9kZSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEFsbG93IHRoZSB1c2VyIHRvIGNvbnRyb2wgdGhlIHR5cGUgb2YgbWF0ZXJpYWwgaW4gdGhlIHByaXNtc1xyXG4gICAgY29uc3QgZW52aXJvbm1lbnRNZWRpdW1NYXRlcmlhbExpc3RQYXJlbnQgPSBuZXcgTm9kZSgpO1xyXG5cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIGNvbnN0IG9iamVjdE1lZGl1bUNvbnRyb2xQYW5lbCA9IG5ldyBNZWRpdW1Db250cm9sUGFuZWwoIGVudmlyb25tZW50TWVkaXVtTWF0ZXJpYWxMaXN0UGFyZW50LFxyXG4gICAgICBwcmlzbXNNb2RlbC5tZWRpdW1Db2xvckZhY3RvcnksXHJcbiAgICAgIHByaXNtc01vZGVsLnByaXNtTWVkaXVtUHJvcGVydHksXHJcbiAgICAgIG9iamVjdHNTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgZmFsc2UsXHJcbiAgICAgIHByaXNtc01vZGVsLndhdmVsZW5ndGhQcm9wZXJ0eSxcclxuICAgICAgMiwge1xyXG4gICAgICAgIGxpbmVXaWR0aDogMCxcclxuICAgICAgICB5TWFyZ2luOiA0XHJcbiAgICAgIH0gKTtcclxuICAgIHRoaXMub2JqZWN0TWVkaXVtQ29udHJvbFBhbmVsID0gb2JqZWN0TWVkaXVtQ29udHJvbFBhbmVsO1xyXG4gICAgY29uc3QgZGl2aWRlckJldHdlZW5QcmlzbXNBbmRQYW5lbCA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDAuNiwgb2JqZWN0TWVkaXVtQ29udHJvbFBhbmVsLmhlaWdodCAtIDEwLCAxMCwgMTAsIHtcclxuICAgICAgc3Ryb2tlOiAnZ3JheScsIGxpbmVXaWR0aDogMC4yLCBmaWxsOiAnZ3JheSdcclxuICAgIH0gKTtcclxuICAgIGNvbnRlbnQuYWRkQ2hpbGQoIGRpdmlkZXJCZXR3ZWVuUHJpc21zQW5kUGFuZWwgKTtcclxuXHJcbiAgICBjb250ZW50LmFkZENoaWxkKCBvYmplY3RNZWRpdW1Db250cm9sUGFuZWwgKTtcclxuICAgIGNvbnN0IGRpdmlkZXJCZXR3ZWVuTWVkaXVtUGFuZWxBbmRDb250cm9sUGFuZWwgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAwLjYsIG9iamVjdE1lZGl1bUNvbnRyb2xQYW5lbC5oZWlnaHQgLSAxMCwgMTAsXHJcbiAgICAgIDEwLCB7XHJcbiAgICAgICAgc3Ryb2tlOiAnZ3JheScsIGxpbmVXaWR0aDogMC4yLCBmaWxsOiAnZ3JheSdcclxuICAgICAgfSApO1xyXG4gICAgY29udGVudC5hZGRDaGlsZCggZGl2aWRlckJldHdlZW5NZWRpdW1QYW5lbEFuZENvbnRyb2xQYW5lbCApO1xyXG5cclxuICAgIC8vIEFkZCBjaGVja2JveGVzXHJcbiAgICBjb25zdCB0ZXh0T3B0aW9ucyA9IHsgZm9udDogbmV3IFBoZXRGb250KCAxMCApIH07XHJcblxyXG4gICAgLy8gaXRlbVNwZWMgZGVzY3JpYmVzIHRoZSBwaWVjZXMgdGhhdCBtYWtlIHVwIGFuIGl0ZW0gaW4gdGhlIGNvbnRyb2wgcGFuZWwsXHJcbiAgICAvLyBjb25mb3JtcyB0byB0aGUgY29udHJhY3Q6IHsgbGFiZWw6IHtOb2RlfSwgaWNvbjoge05vZGV9IChvcHRpb25hbCkgfVxyXG4gICAgY29uc3Qgc2hvd1JlZmxlY3Rpb25zID0geyBsYWJlbDogbmV3IFRleHQoIHJlZmxlY3Rpb25zU3RyaW5nUHJvcGVydHksIHRleHRPcHRpb25zICksIGljb246IG51bGwgfTtcclxuICAgIGNvbnN0IHNob3dOb3JtYWwgPSB7IGxhYmVsOiBuZXcgVGV4dCggbm9ybWFsTGluZVN0cmluZ1Byb3BlcnR5LCB0ZXh0T3B0aW9ucyApLCBpY29uOiBudWxsIH07XHJcbiAgICBjb25zdCBzaG93UHJvdHJhY3RvciA9IHtcclxuICAgICAgbGFiZWw6IG5ldyBUZXh0KCBwcm90cmFjdG9yU3RyaW5nUHJvcGVydHksIHRleHRPcHRpb25zICksXHJcbiAgICAgIGljb246IFByb3RyYWN0b3JOb2RlLmNyZWF0ZUljb24oIHtcclxuICAgICAgICBzY2FsZTogMC4wNjYgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseVxyXG4gICAgICB9IClcclxuICAgIH07XHJcblxyXG4gICAgLy8gY29tcHV0ZSB0aGUgbWF4aW11bSBpdGVtIHdpZHRoXHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgY29uc3Qgd2lkZXN0SXRlbTogeyBsYWJlbDogTm9kZTsgaWNvbjogTm9kZSB8IG51bGwgfSA9IF8ubWF4QnkoIFsgc2hvd1JlZmxlY3Rpb25zLCBzaG93Tm9ybWFsLCBzaG93UHJvdHJhY3RvciBdLCBpdGVtID0+IGl0ZW0ubGFiZWwud2lkdGggKyAoICggaXRlbS5pY29uICkgPyBpdGVtLmljb24ud2lkdGggOiAwICkgKTtcclxuICAgIGNvbnN0IHdpZGVzdEl0ZW1XaWR0aCA9IHdpZGVzdEl0ZW0ubGFiZWwud2lkdGggKyAoICggd2lkZXN0SXRlbS5pY29uICkgPyB3aWRlc3RJdGVtLmljb24ud2lkdGggOiAwICk7XHJcbiAgICBjb25zdCBtYXhXaWR0aCA9IE1hdGgubWluKCB3aWRlc3RJdGVtV2lkdGggKyAxMCwgTUFYX1RFWFRfV0lEVEggKTtcclxuXHJcbiAgICAvLyBwYWQgaW5zZXJ0cyBhIHNwYWNpbmcgbm9kZSAoSFN0cnV0KSBzbyB0aGF0IHRoZSB0ZXh0LCBzcGFjZSBhbmQgaW1hZ2UgdG9nZXRoZXIgb2NjdXB5IGEgY2VydGFpbiBmaXhlZCB3aWR0aC5cclxuICAgIGNvbnN0IGNyZWF0ZUl0ZW0gPSAoIGl0ZW1TcGVjOiB7IGxhYmVsOiBOb2RlOyBpY29uOiBOb2RlIHwgbnVsbCB9ICkgPT4ge1xyXG4gICAgICBpZiAoIGl0ZW1TcGVjLmljb24gKSB7XHJcbiAgICAgICAgY29uc3QgdGV4dFdpZHRoID0gbWF4V2lkdGggLSBpdGVtU3BlYy5pY29uLndpZHRoIC0gMTA7XHJcbiAgICAgICAgaWYgKCBpdGVtU3BlYy5sYWJlbC53aWR0aCA+IHRleHRXaWR0aCApIHtcclxuICAgICAgICAgIGl0ZW1TcGVjLmxhYmVsLnNjYWxlKCB0ZXh0V2lkdGggLyBpdGVtU3BlYy5sYWJlbC53aWR0aCApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdHJ1dFdpZHRoID0gbWF4V2lkdGggLSBpdGVtU3BlYy5sYWJlbC53aWR0aCAtIGl0ZW1TcGVjLmljb24ud2lkdGg7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIQm94KCB7IGNoaWxkcmVuOiBbIGl0ZW1TcGVjLmxhYmVsLCBuZXcgSFN0cnV0KCBzdHJ1dFdpZHRoICksIGl0ZW1TcGVjLmljb24gXSB9ICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKCBpdGVtU3BlYy5sYWJlbC53aWR0aCA+IG1heFdpZHRoICkge1xyXG4gICAgICAgICAgaXRlbVNwZWMubGFiZWwuc2NhbGUoIE1BWF9URVhUX1dJRFRIIC8gaXRlbVNwZWMubGFiZWwud2lkdGggKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIQm94KCB7IGNoaWxkcmVuOiBbIGl0ZW1TcGVjLmxhYmVsIF0gfSApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNoZWNrYm94T3B0aW9ucyA9IHtcclxuICAgICAgYm94V2lkdGg6IDE1LFxyXG4gICAgICBzcGFjaW5nOiA1XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGFkZCBjaGVja2JveGVzIGZvciByZWZsZWN0aW9ucywgbm9ybWFsIGFuZCBwcm90cmFjdG9yXHJcbiAgICBjb25zdCBzaG93UmVmbGVjdGlvbnNDaGVja2JveCA9IG5ldyBDaGVja2JveCggcHJpc21zTW9kZWwuc2hvd1JlZmxlY3Rpb25zUHJvcGVydHksIGNyZWF0ZUl0ZW0oIHNob3dSZWZsZWN0aW9ucyApLCBjaGVja2JveE9wdGlvbnMgKTtcclxuICAgIGNvbnN0IHNob3dOb3JtYWxDaGVja2JveCA9IG5ldyBDaGVja2JveCggcHJpc21zTW9kZWwuc2hvd05vcm1hbHNQcm9wZXJ0eSwgY3JlYXRlSXRlbSggc2hvd05vcm1hbCApLCBjaGVja2JveE9wdGlvbnMgKTtcclxuICAgIGNvbnN0IHNob3dQcm90cmFjdG9yQ2hlY2tib3ggPSBuZXcgQ2hlY2tib3goIHByaXNtc01vZGVsLnNob3dQcm90cmFjdG9yUHJvcGVydHksIGNyZWF0ZUl0ZW0oIHNob3dQcm90cmFjdG9yICksIGNoZWNrYm94T3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIGNvbnN0IG1heENoZWNrYm94V2lkdGggPSBfLm1heEJ5KCBbIHNob3dSZWZsZWN0aW9uc0NoZWNrYm94LCBzaG93Tm9ybWFsQ2hlY2tib3gsIHNob3dQcm90cmFjdG9yQ2hlY2tib3ggXSxcclxuICAgICAgaXRlbSA9PiBpdGVtLndpZHRoXHJcbiAgICApLndpZHRoICsgNTtcclxuXHJcbiAgICBjb25zdCBTUEFDSU5HID0gOTtcclxuXHJcbiAgICAvLyB0b3VjaCBBcmVhc1xyXG4gICAgc2hvd1JlZmxlY3Rpb25zQ2hlY2tib3gudG91Y2hBcmVhID0gbmV3IEJvdW5kczIoXHJcbiAgICAgIHNob3dSZWZsZWN0aW9uc0NoZWNrYm94LmxvY2FsQm91bmRzLm1pblggLSA1LFxyXG4gICAgICBzaG93UmVmbGVjdGlvbnNDaGVja2JveC5sb2NhbEJvdW5kcy5taW5ZLFxyXG4gICAgICBzaG93UmVmbGVjdGlvbnNDaGVja2JveC5sb2NhbEJvdW5kcy5taW5YICsgbWF4Q2hlY2tib3hXaWR0aCxcclxuICAgICAgc2hvd1JlZmxlY3Rpb25zQ2hlY2tib3gubG9jYWxCb3VuZHMubWF4WVxyXG4gICAgKS5kaWxhdGVkWSggU1BBQ0lORyAvIDIgKTtcclxuXHJcbiAgICBzaG93Tm9ybWFsQ2hlY2tib3gudG91Y2hBcmVhID0gbmV3IEJvdW5kczIoXHJcbiAgICAgIHNob3dOb3JtYWxDaGVja2JveC5sb2NhbEJvdW5kcy5taW5YIC0gNSxcclxuICAgICAgc2hvd05vcm1hbENoZWNrYm94LmxvY2FsQm91bmRzLm1pblksXHJcbiAgICAgIHNob3dOb3JtYWxDaGVja2JveC5sb2NhbEJvdW5kcy5taW5YICsgbWF4Q2hlY2tib3hXaWR0aCxcclxuICAgICAgc2hvd05vcm1hbENoZWNrYm94LmxvY2FsQm91bmRzLm1heFlcclxuICAgICkuZGlsYXRlZFkoIFNQQUNJTkcgLyAyICk7XHJcblxyXG4gICAgc2hvd1Byb3RyYWN0b3JDaGVja2JveC50b3VjaEFyZWEgPSBuZXcgQm91bmRzMihcclxuICAgICAgc2hvd1Byb3RyYWN0b3JDaGVja2JveC5sb2NhbEJvdW5kcy5taW5YIC0gNSxcclxuICAgICAgc2hvd1Byb3RyYWN0b3JDaGVja2JveC5sb2NhbEJvdW5kcy5taW5ZLFxyXG4gICAgICBzaG93UHJvdHJhY3RvckNoZWNrYm94LmxvY2FsQm91bmRzLm1pblggKyBtYXhDaGVja2JveFdpZHRoLFxyXG4gICAgICBzaG93UHJvdHJhY3RvckNoZWNrYm94LmxvY2FsQm91bmRzLm1heFlcclxuICAgICkuZGlsYXRlZFkoIFNQQUNJTkcgLyAyICk7XHJcblxyXG4gICAgLy8gcGFkIGFsbCB0aGUgcm93cyBzbyB0aGUgdGV4dCBub2RlcyBhcmUgbGVmdCBhbGlnbmVkIGFuZCB0aGUgaWNvbnMgaXMgcmlnaHQgYWxpZ25lZFxyXG4gICAgY29uc3QgY2hlY2tib3hlcyA9IG5ldyBWQm94KCB7XHJcbiAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgIHNwYWNpbmc6IFNQQUNJTkcsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgc2hvd1JlZmxlY3Rpb25zQ2hlY2tib3gsXHJcbiAgICAgICAgc2hvd05vcm1hbENoZWNrYm94LFxyXG4gICAgICAgIHNob3dQcm90cmFjdG9yQ2hlY2tib3hcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG4gICAgY29udGVudC5hZGRDaGlsZCggY2hlY2tib3hlcyApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgc2Vuc29ycyBwYW5lbFxyXG4gICAgY29uc3QgYmFja2dyb3VuZCA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIGNvbnRlbnQud2lkdGggKyAyNSwgY29udGVudC5oZWlnaHQgKyAyLCA1LCA1LCB7XHJcbiAgICAgIHN0cm9rZTogJyM2OTY5NjknLCBsaW5lV2lkdGg6IDEuNSwgZmlsbDogJyNFRUVFRUUnXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBiYWNrZ3JvdW5kICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBjb250ZW50ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBlbnZpcm9ubWVudE1lZGl1bU1hdGVyaWFsTGlzdFBhcmVudCApO1xyXG4gICAgY29udGVudC5jZW50ZXJYID0gYmFja2dyb3VuZC5jZW50ZXJYO1xyXG4gICAgY29udGVudC5jZW50ZXJZID0gYmFja2dyb3VuZC5jZW50ZXJZO1xyXG4gICAgdGhpcy5tdXRhdGUoIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuYmVuZGluZ0xpZ2h0LnJlZ2lzdGVyKCAnUHJpc21Ub29sYm94Tm9kZScsIFByaXNtVG9vbGJveE5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByaXNtVG9vbGJveE5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUV0RCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLGNBQWMsTUFBTSwrQ0FBK0M7QUFDMUUsU0FBU0MsWUFBWSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFlQyxJQUFJLEVBQUVDLFNBQVMsRUFBZ0JDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM1SSxPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsbUJBQW1CLE1BQU0sOEJBQThCO0FBQzlELE9BQU9DLGtCQUFrQixNQUFNLHlDQUF5QztBQUd4RSxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBRXRDLE1BQU1DLHdCQUF3QixHQUFHSCxtQkFBbUIsQ0FBQ0csd0JBQXdCO0FBQzdFLE1BQU1DLHFCQUFxQixHQUFHSixtQkFBbUIsQ0FBQ0kscUJBQXFCO0FBQ3ZFLE1BQU1DLHdCQUF3QixHQUFHTCxtQkFBbUIsQ0FBQ0ssd0JBQXdCO0FBQzdFLE1BQU1DLHlCQUF5QixHQUFHTixtQkFBbUIsQ0FBQ00seUJBQXlCOztBQUUvRTtBQUNBLE1BQU1DLGNBQWMsR0FBRyxHQUFHO0FBQzFCLE1BQU1DLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQzs7QUFFM0IsTUFBTUMsZ0JBQWdCLFNBQVNoQixJQUFJLENBQUM7RUFHbEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NpQixXQUFXQSxDQUFFQyxrQkFBdUMsRUFBRUMsV0FBd0IsRUFBRUMsVUFBZ0IsRUFBRUMsa0JBQXFDLEVBQUVDLGdCQUFxQyxFQUNqS0MsZUFBc0MsRUFBRztJQUUzRCxLQUFLLENBQUMsQ0FBQztJQUNQLE1BQU1DLE9BQU8sR0FBRyxJQUFJMUIsSUFBSSxDQUFFO01BQ3hCMkIsT0FBTyxFQUFFLEdBQUc7TUFDWkMsa0NBQWtDLEVBQUU7SUFDdEMsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsZUFBZSxHQUFLQyxLQUFZLElBQU07TUFDMUMsTUFBTUMsVUFBVSxHQUFHRCxLQUFLLENBQUNFLElBQUksQ0FBQyxDQUFDO01BQy9CLE9BQU8sSUFBSXJCLFNBQVMsQ0FBRVUsV0FBVyxFQUFFRCxrQkFBa0IsRUFBRVcsVUFBVSxFQUFFLElBQUksRUFBRVQsVUFBVSxFQUNqRkMsa0JBQWtCLEVBQUVDLGdCQUFnQixFQUFFLElBQUssQ0FBQztJQUNoRCxDQUFDOztJQUVEO0lBQ0EsSUFBSVMsU0FBb0I7SUFDeEJaLFdBQVcsQ0FBQ2Esa0JBQWtCLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUVMLEtBQUssSUFBSTtNQUNqRCxNQUFNTSxTQUFTLEdBQUdQLGVBQWUsQ0FBRUMsS0FBTSxDQUFDO01BRTFDLE1BQU1PLFFBQVEsR0FBR0EsQ0FBQSxLQUFNO1FBQ3JCLE1BQU1DLEtBQUssR0FBR2pCLFdBQVcsQ0FBQ2tCLE1BQU0sQ0FBQ0QsS0FBSyxDQUFJRSxDQUFRLElBQU1BLENBQUMsQ0FBQ0MsUUFBUSxLQUFLWCxLQUFLLENBQUNXLFFBQVMsQ0FBQztRQUN2RkwsU0FBUyxDQUFDTSxPQUFPLEdBQUdKLEtBQUssR0FBR3JCLGVBQWU7TUFDN0MsQ0FBQztNQUNESSxXQUFXLENBQUNrQixNQUFNLENBQUNJLG9CQUFvQixDQUFFTixRQUFTLENBQUM7TUFDbkRoQixXQUFXLENBQUNrQixNQUFNLENBQUNLLHNCQUFzQixDQUFFUCxRQUFTLENBQUM7TUFDckQsTUFBTVEsZUFBZSxHQUFHVCxTQUFTLENBQUNVLE1BQU07TUFDeENWLFNBQVMsQ0FBQ1csS0FBSyxDQUFFLEVBQUUsR0FBR1gsU0FBUyxDQUFDWSxNQUFPLENBQUM7TUFDeEMsTUFBTUMsb0JBQW9CLEdBQUcsSUFBSTlDLElBQUksQ0FBRVAsS0FBSyxDQUFDc0QsU0FBUyxDQUNwREwsZUFBZSxDQUFDTSxJQUFJLEVBQ3BCTixlQUFlLENBQUNPLElBQUksRUFDcEJQLGVBQWUsQ0FBQ1EsUUFBUSxDQUFDLENBQUMsRUFDMUJSLGVBQWUsQ0FBQ1MsU0FBUyxDQUFDLENBQzVCLENBQUMsRUFBRTtRQUNEQyxRQUFRLEVBQUUsSUFBSTtRQUNkQyxNQUFNLEVBQUU7TUFDVixDQUFFLENBQUM7O01BRUg7TUFDQSxNQUFNQyxZQUFZLEdBQUcxRCxZQUFZLENBQUMyRCx3QkFBd0IsQ0FBSUMsS0FBbUIsSUFBTTtRQUVyRixNQUFNQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBRUYsS0FBSyxDQUFDRyxPQUFPLENBQUNDLEtBQU0sQ0FBQztRQUM3RCxNQUFNaEMsVUFBVSxHQUFHRCxLQUFLLENBQUNFLElBQUksQ0FBQyxDQUFDO1FBQy9CRCxVQUFVLENBQUNpQyxTQUFTLENBQ2xCNUMsa0JBQWtCLENBQUM2QyxZQUFZLENBQUVMLEtBQUssQ0FBQ00sQ0FBRSxDQUFDLEVBQzFDOUMsa0JBQWtCLENBQUMrQyxZQUFZLENBQUVQLEtBQUssQ0FBQ1EsQ0FBRSxDQUMzQyxDQUFDOztRQUVEO1FBQ0EvQyxXQUFXLENBQUNnRCxRQUFRLENBQUV0QyxVQUFXLENBQUM7O1FBRWxDO1FBQ0FFLFNBQVMsR0FBRyxJQUFJdEIsU0FBUyxDQUFFVSxXQUFXLEVBQUVELGtCQUFrQixFQUFFVyxVQUFVLEVBQUUsSUFBSSxFQUFFVCxVQUFVLEVBQUVDLGtCQUFrQixFQUFFQyxnQkFBZ0IsRUFBRSxLQUFNLENBQUM7UUFDdklGLFVBQVUsQ0FBQ2dELFFBQVEsQ0FBRXJDLFNBQVUsQ0FBQzs7UUFFaEM7UUFDQUEsU0FBUyxDQUFDd0IsWUFBWSxDQUFDYyxLQUFLLENBQUVaLEtBQUssRUFBRTFCLFNBQVUsQ0FBQztNQUNsRCxDQUFFLENBQUM7TUFDSGdCLG9CQUFvQixDQUFDdUIsZ0JBQWdCLENBQUVmLFlBQWEsQ0FBQzs7TUFFckQ7TUFDQXJCLFNBQVMsQ0FBQ3FDLFNBQVMsR0FBR3JDLFNBQVMsQ0FBQ3NDLFdBQVc7TUFDM0NoRCxPQUFPLENBQUM0QyxRQUFRLENBQUVsQyxTQUFVLENBQUM7TUFDN0JBLFNBQVMsQ0FBQ2tDLFFBQVEsQ0FBRXJCLG9CQUFxQixDQUFDO0lBQzVDLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU0wQixtQ0FBbUMsR0FBRyxJQUFJekUsSUFBSSxDQUFDLENBQUM7O0lBRXREO0lBQ0EsTUFBTTBFLHdCQUF3QixHQUFHLElBQUlsRSxrQkFBa0IsQ0FBRWlFLG1DQUFtQyxFQUMxRnRELFdBQVcsQ0FBQ3dELGtCQUFrQixFQUM5QnhELFdBQVcsQ0FBQ3lELG1CQUFtQixFQUMvQmpFLHFCQUFxQixFQUNyQixLQUFLLEVBQ0xRLFdBQVcsQ0FBQzBELGtCQUFrQixFQUM5QixDQUFDLEVBQUU7TUFDREMsU0FBUyxFQUFFLENBQUM7TUFDWkMsT0FBTyxFQUFFO0lBQ1gsQ0FBRSxDQUFDO0lBQ0wsSUFBSSxDQUFDTCx3QkFBd0IsR0FBR0Esd0JBQXdCO0lBQ3hELE1BQU1NLDRCQUE0QixHQUFHLElBQUk5RSxTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUV3RSx3QkFBd0IsQ0FBQzVCLE1BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtNQUMzR21DLE1BQU0sRUFBRSxNQUFNO01BQUVILFNBQVMsRUFBRSxHQUFHO01BQUVJLElBQUksRUFBRTtJQUN4QyxDQUFFLENBQUM7SUFDSDFELE9BQU8sQ0FBQzRDLFFBQVEsQ0FBRVksNEJBQTZCLENBQUM7SUFFaER4RCxPQUFPLENBQUM0QyxRQUFRLENBQUVNLHdCQUF5QixDQUFDO0lBQzVDLE1BQU1TLHdDQUF3QyxHQUFHLElBQUlqRixTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUV3RSx3QkFBd0IsQ0FBQzVCLE1BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUNqSCxFQUFFLEVBQUU7TUFDRm1DLE1BQU0sRUFBRSxNQUFNO01BQUVILFNBQVMsRUFBRSxHQUFHO01BQUVJLElBQUksRUFBRTtJQUN4QyxDQUFFLENBQUM7SUFDTDFELE9BQU8sQ0FBQzRDLFFBQVEsQ0FBRWUsd0NBQXlDLENBQUM7O0lBRTVEO0lBQ0EsTUFBTUMsV0FBVyxHQUFHO01BQUVDLElBQUksRUFBRSxJQUFJMUYsUUFBUSxDQUFFLEVBQUc7SUFBRSxDQUFDOztJQUVoRDtJQUNBO0lBQ0EsTUFBTTJGLGVBQWUsR0FBRztNQUFFQyxLQUFLLEVBQUUsSUFBSXBGLElBQUksQ0FBRVUseUJBQXlCLEVBQUV1RSxXQUFZLENBQUM7TUFBRUksSUFBSSxFQUFFO0lBQUssQ0FBQztJQUNqRyxNQUFNQyxVQUFVLEdBQUc7TUFBRUYsS0FBSyxFQUFFLElBQUlwRixJQUFJLENBQUVPLHdCQUF3QixFQUFFMEUsV0FBWSxDQUFDO01BQUVJLElBQUksRUFBRTtJQUFLLENBQUM7SUFDM0YsTUFBTUUsY0FBYyxHQUFHO01BQ3JCSCxLQUFLLEVBQUUsSUFBSXBGLElBQUksQ0FBRVMsd0JBQXdCLEVBQUV3RSxXQUFZLENBQUM7TUFDeERJLElBQUksRUFBRTVGLGNBQWMsQ0FBQytGLFVBQVUsQ0FBRTtRQUMvQjlDLEtBQUssRUFBRSxLQUFLLENBQUM7TUFDZixDQUFFO0lBQ0osQ0FBQzs7SUFFRDs7SUFFQTtJQUNBLE1BQU0rQyxVQUE4QyxHQUFHQyxDQUFDLENBQUNDLEtBQUssQ0FBRSxDQUFFUixlQUFlLEVBQUVHLFVBQVUsRUFBRUMsY0FBYyxDQUFFLEVBQUVLLElBQUksSUFBSUEsSUFBSSxDQUFDUixLQUFLLENBQUNTLEtBQUssSUFBT0QsSUFBSSxDQUFDUCxJQUFJLEdBQUtPLElBQUksQ0FBQ1AsSUFBSSxDQUFDUSxLQUFLLEdBQUcsQ0FBQyxDQUFHLENBQUM7SUFDckwsTUFBTUMsZUFBZSxHQUFHTCxVQUFVLENBQUNMLEtBQUssQ0FBQ1MsS0FBSyxJQUFPSixVQUFVLENBQUNKLElBQUksR0FBS0ksVUFBVSxDQUFDSixJQUFJLENBQUNRLEtBQUssR0FBRyxDQUFDLENBQUU7SUFDcEcsTUFBTUUsUUFBUSxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBRUgsZUFBZSxHQUFHLEVBQUUsRUFBRW5GLGNBQWUsQ0FBQzs7SUFFakU7SUFDQSxNQUFNdUYsVUFBVSxHQUFLQyxRQUE0QyxJQUFNO01BQ3JFLElBQUtBLFFBQVEsQ0FBQ2QsSUFBSSxFQUFHO1FBQ25CLE1BQU1lLFNBQVMsR0FBR0wsUUFBUSxHQUFHSSxRQUFRLENBQUNkLElBQUksQ0FBQ1EsS0FBSyxHQUFHLEVBQUU7UUFDckQsSUFBS00sUUFBUSxDQUFDZixLQUFLLENBQUNTLEtBQUssR0FBR08sU0FBUyxFQUFHO1VBQ3RDRCxRQUFRLENBQUNmLEtBQUssQ0FBQzFDLEtBQUssQ0FBRTBELFNBQVMsR0FBR0QsUUFBUSxDQUFDZixLQUFLLENBQUNTLEtBQU0sQ0FBQztRQUMxRDtRQUNBLE1BQU1RLFVBQVUsR0FBR04sUUFBUSxHQUFHSSxRQUFRLENBQUNmLEtBQUssQ0FBQ1MsS0FBSyxHQUFHTSxRQUFRLENBQUNkLElBQUksQ0FBQ1EsS0FBSztRQUN4RSxPQUFPLElBQUlsRyxJQUFJLENBQUU7VUFBRTJHLFFBQVEsRUFBRSxDQUFFSCxRQUFRLENBQUNmLEtBQUssRUFBRSxJQUFJeEYsTUFBTSxDQUFFeUcsVUFBVyxDQUFDLEVBQUVGLFFBQVEsQ0FBQ2QsSUFBSTtRQUFHLENBQUUsQ0FBQztNQUM5RixDQUFDLE1BQ0k7UUFDSCxJQUFLYyxRQUFRLENBQUNmLEtBQUssQ0FBQ1MsS0FBSyxHQUFHRSxRQUFRLEVBQUc7VUFDckNJLFFBQVEsQ0FBQ2YsS0FBSyxDQUFDMUMsS0FBSyxDQUFFL0IsY0FBYyxHQUFHd0YsUUFBUSxDQUFDZixLQUFLLENBQUNTLEtBQU0sQ0FBQztRQUMvRDtRQUNBLE9BQU8sSUFBSWxHLElBQUksQ0FBRTtVQUFFMkcsUUFBUSxFQUFFLENBQUVILFFBQVEsQ0FBQ2YsS0FBSztRQUFHLENBQUUsQ0FBQztNQUNyRDtJQUNGLENBQUM7SUFFRCxNQUFNbUIsZUFBZSxHQUFHO01BQ3RCQyxRQUFRLEVBQUUsRUFBRTtNQUNabEYsT0FBTyxFQUFFO0lBQ1gsQ0FBQzs7SUFFRDtJQUNBLE1BQU1tRix1QkFBdUIsR0FBRyxJQUFJdkcsUUFBUSxDQUFFYyxXQUFXLENBQUMwRix1QkFBdUIsRUFBRVIsVUFBVSxDQUFFZixlQUFnQixDQUFDLEVBQUVvQixlQUFnQixDQUFDO0lBQ25JLE1BQU1JLGtCQUFrQixHQUFHLElBQUl6RyxRQUFRLENBQUVjLFdBQVcsQ0FBQzRGLG1CQUFtQixFQUFFVixVQUFVLENBQUVaLFVBQVcsQ0FBQyxFQUFFaUIsZUFBZ0IsQ0FBQztJQUNySCxNQUFNTSxzQkFBc0IsR0FBRyxJQUFJM0csUUFBUSxDQUFFYyxXQUFXLENBQUM4RixzQkFBc0IsRUFBRVosVUFBVSxDQUFFWCxjQUFlLENBQUMsRUFBRWdCLGVBQWdCLENBQUM7O0lBRWhJO0lBQ0EsTUFBTVEsZ0JBQWdCLEdBQUdyQixDQUFDLENBQUNDLEtBQUssQ0FBRSxDQUFFYyx1QkFBdUIsRUFBRUUsa0JBQWtCLEVBQUVFLHNCQUFzQixDQUFFLEVBQ3ZHakIsSUFBSSxJQUFJQSxJQUFJLENBQUNDLEtBQ2YsQ0FBQyxDQUFDQSxLQUFLLEdBQUcsQ0FBQztJQUVYLE1BQU1tQixPQUFPLEdBQUcsQ0FBQzs7SUFFakI7SUFDQVAsdUJBQXVCLENBQUNyQyxTQUFTLEdBQUcsSUFBSTlFLE9BQU8sQ0FDN0NtSCx1QkFBdUIsQ0FBQ3BDLFdBQVcsQ0FBQ3ZCLElBQUksR0FBRyxDQUFDLEVBQzVDMkQsdUJBQXVCLENBQUNwQyxXQUFXLENBQUN0QixJQUFJLEVBQ3hDMEQsdUJBQXVCLENBQUNwQyxXQUFXLENBQUN2QixJQUFJLEdBQUdpRSxnQkFBZ0IsRUFDM0ROLHVCQUF1QixDQUFDcEMsV0FBVyxDQUFDNEMsSUFDdEMsQ0FBQyxDQUFDQyxRQUFRLENBQUVGLE9BQU8sR0FBRyxDQUFFLENBQUM7SUFFekJMLGtCQUFrQixDQUFDdkMsU0FBUyxHQUFHLElBQUk5RSxPQUFPLENBQ3hDcUgsa0JBQWtCLENBQUN0QyxXQUFXLENBQUN2QixJQUFJLEdBQUcsQ0FBQyxFQUN2QzZELGtCQUFrQixDQUFDdEMsV0FBVyxDQUFDdEIsSUFBSSxFQUNuQzRELGtCQUFrQixDQUFDdEMsV0FBVyxDQUFDdkIsSUFBSSxHQUFHaUUsZ0JBQWdCLEVBQ3RESixrQkFBa0IsQ0FBQ3RDLFdBQVcsQ0FBQzRDLElBQ2pDLENBQUMsQ0FBQ0MsUUFBUSxDQUFFRixPQUFPLEdBQUcsQ0FBRSxDQUFDO0lBRXpCSCxzQkFBc0IsQ0FBQ3pDLFNBQVMsR0FBRyxJQUFJOUUsT0FBTyxDQUM1Q3VILHNCQUFzQixDQUFDeEMsV0FBVyxDQUFDdkIsSUFBSSxHQUFHLENBQUMsRUFDM0MrRCxzQkFBc0IsQ0FBQ3hDLFdBQVcsQ0FBQ3RCLElBQUksRUFDdkM4RCxzQkFBc0IsQ0FBQ3hDLFdBQVcsQ0FBQ3ZCLElBQUksR0FBR2lFLGdCQUFnQixFQUMxREYsc0JBQXNCLENBQUN4QyxXQUFXLENBQUM0QyxJQUNyQyxDQUFDLENBQUNDLFFBQVEsQ0FBRUYsT0FBTyxHQUFHLENBQUUsQ0FBQzs7SUFFekI7SUFDQSxNQUFNRyxVQUFVLEdBQUcsSUFBSWxILElBQUksQ0FBRTtNQUMzQm1ILEtBQUssRUFBRSxNQUFNO01BQ2I5RixPQUFPLEVBQUUwRixPQUFPO01BQ2hCVixRQUFRLEVBQUUsQ0FDUkcsdUJBQXVCLEVBQ3ZCRSxrQkFBa0IsRUFDbEJFLHNCQUFzQjtJQUUxQixDQUFFLENBQUM7SUFDSHhGLE9BQU8sQ0FBQzRDLFFBQVEsQ0FBRWtELFVBQVcsQ0FBQzs7SUFFOUI7SUFDQSxNQUFNRSxVQUFVLEdBQUcsSUFBSXRILFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFc0IsT0FBTyxDQUFDd0UsS0FBSyxHQUFHLEVBQUUsRUFBRXhFLE9BQU8sQ0FBQ3NCLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUNwRm1DLE1BQU0sRUFBRSxTQUFTO01BQUVILFNBQVMsRUFBRSxHQUFHO01BQUVJLElBQUksRUFBRTtJQUMzQyxDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNkLFFBQVEsQ0FBRW9ELFVBQVcsQ0FBQztJQUMzQixJQUFJLENBQUNwRCxRQUFRLENBQUU1QyxPQUFRLENBQUM7SUFDeEIsSUFBSSxDQUFDNEMsUUFBUSxDQUFFSyxtQ0FBb0MsQ0FBQztJQUNwRGpELE9BQU8sQ0FBQ2lHLE9BQU8sR0FBR0QsVUFBVSxDQUFDQyxPQUFPO0lBQ3BDakcsT0FBTyxDQUFDa0csT0FBTyxHQUFHRixVQUFVLENBQUNFLE9BQU87SUFDcEMsSUFBSSxDQUFDQyxNQUFNLENBQUVwRyxlQUFnQixDQUFDO0VBQ2hDO0FBQ0Y7QUFFQWpCLFlBQVksQ0FBQ3NILFFBQVEsQ0FBRSxrQkFBa0IsRUFBRTVHLGdCQUFpQixDQUFDO0FBRTdELGVBQWVBLGdCQUFnQiJ9