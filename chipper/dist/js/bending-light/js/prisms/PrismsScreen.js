// Copyright 2015-2022, University of Colorado Boulder

/**
 * The 'Prisms' screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import prismsScreenWhiteNavBar_png from '../../mipmaps/prismsScreenWhiteNavBar_png.js';
import prismsScreenWhite_png from '../../mipmaps/prismsScreenWhite_png.js';
import BendingLightStrings from '../BendingLightStrings.js';
import bendingLight from '../bendingLight.js';
import PrismsModel from './model/PrismsModel.js';
import PrismsScreenView from './view/PrismsScreenView.js';
class PrismsScreen extends Screen {
  constructor(tandem) {
    const options = {
      name: BendingLightStrings.prismsStringProperty,
      homeScreenIcon: new ScreenIcon(new Image(prismsScreenWhite_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      navigationBarIcon: new ScreenIcon(new Image(prismsScreenWhiteNavBar_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    };
    super(() => new PrismsModel({
      tandem: options.tandem.createTandem('model')
    }), model => new PrismsScreenView(model, {
      tandem: options.tandem.createTandem('view')
    }), options);
  }
}
bendingLight.register('PrismsScreen', PrismsScreen);
export default PrismsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJwcmlzbXNTY3JlZW5XaGl0ZU5hdkJhcl9wbmciLCJwcmlzbXNTY3JlZW5XaGl0ZV9wbmciLCJCZW5kaW5nTGlnaHRTdHJpbmdzIiwiYmVuZGluZ0xpZ2h0IiwiUHJpc21zTW9kZWwiLCJQcmlzbXNTY3JlZW5WaWV3IiwiUHJpc21zU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsInByaXNtc1N0cmluZ1Byb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJuYXZpZ2F0aW9uQmFySWNvbiIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcmlzbXNTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdQcmlzbXMnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaGFuZHJhc2hla2FyIEJlbWFnb25pIChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNjcmVlbiwgeyBTY3JlZW5PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHByaXNtc1NjcmVlbldoaXRlTmF2QmFyX3BuZyBmcm9tICcuLi8uLi9taXBtYXBzL3ByaXNtc1NjcmVlbldoaXRlTmF2QmFyX3BuZy5qcyc7XHJcbmltcG9ydCBwcmlzbXNTY3JlZW5XaGl0ZV9wbmcgZnJvbSAnLi4vLi4vbWlwbWFwcy9wcmlzbXNTY3JlZW5XaGl0ZV9wbmcuanMnO1xyXG5pbXBvcnQgQmVuZGluZ0xpZ2h0U3RyaW5ncyBmcm9tICcuLi9CZW5kaW5nTGlnaHRTdHJpbmdzLmpzJztcclxuaW1wb3J0IGJlbmRpbmdMaWdodCBmcm9tICcuLi9iZW5kaW5nTGlnaHQuanMnO1xyXG5pbXBvcnQgUHJpc21zTW9kZWwgZnJvbSAnLi9tb2RlbC9QcmlzbXNNb2RlbC5qcyc7XHJcbmltcG9ydCBQcmlzbXNTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9QcmlzbXNTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbmNsYXNzIFByaXNtc1NjcmVlbiBleHRlbmRzIFNjcmVlbjxQcmlzbXNNb2RlbCwgUHJpc21zU2NyZWVuVmlldz4ge1xyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnM6IFNjcmVlbk9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IEJlbmRpbmdMaWdodFN0cmluZ3MucHJpc21zU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU2NyZWVuSWNvbiggbmV3IEltYWdlKCBwcmlzbXNTY3JlZW5XaGl0ZV9wbmcgKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICBuYXZpZ2F0aW9uQmFySWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggcHJpc21zU2NyZWVuV2hpdGVOYXZCYXJfcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBQcmlzbXNNb2RlbCgge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnIClcclxuICAgICAgfSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgUHJpc21zU2NyZWVuVmlldyggbW9kZWwsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnIClcclxuICAgICAgfSApLFxyXG4gICAgICBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5iZW5kaW5nTGlnaHQucmVnaXN0ZXIoICdQcmlzbXNTY3JlZW4nLCBQcmlzbXNTY3JlZW4gKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByaXNtc1NjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQXlCLDZCQUE2QjtBQUNuRSxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsMkJBQTJCLE1BQU0sOENBQThDO0FBQ3RGLE9BQU9DLHFCQUFxQixNQUFNLHdDQUF3QztBQUMxRSxPQUFPQyxtQkFBbUIsTUFBTSwyQkFBMkI7QUFDM0QsT0FBT0MsWUFBWSxNQUFNLG9CQUFvQjtBQUM3QyxPQUFPQyxXQUFXLE1BQU0sd0JBQXdCO0FBQ2hELE9BQU9DLGdCQUFnQixNQUFNLDRCQUE0QjtBQUd6RCxNQUFNQyxZQUFZLFNBQVNULE1BQU0sQ0FBZ0M7RUFDdkRVLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVwQyxNQUFNQyxPQUFzQixHQUFHO01BQzdCQyxJQUFJLEVBQUVSLG1CQUFtQixDQUFDUyxvQkFBb0I7TUFDOUNDLGNBQWMsRUFBRSxJQUFJZCxVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFRSxxQkFBc0IsQ0FBQyxFQUFFO1FBQ2xFWSxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSEMsaUJBQWlCLEVBQUUsSUFBSWpCLFVBQVUsQ0FBRSxJQUFJQyxLQUFLLENBQUVDLDJCQUE0QixDQUFDLEVBQUU7UUFDM0VhLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUUsQ0FBQztNQUNITixNQUFNLEVBQUVBO0lBQ1YsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUlKLFdBQVcsQ0FBRTtNQUNyQkksTUFBTSxFQUFFQyxPQUFPLENBQUNELE1BQU0sQ0FBQ1EsWUFBWSxDQUFFLE9BQVE7SUFDL0MsQ0FBRSxDQUFDLEVBQ0hDLEtBQUssSUFBSSxJQUFJWixnQkFBZ0IsQ0FBRVksS0FBSyxFQUFFO01BQ3BDVCxNQUFNLEVBQUVDLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDUSxZQUFZLENBQUUsTUFBTztJQUM5QyxDQUFFLENBQUMsRUFDSFAsT0FBUSxDQUFDO0VBQ2I7QUFDRjtBQUVBTixZQUFZLENBQUNlLFFBQVEsQ0FBRSxjQUFjLEVBQUVaLFlBQWEsQ0FBQztBQUVyRCxlQUFlQSxZQUFZIn0=