// Copyright 2015-2022, University of Colorado Boulder

/**
 * A single immutable ray, used in the ray propagation algorithm.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import bendingLight from '../../bendingLight.js';
import BendingLightConstants from '../../common/BendingLightConstants.js';
class ColoredRay {
  /**
   * @param ray - tail and direction
   * @param power - power of the ray
   * @param wavelength - wavelength of ray
   * @param mediumIndexOfRefraction - index of refraction of medium
   * @param frequency - frequency of ray
   */
  constructor(ray, power, wavelength, mediumIndexOfRefraction, frequency) {
    assert && assert(!isNaN(ray.direction.magnitude), 'direction unit vector should have a numeric magnitude');
    this.ray = ray;

    // Power of the ray (1 is full power of the laser), will be reduced if partial reflection/refraction
    this.power = power; // (read-only)

    // Wavelength inside the medium (depends on index of refraction)
    this.wavelength = wavelength; // (read-only)
    this.mediumIndexOfRefraction = mediumIndexOfRefraction; // (read-only)
    this.frequency = frequency; // (read-only)
  }

  get tail() {
    return this.ray.position;
  }
  get directionUnitVector() {
    return this.ray.direction;
  }

  /**
   * Gets the wavelength for this ray if it wasn't inside a medium
   */
  getBaseWavelength() {
    return BendingLightConstants.SPEED_OF_LIGHT / this.frequency;
  }
}
bendingLight.register('ColoredRay', ColoredRay);
export default ColoredRay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiZW5kaW5nTGlnaHQiLCJCZW5kaW5nTGlnaHRDb25zdGFudHMiLCJDb2xvcmVkUmF5IiwiY29uc3RydWN0b3IiLCJyYXkiLCJwb3dlciIsIndhdmVsZW5ndGgiLCJtZWRpdW1JbmRleE9mUmVmcmFjdGlvbiIsImZyZXF1ZW5jeSIsImFzc2VydCIsImlzTmFOIiwiZGlyZWN0aW9uIiwibWFnbml0dWRlIiwidGFpbCIsInBvc2l0aW9uIiwiZGlyZWN0aW9uVW5pdFZlY3RvciIsImdldEJhc2VXYXZlbGVuZ3RoIiwiU1BFRURfT0ZfTElHSFQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbG9yZWRSYXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBzaW5nbGUgaW1tdXRhYmxlIHJheSwgdXNlZCBpbiB0aGUgcmF5IHByb3BhZ2F0aW9uIGFsZ29yaXRobS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaGFuZHJhc2hla2FyIEJlbWFnb25pIChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJheTIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JheTIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBiZW5kaW5nTGlnaHQgZnJvbSAnLi4vLi4vYmVuZGluZ0xpZ2h0LmpzJztcclxuaW1wb3J0IEJlbmRpbmdMaWdodENvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vQmVuZGluZ0xpZ2h0Q29uc3RhbnRzLmpzJztcclxuXHJcbmNsYXNzIENvbG9yZWRSYXkge1xyXG4gIHB1YmxpYyByZWFkb25seSByYXk6IFJheTI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHBvd2VyOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHdhdmVsZW5ndGg6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWVkaXVtSW5kZXhPZlJlZnJhY3Rpb246IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgZnJlcXVlbmN5OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSByYXkgLSB0YWlsIGFuZCBkaXJlY3Rpb25cclxuICAgKiBAcGFyYW0gcG93ZXIgLSBwb3dlciBvZiB0aGUgcmF5XHJcbiAgICogQHBhcmFtIHdhdmVsZW5ndGggLSB3YXZlbGVuZ3RoIG9mIHJheVxyXG4gICAqIEBwYXJhbSBtZWRpdW1JbmRleE9mUmVmcmFjdGlvbiAtIGluZGV4IG9mIHJlZnJhY3Rpb24gb2YgbWVkaXVtXHJcbiAgICogQHBhcmFtIGZyZXF1ZW5jeSAtIGZyZXF1ZW5jeSBvZiByYXlcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHJheTogUmF5MiwgcG93ZXI6IG51bWJlciwgd2F2ZWxlbmd0aDogbnVtYmVyLCBtZWRpdW1JbmRleE9mUmVmcmFjdGlvbjogbnVtYmVyLCBmcmVxdWVuY3k6IG51bWJlciApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhaXNOYU4oIHJheS5kaXJlY3Rpb24ubWFnbml0dWRlICksICdkaXJlY3Rpb24gdW5pdCB2ZWN0b3Igc2hvdWxkIGhhdmUgYSBudW1lcmljIG1hZ25pdHVkZScgKTtcclxuXHJcbiAgICB0aGlzLnJheSA9IHJheTtcclxuXHJcbiAgICAvLyBQb3dlciBvZiB0aGUgcmF5ICgxIGlzIGZ1bGwgcG93ZXIgb2YgdGhlIGxhc2VyKSwgd2lsbCBiZSByZWR1Y2VkIGlmIHBhcnRpYWwgcmVmbGVjdGlvbi9yZWZyYWN0aW9uXHJcbiAgICB0aGlzLnBvd2VyID0gcG93ZXI7IC8vIChyZWFkLW9ubHkpXHJcblxyXG4gICAgLy8gV2F2ZWxlbmd0aCBpbnNpZGUgdGhlIG1lZGl1bSAoZGVwZW5kcyBvbiBpbmRleCBvZiByZWZyYWN0aW9uKVxyXG4gICAgdGhpcy53YXZlbGVuZ3RoID0gd2F2ZWxlbmd0aDsgLy8gKHJlYWQtb25seSlcclxuICAgIHRoaXMubWVkaXVtSW5kZXhPZlJlZnJhY3Rpb24gPSBtZWRpdW1JbmRleE9mUmVmcmFjdGlvbjsgLy8gKHJlYWQtb25seSlcclxuICAgIHRoaXMuZnJlcXVlbmN5ID0gZnJlcXVlbmN5OyAvLyAocmVhZC1vbmx5KVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB0YWlsKCk6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMucmF5LnBvc2l0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkaXJlY3Rpb25Vbml0VmVjdG9yKCk6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMucmF5LmRpcmVjdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIHdhdmVsZW5ndGggZm9yIHRoaXMgcmF5IGlmIGl0IHdhc24ndCBpbnNpZGUgYSBtZWRpdW1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QmFzZVdhdmVsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBCZW5kaW5nTGlnaHRDb25zdGFudHMuU1BFRURfT0ZfTElHSFQgLyB0aGlzLmZyZXF1ZW5jeTtcclxuICB9XHJcbn1cclxuXHJcbmJlbmRpbmdMaWdodC5yZWdpc3RlciggJ0NvbG9yZWRSYXknLCBDb2xvcmVkUmF5ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2xvcmVkUmF5OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MscUJBQXFCLE1BQU0sdUNBQXVDO0FBRXpFLE1BQU1DLFVBQVUsQ0FBQztFQU9mO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLEdBQVMsRUFBRUMsS0FBYSxFQUFFQyxVQUFrQixFQUFFQyx1QkFBK0IsRUFBRUMsU0FBaUIsRUFBRztJQUVySEMsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0MsS0FBSyxDQUFFTixHQUFHLENBQUNPLFNBQVMsQ0FBQ0MsU0FBVSxDQUFDLEVBQUUsdURBQXdELENBQUM7SUFFOUcsSUFBSSxDQUFDUixHQUFHLEdBQUdBLEdBQUc7O0lBRWQ7SUFDQSxJQUFJLENBQUNDLEtBQUssR0FBR0EsS0FBSyxDQUFDLENBQUM7O0lBRXBCO0lBQ0EsSUFBSSxDQUFDQyxVQUFVLEdBQUdBLFVBQVUsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUdBLHVCQUF1QixDQUFDLENBQUM7SUFDeEQsSUFBSSxDQUFDQyxTQUFTLEdBQUdBLFNBQVMsQ0FBQyxDQUFDO0VBQzlCOztFQUVBLElBQVdLLElBQUlBLENBQUEsRUFBWTtJQUN6QixPQUFPLElBQUksQ0FBQ1QsR0FBRyxDQUFDVSxRQUFRO0VBQzFCO0VBRUEsSUFBV0MsbUJBQW1CQSxDQUFBLEVBQVk7SUFDeEMsT0FBTyxJQUFJLENBQUNYLEdBQUcsQ0FBQ08sU0FBUztFQUMzQjs7RUFFQTtBQUNGO0FBQ0E7RUFDU0ssaUJBQWlCQSxDQUFBLEVBQVc7SUFDakMsT0FBT2YscUJBQXFCLENBQUNnQixjQUFjLEdBQUcsSUFBSSxDQUFDVCxTQUFTO0VBQzlEO0FBQ0Y7QUFFQVIsWUFBWSxDQUFDa0IsUUFBUSxDQUFFLFlBQVksRUFBRWhCLFVBQVcsQ0FBQztBQUVqRCxlQUFlQSxVQUFVIn0=