// Copyright 2015-2022, University of Colorado Boulder

/**
 * Wrapper around a shape with convenience methods for computing intersections, etc.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import bendingLight from '../../bendingLight.js';
class Prism {
  /**
   * @param shape
   * @param typeName for keeping track of how many of each kind there are, to remove from toolbox
   */
  constructor(shape, typeName) {
    this.shapeProperty = new Property(shape);

    // overall translation
    this.positionProperty = new Vector2Property(new Vector2(0, 0));

    // (read-only)
    this.typeName = typeName;
  }

  /**
   * Translate prism by the specified amount
   * @param deltaX - amount of space in x direction the prism to be translated
   * @param deltaY - amount of space in y direction the prism to be translated
   */
  translate(deltaX, deltaY) {
    this.positionProperty.value = this.positionProperty.value.plusXY(deltaX, deltaY);
  }
  getTranslatedShape() {
    return this.shapeProperty.value.getTranslatedInstance(this.positionProperty.value.x, this.positionProperty.value.y);
  }

  /**
   * Compute the intersections of the specified ray with this polygon's edges
   * @param incidentRay - model of the ray
   */
  getIntersections(incidentRay) {
    return this.getTranslatedShape().getIntersections(incidentRay);
  }

  /**
   * Determines whether shape contains given point or not
   */
  contains(point) {
    return this.getTranslatedShape().containsPoint(point);
  }

  /**
   * Creates a copy of the prism
   */
  copy() {
    return new Prism(this.shapeProperty.get().getTranslatedInstance(0, 0), this.typeName);
  }

  /**
   * Rotate prism by the specified angle
   * @param deltaAngle - angle to be rotated
   */
  rotate(deltaAngle) {
    this.shapeProperty.set(this.shapeProperty.get().getRotatedInstance(deltaAngle, this.shapeProperty.get().getRotationCenter()));
  }
}
bendingLight.register('Prism', Prism);
export default Prism;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJWZWN0b3IyUHJvcGVydHkiLCJiZW5kaW5nTGlnaHQiLCJQcmlzbSIsImNvbnN0cnVjdG9yIiwic2hhcGUiLCJ0eXBlTmFtZSIsInNoYXBlUHJvcGVydHkiLCJwb3NpdGlvblByb3BlcnR5IiwidHJhbnNsYXRlIiwiZGVsdGFYIiwiZGVsdGFZIiwidmFsdWUiLCJwbHVzWFkiLCJnZXRUcmFuc2xhdGVkU2hhcGUiLCJnZXRUcmFuc2xhdGVkSW5zdGFuY2UiLCJ4IiwieSIsImdldEludGVyc2VjdGlvbnMiLCJpbmNpZGVudFJheSIsImNvbnRhaW5zIiwicG9pbnQiLCJjb250YWluc1BvaW50IiwiY29weSIsImdldCIsInJvdGF0ZSIsImRlbHRhQW5nbGUiLCJzZXQiLCJnZXRSb3RhdGVkSW5zdGFuY2UiLCJnZXRSb3RhdGlvbkNlbnRlciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUHJpc20udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV3JhcHBlciBhcm91bmQgYSBzaGFwZSB3aXRoIGNvbnZlbmllbmNlIG1ldGhvZHMgZm9yIGNvbXB1dGluZyBpbnRlcnNlY3Rpb25zLCBldGMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQ2hhbmRyYXNoZWthciBCZW1hZ29uaSAoQWN0dWFsIENvbmNlcHRzKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMlByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgYmVuZGluZ0xpZ2h0IGZyb20gJy4uLy4uL2JlbmRpbmdMaWdodC5qcyc7XHJcbmltcG9ydCBCZW5kaW5nTGlnaHRDaXJjbGUgZnJvbSAnLi9CZW5kaW5nTGlnaHRDaXJjbGUuanMnO1xyXG5pbXBvcnQgQ29sb3JlZFJheSBmcm9tICcuL0NvbG9yZWRSYXkuanMnO1xyXG5pbXBvcnQgSW50ZXJzZWN0aW9uIGZyb20gJy4vSW50ZXJzZWN0aW9uLmpzJztcclxuaW1wb3J0IFBvbHlnb24gZnJvbSAnLi9Qb2x5Z29uLmpzJztcclxuaW1wb3J0IFNlbWlDaXJjbGUgZnJvbSAnLi9TZW1pQ2lyY2xlLmpzJztcclxuXHJcbmNsYXNzIFByaXNtIHtcclxuICBwdWJsaWMgcmVhZG9ubHkgc2hhcGVQcm9wZXJ0eTogUHJvcGVydHk8UG9seWdvbiB8IEJlbmRpbmdMaWdodENpcmNsZSB8IFNlbWlDaXJjbGU+O1xyXG4gIHB1YmxpYyByZWFkb25seSBwb3NpdGlvblByb3BlcnR5OiBWZWN0b3IyUHJvcGVydHk7XHJcbiAgcHVibGljIHJlYWRvbmx5IHR5cGVOYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzaGFwZVxyXG4gICAqIEBwYXJhbSB0eXBlTmFtZSBmb3Iga2VlcGluZyB0cmFjayBvZiBob3cgbWFueSBvZiBlYWNoIGtpbmQgdGhlcmUgYXJlLCB0byByZW1vdmUgZnJvbSB0b29sYm94XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzaGFwZTogUG9seWdvbiB8IEJlbmRpbmdMaWdodENpcmNsZSB8IFNlbWlDaXJjbGUsIHR5cGVOYW1lOiBzdHJpbmcgKSB7XHJcblxyXG4gICAgdGhpcy5zaGFwZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBzaGFwZSApO1xyXG5cclxuICAgIC8vIG92ZXJhbGwgdHJhbnNsYXRpb25cclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eSA9IG5ldyBWZWN0b3IyUHJvcGVydHkoIG5ldyBWZWN0b3IyKCAwLCAwICkgKTtcclxuXHJcbiAgICAvLyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy50eXBlTmFtZSA9IHR5cGVOYW1lO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVHJhbnNsYXRlIHByaXNtIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50XHJcbiAgICogQHBhcmFtIGRlbHRhWCAtIGFtb3VudCBvZiBzcGFjZSBpbiB4IGRpcmVjdGlvbiB0aGUgcHJpc20gdG8gYmUgdHJhbnNsYXRlZFxyXG4gICAqIEBwYXJhbSBkZWx0YVkgLSBhbW91bnQgb2Ygc3BhY2UgaW4geSBkaXJlY3Rpb24gdGhlIHByaXNtIHRvIGJlIHRyYW5zbGF0ZWRcclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNsYXRlKCBkZWx0YVg6IG51bWJlciwgZGVsdGFZOiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgPSB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUucGx1c1hZKCBkZWx0YVgsIGRlbHRhWSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFRyYW5zbGF0ZWRTaGFwZSgpOiBQb2x5Z29uIHwgQmVuZGluZ0xpZ2h0Q2lyY2xlIHwgU2VtaUNpcmNsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGFwZVByb3BlcnR5LnZhbHVlLmdldFRyYW5zbGF0ZWRJbnN0YW5jZSggdGhpcy5wb3NpdGlvblByb3BlcnR5LnZhbHVlLngsIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS55ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb21wdXRlIHRoZSBpbnRlcnNlY3Rpb25zIG9mIHRoZSBzcGVjaWZpZWQgcmF5IHdpdGggdGhpcyBwb2x5Z29uJ3MgZWRnZXNcclxuICAgKiBAcGFyYW0gaW5jaWRlbnRSYXkgLSBtb2RlbCBvZiB0aGUgcmF5XHJcbiAgICovXHJcbiAgcHVibGljIGdldEludGVyc2VjdGlvbnMoIGluY2lkZW50UmF5OiBDb2xvcmVkUmF5ICk6IEludGVyc2VjdGlvbltdIHtcclxuICAgIHJldHVybiB0aGlzLmdldFRyYW5zbGF0ZWRTaGFwZSgpLmdldEludGVyc2VjdGlvbnMoIGluY2lkZW50UmF5ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgc2hhcGUgY29udGFpbnMgZ2l2ZW4gcG9pbnQgb3Igbm90XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRhaW5zKCBwb2ludDogVmVjdG9yMiApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmdldFRyYW5zbGF0ZWRTaGFwZSgpLmNvbnRhaW5zUG9pbnQoIHBvaW50ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgcHJpc21cclxuICAgKi9cclxuICBwdWJsaWMgY29weSgpOiBQcmlzbSB7XHJcbiAgICByZXR1cm4gbmV3IFByaXNtKCB0aGlzLnNoYXBlUHJvcGVydHkuZ2V0KCkuZ2V0VHJhbnNsYXRlZEluc3RhbmNlKCAwLCAwICksIHRoaXMudHlwZU5hbWUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJvdGF0ZSBwcmlzbSBieSB0aGUgc3BlY2lmaWVkIGFuZ2xlXHJcbiAgICogQHBhcmFtIGRlbHRhQW5nbGUgLSBhbmdsZSB0byBiZSByb3RhdGVkXHJcbiAgICovXHJcbiAgcHVibGljIHJvdGF0ZSggZGVsdGFBbmdsZTogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgdGhpcy5zaGFwZVByb3BlcnR5LnNldCggdGhpcy5zaGFwZVByb3BlcnR5LmdldCgpLmdldFJvdGF0ZWRJbnN0YW5jZSggZGVsdGFBbmdsZSwgdGhpcy5zaGFwZVByb3BlcnR5LmdldCgpLmdldFJvdGF0aW9uQ2VudGVyKCkgKSApO1xyXG4gIH1cclxufVxyXG5cclxuYmVuZGluZ0xpZ2h0LnJlZ2lzdGVyKCAnUHJpc20nLCBQcmlzbSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJpc207Il0sIm1hcHBpbmdz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