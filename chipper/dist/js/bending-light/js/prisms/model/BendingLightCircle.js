// Copyright 2015-2022, University of Colorado Boulder

/**
 * Circle implementation for use in prisms
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chandrashekar Bemagoni (Actual Concepts)
 */

import { Shape } from '../../../../kite/js/imports.js';
import bendingLight from '../../bendingLight.js';
import PrismIntersection from './PrismIntersection.js';
class BendingLightCircle {
  /**
   * @param center - center of the circle
   * @param radius - radius of the circle
   */
  constructor(center, radius) {
    this.center = center; // (read-only)
    this.centroid = center; // (read-only)
    this.radius = radius; // (read-only)
    this.shape = Shape.circle(this.center.x, this.center.y, this.radius); // (read-only)
  }

  /**
   * Create a new Circle translated by the specified amount
   * @param deltaX - amount of space to be translate in x direction
   * @param deltaY - amount of space to be translate in y direction
   */
  getTranslatedInstance(deltaX, deltaY) {
    return new BendingLightCircle(this.center.plusXY(deltaX, deltaY), this.radius);
  }
  getRotatedInstance(angle, rotationCenter) {
    return this;
  }

  /**
   * Finds the intersections between the edges of the circle and the specified ray
   * @param ray - model of the ray
   */
  getIntersections(ray) {
    return PrismIntersection.getIntersections([], this.shape, this.center, ray);
  }

  /**
   * Computes the centroid of the corner points
   */
  getRotationCenter() {
    return this.center;
  }

  /**
   * Signify that the circle can't be rotated
   */
  getReferencePoint() {
    return null;
  }

  /**
   * Determines whether shape contains given point or not
   */
  containsPoint(point) {
    return point.distance(this.center) <= this.radius;
  }
}
bendingLight.register('BendingLightCircle', BendingLightCircle);
export default BendingLightCircle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsImJlbmRpbmdMaWdodCIsIlByaXNtSW50ZXJzZWN0aW9uIiwiQmVuZGluZ0xpZ2h0Q2lyY2xlIiwiY29uc3RydWN0b3IiLCJjZW50ZXIiLCJyYWRpdXMiLCJjZW50cm9pZCIsInNoYXBlIiwiY2lyY2xlIiwieCIsInkiLCJnZXRUcmFuc2xhdGVkSW5zdGFuY2UiLCJkZWx0YVgiLCJkZWx0YVkiLCJwbHVzWFkiLCJnZXRSb3RhdGVkSW5zdGFuY2UiLCJhbmdsZSIsInJvdGF0aW9uQ2VudGVyIiwiZ2V0SW50ZXJzZWN0aW9ucyIsInJheSIsImdldFJvdGF0aW9uQ2VudGVyIiwiZ2V0UmVmZXJlbmNlUG9pbnQiLCJjb250YWluc1BvaW50IiwicG9pbnQiLCJkaXN0YW5jZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmVuZGluZ0xpZ2h0Q2lyY2xlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENpcmNsZSBpbXBsZW1lbnRhdGlvbiBmb3IgdXNlIGluIHByaXNtc1xyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENoYW5kcmFzaGVrYXIgQmVtYWdvbmkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJlbmRpbmdMaWdodCBmcm9tICcuLi8uLi9iZW5kaW5nTGlnaHQuanMnO1xyXG5pbXBvcnQgQ29sb3JlZFJheSBmcm9tICcuL0NvbG9yZWRSYXkuanMnO1xyXG5pbXBvcnQgSW50ZXJzZWN0aW9uIGZyb20gJy4vSW50ZXJzZWN0aW9uLmpzJztcclxuaW1wb3J0IFByaXNtSW50ZXJzZWN0aW9uIGZyb20gJy4vUHJpc21JbnRlcnNlY3Rpb24uanMnO1xyXG5cclxuY2xhc3MgQmVuZGluZ0xpZ2h0Q2lyY2xlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGNlbnRlcjogVmVjdG9yMjtcclxuICBwdWJsaWMgcmVhZG9ubHkgY2VudHJvaWQ6IFZlY3RvcjI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSByYWRpdXM6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgc2hhcGU6IFNoYXBlO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gY2VudGVyIC0gY2VudGVyIG9mIHRoZSBjaXJjbGVcclxuICAgKiBAcGFyYW0gcmFkaXVzIC0gcmFkaXVzIG9mIHRoZSBjaXJjbGVcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNlbnRlcjogVmVjdG9yMiwgcmFkaXVzOiBudW1iZXIgKSB7XHJcblxyXG4gICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7IC8vIChyZWFkLW9ubHkpXHJcbiAgICB0aGlzLmNlbnRyb2lkID0gY2VudGVyOyAvLyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7IC8vIChyZWFkLW9ubHkpXHJcbiAgICB0aGlzLnNoYXBlID0gU2hhcGUuY2lyY2xlKCB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55LCB0aGlzLnJhZGl1cyApOyAvLyAocmVhZC1vbmx5KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IENpcmNsZSB0cmFuc2xhdGVkIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50XHJcbiAgICogQHBhcmFtIGRlbHRhWCAtIGFtb3VudCBvZiBzcGFjZSB0byBiZSB0cmFuc2xhdGUgaW4geCBkaXJlY3Rpb25cclxuICAgKiBAcGFyYW0gZGVsdGFZIC0gYW1vdW50IG9mIHNwYWNlIHRvIGJlIHRyYW5zbGF0ZSBpbiB5IGRpcmVjdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRUcmFuc2xhdGVkSW5zdGFuY2UoIGRlbHRhWDogbnVtYmVyLCBkZWx0YVk6IG51bWJlciApOiBCZW5kaW5nTGlnaHRDaXJjbGUge1xyXG4gICAgcmV0dXJuIG5ldyBCZW5kaW5nTGlnaHRDaXJjbGUoIHRoaXMuY2VudGVyLnBsdXNYWSggZGVsdGFYLCBkZWx0YVkgKSwgdGhpcy5yYWRpdXMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRSb3RhdGVkSW5zdGFuY2UoIGFuZ2xlOiBudW1iZXIsIHJvdGF0aW9uQ2VudGVyOiBWZWN0b3IyICk6IHRoaXMge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGaW5kcyB0aGUgaW50ZXJzZWN0aW9ucyBiZXR3ZWVuIHRoZSBlZGdlcyBvZiB0aGUgY2lyY2xlIGFuZCB0aGUgc3BlY2lmaWVkIHJheVxyXG4gICAqIEBwYXJhbSByYXkgLSBtb2RlbCBvZiB0aGUgcmF5XHJcbiAgICovXHJcbiAgcHVibGljIGdldEludGVyc2VjdGlvbnMoIHJheTogQ29sb3JlZFJheSApOiBJbnRlcnNlY3Rpb25bXSB7XHJcbiAgICByZXR1cm4gUHJpc21JbnRlcnNlY3Rpb24uZ2V0SW50ZXJzZWN0aW9ucyggW10sIHRoaXMuc2hhcGUsIHRoaXMuY2VudGVyLCByYXkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbXB1dGVzIHRoZSBjZW50cm9pZCBvZiB0aGUgY29ybmVyIHBvaW50c1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSb3RhdGlvbkNlbnRlcigpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLmNlbnRlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNpZ25pZnkgdGhhdCB0aGUgY2lyY2xlIGNhbid0IGJlIHJvdGF0ZWRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UmVmZXJlbmNlUG9pbnQoKTogbnVsbCB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZXMgd2hldGhlciBzaGFwZSBjb250YWlucyBnaXZlbiBwb2ludCBvciBub3RcclxuICAgKi9cclxuICBwdWJsaWMgY29udGFpbnNQb2ludCggcG9pbnQ6IFZlY3RvcjIgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gcG9pbnQuZGlzdGFuY2UoIHRoaXMuY2VudGVyICkgPD0gdGhpcy5yYWRpdXM7XHJcbiAgfVxyXG59XHJcblxyXG5iZW5kaW5nTGlnaHQucmVnaXN0ZXIoICdCZW5kaW5nTGlnaHRDaXJjbGUnLCBCZW5kaW5nTGlnaHRDaXJjbGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJlbmRpbmdMaWdodENpcmNsZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxTQUFTQSxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFHaEQsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBRXRELE1BQU1DLGtCQUFrQixDQUFDO0VBTXZCO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLE1BQWUsRUFBRUMsTUFBYyxFQUFHO0lBRXBELElBQUksQ0FBQ0QsTUFBTSxHQUFHQSxNQUFNLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUNFLFFBQVEsR0FBR0YsTUFBTSxDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLElBQUksQ0FBQ0UsS0FBSyxHQUFHUixLQUFLLENBQUNTLE1BQU0sQ0FBRSxJQUFJLENBQUNKLE1BQU0sQ0FBQ0ssQ0FBQyxFQUFFLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxDQUFDLEVBQUUsSUFBSSxDQUFDTCxNQUFPLENBQUMsQ0FBQyxDQUFDO0VBQzFFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU00scUJBQXFCQSxDQUFFQyxNQUFjLEVBQUVDLE1BQWMsRUFBdUI7SUFDakYsT0FBTyxJQUFJWCxrQkFBa0IsQ0FBRSxJQUFJLENBQUNFLE1BQU0sQ0FBQ1UsTUFBTSxDQUFFRixNQUFNLEVBQUVDLE1BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQ1IsTUFBTyxDQUFDO0VBQ3BGO0VBRU9VLGtCQUFrQkEsQ0FBRUMsS0FBYSxFQUFFQyxjQUF1QixFQUFTO0lBQ3hFLE9BQU8sSUFBSTtFQUNiOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NDLGdCQUFnQkEsQ0FBRUMsR0FBZSxFQUFtQjtJQUN6RCxPQUFPbEIsaUJBQWlCLENBQUNpQixnQkFBZ0IsQ0FBRSxFQUFFLEVBQUUsSUFBSSxDQUFDWCxLQUFLLEVBQUUsSUFBSSxDQUFDSCxNQUFNLEVBQUVlLEdBQUksQ0FBQztFQUMvRTs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsaUJBQWlCQSxDQUFBLEVBQVk7SUFDbEMsT0FBTyxJQUFJLENBQUNoQixNQUFNO0VBQ3BCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTaUIsaUJBQWlCQSxDQUFBLEVBQVM7SUFDL0IsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLGFBQWFBLENBQUVDLEtBQWMsRUFBWTtJQUM5QyxPQUFPQSxLQUFLLENBQUNDLFFBQVEsQ0FBRSxJQUFJLENBQUNwQixNQUFPLENBQUMsSUFBSSxJQUFJLENBQUNDLE1BQU07RUFDckQ7QUFDRjtBQUVBTCxZQUFZLENBQUN5QixRQUFRLENBQUUsb0JBQW9CLEVBQUV2QixrQkFBbUIsQ0FBQztBQUVqRSxlQUFlQSxrQkFBa0IifQ==