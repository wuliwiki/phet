// Copyright 2016-2022, University of Colorado Boulder

/**
 * Dialog that describes each game level.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import StringUtils from '../../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../../scenery-phet/js/PhetFont.js';
import { Node, Text, VBox } from '../../../../../scenery/js/imports.js';
import Dialog from '../../../../../sun/js/Dialog.js';
import makeATen from '../../../makeATen.js';
import MakeATenStrings from '../../../MakeATenStrings.js';

// Template for inserting the level number
const patternLevel0LevelNumberString = MakeATenStrings.pattern.level['0levelNumber'];
const LEVEL_NUMBER_FONT = new PhetFont({
  size: 14,
  weight: 'bold'
});
const LEVEL_DESCRIPTION_FONT = new PhetFont(14);
class InfoDialog extends Dialog {
  /**
   * @param {Array.<Level>} levels - All game levels
   */
  constructor(levels) {
    const levelMaxWidth = 100;
    const padWidth = new Text(StringUtils.format(patternLevel0LevelNumberString, '10'), {
      font: LEVEL_NUMBER_FONT,
      maxWidth: levelMaxWidth
    }).width + 20;
    function createLevelNode(level) {
      return new Node({
        children: [new Text(StringUtils.format(patternLevel0LevelNumberString, `${level.number}`), {
          font: LEVEL_NUMBER_FONT,
          maxWidth: levelMaxWidth
        }), new Text(level.description, {
          font: LEVEL_DESCRIPTION_FONT,
          x: padWidth,
          maxWidth: 500
        })]
      });
    }
    const contentNode = new VBox({
      align: 'left',
      spacing: 14,
      children: levels.map(createLevelNode)
    });
    super(contentNode);
  }
}
makeATen.register('InfoDialog', InfoDialog);
export default InfoDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIlBoZXRGb250IiwiTm9kZSIsIlRleHQiLCJWQm94IiwiRGlhbG9nIiwibWFrZUFUZW4iLCJNYWtlQVRlblN0cmluZ3MiLCJwYXR0ZXJuTGV2ZWwwTGV2ZWxOdW1iZXJTdHJpbmciLCJwYXR0ZXJuIiwibGV2ZWwiLCJMRVZFTF9OVU1CRVJfRk9OVCIsInNpemUiLCJ3ZWlnaHQiLCJMRVZFTF9ERVNDUklQVElPTl9GT05UIiwiSW5mb0RpYWxvZyIsImNvbnN0cnVjdG9yIiwibGV2ZWxzIiwibGV2ZWxNYXhXaWR0aCIsInBhZFdpZHRoIiwiZm9ybWF0IiwiZm9udCIsIm1heFdpZHRoIiwid2lkdGgiLCJjcmVhdGVMZXZlbE5vZGUiLCJjaGlsZHJlbiIsIm51bWJlciIsImRlc2NyaXB0aW9uIiwieCIsImNvbnRlbnROb2RlIiwiYWxpZ24iLCJzcGFjaW5nIiwibWFwIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbmZvRGlhbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpYWxvZyB0aGF0IGRlc2NyaWJlcyBlYWNoIGdhbWUgbGV2ZWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgRGlhbG9nIGZyb20gJy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9EaWFsb2cuanMnO1xyXG5pbXBvcnQgbWFrZUFUZW4gZnJvbSAnLi4vLi4vLi4vbWFrZUFUZW4uanMnO1xyXG5pbXBvcnQgTWFrZUFUZW5TdHJpbmdzIGZyb20gJy4uLy4uLy4uL01ha2VBVGVuU3RyaW5ncy5qcyc7XHJcblxyXG4vLyBUZW1wbGF0ZSBmb3IgaW5zZXJ0aW5nIHRoZSBsZXZlbCBudW1iZXJcclxuY29uc3QgcGF0dGVybkxldmVsMExldmVsTnVtYmVyU3RyaW5nID0gTWFrZUFUZW5TdHJpbmdzLnBhdHRlcm4ubGV2ZWxbICcwbGV2ZWxOdW1iZXInIF07XHJcblxyXG5jb25zdCBMRVZFTF9OVU1CRVJfRk9OVCA9IG5ldyBQaGV0Rm9udCggeyBzaXplOiAxNCwgd2VpZ2h0OiAnYm9sZCcgfSApO1xyXG5jb25zdCBMRVZFTF9ERVNDUklQVElPTl9GT05UID0gbmV3IFBoZXRGb250KCAxNCApO1xyXG5cclxuY2xhc3MgSW5mb0RpYWxvZyBleHRlbmRzIERpYWxvZyB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtBcnJheS48TGV2ZWw+fSBsZXZlbHMgLSBBbGwgZ2FtZSBsZXZlbHNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbGV2ZWxzICkge1xyXG4gICAgY29uc3QgbGV2ZWxNYXhXaWR0aCA9IDEwMDtcclxuXHJcbiAgICBjb25zdCBwYWRXaWR0aCA9IG5ldyBUZXh0KCBTdHJpbmdVdGlscy5mb3JtYXQoIHBhdHRlcm5MZXZlbDBMZXZlbE51bWJlclN0cmluZywgJzEwJyApLCB7XHJcbiAgICAgIGZvbnQ6IExFVkVMX05VTUJFUl9GT05ULFxyXG4gICAgICBtYXhXaWR0aDogbGV2ZWxNYXhXaWR0aFxyXG4gICAgfSApLndpZHRoICsgMjA7XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlTGV2ZWxOb2RlKCBsZXZlbCApIHtcclxuICAgICAgcmV0dXJuIG5ldyBOb2RlKCB7XHJcbiAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgIG5ldyBUZXh0KCBTdHJpbmdVdGlscy5mb3JtYXQoIHBhdHRlcm5MZXZlbDBMZXZlbE51bWJlclN0cmluZywgYCR7bGV2ZWwubnVtYmVyfWAgKSwge1xyXG4gICAgICAgICAgICBmb250OiBMRVZFTF9OVU1CRVJfRk9OVCxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IGxldmVsTWF4V2lkdGhcclxuICAgICAgICAgIH0gKSxcclxuICAgICAgICAgIG5ldyBUZXh0KCBsZXZlbC5kZXNjcmlwdGlvbiwge1xyXG4gICAgICAgICAgICBmb250OiBMRVZFTF9ERVNDUklQVElPTl9GT05ULFxyXG4gICAgICAgICAgICB4OiBwYWRXaWR0aCxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IDUwMFxyXG4gICAgICAgICAgfSApXHJcbiAgICAgICAgXVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29udGVudE5vZGUgPSBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiAxNCxcclxuICAgICAgY2hpbGRyZW46IGxldmVscy5tYXAoIGNyZWF0ZUxldmVsTm9kZSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnROb2RlICk7XHJcbiAgfVxyXG59XHJcblxyXG5tYWtlQVRlbi5yZWdpc3RlciggJ0luZm9EaWFsb2cnLCBJbmZvRGlhbG9nICk7XHJcbmV4cG9ydCBkZWZhdWx0IEluZm9EaWFsb2c7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSxrREFBa0Q7QUFDMUUsT0FBT0MsUUFBUSxNQUFNLDRDQUE0QztBQUNqRSxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLHNDQUFzQztBQUN2RSxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFFBQVEsTUFBTSxzQkFBc0I7QUFDM0MsT0FBT0MsZUFBZSxNQUFNLDZCQUE2Qjs7QUFFekQ7QUFDQSxNQUFNQyw4QkFBOEIsR0FBR0QsZUFBZSxDQUFDRSxPQUFPLENBQUNDLEtBQUssQ0FBRSxjQUFjLENBQUU7QUFFdEYsTUFBTUMsaUJBQWlCLEdBQUcsSUFBSVYsUUFBUSxDQUFFO0VBQUVXLElBQUksRUFBRSxFQUFFO0VBQUVDLE1BQU0sRUFBRTtBQUFPLENBQUUsQ0FBQztBQUN0RSxNQUFNQyxzQkFBc0IsR0FBRyxJQUFJYixRQUFRLENBQUUsRUFBRyxDQUFDO0FBRWpELE1BQU1jLFVBQVUsU0FBU1YsTUFBTSxDQUFDO0VBQzlCO0FBQ0Y7QUFDQTtFQUNFVyxXQUFXQSxDQUFFQyxNQUFNLEVBQUc7SUFDcEIsTUFBTUMsYUFBYSxHQUFHLEdBQUc7SUFFekIsTUFBTUMsUUFBUSxHQUFHLElBQUloQixJQUFJLENBQUVILFdBQVcsQ0FBQ29CLE1BQU0sQ0FBRVosOEJBQThCLEVBQUUsSUFBSyxDQUFDLEVBQUU7TUFDckZhLElBQUksRUFBRVYsaUJBQWlCO01BQ3ZCVyxRQUFRLEVBQUVKO0lBQ1osQ0FBRSxDQUFDLENBQUNLLEtBQUssR0FBRyxFQUFFO0lBRWQsU0FBU0MsZUFBZUEsQ0FBRWQsS0FBSyxFQUFHO01BQ2hDLE9BQU8sSUFBSVIsSUFBSSxDQUFFO1FBQ2Z1QixRQUFRLEVBQUUsQ0FDUixJQUFJdEIsSUFBSSxDQUFFSCxXQUFXLENBQUNvQixNQUFNLENBQUVaLDhCQUE4QixFQUFHLEdBQUVFLEtBQUssQ0FBQ2dCLE1BQU8sRUFBRSxDQUFDLEVBQUU7VUFDakZMLElBQUksRUFBRVYsaUJBQWlCO1VBQ3ZCVyxRQUFRLEVBQUVKO1FBQ1osQ0FBRSxDQUFDLEVBQ0gsSUFBSWYsSUFBSSxDQUFFTyxLQUFLLENBQUNpQixXQUFXLEVBQUU7VUFDM0JOLElBQUksRUFBRVAsc0JBQXNCO1VBQzVCYyxDQUFDLEVBQUVULFFBQVE7VUFDWEcsUUFBUSxFQUFFO1FBQ1osQ0FBRSxDQUFDO01BRVAsQ0FBRSxDQUFDO0lBQ0w7SUFFQSxNQUFNTyxXQUFXLEdBQUcsSUFBSXpCLElBQUksQ0FBRTtNQUM1QjBCLEtBQUssRUFBRSxNQUFNO01BQ2JDLE9BQU8sRUFBRSxFQUFFO01BQ1hOLFFBQVEsRUFBRVIsTUFBTSxDQUFDZSxHQUFHLENBQUVSLGVBQWdCO0lBQ3hDLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRUssV0FBWSxDQUFDO0VBQ3RCO0FBQ0Y7QUFFQXZCLFFBQVEsQ0FBQzJCLFFBQVEsQ0FBRSxZQUFZLEVBQUVsQixVQUFXLENBQUM7QUFDN0MsZUFBZUEsVUFBVSJ9