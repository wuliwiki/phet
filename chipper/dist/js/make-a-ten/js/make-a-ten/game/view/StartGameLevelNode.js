// Copyright 2015-2022, University of Colorado Boulder

/**
 * Contains an arrangement of level selection buttons.
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import ScreenView from '../../../../../joist/js/ScreenView.js';
import { Node } from '../../../../../scenery/js/imports.js';
import LevelSelectionButton from '../../../../../vegas/js/LevelSelectionButton.js';
import ScoreDisplayNumberAndStar from '../../../../../vegas/js/ScoreDisplayNumberAndStar.js';
import makeATen from '../../../makeATen.js';

// Constants
const X_OFFSET = 170;
const Y_OFFSET = 160;
class StartGameLevelNode extends Node {
  /**
   * @param {MakeATenGameModel} model - Our model
   */
  constructor(model) {
    super();

    // @private {MakeATenGameModel}
    this.model = model;

    // Add the level buttons
    this.addLevelButton(model.levels[0], -1, -1);
    this.addLevelButton(model.levels[1], 0, -1);
    this.addLevelButton(model.levels[2], 1, -1);
    this.addLevelButton(model.levels[3], -1.5, 0);
    this.addLevelButton(model.levels[4], -0.5, 0);
    this.addLevelButton(model.levels[5], 0.5, 0);
    this.addLevelButton(model.levels[6], 1.5, 0);
    this.addLevelButton(model.levels[7], -1, 1);
    this.addLevelButton(model.levels[8], 0, 1);
    this.addLevelButton(model.levels[9], 1, 1);
  }

  /**
   * Adds a level button at a specified x/y offset (in relation to the center, in button offsets)
   * @private
   *
   * @param {Level} level
   * @param {number} xOffset - How many buttons to the right of the horizontal center should we be?
   * @param {number} yOffset - How many buttons to the bottom of the vertical center should we be?
   */
  addLevelButton(level, xOffset, yOffset) {
    const fireCallback = this.model.startLevel.bind(this.model, level);
    const center = ScreenView.DEFAULT_LAYOUT_BOUNDS.center.plus(new Vector2(xOffset * X_OFFSET, yOffset * Y_OFFSET));
    const button = new LevelSelectionButton(level.iconNode, level.scoreProperty, {
      listener: fireCallback,
      baseColor: level.color,
      createScoreDisplay: scoreProperty => new ScoreDisplayNumberAndStar(scoreProperty),
      soundPlayerIndex: level.number - 1
    });
    button.scale(0.9);
    button.center = center;
    this.addChild(button);
  }
}
makeATen.register('StartGameLevelNode', StartGameLevelNode);
export default StartGameLevelNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2NyZWVuVmlldyIsIk5vZGUiLCJMZXZlbFNlbGVjdGlvbkJ1dHRvbiIsIlNjb3JlRGlzcGxheU51bWJlckFuZFN0YXIiLCJtYWtlQVRlbiIsIlhfT0ZGU0VUIiwiWV9PRkZTRVQiLCJTdGFydEdhbWVMZXZlbE5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwiYWRkTGV2ZWxCdXR0b24iLCJsZXZlbHMiLCJsZXZlbCIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwiZmlyZUNhbGxiYWNrIiwic3RhcnRMZXZlbCIsImJpbmQiLCJjZW50ZXIiLCJERUZBVUxUX0xBWU9VVF9CT1VORFMiLCJwbHVzIiwiYnV0dG9uIiwiaWNvbk5vZGUiLCJzY29yZVByb3BlcnR5IiwibGlzdGVuZXIiLCJiYXNlQ29sb3IiLCJjb2xvciIsImNyZWF0ZVNjb3JlRGlzcGxheSIsInNvdW5kUGxheWVySW5kZXgiLCJudW1iZXIiLCJzY2FsZSIsImFkZENoaWxkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdGFydEdhbWVMZXZlbE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udGFpbnMgYW4gYXJyYW5nZW1lbnQgb2YgbGV2ZWwgc2VsZWN0aW9uIGJ1dHRvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWZcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgU2NyZWVuVmlldyBmcm9tICcuLi8uLi8uLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBMZXZlbFNlbGVjdGlvbkJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi8uLi92ZWdhcy9qcy9MZXZlbFNlbGVjdGlvbkJ1dHRvbi5qcyc7XHJcbmltcG9ydCBTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyIGZyb20gJy4uLy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL1Njb3JlRGlzcGxheU51bWJlckFuZFN0YXIuanMnO1xyXG5pbXBvcnQgbWFrZUFUZW4gZnJvbSAnLi4vLi4vLi4vbWFrZUFUZW4uanMnO1xyXG5cclxuLy8gQ29uc3RhbnRzXHJcbmNvbnN0IFhfT0ZGU0VUID0gMTcwO1xyXG5jb25zdCBZX09GRlNFVCA9IDE2MDtcclxuXHJcbmNsYXNzIFN0YXJ0R2FtZUxldmVsTm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TWFrZUFUZW5HYW1lTW9kZWx9IG1vZGVsIC0gT3VyIG1vZGVsXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7TWFrZUFUZW5HYW1lTW9kZWx9XHJcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBsZXZlbCBidXR0b25zXHJcbiAgICB0aGlzLmFkZExldmVsQnV0dG9uKCBtb2RlbC5sZXZlbHNbIDAgXSwgLTEsIC0xICk7XHJcbiAgICB0aGlzLmFkZExldmVsQnV0dG9uKCBtb2RlbC5sZXZlbHNbIDEgXSwgMCwgLTEgKTtcclxuICAgIHRoaXMuYWRkTGV2ZWxCdXR0b24oIG1vZGVsLmxldmVsc1sgMiBdLCAxLCAtMSApO1xyXG4gICAgdGhpcy5hZGRMZXZlbEJ1dHRvbiggbW9kZWwubGV2ZWxzWyAzIF0sIC0xLjUsIDAgKTtcclxuICAgIHRoaXMuYWRkTGV2ZWxCdXR0b24oIG1vZGVsLmxldmVsc1sgNCBdLCAtMC41LCAwICk7XHJcbiAgICB0aGlzLmFkZExldmVsQnV0dG9uKCBtb2RlbC5sZXZlbHNbIDUgXSwgMC41LCAwICk7XHJcbiAgICB0aGlzLmFkZExldmVsQnV0dG9uKCBtb2RlbC5sZXZlbHNbIDYgXSwgMS41LCAwICk7XHJcbiAgICB0aGlzLmFkZExldmVsQnV0dG9uKCBtb2RlbC5sZXZlbHNbIDcgXSwgLTEsIDEgKTtcclxuICAgIHRoaXMuYWRkTGV2ZWxCdXR0b24oIG1vZGVsLmxldmVsc1sgOCBdLCAwLCAxICk7XHJcbiAgICB0aGlzLmFkZExldmVsQnV0dG9uKCBtb2RlbC5sZXZlbHNbIDkgXSwgMSwgMSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhIGxldmVsIGJ1dHRvbiBhdCBhIHNwZWNpZmllZCB4L3kgb2Zmc2V0IChpbiByZWxhdGlvbiB0byB0aGUgY2VudGVyLCBpbiBidXR0b24gb2Zmc2V0cylcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtMZXZlbH0gbGV2ZWxcclxuICAgKiBAcGFyYW0ge251bWJlcn0geE9mZnNldCAtIEhvdyBtYW55IGJ1dHRvbnMgdG8gdGhlIHJpZ2h0IG9mIHRoZSBob3Jpem9udGFsIGNlbnRlciBzaG91bGQgd2UgYmU/XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlPZmZzZXQgLSBIb3cgbWFueSBidXR0b25zIHRvIHRoZSBib3R0b20gb2YgdGhlIHZlcnRpY2FsIGNlbnRlciBzaG91bGQgd2UgYmU/XHJcbiAgICovXHJcbiAgYWRkTGV2ZWxCdXR0b24oIGxldmVsLCB4T2Zmc2V0LCB5T2Zmc2V0ICkge1xyXG4gICAgY29uc3QgZmlyZUNhbGxiYWNrID0gdGhpcy5tb2RlbC5zdGFydExldmVsLmJpbmQoIHRoaXMubW9kZWwsIGxldmVsICk7XHJcbiAgICBjb25zdCBjZW50ZXIgPSBTY3JlZW5WaWV3LkRFRkFVTFRfTEFZT1VUX0JPVU5EUy5jZW50ZXIucGx1cyggbmV3IFZlY3RvcjIoIHhPZmZzZXQgKiBYX09GRlNFVCwgeU9mZnNldCAqIFlfT0ZGU0VUICkgKTtcclxuXHJcbiAgICBjb25zdCBidXR0b24gPSBuZXcgTGV2ZWxTZWxlY3Rpb25CdXR0b24oIGxldmVsLmljb25Ob2RlLCBsZXZlbC5zY29yZVByb3BlcnR5LCB7XHJcbiAgICAgIGxpc3RlbmVyOiBmaXJlQ2FsbGJhY2ssXHJcbiAgICAgIGJhc2VDb2xvcjogbGV2ZWwuY29sb3IsXHJcbiAgICAgIGNyZWF0ZVNjb3JlRGlzcGxheTogc2NvcmVQcm9wZXJ0eSA9PiBuZXcgU2NvcmVEaXNwbGF5TnVtYmVyQW5kU3Rhciggc2NvcmVQcm9wZXJ0eSApLFxyXG4gICAgICBzb3VuZFBsYXllckluZGV4OiBsZXZlbC5udW1iZXIgLSAxXHJcbiAgICB9ICk7XHJcbiAgICBidXR0b24uc2NhbGUoIDAuOSApO1xyXG4gICAgYnV0dG9uLmNlbnRlciA9IGNlbnRlcjtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGJ1dHRvbiApO1xyXG4gIH1cclxufVxyXG5cclxubWFrZUFUZW4ucmVnaXN0ZXIoICdTdGFydEdhbWVMZXZlbE5vZGUnLCBTdGFydEdhbWVMZXZlbE5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN0YXJ0R2FtZUxldmVsTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsT0FBT0MsVUFBVSxNQUFNLHVDQUF1QztBQUM5RCxTQUFTQyxJQUFJLFFBQVEsc0NBQXNDO0FBQzNELE9BQU9DLG9CQUFvQixNQUFNLGlEQUFpRDtBQUNsRixPQUFPQyx5QkFBeUIsTUFBTSxzREFBc0Q7QUFDNUYsT0FBT0MsUUFBUSxNQUFNLHNCQUFzQjs7QUFFM0M7QUFDQSxNQUFNQyxRQUFRLEdBQUcsR0FBRztBQUNwQixNQUFNQyxRQUFRLEdBQUcsR0FBRztBQUVwQixNQUFNQyxrQkFBa0IsU0FBU04sSUFBSSxDQUFDO0VBQ3BDO0FBQ0Y7QUFDQTtF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