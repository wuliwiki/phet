// Copyright 2015-2022, University of Colorado Boulder

/**
 * Button for showing "next" label and a arrow button.
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Sam Reid (PhET Interactive Simulations)
 */

import merge from '../../../../../phet-core/js/merge.js';
import ArrowShape from '../../../../../scenery-phet/js/ArrowShape.js';
import PhetColorScheme from '../../../../../scenery-phet/js/PhetColorScheme.js';
import PhetFont from '../../../../../scenery-phet/js/PhetFont.js';
import { HBox, Path, Text } from '../../../../../scenery/js/imports.js';
import RectangularPushButton from '../../../../../sun/js/buttons/RectangularPushButton.js';
import makeATen from '../../../makeATen.js';

// constants
const LABEL_FONT = new PhetFont({
  size: 20,
  weight: 'bold'
});
class NextArrowButton extends RectangularPushButton {
  /**
   * @param {string} buttonText
   * @param {Object} [options]
   */
  constructor(buttonText, options) {
    const arrowShape = new ArrowShape(0, 0, 28.5, 0, {
      tailWidth: 2,
      headWidth: 8,
      headHeight: 8
    });
    const labelArrowBox = new HBox({
      children: [new Text(buttonText, {
        font: LABEL_FONT,
        fill: 'black',
        maxWidth: 150
      }), new Path(arrowShape, {
        fill: 'black'
      })],
      spacing: 15
    });
    super(merge({
      baseColor: PhetColorScheme.BUTTON_YELLOW,
      xMargin: 12,
      yMargin: 10,
      content: labelArrowBox
    }, options));
  }
}
makeATen.register('NextArrowButton', NextArrowButton);
export default NextArrowButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFycm93U2hhcGUiLCJQaGV0Q29sb3JTY2hlbWUiLCJQaGV0Rm9udCIsIkhCb3giLCJQYXRoIiwiVGV4dCIsIlJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiIsIm1ha2VBVGVuIiwiTEFCRUxfRk9OVCIsInNpemUiLCJ3ZWlnaHQiLCJOZXh0QXJyb3dCdXR0b24iLCJjb25zdHJ1Y3RvciIsImJ1dHRvblRleHQiLCJvcHRpb25zIiwiYXJyb3dTaGFwZSIsInRhaWxXaWR0aCIsImhlYWRXaWR0aCIsImhlYWRIZWlnaHQiLCJsYWJlbEFycm93Qm94IiwiY2hpbGRyZW4iLCJmb250IiwiZmlsbCIsIm1heFdpZHRoIiwic3BhY2luZyIsImJhc2VDb2xvciIsIkJVVFRPTl9ZRUxMT1ciLCJ4TWFyZ2luIiwieU1hcmdpbiIsImNvbnRlbnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk5leHRBcnJvd0J1dHRvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCdXR0b24gZm9yIHNob3dpbmcgXCJuZXh0XCIgbGFiZWwgYW5kIGEgYXJyb3cgYnV0dG9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNoYXJmdWRlZW4gQXNocmFmXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IEFycm93U2hhcGUgZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL0Fycm93U2hhcGUuanMnO1xyXG5pbXBvcnQgUGhldENvbG9yU2NoZW1lIGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Q29sb3JTY2hlbWUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgSEJveCwgUGF0aCwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclB1c2hCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IG1ha2VBVGVuIGZyb20gJy4uLy4uLy4uL21ha2VBVGVuLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBMQUJFTF9GT05UID0gbmV3IFBoZXRGb250KCB7IHNpemU6IDIwLCB3ZWlnaHQ6ICdib2xkJyB9ICk7XHJcblxyXG5jbGFzcyBOZXh0QXJyb3dCdXR0b24gZXh0ZW5kcyBSZWN0YW5ndWxhclB1c2hCdXR0b24ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnV0dG9uVGV4dFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYnV0dG9uVGV4dCwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBhcnJvd1NoYXBlID0gbmV3IEFycm93U2hhcGUoIDAsIDAsIDI4LjUsIDAsIHtcclxuICAgICAgdGFpbFdpZHRoOiAyLFxyXG4gICAgICBoZWFkV2lkdGg6IDgsXHJcbiAgICAgIGhlYWRIZWlnaHQ6IDhcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsYWJlbEFycm93Qm94ID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgVGV4dCggYnV0dG9uVGV4dCwgeyBmb250OiBMQUJFTF9GT05ULCBmaWxsOiAnYmxhY2snLCBtYXhXaWR0aDogMTUwIH0gKSxcclxuICAgICAgICBuZXcgUGF0aCggYXJyb3dTaGFwZSwgeyBmaWxsOiAnYmxhY2snIH0gKVxyXG4gICAgICBdLFxyXG4gICAgICBzcGFjaW5nOiAxNVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBtZXJnZSgge1xyXG4gICAgICBiYXNlQ29sb3I6IFBoZXRDb2xvclNjaGVtZS5CVVRUT05fWUVMTE9XLFxyXG4gICAgICB4TWFyZ2luOiAxMixcclxuICAgICAgeU1hcmdpbjogMTAsXHJcbiAgICAgIGNvbnRlbnQ6IGxhYmVsQXJyb3dCb3hcclxuICAgIH0sIG9wdGlvbnMgKSApO1xyXG4gIH1cclxufVxyXG5cclxubWFrZUFUZW4ucmVnaXN0ZXIoICdOZXh0QXJyb3dCdXR0b24nLCBOZXh0QXJyb3dCdXR0b24gKTtcclxuZXhwb3J0IGRlZmF1bHQgTmV4dEFycm93QnV0dG9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxPQUFPQyxVQUFVLE1BQU0sOENBQThDO0FBQ3JFLE9BQU9DLGVBQWUsTUFBTSxtREFBbUQ7QUFDL0UsT0FBT0MsUUFBUSxNQUFNLDRDQUE0QztBQUNqRSxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLHNDQUFzQztBQUN2RSxPQUFPQyxxQkFBcUIsTUFBTSx3REFBd0Q7QUFDMUYsT0FBT0MsUUFBUSxNQUFNLHNCQUFzQjs7QUFFM0M7QUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSU4sUUFBUSxDQUFFO0VBQUVPLElBQUksRUFBRSxFQUFFO0VBQUVDLE1BQU0sRUFBRTtBQUFPLENBQUUsQ0FBQztBQUUvRCxNQUFNQyxlQUFlLFNBQVNMLHFCQUFxQixDQUFDO0VBRWxEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLFVBQVUsRUFBRUMsT0FBTyxFQUFHO0lBRWpDLE1BQU1DLFVBQVUsR0FBRyxJQUFJZixVQUFVLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO01BQ2hEZ0IsU0FBUyxFQUFFLENBQUM7TUFDWkMsU0FBUyxFQUFFLENBQUM7TUFDWkMsVUFBVSxFQUFFO0lBQ2QsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsYUFBYSxHQUFHLElBQUloQixJQUFJLENBQUU7TUFDOUJpQixRQUFRLEVBQUUsQ0FDUixJQUFJZixJQUFJLENBQUVRLFVBQVUsRUFBRTtRQUFFUSxJQUFJLEVBQUViLFVBQVU7UUFBRWMsSUFBSSxFQUFFLE9BQU87UUFBRUMsUUFBUSxFQUFFO01BQUksQ0FBRSxDQUFDLEVBQzFFLElBQUluQixJQUFJLENBQUVXLFVBQVUsRUFBRTtRQUFFTyxJQUFJLEVBQUU7TUFBUSxDQUFFLENBQUMsQ0FDMUM7TUFDREUsT0FBTyxFQUFFO0lBQ1gsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFekIsS0FBSyxDQUFFO01BQ1owQixTQUFTLEVBQUV4QixlQUFlLENBQUN5QixhQUFhO01BQ3hDQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxPQUFPLEVBQUVWO0lBQ1gsQ0FBQyxFQUFFTCxPQUFRLENBQUUsQ0FBQztFQUNoQjtBQUNGO0FBRUFQLFFBQVEsQ0FBQ3VCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRW5CLGVBQWdCLENBQUM7QUFDdkQsZUFBZUEsZUFBZSJ9