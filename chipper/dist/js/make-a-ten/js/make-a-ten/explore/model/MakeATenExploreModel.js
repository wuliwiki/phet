// Copyright 2015-2022, University of Colorado Boulder

/**
 * Model for the Explore screen in Make a Ten. Includes the total, cues, and adding in initial numbers.
 *
 * @author Sharfudeen Ashraf
 */

import CountingCommonModel from '../../../../../counting-common/js/common/model/CountingCommonModel.js';
import makeATen from '../../../makeATen.js';
import MakeATenConstants from '../../common/MakeATenConstants.js';
import MakeATenQueryParameters from '../../common/MakeATenQueryParameters.js';
import Cue from './Cue.js';
class MakeATenExploreModel extends CountingCommonModel {
  constructor() {
    super(MakeATenConstants.MAX_SUM);

    // @public {Cue} - Visually indicates numbers can be split (pulled apart)
    this.splitCue = new Cue();

    // @private {Function} - To be called when we need to recalculate the total
    const calculateTotalListener = this.calculateTotal.bind(this);
    this.countingObjects.lengthProperty.link(calculateTotalListener);

    // Listen to number changes of counting objects
    this.countingObjects.addItemAddedListener(countingObject => {
      countingObject.numberValueProperty.link(calculateTotalListener);
    });
    this.countingObjects.addItemRemovedListener(countingObject => {
      countingObject.numberValueProperty.unlink(calculateTotalListener);
    });
    this.addInitialNumbers();
  }

  /**
   * Steps forward in time
   * @public
   *
   * @param {number} dt
   */
  step(dt) {
    // Cap large dt values, which can occur when the tab containing
    // the sim had been hidden and then re-shown
    dt = Math.min(0.1, dt);

    // Animate fading if necessary
    this.splitCue.step(dt);
  }

  /**
   * Adds any required initial numbers.
   * @private
   */
  addInitialNumbers() {
    // Check for an array of numbers, e.g. ?exploreNumbers=10,51, where 0 indicates none
    this.addMultipleNumbers(MakeATenQueryParameters.exploreNumbers);

    // Attach cues to any available numbers
    this.countingObjects.forEach(countingObject => {
      if (countingObject.numberValueProperty.value > 1) {
        this.splitCue.attachToNumber(countingObject);
      }
    });
  }

  /**
   * Resets values to their original state
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.splitCue.reset();
    this.addInitialNumbers();
  }
}
makeATen.register('MakeATenExploreModel', MakeATenExploreModel);
export default MakeATenExploreModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb3VudGluZ0NvbW1vbk1vZGVsIiwibWFrZUFUZW4iLCJNYWtlQVRlbkNvbnN0YW50cyIsIk1ha2VBVGVuUXVlcnlQYXJhbWV0ZXJzIiwiQ3VlIiwiTWFrZUFUZW5FeHBsb3JlTW9kZWwiLCJjb25zdHJ1Y3RvciIsIk1BWF9TVU0iLCJzcGxpdEN1ZSIsImNhbGN1bGF0ZVRvdGFsTGlzdGVuZXIiLCJjYWxjdWxhdGVUb3RhbCIsImJpbmQiLCJjb3VudGluZ09iamVjdHMiLCJsZW5ndGhQcm9wZXJ0eSIsImxpbmsiLCJhZGRJdGVtQWRkZWRMaXN0ZW5lciIsImNvdW50aW5nT2JqZWN0IiwibnVtYmVyVmFsdWVQcm9wZXJ0eSIsImFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIiLCJ1bmxpbmsiLCJhZGRJbml0aWFsTnVtYmVycyIsInN0ZXAiLCJkdCIsIk1hdGgiLCJtaW4iLCJhZGRNdWx0aXBsZU51bWJlcnMiLCJleHBsb3JlTnVtYmVycyIsImZvckVhY2giLCJ2YWx1ZSIsImF0dGFjaFRvTnVtYmVyIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1ha2VBVGVuRXhwbG9yZU1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciB0aGUgRXhwbG9yZSBzY3JlZW4gaW4gTWFrZSBhIFRlbi4gSW5jbHVkZXMgdGhlIHRvdGFsLCBjdWVzLCBhbmQgYWRkaW5nIGluIGluaXRpYWwgbnVtYmVycy5cclxuICpcclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZlxyXG4gKi9cclxuXHJcbmltcG9ydCBDb3VudGluZ0NvbW1vbk1vZGVsIGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvdW50aW5nLWNvbW1vbi9qcy9jb21tb24vbW9kZWwvQ291bnRpbmdDb21tb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBtYWtlQVRlbiBmcm9tICcuLi8uLi8uLi9tYWtlQVRlbi5qcyc7XHJcbmltcG9ydCBNYWtlQVRlbkNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vTWFrZUFUZW5Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgTWFrZUFUZW5RdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vLi4vY29tbW9uL01ha2VBVGVuUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IEN1ZSBmcm9tICcuL0N1ZS5qcyc7XHJcblxyXG5jbGFzcyBNYWtlQVRlbkV4cGxvcmVNb2RlbCBleHRlbmRzIENvdW50aW5nQ29tbW9uTW9kZWwge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIHN1cGVyKCBNYWtlQVRlbkNvbnN0YW50cy5NQVhfU1VNICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7Q3VlfSAtIFZpc3VhbGx5IGluZGljYXRlcyBudW1iZXJzIGNhbiBiZSBzcGxpdCAocHVsbGVkIGFwYXJ0KVxyXG4gICAgdGhpcy5zcGxpdEN1ZSA9IG5ldyBDdWUoKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7RnVuY3Rpb259IC0gVG8gYmUgY2FsbGVkIHdoZW4gd2UgbmVlZCB0byByZWNhbGN1bGF0ZSB0aGUgdG90YWxcclxuICAgIGNvbnN0IGNhbGN1bGF0ZVRvdGFsTGlzdGVuZXIgPSB0aGlzLmNhbGN1bGF0ZVRvdGFsLmJpbmQoIHRoaXMgKTtcclxuXHJcbiAgICB0aGlzLmNvdW50aW5nT2JqZWN0cy5sZW5ndGhQcm9wZXJ0eS5saW5rKCBjYWxjdWxhdGVUb3RhbExpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gTGlzdGVuIHRvIG51bWJlciBjaGFuZ2VzIG9mIGNvdW50aW5nIG9iamVjdHNcclxuICAgIHRoaXMuY291bnRpbmdPYmplY3RzLmFkZEl0ZW1BZGRlZExpc3RlbmVyKCBjb3VudGluZ09iamVjdCA9PiB7XHJcbiAgICAgIGNvdW50aW5nT2JqZWN0Lm51bWJlclZhbHVlUHJvcGVydHkubGluayggY2FsY3VsYXRlVG90YWxMaXN0ZW5lciApO1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5jb3VudGluZ09iamVjdHMuYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciggY291bnRpbmdPYmplY3QgPT4ge1xyXG4gICAgICBjb3VudGluZ09iamVjdC5udW1iZXJWYWx1ZVByb3BlcnR5LnVubGluayggY2FsY3VsYXRlVG90YWxMaXN0ZW5lciApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYWRkSW5pdGlhbE51bWJlcnMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0ZXBzIGZvcndhcmQgaW4gdGltZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdFxyXG4gICAqL1xyXG4gIHN0ZXAoIGR0ICkge1xyXG5cclxuICAgIC8vIENhcCBsYXJnZSBkdCB2YWx1ZXMsIHdoaWNoIGNhbiBvY2N1ciB3aGVuIHRoZSB0YWIgY29udGFpbmluZ1xyXG4gICAgLy8gdGhlIHNpbSBoYWQgYmVlbiBoaWRkZW4gYW5kIHRoZW4gcmUtc2hvd25cclxuICAgIGR0ID0gTWF0aC5taW4oIDAuMSwgZHQgKTtcclxuXHJcbiAgICAvLyBBbmltYXRlIGZhZGluZyBpZiBuZWNlc3NhcnlcclxuICAgIHRoaXMuc3BsaXRDdWUuc3RlcCggZHQgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYW55IHJlcXVpcmVkIGluaXRpYWwgbnVtYmVycy5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGFkZEluaXRpYWxOdW1iZXJzKCkge1xyXG4gICAgLy8gQ2hlY2sgZm9yIGFuIGFycmF5IG9mIG51bWJlcnMsIGUuZy4gP2V4cGxvcmVOdW1iZXJzPTEwLDUxLCB3aGVyZSAwIGluZGljYXRlcyBub25lXHJcbiAgICB0aGlzLmFkZE11bHRpcGxlTnVtYmVycyggTWFrZUFUZW5RdWVyeVBhcmFtZXRlcnMuZXhwbG9yZU51bWJlcnMgKTtcclxuXHJcbiAgICAvLyBBdHRhY2ggY3VlcyB0byBhbnkgYXZhaWxhYmxlIG51bWJlcnNcclxuICAgIHRoaXMuY291bnRpbmdPYmplY3RzLmZvckVhY2goIGNvdW50aW5nT2JqZWN0ID0+IHtcclxuICAgICAgaWYgKCBjb3VudGluZ09iamVjdC5udW1iZXJWYWx1ZVByb3BlcnR5LnZhbHVlID4gMSApIHtcclxuICAgICAgICB0aGlzLnNwbGl0Q3VlLmF0dGFjaFRvTnVtYmVyKCBjb3VudGluZ09iamVjdCApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldHMgdmFsdWVzIHRvIHRoZWlyIG9yaWdpbmFsIHN0YXRlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuXHJcbiAgICB0aGlzLnNwbGl0Q3VlLnJlc2V0KCk7XHJcbiAgICB0aGlzLmFkZEluaXRpYWxOdW1iZXJzKCk7XHJcbiAgfVxyXG59XHJcblxyXG5tYWtlQVRlbi5yZWdpc3RlciggJ01ha2VBVGVuRXhwbG9yZU1vZGVsJywgTWFrZUFUZW5FeHBsb3JlTW9kZWwgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1ha2VBVGVuRXhwbG9yZU1vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxtQkFBbUIsTUFBTSx1RUFBdUU7QUFDdkcsT0FBT0MsUUFBUSxNQUFNLHNCQUFzQjtBQUMzQyxPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFDakUsT0FBT0MsdUJBQXVCLE1BQU0seUNBQXlDO0FBQzdFLE9BQU9DLEdBQUcsTUFBTSxVQUFVO0FBRTFCLE1BQU1DLG9CQUFvQixTQUFTTCxtQkFBbUIsQ0FBQztFQUNyRE0sV0FBV0EsQ0FBQSxFQUFHO0lBRVosS0FBSyxDQUFFSixpQkFBaUIsQ0FBQ0ssT0FBUSxDQUFDOztJQUVsQztJQUNBLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlKLEdBQUcsQ0FBQyxDQUFDOztJQUV6QjtJQUNBLE1BQU1LLHNCQUFzQixHQUFHLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUUsSUFBSyxDQUFDO0lBRS9ELElBQUksQ0FBQ0MsZUFBZSxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBRUwsc0JBQXVCLENBQUM7O0lBRWxFO0lBQ0EsSUFBSSxDQUFDRyxlQUFlLENBQUNHLG9CQUFvQixDQUFFQyxjQUFjLElBQUk7TUFDM0RBLGNBQWMsQ0FBQ0MsbUJBQW1CLENBQUNILElBQUksQ0FBRUwsc0JBQXVCLENBQUM7SUFDbkUsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDRyxlQUFlLENBQUNNLHNCQUFzQixDQUFFRixjQUFjLElBQUk7TUFDN0RBLGNBQWMsQ0FBQ0MsbUJBQW1CLENBQUNFLE1BQU0sQ0FBRVYsc0JBQXVCLENBQUM7SUFDckUsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDVyxpQkFBaUIsQ0FBQyxDQUFDO0VBQzFCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxJQUFJQSxDQUFFQyxFQUFFLEVBQUc7SUFFVDtJQUNBO0lBQ0FBLEVBQUUsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUUsR0FBRyxFQUFFRixFQUFHLENBQUM7O0lBRXhCO0lBQ0EsSUFBSSxDQUFDZCxRQUFRLENBQUNhLElBQUksQ0FBRUMsRUFBRyxDQUFDO0VBQzFCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VGLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCO0lBQ0EsSUFBSSxDQUFDSyxrQkFBa0IsQ0FBRXRCLHVCQUF1QixDQUFDdUIsY0FBZSxDQUFDOztJQUVqRTtJQUNBLElBQUksQ0FBQ2QsZUFBZSxDQUFDZSxPQUFPLENBQUVYLGNBQWMsSUFBSTtNQUM5QyxJQUFLQSxjQUFjLENBQUNDLG1CQUFtQixDQUFDVyxLQUFLLEdBQUcsQ0FBQyxFQUFHO1FBQ2xELElBQUksQ0FBQ3BCLFFBQVEsQ0FBQ3FCLGNBQWMsQ0FBRWIsY0FBZSxDQUFDO01BQ2hEO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFYyxLQUFLQSxDQUFBLEVBQUc7SUFDTixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBRWIsSUFBSSxDQUFDdEIsUUFBUSxDQUFDc0IsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxDQUFDVixpQkFBaUIsQ0FBQyxDQUFDO0VBQzFCO0FBQ0Y7QUFFQW5CLFFBQVEsQ0FBQzhCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRTFCLG9CQUFxQixDQUFDO0FBRWpFLGVBQWVBLG9CQUFvQiJ9