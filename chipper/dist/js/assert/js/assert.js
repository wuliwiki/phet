// Copyright 2013-2022, University of Colorado Boulder

/*
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

(function () {
  window.assertions = window.assertions || {};
  window.assertions.assertFunction = window.assertions.assertFunction || function (predicate, ...messages) {
    if (!predicate) {
      // don't treat falsey as a message.
      messages = messages.filter(message => !!messages);

      // Log the stack trace to IE.  Just creating an Error is not enough, it has to be caught to get a stack.
      if (window.navigator && window.navigator.appName === 'Microsoft Internet Explorer') {
        messages.push(`stack=\n${new Error().stack}`);
      }

      // Add "Assertion Failed" to the front of the message list
      const assertPrefix = messages.length > 0 ? 'Assertion failed: ' : 'Assertion failed';
      console && console.log && console.log(assertPrefix, ...messages);
      if (window.phet && phet.chipper && phet.chipper.queryParameters && phet.chipper.queryParameters.debugger) {
        debugger; // eslint-disable-line no-debugger
      }

      throw new Error(assertPrefix + messages.join('\n '));
    }
  };
  window.assert = window.assert || null;
  window.assertSlow = window.assertSlow || null;
  window.assertions.enableAssert = function () {
    window.assert = window.assertions.assertFunction;
    window.console && window.console.log && window.console.log('enabling assert');
  };
  window.assertions.disableAssert = function () {
    window.assert = null;
    window.console && window.console.log && window.console.log('disabling assert');
  };
  window.assertions.enableAssertSlow = function () {
    window.assertSlow = window.assertions.assertFunction;
    window.console && window.console.log && window.console.log('enabling assertSlow');
  };
  window.assertions.disableAssertSlow = function () {
    window.assertSlow = null;
    window.console && window.console.log && window.console.log('disabling assertSlow');
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3aW5kb3ciLCJhc3NlcnRpb25zIiwiYXNzZXJ0RnVuY3Rpb24iLCJwcmVkaWNhdGUiLCJtZXNzYWdlcyIsImZpbHRlciIsIm1lc3NhZ2UiLCJuYXZpZ2F0b3IiLCJhcHBOYW1lIiwicHVzaCIsIkVycm9yIiwic3RhY2siLCJhc3NlcnRQcmVmaXgiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJkZWJ1Z2dlciIsImpvaW4iLCJhc3NlcnQiLCJhc3NlcnRTbG93IiwiZW5hYmxlQXNzZXJ0IiwiZGlzYWJsZUFzc2VydCIsImVuYWJsZUFzc2VydFNsb3ciLCJkaXNhYmxlQXNzZXJ0U2xvdyJdLCJzb3VyY2VzIjpbImFzc2VydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCkge1xyXG5cclxuXHJcbiAgd2luZG93LmFzc2VydGlvbnMgPSB3aW5kb3cuYXNzZXJ0aW9ucyB8fCB7fTtcclxuICB3aW5kb3cuYXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbiA9IHdpbmRvdy5hc3NlcnRpb25zLmFzc2VydEZ1bmN0aW9uIHx8IGZ1bmN0aW9uKCBwcmVkaWNhdGUsIC4uLm1lc3NhZ2VzICkge1xyXG4gICAgaWYgKCAhcHJlZGljYXRlICkge1xyXG5cclxuICAgICAgLy8gZG9uJ3QgdHJlYXQgZmFsc2V5IGFzIGEgbWVzc2FnZS5cclxuICAgICAgbWVzc2FnZXMgPSBtZXNzYWdlcy5maWx0ZXIoIG1lc3NhZ2UgPT4gISFtZXNzYWdlcyApO1xyXG5cclxuICAgICAgLy8gTG9nIHRoZSBzdGFjayB0cmFjZSB0byBJRS4gIEp1c3QgY3JlYXRpbmcgYW4gRXJyb3IgaXMgbm90IGVub3VnaCwgaXQgaGFzIHRvIGJlIGNhdWdodCB0byBnZXQgYSBzdGFjay5cclxuICAgICAgaWYgKCB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IuYXBwTmFtZSA9PT0gJ01pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlcicgKSB7XHJcbiAgICAgICAgbWVzc2FnZXMucHVzaCggYHN0YWNrPVxcbiR7bmV3IEVycm9yKCkuc3RhY2t9YCApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBZGQgXCJBc3NlcnRpb24gRmFpbGVkXCIgdG8gdGhlIGZyb250IG9mIHRoZSBtZXNzYWdlIGxpc3RcclxuICAgICAgY29uc3QgYXNzZXJ0UHJlZml4ID0gbWVzc2FnZXMubGVuZ3RoID4gMCA/ICdBc3NlcnRpb24gZmFpbGVkOiAnIDogJ0Fzc2VydGlvbiBmYWlsZWQnO1xyXG4gICAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nICYmIGNvbnNvbGUubG9nKCBhc3NlcnRQcmVmaXgsIC4uLm1lc3NhZ2VzICk7XHJcbiAgICAgIGlmICggd2luZG93LnBoZXQgJiYgcGhldC5jaGlwcGVyICYmIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMgJiYgcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5kZWJ1Z2dlciApIHtcclxuICAgICAgICBkZWJ1Z2dlcjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1kZWJ1Z2dlclxyXG4gICAgICB9XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggYXNzZXJ0UHJlZml4ICsgbWVzc2FnZXMuam9pbiggJ1xcbiAnICkgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB3aW5kb3cuYXNzZXJ0ID0gd2luZG93LmFzc2VydCB8fCBudWxsO1xyXG4gIHdpbmRvdy5hc3NlcnRTbG93ID0gd2luZG93LmFzc2VydFNsb3cgfHwgbnVsbDtcclxuXHJcbiAgd2luZG93LmFzc2VydGlvbnMuZW5hYmxlQXNzZXJ0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB3aW5kb3cuYXNzZXJ0ID0gd2luZG93LmFzc2VydGlvbnMuYXNzZXJ0RnVuY3Rpb247XHJcbiAgICB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS5sb2cgJiYgd2luZG93LmNvbnNvbGUubG9nKCAnZW5hYmxpbmcgYXNzZXJ0JyApO1xyXG4gIH07XHJcbiAgd2luZG93LmFzc2VydGlvbnMuZGlzYWJsZUFzc2VydCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgd2luZG93LmFzc2VydCA9IG51bGw7XHJcbiAgICB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS5sb2cgJiYgd2luZG93LmNvbnNvbGUubG9nKCAnZGlzYWJsaW5nIGFzc2VydCcgKTtcclxuICB9O1xyXG5cclxuICB3aW5kb3cuYXNzZXJ0aW9ucy5lbmFibGVBc3NlcnRTbG93ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB3aW5kb3cuYXNzZXJ0U2xvdyA9IHdpbmRvdy5hc3NlcnRpb25zLmFzc2VydEZ1bmN0aW9uO1xyXG4gICAgd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nICYmIHdpbmRvdy5jb25zb2xlLmxvZyggJ2VuYWJsaW5nIGFzc2VydFNsb3cnICk7XHJcbiAgfTtcclxuICB3aW5kb3cuYXNzZXJ0aW9ucy5kaXNhYmxlQXNzZXJ0U2xvdyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgd2luZG93LmFzc2VydFNsb3cgPSBudWxsO1xyXG4gICAgd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nICYmIHdpbmRvdy5jb25zb2xlLmxvZyggJ2Rpc2FibGluZyBhc3NlcnRTbG93JyApO1xyXG4gIH07XHJcbn0gKSgpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxDQUFFLFlBQVc7RUFHWEEsTUFBTSxDQUFDQyxVQUFVLEdBQUdELE1BQU0sQ0FBQ0MsVUFBVSxJQUFJLENBQUMsQ0FBQztFQUMzQ0QsTUFBTSxDQUFDQyxVQUFVLENBQUNDLGNBQWMsR0FB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