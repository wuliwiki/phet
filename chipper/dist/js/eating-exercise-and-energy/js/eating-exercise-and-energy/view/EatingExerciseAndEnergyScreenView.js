// Copyright 2020-2021, University of Colorado Boulder

/**
 * @author Sam Reid (PhET Interactive Simulations)
 */

import ScreenView from '../../../../joist/js/ScreenView.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import EatingExerciseAndEnergyConstants from '../../common/EatingExerciseAndEnergyConstants.js';
import eatingExerciseAndEnergy from '../../eatingExerciseAndEnergy.js';
import EatingExerciseAndEnergyModel from '../model/EatingExerciseAndEnergyModel.js';
class EatingExerciseAndEnergyScreenView extends ScreenView {
  /**
   * @param {EatingExerciseAndEnergyModel} model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    assert && assert(model instanceof EatingExerciseAndEnergyModel, 'invalid model');
    assert && assert(tandem instanceof Tandem, 'invalid tandem');
    super({
      tandem: tandem
    });
    const resetAllButton = new ResetAllButton({
      listener: () => {
        this.interruptSubtreeInput(); // cancel interactions that may be in progress
        model.reset();
        this.reset();
      },
      right: this.layoutBounds.maxX - EatingExerciseAndEnergyConstants.SCREEN_VIEW_X_MARGIN,
      bottom: this.layoutBounds.maxY - EatingExerciseAndEnergyConstants.SCREEN_VIEW_Y_MARGIN,
      tandem: tandem.createTandem('resetAllButton')
    });
    this.addChild(resetAllButton);
  }

  /**
   * Resets the view.
   * @public
   */
  reset() {
    //TODO
  }

  /**
   * Steps the view.
   * @param {number} dt - time step, in seconds
   * @public
   */
  step(dt) {
    //TODO
  }
}
eatingExerciseAndEnergy.register('EatingExerciseAndEnergyScreenView', EatingExerciseAndEnergyScreenView);
export default EatingExerciseAndEnergyScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW5WaWV3IiwiUmVzZXRBbGxCdXR0b24iLCJUYW5kZW0iLCJFYXRpbmdFeGVyY2lzZUFuZEVuZXJneUNvbnN0YW50cyIsImVhdGluZ0V4ZXJjaXNlQW5kRW5lcmd5IiwiRWF0aW5nRXhlcmNpc2VBbmRFbmVyZ3lNb2RlbCIsIkVhdGluZ0V4ZXJjaXNlQW5kRW5lcmd5U2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJhc3NlcnQiLCJyZXNldEFsbEJ1dHRvbiIsImxpc3RlbmVyIiwiaW50ZXJydXB0U3VidHJlZUlucHV0IiwicmVzZXQiLCJyaWdodCIsImxheW91dEJvdW5kcyIsIm1heFgiLCJTQ1JFRU5fVklFV19YX01BUkdJTiIsImJvdHRvbSIsIm1heFkiLCJTQ1JFRU5fVklFV19ZX01BUkdJTiIsImNyZWF0ZVRhbmRlbSIsImFkZENoaWxkIiwic3RlcCIsImR0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFYXRpbmdFeGVyY2lzZUFuZEVuZXJneVNjcmVlblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuVmlldyBmcm9tICcuLi8uLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFJlc2V0QWxsQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9idXR0b25zL1Jlc2V0QWxsQnV0dG9uLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEVhdGluZ0V4ZXJjaXNlQW5kRW5lcmd5Q29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9FYXRpbmdFeGVyY2lzZUFuZEVuZXJneUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBlYXRpbmdFeGVyY2lzZUFuZEVuZXJneSBmcm9tICcuLi8uLi9lYXRpbmdFeGVyY2lzZUFuZEVuZXJneS5qcyc7XHJcbmltcG9ydCBFYXRpbmdFeGVyY2lzZUFuZEVuZXJneU1vZGVsIGZyb20gJy4uL21vZGVsL0VhdGluZ0V4ZXJjaXNlQW5kRW5lcmd5TW9kZWwuanMnO1xyXG5cclxuY2xhc3MgRWF0aW5nRXhlcmNpc2VBbmRFbmVyZ3lTY3JlZW5WaWV3IGV4dGVuZHMgU2NyZWVuVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RWF0aW5nRXhlcmNpc2VBbmRFbmVyZ3lNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCB0YW5kZW0gKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtb2RlbCBpbnN0YW5jZW9mIEVhdGluZ0V4ZXJjaXNlQW5kRW5lcmd5TW9kZWwsICdpbnZhbGlkIG1vZGVsJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGFuZGVtIGluc3RhbmNlb2YgVGFuZGVtLCAnaW52YWxpZCB0YW5kZW0nICk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCByZXNldEFsbEJ1dHRvbiA9IG5ldyBSZXNldEFsbEJ1dHRvbigge1xyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaW50ZXJydXB0U3VidHJlZUlucHV0KCk7IC8vIGNhbmNlbCBpbnRlcmFjdGlvbnMgdGhhdCBtYXkgYmUgaW4gcHJvZ3Jlc3NcclxuICAgICAgICBtb2RlbC5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgICAgfSxcclxuICAgICAgcmlnaHQ6IHRoaXMubGF5b3V0Qm91bmRzLm1heFggLSBFYXRpbmdFeGVyY2lzZUFuZEVuZXJneUNvbnN0YW50cy5TQ1JFRU5fVklFV19YX01BUkdJTixcclxuICAgICAgYm90dG9tOiB0aGlzLmxheW91dEJvdW5kcy5tYXhZIC0gRWF0aW5nRXhlcmNpc2VBbmRFbmVyZ3lDb25zdGFudHMuU0NSRUVOX1ZJRVdfWV9NQVJHSU4sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Jlc2V0QWxsQnV0dG9uJyApXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCByZXNldEFsbEJ1dHRvbiApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoZSB2aWV3LlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIC8vVE9ET1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcHMgdGhlIHZpZXcuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR0IC0gdGltZSBzdGVwLCBpbiBzZWNvbmRzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0ZXAoIGR0ICkge1xyXG4gICAgLy9UT0RPXHJcbiAgfVxyXG59XHJcblxyXG5lYXRpbmdFeGVyY2lzZUFuZEVuZXJneS5yZWdpc3RlciggJ0VhdGluZ0V4ZXJjaXNlQW5kRW5lcmd5U2NyZWVuVmlldycsIEVhdGluZ0V4ZXJjaXNlQW5kRW5lcmd5U2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBFYXRpbmdFeGVyY2lzZUFuZEVuZXJneVNjcmVlblZpZXc7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLG9DQUFvQztBQUMzRCxPQUFPQyxjQUFjLE1BQU0sdURBQXVEO0FBQ2xGLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsZ0NBQWdDLE1BQU0sa0RBQWtEO0FBQy9GLE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUN0RSxPQUFPQyw0QkFBNEIsTUFBTSwwQ0FBMEM7QUFFbkYsTUFBTUMsaUNBQWlDLFNBQVNOLFVBQVUsQ0FBQztFQUV6RDtBQUNGO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRztJQUMzQkMsTUFBTSxJQUFJQSxNQUFNLENBQUVGLEtBQUssWUFBWUgsNEJBQTRCLEVBQUUsZUFBZ0IsQ0FBQztJQUNsRkssTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sWUFBWVAsTUFBTSxFQUFFLGdCQUFpQixDQUFDO0lBRTlELEtBQUssQ0FBRTtNQUNMTyxNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDO0lBRUgsTUFBTUUsY0FBYyxHQUFHLElBQUlWLGNBQWMsQ0FBRTtNQUN6Q1csUUFBUSxFQUFFQSxDQUFBLEtBQU07UUFDZCxJQUFJLENBQUNDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCTCxLQUFLLENBQUNNLEtBQUssQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDQSxLQUFLLENBQUMsQ0FBQztNQUNkLENBQUM7TUFDREMsS0FBSyxFQUFFLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxJQUFJLEdBQUdkLGdDQUFnQyxDQUFDZSxvQkFBb0I7TUFDckZDLE1BQU0sRUFBRSxJQUFJLENBQUNILFlBQVksQ0FBQ0ksSUFBSSxHQUFHakIsZ0NBQWdDLENBQUNrQixvQkFBb0I7TUFDdEZaLE1BQU0sRUFBRUEsTUFBTSxDQUFDYSxZQUFZLENBQUUsZ0JBQWlCO0lBQ2hELENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0MsUUFBUSxDQUFFWixjQUFlLENBQUM7RUFDakM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUcsS0FBS0EsQ0FBQSxFQUFHO0lBQ047RUFBQTs7RUFHRjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VVLElBQUlBLENBQUVDLEVBQUUsRUFBRztJQUNUO0VBQUE7QUFFSjtBQUVBckIsdUJBQXVCLENBQUNzQixRQUFRLENBQUUsbUNBQW1DLEVBQUVwQixpQ0FBa0MsQ0FBQztBQUMxRyxlQUFlQSxpQ0FBaUMifQ==