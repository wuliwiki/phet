// Copyright 2017-2023, University of Colorado Boulder
// TODO: Review, document, annotate, i18n, bring up to standards

/**
 * The "Explore Screen", used in both Black Box Study and DC simulations.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import CCKCConstants from '../../../circuit-construction-kit-common/js/CCKCConstants.js';
import CCKCColors from '../../../circuit-construction-kit-common/js/view/CCKCColors.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Rectangle } from '../../../scenery/js/imports.js';
import circuitConstructionKitBlackBoxStudy from '../circuitConstructionKitBlackBoxStudy.js';
import ExploreModel from './model/ExploreModel.js';
import ExploreScreenView from './view/ExploreScreenView.js';
class ExploreScreen extends Screen {
  constructor(tandem) {
    const options = {
      name: new Property('Explore'),
      //TODO i18n
      backgroundColorProperty: new Property(CCKCColors.screenBackgroundColorProperty),
      homeScreenIcon: new ScreenIcon(new Rectangle(0, 0, 548, 373, {
        fill: 'red'
      }), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem,
      maxDT: CCKCConstants.MAX_DT
    };
    super(() => new ExploreModel(tandem.createTandem('model')), model => new ExploreScreenView(model, tandem.createTandem('view')), options);
  }
}
circuitConstructionKitBlackBoxStudy.register('ExploreScreen', ExploreScreen);
export default ExploreScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkNDS0NDb25zdGFudHMiLCJDQ0tDQ29sb3JzIiwiU2NyZWVuIiwiU2NyZWVuSWNvbiIsIlJlY3RhbmdsZSIsImNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRCbGFja0JveFN0dWR5IiwiRXhwbG9yZU1vZGVsIiwiRXhwbG9yZVNjcmVlblZpZXciLCJFeHBsb3JlU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5Iiwic2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsImZpbGwiLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJtYXhEVCIsIk1BWF9EVCIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeHBsb3JlU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG4vLyBUT0RPOiBSZXZpZXcsIGRvY3VtZW50LCBhbm5vdGF0ZSwgaTE4biwgYnJpbmcgdXAgdG8gc3RhbmRhcmRzXHJcblxyXG4vKipcclxuICogVGhlIFwiRXhwbG9yZSBTY3JlZW5cIiwgdXNlZCBpbiBib3RoIEJsYWNrIEJveCBTdHVkeSBhbmQgREMgc2ltdWxhdGlvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQ0NLQ0NvbnN0YW50cyBmcm9tICcuLi8uLi8uLi9jaXJjdWl0LWNvbnN0cnVjdGlvbi1raXQtY29tbW9uL2pzL0NDS0NDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ0NLQ0NvbG9ycyBmcm9tICcuLi8uLi8uLi9jaXJjdWl0LWNvbnN0cnVjdGlvbi1raXQtY29tbW9uL2pzL3ZpZXcvQ0NLQ0NvbG9ycy5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0QmxhY2tCb3hTdHVkeSBmcm9tICcuLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0QmxhY2tCb3hTdHVkeS5qcyc7XHJcbmltcG9ydCBFeHBsb3JlTW9kZWwgZnJvbSAnLi9tb2RlbC9FeHBsb3JlTW9kZWwuanMnO1xyXG5pbXBvcnQgRXhwbG9yZVNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0V4cGxvcmVTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIEV4cGxvcmVTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogbmV3IFByb3BlcnR5KCAnRXhwbG9yZScgKSwgLy9UT0RPIGkxOG5cclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggQ0NLQ0NvbG9ycy5zY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBSZWN0YW5nbGUoIDAsIDAsIDU0OCwgMzczLCB7IGZpbGw6ICdyZWQnIH0gKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgbWF4RFQ6IENDS0NDb25zdGFudHMuTUFYX0RUXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgRXhwbG9yZU1vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IEV4cGxvcmVTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdEJsYWNrQm94U3R1ZHkucmVnaXN0ZXIoICdFeHBsb3JlU2NyZWVuJywgRXhwbG9yZVNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBFeHBsb3JlU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsYUFBYSxNQUFNLDhEQUE4RDtBQUN4RixPQUFPQyxVQUFVLE1BQU0sZ0VBQWdFO0FBQ3ZGLE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxTQUFTQyxTQUFTLFFBQVEsZ0NBQWdDO0FBQzFELE9BQU9DLG1DQUFtQyxNQUFNLDJDQUEyQztBQUMzRixPQUFPQyxZQUFZLE1BQU0seUJBQXlCO0FBQ2xELE9BQU9DLGlCQUFpQixNQUFNLDZCQUE2QjtBQUUzRCxNQUFNQyxhQUFhLFNBQVNOLE1BQU0sQ0FBQztFQUNqQ08sV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBRXBCLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUUsSUFBSWIsUUFBUSxDQUFFLFNBQVUsQ0FBQztNQUFFO01BQ2pDYyx1QkFBdUIsRUFBRSxJQUFJZCxRQUFRLENBQUVFLFVBQVUsQ0FBQ2EsNkJBQThCLENBQUM7TUFDakZDLGNBQWMsRUFBRSxJQUFJWixVQUFVLENBQUUsSUFBSUMsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtRQUFFWSxJQUFJLEVBQUU7TUFBTSxDQUFFLENBQUMsRUFBRTtRQUNoRkMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hSLE1BQU0sRUFBRUEsTUFBTTtNQUNkUyxLQUFLLEVBQUVuQixhQUFhLENBQUNvQjtJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUNILE1BQU0sSUFBSWQsWUFBWSxDQUFFSSxNQUFNLENBQUNXLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQyxFQUN4REMsS0FBSyxJQUFJLElBQUlmLGlCQUFpQixDQUFFZSxLQUFLLEVBQUVaLE1BQU0sQ0FBQ1csWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQ3RFVixPQUFRLENBQUM7RUFDYjtBQUNGO0FBRUFOLG1DQUFtQyxDQUFDa0IsUUFBUSxDQUFFLGVBQWUsRUFBRWYsYUFBYyxDQUFDO0FBQzlFLGVBQWVBLGFBQWEifQ==