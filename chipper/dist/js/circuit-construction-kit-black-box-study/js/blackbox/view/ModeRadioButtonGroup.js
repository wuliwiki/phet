// Copyright 2016-2022, University of Colorado Boulder

/**
 * Radio buttons for choosing 'Explore' or 'Test'
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import PhetColorScheme from '../../../../scenery-phet/js/PhetColorScheme.js';
import { Text } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import circuitConstructionKitBlackBoxStudy from '../../circuitConstructionKitBlackBoxStudy.js';
class ModeRadioButtonGroup extends RectangularRadioButtonGroup {
  /**
   * @param {Property.<string>} modeProperty - property that indicates which mode the black box simulation is in
   * @param tandem
   */
  constructor(modeProperty, tandem) {
    const textOptions = {
      fontSize: 18
    };
    super(modeProperty, [{
      value: 'explore',
      // TODO: i18n
      node: new Text('Explore', textOptions),
      tandemName: 'investigateCircuitRadioButton'
    }, {
      value: 'test',
      // TODO: i18n
      node: new Text('Test', textOptions),
      tandemName: 'buildCircuitRadioButton'
    }], {
      radioButtonOptions: {
        baseColor: 'white',
        xMargin: 10,
        yMargin: 15,
        buttonAppearanceStrategyOptions: {
          selectedStroke: PhetColorScheme.RESET_ALL_BUTTON_BASE_COLOR,
          selectedLineWidth: 2.5
        }
      },
      tandem: tandem.createTandem('ModeRadioButtonGroup')
    });
  }
}
circuitConstructionKitBlackBoxStudy.register('ModeRadioButtonGroup', ModeRadioButtonGroup);
export default ModeRadioButtonGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Q29sb3JTY2hlbWUiLCJUZXh0IiwiUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIiwiY2lyY3VpdENvbnN0cnVjdGlvbktpdEJsYWNrQm94U3R1ZHkiLCJNb2RlUmFkaW9CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwibW9kZVByb3BlcnR5IiwidGFuZGVtIiwidGV4dE9wdGlvbnMiLCJmb250U2l6ZSIsInZhbHVlIiwibm9kZSIsInRhbmRlbU5hbWUiLCJyYWRpb0J1dHRvbk9wdGlvbnMiLCJiYXNlQ29sb3IiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneU9wdGlvbnMiLCJzZWxlY3RlZFN0cm9rZSIsIlJFU0VUX0FMTF9CVVRUT05fQkFTRV9DT0xPUiIsInNlbGVjdGVkTGluZVdpZHRoIiwiY3JlYXRlVGFuZGVtIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNb2RlUmFkaW9CdXR0b25Hcm91cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSYWRpbyBidXR0b25zIGZvciBjaG9vc2luZyAnRXhwbG9yZScgb3IgJ1Rlc3QnXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBoZXRDb2xvclNjaGVtZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldENvbG9yU2NoZW1lLmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRCbGFja0JveFN0dWR5IGZyb20gJy4uLy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRCbGFja0JveFN0dWR5LmpzJztcclxuXHJcbmNsYXNzIE1vZGVSYWRpb0J1dHRvbkdyb3VwIGV4dGVuZHMgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48c3RyaW5nPn0gbW9kZVByb3BlcnR5IC0gcHJvcGVydHkgdGhhdCBpbmRpY2F0ZXMgd2hpY2ggbW9kZSB0aGUgYmxhY2sgYm94IHNpbXVsYXRpb24gaXMgaW5cclxuICAgKiBAcGFyYW0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVQcm9wZXJ0eSwgdGFuZGVtICkge1xyXG4gICAgY29uc3QgdGV4dE9wdGlvbnMgPSB7IGZvbnRTaXplOiAxOCB9O1xyXG4gICAgc3VwZXIoIG1vZGVQcm9wZXJ0eSwgWyB7XHJcbiAgICAgIHZhbHVlOiAnZXhwbG9yZScsXHJcblxyXG4gICAgICAvLyBUT0RPOiBpMThuXHJcbiAgICAgIG5vZGU6IG5ldyBUZXh0KCAnRXhwbG9yZScsIHRleHRPcHRpb25zICksXHJcbiAgICAgIHRhbmRlbU5hbWU6ICdpbnZlc3RpZ2F0ZUNpcmN1aXRSYWRpb0J1dHRvbidcclxuICAgIH0sIHtcclxuICAgICAgdmFsdWU6ICd0ZXN0JyxcclxuXHJcbiAgICAgIC8vIFRPRE86IGkxOG5cclxuICAgICAgbm9kZTogbmV3IFRleHQoICdUZXN0JywgdGV4dE9wdGlvbnMgKSxcclxuICAgICAgdGFuZGVtTmFtZTogJ2J1aWxkQ2lyY3VpdFJhZGlvQnV0dG9uJ1xyXG4gICAgfSBdLCB7XHJcbiAgICAgIHJhZGlvQnV0dG9uT3B0aW9uczoge1xyXG4gICAgICAgIGJhc2VDb2xvcjogJ3doaXRlJyxcclxuICAgICAgICB4TWFyZ2luOiAxMCxcclxuICAgICAgICB5TWFyZ2luOiAxNSxcclxuICAgICAgICBidXR0b25BcHBlYXJhbmNlU3RyYXRlZ3lPcHRpb25zOiB7XHJcbiAgICAgICAgICBzZWxlY3RlZFN0cm9rZTogUGhldENvbG9yU2NoZW1lLlJFU0VUX0FMTF9CVVRUT05fQkFTRV9DT0xPUixcclxuICAgICAgICAgIHNlbGVjdGVkTGluZVdpZHRoOiAyLjVcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ01vZGVSYWRpb0J1dHRvbkdyb3VwJyApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jaXJjdWl0Q29uc3RydWN0aW9uS2l0QmxhY2tCb3hTdHVkeS5yZWdpc3RlciggJ01vZGVSYWRpb0J1dHRvbkdyb3VwJywgTW9kZVJhZGlvQnV0dG9uR3JvdXAgKTtcclxuZXhwb3J0IGRlZmF1bHQgTW9kZVJhZGlvQnV0dG9uR3JvdXA7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSxnREFBZ0Q7QUFDNUUsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQywyQkFBMkIsTUFBTSwyREFBMkQ7QUFDbkcsT0FBT0MsbUNBQW1DLE1BQU0sOENBQThDO0FBRTlGLE1BQU1DLG9CQUFvQixTQUFTRiwyQkFBMkIsQ0FBQztFQUU3RDtBQUNGO0FBQ0E7QUFDQTtFQUNFRyxXQUFXQSxDQUFFQyxZQUFZLEVBQUVDLE1BQU0sRUFBRztJQUNsQyxNQUFNQyxXQUFXLEdBQUc7TUFBRUMsUUFBUSxFQUFFO0lBQUcsQ0FBQztJQUNwQyxLQUFLLENBQUVILFlBQVksRUFBRSxDQUFFO01BQ3JCSSxLQUFLLEVBQUUsU0FBUztNQUVoQjtNQUNBQyxJQUFJLEVBQUUsSUFBSVYsSUFBSSxDQUFFLFNBQVMsRUFBRU8sV0FBWSxDQUFDO01BQ3hDSSxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQUU7TUFDREYsS0FBSyxFQUFFLE1BQU07TUFFYjtNQUNBQyxJQUFJLEVBQUUsSUFBSVYsSUFBSSxDQUFFLE1BQU0sRUFBRU8sV0FBWSxDQUFDO01BQ3JDSSxVQUFVLEVBQUU7SUFDZCxDQUFDLENBQUUsRUFBRTtNQUNIQyxrQkFBa0IsRUFBRTtRQUNsQkMsU0FBUyxFQUFFLE9BQU87UUFDbEJDLE9BQU8sRUFBRSxFQUFFO1FBQ1hDLE9BQU8sRUFBRSxFQUFFO1FBQ1hDLCtCQUErQixFQUFFO1VBQy9CQyxjQUFjLEVBQUVsQixlQUFlLENBQUNtQiwyQkFBMkI7VUFDM0RDLGlCQUFpQixFQUFFO1FBQ3JCO01BQ0YsQ0FBQztNQUNEYixNQUFNLEVBQUVBLE1BQU0sQ0FBQ2MsWUFBWSxDQUFFLHNCQUF1QjtJQUN0RCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFsQixtQ0FBbUMsQ0FBQ21CLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRWxCLG9CQUFxQixDQUFDO0FBQzVGLGVBQWVBLG9CQUFvQiJ9