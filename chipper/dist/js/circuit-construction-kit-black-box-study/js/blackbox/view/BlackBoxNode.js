// Copyright 2016-2022, University of Colorado Boulder

/**
 * The node that shows the black round rectangle with a question mark.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import circuitConstructionKitBlackBoxStudy from '../../circuitConstructionKitBlackBoxStudy.js';
class BlackBoxNode extends Node {
  /**
   * @param {number} width - the width of the black box in view coordinates
   * @param {number} height - the height of the black box in view coordinates
   * @param {Property.<boolean>} revealingProperty - true if the user is pressing the "reveal" button
   * @param {Object} [options]
   */
  constructor(width, height, revealingProperty, options) {
    // TODO: i18n
    const questionMarkTextNode = new Text('?', {
      fontSize: 82,
      centerX: width / 2,
      centerY: height / 2,
      fill: 'white'
    });

    // Show the question mark if and only if the reveal button is not being pressed.
    revealingProperty.link(revealing => {
      questionMarkTextNode.visible = !revealing;
    });
    super({
      // Don't let clicks go through the black box
      pickable: true,
      children: [new Rectangle(0, 0, width, height, 20, 20, {
        fill: 'black',
        opacity: phet.chipper.queryParameters.dev ? 0.2 : 1
      }), questionMarkTextNode]
    });
    this.mutate(options);
  }
}
circuitConstructionKitBlackBoxStudy.register('BlackBoxNode', BlackBoxNode);
export default BlackBoxNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiUmVjdGFuZ2xlIiwiVGV4dCIsImNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRCbGFja0JveFN0dWR5IiwiQmxhY2tCb3hOb2RlIiwiY29uc3RydWN0b3IiLCJ3aWR0aCIsImhlaWdodCIsInJldmVhbGluZ1Byb3BlcnR5Iiwib3B0aW9ucyIsInF1ZXN0aW9uTWFya1RleHROb2RlIiwiZm9udFNpemUiLCJjZW50ZXJYIiwiY2VudGVyWSIsImZpbGwiLCJsaW5rIiwicmV2ZWFsaW5nIiwidmlzaWJsZSIsInBpY2thYmxlIiwiY2hpbGRyZW4iLCJvcGFjaXR5IiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJkZXYiLCJtdXRhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJsYWNrQm94Tm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgbm9kZSB0aGF0IHNob3dzIHRoZSBibGFjayByb3VuZCByZWN0YW5nbGUgd2l0aCBhIHF1ZXN0aW9uIG1hcmsuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSwgUmVjdGFuZ2xlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRCbGFja0JveFN0dWR5IGZyb20gJy4uLy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRCbGFja0JveFN0dWR5LmpzJztcclxuXHJcbmNsYXNzIEJsYWNrQm94Tm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSB0aGUgd2lkdGggb2YgdGhlIGJsYWNrIGJveCBpbiB2aWV3IGNvb3JkaW5hdGVzXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIHRoZSBoZWlnaHQgb2YgdGhlIGJsYWNrIGJveCBpbiB2aWV3IGNvb3JkaW5hdGVzXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHJldmVhbGluZ1Byb3BlcnR5IC0gdHJ1ZSBpZiB0aGUgdXNlciBpcyBwcmVzc2luZyB0aGUgXCJyZXZlYWxcIiBidXR0b25cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHdpZHRoLCBoZWlnaHQsIHJldmVhbGluZ1Byb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIC8vIFRPRE86IGkxOG5cclxuICAgIGNvbnN0IHF1ZXN0aW9uTWFya1RleHROb2RlID0gbmV3IFRleHQoICc/Jywge1xyXG4gICAgICBmb250U2l6ZTogODIsXHJcbiAgICAgIGNlbnRlclg6IHdpZHRoIC8gMixcclxuICAgICAgY2VudGVyWTogaGVpZ2h0IC8gMixcclxuICAgICAgZmlsbDogJ3doaXRlJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFNob3cgdGhlIHF1ZXN0aW9uIG1hcmsgaWYgYW5kIG9ubHkgaWYgdGhlIHJldmVhbCBidXR0b24gaXMgbm90IGJlaW5nIHByZXNzZWQuXHJcbiAgICByZXZlYWxpbmdQcm9wZXJ0eS5saW5rKCByZXZlYWxpbmcgPT4ge1xyXG4gICAgICBxdWVzdGlvbk1hcmtUZXh0Tm9kZS52aXNpYmxlID0gIXJldmVhbGluZztcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlcigge1xyXG5cclxuICAgICAgLy8gRG9uJ3QgbGV0IGNsaWNrcyBnbyB0aHJvdWdoIHRoZSBibGFjayBib3hcclxuICAgICAgcGlja2FibGU6IHRydWUsXHJcblxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBSZWN0YW5nbGUoIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDIwLCAyMCwge1xyXG4gICAgICAgICAgZmlsbDogJ2JsYWNrJyxcclxuICAgICAgICAgIG9wYWNpdHk6IHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuZGV2ID8gMC4yIDogMVxyXG4gICAgICAgIH0gKSxcclxuICAgICAgICBxdWVzdGlvbk1hcmtUZXh0Tm9kZVxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdEJsYWNrQm94U3R1ZHkucmVnaXN0ZXIoICdCbGFja0JveE5vZGUnLCBCbGFja0JveE5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQmxhY2tCb3hOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUN6RSxPQUFPQyxtQ0FBbUMsTUFBTSw4Q0FBOEM7QUFFOUYsTUFBTUMsWUFBWSxTQUFTSixJQUFJLENBQUM7RUFFOUI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxpQkFBaUIsRUFBRUMsT0FBTyxFQUFHO0lBRXZEO0lBQ0EsTUFBTUMsb0JBQW9CLEdBQUcsSUFBSVIsSUFBSSxDQUFFLEdBQUcsRUFBRTtNQUMxQ1MsUUFBUSxFQUFFLEVBQUU7TUFDWkMsT0FBTyxFQUFFTixLQUFLLEdBQUcsQ0FBQztNQUNsQk8sT0FBTyxFQUFFTixNQUFNLEdBQUcsQ0FBQztNQUNuQk8sSUFBSSxFQUFFO0lBQ1IsQ0FBRSxDQUFDOztJQUVIO0lBQ0FOLGlCQUFpQixDQUFDTyxJQUFJLENBQUVDLFNBQVMsSUFBSTtNQUNuQ04sb0JBQW9CLENBQUNPLE9BQU8sR0FBRyxDQUFDRCxTQUFTO0lBQzNDLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRTtNQUVMO01BQ0FFLFFBQVEsRUFBRSxJQUFJO01BRWRDLFFBQVEsRUFBRSxDQUNSLElBQUlsQixTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRUssS0FBSyxFQUFFQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUMxQ08sSUFBSSxFQUFFLE9BQU87UUFDYk0sT0FBTyxFQUFFQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDQyxHQUFHLEdBQUcsR0FBRyxHQUFHO01BQ3BELENBQUUsQ0FBQyxFQUNIZCxvQkFBb0I7SUFFeEIsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDZSxNQUFNLENBQUVoQixPQUFRLENBQUM7RUFDeEI7QUFDRjtBQUVBTixtQ0FBbUMsQ0FBQ3VCLFFBQVEsQ0FBRSxjQUFjLEVBQUV0QixZQUFhLENBQUM7QUFDNUUsZUFBZUEsWUFBWSJ9