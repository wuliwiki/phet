// Copyright 2020-2021, University of Colorado Boulder

/**
 * Contains layout information relevant to where the kits are placed, where molecules can exist in the play area, etc.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import buildAMolecule from '../../buildAMolecule.js';
import BAMConstants from '../BAMConstants.js';

// constants
const KIT_HEIGHT = 550;
class CollectionLayout {
  /**
   * Construct the necessary layout
   *
   * @param {boolean} hasCollectionPanel - flag used to scale available bounds width to compensate for collection panel
   */
  constructor(hasCollectionPanel) {
    // Dimensions of the layout
    const availableWidth = BAMConstants.MODEL_SIZE.width - 2 * BAMConstants.MODEL_PADDING; // minus padding
    const halfWidth = availableWidth / 2;
    const kitBottom = -BAMConstants.MODEL_SIZE.height / 2 + BAMConstants.MODEL_PADDING; // Y is up, so this is the bottom (min y) value for the rectangle
    const kitTop = kitBottom + KIT_HEIGHT;

    // scale width to leave room for the collection panel
    const kitAvailableWidth = hasCollectionPanel ? 0.75 : 1;

    // @public {Bounds2} Refers to the bucket region
    this.availableKitBounds = Bounds2.rect(-halfWidth, kitBottom, availableWidth * kitAvailableWidth, KIT_HEIGHT);

    // @public {Bounds2} Refers to the play area above the bucket region, where molecules can be built, broken, and moved
    this.availablePlayAreaBounds = Bounds2.rect(-BAMConstants.MODEL_SIZE.width / 2,
    // far left part of model
    kitTop,
    // top of kit
    this.availableKitBounds.width + BAMConstants.MODEL_PADDING * 2,
    // add in padding, since there is padding in-between the kit and collection area
    BAMConstants.MODEL_SIZE.height / 2 - kitTop);
  }
}
buildAMolecule.register('CollectionLayout', CollectionLayout);
export default CollectionLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiYnVpbGRBTW9sZWN1bGUiLCJCQU1Db25zdGFudHMiLCJLSVRfSEVJR0hUIiwiQ29sbGVjdGlvbkxheW91dCIsImNvbnN0cnVjdG9yIiwiaGFzQ29sbGVjdGlvblBhbmVsIiwiYXZhaWxhYmxlV2lkdGgiLCJNT0RFTF9TSVpFIiwid2lkdGgiLCJNT0RFTF9QQURESU5HIiwiaGFsZldpZHRoIiwia2l0Qm90dG9tIiwiaGVpZ2h0Iiwia2l0VG9wIiwia2l0QXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVLaXRCb3VuZHMiLCJyZWN0IiwiYXZhaWxhYmxlUGxheUFyZWFCb3VuZHMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbGxlY3Rpb25MYXlvdXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udGFpbnMgbGF5b3V0IGluZm9ybWF0aW9uIHJlbGV2YW50IHRvIHdoZXJlIHRoZSBraXRzIGFyZSBwbGFjZWQsIHdoZXJlIG1vbGVjdWxlcyBjYW4gZXhpc3QgaW4gdGhlIHBsYXkgYXJlYSwgZXRjLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqIEBhdXRob3IgRGVuemVsbCBCYXJuZXR0IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IGJ1aWxkQU1vbGVjdWxlIGZyb20gJy4uLy4uL2J1aWxkQU1vbGVjdWxlLmpzJztcclxuaW1wb3J0IEJBTUNvbnN0YW50cyBmcm9tICcuLi9CQU1Db25zdGFudHMuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEtJVF9IRUlHSFQgPSA1NTA7XHJcblxyXG5jbGFzcyBDb2xsZWN0aW9uTGF5b3V0IHtcclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3QgdGhlIG5lY2Vzc2FyeSBsYXlvdXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzQ29sbGVjdGlvblBhbmVsIC0gZmxhZyB1c2VkIHRvIHNjYWxlIGF2YWlsYWJsZSBib3VuZHMgd2lkdGggdG8gY29tcGVuc2F0ZSBmb3IgY29sbGVjdGlvbiBwYW5lbFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBoYXNDb2xsZWN0aW9uUGFuZWwgKSB7XHJcblxyXG4gICAgLy8gRGltZW5zaW9ucyBvZiB0aGUgbGF5b3V0XHJcbiAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IEJBTUNvbnN0YW50cy5NT0RFTF9TSVpFLndpZHRoIC0gMiAqIEJBTUNvbnN0YW50cy5NT0RFTF9QQURESU5HOyAvLyBtaW51cyBwYWRkaW5nXHJcbiAgICBjb25zdCBoYWxmV2lkdGggPSBhdmFpbGFibGVXaWR0aCAvIDI7XHJcbiAgICBjb25zdCBraXRCb3R0b20gPSAtQkFNQ29uc3RhbnRzLk1PREVMX1NJWkUuaGVpZ2h0IC8gMiArIEJBTUNvbnN0YW50cy5NT0RFTF9QQURESU5HOyAvLyBZIGlzIHVwLCBzbyB0aGlzIGlzIHRoZSBib3R0b20gKG1pbiB5KSB2YWx1ZSBmb3IgdGhlIHJlY3RhbmdsZVxyXG4gICAgY29uc3Qga2l0VG9wID0ga2l0Qm90dG9tICsgS0lUX0hFSUdIVDtcclxuXHJcbiAgICAvLyBzY2FsZSB3aWR0aCB0byBsZWF2ZSByb29tIGZvciB0aGUgY29sbGVjdGlvbiBwYW5lbFxyXG4gICAgY29uc3Qga2l0QXZhaWxhYmxlV2lkdGggPSBoYXNDb2xsZWN0aW9uUGFuZWwgPyAwLjc1IDogMTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtCb3VuZHMyfSBSZWZlcnMgdG8gdGhlIGJ1Y2tldCByZWdpb25cclxuICAgIHRoaXMuYXZhaWxhYmxlS2l0Qm91bmRzID0gQm91bmRzMi5yZWN0KCAtaGFsZldpZHRoLCBraXRCb3R0b20sIGF2YWlsYWJsZVdpZHRoICoga2l0QXZhaWxhYmxlV2lkdGgsIEtJVF9IRUlHSFQgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtCb3VuZHMyfSBSZWZlcnMgdG8gdGhlIHBsYXkgYXJlYSBhYm92ZSB0aGUgYnVja2V0IHJlZ2lvbiwgd2hlcmUgbW9sZWN1bGVzIGNhbiBiZSBidWlsdCwgYnJva2VuLCBhbmQgbW92ZWRcclxuICAgIHRoaXMuYXZhaWxhYmxlUGxheUFyZWFCb3VuZHMgPSBCb3VuZHMyLnJlY3QoXHJcbiAgICAgIC1CQU1Db25zdGFudHMuTU9ERUxfU0laRS53aWR0aCAvIDIsIC8vIGZhciBsZWZ0IHBhcnQgb2YgbW9kZWxcclxuICAgICAga2l0VG9wLCAvLyB0b3Agb2Yga2l0XHJcbiAgICAgIHRoaXMuYXZhaWxhYmxlS2l0Qm91bmRzLndpZHRoICsgQkFNQ29uc3RhbnRzLk1PREVMX1BBRERJTkcgKiAyLCAvLyBhZGQgaW4gcGFkZGluZywgc2luY2UgdGhlcmUgaXMgcGFkZGluZyBpbi1iZXR3ZWVuIHRoZSBraXQgYW5kIGNvbGxlY3Rpb24gYXJlYVxyXG4gICAgICBCQU1Db25zdGFudHMuTU9ERUxfU0laRS5oZWlnaHQgLyAyIC0ga2l0VG9wXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuYnVpbGRBTW9sZWN1bGUucmVnaXN0ZXIoICdDb2xsZWN0aW9uTGF5b3V0JywgQ29sbGVjdGlvbkxheW91dCApO1xyXG5leHBvcnQgZGVmYXVsdCBDb2xsZWN0aW9uTGF5b3V0OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxZQUFZLE1BQU0sb0JBQW9COztBQUU3QztBQUNBLE1BQU1DLFVBQVUsR0FBRyxHQUFHO0FBRXRCLE1BQU1DLGdCQUFnQixDQUFDO0VBQ3JCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsa0JBQWtCLEVBQUc7SUFFaEM7SUFDQSxNQUFNQyxjQUFjLEdBQUdMLFlBQVksQ0FBQ00sVUFBVSxDQUFDQyxLQUFLLEdBQUcsQ0FBQyxHQUFHUCxZQUFZLENBQUNRLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZGLE1BQU1DLFNBQVMsR0FBR0osY0FBYyxHQUFHLENBQUM7SUFDcEMsTUFBTUssU0FBUyxHQUFHLENBQUNWLFlBQVksQ0FBQ00sVUFBVSxDQUFDSyxNQUFNLEdBQUcsQ0FBQyxHQUFHWCxZQUFZLENBQUNRLGFBQWEsQ0FBQyxDQUFDO0lBQ3BGLE1BQU1JLE1BQU0sR0FBR0YsU0FBUyxHQUFHVCxVQUFVOztJQUVyQztJQUNBLE1BQU1ZLGlCQUFpQixHQUFHVCxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQzs7SUFFdkQ7SUFDQSxJQUFJLENBQUNVLGtCQUFrQixHQUFHaEIsT0FBTyxDQUFDaUIsSUFBSSxDQUFFLENBQUNOLFNBQVMsRUFBRUMsU0FBUyxFQUFFTCxjQUFjLEdBQUdRLGlCQUFpQixFQUFFWixVQUFXLENBQUM7O0lBRS9HO0lBQ0EsSUFBSSxDQUFDZSx1QkFBdUIsR0FBR2xCLE9BQU8sQ0FBQ2lCLElBQUksQ0FDekMsQ0FBQ2YsWUFBWSxDQUFDTSxVQUFVLENBQUNDLEtBQUssR0FBRyxDQUFDO0lBQUU7SUFDcENLLE1BQU07SUFBRTtJQUNSLElBQUksQ0FBQ0Usa0JBQWtCLENBQUNQLEtBQUssR0FBR1AsWUFBWSxDQUFDUSxhQUFhLEdBQUcsQ0FBQztJQUFFO0lBQ2hFUixZQUFZLENBQUNNLFVBQVUsQ0FBQ0ssTUFBTSxHQUFHLENBQUMsR0FBR0MsTUFDdkMsQ0FBQztFQUNIO0FBQ0Y7QUFFQWIsY0FBYyxDQUFDa0IsUUFBUSxDQUFFLGtCQUFrQixFQUFFZixnQkFBaUIsQ0FBQztBQUMvRCxlQUFlQSxnQkFBZ0IifQ==