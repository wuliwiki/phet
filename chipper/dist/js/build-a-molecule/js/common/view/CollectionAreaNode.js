// Copyright 2020-2022, University of Colorado Boulder

/**
 * Area that shows all of the collection boxes and a reset collection button
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import RefreshButton from '../../../../scenery-phet/js/buttons/RefreshButton.js';
import { Color, Node, VBox } from '../../../../scenery/js/imports.js';
import nullSoundPlayer from '../../../../tambo/js/shared-sound-players/nullSoundPlayer.js';
import buildAMolecule from '../../buildAMolecule.js';
import MultipleCollectionBoxNode from './MultipleCollectionBoxNode.js';
import SingleCollectionBoxNode from './SingleCollectionBoxNode.js';
class CollectionAreaNode extends Node {
  /**
   * @param {KitCollection} collection
   * @param {boolean} isSingleCollectionMode
   * @param {function} toModelBounds
   * @param {function} showDialogCallback
   * @param {function} updateRefillButton
   */
  constructor(collection, isSingleCollectionMode, toModelBounds, showDialogCallback, updateRefillButton) {
    super();

    // @private {Array.<SingleCollectionBoxNode|MultipleCollectionBoxNode>} Array for the black box for its text
    this.collectionBoxNodes = [];

    // Container for collection boxes and reset collection button.
    const allCollectionItemsVBox = new VBox({
      spacing: 15
    });
    this.addChild(allCollectionItemsVBox);

    // Create and add all collection box nodes.
    collection.collectionBoxes.forEach(collectionBox => {
      const collectionBoxNode = isSingleCollectionMode ? new SingleCollectionBoxNode(collectionBox, toModelBounds, showDialogCallback) : new MultipleCollectionBoxNode(collectionBox, toModelBounds, showDialogCallback);
      this.collectionBoxNodes.push(collectionBoxNode);
      allCollectionItemsVBox.addChild(collectionBoxNode);
    });

    // Reset collection button
    const resetCollectionButton = new RefreshButton({
      listener() {
        collection.resetKitsAndBoxes();
        updateRefillButton();
      },
      iconHeight: 20,
      xMargin: 15,
      yMargin: 5,
      baseColor: Color.ORANGE,
      soundPlayer: nullSoundPlayer
    });
    resetCollectionButton.touchArea = resetCollectionButton.bounds.dilated(7);

    // When any collection box quantity changes, update whether it is enabled
    const updateEnabled = () => {
      resetCollectionButton.enabled = _.some(collection.collectionBoxes, box => box.quantityProperty.value);
    };
    collection.collectionBoxes.forEach(box => box.quantityProperty.link(updateEnabled));
    allCollectionItemsVBox.addChild(resetCollectionButton);
  }

  /**
   * Update the positions of each collection box node
   *
   * @public
   */
  updateCollectionBoxPositions() {
    this.collectionBoxNodes.forEach(collectionBoxNode => {
      collectionBoxNode.updatePosition();
    });
  }
}
buildAMolecule.register('CollectionAreaNode', CollectionAreaNode);
export default CollectionAreaNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWZyZXNoQnV0dG9uIiwiQ29sb3IiLCJOb2RlIiwiVkJveCIsIm51bGxTb3VuZFBsYXllciIsImJ1aWxkQU1vbGVjdWxlIiwiTXVsdGlwbGVDb2xsZWN0aW9uQm94Tm9kZSIsIlNpbmdsZUNvbGxlY3Rpb25Cb3hOb2RlIiwiQ29sbGVjdGlvbkFyZWFOb2RlIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwiaXNTaW5nbGVDb2xsZWN0aW9uTW9kZSIsInRvTW9kZWxCb3VuZHMiLCJzaG93RGlhbG9nQ2FsbGJhY2siLCJ1cGRhdGVSZWZpbGxCdXR0b24iLCJjb2xsZWN0aW9uQm94Tm9kZXMiLCJhbGxDb2xsZWN0aW9uSXRlbXNWQm94Iiwic3BhY2luZyIsImFkZENoaWxkIiwiY29sbGVjdGlvbkJveGVzIiwiZm9yRWFjaCIsImNvbGxlY3Rpb25Cb3giLCJjb2xsZWN0aW9uQm94Tm9kZSIsInB1c2giLCJyZXNldENvbGxlY3Rpb25CdXR0b24iLCJsaXN0ZW5lciIsInJlc2V0S2l0c0FuZEJveGVzIiwiaWNvbkhlaWdodCIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiYmFzZUNvbG9yIiwiT1JBTkdFIiwic291bmRQbGF5ZXIiLCJ0b3VjaEFyZWEiLCJib3VuZHMiLCJkaWxhdGVkIiwidXBkYXRlRW5hYmxlZCIsImVuYWJsZWQiLCJfIiwic29tZSIsImJveCIsInF1YW50aXR5UHJvcGVydHkiLCJ2YWx1ZSIsImxpbmsiLCJ1cGRhdGVDb2xsZWN0aW9uQm94UG9zaXRpb25zIiwidXBkYXRlUG9zaXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbGxlY3Rpb25BcmVhTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBcmVhIHRoYXQgc2hvd3MgYWxsIG9mIHRoZSBjb2xsZWN0aW9uIGJveGVzIGFuZCBhIHJlc2V0IGNvbGxlY3Rpb24gYnV0dG9uXHJcbiAqXHJcbiAqIEBhdXRob3IgRGVuemVsbCBCYXJuZXR0IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlZnJlc2hCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2J1dHRvbnMvUmVmcmVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBOb2RlLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG51bGxTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi8uLi90YW1iby9qcy9zaGFyZWQtc291bmQtcGxheWVycy9udWxsU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgYnVpbGRBTW9sZWN1bGUgZnJvbSAnLi4vLi4vYnVpbGRBTW9sZWN1bGUuanMnO1xyXG5pbXBvcnQgTXVsdGlwbGVDb2xsZWN0aW9uQm94Tm9kZSBmcm9tICcuL011bHRpcGxlQ29sbGVjdGlvbkJveE5vZGUuanMnO1xyXG5pbXBvcnQgU2luZ2xlQ29sbGVjdGlvbkJveE5vZGUgZnJvbSAnLi9TaW5nbGVDb2xsZWN0aW9uQm94Tm9kZS5qcyc7XHJcblxyXG5jbGFzcyBDb2xsZWN0aW9uQXJlYU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge0tpdENvbGxlY3Rpb259IGNvbGxlY3Rpb25cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2luZ2xlQ29sbGVjdGlvbk1vZGVcclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0b01vZGVsQm91bmRzXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gc2hvd0RpYWxvZ0NhbGxiYWNrXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdXBkYXRlUmVmaWxsQnV0dG9uXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvbGxlY3Rpb24sIGlzU2luZ2xlQ29sbGVjdGlvbk1vZGUsIHRvTW9kZWxCb3VuZHMsIHNob3dEaWFsb2dDYWxsYmFjaywgdXBkYXRlUmVmaWxsQnV0dG9uICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7QXJyYXkuPFNpbmdsZUNvbGxlY3Rpb25Cb3hOb2RlfE11bHRpcGxlQ29sbGVjdGlvbkJveE5vZGU+fSBBcnJheSBmb3IgdGhlIGJsYWNrIGJveCBmb3IgaXRzIHRleHRcclxuICAgIHRoaXMuY29sbGVjdGlvbkJveE5vZGVzID0gW107XHJcblxyXG4gICAgLy8gQ29udGFpbmVyIGZvciBjb2xsZWN0aW9uIGJveGVzIGFuZCByZXNldCBjb2xsZWN0aW9uIGJ1dHRvbi5cclxuICAgIGNvbnN0IGFsbENvbGxlY3Rpb25JdGVtc1ZCb3ggPSBuZXcgVkJveCggeyBzcGFjaW5nOiAxNSB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBhbGxDb2xsZWN0aW9uSXRlbXNWQm94ICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuZCBhZGQgYWxsIGNvbGxlY3Rpb24gYm94IG5vZGVzLlxyXG4gICAgY29sbGVjdGlvbi5jb2xsZWN0aW9uQm94ZXMuZm9yRWFjaCggY29sbGVjdGlvbkJveCA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25Cb3hOb2RlID0gaXNTaW5nbGVDb2xsZWN0aW9uTW9kZSA/IG5ldyBTaW5nbGVDb2xsZWN0aW9uQm94Tm9kZSggY29sbGVjdGlvbkJveCwgdG9Nb2RlbEJvdW5kcywgc2hvd0RpYWxvZ0NhbGxiYWNrICkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNdWx0aXBsZUNvbGxlY3Rpb25Cb3hOb2RlKCBjb2xsZWN0aW9uQm94LCB0b01vZGVsQm91bmRzLCBzaG93RGlhbG9nQ2FsbGJhY2sgKTtcclxuICAgICAgdGhpcy5jb2xsZWN0aW9uQm94Tm9kZXMucHVzaCggY29sbGVjdGlvbkJveE5vZGUgKTtcclxuICAgICAgYWxsQ29sbGVjdGlvbkl0ZW1zVkJveC5hZGRDaGlsZCggY29sbGVjdGlvbkJveE5vZGUgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBSZXNldCBjb2xsZWN0aW9uIGJ1dHRvblxyXG4gICAgY29uc3QgcmVzZXRDb2xsZWN0aW9uQnV0dG9uID0gbmV3IFJlZnJlc2hCdXR0b24oIHtcclxuICAgICAgbGlzdGVuZXIoKSB7XHJcbiAgICAgICAgY29sbGVjdGlvbi5yZXNldEtpdHNBbmRCb3hlcygpO1xyXG4gICAgICAgIHVwZGF0ZVJlZmlsbEJ1dHRvbigpO1xyXG4gICAgICB9LFxyXG4gICAgICBpY29uSGVpZ2h0OiAyMCxcclxuICAgICAgeE1hcmdpbjogMTUsXHJcbiAgICAgIHlNYXJnaW46IDUsXHJcbiAgICAgIGJhc2VDb2xvcjogQ29sb3IuT1JBTkdFLFxyXG4gICAgICBzb3VuZFBsYXllcjogbnVsbFNvdW5kUGxheWVyXHJcbiAgICB9ICk7XHJcbiAgICByZXNldENvbGxlY3Rpb25CdXR0b24udG91Y2hBcmVhID0gcmVzZXRDb2xsZWN0aW9uQnV0dG9uLmJvdW5kcy5kaWxhdGVkKCA3ICk7XHJcblxyXG4gICAgLy8gV2hlbiBhbnkgY29sbGVjdGlvbiBib3ggcXVhbnRpdHkgY2hhbmdlcywgdXBkYXRlIHdoZXRoZXIgaXQgaXMgZW5hYmxlZFxyXG4gICAgY29uc3QgdXBkYXRlRW5hYmxlZCA9ICgpID0+IHsgcmVzZXRDb2xsZWN0aW9uQnV0dG9uLmVuYWJsZWQgPSBfLnNvbWUoIGNvbGxlY3Rpb24uY29sbGVjdGlvbkJveGVzLCBib3ggPT4gYm94LnF1YW50aXR5UHJvcGVydHkudmFsdWUgKTsgfTtcclxuICAgIGNvbGxlY3Rpb24uY29sbGVjdGlvbkJveGVzLmZvckVhY2goIGJveCA9PiBib3gucXVhbnRpdHlQcm9wZXJ0eS5saW5rKCB1cGRhdGVFbmFibGVkICkgKTtcclxuXHJcbiAgICBhbGxDb2xsZWN0aW9uSXRlbXNWQm94LmFkZENoaWxkKCByZXNldENvbGxlY3Rpb25CdXR0b24gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSB0aGUgcG9zaXRpb25zIG9mIGVhY2ggY29sbGVjdGlvbiBib3ggbm9kZVxyXG4gICAqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHVwZGF0ZUNvbGxlY3Rpb25Cb3hQb3NpdGlvbnMoKSB7XHJcbiAgICB0aGlzLmNvbGxlY3Rpb25Cb3hOb2Rlcy5mb3JFYWNoKCBjb2xsZWN0aW9uQm94Tm9kZSA9PiB7XHJcbiAgICAgIGNvbGxlY3Rpb25Cb3hOb2RlLnVwZGF0ZVBvc2l0aW9uKCk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFNb2xlY3VsZS5yZWdpc3RlciggJ0NvbGxlY3Rpb25BcmVhTm9kZScsIENvbGxlY3Rpb25BcmVhTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBDb2xsZWN0aW9uQXJlYU5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBTSxzREFBc0Q7QUFDaEYsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDckUsT0FBT0MsZUFBZSxNQUFNLDhEQUE4RDtBQUMxRixPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLHlCQUF5QixNQUFNLGdDQUFnQztBQUN0RSxPQUFPQyx1QkFBdUIsTUFBTSw4QkFBOEI7QUFFbEUsTUFBTUMsa0JBQWtCLFNBQVNOLElBQUksQ0FBQztFQUNwQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxVQUFVLEVBQUVDLHNCQUFzQixFQUFFQyxhQUFhLEVBQUVDLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRztJQUN2RyxLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUcsRUFBRTs7SUFFNUI7SUFDQSxNQUFNQyxzQkFBc0IsR0FBRyxJQUFJYixJQUFJLENBQUU7TUFBRWMsT0FBTyxFQUFFO0lBQUcsQ0FBRSxDQUFDO0lBQzFELElBQUksQ0FBQ0MsUUFBUSxDQUFFRixzQkFBdUIsQ0FBQzs7SUFFdkM7SUFDQU4sVUFBVSxDQUFDUyxlQUFlLENBQUNDLE9BQU8sQ0FBRUMsYUFBYSxJQUFJO01BQ25ELE1BQU1DLGlCQUFpQixHQUFHWCxzQkFBc0IsR0FBRyxJQUFJSix1QkFBdUIsQ0FBRWMsYUFBYSxFQUFFVCxhQUFhLEVBQUVDLGtCQUFtQixDQUFDLEdBQ3hHLElBQUlQLHlCQUF5QixDQUFFZSxhQUFhLEVBQUVULGFBQWEsRUFBRUMsa0JBQW1CLENBQUM7TUFDM0csSUFBSSxDQUFDRSxrQkFBa0IsQ0FBQ1EsSUFBSSxDQUFFRCxpQkFBa0IsQ0FBQztNQUNqRE4sc0JBQXNCLENBQUNFLFFBQVEsQ0FBRUksaUJBQWtCLENBQUM7SUFDdEQsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUUscUJBQXFCLEdBQUcsSUFBSXhCLGFBQWEsQ0FBRTtNQUMvQ3lCLFFBQVFBLENBQUEsRUFBRztRQUNUZixVQUFVLENBQUNnQixpQkFBaUIsQ0FBQyxDQUFDO1FBQzlCWixrQkFBa0IsQ0FBQyxDQUFDO01BQ3RCLENBQUM7TUFDRGEsVUFBVSxFQUFFLEVBQUU7TUFDZEMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFLENBQUM7TUFDVkMsU0FBUyxFQUFFN0IsS0FBSyxDQUFDOEIsTUFBTTtNQUN2QkMsV0FBVyxFQUFFNUI7SUFDZixDQUFFLENBQUM7SUFDSG9CLHFCQUFxQixDQUFDUyxTQUFTLEdBQUdULHFCQUFxQixDQUFDVSxNQUFNLENBQUNDLE9BQU8sQ0FBRSxDQUFFLENBQUM7O0lBRTNFO0lBQ0EsTUFBTUMsYUFBYSxHQUFHQSxDQUFBLEtBQU07TUFBRVoscUJBQXFCLENBQUNhLE9BQU8sR0FBR0MsQ0FBQyxDQUFDQyxJQUFJLENBQUU3QixVQUFVLENBQUNTLGVBQWUsRUFBRXFCLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxnQkFBZ0IsQ0FBQ0MsS0FBTSxDQUFDO0lBQUUsQ0FBQztJQUN4SWhDLFVBQVUsQ0FBQ1MsZUFBZSxDQUFDQyxPQUFPLENBQUVvQixHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsZ0JBQWdCLENBQUNFLElBQUksQ0FBRVAsYUFBYyxDQUFFLENBQUM7SUFFdkZwQixzQkFBc0IsQ0FBQ0UsUUFBUSxDQUFFTSxxQkFBc0IsQ0FBQztFQUMxRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VvQiw0QkFBNEJBLENBQUEsRUFBRztJQUM3QixJQUFJLENBQUM3QixrQkFBa0IsQ0FBQ0ssT0FBTyxDQUFFRSxpQkFBaUIsSUFBSTtNQUNwREEsaUJBQWlCLENBQUN1QixjQUFjLENBQUMsQ0FBQztJQUNwQyxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUF4QyxjQUFjLENBQUN5QyxRQUFRLENBQUUsb0JBQW9CLEVBQUV0QyxrQkFBbUIsQ0FBQztBQUNuRSxlQUFlQSxrQkFBa0IifQ==