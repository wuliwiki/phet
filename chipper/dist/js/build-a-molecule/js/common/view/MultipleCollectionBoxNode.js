// Copyright 2020-2022, University of Colorado Boulder

/**
 * Displays a collection box that can collect multiple molecules with two text labels above. One shows the "goal", and the other shows the current
 * quantity present in the box.
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { RichText } from '../../../../scenery/js/imports.js';
import buildAMolecule from '../../buildAMolecule.js';
import BuildAMoleculeStrings from '../../BuildAMoleculeStrings.js';
import BAMConstants from '../BAMConstants.js';
import CollectionBoxNode from './CollectionBoxNode.js';
class MultipleCollectionBoxNode extends CollectionBoxNode {
  /**
   * @param {CollectionBox} box
   * @param {function} toModelBounds
   * @param {function} showDialogCallback
   */
  constructor(box, toModelBounds, showDialogCallback) {
    super(box, toModelBounds, showDialogCallback);

    // Number of molecules that can be collected
    const quantityNode = new RichText('', {
      font: new PhetFont({
        size: 14
      }),
      maxWidth: BAMConstants.TEXT_MAX_WIDTH
    });

    // Update the number of collections available
    box.quantityProperty.link(quantity => {
      if (quantity === 0) {
        quantityNode.string = BuildAMoleculeStrings.collectionMultipleQuantityEmpty;
      } else {
        quantityNode.string = StringUtils.fillIn(BuildAMoleculeStrings.collectionMultipleQuantityPattern, {
          number: quantity,
          formula: box.moleculeType.getGeneralFormulaFragment()
        });
      }
    });
    this.insertChild(0, quantityNode);

    // General formula for the molecule goal
    this.insertChild(0, new RichText(StringUtils.fillIn(BuildAMoleculeStrings.collectionMultipleGoalPattern, {
      number: box.capacity,
      formula: box.moleculeType.getGeneralFormulaFragment()
    }), {
      font: new PhetFont({
        size: 15,
        weight: 'bold'
      }),
      maxWidth: BAMConstants.TEXT_MAX_WIDTH
    }));
  }
}
buildAMolecule.register('MultipleCollectionBoxNode', MultipleCollectionBoxNode);
export default MultipleCollectionBoxNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIlBoZXRGb250IiwiUmljaFRleHQiLCJidWlsZEFNb2xlY3VsZSIsIkJ1aWxkQU1vbGVjdWxlU3RyaW5ncyIsIkJBTUNvbnN0YW50cyIsIkNvbGxlY3Rpb25Cb3hOb2RlIiwiTXVsdGlwbGVDb2xsZWN0aW9uQm94Tm9kZSIsImNvbnN0cnVjdG9yIiwiYm94IiwidG9Nb2RlbEJvdW5kcyIsInNob3dEaWFsb2dDYWxsYmFjayIsInF1YW50aXR5Tm9kZSIsImZvbnQiLCJzaXplIiwibWF4V2lkdGgiLCJURVhUX01BWF9XSURUSCIsInF1YW50aXR5UHJvcGVydHkiLCJsaW5rIiwicXVhbnRpdHkiLCJzdHJpbmciLCJjb2xsZWN0aW9uTXVsdGlwbGVRdWFudGl0eUVtcHR5IiwiZmlsbEluIiwiY29sbGVjdGlvbk11bHRpcGxlUXVhbnRpdHlQYXR0ZXJuIiwibnVtYmVyIiwiZm9ybXVsYSIsIm1vbGVjdWxlVHlwZSIsImdldEdlbmVyYWxGb3JtdWxhRnJhZ21lbnQiLCJpbnNlcnRDaGlsZCIsImNvbGxlY3Rpb25NdWx0aXBsZUdvYWxQYXR0ZXJuIiwiY2FwYWNpdHkiLCJ3ZWlnaHQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk11bHRpcGxlQ29sbGVjdGlvbkJveE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlzcGxheXMgYSBjb2xsZWN0aW9uIGJveCB0aGF0IGNhbiBjb2xsZWN0IG11bHRpcGxlIG1vbGVjdWxlcyB3aXRoIHR3byB0ZXh0IGxhYmVscyBhYm92ZS4gT25lIHNob3dzIHRoZSBcImdvYWxcIiwgYW5kIHRoZSBvdGhlciBzaG93cyB0aGUgY3VycmVudFxyXG4gKiBxdWFudGl0eSBwcmVzZW50IGluIHRoZSBib3guXHJcbiAqXHJcbiAqIEBhdXRob3IgRGVuemVsbCBCYXJuZXR0IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBSaWNoVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBidWlsZEFNb2xlY3VsZSBmcm9tICcuLi8uLi9idWlsZEFNb2xlY3VsZS5qcyc7XHJcbmltcG9ydCBCdWlsZEFNb2xlY3VsZVN0cmluZ3MgZnJvbSAnLi4vLi4vQnVpbGRBTW9sZWN1bGVTdHJpbmdzLmpzJztcclxuaW1wb3J0IEJBTUNvbnN0YW50cyBmcm9tICcuLi9CQU1Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ29sbGVjdGlvbkJveE5vZGUgZnJvbSAnLi9Db2xsZWN0aW9uQm94Tm9kZS5qcyc7XHJcblxyXG5jbGFzcyBNdWx0aXBsZUNvbGxlY3Rpb25Cb3hOb2RlIGV4dGVuZHMgQ29sbGVjdGlvbkJveE5vZGUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q29sbGVjdGlvbkJveH0gYm94XHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdG9Nb2RlbEJvdW5kc1xyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNob3dEaWFsb2dDYWxsYmFja1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBib3gsIHRvTW9kZWxCb3VuZHMsIHNob3dEaWFsb2dDYWxsYmFjayApIHtcclxuICAgIHN1cGVyKCBib3gsIHRvTW9kZWxCb3VuZHMsIHNob3dEaWFsb2dDYWxsYmFjayApO1xyXG5cclxuICAgIC8vIE51bWJlciBvZiBtb2xlY3VsZXMgdGhhdCBjYW4gYmUgY29sbGVjdGVkXHJcbiAgICBjb25zdCBxdWFudGl0eU5vZGUgPSBuZXcgUmljaFRleHQoICcnLCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCgge1xyXG4gICAgICAgIHNpemU6IDE0XHJcbiAgICAgIH0gKSxcclxuICAgICAgbWF4V2lkdGg6IEJBTUNvbnN0YW50cy5URVhUX01BWF9XSURUSFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgbnVtYmVyIG9mIGNvbGxlY3Rpb25zIGF2YWlsYWJsZVxyXG4gICAgYm94LnF1YW50aXR5UHJvcGVydHkubGluayggcXVhbnRpdHkgPT4ge1xyXG4gICAgICBpZiAoIHF1YW50aXR5ID09PSAwICkge1xyXG4gICAgICAgIHF1YW50aXR5Tm9kZS5zdHJpbmcgPSBCdWlsZEFNb2xlY3VsZVN0cmluZ3MuY29sbGVjdGlvbk11bHRpcGxlUXVhbnRpdHlFbXB0eTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBxdWFudGl0eU5vZGUuc3RyaW5nID0gU3RyaW5nVXRpbHMuZmlsbEluKCBCdWlsZEFNb2xlY3VsZVN0cmluZ3MuY29sbGVjdGlvbk11bHRpcGxlUXVhbnRpdHlQYXR0ZXJuLCB7XHJcbiAgICAgICAgICBudW1iZXI6IHF1YW50aXR5LFxyXG4gICAgICAgICAgZm9ybXVsYTogYm94Lm1vbGVjdWxlVHlwZS5nZXRHZW5lcmFsRm9ybXVsYUZyYWdtZW50KClcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICAgIHRoaXMuaW5zZXJ0Q2hpbGQoIDAsIHF1YW50aXR5Tm9kZSApO1xyXG5cclxuICAgIC8vIEdlbmVyYWwgZm9ybXVsYSBmb3IgdGhlIG1vbGVjdWxlIGdvYWxcclxuICAgIHRoaXMuaW5zZXJ0Q2hpbGQoIDAsIG5ldyBSaWNoVGV4dCggU3RyaW5nVXRpbHMuZmlsbEluKCBCdWlsZEFNb2xlY3VsZVN0cmluZ3MuY29sbGVjdGlvbk11bHRpcGxlR29hbFBhdHRlcm4sIHtcclxuICAgICAgbnVtYmVyOiBib3guY2FwYWNpdHksXHJcbiAgICAgIGZvcm11bGE6IGJveC5tb2xlY3VsZVR5cGUuZ2V0R2VuZXJhbEZvcm11bGFGcmFnbWVudCgpXHJcbiAgICB9ICksIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCB7XHJcbiAgICAgICAgc2l6ZTogMTUsXHJcbiAgICAgICAgd2VpZ2h0OiAnYm9sZCdcclxuICAgICAgfSApLFxyXG4gICAgICBtYXhXaWR0aDogQkFNQ29uc3RhbnRzLlRFWFRfTUFYX1dJRFRIXHJcbiAgICB9ICkgKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5idWlsZEFNb2xlY3VsZS5yZWdpc3RlciggJ011bHRpcGxlQ29sbGVjdGlvbkJveE5vZGUnLCBNdWx0aXBsZUNvbGxlY3Rpb25Cb3hOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IE11bHRpcGxlQ29sbGVjdGlvbkJveE5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsUUFBUSxRQUFRLG1DQUFtQztBQUM1RCxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyxZQUFZLE1BQU0sb0JBQW9CO0FBQzdDLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUV0RCxNQUFNQyx5QkFBeUIsU0FBU0QsaUJBQWlCLENBQUM7RUFDeEQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxHQUFHLEVBQUVDLGFBQWEsRUFBRUMsa0JBQWtCLEVBQUc7SUFDcEQsS0FBSyxDQUFFRixHQUFHLEVBQUVDLGFBQWEsRUFBRUMsa0JBQW1CLENBQUM7O0lBRS9DO0lBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUlWLFFBQVEsQ0FBRSxFQUFFLEVBQUU7TUFDckNXLElBQUksRUFBRSxJQUFJWixRQUFRLENBQUU7UUFDbEJhLElBQUksRUFBRTtNQUNSLENBQUUsQ0FBQztNQUNIQyxRQUFRLEVBQUVWLFlBQVksQ0FBQ1c7SUFDekIsQ0FBRSxDQUFDOztJQUVIO0lBQ0FQLEdBQUcsQ0FBQ1EsZ0JBQWdCLENBQUNDLElBQUksQ0FBRUMsUUFBUSxJQUFJO01BQ3JDLElBQUtBLFFBQVEsS0FBSyxDQUFDLEVBQUc7UUFDcEJQLFlBQVksQ0FBQ1EsTUFBTSxHQUFHaEIscUJBQXFCLENBQUNpQiwrQkFBK0I7TUFDN0UsQ0FBQyxNQUNJO1FBQ0hULFlBQVksQ0FBQ1EsTUFBTSxHQUFHcEIsV0FBVyxDQUFDc0IsTUFBTSxDQUFFbEIscUJBQXFCLENBQUNtQixpQ0FBaUMsRUFBRTtVQUNqR0MsTUFBTSxFQUFFTCxRQUFRO1VBQ2hCTSxPQUFPLEVBQUVoQixHQUFHLENBQUNpQixZQUFZLENBQUNDLHlCQUF5QixDQUFDO1FBQ3RELENBQUUsQ0FBQztNQUNMO0lBQ0YsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDQyxXQUFXLENBQUUsQ0FBQyxFQUFFaEIsWUFBYSxDQUFDOztJQUVuQztJQUNBLElBQUksQ0FBQ2dCLFdBQVcsQ0FBRSxDQUFDLEVBQUUsSUFBSTFCLFFBQVEsQ0FBRUYsV0FBVyxDQUFDc0IsTUFBTSxDQUFFbEIscUJBQXFCLENBQUN5Qiw2QkFBNkIsRUFBRTtNQUMxR0wsTUFBTSxFQUFFZixHQUFHLENBQUNxQixRQUFRO01BQ3BCTCxPQUFPLEVBQUVoQixHQUFHLENBQUNpQixZQUFZLENBQUNDLHlCQUF5QixDQUFDO0lBQ3RELENBQUUsQ0FBQyxFQUFFO01BQ0hkLElBQUksRUFBRSxJQUFJWixRQUFRLENBQUU7UUFDbEJhLElBQUksRUFBRSxFQUFFO1FBQ1JpQixNQUFNLEVBQUU7TUFDVixDQUFFLENBQUM7TUFDSGhCLFFBQVEsRUFBRVYsWUFBWSxDQUFDVztJQUN6QixDQUFFLENBQUUsQ0FBQztFQUNQO0FBQ0Y7QUFHQWIsY0FBYyxDQUFDNkIsUUFBUSxDQUFFLDJCQUEyQixFQUFFekIseUJBQTBCLENBQUM7QUFDakYsZUFBZUEseUJBQXlCIn0=