// Copyright 2020-2022, University of Colorado Boulder

/**
 * A panel that shows collection areas for different collections, and allows switching between those collections
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { RichText } from '../../../../scenery/js/imports.js';
import buildAMolecule from '../../buildAMolecule.js';
import BuildAMoleculeStrings from '../../BuildAMoleculeStrings.js';
import BAMConstants from '../BAMConstants.js';
import CollectionBoxNode from './CollectionBoxNode.js';
class SingleCollectionBoxNode extends CollectionBoxNode {
  /**
   * @param {CollectionBox} box
   * @param {function} toModelBounds
   * @param {function} showDialogCallback
   */
  constructor(box, toModelBounds, showDialogCallback) {
    super(box, toModelBounds, showDialogCallback);
    assert && assert(box.capacity === 1);
    this.insertChild(0, new RichText(StringUtils.fillIn(BuildAMoleculeStrings.collectionSinglePattern, {
      general: StringUtils.wrapLTR(box.moleculeType.getGeneralFormulaFragment()),
      display: box.moleculeType.getDisplayName()
    }), {
      font: new PhetFont({
        size: 16,
        weight: 'bold'
      }),
      maxWidth: BAMConstants.TEXT_MAX_WIDTH
    }));
  }
}
buildAMolecule.register('SingleCollectionBoxNode', SingleCollectionBoxNode);
export default SingleCollectionBoxNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIlBoZXRGb250IiwiUmljaFRleHQiLCJidWlsZEFNb2xlY3VsZSIsIkJ1aWxkQU1vbGVjdWxlU3RyaW5ncyIsIkJBTUNvbnN0YW50cyIsIkNvbGxlY3Rpb25Cb3hOb2RlIiwiU2luZ2xlQ29sbGVjdGlvbkJveE5vZGUiLCJjb25zdHJ1Y3RvciIsImJveCIsInRvTW9kZWxCb3VuZHMiLCJzaG93RGlhbG9nQ2FsbGJhY2siLCJhc3NlcnQiLCJjYXBhY2l0eSIsImluc2VydENoaWxkIiwiZmlsbEluIiwiY29sbGVjdGlvblNpbmdsZVBhdHRlcm4iLCJnZW5lcmFsIiwid3JhcExUUiIsIm1vbGVjdWxlVHlwZSIsImdldEdlbmVyYWxGb3JtdWxhRnJhZ21lbnQiLCJkaXNwbGF5IiwiZ2V0RGlzcGxheU5hbWUiLCJmb250Iiwic2l6ZSIsIndlaWdodCIsIm1heFdpZHRoIiwiVEVYVF9NQVhfV0lEVEgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNpbmdsZUNvbGxlY3Rpb25Cb3hOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgcGFuZWwgdGhhdCBzaG93cyBjb2xsZWN0aW9uIGFyZWFzIGZvciBkaWZmZXJlbnQgY29sbGVjdGlvbnMsIGFuZCBhbGxvd3Mgc3dpdGNoaW5nIGJldHdlZW4gdGhvc2UgY29sbGVjdGlvbnNcclxuICpcclxuICogQGF1dGhvciBEZW56ZWxsIEJhcm5ldHQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IFJpY2hUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJ1aWxkQU1vbGVjdWxlIGZyb20gJy4uLy4uL2J1aWxkQU1vbGVjdWxlLmpzJztcclxuaW1wb3J0IEJ1aWxkQU1vbGVjdWxlU3RyaW5ncyBmcm9tICcuLi8uLi9CdWlsZEFNb2xlY3VsZVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQkFNQ29uc3RhbnRzIGZyb20gJy4uL0JBTUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBDb2xsZWN0aW9uQm94Tm9kZSBmcm9tICcuL0NvbGxlY3Rpb25Cb3hOb2RlLmpzJztcclxuXHJcbmNsYXNzIFNpbmdsZUNvbGxlY3Rpb25Cb3hOb2RlIGV4dGVuZHMgQ29sbGVjdGlvbkJveE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0NvbGxlY3Rpb25Cb3h9IGJveFxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHRvTW9kZWxCb3VuZHNcclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzaG93RGlhbG9nQ2FsbGJhY2tcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYm94LCB0b01vZGVsQm91bmRzLCBzaG93RGlhbG9nQ2FsbGJhY2sgKSB7XHJcbiAgICBzdXBlciggYm94LCB0b01vZGVsQm91bmRzLCBzaG93RGlhbG9nQ2FsbGJhY2sgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGJveC5jYXBhY2l0eSA9PT0gMSApO1xyXG4gICAgdGhpcy5pbnNlcnRDaGlsZCggMCwgbmV3IFJpY2hUZXh0KCBTdHJpbmdVdGlscy5maWxsSW4oIEJ1aWxkQU1vbGVjdWxlU3RyaW5ncy5jb2xsZWN0aW9uU2luZ2xlUGF0dGVybiwge1xyXG4gICAgICBnZW5lcmFsOiBTdHJpbmdVdGlscy53cmFwTFRSKCBib3gubW9sZWN1bGVUeXBlLmdldEdlbmVyYWxGb3JtdWxhRnJhZ21lbnQoKSApLFxyXG4gICAgICBkaXNwbGF5OiBib3gubW9sZWN1bGVUeXBlLmdldERpc3BsYXlOYW1lKClcclxuICAgIH0gKSwge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIHsgc2l6ZTogMTYsIHdlaWdodDogJ2JvbGQnIH0gKSxcclxuICAgICAgbWF4V2lkdGg6IEJBTUNvbnN0YW50cy5URVhUX01BWF9XSURUSFxyXG4gICAgfSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFNb2xlY3VsZS5yZWdpc3RlciggJ1NpbmdsZUNvbGxlY3Rpb25Cb3hOb2RlJywgU2luZ2xlQ29sbGVjdGlvbkJveE5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgU2luZ2xlQ29sbGVjdGlvbkJveE5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLFFBQVEsUUFBUSxtQ0FBbUM7QUFDNUQsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsWUFBWSxNQUFNLG9CQUFvQjtBQUM3QyxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFFdEQsTUFBTUMsdUJBQXVCLFNBQVNELGlCQUFpQixDQUFDO0VBRXREO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsR0FBRyxFQUFFQyxhQUFhLEVBQUVDLGtCQUFrQixFQUFHO0lBQ3BELEtBQUssQ0FBRUYsR0FBRyxFQUFFQyxhQUFhLEVBQUVDLGtCQUFtQixDQUFDO0lBQy9DQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsR0FBRyxDQUFDSSxRQUFRLEtBQUssQ0FBRSxDQUFDO0lBQ3RDLElBQUksQ0FBQ0MsV0FBVyxDQUFFLENBQUMsRUFBRSxJQUFJWixRQUFRLENBQUVGLFdBQVcsQ0FBQ2UsTUFBTSxDQUFFWCxxQkFBcUIsQ0FBQ1ksdUJBQXVCLEVBQUU7TUFDcEdDLE9BQU8sRUFBRWpCLFdBQVcsQ0FBQ2tCLE9BQU8sQ0FBRVQsR0FBRyxDQUFDVSxZQUFZLENBQUNDLHlCQUF5QixDQUFDLENBQUUsQ0FBQztNQUM1RUMsT0FBTyxFQUFFWixHQUFHLENBQUNVLFlBQVksQ0FBQ0csY0FBYyxDQUFDO0lBQzNDLENBQUUsQ0FBQyxFQUFFO01BQ0hDLElBQUksRUFBRSxJQUFJdEIsUUFBUSxDQUFFO1FBQUV1QixJQUFJLEVBQUUsRUFBRTtRQUFFQyxNQUFNLEVBQUU7TUFBTyxDQUFFLENBQUM7TUFDbERDLFFBQVEsRUFBRXJCLFlBQVksQ0FBQ3NCO0lBQ3pCLENBQUUsQ0FBRSxDQUFDO0VBQ1A7QUFDRjtBQUVBeEIsY0FBYyxDQUFDeUIsUUFBUSxDQUFFLHlCQUF5QixFQUFFckIsdUJBQXdCLENBQUM7QUFDN0UsZUFBZUEsdUJBQXVCIn0=