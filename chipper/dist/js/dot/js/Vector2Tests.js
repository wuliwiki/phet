// Copyright 2017-2022, University of Colorado Boulder

/**
 * Vector2 tests
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Vector2 from './Vector2.js';
QUnit.module('Vector2');
function approximateEquals(assert, a, b, msg) {
  assert.ok(Math.abs(a - b) < 0.00000001, `${msg} expected: ${b}, result: ${a}`);
}
QUnit.test('distance', assert => {
  approximateEquals(assert, new Vector2(2, 0).distance(Vector2.ZERO), 2);
  approximateEquals(assert, new Vector2(2, 0).distanceSquared(Vector2.ZERO), 4);
  approximateEquals(assert, new Vector2(4, 7).distance(new Vector2(6, 9)), 2 * Math.sqrt(2));
  approximateEquals(assert, new Vector2(4, 7).distanceSquared(new Vector2(6, 9)), 8);
});
QUnit.test('component average', assert => {
  const vector1 = new Vector2(2, 2);
  const vector2 = new Vector2(3, 3);
  const vectors = [vector1, vector2];
  let average = Vector2.average(vectors);
  assert.ok(average.x === 2.5, 'x average');
  assert.ok(average.y === 2.5, 'y average');
  vectors.push(new Vector2(7, 1));
  average = Vector2.average(vectors);
  assert.ok(average.x === 4, 'x average again');
  assert.ok(average.y === 2, 'y average again');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiUVVuaXQiLCJtb2R1bGUiLCJhcHByb3hpbWF0ZUVxdWFscyIsImFzc2VydCIsImEiLCJiIiwibXNnIiwib2siLCJNYXRoIiwiYWJzIiwidGVzdCIsImRpc3RhbmNlIiwiWkVSTyIsImRpc3RhbmNlU3F1YXJlZCIsInNxcnQiLCJ2ZWN0b3IxIiwidmVjdG9yMiIsInZlY3RvcnMiLCJhdmVyYWdlIiwieCIsInkiLCJwdXNoIl0sInNvdXJjZXMiOlsiVmVjdG9yMlRlc3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZlY3RvcjIgdGVzdHNcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuL1ZlY3RvcjIuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnVmVjdG9yMicgKTtcclxuXHJcbmZ1bmN0aW9uIGFwcHJveGltYXRlRXF1YWxzKCBhc3NlcnQsIGEsIGIsIG1zZyApIHtcclxuICBhc3NlcnQub2soIE1hdGguYWJzKCBhIC0gYiApIDwgMC4wMDAwMDAwMSwgYCR7bXNnfSBleHBlY3RlZDogJHtifSwgcmVzdWx0OiAke2F9YCApO1xyXG59XHJcblxyXG5RVW5pdC50ZXN0KCAnZGlzdGFuY2UnLCBhc3NlcnQgPT4ge1xyXG4gIGFwcHJveGltYXRlRXF1YWxzKCBhc3NlcnQsIG5ldyBWZWN0b3IyKCAyLCAwICkuZGlzdGFuY2UoIFZlY3RvcjIuWkVSTyApLCAyICk7XHJcbiAgYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgbmV3IFZlY3RvcjIoIDIsIDAgKS5kaXN0YW5jZVNxdWFyZWQoIFZlY3RvcjIuWkVSTyApLCA0ICk7XHJcbiAgYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgbmV3IFZlY3RvcjIoIDQsIDcgKS5kaXN0YW5jZSggbmV3IFZlY3RvcjIoIDYsIDkgKSApLCAyICogTWF0aC5zcXJ0KCAyICkgKTtcclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBuZXcgVmVjdG9yMiggNCwgNyApLmRpc3RhbmNlU3F1YXJlZCggbmV3IFZlY3RvcjIoIDYsIDkgKSApLCA4ICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICdjb21wb25lbnQgYXZlcmFnZScsIGFzc2VydCA9PiB7XHJcblxyXG4gIGNvbnN0IHZlY3RvcjEgPSBuZXcgVmVjdG9yMiggMiwgMiApO1xyXG4gIGNvbnN0IHZlY3RvcjIgPSBuZXcgVmVjdG9yMiggMywgMyApO1xyXG4gIGNvbnN0IHZlY3RvcnMgPSBbIHZlY3RvcjEsIHZlY3RvcjIgXTtcclxuICBsZXQgYXZlcmFnZSA9IFZlY3RvcjIuYXZlcmFnZSggdmVjdG9ycyApO1xyXG4gIGFzc2VydC5vayggYXZlcmFnZS54ID09PSAyLjUsICd4IGF2ZXJhZ2UnICk7XHJcbiAgYXNzZXJ0Lm9rKCBhdmVyYWdlLnkgPT09IDIuNSwgJ3kgYXZlcmFnZScgKTtcclxuXHJcbiAgdmVjdG9ycy5wdXNoKCBuZXcgVmVjdG9yMiggNywgMSApICk7XHJcbiAgYXZlcmFnZSA9IFZlY3RvcjIuYXZlcmFnZSggdmVjdG9ycyApO1xyXG4gIGFzc2VydC5vayggYXZlcmFnZS54ID09PSA0LCAneCBhdmVyYWdlIGFnYWluJyApO1xyXG4gIGFzc2VydC5vayggYXZlcmFnZS55ID09PSAyLCAneSBhdmVyYWdlIGFnYWluJyApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLGNBQWM7QUFFbENDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLFNBQVUsQ0FBQztBQUV6QixTQUFTQyxpQkFB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