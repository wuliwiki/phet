// Copyright 2013-2022, University of Colorado Boulder

/**
 * 3-dimensional ray consisting of an origin point and a unit direction vector.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import dot from './dot.js';
export default class Ray3 {
  /**
   * Constructs a 3D ray using the supplied origin position and unit length direction vector
   *
   * @param position - the ray's point of origin
   * @param direction - the ray's unit direction vector
   */
  constructor(position, direction) {
    this.position = position;
    this.direction = direction;
    assert && assert(Math.abs(direction.magnitude - 1) < 0.01, 'the direction must be a unit vector');
  }

  /**
   * Returns a new Ray that has it origin shifted to a position given by an amount distance*this.direction.
   */
  shifted(distance) {
    return new Ray3(this.pointAtDistance(distance), this.direction);
  }

  /**
   * Returns a position that is a distance 'distance' along the ray.
   */
  pointAtDistance(distance) {
    return this.position.plus(this.direction.timesScalar(distance));
  }

  /**
   * Returns the distance of this ray to a plane
   */
  distanceToPlane(plane) {
    return (plane.distance - this.position.dot(plane.normal)) / this.direction.dot(plane.normal);
  }

  /**
   * Returns the attributes of this ray into a string
   */
  toString() {
    return `${this.position.toString()} => ${this.direction.toString()}`;
  }
}
dot.register('Ray3', Ray3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJSYXkzIiwiY29uc3RydWN0b3IiLCJwb3NpdGlvbiIsImRpcmVjdGlvbiIsImFzc2VydCIsIk1hdGgiLCJhYnMiLCJtYWduaXR1ZGUiLCJzaGlmdGVkIiwiZGlzdGFuY2UiLCJwb2ludEF0RGlzdGFuY2UiLCJwbHVzIiwidGltZXNTY2FsYXIiLCJkaXN0YW5jZVRvUGxhbmUiLCJwbGFuZSIsIm5vcm1hbCIsInRvU3RyaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSYXkzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIDMtZGltZW5zaW9uYWwgcmF5IGNvbnNpc3Rpbmcgb2YgYW4gb3JpZ2luIHBvaW50IGFuZCBhIHVuaXQgZGlyZWN0aW9uIHZlY3Rvci5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3QgZnJvbSAnLi9kb3QuanMnO1xyXG5pbXBvcnQgUGxhbmUzIGZyb20gJy4vUGxhbmUzLmpzJztcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSAnLi9WZWN0b3IzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJheTMge1xyXG5cclxuICBwdWJsaWMgcG9zaXRpb246IFZlY3RvcjM7XHJcbiAgcHVibGljIGRpcmVjdGlvbjogVmVjdG9yMztcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0cyBhIDNEIHJheSB1c2luZyB0aGUgc3VwcGxpZWQgb3JpZ2luIHBvc2l0aW9uIGFuZCB1bml0IGxlbmd0aCBkaXJlY3Rpb24gdmVjdG9yXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcG9zaXRpb24gLSB0aGUgcmF5J3MgcG9pbnQgb2Ygb3JpZ2luXHJcbiAgICogQHBhcmFtIGRpcmVjdGlvbiAtIHRoZSByYXkncyB1bml0IGRpcmVjdGlvbiB2ZWN0b3JcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHBvc2l0aW9uOiBWZWN0b3IzLCBkaXJlY3Rpb246IFZlY3RvcjMgKSB7XHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggTWF0aC5hYnMoIGRpcmVjdGlvbi5tYWduaXR1ZGUgLSAxICkgPCAwLjAxLCAndGhlIGRpcmVjdGlvbiBtdXN0IGJlIGEgdW5pdCB2ZWN0b3InICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgbmV3IFJheSB0aGF0IGhhcyBpdCBvcmlnaW4gc2hpZnRlZCB0byBhIHBvc2l0aW9uIGdpdmVuIGJ5IGFuIGFtb3VudCBkaXN0YW5jZSp0aGlzLmRpcmVjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgc2hpZnRlZCggZGlzdGFuY2U6IG51bWJlciApOiBSYXkzIHtcclxuICAgIHJldHVybiBuZXcgUmF5MyggdGhpcy5wb2ludEF0RGlzdGFuY2UoIGRpc3RhbmNlICksIHRoaXMuZGlyZWN0aW9uICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgcG9zaXRpb24gdGhhdCBpcyBhIGRpc3RhbmNlICdkaXN0YW5jZScgYWxvbmcgdGhlIHJheS5cclxuICAgKi9cclxuICBwdWJsaWMgcG9pbnRBdERpc3RhbmNlKCBkaXN0YW5jZTogbnVtYmVyICk6IFZlY3RvcjMge1xyXG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24ucGx1cyggdGhpcy5kaXJlY3Rpb24udGltZXNTY2FsYXIoIGRpc3RhbmNlICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGRpc3RhbmNlIG9mIHRoaXMgcmF5IHRvIGEgcGxhbmVcclxuICAgKi9cclxuICBwdWJsaWMgZGlzdGFuY2VUb1BsYW5lKCBwbGFuZTogUGxhbmUzICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKCBwbGFuZS5kaXN0YW5jZSAtIHRoaXMucG9zaXRpb24uZG90KCBwbGFuZS5ub3JtYWwgKSApIC8gdGhpcy5kaXJlY3Rpb24uZG90KCBwbGFuZS5ub3JtYWwgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGF0dHJpYnV0ZXMgb2YgdGhpcyByYXkgaW50byBhIHN0cmluZ1xyXG4gICAqL1xyXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke3RoaXMucG9zaXRpb24udG9TdHJpbmcoKX0gPT4gJHt0aGlzLmRpcmVjdGlvbi50b1N0cmluZygpfWA7XHJcbiAgfVxyXG59XHJcblxyXG5kb3QucmVnaXN0ZXIoICdSYXkzJywgUmF5MyApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsR0FBRyxNQUFNLFVBQVU7QUFJMUIsZUFBZSxNQUFNQyxJQUFJLENBQUM7RUFLeEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLFFBQWlCLEVBQUVDLFNBQWtCLEVBQUc7SUFFMUQsSUFBSSxDQUFDRCxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDQyxTQUFTLEdBQUdBLFNBQVM7SUFFMUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBRUgsU0FBUyxDQUFDSSxTQUFTLEdBQUcsQ0FBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLHFDQUFzQyxDQUFDO0VBQ3ZHOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxPQUFPQSxDQUFFQyxRQUFnQixFQUFTO0lBQ3ZDLE9BQU8sSUFBSVQsSUFBSSxDQUFFLElBQUksQ0FBQ1UsZUFBZSxDQUFFRCxRQUFTLENBQUMsRUFBRSxJQUFJLENBQUNOLFNBQVUsQ0FBQztFQUNyRTs7RUFFQTtBQUNGO0FBQ0E7RUFDU08sZUFBZUEsQ0FBRUQsUUFBZ0IsRUFBWTtJQUNsRCxPQUFPLElBQUksQ0FBQ1AsUUFBUSxDQUFDUyxJQUFJLENBQUUsSUFBSSxDQUFDUixTQUFTLENBQUNTLFdBQVcsQ0FBRUgsUUFBUyxDQUFFLENBQUM7RUFDckU7O0VBRUE7QUFDRjtBQUNBO0VBQ1NJLGVBQWVBLENBQUVDLEtBQWEsRUFBVztJQUM5QyxPQUFPLENBQUVBLEtBQUssQ0FBQ0wsUUFBUSxHQUFHLElBQUksQ0FBQ1AsUUFBUSxDQUFDSCxHQUFHLENBQUVlLEtBQUssQ0FBQ0MsTUFBTyxDQUFDLElBQUssSUFBSSxDQUFDWixTQUFTLENBQUNKLEdBQUcsQ0FBRWUsS0FBSyxDQUFDQyxNQUFPLENBQUM7RUFDcEc7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLFFBQVFBLENBQUEsRUFBVztJQUN4QixPQUFRLEdBQUUsSUFBSSxDQUFDZCxRQUFRLENBQUNjLFFBQVEsQ0FBQyxDQUFFLE9BQU0sSUFBSSxDQUFDYixTQUFTLENBQUNhLFFBQVEsQ0FBQyxDQUFFLEVBQUM7RUFDdEU7QUFDRjtBQUVBakIsR0FBRyxDQUFDa0IsUUFBUSxDQUFFLE1BQU0sRUFBRWpCLElBQUssQ0FBQyJ9