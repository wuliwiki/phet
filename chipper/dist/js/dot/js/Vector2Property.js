// Copyright 2019-2023, University of Colorado Boulder

/**
 * Property whose value must be a Vector2.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../axon/js/Property.js';
import Vector2 from './Vector2.js';
import dot from './dot.js';
import optionize from '../../phet-core/js/optionize.js';
const VALID_NON_NAN = {
  isValidValue: v => !isNaN(v.x) && !isNaN(v.y),
  validationMessage: 'Vector2 x/y should not be NaN'
};
class Vector2Property extends Property {
  constructor(initialValue, providedOptions) {
    // Fill in superclass options that are controlled by Vector2Property.
    const options = optionize()({
      valueType: Vector2,
      // {Bounds2|null} - Confine the valid area of acceptable Vector2 values to within a Bounds2.
      validBounds: null,
      validators: [],
      // phet-io
      phetioValueType: Vector2.Vector2IO
    }, providedOptions);
    options.validators.push(VALID_NON_NAN);
    options.validBounds && options.validators.push({
      validationMessage: 'Vector2 is not within validBounds',
      isValidValue: v => options.validBounds.containsPoint(v)
    });
    super(initialValue, options);
    this.validBounds = options.validBounds;
  }
}
dot.register('Vector2Property', Vector2Property);
export default Vector2Property;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJkb3QiLCJvcHRpb25pemUiLCJWQUxJRF9OT05fTkFOIiwiaXNWYWxpZFZhbHVlIiwidiIsImlzTmFOIiwieCIsInkiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIlZlY3RvcjJQcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwiaW5pdGlhbFZhbHVlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInZhbHVlVHlwZSIsInZhbGlkQm91bmRzIiwidmFsaWRhdG9ycyIsInBoZXRpb1ZhbHVlVHlwZSIsIlZlY3RvcjJJTyIsInB1c2giLCJjb250YWluc1BvaW50IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJWZWN0b3IyUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUHJvcGVydHkgd2hvc2UgdmFsdWUgbXVzdCBiZSBhIFZlY3RvcjIuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5LCB7IFByb3BlcnR5T3B0aW9ucyB9IGZyb20gJy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4vQm91bmRzMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4vVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBkb3QgZnJvbSAnLi9kb3QuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxuY29uc3QgVkFMSURfTk9OX05BTiA9IHsgaXNWYWxpZFZhbHVlOiAoIHY6IFZlY3RvcjIgKSA9PiAhaXNOYU4oIHYueCApICYmICFpc05hTiggdi55ICksIHZhbGlkYXRpb25NZXNzYWdlOiAnVmVjdG9yMiB4L3kgc2hvdWxkIG5vdCBiZSBOYU4nIH07XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHZhbGlkQm91bmRzPzogQm91bmRzMiB8IG51bGw7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBWZWN0b3IyUHJvcGVydHlPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFByb3BlcnR5T3B0aW9uczxWZWN0b3IyPiwgJ3BoZXRpb1ZhbHVlVHlwZScgfCAndmFsdWVUeXBlJz47XHJcblxyXG5jbGFzcyBWZWN0b3IyUHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eTxWZWN0b3IyPiB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHZhbGlkQm91bmRzOiBCb3VuZHMyIHwgbnVsbDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBpbml0aWFsVmFsdWU6IFZlY3RvcjIsIHByb3ZpZGVkT3B0aW9ucz86IFZlY3RvcjJQcm9wZXJ0eU9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gRmlsbCBpbiBzdXBlcmNsYXNzIG9wdGlvbnMgdGhhdCBhcmUgY29udHJvbGxlZCBieSBWZWN0b3IyUHJvcGVydHkuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFZlY3RvcjJQcm9wZXJ0eU9wdGlvbnMsIFNlbGZPcHRpb25zLCBQcm9wZXJ0eU9wdGlvbnM8VmVjdG9yMj4+KCkoIHtcclxuICAgICAgdmFsdWVUeXBlOiBWZWN0b3IyLFxyXG5cclxuICAgICAgLy8ge0JvdW5kczJ8bnVsbH0gLSBDb25maW5lIHRoZSB2YWxpZCBhcmVhIG9mIGFjY2VwdGFibGUgVmVjdG9yMiB2YWx1ZXMgdG8gd2l0aGluIGEgQm91bmRzMi5cclxuICAgICAgdmFsaWRCb3VuZHM6IG51bGwsXHJcblxyXG4gICAgICB2YWxpZGF0b3JzOiBbXSxcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgcGhldGlvVmFsdWVUeXBlOiBWZWN0b3IyLlZlY3RvcjJJT1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy52YWxpZGF0b3JzLnB1c2goIFZBTElEX05PTl9OQU4gKTtcclxuXHJcbiAgICBvcHRpb25zLnZhbGlkQm91bmRzICYmIG9wdGlvbnMudmFsaWRhdG9ycy5wdXNoKCB7XHJcbiAgICAgIHZhbGlkYXRpb25NZXNzYWdlOiAnVmVjdG9yMiBpcyBub3Qgd2l0aGluIHZhbGlkQm91bmRzJyxcclxuICAgICAgaXNWYWxpZFZhbHVlOiB2ID0+IG9wdGlvbnMudmFsaWRCb3VuZHMhLmNvbnRhaW5zUG9pbnQoIHYgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBpbml0aWFsVmFsdWUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnZhbGlkQm91bmRzID0gb3B0aW9ucy52YWxpZEJvdW5kcztcclxuICB9XHJcbn1cclxuXHJcbmRvdC5yZWdpc3RlciggJ1ZlY3RvcjJQcm9wZXJ0eScsIFZlY3RvcjJQcm9wZXJ0eSApO1xyXG5leHBvcnQgZGVmYXVsdCBWZWN0b3IyUHJvcGVydHk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBMkIsMkJBQTJCO0FBR3JFLE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBQ2xDLE9BQU9DLEdBQUcsTUFBTSxVQUFVO0FBQzFCLE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFFdkQsTUFBTUMsYUFBYSxHQUFHO0VBQUVDLFlBQVksRUFBSUMsQ0FBVSxJQUFNLENBQUNDLEtBQUssQ0FBRUQsQ0FBQyxDQUFDRSxDQUFFLENBQUMsSUFBSSxDQUFDRCxLQUFLLENBQUVELENBQUMsQ0FBQ0csQ0FBRSxDQUFDO0VBQUVDLGlCQUFpQixFQUFFO0FBQWdDLENBQUM7QUFRNUksTUFBTUMsZUFBZSxTQUFTWCxRQUFRLENBQVU7RUFHdkNZLFdBQVdBLENBQUVDLFlBQXFCLEVBQUVDLGVBQXdDLEVBQUc7SUFFcEY7SUFDQSxNQUFNQyxPQUFPLEdBQUdaLFNBQVMsQ0FBZ0UsQ0FBQyxDQUFFO01BQzFGYSxTQUFTLEVBQUVmLE9BQU87TUFFbEI7TUFDQWdCLFdBQVcsRUFBRSxJQUFJO01BRWpCQyxVQUFVLEVBQUUsRUFBRTtNQUVkO01BQ0FDLGVBQWUsRUFBRWxCLE9BQU8sQ0FBQ21CO0lBQzNCLENBQUMsRUFBRU4sZUFBZ0IsQ0FBQztJQUVwQkMsT0FBTyxDQUFDRyxVQUFVLENBQUNHLElBQUksQ0FBRWpCLGFBQWMsQ0FBQztJQUV4Q1csT0FBTyxDQUFDRSxXQUFXLElBQUlGLE9BQU8sQ0FBQ0csVUFBVSxDQUFDRyxJQUFJLENBQUU7TUFDOUNYLGlCQUFpQixFQUFFLG1DQUFtQztNQUN0REwsWUFBWSxFQUFFQyxDQUFDLElBQUlTLE9BQU8sQ0FBQ0UsV0FBVyxDQUFFSyxhQUFhLENBQUVoQixDQUFFO0lBQzNELENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRU8sWUFBWSxFQUFFRSxPQUFRLENBQUM7SUFFOUIsSUFBSSxDQUFDRSxXQUFXLEdBQUdGLE9BQU8sQ0FBQ0UsV0FBVztFQUN4QztBQUNGO0FBRUFmLEdBQUcsQ0FBQ3FCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRVosZUFBZ0IsQ0FBQztBQUNsRCxlQUFlQSxlQUFlIn0=