// Copyright 2017-2021, University of Colorado Boulder

/**
 * Bounds2 tests
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import LinearFunction from './LinearFunction.js';
QUnit.module('LinearFunction');
function approximateEquals(assert, a, b, msg) {
  assert.ok(Math.abs(a - b) < 0.00000001, `${msg} expected: ${b}, result: ${a}`);
}
QUnit.test('LinearFunction', assert => {
  const f = new LinearFunction(4, 8, 8, 0); // not clamped

  approximateEquals(assert, f.evaluate(0), 16);
  approximateEquals(assert, f.evaluate(4), 8);
  approximateEquals(assert, f.evaluate(8), 0);
  approximateEquals(assert, f.evaluate(6), 4);
  approximateEquals(assert, f.inverse(16), 0);
  approximateEquals(assert, f.inverse(8), 4);
  approximateEquals(assert, f.inverse(0), 8);
  approximateEquals(assert, f.inverse(4), 6);
  const g = new LinearFunction(4, 8, 8, 0, true); // clamped

  approximateEquals(assert, g.evaluate(0), 8);
  approximateEquals(assert, g.evaluate(4), 8);
  approximateEquals(assert, g.evaluate(8), 0);
  approximateEquals(assert, g.evaluate(6), 4);
  approximateEquals(assert, g.inverse(16), 4);
  approximateEquals(assert, g.inverse(8), 4);
  approximateEquals(assert, g.inverse(0), 8);
  approximateEquals(assert, g.inverse(4), 6);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lYXJGdW5jdGlvbiIsIlFVbml0IiwibW9kdWxlIiwiYXBwcm94aW1hdGVFcXVhbHMiLCJhc3NlcnQiLCJhIiwiYiIsIm1zZyIsIm9rIiwiTWF0aCIsImFicyIsInRlc3QiLCJmIiwiZXZhbHVhdGUiLCJpbnZlcnNlIiwiZyJdLCJzb3VyY2VzIjpbIkxpbmVhckZ1bmN0aW9uVGVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQm91bmRzMiB0ZXN0c1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBMaW5lYXJGdW5jdGlvbiBmcm9tICcuL0xpbmVhckZ1bmN0aW9uLmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ0xpbmVhckZ1bmN0aW9uJyApO1xyXG5cclxuZnVuY3Rpb24gYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgYSwgYiwgbXNnICkge1xyXG4gIGFzc2VydC5vayggTWF0aC5hYnMoIGEgLSBiICkgPCAwLjAwMDAwMDAxLCBgJHttc2d9IGV4cGVjdGVkOiAke2J9LCByZXN1bHQ6ICR7YX1gICk7XHJcbn1cclxuXHJcblFVbml0LnRlc3QoICdMaW5lYXJGdW5jdGlvbicsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgZiA9IG5ldyBMaW5lYXJGdW5jdGlvbiggNCwgOCwgOCwgMCApOyAvLyBub3QgY2xhbXBlZFxyXG5cclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBmLmV2YWx1YXRlKCAwICksIDE2ICk7XHJcbiAgYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgZi5ldmFsdWF0ZSggNCApLCA4ICk7XHJcbiAgYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgZi5ldmFsdWF0ZSggOCApLCAwICk7XHJcbiAgYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgZi5ldmFsdWF0ZSggNiApLCA0ICk7XHJcbiAgYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgZi5pbnZlcnNlKCAxNiApLCAwICk7XHJcbiAgYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgZi5pbnZlcnNlKCA4ICksIDQgKTtcclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBmLmludmVyc2UoIDAgKSwgOCApO1xyXG4gIGFwcHJveGltYXRlRXF1YWxzKCBhc3NlcnQsIGYuaW52ZXJzZSggNCApLCA2ICk7XHJcblxyXG4gIGNvbnN0IGcgPSBuZXcgTGluZWFyRnVuY3Rpb24oIDQsIDgsIDgsIDAsIHRydWUgKTsgLy8gY2xhbXBlZFxyXG5cclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBnLmV2YWx1YXRlKCAwICksIDggKTtcclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBnLmV2YWx1YXRlKCA0ICksIDggKTtcclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBnLmV2YWx1YXRlKCA4ICksIDAgKTtcclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBnLmV2YWx1YXRlKCA2ICksIDQgKTtcclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBnLmludmVyc2UoIDE2ICksIDQgKTtcclxuICBhcHByb3hpbWF0ZUVxdWFscyggYXNzZXJ0LCBnLmludmVyc2UoIDggKSwgNCApO1xyXG4gIGFwcHJveGltYXRlRXF1YWxzKCBhc3NlcnQsIGcuaW52ZXJzZSggMCApLCA4ICk7XHJcbiAgYXBwcm94aW1hdGVFcXVhbHMoIGFzc2VydCwgZy5pbnZlcnNlKCA0ICksIDYgKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFB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