// Copyright 2017-2021, University of Colorado Boulder

/**
 * Bounds2 tests
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import DampedHarmonic from './DampedHarmonic.js';
QUnit.module('DampedHarmonic');
function approxEquals(assert, a, b, msg) {
  assert.ok(Math.abs(a - b) < 1e-4, `${msg}: ${a} ~= ${b}`);
}
function estimateDerivative(harmonic, t) {
  return (harmonic.getValue(t + 1e-5) - harmonic.getValue(t - 1e-5)) / 2e-5;
}
function runHarmonic(a, b, c, initialValue, initialDerivative, assert) {
  const harmonic = new DampedHarmonic(a, b, c, initialValue, initialDerivative);
  approxEquals(assert, harmonic.getValue(0), initialValue, 'Initial value');
  approxEquals(assert, harmonic.getDerivative(0), initialDerivative, 'Initial derivative');
  approxEquals(assert, harmonic.getDerivative(0), estimateDerivative(harmonic, 0), 'Derivative at 0');
  approxEquals(assert, harmonic.getDerivative(0.35), estimateDerivative(harmonic, 0.35), 'Derivative at 0.35');
}
QUnit.test('Critically damped, no initial velocity', runHarmonic.bind(null, 1, 4, 4, 10, 0));
QUnit.test('Under damped, no initial velocity', runHarmonic.bind(null, 1, 2, 4, 10, 0));
QUnit.test('Over damped, no initial velocity', runHarmonic.bind(null, 1, 10, 4, 10, 0));
QUnit.test('Critically damped, no initial position', runHarmonic.bind(null, 1, 4, 4, 0, 10));
QUnit.test('Under damped, no initial position', runHarmonic.bind(null, 1, 2, 4, 0, 10));
QUnit.test('Over damped, no initial position', runHarmonic.bind(null, 1, 10, 4, 0, 10));
QUnit.test('Harmonic A', runHarmonic.bind(null, 1.2, 10.154, 4.2, 0.154, 1.515));
QUnit.test('Harmonic B', runHarmonic.bind(null, -5.2, -1.2, -103.2, 14.32, -17.5));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEYW1wZWRIYXJtb25pYyIsIlFVbml0IiwibW9kdWxlIiwiYXBwcm94RXF1YWxzIiwiYXNzZXJ0IiwiYSIsImIiLCJtc2ciLCJvayIsIk1hdGgiLCJhYnMiLCJlc3RpbWF0ZURlcml2YXRpdmUiLCJoYXJtb25pYyIsInQiLCJnZXRWYWx1ZSIsInJ1bkhhcm1vbmljIiwiYyIsImluaXRpYWxWYWx1ZSIsImluaXRpYWxEZXJpdmF0aXZlIiwiZ2V0RGVyaXZhdGl2ZSIsInRlc3QiLCJiaW5kIl0sInNvdXJjZXMiOlsiRGFtcGVkSGFybW9uaWNUZXN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCb3VuZHMyIHRlc3RzXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IERhbXBlZEhhcm1vbmljIGZyb20gJy4vRGFtcGVkSGFybW9uaWMuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnRGFtcGVkSGFybW9uaWMnICk7XHJcblxyXG5mdW5jdGlvbiBhcHByb3hFcXVhbHMoIGFzc2VydCwgYSwgYiwgbXNnICkge1xyXG4gIGFzc2VydC5vayggTWF0aC5hYnMoIGEgLSBiICkgPCAxZS00LCBgJHttc2d9OiAke2F9IH49ICR7Yn1gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVzdGltYXRlRGVyaXZhdGl2ZSggaGFybW9uaWMsIHQgKSB7XHJcbiAgcmV0dXJuICggaGFybW9uaWMuZ2V0VmFsdWUoIHQgKyAxZS01ICkgLSBoYXJtb25pYy5nZXRWYWx1ZSggdCAtIDFlLTUgKSApIC8gMmUtNTtcclxufVxyXG5cclxuZnVuY3Rpb24gcnVuSGFybW9uaWMoIGEsIGIsIGMsIGluaXRpYWxWYWx1ZSwgaW5pdGlhbERlcml2YXRpdmUsIGFzc2VydCApIHtcclxuICBjb25zdCBoYXJtb25pYyA9IG5ldyBEYW1wZWRIYXJtb25pYyggYSwgYiwgYywgaW5pdGlhbFZhbHVlLCBpbml0aWFsRGVyaXZhdGl2ZSApO1xyXG5cclxuICBhcHByb3hFcXVhbHMoIGFzc2VydCwgaGFybW9uaWMuZ2V0VmFsdWUoIDAgKSwgaW5pdGlhbFZhbHVlLCAnSW5pdGlhbCB2YWx1ZScgKTtcclxuICBhcHByb3hFcXVhbHMoIGFzc2VydCwgaGFybW9uaWMuZ2V0RGVyaXZhdGl2ZSggMCApLCBpbml0aWFsRGVyaXZhdGl2ZSwgJ0luaXRpYWwgZGVyaXZhdGl2ZScgKTtcclxuXHJcbiAgYXBwcm94RXF1YWxzKCBhc3NlcnQsIGhhcm1vbmljLmdldERlcml2YXRpdmUoIDAgKSwgZXN0aW1hdGVEZXJpdmF0aXZlKCBoYXJtb25pYywgMCApLCAnRGVyaXZhdGl2ZSBhdCAwJyApO1xyXG4gIGFwcHJveEVxdWFscyggYXNzZXJ0LCBoYXJtb25pYy5nZXREZXJpdmF0aXZlKCAwLjM1ICksIGVzdGltYXRlRGVyaXZhdGl2ZSggaGFybW9uaWMsIDAuMzUgKSwgJ0Rlcml2YXRpdmUgYXQgMC4zNScgKTtcclxufVxyXG5cclxuUVVuaXQudGVzdCggJ0NyaXRpY2FsbHkgZGFtcGVkLCBubyBpbml0aWFsIHZlbG9jaXR5JywgcnVuSGFybW9uaWMuYmluZCggbnVsbCwgMSwgNCwgNCwgMTAsIDAgKSApO1xyXG5RVW5pdC50ZXN0KCAnVW5kZXIgZGFtcGVkLCBubyBpbml0aWFsIHZlbG9jaXR5JywgcnVuSGFybW9uaWMuYmluZCggbnVsbCwgMSwgMiwgNCwgMTAsIDAgKSApO1xyXG5RVW5pdC50ZXN0KCAnT3ZlciBkYW1wZWQsIG5vIGluaXRpYWwgdmVsb2NpdHknLCBydW5IYXJtb25pYy5iaW5kKCBudWxsLCAxLCAxMCwgNCwgMTAsIDAgKSApO1xyXG5cclxuUVVuaXQudGVzdCggJ0NyaXRpY2FsbHkgZGFtcGVkLCBubyBpbml0aWFsIHBvc2l0aW9uJywgcnVuSGFybW9uaWMuYmluZCggbnVsbCwgMSwgNCwgNCwgMCwgMTAgKSApO1xyXG5RVW5pdC50ZXN0KCAnVW5kZXIgZGFtcGVkLCBubyBpbml0aWFsIHBvc2l0aW9uJywgcnVuSGFybW9uaWMuYmluZCggbnVsbCwgMSwgMiwgNCwgMCwgMTAgKSApO1xyXG5RVW5pdC50ZXN0KCAnT3ZlciBkYW1wZWQsIG5vIGluaXRpYWwgcG9zaXRpb24nLCBydW5IYXJtb25pYy5iaW5kKCBudWxsLCAxLCAxMCwgNCwgMCwgMTAgKSApO1xyXG5cclxuUVVuaXQudGVzdCggJ0hhcm1vbmljIEEnLCBydW5IYXJtb25pYy5iaW5kKCBudWxsLCAxLjIsIDEwLjE1NCwgNC4yLCAwLjE1NCwgMS41MTUgKSApO1xyXG5RVW5pdC50ZXN0KCAnSGFybW9uaWMgQicsIHJ1bkhhcm1vbmljLmJpbmQoIG51bGwsIC01LjIsIC0xLjIsIC0xMDMuMiwgMTQuMzIsIC0xNy41ICkgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0scUJBQXFCO0FBRWhEQyxLQUFLLENBQUNDLE1BQU0sQ0FBRSxnQkFBaUIsQ0FBQztBQUVoQyxTQUFTQyxZQUFZQSxDQUFFQyxNQUFNLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxHQUFHLEVBQUc7RUFDekNILE1BQU0sQ0FBQ0ksRUFBRSxDQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBRUwsQ0FBQyxHQUFHQyxDQUFFLENBQUMsR0FBRyxJQUFJLEVBQUcsR0FBRUMsR0FBSSxLQUFJRixDQUFFLE9BQU1DLENBQUUsRUFBRSxDQUFDO0FBQy9EO0FBRUEsU0FBU0ssa0JBQWtCQSxDQUFFQyxRQUFRLEVBQUVDLENBQUMsRUFBRztFQUN6QyxPQUFPLENBQUVELFFBQVEsQ0FBQ0UsUUFBUSxDQUFFRCxDQUFDLEdBQUcsSUFBSyxDQUFDLEdBQUdELFFBQVEsQ0FBQ0UsUUFB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