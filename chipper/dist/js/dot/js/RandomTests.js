// Copyright 2023, University of Colorado Boulder

/**
 * Random tests
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Bounds2 from './Bounds2.js';
import dotRandom from './dotRandom.js';
import Random from './Random.js';
QUnit.module('Random');
QUnit.test('Random.nextPointInBounds', assert => {
  const bounds = new Bounds2(-11, 0, 3, 100);
  const random = new Random(); // eslint-disable-line bad-sim-text

  for (let i = 0; i < 100; i++) {
    assert.ok(bounds.containsPoint(random.nextPointInBounds(bounds)), `random point is in bounds: ${i}`);
  }
});

// Test that the sampling engine is working properly
QUnit.test('sample probabilities', assert => {
  assert.ok('first test');
  const testWeights = weights => {
    const array = new Array(weights.length);
    _.fill(array, 0, 0, array.length);
    for (let i = 0; i < 50000; i++) {
      const index = dotRandom.sampleProbabilities(weights);
      array[index]++;
    }
    const inputNormalized = weights.map(element => element / _.sum(weights));
    const resultNormalized = array.map(element => element / _.sum(array));
    let ok = true;
    for (let i = 0; i < weights.length; i++) {
      if (Math.abs(inputNormalized[i] - resultNormalized[i]) > 0.1) {
        ok = false;
      }
    }
    assert.ok(ok, `inputNormalized: ${inputNormalized.join(',')}, resultNormalized: ${resultNormalized.join(',')}`);
  };
  testWeights([1, 2, 3, 4]);
  testWeights([0, 1, 0, 0]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiZG90UmFuZG9tIiwiUmFuZG9tIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwiYm91bmRzIiwicmFuZG9tIiwiaSIsIm9rIiwiY29udGFpbnNQb2ludCIsIm5leHRQb2ludEluQm91bmRzIiwidGVzdFdlaWdodHMiLCJ3ZWlnaHRzIiwiYXJyYXkiLCJBcnJheSIsImxlbmd0aCIsIl8iLCJmaWxsIiwiaW5kZXgiLCJzYW1wbGVQcm9iYWJpbGl0aWVzIiwiaW5wdXROb3JtYWxpemVkIiwibWFwIiwiZWxlbWVudCIsInN1bSIsInJlc3VsdE5vcm1hbGl6ZWQiLCJNYXRoIiwiYWJzIiwiam9pbiJdLCJzb3VyY2VzIjpbIlJhbmRvbVRlc3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSYW5kb20gdGVzdHNcclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4vQm91bmRzMi5qcyc7XHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi9kb3RSYW5kb20uanMnO1xyXG5pbXBvcnQgUmFuZG9tIGZyb20gJy4vUmFuZG9tLmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ1JhbmRvbScgKTtcclxuXHJcblFVbml0LnRlc3QoICdSYW5kb20ubmV4dFBvaW50SW5Cb3VuZHMnLCBhc3NlcnQgPT4ge1xyXG5cclxuICBjb25zdCBib3VuZHMgPSBuZXcgQm91bmRzMiggLTExLCAwLCAzLCAxMDAgKTtcclxuICBjb25zdCByYW5kb20gPSBuZXcgUmFuZG9tKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFkLXNpbS10ZXh0XHJcblxyXG4gIGZvciAoIGxldCBpID0gMDsgaSA8IDEwMDsgaSsrICkge1xyXG4gICAgYXNzZXJ0Lm9rKCBib3VuZHMuY29udGFpbnNQb2ludCggcmFuZG9tLm5leHRQb2ludEluQm91bmRzKCBib3VuZHMgKSApLCBgcmFuZG9tIHBvaW50IGlzIGluIGJvdW5kczogJHtpfWAgKTtcclxuICB9XHJcbn0gKTtcclxuXHJcbi8vIFRlc3QgdGhhdCB0aGUgc2FtcGxpbmcgZW5naW5lIGlzIHdvcmtpbmcgcHJvcGVybHlcclxuUVVuaXQudGVzdCggJ3NhbXBsZSBwcm9iYWJpbGl0aWVzJywgYXNzZXJ0ID0+IHtcclxuICBhc3NlcnQub2soICdmaXJzdCB0ZXN0JyApO1xyXG5cclxuICBjb25zdCB0ZXN0V2VpZ2h0cyA9IHdlaWdodHMgPT4ge1xyXG5cclxuICAgIGNvbnN0IGFycmF5ID0gbmV3IEFycmF5KCB3ZWlnaHRzLmxlbmd0aCApO1xyXG4gICAgXy5maWxsKCBhcnJheSwgMCwgMCwgYXJyYXkubGVuZ3RoICk7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCA1MDAwMDsgaSsrICkge1xyXG4gICAgICBjb25zdCBpbmRleCA9IGRvdFJhbmRvbS5zYW1wbGVQcm9iYWJpbGl0aWVzKCB3ZWlnaHRzICk7XHJcbiAgICAgIGFycmF5WyBpbmRleCBdKys7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW5wdXROb3JtYWxpemVkID0gd2VpZ2h0cy5tYXAoIGVsZW1lbnQgPT4gKCBlbGVtZW50IC8gXy5zdW0oIHdlaWdodHMgKSApICk7XHJcbiAgICBjb25zdCByZXN1bHROb3JtYWxpemVkID0gYXJyYXkubWFwKCBlbGVtZW50ID0+ICggZWxlbWVudCAvIF8uc3VtKCBhcnJheSApICkgKTtcclxuXHJcbiAgICBsZXQgb2sgPSB0cnVlO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgd2VpZ2h0cy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgaWYgKCBNYXRoLmFicyggaW5wdXROb3JtYWxpemVkWyBpIF0gLSByZXN1bHROb3JtYWxpemVkWyBpIF0gKSA+IDAuMSApIHtcclxuICAgICAgICBvayA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBhc3NlcnQub2soIG9rLCBgaW5wdXROb3JtYWxpemVkOiAke2lucHV0Tm9ybWFsaXplZC5qb2luKCAnLCcgKX0sIHJlc3VsdE5vcm1hbGl6ZWQ6ICR7cmVzdWx0Tm9ybWFsaXplZC5qb2luKCAnLCcgKX1gICk7XHJcbiAgfTtcclxuICB0ZXN0V2VpZ2h0cyggWyAxLCAyLCAzLCA0IF0gKTtcclxuICB0ZXN0V2VpZ2h0cyggWyAwLCAxLCAwLCAwIF0gKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sY0FBYztBQUNsQyxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQ3RDLE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBRWhDQyxLQUFLLENBQUNDLE1BQU0sQ0FBRSxRQUFTLENBQUM7QUFFeEJELEtBQUssQ0FBQ0UsSUFBSSxDQUFFLDBCQUEwQixFQUFFQyxNQUFNLElBQUk7RUFFaEQsTUFBTUMsTUFBTSxHQUFHLElBQUlQLE9BQU8sQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUksQ0FBQztFQUM1QyxNQUFNUSxNQUFNLEdBQUcsSUFBSU4sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOztFQUU3QixLQUFNLElBQUlPLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxHQUFHLEVBQUVBLENBQUMsRUFBRSxFQUFHO0lBQzlCSCxNQUFNLENBQUNJLEVBQUUsQ0FBRUgsTUFBTSxDQUFDSSxhQUFhLENBQUVILE1BQU0sQ0FBQ0ksaUJBQWlCLENBQUVMLE1BQU8sQ0FBRSxDQUFDLEVBQUcsOEJBQTZCRSxDQUFFLEVBQUUsQ0FBQztFQUM1RztBQUNGLENBQUUsQ0FBQzs7QUFFSDtBQUNBTixLQUFLLENBQUNFLElBQUksQ0FBRSxzQkFBc0IsRUFBRUMsTUFBTSxJQUFJO0VBQzVDQSxNQUFNLENBQUNJLEVBQUUsQ0FBRSxZQUFhLENBQUM7RUFFekIsTUFBTUcsV0FBVyxHQUFHQyxPQUFPLElBQUk7SUFFN0IsTUFBTUMsS0FBSyxHQUFHLElBQUlDLEtBQUssQ0FBRUYsT0FBTyxDQUFDRyxNQUFPLENBQUM7SUFDekNDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFSixLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRUEsS0FBSyxDQUFDRSxNQUFPLENBQUM7SUFDbkMsS0FBTSxJQUFJUixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsS0FBSyxFQUFFQSxDQUFDLEVBQUUsRUFBRztNQUNoQyxNQUFNVyxLQUFLLEdBQUduQixTQUFTLENBQUNvQixtQkFBbUIsQ0FBRVAsT0FBUSxDQUFDO01BQ3REQyxLQUFLLENBQUVLLEtBQUssQ0FBRSxFQUFFO0lBQ2xCO0lBRUEsTUFBTUUsZUFBZSxHQUFHUixPQUFPLENBQUNTLEdBQUcsQ0FBRUMsT0FBTyxJQUFNQSxPQUFPLEdBQUdOLENBQUMsQ0FBQ08sR0FBRyxDQUFFWCxPQUFRLENBQUksQ0FBQztJQUNoRixNQUFNWSxnQkFBZ0IsR0FBR1gsS0FBSyxDQUFDUSxHQUFHLENBQUVDLE9BQU8sSUFBTUEsT0FBTyxHQUFHTixDQUFDLENBQUNPLEdBQUcsQ0FBRVYsS0FBTSxDQUFJLENBQUM7SUFFN0UsSUFBSUwsRUFBRSxHQUFHLElBQUk7SUFDYixLQUFNLElBQUlELENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0ssT0FBTyxDQUFDRyxNQUFNLEVBQUVSLENBQUMsRUFBRSxFQUFHO01BQ3pDLElBQUtrQixJQUFJLENBQUNDLEdBQUcsQ0FBRU4sZUFBZSxDQUFFYixDQUFDLENBQUUsR0FBR2lCLGdCQUFnQixDQUFFakIsQ0FBQyxDQUFHLENBQUMsR0FBRyxHQUFHLEVBQUc7UUFDcEVDLEVBQUUsR0FBRyxLQUFLO01BQ1o7SUFDRjtJQUNBSixNQUFNLENBQUNJLEVBQUUsQ0FBRUEsRUFBRSxFQUFHLG9CQUFtQlksZUFBZSxDQUFDTyxJQUFJLENBQUUsR0FBSSxDQUFFLHVCQUFzQkgsZ0JBQWdCLENBQUNHLElBQUksQ0FBRSxHQUFJLENBQUUsRUFBRSxDQUFDO0VBQ3ZILENBQUM7RUFDRGhCLFdBQVcsQ0FBRSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRyxDQUFDO0VBQzdCQSxXQUFXLENBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUcsQ0FBQztBQUMvQixDQUFFLENBQUMifQ==