// Copyright 2016-2022, University of Colorado Boulder

/**
 * A numeric range with a required default value.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Range from './Range.js';
import dot from './dot.js';
class RangeWithValue extends Range {
  /**
   * @param min - the minimum value of the range
   * @param max - the maximum value of the range
   * @param defaultValue - default value inside the range
   */
  constructor(min, max, defaultValue) {
    super(min, max);
    assert && assert(defaultValue !== undefined, 'default value is required');
    assert && assert(defaultValue >= min && defaultValue <= max, `defaultValue is out of range: ${defaultValue}`);
    this._defaultValue = defaultValue;
  }

  /**
   * Getter for defaultValue
   */
  getDefaultValue() {
    return this._defaultValue;
  }
  get defaultValue() {
    return this.getDefaultValue();
  }

  /**
   * Setter for min
   */
  setMin(min) {
    assert && assert(this._defaultValue >= min, `min must be <= defaultValue: ${min}`);
    super.setMin(min);
  }

  /**
   * Setter for max
   */
  setMax(max) {
    assert && assert(this._defaultValue <= max, `max must be >= defaultValue: ${max}`);
    super.setMax(max);
  }

  /**
   * Setter for min and max
   */
  setMinMax(min, max) {
    assert && assert(this._defaultValue >= min, `min must be <= defaultValue: ${min}`);
    assert && assert(this._defaultValue <= max, `max must be >= defaultValue: ${max}`);

    // REVIEW: Same as setMinMax in Range.ts, returning a value in a setter seems odd...
    return super.setMinMax(min, max);
  }

  /**
   * Converts the attributes of this range to a string
   */
  toString() {
    return `[RangeWithValue (min:${this.min} max:${this.max} defaultValue:${this._defaultValue})]`;
  }

  /**
   * Determines if this RangeWithValue is equal to some object.
   */
  equals(object) {
    return this.constructor === object.constructor && this._defaultValue === object.defaultValue && super.equals(object);
  }
}
dot.register('RangeWithValue', RangeWithValue);
export default RangeWithValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsImRvdCIsIlJhbmdlV2l0aFZhbHVlIiwiY29uc3RydWN0b3IiLCJtaW4iLCJtYXgiLCJkZWZhdWx0VmFsdWUiLCJhc3NlcnQiLCJ1bmRlZmluZWQiLCJfZGVmYXVsdFZhbHVlIiwiZ2V0RGVmYXVsdFZhbHVlIiwic2V0TWluIiwic2V0TWF4Iiwic2V0TWluTWF4IiwidG9TdHJpbmciLCJlcXVhbHMiLCJvYmplY3QiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJhbmdlV2l0aFZhbHVlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgbnVtZXJpYyByYW5nZSB3aXRoIGEgcmVxdWlyZWQgZGVmYXVsdCB2YWx1ZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuL1JhbmdlLmpzJztcclxuaW1wb3J0IGRvdCBmcm9tICcuL2RvdC5qcyc7XHJcbmltcG9ydCBJbnRlbnRpb25hbEFueSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xyXG5cclxuY2xhc3MgUmFuZ2VXaXRoVmFsdWUgZXh0ZW5kcyBSYW5nZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2RlZmF1bHRWYWx1ZTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gbWluIC0gdGhlIG1pbmltdW0gdmFsdWUgb2YgdGhlIHJhbmdlXHJcbiAgICogQHBhcmFtIG1heCAtIHRoZSBtYXhpbXVtIHZhbHVlIG9mIHRoZSByYW5nZVxyXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgLSBkZWZhdWx0IHZhbHVlIGluc2lkZSB0aGUgcmFuZ2VcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgZGVmYXVsdFZhbHVlOiBudW1iZXIgKSB7XHJcblxyXG4gICAgc3VwZXIoIG1pbiwgbWF4ICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQsICdkZWZhdWx0IHZhbHVlIGlzIHJlcXVpcmVkJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZGVmYXVsdFZhbHVlID49IG1pbiAmJiBkZWZhdWx0VmFsdWUgPD0gbWF4LCBgZGVmYXVsdFZhbHVlIGlzIG91dCBvZiByYW5nZTogJHtkZWZhdWx0VmFsdWV9YCApO1xyXG5cclxuICAgIHRoaXMuX2RlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBHZXR0ZXIgZm9yIGRlZmF1bHRWYWx1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREZWZhdWx0VmFsdWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0VmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IGRlZmF1bHRWYWx1ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXR0ZXIgZm9yIG1pblxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBzZXRNaW4oIG1pbjogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5fZGVmYXVsdFZhbHVlID49IG1pbiwgYG1pbiBtdXN0IGJlIDw9IGRlZmF1bHRWYWx1ZTogJHttaW59YCApO1xyXG4gICAgc3VwZXIuc2V0TWluKCBtaW4gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHRlciBmb3IgbWF4XHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHNldE1heCggbWF4OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLl9kZWZhdWx0VmFsdWUgPD0gbWF4LCBgbWF4IG11c3QgYmUgPj0gZGVmYXVsdFZhbHVlOiAke21heH1gICk7XHJcbiAgICBzdXBlci5zZXRNYXgoIG1heCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0dGVyIGZvciBtaW4gYW5kIG1heFxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBzZXRNaW5NYXgoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciApOiB0aGlzIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuX2RlZmF1bHRWYWx1ZSA+PSBtaW4sIGBtaW4gbXVzdCBiZSA8PSBkZWZhdWx0VmFsdWU6ICR7bWlufWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuX2RlZmF1bHRWYWx1ZSA8PSBtYXgsIGBtYXggbXVzdCBiZSA+PSBkZWZhdWx0VmFsdWU6ICR7bWF4fWAgKTtcclxuXHJcbiAgICAvLyBSRVZJRVc6IFNhbWUgYXMgc2V0TWluTWF4IGluIFJhbmdlLnRzLCByZXR1cm5pbmcgYSB2YWx1ZSBpbiBhIHNldHRlciBzZWVtcyBvZGQuLi5cclxuICAgIHJldHVybiBzdXBlci5zZXRNaW5NYXgoIG1pbiwgbWF4ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0cyB0aGUgYXR0cmlidXRlcyBvZiB0aGlzIHJhbmdlIHRvIGEgc3RyaW5nXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYFtSYW5nZVdpdGhWYWx1ZSAobWluOiR7dGhpcy5taW59IG1heDoke3RoaXMubWF4fSBkZWZhdWx0VmFsdWU6JHt0aGlzLl9kZWZhdWx0VmFsdWV9KV1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGlzIFJhbmdlV2l0aFZhbHVlIGlzIGVxdWFsIHRvIHNvbWUgb2JqZWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBlcXVhbHMoIG9iamVjdDogSW50ZW50aW9uYWxBbnkgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKCB0aGlzLmNvbnN0cnVjdG9yID09PSBvYmplY3QuY29uc3RydWN0b3IgKSAmJlxyXG4gICAgICAgICAgICggdGhpcy5fZGVmYXVsdFZhbHVlID09PSBvYmplY3QuZGVmYXVsdFZhbHVlICkgJiZcclxuICAgICAgICAgICBzdXBlci5lcXVhbHMoIG9iamVjdCApO1xyXG4gIH1cclxufVxyXG5cclxuZG90LnJlZ2lzdGVyKCAnUmFuZ2VXaXRoVmFsdWUnLCBSYW5nZVdpdGhWYWx1ZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmFuZ2VXaXRoVmFsdWU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsR0FBRyxNQUFNLFVBQVU7QUFHMUIsTUFBTUMsY0FBYyxTQUFTRixLQUFLLENBQUM7RUFJakM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNTRyxXQUFXQSxDQUFFQyxHQUFXLEVBQUVDLEdBQVcsRUFBRUMsWUFBb0IsRUFBRztJQUVuRSxLQUFLLENBQUVGLEdBQUcsRUFBRUMsR0FBSSxDQUFDO0lBRWpCRSxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsWUFBWSxLQUFLRSxTQUFTLEVBQUUsMkJBQTRCLENBQUM7SUFDM0VELE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxZQUFZLElBQUlGLEdBQUcsSUFBSUUsWUFBWSxJQUFJRCxHQUFHLEVBQUcsaUNBQWdDQyxZQUFhLEVBQUUsQ0FBQztJQUUvRyxJQUFJLENBQUNHLGFBQWEsR0FBR0gsWUFBWTtFQUNuQzs7RUFHQTtBQUNGO0FBQ0E7RUFDU0ksZUFBZUEsQ0FBQSxFQUFXO0lBQy9CLE9BQU8sSUFBSSxDQUFDRCxhQUFhO0VBQzNCO0VBRUEsSUFBb0JILFlBQVlBLENBQUEsRUFBVztJQUN6QyxPQUFPLElBQUksQ0FBQ0ksZUFBZSxDQUFDLENBQUM7RUFDL0I7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCQyxNQUFNQSxDQUFFUCxHQUFXLEVBQVM7SUFDMUNHLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0UsYUFBYSxJQUFJTCxHQUFHLEVBQUcsZ0NBQStCQSxHQUFJLEVBQUUsQ0FBQztJQUNwRixLQUFLLENBQUNPLE1BQU0sQ0FBRVAsR0FBSSxDQUFDO0VBQ3JCOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQlEsTUFBTUEsQ0FBRVAsR0FBVyxFQUFTO0lBQzFDRSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxJQUFJLENBQUNFLGFBQWEsSUFBSUosR0FBRyxFQUFHLGdDQUErQkEsR0FBSSxFQUFFLENBQUM7SUFDcEYsS0FBSyxDQUFDTyxNQUFNLENBQUVQLEdBQUksQ0FBQztFQUNyQjs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JRLFNBQVNBLENBQUVULEdBQVcsRUFBRUMsR0FBVyxFQUFTO0lBQzFERSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxJQUFJLENBQUNFLGFBQWEsSUFBSUwsR0FBRyxFQUFHLGdDQUErQkEsR0FBSSxFQUFFLENBQUM7SUFDcEZHLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0UsYUFBYSxJQUFJSixHQUFHLEVBQUcsZ0NBQStCQSxHQUFJLEVBQUUsQ0FBQzs7SUFFcEY7SUFDQSxPQUFPLEtBQUssQ0FBQ1EsU0FBUyxDQUFFVCxHQUFHLEVBQUVDLEdBQUksQ0FBQztFQUNwQzs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JTLFFBQVFBLENBQUEsRUFBVztJQUNqQyxPQUFRLHdCQUF1QixJQUFJLENBQUNWLEdBQUksUUFBTyxJQUFJLENBQUNDLEdBQUksaUJBQWdCLElBQUksQ0FBQ0ksYUFBYyxJQUFHO0VBQ2hHOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQk0sTUFBTUEsQ0FBRUMsTUFBc0IsRUFBWTtJQUN4RCxPQUFTLElBQUksQ0FBQ2IsV0FBVyxLQUFLYSxNQUFNLENBQUNiLFdBQVcsSUFDdkMsSUFBSSxDQUFDTSxhQUFhLEtBQUtPLE1BQU0sQ0FBQ1YsWUFBYyxJQUM5QyxLQUFLLENBQUNTLE1BQU0sQ0FBRUMsTUFBTyxDQUFDO0VBQy9CO0FBQ0Y7QUFFQWYsR0FBRyxDQUFDZ0IsUUFBUSxDQUFFLGdCQUFnQixFQUFFZixjQUFlLENBQUM7QUFFaEQsZUFBZUEsY0FBYyJ9