// Copyright 2014-2022, University of Colorado Boulder

/**
 * A mathematical plane in 3 dimensions determined by a normal vector to the plane and the distance to the closest
 * point on the plane to the origin
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector3 from './Vector3.js';
import dot from './dot.js';
export default class Plane3 {
  /**
   * @param normal - A normal vector (perpendicular) to the plane
   * @param distance - The signed distance to the plane from the origin, so that normal.times( distance )
   *                            will be a point on the plane.
   */
  constructor(normal, distance) {
    this.normal = normal;
    this.distance = distance;
    assert && assert(Math.abs(normal.magnitude - 1) < 0.01, 'the normal vector must be a unit vector');
  }
  intersectWithRay(ray) {
    return ray.pointAtDistance(ray.distanceToPlane(this));
  }

  /**
   * Returns a new plane that passes through three points $(\vec{a},\vec{b},\vec{c})$
   * The normal of the plane points along $\vec{c-a} \times \vec{b-a}$
   * Passing three collinear points will return null
   *
   * @param a - first point
   * @param b - second point
   * @param c - third point
   */
  static fromTriangle(a, b, c) {
    const normal = c.minus(a).cross(b.minus(a));
    if (normal.magnitude === 0) {
      return null;
    }
    normal.normalize();
    return new Plane3(normal, normal.dot(a));
  }
  static XY = new Plane3(new Vector3(0, 0, 1), 0);
  static XZ = new Plane3(new Vector3(0, 1, 0), 0);
  static YZ = new Plane3(new Vector3(1, 0, 0), 0);
}
dot.register('Plane3', Plane3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IzIiwiZG90IiwiUGxhbmUzIiwiY29uc3RydWN0b3IiLCJub3JtYWwiLCJkaXN0YW5jZSIsImFzc2VydCIsIk1hdGgiLCJhYnMiLCJtYWduaXR1ZGUiLCJpbnRlcnNlY3RXaXRoUmF5IiwicmF5IiwicG9pbnRBdERpc3RhbmNlIiwiZGlzdGFuY2VUb1BsYW5lIiwiZnJvbVRyaWFuZ2xlIiwiYSIsImIiLCJjIiwibWludXMiLCJjcm9zcyIsIm5vcm1hbGl6ZSIsIlhZIiwiWFoiLCJZWiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxhbmUzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgbWF0aGVtYXRpY2FsIHBsYW5lIGluIDMgZGltZW5zaW9ucyBkZXRlcm1pbmVkIGJ5IGEgbm9ybWFsIHZlY3RvciB0byB0aGUgcGxhbmUgYW5kIHRoZSBkaXN0YW5jZSB0byB0aGUgY2xvc2VzdFxyXG4gKiBwb2ludCBvbiB0aGUgcGxhbmUgdG8gdGhlIG9yaWdpblxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFJheTMgZnJvbSAnLi9SYXkzLmpzJztcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSAnLi9WZWN0b3IzLmpzJztcclxuaW1wb3J0IGRvdCBmcm9tICcuL2RvdC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGFuZTMge1xyXG5cclxuICBwdWJsaWMgbm9ybWFsOiBWZWN0b3IzO1xyXG4gIHB1YmxpYyBkaXN0YW5jZTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gbm9ybWFsIC0gQSBub3JtYWwgdmVjdG9yIChwZXJwZW5kaWN1bGFyKSB0byB0aGUgcGxhbmVcclxuICAgKiBAcGFyYW0gZGlzdGFuY2UgLSBUaGUgc2lnbmVkIGRpc3RhbmNlIHRvIHRoZSBwbGFuZSBmcm9tIHRoZSBvcmlnaW4sIHNvIHRoYXQgbm9ybWFsLnRpbWVzKCBkaXN0YW5jZSApXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBhIHBvaW50IG9uIHRoZSBwbGFuZS5cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG5vcm1hbDogVmVjdG9yMywgZGlzdGFuY2U6IG51bWJlciApIHtcclxuICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xyXG4gICAgdGhpcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIE1hdGguYWJzKCBub3JtYWwubWFnbml0dWRlIC0gMSApIDwgMC4wMSwgJ3RoZSBub3JtYWwgdmVjdG9yIG11c3QgYmUgYSB1bml0IHZlY3RvcicgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbnRlcnNlY3RXaXRoUmF5KCByYXk6IFJheTMgKTogVmVjdG9yMyB7XHJcbiAgICByZXR1cm4gcmF5LnBvaW50QXREaXN0YW5jZSggcmF5LmRpc3RhbmNlVG9QbGFuZSggdGhpcyApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgbmV3IHBsYW5lIHRoYXQgcGFzc2VzIHRocm91Z2ggdGhyZWUgcG9pbnRzICQoXFx2ZWN7YX0sXFx2ZWN7Yn0sXFx2ZWN7Y30pJFxyXG4gICAqIFRoZSBub3JtYWwgb2YgdGhlIHBsYW5lIHBvaW50cyBhbG9uZyAkXFx2ZWN7Yy1hfSBcXHRpbWVzIFxcdmVje2ItYX0kXHJcbiAgICogUGFzc2luZyB0aHJlZSBjb2xsaW5lYXIgcG9pbnRzIHdpbGwgcmV0dXJuIG51bGxcclxuICAgKlxyXG4gICAqIEBwYXJhbSBhIC0gZmlyc3QgcG9pbnRcclxuICAgKiBAcGFyYW0gYiAtIHNlY29uZCBwb2ludFxyXG4gICAqIEBwYXJhbSBjIC0gdGhpcmQgcG9pbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGZyb21UcmlhbmdsZSggYTogVmVjdG9yMywgYjogVmVjdG9yMywgYzogVmVjdG9yMyApOiBQbGFuZTMgfCBudWxsIHtcclxuICAgIGNvbnN0IG5vcm1hbCA9ICggYy5taW51cyggYSApICkuY3Jvc3MoIGIubWludXMoIGEgKSApO1xyXG4gICAgaWYgKCBub3JtYWwubWFnbml0dWRlID09PSAwICkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIG5vcm1hbC5ub3JtYWxpemUoKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFBsYW5lMyggbm9ybWFsLCBub3JtYWwuZG90KCBhICkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgWFkgPSBuZXcgUGxhbmUzKCBuZXcgVmVjdG9yMyggMCwgMCwgMSApLCAwICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBYWiA9IG5ldyBQbGFuZTMoIG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIDAgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFlaID0gbmV3IFBsYW5lMyggbmV3IFZlY3RvcjMoIDEsIDAsIDAgKSwgMCApO1xyXG59XHJcblxyXG5kb3QucmVnaXN0ZXIoICdQbGFuZTMnLCBQbGFuZTMgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsT0FBTyxNQUFNLGNBQWM7QUFDbEMsT0FBT0MsR0FBRyxNQUFNLFVBQVU7QUFFMUIsZUFBZSxNQUFNQyxNQUFNLENBQUM7RUFLMUI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNTQyxXQUFXQSxDQUFFQyxNQUFlLEVBQUVDLFFBQWdCLEVBQUc7SUFDdEQsSUFBSSxDQUFDRCxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7SUFFeEJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBRUosTUFBTSxDQUFDSyxTQUFTLEdBQUcsQ0FBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLHlDQUEwQyxDQUFDO0VBQ3hHO0VBRU9DLGdCQUFnQkEsQ0FBRUMsR0FBUyxFQUFZO0lBQzVDLE9BQU9BLEdBQUcsQ0FBQ0MsZUFBZSxDQUFFRCxHQUFHLENBQUNFLGVBQWUsQ0FBRSxJQUFLLENBQUUsQ0FBQztFQUMzRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFjQyxZQUFZQSxDQUFFQyxDQUFVLEVBQUVDLENBQVUsRUFBRUMsQ0FBVSxFQUFrQjtJQUM5RSxNQUFNYixNQUFNLEdBQUthLENBQUMsQ0FBQ0MsS0FBSyxDQUFFSCxDQUFFLENBQUMsQ0FBR0ksS0FBSyxDQUFFSCxDQUFDLENBQUNFLEtBQUssQ0FBRUgsQ0FBRSxDQUFFLENBQUM7SUFDckQsSUFBS1gsTUFBTSxDQUFDSyxTQUFTLEtBQUssQ0FBQyxFQUFHO01BQzVCLE9BQU8sSUFBSTtJQUNiO0lBQ0FMLE1BQU0sQ0FBQ2dCLFNBQVMsQ0FBQyxDQUFDO0lBRWxCLE9BQU8sSUFBSWxCLE1BQU0sQ0FBRUUsTUFBTSxFQUFFQSxNQUFNLENBQUNILEdBQUcsQ0FBRWMsQ0FBRSxDQUFFLENBQUM7RUFDOUM7RUFFQSxPQUF1Qk0sRUFBRSxHQUFHLElBQUluQixNQUFNLENBQUUsSUFBSUYsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0VBQ25FLE9BQXVCc0IsRUFBRSxHQUFHLElBQUlwQixNQUFNLENBQUUsSUFBSUYsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0VBQ25FLE9BQXVCdUIsRUFBRSxHQUFHLElBQUlyQixNQUFNLENBQUUsSUFBSUYsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0FBQ3JFO0FBRUFDLEdBQUcsQ0FBQ3VCLFFBQVEsQ0FBRSxRQUFRLEVBQUV0QixNQUFPLENBQUMifQ==