// Copyright 2015-2023, University of Colorado Boulder

/**
 * Model for a resistor.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import Tandem from '../../../tandem/js/Tandem.js';
import IOType from '../../../tandem/js/types/IOType.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import CircuitElement from './CircuitElement.js';
import FixedCircuitElement from './FixedCircuitElement.js';
import ResistorType from './ResistorType.js';
import EnumerationIO from '../../../tandem/js/types/EnumerationIO.js';
import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import PowerDissipatedProperty from './PowerDissipatedProperty.js';
import optionize from '../../../phet-core/js/optionize.js';
export default class Resistor extends FixedCircuitElement {
  // the resistance in ohms

  static RESISTANCE_DECIMAL_PLACES = 1;
  static HIGH_RESISTANCE_DECIMAL_PLACES = 0;

  /**
   * @param startVertex
   * @param endVertex
   * @param resistorType
   * @param tandem
   * @param [providedOptions]
   */
  constructor(startVertex, endVertex, resistorType, tandem, providedOptions) {
    const options = optionize()({
      isFlammable: true,
      // All resistors are flammable except for the dog, which automatically disconnects at high current.
      phetioType: Resistor.ResistorIO,
      numberOfDecimalPlaces: resistorType === ResistorType.RESISTOR ? 1 : 0
    }, providedOptions);
    assert && assert(!options.hasOwnProperty('resistance'), 'Resistance should be passed through resistorType');
    assert && assert(!options.hasOwnProperty('isMetallic'), 'isMetallic is given by the resistorType');
    options.isMetallic = resistorType.isMetallic;
    const isHouseholdObject = resistorType !== ResistorType.RESISTOR && resistorType !== ResistorType.EXTREME_RESISTOR;
    if (isHouseholdObject) {
      options.isEditablePropertyOptions = {
        tandem: Tandem.OPT_OUT
      };
    }
    super(startVertex, endVertex, resistorType.length, tandem, options);
    this.resistorType = resistorType;
    assert && assert(typeof this.resistorType.isMetallic === 'boolean');
    this.resistanceProperty = new NumberProperty(resistorType.defaultResistance, {
      tandem: tandem.createTandem('resistanceProperty'),
      // Specify the Property range for seamless PhET-iO interoperation
      range: this.resistorType.range,
      phetioFeatured: true
    });
    this.powerDissipatedProperty = new PowerDissipatedProperty(this.currentProperty, this.resistanceProperty, tandem.createTandem('powerDissipatedProperty'));
    this.isColorCodeVisibleProperty = new BooleanProperty(true, {
      tandem: this.resistorType === ResistorType.RESISTOR ? tandem.createTandem('isColorCodeVisibleProperty') : Tandem.OPT_OUT,
      phetioDocumentation: 'Whether the view can display the resistor color code bands',
      phetioFeatured: true
    });
  }

  /**
   * Dispose of this and PhET-iO instrumented children, so they will be unregistered.
   */
  dispose() {
    this.resistanceProperty.dispose();
    this.powerDissipatedProperty.dispose();
    this.isColorCodeVisibleProperty.dispose();
    super.dispose();
  }

  /**
   * Returns true if the resistance is editable.  Household item resistance is not editable.
   */
  isResistanceEditable() {
    return this.resistorType === ResistorType.EXTREME_RESISTOR || this.resistorType === ResistorType.RESISTOR;
  }

  /**
   * Get the properties so that the circuit can be solved when changed.
   */
  getCircuitProperties() {
    return [this.resistanceProperty];
  }
  static ResistorIO = new IOType('ResistorIO', {
    valueType: Resistor,
    supertype: CircuitElement.CircuitElementIO,
    stateSchema: {
      resistorType: EnumerationIO(ResistorType)
    },
    toStateObject: resistor => {
      const stateObject = CircuitElement.CircuitElementIO.toStateObject(resistor);
      return {
        ...stateObject,
        resistorType: EnumerationIO(ResistorType).toStateObject(resistor.resistorType)
      };
    },
    stateObjectToCreateElementArguments(stateObject) {
      const args = CircuitElement.CircuitElementIO.stateObjectToCreateElementArguments(stateObject);
      args.push(EnumerationIO(ResistorType).fromStateObject(stateObject.resistorType));
      return args;
    }
  });
}
circuitConstructionKitCommon.register('Resistor', Resistor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,