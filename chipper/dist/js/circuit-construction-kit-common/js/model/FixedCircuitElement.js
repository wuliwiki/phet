// Copyright 2015-2022, University of Colorado Boulder

/**
 * CircuitElements such as Resistor, Battery, etc have a fixed length between vertices (unlike stretchy Wires).  This is
 * their common base class. Note that it is NOT fixed length (light bulb breaks this), but has fixed vertex positions
 * relative to the element's transform.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import CircuitElement from './CircuitElement.js';
export default class FixedCircuitElement extends CircuitElement {
  // the number of decimal places to show in readouts and controls

  // The distance from one vertex to another (as the crow flies), used for rotation about a vertex

  // keep track of whether it is a fixed length element for assertion testing in CircuitElement

  constructor(startVertex, endVertex, chargePathLength,
  // the distance the charges travel (in view coordinates), see CircuitElement.js
  tandem, providedOptions) {
    const options = optionize()({
      numberOfDecimalPlaces: 1
    }, providedOptions);

    // Super constructor
    super(startVertex, endVertex, chargePathLength, tandem, options);
    this.numberOfDecimalPlaces = options.numberOfDecimalPlaces;
    this.distanceBetweenVertices = startVertex.positionProperty.get().distance(endVertex.positionProperty.get());
    this.isFixedCircuitElement = true;
  }
}
circuitConstructionKitCommon.register('FixedCircuitElement', FixedCircuitElement);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiQ2lyY3VpdEVsZW1lbnQiLCJGaXhlZENpcmN1aXRFbGVtZW50IiwiY29uc3RydWN0b3IiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsImNoYXJnZVBhdGhMZW5ndGgiLCJ0YW5kZW0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibnVtYmVyT2ZEZWNpbWFsUGxhY2VzIiwiZGlzdGFuY2VCZXR3ZWVuVmVydGljZXMiLCJwb3NpdGlvblByb3BlcnR5IiwiZ2V0IiwiZGlzdGFuY2UiLCJpc0ZpeGVkQ2lyY3VpdEVsZW1lbnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZpeGVkQ2lyY3VpdEVsZW1lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2lyY3VpdEVsZW1lbnRzIHN1Y2ggYXMgUmVzaXN0b3IsIEJhdHRlcnksIGV0YyBoYXZlIGEgZml4ZWQgbGVuZ3RoIGJldHdlZW4gdmVydGljZXMgKHVubGlrZSBzdHJldGNoeSBXaXJlcykuICBUaGlzIGlzXHJcbiAqIHRoZWlyIGNvbW1vbiBiYXNlIGNsYXNzLiBOb3RlIHRoYXQgaXQgaXMgTk9UIGZpeGVkIGxlbmd0aCAobGlnaHQgYnVsYiBicmVha3MgdGhpcyksIGJ1dCBoYXMgZml4ZWQgdmVydGV4IHBvc2l0aW9uc1xyXG4gKiByZWxhdGl2ZSB0byB0aGUgZWxlbWVudCdzIHRyYW5zZm9ybS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbiBmcm9tICcuLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLmpzJztcclxuaW1wb3J0IENpcmN1aXRFbGVtZW50LCB7IENpcmN1aXRFbGVtZW50T3B0aW9ucyB9IGZyb20gJy4vQ2lyY3VpdEVsZW1lbnQuanMnO1xyXG5pbXBvcnQgVmVydGV4IGZyb20gJy4vVmVydGV4LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgbnVtYmVyT2ZEZWNpbWFsUGxhY2VzPzogbnVtYmVyO1xyXG59O1xyXG5leHBvcnQgdHlwZSBGaXhlZENpcmN1aXRFbGVtZW50T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgQ2lyY3VpdEVsZW1lbnRPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgRml4ZWRDaXJjdWl0RWxlbWVudCBleHRlbmRzIENpcmN1aXRFbGVtZW50IHtcclxuXHJcbiAgLy8gdGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byBzaG93IGluIHJlYWRvdXRzIGFuZCBjb250cm9sc1xyXG4gIHB1YmxpYyByZWFkb25seSBudW1iZXJPZkRlY2ltYWxQbGFjZXM6IG51bWJlcjtcclxuXHJcbiAgLy8gVGhlIGRpc3RhbmNlIGZyb20gb25lIHZlcnRleCB0byBhbm90aGVyIChhcyB0aGUgY3JvdyBmbGllcyksIHVzZWQgZm9yIHJvdGF0aW9uIGFib3V0IGEgdmVydGV4XHJcbiAgcHVibGljIHJlYWRvbmx5IGRpc3RhbmNlQmV0d2VlblZlcnRpY2VzOiBudW1iZXI7XHJcblxyXG4gIC8vIGtlZXAgdHJhY2sgb2Ygd2hldGhlciBpdCBpcyBhIGZpeGVkIGxlbmd0aCBlbGVtZW50IGZvciBhc3NlcnRpb24gdGVzdGluZyBpbiBDaXJjdWl0RWxlbWVudFxyXG4gIHByaXZhdGUgcmVhZG9ubHkgaXNGaXhlZENpcmN1aXRFbGVtZW50OiBib29sZWFuO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN0YXJ0VmVydGV4OiBWZXJ0ZXgsXHJcbiAgICAgICAgICAgICAgIGVuZFZlcnRleDogVmVydGV4LFxyXG4gICAgICAgICAgICAgICBjaGFyZ2VQYXRoTGVuZ3RoOiBudW1iZXIsIC8vIHRoZSBkaXN0YW5jZSB0aGUgY2hhcmdlcyB0cmF2ZWwgKGluIHZpZXcgY29vcmRpbmF0ZXMpLCBzZWUgQ2lyY3VpdEVsZW1lbnQuanNcclxuICAgICAgICAgICAgICAgdGFuZGVtOiBUYW5kZW0sXHJcbiAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IEZpeGVkQ2lyY3VpdEVsZW1lbnRPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Rml4ZWRDaXJjdWl0RWxlbWVudE9wdGlvbnMsIFNlbGZPcHRpb25zLCBDaXJjdWl0RWxlbWVudE9wdGlvbnM+KCkoIHtcclxuICAgICAgbnVtYmVyT2ZEZWNpbWFsUGxhY2VzOiAxXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBTdXBlciBjb25zdHJ1Y3RvclxyXG4gICAgc3VwZXIoIHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgsIGNoYXJnZVBhdGhMZW5ndGgsIHRhbmRlbSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubnVtYmVyT2ZEZWNpbWFsUGxhY2VzID0gb3B0aW9ucy5udW1iZXJPZkRlY2ltYWxQbGFjZXM7XHJcbiAgICB0aGlzLmRpc3RhbmNlQmV0d2VlblZlcnRpY2VzID0gc3RhcnRWZXJ0ZXgucG9zaXRpb25Qcm9wZXJ0eS5nZXQoKS5kaXN0YW5jZSggZW5kVmVydGV4LnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkgKTtcclxuICAgIHRoaXMuaXNGaXhlZENpcmN1aXRFbGVtZW50ID0gdHJ1ZTtcclxuICB9XHJcbn1cclxuXHJcbmNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24ucmVnaXN0ZXIoICdGaXhlZENpcmN1aXRFbGVtZW50JywgRml4ZWRDaXJjdWl0RWxlbWVudCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLG9DQUFvQztBQUUxRCxPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7QUFDN0UsT0FBT0MsY0FBYyxNQUFpQyxxQkFBcUI7QUFRM0UsZUFBZSxNQUFlQyxtQkFBbUIsU0FBU0QsY0FBYyxDQUFDO0VBRXZFOztFQUdBOztFQUdBOztFQUdPRSxXQUFXQSxDQUFFQyxXQUFtQixFQUMxQkMsU0FBaUIsRUFDakJDLGdCQUF3QjtFQUFFO0VBQzFCQyxNQUFjLEVBQ2RDLGVBQTRDLEVBQUc7SUFFMUQsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQWlFLENBQUMsQ0FBRTtNQUMzRlcscUJBQXFCLEVBQUU7SUFDekIsQ0FBQyxFQUFFRixlQUFnQixDQUFDOztJQUVwQjtJQUNBLEtBQUssQ0FBRUosV0FBVyxFQUFFQyxTQUFTLEVBQUVDLGdCQUFnQixFQUFFQyxNQUFNLEVBQUVFLE9BQVEsQ0FBQztJQUVsRSxJQUFJLENBQUNDLHFCQUFxQixHQUFHRCxPQUFPLENBQUNDLHFCQUFxQjtJQUMxRCxJQUFJLENBQUNDLHVCQUF1QixHQUFHUCxXQUFXLENBQUNRLGdCQUFnQixDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUVULFNBQVMsQ0FBQ08sZ0JBQWdCLENBQUNDLEdBQUcsQ0FBQyxDQUFFLENBQUM7SUFDOUcsSUFBSSxDQUFDRSxxQkFBcUIsR0FBRyxJQUFJO0VBQ25DO0FBQ0Y7QUFFQWYsNEJBQTRCLENBQUNnQixRQUFRLENBQUUscUJBQXFCLEVBQUVkLG1CQUFvQixDQUFDIn0=