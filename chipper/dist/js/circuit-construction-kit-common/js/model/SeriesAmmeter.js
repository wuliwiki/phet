// Copyright 2015-2022, University of Colorado Boulder

/**
 * Model for an ammeter than can be connected in series with a circuit.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
import CCKCConstants from '../CCKCConstants.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import FixedCircuitElement from './FixedCircuitElement.js';
export default class SeriesAmmeter extends FixedCircuitElement {
  // the resistance in ohms.  A constant, but modeled as a property for uniformity with other resistive elements.

  constructor(startVertex, endVertex, tandem, providedOptions) {
    const options = optionize()({
      // SeriesAmmeters do not have these features, so opt out of PhET-iO instrumentation here
      isEditablePropertyOptions: {
        tandem: Tandem.OPT_OUT
      },
      isValueDisplayablePropertyOptions: {
        tandem: Tandem.OPT_OUT
      },
      labelStringPropertyOptions: {
        tandem: Tandem.OPT_OUT
      }
    }, providedOptions);
    super(startVertex, endVertex, CCKCConstants.SERIES_AMMETER_LENGTH, tandem, options);
    this.resistanceProperty = new NumberProperty(0);
  }

  /**
   * Get the properties so that the circuit can be solved when changed.
   */
  getCircuitProperties() {
    // No internal parameters that can change the circuit
    return [];
  }
}
circuitConstructionKitCommon.register('SeriesAmmeter', SeriesAmmeter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIm9wdGlvbml6ZSIsIlRhbmRlbSIsIkNDS0NDb25zdGFudHMiLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiRml4ZWRDaXJjdWl0RWxlbWVudCIsIlNlcmllc0FtbWV0ZXIiLCJjb25zdHJ1Y3RvciIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4IiwidGFuZGVtIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImlzRWRpdGFibGVQcm9wZXJ0eU9wdGlvbnMiLCJPUFRfT1VUIiwiaXNWYWx1ZURpc3BsYXlhYmxlUHJvcGVydHlPcHRpb25zIiwibGFiZWxTdHJpbmdQcm9wZXJ0eU9wdGlvbnMiLCJTRVJJRVNfQU1NRVRFUl9MRU5HVEgiLCJyZXNpc3RhbmNlUHJvcGVydHkiLCJnZXRDaXJjdWl0UHJvcGVydGllcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2VyaWVzQW1tZXRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgYW4gYW1tZXRlciB0aGFuIGNhbiBiZSBjb25uZWN0ZWQgaW4gc2VyaWVzIHdpdGggYSBjaXJjdWl0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBDQ0tDQ29uc3RhbnRzIGZyb20gJy4uL0NDS0NDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbiBmcm9tICcuLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLmpzJztcclxuaW1wb3J0IEZpeGVkQ2lyY3VpdEVsZW1lbnQsIHsgRml4ZWRDaXJjdWl0RWxlbWVudE9wdGlvbnMgfSBmcm9tICcuL0ZpeGVkQ2lyY3VpdEVsZW1lbnQuanMnO1xyXG5pbXBvcnQgVmVydGV4IGZyb20gJy4vVmVydGV4LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG50eXBlIFNlcmllc0FtbWV0ZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBGaXhlZENpcmN1aXRFbGVtZW50T3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcmllc0FtbWV0ZXIgZXh0ZW5kcyBGaXhlZENpcmN1aXRFbGVtZW50IHtcclxuXHJcbiAgLy8gdGhlIHJlc2lzdGFuY2UgaW4gb2htcy4gIEEgY29uc3RhbnQsIGJ1dCBtb2RlbGVkIGFzIGEgcHJvcGVydHkgZm9yIHVuaWZvcm1pdHkgd2l0aCBvdGhlciByZXNpc3RpdmUgZWxlbWVudHMuXHJcbiAgcHVibGljIHJlYWRvbmx5IHJlc2lzdGFuY2VQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3RhcnRWZXJ0ZXg6IFZlcnRleCwgZW5kVmVydGV4OiBWZXJ0ZXgsIHRhbmRlbTogVGFuZGVtLCBwcm92aWRlZE9wdGlvbnM/OiBTZXJpZXNBbW1ldGVyT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFNlcmllc0FtbWV0ZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgRml4ZWRDaXJjdWl0RWxlbWVudE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlcmllc0FtbWV0ZXJzIGRvIG5vdCBoYXZlIHRoZXNlIGZlYXR1cmVzLCBzbyBvcHQgb3V0IG9mIFBoRVQtaU8gaW5zdHJ1bWVudGF0aW9uIGhlcmVcclxuICAgICAgaXNFZGl0YWJsZVByb3BlcnR5T3B0aW9uczoge1xyXG4gICAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgICAgfSxcclxuICAgICAgaXNWYWx1ZURpc3BsYXlhYmxlUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgICB9LFxyXG4gICAgICBsYWJlbFN0cmluZ1Byb3BlcnR5T3B0aW9uczoge1xyXG4gICAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgICBzdXBlciggc3RhcnRWZXJ0ZXgsIGVuZFZlcnRleCwgQ0NLQ0NvbnN0YW50cy5TRVJJRVNfQU1NRVRFUl9MRU5HVEgsIHRhbmRlbSwgb3B0aW9ucyApO1xyXG4gICAgdGhpcy5yZXNpc3RhbmNlUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgcHJvcGVydGllcyBzbyB0aGF0IHRoZSBjaXJjdWl0IGNhbiBiZSBzb2x2ZWQgd2hlbiBjaGFuZ2VkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDaXJjdWl0UHJvcGVydGllcygpOiBQcm9wZXJ0eTxJbnRlbnRpb25hbEFueT5bXSB7XHJcblxyXG4gICAgLy8gTm8gaW50ZXJuYWwgcGFyYW1ldGVycyB0aGF0IGNhbiBjaGFuZ2UgdGhlIGNpcmN1aXRcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcbn1cclxuXHJcbmNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24ucmVnaXN0ZXIoICdTZXJpZXNBbW1ldGVyJywgU2VyaWVzQW1tZXRlciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sb0NBQW9DO0FBRS9ELE9BQU9DLFNBQVMsTUFBNEIsb0NBQW9DO0FBRWhGLE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7QUFDN0UsT0FBT0MsbUJBQW1CLE1BQXNDLDBCQUEwQjtBQU0xRixlQUFlLE1BQU1DLGFBQWEsU0FBU0QsbUJBQW1CLENBQUM7RUFFN0Q7O0VBR09FLFdBQVdBLENBQUVDLFdBQW1CLEVBQUVDLFNBQWlCLEVBQUVDLE1BQWMsRUFBRUMsZUFBc0MsRUFBRztJQUVuSCxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBZ0UsQ0FBQyxDQUFFO01BRTFGO01BQ0FZLHlCQUF5QixFQUFFO1FBQ3pCSCxNQUFNLEVBQUVSLE1BQU0sQ0FBQ1k7TUFDakIsQ0FBQztNQUNEQyxpQ0FBaUMsRUFBRTtRQUNqQ0wsTUFBTSxFQUFFUixNQUFNLENBQUNZO01BQ2pCLENBQUM7TUFDREUsMEJBQTBCLEVBQUU7UUFDMUJOLE1BQU0sRUFBRVIsTUFBTSxDQUFDWTtNQUNqQjtJQUNGLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUNwQixLQUFLLENBQUVILFdBQVcsRUFBRUMsU0FBUyxFQUFFTixhQUFhLENBQUNjLHFCQUFxQixFQUFFUCxNQUFNLEVBQUVFLE9BQVEsQ0FBQztJQUNyRixJQUFJLENBQUNNLGtCQUFrQixHQUFHLElBQUlsQixjQUFjLENBQUUsQ0FBRSxDQUFDO0VBQ25EOztFQUVBO0FBQ0Y7QUFDQTtFQUNTbUIsb0JBQW9CQSxDQUFBLEVBQStCO0lBRXhEO0lBQ0EsT0FBTyxFQUFFO0VBQ1g7QUFDRjtBQUVBZiw0QkFBNEIsQ0FBQ2dCLFFBQVEsQ0FBRSxlQUFlLEVBQUVkLGFBQWMsQ0FBQyJ9