// Copyright 2016-2022, University of Colorado Boulder

/**
 * The model for a single blue charge that moves along a circuit element, depicted as a colored sphere.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Emitter from '../../../axon/js/Emitter.js';
import Matrix3 from '../../../dot/js/Matrix3.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import Disposable from '../../../axon/js/Disposable.js';
export default class Charge extends Disposable {
  //the amount of charge

  // the CircuitElement the Charge is in, changed by Charge.updatePositionAndAngle

  // the distance the charge has traveled in its CircuitElement in view coordinates

  // rotation and translation for the charge

  // whether the charge should be displayed

  // Indicate when the position and/or angle changed

  /**
   * @param circuitElement - the circuit element the charge is in.
   * @param distance - how far along the circuit element it has traveled (in screen coordinates)
   * @param visibleProperty - whether the charge should be shown.
   * @param charge - +1 for conventional current and -1 for electrons
   */
  constructor(circuitElement, distance, visibleProperty, charge) {
    super();
    assert && assert(charge === 1 || charge === -1, 'charge should be 1 or -1');
    this.charge = charge;

    // Validate inputs
    assert && assert(_.isNumber(distance), 'distance should be a number');
    assert && assert(distance >= 0, 'charge was below the origin of the circuit element');
    assert && assert(circuitElement.containsScalarPosition(distance), 'charge was not within the circuit element');
    this.circuitElement = circuitElement;
    this.distance = distance;
    this.matrix = Matrix3.identity();
    this.visibleProperty = visibleProperty;
    this.changedEmitter = new Emitter();
    this.updatePositionAndAngle();
  }

  /**
   * After updating the circuit element and/or distance traveled, update the 2d position and direction.
   */
  updatePositionAndAngle() {
    assert && assert(!isNaN(this.distance), 'charge position was not a number');
    this.circuitElement.updateMatrixForPoint(this.distance, this.matrix);

    // Notify listeners that the position and angle have changed.
    this.changedEmitter.emit();
  }

  // Dispose the charge when it will never be used again.
  dispose() {
    this.changedEmitter.dispose();
    super.dispose();
  }
}
circuitConstructionKitCommon.register('Charge', Charge);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiTWF0cml4MyIsImNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24iLCJEaXNwb3NhYmxlIiwiQ2hhcmdlIiwiY29uc3RydWN0b3IiLCJjaXJjdWl0RWxlbWVudCIsImRpc3RhbmNlIiwidmlzaWJsZVByb3BlcnR5IiwiY2hhcmdlIiwiYXNzZXJ0IiwiXyIsImlzTnVtYmVyIiwiY29udGFpbnNTY2FsYXJQb3NpdGlvbiIsIm1hdHJpeCIsImlkZW50aXR5IiwiY2hhbmdlZEVtaXR0ZXIiLCJ1cGRhdGVQb3NpdGlvbkFuZEFuZ2xlIiwiaXNOYU4iLCJ1cGRhdGVNYXRyaXhGb3JQb2ludCIsImVtaXQiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDaGFyZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIG1vZGVsIGZvciBhIHNpbmdsZSBibHVlIGNoYXJnZSB0aGF0IG1vdmVzIGFsb25nIGEgY2lyY3VpdCBlbGVtZW50LCBkZXBpY3RlZCBhcyBhIGNvbG9yZWQgc3BoZXJlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uLy4uLy4uL2F4b24vanMvRW1pdHRlci5qcyc7XHJcbmltcG9ydCBURW1pdHRlciBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RFbWl0dGVyLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tICcuLi8uLi8uLi9kb3QvanMvTWF0cml4My5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIGZyb20gJy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24uanMnO1xyXG5pbXBvcnQgQ2lyY3VpdEVsZW1lbnQgZnJvbSAnLi9DaXJjdWl0RWxlbWVudC5qcyc7XHJcbmltcG9ydCBEaXNwb3NhYmxlIGZyb20gJy4uLy4uLy4uL2F4b24vanMvRGlzcG9zYWJsZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyZ2UgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcclxuXHJcbiAgLy90aGUgYW1vdW50IG9mIGNoYXJnZVxyXG4gIHB1YmxpYyByZWFkb25seSBjaGFyZ2U6IG51bWJlcjtcclxuXHJcbiAgLy8gdGhlIENpcmN1aXRFbGVtZW50IHRoZSBDaGFyZ2UgaXMgaW4sIGNoYW5nZWQgYnkgQ2hhcmdlLnVwZGF0ZVBvc2l0aW9uQW5kQW5nbGVcclxuICBwdWJsaWMgY2lyY3VpdEVsZW1lbnQ6IENpcmN1aXRFbGVtZW50O1xyXG5cclxuICAvLyB0aGUgZGlzdGFuY2UgdGhlIGNoYXJnZSBoYXMgdHJhdmVsZWQgaW4gaXRzIENpcmN1aXRFbGVtZW50IGluIHZpZXcgY29vcmRpbmF0ZXNcclxuICBwdWJsaWMgZGlzdGFuY2U6IG51bWJlcjtcclxuXHJcbiAgLy8gcm90YXRpb24gYW5kIHRyYW5zbGF0aW9uIGZvciB0aGUgY2hhcmdlXHJcbiAgcHVibGljIHJlYWRvbmx5IG1hdHJpeDogTWF0cml4MztcclxuXHJcbiAgLy8gd2hldGhlciB0aGUgY2hhcmdlIHNob3VsZCBiZSBkaXNwbGF5ZWRcclxuICBwdWJsaWMgcmVhZG9ubHkgdmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgLy8gSW5kaWNhdGUgd2hlbiB0aGUgcG9zaXRpb24gYW5kL29yIGFuZ2xlIGNoYW5nZWRcclxuICBwdWJsaWMgcmVhZG9ubHkgY2hhbmdlZEVtaXR0ZXI6IFRFbWl0dGVyO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gY2lyY3VpdEVsZW1lbnQgLSB0aGUgY2lyY3VpdCBlbGVtZW50IHRoZSBjaGFyZ2UgaXMgaW4uXHJcbiAgICogQHBhcmFtIGRpc3RhbmNlIC0gaG93IGZhciBhbG9uZyB0aGUgY2lyY3VpdCBlbGVtZW50IGl0IGhhcyB0cmF2ZWxlZCAoaW4gc2NyZWVuIGNvb3JkaW5hdGVzKVxyXG4gICAqIEBwYXJhbSB2aXNpYmxlUHJvcGVydHkgLSB3aGV0aGVyIHRoZSBjaGFyZ2Ugc2hvdWxkIGJlIHNob3duLlxyXG4gICAqIEBwYXJhbSBjaGFyZ2UgLSArMSBmb3IgY29udmVudGlvbmFsIGN1cnJlbnQgYW5kIC0xIGZvciBlbGVjdHJvbnNcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNpcmN1aXRFbGVtZW50OiBDaXJjdWl0RWxlbWVudCwgZGlzdGFuY2U6IG51bWJlciwgdmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgY2hhcmdlOiBudW1iZXIgKSB7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjaGFyZ2UgPT09IDEgfHwgY2hhcmdlID09PSAtMSwgJ2NoYXJnZSBzaG91bGQgYmUgMSBvciAtMScgKTtcclxuXHJcbiAgICB0aGlzLmNoYXJnZSA9IGNoYXJnZTtcclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBpbnB1dHNcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uaXNOdW1iZXIoIGRpc3RhbmNlICksICdkaXN0YW5jZSBzaG91bGQgYmUgYSBudW1iZXInICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBkaXN0YW5jZSA+PSAwLCAnY2hhcmdlIHdhcyBiZWxvdyB0aGUgb3JpZ2luIG9mIHRoZSBjaXJjdWl0IGVsZW1lbnQnICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjaXJjdWl0RWxlbWVudC5jb250YWluc1NjYWxhclBvc2l0aW9uKCBkaXN0YW5jZSApLCAnY2hhcmdlIHdhcyBub3Qgd2l0aGluIHRoZSBjaXJjdWl0IGVsZW1lbnQnICk7XHJcblxyXG4gICAgdGhpcy5jaXJjdWl0RWxlbWVudCA9IGNpcmN1aXRFbGVtZW50O1xyXG4gICAgdGhpcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgdGhpcy5tYXRyaXggPSBNYXRyaXgzLmlkZW50aXR5KCk7XHJcbiAgICB0aGlzLnZpc2libGVQcm9wZXJ0eSA9IHZpc2libGVQcm9wZXJ0eTtcclxuICAgIHRoaXMuY2hhbmdlZEVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xyXG5cclxuICAgIHRoaXMudXBkYXRlUG9zaXRpb25BbmRBbmdsZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWZ0ZXIgdXBkYXRpbmcgdGhlIGNpcmN1aXQgZWxlbWVudCBhbmQvb3IgZGlzdGFuY2UgdHJhdmVsZWQsIHVwZGF0ZSB0aGUgMmQgcG9zaXRpb24gYW5kIGRpcmVjdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlUG9zaXRpb25BbmRBbmdsZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFpc05hTiggdGhpcy5kaXN0YW5jZSApLCAnY2hhcmdlIHBvc2l0aW9uIHdhcyBub3QgYSBudW1iZXInICk7XHJcbiAgICB0aGlzLmNpcmN1aXRFbGVtZW50LnVwZGF0ZU1hdHJpeEZvclBvaW50KCB0aGlzLmRpc3RhbmNlLCB0aGlzLm1hdHJpeCApO1xyXG5cclxuICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnMgdGhhdCB0aGUgcG9zaXRpb24gYW5kIGFuZ2xlIGhhdmUgY2hhbmdlZC5cclxuICAgIHRoaXMuY2hhbmdlZEVtaXR0ZXIuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gRGlzcG9zZSB0aGUgY2hhcmdlIHdoZW4gaXQgd2lsbCBuZXZlciBiZSB1c2VkIGFnYWluLlxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jaGFuZ2VkRW1pdHRlci5kaXNwb3NlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLnJlZ2lzdGVyKCAnQ2hhcmdlJywgQ2hhcmdlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSw2QkFBNkI7QUFHakQsT0FBT0MsT0FBTyxNQUFNLDRCQUE0QjtBQUNoRCxPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7QUFFN0UsT0FBT0MsVUFBVSxNQUFNLGdDQUFnQztBQUV2RCxlQUFlLE1BQU1DLE1BQU0sU0FBU0QsVUFBVSxDQUFDO0VBRTdDOztFQUdBOztFQUdBOztFQUdBOztFQUdBOztFQUdBOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTRSxXQUFXQSxDQUFFQyxjQUE4QixFQUFFQyxRQUFnQixFQUFFQyxlQUFrQyxFQUFFQyxNQUFjLEVBQUc7SUFFekgsS0FBSyxDQUFDLENBQUM7SUFFUEMsTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sS0FBSyxDQUFDLElBQUlBLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFBRSwwQkFBMkIsQ0FBQztJQUU3RSxJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTs7SUFFcEI7SUFDQUMsTUFBTSxJQUFJQSxNQUFNLENBQUVDLENBQUMsQ0FBQ0MsUUFBUSxDQUFFTCxRQUFTLENBQUMsRUFBRSw2QkFBOEIsQ0FBQztJQUN6RUcsTUFBTSxJQUFJQSxNQUFNLENBQUVILFFBQVEsSUFBSSxDQUFDLEVBQUUsb0RBQXFELENBQUM7SUFDdkZHLE1BQU0sSUFBSUEsTUFBTSxDQUFFSixjQUFjLENBQUNPLHNCQUFzQixDQUFFTixRQUFTLENBQUMsRUFBRSwyQ0FBNEMsQ0FBQztJQUVsSCxJQUFJLENBQUNELGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNPLE1BQU0sR0FBR2IsT0FBTyxDQUFDYyxRQUFRLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUNQLGVBQWUsR0FBR0EsZUFBZTtJQUN0QyxJQUFJLENBQUNRLGNBQWMsR0FBRyxJQUFJaEIsT0FBTyxDQUFDLENBQUM7SUFFbkMsSUFBSSxDQUFDaUIsc0JBQXNCLENBQUMsQ0FBQztFQUMvQjs7RUFFQTtBQUNGO0FBQ0E7RUFDU0Esc0JBQXNCQSxDQUFBLEVBQVM7SUFDcENQLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNRLEtBQUssQ0FBRSxJQUFJLENBQUNYLFFBQVMsQ0FBQyxFQUFFLGtDQUFtQyxDQUFDO0lBQy9FLElBQUksQ0FBQ0QsY0FBYyxDQUFDYSxvQkFBb0IsQ0FBRSxJQUFJLENBQUNaLFFBQVEsRUFBRSxJQUFJLENBQUNPLE1BQU8sQ0FBQzs7SUFFdEU7SUFDQSxJQUFJLENBQUNFLGNBQWMsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7RUFDNUI7O0VBRUE7RUFDZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNMLGNBQWMsQ0FBQ0ssT0FBTyxDQUFDLENBQUM7SUFDN0IsS0FBSyxDQUFDQSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFuQiw0QkFBNEIsQ0FBQ29CLFFBQVEsQ0FBRSxRQUFRLEVBQUVsQixNQUFPLENBQUMifQ==