// Copyright 2015-2023, University of Colorado Boulder

/**
 * Base class for ACVoltage and Battery, which both supply a voltage across the Vertex instances.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import FixedCircuitElement from './FixedCircuitElement.js';
import PowerDissipatedProperty from './PowerDissipatedProperty.js';
import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import NumberIO from '../../../tandem/js/types/NumberIO.js';
import optionize from '../../../phet-core/js/optionize.js';
export default class VoltageSource extends FixedCircuitElement {
  // the voltage of the battery in volts

  // the internal resistance of the battery

  // track which way the battery "button" (plus side) was facing the initial state so
  // the user can only create a certain number of "left" or "right" batteries from the toolbox.
  // @readonly
  /**
   * @param startVertex - one of the battery vertices
   * @param endVertex - the other battery vertex
   * @param internalResistanceProperty - the resistance of the battery
   * @param length - the length of the battery in view coordinates
   * @param tandem
   * @param [providedOptions]
   */
  constructor(startVertex, endVertex, internalResistanceProperty, length, tandem, providedOptions) {
    assert && assert(internalResistanceProperty, 'internalResistanceProperty should be defined');
    const options = optionize()({
      initialOrientation: 'right',
      voltage: 9.0,
      isFlammable: true,
      numberOfDecimalPlaces: 1,
      voltagePropertyOptions: {
        tandem: tandem.createTandem('voltageProperty'),
        phetioFeatured: true
      }
    }, providedOptions);
    super(startVertex, endVertex, length, tandem, options);
    this.voltageProperty = new NumberProperty(options.voltage, options.voltagePropertyOptions);
    this.internalResistanceProperty = internalResistanceProperty;
    this.powerDissipatedProperty = new PowerDissipatedProperty(this.currentProperty, internalResistanceProperty, tandem.createTandem('powerDissipatedProperty'));
    this.powerGeneratedProperty = new DerivedProperty([this.currentProperty, this.voltageProperty], (current, voltage) => Math.abs(current * voltage), {
      tandem: tandem.createTandem('powerGeneratedProperty'),
      phetioValueType: NumberIO,
      phetioHighFrequency: true,
      phetioFeatured: true
    });
    this.initialOrientation = options.initialOrientation;
  }

  /**
   * Dispose of this and PhET-iO instrumented children, so they will be unregistered.
   */
  dispose() {
    this.voltageProperty.dispose();
    this.powerDissipatedProperty.dispose();
    this.powerGeneratedProperty.dispose();
    super.dispose();
  }

  /**
   * Get the properties so that the circuit can be solved when changed.
   */
  getCircuitProperties() {
    return [this.voltageProperty];
  }
}
circuitConstructionKitCommon.register('VoltageSource', VoltageSource);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,