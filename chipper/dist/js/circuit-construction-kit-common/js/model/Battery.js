// Copyright 2015-2023, University of Colorado Boulder

/**
 * The Battery is a circuit element that provides a fixed voltage difference.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import Range from '../../../dot/js/Range.js';
import optionize from '../../../phet-core/js/optionize.js';
import CCKCConstants from '../CCKCConstants.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import VoltageSource from './VoltageSource.js';

// constants
const BATTERY_LENGTH = CCKCConstants.BATTERY_LENGTH;
export default class Battery extends VoltageSource {
  static VOLTAGE_DEFAULT = 9.0;
  static VOLTAGE_RANGE = new Range(0, 120);
  static VOLTAGE_DECIMAL_PLACES = 1;
  static HIGH_VOLTAGE_DEFAULT = 1000;
  static HIGH_VOLTAGE_RANGE = new Range(100, 100000);
  static HIGH_VOLTAGE_DECIMAL_PLACES = 0;
  constructor(startVertex, endVertex, internalResistanceProperty, batteryType, tandem, providedOptions) {
    assert && assert(internalResistanceProperty, 'internalResistanceProperty should be defined');
    const options = optionize()({
      initialOrientation: 'right',
      voltage: Battery.VOLTAGE_DEFAULT,
      isFlammable: true,
      numberOfDecimalPlaces: batteryType === 'normal' ? Battery.VOLTAGE_DECIMAL_PLACES : Battery.HIGH_VOLTAGE_DECIMAL_PLACES,
      voltagePropertyOptions: {
        range: batteryType === 'normal' ? Battery.VOLTAGE_RANGE : Battery.HIGH_VOLTAGE_RANGE
      }
    }, providedOptions);
    super(startVertex, endVertex, internalResistanceProperty, BATTERY_LENGTH, tandem, options);
    this.initialOrientation = options.initialOrientation;
    this.batteryType = batteryType;
    this.isReversibleProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('isReversibleProperty'),
      phetioFeatured: true
    });
  }
  step(time, dt, circuit) {
    // nothing to do
  }
  dispose() {
    this.isReversibleProperty.dispose();
    super.dispose();
  }
}
circuitConstructionKitCommon.register('Battery', Battery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJSYW5nZSIsIm9wdGlvbml6ZSIsIkNDS0NDb25zdGFudHMiLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiVm9sdGFnZVNvdXJjZSIsIkJBVFRFUllfTEVOR1RIIiwiQmF0dGVyeSIsIlZPTFRBR0VfREVGQVVMVCIsIlZPTFRBR0VfUkFOR0UiLCJWT0xUQUdFX0RFQ0lNQUxfUExBQ0VTIiwiSElHSF9WT0xUQUdFX0RFRkFVTFQiLCJISUdIX1ZPTFRBR0VfUkFOR0UiLCJISUdIX1ZPTFRBR0VfREVDSU1BTF9QTEFDRVMiLCJjb25zdHJ1Y3RvciIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4IiwiaW50ZXJuYWxSZXNpc3RhbmNlUHJvcGVydHkiLCJiYXR0ZXJ5VHlwZSIsInRhbmRlbSIsInByb3ZpZGVkT3B0aW9ucyIsImFzc2VydCIsIm9wdGlvbnMiLCJpbml0aWFsT3JpZW50YXRpb24iLCJ2b2x0YWdlIiwiaXNGbGFtbWFibGUiLCJudW1iZXJPZkRlY2ltYWxQbGFjZXMiLCJ2b2x0YWdlUHJvcGVydHlPcHRpb25zIiwicmFuZ2UiLCJpc1JldmVyc2libGVQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0ZlYXR1cmVkIiwic3RlcCIsInRpbWUiLCJkdCIsImNpcmN1aXQiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCYXR0ZXJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBCYXR0ZXJ5IGlzIGEgY2lyY3VpdCBlbGVtZW50IHRoYXQgcHJvdmlkZXMgYSBmaXhlZCB2b2x0YWdlIGRpZmZlcmVuY2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgQ0NLQ0NvbnN0YW50cyBmcm9tICcuLi9DQ0tDQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24gZnJvbSAnLi4vY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5qcyc7XHJcbmltcG9ydCBCYXR0ZXJ5VHlwZSBmcm9tICcuL0JhdHRlcnlUeXBlLmpzJztcclxuaW1wb3J0IENpcmN1aXQgZnJvbSAnLi9DaXJjdWl0LmpzJztcclxuaW1wb3J0IFZlcnRleCBmcm9tICcuL1ZlcnRleC5qcyc7XHJcbmltcG9ydCBWb2x0YWdlU291cmNlLCB7IFZvbHRhZ2VTb3VyY2VPcHRpb25zIH0gZnJvbSAnLi9Wb2x0YWdlU291cmNlLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBCQVRURVJZX0xFTkdUSCA9IENDS0NDb25zdGFudHMuQkFUVEVSWV9MRU5HVEg7XHJcblxyXG50eXBlIEJhdHRlcnlPcHRpb25zID0gVm9sdGFnZVNvdXJjZU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXR0ZXJ5IGV4dGVuZHMgVm9sdGFnZVNvdXJjZSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGJhdHRlcnlUeXBlOiBCYXR0ZXJ5VHlwZTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFZPTFRBR0VfREVGQVVMVCA9IDkuMDtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFZPTFRBR0VfUkFOR0UgPSBuZXcgUmFuZ2UoIDAsIDEyMCApO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVk9MVEFHRV9ERUNJTUFMX1BMQUNFUyA9IDE7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBISUdIX1ZPTFRBR0VfREVGQVVMVCA9IDEwMDA7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBISUdIX1ZPTFRBR0VfUkFOR0UgPSBuZXcgUmFuZ2UoIDEwMCwgMTAwMDAwICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBISUdIX1ZPTFRBR0VfREVDSU1BTF9QTEFDRVMgPSAwO1xyXG4gIHB1YmxpYyByZWFkb25seSBpc1JldmVyc2libGVQcm9wZXJ0eTogQm9vbGVhblByb3BlcnR5O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN0YXJ0VmVydGV4OiBWZXJ0ZXgsIGVuZFZlcnRleDogVmVydGV4LCBpbnRlcm5hbFJlc2lzdGFuY2VQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgYmF0dGVyeVR5cGU6IEJhdHRlcnlUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGFuZGVtOiBUYW5kZW0sIHByb3ZpZGVkT3B0aW9ucz86IEJhdHRlcnlPcHRpb25zICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggaW50ZXJuYWxSZXNpc3RhbmNlUHJvcGVydHksICdpbnRlcm5hbFJlc2lzdGFuY2VQcm9wZXJ0eSBzaG91bGQgYmUgZGVmaW5lZCcgKTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QmF0dGVyeU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMsIFZvbHRhZ2VTb3VyY2VPcHRpb25zPigpKCB7XHJcbiAgICAgIGluaXRpYWxPcmllbnRhdGlvbjogJ3JpZ2h0JyxcclxuICAgICAgdm9sdGFnZTogQmF0dGVyeS5WT0xUQUdFX0RFRkFVTFQsXHJcbiAgICAgIGlzRmxhbW1hYmxlOiB0cnVlLFxyXG4gICAgICBudW1iZXJPZkRlY2ltYWxQbGFjZXM6IGJhdHRlcnlUeXBlID09PSAnbm9ybWFsJyA/IEJhdHRlcnkuVk9MVEFHRV9ERUNJTUFMX1BMQUNFUyA6IEJhdHRlcnkuSElHSF9WT0xUQUdFX0RFQ0lNQUxfUExBQ0VTLFxyXG4gICAgICB2b2x0YWdlUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgcmFuZ2U6IGJhdHRlcnlUeXBlID09PSAnbm9ybWFsJyA/IEJhdHRlcnkuVk9MVEFHRV9SQU5HRSA6IEJhdHRlcnkuSElHSF9WT0xUQUdFX1JBTkdFXHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gICAgc3VwZXIoIHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgsIGludGVybmFsUmVzaXN0YW5jZVByb3BlcnR5LCBCQVRURVJZX0xFTkdUSCwgdGFuZGVtLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5pbml0aWFsT3JpZW50YXRpb24gPSBvcHRpb25zLmluaXRpYWxPcmllbnRhdGlvbjtcclxuICAgIHRoaXMuYmF0dGVyeVR5cGUgPSBiYXR0ZXJ5VHlwZTtcclxuICAgIHRoaXMuaXNSZXZlcnNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2lzUmV2ZXJzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIHN0ZXAoIHRpbWU6IG51bWJlciwgZHQ6IG51bWJlciwgY2lyY3VpdDogQ2lyY3VpdCApOiB2b2lkIHtcclxuICAgIC8vIG5vdGhpbmcgdG8gZG9cclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc1JldmVyc2libGVQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLnJlZ2lzdGVyKCAnQmF0dGVyeScsIEJhdHRlcnkgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHFDQUFxQztBQUVqRSxPQUFPQyxLQUFLLE1BQU0sMEJBQTBCO0FBQzVDLE9BQU9DLFNBQVMsTUFBNEIsb0NBQW9DO0FBRWhGLE9BQU9DLGFBQWEsTUFBTSxxQkFBcUI7QUFDL0MsT0FBT0MsNEJBQTRCLE1BQU0sb0NBQW9DO0FBSTdFLE9BQU9DLGFBQWEsTUFBZ0Msb0JBQW9COztBQUV4RTtBQUNBLE1BQU1DLGNBQWMsR0FBR0gsYUFBYSxDQUFDRyxjQUFjO0FBSW5ELGVBQWUsTUFBTUMsT0FBTyxTQUFTRixhQUFhLENBQUM7RUFFakQsT0FBdUJHLGVBQWUsR0FBRyxHQUFHO0VBQzVDLE9BQXVCQyxhQUFhLEdBQUcsSUFBSVIsS0FBSyxDQUFFLENBQUMsRUFBRSxHQUFJLENBQUM7RUFDMUQsT0FBdUJTLHNCQUFzQixHQUFHLENBQUM7RUFDakQsT0FBdUJDLG9CQUFvQixHQUFHLElBQUk7RUFDbEQsT0FBdUJDLGtCQUFrQixHQUFHLElBQUlYLEtBQUssQ0FBRSxHQUFHLEVBQUUsTUFBTyxDQUFDO0VBQ3BFLE9BQXVCWSwyQkFBMkIsR0FBRyxDQUFDO0VBRy9DQyxXQUFXQSxDQUFFQyxXQUFtQixFQUFFQyxTQUFpQixFQUFFQywwQkFBNEMsRUFBRUMsV0FBd0IsRUFDOUdDLE1BQWMsRUFBRUMsZUFBZ0MsRUFBRztJQUNyRUMsTUFBTSxJQUFJQSxNQUFNLENBQUVKLDBCQUEwQixFQUFFLDhDQUErQyxDQUFDO0lBQzlGLE1BQU1LLE9BQU8sR0FBR3BCLFNBQVMsQ0FBeUQsQ0FBQyxDQUFFO01BQ25GcUIsa0JBQWtCLEVBQUUsT0FBTztNQUMzQkMsT0FBTyxFQUFFakIsT0FBTyxDQUFDQyxlQUFlO01BQ2hDaUIsV0FBVyxFQUFFLElBQUk7TUFDakJDLHFCQUFxQixFQUFFUixXQUFXLEtBQUssUUFBUSxHQUFHWCxPQUFPLENBQUNHLHNCQUFzQixHQUFHSCxPQUFPLENBQUNNLDJCQUEyQjtNQUN0SGMsc0JBQXNCLEVBQUU7UUFDdEJDLEtBQUssRUFBRVYsV0FBVyxLQUFLLFFBQVEsR0FBR1gsT0FBTyxDQUFDRSxhQUFhLEdBQUdGLE9BQU8sQ0FBQ0s7TUFDcEU7SUFDRixDQUFDLEVBQUVRLGVBQWdCLENBQUM7SUFDcEIsS0FBSyxDQUFFTCxXQUFXLEVBQUVDLFNBQVMsRUFBRUMsMEJBQTBCLEVBQUVYLGNBQWMsRUFBRWEsTUFBTSxFQUFFRyxPQUFRLENBQUM7SUFFNUYsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR0QsT0FBTyxDQUFDQyxrQkFBa0I7SUFDcEQsSUFBSSxDQUFDTCxXQUFXLEdBQUdBLFdBQVc7SUFDOUIsSUFBSSxDQUFDVyxvQkFBb0IsR0FBRyxJQUFJN0IsZUFBZSxDQUFFLElBQUksRUFBRTtNQUNyRG1CLE1BQU0sRUFBRUEsTUFBTSxDQUFDVyxZQUFZLENBQUUsc0JBQXVCLENBQUM7TUFDckRDLGNBQWMsRUFBRTtJQUNsQixDQUFFLENBQUM7RUFDTDtFQUVnQkMsSUFBSUEsQ0FBRUMsSUFBWSxFQUFFQyxFQUFVLEVBQUVDLE9BQWdCLEVBQVM7SUFDdkU7RUFBQTtFQUdjQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDUCxvQkFBb0IsQ0FBQ08sT0FBTyxDQUFDLENBQUM7SUFDbkMsS0FBSyxDQUFDQSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFoQyw0QkFBNEIsQ0FBQ2lDLFFBQVEsQ0FBRSxTQUFTLEVBQUU5QixPQUFRLENBQUMifQ==