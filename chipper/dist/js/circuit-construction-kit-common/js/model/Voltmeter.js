// Copyright 2016-2023, University of Colorado Boulder

/**
 * The model for a voltmeter, which has a red and black probe and reads out voltage between vertices/wires. Exists
 * for the life of the sim and hence a dispose implementation is not needed.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Vector2 from '../../../dot/js/Vector2.js';
import Vector2Property from '../../../dot/js/Vector2Property.js';
import NullableIO from '../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../tandem/js/types/NumberIO.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import Meter from './Meter.js';
import VoltageConnection from './VoltageConnection.js';
export default class Voltmeter extends Meter {
  // the voltage the probe is reading (in volts) or null if unconnected

  // the position of the tip of the red probe in model=view coordinates

  // the position of the black probe in model=view coordinates

  constructor(tandem, phetioIndex) {
    super(tandem, phetioIndex);
    this.voltageProperty = new Property(null, {
      tandem: tandem.createTandem('voltageProperty'),
      units: 'V',
      phetioValueType: NullableIO(NumberIO),
      phetioReadOnly: true,
      phetioFeatured: true
    });
    this.redProbePositionProperty = new Vector2Property(Vector2.ZERO, {
      tandem: tandem.createTandem('redProbePositionProperty'),
      phetioFeatured: true
    });
    this.blackProbePositionProperty = new Vector2Property(Vector2.ZERO, {
      tandem: tandem.createTandem('blackProbePositionProperty'),
      phetioFeatured: true
    });
    this.blackConnectionProperty = new Property(null, {
      tandem: tandem.createTandem('blackProbeConnectionProperty'),
      phetioValueType: NullableIO(VoltageConnection.VoltageConnectionIO),
      phetioReadOnly: true,
      phetioFeatured: true
    });
    this.redConnectionProperty = new Property(null, {
      tandem: tandem.createTandem('redProbeConnectionProperty'),
      phetioValueType: NullableIO(VoltageConnection.VoltageConnectionIO),
      phetioReadOnly: true,
      phetioFeatured: true
    });
    this.isActiveProperty.link(isActive => {
      if (!isActive) {
        this.blackConnectionProperty.value = null;
        this.redConnectionProperty.value = null;
      }
    });
  }

  /**
   * Reset the voltmeter, called when reset all is pressed.
   */
  reset() {
    super.reset();
    this.voltageProperty.reset();
    this.redProbePositionProperty.reset();
    this.blackProbePositionProperty.reset();
  }
}
circuitConstructionKitCommon.register('Voltmeter', Voltmeter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJWZWN0b3IyUHJvcGVydHkiLCJOdWxsYWJsZUlPIiwiTnVtYmVySU8iLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiTWV0ZXIiLCJWb2x0YWdlQ29ubmVjdGlvbiIsIlZvbHRtZXRlciIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwicGhldGlvSW5kZXgiLCJ2b2x0YWdlUHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJ1bml0cyIsInBoZXRpb1ZhbHVlVHlwZSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvRmVhdHVyZWQiLCJyZWRQcm9iZVBvc2l0aW9uUHJvcGVydHkiLCJaRVJPIiwiYmxhY2tQcm9iZVBvc2l0aW9uUHJvcGVydHkiLCJibGFja0Nvbm5lY3Rpb25Qcm9wZXJ0eSIsIlZvbHRhZ2VDb25uZWN0aW9uSU8iLCJyZWRDb25uZWN0aW9uUHJvcGVydHkiLCJpc0FjdGl2ZVByb3BlcnR5IiwibGluayIsImlzQWN0aXZlIiwidmFsdWUiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVm9sdG1ldGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBtb2RlbCBmb3IgYSB2b2x0bWV0ZXIsIHdoaWNoIGhhcyBhIHJlZCBhbmQgYmxhY2sgcHJvYmUgYW5kIHJlYWRzIG91dCB2b2x0YWdlIGJldHdlZW4gdmVydGljZXMvd2lyZXMuIEV4aXN0c1xyXG4gKiBmb3IgdGhlIGxpZmUgb2YgdGhlIHNpbSBhbmQgaGVuY2UgYSBkaXNwb3NlIGltcGxlbWVudGF0aW9uIGlzIG5vdCBuZWVkZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBOdWxsYWJsZUlPIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdWxsYWJsZUlPLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIGZyb20gJy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24uanMnO1xyXG5pbXBvcnQgTWV0ZXIgZnJvbSAnLi9NZXRlci5qcyc7XHJcbmltcG9ydCBWb2x0YWdlQ29ubmVjdGlvbiBmcm9tICcuL1ZvbHRhZ2VDb25uZWN0aW9uLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZvbHRtZXRlciBleHRlbmRzIE1ldGVyIHtcclxuXHJcbiAgLy8gdGhlIHZvbHRhZ2UgdGhlIHByb2JlIGlzIHJlYWRpbmcgKGluIHZvbHRzKSBvciBudWxsIGlmIHVuY29ubmVjdGVkXHJcbiAgcHVibGljIHJlYWRvbmx5IHZvbHRhZ2VQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyIHwgbnVsbD47XHJcblxyXG4gIC8vIHRoZSBwb3NpdGlvbiBvZiB0aGUgdGlwIG9mIHRoZSByZWQgcHJvYmUgaW4gbW9kZWw9dmlldyBjb29yZGluYXRlc1xyXG4gIHB1YmxpYyByZWFkb25seSByZWRQcm9iZVBvc2l0aW9uUHJvcGVydHk6IFZlY3RvcjJQcm9wZXJ0eTtcclxuXHJcbiAgLy8gdGhlIHBvc2l0aW9uIG9mIHRoZSBibGFjayBwcm9iZSBpbiBtb2RlbD12aWV3IGNvb3JkaW5hdGVzXHJcbiAgcHVibGljIHJlYWRvbmx5IGJsYWNrUHJvYmVQb3NpdGlvblByb3BlcnR5OiBWZWN0b3IyUHJvcGVydHk7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBibGFja0Nvbm5lY3Rpb25Qcm9wZXJ0eTogUHJvcGVydHk8Vm9sdGFnZUNvbm5lY3Rpb24gfCBudWxsPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgcmVkQ29ubmVjdGlvblByb3BlcnR5OiBQcm9wZXJ0eTxWb2x0YWdlQ29ubmVjdGlvbiB8IG51bGw+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtLCBwaGV0aW9JbmRleDogbnVtYmVyICkge1xyXG4gICAgc3VwZXIoIHRhbmRlbSwgcGhldGlvSW5kZXggKTtcclxuXHJcbiAgICB0aGlzLnZvbHRhZ2VQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eTxudW1iZXIgfCBudWxsPiggbnVsbCwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2b2x0YWdlUHJvcGVydHknICksXHJcbiAgICAgIHVuaXRzOiAnVicsXHJcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogTnVsbGFibGVJTyggTnVtYmVySU8gKSxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWUsXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5yZWRQcm9iZVBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBWZWN0b3IyLlpFUk8sIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncmVkUHJvYmVQb3NpdGlvblByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYmxhY2tQcm9iZVBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBWZWN0b3IyLlpFUk8sIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYmxhY2tQcm9iZVBvc2l0aW9uUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5ibGFja0Nvbm5lY3Rpb25Qcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eTxWb2x0YWdlQ29ubmVjdGlvbiB8IG51bGw+KCBudWxsLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2JsYWNrUHJvYmVDb25uZWN0aW9uUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogTnVsbGFibGVJTyggVm9sdGFnZUNvbm5lY3Rpb24uVm9sdGFnZUNvbm5lY3Rpb25JTyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSxcclxuICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnJlZENvbm5lY3Rpb25Qcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eTxWb2x0YWdlQ29ubmVjdGlvbiB8IG51bGw+KCBudWxsLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3JlZFByb2JlQ29ubmVjdGlvblByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bGxhYmxlSU8oIFZvbHRhZ2VDb25uZWN0aW9uLlZvbHRhZ2VDb25uZWN0aW9uSU8gKSxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWUsXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5pc0FjdGl2ZVByb3BlcnR5LmxpbmsoIGlzQWN0aXZlID0+IHtcclxuICAgICAgaWYgKCAhaXNBY3RpdmUgKSB7XHJcbiAgICAgICAgdGhpcy5ibGFja0Nvbm5lY3Rpb25Qcm9wZXJ0eS52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yZWRDb25uZWN0aW9uUHJvcGVydHkudmFsdWUgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGUgdm9sdG1ldGVyLCBjYWxsZWQgd2hlbiByZXNldCBhbGwgaXMgcHJlc3NlZC5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy52b2x0YWdlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMucmVkUHJvYmVQb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmJsYWNrUHJvYmVQb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLnJlZ2lzdGVyKCAnVm9sdG1ldGVyJywgVm9sdG1ldGVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLGVBQWUsTUFBTSxvQ0FBb0M7QUFFaEUsT0FBT0MsVUFBVSxNQUFNLHdDQUF3QztBQUMvRCxPQUFPQyxRQUFRLE1BQU0sc0NBQXNDO0FBQzNELE9BQU9DLDRCQUE0QixNQUFNLG9DQUFvQztBQUM3RSxPQUFPQyxLQUFLLE1BQU0sWUFBWTtBQUM5QixPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFFdEQsZUFBZSxNQUFNQyxTQUFTLFNBQVNGLEtBQUssQ0FBQztFQUUzQzs7RUFHQTs7RUFHQTs7RUFNT0csV0FBV0EsQ0FBRUMsTUFBYyxFQUFFQyxXQUFtQixFQUFHO0lBQ3hELEtBQUssQ0FBRUQsTUFBTSxFQUFFQyxXQUFZLENBQUM7SUFFNUIsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSVosUUFBUSxDQUFpQixJQUFJLEVBQUU7TUFDeERVLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsaUJBQWtCLENBQUM7TUFDaERDLEtBQUssRUFBRSxHQUFHO01BQ1ZDLGVBQWUsRUFBRVosVUFBVSxDQUFFQyxRQUFTLENBQUM7TUFDdkNZLGNBQWMsRUFBRSxJQUFJO01BQ3BCQyxjQUFjLEVBQUU7SUFDbEIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyx3QkFBd0IsR0FBRyxJQUFJaEIsZUFBZSxDQUFFRCxPQUFPLENBQUNrQixJQUFJLEVBQUU7TUFDakVULE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsMEJBQTJCLENBQUM7TUFDekRJLGNBQWMsRUFBRTtJQUNsQixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNHLDBCQUEwQixHQUFHLElBQUlsQixlQUFlLENBQUVELE9BQU8sQ0FBQ2tCLElBQUksRUFBRTtNQUNuRVQsTUFBTSxFQUFFQSxNQUFNLENBQUNHLFlBQVksQ0FBRSw0QkFBNkIsQ0FBQztNQUMzREksY0FBYyxFQUFFO0lBQ2xCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0ksdUJBQXVCLEdBQUcsSUFBSXJCLFFBQVEsQ0FBNEIsSUFBSSxFQUFFO01BQzNFVSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLDhCQUErQixDQUFDO01BQzdERSxlQUFlLEVBQUVaLFVBQVUsQ0FBRUksaUJBQWlCLENBQUNlLG1CQUFvQixDQUFDO01BQ3BFTixjQUFjLEVBQUUsSUFBSTtNQUNwQkMsY0FBYyxFQUFFO0lBQ2xCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ00scUJBQXFCLEdBQUcsSUFBSXZCLFFBQVEsQ0FBNEIsSUFBSSxFQUFFO01BQ3pFVSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLDRCQUE2QixDQUFDO01BQzNERSxlQUFlLEVBQUVaLFVBQVUsQ0FBRUksaUJBQWlCLENBQUNlLG1CQUFvQixDQUFDO01BQ3BFTixjQUFjLEVBQUUsSUFBSTtNQUNwQkMsY0FBYyxFQUFFO0lBQ2xCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ08sZ0JBQWdCLENBQUNDLElBQUksQ0FBRUMsUUFBUSxJQUFJO01BQ3RDLElBQUssQ0FBQ0EsUUFBUSxFQUFHO1FBQ2YsSUFBSSxDQUFDTCx1QkFBdUIsQ0FBQ00sS0FBSyxHQUFHLElBQUk7UUFDekMsSUFBSSxDQUFDSixxQkFBcUIsQ0FBQ0ksS0FBSyxHQUFHLElBQUk7TUFDekM7SUFDRixDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JDLEtBQUtBLENBQUEsRUFBUztJQUM1QixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBQ2IsSUFBSSxDQUFDaEIsZUFBZSxDQUFDZ0IsS0FBSyxDQUFDLENBQUM7SUFDNUIsSUFBSSxDQUFDVix3QkFBd0IsQ0FBQ1UsS0FBSyxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDUiwwQkFBMEIsQ0FBQ1EsS0FBSyxDQUFDLENBQUM7RUFDekM7QUFDRjtBQUVBdkIsNEJBQTRCLENBQUN3QixRQUFRLENBQUUsV0FBVyxFQUFFckIsU0FBVSxDQUFDIn0=