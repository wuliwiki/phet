// Copyright 2018-2023, University of Colorado Boulder

/**
 * Uses a cubic easing to interpolate the zoom. Forked and pruned from EaseAnimation.js which was unstable
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Easing from '../../../twixt/js/Easing.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';

// constants
const ZOOM_ANIMATION_TIME = 0.35; // seconds

export default class ZoomAnimation {
  constructor(initialZoom, targetZoom, zoomCallback) {
    this.easing = Easing.CUBIC_IN_OUT;
    this.ratio = 0;
    this.totalDelta = targetZoom - initialZoom;
    this.zoomCallback = zoomCallback;
  }

  /**
   * @param dt - elapsed time in seconds
   * @returns - a boolean for whether the zoom animation is complete
   */
  step(dt) {
    const oldRatio = this.ratio;
    if (oldRatio < 1) {
      let newRatio = oldRatio + dt / ZOOM_ANIMATION_TIME;
      if (newRatio > 1) {
        newRatio = 1;
      }
      this.ratio = newRatio;
      const ratioDelta = Easing.CUBIC_IN_OUT.value(newRatio) - Easing.CUBIC_IN_OUT.value(oldRatio);
      this.zoomCallback(ratioDelta * this.totalDelta);
      return newRatio >= 1;
    } else {
      return oldRatio >= 1;
    }
  }
}
circuitConstructionKitCommon.register('ZoomAnimation', ZoomAnimation);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFYXNpbmciLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiWk9PTV9BTklNQVRJT05fVElNRSIsIlpvb21BbmltYXRpb24iLCJjb25zdHJ1Y3RvciIsImluaXRpYWxab29tIiwidGFyZ2V0Wm9vbSIsInpvb21DYWxsYmFjayIsImVhc2luZyIsIkNVQklDX0lOX09VVCIsInJhdGlvIiwidG90YWxEZWx0YSIsInN0ZXAiLCJkdCIsIm9sZFJhdGlvIiwibmV3UmF0aW8iLCJyYXRpb0RlbHRhIiwidmFsdWUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlpvb21BbmltYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVXNlcyBhIGN1YmljIGVhc2luZyB0byBpbnRlcnBvbGF0ZSB0aGUgem9vbS4gRm9ya2VkIGFuZCBwcnVuZWQgZnJvbSBFYXNlQW5pbWF0aW9uLmpzIHdoaWNoIHdhcyB1bnN0YWJsZVxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEVhc2luZyBmcm9tICcuLi8uLi8uLi90d2l4dC9qcy9FYXNpbmcuanMnO1xyXG5pbXBvcnQgY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbiBmcm9tICcuLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBaT09NX0FOSU1BVElPTl9USU1FID0gMC4zNTsgLy8gc2Vjb25kc1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWm9vbUFuaW1hdGlvbiB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZWFzaW5nOiBFYXNpbmc7XHJcbiAgcHJpdmF0ZSByYXRpbzogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdG90YWxEZWx0YTogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgem9vbUNhbGxiYWNrOiAoIGRlbHRhOiBudW1iZXIgKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGluaXRpYWxab29tOiBudW1iZXIsIHRhcmdldFpvb206IG51bWJlciwgem9vbUNhbGxiYWNrOiAoIGRlbHRhOiBudW1iZXIgKSA9PiB2b2lkICkge1xyXG4gICAgdGhpcy5lYXNpbmcgPSBFYXNpbmcuQ1VCSUNfSU5fT1VUO1xyXG4gICAgdGhpcy5yYXRpbyA9IDA7XHJcbiAgICB0aGlzLnRvdGFsRGVsdGEgPSB0YXJnZXRab29tIC0gaW5pdGlhbFpvb207XHJcbiAgICB0aGlzLnpvb21DYWxsYmFjayA9IHpvb21DYWxsYmFjaztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBkdCAtIGVsYXBzZWQgdGltZSBpbiBzZWNvbmRzXHJcbiAgICogQHJldHVybnMgLSBhIGJvb2xlYW4gZm9yIHdoZXRoZXIgdGhlIHpvb20gYW5pbWF0aW9uIGlzIGNvbXBsZXRlXHJcbiAgICovXHJcbiAgcHVibGljIHN0ZXAoIGR0OiBudW1iZXIgKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBvbGRSYXRpbyA9IHRoaXMucmF0aW87XHJcblxyXG4gICAgaWYgKCBvbGRSYXRpbyA8IDEgKSB7XHJcbiAgICAgIGxldCBuZXdSYXRpbyA9IG9sZFJhdGlvICsgZHQgLyBaT09NX0FOSU1BVElPTl9USU1FO1xyXG4gICAgICBpZiAoIG5ld1JhdGlvID4gMSApIHtcclxuICAgICAgICBuZXdSYXRpbyA9IDE7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yYXRpbyA9IG5ld1JhdGlvO1xyXG4gICAgICBjb25zdCByYXRpb0RlbHRhID0gRWFzaW5nLkNVQklDX0lOX09VVC52YWx1ZSggbmV3UmF0aW8gKSAtIEVhc2luZy5DVUJJQ19JTl9PVVQudmFsdWUoIG9sZFJhdGlvICk7XHJcbiAgICAgIHRoaXMuem9vbUNhbGxiYWNrKCByYXRpb0RlbHRhICogdGhpcy50b3RhbERlbHRhICk7XHJcbiAgICAgIHJldHVybiBuZXdSYXRpbyA+PSAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBvbGRSYXRpbyA+PSAxO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5yZWdpc3RlciggJ1pvb21BbmltYXRpb24nLCBab29tQW5pbWF0aW9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7O0FBRTdFO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLENBQUM7O0FBRWxDLGVBQWUsTUFBTUMsYUFBYSxDQUFDO0VBTzFCQyxXQUFXQSxDQUFFQyxXQUFtQixFQUFFQyxVQUFrQixFQUFFQyxZQUF1QyxFQUFHO0lBQ3JHLElBQUksQ0FBQ0MsTUFBTSxHQUFHUixNQUFNLENBQUNTLFlBQVk7SUFDakMsSUFBSSxDQUFDQyxLQUFLLEdBQUcsQ0FBQztJQUNkLElBQUksQ0FBQ0MsVUFBVSxHQUFHTCxVQUFVLEdBQUdELFdBQVc7SUFDMUMsSUFBSSxDQUFDRSxZQUFZLEdBQUdBLFlBQVk7RUFDbEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDU0ssSUFBSUEsQ0FBRUMsRUFBVSxFQUFZO0lBQ2pDLE1BQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNKLEtBQUs7SUFFM0IsSUFBS0ksUUFBUSxHQUFHLENBQUMsRUFBRztNQUNsQixJQUFJQyxRQUFRLEdBQUdELFFBQVEsR0FBR0QsRUFBRSxHQUFHWCxtQkFBbUI7TUFDbEQsSUFBS2EsUUFBUSxHQUFHLENBQUMsRUFBRztRQUNsQkEsUUFBUSxHQUFHLENBQUM7TUFDZDtNQUNBLElBQUksQ0FBQ0wsS0FBSyxHQUFHSyxRQUFRO01BQ3JCLE1BQU1DLFVBQVUsR0FBR2hCLE1BQU0sQ0FBQ1MsWUFBWSxDQUFDUSxLQUFLLENBQUVGLFFBQVMsQ0FBQyxHQUFHZixNQUFNLENBQUNTLFlBQVksQ0FBQ1EsS0FBSyxDQUFFSCxRQUFTLENBQUM7TUFDaEcsSUFBSSxDQUFDUCxZQUFZLENBQUVTLFVBQVUsR0FBRyxJQUFJLENBQUNMLFVBQVcsQ0FBQztNQUNqRCxPQUFPSSxRQUFRLElBQUksQ0FBQztJQUN0QixDQUFDLE1BQ0k7TUFDSCxPQUFPRCxRQUFRLElBQUksQ0FBQztJQUN0QjtFQUNGO0FBQ0Y7QUFFQWIsNEJBQTRCLENBQUNpQixRQUFRLENBQUUsZUFBZSxFQUFFZixhQUFjLENBQUMifQ==