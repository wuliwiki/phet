// Copyright 2015-2022, University of Colorado Boulder

/**
 * A wire whose length can change.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
import CCKCConstants from '../CCKCConstants.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import CircuitElement from './CircuitElement.js';
// constants
// Conversion factor between model=view coordinates and meters, in order to use resistivity to compute resistance.
// Chosen so that a battery is around 5cm long.  See CCKCConstants for the default lengths of the elements in view
// coordinates.
const METERS_PER_VIEW_COORDINATE = 0.0005;
export default class Wire extends CircuitElement {
  // if the wire is a small stub attached to the black box

  // the resistance of the Wire in ohms

  // the resistivity of the Wire in ohm-meters

  // when the length changes layoutCharges must be called

  constructor(startVertex, endVertex, resistivityProperty, tandem, providedOptions) {
    assert && assert(typeof resistivityProperty !== 'number', 'property should not be a number');
    assert && assert(!startVertex.isDisposed, 'vertex should not be disposed');
    assert && assert(!endVertex.isDisposed, 'vertex should not be disposed');
    const options = optionize()({
      wireStub: false,
      isMetallic: true,
      // Wires do not have these features, so opt out of PhET-iO instrumentation here
      isEditablePropertyOptions: {
        tandem: Tandem.OPT_OUT
      },
      isValueDisplayablePropertyOptions: {
        tandem: Tandem.OPT_OUT
      },
      labelStringPropertyOptions: {
        tandem: Tandem.OPT_OUT
      }
    }, providedOptions);
    const chargePathLength = startVertex.positionProperty.get().distance(endVertex.positionProperty.get());
    super(startVertex, endVertex, chargePathLength, tandem, options);
    this.wireStub = options.wireStub;
    this.resistanceProperty = new NumberProperty(CCKCConstants.MINIMUM_WIRE_RESISTANCE);
    if (phet.chipper.queryParameters.dev) {
      this.resistanceProperty.link(console.log);
    }
    this.resistivityProperty = resistivityProperty;
    this.lengthProperty = new NumberProperty(0);
    this.updateListener = () => this.update();
    this.vertexMovedEmitter.addListener(this.updateListener);

    // When resistivity changes, update the resistance
    this.resistivityProperty.link(this.updateListener);
    this.update(); // initialize state
  }

  /**
   * Move forward in time
   * @param time - total elapsed time in seconds
   * @param dt - seconds since last step
   * @param circuit
   */
  step(time, dt, circuit) {
    super.step(time, dt, circuit);
    this.update();
  }

  /**
   * Batch changes so that the length doesn't change incrementally when both vertices move one at a time.
   */
  update() {
    const startPosition = this.startPositionProperty.get();
    const endPosition = this.endPositionProperty.get();
    const distanceBetweenVertices = startPosition.distance(endPosition); // same as view coordinates
    const modelLength = distanceBetweenVertices * METERS_PER_VIEW_COORDINATE;
    this.lengthProperty.set(modelLength);

    // R = rho * L / A.  Resistance = resistivity * Length / cross sectional area.
    const resistance = this.resistivityProperty.get() * modelLength / CCKCConstants.WIRE_CROSS_SECTIONAL_AREA;
    const clampedResistance = Math.max(CCKCConstants.MINIMUM_WIRE_RESISTANCE, resistance);
    assert && assert(!isNaN(clampedResistance), 'wire resistance should not be NaN');
    this.resistanceProperty.set(clampedResistance);

    // Update the charge path length, but don't let it go less than a threshold, see https://github.com/phetsims/circuit-construction-kit-common/issues/405
    this.chargePathLength = Math.max(distanceBetweenVertices, 1E-6);
  }

  /**
   * Get the properties so that the circuit can be solved when changed.
   */
  getCircuitProperties() {
    return [this.resistanceProperty];
  }

  /**
   * Releases all resources related to the Wire, called when it will no longer be used.
   */
  dispose() {
    this.vertexMovedEmitter.removeListener(this.updateListener);
    this.resistivityProperty.unlink(this.updateListener);
    super.dispose();
  }
}
circuitConstructionKitCommon.register('Wire', Wire);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,