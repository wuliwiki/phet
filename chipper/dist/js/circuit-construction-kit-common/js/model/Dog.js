// Copyright 2020-2022, University of Colorado Boulder

/**
 * The Dog is a Resistor that barks and cuts Vertex instances when the current threshold is exceeded.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import Resistor from './Resistor.js';
import ResistorType from './ResistorType.js';
export default class Dog extends Resistor {
  constructor(startVertex, endVertex, tandem, providedOptions) {
    super(startVertex, endVertex, ResistorType.DOG, tandem, providedOptions);

    // keep track of whether the dog is barking, so we can update the view accordingly
    this.isBarkingProperty = new BooleanProperty(false);

    // time since last bark, to determine whether the bark has ended
    this.lastBarkTime = 0;

    // When connecting a voltage source (without completing the circuit), there is one frame where there is an unbalanced
    // voltage.  We need to wait until the next frame to see if the voltage difference is sustained.
    this.triggerCount = 0;
  }

  /**
   * @param time in seconds
   * @param dt in seconds
   * @param circuit
   */
  step(time, dt, circuit) {
    super.step(time, dt, circuit);
    const voltage = this.voltageDifferenceProperty.value;

    // When connecting a voltage source (without completing the circuit), there is one frame where there is an unbalanced
    // voltage.  We need to wait until the next frame to see if the voltage difference is sustained.
    // See https://github.com/phetsims/circuit-construction-kit-common/issues/649#issuecomment-758671266
    if (Math.abs(voltage) > 100) {
      this.triggerCount++;
    } else {
      this.triggerCount = 0;
    }
    if (this.triggerCount >= 2) {
      circuit.cutVertex(this.startVertexProperty.value);
      this.isBarkingProperty.value = true;
      this.lastBarkTime = time;
      this.triggerCount = 0;
    }
    const BARK_TIME = 0.5;
    if (this.isBarkingProperty.value && time - this.lastBarkTime > BARK_TIME) {
      this.isBarkingProperty.value = false;
      this.lastBarkTime = 0;
    }
  }
}
circuitConstructionKitCommon.register('Dog', Dog);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiUmVzaXN0b3IiLCJSZXNpc3RvclR5cGUiLCJEb2ciLCJjb25zdHJ1Y3RvciIsInN0YXJ0VmVydGV4IiwiZW5kVmVydGV4IiwidGFuZGVtIiwicHJvdmlkZWRPcHRpb25zIiwiRE9HIiwiaXNCYXJraW5nUHJvcGVydHkiLCJsYXN0QmFya1RpbWUiLCJ0cmlnZ2VyQ291bnQiLCJzdGVwIiwidGltZSIsImR0IiwiY2lyY3VpdCIsInZvbHRhZ2UiLCJ2b2x0YWdlRGlmZmVyZW5jZVByb3BlcnR5IiwidmFsdWUiLCJNYXRoIiwiYWJzIiwiY3V0VmVydGV4Iiwic3RhcnRWZXJ0ZXhQcm9wZXJ0eSIsIkJBUktfVElNRSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRG9nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBEb2cgaXMgYSBSZXNpc3RvciB0aGF0IGJhcmtzIGFuZCBjdXRzIFZlcnRleCBpbnN0YW5jZXMgd2hlbiB0aGUgY3VycmVudCB0aHJlc2hvbGQgaXMgZXhjZWVkZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24gZnJvbSAnLi4vY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5qcyc7XHJcbmltcG9ydCBDaXJjdWl0IGZyb20gJy4vQ2lyY3VpdC5qcyc7XHJcbmltcG9ydCBSZXNpc3RvciwgeyBSZXNpc3Rvck9wdGlvbnMgfSBmcm9tICcuL1Jlc2lzdG9yLmpzJztcclxuaW1wb3J0IFJlc2lzdG9yVHlwZSBmcm9tICcuL1Jlc2lzdG9yVHlwZS5qcyc7XHJcbmltcG9ydCBWZXJ0ZXggZnJvbSAnLi9WZXJ0ZXguanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9nIGV4dGVuZHMgUmVzaXN0b3Ige1xyXG4gIHB1YmxpYyByZWFkb25seSBpc0JhcmtpbmdQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHJpdmF0ZSBsYXN0QmFya1RpbWU6IG51bWJlcjtcclxuICBwcml2YXRlIHRyaWdnZXJDb3VudDogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN0YXJ0VmVydGV4OiBWZXJ0ZXgsIGVuZFZlcnRleDogVmVydGV4LCB0YW5kZW06IFRhbmRlbSwgcHJvdmlkZWRPcHRpb25zPzogUmVzaXN0b3JPcHRpb25zICkge1xyXG4gICAgc3VwZXIoIHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgsIFJlc2lzdG9yVHlwZS5ET0csIHRhbmRlbSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIHRoZSBkb2cgaXMgYmFya2luZywgc28gd2UgY2FuIHVwZGF0ZSB0aGUgdmlldyBhY2NvcmRpbmdseVxyXG4gICAgdGhpcy5pc0JhcmtpbmdQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgLy8gdGltZSBzaW5jZSBsYXN0IGJhcmssIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBiYXJrIGhhcyBlbmRlZFxyXG4gICAgdGhpcy5sYXN0QmFya1RpbWUgPSAwO1xyXG5cclxuICAgIC8vIFdoZW4gY29ubmVjdGluZyBhIHZvbHRhZ2Ugc291cmNlICh3aXRob3V0IGNvbXBsZXRpbmcgdGhlIGNpcmN1aXQpLCB0aGVyZSBpcyBvbmUgZnJhbWUgd2hlcmUgdGhlcmUgaXMgYW4gdW5iYWxhbmNlZFxyXG4gICAgLy8gdm9sdGFnZS4gIFdlIG5lZWQgdG8gd2FpdCB1bnRpbCB0aGUgbmV4dCBmcmFtZSB0byBzZWUgaWYgdGhlIHZvbHRhZ2UgZGlmZmVyZW5jZSBpcyBzdXN0YWluZWQuXHJcbiAgICB0aGlzLnRyaWdnZXJDb3VudCA9IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gdGltZSBpbiBzZWNvbmRzXHJcbiAgICogQHBhcmFtIGR0IGluIHNlY29uZHNcclxuICAgKiBAcGFyYW0gY2lyY3VpdFxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBzdGVwKCB0aW1lOiBudW1iZXIsIGR0OiBudW1iZXIsIGNpcmN1aXQ6IENpcmN1aXQgKTp2b2lkIHtcclxuICAgIHN1cGVyLnN0ZXAoIHRpbWUsIGR0LCBjaXJjdWl0ICk7XHJcbiAgICBjb25zdCB2b2x0YWdlID0gdGhpcy52b2x0YWdlRGlmZmVyZW5jZVByb3BlcnR5LnZhbHVlO1xyXG5cclxuICAgIC8vIFdoZW4gY29ubmVjdGluZyBhIHZvbHRhZ2Ugc291cmNlICh3aXRob3V0IGNvbXBsZXRpbmcgdGhlIGNpcmN1aXQpLCB0aGVyZSBpcyBvbmUgZnJhbWUgd2hlcmUgdGhlcmUgaXMgYW4gdW5iYWxhbmNlZFxyXG4gICAgLy8gdm9sdGFnZS4gIFdlIG5lZWQgdG8gd2FpdCB1bnRpbCB0aGUgbmV4dCBmcmFtZSB0byBzZWUgaWYgdGhlIHZvbHRhZ2UgZGlmZmVyZW5jZSBpcyBzdXN0YWluZWQuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NpcmN1aXQtY29uc3RydWN0aW9uLWtpdC1jb21tb24vaXNzdWVzLzY0OSNpc3N1ZWNvbW1lbnQtNzU4NjcxMjY2XHJcbiAgICBpZiAoIE1hdGguYWJzKCB2b2x0YWdlICkgPiAxMDAgKSB7XHJcbiAgICAgIHRoaXMudHJpZ2dlckNvdW50Kys7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy50cmlnZ2VyQ291bnQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggdGhpcy50cmlnZ2VyQ291bnQgPj0gMiApIHtcclxuICAgICAgY2lyY3VpdC5jdXRWZXJ0ZXgoIHRoaXMuc3RhcnRWZXJ0ZXhQcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgICB0aGlzLmlzQmFya2luZ1Byb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuICAgICAgdGhpcy5sYXN0QmFya1RpbWUgPSB0aW1lO1xyXG4gICAgICB0aGlzLnRyaWdnZXJDb3VudCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgQkFSS19USU1FID0gMC41O1xyXG4gICAgaWYgKCB0aGlzLmlzQmFya2luZ1Byb3BlcnR5LnZhbHVlICYmIHRpbWUgLSB0aGlzLmxhc3RCYXJrVGltZSA+IEJBUktfVElNRSApIHtcclxuICAgICAgdGhpcy5pc0JhcmtpbmdQcm9wZXJ0eS52YWx1ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmxhc3RCYXJrVGltZSA9IDA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLnJlZ2lzdGVyKCAnRG9nJywgRG9nICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSxxQ0FBcUM7QUFHakUsT0FBT0MsNEJBQTRCLE1BQU0sb0NBQW9DO0FBRTdFLE9BQU9DLFFBQVEsTUFBMkIsZUFBZTtBQUN6RCxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBRzVDLGVBQWUsTUFBTUMsR0FBRyxTQUFTRixRQUFRLENBQUM7RUFLakNHLFdBQVdBLENBQUVDLFdBQW1CLEVBQUVDLFNBQWlCLEVBQUVDLE1BQWMsRUFBRUMsZUFBaUMsRUFBRztJQUM5RyxLQUFLLENBQUVILFdBQVcsRUFBRUMsU0FBUyxFQUFFSixZQUFZLENBQUNPLEdBQUcsRUFBRUYsTUFBTSxFQUFFQyxlQUFnQixDQUFDOztJQUUxRTtJQUNBLElBQUksQ0FBQ0UsaUJBQWlCLEdBQUcsSUFBSVgsZUFBZSxDQUFFLEtBQU0sQ0FBQzs7SUFFckQ7SUFDQSxJQUFJLENBQUNZLFlBQVksR0FBRyxDQUFDOztJQUVyQjtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxZQUFZLEdBQUcsQ0FBQztFQUN2Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ2tCQyxJQUFJQSxDQUFFQyxJQUFZLEVBQUVDLEVBQVUsRUFBRUMsT0FBZ0IsRUFBUTtJQUN0RSxLQUFLLENBQUNILElBQUksQ0FBRUMsSUFBSSxFQUFFQyxFQUFFLEVBQUVDLE9BQVEsQ0FBQztJQUMvQixNQUFNQyxPQUFPLEdBQUcsSUFBSSxDQUFDQyx5QkFBeUIsQ0FBQ0MsS0FBSzs7SUFFcEQ7SUFDQTtJQUNBO0lBQ0EsSUFBS0MsSUFBSSxDQUFDQyxHQUFHLENBQUVKLE9BQVEsQ0FBQyxHQUFHLEdBQUcsRUFBRztNQUMvQixJQUFJLENBQUNMLFlBQVksRUFBRTtJQUNyQixDQUFDLE1BQ0k7TUFDSCxJQUFJLENBQUNBLFlBQVksR0FBRyxDQUFDO0lBQ3ZCO0lBRUEsSUFBSyxJQUFJLENBQUNBLFlBQVksSUFBSSxDQUFDLEVBQUc7TUFDNUJJLE9BQU8sQ0FBQ00sU0FBUyxDQUFFLElBQUksQ0FBQ0MsbUJBQW1CLENBQUNKLEtBQU0sQ0FBQztNQUNuRCxJQUFJLENBQUNULGlCQUFpQixDQUFDUyxLQUFLLEdBQUcsSUFBSTtNQUNuQyxJQUFJLENBQUNSLFlBQVksR0FBR0csSUFBSTtNQUN4QixJQUFJLENBQUNGLFlBQVksR0FBRyxDQUFDO0lBQ3ZCO0lBRUEsTUFBTVksU0FBUyxHQUFHLEdBQUc7SUFDckIsSUFBSyxJQUFJLENBQUNkLGlCQUFpQixDQUFDUyxLQUFLLElBQUlMLElBQUksR0FBRyxJQUFJLENBQUNILFlBQVksR0FBR2EsU0FBUyxFQUFHO01BQzFFLElBQUksQ0FBQ2QsaUJBQWlCLENBQUNTLEtBQUssR0FBRyxLQUFLO01BQ3BDLElBQUksQ0FBQ1IsWUFBWSxHQUFHLENBQUM7SUFDdkI7RUFDRjtBQUNGO0FBRUFYLDRCQUE0QixDQUFDeUIsUUFBUSxDQUFFLEtBQUssRUFBRXRCLEdBQUksQ0FBQyJ9