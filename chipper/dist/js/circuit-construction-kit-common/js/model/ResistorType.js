// Copyright 2021-2023, University of Colorado Boulder

import CCKCConstants from '../CCKCConstants.js';
import Range from '../../../dot/js/Range.js';
import Enumeration from '../../../phet-core/js/Enumeration.js';
import EnumerationValue from '../../../phet-core/js/EnumerationValue.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
export default class ResistorType extends EnumerationValue {
  static RESISTOR = new ResistorType(10, new Range(0, 120), false, CCKCConstants.RESISTOR_LENGTH);
  static EXTREME_RESISTOR = new ResistorType(1000, new Range(100, 10000), false, CCKCConstants.RESISTOR_LENGTH);
  static COIN = ResistorType.fixed(0, true, CCKCConstants.COIN_LENGTH);
  static PAPER_CLIP = ResistorType.fixed(0, true, CCKCConstants.PAPER_CLIP_LENGTH);
  static PENCIL = ResistorType.fixed(25, false, CCKCConstants.PENCIL_LENGTH);
  static ERASER = ResistorType.fixed(1000000000, false, CCKCConstants.ERASER_LENGTH);
  static HAND = ResistorType.fixed(100000, false, CCKCConstants.HAND_LENGTH, 15);

  // Adjust the dog so the charges travel along the tail/legs, see https://github.com/phetsims/circuit-construction-kit-common/issues/364
  static DOG = ResistorType.fixed(100000, false, CCKCConstants.DOG_LENGTH, -40);
  static DOLLAR_BILL = ResistorType.fixed(1000000000, false, CCKCConstants.DOLLAR_BILL_LENGTH);
  static enumeration = new Enumeration(ResistorType);

  // In ohms

  // In ohms

  // in view coordinates

  // amount the view is shifted down in view coordinates

  /**
   * @param defaultResistance - default value for resistance, in Ohms
   * @param resistanceRange - possible values for the resistance, in Ohms
   * @param isMetallic - whether the item is metallic (non-insulated) and hence can have its value read at any point
   * @param length
   * @param [verticalOffset]
   */
  constructor(defaultResistance, resistanceRange, isMetallic, length, verticalOffset = 0) {
    super();
    this.defaultResistance = defaultResistance;
    this.range = resistanceRange;
    this.isMetallic = isMetallic;
    this.length = length;
    this.verticalOffset = verticalOffset;
  }

  /**
   * Convenience function for creating a fixed-resistance resistor, like a household item.
   */
  static fixed(resistance, isMetallic, length, verticalOffset = 0) {
    return new ResistorType(resistance, new Range(resistance, resistance), isMetallic, length, verticalOffset);
  }
}
circuitConstructionKitCommon.register('ResistorType', ResistorType);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDQ0tDQ29uc3RhbnRzIiwiUmFuZ2UiLCJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiUmVzaXN0b3JUeXBlIiwiUkVTSVNUT1IiLCJSRVNJU1RPUl9MRU5HVEgiLCJFWFRSRU1FX1JFU0lTVE9SIiwiQ09JTiIsImZpeGVkIiwiQ09JTl9MRU5HVEgiLCJQQVBFUl9DTElQIiwiUEFQRVJfQ0xJUF9MRU5HVEgiLCJQRU5DSUwiLCJQRU5DSUxfTEVOR1RIIiwiRVJBU0VSIiwiRVJBU0VSX0xFTkdUSCIsIkhBTkQiLCJIQU5EX0xFTkdUSCIsIkRPRyIsIkRPR19MRU5HVEgiLCJET0xMQVJfQklMTCIsIkRPTExBUl9CSUxMX0xFTkdUSCIsImVudW1lcmF0aW9uIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0UmVzaXN0YW5jZSIsInJlc2lzdGFuY2VSYW5nZSIsImlzTWV0YWxsaWMiLCJsZW5ndGgiLCJ2ZXJ0aWNhbE9mZnNldCIsInJhbmdlIiwicmVzaXN0YW5jZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVzaXN0b3JUeXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuaW1wb3J0IENDS0NDb25zdGFudHMgZnJvbSAnLi4vQ0NLQ0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb24gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uVmFsdWUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uVmFsdWUuanMnO1xyXG5pbXBvcnQgY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbiBmcm9tICcuLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc2lzdG9yVHlwZSBleHRlbmRzIEVudW1lcmF0aW9uVmFsdWUge1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJFU0lTVE9SID0gbmV3IFJlc2lzdG9yVHlwZSggMTAsIG5ldyBSYW5nZSggMCwgMTIwICksIGZhbHNlLCBDQ0tDQ29uc3RhbnRzLlJFU0lTVE9SX0xFTkdUSCApO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRVhUUkVNRV9SRVNJU1RPUiA9IG5ldyBSZXNpc3RvclR5cGUoIDEwMDAsIG5ldyBSYW5nZSggMTAwLCAxMDAwMCApLCBmYWxzZSwgQ0NLQ0NvbnN0YW50cy5SRVNJU1RPUl9MRU5HVEggKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENPSU4gPSBSZXNpc3RvclR5cGUuZml4ZWQoIDAsIHRydWUsIENDS0NDb25zdGFudHMuQ09JTl9MRU5HVEggKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBBUEVSX0NMSVAgPSBSZXNpc3RvclR5cGUuZml4ZWQoIDAsIHRydWUsIENDS0NDb25zdGFudHMuUEFQRVJfQ0xJUF9MRU5HVEggKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBFTkNJTCA9IFJlc2lzdG9yVHlwZS5maXhlZCggMjUsIGZhbHNlLCBDQ0tDQ29uc3RhbnRzLlBFTkNJTF9MRU5HVEggKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEVSQVNFUiA9IFJlc2lzdG9yVHlwZS5maXhlZCggMTAwMDAwMDAwMCwgZmFsc2UsIENDS0NDb25zdGFudHMuRVJBU0VSX0xFTkdUSCApO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSEFORCA9IFJlc2lzdG9yVHlwZS5maXhlZCggMTAwMDAwLCBmYWxzZSwgQ0NLQ0NvbnN0YW50cy5IQU5EX0xFTkdUSCwgMTUgKTtcclxuXHJcbiAgLy8gQWRqdXN0IHRoZSBkb2cgc28gdGhlIGNoYXJnZXMgdHJhdmVsIGFsb25nIHRoZSB0YWlsL2xlZ3MsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2lyY3VpdC1jb25zdHJ1Y3Rpb24ta2l0LWNvbW1vbi9pc3N1ZXMvMzY0XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBET0cgPSBSZXNpc3RvclR5cGUuZml4ZWQoIDEwMDAwMCwgZmFsc2UsIENDS0NDb25zdGFudHMuRE9HX0xFTkdUSCwgLTQwICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBET0xMQVJfQklMTCA9IFJlc2lzdG9yVHlwZS5maXhlZCggMTAwMDAwMDAwMCwgZmFsc2UsIENDS0NDb25zdGFudHMuRE9MTEFSX0JJTExfTEVOR1RIICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIFJlc2lzdG9yVHlwZSApO1xyXG5cclxuICAvLyBJbiBvaG1zXHJcbiAgcHVibGljIHJlYWRvbmx5IGRlZmF1bHRSZXNpc3RhbmNlOiBudW1iZXI7XHJcblxyXG4gIC8vIEluIG9obXNcclxuICBwdWJsaWMgcmVhZG9ubHkgcmFuZ2U6IFJhbmdlO1xyXG4gIHB1YmxpYyByZWFkb25seSBpc01ldGFsbGljOiBib29sZWFuO1xyXG5cclxuICAvLyBpbiB2aWV3IGNvb3JkaW5hdGVzXHJcbiAgcHVibGljIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xyXG5cclxuICAvLyBhbW91bnQgdGhlIHZpZXcgaXMgc2hpZnRlZCBkb3duIGluIHZpZXcgY29vcmRpbmF0ZXNcclxuICBwdWJsaWMgcmVhZG9ubHkgdmVydGljYWxPZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGRlZmF1bHRSZXNpc3RhbmNlIC0gZGVmYXVsdCB2YWx1ZSBmb3IgcmVzaXN0YW5jZSwgaW4gT2htc1xyXG4gICAqIEBwYXJhbSByZXNpc3RhbmNlUmFuZ2UgLSBwb3NzaWJsZSB2YWx1ZXMgZm9yIHRoZSByZXNpc3RhbmNlLCBpbiBPaG1zXHJcbiAgICogQHBhcmFtIGlzTWV0YWxsaWMgLSB3aGV0aGVyIHRoZSBpdGVtIGlzIG1ldGFsbGljIChub24taW5zdWxhdGVkKSBhbmQgaGVuY2UgY2FuIGhhdmUgaXRzIHZhbHVlIHJlYWQgYXQgYW55IHBvaW50XHJcbiAgICogQHBhcmFtIGxlbmd0aFxyXG4gICAqIEBwYXJhbSBbdmVydGljYWxPZmZzZXRdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBkZWZhdWx0UmVzaXN0YW5jZTogbnVtYmVyLCByZXNpc3RhbmNlUmFuZ2U6IFJhbmdlLCBpc01ldGFsbGljOiBib29sZWFuLCBsZW5ndGg6IG51bWJlciwgdmVydGljYWxPZmZzZXQgPSAwICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLmRlZmF1bHRSZXNpc3RhbmNlID0gZGVmYXVsdFJlc2lzdGFuY2U7XHJcbiAgICB0aGlzLnJhbmdlID0gcmVzaXN0YW5jZVJhbmdlO1xyXG4gICAgdGhpcy5pc01ldGFsbGljID0gaXNNZXRhbGxpYztcclxuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xyXG4gICAgdGhpcy52ZXJ0aWNhbE9mZnNldCA9IHZlcnRpY2FsT2Zmc2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgZml4ZWQtcmVzaXN0YW5jZSByZXNpc3RvciwgbGlrZSBhIGhvdXNlaG9sZCBpdGVtLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGZpeGVkKCByZXNpc3RhbmNlOiBudW1iZXIsIGlzTWV0YWxsaWM6IGJvb2xlYW4sIGxlbmd0aDogbnVtYmVyLCB2ZXJ0aWNhbE9mZnNldCA9IDAgKTogUmVzaXN0b3JUeXBlIHtcclxuICAgIHJldHVybiBuZXcgUmVzaXN0b3JUeXBlKCByZXNpc3RhbmNlLCBuZXcgUmFuZ2UoIHJlc2lzdGFuY2UsIHJlc2lzdGFuY2UgKSwgaXNNZXRhbGxpYywgbGVuZ3RoLCB2ZXJ0aWNhbE9mZnNldCApO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5yZWdpc3RlciggJ1Jlc2lzdG9yVHlwZScsIFJlc2lzdG9yVHlwZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0EsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxLQUFLLE1BQU0sMEJBQTBCO0FBQzVDLE9BQU9DLFdBQVcsTUFBTSxzQ0FBc0M7QUFDOUQsT0FBT0MsZ0JBQWdCLE1BQU0sMkNBQTJDO0FBQ3hFLE9BQU9DLDRCQUE0QixNQUFNLG9DQUFvQztBQUU3RSxlQUFlLE1BQU1DLFlBQVksU0FBU0YsZ0JBQWdCLENBQUM7RUFFekQsT0FBdUJHLFFBQVEsR0FBRyxJQUFJRCxZQUFZLENBQUUsRUFBRSxFQUFFLElBQUlKLEtBQUssQ0FBRSxDQUFDLEVBQUUsR0FBSSxDQUFDLEVBQUUsS0FBSyxFQUFFRCxhQUFhLENBQUNPLGVBQWdCLENBQUM7RUFDbkgsT0FBdUJDLGdCQUFnQixHQUFHLElBQUlILFlBQVksQ0FBRSxJQUFJLEVBQUUsSUFBSUosS0FBSyxDQUFFLEdBQUcsRUFBRSxLQUFNLENBQUMsRUFBRSxLQUFLLEVBQUVELGFBQWEsQ0FBQ08sZUFBZ0IsQ0FBQztFQUNqSSxPQUF1QkUsSUFBSSxHQUFHSixZQUFZLENBQUNLLEtBQUssQ0FBRSxDQUFDLEVBQUUsSUFBSSxFQUFFVixhQUFhLENBQUNXLFdBQVksQ0FBQztFQUN0RixPQUF1QkMsVUFBVSxHQUFHUCxZQUFZLENBQUNLLEtBQUssQ0FBRSxDQUFDLEVBQUUsSUFBSSxFQUFFVixhQUFhLENBQUNhLGlCQUFrQixDQUFDO0VBQ2xHLE9BQXVCQyxNQUFNLEdBQUdULFlBQVksQ0FBQ0ssS0FBSyxDQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUVWLGFBQWEsQ0FBQ2UsYUFBYyxDQUFDO0VBQzVGLE9BQXVCQyxNQUFNLEdBQUdYLFlBQVksQ0FBQ0ssS0FBSyxDQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUVWLGFBQWEsQ0FBQ2lCLGFBQWMsQ0FBQztFQUNwRyxPQUF1QkMsSUFBSSxHQUFHYixZQUFZLENBQUNLLEtBQUssQ0FBRSxNQUFNLEVBQUUsS0FBSyxFQUFFVixhQUFhLENBQUNtQixXQUFXLEVBQUUsRUFBRyxDQUFDOztFQUVoRztFQUNBLE9BQXVCQyxHQUFHLEdBQUdmLFlBQVksQ0FBQ0ssS0FBSyxDQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUVWLGFBQWEsQ0FBQ3FCLFVBQVUsRUFBRSxDQUFDLEVBQUcsQ0FBQztFQUMvRixPQUF1QkMsV0FBVyxHQUFHakIsWUFBWSxDQUFDSyxLQUFLLENBQUUsVUFBVSxFQUFFLEtBQUssRUFBRVYsYUFBYSxDQUFDdUIsa0JBQW1CLENBQUM7RUFFOUcsT0FBdUJDLFdBQVcsR0FBRyxJQUFJdEIsV0FBVyxDQUFFRyxZQUFhLENBQUM7O0VBRXBFOztFQUdBOztFQUlBOztFQUdBOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NvQixXQUFXQSxDQUFFQyxpQkFBeUIsRUFBRUMsZUFBc0IsRUFBRUMsVUFBbUIsRUFBRUMsTUFBYyxFQUFFQyxjQUFjLEdBQUcsQ0FBQyxFQUFHO0lBQy9ILEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDSixpQkFBaUIsR0FBR0EsaUJBQWlCO0lBQzFDLElBQUksQ0FBQ0ssS0FBSyxHQUFHSixlQUFlO0lBQzVCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0MsY0FBYyxHQUFHQSxjQUFjO0VBQ3RDOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE9BQWVwQixLQUFLQSxDQUFFc0IsVUFBa0IsRUFBRUosVUFBbUIsRUFBRUMsTUFBYyxFQUFFQyxjQUFjLEdBQUcsQ0FBQyxFQUFpQjtJQUNoSCxPQUFPLElBQUl6QixZQUFZLENBQUUyQixVQUFVLEVBQUUsSUFBSS9CLEtBQUssQ0FBRStCLFVBQVUsRUFBRUEsVUFBVyxDQUFDLEVBQUVKLFVBQVUsRUFBRUMsTUFBTSxFQUFFQyxjQUFlLENBQUM7RUFDaEg7QUFDRjtBQUVBMUIsNEJBQTRCLENBQUM2QixRQUFRLENBQUUsY0FBYyxFQUFFNUIsWUFBYSxDQUFDIn0=