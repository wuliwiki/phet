// Copyright 2016-2023, University of Colorado Boulder

/**
 * Model for the Ammeter, which adds the probe position and current readout.  There is only one ammeter per screen and
 * it is shown/hidden.  Hence it does not need a dispose() implementation.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Vector2 from '../../../dot/js/Vector2.js';
import Vector2Property from '../../../dot/js/Vector2Property.js';
import NullableIO from '../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../tandem/js/types/NumberIO.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import Meter from './Meter.js';
import CircuitElement from './CircuitElement.js';
import ReferenceIO from '../../../tandem/js/types/ReferenceIO.js';
export default class Ammeter extends Meter {
  // the full-precision reading on the ammeter. It will be formatted for display in the view.  Null means the ammeter is not on a wire.

  // the position of the tip of the probe

  constructor(tandem, phetioIndex) {
    super(tandem, phetioIndex);
    this.currentProperty = new Property(null, {
      tandem: tandem.createTandem('currentProperty'),
      units: 'A',
      phetioValueType: NullableIO(NumberIO),
      phetioReadOnly: true,
      phetioFeatured: true
    });
    this.probePositionProperty = new Vector2Property(Vector2.ZERO, {
      tandem: tandem.createTandem('probePositionProperty'),
      phetioFeatured: true
    });
    this.probeConnectionProperty = new Property(null, {
      tandem: tandem.createTandem('probeConnectionProperty'),
      phetioFeatured: true,
      phetioValueType: NullableIO(ReferenceIO(CircuitElement.CircuitElementIO)),
      phetioReadOnly: true,
      phetioDocumentation: 'The circuit element that the ammeter is connected to, or null if not connected to a circuit element'
    });
    this.isActiveProperty.link(isActive => {
      if (!isActive) {
        this.probeConnectionProperty.value = null;
      }
    });
  }
  setConnectionAndCurrent(ammeterConnection) {
    this.currentProperty.value = ammeterConnection === null ? null : ammeterConnection.current;
    this.probeConnectionProperty.value = ammeterConnection === null ? null : ammeterConnection.circuitElement;
  }

  // Restore the ammeter to its initial conditions
  reset() {
    super.reset();
    this.currentProperty.reset();
    this.probePositionProperty.reset();
  }
}
circuitConstructionKitCommon.register('Ammeter', Ammeter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJWZWN0b3IyUHJvcGVydHkiLCJOdWxsYWJsZUlPIiwiTnVtYmVySU8iLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiTWV0ZXIiLCJDaXJjdWl0RWxlbWVudCIsIlJlZmVyZW5jZUlPIiwiQW1tZXRlciIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwicGhldGlvSW5kZXgiLCJjdXJyZW50UHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJ1bml0cyIsInBoZXRpb1ZhbHVlVHlwZSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvRmVhdHVyZWQiLCJwcm9iZVBvc2l0aW9uUHJvcGVydHkiLCJaRVJPIiwicHJvYmVDb25uZWN0aW9uUHJvcGVydHkiLCJDaXJjdWl0RWxlbWVudElPIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsImlzQWN0aXZlUHJvcGVydHkiLCJsaW5rIiwiaXNBY3RpdmUiLCJ2YWx1ZSIsInNldENvbm5lY3Rpb25BbmRDdXJyZW50IiwiYW1tZXRlckNvbm5lY3Rpb24iLCJjdXJyZW50IiwiY2lyY3VpdEVsZW1lbnQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQW1tZXRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlIEFtbWV0ZXIsIHdoaWNoIGFkZHMgdGhlIHByb2JlIHBvc2l0aW9uIGFuZCBjdXJyZW50IHJlYWRvdXQuICBUaGVyZSBpcyBvbmx5IG9uZSBhbW1ldGVyIHBlciBzY3JlZW4gYW5kXHJcbiAqIGl0IGlzIHNob3duL2hpZGRlbi4gIEhlbmNlIGl0IGRvZXMgbm90IG5lZWQgYSBkaXNwb3NlKCkgaW1wbGVtZW50YXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBOdWxsYWJsZUlPIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdWxsYWJsZUlPLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIGZyb20gJy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24uanMnO1xyXG5pbXBvcnQgTWV0ZXIgZnJvbSAnLi9NZXRlci5qcyc7XHJcbmltcG9ydCBBbW1ldGVyQ29ubmVjdGlvbiBmcm9tICcuL0FtbWV0ZXJDb25uZWN0aW9uLmpzJztcclxuaW1wb3J0IENpcmN1aXRFbGVtZW50IGZyb20gJy4vQ2lyY3VpdEVsZW1lbnQuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFtbWV0ZXIgZXh0ZW5kcyBNZXRlciB7XHJcblxyXG4gIC8vIHRoZSBmdWxsLXByZWNpc2lvbiByZWFkaW5nIG9uIHRoZSBhbW1ldGVyLiBJdCB3aWxsIGJlIGZvcm1hdHRlZCBmb3IgZGlzcGxheSBpbiB0aGUgdmlldy4gIE51bGwgbWVhbnMgdGhlIGFtbWV0ZXIgaXMgbm90IG9uIGEgd2lyZS5cclxuICBwdWJsaWMgcmVhZG9ubHkgY3VycmVudFByb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXIgfCBudWxsPjtcclxuXHJcbiAgLy8gdGhlIHBvc2l0aW9uIG9mIHRoZSB0aXAgb2YgdGhlIHByb2JlXHJcbiAgcHVibGljIHJlYWRvbmx5IHByb2JlUG9zaXRpb25Qcm9wZXJ0eTogUHJvcGVydHk8VmVjdG9yMj47XHJcbiAgcHJpdmF0ZSByZWFkb25seSBwcm9iZUNvbm5lY3Rpb25Qcm9wZXJ0eTogUHJvcGVydHk8Q2lyY3VpdEVsZW1lbnQgfCBudWxsPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSwgcGhldGlvSW5kZXg6IG51bWJlciApIHtcclxuICAgIHN1cGVyKCB0YW5kZW0sIHBoZXRpb0luZGV4ICk7XHJcblxyXG4gICAgdGhpcy5jdXJyZW50UHJvcGVydHkgPSBuZXcgUHJvcGVydHk8bnVtYmVyIHwgbnVsbD4oIG51bGwsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY3VycmVudFByb3BlcnR5JyApLFxyXG4gICAgICB1bml0czogJ0EnLFxyXG4gICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bGxhYmxlSU8oIE51bWJlcklPICksXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlLFxyXG4gICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMucHJvYmVQb3NpdGlvblByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggVmVjdG9yMi5aRVJPLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Byb2JlUG9zaXRpb25Qcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnByb2JlQ29ubmVjdGlvblByb3BlcnR5ID0gbmV3IFByb3BlcnR5PENpcmN1aXRFbGVtZW50IHwgbnVsbD4oIG51bGwsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncHJvYmVDb25uZWN0aW9uUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlLFxyXG4gICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bGxhYmxlSU8oIFJlZmVyZW5jZUlPKCBDaXJjdWl0RWxlbWVudC5DaXJjdWl0RWxlbWVudElPICkgKSxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWUsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdUaGUgY2lyY3VpdCBlbGVtZW50IHRoYXQgdGhlIGFtbWV0ZXIgaXMgY29ubmVjdGVkIHRvLCBvciBudWxsIGlmIG5vdCBjb25uZWN0ZWQgdG8gYSBjaXJjdWl0IGVsZW1lbnQnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5pc0FjdGl2ZVByb3BlcnR5LmxpbmsoIGlzQWN0aXZlID0+IHtcclxuICAgICAgaWYgKCAhaXNBY3RpdmUgKSB7XHJcbiAgICAgICAgdGhpcy5wcm9iZUNvbm5lY3Rpb25Qcm9wZXJ0eS52YWx1ZSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRDb25uZWN0aW9uQW5kQ3VycmVudCggYW1tZXRlckNvbm5lY3Rpb246IEFtbWV0ZXJDb25uZWN0aW9uIHwgbnVsbCApOiB2b2lkIHtcclxuICAgIHRoaXMuY3VycmVudFByb3BlcnR5LnZhbHVlID0gYW1tZXRlckNvbm5lY3Rpb24gPT09IG51bGwgPyBudWxsIDogYW1tZXRlckNvbm5lY3Rpb24uY3VycmVudDtcclxuICAgIHRoaXMucHJvYmVDb25uZWN0aW9uUHJvcGVydHkudmFsdWUgPSBhbW1ldGVyQ29ubmVjdGlvbiA9PT0gbnVsbCA/IG51bGwgOiBhbW1ldGVyQ29ubmVjdGlvbi5jaXJjdWl0RWxlbWVudDtcclxuICB9XHJcblxyXG4gIC8vIFJlc3RvcmUgdGhlIGFtbWV0ZXIgdG8gaXRzIGluaXRpYWwgY29uZGl0aW9uc1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNldCgpOiB2b2lkIHtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgICB0aGlzLmN1cnJlbnRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5wcm9iZVBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24ucmVnaXN0ZXIoICdBbW1ldGVyJywgQW1tZXRlciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsT0FBTyxNQUFNLDRCQUE0QjtBQUNoRCxPQUFPQyxlQUFlLE1BQU0sb0NBQW9DO0FBRWhFLE9BQU9DLFVBQVUsTUFBTSx3Q0FBd0M7QUFDL0QsT0FBT0MsUUFBUSxNQUFNLHNDQUFzQztBQUMzRCxPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7QUFDN0UsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFFOUIsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjtBQUNoRCxPQUFPQyxXQUFXLE1BQU0seUNBQXlDO0FBRWpFLGVBQWUsTUFBTUMsT0FBTyxTQUFTSCxLQUFLLENBQUM7RUFFekM7O0VBR0E7O0VBSU9JLFdBQVdBLENBQUVDLE1BQWMsRUFBRUMsV0FBbUIsRUFBRztJQUN4RCxLQUFLLENBQUVELE1BQU0sRUFBRUMsV0FBWSxDQUFDO0lBRTVCLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUliLFFBQVEsQ0FBaUIsSUFBSSxFQUFFO01BQ3hEVyxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLGlCQUFrQixDQUFDO01BQ2hEQyxLQUFLLEVBQUUsR0FBRztNQUNWQyxlQUFlLEVBQUViLFVBQVUsQ0FBRUMsUUFBUyxDQUFDO01BQ3ZDYSxjQUFjLEVBQUUsSUFBSTtNQUNwQkMsY0FBYyxFQUFFO0lBQ2xCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MscUJBQXFCLEdBQUcsSUFBSWpCLGVBQWUsQ0FBRUQsT0FBTyxDQUFDbUIsSUFBSSxFQUFFO01BQzlEVCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLHVCQUF3QixDQUFDO01BQ3RESSxjQUFjLEVBQUU7SUFDbEIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDRyx1QkFBdUIsR0FBRyxJQUFJckIsUUFBUSxDQUF5QixJQUFJLEVBQUU7TUFDeEVXLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUseUJBQTBCLENBQUM7TUFDeERJLGNBQWMsRUFBRSxJQUFJO01BQ3BCRixlQUFlLEVBQUViLFVBQVUsQ0FBRUssV0FBVyxDQUFFRCxjQUFjLENBQUNlLGdCQUFpQixDQUFFLENBQUM7TUFDN0VMLGNBQWMsRUFBRSxJQUFJO01BQ3BCTSxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLGdCQUFnQixDQUFDQyxJQUFJLENBQUVDLFFBQVEsSUFBSTtNQUN0QyxJQUFLLENBQUNBLFFBQVEsRUFBRztRQUNmLElBQUksQ0FBQ0wsdUJBQXVCLENBQUNNLEtBQUssR0FBRyxJQUFJO01BQzNDO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7RUFFT0MsdUJBQXVCQSxDQUFFQyxpQkFBMkMsRUFBUztJQUNsRixJQUFJLENBQUNoQixlQUFlLENBQUNjLEtBQUssR0FBR0UsaUJBQWlCLEtBQUssSUFBSSxHQUFHLElBQUksR0FBR0EsaUJBQWlCLENBQUNDLE9BQU87SUFDMUYsSUFBSSxDQUFDVCx1QkFBdUIsQ0FBQ00sS0FBSyxHQUFHRSxpQkFBaUIsS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHQSxpQkFBaUIsQ0FBQ0UsY0FBYztFQUMzRzs7RUFFQTtFQUNnQkMsS0FBS0EsQ0FBQSxFQUFTO0lBQzVCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7SUFDYixJQUFJLENBQUNuQixlQUFlLENBQUNtQixLQUFLLENBQUMsQ0FBQztJQUM1QixJQUFJLENBQUNiLHFCQUFxQixDQUFDYSxLQUFLLENBQUMsQ0FBQztFQUNwQztBQUNGO0FBRUEzQiw0QkFBNEIsQ0FBQzRCLFFBQVEsQ0FBRSxTQUFTLEVBQUV4QixPQUFRLENBQUMifQ==