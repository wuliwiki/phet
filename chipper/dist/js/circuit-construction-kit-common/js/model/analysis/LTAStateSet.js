// Copyright 2021-2022, University of Colorado Boulder
import circuitConstructionKitCommon from '../../circuitConstructionKitCommon.js';
/**
 * This class represents the solution obtained by a timestep-subdivision-oriented MNA solve with companion models.
 * The distinction between instantaneous and average currents/voltages is made because we need to maintain the correct
 * dynamics (using instantaneous solutions) but also to show intermediate states (using the average results), see #2270.
 */
export default class LTAStateSet {
  constructor(resultSet) {
    this.resultSet = resultSet;
  }

  /**
   * The time averaged current is used to show transient values in current, such as a current spike when a battery+
   * capacitor (no resistance) circuit is wired up, see https://phet.unfuddle.com/a#/projects/9404/tickets/by_number/2270?cycle=true
   */
  getTimeAverageCurrent(element) {
    let weightedSum = 0.0;
    let totalTime = 0.0;
    this.resultSet.forEach(resultElement => {
      weightedSum += resultElement.state.ltaSolution.getCurrent(element) * resultElement.dt;
      totalTime += resultElement.dt;
    });
    const number = weightedSum / totalTime;
    assert && assert(!isNaN(number));
    return number;
  }
  getTimeAverageCurrentForCoreModel(element) {
    let weightedSum = 0.0;
    let totalTime = 0.0;
    this.resultSet.forEach(stateObject => {
      weightedSum += stateObject.state.ltaSolution.getCurrentForCompanion(element) * stateObject.dt;
      totalTime += stateObject.dt;
    });
    const number = weightedSum / totalTime;
    assert && assert(!isNaN(number));
    return number;
  }

  /**
   * The instantaneous current is used for computing the next modified nodal analysis state and integration.
   */
  getInstantaneousCurrent(element) {
    return this.getFinalState().ltaSolution.getCurrent(element);
  }
  getInstantaneousVoltage(element) {
    return this.getFinalState().ltaSolution.getVoltage(element.nodeId0, element.nodeId1);
  }
  getInstantaneousVoltageForCoreModel(coreModel) {
    return this.getFinalState().ltaSolution.getVoltage(coreModel.node0, coreModel.node1);
  }
  getInstantaneousCurrentForCoreModel(coreModel) {
    return this.getFinalState().ltaSolution.getCurrentForCompanion(coreModel);
  }
  getFinalState() {
    return _.last(this.resultSet).state;
  }
}
circuitConstructionKitCommon.register('LTAStateSet', LTAStateSet);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiTFRBU3RhdGVTZXQiLCJjb25zdHJ1Y3RvciIsInJlc3VsdFNldCIsImdldFRpbWVBdmVyYWdlQ3VycmVudCIsImVsZW1lbnQiLCJ3ZWlnaHRlZFN1bSIsInRvdGFsVGltZSIsImZvckVhY2giLCJyZXN1bHRFbGVtZW50Iiwic3RhdGUiLCJsdGFTb2x1dGlvbiIsImdldEN1cnJlbnQiLCJkdCIsIm51bWJlciIsImFzc2VydCIsImlzTmFOIiwiZ2V0VGltZUF2ZXJhZ2VDdXJyZW50Rm9yQ29yZU1vZGVsIiwic3RhdGVPYmplY3QiLCJnZXRDdXJyZW50Rm9yQ29tcGFuaW9uIiwiZ2V0SW5zdGFudGFuZW91c0N1cnJlbnQiLCJnZXRGaW5hbFN0YXRlIiwiZ2V0SW5zdGFudGFuZW91c1ZvbHRhZ2UiLCJnZXRWb2x0YWdlIiwibm9kZUlkMCIsIm5vZGVJZDEiLCJnZXRJbnN0YW50YW5lb3VzVm9sdGFnZUZvckNvcmVNb2RlbCIsImNvcmVNb2RlbCIsIm5vZGUwIiwibm9kZTEiLCJnZXRJbnN0YW50YW5lb3VzQ3VycmVudEZvckNvcmVNb2RlbCIsIl8iLCJsYXN0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMVEFTdGF0ZVNldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24gZnJvbSAnLi4vLi4vY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5qcyc7XHJcbmltcG9ydCBNTkFDaXJjdWl0RWxlbWVudCBmcm9tICcuL21uYS9NTkFDaXJjdWl0RWxlbWVudC5qcyc7XHJcbmltcG9ydCBMVEFTdGF0ZSBmcm9tICcuL0xUQVN0YXRlLmpzJztcclxuaW1wb3J0IENvcmVNb2RlbCBmcm9tICcuL0NvcmVNb2RlbC5qcyc7XHJcbmltcG9ydCBNTkFSZXNpc3RvciBmcm9tICcuL21uYS9NTkFSZXNpc3Rvci5qcyc7XHJcblxyXG50eXBlIEVsZW1lbnQgPSB7XHJcbiAgZHQ6IG51bWJlcjtcclxuICBzdGF0ZTogTFRBU3RhdGU7XHJcbn07XHJcblxyXG4vKipcclxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIHRoZSBzb2x1dGlvbiBvYnRhaW5lZCBieSBhIHRpbWVzdGVwLXN1YmRpdmlzaW9uLW9yaWVudGVkIE1OQSBzb2x2ZSB3aXRoIGNvbXBhbmlvbiBtb2RlbHMuXHJcbiAqIFRoZSBkaXN0aW5jdGlvbiBiZXR3ZWVuIGluc3RhbnRhbmVvdXMgYW5kIGF2ZXJhZ2UgY3VycmVudHMvdm9sdGFnZXMgaXMgbWFkZSBiZWNhdXNlIHdlIG5lZWQgdG8gbWFpbnRhaW4gdGhlIGNvcnJlY3RcclxuICogZHluYW1pY3MgKHVzaW5nIGluc3RhbnRhbmVvdXMgc29sdXRpb25zKSBidXQgYWxzbyB0byBzaG93IGludGVybWVkaWF0ZSBzdGF0ZXMgKHVzaW5nIHRoZSBhdmVyYWdlIHJlc3VsdHMpLCBzZWUgIzIyNzAuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMVEFTdGF0ZVNldCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVzdWx0U2V0OiBFbGVtZW50W107XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcmVzdWx0U2V0OiBFbGVtZW50W10gKSB7XHJcbiAgICB0aGlzLnJlc3VsdFNldCA9IHJlc3VsdFNldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB0aW1lIGF2ZXJhZ2VkIGN1cnJlbnQgaXMgdXNlZCB0byBzaG93IHRyYW5zaWVudCB2YWx1ZXMgaW4gY3VycmVudCwgc3VjaCBhcyBhIGN1cnJlbnQgc3Bpa2Ugd2hlbiBhIGJhdHRlcnkrXHJcbiAgICogY2FwYWNpdG9yIChubyByZXNpc3RhbmNlKSBjaXJjdWl0IGlzIHdpcmVkIHVwLCBzZWUgaHR0cHM6Ly9waGV0LnVuZnVkZGxlLmNvbS9hIy9wcm9qZWN0cy85NDA0L3RpY2tldHMvYnlfbnVtYmVyLzIyNzA/Y3ljbGU9dHJ1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRUaW1lQXZlcmFnZUN1cnJlbnQoIGVsZW1lbnQ6IE1OQVJlc2lzdG9yICk6IG51bWJlciB7XHJcbiAgICBsZXQgd2VpZ2h0ZWRTdW0gPSAwLjA7XHJcbiAgICBsZXQgdG90YWxUaW1lID0gMC4wO1xyXG4gICAgdGhpcy5yZXN1bHRTZXQuZm9yRWFjaCggcmVzdWx0RWxlbWVudCA9PiB7XHJcbiAgICAgIHdlaWdodGVkU3VtICs9IHJlc3VsdEVsZW1lbnQuc3RhdGUubHRhU29sdXRpb24hLmdldEN1cnJlbnQoIGVsZW1lbnQgKSAqIHJlc3VsdEVsZW1lbnQuZHQ7XHJcbiAgICAgIHRvdGFsVGltZSArPSByZXN1bHRFbGVtZW50LmR0O1xyXG4gICAgfSApO1xyXG4gICAgY29uc3QgbnVtYmVyID0gd2VpZ2h0ZWRTdW0gLyB0b3RhbFRpbWU7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhaXNOYU4oIG51bWJlciApICk7XHJcbiAgICByZXR1cm4gbnVtYmVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFRpbWVBdmVyYWdlQ3VycmVudEZvckNvcmVNb2RlbCggZWxlbWVudDogQ29yZU1vZGVsICk6IG51bWJlciB7XHJcbiAgICBsZXQgd2VpZ2h0ZWRTdW0gPSAwLjA7XHJcbiAgICBsZXQgdG90YWxUaW1lID0gMC4wO1xyXG4gICAgdGhpcy5yZXN1bHRTZXQuZm9yRWFjaCggc3RhdGVPYmplY3QgPT4ge1xyXG4gICAgICB3ZWlnaHRlZFN1bSArPSBzdGF0ZU9iamVjdC5zdGF0ZS5sdGFTb2x1dGlvbiEuZ2V0Q3VycmVudEZvckNvbXBhbmlvbiggZWxlbWVudCApICogc3RhdGVPYmplY3QuZHQ7XHJcbiAgICAgIHRvdGFsVGltZSArPSBzdGF0ZU9iamVjdC5kdDtcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IG51bWJlciA9IHdlaWdodGVkU3VtIC8gdG90YWxUaW1lO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIWlzTmFOKCBudW1iZXIgKSApO1xyXG4gICAgcmV0dXJuIG51bWJlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBpbnN0YW50YW5lb3VzIGN1cnJlbnQgaXMgdXNlZCBmb3IgY29tcHV0aW5nIHRoZSBuZXh0IG1vZGlmaWVkIG5vZGFsIGFuYWx5c2lzIHN0YXRlIGFuZCBpbnRlZ3JhdGlvbi5cclxuICAgKi9cclxuICBwcml2YXRlIGdldEluc3RhbnRhbmVvdXNDdXJyZW50KCBlbGVtZW50OiBNTkFSZXNpc3RvciApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RmluYWxTdGF0ZSgpLmx0YVNvbHV0aW9uIS5nZXRDdXJyZW50KCBlbGVtZW50ICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEluc3RhbnRhbmVvdXNWb2x0YWdlKCBlbGVtZW50OiBNTkFDaXJjdWl0RWxlbWVudCApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RmluYWxTdGF0ZSgpLmx0YVNvbHV0aW9uIS5nZXRWb2x0YWdlKCBlbGVtZW50Lm5vZGVJZDAsIGVsZW1lbnQubm9kZUlkMSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEluc3RhbnRhbmVvdXNWb2x0YWdlRm9yQ29yZU1vZGVsKCBjb3JlTW9kZWw6IENvcmVNb2RlbCApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RmluYWxTdGF0ZSgpLmx0YVNvbHV0aW9uIS5nZXRWb2x0YWdlKCBjb3JlTW9kZWwubm9kZTAsIGNvcmVNb2RlbC5ub2RlMSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEluc3RhbnRhbmVvdXNDdXJyZW50Rm9yQ29yZU1vZGVsKCBjb3JlTW9kZWw6IENvcmVNb2RlbCApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RmluYWxTdGF0ZSgpLmx0YVNvbHV0aW9uIS5nZXRDdXJyZW50Rm9yQ29tcGFuaW9uKCBjb3JlTW9kZWwgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRGaW5hbFN0YXRlKCk6IExUQVN0YXRlIHtcclxuICAgIHJldHVybiBfLmxhc3QoIHRoaXMucmVzdWx0U2V0ICkhLnN0YXRlO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5yZWdpc3RlciggJ0xUQVN0YXRlU2V0JywgTFRBU3RhdGVTZXQgKTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsT0FBT0EsNEJBQTRCLE1BQU0sdUNBQXVDO0FBV2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU1DLFdBQVcsQ0FBQztFQUl4QkMsV0FBV0EsQ0FBRUMsU0FBb0IsRUFBRztJQUN6QyxJQUFJLENBQUNBLFNBQVMsR0FBR0EsU0FBUztFQUM1Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTQyxxQkFBcUJBLENBQUVDLE9BQW9CLEVBQVc7SUFDM0QsSUFBSUMsV0FBVyxHQUFHLEdBQUc7SUFDckIsSUFBSUMsU0FBUyxHQUFHLEdBQUc7SUFDbkIsSUFBSSxDQUFDSixTQUFTLENBQUNLLE9BQU8sQ0FBRUMsYUFBYSxJQUFJO01BQ3ZDSCxXQUFXLElBQUlHLGFBQWEsQ0FBQ0MsS0FBSyxDQUFDQyxXQUFXLENBQUVDLFVBQVUsQ0FBRVAsT0FBUSxDQUFDLEdBQUdJLGFBQWEsQ0FBQ0ksRUFBRTtNQUN4Rk4sU0FBUyxJQUFJRSxhQUFhLENBQUNJLEVBQUU7SUFDL0IsQ0FBRSxDQUFDO0lBQ0gsTUFBTUMsTUFBTSxHQUFHUixXQUFXLEdBQUdDLFNBQVM7SUFDdENRLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNDLEtBQUssQ0FBRUYsTUFBTyxDQUFFLENBQUM7SUFDcEMsT0FBT0EsTUFBTTtFQUNmO0VBRU9HLGlDQUFpQ0EsQ0FBRVosT0FBa0IsRUFBVztJQUNyRSxJQUFJQyxXQUFXLEdBQUcsR0FBRztJQUNyQixJQUFJQyxTQUFTLEdBQUcsR0FBRztJQUNuQixJQUFJLENBQUNKLFNBQVMsQ0FBQ0ssT0FBTyxDQUFFVSxXQUFXLElBQUk7TUFDckNaLFdBQVcsSUFBSVksV0FBVyxDQUFDUixLQUFLLENBQUNDLFdBQVcsQ0FBRVEsc0JBQXNCLENBQUVkLE9BQVEsQ0FBQyxHQUFHYSxXQUFXLENBQUNMLEVBQUU7TUFDaEdOLFNBQVMsSUFBSVcsV0FBVyxDQUFDTCxFQUFFO0lBQzdCLENBQUUsQ0FBQztJQUNILE1BQU1DLE1BQU0sR0FBR1IsV0FBVyxHQUFHQyxTQUFTO0lBQ3RDUSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDQyxLQUFLLENBQUVGLE1BQU8sQ0FBRSxDQUFDO0lBQ3BDLE9BQU9BLE1BQU07RUFDZjs7RUFFQTtBQUNGO0FBQ0E7RUFDVU0sdUJBQXVCQSxDQUFFZixPQUFvQixFQUFXO0lBQzlELE9BQU8sSUFBSSxDQUFDZ0IsYUFBYSxDQUFDLENBQUMsQ0FBQ1YsV0FBVyxDQUFFQyxVQUFVLENBQUVQLE9BQVEsQ0FBQztFQUNoRTtFQUVRaUIsdUJBQXVCQSxDQUFFakIsT0FBMEIsRUFBVztJQUNwRSxPQUFPLElBQUksQ0FBQ2dCLGFBQWEsQ0FBQyxDQUFDLENBQUNWLFdBQVcsQ0FBRVksVUFBVSxDQUFFbEIsT0FBTyxDQUFDbUIsT0FBTyxFQUFFbkIsT0FBTyxDQUFDb0IsT0FBUSxDQUFDO0VBQ3pGO0VBRU9DLG1DQUFtQ0EsQ0FBRUMsU0FBb0IsRUFBVztJQUN6RSxPQUFPLElBQUksQ0FBQ04sYUFBYSxDQUFDLENBQUMsQ0FBQ1YsV0FBVyxDQUFFWSxVQUFVLENBQUVJLFNBQVMsQ0FBQ0MsS0FBSyxFQUFFRCxTQUFTLENBQUNFLEtBQU0sQ0FBQztFQUN6RjtFQUVPQyxtQ0FBbUNBLENBQUVILFNBQW9CLEVBQVc7SUFDekUsT0FBTyxJQUFJLENBQUNOLGFBQWEsQ0FBQyxDQUFDLENBQUNWLFdBQVcsQ0FBRVEsc0JBQXNCLENBQUVRLFNBQVUsQ0FBQztFQUM5RTtFQUVPTixhQUFhQSxDQUFBLEVBQWE7SUFDL0IsT0FBT1UsQ0FBQyxDQUFDQyxJQUFJLENBQUUsSUFBSSxDQUFDN0IsU0FBVSxDQUFDLENBQUVPLEtBQUs7RUFDeEM7QUFDRjtBQUVBViw0QkFBNEIsQ0FBQ2lDLFFBQVEsQ0FBRSxhQUFhLEVBQUVoQyxXQUFZLENBQUMifQ==