// Copyright 2021-2023, University of Colorado Boulder

import circuitConstructionKitCommon from '../../circuitConstructionKitCommon.js';

/**
 * LTASolution is a class that represents the solution of a linear time-invariant (LTI) circuit. It provides methods for
 * getting node voltages, component currents, and voltages between nodes, as well as looking up companion model values.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
export default class LTASolution {
  constructor(circuit, mnaSolution, currentCompanions) {
    this.circuit = circuit;
    this.mnaSolution = mnaSolution;
    this.currentCompanions = currentCompanions;
  }
  getNodeVoltage(nodeIndex) {
    return this.mnaSolution.getNodeVoltage(nodeIndex);
  }
  getCurrent(element) {
    // For resistors with r>0, Ohm's Law gives the current.  For components with no resistance (like closed switch or
    // 0-resistance battery), the current is given by the matrix solution.
    if (element.resistance > 0) {
      return this.mnaSolution.getCurrentForResistor(element);
    } else {
      return this.mnaSolution.getSolvedCurrent(element);
    }
  }
  getCurrentForCompanion(coreModel) {
    const companion = _.find(this.currentCompanions, c => c.element.id === coreModel.id);
    return companion.getValueForSolution(this.mnaSolution);
  }
  getVoltage(node0, node1) {
    return this.getNodeVoltage(node1) - this.getNodeVoltage(node0);
  }
}
circuitConstructionKitCommon.register('LTASolution', LTASolution);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiTFRBU29sdXRpb24iLCJjb25zdHJ1Y3RvciIsImNpcmN1aXQiLCJtbmFTb2x1dGlvbiIsImN1cnJlbnRDb21wYW5pb25zIiwiZ2V0Tm9kZVZvbHRhZ2UiLCJub2RlSW5kZXgiLCJnZXRDdXJyZW50IiwiZWxlbWVudCIsInJlc2lzdGFuY2UiLCJnZXRDdXJyZW50Rm9yUmVzaXN0b3IiLCJnZXRTb2x2ZWRDdXJyZW50IiwiZ2V0Q3VycmVudEZvckNvbXBhbmlvbiIsImNvcmVNb2RlbCIsImNvbXBhbmlvbiIsIl8iLCJmaW5kIiwiYyIsImlkIiwiZ2V0VmFsdWVGb3JTb2x1dGlvbiIsImdldFZvbHRhZ2UiLCJub2RlMCIsIm5vZGUxIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMVEFTb2x1dGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuaW1wb3J0IExUQUNpcmN1aXQgZnJvbSAnLi9MVEFDaXJjdWl0LmpzJztcclxuaW1wb3J0IE1OQVNvbHV0aW9uIGZyb20gJy4vbW5hL01OQVNvbHV0aW9uLmpzJztcclxuaW1wb3J0IENvcmVNb2RlbCBmcm9tICcuL0NvcmVNb2RlbC5qcyc7XHJcbmltcG9ydCBNTkFSZXNpc3RvciBmcm9tICcuL21uYS9NTkFSZXNpc3Rvci5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIGZyb20gJy4uLy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIExUQVNvbHV0aW9uIGlzIGEgY2xhc3MgdGhhdCByZXByZXNlbnRzIHRoZSBzb2x1dGlvbiBvZiBhIGxpbmVhciB0aW1lLWludmFyaWFudCAoTFRJKSBjaXJjdWl0LiBJdCBwcm92aWRlcyBtZXRob2RzIGZvclxyXG4gKiBnZXR0aW5nIG5vZGUgdm9sdGFnZXMsIGNvbXBvbmVudCBjdXJyZW50cywgYW5kIHZvbHRhZ2VzIGJldHdlZW4gbm9kZXMsIGFzIHdlbGwgYXMgbG9va2luZyB1cCBjb21wYW5pb24gbW9kZWwgdmFsdWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTFRBU29sdXRpb24ge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGNpcmN1aXQ6IExUQUNpcmN1aXQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBtbmFTb2x1dGlvbjogTU5BU29sdXRpb247XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjdXJyZW50Q29tcGFuaW9uczogeyBlbGVtZW50OiBDb3JlTW9kZWw7IGdldFZhbHVlRm9yU29sdXRpb246ICggc29sdXRpb246IE1OQVNvbHV0aW9uICkgPT4gbnVtYmVyIH1bXTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjaXJjdWl0OiBMVEFDaXJjdWl0LCBtbmFTb2x1dGlvbjogTU5BU29sdXRpb24sIGN1cnJlbnRDb21wYW5pb25zOiB7IGVsZW1lbnQ6IENvcmVNb2RlbDsgZ2V0VmFsdWVGb3JTb2x1dGlvbjogKCBzb2x1dGlvbjogTU5BU29sdXRpb24gKSA9PiBudW1iZXIgfVtdICkge1xyXG4gICAgdGhpcy5jaXJjdWl0ID0gY2lyY3VpdDtcclxuICAgIHRoaXMubW5hU29sdXRpb24gPSBtbmFTb2x1dGlvbjtcclxuICAgIHRoaXMuY3VycmVudENvbXBhbmlvbnMgPSBjdXJyZW50Q29tcGFuaW9ucztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXROb2RlVm9sdGFnZSggbm9kZUluZGV4OiBzdHJpbmcgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm1uYVNvbHV0aW9uLmdldE5vZGVWb2x0YWdlKCBub2RlSW5kZXggKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDdXJyZW50KCBlbGVtZW50OiBNTkFSZXNpc3RvciApOiBudW1iZXIge1xyXG5cclxuICAgIC8vIEZvciByZXNpc3RvcnMgd2l0aCByPjAsIE9obSdzIExhdyBnaXZlcyB0aGUgY3VycmVudC4gIEZvciBjb21wb25lbnRzIHdpdGggbm8gcmVzaXN0YW5jZSAobGlrZSBjbG9zZWQgc3dpdGNoIG9yXHJcbiAgICAvLyAwLXJlc2lzdGFuY2UgYmF0dGVyeSksIHRoZSBjdXJyZW50IGlzIGdpdmVuIGJ5IHRoZSBtYXRyaXggc29sdXRpb24uXHJcbiAgICBpZiAoIGVsZW1lbnQucmVzaXN0YW5jZSA+IDAgKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm1uYVNvbHV0aW9uLmdldEN1cnJlbnRGb3JSZXNpc3RvciggZWxlbWVudCApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm1uYVNvbHV0aW9uLmdldFNvbHZlZEN1cnJlbnQoIGVsZW1lbnQgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDdXJyZW50Rm9yQ29tcGFuaW9uKCBjb3JlTW9kZWw6IENvcmVNb2RlbCApOiBudW1iZXIge1xyXG4gICAgY29uc3QgY29tcGFuaW9uID0gXy5maW5kKCB0aGlzLmN1cnJlbnRDb21wYW5pb25zLCBjID0+IGMuZWxlbWVudC5pZCA9PT0gY29yZU1vZGVsLmlkICk7XHJcbiAgICByZXR1cm4gY29tcGFuaW9uIS5nZXRWYWx1ZUZvclNvbHV0aW9uKCB0aGlzLm1uYVNvbHV0aW9uICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Vm9sdGFnZSggbm9kZTA6IHN0cmluZywgbm9kZTE6IHN0cmluZyApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZVZvbHRhZ2UoIG5vZGUxICkgLSB0aGlzLmdldE5vZGVWb2x0YWdlKCBub2RlMCApO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5yZWdpc3RlciggJ0xUQVNvbHV0aW9uJywgTFRBU29sdXRpb24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUtBLE9BQU9BLDRCQUE0QixNQUFNLHVDQUF1Qzs7QUFFaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNQyxXQUFXLENBQUM7RUFNeEJDLFdBQVdBLENBQUVDLE9BQW1CLEVBQUVDLFdBQXdCLEVBQUVDLGlCQUFxRyxFQUFHO0lBQ3pLLElBQUksQ0FBQ0YsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQSxXQUFXO0lBQzlCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUdBLGlCQUFpQjtFQUM1QztFQUVPQyxjQUFjQSxDQUFFQyxTQUFpQixFQUFXO0lBQ2pELE9BQU8sSUFBSSxDQUFDSCxXQUFXLENBQUNFLGNBQWMsQ0FBRUMsU0FBVSxDQUFDO0VBQ3JEO0VBRU9DLFVBQVVBLENBQUVDLE9BQW9CLEVBQVc7SUFFaEQ7SUFDQTtJQUNBLElBQUtBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLENBQUMsRUFBRztNQUM1QixPQUFPLElBQUksQ0FBQ04sV0FBVyxDQUFDTyxxQkFBcUIsQ0FBRUYsT0FBUSxDQUFDO0lBQzFELENBQUMsTUFDSTtNQUNILE9BQU8sSUFBSSxDQUFDTCxXQUFXLENBQUNRLGdCQUFnQixDQUFFSCxPQUFRLENBQUM7SUFDckQ7RUFDRjtFQUVPSSxzQkFBc0JBLENBQUVDLFNBQW9CLEVBQVc7SUFDNUQsTUFBTUMsU0FBUyxHQUFHQyxDQUFDLENBQUNDLElBQUksQ0FBRSxJQUFJLENBQUNaLGlCQUFpQixFQUFFYSxDQUFDLElBQUlBLENBQUMsQ0FBQ1QsT0FBTyxDQUFDVSxFQUFFLEtBQUtMLFNBQVMsQ0FBQ0ssRUFBRyxDQUFDO0lBQ3RGLE9BQU9KLFNBQVMsQ0FBRUssbUJBQW1CLENBQUUsSUFBSSxDQUFDaEIsV0FBWSxDQUFDO0VBQzNEO0VBRU9pQixVQUFVQSxDQUFFQyxLQUFhLEVBQUVDLEtBQWEsRUFBVztJQUN4RCxPQUFPLElBQUksQ0FBQ2pCLGNBQWMsQ0FBRWlCLEtBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQ2pCLGNBQWMsQ0FBRWdCLEtBQU0sQ0FBQztFQUNwRTtBQUNGO0FBRUF0Qiw0QkFBNEIsQ0FBQ3dCLFFBQVEsQ0FBRSxhQUFhLEVBQUV2QixXQUFZLENBQUMifQ==