// Copyright 2019-2022, University of Colorado Boulder

/**
 * One probe for the WaveMeterNode
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { DragListener } from '../../../scenery/js/imports.js';
import ProbeNode from '../../../scenery-phet/js/ProbeNode.js';
import Tandem from '../../../tandem/js/Tandem.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import Vector2Property from '../../../dot/js/Vector2Property.js';
import Vector2 from '../../../dot/js/Vector2.js';
import optionize from '../../../phet-core/js/optionize.js';
export default class CCKCProbeNode extends ProbeNode {
  /**
   * @param node container node which should move to front on press
   * @param visibleBoundsProperty - visible bounds of the ScreenView
   * @param [providedOptions]
   */
  constructor(node, visibleBoundsProperty, providedOptions) {
    const options = optionize()({
      cursor: 'pointer',
      sensorTypeFunction: ProbeNode.crosshairs({
        stroke: 'white'
      }),
      scale: 0.4,
      drag: _.noop,
      tandem: Tandem.OPTIONAL
    }, providedOptions);
    super(options);

    // Wire position through PhET-iO so it can be recorded in the state
    const positionProperty = new Vector2Property(new Vector2(0, 0), {
      tandem: options.tandem.createTandem('positionProperty')
    });
    positionProperty.link(p => this.setTranslation(p));
    visibleBoundsProperty.link(visibleBounds => this.setCenter(visibleBounds.closestPointTo(this.center)));
    this.addInputListener(new DragListener({
      positionProperty: positionProperty,
      dragBoundsProperty: visibleBoundsProperty,
      press: () => node.moveToFront(),
      drag: () => options.drag(),
      tandem: options.tandem.createTandem('dragListener')
    }));
  }
}
circuitConstructionKitCommon.register('CCKCProbeNode', CCKCProbeNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEcmFnTGlzdGVuZXIiLCJQcm9iZU5vZGUiLCJUYW5kZW0iLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiVmVjdG9yMlByb3BlcnR5IiwiVmVjdG9yMiIsIm9wdGlvbml6ZSIsIkNDS0NQcm9iZU5vZGUiLCJjb25zdHJ1Y3RvciIsIm5vZGUiLCJ2aXNpYmxlQm91bmRzUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiY3Vyc29yIiwic2Vuc29yVHlwZUZ1bmN0aW9uIiwiY3Jvc3NoYWlycyIsInN0cm9rZSIsInNjYWxlIiwiZHJhZyIsIl8iLCJub29wIiwidGFuZGVtIiwiT1BUSU9OQUwiLCJwb3NpdGlvblByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwibGluayIsInAiLCJzZXRUcmFuc2xhdGlvbiIsInZpc2libGVCb3VuZHMiLCJzZXRDZW50ZXIiLCJjbG9zZXN0UG9pbnRUbyIsImNlbnRlciIsImFkZElucHV0TGlzdGVuZXIiLCJkcmFnQm91bmRzUHJvcGVydHkiLCJwcmVzcyIsIm1vdmVUb0Zyb250IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDQ0tDUHJvYmVOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE9uZSBwcm9iZSBmb3IgdGhlIFdhdmVNZXRlck5vZGVcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyLCBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFByb2JlTm9kZSwgeyBQcm9iZU5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1Byb2JlTm9kZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIGZyb20gJy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24uanMnO1xyXG5pbXBvcnQgVmVjdG9yMlByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGRyYWc/OiAoKSA9PiB2b2lkO1xyXG59O1xyXG50eXBlIENDS1Byb2JlTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFByb2JlTm9kZU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDQ0tDUHJvYmVOb2RlIGV4dGVuZHMgUHJvYmVOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG5vZGUgY29udGFpbmVyIG5vZGUgd2hpY2ggc2hvdWxkIG1vdmUgdG8gZnJvbnQgb24gcHJlc3NcclxuICAgKiBAcGFyYW0gdmlzaWJsZUJvdW5kc1Byb3BlcnR5IC0gdmlzaWJsZSBib3VuZHMgb2YgdGhlIFNjcmVlblZpZXdcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG5vZGU6IE5vZGUsIHZpc2libGVCb3VuZHNQcm9wZXJ0eTogUHJvcGVydHk8Qm91bmRzMj4sIHByb3ZpZGVkT3B0aW9ucz86IENDS1Byb2JlTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxDQ0tQcm9iZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUHJvYmVOb2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcclxuICAgICAgc2Vuc29yVHlwZUZ1bmN0aW9uOiBQcm9iZU5vZGUuY3Jvc3NoYWlycyggeyBzdHJva2U6ICd3aGl0ZScgfSApLFxyXG4gICAgICBzY2FsZTogMC40LFxyXG4gICAgICBkcmFnOiBfLm5vb3AsXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVElPTkFMXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFdpcmUgcG9zaXRpb24gdGhyb3VnaCBQaEVULWlPIHNvIGl0IGNhbiBiZSByZWNvcmRlZCBpbiB0aGUgc3RhdGVcclxuICAgIGNvbnN0IHBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBuZXcgVmVjdG9yMiggMCwgMCApLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncG9zaXRpb25Qcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHBvc2l0aW9uUHJvcGVydHkubGluayggcCA9PiB0aGlzLnNldFRyYW5zbGF0aW9uKCBwICkgKTtcclxuXHJcbiAgICB2aXNpYmxlQm91bmRzUHJvcGVydHkubGluayggdmlzaWJsZUJvdW5kcyA9PiB0aGlzLnNldENlbnRlciggdmlzaWJsZUJvdW5kcy5jbG9zZXN0UG9pbnRUbyggdGhpcy5jZW50ZXIgKSApICk7XHJcblxyXG4gICAgdGhpcy5hZGRJbnB1dExpc3RlbmVyKCBuZXcgRHJhZ0xpc3RlbmVyKCB7XHJcbiAgICAgIHBvc2l0aW9uUHJvcGVydHk6IHBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgIGRyYWdCb3VuZHNQcm9wZXJ0eTogdmlzaWJsZUJvdW5kc1Byb3BlcnR5LFxyXG4gICAgICBwcmVzczogKCkgPT4gbm9kZS5tb3ZlVG9Gcm9udCgpLFxyXG4gICAgICBkcmFnOiAoKSA9PiBvcHRpb25zLmRyYWcoKSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdkcmFnTGlzdGVuZXInIClcclxuICAgIH0gKSApO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5yZWdpc3RlciggJ0NDS0NQcm9iZU5vZGUnLCBDQ0tDUHJvYmVOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLFNBQVNBLFlBQVksUUFBYyxnQ0FBZ0M7QUFDbkUsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFDbkYsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7QUFDN0UsT0FBT0MsZUFBZSxNQUFNLG9DQUFvQztBQUNoRSxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLFNBQVMsTUFBTSxvQ0FBb0M7QUFPMUQsZUFBZSxNQUFNQyxhQUFhLFNBQVNOLFNBQVMsQ0FBQztFQUVuRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NPLFdBQVdBLENBQUVDLElBQVUsRUFBRUMscUJBQXdDLEVBQUVDLGVBQXFDLEVBQUc7SUFFaEgsTUFBTUMsT0FBTyxHQUFHTixTQUFTLENBQXFELENBQUMsQ0FBRTtNQUMvRU8sTUFBTSxFQUFFLFNBQVM7TUFDakJDLGtCQUFrQixFQUFFYixTQUFTLENBQUNjLFVBQVUsQ0FBRTtRQUFFQyxNQUFNLEVBQUU7TUFBUSxDQUFFLENBQUM7TUFDL0RDLEtBQUssRUFBRSxHQUFHO01BQ1ZDLElBQUksRUFBRUMsQ0FBQyxDQUFDQyxJQUFJO01BQ1pDLE1BQU0sRUFBRW5CLE1BQU0sQ0FBQ29CO0lBQ2pCLENBQUMsRUFBRVgsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQSxNQUFNVyxnQkFBZ0IsR0FBRyxJQUFJbkIsZUFBZSxDQUFFLElBQUlDLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUU7TUFDakVnQixNQUFNLEVBQUVULE9BQU8sQ0FBQ1MsTUFBTSxDQUFDRyxZQUFZLENBQUUsa0JBQW1CO0lBQzFELENBQUUsQ0FBQztJQUVIRCxnQkFBZ0IsQ0FBQ0UsSUFBSSxDQUFFQyxDQUFDLElBQUksSUFBSSxDQUFDQyxjQUFjLENBQUVELENBQUUsQ0FBRSxDQUFDO0lBRXREaEIscUJBQXFCLENBQUNlLElBQUksQ0FBRUcsYUFBYSxJQUFJLElBQUksQ0FBQ0MsU0FBUyxDQUFFRCxhQUFhLENBQUNFLGNBQWMsQ0FBRSxJQUFJLENBQUNDLE1BQU8sQ0FBRSxDQUFFLENBQUM7SUFFNUcsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBRSxJQUFJaEMsWUFBWSxDQUFFO01BQ3ZDdUIsZ0JBQWdCLEVBQUVBLGdCQUFnQjtNQUNsQ1Usa0JBQWtCLEVBQUV2QixxQkFBcUI7TUFDekN3QixLQUFLLEVBQUVBLENBQUEsS0FBTXpCLElBQUksQ0FBQzBCLFdBQVcsQ0FBQyxDQUFDO01BQy9CakIsSUFBSSxFQUFFQSxDQUFBLEtBQU1OLE9BQU8sQ0FBQ00sSUFBSSxDQUFDLENBQUM7TUFDMUJHLE1BQU0sRUFBRVQsT0FBTyxDQUFDUyxNQUFNLENBQUNHLFlBQVksQ0FBRSxjQUFlO0lBQ3RELENBQUUsQ0FBRSxDQUFDO0VBQ1A7QUFDRjtBQUVBckIsNEJBQTRCLENBQUNpQyxRQUFRLENBQUUsZUFBZSxFQUFFN0IsYUFBYyxDQUFDIn0=