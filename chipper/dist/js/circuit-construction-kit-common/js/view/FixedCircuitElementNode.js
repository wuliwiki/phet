// Copyright 2016-2023, University of Colorado Boulder

/**
 * Renders and provides interactivity for FixedCircuitElements (all CircuitElements except Wires).
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import Matrix3 from '../../../dot/js/Matrix3.js';
import Vector2 from '../../../dot/js/Vector2.js';
import { Image, Node } from '../../../scenery/js/imports.js';
import fire_png from '../../images/fire_png.js';
import CCKCUtils from '../CCKCUtils.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import CircuitElementViewType from '../model/CircuitElementViewType.js';
import Resistor from '../model/Resistor.js';
import CircuitElementNode from './CircuitElementNode.js';
import CircuitNodeDragListener from './CircuitNodeDragListener.js';
import FixedCircuitElementHighlightNode from './FixedCircuitElementHighlightNode.js';
import Multilink from '../../../axon/js/Multilink.js';
import optionize from '../../../phet-core/js/optionize.js';
// constants
const matrix = new Matrix3();
const rotationMatrix = new Matrix3();
const FIRE_THRESHOLD = 15; // Beyond this number of amps, flammable CircuitElements catch on fire
const ONE_AMP_PROPERTY = new NumberProperty(1); // All batteries are flammable, so treat them as if they have nonzero resistance
const HIGHLIGHT_PADDING = 10; // in view coordinates

/**
 * Determine whether fire should be shown on the circuit element.
 * @param current - in amps
 * @param isValueDepictionEnabled - whether values are shown
 */
const isFireShown = (current, isValueDepictionEnabled) => Math.abs(current) >= FIRE_THRESHOLD && isValueDepictionEnabled;
export default class FixedCircuitElementNode extends CircuitElementNode {
  // Identifies the images used to render this node so they can be prepopulated in the WebGL sprite sheet.
  static webglSpriteNodes = [new Image(fire_png)];
  /**
   * @param screenView - the main screen view, null for isIcon
   * @param circuitNode - Null if an isIcon is created
   * @param circuitElement - the corresponding model element
   * @param viewTypeProperty
   * @param lifelikeNode - the Node that will display the component as a lifelike object.  Origin must be
   *                            - left-center
   * @param schematicNode - the Node that will display the component. Origin must be left-center.
   * @param tandem
   * @param [providedOptions]
   */
  constructor(screenView, circuitNode, circuitElement, viewTypeProperty, lifelikeNode, schematicNode, tandem, providedOptions) {
    assert && assert(lifelikeNode !== schematicNode, 'schematicNode should be different than lifelikeNode');
    const circuit = circuitNode && circuitNode.circuit;
    const contentNode = new Node();
    const options = optionize()({
      cursor: 'pointer',
      children: [contentNode],
      tandem: tandem,
      pickable: true,
      isIcon: false,
      showHighlight: true
    }, providedOptions);
    super(circuitElement, circuit, options);

    // shows the lifelike view
    this.lifelikeNode = lifelikeNode;

    // shows the schematic view
    this.schematicNode = schematicNode;

    // whether an isIcon is being rendered
    this.isIcon = options.isIcon;
    this.circuitNode = circuitNode;

    // node that shows the component, separate from the part that shows the highlight and the fire
    this.contentNode = contentNode;

    // display the fire for flammable CircuitElements
    this.fireNode = null;
    this.viewTypeProperty = viewTypeProperty;

    // Show the selected node
    this.viewPropertyListener = this.setViewType.bind(this);
    viewTypeProperty.link(this.viewPropertyListener);

    // Add highlight (but not for icons)
    if (!options.isIcon && options.showHighlight) {
      this.highlightNode = new FixedCircuitElementHighlightNode(this);

      // Update the highlight bounds after it is created
      this.viewPropertyListener(viewTypeProperty.value);
    } else {
      this.highlightNode = null;
    }
    this.markDirtyListener = this.markAsDirty.bind(this);
    circuitElement.vertexMovedEmitter.addListener(this.markDirtyListener);
    this.moveToFrontListener = this.moveFixedCircuitElementNodeToFront.bind(this);
    circuitElement.connectedEmitter.addListener(this.moveToFrontListener);
    circuitElement.vertexSelectedEmitter.addListener(this.moveToFrontListener);
    this.pickableListener = this.setPickable.bind(this);

    // LightBulbSocketNode cannot ever be pickable, so let it opt out of this callback
    options.pickable && circuitElement.interactiveProperty.link(this.pickableListener);
    this.fixedCircuitElementNodePickable = options.pickable || null;

    // Use whatever the start node currently is (it can change), and let the circuit manage the dependent vertices
    let initialPoint = null;
    let latestPoint = null;
    let dragged = false;
    if (!options.isIcon && circuitNode) {
      this.dragListener = new CircuitNodeDragListener(circuitNode, [() => circuitElement.endVertexProperty.get()], {
        start: event => {
          this.moveToFront();
          if (event.pointer && event.pointer.point) {
            initialPoint = event.pointer.point.copy();
            latestPoint = event.pointer.point.copy();
            circuitElement.interactiveProperty.get() && circuitNode.startDragVertex(event.pointer.point, circuitElement.endVertexProperty.get(), circuitElement);
            dragged = false;
          }
        },
        drag: event => {
          if (event.pointer.point) {
            latestPoint = event.pointer.point.copy();
            circuitElement.interactiveProperty.get() && circuitNode.dragVertex(event.pointer.point, circuitElement.endVertexProperty.get(), false);
            dragged = true;
          }
        },
        end: () => this.endDrag(this.contentNode, [circuitElement.endVertexProperty.get()], screenView, circuitNode, initialPoint, latestPoint, dragged),
        tandem: tandem.createTandem('dragListener')
      });
      this.contentNode.addInputListener(this.dragListener);
      if (options.showHighlight) {
        this.updateHighlightVisibility = this.setSelectedCircuitElement.bind(this);
        circuitNode.circuit.selectionProperty.link(this.updateHighlightVisibility);
      } else {
        this.updateHighlightVisibility = null;
      }

      // Show fire for batteries and resistors
      if (circuitElement.isFlammable) {
        this.fireNode = new Image(fire_png, {
          pickable: false,
          imageOpacity: 0.95
        });
        this.fireNode.mutate({
          scale: this.contentNode.width / this.fireNode.width
        });
        this.addChild(this.fireNode);
        if (screenView) {
          // Show fire in batteries and resistors with resistance > 0
          this.updateFireMultilink = Multilink.multilink([circuitElement.currentProperty, circuitElement instanceof Resistor ? circuitElement.resistanceProperty : ONE_AMP_PROPERTY, screenView.model.isValueDepictionEnabledProperty], this.updateFireVisible.bind(this));
        } else {
          assert && assert(false, 'screenView should have been defined');
          this.updateFireMultilink = null;
        }
      } else {
        this.fireNode = null;
        this.updateFireMultilink = null;
      }
    } else {
      this.dragListener = null;
      this.updateFireMultilink = null;
      this.updateHighlightVisibility = null;
    }
  }

  /**
   * Set the view type
   */
  setViewType(viewType) {
    this.contentNode.children = [viewType === CircuitElementViewType.LIFELIKE ? this.lifelikeNode : this.schematicNode];

    // Update the dimensions of the highlight.  For Switches, retain the original bounds (big enough to encapsulate
    // both schematic and lifelike open and closed).
    this.circuitElement.isSizeChangedOnViewChange && this.highlightNode && this.highlightNode.recomputeBounds(this);
  }

  /**
   * Multiple updates may happen per frame, they are batched and updated once in the view step to improve performance.
   * CCKCLightBulbNode calls updateRender for its child socket node
   */
  updateRender() {
    const startPosition = this.circuitElement.startPositionProperty.get();
    const endPosition = this.circuitElement.endPositionProperty.get();
    if (startPosition.equals(endPosition)) {
      // We are (hopefully!) in the middle of updating both vertices and we (hopefully!) will receive another callback
      // shortly with the correct values for both startPosition and endPosition
      // See https://github.com/phetsims/circuit-construction-kit-common/issues/413
      // assert && stepTimer.setTimeout( function() {
      //   assert && assert( !this.circuitElement.startPositionProperty.get().equals( this.circuitElement.endPositionProperty.get() ), 'vertices cannot be in the same spot' );
      // }, 0 );
      return;
    }
    const angle = Vector2.getAngleBetweenVectors(startPosition, endPosition);
    const magnitude = Vector2.getDistanceBetweenVectors(startPosition, endPosition);

    // Update the node transform in a single step, see #66
    matrix.setToTranslationRotationPoint(startPosition, angle);
    this.contentNode.setMatrix(matrix);
    if (this.highlightNode && this.circuitNode.circuit.selectionProperty.get() === this.circuitElement) {
      this.highlightNode.setMatrix(matrix);
    }

    // Update the fire transform
    const flameExtent = 0.8;
    const scale = magnitude / fire_png.width * flameExtent;
    const flameMargin = (1 - flameExtent) / 2;
    const flameX = magnitude * flameMargin / scale;
    const flameY = -fire_png.height;
    matrix.multiplyMatrix(rotationMatrix.setToScale(scale)).multiplyMatrix(rotationMatrix.setToTranslation(flameX, flameY));
    this.fireNode && this.fireNode.setMatrix(matrix);
  }

  /**
   * Move the circuit element node to the front
   */
  moveFixedCircuitElementNodeToFront() {
    // Components outside the black box do not move in front of the overlay
    if (this.circuitElement.interactiveProperty.get()) {
      this.moveToFront();
      this.circuitElement.moveToFrontEmitter.emit();
      this.circuitElement.startVertexProperty.get().relayerEmitter.emit();
      this.circuitElement.endVertexProperty.get().relayerEmitter.emit();
    }
  }

  /**
   * Used as a bound callback listener in the constructor to update the highlight visibility
   */
  setSelectedCircuitElement(circuitElement) {
    if (this.highlightNode) {
      const visible = circuitElement === this.circuitElement;
      CCKCUtils.setInSceneGraph(visible, this.circuitNode.highlightLayer, this.highlightNode);
      this.markAsDirty();
    } else {
      assert && assert(false, 'should have a highlight node');
    }
  }
  dispose() {
    // Interrupt the drag event if it was in progress
    this.dragListener && this.dragListener.interrupt();
    this.dragListener && this.dragListener.dispose();
    this.circuitElement.vertexMovedEmitter.removeListener(this.markDirtyListener);
    this.updateHighlightVisibility && this.circuitNode.circuit.selectionProperty.unlink(this.updateHighlightVisibility);
    this.circuitElement.connectedEmitter.removeListener(this.moveToFrontListener);
    this.circuitElement.vertexSelectedEmitter.removeListener(this.moveToFrontListener);
    this.fixedCircuitElementNodePickable && this.circuitElement.interactiveProperty.unlink(this.pickableListener);
    this.circuitNode && this.highlightNode && CCKCUtils.setInSceneGraph(false, this.circuitNode.highlightLayer, this.highlightNode);
    this.viewTypeProperty.unlink(this.viewPropertyListener);
    if (!this.isIcon && this.updateFireMultilink) {
      Multilink.unmultilink(this.updateFireMultilink);
    }

    // Detach the child nodes which are reused (so they don't have a _parents reference)
    this.contentNode.dispose();
    super.dispose();
  }

  /**
   * Hide or show the fire depending on various parameters, for listener bind.
   */
  updateFireVisible(current, resistance, isValueDepictionEnabled) {
    this.fireNode.visible = isFireShown(current, isValueDepictionEnabled) && resistance >= 1E-8;
  }

  /**
   * Gets the bounds for the highlight rectangle.
   */
  getHighlightBounds() {
    return this.contentNode.localBounds.dilated(HIGHLIGHT_PADDING);
  }
}
circuitConstructionKitCommon.register('FixedCircuitElementNode', FixedCircuitElementNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIk1hdHJpeDMiLCJWZWN0b3IyIiwiSW1hZ2UiLCJOb2RlIiwiZmlyZV9wbmciLCJDQ0tDVXRpbHMiLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiQ2lyY3VpdEVsZW1lbnRWaWV3VHlwZSIsIlJlc2lzdG9yIiwiQ2lyY3VpdEVsZW1lbnROb2RlIiwiQ2lyY3VpdE5vZGVEcmFnTGlzdGVuZXIiLCJGaXhlZENpcmN1aXRFbGVtZW50SGlnaGxpZ2h0Tm9kZSIsIk11bHRpbGluayIsIm9wdGlvbml6ZSIsIm1hdHJpeCIsInJvdGF0aW9uTWF0cml4IiwiRklSRV9USFJFU0hPTEQiLCJPTkVfQU1QX1BST1BFUlRZIiwiSElHSExJR0hUX1BBRERJTkciLCJpc0ZpcmVTaG93biIsImN1cnJlbnQiLCJpc1ZhbHVlRGVwaWN0aW9uRW5hYmxlZCIsIk1hdGgiLCJhYnMiLCJGaXhlZENpcmN1aXRFbGVtZW50Tm9kZSIsIndlYmdsU3ByaXRlTm9kZXMiLCJjb25zdHJ1Y3RvciIsInNjcmVlblZpZXciLCJjaXJjdWl0Tm9kZSIsImNpcmN1aXRFbGVtZW50Iiwidmlld1R5cGVQcm9wZXJ0eSIsImxpZmVsaWtlTm9kZSIsInNjaGVtYXRpY05vZGUiLCJ0YW5kZW0iLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJjaXJjdWl0IiwiY29udGVudE5vZGUiLCJvcHRpb25zIiwiY3Vyc29yIiwiY2hpbGRyZW4iLCJwaWNrYWJsZSIsImlzSWNvbiIsInNob3dIaWdobGlnaHQiLCJmaXJlTm9kZSIsInZpZXdQcm9wZXJ0eUxpc3RlbmVyIiwic2V0Vmlld1R5cGUiLCJiaW5kIiwibGluayIsImhpZ2hsaWdodE5vZGUiLCJ2YWx1ZSIsIm1hcmtEaXJ0eUxpc3RlbmVyIiwibWFya0FzRGlydHkiLCJ2ZXJ0ZXhNb3ZlZEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsIm1vdmVUb0Zyb250TGlzdGVuZXIiLCJtb3ZlRml4ZWRDaXJjdWl0RWxlbWVudE5vZGVUb0Zyb250IiwiY29ubmVjdGVkRW1pdHRlciIsInZlcnRleFNlbGVjdGVkRW1pdHRlciIsInBpY2thYmxlTGlzdGVuZXIiLCJzZXRQaWNrYWJsZSIsImludGVyYWN0aXZlUHJvcGVydHkiLCJmaXhlZENpcmN1aXRFbGVtZW50Tm9kZVBpY2thYmxlIiwiaW5pdGlhbFBvaW50IiwibGF0ZXN0UG9pbnQiLCJkcmFnZ2VkIiwiZHJhZ0xpc3RlbmVyIiwiZW5kVmVydGV4UHJvcGVydHkiLCJnZXQiLCJzdGFydCIsImV2ZW50IiwibW92ZVRvRnJvbnQiLCJwb2ludGVyIiwicG9pbnQiLCJjb3B5Iiwic3RhcnREcmFnVmVydGV4IiwiZHJhZyIsImRyYWdWZXJ0ZXgiLCJlbmQiLCJlbmREcmFnIiwiY3JlYXRlVGFuZGVtIiwiYWRkSW5wdXRMaXN0ZW5lciIsInVwZGF0ZUhpZ2hsaWdodFZpc2liaWxpdHkiLCJzZXRTZWxlY3RlZENpcmN1aXRFbGVtZW50Iiwic2VsZWN0aW9uUHJvcGVydHkiLCJpc0ZsYW1tYWJsZSIsImltYWdlT3BhY2l0eSIsIm11dGF0ZSIsInNjYWxlIiwid2lkdGgiLCJhZGRDaGlsZCIsInVwZGF0ZUZpcmVNdWx0aWxpbmsiLCJtdWx0aWxpbmsiLCJjdXJyZW50UHJvcGVydHkiLCJyZXNpc3RhbmNlUHJvcGVydHkiLCJtb2RlbCIsImlzVmFsdWVEZXBpY3Rpb25FbmFibGVkUHJvcGVydHkiLCJ1cGRhdGVGaXJlVmlzaWJsZSIsInZpZXdUeXBlIiwiTElGRUxJS0UiLCJpc1NpemVDaGFuZ2VkT25WaWV3Q2hhbmdlIiwicmVjb21wdXRlQm91bmRzIiwidXBkYXRlUmVuZGVyIiwic3RhcnRQb3NpdGlvbiIsInN0YXJ0UG9zaXRpb25Qcm9wZXJ0eSIsImVuZFBvc2l0aW9uIiwiZW5kUG9zaXRpb25Qcm9wZXJ0eSIsImVxdWFscyIsImFuZ2xlIiwiZ2V0QW5nbGVCZXR3ZWVuVmVjdG9ycyIsIm1hZ25pdHVkZSIsImdldERpc3RhbmNlQmV0d2VlblZlY3RvcnMiLCJzZXRUb1RyYW5zbGF0aW9uUm90YXRpb25Qb2ludCIsInNldE1hdHJpeCIsImZsYW1lRXh0ZW50IiwiZmxhbWVNYXJnaW4iLCJmbGFtZVgiLCJmbGFtZVkiLCJoZWlnaHQiLCJtdWx0aXBseU1hdHJpeCIsInNldFRvU2NhbGUiLCJzZXRUb1RyYW5zbGF0aW9uIiwibW92ZVRvRnJvbnRFbWl0dGVyIiwiZW1pdCIsInN0YXJ0VmVydGV4UHJvcGVydHkiLCJyZWxheWVyRW1pdHRlciIsInZpc2libGUiLCJzZXRJblNjZW5lR3JhcGgiLCJoaWdobGlnaHRMYXllciIsImRpc3Bvc2UiLCJpbnRlcnJ1cHQiLCJyZW1vdmVMaXN0ZW5lciIsInVubGluayIsInVubXVsdGlsaW5rIiwicmVzaXN0YW5jZSIsImdldEhpZ2hsaWdodEJvdW5kcyIsImxvY2FsQm91bmRzIiwiZGlsYXRlZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRml4ZWRDaXJjdWl0RWxlbWVudE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmVuZGVycyBhbmQgcHJvdmlkZXMgaW50ZXJhY3Rpdml0eSBmb3IgRml4ZWRDaXJjdWl0RWxlbWVudHMgKGFsbCBDaXJjdWl0RWxlbWVudHMgZXhjZXB0IFdpcmVzKS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IEltYWdlLCBOb2RlLCBTY2VuZXJ5RXZlbnQgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZmlyZV9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2ZpcmVfcG5nLmpzJztcclxuaW1wb3J0IENDS0NVdGlscyBmcm9tICcuLi9DQ0tDVXRpbHMuanMnO1xyXG5pbXBvcnQgY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbiBmcm9tICcuLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLmpzJztcclxuaW1wb3J0IENpcmN1aXRFbGVtZW50Vmlld1R5cGUgZnJvbSAnLi4vbW9kZWwvQ2lyY3VpdEVsZW1lbnRWaWV3VHlwZS5qcyc7XHJcbmltcG9ydCBGaXhlZENpcmN1aXRFbGVtZW50IGZyb20gJy4uL21vZGVsL0ZpeGVkQ2lyY3VpdEVsZW1lbnQuanMnO1xyXG5pbXBvcnQgUmVzaXN0b3IgZnJvbSAnLi4vbW9kZWwvUmVzaXN0b3IuanMnO1xyXG5pbXBvcnQgQ0NLQ1NjcmVlblZpZXcgZnJvbSAnLi9DQ0tDU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBDaXJjdWl0RWxlbWVudE5vZGUsIHsgQ2lyY3VpdEVsZW1lbnROb2RlT3B0aW9ucyB9IGZyb20gJy4vQ2lyY3VpdEVsZW1lbnROb2RlLmpzJztcclxuaW1wb3J0IENpcmN1aXROb2RlIGZyb20gJy4vQ2lyY3VpdE5vZGUuanMnO1xyXG5pbXBvcnQgQ2lyY3VpdE5vZGVEcmFnTGlzdGVuZXIgZnJvbSAnLi9DaXJjdWl0Tm9kZURyYWdMaXN0ZW5lci5qcyc7XHJcbmltcG9ydCBGaXhlZENpcmN1aXRFbGVtZW50SGlnaGxpZ2h0Tm9kZSBmcm9tICcuL0ZpeGVkQ2lyY3VpdEVsZW1lbnRIaWdobGlnaHROb2RlLmpzJztcclxuaW1wb3J0IENpcmN1aXRFbGVtZW50IGZyb20gJy4uL21vZGVsL0NpcmN1aXRFbGVtZW50LmpzJztcclxuaW1wb3J0IE11bHRpbGluaywgeyBVbmtub3duTXVsdGlsaW5rIH0gZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBWZXJ0ZXggZnJvbSAnLi4vbW9kZWwvVmVydGV4LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBtYXRyaXggPSBuZXcgTWF0cml4MygpO1xyXG5jb25zdCByb3RhdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XHJcbmNvbnN0IEZJUkVfVEhSRVNIT0xEID0gMTU7IC8vIEJleW9uZCB0aGlzIG51bWJlciBvZiBhbXBzLCBmbGFtbWFibGUgQ2lyY3VpdEVsZW1lbnRzIGNhdGNoIG9uIGZpcmVcclxuY29uc3QgT05FX0FNUF9QUk9QRVJUWSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMSApOyAvLyBBbGwgYmF0dGVyaWVzIGFyZSBmbGFtbWFibGUsIHNvIHRyZWF0IHRoZW0gYXMgaWYgdGhleSBoYXZlIG5vbnplcm8gcmVzaXN0YW5jZVxyXG5jb25zdCBISUdITElHSFRfUEFERElORyA9IDEwOyAvLyBpbiB2aWV3IGNvb3JkaW5hdGVzXHJcblxyXG4vKipcclxuICogRGV0ZXJtaW5lIHdoZXRoZXIgZmlyZSBzaG91bGQgYmUgc2hvd24gb24gdGhlIGNpcmN1aXQgZWxlbWVudC5cclxuICogQHBhcmFtIGN1cnJlbnQgLSBpbiBhbXBzXHJcbiAqIEBwYXJhbSBpc1ZhbHVlRGVwaWN0aW9uRW5hYmxlZCAtIHdoZXRoZXIgdmFsdWVzIGFyZSBzaG93blxyXG4gKi9cclxuY29uc3QgaXNGaXJlU2hvd24gPSAoIGN1cnJlbnQ6IG51bWJlciwgaXNWYWx1ZURlcGljdGlvbkVuYWJsZWQ6IGJvb2xlYW4gKSA9PlxyXG4gIE1hdGguYWJzKCBjdXJyZW50ICkgPj0gRklSRV9USFJFU0hPTEQgJiYgaXNWYWx1ZURlcGljdGlvbkVuYWJsZWQ7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGlzSWNvbj86IGJvb2xlYW47XHJcbiAgc2hvd0hpZ2hsaWdodD86IGJvb2xlYW47XHJcbn07XHJcbmV4cG9ydCB0eXBlIEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgQ2lyY3VpdEVsZW1lbnROb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlIGV4dGVuZHMgQ2lyY3VpdEVsZW1lbnROb2RlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGxpZmVsaWtlTm9kZTogTm9kZTtcclxuICBwcml2YXRlIHJlYWRvbmx5IHNjaGVtYXRpY05vZGU6IE5vZGU7XHJcbiAgcHJvdGVjdGVkIGlzSWNvbjogYm9vbGVhbjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGNpcmN1aXROb2RlOiBDaXJjdWl0Tm9kZSB8IG51bGw7XHJcbiAgcHVibGljIHJlYWRvbmx5IGNvbnRlbnROb2RlOiBOb2RlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZmlyZU5vZGU6IE5vZGUgfCBudWxsO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSB2aWV3VHlwZVByb3BlcnR5OiBQcm9wZXJ0eTxDaXJjdWl0RWxlbWVudFZpZXdUeXBlPjtcclxuICBwcml2YXRlIHJlYWRvbmx5IHZpZXdQcm9wZXJ0eUxpc3RlbmVyOiAoIHZpZXdUeXBlOiBDaXJjdWl0RWxlbWVudFZpZXdUeXBlICkgPT4gdm9pZDtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgaGlnaGxpZ2h0Tm9kZTogRml4ZWRDaXJjdWl0RWxlbWVudEhpZ2hsaWdodE5vZGUgfCBudWxsO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbWFya0RpcnR5TGlzdGVuZXI6ICgpID0+IHZvaWQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBtb3ZlVG9Gcm9udExpc3RlbmVyOiAoKSA9PiB2b2lkO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBwaWNrYWJsZUxpc3RlbmVyOiAoIHBpY2thYmxlOiBib29sZWFuIHwgbnVsbCApID0+IE5vZGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBmaXhlZENpcmN1aXRFbGVtZW50Tm9kZVBpY2thYmxlOiBib29sZWFuIHwgbnVsbDtcclxuICBwdWJsaWMgcmVhZG9ubHkgZHJhZ0xpc3RlbmVyOiBDaXJjdWl0Tm9kZURyYWdMaXN0ZW5lciB8IG51bGw7XHJcblxyXG4gIC8vIElkZW50aWZpZXMgdGhlIGltYWdlcyB1c2VkIHRvIHJlbmRlciB0aGlzIG5vZGUgc28gdGhleSBjYW4gYmUgcHJlcG9wdWxhdGVkIGluIHRoZSBXZWJHTCBzcHJpdGUgc2hlZXQuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSB3ZWJnbFNwcml0ZU5vZGVzOiBOb2RlW10gPSBbXHJcbiAgICBuZXcgSW1hZ2UoIGZpcmVfcG5nIClcclxuICBdO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdXBkYXRlSGlnaGxpZ2h0VmlzaWJpbGl0eTogKCAoIGNpcmN1aXRFbGVtZW50OiBDaXJjdWl0RWxlbWVudCB8IFZlcnRleCB8IG51bGwgKSA9PiB2b2lkICkgfCBudWxsO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdXBkYXRlRmlyZU11bHRpbGluazogVW5rbm93bk11bHRpbGluayB8IG51bGw7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzY3JlZW5WaWV3IC0gdGhlIG1haW4gc2NyZWVuIHZpZXcsIG51bGwgZm9yIGlzSWNvblxyXG4gICAqIEBwYXJhbSBjaXJjdWl0Tm9kZSAtIE51bGwgaWYgYW4gaXNJY29uIGlzIGNyZWF0ZWRcclxuICAgKiBAcGFyYW0gY2lyY3VpdEVsZW1lbnQgLSB0aGUgY29ycmVzcG9uZGluZyBtb2RlbCBlbGVtZW50XHJcbiAgICogQHBhcmFtIHZpZXdUeXBlUHJvcGVydHlcclxuICAgKiBAcGFyYW0gbGlmZWxpa2VOb2RlIC0gdGhlIE5vZGUgdGhhdCB3aWxsIGRpc3BsYXkgdGhlIGNvbXBvbmVudCBhcyBhIGxpZmVsaWtlIG9iamVjdC4gIE9yaWdpbiBtdXN0IGJlXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBsZWZ0LWNlbnRlclxyXG4gICAqIEBwYXJhbSBzY2hlbWF0aWNOb2RlIC0gdGhlIE5vZGUgdGhhdCB3aWxsIGRpc3BsYXkgdGhlIGNvbXBvbmVudC4gT3JpZ2luIG11c3QgYmUgbGVmdC1jZW50ZXIuXHJcbiAgICogQHBhcmFtIHRhbmRlbVxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc2NyZWVuVmlldzogQ0NLQ1NjcmVlblZpZXcgfCBudWxsLCBjaXJjdWl0Tm9kZTogQ2lyY3VpdE5vZGUgfCBudWxsLCBjaXJjdWl0RWxlbWVudDogRml4ZWRDaXJjdWl0RWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgIHZpZXdUeXBlUHJvcGVydHk6IFByb3BlcnR5PENpcmN1aXRFbGVtZW50Vmlld1R5cGU+LCBsaWZlbGlrZU5vZGU6IE5vZGUsIHNjaGVtYXRpY05vZGU6IE5vZGUsIHRhbmRlbTogVGFuZGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogRml4ZWRDaXJjdWl0RWxlbWVudE5vZGVPcHRpb25zICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbGlmZWxpa2VOb2RlICE9PSBzY2hlbWF0aWNOb2RlLCAnc2NoZW1hdGljTm9kZSBzaG91bGQgYmUgZGlmZmVyZW50IHRoYW4gbGlmZWxpa2VOb2RlJyApO1xyXG5cclxuICAgIGNvbnN0IGNpcmN1aXQgPSBjaXJjdWl0Tm9kZSAmJiBjaXJjdWl0Tm9kZS5jaXJjdWl0O1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gbmV3IE5vZGUoKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIENpcmN1aXRFbGVtZW50Tm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICAgIGNoaWxkcmVuOiBbIGNvbnRlbnROb2RlIF0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBwaWNrYWJsZTogdHJ1ZSxcclxuICAgICAgaXNJY29uOiBmYWxzZSxcclxuICAgICAgc2hvd0hpZ2hsaWdodDogdHJ1ZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGNpcmN1aXRFbGVtZW50LCBjaXJjdWl0LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gc2hvd3MgdGhlIGxpZmVsaWtlIHZpZXdcclxuICAgIHRoaXMubGlmZWxpa2VOb2RlID0gbGlmZWxpa2VOb2RlO1xyXG5cclxuICAgIC8vIHNob3dzIHRoZSBzY2hlbWF0aWMgdmlld1xyXG4gICAgdGhpcy5zY2hlbWF0aWNOb2RlID0gc2NoZW1hdGljTm9kZTtcclxuXHJcbiAgICAvLyB3aGV0aGVyIGFuIGlzSWNvbiBpcyBiZWluZyByZW5kZXJlZFxyXG4gICAgdGhpcy5pc0ljb24gPSBvcHRpb25zLmlzSWNvbjtcclxuXHJcbiAgICB0aGlzLmNpcmN1aXROb2RlID0gY2lyY3VpdE5vZGU7XHJcblxyXG4gICAgLy8gbm9kZSB0aGF0IHNob3dzIHRoZSBjb21wb25lbnQsIHNlcGFyYXRlIGZyb20gdGhlIHBhcnQgdGhhdCBzaG93cyB0aGUgaGlnaGxpZ2h0IGFuZCB0aGUgZmlyZVxyXG4gICAgdGhpcy5jb250ZW50Tm9kZSA9IGNvbnRlbnROb2RlO1xyXG5cclxuICAgIC8vIGRpc3BsYXkgdGhlIGZpcmUgZm9yIGZsYW1tYWJsZSBDaXJjdWl0RWxlbWVudHNcclxuICAgIHRoaXMuZmlyZU5vZGUgPSBudWxsO1xyXG5cclxuICAgIHRoaXMudmlld1R5cGVQcm9wZXJ0eSA9IHZpZXdUeXBlUHJvcGVydHk7XHJcblxyXG4gICAgLy8gU2hvdyB0aGUgc2VsZWN0ZWQgbm9kZVxyXG4gICAgdGhpcy52aWV3UHJvcGVydHlMaXN0ZW5lciA9IHRoaXMuc2V0Vmlld1R5cGUuYmluZCggdGhpcyApO1xyXG4gICAgdmlld1R5cGVQcm9wZXJ0eS5saW5rKCB0aGlzLnZpZXdQcm9wZXJ0eUxpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gQWRkIGhpZ2hsaWdodCAoYnV0IG5vdCBmb3IgaWNvbnMpXHJcbiAgICBpZiAoICFvcHRpb25zLmlzSWNvbiAmJiBvcHRpb25zLnNob3dIaWdobGlnaHQgKSB7XHJcblxyXG4gICAgICB0aGlzLmhpZ2hsaWdodE5vZGUgPSBuZXcgRml4ZWRDaXJjdWl0RWxlbWVudEhpZ2hsaWdodE5vZGUoIHRoaXMgKTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSB0aGUgaGlnaGxpZ2h0IGJvdW5kcyBhZnRlciBpdCBpcyBjcmVhdGVkXHJcbiAgICAgIHRoaXMudmlld1Byb3BlcnR5TGlzdGVuZXIoIHZpZXdUeXBlUHJvcGVydHkudmFsdWUgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmhpZ2hsaWdodE5vZGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubWFya0RpcnR5TGlzdGVuZXIgPSB0aGlzLm1hcmtBc0RpcnR5LmJpbmQoIHRoaXMgKTtcclxuICAgIGNpcmN1aXRFbGVtZW50LnZlcnRleE1vdmVkRW1pdHRlci5hZGRMaXN0ZW5lciggdGhpcy5tYXJrRGlydHlMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMubW92ZVRvRnJvbnRMaXN0ZW5lciA9IHRoaXMubW92ZUZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlVG9Gcm9udC5iaW5kKCB0aGlzICk7XHJcbiAgICBjaXJjdWl0RWxlbWVudC5jb25uZWN0ZWRFbWl0dGVyLmFkZExpc3RlbmVyKCB0aGlzLm1vdmVUb0Zyb250TGlzdGVuZXIgKTtcclxuICAgIGNpcmN1aXRFbGVtZW50LnZlcnRleFNlbGVjdGVkRW1pdHRlci5hZGRMaXN0ZW5lciggdGhpcy5tb3ZlVG9Gcm9udExpc3RlbmVyICk7XHJcblxyXG4gICAgdGhpcy5waWNrYWJsZUxpc3RlbmVyID0gdGhpcy5zZXRQaWNrYWJsZS5iaW5kKCB0aGlzICk7XHJcblxyXG4gICAgLy8gTGlnaHRCdWxiU29ja2V0Tm9kZSBjYW5ub3QgZXZlciBiZSBwaWNrYWJsZSwgc28gbGV0IGl0IG9wdCBvdXQgb2YgdGhpcyBjYWxsYmFja1xyXG4gICAgb3B0aW9ucy5waWNrYWJsZSAmJiBjaXJjdWl0RWxlbWVudC5pbnRlcmFjdGl2ZVByb3BlcnR5LmxpbmsoIHRoaXMucGlja2FibGVMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuZml4ZWRDaXJjdWl0RWxlbWVudE5vZGVQaWNrYWJsZSA9IG9wdGlvbnMucGlja2FibGUgfHwgbnVsbDtcclxuXHJcbiAgICAvLyBVc2Ugd2hhdGV2ZXIgdGhlIHN0YXJ0IG5vZGUgY3VycmVudGx5IGlzIChpdCBjYW4gY2hhbmdlKSwgYW5kIGxldCB0aGUgY2lyY3VpdCBtYW5hZ2UgdGhlIGRlcGVuZGVudCB2ZXJ0aWNlc1xyXG4gICAgbGV0IGluaXRpYWxQb2ludDogVmVjdG9yMiB8IG51bGwgPSBudWxsO1xyXG4gICAgbGV0IGxhdGVzdFBvaW50OiBWZWN0b3IyIHwgbnVsbCA9IG51bGw7XHJcbiAgICBsZXQgZHJhZ2dlZCA9IGZhbHNlO1xyXG5cclxuICAgIGlmICggIW9wdGlvbnMuaXNJY29uICYmIGNpcmN1aXROb2RlICkge1xyXG5cclxuICAgICAgdGhpcy5kcmFnTGlzdGVuZXIgPSBuZXcgQ2lyY3VpdE5vZGVEcmFnTGlzdGVuZXIoIGNpcmN1aXROb2RlLCBbICgpID0+IGNpcmN1aXRFbGVtZW50LmVuZFZlcnRleFByb3BlcnR5LmdldCgpIF0sIHtcclxuICAgICAgICBzdGFydDogKCBldmVudDogU2NlbmVyeUV2ZW50ICkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5tb3ZlVG9Gcm9udCgpO1xyXG4gICAgICAgICAgaWYgKCBldmVudC5wb2ludGVyICYmIGV2ZW50LnBvaW50ZXIucG9pbnQgKSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxQb2ludCA9IGV2ZW50LnBvaW50ZXIucG9pbnQuY29weSgpO1xyXG4gICAgICAgICAgICBsYXRlc3RQb2ludCA9IGV2ZW50LnBvaW50ZXIucG9pbnQuY29weSgpO1xyXG4gICAgICAgICAgICBjaXJjdWl0RWxlbWVudC5pbnRlcmFjdGl2ZVByb3BlcnR5LmdldCgpICYmIGNpcmN1aXROb2RlLnN0YXJ0RHJhZ1ZlcnRleChcclxuICAgICAgICAgICAgICBldmVudC5wb2ludGVyLnBvaW50LFxyXG4gICAgICAgICAgICAgIGNpcmN1aXRFbGVtZW50LmVuZFZlcnRleFByb3BlcnR5LmdldCgpLFxyXG4gICAgICAgICAgICAgIGNpcmN1aXRFbGVtZW50XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGRyYWdnZWQgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkcmFnOiAoIGV2ZW50OiBTY2VuZXJ5RXZlbnQgKSA9PiB7XHJcbiAgICAgICAgICBpZiAoIGV2ZW50LnBvaW50ZXIucG9pbnQgKSB7XHJcbiAgICAgICAgICAgIGxhdGVzdFBvaW50ID0gZXZlbnQucG9pbnRlci5wb2ludC5jb3B5KCk7XHJcbiAgICAgICAgICAgIGNpcmN1aXRFbGVtZW50LmludGVyYWN0aXZlUHJvcGVydHkuZ2V0KCkgJiYgY2lyY3VpdE5vZGUuZHJhZ1ZlcnRleChcclxuICAgICAgICAgICAgICBldmVudC5wb2ludGVyLnBvaW50LFxyXG4gICAgICAgICAgICAgIGNpcmN1aXRFbGVtZW50LmVuZFZlcnRleFByb3BlcnR5LmdldCgpLFxyXG4gICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGRyYWdnZWQgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW5kOiAoKSA9PlxyXG4gICAgICAgICAgdGhpcy5lbmREcmFnKCB0aGlzLmNvbnRlbnROb2RlLCBbIGNpcmN1aXRFbGVtZW50LmVuZFZlcnRleFByb3BlcnR5LmdldCgpIF0sIHNjcmVlblZpZXchLCBjaXJjdWl0Tm9kZSxcclxuICAgICAgICAgICAgaW5pdGlhbFBvaW50ISwgbGF0ZXN0UG9pbnQhLCBkcmFnZ2VkICksXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnZHJhZ0xpc3RlbmVyJyApXHJcbiAgICAgIH0gKTtcclxuICAgICAgdGhpcy5jb250ZW50Tm9kZS5hZGRJbnB1dExpc3RlbmVyKCB0aGlzLmRyYWdMaXN0ZW5lciApO1xyXG5cclxuICAgICAgaWYgKCBvcHRpb25zLnNob3dIaWdobGlnaHQgKSB7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlSGlnaGxpZ2h0VmlzaWJpbGl0eSA9IHRoaXMuc2V0U2VsZWN0ZWRDaXJjdWl0RWxlbWVudC5iaW5kKCB0aGlzICk7XHJcbiAgICAgICAgY2lyY3VpdE5vZGUuY2lyY3VpdC5zZWxlY3Rpb25Qcm9wZXJ0eS5saW5rKCB0aGlzLnVwZGF0ZUhpZ2hsaWdodFZpc2liaWxpdHkgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUhpZ2hsaWdodFZpc2liaWxpdHkgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTaG93IGZpcmUgZm9yIGJhdHRlcmllcyBhbmQgcmVzaXN0b3JzXHJcbiAgICAgIGlmICggY2lyY3VpdEVsZW1lbnQuaXNGbGFtbWFibGUgKSB7XHJcblxyXG4gICAgICAgIHRoaXMuZmlyZU5vZGUgPSBuZXcgSW1hZ2UoIGZpcmVfcG5nLCB7IHBpY2thYmxlOiBmYWxzZSwgaW1hZ2VPcGFjaXR5OiAwLjk1IH0gKTtcclxuICAgICAgICB0aGlzLmZpcmVOb2RlLm11dGF0ZSggeyBzY2FsZTogdGhpcy5jb250ZW50Tm9kZS53aWR0aCAvIHRoaXMuZmlyZU5vZGUud2lkdGggfSApO1xyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuZmlyZU5vZGUgKTtcclxuICAgICAgICBpZiAoIHNjcmVlblZpZXcgKSB7XHJcblxyXG4gICAgICAgICAgLy8gU2hvdyBmaXJlIGluIGJhdHRlcmllcyBhbmQgcmVzaXN0b3JzIHdpdGggcmVzaXN0YW5jZSA+IDBcclxuICAgICAgICAgIHRoaXMudXBkYXRlRmlyZU11bHRpbGluayA9IE11bHRpbGluay5tdWx0aWxpbmsoIFtcclxuICAgICAgICAgICAgY2lyY3VpdEVsZW1lbnQuY3VycmVudFByb3BlcnR5LFxyXG4gICAgICAgICAgICAoIGNpcmN1aXRFbGVtZW50IGluc3RhbmNlb2YgUmVzaXN0b3IgKSA/IGNpcmN1aXRFbGVtZW50LnJlc2lzdGFuY2VQcm9wZXJ0eSA6IE9ORV9BTVBfUFJPUEVSVFksXHJcbiAgICAgICAgICAgIHNjcmVlblZpZXcubW9kZWwuaXNWYWx1ZURlcGljdGlvbkVuYWJsZWRQcm9wZXJ0eVxyXG4gICAgICAgICAgXSwgdGhpcy51cGRhdGVGaXJlVmlzaWJsZS5iaW5kKCB0aGlzICkgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ3NjcmVlblZpZXcgc2hvdWxkIGhhdmUgYmVlbiBkZWZpbmVkJyApO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVGaXJlTXVsdGlsaW5rID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5maXJlTm9kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy51cGRhdGVGaXJlTXVsdGlsaW5rID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuZHJhZ0xpc3RlbmVyID0gbnVsbDtcclxuICAgICAgdGhpcy51cGRhdGVGaXJlTXVsdGlsaW5rID0gbnVsbDtcclxuICAgICAgdGhpcy51cGRhdGVIaWdobGlnaHRWaXNpYmlsaXR5ID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgdmlldyB0eXBlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzZXRWaWV3VHlwZSggdmlld1R5cGU6IENpcmN1aXRFbGVtZW50Vmlld1R5cGUgKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnRlbnROb2RlLmNoaWxkcmVuID0gWyB2aWV3VHlwZSA9PT0gQ2lyY3VpdEVsZW1lbnRWaWV3VHlwZS5MSUZFTElLRSA/IHRoaXMubGlmZWxpa2VOb2RlIDogdGhpcy5zY2hlbWF0aWNOb2RlIF07XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBkaW1lbnNpb25zIG9mIHRoZSBoaWdobGlnaHQuICBGb3IgU3dpdGNoZXMsIHJldGFpbiB0aGUgb3JpZ2luYWwgYm91bmRzIChiaWcgZW5vdWdoIHRvIGVuY2Fwc3VsYXRlXHJcbiAgICAvLyBib3RoIHNjaGVtYXRpYyBhbmQgbGlmZWxpa2Ugb3BlbiBhbmQgY2xvc2VkKS5cclxuICAgICggdGhpcy5jaXJjdWl0RWxlbWVudC5pc1NpemVDaGFuZ2VkT25WaWV3Q2hhbmdlICYmIHRoaXMuaGlnaGxpZ2h0Tm9kZSApICYmIHRoaXMuaGlnaGxpZ2h0Tm9kZS5yZWNvbXB1dGVCb3VuZHMoIHRoaXMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE11bHRpcGxlIHVwZGF0ZXMgbWF5IGhhcHBlbiBwZXIgZnJhbWUsIHRoZXkgYXJlIGJhdGNoZWQgYW5kIHVwZGF0ZWQgb25jZSBpbiB0aGUgdmlldyBzdGVwIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UuXHJcbiAgICogQ0NLQ0xpZ2h0QnVsYk5vZGUgY2FsbHMgdXBkYXRlUmVuZGVyIGZvciBpdHMgY2hpbGQgc29ja2V0IG5vZGVcclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlUmVuZGVyKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IHRoaXMuY2lyY3VpdEVsZW1lbnQuc3RhcnRQb3NpdGlvblByb3BlcnR5LmdldCgpO1xyXG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSB0aGlzLmNpcmN1aXRFbGVtZW50LmVuZFBvc2l0aW9uUHJvcGVydHkuZ2V0KCk7XHJcblxyXG4gICAgaWYgKCBzdGFydFBvc2l0aW9uLmVxdWFscyggZW5kUG9zaXRpb24gKSApIHtcclxuXHJcbiAgICAgIC8vIFdlIGFyZSAoaG9wZWZ1bGx5ISkgaW4gdGhlIG1pZGRsZSBvZiB1cGRhdGluZyBib3RoIHZlcnRpY2VzIGFuZCB3ZSAoaG9wZWZ1bGx5ISkgd2lsbCByZWNlaXZlIGFub3RoZXIgY2FsbGJhY2tcclxuICAgICAgLy8gc2hvcnRseSB3aXRoIHRoZSBjb3JyZWN0IHZhbHVlcyBmb3IgYm90aCBzdGFydFBvc2l0aW9uIGFuZCBlbmRQb3NpdGlvblxyXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NpcmN1aXQtY29uc3RydWN0aW9uLWtpdC1jb21tb24vaXNzdWVzLzQxM1xyXG4gICAgICAvLyBhc3NlcnQgJiYgc3RlcFRpbWVyLnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLmNpcmN1aXRFbGVtZW50LnN0YXJ0UG9zaXRpb25Qcm9wZXJ0eS5nZXQoKS5lcXVhbHMoIHRoaXMuY2lyY3VpdEVsZW1lbnQuZW5kUG9zaXRpb25Qcm9wZXJ0eS5nZXQoKSApLCAndmVydGljZXMgY2Fubm90IGJlIGluIHRoZSBzYW1lIHNwb3QnICk7XHJcbiAgICAgIC8vIH0sIDAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFuZ2xlID0gVmVjdG9yMi5nZXRBbmdsZUJldHdlZW5WZWN0b3JzKCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiApO1xyXG5cclxuICAgIGNvbnN0IG1hZ25pdHVkZSA9IFZlY3RvcjIuZ2V0RGlzdGFuY2VCZXR3ZWVuVmVjdG9ycyggc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24gKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIG5vZGUgdHJhbnNmb3JtIGluIGEgc2luZ2xlIHN0ZXAsIHNlZSAjNjZcclxuICAgIG1hdHJpeC5zZXRUb1RyYW5zbGF0aW9uUm90YXRpb25Qb2ludCggc3RhcnRQb3NpdGlvbiwgYW5nbGUgKTtcclxuICAgIHRoaXMuY29udGVudE5vZGUuc2V0TWF0cml4KCBtYXRyaXggKTtcclxuXHJcbiAgICBpZiAoIHRoaXMuaGlnaGxpZ2h0Tm9kZSAmJiB0aGlzLmNpcmN1aXROb2RlIS5jaXJjdWl0LnNlbGVjdGlvblByb3BlcnR5LmdldCgpID09PSB0aGlzLmNpcmN1aXRFbGVtZW50ICkge1xyXG4gICAgICB0aGlzLmhpZ2hsaWdodE5vZGUuc2V0TWF0cml4KCBtYXRyaXggKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGZpcmUgdHJhbnNmb3JtXHJcbiAgICBjb25zdCBmbGFtZUV4dGVudCA9IDAuODtcclxuICAgIGNvbnN0IHNjYWxlID0gbWFnbml0dWRlIC8gZmlyZV9wbmcud2lkdGggKiBmbGFtZUV4dGVudDtcclxuICAgIGNvbnN0IGZsYW1lTWFyZ2luID0gKCAxIC0gZmxhbWVFeHRlbnQgKSAvIDI7XHJcbiAgICBjb25zdCBmbGFtZVggPSBtYWduaXR1ZGUgKiBmbGFtZU1hcmdpbiAvIHNjYWxlO1xyXG4gICAgY29uc3QgZmxhbWVZID0gLWZpcmVfcG5nLmhlaWdodDtcclxuICAgIG1hdHJpeC5tdWx0aXBseU1hdHJpeCggcm90YXRpb25NYXRyaXguc2V0VG9TY2FsZSggc2NhbGUgKSApXHJcbiAgICAgIC5tdWx0aXBseU1hdHJpeCggcm90YXRpb25NYXRyaXguc2V0VG9UcmFuc2xhdGlvbiggZmxhbWVYLCBmbGFtZVkgKSApO1xyXG4gICAgdGhpcy5maXJlTm9kZSAmJiB0aGlzLmZpcmVOb2RlLnNldE1hdHJpeCggbWF0cml4ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNb3ZlIHRoZSBjaXJjdWl0IGVsZW1lbnQgbm9kZSB0byB0aGUgZnJvbnRcclxuICAgKi9cclxuICBwcml2YXRlIG1vdmVGaXhlZENpcmN1aXRFbGVtZW50Tm9kZVRvRnJvbnQoKTogdm9pZCB7XHJcblxyXG4gICAgLy8gQ29tcG9uZW50cyBvdXRzaWRlIHRoZSBibGFjayBib3ggZG8gbm90IG1vdmUgaW4gZnJvbnQgb2YgdGhlIG92ZXJsYXlcclxuICAgIGlmICggdGhpcy5jaXJjdWl0RWxlbWVudC5pbnRlcmFjdGl2ZVByb3BlcnR5LmdldCgpICkge1xyXG4gICAgICB0aGlzLm1vdmVUb0Zyb250KCk7XHJcbiAgICAgIHRoaXMuY2lyY3VpdEVsZW1lbnQubW92ZVRvRnJvbnRFbWl0dGVyLmVtaXQoKTtcclxuICAgICAgdGhpcy5jaXJjdWl0RWxlbWVudC5zdGFydFZlcnRleFByb3BlcnR5LmdldCgpLnJlbGF5ZXJFbWl0dGVyLmVtaXQoKTtcclxuICAgICAgdGhpcy5jaXJjdWl0RWxlbWVudC5lbmRWZXJ0ZXhQcm9wZXJ0eS5nZXQoKS5yZWxheWVyRW1pdHRlci5lbWl0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVc2VkIGFzIGEgYm91bmQgY2FsbGJhY2sgbGlzdGVuZXIgaW4gdGhlIGNvbnN0cnVjdG9yIHRvIHVwZGF0ZSB0aGUgaGlnaGxpZ2h0IHZpc2liaWxpdHlcclxuICAgKi9cclxuICBwcml2YXRlIHNldFNlbGVjdGVkQ2lyY3VpdEVsZW1lbnQoIGNpcmN1aXRFbGVtZW50OiBDaXJjdWl0RWxlbWVudCB8IFZlcnRleCB8IG51bGwgKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMuaGlnaGxpZ2h0Tm9kZSApIHtcclxuICAgICAgY29uc3QgdmlzaWJsZSA9ICggY2lyY3VpdEVsZW1lbnQgPT09IHRoaXMuY2lyY3VpdEVsZW1lbnQgKTtcclxuICAgICAgQ0NLQ1V0aWxzLnNldEluU2NlbmVHcmFwaCggdmlzaWJsZSwgdGhpcy5jaXJjdWl0Tm9kZSEuaGlnaGxpZ2h0TGF5ZXIsIHRoaXMuaGlnaGxpZ2h0Tm9kZSApO1xyXG4gICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdzaG91bGQgaGF2ZSBhIGhpZ2hsaWdodCBub2RlJyApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcblxyXG4gICAgLy8gSW50ZXJydXB0IHRoZSBkcmFnIGV2ZW50IGlmIGl0IHdhcyBpbiBwcm9ncmVzc1xyXG4gICAgdGhpcy5kcmFnTGlzdGVuZXIgJiYgdGhpcy5kcmFnTGlzdGVuZXIuaW50ZXJydXB0KCk7XHJcbiAgICB0aGlzLmRyYWdMaXN0ZW5lciAmJiB0aGlzLmRyYWdMaXN0ZW5lci5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmNpcmN1aXRFbGVtZW50LnZlcnRleE1vdmVkRW1pdHRlci5yZW1vdmVMaXN0ZW5lciggdGhpcy5tYXJrRGlydHlMaXN0ZW5lciApO1xyXG4gICAgdGhpcy51cGRhdGVIaWdobGlnaHRWaXNpYmlsaXR5ICYmIHRoaXMuY2lyY3VpdE5vZGUhLmNpcmN1aXQuc2VsZWN0aW9uUHJvcGVydHkudW5saW5rKCB0aGlzLnVwZGF0ZUhpZ2hsaWdodFZpc2liaWxpdHkgKTtcclxuICAgIHRoaXMuY2lyY3VpdEVsZW1lbnQuY29ubmVjdGVkRW1pdHRlci5yZW1vdmVMaXN0ZW5lciggdGhpcy5tb3ZlVG9Gcm9udExpc3RlbmVyICk7XHJcbiAgICB0aGlzLmNpcmN1aXRFbGVtZW50LnZlcnRleFNlbGVjdGVkRW1pdHRlci5yZW1vdmVMaXN0ZW5lciggdGhpcy5tb3ZlVG9Gcm9udExpc3RlbmVyICk7XHJcbiAgICB0aGlzLmZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlUGlja2FibGUgJiYgdGhpcy5jaXJjdWl0RWxlbWVudC5pbnRlcmFjdGl2ZVByb3BlcnR5LnVubGluayggdGhpcy5waWNrYWJsZUxpc3RlbmVyICk7XHJcbiAgICB0aGlzLmNpcmN1aXROb2RlICYmIHRoaXMuaGlnaGxpZ2h0Tm9kZSAmJiBDQ0tDVXRpbHMuc2V0SW5TY2VuZUdyYXBoKCBmYWxzZSwgdGhpcy5jaXJjdWl0Tm9kZS5oaWdobGlnaHRMYXllciwgdGhpcy5oaWdobGlnaHROb2RlICk7XHJcbiAgICB0aGlzLnZpZXdUeXBlUHJvcGVydHkudW5saW5rKCB0aGlzLnZpZXdQcm9wZXJ0eUxpc3RlbmVyICk7XHJcblxyXG4gICAgaWYgKCAhdGhpcy5pc0ljb24gJiYgdGhpcy51cGRhdGVGaXJlTXVsdGlsaW5rICkge1xyXG4gICAgICBNdWx0aWxpbmsudW5tdWx0aWxpbmsoIHRoaXMudXBkYXRlRmlyZU11bHRpbGluayApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERldGFjaCB0aGUgY2hpbGQgbm9kZXMgd2hpY2ggYXJlIHJldXNlZCAoc28gdGhleSBkb24ndCBoYXZlIGEgX3BhcmVudHMgcmVmZXJlbmNlKVxyXG4gICAgdGhpcy5jb250ZW50Tm9kZS5kaXNwb3NlKCk7XHJcblxyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGlkZSBvciBzaG93IHRoZSBmaXJlIGRlcGVuZGluZyBvbiB2YXJpb3VzIHBhcmFtZXRlcnMsIGZvciBsaXN0ZW5lciBiaW5kLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgdXBkYXRlRmlyZVZpc2libGUoIGN1cnJlbnQ6IG51bWJlciwgcmVzaXN0YW5jZTogbnVtYmVyLCBpc1ZhbHVlRGVwaWN0aW9uRW5hYmxlZDogYm9vbGVhbiApOiB2b2lkIHtcclxuICAgIHRoaXMuZmlyZU5vZGUhLnZpc2libGUgPSBpc0ZpcmVTaG93biggY3VycmVudCwgaXNWYWx1ZURlcGljdGlvbkVuYWJsZWQgKSAmJiByZXNpc3RhbmNlID49IDFFLTg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBib3VuZHMgZm9yIHRoZSBoaWdobGlnaHQgcmVjdGFuZ2xlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRIaWdobGlnaHRCb3VuZHMoKTogQm91bmRzMiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Tm9kZS5sb2NhbEJvdW5kcy5kaWxhdGVkKCBISUdITElHSFRfUEFERElORyApO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5yZWdpc3RlciggJ0ZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlJywgRml4ZWRDaXJjdWl0RWxlbWVudE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLG9DQUFvQztBQUUvRCxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLE9BQU8sTUFBTSw0QkFBNEI7QUFDaEQsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLFFBQXNCLGdDQUFnQztBQUUxRSxPQUFPQyxRQUFRLE1BQU0sMEJBQTBCO0FBQy9DLE9BQU9DLFNBQVMsTUFBTSxpQkFBaUI7QUFDdkMsT0FBT0MsNEJBQTRCLE1BQU0sb0NBQW9DO0FBQzdFLE9BQU9DLHNCQUFzQixNQUFNLG9DQUFvQztBQUV2RSxPQUFPQyxRQUFRLE1BQU0sc0JBQXNCO0FBRTNDLE9BQU9DLGtCQUFrQixNQUFxQyx5QkFBeUI7QUFFdkYsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBQ2xFLE9BQU9DLGdDQUFnQyxNQUFNLHVDQUF1QztBQUVwRixPQUFPQyxTQUFTLE1BQTRCLCtCQUErQjtBQUUzRSxPQUFPQyxTQUFTLE1BQU0sb0NBQW9DO0FBRzFEO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLElBQUlkLE9BQU8sQ0FBQyxDQUFDO0FBQzVCLE1BQU1lLGNBQWMsR0FBRyxJQUFJZixPQUFPLENBQUMsQ0FBQztBQUNwQyxNQUFNZ0IsY0FBYyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzNCLE1BQU1DLGdCQUFnQixHQUFHLElBQUlsQixjQUFjLENBQUUsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQUNs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