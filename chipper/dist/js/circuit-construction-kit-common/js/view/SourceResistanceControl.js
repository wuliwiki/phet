// Copyright 2020-2023, University of Colorado Boulder

/**
 * Controls for showing and changing the battery internal resistance.  Exists for the life of the sim and hence does not
 * require a dispose implementation.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import Utils from '../../../dot/js/Utils.js';
import { Text, VBox } from '../../../scenery/js/imports.js';
import HSlider from '../../../sun/js/HSlider.js';
import CCKCConstants from '../CCKCConstants.js';
import CircuitConstructionKitCommonStrings from '../CircuitConstructionKitCommonStrings.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import { combineOptions } from '../../../phet-core/js/optionize.js';
import PatternStringProperty from '../../../axon/js/PatternStringProperty.js';
import CCKCColors from './CCKCColors.js';
const resistanceOhmsSymbolStringProperty = CircuitConstructionKitCommonStrings.resistanceOhmsSymbolStringProperty;
export default class SourceResistanceControl extends VBox {
  /**
   * @param sourceResistanceProperty - axon Property for the internal resistance of all Batteries
   * @param alignGroup
   * @param batteryResistanceControlString
   * @param titleConfig
   * @param tandem
   */
  constructor(sourceResistanceProperty, alignGroup, batteryResistanceControlString, titleConfig, tandem) {
    /**
     * Creates label to be used for slider
     */
    const createLabel = (string, tandem) => new Text(string, {
      fontSize: 12,
      fill: CCKCColors.textFillProperty,
      tandem: tandem,
      maxWidth: 45
    });
    const range = CCKCConstants.BATTERY_RESISTANCE_RANGE;
    const midpoint = (range.max + range.min) / 2;
    const slider = new HSlider(sourceResistanceProperty, range, {
      trackSize: CCKCConstants.SLIDER_TRACK_SIZE,
      thumbSize: CCKCConstants.THUMB_SIZE,
      majorTickLength: CCKCConstants.MAJOR_TICK_LENGTH,
      minorTickLength: CCKCConstants.MINOR_TICK_LENGTH,
      // Snap to the nearest whole number.
      constrainValue: value => range.constrainValue(Utils.roundSymmetric(value)),
      phetioVisiblePropertyInstrumented: false,
      tandem: tandem.createTandem('slider')
    });
    slider.addMajorTick(range.min, createLabel(CircuitConstructionKitCommonStrings.tinyStringProperty, tandem.createTandem('tinyLabelText')));
    slider.addMajorTick(midpoint);
    slider.addMajorTick(range.max, createLabel(new PatternStringProperty(resistanceOhmsSymbolStringProperty, {
      resistance: Utils.toFixed(range.max, 0)
    }, {
      tandem: tandem.createTandem('maxLabelText').createTandem(Text.STRING_PROPERTY_TANDEM_NAME)
    }), tandem.createTandem('maxLabelText')));
    for (let i = range.min + 1; i < range.max; i++) {
      if (Math.abs(i - midpoint) > 1E-6) {
        slider.addMinorTick(i);
      }
    }
    const titleNode = new Text(batteryResistanceControlString, combineOptions({
      fill: CCKCColors.textFillProperty,
      tandem: tandem.createTandem('titleText')
    }, titleConfig));
    super({
      children: [titleNode, slider],
      tandem: tandem,
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    });
  }
}
circuitConstructionKitCommon.register('SourceResistanceControl', SourceResistanceControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlRleHQiLCJWQm94IiwiSFNsaWRlciIsIkNDS0NDb25zdGFudHMiLCJDaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uU3RyaW5ncyIsImNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24iLCJjb21iaW5lT3B0aW9ucyIsIlBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsIkNDS0NDb2xvcnMiLCJyZXNpc3RhbmNlT2htc1N5bWJvbFN0cmluZ1Byb3BlcnR5IiwiU291cmNlUmVzaXN0YW5jZUNvbnRyb2wiLCJjb25zdHJ1Y3RvciIsInNvdXJjZVJlc2lzdGFuY2VQcm9wZXJ0eSIsImFsaWduR3JvdXAiLCJiYXR0ZXJ5UmVzaXN0YW5jZUNvbnRyb2xTdHJpbmciLCJ0aXRsZUNvbmZpZyIsInRhbmRlbSIsImNyZWF0ZUxhYmVsIiwic3RyaW5nIiwiZm9udFNpemUiLCJmaWxsIiwidGV4dEZpbGxQcm9wZXJ0eSIsIm1heFdpZHRoIiwicmFuZ2UiLCJCQVRURVJZX1JFU0lTVEFOQ0VfUkFOR0UiLCJtaWRwb2ludCIsIm1heCIsIm1pbiIsInNsaWRlciIsInRyYWNrU2l6ZSIsIlNMSURFUl9UUkFDS19TSVpFIiwidGh1bWJTaXplIiwiVEhVTUJfU0laRSIsIm1ham9yVGlja0xlbmd0aCIsIk1BSk9SX1RJQ0tfTEVOR1RIIiwibWlub3JUaWNrTGVuZ3RoIiwiTUlOT1JfVElDS19MRU5HVEgiLCJjb25zdHJhaW5WYWx1ZSIsInZhbHVlIiwicm91bmRTeW1tZXRyaWMiLCJwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQiLCJjcmVhdGVUYW5kZW0iLCJhZGRNYWpvclRpY2siLCJ0aW55U3RyaW5nUHJvcGVydHkiLCJyZXNpc3RhbmNlIiwidG9GaXhlZCIsIlNUUklOR19QUk9QRVJUWV9UQU5ERU1fTkFNRSIsImkiLCJNYXRoIiwiYWJzIiwiYWRkTWlub3JUaWNrIiwidGl0bGVOb2RlIiwiY2hpbGRyZW4iLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvRmVhdHVyZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNvdXJjZVJlc2lzdGFuY2VDb250cm9sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2xzIGZvciBzaG93aW5nIGFuZCBjaGFuZ2luZyB0aGUgYmF0dGVyeSBpbnRlcm5hbCByZXNpc3RhbmNlLiAgRXhpc3RzIGZvciB0aGUgbGlmZSBvZiB0aGUgc2ltIGFuZCBoZW5jZSBkb2VzIG5vdFxyXG4gKiByZXF1aXJlIGEgZGlzcG9zZSBpbXBsZW1lbnRhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBEZW56ZWxsIEJhcm5ldHQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IEFsaWduR3JvdXAsIFRleHQsIFRleHRPcHRpb25zLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEhTbGlkZXIgZnJvbSAnLi4vLi4vLi4vc3VuL2pzL0hTbGlkZXIuanMnO1xyXG5pbXBvcnQgQ0NLQ0NvbnN0YW50cyBmcm9tICcuLi9DQ0tDQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb25TdHJpbmdzIGZyb20gJy4uL0NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24gZnJvbSAnLi4vY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGF0dGVyblN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUGF0dGVyblN0cmluZ1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IENDS0NDb2xvcnMgZnJvbSAnLi9DQ0tDQ29sb3JzLmpzJztcclxuXHJcbmNvbnN0IHJlc2lzdGFuY2VPaG1zU3ltYm9sU3RyaW5nUHJvcGVydHkgPSBDaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uU3RyaW5ncy5yZXNpc3RhbmNlT2htc1N5bWJvbFN0cmluZ1Byb3BlcnR5O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU291cmNlUmVzaXN0YW5jZUNvbnRyb2wgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHNvdXJjZVJlc2lzdGFuY2VQcm9wZXJ0eSAtIGF4b24gUHJvcGVydHkgZm9yIHRoZSBpbnRlcm5hbCByZXNpc3RhbmNlIG9mIGFsbCBCYXR0ZXJpZXNcclxuICAgKiBAcGFyYW0gYWxpZ25Hcm91cFxyXG4gICAqIEBwYXJhbSBiYXR0ZXJ5UmVzaXN0YW5jZUNvbnRyb2xTdHJpbmdcclxuICAgKiBAcGFyYW0gdGl0bGVDb25maWdcclxuICAgKiBAcGFyYW0gdGFuZGVtXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzb3VyY2VSZXNpc3RhbmNlUHJvcGVydHk6IFByb3BlcnR5PG51bWJlcj4sIGFsaWduR3JvdXA6IEFsaWduR3JvdXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICBiYXR0ZXJ5UmVzaXN0YW5jZUNvbnRyb2xTdHJpbmc6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sIHRpdGxlQ29uZmlnOiBUZXh0T3B0aW9ucywgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGxhYmVsIHRvIGJlIHVzZWQgZm9yIHNsaWRlclxyXG4gICAgICovXHJcbiAgICBjb25zdCBjcmVhdGVMYWJlbCA9ICggc3RyaW5nOiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCB0YW5kZW06IFRhbmRlbSApID0+IG5ldyBUZXh0KCBzdHJpbmcsIHtcclxuICAgICAgZm9udFNpemU6IDEyLFxyXG4gICAgICBmaWxsOiBDQ0tDQ29sb3JzLnRleHRGaWxsUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBtYXhXaWR0aDogNDVcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCByYW5nZSA9IENDS0NDb25zdGFudHMuQkFUVEVSWV9SRVNJU1RBTkNFX1JBTkdFO1xyXG4gICAgY29uc3QgbWlkcG9pbnQgPSAoIHJhbmdlLm1heCArIHJhbmdlLm1pbiApIC8gMjtcclxuICAgIGNvbnN0IHNsaWRlciA9IG5ldyBIU2xpZGVyKCBzb3VyY2VSZXNpc3RhbmNlUHJvcGVydHksIHJhbmdlLCB7XHJcbiAgICAgIHRyYWNrU2l6ZTogQ0NLQ0NvbnN0YW50cy5TTElERVJfVFJBQ0tfU0laRSxcclxuICAgICAgdGh1bWJTaXplOiBDQ0tDQ29uc3RhbnRzLlRIVU1CX1NJWkUsXHJcbiAgICAgIG1ham9yVGlja0xlbmd0aDogQ0NLQ0NvbnN0YW50cy5NQUpPUl9USUNLX0xFTkdUSCxcclxuICAgICAgbWlub3JUaWNrTGVuZ3RoOiBDQ0tDQ29uc3RhbnRzLk1JTk9SX1RJQ0tfTEVOR1RILFxyXG5cclxuICAgICAgLy8gU25hcCB0byB0aGUgbmVhcmVzdCB3aG9sZSBudW1iZXIuXHJcbiAgICAgIGNvbnN0cmFpblZhbHVlOiAoIHZhbHVlOiBudW1iZXIgKSA9PiByYW5nZS5jb25zdHJhaW5WYWx1ZSggVXRpbHMucm91bmRTeW1tZXRyaWMoIHZhbHVlICkgKSxcclxuICAgICAgcGhldGlvVmlzaWJsZVByb3BlcnR5SW5zdHJ1bWVudGVkOiBmYWxzZSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2xpZGVyJyApXHJcbiAgICB9ICk7XHJcbiAgICBzbGlkZXIuYWRkTWFqb3JUaWNrKCByYW5nZS5taW4sIGNyZWF0ZUxhYmVsKCBDaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uU3RyaW5ncy50aW55U3RyaW5nUHJvcGVydHksIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aW55TGFiZWxUZXh0JyApICkgKTtcclxuICAgIHNsaWRlci5hZGRNYWpvclRpY2soIG1pZHBvaW50ICk7XHJcbiAgICBzbGlkZXIuYWRkTWFqb3JUaWNrKCByYW5nZS5tYXgsIGNyZWF0ZUxhYmVsKCBuZXcgUGF0dGVyblN0cmluZ1Byb3BlcnR5KCByZXNpc3RhbmNlT2htc1N5bWJvbFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIHJlc2lzdGFuY2U6IFV0aWxzLnRvRml4ZWQoIHJhbmdlLm1heCwgMCApXHJcbiAgICB9LCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21heExhYmVsVGV4dCcgKS5jcmVhdGVUYW5kZW0oIFRleHQuU1RSSU5HX1BST1BFUlRZX1RBTkRFTV9OQU1FIClcclxuICAgIH0gKSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21heExhYmVsVGV4dCcgKSApICk7XHJcblxyXG4gICAgZm9yICggbGV0IGkgPSByYW5nZS5taW4gKyAxOyBpIDwgcmFuZ2UubWF4OyBpKysgKSB7XHJcbiAgICAgIGlmICggTWF0aC5hYnMoIGkgLSBtaWRwb2ludCApID4gMUUtNiApIHtcclxuICAgICAgICBzbGlkZXIuYWRkTWlub3JUaWNrKCBpICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0aXRsZU5vZGUgPSBuZXcgVGV4dCggYmF0dGVyeVJlc2lzdGFuY2VDb250cm9sU3RyaW5nLCBjb21iaW5lT3B0aW9uczxUZXh0T3B0aW9ucz4oIHtcclxuICAgICAgZmlsbDogQ0NLQ0NvbG9ycy50ZXh0RmlsbFByb3BlcnR5LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aXRsZVRleHQnIClcclxuICAgIH0sIHRpdGxlQ29uZmlnICkgKTtcclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIHRpdGxlTm9kZSwgc2xpZGVyIF0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICB2aXNpYmxlUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5yZWdpc3RlciggJ1NvdXJjZVJlc2lzdGFuY2VDb250cm9sJywgU291cmNlUmVzaXN0YW5jZUNvbnRyb2wgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSwwQkFBMEI7QUFDNUMsU0FBcUJDLElBQUksRUFBZUMsSUFBSSxRQUFRLGdDQUFnQztBQUNwRixPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLGFBQWEsTUFBTSxxQkFBcUI7QUFDL0MsT0FBT0MsbUNBQW1DLE1BQU0sMkNBQTJDO0FBQzNGLE9BQU9DLDRCQUE0QixNQUFNLG9DQUFvQztBQUk3RSxTQUFTQyxjQUFjLFFBQVEsb0NBQW9DO0FBQ25FLE9BQU9DLHFCQUFxQixNQUFNLDJDQUEyQztBQUM3RSxPQUFPQyxVQUFVLE1BQU0saUJBQWlCO0FBRXhDLE1BQU1DLGtDQUFrQyxHQUFHTCxtQ0FBbUMsQ0FBQ0ssa0NBQWtDO0FBRWpILGVBQWUsTUFBTUMsdUJBQXVCLFNBQVNULElBQUksQ0FBQztFQUV4RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTVSxXQUFXQSxDQUFFQyx3QkFBMEMsRUFBRUMsVUFBc0IsRUFDbEVDLDhCQUF5RCxFQUFFQyxXQUF3QixFQUFFQyxNQUFjLEVBQUc7SUFFeEg7QUFDSjtBQUNBO0lBQ0ksTUFBTUMsV0FBVyxHQUFHQSxDQUFFQyxNQUFpQyxFQUFFRixNQUFjLEtBQU0sSUFBSWhCLElBQUksQ0FBRWtCLE1BQU0sRUFBRTtNQUM3RkMsUUFBUSxFQUFFLEVBQUU7TUFDWkMsSUFBSSxFQUFFWixVQUFVLENBQUNhLGdCQUFnQjtNQUNqQ0wsTUFBTSxFQUFFQSxNQUFNO01BQ2RNLFFBQVEsRUFBRTtJQUNaLENBQUUsQ0FBQztJQUVILE1BQU1DLEtBQUssR0FBR3BCLGFBQWEsQ0FBQ3FCLHdCQUF3QjtJQUNwRCxNQUFNQyxRQUFRLEdBQUcsQ0FBRUYsS0FBSyxDQUFDRyxHQUFHLEdBQUdILEtBQUssQ0FBQ0ksR0FBRyxJQUFLLENBQUM7SUFDOUMsTUFBTUMsTUFBTSxHQUFHLElBQUkxQixPQUFPLENBQUVVLHdCQUF3QixFQUFFVyxLQUFLLEVBQUU7TUFDM0RNLFNBQVMsRUFBRTFCLGFBQWEsQ0FBQzJCLGlCQUFpQjtNQUMxQ0MsU0FBUyxFQUFFNUIsYUFBYSxDQUFDNkIsVUFBVTtNQUNuQ0MsZUFBZSxFQUFFOUIsYUFBYSxDQUFDK0IsaUJBQWlCO01BQ2hEQyxlQUFlLEVBQUVoQyxhQUFhLENBQUNpQyxpQkFBaUI7TUFFaEQ7TUFDQUMsY0FBYyxFQUFJQyxLQUFhLElBQU1mLEtBQUssQ0FBQ2MsY0FBYyxDQUFFdEMsS0FBSyxDQUFDd0MsY0FBYyxDQUFFRCxLQUFNLENBQUUsQ0FBQztNQUMxRkUsaUNBQWlDLEVBQUUsS0FBSztNQUN4Q3hCLE1BQU0sRUFBRUEsTUFBTSxDQUFDeUIsWUFBWSxDQUFFLFFBQVM7SUFDeEMsQ0FBRSxDQUFDO0lBQ0hiLE1BQU0sQ0FBQ2MsWUFBWSxDQUFFbkIsS0FBSyxDQUFDSSxHQUFHLEVBQUVWLFdBQVcsQ0FBRWIsbUNBQW1DLENBQUN1QyxrQkFBa0IsRUFBRTNCLE1BQU0sQ0FBQ3lCLFlBQVksQ0FBRSxlQUFnQixDQUFFLENBQUUsQ0FBQztJQUMvSWIsTUFBTSxDQUFDYyxZQUFZLENBQUVqQixRQUFTLENBQUM7SUFDL0JHLE1BQU0sQ0FBQ2MsWUFBWSxDQUFFbkIsS0FBSyxDQUFDRyxHQUFHLEVBQUVULFdBQVcsQ0FBRSxJQUFJVixxQkFBcUIsQ0FBRUUsa0NBQWtDLEVBQUU7TUFDMUdtQyxVQUFVLEVBQUU3QyxLQUFLLENBQUM4QyxPQUFPLENBQUV0QixLQUFLLENBQUNHLEdBQUcsRUFBRSxDQUFFO0lBQzFDLENBQUMsRUFBRTtNQUNEVixNQUFNLEVBQUVBLE1BQU0sQ0FBQ3lCLFlBQVksQ0FBRSxjQUFlLENBQUMsQ0FBQ0EsWUFBWSxDQUFFekMsSUFBSSxDQUFDOEMsMkJBQTRCO0lBQy9GLENBQUUsQ0FBQyxFQUFFOUIsTUFBTSxDQUFDeUIsWUFBWSxDQUFFLGNBQWUsQ0FBRSxDQUFFLENBQUM7SUFFOUMsS0FBTSxJQUFJTSxDQUFDLEdBQUd4QixLQUFLLENBQUNJLEdBQUcsR0FBRyxDQUFDLEVBQUVvQixDQUFDLEdBQUd4QixLQUFLLENBQUNHLEdBQUcsRUFBRXFCLENBQUMsRUFBRSxFQUFHO01BQ2hELElBQUtDLElBQUksQ0FBQ0MsR0FBRyxDQUFFRixDQUFDLEdBQUd0QixRQUFTLENBQUMsR0FBRyxJQUFJLEVBQUc7UUFDckNHLE1BQU0sQ0FBQ3NCLFlBQVksQ0FBRUgsQ0FBRSxDQUFDO01BQzFCO0lBQ0Y7SUFFQSxNQUFNSSxTQUFTLEdBQUcsSUFBSW5ELElBQUksQ0FBRWMsOEJBQThCLEVBQUVSLGNBQWMsQ0FBZTtNQUN2RmMsSUFBSSxFQUFFWixVQUFVLENBQUNhLGdCQUFnQjtNQUNqQ0wsTUFBTSxFQUFFQSxNQUFNLENBQUN5QixZQUFZLENBQUUsV0FBWTtJQUMzQyxDQUFDLEVBQUUxQixXQUFZLENBQUUsQ0FBQztJQUNsQixLQUFLLENBQUU7TUFDTHFDLFFBQVEsRUFBRSxDQUFFRCxTQUFTLEVBQUV2QixNQUFNLENBQUU7TUFDL0JaLE1BQU0sRUFBRUEsTUFBTTtNQUNkcUMsc0JBQXNCLEVBQUU7UUFDdEJDLGNBQWMsRUFBRTtNQUNsQjtJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWpELDRCQUE0QixDQUFDa0QsUUFBUSxDQUFFLHlCQUF5QixFQUFFN0MsdUJBQXdCLENBQUMifQ==