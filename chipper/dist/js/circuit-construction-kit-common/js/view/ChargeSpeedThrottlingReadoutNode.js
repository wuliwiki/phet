// Copyright 2016-2023, University of Colorado Boulder

/**
 * This shows a readout that indicates the speed of the simulation is reduced (to prevent a strobe effect). Exists for
 * the life of the sim and hence does not require a dispose implementation.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Utils from '../../../dot/js/Utils.js';
import StringUtils from '../../../phetcommon/js/util/StringUtils.js';
import { Text } from '../../../scenery/js/imports.js';
import CircuitConstructionKitCommonStrings from '../CircuitConstructionKitCommonStrings.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import Multilink from '../../../axon/js/Multilink.js';
const animationSpeedLimitReachedStringProperty = CircuitConstructionKitCommonStrings.animationSpeedLimitReachedStringProperty;
export default class ChargeSpeedThrottlingReadoutNode extends Text {
  /**
   * @param timeScaleProperty - the fractional rate of time passage (1.0 = full speed)
   * @param showCurrentProperty - true if currents are visible
   * @param isValueDepictionEnabledProperty - true if the explore screen is running
   */
  constructor(timeScaleProperty, showCurrentProperty, isValueDepictionEnabledProperty) {
    super('', {
      // Reduce the width of the animation speed limit reached so it doesn't overlap controls
      // see https://github.com/phetsims/circuit-construction-kit-dc/issues/118
      fontSize: 16,
      maxWidth: 530
    });
    Multilink.multilink([timeScaleProperty, showCurrentProperty, isValueDepictionEnabledProperty, animationSpeedLimitReachedStringProperty], (timeScale, showCurrent, isValueDepictionEnabled) => {
      const percent = timeScale * 100;
      const isThrottled = percent < 99.5;
      const fixed = timeScale < 0.01 ? '< 1' : Utils.toFixed(percent, 0);
      this.setString(StringUtils.fillIn(animationSpeedLimitReachedStringProperty, {
        percent: fixed
      }));

      // Only show the throttling message if the speed is less than 100% and charges are visible
      this.visible = isThrottled && showCurrent && isValueDepictionEnabled;
    });
  }
}
circuitConstructionKitCommon.register('ChargeSpeedThrottlingReadoutNode', ChargeSpeedThrottlingReadoutNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlN0cmluZ1V0aWxzIiwiVGV4dCIsIkNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb25TdHJpbmdzIiwiY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbiIsIk11bHRpbGluayIsImFuaW1hdGlvblNwZWVkTGltaXRSZWFjaGVkU3RyaW5nUHJvcGVydHkiLCJDaGFyZ2VTcGVlZFRocm90dGxpbmdSZWFkb3V0Tm9kZSIsImNvbnN0cnVjdG9yIiwidGltZVNjYWxlUHJvcGVydHkiLCJzaG93Q3VycmVudFByb3BlcnR5IiwiaXNWYWx1ZURlcGljdGlvbkVuYWJsZWRQcm9wZXJ0eSIsImZvbnRTaXplIiwibWF4V2lkdGgiLCJtdWx0aWxpbmsiLCJ0aW1lU2NhbGUiLCJzaG93Q3VycmVudCIsImlzVmFsdWVEZXBpY3Rpb25FbmFibGVkIiwicGVyY2VudCIsImlzVGhyb3R0bGVkIiwiZml4ZWQiLCJ0b0ZpeGVkIiwic2V0U3RyaW5nIiwiZmlsbEluIiwidmlzaWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2hhcmdlU3BlZWRUaHJvdHRsaW5nUmVhZG91dE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBzaG93cyBhIHJlYWRvdXQgdGhhdCBpbmRpY2F0ZXMgdGhlIHNwZWVkIG9mIHRoZSBzaW11bGF0aW9uIGlzIHJlZHVjZWQgKHRvIHByZXZlbnQgYSBzdHJvYmUgZWZmZWN0KS4gRXhpc3RzIGZvclxyXG4gKiB0aGUgbGlmZSBvZiB0aGUgc2ltIGFuZCBoZW5jZSBkb2VzIG5vdCByZXF1aXJlIGEgZGlzcG9zZSBpbXBsZW1lbnRhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uU3RyaW5ncyBmcm9tICcuLi9DaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIGZyb20gJy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24uanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbmNvbnN0IGFuaW1hdGlvblNwZWVkTGltaXRSZWFjaGVkU3RyaW5nUHJvcGVydHkgPSBDaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uU3RyaW5ncy5hbmltYXRpb25TcGVlZExpbWl0UmVhY2hlZFN0cmluZ1Byb3BlcnR5O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcmdlU3BlZWRUaHJvdHRsaW5nUmVhZG91dE5vZGUgZXh0ZW5kcyBUZXh0IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHRpbWVTY2FsZVByb3BlcnR5IC0gdGhlIGZyYWN0aW9uYWwgcmF0ZSBvZiB0aW1lIHBhc3NhZ2UgKDEuMCA9IGZ1bGwgc3BlZWQpXHJcbiAgICogQHBhcmFtIHNob3dDdXJyZW50UHJvcGVydHkgLSB0cnVlIGlmIGN1cnJlbnRzIGFyZSB2aXNpYmxlXHJcbiAgICogQHBhcmFtIGlzVmFsdWVEZXBpY3Rpb25FbmFibGVkUHJvcGVydHkgLSB0cnVlIGlmIHRoZSBleHBsb3JlIHNjcmVlbiBpcyBydW5uaW5nXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0aW1lU2NhbGVQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgc2hvd0N1cnJlbnRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIGlzVmFsdWVEZXBpY3Rpb25FbmFibGVkUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+ICkge1xyXG4gICAgc3VwZXIoICcnLCB7XHJcblxyXG4gICAgICAvLyBSZWR1Y2UgdGhlIHdpZHRoIG9mIHRoZSBhbmltYXRpb24gc3BlZWQgbGltaXQgcmVhY2hlZCBzbyBpdCBkb2Vzbid0IG92ZXJsYXAgY29udHJvbHNcclxuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jaXJjdWl0LWNvbnN0cnVjdGlvbi1raXQtZGMvaXNzdWVzLzExOFxyXG4gICAgICBmb250U2l6ZTogMTYsXHJcbiAgICAgIG1heFdpZHRoOiA1MzBcclxuICAgIH0gKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHRpbWVTY2FsZVByb3BlcnR5LCBzaG93Q3VycmVudFByb3BlcnR5LCBpc1ZhbHVlRGVwaWN0aW9uRW5hYmxlZFByb3BlcnR5LCBhbmltYXRpb25TcGVlZExpbWl0UmVhY2hlZFN0cmluZ1Byb3BlcnR5IF0sXHJcbiAgICAgICggdGltZVNjYWxlLCBzaG93Q3VycmVudCwgaXNWYWx1ZURlcGljdGlvbkVuYWJsZWQgKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGVyY2VudCA9IHRpbWVTY2FsZSAqIDEwMDtcclxuICAgICAgICBjb25zdCBpc1Rocm90dGxlZCA9IHBlcmNlbnQgPCA5OS41O1xyXG4gICAgICAgIGNvbnN0IGZpeGVkID0gdGltZVNjYWxlIDwgMC4wMSA/ICc8IDEnIDogVXRpbHMudG9GaXhlZCggcGVyY2VudCwgMCApO1xyXG4gICAgICAgIHRoaXMuc2V0U3RyaW5nKCBTdHJpbmdVdGlscy5maWxsSW4oIGFuaW1hdGlvblNwZWVkTGltaXRSZWFjaGVkU3RyaW5nUHJvcGVydHksIHsgcGVyY2VudDogZml4ZWQgfSApICk7XHJcblxyXG4gICAgICAgIC8vIE9ubHkgc2hvdyB0aGUgdGhyb3R0bGluZyBtZXNzYWdlIGlmIHRoZSBzcGVlZCBpcyBsZXNzIHRoYW4gMTAwJSBhbmQgY2hhcmdlcyBhcmUgdmlzaWJsZVxyXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IGlzVGhyb3R0bGVkICYmIHNob3dDdXJyZW50ICYmIGlzVmFsdWVEZXBpY3Rpb25FbmFibGVkO1xyXG4gICAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLnJlZ2lzdGVyKCAnQ2hhcmdlU3BlZWRUaHJvdHRsaW5nUmVhZG91dE5vZGUnLCBDaGFyZ2VTcGVlZFRocm90dGxpbmdSZWFkb3V0Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLEtBQUssTUFBTSwwQkFBMEI7QUFDNUMsT0FBT0MsV0FBVyxNQUFNLDRDQUE0QztBQUNwRSxTQUFTQyxJQUFJLFFBQVEsZ0NBQWdDO0FBQ3JELE9BQU9DLG1DQUFtQyxNQUFNLDJDQUEyQztBQUMzRixPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7QUFDN0UsT0FBT0MsU0FBUyxNQUFNLCtCQUErQjtBQUVyRCxNQUFNQyx3Q0FBd0MsR0FBR0gsbUNBQW1DLENBQUNHLHdDQUF3QztBQUU3SCxlQUFlLE1BQU1DLGdDQUFnQyxTQUFTTCxJQUFJLENBQUM7RUFFakU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNTTSxXQUFXQSxDQUFFQyxpQkFBbUMsRUFBRUMsbUJBQXNDLEVBQUVDLCtCQUFrRCxFQUFHO0lBQ3BKLEtBQUssQ0FBRSxFQUFFLEVBQUU7TUFFVDtNQUNBO01BQ0FDLFFBQVEsRUFBRSxFQUFFO01BQ1pDLFFBQVEsRUFBRTtJQUNaLENBQUUsQ0FBQztJQUVIUixTQUFTLENBQUNTLFNBQVMsQ0FBRSxDQUFFTCxpQkFBaUIsRUFBRUMsbUJBQW1CLEVBQUVDLCtCQUErQixFQUFFTCx3Q0FBd0MsQ0FBRSxFQUN4SSxDQUFFUyxTQUFTLEVBQUVDLFdBQVcsRUFBRUMsdUJBQXVCLEtBQU07TUFDckQsTUFBTUMsT0FBTyxHQUFHSCxTQUFTLEdBQUcsR0FBRztNQUMvQixNQUFNSSxXQUFXLEdBQUdELE9BQU8sR0FBRyxJQUFJO01BQ2xDLE1BQU1FLEtBQUssR0FBR0wsU0FBUyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUdmLEtBQUssQ0FBQ3FCLE9BQU8sQ0FBRUgsT0FBTyxFQUFFLENBQUUsQ0FBQztNQUNwRSxJQUFJLENBQUNJLFNBQVMsQ0FBRXJCLFdBQVcsQ0FBQ3NCLE1BQU0sQ0FBRWpCLHdDQUF3QyxFQUFFO1FBQUVZLE9BQU8sRUFBRUU7TUFBTSxDQUFFLENBQUUsQ0FBQzs7TUFFcEc7TUFDQSxJQUFJLENBQUNJLE9BQU8sR0FBR0wsV0FBVyxJQUFJSCxXQUFXLElBQUlDLHVCQUF1QjtJQUN0RSxDQUFFLENBQUM7RUFDUDtBQUNGO0FBRUFiLDRCQUE0QixDQUFDcUIsUUFBUSxDQUFFLGtDQUFrQyxFQUFFbEIsZ0NBQWlDLENBQUMifQ==