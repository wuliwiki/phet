// Copyright 2016-2023, University of Colorado Boulder

/**
 * Abstract base class for WireNode and FixedCircuitElementNode
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Node } from '../../../scenery/js/imports.js';
import CCKCConstants from '../CCKCConstants.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import optionize from '../../../phet-core/js/optionize.js';
export default class CircuitElementNode extends Node {
  /**
   * @param circuitElement - the CircuitElement to be rendered
   * @param circuit - the circuit which the element can be removed from or null for icons
   * @param [providedOptions]
   */
  constructor(circuitElement, circuit, providedOptions) {
    providedOptions = optionize()({
      useHitTestForSensors: false // if true, use the scenery mouse region hit test for fine-grained region. Otherwise, use bounds test.
    }, providedOptions);

    // When not an icon, enable keyboard navigation
    if (circuit) {
      providedOptions = optionize()({
        tagName: 'div',
        // HTML tag name for representative element in the document, see ParallelDOM.js
        focusable: true,
        focusHighlight: 'invisible',
        // highlights are drawn by the simulation, invisible is deprecated don't use in future
        phetioDynamicElement: true,
        phetioState: false,
        phetioVisiblePropertyInstrumented: false,
        phetioInputEnabledPropertyInstrumented: true,
        useHitTestForSensors: false
      }, providedOptions);
    }
    super(providedOptions);
    this.useHitTestForSensors = !!providedOptions.useHitTestForSensors;

    // the circuit which the element can be removed from or null for icons
    this.circuit = circuit;
    this.circuitElement = circuitElement;

    // Make it easy to get back to circuitElements
    this.addLinkedElement(circuitElement, {
      tandem: providedOptions.tandem.createTandem('circuitElement')
    });
    this.updateOpacityOnInteractiveChange();

    /**
     * When the object is created and dragged from the toolbox, the start drag method is forwarded through to start the
     * dragging.
     * @param event - scenery event
     */
    const startDragListener = event => this.dragListener.down(event);
    circuitElement.startDragEmitter.addListener(startDragListener);

    // Flag to indicate when updating view is necessary, in order to avoid duplicate work when both vertices move
    this.dirty = true;
    this.disposeEmitter.addListener(() => circuitElement.startDragEmitter.removeListener(startDragListener));
  }

  /**
   * Mark dirty to batch changes, so that update can be done once in view step, if necessary
   */
  markAsDirty() {
    this.dirty = true;
  }

  /**
   * When interactivity changes, update the opacity.  Overridden.
   */
  updateOpacityOnInteractiveChange() {
    // TODO (black-box-study): Replace this with grayscale if we keep it
    // TODO (black-box-study): @jonathonolson said: I've wished for a scenery-level grayscale/etc. filter. Let me know when you get close to doing this.
    const interactivityChanged = interactive => {
      this.opacity = interactive ? 1 : 0.5;
    };
    this.circuitElement.interactiveProperty.link(interactivityChanged);
    this.disposeEmitter.addListener(() => this.circuitElement.interactiveProperty.unlink(interactivityChanged));
  }

  /**
   * Returns true if the node hits the sensor at the given point.
   */
  containsSensorPoint(globalPoint) {
    const localPoint = this.globalToParentPoint(globalPoint);

    // make sure bounds are correct if cut or joined in this animation frame
    this.step();
    if (this.useHitTestForSensors) {
      // Check against the mouse region
      return !!this.hitTest(localPoint, true, false);
    } else {
      // default implementation is a scenery geometry containment test
      return this.containsPoint(localPoint);
    }
  }

  /**
   * called during the view step
   */
  step() {
    if (this.dirty) {
      this.updateRender();
      this.dirty = false;
    }
  }
  /**
   * Handles when the node is dropped, called by subclass input listener.
   * @param node - the node the input listener is attached to
   * @param vertices - the vertices that are dragged
   * @param screenView - the main screen view, null for icon
   * @param circuitNode
   * @param initialPoint
   * @param latestPoint
   * @param dragged
   */
  endDrag(node, vertices, screenView, circuitNode, initialPoint, latestPoint, dragged) {
    const circuitElement = this.circuitElement;
    if (circuitElement.interactiveProperty.get()) {
      // If over the toolbox, then drop into it
      if (screenView.canNodeDropInToolbox(this)) {
        this.circuit.disposeCircuitElement(circuitElement);
      } else {
        // End drag for each of the vertices
        vertices.forEach(vertex => {
          if (screenView.model.circuit.vertexGroup.includes(vertex)) {
            circuitNode.endDrag(vertex, dragged);
          }
        });

        // Only show the editor when tapped, not on every drag.  Also, event could be undefined if this end() was
        // triggered by dispose()
        this.selectCircuitElementNodeWhenNear(circuitNode, initialPoint, latestPoint);
      }
    }
  }

  /**
   * On tap events, select the CircuitElement (if it is close enough to the tap)
   */
  selectCircuitElementNodeWhenNear(circuitNode, startPoint, latestPoint) {
    if (!this.circuitElement.isDisposed && latestPoint && latestPoint.distance(startPoint) < CCKCConstants.TAP_THRESHOLD) {
      circuitNode.circuit.selectionProperty.value = this.circuitElement;

      // focus the element for keyboard interaction
      // in the state wrapper, the destination frame tries to apply this delete first, which steals it from the upstream frame
      const ignoreFocus = phet.preloads.phetio && phet.preloads.phetio.queryParameters.frameTitle === 'destination';
      if (!ignoreFocus) {
        this.focus();
      }
    }
  }
}
circuitConstructionKitCommon.register('CircuitElementNode', CircuitElementNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,