// Copyright 2020-2023, University of Colorado Boulder

/**
 * Guards against dragging immobile CircuitElementNodes and VertexNodes.
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { DragListener } from '../../../scenery/js/imports.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
export default class CircuitNodeDragListener extends DragListener {
  /**
   * @param circuitNode
   * @param vertexGetters
   * @param [providedOptions]
   */
  constructor(circuitNode, vertexGetters, providedOptions) {
    super(providedOptions);
    this.circuitNode = circuitNode;
    this.vertexGetters = vertexGetters;
  }

  /**
   * Overrides press to add a side effect to mutate Vertex.isDragging.  Cannot use canStartPress instead due to this side
   * effect.
   * @param event
   * @param [targetNode] - If provided, will take the place of the targetNode for this call. Useful for
   *                              forwarded presses.
   * @param [callback] - to be run at the end of the function, but only on success
   */
  press(event, targetNode, callback) {
    const vertices = this.vertexGetters.map(vertexGetter => vertexGetter());
    const allVerticesDraggable = _.every(vertices, vertex => this.circuitNode.canDragVertex(vertex));
    if (allVerticesDraggable) {
      const success = super.press(event, targetNode, callback);
      if (success) {
        vertices.forEach(vertex => this.circuitNode.setVerticesDragging(vertex));
        return true;
      }
    }
    return false;
  }
}
circuitConstructionKitCommon.register('CircuitNodeDragListener', CircuitNodeDragListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEcmFnTGlzdGVuZXIiLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiQ2lyY3VpdE5vZGVEcmFnTGlzdGVuZXIiLCJjb25zdHJ1Y3RvciIsImNpcmN1aXROb2RlIiwidmVydGV4R2V0dGVycyIsInByb3ZpZGVkT3B0aW9ucyIsInByZXNzIiwiZXZlbnQiLCJ0YXJnZXROb2RlIiwiY2FsbGJhY2siLCJ2ZXJ0aWNlcyIsIm1hcCIsInZlcnRleEdldHRlciIsImFsbFZlcnRpY2VzRHJhZ2dhYmxlIiwiXyIsImV2ZXJ5IiwidmVydGV4IiwiY2FuRHJhZ1ZlcnRleCIsInN1Y2Nlc3MiLCJmb3JFYWNoIiwic2V0VmVydGljZXNEcmFnZ2luZyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2lyY3VpdE5vZGVEcmFnTGlzdGVuZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR3VhcmRzIGFnYWluc3QgZHJhZ2dpbmcgaW1tb2JpbGUgQ2lyY3VpdEVsZW1lbnROb2RlcyBhbmQgVmVydGV4Tm9kZXMuXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyLCBEcmFnTGlzdGVuZXJPcHRpb25zLCBOb2RlLCBQcmVzc0xpc3RlbmVyRXZlbnQgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbiBmcm9tICcuLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLmpzJztcclxuaW1wb3J0IFZlcnRleCBmcm9tICcuLi9tb2RlbC9WZXJ0ZXguanMnO1xyXG5pbXBvcnQgQ2lyY3VpdE5vZGUgZnJvbSAnLi9DaXJjdWl0Tm9kZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaXJjdWl0Tm9kZURyYWdMaXN0ZW5lciBleHRlbmRzIERyYWdMaXN0ZW5lciB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjaXJjdWl0Tm9kZTogQ2lyY3VpdE5vZGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB2ZXJ0ZXhHZXR0ZXJzOiAoICgpID0+IFZlcnRleCApW107XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBjaXJjdWl0Tm9kZVxyXG4gICAqIEBwYXJhbSB2ZXJ0ZXhHZXR0ZXJzXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjaXJjdWl0Tm9kZTogQ2lyY3VpdE5vZGUsIHZlcnRleEdldHRlcnM6ICggKCkgPT4gVmVydGV4IClbXSwgcHJvdmlkZWRPcHRpb25zPzogRHJhZ0xpc3RlbmVyT3B0aW9uczxEcmFnTGlzdGVuZXI+ICkge1xyXG4gICAgc3VwZXIoIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuY2lyY3VpdE5vZGUgPSBjaXJjdWl0Tm9kZTtcclxuICAgIHRoaXMudmVydGV4R2V0dGVycyA9IHZlcnRleEdldHRlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPdmVycmlkZXMgcHJlc3MgdG8gYWRkIGEgc2lkZSBlZmZlY3QgdG8gbXV0YXRlIFZlcnRleC5pc0RyYWdnaW5nLiAgQ2Fubm90IHVzZSBjYW5TdGFydFByZXNzIGluc3RlYWQgZHVlIHRvIHRoaXMgc2lkZVxyXG4gICAqIGVmZmVjdC5cclxuICAgKiBAcGFyYW0gZXZlbnRcclxuICAgKiBAcGFyYW0gW3RhcmdldE5vZGVdIC0gSWYgcHJvdmlkZWQsIHdpbGwgdGFrZSB0aGUgcGxhY2Ugb2YgdGhlIHRhcmdldE5vZGUgZm9yIHRoaXMgY2FsbC4gVXNlZnVsIGZvclxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yd2FyZGVkIHByZXNzZXMuXHJcbiAgICogQHBhcmFtIFtjYWxsYmFja10gLSB0byBiZSBydW4gYXQgdGhlIGVuZCBvZiB0aGUgZnVuY3Rpb24sIGJ1dCBvbmx5IG9uIHN1Y2Nlc3NcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcHJlc3MoIGV2ZW50OiBQcmVzc0xpc3RlbmVyRXZlbnQsIHRhcmdldE5vZGU6IE5vZGUgfCB1bmRlZmluZWQsIGNhbGxiYWNrOiAoKSA9PiB2b2lkICk6IGJvb2xlYW4ge1xyXG5cclxuICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy52ZXJ0ZXhHZXR0ZXJzLm1hcCggdmVydGV4R2V0dGVyID0+IHZlcnRleEdldHRlcigpICk7XHJcblxyXG4gICAgY29uc3QgYWxsVmVydGljZXNEcmFnZ2FibGUgPSBfLmV2ZXJ5KCB2ZXJ0aWNlcywgdmVydGV4ID0+IHRoaXMuY2lyY3VpdE5vZGUuY2FuRHJhZ1ZlcnRleCggdmVydGV4ICkgKTtcclxuICAgIGlmICggYWxsVmVydGljZXNEcmFnZ2FibGUgKSB7XHJcblxyXG4gICAgICBjb25zdCBzdWNjZXNzID0gc3VwZXIucHJlc3MoIGV2ZW50LCB0YXJnZXROb2RlLCBjYWxsYmFjayApO1xyXG5cclxuICAgICAgaWYgKCBzdWNjZXNzICkge1xyXG4gICAgICAgIHZlcnRpY2VzLmZvckVhY2goIHZlcnRleCA9PiB0aGlzLmNpcmN1aXROb2RlLnNldFZlcnRpY2VzRHJhZ2dpbmcoIHZlcnRleCApICk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24ucmVnaXN0ZXIoICdDaXJjdWl0Tm9kZURyYWdMaXN0ZW5lcicsIENpcmN1aXROb2RlRHJhZ0xpc3RlbmVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxZQUFZLFFBQXVELGdDQUFnQztBQUM1RyxPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7QUFJN0UsZUFBZSxNQUFNQyx1QkFBdUIsU0FBU0YsWUFBWSxDQUFDO0VBSWhFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsV0FBd0IsRUFBRUMsYUFBaUMsRUFBRUMsZUFBbUQsRUFBRztJQUNySSxLQUFLLENBQUVBLGVBQWdCLENBQUM7SUFFeEIsSUFBSSxDQUFDRixXQUFXLEdBQUdBLFdBQVc7SUFDOUIsSUFBSSxDQUFDQyxhQUFhLEdBQUdBLGFBQWE7RUFDcEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNrQkUsS0FBS0EsQ0FBRUMsS0FBeUIsRUFBRUMsVUFBNEIsRUFBRUMsUUFBb0IsRUFBWTtJQUU5RyxNQUFNQyxRQUFRLEdBQUcsSUFBSSxDQUFDTixhQUFhLENBQUNPLEdBQUcsQ0FBRUMsWUFBWSxJQUFJQSxZQUFZLENBQUMsQ0FBRSxDQUFDO0lBRXpFLE1BQU1DLG9CQUFvQixHQUFHQyxDQUFDLENBQUNDLEtBQUssQ0FBRUwsUUFBUSxFQUFFTSxNQUFNLElBQUksSUFBSSxDQUFDYixXQUFXLENBQUNjLGFBQWEsQ0FBRUQsTUFBTyxDQUFFLENBQUM7SUFDcEcsSUFBS0gsb0JBQW9CLEVBQUc7TUFFMUIsTUFBTUssT0FBTyxHQUFHLEtBQUssQ0FBQ1osS0FBSyxDQUFFQyxLQUFLLEVBQUVDLFVBQVUsRUFBRUMsUUFBUyxDQUFDO01BRTFELElBQUtTLE9BQU8sRUFBRztRQUNiUixRQUFRLENBQUNTLE9BQU8sQ0FBRUgsTUFBTSxJQUFJLElBQUksQ0FBQ2IsV0FBVyxDQUFDaUIsbUJBQW1CLENBQUVKLE1BQU8sQ0FBRSxDQUFDO1FBQzVFLE9BQU8sSUFBSTtNQUNiO0lBQ0Y7SUFDQSxPQUFPLEtBQUs7RUFDZDtBQUNGO0FBRUFoQiw0QkFBNEIsQ0FBQ3FCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRXBCLHVCQUF3QixDQUFDIn0=