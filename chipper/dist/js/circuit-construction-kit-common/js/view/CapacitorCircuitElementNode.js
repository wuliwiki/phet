// Copyright 2015-2023, University of Colorado Boulder

/**
 * Renders the lifelike/schematic view for a Capacitor.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../axon/js/NumberProperty.js';
import Property from '../../../axon/js/Property.js';
import Bounds3 from '../../../dot/js/Bounds3.js';
import Matrix3 from '../../../dot/js/Matrix3.js';
import { Shape } from '../../../kite/js/imports.js';
import Orientation from '../../../phet-core/js/Orientation.js';
import CapacitorConstants from '../../../scenery-phet/js/capacitor/CapacitorConstants.js';
import CapacitorNode from '../../../scenery-phet/js/capacitor/CapacitorNode.js';
import YawPitchModelViewTransform3 from '../../../scenery-phet/js/capacitor/YawPitchModelViewTransform3.js';
import { Color, Image, Node, Path } from '../../../scenery/js/imports.js';
import Tandem from '../../../tandem/js/Tandem.js';
import wireIcon_png from '../../images/wireIcon_png.js';
import CCKCConstants from '../CCKCConstants.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import CircuitElementViewType from '../model/CircuitElementViewType.js';
import FixedCircuitElementNode from './FixedCircuitElementNode.js';
import Multilink from '../../../axon/js/Multilink.js';
import { combineOptions } from '../../../phet-core/js/optionize.js';

// constants
// dimensions for schematic
const SMALL_TERMINAL_WIDTH = 104;
const LARGE_TERMINAL_WIDTH = 104;
const WIDTH = 188;
const GAP = 30;
const LEFT_JUNCTION = WIDTH / 2 - GAP / 2;
const RIGHT_JUNCTION = WIDTH / 2 + GAP / 2;

// Points sampled using Photoshop from a raster of the IEEE icon seen at
// https://upload.wikimedia.org/wikipedia/commons/c/cb/Circuit_elements.svg
let leftSchematicShape = new Shape().moveTo(0, 0) // left wire
.lineTo(LEFT_JUNCTION, 0).moveTo(LEFT_JUNCTION, SMALL_TERMINAL_WIDTH / 2) // left plate
.lineTo(LEFT_JUNCTION, -SMALL_TERMINAL_WIDTH / 2);
let rightSchematicShape = new Shape().moveTo(RIGHT_JUNCTION, 0) // right wire
.lineTo(WIDTH, 0).moveTo(RIGHT_JUNCTION, LARGE_TERMINAL_WIDTH / 2) // right plate
.lineTo(RIGHT_JUNCTION, -LARGE_TERMINAL_WIDTH / 2);

// Tuned the scale so the component fits exactly between the vertices
const SCHEMATIC_SCALE = CCKCConstants.CAPACITOR_LENGTH / WIDTH;

// Scale to fit the correct width
leftSchematicShape = leftSchematicShape.transformed(Matrix3.scale(SCHEMATIC_SCALE, SCHEMATIC_SCALE));
rightSchematicShape = rightSchematicShape.transformed(Matrix3.scale(SCHEMATIC_SCALE, SCHEMATIC_SCALE));
export default class CapacitorCircuitElementNode extends FixedCircuitElementNode {
  // for clipping in ChargeNode

  // for clipping in ChargeNode

  // Identifies the images used to render this node so they can be pre-populated in the WebGL sprite sheet.
  static webglSpriteNodes = [new Image(wireIcon_png)];

  /**
   * @param screenView - main screen view, null for isIcon
   * @param circuitNode, null for icon
   * @param capacitor
   * @param viewTypeProperty
   * @param tandem
   * @param [providedOptions]
   */
  constructor(screenView, circuitNode, capacitor, viewTypeProperty, tandem, providedOptions) {
    providedOptions = combineOptions({
      isIcon: false
    }, providedOptions);
    const wireStubOptions = {
      // mark as pickable so we can perform hit testing with the voltmeter probes
      pickable: true
    };
    const thickness = 0.01414213562373095;
    const plateBounds = new Bounds3(0, 0, 0, thickness, CapacitorConstants.PLATE_HEIGHT, thickness);
    const plateSeparationProperty = new NumberProperty(0.004);

    // TODO (AC): See https://github.com/phetsims/circuit-construction-kit-common/issues/632 Can we instead create a Capacitor?
    // This is definitely a case where Typescript would be unhappy, and if this is needed, then it should be explicitly
    // documented in CapacitorNode.
    const circuit = {
      maxPlateCharge: 2.6562e-12,
      capacitor: {
        plateSizeProperty: new Property(plateBounds),
        plateSeparationProperty: plateSeparationProperty,
        plateVoltageProperty: new NumberProperty(1.5),
        plateChargeProperty: new NumberProperty(0),
        getEffectiveEField: () => 0
      }
    };
    const modelViewTransform = new YawPitchModelViewTransform3();
    const plateChargeVisibleProperty = new BooleanProperty(true);
    const electricFieldVisibleProperty = new BooleanProperty(true);
    const lifelikeNode = new CapacitorNode(circuit, modelViewTransform, plateChargeVisibleProperty, electricFieldVisibleProperty, {
      tandem: Tandem.OPTIONAL,
      orientation: Orientation.HORIZONTAL,
      // so the "-" charges are upside-up in the default orientation
      includeChargeNode: !providedOptions.isIcon,
      scale: 0.45,
      rotation: -Math.PI / 2,
      centerX: capacitor.distanceBetweenVertices / 2,
      centerY: 0 // Center vertically to match the FixedCircuitElementNode assumption that origin is center left
    });

    // q = CV
    const capacitanceVoltageListener = Multilink.multilink([capacitor.capacitanceProperty, capacitor.voltageDifferenceProperty], (C, V) => {
      let q = 2E-13 * C * V;

      // Guard against noisy oscillations around 0
      if (Math.abs(q) < 1E-18) {
        q = 0;
      }
      circuit.capacitor.plateChargeProperty.set(-q);
    });
    const leftWireStub = new Image(wireIcon_png, combineOptions({
      centerX: lifelikeNode.centerX,
      centerY: lifelikeNode.centerY
    }, wireStubOptions));
    const rightWireStub = new Image(wireIcon_png, combineOptions({
      centerX: lifelikeNode.centerX,
      centerY: lifelikeNode.centerY
    }, wireStubOptions));
    const schematicPathOptions = {
      stroke: Color.BLACK,
      lineWidth: CCKCConstants.SCHEMATIC_LINE_WIDTH,
      strokePickable: true,
      pickable: true // so that we can use hit detection for the voltmeter probes.
    };

    const schematicPathHitAreaOptions = {
      stroke: null,
      lineWidth: 15,
      strokePickable: true,
      pickable: true // so that we can use hit detection for the voltmeter probes.
    };

    const leftSchematicPath = new Path(leftSchematicShape, schematicPathOptions);
    const rightSchematicPath = new Path(rightSchematicShape, schematicPathOptions);

    // Wrap in another layer so it can be used for clipping
    const schematicNode = new Node({
      children: [leftSchematicPath, rightSchematicPath]
    });

    // Expand the pointer areas with a defensive copy, see https://github.com/phetsims/circuit-construction-kit-common/issues/310
    schematicNode.mouseArea = schematicNode.localBounds.dilated(2);
    schematicNode.touchArea = schematicNode.localBounds.dilated(2);

    // NOTE: This is backwards, x is somehow vertical
    lifelikeNode.mouseArea = lifelikeNode.localBounds.erodedX(45).dilatedY(12);
    lifelikeNode.touchArea = lifelikeNode.localBounds.erodedX(45).dilatedY(12);
    const lifelikeNodeContainer = new Node({
      children: [lifelikeNode, leftWireStub, rightWireStub]
    });
    super(screenView, circuitNode, capacitor, viewTypeProperty, lifelikeNodeContainer, schematicNode, tandem, providedOptions);
    this.capacitor = capacitor;
    this.capacitorCircuitElementLifelikeNode = lifelikeNode;
    this.capacitorCircuitElementSchematicNode = schematicNode;
    this.leftWireStub = leftWireStub;
    this.rightWireStub = rightWireStub;
    this.leftSchematicPath = leftSchematicPath;
    this.rightSchematicPath = rightSchematicPath;
    this.leftSchematicHitAreaPath = new Path(leftSchematicShape, schematicPathHitAreaOptions);
    this.rightSchematicHitAreaPath = new Path(rightSchematicShape, schematicPathHitAreaOptions);
    schematicNode.addChild(this.leftSchematicHitAreaPath);
    schematicNode.addChild(this.rightSchematicHitAreaPath);
    capacitor.capacitanceProperty.link(capacitance => {
      // compute proportionality constant based on defaults.
      const k = 0.1 * 0.004;

      // inverse relationship between plate separation and capacitance.
      plateSeparationProperty.value = k / capacitance;

      // Adjust clipping region of wires accordingly
      const topPlateCenterToGlobal = this.capacitorCircuitElementLifelikeNode.getTopPlateClipShapeToGlobal();
      leftWireStub.clipArea = topPlateCenterToGlobal.transformed(leftWireStub.getGlobalToLocalMatrix());
      const bottomPlateCenterToGlobal = this.capacitorCircuitElementLifelikeNode.getBottomPlateClipShapeToGlobal();
      rightWireStub.clipArea = bottomPlateCenterToGlobal.transformed(rightWireStub.getGlobalToLocalMatrix());
    });
    this.disposeCapacitorCircuitElementNode = () => {
      capacitanceVoltageListener.dispose();
      lifelikeNode.dispose();
    };
  }
  dispose() {
    this.disposeCapacitorCircuitElementNode();
    super.dispose();
  }

  /**
   * Returns true if the node hits the sensor at the given point.
   */
  containsSensorPoint(globalPoint) {
    // make sure bounds are correct if cut or joined in this animation frame
    this.step();
    return this.frontSideContainsSensorPoint(globalPoint) || this.backSideContainsSensorPoint(globalPoint);
  }

  /**
   * Determine whether the start side (with the pivot) contains the sensor point.
   */
  frontSideContainsSensorPoint(globalPoint) {
    if (this.viewTypeProperty.value === CircuitElementViewType.LIFELIKE) {
      return this.capacitorCircuitElementLifelikeNode.frontSideContainsSensorPoint(globalPoint) || this.leftWireStub.containsPoint(this.leftWireStub.globalToParentPoint(globalPoint));
    } else {
      return this.leftSchematicHitAreaPath.containsPoint(this.leftSchematicHitAreaPath.globalToParentPoint(globalPoint));
    }
  }

  /**
   * Determine whether the end side (with the pivot) contains the sensor point.
   */
  backSideContainsSensorPoint(globalPoint) {
    if (this.viewTypeProperty.value === CircuitElementViewType.LIFELIKE) {
      return this.capacitorCircuitElementLifelikeNode.backSideContainsSensorPoint(globalPoint) || this.rightWireStub.containsPoint(this.rightWireStub.globalToParentPoint(globalPoint));
    } else {
      return this.rightSchematicHitAreaPath.containsPoint(this.rightSchematicHitAreaPath.globalToParentPoint(globalPoint));
    }
  }

  /**
   * Gets the bounds for the highlight rectangle.
   */
  getHighlightBounds() {
    return this.viewTypeProperty.value === CircuitElementViewType.LIFELIKE ? this.contentNode.localBounds.erodedX(22).erodedY(15) : this.contentNode.localBounds.dilatedX(10).dilatedY(10);
  }
}
circuitConstructionKitCommon.register('CapacitorCircuitElementNode', CapacitorCircuitElementNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlByb3BlcnR5IiwiQm91bmRzMyIsIk1hdHJpeDMiLCJTaGFwZSIsIk9yaWVudGF0aW9uIiwiQ2FwYWNpdG9yQ29uc3RhbnRzIiwiQ2FwYWNpdG9yTm9kZSIsIllhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMyIsIkNvbG9yIiwiSW1hZ2UiLCJOb2RlIiwiUGF0aCIsIlRhbmRlbSIsIndpcmVJY29uX3BuZyIsIkNDS0NDb25zdGFudHMiLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIiwiQ2lyY3VpdEVsZW1lbnRWaWV3VHlwZSIsIkZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlIiwiTXVsdGlsaW5rIiwiY29tYmluZU9wdGlvbnMiLCJTTUFMTF9URVJNSU5BTF9XSURUSCIsIkxBUkdFX1RFUk1JTkFMX1dJRFRIIiwiV0lEVEgiLCJHQVAiLCJMRUZUX0pVTkNUSU9OIiwiUklHSFRfSlVOQ1RJT04iLCJsZWZ0U2NoZW1hdGljU2hhcGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJyaWdodFNjaGVtYXRpY1NoYXBlIiwiU0NIRU1BVElDX1NDQUxFIiwiQ0FQQUNJVE9SX0xFTkdUSCIsInRyYW5zZm9ybWVkIiwic2NhbGUiLCJDYXBhY2l0b3JDaXJjdWl0RWxlbWVudE5vZGUiLCJ3ZWJnbFNwcml0ZU5vZGVzIiwiY29uc3RydWN0b3IiLCJzY3JlZW5WaWV3IiwiY2lyY3VpdE5vZGUiLCJjYXBhY2l0b3IiLCJ2aWV3VHlwZVByb3BlcnR5IiwidGFuZGVtIiwicHJvdmlkZWRPcHRpb25zIiwiaXNJY29uIiwid2lyZVN0dWJPcHRpb25zIiwicGlja2FibGUiLCJ0aGlja25lc3MiLCJwbGF0ZUJvdW5kcyIsIlBMQVRFX0hFSUdIVCIsInBsYXRlU2VwYXJhdGlvblByb3BlcnR5IiwiY2lyY3VpdCIsIm1heFBsYXRlQ2hhcmdlIiwicGxhdGVTaXplUHJvcGVydHkiLCJwbGF0ZVZvbHRhZ2VQcm9wZXJ0eSIsInBsYXRlQ2hhcmdlUHJvcGVydHkiLCJnZXRFZmZlY3RpdmVFRmllbGQiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwbGF0ZUNoYXJnZVZpc2libGVQcm9wZXJ0eSIsImVsZWN0cmljRmllbGRWaXNpYmxlUHJvcGVydHkiLCJsaWZlbGlrZU5vZGUiLCJPUFRJT05BTCIsIm9yaWVudGF0aW9uIiwiSE9SSVpPTlRBTCIsImluY2x1ZGVDaGFyZ2VOb2RlIiwicm90YXRpb24iLCJNYXRoIiwiUEkiLCJjZW50ZXJYIiwiZGlzdGFuY2VCZXR3ZWVuVmVydGljZXMiLCJjZW50ZXJZIiwiY2FwYWNpdGFuY2VWb2x0YWdlTGlzdGVuZXIiLCJtdWx0aWxpbmsiLCJjYXBhY2l0YW5jZVByb3BlcnR5Iiwidm9sdGFnZURpZmZlcmVuY2VQcm9wZXJ0eSIsIkMiLCJWIiwicSIsImFicyIsInNldCIsImxlZnRXaXJlU3R1YiIsInJpZ2h0V2lyZVN0dWIiLCJzY2hlbWF0aWNQYXRoT3B0aW9ucyIsInN0cm9rZSIsIkJMQUNLIiwibGluZVdpZHRoIiwiU0NIRU1BVElDX0xJTkVfV0lEVEgiLCJzdHJva2VQaWNrYWJsZSIsInNjaGVtYXRpY1BhdGhIaXRBcmVhT3B0aW9ucyIsImxlZnRTY2hlbWF0aWNQYXRoIiwicmlnaHRTY2hlbWF0aWNQYXRoIiwic2NoZW1hdGljTm9kZSIsImNoaWxkcmVuIiwibW91c2VBcmVhIiwibG9jYWxCb3VuZHMiLCJkaWxhdGVkIiwidG91Y2hBcmVhIiwiZXJvZGVkWCIsImRpbGF0ZWRZIiwibGlmZWxpa2VOb2RlQ29udGFpbmVyIiwiY2FwYWNpdG9yQ2lyY3VpdEVsZW1lbnRMaWZlbGlrZU5vZGUiLCJjYXBhY2l0b3JDaXJjdWl0RWxlbWVudFNjaGVtYXRpY05vZGUiLCJsZWZ0U2NoZW1hdGljSGl0QXJlYVBhdGgiLCJyaWdodFNjaGVtYXRpY0hpdEFyZWFQYXRoIiwiYWRkQ2hpbGQiLCJsaW5rIiwiY2FwYWNpdGFuY2UiLCJrIiwidmFsdWUiLCJ0b3BQbGF0ZUNlbnRlclRvR2xvYmFsIiwiZ2V0VG9wUGxhdGVDbGlwU2hhcGVUb0dsb2JhbCIsImNsaXBBcmVhIiwiZ2V0R2xvYmFsVG9Mb2NhbE1hdHJpeCIsImJvdHRvbVBsYXRlQ2VudGVyVG9HbG9iYWwiLCJnZXRCb3R0b21QbGF0ZUNsaXBTaGFwZVRvR2xvYmFsIiwiZGlzcG9zZUNhcGFjaXRvckNpcmN1aXRFbGVtZW50Tm9kZSIsImRpc3Bvc2UiLCJjb250YWluc1NlbnNvclBvaW50IiwiZ2xvYmFsUG9pbnQiLCJzdGVwIiwiZnJvbnRTaWRlQ29udGFpbnNTZW5zb3JQb2ludCIsImJhY2tTaWRlQ29udGFpbnNTZW5zb3JQb2ludCIsIkxJRkVMSUtFIiwiY29udGFpbnNQb2ludCIsImdsb2JhbFRvUGFyZW50UG9pbnQiLCJnZXRIaWdobGlnaHRCb3VuZHMiLCJjb250ZW50Tm9kZSIsImVyb2RlZFkiLCJkaWxhdGVkWCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2FwYWNpdG9yQ2lyY3VpdEVsZW1lbnROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgdGhlIGxpZmVsaWtlL3NjaGVtYXRpYyB2aWV3IGZvciBhIENhcGFjaXRvci5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCb3VuZHMzIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMzLmpzJztcclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBPcmllbnRhdGlvbiBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvT3JpZW50YXRpb24uanMnO1xyXG5pbXBvcnQgQ2FwYWNpdG9yQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9jYXBhY2l0b3IvQ2FwYWNpdG9yQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENhcGFjaXRvck5vZGUgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2NhcGFjaXRvci9DYXBhY2l0b3JOb2RlLmpzJztcclxuaW1wb3J0IFlhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMyBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvY2FwYWNpdG9yL1lhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMy5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBJbWFnZSwgSW1hZ2VPcHRpb25zLCBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHdpcmVJY29uX3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvd2lyZUljb25fcG5nLmpzJztcclxuaW1wb3J0IENDS0NDb25zdGFudHMgZnJvbSAnLi4vQ0NLQ0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIGZyb20gJy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24uanMnO1xyXG5pbXBvcnQgQ2FwYWNpdG9yIGZyb20gJy4uL21vZGVsL0NhcGFjaXRvci5qcyc7XHJcbmltcG9ydCBDaXJjdWl0RWxlbWVudFZpZXdUeXBlIGZyb20gJy4uL21vZGVsL0NpcmN1aXRFbGVtZW50Vmlld1R5cGUuanMnO1xyXG5pbXBvcnQgQ0NLQ1NjcmVlblZpZXcgZnJvbSAnLi9DQ0tDU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBDaXJjdWl0Tm9kZSBmcm9tICcuL0NpcmN1aXROb2RlLmpzJztcclxuaW1wb3J0IEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlLCB7IEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlT3B0aW9ucyB9IGZyb20gJy4vRml4ZWRDaXJjdWl0RWxlbWVudE5vZGUuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuLy8gZGltZW5zaW9ucyBmb3Igc2NoZW1hdGljXHJcbmNvbnN0IFNNQUxMX1RFUk1JTkFMX1dJRFRIID0gMTA0O1xyXG5jb25zdCBMQVJHRV9URVJNSU5BTF9XSURUSCA9IDEwNDtcclxuY29uc3QgV0lEVEggPSAxODg7XHJcbmNvbnN0IEdBUCA9IDMwO1xyXG5jb25zdCBMRUZUX0pVTkNUSU9OID0gV0lEVEggLyAyIC0gR0FQIC8gMjtcclxuY29uc3QgUklHSFRfSlVOQ1RJT04gPSBXSURUSCAvIDIgKyBHQVAgLyAyO1xyXG5cclxuLy8gUG9pbnRzIHNhbXBsZWQgdXNpbmcgUGhvdG9zaG9wIGZyb20gYSByYXN0ZXIgb2YgdGhlIElFRUUgaWNvbiBzZWVuIGF0XHJcbi8vIGh0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvYy9jYi9DaXJjdWl0X2VsZW1lbnRzLnN2Z1xyXG5sZXQgbGVmdFNjaGVtYXRpY1NoYXBlID0gbmV3IFNoYXBlKClcclxuICAubW92ZVRvKCAwLCAwICkgLy8gbGVmdCB3aXJlXHJcbiAgLmxpbmVUbyggTEVGVF9KVU5DVElPTiwgMCApXHJcbiAgLm1vdmVUbyggTEVGVF9KVU5DVElPTiwgU01BTExfVEVSTUlOQUxfV0lEVEggLyAyICkgLy8gbGVmdCBwbGF0ZVxyXG4gIC5saW5lVG8oIExFRlRfSlVOQ1RJT04sIC1TTUFMTF9URVJNSU5BTF9XSURUSCAvIDIgKTtcclxuXHJcbmxldCByaWdodFNjaGVtYXRpY1NoYXBlID0gbmV3IFNoYXBlKClcclxuICAubW92ZVRvKCBSSUdIVF9KVU5DVElPTiwgMCApIC8vIHJpZ2h0IHdpcmVcclxuICAubGluZVRvKCBXSURUSCwgMCApXHJcbiAgLm1vdmVUbyggUklHSFRfSlVOQ1RJT04sIExBUkdFX1RFUk1JTkFMX1dJRFRIIC8gMiApIC8vIHJpZ2h0IHBsYXRlXHJcbiAgLmxpbmVUbyggUklHSFRfSlVOQ1RJT04sIC1MQVJHRV9URVJNSU5BTF9XSURUSCAvIDIgKTtcclxuXHJcbi8vIFR1bmVkIHRoZSBzY2FsZSBzbyB0aGUgY29tcG9uZW50IGZpdHMgZXhhY3RseSBiZXR3ZWVuIHRoZSB2ZXJ0aWNlc1xyXG5jb25zdCBTQ0hFTUFUSUNfU0NBTEUgPSBDQ0tDQ29uc3RhbnRzLkNBUEFDSVRPUl9MRU5HVEggLyBXSURUSDtcclxuXHJcbi8vIFNjYWxlIHRvIGZpdCB0aGUgY29ycmVjdCB3aWR0aFxyXG5sZWZ0U2NoZW1hdGljU2hhcGUgPSBsZWZ0U2NoZW1hdGljU2hhcGUudHJhbnNmb3JtZWQoIE1hdHJpeDMuc2NhbGUoIFNDSEVNQVRJQ19TQ0FMRSwgU0NIRU1BVElDX1NDQUxFICkgKTtcclxucmlnaHRTY2hlbWF0aWNTaGFwZSA9IHJpZ2h0U2NoZW1hdGljU2hhcGUudHJhbnNmb3JtZWQoIE1hdHJpeDMuc2NhbGUoIFNDSEVNQVRJQ19TQ0FMRSwgU0NIRU1BVElDX1NDQUxFICkgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcGFjaXRvckNpcmN1aXRFbGVtZW50Tm9kZSBleHRlbmRzIEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGNhcGFjaXRvcjogQ2FwYWNpdG9yO1xyXG5cclxuICAvLyBmb3IgY2xpcHBpbmcgaW4gQ2hhcmdlTm9kZVxyXG4gIHB1YmxpYyByZWFkb25seSBjYXBhY2l0b3JDaXJjdWl0RWxlbWVudExpZmVsaWtlTm9kZTogQ2FwYWNpdG9yTm9kZTtcclxuXHJcbiAgLy8gZm9yIGNsaXBwaW5nIGluIENoYXJnZU5vZGVcclxuICBwdWJsaWMgcmVhZG9ubHkgY2FwYWNpdG9yQ2lyY3VpdEVsZW1lbnRTY2hlbWF0aWNOb2RlOiBOb2RlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGVmdFdpcmVTdHViOiBOb2RlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmlnaHRXaXJlU3R1YjogTm9kZTtcclxuICBwcml2YXRlIHJlYWRvbmx5IGxlZnRTY2hlbWF0aWNQYXRoOiBQYXRoO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGVmdFNjaGVtYXRpY0hpdEFyZWFQYXRoOiBQYXRoO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmlnaHRTY2hlbWF0aWNQYXRoOiBQYXRoO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmlnaHRTY2hlbWF0aWNIaXRBcmVhUGF0aDogUGF0aDtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VDYXBhY2l0b3JDaXJjdWl0RWxlbWVudE5vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8vIElkZW50aWZpZXMgdGhlIGltYWdlcyB1c2VkIHRvIHJlbmRlciB0aGlzIG5vZGUgc28gdGhleSBjYW4gYmUgcHJlLXBvcHVsYXRlZCBpbiB0aGUgV2ViR0wgc3ByaXRlIHNoZWV0LlxyXG4gIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgd2ViZ2xTcHJpdGVOb2RlcyA9IFsgbmV3IEltYWdlKCB3aXJlSWNvbl9wbmcgKSBdO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gc2NyZWVuVmlldyAtIG1haW4gc2NyZWVuIHZpZXcsIG51bGwgZm9yIGlzSWNvblxyXG4gICAqIEBwYXJhbSBjaXJjdWl0Tm9kZSwgbnVsbCBmb3IgaWNvblxyXG4gICAqIEBwYXJhbSBjYXBhY2l0b3JcclxuICAgKiBAcGFyYW0gdmlld1R5cGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB0YW5kZW1cclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNjcmVlblZpZXc6IENDS0NTY3JlZW5WaWV3IHwgbnVsbCwgY2lyY3VpdE5vZGU6IENpcmN1aXROb2RlIHwgbnVsbCwgY2FwYWNpdG9yOiBDYXBhY2l0b3IsIHZpZXdUeXBlUHJvcGVydHk6IFByb3BlcnR5PENpcmN1aXRFbGVtZW50Vmlld1R5cGU+LCB0YW5kZW06IFRhbmRlbSwgcHJvdmlkZWRPcHRpb25zPzogRml4ZWRDaXJjdWl0RWxlbWVudE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIHByb3ZpZGVkT3B0aW9ucyA9IGNvbWJpbmVPcHRpb25zPEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlT3B0aW9ucz4oIHtcclxuICAgICAgaXNJY29uOiBmYWxzZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3Qgd2lyZVN0dWJPcHRpb25zID0ge1xyXG5cclxuICAgICAgLy8gbWFyayBhcyBwaWNrYWJsZSBzbyB3ZSBjYW4gcGVyZm9ybSBoaXQgdGVzdGluZyB3aXRoIHRoZSB2b2x0bWV0ZXIgcHJvYmVzXHJcbiAgICAgIHBpY2thYmxlOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHRoaWNrbmVzcyA9IDAuMDE0MTQyMTM1NjIzNzMwOTU7XHJcbiAgICBjb25zdCBwbGF0ZUJvdW5kcyA9IG5ldyBCb3VuZHMzKCAwLCAwLCAwLCB0aGlja25lc3MsIENhcGFjaXRvckNvbnN0YW50cy5QTEFURV9IRUlHSFQsIHRoaWNrbmVzcyApO1xyXG4gICAgY29uc3QgcGxhdGVTZXBhcmF0aW9uUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAuMDA0ICk7XHJcblxyXG4gICAgLy8gVE9ETyAoQUMpOiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NpcmN1aXQtY29uc3RydWN0aW9uLWtpdC1jb21tb24vaXNzdWVzLzYzMiBDYW4gd2UgaW5zdGVhZCBjcmVhdGUgYSBDYXBhY2l0b3I/XHJcbiAgICAvLyBUaGlzIGlzIGRlZmluaXRlbHkgYSBjYXNlIHdoZXJlIFR5cGVzY3JpcHQgd291bGQgYmUgdW5oYXBweSwgYW5kIGlmIHRoaXMgaXMgbmVlZGVkLCB0aGVuIGl0IHNob3VsZCBiZSBleHBsaWNpdGx5XHJcbiAgICAvLyBkb2N1bWVudGVkIGluIENhcGFjaXRvck5vZGUuXHJcbiAgICBjb25zdCBjaXJjdWl0ID0ge1xyXG4gICAgICBtYXhQbGF0ZUNoYXJnZTogMi42NTYyZS0xMixcclxuICAgICAgY2FwYWNpdG9yOiB7XHJcbiAgICAgICAgcGxhdGVTaXplUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggcGxhdGVCb3VuZHMgKSxcclxuICAgICAgICBwbGF0ZVNlcGFyYXRpb25Qcm9wZXJ0eTogcGxhdGVTZXBhcmF0aW9uUHJvcGVydHksXHJcbiAgICAgICAgcGxhdGVWb2x0YWdlUHJvcGVydHk6IG5ldyBOdW1iZXJQcm9wZXJ0eSggMS41ICksXHJcbiAgICAgICAgcGxhdGVDaGFyZ2VQcm9wZXJ0eTogbmV3IE51bWJlclByb3BlcnR5KCAwICksXHJcbiAgICAgICAgZ2V0RWZmZWN0aXZlRUZpZWxkOiAoKSA9PiAwXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgbW9kZWxWaWV3VHJhbnNmb3JtID0gbmV3IFlhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMygpO1xyXG4gICAgY29uc3QgcGxhdGVDaGFyZ2VWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlICk7XHJcbiAgICBjb25zdCBlbGVjdHJpY0ZpZWxkVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSApO1xyXG5cclxuICAgIGNvbnN0IGxpZmVsaWtlTm9kZSA9IG5ldyBDYXBhY2l0b3JOb2RlKCBjaXJjdWl0LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHBsYXRlQ2hhcmdlVmlzaWJsZVByb3BlcnR5LCBlbGVjdHJpY0ZpZWxkVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVElPTkFMLFxyXG4gICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb24uSE9SSVpPTlRBTCwgLy8gc28gdGhlIFwiLVwiIGNoYXJnZXMgYXJlIHVwc2lkZS11cCBpbiB0aGUgZGVmYXVsdCBvcmllbnRhdGlvblxyXG4gICAgICBpbmNsdWRlQ2hhcmdlTm9kZTogIXByb3ZpZGVkT3B0aW9ucy5pc0ljb24sXHJcbiAgICAgIHNjYWxlOiAwLjQ1LFxyXG4gICAgICByb3RhdGlvbjogLU1hdGguUEkgLyAyLFxyXG4gICAgICBjZW50ZXJYOiBjYXBhY2l0b3IuZGlzdGFuY2VCZXR3ZWVuVmVydGljZXMgLyAyLFxyXG4gICAgICBjZW50ZXJZOiAwIC8vIENlbnRlciB2ZXJ0aWNhbGx5IHRvIG1hdGNoIHRoZSBGaXhlZENpcmN1aXRFbGVtZW50Tm9kZSBhc3N1bXB0aW9uIHRoYXQgb3JpZ2luIGlzIGNlbnRlciBsZWZ0XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gcSA9IENWXHJcbiAgICBjb25zdCBjYXBhY2l0YW5jZVZvbHRhZ2VMaXN0ZW5lciA9IE11bHRpbGluay5tdWx0aWxpbmsoIFtcclxuICAgICAgY2FwYWNpdG9yLmNhcGFjaXRhbmNlUHJvcGVydHksXHJcbiAgICAgIGNhcGFjaXRvci52b2x0YWdlRGlmZmVyZW5jZVByb3BlcnR5XHJcbiAgICBdLCAoIEM6IG51bWJlciwgVjogbnVtYmVyICkgPT4ge1xyXG5cclxuICAgICAgbGV0IHEgPSAyRS0xMyAqIEMgKiBWO1xyXG5cclxuICAgICAgLy8gR3VhcmQgYWdhaW5zdCBub2lzeSBvc2NpbGxhdGlvbnMgYXJvdW5kIDBcclxuICAgICAgaWYgKCBNYXRoLmFicyggcSApIDwgMUUtMTggKSB7XHJcbiAgICAgICAgcSA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgY2lyY3VpdC5jYXBhY2l0b3IucGxhdGVDaGFyZ2VQcm9wZXJ0eS5zZXQoIC1xICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgbGVmdFdpcmVTdHViID0gbmV3IEltYWdlKCB3aXJlSWNvbl9wbmcsIGNvbWJpbmVPcHRpb25zPEltYWdlT3B0aW9ucz4oIHtcclxuICAgICAgY2VudGVyWDogbGlmZWxpa2VOb2RlLmNlbnRlclgsXHJcbiAgICAgIGNlbnRlclk6IGxpZmVsaWtlTm9kZS5jZW50ZXJZXHJcbiAgICB9LCB3aXJlU3R1Yk9wdGlvbnMgKSApO1xyXG4gICAgY29uc3QgcmlnaHRXaXJlU3R1YiA9IG5ldyBJbWFnZSggd2lyZUljb25fcG5nLCBjb21iaW5lT3B0aW9uczxJbWFnZU9wdGlvbnM+KCB7XHJcbiAgICAgIGNlbnRlclg6IGxpZmVsaWtlTm9kZS5jZW50ZXJYLFxyXG4gICAgICBjZW50ZXJZOiBsaWZlbGlrZU5vZGUuY2VudGVyWVxyXG4gICAgfSwgd2lyZVN0dWJPcHRpb25zICkgKTtcclxuXHJcbiAgICBjb25zdCBzY2hlbWF0aWNQYXRoT3B0aW9ucyA9IHtcclxuICAgICAgc3Ryb2tlOiBDb2xvci5CTEFDSyxcclxuICAgICAgbGluZVdpZHRoOiBDQ0tDQ29uc3RhbnRzLlNDSEVNQVRJQ19MSU5FX1dJRFRILFxyXG4gICAgICBzdHJva2VQaWNrYWJsZTogdHJ1ZSxcclxuICAgICAgcGlja2FibGU6IHRydWUgLy8gc28gdGhhdCB3ZSBjYW4gdXNlIGhpdCBkZXRlY3Rpb24gZm9yIHRoZSB2b2x0bWV0ZXIgcHJvYmVzLlxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBzY2hlbWF0aWNQYXRoSGl0QXJlYU9wdGlvbnMgPSB7XHJcbiAgICAgIHN0cm9rZTogbnVsbCxcclxuICAgICAgbGluZVdpZHRoOiAxNSxcclxuICAgICAgc3Ryb2tlUGlja2FibGU6IHRydWUsXHJcbiAgICAgIHBpY2thYmxlOiB0cnVlIC8vIHNvIHRoYXQgd2UgY2FuIHVzZSBoaXQgZGV0ZWN0aW9uIGZvciB0aGUgdm9sdG1ldGVyIHByb2Jlcy5cclxuICAgIH07XHJcbiAgICBjb25zdCBsZWZ0U2NoZW1hdGljUGF0aCA9IG5ldyBQYXRoKCBsZWZ0U2NoZW1hdGljU2hhcGUsIHNjaGVtYXRpY1BhdGhPcHRpb25zICk7XHJcbiAgICBjb25zdCByaWdodFNjaGVtYXRpY1BhdGggPSBuZXcgUGF0aCggcmlnaHRTY2hlbWF0aWNTaGFwZSwgc2NoZW1hdGljUGF0aE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBXcmFwIGluIGFub3RoZXIgbGF5ZXIgc28gaXQgY2FuIGJlIHVzZWQgZm9yIGNsaXBwaW5nXHJcbiAgICBjb25zdCBzY2hlbWF0aWNOb2RlID0gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgbGVmdFNjaGVtYXRpY1BhdGgsIHJpZ2h0U2NoZW1hdGljUGF0aCBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gRXhwYW5kIHRoZSBwb2ludGVyIGFyZWFzIHdpdGggYSBkZWZlbnNpdmUgY29weSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jaXJjdWl0LWNvbnN0cnVjdGlvbi1raXQtY29tbW9uL2lzc3Vlcy8zMTBcclxuICAgIHNjaGVtYXRpY05vZGUubW91c2VBcmVhID0gc2NoZW1hdGljTm9kZS5sb2NhbEJvdW5kcy5kaWxhdGVkKCAyICk7XHJcbiAgICBzY2hlbWF0aWNOb2RlLnRvdWNoQXJlYSA9IHNjaGVtYXRpY05vZGUubG9jYWxCb3VuZHMuZGlsYXRlZCggMiApO1xyXG5cclxuICAgIC8vIE5PVEU6IFRoaXMgaXMgYmFja3dhcmRzLCB4IGlzIHNvbWVob3cgdmVydGljYWxcclxuICAgIGxpZmVsaWtlTm9kZS5tb3VzZUFyZWEgPSBsaWZlbGlrZU5vZGUubG9jYWxCb3VuZHMuZXJvZGVkWCggNDUgKS5kaWxhdGVkWSggMTIgKTtcclxuICAgIGxpZmVsaWtlTm9kZS50b3VjaEFyZWEgPSBsaWZlbGlrZU5vZGUubG9jYWxCb3VuZHMuZXJvZGVkWCggNDUgKS5kaWxhdGVkWSggMTIgKTtcclxuXHJcbiAgICBjb25zdCBsaWZlbGlrZU5vZGVDb250YWluZXIgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyBsaWZlbGlrZU5vZGUsIGxlZnRXaXJlU3R1YiwgcmlnaHRXaXJlU3R1YiBdXHJcbiAgICB9ICk7XHJcbiAgICBzdXBlcihcclxuICAgICAgc2NyZWVuVmlldyxcclxuICAgICAgY2lyY3VpdE5vZGUsXHJcbiAgICAgIGNhcGFjaXRvcixcclxuICAgICAgdmlld1R5cGVQcm9wZXJ0eSxcclxuICAgICAgbGlmZWxpa2VOb2RlQ29udGFpbmVyLFxyXG4gICAgICBzY2hlbWF0aWNOb2RlLFxyXG4gICAgICB0YW5kZW0sXHJcbiAgICAgIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmNhcGFjaXRvciA9IGNhcGFjaXRvcjtcclxuICAgIHRoaXMuY2FwYWNpdG9yQ2lyY3VpdEVsZW1lbnRMaWZlbGlrZU5vZGUgPSBsaWZlbGlrZU5vZGU7XHJcbiAgICB0aGlzLmNhcGFjaXRvckNpcmN1aXRFbGVtZW50U2NoZW1hdGljTm9kZSA9IHNjaGVtYXRpY05vZGU7XHJcblxyXG4gICAgdGhpcy5sZWZ0V2lyZVN0dWIgPSBsZWZ0V2lyZVN0dWI7XHJcbiAgICB0aGlzLnJpZ2h0V2lyZVN0dWIgPSByaWdodFdpcmVTdHViO1xyXG5cclxuICAgIHRoaXMubGVmdFNjaGVtYXRpY1BhdGggPSBsZWZ0U2NoZW1hdGljUGF0aDtcclxuICAgIHRoaXMucmlnaHRTY2hlbWF0aWNQYXRoID0gcmlnaHRTY2hlbWF0aWNQYXRoO1xyXG4gICAgdGhpcy5sZWZ0U2NoZW1hdGljSGl0QXJlYVBhdGggPSBuZXcgUGF0aCggbGVmdFNjaGVtYXRpY1NoYXBlLCBzY2hlbWF0aWNQYXRoSGl0QXJlYU9wdGlvbnMgKTtcclxuICAgIHRoaXMucmlnaHRTY2hlbWF0aWNIaXRBcmVhUGF0aCA9IG5ldyBQYXRoKCByaWdodFNjaGVtYXRpY1NoYXBlLCBzY2hlbWF0aWNQYXRoSGl0QXJlYU9wdGlvbnMgKTtcclxuXHJcbiAgICBzY2hlbWF0aWNOb2RlLmFkZENoaWxkKCB0aGlzLmxlZnRTY2hlbWF0aWNIaXRBcmVhUGF0aCApO1xyXG4gICAgc2NoZW1hdGljTm9kZS5hZGRDaGlsZCggdGhpcy5yaWdodFNjaGVtYXRpY0hpdEFyZWFQYXRoICk7XHJcbiAgICBjYXBhY2l0b3IuY2FwYWNpdGFuY2VQcm9wZXJ0eS5saW5rKCBjYXBhY2l0YW5jZSA9PiB7XHJcblxyXG4gICAgICAvLyBjb21wdXRlIHByb3BvcnRpb25hbGl0eSBjb25zdGFudCBiYXNlZCBvbiBkZWZhdWx0cy5cclxuICAgICAgY29uc3QgayA9IDAuMSAqIDAuMDA0O1xyXG5cclxuICAgICAgLy8gaW52ZXJzZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBwbGF0ZSBzZXBhcmF0aW9uIGFuZCBjYXBhY2l0YW5jZS5cclxuICAgICAgcGxhdGVTZXBhcmF0aW9uUHJvcGVydHkudmFsdWUgPSBrIC8gY2FwYWNpdGFuY2U7XHJcblxyXG4gICAgICAvLyBBZGp1c3QgY2xpcHBpbmcgcmVnaW9uIG9mIHdpcmVzIGFjY29yZGluZ2x5XHJcbiAgICAgIGNvbnN0IHRvcFBsYXRlQ2VudGVyVG9HbG9iYWwgPSB0aGlzLmNhcGFjaXRvckNpcmN1aXRFbGVtZW50TGlmZWxpa2VOb2RlLmdldFRvcFBsYXRlQ2xpcFNoYXBlVG9HbG9iYWwoKTtcclxuICAgICAgbGVmdFdpcmVTdHViLmNsaXBBcmVhID0gdG9wUGxhdGVDZW50ZXJUb0dsb2JhbC50cmFuc2Zvcm1lZCggbGVmdFdpcmVTdHViLmdldEdsb2JhbFRvTG9jYWxNYXRyaXgoKSApO1xyXG5cclxuICAgICAgY29uc3QgYm90dG9tUGxhdGVDZW50ZXJUb0dsb2JhbCA9IHRoaXMuY2FwYWNpdG9yQ2lyY3VpdEVsZW1lbnRMaWZlbGlrZU5vZGUuZ2V0Qm90dG9tUGxhdGVDbGlwU2hhcGVUb0dsb2JhbCgpO1xyXG4gICAgICByaWdodFdpcmVTdHViLmNsaXBBcmVhID0gYm90dG9tUGxhdGVDZW50ZXJUb0dsb2JhbC50cmFuc2Zvcm1lZCggcmlnaHRXaXJlU3R1Yi5nZXRHbG9iYWxUb0xvY2FsTWF0cml4KCkgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VDYXBhY2l0b3JDaXJjdWl0RWxlbWVudE5vZGUgPSAoKSA9PiB7XHJcbiAgICAgIGNhcGFjaXRhbmNlVm9sdGFnZUxpc3RlbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgbGlmZWxpa2VOb2RlLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUNhcGFjaXRvckNpcmN1aXRFbGVtZW50Tm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBub2RlIGhpdHMgdGhlIHNlbnNvciBhdCB0aGUgZ2l2ZW4gcG9pbnQuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGNvbnRhaW5zU2Vuc29yUG9pbnQoIGdsb2JhbFBvaW50OiBWZWN0b3IyICk6IGJvb2xlYW4ge1xyXG5cclxuICAgIC8vIG1ha2Ugc3VyZSBib3VuZHMgYXJlIGNvcnJlY3QgaWYgY3V0IG9yIGpvaW5lZCBpbiB0aGlzIGFuaW1hdGlvbiBmcmFtZVxyXG4gICAgdGhpcy5zdGVwKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZnJvbnRTaWRlQ29udGFpbnNTZW5zb3JQb2ludCggZ2xvYmFsUG9pbnQgKSB8fCB0aGlzLmJhY2tTaWRlQ29udGFpbnNTZW5zb3JQb2ludCggZ2xvYmFsUG9pbnQgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZSB3aGV0aGVyIHRoZSBzdGFydCBzaWRlICh3aXRoIHRoZSBwaXZvdCkgY29udGFpbnMgdGhlIHNlbnNvciBwb2ludC5cclxuICAgKi9cclxuICBwdWJsaWMgZnJvbnRTaWRlQ29udGFpbnNTZW5zb3JQb2ludCggZ2xvYmFsUG9pbnQ6IFZlY3RvcjIgKTogYm9vbGVhbiB7XHJcblxyXG4gICAgaWYgKCB0aGlzLnZpZXdUeXBlUHJvcGVydHkudmFsdWUgPT09IENpcmN1aXRFbGVtZW50Vmlld1R5cGUuTElGRUxJS0UgKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNhcGFjaXRvckNpcmN1aXRFbGVtZW50TGlmZWxpa2VOb2RlLmZyb250U2lkZUNvbnRhaW5zU2Vuc29yUG9pbnQoIGdsb2JhbFBvaW50ICkgfHxcclxuICAgICAgICAgICAgIHRoaXMubGVmdFdpcmVTdHViLmNvbnRhaW5zUG9pbnQoIHRoaXMubGVmdFdpcmVTdHViLmdsb2JhbFRvUGFyZW50UG9pbnQoIGdsb2JhbFBvaW50ICkgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5sZWZ0U2NoZW1hdGljSGl0QXJlYVBhdGguY29udGFpbnNQb2ludCggdGhpcy5sZWZ0U2NoZW1hdGljSGl0QXJlYVBhdGguZ2xvYmFsVG9QYXJlbnRQb2ludCggZ2xvYmFsUG9pbnQgKSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGVuZCBzaWRlICh3aXRoIHRoZSBwaXZvdCkgY29udGFpbnMgdGhlIHNlbnNvciBwb2ludC5cclxuICAgKi9cclxuICBwdWJsaWMgYmFja1NpZGVDb250YWluc1NlbnNvclBvaW50KCBnbG9iYWxQb2ludDogVmVjdG9yMiApOiBib29sZWFuIHtcclxuXHJcbiAgICBpZiAoIHRoaXMudmlld1R5cGVQcm9wZXJ0eS52YWx1ZSA9PT0gQ2lyY3VpdEVsZW1lbnRWaWV3VHlwZS5MSUZFTElLRSApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY2FwYWNpdG9yQ2lyY3VpdEVsZW1lbnRMaWZlbGlrZU5vZGUuYmFja1NpZGVDb250YWluc1NlbnNvclBvaW50KCBnbG9iYWxQb2ludCApIHx8XHJcbiAgICAgICAgICAgICB0aGlzLnJpZ2h0V2lyZVN0dWIuY29udGFpbnNQb2ludCggdGhpcy5yaWdodFdpcmVTdHViLmdsb2JhbFRvUGFyZW50UG9pbnQoIGdsb2JhbFBvaW50ICkgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5yaWdodFNjaGVtYXRpY0hpdEFyZWFQYXRoLmNvbnRhaW5zUG9pbnQoIHRoaXMucmlnaHRTY2hlbWF0aWNIaXRBcmVhUGF0aC5nbG9iYWxUb1BhcmVudFBvaW50KCBnbG9iYWxQb2ludCApICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBib3VuZHMgZm9yIHRoZSBoaWdobGlnaHQgcmVjdGFuZ2xlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBnZXRIaWdobGlnaHRCb3VuZHMoKTogQm91bmRzMiB7XHJcbiAgICByZXR1cm4gdGhpcy52aWV3VHlwZVByb3BlcnR5LnZhbHVlID09PSBDaXJjdWl0RWxlbWVudFZpZXdUeXBlLkxJRkVMSUtFID9cclxuICAgICAgICAgICB0aGlzLmNvbnRlbnROb2RlLmxvY2FsQm91bmRzLmVyb2RlZFgoIDIyICkuZXJvZGVkWSggMTUgKSA6XHJcbiAgICAgICAgICAgdGhpcy5jb250ZW50Tm9kZS5sb2NhbEJvdW5kcy5kaWxhdGVkWCggMTAgKS5kaWxhdGVkWSggMTAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24ucmVnaXN0ZXIoICdDYXBhY2l0b3JDaXJjdWl0RWxlbWVudE5vZGUnLCBDYXBhY2l0b3JDaXJjdWl0RWxlbWVudE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHFDQUFxQztBQUNqRSxPQUFPQyxjQUFjLE1BQU0sb0NBQW9DO0FBQy9ELE9BQU9DLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsT0FBTyxNQUFNLDRCQUE0QjtBQUNoRCxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELFNBQVNDLEtBQUssUUFBUSw2QkFBNkI7QUFDbkQsT0FBT0MsV0FBVyxNQUFNLHNDQUFzQztBQUM5RCxPQUFPQyxrQkFBa0IsTUFBTSwwREFBMEQ7QUFDekYsT0FBT0MsYUFBYSxNQUFNLHFEQUFxRDtBQUMvRSxPQUFPQywyQkFBMkIsTUFBTSxtRUFBbUU7QUFDM0csU0FBU0MsS0FBSyxFQUFFQyxLQUFLLEVBQWdCQyxJQUFJLEVBQUVDLElBQUksUUFBUSxnQ0FBZ0M7QUFDdkYsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxZQUFZLE1BQU0sOEJBQThCO0FBQ3ZELE9BQU9DLGFBQWEsTUFBTSxxQkFBcUI7QUFDL0MsT0FBT0MsNEJBQTRCLE1BQU0sb0NBQW9DO0FBRTdFLE9BQU9DLHNCQUFzQixNQUFNLG9DQUFvQztBQUd2RSxPQUFPQyx1QkFBdUIsTUFBMEMsOEJBQThCO0FBR3RHLE9BQU9DLFNBQVMsTUFBTSwrQkFBK0I7QUFDckQsU0FBU0MsY0FBYyxRQUFRLG9DQUFvQzs7QUFFbkU7QUFDQTtBQUNBLE1BQU1DLG9CQUFvQixHQUFHLEdBQUc7QUFDaEMsTUFBTUMsb0JBQW9CLEdBQUcsR0FBRztBQUNoQyxNQUFNQyxLQUFLLEdBQUcsR0FBRztBQUNqQixNQUFNQyxHQUFHLEdBQUcsRUFBRTtBQUNkLE1BQU1DLGFBQWEsR0FBR0YsS0FBSyxHQUFHLENBQUMsR0FBR0MsR0FBRyxHQUFHLENBQUM7QUFDekMsTUFBTUUsY0FBYyxHQUFHSCxLQUFLLEdBQUcsQ0FBQyxHQUFHQyxHQUFHLEdBQUcsQ0FBQzs7QUFFMUM7QUFDQTtBQUNBLElBQUlHLGtCQUFrQixHQUFHLElBQUl2QixLQUFLLENBQUMsQ0FBQyxDQUNqQ3dCLE1BQU0sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUM7QUFBQSxDQUNmQyxNQUFNLENBQUVKLGFBQWEsRUFBRSxDQUFFLENBQUMsQ0FDMUJHLE1BQU0sQ0FBRUgsYUFBYSxFQUFFSixvQkFBb0IsR0FBRyxDQUFFLENBQUMsQ0FBQztBQUFBLENBQ2xEUSxNQUFNLENBQUVKLGFBQWEsRUFBRSxDQUFDSixvQkFBb0IsR0FBRyxDQUFFLENBQUM7QUFFckQsSUFBSVMsbUJBQW1CLEdBQUcsSUFBSTFCLEtBQUssQ0FBQyxDQUFDLENBQ2xDd0IsTUFBTSxDQUFFRixjQUFjLEVBQUUsQ0FBRSxDQUFDLENBQUM7QUFBQSxDQUM1QkcsTUFBTSxDQUFFTixLQUFLLEVBQUUsQ0FBRSxDQUFDLENBQ2xCSyxNQUFNLENBQUVGLGNBQWMsRUFBRUosb0JBQW9CLEdBQUcsQ0FBRSxDQUFDLENBQUM7QUFBQSxDQUNuRE8sTUFBTSxDQUFFSCxjQUFjLEVBQUUsQ0FBQ0osb0JBQW9CLEdBQUcsQ0FBRSxDQUFDOztBQUV0RDtBQUNBLE1BQU1TLGVBQWUsR0FBR2hCLGFBQWEsQ0FBQ2lCLGdCQUFnQixHQUFHVCxLQUFLOztBQUU5RDtBQUNBSSxrQkFBa0IsR0FBR0Esa0JBQWtCLENBQUNNLFdBQVcsQ0FBRTlCLE9BQU8sQ0FBQytCLEtBQUssQ0FBRUgsZUFBZSxFQUFFQSxlQUFnQixDQUFFLENBQUM7QUFDeEdELG1CQUFtQixHQUFHQSxtQkFBbUIsQ0FBQ0csV0FBVyxDQUFFOUIsT0FBTyxDQUFDK0IsS0FBSyxDQUFFSCxlQUFlLEVBQUVBLGVBQWdCLENBQUUsQ0FBQztBQUUxRyxlQUFlLE1BQU1JLDJCQUEyQixTQUFTakIsdUJBQXVCLENBQUM7RUFHL0U7O0VBR0E7O0VBVUE7RUFDQSxPQUFnQ2tCLGdCQUFnQixHQUFHLENBQUUsSUFBSTFCLEtBQUssQ0FBRUksWUFBYSxDQUFDLENBQUU7O0VBRWhGO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU3VCLFdBQVdBLENBQUVDLFVBQWlDLEVBQUVDLFdBQStCLEVBQUVDLFNBQW9CLEVBQUVDLGdCQUFrRCxFQUFFQyxNQUFjLEVBQUVDLGVBQWdELEVBQUc7SUFFbk9BLGVBQWUsR0FBR3ZCLGNBQWMsQ0FBa0M7TUFDaEV3QixNQUFNLEVBQUU7SUFDVixDQUFDLEVBQUVELGVBQWdCLENBQUM7SUFFcEIsTUFBTUUsZUFBZSxHQUFHO01BRXRCO01BQ0FDLFFBQVEsRUFBRTtJQUNaLENBQUM7SUFFRCxNQUFNQyxTQUFTLEdBQUcsbUJBQW1CO0lBQ3JDLE1BQU1DLFdBQVcsR0FBRyxJQUFJOUMsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFNkMsU0FBUyxFQUFFekMsa0JBQWtCLENBQUMyQyxZQUFZLEVBQUVGLFNBQVUsQ0FBQztJQUNqRyxNQUFNRyx1QkFBdUIsR0FBRyxJQUFJbEQsY0FBYyxDQUFFLEtBQU0sQ0FBQzs7SUFFM0Q7SUFDQTtJQUNBO0lBQ0EsTUFBTW1ELE9BQU8sR0FBRztNQUNkQyxjQUFjLEVBQUUsVUFBVTtNQUMxQlosU0FBUyxFQUFFO1FBQ1RhLGlCQUFpQixFQUFFLElBQUlwRCxRQUFRLENBQUUrQyxXQUFZLENBQUM7UUFDOUNFLHVCQUF1QixFQUFFQSx1QkFBdUI7UUFDaERJLG9CQUFvQixFQUFFLElBQUl0RCxjQUFjLENBQUUsR0FBSSxDQUFDO1FBQy9DdUQsbUJBQW1CLEVBQUUsSUFBSXZELGNBQWMsQ0FBRSxDQUFFLENBQUM7UUFDNUN3RCxrQkFBa0IsRUFBRUEsQ0FBQSxLQUFNO01BQzVCO0lBQ0YsQ0FBQztJQUVELE1BQU1DLGtCQUFrQixHQUFHLElBQUlqRCwyQkFBMkIsQ0FBQyxDQUFDO0lBQzVELE1BQU1rRCwwQkFBMEIsR0FBRyxJQUFJM0QsZUFBZSxDQUFFLElBQUssQ0FBQztJQUM5RCxNQUFNNEQsNEJBQTRCLEdBQUcsSUFBSTVELGVBQWUsQ0FBRSxJQUFLLENBQUM7SUFFaEUsTUFBTTZELFlBQVksR0FBRyxJQUFJckQsYUFBYSxDQUFFNEMsT0FBTyxFQUFFTSxrQkFBa0IsRUFBRUMsMEJBQTBCLEVBQUVDLDRCQUE0QixFQUFFO01BQzdIakIsTUFBTSxFQUFFN0IsTUFBTSxDQUFDZ0QsUUFBUTtNQUN2QkMsV0FBVyxFQUFFekQsV0FBVyxDQUFDMEQsVUFBVTtNQUFFO01BQ3JDQyxpQkFBaUIsRUFBRSxDQUFDckIsZUFBZSxDQUFDQyxNQUFNO01BQzFDVixLQUFLLEVBQUUsSUFBSTtNQUNYK0IsUUFBUSxFQUFFLENBQUNDLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUM7TUFDdEJDLE9BQU8sRUFBRTVCLFNBQVMsQ0FBQzZCLHVCQUF1QixHQUFHLENBQUM7TUFDOUNDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDYixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQywwQkFBMEIsR0FBR3BELFNBQVMsQ0FBQ3FELFNBQVMsQ0FBRSxDQUN0RGhDLFNBQVMsQ0FBQ2lDLG1CQUFtQixFQUM3QmpDLFNBQVMsQ0FBQ2tDLHlCQUF5QixDQUNwQyxFQUFFLENBQUVDLENBQVMsRUFBRUMsQ0FBUyxLQUFNO01BRTdCLElBQUlDLENBQUMsR0FBRyxLQUFLLEdBQUdGLENBQUMsR0FBR0MsQ0FBQzs7TUFFckI7TUFDQSxJQUFLVixJQUFJLENBQUNZLEdBQUcsQ0FBRUQsQ0FBRSxDQUFDLEdBQUcsS0FBSyxFQUFHO1FBQzNCQSxDQUFDLEdBQUcsQ0FBQztNQUNQO01BQ0ExQixPQUFPLENBQUNYLFNBQVMsQ0FBQ2UsbUJBQW1CLENBQUN3QixHQUFHLENBQUUsQ0FBQ0YsQ0FBRSxDQUFDO0lBQ2pELENBQUUsQ0FBQztJQUVILE1BQU1HLFlBQVksR0FBRyxJQUFJdEUsS0FBSyxDQUFFSSxZQUFZLEVBQUVNLGNBQWMsQ0FBZ0I7TUFDMUVnRCxPQUFPLEVBQUVSLFlBQVksQ0FBQ1EsT0FBTztNQUM3QkUsT0FBTyxFQUFFVixZQUFZLENBQUNVO0lBQ3hCLENBQUMsRUFBRXpCLGVBQWdCLENBQUUsQ0FBQztJQUN0QixNQUFNb0MsYUFBYSxHQUFHLElBQUl2RSxLQUFLLENBQUVJLFlBQVksRUFBRU0sY0FBYyxDQUFnQjtNQUMzRWdELE9BQU8sRUFBRVIsWUFBWSxDQUFDUSxPQUFPO01BQzdCRSxPQUFPLEVBQUVWLFlBQVksQ0FBQ1U7SUFDeEIsQ0FBQyxFQUFFekIsZUFBZ0IsQ0FBRSxDQUFDO0lBRXRCLE1BQU1xQyxvQkFBb0IsR0FBRztNQUMzQkMsTUFBTSxFQUFFMUUsS0FBSyxDQUFDMkUsS0FBSztNQUNuQkMsU0FBUyxFQUFFdEUsYUFBYSxDQUFDdUUsb0JBQW9CO01BQzdDQyxjQUFjLEVBQUUsSUFBSTtNQUNwQnpDLFFBQVEsRUFBRSxJQUFJLENBQUM7SUFDakIsQ0FBQzs7SUFFRCxNQUFNMEMsMkJBQTJCLEdBQUc7TUFDbENMLE1BQU0sRUFBRSxJQUFJO01BQ1pFLFNBQVMsRUFBRSxFQUFFO01BQ2JFLGNBQWMsRUFBRSxJQUFJO01BQ3BCekMsUUFBUSxFQUFFLElBQUksQ0FBQztJQUNqQixDQUFDOztJQUNELE1BQU0yQyxpQkFBaUIsR0FBRyxJQUFJN0UsSUFBSSxDQUFFZSxrQkFBa0IsRUFBRXVELG9CQUFxQixDQUFDO0lBQzlFLE1BQU1RLGtCQUFrQixHQUFHLElBQUk5RSxJQUFJLENBQUVrQixtQkFBbUIsRUFBRW9ELG9CQUFxQixDQUFDOztJQUVoRjtJQUNBLE1BQU1TLGFBQWEsR0FBRyxJQUFJaEYsSUFBSSxDQUFFO01BQzlCaUYsUUFBUSxFQUFFLENBQUVILGlCQUFpQixFQUFFQyxrQkFBa0I7SUFDbkQsQ0FBRSxDQUFDOztJQUVIO0lBQ0FDLGFBQWEsQ0FBQ0UsU0FBUyxHQUFHRixhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsT0FBTyxDQUFFLENBQUUsQ0FBQztJQUNoRUosYUFBYSxDQUFDSyxTQUFTLEdBQUdMLGFBQWEsQ0FBQ0csV0FBVyxDQUFDQyxPQUFPLENBQUUsQ0FBRSxDQUFDOztJQUVoRTtJQUNBbkMsWUFBWSxDQUFDaUMsU0FBUyxHQUFHakMsWUFBWSxDQUFDa0MsV0FBVyxDQUFDRyxPQUFPLENBQUUsRUFBRyxDQUFDLENBQUNDLFFBQVEsQ0FBRSxFQUFHLENBQUM7SUFDOUV0QyxZQUFZLENBQUNvQyxTQUFTLEdBQUdwQyxZQUFZLENBQUNrQyxXQUFXLENBQUNHLE9BQU8sQ0FBRSxFQUFHLENBQUMsQ0FBQ0MsUUFBUSxDQUFFLEVBQUcsQ0FBQztJQUU5RSxNQUFNQyxxQkFBcUIsR0FBRyxJQUFJeEYsSUFBSSxDQUFFO01BQ3RDaUYsUUFBUSxFQUFFLENBQUVoQyxZQUFZLEVBQUVvQixZQUFZLEVBQUVDLGFBQWE7SUFDdkQsQ0FBRSxDQUFDO0lBQ0gsS0FBSyxDQUNIM0MsVUFBVSxFQUNWQyxXQUFXLEVBQ1hDLFNBQVMsRUFDVEMsZ0JBQWdCLEVBQ2hCMEQscUJBQXFCLEVBQ3JCUixhQUFhLEVBQ2JqRCxNQUFNLEVBQ05DLGVBQ0YsQ0FBQztJQUVELElBQUksQ0FBQ0gsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQzRELG1DQUFtQyxHQUFHeEMsWUFBWTtJQUN2RCxJQUFJLENBQUN5QyxvQ0FBb0MsR0FBR1YsYUFBYTtJQUV6RCxJQUFJLENBQUNYLFlBQVksR0FBR0EsWUFBWTtJQUNoQyxJQUFJLENBQUNDLGFBQWEsR0FBR0EsYUFBYTtJQUVsQyxJQUFJLENBQUNRLGlCQUFpQixHQUFHQSxpQkFBaUI7SUFDMUMsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR0Esa0JBQWtCO0lBQzVDLElBQUksQ0FBQ1ksd0JBQXdCLEdBQUcsSUFBSTFGLElBQUksQ0FBRWUsa0JBQWtCLEVBQUU2RCwyQkFBNEIsQ0FBQztJQUMzRixJQUFJLENBQUNlLHlCQUF5QixHQUFHLElBQUkzRixJQUFJLENBQUVrQixtQkFBbUIsRUFBRTBELDJCQUE0QixDQUFDO0lBRTdGRyxhQUFhLENBQUNhLFFBQVEsQ0FBRSxJQUFJLENBQUNGLHdCQUF5QixDQUFDO0lBQ3ZEWCxhQUFhLENBQUNhLFFBQVEsQ0FBRSxJQUFJLENBQUNELHlCQUEwQixDQUFDO0lBQ3hEL0QsU0FBUyxDQUFDaUMsbUJBQW1CLENBQUNnQyxJQUFJLENBQUVDLFdBQVcsSUFBSTtNQUVqRDtNQUNBLE1BQU1DLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSzs7TUFFckI7TUFDQXpELHVCQUF1QixDQUFDMEQsS0FBSyxHQUFHRCxDQUFDLEdBQUdELFdBQVc7O01BRS9DO01BQ0EsTUFBTUcsc0JBQXNCLEdBQUcsSUFBSSxDQUFDVCxtQ0FBbUMsQ0FBQ1UsNEJBQTRCLENBQUMsQ0FBQztNQUN0RzlCLFlBQVksQ0FBQytCLFFBQVEsR0FBR0Ysc0JBQXNCLENBQUM1RSxXQUFXLENBQUUrQyxZQUFZLENBQUNnQyxzQkFBc0IsQ0FBQyxDQUFFLENBQUM7TUFFbkcsTUFBTUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDYixtQ0FBbUMsQ0FBQ2MsK0JBQStCLENBQUMsQ0FBQztNQUM1R2pDLGFBQWEsQ0FBQzhCLFFBQVEsR0FBR0UseUJBQXlCLENBQUNoRixXQUFXLENBQUVnRCxhQUFhLENBQUMrQixzQkFBc0IsQ0FBQyxDQUFFLENBQUM7SUFDMUcsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDRyxrQ0FBa0MsR0FBRyxNQUFNO01BQzlDNUMsMEJBQTBCLENBQUM2QyxPQUFPLENBQUMsQ0FBQztNQUNwQ3hELFlBQVksQ0FBQ3dELE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0Qsa0NBQWtDLENBQUMsQ0FBQztJQUN6QyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsbUJBQW1CQSxDQUFFQyxXQUFvQixFQUFZO0lBRW5FO0lBQ0EsSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQztJQUVYLE9BQU8sSUFBSSxDQUFDQyw0QkFBNEIsQ0FBRUYsV0FBWSxDQUFDLElBQUksSUFBSSxDQUFDRywyQkFBMkIsQ0FBRUgsV0FBWSxDQUFDO0VBQzVHOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRSw0QkFBNEJBLENBQUVGLFdBQW9CLEVBQVk7SUFFbkUsSUFBSyxJQUFJLENBQUM3RSxnQkFBZ0IsQ0FBQ21FLEtBQUssS0FBSzNGLHNCQUFzQixDQUFDeUcsUUFBUSxFQUFHO01BQ3JFLE9BQU8sSUFBSSxDQUFDdEIsbUNBQW1DLENBQUNvQiw0QkFBNEIsQ0FBRUYsV0FBWSxDQUFDLElBQ3BGLElBQUksQ0FBQ3RDLFlBQVksQ0FBQzJDLGFBQWEsQ0FBRSxJQUFJLENBQUMzQyxZQUFZLENBQUM0QyxtQkFBbUIsQ0FBRU4sV0FBWSxDQUFFLENBQUM7SUFDaEcsQ0FBQyxNQUNJO01BQ0gsT0FBTyxJQUFJLENBQUNoQix3QkFBd0IsQ0FBQ3FCLGFBQWEsQ0FBRSxJQUFJLENBQUNyQix3QkFBd0IsQ0FBQ3NCLG1CQUFtQixDQUFFTixXQUFZLENBQUUsQ0FBQztJQUN4SDtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRywyQkFBMkJBLENBQUVILFdBQW9CLEVBQVk7SUFFbEUsSUFBSyxJQUFJLENBQUM3RSxnQkFBZ0IsQ0FBQ21FLEtBQUssS0FBSzNGLHNCQUFzQixDQUFDeUcsUUFBUSxFQUFHO01BQ3JFLE9BQU8sSUFBSSxDQUFDdEIsbUNBQW1DLENBQUNxQiwyQkFBMkIsQ0FBRUgsV0FBWSxDQUFDLElBQ25GLElBQUksQ0FBQ3JDLGFBQWEsQ0FBQzBDLGFBQWEsQ0FBRSxJQUFJLENBQUMxQyxhQUFhLENBQUMyQyxtQkFBbUIsQ0FBRU4sV0FBWSxDQUFFLENBQUM7SUFDbEcsQ0FBQyxNQUNJO01BQ0gsT0FBTyxJQUFJLENBQUNmLHlCQUF5QixDQUFDb0IsYUFBYSxDQUFFLElBQUksQ0FBQ3BCLHlCQUF5QixDQUFDcUIsbUJBQW1CLENBQUVOLFdBQVksQ0FBRSxDQUFDO0lBQzFIO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCTyxrQkFBa0JBLENBQUEsRUFBWTtJQUM1QyxPQUFPLElBQUksQ0FBQ3BGLGdCQUFnQixDQUFDbUUsS0FBSyxLQUFLM0Ysc0JBQXNCLENBQUN5RyxRQUFRLEdBQy9ELElBQUksQ0FBQ0ksV0FBVyxDQUFDaEMsV0FBVyxDQUFDRyxPQUFPLENBQUUsRUFBRyxDQUFDLENBQUM4QixPQUFPLENBQUUsRUFBRyxDQUFDLEdBQ3hELElBQUksQ0FBQ0QsV0FBVyxDQUFDaEMsV0FBVyxDQUFDa0MsUUFBUSxDQUFFLEVBQUcsQ0FBQyxDQUFDOUIsUUFBUSxDQUFFLEVBQUcsQ0FBQztFQUNuRTtBQUNGO0FBRUFsRiw0QkFBNEIsQ0FBQ2lILFFBQVEsQ0FBRSw2QkFBNkIsRUFBRTlGLDJCQUE0QixDQUFDIn0=