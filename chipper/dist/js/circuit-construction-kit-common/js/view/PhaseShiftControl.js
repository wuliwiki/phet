// Copyright 2019-2023, University of Colorado Boulder

/**
 * Control that allows the user to change the phase of the ac voltage source on the AC Lab Screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import Property from '../../../axon/js/Property.js';
import Range from '../../../dot/js/Range.js';
import MathSymbols from '../../../scenery-phet/js/MathSymbols.js';
import { Text, VBox } from '../../../scenery/js/imports.js';
import NumberSpinner from '../../../sun/js/NumberSpinner.js';
import CCKCConstants from '../CCKCConstants.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import CircuitConstructionKitCommonStrings from '../CircuitConstructionKitCommonStrings.js';
import CircuitElementNumberControl from './CircuitElementNumberControl.js';
import ACVoltage from '../model/ACVoltage.js';
import Multilink from '../../../axon/js/Multilink.js';
import { combineOptions } from '../../../phet-core/js/optionize.js';
import CCKCColors from './CCKCColors.js';
export default class PhaseShiftControl extends VBox {
  constructor(phaseProperty, circuit, providedOptions) {
    providedOptions = combineOptions({
      spacing: 7
    }, providedOptions);
    assert && assert(!providedOptions.children, 'children not supported');
    const valueRangeProperty = new Property(new Range(-180, 180));
    const enabledProperty = new BooleanProperty(true);

    // options for all spinners
    const spinnerOptions = {
      enabledProperty: enabledProperty,
      deltaValue: 15,
      numberDisplayOptions: {
        align: 'center',
        decimalPlaces: 0,
        xMargin: 10,
        yMargin: 3,
        minBackgroundWidth: 60,
        textOptions: {
          font: CCKCConstants.DEFAULT_FONT
        },
        valuePattern: `{{value}}${MathSymbols.DEGREES}` // Does not require internationalization
      },

      arrowsPosition: 'leftRight',
      arrowsScale: 0.9,
      tandem: providedOptions.tandem.createTandem('numberSpinner')
    };
    const title = new Text(CircuitConstructionKitCommonStrings.phaseShiftStringProperty, {
      font: CCKCConstants.DEFAULT_FONT,
      maxWidth: CircuitElementNumberControl.NUMBER_CONTROL_ELEMENT_MAX_WIDTH,
      fill: CCKCColors.textFillProperty
    });
    const numberSpinner = new NumberSpinner(phaseProperty, valueRangeProperty, spinnerOptions);
    providedOptions.children = [title, numberSpinner];
    super(providedOptions);
    const listener = (isPhaseEditable, isEditable) => {
      this.visible = isPhaseEditable && isEditable;
    };
    let multilink = null;

    // This is reused across all instances. The control itself can be hidden by PhET-iO customization, but the parent
    // node is another gate for the visibility.
    circuit.selectionProperty.link((newCircuitElement, oldCircuitElement) => {
      oldCircuitElement instanceof ACVoltage && multilink && Multilink.unmultilink(multilink);
      if (newCircuitElement instanceof ACVoltage) {
        multilink = Multilink.multilink([newCircuitElement.isPhaseEditableProperty, newCircuitElement.isEditableProperty], listener);
      }
    });
  }
}
circuitConstructionKitCommon.register('PhaseShiftControl', PhaseShiftControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,