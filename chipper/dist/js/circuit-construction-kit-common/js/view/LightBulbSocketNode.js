// Copyright 2015-2023, University of Colorado Boulder

/**
 * Shows the socket (base) of the light bulb only, so that it will appear that the charges go "inside" the base.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import Matrix3 from '../../../dot/js/Matrix3.js';
import { combineOptions } from '../../../phet-core/js/optionize.js';
import { Rectangle } from '../../../scenery/js/imports.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import CustomLightBulbNode from './CustomLightBulbNode.js';
import FixedCircuitElementNode from './FixedCircuitElementNode.js';

// constants
const SCRATCH_MATRIX = new Matrix3();
export default class LightBulbSocketNode extends FixedCircuitElementNode {
  /**
   * @param screenView - main screen view, null for icon
   * @param circuitNode, null for icon
   * @param lightBulb - the light bulb model
   * @param viewTypeProperty
   * @param tandem
   * @param [providedOptions]
   */
  constructor(screenView, circuitNode, lightBulb, viewTypeProperty, tandem, providedOptions) {
    // Render the bulb socket only
    const lightBulbNode = new CustomLightBulbNode(new NumberProperty(0), {
      baseOnly: true,
      isExtreme: lightBulb.isExtreme,
      isReal: lightBulb.isReal
    });

    // Interferes with Cut Button selection when the foreground is in front, see
    // https://github.com/phetsims/circuit-construction-kit-black-box-study/issues/18
    providedOptions = combineOptions({
      pickable: false,
      // Suppress the highlight for the socket, the highlight is shown by the CCKCLightBulbNode
      showHighlight: false
    }, providedOptions);
    super(screenView, circuitNode, lightBulb, viewTypeProperty, lightBulbNode, new Rectangle(0, 0, 10, 10), tandem, providedOptions);
  }

  /**
   * Multiple updates may happen per frame, they are batched and updated once in the view step to improve performance.
   * CCKCLightBulbNode calls updateRender for its child socket node
   */
  updateRender() {
    const startPosition = this.circuitElement.startPositionProperty.get();
    const endPosition = this.circuitElement.endPositionProperty.get();
    const angle = endPosition.minus(startPosition).angle + Math.PI / 4;

    // Update the node transform in a single step, see #66
    this.contentNode.setMatrix(SCRATCH_MATRIX.setToTranslationRotationPoint(startPosition, angle));
  }

  /**
   * Maintain the opacity of the brightness lines while changing the opacity of the light bulb itself.
   */
  updateOpacityOnInteractiveChange() {

    // TODO (black-box-study): Make the light bulb images look faded out.
  }
}
circuitConstructionKitCommon.register('LightBulbSocketNode', LightBulbSocketNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIk1hdHJpeDMiLCJjb21iaW5lT3B0aW9ucyIsIlJlY3RhbmdsZSIsImNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24iLCJDdXN0b21MaWdodEJ1bGJOb2RlIiwiRml4ZWRDaXJjdWl0RWxlbWVudE5vZGUiLCJTQ1JBVENIX01BVFJJWCIsIkxpZ2h0QnVsYlNvY2tldE5vZGUiLCJjb25zdHJ1Y3RvciIsInNjcmVlblZpZXciLCJjaXJjdWl0Tm9kZSIsImxpZ2h0QnVsYiIsInZpZXdUeXBlUHJvcGVydHkiLCJ0YW5kZW0iLCJwcm92aWRlZE9wdGlvbnMiLCJsaWdodEJ1bGJOb2RlIiwiYmFzZU9ubHkiLCJpc0V4dHJlbWUiLCJpc1JlYWwiLCJwaWNrYWJsZSIsInNob3dIaWdobGlnaHQiLCJ1cGRhdGVSZW5kZXIiLCJzdGFydFBvc2l0aW9uIiwiY2lyY3VpdEVsZW1lbnQiLCJzdGFydFBvc2l0aW9uUHJvcGVydHkiLCJnZXQiLCJlbmRQb3NpdGlvbiIsImVuZFBvc2l0aW9uUHJvcGVydHkiLCJhbmdsZSIsIm1pbnVzIiwiTWF0aCIsIlBJIiwiY29udGVudE5vZGUiLCJzZXRNYXRyaXgiLCJzZXRUb1RyYW5zbGF0aW9uUm90YXRpb25Qb2ludCIsInVwZGF0ZU9wYWNpdHlPbkludGVyYWN0aXZlQ2hhbmdlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMaWdodEJ1bGJTb2NrZXROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNob3dzIHRoZSBzb2NrZXQgKGJhc2UpIG9mIHRoZSBsaWdodCBidWxiIG9ubHksIHNvIHRoYXQgaXQgd2lsbCBhcHBlYXIgdGhhdCB0aGUgY2hhcmdlcyBnbyBcImluc2lkZVwiIHRoZSBiYXNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tICcuLi8uLi8uLi9kb3QvanMvTWF0cml4My5qcyc7XHJcbmltcG9ydCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uIGZyb20gJy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24uanMnO1xyXG5pbXBvcnQgQ2lyY3VpdEVsZW1lbnRWaWV3VHlwZSBmcm9tICcuLi9tb2RlbC9DaXJjdWl0RWxlbWVudFZpZXdUeXBlLmpzJztcclxuaW1wb3J0IExpZ2h0QnVsYiBmcm9tICcuLi9tb2RlbC9MaWdodEJ1bGIuanMnO1xyXG5pbXBvcnQgQ0NLQ1NjcmVlblZpZXcgZnJvbSAnLi9DQ0tDU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBDaXJjdWl0Tm9kZSBmcm9tICcuL0NpcmN1aXROb2RlLmpzJztcclxuaW1wb3J0IEN1c3RvbUxpZ2h0QnVsYk5vZGUgZnJvbSAnLi9DdXN0b21MaWdodEJ1bGJOb2RlLmpzJztcclxuaW1wb3J0IEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlLCB7IEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlT3B0aW9ucyB9IGZyb20gJy4vRml4ZWRDaXJjdWl0RWxlbWVudE5vZGUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFNDUkFUQ0hfTUFUUklYID0gbmV3IE1hdHJpeDMoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpZ2h0QnVsYlNvY2tldE5vZGUgZXh0ZW5kcyBGaXhlZENpcmN1aXRFbGVtZW50Tm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzY3JlZW5WaWV3IC0gbWFpbiBzY3JlZW4gdmlldywgbnVsbCBmb3IgaWNvblxyXG4gICAqIEBwYXJhbSBjaXJjdWl0Tm9kZSwgbnVsbCBmb3IgaWNvblxyXG4gICAqIEBwYXJhbSBsaWdodEJ1bGIgLSB0aGUgbGlnaHQgYnVsYiBtb2RlbFxyXG4gICAqIEBwYXJhbSB2aWV3VHlwZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHRhbmRlbVxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc2NyZWVuVmlldzogQ0NLQ1NjcmVlblZpZXcgfCBudWxsLCBjaXJjdWl0Tm9kZTogQ2lyY3VpdE5vZGUgfCBudWxsLCBsaWdodEJ1bGI6IExpZ2h0QnVsYixcclxuICAgICAgICAgICAgICAgICAgICAgIHZpZXdUeXBlUHJvcGVydHk6IFByb3BlcnR5PENpcmN1aXRFbGVtZW50Vmlld1R5cGU+LCB0YW5kZW06IFRhbmRlbSwgcHJvdmlkZWRPcHRpb25zPzogRml4ZWRDaXJjdWl0RWxlbWVudE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIC8vIFJlbmRlciB0aGUgYnVsYiBzb2NrZXQgb25seVxyXG4gICAgY29uc3QgbGlnaHRCdWxiTm9kZSA9IG5ldyBDdXN0b21MaWdodEJ1bGJOb2RlKCBuZXcgTnVtYmVyUHJvcGVydHkoIDAgKSwge1xyXG4gICAgICBiYXNlT25seTogdHJ1ZSxcclxuICAgICAgaXNFeHRyZW1lOiBsaWdodEJ1bGIuaXNFeHRyZW1lLFxyXG4gICAgICBpc1JlYWw6IGxpZ2h0QnVsYi5pc1JlYWxcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBJbnRlcmZlcmVzIHdpdGggQ3V0IEJ1dHRvbiBzZWxlY3Rpb24gd2hlbiB0aGUgZm9yZWdyb3VuZCBpcyBpbiBmcm9udCwgc2VlXHJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2lyY3VpdC1jb25zdHJ1Y3Rpb24ta2l0LWJsYWNrLWJveC1zdHVkeS9pc3N1ZXMvMThcclxuICAgIHByb3ZpZGVkT3B0aW9ucyA9IGNvbWJpbmVPcHRpb25zPEZpeGVkQ2lyY3VpdEVsZW1lbnROb2RlT3B0aW9ucz4oIHtcclxuICAgICAgcGlja2FibGU6IGZhbHNlLFxyXG5cclxuICAgICAgLy8gU3VwcHJlc3MgdGhlIGhpZ2hsaWdodCBmb3IgdGhlIHNvY2tldCwgdGhlIGhpZ2hsaWdodCBpcyBzaG93biBieSB0aGUgQ0NLQ0xpZ2h0QnVsYk5vZGVcclxuICAgICAgc2hvd0hpZ2hsaWdodDogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gICAgc3VwZXIoIHNjcmVlblZpZXcsIGNpcmN1aXROb2RlLCBsaWdodEJ1bGIsIHZpZXdUeXBlUHJvcGVydHksIGxpZ2h0QnVsYk5vZGUsIG5ldyBSZWN0YW5nbGUoIDAsIDAsIDEwLCAxMCApLFxyXG4gICAgICB0YW5kZW0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTXVsdGlwbGUgdXBkYXRlcyBtYXkgaGFwcGVuIHBlciBmcmFtZSwgdGhleSBhcmUgYmF0Y2hlZCBhbmQgdXBkYXRlZCBvbmNlIGluIHRoZSB2aWV3IHN0ZXAgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cclxuICAgKiBDQ0tDTGlnaHRCdWxiTm9kZSBjYWxscyB1cGRhdGVSZW5kZXIgZm9yIGl0cyBjaGlsZCBzb2NrZXQgbm9kZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSB1cGRhdGVSZW5kZXIoKTogdm9pZCB7XHJcbiAgICBjb25zdCBzdGFydFBvc2l0aW9uID0gdGhpcy5jaXJjdWl0RWxlbWVudC5zdGFydFBvc2l0aW9uUHJvcGVydHkuZ2V0KCk7XHJcbiAgICBjb25zdCBlbmRQb3NpdGlvbiA9IHRoaXMuY2lyY3VpdEVsZW1lbnQuZW5kUG9zaXRpb25Qcm9wZXJ0eS5nZXQoKTtcclxuICAgIGNvbnN0IGFuZ2xlID0gZW5kUG9zaXRpb24ubWludXMoIHN0YXJ0UG9zaXRpb24gKS5hbmdsZSArIE1hdGguUEkgLyA0O1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgbm9kZSB0cmFuc2Zvcm0gaW4gYSBzaW5nbGUgc3RlcCwgc2VlICM2NlxyXG4gICAgdGhpcy5jb250ZW50Tm9kZS5zZXRNYXRyaXgoIFNDUkFUQ0hfTUFUUklYLnNldFRvVHJhbnNsYXRpb25Sb3RhdGlvblBvaW50KCBzdGFydFBvc2l0aW9uLCBhbmdsZSApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYWludGFpbiB0aGUgb3BhY2l0eSBvZiB0aGUgYnJpZ2h0bmVzcyBsaW5lcyB3aGlsZSBjaGFuZ2luZyB0aGUgb3BhY2l0eSBvZiB0aGUgbGlnaHQgYnVsYiBpdHNlbGYuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHVwZGF0ZU9wYWNpdHlPbkludGVyYWN0aXZlQ2hhbmdlKCk6IHZvaWQge1xyXG5cclxuICAgIC8vIFRPRE8gKGJsYWNrLWJveC1zdHVkeSk6IE1ha2UgdGhlIGxpZ2h0IGJ1bGIgaW1hZ2VzIGxvb2sgZmFkZWQgb3V0LlxyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5yZWdpc3RlciggJ0xpZ2h0QnVsYlNvY2tldE5vZGUnLCBMaWdodEJ1bGJTb2NrZXROb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSxvQ0FBb0M7QUFFL0QsT0FBT0MsT0FBTyxNQUFNLDRCQUE0QjtBQUNoRCxTQUFTQyxjQUFjLFFBQVEsb0NBQW9DO0FBQ25FLFNBQVNDLFNBQVMsUUFBUSxnQ0FBZ0M7QUFFMUQsT0FBT0MsNEJBQTRCLE1BQU0sb0NBQW9DO0FBSzdFLE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQUMxRCxPQUFPQyx1QkFBdUIsTUFBMEMsOEJBQThCOztBQUV0RztBQUNBLE1BQU1DLGNBQWMsR0FBRyxJQUFJTixPQUFPLENBQUMsQ0FBQztBQUVwQyxlQUFlLE1BQU1PLG1CQUFtQixTQUFTRix1QkFBdUIsQ0FBQztFQUV2RTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLFVBQWlDLEVBQUVDLFdBQStCLEVBQUVDLFNBQW9CLEVBQ3hGQyxnQkFBa0QsRUFBRUMsTUFBYyxFQUFFQyxlQUFnRCxFQUFHO0lBRXpJO0lBQ0EsTUFBTUMsYUFBYSxHQUFHLElBQUlYLG1CQUFtQixDQUFFLElBQUlMLGNBQWMsQ0FBRSxDQUFFLENBQUMsRUFBRTtNQUN0RWlCLFFBQVEsRUFBRSxJQUFJO01BQ2RDLFNBQVMsRUFBRU4sU0FBUyxDQUFDTSxTQUFTO01BQzlCQyxNQUFNLEVBQUVQLFNBQVMsQ0FBQ087SUFDcEIsQ0FBRSxDQUFDOztJQUVIO0lBQ0E7SUFDQUosZUFBZSxHQUFHYixjQUFjLENBQWtDO01BQ2hFa0IsUUFBUSxFQUFFLEtBQUs7TUFFZjtNQUNBQyxhQUFhLEVBQUU7SUFDakIsQ0FBQyxFQUFFTixlQUFnQixDQUFDO0lBQ3BCLEtBQUssQ0FBRUwsVUFBVSxFQUFFQyxXQUFXLEVBQUVDLFNBQVMsRUFBRUMsZ0JBQWdCLEVBQUVHLGFBQWEsRUFBRSxJQUFJYixTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRyxDQUFDLEVBQ3ZHVyxNQUFNLEVBQUVDLGVBQWdCLENBQUM7RUFDN0I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDa0JPLFlBQVlBLENBQUEsRUFBUztJQUNuQyxNQUFNQyxhQUFhLEdBQUcsSUFBSSxDQUFDQyxjQUFjLENBQUNDLHFCQUFxQixDQUFDQyxHQUFHLENBQUMsQ0FBQztJQUNyRSxNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFDSCxjQUFjLENBQUNJLG1CQUFtQixDQUFDRixHQUFHLENBQUMsQ0FBQztJQUNqRSxNQUFNRyxLQUFLLEdBQUdGLFdBQVcsQ0FBQ0csS0FBSyxDQUFFUCxhQUFjLENBQUMsQ0FBQ00sS0FBSyxHQUFHRSxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDOztJQUVwRTtJQUNBLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxTQUFTLENBQUUzQixjQUFjLENBQUM0Qiw2QkFBNkIsQ0FBRVosYUFBYSxFQUFFTSxLQUFNLENBQUUsQ0FBQztFQUNwRzs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JPLGdDQUFnQ0EsQ0FBQSxFQUFTOztJQUV2RDtFQUFBO0FBRUo7QUFFQWhDLDRCQUE0QixDQUFDaUMsUUFBUSxDQUFFLHFCQUFxQixFQUFFN0IsbUJBQW9CLENBQUMifQ==