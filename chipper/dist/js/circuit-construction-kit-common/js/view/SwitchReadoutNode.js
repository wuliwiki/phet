// Copyright 2017-2023, University of Colorado Boulder

/**
 * Readout that appears in the CircuitElementEditContainerNode that displays whether the switch is open or closed.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Node, Text } from '../../../scenery/js/imports.js';
import CircuitConstructionKitCommonStrings from '../CircuitConstructionKitCommonStrings.js';
import circuitConstructionKitCommon from '../circuitConstructionKitCommon.js';
import Switch from '../model/Switch.js';
import CCKCColors from './CCKCColors.js';
const theSwitchIsClosedStringProperty = CircuitConstructionKitCommonStrings.theSwitchIsClosedStringProperty;
const theSwitchIsOpenStringProperty = CircuitConstructionKitCommonStrings.theSwitchIsOpenStringProperty;

// constants
const MAX_TEXT_WIDTH = 300;
export default class SwitchReadoutNode extends Node {
  constructor(circuit, tandem) {
    // Create both texts and display both so they remain aligned as the value changes
    const createText = (string, tandem) => new Text(string, {
      fontSize: 24,
      maxWidth: MAX_TEXT_WIDTH,
      fill: CCKCColors.textFillProperty,
      tandem: tandem,
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    });
    const closedText = createText(theSwitchIsClosedStringProperty, tandem.createTandem('closedText'));
    const openText = createText(theSwitchIsOpenStringProperty, tandem.createTandem('openText'));
    const closedListener = closed => {
      closedText.visible = closed;
      openText.visible = !closed;
    };

    // This is reused across all switches
    circuit.selectionProperty.link((newCircuitElement, oldCircuitElement) => {
      oldCircuitElement instanceof Switch && oldCircuitElement.isClosedProperty.unlink(closedListener);
      newCircuitElement instanceof Switch && newCircuitElement.isClosedProperty.link(closedListener);
    });
    const messageNode = new Node({
      children: [closedText, openText]
    });
    super({
      children: [messageNode],
      tandem: tandem,
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    });
  }
}
circuitConstructionKitCommon.register('SwitchReadoutNode', SwitchReadoutNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiVGV4dCIsIkNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb25TdHJpbmdzIiwiY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbiIsIlN3aXRjaCIsIkNDS0NDb2xvcnMiLCJ0aGVTd2l0Y2hJc0Nsb3NlZFN0cmluZ1Byb3BlcnR5IiwidGhlU3dpdGNoSXNPcGVuU3RyaW5nUHJvcGVydHkiLCJNQVhfVEVYVF9XSURUSCIsIlN3aXRjaFJlYWRvdXROb2RlIiwiY29uc3RydWN0b3IiLCJjaXJjdWl0IiwidGFuZGVtIiwiY3JlYXRlVGV4dCIsInN0cmluZyIsImZvbnRTaXplIiwibWF4V2lkdGgiLCJmaWxsIiwidGV4dEZpbGxQcm9wZXJ0eSIsInZpc2libGVQcm9wZXJ0eU9wdGlvbnMiLCJwaGV0aW9SZWFkT25seSIsImNsb3NlZFRleHQiLCJjcmVhdGVUYW5kZW0iLCJvcGVuVGV4dCIsImNsb3NlZExpc3RlbmVyIiwiY2xvc2VkIiwidmlzaWJsZSIsInNlbGVjdGlvblByb3BlcnR5IiwibGluayIsIm5ld0NpcmN1aXRFbGVtZW50Iiwib2xkQ2lyY3VpdEVsZW1lbnQiLCJpc0Nsb3NlZFByb3BlcnR5IiwidW5saW5rIiwibWVzc2FnZU5vZGUiLCJjaGlsZHJlbiIsInBoZXRpb0ZlYXR1cmVkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTd2l0Y2hSZWFkb3V0Tm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZWFkb3V0IHRoYXQgYXBwZWFycyBpbiB0aGUgQ2lyY3VpdEVsZW1lbnRFZGl0Q29udGFpbmVyTm9kZSB0aGF0IGRpc3BsYXlzIHdoZXRoZXIgdGhlIHN3aXRjaCBpcyBvcGVuIG9yIGNsb3NlZC5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb25TdHJpbmdzIGZyb20gJy4uL0NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb25TdHJpbmdzLmpzJztcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb24gZnJvbSAnLi4vY2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vbi5qcyc7XHJcbmltcG9ydCBDaXJjdWl0IGZyb20gJy4uL21vZGVsL0NpcmN1aXQuanMnO1xyXG5pbXBvcnQgU3dpdGNoIGZyb20gJy4uL21vZGVsL1N3aXRjaC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBDaXJjdWl0RWxlbWVudCBmcm9tICcuLi9tb2RlbC9DaXJjdWl0RWxlbWVudC5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlcnRleCBmcm9tICcuLi9tb2RlbC9WZXJ0ZXguanMnO1xyXG5pbXBvcnQgQ0NLQ0NvbG9ycyBmcm9tICcuL0NDS0NDb2xvcnMuanMnO1xyXG5cclxuY29uc3QgdGhlU3dpdGNoSXNDbG9zZWRTdHJpbmdQcm9wZXJ0eSA9IENpcmN1aXRDb25zdHJ1Y3Rpb25LaXRDb21tb25TdHJpbmdzLnRoZVN3aXRjaElzQ2xvc2VkU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHRoZVN3aXRjaElzT3BlblN0cmluZ1Byb3BlcnR5ID0gQ2lyY3VpdENvbnN0cnVjdGlvbktpdENvbW1vblN0cmluZ3MudGhlU3dpdGNoSXNPcGVuU3RyaW5nUHJvcGVydHk7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTUFYX1RFWFRfV0lEVEggPSAzMDA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTd2l0Y2hSZWFkb3V0Tm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNpcmN1aXQ6IENpcmN1aXQsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIC8vIENyZWF0ZSBib3RoIHRleHRzIGFuZCBkaXNwbGF5IGJvdGggc28gdGhleSByZW1haW4gYWxpZ25lZCBhcyB0aGUgdmFsdWUgY2hhbmdlc1xyXG4gICAgY29uc3QgY3JlYXRlVGV4dCA9ICggc3RyaW5nOiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCB0YW5kZW06IFRhbmRlbSApID0+XHJcbiAgICAgIG5ldyBUZXh0KCBzdHJpbmcsIHtcclxuICAgICAgICBmb250U2l6ZTogMjQsXHJcbiAgICAgICAgbWF4V2lkdGg6IE1BWF9URVhUX1dJRFRILFxyXG4gICAgICAgIGZpbGw6IENDS0NDb2xvcnMudGV4dEZpbGxQcm9wZXJ0eSxcclxuICAgICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgICB2aXNpYmxlUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNsb3NlZFRleHQgPSBjcmVhdGVUZXh0KCB0aGVTd2l0Y2hJc0Nsb3NlZFN0cmluZ1Byb3BlcnR5LCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY2xvc2VkVGV4dCcgKSApO1xyXG4gICAgY29uc3Qgb3BlblRleHQgPSBjcmVhdGVUZXh0KCB0aGVTd2l0Y2hJc09wZW5TdHJpbmdQcm9wZXJ0eSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ29wZW5UZXh0JyApICk7XHJcblxyXG4gICAgY29uc3QgY2xvc2VkTGlzdGVuZXIgPSAoIGNsb3NlZDogYm9vbGVhbiApID0+IHtcclxuICAgICAgY2xvc2VkVGV4dC52aXNpYmxlID0gY2xvc2VkO1xyXG4gICAgICBvcGVuVGV4dC52aXNpYmxlID0gIWNsb3NlZDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gVGhpcyBpcyByZXVzZWQgYWNyb3NzIGFsbCBzd2l0Y2hlc1xyXG4gICAgY2lyY3VpdC5zZWxlY3Rpb25Qcm9wZXJ0eS5saW5rKCAoIG5ld0NpcmN1aXRFbGVtZW50OiBDaXJjdWl0RWxlbWVudCB8IFZlcnRleCB8IG51bGwsIG9sZENpcmN1aXRFbGVtZW50OiBDaXJjdWl0RWxlbWVudCB8IFZlcnRleCB8IG51bGwgKSA9PiB7XHJcbiAgICAgIG9sZENpcmN1aXRFbGVtZW50IGluc3RhbmNlb2YgU3dpdGNoICYmIG9sZENpcmN1aXRFbGVtZW50LmlzQ2xvc2VkUHJvcGVydHkudW5saW5rKCBjbG9zZWRMaXN0ZW5lciApO1xyXG4gICAgICBuZXdDaXJjdWl0RWxlbWVudCBpbnN0YW5jZW9mIFN3aXRjaCAmJiBuZXdDaXJjdWl0RWxlbWVudC5pc0Nsb3NlZFByb3BlcnR5LmxpbmsoIGNsb3NlZExpc3RlbmVyICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgbWVzc2FnZU5vZGUgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyBjbG9zZWRUZXh0LCBvcGVuVGV4dCBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgY2hpbGRyZW46IFsgbWVzc2FnZU5vZGUgXSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHtcclxuICAgICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jaXJjdWl0Q29uc3RydWN0aW9uS2l0Q29tbW9uLnJlZ2lzdGVyKCAnU3dpdGNoUmVhZG91dE5vZGUnLCBTd2l0Y2hSZWFkb3V0Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLEVBQUVDLElBQUksUUFBUSxnQ0FBZ0M7QUFDM0QsT0FBT0MsbUNBQW1DLE1BQU0sMkNBQTJDO0FBQzNGLE9BQU9DLDRCQUE0QixNQUFNLG9DQUFvQztBQUU3RSxPQUFPQyxNQUFNLE1BQU0sb0JBQW9CO0FBS3ZDLE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFFeEMsTUFBTUMsK0JBQStCLEdBQUdKLG1DQUFtQyxDQUFDSSwrQkFBK0I7QUFDM0csTUFBTUMsNkJBQTZCLEdBQUdMLG1DQUFtQyxDQUFDSyw2QkFBNkI7O0FBRXZHO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLEdBQUc7QUFFMUIsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU1QsSUFBSSxDQUFDO0VBRTNDVSxXQUFXQSxDQUFFQyxPQUFnQixFQUFFQyxNQUFjLEVBQUc7SUFFckQ7SUFDQSxNQUFNQyxVQUFVLEdBQUdBLENBQUVDLE1BQWlDLEVBQUVGLE1BQWMsS0FDcEUsSUFBSVgsSUFBSSxDQUFFYSxNQUFNLEVBQUU7TUFDaEJDLFFBQVEsRUFBRSxFQUFFO01BQ1pDLFFBQVEsRUFBRVIsY0FBYztNQUN4QlMsSUFBSSxFQUFFWixVQUFVLENBQUNhLGdCQUFnQjtNQUNqQ04sTUFBTSxFQUFFQSxNQUFNO01BQ2RPLHNCQUFzQixFQUFFO1FBQ3RCQyxjQUFjLEVBQUU7TUFDbEI7SUFDRixDQUFFLENBQUM7SUFFTCxNQUFNQyxVQUFVLEdBQUdSLFVBQVUsQ0FBRVAsK0JBQStCLEVBQUVNLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLFlBQWEsQ0FBRSxDQUFDO0lBQ3JHLE1BQU1DLFFBQVEsR0FBR1YsVUFBVSxDQUFFTiw2QkFBNkIsRUFBRUssTUFBTSxDQUFDVSxZQUFZLENBQUUsVUFBVyxDQUFFLENBQUM7SUFFL0YsTUFBTUUsY0FBYyxHQUFLQyxNQUFlLElBQU07TUFDNUNKLFVBQVUsQ0FBQ0ssT0FBTyxHQUFHRCxNQUFNO01BQzNCRixRQUFRLENBQUNHLE9BQU8sR0FBRyxDQUFDRCxNQUFNO0lBQzVCLENBQUM7O0lBRUQ7SUFDQWQsT0FBTyxDQUFDZ0IsaUJBQWlCLENBQUNDLElBQUksQ0FBRSxDQUFFQyxpQkFBaUQsRUFBRUMsaUJBQWlELEtBQU07TUFDMUlBLGlCQUFpQixZQUFZMUIsTUFBTSxJQUFJMEIsaUJBQWlCLENBQUNDLGdCQUFnQixDQUFDQyxNQUFNLENBQUVSLGNBQWUsQ0FBQztNQUNsR0ssaUJBQWlCLFlBQVl6QixNQUFNLElBQUl5QixpQkFBaUIsQ0FBQ0UsZ0JBQWdCLENBQUNILElBQUksQ0FBRUosY0FBZSxDQUFDO0lBQ2xHLENBQUUsQ0FBQztJQUVILE1BQU1TLFdBQVcsR0FBRyxJQUFJakMsSUFBSSxDQUFFO01BQzVCa0MsUUFBUSxFQUFFLENBQUViLFVBQVUsRUFBRUUsUUFBUTtJQUNsQyxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUU7TUFDTFcsUUFBUSxFQUFFLENBQUVELFdBQVcsQ0FBRTtNQUN6QnJCLE1BQU0sRUFBRUEsTUFBTTtNQUNkTyxzQkFBc0IsRUFBRTtRQUN0QmdCLGNBQWMsRUFBRTtNQUNsQjtJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWhDLDRCQUE0QixDQUFDaUMsUUFBUSxDQUFFLG1CQUFtQixFQUFFM0IsaUJBQWtCLENBQUMifQ==