// Copyright 2017-2021, University of Colorado Boulder

/**
 * ResistorColors tests
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import ResistorColors from './ResistorColors.js';
QUnit.module('ResistorColors');
QUnit.test('test resistor colors', assert => {
  assert.deepEqual(ResistorColors.getColorNames(0), ['black'], '0 resistance should have one black band');
  assert.deepEqual(ResistorColors.getColorNames(1), ['brown', 'black', 'gold', 'gold'], '1 ohm resistor');
  assert.deepEqual(ResistorColors.getColorNames(10), ['brown', 'black', 'black', 'gold'], '10 ohm resistor');
  assert.deepEqual(ResistorColors.getColorNames(100), ['brown', 'black', 'brown', 'gold'], '100 ohm resistor');
  assert.deepEqual(ResistorColors.getColorNames(1000), ['brown', 'black', 'red', 'gold'], '100 ohm resistor');
  assert.deepEqual(ResistorColors.getColorNames(4700), ['yellow', 'violet', 'red', 'gold'], '4700 ohm ');
  assert.deepEqual(ResistorColors.getColorNames(9900), ['white', 'white', 'red', 'gold'], '9900 ohm resistor');
  assert.deepEqual(ResistorColors.getColorNames(55), ['green', 'green', 'black', 'gold'], '55 ohm resistor');
  assert.deepEqual(ResistorColors.getColorNames(34.5), ['orange', 'yellow', 'black', 'gold'], '34.5 ohm');
  assert.deepEqual(ResistorColors.getColorNames(99.5), ['white', 'white', 'black', 'gold'], '99.5 ohm');
  assert.deepEqual(ResistorColors.getColorNames(10.5), ['brown', 'brown', 'black', 'gold'], '10.5 ohm');
  assert.deepEqual(ResistorColors.getColorNames(7.5), ['violet', 'green', 'gold', 'gold'], '7.5 ohm resistor');
  assert.deepEqual(ResistorColors.getColorNames(20), ['red', 'black', 'black', 'gold'], '20 ohm resistor');
  assert.deepEqual(ResistorColors.getColorNames(88000), ['gray', 'gray', 'orange', 'gold'], '88000 ohm');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZXNpc3RvckNvbG9ycyIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsImRlZXBFcXVhbCIsImdldENvbG9yTmFtZXMiXSwic291cmNlcyI6WyJSZXNpc3RvckNvbG9yc1Rlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJlc2lzdG9yQ29sb3JzIHRlc3RzXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlc2lzdG9yQ29sb3JzIGZyb20gJy4vUmVzaXN0b3JDb2xvcnMuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnUmVzaXN0b3JDb2xvcnMnICk7XHJcblxyXG5RVW5pdC50ZXN0KCAndGVzdCByZXNpc3RvciBjb2xvcnMnLCBhc3NlcnQgPT4ge1xyXG4gIGFzc2VydC5kZWVwRXF1YWwoIFJlc2lzdG9yQ29sb3JzLmdldENvbG9yTmFtZXMoIDAgKSwgWyAnYmxhY2snIF0sICcwIHJlc2lzdGFuY2Ugc2hvdWxkIGhhdmUgb25lIGJsYWNrIGJhbmQnICk7XHJcbiAgYXNzZXJ0LmRlZXBFcXVhbCggUmVzaXN0b3JDb2xvcnMuZ2V0Q29sb3JOYW1lcyggMSApLCBbICdicm93bicsICdibGFjaycsICdnb2xkJywgJ2dvbGQnIF0sICcxIG9obSByZXNpc3RvcicgKTtcclxuICBhc3NlcnQuZGVlcEVxdWFsKCBSZXNpc3RvckNvbG9ycy5nZXRDb2xvck5hbWVzKCAxMCApLCBbICdicm93bicsICdibGFjaycsICdibGFjaycsICdnb2xkJyBdLCAnMTAgb2htIHJlc2lzdG9yJyApO1xyXG4gIGFzc2VydC5kZWVwRXF1YWwoIFJlc2lzdG9yQ29sb3JzLmdldENvbG9yTmFtZXMoIDEwMCApLCBbICdicm93bicsICdibGFjaycsICdicm93bicsICdnb2xkJyBdLCAnMTAwIG9obSByZXNpc3RvcicgKTtcclxuICBhc3NlcnQuZGVlcEVxdWFsKCBSZXNpc3RvckNvbG9ycy5nZXRDb2xvck5hbWVzKCAxMDAwICksIFsgJ2Jyb3duJywgJ2JsYWNrJywgJ3JlZCcsICdnb2xkJyBdLCAnMTAwIG9obSByZXNpc3RvcicgKTtcclxuICBhc3NlcnQuZGVlcEVxdWFsKCBSZXNpc3RvckNvbG9ycy5nZXRDb2xvck5hbWVzKCA0NzAwICksIFsgJ3llbGxvdycsICd2aW9sZXQnLCAncmVkJywgJ2dvbGQnIF0sICc0NzAwIG9obSAnICk7XHJcbiAgYXNzZXJ0LmRlZXBFcXVhbCggUmVzaXN0b3JDb2xvcnMuZ2V0Q29sb3JOYW1lcyggOTkwMCApLCBbICd3aGl0ZScsICd3aGl0ZScsICdyZWQnLCAnZ29sZCcgXSwgJzk5MDAgb2htIHJlc2lzdG9yJyApO1xyXG4gIGFzc2VydC5kZWVwRXF1YWwoIFJlc2lzdG9yQ29sb3JzLmdldENvbG9yTmFtZXMoIDU1ICksIFsgJ2dyZWVuJywgJ2dyZWVuJywgJ2JsYWNrJywgJ2dvbGQnIF0sICc1NSBvaG0gcmVzaXN0b3InICk7XHJcbiAgYXNzZXJ0LmRlZXBFcXVhbCggUmVzaXN0b3JDb2xvcnMuZ2V0Q29sb3JOYW1lcyggMzQuNSApLCBbICdvcmFuZ2UnLCAneWVsbG93JywgJ2JsYWNrJywgJ2dvbGQnIF0sICczNC41IG9obScgKTtcclxuICBhc3NlcnQuZGVlcEVxdWFsKCBSZXNpc3RvckNvbG9ycy5nZXRDb2xvck5hbWVzKCA5OS41ICksIFsgJ3doaXRlJywgJ3doaXRlJywgJ2JsYWNrJywgJ2dvbGQnIF0sICc5OS41IG9obScgKTtcclxuICBhc3NlcnQuZGVlcEVxdWFsKCBSZXNpc3RvckNvbG9ycy5nZXRDb2xvck5hbWVzKCAxMC41ICksIFsgJ2Jyb3duJywgJ2Jyb3duJywgJ2JsYWNrJywgJ2dvbGQnIF0sICcxMC41IG9obScgKTtcclxuICBhc3NlcnQuZGVlcEVxdWFsKCBSZXNpc3RvckNvbG9ycy5nZXRDb2xvck5hbWVzKCA3LjUgKSwgWyAndmlvbGV0JywgJ2dyZWVuJywgJ2dvbGQnLCAnZ29sZCcgXSwgJzcuNSBvaG0gcmVzaXN0b3InICk7XHJcbiAgYXNzZXJ0LmRlZXBFcXVhbCggUmVzaXN0b3JDb2xvcnMuZ2V0Q29sb3JOYW1lcyggMjAgKSwgWyAncmVkJywgJ2JsYWNrJywgJ2JsYWNrJywgJ2dvbGQnIF0sICcyMCBvaG0gcmVzaXN0b3InICk7XHJcbiAgYXNzZXJ0LmRlZXBFcXVhbCggUmVzaXN0b3JDb2xvcnMuZ2V0Q29sb3JOYW1lcyggODgwMDAgKSwgWyAnZ3JheScsICdncmF5JywgJ29yYW5nZScsICdnb2xkJyBdLCAnODgwMDAgb2htJyApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSxxQkFBcUI7QUFFaERDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLGdCQUFpQixDQUFDO0FBRWhDRCxLQUFLLENBQUNFLElBQUksQ0FBRSxzQkFBc0IsRUFBRUMsTUFBTSxJQUFJO0VBQzVDQSxNQUFNLENBQUNDLFNBQVMsQ0FBRUwsY0FBYyxDQUFDTSxhQUFhLENBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBRSxPQUFPLENBQUUsRUFBRSx5Q0FBMEMsQ0FBQztFQUM3R0YsTUFBTSxDQUFDQyxTQUFTLENBQUVMLGNBQWMsQ0FBQ00sYUFBYSxDQUFFLENBQUUsQ0FBQyxFQUFFLENBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFFLEVBQUUsZ0JBQWlCLENBQUM7RUFDN0dGLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFTCxjQUFjLENBQUNNLGFBQWEsQ0FBRSxFQUFHLENBQUMsRUFBRSxDQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBRSxFQUFFLGlCQUFrQixDQUFDO0VBQ2hIRixNQUFNLENBQUNDLFNBQVMsQ0FBRUwsY0FBYyxDQUFDTSxhQUFhLENBQUUsR0FBSSxDQUFDLEVBQUUsQ0FBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUUsRUFBRSxrQkFBbUIsQ0FBQztFQUNsSEYsTUFBTSxDQUFDQyxTQUFTLENBQUVMLGNBQWMsQ0FBQ00sYUFBYSxDQUFFLElBQUssQ0FBQyxFQUFFLENBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFFLEVBQUUsa0JBQW1CLENBQUM7RUFDakhGLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFTCxjQUFjLENBQUNNLGFBQWEsQ0FBRSxJQUFLLENBQUMsRUFBRSxDQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBRSxFQUFFLFdBQVksQ0FBQztFQUM1R0YsTUFBTSxDQUFDQyxTQUFTLENBQUVMLGNBQWMsQ0FBQ00sYUFBYSxDQUFFLElBQUssQ0FBQyxFQUFFLENBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFFLEVBQUUsbUJBQW9CLENBQUM7RUFDbEhGLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFTCxjQUFjLENBQUNNLGFBQWEsQ0FBRSxFQUFHLENBQUMsRUFBRSxDQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBRSxFQUFFLGlCQUFrQixDQUFDO0VBQ2hIRixNQUFNLENBQUNDLFNBQVMsQ0FBRUwsY0FBYyxDQUFDTSxhQUFhLENBQUUsSUFBSyxDQUFDLEVBQUUsQ0FBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUUsRUFBRSxVQUFXLENBQUM7RUFDN0dGLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFTCxjQUFjLENBQUNNLGFBQWEsQ0FBRSxJQUFLLENBQUMsRUFBRSxDQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBRSxFQUFFLFVBQVcsQ0FBQztFQUMzR0YsTUFBTSxDQUFDQyxTQUFTLENBQUVMLGNBQWMsQ0FBQ00sYUFBYSxDQUFFLElBQUssQ0FBQyxFQUFFLENBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFFLEVBQUUsVUFBVyxDQUFDO0VBQzNHRixNQUFNLENBQUNDLFNBQVMsQ0FBRUwsY0FBYyxDQUFDTSxhQUFhLENBQUUsR0FBSSxDQUFDLEVBQUUsQ0FBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUUsRUFBRSxrQkFBbUIsQ0FBQztFQUNsSEYsTUFBTSxDQUFDQyxTQUFTLENBQUVMLGNBQWMsQ0FBQ00sYUFBYSxDQUFFLEVBQUcsQ0FBQyxFQUFFLENBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFFLEVBQUUsaUJBQWtCLENBQUM7RUFDOUdGLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFTCxjQUFjLENBQUNNLGFBQWEsQ0FBRSxLQUFNLENBQUMsRUFBRSxDQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBRSxFQUFFLFdBQVksQ0FBQztBQUM5RyxDQUFFLENBQUMifQ==