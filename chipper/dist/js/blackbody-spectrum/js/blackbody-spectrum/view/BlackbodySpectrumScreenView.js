// Copyright 2014-2023, University of Colorado Boulder

/**
 * Main view for the BlackbodySpectrum simulation
 * Handles or contains all of the main graphical logic of the sim
 *
 * @author Martin Veillette (Berea College)
 * @author Saurabh Totey
 * @author Arnab Purkayastha
 */

import Utils from '../../../../dot/js/Utils.js';
import ScreenView from '../../../../joist/js/ScreenView.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { RichText, Text } from '../../../../scenery/js/imports.js';
import BlackbodyConstants from '../../BlackbodyConstants.js';
import blackbodySpectrum from '../../blackbodySpectrum.js';
import BlackbodySpectrumStrings from '../../BlackbodySpectrumStrings.js';
import BGRAndStarDisplay from './BGRAndStarDisplay.js';
import BlackbodyColors from './BlackbodyColors.js';
import BlackbodySpectrumControlPanel from './BlackbodySpectrumControlPanel.js';
import BlackbodySpectrumThermometer from './BlackbodySpectrumThermometer.js';
import GraphDrawingNode from './GraphDrawingNode.js';
import SavedGraphInformationPanel from './SavedGraphInformationPanel.js';
const blackbodyTemperatureString = BlackbodySpectrumStrings.blackbodyTemperature;
const kelvinUnitsString = BlackbodySpectrumStrings.kelvinUnits;

// constants
const TEMPERATURE_FONT = new PhetFont({
  size: 22,
  weight: 'bold'
});
const TITLE_COLOR = BlackbodyColors.titlesTextProperty;
const TEMPERATURE_COLOR = BlackbodyColors.temperatureTextProperty;
const INSET = 10;
const TEMPERATURE_LABEL_SPACING = 5;
class BlackbodySpectrumScreenView extends ScreenView {
  /**
   * Constructor for the BlackbodySpectrumView
   * @param {BlackbodySpectrumModel} model - the main model for the simulation
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    super({
      tandem: tandem
    });
    const thermometer = new BlackbodySpectrumThermometer(model.mainBody.temperatureProperty, {
      tandem: tandem.createTandem('thermometerNode')
    });
    const thermometerText = new RichText(blackbodyTemperatureString, {
      font: BlackbodyConstants.LABEL_FONT,
      fill: TITLE_COLOR,
      align: 'center',
      maxWidth: 130,
      tandem: tandem.createTandem('thermometerText')
    });

    // A text node that reflects the temperature of the slider or main model
    const temperatureText = new Text('?', {
      font: TEMPERATURE_FONT,
      fill: TEMPERATURE_COLOR,
      maxWidth: 130,
      tandem: tandem.createTandem('temperatureText')
    });

    // create the BGR and star display
    const bgrAndStarDisplay = new BGRAndStarDisplay(model.mainBody, {
      tandem: tandem.createTandem('bgrAndStarDisplay')
    });

    // Links the current temperature to the temperature text above the thermometer
    model.mainBody.temperatureProperty.link(temperature => {
      temperatureText.string = `${Utils.toFixed(temperature, 0)} ${kelvinUnitsString}`;
      temperatureText.centerX = thermometerText.centerX; // In case the size of the temperature text changes
    });

    // create graph with zoom buttons
    const graphNode = new GraphDrawingNode(model, {
      tandem: tandem.createTandem('graphDrawingNode')
    });

    // create the Reset All Button in the bottom right
    const resetAllButton = new ResetAllButton({
      listener: () => {
        model.reset();
        graphNode.reset();
        thermometer.reset();
      },
      tandem: tandem.createTandem('resetAllButton'),
      phetioDocumentation: 'button that resets the screen to its initial state'
    });
    const controlPanel = new BlackbodySpectrumControlPanel(model, {
      tandem: tandem.createTandem('controlPanel')
    });
    const savedInformationPanel = new SavedGraphInformationPanel(model, {
      minWidth: controlPanel.width,
      tandem: tandem.createTandem('savedGraphsPanel')
    });
    graphNode.left = INSET;
    graphNode.bottom = this.layoutBounds.maxY - INSET;
    resetAllButton.right = this.layoutBounds.maxX - INSET;
    resetAllButton.bottom = this.layoutBounds.maxY - INSET;
    thermometer.right = this.layoutBounds.maxX - INSET;
    thermometerText.centerX = thermometer.right + thermometer.thermometerCenterXFromRight;
    temperatureText.centerX = thermometerText.centerX;
    thermometerText.top = INSET + TEMPERATURE_LABEL_SPACING;
    temperatureText.top = thermometerText.bottom + TEMPERATURE_LABEL_SPACING;
    thermometer.top = temperatureText.bottom + TEMPERATURE_LABEL_SPACING;
    controlPanel.right = thermometer.left - 20;
    controlPanel.top = thermometerText.centerY;
    savedInformationPanel.centerX = controlPanel.centerX;
    savedInformationPanel.top = controlPanel.bottom + 55;
    bgrAndStarDisplay.left = 225; // Layout empirically determined

    this.addChild(graphNode);
    this.addChild(controlPanel);
    this.addChild(savedInformationPanel);
    this.addChild(thermometer);
    this.addChild(thermometerText);
    this.addChild(temperatureText);
    this.addChild(bgrAndStarDisplay);
    this.addChild(resetAllButton);
  }
}
blackbodySpectrum.register('BlackbodySpectrumScreenView', BlackbodySpectrumScreenView);
export default BlackbodySpectrumScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlNjcmVlblZpZXciLCJSZXNldEFsbEJ1dHRvbiIsIlBoZXRGb250IiwiUmljaFRleHQiLCJUZXh0IiwiQmxhY2tib2R5Q29uc3RhbnRzIiwiYmxhY2tib2R5U3BlY3RydW0iLCJCbGFja2JvZHlTcGVjdHJ1bVN0cmluZ3MiLCJCR1JBbmRTdGFyRGlzcGxheSIsIkJsYWNrYm9keUNvbG9ycyIsIkJsYWNrYm9keVNwZWN0cnVtQ29udHJvbFBhbmVsIiwiQmxhY2tib2R5U3BlY3RydW1UaGVybW9tZXRlciIsIkdyYXBoRHJhd2luZ05vZGUiLCJTYXZlZEdyYXBoSW5mb3JtYXRpb25QYW5lbCIsImJsYWNrYm9keVRlbXBlcmF0dXJlU3RyaW5nIiwiYmxhY2tib2R5VGVtcGVyYXR1cmUiLCJrZWx2aW5Vbml0c1N0cmluZyIsImtlbHZpblVuaXRzIiwiVEVNUEVSQVRVUkVfRk9OVCIsInNpemUiLCJ3ZWlnaHQiLCJUSVRMRV9DT0xPUiIsInRpdGxlc1RleHRQcm9wZXJ0eSIsIlRFTVBFUkFUVVJFX0NPTE9SIiwidGVtcGVyYXR1cmVUZXh0UHJvcGVydHkiLCJJTlNFVCIsIlRFTVBFUkFUVVJFX0xBQkVMX1NQQUNJTkciLCJCbGFja2JvZHlTcGVjdHJ1bVNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidGFuZGVtIiwidGhlcm1vbWV0ZXIiLCJtYWluQm9keSIsInRlbXBlcmF0dXJlUHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJ0aGVybW9tZXRlclRleHQiLCJmb250IiwiTEFCRUxfRk9OVCIsImZpbGwiLCJhbGlnbiIsIm1heFdpZHRoIiwidGVtcGVyYXR1cmVUZXh0IiwiYmdyQW5kU3RhckRpc3BsYXkiLCJsaW5rIiwidGVtcGVyYXR1cmUiLCJzdHJpbmciLCJ0b0ZpeGVkIiwiY2VudGVyWCIsImdyYXBoTm9kZSIsInJlc2V0QWxsQnV0dG9uIiwibGlzdGVuZXIiLCJyZXNldCIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJjb250cm9sUGFuZWwiLCJzYXZlZEluZm9ybWF0aW9uUGFuZWwiLCJtaW5XaWR0aCIsIndpZHRoIiwibGVmdCIsImJvdHRvbSIsImxheW91dEJvdW5kcyIsIm1heFkiLCJyaWdodCIsIm1heFgiLCJ0aGVybW9tZXRlckNlbnRlclhGcm9tUmlnaHQiLCJ0b3AiLCJjZW50ZXJZIiwiYWRkQ2hpbGQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJsYWNrYm9keVNwZWN0cnVtU2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWluIHZpZXcgZm9yIHRoZSBCbGFja2JvZHlTcGVjdHJ1bSBzaW11bGF0aW9uXHJcbiAqIEhhbmRsZXMgb3IgY29udGFpbnMgYWxsIG9mIHRoZSBtYWluIGdyYXBoaWNhbCBsb2dpYyBvZiB0aGUgc2ltXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZSAoQmVyZWEgQ29sbGVnZSlcclxuICogQGF1dGhvciBTYXVyYWJoIFRvdGV5XHJcbiAqIEBhdXRob3IgQXJuYWIgUHVya2F5YXN0aGFcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFNjcmVlblZpZXcgZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBSZXNldEFsbEJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvYnV0dG9ucy9SZXNldEFsbEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBSaWNoVGV4dCwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBCbGFja2JvZHlDb25zdGFudHMgZnJvbSAnLi4vLi4vQmxhY2tib2R5Q29uc3RhbnRzLmpzJztcclxuaW1wb3J0IGJsYWNrYm9keVNwZWN0cnVtIGZyb20gJy4uLy4uL2JsYWNrYm9keVNwZWN0cnVtLmpzJztcclxuaW1wb3J0IEJsYWNrYm9keVNwZWN0cnVtU3RyaW5ncyBmcm9tICcuLi8uLi9CbGFja2JvZHlTcGVjdHJ1bVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQkdSQW5kU3RhckRpc3BsYXkgZnJvbSAnLi9CR1JBbmRTdGFyRGlzcGxheS5qcyc7XHJcbmltcG9ydCBCbGFja2JvZHlDb2xvcnMgZnJvbSAnLi9CbGFja2JvZHlDb2xvcnMuanMnO1xyXG5pbXBvcnQgQmxhY2tib2R5U3BlY3RydW1Db250cm9sUGFuZWwgZnJvbSAnLi9CbGFja2JvZHlTcGVjdHJ1bUNvbnRyb2xQYW5lbC5qcyc7XHJcbmltcG9ydCBCbGFja2JvZHlTcGVjdHJ1bVRoZXJtb21ldGVyIGZyb20gJy4vQmxhY2tib2R5U3BlY3RydW1UaGVybW9tZXRlci5qcyc7XHJcbmltcG9ydCBHcmFwaERyYXdpbmdOb2RlIGZyb20gJy4vR3JhcGhEcmF3aW5nTm9kZS5qcyc7XHJcbmltcG9ydCBTYXZlZEdyYXBoSW5mb3JtYXRpb25QYW5lbCBmcm9tICcuL1NhdmVkR3JhcGhJbmZvcm1hdGlvblBhbmVsLmpzJztcclxuXHJcbmNvbnN0IGJsYWNrYm9keVRlbXBlcmF0dXJlU3RyaW5nID0gQmxhY2tib2R5U3BlY3RydW1TdHJpbmdzLmJsYWNrYm9keVRlbXBlcmF0dXJlO1xyXG5jb25zdCBrZWx2aW5Vbml0c1N0cmluZyA9IEJsYWNrYm9keVNwZWN0cnVtU3RyaW5ncy5rZWx2aW5Vbml0cztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBURU1QRVJBVFVSRV9GT05UID0gbmV3IFBoZXRGb250KCB7IHNpemU6IDIyLCB3ZWlnaHQ6ICdib2xkJyB9ICk7XHJcbmNvbnN0IFRJVExFX0NPTE9SID0gQmxhY2tib2R5Q29sb3JzLnRpdGxlc1RleHRQcm9wZXJ0eTtcclxuY29uc3QgVEVNUEVSQVRVUkVfQ09MT1IgPSBCbGFja2JvZHlDb2xvcnMudGVtcGVyYXR1cmVUZXh0UHJvcGVydHk7XHJcbmNvbnN0IElOU0VUID0gMTA7XHJcbmNvbnN0IFRFTVBFUkFUVVJFX0xBQkVMX1NQQUNJTkcgPSA1O1xyXG5cclxuY2xhc3MgQmxhY2tib2R5U3BlY3RydW1TY3JlZW5WaWV3IGV4dGVuZHMgU2NyZWVuVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yIGZvciB0aGUgQmxhY2tib2R5U3BlY3RydW1WaWV3XHJcbiAgICogQHBhcmFtIHtCbGFja2JvZHlTcGVjdHJ1bU1vZGVsfSBtb2RlbCAtIHRoZSBtYWluIG1vZGVsIGZvciB0aGUgc2ltdWxhdGlvblxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIHRhbmRlbSApIHtcclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgdGhlcm1vbWV0ZXIgPSBuZXcgQmxhY2tib2R5U3BlY3RydW1UaGVybW9tZXRlciggbW9kZWwubWFpbkJvZHkudGVtcGVyYXR1cmVQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aGVybW9tZXRlck5vZGUnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB0aGVybW9tZXRlclRleHQgPSBuZXcgUmljaFRleHQoIGJsYWNrYm9keVRlbXBlcmF0dXJlU3RyaW5nLCB7XHJcbiAgICAgIGZvbnQ6IEJsYWNrYm9keUNvbnN0YW50cy5MQUJFTF9GT05ULFxyXG4gICAgICBmaWxsOiBUSVRMRV9DT0xPUixcclxuICAgICAgYWxpZ246ICdjZW50ZXInLFxyXG4gICAgICBtYXhXaWR0aDogMTMwLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aGVybW9tZXRlclRleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBBIHRleHQgbm9kZSB0aGF0IHJlZmxlY3RzIHRoZSB0ZW1wZXJhdHVyZSBvZiB0aGUgc2xpZGVyIG9yIG1haW4gbW9kZWxcclxuICAgIGNvbnN0IHRlbXBlcmF0dXJlVGV4dCA9IG5ldyBUZXh0KCAnPycsIHtcclxuICAgICAgZm9udDogVEVNUEVSQVRVUkVfRk9OVCxcclxuICAgICAgZmlsbDogVEVNUEVSQVRVUkVfQ09MT1IsXHJcbiAgICAgIG1heFdpZHRoOiAxMzAsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RlbXBlcmF0dXJlVGV4dCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSB0aGUgQkdSIGFuZCBzdGFyIGRpc3BsYXlcclxuICAgIGNvbnN0IGJnckFuZFN0YXJEaXNwbGF5ID0gbmV3IEJHUkFuZFN0YXJEaXNwbGF5KCBtb2RlbC5tYWluQm9keSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdiZ3JBbmRTdGFyRGlzcGxheScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIExpbmtzIHRoZSBjdXJyZW50IHRlbXBlcmF0dXJlIHRvIHRoZSB0ZW1wZXJhdHVyZSB0ZXh0IGFib3ZlIHRoZSB0aGVybW9tZXRlclxyXG4gICAgbW9kZWwubWFpbkJvZHkudGVtcGVyYXR1cmVQcm9wZXJ0eS5saW5rKCB0ZW1wZXJhdHVyZSA9PiB7XHJcbiAgICAgIHRlbXBlcmF0dXJlVGV4dC5zdHJpbmcgPSBgJHtVdGlscy50b0ZpeGVkKCB0ZW1wZXJhdHVyZSwgMCApfSAke2tlbHZpblVuaXRzU3RyaW5nfWA7XHJcbiAgICAgIHRlbXBlcmF0dXJlVGV4dC5jZW50ZXJYID0gdGhlcm1vbWV0ZXJUZXh0LmNlbnRlclg7IC8vIEluIGNhc2UgdGhlIHNpemUgb2YgdGhlIHRlbXBlcmF0dXJlIHRleHQgY2hhbmdlc1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBncmFwaCB3aXRoIHpvb20gYnV0dG9uc1xyXG4gICAgY29uc3QgZ3JhcGhOb2RlID0gbmV3IEdyYXBoRHJhd2luZ05vZGUoIG1vZGVsLCB7IHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2dyYXBoRHJhd2luZ05vZGUnICkgfSApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSB0aGUgUmVzZXQgQWxsIEJ1dHRvbiBpbiB0aGUgYm90dG9tIHJpZ2h0XHJcbiAgICBjb25zdCByZXNldEFsbEJ1dHRvbiA9IG5ldyBSZXNldEFsbEJ1dHRvbigge1xyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG4gICAgICAgIG1vZGVsLnJlc2V0KCk7XHJcbiAgICAgICAgZ3JhcGhOb2RlLnJlc2V0KCk7XHJcbiAgICAgICAgdGhlcm1vbWV0ZXIucmVzZXQoKTtcclxuICAgICAgfSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncmVzZXRBbGxCdXR0b24nICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdidXR0b24gdGhhdCByZXNldHMgdGhlIHNjcmVlbiB0byBpdHMgaW5pdGlhbCBzdGF0ZSdcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjb250cm9sUGFuZWwgPSBuZXcgQmxhY2tib2R5U3BlY3RydW1Db250cm9sUGFuZWwoIG1vZGVsLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvbnRyb2xQYW5lbCcgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3Qgc2F2ZWRJbmZvcm1hdGlvblBhbmVsID0gbmV3IFNhdmVkR3JhcGhJbmZvcm1hdGlvblBhbmVsKCBtb2RlbCwge1xyXG4gICAgICBtaW5XaWR0aDogY29udHJvbFBhbmVsLndpZHRoLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzYXZlZEdyYXBoc1BhbmVsJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgZ3JhcGhOb2RlLmxlZnQgPSBJTlNFVDtcclxuICAgIGdyYXBoTm9kZS5ib3R0b20gPSB0aGlzLmxheW91dEJvdW5kcy5tYXhZIC0gSU5TRVQ7XHJcbiAgICByZXNldEFsbEJ1dHRvbi5yaWdodCA9IHRoaXMubGF5b3V0Qm91bmRzLm1heFggLSBJTlNFVDtcclxuICAgIHJlc2V0QWxsQnV0dG9uLmJvdHRvbSA9IHRoaXMubGF5b3V0Qm91bmRzLm1heFkgLSBJTlNFVDtcclxuICAgIHRoZXJtb21ldGVyLnJpZ2h0ID0gdGhpcy5sYXlvdXRCb3VuZHMubWF4WCAtIElOU0VUO1xyXG4gICAgdGhlcm1vbWV0ZXJUZXh0LmNlbnRlclggPSB0aGVybW9tZXRlci5yaWdodCArIHRoZXJtb21ldGVyLnRoZXJtb21ldGVyQ2VudGVyWEZyb21SaWdodDtcclxuICAgIHRlbXBlcmF0dXJlVGV4dC5jZW50ZXJYID0gdGhlcm1vbWV0ZXJUZXh0LmNlbnRlclg7XHJcbiAgICB0aGVybW9tZXRlclRleHQudG9wID0gSU5TRVQgKyBURU1QRVJBVFVSRV9MQUJFTF9TUEFDSU5HO1xyXG4gICAgdGVtcGVyYXR1cmVUZXh0LnRvcCA9IHRoZXJtb21ldGVyVGV4dC5ib3R0b20gKyBURU1QRVJBVFVSRV9MQUJFTF9TUEFDSU5HO1xyXG4gICAgdGhlcm1vbWV0ZXIudG9wID0gdGVtcGVyYXR1cmVUZXh0LmJvdHRvbSArIFRFTVBFUkFUVVJFX0xBQkVMX1NQQUNJTkc7XHJcbiAgICBjb250cm9sUGFuZWwucmlnaHQgPSB0aGVybW9tZXRlci5sZWZ0IC0gMjA7XHJcbiAgICBjb250cm9sUGFuZWwudG9wID0gdGhlcm1vbWV0ZXJUZXh0LmNlbnRlclk7XHJcbiAgICBzYXZlZEluZm9ybWF0aW9uUGFuZWwuY2VudGVyWCA9IGNvbnRyb2xQYW5lbC5jZW50ZXJYO1xyXG4gICAgc2F2ZWRJbmZvcm1hdGlvblBhbmVsLnRvcCA9IGNvbnRyb2xQYW5lbC5ib3R0b20gKyA1NTtcclxuICAgIGJnckFuZFN0YXJEaXNwbGF5LmxlZnQgPSAyMjU7IC8vIExheW91dCBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggZ3JhcGhOb2RlICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBjb250cm9sUGFuZWwgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHNhdmVkSW5mb3JtYXRpb25QYW5lbCApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhlcm1vbWV0ZXIgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoZXJtb21ldGVyVGV4dCApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGVtcGVyYXR1cmVUZXh0ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBiZ3JBbmRTdGFyRGlzcGxheSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcmVzZXRBbGxCdXR0b24gKTtcclxuICB9XHJcbn1cclxuXHJcbmJsYWNrYm9keVNwZWN0cnVtLnJlZ2lzdGVyKCAnQmxhY2tib2R5U3BlY3RydW1TY3JlZW5WaWV3JywgQmxhY2tib2R5U3BlY3RydW1TY3JlZW5WaWV3ICk7XHJcbmV4cG9ydCBkZWZhdWx0IEJsYWNrYm9keVNwZWN0cnVtU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxVQUFVLE1BQU0sb0NBQW9DO0FBQzNELE9BQU9DLGNBQWMsTUFBTSx1REFBdUQ7QUFDbEYsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxRQUFRLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDbEUsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLGlCQUFpQixNQUFNLDRCQUE0QjtBQUMxRCxPQUFPQyx3QkFBd0IsTUFBTSxtQ0FBbUM7QUFDeEUsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBQ3RELE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFDbEQsT0FBT0MsNkJBQTZCLE1BQU0sb0NBQW9DO0FBQzlFLE9BQU9D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