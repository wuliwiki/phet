// Copyright 2014-2021, University of Colorado Boulder

/**
 * Main model for the BlackbodySpectrum screen
 * Controls or contains all of the main sim logic
 *
 * @author Martin Veillette (Berea College)
 * @author Saurabh Totey
 * @author Arnab Purkayastha
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import BlackbodyConstants from '../../BlackbodyConstants.js';
import blackbodySpectrum from '../../blackbodySpectrum.js';
import BlackbodyBodyModel from './BlackbodyBodyModel.js';
class BlackbodySpectrumModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    // @public {Property.<boolean>}
    this.graphValuesVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('graphValuesVisibleProperty'),
      phetioDocumentation: 'whether the graph values should be visible'
    });

    // @public {Property.<boolean>}
    this.intensityVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('intensityVisibleProperty'),
      phetioDocumentation: 'whether the intensity (area under the curve) of the graph should be visible'
    });

    // @public {Property.<boolean>}
    this.labelsVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('labelsVisibleProperty'),
      phetioDocumentation: 'whether the graph labels should be visible'
    });

    // @public {BlackbodyBodyModel} - the main body for the simulation
    this.mainBody = new BlackbodyBodyModel(BlackbodyConstants.sunTemperature, tandem.createTandem('mainBody'));

    // @public {BlackbodyBodyModel} - the primary saved body. There are two separate saved bodies instead of an array
    // for simplicity with phet-io, see https://github.com/phetsims/blackbody-spectrum/issues/117
    this.savedBodyOne = new BlackbodyBodyModel(null, tandem.createTandem('savedBodyOne'));

    // @public {BlackbodyBodyModel} - the secondary saved body
    this.savedBodyTwo = new BlackbodyBodyModel(null, tandem.createTandem('savedBodyTwo'));

    // @public {number} max wavelength in nanometers
    this.wavelengthMax = 3000;
  }

  /**
   * Resets all of the model's settings and bodies
   * @public
   */
  reset() {
    this.graphValuesVisibleProperty.reset();
    this.intensityVisibleProperty.reset();
    this.labelsVisibleProperty.reset();
    this.mainBody.reset();
    this.clearSavedGraphs();
  }

  /**
   * Shifts savedBodyOne to savedBodyTwo and saves the main body to savedBodyOne
   * @public
   */
  saveMainBody() {
    this.savedBodyTwo.temperatureProperty.value = this.savedBodyOne.temperatureProperty.value;
    this.savedBodyOne.temperatureProperty.value = this.mainBody.temperatureProperty.value;
  }

  /**
   * A function that clears saved graphs
   * @public
   */
  clearSavedGraphs() {
    this.savedBodyOne.reset();
    this.savedBodyTwo.reset();
  }
}
blackbodySpectrum.register('BlackbodySpectrumModel', BlackbodySpectrumModel);
export default BlackbodySpectrumModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJCbGFja2JvZHlDb25zdGFudHMiLCJibGFja2JvZHlTcGVjdHJ1bSIsIkJsYWNrYm9keUJvZHlNb2RlbCIsIkJsYWNrYm9keVNwZWN0cnVtTW9kZWwiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsImdyYXBoVmFsdWVzVmlzaWJsZVByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsImludGVuc2l0eVZpc2libGVQcm9wZXJ0eSIsImxhYmVsc1Zpc2libGVQcm9wZXJ0eSIsIm1haW5Cb2R5Iiwic3VuVGVtcGVyYXR1cmUiLCJzYXZlZEJvZHlPbmUiLCJzYXZlZEJvZHlUd28iLCJ3YXZlbGVuZ3RoTWF4IiwicmVzZXQiLCJjbGVhclNhdmVkR3JhcGhzIiwic2F2ZU1haW5Cb2R5IiwidGVtcGVyYXR1cmVQcm9wZXJ0eSIsInZhbHVlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCbGFja2JvZHlTcGVjdHJ1bU1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gbW9kZWwgZm9yIHRoZSBCbGFja2JvZHlTcGVjdHJ1bSBzY3JlZW5cclxuICogQ29udHJvbHMgb3IgY29udGFpbnMgYWxsIG9mIHRoZSBtYWluIHNpbSBsb2dpY1xyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqIEBhdXRob3IgU2F1cmFiaCBUb3RleVxyXG4gKiBAYXV0aG9yIEFybmFiIFB1cmtheWFzdGhhXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCbGFja2JvZHlDb25zdGFudHMgZnJvbSAnLi4vLi4vQmxhY2tib2R5Q29uc3RhbnRzLmpzJztcclxuaW1wb3J0IGJsYWNrYm9keVNwZWN0cnVtIGZyb20gJy4uLy4uL2JsYWNrYm9keVNwZWN0cnVtLmpzJztcclxuaW1wb3J0IEJsYWNrYm9keUJvZHlNb2RlbCBmcm9tICcuL0JsYWNrYm9keUJvZHlNb2RlbC5qcyc7XHJcblxyXG5jbGFzcyBCbGFja2JvZHlTcGVjdHJ1bU1vZGVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPGJvb2xlYW4+fVxyXG4gICAgdGhpcy5ncmFwaFZhbHVlc1Zpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2dyYXBoVmFsdWVzVmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnd2hldGhlciB0aGUgZ3JhcGggdmFsdWVzIHNob3VsZCBiZSB2aXNpYmxlJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn1cclxuICAgIHRoaXMuaW50ZW5zaXR5VmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaW50ZW5zaXR5VmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnd2hldGhlciB0aGUgaW50ZW5zaXR5IChhcmVhIHVuZGVyIHRoZSBjdXJ2ZSkgb2YgdGhlIGdyYXBoIHNob3VsZCBiZSB2aXNpYmxlJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn1cclxuICAgIHRoaXMubGFiZWxzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxzVmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnd2hldGhlciB0aGUgZ3JhcGggbGFiZWxzIHNob3VsZCBiZSB2aXNpYmxlJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge0JsYWNrYm9keUJvZHlNb2RlbH0gLSB0aGUgbWFpbiBib2R5IGZvciB0aGUgc2ltdWxhdGlvblxyXG4gICAgdGhpcy5tYWluQm9keSA9IG5ldyBCbGFja2JvZHlCb2R5TW9kZWwoIEJsYWNrYm9keUNvbnN0YW50cy5zdW5UZW1wZXJhdHVyZSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21haW5Cb2R5JyApICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7QmxhY2tib2R5Qm9keU1vZGVsfSAtIHRoZSBwcmltYXJ5IHNhdmVkIGJvZHkuIFRoZXJlIGFyZSB0d28gc2VwYXJhdGUgc2F2ZWQgYm9kaWVzIGluc3RlYWQgb2YgYW4gYXJyYXlcclxuICAgIC8vIGZvciBzaW1wbGljaXR5IHdpdGggcGhldC1pbywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9ibGFja2JvZHktc3BlY3RydW0vaXNzdWVzLzExN1xyXG4gICAgdGhpcy5zYXZlZEJvZHlPbmUgPSBuZXcgQmxhY2tib2R5Qm9keU1vZGVsKCBudWxsLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2F2ZWRCb2R5T25lJyApICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7QmxhY2tib2R5Qm9keU1vZGVsfSAtIHRoZSBzZWNvbmRhcnkgc2F2ZWQgYm9keVxyXG4gICAgdGhpcy5zYXZlZEJvZHlUd28gPSBuZXcgQmxhY2tib2R5Qm9keU1vZGVsKCBudWxsLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2F2ZWRCb2R5VHdvJyApICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7bnVtYmVyfSBtYXggd2F2ZWxlbmd0aCBpbiBuYW5vbWV0ZXJzXHJcbiAgICB0aGlzLndhdmVsZW5ndGhNYXggPSAzMDAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIGFsbCBvZiB0aGUgbW9kZWwncyBzZXR0aW5ncyBhbmQgYm9kaWVzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5ncmFwaFZhbHVlc1Zpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5pbnRlbnNpdHlWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubGFiZWxzVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLm1haW5Cb2R5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmNsZWFyU2F2ZWRHcmFwaHMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNoaWZ0cyBzYXZlZEJvZHlPbmUgdG8gc2F2ZWRCb2R5VHdvIGFuZCBzYXZlcyB0aGUgbWFpbiBib2R5IHRvIHNhdmVkQm9keU9uZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzYXZlTWFpbkJvZHkoKSB7XHJcbiAgICB0aGlzLnNhdmVkQm9keVR3by50ZW1wZXJhdHVyZVByb3BlcnR5LnZhbHVlID0gdGhpcy5zYXZlZEJvZHlPbmUudGVtcGVyYXR1cmVQcm9wZXJ0eS52YWx1ZTtcclxuICAgIHRoaXMuc2F2ZWRCb2R5T25lLnRlbXBlcmF0dXJlUHJvcGVydHkudmFsdWUgPSB0aGlzLm1haW5Cb2R5LnRlbXBlcmF0dXJlUHJvcGVydHkudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgY2xlYXJzIHNhdmVkIGdyYXBoc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjbGVhclNhdmVkR3JhcGhzKCkge1xyXG4gICAgdGhpcy5zYXZlZEJvZHlPbmUucmVzZXQoKTtcclxuICAgIHRoaXMuc2F2ZWRCb2R5VHdvLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5ibGFja2JvZHlTcGVjdHJ1bS5yZWdpc3RlciggJ0JsYWNrYm9keVNwZWN0cnVtTW9kZWwnLCBCbGFja2JvZHlTcGVjdHJ1bU1vZGVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IEJsYWNrYm9keVNwZWN0cnVtTW9kZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLGlCQUFpQixNQUFNLDRCQUE0QjtBQUMxRCxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFFeEQsTUFBTUMsc0JBQXNCLENBQUM7RUFFM0I7QUFDRjtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQjtJQUNBLElBQUksQ0FBQ0MsMEJBQTBCLEdBQUcsSUFBSVAsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUM1RE0sTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSw0QkFBNkIsQ0FBQztNQUMzREMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDQyx3QkFBd0IsR0FBRyxJQUFJVixlQUFlLENBQUUsS0FBSyxFQUFFO01BQzFETSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLDBCQUEyQixDQUFDO01BQ3pEQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNFLHFCQUFxQixHQUFHLElBQUlYLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDdkRNLE1BQU0sRUFBRUEsTUFBTSxDQUFDRSxZQUFZLENBQUUsdUJBQXdCLENBQUM7TUFDdERDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0csUUFBUSxHQUFHLElBQUlULGtCQUFrQixDQUFFRixrQkFBa0IsQ0FBQ1ksY0FBYyxFQUFFUCxNQUFNLENBQUNFLFlBQVksQ0FBRSxVQUFXLENBQUUsQ0FBQzs7SUFFOUc7SUFDQTtJQUNBLElBQUksQ0FBQ00sWUFBWSxHQUFHLElBQUlYLGtCQUFrQixDQUFFLElBQUksRUFBRUcsTUFBTSxDQUFDRSxZQUFZLENBQUUsY0FBZSxDQUFFLENBQUM7O0lBRXpGO0lBQ0EsSUFBSSxDQUFDTyxZQUFZLEdBQUcsSUFBSVosa0JBQWtCLENBQUUsSUFBSSxFQUFFRyxNQUFNLENBQUNFLFlBQVksQ0FBRSxjQUFlLENBQUUsQ0FBQzs7SUFFekY7SUFDQSxJQUFJLENBQUNRLGFBQWEsR0FBRyxJQUFJO0VBQzNCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ1YsMEJBQTBCLENBQUNVLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLElBQUksQ0FBQ1Asd0JBQXdCLENBQUNPLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLElBQUksQ0FBQ04scUJBQXFCLENBQUNNLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQ0wsUUFBUSxDQUFDSyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLENBQUNDLGdCQUFnQixDQUFDLENBQUM7RUFDekI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsWUFBWUEsQ0FBQSxFQUFHO0lBQ2IsSUFBSSxDQUFDSixZQUFZLENBQUNLLG1CQUFtQixDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDUCxZQUFZLENBQUNNLG1CQUFtQixDQUFDQyxLQUFLO0lBQ3pGLElBQUksQ0FBQ1AsWUFBWSxDQUFDTSxtQkFBbUIsQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ1QsUUFBUSxDQUFDUSxtQkFBbUIsQ0FBQ0MsS0FBSztFQUN2Rjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFSCxnQkFBZ0JBLENBQUEsRUFBRztJQUNqQixJQUFJLENBQUNKLFlBQVksQ0FBQ0csS0FBSyxDQUFDLENBQUM7SUFDekIsSUFBSSxDQUFDRixZQUFZLENBQUNFLEtBQUssQ0FBQyxDQUFDO0VBQzNCO0FBQ0Y7QUFFQWYsaUJBQWlCLENBQUNvQixRQUFRLENBQUUsd0JBQXdCLEVBQUVsQixzQkFBdUIsQ0FBQztBQUM5RSxlQUFlQSxzQkFBc0IifQ==