// Copyright 2013-2023, University of Colorado Boulder

/**
 * Model for the 'Point-Slope' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import GLColors from '../../common/GLColors.js';
import Line from '../../common/model/Line.js';
import LineFormsModel from '../../common/model/LineFormsModel.js';
import graphingLines from '../../graphingLines.js';
import PointSlopeParameterRange from './PointSlopeParameterRange.js';
export default class PointSlopeModel extends LineFormsModel {
  // Ranges of the point

  // Ranges of the slope = rise / run

  constructor(tandem, providedInteractiveLine, providedParameterRange) {
    const interactiveLine = providedInteractiveLine || Line.createPointSlope(1, 2, 3, 4, GLColors.INTERACTIVE_LINE);
    const parameterRange = providedParameterRange || new PointSlopeParameterRange();
    super(interactiveLine, tandem);
    this.x1RangeProperty = new Property(this.graph.xRange);
    this.y1RangeProperty = new Property(this.graph.yRange);
    this.riseRangeProperty = new Property(this.graph.yRange);
    this.runRangeProperty = new Property(this.graph.xRange);

    // Dynamically adjust ranges so that variables are constrained to the bounds of the graph.
    // unlink unnecessary because PointSlopeModel exists for the lifetime of the sim.
    this.interactiveLineProperty.link(line => {
      this.x1RangeProperty.value = parameterRange.x1(line, this.graph);
      this.y1RangeProperty.value = parameterRange.y1(line, this.graph);
      this.riseRangeProperty.value = parameterRange.rise(line, this.graph);
      this.runRangeProperty.value = parameterRange.run(line, this.graph);
    });
  }
}
graphingLines.register('PointSlopeModel', PointSlopeModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkdMQ29sb3JzIiwiTGluZSIsIkxpbmVGb3Jtc01vZGVsIiwiZ3JhcGhpbmdMaW5lcyIsIlBvaW50U2xvcGVQYXJhbWV0ZXJSYW5nZSIsIlBvaW50U2xvcGVNb2RlbCIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwicHJvdmlkZWRJbnRlcmFjdGl2ZUxpbmUiLCJwcm92aWRlZFBhcmFtZXRlclJhbmdlIiwiaW50ZXJhY3RpdmVMaW5lIiwiY3JlYXRlUG9pbnRTbG9wZSIsIklOVEVSQUNUSVZFX0xJTkUiLCJwYXJhbWV0ZXJSYW5nZSIsIngxUmFuZ2VQcm9wZXJ0eSIsImdyYXBoIiwieFJhbmdlIiwieTFSYW5nZVByb3BlcnR5IiwieVJhbmdlIiwicmlzZVJhbmdlUHJvcGVydHkiLCJydW5SYW5nZVByb3BlcnR5IiwiaW50ZXJhY3RpdmVMaW5lUHJvcGVydHkiLCJsaW5rIiwibGluZSIsInZhbHVlIiwieDEiLCJ5MSIsInJpc2UiLCJydW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBvaW50U2xvcGVNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlICdQb2ludC1TbG9wZScgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBHTENvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vR0xDb2xvcnMuanMnO1xyXG5pbXBvcnQgTGluZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvTGluZS5qcyc7XHJcbmltcG9ydCBMaW5lRm9ybXNNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvTGluZUZvcm1zTW9kZWwuanMnO1xyXG5pbXBvcnQgZ3JhcGhpbmdMaW5lcyBmcm9tICcuLi8uLi9ncmFwaGluZ0xpbmVzLmpzJztcclxuaW1wb3J0IFBvaW50U2xvcGVQYXJhbWV0ZXJSYW5nZSBmcm9tICcuL1BvaW50U2xvcGVQYXJhbWV0ZXJSYW5nZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludFNsb3BlTW9kZWwgZXh0ZW5kcyBMaW5lRm9ybXNNb2RlbCB7XHJcblxyXG4gIC8vIFJhbmdlcyBvZiB0aGUgcG9pbnRcclxuICBwdWJsaWMgcmVhZG9ubHkgeDFSYW5nZVByb3BlcnR5OiBQcm9wZXJ0eTxSYW5nZT47XHJcbiAgcHVibGljIHJlYWRvbmx5IHkxUmFuZ2VQcm9wZXJ0eTogUHJvcGVydHk8UmFuZ2U+O1xyXG5cclxuICAvLyBSYW5nZXMgb2YgdGhlIHNsb3BlID0gcmlzZSAvIHJ1blxyXG4gIHB1YmxpYyByZWFkb25seSByaXNlUmFuZ2VQcm9wZXJ0eTogUHJvcGVydHk8UmFuZ2U+O1xyXG4gIHB1YmxpYyByZWFkb25seSBydW5SYW5nZVByb3BlcnR5OiBQcm9wZXJ0eTxSYW5nZT47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0sIHByb3ZpZGVkSW50ZXJhY3RpdmVMaW5lPzogTGluZSwgcHJvdmlkZWRQYXJhbWV0ZXJSYW5nZT86IFBvaW50U2xvcGVQYXJhbWV0ZXJSYW5nZSApIHtcclxuXHJcbiAgICBjb25zdCBpbnRlcmFjdGl2ZUxpbmUgPSBwcm92aWRlZEludGVyYWN0aXZlTGluZSB8fCBMaW5lLmNyZWF0ZVBvaW50U2xvcGUoIDEsIDIsIDMsIDQsIEdMQ29sb3JzLklOVEVSQUNUSVZFX0xJTkUgKTtcclxuICAgIGNvbnN0IHBhcmFtZXRlclJhbmdlID0gcHJvdmlkZWRQYXJhbWV0ZXJSYW5nZSB8fCBuZXcgUG9pbnRTbG9wZVBhcmFtZXRlclJhbmdlKCk7XHJcblxyXG4gICAgc3VwZXIoIGludGVyYWN0aXZlTGluZSwgdGFuZGVtICk7XHJcblxyXG4gICAgdGhpcy54MVJhbmdlUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHRoaXMuZ3JhcGgueFJhbmdlICk7XHJcbiAgICB0aGlzLnkxUmFuZ2VQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggdGhpcy5ncmFwaC55UmFuZ2UgKTtcclxuICAgIHRoaXMucmlzZVJhbmdlUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHRoaXMuZ3JhcGgueVJhbmdlICk7XHJcbiAgICB0aGlzLnJ1blJhbmdlUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHRoaXMuZ3JhcGgueFJhbmdlICk7XHJcblxyXG4gICAgLy8gRHluYW1pY2FsbHkgYWRqdXN0IHJhbmdlcyBzbyB0aGF0IHZhcmlhYmxlcyBhcmUgY29uc3RyYWluZWQgdG8gdGhlIGJvdW5kcyBvZiB0aGUgZ3JhcGguXHJcbiAgICAvLyB1bmxpbmsgdW5uZWNlc3NhcnkgYmVjYXVzZSBQb2ludFNsb3BlTW9kZWwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbS5cclxuICAgIHRoaXMuaW50ZXJhY3RpdmVMaW5lUHJvcGVydHkubGluayggbGluZSA9PiB7XHJcbiAgICAgIHRoaXMueDFSYW5nZVByb3BlcnR5LnZhbHVlID0gcGFyYW1ldGVyUmFuZ2UueDEoIGxpbmUsIHRoaXMuZ3JhcGggKTtcclxuICAgICAgdGhpcy55MVJhbmdlUHJvcGVydHkudmFsdWUgPSBwYXJhbWV0ZXJSYW5nZS55MSggbGluZSwgdGhpcy5ncmFwaCApO1xyXG4gICAgICB0aGlzLnJpc2VSYW5nZVByb3BlcnR5LnZhbHVlID0gcGFyYW1ldGVyUmFuZ2UucmlzZSggbGluZSwgdGhpcy5ncmFwaCApO1xyXG4gICAgICB0aGlzLnJ1blJhbmdlUHJvcGVydHkudmFsdWUgPSBwYXJhbWV0ZXJSYW5nZS5ydW4oIGxpbmUsIHRoaXMuZ3JhcGggKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdQb2ludFNsb3BlTW9kZWwnLCBQb2ludFNsb3BlTW9kZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxRQUFRLE1BQU0sMEJBQTBCO0FBQy9DLE9BQU9DLElBQUksTUFBTSw0QkFBNEI7QUFDN0MsT0FBT0MsY0FBYyxNQUFNLHNDQUFzQztBQUNqRSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLHdCQUF3QixNQUFNLCtCQUErQjtBQUdwRSxlQUFlLE1BQU1DLGVBQWUsU0FBU0gsY0FBYyxDQUFDO0VBRTFEOztFQUlBOztFQUlPSSxXQUFXQSxDQUFFQyxNQUFjLEVBQUVDLHVCQUE4QixFQUFFQyxzQkFBaUQsRUFBRztJQUV0SCxNQUFNQyxlQUFlLEdBQUdGLHVCQUF1QixJQUFJUCxJQUFJLENBQUNVLGdCQUFnQixDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVgsUUFBUSxDQUFDWSxnQkFBaUIsQ0FBQztJQUNqSCxNQUFNQyxjQUFjLEdBQUdKLHNCQUFzQixJQUFJLElBQUlMLHdCQUF3QixDQUFDLENBQUM7SUFFL0UsS0FBSyxDQUFFTSxlQUFlLEVBQUVILE1BQU8sQ0FBQztJQUVoQyxJQUFJLENBQUNPLGVBQWUsR0FBRyxJQUFJZixRQUFRLENBQUUsSUFBSSxDQUFDZ0IsS0FBSyxDQUFDQyxNQUFPLENBQUM7SUFDeEQsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSWxCLFFBQVEsQ0FBRSxJQUFJLENBQUNnQixLQUFLLENBQUNHLE1BQU8sQ0FBQztJQUN4RCxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUlwQixRQUFRLENBQUUsSUFBSSxDQUFDZ0IsS0FBSyxDQUFDRyxNQUFPLENBQUM7SUFDMUQsSUFBSSxDQUFDRSxnQkFBZ0IsR0FBRyxJQUFJckIsUUFBUSxDQUFFLElBQUksQ0FBQ2dCLEtBQUssQ0FBQ0MsTUFBTyxDQUFDOztJQUV6RDtJQUNBO0lBQ0EsSUFBSSxDQUFDSyx1QkFBdUIsQ0FBQ0MsSUFBSSxDQUFFQyxJQUFJLElBQUk7TUFDekMsSUFBSSxDQUFDVCxlQUFlLENBQUNVLEtBQUssR0FBR1gsY0FBYyxDQUFDWSxFQUFFLENBQUVGLElBQUksRUFBRSxJQUFJLENBQUNSLEtBQU0sQ0FBQztNQUNsRSxJQUFJLENBQUNFLGVBQWUsQ0FBQ08sS0FBSyxHQUFHWCxjQUFjLENBQUNhLEVBQUUsQ0FBRUgsSUFBSSxFQUFFLElBQUksQ0FBQ1IsS0FBTSxDQUFDO01BQ2xFLElBQUksQ0FBQ0ksaUJBQWlCLENBQUNLLEtBQUssR0FBR1gsY0FBYyxDQUFDYyxJQUFJLENBQUVKLElBQUksRUFBRSxJQUFJLENBQUNSLEtBQU0sQ0FBQztNQUN0RSxJQUFJLENBQUNLLGdCQUFnQixDQUFDSSxLQUFLLEdBQUdYLGNBQWMsQ0FBQ2UsR0FBRyxDQUFFTCxJQUFJLEVBQUUsSUFBSSxDQUFDUixLQUFNLENBQUM7SUFDdEUsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBWixhQUFhLENBQUMwQixRQUFRLENBQUUsaUJBQWlCLEVBQUV4QixlQUFnQixDQUFDIn0=