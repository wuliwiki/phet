// Copyright 2014-2023, University of Colorado Boulder

/**
 * A dimensional arrow is used in engineering drawings or technical drawings to denote the dimensions
 * of something in the drawing. It includes an arrow drawn between two perpendicular lines which mark
 * the end points of the thing in the drawing that's being measured.
 *
 * We're using a dimensional arrow in this sim to indicate the dimensions of slope: rise and run.
 *
 * The arrow has a head at the tip, and there are delimiters (perpendicular lines) at the tip and tail.
 * The arrow head is different than scenery-phet.ArrowNode.
 * Currently supports only horizontal and vertical arrows.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import { Shape } from '../../../../kite/js/imports.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { Line, Node, Path } from '../../../../scenery/js/imports.js';
import graphingLines from '../../graphingLines.js';
export default class DimensionalArrowNode extends Node {
  constructor(tailX, tailY, tipX, tipY, providedOptions) {
    const options = optionize()({
      // SelfOptions
      stroke: 'black',
      lineWidth: 1,
      arrowTipSize: new Dimension2(6, 8),
      delimiterLength: 10,
      delimitersVisible: true
    }, providedOptions);
    super();
    this.arrowTipSize = options.arrowTipSize;
    this.delimiterLength = options.delimiterLength;
    this.lineWidth = options.lineWidth;

    // Arrow
    const pathOptions = {
      stroke: options.stroke,
      lineWidth: options.lineWidth
    };
    this.lineNode = new Line(0, 0, 0, 1, pathOptions);
    this.tipNode = new Path(null, pathOptions);

    // Delimiters
    const delimiterOptions = combineOptions({
      visible: options.delimitersVisible
    }, pathOptions);
    this.tipDelimiterNode = new Line(0, 0, 0, 1, delimiterOptions);
    this.tailDelimiterNode = new Line(0, 0, 0, 1, delimiterOptions);
    options.children = [this.tipDelimiterNode, this.tailDelimiterNode, this.lineNode, this.tipNode];
    this.mutate(options);

    // initialize
    this.setTailAndTip(tailX, tailY, tipX, tipY);
  }

  /**
   * Sets the tail and tip of the arrow, accounting for the lineWidth when positioning the arrow head.
   */
  setTailAndTip(tailX, tailY, tipX, tipY) {
    const tipWidth = this.arrowTipSize.width;
    const tipHeight = this.arrowTipSize.height;
    const tipOffset = this.lineWidth / 2;
    const tipShape = new Shape();
    if (tailX === tipX) {
      // vertical arrow
      if (tipY > tailY) {
        this.lineNode.setLine(tailX, tailY, tipX, tipY - this.lineWidth / 2);
        // pointing down
        tipShape.moveTo(tipX - tipWidth / 2, tipY - tipHeight - tipOffset);
        tipShape.lineTo(tipX, tipY - tipOffset);
        tipShape.lineTo(tipX + tipWidth / 2, tipY - tipHeight - tipOffset);
      } else {
        this.lineNode.setLine(tailX, tailY, tipX, tipY + this.lineWidth / 2);
        // pointing up
        tipShape.moveTo(tipX - tipWidth / 2, tipY + tipHeight + tipOffset);
        tipShape.lineTo(tipX, tipY + tipOffset);
        tipShape.lineTo(tipX + tipWidth / 2, tipY + tipHeight + tipOffset);
      }
      this.tipDelimiterNode.setLine(tipX - this.delimiterLength / 2, tipY, tipX + this.delimiterLength / 2, tipY);
      this.tailDelimiterNode.setLine(tailX - this.delimiterLength / 2, tailY, tailX + this.delimiterLength / 2, tailY);
    } else if (tailY === tipY) {
      this.lineNode.setLine(tailX, tailY, tipX, tipY);
      // horizontal arrow
      if (tailX > tipX) {
        this.lineNode.setLine(tailX, tailY, tipX + this.lineWidth / 2, tipY);
        // pointing left
        tipShape.moveTo(tipX + tipHeight + tipOffset, tipY - tipWidth / 2);
        tipShape.lineTo(tipX + tipOffset, tipY);
        tipShape.lineTo(tipX + tipHeight + tipOffset, tipY + tipWidth / 2);
      } else {
        this.lineNode.setLine(tailX, tailY, tipX - this.lineWidth / 2, tipY);
        // pointing right
        tipShape.moveTo(tipX - tipHeight - tipOffset, tipY - tipWidth / 2);
        tipShape.lineTo(tipX - tipOffset, tipY);
        tipShape.lineTo(tipX - tipHeight - tipOffset, tipY + tipWidth / 2);
      }
      this.tipDelimiterNode.setLine(tipX, tipY - this.delimiterLength / 2, tipX, tipY + this.delimiterLength / 2);
      this.tailDelimiterNode.setLine(tailX, tailY - this.delimiterLength / 2, tailX, tailY + this.delimiterLength / 2);
    } else {
      throw new Error('this implementation supports only horizontal and vertical arrows');
    }
    this.tipNode.shape = tipShape;
  }
}
graphingLines.register('DimensionalArrowNode', DimensionalArrowNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiU2hhcGUiLCJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkxpbmUiLCJOb2RlIiwiUGF0aCIsImdyYXBoaW5nTGluZXMiLCJEaW1lbnNpb25hbEFycm93Tm9kZSIsImNvbnN0cnVjdG9yIiwidGFpbFgiLCJ0YWlsWSIsInRpcFgiLCJ0aXBZIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInN0cm9rZSIsImxpbmVXaWR0aCIsImFycm93VGlwU2l6ZSIsImRlbGltaXRlckxlbmd0aCIsImRlbGltaXRlcnNWaXNpYmxlIiwicGF0aE9wdGlvbnMiLCJsaW5lTm9kZSIsInRpcE5vZGUiLCJkZWxpbWl0ZXJPcHRpb25zIiwidmlzaWJsZSIsInRpcERlbGltaXRlck5vZGUiLCJ0YWlsRGVsaW1pdGVyTm9kZSIsImNoaWxkcmVuIiwibXV0YXRlIiwic2V0VGFpbEFuZFRpcCIsInRpcFdpZHRoIiwid2lkdGgiLCJ0aXBIZWlnaHQiLCJoZWlnaHQiLCJ0aXBPZmZzZXQiLCJ0aXBTaGFwZSIsInNldExpbmUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJFcnJvciIsInNoYXBlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaW1lbnNpb25hbEFycm93Tm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGRpbWVuc2lvbmFsIGFycm93IGlzIHVzZWQgaW4gZW5naW5lZXJpbmcgZHJhd2luZ3Mgb3IgdGVjaG5pY2FsIGRyYXdpbmdzIHRvIGRlbm90ZSB0aGUgZGltZW5zaW9uc1xyXG4gKiBvZiBzb21ldGhpbmcgaW4gdGhlIGRyYXdpbmcuIEl0IGluY2x1ZGVzIGFuIGFycm93IGRyYXduIGJldHdlZW4gdHdvIHBlcnBlbmRpY3VsYXIgbGluZXMgd2hpY2ggbWFya1xyXG4gKiB0aGUgZW5kIHBvaW50cyBvZiB0aGUgdGhpbmcgaW4gdGhlIGRyYXdpbmcgdGhhdCdzIGJlaW5nIG1lYXN1cmVkLlxyXG4gKlxyXG4gKiBXZSdyZSB1c2luZyBhIGRpbWVuc2lvbmFsIGFycm93IGluIHRoaXMgc2ltIHRvIGluZGljYXRlIHRoZSBkaW1lbnNpb25zIG9mIHNsb3BlOiByaXNlIGFuZCBydW4uXHJcbiAqXHJcbiAqIFRoZSBhcnJvdyBoYXMgYSBoZWFkIGF0IHRoZSB0aXAsIGFuZCB0aGVyZSBhcmUgZGVsaW1pdGVycyAocGVycGVuZGljdWxhciBsaW5lcykgYXQgdGhlIHRpcCBhbmQgdGFpbC5cclxuICogVGhlIGFycm93IGhlYWQgaXMgZGlmZmVyZW50IHRoYW4gc2NlbmVyeS1waGV0LkFycm93Tm9kZS5cclxuICogQ3VycmVudGx5IHN1cHBvcnRzIG9ubHkgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgYXJyb3dzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IExpbmUsIExpbmVPcHRpb25zLCBOb2RlLCBOb2RlT3B0aW9ucywgUGF0aCwgVENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdyYXBoaW5nTGluZXMgZnJvbSAnLi4vLi4vZ3JhcGhpbmdMaW5lcy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHN0cm9rZT86IFRDb2xvcjtcclxuICBsaW5lV2lkdGg/OiBudW1iZXI7XHJcbiAgYXJyb3dUaXBTaXplPzogRGltZW5zaW9uMjsgLy8gdXNlIGV2ZW4tbnVtYmVyIGRpbWVuc2lvbnMsIG9yIHRpcCB3aWxsIGxvb2sgYXN5bW1ldHJpY2FsIGR1ZSB0byByb3VuZGluZ1xyXG4gIGRlbGltaXRlckxlbmd0aD86IG51bWJlcjtcclxuICBkZWxpbWl0ZXJzVmlzaWJsZT86IGJvb2xlYW47XHJcbn07XHJcblxyXG50eXBlIERpbWVuc2lvbmFsQXJyb3dOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGltZW5zaW9uYWxBcnJvd05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBhcnJvd1RpcFNpemU6IERpbWVuc2lvbjI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkZWxpbWl0ZXJMZW5ndGg6IG51bWJlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGxpbmVXaWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGluZU5vZGU6IExpbmU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB0aXBOb2RlOiBQYXRoO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdGlwRGVsaW1pdGVyTm9kZTogTGluZTtcclxuICBwcml2YXRlIHJlYWRvbmx5IHRhaWxEZWxpbWl0ZXJOb2RlOiBMaW5lO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhaWxYOiBudW1iZXIsIHRhaWxZOiBudW1iZXIsIHRpcFg6IG51bWJlciwgdGlwWTogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM/OiBEaW1lbnNpb25hbEFycm93Tm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxEaW1lbnNpb25hbEFycm93Tm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDEsXHJcbiAgICAgIGFycm93VGlwU2l6ZTogbmV3IERpbWVuc2lvbjIoIDYsIDggKSxcclxuICAgICAgZGVsaW1pdGVyTGVuZ3RoOiAxMCxcclxuICAgICAgZGVsaW1pdGVyc1Zpc2libGU6IHRydWVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5hcnJvd1RpcFNpemUgPSBvcHRpb25zLmFycm93VGlwU2l6ZTtcclxuICAgIHRoaXMuZGVsaW1pdGVyTGVuZ3RoID0gb3B0aW9ucy5kZWxpbWl0ZXJMZW5ndGg7XHJcbiAgICB0aGlzLmxpbmVXaWR0aCA9IG9wdGlvbnMubGluZVdpZHRoO1xyXG5cclxuICAgIC8vIEFycm93XHJcbiAgICBjb25zdCBwYXRoT3B0aW9ucyA9IHtcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLnN0cm9rZSxcclxuICAgICAgbGluZVdpZHRoOiBvcHRpb25zLmxpbmVXaWR0aFxyXG4gICAgfTtcclxuICAgIHRoaXMubGluZU5vZGUgPSBuZXcgTGluZSggMCwgMCwgMCwgMSwgcGF0aE9wdGlvbnMgKTtcclxuICAgIHRoaXMudGlwTm9kZSA9IG5ldyBQYXRoKCBudWxsLCBwYXRoT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIERlbGltaXRlcnNcclxuICAgIGNvbnN0IGRlbGltaXRlck9wdGlvbnMgPSBjb21iaW5lT3B0aW9uczxMaW5lT3B0aW9ucz4oIHtcclxuICAgICAgdmlzaWJsZTogb3B0aW9ucy5kZWxpbWl0ZXJzVmlzaWJsZVxyXG4gICAgfSwgcGF0aE9wdGlvbnMgKTtcclxuICAgIHRoaXMudGlwRGVsaW1pdGVyTm9kZSA9IG5ldyBMaW5lKCAwLCAwLCAwLCAxLCBkZWxpbWl0ZXJPcHRpb25zICk7XHJcbiAgICB0aGlzLnRhaWxEZWxpbWl0ZXJOb2RlID0gbmV3IExpbmUoIDAsIDAsIDAsIDEsIGRlbGltaXRlck9wdGlvbnMgKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyB0aGlzLnRpcERlbGltaXRlck5vZGUsIHRoaXMudGFpbERlbGltaXRlck5vZGUsIHRoaXMubGluZU5vZGUsIHRoaXMudGlwTm9kZSBdO1xyXG5cclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gaW5pdGlhbGl6ZVxyXG4gICAgdGhpcy5zZXRUYWlsQW5kVGlwKCB0YWlsWCwgdGFpbFksIHRpcFgsIHRpcFkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHRhaWwgYW5kIHRpcCBvZiB0aGUgYXJyb3csIGFjY291bnRpbmcgZm9yIHRoZSBsaW5lV2lkdGggd2hlbiBwb3NpdGlvbmluZyB0aGUgYXJyb3cgaGVhZC5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0VGFpbEFuZFRpcCggdGFpbFg6IG51bWJlciwgdGFpbFk6IG51bWJlciwgdGlwWDogbnVtYmVyLCB0aXBZOiBudW1iZXIgKTogdm9pZCB7XHJcblxyXG4gICAgY29uc3QgdGlwV2lkdGggPSB0aGlzLmFycm93VGlwU2l6ZS53aWR0aDtcclxuICAgIGNvbnN0IHRpcEhlaWdodCA9IHRoaXMuYXJyb3dUaXBTaXplLmhlaWdodDtcclxuICAgIGNvbnN0IHRpcE9mZnNldCA9IHRoaXMubGluZVdpZHRoIC8gMjtcclxuICAgIGNvbnN0IHRpcFNoYXBlID0gbmV3IFNoYXBlKCk7XHJcbiAgICBpZiAoIHRhaWxYID09PSB0aXBYICkge1xyXG4gICAgICAvLyB2ZXJ0aWNhbCBhcnJvd1xyXG4gICAgICBpZiAoIHRpcFkgPiB0YWlsWSApIHtcclxuICAgICAgICB0aGlzLmxpbmVOb2RlLnNldExpbmUoIHRhaWxYLCB0YWlsWSwgdGlwWCwgdGlwWSAtICggdGhpcy5saW5lV2lkdGggLyAyICkgKTtcclxuICAgICAgICAvLyBwb2ludGluZyBkb3duXHJcbiAgICAgICAgdGlwU2hhcGUubW92ZVRvKCB0aXBYIC0gKCB0aXBXaWR0aCAvIDIgKSwgdGlwWSAtIHRpcEhlaWdodCAtIHRpcE9mZnNldCApO1xyXG4gICAgICAgIHRpcFNoYXBlLmxpbmVUbyggdGlwWCwgdGlwWSAtIHRpcE9mZnNldCApO1xyXG4gICAgICAgIHRpcFNoYXBlLmxpbmVUbyggdGlwWCArICggdGlwV2lkdGggLyAyICksIHRpcFkgLSB0aXBIZWlnaHQgLSB0aXBPZmZzZXQgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmxpbmVOb2RlLnNldExpbmUoIHRhaWxYLCB0YWlsWSwgdGlwWCwgdGlwWSArICggdGhpcy5saW5lV2lkdGggLyAyICkgKTtcclxuICAgICAgICAvLyBwb2ludGluZyB1cFxyXG4gICAgICAgIHRpcFNoYXBlLm1vdmVUbyggdGlwWCAtICggdGlwV2lkdGggLyAyICksIHRpcFkgKyB0aXBIZWlnaHQgKyB0aXBPZmZzZXQgKTtcclxuICAgICAgICB0aXBTaGFwZS5saW5lVG8oIHRpcFgsIHRpcFkgKyB0aXBPZmZzZXQgKTtcclxuICAgICAgICB0aXBTaGFwZS5saW5lVG8oIHRpcFggKyAoIHRpcFdpZHRoIC8gMiApLCB0aXBZICsgdGlwSGVpZ2h0ICsgdGlwT2Zmc2V0ICk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy50aXBEZWxpbWl0ZXJOb2RlLnNldExpbmUoIHRpcFggLSB0aGlzLmRlbGltaXRlckxlbmd0aCAvIDIsIHRpcFksIHRpcFggKyB0aGlzLmRlbGltaXRlckxlbmd0aCAvIDIsIHRpcFkgKTtcclxuICAgICAgdGhpcy50YWlsRGVsaW1pdGVyTm9kZS5zZXRMaW5lKCB0YWlsWCAtIHRoaXMuZGVsaW1pdGVyTGVuZ3RoIC8gMiwgdGFpbFksIHRhaWxYICsgdGhpcy5kZWxpbWl0ZXJMZW5ndGggLyAyLCB0YWlsWSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHRhaWxZID09PSB0aXBZICkge1xyXG4gICAgICB0aGlzLmxpbmVOb2RlLnNldExpbmUoIHRhaWxYLCB0YWlsWSwgdGlwWCwgdGlwWSApO1xyXG4gICAgICAvLyBob3Jpem9udGFsIGFycm93XHJcbiAgICAgIGlmICggdGFpbFggPiB0aXBYICkge1xyXG4gICAgICAgIHRoaXMubGluZU5vZGUuc2V0TGluZSggdGFpbFgsIHRhaWxZLCB0aXBYICsgKCB0aGlzLmxpbmVXaWR0aCAvIDIgKSwgdGlwWSApO1xyXG4gICAgICAgIC8vIHBvaW50aW5nIGxlZnRcclxuICAgICAgICB0aXBTaGFwZS5tb3ZlVG8oIHRpcFggKyB0aXBIZWlnaHQgKyB0aXBPZmZzZXQsIHRpcFkgLSAoIHRpcFdpZHRoIC8gMiApICk7XHJcbiAgICAgICAgdGlwU2hhcGUubGluZVRvKCB0aXBYICsgdGlwT2Zmc2V0LCB0aXBZICk7XHJcbiAgICAgICAgdGlwU2hhcGUubGluZVRvKCB0aXBYICsgdGlwSGVpZ2h0ICsgdGlwT2Zmc2V0LCB0aXBZICsgKCB0aXBXaWR0aCAvIDIgKSApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMubGluZU5vZGUuc2V0TGluZSggdGFpbFgsIHRhaWxZLCB0aXBYIC0gKCB0aGlzLmxpbmVXaWR0aCAvIDIgKSwgdGlwWSApO1xyXG4gICAgICAgIC8vIHBvaW50aW5nIHJpZ2h0XHJcbiAgICAgICAgdGlwU2hhcGUubW92ZVRvKCB0aXBYIC0gdGlwSGVpZ2h0IC0gdGlwT2Zmc2V0LCB0aXBZIC0gKCB0aXBXaWR0aCAvIDIgKSApO1xyXG4gICAgICAgIHRpcFNoYXBlLmxpbmVUbyggdGlwWCAtIHRpcE9mZnNldCwgdGlwWSApO1xyXG4gICAgICAgIHRpcFNoYXBlLmxpbmVUbyggdGlwWCAtIHRpcEhlaWdodCAtIHRpcE9mZnNldCwgdGlwWSArICggdGlwV2lkdGggLyAyICkgKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnRpcERlbGltaXRlck5vZGUuc2V0TGluZSggdGlwWCwgdGlwWSAtIHRoaXMuZGVsaW1pdGVyTGVuZ3RoIC8gMiwgdGlwWCwgdGlwWSArIHRoaXMuZGVsaW1pdGVyTGVuZ3RoIC8gMiApO1xyXG4gICAgICB0aGlzLnRhaWxEZWxpbWl0ZXJOb2RlLnNldExpbmUoIHRhaWxYLCB0YWlsWSAtIHRoaXMuZGVsaW1pdGVyTGVuZ3RoIC8gMiwgdGFpbFgsIHRhaWxZICsgdGhpcy5kZWxpbWl0ZXJMZW5ndGggLyAyICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAndGhpcyBpbXBsZW1lbnRhdGlvbiBzdXBwb3J0cyBvbmx5IGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGFycm93cycgKTtcclxuICAgIH1cclxuICAgIHRoaXMudGlwTm9kZS5zaGFwZSA9IHRpcFNoYXBlO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdMaW5lcy5yZWdpc3RlciggJ0RpbWVuc2lvbmFsQXJyb3dOb2RlJywgRGltZW5zaW9uYWxBcnJvd05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxTQUFTLElBQUlDLGNBQWMsUUFBUSx1Q0FBdUM7QUFDakYsU0FBU0MsSUFBSSxFQUFlQyxJQUFJLEVBQWVDLElBQUksUUFBZ0IsbUNBQW1DO0FBQ3RHLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFZbEQsZUFBZSxNQUFNQyxvQkFBb0IsU0FBU0gsSUFBSSxDQUFDO0VBVTlDSSxXQUFXQSxDQUFFQyxLQUFhLEVBQUVDLEtBQWEsRUFBRUMsSUFBWSxFQUFFQyxJQUFZLEVBQUVDLGVBQTZDLEVBQUc7SUFFNUgsTUFBTUMsT0FBTyxHQUFHYixTQUFTLENBQXdELENBQUMsQ0FBRTtNQUVsRjtNQUNBYyxNQUFNLEVBQUUsT0FBTztNQUNmQyxTQUFTLEVBQUUsQ0FBQztNQUNaQyxZQUFZLEVBQUUsSUFBSWxCLFVBQVUsQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO01BQ3BDbUIsZUFBZSxFQUFFLEVBQUU7TUFDbkJDLGlCQUFpQixF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