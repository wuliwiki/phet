// Copyright 2013-2023, University of Colorado Boulder

/**
 * Base class for accordion boxes that contains the interactive equation and related controls
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, HSeparator, VBox } from '../../../../scenery/js/imports.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import TextPushButton from '../../../../sun/js/buttons/TextPushButton.js';
import graphingLines from '../../graphingLines.js';
import GraphingLinesStrings from '../../GraphingLinesStrings.js';
import GLColors from '../GLColors.js';
// constants
const BUTTON_FONT = new PhetFont(18);
export default class EquationAccordionBox extends AccordionBox {
  constructor(titleNode, interactiveEquationNode, interactiveLineProperty, savedLines, expandedProperty, tandem) {
    const options = {
      titleNode: titleNode,
      expandedProperty: expandedProperty,
      fill: GLColors.CONTROL_PANEL_BACKGROUND,
      titleXSpacing: 5,
      titleYMargin: 10,
      contentXMargin: 10,
      contentYMargin: 10,
      contentYSpacing: 0,
      buttonXMargin: 10,
      buttonYMargin: 10,
      expandCollapseButtonOptions: {
        sideLength: 30
      },
      tandem: tandem
    };

    // Save Line button
    const saveLineButton = new TextPushButton(GraphingLinesStrings.saveLine, {
      listener: () => savedLines.add(interactiveLineProperty.value.withColor(GLColors.SAVED_LINE_NORMAL)),
      font: BUTTON_FONT,
      baseColor: 'white',
      xMargin: 10
    });

    // Erase Lines button
    const eraseLinesButton = new TextPushButton(GraphingLinesStrings.eraseLines, {
      listener: () => savedLines.clear(),
      font: BUTTON_FONT,
      baseColor: 'white',
      xMargin: 10
    });

    // horizontal layout of buttons
    const buttonGroup = new HBox({
      spacing: 20,
      maxWidth: 320,
      children: [saveLineButton, eraseLinesButton]
    });

    // Disable eraseLinesButton when there are no saved lines. unlink not needed.
    savedLines.lengthProperty.link(length => {
      eraseLinesButton.enabled = length > 0;
    });
    const separatorOptions = {
      stroke: 'rgb( 212, 212, 212 )'
    };
    const contentNode = new VBox({
      align: 'center',
      spacing: 10,
      children: [new HSeparator(separatorOptions), interactiveEquationNode, new HSeparator(separatorOptions), buttonGroup]
    });
    super(contentNode, options);
  }
}
graphingLines.register('EquationAccordionBox', EquationAccordionBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,