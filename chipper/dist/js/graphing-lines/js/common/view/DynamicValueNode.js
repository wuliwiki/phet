// Copyright 2013-2023, University of Colorado Boulder

/**
 * Text node that stays synchronized with a dynamic value. This is used in interactive equations,
 * to keep non-interactive parts of the equation synchronized with the model.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import graphingLines from '../../graphingLines.js';
export default class DynamicValueNode extends Text {
  constructor(valueProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      decimalPlaces: 0,
      absoluteValue: false,
      // TextOptions
      fill: 'black',
      font: new PhetFont(12)
    }, providedOptions);
    super('', options);
    const valueObserver = value => {
      this.string = Utils.toFixed(options.absoluteValue ? Math.abs(value) : value, options.decimalPlaces);
    };
    valueProperty.link(valueObserver); // unlink in dispose

    this.disposeDynamicValueNode = () => {
      valueProperty.unlink(valueObserver);
    };
  }
  dispose() {
    this.disposeDynamicValueNode();
    super.dispose();
  }
}
graphingLines.register('DynamicValueNode', DynamicValueNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIm9wdGlvbml6ZSIsIlBoZXRGb250IiwiVGV4dCIsImdyYXBoaW5nTGluZXMiLCJEeW5hbWljVmFsdWVOb2RlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImRlY2ltYWxQbGFjZXMiLCJhYnNvbHV0ZVZhbHVlIiwiZmlsbCIsImZvbnQiLCJ2YWx1ZU9ic2VydmVyIiwidmFsdWUiLCJzdHJpbmciLCJ0b0ZpeGVkIiwiTWF0aCIsImFicyIsImxpbmsiLCJkaXNwb3NlRHluYW1pY1ZhbHVlTm9kZSIsInVubGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkR5bmFtaWNWYWx1ZU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGV4dCBub2RlIHRoYXQgc3RheXMgc3luY2hyb25pemVkIHdpdGggYSBkeW5hbWljIHZhbHVlLiBUaGlzIGlzIHVzZWQgaW4gaW50ZXJhY3RpdmUgZXF1YXRpb25zLFxyXG4gKiB0byBrZWVwIG5vbi1pbnRlcmFjdGl2ZSBwYXJ0cyBvZiB0aGUgZXF1YXRpb24gc3luY2hyb25pemVkIHdpdGggdGhlIG1vZGVsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBUZXh0LCBUZXh0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBncmFwaGluZ0xpbmVzIGZyb20gJy4uLy4uL2dyYXBoaW5nTGluZXMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBkZWNpbWFsUGxhY2VzPzogbnVtYmVyO1xyXG4gIGFic29sdXRlVmFsdWU/OiBib29sZWFuOyAvLyB3aGV0aGVyIHRvIGRpc3BsYXkgdGhlIGFic29sdXRlIHZhbHVlIG9mIHZhbHVlUHJvcGVydHlcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIER5bmFtaWNWYWx1ZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBUZXh0T3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIER5bmFtaWNWYWx1ZU5vZGUgZXh0ZW5kcyBUZXh0IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlRHluYW1pY1ZhbHVlTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LCBwcm92aWRlZE9wdGlvbnM/OiBEeW5hbWljVmFsdWVOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPER5bmFtaWNWYWx1ZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgVGV4dE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGRlY2ltYWxQbGFjZXM6IDAsXHJcbiAgICAgIGFic29sdXRlVmFsdWU6IGZhbHNlLFxyXG5cclxuICAgICAgLy8gVGV4dE9wdGlvbnNcclxuICAgICAgZmlsbDogJ2JsYWNrJyxcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxMiApXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggJycsIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB2YWx1ZU9ic2VydmVyID0gKCB2YWx1ZTogbnVtYmVyICkgPT4ge1xyXG4gICAgICB0aGlzLnN0cmluZyA9IFV0aWxzLnRvRml4ZWQoICggb3B0aW9ucy5hYnNvbHV0ZVZhbHVlICkgPyBNYXRoLmFicyggdmFsdWUgKSA6IHZhbHVlLCBvcHRpb25zLmRlY2ltYWxQbGFjZXMgKTtcclxuICAgIH07XHJcbiAgICB2YWx1ZVByb3BlcnR5LmxpbmsoIHZhbHVlT2JzZXJ2ZXIgKTsgLy8gdW5saW5rIGluIGRpc3Bvc2VcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VEeW5hbWljVmFsdWVOb2RlID0gKCkgPT4ge1xyXG4gICAgICB2YWx1ZVByb3BlcnR5LnVubGluayggdmFsdWVPYnNlcnZlciApO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlRHluYW1pY1ZhbHVlTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdMaW5lcy5yZWdpc3RlciggJ0R5bmFtaWNWYWx1ZU5vZGUnLCBEeW5hbWljVmFsdWVOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsSUFBSSxRQUFxQixtQ0FBbUM7QUFDckUsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQVNsRCxlQUFlLE1BQU1DLGdCQUFnQixTQUFTRixJQUFJLENBQUM7RUFJMUNHLFdBQVdBLENBQUVDLGFBQXdDLEVBQUVDLGVBQXlDLEVBQUc7SUFFeEcsTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQW9ELENBQUMsQ0FBRTtNQUU5RTtNQUNBUyxhQUFhLEVBQUUsQ0FBQztNQUNoQkMsYUFBYSxFQUFFLEtBQUs7TUFFcEI7TUFDQUMsSUFBSSxFQUFFLE9BQU87TUFDYkMsSUFBSSxFQUFFLElBQUlYLFFBQVEsQ0FBRSxFQUFHO0lBQ3pCLENBQUMsRUFBRU0sZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUUsRUFBRSxFQUFFQyxPQUFRLENBQUM7SUFFcEIsTUFBTUssYUFBYSxHQUFLQyxLQUFhLElBQU07TUFDekMsSUFBSSxDQUFDQyxNQUFNLEdBQUdoQixLQUFLLENBQUNpQixPQUFPLENBQUlSLE9BQU8sQ0FBQ0UsYUFBYSxHQUFLTyxJQUFJLENBQUNDLEdBQUcsQ0FBRUosS0FBTSxDQUFDLEdBQUdBLEtBQUssRUFBRU4sT0FBTyxDQUFDQyxhQUFjLENBQUM7SUFDN0csQ0FBQztJQUNESCxhQUFhLENBQUNhLElBQUksQ0FBRU4sYUFBYyxDQUFDLENBQUMsQ0FBQzs7SUFFckMsSUFBSSxDQUFDTyx1QkFBdUIsR0FBRyxNQUFNO01BQ25DZCxhQUFhLENBQUNlLE1BQU0sQ0FBRVIsYUFBYyxDQUFDO0lBQ3ZDLENBQUM7RUFDSDtFQUVnQlMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0YsdUJBQXVCLENBQUMsQ0FBQztJQUM5QixLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQW5CLGFBQWEsQ0FBQ29CLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRW5CLGdCQUFpQixDQUFDIn0=