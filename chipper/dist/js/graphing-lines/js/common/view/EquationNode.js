// Copyright 2013-2023, University of Colorado Boulder

/**
 * EquationNode is the base class for all equations.
 * Dimensions and layout offsets are computed as percentages of the font's point size.
 * These multipliers were determined empirically by committee - modify at your peril!
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import { Node } from '../../../../scenery/js/imports.js';
import graphingLines from '../../graphingLines.js';
import SlopePicker from './picker/SlopePicker.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class EquationNode extends Node {
  decimalPlaces = 0;

  // Controls the vertical offset of the slope's sign.
  // Zero is vertically centered on the equals sign, positive values move it down, negative move it up.
  // This was created because there was a great deal of discussion about where the sign should be placed.
  slopeSignYOffset = 0;

  // Fudge factors for horizontal lines, to vertically center them with equals sign (set by visual inspection).
  // Note that these are currently all zero, and that looks good in JavaScript.
  // In Java, they were a function of fontSize.
  // We're keeping this feature in case future 'tweaks' are needed.
  slopeSignYFudgeFactor = 0;
  operatorYFudgeFactor = 0;
  fractionLineYFudgeFactor = 0;
  undefinedSlopeYFudgeFactor = 0;
  equalsSignFudgeFactor = 0;

  // thickness of the fraction divisor line

  // size of the lines used to create + and - operators

  // size of the lines used to create + and - signs

  // spacing between components of an equation
  // spacing between a sign and the integer to the right of it
  // spacing between a sign and the fraction to the right of it
  // spacing between a fractional slope and what's to the right of it
  // spacing between an integer slope and what's to the right of it
  // space around an operator (eg, +)
  // space around the relational operator (eg, =)
  // space between a parenthesis and the thing it encloses
  // y spacing between spinners and fraction line
  // y spacing between rise and run values (with blue backgrounds) and fraction line

  // all other y spacing

  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      fontSize: 18
    }, providedOptions);
    super();
    const fontSize = options.fontSize;

    // Multipliers were chosen empirically.
    this.fractionLineThickness = 0.06 * fontSize;
    this.operatorLineSize = new Dimension2(0.54 * fontSize, 0.07 * fontSize);
    this.signLineSize = new Dimension2(0.54 * fontSize, 0.11 * fontSize);
    this.integerSignXSpacing = 0.18 * fontSize;
    this.fractionSignXSpacing = 0.36 * fontSize;
    this.integerSlopeXSpacing = 0.04 * fontSize;
    this.fractionalSlopeXSpacing = 0.15 * fontSize;
    this.operatorXSpacing = 0.25 * fontSize;
    this.relationalOperatorXSpacing = 0.35 * fontSize;
    this.parenXSpacing = 0.07 * fontSize;
    this.pickersYSpacing = 0.2 * fontSize;
    this.slopeYSpacing = 0.4 * fontSize;
    this.ySpacing = 0.1 * fontSize;
    this.mutate(options);
  }

  /**
   * Gets the max width for the rise and run pickers used in an interactive equation.
   */
  static computeMaxSlopePickerWidth(riseRangeProperty, runRangeProperty, font, decimalPlaces) {
    const pickerOptions = {
      font: font,
      decimalPlaces: decimalPlaces
    };

    // Create prototypical pickers.
    const maxRiseNode = new SlopePicker(new Property(riseRangeProperty.value.max), new Property(runRangeProperty.value.max), riseRangeProperty, pickerOptions);
    const minRiseNode = new SlopePicker(new Property(riseRangeProperty.value.min), new Property(runRangeProperty.value.max), riseRangeProperty, pickerOptions);
    const maxRunNode = new SlopePicker(new Property(runRangeProperty.value.max), new Property(riseRangeProperty.value.max), runRangeProperty, pickerOptions);
    const minRunNode = new SlopePicker(new Property(runRangeProperty.value.min), new Property(riseRangeProperty.value.min), runRangeProperty, pickerOptions);

    // Compute the max width
    const maxRiseWidth = Math.max(maxRiseNode.width, minRiseNode.width);
    const maxRunWidth = Math.max(maxRunNode.width, minRunNode.width);
    return Math.max(maxRiseWidth, maxRunWidth);
  }
}
graphingLines.register('EquationNode', EquationNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,