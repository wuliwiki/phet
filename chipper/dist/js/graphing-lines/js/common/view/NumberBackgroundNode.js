// Copyright 2013-2023, University of Colorado Boulder

/**
 * A number displayed on a rectangular background.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import graphingLines from '../../graphingLines.js';
export default class NumberBackgroundNode extends Node {
  constructor(valueProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      decimalPlaces: 0,
      font: new PhetFont(12),
      textFill: 'black',
      backgroundFill: 'white',
      backgroundStroke: null,
      minWidth: 0,
      minHeight: 0,
      xMargin: 5,
      yMargin: 5,
      cornerRadius: 6
    }, providedOptions);
    const textNode = new Text('?', {
      fill: options.textFill,
      font: options.font
    });
    const backgroundNode = new Rectangle(0, 0, 1, 1, {
      fill: options.backgroundFill,
      stroke: options.backgroundStroke,
      cornerRadius: options.cornerRadius
    });
    options.children = [backgroundNode, textNode];
    super(options);
    const valueObserver = value => {
      // format the value
      textNode.string = Utils.toFixed(value, options.decimalPlaces);

      // adjust the background to fit the value
      const backgroundWidth = Math.max(options.minWidth, textNode.width + options.xMargin + options.xMargin);
      const backgroundHeight = Math.max(options.minHeight, textNode.height + options.yMargin + options.yMargin);
      backgroundNode.setRect(0, 0, backgroundWidth, backgroundHeight);

      // center the value in the background
      textNode.centerX = backgroundNode.centerX;
      textNode.centerY = backgroundNode.centerY;
    };
    valueProperty.link(valueObserver); // unlink in dispose

    this.disposeNumberBackgroundNode = () => {
      valueProperty.unlink(valueObserver);
    };
  }
  dispose() {
    this.disposeNumberBackgroundNode();
    super.dispose();
  }
}
graphingLines.register('NumberBackgroundNode', NumberBackgroundNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIm9wdGlvbml6ZSIsIlBoZXRGb250IiwiTm9kZSIsIlJlY3RhbmdsZSIsIlRleHQiLCJncmFwaGluZ0xpbmVzIiwiTnVtYmVyQmFja2dyb3VuZE5vZGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZGVjaW1hbFBsYWNlcyIsImZvbnQiLCJ0ZXh0RmlsbCIsImJhY2tncm91bmRGaWxsIiwiYmFja2dyb3VuZFN0cm9rZSIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwieE1hcmdpbiIsInlNYXJnaW4iLCJjb3JuZXJSYWRpdXMiLCJ0ZXh0Tm9kZSIsImZpbGwiLCJiYWNrZ3JvdW5kTm9kZSIsInN0cm9rZSIsImNoaWxkcmVuIiwidmFsdWVPYnNlcnZlciIsInZhbHVlIiwic3RyaW5nIiwidG9GaXhlZCIsImJhY2tncm91bmRXaWR0aCIsIk1hdGgiLCJtYXgiLCJ3aWR0aCIsImJhY2tncm91bmRIZWlnaHQiLCJoZWlnaHQiLCJzZXRSZWN0IiwiY2VudGVyWCIsImNlbnRlclkiLCJsaW5rIiwiZGlzcG9zZU51bWJlckJhY2tncm91bmROb2RlIiwidW5saW5rIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVtYmVyQmFja2dyb3VuZE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBudW1iZXIgZGlzcGxheWVkIG9uIGEgcmVjdGFuZ3VsYXIgYmFja2dyb3VuZC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIFJlY3RhbmdsZSwgVENvbG9yLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdyYXBoaW5nTGluZXMgZnJvbSAnLi4vLi4vZ3JhcGhpbmdMaW5lcy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGRlY2ltYWxQbGFjZXM/OiBudW1iZXI7XHJcbiAgZm9udD86IFBoZXRGb250O1xyXG4gIHRleHRGaWxsPzogVENvbG9yO1xyXG4gIGJhY2tncm91bmRGaWxsPzogVENvbG9yO1xyXG4gIGJhY2tncm91bmRTdHJva2U/OiBUQ29sb3I7XHJcbiAgbWluV2lkdGg/OiBudW1iZXI7XHJcbiAgbWluSGVpZ2h0PzogbnVtYmVyO1xyXG4gIHhNYXJnaW4/OiBudW1iZXI7XHJcbiAgeU1hcmdpbj86IG51bWJlcjtcclxuICBjb3JuZXJSYWRpdXM/OiBudW1iZXI7XHJcbn07XHJcblxyXG50eXBlIE51bWJlckJhY2tncm91bmROb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtYmVyQmFja2dyb3VuZE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlTnVtYmVyQmFja2dyb3VuZE5vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdmFsdWVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPiwgcHJvdmlkZWRPcHRpb25zPzogTnVtYmVyQmFja2dyb3VuZE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TnVtYmVyQmFja2dyb3VuZE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGRlY2ltYWxQbGFjZXM6IDAsXHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTIgKSxcclxuICAgICAgdGV4dEZpbGw6ICdibGFjaycsXHJcbiAgICAgIGJhY2tncm91bmRGaWxsOiAnd2hpdGUnLFxyXG4gICAgICBiYWNrZ3JvdW5kU3Ryb2tlOiBudWxsLFxyXG4gICAgICBtaW5XaWR0aDogMCxcclxuICAgICAgbWluSGVpZ2h0OiAwLFxyXG4gICAgICB4TWFyZ2luOiA1LFxyXG4gICAgICB5TWFyZ2luOiA1LFxyXG4gICAgICBjb3JuZXJSYWRpdXM6IDZcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHRleHROb2RlID0gbmV3IFRleHQoICc/Jywge1xyXG4gICAgICBmaWxsOiBvcHRpb25zLnRleHRGaWxsLFxyXG4gICAgICBmb250OiBvcHRpb25zLmZvbnRcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kTm9kZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDEsIDEsIHtcclxuICAgICAgZmlsbDogb3B0aW9ucy5iYWNrZ3JvdW5kRmlsbCxcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLmJhY2tncm91bmRTdHJva2UsXHJcbiAgICAgIGNvcm5lclJhZGl1czogb3B0aW9ucy5jb3JuZXJSYWRpdXNcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBiYWNrZ3JvdW5kTm9kZSwgdGV4dE5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHZhbHVlT2JzZXJ2ZXIgPSAoIHZhbHVlOiBudW1iZXIgKSA9PiB7XHJcblxyXG4gICAgICAvLyBmb3JtYXQgdGhlIHZhbHVlXHJcbiAgICAgIHRleHROb2RlLnN0cmluZyA9IFV0aWxzLnRvRml4ZWQoIHZhbHVlLCBvcHRpb25zLmRlY2ltYWxQbGFjZXMgKTtcclxuXHJcbiAgICAgIC8vIGFkanVzdCB0aGUgYmFja2dyb3VuZCB0byBmaXQgdGhlIHZhbHVlXHJcbiAgICAgIGNvbnN0IGJhY2tncm91bmRXaWR0aCA9IE1hdGgubWF4KCBvcHRpb25zLm1pbldpZHRoLCB0ZXh0Tm9kZS53aWR0aCArIG9wdGlvbnMueE1hcmdpbiArIG9wdGlvbnMueE1hcmdpbiApO1xyXG4gICAgICBjb25zdCBiYWNrZ3JvdW5kSGVpZ2h0ID0gTWF0aC5tYXgoIG9wdGlvbnMubWluSGVpZ2h0LCB0ZXh0Tm9kZS5oZWlnaHQgKyBvcHRpb25zLnlNYXJnaW4gKyBvcHRpb25zLnlNYXJnaW4gKTtcclxuICAgICAgYmFja2dyb3VuZE5vZGUuc2V0UmVjdCggMCwgMCwgYmFja2dyb3VuZFdpZHRoLCBiYWNrZ3JvdW5kSGVpZ2h0ICk7XHJcblxyXG4gICAgICAvLyBjZW50ZXIgdGhlIHZhbHVlIGluIHRoZSBiYWNrZ3JvdW5kXHJcbiAgICAgIHRleHROb2RlLmNlbnRlclggPSBiYWNrZ3JvdW5kTm9kZS5jZW50ZXJYO1xyXG4gICAgICB0ZXh0Tm9kZS5jZW50ZXJZID0gYmFja2dyb3VuZE5vZGUuY2VudGVyWTtcclxuICAgIH07XHJcbiAgICB2YWx1ZVByb3BlcnR5LmxpbmsoIHZhbHVlT2JzZXJ2ZXIgKTsgLy8gdW5saW5rIGluIGRpc3Bvc2VcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VOdW1iZXJCYWNrZ3JvdW5kTm9kZSA9ICgpID0+IHtcclxuICAgICAgdmFsdWVQcm9wZXJ0eS51bmxpbmsoIHZhbHVlT2JzZXJ2ZXIgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZU51bWJlckJhY2tncm91bmROb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmFwaGluZ0xpbmVzLnJlZ2lzdGVyKCAnTnVtYmVyQmFja2dyb3VuZE5vZGUnLCBOdW1iZXJCYWNrZ3JvdW5kTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLEVBQWVDLFNBQVMsRUFBVUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RixPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBaUJsRCxlQUFlLE1BQU1DLG9CQUFvQixTQUFTSixJQUFJLENBQUM7RUFJOUNLLFdBQVdBLENBQUVDLGFBQXdDLEVBQUVDLGVBQTZDLEVBQUc7SUFFNUcsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQXdELENBQUMsQ0FBRTtNQUVsRjtNQUNBVyxhQUFhLEVBQUUsQ0FBQztNQUNoQkMsSUFBSSxFQUFFLElBQUlYLFFBQVEsQ0FBRSxFQUFHLENBQUM7TUFDeEJZLFFBQVEsRUFBRSxPQUFPO01BQ2pCQyxjQUFjLEVBQUUsT0FBTztNQUN2QkMsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsUUFBUSxFQUFFLENBQUM7TUFDWEMsU0FBUyxFQUFFLENBQUM7TUFDWkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFBRVgsZUFBZ0IsQ0FBQztJQUVwQixNQUFNWSxRQUFRLEdBQUcsSUFBSWpCLElBQUksQ0FBRSxHQUFHLEVBQUU7TUFDOUJrQixJQUFJLEVBQUVaLE9BQU8sQ0FBQ0csUUFBUTtNQUN0QkQsSUFBSSxFQUFFRixPQUFPLENBQUNFO0lBQ2hCLENBQUUsQ0FBQztJQUVILE1BQU1XLGNBQWMsR0FBRyxJQUFJcEIsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUNoRG1CLElBQUksRUFBRVosT0FBTyxDQUFDSSxjQUFjO01BQzVCVSxNQUFNLEVBQUVkLE9BQU8sQ0FBQ0ssZ0JBQWdCO01BQ2hDSyxZQUFZLEVBQUVWLE9BQU8sQ0FBQ1U7SUFDeEIsQ0FBRSxDQUFDO0lBRUhWLE9BQU8sQ0FBQ2UsUUFBUSxHQUFHLENBQUVGLGNBQWMsRUFBRUYsUUFBUSxDQUFFO0lBRS9DLEtBQUssQ0FBRVgsT0FBUSxDQUFDO0lBRWhCLE1BQU1nQixhQUFhLEdBQUtDLEtBQWEsSUFBTTtNQUV6QztNQUNBTixRQUFRLENBQUNPLE1BQU0sR0FBRzdCLEtBQUssQ0FBQzhCLE9BQU8sQ0FBRUYsS0FBSyxFQUFFakIsT0FBTyxDQUFDQyxhQUFjLENBQUM7O01BRS9EO01BQ0EsTUFBTW1CLGVBQWUsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUV0QixPQUFPLENBQUNNLFFBQVEsRUFBRUssUUFBUSxDQUFDWSxLQUFLLEdBQUd2QixPQUFPLENBQUNRLE9BQU8sR0FBR1IsT0FBTyxDQUFDUSxPQUFRLENBQUM7TUFDeEcsTUFBTWdCLGdCQUFnQixHQUFHSCxJQUFJLENBQUNDLEdBQUcsQ0FBRXRCLE9BQU8sQ0FBQ08sU0FBUyxFQUFFSSxRQUFRLENBQUNjLE1BQU0sR0FBR3pCLE9BQU8sQ0FBQ1MsT0FBTyxHQUFHVCxPQUFPLENBQUNTLE9BQVEsQ0FBQztNQUMzR0ksY0FBYyxDQUFDYSxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRU4sZUFBZSxFQUFFSSxnQkFBaUIsQ0FBQzs7TUFFakU7TUFDQWIsUUFBUSxDQUFDZ0IsT0FBTyxHQUFHZCxjQUFjLENBQUNjLE9BQU87TUFDekNoQixRQUFRLENBQUNpQixPQUFPLEdBQUdmLGNBQWMsQ0FBQ2UsT0FBTztJQUMzQyxDQUFDO0lBQ0Q5QixhQUFhLENBQUMrQixJQUFJLENBQUViLGFBQWMsQ0FBQyxDQUFDLENBQUM7O0lBRXJDLElBQUksQ0FBQ2MsMkJBQTJCLEdBQUcsTUFBTTtNQUN2Q2hDLGFBQWEsQ0FBQ2lDLE1BQU0sQ0FBRWYsYUFBYyxDQUFDO0lBQ3ZDLENBQUM7RUFDSDtFQUVnQmdCLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNGLDJCQUEyQixDQUFDLENBQUM7SUFDbEMsS0FBSyxDQUFDRSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFyQyxhQUFhLENBQUNzQyxRQUFRLENBQUUsc0JBQXNCLEVBQUVyQyxvQkFBcUIsQ0FBQyJ9