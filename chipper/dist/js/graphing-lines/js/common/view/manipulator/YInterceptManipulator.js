// Copyright 2013-2023, University of Colorado Boulder

/**
 * Manipulator for changing a line's y-intercept.
 * This manipulates (x1,y1), keeping x1 constrained to zero, and effectively dragging along the y-axis.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../../dot/js/Utils.js';
import Vector2 from '../../../../../dot/js/Vector2.js';
import { DragListener } from '../../../../../scenery/js/imports.js';
import graphingLines from '../../../graphingLines.js';
import GLColors from '../../GLColors.js';
import Line from '../../model/Line.js';
import Manipulator from './Manipulator.js';
export default class YInterceptManipulator extends Manipulator {
  constructor(radius, lineProperty, y1RangeProperty, modelViewTransform) {
    super(radius, GLColors.INTERCEPT, {
      haloAlpha: GLColors.HALO_ALPHA.intercept
    });

    // move the manipulator to match the line's (x1,y1) point
    const lineObserver = line => {
      this.translation = modelViewTransform.modelToViewPosition(new Vector2(line.x1, line.y1));
    };
    lineProperty.link(lineObserver); // unlink in dispose

    this.addInputListener(new YInterceptDragListener(this, lineProperty, y1RangeProperty, modelViewTransform));
    this.disposeYInterceptManipulator = () => {
      lineProperty.unlink(lineObserver);
    };
  }
  dispose() {
    this.disposeYInterceptManipulator();
    super.dispose();
  }
}

/**
 * Drag listener for y-intercept manipulator.
 */
class YInterceptDragListener extends DragListener {
  constructor(targetNode, lineProperty, y1RangeProperty, modelViewTransform) {
    let startOffset; // where the drag started, relative to the y-intercept, in parent view coordinates

    super({
      allowTouchSnag: true,
      // note where the drag started
      start: event => {
        const line = lineProperty.value;
        const position = modelViewTransform.modelToViewXY(line.x1, line.y1);
        startOffset = targetNode.globalToParentPoint(event.pointer.point).minus(position);
      },
      drag: event => {
        const parentPoint = targetNode.globalToParentPoint(event.pointer.point).minus(startOffset);
        const position = modelViewTransform.viewToModelPosition(parentPoint);

        // constrain to range, snap to grid
        const y1 = Utils.roundSymmetric(Utils.clamp(position.y, y1RangeProperty.value.min, y1RangeProperty.value.max));
        const line = lineProperty.value;

        // Keep slope constant, change y1.
        lineProperty.value = Line.createSlopeIntercept(line.rise, line.run, y1, line.color);
      }
    });
  }
}
graphingLines.register('YInterceptManipulator', YInterceptManipulator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,