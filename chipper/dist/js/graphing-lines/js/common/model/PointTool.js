// Copyright 2013-2023, University of Colorado Boulder

/**
 * Model of the point tool. Highlights when it is placed on one of the lines.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import Property from '../../../../axon/js/Property.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import graphingLines from '../../graphingLines.js';

// direction that the tip points

export default class PointTool {
  // position of the point tool

  // line that the tool is on, null if it's not on a line

  /**
   * @param position - initial position of the tool
   * @param orientation - direction that the tip points
   * @param lines - Lines that the tool might intersect
   * @param dragBounds - tool can be dragged within these bounds
   */
  constructor(position, orientation, lines, dragBounds) {
    assert && assert(_.includes(['up', 'down'], orientation));
    this.positionProperty = new Vector2Property(position);
    this.onLineProperty = new Property(null);
    this.orientation = orientation;
    this.dragBounds = dragBounds;

    // Update when the point tool moves or the lines change.
    // unmultilink unneeded because PointTool either exists for sim lifetime, or is owned by a Challenge that
    // doesn't require dispose.
    Multilink.multilink([this.positionProperty, lines.lengthProperty], () => {
      let line;
      for (let i = 0; i < lines.length; i++) {
        line = lines.get(i);
        if (this.isOnLine(line)) {
          this.onLineProperty.value = line;
          return;
        }
      }
      this.onLineProperty.value = null;
    });
  }
  reset() {
    this.positionProperty.reset();
    this.onLineProperty.reset();
  }

  /**
   * Determines if the point tool is on the specified line.
   */
  isOnLine(line) {
    return line.onLinePoint(this.positionProperty.value);
  }
}
graphingLines.register('PointTool', PointTool);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJQcm9wZXJ0eSIsIlZlY3RvcjJQcm9wZXJ0eSIsImdyYXBoaW5nTGluZXMiLCJQb2ludFRvb2wiLCJjb25zdHJ1Y3RvciIsInBvc2l0aW9uIiwib3JpZW50YXRpb24iLCJsaW5lcyIsImRyYWdCb3VuZHMiLCJhc3NlcnQiLCJfIiwiaW5jbHVkZXMiLCJwb3NpdGlvblByb3BlcnR5Iiwib25MaW5lUHJvcGVydHkiLCJtdWx0aWxpbmsiLCJsZW5ndGhQcm9wZXJ0eSIsImxpbmUiLCJpIiwibGVuZ3RoIiwiZ2V0IiwiaXNPbkxpbmUiLCJ2YWx1ZSIsInJlc2V0Iiwib25MaW5lUG9pbnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBvaW50VG9vbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBvZiB0aGUgcG9pbnQgdG9vbC4gSGlnaGxpZ2h0cyB3aGVuIGl0IGlzIHBsYWNlZCBvbiBvbmUgb2YgdGhlIGxpbmVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE9ic2VydmFibGVBcnJheSB9IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvY3JlYXRlT2JzZXJ2YWJsZUFycmF5LmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBncmFwaGluZ0xpbmVzIGZyb20gJy4uLy4uL2dyYXBoaW5nTGluZXMuanMnO1xyXG5pbXBvcnQgTGluZSBmcm9tICcuL0xpbmUuanMnO1xyXG5cclxuLy8gZGlyZWN0aW9uIHRoYXQgdGhlIHRpcCBwb2ludHNcclxudHlwZSBQb2ludFRvb2xPcmllbnRhdGlvbiA9ICd1cCcgfCAnZG93bic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludFRvb2wge1xyXG5cclxuICAvLyBwb3NpdGlvbiBvZiB0aGUgcG9pbnQgdG9vbFxyXG4gIHB1YmxpYyByZWFkb25seSBwb3NpdGlvblByb3BlcnR5OiBQcm9wZXJ0eTxWZWN0b3IyPjtcclxuXHJcbiAgLy8gbGluZSB0aGF0IHRoZSB0b29sIGlzIG9uLCBudWxsIGlmIGl0J3Mgbm90IG9uIGEgbGluZVxyXG4gIHB1YmxpYyByZWFkb25seSBvbkxpbmVQcm9wZXJ0eTogUHJvcGVydHk8TGluZSB8IG51bGw+O1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgb3JpZW50YXRpb246IFBvaW50VG9vbE9yaWVudGF0aW9uO1xyXG4gIHB1YmxpYyByZWFkb25seSBkcmFnQm91bmRzOiBCb3VuZHMyO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcG9zaXRpb24gLSBpbml0aWFsIHBvc2l0aW9uIG9mIHRoZSB0b29sXHJcbiAgICogQHBhcmFtIG9yaWVudGF0aW9uIC0gZGlyZWN0aW9uIHRoYXQgdGhlIHRpcCBwb2ludHNcclxuICAgKiBAcGFyYW0gbGluZXMgLSBMaW5lcyB0aGF0IHRoZSB0b29sIG1pZ2h0IGludGVyc2VjdFxyXG4gICAqIEBwYXJhbSBkcmFnQm91bmRzIC0gdG9vbCBjYW4gYmUgZHJhZ2dlZCB3aXRoaW4gdGhlc2UgYm91bmRzXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwb3NpdGlvbjogVmVjdG9yMiwgb3JpZW50YXRpb246IFBvaW50VG9vbE9yaWVudGF0aW9uLCBsaW5lczogT2JzZXJ2YWJsZUFycmF5PExpbmU+LCBkcmFnQm91bmRzOiBCb3VuZHMyICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uaW5jbHVkZXMoIFsgJ3VwJywgJ2Rvd24nIF0sIG9yaWVudGF0aW9uICkgKTtcclxuXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBwb3NpdGlvbiApO1xyXG5cclxuICAgIHRoaXMub25MaW5lUHJvcGVydHkgPSBuZXcgUHJvcGVydHk8TGluZSB8IG51bGw+KCBudWxsICk7XHJcblxyXG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xyXG4gICAgdGhpcy5kcmFnQm91bmRzID0gZHJhZ0JvdW5kcztcclxuXHJcbiAgICAvLyBVcGRhdGUgd2hlbiB0aGUgcG9pbnQgdG9vbCBtb3ZlcyBvciB0aGUgbGluZXMgY2hhbmdlLlxyXG4gICAgLy8gdW5tdWx0aWxpbmsgdW5uZWVkZWQgYmVjYXVzZSBQb2ludFRvb2wgZWl0aGVyIGV4aXN0cyBmb3Igc2ltIGxpZmV0aW1lLCBvciBpcyBvd25lZCBieSBhIENoYWxsZW5nZSB0aGF0XHJcbiAgICAvLyBkb2Vzbid0IHJlcXVpcmUgZGlzcG9zZS5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoIFsgdGhpcy5wb3NpdGlvblByb3BlcnR5LCBsaW5lcy5sZW5ndGhQcm9wZXJ0eSBdLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGxpbmU7XHJcbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgICBsaW5lID0gbGluZXMuZ2V0KCBpICk7XHJcbiAgICAgICAgICBpZiAoIHRoaXMuaXNPbkxpbmUoIGxpbmUgKSApIHtcclxuICAgICAgICAgICAgdGhpcy5vbkxpbmVQcm9wZXJ0eS52YWx1ZSA9IGxpbmU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbkxpbmVQcm9wZXJ0eS52YWx1ZSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMub25MaW5lUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZXMgaWYgdGhlIHBvaW50IHRvb2wgaXMgb24gdGhlIHNwZWNpZmllZCBsaW5lLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc09uTGluZSggbGluZTogTGluZSApOiBib29sZWFuIHtcclxuICAgIHJldHVybiBsaW5lLm9uTGluZVBvaW50KCB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdQb2ludFRvb2wnLCBQb2ludFRvb2wgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxNQUFNLGtDQUFrQztBQUN4RCxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBR3RELE9BQU9DLGVBQWUsTUFBTSx1Q0FBdUM7QUFDbkUsT0FBT0MsYUFBYSxNQUFNLHdCQUF3Qjs7QUFHbEQ7O0FBR0EsZUFBZSxNQUFNQyxTQUFTLENBQUM7RUFFN0I7O0VBR0E7O0VBTUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLFFBQWlCLEVBQUVDLFdBQWlDLEVBQUVDLEtBQTRCLEVBQUVDLFVBQW1CLEVBQUc7SUFFNUhDLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxDQUFDLENBQUNDLFFBQVEsQ0FBRSxDQUFFLElBQUksRUFBRSxNQUFNLENBQUUsRUFBRUwsV0FBWSxDQUFFLENBQUM7SUFFL0QsSUFBSSxDQUFDTSxnQkFBZ0IsR0FBRyxJQUFJWCxlQUFlLENBQUVJLFFBQVMsQ0FBQztJQUV2RCxJQUFJLENBQUNRLGNBQWMsR0FBRyxJQUFJYixRQUFRLENBQWUsSUFBSyxDQUFDO0lBRXZELElBQUksQ0FBQ00sV0FBVyxHQUFHQSxXQUFXO0lBQzlCLElBQUksQ0FBQ0UsVUFBVSxHQUFHQSxVQUFVOztJQUU1QjtJQUNBO0lBQ0E7SUFDQVQsU0FBUyxDQUFDZSxTQUFTLENBQUUsQ0FBRSxJQUFJLENBQUNGLGdCQUFnQixFQUFFTCxLQUFLLENBQUNRLGNBQWMsQ0FBRSxFQUNsRSxNQUFNO01BQ0osSUFBSUMsSUFBSTtNQUNSLEtBQU0sSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHVixLQUFLLENBQUNXLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUc7UUFDdkNELElBQUksR0FBR1QsS0FBSyxDQUFDWSxHQUFHLENBQUVGLENBQUUsQ0FBQztRQUNyQixJQUFLLElBQUksQ0FBQ0csUUFBUSxDQUFFSixJQUFLLENBQUMsRUFBRztVQUMzQixJQUFJLENBQUNILGNBQWMsQ0FBQ1EsS0FBSyxHQUFHTCxJQUFJO1VBQ2hDO1FBQ0Y7TUFDRjtNQUNBLElBQUksQ0FBQ0gsY0FBYyxDQUFDUSxLQUFLLEdBQUcsSUFBSTtJQUNsQyxDQUNGLENBQUM7RUFDSDtFQUVPQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDVixnQkFBZ0IsQ0FBQ1UsS0FBSyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDVCxjQUFjLENBQUNTLEtBQUssQ0FBQyxDQUFDO0VBQzdCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRixRQUFRQSxDQUFFSixJQUFVLEVBQVk7SUFDckMsT0FBT0EsSUFBSSxDQUFDTyxXQUFXLENBQUUsSUFBSSxDQUFDWCxnQkFBZ0IsQ0FBQ1MsS0FBTSxDQUFDO0VBQ3hEO0FBQ0Y7QUFFQW5CLGFBQWEsQ0FBQ3NCLFFBQVEsQ0FBRSxXQUFXLEVBQUVyQixTQUFVLENBQUMifQ==