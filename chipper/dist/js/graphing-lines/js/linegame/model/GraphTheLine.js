// Copyright 2013-2023, University of Colorado Boulder

/**
 * Model for 'Graph the Line' challenges.
 * In this challenge, the user is given an equation and must graph the line.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Line from '../../common/model/Line.js';
import graphingLines from '../../graphingLines.js';
import GraphingLinesStrings from '../../GraphingLinesStrings.js';
import GraphTheLineNode from '../view/GraphTheLineNode.js'; // eslint-disable-line no-view-imported-from-model
import Challenge from './Challenge.js';
export default class GraphTheLine extends Challenge {
  /**
   * @param description - brief description of the challenge, visible in dev versions
   * @param answer - the correct answer
   * @param equationForm - specifies the form of the equation
   * @param manipulationMode - indicates which properties of a line the user is able to change
   * @param xRange - range of the graph's x-axis
   * @param yRange - range of the graph's y-axis
   */
  constructor(description, answer, equationForm, manipulationMode, xRange, yRange) {
    super(Challenge.createTitle(GraphingLinesStrings.graphTheLine, manipulationMode), description, answer, equationForm, manipulationMode, xRange, yRange);
  }

  /**
   * Creates the view for this challenge.
   */
  createView(model, challengeSize, audioPlayer) {
    return new GraphTheLineNode(this, model, challengeSize, audioPlayer);
  }

  /**
   * Updates the collection of lines that are 'seen' by the point tools.
   * Order is important here! See https://github.com/phetsims/graphing-lines/issues/89
   */
  updateGraphLines() {
    this.graph.lines.clear();
    if (this.answerVisible) {
      this.graph.lines.push(this.answer);
    }

    // Account for guesses that might be NotALine (not a valid line).
    const guess = this.guessProperty.value;
    if (guess instanceof Line) {
      this.graph.lines.push(guess);
    }
  }
}
graphingLines.register('GraphTheLine', GraphTheLine);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lIiwiZ3JhcGhpbmdMaW5lcyIsIkdyYXBoaW5nTGluZXNTdHJpbmdzIiwiR3JhcGhUaGVMaW5lTm9kZSIsIkNoYWxsZW5nZSIsIkdyYXBoVGhlTGluZSIsImNvbnN0cnVjdG9yIiwiZGVzY3JpcHRpb24iLCJhbnN3ZXIiLCJlcXVhdGlvbkZvcm0iLCJtYW5pcHVsYXRpb25Nb2RlIiwieFJhbmdlIiwieVJhbmdlIiwiY3JlYXRlVGl0bGUiLCJncmFwaFRoZUxpbmUiLCJjcmVhdGVWaWV3IiwibW9kZWwiLCJjaGFsbGVuZ2VTaXplIiwiYXVkaW9QbGF5ZXIiLCJ1cGRhdGVHcmFwaExpbmVzIiwiZ3JhcGgiLCJsaW5lcyIsImNsZWFyIiwiYW5zd2VyVmlzaWJsZSIsInB1c2giLCJndWVzcyIsImd1ZXNzUHJvcGVydHkiLCJ2YWx1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR3JhcGhUaGVMaW5lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciAnR3JhcGggdGhlIExpbmUnIGNoYWxsZW5nZXMuXHJcbiAqIEluIHRoaXMgY2hhbGxlbmdlLCB0aGUgdXNlciBpcyBnaXZlbiBhbiBlcXVhdGlvbiBhbmQgbXVzdCBncmFwaCB0aGUgbGluZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IExpbmUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0xpbmUuanMnO1xyXG5pbXBvcnQgZ3JhcGhpbmdMaW5lcyBmcm9tICcuLi8uLi9ncmFwaGluZ0xpbmVzLmpzJztcclxuaW1wb3J0IEdyYXBoaW5nTGluZXNTdHJpbmdzIGZyb20gJy4uLy4uL0dyYXBoaW5nTGluZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IEdyYXBoVGhlTGluZU5vZGUgZnJvbSAnLi4vdmlldy9HcmFwaFRoZUxpbmVOb2RlLmpzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby12aWV3LWltcG9ydGVkLWZyb20tbW9kZWxcclxuaW1wb3J0IENoYWxsZW5nZSBmcm9tICcuL0NoYWxsZW5nZS5qcyc7XHJcbmltcG9ydCBFcXVhdGlvbkZvcm0gZnJvbSAnLi9FcXVhdGlvbkZvcm0uanMnO1xyXG5pbXBvcnQgTWFuaXB1bGF0aW9uTW9kZSBmcm9tICcuL01hbmlwdWxhdGlvbk1vZGUuanMnO1xyXG5pbXBvcnQgTGluZUdhbWVNb2RlbCBmcm9tICcuL0xpbmVHYW1lTW9kZWwuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBHYW1lQXVkaW9QbGF5ZXIgZnJvbSAnLi4vLi4vLi4vLi4vdmVnYXMvanMvR2FtZUF1ZGlvUGxheWVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYXBoVGhlTGluZSBleHRlbmRzIENoYWxsZW5nZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBkZXNjcmlwdGlvbiAtIGJyaWVmIGRlc2NyaXB0aW9uIG9mIHRoZSBjaGFsbGVuZ2UsIHZpc2libGUgaW4gZGV2IHZlcnNpb25zXHJcbiAgICogQHBhcmFtIGFuc3dlciAtIHRoZSBjb3JyZWN0IGFuc3dlclxyXG4gICAqIEBwYXJhbSBlcXVhdGlvbkZvcm0gLSBzcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIGVxdWF0aW9uXHJcbiAgICogQHBhcmFtIG1hbmlwdWxhdGlvbk1vZGUgLSBpbmRpY2F0ZXMgd2hpY2ggcHJvcGVydGllcyBvZiBhIGxpbmUgdGhlIHVzZXIgaXMgYWJsZSB0byBjaGFuZ2VcclxuICAgKiBAcGFyYW0geFJhbmdlIC0gcmFuZ2Ugb2YgdGhlIGdyYXBoJ3MgeC1heGlzXHJcbiAgICogQHBhcmFtIHlSYW5nZSAtIHJhbmdlIG9mIHRoZSBncmFwaCdzIHktYXhpc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZGVzY3JpcHRpb246IHN0cmluZywgYW5zd2VyOiBMaW5lLCBlcXVhdGlvbkZvcm06IEVxdWF0aW9uRm9ybSxcclxuICAgICAgICAgICAgICAgICAgICAgIG1hbmlwdWxhdGlvbk1vZGU6IE1hbmlwdWxhdGlvbk1vZGUsIHhSYW5nZTogUmFuZ2UsIHlSYW5nZTogUmFuZ2UgKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgQ2hhbGxlbmdlLmNyZWF0ZVRpdGxlKCBHcmFwaGluZ0xpbmVzU3RyaW5ncy5ncmFwaFRoZUxpbmUsIG1hbmlwdWxhdGlvbk1vZGUgKSxcclxuICAgICAgZGVzY3JpcHRpb24sXHJcbiAgICAgIGFuc3dlcixcclxuICAgICAgZXF1YXRpb25Gb3JtLFxyXG4gICAgICBtYW5pcHVsYXRpb25Nb2RlLFxyXG4gICAgICB4UmFuZ2UsXHJcbiAgICAgIHlSYW5nZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgdGhlIHZpZXcgZm9yIHRoaXMgY2hhbGxlbmdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBjcmVhdGVWaWV3KCBtb2RlbDogTGluZUdhbWVNb2RlbCwgY2hhbGxlbmdlU2l6ZTogRGltZW5zaW9uMiwgYXVkaW9QbGF5ZXI6IEdhbWVBdWRpb1BsYXllciApOiBHcmFwaFRoZUxpbmVOb2RlIHtcclxuICAgIHJldHVybiBuZXcgR3JhcGhUaGVMaW5lTm9kZSggdGhpcywgbW9kZWwsIGNoYWxsZW5nZVNpemUsIGF1ZGlvUGxheWVyICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIHRoZSBjb2xsZWN0aW9uIG9mIGxpbmVzIHRoYXQgYXJlICdzZWVuJyBieSB0aGUgcG9pbnQgdG9vbHMuXHJcbiAgICogT3JkZXIgaXMgaW1wb3J0YW50IGhlcmUhIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ3JhcGhpbmctbGluZXMvaXNzdWVzLzg5XHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHVwZGF0ZUdyYXBoTGluZXMoKTogdm9pZCB7XHJcblxyXG4gICAgdGhpcy5ncmFwaC5saW5lcy5jbGVhcigpO1xyXG5cclxuICAgIGlmICggdGhpcy5hbnN3ZXJWaXNpYmxlICkge1xyXG4gICAgICB0aGlzLmdyYXBoLmxpbmVzLnB1c2goIHRoaXMuYW5zd2VyICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWNjb3VudCBmb3IgZ3Vlc3NlcyB0aGF0IG1pZ2h0IGJlIE5vdEFMaW5lIChub3QgYSB2YWxpZCBsaW5lKS5cclxuICAgIGNvbnN0IGd1ZXNzID0gdGhpcy5ndWVzc1Byb3BlcnR5LnZhbHVlO1xyXG4gICAgaWYgKCBndWVzcyBpbnN0YW5jZW9mIExpbmUgKSB7XHJcbiAgICAgIHRoaXMuZ3JhcGgubGluZXMucHVzaCggZ3Vlc3MgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdHcmFwaFRoZUxpbmUnLCBHcmFwaFRoZUxpbmUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxJQUFJLE1BQU0sNEJBQTRCO0FBQzdDLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLGdCQUFnQixNQUFNLDZCQUE2QixDQUFDLENBQUM7QUFDNUQsT0FBT0MsU0FBUyxNQUFNLGdCQUFnQjtBQU90QyxlQUFlLE1BQU1DLFlBQVksU0FBU0QsU0FBUyxDQUFDO0VBRWxEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0UsV0FBV0EsQ0FBRUMsV0FBbUIsRUFBRUMsTUFBWSxFQUFFQyxZQUEwQixFQUM3REMsZ0JBQWtDLEVBQUVDLE1BQWEsRUFBRUMsTUFBYSxFQUFHO0lBQ3JGLEtBQUssQ0FDSFIsU0FBUyxDQUFDUyxXQUFXLENBQUVYLG9CQUFvQixDQUFDWSxZQUFZLEVBQUVKLGdCQUFpQixDQUFDLEVBQzVFSCxXQUFXLEVBQ1hDLE1BQU0sRUFDTkMsWUFBWSxFQUNaQyxnQkFBZ0IsRUFDaEJDLE1BQU0sRUFDTkMsTUFDRixDQUFDO0VBQ0g7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCRyxVQUFVQSxDQUFFQyxLQUFvQixFQUFFQyxhQUF5QixFQUFFQyxXQUE0QixFQUFxQjtJQUM1SCxPQUFPLElBQUlmLGdCQUFnQixDQUFFLElBQUksRUFBRWEsS0FBSyxFQUFFQyxhQUFhLEVBQUVDLFdBQVksQ0FBQztFQUN4RTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNxQkMsZ0JBQWdCQSxDQUFBLEVBQVM7SUFFMUMsSUFBSSxDQUFDQyxLQUFLLENBQUNDLEtBQUssQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFFeEIsSUFBSyxJQUFJLENBQUNDLGFBQWEsRUFBRztNQUN4QixJQUFJLENBQUNILEtBQUssQ0FBQ0MsS0FBSyxDQUFDRyxJQUFJLENBQUUsSUFBSSxDQUFDaEIsTUFBTyxDQUFDO0lBQ3RDOztJQUVBO0lBQ0EsTUFBTWlCLEtBQUssR0FBRyxJQUFJLENBQUNDLGFBQWEsQ0FBQ0MsS0FBSztJQUN0QyxJQUFLRixLQUFLLFlBQVl6QixJQUFJLEVBQUc7TUFDM0IsSUFBSSxDQUFDb0IsS0FBSyxDQUFDQyxLQUFLLENBQUNHLElBQUksQ0FBRUMsS0FBTSxDQUFDO0lBQ2hDO0VBQ0Y7QUFDRjtBQUVBeEIsYUFBYSxDQUFDMkIsUUFBUSxDQUFFLGNBQWMsRUFBRXZCLFlBQWEsQ0FBQyJ9