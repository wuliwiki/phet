// Copyright 2017-2023, University of Colorado Boulder

/**
 * ValuePool takes sets of values, separates them into "required" and "optional" sets,
 * and provides an API for randomly selecting values from either set.
 * Used in the game to create sets of slopes, y-intercepts and points for challenges.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import graphingLines from '../../graphingLines.js';
export default class ValuePool {
  /**
   * @param arrays - the sets of values
   */
  constructor(arrays) {
    // 1 value from each array is "required"
    this.requiredValues = [];
    arrays.forEach(array => {
      this.requiredValues.push(ValuePool.choose(array));
    });

    // the remaining values are optional
    this.optionalValues = arrays.flat();
  }

  /**
   * Randomly selects a required value, and removes it from the set of required values.
   */
  chooseRequired() {
    assert && assert(this.requiredValues.length > 0, 'required values is empty');
    return ValuePool.choose(this.requiredValues);
  }

  /**
   * Randomly selects an optional value, and removes it from the set of optional values.
   */
  chooseOptional() {
    assert && assert(this.optionalValues.length > 0, 'optional values is empty');
    return ValuePool.choose(this.optionalValues);
  }

  /**
   * Is the required pool empty?
   */
  isEmpty() {
    return this.requiredValues.length === 0;
  }

  /**
   * Randomly chooses an item from an array, and removes the item from the array.
   */
  static choose(array) {
    assert && assert(array && array.length > 0, 'array is empty');
    const index = dotRandom.nextIntBetween(0, array.length - 1);
    assert && assert(index !== -1);
    const item = array[index];
    array.splice(index, 1);
    return item;
  }

  /**
   * Converts an integer range to an ordered array of integer values that are in that range.
   */
  static rangeToArray(range, excludeZero = false) {
    assert && assert(Number.isInteger(range.min) && Number.isInteger(range.max));
    const array = [];
    for (let i = range.min; i <= range.max; i++) {
      if (!excludeZero || i !== 0) {
        array.push(i);
      }
    }
    return array;
  }
}
graphingLines.register('ValuePool', ValuePool);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJncmFwaGluZ0xpbmVzIiwiVmFsdWVQb29sIiwiY29uc3RydWN0b3IiLCJhcnJheXMiLCJyZXF1aXJlZFZhbHVlcyIsImZvckVhY2giLCJhcnJheSIsInB1c2giLCJjaG9vc2UiLCJvcHRpb25hbFZhbHVlcyIsImZsYXQiLCJjaG9vc2VSZXF1aXJlZCIsImFzc2VydCIsImxlbmd0aCIsImNob29zZU9wdGlvbmFsIiwiaXNFbXB0eSIsImluZGV4IiwibmV4dEludEJldHdlZW4iLCJpdGVtIiwic3BsaWNlIiwicmFuZ2VUb0FycmF5IiwicmFuZ2UiLCJleGNsdWRlWmVybyIsIk51bWJlciIsImlzSW50ZWdlciIsIm1pbiIsIm1heCIsImkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZhbHVlUG9vbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWYWx1ZVBvb2wgdGFrZXMgc2V0cyBvZiB2YWx1ZXMsIHNlcGFyYXRlcyB0aGVtIGludG8gXCJyZXF1aXJlZFwiIGFuZCBcIm9wdGlvbmFsXCIgc2V0cyxcclxuICogYW5kIHByb3ZpZGVzIGFuIEFQSSBmb3IgcmFuZG9tbHkgc2VsZWN0aW5nIHZhbHVlcyBmcm9tIGVpdGhlciBzZXQuXHJcbiAqIFVzZWQgaW4gdGhlIGdhbWUgdG8gY3JlYXRlIHNldHMgb2Ygc2xvcGVzLCB5LWludGVyY2VwdHMgYW5kIHBvaW50cyBmb3IgY2hhbGxlbmdlcy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgZG90UmFuZG9tIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9kb3RSYW5kb20uanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IGdyYXBoaW5nTGluZXMgZnJvbSAnLi4vLi4vZ3JhcGhpbmdMaW5lcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYWx1ZVBvb2w8VD4ge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHJlcXVpcmVkVmFsdWVzOiBUW107XHJcbiAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25hbFZhbHVlczogVFtdO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gYXJyYXlzIC0gdGhlIHNldHMgb2YgdmFsdWVzXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBhcnJheXM6IFRbXVtdICkge1xyXG5cclxuICAgIC8vIDEgdmFsdWUgZnJvbSBlYWNoIGFycmF5IGlzIFwicmVxdWlyZWRcIlxyXG4gICAgdGhpcy5yZXF1aXJlZFZhbHVlcyA9IFtdO1xyXG4gICAgYXJyYXlzLmZvckVhY2goIGFycmF5ID0+IHtcclxuICAgICAgdGhpcy5yZXF1aXJlZFZhbHVlcy5wdXNoKCBWYWx1ZVBvb2wuY2hvb3NlKCBhcnJheSApICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gdGhlIHJlbWFpbmluZyB2YWx1ZXMgYXJlIG9wdGlvbmFsXHJcbiAgICB0aGlzLm9wdGlvbmFsVmFsdWVzID0gYXJyYXlzLmZsYXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJhbmRvbWx5IHNlbGVjdHMgYSByZXF1aXJlZCB2YWx1ZSwgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgc2V0IG9mIHJlcXVpcmVkIHZhbHVlcy5cclxuICAgKi9cclxuICBwdWJsaWMgY2hvb3NlUmVxdWlyZWQoKTogVCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLnJlcXVpcmVkVmFsdWVzLmxlbmd0aCA+IDAsICdyZXF1aXJlZCB2YWx1ZXMgaXMgZW1wdHknICk7XHJcbiAgICByZXR1cm4gVmFsdWVQb29sLmNob29zZSggdGhpcy5yZXF1aXJlZFZhbHVlcyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmFuZG9tbHkgc2VsZWN0cyBhbiBvcHRpb25hbCB2YWx1ZSwgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgc2V0IG9mIG9wdGlvbmFsIHZhbHVlcy5cclxuICAgKi9cclxuICBwdWJsaWMgY2hvb3NlT3B0aW9uYWwoKTogVCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLm9wdGlvbmFsVmFsdWVzLmxlbmd0aCA+IDAsICdvcHRpb25hbCB2YWx1ZXMgaXMgZW1wdHknICk7XHJcbiAgICByZXR1cm4gVmFsdWVQb29sLmNob29zZSggdGhpcy5vcHRpb25hbFZhbHVlcyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSXMgdGhlIHJlcXVpcmVkIHBvb2wgZW1wdHk/XHJcbiAgICovXHJcbiAgcHVibGljIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKCB0aGlzLnJlcXVpcmVkVmFsdWVzLmxlbmd0aCA9PT0gMCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmFuZG9tbHkgY2hvb3NlcyBhbiBpdGVtIGZyb20gYW4gYXJyYXksIGFuZCByZW1vdmVzIHRoZSBpdGVtIGZyb20gdGhlIGFycmF5LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY2hvb3NlPFQ+KCBhcnJheTogVFtdICk6IFQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYXJyYXkgJiYgYXJyYXkubGVuZ3RoID4gMCwgJ2FycmF5IGlzIGVtcHR5JyApO1xyXG4gICAgY29uc3QgaW5kZXggPSBkb3RSYW5kb20ubmV4dEludEJldHdlZW4oIDAsIGFycmF5Lmxlbmd0aCAtIDEgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGluZGV4ICE9PSAtMSApO1xyXG4gICAgY29uc3QgaXRlbSA9IGFycmF5WyBpbmRleCBdO1xyXG4gICAgYXJyYXkuc3BsaWNlKCBpbmRleCwgMSApO1xyXG4gICAgcmV0dXJuIGl0ZW07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0cyBhbiBpbnRlZ2VyIHJhbmdlIHRvIGFuIG9yZGVyZWQgYXJyYXkgb2YgaW50ZWdlciB2YWx1ZXMgdGhhdCBhcmUgaW4gdGhhdCByYW5nZS5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHJhbmdlVG9BcnJheSggcmFuZ2U6IFJhbmdlLCBleGNsdWRlWmVybyA9IGZhbHNlICk6IG51bWJlcltdIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBOdW1iZXIuaXNJbnRlZ2VyKCByYW5nZS5taW4gKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKCByYW5nZS5tYXggKSApO1xyXG5cclxuICAgIGNvbnN0IGFycmF5ID0gW107XHJcbiAgICBmb3IgKCBsZXQgaSA9IHJhbmdlLm1pbjsgaSA8PSByYW5nZS5tYXg7IGkrKyApIHtcclxuICAgICAgaWYgKCAhZXhjbHVkZVplcm8gfHwgaSAhPT0gMCApIHtcclxuICAgICAgICBhcnJheS5wdXNoKCBpICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdWYWx1ZVBvb2wnLCBWYWx1ZVBvb2wgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFFdkQsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUVsRCxlQUFlLE1BQU1DLFNBQVMsQ0FBSTtFQUtoQztBQUNGO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsTUFBYSxFQUFHO0lBRWxDO0lBQ0EsSUFBSSxDQUFDQyxjQUFjLEdBQUcsRUFBRTtJQUN4QkQsTUFBTSxDQUFDRSxPQUFPLENBQUVDLEtBQUssSUFBSTtNQUN2QixJQUFJLENBQUNGLGNBQWMsQ0FBQ0csSUFBSSxDQUFFTixTQUFTLENBQUNPLE1BQU0sQ0FBRUYsS0FBTSxDQUFFLENBQUM7SUFDdkQsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDRyxjQUFjLEdBQUdOLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLENBQUM7RUFDckM7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLGNBQWNBLENBQUEsRUFBTTtJQUN6QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsSUFBSSxDQUFDUixjQUFjLENBQUNTLE1BQU0sR0FBRyxDQUFDLEVBQUUsMEJBQTJCLENBQUM7SUFDOUUsT0FBT1osU0FBUyxDQUFDTyxNQUFNLENBQUUsSUFBSSxDQUFDSixjQUFlLENBQUM7RUFDaEQ7O0VBRUE7QUFDRjtBQUNBO0VBQ1NVLGNBQWNBLENBQUEsRUFBTTtJQUN6QkYsTUFBTSxJQUFJQSxNQUFNLENBQUUsSUFBSSxDQUFDSCxjQUFjLENBQUNJLE1BQU0sR0FBRyxDQUFDLEVBQUUsMEJBQTJCLENBQUM7SUFDOUUsT0FBT1osU0FBUyxDQUFDTyxNQUFNLENBQUUsSUFBSSxDQUFDQyxjQUFlLENBQUM7RUFDaEQ7O0VBRUE7QUFDRjtBQUNBO0VBQ1NNLE9BQU9BLENBQUEsRUFBWTtJQUN4QixPQUFTLElBQUksQ0FBQ1gsY0FBYyxDQUFDUyxNQUFNLEtBQUssQ0FBQztFQUMzQzs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjTCxNQUFNQSxDQUFLRixLQUFVLEVBQU07SUFDdkNNLE1BQU0sSUFBSUEsTUFBTSxDQUFFTixLQUFLLElBQUlBLEtBQUssQ0FBQ08sTUFBTSxHQUFHLENBQUMsRUFBRSxnQkFBaUIsQ0FBQztJQUMvRCxNQUFNRyxLQUFLLEdBQUdqQixTQUFTLENBQUNrQixjQUFjLENBQUUsQ0FBQyxFQUFFWCxLQUFLLENBQUNPLE1BQU0sR0FBRyxDQUFFLENBQUM7SUFDN0RELE1BQU0sSUFBSUEsTUFBTSxDQUFFSSxLQUFLLEtBQUssQ0FBQyxDQUFFLENBQUM7SUFDaEMsTUFBTUUsSUFBSSxHQUFHWixLQUFLLENBQUVVLEtBQUssQ0FBRTtJQUMzQlYsS0FBSyxDQUFDYSxNQUFNLENBQUVILEtBQUssRUFBRSxDQUFFLENBQUM7SUFDeEIsT0FBT0UsSUFBSTtFQUNiOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE9BQWNFLFlBQVlBLENBQUVDLEtBQVksRUFBRUMsV0FBVyxHQUFHLEtBQUssRUFBYTtJQUV4RVYsTUFBTSxJQUFJQSxNQUFNLENBQUVXLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFSCxLQUFLLENBQUNJLEdBQUksQ0FBQyxJQUFJRixNQUFNLENBQUNDLFNBQVMsQ0FBRUgsS0FBSyxDQUFDSyxHQUFJLENBQUUsQ0FBQztJQUVsRixNQUFNcEIsS0FBSyxHQUFHLEVBQUU7SUFDaEIsS0FBTSxJQUFJcUIsQ0FBQyxHQUFHTixLQUFLLENBQUNJLEdBQUcsRUFBRUUsQ0FBQyxJQUFJTixLQUFLLENBQUNLLEdBQUcsRUFBRUMsQ0FBQyxFQUFFLEVBQUc7TUFDN0MsSUFBSyxDQUFDTCxXQUFXLElBQUlLLENBQUMsS0FBSyxDQUFDLEVBQUc7UUFDN0JyQixLQUFLLENBQUNDLElBQUksQ0FBRW9CLENBQUUsQ0FBQztNQUNqQjtJQUNGO0lBQ0EsT0FBT3JCLEtBQUs7RUFDZDtBQUNGO0FBRUFOLGFBQWEsQ0FBQzRCLFFBQVEsQ0FBRSxXQUFXLEVBQUUzQixTQUFVLENBQUMifQ==