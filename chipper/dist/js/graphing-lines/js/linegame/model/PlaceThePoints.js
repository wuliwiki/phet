// Copyright 2013-2023, University of Colorado Boulder

/**
 * Model for 'Place the Points' challenges.
 * This is a specialization of 'Graph the Line' challenge.
 * In this challenge, the user is given an equation and must place 3 points on a graph to make the line.
 * If the 3 points do not form a line, the guess line will be null.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import Line from '../../common/model/Line.js';
import graphingLines from '../../graphingLines.js';
import LineGameConstants from '../LineGameConstants.js';
import PlaceThePointsNode from '../view/PlaceThePointsNode.js'; // eslint-disable-line no-view-imported-from-model
import GraphTheLine from './GraphTheLine.js';
import ManipulationMode from './ManipulationMode.js';
import NotALine from './NotALine.js';
export default class PlaceThePoints extends GraphTheLine {
  // 3 points that the user can place

  /**
   * @param description - brief description of the challenge, visible in dev versions
   * @param answer - the correct answer
   * @param equationForm - specifies the form of the equation
   * @param xRange - range of the graph's x-axis
   * @param yRange - range of the graph's y-axis
   */
  constructor(description, answer, equationForm, xRange, yRange) {
    super(description, answer, equationForm, ManipulationMode.THREE_POINTS, xRange, yRange);

    // The initial points do not form a line.
    this.p1Property = new Vector2Property(new Vector2(-3, 2));
    this.p2Property = new Vector2Property(new Vector2(0, 0));
    this.p3Property = new Vector2Property(new Vector2(3, 2));

    // Update the guess when the points change.
    // unmultilink unnecessary because PlaceThePoints owns these Properties.
    Multilink.multilink([this.p1Property, this.p2Property, this.p3Property], (p1, p2, p3) => {
      const line = new Line(p1.x, p1.y, p2.x, p2.y, LineGameConstants.GUESS_COLOR);
      if (line.onLinePoint(p3)) {
        // all 3 points are on a line
        this.guessProperty.value = line;
      } else {
        // the 3 points don't form a line
        this.guessProperty.value = new NotALine();
      }
    });
  }
  reset() {
    this.p1Property.reset();
    this.p2Property.reset();
    this.p3Property.reset();
    super.reset();
  }

  /**
   * Creates the view for this challenge.
   */
  createView(model, challengeSize, audioPlayer) {
    return new PlaceThePointsNode(this, model, challengeSize, audioPlayer);
  }
}
graphingLines.register('PlaceThePoints', PlaceThePoints);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwiTGluZSIsImdyYXBoaW5nTGluZXMiLCJMaW5lR2FtZUNvbnN0YW50cyIsIlBsYWNlVGhlUG9pbnRzTm9kZSIsIkdyYXBoVGhlTGluZSIsIk1hbmlwdWxhdGlvbk1vZGUiLCJOb3RBTGluZSIsIlBsYWNlVGhlUG9pbnRzIiwiY29uc3RydWN0b3IiLCJkZXNjcmlwdGlvbiIsImFuc3dlciIsImVxdWF0aW9uRm9ybSIsInhSYW5nZSIsInlSYW5nZSIsIlRIUkVFX1BPSU5UUyIsInAxUHJvcGVydHkiLCJwMlByb3BlcnR5IiwicDNQcm9wZXJ0eSIsIm11bHRpbGluayIsInAxIiwicDIiLCJwMyIsImxpbmUiLCJ4IiwieSIsIkdVRVNTX0NPTE9SIiwib25MaW5lUG9pbnQiLCJndWVzc1Byb3BlcnR5IiwidmFsdWUiLCJyZXNldCIsImNyZWF0ZVZpZXciLCJtb2RlbCIsImNoYWxsZW5nZVNpemUiLCJhdWRpb1BsYXllciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxhY2VUaGVQb2ludHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yICdQbGFjZSB0aGUgUG9pbnRzJyBjaGFsbGVuZ2VzLlxyXG4gKiBUaGlzIGlzIGEgc3BlY2lhbGl6YXRpb24gb2YgJ0dyYXBoIHRoZSBMaW5lJyBjaGFsbGVuZ2UuXHJcbiAqIEluIHRoaXMgY2hhbGxlbmdlLCB0aGUgdXNlciBpcyBnaXZlbiBhbiBlcXVhdGlvbiBhbmQgbXVzdCBwbGFjZSAzIHBvaW50cyBvbiBhIGdyYXBoIHRvIG1ha2UgdGhlIGxpbmUuXHJcbiAqIElmIHRoZSAzIHBvaW50cyBkbyBub3QgZm9ybSBhIGxpbmUsIHRoZSBndWVzcyBsaW5lIHdpbGwgYmUgbnVsbC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFZlY3RvcjJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMlByb3BlcnR5LmpzJztcclxuaW1wb3J0IExpbmUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0xpbmUuanMnO1xyXG5pbXBvcnQgZ3JhcGhpbmdMaW5lcyBmcm9tICcuLi8uLi9ncmFwaGluZ0xpbmVzLmpzJztcclxuaW1wb3J0IExpbmVHYW1lQ29uc3RhbnRzIGZyb20gJy4uL0xpbmVHYW1lQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFBsYWNlVGhlUG9pbnRzTm9kZSBmcm9tICcuLi92aWV3L1BsYWNlVGhlUG9pbnRzTm9kZS5qcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdmlldy1pbXBvcnRlZC1mcm9tLW1vZGVsXHJcbmltcG9ydCBHcmFwaFRoZUxpbmUgZnJvbSAnLi9HcmFwaFRoZUxpbmUuanMnO1xyXG5pbXBvcnQgTWFuaXB1bGF0aW9uTW9kZSBmcm9tICcuL01hbmlwdWxhdGlvbk1vZGUuanMnO1xyXG5pbXBvcnQgTm90QUxpbmUgZnJvbSAnLi9Ob3RBTGluZS5qcyc7XHJcbmltcG9ydCBFcXVhdGlvbkZvcm0gZnJvbSAnLi9FcXVhdGlvbkZvcm0uanMnO1xyXG5pbXBvcnQgTGluZUdhbWVNb2RlbCBmcm9tICcuL0xpbmVHYW1lTW9kZWwuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBHYW1lQXVkaW9QbGF5ZXIgZnJvbSAnLi4vLi4vLi4vLi4vdmVnYXMvanMvR2FtZUF1ZGlvUGxheWVyLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxhY2VUaGVQb2ludHMgZXh0ZW5kcyBHcmFwaFRoZUxpbmUge1xyXG5cclxuICAvLyAzIHBvaW50cyB0aGF0IHRoZSB1c2VyIGNhbiBwbGFjZVxyXG4gIHB1YmxpYyByZWFkb25seSBwMVByb3BlcnR5OiBQcm9wZXJ0eTxWZWN0b3IyPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgcDJQcm9wZXJ0eTogUHJvcGVydHk8VmVjdG9yMj47XHJcbiAgcHVibGljIHJlYWRvbmx5IHAzUHJvcGVydHk6IFByb3BlcnR5PFZlY3RvcjI+O1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gZGVzY3JpcHRpb24gLSBicmllZiBkZXNjcmlwdGlvbiBvZiB0aGUgY2hhbGxlbmdlLCB2aXNpYmxlIGluIGRldiB2ZXJzaW9uc1xyXG4gICAqIEBwYXJhbSBhbnN3ZXIgLSB0aGUgY29ycmVjdCBhbnN3ZXJcclxuICAgKiBAcGFyYW0gZXF1YXRpb25Gb3JtIC0gc3BlY2lmaWVzIHRoZSBmb3JtIG9mIHRoZSBlcXVhdGlvblxyXG4gICAqIEBwYXJhbSB4UmFuZ2UgLSByYW5nZSBvZiB0aGUgZ3JhcGgncyB4LWF4aXNcclxuICAgKiBAcGFyYW0geVJhbmdlIC0gcmFuZ2Ugb2YgdGhlIGdyYXBoJ3MgeS1heGlzXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBkZXNjcmlwdGlvbjogc3RyaW5nLCBhbnN3ZXI6IExpbmUsIGVxdWF0aW9uRm9ybTogRXF1YXRpb25Gb3JtLCB4UmFuZ2U6IFJhbmdlLCB5UmFuZ2U6IFJhbmdlICkge1xyXG5cclxuICAgIHN1cGVyKCBkZXNjcmlwdGlvbiwgYW5zd2VyLCBlcXVhdGlvbkZvcm0sIE1hbmlwdWxhdGlvbk1vZGUuVEhSRUVfUE9JTlRTLCB4UmFuZ2UsIHlSYW5nZSApO1xyXG5cclxuICAgIC8vIFRoZSBpbml0aWFsIHBvaW50cyBkbyBub3QgZm9ybSBhIGxpbmUuXHJcbiAgICB0aGlzLnAxUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBuZXcgVmVjdG9yMiggLTMsIDIgKSApO1xyXG4gICAgdGhpcy5wMlByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggbmV3IFZlY3RvcjIoIDAsIDAgKSApO1xyXG4gICAgdGhpcy5wM1Byb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggbmV3IFZlY3RvcjIoIDMsIDIgKSApO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgZ3Vlc3Mgd2hlbiB0aGUgcG9pbnRzIGNoYW5nZS5cclxuICAgIC8vIHVubXVsdGlsaW5rIHVubmVjZXNzYXJ5IGJlY2F1c2UgUGxhY2VUaGVQb2ludHMgb3ducyB0aGVzZSBQcm9wZXJ0aWVzLlxyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayhcclxuICAgICAgWyB0aGlzLnAxUHJvcGVydHksIHRoaXMucDJQcm9wZXJ0eSwgdGhpcy5wM1Byb3BlcnR5IF0sXHJcbiAgICAgICggcDEsIHAyLCBwMyApID0+IHtcclxuICAgICAgICBjb25zdCBsaW5lID0gbmV3IExpbmUoIHAxLngsIHAxLnksIHAyLngsIHAyLnksIExpbmVHYW1lQ29uc3RhbnRzLkdVRVNTX0NPTE9SICk7XHJcbiAgICAgICAgaWYgKCBsaW5lLm9uTGluZVBvaW50KCBwMyApICkge1xyXG4gICAgICAgICAgLy8gYWxsIDMgcG9pbnRzIGFyZSBvbiBhIGxpbmVcclxuICAgICAgICAgIHRoaXMuZ3Vlc3NQcm9wZXJ0eS52YWx1ZSA9IGxpbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgLy8gdGhlIDMgcG9pbnRzIGRvbid0IGZvcm0gYSBsaW5lXHJcbiAgICAgICAgICB0aGlzLmd1ZXNzUHJvcGVydHkudmFsdWUgPSBuZXcgTm90QUxpbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMucDFQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5wMlByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnAzUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSB2aWV3IGZvciB0aGlzIGNoYWxsZW5nZS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgY3JlYXRlVmlldyggbW9kZWw6IExpbmVHYW1lTW9kZWwsIGNoYWxsZW5nZVNpemU6IERpbWVuc2lvbjIsIGF1ZGlvUGxheWVyOiBHYW1lQXVkaW9QbGF5ZXIgKTogUGxhY2VUaGVQb2ludHNOb2RlIHtcclxuICAgIHJldHVybiBuZXcgUGxhY2VUaGVQb2ludHNOb2RlKCB0aGlzLCBtb2RlbCwgY2hhbGxlbmdlU2l6ZSwgYXVkaW9QbGF5ZXIgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdQbGFjZVRoZVBvaW50cycsIFBsYWNlVGhlUG9pbnRzICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxlQUFlLE1BQU0sdUNBQXVDO0FBQ25FLE9BQU9DLElBQUksTUFBTSw0QkFBNEI7QUFDN0MsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUNsRCxPQUFPQyxpQkFBaUIsTUFBTSx5QkFBeUI7QUFDdkQsT0FBT0Msa0JBQWtCLE1BQU0sK0JBQStCLENBQUMsQ0FBQztBQUNoRSxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBQzVDLE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUNwRCxPQUFPQyxRQUFRLE1BQU0sZUFBZTtBQU9wQyxlQUFlLE1BQU1DLGNBQWMsU0FBU0gsWUFBWSxDQUFDO0VBRXZEOztFQUtBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NJLFdBQVdBLENBQUVDLFdBQW1CLEVBQUVDLE1BQVksRUFBRUMsWUFBMEIsRUFBRUMsTUFBYSxFQUFFQyxNQUFhLEVBQUc7SUFFaEgsS0FBSyxDQUFFSixXQUFXLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFTixnQkFBZ0IsQ0FBQ1MsWUFBWSxFQUFFRixNQUFNLEVBQUVDLE1BQU8sQ0FBQzs7SUFFekY7SUFDQSxJQUFJLENBQUNFLFVBQVUsR0FBRyxJQUFJaEIsZUFBZSxDQUFFLElBQUlELE9BQU8sQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFFLENBQUUsQ0FBQztJQUM3RCxJQUFJLENBQUNrQixVQUFVLEdBQUcsSUFBSWpCLGVBQWUsQ0FBRSxJQUFJRCxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQzVELElBQUksQ0FBQ21CLFVBQVUsR0FBRyxJQUFJbEIsZUFBZSxDQUFFLElBQUlELE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFFLENBQUM7O0lBRTVEO0lBQ0E7SUFDQUQsU0FBUyxDQUFDcUIsU0FBUyxDQUNqQixDQUFFLElBQUksQ0FBQ0gsVUFBVSxFQUFFLElBQUksQ0FBQ0MsVUFBVSxFQUFFLElBQUksQ0FBQ0MsVUFBVSxDQUFFLEVBQ3JELENBQUVFLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEtBQU07TUFDaEIsTUFBTUMsSUFBSSxHQUFHLElBQUl0QixJQUFJLENBQUVtQixFQUFFLENBQUNJLENBQUMsRUFBRUosRUFBRSxDQUFDSyxDQUFDLEVBQUVKLEVBQUUsQ0FBQ0csQ0FBQyxFQUFFSCxFQUFFLENBQUNJLENBQUMsRUFBRXRCLGlCQUFpQixDQUFDdUIsV0FBWSxDQUFDO01BQzlFLElBQUtILElBQUksQ0FBQ0ksV0FBVyxDQUFFTCxFQUFHLENBQUMsRUFBRztRQUM1QjtRQUNBLElBQUksQ0FBQ00sYUFBYSxDQUFDQyxLQUFLLEdBQUdOLElBQUk7TUFDakMsQ0FBQyxNQUNJO1FBQ0g7UUFDQSxJQUFJLENBQUNLLGFBQWEsQ0FBQ0MsS0FBSyxHQUFHLElBQUl0QixRQUFRLENBQUMsQ0FBQztNQUMzQztJQUNGLENBQUUsQ0FBQztFQUNQO0VBRWdCdUIsS0FBS0EsQ0FBQSxFQUFTO0lBQzVCLElBQUksQ0FBQ2QsVUFBVSxDQUFDYyxLQUFLLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUNiLFVBQVUsQ0FBQ2EsS0FBSyxDQUFDLENBQUM7SUFDdkIsSUFBSSxDQUFDWixVQUFVLENBQUNZLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7RUFDZjs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JDLFVBQVVBLENBQUVDLEtBQW9CLEVBQUVDLGFBQXlCLEVBQUVDLFdBQTRCLEVBQXVCO0lBQzlILE9BQU8sSUFBSTlCLGtCQUFrQixDQUFFLElBQUksRUFBRTRCLEtBQUssRUFBRUMsYUFBYSxFQUFFQyxXQUFZLENBQUM7RUFDMUU7QUFDRjtBQUVBaEMsYUFBYSxDQUFDaUMsUUFBUSxDQUFFLGdCQUFnQixFQUFFM0IsY0FBZSxDQUFDIn0=