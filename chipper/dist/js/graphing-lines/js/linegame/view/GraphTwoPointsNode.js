// Copyright 2013-2023, University of Colorado Boulder

/**
 * Challenge graph with manipulators for 2 points, (x1,y1) and (x2,y2), of the guess line.
 * The answer line is initially hidden.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import X1Y1Manipulator from '../../common/view/manipulator/X1Y1Manipulator.js';
import X2Y2Manipulator from '../../common/view/manipulator/X2Y2Manipulator.js';
import Line from '../../common/model/Line.js';
import graphingLines from '../../graphingLines.js';
import LineGameConstants from '../LineGameConstants.js';
import ChallengeGraphNode from './ChallengeGraphNode.js';
export default class GraphTwoPointsNode extends ChallengeGraphNode {
  constructor(challenge) {
    super(challenge);
    this.setGuessLineVisible(true);
    const manipulatorRadius = challenge.modelViewTransform.modelToViewDeltaX(LineGameConstants.MANIPULATOR_RADIUS);

    // @ts-expect-error guessProperty is Property<Line | NotALine>
    const x1y1Manipulator = new X1Y1Manipulator(manipulatorRadius, challenge.guessProperty, new Property(challenge.graph.xRange), new Property(challenge.graph.yRange), challenge.modelViewTransform, false /* constantSlope */);

    // @ts-expect-error guessProperty is Property<Line | NotALine>
    const x2y2Manipulator = new X2Y2Manipulator(manipulatorRadius, challenge.guessProperty, new Property(challenge.graph.xRange), new Property(challenge.graph.yRange), challenge.modelViewTransform);

    // Rendering order
    this.addChild(x1y1Manipulator);
    this.addChild(x2y2Manipulator);

    // Sync with the guess by moving the manipulators.
    const guessObserver = line => {
      assert && assert(line instanceof Line); // eslint-disable-line no-simple-type-checking-assertions
      if (line instanceof Line) {
        x1y1Manipulator.translation = challenge.modelViewTransform.modelToViewXY(line.x1, line.y1);
        x2y2Manipulator.translation = challenge.modelViewTransform.modelToViewXY(line.x2, line.y2);
      }
    };
    challenge.guessProperty.link(guessObserver); // unlink in dispose

    this.disposeGraphTwoPointsNode = () => {
      x1y1Manipulator.dispose();
      x2y2Manipulator.dispose();
      challenge.guessProperty.unlink(guessObserver);
    };
  }
  dispose() {
    this.disposeGraphTwoPointsNode();
    super.dispose();
  }
}
graphingLines.register('GraphTwoPointsNode', GraphTwoPointsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlgxWTFNYW5pcHVsYXRvciIsIlgyWTJNYW5pcHVsYXRvciIsIkxpbmUiLCJncmFwaGluZ0xpbmVzIiwiTGluZUdhbWVDb25zdGFudHMiLCJDaGFsbGVuZ2VHcmFwaE5vZGUiLCJHcmFwaFR3b1BvaW50c05vZGUiLCJjb25zdHJ1Y3RvciIsImNoYWxsZW5nZSIsInNldEd1ZXNzTGluZVZpc2libGUiLCJtYW5pcHVsYXRvclJhZGl1cyIsIm1vZGVsVmlld1RyYW5zZm9ybSIsIm1vZGVsVG9WaWV3RGVsdGFYIiwiTUFOSVBVTEFUT1JfUkFESVVTIiwieDF5MU1hbmlwdWxhdG9yIiwiZ3Vlc3NQcm9wZXJ0eSIsImdyYXBoIiwieFJhbmdlIiwieVJhbmdlIiwieDJ5Mk1hbmlwdWxhdG9yIiwiYWRkQ2hpbGQiLCJndWVzc09ic2VydmVyIiwibGluZSIsImFzc2VydCIsInRyYW5zbGF0aW9uIiwibW9kZWxUb1ZpZXdYWSIsIngxIiwieTEiLCJ4MiIsInkyIiwibGluayIsImRpc3Bvc2VHcmFwaFR3b1BvaW50c05vZGUiLCJkaXNwb3NlIiwidW5saW5rIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHcmFwaFR3b1BvaW50c05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2hhbGxlbmdlIGdyYXBoIHdpdGggbWFuaXB1bGF0b3JzIGZvciAyIHBvaW50cywgKHgxLHkxKSBhbmQgKHgyLHkyKSwgb2YgdGhlIGd1ZXNzIGxpbmUuXHJcbiAqIFRoZSBhbnN3ZXIgbGluZSBpcyBpbml0aWFsbHkgaGlkZGVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFgxWTFNYW5pcHVsYXRvciBmcm9tICcuLi8uLi9jb21tb24vdmlldy9tYW5pcHVsYXRvci9YMVkxTWFuaXB1bGF0b3IuanMnO1xyXG5pbXBvcnQgWDJZMk1hbmlwdWxhdG9yIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L21hbmlwdWxhdG9yL1gyWTJNYW5pcHVsYXRvci5qcyc7XHJcbmltcG9ydCBMaW5lIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9MaW5lLmpzJztcclxuaW1wb3J0IGdyYXBoaW5nTGluZXMgZnJvbSAnLi4vLi4vZ3JhcGhpbmdMaW5lcy5qcyc7XHJcbmltcG9ydCBMaW5lR2FtZUNvbnN0YW50cyBmcm9tICcuLi9MaW5lR2FtZUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBDaGFsbGVuZ2VHcmFwaE5vZGUgZnJvbSAnLi9DaGFsbGVuZ2VHcmFwaE5vZGUuanMnO1xyXG5pbXBvcnQgTm90QUxpbmUgZnJvbSAnLi4vbW9kZWwvTm90QUxpbmUuanMnO1xyXG5pbXBvcnQgR3JhcGhUaGVMaW5lIGZyb20gJy4uL21vZGVsL0dyYXBoVGhlTGluZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFwaFR3b1BvaW50c05vZGUgZXh0ZW5kcyBDaGFsbGVuZ2VHcmFwaE5vZGUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VHcmFwaFR3b1BvaW50c05vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY2hhbGxlbmdlOiBHcmFwaFRoZUxpbmUgKSB7XHJcblxyXG4gICAgc3VwZXIoIGNoYWxsZW5nZSApO1xyXG5cclxuICAgIHRoaXMuc2V0R3Vlc3NMaW5lVmlzaWJsZSggdHJ1ZSApO1xyXG5cclxuICAgIGNvbnN0IG1hbmlwdWxhdG9yUmFkaXVzID0gY2hhbGxlbmdlLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggTGluZUdhbWVDb25zdGFudHMuTUFOSVBVTEFUT1JfUkFESVVTICk7XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBndWVzc1Byb3BlcnR5IGlzIFByb3BlcnR5PExpbmUgfCBOb3RBTGluZT5cclxuICAgIGNvbnN0IHgxeTFNYW5pcHVsYXRvciA9IG5ldyBYMVkxTWFuaXB1bGF0b3IoIG1hbmlwdWxhdG9yUmFkaXVzLCBjaGFsbGVuZ2UuZ3Vlc3NQcm9wZXJ0eSxcclxuICAgICAgbmV3IFByb3BlcnR5KCBjaGFsbGVuZ2UuZ3JhcGgueFJhbmdlICksIG5ldyBQcm9wZXJ0eSggY2hhbGxlbmdlLmdyYXBoLnlSYW5nZSApLCBjaGFsbGVuZ2UubW9kZWxWaWV3VHJhbnNmb3JtLCBmYWxzZSAvKiBjb25zdGFudFNsb3BlICovICk7XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBndWVzc1Byb3BlcnR5IGlzIFByb3BlcnR5PExpbmUgfCBOb3RBTGluZT5cclxuICAgIGNvbnN0IHgyeTJNYW5pcHVsYXRvciA9IG5ldyBYMlkyTWFuaXB1bGF0b3IoIG1hbmlwdWxhdG9yUmFkaXVzLCBjaGFsbGVuZ2UuZ3Vlc3NQcm9wZXJ0eSxcclxuICAgICAgbmV3IFByb3BlcnR5KCBjaGFsbGVuZ2UuZ3JhcGgueFJhbmdlICksIG5ldyBQcm9wZXJ0eSggY2hhbGxlbmdlLmdyYXBoLnlSYW5nZSApLCBjaGFsbGVuZ2UubW9kZWxWaWV3VHJhbnNmb3JtICk7XHJcblxyXG4gICAgLy8gUmVuZGVyaW5nIG9yZGVyXHJcbiAgICB0aGlzLmFkZENoaWxkKCB4MXkxTWFuaXB1bGF0b3IgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHgyeTJNYW5pcHVsYXRvciApO1xyXG5cclxuICAgIC8vIFN5bmMgd2l0aCB0aGUgZ3Vlc3MgYnkgbW92aW5nIHRoZSBtYW5pcHVsYXRvcnMuXHJcbiAgICBjb25zdCBndWVzc09ic2VydmVyID0gKCBsaW5lOiBMaW5lIHwgTm90QUxpbmUgKSA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGxpbmUgaW5zdGFuY2VvZiBMaW5lICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2ltcGxlLXR5cGUtY2hlY2tpbmctYXNzZXJ0aW9uc1xyXG4gICAgICBpZiAoIGxpbmUgaW5zdGFuY2VvZiBMaW5lICkge1xyXG4gICAgICAgIHgxeTFNYW5pcHVsYXRvci50cmFuc2xhdGlvbiA9IGNoYWxsZW5nZS5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYWSggbGluZS54MSwgbGluZS55MSApO1xyXG4gICAgICAgIHgyeTJNYW5pcHVsYXRvci50cmFuc2xhdGlvbiA9IGNoYWxsZW5nZS5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYWSggbGluZS54MiwgbGluZS55MiApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgY2hhbGxlbmdlLmd1ZXNzUHJvcGVydHkubGluayggZ3Vlc3NPYnNlcnZlciApOyAvLyB1bmxpbmsgaW4gZGlzcG9zZVxyXG5cclxuICAgIHRoaXMuZGlzcG9zZUdyYXBoVHdvUG9pbnRzTm9kZSA9ICgpID0+IHtcclxuICAgICAgeDF5MU1hbmlwdWxhdG9yLmRpc3Bvc2UoKTtcclxuICAgICAgeDJ5Mk1hbmlwdWxhdG9yLmRpc3Bvc2UoKTtcclxuICAgICAgY2hhbGxlbmdlLmd1ZXNzUHJvcGVydHkudW5saW5rKCBndWVzc09ic2VydmVyICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VHcmFwaFR3b1BvaW50c05vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdHcmFwaFR3b1BvaW50c05vZGUnLCBHcmFwaFR3b1BvaW50c05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLGVBQWUsTUFBTSxrREFBa0Q7QUFDOUUs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