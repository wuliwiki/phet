// Copyright 2013-2023, University of Colorado Boulder

/**
 * Challenge graph with manipulators for 3 arbitrary points, which may or may not form a guess line.
 * The answer line is initially hidden.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import PointManipulator from '../../common/view/manipulator/PointManipulator.js';
import graphingLines from '../../graphingLines.js';
import LineGameConstants from '../LineGameConstants.js';
import ChallengeGraphNode from './ChallengeGraphNode.js';
export default class GraphThreePointsNode extends ChallengeGraphNode {
  constructor(challenge) {
    super(challenge, {
      slopeToolEnabled: false
    });

    // manipulators
    const manipulatorRadius = challenge.modelViewTransform.modelToViewDeltaX(LineGameConstants.MANIPULATOR_RADIUS);
    const p1Manipulator = new PointManipulator(manipulatorRadius, challenge.p1Property, [challenge.p2Property, challenge.p3Property], challenge.graph.xRange, challenge.graph.yRange, challenge.modelViewTransform);
    const p2Manipulator = new PointManipulator(manipulatorRadius, challenge.p2Property, [challenge.p1Property, challenge.p3Property], challenge.graph.xRange, challenge.graph.yRange, challenge.modelViewTransform);
    const p3Manipulator = new PointManipulator(manipulatorRadius, challenge.p3Property, [challenge.p1Property, challenge.p2Property], challenge.graph.xRange, challenge.graph.yRange, challenge.modelViewTransform);

    // rendering order
    this.addChild(p1Manipulator);
    this.addChild(p2Manipulator);
    this.addChild(p3Manipulator);

    // Move the manipulators to match points, unmultilink in dispose
    const pointsMultilink = Multilink.multilink([challenge.p1Property, challenge.p2Property, challenge.p3Property], (p1, p2, p3) => {
      p1Manipulator.translation = challenge.modelViewTransform.modelToViewPosition(p1);
      p2Manipulator.translation = challenge.modelViewTransform.modelToViewPosition(p2);
      p3Manipulator.translation = challenge.modelViewTransform.modelToViewPosition(p3);
    });
    this.disposeGraphThreePointsNode = () => {
      p1Manipulator.dispose();
      p2Manipulator.dispose();
      p3Manipulator.dispose();
      Multilink.unmultilink(pointsMultilink);
    };
  }
  dispose() {
    this.disposeGraphThreePointsNode();
    super.dispose();
  }
}
graphingLines.register('GraphThreePointsNode', GraphThreePointsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJQb2ludE1hbmlwdWxhdG9yIiwiZ3JhcGhpbmdMaW5lcyIsIkxpbmVHYW1lQ29uc3RhbnRzIiwiQ2hhbGxlbmdlR3JhcGhOb2RlIiwiR3JhcGhUaHJlZVBvaW50c05vZGUiLCJjb25zdHJ1Y3RvciIsImNoYWxsZW5nZSIsInNsb3BlVG9vbEVuYWJsZWQiLCJtYW5pcHVsYXRvclJhZGl1cyIsIm1vZGVsVmlld1RyYW5zZm9ybSIsIm1vZGVsVG9WaWV3RGVsdGFYIiwiTUFOSVBVTEFUT1JfUkFESVVTIiwicDFNYW5pcHVsYXRvciIsInAxUHJvcGVydHkiLCJwMlByb3BlcnR5IiwicDNQcm9wZXJ0eSIsImdyYXBoIiwieFJhbmdlIiwieVJhbmdlIiwicDJNYW5pcHVsYXRvciIsInAzTWFuaXB1bGF0b3IiLCJhZGRDaGlsZCIsInBvaW50c011bHRpbGluayIsIm11bHRpbGluayIsInAxIiwicDIiLCJwMyIsInRyYW5zbGF0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsImRpc3Bvc2VHcmFwaFRocmVlUG9pbnRzTm9kZSIsImRpc3Bvc2UiLCJ1bm11bHRpbGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR3JhcGhUaHJlZVBvaW50c05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2hhbGxlbmdlIGdyYXBoIHdpdGggbWFuaXB1bGF0b3JzIGZvciAzIGFyYml0cmFyeSBwb2ludHMsIHdoaWNoIG1heSBvciBtYXkgbm90IGZvcm0gYSBndWVzcyBsaW5lLlxyXG4gKiBUaGUgYW5zd2VyIGxpbmUgaXMgaW5pdGlhbGx5IGhpZGRlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IFBvaW50TWFuaXB1bGF0b3IgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvbWFuaXB1bGF0b3IvUG9pbnRNYW5pcHVsYXRvci5qcyc7XHJcbmltcG9ydCBncmFwaGluZ0xpbmVzIGZyb20gJy4uLy4uL2dyYXBoaW5nTGluZXMuanMnO1xyXG5pbXBvcnQgTGluZUdhbWVDb25zdGFudHMgZnJvbSAnLi4vTGluZUdhbWVDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ2hhbGxlbmdlR3JhcGhOb2RlIGZyb20gJy4vQ2hhbGxlbmdlR3JhcGhOb2RlLmpzJztcclxuaW1wb3J0IFBsYWNlVGhlUG9pbnRzIGZyb20gJy4uL21vZGVsL1BsYWNlVGhlUG9pbnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYXBoVGhyZWVQb2ludHNOb2RlIGV4dGVuZHMgQ2hhbGxlbmdlR3JhcGhOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlR3JhcGhUaHJlZVBvaW50c05vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY2hhbGxlbmdlOiBQbGFjZVRoZVBvaW50cyApIHtcclxuXHJcbiAgICBzdXBlciggY2hhbGxlbmdlLCB7IHNsb3BlVG9vbEVuYWJsZWQ6IGZhbHNlIH0gKTtcclxuXHJcbiAgICAvLyBtYW5pcHVsYXRvcnNcclxuICAgIGNvbnN0IG1hbmlwdWxhdG9yUmFkaXVzID0gY2hhbGxlbmdlLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggTGluZUdhbWVDb25zdGFudHMuTUFOSVBVTEFUT1JfUkFESVVTICk7XHJcbiAgICBjb25zdCBwMU1hbmlwdWxhdG9yID0gbmV3IFBvaW50TWFuaXB1bGF0b3IoIG1hbmlwdWxhdG9yUmFkaXVzLCBjaGFsbGVuZ2UucDFQcm9wZXJ0eSxcclxuICAgICAgWyBjaGFsbGVuZ2UucDJQcm9wZXJ0eSwgY2hhbGxlbmdlLnAzUHJvcGVydHkgXSwgY2hhbGxlbmdlLmdyYXBoLnhSYW5nZSwgY2hhbGxlbmdlLmdyYXBoLnlSYW5nZSxcclxuICAgICAgY2hhbGxlbmdlLm1vZGVsVmlld1RyYW5zZm9ybSApO1xyXG4gICAgY29uc3QgcDJNYW5pcHVsYXRvciA9IG5ldyBQb2ludE1hbmlwdWxhdG9yKCBtYW5pcHVsYXRvclJhZGl1cywgY2hhbGxlbmdlLnAyUHJvcGVydHksXHJcbiAgICAgIFsgY2hhbGxlbmdlLnAxUHJvcGVydHksIGNoYWxsZW5nZS5wM1Byb3BlcnR5IF0sIGNoYWxsZW5nZS5ncmFwaC54UmFuZ2UsIGNoYWxsZW5nZS5ncmFwaC55UmFuZ2UsXHJcbiAgICAgIGNoYWxsZW5nZS5tb2RlbFZpZXdUcmFuc2Zvcm0gKTtcclxuICAgIGNvbnN0IHAzTWFuaXB1bGF0b3IgPSBuZXcgUG9pbnRNYW5pcHVsYXRvciggbWFuaXB1bGF0b3JSYWRpdXMsIGNoYWxsZW5nZS5wM1Byb3BlcnR5LFxyXG4gICAgICBbIGNoYWxsZW5nZS5wMVByb3BlcnR5LCBjaGFsbGVuZ2UucDJQcm9wZXJ0eSBdLCBjaGFsbGVuZ2UuZ3JhcGgueFJhbmdlLCBjaGFsbGVuZ2UuZ3JhcGgueVJhbmdlLFxyXG4gICAgICBjaGFsbGVuZ2UubW9kZWxWaWV3VHJhbnNmb3JtICk7XHJcblxyXG4gICAgLy8gcmVuZGVyaW5nIG9yZGVyXHJcbiAgICB0aGlzLmFkZENoaWxkKCBwMU1hbmlwdWxhdG9yICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwMk1hbmlwdWxhdG9yICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwM01hbmlwdWxhdG9yICk7XHJcblxyXG4gICAgLy8gTW92ZSB0aGUgbWFuaXB1bGF0b3JzIHRvIG1hdGNoIHBvaW50cywgdW5tdWx0aWxpbmsgaW4gZGlzcG9zZVxyXG4gICAgY29uc3QgcG9pbnRzTXVsdGlsaW5rID0gTXVsdGlsaW5rLm11bHRpbGluayhcclxuICAgICAgWyBjaGFsbGVuZ2UucDFQcm9wZXJ0eSwgY2hhbGxlbmdlLnAyUHJvcGVydHksIGNoYWxsZW5nZS5wM1Byb3BlcnR5IF0sXHJcbiAgICAgICggcDEsIHAyLCBwMyApID0+IHtcclxuICAgICAgICBwMU1hbmlwdWxhdG9yLnRyYW5zbGF0aW9uID0gY2hhbGxlbmdlLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBwMSApO1xyXG4gICAgICAgIHAyTWFuaXB1bGF0b3IudHJhbnNsYXRpb24gPSBjaGFsbGVuZ2UubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIHAyICk7XHJcbiAgICAgICAgcDNNYW5pcHVsYXRvci50cmFuc2xhdGlvbiA9IGNoYWxsZW5nZS5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggcDMgKTtcclxuICAgICAgfSApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZUdyYXBoVGhyZWVQb2ludHNOb2RlID0gKCkgPT4ge1xyXG4gICAgICBwMU1hbmlwdWxhdG9yLmRpc3Bvc2UoKTtcclxuICAgICAgcDJNYW5pcHVsYXRvci5kaXNwb3NlKCk7XHJcbiAgICAgIHAzTWFuaXB1bGF0b3IuZGlzcG9zZSgpO1xyXG4gICAgICBNdWx0aWxpbmsudW5tdWx0aWxpbmsoIHBvaW50c011bHRpbGluayApO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlR3JhcGhUaHJlZVBvaW50c05vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdHcmFwaFRocmVlUG9pbnRzTm9kZScsIEdyYXBoVGhyZWVQb2ludHNOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGtDQUFrQztBQUN4RCxPQUFPQyxnQkFBZ0IsTUFBTSxtREFBbUQ7QUFDaEYsT0FBT0Ms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