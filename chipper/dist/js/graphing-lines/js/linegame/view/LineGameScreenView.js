// Copyright 2013-2023, University of Colorado Boulder

/**
 * View for the 'Line Game' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import level1_png from '../../../images/level1_png.js';
import level2_png from '../../../images/level2_png.js';
import level3_png from '../../../images/level3_png.js';
import level4_png from '../../../images/level4_png.js';
import level5_png from '../../../images/level5_png.js';
import level6_png from '../../../images/level6_png.js';
import graphingLines from '../../graphingLines.js';
import BaseGameScreenView from './BaseGameScreenView.js';
import GLRewardNode from './GLRewardNode.js';
export default class LineGameScreenView extends BaseGameScreenView {
  constructor(model, tandem) {
    // Images for the level-selection buttons, ordered by level
    const levelImages = [level1_png, level2_png, level3_png, level4_png, level5_png, level6_png];

    // functions that create nodes for the game reward, ordered by level
    const rewardNodeFunctions = [GLRewardNode.createEquationNodes, GLRewardNode.createGraphNodes, GLRewardNode.createPointToolNodes, GLRewardNode.createSmileyFaceNodes, GLRewardNode.createPaperAirplaneNodes, GLRewardNode.createAssortedNodes];
    super(model, levelImages, rewardNodeFunctions, tandem, {
      settingsNodeOptions: {
        levelSelectionButtonGroupOptions: {
          flowBoxOptions: {
            spacing: 50,
            // x spacing
            lineSpacing: 25,
            // y spacing
            preferredWidth: 800,
            // set empirically to provide 3 buttons per row
            wrap: true,
            justify: 'center'
          }
        }
      }
    });
  }
}
graphingLines.register('LineGameScreenView', LineGameScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsZXZlbDFfcG5nIiwibGV2ZWwyX3BuZyIsImxldmVsM19wbmciLCJsZXZlbDRfcG5nIiwibGV2ZWw1X3BuZyIsImxldmVsNl9wbmciLCJncmFwaGluZ0xpbmVzIiwiQmFzZUdhbWVTY3JlZW5WaWV3IiwiR0xSZXdhcmROb2RlIiwiTGluZUdhbWVTY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRhbmRlbSIsImxldmVsSW1hZ2VzIiwicmV3YXJkTm9kZUZ1bmN0aW9ucyIsImNyZWF0ZUVxdWF0aW9uTm9kZXMiLCJjcmVhdGVHcmFwaE5vZGVzIiwiY3JlYXRlUG9pbnRUb29sTm9kZXMiLCJjcmVhdGVTbWlsZXlGYWNlTm9kZXMiLCJjcmVhdGVQYXBlckFpcnBsYW5lTm9kZXMiLCJjcmVhdGVBc3NvcnRlZE5vZGVzIiwic2V0dGluZ3NOb2RlT3B0aW9ucyIsImxldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXBPcHRpb25zIiwiZmxvd0JveE9wdGlvbnMiLCJzcGFjaW5nIiwibGluZVNwYWNpbmciLCJwcmVmZXJyZWRXaWR0aCIsIndyYXAiLCJqdXN0aWZ5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMaW5lR2FtZVNjcmVlblZpZXcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgdGhlICdMaW5lIEdhbWUnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgbGV2ZWwxX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvbGV2ZWwxX3BuZy5qcyc7XHJcbmltcG9ydCBsZXZlbDJfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9sZXZlbDJfcG5nLmpzJztcclxuaW1wb3J0IGxldmVsM19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2xldmVsM19wbmcuanMnO1xyXG5pbXBvcnQgbGV2ZWw0X3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvbGV2ZWw0X3BuZy5qcyc7XHJcbmltcG9ydCBsZXZlbDVfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9sZXZlbDVfcG5nLmpzJztcclxuaW1wb3J0IGxldmVsNl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2xldmVsNl9wbmcuanMnO1xyXG5pbXBvcnQgZ3JhcGhpbmdMaW5lcyBmcm9tICcuLi8uLi9ncmFwaGluZ0xpbmVzLmpzJztcclxuaW1wb3J0IExpbmVHYW1lTW9kZWwgZnJvbSAnLi4vbW9kZWwvTGluZUdhbWVNb2RlbC5qcyc7XHJcbmltcG9ydCBCYXNlR2FtZVNjcmVlblZpZXcgZnJvbSAnLi9CYXNlR2FtZVNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgR0xSZXdhcmROb2RlIGZyb20gJy4vR0xSZXdhcmROb2RlLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVHYW1lU2NyZWVuVmlldyBleHRlbmRzIEJhc2VHYW1lU2NyZWVuVmlldyB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IExpbmVHYW1lTW9kZWwsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIC8vIEltYWdlcyBmb3IgdGhlIGxldmVsLXNlbGVjdGlvbiBidXR0b25zLCBvcmRlcmVkIGJ5IGxldmVsXHJcbiAgICBjb25zdCBsZXZlbEltYWdlcyA9IFsgbGV2ZWwxX3BuZywgbGV2ZWwyX3BuZywgbGV2ZWwzX3BuZywgbGV2ZWw0X3BuZywgbGV2ZWw1X3BuZywgbGV2ZWw2X3BuZyBdO1xyXG5cclxuICAgIC8vIGZ1bmN0aW9ucyB0aGF0IGNyZWF0ZSBub2RlcyBmb3IgdGhlIGdhbWUgcmV3YXJkLCBvcmRlcmVkIGJ5IGxldmVsXHJcbiAgICBjb25zdCByZXdhcmROb2RlRnVuY3Rpb25zID0gW1xyXG4gICAgICBHTFJld2FyZE5vZGUuY3JlYXRlRXF1YXRpb25Ob2RlcyxcclxuICAgICAgR0xSZXdhcmROb2RlLmNyZWF0ZUdyYXBoTm9kZXMsXHJcbiAgICAgIEdMUmV3YXJkTm9kZS5jcmVhdGVQb2ludFRvb2xOb2RlcyxcclxuICAgICAgR0xSZXdhcmROb2RlLmNyZWF0ZVNtaWxleUZhY2VOb2RlcyxcclxuICAgICAgR0xSZXdhcmROb2RlLmNyZWF0ZVBhcGVyQWlycGxhbmVOb2RlcyxcclxuICAgICAgR0xSZXdhcmROb2RlLmNyZWF0ZUFzc29ydGVkTm9kZXNcclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCBsZXZlbEltYWdlcywgcmV3YXJkTm9kZUZ1bmN0aW9ucywgdGFuZGVtLCB7XHJcbiAgICAgIHNldHRpbmdzTm9kZU9wdGlvbnM6IHtcclxuICAgICAgICBsZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwT3B0aW9uczoge1xyXG4gICAgICAgICAgZmxvd0JveE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgc3BhY2luZzogNTAsIC8vIHggc3BhY2luZ1xyXG4gICAgICAgICAgICBsaW5lU3BhY2luZzogMjUsIC8vIHkgc3BhY2luZ1xyXG4gICAgICAgICAgICBwcmVmZXJyZWRXaWR0aDogODAwLCAvLyBzZXQgZW1waXJpY2FsbHkgdG8gcHJvdmlkZSAzIGJ1dHRvbnMgcGVyIHJvd1xyXG4gICAgICAgICAgICB3cmFwOiB0cnVlLFxyXG4gICAgICAgICAgICBqdXN0aWZ5OiAnY2VudGVyJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdMaW5lcy5yZWdpc3RlciggJ0xpbmVHYW1lU2NyZWVuVmlldycsIExpbmVHYW1lU2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxVQUFVLE1BQU0sK0JBQStCO0FBQ3RELE9BQU9DLFVBQVUsTUFBTSwrQkFBK0I7QUFDdEQsT0FBT0MsVUFBVSxNQUFNLCtCQUErQjtBQUN0RCxPQUFPQyxVQUFVLE1BQU0sK0JBQStCO0FBQ3RELE9BQU9DLFVBQVUsTUFBTSwrQkFBK0I7QUFDdEQsT0FBT0MsVUFBVSxNQUFNLCtCQUErQjtBQUN0RCxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBRWxELE9BQU9DLGtCQUFrQixNQUFNLHlCQUF5QjtBQUN4RCxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBRTVDLGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNGLGtCQUFrQixDQUFDO0VBRTFERyxXQUFXQSxDQUFFQyxLQUFvQixFQUFFQyxNQUFjLEVBQUc7SUFFekQ7SUFDQSxNQUFNQyxXQUFXLEdBQUcsQ0FBRWIsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsQ0FBRTs7SUFFOUY7SUFDQSxNQUFNUyxtQkFBbUIsR0FBRyxDQUMxQk4sWUFBWSxDQUFDTyxtQkFBbUIsRUFDaENQLFlBQVksQ0FBQ1EsZ0JBQWdCLEVBQzdCUixZQUFZLENBQUNTLG9CQUFvQixFQUNqQ1QsWUFBWSxDQUFDVSxxQkFBcUIsRUFDbENWLFlBQVksQ0FBQ1csd0JBQXdCLEVBQ3JDWCxZQUFZLENBQUNZLG1CQUFtQixDQUNqQztJQUVELEtBQUssQ0FBRVQsS0FBSyxFQUFFRSxXQUFXLEVBQUVDLG1CQUFtQixFQUFFRixNQUFNLEVBQUU7TUFDdERTLG1CQUFtQixFQUFFO1FBQ25CQyxnQ0FBZ0MsRUFBRTtVQUNoQ0MsY0FBYyxFQUFFO1lBQ2RDLE9BQU8sRUFBRSxFQUFFO1lBQUU7WUFDYkMsV0FBVyxFQUFFLEVBQUU7WUFBRTtZQUNqQkMsY0FBYyxFQUFFLEdBQUc7WUFBRTtZQUNyQkMsSUFBSSxFQUFFLElBQUk7WUFDVkMsT0FBTyxFQUFFO1VBQ1g7UUFDRjtNQUNGO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBdEIsYUFBYSxDQUFDdUIsUUFBUSxDQUFFLG9CQUFvQixFQUFFcEIsa0JBQW1CLENBQUMifQ==