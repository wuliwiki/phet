// Copyright 2013-2023, University of Colorado Boulder

/**
 * View for 'Place the Points' challenges.
 * This is a specialization of the 'Graph the Line' view.
 * User manipulates 3 arbitrary points, equations are displayed on the left.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import graphingLines from '../../graphingLines.js';
import PlayState from '../model/PlayState.js';
import GraphTheLineNode from './GraphTheLineNode.js';
import GraphThreePointsNode from './GraphThreePointsNode.js';
export default class PlaceThePointsNode extends GraphTheLineNode {
  constructor(challenge, model, challengeSize, audioPlayer) {
    super(challenge, model, challengeSize, audioPlayer);
    const playStateObserver = playState => {
      // No-op if dispose has been called, see https://github.com/phetsims/graphing-lines/issues/133
      if (!this.isDisposed) {
        // show user's line only in states where there guess is wrong.
        this.graphNode.setGuessLineVisible(!challenge.isCorrect() && (playState === PlayState.TRY_AGAIN || playState === PlayState.NEXT));

        /*
         * Plot (x1,y1) for answer when user got the challenge wrong.
         * Do not plot (x1,y1) for guess because none of the 3 points corresponds to (x1,y1).
         */
        this.graphNode.setAnswerPointVisible(playState === PlayState.NEXT && !challenge.isCorrect());
        this.graphNode.setGuessPointVisible(false);
      }
    };
    model.playStateProperty.link(playStateObserver); // unlink in dispose

    this.disposePlaceThePointsNode = () => {
      model.playStateProperty.unlink(playStateObserver);
    };
  }
  dispose() {
    this.disposePlaceThePointsNode();
    super.dispose();
  }

  /**
   * Creates the graph portion of the view.
   */
  createGraphNode(challenge) {
    return new GraphThreePointsNode(challenge);
  }
}
graphingLines.register('PlaceThePointsNode', PlaceThePointsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJncmFwaGluZ0xpbmVzIiwiUGxheVN0YXRlIiwiR3JhcGhUaGVMaW5lTm9kZSIsIkdyYXBoVGhyZWVQb2ludHNOb2RlIiwiUGxhY2VUaGVQb2ludHNOb2RlIiwiY29uc3RydWN0b3IiLCJjaGFsbGVuZ2UiLCJtb2RlbCIsImNoYWxsZW5nZVNpemUiLCJhdWRpb1BsYXllciIsInBsYXlTdGF0ZU9ic2VydmVyIiwicGxheVN0YXRlIiwiaXNEaXNwb3NlZCIsImdyYXBoTm9kZSIsInNldEd1ZXNzTGluZVZpc2libGUiLCJpc0NvcnJlY3QiLCJUUllfQUdBSU4iLCJORVhUIiwic2V0QW5zd2VyUG9pbnRWaXNpYmxlIiwic2V0R3Vlc3NQb2ludFZpc2libGUiLCJwbGF5U3RhdGVQcm9wZXJ0eSIsImxpbmsiLCJkaXNwb3NlUGxhY2VUaGVQb2ludHNOb2RlIiwidW5saW5rIiwiZGlzcG9zZSIsImNyZWF0ZUdyYXBoTm9kZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxhY2VUaGVQb2ludHNOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgZm9yICdQbGFjZSB0aGUgUG9pbnRzJyBjaGFsbGVuZ2VzLlxyXG4gKiBUaGlzIGlzIGEgc3BlY2lhbGl6YXRpb24gb2YgdGhlICdHcmFwaCB0aGUgTGluZScgdmlldy5cclxuICogVXNlciBtYW5pcHVsYXRlcyAzIGFyYml0cmFyeSBwb2ludHMsIGVxdWF0aW9ucyBhcmUgZGlzcGxheWVkIG9uIHRoZSBsZWZ0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBncmFwaGluZ0xpbmVzIGZyb20gJy4uLy4uL2dyYXBoaW5nTGluZXMuanMnO1xyXG5pbXBvcnQgUGxheVN0YXRlIGZyb20gJy4uL21vZGVsL1BsYXlTdGF0ZS5qcyc7XHJcbmltcG9ydCBHcmFwaFRoZUxpbmVOb2RlIGZyb20gJy4vR3JhcGhUaGVMaW5lTm9kZS5qcyc7XHJcbmltcG9ydCBHcmFwaFRocmVlUG9pbnRzTm9kZSBmcm9tICcuL0dyYXBoVGhyZWVQb2ludHNOb2RlLmpzJztcclxuaW1wb3J0IExpbmVHYW1lTW9kZWwgZnJvbSAnLi4vbW9kZWwvTGluZUdhbWVNb2RlbC5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IEdhbWVBdWRpb1BsYXllciBmcm9tICcuLi8uLi8uLi8uLi92ZWdhcy9qcy9HYW1lQXVkaW9QbGF5ZXIuanMnO1xyXG5pbXBvcnQgQ2hhbGxlbmdlR3JhcGhOb2RlIGZyb20gJy4vQ2hhbGxlbmdlR3JhcGhOb2RlLmpzJztcclxuaW1wb3J0IFBsYWNlVGhlUG9pbnRzIGZyb20gJy4uL21vZGVsL1BsYWNlVGhlUG9pbnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYWNlVGhlUG9pbnRzTm9kZSBleHRlbmRzIEdyYXBoVGhlTGluZU5vZGUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VQbGFjZVRoZVBvaW50c05vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY2hhbGxlbmdlOiBQbGFjZVRoZVBvaW50cywgbW9kZWw6IExpbmVHYW1lTW9kZWwsIGNoYWxsZW5nZVNpemU6IERpbWVuc2lvbjIsIGF1ZGlvUGxheWVyOiBHYW1lQXVkaW9QbGF5ZXIgKSB7XHJcblxyXG4gICAgc3VwZXIoIGNoYWxsZW5nZSwgbW9kZWwsIGNoYWxsZW5nZVNpemUsIGF1ZGlvUGxheWVyICk7XHJcblxyXG4gICAgY29uc3QgcGxheVN0YXRlT2JzZXJ2ZXIgPSAoIHBsYXlTdGF0ZTogUGxheVN0YXRlICkgPT4ge1xyXG5cclxuICAgICAgLy8gTm8tb3AgaWYgZGlzcG9zZSBoYXMgYmVlbiBjYWxsZWQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ3JhcGhpbmctbGluZXMvaXNzdWVzLzEzM1xyXG4gICAgICBpZiAoICF0aGlzLmlzRGlzcG9zZWQgKSB7XHJcblxyXG4gICAgICAgIC8vIHNob3cgdXNlcidzIGxpbmUgb25seSBpbiBzdGF0ZXMgd2hlcmUgdGhlcmUgZ3Vlc3MgaXMgd3JvbmcuXHJcbiAgICAgICAgdGhpcy5ncmFwaE5vZGUuc2V0R3Vlc3NMaW5lVmlzaWJsZShcclxuICAgICAgICAgICFjaGFsbGVuZ2UuaXNDb3JyZWN0KCkgJiYgKCBwbGF5U3RhdGUgPT09IFBsYXlTdGF0ZS5UUllfQUdBSU4gfHwgcGxheVN0YXRlID09PSBQbGF5U3RhdGUuTkVYVCApICk7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogUGxvdCAoeDEseTEpIGZvciBhbnN3ZXIgd2hlbiB1c2VyIGdvdCB0aGUgY2hhbGxlbmdlIHdyb25nLlxyXG4gICAgICAgICAqIERvIG5vdCBwbG90ICh4MSx5MSkgZm9yIGd1ZXNzIGJlY2F1c2Ugbm9uZSBvZiB0aGUgMyBwb2ludHMgY29ycmVzcG9uZHMgdG8gKHgxLHkxKS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmdyYXBoTm9kZS5zZXRBbnN3ZXJQb2ludFZpc2libGUoIHBsYXlTdGF0ZSA9PT0gUGxheVN0YXRlLk5FWFQgJiYgIWNoYWxsZW5nZS5pc0NvcnJlY3QoKSApO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhOb2RlLnNldEd1ZXNzUG9pbnRWaXNpYmxlKCBmYWxzZSApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgbW9kZWwucGxheVN0YXRlUHJvcGVydHkubGluayggcGxheVN0YXRlT2JzZXJ2ZXIgKTsgLy8gdW5saW5rIGluIGRpc3Bvc2VcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VQbGFjZVRoZVBvaW50c05vZGUgPSAoKSA9PiB7XHJcbiAgICAgIG1vZGVsLnBsYXlTdGF0ZVByb3BlcnR5LnVubGluayggcGxheVN0YXRlT2JzZXJ2ZXIgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVBsYWNlVGhlUG9pbnRzTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgZ3JhcGggcG9ydGlvbiBvZiB0aGUgdmlldy5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgY3JlYXRlR3JhcGhOb2RlKCBjaGFsbGVuZ2U6IFBsYWNlVGhlUG9pbnRzICk6IENoYWxsZW5nZUdyYXBoTm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IEdyYXBoVGhyZWVQb2ludHNOb2RlKCBjaGFsbGVuZ2UgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdQbGFjZVRoZVBvaW50c05vZGUnLCBQbGFjZVRoZVBvaW50c05vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0MsU0FBUyxNQUFNLHVCQUF1QjtBQUM3QyxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBTzVELGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNGLGdCQUFnQixDQUFDO0VBSXhERyxXQUFXQSxDQUFFQyxTQUF5QixFQUFFQyxLQUFvQixFQUFFQyxhQUF5QixFQUFFQyxXQUE0QixFQUFHO0lBRTdILEtBQUssQ0FBRUgsU0FBUyxFQUFFQyxLQUFLLEVBQUVDLGFBQWEsRUFBRUMsV0FBWSxDQUFDO0lBRXJELE1BQU1DLGlCQUFpQixHQUFLQyxTQUFvQixJQUFNO01BRXBEO01BQ0EsSUFBSyxDQUFDLElBQUksQ0FBQ0MsVUFBVSxFQUFHO1FBRXRCO1FBQ0EsSUFBSSxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUNoQyxDQUFDUixTQUFTLENBQUNTLFNBQVMsQ0FBQyxDQUFDLEtBQU1KLFNBQVMsS0FBS1YsU0FBUyxDQUFDZSxTQUFTLElBQUlMLFNBQVMsS0FBS1YsU0FBUyxDQUFDZ0IsSUFBSSxDQUFHLENBQUM7O1FBRW5HO0FBQ1I7QUFDQTtBQUNBO1FBQ1EsSUFBSSxDQUFDSixTQUFTLENBQUNLLHFCQUFxQixDQUFFUCxTQUFTLEtBQUtWLFNBQVMsQ0FBQ2dCLElBQUksSUFBSSxDQUFDWCxTQUFTLENBQUNTLFNBQVMsQ0FBQyxDQUFFLENBQUM7UUFDOUYsSUFBSSxDQUFDRixTQUFTLENBQUNNLG9CQUFvQixDQUFFLEtBQU0sQ0FBQztNQUM5QztJQUNGLENBQUM7SUFDRFosS0FBSyxDQUFDYSxpQkFBaUIsQ0FBQ0MsSUFBSSxDQUFFWCxpQkFBa0IsQ0FBQyxDQUFDLENBQUM7O0lBRW5ELElBQUksQ0FBQ1kseUJBQXlCLEdBQUcsTUFBTTtNQUNyQ2YsS0FBSyxDQUFDYSxpQkFBaUIsQ0FBQ0csTUFBTSxDQUFFYixpQkFBa0IsQ0FBQztJQUNyRCxDQUFDO0VBQ0g7RUFFZ0JjLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNGLHlCQUF5QixDQUFDLENBQUM7SUFDaEMsS0FBSyxDQUFDRSxPQUFPLENBQUMsQ0FBQztFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JDLGVBQWVBLENBQUVuQixTQUF5QixFQUF1QjtJQUMvRSxPQUFPLElBQUlILG9CQUFvQixDQUFFRyxTQUFVLENBQUM7RUFDOUM7QUFDRjtBQUVBTixhQUFhLENBQUMwQixRQUFRLENBQUUsb0JBQW9CLEVBQUV0QixrQkFBbUIsQ0FBQyJ9