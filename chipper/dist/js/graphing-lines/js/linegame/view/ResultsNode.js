// Copyright 2013-2023, University of Colorado Boulder

/**
 * Portion of the scenegraph that corresponds to the 'results' game phase. (See GamePhase.RESULTS)
 * Displays a panel with the game results.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node } from '../../../../scenery/js/imports.js';
import LevelCompletedNode from '../../../../vegas/js/LevelCompletedNode.js';
import GLQueryParameters from '../../common/GLQueryParameters.js';
import graphingLines from '../../graphingLines.js';
import GamePhase from '../model/GamePhase.js';
import GLRewardNode from './GLRewardNode.js';

// Function that creates the Nodes that are passed to RewardNode.

export default class ResultsNode extends Node {
  // created on demand

  constructor(model, layoutBounds, audioPlayer, rewardNodeFunctions) {
    super();
    this.rewardNode = null;

    // show results when we enter this phase
    // unlink unnecessary because ResultsNode exists for the lifetime of the sim.
    model.gamePhaseProperty.link(gamePhase => {
      if (gamePhase === GamePhase.RESULTS) {
        // game reward, shown for perfect score (or with 'reward' query parameter)
        if (model.isPerfectScore() || GLQueryParameters.showReward) {
          audioPlayer.gameOverPerfectScore();
          const level = model.levelProperty.value;
          const rewardNodes = rewardNodeFunctions[level]();
          this.rewardNode = new GLRewardNode(rewardNodes);
          this.addChild(this.rewardNode);
        } else {
          audioPlayer.gameOverImperfectScore();
        }

        // game results
        this.addChild(new LevelCompletedNode(model.levelProperty.value + 1, model.scoreProperty.value, model.getPerfectScore(), model.getPerfectScore() / model.maxPointsPerChallenge,
        // number of stars in the progress indicator
        model.timerEnabledProperty.value, model.timer.elapsedTimeProperty.value, model.bestTimeProperties[model.levelProperty.value].value, model.isNewBestTime, () => model.setGamePhase(GamePhase.SETTINGS), {
          starDiameter: 45,
          centerX: layoutBounds.centerX,
          centerY: layoutBounds.centerY
        }));
      } else {
        this.removeAllChildren();
        if (this.rewardNode !== null) {
          this.rewardNode.dispose();
        }
        this.rewardNode = null;
      }
    });
  }
  step(dt) {
    if (this.rewardNode) {
      this.rewardNode.step(dt);
    }
  }
}
graphingLines.register('ResultsNode', ResultsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiTGV2ZWxDb21wbGV0ZWROb2RlIiwiR0xRdWVyeVBhcmFtZXRlcnMiLCJncmFwaGluZ0xpbmVzIiwiR2FtZVBoYXNlIiwiR0xSZXdhcmROb2RlIiwiUmVzdWx0c05vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwibGF5b3V0Qm91bmRzIiwiYXVkaW9QbGF5ZXIiLCJyZXdhcmROb2RlRnVuY3Rpb25zIiwicmV3YXJkTm9kZSIsImdhbWVQaGFzZVByb3BlcnR5IiwibGluayIsImdhbWVQaGFzZSIsIlJFU1VMVFMiLCJpc1BlcmZlY3RTY29yZSIsInNob3dSZXdhcmQiLCJnYW1lT3ZlclBlcmZlY3RTY29yZSIsImxldmVsIiwibGV2ZWxQcm9wZXJ0eSIsInZhbHVlIiwicmV3YXJkTm9kZXMiLCJhZGRDaGlsZCIsImdhbWVPdmVySW1wZXJmZWN0U2NvcmUiLCJzY29yZVByb3BlcnR5IiwiZ2V0UGVyZmVjdFNjb3JlIiwibWF4UG9pbnRzUGVyQ2hhbGxlbmdlIiwidGltZXJFbmFibGVkUHJvcGVydHkiLCJ0aW1lciIsImVsYXBzZWRUaW1lUHJvcGVydHkiLCJiZXN0VGltZVByb3BlcnRpZXMiLCJpc05ld0Jlc3RUaW1lIiwic2V0R2FtZVBoYXNlIiwiU0VUVElOR1MiLCJzdGFyRGlhbWV0ZXIiLCJjZW50ZXJYIiwiY2VudGVyWSIsInJlbW92ZUFsbENoaWxkcmVuIiwiZGlzcG9zZSIsInN0ZXAiLCJkdCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVzdWx0c05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUG9ydGlvbiBvZiB0aGUgc2NlbmVncmFwaCB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSAncmVzdWx0cycgZ2FtZSBwaGFzZS4gKFNlZSBHYW1lUGhhc2UuUkVTVUxUUylcclxuICogRGlzcGxheXMgYSBwYW5lbCB3aXRoIHRoZSBnYW1lIHJlc3VsdHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBMZXZlbENvbXBsZXRlZE5vZGUgZnJvbSAnLi4vLi4vLi4vLi4vdmVnYXMvanMvTGV2ZWxDb21wbGV0ZWROb2RlLmpzJztcclxuaW1wb3J0IEdMUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL2NvbW1vbi9HTFF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBncmFwaGluZ0xpbmVzIGZyb20gJy4uLy4uL2dyYXBoaW5nTGluZXMuanMnO1xyXG5pbXBvcnQgR2FtZVBoYXNlIGZyb20gJy4uL21vZGVsL0dhbWVQaGFzZS5qcyc7XHJcbmltcG9ydCBHTFJld2FyZE5vZGUgZnJvbSAnLi9HTFJld2FyZE5vZGUuanMnO1xyXG5pbXBvcnQgTGluZUdhbWVNb2RlbCBmcm9tICcuLi9tb2RlbC9MaW5lR2FtZU1vZGVsLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgR2FtZUF1ZGlvUGxheWVyIGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL0dhbWVBdWRpb1BsYXllci5qcyc7XHJcblxyXG4vLyBGdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlIE5vZGVzIHRoYXQgYXJlIHBhc3NlZCB0byBSZXdhcmROb2RlLlxyXG5leHBvcnQgdHlwZSBSZXdhcmROb2RlRnVuY3Rpb24gPSAoKSA9PiBOb2RlW107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN1bHRzTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwcml2YXRlIHJld2FyZE5vZGU6IEdMUmV3YXJkTm9kZSB8IG51bGw7IC8vIGNyZWF0ZWQgb24gZGVtYW5kXHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IExpbmVHYW1lTW9kZWwsIGxheW91dEJvdW5kczogQm91bmRzMiwgYXVkaW9QbGF5ZXI6IEdhbWVBdWRpb1BsYXllciwgcmV3YXJkTm9kZUZ1bmN0aW9uczogUmV3YXJkTm9kZUZ1bmN0aW9uW10gKSB7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnJld2FyZE5vZGUgPSBudWxsO1xyXG5cclxuICAgIC8vIHNob3cgcmVzdWx0cyB3aGVuIHdlIGVudGVyIHRoaXMgcGhhc2VcclxuICAgIC8vIHVubGluayB1bm5lY2Vzc2FyeSBiZWNhdXNlIFJlc3VsdHNOb2RlIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0uXHJcbiAgICBtb2RlbC5nYW1lUGhhc2VQcm9wZXJ0eS5saW5rKCBnYW1lUGhhc2UgPT4ge1xyXG4gICAgICBpZiAoIGdhbWVQaGFzZSA9PT0gR2FtZVBoYXNlLlJFU1VMVFMgKSB7XHJcblxyXG4gICAgICAgIC8vIGdhbWUgcmV3YXJkLCBzaG93biBmb3IgcGVyZmVjdCBzY29yZSAob3Igd2l0aCAncmV3YXJkJyBxdWVyeSBwYXJhbWV0ZXIpXHJcbiAgICAgICAgaWYgKCBtb2RlbC5pc1BlcmZlY3RTY29yZSgpIHx8IEdMUXVlcnlQYXJhbWV0ZXJzLnNob3dSZXdhcmQgKSB7XHJcblxyXG4gICAgICAgICAgYXVkaW9QbGF5ZXIuZ2FtZU92ZXJQZXJmZWN0U2NvcmUoKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBsZXZlbCA9IG1vZGVsLmxldmVsUHJvcGVydHkudmFsdWU7XHJcbiAgICAgICAgICBjb25zdCByZXdhcmROb2RlcyA9IHJld2FyZE5vZGVGdW5jdGlvbnNbIGxldmVsIF0oKTtcclxuICAgICAgICAgIHRoaXMucmV3YXJkTm9kZSA9IG5ldyBHTFJld2FyZE5vZGUoIHJld2FyZE5vZGVzICk7XHJcbiAgICAgICAgICB0aGlzLmFkZENoaWxkKCB0aGlzLnJld2FyZE5vZGUgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBhdWRpb1BsYXllci5nYW1lT3ZlckltcGVyZmVjdFNjb3JlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBnYW1lIHJlc3VsdHNcclxuICAgICAgICB0aGlzLmFkZENoaWxkKCBuZXcgTGV2ZWxDb21wbGV0ZWROb2RlKFxyXG4gICAgICAgICAgbW9kZWwubGV2ZWxQcm9wZXJ0eS52YWx1ZSArIDEsXHJcbiAgICAgICAgICBtb2RlbC5zY29yZVByb3BlcnR5LnZhbHVlLFxyXG4gICAgICAgICAgbW9kZWwuZ2V0UGVyZmVjdFNjb3JlKCksXHJcbiAgICAgICAgICBtb2RlbC5nZXRQZXJmZWN0U2NvcmUoKSAvIG1vZGVsLm1heFBvaW50c1BlckNoYWxsZW5nZSwgLy8gbnVtYmVyIG9mIHN0YXJzIGluIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3JcclxuICAgICAgICAgIG1vZGVsLnRpbWVyRW5hYmxlZFByb3BlcnR5LnZhbHVlLFxyXG4gICAgICAgICAgbW9kZWwudGltZXIuZWxhcHNlZFRpbWVQcm9wZXJ0eS52YWx1ZSxcclxuICAgICAgICAgIG1vZGVsLmJlc3RUaW1lUHJvcGVydGllc1sgbW9kZWwubGV2ZWxQcm9wZXJ0eS52YWx1ZSBdLnZhbHVlLFxyXG4gICAgICAgICAgbW9kZWwuaXNOZXdCZXN0VGltZSxcclxuICAgICAgICAgICgpID0+IG1vZGVsLnNldEdhbWVQaGFzZSggR2FtZVBoYXNlLlNFVFRJTkdTICksXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0YXJEaWFtZXRlcjogNDUsXHJcbiAgICAgICAgICAgIGNlbnRlclg6IGxheW91dEJvdW5kcy5jZW50ZXJYLFxyXG4gICAgICAgICAgICBjZW50ZXJZOiBsYXlvdXRCb3VuZHMuY2VudGVyWVxyXG4gICAgICAgICAgfSApICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxDaGlsZHJlbigpO1xyXG4gICAgICAgIGlmICggdGhpcy5yZXdhcmROb2RlICE9PSBudWxsICkge1xyXG4gICAgICAgICAgdGhpcy5yZXdhcmROb2RlLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXdhcmROb2RlID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0ZXAoIGR0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMucmV3YXJkTm9kZSApIHtcclxuICAgICAgdGhpcy5yZXdhcmROb2RlLnN0ZXAoIGR0ICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5ncmFwaGluZ0xpbmVzLnJlZ2lzdGVyKCAnUmVzdWx0c05vZGUnLCBSZXN1bHRzTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0Msa0JBQWtCLE1BQU0sNENBQTRDO0FBQzNFLE9BQU9DLGlCQUFpQixNQUFNLG1DQUFtQztBQUNqRSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLFNBQVMsTUFBTSx1QkFBdUI7QUFDN0MsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjs7QUFLNUM7O0FBR0EsZUFBZSxNQUFNQyxXQUFXLFNBQVNOLElBQUksQ0FBQztFQUVIOztFQUVsQ08sV0FBV0EsQ0FBRUMsS0FBb0IsRUFBRUMsWUFBcUIsRUFBRUMsV0FBNEIsRUFBRUMsbUJBQXlDLEVBQUc7SUFFekksS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJOztJQUV0QjtJQUNBO0lBQ0FKLEtBQUssQ0FBQ0ssaUJBQWlCLENBQUNDLElBQUksQ0FBRUMsU0FBUyxJQUFJO01BQ3pDLElBQUtBLFNBQVMsS0FBS1gsU0FBUyxDQUFDWSxPQUFPLEVBQUc7UUFFckM7UUFDQSxJQUFLUixLQUFLLENBQUNTLGNBQWMsQ0FBQyxDQUFDLElBQUlmLGlCQUFpQixDQUFDZ0IsVUFBVSxFQUFHO1VBRTVEUixXQUFXLENBQUNTLG9CQUFvQixDQUFDLENBQUM7VUFFbEMsTUFBTUMsS0FBSyxHQUFHWixLQUFLLENBQUNhLGFBQWEsQ0FBQ0MsS0FBSztVQUN2QyxNQUFNQyxXQUFXLEdBQUdaLG1CQUFtQixDQUFFUyxLQUFLLENBQUUsQ0FBQyxDQUFDO1VBQ2xELElBQUksQ0FBQ1IsVUFBVSxHQUFHLElBQUlQLFlBQVksQ0FBRWtCLFdBQVksQ0FBQztVQUNqRCxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJLENBQUNaLFVBQVcsQ0FBQztRQUNsQyxDQUFDLE1BQ0k7VUFDSEYsV0FBVyxDQUFDZSxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3RDOztRQUVBO1FBQ0EsSUFBSSxDQUFDRCxRQUFRLENBQUUsSUFBSXZCLGtCQUFrQixDQUNuQ08sS0FBSyxDQUFDYSxhQUFhLENBQUNDLEtBQUssR0FBRyxDQUFDLEVBQzdCZCxLQUFLLENBQUNrQixhQUFhLENBQUNKLEtBQUssRUFDekJkLEtBQUssQ0FBQ21CLGVBQWUsQ0FBQyxDQUFDLEVBQ3ZCbkIsS0FBSyxDQUFDbUIsZUFBZSxDQUFDLENBQUMsR0FBR25CLEtBQUssQ0FBQ29CLHFCQUFxQjtRQUFFO1FBQ3ZEcEIsS0FBSyxDQUFDcUIsb0JBQW9CLENBQUNQLEtBQUssRUFDaENkLEtBQUssQ0FBQ3NCLEtBQUssQ0FBQ0MsbUJBQW1CLENBQUNULEtBQUssRUFDckNkLEtBQUssQ0FBQ3dCLGtCQUFrQixDQUFFeEIsS0FBSyxDQUFDYSxhQUFhLENBQUNDLEtBQUssQ0FBRSxDQUFDQSxLQUFLLEVBQzNEZCxLQUFLLENBQUN5QixhQUFhLEVBQ25CLE1BQU16QixLQUFLLENBQUMwQixZQUFZLENBQUU5QixTQUFTLENBQUMrQixRQUFTLENBQUMsRUFDOUM7VUFDRUMsWUFBWSxFQUFFLEVBQUU7VUFDaEJDLE9BQU8sRUFBRTVCLFlBQVksQ0FBQzRCLE9BQU87VUFDN0JDLE9BQU8sRUFBRTdCLFlBQVksQ0FBQzZCO1FBQ3hCLENBQUUsQ0FBRSxDQUFDO01BQ1QsQ0FBQyxNQUNJO1FBQ0gsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3hCLElBQUssSUFBSSxDQUFDM0IsVUFBVSxLQUFLLElBQUksRUFBRztVQUM5QixJQUFJLENBQUNBLFVBQVUsQ0FBQzRCLE9BQU8sQ0FBQyxDQUFDO1FBQzNCO1FBQ0EsSUFBSSxDQUFDNUIsVUFBVSxHQUFHLElBQUk7TUFDeEI7SUFDRixDQUFFLENBQUM7RUFDTDtFQUVPNkIsSUFBSUEsQ0FBRUMsRUFBVSxFQUFTO0lBQzlCLElBQUssSUFBSSxDQUFDOUIsVUFBVSxFQUFHO01BQ3JCLElBQUksQ0FBQ0EsVUFBVSxDQUFDNkIsSUFBSSxDQUFFQyxFQUFHLENBQUM7SUFDNUI7RUFDRjtBQUNGO0FBRUF2QyxhQUFhLENBQUN3QyxRQUFRLENBQUUsYUFBYSxFQUFFckMsV0FBWSxDQUFDIn0=