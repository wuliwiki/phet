// Copyright 2013-2023, University of Colorado Boulder

/**
 * Graph that provides direct manipulation of a line in slope-intercept form.
 * Adds manipulators for slope and intercept to the base class functionality.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import LineFormsGraphNode from '../../common/view/LineFormsGraphNode.js';
import SlopeManipulator from '../../common/view/manipulator/SlopeManipulator.js';
import YInterceptManipulator from '../../common/view/manipulator/YInterceptManipulator.js';
import graphingLines from '../../graphingLines.js';
import SlopeInterceptEquationNode from './SlopeInterceptEquationNode.js';
export default class SlopeInterceptGraphNode extends LineFormsGraphNode {
  constructor(model, viewProperties) {
    super(model, viewProperties, SlopeInterceptEquationNode.createDynamicLabel);
    const manipulatorRadius = model.modelViewTransform.modelToViewDeltaX(model.manipulatorRadius);

    // slope manipulator
    const slopeManipulator = new SlopeManipulator(manipulatorRadius, model.interactiveLineProperty, model.riseRangeProperty, model.runRangeProperty, model.modelViewTransform);

    // intercept manipulator
    const yInterceptManipulator = new YInterceptManipulator(manipulatorRadius, model.interactiveLineProperty, model.y1RangeProperty, model.modelViewTransform);

    // rendering order
    this.addChild(slopeManipulator);
    this.addChild(yInterceptManipulator);

    // visibility of manipulators
    // unlink unnecessary because SlopeInterceptGraphNode exists for the lifetime of the sim.
    viewProperties.linesVisibleProperty.link(linesVisible => {
      slopeManipulator.visible = yInterceptManipulator.visible = linesVisible;
    });
  }
}
graphingLines.register('SlopeInterceptGraphNode', SlopeInterceptGraphNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lRm9ybXNHcmFwaE5vZGUiLCJTbG9wZU1hbmlwdWxhdG9yIiwiWUludGVyY2VwdE1hbmlwdWxhdG9yIiwiZ3JhcGhpbmdMaW5lcyIsIlNsb3BlSW50ZXJjZXB0RXF1YXRpb25Ob2RlIiwiU2xvcGVJbnRlcmNlcHRHcmFwaE5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidmlld1Byb3BlcnRpZXMiLCJjcmVhdGVEeW5hbWljTGFiZWwiLCJtYW5pcHVsYXRvclJhZGl1cyIsIm1vZGVsVmlld1RyYW5zZm9ybSIsIm1vZGVsVG9WaWV3RGVsdGFYIiwic2xvcGVNYW5pcHVsYXRvciIsImludGVyYWN0aXZlTGluZVByb3BlcnR5IiwicmlzZVJhbmdlUHJvcGVydHkiLCJydW5SYW5nZVByb3BlcnR5IiwieUludGVyY2VwdE1hbmlwdWxhdG9yIiwieTFSYW5nZVByb3BlcnR5IiwiYWRkQ2hpbGQiLCJsaW5lc1Zpc2libGVQcm9wZXJ0eSIsImxpbmsiLCJsaW5lc1Zpc2libGUiLCJ2aXNpYmxlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTbG9wZUludGVyY2VwdEdyYXBoTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHcmFwaCB0aGF0IHByb3ZpZGVzIGRpcmVjdCBtYW5pcHVsYXRpb24gb2YgYSBsaW5lIGluIHNsb3BlLWludGVyY2VwdCBmb3JtLlxyXG4gKiBBZGRzIG1hbmlwdWxhdG9ycyBmb3Igc2xvcGUgYW5kIGludGVyY2VwdCB0byB0aGUgYmFzZSBjbGFzcyBmdW5jdGlvbmFsaXR5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBMaW5lRm9ybXNHcmFwaE5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTGluZUZvcm1zR3JhcGhOb2RlLmpzJztcclxuaW1wb3J0IExpbmVGb3Jtc1ZpZXdQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0xpbmVGb3Jtc1ZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IFNsb3BlTWFuaXB1bGF0b3IgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvbWFuaXB1bGF0b3IvU2xvcGVNYW5pcHVsYXRvci5qcyc7XHJcbmltcG9ydCBZSW50ZXJjZXB0TWFuaXB1bGF0b3IgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvbWFuaXB1bGF0b3IvWUludGVyY2VwdE1hbmlwdWxhdG9yLmpzJztcclxuaW1wb3J0IGdyYXBoaW5nTGluZXMgZnJvbSAnLi4vLi4vZ3JhcGhpbmdMaW5lcy5qcyc7XHJcbmltcG9ydCBTbG9wZUludGVyY2VwdE1vZGVsIGZyb20gJy4uL21vZGVsL1Nsb3BlSW50ZXJjZXB0TW9kZWwuanMnO1xyXG5pbXBvcnQgU2xvcGVJbnRlcmNlcHRFcXVhdGlvbk5vZGUgZnJvbSAnLi9TbG9wZUludGVyY2VwdEVxdWF0aW9uTm9kZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbG9wZUludGVyY2VwdEdyYXBoTm9kZSBleHRlbmRzIExpbmVGb3Jtc0dyYXBoTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IFNsb3BlSW50ZXJjZXB0TW9kZWwsIHZpZXdQcm9wZXJ0aWVzOiBMaW5lRm9ybXNWaWV3UHJvcGVydGllcyApIHtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHZpZXdQcm9wZXJ0aWVzLCBTbG9wZUludGVyY2VwdEVxdWF0aW9uTm9kZS5jcmVhdGVEeW5hbWljTGFiZWwgKTtcclxuXHJcbiAgICBjb25zdCBtYW5pcHVsYXRvclJhZGl1cyA9IG1vZGVsLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggbW9kZWwubWFuaXB1bGF0b3JSYWRpdXMgKTtcclxuXHJcbiAgICAvLyBzbG9wZSBtYW5pcHVsYXRvclxyXG4gICAgY29uc3Qgc2xvcGVNYW5pcHVsYXRvciA9IG5ldyBTbG9wZU1hbmlwdWxhdG9yKFxyXG4gICAgICBtYW5pcHVsYXRvclJhZGl1cywgbW9kZWwuaW50ZXJhY3RpdmVMaW5lUHJvcGVydHksIG1vZGVsLnJpc2VSYW5nZVByb3BlcnR5LCBtb2RlbC5ydW5SYW5nZVByb3BlcnR5LCBtb2RlbC5tb2RlbFZpZXdUcmFuc2Zvcm0gKTtcclxuXHJcbiAgICAvLyBpbnRlcmNlcHQgbWFuaXB1bGF0b3JcclxuICAgIGNvbnN0IHlJbnRlcmNlcHRNYW5pcHVsYXRvciA9IG5ldyBZSW50ZXJjZXB0TWFuaXB1bGF0b3IoXHJcbiAgICAgIG1hbmlwdWxhdG9yUmFkaXVzLCBtb2RlbC5pbnRlcmFjdGl2ZUxpbmVQcm9wZXJ0eSwgbW9kZWwueTFSYW5nZVByb3BlcnR5LCBtb2RlbC5tb2RlbFZpZXdUcmFuc2Zvcm0gKTtcclxuXHJcbiAgICAvLyByZW5kZXJpbmcgb3JkZXJcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHNsb3BlTWFuaXB1bGF0b3IgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHlJbnRlcmNlcHRNYW5pcHVsYXRvciApO1xyXG5cclxuICAgIC8vIHZpc2liaWxpdHkgb2YgbWFuaXB1bGF0b3JzXHJcbiAgICAvLyB1bmxpbmsgdW5uZWNlc3NhcnkgYmVjYXVzZSBTbG9wZUludGVyY2VwdEdyYXBoTm9kZSBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltLlxyXG4gICAgdmlld1Byb3BlcnRpZXMubGluZXNWaXNpYmxlUHJvcGVydHkubGluayggbGluZXNWaXNpYmxlID0+IHtcclxuICAgICAgc2xvcGVNYW5pcHVsYXRvci52aXNpYmxlID0geUludGVyY2VwdE1hbmlwdWxhdG9yLnZpc2libGUgPSBsaW5lc1Zpc2libGU7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmFwaGluZ0xpbmVzLnJlZ2lzdGVyKCAnU2xvcGVJbnRlcmNlcHRHcmFwaE5vZGUnLCBTbG9wZUludGVyY2VwdEdyYXBoTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGtCQUFrQixNQUFNLHlDQUF5QztBQUV4RSxPQUFPQyxnQkFBZ0IsTUFBTSxtREFBbUQ7QUFDaEYsT0FBT0MscUJBQXFCLE1BQU0sd0RBQXdEO0FBQzFGLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFFbEQsT0FBT0MsMEJBQTBCLE1BQU0saUNBQWlDO0FBRXhFLGVBQWUsTUFBTUMsdUJBQXVCLFNBQVNMLGtCQUFrQixDQUFDO0VBRS9ETSxXQUFXQSxDQUFFQyxLQUEwQixFQUFFQyxjQUF1QyxFQUFHO0lBRXhGLEtBQUssQ0FBRUQsS0FBSyxFQUFFQyxjQUFjLEVBQUVKLDBCQUEwQixDQUFDSyxrQkFBbUIsQ0FBQztJQUU3RSxNQUFNQyxpQkFBaUIsR0FBR0gsS0FBSyxDQUFDSSxrQkFBa0IsQ0FBQ0MsaUJBQWlCLENBQUVMLEtBQUssQ0FBQ0csaUJBQWtCLENBQUM7O0lBRS9GO0lBQ0EsTUFBTUcsZ0JBQWdCLEdBQUcsSUFBSVosZ0JBQWdCLENBQzNDUyxpQkFBaUIsRUFBRUgsS0FBSyxDQUFDTyx1QkFBdUIsRUFBRVAsS0FBSyxDQUFDUSxpQkFBaUIsRUFBRVIsS0FBSyxDQUFDUyxnQkFBZ0IsRUFBRVQsS0FBSyxDQUFDSSxrQkFBbUIsQ0FBQzs7SUFFL0g7SUFDQSxNQUFNTSxxQkFBcUIsR0FBRyxJQUFJZixxQkFBcUIsQ0FDckRRLGlCQUFpQixFQUFFSCxLQUFLLENBQUNPLHVCQUF1QixFQUFFUCxLQUFLLENBQUNXLGVBQWUsRUFBRVgsS0FBSyxDQUFDSSxrQkFBbUIsQ0FBQzs7SUFFckc7SUFDQSxJQUFJLENBQUNRLFFBQVEsQ0FBRU4sZ0JBQWlCLENBQUM7SUFDakMsSUFBSSxDQUFDTSxRQUFRLENBQUVGLHFCQUFzQixDQUFDOztJQUV0QztJQUNBO0lBQ0FULGNBQWMsQ0FBQ1ksb0JBQW9CLENBQUNDLElBQUksQ0FBRUMsWUFBWSxJQUFJO01BQ3hEVCxnQkFBZ0IsQ0FBQ1UsT0FBTyxHQUFHTixxQkFBcUIsQ0FBQ00sT0FBTyxHQUFHRCxZQUFZO0lBQ3pFLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQW5CLGFBQWEsQ0FBQ3FCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRW5CLHVCQUF3QixDQUFDIn0=