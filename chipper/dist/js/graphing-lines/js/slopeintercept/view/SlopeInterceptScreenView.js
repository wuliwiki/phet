// Copyright 2013-2023, University of Colorado Boulder

/**
 * View for the 'Slope-Intercept' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import GraphControlPanel from '../../common/view/GraphControlPanel.js';
import LineFormsScreenView from '../../common/view/LineFormsScreenView.js';
import LineFormsViewProperties from '../../common/view/LineFormsViewProperties.js';
import graphingLines from '../../graphingLines.js';
import SlopeInterceptGraphNode from './SlopeInterceptGraphNode.js';
import SlopeInterceptEquationAccordionBox from './SlopeInterceptEquationAccordionBox.js';
export default class SlopeInterceptScreenView extends LineFormsScreenView {
  constructor(model, tandem) {
    const viewProperties = new LineFormsViewProperties();
    const graphNode = new SlopeInterceptGraphNode(model, viewProperties);
    const graphControlPanel = new GraphControlPanel(viewProperties.gridVisibleProperty, viewProperties.slopeToolVisibleProperty, model.standardLines);
    const equationAccordionBox = new SlopeInterceptEquationAccordionBox(model, viewProperties.interactiveEquationVisibleProperty, tandem.createTandem('equationAccordionBox'));
    super(model, viewProperties, graphNode, graphControlPanel, equationAccordionBox, tandem);
  }
}
graphingLines.register('SlopeInterceptScreenView', SlopeInterceptScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHcmFwaENvbnRyb2xQYW5lbCIsIkxpbmVGb3Jtc1NjcmVlblZpZXciLCJMaW5lRm9ybXNWaWV3UHJvcGVydGllcyIsImdyYXBoaW5nTGluZXMiLCJTbG9wZUludGVyY2VwdEdyYXBoTm9kZSIsIlNsb3BlSW50ZXJjZXB0RXF1YXRpb25BY2NvcmRpb25Cb3giLCJTbG9wZUludGVyY2VwdFNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidGFuZGVtIiwidmlld1Byb3BlcnRpZXMiLCJncmFwaE5vZGUiLCJncmFwaENvbnRyb2xQYW5lbCIsImdyaWRWaXNpYmxlUHJvcGVydHkiLCJzbG9wZVRvb2xWaXNpYmxlUHJvcGVydHkiLCJzdGFuZGFyZExpbmVzIiwiZXF1YXRpb25BY2NvcmRpb25Cb3giLCJpbnRlcmFjdGl2ZUVxdWF0aW9uVmlzaWJsZVByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTbG9wZUludGVyY2VwdFNjcmVlblZpZXcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgdGhlICdTbG9wZS1JbnRlcmNlcHQnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgR3JhcGhDb250cm9sUGFuZWwgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvR3JhcGhDb250cm9sUGFuZWwuanMnO1xyXG5pbXBvcnQgTGluZUZvcm1zU2NyZWVuVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9MaW5lRm9ybXNTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IExpbmVGb3Jtc1ZpZXdQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0xpbmVGb3Jtc1ZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IGdyYXBoaW5nTGluZXMgZnJvbSAnLi4vLi4vZ3JhcGhpbmdMaW5lcy5qcyc7XHJcbmltcG9ydCBTbG9wZUludGVyY2VwdE1vZGVsIGZyb20gJy4uL21vZGVsL1Nsb3BlSW50ZXJjZXB0TW9kZWwuanMnO1xyXG5pbXBvcnQgU2xvcGVJbnRlcmNlcHRHcmFwaE5vZGUgZnJvbSAnLi9TbG9wZUludGVyY2VwdEdyYXBoTm9kZS5qcyc7XHJcbmltcG9ydCBTbG9wZUludGVyY2VwdEVxdWF0aW9uQWNjb3JkaW9uQm94IGZyb20gJy4vU2xvcGVJbnRlcmNlcHRFcXVhdGlvbkFjY29yZGlvbkJveC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbG9wZUludGVyY2VwdFNjcmVlblZpZXcgZXh0ZW5kcyBMaW5lRm9ybXNTY3JlZW5WaWV3IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbDogU2xvcGVJbnRlcmNlcHRNb2RlbCwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3Qgdmlld1Byb3BlcnRpZXMgPSBuZXcgTGluZUZvcm1zVmlld1Byb3BlcnRpZXMoKTtcclxuXHJcbiAgICBjb25zdCBncmFwaE5vZGUgPSBuZXcgU2xvcGVJbnRlcmNlcHRHcmFwaE5vZGUoIG1vZGVsLCB2aWV3UHJvcGVydGllcyApO1xyXG5cclxuICAgIGNvbnN0IGdyYXBoQ29udHJvbFBhbmVsID0gbmV3IEdyYXBoQ29udHJvbFBhbmVsKCB2aWV3UHJvcGVydGllcy5ncmlkVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICB2aWV3UHJvcGVydGllcy5zbG9wZVRvb2xWaXNpYmxlUHJvcGVydHksIG1vZGVsLnN0YW5kYXJkTGluZXMgKTtcclxuXHJcbiAgICBjb25zdCBlcXVhdGlvbkFjY29yZGlvbkJveCA9IG5ldyBTbG9wZUludGVyY2VwdEVxdWF0aW9uQWNjb3JkaW9uQm94KCBtb2RlbCxcclxuICAgICAgdmlld1Byb3BlcnRpZXMuaW50ZXJhY3RpdmVFcXVhdGlvblZpc2libGVQcm9wZXJ0eSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2VxdWF0aW9uQWNjb3JkaW9uQm94JyApICk7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCB2aWV3UHJvcGVydGllcywgZ3JhcGhOb2RlLCBncmFwaENvbnRyb2xQYW5lbCwgZXF1YXRpb25BY2NvcmRpb25Cb3gsIHRhbmRlbSApO1xyXG4gIH1cclxufVxyXG5cclxuZ3JhcGhpbmdMaW5lcy5yZWdpc3RlciggJ1Nsb3BlSW50ZXJjZXB0U2NyZWVuVmlldycsIFNsb3BlSW50ZXJjZXB0U2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxpQkFBaUIsTUFBTSx3Q0FBd0M7QUFDdEUsT0FBT0MsbUJBQW1CLE1BQU0sMENBQTBDO0FBQzFFLE9BQU9DLHVCQUF1QixNQUFNLDhDQUE4QztBQUNsRixPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBRWxELE9BQU9DLHVCQUF1QixNQUFNLDhCQUE4QjtBQUNsRSxPQUFPQyxrQ0FBa0MsTUFBTSx5Q0FBeUM7QUFFeEYsZUFBZSxNQUFNQyx3QkFBd0IsU0FBU0wsbUJBQW1CLENBQUM7RUFFakVNLFdBQVdBLENBQUVDLEtBQTBCLEVBQUVDLE1BQWMsRUFBRztJQUUvRCxNQUFNQyxjQUFjLEdBQUcsSUFBSVIsdUJBQXVCLENBQUMsQ0FBQztJQUVwRCxNQUFNUyxTQUFTLEdBQUcsSUFBSVAsdUJBQXVCLENBQUVJLEtBQUssRUFBRUUsY0FBZSxDQUFDO0lBRXRFLE1BQU1FLGlCQUFpQixHQUFHLElBQUlaLGlCQUFpQixDQUFFVSxjQUFjLENBQUNHLG1CQUFtQixFQUNqRkgsY0FBYyxDQUFDSSx3QkFBd0IsRUFBRU4sS0FBSyxDQUFDTyxhQUFjLENBQUM7SUFFaEUsTUFBTUMsb0JBQW9CLEdBQUcsSUFBSVgsa0NBQWtDLENBQUVHLEtBQUssRUFDeEVFLGNBQWMsQ0FBQ08sa0NBQWtDLEVBQUVSLE1BQU0sQ0FBQ1MsWUFBWSxDQUFFLHNCQUF1QixDQUFFLENBQUM7SUFFcEcsS0FBSyxDQUFFVixLQUFLLEVBQUVFLGNBQWMsRUFBRUMsU0FBUyxFQUFFQyxpQkFBaUIsRUFBRUksb0JBQW9CLEVBQUVQLE1BQU8sQ0FBQztFQUM1RjtBQUNGO0FBRUFOLGFBQWEsQ0FBQ2dCLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRWIsd0JBQXlCLENBQUMifQ==