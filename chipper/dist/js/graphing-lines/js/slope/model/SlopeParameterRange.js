// Copyright 2017-2023, University of Colorado Boulder

/**
 * Methods for computing ranges of line parameters for slope form,
 * so that points are within the visible range of the graph and points do not overlap.
 *
 * Slope form is: m = (y2 - y1) / (x2 - x1) = rise/run
 *
 * This is similar in purpose to PointSlopeParameterRange, and was added to address
 * https://github.com/phetsims/graphing-lines/issues/75.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import graphingLines from '../../graphingLines.js';
export default class SlopeParameterRange {
  // Range for the x component of the point (x1,y1)
  x1(line, graph) {
    const min = line.rise === 0 && line.x1 + line.run === graph.xRange.min ? graph.xRange.min + 1 : graph.xRange.min;
    const max = line.rise === 0 && line.x1 + line.run === graph.xRange.max ? graph.xRange.max - 1 : graph.xRange.max;
    return new Range(min, max);
  }

  // Range for the y component of the point (x1,y1)
  y1(line, graph) {
    const min = line.run === 0 && line.y1 + line.rise === graph.yRange.min ? graph.yRange.min + 1 : graph.yRange.min;
    const max = line.run === 0 && line.y1 + line.rise === graph.yRange.max ? graph.yRange.max - 1 : graph.yRange.max;
    return new Range(min, max);
  }

  // Range for the x component of the point (x2,y2)
  x2(line, graph) {
    const min = line.rise === 0 && line.x1 === graph.xRange.min ? graph.xRange.min + 1 : graph.xRange.min;
    const max = line.rise === 0 && line.x1 === graph.xRange.max ? graph.xRange.max - 1 : graph.xRange.max;
    return new Range(min, max);
  }

  // Range for the y component of the point (x2,y2)
  y2(line, graph) {
    const min = line.run === 0 && line.y1 === graph.yRange.min ? graph.yRange.min + 1 : graph.yRange.min;
    const max = line.run === 0 && line.y1 === graph.yRange.max ? graph.yRange.max - 1 : graph.yRange.max;
    return new Range(min, max);
  }
}
graphingLines.register('SlopeParameterRange', SlopeParameterRange);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsImdyYXBoaW5nTGluZXMiLCJTbG9wZVBhcmFtZXRlclJhbmdlIiwieDEiLCJsaW5lIiwiZ3JhcGgiLCJtaW4iLCJyaXNlIiwicnVuIiwieFJhbmdlIiwibWF4IiwieTEiLCJ5UmFuZ2UiLCJ4MiIsInkyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTbG9wZVBhcmFtZXRlclJhbmdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1ldGhvZHMgZm9yIGNvbXB1dGluZyByYW5nZXMgb2YgbGluZSBwYXJhbWV0ZXJzIGZvciBzbG9wZSBmb3JtLFxyXG4gKiBzbyB0aGF0IHBvaW50cyBhcmUgd2l0aGluIHRoZSB2aXNpYmxlIHJhbmdlIG9mIHRoZSBncmFwaCBhbmQgcG9pbnRzIGRvIG5vdCBvdmVybGFwLlxyXG4gKlxyXG4gKiBTbG9wZSBmb3JtIGlzOiBtID0gKHkyIC0geTEpIC8gKHgyIC0geDEpID0gcmlzZS9ydW5cclxuICpcclxuICogVGhpcyBpcyBzaW1pbGFyIGluIHB1cnBvc2UgdG8gUG9pbnRTbG9wZVBhcmFtZXRlclJhbmdlLCBhbmQgd2FzIGFkZGVkIHRvIGFkZHJlc3NcclxuICogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2dyYXBoaW5nLWxpbmVzL2lzc3Vlcy83NS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IEdyYXBoIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9HcmFwaC5qcyc7XHJcbmltcG9ydCBMaW5lIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9MaW5lLmpzJztcclxuaW1wb3J0IGdyYXBoaW5nTGluZXMgZnJvbSAnLi4vLi4vZ3JhcGhpbmdMaW5lcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbG9wZVBhcmFtZXRlclJhbmdlIHtcclxuXHJcbiAgLy8gUmFuZ2UgZm9yIHRoZSB4IGNvbXBvbmVudCBvZiB0aGUgcG9pbnQgKHgxLHkxKVxyXG4gIHB1YmxpYyB4MSggbGluZTogTGluZSwgZ3JhcGg6IEdyYXBoICk6IFJhbmdlIHtcclxuICAgIGNvbnN0IG1pbiA9ICggbGluZS5yaXNlID09PSAwICYmICggbGluZS54MSArIGxpbmUucnVuID09PSBncmFwaC54UmFuZ2UubWluICkgKSA/ICggZ3JhcGgueFJhbmdlLm1pbiArIDEgKSA6IGdyYXBoLnhSYW5nZS5taW47XHJcbiAgICBjb25zdCBtYXggPSAoIGxpbmUucmlzZSA9PT0gMCAmJiAoIGxpbmUueDEgKyBsaW5lLnJ1biA9PT0gZ3JhcGgueFJhbmdlLm1heCApICkgPyAoIGdyYXBoLnhSYW5nZS5tYXggLSAxICkgOiBncmFwaC54UmFuZ2UubWF4O1xyXG4gICAgcmV0dXJuIG5ldyBSYW5nZSggbWluLCBtYXggKTtcclxuICB9XHJcblxyXG4gIC8vIFJhbmdlIGZvciB0aGUgeSBjb21wb25lbnQgb2YgdGhlIHBvaW50ICh4MSx5MSlcclxuICBwdWJsaWMgeTEoIGxpbmU6IExpbmUsIGdyYXBoOiBHcmFwaCApOiBSYW5nZSB7XHJcbiAgICBjb25zdCBtaW4gPSAoIGxpbmUucnVuID09PSAwICYmICggbGluZS55MSArIGxpbmUucmlzZSA9PT0gZ3JhcGgueVJhbmdlLm1pbiApICkgPyAoIGdyYXBoLnlSYW5nZS5taW4gKyAxICkgOiBncmFwaC55UmFuZ2UubWluO1xyXG4gICAgY29uc3QgbWF4ID0gKCBsaW5lLnJ1biA9PT0gMCAmJiAoIGxpbmUueTEgKyBsaW5lLnJpc2UgPT09IGdyYXBoLnlSYW5nZS5tYXggKSApID8gKCBncmFwaC55UmFuZ2UubWF4IC0gMSApIDogZ3JhcGgueVJhbmdlLm1heDtcclxuICAgIHJldHVybiBuZXcgUmFuZ2UoIG1pbiwgbWF4ICk7XHJcbiAgfVxyXG5cclxuICAvLyBSYW5nZSBmb3IgdGhlIHggY29tcG9uZW50IG9mIHRoZSBwb2ludCAoeDIseTIpXHJcbiAgcHVibGljIHgyKCBsaW5lOiBMaW5lLCBncmFwaDogR3JhcGggKTogUmFuZ2Uge1xyXG4gICAgY29uc3QgbWluID0gKCBsaW5lLnJpc2UgPT09IDAgJiYgbGluZS54MSA9PT0gZ3JhcGgueFJhbmdlLm1pbiApID8gKCBncmFwaC54UmFuZ2UubWluICsgMSApIDogZ3JhcGgueFJhbmdlLm1pbjtcclxuICAgIGNvbnN0IG1heCA9ICggbGluZS5yaXNlID09PSAwICYmIGxpbmUueDEgPT09IGdyYXBoLnhSYW5nZS5tYXggKSA/ICggZ3JhcGgueFJhbmdlLm1heCAtIDEgKSA6IGdyYXBoLnhSYW5nZS5tYXg7XHJcbiAgICByZXR1cm4gbmV3IFJhbmdlKCBtaW4sIG1heCApO1xyXG4gIH1cclxuXHJcbiAgLy8gUmFuZ2UgZm9yIHRoZSB5IGNvbXBvbmVudCBvZiB0aGUgcG9pbnQgKHgyLHkyKVxyXG4gIHB1YmxpYyB5MiggbGluZTogTGluZSwgZ3JhcGg6IEdyYXBoICk6IFJhbmdlIHtcclxuICAgIGNvbnN0IG1pbiA9ICggbGluZS5ydW4gPT09IDAgJiYgbGluZS55MSA9PT0gZ3JhcGgueVJhbmdlLm1pbiApID8gKCBncmFwaC55UmFuZ2UubWluICsgMSApIDogZ3JhcGgueVJhbmdlLm1pbjtcclxuICAgIGNvbnN0IG1heCA9ICggbGluZS5ydW4gPT09IDAgJiYgbGluZS55MSA9PT0gZ3JhcGgueVJhbmdlLm1heCApID8gKCBncmFwaC55UmFuZ2UubWF4IC0gMSApIDogZ3JhcGgueVJhbmdlLm1heDtcclxuICAgIHJldHVybiBuZXcgUmFuZ2UoIG1pbiwgbWF4ICk7XHJcbiAgfVxyXG59XHJcblxyXG5ncmFwaGluZ0xpbmVzLnJlZ2lzdGVyKCAnU2xvcGVQYXJhbWV0ZXJSYW5nZScsIFNsb3BlUGFyYW1ldGVyUmFuZ2UgKTsiXSwibWFwcGluZ3MiOiJBQUFB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