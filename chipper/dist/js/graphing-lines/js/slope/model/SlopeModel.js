// Copyright 2013-2023, University of Colorado Boulder

/**
 * Model for the 'Slope' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import GLColors from '../../common/GLColors.js';
import Line from '../../common/model/Line.js';
import LineFormsModel from '../../common/model/LineFormsModel.js';
import graphingLines from '../../graphingLines.js';
import SlopeParameterRange from './SlopeParameterRange.js';
export default class SlopeModel extends LineFormsModel {
  // Ranges of the points that define a line

  constructor(tandem) {
    super(new Line(1, 2, 3, 4, GLColors.INTERACTIVE_LINE), tandem);
    this.x1RangeProperty = new Property(this.graph.xRange);
    this.y1RangeProperty = new Property(this.graph.yRange);
    this.x2RangeProperty = new Property(this.graph.xRange);
    this.y2RangeProperty = new Property(this.graph.yRange);

    // Dynamically adjust ranges so that variables are constrained to the bounds of the graph.
    // unlink unnecessary because SlopeModel exists for the lifetime of the sim.
    const parameterRange = new SlopeParameterRange();
    this.interactiveLineProperty.link(line => {
      this.x1RangeProperty.value = parameterRange.x1(line, this.graph);
      this.y1RangeProperty.value = parameterRange.y1(line, this.graph);
      this.x2RangeProperty.value = parameterRange.x2(line, this.graph);
      this.y2RangeProperty.value = parameterRange.y2(line, this.graph);
    });
  }
}
graphingLines.register('SlopeModel', SlopeModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkdMQ29sb3JzIiwiTGluZSIsIkxpbmVGb3Jtc01vZGVsIiwiZ3JhcGhpbmdMaW5lcyIsIlNsb3BlUGFyYW1ldGVyUmFuZ2UiLCJTbG9wZU1vZGVsIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJJTlRFUkFDVElWRV9MSU5FIiwieDFSYW5nZVByb3BlcnR5IiwiZ3JhcGgiLCJ4UmFuZ2UiLCJ5MVJhbmdlUHJvcGVydHkiLCJ5UmFuZ2UiLCJ4MlJhbmdlUHJvcGVydHkiLCJ5MlJhbmdlUHJvcGVydHkiLCJwYXJhbWV0ZXJSYW5nZSIsImludGVyYWN0aXZlTGluZVByb3BlcnR5IiwibGluayIsImxpbmUiLCJ2YWx1ZSIsIngxIiwieTEiLCJ4MiIsInkyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTbG9wZU1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciB0aGUgJ1Nsb3BlJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IEdMQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9HTENvbG9ycy5qcyc7XHJcbmltcG9ydCBMaW5lIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9MaW5lLmpzJztcclxuaW1wb3J0IExpbmVGb3Jtc01vZGVsIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9MaW5lRm9ybXNNb2RlbC5qcyc7XHJcbmltcG9ydCBncmFwaGluZ0xpbmVzIGZyb20gJy4uLy4uL2dyYXBoaW5nTGluZXMuanMnO1xyXG5pbXBvcnQgU2xvcGVQYXJhbWV0ZXJSYW5nZSBmcm9tICcuL1Nsb3BlUGFyYW1ldGVyUmFuZ2UuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xvcGVNb2RlbCBleHRlbmRzIExpbmVGb3Jtc01vZGVsIHtcclxuXHJcbiAgLy8gUmFuZ2VzIG9mIHRoZSBwb2ludHMgdGhhdCBkZWZpbmUgYSBsaW5lXHJcbiAgcHVibGljIHJlYWRvbmx5IHgxUmFuZ2VQcm9wZXJ0eTogUHJvcGVydHk8UmFuZ2U+O1xyXG4gIHB1YmxpYyByZWFkb25seSB5MVJhbmdlUHJvcGVydHk6IFByb3BlcnR5PFJhbmdlPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgeDJSYW5nZVByb3BlcnR5OiBQcm9wZXJ0eTxSYW5nZT47XHJcbiAgcHVibGljIHJlYWRvbmx5IHkyUmFuZ2VQcm9wZXJ0eTogUHJvcGVydHk8UmFuZ2U+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCBuZXcgTGluZSggMSwgMiwgMywgNCwgR0xDb2xvcnMuSU5URVJBQ1RJVkVfTElORSApLCB0YW5kZW0gKTtcclxuXHJcbiAgICB0aGlzLngxUmFuZ2VQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggdGhpcy5ncmFwaC54UmFuZ2UgKTtcclxuICAgIHRoaXMueTFSYW5nZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCB0aGlzLmdyYXBoLnlSYW5nZSApO1xyXG4gICAgdGhpcy54MlJhbmdlUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHRoaXMuZ3JhcGgueFJhbmdlICk7XHJcbiAgICB0aGlzLnkyUmFuZ2VQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggdGhpcy5ncmFwaC55UmFuZ2UgKTtcclxuXHJcbiAgICAvLyBEeW5hbWljYWxseSBhZGp1c3QgcmFuZ2VzIHNvIHRoYXQgdmFyaWFibGVzIGFyZSBjb25zdHJhaW5lZCB0byB0aGUgYm91bmRzIG9mIHRoZSBncmFwaC5cclxuICAgIC8vIHVubGluayB1bm5lY2Vzc2FyeSBiZWNhdXNlIFNsb3BlTW9kZWwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbS5cclxuICAgIGNvbnN0IHBhcmFtZXRlclJhbmdlID0gbmV3IFNsb3BlUGFyYW1ldGVyUmFuZ2UoKTtcclxuICAgIHRoaXMuaW50ZXJhY3RpdmVMaW5lUHJvcGVydHkubGluayggbGluZSA9PiB7XHJcbiAgICAgIHRoaXMueDFSYW5nZVByb3BlcnR5LnZhbHVlID0gcGFyYW1ldGVyUmFuZ2UueDEoIGxpbmUsIHRoaXMuZ3JhcGggKTtcclxuICAgICAgdGhpcy55MVJhbmdlUHJvcGVydHkudmFsdWUgPSBwYXJhbWV0ZXJSYW5nZS55MSggbGluZSwgdGhpcy5ncmFwaCApO1xyXG4gICAgICB0aGlzLngyUmFuZ2VQcm9wZXJ0eS52YWx1ZSA9IHBhcmFtZXRlclJhbmdlLngyKCBsaW5lLCB0aGlzLmdyYXBoICk7XHJcbiAgICAgIHRoaXMueTJSYW5nZVByb3BlcnR5LnZhbHVlID0gcGFyYW1ldGVyUmFuZ2UueTIoIGxpbmUsIHRoaXMuZ3JhcGggKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdTbG9wZU1vZGVsJywgU2xvcGVNb2RlbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLFFBQVEsTUFBTSwwQkFBMEI7QUFDL0MsT0FBT0MsSUFBSSxNQUFNLDRCQUE0QjtBQUM3QyxPQUFPQyxjQUFjLE1BQU0sc0NBQXNDO0FBQ2pFLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBRzFELGVBQWUsTUFBTUMsVUFBVSxTQUFTSCxjQUFjLENBQUM7RUFFckQ7O0VBTU9JLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxLQUFLLENBQUUsSUFBSU4sSUFBSSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRUQsUUFBUSxDQUFDUSxnQkFBaUIsQ0FBQyxFQUFFRCxNQUFPLENBQUM7SUFFbEUsSUFBSSxDQUFDRSxlQUFlLEdBQUcsSUFBSVYsUUFBUSxDQUFFLElBQUksQ0FBQ1csS0FBSyxDQUFDQyxNQUFPLENBQUM7SUFDeEQsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSWIsUUFBUSxDQUFFLElBQUksQ0FBQ1csS0FBSyxDQUFDRyxNQUFPLENBQUM7SUFDeEQsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSWYsUUFBUSxDQUFFLElBQUksQ0FBQ1csS0FBSyxDQUFDQyxNQUFPLENBQUM7SUFDeEQsSUFBSSxDQUFDSSxlQUFlLEdBQUcsSUFBSWhCLFFBQVEsQ0FBRSxJQUFJLENBQUNXLEtBQUssQ0FBQ0csTUFBTyxDQUFDOztJQUV4RDtJQUNBO0lBQ0EsTUFBTUcsY0FBYyxHQUFHLElBQUlaLG1CQUFtQixDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDYSx1QkFBdUIsQ0FBQ0MsSUFBSSxDQUFFQyxJQUFJLElBQUk7TUFDekMsSUFBSSxDQUFDVixlQUFlLENBQUNXLEtBQUssR0FBR0osY0FBYyxDQUFDSyxFQUFFLENBQUVGLElBQUksRUFBRSxJQUFJLENBQUNULEtBQU0sQ0FBQztNQUNsRSxJQUFJLENBQUNFLGVBQWUsQ0FBQ1EsS0FBSyxHQUFHSixjQUFjLENBQUNNLEVBQUUsQ0FBRUgsSUFBSSxFQUFFLElBQUksQ0FBQ1QsS0FBTSxDQUFDO01BQ2xFLElBQUksQ0FBQ0ksZUFBZSxDQUFDTSxLQUFLLEdBQUdKLGNBQWMsQ0FBQ08sRUFBRSxDQUFFSixJQUFJLEVBQUUsSUFBSSxDQUFDVCxLQUFNLENBQUM7TUFDbEUsSUFBSSxDQUFDSyxlQUFlLENBQUNLLEtBQUssR0FBR0osY0FBYyxDQUFDUSxFQUFFLENBQUVMLElBQUksRUFBRSxJQUFJLENBQUNULEtBQU0sQ0FBQztJQUNwRSxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFQLGFBQWEsQ0FBQ3NCLFFBQVEsQ0FBRSxZQUFZLEVBQUVwQixVQUFXLENBQUMifQ==