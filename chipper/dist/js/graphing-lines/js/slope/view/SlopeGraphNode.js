// Copyright 2013-2023, University of Colorado Boulder

/**
 * Graph that provides direct manipulation of a line in point-slope form.
 * Adds manipulators for (x1,y1) and (x2,y2) to the base class functionality.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import LineFormsGraphNode from '../../common/view/LineFormsGraphNode.js';
import X1Y1Manipulator from '../../common/view/manipulator/X1Y1Manipulator.js';
import X2Y2Manipulator from '../../common/view/manipulator/X2Y2Manipulator.js';
import graphingLines from '../../graphingLines.js';
import SlopeEquationNode from './SlopeEquationNode.js';
export default class SlopeGraphNode extends LineFormsGraphNode {
  constructor(model, viewProperties) {
    super(model, viewProperties, SlopeEquationNode.createDynamicLabel);
    const manipulatorRadius = model.modelViewTransform.modelToViewDeltaX(model.manipulatorRadius);

    // (x1,y1) point manipulator
    const x1y1Manipulator = new X1Y1Manipulator(manipulatorRadius, model.interactiveLineProperty, model.x1RangeProperty, model.y1RangeProperty, model.modelViewTransform, false /* constantSlope */);

    // (x2,y2) point manipulator
    const x2y2Manipulator = new X2Y2Manipulator(manipulatorRadius, model.interactiveLineProperty, model.x2RangeProperty, model.y2RangeProperty, model.modelViewTransform);

    // rendering order
    this.addChild(x1y1Manipulator);
    this.addChild(x2y2Manipulator);

    // visibility of manipulators
    // unlink unnecessary because SlopeGraphNode exists for the lifetime of the sim.
    viewProperties.linesVisibleProperty.link(linesVisible => {
      x1y1Manipulator.visible = x2y2Manipulator.visible = linesVisible;
    });
  }
}
graphingLines.register('SlopeGraphNode', SlopeGraphNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lRm9ybXNHcmFwaE5vZGUiLCJYMVkxTWFuaXB1bGF0b3IiLCJYMlkyTWFuaXB1bGF0b3IiLCJncmFwaGluZ0xpbmVzIiwiU2xvcGVFcXVhdGlvbk5vZGUiLCJTbG9wZUdyYXBoTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ2aWV3UHJvcGVydGllcyIsImNyZWF0ZUR5bmFtaWNMYWJlbCIsIm1hbmlwdWxhdG9yUmFkaXVzIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJ4MXkxTWFuaXB1bGF0b3IiLCJpbnRlcmFjdGl2ZUxpbmVQcm9wZXJ0eSIsIngxUmFuZ2VQcm9wZXJ0eSIsInkxUmFuZ2VQcm9wZXJ0eSIsIngyeTJNYW5pcHVsYXRvciIsIngyUmFuZ2VQcm9wZXJ0eSIsInkyUmFuZ2VQcm9wZXJ0eSIsImFkZENoaWxkIiwibGluZXNWaXNpYmxlUHJvcGVydHkiLCJsaW5rIiwibGluZXNWaXNpYmxlIiwidmlzaWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2xvcGVHcmFwaE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR3JhcGggdGhhdCBwcm92aWRlcyBkaXJlY3QgbWFuaXB1bGF0aW9uIG9mIGEgbGluZSBpbiBwb2ludC1zbG9wZSBmb3JtLlxyXG4gKiBBZGRzIG1hbmlwdWxhdG9ycyBmb3IgKHgxLHkxKSBhbmQgKHgyLHkyKSB0byB0aGUgYmFzZSBjbGFzcyBmdW5jdGlvbmFsaXR5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBMaW5lRm9ybXNHcmFwaE5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTGluZUZvcm1zR3JhcGhOb2RlLmpzJztcclxuaW1wb3J0IExpbmVGb3Jtc1ZpZXdQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0xpbmVGb3Jtc1ZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IFgxWTFNYW5pcHVsYXRvciBmcm9tICcuLi8uLi9jb21tb24vdmlldy9tYW5pcHVsYXRvci9YMVkxTWFuaXB1bGF0b3IuanMnO1xyXG5pbXBvcnQgWDJZMk1hbmlwdWxhdG9yIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L21hbmlwdWxhdG9yL1gyWTJNYW5pcHVsYXRvci5qcyc7XHJcbmltcG9ydCBncmFwaGluZ0xpbmVzIGZyb20gJy4uLy4uL2dyYXBoaW5nTGluZXMuanMnO1xyXG5pbXBvcnQgU2xvcGVFcXVhdGlvbk5vZGUgZnJvbSAnLi9TbG9wZUVxdWF0aW9uTm9kZS5qcyc7XHJcbmltcG9ydCBTbG9wZU1vZGVsIGZyb20gJy4uL21vZGVsL1Nsb3BlTW9kZWwuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xvcGVHcmFwaE5vZGUgZXh0ZW5kcyBMaW5lRm9ybXNHcmFwaE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBTbG9wZU1vZGVsLCB2aWV3UHJvcGVydGllczogTGluZUZvcm1zVmlld1Byb3BlcnRpZXMgKSB7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCB2aWV3UHJvcGVydGllcywgU2xvcGVFcXVhdGlvbk5vZGUuY3JlYXRlRHluYW1pY0xhYmVsICk7XHJcblxyXG4gICAgY29uc3QgbWFuaXB1bGF0b3JSYWRpdXMgPSBtb2RlbC5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVgoIG1vZGVsLm1hbmlwdWxhdG9yUmFkaXVzICk7XHJcblxyXG4gICAgLy8gKHgxLHkxKSBwb2ludCBtYW5pcHVsYXRvclxyXG4gICAgY29uc3QgeDF5MU1hbmlwdWxhdG9yID0gbmV3IFgxWTFNYW5pcHVsYXRvcihcclxuICAgICAgbWFuaXB1bGF0b3JSYWRpdXMsIG1vZGVsLmludGVyYWN0aXZlTGluZVByb3BlcnR5LCBtb2RlbC54MVJhbmdlUHJvcGVydHksIG1vZGVsLnkxUmFuZ2VQcm9wZXJ0eSwgbW9kZWwubW9kZWxWaWV3VHJhbnNmb3JtLCBmYWxzZSAvKiBjb25zdGFudFNsb3BlICovICk7XHJcblxyXG4gICAgLy8gKHgyLHkyKSBwb2ludCBtYW5pcHVsYXRvclxyXG4gICAgY29uc3QgeDJ5Mk1hbmlwdWxhdG9yID0gbmV3IFgyWTJNYW5pcHVsYXRvcihcclxuICAgICAgbWFuaXB1bGF0b3JSYWRpdXMsIG1vZGVsLmludGVyYWN0aXZlTGluZVByb3BlcnR5LCBtb2RlbC54MlJhbmdlUHJvcGVydHksIG1vZGVsLnkyUmFuZ2VQcm9wZXJ0eSwgbW9kZWwubW9kZWxWaWV3VHJhbnNmb3JtICk7XHJcblxyXG4gICAgLy8gcmVuZGVyaW5nIG9yZGVyXHJcbiAgICB0aGlzLmFkZENoaWxkKCB4MXkxTWFuaXB1bGF0b3IgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHgyeTJNYW5pcHVsYXRvciApO1xyXG5cclxuICAgIC8vIHZpc2liaWxpdHkgb2YgbWFuaXB1bGF0b3JzXHJcbiAgICAvLyB1bmxpbmsgdW5uZWNlc3NhcnkgYmVjYXVzZSBTbG9wZUdyYXBoTm9kZSBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltLlxyXG4gICAgdmlld1Byb3BlcnRpZXMubGluZXNWaXNpYmxlUHJvcGVydHkubGluayggbGluZXNWaXNpYmxlID0+IHtcclxuICAgICAgeDF5MU1hbmlwdWxhdG9yLnZpc2libGUgPSB4MnkyTWFuaXB1bGF0b3IudmlzaWJsZSA9IGxpbmVzVmlzaWJsZTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXBoaW5nTGluZXMucmVnaXN0ZXIoICdTbG9wZUdyYXBoTm9kZScsIFNsb3BlR3JhcGhOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0Esa0JBQWtCLE1BQU0seUNBQXlDO0FBRXhFLE9BQU9DLGVBQWUsTUFBTSxrREFBa0Q7QUFDOUUsT0FBT0MsZUFBZSxNQUFNLGtEQUFrRDtBQUM5RSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUd0RCxlQUFlLE1BQU1DLGNBQWMsU0FBU0wsa0JBQWtCLENBQUM7RUFFdERNLFdBQVdBLENBQUVDLEtBQWlCLEVBQUVDLGNBQXVDLEVBQUc7SUFFL0UsS0FBSyxDQUFFRCxLQUFLLEVBQUVDLGNBQWMsRUFBRUosaUJBQWlCLENBQUNLLGtCQUFtQixDQUFDO0lBRXBFLE1BQU1DLGlCQUFpQixHQUFHSCxLQUFLLENBQUNJLGtCQUFrQixDQUFDQyxpQkFBaUIsQ0FBRUwsS0FBSyxDQUFDRyxpQkFBa0IsQ0FBQzs7SUFFL0Y7SUFDQSxNQUFNRyxlQUFlLEdBQUcsSUFBSVosZUFBZSxDQUN6Q1MsaUJBQWlCLEVBQUVILEtBQUssQ0FBQ08sdUJBQXVCLEVBQUVQLEtBQUssQ0FBQ1EsZUFBZSxFQUFFUixLQUFLLENBQUNTLGVBQWUsRUFBRVQsS0FBSyxDQUFDSSxrQkFBa0IsRUFBRSxLQUFLLENBQUMsbUJBQW9CLENBQUM7O0lBRXZKO0lBQ0EsTUFBTU0sZUFBZSxHQUFHLElBQUlmLGVBQWUsQ0FDekNRLGlCQUFpQixFQUFFSCxLQUFLLENBQUNPLHVCQUF1QixFQUFFUCxLQUFLLENBQUNXLGVBQWUsRUFBRVgsS0FBSyxDQUFDWSxlQUFlLEVBQUVaLEtBQUssQ0FBQ0ksa0JBQW1CLENBQUM7O0lBRTVIO0lBQ0EsSUFBSSxDQUFDUyxRQUFRLENBQUVQLGVBQWdCLENBQUM7SUFDaEMsSUFBSSxDQUFDTyxRQUFRLENBQUVILGVBQWdCLENBQUM7O0lBRWhDO0lBQ0E7SUFDQVQsY0FBYyxDQUFDYSxvQkFBb0IsQ0FBQ0MsSUFBSSxDQUFFQyxZQUFZLElBQUk7TUFDeERWLGVBQWUsQ0FBQ1csT0FBTyxHQUFHUCxlQUFlLENBQUNPLE9BQU8sR0FBR0QsWUFBWTtJQUNsRSxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFwQixhQUFhLENBQUNzQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVwQixjQUFlLENBQUMifQ==