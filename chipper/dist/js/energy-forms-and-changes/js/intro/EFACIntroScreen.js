// Copyright 2014-2022, University of Colorado Boulder

/**
 * the 'Intro' screen in the Energy Forms and Changes simulation
 *
 * @author John Blanco
 * @author Martin Veillette (Berea College)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import introScreenIcon_png from '../../images/introScreenIcon_png.js';
import EFACConstants from '../common/EFACConstants.js';
import EFACQueryParameters from '../common/EFACQueryParameters.js';
import BeakerType from '../common/model/BeakerType.js';
import energyFormsAndChanges from '../energyFormsAndChanges.js';
import EnergyFormsAndChangesStrings from '../EnergyFormsAndChangesStrings.js';
import BlockType from './model/BlockType.js';
import EFACIntroModel from './model/EFACIntroModel.js';
import EFACIntroScreenView from './view/EFACIntroScreenView.js';
class EFACIntroScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const options = {
      name: EnergyFormsAndChangesStrings.introStringProperty,
      backgroundColorProperty: new Property(EFACConstants.FIRST_SCREEN_BACKGROUND_COLOR),
      homeScreenIcon: new ScreenIcon(new Image(introScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      maxDT: EFACConstants.maxDT,
      tandem: tandem
    };
    const blocksToCreate = [];
    const beakersToCreate = [];

    // map query parameter string to element type and split by blocks vs beakers
    EFACQueryParameters.elements.forEach(elementKey => {
      if (elementKey === EFACConstants.IRON_KEY) {
        blocksToCreate.push(BlockType.IRON);
      } else if (elementKey === EFACConstants.BRICK_KEY) {
        blocksToCreate.push(BlockType.BRICK);
      } else if (elementKey === EFACConstants.WATER_KEY) {
        beakersToCreate.push(BeakerType.WATER);
      } else if (elementKey === EFACConstants.OLIVE_OIL_KEY) {
        beakersToCreate.push(BeakerType.OLIVE_OIL);
      }
    });
    super(() => new EFACIntroModel(blocksToCreate, beakersToCreate, EFACQueryParameters.burners, tandem.createTandem('model')), model => new EFACIntroScreenView(model, tandem.createTandem('view')), options);
  }
}
energyFormsAndChanges.register('EFACIntroScreen', EFACIntroScreen);
export default EFACIntroScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsImludHJvU2NyZWVuSWNvbl9wbmciLCJFRkFDQ29uc3RhbnRzIiwiRUZBQ1F1ZXJ5UGFyYW1ldGVycyIsIkJlYWtlclR5cGUiLCJlbmVyZ3lGb3Jtc0FuZENoYW5nZXMiLCJFbmVyZ3lGb3Jtc0FuZENoYW5nZXNTdHJpbmdzIiwiQmxvY2tUeXBlIiwiRUZBQ0ludHJvTW9kZWwiLCJFRkFDSW50cm9TY3JlZW5WaWV3IiwiRUZBQ0ludHJvU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsImludHJvU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIkZJUlNUX1NDUkVFTl9CQUNLR1JPVU5EX0NPTE9SIiwiaG9tZVNjcmVlbkljb24iLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJtYXhEVCIsImJsb2Nrc1RvQ3JlYXRlIiwiYmVha2Vyc1RvQ3JlYXRlIiwiZWxlbWVudHMiLCJmb3JFYWNoIiwiZWxlbWVudEtleSIsIklST05fS0VZIiwicHVzaCIsIklST04iLCJCUklDS19LRVkiLCJCUklDSyIsIldBVEVSX0tFWSIsIldBVEVSIiwiT0xJVkVfT0lMX0tFWSIsIk9MSVZFX09JTCIsImJ1cm5lcnMiLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRUZBQ0ludHJvU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIHRoZSAnSW50cm8nIHNjcmVlbiBpbiB0aGUgRW5lcmd5IEZvcm1zIGFuZCBDaGFuZ2VzIHNpbXVsYXRpb25cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBpbnRyb1NjcmVlbkljb25fcG5nIGZyb20gJy4uLy4uL2ltYWdlcy9pbnRyb1NjcmVlbkljb25fcG5nLmpzJztcclxuaW1wb3J0IEVGQUNDb25zdGFudHMgZnJvbSAnLi4vY29tbW9uL0VGQUNDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRUZBQ1F1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi9jb21tb24vRUZBQ1F1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBCZWFrZXJUeXBlIGZyb20gJy4uL2NvbW1vbi9tb2RlbC9CZWFrZXJUeXBlLmpzJztcclxuaW1wb3J0IGVuZXJneUZvcm1zQW5kQ2hhbmdlcyBmcm9tICcuLi9lbmVyZ3lGb3Jtc0FuZENoYW5nZXMuanMnO1xyXG5pbXBvcnQgRW5lcmd5Rm9ybXNBbmRDaGFuZ2VzU3RyaW5ncyBmcm9tICcuLi9FbmVyZ3lGb3Jtc0FuZENoYW5nZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IEJsb2NrVHlwZSBmcm9tICcuL21vZGVsL0Jsb2NrVHlwZS5qcyc7XHJcbmltcG9ydCBFRkFDSW50cm9Nb2RlbCBmcm9tICcuL21vZGVsL0VGQUNJbnRyb01vZGVsLmpzJztcclxuaW1wb3J0IEVGQUNJbnRyb1NjcmVlblZpZXcgZnJvbSAnLi92aWV3L0VGQUNJbnRyb1NjcmVlblZpZXcuanMnO1xyXG5cclxuXHJcbmNsYXNzIEVGQUNJbnRyb1NjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IEVuZXJneUZvcm1zQW5kQ2hhbmdlc1N0cmluZ3MuaW50cm9TdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggRUZBQ0NvbnN0YW50cy5GSVJTVF9TQ1JFRU5fQkFDS0dST1VORF9DT0xPUiApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggaW50cm9TY3JlZW5JY29uX3BuZyApLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9ICksXHJcbiAgICAgIG1heERUOiBFRkFDQ29uc3RhbnRzLm1heERULFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBibG9ja3NUb0NyZWF0ZSA9IFtdO1xyXG4gICAgY29uc3QgYmVha2Vyc1RvQ3JlYXRlID0gW107XHJcblxyXG4gICAgLy8gbWFwIHF1ZXJ5IHBhcmFtZXRlciBzdHJpbmcgdG8gZWxlbWVudCB0eXBlIGFuZCBzcGxpdCBieSBibG9ja3MgdnMgYmVha2Vyc1xyXG4gICAgRUZBQ1F1ZXJ5UGFyYW1ldGVycy5lbGVtZW50cy5mb3JFYWNoKCBlbGVtZW50S2V5ID0+IHtcclxuICAgICAgaWYgKCBlbGVtZW50S2V5ID09PSBFRkFDQ29uc3RhbnRzLklST05fS0VZICkge1xyXG4gICAgICAgIGJsb2Nrc1RvQ3JlYXRlLnB1c2goIEJsb2NrVHlwZS5JUk9OICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIGVsZW1lbnRLZXkgPT09IEVGQUNDb25zdGFudHMuQlJJQ0tfS0VZICkge1xyXG4gICAgICAgIGJsb2Nrc1RvQ3JlYXRlLnB1c2goIEJsb2NrVHlwZS5CUklDSyApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBlbGVtZW50S2V5ID09PSBFRkFDQ29uc3RhbnRzLldBVEVSX0tFWSApIHtcclxuICAgICAgICBiZWFrZXJzVG9DcmVhdGUucHVzaCggQmVha2VyVHlwZS5XQVRFUiApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBlbGVtZW50S2V5ID09PSBFRkFDQ29uc3RhbnRzLk9MSVZFX09JTF9LRVkgKSB7XHJcbiAgICAgICAgYmVha2Vyc1RvQ3JlYXRlLnB1c2goIEJlYWtlclR5cGUuT0xJVkVfT0lMICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IEVGQUNJbnRyb01vZGVsKFxyXG4gICAgICAgIGJsb2Nrc1RvQ3JlYXRlLFxyXG4gICAgICAgIGJlYWtlcnNUb0NyZWF0ZSxcclxuICAgICAgICBFRkFDUXVlcnlQYXJhbWV0ZXJzLmJ1cm5lcnMsXHJcbiAgICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApXHJcbiAgICAgICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBFRkFDSW50cm9TY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ0VGQUNJbnRyb1NjcmVlbicsIEVGQUNJbnRyb1NjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBFRkFDSW50cm9TY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hE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