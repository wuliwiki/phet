// Copyright 2014-2022, University of Colorado Boulder

/**
 * A node that represents a 2D surface on which energy chunks reside. The surface contains z-dimension information,
 * and can thus be used to create an effect of layering in order to get a bit of a 3D appearance when used in
 * conjunction with other slices. The slice is generally invisible, but can be shown using when needed for debugging.
 *
 * @author John Blanco
 * @author Andrew Adare
 */

import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import EFACQueryParameters from '../../common/EFACQueryParameters.js';
import EnergyChunkNode from '../../common/view/EnergyChunkNode.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
class EnergyChunkContainerSliceNode extends Node {
  /**
   * @param {EnergyChunkContainerSlice} slice
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(slice, modelViewTransform) {
    super();
    this.modelViewTransform = modelViewTransform;

    // define a function that will add and remove energy chunk nodes as energy come and go in the model
    const addEnergyChunkNode = addedChunk => {
      const energyChunkNode = new EnergyChunkNode(addedChunk, modelViewTransform);
      this.addChild(energyChunkNode);
      const removalListener = removedChunk => {
        if (removedChunk === addedChunk) {
          this.removeChild(energyChunkNode);
          energyChunkNode.dispose();
          slice.energyChunkList.removeItemRemovedListener(removalListener);
        }
      };
      slice.energyChunkList.addItemRemovedListener(removalListener);
    };

    // add the initial energy chunks
    slice.energyChunkList.forEach(addEnergyChunkNode);

    // listen for the arrival of new energy chunks and create a node for each
    slice.energyChunkList.addItemAddedListener(addEnergyChunkNode);
    if (EFACQueryParameters.showHelperShapes) {
      // for debug - add an outline of the slice bounds, note that this does not update if the slice's bounds change
      const outlineNode = new Rectangle(modelViewTransform.modelToViewBounds(slice.bounds), {
        lineWidth: 1,
        stroke: 'red'
      });
      this.addChild(outlineNode);

      // move the outlines as the slice moves
      slice.anchorPointProperty.lazyLink((newPosition, oldPosition) => {
        outlineNode.translate(modelViewTransform.modelToViewDeltaX(newPosition.x - oldPosition.x), modelViewTransform.modelToViewDeltaY(newPosition.y - oldPosition.y));
      });
    }
  }
}
energyFormsAndChanges.register('EnergyChunkContainerSliceNode', EnergyChunkContainerSliceNode);
export default EnergyChunkContainerSliceNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiUmVjdGFuZ2xlIiwiRUZBQ1F1ZXJ5UGFyYW1ldGVycyIsIkVuZXJneUNodW5rTm9kZSIsImVuZXJneUZvcm1zQW5kQ2hhbmdlcyIsIkVuZXJneUNodW5rQ29udGFpbmVyU2xpY2VOb2RlIiwiY29uc3RydWN0b3IiLCJzbGljZSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImFkZEVuZXJneUNodW5rTm9kZSIsImFkZGVkQ2h1bmsiLCJlbmVyZ3lDaHVua05vZGUiLCJhZGRDaGlsZCIsInJlbW92YWxMaXN0ZW5lciIsInJlbW92ZWRDaHVuayIsInJlbW92ZUNoaWxkIiwiZGlzcG9zZSIsImVuZXJneUNodW5rTGlzdCIsInJlbW92ZUl0ZW1SZW1vdmVkTGlzdGVuZXIiLCJhZGRJdGVtUmVtb3ZlZExpc3RlbmVyIiwiZm9yRWFjaCIsImFkZEl0ZW1BZGRlZExpc3RlbmVyIiwic2hvd0hlbHBlclNoYXBlcyIsIm91dGxpbmVOb2RlIiwibW9kZWxUb1ZpZXdCb3VuZHMiLCJib3VuZHMiLCJsaW5lV2lkdGgiLCJzdHJva2UiLCJhbmNob3JQb2ludFByb3BlcnR5IiwibGF6eUxpbmsiLCJuZXdQb3NpdGlvbiIsIm9sZFBvc2l0aW9uIiwidHJhbnNsYXRlIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJ4IiwibW9kZWxUb1ZpZXdEZWx0YVkiLCJ5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIG5vZGUgdGhhdCByZXByZXNlbnRzIGEgMkQgc3VyZmFjZSBvbiB3aGljaCBlbmVyZ3kgY2h1bmtzIHJlc2lkZS4gVGhlIHN1cmZhY2UgY29udGFpbnMgei1kaW1lbnNpb24gaW5mb3JtYXRpb24sXHJcbiAqIGFuZCBjYW4gdGh1cyBiZSB1c2VkIHRvIGNyZWF0ZSBhbiBlZmZlY3Qgb2YgbGF5ZXJpbmcgaW4gb3JkZXIgdG8gZ2V0IGEgYml0IG9mIGEgM0QgYXBwZWFyYW5jZSB3aGVuIHVzZWQgaW5cclxuICogY29uanVuY3Rpb24gd2l0aCBvdGhlciBzbGljZXMuIFRoZSBzbGljZSBpcyBnZW5lcmFsbHkgaW52aXNpYmxlLCBidXQgY2FuIGJlIHNob3duIHVzaW5nIHdoZW4gbmVlZGVkIGZvciBkZWJ1Z2dpbmcuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBBbmRyZXcgQWRhcmVcclxuICovXHJcblxyXG5pbXBvcnQgeyBOb2RlLCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgRUZBQ1F1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vRUZBQ1F1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lDaHVua05vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvRW5lcmd5Q2h1bmtOb2RlLmpzJztcclxuaW1wb3J0IGVuZXJneUZvcm1zQW5kQ2hhbmdlcyBmcm9tICcuLi8uLi9lbmVyZ3lGb3Jtc0FuZENoYW5nZXMuanMnO1xyXG5cclxuY2xhc3MgRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlfSBzbGljZVxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHNsaWNlLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtID0gbW9kZWxWaWV3VHJhbnNmb3JtO1xyXG5cclxuICAgIC8vIGRlZmluZSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBhZGQgYW5kIHJlbW92ZSBlbmVyZ3kgY2h1bmsgbm9kZXMgYXMgZW5lcmd5IGNvbWUgYW5kIGdvIGluIHRoZSBtb2RlbFxyXG4gICAgY29uc3QgYWRkRW5lcmd5Q2h1bmtOb2RlID0gYWRkZWRDaHVuayA9PiB7XHJcbiAgICAgIGNvbnN0IGVuZXJneUNodW5rTm9kZSA9IG5ldyBFbmVyZ3lDaHVua05vZGUoIGFkZGVkQ2h1bmssIG1vZGVsVmlld1RyYW5zZm9ybSApO1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCBlbmVyZ3lDaHVua05vZGUgKTtcclxuICAgICAgY29uc3QgcmVtb3ZhbExpc3RlbmVyID0gcmVtb3ZlZENodW5rID0+IHtcclxuICAgICAgICBpZiAoIHJlbW92ZWRDaHVuayA9PT0gYWRkZWRDaHVuayApIHtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoIGVuZXJneUNodW5rTm9kZSApO1xyXG4gICAgICAgICAgZW5lcmd5Q2h1bmtOb2RlLmRpc3Bvc2UoKTtcclxuICAgICAgICAgIHNsaWNlLmVuZXJneUNodW5rTGlzdC5yZW1vdmVJdGVtUmVtb3ZlZExpc3RlbmVyKCByZW1vdmFsTGlzdGVuZXIgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHNsaWNlLmVuZXJneUNodW5rTGlzdC5hZGRJdGVtUmVtb3ZlZExpc3RlbmVyKCByZW1vdmFsTGlzdGVuZXIgKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gYWRkIHRoZSBpbml0aWFsIGVuZXJneSBjaHVua3NcclxuICAgIHNsaWNlLmVuZXJneUNodW5rTGlzdC5mb3JFYWNoKCBhZGRFbmVyZ3lDaHVua05vZGUgKTtcclxuXHJcbiAgICAvLyBsaXN0ZW4gZm9yIHRoZSBhcnJpdmFsIG9mIG5ldyBlbmVyZ3kgY2h1bmtzIGFuZCBjcmVhdGUgYSBub2RlIGZvciBlYWNoXHJcbiAgICBzbGljZS5lbmVyZ3lDaHVua0xpc3QuYWRkSXRlbUFkZGVkTGlzdGVuZXIoIGFkZEVuZXJneUNodW5rTm9kZSApO1xyXG5cclxuICAgIGlmICggRUZBQ1F1ZXJ5UGFyYW1ldGVycy5zaG93SGVscGVyU2hhcGVzICkge1xyXG5cclxuICAgICAgLy8gZm9yIGRlYnVnIC0gYWRkIGFuIG91dGxpbmUgb2YgdGhlIHNsaWNlIGJvdW5kcywgbm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgdXBkYXRlIGlmIHRoZSBzbGljZSdzIGJvdW5kcyBjaGFuZ2VcclxuICAgICAgY29uc3Qgb3V0bGluZU5vZGUgPSBuZXcgUmVjdGFuZ2xlKCBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdCb3VuZHMoIHNsaWNlLmJvdW5kcyApLCB7XHJcbiAgICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICAgIHN0cm9rZTogJ3JlZCdcclxuICAgICAgfSApO1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCBvdXRsaW5lTm9kZSApO1xyXG5cclxuICAgICAgLy8gbW92ZSB0aGUgb3V0bGluZXMgYXMgdGhlIHNsaWNlIG1vdmVzXHJcbiAgICAgIHNsaWNlLmFuY2hvclBvaW50UHJvcGVydHkubGF6eUxpbmsoICggbmV3UG9zaXRpb24sIG9sZFBvc2l0aW9uICkgPT4ge1xyXG4gICAgICAgIG91dGxpbmVOb2RlLnRyYW5zbGF0ZShcclxuICAgICAgICAgIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggbmV3UG9zaXRpb24ueCAtIG9sZFBvc2l0aW9uLnggKSxcclxuICAgICAgICAgIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggbmV3UG9zaXRpb24ueSAtIG9sZFBvc2l0aW9uLnkgKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ0VuZXJneUNodW5rQ29udGFpbmVyU2xpY2VOb2RlJywgRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZU5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksRUFBRUMsU0FBUyxRQUFRLG1DQUFtQztBQUNuRSxPQUFPQyxtQkFBbUIsTUFBTSxxQ0FBcUM7QUFDckUsT0FBT0MsZUFBZSxNQUFNLHNDQUFzQztBQUNsRSxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFFbEUsTUFBTUMsNkJBQTZCLFNBQVNMLElBQUksQ0FBQztFQUUvQztBQUNGO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLGtCQUFrQixFQUFHO0lBQ3ZDLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDQSxrQkFBa0IsR0FBR0Esa0JBQWtCOztJQUU1QztJQUNBLE1BQU1DLGtCQUFrQixHQUFHQyxVQUFVLElBQUk7TUFDdkMsTUFBTUMsZUFBZSxHQUFHLElBQUlSLGVBQWUsQ0FBRU8sVUFBVSxFQUFFRixrQkFBbUIsQ0FBQztNQUM3RSxJQUFJLENBQUNJLFFBQVEsQ0FBRUQsZUFBZ0IsQ0FBQztNQUNoQyxNQUFNRSxlQUFlLEdBQUdDLFlBQVksSUFBSTtRQUN0QyxJQUFLQSxZQUFZLEtBQUtKLFVBQVUsRUFBRztVQUNqQyxJQUFJLENBQUNLLFdBQVcsQ0FBRUosZUFBZ0IsQ0FBQztVQUNuQ0EsZUFBZSxDQUFDSyxPQUFPLENBQUMsQ0FBQztVQUN6QlQsS0FBSyxDQUFDVSxlQUFlLENBQUNDLHlCQUF5QixDQUFFTCxlQUFnQixDQUFDO1FBQ3BFO01BQ0YsQ0FBQztNQUNETixLQUFLLENBQUNVLGVBQWUsQ0FBQ0Usc0JBQXNCLENBQUVOLGVBQWdCLENBQUM7SUFDakUsQ0FBQzs7SUFFRDtJQUNBTixLQUFLLENBQUNVLGVBQWUsQ0FBQ0csT0FBTyxDQUFFWCxrQkFBbUIsQ0FBQzs7SUFFbkQ7SUFDQUYsS0FBSyxDQUFDVSxlQUFlLENBQUNJLG9CQUFvQixDQUFFWixrQkFBbUIsQ0FBQztJQUVoRSxJQUFLUCxtQkFBbUIsQ0FBQ29CLGdCQUFnQixFQUFHO01BRTFDO01BQ0EsTUFBTUMsV0FBVyxHQUFHLElBQUl0QixTQUFTLENBQUVPLGtCQUFrQixDQUFDZ0IsaUJBQWlCLENBQUVqQixLQUFLLENBQUNrQixNQUFPLENBQUMsRUFBRTtRQUN2RkMsU0FBUyxFQUFFLENBQUM7UUFDWkMsTUFBTSxFQUFFO01BQ1YsQ0FBRSxDQUFDO01BQ0gsSUFBSSxDQUFDZixRQUFRLENBQUVXLFdBQVksQ0FBQzs7TUFFNUI7TUFDQWhCLEtBQUssQ0FBQ3FCLG1CQUFtQixDQUFDQyxRQUFRLENBQUUsQ0FBRUMsV0FBVyxFQUFFQyxXQUFXLEtBQU07UUFDbEVSLFdBQVcsQ0FBQ1MsU0FBUyxDQUNuQnhCLGtCQUFrQixDQUFDeUIsaUJBQWlCLENBQUVILFdBQVcsQ0FBQ0ksQ0FBQyxHQUFHSCxXQUFXLENBQUNHLENBQUUsQ0FBQyxFQUNyRTFCLGtCQUFrQixDQUFDMkIsaUJBQWlCLENBQUVMLFdBQVcsQ0FBQ00sQ0FBQyxHQUFHTCxXQUFXLENBQUNLLENBQUUsQ0FDdEUsQ0FBQztNQUNILENBQUUsQ0FBQztJQUNMO0VBQ0Y7QUFDRjtBQUVBaEMscUJBQXFCLENBQUNpQyxRQUFRLENBQUUsK0JBQStCLEVBQUVoQyw2QkFBOEIsQ0FBQztBQUNoRyxlQUFlQSw2QkFBNkIifQ==