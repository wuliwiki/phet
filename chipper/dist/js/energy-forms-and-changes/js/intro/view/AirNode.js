// Copyright 2014-2022, University of Colorado Boulder

/**
 * view representation of the air, which is basically just a parent node through which energy chunks can move
 *
 * @author John Blanco
 */

import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import EFACQueryParameters from '../../common/EFACQueryParameters.js';
import EnergyChunkNode from '../../common/view/EnergyChunkNode.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
class AirNode extends Node {
  /**
   * @param {Air} air - model of the air
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(air, modelViewTransform) {
    super();
    if (EFACQueryParameters.showAirBounds) {
      this.addChild(new Rectangle(modelViewTransform.modelToViewBounds(air.thermalContactArea), {
        fill: 'rgba( 255, 0, 0, 0.5 )',
        lineWidth: 1
      }));
    }

    // watch for energy chunks coming and going and add/remove nodes accordingly
    air.energyChunkList.addItemAddedListener(addedEnergyChunk => {
      const energyChunkNode = new EnergyChunkNode(addedEnergyChunk, modelViewTransform);
      this.addChild(energyChunkNode);
      const removalListener = removedEnergyChunk => {
        if (removedEnergyChunk === addedEnergyChunk) {
          this.removeChild(energyChunkNode);
          energyChunkNode.dispose();
          air.energyChunkList.removeItemRemovedListener(removalListener);
        }
      };
      air.energyChunkList.addItemRemovedListener(removalListener);
    });
  }
}
energyFormsAndChanges.register('AirNode', AirNode);
export default AirNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiUmVjdGFuZ2xlIiwiRUZBQ1F1ZXJ5UGFyYW1ldGVycyIsIkVuZXJneUNodW5rTm9kZSIsImVuZXJneUZvcm1zQW5kQ2hhbmdlcyIsIkFpck5vZGUiLCJjb25zdHJ1Y3RvciIsImFpciIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInNob3dBaXJCb3VuZHMiLCJhZGRDaGlsZCIsIm1vZGVsVG9WaWV3Qm91bmRzIiwidGhlcm1hbENvbnRhY3RBcmVhIiwiZmlsbCIsImxpbmVXaWR0aCIsImVuZXJneUNodW5rTGlzdCIsImFkZEl0ZW1BZGRlZExpc3RlbmVyIiwiYWRkZWRFbmVyZ3lDaHVuayIsImVuZXJneUNodW5rTm9kZSIsInJlbW92YWxMaXN0ZW5lciIsInJlbW92ZWRFbmVyZ3lDaHVuayIsInJlbW92ZUNoaWxkIiwiZGlzcG9zZSIsInJlbW92ZUl0ZW1SZW1vdmVkTGlzdGVuZXIiLCJhZGRJdGVtUmVtb3ZlZExpc3RlbmVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBaXJOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIHZpZXcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFpciwgd2hpY2ggaXMgYmFzaWNhbGx5IGp1c3QgYSBwYXJlbnQgbm9kZSB0aHJvdWdoIHdoaWNoIGVuZXJneSBjaHVua3MgY2FuIG1vdmVcclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vZGUsIFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBFRkFDUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL2NvbW1vbi9FRkFDUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IEVuZXJneUNodW5rTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9FbmVyZ3lDaHVua05vZGUuanMnO1xyXG5pbXBvcnQgZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIGZyb20gJy4uLy4uL2VuZXJneUZvcm1zQW5kQ2hhbmdlcy5qcyc7XHJcblxyXG5jbGFzcyBBaXJOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QWlyfSBhaXIgLSBtb2RlbCBvZiB0aGUgYWlyXHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYWlyLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGlmICggRUZBQ1F1ZXJ5UGFyYW1ldGVycy5zaG93QWlyQm91bmRzICkge1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCBuZXcgUmVjdGFuZ2xlKCBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdCb3VuZHMoIGFpci50aGVybWFsQ29udGFjdEFyZWEgKSwge1xyXG4gICAgICAgIGZpbGw6ICdyZ2JhKCAyNTUsIDAsIDAsIDAuNSApJyxcclxuICAgICAgICBsaW5lV2lkdGg6IDFcclxuICAgICAgfSApICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gd2F0Y2ggZm9yIGVuZXJneSBjaHVua3MgY29taW5nIGFuZCBnb2luZyBhbmQgYWRkL3JlbW92ZSBub2RlcyBhY2NvcmRpbmdseVxyXG4gICAgYWlyLmVuZXJneUNodW5rTGlzdC5hZGRJdGVtQWRkZWRMaXN0ZW5lciggYWRkZWRFbmVyZ3lDaHVuayA9PiB7XHJcbiAgICAgIGNvbnN0IGVuZXJneUNodW5rTm9kZSA9IG5ldyBFbmVyZ3lDaHVua05vZGUoIGFkZGVkRW5lcmd5Q2h1bmssIG1vZGVsVmlld1RyYW5zZm9ybSApO1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCBlbmVyZ3lDaHVua05vZGUgKTtcclxuICAgICAgY29uc3QgcmVtb3ZhbExpc3RlbmVyID0gcmVtb3ZlZEVuZXJneUNodW5rID0+IHtcclxuICAgICAgICBpZiAoIHJlbW92ZWRFbmVyZ3lDaHVuayA9PT0gYWRkZWRFbmVyZ3lDaHVuayApIHtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoIGVuZXJneUNodW5rTm9kZSApO1xyXG4gICAgICAgICAgZW5lcmd5Q2h1bmtOb2RlLmRpc3Bvc2UoKTtcclxuICAgICAgICAgIGFpci5lbmVyZ3lDaHVua0xpc3QucmVtb3ZlSXRlbVJlbW92ZWRMaXN0ZW5lciggcmVtb3ZhbExpc3RlbmVyICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICBhaXIuZW5lcmd5Q2h1bmtMaXN0LmFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIoIHJlbW92YWxMaXN0ZW5lciApO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLnJlZ2lzdGVyKCAnQWlyTm9kZScsIEFpck5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQWlyTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxFQUFFQyxTQUFTLFFBQVEsbUNBQW1DO0FBQ25FLE9BQU9DLG1CQUFtQixNQUFNLHFDQUFxQztBQUNyRSxPQUFPQyxlQUFlLE1BQU0sc0NBQXNDO0FBQ2xFLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUVsRSxNQUFNQyxPQUFPLFNBQVNMLElBQUksQ0FBQztFQUV6QjtBQUNGO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxHQUFHLEVBQUVDLGtCQUFrQixFQUFHO0lBQ3JDLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBS04sbUJBQW1CLENBQUNPLGFBQWEsRUFBRztNQUN2QyxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJVCxTQUFTLENBQUVPLGtCQUFrQixDQUFDRyxpQkFBaUIsQ0FBRUosR0FBRyxDQUFDSyxrQkFBbUIsQ0FBQyxFQUFFO1FBQzVGQyxJQUFJLEVBQUUsd0JBQXdCO1FBQzlCQyxTQUFTLEVBQUU7TUFDYixDQUFFLENBQUUsQ0FBQztJQUNQOztJQUVBO0lBQ0FQLEdBQUcsQ0FBQ1EsZUFBZSxDQUFDQyxvQkFBb0IsQ0FBRUMsZ0JBQWdCLElBQUk7TUFDNUQsTUFBTUMsZUFBZSxHQUFHLElBQUlmLGVBQWUsQ0FBRWMsZ0JBQWdCLEVBQUVULGtCQUFtQixDQUFDO01BQ25GLElBQUksQ0FBQ0UsUUFBUSxDQUFFUSxlQUFnQixDQUFDO01BQ2hDLE1BQU1DLGVBQWUsR0FBR0Msa0JBQWtCLElBQUk7UUFDNUMsSUFBS0Esa0JBQWtCLEtBQUtILGdCQUFnQixFQUFHO1VBQzdDLElBQUksQ0FBQ0ksV0FBVyxDQUFFSCxlQUFnQixDQUFDO1VBQ25DQSxlQUFlLENBQUNJLE9BQU8sQ0FBQyxDQUFDO1VBQ3pCZixHQUFHLENBQUNRLGVBQWUsQ0FBQ1EseUJBQXlCLENBQUVKLGVBQWdCLENBQUM7UUFDbEU7TUFDRixDQUFDO01BQ0RaLEdBQUcsQ0FBQ1EsZUFBZSxDQUFDUyxzQkFBc0IsQ0FBRUwsZUFBZ0IsQ0FBQztJQUMvRCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFmLHFCQUFxQixDQUFDcUIsUUFBUSxDQUFFLFNBQVMsRUFBRXBCLE9BQVEsQ0FBQztBQUNwRCxlQUFlQSxPQUFPIn0=