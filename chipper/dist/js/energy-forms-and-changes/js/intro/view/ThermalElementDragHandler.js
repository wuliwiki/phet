// Copyright 2014-2021, University of Colorado Boulder

/**
 * drag handler for objects that can be moved by the user, used to constrain objects to the play area and to prevent
 * them from being dragged through one another
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { DragListener } from '../../../../scenery/js/imports.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
class ThermalElementDragHandler extends DragListener {
  /**
   * @param {UserMovableModelElement} modelElement
   * @param {Node} screenViewChildNode - the node that will be used to convert pointer positions to global coordinates
   * @param {ModelViewTransform2} modelViewTransform
   * @param {function} constrainPosition
   * @param {BooleanProperty} simIsPlayingProperty
   * @param {Tandem} tandem
   */
  constructor(modelElement, screenViewChildNode, modelViewTransform, constrainPosition, simIsPlayingProperty, tandem) {
    const dragStartOffset = new Vector2(0, 0);
    let currentTarget = null;
    super({
      // allow moving a finger (touch) across a screenViewChildNode to pick it up
      allowTouchSnag: true,
      start: event => {
        // make sure the sim is playing when an element is grabbed - this will resume the sim if it is paused
        simIsPlayingProperty.value = true;
        modelElement.userControlledProperty.set(true);
        const modelElementViewPosition = modelViewTransform.modelToViewPosition(modelElement.positionProperty.get());
        currentTarget = event.currentTarget;
        const dragStartPosition = currentTarget.globalToParentPoint(event.pointer.point);
        dragStartOffset.setXY(dragStartPosition.x - modelElementViewPosition.x, dragStartPosition.y - modelElementViewPosition.y);
      },
      drag: event => {
        const dragPosition = currentTarget.globalToParentPoint(event.pointer.point);
        const modelElementViewPosition = dragPosition.minus(dragStartOffset);
        const modelElementPosition = modelViewTransform.viewToModelPosition(modelElementViewPosition);
        modelElement.positionProperty.set(constrainPosition(modelElement, modelElementPosition));
      },
      end: () => {
        modelElement.userControlledProperty.set(false);
        currentTarget = null;
      },
      tandem: tandem
    });
  }
}
energyFormsAndChanges.register('ThermalElementDragHandler', ThermalElementDragHandler);
export default ThermalElementDragHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiRHJhZ0xpc3RlbmVyIiwiZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIiwiVGhlcm1hbEVsZW1lbnREcmFnSGFuZGxlciIsImNvbnN0cnVjdG9yIiwibW9kZWxFbGVtZW50Iiwic2NyZWVuVmlld0NoaWxkTm9kZSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImNvbnN0cmFpblBvc2l0aW9uIiwic2ltSXNQbGF5aW5nUHJvcGVydHkiLCJ0YW5kZW0iLCJkcmFnU3RhcnRPZmZzZXQiLCJjdXJyZW50VGFyZ2V0IiwiYWxsb3dUb3VjaFNuYWciLCJzdGFydCIsImV2ZW50IiwidmFsdWUiLCJ1c2VyQ29udHJvbGxlZFByb3BlcnR5Iiwic2V0IiwibW9kZWxFbGVtZW50Vmlld1Bvc2l0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsInBvc2l0aW9uUHJvcGVydHkiLCJnZXQiLCJkcmFnU3RhcnRQb3NpdGlvbiIsImdsb2JhbFRvUGFyZW50UG9pbnQiLCJwb2ludGVyIiwicG9pbnQiLCJzZXRYWSIsIngiLCJ5IiwiZHJhZyIsImRyYWdQb3NpdGlvbiIsIm1pbnVzIiwibW9kZWxFbGVtZW50UG9zaXRpb24iLCJ2aWV3VG9Nb2RlbFBvc2l0aW9uIiwiZW5kIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUaGVybWFsRWxlbWVudERyYWdIYW5kbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIGRyYWcgaGFuZGxlciBmb3Igb2JqZWN0cyB0aGF0IGNhbiBiZSBtb3ZlZCBieSB0aGUgdXNlciwgdXNlZCB0byBjb25zdHJhaW4gb2JqZWN0cyB0byB0aGUgcGxheSBhcmVhIGFuZCB0byBwcmV2ZW50XHJcbiAqIHRoZW0gZnJvbSBiZWluZyBkcmFnZ2VkIHRocm91Z2ggb25lIGFub3RoZXJcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBlbmVyZ3lGb3Jtc0FuZENoYW5nZXMgZnJvbSAnLi4vLi4vZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLmpzJztcclxuXHJcbmNsYXNzIFRoZXJtYWxFbGVtZW50RHJhZ0hhbmRsZXIgZXh0ZW5kcyBEcmFnTGlzdGVuZXIge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1VzZXJNb3ZhYmxlTW9kZWxFbGVtZW50fSBtb2RlbEVsZW1lbnRcclxuICAgKiBAcGFyYW0ge05vZGV9IHNjcmVlblZpZXdDaGlsZE5vZGUgLSB0aGUgbm9kZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBjb252ZXJ0IHBvaW50ZXIgcG9zaXRpb25zIHRvIGdsb2JhbCBjb29yZGluYXRlc1xyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RyYWluUG9zaXRpb25cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW5Qcm9wZXJ0eX0gc2ltSXNQbGF5aW5nUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBtb2RlbEVsZW1lbnQsXHJcbiAgICBzY3JlZW5WaWV3Q2hpbGROb2RlLFxyXG4gICAgbW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgY29uc3RyYWluUG9zaXRpb24sXHJcbiAgICBzaW1Jc1BsYXlpbmdQcm9wZXJ0eSxcclxuICAgIHRhbmRlbVxyXG4gICkge1xyXG5cclxuICAgIGNvbnN0IGRyYWdTdGFydE9mZnNldCA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XHJcbiAgICBsZXQgY3VycmVudFRhcmdldCA9IG51bGw7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuXHJcbiAgICAgIC8vIGFsbG93IG1vdmluZyBhIGZpbmdlciAodG91Y2gpIGFjcm9zcyBhIHNjcmVlblZpZXdDaGlsZE5vZGUgdG8gcGljayBpdCB1cFxyXG4gICAgICBhbGxvd1RvdWNoU25hZzogdHJ1ZSxcclxuICAgICAgc3RhcnQ6IGV2ZW50ID0+IHtcclxuXHJcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBzaW0gaXMgcGxheWluZyB3aGVuIGFuIGVsZW1lbnQgaXMgZ3JhYmJlZCAtIHRoaXMgd2lsbCByZXN1bWUgdGhlIHNpbSBpZiBpdCBpcyBwYXVzZWRcclxuICAgICAgICBzaW1Jc1BsYXlpbmdQcm9wZXJ0eS52YWx1ZSA9IHRydWU7XHJcbiAgICAgICAgbW9kZWxFbGVtZW50LnVzZXJDb250cm9sbGVkUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcbiAgICAgICAgY29uc3QgbW9kZWxFbGVtZW50Vmlld1Bvc2l0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIG1vZGVsRWxlbWVudC5wb3NpdGlvblByb3BlcnR5LmdldCgpICk7XHJcbiAgICAgICAgY3VycmVudFRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XHJcbiAgICAgICAgY29uc3QgZHJhZ1N0YXJ0UG9zaXRpb24gPSBjdXJyZW50VGFyZ2V0Lmdsb2JhbFRvUGFyZW50UG9pbnQoIGV2ZW50LnBvaW50ZXIucG9pbnQgKTtcclxuICAgICAgICBkcmFnU3RhcnRPZmZzZXQuc2V0WFkoXHJcbiAgICAgICAgICBkcmFnU3RhcnRQb3NpdGlvbi54IC0gbW9kZWxFbGVtZW50Vmlld1Bvc2l0aW9uLngsXHJcbiAgICAgICAgICBkcmFnU3RhcnRQb3NpdGlvbi55IC0gbW9kZWxFbGVtZW50Vmlld1Bvc2l0aW9uLnlcclxuICAgICAgICApO1xyXG4gICAgICB9LFxyXG4gICAgICBkcmFnOiBldmVudCA9PiB7XHJcbiAgICAgICAgY29uc3QgZHJhZ1Bvc2l0aW9uID0gY3VycmVudFRhcmdldC5nbG9iYWxUb1BhcmVudFBvaW50KCBldmVudC5wb2ludGVyLnBvaW50ICk7XHJcbiAgICAgICAgY29uc3QgbW9kZWxFbGVtZW50Vmlld1Bvc2l0aW9uID0gZHJhZ1Bvc2l0aW9uLm1pbnVzKCBkcmFnU3RhcnRPZmZzZXQgKTtcclxuICAgICAgICBjb25zdCBtb2RlbEVsZW1lbnRQb3NpdGlvbiA9IG1vZGVsVmlld1RyYW5zZm9ybS52aWV3VG9Nb2RlbFBvc2l0aW9uKCBtb2RlbEVsZW1lbnRWaWV3UG9zaXRpb24gKTtcclxuICAgICAgICBtb2RlbEVsZW1lbnQucG9zaXRpb25Qcm9wZXJ0eS5zZXQoIGNvbnN0cmFpblBvc2l0aW9uKCBtb2RlbEVsZW1lbnQsIG1vZGVsRWxlbWVudFBvc2l0aW9uICkgKTtcclxuICAgICAgfSxcclxuICAgICAgZW5kOiAoKSA9PiB7XHJcbiAgICAgICAgbW9kZWxFbGVtZW50LnVzZXJDb250cm9sbGVkUHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG4gICAgICAgIGN1cnJlbnRUYXJnZXQgPSBudWxsO1xyXG4gICAgICB9LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLnJlZ2lzdGVyKCAnVGhlcm1hbEVsZW1lbnREcmFnSGFuZGxlcicsIFRoZXJtYWxFbGVtZW50RHJhZ0hhbmRsZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgVGhlcm1hbEVsZW1lbnREcmFnSGFuZGxlcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsWUFBWSxRQUFRLG1DQUFtQztBQUNoRSxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFFbEUsTUFBTUMseUJBQXlCLFNBQVNGLFlBQVksQ0FBQztFQUVuRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLFdBQVdBLENBQ1RDLFlBQVksRUFDWkMsbUJBQW1CLEVBQ25CQyxrQkFBa0IsRUFDbEJDLGlCQUFpQixFQUNqQkMsb0JBQW9CLEVBQ3BCQyxNQUFNLEVBQ047SUFFQSxNQUFNQyxlQUFlLEdBQUcsSUFBSVgsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFDM0MsSUFBSVksYUFBYSxHQUFHLElBQUk7SUFFeEIsS0FBSyxDQUFFO01BRUw7TUFDQUMsY0FBYyxFQUFFLElBQUk7TUFDcEJDLEtBQUssRUFBRUMsS0FBSyxJQUFJO1FBRWQ7UUFDQU4sb0JBQW9CLENBQUNPLEtBQUssR0FBRyxJQUFJO1FBQ2pDWCxZQUFZLENBQUNZLHNCQUFzQixDQUFDQyxHQUFHLENBQUUsSUFBSyxDQUFDO1FBQy9DLE1BQU1DLHdCQUF3QixHQUFHWixrQkFBa0IsQ0FBQ2EsbUJBQW1CLENBQUVmLFlBQVksQ0FBQ2dCLGdCQUFnQixDQUFDQyxHQUFHLENBQUMsQ0FBRSxDQUFDO1FBQzlHVixhQUFhLEdBQUdHLEtBQUssQ0FBQ0gsYUFBYTtRQUNuQyxNQUFNVyxpQkFBaUIsR0FBR1gsYUFBYSxDQUFDWSxtQkFBbUIsQ0FBRVQsS0FBSyxDQUFDVSxPQUFPLENBQUNDLEtBQU0sQ0FBQztRQUNsRmYsZUFBZSxDQUFDZ0IsS0FBSyxDQUNuQkosaUJBQWlCLENBQUNLLENBQUMsR0FBR1Qsd0JBQXdCLENBQUNTLENBQUMsRUFDaERMLGlCQUFpQixDQUFDTSxDQUFDLEdBQUdWLHdCQUF3QixDQUFDVSxDQUNqRCxDQUFDO01BQ0gsQ0FBQztNQUNEQyxJQUFJLEVBQUVmLEtBQUssSUFBSTtRQUNiLE1BQU1nQixZQUFZLEdBQUduQixhQUFhLENBQUNZLG1CQUFtQixDQUFFVCxLQUFLLENBQUNVLE9BQU8sQ0FBQ0MsS0FBTSxDQUFDO1FBQzdFLE1BQU1QLHdCQUF3QixHQUFHWSxZQUFZLENBQUNDLEtBQUssQ0FBRXJCLGVBQWdCLENBQUM7UUFDdEUsTUFBTXNCLG9CQUFvQixHQUFHMUIsa0JBQWtCLENBQUMyQixtQkFBbUIsQ0FBRWYsd0JBQXlCLENBQUM7UUFDL0ZkLFlBQVksQ0FBQ2dCLGdCQUFnQixDQUFDSCxHQUFHLENBQUVWLGlCQUFpQixDQUFFSCxZQUFZLEVBQUU0QixvQkFBcUIsQ0FBRSxDQUFDO01BQzlGLENBQUM7TUFDREUsR0FBRyxFQUFFQSxDQUFBLEtBQU07UUFDVDlCLFlBQVksQ0FBQ1ksc0JBQXNCLENBQUNDLEdBQUcsQ0FBRSxLQUFNLENBQUM7UUFDaEROLGFBQWEsR0FBRyxJQUFJO01BQ3RCLENBQUM7TUFDREYsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQVIscUJBQXFCLENBQUNrQyxRQUFRLENBQUUsMkJBQTJCLEVBQUVqQyx5QkFBMEIsQ0FBQztBQUN4RixlQUFlQSx5QkFBeUIifQ==