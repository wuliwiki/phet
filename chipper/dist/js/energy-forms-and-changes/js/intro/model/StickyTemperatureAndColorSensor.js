// Copyright 2014-2020, University of Colorado Boulder

/**
 * a temperature and color sensor that sticks to movable objects
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import ElementFollower from '../../common/model/ElementFollower.js';
import TemperatureAndColorSensor from '../../common/model/TemperatureAndColorSensor.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
class StickyTemperatureAndColorSensor extends TemperatureAndColorSensor {
  /**
   * @param {EFACIntroModel} model
   * @param {Vector2} initialPosition
   * @param {boolean} initiallyActive
   * @param {Object} [options]
   */
  constructor(model, initialPosition, initiallyActive, options) {
    super(model, initialPosition, initiallyActive, options);

    // @private
    this.elementFollower = new ElementFollower(this.positionProperty);

    // closure to test whether this is over a thermal model element and, if so, attach to it
    const followElements = () => {
      // sort blocks by zIndex so sensors stick to the highest one that the sensor is over
      const blocks = _.sortBy(model.blockGroup.getArrayCopy(), block => block.zIndex);
      blocks.forEach(block => {
        if (block.getProjectedShape().containsPoint(this.positionProperty.value)) {
          // stick to this block
          this.elementFollower.startFollowing(block.positionProperty);
        }
      });
      if (!this.elementFollower.isFollowing()) {
        model.beakerGroup.forEach(beaker => {
          if (beaker.thermalContactArea.containsPoint(this.positionProperty.value)) {
            // stick to this beaker
            this.elementFollower.startFollowing(beaker.positionProperty);
          }
        });
      }
    };

    // Monitor the state of the 'userControlled' Property in order to detect when the user drops this thermometer and
    // determine whether or not it was dropped over anything to which it should stick.
    this.userControlledProperty.link(userControlled => {
      // if being dragged, stop following any objects
      if (userControlled) {
        this.elementFollower.stopFollowing();
      }

      // if the thermometer was dropped, see if it was dropped over something that it should follow
      else {
        followElements();
      }
    });
    this.sensedElementColorProperty.link(() => {
      if (this.elementFollower.isFollowing()) {
        model.beakerGroup.forEach(beaker => {
          if (beaker.bounds.containsPoint(this.positionProperty.value) && !beaker.thermalContactArea.containsPoint(this.positionProperty.value)) {
            // stop following this beaker
            this.elementFollower.stopFollowing();
          }
        });
      }
    });

    // Make sure that the following state is set properly when state is set via phet-io.
    phet.joist.sim.isSettingPhetioStateProperty.lazyLink(settingPhetIoState => {
      if (settingPhetIoState) {
        if (this.elementFollower.isFollowing()) {
          // If this is following a model element at the beginning of state setting, unfollow so that it doesn't prevent
          // the model element from moving.  The conditions will be reevaluated at the end of state setting, and the
          // follower will be turned back on if appropriate.
          this.elementFollower.stopFollowing();
        }
      } else {
        // Figure out if this should be following another element.
        if (this.activeProperty.value && !this.userControlledProperty.value) {
          followElements();
        }
      }
    });
  }

  /**
   * restore initial state
   * @public
   */
  reset() {
    this.elementFollower.stopFollowing();
    super.reset();
  }
}
energyFormsAndChanges.register('StickyTemperatureAndColorSensor', StickyTemperatureAndColorSensor);
export default StickyTemperatureAndColorSensor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbGVtZW50Rm9sbG93ZXIiLCJUZW1wZXJhdHVyZUFuZENvbG9yU2Vuc29yIiwiZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIiwiU3RpY2t5VGVtcGVyYXR1cmVBbmRDb2xvclNlbnNvciIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJpbml0aWFsUG9zaXRpb24iLCJpbml0aWFsbHlBY3RpdmUiLCJvcHRpb25zIiwiZWxlbWVudEZvbGxvd2VyIiwicG9zaXRpb25Qcm9wZXJ0eSIsImZvbGxvd0VsZW1lbnRzIiwiYmxvY2tzIiwiXyIsInNvcnRCeSIsImJsb2NrR3JvdXAiLCJnZXRBcnJheUNvcHkiLCJibG9jayIsInpJbmRleCIsImZvckVhY2giLCJnZXRQcm9qZWN0ZWRTaGFwZSIsImNvbnRhaW5zUG9pbnQiLCJ2YWx1ZSIsInN0YXJ0Rm9sbG93aW5nIiwiaXNGb2xsb3dpbmciLCJiZWFrZXJHcm91cCIsImJlYWtlciIsInRoZXJtYWxDb250YWN0QXJlYSIsInVzZXJDb250cm9sbGVkUHJvcGVydHkiLCJsaW5rIiwidXNlckNvbnRyb2xsZWQiLCJzdG9wRm9sbG93aW5nIiwic2Vuc2VkRWxlbWVudENvbG9yUHJvcGVydHkiLCJib3VuZHMiLCJwaGV0Iiwiam9pc3QiLCJzaW0iLCJpc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5IiwibGF6eUxpbmsiLCJzZXR0aW5nUGhldElvU3RhdGUiLCJhY3RpdmVQcm9wZXJ0eSIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdGlja3lUZW1wZXJhdHVyZUFuZENvbG9yU2Vuc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIGEgdGVtcGVyYXR1cmUgYW5kIGNvbG9yIHNlbnNvciB0aGF0IHN0aWNrcyB0byBtb3ZhYmxlIG9iamVjdHNcclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBFbGVtZW50Rm9sbG93ZXIgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0VsZW1lbnRGb2xsb3dlci5qcyc7XHJcbmltcG9ydCBUZW1wZXJhdHVyZUFuZENvbG9yU2Vuc29yIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9UZW1wZXJhdHVyZUFuZENvbG9yU2Vuc29yLmpzJztcclxuaW1wb3J0IGVuZXJneUZvcm1zQW5kQ2hhbmdlcyBmcm9tICcuLi8uLi9lbmVyZ3lGb3Jtc0FuZENoYW5nZXMuanMnO1xyXG5cclxuY2xhc3MgU3RpY2t5VGVtcGVyYXR1cmVBbmRDb2xvclNlbnNvciBleHRlbmRzIFRlbXBlcmF0dXJlQW5kQ29sb3JTZW5zb3Ige1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0VGQUNJbnRyb01vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gaW5pdGlhbFBvc2l0aW9uXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0aWFsbHlBY3RpdmVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBpbml0aWFsUG9zaXRpb24sIGluaXRpYWxseUFjdGl2ZSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCBtb2RlbCwgaW5pdGlhbFBvc2l0aW9uLCBpbml0aWFsbHlBY3RpdmUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5lbGVtZW50Rm9sbG93ZXIgPSBuZXcgRWxlbWVudEZvbGxvd2VyKCB0aGlzLnBvc2l0aW9uUHJvcGVydHkgKTtcclxuXHJcbiAgICAvLyBjbG9zdXJlIHRvIHRlc3Qgd2hldGhlciB0aGlzIGlzIG92ZXIgYSB0aGVybWFsIG1vZGVsIGVsZW1lbnQgYW5kLCBpZiBzbywgYXR0YWNoIHRvIGl0XHJcbiAgICBjb25zdCBmb2xsb3dFbGVtZW50cyA9ICgpID0+IHtcclxuXHJcbiAgICAgIC8vIHNvcnQgYmxvY2tzIGJ5IHpJbmRleCBzbyBzZW5zb3JzIHN0aWNrIHRvIHRoZSBoaWdoZXN0IG9uZSB0aGF0IHRoZSBzZW5zb3IgaXMgb3ZlclxyXG4gICAgICBjb25zdCBibG9ja3MgPSBfLnNvcnRCeSggbW9kZWwuYmxvY2tHcm91cC5nZXRBcnJheUNvcHkoKSwgYmxvY2sgPT4gYmxvY2suekluZGV4ICk7XHJcblxyXG4gICAgICBibG9ja3MuZm9yRWFjaCggYmxvY2sgPT4ge1xyXG4gICAgICAgIGlmICggYmxvY2suZ2V0UHJvamVjdGVkU2hhcGUoKS5jb250YWluc1BvaW50KCB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgKSApIHtcclxuXHJcbiAgICAgICAgICAvLyBzdGljayB0byB0aGlzIGJsb2NrXHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnRGb2xsb3dlci5zdGFydEZvbGxvd2luZyggYmxvY2sucG9zaXRpb25Qcm9wZXJ0eSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSApO1xyXG5cclxuICAgICAgaWYgKCAhdGhpcy5lbGVtZW50Rm9sbG93ZXIuaXNGb2xsb3dpbmcoKSApIHtcclxuICAgICAgICBtb2RlbC5iZWFrZXJHcm91cC5mb3JFYWNoKCBiZWFrZXIgPT4ge1xyXG4gICAgICAgICAgaWYgKCBiZWFrZXIudGhlcm1hbENvbnRhY3RBcmVhLmNvbnRhaW5zUG9pbnQoIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSApICkge1xyXG5cclxuICAgICAgICAgICAgLy8gc3RpY2sgdG8gdGhpcyBiZWFrZXJcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50Rm9sbG93ZXIuc3RhcnRGb2xsb3dpbmcoIGJlYWtlci5wb3NpdGlvblByb3BlcnR5ICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE1vbml0b3IgdGhlIHN0YXRlIG9mIHRoZSAndXNlckNvbnRyb2xsZWQnIFByb3BlcnR5IGluIG9yZGVyIHRvIGRldGVjdCB3aGVuIHRoZSB1c2VyIGRyb3BzIHRoaXMgdGhlcm1vbWV0ZXIgYW5kXHJcbiAgICAvLyBkZXRlcm1pbmUgd2hldGhlciBvciBub3QgaXQgd2FzIGRyb3BwZWQgb3ZlciBhbnl0aGluZyB0byB3aGljaCBpdCBzaG91bGQgc3RpY2suXHJcbiAgICB0aGlzLnVzZXJDb250cm9sbGVkUHJvcGVydHkubGluayggdXNlckNvbnRyb2xsZWQgPT4ge1xyXG5cclxuICAgICAgLy8gaWYgYmVpbmcgZHJhZ2dlZCwgc3RvcCBmb2xsb3dpbmcgYW55IG9iamVjdHNcclxuICAgICAgaWYgKCB1c2VyQ29udHJvbGxlZCApIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRGb2xsb3dlci5zdG9wRm9sbG93aW5nKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGlmIHRoZSB0aGVybW9tZXRlciB3YXMgZHJvcHBlZCwgc2VlIGlmIGl0IHdhcyBkcm9wcGVkIG92ZXIgc29tZXRoaW5nIHRoYXQgaXQgc2hvdWxkIGZvbGxvd1xyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBmb2xsb3dFbGVtZW50cygpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5zZW5zZWRFbGVtZW50Q29sb3JQcm9wZXJ0eS5saW5rKCAoKSA9PiB7XHJcbiAgICAgIGlmICggdGhpcy5lbGVtZW50Rm9sbG93ZXIuaXNGb2xsb3dpbmcoKSApIHtcclxuICAgICAgICBtb2RlbC5iZWFrZXJHcm91cC5mb3JFYWNoKCBiZWFrZXIgPT4ge1xyXG4gICAgICAgICAgaWYgKCBiZWFrZXIuYm91bmRzLmNvbnRhaW5zUG9pbnQoIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSApICYmXHJcbiAgICAgICAgICAgICAgICFiZWFrZXIudGhlcm1hbENvbnRhY3RBcmVhLmNvbnRhaW5zUG9pbnQoIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSApICkge1xyXG5cclxuICAgICAgICAgICAgLy8gc3RvcCBmb2xsb3dpbmcgdGhpcyBiZWFrZXJcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50Rm9sbG93ZXIuc3RvcEZvbGxvd2luZygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBmb2xsb3dpbmcgc3RhdGUgaXMgc2V0IHByb3Blcmx5IHdoZW4gc3RhdGUgaXMgc2V0IHZpYSBwaGV0LWlvLlxyXG4gICAgcGhldC5qb2lzdC5zaW0uaXNTZXR0aW5nUGhldGlvU3RhdGVQcm9wZXJ0eS5sYXp5TGluayggc2V0dGluZ1BoZXRJb1N0YXRlID0+IHtcclxuXHJcbiAgICAgIGlmICggc2V0dGluZ1BoZXRJb1N0YXRlICkge1xyXG5cclxuICAgICAgICBpZiAoIHRoaXMuZWxlbWVudEZvbGxvd2VyLmlzRm9sbG93aW5nKCkgKSB7XHJcblxyXG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBmb2xsb3dpbmcgYSBtb2RlbCBlbGVtZW50IGF0IHRoZSBiZWdpbm5pbmcgb2Ygc3RhdGUgc2V0dGluZywgdW5mb2xsb3cgc28gdGhhdCBpdCBkb2Vzbid0IHByZXZlbnRcclxuICAgICAgICAgIC8vIHRoZSBtb2RlbCBlbGVtZW50IGZyb20gbW92aW5nLiAgVGhlIGNvbmRpdGlvbnMgd2lsbCBiZSByZWV2YWx1YXRlZCBhdCB0aGUgZW5kIG9mIHN0YXRlIHNldHRpbmcsIGFuZCB0aGVcclxuICAgICAgICAgIC8vIGZvbGxvd2VyIHdpbGwgYmUgdHVybmVkIGJhY2sgb24gaWYgYXBwcm9wcmlhdGUuXHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnRGb2xsb3dlci5zdG9wRm9sbG93aW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAvLyBGaWd1cmUgb3V0IGlmIHRoaXMgc2hvdWxkIGJlIGZvbGxvd2luZyBhbm90aGVyIGVsZW1lbnQuXHJcbiAgICAgICAgaWYgKCB0aGlzLmFjdGl2ZVByb3BlcnR5LnZhbHVlICYmICF0aGlzLnVzZXJDb250cm9sbGVkUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgICAgICBmb2xsb3dFbGVtZW50cygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmVzdG9yZSBpbml0aWFsIHN0YXRlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5lbGVtZW50Rm9sbG93ZXIuc3RvcEZvbGxvd2luZygpO1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ1N0aWNreVRlbXBlcmF0dXJlQW5kQ29sb3JTZW5zb3InLCBTdGlja3lUZW1wZXJhdHVyZUFuZENvbG9yU2Vuc29yICk7XHJcbmV4cG9ydCBkZWZhdWx0IFN0aWNreVRlbXBlcmF0dXJlQW5kQ29sb3JTZW5zb3I7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHVDQUF1QztBQUNuRSxPQUFPQyx5QkFBeUIsTUFBTSxpREFBaUQ7QUFDdkYsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBRWxFLE1BQU1DLCtCQUErQixTQUFTRix5QkFBeUIsQ0FBQztFQUV0RTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxlQUFlLEVBQUVDLGVBQWUsRUFBRUMsT0FBTyxFQUFHO0lBQzlELEtBQUssQ0FBRUgsS0FBSyxFQUFFQyxlQUFlLEVBQUVDLGVBQWUsRUFBRUMsT0FBUSxDQUFDOztJQUV6RDtJQUNBLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUlULGVBQWUsQ0FBRSxJQUFJLENBQUNVLGdCQUFpQixDQUFDOztJQUVuRTtJQUNBLE1BQU1D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