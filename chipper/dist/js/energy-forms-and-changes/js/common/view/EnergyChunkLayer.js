// Copyright 2014-2021, University of Colorado Boulder

/**
 * This node monitors the comings and goings of energy chunks on a observable list and adds/removes nodes that
 * correspond to each.  This is intended to be used in other view nodes that represent model elements that contain
 * energy chunks.
 *
 * This was done as a separate class so that it could be used in composition rather than inheritance, because
 * composition allows better control over the layering within the parent view node.
 *
 * @author John Blanco
 */

import merge from '../../../../phet-core/js/merge.js';
import { Node } from '../../../../scenery/js/imports.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergyChunkNode from './EnergyChunkNode.js';
class EnergyChunkLayer extends Node {
  /**
   * @param {ObservableArrayDef} energyChunkList
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Object} [options]
   */
  constructor(energyChunkList, modelViewTransform, options) {
    super();
    options = merge({
      // Property.<Vector2> - a position Property that will be used to compensate the energy chunk layer's position
      // such that it stays in untranslated screen-view coordinates. This is often used for an energy chunk layer that
      // is the child of a node that is being placed in the view according to its position value.
      parentPositionProperty: null
    }, options);

    // This function adds EnergyChunkNodes to the layer when chunks are produced in the model. It includes listeners for
    // when chunks are removed from the model.
    const chunkAddedListener = energyChunk => {
      // create and add a node to represent the energy chunk
      const energyChunkNode = new EnergyChunkNode(energyChunk, modelViewTransform);
      this.addChild(energyChunkNode);

      // when chunk is removed from the model, remove its node from the view
      const itemRemovedListener = removedChunk => {
        if (removedChunk === energyChunk) {
          this.removeChild(energyChunkNode);
          energyChunkNode.dispose();

          // remove this listener to avoid leaking memory
          energyChunkList.removeItemRemovedListener(itemRemovedListener);
        }
      };

      // link itemRemovedListener
      energyChunkList.addItemRemovedListener(itemRemovedListener);
    };

    // add the named observer function for existing chunks and new chunks
    energyChunkList.forEach(chunkAddedListener);
    energyChunkList.addItemAddedListener(chunkAddedListener);
    if (options.parentPositionProperty) {
      // Since the energy chunk positions are in uncompensated model coordinates, this node must maintain a position
      // that is offset from the parent in order for the energy chunks to be in the correct position in the view.
      options.parentPositionProperty.link(position => {
        this.x = -modelViewTransform.modelToViewX(position.x);
        this.y = -modelViewTransform.modelToViewY(position.y);
      });
    }
  }
}
energyFormsAndChanges.register('EnergyChunkLayer', EnergyChunkLayer);
export default EnergyChunkLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJlbmVyZ3lGb3Jtc0FuZENoYW5nZXMiLCJFbmVyZ3lDaHVua05vZGUiLCJFbmVyZ3lDaHVua0xheWVyIiwiY29uc3RydWN0b3IiLCJlbmVyZ3lDaHVua0xpc3QiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJvcHRpb25zIiwicGFyZW50UG9zaXRpb25Qcm9wZXJ0eSIsImNodW5rQWRkZWRMaXN0ZW5lciIsImVuZXJneUNodW5rIiwiZW5lcmd5Q2h1bmtOb2RlIiwiYWRkQ2hpbGQiLCJpdGVtUmVtb3ZlZExpc3RlbmVyIiwicmVtb3ZlZENodW5rIiwicmVtb3ZlQ2hpbGQiLCJkaXNwb3NlIiwicmVtb3ZlSXRlbVJlbW92ZWRMaXN0ZW5lciIsImFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIiLCJmb3JFYWNoIiwiYWRkSXRlbUFkZGVkTGlzdGVuZXIiLCJsaW5rIiwicG9zaXRpb24iLCJ4IiwibW9kZWxUb1ZpZXdYIiwieSIsIm1vZGVsVG9WaWV3WSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5lcmd5Q2h1bmtMYXllci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIG5vZGUgbW9uaXRvcnMgdGhlIGNvbWluZ3MgYW5kIGdvaW5ncyBvZiBlbmVyZ3kgY2h1bmtzIG9uIGEgb2JzZXJ2YWJsZSBsaXN0IGFuZCBhZGRzL3JlbW92ZXMgbm9kZXMgdGhhdFxyXG4gKiBjb3JyZXNwb25kIHRvIGVhY2guICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgaW4gb3RoZXIgdmlldyBub2RlcyB0aGF0IHJlcHJlc2VudCBtb2RlbCBlbGVtZW50cyB0aGF0IGNvbnRhaW5cclxuICogZW5lcmd5IGNodW5rcy5cclxuICpcclxuICogVGhpcyB3YXMgZG9uZSBhcyBhIHNlcGFyYXRlIGNsYXNzIHNvIHRoYXQgaXQgY291bGQgYmUgdXNlZCBpbiBjb21wb3NpdGlvbiByYXRoZXIgdGhhbiBpbmhlcml0YW5jZSwgYmVjYXVzZVxyXG4gKiBjb21wb3NpdGlvbiBhbGxvd3MgYmV0dGVyIGNvbnRyb2wgb3ZlciB0aGUgbGF5ZXJpbmcgd2l0aGluIHRoZSBwYXJlbnQgdmlldyBub2RlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIGZyb20gJy4uLy4uL2VuZXJneUZvcm1zQW5kQ2hhbmdlcy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lDaHVua05vZGUgZnJvbSAnLi9FbmVyZ3lDaHVua05vZGUuanMnO1xyXG5cclxuY2xhc3MgRW5lcmd5Q2h1bmtMYXllciBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09ic2VydmFibGVBcnJheURlZn0gZW5lcmd5Q2h1bmtMaXN0XHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGVuZXJneUNodW5rTGlzdCwgbW9kZWxWaWV3VHJhbnNmb3JtLCBvcHRpb25zICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIC8vIFByb3BlcnR5LjxWZWN0b3IyPiAtIGEgcG9zaXRpb24gUHJvcGVydHkgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY29tcGVuc2F0ZSB0aGUgZW5lcmd5IGNodW5rIGxheWVyJ3MgcG9zaXRpb25cclxuICAgICAgLy8gc3VjaCB0aGF0IGl0IHN0YXlzIGluIHVudHJhbnNsYXRlZCBzY3JlZW4tdmlldyBjb29yZGluYXRlcy4gVGhpcyBpcyBvZnRlbiB1c2VkIGZvciBhbiBlbmVyZ3kgY2h1bmsgbGF5ZXIgdGhhdFxyXG4gICAgICAvLyBpcyB0aGUgY2hpbGQgb2YgYSBub2RlIHRoYXQgaXMgYmVpbmcgcGxhY2VkIGluIHRoZSB2aWV3IGFjY29yZGluZyB0byBpdHMgcG9zaXRpb24gdmFsdWUuXHJcbiAgICAgIHBhcmVudFBvc2l0aW9uUHJvcGVydHk6IG51bGxcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFkZHMgRW5lcmd5Q2h1bmtOb2RlcyB0byB0aGUgbGF5ZXIgd2hlbiBjaHVua3MgYXJlIHByb2R1Y2VkIGluIHRoZSBtb2RlbC4gSXQgaW5jbHVkZXMgbGlzdGVuZXJzIGZvclxyXG4gICAgLy8gd2hlbiBjaHVua3MgYXJlIHJlbW92ZWQgZnJvbSB0aGUgbW9kZWwuXHJcbiAgICBjb25zdCBjaHVua0FkZGVkTGlzdGVuZXIgPSBlbmVyZ3lDaHVuayA9PiB7XHJcblxyXG4gICAgICAvLyBjcmVhdGUgYW5kIGFkZCBhIG5vZGUgdG8gcmVwcmVzZW50IHRoZSBlbmVyZ3kgY2h1bmtcclxuICAgICAgY29uc3QgZW5lcmd5Q2h1bmtOb2RlID0gbmV3IEVuZXJneUNodW5rTm9kZSggZW5lcmd5Q2h1bmssIG1vZGVsVmlld1RyYW5zZm9ybSApO1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCBlbmVyZ3lDaHVua05vZGUgKTtcclxuXHJcbiAgICAgIC8vIHdoZW4gY2h1bmsgaXMgcmVtb3ZlZCBmcm9tIHRoZSBtb2RlbCwgcmVtb3ZlIGl0cyBub2RlIGZyb20gdGhlIHZpZXdcclxuICAgICAgY29uc3QgaXRlbVJlbW92ZWRMaXN0ZW5lciA9IHJlbW92ZWRDaHVuayA9PiB7XHJcbiAgICAgICAgaWYgKCByZW1vdmVkQ2h1bmsgPT09IGVuZXJneUNodW5rICkge1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZCggZW5lcmd5Q2h1bmtOb2RlICk7XHJcbiAgICAgICAgICBlbmVyZ3lDaHVua05vZGUuZGlzcG9zZSgpO1xyXG5cclxuICAgICAgICAgIC8vIHJlbW92ZSB0aGlzIGxpc3RlbmVyIHRvIGF2b2lkIGxlYWtpbmcgbWVtb3J5XHJcbiAgICAgICAgICBlbmVyZ3lDaHVua0xpc3QucmVtb3ZlSXRlbVJlbW92ZWRMaXN0ZW5lciggaXRlbVJlbW92ZWRMaXN0ZW5lciApO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIGxpbmsgaXRlbVJlbW92ZWRMaXN0ZW5lclxyXG4gICAgICBlbmVyZ3lDaHVua0xpc3QuYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciggaXRlbVJlbW92ZWRMaXN0ZW5lciApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIG5hbWVkIG9ic2VydmVyIGZ1bmN0aW9uIGZvciBleGlzdGluZyBjaHVua3MgYW5kIG5ldyBjaHVua3NcclxuICAgIGVuZXJneUNodW5rTGlzdC5mb3JFYWNoKCBjaHVua0FkZGVkTGlzdGVuZXIgKTtcclxuICAgIGVuZXJneUNodW5rTGlzdC5hZGRJdGVtQWRkZWRMaXN0ZW5lciggY2h1bmtBZGRlZExpc3RlbmVyICk7XHJcblxyXG4gICAgaWYgKCBvcHRpb25zLnBhcmVudFBvc2l0aW9uUHJvcGVydHkgKSB7XHJcblxyXG4gICAgICAvLyBTaW5jZSB0aGUgZW5lcmd5IGNodW5rIHBvc2l0aW9ucyBhcmUgaW4gdW5jb21wZW5zYXRlZCBtb2RlbCBjb29yZGluYXRlcywgdGhpcyBub2RlIG11c3QgbWFpbnRhaW4gYSBwb3NpdGlvblxyXG4gICAgICAvLyB0aGF0IGlzIG9mZnNldCBmcm9tIHRoZSBwYXJlbnQgaW4gb3JkZXIgZm9yIHRoZSBlbmVyZ3kgY2h1bmtzIHRvIGJlIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSB2aWV3LlxyXG4gICAgICBvcHRpb25zLnBhcmVudFBvc2l0aW9uUHJvcGVydHkubGluayggcG9zaXRpb24gPT4ge1xyXG4gICAgICAgIHRoaXMueCA9IC1tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBwb3NpdGlvbi54ICk7XHJcbiAgICAgICAgdGhpcy55ID0gLW1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIHBvc2l0aW9uLnkgKTtcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLnJlZ2lzdGVyKCAnRW5lcmd5Q2h1bmtMYXllcicsIEVuZXJneUNodW5rTGF5ZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgRW5lcmd5Q2h1bmtMYXllcjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBQ2xFLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFbEQsTUFBTUMsZ0JBQWdCLFNBQVNILElBQUksQ0FBQztFQUVsQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLGVBQWUsRUFBRUMsa0JBQWtCLEVBQUVDLE9BQU8sRUFBRztJQUMxRCxLQUFLLENBQUMsQ0FBQztJQUVQQSxPQUFPLEdBQUdSLEtBQUssQ0FBRTtNQUVmO01BQ0E7TUFDQTtNQUNBUyxzQkFBc0IsRUFBRTtJQUMxQixDQUFDLEVBQUVELE9BQVEsQ0FBQzs7SUFFWjtJQUNBO0lBQ0EsTUFBTUUsa0JBQWtCLEdBQUdDLFdBQVcsSUFBSTtNQUV4QztNQUNBLE1BQU1DLGVBQWUsR0FBRyxJQUFJVCxlQUFlLENBQUVRLFdBQVcsRUFBRUosa0JBQW1CLENBQUM7TUFDOUUsSUFBSSxDQUFDTSxRQUFRLENBQUVELGVBQWdCLENBQUM7O01BRWhDO01BQ0EsTUFBTUUsbUJBQW1CLEdBQUdDLFlBQVksSUFBSTtRQUMxQyxJQUFLQSxZQUFZLEtBQUtKLFdBQVcsRUFBRztVQUNsQyxJQUFJLENBQUNLLFdBQVcsQ0FBRUosZUFBZ0IsQ0FBQztVQUNuQ0EsZUFBZSxDQUFDSyxPQUFPLENBQUMsQ0FBQzs7VUFFekI7VUFDQVgsZUFBZSxDQUFDWSx5QkFBeUIsQ0FBRUosbUJBQW9CLENBQUM7UUFDbEU7TUFDRixDQUFDOztNQUVEO01BQ0FSLGVBQWUsQ0FBQ2Esc0JBQXNCLENBQUVMLG1CQUFvQixDQUFDO0lBQy9ELENBQUM7O0lBRUQ7SUFDQVIsZUFBZSxDQUFDYyxPQUFPLENBQUVWLGtCQUFtQixDQUFDO0lBQzdDSixlQUFlLENBQUNlLG9CQUFvQixDQUFFWCxrQkFBbUIsQ0FBQztJQUUxRCxJQUFLRixPQUFPLENBQUNDLHNCQUFzQixFQUFHO01BRXBDO01BQ0E7TUFDQUQsT0FBTyxDQUFDQyxzQkFBc0IsQ0FBQ2EsSUFBSSxDQUFFQyxRQUFRLElBQUk7UUFDL0MsSUFBSSxDQUFDQyxDQUFDLEdBQUcsQ0FBQ2pCLGtCQUFrQixDQUFDa0IsWUFBWSxDQUFFRixRQUFRLENBQUNDLENBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUNFLENBQUMsR0FBRyxDQUFDbkIsa0JBQWtCLENBQUNvQixZQUFZLENBQUVKLFFBQVEsQ0FBQ0csQ0FBRSxDQUFDO01BQ3pELENBQUUsQ0FBQztJQUNMO0VBQ0Y7QUFDRjtBQUVBeEIscUJBQXFCLENBQUMwQixRQUFRLENBQUUsa0JBQWtCLEVBQUV4QixnQkFBaUIsQ0FBQztBQUN0RSxlQUFlQSxnQkFBZ0IifQ==