// Copyright 2020, University of Colorado Boulder

/**
 * PhetioGroup for creating EnergyChunks. This type adds support for dynamically created and destroyed, instrumented
 * PhET-iO elements.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetioGroup from '../../../../tandem/js/PhetioGroup.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergyChunk from './EnergyChunk.js';
import EnergyType from './EnergyType.js';
class EnergyChunkGroup extends PhetioGroup {
  /**
   * @param {BooleanProperty} energyChunksVisibleProperty - used to create the archetype
   * @param {Object} [options]
   */
  constructor(energyChunksVisibleProperty, options) {
    options = merge({
      tandem: Tandem.REQUIRED,
      phetioType: PhetioGroup.PhetioGroupIO(EnergyChunk.EnergyChunkIO)
    }, options);
    super(EnergyChunkGroup.createEnergyChunk, [EnergyType.THERMAL, Vector2.ZERO, Vector2.ZERO, energyChunksVisibleProperty, {}], options);
  }

  // @public
  static createEnergyChunk(tandem, energyType, position, velocity, visibleProperty, options) {
    assert && options && assert(!options.hasOwnProperty('tandem'), 'EnergyChunkGroup supplies its own tandem');
    return new EnergyChunk(energyType, position, velocity, visibleProperty, merge({
      tandem: tandem
    }, options));
  }
}
energyFormsAndChanges.register('EnergyChunkGroup', EnergyChunkGroup);
export default EnergyChunkGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwibWVyZ2UiLCJQaGV0aW9Hcm91cCIsIlRhbmRlbSIsImVuZXJneUZvcm1zQW5kQ2hhbmdlcyIsIkVuZXJneUNodW5rIiwiRW5lcmd5VHlwZSIsIkVuZXJneUNodW5rR3JvdXAiLCJjb25zdHJ1Y3RvciIsImVuZXJneUNodW5rc1Zpc2libGVQcm9wZXJ0eSIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsInBoZXRpb1R5cGUiLCJQaGV0aW9Hcm91cElPIiwiRW5lcmd5Q2h1bmtJTyIsImNyZWF0ZUVuZXJneUNodW5rIiwiVEhFUk1BTCIsIlpFUk8iLCJlbmVyZ3lUeXBlIiwicG9zaXRpb24iLCJ2ZWxvY2l0eSIsInZpc2libGVQcm9wZXJ0eSIsImFzc2VydCIsImhhc093blByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbmVyZ3lDaHVua0dyb3VwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQaGV0aW9Hcm91cCBmb3IgY3JlYXRpbmcgRW5lcmd5Q2h1bmtzLiBUaGlzIHR5cGUgYWRkcyBzdXBwb3J0IGZvciBkeW5hbWljYWxseSBjcmVhdGVkIGFuZCBkZXN0cm95ZWQsIGluc3RydW1lbnRlZFxyXG4gKiBQaEVULWlPIGVsZW1lbnRzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFBoZXRpb0dyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9Hcm91cC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBlbmVyZ3lGb3Jtc0FuZENoYW5nZXMgZnJvbSAnLi4vLi4vZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLmpzJztcclxuaW1wb3J0IEVuZXJneUNodW5rIGZyb20gJy4vRW5lcmd5Q2h1bmsuanMnO1xyXG5pbXBvcnQgRW5lcmd5VHlwZSBmcm9tICcuL0VuZXJneVR5cGUuanMnO1xyXG5cclxuY2xhc3MgRW5lcmd5Q2h1bmtHcm91cCBleHRlbmRzIFBoZXRpb0dyb3VwIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IGVuZXJneUNodW5rc1Zpc2libGVQcm9wZXJ0eSAtIHVzZWQgdG8gY3JlYXRlIHRoZSBhcmNoZXR5cGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGVuZXJneUNodW5rc1Zpc2libGVQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHBoZXRpb1R5cGU6IFBoZXRpb0dyb3VwLlBoZXRpb0dyb3VwSU8oIEVuZXJneUNodW5rLkVuZXJneUNodW5rSU8gKVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICBFbmVyZ3lDaHVua0dyb3VwLmNyZWF0ZUVuZXJneUNodW5rLFxyXG4gICAgICBbIEVuZXJneVR5cGUuVEhFUk1BTCwgVmVjdG9yMi5aRVJPLCBWZWN0b3IyLlpFUk8sIGVuZXJneUNodW5rc1Zpc2libGVQcm9wZXJ0eSwge30gXSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBzdGF0aWMgY3JlYXRlRW5lcmd5Q2h1bmsoIHRhbmRlbSwgZW5lcmd5VHlwZSwgcG9zaXRpb24sIHZlbG9jaXR5LCB2aXNpYmxlUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcbiAgICBhc3NlcnQgJiYgb3B0aW9ucyAmJiBhc3NlcnQoICFvcHRpb25zLmhhc093blByb3BlcnR5KCAndGFuZGVtJyApLCAnRW5lcmd5Q2h1bmtHcm91cCBzdXBwbGllcyBpdHMgb3duIHRhbmRlbScgKTtcclxuICAgIHJldHVybiBuZXcgRW5lcmd5Q2h1bmsoIGVuZXJneVR5cGUsIHBvc2l0aW9uLCB2ZWxvY2l0eSwgdmlzaWJsZVByb3BlcnR5LCBtZXJnZSggeyB0YW5kZW06IHRhbmRlbSB9LCBvcHRpb25zICkgKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ0VuZXJneUNodW5rR3JvdXAnLCBFbmVyZ3lDaHVua0dyb3VwICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVuZXJneUNodW5rR3JvdXA7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSxzQ0FBc0M7QUFDOUQsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxVQUFVLE1BQU0saUJBQWlCO0FBRXhDLE1BQU1DLGdCQUFnQixTQUFTTCxXQUFXLENBQUM7RUFFekM7QUFDRjtBQUNBO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsMkJBQTJCLEVBQUVDLE9BQU8sRUFBRztJQUVsREEsT0FBTyxHQUFHVCxLQUFLLENBQUU7TUFDZlUsTUFBTSxFQUFFUixNQUFNLENBQUNTLFFBQVE7TUFDdkJDLFVBQVUsRUFBRVgsV0FBVyxDQUFDWSxhQUFhLENBQUVULFdBQVcsQ0FBQ1UsYUFBYztJQUNuRSxDQUFDLEVBQUVMLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FDSEgsZ0JBQWdCLENBQUNTLGlCQUFpQixFQUNsQyxDQUFFVixVQUFVLENBQUNXLE9BQU8sRUFBRWpCLE9BQU8sQ0FBQ2tCLElBQUksRUFBRWxCLE9BQU8sQ0FBQ2tCLElBQUksRUFBRVQsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLENBQUUsRUFDbkZDLE9BQ0YsQ0FBQztFQUNIOztFQUVBO0VBQ0EsT0FBT00saUJBQWlCQSxDQUFFTCxNQUFNLEVBQUVRLFVBQVUsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLGVBQWUsRUFBRVosT0FBTyxFQUFHO0lBQzNGYSxNQUFNLElBQUliLE9BQU8sSUFBSWEsTUFBTSxDQUFFLENBQUNiLE9BQU8sQ0FBQ2MsY0FBYyxDQUFFLFFBQVMsQ0FBQyxFQUFFLDBDQUEyQyxDQUFDO0lBQzlHLE9BQU8sSUFBSW5CLFdBQVcsQ0FBRWMsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsZUFBZSxFQUFFckIsS0FBSyxDQUFFO01BQUVVLE1BQU0sRUFBRUE7SUFBTyxDQUFDLEVBQUVELE9BQVEsQ0FBRSxDQUFDO0VBQ2pIO0FBQ0Y7QUFFQU4scUJBQXFCLENBQUNxQixRQUFRLENBQUUsa0JBQWtCLEVBQUVsQixnQkFBaUIsQ0FBQztBQUN0RSxlQUFlQSxnQkFBZ0IifQ==