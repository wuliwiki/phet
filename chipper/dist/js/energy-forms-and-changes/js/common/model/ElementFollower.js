// Copyright 2016-2021, University of Colorado Boulder

/**
 * An object that makes it easy for one model element to follow another one around.  This was originally created to
 * allow the thermometer to stick to the blocks and beaker when they are dragged, though it may have other uses.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 * @author Andrew Adare
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
class ElementFollower {
  /**
   * @param {Property.<Vector2>} trackedPositionProperty
   */
  constructor(trackedPositionProperty) {
    // @private {Property.<Vector2>} - position Property of element that will follow another
    this.followerProperty = trackedPositionProperty;

    // @private {Property.<Vector2>|null} - position of the thing being followed, null if not following anything
    this.positionBeingFollowedProperty = null;

    // @private {Vector2} - offset from following position
    this.offset = Vector2.ZERO;

    // @private {function} - function that gets linked/unlinked when the thermometer is following/unfollowing.
    this.followerFunction = position => {
      this.followerProperty.set(position.plus(this.offset));
    };
  }

  /**
   * start following the provided Property
   * @param {Property.<Vector2>} positionToFollowProperty - position Property to follow
   * @public
   */
  startFollowing(positionToFollowProperty) {
    // if this was previously following something else, un-follow it
    if (this.positionBeingFollowedProperty) {
      this.positionBeingFollowedProperty.unlink(this.followerFunction);
    }

    // keep track of the offset based on where the following started, allows following from anywhere on element
    this.offset = this.followerProperty.get().minus(positionToFollowProperty.get());

    // hook up the listener
    positionToFollowProperty.link(this.followerFunction);
    this.positionBeingFollowedProperty = positionToFollowProperty;
  }

  /**
   * @public
   */
  stopFollowing() {
    if (this.positionBeingFollowedProperty) {
      this.positionBeingFollowedProperty.unlink(this.followerFunction);
      this.positionBeingFollowedProperty = null;
    }
  }

  /**
   * @public
   * @returns {boolean}
   */
  isFollowing() {
    return this.positionBeingFollowedProperty !== null;
  }

  /**
   * @public
   */
  reset() {
    this.followerProperty.reset();
    this.positionBeingFollowedProperty.reset();
  }
}
energyFormsAndChanges.register('ElementFollower', ElementFollower);
export default ElementFollower;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIiwiRWxlbWVudEZvbGxvd2VyIiwiY29uc3RydWN0b3IiLCJ0cmFja2VkUG9zaXRpb25Qcm9wZXJ0eSIsImZvbGxvd2VyUHJvcGVydHkiLCJwb3NpdGlvbkJlaW5nRm9sbG93ZWRQcm9wZXJ0eSIsIm9mZnNldCIsIlpFUk8iLCJmb2xsb3dlckZ1bmN0aW9uIiwicG9zaXRpb24iLCJzZXQiLCJwbHVzIiwic3RhcnRGb2xsb3dpbmciLCJwb3NpdGlvblRvRm9sbG93UHJvcGVydHkiLCJ1bmxpbmsiLCJnZXQiLCJtaW51cyIsImxpbmsiLCJzdG9wRm9sbG93aW5nIiwiaXNGb2xsb3dpbmciLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWxlbWVudEZvbGxvd2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEFuIG9iamVjdCB0aGF0IG1ha2VzIGl0IGVhc3kgZm9yIG9uZSBtb2RlbCBlbGVtZW50IHRvIGZvbGxvdyBhbm90aGVyIG9uZSBhcm91bmQuICBUaGlzIHdhcyBvcmlnaW5hbGx5IGNyZWF0ZWQgdG9cclxuICogYWxsb3cgdGhlIHRoZXJtb21ldGVyIHRvIHN0aWNrIHRvIHRoZSBibG9ja3MgYW5kIGJlYWtlciB3aGVuIHRoZXkgYXJlIGRyYWdnZWQsIHRob3VnaCBpdCBtYXkgaGF2ZSBvdGhlciB1c2VzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIGZyb20gJy4uLy4uL2VuZXJneUZvcm1zQW5kQ2hhbmdlcy5qcyc7XHJcblxyXG5jbGFzcyBFbGVtZW50Rm9sbG93ZXIge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxWZWN0b3IyPn0gdHJhY2tlZFBvc2l0aW9uUHJvcGVydHlcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdHJhY2tlZFBvc2l0aW9uUHJvcGVydHkgKSB7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge1Byb3BlcnR5LjxWZWN0b3IyPn0gLSBwb3NpdGlvbiBQcm9wZXJ0eSBvZiBlbGVtZW50IHRoYXQgd2lsbCBmb2xsb3cgYW5vdGhlclxyXG4gICAgdGhpcy5mb2xsb3dlclByb3BlcnR5ID0gdHJhY2tlZFBvc2l0aW9uUHJvcGVydHk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge1Byb3BlcnR5LjxWZWN0b3IyPnxudWxsfSAtIHBvc2l0aW9uIG9mIHRoZSB0aGluZyBiZWluZyBmb2xsb3dlZCwgbnVsbCBpZiBub3QgZm9sbG93aW5nIGFueXRoaW5nXHJcbiAgICB0aGlzLnBvc2l0aW9uQmVpbmdGb2xsb3dlZFByb3BlcnR5ID0gbnVsbDtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7VmVjdG9yMn0gLSBvZmZzZXQgZnJvbSBmb2xsb3dpbmcgcG9zaXRpb25cclxuICAgIHRoaXMub2Zmc2V0ID0gVmVjdG9yMi5aRVJPO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtmdW5jdGlvbn0gLSBmdW5jdGlvbiB0aGF0IGdldHMgbGlua2VkL3VubGlua2VkIHdoZW4gdGhlIHRoZXJtb21ldGVyIGlzIGZvbGxvd2luZy91bmZvbGxvd2luZy5cclxuICAgIHRoaXMuZm9sbG93ZXJGdW5jdGlvbiA9IHBvc2l0aW9uID0+IHtcclxuICAgICAgdGhpcy5mb2xsb3dlclByb3BlcnR5LnNldCggcG9zaXRpb24ucGx1cyggdGhpcy5vZmZzZXQgKSApO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHN0YXJ0IGZvbGxvd2luZyB0aGUgcHJvdmlkZWQgUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxWZWN0b3IyPn0gcG9zaXRpb25Ub0ZvbGxvd1Byb3BlcnR5IC0gcG9zaXRpb24gUHJvcGVydHkgdG8gZm9sbG93XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0YXJ0Rm9sbG93aW5nKCBwb3NpdGlvblRvRm9sbG93UHJvcGVydHkgKSB7XHJcblxyXG4gICAgLy8gaWYgdGhpcyB3YXMgcHJldmlvdXNseSBmb2xsb3dpbmcgc29tZXRoaW5nIGVsc2UsIHVuLWZvbGxvdyBpdFxyXG4gICAgaWYgKCB0aGlzLnBvc2l0aW9uQmVpbmdGb2xsb3dlZFByb3BlcnR5ICkge1xyXG4gICAgICB0aGlzLnBvc2l0aW9uQmVpbmdGb2xsb3dlZFByb3BlcnR5LnVubGluayggdGhpcy5mb2xsb3dlckZ1bmN0aW9uICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgb2Zmc2V0IGJhc2VkIG9uIHdoZXJlIHRoZSBmb2xsb3dpbmcgc3RhcnRlZCwgYWxsb3dzIGZvbGxvd2luZyBmcm9tIGFueXdoZXJlIG9uIGVsZW1lbnRcclxuICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5mb2xsb3dlclByb3BlcnR5LmdldCgpLm1pbnVzKCBwb3NpdGlvblRvRm9sbG93UHJvcGVydHkuZ2V0KCkgKTtcclxuXHJcbiAgICAvLyBob29rIHVwIHRoZSBsaXN0ZW5lclxyXG4gICAgcG9zaXRpb25Ub0ZvbGxvd1Byb3BlcnR5LmxpbmsoIHRoaXMuZm9sbG93ZXJGdW5jdGlvbiApO1xyXG4gICAgdGhpcy5wb3NpdGlvbkJlaW5nRm9sbG93ZWRQcm9wZXJ0eSA9IHBvc2l0aW9uVG9Gb2xsb3dQcm9wZXJ0eTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzdG9wRm9sbG93aW5nKCkge1xyXG4gICAgaWYgKCB0aGlzLnBvc2l0aW9uQmVpbmdGb2xsb3dlZFByb3BlcnR5ICkge1xyXG4gICAgICB0aGlzLnBvc2l0aW9uQmVpbmdGb2xsb3dlZFByb3BlcnR5LnVubGluayggdGhpcy5mb2xsb3dlckZ1bmN0aW9uICk7XHJcbiAgICAgIHRoaXMucG9zaXRpb25CZWluZ0ZvbGxvd2VkUHJvcGVydHkgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqL1xyXG4gIGlzRm9sbG93aW5nKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb25CZWluZ0ZvbGxvd2VkUHJvcGVydHkgIT09IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLmZvbGxvd2VyUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMucG9zaXRpb25CZWluZ0ZvbGxvd2VkUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ0VsZW1lbnRGb2xsb3dlcicsIEVsZW1lbnRGb2xsb3dlciApO1xyXG5leHBvcnQgZGVmYXVsdCBFbGVtZW50Rm9sbG93ZXI7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUVsRSxNQUFNQyxlQUFlLENBQUM7RUFFcEI7QUFDRjtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLHVCQUF1QixFQUFHO0lBRXJDO0lBQ0EsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0QsdUJBQXVCOztJQUUvQztJQUNBLElBQUksQ0FBQ0UsNkJBQTZCLEdBQUcsSUFBSTs7SUFFekM7SUFDQSxJQUFJLENBQUNDLE1BQU0sR0FBR1AsT0FBTyxDQUFDUSxJQUFJOztJQUUxQjtJQUNBLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUdDLFFBQVEsSUFBSTtNQUNsQyxJQUFJLENBQUNMLGdCQUFnQixDQUFDTSxHQUFHLENBQUVELFFBQVEsQ0FBQ0UsSUFBSSxDQUFFLElBQUksQ0FBQ0wsTUFBTyxDQUFFLENBQUM7SUFDM0QsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU0sY0FBY0EsQ0FBRUMsd0JBQXdCLEVBQUc7SUFFekM7SUFDQSxJQUFLLElBQUksQ0FBQ1IsNkJBQTZCLEVBQUc7TUFDeEMsSUFBSSxDQUFDQSw2QkFBNkIsQ0FBQ1MsTUFBTSxDQUFFLElBQUksQ0FBQ04sZ0JBQWlCLENBQUM7SUFDcEU7O0lBRUE7SUFDQSxJQUFJLENBQUNGLE1BQU0sR0FBRyxJQUFJLENBQUNGLGdCQUFnQixDQUFDVyxHQUFHLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUVILHdCQUF3QixDQUFDRSxHQUFHLENBQUMsQ0FBRSxDQUFDOztJQUVqRjtJQUNBRix3QkFBd0IsQ0FBQ0ksSUFBSSxDQUFFLElBQUksQ0FBQ1QsZ0JBQWlCLENBQUM7SUFDdEQsSUFBSSxDQUFDSCw2QkFBNkIsR0FBR1Esd0JBQXdCO0VBQy9EOztFQUVBO0FBQ0Y7QUFDQTtFQUNFSyxhQUFhQSxDQUFBLEVBQUc7SUFDZCxJQUFLLElBQUksQ0FBQ2IsNkJBQTZCLEVBQUc7TUFDeEMsSUFBSSxDQUFDQSw2QkFBNkIsQ0FBQ1MsTUFBTSxDQUFFLElBQUksQ0FBQ04sZ0JBQWlCLENBQUM7TUFDbEUsSUFBSSxDQUFDSCw2QkFBNkIsR0FBRyxJQUFJO0lBQzNDO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRWMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osT0FBTyxJQUFJLENBQUNkLDZCQUE2QixLQUFLLElBQUk7RUFDcEQ7O0VBRUE7QUFDRjtBQUNBO0VBQ0VlLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ2hCLGdCQUFnQixDQUFDZ0IsS0FBSyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDZiw2QkFBNkIsQ0FBQ2UsS0FBSyxDQUFDLENBQUM7RUFDNUM7QUFDRjtBQUVBcEIscUJBQXFCLENBQUNxQixRQUFRLENBQUUsaUJBQWlCLEVBQUVwQixlQUFnQixDQUFDO0FBQ3BFLGVBQWVBLGVBQWUifQ==