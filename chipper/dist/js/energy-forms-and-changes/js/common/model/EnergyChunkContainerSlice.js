// Copyright 2014-2021, University of Colorado Boulder

/**
 * This class represents a "slice" within a 2D container that can contain a set of energy chunks, and can be used to add
 * some limited 3D capabilities by having some z-dimension information.  The slice consists of a 2D shape and a Z value
 * representing its position in Z space.
 *
 * Note to maintainers: In the original Java of this simulation, these slices where shapes that could be more elaborate
 * than a simple rectangle.  Translating these shapes proved to be a performance problem in the JavaScript version, so
 * the shapes were simplified to be bounds.  This is not quite as nice in doing things like distributing the energy
 * chunks in the beaker, but works well enough, and performs far better.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 * @author Martin Veillette
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergyChunk from './EnergyChunk.js';
class EnergyChunkContainerSlice extends PhetioObject {
  /**
   * @param {Bounds2} bounds
   * @param {number} zPosition - used to give appearance of depth
   * @param {Property.<Vector2>} anchorPointProperty
   * @param {Object} [options]
   */
  constructor(bounds, zPosition, anchorPointProperty, options) {
    options = merge({
      tandem: Tandem.REQUIRED,
      // must instrument the energyChunkList to support state
      phetioType: EnergyChunkContainerSlice.EnergyChunkContainerSliceIO
    }, options);
    super(options);
    assert && Tandem.VALIDATION && this.isPhetioInstrumented() && assert(anchorPointProperty.isPhetioInstrumented(), 'provided Property should be instrumented if I am.');

    // @public {Property.<Vector2>} - position of this slice in model space
    this.anchorPointProperty = anchorPointProperty;

    // @public (read-only) {Bounds2} - 2D bounds of this slice in model space, translates with the anchor point
    this.bounds = bounds;

    // @private {number}
    this.zPosition = zPosition;

    // @private {ObservableArrayDef.<EnergyChunk>} - list of energy chunks owned by this slice
    this.energyChunkList = createObservableArray({
      tandem: options.tandem.createTandem('energyChunkList'),
      phetioType: createObservableArray.ObservableArrayIO(ReferenceIO(EnergyChunk.EnergyChunkIO))
    });
    assert && this.isPhetioInstrumented() && this.energyChunkList.addItemAddedListener(energyChunk => {
      assert(energyChunk.isPhetioInstrumented(), 'EnergyChunk should be instrumented if I am.');
    });

    // monitor the "anchor point" position in order to update the bounds and move contained energy chunks
    const anchorPointListener = (newPosition, oldPosition) => {
      // Don't let the PhET-iO state engine call this (as the second time) when the anchorPointProperty changes. This line of
      // code could be replaced with altering the for-loop below to be based on each EnergyChunk's position, but that
      // would be too slow, and performance is important here. See https://github.com/phetsims/energy-forms-and-changes/issues/353
      if (!phet.joist.sim.isSettingPhetioStateProperty.value) {
        const xTranslation = newPosition.x - oldPosition.x;
        const yTranslation = newPosition.y - oldPosition.y;
        this.bounds.shiftXY(xTranslation, yTranslation);

        // c-style loop for best performance
        for (let i = 0; i < this.energyChunkList.length; i++) {
          this.energyChunkList.get(i).translate(xTranslation, yTranslation);
        }
      }
    };
    this.anchorPointProperty.lazyLink(anchorPointListener);

    // @private
    this.disposeEnergyChunkContainerSlice = () => {
      this.energyChunkList.clear();
      this.energyChunkList.dispose();
      this.anchorPointProperty.unlink(anchorPointListener);
    };
  }

  /**
   * @public (EnergyChunkContainerSliceIO)
   * @returns {{bounds: Bounds2}}
   */
  toStateObject() {
    return {
      bounds: Bounds2.Bounds2IO.toStateObject(this.bounds)
    };
  }

  /**
   * @public (EnergyChunkContainerSliceIO)
   * @param {Object} stateObject
   */
  applyState(stateObject) {
    this.bounds = Bounds2.Bounds2IO.fromStateObject(stateObject.bounds);
  }

  /**
   * @param {EnergyChunk} energyChunk
   * @public
   */
  addEnergyChunk(energyChunk) {
    energyChunk.zPositionProperty.set(this.zPosition);
    this.energyChunkList.push(energyChunk);
  }

  /**
   * expand or contract the bounds of this slice in the y-direction based on the provided multiplier value
   * @param {number} multiplier
   * @public
   */
  updateHeight(multiplier) {
    this.bounds.maxY = this.bounds.minY + this.bounds.height * multiplier;
  }

  /**
   * @returns {number}
   * @public
   */
  getNumberOfEnergyChunks() {
    return this.energyChunkList.length;
  }

  /**
   * @public
   */
  dispose() {
    this.disposeEnergyChunkContainerSlice();
    super.dispose();
  }
}
EnergyChunkContainerSlice.EnergyChunkContainerSliceIO = new IOType('EnergyChunkContainerSliceIO', {
  valueType: EnergyChunkContainerSlice,
  toStateObject: energyChunkContainerSlice => energyChunkContainerSlice.toStateObject(),
  applyState: (energyChunkContainerSlice, stateObject) => energyChunkContainerSlice.applyState(stateObject),
  stateSchema: {
    bounds: Bounds2.Bounds2IO
  }
});
energyFormsAndChanges.register('EnergyChunkContainerSlice', EnergyChunkContainerSlice);
export default EnergyChunkContainerSlice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJCb3VuZHMyIiwibWVyZ2UiLCJQaGV0aW9PYmplY3QiLCJUYW5kZW0iLCJJT1R5cGUiLCJSZWZlcmVuY2VJTyIsImVuZXJneUZvcm1zQW5kQ2hhbmdlcyIsIkVuZXJneUNodW5rIiwiRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZSIsImNvbnN0cnVjdG9yIiwiYm91bmRzIiwielBvc2l0aW9uIiwiYW5jaG9yUG9pbnRQcm9wZXJ0eSIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsInBoZXRpb1R5cGUiLCJFbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlSU8iLCJhc3NlcnQiLCJWQUxJREFUSU9OIiwiaXNQaGV0aW9JbnN0cnVtZW50ZWQiLCJlbmVyZ3lDaHVua0xpc3QiLCJjcmVhdGVUYW5kZW0iLCJPYnNlcnZhYmxlQXJyYXlJTyIsIkVuZXJneUNodW5rSU8iLCJhZGRJdGVtQWRkZWRMaXN0ZW5lciIsImVuZXJneUNodW5rIiwiYW5jaG9yUG9pbnRMaXN0ZW5lciIsIm5ld1Bvc2l0aW9uIiwib2xkUG9zaXRpb24iLCJwaGV0Iiwiam9pc3QiLCJzaW0iLCJpc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5IiwidmFsdWUiLCJ4VHJhbnNsYXRpb24iLCJ4IiwieVRyYW5zbGF0aW9uIiwieSIsInNoaWZ0WFkiLCJpIiwibGVuZ3RoIiwiZ2V0IiwidHJhbnNsYXRlIiwibGF6eUxpbmsiLCJkaXNwb3NlRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZSIsImNsZWFyIiwiZGlzcG9zZSIsInVubGluayIsInRvU3RhdGVPYmplY3QiLCJCb3VuZHMySU8iLCJhcHBseVN0YXRlIiwic3RhdGVPYmplY3QiLCJmcm9tU3RhdGVPYmplY3QiLCJhZGRFbmVyZ3lDaHVuayIsInpQb3NpdGlvblByb3BlcnR5Iiwic2V0IiwicHVzaCIsInVwZGF0ZUhlaWdodCIsIm11bHRpcGxpZXIiLCJtYXhZIiwibWluWSIsImhlaWdodCIsImdldE51bWJlck9mRW5lcmd5Q2h1bmtzIiwidmFsdWVUeXBlIiwiZW5lcmd5Q2h1bmtDb250YWluZXJTbGljZSIsInN0YXRlU2NoZW1hIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFwic2xpY2VcIiB3aXRoaW4gYSAyRCBjb250YWluZXIgdGhhdCBjYW4gY29udGFpbiBhIHNldCBvZiBlbmVyZ3kgY2h1bmtzLCBhbmQgY2FuIGJlIHVzZWQgdG8gYWRkXHJcbiAqIHNvbWUgbGltaXRlZCAzRCBjYXBhYmlsaXRpZXMgYnkgaGF2aW5nIHNvbWUgei1kaW1lbnNpb24gaW5mb3JtYXRpb24uICBUaGUgc2xpY2UgY29uc2lzdHMgb2YgYSAyRCBzaGFwZSBhbmQgYSBaIHZhbHVlXHJcbiAqIHJlcHJlc2VudGluZyBpdHMgcG9zaXRpb24gaW4gWiBzcGFjZS5cclxuICpcclxuICogTm90ZSB0byBtYWludGFpbmVyczogSW4gdGhlIG9yaWdpbmFsIEphdmEgb2YgdGhpcyBzaW11bGF0aW9uLCB0aGVzZSBzbGljZXMgd2hlcmUgc2hhcGVzIHRoYXQgY291bGQgYmUgbW9yZSBlbGFib3JhdGVcclxuICogdGhhbiBhIHNpbXBsZSByZWN0YW5nbGUuICBUcmFuc2xhdGluZyB0aGVzZSBzaGFwZXMgcHJvdmVkIHRvIGJlIGEgcGVyZm9ybWFuY2UgcHJvYmxlbSBpbiB0aGUgSmF2YVNjcmlwdCB2ZXJzaW9uLCBzb1xyXG4gKiB0aGUgc2hhcGVzIHdlcmUgc2ltcGxpZmllZCB0byBiZSBib3VuZHMuICBUaGlzIGlzIG5vdCBxdWl0ZSBhcyBuaWNlIGluIGRvaW5nIHRoaW5ncyBsaWtlIGRpc3RyaWJ1dGluZyB0aGUgZW5lcmd5XHJcbiAqIGNodW5rcyBpbiB0aGUgYmVha2VyLCBidXQgd29ya3Mgd2VsbCBlbm91Z2gsIGFuZCBwZXJmb3JtcyBmYXIgYmV0dGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKi9cclxuXHJcbmltcG9ydCBjcmVhdGVPYnNlcnZhYmxlQXJyYXkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9jcmVhdGVPYnNlcnZhYmxlQXJyYXkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9JT1R5cGUuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IGVuZXJneUZvcm1zQW5kQ2hhbmdlcyBmcm9tICcuLi8uLi9lbmVyZ3lGb3Jtc0FuZENoYW5nZXMuanMnO1xyXG5pbXBvcnQgRW5lcmd5Q2h1bmsgZnJvbSAnLi9FbmVyZ3lDaHVuay5qcyc7XHJcblxyXG5jbGFzcyBFbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlIGV4dGVuZHMgUGhldGlvT2JqZWN0IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCb3VuZHMyfSBib3VuZHNcclxuICAgKiBAcGFyYW0ge251bWJlcn0gelBvc2l0aW9uIC0gdXNlZCB0byBnaXZlIGFwcGVhcmFuY2Ugb2YgZGVwdGhcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxWZWN0b3IyPn0gYW5jaG9yUG9pbnRQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYm91bmRzLCB6UG9zaXRpb24sIGFuY2hvclBvaW50UHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELCAvLyBtdXN0IGluc3RydW1lbnQgdGhlIGVuZXJneUNodW5rTGlzdCB0byBzdXBwb3J0IHN0YXRlXHJcbiAgICAgIHBoZXRpb1R5cGU6IEVuZXJneUNodW5rQ29udGFpbmVyU2xpY2UuRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZUlPXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgVGFuZGVtLlZBTElEQVRJT04gJiYgdGhpcy5pc1BoZXRpb0luc3RydW1lbnRlZCgpICYmIGFzc2VydCggYW5jaG9yUG9pbnRQcm9wZXJ0eS5pc1BoZXRpb0luc3RydW1lbnRlZCgpLFxyXG4gICAgICAncHJvdmlkZWQgUHJvcGVydHkgc2hvdWxkIGJlIGluc3RydW1lbnRlZCBpZiBJIGFtLicgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48VmVjdG9yMj59IC0gcG9zaXRpb24gb2YgdGhpcyBzbGljZSBpbiBtb2RlbCBzcGFjZVxyXG4gICAgdGhpcy5hbmNob3JQb2ludFByb3BlcnR5ID0gYW5jaG9yUG9pbnRQcm9wZXJ0eTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtCb3VuZHMyfSAtIDJEIGJvdW5kcyBvZiB0aGlzIHNsaWNlIGluIG1vZGVsIHNwYWNlLCB0cmFuc2xhdGVzIHdpdGggdGhlIGFuY2hvciBwb2ludFxyXG4gICAgdGhpcy5ib3VuZHMgPSBib3VuZHM7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge251bWJlcn1cclxuICAgIHRoaXMuelBvc2l0aW9uID0gelBvc2l0aW9uO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtPYnNlcnZhYmxlQXJyYXlEZWYuPEVuZXJneUNodW5rPn0gLSBsaXN0IG9mIGVuZXJneSBjaHVua3Mgb3duZWQgYnkgdGhpcyBzbGljZVxyXG4gICAgdGhpcy5lbmVyZ3lDaHVua0xpc3QgPSBjcmVhdGVPYnNlcnZhYmxlQXJyYXkoIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdlbmVyZ3lDaHVua0xpc3QnICksXHJcbiAgICAgIHBoZXRpb1R5cGU6IGNyZWF0ZU9ic2VydmFibGVBcnJheS5PYnNlcnZhYmxlQXJyYXlJTyggUmVmZXJlbmNlSU8oIEVuZXJneUNodW5rLkVuZXJneUNodW5rSU8gKSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIHRoaXMuaXNQaGV0aW9JbnN0cnVtZW50ZWQoKSAmJiB0aGlzLmVuZXJneUNodW5rTGlzdC5hZGRJdGVtQWRkZWRMaXN0ZW5lciggZW5lcmd5Q2h1bmsgPT4ge1xyXG4gICAgICBhc3NlcnQoIGVuZXJneUNodW5rLmlzUGhldGlvSW5zdHJ1bWVudGVkKCksICdFbmVyZ3lDaHVuayBzaG91bGQgYmUgaW5zdHJ1bWVudGVkIGlmIEkgYW0uJyApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIG1vbml0b3IgdGhlIFwiYW5jaG9yIHBvaW50XCIgcG9zaXRpb24gaW4gb3JkZXIgdG8gdXBkYXRlIHRoZSBib3VuZHMgYW5kIG1vdmUgY29udGFpbmVkIGVuZXJneSBjaHVua3NcclxuICAgIGNvbnN0IGFuY2hvclBvaW50TGlzdGVuZXIgPSAoIG5ld1Bvc2l0aW9uLCBvbGRQb3NpdGlvbiApID0+IHtcclxuXHJcbiAgICAgIC8vIERvbid0IGxldCB0aGUgUGhFVC1pTyBzdGF0ZSBlbmdpbmUgY2FsbCB0aGlzIChhcyB0aGUgc2Vjb25kIHRpbWUpIHdoZW4gdGhlIGFuY2hvclBvaW50UHJvcGVydHkgY2hhbmdlcy4gVGhpcyBsaW5lIG9mXHJcbiAgICAgIC8vIGNvZGUgY291bGQgYmUgcmVwbGFjZWQgd2l0aCBhbHRlcmluZyB0aGUgZm9yLWxvb3AgYmVsb3cgdG8gYmUgYmFzZWQgb24gZWFjaCBFbmVyZ3lDaHVuaydzIHBvc2l0aW9uLCBidXQgdGhhdFxyXG4gICAgICAvLyB3b3VsZCBiZSB0b28gc2xvdywgYW5kIHBlcmZvcm1hbmNlIGlzIGltcG9ydGFudCBoZXJlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2VuZXJneS1mb3Jtcy1hbmQtY2hhbmdlcy9pc3N1ZXMvMzUzXHJcbiAgICAgIGlmICggIXBoZXQuam9pc3Quc2ltLmlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHkudmFsdWUgKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHhUcmFuc2xhdGlvbiA9IG5ld1Bvc2l0aW9uLnggLSBvbGRQb3NpdGlvbi54O1xyXG4gICAgICAgIGNvbnN0IHlUcmFuc2xhdGlvbiA9IG5ld1Bvc2l0aW9uLnkgLSBvbGRQb3NpdGlvbi55O1xyXG5cclxuICAgICAgICB0aGlzLmJvdW5kcy5zaGlmdFhZKCB4VHJhbnNsYXRpb24sIHlUcmFuc2xhdGlvbiApO1xyXG5cclxuICAgICAgICAvLyBjLXN0eWxlIGxvb3AgZm9yIGJlc3QgcGVyZm9ybWFuY2VcclxuICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmVuZXJneUNodW5rTGlzdC5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICAgIHRoaXMuZW5lcmd5Q2h1bmtMaXN0LmdldCggaSApLnRyYW5zbGF0ZSggeFRyYW5zbGF0aW9uLCB5VHJhbnNsYXRpb24gKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLmFuY2hvclBvaW50UHJvcGVydHkubGF6eUxpbmsoIGFuY2hvclBvaW50TGlzdGVuZXIgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5kaXNwb3NlRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZSA9ICgpID0+IHtcclxuICAgICAgdGhpcy5lbmVyZ3lDaHVua0xpc3QuY2xlYXIoKTtcclxuICAgICAgdGhpcy5lbmVyZ3lDaHVua0xpc3QuZGlzcG9zZSgpO1xyXG4gICAgICB0aGlzLmFuY2hvclBvaW50UHJvcGVydHkudW5saW5rKCBhbmNob3JQb2ludExpc3RlbmVyICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpYyAoRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZUlPKVxyXG4gICAqIEByZXR1cm5zIHt7Ym91bmRzOiBCb3VuZHMyfX1cclxuICAgKi9cclxuICB0b1N0YXRlT2JqZWN0KCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYm91bmRzOiBCb3VuZHMyLkJvdW5kczJJTy50b1N0YXRlT2JqZWN0KCB0aGlzLmJvdW5kcyApXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpYyAoRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZUlPKVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZU9iamVjdFxyXG4gICAqL1xyXG4gIGFwcGx5U3RhdGUoIHN0YXRlT2JqZWN0ICkge1xyXG4gICAgdGhpcy5ib3VuZHMgPSBCb3VuZHMyLkJvdW5kczJJTy5mcm9tU3RhdGVPYmplY3QoIHN0YXRlT2JqZWN0LmJvdW5kcyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFbmVyZ3lDaHVua30gZW5lcmd5Q2h1bmtcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgYWRkRW5lcmd5Q2h1bmsoIGVuZXJneUNodW5rICkge1xyXG4gICAgZW5lcmd5Q2h1bmsuelBvc2l0aW9uUHJvcGVydHkuc2V0KCB0aGlzLnpQb3NpdGlvbiApO1xyXG4gICAgdGhpcy5lbmVyZ3lDaHVua0xpc3QucHVzaCggZW5lcmd5Q2h1bmsgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGV4cGFuZCBvciBjb250cmFjdCB0aGUgYm91bmRzIG9mIHRoaXMgc2xpY2UgaW4gdGhlIHktZGlyZWN0aW9uIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBtdWx0aXBsaWVyIHZhbHVlXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXJcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgdXBkYXRlSGVpZ2h0KCBtdWx0aXBsaWVyICkge1xyXG4gICAgdGhpcy5ib3VuZHMubWF4WSA9IHRoaXMuYm91bmRzLm1pblkgKyB0aGlzLmJvdW5kcy5oZWlnaHQgKiBtdWx0aXBsaWVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge251bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZ2V0TnVtYmVyT2ZFbmVyZ3lDaHVua3MoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbmVyZ3lDaHVua0xpc3QubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmRpc3Bvc2VFbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5FbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlLkVuZXJneUNodW5rQ29udGFpbmVyU2xpY2VJTyA9IG5ldyBJT1R5cGUoICdFbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlSU8nLCB7XHJcbiAgdmFsdWVUeXBlOiBFbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlLFxyXG4gIHRvU3RhdGVPYmplY3Q6IGVuZXJneUNodW5rQ29udGFpbmVyU2xpY2UgPT4gZW5lcmd5Q2h1bmtDb250YWluZXJTbGljZS50b1N0YXRlT2JqZWN0KCksXHJcbiAgYXBwbHlTdGF0ZTogKCBlbmVyZ3lDaHVua0NvbnRhaW5lclNsaWNlLCBzdGF0ZU9iamVjdCApID0+IGVuZXJneUNodW5rQ29udGFpbmVyU2xpY2UuYXBwbHlTdGF0ZSggc3RhdGVPYmplY3QgKSxcclxuICBzdGF0ZVNjaGVtYToge1xyXG4gICAgYm91bmRzOiBCb3VuZHMyLkJvdW5kczJJT1xyXG4gIH1cclxufSApO1xyXG5cclxuZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLnJlZ2lzdGVyKCAnRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZScsIEVuZXJneUNodW5rQ29udGFpbmVyU2xpY2UgKTtcclxuZXhwb3J0IGRlZmF1bHQgRW5lcmd5Q2h1bmtDb250YWluZXJTbGljZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EscUJBQXFCLE1BQU0sOENBQThDO0FBQ2hGLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxZQUFZLE1BQU0sdUNBQXVDO0FBQ2hFLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsTUFBTSxNQUFNLHVDQUF1QztBQUMxRCxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRTFDLE1BQU1DLHlCQUF5QixTQUFTTixZQUFZLENBQUM7RUFFbkQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VPLFdBQVdBLENBQUVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxtQkFBbUIsRUFBRUMsT0FBTyxFQUFHO0lBRTdEQSxPQUFPLEdBQUdaLEtBQUssQ0FBRTtNQUNmYSxNQUFNLEVBQUVYLE1BQU0sQ0FBQ1ksUUFBUTtNQUFFO01BQ3pCQyxVQUFVLEVBQUVSLHlCQUF5QixDQUFDUztJQUN4QyxDQUFDLEVBQUVKLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUEsT0FBUSxDQUFDO0lBRWhCSyxNQUFNLElB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