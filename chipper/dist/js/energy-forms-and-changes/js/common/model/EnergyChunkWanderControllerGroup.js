// Copyright 2020-2022, University of Colorado Boulder

/**
 * PhetioGroup for creating EnergyChunkWanderControllers. This type adds support for dynamically created and destroyed,
 * instrumented PhET-iO elements.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetioGroup from '../../../../tandem/js/PhetioGroup.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergyChunkWanderController from './EnergyChunkWanderController.js';
class EnergyChunkWanderControllerGroup extends PhetioGroup {
  /**
   *
   * @param energyChunkGroup
   * @param options
   */
  constructor(energyChunkGroup, options) {
    options = merge({
      tandem: Tandem.REQUIRED,
      phetioType: PhetioGroup.PhetioGroupIO(EnergyChunkWanderController.EnergyChunkWanderControllerIO)
    }, options);

    // If other archetypes don't exist, then we won't create ours, so these values can be null.
    const defaultArguments = () => {
      return [energyChunkGroup.archetype, energyChunkGroup.archetype ? energyChunkGroup.archetype.positionProperty : null, {}];
    };
    super(EnergyChunkWanderControllerGroup.createEnergyChunkWanderController, defaultArguments, options);
  }

  // @public
  static createEnergyChunkWanderController(tandem, energyChunk, destinationProperty, options) {
    assert && options && assert(!options.hasOwnProperty('tandem'), 'EnergyChunkWanderControllerGroup supplies its own tandem');
    return new EnergyChunkWanderController(energyChunk, destinationProperty, merge({
      tandem: tandem
    }, options));
  }
}
energyFormsAndChanges.register('EnergyChunkWanderControllerGroup', EnergyChunkWanderControllerGroup);
export default EnergyChunkWanderControllerGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRpb0dyb3VwIiwiVGFuZGVtIiwiZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIiwiRW5lcmd5Q2h1bmtXYW5kZXJDb250cm9sbGVyIiwiRW5lcmd5Q2h1bmtXYW5kZXJDb250cm9sbGVyR3JvdXAiLCJjb25zdHJ1Y3RvciIsImVuZXJneUNodW5rR3JvdXAiLCJvcHRpb25zIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJwaGV0aW9UeXBlIiwiUGhldGlvR3JvdXBJTyIsIkVuZXJneUNodW5rV2FuZGVyQ29udHJvbGxlcklPIiwiZGVmYXVsdEFyZ3VtZW50cyIsImFyY2hldHlwZSIsInBvc2l0aW9uUHJvcGVydHkiLCJjcmVhdGVFbmVyZ3lDaHVua1dhbmRlckNvbnRyb2xsZXIiLCJlbmVyZ3lDaHVuayIsImRlc3RpbmF0aW9uUHJvcGVydHkiLCJhc3NlcnQiLCJoYXNPd25Qcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5lcmd5Q2h1bmtXYW5kZXJDb250cm9sbGVyR3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGhldGlvR3JvdXAgZm9yIGNyZWF0aW5nIEVuZXJneUNodW5rV2FuZGVyQ29udHJvbGxlcnMuIFRoaXMgdHlwZSBhZGRzIHN1cHBvcnQgZm9yIGR5bmFtaWNhbGx5IGNyZWF0ZWQgYW5kIGRlc3Ryb3llZCxcclxuICogaW5zdHJ1bWVudGVkIFBoRVQtaU8gZWxlbWVudHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFBoZXRpb0dyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9Hcm91cC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBlbmVyZ3lGb3Jtc0FuZENoYW5nZXMgZnJvbSAnLi4vLi4vZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLmpzJztcclxuaW1wb3J0IEVuZXJneUNodW5rV2FuZGVyQ29udHJvbGxlciBmcm9tICcuL0VuZXJneUNodW5rV2FuZGVyQ29udHJvbGxlci5qcyc7XHJcblxyXG5jbGFzcyBFbmVyZ3lDaHVua1dhbmRlckNvbnRyb2xsZXJHcm91cCBleHRlbmRzIFBoZXRpb0dyb3VwIHtcclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZW5lcmd5Q2h1bmtHcm91cFxyXG4gICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGVuZXJneUNodW5rR3JvdXAsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxyXG4gICAgICBwaGV0aW9UeXBlOiBQaGV0aW9Hcm91cC5QaGV0aW9Hcm91cElPKCBFbmVyZ3lDaHVua1dhbmRlckNvbnRyb2xsZXIuRW5lcmd5Q2h1bmtXYW5kZXJDb250cm9sbGVySU8gKVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIElmIG90aGVyIGFyY2hldHlwZXMgZG9uJ3QgZXhpc3QsIHRoZW4gd2Ugd29uJ3QgY3JlYXRlIG91cnMsIHNvIHRoZXNlIHZhbHVlcyBjYW4gYmUgbnVsbC5cclxuICAgIGNvbnN0IGRlZmF1bHRBcmd1bWVudHMgPSAoKSA9PiB7XHJcbiAgICAgIHJldHVybiBbXHJcbiAgICAgICAgZW5lcmd5Q2h1bmtHcm91cC5hcmNoZXR5cGUsXHJcbiAgICAgICAgZW5lcmd5Q2h1bmtHcm91cC5hcmNoZXR5cGUgPyBlbmVyZ3lDaHVua0dyb3VwLmFyY2hldHlwZS5wb3NpdGlvblByb3BlcnR5IDogbnVsbCxcclxuICAgICAgICB7fVxyXG4gICAgICBdO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlciggRW5lcmd5Q2h1bmtXYW5kZXJDb250cm9sbGVyR3JvdXAuY3JlYXRlRW5lcmd5Q2h1bmtXYW5kZXJDb250cm9sbGVyLCBkZWZhdWx0QXJndW1lbnRzLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgc3RhdGljIGNyZWF0ZUVuZXJneUNodW5rV2FuZGVyQ29udHJvbGxlciggdGFuZGVtLCBlbmVyZ3lDaHVuaywgZGVzdGluYXRpb25Qcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuICAgIGFzc2VydCAmJiBvcHRpb25zICYmIGFzc2VydCggIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoICd0YW5kZW0nICksICdFbmVyZ3lDaHVua1dhbmRlckNvbnRyb2xsZXJHcm91cCBzdXBwbGllcyBpdHMgb3duIHRhbmRlbScgKTtcclxuICAgIHJldHVybiBuZXcgRW5lcmd5Q2h1bmtXYW5kZXJDb250cm9sbGVyKCBlbmVyZ3lDaHVuaywgZGVzdGluYXRpb25Qcm9wZXJ0eSwgbWVyZ2UoIHsgdGFuZGVtOiB0YW5kZW0gfSwgb3B0aW9ucyApICk7XHJcbiAgfVxyXG59XHJcblxyXG5lbmVyZ3lGb3Jtc0FuZENoYW5nZXMucmVnaXN0ZXIoICdFbmVyZ3lDaHVua1dhbmRlckNvbnRyb2xsZXJHcm91cCcsIEVuZXJneUNodW5rV2FuZGVyQ29udHJvbGxlckdyb3VwICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVuZXJneUNodW5rV2FuZGVyQ29udHJvbGxlckdyb3VwOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLHNDQUFzQztBQUM5RCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQywyQkFBMkIsTUFBTSxrQ0FBa0M7QUFFMUUsTUFBTUMsZ0NBQWdDLFNBQVNKLFdBQVcsQ0FBQztFQUV6RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLGdCQUFnQixFQUFFQyxPQUFPLEVBQUc7SUFFdkNBLE9BQU8sR0FBR1IsS0FBSyxDQUFFO01BQ2ZTLE1BQU0sRUFBRVAsTUFBTSxDQUFDUSxRQUFRO01BQ3ZCQyxVQUFVLEVBQUVWLFdBQVcsQ0FBQ1csYUFBYSxDQUFFUiwyQkFBMkIsQ0FBQ1MsNkJBQThCO0lBQ25HLENBQUMsRUFBRUwsT0FBUSxDQUFDOztJQUVaO0lBQ0EsTUFBTU0sZ0JBQWdCLEdBQUdBLENBQUEsS0FBTTtNQUM3QixPQUFPLENBQ0xQLGdCQUFnQixDQUFDUSxTQUFTLEVBQzFCUixnQkFBZ0IsQ0FBQ1EsU0FBUyxHQUFHUixnQkFBZ0IsQ0FBQ1EsU0FBUyxDQUFDQyxnQkFBZ0IsR0FBRyxJQUFJLEVBQy9FLENBQUMsQ0FBQyxDQUNIO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBRVgsZ0NBQWdDLENBQUNZLGlDQUFpQyxFQUFFSCxnQkFBZ0IsRUFBRU4sT0FBUSxDQUFDO0VBQ3hHOztFQUVBO0VBQ0EsT0FBT1MsaUNBQWlDQSxDQUFFUixNQUFNLEVBQUVTLFdBQVcsRUFBRUMsbUJBQW1CLEVBQUVYLE9BQU8sRUFBRztJQUM1RlksTUFBTSxJQUFJWixPQUFPLElBQUlZLE1BQU0sQ0FBRSxDQUFDWixPQUFPLENBQUNhLGNBQWMsQ0FBRSxRQUFTLENBQUMsRUFBRSwwREFBMkQsQ0FBQztJQUM5SCxPQUFPLElBQUlqQiwyQkFBMkIsQ0FBRWMsV0FBVyxFQUFFQyxtQkFBbUIsRUFBRW5CLEtBQUssQ0FBRTtNQUFFUyxNQUFNLEVBQUVBO0lBQU8sQ0FBQyxFQUFFRCxPQUFRLENBQUUsQ0FBQztFQUNsSDtBQUNGO0FBRUFMLHFCQUFxQixDQUFDbUIsUUFBUSxDQUFFLGtDQUFrQyxFQUFFakIsZ0NBQWlDLENBQUM7QUFDdEcsZUFBZUEsZ0NBQWdDIn0=