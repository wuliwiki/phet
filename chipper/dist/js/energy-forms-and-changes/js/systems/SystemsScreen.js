// Copyright 2016-2022, University of Colorado Boulder

/**
 * The 'Systems' screen in the Energy Forms and Changes simulation.
 *
 * @author John Blanco
 * @author Martin Veillette (Berea College)
 * @author Andrew Adare
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import systemsScreenIcon_png from '../../images/systemsScreenIcon_png.js';
import EFACConstants from '../common/EFACConstants.js';
import energyFormsAndChanges from '../energyFormsAndChanges.js';
import EnergyFormsAndChangesStrings from '../EnergyFormsAndChangesStrings.js';
import SystemsModel from './model/SystemsModel.js';
import SystemsScreenView from './view/SystemsScreenView.js';
class SystemsScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const options = {
      name: EnergyFormsAndChangesStrings.systemsStringProperty,
      backgroundColorProperty: new Property(EFACConstants.SECOND_SCREEN_BACKGROUND_COLOR),
      homeScreenIcon: new ScreenIcon(new Image(systemsScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      maxDT: EFACConstants.maxDT,
      tandem: tandem
    };
    super(() => new SystemsModel(tandem.createTandem('model')), model => new SystemsScreenView(model, tandem.createTandem('view')), options);
  }
}
energyFormsAndChanges.register('SystemsScreen', SystemsScreen);
export default SystemsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsInN5c3RlbXNTY3JlZW5JY29uX3BuZyIsIkVGQUNDb25zdGFudHMiLCJlbmVyZ3lGb3Jtc0FuZENoYW5nZXMiLCJFbmVyZ3lGb3Jtc0FuZENoYW5nZXNTdHJpbmdzIiwiU3lzdGVtc01vZGVsIiwiU3lzdGVtc1NjcmVlblZpZXciLCJTeXN0ZW1zU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsInN5c3RlbXNTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiU0VDT05EX1NDUkVFTl9CQUNLR1JPVU5EX0NPTE9SIiwiaG9tZVNjcmVlbkljb24iLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJtYXhEVCIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTeXN0ZW1zU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnU3lzdGVtcycgc2NyZWVuIGluIHRoZSBFbmVyZ3kgRm9ybXMgYW5kIENoYW5nZXMgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHN5c3RlbXNTY3JlZW5JY29uX3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvc3lzdGVtc1NjcmVlbkljb25fcG5nLmpzJztcclxuaW1wb3J0IEVGQUNDb25zdGFudHMgZnJvbSAnLi4vY29tbW9uL0VGQUNDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIGZyb20gJy4uL2VuZXJneUZvcm1zQW5kQ2hhbmdlcy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lGb3Jtc0FuZENoYW5nZXNTdHJpbmdzIGZyb20gJy4uL0VuZXJneUZvcm1zQW5kQ2hhbmdlc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgU3lzdGVtc01vZGVsIGZyb20gJy4vbW9kZWwvU3lzdGVtc01vZGVsLmpzJztcclxuaW1wb3J0IFN5c3RlbXNTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9TeXN0ZW1zU2NyZWVuVmlldy5qcyc7XHJcblxyXG5cclxuY2xhc3MgU3lzdGVtc1NjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IEVuZXJneUZvcm1zQW5kQ2hhbmdlc1N0cmluZ3Muc3lzdGVtc1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBFRkFDQ29uc3RhbnRzLlNFQ09ORF9TQ1JFRU5fQkFDS0dST1VORF9DT0xPUiApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggc3lzdGVtc1NjcmVlbkljb25fcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKSxcclxuICAgICAgbWF4RFQ6IEVGQUNDb25zdGFudHMubWF4RFQsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgU3lzdGVtc01vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IFN5c3RlbXNTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ1N5c3RlbXNTY3JlZW4nLCBTeXN0ZW1zU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IFN5c3RlbXNTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MscUJBQXFCLE1BQU0sdUNBQXVDO0FBQ3pFLE9BQU9DLGFBQWEsTUFBTSw0QkFBNEI7QUFDdEQsT0FBT0MscUJBQXFCLE1BQU0sNkJBQTZCO0FBQy9ELE9BQU9DLDRCQUE0QixNQUFNLG9DQUFvQztBQUM3RSxPQUFPQyxZQUFZLE1BQU0seUJBQXlCO0FBQ2xELE9BQU9DLGlCQUFpQixNQUFNLDZCQUE2QjtBQUczRCxNQUFNQyxhQUFhLFNBQVNULE1BQU0sQ0FBQztFQUVqQztBQUNGO0FBQ0E7RUFDRVUsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBRXBCLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVQLDRCQUE0QixDQUFDUSxxQkFBcUI7TUFDeERDLHVCQUF1QixFQUFFLElBQUloQixRQUFRLENBQUVLLGFBQWEsQ0FBQ1ksOEJBQStCLENBQUM7TUFDckZDLGNBQWMsRUFBRSxJQUFJaEIsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUMscUJBQXNCLENBQUMsRUFBRTtRQUNsRWUsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hDLEtBQUssRUFBRWhCLGFBQWEsQ0FBQ2dCLEtBQUs7TUFDMUJULE1BQU0sRUFBRUE7SUFDVixDQUFDO0lBRUQsS0FBSyxDQUNILE1BQU0sSUFBSUosWUFBWSxDQUFFSSxNQUFNLENBQUNVLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQyxFQUN4REMsS0FBSyxJQUFJLElBQUlkLGlCQUFpQixDQUFFYyxLQUFLLEVBQUVYLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQ3RFVCxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFQLHFCQUFxQixDQUFDa0IsUUFBUSxDQUFFLGVBQWUsRUFBRWQsYUFBYyxDQUFDO0FBQ2hFLGVBQWVBLGFBQWEifQ==