// Copyright 2016-2021, University of Colorado Boulder

/**
 * base type for energy converters, i.e. model elements that take energy from a source and convert it to something else
 * (such as mechanical to electrical) and then supply it to an energy user
 *
 * @author John Blanco
 * @author Andrew Adare
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import merge from '../../../../phet-core/js/merge.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import EnergyChunk from '../../common/model/EnergyChunk.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergySystemElement from './EnergySystemElement.js';
class EnergyConverter extends EnergySystemElement {
  /**
   * @param {Image} iconImage Image to identify source on carousel menu
   * @param {Object} [options]
   */
  constructor(iconImage, options) {
    options = merge({
      tandem: Tandem.REQUIRED
    }, options);
    super(iconImage, options);
    this.incomingEnergyChunks = createObservableArray({
      tandem: options.tandem.createTandem('incomingEnergyChunks'),
      phetioType: createObservableArray.ObservableArrayIO(ReferenceIO(EnergyChunk.EnergyChunkIO))
    });
    this.outgoingEnergyChunks = createObservableArray({
      tandem: options.tandem.createTandem('outgoingEnergyChunks'),
      phetioType: createObservableArray.ObservableArrayIO(ReferenceIO(EnergyChunk.EnergyChunkIO))
    });
  }

  /**
   * get the energy chunks that this source wants to transfer to the next energy system element, reading clears the
   * list
   * @returns {EnergyChunk[]}
   * @public
   */
  extractOutgoingEnergyChunks() {
    const energyChunksToRemove = this.outgoingEnergyChunks.filter(energyChunk => this.energyChunkList.includes(energyChunk));
    this.energyChunkList.removeAll(energyChunksToRemove);
    const outgoingEnergyChunksCopy = this.outgoingEnergyChunks.slice();
    this.outgoingEnergyChunks.clear();
    return outgoingEnergyChunksCopy;
  }

  /**
   * Inject a list of energy chunks into this energy system element.  Once injected, it is the system's responsibility
   * to move, convert, and otherwise manage them.
   * @param {EnergyChunk[]} energyChunks
   * @public
   */
  injectEnergyChunks(energyChunks) {
    energyChunks.forEach(energyChunk => {
      if (!this.incomingEnergyChunks.includes(energyChunk)) {
        this.incomingEnergyChunks.push(energyChunk);
      }
    });
  }

  /**
   * clear internal list of energy chunks and outgoing energy chunks
   * @public
   */
  clearEnergyChunks() {
    super.clearEnergyChunks();
    this.incomingEnergyChunks.forEach(chunk => this.energyChunkGroup.disposeElement(chunk));
    this.incomingEnergyChunks.clear();
    this.outgoingEnergyChunks.forEach(chunk => this.energyChunkGroup.disposeElement(chunk));
    this.outgoingEnergyChunks.clear();
  }
}
energyFormsAndChanges.register('EnergyConverter', EnergyConverter);
export default EnergyConverter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJtZXJnZSIsIlRhbmRlbSIsIlJlZmVyZW5jZUlPIiwiRW5lcmd5Q2h1bmsiLCJlbmVyZ3lGb3Jtc0FuZENoYW5nZXMiLCJFbmVyZ3lTeXN0ZW1FbGVtZW50IiwiRW5lcmd5Q29udmVydGVyIiwiY29uc3RydWN0b3IiLCJpY29uSW1hZ2UiLCJvcHRpb25zIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJpbmNvbWluZ0VuZXJneUNodW5rcyIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1R5cGUiLCJPYnNlcnZhYmxlQXJyYXlJTyIsIkVuZXJneUNodW5rSU8iLCJvdXRnb2luZ0VuZXJneUNodW5rcyIsImV4dHJhY3RPdXRnb2luZ0VuZXJneUNodW5rcyIsImVuZXJneUNodW5rc1RvUmVtb3ZlIiwiZmlsdGVyIiwiZW5lcmd5Q2h1bmsiLCJlbmVyZ3lDaHVua0xpc3QiLCJpbmNsdWRlcyIsInJlbW92ZUFsbCIsIm91dGdvaW5nRW5lcmd5Q2h1bmtzQ29weSIsInNsaWNlIiwiY2xlYXIiLCJpbmplY3RFbmVyZ3lDaHVua3MiLCJlbmVyZ3lDaHVua3MiLCJmb3JFYWNoIiwicHVzaCIsImNsZWFyRW5lcmd5Q2h1bmtzIiwiY2h1bmsiLCJlbmVyZ3lDaHVua0dyb3VwIiwiZGlzcG9zZUVsZW1lbnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVuZXJneUNvbnZlcnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBiYXNlIHR5cGUgZm9yIGVuZXJneSBjb252ZXJ0ZXJzLCBpLmUuIG1vZGVsIGVsZW1lbnRzIHRoYXQgdGFrZSBlbmVyZ3kgZnJvbSBhIHNvdXJjZSBhbmQgY29udmVydCBpdCB0byBzb21ldGhpbmcgZWxzZVxyXG4gKiAoc3VjaCBhcyBtZWNoYW5pY2FsIHRvIGVsZWN0cmljYWwpIGFuZCB0aGVuIHN1cHBseSBpdCB0byBhbiBlbmVyZ3kgdXNlclxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNyZWF0ZU9ic2VydmFibGVBcnJheSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL2NyZWF0ZU9ic2VydmFibGVBcnJheS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IEVuZXJneUNodW5rIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9FbmVyZ3lDaHVuay5qcyc7XHJcbmltcG9ydCBlbmVyZ3lGb3Jtc0FuZENoYW5nZXMgZnJvbSAnLi4vLi4vZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLmpzJztcclxuaW1wb3J0IEVuZXJneVN5c3RlbUVsZW1lbnQgZnJvbSAnLi9FbmVyZ3lTeXN0ZW1FbGVtZW50LmpzJztcclxuXHJcbmNsYXNzIEVuZXJneUNvbnZlcnRlciBleHRlbmRzIEVuZXJneVN5c3RlbUVsZW1lbnQge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0ltYWdlfSBpY29uSW1hZ2UgSW1hZ2UgdG8gaWRlbnRpZnkgc291cmNlIG9uIGNhcm91c2VsIG1lbnVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGljb25JbWFnZSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggaWNvbkltYWdlLCBvcHRpb25zICk7XHJcbiAgICB0aGlzLmluY29taW5nRW5lcmd5Q2h1bmtzID0gY3JlYXRlT2JzZXJ2YWJsZUFycmF5KCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnaW5jb21pbmdFbmVyZ3lDaHVua3MnICksXHJcbiAgICAgIHBoZXRpb1R5cGU6IGNyZWF0ZU9ic2VydmFibGVBcnJheS5PYnNlcnZhYmxlQXJyYXlJTyggUmVmZXJlbmNlSU8oIEVuZXJneUNodW5rLkVuZXJneUNodW5rSU8gKSApXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLm91dGdvaW5nRW5lcmd5Q2h1bmtzID0gY3JlYXRlT2JzZXJ2YWJsZUFycmF5KCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnb3V0Z29pbmdFbmVyZ3lDaHVua3MnICksXHJcbiAgICAgIHBoZXRpb1R5cGU6IGNyZWF0ZU9ic2VydmFibGVBcnJheS5PYnNlcnZhYmxlQXJyYXlJTyggUmVmZXJlbmNlSU8oIEVuZXJneUNodW5rLkVuZXJneUNodW5rSU8gKSApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBnZXQgdGhlIGVuZXJneSBjaHVua3MgdGhhdCB0aGlzIHNvdXJjZSB3YW50cyB0byB0cmFuc2ZlciB0byB0aGUgbmV4dCBlbmVyZ3kgc3lzdGVtIGVsZW1lbnQsIHJlYWRpbmcgY2xlYXJzIHRoZVxyXG4gICAqIGxpc3RcclxuICAgKiBAcmV0dXJucyB7RW5lcmd5Q2h1bmtbXX1cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZXh0cmFjdE91dGdvaW5nRW5lcmd5Q2h1bmtzKCkge1xyXG4gICAgY29uc3QgZW5lcmd5Q2h1bmtzVG9SZW1vdmUgPSB0aGlzLm91dGdvaW5nRW5lcmd5Q2h1bmtzLmZpbHRlciggZW5lcmd5Q2h1bmsgPT4gdGhpcy5lbmVyZ3lDaHVua0xpc3QuaW5jbHVkZXMoIGVuZXJneUNodW5rICkgKTtcclxuICAgIHRoaXMuZW5lcmd5Q2h1bmtMaXN0LnJlbW92ZUFsbCggZW5lcmd5Q2h1bmtzVG9SZW1vdmUgKTtcclxuXHJcbiAgICBjb25zdCBvdXRnb2luZ0VuZXJneUNodW5rc0NvcHkgPSB0aGlzLm91dGdvaW5nRW5lcmd5Q2h1bmtzLnNsaWNlKCk7XHJcbiAgICB0aGlzLm91dGdvaW5nRW5lcmd5Q2h1bmtzLmNsZWFyKCk7XHJcbiAgICByZXR1cm4gb3V0Z29pbmdFbmVyZ3lDaHVua3NDb3B5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5qZWN0IGEgbGlzdCBvZiBlbmVyZ3kgY2h1bmtzIGludG8gdGhpcyBlbmVyZ3kgc3lzdGVtIGVsZW1lbnQuICBPbmNlIGluamVjdGVkLCBpdCBpcyB0aGUgc3lzdGVtJ3MgcmVzcG9uc2liaWxpdHlcclxuICAgKiB0byBtb3ZlLCBjb252ZXJ0LCBhbmQgb3RoZXJ3aXNlIG1hbmFnZSB0aGVtLlxyXG4gICAqIEBwYXJhbSB7RW5lcmd5Q2h1bmtbXX0gZW5lcmd5Q2h1bmtzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGluamVjdEVuZXJneUNodW5rcyggZW5lcmd5Q2h1bmtzICkge1xyXG4gICAgZW5lcmd5Q2h1bmtzLmZvckVhY2goIGVuZXJneUNodW5rID0+IHtcclxuICAgICAgaWYgKCAhdGhpcy5pbmNvbWluZ0VuZXJneUNodW5rcy5pbmNsdWRlcyggZW5lcmd5Q2h1bmsgKSApIHtcclxuICAgICAgICB0aGlzLmluY29taW5nRW5lcmd5Q2h1bmtzLnB1c2goIGVuZXJneUNodW5rICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNsZWFyIGludGVybmFsIGxpc3Qgb2YgZW5lcmd5IGNodW5rcyBhbmQgb3V0Z29pbmcgZW5lcmd5IGNodW5rc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjbGVhckVuZXJneUNodW5rcygpIHtcclxuICAgIHN1cGVyLmNsZWFyRW5lcmd5Q2h1bmtzKCk7XHJcbiAgICB0aGlzLmluY29taW5nRW5lcmd5Q2h1bmtzLmZvckVhY2goIGNodW5rID0+IHRoaXMuZW5lcmd5Q2h1bmtHcm91cC5kaXNwb3NlRWxlbWVudCggY2h1bmsgKSApO1xyXG4gICAgdGhpcy5pbmNvbWluZ0VuZXJneUNodW5rcy5jbGVhcigpO1xyXG4gICAgdGhpcy5vdXRnb2luZ0VuZXJneUNodW5rcy5mb3JFYWNoKCBjaHVuayA9PiB0aGlzLmVuZXJneUNodW5rR3JvdXAuZGlzcG9zZUVsZW1lbnQoIGNodW5rICkgKTtcclxuICAgIHRoaXMub3V0Z29pbmdFbmVyZ3lDaHVua3MuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ0VuZXJneUNvbnZlcnRlcicsIEVuZXJneUNvbnZlcnRlciApO1xyXG5leHBvcnQgZGVmYXVsdCBFbmVyZ3lDb252ZXJ0ZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxxQkFBcUIsTUFBTSw4Q0FBOEM7QUFDaEYsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFDcEUsT0FBT0MsV0FBVyxNQUFNLG1DQUFtQztBQUMzRCxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBRTFELE1BQU1DLGVBQWUsU0FBU0QsbUJBQW1CLENBQUM7RUFFaEQ7QUFDRjtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUc7SUFFaENBLE9BQU8sR0FBR1QsS0FBSyxDQUFFO01BQ2ZVLE1BQU0sRUFBRVQsTUFBTSxDQUFDVTtJQUNqQixDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUQsU0FBUyxFQUFFQyxPQUFRLENBQUM7SUFDM0IsSUFBSSxDQUFDRyxvQkFBb0IsR0FBR2IscUJBQXFCLENBQUU7TUFDakRXLE1BQU0sRUFBRUQsT0FBTyxDQUFDQyxNQUFNLENBQUNHLFlBQVksQ0FBRSxzQkFBdUIsQ0FBQztNQUM3REMsVUFBVSxFQUFFZixxQkFBcUIsQ0FBQ2dCLGlCQUFpQixDQUFFYixXQUFXLENBQUVDLFdBQVcsQ0FBQ2EsYUFBYyxDQUFFO0lBQ2hHLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0Msb0JBQW9CLEdBQUdsQixxQkFBcUIsQ0FBRTtNQUNqRFcsTUFBTSxFQUFFRCxPQUFPLENBQUNDLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLHNCQUF1QixDQUFDO01BQzdEQyxVQUFVLEVBQUVmLHFCQUFxQixDQUFDZ0IsaUJBQWlCLENBQUViLFdBQVcsQ0FBRUMsV0FBVyxDQUFDYSxhQUFjLENBQUU7SUFDaEcsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLDJCQUEyQkEsQ0FBQSxFQUFHO0lBQzVCLE1BQU1DLG9CQUFvQixHQUFHLElBQUksQ0FBQ0Ysb0JBQW9CLENBQUNHLE1BQU0sQ0FBRUMsV0FBVyxJQUFJLElBQUksQ0FBQ0MsZUFBZSxDQUFDQyxRQUFRLENBQUVGLFdBQVksQ0FBRSxDQUFDO0lBQzVILElBQUksQ0FBQ0MsZUFBZSxDQUFDRSxTQUFTLENBQUVMLG9CQUFxQixDQUFDO0lBRXRELE1BQU1NLHdCQUF3QixHQUFHLElBQUksQ0FBQ1Isb0JBQW9CLENBQUNTLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLElBQUksQ0FBQ1Qsb0JBQW9CLENBQUNVLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLE9BQU9GLHdCQUF3QjtFQUNqQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsa0JBQWtCQSxDQUFFQyxZQUFZLEVBQUc7SUFDakNBLFlBQVksQ0FBQ0MsT0FBTyxDQUFFVCxXQUFXLElBQUk7TUFDbkMsSUFBSyxDQUFDLElBQUksQ0FBQ1Qsb0JBQW9CLENBQUNXLFFBQVEsQ0FBRUYsV0FBWSxDQUFDLEVBQUc7UUFDeEQsSUFBSSxDQUFDVCxvQkFBb0IsQ0FBQ21CLElBQUksQ0FBRVYsV0FBWSxDQUFDO01BQy9DO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRVcsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsS0FBSyxDQUFDQSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQ3BCLG9CQUFvQixDQUFDa0IsT0FBTyxDQUFFRyxLQUFLLElBQUksSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0MsY0FBYyxDQUFFRixLQUFNLENBQUUsQ0FBQztJQUMzRixJQUFJLENBQUNyQixvQkFBb0IsQ0FBQ2UsS0FBSyxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDVixvQkFBb0IsQ0FBQ2EsT0FBTyxDQUFFRyxLQUFLLElBQUksSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0MsY0FBYyxDQUFFRixLQUFNLENBQUUsQ0FBQztJQUMzRixJQUFJLENBQUNoQixvQkFBb0IsQ0FBQ1UsS0FBSyxDQUFDLENBQUM7RUFDbkM7QUFDRjtBQUVBdkIscUJBQXFCLENBQUNnQyxRQUFRLENBQUUsaUJBQWlCLEVBQUU5QixlQUFnQixDQUFDO0FBQ3BFLGVBQWVBLGVBQWUifQ==