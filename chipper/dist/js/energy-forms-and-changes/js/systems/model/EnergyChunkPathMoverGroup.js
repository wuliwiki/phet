// Copyright 2020-2022, University of Colorado Boulder

/**
 * PhetioGroup for creating EnergyChunkPathMovers. This type adds support for dynamically created and destroyed,
 * instrumented PhET-iO elements.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetioGroup from '../../../../tandem/js/PhetioGroup.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergyChunkPathMover from './EnergyChunkPathMover.js';
class EnergyChunkPathMoverGroup extends PhetioGroup {
  /**
   *
   * @param energyChunkGroup
   * @param options
   */
  constructor(energyChunkGroup, options) {
    options = merge({
      tandem: Tandem.REQUIRED,
      phetioType: PhetioGroup.PhetioGroupIO(EnergyChunkPathMover.EnergyChunkPathMoverIO)
    }, options);
    super(EnergyChunkPathMoverGroup.createEnergyChunkPathMover, () => [energyChunkGroup.archetype, [Vector2.ZERO], 1, {}], options);
  }

  // @public
  static createEnergyChunkPathMover(tandem, energyChunk, path, speed, options) {
    assert && options && assert(!options.hasOwnProperty('tandem'), 'EnergyChunkPathMoverGroup supplies its own tandem');
    return new EnergyChunkPathMover(energyChunk, path, speed, merge({
      tandem: tandem
    }, options));
  }
}
energyFormsAndChanges.register('EnergyChunkPathMoverGroup', EnergyChunkPathMoverGroup);
export default EnergyChunkPathMoverGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwibWVyZ2UiLCJQaGV0aW9Hcm91cCIsIlRhbmRlbSIsImVuZXJneUZvcm1zQW5kQ2hhbmdlcyIsIkVuZXJneUNodW5rUGF0aE1vdmVyIiwiRW5lcmd5Q2h1bmtQYXRoTW92ZXJHcm91cCIsImNvbnN0cnVjdG9yIiwiZW5lcmd5Q2h1bmtHcm91cCIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsInBoZXRpb1R5cGUiLCJQaGV0aW9Hcm91cElPIiwiRW5lcmd5Q2h1bmtQYXRoTW92ZXJJTyIsImNyZWF0ZUVuZXJneUNodW5rUGF0aE1vdmVyIiwiYXJjaGV0eXBlIiwiWkVSTyIsImVuZXJneUNodW5rIiwicGF0aCIsInNwZWVkIiwiYXNzZXJ0IiwiaGFzT3duUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVuZXJneUNodW5rUGF0aE1vdmVyR3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGhldGlvR3JvdXAgZm9yIGNyZWF0aW5nIEVuZXJneUNodW5rUGF0aE1vdmVycy4gVGhpcyB0eXBlIGFkZHMgc3VwcG9ydCBmb3IgZHluYW1pY2FsbHkgY3JlYXRlZCBhbmQgZGVzdHJveWVkLFxyXG4gKiBpbnN0cnVtZW50ZWQgUGhFVC1pTyBlbGVtZW50cy5cclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0aW9Hcm91cCBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvR3JvdXAuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIGZyb20gJy4uLy4uL2VuZXJneUZvcm1zQW5kQ2hhbmdlcy5qcyc7XHJcbmltcG9ydCBFbmVyZ3lDaHVua1BhdGhNb3ZlciBmcm9tICcuL0VuZXJneUNodW5rUGF0aE1vdmVyLmpzJztcclxuXHJcbmNsYXNzIEVuZXJneUNodW5rUGF0aE1vdmVyR3JvdXAgZXh0ZW5kcyBQaGV0aW9Hcm91cCB7XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGVuZXJneUNodW5rR3JvdXBcclxuICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBlbmVyZ3lDaHVua0dyb3VwLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRCxcclxuICAgICAgcGhldGlvVHlwZTogUGhldGlvR3JvdXAuUGhldGlvR3JvdXBJTyggRW5lcmd5Q2h1bmtQYXRoTW92ZXIuRW5lcmd5Q2h1bmtQYXRoTW92ZXJJTyApXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIEVuZXJneUNodW5rUGF0aE1vdmVyR3JvdXAuY3JlYXRlRW5lcmd5Q2h1bmtQYXRoTW92ZXIsXHJcbiAgICAgICgpID0+IFsgZW5lcmd5Q2h1bmtHcm91cC5hcmNoZXR5cGUsIFsgVmVjdG9yMi5aRVJPIF0sIDEsIHt9IF0sIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBzdGF0aWMgY3JlYXRlRW5lcmd5Q2h1bmtQYXRoTW92ZXIoIHRhbmRlbSwgZW5lcmd5Q2h1bmssIHBhdGgsIHNwZWVkLCBvcHRpb25zICkge1xyXG4gICAgYXNzZXJ0ICYmIG9wdGlvbnMgJiYgYXNzZXJ0KCAhb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSggJ3RhbmRlbScgKSwgJ0VuZXJneUNodW5rUGF0aE1vdmVyR3JvdXAgc3VwcGxpZXMgaXRzIG93biB0YW5kZW0nICk7XHJcbiAgICByZXR1cm4gbmV3IEVuZXJneUNodW5rUGF0aE1vdmVyKCBlbmVyZ3lDaHVuaywgcGF0aCwgc3BlZWQsIG1lcmdlKCB7IHRhbmRlbTogdGFuZGVtIH0sIG9wdGlvbnMgKSApO1xyXG4gIH1cclxufVxyXG5cclxuZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLnJlZ2lzdGVyKCAnRW5lcmd5Q2h1bmtQYXRoTW92ZXJHcm91cCcsIEVuZXJneUNodW5rUGF0aE1vdmVyR3JvdXAgKTtcclxuZXhwb3J0IGRlZmF1bHQgRW5lcmd5Q2h1bmtQYXRoTW92ZXJHcm91cDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLHNDQUFzQztBQUM5RCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsTUFBTUMseUJBQXlCLFNBQVNKLFdBQVcsQ0FBQztFQUVsRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLGdCQUFnQixFQUFFQyxPQUFPLEVBQUc7SUFFdkNBLE9BQU8sR0FBR1IsS0FBSyxDQUFFO01BQ2ZTLE1BQU0sRUFBRVAsTUFBTSxDQUFDUSxRQUFRO01BQ3ZCQyxVQUFVLEVBQUVWLFdBQVcsQ0FBQ1csYUFBYSxDQUFFUixvQkFBb0IsQ0FBQ1Msc0JBQXVCO0lBQ3JGLENBQUMsRUFBRUwsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFSCx5QkFBeUIsQ0FBQ1MsMEJBQTBCLEVBQ3pELE1BQU0sQ0FBRVAsZ0JBQWdCLENBQUNRLFNBQVMsRUFBRSxDQUFFaEIsT0FBTyxDQUFDaUIsSUFBSSxDQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFFLEVBQUVSLE9BQVEsQ0FBQztFQUM1RTs7RUFFQTtFQUNBLE9BQU9NLDBCQUEwQkEsQ0FBRUwsTUFBTSxFQUFFUSxXQUFXLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFWCxPQUFPLEVBQUc7SUFDN0VZLE1BQU0sSUFBSVosT0FBTyxJQUFJWSxNQUFNLENBQUUsQ0FBQ1osT0FBTyxDQUFDYSxjQUFjLENBQUUsUUFBUyxDQUFDLEVBQUUsbURBQW9ELENBQUM7SUFDdkgsT0FBTyxJQUFJakIsb0JBQW9CLENBQUVhLFdBQVcsRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVuQixLQUFLLENBQUU7TUFBRVMsTUFBTSxFQUFFQTtJQUFPLENBQUMsRUFBRUQsT0FBUSxDQUFFLENBQUM7RUFDbkc7QUFDRjtBQUVBTCxxQkFBcUIsQ0FBQ21CLFFBQVEsQ0FBRSwyQkFBMkIsRUFBRWpCLHlCQUEwQixDQUFDO0FBQ3hGLGVBQWVBLHlCQUF5QiJ9