// Copyright 2016-2021, University of Colorado Boulder

/**
 * base class for energy sources, i.e. model elements that produce energy and can supply it to other energy system
 * components, such as energy converters or energy users
 *
 * @author John Blanco
 * @author Andrew Adare
 * @author Jesse Greenberg
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import merge from '../../../../phet-core/js/merge.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import EnergyChunk from '../../common/model/EnergyChunk.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergySystemElement from './EnergySystemElement.js';
class EnergySource extends EnergySystemElement {
  /**
   * @param {Image} iconImage Image to identify source on carousel menu
   * @param {Object} [options]
   */
  constructor(iconImage, options) {
    options = merge({
      tandem: Tandem.REQUIRED
    }, options);
    super(iconImage, options);
    this.outgoingEnergyChunks = createObservableArray({
      tandem: options.tandem.createTandem('outgoingEnergyChunks'),
      phetioType: createObservableArray.ObservableArrayIO(ReferenceIO(EnergyChunk.EnergyChunkIO))
    });
    assert && this.outgoingEnergyChunks.addItemAddedListener(chunk => {
      assert && assert(!this.energyChunkList.includes(chunk), 'cannot be included in energyChunkList and outgoing list');
    });
  }

  /**
   * Get the energy chunks that this source wants to transfer to the next energy system element. This is a mutating
   * operation: it removes all outgoing chunks from both this.energyChunkList and this.outgoingEnergyChunks.
   * @returns {EnergyChunk[]} List of energy chunks to transfer
   * @public
   */
  extractOutgoingEnergyChunks() {
    // remove all outgoing chunks from this.energyChunkList
    const energyChunksToRemove = this.outgoingEnergyChunks.filter(energyChunk => this.energyChunkList.includes(energyChunk));
    this.energyChunkList.removeAll(energyChunksToRemove);
    const outgoingEnergyChunksCopy = this.outgoingEnergyChunks.slice();
    this.outgoingEnergyChunks.clear();
    return outgoingEnergyChunksCopy;
  }

  /**
   * clear internal list of energy chunks and outgoing energy chunks
   * @protected
   * @override
   */
  clearEnergyChunks() {
    super.clearEnergyChunks();
    this.outgoingEnergyChunks.forEach(chunk => this.energyChunkGroup.disposeElement(chunk));
    this.outgoingEnergyChunks.clear();
  }
}
energyFormsAndChanges.register('EnergySource', EnergySource);
export default EnergySource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJtZXJnZSIsIlRhbmRlbSIsIlJlZmVyZW5jZUlPIiwiRW5lcmd5Q2h1bmsiLCJlbmVyZ3lGb3Jtc0FuZENoYW5nZXMiLCJFbmVyZ3lTeXN0ZW1FbGVtZW50IiwiRW5lcmd5U291cmNlIiwiY29uc3RydWN0b3IiLCJpY29uSW1hZ2UiLCJvcHRpb25zIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJvdXRnb2luZ0VuZXJneUNodW5rcyIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1R5cGUiLCJPYnNlcnZhYmxlQXJyYXlJTyIsIkVuZXJneUNodW5rSU8iLCJhc3NlcnQiLCJhZGRJdGVtQWRkZWRMaXN0ZW5lciIsImNodW5rIiwiZW5lcmd5Q2h1bmtMaXN0IiwiaW5jbHVkZXMiLCJleHRyYWN0T3V0Z29pbmdFbmVyZ3lDaHVua3MiLCJlbmVyZ3lDaHVua3NUb1JlbW92ZSIsImZpbHRlciIsImVuZXJneUNodW5rIiwicmVtb3ZlQWxsIiwib3V0Z29pbmdFbmVyZ3lDaHVua3NDb3B5Iiwic2xpY2UiLCJjbGVhciIsImNsZWFyRW5lcmd5Q2h1bmtzIiwiZm9yRWFjaCIsImVuZXJneUNodW5rR3JvdXAiLCJkaXNwb3NlRWxlbWVudCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5lcmd5U291cmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIGJhc2UgY2xhc3MgZm9yIGVuZXJneSBzb3VyY2VzLCBpLmUuIG1vZGVsIGVsZW1lbnRzIHRoYXQgcHJvZHVjZSBlbmVyZ3kgYW5kIGNhbiBzdXBwbHkgaXQgdG8gb3RoZXIgZW5lcmd5IHN5c3RlbVxyXG4gKiBjb21wb25lbnRzLCBzdWNoIGFzIGVuZXJneSBjb252ZXJ0ZXJzIG9yIGVuZXJneSB1c2Vyc1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNyZWF0ZU9ic2VydmFibGVBcnJheSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL2NyZWF0ZU9ic2VydmFibGVBcnJheS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IEVuZXJneUNodW5rIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9FbmVyZ3lDaHVuay5qcyc7XHJcbmltcG9ydCBlbmVyZ3lGb3Jtc0FuZENoYW5nZXMgZnJvbSAnLi4vLi4vZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLmpzJztcclxuaW1wb3J0IEVuZXJneVN5c3RlbUVsZW1lbnQgZnJvbSAnLi9FbmVyZ3lTeXN0ZW1FbGVtZW50LmpzJztcclxuXHJcbmNsYXNzIEVuZXJneVNvdXJjZSBleHRlbmRzIEVuZXJneVN5c3RlbUVsZW1lbnQge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0ltYWdlfSBpY29uSW1hZ2UgSW1hZ2UgdG8gaWRlbnRpZnkgc291cmNlIG9uIGNhcm91c2VsIG1lbnVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGljb25JbWFnZSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggaWNvbkltYWdlLCBvcHRpb25zICk7XHJcbiAgICB0aGlzLm91dGdvaW5nRW5lcmd5Q2h1bmtzID0gY3JlYXRlT2JzZXJ2YWJsZUFycmF5KCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnb3V0Z29pbmdFbmVyZ3lDaHVua3MnICksXHJcbiAgICAgIHBoZXRpb1R5cGU6IGNyZWF0ZU9ic2VydmFibGVBcnJheS5PYnNlcnZhYmxlQXJyYXlJTyggUmVmZXJlbmNlSU8oIEVuZXJneUNodW5rLkVuZXJneUNodW5rSU8gKSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIHRoaXMub3V0Z29pbmdFbmVyZ3lDaHVua3MuYWRkSXRlbUFkZGVkTGlzdGVuZXIoIGNodW5rID0+IHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIXRoaXMuZW5lcmd5Q2h1bmtMaXN0LmluY2x1ZGVzKCBjaHVuayApLCAnY2Fubm90IGJlIGluY2x1ZGVkIGluIGVuZXJneUNodW5rTGlzdCBhbmQgb3V0Z29pbmcgbGlzdCcgKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgZW5lcmd5IGNodW5rcyB0aGF0IHRoaXMgc291cmNlIHdhbnRzIHRvIHRyYW5zZmVyIHRvIHRoZSBuZXh0IGVuZXJneSBzeXN0ZW0gZWxlbWVudC4gVGhpcyBpcyBhIG11dGF0aW5nXHJcbiAgICogb3BlcmF0aW9uOiBpdCByZW1vdmVzIGFsbCBvdXRnb2luZyBjaHVua3MgZnJvbSBib3RoIHRoaXMuZW5lcmd5Q2h1bmtMaXN0IGFuZCB0aGlzLm91dGdvaW5nRW5lcmd5Q2h1bmtzLlxyXG4gICAqIEByZXR1cm5zIHtFbmVyZ3lDaHVua1tdfSBMaXN0IG9mIGVuZXJneSBjaHVua3MgdG8gdHJhbnNmZXJcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZXh0cmFjdE91dGdvaW5nRW5lcmd5Q2h1bmtzKCkge1xyXG5cclxuICAgIC8vIHJlbW92ZSBhbGwgb3V0Z29pbmcgY2h1bmtzIGZyb20gdGhpcy5lbmVyZ3lDaHVua0xpc3RcclxuICAgIGNvbnN0IGVuZXJneUNodW5rc1RvUmVtb3ZlID0gdGhpcy5vdXRnb2luZ0VuZXJneUNodW5rcy5maWx0ZXIoIGVuZXJneUNodW5rID0+IHRoaXMuZW5lcmd5Q2h1bmtMaXN0LmluY2x1ZGVzKCBlbmVyZ3lDaHVuayApICk7XHJcbiAgICB0aGlzLmVuZXJneUNodW5rTGlzdC5yZW1vdmVBbGwoIGVuZXJneUNodW5rc1RvUmVtb3ZlICk7XHJcblxyXG4gICAgY29uc3Qgb3V0Z29pbmdFbmVyZ3lDaHVua3NDb3B5ID0gdGhpcy5vdXRnb2luZ0VuZXJneUNodW5rcy5zbGljZSgpO1xyXG4gICAgdGhpcy5vdXRnb2luZ0VuZXJneUNodW5rcy5jbGVhcigpO1xyXG4gICAgcmV0dXJuIG91dGdvaW5nRW5lcmd5Q2h1bmtzQ29weTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNsZWFyIGludGVybmFsIGxpc3Qgb2YgZW5lcmd5IGNodW5rcyBhbmQgb3V0Z29pbmcgZW5lcmd5IGNodW5rc1xyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBjbGVhckVuZXJneUNodW5rcygpIHtcclxuICAgIHN1cGVyLmNsZWFyRW5lcmd5Q2h1bmtzKCk7XHJcbiAgICB0aGlzLm91dGdvaW5nRW5lcmd5Q2h1bmtzLmZvckVhY2goIGNodW5rID0+IHRoaXMuZW5lcmd5Q2h1bmtHcm91cC5kaXNwb3NlRWxlbWVudCggY2h1bmsgKSApO1xyXG4gICAgdGhpcy5vdXRnb2luZ0VuZXJneUNodW5rcy5jbGVhcigpO1xyXG4gIH1cclxufVxyXG5cclxuZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLnJlZ2lzdGVyKCAnRW5lcmd5U291cmNlJywgRW5lcmd5U291cmNlICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVuZXJneVNvdXJjZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EscUJBQXFCLE1BQU0sOENBQThDO0FBQ2hGLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLE9BQU9DLFdBQVcsTUFBTSxtQ0FBbUM7QUFDM0QsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBQ2xFLE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQUUxRCxNQUFNQyxZQUFZLFNBQVNELG1CQUFtQixDQUFDO0VBRTdDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFHO0lBRWhDQSxPQUFPLEdBQUdULEtBQUssQ0FBRTtNQUNmVSxNQUFNLEVBQUVULE1BQU0sQ0FBQ1U7SUFDakIsQ0FBQyxFQUFFRixPQUFRLENBQUM7SUFFWixLQUFLLENBQUVELFNBQVMsRUFBRUMsT0FBUSxDQUFDO0lBQzNCLElBQUksQ0FBQ0csb0JBQW9CLEdBQUdiLHFCQUFxQixDQUFFO01BQ2pEVyxNQUFNLEVBQUVELE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRyxZQUFZLENBQUUsc0JBQXVCLENBQUM7TUFDN0RDLFVBQVUsRUFBRWYscUJBQXFCLENBQUNnQixpQkFBaUIsQ0FBRWIsV0FBVyxDQUFFQyxXQUFXLENBQUNhLGFBQWMsQ0FBRTtJQUNoRyxDQUFFLENBQUM7SUFFSEMsTUFBTSxJQUFJLElBQUksQ0FBQ0wsb0JBQW9CLENBQUNNLG9CQUFvQixDQUFFQyxLQUFLLElBQUk7TUFDakVGLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFDRyxlQUFlLENBQUNDLFFBQVEsQ0FBRUYsS0FBTSxDQUFDLEVBQUUseURBQTBELENBQUM7SUFDeEgsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLDJCQUEyQkEsQ0FBQSxFQUFHO0lBRTVCO0lBQ0EsTUFBTUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDWCxvQkFBb0IsQ0FBQ1ksTUFBTSxDQUFFQyxXQUFXLElBQUksSUFBSSxDQUFDTCxlQUFlLENBQUNDLFFBQVEsQ0FBRUksV0FBWSxDQUFFLENBQUM7SUFDNUgsSUFBSSxDQUFDTCxlQUFlLENBQUNNLFNBQVMsQ0FBRUgsb0JBQXFCLENBQUM7SUFFdEQsTUFBTUksd0JBQXdCLEdBQUcsSUFBSSxDQUFDZixvQkFBb0IsQ0FBQ2dCLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLElBQUksQ0FBQ2hCLG9CQUFvQixDQUFDaUIsS0FBSyxDQUFDLENBQUM7SUFDakMsT0FBT0Ysd0JBQXdCO0VBQ2pDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsS0FBSyxDQUFDQSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQ2xCLG9CQUFvQixDQUFDbUIsT0FBTyxDQUFFWixLQUFLLElBQUksSUFBSSxDQUFDYSxnQkFBZ0IsQ0FBQ0MsY0FBYyxDQUFFZCxLQUFNLENBQUUsQ0FBQztJQUMzRixJQUFJLENBQUNQLG9CQUFvQixDQUFDaUIsS0FBSyxDQUFDLENBQUM7RUFDbkM7QUFDRjtBQUVBekIscUJBQXFCLENBQUM4QixRQUFRLENBQUUsY0FBYyxFQUFFNUIsWUFBYSxDQUFDO0FBQzlELGVBQWVBLFlBQVkifQ==