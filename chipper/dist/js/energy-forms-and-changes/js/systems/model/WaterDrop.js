// Copyright 2016-2020, University of Colorado Boulder

/**
 * a model of a drop of water, generally used to create a stream of water coming from, say, a faucet
 *
 * @author John Blanco
 * @author Andrew Adare
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';

// the following constant is used to adjust the way in which the drop elongates as its velocity increases
const WIDTH_CHANGE_TWEAK_FACTOR = 0.05;
class WaterDrop {
  /**
   * @param {Vector2} initialPosition - (x,y) position in model space
   * @param {Vector2} initialVelocity - 2D velocity at initialization
   * @param {Dimension2} size - droplet dimensions
   */
  constructor(initialPosition, initialVelocity, size) {
    // @public {Vector2} - after being transformed to view coordinates, this position is the distance from the faucet head
    this.position = initialPosition;

    // @public
    this.velocityProperty = new Vector2Property(initialVelocity);

    // @public (read-only) {Dimension2}
    this.size = size;

    // adjust the size as the velocity changes, mimicking how water drops thin out as they fall through air
    // doesn't need to be unlinked because the water drop owns its velocityProperty
    this.velocityProperty.link(velocity => {
      const newWidth = 1 / (1 + velocity.magnitude * WIDTH_CHANGE_TWEAK_FACTOR) * this.size.width;
      const newHeight = this.size.height * this.size.width / newWidth;
      this.size.set(new Dimension2(newWidth, newHeight));
    });
  }
}
energyFormsAndChanges.register('WaterDrop', WaterDrop);
export default WaterDrop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVmVjdG9yMlByb3BlcnR5IiwiZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIiwiV0lEVEhfQ0hBTkdFX1RXRUFLX0ZBQ1RPUiIsIldhdGVyRHJvcCIsImNvbnN0cnVjdG9yIiwiaW5pdGlhbFBvc2l0aW9uIiwiaW5pdGlhbFZlbG9jaXR5Iiwic2l6ZSIsInBvc2l0aW9uIiwidmVsb2NpdHlQcm9wZXJ0eSIsImxpbmsiLCJ2ZWxvY2l0eSIsIm5ld1dpZHRoIiwibWFnbml0dWRlIiwid2lkdGgiLCJuZXdIZWlnaHQiLCJoZWlnaHQiLCJzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldhdGVyRHJvcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBhIG1vZGVsIG9mIGEgZHJvcCBvZiB3YXRlciwgZ2VuZXJhbGx5IHVzZWQgdG8gY3JlYXRlIGEgc3RyZWFtIG9mIHdhdGVyIGNvbWluZyBmcm9tLCBzYXksIGEgZmF1Y2V0XHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBBbmRyZXcgQWRhcmVcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFZlY3RvcjJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMlByb3BlcnR5LmpzJztcclxuaW1wb3J0IGVuZXJneUZvcm1zQW5kQ2hhbmdlcyBmcm9tICcuLi8uLi9lbmVyZ3lGb3Jtc0FuZENoYW5nZXMuanMnO1xyXG5cclxuLy8gdGhlIGZvbGxvd2luZyBjb25zdGFudCBpcyB1c2VkIHRvIGFkanVzdCB0aGUgd2F5IGluIHdoaWNoIHRoZSBkcm9wIGVsb25nYXRlcyBhcyBpdHMgdmVsb2NpdHkgaW5jcmVhc2VzXHJcbmNvbnN0IFdJRFRIX0NIQU5HRV9UV0VBS19GQUNUT1IgPSAwLjA1O1xyXG5cclxuY2xhc3MgV2F0ZXJEcm9wIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBpbml0aWFsUG9zaXRpb24gLSAoeCx5KSBwb3NpdGlvbiBpbiBtb2RlbCBzcGFjZVxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gaW5pdGlhbFZlbG9jaXR5IC0gMkQgdmVsb2NpdHkgYXQgaW5pdGlhbGl6YXRpb25cclxuICAgKiBAcGFyYW0ge0RpbWVuc2lvbjJ9IHNpemUgLSBkcm9wbGV0IGRpbWVuc2lvbnNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaW5pdGlhbFBvc2l0aW9uLCBpbml0aWFsVmVsb2NpdHksIHNpemUgKSB7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7VmVjdG9yMn0gLSBhZnRlciBiZWluZyB0cmFuc2Zvcm1lZCB0byB2aWV3IGNvb3JkaW5hdGVzLCB0aGlzIHBvc2l0aW9uIGlzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBmYXVjZXQgaGVhZFxyXG4gICAgdGhpcy5wb3NpdGlvbiA9IGluaXRpYWxQb3NpdGlvbjtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLnZlbG9jaXR5UHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBpbml0aWFsVmVsb2NpdHkgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtEaW1lbnNpb24yfVxyXG4gICAgdGhpcy5zaXplID0gc2l6ZTtcclxuXHJcbiAgICAvLyBhZGp1c3QgdGhlIHNpemUgYXMgdGhlIHZlbG9jaXR5IGNoYW5nZXMsIG1pbWlja2luZyBob3cgd2F0ZXIgZHJvcHMgdGhpbiBvdXQgYXMgdGhleSBmYWxsIHRocm91Z2ggYWlyXHJcbiAgICAvLyBkb2Vzbid0IG5lZWQgdG8gYmUgdW5saW5rZWQgYmVjYXVzZSB0aGUgd2F0ZXIgZHJvcCBvd25zIGl0cyB2ZWxvY2l0eVByb3BlcnR5XHJcbiAgICB0aGlzLnZlbG9jaXR5UHJvcGVydHkubGluayggdmVsb2NpdHkgPT4ge1xyXG4gICAgICBjb25zdCBuZXdXaWR0aCA9ICggMSAvICggMSArIHZlbG9jaXR5Lm1hZ25pdHVkZSAqIFdJRFRIX0NIQU5HRV9UV0VBS19GQUNUT1IgKSApICogdGhpcy5zaXplLndpZHRoO1xyXG4gICAgICBjb25zdCBuZXdIZWlnaHQgPSAoIHRoaXMuc2l6ZS5oZWlnaHQgKiB0aGlzLnNpemUud2lkdGggKSAvIG5ld1dpZHRoO1xyXG4gICAgICB0aGlzLnNpemUuc2V0KCBuZXcgRGltZW5zaW9uMiggbmV3V2lkdGgsIG5ld0hlaWdodCApICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5lbmVyZ3lGb3Jtc0FuZENoYW5nZXMucmVnaXN0ZXIoICdXYXRlckRyb3AnLCBXYXRlckRyb3AgKTtcclxuZXhwb3J0IGRlZmF1bHQgV2F0ZXJEcm9wOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyxlQUFlLE1BQU0sdUNBQXVDO0FBQ25FLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQzs7QUFFbEU7QUFDQSxNQUFNQyx5QkFBeUIsR0FBRyxJQUFJO0FBRXRDLE1BQU1DLFNBQVMsQ0FBQztFQUVkO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxlQUFlLEVBQUVDLElBQUksRUFBRztJQUVwRDtJQUNBLElBQUksQ0FBQ0MsUUFBUSxHQUFHSCxlQUFlOztJQUUvQjtJQUNBLElBQUksQ0FBQ0ksZ0JBQWdCLEdBQUcsSUFBSVQsZUFBZSxDQUFFTSxlQUFnQixDQUFDOztJQUU5RDtJQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHQSxJQUFJOztJQUVoQjtJQUNBO0lBQ0EsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFFQyxRQUFRLElBQUk7TUFDdEMsTUFBTUMsUUFBUSxHQUFLLENBQUMsSUFBSyxDQUFDLEdBQUdELFFBQVEsQ0FBQ0UsU0FBUyxHQUFHWCx5QkFBeUIsQ0FBRSxHQUFLLElBQUksQ0FBQ0ssSUFBSSxDQUFDTyxLQUFLO01BQ2pHLE1BQU1DLFNBQVMsR0FBSyxJQUFJLENBQUNSLElBQUksQ0FBQ1MsTUFBTSxHQUFHLElBQUksQ0FBQ1QsSUFBSSxDQUFDTyxLQUFLLEdBQUtGLFFBQVE7TUFDbkUsSUFBSSxDQUFDTCxJQUFJLENBQUNVLEdBQUcsQ0FBRSxJQUFJbEIsVUFBVSxDQUFFYSxRQUFRLEVBQUVHLFNBQVUsQ0FBRSxDQUFDO0lBQ3hELENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWQscUJBQXFCLENBQUNpQixRQUFRLENBQUUsV0FBVyxFQUFFZixTQUFVLENBQUM7QUFDeEQsZUFBZUEsU0FBUyJ9