// Copyright 2016-2022, University of Colorado Boulder

/**
 * A model element that represents a belt that connects two rotating wheels together, like a fan belt in an automobile
 * engine.
 *
 * Note to anyone who would like to reuse this: It was written to be reasonably general, but there wasn't a lot of
 * testing done to make sure it handles all cases of different wheel size and positions.  If this is ever moved into
 * common code, such testing should be done and any non-general behavior remedied. -jbphet, 11/2/2018
 *
 * @author John Blanco
 * @author Andrew Adare
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import { Shape } from '../../../../kite/js/imports.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
class Belt {
  /**
   * @param {number} wheel1Radius
   * @param {Vector2} wheel1Center
   * @param {number} wheel2Radius
   * @param {Vector2} wheel2Center
   */
  constructor(wheel1Radius, wheel1Center, wheel2Radius, wheel2Center) {
    // Calculate the angle needed to make the belt look like it contacts the wheels at the right places, see
    // https://github.com/phetsims/energy-forms-and-changes/issues/98.
    const contactAngle = Math.asin((wheel2Radius - wheel1Radius) / wheel1Center.distance(wheel2Center));

    // vectors needed to create the belt shape
    const wheel1CenterToWheelTwoCenter = wheel2Center.minus(wheel1Center);
    const wheel1CenterToArcEnd = wheel1CenterToWheelTwoCenter.perpendicular.withMagnitude(wheel1Radius).rotated(-contactAngle);
    const wheel1CenterToArcStart = wheel1CenterToArcEnd.rotated(Math.PI + 2 * contactAngle);
    const wheel2CenterToArcStart = wheel1CenterToWheelTwoCenter.perpendicular.withMagnitude(wheel2Radius).rotated(-contactAngle);
    const wheel2CenterToArcEnd = wheel2CenterToArcStart.rotated(Math.PI + 2 * contactAngle);

    // create the shape of the belt
    const beltShape = new Shape();
    beltShape.moveToPoint(wheel1Center.plus(wheel1CenterToArcStart));
    beltShape.arcPoint(wheel1Center, wheel1Radius, wheel1CenterToArcStart.angle, wheel1CenterToArcEnd.angle, false);
    beltShape.lineToPoint(wheel2Center.plus(wheel2CenterToArcStart));
    beltShape.arcPoint(wheel2Center, wheel2Radius, wheel2CenterToArcStart.angle, wheel2CenterToArcEnd.angle);
    beltShape.lineToPoint(wheel1Center.plus(wheel1CenterToArcStart));
    beltShape.close();

    // @public (read-only) {Shape}
    this.beltShape = beltShape;

    // @public {BooleanProperty}
    this.isVisibleProperty = new BooleanProperty(false);
  }
}
energyFormsAndChanges.register('Belt', Belt);
export default Belt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJTaGFwZSIsImVuZXJneUZvcm1zQW5kQ2hhbmdlcyIsIkJlbHQiLCJjb25zdHJ1Y3RvciIsIndoZWVsMVJhZGl1cyIsIndoZWVsMUNlbnRlciIsIndoZWVsMlJhZGl1cyIsIndoZWVsMkNlbnRlciIsImNvbnRhY3RBbmdsZSIsIk1hdGgiLCJhc2luIiwiZGlzdGFuY2UiLCJ3aGVlbDFDZW50ZXJUb1doZWVsVHdvQ2VudGVyIiwibWludXMiLCJ3aGVlbDFDZW50ZXJUb0FyY0VuZCIsInBlcnBlbmRpY3VsYXIiLCJ3aXRoTWFnbml0dWRlIiwicm90YXRlZCIsIndoZWVsMUNlbnRlclRvQXJjU3RhcnQiLCJQSSIsIndoZWVsMkNlbnRlclRvQXJjU3RhcnQiLCJ3aGVlbDJDZW50ZXJUb0FyY0VuZCIsImJlbHRTaGFwZSIsIm1vdmVUb1BvaW50IiwicGx1cyIsImFyY1BvaW50IiwiYW5nbGUiLCJsaW5lVG9Qb2ludCIsImNsb3NlIiwiaXNWaXNpYmxlUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJlbHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBtb2RlbCBlbGVtZW50IHRoYXQgcmVwcmVzZW50cyBhIGJlbHQgdGhhdCBjb25uZWN0cyB0d28gcm90YXRpbmcgd2hlZWxzIHRvZ2V0aGVyLCBsaWtlIGEgZmFuIGJlbHQgaW4gYW4gYXV0b21vYmlsZVxyXG4gKiBlbmdpbmUuXHJcbiAqXHJcbiAqIE5vdGUgdG8gYW55b25lIHdobyB3b3VsZCBsaWtlIHRvIHJldXNlIHRoaXM6IEl0IHdhcyB3cml0dGVuIHRvIGJlIHJlYXNvbmFibHkgZ2VuZXJhbCwgYnV0IHRoZXJlIHdhc24ndCBhIGxvdCBvZlxyXG4gKiB0ZXN0aW5nIGRvbmUgdG8gbWFrZSBzdXJlIGl0IGhhbmRsZXMgYWxsIGNhc2VzIG9mIGRpZmZlcmVudCB3aGVlbCBzaXplIGFuZCBwb3NpdGlvbnMuICBJZiB0aGlzIGlzIGV2ZXIgbW92ZWQgaW50b1xyXG4gKiBjb21tb24gY29kZSwgc3VjaCB0ZXN0aW5nIHNob3VsZCBiZSBkb25lIGFuZCBhbnkgbm9uLWdlbmVyYWwgYmVoYXZpb3IgcmVtZWRpZWQuIC1qYnBoZXQsIDExLzIvMjAxOFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGVuZXJneUZvcm1zQW5kQ2hhbmdlcyBmcm9tICcuLi8uLi9lbmVyZ3lGb3Jtc0FuZENoYW5nZXMuanMnO1xyXG5cclxuY2xhc3MgQmVsdCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aGVlbDFSYWRpdXNcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IHdoZWVsMUNlbnRlclxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aGVlbDJSYWRpdXNcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IHdoZWVsMkNlbnRlclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB3aGVlbDFSYWRpdXMsIHdoZWVsMUNlbnRlciwgd2hlZWwyUmFkaXVzLCB3aGVlbDJDZW50ZXIgKSB7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBhbmdsZSBuZWVkZWQgdG8gbWFrZSB0aGUgYmVsdCBsb29rIGxpa2UgaXQgY29udGFjdHMgdGhlIHdoZWVscyBhdCB0aGUgcmlnaHQgcGxhY2VzLCBzZWVcclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9lbmVyZ3ktZm9ybXMtYW5kLWNoYW5nZXMvaXNzdWVzLzk4LlxyXG4gICAgY29uc3QgY29udGFjdEFuZ2xlID0gTWF0aC5hc2luKCAoIHdoZWVsMlJhZGl1cyAtIHdoZWVsMVJhZGl1cyApIC8gd2hlZWwxQ2VudGVyLmRpc3RhbmNlKCB3aGVlbDJDZW50ZXIgKSApO1xyXG5cclxuICAgIC8vIHZlY3RvcnMgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgYmVsdCBzaGFwZVxyXG4gICAgY29uc3Qgd2hlZWwxQ2VudGVyVG9XaGVlbFR3b0NlbnRlciA9IHdoZWVsMkNlbnRlci5taW51cyggd2hlZWwxQ2VudGVyICk7XHJcbiAgICBjb25zdCB3aGVlbDFDZW50ZXJUb0FyY0VuZCA9XHJcbiAgICAgIHdoZWVsMUNlbnRlclRvV2hlZWxUd29DZW50ZXIucGVycGVuZGljdWxhci53aXRoTWFnbml0dWRlKCB3aGVlbDFSYWRpdXMgKS5yb3RhdGVkKCAtY29udGFjdEFuZ2xlICk7XHJcbiAgICBjb25zdCB3aGVlbDFDZW50ZXJUb0FyY1N0YXJ0ID0gd2hlZWwxQ2VudGVyVG9BcmNFbmQucm90YXRlZCggTWF0aC5QSSArIDIgKiBjb250YWN0QW5nbGUgKTtcclxuICAgIGNvbnN0IHdoZWVsMkNlbnRlclRvQXJjU3RhcnQgPVxyXG4gICAgICB3aGVlbDFDZW50ZXJUb1doZWVsVHdvQ2VudGVyLnBlcnBlbmRpY3VsYXIud2l0aE1hZ25pdHVkZSggd2hlZWwyUmFkaXVzICkucm90YXRlZCggLWNvbnRhY3RBbmdsZSApO1xyXG4gICAgY29uc3Qgd2hlZWwyQ2VudGVyVG9BcmNFbmQgPSB3aGVlbDJDZW50ZXJUb0FyY1N0YXJ0LnJvdGF0ZWQoIE1hdGguUEkgKyAyICogY29udGFjdEFuZ2xlICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBzaGFwZSBvZiB0aGUgYmVsdFxyXG4gICAgY29uc3QgYmVsdFNoYXBlID0gbmV3IFNoYXBlKCk7XHJcbiAgICBiZWx0U2hhcGUubW92ZVRvUG9pbnQoIHdoZWVsMUNlbnRlci5wbHVzKCB3aGVlbDFDZW50ZXJUb0FyY1N0YXJ0ICkgKTtcclxuICAgIGJlbHRTaGFwZS5hcmNQb2ludChcclxuICAgICAgd2hlZWwxQ2VudGVyLFxyXG4gICAgICB3aGVlbDFSYWRpdXMsXHJcbiAgICAgIHdoZWVsMUNlbnRlclRvQXJjU3RhcnQuYW5nbGUsXHJcbiAgICAgIHdoZWVsMUNlbnRlclRvQXJjRW5kLmFuZ2xlLFxyXG4gICAgICBmYWxzZVxyXG4gICAgKTtcclxuICAgIGJlbHRTaGFwZS5saW5lVG9Qb2ludCggd2hlZWwyQ2VudGVyLnBsdXMoIHdoZWVsMkNlbnRlclRvQXJjU3RhcnQgKSApO1xyXG4gICAgYmVsdFNoYXBlLmFyY1BvaW50KFxyXG4gICAgICB3aGVlbDJDZW50ZXIsXHJcbiAgICAgIHdoZWVsMlJhZGl1cyxcclxuICAgICAgd2hlZWwyQ2VudGVyVG9BcmNTdGFydC5hbmdsZSxcclxuICAgICAgd2hlZWwyQ2VudGVyVG9BcmNFbmQuYW5nbGVcclxuICAgICk7XHJcbiAgICBiZWx0U2hhcGUubGluZVRvUG9pbnQoIHdoZWVsMUNlbnRlci5wbHVzKCB3aGVlbDFDZW50ZXJUb0FyY1N0YXJ0ICkgKTtcclxuICAgIGJlbHRTaGFwZS5jbG9zZSgpO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkge1NoYXBlfVxyXG4gICAgdGhpcy5iZWx0U2hhcGUgPSBiZWx0U2hhcGU7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7Qm9vbGVhblByb3BlcnR5fVxyXG4gICAgdGhpcy5pc1Zpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcbiAgfVxyXG59XHJcblxyXG5lbmVyZ3lGb3Jtc0FuZENoYW5nZXMucmVnaXN0ZXIoICdCZWx0JywgQmVsdCApO1xyXG5leHBvcnQgZGVmYXVsdCBCZWx0OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBRWxFLE1BQU1DLElBQUksQ0FBQztFQUVUO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxZQUFZLEVBQUVDLFlBQVksRUFBRUMsWUFBWSxFQUFFQyxZQUFZLEVBQUc7SUFFcEU7SUFDQTtJQUNBLE1BQU1DLFlBQVksR0FBR0MsSUFBSSxDQUFDQyxJQUFJLENBQUUsQ0FBRUosWUFBWSxHQUFHRixZQUFZLElBQUtDLFlBQVksQ0FBQ00sUUFBUSxDQUFFSixZQUFhLENBQUUsQ0FBQzs7SUFFekc7SUFDQSxNQUFNSyw0QkFBNEIsR0FBR0wsWUFBWSxDQUFDTSxLQUFLLENBQUVSLFlBQWEsQ0FBQztJQUN2RSxNQUFNUyxvQkFBb0IsR0FDeEJGLDRCQUE0QixDQUFDRyxhQUFhLENBQUNDLGFBQWEsQ0FBRVosWUFBYSxDQUFDLENBQUNhLE9BQU8sQ0FBRSxDQUFDVCxZQUFhLENBQUM7SUFDbkcsTUFBTVUsc0JBQXNCLEdBQUdKLG9CQUFvQixDQUFDRyxPQUFPLENBQUVSLElBQUksQ0FBQ1UsRUFBRSxHQUFHLENBQUMsR0FBR1gsWUFBYSxDQUFDO0lBQ3pGLE1BQU1ZLHNCQUFzQixHQUMxQlIsNEJBQTRCLENBQUNHLGFBQWEsQ0FBQ0MsYUFBYSxDQUFFVixZQUFhLENBQUMsQ0FBQ1csT0FBTyxDQUFFLENBQUNULFlBQWEsQ0FBQztJQUNuRyxNQUFNYSxvQkFBb0IsR0FBR0Qsc0JBQXNCLENBQUNILE9BQU8sQ0FBRVIsSUFBSSxDQUFDVSxFQUFFLEdBQUcsQ0FBQyxHQUFHWCxZQUFhLENBQUM7O0lBRXpGO0lBQ0EsTUFBTWMsU0FBUyxHQUFHLElBQUl0QixLQUFLLENBQUMsQ0FBQztJQUM3QnNCLFNBQVMsQ0FBQ0MsV0FBVyxDQUFFbEIsWUFBWSxDQUFDbUIsSUFBSSxDQUFFTixzQkFBdUIsQ0FBRSxDQUFDO0lBQ3BFSSxTQUFTLENBQUNHLFFBQVEsQ0FDaEJwQixZQUFZLEVBQ1pELFlBQVksRUFDWmMsc0JBQXNCLENBQUNRLEtBQUssRUFDNUJaLG9CQUFvQixDQUFDWSxLQUFLLEVBQzFCLEtBQ0YsQ0FBQztJQUNESixTQUFTLENBQUNLLFdBQVcsQ0FBRXBCLFlBQVksQ0FBQ2lCLElBQUksQ0FBRUosc0JBQXVCLENBQUUsQ0FBQztJQUNwRUUsU0FBUyxDQUFDRyxRQUFRLENBQ2hCbEIsWUFBWSxFQUNaRCxZQUFZLEVBQ1pjLHNCQUFzQixDQUFDTSxLQUFLLEVBQzVCTCxvQkFBb0IsQ0FBQ0ssS0FDdkIsQ0FBQztJQUNESixTQUFTLENBQUNLLFdBQVcsQ0FBRXRCLFlBQVksQ0FBQ21CLElBQUksQ0FBRU4sc0JBQXVCLENBQUUsQ0FBQztJQUNwRUksU0FBUyxDQUFDTSxLQUFLLENBQUMsQ0FBQzs7SUFFakI7SUFDQSxJQUFJLENBQUNOLFNBQVMsR0FBR0EsU0FBUzs7SUFFMUI7SUFDQSxJQUFJLENBQUNPLGlCQUFpQixHQUFHLElBQUk5QixlQUFlLENBQUUsS0FBTSxDQUFDO0VBQ3ZEO0FBQ0Y7QUFFQUUscUJBQXFCLENBQUM2QixRQUFRLENBQUUsTUFBTSxFQUFFNUIsSUFBSyxDQUFDO0FBQzlDLGVBQWVBLElBQUkifQ==