// Copyright 2016-2020, University of Colorado Boulder

/**
 * base type for energy users, i.e. model elements that take energy from an energy converter and do something with it,
 * such as producing light or heat
 *
 * @author John Blanco
 * @author Andrew Adare
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import merge from '../../../../phet-core/js/merge.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import EnergyChunk from '../../common/model/EnergyChunk.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergySystemElement from './EnergySystemElement.js';
class EnergyUser extends EnergySystemElement {
  /**
   * @param {Image} iconImage
   * @param {Object} [options]
   */
  constructor(iconImage, options) {
    options = merge({
      tandem: Tandem.REQUIRED
    }, options);
    super(iconImage, options);

    // @private {EnergyChunk[]}
    this.incomingEnergyChunks = createObservableArray({
      tandem: options.tandem.createTandem('incomingEnergyChunks'),
      phetioType: createObservableArray.ObservableArrayIO(ReferenceIO(EnergyChunk.EnergyChunkIO))
    });
  }

  /**
   * Inject a list of energy chunks into this energy system element.  Once injected, it is the system's responsibility
   * to move, convert, and otherwise manage them.
   * @param {Array.<EnergyChunk>} energyChunks - list of energy chunks to inject
   * @public
   */
  injectEnergyChunks(energyChunks) {
    energyChunks.forEach(energyChunk => {
      if (!this.incomingEnergyChunks.includes(energyChunk)) {
        this.incomingEnergyChunks.push(energyChunk);
      }
    });
  }

  /**
   * @protected
   * @override
   */
  clearEnergyChunks() {
    super.clearEnergyChunks();
    this.incomingEnergyChunks.forEach(chunk => this.energyChunkGroup.disposeElement(chunk));
    this.incomingEnergyChunks.clear();
  }
}
energyFormsAndChanges.register('EnergyUser', EnergyUser);
export default EnergyUser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJtZXJnZSIsIlRhbmRlbSIsIlJlZmVyZW5jZUlPIiwiRW5lcmd5Q2h1bmsiLCJlbmVyZ3lGb3Jtc0FuZENoYW5nZXMiLCJFbmVyZ3lTeXN0ZW1FbGVtZW50IiwiRW5lcmd5VXNlciIsImNvbnN0cnVjdG9yIiwiaWNvbkltYWdlIiwib3B0aW9ucyIsInRhbmRlbSIsIlJFUVVJUkVEIiwiaW5jb21pbmdFbmVyZ3lDaHVua3MiLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9UeXBlIiwiT2JzZXJ2YWJsZUFycmF5SU8iLCJFbmVyZ3lDaHVua0lPIiwiaW5qZWN0RW5lcmd5Q2h1bmtzIiwiZW5lcmd5Q2h1bmtzIiwiZm9yRWFjaCIsImVuZXJneUNodW5rIiwiaW5jbHVkZXMiLCJwdXNoIiwiY2xlYXJFbmVyZ3lDaHVua3MiLCJjaHVuayIsImVuZXJneUNodW5rR3JvdXAiLCJkaXNwb3NlRWxlbWVudCIsImNsZWFyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbmVyZ3lVc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIGJhc2UgdHlwZSBmb3IgZW5lcmd5IHVzZXJzLCBpLmUuIG1vZGVsIGVsZW1lbnRzIHRoYXQgdGFrZSBlbmVyZ3kgZnJvbSBhbiBlbmVyZ3kgY29udmVydGVyIGFuZCBkbyBzb21ldGhpbmcgd2l0aCBpdCxcclxuICogc3VjaCBhcyBwcm9kdWNpbmcgbGlnaHQgb3IgaGVhdFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNyZWF0ZU9ic2VydmFibGVBcnJheSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL2NyZWF0ZU9ic2VydmFibGVBcnJheS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IEVuZXJneUNodW5rIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9FbmVyZ3lDaHVuay5qcyc7XHJcbmltcG9ydCBlbmVyZ3lGb3Jtc0FuZENoYW5nZXMgZnJvbSAnLi4vLi4vZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLmpzJztcclxuaW1wb3J0IEVuZXJneVN5c3RlbUVsZW1lbnQgZnJvbSAnLi9FbmVyZ3lTeXN0ZW1FbGVtZW50LmpzJztcclxuXHJcbmNsYXNzIEVuZXJneVVzZXIgZXh0ZW5kcyBFbmVyZ3lTeXN0ZW1FbGVtZW50IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtJbWFnZX0gaWNvbkltYWdlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBpY29uSW1hZ2UsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVEXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGljb25JbWFnZSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtFbmVyZ3lDaHVua1tdfVxyXG4gICAgdGhpcy5pbmNvbWluZ0VuZXJneUNodW5rcyA9IGNyZWF0ZU9ic2VydmFibGVBcnJheSgge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2luY29taW5nRW5lcmd5Q2h1bmtzJyApLFxyXG4gICAgICBwaGV0aW9UeXBlOiBjcmVhdGVPYnNlcnZhYmxlQXJyYXkuT2JzZXJ2YWJsZUFycmF5SU8oIFJlZmVyZW5jZUlPKCBFbmVyZ3lDaHVuay5FbmVyZ3lDaHVua0lPICkgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5qZWN0IGEgbGlzdCBvZiBlbmVyZ3kgY2h1bmtzIGludG8gdGhpcyBlbmVyZ3kgc3lzdGVtIGVsZW1lbnQuICBPbmNlIGluamVjdGVkLCBpdCBpcyB0aGUgc3lzdGVtJ3MgcmVzcG9uc2liaWxpdHlcclxuICAgKiB0byBtb3ZlLCBjb252ZXJ0LCBhbmQgb3RoZXJ3aXNlIG1hbmFnZSB0aGVtLlxyXG4gICAqIEBwYXJhbSB7QXJyYXkuPEVuZXJneUNodW5rPn0gZW5lcmd5Q2h1bmtzIC0gbGlzdCBvZiBlbmVyZ3kgY2h1bmtzIHRvIGluamVjdFxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBpbmplY3RFbmVyZ3lDaHVua3MoIGVuZXJneUNodW5rcyApIHtcclxuICAgIGVuZXJneUNodW5rcy5mb3JFYWNoKCBlbmVyZ3lDaHVuayA9PiB7XHJcbiAgICAgIGlmICggIXRoaXMuaW5jb21pbmdFbmVyZ3lDaHVua3MuaW5jbHVkZXMoIGVuZXJneUNodW5rICkgKSB7XHJcbiAgICAgICAgdGhpcy5pbmNvbWluZ0VuZXJneUNodW5rcy5wdXNoKCBlbmVyZ3lDaHVuayApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgY2xlYXJFbmVyZ3lDaHVua3MoKSB7XHJcbiAgICBzdXBlci5jbGVhckVuZXJneUNodW5rcygpO1xyXG4gICAgdGhpcy5pbmNvbWluZ0VuZXJneUNodW5rcy5mb3JFYWNoKCBjaHVuayA9PiB0aGlzLmVuZXJneUNodW5rR3JvdXAuZGlzcG9zZUVsZW1lbnQoIGNodW5rICkgKTtcclxuICAgIHRoaXMuaW5jb21pbmdFbmVyZ3lDaHVua3MuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ0VuZXJneVVzZXInLCBFbmVyZ3lVc2VyICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVuZXJneVVzZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxxQkFBcUIsTUFBTSw4Q0FBOEM7QUFDaEYsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFDcEUsT0FBT0MsV0FBVyxNQUFNLG1DQUFtQztBQUMzRCxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBRTFELE1BQU1DLFVBQVUsU0FBU0QsbUJBQW1CLENBQUM7RUFFM0M7QUFDRjtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUc7SUFFaENBLE9BQU8sR0FBR1QsS0FBSyxDQUFFO01BQ2ZVLE1BQU0sRUFBRVQsTUFBTSxDQUFDVTtJQUNqQixDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUQsU0FBUyxFQUFFQyxPQUFRLENBQUM7O0lBRTNCO0lBQ0EsSUFBSSxDQUFDRyxvQkFBb0IsR0FBR2IscUJBQXFCLENBQUU7TUFDakRXLE1BQU0sRUFBRUQsT0FBTyxDQUFDQyxNQUFNLENBQUNHLFlBQVksQ0FBRSxzQkFBdUIsQ0FBQztNQUM3REMsVUFBVSxFQUFFZixxQkFBcUIsQ0FBQ2dCLGlCQUFpQixDQUFFYixXQUFXLENBQUVDLFdBQVcsQ0FBQ2EsYUFBYyxDQUFFO0lBQ2hHLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxrQkFBa0JBLENBQUVDLFlBQVksRUFBRztJQUNqQ0EsWUFBWSxDQUFDQyxPQUFPLENBQUVDLFdBQVcsSUFBSTtNQUNuQyxJQUFLLENBQUMsSUFBSSxDQUFDUixvQkFBb0IsQ0FBQ1MsUUFBUSxDQUFFRCxXQUFZLENBQUMsRUFBRztRQUN4RCxJQUFJLENBQUNSLG9CQUFvQixDQUFDVSxJQUFJLENBQUVGLFdBQVksQ0FBQztNQUMvQztJQUNGLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VHLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCLEtBQUssQ0FBQ0EsaUJBQWlCLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUNYLG9CQUFvQixDQUFDTyxPQUFPLENBQUVLLEtBQUssSUFBSSxJQUFJLENBQUNDLGdCQUFnQixDQUFDQyxjQUFjLENBQUVGLEtBQU0sQ0FBRSxDQUFDO0lBQzNGLElBQUksQ0FBQ1osb0JBQW9CLENBQUNlLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0FBQ0Y7QUFFQXZCLHFCQUFxQixDQUFDd0IsUUFBUSxDQUFFLFlBQVksRUFBRXRCLFVBQVcsQ0FBQztBQUMxRCxlQUFlQSxVQUFVIn0=