// Copyright 2016-2022, University of Colorado Boulder

/**
 * a Scenery Node that represents a biker in the view
 *
 * @author John Blanco
 * @author Andrew Adare
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Range from '../../../../dot/js/Range.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Image, Node, Text } from '../../../../scenery/js/imports.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import HSlider from '../../../../sun/js/HSlider.js';
import Panel from '../../../../sun/js/Panel.js';
import bicycleFrame_png from '../../../images/bicycleFrame_png.js';
import bicycleGear_png from '../../../images/bicycleGear_png.js';
import bicycleSpokes_png from '../../../images/bicycleSpokes_png.js';
import cyclistLegBack01_png from '../../../images/cyclistLegBack01_png.js';
import cyclistLegBack02_png from '../../../images/cyclistLegBack02_png.js';
import cyclistLegBack03_png from '../../../images/cyclistLegBack03_png.js';
import cyclistLegBack04_png from '../../../images/cyclistLegBack04_png.js';
import cyclistLegBack05_png from '../../../images/cyclistLegBack05_png.js';
import cyclistLegBack06_png from '../../../images/cyclistLegBack06_png.js';
import cyclistLegBack07_png from '../../../images/cyclistLegBack07_png.js';
import cyclistLegBack08_png from '../../../images/cyclistLegBack08_png.js';
import cyclistLegBack09_png from '../../../images/cyclistLegBack09_png.js';
import cyclistLegBack10_png from '../../../images/cyclistLegBack10_png.js';
import cyclistLegBack11_png from '../../../images/cyclistLegBack11_png.js';
import cyclistLegBack12_png from '../../../images/cyclistLegBack12_png.js';
import cyclistLegBack13_png from '../../../images/cyclistLegBack13_png.js';
import cyclistLegBack14_png from '../../../images/cyclistLegBack14_png.js';
import cyclistLegBack15_png from '../../../images/cyclistLegBack15_png.js';
import cyclistLegBack16_png from '../../../images/cyclistLegBack16_png.js';
import cyclistLegBack17_png from '../../../images/cyclistLegBack17_png.js';
import cyclistLegBack18_png from '../../../images/cyclistLegBack18_png.js';
import cyclistLegFront01_png from '../../../images/cyclistLegFront01_png.js';
import cyclistLegFront02_png from '../../../images/cyclistLegFront02_png.js';
import cyclistLegFront03_png from '../../../images/cyclistLegFront03_png.js';
import cyclistLegFront04_png from '../../../images/cyclistLegFront04_png.js';
import cyclistLegFront05_png from '../../../images/cyclistLegFront05_png.js';
import cyclistLegFront06_png from '../../../images/cyclistLegFront06_png.js';
import cyclistLegFront07_png from '../../../images/cyclistLegFront07_png.js';
import cyclistLegFront08_png from '../../../images/cyclistLegFront08_png.js';
import cyclistLegFront09_png from '../../../images/cyclistLegFront09_png.js';
import cyclistLegFront10_png from '../../../images/cyclistLegFront10_png.js';
import cyclistLegFront11_png from '../../../images/cyclistLegFront11_png.js';
import cyclistLegFront12_png from '../../../images/cyclistLegFront12_png.js';
import cyclistLegFront13_png from '../../../images/cyclistLegFront13_png.js';
import cyclistLegFront14_png from '../../../images/cyclistLegFront14_png.js';
import cyclistLegFront15_png from '../../../images/cyclistLegFront15_png.js';
import cyclistLegFront16_png from '../../../images/cyclistLegFront16_png.js';
import cyclistLegFront17_png from '../../../images/cyclistLegFront17_png.js';
import cyclistLegFront18_png from '../../../images/cyclistLegFront18_png.js';
import cyclistTorso_png from '../../../images/cyclistTorso_png.js';
import cyclistTorsoTired1_png from '../../../images/cyclistTorsoTired1_png.js';
import cyclistTorsoTired2_png from '../../../images/cyclistTorsoTired2_png.js';
import cyclistTorsoTired3_png from '../../../images/cyclistTorsoTired3_png.js';
import EFACConstants from '../../common/EFACConstants.js';
import EnergyChunkLayer from '../../common/view/EnergyChunkLayer.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import EnergyFormsAndChangesStrings from '../../EnergyFormsAndChangesStrings.js';
import Biker from '../model/Biker.js';
import MoveFadeModelElementNode from './MoveFadeModelElementNode.js';
const cyclistBackLegImages = [cyclistLegBack01_png, cyclistLegBack02_png, cyclistLegBack03_png, cyclistLegBack04_png, cyclistLegBack05_png, cyclistLegBack06_png, cyclistLegBack07_png, cyclistLegBack08_png, cyclistLegBack09_png, cyclistLegBack10_png, cyclistLegBack11_png, cyclistLegBack12_png, cyclistLegBack13_png, cyclistLegBack14_png, cyclistLegBack15_png, cyclistLegBack16_png, cyclistLegBack17_png, cyclistLegBack18_png];
const cyclistFrontLegImages = [cyclistLegFront01_png, cyclistLegFront02_png, cyclistLegFront03_png, cyclistLegFront04_png, cyclistLegFront05_png, cyclistLegFront06_png, cyclistLegFront07_png, cyclistLegFront08_png, cyclistLegFront09_png, cyclistLegFront10_png, cyclistLegFront11_png, cyclistLegFront12_png, cyclistLegFront13_png, cyclistLegFront14_png, cyclistLegFront15_png, cyclistLegFront16_png, cyclistLegFront17_png, cyclistLegFront18_png];
const cyclistTorsoImages = [cyclistTorso_png, cyclistTorsoTired1_png, cyclistTorsoTired2_png, cyclistTorsoTired3_png];
assert && assert(Biker.NUMBER_OF_LEG_IMAGES === cyclistFrontLegImages.length, 'NUMBER_OF_LEG_IMAGES in Biker.js must match the number of images used for the legs in BikerNode.js');
const NUMBER_OF_LEG_IMAGES = cyclistFrontLegImages.length;
const NUMBER_OF_TORSO_IMAGES = cyclistTorsoImages.length;

// constants
const BICYCLE_SYSTEM_RIGHT_OFFSET = 123;
const BICYCLE_SYSTEM_TOP_OFFSET = -249;
const IMAGE_SCALE = 0.490; // scale factor used to size the images, empirically determined

const feedMeString = EnergyFormsAndChangesStrings.feedMe;
class BikerNode extends MoveFadeModelElementNode {
  /**
   * @param {Biker} biker EnergySource
   * @param {BooleanProperty} energyChunksVisibleProperty
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Tandem} tandem
   */
  constructor(biker, energyChunksVisibleProperty, modelViewTransform, tandem) {
    super(biker, modelViewTransform, tandem);

    // bike part image nodes
    const bicycleFrameNode = new Image(bicycleFrame_png, {
      right: BICYCLE_SYSTEM_RIGHT_OFFSET,
      top: BICYCLE_SYSTEM_TOP_OFFSET,
      scale: IMAGE_SCALE
    });
    const bicycleGearNode = new Image(bicycleGear_png, {
      center: modelViewTransform.modelToViewDelta(Biker.CENTER_OF_GEAR_OFFSET),
      scale: IMAGE_SCALE
    });
    const bicycleSpokesNode = new Image(bicycleSpokes_png, {
      center: modelViewTransform.modelToViewDelta(Biker.CENTER_OF_BACK_WHEEL_OFFSET),
      scale: IMAGE_SCALE
    });
    const cyclistTorsoRootNode = new Node();
    const cyclistTorsoNodes = [];

    // create the torso image nodes
    for (let i = 0; i < NUMBER_OF_TORSO_IMAGES; i++) {
      cyclistTorsoNodes.push(new Image(cyclistTorsoImages[i], {
        centerX: bicycleFrameNode.centerX,
        bottom: bicycleFrameNode.bottom,
        scale: IMAGE_SCALE
      }));
      cyclistTorsoNodes[i].setVisible(false);
      cyclistTorsoRootNode.addChild(cyclistTorsoNodes[i]);
    }
    const cyclistBackLegRootNode = new Node();
    const cyclistFrontLegRootNode = new Node();
    const cyclistBackLegNodes = [];
    const cyclistFrontLegNodes = [];

    // create the leg image nodes
    for (let i = 0; i < NUMBER_OF_LEG_IMAGES; i++) {
      // back leg image nodes
      cyclistBackLegNodes.push(new Image(cyclistBackLegImages[i], {
        right: BICYCLE_SYSTEM_RIGHT_OFFSET,
        top: BICYCLE_SYSTEM_TOP_OFFSET,
        scale: IMAGE_SCALE
      }));
      cyclistBackLegNodes[i].setVisible(false);
      cyclistBackLegRootNode.addChild(cyclistBackLegNodes[i]);

      // front leg image nodes
      cyclistFrontLegNodes.push(new Image(cyclistFrontLegImages[i], {
        right: BICYCLE_SYSTEM_RIGHT_OFFSET,
        top: BICYCLE_SYSTEM_TOP_OFFSET,
        scale: IMAGE_SCALE
      }));
      cyclistFrontLegNodes[i].setVisible(false);
      cyclistFrontLegRootNode.addChild(cyclistFrontLegNodes[i]);
    }

    // animate legs by setting image visibility based on crank arm angle. also animate the gear by mapping its angle of
    // rotation to the crank arm angle
    let visibleBackLeg = cyclistBackLegNodes[0];
    let visibleFrontLeg = cyclistFrontLegNodes[0];
    const gearRotationPoint = bicycleGearNode.bounds.center;
    biker.crankAngleProperty.link(angle => {
      assert && assert(angle >= 0 && angle <= 2 * Math.PI, `Angle out of range: ${angle}`);
      const i = biker.mapAngleToImageIndex(angle);
      visibleFrontLeg.setVisible(false);
      visibleBackLeg.setVisible(false);
      visibleFrontLeg = cyclistFrontLegNodes[i];
      visibleBackLeg = cyclistBackLegNodes[i];
      visibleFrontLeg.setVisible(true);
      visibleBackLeg.setVisible(true);

      // Scenery doesn't use the convention in physics where a positive rotation is counter-clockwise, so we have to
      // invert the angle in the following calculation.
      const compensatedAngle = (2 * Math.PI - bicycleGearNode.getRotation()) % (2 * Math.PI);
      const delta = angle - compensatedAngle;

      // once the velocity of the biker has decelerated to 0, the crank angle Property is set to a value that aligns to
      // the next closest biker animation frame so that there is no delay for the legs to start moving the next time the
      // biker starts moving. this small change of angle causes the gear to jump a bit when the biker stops, but we can
      // eliminate that jump by checking to see if the biker has any actual velocity, since the angle adjustment only
      // happens when velocity is 0.
      if (biker.crankAngularVelocityProperty.value > 0) {
        bicycleGearNode.rotateAround(gearRotationPoint, -delta);
      }
    });

    // add feedMeButton
    const feedMeButton = new RectangularPushButton({
      content: new Text(feedMeString, {
        font: new PhetFont(18),
        maxWidth: 100
      }),
      listener: () => {
        biker.energyChunksRemainingProperty.reset();
        biker.replenishBikerEnergyChunks(false); // don't clear out existing chunks when adding more
      },

      baseColor: 'rgba(0,220,0,1)',
      centerX: cyclistTorsoNodes[0].centerTop.x,
      centerY: cyclistTorsoNodes[0].centerTop.y - 15,
      minHeight: 30,
      tandem: tandem.createTandem('feedMeButton'),
      phetioReadOnly: true,
      phetioDocumentation: 'button that replenish\'s the biker\'s energy. only visible when the biker is out of energy'
    });
    this.addChild(feedMeButton);

    // control the visibility of the "feed me" button and the tiredness of the upper body based on the energy level
    let visibleTorso = cyclistTorsoNodes[0];
    biker.energyChunksRemainingProperty.link(numberOfChunksRemaining => {
      // only set the state by numberOfChunksRemaining if the biker is active, otherwise set initial state. this is
      // needed for the biker to initially look correct when selected from the carousel
      const percentageOfChunksRemaining = numberOfChunksRemaining / Biker.INITIAL_NUMBER_OF_ENERGY_CHUNKS;
      visibleTorso.setVisible(false);

      // select how tired the cyclist appears by how much energy the have remaining
      visibleTorso = percentageOfChunksRemaining > 0.67 ? cyclistTorsoNodes[0] : percentageOfChunksRemaining > 0.33 ? cyclistTorsoNodes[1] : percentageOfChunksRemaining > 0 ? cyclistTorsoNodes[2] : cyclistTorsoNodes[3];
      visibleTorso.setVisible(true);
      feedMeButton.setVisible(numberOfChunksRemaining === 0);
    });

    // add a listener that will turn the back wheel
    const wheelRotationPoint = bicycleSpokesNode.bounds.center;
    biker.rearWheelAngleProperty.link(angle => {
      assert && assert(angle < 2 * Math.PI, 'Angle is out of bounds');

      // Scenery doesn't use the convention in physics where a positive rotation is counter-clockwise, so we have to
      // invert the angle in the following calculation.
      const compensatedAngle = (2 * Math.PI - bicycleSpokesNode.getRotation()) % (2 * Math.PI);
      const delta = angle - compensatedAngle;
      bicycleSpokesNode.rotateAround(wheelRotationPoint, -delta);
    });
    const controlPanelTandem = tandem.createTandem('controlPanel');

    // slider to control crank speed
    const crankSlider = new HSlider(biker.targetCrankAngularVelocityProperty, new Range(0, Biker.MAX_ANGULAR_VELOCITY_OF_CRANK), {
      trackSize: new Dimension2(200, 5),
      thumbSize: new Dimension2(20, 40),
      thumbTouchAreaXDilation: 11,
      thumbTouchAreaYDilation: 11,
      tandem: controlPanelTandem.createTandem('slider')
    });
    this.addChild(new Panel(crankSlider, {
      fill: EFACConstants.CONTROL_PANEL_BACKGROUND_COLOR,
      stroke: EFACConstants.CONTROL_PANEL_OUTLINE_STROKE,
      lineWidth: EFACConstants.CONTROL_PANEL_OUTLINE_LINE_WIDTH,
      cornerRadius: EFACConstants.CONTROL_PANEL_CORNER_RADIUS,
      centerX: 0,
      centerY: 110,
      resize: false,
      tandem: controlPanelTandem
    }));

    // add the other images used
    this.addChild(cyclistBackLegRootNode);
    this.addChild(bicycleSpokesNode);
    this.addChild(bicycleFrameNode);
    this.addChild(bicycleGearNode);
    this.addChild(cyclistTorsoRootNode);
    this.addChild(cyclistFrontLegRootNode);

    // add the energy chunk layer
    this.addChild(new EnergyChunkLayer(biker.energyChunkList, modelViewTransform, {
      parentPositionProperty: biker.positionProperty
    }));
  }
}
energyFormsAndChanges.register('BikerNode', BikerNode);
export default BikerNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiUmFuZ2UiLCJQaGV0Rm9udCIsIkltYWdlIiwiTm9kZSIsIlRleHQiLCJSZWN0YW5ndWxhclB1c2hCdXR0b24iLCJIU2xpZGVyIiwiUGFuZWwiLCJiaWN5Y2xlRnJhbWVfcG5nIiwiYmljeWNsZUdlYXJfcG5nIiwiYmljeWNsZVNwb2tlc19wbmciLCJjeWNsaXN0TGVnQmFjazAxX3BuZyIsImN5Y2xpc3RMZWdCYWNrMDJfcG5nIiwiY3ljbGlzdExlZ0JhY2swM19wbmciLCJjeWNsaXN0TGVnQmFjazA0X3BuZyIsImN5Y2xpc3RMZWdCYWNrMDVfcG5nIiwiY3ljbGlzdExlZ0JhY2swNl9wbmciLCJjeWNsaXN0TGVnQmFjazA3X3BuZyIsImN5Y2xpc3RMZWdCYWNrMDhfcG5nIiwiY3ljbGlzdExlZ0JhY2swOV9wbmciLCJjeWNsaXN0TGVnQmFjazEwX3BuZyIsImN5Y2xpc3RMZWdCYWNrMTFfcG5nIiwiY3ljbGlzdExlZ0JhY2sxMl9wbmciLCJjeWNsaXN0TGVnQmFjazEzX3BuZyIsImN5Y2xpc3RMZWdCYWNrMTRfcG5nIiwiY3ljbGlzdExlZ0JhY2sxNV9wbmciLCJjeWNsaXN0TGVnQmFjazE2X3BuZyIsImN5Y2xpc3RMZWdCYWNrMTdfcG5nIiwiY3ljbGlzdExlZ0JhY2sxOF9wbmciLCJjeWNsaXN0TGVnRnJvbnQwMV9wbmciLCJjeWNsaXN0TGVnRnJvbnQwMl9wbmciLCJjeWNsaXN0TGVnRnJvbnQwM19wbmciLCJjeWNsaXN0TGVnRnJvbnQwNF9wbmciLCJjeWNsaXN0TGVnRnJvbnQwNV9wbmciLCJjeWNsaXN0TGVnRnJvbnQwNl9wbmciLCJjeWNsaXN0TGVnRnJvbnQwN19wbmciLCJjeWNsaXN0TGVnRnJvbnQwOF9wbmciLCJjeWNsaXN0TGVnRnJvbnQwOV9wbmciLCJjeWNsaXN0TGVnRnJvbnQxMF9wbmciLCJjeWNsaXN0TGVnRnJvbnQxMV9wbmciLCJjeWNsaXN0TGVnRnJvbnQxMl9wbmciLCJjeWNsaXN0TGVnRnJvbnQxM19wbmciLCJjeWNsaXN0TGVnRnJvbnQxNF9wbmciLCJjeWNsaXN0TGVnRnJvbnQxNV9wbmciLCJjeWNsaXN0TGVnRnJvbnQxNl9wbmciLCJjeWNsaXN0TGVnRnJvbnQxN19wbmciLCJjeWNsaXN0TGVnRnJvbnQxOF9wbmciLCJjeWNsaXN0VG9yc29fcG5nIiwiY3ljbGlzdFRvcnNvVGlyZWQxX3BuZyIsImN5Y2xpc3RUb3Jzb1RpcmVkMl9wbmciLCJjeWNsaXN0VG9yc29UaXJlZDNfcG5nIiwiRUZBQ0NvbnN0YW50cyIsIkVuZXJneUNodW5rTGF5ZXIiLCJlbmVyZ3lGb3Jtc0FuZENoYW5nZXMiLCJFbmVyZ3lGb3Jtc0FuZENoYW5nZXNTdHJpbmdzIiwiQmlrZXIiLCJNb3ZlRmFkZU1vZGVsRWxlbWVudE5vZGUiLCJjeWNsaXN0QmFja0xlZ0ltYWdlcyIsImN5Y2xpc3RGcm9udExlZ0ltYWdlcyIsImN5Y2xpc3RUb3Jzb0ltYWdlcyIsImFzc2VydCIsIk5VTUJFUl9PRl9MRUdfSU1BR0VTIiwibGVuZ3RoIiwiTlVNQkVSX09GX1RPUlNPX0lNQUdFUyIsIkJJQ1lDTEVfU1lTVEVNX1JJR0hUX09GRlNFVCIsIkJJQ1lDTEVfU1lTVEVNX1RPUF9PRkZTRVQiLCJJTUFHRV9TQ0FMRSIsImZlZWRNZVN0cmluZyIsImZlZWRNZSIsIkJpa2VyTm9kZSIsImNvbnN0cnVjdG9yIiwiYmlrZXIiLCJlbmVyZ3lDaHVua3NWaXNpYmxlUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJ0YW5kZW0iLCJiaWN5Y2xlRnJhbWVOb2RlIiwicmlnaHQiLCJ0b3AiLCJzY2FsZSIsImJpY3ljbGVHZWFyTm9kZSIsImNlbnRlciIsIm1vZGVsVG9WaWV3RGVsdGEiLCJDRU5URVJfT0ZfR0VBUl9PRkZTRVQiLCJiaWN5Y2xlU3Bva2VzTm9kZSIsIkNFTlRFUl9PRl9CQUNLX1dIRUVMX09GRlNFVCIsImN5Y2xpc3RUb3Jzb1Jvb3ROb2RlIiwiY3ljbGlzdFRvcnNvTm9kZXMiLCJpIiwicHVzaCIsImNlbnRlclgiLCJib3R0b20iLCJzZXRWaXNpYmxlIiwiYWRkQ2hpbGQiLCJjeWNsaXN0QmFja0xlZ1Jvb3ROb2RlIiwiY3ljbGlzdEZyb250TGVnUm9vdE5vZGUiLCJjeWNsaXN0QmFja0xlZ05vZGVzIiwiY3ljbGlzdEZyb250TGVnTm9kZXMiLCJ2aXNpYmxlQmFja0xlZyIsInZpc2libGVGcm9udExlZyIsImdlYXJSb3RhdGlvblBvaW50IiwiYm91bmRzIiwiY3JhbmtBbmdsZVByb3BlcnR5IiwibGluayIsImFuZ2xlIiwiTWF0aCIsIlBJIiwibWFwQW5nbGVUb0ltYWdlSW5kZXgiLCJjb21wZW5zYXRlZEFuZ2xlIiwiZ2V0Um90YXRpb24iLCJkZWx0YSIsImNyYW5rQW5ndWxhclZlbG9jaXR5UHJvcGVydHkiLCJ2YWx1ZSIsInJvdGF0ZUFyb3VuZCIsImZlZWRNZUJ1dHRvbiIsImNvbnRlbnQiLCJmb250IiwibWF4V2lkdGgiLCJsaXN0ZW5lciIsImVuZXJneUNodW5rc1JlbWFpbmluZ1Byb3BlcnR5IiwicmVzZXQiLCJyZXBsZW5pc2hCaWtlckVuZXJneUNodW5rcyIsImJhc2VDb2xvciIsImNlbnRlclRvcCIsIngiLCJjZW50ZXJZIiwieSIsIm1pbkhlaWdodCIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInZpc2libGVUb3JzbyIsIm51bWJlck9mQ2h1bmtzUmVtYWluaW5nIiwicGVyY2VudGFnZU9mQ2h1bmtzUmVtYWluaW5nIiwiSU5JVElBTF9OVU1CRVJfT0ZfRU5FUkdZX0NIVU5LUyIsIndoZWVsUm90YXRpb25Qb2ludCIsInJlYXJXaGVlbEFuZ2xlUHJvcGVydHkiLCJjb250cm9sUGFuZWxUYW5kZW0iLCJjcmFua1NsaWRlciIsInRhcmdldENyYW5rQW5ndWxhclZlbG9jaXR5UHJvcGVydHkiLCJNQVhfQU5HVUxBUl9WRUxPQ0lUWV9PRl9DUkFOSyIsInRyYWNrU2l6ZSIsInRodW1iU2l6ZSIsInRodW1iVG91Y2hBcmVhWERpbGF0aW9uIiwidGh1bWJUb3VjaEFyZWFZRGlsYXRpb24iLCJmaWxsIiwiQ09OVFJPTF9QQU5FTF9CQUNLR1JPVU5EX0NPTE9SIiwic3Ryb2tlIiwiQ09OVFJPTF9QQU5FTF9PVVRMSU5FX1NUUk9LRSIsImxpbmVXaWR0aCIsIkNPTlRST0xfUEFORUxfT1VUTElORV9MSU5FX1dJRFRIIiwiY29ybmVyUmFkaXVzIiwiQ09OVFJPTF9QQU5FTF9DT1JORVJfUkFESVVTIiwicmVzaXplIiwiZW5lcmd5Q2h1bmtMaXN0IiwicGFyZW50UG9zaXRpb25Qcm9wZXJ0eSIsInBvc2l0aW9uUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJpa2VyTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBhIFNjZW5lcnkgTm9kZSB0aGF0IHJlcHJlc2VudHMgYSBiaWtlciBpbiB0aGUgdmlld1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgSW1hZ2UsIE5vZGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBIU2xpZGVyIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9IU2xpZGVyLmpzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBiaWN5Y2xlRnJhbWVfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9iaWN5Y2xlRnJhbWVfcG5nLmpzJztcclxuaW1wb3J0IGJpY3ljbGVHZWFyX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvYmljeWNsZUdlYXJfcG5nLmpzJztcclxuaW1wb3J0IGJpY3ljbGVTcG9rZXNfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9iaWN5Y2xlU3Bva2VzX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnQmFjazAxX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY3ljbGlzdExlZ0JhY2swMV9wbmcuanMnO1xyXG5pbXBvcnQgY3ljbGlzdExlZ0JhY2swMl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdCYWNrMDJfcG5nLmpzJztcclxuaW1wb3J0IGN5Y2xpc3RMZWdCYWNrMDNfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9jeWNsaXN0TGVnQmFjazAzX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnQmFjazA0X3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY3ljbGlzdExlZ0JhY2swNF9wbmcuanMnO1xyXG5pbXBvcnQgY3ljbGlzdExlZ0JhY2swNV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdCYWNrMDVfcG5nLmpzJztcclxuaW1wb3J0IGN5Y2xpc3RMZWdCYWNrMDZfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9jeWNsaXN0TGVnQmFjazA2X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnQmFjazA3X3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY3ljbGlzdExlZ0JhY2swN19wbmcuanMnO1xyXG5pbXBvcnQgY3ljbGlzdExlZ0JhY2swOF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdCYWNrMDhfcG5nLmpzJztcclxuaW1wb3J0IGN5Y2xpc3RMZWdCYWNrMDlfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9jeWNsaXN0TGVnQmFjazA5X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnQmFjazEwX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY3ljbGlzdExlZ0JhY2sxMF9wbmcuanMnO1xyXG5pbXBvcnQgY3ljbGlzdExlZ0JhY2sxMV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdCYWNrMTFfcG5nLmpzJztcclxuaW1wb3J0IGN5Y2xpc3RMZWdCYWNrMTJfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9jeWNsaXN0TGVnQmFjazEyX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnQmFjazEzX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY3ljbGlzdExlZ0JhY2sxM19wbmcuanMnO1xyXG5pbXBvcnQgY3ljbGlzdExlZ0JhY2sxNF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdCYWNrMTRfcG5nLmpzJztcclxuaW1wb3J0IGN5Y2xpc3RMZWdCYWNrMTVfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9jeWNsaXN0TGVnQmFjazE1X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnQmFjazE2X3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY3ljbGlzdExlZ0JhY2sxNl9wbmcuanMnO1xyXG5pbXBvcnQgY3ljbGlzdExlZ0JhY2sxN19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdCYWNrMTdfcG5nLmpzJztcclxuaW1wb3J0IGN5Y2xpc3RMZWdCYWNrMThfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9jeWNsaXN0TGVnQmFjazE4X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwMV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDAxX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwMl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDAyX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwM19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDAzX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwNF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDA0X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwNV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDA1X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwNl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDA2X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwN19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDA3X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwOF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDA4X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQwOV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDA5X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxMF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDEwX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxMV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDExX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxMl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDEyX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxM19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDEzX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxNF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDE0X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxNV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDE1X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxNl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDE2X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxN19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDE3X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0TGVnRnJvbnQxOF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RMZWdGcm9udDE4X3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0VG9yc29fcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9jeWNsaXN0VG9yc29fcG5nLmpzJztcclxuaW1wb3J0IGN5Y2xpc3RUb3Jzb1RpcmVkMV9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2N5Y2xpc3RUb3Jzb1RpcmVkMV9wbmcuanMnO1xyXG5pbXBvcnQgY3ljbGlzdFRvcnNvVGlyZWQyX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY3ljbGlzdFRvcnNvVGlyZWQyX3BuZy5qcyc7XHJcbmltcG9ydCBjeWNsaXN0VG9yc29UaXJlZDNfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9jeWNsaXN0VG9yc29UaXJlZDNfcG5nLmpzJztcclxuaW1wb3J0IEVGQUNDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0VGQUNDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRW5lcmd5Q2h1bmtMYXllciBmcm9tICcuLi8uLi9jb21tb24vdmlldy9FbmVyZ3lDaHVua0xheWVyLmpzJztcclxuaW1wb3J0IGVuZXJneUZvcm1zQW5kQ2hhbmdlcyBmcm9tICcuLi8uLi9lbmVyZ3lGb3Jtc0FuZENoYW5nZXMuanMnO1xyXG5pbXBvcnQgRW5lcmd5Rm9ybXNBbmRDaGFuZ2VzU3RyaW5ncyBmcm9tICcuLi8uLi9FbmVyZ3lGb3Jtc0FuZENoYW5nZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IEJpa2VyIGZyb20gJy4uL21vZGVsL0Jpa2VyLmpzJztcclxuaW1wb3J0IE1vdmVGYWRlTW9kZWxFbGVtZW50Tm9kZSBmcm9tICcuL01vdmVGYWRlTW9kZWxFbGVtZW50Tm9kZS5qcyc7XHJcblxyXG5jb25zdCBjeWNsaXN0QmFja0xlZ0ltYWdlcyA9IFtcclxuICBjeWNsaXN0TGVnQmFjazAxX3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazAyX3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazAzX3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazA0X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazA1X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazA2X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazA3X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazA4X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazA5X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazEwX3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazExX3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazEyX3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazEzX3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazE0X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazE1X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazE2X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazE3X3BuZyxcclxuICBjeWNsaXN0TGVnQmFjazE4X3BuZ1xyXG5dO1xyXG5cclxuY29uc3QgY3ljbGlzdEZyb250TGVnSW1hZ2VzID0gW1xyXG4gIGN5Y2xpc3RMZWdGcm9udDAxX3BuZyxcclxuICBjeWNsaXN0TGVnRnJvbnQwMl9wbmcsXHJcbiAgY3ljbGlzdExlZ0Zyb250MDNfcG5nLFxyXG4gIGN5Y2xpc3RMZWdGcm9udDA0X3BuZyxcclxuICBjeWNsaXN0TGVnRnJvbnQwNV9wbmcsXHJcbiAgY3ljbGlzdExlZ0Zyb250MDZfcG5nLFxyXG4gIGN5Y2xpc3RMZWdGcm9udDA3X3BuZyxcclxuICBjeWNsaXN0TGVnRnJvbnQwOF9wbmcsXHJcbiAgY3ljbGlzdExlZ0Zyb250MDlfcG5nLFxyXG4gIGN5Y2xpc3RMZWdGcm9udDEwX3BuZyxcclxuICBjeWNsaXN0TGVnRnJvbnQxMV9wbmcsXHJcbiAgY3ljbGlzdExlZ0Zyb250MTJfcG5nLFxyXG4gIGN5Y2xpc3RMZWdGcm9udDEzX3BuZyxcclxuICBjeWNsaXN0TGVnRnJvbnQxNF9wbmcsXHJcbiAgY3ljbGlzdExlZ0Zyb250MTVfcG5nLFxyXG4gIGN5Y2xpc3RMZWdGcm9udDE2X3BuZyxcclxuICBjeWNsaXN0TGVnRnJvbnQxN19wbmcsXHJcbiAgY3ljbGlzdExlZ0Zyb250MThfcG5nXHJcbl07XHJcblxyXG5jb25zdCBjeWNsaXN0VG9yc29JbWFnZXMgPSBbXHJcbiBjeWNsaXN0VG9yc29fcG5nLFxyXG4gY3ljbGlzdFRvcnNvVGlyZWQxX3BuZyxcclxuIGN5Y2xpc3RUb3Jzb1RpcmVkMl9wbmcsXHJcbiBjeWNsaXN0VG9yc29UaXJlZDNfcG5nXHJcbl07XHJcbmFzc2VydCAmJiBhc3NlcnQoIEJpa2VyLk5VTUJFUl9PRl9MRUdfSU1BR0VTID09PSBjeWNsaXN0RnJvbnRMZWdJbWFnZXMubGVuZ3RoLFxyXG4gICdOVU1CRVJfT0ZfTEVHX0lNQUdFUyBpbiBCaWtlci5qcyBtdXN0IG1hdGNoIHRoZSBudW1iZXIgb2YgaW1hZ2VzIHVzZWQgZm9yIHRoZSBsZWdzIGluIEJpa2VyTm9kZS5qcydcclxuKTtcclxuY29uc3QgTlVNQkVSX09GX0xFR19JTUFHRVMgPSBjeWNsaXN0RnJvbnRMZWdJbWFnZXMubGVuZ3RoO1xyXG5jb25zdCBOVU1CRVJfT0ZfVE9SU09fSU1BR0VTID0gY3ljbGlzdFRvcnNvSW1hZ2VzLmxlbmd0aDtcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBCSUNZQ0xFX1NZU1RFTV9SSUdIVF9PRkZTRVQgPSAxMjM7XHJcbmNvbnN0IEJJQ1lDTEVfU1lTVEVNX1RPUF9PRkZTRVQgPSAtMjQ5O1xyXG5jb25zdCBJTUFHRV9TQ0FMRSA9IDAuNDkwOyAvLyBzY2FsZSBmYWN0b3IgdXNlZCB0byBzaXplIHRoZSBpbWFnZXMsIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuXHJcbmNvbnN0IGZlZWRNZVN0cmluZyA9IEVuZXJneUZvcm1zQW5kQ2hhbmdlc1N0cmluZ3MuZmVlZE1lO1xyXG5cclxuY2xhc3MgQmlrZXJOb2RlIGV4dGVuZHMgTW92ZUZhZGVNb2RlbEVsZW1lbnROb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCaWtlcn0gYmlrZXIgRW5lcmd5U291cmNlXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IGVuZXJneUNodW5rc1Zpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBiaWtlciwgZW5lcmd5Q2h1bmtzVmlzaWJsZVByb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHRhbmRlbSApIHtcclxuICAgIHN1cGVyKCBiaWtlciwgbW9kZWxWaWV3VHJhbnNmb3JtLCB0YW5kZW0gKTtcclxuXHJcbiAgICAvLyBiaWtlIHBhcnQgaW1hZ2Ugbm9kZXNcclxuICAgIGNvbnN0IGJpY3ljbGVGcmFtZU5vZGUgPSBuZXcgSW1hZ2UoIGJpY3ljbGVGcmFtZV9wbmcsIHtcclxuICAgICAgcmlnaHQ6IEJJQ1lDTEVfU1lTVEVNX1JJR0hUX09GRlNFVCxcclxuICAgICAgdG9wOiBCSUNZQ0xFX1NZU1RFTV9UT1BfT0ZGU0VULFxyXG4gICAgICBzY2FsZTogSU1BR0VfU0NBTEVcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGJpY3ljbGVHZWFyTm9kZSA9IG5ldyBJbWFnZSggYmljeWNsZUdlYXJfcG5nLCB7XHJcbiAgICAgIGNlbnRlcjogbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGEoIEJpa2VyLkNFTlRFUl9PRl9HRUFSX09GRlNFVCApLFxyXG4gICAgICBzY2FsZTogSU1BR0VfU0NBTEVcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGJpY3ljbGVTcG9rZXNOb2RlID0gbmV3IEltYWdlKCBiaWN5Y2xlU3Bva2VzX3BuZywge1xyXG4gICAgICBjZW50ZXI6IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhKCBCaWtlci5DRU5URVJfT0ZfQkFDS19XSEVFTF9PRkZTRVQgKSxcclxuICAgICAgc2NhbGU6IElNQUdFX1NDQUxFXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBjeWNsaXN0VG9yc29Sb290Tm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICBjb25zdCBjeWNsaXN0VG9yc29Ob2RlcyA9IFtdO1xyXG5cclxuICAgIC8vIGNyZWF0ZSB0aGUgdG9yc28gaW1hZ2Ugbm9kZXNcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IE5VTUJFUl9PRl9UT1JTT19JTUFHRVM7IGkrKyApIHtcclxuICAgICAgY3ljbGlzdFRvcnNvTm9kZXMucHVzaCggbmV3IEltYWdlKCBjeWNsaXN0VG9yc29JbWFnZXNbIGkgXSwge1xyXG4gICAgICAgIGNlbnRlclg6IGJpY3ljbGVGcmFtZU5vZGUuY2VudGVyWCxcclxuICAgICAgICBib3R0b206IGJpY3ljbGVGcmFtZU5vZGUuYm90dG9tLFxyXG4gICAgICAgIHNjYWxlOiBJTUFHRV9TQ0FMRVxyXG4gICAgICB9ICkgKTtcclxuICAgICAgY3ljbGlzdFRvcnNvTm9kZXNbIGkgXS5zZXRWaXNpYmxlKCBmYWxzZSApO1xyXG4gICAgICBjeWNsaXN0VG9yc29Sb290Tm9kZS5hZGRDaGlsZCggY3ljbGlzdFRvcnNvTm9kZXNbIGkgXSApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY3ljbGlzdEJhY2tMZWdSb290Tm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICBjb25zdCBjeWNsaXN0RnJvbnRMZWdSb290Tm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICBjb25zdCBjeWNsaXN0QmFja0xlZ05vZGVzID0gW107XHJcbiAgICBjb25zdCBjeWNsaXN0RnJvbnRMZWdOb2RlcyA9IFtdO1xyXG5cclxuICAgIC8vIGNyZWF0ZSB0aGUgbGVnIGltYWdlIG5vZGVzXHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBOVU1CRVJfT0ZfTEVHX0lNQUdFUzsgaSsrICkge1xyXG5cclxuICAgICAgLy8gYmFjayBsZWcgaW1hZ2Ugbm9kZXNcclxuICAgICAgY3ljbGlzdEJhY2tMZWdOb2Rlcy5wdXNoKCBuZXcgSW1hZ2UoIGN5Y2xpc3RCYWNrTGVnSW1hZ2VzWyBpIF0sIHtcclxuICAgICAgICByaWdodDogQklDWUNMRV9TWVNURU1fUklHSFRfT0ZGU0VULFxyXG4gICAgICAgIHRvcDogQklDWUNMRV9TWVNURU1fVE9QX09GRlNFVCxcclxuICAgICAgICBzY2FsZTogSU1BR0VfU0NBTEVcclxuICAgICAgfSApICk7XHJcbiAgICAgIGN5Y2xpc3RCYWNrTGVnTm9kZXNbIGkgXS5zZXRWaXNpYmxlKCBmYWxzZSApO1xyXG4gICAgICBjeWNsaXN0QmFja0xlZ1Jvb3ROb2RlLmFkZENoaWxkKCBjeWNsaXN0QmFja0xlZ05vZGVzWyBpIF0gKTtcclxuXHJcbiAgICAgIC8vIGZyb250IGxlZyBpbWFnZSBub2Rlc1xyXG4gICAgICBjeWNsaXN0RnJvbnRMZWdOb2Rlcy5wdXNoKCBuZXcgSW1hZ2UoIGN5Y2xpc3RGcm9udExlZ0ltYWdlc1sgaSBdLCB7XHJcbiAgICAgICAgcmlnaHQ6IEJJQ1lDTEVfU1lTVEVNX1JJR0hUX09GRlNFVCxcclxuICAgICAgICB0b3A6IEJJQ1lDTEVfU1lTVEVNX1RPUF9PRkZTRVQsXHJcbiAgICAgICAgc2NhbGU6IElNQUdFX1NDQUxFXHJcbiAgICAgIH0gKSApO1xyXG4gICAgICBjeWNsaXN0RnJvbnRMZWdOb2Rlc1sgaSBdLnNldFZpc2libGUoIGZhbHNlICk7XHJcbiAgICAgIGN5Y2xpc3RGcm9udExlZ1Jvb3ROb2RlLmFkZENoaWxkKCBjeWNsaXN0RnJvbnRMZWdOb2Rlc1sgaSBdICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYW5pbWF0ZSBsZWdzIGJ5IHNldHRpbmcgaW1hZ2UgdmlzaWJpbGl0eSBiYXNlZCBvbiBjcmFuayBhcm0gYW5nbGUuIGFsc28gYW5pbWF0ZSB0aGUgZ2VhciBieSBtYXBwaW5nIGl0cyBhbmdsZSBvZlxyXG4gICAgLy8gcm90YXRpb24gdG8gdGhlIGNyYW5rIGFybSBhbmdsZVxyXG4gICAgbGV0IHZpc2libGVCYWNrTGVnID0gY3ljbGlzdEJhY2tMZWdOb2Rlc1sgMCBdO1xyXG4gICAgbGV0IHZpc2libGVGcm9udExlZyA9IGN5Y2xpc3RGcm9udExlZ05vZGVzWyAwIF07XHJcbiAgICBjb25zdCBnZWFyUm90YXRpb25Qb2ludCA9IGJpY3ljbGVHZWFyTm9kZS5ib3VuZHMuY2VudGVyO1xyXG4gICAgYmlrZXIuY3JhbmtBbmdsZVByb3BlcnR5LmxpbmsoIGFuZ2xlID0+IHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggYW5nbGUgPj0gMCAmJiBhbmdsZSA8PSAyICogTWF0aC5QSSwgYEFuZ2xlIG91dCBvZiByYW5nZTogJHthbmdsZX1gICk7XHJcbiAgICAgIGNvbnN0IGkgPSBiaWtlci5tYXBBbmdsZVRvSW1hZ2VJbmRleCggYW5nbGUgKTtcclxuICAgICAgdmlzaWJsZUZyb250TGVnLnNldFZpc2libGUoIGZhbHNlICk7XHJcbiAgICAgIHZpc2libGVCYWNrTGVnLnNldFZpc2libGUoIGZhbHNlICk7XHJcbiAgICAgIHZpc2libGVGcm9udExlZyA9IGN5Y2xpc3RGcm9udExlZ05vZGVzWyBpIF07XHJcbiAgICAgIHZpc2libGVCYWNrTGVnID0gY3ljbGlzdEJhY2tMZWdOb2Rlc1sgaSBdO1xyXG4gICAgICB2aXNpYmxlRnJvbnRMZWcuc2V0VmlzaWJsZSggdHJ1ZSApO1xyXG4gICAgICB2aXNpYmxlQmFja0xlZy5zZXRWaXNpYmxlKCB0cnVlICk7XHJcblxyXG4gICAgICAvLyBTY2VuZXJ5IGRvZXNuJ3QgdXNlIHRoZSBjb252ZW50aW9uIGluIHBoeXNpY3Mgd2hlcmUgYSBwb3NpdGl2ZSByb3RhdGlvbiBpcyBjb3VudGVyLWNsb2Nrd2lzZSwgc28gd2UgaGF2ZSB0b1xyXG4gICAgICAvLyBpbnZlcnQgdGhlIGFuZ2xlIGluIHRoZSBmb2xsb3dpbmcgY2FsY3VsYXRpb24uXHJcbiAgICAgIGNvbnN0IGNvbXBlbnNhdGVkQW5nbGUgPSAoIDIgKiBNYXRoLlBJIC0gYmljeWNsZUdlYXJOb2RlLmdldFJvdGF0aW9uKCkgKSAlICggMiAqIE1hdGguUEkgKTtcclxuICAgICAgY29uc3QgZGVsdGEgPSBhbmdsZSAtIGNvbXBlbnNhdGVkQW5nbGU7XHJcblxyXG4gICAgICAvLyBvbmNlIHRoZSB2ZWxvY2l0eSBvZiB0aGUgYmlrZXIgaGFzIGRlY2VsZXJhdGVkIHRvIDAsIHRoZSBjcmFuayBhbmdsZSBQcm9wZXJ0eSBpcyBzZXQgdG8gYSB2YWx1ZSB0aGF0IGFsaWducyB0b1xyXG4gICAgICAvLyB0aGUgbmV4dCBjbG9zZXN0IGJpa2VyIGFuaW1hdGlvbiBmcmFtZSBzbyB0aGF0IHRoZXJlIGlzIG5vIGRlbGF5IGZvciB0aGUgbGVncyB0byBzdGFydCBtb3ZpbmcgdGhlIG5leHQgdGltZSB0aGVcclxuICAgICAgLy8gYmlrZXIgc3RhcnRzIG1vdmluZy4gdGhpcyBzbWFsbCBjaGFuZ2Ugb2YgYW5nbGUgY2F1c2VzIHRoZSBnZWFyIHRvIGp1bXAgYSBiaXQgd2hlbiB0aGUgYmlrZXIgc3RvcHMsIGJ1dCB3ZSBjYW5cclxuICAgICAgLy8gZWxpbWluYXRlIHRoYXQganVtcCBieSBjaGVja2luZyB0byBzZWUgaWYgdGhlIGJpa2VyIGhhcyBhbnkgYWN0dWFsIHZlbG9jaXR5LCBzaW5jZSB0aGUgYW5nbGUgYWRqdXN0bWVudCBvbmx5XHJcbiAgICAgIC8vIGhhcHBlbnMgd2hlbiB2ZWxvY2l0eSBpcyAwLlxyXG4gICAgICBpZiAoIGJpa2VyLmNyYW5rQW5ndWxhclZlbG9jaXR5UHJvcGVydHkudmFsdWUgPiAwICkge1xyXG4gICAgICAgIGJpY3ljbGVHZWFyTm9kZS5yb3RhdGVBcm91bmQoIGdlYXJSb3RhdGlvblBvaW50LCAtZGVsdGEgKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGFkZCBmZWVkTWVCdXR0b25cclxuICAgIGNvbnN0IGZlZWRNZUJ1dHRvbiA9IG5ldyBSZWN0YW5ndWxhclB1c2hCdXR0b24oIHtcclxuICAgICAgY29udGVudDogbmV3IFRleHQoIGZlZWRNZVN0cmluZywge1xyXG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTggKSxcclxuICAgICAgICBtYXhXaWR0aDogMTAwXHJcbiAgICAgIH0gKSxcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICBiaWtlci5lbmVyZ3lDaHVua3NSZW1haW5pbmdQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgICAgIGJpa2VyLnJlcGxlbmlzaEJpa2VyRW5lcmd5Q2h1bmtzKCBmYWxzZSApOyAvLyBkb24ndCBjbGVhciBvdXQgZXhpc3RpbmcgY2h1bmtzIHdoZW4gYWRkaW5nIG1vcmVcclxuICAgICAgfSxcclxuICAgICAgYmFzZUNvbG9yOiAncmdiYSgwLDIyMCwwLDEpJyxcclxuICAgICAgY2VudGVyWDogY3ljbGlzdFRvcnNvTm9kZXNbIDAgXS5jZW50ZXJUb3AueCxcclxuICAgICAgY2VudGVyWTogY3ljbGlzdFRvcnNvTm9kZXNbIDAgXS5jZW50ZXJUb3AueSAtIDE1LFxyXG4gICAgICBtaW5IZWlnaHQ6IDMwLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdmZWVkTWVCdXR0b24nICksXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnYnV0dG9uIHRoYXQgcmVwbGVuaXNoXFwncyB0aGUgYmlrZXJcXCdzIGVuZXJneS4gb25seSB2aXNpYmxlIHdoZW4gdGhlIGJpa2VyIGlzIG91dCBvZiBlbmVyZ3knXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBmZWVkTWVCdXR0b24gKTtcclxuXHJcbiAgICAvLyBjb250cm9sIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBcImZlZWQgbWVcIiBidXR0b24gYW5kIHRoZSB0aXJlZG5lc3Mgb2YgdGhlIHVwcGVyIGJvZHkgYmFzZWQgb24gdGhlIGVuZXJneSBsZXZlbFxyXG4gICAgbGV0IHZpc2libGVUb3JzbyA9IGN5Y2xpc3RUb3Jzb05vZGVzWyAwIF07XHJcbiAgICBiaWtlci5lbmVyZ3lDaHVua3NSZW1haW5pbmdQcm9wZXJ0eS5saW5rKCBudW1iZXJPZkNodW5rc1JlbWFpbmluZyA9PiB7XHJcblxyXG4gICAgICAvLyBvbmx5IHNldCB0aGUgc3RhdGUgYnkgbnVtYmVyT2ZDaHVua3NSZW1haW5pbmcgaWYgdGhlIGJpa2VyIGlzIGFjdGl2ZSwgb3RoZXJ3aXNlIHNldCBpbml0aWFsIHN0YXRlLiB0aGlzIGlzXHJcbiAgICAgIC8vIG5lZWRlZCBmb3IgdGhlIGJpa2VyIHRvIGluaXRpYWxseSBsb29rIGNvcnJlY3Qgd2hlbiBzZWxlY3RlZCBmcm9tIHRoZSBjYXJvdXNlbFxyXG4gICAgICBjb25zdCBwZXJjZW50YWdlT2ZDaHVua3NSZW1haW5pbmcgPSBudW1iZXJPZkNodW5rc1JlbWFpbmluZyAvIEJpa2VyLklOSVRJQUxfTlVNQkVSX09GX0VORVJHWV9DSFVOS1M7XHJcbiAgICAgIHZpc2libGVUb3Jzby5zZXRWaXNpYmxlKCBmYWxzZSApO1xyXG5cclxuICAgICAgLy8gc2VsZWN0IGhvdyB0aXJlZCB0aGUgY3ljbGlzdCBhcHBlYXJzIGJ5IGhvdyBtdWNoIGVuZXJneSB0aGUgaGF2ZSByZW1haW5pbmdcclxuICAgICAgdmlzaWJsZVRvcnNvID0gcGVyY2VudGFnZU9mQ2h1bmtzUmVtYWluaW5nID4gMC42NyA/IGN5Y2xpc3RUb3Jzb05vZGVzWyAwIF0gOlxyXG4gICAgICAgICAgICAgICAgICAgICBwZXJjZW50YWdlT2ZDaHVua3NSZW1haW5pbmcgPiAwLjMzID8gY3ljbGlzdFRvcnNvTm9kZXNbIDEgXSA6XHJcbiAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2VPZkNodW5rc1JlbWFpbmluZyA+IDAgPyBjeWNsaXN0VG9yc29Ob2Rlc1sgMiBdIDogY3ljbGlzdFRvcnNvTm9kZXNbIDMgXTtcclxuICAgICAgdmlzaWJsZVRvcnNvLnNldFZpc2libGUoIHRydWUgKTtcclxuICAgICAgZmVlZE1lQnV0dG9uLnNldFZpc2libGUoIG51bWJlck9mQ2h1bmtzUmVtYWluaW5nID09PSAwICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gYWRkIGEgbGlzdGVuZXIgdGhhdCB3aWxsIHR1cm4gdGhlIGJhY2sgd2hlZWxcclxuICAgIGNvbnN0IHdoZWVsUm90YXRpb25Qb2ludCA9IGJpY3ljbGVTcG9rZXNOb2RlLmJvdW5kcy5jZW50ZXI7XHJcbiAgICBiaWtlci5yZWFyV2hlZWxBbmdsZVByb3BlcnR5LmxpbmsoIGFuZ2xlID0+IHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggYW5nbGUgPCAyICogTWF0aC5QSSwgJ0FuZ2xlIGlzIG91dCBvZiBib3VuZHMnICk7XHJcblxyXG4gICAgICAvLyBTY2VuZXJ5IGRvZXNuJ3QgdXNlIHRoZSBjb252ZW50aW9uIGluIHBoeXNpY3Mgd2hlcmUgYSBwb3NpdGl2ZSByb3RhdGlvbiBpcyBjb3VudGVyLWNsb2Nrd2lzZSwgc28gd2UgaGF2ZSB0b1xyXG4gICAgICAvLyBpbnZlcnQgdGhlIGFuZ2xlIGluIHRoZSBmb2xsb3dpbmcgY2FsY3VsYXRpb24uXHJcbiAgICAgIGNvbnN0IGNvbXBlbnNhdGVkQW5nbGUgPSAoIDIgKiBNYXRoLlBJIC0gYmljeWNsZVNwb2tlc05vZGUuZ2V0Um90YXRpb24oKSApICUgKCAyICogTWF0aC5QSSApO1xyXG4gICAgICBjb25zdCBkZWx0YSA9IGFuZ2xlIC0gY29tcGVuc2F0ZWRBbmdsZTtcclxuICAgICAgYmljeWNsZVNwb2tlc05vZGUucm90YXRlQXJvdW5kKCB3aGVlbFJvdGF0aW9uUG9pbnQsIC1kZWx0YSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRyb2xQYW5lbFRhbmRlbSA9IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjb250cm9sUGFuZWwnICk7XHJcblxyXG4gICAgLy8gc2xpZGVyIHRvIGNvbnRyb2wgY3Jhbmsgc3BlZWRcclxuICAgIGNvbnN0IGNyYW5rU2xpZGVyID0gbmV3IEhTbGlkZXIoXHJcbiAgICAgIGJpa2VyLnRhcmdldENyYW5rQW5ndWxhclZlbG9jaXR5UHJvcGVydHksXHJcbiAgICAgIG5ldyBSYW5nZSggMCwgQmlrZXIuTUFYX0FOR1VMQVJfVkVMT0NJVFlfT0ZfQ1JBTksgKSwge1xyXG4gICAgICAgIHRyYWNrU2l6ZTogbmV3IERpbWVuc2lvbjIoIDIwMCwgNSApLFxyXG4gICAgICAgIHRodW1iU2l6ZTogbmV3IERpbWVuc2lvbjIoIDIwLCA0MCApLFxyXG4gICAgICAgIHRodW1iVG91Y2hBcmVhWERpbGF0aW9uOiAxMSxcclxuICAgICAgICB0aHVtYlRvdWNoQXJlYVlEaWxhdGlvbjogMTEsXHJcbiAgICAgICAgdGFuZGVtOiBjb250cm9sUGFuZWxUYW5kZW0uY3JlYXRlVGFuZGVtKCAnc2xpZGVyJyApXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFBhbmVsKCBjcmFua1NsaWRlciwge1xyXG4gICAgICBmaWxsOiBFRkFDQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfQkFDS0dST1VORF9DT0xPUixcclxuICAgICAgc3Ryb2tlOiBFRkFDQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfT1VUTElORV9TVFJPS0UsXHJcbiAgICAgIGxpbmVXaWR0aDogRUZBQ0NvbnN0YW50cy5DT05UUk9MX1BBTkVMX09VVExJTkVfTElORV9XSURUSCxcclxuICAgICAgY29ybmVyUmFkaXVzOiBFRkFDQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfQ09STkVSX1JBRElVUyxcclxuICAgICAgY2VudGVyWDogMCxcclxuICAgICAgY2VudGVyWTogMTEwLFxyXG4gICAgICByZXNpemU6IGZhbHNlLFxyXG4gICAgICB0YW5kZW06IGNvbnRyb2xQYW5lbFRhbmRlbVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBvdGhlciBpbWFnZXMgdXNlZFxyXG4gICAgdGhpcy5hZGRDaGlsZCggY3ljbGlzdEJhY2tMZWdSb290Tm9kZSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggYmljeWNsZVNwb2tlc05vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGJpY3ljbGVGcmFtZU5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGJpY3ljbGVHZWFyTm9kZSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggY3ljbGlzdFRvcnNvUm9vdE5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGN5Y2xpc3RGcm9udExlZ1Jvb3ROb2RlICk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBlbmVyZ3kgY2h1bmsgbGF5ZXJcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBFbmVyZ3lDaHVua0xheWVyKCBiaWtlci5lbmVyZ3lDaHVua0xpc3QsIG1vZGVsVmlld1RyYW5zZm9ybSwge1xyXG4gICAgICBwYXJlbnRQb3NpdGlvblByb3BlcnR5OiBiaWtlci5wb3NpdGlvblByb3BlcnR5XHJcbiAgICB9ICkgKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneUZvcm1zQW5kQ2hhbmdlcy5yZWdpc3RlciggJ0Jpa2VyTm9kZScsIEJpa2VyTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBCaWtlck5vZGU7Il0sIm1hcHBpbmdzIjoi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