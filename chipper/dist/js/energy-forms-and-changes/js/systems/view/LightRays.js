// Copyright 2016-2021, University of Colorado Boulder

/**
 * a Scenery Node that represents a collection of light rays emanating from a circular or point source
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Node } from '../../../../scenery/js/imports.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import LightRayNode from './LightRayNode.js';
class LightRays extends Node {
  /**
   * @param {Vector2} center - Center position of radial rays
   * @param {number} innerRadius - Start point
   * @param {number} outerRadius - End point
   * @param {number} numberOfRays - How many rays around the sun
   * @param {Color} color - Ray color
   */
  constructor(center, innerRadius, outerRadius, numberOfRays, color) {
    super();
    this.lightRayNodes = [];
    let angle;
    let startPoint;
    let endPoint;
    for (let i = 0; i < numberOfRays; i++) {
      angle = 2 * Math.PI / numberOfRays * i;
      startPoint = center.plus(new Vector2(innerRadius, 0).rotated(angle));
      endPoint = center.plus(new Vector2(outerRadius, 0).rotated(angle));
      const lightRayNode = new LightRayNode(startPoint, endPoint, color);
      this.lightRayNodes.push(lightRayNode);
      this.addChild(lightRayNode);
    }
  }

  /**
   * adds a light absorbing shape to this set of rays that they may or may not intersect with
   *
   * @param {LightAbsorbingShape} lightAbsorbingShape
   * @public
   */
  addLightAbsorbingShape(lightAbsorbingShape) {
    this.lightRayNodes.forEach(lightRayNode => {
      lightRayNode.addLightAbsorbingShape(lightAbsorbingShape);
    });
  }

  /**
   * removes a light absorbing shape from this set of rays
   *
   * @param {LightAbsorbingShape} lightAbsorbingShape
   * @public
   */
  removeLightAbsorbingShape(lightAbsorbingShape) {
    this.lightRayNodes.forEach(lightRayNode => {
      lightRayNode.removeLightAbsorbingShape(lightAbsorbingShape);
    });
  }
}
energyFormsAndChanges.register('LightRays', LightRays);
export default LightRays;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiTm9kZSIsImVuZXJneUZvcm1zQW5kQ2hhbmdlcyIsIkxpZ2h0UmF5Tm9kZSIsIkxpZ2h0UmF5cyIsImNvbnN0cnVjdG9yIiwiY2VudGVyIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsIm51bWJlck9mUmF5cyIsImNvbG9yIiwibGlnaHRSYXlOb2RlcyIsImFuZ2xlIiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwiaSIsIk1hdGgiLCJQSSIsInBsdXMiLCJyb3RhdGVkIiwibGlnaHRSYXlOb2RlIiwicHVzaCIsImFkZENoaWxkIiwiYWRkTGlnaHRBYnNvcmJpbmdTaGFwZSIsImxpZ2h0QWJzb3JiaW5nU2hhcGUiLCJmb3JFYWNoIiwicmVtb3ZlTGlnaHRBYnNvcmJpbmdTaGFwZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGlnaHRSYXlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIGEgU2NlbmVyeSBOb2RlIHRoYXQgcmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgbGlnaHQgcmF5cyBlbWFuYXRpbmcgZnJvbSBhIGNpcmN1bGFyIG9yIHBvaW50IHNvdXJjZVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBlbmVyZ3lGb3Jtc0FuZENoYW5nZXMgZnJvbSAnLi4vLi4vZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzLmpzJztcclxuaW1wb3J0IExpZ2h0UmF5Tm9kZSBmcm9tICcuL0xpZ2h0UmF5Tm9kZS5qcyc7XHJcblxyXG5jbGFzcyBMaWdodFJheXMgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBjZW50ZXIgLSBDZW50ZXIgcG9zaXRpb24gb2YgcmFkaWFsIHJheXNcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5uZXJSYWRpdXMgLSBTdGFydCBwb2ludFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvdXRlclJhZGl1cyAtIEVuZCBwb2ludFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJPZlJheXMgLSBIb3cgbWFueSByYXlzIGFyb3VuZCB0aGUgc3VuXHJcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBSYXkgY29sb3JcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY2VudGVyLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIG51bWJlck9mUmF5cywgY29sb3IgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMubGlnaHRSYXlOb2RlcyA9IFtdO1xyXG4gICAgbGV0IGFuZ2xlO1xyXG4gICAgbGV0IHN0YXJ0UG9pbnQ7XHJcbiAgICBsZXQgZW5kUG9pbnQ7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlJheXM7IGkrKyApIHtcclxuICAgICAgYW5nbGUgPSAoIDIgKiBNYXRoLlBJIC8gbnVtYmVyT2ZSYXlzICkgKiBpO1xyXG4gICAgICBzdGFydFBvaW50ID0gY2VudGVyLnBsdXMoIG5ldyBWZWN0b3IyKCBpbm5lclJhZGl1cywgMCApLnJvdGF0ZWQoIGFuZ2xlICkgKTtcclxuICAgICAgZW5kUG9pbnQgPSBjZW50ZXIucGx1cyggbmV3IFZlY3RvcjIoIG91dGVyUmFkaXVzLCAwICkucm90YXRlZCggYW5nbGUgKSApO1xyXG5cclxuICAgICAgY29uc3QgbGlnaHRSYXlOb2RlID0gbmV3IExpZ2h0UmF5Tm9kZSggc3RhcnRQb2ludCwgZW5kUG9pbnQsIGNvbG9yICk7XHJcbiAgICAgIHRoaXMubGlnaHRSYXlOb2Rlcy5wdXNoKCBsaWdodFJheU5vZGUgKTtcclxuICAgICAgdGhpcy5hZGRDaGlsZCggbGlnaHRSYXlOb2RlICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBhZGRzIGEgbGlnaHQgYWJzb3JiaW5nIHNoYXBlIHRvIHRoaXMgc2V0IG9mIHJheXMgdGhhdCB0aGV5IG1heSBvciBtYXkgbm90IGludGVyc2VjdCB3aXRoXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0xpZ2h0QWJzb3JiaW5nU2hhcGV9IGxpZ2h0QWJzb3JiaW5nU2hhcGVcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgYWRkTGlnaHRBYnNvcmJpbmdTaGFwZSggbGlnaHRBYnNvcmJpbmdTaGFwZSApIHtcclxuICAgIHRoaXMubGlnaHRSYXlOb2Rlcy5mb3JFYWNoKCBsaWdodFJheU5vZGUgPT4ge1xyXG4gICAgICBsaWdodFJheU5vZGUuYWRkTGlnaHRBYnNvcmJpbmdTaGFwZSggbGlnaHRBYnNvcmJpbmdTaGFwZSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmVtb3ZlcyBhIGxpZ2h0IGFic29yYmluZyBzaGFwZSBmcm9tIHRoaXMgc2V0IG9mIHJheXNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7TGlnaHRBYnNvcmJpbmdTaGFwZX0gbGlnaHRBYnNvcmJpbmdTaGFwZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZW1vdmVMaWdodEFic29yYmluZ1NoYXBlKCBsaWdodEFic29yYmluZ1NoYXBlICkge1xyXG4gICAgdGhpcy5saWdodFJheU5vZGVzLmZvckVhY2goIGxpZ2h0UmF5Tm9kZSA9PiB7XHJcbiAgICAgIGxpZ2h0UmF5Tm9kZS5yZW1vdmVMaWdodEFic29yYmluZ1NoYXBlKCBsaWdodEFic29yYmluZ1NoYXBlICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5lbmVyZ3lGb3Jtc0FuZENoYW5nZXMucmVnaXN0ZXIoICdMaWdodFJheXMnLCBMaWdodFJheXMgKTtcclxuZXhwb3J0IGRlZmF1bHQgTGlnaHRSYXlzOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUU1QyxNQUFNQyxTQUFTLFNBQVNILElBQUksQ0FBQztFQUUzQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUVDLEtBQUssRUFBRztJQUNuRSxLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0MsYUFBYSxHQUFHLEVBQUU7SUFDdkIsSUFBSUMsS0FBSztJQUNULElBQUlDLFVBQVU7SUFDZCxJQUFJQyxRQUFRO0lBQ1osS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdOLFlBQVksRUFBRU0sQ0FBQyxFQUFFLEVBQUc7TUFDdkNILEtBQUssR0FBSyxDQUFDLEdBQUdJLElBQUksQ0FBQ0MsRUFBRSxHQUFHUixZQUFZLEdBQUtNLENBQUM7TUFDMUNGLFVBQVUsR0FBR1AsTUFBTSxDQUFDWSxJQUFJLENBQUUsSUFBSWxCLE9BQU8sQ0FBRU8sV0FBVyxFQUFFLENBQUUsQ0FBQyxDQUFDWSxPQUFPLENBQUVQLEtBQU0sQ0FBRSxDQUFDO01BQzFFRSxRQUFRLEdBQUdSLE1BQU0sQ0FBQ1ksSUFBSSxDQUFFLElBQUlsQixPQUFPLENBQUVRLFdBQVcsRUFBRSxDQUFFLENBQUMsQ0FBQ1csT0FBTyxDQUFFUCxLQUFNLENBQUUsQ0FBQztNQUV4RSxNQUFNUSxZQUFZLEdBQUcsSUFBSWpCLFlBQVksQ0FBRVUsVUFBVSxFQUFFQyxRQUFRLEVBQUVKLEtBQU0sQ0FBQztNQUNwRSxJQUFJLENBQUNDLGFBQWEsQ0FBQ1UsSUFBSSxDQUFFRCxZQUFhLENBQUM7TUFDdkMsSUFBSSxDQUFDRSxRQUFRLENBQUVGLFlBQWEsQ0FBQztJQUMvQjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxzQkFBc0JBLENBQUVDLG1CQUFtQixFQUFHO0lBQzVDLElBQUksQ0FBQ2IsYUFBYSxDQUFDYyxPQUFPLENBQUVMLFlBQVksSUFBSTtNQUMxQ0EsWUFBWSxDQUFDRyxzQkFBc0IsQ0FBRUMsbUJBQW9CLENBQUM7SUFDNUQsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLHlCQUF5QkEsQ0FBRUYsbUJBQW1CLEVBQUc7SUFDL0MsSUFBSSxDQUFDYixhQUFhLENBQUNjLE9BQU8sQ0FBRUwsWUFBWSxJQUFJO01BQzFDQSxZQUFZLENBQUNNLHlCQUF5QixDQUFFRixtQkFBb0IsQ0FBQztJQUMvRCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUF0QixxQkFBcUIsQ0FBQ3lCLFFBQVEsQ0FBRSxXQUFXLEVBQUV2QixTQUFVLENBQUM7QUFDeEQsZUFBZUEsU0FBUyJ9