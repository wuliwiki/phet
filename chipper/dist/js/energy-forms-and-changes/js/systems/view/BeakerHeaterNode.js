// Copyright 2016-2022, University of Colorado Boulder

/**
 * a Scenery Node representing the beaker heater in the view
 *
 * @author John Blanco
 * @author Andrew Adare
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import { Image } from '../../../../scenery/js/imports.js';
import elementBaseBack_png from '../../../images/elementBaseBack_png.js';
import elementBaseFront_png from '../../../images/elementBaseFront_png.js';
import heaterElement_png from '../../../images/heaterElement_png.js';
import heaterElementDark_png from '../../../images/heaterElementDark_png.js';
import wireBottomRightShort_png from '../../../images/wireBottomRightShort_png.js';
import wireStraight_png from '../../../images/wireStraight_png.js';
import EFACConstants from '../../common/EFACConstants.js';
import BeakerView from '../../common/view/BeakerView.js';
import EFACTemperatureAndColorSensorNode from '../../common/view/EFACTemperatureAndColorSensorNode.js';
import EnergyChunkLayer from '../../common/view/EnergyChunkLayer.js';
import energyFormsAndChanges from '../../energyFormsAndChanges.js';
import BeakerHeater from '../model/BeakerHeater.js';
import MoveFadeModelElementNode from './MoveFadeModelElementNode.js';

// constants
const COIL_CENTER_X_OFFSET = -4;
const COIL_TOP_OFFSET = 15;
class BeakerHeaterNode extends MoveFadeModelElementNode {
  /**
   * @param {BeakerHeater} beakerHeater
   * @param {Property.<boolean>} energyChunksVisibleProperty
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Tandem} tandem
   */
  constructor(beakerHeater, energyChunksVisibleProperty, modelViewTransform, tandem) {
    super(beakerHeater, modelViewTransform, tandem);
    const wireStraightNode = new Image(wireStraight_png, {
      left: -111,
      top: 78,
      scale: EFACConstants.WIRE_IMAGE_SCALE
    });
    const wireBottomRightNode = new Image(wireBottomRightShort_png, {
      left: wireStraightNode.right - 4,
      bottom: wireStraightNode.bottom + 2.1,
      scale: EFACConstants.WIRE_IMAGE_SCALE
    });
    const elementBaseBackNode = new Image(elementBaseBack_png, {
      maxWidth: EFACConstants.ELEMENT_BASE_WIDTH,
      right: wireBottomRightNode.right + 22,
      top: wireBottomRightNode.top - 2.5
    });
    const elementBaseFrontNode = new Image(elementBaseFront_png, {
      maxWidth: elementBaseBackNode.width,
      centerX: elementBaseBackNode.centerX,
      top: wireBottomRightNode.top - 3
    });
    const energizedCoilNode = new Image(heaterElement_png, {
      maxHeight: modelViewTransform.modelToViewDeltaX(BeakerHeater.HEATER_ELEMENT_2D_HEIGHT),
      centerX: elementBaseFrontNode.centerX + COIL_CENTER_X_OFFSET,
      bottom: elementBaseFrontNode.top + COIL_TOP_OFFSET
    });
    const nonEnergizedCoilNode = new Image(heaterElementDark_png, {
      maxHeight: modelViewTransform.modelToViewDeltaX(BeakerHeater.HEATER_ELEMENT_2D_HEIGHT),
      centerX: elementBaseFrontNode.centerX + COIL_CENTER_X_OFFSET,
      bottom: elementBaseFrontNode.top + COIL_TOP_OFFSET
    });

    // add the images that are used to depict this element along with the layer that will contain the energy chunks
    this.addChild(wireStraightNode);
    this.addChild(wireBottomRightNode);
    this.addChild(elementBaseBackNode);
    this.addChild(nonEnergizedCoilNode);
    this.addChild(energizedCoilNode);
    this.addChild(new EnergyChunkLayer(beakerHeater.energyChunkList, modelViewTransform, {
      parentPositionProperty: beakerHeater.positionProperty
    }));
    this.addChild(elementBaseFrontNode);

    // create a scale-and-translate MVT
    const scaleAndTranslateMVT = ModelViewTransform2.createSinglePointScaleInvertedYMapping(new Vector2(beakerHeater.beaker.positionProperty.value.x, 0), Vector2.ZERO, modelViewTransform.getMatrix().getScaleVector().x);

    // @public (read-only) {BeakerView}
    this.beakerProxyNode = new BeakerView(beakerHeater.beaker, energyChunksVisibleProperty, scaleAndTranslateMVT, {
      tandem: tandem.createTandem('beakerProxyNode')
    });

    // from here on, the beakerView's position is updated by this, BeakerHeater
    this.beakerProxyNode.setFollowPosition(false);

    // back of the beaker
    this.addChild(this.beakerProxyNode.backNode);

    // between the front and back of the beaker we put a layer that will hold the radiated energy chunks
    this.addChild(new EnergyChunkLayer(beakerHeater.radiatedEnergyChunkList, modelViewTransform, {
      parentPositionProperty: beakerHeater.positionProperty
    }));

    // front of the beaker
    this.addChild(this.beakerProxyNode.frontNode);

    // create a scale-only MVT, since several sub-elements are relatively positioned
    const scaleOnlyMVT = ModelViewTransform2.createSinglePointScaleInvertedYMapping(Vector2.ZERO, Vector2.ZERO, modelViewTransform.getMatrix().getScaleVector().x);

    // Add the thermometer that will indicate the beaker water temperature.  Since the position of the thermometer is
    // relative to the beaker heater, the model view transform must be compensated
    const thermometerNode = new EFACTemperatureAndColorSensorNode(beakerHeater.thermometer, {
      modelViewTransform: scaleOnlyMVT,
      tandem: tandem.createTandem('thermometerNode')
    });
    this.addChild(thermometerNode);

    // update the transparency of the hot element to make the dark element appear to heat up
    beakerHeater.heatProportionProperty.link(litProportion => {
      energizedCoilNode.opacity = litProportion;
    });
  }

  /**
   * step this view element, called by the framework
   * @param dt - time step, in seconds
   * @public
   */
  step(dt) {
    this.beakerProxyNode.step(dt);
  }

  /**
   * @public
   */
  reset() {
    this.beakerProxyNode.reset();
  }
}
energyFormsAndChanges.register('BeakerHeaterNode', BeakerHeaterNode);
export default BeakerHeaterNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiTW9kZWxWaWV3VHJhbnNmb3JtMiIsIkltYWdlIiwiZWxlbWVudEJhc2VCYWNrX3BuZyIsImVsZW1lbnRCYXNlRnJvbnRfcG5nIiwiaGVhdGVyRWxlbWVudF9wbmciLCJoZWF0ZXJFbGVtZW50RGFya19wbmciLCJ3aXJlQm90dG9tUmlnaHRTaG9ydF9wbmciLCJ3aXJlU3RyYWlnaHRfcG5nIiwiRUZBQ0NvbnN0YW50cyIsIkJlYWtlclZpZXciLCJFRkFDVGVtcGVyYXR1cmVBbmRDb2xvclNlbnNvck5vZGUiLCJFbmVyZ3lDaHVua0xheWVyIiwiZW5lcmd5Rm9ybXNBbmRDaGFuZ2VzIiwiQmVha2VySGVhdGVyIiwiTW92ZUZhZGVNb2RlbEVsZW1lbnROb2RlIiwiQ09JTF9DRU5URVJfWF9PRkZTRVQiLCJDT0lMX1RPUF9PRkZTRVQiLCJCZWFrZXJIZWF0ZXJOb2RlIiwiY29uc3RydWN0b3IiLCJiZWFrZXJIZWF0ZXIiLCJlbmVyZ3lDaHVua3NWaXNpYmxlUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJ0YW5kZW0iLCJ3aXJlU3RyYWlnaHROb2RlIiwibGVmdCIsInRvcCIsInNjYWxlIiwiV0lSRV9JTUFHRV9TQ0FMRSIsIndpcmVCb3R0b21SaWdodE5vZGUiLCJyaWdodCIsImJvdHRvbSIsImVsZW1lbnRCYXNlQmFja05vZGUiLCJtYXhXaWR0aCIsIkVMRU1FTlRfQkFTRV9XSURUSCIsImVsZW1lbnRCYXNlRnJvbnROb2RlIiwid2lkdGgiLCJjZW50ZXJYIiwiZW5lcmdpemVkQ29pbE5vZGUiLCJtYXhIZWlnaHQiLCJtb2RlbFRvVmlld0RlbHRhWCIsIkhFQVRFUl9FTEVNRU5UXzJEX0hFSUdIVCIsIm5vbkVuZXJnaXplZENvaWxOb2RlIiwiYWRkQ2hpbGQiLCJlbmVyZ3lDaHVua0xpc3QiLCJwYXJlbnRQb3NpdGlvblByb3BlcnR5IiwicG9zaXRpb25Qcm9wZXJ0eSIsInNjYWxlQW5kVHJhbnNsYXRlTVZUIiwiY3JlYXRlU2luZ2xlUG9pbnRTY2FsZUludmVydGVkWU1hcHBpbmciLCJiZWFrZXIiLCJ2YWx1ZSIsIngiLCJaRVJPIiwiZ2V0TWF0cml4IiwiZ2V0U2NhbGVWZWN0b3IiLCJiZWFrZXJQcm94eU5vZGUiLCJjcmVhdGVUYW5kZW0iLCJzZXRGb2xsb3dQb3NpdGlvbiIsImJhY2tOb2RlIiwicmFkaWF0ZWRFbmVyZ3lDaHVua0xpc3QiLCJmcm9udE5vZGUiLCJzY2FsZU9ubHlNVlQiLCJ0aGVybW9tZXRlck5vZGUiLCJ0aGVybW9tZXRlciIsImhlYXRQcm9wb3J0aW9uUHJvcGVydHkiLCJsaW5rIiwibGl0UHJvcG9ydGlvbiIsIm9wYWNpdHkiLCJzdGVwIiwiZHQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmVha2VySGVhdGVyTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBhIFNjZW5lcnkgTm9kZSByZXByZXNlbnRpbmcgdGhlIGJlYWtlciBoZWF0ZXIgaW4gdGhlIHZpZXdcclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZVxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGVsZW1lbnRCYXNlQmFja19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2VsZW1lbnRCYXNlQmFja19wbmcuanMnO1xyXG5pbXBvcnQgZWxlbWVudEJhc2VGcm9udF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2VsZW1lbnRCYXNlRnJvbnRfcG5nLmpzJztcclxuaW1wb3J0IGhlYXRlckVsZW1lbnRfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9oZWF0ZXJFbGVtZW50X3BuZy5qcyc7XHJcbmltcG9ydCBoZWF0ZXJFbGVtZW50RGFya19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2hlYXRlckVsZW1lbnREYXJrX3BuZy5qcyc7XHJcbmltcG9ydCB3aXJlQm90dG9tUmlnaHRTaG9ydF9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3dpcmVCb3R0b21SaWdodFNob3J0X3BuZy5qcyc7XHJcbmltcG9ydCB3aXJlU3RyYWlnaHRfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy93aXJlU3RyYWlnaHRfcG5nLmpzJztcclxuaW1wb3J0IEVGQUNDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0VGQUNDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQmVha2VyVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9CZWFrZXJWaWV3LmpzJztcclxuaW1wb3J0IEVGQUNUZW1wZXJhdHVyZUFuZENvbG9yU2Vuc29yTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9FRkFDVGVtcGVyYXR1cmVBbmRDb2xvclNlbnNvck5vZGUuanMnO1xyXG5pbXBvcnQgRW5lcmd5Q2h1bmtMYXllciBmcm9tICcuLi8uLi9jb21tb24vdmlldy9FbmVyZ3lDaHVua0xheWVyLmpzJztcclxuaW1wb3J0IGVuZXJneUZvcm1zQW5kQ2hhbmdlcyBmcm9tICcuLi8uLi9lbmVyZ3lGb3Jtc0FuZENoYW5nZXMuanMnO1xyXG5pbXBvcnQgQmVha2VySGVhdGVyIGZyb20gJy4uL21vZGVsL0JlYWtlckhlYXRlci5qcyc7XHJcbmltcG9ydCBNb3ZlRmFkZU1vZGVsRWxlbWVudE5vZGUgZnJvbSAnLi9Nb3ZlRmFkZU1vZGVsRWxlbWVudE5vZGUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IENPSUxfQ0VOVEVSX1hfT0ZGU0VUID0gLTQ7XHJcbmNvbnN0IENPSUxfVE9QX09GRlNFVCA9IDE1O1xyXG5cclxuY2xhc3MgQmVha2VySGVhdGVyTm9kZSBleHRlbmRzIE1vdmVGYWRlTW9kZWxFbGVtZW50Tm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QmVha2VySGVhdGVyfSBiZWFrZXJIZWF0ZXJcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gZW5lcmd5Q2h1bmtzVmlzaWJsZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGJlYWtlckhlYXRlciwgZW5lcmd5Q2h1bmtzVmlzaWJsZVByb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHRhbmRlbSApIHtcclxuICAgIHN1cGVyKCBiZWFrZXJIZWF0ZXIsIG1vZGVsVmlld1RyYW5zZm9ybSwgdGFuZGVtICk7XHJcblxyXG4gICAgY29uc3Qgd2lyZVN0cmFpZ2h0Tm9kZSA9IG5ldyBJbWFnZSggd2lyZVN0cmFpZ2h0X3BuZywge1xyXG4gICAgICBsZWZ0OiAtMTExLFxyXG4gICAgICB0b3A6IDc4LFxyXG4gICAgICBzY2FsZTogRUZBQ0NvbnN0YW50cy5XSVJFX0lNQUdFX1NDQUxFXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCB3aXJlQm90dG9tUmlnaHROb2RlID0gbmV3IEltYWdlKCB3aXJlQm90dG9tUmlnaHRTaG9ydF9wbmcsIHtcclxuICAgICAgbGVmdDogd2lyZVN0cmFpZ2h0Tm9kZS5yaWdodCAtIDQsXHJcbiAgICAgIGJvdHRvbTogd2lyZVN0cmFpZ2h0Tm9kZS5ib3R0b20gKyAyLjEsXHJcbiAgICAgIHNjYWxlOiBFRkFDQ29uc3RhbnRzLldJUkVfSU1BR0VfU0NBTEVcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGVsZW1lbnRCYXNlQmFja05vZGUgPSBuZXcgSW1hZ2UoIGVsZW1lbnRCYXNlQmFja19wbmcsIHtcclxuICAgICAgbWF4V2lkdGg6IEVGQUNDb25zdGFudHMuRUxFTUVOVF9CQVNFX1dJRFRILFxyXG4gICAgICByaWdodDogd2lyZUJvdHRvbVJpZ2h0Tm9kZS5yaWdodCArIDIyLFxyXG4gICAgICB0b3A6IHdpcmVCb3R0b21SaWdodE5vZGUudG9wIC0gMi41XHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBlbGVtZW50QmFzZUZyb250Tm9kZSA9IG5ldyBJbWFnZSggZWxlbWVudEJhc2VGcm9udF9wbmcsIHtcclxuICAgICAgbWF4V2lkdGg6IGVsZW1lbnRCYXNlQmFja05vZGUud2lkdGgsXHJcbiAgICAgIGNlbnRlclg6IGVsZW1lbnRCYXNlQmFja05vZGUuY2VudGVyWCxcclxuICAgICAgdG9wOiB3aXJlQm90dG9tUmlnaHROb2RlLnRvcCAtIDNcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGVuZXJnaXplZENvaWxOb2RlID0gbmV3IEltYWdlKCBoZWF0ZXJFbGVtZW50X3BuZywge1xyXG4gICAgICBtYXhIZWlnaHQ6IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggQmVha2VySGVhdGVyLkhFQVRFUl9FTEVNRU5UXzJEX0hFSUdIVCApLFxyXG4gICAgICBjZW50ZXJYOiBlbGVtZW50QmFzZUZyb250Tm9kZS5jZW50ZXJYICsgQ09JTF9DRU5URVJfWF9PRkZTRVQsXHJcbiAgICAgIGJvdHRvbTogZWxlbWVudEJhc2VGcm9udE5vZGUudG9wICsgQ09JTF9UT1BfT0ZGU0VUXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBub25FbmVyZ2l6ZWRDb2lsTm9kZSA9IG5ldyBJbWFnZSggaGVhdGVyRWxlbWVudERhcmtfcG5nLCB7XHJcbiAgICAgIG1heEhlaWdodDogbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBCZWFrZXJIZWF0ZXIuSEVBVEVSX0VMRU1FTlRfMkRfSEVJR0hUICksXHJcbiAgICAgIGNlbnRlclg6IGVsZW1lbnRCYXNlRnJvbnROb2RlLmNlbnRlclggKyBDT0lMX0NFTlRFUl9YX09GRlNFVCxcclxuICAgICAgYm90dG9tOiBlbGVtZW50QmFzZUZyb250Tm9kZS50b3AgKyBDT0lMX1RPUF9PRkZTRVRcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIGltYWdlcyB0aGF0IGFyZSB1c2VkIHRvIGRlcGljdCB0aGlzIGVsZW1lbnQgYWxvbmcgd2l0aCB0aGUgbGF5ZXIgdGhhdCB3aWxsIGNvbnRhaW4gdGhlIGVuZXJneSBjaHVua3NcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHdpcmVTdHJhaWdodE5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHdpcmVCb3R0b21SaWdodE5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGVsZW1lbnRCYXNlQmFja05vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5vbkVuZXJnaXplZENvaWxOb2RlICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBlbmVyZ2l6ZWRDb2lsTm9kZSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IEVuZXJneUNodW5rTGF5ZXIoXHJcbiAgICAgIGJlYWtlckhlYXRlci5lbmVyZ3lDaHVua0xpc3QsXHJcbiAgICAgIG1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgeyBwYXJlbnRQb3NpdGlvblByb3BlcnR5OiBiZWFrZXJIZWF0ZXIucG9zaXRpb25Qcm9wZXJ0eSB9XHJcbiAgICApICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBlbGVtZW50QmFzZUZyb250Tm9kZSApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBhIHNjYWxlLWFuZC10cmFuc2xhdGUgTVZUXHJcbiAgICBjb25zdCBzY2FsZUFuZFRyYW5zbGF0ZU1WVCA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlU2luZ2xlUG9pbnRTY2FsZUludmVydGVkWU1hcHBpbmcoXHJcbiAgICAgIG5ldyBWZWN0b3IyKCBiZWFrZXJIZWF0ZXIuYmVha2VyLnBvc2l0aW9uUHJvcGVydHkudmFsdWUueCwgMCApLFxyXG4gICAgICBWZWN0b3IyLlpFUk8sXHJcbiAgICAgIG1vZGVsVmlld1RyYW5zZm9ybS5nZXRNYXRyaXgoKS5nZXRTY2FsZVZlY3RvcigpLnhcclxuICAgICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSB7QmVha2VyVmlld31cclxuICAgIHRoaXMuYmVha2VyUHJveHlOb2RlID0gbmV3IEJlYWtlclZpZXcoIGJlYWtlckhlYXRlci5iZWFrZXIsIGVuZXJneUNodW5rc1Zpc2libGVQcm9wZXJ0eSwgc2NhbGVBbmRUcmFuc2xhdGVNVlQsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYmVha2VyUHJveHlOb2RlJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gZnJvbSBoZXJlIG9uLCB0aGUgYmVha2VyVmlldydzIHBvc2l0aW9uIGlzIHVwZGF0ZWQgYnkgdGhpcywgQmVha2VySGVhdGVyXHJcbiAgICB0aGlzLmJlYWtlclByb3h5Tm9kZS5zZXRGb2xsb3dQb3NpdGlvbiggZmFsc2UgKTtcclxuXHJcbiAgICAvLyBiYWNrIG9mIHRoZSBiZWFrZXJcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuYmVha2VyUHJveHlOb2RlLmJhY2tOb2RlICk7XHJcblxyXG4gICAgLy8gYmV0d2VlbiB0aGUgZnJvbnQgYW5kIGJhY2sgb2YgdGhlIGJlYWtlciB3ZSBwdXQgYSBsYXllciB0aGF0IHdpbGwgaG9sZCB0aGUgcmFkaWF0ZWQgZW5lcmd5IGNodW5rc1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IEVuZXJneUNodW5rTGF5ZXIoXHJcbiAgICAgIGJlYWtlckhlYXRlci5yYWRpYXRlZEVuZXJneUNodW5rTGlzdCxcclxuICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtLCB7XHJcbiAgICAgICAgcGFyZW50UG9zaXRpb25Qcm9wZXJ0eTogYmVha2VySGVhdGVyLnBvc2l0aW9uUHJvcGVydHlcclxuICAgICAgfVxyXG4gICAgKSApO1xyXG5cclxuICAgIC8vIGZyb250IG9mIHRoZSBiZWFrZXJcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuYmVha2VyUHJveHlOb2RlLmZyb250Tm9kZSApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBhIHNjYWxlLW9ubHkgTVZULCBzaW5jZSBzZXZlcmFsIHN1Yi1lbGVtZW50cyBhcmUgcmVsYXRpdmVseSBwb3NpdGlvbmVkXHJcbiAgICBjb25zdCBzY2FsZU9ubHlNVlQgPSBNb2RlbFZpZXdUcmFuc2Zvcm0yLmNyZWF0ZVNpbmdsZVBvaW50U2NhbGVJbnZlcnRlZFlNYXBwaW5nKFxyXG4gICAgICBWZWN0b3IyLlpFUk8sXHJcbiAgICAgIFZlY3RvcjIuWkVSTyxcclxuICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtLmdldE1hdHJpeCgpLmdldFNjYWxlVmVjdG9yKCkueFxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIHRoZXJtb21ldGVyIHRoYXQgd2lsbCBpbmRpY2F0ZSB0aGUgYmVha2VyIHdhdGVyIHRlbXBlcmF0dXJlLiAgU2luY2UgdGhlIHBvc2l0aW9uIG9mIHRoZSB0aGVybW9tZXRlciBpc1xyXG4gICAgLy8gcmVsYXRpdmUgdG8gdGhlIGJlYWtlciBoZWF0ZXIsIHRoZSBtb2RlbCB2aWV3IHRyYW5zZm9ybSBtdXN0IGJlIGNvbXBlbnNhdGVkXHJcbiAgICBjb25zdCB0aGVybW9tZXRlck5vZGUgPSBuZXcgRUZBQ1RlbXBlcmF0dXJlQW5kQ29sb3JTZW5zb3JOb2RlKFxyXG4gICAgICBiZWFrZXJIZWF0ZXIudGhlcm1vbWV0ZXIsIHtcclxuICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IHNjYWxlT25seU1WVCxcclxuICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aGVybW9tZXRlck5vZGUnIClcclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoZXJtb21ldGVyTm9kZSApO1xyXG5cclxuICAgIC8vIHVwZGF0ZSB0aGUgdHJhbnNwYXJlbmN5IG9mIHRoZSBob3QgZWxlbWVudCB0byBtYWtlIHRoZSBkYXJrIGVsZW1lbnQgYXBwZWFyIHRvIGhlYXQgdXBcclxuICAgIGJlYWtlckhlYXRlci5oZWF0UHJvcG9ydGlvblByb3BlcnR5LmxpbmsoIGxpdFByb3BvcnRpb24gPT4ge1xyXG4gICAgICBlbmVyZ2l6ZWRDb2lsTm9kZS5vcGFjaXR5ID0gbGl0UHJvcG9ydGlvbjtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHN0ZXAgdGhpcyB2aWV3IGVsZW1lbnQsIGNhbGxlZCBieSB0aGUgZnJhbWV3b3JrXHJcbiAgICogQHBhcmFtIGR0IC0gdGltZSBzdGVwLCBpbiBzZWNvbmRzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0ZXAoIGR0ICkge1xyXG4gICAgdGhpcy5iZWFrZXJQcm94eU5vZGUuc3RlcCggZHQgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuYmVha2VyUHJveHlOb2RlLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5lbmVyZ3lGb3Jtc0FuZENoYW5nZXMucmVnaXN0ZXIoICdCZWFrZXJIZWF0ZXJOb2RlJywgQmVha2VySGVhdGVyTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBCZWFrZXJIZWF0ZXJOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxtQkFBbUIsTUFBTSx1REFBdUQ7QUFDdkYsU0FBU0MsS0FBSyxRQUFRLG1DQUFtQztBQUN6RCxPQUFPQyxtQkFBbUIsTUFBTSx3Q0FBd0M7QUFDeEUsT0FBT0Msb0JBQW9CLE1BQU0seUNB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