// Copyright 2016-2021, University of Colorado Boulder

/**
 * Contains and updates a Canvas where a canonical electric field arrow is drawn facing to the right. Contains
 * information about the scale and offset, so it's easy for clients to draw the arrow.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Emitter from '../../../../axon/js/Emitter.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import chargesAndFields from '../../chargesAndFields.js';
import ChargesAndFieldsColors from '../ChargesAndFieldsColors.js';
import ElectricFieldArrowShape from './ElectricFieldArrowShape.js';

// Our shape that we'll use to draw (origin is where it will rotate)
const arrowShape = new ElectricFieldArrowShape();
const emitter = new Emitter();
const scale = 1.3;
const padding = 2;
const scaledPaddedBounds = new Bounds2(arrowShape.bounds.minX * scale, arrowShape.bounds.minY * scale, arrowShape.bounds.maxX * scale, arrowShape.bounds.maxY * scale).dilated(padding).roundedOut();
const canvas = document.createElement('canvas');
canvas.width = scaledPaddedBounds.width;
canvas.height = scaledPaddedBounds.height;
const context = canvas.getContext('2d');

// Offset based on where the center is from the upper-left. Will usually be negative so it can be applied.
// When drawing in this code, we'll want to negate it.
const xOffset = scaledPaddedBounds.minX;
const yOffset = scaledPaddedBounds.minY;
function draw() {
  context.save();

  // Clear if we need to redraw
  context.clearRect(0, 0, canvas.width, canvas.height);
  context.translate(-xOffset, -yOffset);
  context.scale(scale, scale);
  context.beginPath();
  arrowShape.writeToContext(context);
  context.fillStyle = ChargesAndFieldsColors.electricFieldGridSaturationProperty.get().toCSS();
  context.fill();
  context.lineWidth = 0.5;
  context.strokeStyle = ChargesAndFieldsColors.electricFieldGridSaturationStrokeProperty.get().toCSS();
  context.stroke();
  context.restore();
  emitter.emit();
}

// Draw immediately, and update on any color profile changes
draw();
ChargesAndFieldsColors.electricFieldGridSaturationProperty.link(draw);
ChargesAndFieldsColors.electricFieldGridSaturationStrokeProperty.link(draw);
const ElectricFieldArrowCanvas = {
  // @public {number} - Scale that was applied to the ArrowShape. Presumably un-scale by this amount.
  scale: scale,
  // @public {number} - X translation that should be applied "before" the scale
  xOffset: xOffset,
  // @public {number} - Y translation that should be applied "before" the scale
  yOffset: yOffset,
  // @public {HTMLCanvasElement} - The actual Canvas that can be used to draw
  canvas: canvas,
  // @public {Emitter} - Emits when the contents of the Canvas have changed (needs to be redrawn).
  updateEmitter: emitter
};
chargesAndFields.register('ElectricFieldArrowCanvas', ElectricFieldArrowCanvas);
export default ElectricFieldArrowCanvas;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiQm91bmRzMiIsImNoYXJnZXNBbmRGaWVsZHMiLCJDaGFyZ2VzQW5kRmllbGRzQ29sb3JzIiwiRWxlY3RyaWNGaWVsZEFycm93U2hhcGUiLCJhcnJvd1NoYXBlIiwiZW1pdHRlciIsInNjYWxlIiwicGFkZGluZyIsInNjYWxlZFBhZGRlZEJvdW5kcyIsImJvdW5kcyIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJkaWxhdGVkIiwicm91bmRlZE91dCIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGV4dCIsImdldENvbnRleHQiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImRyYXciLCJzYXZlIiwiY2xlYXJSZWN0IiwidHJhbnNsYXRlIiwiYmVnaW5QYXRoIiwid3JpdGVUb0NvbnRleHQiLCJmaWxsU3R5bGUiLCJlbGVjdHJpY0ZpZWxkR3JpZFNhdHVyYXRpb25Qcm9wZXJ0eSIsImdldCIsInRvQ1NTIiwiZmlsbCIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwiZWxlY3RyaWNGaWVsZEdyaWRTYXR1cmF0aW9uU3Ryb2tlUHJvcGVydHkiLCJzdHJva2UiLCJyZXN0b3JlIiwiZW1pdCIsImxpbmsiLCJFbGVjdHJpY0ZpZWxkQXJyb3dDYW52YXMiLCJ1cGRhdGVFbWl0dGVyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbGVjdHJpY0ZpZWxkQXJyb3dDYW52YXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udGFpbnMgYW5kIHVwZGF0ZXMgYSBDYW52YXMgd2hlcmUgYSBjYW5vbmljYWwgZWxlY3RyaWMgZmllbGQgYXJyb3cgaXMgZHJhd24gZmFjaW5nIHRvIHRoZSByaWdodC4gQ29udGFpbnNcclxuICogaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNjYWxlIGFuZCBvZmZzZXQsIHNvIGl0J3MgZWFzeSBmb3IgY2xpZW50cyB0byBkcmF3IHRoZSBhcnJvdy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW1pdHRlci5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IGNoYXJnZXNBbmRGaWVsZHMgZnJvbSAnLi4vLi4vY2hhcmdlc0FuZEZpZWxkcy5qcyc7XHJcbmltcG9ydCBDaGFyZ2VzQW5kRmllbGRzQ29sb3JzIGZyb20gJy4uL0NoYXJnZXNBbmRGaWVsZHNDb2xvcnMuanMnO1xyXG5pbXBvcnQgRWxlY3RyaWNGaWVsZEFycm93U2hhcGUgZnJvbSAnLi9FbGVjdHJpY0ZpZWxkQXJyb3dTaGFwZS5qcyc7XHJcblxyXG4vLyBPdXIgc2hhcGUgdGhhdCB3ZSdsbCB1c2UgdG8gZHJhdyAob3JpZ2luIGlzIHdoZXJlIGl0IHdpbGwgcm90YXRlKVxyXG5jb25zdCBhcnJvd1NoYXBlID0gbmV3IEVsZWN0cmljRmllbGRBcnJvd1NoYXBlKCk7XHJcbmNvbnN0IGVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xyXG5cclxuY29uc3Qgc2NhbGUgPSAxLjM7XHJcbmNvbnN0IHBhZGRpbmcgPSAyO1xyXG5cclxuY29uc3Qgc2NhbGVkUGFkZGVkQm91bmRzID0gbmV3IEJvdW5kczIoIGFycm93U2hhcGUuYm91bmRzLm1pblggKiBzY2FsZSxcclxuICBhcnJvd1NoYXBlLmJvdW5kcy5taW5ZICogc2NhbGUsXHJcbiAgYXJyb3dTaGFwZS5ib3VuZHMubWF4WCAqIHNjYWxlLFxyXG4gIGFycm93U2hhcGUuYm91bmRzLm1heFkgKiBzY2FsZSApLmRpbGF0ZWQoIHBhZGRpbmcgKS5yb3VuZGVkT3V0KCk7XHJcblxyXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApO1xyXG5jYW52YXMud2lkdGggPSBzY2FsZWRQYWRkZWRCb3VuZHMud2lkdGg7XHJcbmNhbnZhcy5oZWlnaHQgPSBzY2FsZWRQYWRkZWRCb3VuZHMuaGVpZ2h0O1xyXG5jb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcclxuXHJcbi8vIE9mZnNldCBiYXNlZCBvbiB3aGVyZSB0aGUgY2VudGVyIGlzIGZyb20gdGhlIHVwcGVyLWxlZnQuIFdpbGwgdXN1YWxseSBiZSBuZWdhdGl2ZSBzbyBpdCBjYW4gYmUgYXBwbGllZC5cclxuLy8gV2hlbiBkcmF3aW5nIGluIHRoaXMgY29kZSwgd2UnbGwgd2FudCB0byBuZWdhdGUgaXQuXHJcbmNvbnN0IHhPZmZzZXQgPSBzY2FsZWRQYWRkZWRCb3VuZHMubWluWDtcclxuY29uc3QgeU9mZnNldCA9IHNjYWxlZFBhZGRlZEJvdW5kcy5taW5ZO1xyXG5cclxuZnVuY3Rpb24gZHJhdygpIHtcclxuICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgLy8gQ2xlYXIgaWYgd2UgbmVlZCB0byByZWRyYXdcclxuICBjb250ZXh0LmNsZWFyUmVjdCggMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0ICk7XHJcblxyXG4gIGNvbnRleHQudHJhbnNsYXRlKCAteE9mZnNldCwgLXlPZmZzZXQgKTtcclxuICBjb250ZXh0LnNjYWxlKCBzY2FsZSwgc2NhbGUgKTtcclxuXHJcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICBhcnJvd1NoYXBlLndyaXRlVG9Db250ZXh0KCBjb250ZXh0ICk7XHJcbiAgY29udGV4dC5maWxsU3R5bGUgPSBDaGFyZ2VzQW5kRmllbGRzQ29sb3JzLmVsZWN0cmljRmllbGRHcmlkU2F0dXJhdGlvblByb3BlcnR5LmdldCgpLnRvQ1NTKCk7XHJcbiAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gIGNvbnRleHQubGluZVdpZHRoID0gMC41O1xyXG4gIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBDaGFyZ2VzQW5kRmllbGRzQ29sb3JzLmVsZWN0cmljRmllbGRHcmlkU2F0dXJhdGlvblN0cm9rZVByb3BlcnR5LmdldCgpLnRvQ1NTKCk7XHJcbiAgY29udGV4dC5zdHJva2UoKTtcclxuXHJcbiAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG4gIGVtaXR0ZXIuZW1pdCgpO1xyXG59XHJcblxyXG4vLyBEcmF3IGltbWVkaWF0ZWx5LCBhbmQgdXBkYXRlIG9uIGFueSBjb2xvciBwcm9maWxlIGNoYW5nZXNcclxuZHJhdygpO1xyXG5DaGFyZ2VzQW5kRmllbGRzQ29sb3JzLmVsZWN0cmljRmllbGRHcmlkU2F0dXJhdGlvblByb3BlcnR5LmxpbmsoIGRyYXcgKTtcclxuQ2hhcmdlc0FuZEZpZWxkc0NvbG9ycy5lbGVjdHJpY0ZpZWxkR3JpZFNhdHVyYXRpb25TdHJva2VQcm9wZXJ0eS5saW5rKCBkcmF3ICk7XHJcblxyXG5jb25zdCBFbGVjdHJpY0ZpZWxkQXJyb3dDYW52YXMgPSB7XHJcbiAgLy8gQHB1YmxpYyB7bnVtYmVyfSAtIFNjYWxlIHRoYXQgd2FzIGFwcGxpZWQgdG8gdGhlIEFycm93U2hhcGUuIFByZXN1bWFibHkgdW4tc2NhbGUgYnkgdGhpcyBhbW91bnQuXHJcbiAgc2NhbGU6IHNjYWxlLFxyXG5cclxuICAvLyBAcHVibGljIHtudW1iZXJ9IC0gWCB0cmFuc2xhdGlvbiB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIFwiYmVmb3JlXCIgdGhlIHNjYWxlXHJcbiAgeE9mZnNldDogeE9mZnNldCxcclxuXHJcbiAgLy8gQHB1YmxpYyB7bnVtYmVyfSAtIFkgdHJhbnNsYXRpb24gdGhhdCBzaG91bGQgYmUgYXBwbGllZCBcImJlZm9yZVwiIHRoZSBzY2FsZVxyXG4gIHlPZmZzZXQ6IHlPZmZzZXQsXHJcblxyXG4gIC8vIEBwdWJsaWMge0hUTUxDYW52YXNFbGVtZW50fSAtIFRoZSBhY3R1YWwgQ2FudmFzIHRoYXQgY2FuIGJlIHVzZWQgdG8gZHJhd1xyXG4gIGNhbnZhczogY2FudmFzLFxyXG5cclxuICAvLyBAcHVibGljIHtFbWl0dGVyfSAtIEVtaXRzIHdoZW4gdGhlIGNvbnRlbnRzIG9mIHRoZSBDYW52YXMgaGF2ZSBjaGFuZ2VkIChuZWVkcyB0byBiZSByZWRyYXduKS5cclxuICB1cGRhdGVFbWl0dGVyOiBlbWl0dGVyXHJcbn07XHJcbmNoYXJnZXNBbmRGaWVsZHMucmVnaXN0ZXIoICdFbGVjdHJpY0ZpZWxkQXJyb3dDYW52YXMnLCBFbGVjdHJpY0ZpZWxkQXJyb3dDYW52YXMgKTtcclxuZXhwb3J0IGRlZmF1bHQgRWxlY3RyaWNGaWVsZEFycm93Q2FudmFzOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxnQ0FBZ0M7QUFDcEQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0Msc0JBQXNCLE1BQU0sOEJBQThCO0FBQ2pFLE9BQU9DLHVCQUF1QixNQUFNLDhCQUE4Qjs7QUFFbEU7QUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSUQsdUJBQXVCLENBQUMsQ0FBQztBQUNoRCxNQUFNRSxPQUFPLEdBQUcsSUFBSU4sT0FBTyxDQUFDLENBQUM7QUFFN0IsTUFBTU8sS0FBSyxHQUFHLEdBQUc7QUFDakIsTUFBTUMsT0FBTyxHQUFHLENBQUM7QUFFakIsTUFBTUMsa0JBQWtCLEdBQUcsSUFBSVIsT0FBTyxDQUFFSSxVQUFVLENBQUNLLE1BQU0sQ0FBQ0MsSUFBSSxHQUFHSixLQUFLLEVBQ3BFRixVQUFVLENBQUNLLE1BQU0sQ0FBQ0UsSUFBSSxHQUFHTCxLQUFLLEVBQzlCRixVQUFVLENBQUNLLE1BQU0sQ0FBQ0csSUFBSSxHQUFHTixLQUFLLEVBQzlCRixVQUFVLENBQUNLLE1BQU0sQ0FBQ0ksSUFBSSxHQUFHUCxLQUFNLENBQUMsQ0FBQ1EsT0FBTyxDQUFFUCxPQUFRLENBQUMsQ0FBQ1EsVUFBVSxDQUFDLENBQUM7QUFFbEUsTUFBTUMsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBRSxRQUFTLENBQUM7QUFDakRGLE1BQU0sQ0FBQ0csS0FBSyxHQUFHWCxrQkFBa0IsQ0FBQ1csS0FBSztBQUN2Q0gsTUFBTSxDQUFDSSxNQUFNLEdBQUdaLGtCQUFrQixDQUFDWSxNQUFNO0FBQ3pDLE1BQU1DLE9BQU8sR0FBR0wsTUFBTSxDQUFDTSxVQUFVLENBQUUsSUFBSyxDQUFDOztBQUV6QztBQUNBO0FBQ0EsTUFBTUMsT0FBTyxHQUFHZixrQkFBa0IsQ0FBQ0UsSUFBSTtBQUN2QyxNQUFNYyxPQUFPLEdBQUdoQixrQkFBa0IsQ0FBQ0csSUFBSTtBQUV2QyxTQUFTYyxJQUFJQSxDQUFBLEVBQUc7RUFDZEosT0FBTyxDQUFDSyxJQUFJLENBQUMsQ0FBQzs7RUFFZDtFQUNBTCxPQUFPLENBQUNNLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFWCxNQUFNLENBQUNHLEtBQUssRUFBRUgsTUFBTSxDQUFDSSxNQUFPLENBQUM7RUFFdERDLE9BQU8sQ0FBQ08sU0FBUyxDQUFFLENBQUNMLE9BQU8sRUFBRSxDQUFDQyxPQUFRLENBQUM7RUFDdkNILE9BQU8sQ0FBQ2YsS0FBSyxDQUFFQSxLQUFLLEVBQUVBLEtBQU0sQ0FBQztFQUU3QmUsT0FBTyxDQUFDUSxTQUFTLENBQUMsQ0FBQztFQUNuQnpCLFVBQVUsQ0FBQzBCLGNBQWMsQ0FBRVQsT0FBUSxDQUFDO0VBQ3BDQSxPQUFPLENBQUNVLFNBQVMsR0FBRzdCLHNCQUFzQixDQUFDOEIsbUNBQW1DLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQzVGYixPQUFPLENBQUNjLElBQUksQ0FBQyxDQUFDO0VBRWRkLE9BQU8sQ0FBQ2UsU0FBUyxHQUFHLEdBQUc7RUFDdkJmLE9BQU8sQ0FBQ2dCLFdBQVcsR0FBR25DLHNCQUFzQixDQUFDb0MseUNBQXlDLENBQUNMLEdBQUcsQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ3BHYixPQUFPLENBQUNrQixNQUFNLENBQUMsQ0FBQztFQUVoQmxCLE9BQU8sQ0FBQ21CLE9BQU8sQ0FBQyxDQUFDO0VBRWpCbkMsT0FBTyxDQUFDb0MsSUFBSSxDQUFDLENBQUM7QUFDaEI7O0FBRUE7QUFDQWhCLElBQUksQ0FBQyxDQUFDO0FBQ052QixzQkFBc0IsQ0FBQzhCLG1DQUFtQyxDQUFDVSxJQUFJLENBQUVqQixJQUFLLENBQUM7QUFDdkV2QixzQkFBc0IsQ0FBQ29DLHlDQUF5QyxDQUFDSSxJQUFJLENBQUVqQixJQUFLLENBQUM7QUFFN0UsTUFBTWtCLHdCQUF3QixHQUFHO0VBQy9CO0VBQ0FyQyxLQUFLLEVBQUVBLEtBQUs7RUFFWjtFQUNBaUIsT0FBTyxFQUFFQSxPQUFPO0VBRWhCO0VBQ0FDLE9BQU8sRUFBRUEsT0FBTztFQUVoQjtFQUNBUixNQUFNLEVBQUVBLE1BQU07RUFFZDtFQUNBNEIsYUFBYSxFQUFFdkM7QUFDakIsQ0FBQztBQUNESixnQkFBZ0IsQ0FBQzRDLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRUYsd0JBQXlCLENBQUM7QUFDakYsZUFBZUEsd0JBQXdCIn0=