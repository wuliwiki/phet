// Copyright 2016-2022, University of Colorado Boulder

/**
 * View for a draggable measuring tape for Charges and Fields.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../../axon/js/Property.js';
import MeasuringTapeNode from '../../../../scenery-phet/js/MeasuringTapeNode.js';
import chargesAndFields from '../../chargesAndFields.js';
import ChargesAndFieldsStrings from '../../ChargesAndFieldsStrings.js';
class ChargesAndFieldsMeasuringTapeNode extends MeasuringTapeNode {
  /**
   * @param {MeasuringTape} measuringTape
   * @param {function} snapToGridLines - function({Property.<Vector2>})
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Property.<Bounds2>} availableModelBoundsProperty - dragBounds for the charged particle
   * @param {Tandem} tandem
   */
  constructor(measuringTape, snapToGridLines, modelViewTransform, availableModelBoundsProperty, tandem) {
    super(new Property({
      name: ChargesAndFieldsStrings.centimeterUnit,
      multiplier: 100
    }), {
      visibleProperty: measuringTape.isActiveProperty,
      tandem: tandem,
      dragBounds: availableModelBoundsProperty.get(),
      modelViewTransform: modelViewTransform,
      basePositionProperty: measuringTape.basePositionProperty,
      tipPositionProperty: measuringTape.tipPositionProperty,
      textBackgroundColor: 'rgba( 0, 0, 0, 0.65 )'
    });
    this.measuringTape = measuringTape;
    this.isTipUserControlledProperty.link(() => snapToGridLines(measuringTape.tipPositionProperty));
    this.isBaseUserControlledProperty.link(() => {
      snapToGridLines(measuringTape.basePositionProperty);
      snapToGridLines(measuringTape.tipPositionProperty);
    });
  }
}
chargesAndFields.register('ChargesAndFieldsMeasuringTapeNode', ChargesAndFieldsMeasuringTapeNode);
export default ChargesAndFieldsMeasuringTapeNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIk1lYXN1cmluZ1RhcGVOb2RlIiwiY2hhcmdlc0FuZEZpZWxkcyIsIkNoYXJnZXNBbmRGaWVsZHNTdHJpbmdzIiwiQ2hhcmdlc0FuZEZpZWxkc01lYXN1cmluZ1RhcGVOb2RlIiwiY29uc3RydWN0b3IiLCJtZWFzdXJpbmdUYXBlIiwic25hcFRvR3JpZExpbmVzIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiYXZhaWxhYmxlTW9kZWxCb3VuZHNQcm9wZXJ0eSIsInRhbmRlbSIsIm5hbWUiLCJjZW50aW1ldGVyVW5pdCIsIm11bHRpcGxpZXIiLCJ2aXNpYmxlUHJvcGVydHkiLCJpc0FjdGl2ZVByb3BlcnR5IiwiZHJhZ0JvdW5kcyIsImdldCIsImJhc2VQb3NpdGlvblByb3BlcnR5IiwidGlwUG9zaXRpb25Qcm9wZXJ0eSIsInRleHRCYWNrZ3JvdW5kQ29sb3IiLCJpc1RpcFVzZXJDb250cm9sbGVkUHJvcGVydHkiLCJsaW5rIiwiaXNCYXNlVXNlckNvbnRyb2xsZWRQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2hhcmdlc0FuZEZpZWxkc01lYXN1cmluZ1RhcGVOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgZm9yIGEgZHJhZ2dhYmxlIG1lYXN1cmluZyB0YXBlIGZvciBDaGFyZ2VzIGFuZCBGaWVsZHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNZWFzdXJpbmdUYXBlTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTWVhc3VyaW5nVGFwZU5vZGUuanMnO1xyXG5pbXBvcnQgY2hhcmdlc0FuZEZpZWxkcyBmcm9tICcuLi8uLi9jaGFyZ2VzQW5kRmllbGRzLmpzJztcclxuaW1wb3J0IENoYXJnZXNBbmRGaWVsZHNTdHJpbmdzIGZyb20gJy4uLy4uL0NoYXJnZXNBbmRGaWVsZHNTdHJpbmdzLmpzJztcclxuXHJcbmNsYXNzIENoYXJnZXNBbmRGaWVsZHNNZWFzdXJpbmdUYXBlTm9kZSBleHRlbmRzIE1lYXN1cmluZ1RhcGVOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtNZWFzdXJpbmdUYXBlfSBtZWFzdXJpbmdUYXBlXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gc25hcFRvR3JpZExpbmVzIC0gZnVuY3Rpb24oe1Byb3BlcnR5LjxWZWN0b3IyPn0pXHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxCb3VuZHMyPn0gYXZhaWxhYmxlTW9kZWxCb3VuZHNQcm9wZXJ0eSAtIGRyYWdCb3VuZHMgZm9yIHRoZSBjaGFyZ2VkIHBhcnRpY2xlXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtZWFzdXJpbmdUYXBlLFxyXG4gICAgICAgICAgICAgICBzbmFwVG9HcmlkTGluZXMsXHJcbiAgICAgICAgICAgICAgIG1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgICAgICAgICAgYXZhaWxhYmxlTW9kZWxCb3VuZHNQcm9wZXJ0eSxcclxuICAgICAgICAgICAgICAgdGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCBuZXcgUHJvcGVydHkoIHsgbmFtZTogQ2hhcmdlc0FuZEZpZWxkc1N0cmluZ3MuY2VudGltZXRlclVuaXQsIG11bHRpcGxpZXI6IDEwMCB9ICksIHtcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBtZWFzdXJpbmdUYXBlLmlzQWN0aXZlUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBkcmFnQm91bmRzOiBhdmFpbGFibGVNb2RlbEJvdW5kc1Byb3BlcnR5LmdldCgpLFxyXG4gICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IG1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgYmFzZVBvc2l0aW9uUHJvcGVydHk6IG1lYXN1cmluZ1RhcGUuYmFzZVBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgIHRpcFBvc2l0aW9uUHJvcGVydHk6IG1lYXN1cmluZ1RhcGUudGlwUG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgdGV4dEJhY2tncm91bmRDb2xvcjogJ3JnYmEoIDAsIDAsIDAsIDAuNjUgKSdcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLm1lYXN1cmluZ1RhcGUgPSBtZWFzdXJpbmdUYXBlO1xyXG5cclxuICAgIHRoaXMuaXNUaXBVc2VyQ29udHJvbGxlZFByb3BlcnR5LmxpbmsoICgpID0+IHNuYXBUb0dyaWRMaW5lcyggbWVhc3VyaW5nVGFwZS50aXBQb3NpdGlvblByb3BlcnR5ICkgKTtcclxuXHJcbiAgICB0aGlzLmlzQmFzZVVzZXJDb250cm9sbGVkUHJvcGVydHkubGluayggKCkgPT4ge1xyXG4gICAgICBzbmFwVG9HcmlkTGluZXMoIG1lYXN1cmluZ1RhcGUuYmFzZVBvc2l0aW9uUHJvcGVydHkgKTtcclxuICAgICAgc25hcFRvR3JpZExpbmVzKCBtZWFzdXJpbmdUYXBlLnRpcFBvc2l0aW9uUHJvcGVydHkgKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmNoYXJnZXNBbmRGaWVsZHMucmVnaXN0ZXIoICdDaGFyZ2VzQW5kRmllbGRzTWVhc3VyaW5nVGFwZU5vZGUnLCBDaGFyZ2VzQW5kRmllbGRzTWVhc3VyaW5nVGFwZU5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ2hhcmdlc0FuZEZpZWxkc01lYXN1cmluZ1RhcGVOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLGlCQUFpQixNQUFNLGtEQUFrRDtBQUNoRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBRXRFLE1BQU1DLGlDQUFpQyxTQUFTSCxpQkFBaUIsQ0FBQztFQUVoRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxhQUFhLEVBQ2JDLGVBQWUsRUFDZkMsa0JBQWtCLEVBQ2xCQyw0QkFBNEIsRUFDNUJDLE1BQU0sRUFBRztJQUVwQixLQUFLLENBQUUsSUFBSVYsUUFBUSxDQUFFO01BQUVXLElBQUksRUFBRVIsdUJBQXVCLENBQUNTLGNBQWM7TUFBRUMsVUFBVSxFQUFFO0lBQUksQ0FBRSxDQUFDLEVBQUU7TUFDeEZDLGVBQWUsRUFBRVIsYUFBYSxDQUFDUyxnQkFBZ0I7TUFDL0NMLE1BQU0sRUFBRUEsTUFBTTtNQUNkTSxVQUFVLEVBQUVQLDRCQUE0QixDQUFDUSxHQUFHLENBQUMsQ0FBQztNQUM5Q1Qsa0JBQWtCLEVBQUVBLGtCQUFrQjtNQUN0Q1Usb0JBQW9CLEVBQUVaLGFBQWEsQ0FBQ1ksb0JBQW9CO01BQ3hEQyxtQkFBbUIsRUFBRWIsYUFBYSxDQUFDYSxtQkFBbUI7TUFDdERDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ2QsYUFBYSxHQUFHQSxhQUFhO0lBRWxDLElBQUksQ0FBQ2UsMkJBQTJCLENBQUNDLElBQUksQ0FBRSxNQUFNZixlQUFlLENBQUVELGFBQWEsQ0FBQ2EsbUJBQW9CLENBQUUsQ0FBQztJQUVuRyxJQUFJLENBQUNJLDRCQUE0QixDQUFDRCxJQUFJLENBQUUsTUFBTTtNQUM1Q2YsZUFBZSxDQUFFRCxhQUFhLENBQUNZLG9CQUFxQixDQUFDO01BQ3JEWCxlQUFlLENBQUVELGFBQWEsQ0FBQ2EsbUJBQW9CLENBQUM7SUFDdEQsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBakIsZ0JBQWdCLENBQUNzQixRQUFRLENBQUUsbUNBQW1DLEVBQUVwQixpQ0FBa0MsQ0FBQztBQUNuRyxlQUFlQSxpQ0FBaUMifQ==