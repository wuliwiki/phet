// Copyright 2015-2022, University of Colorado Boulder

/**
 * Scenery Node for the electric field sensor. The representation of the sensor is a circle.
 *
 * @author Martin Veillette (Berea College)
 */

import { Circle, Node } from '../../../../scenery/js/imports.js';
import chargesAndFields from '../../chargesAndFields.js';
import ChargesAndFieldsColors from '../ChargesAndFieldsColors.js';
import ChargesAndFieldsConstants from '../ChargesAndFieldsConstants.js';

// constants
const CIRCLE_RADIUS = ChargesAndFieldsConstants.ELECTRIC_FIELD_SENSOR_CIRCLE_RADIUS;
class ElectricFieldSensorRepresentationNode extends Node {
  /**
   * Constructor for the ElectricFieldSensorRepresentationNode which renders the sensor as a scenery node.
   *
   * @param {Object} [options] - Passed to Node
   */
  constructor(options) {
    super(options);

    // Create the centered circle
    const circle = new Circle(CIRCLE_RADIUS, {
      centerX: 0,
      centerY: 0,
      fill: ChargesAndFieldsColors.electricFieldSensorCircleFillProperty,
      stroke: ChargesAndFieldsColors.electricFieldSensorCircleStrokeProperty
    });

    // add circle
    this.addChild(circle);
  }
}
chargesAndFields.register('ElectricFieldSensorRepresentationNode', ElectricFieldSensorRepresentationNode);
export default ElectricFieldSensorRepresentationNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaXJjbGUiLCJOb2RlIiwiY2hhcmdlc0FuZEZpZWxkcyIsIkNoYXJnZXNBbmRGaWVsZHNDb2xvcnMiLCJDaGFyZ2VzQW5kRmllbGRzQ29uc3RhbnRzIiwiQ0lSQ0xFX1JBRElVUyIsIkVMRUNUUklDX0ZJRUxEX1NFTlNPUl9DSVJDTEVfUkFESVVTIiwiRWxlY3RyaWNGaWVsZFNlbnNvclJlcHJlc2VudGF0aW9uTm9kZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImNpcmNsZSIsImNlbnRlclgiLCJjZW50ZXJZIiwiZmlsbCIsImVsZWN0cmljRmllbGRTZW5zb3JDaXJjbGVGaWxsUHJvcGVydHkiLCJzdHJva2UiLCJlbGVjdHJpY0ZpZWxkU2Vuc29yQ2lyY2xlU3Ryb2tlUHJvcGVydHkiLCJhZGRDaGlsZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWxlY3RyaWNGaWVsZFNlbnNvclJlcHJlc2VudGF0aW9uTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY2VuZXJ5IE5vZGUgZm9yIHRoZSBlbGVjdHJpYyBmaWVsZCBzZW5zb3IuIFRoZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgc2Vuc29yIGlzIGEgY2lyY2xlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ2lyY2xlLCBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGNoYXJnZXNBbmRGaWVsZHMgZnJvbSAnLi4vLi4vY2hhcmdlc0FuZEZpZWxkcy5qcyc7XHJcbmltcG9ydCBDaGFyZ2VzQW5kRmllbGRzQ29sb3JzIGZyb20gJy4uL0NoYXJnZXNBbmRGaWVsZHNDb2xvcnMuanMnO1xyXG5pbXBvcnQgQ2hhcmdlc0FuZEZpZWxkc0NvbnN0YW50cyBmcm9tICcuLi9DaGFyZ2VzQW5kRmllbGRzQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBDSVJDTEVfUkFESVVTID0gQ2hhcmdlc0FuZEZpZWxkc0NvbnN0YW50cy5FTEVDVFJJQ19GSUVMRF9TRU5TT1JfQ0lSQ0xFX1JBRElVUztcclxuXHJcbmNsYXNzIEVsZWN0cmljRmllbGRTZW5zb3JSZXByZXNlbnRhdGlvbk5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IgZm9yIHRoZSBFbGVjdHJpY0ZpZWxkU2Vuc29yUmVwcmVzZW50YXRpb25Ob2RlIHdoaWNoIHJlbmRlcnMgdGhlIHNlbnNvciBhcyBhIHNjZW5lcnkgbm9kZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBQYXNzZWQgdG8gTm9kZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBjZW50ZXJlZCBjaXJjbGVcclxuICAgIGNvbnN0IGNpcmNsZSA9IG5ldyBDaXJjbGUoIENJUkNMRV9SQURJVVMsIHtcclxuICAgICAgY2VudGVyWDogMCxcclxuICAgICAgY2VudGVyWTogMCxcclxuICAgICAgZmlsbDogQ2hhcmdlc0FuZEZpZWxkc0NvbG9ycy5lbGVjdHJpY0ZpZWxkU2Vuc29yQ2lyY2xlRmlsbFByb3BlcnR5LFxyXG4gICAgICBzdHJva2U6IENoYXJnZXNBbmRGaWVsZHNDb2xvcnMuZWxlY3RyaWNGaWVsZFNlbnNvckNpcmNsZVN0cm9rZVByb3BlcnR5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gYWRkIGNpcmNsZVxyXG4gICAgdGhpcy5hZGRDaGlsZCggY2lyY2xlICk7XHJcbiAgfVxyXG59XHJcblxyXG5jaGFyZ2VzQW5kRmllbGRzLnJlZ2lzdGVyKCAnRWxlY3RyaWNGaWVsZFNlbnNvclJlcHJlc2VudGF0aW9uTm9kZScsIEVsZWN0cmljRmllbGRTZW5zb3JSZXByZXNlbnRhdGlvbk5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgRWxlY3RyaWNGaWVsZFNlbnNvclJlcHJlc2VudGF0aW9uTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsTUFBTSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ2hFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxzQkFBc0IsTUFBTSw4QkFBOEI7QUFDakUsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDOztBQUV2RTtBQUNBLE1BQU1DLGFBQWEsR0FBR0QseUJBQXlCLENBQUNFLG1DQUFtQztBQUVuRixNQUFNQyxxQ0FBcUMsU0FBU04sSUFBSSxDQUFDO0VBRXZEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsT0FBTyxFQUFHO0lBRXJCLEtBQUssQ0FBRUEsT0FBUSxDQUFDOztJQUVoQjtJQUNBLE1BQU1DLE1BQU0sR0FBRyxJQUFJVixNQUFNLENBQUVLLGFBQWEsRUFBRTtNQUN4Q00sT0FBTyxFQUFFLENBQUM7TUFDVkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsSUFBSSxFQUFFVixzQkFBc0IsQ0FBQ1cscUNBQXFDO01BQ2xFQyxNQUFNLEVBQUVaLHNCQUFzQixDQUFDYTtJQUNqQyxDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNDLFFBQVEsQ0FBRVAsTUFBTyxDQUFDO0VBQ3pCO0FBQ0Y7QUFFQVIsZ0JBQWdCLENBQUNnQixRQUFRLENBQUUsdUNBQXVDLEVBQUVYLHFDQUFzQyxDQUFDO0FBQzNHLGVBQWVBLHFDQUFxQyJ9