// Copyright 2016-2021, University of Colorado Boulder

/**
 * Model for the electric potential sensor
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import chargesAndFields from '../../chargesAndFields.js';
class ElectricPotentialSensor {
  /**
   * @param {Function} computeElectricPotential - function( Vector2 ) : number, computes electric potential at the given
   *                                              point in the model.
   * @param {Tandem} tandem
   */
  constructor(computeElectricPotential, tandem) {
    // @public
    this.positionProperty = new Vector2Property(new Vector2(0, 0), {
      tandem: tandem.createTandem('positionProperty')
    });

    // @public
    this.electricPotentialProperty = new NumberProperty(0, {
      tandem: tandem.createTandem('electricPotentialProperty'),
      units: 'V',
      phetioReadOnly: true
    });

    // @public - Whether the sensor is out in the play area (false when in the toolbox)
    this.isActiveProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('isActiveProperty')
    });
    this.computeElectricPotential = computeElectricPotential;
    this.positionProperty.link(this.update.bind(this));
  }

  /**
   * Should be called to update the value of this sensor.
   * @public
   */
  update() {
    this.electricPotentialProperty.set(this.computeElectricPotential(this.positionProperty.get()));
  }

  /**
   * @public
   */
  reset() {
    this.positionProperty.reset();
    this.electricPotentialProperty.reset();
    this.isActiveProperty.reset();
  }
}
chargesAndFields.register('ElectricPotentialSensor', ElectricPotentialSensor);
export default ElectricPotentialSensor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJWZWN0b3IyUHJvcGVydHkiLCJjaGFyZ2VzQW5kRmllbGRzIiwiRWxlY3RyaWNQb3RlbnRpYWxTZW5zb3IiLCJjb25zdHJ1Y3RvciIsImNvbXB1dGVFbGVjdHJpY1BvdGVudGlhbCIsInRhbmRlbSIsInBvc2l0aW9uUHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJlbGVjdHJpY1BvdGVudGlhbFByb3BlcnR5IiwidW5pdHMiLCJwaGV0aW9SZWFkT25seSIsImlzQWN0aXZlUHJvcGVydHkiLCJsaW5rIiwidXBkYXRlIiwiYmluZCIsInNldCIsImdldCIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbGVjdHJpY1BvdGVudGlhbFNlbnNvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlIGVsZWN0cmljIHBvdGVudGlhbCBzZW5zb3JcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFZlY3RvcjJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMlByb3BlcnR5LmpzJztcclxuaW1wb3J0IGNoYXJnZXNBbmRGaWVsZHMgZnJvbSAnLi4vLi4vY2hhcmdlc0FuZEZpZWxkcy5qcyc7XHJcblxyXG5jbGFzcyBFbGVjdHJpY1BvdGVudGlhbFNlbnNvciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXB1dGVFbGVjdHJpY1BvdGVudGlhbCAtIGZ1bmN0aW9uKCBWZWN0b3IyICkgOiBudW1iZXIsIGNvbXB1dGVzIGVsZWN0cmljIHBvdGVudGlhbCBhdCB0aGUgZ2l2ZW5cclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludCBpbiB0aGUgbW9kZWwuXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBjb21wdXRlRWxlY3RyaWNQb3RlbnRpYWwsIHRhbmRlbSApIHtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBuZXcgVmVjdG9yMiggMCwgMCApLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Bvc2l0aW9uUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLmVsZWN0cmljUG90ZW50aWFsUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnZWxlY3RyaWNQb3RlbnRpYWxQcm9wZXJ0eScgKSxcclxuICAgICAgdW5pdHM6ICdWJyxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIC0gV2hldGhlciB0aGUgc2Vuc29yIGlzIG91dCBpbiB0aGUgcGxheSBhcmVhIChmYWxzZSB3aGVuIGluIHRoZSB0b29sYm94KVxyXG4gICAgdGhpcy5pc0FjdGl2ZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaXNBY3RpdmVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuY29tcHV0ZUVsZWN0cmljUG90ZW50aWFsID0gY29tcHV0ZUVsZWN0cmljUG90ZW50aWFsO1xyXG5cclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCB0aGlzLnVwZGF0ZS5iaW5kKCB0aGlzICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3VsZCBiZSBjYWxsZWQgdG8gdXBkYXRlIHRoZSB2YWx1ZSBvZiB0aGlzIHNlbnNvci5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgdGhpcy5lbGVjdHJpY1BvdGVudGlhbFByb3BlcnR5LnNldCggdGhpcy5jb21wdXRlRWxlY3RyaWNQb3RlbnRpYWwoIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5nZXQoKSApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuZWxlY3RyaWNQb3RlbnRpYWxQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5pc0FjdGl2ZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5jaGFyZ2VzQW5kRmllbGRzLnJlZ2lzdGVyKCAnRWxlY3RyaWNQb3RlbnRpYWxTZW5zb3InLCBFbGVjdHJpY1BvdGVudGlhbFNlbnNvciApO1xyXG5leHBvcnQgZGVmYXVsdCBFbGVjdHJpY1BvdGVudGlhbFNlbnNvcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsZUFBZSxNQUFNLHVDQUF1QztBQUNuRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFFeEQsTUFBTUMsdUJBQXVCLENBQUM7RUFFNUI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyx3QkFBd0IsRUFBRUMsTUFBTSxFQUFHO0lBRTlDO0lBQ0EsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxJQUFJTixlQUFlLENBQUUsSUFBSUQsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsRUFBRTtNQUNoRU0sTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSxrQkFBbUI7SUFDbEQsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDQyx5QkFBeUIsR0FBRyxJQUFJVixjQUFjLENBQUUsQ0FBQyxFQUFFO01BQ3RETyxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLDJCQUE0QixDQUFDO01BQzFERSxLQUFLLEVBQUUsR0FBRztNQUNWQyxjQUFjLEVBQUU7SUFDbEIsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxJQUFJZCxlQUFlLENBQUUsS0FBSyxFQUFFO01BQ2xEUSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLGtCQUFtQjtJQUNsRCxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNILHdCQUF3QixHQUFHQSx3QkFBd0I7SUFFeEQsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ00sSUFBSSxDQUFFLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUUsSUFBSyxDQUFFLENBQUM7RUFDeEQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUQsTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsSUFBSSxDQUFDTCx5QkFBeUIsQ0FBQ08sR0FBRyxDQUFFLElBQUksQ0FBQ1gsd0JBQXdCLENBQUUsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ1UsR0FBRyxDQUFDLENBQUUsQ0FBRSxDQUFDO0VBQ3BHOztFQUVBO0FBQ0Y7QUFDQTtFQUNFQyxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNYLGdCQUFnQixDQUFDVyxLQUFLLENBQUMsQ0FBQztJQUM3QixJQUFJLENBQUNULHlCQUF5QixDQUFDUyxLQUFLLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUNOLGdCQUFnQixDQUFDTSxLQUFLLENBQUMsQ0FBQztFQUMvQjtBQUNGO0FBRUFoQixnQkFBZ0IsQ0FBQ2lCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRWhCLHVCQUF3QixDQUFDO0FBQy9FLGVBQWVBLHVCQUF1QiJ9