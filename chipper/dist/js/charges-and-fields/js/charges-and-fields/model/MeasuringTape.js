// Copyright 2016-2021, University of Colorado Boulder

/**
 * Model for the measuring tape.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import chargesAndFields from '../../chargesAndFields.js';
class MeasuringTape {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    // @public - Base (start of tape from the container) position
    this.basePositionProperty = new Vector2Property(Vector2.ZERO, {
      tandem: tandem.createTandem('basePositionProperty'),
      units: 'm'
    });

    // @public - Tip (end of measuring tape) position
    this.tipPositionProperty = new Vector2Property(new Vector2(0.2, 0), {
      tandem: tandem.createTandem('tipPositionProperty'),
      units: 'm'
    });

    // @public - Whether the measuring tape is out in the play area (false when in the toolbox)
    this.isActiveProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('isActiveProperty')
    });
  }

  /**
   * Resets values to their original state
   * @public
   */
  reset() {
    this.basePositionProperty.reset();
    this.tipPositionProperty.reset();
    this.isActiveProperty.reset();
  }
}
chargesAndFields.register('MeasuringTape', MeasuringTape);
export default MeasuringTape;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwiY2hhcmdlc0FuZEZpZWxkcyIsIk1lYXN1cmluZ1RhcGUiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsImJhc2VQb3NpdGlvblByb3BlcnR5IiwiWkVSTyIsImNyZWF0ZVRhbmRlbSIsInVuaXRzIiwidGlwUG9zaXRpb25Qcm9wZXJ0eSIsImlzQWN0aXZlUHJvcGVydHkiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWVhc3VyaW5nVGFwZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlIG1lYXN1cmluZyB0YXBlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHVcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMlByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgY2hhcmdlc0FuZEZpZWxkcyBmcm9tICcuLi8uLi9jaGFyZ2VzQW5kRmllbGRzLmpzJztcclxuXHJcbmNsYXNzIE1lYXN1cmluZ1RhcGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRhbmRlbSApIHtcclxuXHJcbiAgICAvLyBAcHVibGljIC0gQmFzZSAoc3RhcnQgb2YgdGFwZSBmcm9tIHRoZSBjb250YWluZXIpIHBvc2l0aW9uXHJcbiAgICB0aGlzLmJhc2VQb3NpdGlvblByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggVmVjdG9yMi5aRVJPLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Jhc2VQb3NpdGlvblByb3BlcnR5JyApLFxyXG4gICAgICB1bml0czogJ20nXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAtIFRpcCAoZW5kIG9mIG1lYXN1cmluZyB0YXBlKSBwb3NpdGlvblxyXG4gICAgdGhpcy50aXBQb3NpdGlvblByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggbmV3IFZlY3RvcjIoIDAuMiwgMCApLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RpcFBvc2l0aW9uUHJvcGVydHknICksXHJcbiAgICAgIHVuaXRzOiAnbSdcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIC0gV2hldGhlciB0aGUgbWVhc3VyaW5nIHRhcGUgaXMgb3V0IGluIHRoZSBwbGF5IGFyZWEgKGZhbHNlIHdoZW4gaW4gdGhlIHRvb2xib3gpXHJcbiAgICB0aGlzLmlzQWN0aXZlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdpc0FjdGl2ZVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldHMgdmFsdWVzIHRvIHRoZWlyIG9yaWdpbmFsIHN0YXRlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5iYXNlUG9zaXRpb25Qcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy50aXBQb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmlzQWN0aXZlUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmNoYXJnZXNBbmRGaWVsZHMucmVnaXN0ZXIoICdNZWFzdXJpbmdUYXBlJywgTWVhc3VyaW5nVGFwZSApO1xyXG5leHBvcnQgZGVmYXVsdCBNZWFzdXJpbmdUYXBlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsZUFBZSxNQUFNLHVDQUF1QztBQUNuRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFFeEQsTUFBTUMsYUFBYSxDQUFDO0VBRWxCO0FBQ0Y7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxNQUFNLEVBQUc7SUFFcEI7SUFDQSxJQUFJLENBQUNDLG9CQUFvQixHQUFHLElBQUlMLGVBQWUsQ0FBRUQsT0FBTyxDQUFDTyxJQUFJLEVBQUU7TUFDN0RGLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsc0JBQXVCLENBQUM7TUFDckRDLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUcsSUFBSVQsZUFBZSxDQUFFLElBQUlELE9BQU8sQ0FBRSxHQUFHLEVBQUUsQ0FBRSxDQUFDLEVBQUU7TUFDckVLLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUscUJBQXNCLENBQUM7TUFDcERDLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0UsZ0JBQWdCLEdBQUcsSUFBSVosZUFBZSxDQUFFLEtBQUssRUFBRTtNQUNsRE0sTUFBTSxFQUFFQSxNQUFNLENBQUNHLFlBQVksQ0FBRSxrQkFBbUI7SUFDbEQsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUksS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxDQUFDTixvQkFBb0IsQ0FBQ00sS0FBSyxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDRixtQkFBbUIsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7SUFDaEMsSUFBSSxDQUFDRCxnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDL0I7QUFDRjtBQUVBVixnQkFBZ0IsQ0FBQ1csUUFBUSxDQUFFLGVBQWUsRUFBRVYsYUFBYyxDQUFDO0FBQzNELGVBQWVBLGFBQWEifQ==