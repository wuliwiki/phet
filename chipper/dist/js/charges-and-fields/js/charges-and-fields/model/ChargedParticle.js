// Copyright 2014-2023, University of Colorado Boulder

/**
 * Type of a charged particle, which has charge (+1 or -1) and a position.
 *
 * @author Martin Veillette (Berea College)
 */

import merge from '../../../../phet-core/js/merge.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import VoidIO from '../../../../tandem/js/types/VoidIO.js';
import chargesAndFields from '../../chargesAndFields.js';
import ModelElement from './ModelElement.js';
class ChargedParticle extends ModelElement {
  /**
   * @param {number} charge - (positive=+1 or negative=-1)
   * @param {Vector2} initialPosition
   * @param {Object} [options]
   * @private - see createGroup
   */
  constructor(charge, initialPosition, options) {
    options = merge({
      // {Tandem}
      tandem: Tandem.REQUIRED,
      phetioType: ChargedParticle.ChargedParticleIO,
      phetioDynamicElement: true
    }, options);
    super(initialPosition, options);
    assert && assert(charge === 1 || charge === -1, 'Charges should be +1 or -1');

    // @public (read-only) {number} - a charge of one corresponds to one nano Coulomb
    this.charge = charge;
  }
}
ChargedParticle.ChargedParticleIO = new IOType('ChargedParticleIO', {
  valueType: ChargedParticle,
  supertype: ModelElement.ModelElementIO,
  methods: {
    setCharge: {
      returnType: VoidIO,
      parameterTypes: [NumberIO],
      implementation: function (value) {
        this.charge = value.charge;
      },
      documentation: 'Set charge (in units of e)',
      invocableForReadOnlyElements: false
    }
  },
  stateSchema: {
    charge: NumberIO
  },
  toStateObject: chargedParticle => {
    const parentStateObject = ModelElement.ModelElementIO.toStateObject(chargedParticle);
    parentStateObject.charge = chargedParticle.charge;
    return parentStateObject;
  },
  // Put charge first for the chargedParticleGroup create function API.
  stateObjectToCreateElementArguments: stateObject => [stateObject.charge].concat(ModelElement.ModelElementIO.stateObjectToCreateElementArguments(stateObject))
});
chargesAndFields.register('ChargedParticle', ChargedParticle);
export default ChargedParticle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlRhbmRlbSIsIklPVHlwZSIsIk51bWJlcklPIiwiVm9pZElPIiwiY2hhcmdlc0FuZEZpZWxkcyIsIk1vZGVsRWxlbWVudCIsIkNoYXJnZWRQYXJ0aWNsZSIsImNvbnN0cnVjdG9yIiwiY2hhcmdlIiwiaW5pdGlhbFBvc2l0aW9uIiwib3B0aW9ucyIsInRhbmRlbSIsIlJFUVVJUkVEIiwicGhldGlvVHlwZSIsIkNoYXJnZWRQYXJ0aWNsZUlPIiwicGhldGlvRHluYW1pY0VsZW1lbnQiLCJhc3NlcnQiLCJ2YWx1ZVR5cGUiLCJzdXBlcnR5cGUiLCJNb2RlbEVsZW1lbnRJTyIsIm1ldGhvZHMiLCJzZXRDaGFyZ2UiLCJyZXR1cm5UeXBlIiwicGFyYW1ldGVyVHlwZXMiLCJpbXBsZW1lbnRhdGlvbiIsInZhbHVlIiwiZG9jdW1lbnRhdGlvbiIsImludm9jYWJsZUZvclJlYWRPbmx5RWxlbWVudHMiLCJzdGF0ZVNjaGVtYSIsInRvU3RhdGVPYmplY3QiLCJjaGFyZ2VkUGFydGljbGUiLCJwYXJlbnRTdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0VG9DcmVhdGVFbGVtZW50QXJndW1lbnRzIiwic3RhdGVPYmplY3QiLCJjb25jYXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNoYXJnZWRQYXJ0aWNsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUeXBlIG9mIGEgY2hhcmdlZCBwYXJ0aWNsZSwgd2hpY2ggaGFzIGNoYXJnZSAoKzEgb3IgLTEpIGFuZCBhIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBOdW1iZXJJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvTnVtYmVySU8uanMnO1xyXG5pbXBvcnQgVm9pZElPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9Wb2lkSU8uanMnO1xyXG5pbXBvcnQgY2hhcmdlc0FuZEZpZWxkcyBmcm9tICcuLi8uLi9jaGFyZ2VzQW5kRmllbGRzLmpzJztcclxuaW1wb3J0IE1vZGVsRWxlbWVudCBmcm9tICcuL01vZGVsRWxlbWVudC5qcyc7XHJcblxyXG5jbGFzcyBDaGFyZ2VkUGFydGljbGUgZXh0ZW5kcyBNb2RlbEVsZW1lbnQge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY2hhcmdlIC0gKHBvc2l0aXZlPSsxIG9yIG5lZ2F0aXZlPS0xKVxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gaW5pdGlhbFBvc2l0aW9uXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqIEBwcml2YXRlIC0gc2VlIGNyZWF0ZUdyb3VwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNoYXJnZSwgaW5pdGlhbFBvc2l0aW9uLCBvcHRpb25zICkge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcblxyXG4gICAgICAvLyB7VGFuZGVtfVxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRCxcclxuICAgICAgcGhldGlvVHlwZTogQ2hhcmdlZFBhcnRpY2xlLkNoYXJnZWRQYXJ0aWNsZUlPLFxyXG4gICAgICBwaGV0aW9EeW5hbWljRWxlbWVudDogdHJ1ZVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG4gICAgc3VwZXIoIGluaXRpYWxQb3NpdGlvbiwgb3B0aW9ucyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggY2hhcmdlID09PSAxIHx8IGNoYXJnZSA9PT0gLTEsICdDaGFyZ2VzIHNob3VsZCBiZSArMSBvciAtMScgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtudW1iZXJ9IC0gYSBjaGFyZ2Ugb2Ygb25lIGNvcnJlc3BvbmRzIHRvIG9uZSBuYW5vIENvdWxvbWJcclxuICAgIHRoaXMuY2hhcmdlID0gY2hhcmdlO1xyXG4gIH1cclxufVxyXG5cclxuQ2hhcmdlZFBhcnRpY2xlLkNoYXJnZWRQYXJ0aWNsZUlPID0gbmV3IElPVHlwZSggJ0NoYXJnZWRQYXJ0aWNsZUlPJywge1xyXG4gIHZhbHVlVHlwZTogQ2hhcmdlZFBhcnRpY2xlLFxyXG4gIHN1cGVydHlwZTogTW9kZWxFbGVtZW50Lk1vZGVsRWxlbWVudElPLFxyXG4gIG1ldGhvZHM6IHtcclxuICAgIHNldENoYXJnZToge1xyXG4gICAgICByZXR1cm5UeXBlOiBWb2lkSU8sXHJcbiAgICAgIHBhcmFtZXRlclR5cGVzOiBbIE51bWJlcklPIF0sXHJcbiAgICAgIGltcGxlbWVudGF0aW9uOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcbiAgICAgICAgdGhpcy5jaGFyZ2UgPSB2YWx1ZS5jaGFyZ2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRvY3VtZW50YXRpb246ICdTZXQgY2hhcmdlIChpbiB1bml0cyBvZiBlKScsXHJcbiAgICAgIGludm9jYWJsZUZvclJlYWRPbmx5RWxlbWVudHM6IGZhbHNlXHJcbiAgICB9XHJcbiAgfSxcclxuICBzdGF0ZVNjaGVtYToge1xyXG4gICAgY2hhcmdlOiBOdW1iZXJJT1xyXG4gIH0sXHJcbiAgdG9TdGF0ZU9iamVjdDogY2hhcmdlZFBhcnRpY2xlID0+IHtcclxuICAgIGNvbnN0IHBhcmVudFN0YXRlT2JqZWN0ID0gTW9kZWxFbGVtZW50Lk1vZGVsRWxlbWVudElPLnRvU3RhdGVPYmplY3QoIGNoYXJnZWRQYXJ0aWNsZSApO1xyXG4gICAgcGFyZW50U3RhdGVPYmplY3QuY2hhcmdlID0gY2hhcmdlZFBhcnRpY2xlLmNoYXJnZTtcclxuICAgIHJldHVybiBwYXJlbnRTdGF0ZU9iamVjdDtcclxuICB9LFxyXG4gIC8vIFB1dCBjaGFyZ2UgZmlyc3QgZm9yIHRoZSBjaGFyZ2VkUGFydGljbGVHcm91cCBjcmVhdGUgZnVuY3Rpb24gQVBJLlxyXG4gIHN0YXRlT2JqZWN0VG9DcmVhdGVFbGVtZW50QXJndW1lbnRzOiBzdGF0ZU9iamVjdCA9PiBbIHN0YXRlT2JqZWN0LmNoYXJnZSBdLmNvbmNhdCggTW9kZWxFbGVtZW50Lk1vZGVsRWxlbWVudElPLnN0YXRlT2JqZWN0VG9DcmVhdGVFbGVtZW50QXJndW1lbnRzKCBzdGF0ZU9iamVjdCApIClcclxufSApO1xyXG5cclxuY2hhcmdlc0FuZEZpZWxkcy5yZWdpc3RlciggJ0NoYXJnZWRQYXJ0aWNsZScsIENoYXJnZWRQYXJ0aWNsZSApO1xyXG5leHBvcnQgZGVmYXVsdCBDaGFyZ2VkUGFydGljbGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxNQUFNLE1BQU0sdUNBQXVDO0FBQzFELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsTUFBTSxNQUFNLHVDQUF1QztBQUMxRCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUU1QyxNQUFNQyxlQUFlLFNBQVNELFlBQVksQ0FBQztFQUV6QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsTUFBTSxFQUFFQyxlQUFlLEVBQUVDLE9BQU8sRUFBRztJQUM5Q0EsT0FBTyxHQUFHWCxLQUFLLENBQUU7TUFFZjtNQUNBWSxNQUFNLEVBQUVYLE1BQU0sQ0FBQ1ksUUFBUTtNQUN2QkMsVUFBVSxFQUFFUCxlQUFlLENBQUNRLGlCQUFpQjtNQUM3Q0Msb0JBQW9CLEVBQUU7SUFDeEIsQ0FBQyxFQUFFTCxPQUFRLENBQUM7SUFDWixLQUFLLENBQUVELGVBQWUsRUFBRUMsT0FBUSxDQUFDO0lBQ2pDTSxNQUFNLElBQUlBLE1BQU0sQ0FBRVIsTUFBTSxLQUFLLENBQUMsSUFBSUEsTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUFFLDRCQUE2QixDQUFDOztJQUUvRTtJQUNBLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCO0FBQ0Y7QUFFQUYsZUFBZSxDQUFDUSxpQkFBaUIsR0FBRyxJQUFJYixNQUFNLENBQUUsbUJBQW1CLEVBQUU7RUFDbkVnQixTQUFTLEVBQUVYLGVBQWU7RUFDMUJZLFNBQVMsRUFBRWIsWUFBWSxDQUFDYyxjQUFjO0VBQ3RDQyxPQUFPLEVBQUU7SUFDUEMsU0FBUyxFQUFFO01BQ1RDLFVBQVUsRUFBRW5CLE1BQU07TUFDbEJvQixjQUFjLEVBQUUsQ0FBRXJCLFFBQVEsQ0FBRTtNQUM1QnNCLGNBQWMsRUFBRSxTQUFBQSxDQUFVQyxLQUFLLEVBQUc7UUFDaEMsSUFBSSxDQUFDakIsTUFBTSxHQUFHaUIsS0FBSyxDQUFDakIsTUFBTTtNQUM1QixDQUFDO01BQ0RrQixhQUFhLEVBQUUsNEJBQTRCO01BQzNDQyw0QkFBNEIsRUFBRTtJQUNoQztFQUNGLENBQUM7RUFDREMsV0FBVyxFQUFFO0lBQ1hwQixNQUFNLEVBQUVOO0VBQ1YsQ0FBQztFQUNEMkIsYUFBYSxFQUFFQyxlQUFlLElBQUk7SUFDaEMsTUFBTUMsaUJBQWlCLEdBQUcxQixZQUFZLENBQUNjLGNBQWMsQ0FBQ1UsYUFBYSxDQUFFQyxlQUFnQixDQUFDO0lBQ3RGQyxpQkFBaUIsQ0FBQ3ZCLE1BQU0sR0FBR3NCLGVBQWUsQ0FBQ3RCLE1BQU07SUFDakQsT0FBT3VCLGlCQUFpQjtFQUMxQixDQUFDO0VBQ0Q7RUFDQUMsbUNBQW1DLEVBQUVDLFdBQVcsSUFBSSxDQUFFQSxXQUFXLENBQUN6QixNQUFNLENBQUUsQ0FBQzBCLE1BQU0sQ0FBRTdCLFlBQVksQ0FBQ2MsY0FBYyxDQUFDYSxtQ0FBbUMsQ0FBRUMsV0FBWSxDQUFFO0FBQ3BLLENBQUUsQ0FBQztBQUVIN0IsZ0JBQWdCLENBQUMrQixRQUFRLENBQUUsaUJBQWlCLEVBQUU3QixlQUFnQixDQUFDO0FBQy9ELGVBQWVBLGVBQWUifQ==