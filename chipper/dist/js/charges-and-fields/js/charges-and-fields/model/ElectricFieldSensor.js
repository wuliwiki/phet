// Copyright 2016-2022, University of Colorado Boulder

/**
 * Model for the electric field sensor
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import chargesAndFields from '../../chargesAndFields.js';
import ModelElement from './ModelElement.js';
class ElectricFieldSensor extends ModelElement {
  /**
   * @param {Function} computeElectricField - function( Vector2 ) : number, computes electric field at the given
   *                                          point in the model.
   * @param {Vector2} initialPosition - optionally pass an initialPosition for the animating home from toolbox.
   *                                        This is to support PhET-iO State.
   * @param {Tandem} tandem
   */
  constructor(computeElectricField, initialPosition, tandem) {
    super(initialPosition, {
      tandem: tandem,
      phetioDynamicElement: true
    });

    // @public - electricField Vector in Newtons per Coulomb
    this.electricFieldProperty = new Vector2Property(new Vector2(0, 0), {
      tandem: tandem.createTandem('electricFieldProperty')
    });
    this.computeElectricField = computeElectricField;

    // @public (phet-io)
    this.electricFieldSensorTandem = tandem;
    this.positionProperty.link(this.update.bind(this));
  }

  /**
   * Should be called to update the value of this sensor.
   * @public
   */
  update() {
    const eField = this.computeElectricField(this.positionProperty.get());
    assert && assert(eField.x !== Infinity && eField.y !== Infinity, `E-field is infinity: ${eField}`);
    assert && assert(!_.isNaN(eField.x) && !_.isNaN(eField.y), `E-field is NaN: ${eField}`);
    this.electricFieldProperty.set(this.computeElectricField(this.positionProperty.get()));
  }

  /**
   * @public
   */
  dispose() {
    this.electricFieldProperty.dispose();
    super.dispose();
  }
}
chargesAndFields.register('ElectricFieldSensor', ElectricFieldSensor);
export default ElectricFieldSensor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwiY2hhcmdlc0FuZEZpZWxkcyIsIk1vZGVsRWxlbWVudCIsIkVsZWN0cmljRmllbGRTZW5zb3IiLCJjb25zdHJ1Y3RvciIsImNvbXB1dGVFbGVjdHJpY0ZpZWxkIiwiaW5pdGlhbFBvc2l0aW9uIiwidGFuZGVtIiwicGhldGlvRHluYW1pY0VsZW1lbnQiLCJlbGVjdHJpY0ZpZWxkUHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJlbGVjdHJpY0ZpZWxkU2Vuc29yVGFuZGVtIiwicG9zaXRpb25Qcm9wZXJ0eSIsImxpbmsiLCJ1cGRhdGUiLCJiaW5kIiwiZUZpZWxkIiwiZ2V0IiwiYXNzZXJ0IiwieCIsIkluZmluaXR5IiwieSIsIl8iLCJpc05hTiIsInNldCIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVsZWN0cmljRmllbGRTZW5zb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIHRoZSBlbGVjdHJpYyBmaWVsZCBzZW5zb3JcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFZlY3RvcjJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMlByb3BlcnR5LmpzJztcclxuaW1wb3J0IGNoYXJnZXNBbmRGaWVsZHMgZnJvbSAnLi4vLi4vY2hhcmdlc0FuZEZpZWxkcy5qcyc7XHJcbmltcG9ydCBNb2RlbEVsZW1lbnQgZnJvbSAnLi9Nb2RlbEVsZW1lbnQuanMnO1xyXG5cclxuY2xhc3MgRWxlY3RyaWNGaWVsZFNlbnNvciBleHRlbmRzIE1vZGVsRWxlbWVudCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXB1dGVFbGVjdHJpY0ZpZWxkIC0gZnVuY3Rpb24oIFZlY3RvcjIgKSA6IG51bWJlciwgY29tcHV0ZXMgZWxlY3RyaWMgZmllbGQgYXQgdGhlIGdpdmVuXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludCBpbiB0aGUgbW9kZWwuXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBpbml0aWFsUG9zaXRpb24gLSBvcHRpb25hbGx5IHBhc3MgYW4gaW5pdGlhbFBvc2l0aW9uIGZvciB0aGUgYW5pbWF0aW5nIGhvbWUgZnJvbSB0b29sYm94LlxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgdG8gc3VwcG9ydCBQaEVULWlPIFN0YXRlLlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY29tcHV0ZUVsZWN0cmljRmllbGQsIGluaXRpYWxQb3NpdGlvbiwgdGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCBpbml0aWFsUG9zaXRpb24sIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHBoZXRpb0R5bmFtaWNFbGVtZW50OiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAtIGVsZWN0cmljRmllbGQgVmVjdG9yIGluIE5ld3RvbnMgcGVyIENvdWxvbWJcclxuICAgIHRoaXMuZWxlY3RyaWNGaWVsZFByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggbmV3IFZlY3RvcjIoIDAsIDAgKSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdlbGVjdHJpY0ZpZWxkUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmNvbXB1dGVFbGVjdHJpY0ZpZWxkID0gY29tcHV0ZUVsZWN0cmljRmllbGQ7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocGhldC1pbylcclxuICAgIHRoaXMuZWxlY3RyaWNGaWVsZFNlbnNvclRhbmRlbSA9IHRhbmRlbTtcclxuXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkubGluayggdGhpcy51cGRhdGUuYmluZCggdGhpcyApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaG91bGQgYmUgY2FsbGVkIHRvIHVwZGF0ZSB0aGUgdmFsdWUgb2YgdGhpcyBzZW5zb3IuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGNvbnN0IGVGaWVsZCA9IHRoaXMuY29tcHV0ZUVsZWN0cmljRmllbGQoIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5nZXQoKSApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGVGaWVsZC54ICE9PSBJbmZpbml0eSAmJiBlRmllbGQueSAhPT0gSW5maW5pdHksIGBFLWZpZWxkIGlzIGluZmluaXR5OiAke2VGaWVsZH1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhXy5pc05hTiggZUZpZWxkLnggKSAmJiAhXy5pc05hTiggZUZpZWxkLnkgKSwgYEUtZmllbGQgaXMgTmFOOiAke2VGaWVsZH1gICk7XHJcblxyXG4gICAgdGhpcy5lbGVjdHJpY0ZpZWxkUHJvcGVydHkuc2V0KCB0aGlzLmNvbXB1dGVFbGVjdHJpY0ZpZWxkKCB0aGlzLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkgKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmVsZWN0cmljRmllbGRQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5jaGFyZ2VzQW5kRmllbGRzLnJlZ2lzdGVyKCAnRWxlY3RyaWNGaWVsZFNlbnNvcicsIEVsZWN0cmljRmllbGRTZW5zb3IgKTtcclxuZXhwb3J0IGRlZmF1bHQgRWxlY3RyaWNGaWVsZFNlbnNvcjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsZUFBZSxNQUFNLHVDQUF1QztBQUNuRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUU1QyxNQUFNQyxtQkFBbUIsU0FBU0QsWUFBWSxDQUFDO0VBRTdDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLG9CQUFvQixFQUFFQyxlQUFlLEVBQUVDLE1BQU0sRUFBRztJQUUzRCxLQUFLLENBQUVELGVBQWUsRUFBRTtNQUN0QkMsTUFBTSxFQUFFQSxNQUFNO01BQ2RDLG9CQUFvQixFQUFFO0lBQ3hCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0MscUJBQXFCLEdBQUcsSUFBSVQsZUFBZSxDQUFFLElBQUlELE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUU7TUFDckVRLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsdUJBQXdCO0lBQ3ZELENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0wsb0JBQW9CLEdBQUdBLG9CQUFvQjs7SUFFaEQ7SUFDQSxJQUFJLENBQUNNLHlCQUF5QixHQUFHSixNQUFNO0lBRXZDLElBQUksQ0FBQ0ssZ0JBQWdCLENBQUNDLElBQUksQ0FBRSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFFLElBQUssQ0FBRSxDQUFDO0VBQ3hEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VELE1BQU1BLENBQUEsRUFBRztJQUNQLE1BQU1FLE1BQU0sR0FBRyxJQUFJLENBQUNYLG9CQUFvQixDQUFFLElBQUksQ0FBQ08sZ0JBQWdCLENBQUNLLEdBQUcsQ0FBQyxDQUFFLENBQUM7SUFFdkVDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixNQUFNLENBQUNHLENBQUMsS0FBS0MsUUFBUSxJQUFJSixNQUFNLENBQUNLLENBQUMsS0FBS0QsUUFBUSxFQUFHLHdCQUF1QkosTUFBTyxFQUFFLENBQUM7SUFDcEdFLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNJLENBQUMsQ0FBQ0MsS0FBSyxDQUFFUCxNQUFNLENBQUNHLENBQUUsQ0FBQyxJQUFJLENBQUNHLENBQUMsQ0FBQ0MsS0FBSyxDQUFFUCxNQUFNLENBQUNLLENBQUUsQ0FBQyxFQUFHLG1CQUFrQkwsTUFBTyxFQUFFLENBQUM7SUFFN0YsSUFBSSxDQUFDUCxxQkFBcUIsQ0FBQ2UsR0FBRyxDQUFFLElBQUksQ0FBQ25CLG9CQUFvQixDQUFFLElBQUksQ0FBQ08sZ0JBQWdCLENBQUNLLEdBQUcsQ0FBQyxDQUFFLENBQUUsQ0FBQztFQUM1Rjs7RUFFQTtBQUNGO0FBQ0E7RUFDRVEsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSSxDQUFDaEIscUJBQXFCLENBQUNnQixPQUFPLENBQUMsQ0FBQztJQUNwQyxLQUFLLENBQUNBLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXhCLGdCQUFnQixDQUFDeUIsUUFBUSxDQUFFLHFCQUFxQixFQUFFdkIsbUJBQW9CLENBQUM7QUFDdkUsZUFBZUEsbUJBQW1CIn0=