// Copyright 2023, University of Colorado Boulder

/**
 * Logic for Center of Mass class.
 * It keeps track of the position of the Center of Mass of the system by
 * calculating the average position of all the bodies, weighted by their mass.
 *
 * @author AgustÃ­n Vallejo (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import solarSystemCommon from '../../../../solar-system-common/js/solarSystemCommon.js';
export default class CenterOfMass {
  positionProperty = new Vector2Property(Vector2.ZERO);
  velocityProperty = new Vector2Property(Vector2.ZERO);
  visibleProperty = new BooleanProperty(false);
  constructor(bodies) {
    this.bodies = bodies;
    this.update();
  }

  /**
   * Calculates the total mass and the position of the Center of Mass.
   */
  update() {
    const tempPosition = new Vector2(0, 0);
    const tempVelocity = new Vector2(0, 0);
    let totalMass = 0;

    // Total Mass must be calculated before calculating the weighted mean position and velocity
    totalMass = _.sum(this.bodies.map(body => body.massProperty.value));
    this.bodies.forEach(body => {
      assert && assert(totalMass !== 0, 'Total mass should not go to 0');
      tempPosition.add(body.positionProperty.value.times(body.massProperty.value / totalMass));
      tempVelocity.add(body.velocityProperty.value.times(body.massProperty.value / totalMass));
    });
    this.positionProperty.value = tempPosition;
    this.velocityProperty.value = tempVelocity;
  }
}
solarSystemCommon.register('CenterOfMass', CenterOfMass);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5Iiwic29sYXJTeXN0ZW1Db21tb24iLCJDZW50ZXJPZk1hc3MiLCJwb3NpdGlvblByb3BlcnR5IiwiWkVSTyIsInZlbG9jaXR5UHJvcGVydHkiLCJ2aXNpYmxlUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsImJvZGllcyIsInVwZGF0ZSIsInRlbXBQb3NpdGlvbiIsInRlbXBWZWxvY2l0eSIsInRvdGFsTWFzcyIsIl8iLCJzdW0iLCJtYXAiLCJib2R5IiwibWFzc1Byb3BlcnR5IiwidmFsdWUiLCJmb3JFYWNoIiwiYXNzZXJ0IiwiYWRkIiwidGltZXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNlbnRlck9mTWFzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTG9naWMgZm9yIENlbnRlciBvZiBNYXNzIGNsYXNzLlxyXG4gKiBJdCBrZWVwcyB0cmFjayBvZiB0aGUgcG9zaXRpb24gb2YgdGhlIENlbnRlciBvZiBNYXNzIG9mIHRoZSBzeXN0ZW0gYnlcclxuICogY2FsY3VsYXRpbmcgdGhlIGF2ZXJhZ2UgcG9zaXRpb24gb2YgYWxsIHRoZSBib2RpZXMsIHdlaWdodGVkIGJ5IHRoZWlyIG1hc3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgQWd1c3TDrW4gVmFsbGVqbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZUFycmF5IH0gZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9jcmVhdGVPYnNlcnZhYmxlQXJyYXkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCb2R5IGZyb20gJy4uLy4uLy4uLy4uL3NvbGFyLXN5c3RlbS1jb21tb24vanMvbW9kZWwvQm9keS5qcyc7XHJcbmltcG9ydCBzb2xhclN5c3RlbUNvbW1vbiBmcm9tICcuLi8uLi8uLi8uLi9zb2xhci1zeXN0ZW0tY29tbW9uL2pzL3NvbGFyU3lzdGVtQ29tbW9uLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbnRlck9mTWFzcyB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBWZWN0b3IyLlpFUk8gKTtcclxuICBwdWJsaWMgcmVhZG9ubHkgdmVsb2NpdHlQcm9wZXJ0eSA9IG5ldyBWZWN0b3IyUHJvcGVydHkoIFZlY3RvcjIuWkVSTyApO1xyXG4gIHB1YmxpYyByZWFkb25seSB2aXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHB1YmxpYyByZWFkb25seSBib2RpZXM6IE9ic2VydmFibGVBcnJheTxCb2R5PiApIHtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhdGVzIHRoZSB0b3RhbCBtYXNzIGFuZCB0aGUgcG9zaXRpb24gb2YgdGhlIENlbnRlciBvZiBNYXNzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICBjb25zdCB0ZW1wUG9zaXRpb24gPSBuZXcgVmVjdG9yMiggMCwgMCApO1xyXG4gICAgY29uc3QgdGVtcFZlbG9jaXR5ID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcclxuICAgIGxldCB0b3RhbE1hc3MgPSAwO1xyXG5cclxuICAgIC8vIFRvdGFsIE1hc3MgbXVzdCBiZSBjYWxjdWxhdGVkIGJlZm9yZSBjYWxjdWxhdGluZyB0aGUgd2VpZ2h0ZWQgbWVhbiBwb3NpdGlvbiBhbmQgdmVsb2NpdHlcclxuICAgIHRvdGFsTWFzcyA9IF8uc3VtKCB0aGlzLmJvZGllcy5tYXAoIGJvZHkgPT4gYm9keS5tYXNzUHJvcGVydHkudmFsdWUgKSApO1xyXG5cclxuICAgIHRoaXMuYm9kaWVzLmZvckVhY2goIGJvZHkgPT4ge1xyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0b3RhbE1hc3MgIT09IDAsICdUb3RhbCBtYXNzIHNob3VsZCBub3QgZ28gdG8gMCcgKTtcclxuICAgICAgdGVtcFBvc2l0aW9uLmFkZCggYm9keS5wb3NpdGlvblByb3BlcnR5LnZhbHVlLnRpbWVzKCBib2R5Lm1hc3NQcm9wZXJ0eS52YWx1ZSAvIHRvdGFsTWFzcyApICk7XHJcbiAgICAgIHRlbXBWZWxvY2l0eS5hZGQoIGJvZHkudmVsb2NpdHlQcm9wZXJ0eS52YWx1ZS50aW1lcyggYm9keS5tYXNzUHJvcGVydHkudmFsdWUgLyB0b3RhbE1hc3MgKSApO1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnZhbHVlID0gdGVtcFBvc2l0aW9uO1xyXG4gICAgdGhpcy52ZWxvY2l0eVByb3BlcnR5LnZhbHVlID0gdGVtcFZlbG9jaXR5O1xyXG4gIH1cclxufVxyXG5cclxuc29sYXJTeXN0ZW1Db21tb24ucmVnaXN0ZXIoICdDZW50ZXJPZk1hc3MnLCBDZW50ZXJPZk1hc3MgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFFcEUsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxlQUFlLE1BQU0sdUNBQXVDO0FBRW5FLE9BQU9DLGlCQUFpQixNQUFNLHlEQUF5RDtBQUV2RixlQUFlLE1BQU1DLFlBQVksQ0FBQztFQUNoQkMsZ0JBQWdCLEdBQUcsSUFBSUgsZUFBZSxDQUFFRCxPQUFPLENBQUNLLElBQUssQ0FBQztFQUN0REMsZ0JBQWdCLEdBQUcsSUFBSUwsZUFBZSxDQUFFRCxPQUFPLENBQUNLLElBQUssQ0FBQztFQUN0REUsZUFBZSxHQUFHLElBQUlSLGVBQWUsQ0FBRSxLQUFNLENBQUM7RUFFdkRTLFdBQVdBLENBQWtCQyxNQUE2QixFQUFHO0lBQUEsS0FBaENBLE1BQTZCLEdBQTdCQSxNQUE2QjtJQUMvRCxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0VBQ2Y7O0VBRUE7QUFDRjtBQUNBO0VBQ1NBLE1BQU1BLENBQUEsRUFBUztJQUNwQixNQUFNQyxZQUFZLEdBQUcsSUFBSVgsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFDeEMsTUFBTVksWUFBWSxHQUFHLElBQUlaLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0lBQ3hDLElBQUlhLFNBQVMsR0FBRyxDQUFDOztJQUVqQjtJQUNBQSxTQUFTLEdBQUdDLENBQUMsQ0FBQ0MsR0FBRyxDQUFFLElBQUksQ0FBQ04sTUFBTSxDQUFDTyxHQUFHLENBQUVDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxZQUFZLENBQUNDLEtBQU0sQ0FBRSxDQUFDO0lBRXZFLElBQUksQ0FBQ1YsTUFBTSxDQUFDVyxPQUFPLENBQUVILElBQUksSUFBSTtNQUMzQkksTUFBTSxJQUFJQSxNQUFNLENBQUVSLFNBQVMsS0FBSyxDQUFDLEVBQUUsK0JBQWdDLENBQUM7TUFDcEVGLFlBQVksQ0FBQ1csR0FBRyxDQUFFTCxJQUFJLENBQUNiLGdCQUFnQixDQUFDZSxLQUFLLENBQUNJLEtBQUssQ0FBRU4sSUFBSSxDQUFDQyxZQUFZLENBQUNDLEtBQUssR0FBR04sU0FBVSxDQUFFLENBQUM7TUFDNUZELFlBQVksQ0FBQ1UsR0FBRyxDQUFFTCxJQUFJLENBQUNYLGdCQUFnQixDQUFDYSxLQUFLLENBQUNJLEtBQUssQ0FBRU4sSUFBSSxDQUFDQyxZQUFZLENBQUNDLEtBQUssR0FBR04sU0FBVSxDQUFFLENBQUM7SUFDOUYsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDVCxnQkFBZ0IsQ0FBQ2UsS0FBSyxHQUFHUixZQUFZO0lBQzFDLElBQUksQ0FBQ0wsZ0JBQWdCLENBQUNhLEtBQUssR0FBR1AsWUFBWTtFQUM1QztBQUNGO0FBRUFWLGlCQUFpQixDQUFDc0IsUUFBUSxDQUFFLGNBQWMsRUFBRXJCLFlBQWEsQ0FBQyJ9