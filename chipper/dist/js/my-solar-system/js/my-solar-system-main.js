// Copyright 2020-2023, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author AgustÃ­n Vallejo (PhET Interactive Simulations)
 * @author Jonathan Olson (PhET Interactive Simulations)
 */

import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import Tandem from '../../tandem/js/Tandem.js';
import IntroScreen from './intro/IntroScreen.js';
import LabScreen from './lab/LabScreen.js';
import MySolarSystemStrings from './MySolarSystemStrings.js';
const simOptions = {
  credits: {
    leadDesign: 'Diana L\u00f3pez Tavares, Michael Dubson',
    softwareDevelopment: 'Agust\u00edn Vallejo, Jonathan Olson',
    team: 'Emily B. Moore, Sola Olateju, Kathy Perkins, Ariel Paul, Amy Rouinfar',
    qualityAssurance: 'Jaron Droder, Clifford Hardin, Emily Miller, Nancy Salpepi, Martin Veillette, Kathryn Woessner',
    graphicArts: '',
    soundDesign: 'Ashton Morris',
    thanks: ''
  },
  preferencesModel: new PreferencesModel({
    visualOptions: {
      supportsProjectorMode: true
    }
  })
};

// launch the sim - beware that scenery Image nodes created outside of simLauncher.launch() will have zero bounds
// until the images are fully loaded, see https://github.com/phetsims/coulombs-law/issues/70
simLauncher.launch(() => {
  const sim = new Sim(MySolarSystemStrings['my-solar-system'].titleStringProperty, [new IntroScreen(Tandem.ROOT.createTandem('introScreen')), new LabScreen(Tandem.ROOT.createTandem('labScreen'))], simOptions);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc01vZGVsIiwiU2ltIiwic2ltTGF1bmNoZXIiLCJUYW5kZW0iLCJJbnRyb1NjcmVlbiIsIkxhYlNjcmVlbiIsIk15U29sYXJTeXN0ZW1TdHJpbmdzIiwic2ltT3B0aW9ucyIsImNyZWRpdHMiLCJsZWFkRGVzaWduIiwic29mdHdhcmVEZXZlbG9wbWVudCIsInRlYW0iLCJxdWFsaXR5QXNzdXJhbmNlIiwiZ3JhcGhpY0FydHMiLCJzb3VuZERlc2lnbiIsInRoYW5rcyIsInByZWZlcmVuY2VzTW9kZWwiLCJ2aXN1YWxPcHRpb25zIiwic3VwcG9ydHNQcm9qZWN0b3JNb2RlIiwibGF1bmNoIiwic2ltIiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsIlJPT1QiLCJjcmVhdGVUYW5kZW0iLCJzdGFydCJdLCJzb3VyY2VzIjpbIm15LXNvbGFyLXN5c3RlbS1tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBzaW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgQWd1c3TDrW4gVmFsbGVqbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJlZmVyZW5jZXNNb2RlbCBmcm9tICcuLi8uLi9qb2lzdC9qcy9wcmVmZXJlbmNlcy9QcmVmZXJlbmNlc01vZGVsLmpzJztcclxuaW1wb3J0IFNpbSwgeyBTaW1PcHRpb25zIH0gZnJvbSAnLi4vLi4vam9pc3QvanMvU2ltLmpzJztcclxuaW1wb3J0IHNpbUxhdW5jaGVyIGZyb20gJy4uLy4uL2pvaXN0L2pzL3NpbUxhdW5jaGVyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEludHJvU2NyZWVuIGZyb20gJy4vaW50cm8vSW50cm9TY3JlZW4uanMnO1xyXG5pbXBvcnQgTGFiU2NyZWVuIGZyb20gJy4vbGFiL0xhYlNjcmVlbi5qcyc7XHJcbmltcG9ydCBNeVNvbGFyU3lzdGVtU3RyaW5ncyBmcm9tICcuL015U29sYXJTeXN0ZW1TdHJpbmdzLmpzJztcclxuXHJcbmNvbnN0IHNpbU9wdGlvbnM6IFNpbU9wdGlvbnMgPSB7XHJcblxyXG4gIGNyZWRpdHM6IHtcclxuICAgIGxlYWREZXNpZ246ICdEaWFuYSBMXFx1MDBmM3BleiBUYXZhcmVzLCBNaWNoYWVsIER1YnNvbicsXHJcbiAgICBzb2Z0d2FyZURldmVsb3BtZW50OiAnQWd1c3RcXHUwMGVkbiBWYWxsZWpvLCBKb25hdGhhbiBPbHNvbicsXHJcbiAgICB0ZWFtOiAnRW1pbHkgQi4gTW9vcmUsIFNvbGEgT2xhdGVqdSwgS2F0aHkgUGVya2lucywgQXJpZWwgUGF1bCwgQW15IFJvdWluZmFyJyxcclxuICAgIHF1YWxpdHlBc3N1cmFuY2U6ICdKYXJvbiBEcm9kZXIsIENsaWZmb3JkIEhhcmRpbiwgRW1pbHkgTWlsbGVyLCBOYW5jeSBTYWxwZXBpLCBNYXJ0aW4gVmVpbGxldHRlLCBLYXRocnluIFdvZXNzbmVyJyxcclxuICAgIGdyYXBoaWNBcnRzOiAnJyxcclxuICAgIHNvdW5kRGVzaWduOiAnQXNodG9uIE1vcnJpcycsXHJcbiAgICB0aGFua3M6ICcnXHJcbiAgfSxcclxuXHJcbiAgcHJlZmVyZW5jZXNNb2RlbDogbmV3IFByZWZlcmVuY2VzTW9kZWwoIHtcclxuICAgIHZpc3VhbE9wdGlvbnM6IHtcclxuICAgICAgc3VwcG9ydHNQcm9qZWN0b3JNb2RlOiB0cnVlXHJcbiAgICB9XHJcbiAgfSApXHJcbn07XHJcblxyXG4vLyBsYXVuY2ggdGhlIHNpbSAtIGJld2FyZSB0aGF0IHNjZW5lcnkgSW1hZ2Ugbm9kZXMgY3JlYXRlZCBvdXRzaWRlIG9mIHNpbUxhdW5jaGVyLmxhdW5jaCgpIHdpbGwgaGF2ZSB6ZXJvIGJvdW5kc1xyXG4vLyB1bnRpbCB0aGUgaW1hZ2VzIGFyZSBmdWxseSBsb2FkZWQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY291bG9tYnMtbGF3L2lzc3Vlcy83MFxyXG5zaW1MYXVuY2hlci5sYXVuY2goICgpID0+IHtcclxuICBjb25zdCBzaW0gPSBuZXcgU2ltKCBNeVNvbGFyU3lzdGVtU3RyaW5nc1sgJ215LXNvbGFyLXN5c3RlbScgXS50aXRsZVN0cmluZ1Byb3BlcnR5LCBbXHJcbiAgICBuZXcgSW50cm9TY3JlZW4oIFRhbmRlbS5ST09ULmNyZWF0ZVRhbmRlbSggJ2ludHJvU2NyZWVuJyApICksXHJcbiAgICBuZXcgTGFiU2NyZWVuKCBUYW5kZW0uUk9PVC5jcmVhdGVUYW5kZW0oICdsYWJTY3JlZW4nICkgKVxyXG4gIF0sIHNpbU9wdGlvbnMgKTtcclxuICBzaW0uc3RhcnQoKTtcclxufSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSxnREFBZ0Q7QUFDN0UsT0FBT0MsR0FBRyxNQUFzQix1QkFBdUI7QUFDdkQsT0FBT0MsV0FBVyxNQUFNLCtCQUErQjtBQUN2RCxPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLFdBQVcsTUFBTSx3QkFBd0I7QUFDaEQsT0FBT0MsU0FBUyxNQUFNLG9CQUFvQjtBQUMxQyxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsTUFBTUMsVUFBc0IsR0FBRztFQUU3QkMsT0FBTyxFQUFFO0lBQ1BDLFVBQVUsRUFBRSwwQ0FBMEM7SUFDdERDLG1CQUFtQixFQUFFLHNDQUFzQztJQUMzREMsSUFBSSxFQUFFLHVFQUF1RTtJQUM3RUMsZ0JBQWdCLEVBQUUsZ0dBQWdHO0lBQ2xIQyxXQUFXLEVBQUUsRUFBRTtJQUNmQyxXQUFXLEVBQUUsZUFBZTtJQUM1QkMsTUFBTSxFQUFFO0VBQ1YsQ0FBQztFQUVEQyxnQkFBZ0IsRUFBRSxJQUFJaEIsZ0JBQWdCLENBQUU7SUFDdENpQixhQUFhLEVBQUU7TUFDYkMscUJBQXFCLEVBQUU7SUFDekI7RUFDRixDQUFFO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0FoQixXQUFXLENBQUNpQixNQUFNLENBQUUsTUFBTTtFQUN4QixNQUFNQyxHQUFHLEdBQUcsSUFBSW5CLEdBQUcsQ0FBRUssb0JBQW9CLENBQUUsaUJBQWlCLENBQUUsQ0FBQ2UsbUJBQW1CLEVBQUUsQ0FDbEYsSUFBSWpCLFdBQVcsQ0FBRUQsTUFBTSxDQUFDbUIsSUFBSSxDQUFDQyxZQUFZLENBQUUsYUFBYyxDQUFFLENBQUMsRUFDNUQsSUFBSWxCLFNBQVMsQ0FBRUYsTUFBTSxDQUFDbUIsSUFBSSxDQUFDQyxZQUFZLENBQUUsV0FBWSxDQUFFLENBQUMsQ0FDekQsRUFBRWhCLFVBQVcsQ0FBQztFQUNmYSxHQUFHLENBQUNJLEtBQUssQ0FBQyxDQUFDO0FBQ2IsQ0FBRSxDQUFDIn0=