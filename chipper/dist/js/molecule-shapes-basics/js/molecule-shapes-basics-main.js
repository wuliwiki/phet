// Copyright 2014-2023, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import MoleculeShapesGlobals from '../../molecule-shapes/js/common/MoleculeShapesGlobals.js';
import SimulationPreferencesContentNode from '../../molecule-shapes/js/common/view/SimulationPreferencesContentNode.js';
import ModelMoleculesScreen from '../../molecule-shapes/js/model/ModelMoleculesScreen.js';
import RealMoleculesScreen from '../../molecule-shapes/js/real/RealMoleculesScreen.js';
import CanvasWarningNode from '../../scenery-phet/js/CanvasWarningNode.js';
import Tandem from '../../tandem/js/Tandem.js';
import MoleculeShapesBasicsStrings from './MoleculeShapesBasicsStrings.js';
const moleculeShapesBasicsTitleStringProperty = MoleculeShapesBasicsStrings['molecule-shapes-basics'].titleStringProperty;
const isBasicsVersion = true;

// Basics version has no content for "Simulation" tab, don't include an empty Node (which adds an extra separator in the
// dialog).
const simulationCustomPreferences = isBasicsVersion ? [] : [{
  // Creates content for the Simulation tab in preferences.
  createContent: tandem => new SimulationPreferencesContentNode(isBasicsVersion, tandem.createTandem('simPreferences'))
}];
const simOptions = {
  credits: {
    leadDesign: 'Emily B. Moore',
    softwareDevelopment: 'Jonathan Olson',
    team: 'Julia Chamberlain, Kelly Lancaster, Ariel Paul, Kathy Perkins, Amy Rouinfar',
    qualityAssurance: 'Steele Dalton, Jaron Droder, Bryce Griebenow, Clifford Hardin, Brooklyn Lash, Emily Miller, Elise Morgan, Liam Mulhall, Oliver Orejola, Jacob Romero, Nancy Salpepi, Kathryn Woessner, Bryan Yoelin'
  },
  // NOTE: ?webgl=false will trigger Canvas rendering with a reduced poly-count
  webgl: true,
  preferencesModel: new PreferencesModel({
    simulationOptions: {
      customPreferences: simulationCustomPreferences
    },
    visualOptions: {
      supportsProjectorMode: true
    }
  }),
  homeScreenWarningNode: MoleculeShapesGlobals.useWebGLProperty.get() ? null : new CanvasWarningNode(),
  // phet-io options
  phetioDesigned: true
};
simLauncher.launch(() => {
  const sim = new Sim(moleculeShapesBasicsTitleStringProperty, [new ModelMoleculesScreen(isBasicsVersion, Tandem.ROOT.createTandem('modelScreen')), new RealMoleculesScreen(isBasicsVersion, Tandem.ROOT.createTandem('realMoleculesScreen'))], simOptions);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc01vZGVsIiwiU2ltIiwic2ltTGF1bmNoZXIiLCJNb2xlY3VsZVNoYXBlc0dsb2JhbHMiLCJTaW11bGF0aW9uUHJlZmVyZW5jZXNDb250ZW50Tm9kZSIsIk1vZGVsTW9sZWN1bGVzU2NyZWVuIiwiUmVhbE1vbGVjdWxlc1NjcmVlbiIsIkNhbnZhc1dhcm5pbmdOb2RlIiwiVGFuZGVtIiwiTW9sZWN1bGVTaGFwZXNCYXNpY3NTdHJpbmdzIiwibW9sZWN1bGVTaGFwZXNCYXNpY3NUaXRsZVN0cmluZ1Byb3BlcnR5IiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsImlzQmFzaWNzVmVyc2lvbiIsInNpbXVsYXRpb25DdXN0b21QcmVmZXJlbmNlcyIsImNyZWF0ZUNvbnRlbnQiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJzaW1PcHRpb25zIiwiY3JlZGl0cyIsImxlYWREZXNpZ24iLCJzb2Z0d2FyZURldmVsb3BtZW50IiwidGVhbSIsInF1YWxpdHlBc3N1cmFuY2UiLCJ3ZWJnbCIsInByZWZlcmVuY2VzTW9kZWwiLCJzaW11bGF0aW9uT3B0aW9ucyIsImN1c3RvbVByZWZlcmVuY2VzIiwidmlzdWFsT3B0aW9ucyIsInN1cHBvcnRzUHJvamVjdG9yTW9kZSIsImhvbWVTY3JlZW5XYXJuaW5nTm9kZSIsInVzZVdlYkdMUHJvcGVydHkiLCJnZXQiLCJwaGV0aW9EZXNpZ25lZCIsImxhdW5jaCIsInNpbSIsIlJPT1QiLCJzdGFydCJdLCJzb3VyY2VzIjpbIm1vbGVjdWxlLXNoYXBlcy1iYXNpY3MtbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWluIGVudHJ5IHBvaW50IGZvciB0aGUgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFByZWZlcmVuY2VzTW9kZWwgZnJvbSAnLi4vLi4vam9pc3QvanMvcHJlZmVyZW5jZXMvUHJlZmVyZW5jZXNNb2RlbC5qcyc7XHJcbmltcG9ydCBTaW0gZnJvbSAnLi4vLi4vam9pc3QvanMvU2ltLmpzJztcclxuaW1wb3J0IHNpbUxhdW5jaGVyIGZyb20gJy4uLy4uL2pvaXN0L2pzL3NpbUxhdW5jaGVyLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlU2hhcGVzR2xvYmFscyBmcm9tICcuLi8uLi9tb2xlY3VsZS1zaGFwZXMvanMvY29tbW9uL01vbGVjdWxlU2hhcGVzR2xvYmFscy5qcyc7XHJcbmltcG9ydCBTaW11bGF0aW9uUHJlZmVyZW5jZXNDb250ZW50Tm9kZSBmcm9tICcuLi8uLi9tb2xlY3VsZS1zaGFwZXMvanMvY29tbW9uL3ZpZXcvU2ltdWxhdGlvblByZWZlcmVuY2VzQ29udGVudE5vZGUuanMnO1xyXG5pbXBvcnQgTW9kZWxNb2xlY3VsZXNTY3JlZW4gZnJvbSAnLi4vLi4vbW9sZWN1bGUtc2hhcGVzL2pzL21vZGVsL01vZGVsTW9sZWN1bGVzU2NyZWVuLmpzJztcclxuaW1wb3J0IFJlYWxNb2xlY3VsZXNTY3JlZW4gZnJvbSAnLi4vLi4vbW9sZWN1bGUtc2hhcGVzL2pzL3JlYWwvUmVhbE1vbGVjdWxlc1NjcmVlbi5qcyc7XHJcbmltcG9ydCBDYW52YXNXYXJuaW5nTm9kZSBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvQ2FudmFzV2FybmluZ05vZGUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgTW9sZWN1bGVTaGFwZXNCYXNpY3NTdHJpbmdzIGZyb20gJy4vTW9sZWN1bGVTaGFwZXNCYXNpY3NTdHJpbmdzLmpzJztcclxuXHJcbmNvbnN0IG1vbGVjdWxlU2hhcGVzQmFzaWNzVGl0bGVTdHJpbmdQcm9wZXJ0eSA9IE1vbGVjdWxlU2hhcGVzQmFzaWNzU3RyaW5nc1sgJ21vbGVjdWxlLXNoYXBlcy1iYXNpY3MnIF0udGl0bGVTdHJpbmdQcm9wZXJ0eTtcclxuXHJcbmNvbnN0IGlzQmFzaWNzVmVyc2lvbiA9IHRydWU7XHJcblxyXG4vLyBCYXNpY3MgdmVyc2lvbiBoYXMgbm8gY29udGVudCBmb3IgXCJTaW11bGF0aW9uXCIgdGFiLCBkb24ndCBpbmNsdWRlIGFuIGVtcHR5IE5vZGUgKHdoaWNoIGFkZHMgYW4gZXh0cmEgc2VwYXJhdG9yIGluIHRoZVxyXG4vLyBkaWFsb2cpLlxyXG5jb25zdCBzaW11bGF0aW9uQ3VzdG9tUHJlZmVyZW5jZXMgPSBpc0Jhc2ljc1ZlcnNpb24gPyBbXSA6IFtcclxuICB7XHJcblxyXG4gICAgLy8gQ3JlYXRlcyBjb250ZW50IGZvciB0aGUgU2ltdWxhdGlvbiB0YWIgaW4gcHJlZmVyZW5jZXMuXHJcbiAgICBjcmVhdGVDb250ZW50OiB0YW5kZW0gPT4gbmV3IFNpbXVsYXRpb25QcmVmZXJlbmNlc0NvbnRlbnROb2RlKCBpc0Jhc2ljc1ZlcnNpb24sIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzaW1QcmVmZXJlbmNlcycgKSApXHJcbiAgfVxyXG5dO1xyXG5cclxuY29uc3Qgc2ltT3B0aW9ucyA9IHtcclxuICBjcmVkaXRzOiB7XHJcbiAgICBsZWFkRGVzaWduOiAnRW1pbHkgQi4gTW9vcmUnLFxyXG4gICAgc29mdHdhcmVEZXZlbG9wbWVudDogJ0pvbmF0aGFuIE9sc29uJyxcclxuICAgIHRlYW06ICdKdWxpYSBDaGFtYmVybGFpbiwgS2VsbHkgTGFuY2FzdGVyLCBBcmllbCBQYXVsLCBLYXRoeSBQZXJraW5zLCBBbXkgUm91aW5mYXInLFxyXG4gICAgcXVhbGl0eUFzc3VyYW5jZTogJ1N0ZWVsZSBEYWx0b24sIEphcm9uIERyb2RlciwgQnJ5Y2UgR3JpZWJlbm93LCBDbGlmZm9yZCBIYXJkaW4sIEJyb29rbHluIExhc2gsIEVtaWx5IE1pbGxlciwgRWxpc2UgTW9yZ2FuLCBMaWFtIE11bGhhbGwsIE9saXZlciBPcmVqb2xhLCBKYWNvYiBSb21lcm8sIE5hbmN5IFNhbHBlcGksIEthdGhyeW4gV29lc3NuZXIsIEJyeWFuIFlvZWxpbidcclxuICB9LFxyXG5cclxuICAvLyBOT1RFOiA/d2ViZ2w9ZmFsc2Ugd2lsbCB0cmlnZ2VyIENhbnZhcyByZW5kZXJpbmcgd2l0aCBhIHJlZHVjZWQgcG9seS1jb3VudFxyXG4gIHdlYmdsOiB0cnVlLFxyXG5cclxuICBwcmVmZXJlbmNlc01vZGVsOiBuZXcgUHJlZmVyZW5jZXNNb2RlbCgge1xyXG4gICAgc2ltdWxhdGlvbk9wdGlvbnM6IHtcclxuICAgICAgY3VzdG9tUHJlZmVyZW5jZXM6IHNpbXVsYXRpb25DdXN0b21QcmVmZXJlbmNlc1xyXG4gICAgfSxcclxuICAgIHZpc3VhbE9wdGlvbnM6IHtcclxuICAgICAgc3VwcG9ydHNQcm9qZWN0b3JNb2RlOiB0cnVlXHJcbiAgICB9XHJcbiAgfSApLFxyXG5cclxuICBob21lU2NyZWVuV2FybmluZ05vZGU6IE1vbGVjdWxlU2hhcGVzR2xvYmFscy51c2VXZWJHTFByb3BlcnR5LmdldCgpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENhbnZhc1dhcm5pbmdOb2RlKCksXHJcblxyXG4gIC8vIHBoZXQtaW8gb3B0aW9uc1xyXG4gIHBoZXRpb0Rlc2lnbmVkOiB0cnVlXHJcbn07XHJcblxyXG5zaW1MYXVuY2hlci5sYXVuY2goICgpID0+IHtcclxuICBjb25zdCBzaW0gPSBuZXcgU2ltKCBtb2xlY3VsZVNoYXBlc0Jhc2ljc1RpdGxlU3RyaW5nUHJvcGVydHksIFtcclxuICAgIG5ldyBNb2RlbE1vbGVjdWxlc1NjcmVlbiggaXNCYXNpY3NWZXJzaW9uLCBUYW5kZW0uUk9PVC5jcmVhdGVUYW5kZW0oICdtb2RlbFNjcmVlbicgKSApLFxyXG4gICAgbmV3IFJlYWxNb2xlY3VsZXNTY3JlZW4oIGlzQmFzaWNzVmVyc2lvbiwgVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAncmVhbE1vbGVjdWxlc1NjcmVlbicgKSApXHJcbiAgXSwgc2ltT3B0aW9ucyApO1xyXG4gIHNpbS5zdGFydCgpO1xyXG59ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSxnREFBZ0Q7QUFDN0UsT0FBT0MsR0FBRyxNQUFNLHVCQUF1QjtBQUN2QyxPQUFPQyxXQUFXLE1BQU0sK0JBQStCO0FBQ3ZELE9BQU9DLHFCQUFxQixNQUFNLDBEQUEwRDtBQUM1RixPQUFPQyxnQ0FBZ0MsTUFBTSwwRUFBMEU7QUFDdkgsT0FBT0Msb0JBQW9CLE1BQU0sd0RBQXdEO0FBQ3pGLE9BQU9DLG1CQUFtQixNQUFNLHNEQUFzRDtBQUN0RixPQUFPQyxpQkFBaUIsTUFBTSw0Q0FBNEM7QUFDMUUsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUM5QyxPQUFPQywyQkFBMkIsTUFBTSxrQ0FBa0M7QUFFMUUsTUFBTUMsdUNBQXVDLEdBQUdELDJCQUEyQixDQUFFLHdCQUF3QixDQUFFLENBQUNFLG1CQUFtQjtBQUUzSCxNQUFNQyxlQUFlLEdBQUcsSUFBSTs7QUFFNUI7QUFDQTtBQUNBLE1BQU1DLDJCQUEyQixHQUFHRCxlQUFlLEdBQUcsRUFBRSxHQUFHLENBQ3pEO0VBRUU7RUFDQUUsYUFBYSxFQUFFQyxNQUFNLElBQUksSUFBSVgsZ0NBQWdDLENBQUVRLGVBQWUsRUFBRUcsTUFBTSxDQUFDQyxZQUFZLENBQUUsZ0JBQWlCLENBQUU7QUFDMUgsQ0FBQyxDQUNGO0FBRUQsTUFBTUMsVUFBVSxHQUFHO0VBQ2pCQyxPQUFPLEVBQUU7SUFDUEMsVUFBVSxFQUFFLGdCQUFnQjtJQUM1QkMsbUJBQW1CLEVBQUUsZ0JBQWdCO0lBQ3JDQyxJQUFJLEVBQUUsNkVBQTZFO0lBQ25GQyxnQkFBZ0IsRUFBRTtFQUNwQixDQUFDO0VBRUQ7RUFDQUMsS0FBSyxFQUFFLElBQUk7RUFFWEMsZ0JBQWdCLEVBQUUsSUFBSXhCLGdCQUFnQixDQUFFO0lBQ3RDeUIsaUJBQWlCLEVBQUU7TUFDakJDLGlCQUFpQixFQUFFYjtJQUNyQixDQUFDO0lBQ0RjLGFBQWEsRUFBRTtNQUNiQyxxQkFBcUIsRUFBRTtJQUN6QjtFQUNGLENBQUUsQ0FBQztFQUVIQyxxQkFBcUIsRUFBRTFCLHFCQUFxQixDQUFDMkIsZ0JBQWdCLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQzVDLElBQUksR0FDSixJQUFJeEIsaUJBQWlCLENBQUMsQ0FBQztFQUU5QztFQUNBeUIsY0FBYyxFQUFFO0FBQ2xCLENBQUM7QUFFRDlCLFdBQVcsQ0FBQytCLE1BQU0sQ0FBRSxNQUFNO0VBQ3hCLE1BQU1DLEdBQUcsR0FBRyxJQUFJakMsR0FBRyxDQUFFUyx1Q0FBdUMsRUFBRSxDQUM1RCxJQUFJTCxvQkFBb0IsQ0FBRU8sZUFBZSxFQUFFSixNQUFNLENBQUMyQixJQUFJLENBQUNuQixZQUFZLENBQUUsYUFBYyxDQUFFLENBQUMsRUFDdEYsSUFBSVYsbUJBQW1CLENBQUVNLGVBQWUsRUFBRUosTUFBTSxDQUFDMkIsSUFBSSxDQUFDbkIsWUFBWSxDQUFFLHFCQUFzQixDQUFFLENBQUMsQ0FDOUYsRUFBRUMsVUFBVyxDQUFDO0VBQ2ZpQixHQUFHLENBQUNFLEtBQUssQ0FBQyxDQUFDO0FBQ2IsQ0FBRSxDQUFDIn0=