// Copyright 2014-2022, University of Colorado Boulder

/**
 * Model for the 'Model' screen.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector3 from '../../../dot/js/Vector3.js';
import MoleculeShapesModel from '../common/model/MoleculeShapesModel.js';
import PairGroup from '../common/model/PairGroup.js';
import VSEPRMolecule from '../common/model/VSEPRMolecule.js';
import moleculeShapes from '../moleculeShapes.js';
class ModelMoleculesModel extends MoleculeShapesModel {
  /**
   * @param {boolean} isBasicsVersion - Whether this is the Basics sim or not
   * @param {Tandem} tandem
   */
  constructor(isBasicsVersion, tandem) {
    const initialMolecule = new VSEPRMolecule();
    super(isBasicsVersion, {
      initialMolecule: initialMolecule
    }, tandem);
    this.moleculeProperty.value.addCentralAtom(new PairGroup(new Vector3(0, 0, 0), false));
    this.setupInitialMoleculeState();
  }

  /**
   * @private
   */
  setupInitialMoleculeState() {
    // start with two single bonds
    const centralAtom = this.moleculeProperty.value.centralAtom;
    this.moleculeProperty.value.addGroupAndBond(new PairGroup(new Vector3(8, 0, 3).setMagnitude(PairGroup.BONDED_PAIR_DISTANCE), false), centralAtom, 1);
    this.moleculeProperty.value.addGroupAndBond(new PairGroup(new Vector3(2, 8, -5).setMagnitude(PairGroup.BONDED_PAIR_DISTANCE), false), centralAtom, 1);
  }

  /**
   * Resets values to their original state
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.moleculeProperty.value.removeAllGroups();
    this.setupInitialMoleculeState();
  }
}
moleculeShapes.register('ModelMoleculesModel', ModelMoleculesModel);
export default ModelMoleculesModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IzIiwiTW9sZWN1bGVTaGFwZXNNb2RlbCIsIlBhaXJHcm91cCIsIlZTRVBSTW9sZWN1bGUiLCJtb2xlY3VsZVNoYXBlcyIsIk1vZGVsTW9sZWN1bGVzTW9kZWwiLCJjb25zdHJ1Y3RvciIsImlzQmFzaWNzVmVyc2lvbiIsInRhbmRlbSIsImluaXRpYWxNb2xlY3VsZSIsIm1vbGVjdWxlUHJvcGVydHkiLCJ2YWx1ZSIsImFkZENlbnRyYWxBdG9tIiwic2V0dXBJbml0aWFsTW9sZWN1bGVTdGF0ZSIsImNlbnRyYWxBdG9tIiwiYWRkR3JvdXBBbmRCb25kIiwic2V0TWFnbml0dWRlIiwiQk9OREVEX1BBSVJfRElTVEFOQ0UiLCJyZXNldCIsInJlbW92ZUFsbEdyb3VwcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTW9kZWxNb2xlY3VsZXNNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlICdNb2RlbCcgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjMgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGVTaGFwZXNNb2RlbCBmcm9tICcuLi9jb21tb24vbW9kZWwvTW9sZWN1bGVTaGFwZXNNb2RlbC5qcyc7XHJcbmltcG9ydCBQYWlyR3JvdXAgZnJvbSAnLi4vY29tbW9uL21vZGVsL1BhaXJHcm91cC5qcyc7XHJcbmltcG9ydCBWU0VQUk1vbGVjdWxlIGZyb20gJy4uL2NvbW1vbi9tb2RlbC9WU0VQUk1vbGVjdWxlLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlU2hhcGVzIGZyb20gJy4uL21vbGVjdWxlU2hhcGVzLmpzJztcclxuXHJcbmNsYXNzIE1vZGVsTW9sZWN1bGVzTW9kZWwgZXh0ZW5kcyBNb2xlY3VsZVNoYXBlc01vZGVsIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzQmFzaWNzVmVyc2lvbiAtIFdoZXRoZXIgdGhpcyBpcyB0aGUgQmFzaWNzIHNpbSBvciBub3RcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGlzQmFzaWNzVmVyc2lvbiwgdGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IGluaXRpYWxNb2xlY3VsZSA9IG5ldyBWU0VQUk1vbGVjdWxlKCk7XHJcblxyXG4gICAgc3VwZXIoIGlzQmFzaWNzVmVyc2lvbiwge1xyXG4gICAgICBpbml0aWFsTW9sZWN1bGU6IGluaXRpYWxNb2xlY3VsZVxyXG4gICAgfSwgdGFuZGVtICk7XHJcblxyXG4gICAgdGhpcy5tb2xlY3VsZVByb3BlcnR5LnZhbHVlLmFkZENlbnRyYWxBdG9tKCBuZXcgUGFpckdyb3VwKCBuZXcgVmVjdG9yMyggMCwgMCwgMCApLCBmYWxzZSApICk7XHJcbiAgICB0aGlzLnNldHVwSW5pdGlhbE1vbGVjdWxlU3RhdGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgc2V0dXBJbml0aWFsTW9sZWN1bGVTdGF0ZSgpIHtcclxuICAgIC8vIHN0YXJ0IHdpdGggdHdvIHNpbmdsZSBib25kc1xyXG4gICAgY29uc3QgY2VudHJhbEF0b20gPSB0aGlzLm1vbGVjdWxlUHJvcGVydHkudmFsdWUuY2VudHJhbEF0b207XHJcbiAgICB0aGlzLm1vbGVjdWxlUHJvcGVydHkudmFsdWUuYWRkR3JvdXBBbmRCb25kKCBuZXcgUGFpckdyb3VwKCBuZXcgVmVjdG9yMyggOCwgMCwgMyApLnNldE1hZ25pdHVkZSggUGFpckdyb3VwLkJPTkRFRF9QQUlSX0RJU1RBTkNFICksIGZhbHNlICksIGNlbnRyYWxBdG9tLCAxICk7XHJcbiAgICB0aGlzLm1vbGVjdWxlUHJvcGVydHkudmFsdWUuYWRkR3JvdXBBbmRCb25kKCBuZXcgUGFpckdyb3VwKCBuZXcgVmVjdG9yMyggMiwgOCwgLTUgKS5zZXRNYWduaXR1ZGUoIFBhaXJHcm91cC5CT05ERURfUEFJUl9ESVNUQU5DRSApLCBmYWxzZSApLCBjZW50cmFsQXRvbSwgMSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHZhbHVlcyB0byB0aGVpciBvcmlnaW5hbCBzdGF0ZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcblxyXG4gICAgdGhpcy5tb2xlY3VsZVByb3BlcnR5LnZhbHVlLnJlbW92ZUFsbEdyb3VwcygpO1xyXG4gICAgdGhpcy5zZXR1cEluaXRpYWxNb2xlY3VsZVN0YXRlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2xlY3VsZVNoYXBlcy5yZWdpc3RlciggJ01vZGVsTW9sZWN1bGVzTW9kZWwnLCBNb2RlbE1vbGVjdWxlc01vZGVsICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNb2RlbE1vbGVjdWxlc01vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLG1CQUFtQixNQUFNLHdDQUF3QztBQUN4RSxPQUFPQyxTQUFTLE1BQU0sOEJBQThCO0FBQ3BELE9BQU9DLGFBQWEsTUFBTSxrQ0FBa0M7QUFDNUQsT0FBT0MsY0FBYyxNQUFNLHNCQUFzQjtBQUVqRCxNQUFNQyxtQkFBbUIsU0FBU0osbUJBQW1CLENBQUM7RUFDcEQ7QUFDRjtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxNQUFNLEVBQUc7SUFFckMsTUFBTUMsZUFBZSxHQUFHLElBQUlOLGFBQWEsQ0FBQyxDQUFDO0lBRTNDLEtBQUssQ0FBRUksZUFBZSxFQUFFO01BQ3RCRSxlQUFlLEVBQUVBO0lBQ25CLENBQUMsRUFBRUQsTUFBTyxDQUFDO0lBRVgsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDQyxjQUFjLENBQUUsSUFBSVYsU0FBUyxDQUFFLElBQUlGLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFLEtBQU0sQ0FBRSxDQUFDO0lBQzVGLElBQUksQ0FBQ2EseUJBQXlCLENBQUMsQ0FBQztFQUNsQzs7RUFFQTtBQUNGO0FBQ0E7RUFDRUEseUJBQXlCQSxDQUFBLEVBQUc7SUFDMUI7SUFDQSxNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFDSixnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDRyxXQUFXO0lBQzNELElBQUksQ0FBQ0osZ0JBQWdCLENBQUNDLEtBQUssQ0FBQ0ksZUFBZSxDQUFFLElBQUliLFNBQVMsQ0FBRSxJQUFJRixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQ2dCLFlBQVksQ0FBRWQsU0FBUyxDQUFDZSxvQkFBcUIsQ0FBQyxFQUFFLEtBQU0sQ0FBQyxFQUFFSCxXQUFXLEVBQUUsQ0FBRSxDQUFDO0lBQzVKLElBQUksQ0FBQ0osZ0JBQWdCLENBQUNDLEtBQUssQ0FBQ0ksZUFBZSxDQUFFLElBQUliLFNBQVMsQ0FBRSxJQUFJRixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQyxDQUFDZ0IsWUFBWSxDQUFFZCxTQUFTLENBQUNlLG9CQUFxQixDQUFDLEVBQUUsS0FBTSxDQUFDLEVBQUVILFdBQVcsRUFBRSxDQUFFLENBQUM7RUFDL0o7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxLQUFLQSxDQUFBLEVBQUc7SUFDTixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBRWIsSUFBSSxDQUFDUixnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDUSxlQUFlLENBQUMsQ0FBQztJQUM3QyxJQUFJLENBQUNOLHlCQUF5QixDQUFDLENBQUM7RUFDbEM7QUFDRjtBQUVBVCxjQUFjLENBQUNnQixRQUFRLENBQUUscUJBQXFCLEVBQUVmLG1CQUFvQixDQUFDO0FBRXJFLGVBQWVBLG1CQUFtQiJ9