// Copyright 2014-2023, University of Colorado Boulder

/**
 * Options (lone pair and bond angle toggles) that are shown within a panel
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import VerticalCheckboxGroup from '../../../../sun/js/VerticalCheckboxGroup.js';
import moleculeShapes from '../../moleculeShapes.js';
import MoleculeShapesStrings from '../../MoleculeShapesStrings.js';
import MoleculeShapesGlobals from '../MoleculeShapesGlobals.js';
import MoleculeShapesColors from './MoleculeShapesColors.js';
const optionsFont = new PhetFont(14);
class OptionsNode extends VerticalCheckboxGroup {
  /**
   * @param {MoleculeShapesModel} model
   * @param {Tandem} tandem
   * @param {Object} [providedOptions]
   */
  constructor(model, tandem, providedOptions) {
    const options = optionize()({
      // eslint-disable-line bad-text
      touchAreaXDilation: 10,
      tandem: tandem
    }, providedOptions);
    super([...(model.isBasicsVersion ? [] : [{
      property: model.showLonePairsProperty,
      createNode: tandem => new Text(MoleculeShapesStrings.control.showLonePairsStringProperty, {
        font: optionsFont,
        fill: MoleculeShapesColors.controlPanelTextProperty,
        tandem: tandem.createTandem('labelText'),
        maxWidth: 280
      }),
      tandemName: 'showLonePairsCheckbox',
      options: combineOptions({}, MoleculeShapesGlobals.checkboxOptions)
    }]), {
      property: model.showBondAnglesProperty,
      createNode: tandem => new Text(MoleculeShapesStrings.control.showBondAnglesStringProperty, {
        font: optionsFont,
        fill: MoleculeShapesColors.controlPanelTextProperty,
        tandem: tandem.createTandem('labelText'),
        maxWidth: 280
      }),
      tandemName: 'showBondAnglesCheckbox',
      options: MoleculeShapesGlobals.checkboxOptions
    }], options);
  }
}
moleculeShapes.register('OptionsNode', OptionsNode);
export default OptionsNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIlBoZXRGb250IiwiVGV4dCIsIlZlcnRpY2FsQ2hlY2tib3hHcm91cCIsIm1vbGVjdWxlU2hhcGVzIiwiTW9sZWN1bGVTaGFwZXNTdHJpbmdzIiwiTW9sZWN1bGVTaGFwZXNHbG9iYWxzIiwiTW9sZWN1bGVTaGFwZXNDb2xvcnMiLCJvcHRpb25zRm9udCIsIk9wdGlvbnNOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRhbmRlbSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ0b3VjaEFyZWFYRGlsYXRpb24iLCJpc0Jhc2ljc1ZlcnNpb24iLCJwcm9wZXJ0eSIsInNob3dMb25lUGFpcnNQcm9wZXJ0eSIsImNyZWF0ZU5vZGUiLCJjb250cm9sIiwic2hvd0xvbmVQYWlyc1N0cmluZ1Byb3BlcnR5IiwiZm9udCIsImZpbGwiLCJjb250cm9sUGFuZWxUZXh0UHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJtYXhXaWR0aCIsInRhbmRlbU5hbWUiLCJjaGVja2JveE9wdGlvbnMiLCJzaG93Qm9uZEFuZ2xlc1Byb3BlcnR5Iiwic2hvd0JvbmRBbmdsZXNTdHJpbmdQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiT3B0aW9uc05vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT3B0aW9ucyAobG9uZSBwYWlyIGFuZCBib25kIGFuZ2xlIHRvZ2dsZXMpIHRoYXQgYXJlIHNob3duIHdpdGhpbiBhIHBhbmVsXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFZlcnRpY2FsQ2hlY2tib3hHcm91cCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvVmVydGljYWxDaGVja2JveEdyb3VwLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlU2hhcGVzIGZyb20gJy4uLy4uL21vbGVjdWxlU2hhcGVzLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlU2hhcGVzU3RyaW5ncyBmcm9tICcuLi8uLi9Nb2xlY3VsZVNoYXBlc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGVTaGFwZXNHbG9iYWxzIGZyb20gJy4uL01vbGVjdWxlU2hhcGVzR2xvYmFscy5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZVNoYXBlc0NvbG9ycyBmcm9tICcuL01vbGVjdWxlU2hhcGVzQ29sb3JzLmpzJztcclxuXHJcbmNvbnN0IG9wdGlvbnNGb250ID0gbmV3IFBoZXRGb250KCAxNCApO1xyXG5cclxuY2xhc3MgT3B0aW9uc05vZGUgZXh0ZW5kcyBWZXJ0aWNhbENoZWNrYm94R3JvdXAge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TW9sZWN1bGVTaGFwZXNNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCB0YW5kZW0sIHByb3ZpZGVkT3B0aW9ucyApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemUoKSggeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhZC10ZXh0XHJcbiAgICAgIHRvdWNoQXJlYVhEaWxhdGlvbjogMTAsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggW1xyXG4gICAgICAuLi4oIG1vZGVsLmlzQmFzaWNzVmVyc2lvbiA/IFtdIDogWyB7XHJcbiAgICAgICAgcHJvcGVydHk6IG1vZGVsLnNob3dMb25lUGFpcnNQcm9wZXJ0eSxcclxuICAgICAgICBjcmVhdGVOb2RlOiB0YW5kZW0gPT4gbmV3IFRleHQoIE1vbGVjdWxlU2hhcGVzU3RyaW5ncy5jb250cm9sLnNob3dMb25lUGFpcnNTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgZm9udDogb3B0aW9uc0ZvbnQsXHJcbiAgICAgICAgICBmaWxsOiBNb2xlY3VsZVNoYXBlc0NvbG9ycy5jb250cm9sUGFuZWxUZXh0UHJvcGVydHksXHJcbiAgICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnICksXHJcbiAgICAgICAgICBtYXhXaWR0aDogMjgwXHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIHRhbmRlbU5hbWU6ICdzaG93TG9uZVBhaXJzQ2hlY2tib3gnLFxyXG4gICAgICAgIG9wdGlvbnM6IGNvbWJpbmVPcHRpb25zKCB7fSwgTW9sZWN1bGVTaGFwZXNHbG9iYWxzLmNoZWNrYm94T3B0aW9ucyApXHJcbiAgICAgIH0gXSApLFxyXG4gICAgICB7XHJcbiAgICAgICAgcHJvcGVydHk6IG1vZGVsLnNob3dCb25kQW5nbGVzUHJvcGVydHksXHJcbiAgICAgICAgY3JlYXRlTm9kZTogdGFuZGVtID0+IG5ldyBUZXh0KCBNb2xlY3VsZVNoYXBlc1N0cmluZ3MuY29udHJvbC5zaG93Qm9uZEFuZ2xlc1N0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgICBmb250OiBvcHRpb25zRm9udCxcclxuICAgICAgICAgIGZpbGw6IE1vbGVjdWxlU2hhcGVzQ29sb3JzLmNvbnRyb2xQYW5lbFRleHRQcm9wZXJ0eSxcclxuICAgICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsVGV4dCcgKSxcclxuICAgICAgICAgIG1heFdpZHRoOiAyODBcclxuICAgICAgICB9ICksXHJcbiAgICAgICAgdGFuZGVtTmFtZTogJ3Nob3dCb25kQW5nbGVzQ2hlY2tib3gnLFxyXG4gICAgICAgIG9wdGlvbnM6IE1vbGVjdWxlU2hhcGVzR2xvYmFscy5jaGVja2JveE9wdGlvbnNcclxuICAgICAgfVxyXG4gICAgXSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubW9sZWN1bGVTaGFwZXMucmVnaXN0ZXIoICdPcHRpb25zTm9kZScsIE9wdGlvbnNOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IE9wdGlvbnNOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLElBQUlDLGNBQWMsUUFBUSx1Q0FBdUM7QUFDakYsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLHFCQUFxQixNQUFNLDZDQUE2QztBQUMvRSxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyxxQkFBcUIsTUFBTSw2QkFBNkI7QUFDL0QsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBRTVELE1BQU1DLFdBQVcsR0FBRyxJQUFJUCxRQUFRLENBQUUsRUFBRyxDQUFDO0FBRXRDLE1BQU1RLFdBQVcsU0FBU04scUJBQXFCLENBQUM7RUFDOUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsZUFBZSxFQUFHO0lBQzVDLE1BQU1DLE9BQU8sR0FBR2YsU0FBUyxDQUFDLENBQUMsQ0FBRTtNQUFFO01BQzdCZ0Isa0JBQWtCLEVBQUUsRUFBRTtNQUN0QkgsTUFBTSxFQUFFQTtJQUNWLENBQUMsRUFBRUMsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUUsQ0FDTCxJQUFLRixLQUFLLENBQUNLLGVBQWUsR0FBRyxFQUFFLEdBQUcsQ0FBRTtNQUNsQ0MsUUFBUSxFQUFFTixLQUFLLENBQUNPLHFCQUFxQjtNQUNyQ0MsVUFBVSxFQUFFUCxNQUFNLElBQUksSUFBSVYsSUFBSSxDQUFFRyxxQkFBcUIsQ0FBQ2UsT0FBTyxDQUFDQywyQkFBMkIsRUFBRTtRQUN6RkMsSUFBSSxFQUFFZCxXQUFXO1FBQ2pCZSxJQUFJLEVBQUVoQixvQkFBb0IsQ0FBQ2lCLHdCQUF3QjtRQUNuRFosTUFBTSxFQUFFQSxNQUFNLENBQUNhLFlBQVksQ0FBRSxXQUFZLENBQUM7UUFDMUNDLFFBQVEsRUFBRTtNQUNaLENBQUUsQ0FBQztNQUNIQyxVQUFVLEVBQUUsdUJBQXVCO01BQ25DYixPQUFPLEVBQUVkLGNBQWMsQ0FBRSxDQUFDLENBQUMsRUFBRU0scUJBQXFCLENBQUNzQixlQUFnQjtJQUNyRSxDQUFDLENBQUUsQ0FBRSxFQUNMO01BQ0VYLFFBQVEsRUFBRU4sS0FBSyxDQUFDa0Isc0JBQXNCO01BQ3RDVixVQUFVLEVBQUVQLE1BQU0sSUFBSSxJQUFJVixJQUFJLENBQUVHLHFCQUFxQixDQUFDZSxPQUFPLENBQUNVLDRCQUE0QixFQUFFO1FBQzFGUixJQUFJLEVBQUVkLFdBQVc7UUFDakJlLElBQUksRUFBRWhCLG9CQUFvQixDQUFDaUIsd0JBQXdCO1FBQ25EWixNQUFNLEVBQUVBLE1BQU0sQ0FBQ2EsWUFBWSxDQUFFLFdBQVksQ0FBQztRQUMxQ0MsUUFBUSxFQUFFO01BQ1osQ0FBRSxDQUFDO01BQ0hDLFVBQVUsRUFBRSx3QkFBd0I7TUFDcENiLE9BQU8sRUFBRVIscUJBQXFCLENBQUNzQjtJQUNqQyxDQUFDLENBQ0YsRUFBRWQsT0FBUSxDQUFDO0VBQ2Q7QUFDRjtBQUVBVixjQUFjLENBQUMyQixRQUFRLENBQUUsYUFBYSxFQUFFdEIsV0FBWSxDQUFDO0FBQ3JELGVBQWVBLFdBQVcifQ==