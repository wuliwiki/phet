// Copyright 2014-2023, University of Colorado Boulder

/**
 * A Panel, but with an added {Node} title centered along the position of the top border. Additionally, the border
 * behind the title is hidden.
 *
 * NOTE: TitledPanel requires that its background color is the same as the background color BEHIND the panel, since it
 * is intended that there is no line in-between the two near where the title is. We use a rectangle with this background
 * color to hide the border, so that it blends well into the content around it.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import merge from '../../../../phet-core/js/merge.js';
import { Node, Rectangle, Sizable, WidthSizable } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import Multilink from '../../../../axon/js/Multilink.js';
import moleculeShapes from '../../moleculeShapes.js';

// TODO: Best sometime to actually have us extend panel sometime perhaps? Or have panelOptions?
class TitledPanel extends Sizable(Node) {
  constructor(titleNode, contentNode, options) {
    super({
      excludeInvisibleChildrenFromBounds: true
    });

    // We'll create a resizable content node for the Panel, since we want to include the titleNode's size within
    // our minimum width.
    // TODO: Before moving to common code, get this to support Sizable.
    const contentContainer = new (WidthSizable(Node))({
      children: [contentNode],
      // If our content is invisible, the actual Panel's content will be invisible, so it can collapse normally.
      visibleProperty: contentNode.visibleProperty
    });

    // Forward preferred sizes from the container to the actual content node
    contentContainer.localPreferredWidthProperty.link(width => {
      if (contentNode.widthSizable) {
        contentNode.preferredWidth = width;
      }
    });

    // Forward minimum sizes from the content (and title) to the container
    Multilink.multilink([
    // TODO: Support non-sizable content nodes if moving to common code.
    contentNode.minimumWidthProperty, titleNode.boundsProperty], (contentWidth, titleBounds) => {
      contentContainer.localMinimumWidth = Math.max(contentWidth, titleBounds.width + 2 * options.yMargin);
    });
    options = merge({}, Panel.DEFAULT_PANEL_OPTIONS, options);
    this.titleNode = titleNode; // @private {Node}
    this.titleBackgroundNode = new Rectangle(0, 0, 5, 5, 0, 0, {
      fill: options.fill,
      visibleProperty: titleNode.visibleProperty,
      pickable: false
    }); // @private {Rectangle}

    // @private {Node}
    this.panel = new Panel(contentContainer, {
      lineWidth: options.lineWidth,
      xMargin: options.xMargin,
      yMargin: options.yMargin,
      cornerRadius: options.cornerRadius,
      resize: options.resize,
      backgroundPickable: options.backgroundPickable,
      align: options.align
    });
    this.setStroke(options.stroke);
    this.setFill(options.fill);

    // @private {Node}
    this.titleContainer = new Node();
    Multilink.multilink([this.panel.boundsProperty, contentNode.visibleProperty, contentNode.boundsProperty], (panelBounds, contentVisible, contentBounds) => {
      const isValid = panelBounds.isFinite() && contentBounds.isFinite() && contentVisible;
      this.titleContainer.children = isValid ? [this.titleBackgroundNode, this.titleNode] : [];
    });
    this.addChild(this.panel);
    this.addChild(this.titleContainer);
    contentContainer.boundsProperty.lazyLink(this.updateTitlePosition.bind(this));
    contentNode.boundsProperty.lazyLink(this.updateTitlePosition.bind(this));
    this.panel.boundsProperty.lazyLink(this.updateTitlePosition.bind(this));
    titleNode.localBoundsProperty.lazyLink(this.updateTitlePosition.bind(this));
    this.updateTitlePosition();

    // Forward the panel's minimums to ours
    this.panel.minimumWidthProperty.link(minimumWidth => {
      this.localMinimumWidth = minimumWidth;
    });
    this.panel.minimumHeightProperty.link(minimumHeight => {
      this.localMinimumHeight = minimumHeight;
    });

    // Forward our preferred size to the panel
    this.localPreferredWidthProperty.link(preferredWidth => {
      this.panel.preferredWidth = preferredWidth;
    });
    this.localPreferredHeightProperty.link(preferredHeight => {
      this.panel.preferredHeight = preferredHeight;
    });
    this.mutate(options);
  }

  /**
   * @private
   */
  updateTitlePosition() {
    const hasContents = this.panel.bounds.isFinite();
    if (hasContents) {
      this.titleNode.centerX = this.panel.centerX;
      this.titleNode.centerY = this.panel.top;
      this.titleBackgroundNode.setRectBounds(this.titleNode.bounds.dilatedX(10));
    }
  }

  /**
   * @public
   *
   * @returns {PaintDef}
   */
  getStroke() {
    return this.panel.stroke;
  }
  get stroke() {
    return this.getStroke();
  }

  /**
   * @public
   *
   * @param {PaintDef} stroke
   */
  setStroke(stroke) {
    this.panel.stroke = stroke;
  }
  set stroke(value) {
    this.setStroke(value);
  }

  /**
   * @public
   *
   * @returns {PaintDef}
   */
  getFill() {
    return this.panel.fill;
  }
  get fill() {
    return this.getFill();
  }

  /**
   * @public
   *
   * @param {PaintDef} stroke
   */
  setFill(fill) {
    this.panel.fill = fill;
    this.titleBackgroundNode.fill = fill;
  }
  set fill(value) {
    this.setFill(value);
  }
}
moleculeShapes.register('TitledPanel', TitledPanel);
export default TitledPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJSZWN0YW5nbGUiLCJTaXphYmxlIiwiV2lkdGhTaXphYmxlIiwiUGFuZWwiLCJNdWx0aWxpbmsiLCJtb2xlY3VsZVNoYXBlcyIsIlRpdGxlZFBhbmVsIiwiY29uc3RydWN0b3IiLCJ0aXRsZU5vZGUiLCJjb250ZW50Tm9kZSIsIm9wdGlvbnMiLCJleGNsdWRlSW52aXNpYmxlQ2hpbGRyZW5Gcm9tQm91bmRzIiwiY29udGVudENvbnRhaW5lciIsImNoaWxkcmVuIiwidmlzaWJsZVByb3BlcnR5IiwibG9jYWxQcmVmZXJyZWRXaWR0aFByb3BlcnR5IiwibGluayIsIndpZHRoIiwid2lkdGhTaXphYmxlIiwicHJlZmVycmVkV2lkdGgiLCJtdWx0aWxpbmsiLCJtaW5pbXVtV2lkdGhQcm9wZXJ0eSIsImJvdW5kc1Byb3BlcnR5IiwiY29udGVudFdpZHRoIiwidGl0bGVCb3VuZHMiLCJsb2NhbE1pbmltdW1XaWR0aCIsIk1hdGgiLCJtYXgiLCJ5TWFyZ2luIiwiREVGQVVMVF9QQU5FTF9PUFRJT05TIiwidGl0bGVCYWNrZ3JvdW5kTm9kZSIsImZpbGwiLCJwaWNrYWJsZSIsInBhbmVsIiwibGluZVdpZHRoIiwieE1hcmdpbiIsImNvcm5lclJhZGl1cyIsInJlc2l6ZSIsImJhY2tncm91bmRQaWNrYWJsZSIsImFsaWduIiwic2V0U3Ryb2tlIiwic3Ryb2tlIiwic2V0RmlsbCIsInRpdGxlQ29udGFpbmVyIiwicGFuZWxCb3VuZHMiLCJjb250ZW50VmlzaWJsZSIsImNvbnRlbnRCb3VuZHMiLCJpc1ZhbGlkIiwiaXNGaW5pdGUiLCJhZGRDaGlsZCIsImxhenlMaW5rIiwidXBkYXRlVGl0bGVQb3NpdGlvbiIsImJpbmQiLCJsb2NhbEJvdW5kc1Byb3BlcnR5IiwibWluaW11bVdpZHRoIiwibWluaW11bUhlaWdodFByb3BlcnR5IiwibWluaW11bUhlaWdodCIsImxvY2FsTWluaW11bUhlaWdodCIsImxvY2FsUHJlZmVycmVkSGVpZ2h0UHJvcGVydHkiLCJwcmVmZXJyZWRIZWlnaHQiLCJtdXRhdGUiLCJoYXNDb250ZW50cyIsImJvdW5kcyIsImNlbnRlclgiLCJjZW50ZXJZIiwidG9wIiwic2V0UmVjdEJvdW5kcyIsImRpbGF0ZWRYIiwiZ2V0U3Ryb2tlIiwidmFsdWUiLCJnZXRGaWxsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUaXRsZWRQYW5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIFBhbmVsLCBidXQgd2l0aCBhbiBhZGRlZCB7Tm9kZX0gdGl0bGUgY2VudGVyZWQgYWxvbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSB0b3AgYm9yZGVyLiBBZGRpdGlvbmFsbHksIHRoZSBib3JkZXJcclxuICogYmVoaW5kIHRoZSB0aXRsZSBpcyBoaWRkZW4uXHJcbiAqXHJcbiAqIE5PVEU6IFRpdGxlZFBhbmVsIHJlcXVpcmVzIHRoYXQgaXRzIGJhY2tncm91bmQgY29sb3IgaXMgdGhlIHNhbWUgYXMgdGhlIGJhY2tncm91bmQgY29sb3IgQkVISU5EIHRoZSBwYW5lbCwgc2luY2UgaXRcclxuICogaXMgaW50ZW5kZWQgdGhhdCB0aGVyZSBpcyBubyBsaW5lIGluLWJldHdlZW4gdGhlIHR3byBuZWFyIHdoZXJlIHRoZSB0aXRsZSBpcy4gV2UgdXNlIGEgcmVjdGFuZ2xlIHdpdGggdGhpcyBiYWNrZ3JvdW5kXHJcbiAqIGNvbG9yIHRvIGhpZGUgdGhlIGJvcmRlciwgc28gdGhhdCBpdCBibGVuZHMgd2VsbCBpbnRvIHRoZSBjb250ZW50IGFyb3VuZCBpdC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBSZWN0YW5nbGUsIFNpemFibGUsIFdpZHRoU2l6YWJsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlU2hhcGVzIGZyb20gJy4uLy4uL21vbGVjdWxlU2hhcGVzLmpzJztcclxuXHJcbi8vIFRPRE86IEJlc3Qgc29tZXRpbWUgdG8gYWN0dWFsbHkgaGF2ZSB1cyBleHRlbmQgcGFuZWwgc29tZXRpbWUgcGVyaGFwcz8gT3IgaGF2ZSBwYW5lbE9wdGlvbnM/XHJcbmNsYXNzIFRpdGxlZFBhbmVsIGV4dGVuZHMgU2l6YWJsZSggTm9kZSApIHtcclxuICBjb25zdHJ1Y3RvciggdGl0bGVOb2RlLCBjb250ZW50Tm9kZSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHM6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBXZSdsbCBjcmVhdGUgYSByZXNpemFibGUgY29udGVudCBub2RlIGZvciB0aGUgUGFuZWwsIHNpbmNlIHdlIHdhbnQgdG8gaW5jbHVkZSB0aGUgdGl0bGVOb2RlJ3Mgc2l6ZSB3aXRoaW5cclxuICAgIC8vIG91ciBtaW5pbXVtIHdpZHRoLlxyXG4gICAgLy8gVE9ETzogQmVmb3JlIG1vdmluZyB0byBjb21tb24gY29kZSwgZ2V0IHRoaXMgdG8gc3VwcG9ydCBTaXphYmxlLlxyXG4gICAgY29uc3QgY29udGVudENvbnRhaW5lciA9IG5ldyAoIFdpZHRoU2l6YWJsZSggTm9kZSApICkoIHtcclxuICAgICAgY2hpbGRyZW46IFsgY29udGVudE5vZGUgXSxcclxuXHJcbiAgICAgIC8vIElmIG91ciBjb250ZW50IGlzIGludmlzaWJsZSwgdGhlIGFjdHVhbCBQYW5lbCdzIGNvbnRlbnQgd2lsbCBiZSBpbnZpc2libGUsIHNvIGl0IGNhbiBjb2xsYXBzZSBub3JtYWxseS5cclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBjb250ZW50Tm9kZS52aXNpYmxlUHJvcGVydHlcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBGb3J3YXJkIHByZWZlcnJlZCBzaXplcyBmcm9tIHRoZSBjb250YWluZXIgdG8gdGhlIGFjdHVhbCBjb250ZW50IG5vZGVcclxuICAgIGNvbnRlbnRDb250YWluZXIubG9jYWxQcmVmZXJyZWRXaWR0aFByb3BlcnR5LmxpbmsoIHdpZHRoID0+IHtcclxuICAgICAgaWYgKCBjb250ZW50Tm9kZS53aWR0aFNpemFibGUgKSB7XHJcbiAgICAgICAgY29udGVudE5vZGUucHJlZmVycmVkV2lkdGggPSB3aWR0aDtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEZvcndhcmQgbWluaW11bSBzaXplcyBmcm9tIHRoZSBjb250ZW50IChhbmQgdGl0bGUpIHRvIHRoZSBjb250YWluZXJcclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoIFtcclxuICAgICAgLy8gVE9ETzogU3VwcG9ydCBub24tc2l6YWJsZSBjb250ZW50IG5vZGVzIGlmIG1vdmluZyB0byBjb21tb24gY29kZS5cclxuICAgICAgY29udGVudE5vZGUubWluaW11bVdpZHRoUHJvcGVydHksXHJcbiAgICAgIHRpdGxlTm9kZS5ib3VuZHNQcm9wZXJ0eVxyXG4gICAgXSwgKCBjb250ZW50V2lkdGgsIHRpdGxlQm91bmRzICkgPT4ge1xyXG4gICAgICBjb250ZW50Q29udGFpbmVyLmxvY2FsTWluaW11bVdpZHRoID0gTWF0aC5tYXgoIGNvbnRlbnRXaWR0aCwgdGl0bGVCb3VuZHMud2lkdGggKyAoIDIgKiBvcHRpb25zLnlNYXJnaW4gKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge30sIFBhbmVsLkRFRkFVTFRfUEFORUxfT1BUSU9OUywgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMudGl0bGVOb2RlID0gdGl0bGVOb2RlOyAvLyBAcHJpdmF0ZSB7Tm9kZX1cclxuICAgIHRoaXMudGl0bGVCYWNrZ3JvdW5kTm9kZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDUsIDUsIDAsIDAsIHtcclxuICAgICAgZmlsbDogb3B0aW9ucy5maWxsLFxyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IHRpdGxlTm9kZS52aXNpYmxlUHJvcGVydHksXHJcbiAgICAgIHBpY2thYmxlOiBmYWxzZVxyXG4gICAgfSApOyAvLyBAcHJpdmF0ZSB7UmVjdGFuZ2xlfVxyXG5cclxuICAgIC8vIEBwcml2YXRlIHtOb2RlfVxyXG4gICAgdGhpcy5wYW5lbCA9IG5ldyBQYW5lbCggY29udGVudENvbnRhaW5lciwge1xyXG4gICAgICBsaW5lV2lkdGg6IG9wdGlvbnMubGluZVdpZHRoLFxyXG4gICAgICB4TWFyZ2luOiBvcHRpb25zLnhNYXJnaW4sXHJcbiAgICAgIHlNYXJnaW46IG9wdGlvbnMueU1hcmdpbixcclxuICAgICAgY29ybmVyUmFkaXVzOiBvcHRpb25zLmNvcm5lclJhZGl1cyxcclxuICAgICAgcmVzaXplOiBvcHRpb25zLnJlc2l6ZSxcclxuICAgICAgYmFja2dyb3VuZFBpY2thYmxlOiBvcHRpb25zLmJhY2tncm91bmRQaWNrYWJsZSxcclxuICAgICAgYWxpZ246IG9wdGlvbnMuYWxpZ25cclxuICAgIH0gKTtcclxuICAgIHRoaXMuc2V0U3Ryb2tlKCBvcHRpb25zLnN0cm9rZSApO1xyXG4gICAgdGhpcy5zZXRGaWxsKCBvcHRpb25zLmZpbGwgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7Tm9kZX1cclxuICAgIHRoaXMudGl0bGVDb250YWluZXIgPSBuZXcgTm9kZSgpO1xyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggW1xyXG4gICAgICB0aGlzLnBhbmVsLmJvdW5kc1Byb3BlcnR5LFxyXG4gICAgICBjb250ZW50Tm9kZS52aXNpYmxlUHJvcGVydHksXHJcbiAgICAgIGNvbnRlbnROb2RlLmJvdW5kc1Byb3BlcnR5XHJcbiAgICBdLCAoIHBhbmVsQm91bmRzLCBjb250ZW50VmlzaWJsZSwgY29udGVudEJvdW5kcyApID0+IHtcclxuICAgICAgY29uc3QgaXNWYWxpZCA9IHBhbmVsQm91bmRzLmlzRmluaXRlKCkgJiYgY29udGVudEJvdW5kcy5pc0Zpbml0ZSgpICYmIGNvbnRlbnRWaXNpYmxlO1xyXG4gICAgICB0aGlzLnRpdGxlQ29udGFpbmVyLmNoaWxkcmVuID0gaXNWYWxpZCA/IFsgdGhpcy50aXRsZUJhY2tncm91bmROb2RlLCB0aGlzLnRpdGxlTm9kZSBdIDogW107XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5wYW5lbCApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy50aXRsZUNvbnRhaW5lciApO1xyXG5cclxuICAgIGNvbnRlbnRDb250YWluZXIuYm91bmRzUHJvcGVydHkubGF6eUxpbmsoIHRoaXMudXBkYXRlVGl0bGVQb3NpdGlvbi5iaW5kKCB0aGlzICkgKTtcclxuICAgIGNvbnRlbnROb2RlLmJvdW5kc1Byb3BlcnR5LmxhenlMaW5rKCB0aGlzLnVwZGF0ZVRpdGxlUG9zaXRpb24uYmluZCggdGhpcyApICk7XHJcbiAgICB0aGlzLnBhbmVsLmJvdW5kc1Byb3BlcnR5LmxhenlMaW5rKCB0aGlzLnVwZGF0ZVRpdGxlUG9zaXRpb24uYmluZCggdGhpcyApICk7XHJcbiAgICB0aXRsZU5vZGUubG9jYWxCb3VuZHNQcm9wZXJ0eS5sYXp5TGluayggdGhpcy51cGRhdGVUaXRsZVBvc2l0aW9uLmJpbmQoIHRoaXMgKSApO1xyXG4gICAgdGhpcy51cGRhdGVUaXRsZVBvc2l0aW9uKCk7XHJcblxyXG4gICAgLy8gRm9yd2FyZCB0aGUgcGFuZWwncyBtaW5pbXVtcyB0byBvdXJzXHJcbiAgICB0aGlzLnBhbmVsLm1pbmltdW1XaWR0aFByb3BlcnR5LmxpbmsoIG1pbmltdW1XaWR0aCA9PiB7IHRoaXMubG9jYWxNaW5pbXVtV2lkdGggPSBtaW5pbXVtV2lkdGg7IH0gKTtcclxuICAgIHRoaXMucGFuZWwubWluaW11bUhlaWdodFByb3BlcnR5LmxpbmsoIG1pbmltdW1IZWlnaHQgPT4geyB0aGlzLmxvY2FsTWluaW11bUhlaWdodCA9IG1pbmltdW1IZWlnaHQ7IH0gKTtcclxuXHJcbiAgICAvLyBGb3J3YXJkIG91ciBwcmVmZXJyZWQgc2l6ZSB0byB0aGUgcGFuZWxcclxuICAgIHRoaXMubG9jYWxQcmVmZXJyZWRXaWR0aFByb3BlcnR5LmxpbmsoIHByZWZlcnJlZFdpZHRoID0+IHsgdGhpcy5wYW5lbC5wcmVmZXJyZWRXaWR0aCA9IHByZWZlcnJlZFdpZHRoOyB9ICk7XHJcbiAgICB0aGlzLmxvY2FsUHJlZmVycmVkSGVpZ2h0UHJvcGVydHkubGluayggcHJlZmVycmVkSGVpZ2h0ID0+IHsgdGhpcy5wYW5lbC5wcmVmZXJyZWRIZWlnaHQgPSBwcmVmZXJyZWRIZWlnaHQ7IH0gKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICB1cGRhdGVUaXRsZVBvc2l0aW9uKCkge1xyXG4gICAgY29uc3QgaGFzQ29udGVudHMgPSB0aGlzLnBhbmVsLmJvdW5kcy5pc0Zpbml0ZSgpO1xyXG4gICAgaWYgKCBoYXNDb250ZW50cyApIHtcclxuICAgICAgdGhpcy50aXRsZU5vZGUuY2VudGVyWCA9IHRoaXMucGFuZWwuY2VudGVyWDtcclxuICAgICAgdGhpcy50aXRsZU5vZGUuY2VudGVyWSA9IHRoaXMucGFuZWwudG9wO1xyXG4gICAgICB0aGlzLnRpdGxlQmFja2dyb3VuZE5vZGUuc2V0UmVjdEJvdW5kcyggdGhpcy50aXRsZU5vZGUuYm91bmRzLmRpbGF0ZWRYKCAxMCApICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UGFpbnREZWZ9XHJcbiAgICovXHJcbiAgZ2V0U3Ryb2tlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGFuZWwuc3Ryb2tlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHN0cm9rZSgpIHsgcmV0dXJuIHRoaXMuZ2V0U3Ryb2tlKCk7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtQYWludERlZn0gc3Ryb2tlXHJcbiAgICovXHJcbiAgc2V0U3Ryb2tlKCBzdHJva2UgKSB7XHJcbiAgICB0aGlzLnBhbmVsLnN0cm9rZSA9IHN0cm9rZTtcclxuICB9XHJcblxyXG4gIHNldCBzdHJva2UoIHZhbHVlICkgeyB0aGlzLnNldFN0cm9rZSggdmFsdWUgKTsgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UGFpbnREZWZ9XHJcbiAgICovXHJcbiAgZ2V0RmlsbCgpIHtcclxuICAgIHJldHVybiB0aGlzLnBhbmVsLmZpbGw7XHJcbiAgfVxyXG5cclxuICBnZXQgZmlsbCgpIHsgcmV0dXJuIHRoaXMuZ2V0RmlsbCgpOyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7UGFpbnREZWZ9IHN0cm9rZVxyXG4gICAqL1xyXG4gIHNldEZpbGwoIGZpbGwgKSB7XHJcbiAgICB0aGlzLnBhbmVsLmZpbGwgPSBmaWxsO1xyXG5cclxuICAgIHRoaXMudGl0bGVCYWNrZ3JvdW5kTm9kZS5maWxsID0gZmlsbDtcclxuICB9XHJcblxyXG4gIHNldCBmaWxsKCB2YWx1ZSApIHsgdGhpcy5zZXRGaWxsKCB2YWx1ZSApOyB9XHJcbn1cclxuXHJcbm1vbGVjdWxlU2hhcGVzLnJlZ2lzdGVyKCAnVGl0bGVkUGFuZWwnLCBUaXRsZWRQYW5lbCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGl0bGVkUGFuZWw7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FB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