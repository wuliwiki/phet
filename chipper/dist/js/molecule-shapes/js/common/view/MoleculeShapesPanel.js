// Copyright 2014-2022, University of Colorado Boulder

/**
 * A TitledPanel with colors and sizing specific to the Molecule Shapes simulation.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import moleculeShapes from '../../moleculeShapes.js';
import MoleculeShapesColors from './MoleculeShapesColors.js';
import TitledPanel from './TitledPanel.js';
class MoleculeShapesPanel extends TitledPanel {
  /**
   * @param {TReadOnlyProperty<string>>} titleStringProperty
   * @param {Node} contentNode
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(titleStringProperty, contentNode, tandem, options) {
    options = merge({
      lineWidth: 1.5,
      xMargin: MoleculeShapesPanel.xMargin,
      yMargin: 15,
      cornerRadius: 15,
      // we want everything to absorb events, since things behind the panel are pickable
      backgroundPickable: true,
      pickable: true,
      fill: MoleculeShapesColors.backgroundProperty,
      stroke: MoleculeShapesColors.controlPanelBorderProperty
    }, options);
    const titleText = new Text(titleStringProperty, {
      font: new PhetFont(18),
      fill: MoleculeShapesColors.controlPanelTitleProperty,
      tandem: tandem.createTandem('titleText'),
      phetioVisiblePropertyInstrumented: true,
      pickable: false,
      maxWidth: 280
    });
    super(titleText, contentNode, options);
  }
}
MoleculeShapesPanel.xMargin = 15;
moleculeShapes.register('MoleculeShapesPanel', MoleculeShapesPanel);
export default MoleculeShapesPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiVGV4dCIsIm1vbGVjdWxlU2hhcGVzIiwiTW9sZWN1bGVTaGFwZXNDb2xvcnMiLCJUaXRsZWRQYW5lbCIsIk1vbGVjdWxlU2hhcGVzUGFuZWwiLCJjb25zdHJ1Y3RvciIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJjb250ZW50Tm9kZSIsInRhbmRlbSIsIm9wdGlvbnMiLCJsaW5lV2lkdGgiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImNvcm5lclJhZGl1cyIsImJhY2tncm91bmRQaWNrYWJsZSIsInBpY2thYmxlIiwiZmlsbCIsImJhY2tncm91bmRQcm9wZXJ0eSIsInN0cm9rZSIsImNvbnRyb2xQYW5lbEJvcmRlclByb3BlcnR5IiwidGl0bGVUZXh0IiwiZm9udCIsImNvbnRyb2xQYW5lbFRpdGxlUHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQiLCJtYXhXaWR0aCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTW9sZWN1bGVTaGFwZXNQYW5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIFRpdGxlZFBhbmVsIHdpdGggY29sb3JzIGFuZCBzaXppbmcgc3BlY2lmaWMgdG8gdGhlIE1vbGVjdWxlIFNoYXBlcyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlU2hhcGVzIGZyb20gJy4uLy4uL21vbGVjdWxlU2hhcGVzLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlU2hhcGVzQ29sb3JzIGZyb20gJy4vTW9sZWN1bGVTaGFwZXNDb2xvcnMuanMnO1xyXG5pbXBvcnQgVGl0bGVkUGFuZWwgZnJvbSAnLi9UaXRsZWRQYW5lbC5qcyc7XHJcblxyXG5jbGFzcyBNb2xlY3VsZVNoYXBlc1BhbmVsIGV4dGVuZHMgVGl0bGVkUGFuZWwge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPj59IHRpdGxlU3RyaW5nUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge05vZGV9IGNvbnRlbnROb2RlXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGl0bGVTdHJpbmdQcm9wZXJ0eSwgY29udGVudE5vZGUsIHRhbmRlbSwgb3B0aW9ucyApIHtcclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBsaW5lV2lkdGg6IDEuNSxcclxuICAgICAgeE1hcmdpbjogTW9sZWN1bGVTaGFwZXNQYW5lbC54TWFyZ2luLFxyXG4gICAgICB5TWFyZ2luOiAxNSxcclxuICAgICAgY29ybmVyUmFkaXVzOiAxNSxcclxuXHJcbiAgICAgIC8vIHdlIHdhbnQgZXZlcnl0aGluZyB0byBhYnNvcmIgZXZlbnRzLCBzaW5jZSB0aGluZ3MgYmVoaW5kIHRoZSBwYW5lbCBhcmUgcGlja2FibGVcclxuICAgICAgYmFja2dyb3VuZFBpY2thYmxlOiB0cnVlLFxyXG4gICAgICBwaWNrYWJsZTogdHJ1ZSxcclxuICAgICAgZmlsbDogTW9sZWN1bGVTaGFwZXNDb2xvcnMuYmFja2dyb3VuZFByb3BlcnR5LFxyXG4gICAgICBzdHJva2U6IE1vbGVjdWxlU2hhcGVzQ29sb3JzLmNvbnRyb2xQYW5lbEJvcmRlclByb3BlcnR5XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgdGl0bGVUZXh0ID0gbmV3IFRleHQoIHRpdGxlU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxOCApLFxyXG4gICAgICBmaWxsOiBNb2xlY3VsZVNoYXBlc0NvbG9ycy5jb250cm9sUGFuZWxUaXRsZVByb3BlcnR5LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aXRsZVRleHQnICksXHJcbiAgICAgIHBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZDogdHJ1ZSxcclxuICAgICAgcGlja2FibGU6IGZhbHNlLFxyXG4gICAgICBtYXhXaWR0aDogMjgwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHRpdGxlVGV4dCwgY29udGVudE5vZGUsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbk1vbGVjdWxlU2hhcGVzUGFuZWwueE1hcmdpbiA9IDE1O1xyXG5cclxubW9sZWN1bGVTaGFwZXMucmVnaXN0ZXIoICdNb2xlY3VsZVNoYXBlc1BhbmVsJywgTW9sZWN1bGVTaGFwZXNQYW5lbCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9sZWN1bGVTaGFwZXNQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFDNUQsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUUxQyxNQUFNQyxtQkFBbUIsU0FBU0QsV0FBVyxDQUFDO0VBQzVDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxtQkFBbUIsRUFBRUMsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRztJQUMvREEsT0FBTyxHQUFHWCxLQUFLLENBQUU7TUFDZlksU0FBUyxFQUFFLEdBQUc7TUFDZEMsT0FBTyxFQUFFUCxtQkFBbUIsQ0FBQ08sT0FBTztNQUNwQ0MsT0FBTyxFQUFFLEVBQUU7TUFDWEMsWUFBWSxFQUFFLEVBQUU7TUFFaEI7TUFDQUMsa0JBQWtCLEVBQUUsSUFBSTtNQUN4QkMsUUFBUSxFQUFFLElBQUk7TUFDZEMsSUFBSSxFQUFFZCxvQkFBb0IsQ0FBQ2Usa0JBQWtCO01BQzdDQyxNQUFNLEVBQUVoQixvQkFBb0IsQ0FBQ2lCO0lBQy9CLENBQUMsRUFBRVYsT0FBUSxDQUFDO0lBRVosTUFBTVcsU0FBUyxHQUFHLElBQUlwQixJQUFJLENBQUVNLG1CQUFtQixFQUFFO01BQy9DZSxJQUFJLEVBQUUsSUFBSXRCLFFBQVEsQ0FBRSxFQUFHLENBQUM7TUFDeEJpQixJQUFJLEVBQUVkLG9CQUFvQixDQUFDb0IseUJBQXlCO01BQ3BEZCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ2UsWUFBWSxDQUFFLFdBQVksQ0FBQztNQUMxQ0MsaUNBQWlDLEVBQUUsSUFBSTtNQUN2Q1QsUUFBUSxFQUFFLEtBQUs7TUFDZlUsUUFBUSxFQUFFO0lBQ1osQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFTCxTQUFTLEVBQUViLFdBQVcsRUFBRUUsT0FBUSxDQUFDO0VBQzFDO0FBQ0Y7QUFFQUwsbUJBQW1CLENBQUNPLE9BQU8sR0FBRyxFQUFFO0FBRWhDVixjQUFjLENBQUN5QixRQUFRLENBQUUscUJBQXFCLEVBQUV0QixtQkFBb0IsQ0FBQztBQUVyRSxlQUFlQSxtQkFBbUIifQ==