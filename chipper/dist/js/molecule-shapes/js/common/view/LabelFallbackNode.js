// Copyright 2014-2023, University of Colorado Boulder

/**
 * Bond angle label in Scenery
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import moleculeShapes from '../../moleculeShapes.js';
import MoleculeShapesColors from './MoleculeShapesColors.js';
class LabelFallbackNode extends Text {
  constructor() {
    super('', {
      font: new PhetFont(16),
      visible: false
    });
  }

  /*
   * Displays and positions the label, and sets its text.
   * Same as API for LabelWebGLView
   * @public
   *
   * @param {string} string
   * @param {number} brightness - In range [0,1]
   * @param {Vector2} centerScreenPoint - The center of the central atom in screen coordinates
   * @param {Vector2} midScreenPoint - The midpoint of the bond-angle arc in screen coordinates
   * @param {number} layoutScale - The ScreenView's layout scale
   */
  setLabel(string, brightness, centerScreenPoint, midScreenPoint, layoutScale) {
    this.string = string;
    this.visible = true;
    const localCenter = this.globalToParentPoint(centerScreenPoint);
    const localMidpoint = this.globalToParentPoint(midScreenPoint);
    this.center = localMidpoint.plus(localMidpoint.minus(localCenter).times(0.3));
    this.fill = MoleculeShapesColors.bondAngleReadoutProperty.value.withAlpha(brightness);
  }

  /*
   * Makes the label invisible.
   * Same as API for LabelWebGLView
   * @public
   */
  unsetLabel() {
    this.visible = false;
  }
}
moleculeShapes.register('LabelFallbackNode', LabelFallbackNode);
export default LabelFallbackNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIlRleHQiLCJtb2xlY3VsZVNoYXBlcyIsIk1vbGVjdWxlU2hhcGVzQ29sb3JzIiwiTGFiZWxGYWxsYmFja05vZGUiLCJjb25zdHJ1Y3RvciIsImZvbnQiLCJ2aXNpYmxlIiwic2V0TGFiZWwiLCJzdHJpbmciLCJicmlnaHRuZXNzIiwiY2VudGVyU2NyZWVuUG9pbnQiLCJtaWRTY3JlZW5Qb2ludCIsImxheW91dFNjYWxlIiwibG9jYWxDZW50ZXIiLCJnbG9iYWxUb1BhcmVudFBvaW50IiwibG9jYWxNaWRwb2ludCIsImNlbnRlciIsInBsdXMiLCJtaW51cyIsInRpbWVzIiwiZmlsbCIsImJvbmRBbmdsZVJlYWRvdXRQcm9wZXJ0eSIsInZhbHVlIiwid2l0aEFscGhhIiwidW5zZXRMYWJlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGFiZWxGYWxsYmFja05vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQm9uZCBhbmdsZSBsYWJlbCBpbiBTY2VuZXJ5XHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtb2xlY3VsZVNoYXBlcyBmcm9tICcuLi8uLi9tb2xlY3VsZVNoYXBlcy5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZVNoYXBlc0NvbG9ycyBmcm9tICcuL01vbGVjdWxlU2hhcGVzQ29sb3JzLmpzJztcclxuXHJcbmNsYXNzIExhYmVsRmFsbGJhY2tOb2RlIGV4dGVuZHMgVGV4dCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlciggJycsIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNiApLFxyXG4gICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAgKiBEaXNwbGF5cyBhbmQgcG9zaXRpb25zIHRoZSBsYWJlbCwgYW5kIHNldHMgaXRzIHRleHQuXHJcbiAgICogU2FtZSBhcyBBUEkgZm9yIExhYmVsV2ViR0xWaWV3XHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBicmlnaHRuZXNzIC0gSW4gcmFuZ2UgWzAsMV1cclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IGNlbnRlclNjcmVlblBvaW50IC0gVGhlIGNlbnRlciBvZiB0aGUgY2VudHJhbCBhdG9tIGluIHNjcmVlbiBjb29yZGluYXRlc1xyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gbWlkU2NyZWVuUG9pbnQgLSBUaGUgbWlkcG9pbnQgb2YgdGhlIGJvbmQtYW5nbGUgYXJjIGluIHNjcmVlbiBjb29yZGluYXRlc1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsYXlvdXRTY2FsZSAtIFRoZSBTY3JlZW5WaWV3J3MgbGF5b3V0IHNjYWxlXHJcbiAgICovXHJcbiAgc2V0TGFiZWwoIHN0cmluZywgYnJpZ2h0bmVzcywgY2VudGVyU2NyZWVuUG9pbnQsIG1pZFNjcmVlblBvaW50LCBsYXlvdXRTY2FsZSApIHtcclxuICAgIHRoaXMuc3RyaW5nID0gc3RyaW5nO1xyXG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCBsb2NhbENlbnRlciA9IHRoaXMuZ2xvYmFsVG9QYXJlbnRQb2ludCggY2VudGVyU2NyZWVuUG9pbnQgKTtcclxuICAgIGNvbnN0IGxvY2FsTWlkcG9pbnQgPSB0aGlzLmdsb2JhbFRvUGFyZW50UG9pbnQoIG1pZFNjcmVlblBvaW50ICk7XHJcblxyXG4gICAgdGhpcy5jZW50ZXIgPSBsb2NhbE1pZHBvaW50LnBsdXMoIGxvY2FsTWlkcG9pbnQubWludXMoIGxvY2FsQ2VudGVyICkudGltZXMoIDAuMyApICk7XHJcbiAgICB0aGlzLmZpbGwgPSBNb2xlY3VsZVNoYXBlc0NvbG9ycy5ib25kQW5nbGVSZWFkb3V0UHJvcGVydHkudmFsdWUud2l0aEFscGhhKCBicmlnaHRuZXNzICk7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIE1ha2VzIHRoZSBsYWJlbCBpbnZpc2libGUuXHJcbiAgICogU2FtZSBhcyBBUEkgZm9yIExhYmVsV2ViR0xWaWV3XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHVuc2V0TGFiZWwoKSB7XHJcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbm1vbGVjdWxlU2hhcGVzLnJlZ2lzdGVyKCAnTGFiZWxGYWxsYmFja05vZGUnLCBMYWJlbEZhbGxiYWNrTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGFiZWxGYWxsYmFja05vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLG9CQUFvQixNQUFNLDJCQUEyQjtBQUU1RCxNQUFNQyxpQkFBaUIsU0FBU0gsSUFBSSxDQUFDO0VBQ25DSSxXQUFXQSxDQUFBLEVBQUc7SUFDWixLQUFLLENBQUUsRUFBRSxFQUFFO01BQ1RDLElBQUksRUFBRSxJQUFJTixRQUFRLENBQUUsRUFBRyxDQUFDO01BQ3hCTyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFFBQVFBLENBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxpQkFBaUIsRUFBRUMsY0FBYyxFQUFFQyxXQUFXLEVBQUc7SUFDN0UsSUFBSSxDQUFDSixNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDRixPQUFPLEdBQUcsSUFBSTtJQUVuQixNQUFNTyxXQUFXLEdBQUcsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBRUosaUJBQWtCLENBQUM7SUFDakUsTUFBTUssYUFBYSxHQUFHLElBQUksQ0FBQ0QsbUJBQW1CLENBQUVILGNBQWUsQ0FBQztJQUVoRSxJQUFJLENBQUNLLE1BQU0sR0FBR0QsYUFBYSxDQUFDRSxJQUFJLENBQUVGLGFBQWEsQ0FBQ0csS0FBSyxDQUFFTCxXQUFZLENBQUMsQ0FBQ00sS0FBSyxDQUFFLEdBQUksQ0FBRSxDQUFDO0lBQ25GLElBQUksQ0FBQ0MsSUFBSSxHQUFHbEIsb0JBQW9CLENBQUNtQix3QkFBd0IsQ0FBQ0MsS0FBSyxDQUFDQyxTQUFTLENBQUVkLFVBQVcsQ0FBQztFQUN6Rjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VlLFVBQVVBLENBQUEsRUFBRztJQUNYLElBQUksQ0FBQ2xCLE9BQU8sR0FBRyxLQUFLO0VBQ3RCO0FBQ0Y7QUFFQUwsY0FBYyxDQUFDd0IsUUFBUSxDQUFFLG1CQUFtQixFQUFFdEIsaUJBQWtCLENBQUM7QUFFakUsZUFBZUEsaUJBQWlCIn0=