// Copyright 2014-2022, University of Colorado Boulder

/**
 * Base model that handles a single molecule
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import EnumerationDeprecatedProperty from '../../../../axon/js/EnumerationDeprecatedProperty.js';
import Property from '../../../../axon/js/Property.js';
import Vector3 from '../../../../dot/js/Vector3.js';
import ThreeQuaternionIO from '../../../../mobius/js/ThreeQuaternionIO.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import ArrayIO from '../../../../tandem/js/types/ArrayIO.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import moleculeShapes from '../../moleculeShapes.js';
import MoleculeShapesGlobals from '../MoleculeShapesGlobals.js';
import Bond from './Bond.js';
import ElectronGeometry from './ElectronGeometry.js';
import Molecule from './Molecule.js';
import MoleculeGeometry from './MoleculeGeometry.js';
import PairGroup from './PairGroup.js';
import RealMolecule from './RealMolecule.js';
import RealMoleculeShape from './RealMoleculeShape.js';
import VSEPRMolecule from './VSEPRMolecule.js';
class MoleculeShapesModel extends PhetioObject {
  /**
   * @param {boolean} isBasicsVersion
   * @param {Object} config
   * @param {Tandem} tandem
   */
  constructor(isBasicsVersion, config, tandem) {
    assert && assert(config.initialMolecule !== undefined);
    config = merge({
      tandem: tandem,
      phetioType: MoleculeShapesModel.MoleculeShapesModelIO,
      phetioDocumentation: 'The main model for the Molecule Shapes screen'
    }, config);
    super(config);
    this.isBasicsVersion = isBasicsVersion; // @public {boolean}

    // @public {Property.<Molecule>} - Assumed not to change in the 1st screen (model)
    this.moleculeProperty = new Property(config.initialMolecule, {
      tandem: Tandem.OPT_OUT,
      valueType: Molecule
    });

    // @public {Property.<ElectronGeometry>}
    this.electronGeometryProperty = new EnumerationDeprecatedProperty(ElectronGeometry, this.moleculeProperty.value.getCentralVSEPRConfiguration().electronGeometry, {
      tandem: tandem.createTandem('electronGeometryProperty'),
      phetioReadOnly: true
    });

    // @public {Property.<MoleculeGeometry>}
    this.moleculeGeometryProperty = new EnumerationDeprecatedProperty(MoleculeGeometry, this.moleculeProperty.value.getCentralVSEPRConfiguration().moleculeGeometry, {
      tandem: tandem.createTandem('moleculeGeometryProperty'),
      phetioReadOnly: true
    });

    // @public {Property.<THREE.Quaternion>} - describes the rotation of the molecule view
    this.moleculeQuaternionProperty = new Property(new THREE.Quaternion(), {
      tandem: tandem.createTandem('moleculeQuaternionProperty'),
      phetioValueType: ThreeQuaternionIO,
      phetioDocumentation: 'A quaternion describing the rotation of the molecule view'
    });

    // @public {Property.<boolean>} - Whether bond angles are shown
    this.showBondAnglesProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('showBondAnglesProperty')
    });

    // @public {Property.<boolean>} - Whether lone pairs are shown
    this.showLonePairsProperty = new BooleanProperty(!isBasicsVersion, {
      tandem: isBasicsVersion ? Tandem.OPT_OUT : tandem.createTandem('showLonePairsProperty')
    });

    // @public {Property.<boolean>} - Whether outer lone pairs are shown (only show if both the model AND global values are set)
    this.showOuterLonePairsProperty = DerivedProperty.and([this.showLonePairsProperty, MoleculeShapesGlobals.showOuterLonePairsProperty], {
      tandem: Tandem.OPT_OUT
    });

    // @public {Property.<boolean>} - Whether molecular shape names are shown
    this.showMoleculeGeometryProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('showMoleculeGeometryProperty')
    });

    // @public {Property.<boolean>} - Whether electron shape names are shown
    this.showElectronGeometryProperty = new BooleanProperty(false, {
      tandem: isBasicsVersion ? Tandem.OPT_OUT : tandem.createTandem('showElectronGeometryProperty')
    });
    const updateMolecularBonds = () => {
      const vseprConfiguration = this.moleculeProperty.value.getCentralVSEPRConfiguration();
      this.electronGeometryProperty.value = vseprConfiguration.electronGeometry;
      this.moleculeGeometryProperty.value = vseprConfiguration.moleculeGeometry;
    };
    this.moleculeProperty.link((newMolecule, oldMolecule) => {
      if (oldMolecule) {
        oldMolecule.bondChangedEmitter.removeListener(updateMolecularBonds);
      }
      if (newMolecule) {
        newMolecule.bondChangedEmitter.addListener(updateMolecularBonds);
      }
      updateMolecularBonds();
    });
  }

  /**
   * Resets values to their original state
   * @public
   */
  reset() {
    this.moleculeProperty.reset();
    this.moleculeQuaternionProperty.reset();
    this.showBondAnglesProperty.reset();
    this.showLonePairsProperty.reset();
    this.showMoleculeGeometryProperty.reset();
    this.showElectronGeometryProperty.reset();
  }

  /**
   * Steps the model forward.
   * @public
   *
   * @param {number} dt - Elapsed time
   */
  step(dt) {
    // cap at 0.2s, since our model doesn't handle oscillation well above that
    this.moleculeProperty.value.update(Math.min(dt, 0.2));
  }
}

// @public {IOType}
MoleculeShapesModel.MoleculeShapesModelIO = new IOType('MoleculeShapesModelIO', {
  valueType: MoleculeShapesModel,
  toStateObject: model => {
    const molecule = model.moleculeProperty.value;
    const result = {
      isReal: molecule.isReal,
      groups: molecule.groups.map(group => group.toStateObject(molecule.centralAtom)),
      bonds: molecule.bonds.map(bond => bond.toStateObject(molecule.groups)),
      lastMidpoint: molecule.lastMidpoint === null ? null : Vector3.Vector3IO.toStateObject(molecule.lastMidpoint)
    };
    const data = result;
    if (molecule.isReal) {
      data.realMoleculeShape = RealMoleculeShape.RealMoleculeShapeIO.toStateObject(molecule.realMoleculeShape);
      data.bondLengthOverride = null;
    } else {
      data.bondLengthOverride = molecule.bondLengthOverride || null;
      data.realMoleculeShape = null;
    }
    return result;
  },
  applyState: (model, stateObject) => {
    const data = stateObject;
    let molecule;
    if (data.isReal) {
      molecule = new RealMolecule(RealMoleculeShape.RealMoleculeShapeIO.fromStateObject(data.realMoleculeShape));
      const groups = data.groups.map(groupObj => PairGroup.fromStateObject(groupObj));
      groups.forEach((group, index) => {
        molecule.groups[index].positionProperty.value = group.positionProperty.value;
        molecule.groups[index].velocityProperty.value = group.velocityProperty.value;
      });
    } else {
      molecule = new VSEPRMolecule();
      molecule.bondLengthOverride = data.bondLengthOverride;
      const groups = data.groups.map(groupObj => PairGroup.fromStateObject(groupObj));
      groups.filter(group => group.isCentralAtom).forEach(group => {
        molecule.addCentralAtom(group);
      });
      groups.filter(group => !group.isCentralAtom).forEach(group => {
        molecule.addGroup(group, false);
      });
      data.bonds.forEach(bondObj => {
        molecule.addBond(Bond.fromStateObject(bondObj, groups));
      });
    }
    molecule.lastMidpoint = stateObject.lastMidpoint === null ? null : Vector3.Vector3IO.fromStateObject(stateObject.lastMidpoint);
    model.moleculeProperty.value = molecule;
  },
  stateSchema: {
    isReal: BooleanIO,
    groups: ArrayIO(PairGroup.PairGroupIO),
    bonds: ArrayIO(Bond.BondIO),
    lastMidpoint: NullableIO(Vector3.Vector3IO),
    realMoleculeShape: NullableIO(RealMoleculeShape.RealMoleculeShapeIO),
    bondLengthOverride: NullableIO(NumberIO)
  }
});
moleculeShapes.register('MoleculeShapesModel', MoleculeShapesModel);
export default MoleculeShapesModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSIsIlByb3BlcnR5IiwiVmVjdG9yMyIsIlRocmVlUXVhdGVybmlvbklPIiwibWVyZ2UiLCJQaGV0aW9PYmplY3QiLCJUYW5kZW0iLCJBcnJheUlPIiwiQm9vbGVhbklPIiwiSU9UeXBlIiwiTnVsbGFibGVJTyIsIk51bWJlcklPIiwibW9sZWN1bGVTaGFwZXMiLCJNb2xlY3VsZVNoYXBlc0dsb2JhbHMiLCJCb25kIiwiRWxlY3Ryb25HZW9tZXRyeSIsIk1vbGVjdWxlIiwiTW9sZWN1bGVHZW9tZXRyeSIsIlBhaXJHcm91cCIsIlJlYWxNb2xlY3VsZSIsIlJlYWxNb2xlY3VsZVNoYXBlIiwiVlNFUFJNb2xlY3VsZSIsIk1vbGVjdWxlU2hhcGVzTW9kZWwiLCJjb25zdHJ1Y3RvciIsImlzQmFzaWNzVmVyc2lvbiIsImNvbmZpZyIsInRhbmRlbSIsImFzc2VydCIsImluaXRpYWxNb2xlY3VsZSIsInVuZGVmaW5lZCIsInBoZXRpb1R5cGUiLCJNb2xlY3VsZVNoYXBlc01vZGVsSU8iLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwibW9sZWN1bGVQcm9wZXJ0eSIsIk9QVF9PVVQiLCJ2YWx1ZVR5cGUiLCJlbGVjdHJvbkdlb21ldHJ5UHJvcGVydHkiLCJ2YWx1ZSIsImdldENlbnRyYWxWU0VQUkNvbmZpZ3VyYXRpb24iLCJlbGVjdHJvbkdlb21ldHJ5IiwiY3JlYXRlVGFuZGVtIiwicGhldGlvUmVhZE9ubHkiLCJtb2xlY3VsZUdlb21ldHJ5UHJvcGVydHkiLCJtb2xlY3VsZUdlb21ldHJ5IiwibW9sZWN1bGVRdWF0ZXJuaW9uUHJvcGVydHkiLCJUSFJFRSIsIlF1YXRlcm5pb24iLCJwaGV0aW9WYWx1ZVR5cGUiLCJzaG93Qm9uZEFuZ2xlc1Byb3BlcnR5Iiwic2hvd0xvbmVQYWlyc1Byb3BlcnR5Iiwic2hvd091dGVyTG9uZVBhaXJzUHJvcGVydHkiLCJhbmQiLCJzaG93TW9sZWN1bGVHZW9tZXRyeVByb3BlcnR5Iiwic2hvd0VsZWN0cm9uR2VvbWV0cnlQcm9wZXJ0eSIsInVwZGF0ZU1vbGVjdWxhckJvbmRzIiwidnNlcHJDb25maWd1cmF0aW9uIiwibGluayIsIm5ld01vbGVjdWxlIiwib2xkTW9sZWN1bGUiLCJib25kQ2hhbmdlZEVtaXR0ZXIiLCJyZW1vdmVMaXN0ZW5lciIsImFkZExpc3RlbmVyIiwicmVzZXQiLCJzdGVwIiwiZHQiLCJ1cGRhdGUiLCJNYXRoIiwibWluIiwidG9TdGF0ZU9iamVjdCIsIm1vZGVsIiwibW9sZWN1bGUiLCJyZXN1bHQiLCJpc1JlYWwiLCJncm91cHMiLCJtYXAiLCJncm91cCIsImNlbnRyYWxBdG9tIiwiYm9uZHMiLCJib25kIiwibGFzdE1pZHBvaW50IiwiVmVjdG9yM0lPIiwiZGF0YSIsInJlYWxNb2xlY3VsZVNoYXBlIiwiUmVhbE1vbGVjdWxlU2hhcGVJTyIsImJvbmRMZW5ndGhPdmVycmlkZSIsImFwcGx5U3RhdGUiLCJzdGF0ZU9iamVjdCIsImZyb21TdGF0ZU9iamVjdCIsImdyb3VwT2JqIiwiZm9yRWFjaCIsImluZGV4IiwicG9zaXRpb25Qcm9wZXJ0eSIsInZlbG9jaXR5UHJvcGVydHkiLCJmaWx0ZXIiLCJpc0NlbnRyYWxBdG9tIiwiYWRkQ2VudHJhbEF0b20iLCJhZGRHcm91cCIsImJvbmRPYmoiLCJhZGRCb25kIiwic3RhdGVTY2hlbWEiLCJQYWlyR3JvdXBJTyIsIkJvbmRJTyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTW9sZWN1bGVTaGFwZXNNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCYXNlIG1vZGVsIHRoYXQgaGFuZGxlcyBhIHNpbmdsZSBtb2xlY3VsZVxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgVGhyZWVRdWF0ZXJuaW9uSU8gZnJvbSAnLi4vLi4vLi4vLi4vbW9iaXVzL2pzL1RocmVlUXVhdGVybmlvbklPLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb09iamVjdC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBBcnJheUlPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9BcnJheUlPLmpzJztcclxuaW1wb3J0IEJvb2xlYW5JTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvQm9vbGVhbklPLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bGxhYmxlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bGxhYmxlSU8uanMnO1xyXG5pbXBvcnQgTnVtYmVySU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bWJlcklPLmpzJztcclxuaW1wb3J0IG1vbGVjdWxlU2hhcGVzIGZyb20gJy4uLy4uL21vbGVjdWxlU2hhcGVzLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlU2hhcGVzR2xvYmFscyBmcm9tICcuLi9Nb2xlY3VsZVNoYXBlc0dsb2JhbHMuanMnO1xyXG5pbXBvcnQgQm9uZCBmcm9tICcuL0JvbmQuanMnO1xyXG5pbXBvcnQgRWxlY3Ryb25HZW9tZXRyeSBmcm9tICcuL0VsZWN0cm9uR2VvbWV0cnkuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGUgZnJvbSAnLi9Nb2xlY3VsZS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZUdlb21ldHJ5IGZyb20gJy4vTW9sZWN1bGVHZW9tZXRyeS5qcyc7XHJcbmltcG9ydCBQYWlyR3JvdXAgZnJvbSAnLi9QYWlyR3JvdXAuanMnO1xyXG5pbXBvcnQgUmVhbE1vbGVjdWxlIGZyb20gJy4vUmVhbE1vbGVjdWxlLmpzJztcclxuaW1wb3J0IFJlYWxNb2xlY3VsZVNoYXBlIGZyb20gJy4vUmVhbE1vbGVjdWxlU2hhcGUuanMnO1xyXG5pbXBvcnQgVlNFUFJNb2xlY3VsZSBmcm9tICcuL1ZTRVBSTW9sZWN1bGUuanMnO1xyXG5cclxuY2xhc3MgTW9sZWN1bGVTaGFwZXNNb2RlbCBleHRlbmRzIFBoZXRpb09iamVjdCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0Jhc2ljc1ZlcnNpb25cclxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBpc0Jhc2ljc1ZlcnNpb24sIGNvbmZpZywgdGFuZGVtICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggY29uZmlnLmluaXRpYWxNb2xlY3VsZSAhPT0gdW5kZWZpbmVkICk7XHJcblxyXG4gICAgY29uZmlnID0gbWVyZ2UoIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHBoZXRpb1R5cGU6IE1vbGVjdWxlU2hhcGVzTW9kZWwuTW9sZWN1bGVTaGFwZXNNb2RlbElPLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVGhlIG1haW4gbW9kZWwgZm9yIHRoZSBNb2xlY3VsZSBTaGFwZXMgc2NyZWVuJ1xyXG4gICAgfSwgY29uZmlnICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbmZpZyApO1xyXG5cclxuICAgIHRoaXMuaXNCYXNpY3NWZXJzaW9uID0gaXNCYXNpY3NWZXJzaW9uOyAvLyBAcHVibGljIHtib29sZWFufVxyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5LjxNb2xlY3VsZT59IC0gQXNzdW1lZCBub3QgdG8gY2hhbmdlIGluIHRoZSAxc3Qgc2NyZWVuIChtb2RlbClcclxuICAgIHRoaXMubW9sZWN1bGVQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggY29uZmlnLmluaXRpYWxNb2xlY3VsZSwge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VULFxyXG4gICAgICB2YWx1ZVR5cGU6IE1vbGVjdWxlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPEVsZWN0cm9uR2VvbWV0cnk+fVxyXG4gICAgdGhpcy5lbGVjdHJvbkdlb21ldHJ5UHJvcGVydHkgPSBuZXcgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkoIEVsZWN0cm9uR2VvbWV0cnksIHRoaXMubW9sZWN1bGVQcm9wZXJ0eS52YWx1ZS5nZXRDZW50cmFsVlNFUFJDb25maWd1cmF0aW9uKCkuZWxlY3Ryb25HZW9tZXRyeSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdlbGVjdHJvbkdlb21ldHJ5UHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPE1vbGVjdWxlR2VvbWV0cnk+fVxyXG4gICAgdGhpcy5tb2xlY3VsZUdlb21ldHJ5UHJvcGVydHkgPSBuZXcgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkoIE1vbGVjdWxlR2VvbWV0cnksIHRoaXMubW9sZWN1bGVQcm9wZXJ0eS52YWx1ZS5nZXRDZW50cmFsVlNFUFJDb25maWd1cmF0aW9uKCkubW9sZWN1bGVHZW9tZXRyeSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2xlY3VsZUdlb21ldHJ5UHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPFRIUkVFLlF1YXRlcm5pb24+fSAtIGRlc2NyaWJlcyB0aGUgcm90YXRpb24gb2YgdGhlIG1vbGVjdWxlIHZpZXdcclxuICAgIHRoaXMubW9sZWN1bGVRdWF0ZXJuaW9uUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCksIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9sZWN1bGVRdWF0ZXJuaW9uUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogVGhyZWVRdWF0ZXJuaW9uSU8sXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdBIHF1YXRlcm5pb24gZGVzY3JpYmluZyB0aGUgcm90YXRpb24gb2YgdGhlIG1vbGVjdWxlIHZpZXcnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPGJvb2xlYW4+fSAtIFdoZXRoZXIgYm9uZCBhbmdsZXMgYXJlIHNob3duXHJcbiAgICB0aGlzLnNob3dCb25kQW5nbGVzUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzaG93Qm9uZEFuZ2xlc1Byb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPGJvb2xlYW4+fSAtIFdoZXRoZXIgbG9uZSBwYWlycyBhcmUgc2hvd25cclxuICAgIHRoaXMuc2hvd0xvbmVQYWlyc1Byb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggIWlzQmFzaWNzVmVyc2lvbiwge1xyXG4gICAgICB0YW5kZW06IGlzQmFzaWNzVmVyc2lvbiA/IFRhbmRlbS5PUFRfT1VUIDogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Nob3dMb25lUGFpcnNQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn0gLSBXaGV0aGVyIG91dGVyIGxvbmUgcGFpcnMgYXJlIHNob3duIChvbmx5IHNob3cgaWYgYm90aCB0aGUgbW9kZWwgQU5EIGdsb2JhbCB2YWx1ZXMgYXJlIHNldClcclxuICAgIHRoaXMuc2hvd091dGVyTG9uZVBhaXJzUHJvcGVydHkgPSBEZXJpdmVkUHJvcGVydHkuYW5kKCBbIHRoaXMuc2hvd0xvbmVQYWlyc1Byb3BlcnR5LCBNb2xlY3VsZVNoYXBlc0dsb2JhbHMuc2hvd091dGVyTG9uZVBhaXJzUHJvcGVydHkgXSwge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPGJvb2xlYW4+fSAtIFdoZXRoZXIgbW9sZWN1bGFyIHNoYXBlIG5hbWVzIGFyZSBzaG93blxyXG4gICAgdGhpcy5zaG93TW9sZWN1bGVHZW9tZXRyeVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2hvd01vbGVjdWxlR2VvbWV0cnlQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn0gLSBXaGV0aGVyIGVsZWN0cm9uIHNoYXBlIG5hbWVzIGFyZSBzaG93blxyXG4gICAgdGhpcy5zaG93RWxlY3Ryb25HZW9tZXRyeVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiBpc0Jhc2ljc1ZlcnNpb24gPyBUYW5kZW0uT1BUX09VVCA6IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzaG93RWxlY3Ryb25HZW9tZXRyeVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlTW9sZWN1bGFyQm9uZHMgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZzZXByQ29uZmlndXJhdGlvbiA9IHRoaXMubW9sZWN1bGVQcm9wZXJ0eS52YWx1ZS5nZXRDZW50cmFsVlNFUFJDb25maWd1cmF0aW9uKCk7XHJcbiAgICAgIHRoaXMuZWxlY3Ryb25HZW9tZXRyeVByb3BlcnR5LnZhbHVlID0gdnNlcHJDb25maWd1cmF0aW9uLmVsZWN0cm9uR2VvbWV0cnk7XHJcbiAgICAgIHRoaXMubW9sZWN1bGVHZW9tZXRyeVByb3BlcnR5LnZhbHVlID0gdnNlcHJDb25maWd1cmF0aW9uLm1vbGVjdWxlR2VvbWV0cnk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubW9sZWN1bGVQcm9wZXJ0eS5saW5rKCAoIG5ld01vbGVjdWxlLCBvbGRNb2xlY3VsZSApID0+IHtcclxuICAgICAgaWYgKCBvbGRNb2xlY3VsZSApIHtcclxuICAgICAgICBvbGRNb2xlY3VsZS5ib25kQ2hhbmdlZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIHVwZGF0ZU1vbGVjdWxhckJvbmRzICk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCBuZXdNb2xlY3VsZSApIHtcclxuICAgICAgICBuZXdNb2xlY3VsZS5ib25kQ2hhbmdlZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIHVwZGF0ZU1vbGVjdWxhckJvbmRzICk7XHJcbiAgICAgIH1cclxuICAgICAgdXBkYXRlTW9sZWN1bGFyQm9uZHMoKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyB2YWx1ZXMgdG8gdGhlaXIgb3JpZ2luYWwgc3RhdGVcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLm1vbGVjdWxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubW9sZWN1bGVRdWF0ZXJuaW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuc2hvd0JvbmRBbmdsZXNQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5zaG93TG9uZVBhaXJzUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuc2hvd01vbGVjdWxlR2VvbWV0cnlQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5zaG93RWxlY3Ryb25HZW9tZXRyeVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGVwcyB0aGUgbW9kZWwgZm9yd2FyZC5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHQgLSBFbGFwc2VkIHRpbWVcclxuICAgKi9cclxuICBzdGVwKCBkdCApIHtcclxuICAgIC8vIGNhcCBhdCAwLjJzLCBzaW5jZSBvdXIgbW9kZWwgZG9lc24ndCBoYW5kbGUgb3NjaWxsYXRpb24gd2VsbCBhYm92ZSB0aGF0XHJcbiAgICB0aGlzLm1vbGVjdWxlUHJvcGVydHkudmFsdWUudXBkYXRlKCBNYXRoLm1pbiggZHQsIDAuMiApICk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBAcHVibGljIHtJT1R5cGV9XHJcbk1vbGVjdWxlU2hhcGVzTW9kZWwuTW9sZWN1bGVTaGFwZXNNb2RlbElPID0gbmV3IElPVHlwZSggJ01vbGVjdWxlU2hhcGVzTW9kZWxJTycsIHtcclxuICB2YWx1ZVR5cGU6IE1vbGVjdWxlU2hhcGVzTW9kZWwsXHJcbiAgdG9TdGF0ZU9iamVjdDogbW9kZWwgPT4ge1xyXG4gICAgY29uc3QgbW9sZWN1bGUgPSBtb2RlbC5tb2xlY3VsZVByb3BlcnR5LnZhbHVlO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgaXNSZWFsOiBtb2xlY3VsZS5pc1JlYWwsXHJcbiAgICAgIGdyb3VwczogbW9sZWN1bGUuZ3JvdXBzLm1hcCggZ3JvdXAgPT4gZ3JvdXAudG9TdGF0ZU9iamVjdCggbW9sZWN1bGUuY2VudHJhbEF0b20gKSApLFxyXG4gICAgICBib25kczogbW9sZWN1bGUuYm9uZHMubWFwKCBib25kID0+IGJvbmQudG9TdGF0ZU9iamVjdCggbW9sZWN1bGUuZ3JvdXBzICkgKSxcclxuICAgICAgbGFzdE1pZHBvaW50OiBtb2xlY3VsZS5sYXN0TWlkcG9pbnQgPT09IG51bGwgPyBudWxsIDogVmVjdG9yMy5WZWN0b3IzSU8udG9TdGF0ZU9iamVjdCggbW9sZWN1bGUubGFzdE1pZHBvaW50IClcclxuICAgIH07XHJcbiAgICBjb25zdCBkYXRhID0gcmVzdWx0O1xyXG5cclxuICAgIGlmICggbW9sZWN1bGUuaXNSZWFsICkge1xyXG4gICAgICBkYXRhLnJlYWxNb2xlY3VsZVNoYXBlID0gUmVhbE1vbGVjdWxlU2hhcGUuUmVhbE1vbGVjdWxlU2hhcGVJTy50b1N0YXRlT2JqZWN0KCBtb2xlY3VsZS5yZWFsTW9sZWN1bGVTaGFwZSApO1xyXG4gICAgICBkYXRhLmJvbmRMZW5ndGhPdmVycmlkZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgZGF0YS5ib25kTGVuZ3RoT3ZlcnJpZGUgPSBtb2xlY3VsZS5ib25kTGVuZ3RoT3ZlcnJpZGUgfHwgbnVsbDtcclxuICAgICAgZGF0YS5yZWFsTW9sZWN1bGVTaGFwZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH0sXHJcbiAgYXBwbHlTdGF0ZTogKCBtb2RlbCwgc3RhdGVPYmplY3QgKSA9PiB7XHJcbiAgICBjb25zdCBkYXRhID0gc3RhdGVPYmplY3Q7XHJcbiAgICBsZXQgbW9sZWN1bGU7XHJcblxyXG4gICAgaWYgKCBkYXRhLmlzUmVhbCApIHtcclxuICAgICAgbW9sZWN1bGUgPSBuZXcgUmVhbE1vbGVjdWxlKCBSZWFsTW9sZWN1bGVTaGFwZS5SZWFsTW9sZWN1bGVTaGFwZUlPLmZyb21TdGF0ZU9iamVjdCggZGF0YS5yZWFsTW9sZWN1bGVTaGFwZSApICk7XHJcbiAgICAgIGNvbnN0IGdyb3VwcyA9IGRhdGEuZ3JvdXBzLm1hcCggZ3JvdXBPYmogPT4gUGFpckdyb3VwLmZyb21TdGF0ZU9iamVjdCggZ3JvdXBPYmogKSApO1xyXG5cclxuICAgICAgZ3JvdXBzLmZvckVhY2goICggZ3JvdXAsIGluZGV4ICkgPT4ge1xyXG4gICAgICAgIG1vbGVjdWxlLmdyb3Vwc1sgaW5kZXggXS5wb3NpdGlvblByb3BlcnR5LnZhbHVlID0gZ3JvdXAucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgICBtb2xlY3VsZS5ncm91cHNbIGluZGV4IF0udmVsb2NpdHlQcm9wZXJ0eS52YWx1ZSA9IGdyb3VwLnZlbG9jaXR5UHJvcGVydHkudmFsdWU7XHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBtb2xlY3VsZSA9IG5ldyBWU0VQUk1vbGVjdWxlKCk7XHJcbiAgICAgIG1vbGVjdWxlLmJvbmRMZW5ndGhPdmVycmlkZSA9IGRhdGEuYm9uZExlbmd0aE92ZXJyaWRlO1xyXG5cclxuICAgICAgY29uc3QgZ3JvdXBzID0gZGF0YS5ncm91cHMubWFwKCBncm91cE9iaiA9PiBQYWlyR3JvdXAuZnJvbVN0YXRlT2JqZWN0KCBncm91cE9iaiApICk7XHJcbiAgICAgIGdyb3Vwcy5maWx0ZXIoIGdyb3VwID0+IGdyb3VwLmlzQ2VudHJhbEF0b20gKS5mb3JFYWNoKCBncm91cCA9PiB7XHJcbiAgICAgICAgbW9sZWN1bGUuYWRkQ2VudHJhbEF0b20oIGdyb3VwICk7XHJcbiAgICAgIH0gKTtcclxuICAgICAgZ3JvdXBzLmZpbHRlciggZ3JvdXAgPT4gIWdyb3VwLmlzQ2VudHJhbEF0b20gKS5mb3JFYWNoKCBncm91cCA9PiB7XHJcbiAgICAgICAgbW9sZWN1bGUuYWRkR3JvdXAoIGdyb3VwLCBmYWxzZSApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICBkYXRhLmJvbmRzLmZvckVhY2goIGJvbmRPYmogPT4ge1xyXG4gICAgICAgIG1vbGVjdWxlLmFkZEJvbmQoIEJvbmQuZnJvbVN0YXRlT2JqZWN0KCBib25kT2JqLCBncm91cHMgKSApO1xyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgbW9sZWN1bGUubGFzdE1pZHBvaW50ID0gc3RhdGVPYmplY3QubGFzdE1pZHBvaW50ID09PSBudWxsID8gbnVsbCA6IFZlY3RvcjMuVmVjdG9yM0lPLmZyb21TdGF0ZU9iamVjdCggc3RhdGVPYmplY3QubGFzdE1pZHBvaW50ICk7XHJcblxyXG4gICAgbW9kZWwubW9sZWN1bGVQcm9wZXJ0eS52YWx1ZSA9IG1vbGVjdWxlO1xyXG4gIH0sXHJcblxyXG4gIHN0YXRlU2NoZW1hOiB7XHJcbiAgICBpc1JlYWw6IEJvb2xlYW5JTyxcclxuICAgIGdyb3VwczogQXJyYXlJTyggUGFpckdyb3VwLlBhaXJHcm91cElPICksXHJcbiAgICBib25kczogQXJyYXlJTyggQm9uZC5Cb25kSU8gKSxcclxuICAgIGxhc3RNaWRwb2ludDogTnVsbGFibGVJTyggVmVjdG9yMy5WZWN0b3IzSU8gKSxcclxuICAgIHJlYWxNb2xlY3VsZVNoYXBlOiBOdWxsYWJsZUlPKCBSZWFsTW9sZWN1bGVTaGFwZS5SZWFsTW9sZWN1bGVTaGFwZUlPICksXHJcbiAgICBib25kTGVuZ3RoT3ZlcnJpZGU6IE51bGxhYmxlSU8oIE51bWJlcklPIClcclxuICB9XHJcbn0gKTtcclxuXHJcbm1vbGVjdWxlU2hhcGVzLnJlZ2lzdGVyKCAnTW9sZWN1bGVTaGFwZXNNb2RlbCcsIE1vbGVjdWxlU2hhcGVzTW9kZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgTW9sZWN1bGVTaGFwZXNNb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLDZCQUE2QixNQUFNLHNEQUFzRDtBQUNoRyxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsaUJBQWlCLE1BQU0sNENBQTRDO0FBQzFFLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsWUFBWSxNQUFNLHVDQUF1QztBQUNoRSxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLE9BQU8sTUFBTSx3Q0FBd0M7QUFDNUQsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxPQUFPQyxNQUFNLE1BQU0sdUNBQXVDO0FBQzFELE9BQU9DLFVBQVUsTUFBTSwyQ0FBMkM7QUFDbEUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUMvRCxPQUFPQyxJQUFJLE1BQU0sV0FBVztBQUM1QixPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsUUFBUSxNQUFNLGVBQWU7QUFDcEMsT0FBT0MsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBQ3BELE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFDdEMsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUM1QyxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFDdEQsT0FBT0MsYUFBYSxNQUFNLG9CQUFvQjtBQUU5QyxNQUFNQyxtQkFBbUIsU0FBU2pCLFlBQVksQ0FBQztFQUM3QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VrQixXQUFXQSxDQUFFQyxlQUFlLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFHO0lBQzdDQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsTUFBTSxDQUFDRyxlQUFlLEtBQUtDLFNBQVUsQ0FBQztJQUV4REosTUFBTSxHQUFHckIsS0FBSyxDQUFFO01BQ2RzQixNQUFNLEVBQUVBLE1BQU07TUFDZEksVUFBVSxFQUFFUixtQkFBbUIsQ0FBQ1MscUJBQXFCO01BQ3JEQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFDLEVBQUVQLE1BQU8sQ0FBQztJQUVYLEtBQUssQ0FBRUEsTUFBTyxDQUFDO0lBRWYsSUFBSSxDQUFDRCxlQUFlLEdBQUdBLGVBQWUsQ0FBQyxDQUFDOztJQUV4QztJQUNBLElBQUksQ0FBQ1MsZ0JBQWdCLEdBQUcsSUFBSWhDLFFBQVEsQ0FBRXdCLE1BQU0sQ0FBQ0csZUFBZSxFQUFFO01BQzVERixNQUFNLEVBQUVwQixNQUFNLENBQUM0QixPQUFPO01BQ3RCQyxTQUFTLEVBQUVuQjtJQUNiLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ29CLHdCQUF3QixHQUFHLElBQUlwQyw2QkFBNkIsQ0FBRWUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDa0IsZ0JBQWdCLENBQUNJLEtBQUssQ0FBQ0MsNEJBQTRCLENBQUMsQ0FBQyxDQUFDQyxnQkFBZ0IsRUFBRTtNQUNoS2IsTUFBTSxFQUFFQSxNQUFNLENBQUNjLFlBQVksQ0FBRSwwQkFBMkIsQ0FBQztNQUN6REMsY0FBYyxFQUFFO0lBQ2xCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0Msd0JBQXdCLEdBQUcsSUFBSTFDLDZCQUE2QixDQUFFaUIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDZ0IsZ0JBQWdCLENBQUNJLEtBQUssQ0FBQ0MsNEJBQTRCLENBQUMsQ0FBQyxDQUFDSyxnQkFBZ0IsRUFBRTtNQUNoS2pCLE1BQU0sRUFBRUEsTUFBTSxDQUFDYyxZQUFZLENBQUUsMEJBQTJCLENBQUM7TUFDekRDLGNBQWMsRUFBRTtJQUNsQixDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNHLDBCQUEwQixHQUFHLElBQUkzQyxRQUFRLENBQUUsSUFBSTRDLEtBQUssQ0FBQ0MsVUFBVSxDQUFDLENBQUMsRUFBRTtNQUN0RXBCLE1BQU0sRUFBRUEsTUFBTSxDQUFDYyxZQUFZLENBQUUsNEJBQTZCLENBQUM7TUFDM0RPLGVBQWUsRUFBRTVDLGlCQUFpQjtNQUNsQzZCLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ2dCLHNCQUFzQixHQUFHLElBQUlsRCxlQUFlLENBQUUsS0FBSyxFQUFFO01BQ3hENEIsTUFBTSxFQUFFQSxNQUFNLENBQUNjLFlBQVksQ0FBRSx3QkFBeUI7SUFDeEQsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDUyxxQkFBcUIsR0FBRyxJQUFJbkQsZUFBZSxDQUFFLENBQUMwQixlQUFlLEVBQUU7TUFDbEVFLE1BQU0sRUFBRUYsZUFBZSxHQUFHbEIsTUFBTSxDQUFDNEIsT0FBTyxHQUFHUixNQUFNLENBQUNjLFlBQVksQ0FBRSx1QkFBd0I7SUFDMUYsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDVSwwQkFBMEIsR0FBR25ELGVBQWUsQ0FBQ29ELEdBQUcsQ0FBRSxDQUFFLElBQUksQ0FBQ0YscUJBQXFCLEVBQUVwQyxxQkFBcUIsQ0FBQ3FDLDBCQUEwQixDQUFFLEVBQUU7TUFDdkl4QixNQUFNLEVBQUVwQixNQUFNLENBQUM0QjtJQUNqQixDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNrQiw0QkFBNEIsR0FBRyxJQUFJdEQsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUM5RDRCLE1BQU0sRUFBRUEsTUFBTSxDQUFDYyxZQUFZLENBQUUsOEJBQStCO0lBQzlELENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ2EsNEJBQTRCLEdBQUcsSUFBSXZELGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDOUQ0QixNQUFNLEVBQUVGLGVBQWUsR0FBR2xCLE1BQU0sQ0FBQzRCLE9BQU8sR0FBR1IsTUFBTSxDQUFDYyxZQUFZLENBQUUsOEJBQStCO0lBQ2pHLENBQUUsQ0FBQztJQUVILE1BQU1jLG9CQUFvQixHQUFHQSxDQUFBLEtBQU07TUFDakMsTUFBTUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDdEIsZ0JBQWdCLENBQUNJLEtBQUssQ0FBQ0MsNEJBQTRCLENBQUMsQ0FBQztNQUNyRixJQUFJLENBQUNGLHdCQUF3QixDQUFDQyxLQUFLLEdBQUdrQixrQkFBa0IsQ0FBQ2hCLGdCQUFnQjtNQUN6RSxJQUFJLENBQUNHLHdCQUF3QixDQUFDTCxLQUFLLEdBQUdrQixrQkFBa0IsQ0FBQ1osZ0JBQWdCO0lBQzNFLENBQUM7SUFFRCxJQUFJLENBQUNWLGdCQUFnQixDQUFDdUIsSUFBSSxDQUFFLENBQUVDLFdBQVcsRUFBRUMsV0FBVyxLQUFNO01BQzFELElBQUtBLFdBQVcsRUFBRztRQUNqQkEsV0FBVyxDQUFDQyxrQkFBa0IsQ0FBQ0MsY0FBYyxDQUFFTixvQkFBcUIsQ0FBQztNQUN2RTtNQUNBLElBQUtHLFdBQVcsRUFBRztRQUNqQkEsV0FBVyxDQUFDRSxrQkFBa0IsQ0FBQ0UsV0FBVyxDQUFFUCxvQkFBcUIsQ0FBQztNQUNwRTtNQUNBQSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3hCLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VRLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQzdCLGdCQUFnQixDQUFDNkIsS0FBSyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDbEIsMEJBQTBCLENBQUNrQixLQUFLLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUNkLHNCQUFzQixDQUFDYyxLQUFLLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUNiLHFCQUFxQixDQUFDYSxLQUFLLENBQUMsQ0FBQztJQUNsQyxJQUFJLENBQUNWLDRCQUE0QixDQUFDVSxLQUFLLENBQUMsQ0FBQztJQUN6QyxJQUFJLENBQUNULDRCQUE0QixDQUFDUyxLQUFLLENBQUMsQ0FBQztFQUMzQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsSUFBSUEsQ0FBRUMsRUFBRSxFQUFHO0lBQ1Q7SUFDQSxJQUFJLENBQUMvQixnQkFBZ0IsQ0FBQ0ksS0FBSyxDQUFDNEIsTUFBTSxDQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBRUgsRUFBRSxFQUFFLEdBQUksQ0FBRSxDQUFDO0VBQzNEO0FBQ0Y7O0FBRUE7QUFDQTFDLG1CQUFtQixDQUFDUyxxQkFBcUIsR0FBRyxJQUFJdEIsTUFBTSxDQUFFLHVCQUF1QixFQUFFO0VBQy9FMEIsU0FBUyxFQUFFYixtQkFBbUI7RUFDOUI4QyxhQUFhLEVBQUVDLEtBQUssSUFBSTtJQUN0QixNQUFNQyxRQUFRLEdBQUdELEtBQUssQ0FBQ3BDLGdCQUFnQixDQUFDSSxLQUFLO0lBRTdDLE1BQU1rQyxNQUFNLEdBQUc7TUFDYkMsTUFBTSxFQUFFRixRQUFRLENBQUNFLE1BQU07TUFDdkJDLE1BQU0sRUFBRUgsUUFBUSxDQUFDRyxNQUFNLENBQUNDLEdBQUcsQ0FBRUMsS0FBSyxJQUFJQSxLQUFLLENBQUNQLGFBQWEsQ0FBRUUsUUFBUSxDQUFDTSxXQUFZLENBQUUsQ0FBQztNQUNuRkMsS0FBSyxFQUFFUCxRQUFRLENBQUNPLEtBQUssQ0FBQ0gsR0FBRyxDQUFFSSxJQUFJLElBQUlBLElBQUksQ0FBQ1YsYUFBYSxDQUFFRSxRQUFRLENBQUNHLE1BQU8sQ0FBRSxDQUFDO01BQzFFTSxZQUFZLEVBQUVULFFBQVEsQ0FBQ1MsWUFBWSxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUc3RSxPQUFPLENBQUM4RSxTQUFTLENBQUNaLGFBQWEsQ0FBRUUsUUFBUSxDQUFDUyxZQUFhO0lBQy9HLENBQUM7SUFDRCxNQUFNRSxJQUFJLEdBQUdWLE1BQU07SUFFbkIsSUFBS0QsUUFBUSxDQUFDRSxNQUFNLEVBQUc7TUFDckJTLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUc5RCxpQkFBaUIsQ0FBQytELG1CQUFtQixDQUFDZixhQUFhLENBQUVFLFFBQVEsQ0FBQ1ksaUJBQWtCLENBQUM7TUFDMUdELElBQUksQ0FBQ0csa0JBQWtCLEdBQUcsSUFBSTtJQUNoQyxDQUFDLE1BQ0k7TUFDSEgsSUFBSSxDQUFDRyxrQkFBa0IsR0FBR2QsUUFBUSxDQUFDYyxrQkFBa0IsSUFBSSxJQUFJO01BQzdESCxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUk7SUFDL0I7SUFDQSxPQUFPWCxNQUFNO0VBQ2YsQ0FBQztFQUNEYyxVQUFVLEVBQUVBLENBQUVoQixLQUFLLEVBQUVpQixXQUFXLEtBQU07SUFDcEMsTUFBTUwsSUFBSSxHQUFHSyxXQUFXO0lBQ3hCLElBQUloQixRQUFRO0lBRVosSUFBS1csSUFBSSxDQUFDVCxNQUFNLEVBQUc7TUFDakJGLFFBQVEsR0FBRyxJQUFJbkQsWUFBWSxDQUFFQyxpQkFBaUIsQ0FBQytELG1CQUFtQixDQUFDSSxlQUFlLENBQUVOLElBQUksQ0FBQ0MsaUJBQWtCLENBQUUsQ0FBQztNQUM5RyxNQUFNVCxNQUFNLEdBQUdRLElBQUksQ0FBQ1IsTUFBTSxDQUFDQyxHQUFHLENBQUVjLFFBQVEsSUFBSXRFLFNBQVMsQ0FBQ3FFLGVBQWUsQ0FBRUMsUUFBUyxDQUFFLENBQUM7TUFFbkZmLE1BQU0sQ0FBQ2dCLE9BQU8sQ0FBRSxDQUFFZCxLQUFLLEVBQUVlLEtBQUssS0FBTTtRQUNsQ3BCLFFBQVEsQ0FBQ0csTUFBTSxDQUFFaUIsS0FBSyxDQUFFLENBQUNDLGdCQUFnQixDQUFDdEQsS0FBSyxHQUFHc0MsS0FBSyxDQUFDZ0IsZ0JBQWdCLENBQUN0RCxLQUFLO1FBQzlFaUMsUUFBUSxDQUFDRyxNQUFNLENBQUVpQixLQUFLLENBQUUsQ0FBQ0UsZ0JBQWdCLENBQUN2RCxLQUFLLEdBQUdzQyxLQUFLLENBQUNpQixnQkFBZ0IsQ0FBQ3ZELEtBQUs7TUFDaEYsQ0FBRSxDQUFDO0lBQ0wsQ0FBQyxNQUNJO01BQ0hpQyxRQUFRLEdBQUcsSUFBSWpELGFBQWEsQ0FBQyxDQUFDO01BQzlCaUQsUUFBUSxDQUFDYyxrQkFBa0IsR0FBR0gsSUFBSSxDQUFDRyxrQkFBa0I7TUFFckQsTUFBTVgsTUFBTSxHQUFHUSxJQUFJLENBQUNSLE1BQU0sQ0FBQ0MsR0FBRyxDQUFFYyxRQUFRLElBQUl0RSxTQUFTLENBQUNxRSxlQUFlLENBQUVDLFFBQVMsQ0FBRSxDQUFDO01BQ25GZixNQUFNLENBQUNvQixNQUFNLENBQUVsQixLQUFLLElBQUlBLEtBQUssQ0FBQ21CLGFBQWMsQ0FBQyxDQUFDTCxPQUFPLENBQUVkLEtBQUssSUFBSTtRQUM5REwsUUFBUSxDQUFDeUIsY0FBYyxDQUFFcEIsS0FBTSxDQUFDO01BQ2xDLENBQUUsQ0FBQztNQUNIRixNQUFNLENBQUNvQixNQUFNLENBQUVsQixLQUFLLElBQUksQ0FBQ0EsS0FBSyxDQUFDbUIsYUFBYyxDQUFDLENBQUNMLE9BQU8sQ0FBRWQsS0FBSyxJQUFJO1FBQy9ETCxRQUFRLENBQUMwQixRQUFRLENBQUVyQixLQUFLLEVBQUUsS0FBTSxDQUFDO01BQ25DLENBQUUsQ0FBQztNQUVITSxJQUFJLENBQUNKLEtBQUssQ0FBQ1ksT0FBTyxDQUFFUSxPQUFPLElBQUk7UUFDN0IzQixRQUFRLENBQUM0QixPQUFPLENBQUVwRixJQUFJLENBQUN5RSxlQUFlLENBQUVVLE9BQU8sRUFBRXhCLE1BQU8sQ0FBRSxDQUFDO01BQzdELENBQUUsQ0FBQztJQUNMO0lBRUFILFFBQVEsQ0FBQ1MsWUFBWSxHQUFHTyxXQUFXLENBQUNQLFlBQVksS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHN0UsT0FBTyxDQUFDOEUsU0FBUyxDQUFDTyxlQUFlLENBQUVELFdBQVcsQ0FBQ1AsWUFBYSxDQUFDO0lBRWhJVixLQUFLLENBQUNwQyxnQkFBZ0IsQ0FBQ0ksS0FBSyxHQUFHaUMsUUFBUTtFQUN6QyxDQUFDO0VBRUQ2QixXQUFXLEVBQUU7SUFDWDNCLE1BQU0sRUFBRWhFLFNBQVM7SUFDakJpRSxNQUFNLEVBQUVsRSxPQUFPLENBQUVXLFNBQVMsQ0FBQ2tGLFdBQVksQ0FBQztJQUN4Q3ZCLEtBQUssRUFBRXRFLE9BQU8sQ0FBRU8sSUFBSSxDQUFDdUYsTUFBTyxDQUFDO0lBQzdCdEIsWUFBWSxFQUFFckUsVUFBVSxDQUFFUixPQUFPLENBQUM4RSxTQUFVLENBQUM7SUFDN0NFLGlCQUFpQixFQUFFeEUsVUFBVSxDQUFFVSxpQkFBaUIsQ0FBQytELG1CQUFvQixDQUFDO0lBQ3RFQyxrQkFBa0IsRUFBRTFFLFVBQVUsQ0FBRUMsUUFBUztFQUMzQztBQUNGLENBQUUsQ0FBQztBQUVIQyxjQUFjLENBQUMwRixRQUFRLENBQUUscUJBQXFCLEVBQUVoRixtQkFBb0IsQ0FBQztBQUNyRSxlQUFlQSxtQkFBbUIifQ==