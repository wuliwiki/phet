// Copyright 2020-2022, University of Colorado Boulder

/**
 * OscillatorSoundGenerator is a Web Audio oscillator node wrapped in a sound generator so that it can be easily be used
 * in PhET sims.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import phetAudioContext from '../phetAudioContext.js';
import tambo from '../tambo.js';
import SoundGenerator from './SoundGenerator.js';
class OscillatorSoundGenerator extends SoundGenerator {
  // The Web Audio oscillator node that will be created when play is called, and set to null when stopped (Web Audio
  // oscillators are meant to be single use only).

  // other parameters of the oscillator

  constructor(providedOptions) {
    const options = optionize()({
      initialFrequency: 440,
      initialWaveformType: 'sine'
    }, providedOptions);
    super(options);

    // state initialization
    this.oscillatorNode = null;
    this.frequency = options.initialFrequency;
    this.waveformType = options.initialWaveformType;
  }

  /**
   * Starts the oscillator. The name 'play' is used because this is commonly used in the tambo library for sound
   * generators. If the oscillator is already playing, this has no effect.
   */
  play() {
    if (!this.oscillatorNode) {
      this.oscillatorNode = phetAudioContext.createOscillator();
      this.oscillatorNode.type = this.waveformType;
      this.oscillatorNode.frequency.setValueAtTime(this.frequency, phetAudioContext.currentTime);
      this.oscillatorNode.connect(this.masterGainNode);
      this.oscillatorNode.start();
    }
  }

  /**
   * Stops the oscillator. If the oscillator isn't playing, this has no effect.
   */
  stop() {
    if (this.oscillatorNode) {
      this.oscillatorNode.stop();
      this.oscillatorNode = null;
    }
  }

  /**
   * Sets the waveform type.
   */
  setWaveformType(waveformType) {
    this.waveformType = waveformType;
    if (this.oscillatorNode) {
      this.oscillatorNode.type = waveformType;
    }
  }
}
tambo.register('OscillatorSoundGenerator', OscillatorSoundGenerator);
export default OscillatorSoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJwaGV0QXVkaW9Db250ZXh0IiwidGFtYm8iLCJTb3VuZEdlbmVyYXRvciIsIk9zY2lsbGF0b3JTb3VuZEdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImluaXRpYWxGcmVxdWVuY3kiLCJpbml0aWFsV2F2ZWZvcm1UeXBlIiwib3NjaWxsYXRvck5vZGUiLCJmcmVxdWVuY3kiLCJ3YXZlZm9ybVR5cGUiLCJwbGF5IiwiY3JlYXRlT3NjaWxsYXRvciIsInR5cGUiLCJzZXRWYWx1ZUF0VGltZSIsImN1cnJlbnRUaW1lIiwiY29ubmVjdCIsIm1hc3RlckdhaW5Ob2RlIiwic3RhcnQiLCJzdG9wIiwic2V0V2F2ZWZvcm1UeXBlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPc2NpbGxhdG9yU291bmRHZW5lcmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT3NjaWxsYXRvclNvdW5kR2VuZXJhdG9yIGlzIGEgV2ViIEF1ZGlvIG9zY2lsbGF0b3Igbm9kZSB3cmFwcGVkIGluIGEgc291bmQgZ2VuZXJhdG9yIHNvIHRoYXQgaXQgY2FuIGJlIGVhc2lseSBiZSB1c2VkXHJcbiAqIGluIFBoRVQgc2ltcy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgcGhldEF1ZGlvQ29udGV4dCBmcm9tICcuLi9waGV0QXVkaW9Db250ZXh0LmpzJztcclxuaW1wb3J0IHRhbWJvIGZyb20gJy4uL3RhbWJvLmpzJztcclxuaW1wb3J0IFNvdW5kR2VuZXJhdG9yLCB7IFNvdW5kR2VuZXJhdG9yT3B0aW9ucyB9IGZyb20gJy4vU291bmRHZW5lcmF0b3IuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gaW5pdGlhbCBmcmVxdWVuY3kgaW4gSHosIGNhbiBiZSBjaGFuZ2VkIGxhdGVyXHJcbiAgaW5pdGlhbEZyZXF1ZW5jeT86IG51bWJlcjtcclxuXHJcbiAgLy8gaW5pdGlhbCB3YXZlZm9ybSB0eXBlLCBjYW4gYmUgY2hhbmdlZCBsYXRlclxyXG4gIGluaXRpYWxXYXZlZm9ybVR5cGU/OiBPc2NpbGxhdG9yVHlwZTtcclxufTtcclxuZXhwb3J0IHR5cGUgT3NjaWxsYXRvclNvdW5kR2VuZXJhdG9yT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU291bmRHZW5lcmF0b3JPcHRpb25zO1xyXG5cclxuY2xhc3MgT3NjaWxsYXRvclNvdW5kR2VuZXJhdG9yIGV4dGVuZHMgU291bmRHZW5lcmF0b3Ige1xyXG5cclxuICAvLyBUaGUgV2ViIEF1ZGlvIG9zY2lsbGF0b3Igbm9kZSB0aGF0IHdpbGwgYmUgY3JlYXRlZCB3aGVuIHBsYXkgaXMgY2FsbGVkLCBhbmQgc2V0IHRvIG51bGwgd2hlbiBzdG9wcGVkIChXZWIgQXVkaW9cclxuICAvLyBvc2NpbGxhdG9ycyBhcmUgbWVhbnQgdG8gYmUgc2luZ2xlIHVzZSBvbmx5KS5cclxuICBwcml2YXRlIG9zY2lsbGF0b3JOb2RlOiBPc2NpbGxhdG9yTm9kZSB8IG51bGw7XHJcblxyXG4gIC8vIG90aGVyIHBhcmFtZXRlcnMgb2YgdGhlIG9zY2lsbGF0b3JcclxuICBwcml2YXRlIHJlYWRvbmx5IGZyZXF1ZW5jeTogbnVtYmVyO1xyXG4gIHByaXZhdGUgd2F2ZWZvcm1UeXBlOiBPc2NpbGxhdG9yVHlwZTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBPc2NpbGxhdG9yU291bmRHZW5lcmF0b3JPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8T3NjaWxsYXRvclNvdW5kR2VuZXJhdG9yT3B0aW9ucywgU2VsZk9wdGlvbnMsIFNvdW5kR2VuZXJhdG9yT3B0aW9ucz4oKSgge1xyXG4gICAgICBpbml0aWFsRnJlcXVlbmN5OiA0NDAsXHJcbiAgICAgIGluaXRpYWxXYXZlZm9ybVR5cGU6ICdzaW5lJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBzdGF0ZSBpbml0aWFsaXphdGlvblxyXG4gICAgdGhpcy5vc2NpbGxhdG9yTm9kZSA9IG51bGw7XHJcbiAgICB0aGlzLmZyZXF1ZW5jeSA9IG9wdGlvbnMuaW5pdGlhbEZyZXF1ZW5jeTtcclxuICAgIHRoaXMud2F2ZWZvcm1UeXBlID0gb3B0aW9ucy5pbml0aWFsV2F2ZWZvcm1UeXBlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIHRoZSBvc2NpbGxhdG9yLiBUaGUgbmFtZSAncGxheScgaXMgdXNlZCBiZWNhdXNlIHRoaXMgaXMgY29tbW9ubHkgdXNlZCBpbiB0aGUgdGFtYm8gbGlicmFyeSBmb3Igc291bmRcclxuICAgKiBnZW5lcmF0b3JzLiBJZiB0aGUgb3NjaWxsYXRvciBpcyBhbHJlYWR5IHBsYXlpbmcsIHRoaXMgaGFzIG5vIGVmZmVjdC5cclxuICAgKi9cclxuICBwdWJsaWMgcGxheSgpOiB2b2lkIHtcclxuICAgIGlmICggIXRoaXMub3NjaWxsYXRvck5vZGUgKSB7XHJcbiAgICAgIHRoaXMub3NjaWxsYXRvck5vZGUgPSBwaGV0QXVkaW9Db250ZXh0LmNyZWF0ZU9zY2lsbGF0b3IoKTtcclxuICAgICAgdGhpcy5vc2NpbGxhdG9yTm9kZS50eXBlID0gdGhpcy53YXZlZm9ybVR5cGU7XHJcbiAgICAgIHRoaXMub3NjaWxsYXRvck5vZGUuZnJlcXVlbmN5LnNldFZhbHVlQXRUaW1lKCB0aGlzLmZyZXF1ZW5jeSwgcGhldEF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSApO1xyXG4gICAgICB0aGlzLm9zY2lsbGF0b3JOb2RlLmNvbm5lY3QoIHRoaXMubWFzdGVyR2Fpbk5vZGUgKTtcclxuICAgICAgdGhpcy5vc2NpbGxhdG9yTm9kZS5zdGFydCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcHMgdGhlIG9zY2lsbGF0b3IuIElmIHRoZSBvc2NpbGxhdG9yIGlzbid0IHBsYXlpbmcsIHRoaXMgaGFzIG5vIGVmZmVjdC5cclxuICAgKi9cclxuICBwdWJsaWMgc3RvcCgpOiB2b2lkIHtcclxuICAgIGlmICggdGhpcy5vc2NpbGxhdG9yTm9kZSApIHtcclxuICAgICAgdGhpcy5vc2NpbGxhdG9yTm9kZS5zdG9wKCk7XHJcbiAgICAgIHRoaXMub3NjaWxsYXRvck5vZGUgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgd2F2ZWZvcm0gdHlwZS5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0V2F2ZWZvcm1UeXBlKCB3YXZlZm9ybVR5cGU6IE9zY2lsbGF0b3JUeXBlICk6IHZvaWQge1xyXG4gICAgdGhpcy53YXZlZm9ybVR5cGUgPSB3YXZlZm9ybVR5cGU7XHJcbiAgICBpZiAoIHRoaXMub3NjaWxsYXRvck5vZGUgKSB7XHJcbiAgICAgIHRoaXMub3NjaWxsYXRvck5vZGUudHlwZSA9IHdhdmVmb3JtVHlwZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnRhbWJvLnJlZ2lzdGVyKCAnT3NjaWxsYXRvclNvdW5kR2VuZXJhdG9yJywgT3NjaWxsYXRvclNvdW5kR2VuZXJhdG9yICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBPc2NpbGxhdG9yU291bmRHZW5lcmF0b3I7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFDckQsT0FBT0MsS0FBSyxNQUFNLGFBQWE7QUFDL0IsT0FBT0MsY0FBYyxNQUFpQyxxQkFBcUI7QUFZM0UsTUFBTUMsd0JBQXdCLFNBQVNELGNBQWMsQ0FBQztFQUVwRDtFQUNBOztFQUdBOztFQUlPRSxXQUFXQSxDQUFFQyxlQUFpRCxFQUFHO0lBRXRFLE1BQU1DLE9BQU8sR0FBR1AsU0FBUyxDQUFzRSxDQUFDLENBQUU7TUFDaEdRLGdCQUFnQixFQUFFLEdBQUc7TUFDckJDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQSxJQUFJLENBQUNHLGNBQWMsR0FBRyxJQUFJO0lBQzFCLElBQUksQ0FBQ0MsU0FBUyxHQUFHSixPQUFPLENBQUNDLGdCQUFnQjtJQUN6QyxJQUFJLENBQUNJLFlBQVksR0FBR0wsT0FBTyxDQUFDRSxtQkFBbUI7RUFDakQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDU0ksSUFBSUEsQ0FBQSxFQUFTO0lBQ2xCLElBQUssQ0FBQyxJQUFJLENBQUNILGNBQWMsRUFBRztNQUMxQixJQUFJLENBQUNBLGNBQWMsR0FBR1QsZ0JBQWdCLENBQUNhLGdCQUFnQixDQUFDLENBQUM7TUFDekQsSUFBSSxDQUFDSixjQUFjLENBQUNLLElBQUksR0FBRyxJQUFJLENBQUNILFlBQVk7TUFDNUMsSUFBSSxDQUFDRixjQUFjLENBQUNDLFNBQVMsQ0FBQ0ssY0FBYyxDQUFFLElBQUksQ0FBQ0wsU0FBUyxFQUFFVixnQkFBZ0IsQ0FBQ2dCLFdBQVksQ0FBQztNQUM1RixJQUFJLENBQUNQLGNBQWMsQ0FBQ1EsT0FBTyxDQUFFLElBQUksQ0FBQ0MsY0FBZSxDQUFDO01BQ2xELElBQUksQ0FBQ1QsY0FBYyxDQUFDVSxLQUFLLENBQUMsQ0FBQztJQUM3QjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxJQUFJQSxDQUFBLEVBQVM7SUFDbEIsSUFBSyxJQUFJLENBQUNYLGNBQWMsRUFBRztNQUN6QixJQUFJLENBQUNBLGNBQWMsQ0FBQ1csSUFBSSxDQUFDLENBQUM7TUFDMUIsSUFBSSxDQUFDWCxjQUFjLEdBQUcsSUFBSTtJQUM1QjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNTWSxlQUFlQSxDQUFFVixZQUE0QixFQUFTO0lBQzNELElBQUksQ0FBQ0EsWUFBWSxHQUFHQSxZQUFZO0lBQ2hDLElBQUssSUFBSSxDQUFDRixjQUFjLEVBQUc7TUFDekIsSUFBSSxDQUFDQSxjQUFjLENBQUNLLElBQUksR0FBR0gsWUFBWTtJQUN6QztFQUNGO0FBQ0Y7QUFFQVYsS0FBSyxDQUFDcUIsUUFBUSxDQUFFLDBCQUEwQixFQUFFbkIsd0JBQXlCLENBQUM7QUFFdEUsZUFBZUEsd0JBQXdCIn0=