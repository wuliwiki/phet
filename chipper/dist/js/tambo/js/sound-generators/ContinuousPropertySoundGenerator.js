// Copyright 2019-2023, University of Colorado Boulder

/**
 * ContinuousPropertySoundGenerator is a sound generator that alters the playback rate of a sound clip based on the
 * value of a continuous numerical Property.  It is specifically designed to work with sound clips and does not support
 * other types of sound production, such as oscillators.  It is implemented such that the sound fades in when changes
 * occur in the Property's value and fades out out when the value doesn't change for some (configurable) amount of time.
 * This was generalized from GRAVITY_FORCE_LAB_BASICS/ForceSoundGenerator, see
 * https://github.com/phetsims/tambo/issues/76.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import tambo from '../tambo.js';
import SoundClip from './SoundClip.js';
import optionize from '../../../phet-core/js/optionize.js';
class ContinuousPropertySoundGenerator extends SoundClip {
  // duration of inactivity fade out

  // see docs in options type declaration

  // the output level before fade out starts

  // countdown time used for fade out

  /**
   * @param property
   * @param sound - returned by the import directive, should be optimized for good continuous looping, which
   * may require it to be a .wav file, since .mp3 files generally have a bit of silence at the beginning.
   * @param range - the range of values that the provided property can take on
   * @param [providedOptions]
   */
  constructor(property, sound, range, providedOptions) {
    assert && assert(!providedOptions || !providedOptions.loop, 'loop option should be supplied by ContinuousPropertySoundGenerator');
    const options = optionize()({
      initialOutputLevel: 0.7,
      loop: true,
      trimSilence: true,
      fadeStartDelay: 0.2,
      fadeTime: 0.15,
      delayBeforeStop: 0.1,
      playbackRateSpanOctaves: 2,
      playbackRateCenterOffset: 0,
      resetInProgressProperty: null
    }, providedOptions);
    super(sound, options);
    this.fadeTime = options.fadeTime;
    this.delayBeforeStop = options.delayBeforeStop;
    this.nonFadedOutputLevel = options.initialOutputLevel === undefined ? 1 : options.initialOutputLevel;
    this.remainingFadeTime = 0;

    // start with the output level at zero so that the initial sound generation has a bit of fade in
    this.setOutputLevel(0, 0);

    // function for starting the sound or adjusting the volume
    const listener = value => {
      // Update the sound generation when the value changes.
      if (!options.resetInProgressProperty || !options.resetInProgressProperty.value) {
        // calculate the playback rate
        const normalizedValue = Math.log(value / range.min) / Math.log(range.max / range.min);
        const playbackRate = Math.pow(2, (normalizedValue - 0.5) * options.playbackRateSpanOctaves) + options.playbackRateCenterOffset;
        this.setPlaybackRate(playbackRate);
        this.setOutputLevel(this.nonFadedOutputLevel);
        if (!this.isPlaying) {
          this.play();
        }

        // reset the fade countdown
        this.remainingFadeTime = options.fadeStartDelay + options.fadeTime + this.delayBeforeStop;
      }
    };
    property.lazyLink(listener);

    // dispose function
    this.disposeContinuousPropertySoundGenerator = () => property.unlink(listener);
  }
  dispose() {
    this.disposeContinuousPropertySoundGenerator();
    super.dispose();
  }

  /**
   * Step this sound generator, used for fading out the sound in the absence of change.
   * @param dt - change in time (i.e. delta time) in seconds
   */
  step(dt) {
    if (this.remainingFadeTime > 0) {
      this.remainingFadeTime = Math.max(this.remainingFadeTime - dt, 0);
      if (this.remainingFadeTime < this.fadeTime + this.delayBeforeStop && this.outputLevel > 0) {
        // the sound is fading out, adjust the output level
        const outputLevel = Math.max((this.remainingFadeTime - this.delayBeforeStop) / this.fadeTime, 0);
        this.setOutputLevel(outputLevel * this.nonFadedOutputLevel);
      }

      // fade out complete, stop playback
      if (this.remainingFadeTime === 0 && this.isPlaying) {
        this.stop(0);
      }
    }
  }

  /**
   * stop any in-progress sound generation
   */
  reset() {
    this.stop(0);
    this.remainingFadeTime = 0;
  }
}
tambo.register('ContinuousPropertySoundGenerator', ContinuousPropertySoundGenerator);
export default ContinuousPropertySoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW1ibyIsIlNvdW5kQ2xpcCIsIm9wdGlvbml6ZSIsIkNvbnRpbnVvdXNQcm9wZXJ0eVNvdW5kR2VuZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0eSIsInNvdW5kIiwicmFuZ2UiLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJsb29wIiwib3B0aW9ucyIsImluaXRpYWxPdXRwdXRMZXZlbCIsInRyaW1TaWxlbmNlIiwiZmFkZVN0YXJ0RGVsYXkiLCJmYWRlVGltZSIsImRlbGF5QmVmb3JlU3RvcCIsInBsYXliYWNrUmF0ZVNwYW5PY3RhdmVzIiwicGxheWJhY2tSYXRlQ2VudGVyT2Zmc2V0IiwicmVzZXRJblByb2dyZXNzUHJvcGVydHkiLCJub25GYWRlZE91dHB1dExldmVsIiwidW5kZWZpbmVkIiwicmVtYWluaW5nRmFkZVRpbWUiLCJzZXRPdXRwdXRMZXZlbCIsImxpc3RlbmVyIiwidmFsdWUiLCJub3JtYWxpemVkVmFsdWUiLCJNYXRoIiwibG9nIiwibWluIiwibWF4IiwicGxheWJhY2tSYXRlIiwicG93Iiwic2V0UGxheWJhY2tSYXRlIiwiaXNQbGF5aW5nIiwicGxheSIsImxhenlMaW5rIiwiZGlzcG9zZUNvbnRpbnVvdXNQcm9wZXJ0eVNvdW5kR2VuZXJhdG9yIiwidW5saW5rIiwiZGlzcG9zZSIsInN0ZXAiLCJkdCIsIm91dHB1dExldmVsIiwic3RvcCIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb250aW51b3VzUHJvcGVydHlTb3VuZEdlbmVyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb250aW51b3VzUHJvcGVydHlTb3VuZEdlbmVyYXRvciBpcyBhIHNvdW5kIGdlbmVyYXRvciB0aGF0IGFsdGVycyB0aGUgcGxheWJhY2sgcmF0ZSBvZiBhIHNvdW5kIGNsaXAgYmFzZWQgb24gdGhlXHJcbiAqIHZhbHVlIG9mIGEgY29udGludW91cyBudW1lcmljYWwgUHJvcGVydHkuICBJdCBpcyBzcGVjaWZpY2FsbHkgZGVzaWduZWQgdG8gd29yayB3aXRoIHNvdW5kIGNsaXBzIGFuZCBkb2VzIG5vdCBzdXBwb3J0XHJcbiAqIG90aGVyIHR5cGVzIG9mIHNvdW5kIHByb2R1Y3Rpb24sIHN1Y2ggYXMgb3NjaWxsYXRvcnMuICBJdCBpcyBpbXBsZW1lbnRlZCBzdWNoIHRoYXQgdGhlIHNvdW5kIGZhZGVzIGluIHdoZW4gY2hhbmdlc1xyXG4gKiBvY2N1ciBpbiB0aGUgUHJvcGVydHkncyB2YWx1ZSBhbmQgZmFkZXMgb3V0IG91dCB3aGVuIHRoZSB2YWx1ZSBkb2Vzbid0IGNoYW5nZSBmb3Igc29tZSAoY29uZmlndXJhYmxlKSBhbW91bnQgb2YgdGltZS5cclxuICogVGhpcyB3YXMgZ2VuZXJhbGl6ZWQgZnJvbSBHUkFWSVRZX0ZPUkNFX0xBQl9CQVNJQ1MvRm9yY2VTb3VuZEdlbmVyYXRvciwgc2VlXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy90YW1iby9pc3N1ZXMvNzYuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgdGFtYm8gZnJvbSAnLi4vdGFtYm8uanMnO1xyXG5pbXBvcnQgU291bmRDbGlwLCB7IFNvdW5kQ2xpcE9wdGlvbnMgfSBmcm9tICcuL1NvdW5kQ2xpcC5qcyc7XHJcbmltcG9ydCBXcmFwcGVkQXVkaW9CdWZmZXIgZnJvbSAnLi4vV3JhcHBlZEF1ZGlvQnVmZmVyLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gbnVtYmVyIG9mIG9jdGF2ZXMgdGhhdCB0aGUgcGxheWJhY2sgcmF0ZSB3aWxsIHNwYW4sIGxhcmdlciBudW1iZXJzIGluY3JlYXNlIHBpdGNoIHJhbmdlXHJcbiAgcGxheWJhY2tSYXRlU3Bhbk9jdGF2ZXM/OiBudW1iZXI7XHJcblxyXG4gIC8vIHRpbWUgdG8gd2FpdCBiZWZvcmUgc3RhcnRpbmcgZmFkZSBvdXQgaWYgbm8gYWN0aXZpdHksIGluIHNlY29uZHNcclxuICBmYWRlU3RhcnREZWxheT86IG51bWJlcjtcclxuXHJcbiAgLy8gZHVyYXRpb24gb2YgZmFkZSBvdXQsIGluIHNlY29uZHNcclxuICBmYWRlVGltZT86IG51bWJlcjtcclxuXHJcbiAgLy8gYW1vdW50IG9mIHRpbWUgaW4gc2Vjb25kcyBmcm9tIGZ1bGwgZmFkZSB0byBzdG9wIG9mIHNvdW5kLCBkb25lIHRvIGF2b2lkIHNvbmljIGdsaXRjaGVzXHJcbiAgZGVsYXlCZWZvcmVTdG9wPzogbnVtYmVyO1xyXG5cclxuICAvLyBDZW50ZXIgb2Zmc2V0IG9mIHBsYXliYWNrIHJhdGUsIHBvc2l0aXZlIG51bWJlcnMgbW92ZSB0aGUgcGl0Y2ggcmFuZ2UgdXAsIG5lZ2F0aXZlIG51bWJlcnMgbW92ZSBpdCBkb3duLCBhbmQgYVxyXG4gIC8vIHZhbHVlIG9mIHplcm8gaW5kaWNhdGVzIG5vIG9mZnNldCwgc28gdGhlIHBpdGNoIHJhbmdlIHdpbGwgY2VudGVyIGFyb3VuZCB0aGUgaW5oZXJlbnQgcGl0Y2ggb2YgdGhlIHNvdXJjZSBsb29wLlxyXG4gIC8vIFRoaXMgb2Zmc2V0IGlzIGFkZGVkIHRvIHRoZSBjYWxjdWxhdGVkIHBsYXliYWNrIHJhdGUsIHNvIGEgdmFsdWUgb2YgMSB3b3VsZCBtb3ZlIHRoZSByYW5nZSB1cCBhbiBvY3RhdmUsIC0xIHdvdWxkXHJcbiAgLy8gbW92ZSBpdCBkb3duIGFuIG9jdGF2ZSwgMC41IHdvdWxkIG1vdmUgaXQgdXAgYSBwZXJmZWN0IGZpZnRoLCBldGMuXHJcbiAgcGxheWJhY2tSYXRlQ2VudGVyT2Zmc2V0PzogbnVtYmVyO1xyXG5cclxuICAvLyBJZiBwcm92aWRlZCwgdGhpcyBpcyB1c2VkIHRvIHByZXZlbnQgc291bmQgZnJvbSBiZWluZyBwbGF5ZWQgZHVyaW5nIGEgcmVzZXQsIHNpbmNlIHRoZSB2YWx1ZSBvZiB0aGUgcHJvdmlkZWRcclxuICAvLyBQcm9wZXJ0eSB3aWxsIG9mdGVuIGNoYW5nZSB0aGVuLCBhbmQgc291bmQgZ2VuZXJhdGlvbiBtYXkgbm90IGJlIGRlc2lyZWQuXHJcbiAgcmVzZXRJblByb2dyZXNzUHJvcGVydHk/OiBCb29sZWFuUHJvcGVydHkgfCBudWxsO1xyXG59O1xyXG5leHBvcnQgdHlwZSBDb250aW51b3VzUHJvcGVydHlTb3VuZEdlbmVyYXRvck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFNvdW5kQ2xpcE9wdGlvbnM7XHJcblxyXG5jbGFzcyBDb250aW51b3VzUHJvcGVydHlTb3VuZEdlbmVyYXRvciBleHRlbmRzIFNvdW5kQ2xpcCB7XHJcblxyXG4gIC8vIGR1cmF0aW9uIG9mIGluYWN0aXZpdHkgZmFkZSBvdXRcclxuICBwcml2YXRlIHJlYWRvbmx5IGZhZGVUaW1lOiBudW1iZXI7XHJcblxyXG4gIC8vIHNlZSBkb2NzIGluIG9wdGlvbnMgdHlwZSBkZWNsYXJhdGlvblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVsYXlCZWZvcmVTdG9wOiBudW1iZXI7XHJcblxyXG4gIC8vIHRoZSBvdXRwdXQgbGV2ZWwgYmVmb3JlIGZhZGUgb3V0IHN0YXJ0c1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbm9uRmFkZWRPdXRwdXRMZXZlbDogbnVtYmVyO1xyXG5cclxuICAvLyBjb3VudGRvd24gdGltZSB1c2VkIGZvciBmYWRlIG91dFxyXG4gIHByaXZhdGUgcmVtYWluaW5nRmFkZVRpbWU6IG51bWJlcjtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlQ29udGludW91c1Byb3BlcnR5U291bmRHZW5lcmF0b3I6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBzb3VuZCAtIHJldHVybmVkIGJ5IHRoZSBpbXBvcnQgZGlyZWN0aXZlLCBzaG91bGQgYmUgb3B0aW1pemVkIGZvciBnb29kIGNvbnRpbnVvdXMgbG9vcGluZywgd2hpY2hcclxuICAgKiBtYXkgcmVxdWlyZSBpdCB0byBiZSBhIC53YXYgZmlsZSwgc2luY2UgLm1wMyBmaWxlcyBnZW5lcmFsbHkgaGF2ZSBhIGJpdCBvZiBzaWxlbmNlIGF0IHRoZSBiZWdpbm5pbmcuXHJcbiAgICogQHBhcmFtIHJhbmdlIC0gdGhlIHJhbmdlIG9mIHZhbHVlcyB0aGF0IHRoZSBwcm92aWRlZCBwcm9wZXJ0eSBjYW4gdGFrZSBvblxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvcGVydHk6IE51bWJlclByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICBzb3VuZDogV3JhcHBlZEF1ZGlvQnVmZmVyLFxyXG4gICAgICAgICAgICAgICByYW5nZTogUmFuZ2UsXHJcbiAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IENvbnRpbnVvdXNQcm9wZXJ0eVNvdW5kR2VuZXJhdG9yT3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KFxyXG4gICAgICAhcHJvdmlkZWRPcHRpb25zIHx8ICFwcm92aWRlZE9wdGlvbnMubG9vcCxcclxuICAgICAgJ2xvb3Agb3B0aW9uIHNob3VsZCBiZSBzdXBwbGllZCBieSBDb250aW51b3VzUHJvcGVydHlTb3VuZEdlbmVyYXRvcidcclxuICAgICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxDb250aW51b3VzUHJvcGVydHlTb3VuZEdlbmVyYXRvck9wdGlvbnMsIFNlbGZPcHRpb25zLCBTb3VuZENsaXBPcHRpb25zPigpKCB7XHJcbiAgICAgIGluaXRpYWxPdXRwdXRMZXZlbDogMC43LFxyXG4gICAgICBsb29wOiB0cnVlLFxyXG4gICAgICB0cmltU2lsZW5jZTogdHJ1ZSxcclxuICAgICAgZmFkZVN0YXJ0RGVsYXk6IDAuMixcclxuICAgICAgZmFkZVRpbWU6IDAuMTUsXHJcbiAgICAgIGRlbGF5QmVmb3JlU3RvcDogMC4xLFxyXG4gICAgICBwbGF5YmFja1JhdGVTcGFuT2N0YXZlczogMixcclxuICAgICAgcGxheWJhY2tSYXRlQ2VudGVyT2Zmc2V0OiAwLFxyXG4gICAgICByZXNldEluUHJvZ3Jlc3NQcm9wZXJ0eTogbnVsbFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIHNvdW5kLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5mYWRlVGltZSA9IG9wdGlvbnMuZmFkZVRpbWU7XHJcbiAgICB0aGlzLmRlbGF5QmVmb3JlU3RvcCA9IG9wdGlvbnMuZGVsYXlCZWZvcmVTdG9wO1xyXG4gICAgdGhpcy5ub25GYWRlZE91dHB1dExldmVsID0gb3B0aW9ucy5pbml0aWFsT3V0cHV0TGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBvcHRpb25zLmluaXRpYWxPdXRwdXRMZXZlbDtcclxuICAgIHRoaXMucmVtYWluaW5nRmFkZVRpbWUgPSAwO1xyXG5cclxuICAgIC8vIHN0YXJ0IHdpdGggdGhlIG91dHB1dCBsZXZlbCBhdCB6ZXJvIHNvIHRoYXQgdGhlIGluaXRpYWwgc291bmQgZ2VuZXJhdGlvbiBoYXMgYSBiaXQgb2YgZmFkZSBpblxyXG4gICAgdGhpcy5zZXRPdXRwdXRMZXZlbCggMCwgMCApO1xyXG5cclxuICAgIC8vIGZ1bmN0aW9uIGZvciBzdGFydGluZyB0aGUgc291bmQgb3IgYWRqdXN0aW5nIHRoZSB2b2x1bWVcclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKCB2YWx1ZTogbnVtYmVyICkgPT4ge1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHRoZSBzb3VuZCBnZW5lcmF0aW9uIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMuXHJcbiAgICAgIGlmICggIW9wdGlvbnMucmVzZXRJblByb2dyZXNzUHJvcGVydHkgfHwgIW9wdGlvbnMucmVzZXRJblByb2dyZXNzUHJvcGVydHkudmFsdWUgKSB7XHJcblxyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgcGxheWJhY2sgcmF0ZVxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRWYWx1ZSA9IE1hdGgubG9nKCB2YWx1ZSAvIHJhbmdlLm1pbiApIC8gTWF0aC5sb2coIHJhbmdlLm1heCAvIHJhbmdlLm1pbiApO1xyXG4gICAgICAgIGNvbnN0IHBsYXliYWNrUmF0ZSA9IE1hdGgucG93KCAyLCAoIG5vcm1hbGl6ZWRWYWx1ZSAtIDAuNSApICogb3B0aW9ucy5wbGF5YmFja1JhdGVTcGFuT2N0YXZlcyApICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBsYXliYWNrUmF0ZUNlbnRlck9mZnNldDtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRQbGF5YmFja1JhdGUoIHBsYXliYWNrUmF0ZSApO1xyXG4gICAgICAgIHRoaXMuc2V0T3V0cHV0TGV2ZWwoIHRoaXMubm9uRmFkZWRPdXRwdXRMZXZlbCApO1xyXG4gICAgICAgIGlmICggIXRoaXMuaXNQbGF5aW5nICkge1xyXG4gICAgICAgICAgdGhpcy5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZXNldCB0aGUgZmFkZSBjb3VudGRvd25cclxuICAgICAgICB0aGlzLnJlbWFpbmluZ0ZhZGVUaW1lID0gb3B0aW9ucy5mYWRlU3RhcnREZWxheSArIG9wdGlvbnMuZmFkZVRpbWUgKyB0aGlzLmRlbGF5QmVmb3JlU3RvcDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHByb3BlcnR5LmxhenlMaW5rKCBsaXN0ZW5lciApO1xyXG5cclxuICAgIC8vIGRpc3Bvc2UgZnVuY3Rpb25cclxuICAgIHRoaXMuZGlzcG9zZUNvbnRpbnVvdXNQcm9wZXJ0eVNvdW5kR2VuZXJhdG9yID0gKCkgPT4gcHJvcGVydHkudW5saW5rKCBsaXN0ZW5lciApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VDb250aW51b3VzUHJvcGVydHlTb3VuZEdlbmVyYXRvcigpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcCB0aGlzIHNvdW5kIGdlbmVyYXRvciwgdXNlZCBmb3IgZmFkaW5nIG91dCB0aGUgc291bmQgaW4gdGhlIGFic2VuY2Ugb2YgY2hhbmdlLlxyXG4gICAqIEBwYXJhbSBkdCAtIGNoYW5nZSBpbiB0aW1lIChpLmUuIGRlbHRhIHRpbWUpIGluIHNlY29uZHNcclxuICAgKi9cclxuICBwdWJsaWMgc3RlcCggZHQ6IG51bWJlciApOiB2b2lkIHtcclxuICAgIGlmICggdGhpcy5yZW1haW5pbmdGYWRlVGltZSA+IDAgKSB7XHJcbiAgICAgIHRoaXMucmVtYWluaW5nRmFkZVRpbWUgPSBNYXRoLm1heCggdGhpcy5yZW1haW5pbmdGYWRlVGltZSAtIGR0LCAwICk7XHJcblxyXG4gICAgICBpZiAoICggdGhpcy5yZW1haW5pbmdGYWRlVGltZSA8IHRoaXMuZmFkZVRpbWUgKyB0aGlzLmRlbGF5QmVmb3JlU3RvcCApICYmIHRoaXMub3V0cHV0TGV2ZWwgPiAwICkge1xyXG5cclxuICAgICAgICAvLyB0aGUgc291bmQgaXMgZmFkaW5nIG91dCwgYWRqdXN0IHRoZSBvdXRwdXQgbGV2ZWxcclxuICAgICAgICBjb25zdCBvdXRwdXRMZXZlbCA9IE1hdGgubWF4KCAoIHRoaXMucmVtYWluaW5nRmFkZVRpbWUgLSB0aGlzLmRlbGF5QmVmb3JlU3RvcCApIC8gdGhpcy5mYWRlVGltZSwgMCApO1xyXG4gICAgICAgIHRoaXMuc2V0T3V0cHV0TGV2ZWwoIG91dHB1dExldmVsICogdGhpcy5ub25GYWRlZE91dHB1dExldmVsICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGZhZGUgb3V0IGNvbXBsZXRlLCBzdG9wIHBsYXliYWNrXHJcbiAgICAgIGlmICggdGhpcy5yZW1haW5pbmdGYWRlVGltZSA9PT0gMCAmJiB0aGlzLmlzUGxheWluZyApIHtcclxuICAgICAgICB0aGlzLnN0b3AoIDAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogc3RvcCBhbnkgaW4tcHJvZ3Jlc3Mgc291bmQgZ2VuZXJhdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RvcCggMCApO1xyXG4gICAgdGhpcy5yZW1haW5pbmdGYWRlVGltZSA9IDA7XHJcbiAgfVxyXG59XHJcblxyXG50YW1iby5yZWdpc3RlciggJ0NvbnRpbnVvdXNQcm9wZXJ0eVNvdW5kR2VuZXJhdG9yJywgQ29udGludW91c1Byb3BlcnR5U291bmRHZW5lcmF0b3IgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRpbnVvdXNQcm9wZXJ0eVNvdW5kR2VuZXJhdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxTQUFTLE1BQTRCLGdCQUFnQjtBQUU1RCxPQUFPQyxTQUFTLE1BQU0sb0NBQW9DO0FBOEIxRCxNQUFNQyxnQ0FBZ0MsU0FBU0YsU0FBUyxDQUFDO0VBRXZEOztFQUdBOztFQUdBOztFQUdBOztFQUtBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLFFBQXdCLEVBQy9CQyxLQUF5QixFQUN6QkMsS0FBWSxFQUNaQyxlQUF5RCxFQUFHO0lBRXZFQyxNQUFNLElBQUlBLE1BQU0sQ0FDZCxDQUFDRCxlQUFlLElBQUksQ0FBQ0EsZUFBZSxDQUFDRSxJQUFJLEVBQ3pDLG9FQUNGLENBQUM7SUFFRCxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBeUUsQ0FBQyxDQUFFO01BQ25HVSxrQkFBa0IsRUFBRSxHQUFHO01BQ3ZCRixJQUFJLEVBQUUsSUFBSTtNQUNWRyxXQUFXLEVBQUUsSUFBSTtNQUNqQkMsY0FBYyxFQUFFLEdBQUc7TUFDbkJDLFFBQVEsRUFBRSxJQUFJO01BQ2RDLGVBQWUsRUFBRSxHQUFHO01BQ3BCQyx1QkFBdUIsRUFBRSxDQUFDO01BQzFCQyx3QkFBd0IsRUFBRSxDQUFDO01BQzNCQyx1QkFBdUIsRUFBRTtJQUMzQixDQUFDLEVBQUVYLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFRixLQUFLLEVBQUVLLE9BQVEsQ0FBQztJQUV2QixJQUFJLENBQUNJLFFBQVEsR0FBR0osT0FBTyxDQUFDSSxRQUFRO0lBQ2hDLElBQUksQ0FBQ0MsZUFBZSxHQUFHTCxPQUFPLENBQUNLLGVBQWU7SUFDOUMsSUFBSSxDQUFDSSxtQkFBbUIsR0FBR1QsT0FBTyxDQUFDQyxrQkFBa0IsS0FBS1MsU0FBUyxHQUFHLENBQUMsR0FBR1YsT0FBTyxDQUFDQyxrQkFBa0I7SUFDcEcsSUFBSSxDQUFDVSxpQkFBaUIsR0FBRyxDQUFDOztJQUUxQjtJQUNBLElBQUksQ0FBQ0MsY0FBYyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7O0lBRTNCO0lBQ0EsTUFBTUMsUUFBUSxHQUFLQyxLQUFhLElBQU07TUFFcEM7TUFDQSxJQUFLLENBQUNkLE9BQU8sQ0FBQ1EsdUJBQXVCLElBQUksQ0FBQ1IsT0FBTyxDQUFDUSx1QkFBdUIsQ0FBQ00sS0FBSyxFQUFHO1FBRWhGO1FBQ0EsTUFBTUMsZUFBZSxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBRUgsS0FBSyxHQUFHbEIsS0FBSyxDQUFDc0IsR0FBSSxDQUFDLEdBQUdGLElBQUksQ0FBQ0MsR0FBRyxDQUFFckIsS0FBSyxDQUFDdUIsR0FBRyxHQUFHdkIsS0FBSyxDQUFDc0IsR0FBSSxDQUFDO1FBQ3pGLE1BQU1FLFlBQVksR0FBR0osSUFBSSxDQUFDSyxHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUVOLGVBQWUsR0FBRyxHQUFHLElBQUtmLE9BQU8sQ0FBQ00sdUJBQXdCLENBQUMsR0FDMUVOLE9BQU8sQ0FBQ08sd0JBQXdCO1FBRXJELElBQUksQ0FBQ2UsZUFBZSxDQUFFRixZQUFhLENBQUM7UUFDcEMsSUFBSSxDQUFDUixjQUFjLENBQUUsSUFBSSxDQUFDSCxtQkFBb0IsQ0FBQztRQUMvQyxJQUFLLENBQUMsSUFBSSxDQUFDYyxTQUFTLEVBQUc7VUFDckIsSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQztRQUNiOztRQUVBO1FBQ0EsSUFBSSxDQUFDYixpQkFBaUIsR0FBR1gsT0FBTyxDQUFDRyxjQUFjLEdBQUdILE9BQU8sQ0FBQ0ksUUFBUSxHQUFHLElBQUksQ0FBQ0MsZUFBZTtNQUMzRjtJQUNGLENBQUM7SUFDRFgsUUFBUSxDQUFDK0IsUUFBUSxDQUFFWixRQUFTLENBQUM7O0lBRTdCO0lBQ0EsSUFBSSxDQUFDYSx1Q0FBdUMsR0FBRyxNQUFNaEMsUUFBUSxDQUFDaUMsTUFBTSxDQUFFZCxRQUFTLENBQUM7RUFDbEY7RUFFZ0JlLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNGLHVDQUF1QyxDQUFDLENBQUM7SUFDOUMsS0FBSyxDQUFDRSxPQUFPLENBQUMsQ0FBQztFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTQyxJQUFJQSxDQUFFQyxFQUFVLEVBQVM7SUFDOUIsSUFBSyxJQUFJLENBQUNuQixpQkFBaUIsR0FBRyxDQUFDLEVBQUc7TUFDaEMsSUFBSSxDQUFDQSxpQkFBaUIsR0FBR0ssSUFBSSxDQUFDRyxHQUFHLENBQUUsSUFBSSxDQUFDUixpQkFBaUIsR0FBR21CLEVBQUUsRUFBRSxDQUFFLENBQUM7TUFFbkUsSUFBTyxJQUFJLENBQUNuQixpQkFBaUIsR0FBRyxJQUFJLENBQUNQLFFBQVEsR0FBRyxJQUFJLENBQUNDLGVBQWUsSUFBTSxJQUFJLENBQUMwQixXQUFXLEdBQUcsQ0FBQyxFQUFHO1FBRS9GO1FBQ0EsTUFBTUEsV0FBVyxHQUFHZixJQUFJLENBQUNHLEdBQUcsQ0FBRSxDQUFFLElBQUksQ0FBQ1IsaUJBQWlCLEdBQUcsSUFBSSxDQUFDTixlQUFlLElBQUssSUFBSSxDQUFDRCxRQUFRLEVBQUUsQ0FBRSxDQUFDO1FBQ3BHLElBQUksQ0FBQ1EsY0FBYyxDQUFFbUIsV0FBVyxHQUFHLElBQUksQ0FBQ3RCLG1CQUFvQixDQUFDO01BQy9EOztNQUVBO01BQ0EsSUFBSyxJQUFJLENBQUNFLGlCQUFpQixLQUFLLENBQUMsSUFBSSxJQUFJLENBQUNZLFNBQVMsRUFBRztRQUNwRCxJQUFJLENBQUNTLElBQUksQ0FBRSxDQUFFLENBQUM7TUFDaEI7SUFDRjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDRCxJQUFJLENBQUUsQ0FBRSxDQUFDO0lBQ2QsSUFBSSxDQUFDckIsaUJBQWlCLEdBQUcsQ0FBQztFQUM1QjtBQUNGO0FBRUF0QixLQUFLLENBQUM2QyxRQUFRLENBQUUsa0NBQWtDLEVBQUUxQyxnQ0FBaUMsQ0FBQztBQUV0RixlQUFlQSxnQ0FBZ0MifQ==