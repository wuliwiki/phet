// Copyright 2019-2022, University of Colorado Boulder

/**
 * A sound generator that plays sounds each time a property changes to a new value.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import tambo from '../tambo.js';
import MultiClip from './MultiClip.js';
import optionize from '../../../phet-core/js/optionize.js';
class PropertyMultiClip extends MultiClip {
  /**
   * @param property - the property for which sounds are played on value changes
   * @param valueToSoundMap - a map of values to WrappedAudioBuffer objects that is used to define the association
   *                          between values and sounds.
   * @param [providedOptions]
   */
  constructor(property, valueToSoundMap, providedOptions) {
    const options = optionize()({
      linkLazily: true
    }, providedOptions);
    super(valueToSoundMap, options);
    const playSoundForValue = value => {
      this.playAssociatedSound(value);
    };
    if (options.linkLazily) {
      property.lazyLink(playSoundForValue);
    } else {
      property.link(playSoundForValue);
    }

    // dispose function
    this.disposePropertyMultiClip = () => {
      property.unlink(playSoundForValue);
    };
  }

  /**
   * dispose function
   */
  dispose() {
    this.disposePropertyMultiClip();
  }
}
tambo.register('PropertyMultiClip', PropertyMultiClip);
export default PropertyMultiClip;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW1ibyIsIk11bHRpQ2xpcCIsIm9wdGlvbml6ZSIsIlByb3BlcnR5TXVsdGlDbGlwIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0eSIsInZhbHVlVG9Tb3VuZE1hcCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJsaW5rTGF6aWx5IiwicGxheVNvdW5kRm9yVmFsdWUiLCJ2YWx1ZSIsInBsYXlBc3NvY2lhdGVkU291bmQiLCJsYXp5TGluayIsImxpbmsiLCJkaXNwb3NlUHJvcGVydHlNdWx0aUNsaXAiLCJ1bmxpbmsiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm9wZXJ0eU11bHRpQ2xpcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHNvdW5kIGdlbmVyYXRvciB0aGF0IHBsYXlzIHNvdW5kcyBlYWNoIHRpbWUgYSBwcm9wZXJ0eSBjaGFuZ2VzIHRvIGEgbmV3IHZhbHVlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHRhbWJvIGZyb20gJy4uL3RhbWJvLmpzJztcclxuaW1wb3J0IE11bHRpQ2xpcCwgeyBNdWx0aUNsaXBPcHRpb25zIH0gZnJvbSAnLi9NdWx0aUNsaXAuanMnO1xyXG5pbXBvcnQgV3JhcHBlZEF1ZGlvQnVmZmVyIGZyb20gJy4uL1dyYXBwZWRBdWRpb0J1ZmZlci5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG5cclxuICAvLyBDb250cm9scyB3aGV0aGVyIHRoZSBsaW5rYWdlIHRvIHRoZSBwcm9wZXJ0eSBpcyBcImxhenlcIiwgbWVhbmluZyB0aGF0IHRoZSBmaXJzdCBzb3VuZCBpc24ndCBwbGF5ZWQgdW50aWwgYVxyXG4gIC8vIGNoYW5nZSBvZiB2YWx1ZSBvY2N1cnMuICBJZiBzZXQgdG8gZmFsc2UsIHRoaXMgd2lsbCBhdHRlbXB0IHRvIHBsYXkgYSBzb3VuZCB3aGVuIHRoZSBsaW5rIGlzIGluaXRpYWxseSBzZXQgdXAuXHJcbiAgbGlua0xhemlseT86IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBQcm9wZXJ0eU11bHRpQ2xpcE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE11bHRpQ2xpcE9wdGlvbnM7XHJcblxyXG5jbGFzcyBQcm9wZXJ0eU11bHRpQ2xpcDxUPiBleHRlbmRzIE11bHRpQ2xpcDxUPiB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVByb3BlcnR5TXVsdGlDbGlwOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSB0aGUgcHJvcGVydHkgZm9yIHdoaWNoIHNvdW5kcyBhcmUgcGxheWVkIG9uIHZhbHVlIGNoYW5nZXNcclxuICAgKiBAcGFyYW0gdmFsdWVUb1NvdW5kTWFwIC0gYSBtYXAgb2YgdmFsdWVzIHRvIFdyYXBwZWRBdWRpb0J1ZmZlciBvYmplY3RzIHRoYXQgaXMgdXNlZCB0byBkZWZpbmUgdGhlIGFzc29jaWF0aW9uXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGJldHdlZW4gdmFsdWVzIGFuZCBzb3VuZHMuXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eTogUHJvcGVydHk8VD4sIHZhbHVlVG9Tb3VuZE1hcDogTWFwPFQsIFdyYXBwZWRBdWRpb0J1ZmZlcj4sIHByb3ZpZGVkT3B0aW9ucz86IFByb3BlcnR5TXVsdGlDbGlwT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFByb3BlcnR5TXVsdGlDbGlwT3B0aW9ucywgU2VsZk9wdGlvbnMsIE11bHRpQ2xpcE9wdGlvbnM+KCkoIHtcclxuICAgICAgbGlua0xhemlseTogdHJ1ZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIHZhbHVlVG9Tb3VuZE1hcCwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHBsYXlTb3VuZEZvclZhbHVlID0gKCB2YWx1ZTogVCApID0+IHsgdGhpcy5wbGF5QXNzb2NpYXRlZFNvdW5kKCB2YWx1ZSApOyB9O1xyXG5cclxuICAgIGlmICggb3B0aW9ucy5saW5rTGF6aWx5ICkge1xyXG4gICAgICBwcm9wZXJ0eS5sYXp5TGluayggcGxheVNvdW5kRm9yVmFsdWUgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBwcm9wZXJ0eS5saW5rKCBwbGF5U291bmRGb3JWYWx1ZSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRpc3Bvc2UgZnVuY3Rpb25cclxuICAgIHRoaXMuZGlzcG9zZVByb3BlcnR5TXVsdGlDbGlwID0gKCkgPT4geyBwcm9wZXJ0eS51bmxpbmsoIHBsYXlTb3VuZEZvclZhbHVlICk7IH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBkaXNwb3NlIGZ1bmN0aW9uXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VQcm9wZXJ0eU11bHRpQ2xpcCgpO1xyXG4gIH1cclxufVxyXG5cclxudGFtYm8ucmVnaXN0ZXIoICdQcm9wZXJ0eU11bHRpQ2xpcCcsIFByb3BlcnR5TXVsdGlDbGlwICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9wZXJ0eU11bHRpQ2xpcDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsS0FBSyxNQUFNLGFBQWE7QUFDL0IsT0FBT0MsU0FBUyxNQUE0QixnQkFBZ0I7QUFFNUQsT0FBT0MsU0FBUyxNQUFNLG9DQUFvQztBQVcxRCxNQUFNQyxpQkFBaUIsU0FBWUYsU0FBUyxDQUFJO0VBSTlDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTRyxXQUFXQSxDQUFFQyxRQUFxQixFQUFFQyxlQUEyQyxFQUFFQyxlQUEwQyxFQUFHO0lBRW5JLE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUEwRCxDQUFDLENBQUU7TUFDcEZPLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVELGVBQWUsRUFBRUUsT0FBUSxDQUFDO0lBRWpDLE1BQU1FLGlCQUFpQixHQUFLQyxLQUFRLElBQU07TUFBRSxJQUFJLENBQUNDLG1CQUFtQixDQUFFRCxLQUFNLENBQUM7SUFBRSxDQUFDO0lBRWhGLElBQUtILE9BQU8sQ0FBQ0MsVUFBVSxFQUFHO01BQ3hCSixRQUFRLENBQUNRLFFBQVEsQ0FBRUgsaUJBQWtCLENBQUM7SUFDeEMsQ0FBQyxNQUNJO01BQ0hMLFFBQVEsQ0FBQ1MsSUFBSSxDQUFFSixpQkFBa0IsQ0FBQztJQUNwQzs7SUFFQTtJQUNBLElBQUksQ0FBQ0ssd0JBQXdCLEdBQUcsTUFBTTtNQUFFVixRQUFRLENBQUNXLE1BQU0sQ0FBRU4saUJBQWtCLENBQUM7SUFBRSxDQUFDO0VBQ2pGOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQk8sT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0Ysd0JBQXdCLENBQUMsQ0FBQztFQUNqQztBQUNGO0FBRUFmLEtBQUssQ0FBQ2tCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRWYsaUJBQWtCLENBQUM7QUFFeEQsZUFBZUEsaUJBQWlCIn0=