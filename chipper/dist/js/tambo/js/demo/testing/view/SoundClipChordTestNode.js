// Copyright 2020-2022, University of Colorado Boulder

/**
 * Test and demo of the SoundClipChord.
 *
 * @author Michael Kauzamann (PhET Interactive Simulations)
 */

import PhetFont from '../../../../../scenery-phet/js/PhetFont.js';
import { VBox } from '../../../../../scenery/js/imports.js';
import TextPushButton from '../../../../../sun/js/buttons/TextPushButton.js';
import brightMarimba_mp3 from '../../../../sounds/brightMarimba_mp3.js';
import SoundClipChord from '../../../sound-generators/SoundClipChord.js';
import soundManager from '../../../soundManager.js';
import tambo from '../../../tambo.js';
import optionize from '../../../../../phet-core/js/optionize.js';
class SoundClipChordTestNode extends VBox {
  constructor(providedOptions) {
    // sound clips to be played
    const chordSoundClipChord = new SoundClipChord(brightMarimba_mp3);
    const arpeggioSoundClipChord = new SoundClipChord(brightMarimba_mp3, {
      arpeggiate: true
    });
    soundManager.addSoundGenerator(chordSoundClipChord);
    soundManager.addSoundGenerator(arpeggioSoundClipChord);

    // add a button to play a chord
    const playChordButton = new TextPushButton('Play Chord', {
      baseColor: '#aad6cc',
      font: new PhetFont(16),
      soundPlayer: chordSoundClipChord
    });

    // add button to play an arpeggio
    const playArpeggioButton = new TextPushButton('Play Arpeggiated Chord', {
      baseColor: '#DBB1CD',
      font: new PhetFont(16),
      soundPlayer: arpeggioSoundClipChord
    });
    super(optionize()({
      children: [playChordButton, playArpeggioButton],
      spacing: 20
    }, providedOptions));

    // dispose function
    this.disposeSoundClipChordTestNode = () => {
      soundManager.removeSoundGenerator(chordSoundClipChord);
      chordSoundClipChord.dispose();
      soundManager.removeSoundGenerator(arpeggioSoundClipChord);
      arpeggioSoundClipChord.dispose();
    };
  }

  /**
   * Release references to avoid memory leaks.
   */
  dispose() {
    this.disposeSoundClipChordTestNode();
    super.dispose();
  }
}
tambo.register('SoundClipChordTestNode', SoundClipChordTestNode);
export default SoundClipChordTestNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIlZCb3giLCJUZXh0UHVzaEJ1dHRvbiIsImJyaWdodE1hcmltYmFfbXAzIiwiU291bmRDbGlwQ2hvcmQiLCJzb3VuZE1hbmFnZXIiLCJ0YW1ibyIsIm9wdGlvbml6ZSIsIlNvdW5kQ2xpcENob3JkVGVzdE5vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsImNob3JkU291bmRDbGlwQ2hvcmQiLCJhcnBlZ2dpb1NvdW5kQ2xpcENob3JkIiwiYXJwZWdnaWF0ZSIsImFkZFNvdW5kR2VuZXJhdG9yIiwicGxheUNob3JkQnV0dG9uIiwiYmFzZUNvbG9yIiwiZm9udCIsInNvdW5kUGxheWVyIiwicGxheUFycGVnZ2lvQnV0dG9uIiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiZGlzcG9zZVNvdW5kQ2xpcENob3JkVGVzdE5vZGUiLCJyZW1vdmVTb3VuZEdlbmVyYXRvciIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNvdW5kQ2xpcENob3JkVGVzdE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGVzdCBhbmQgZGVtbyBvZiB0aGUgU291bmRDbGlwQ2hvcmQuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6YW1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IFZCb3gsIFZCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRleHRQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1RleHRQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IGJyaWdodE1hcmltYmFfbXAzIGZyb20gJy4uLy4uLy4uLy4uL3NvdW5kcy9icmlnaHRNYXJpbWJhX21wMy5qcyc7XHJcbmltcG9ydCBTb3VuZENsaXBDaG9yZCBmcm9tICcuLi8uLi8uLi9zb3VuZC1nZW5lcmF0b3JzL1NvdW5kQ2xpcENob3JkLmpzJztcclxuaW1wb3J0IHNvdW5kTWFuYWdlciBmcm9tICcuLi8uLi8uLi9zb3VuZE1hbmFnZXIuanMnO1xyXG5pbXBvcnQgdGFtYm8gZnJvbSAnLi4vLi4vLi4vdGFtYm8uanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBTb3VuZENsaXBDaG9yZFRlc3ROb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgVkJveE9wdGlvbnM7XHJcblxyXG5jbGFzcyBTb3VuZENsaXBDaG9yZFRlc3ROb2RlIGV4dGVuZHMgVkJveCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVNvdW5kQ2xpcENob3JkVGVzdE5vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogU291bmRDbGlwQ2hvcmRUZXN0Tm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gc291bmQgY2xpcHMgdG8gYmUgcGxheWVkXHJcbiAgICBjb25zdCBjaG9yZFNvdW5kQ2xpcENob3JkID0gbmV3IFNvdW5kQ2xpcENob3JkKCBicmlnaHRNYXJpbWJhX21wMyApO1xyXG4gICAgY29uc3QgYXJwZWdnaW9Tb3VuZENsaXBDaG9yZCA9IG5ldyBTb3VuZENsaXBDaG9yZCggYnJpZ2h0TWFyaW1iYV9tcDMsIHsgYXJwZWdnaWF0ZTogdHJ1ZSB9ICk7XHJcbiAgICBzb3VuZE1hbmFnZXIuYWRkU291bmRHZW5lcmF0b3IoIGNob3JkU291bmRDbGlwQ2hvcmQgKTtcclxuICAgIHNvdW5kTWFuYWdlci5hZGRTb3VuZEdlbmVyYXRvciggYXJwZWdnaW9Tb3VuZENsaXBDaG9yZCApO1xyXG5cclxuICAgIC8vIGFkZCBhIGJ1dHRvbiB0byBwbGF5IGEgY2hvcmRcclxuICAgIGNvbnN0IHBsYXlDaG9yZEJ1dHRvbiA9IG5ldyBUZXh0UHVzaEJ1dHRvbiggJ1BsYXkgQ2hvcmQnLCB7XHJcbiAgICAgIGJhc2VDb2xvcjogJyNhYWQ2Y2MnLFxyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE2ICksXHJcbiAgICAgIHNvdW5kUGxheWVyOiBjaG9yZFNvdW5kQ2xpcENob3JkXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gYWRkIGJ1dHRvbiB0byBwbGF5IGFuIGFycGVnZ2lvXHJcbiAgICBjb25zdCBwbGF5QXJwZWdnaW9CdXR0b24gPSBuZXcgVGV4dFB1c2hCdXR0b24oICdQbGF5IEFycGVnZ2lhdGVkIENob3JkJywge1xyXG4gICAgICBiYXNlQ29sb3I6ICcjREJCMUNEJyxcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNiApLFxyXG4gICAgICBzb3VuZFBsYXllcjogYXJwZWdnaW9Tb3VuZENsaXBDaG9yZFxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25pemU8U291bmRDbGlwQ2hvcmRUZXN0Tm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBWQm94T3B0aW9ucz4oKSgge1xyXG4gICAgICBjaGlsZHJlbjogWyBwbGF5Q2hvcmRCdXR0b24sIHBsYXlBcnBlZ2dpb0J1dHRvbiBdLFxyXG4gICAgICBzcGFjaW5nOiAyMFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICkgKTtcclxuXHJcbiAgICAvLyBkaXNwb3NlIGZ1bmN0aW9uXHJcbiAgICB0aGlzLmRpc3Bvc2VTb3VuZENsaXBDaG9yZFRlc3ROb2RlID0gKCkgPT4ge1xyXG4gICAgICBzb3VuZE1hbmFnZXIucmVtb3ZlU291bmRHZW5lcmF0b3IoIGNob3JkU291bmRDbGlwQ2hvcmQgKTtcclxuICAgICAgY2hvcmRTb3VuZENsaXBDaG9yZC5kaXNwb3NlKCk7XHJcbiAgICAgIHNvdW5kTWFuYWdlci5yZW1vdmVTb3VuZEdlbmVyYXRvciggYXJwZWdnaW9Tb3VuZENsaXBDaG9yZCApO1xyXG4gICAgICBhcnBlZ2dpb1NvdW5kQ2xpcENob3JkLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxlYXNlIHJlZmVyZW5jZXMgdG8gYXZvaWQgbWVtb3J5IGxlYWtzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlU291bmRDbGlwQ2hvcmRUZXN0Tm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxudGFtYm8ucmVnaXN0ZXIoICdTb3VuZENsaXBDaG9yZFRlc3ROb2RlJywgU291bmRDbGlwQ2hvcmRUZXN0Tm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU291bmRDbGlwQ2hvcmRUZXN0Tm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDRDQUE0QztBQUNqRSxTQUFTQyxJQUFJLFFBQXFCLHNDQUFzQztBQUN4RSxPQUFPQyxjQUFjLE1BQU0saURBQWlEO0FBQzVFLE9BQU9DLGlCQUFpQixNQUFNLHlDQUF5QztBQUN2RSxPQUFPQyxjQUFjLE1BQU0sNkNBQTZDO0FBQ3hFLE9BQU9DLFlBQVksTUFBTSwwQkFBMEI7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLG1CQUFtQjtBQUNyQyxPQUFPQyxTQUFTLE1BQTRCLDBDQUEwQztBQUt0RixNQUFNQyxzQkFBc0IsU0FBU1AsSUFBSSxDQUFDO0VBSWpDUSxXQUFXQSxDQUFFQyxlQUErQyxFQUFHO0lBRXBFO0lBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsSUFBSVAsY0FBYyxDQUFFRCxpQkFBa0IsQ0FBQztJQUNuRSxNQUFNUyxzQkFBc0IsR0FBRyxJQUFJUixjQUFjLENBQUVELGlCQUFpQixFQUFFO01BQUVVLFVBQVUsRUFBRTtJQUFLLENBQUUsQ0FBQztJQUM1RlIsWUFBWSxDQUFDUyxpQkFBaUIsQ0FBRUgsbUJBQW9CLENBQUM7SUFDckROLFlBQVksQ0FBQ1MsaUJBQWlCLENBQUVGLHNCQUF1QixDQUFDOztJQUV4RDtJQUNBLE1BQU1HLGVBQWUsR0FBRyxJQUFJYixjQUFjLENBQUUsWUFBWSxFQUFFO01BQ3hEYyxTQUFTLEVBQUUsU0FBUztNQUNwQkMsSUFBSSxFQUFFLElBQUlqQixRQUFRLENBQUUsRUFBRyxDQUFDO01BQ3hCa0IsV0FBVyxFQUFFUDtJQUNmLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1RLGtCQUFrQixHQUFHLElBQUlqQixjQUFjLENBQUUsd0JBQXdCLEVBQUU7TUFDdkVjLFNBQVMsRUFBRSxTQUFTO01BQ3BCQyxJQUFJLEVBQUUsSUFBSWpCLFFBQVEsQ0FBRSxFQUFHLENBQUM7TUFDeEJrQixXQUFXLEVBQUVOO0lBQ2YsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFTCxTQUFTLENBQTBELENBQUMsQ0FBRTtNQUMzRWEsUUFBUSxFQUFFLENBQUVMLGVBQWUsRUFBRUksa0JBQWtCLENBQUU7TUFDakRFLE9BQU8sRUFBRTtJQUNYLENBQUMsRUFBRVgsZUFBZ0IsQ0FBRSxDQUFDOztJQUV0QjtJQUNBLElBQUksQ0FBQ1ksNkJBQTZCLEdBQUcsTUFBTTtNQUN6Q2pCLFlBQVksQ0FBQ2tCLG9CQUFvQixDQUFFWixtQkFBb0IsQ0FBQztNQUN4REEsbUJBQW1CLENBQUNhLE9BQU8sQ0FBQyxDQUFDO01BQzdCbkIsWUFBWSxDQUFDa0Isb0JBQW9CLENBQUVYLHNCQUF1QixDQUFDO01BQzNEQSxzQkFBc0IsQ0FBQ1ksT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0YsNkJBQTZCLENBQUMsQ0FBQztJQUNwQyxLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWxCLEtBQUssQ0FBQ21CLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRWpCLHNCQUF1QixDQUFDO0FBRWxFLGVBQWVBLHNCQUFzQiJ9