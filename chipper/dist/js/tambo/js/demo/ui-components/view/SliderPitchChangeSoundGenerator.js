// Copyright 2022, University of Colorado Boulder

import ValueChangeSoundPlayer from '../../../sound-generators/ValueChangeSoundPlayer.js';
import tambo from '../../../tambo.js';
import SoundClip from '../../../sound-generators/SoundClip.js';
import brightMarimbaShort_mp3 from '../../../../sounds/brightMarimbaShort_mp3.js';
import soundManager from '../../../soundManager.js';
/**
 * SliderPitchChangeSoundGenerator is intended as a demonstration of a ValueChangeSoundPlayer that changes the pitch
 * (aka the playback rate) of its produced sounds as the slider values change.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

class SliderPitchChangeSoundGenerator extends ValueChangeSoundPlayer {
  /**
   * @param valueRange - the range of values expected and over which sounds will be played
   */
  constructor(valueRange) {
    // sound clip to be used in both the up and down directions for the middle sounds
    const marimbaSoundClip = new SoundClip(brightMarimbaShort_mp3, {
      initialOutputLevel: 0.2,
      rateChangesAffectPlayingSounds: false
    });
    soundManager.addSoundGenerator(marimbaSoundClip);

    // playback rate mapping function
    const middleMovingUpPlaybackRateMapper = value => 0.5 + (value - valueRange.min) / valueRange.getLength();
    const middleMovingDownPlaybackRateMapper = value => 0.4 + (value - valueRange.min) / valueRange.getLength();
    super(valueRange, {
      middleMovingUpSoundPlayer: marimbaSoundClip,
      middleMovingDownSoundPlayer: marimbaSoundClip,
      middleMovingUpPlaybackRateMapper: middleMovingUpPlaybackRateMapper,
      middleMovingDownPlaybackRateMapper: middleMovingDownPlaybackRateMapper,
      numberOfMiddleThresholds: 7
    });
  }
}
tambo.register('SliderPitchChangeSoundGenerator', SliderPitchChangeSoundGenerator);
export default SliderPitchChangeSoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWx1ZUNoYW5nZVNvdW5kUGxheWVyIiwidGFtYm8iLCJTb3VuZENsaXAiLCJicmlnaHRNYXJpbWJhU2hvcnRfbXAzIiwic291bmRNYW5hZ2VyIiwiU2xpZGVyUGl0Y2hDaGFuZ2VTb3VuZEdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwidmFsdWVSYW5nZSIsIm1hcmltYmFTb3VuZENsaXAiLCJpbml0aWFsT3V0cHV0TGV2ZWwiLCJyYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHMiLCJhZGRTb3VuZEdlbmVyYXRvciIsIm1pZGRsZU1vdmluZ1VwUGxheWJhY2tSYXRlTWFwcGVyIiwidmFsdWUiLCJtaW4iLCJnZXRMZW5ndGgiLCJtaWRkbGVNb3ZpbmdEb3duUGxheWJhY2tSYXRlTWFwcGVyIiwibWlkZGxlTW92aW5nVXBTb3VuZFBsYXllciIsIm1pZGRsZU1vdmluZ0Rvd25Tb3VuZFBsYXllciIsIm51bWJlck9mTWlkZGxlVGhyZXNob2xkcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2xpZGVyUGl0Y2hDaGFuZ2VTb3VuZEdlbmVyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5pbXBvcnQgVmFsdWVDaGFuZ2VTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi9zb3VuZC1nZW5lcmF0b3JzL1ZhbHVlQ2hhbmdlU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgdGFtYm8gZnJvbSAnLi4vLi4vLi4vdGFtYm8uanMnO1xyXG5pbXBvcnQgU291bmRDbGlwIGZyb20gJy4uLy4uLy4uL3NvdW5kLWdlbmVyYXRvcnMvU291bmRDbGlwLmpzJztcclxuaW1wb3J0IGJyaWdodE1hcmltYmFTaG9ydF9tcDMgZnJvbSAnLi4vLi4vLi4vLi4vc291bmRzL2JyaWdodE1hcmltYmFTaG9ydF9tcDMuanMnO1xyXG5pbXBvcnQgc291bmRNYW5hZ2VyIGZyb20gJy4uLy4uLy4uL3NvdW5kTWFuYWdlci5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIFNsaWRlclBpdGNoQ2hhbmdlU291bmRHZW5lcmF0b3IgaXMgaW50ZW5kZWQgYXMgYSBkZW1vbnN0cmF0aW9uIG9mIGEgVmFsdWVDaGFuZ2VTb3VuZFBsYXllciB0aGF0IGNoYW5nZXMgdGhlIHBpdGNoXHJcbiAqIChha2EgdGhlIHBsYXliYWNrIHJhdGUpIG9mIGl0cyBwcm9kdWNlZCBzb3VuZHMgYXMgdGhlIHNsaWRlciB2YWx1ZXMgY2hhbmdlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcblxyXG5jbGFzcyBTbGlkZXJQaXRjaENoYW5nZVNvdW5kR2VuZXJhdG9yIGV4dGVuZHMgVmFsdWVDaGFuZ2VTb3VuZFBsYXllciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB2YWx1ZVJhbmdlIC0gdGhlIHJhbmdlIG9mIHZhbHVlcyBleHBlY3RlZCBhbmQgb3ZlciB3aGljaCBzb3VuZHMgd2lsbCBiZSBwbGF5ZWRcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHZhbHVlUmFuZ2U6IFJhbmdlICkge1xyXG5cclxuICAgIC8vIHNvdW5kIGNsaXAgdG8gYmUgdXNlZCBpbiBib3RoIHRoZSB1cCBhbmQgZG93biBkaXJlY3Rpb25zIGZvciB0aGUgbWlkZGxlIHNvdW5kc1xyXG4gICAgY29uc3QgbWFyaW1iYVNvdW5kQ2xpcCA9IG5ldyBTb3VuZENsaXAoIGJyaWdodE1hcmltYmFTaG9ydF9tcDMsIHtcclxuICAgICAgaW5pdGlhbE91dHB1dExldmVsOiAwLjIsXHJcbiAgICAgIHJhdGVDaGFuZ2VzQWZmZWN0UGxheWluZ1NvdW5kczogZmFsc2VcclxuICAgIH0gKTtcclxuICAgIHNvdW5kTWFuYWdlci5hZGRTb3VuZEdlbmVyYXRvciggbWFyaW1iYVNvdW5kQ2xpcCApO1xyXG5cclxuICAgIC8vIHBsYXliYWNrIHJhdGUgbWFwcGluZyBmdW5jdGlvblxyXG4gICAgY29uc3QgbWlkZGxlTW92aW5nVXBQbGF5YmFja1JhdGVNYXBwZXIgPSAoIHZhbHVlOiBudW1iZXIgKSA9PiAwLjUgKyAoIHZhbHVlIC0gdmFsdWVSYW5nZS5taW4gKSAvIHZhbHVlUmFuZ2UuZ2V0TGVuZ3RoKCk7XHJcbiAgICBjb25zdCBtaWRkbGVNb3ZpbmdEb3duUGxheWJhY2tSYXRlTWFwcGVyID0gKCB2YWx1ZTogbnVtYmVyICkgPT4gMC40ICsgKCB2YWx1ZSAtIHZhbHVlUmFuZ2UubWluICkgLyB2YWx1ZVJhbmdlLmdldExlbmd0aCgpO1xyXG5cclxuICAgIHN1cGVyKCB2YWx1ZVJhbmdlLCB7XHJcbiAgICAgIG1pZGRsZU1vdmluZ1VwU291bmRQbGF5ZXI6IG1hcmltYmFTb3VuZENsaXAsXHJcbiAgICAgIG1pZGRsZU1vdmluZ0Rvd25Tb3VuZFBsYXllcjogbWFyaW1iYVNvdW5kQ2xpcCxcclxuICAgICAgbWlkZGxlTW92aW5nVXBQbGF5YmFja1JhdGVNYXBwZXI6IG1pZGRsZU1vdmluZ1VwUGxheWJhY2tSYXRlTWFwcGVyLFxyXG4gICAgICBtaWRkbGVNb3ZpbmdEb3duUGxheWJhY2tSYXRlTWFwcGVyOiBtaWRkbGVNb3ZpbmdEb3duUGxheWJhY2tSYXRlTWFwcGVyLFxyXG4gICAgICBudW1iZXJPZk1pZGRsZVRocmVzaG9sZHM6IDdcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbnRhbWJvLnJlZ2lzdGVyKCAnU2xpZGVyUGl0Y2hDaGFuZ2VTb3VuZEdlbmVyYXRvcicsIFNsaWRlclBpdGNoQ2hhbmdlU291bmRHZW5lcmF0b3IgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNsaWRlclBpdGNoQ2hhbmdlU291bmRHZW5lcmF0b3I7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPQSxzQkFBc0IsTUFBTSxxREFBcUQ7QUFDeEYsT0FBT0MsS0FBSyxNQUFNLG1CQUFtQjtBQUNyQyxPQUFPQyxTQUFTLE1BQU0sd0NBQXdDO0FBQzlELE9BQU9DLHNCQUFzQixNQUFNLDhDQUE4QztBQUNqRixPQUFPQyxZQUFZLE1BQU0sMEJBQTBCO0FBR25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxNQUFNQywrQkFBK0IsU0FBU0wsc0JBQXNCLENBQUM7RUFFbkU7QUFDRjtBQUNBO0VBQ1NNLFdBQVdBLENBQUVDLFVBQWlCLEVBQUc7SUFFdEM7SUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJTixTQUFTLENBQUVDLHNCQUFzQixFQUFFO01BQzlETSxrQkFBa0IsRUFBRSxHQUFHO01BQ3ZCQyw4QkFBOEIsRUFBRTtJQUNsQyxDQUFFLENBQUM7SUFDSE4sWUFBWSxDQUFDTyxpQkFBaUIsQ0FBRUgsZ0JBQWlCLENBQUM7O0lBRWxEO0lBQ0EsTUFBTUksZ0NBQWdDLEdBQUtDLEtBQWEsSUFBTSxHQUFHLEdBQUcsQ0FBRUEsS0FBSyxHQUFHTixVQUFVLENBQUNPLEdBQUcsSUFBS1AsVUFBVSxDQUFDUSxTQUFTLENBQUMsQ0FBQztJQUN2SCxNQUFNQyxrQ0FBa0MsR0FBS0gsS0FBYSxJQUFNLEdBQUcsR0FBRyxDQUFFQSxLQUFLLEdBQUdOLFVBQVUsQ0FBQ08sR0FBRyxJQUFLUCxVQUFVLENBQUNRLFNBQVMsQ0FBQyxDQUFDO0lBRXpILEtBQUssQ0FBRVIsVUFBVSxFQUFFO01BQ2pCVSx5QkFBeUIsRUFBRVQsZ0JBQWdCO01BQzNDVSwyQkFBMkIsRUFBRVYsZ0JBQWdCO01BQzdDSSxnQ0FBZ0MsRUFBRUEsZ0NBQWdDO01BQ2xFSSxrQ0FBa0MsRUFBRUEsa0NBQWtDO01BQ3RFRyx3QkFBd0IsRUFBRTtJQUM1QixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFsQixLQUFLLENBQUNtQixRQUFRLENBQUUsaUNBQWlDLEVBQUVmLCtCQUFnQyxDQUFDO0FBRXBGLGVBQWVBLCtCQUErQiJ9