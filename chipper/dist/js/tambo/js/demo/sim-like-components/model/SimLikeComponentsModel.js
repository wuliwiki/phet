// Copyright 2018-2023, University of Colorado Boulder

/**
 * SimLikeComponentsModel is a model that exists only for the purposes of demonstrating sonification, particularly how
 * view and model elements are used together to hook up sonification elements.
 *
 * @author John Blanco
 */

import BooleanProperty from '../../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../../axon/js/NumberProperty.js';
import tambo from '../../../tambo.js';
import BoxOfBalls from './BoxOfBalls.js';
class SimLikeComponentsModel {
  // a box containing bouncing balls

  // controls the number of balls in the box

  // controls whether the balls are bouncing around in the box or still

  // tracks whether a reset is happening

  constructor() {
    this.boxOfBalls = new BoxOfBalls(135, 80); // size empirically determined
    this.numberOfBallsProperty = new NumberProperty(0);
    this.ballsMovingProperty = new BooleanProperty(false);
    this.resetInProgressProperty = new BooleanProperty(false);

    // Add or remove balls as the count changes.
    this.numberOfBallsProperty.link(desiredNumberOfBalls => {
      const numberBallsInBox = this.boxOfBalls.balls.lengthProperty.get();
      if (desiredNumberOfBalls > numberBallsInBox) {
        _.times(desiredNumberOfBalls - numberBallsInBox, () => {
          this.boxOfBalls.addRandomBall();
        });
      } else if (desiredNumberOfBalls < numberBallsInBox) {
        _.times(numberBallsInBox - desiredNumberOfBalls, () => {
          this.boxOfBalls.removeABall();
        });
      }
    });
  }

  /**
   * @param dt - delta time, in seconds
   */
  step(dt) {
    if (this.ballsMovingProperty.value) {
      this.boxOfBalls.step(dt);
    }
  }

  /**
   */
  reset() {
    this.resetInProgressProperty.value = true;
    this.numberOfBallsProperty.reset();
    this.ballsMovingProperty.reset();
    this.resetInProgressProperty.value = false;
  }
}
tambo.register('SimLikeComponentsModel', SimLikeComponentsModel);
export default SimLikeComponentsModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsInRhbWJvIiwiQm94T2ZCYWxscyIsIlNpbUxpa2VDb21wb25lbnRzTW9kZWwiLCJjb25zdHJ1Y3RvciIsImJveE9mQmFsbHMiLCJudW1iZXJPZkJhbGxzUHJvcGVydHkiLCJiYWxsc01vdmluZ1Byb3BlcnR5IiwicmVzZXRJblByb2dyZXNzUHJvcGVydHkiLCJsaW5rIiwiZGVzaXJlZE51bWJlck9mQmFsbHMiLCJudW1iZXJCYWxsc0luQm94IiwiYmFsbHMiLCJsZW5ndGhQcm9wZXJ0eSIsImdldCIsIl8iLCJ0aW1lcyIsImFkZFJhbmRvbUJhbGwiLCJyZW1vdmVBQmFsbCIsInN0ZXAiLCJkdCIsInZhbHVlIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNpbUxpa2VDb21wb25lbnRzTW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2ltTGlrZUNvbXBvbmVudHNNb2RlbCBpcyBhIG1vZGVsIHRoYXQgZXhpc3RzIG9ubHkgZm9yIHRoZSBwdXJwb3NlcyBvZiBkZW1vbnN0cmF0aW5nIHNvbmlmaWNhdGlvbiwgcGFydGljdWxhcmx5IGhvd1xyXG4gKiB2aWV3IGFuZCBtb2RlbCBlbGVtZW50cyBhcmUgdXNlZCB0b2dldGhlciB0byBob29rIHVwIHNvbmlmaWNhdGlvbiBlbGVtZW50cy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUTW9kZWwgZnJvbSAnLi4vLi4vLi4vLi4vLi4vam9pc3QvanMvVE1vZGVsLmpzJztcclxuaW1wb3J0IHRhbWJvIGZyb20gJy4uLy4uLy4uL3RhbWJvLmpzJztcclxuaW1wb3J0IEJveE9mQmFsbHMgZnJvbSAnLi9Cb3hPZkJhbGxzLmpzJztcclxuXHJcbmNsYXNzIFNpbUxpa2VDb21wb25lbnRzTW9kZWwgaW1wbGVtZW50cyBUTW9kZWwge1xyXG5cclxuICAvLyBhIGJveCBjb250YWluaW5nIGJvdW5jaW5nIGJhbGxzXHJcbiAgcHVibGljIHJlYWRvbmx5IGJveE9mQmFsbHM6IEJveE9mQmFsbHM7XHJcblxyXG4gIC8vIGNvbnRyb2xzIHRoZSBudW1iZXIgb2YgYmFsbHMgaW4gdGhlIGJveFxyXG4gIHB1YmxpYyByZWFkb25seSBudW1iZXJPZkJhbGxzUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICAvLyBjb250cm9scyB3aGV0aGVyIHRoZSBiYWxscyBhcmUgYm91bmNpbmcgYXJvdW5kIGluIHRoZSBib3ggb3Igc3RpbGxcclxuICBwdWJsaWMgcmVhZG9ubHkgYmFsbHNNb3ZpbmdQcm9wZXJ0eTogQm9vbGVhblByb3BlcnR5O1xyXG5cclxuICAvLyB0cmFja3Mgd2hldGhlciBhIHJlc2V0IGlzIGhhcHBlbmluZ1xyXG4gIHB1YmxpYyByZWFkb25seSByZXNldEluUHJvZ3Jlc3NQcm9wZXJ0eTogQm9vbGVhblByb3BlcnR5O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgdGhpcy5ib3hPZkJhbGxzID0gbmV3IEJveE9mQmFsbHMoIDEzNSwgODAgKTsgLy8gc2l6ZSBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcbiAgICB0aGlzLm51bWJlck9mQmFsbHNQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMCApO1xyXG4gICAgdGhpcy5iYWxsc01vdmluZ1Byb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKTtcclxuICAgIHRoaXMucmVzZXRJblByb2dyZXNzUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG5cclxuICAgIC8vIEFkZCBvciByZW1vdmUgYmFsbHMgYXMgdGhlIGNvdW50IGNoYW5nZXMuXHJcbiAgICB0aGlzLm51bWJlck9mQmFsbHNQcm9wZXJ0eS5saW5rKCBkZXNpcmVkTnVtYmVyT2ZCYWxscyA9PiB7XHJcbiAgICAgIGNvbnN0IG51bWJlckJhbGxzSW5Cb3ggPSB0aGlzLmJveE9mQmFsbHMuYmFsbHMubGVuZ3RoUHJvcGVydHkuZ2V0KCk7XHJcbiAgICAgIGlmICggZGVzaXJlZE51bWJlck9mQmFsbHMgPiBudW1iZXJCYWxsc0luQm94ICkge1xyXG4gICAgICAgIF8udGltZXMoIGRlc2lyZWROdW1iZXJPZkJhbGxzIC0gbnVtYmVyQmFsbHNJbkJveCwgKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5ib3hPZkJhbGxzLmFkZFJhbmRvbUJhbGwoKTtcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIGRlc2lyZWROdW1iZXJPZkJhbGxzIDwgbnVtYmVyQmFsbHNJbkJveCApIHtcclxuICAgICAgICBfLnRpbWVzKCBudW1iZXJCYWxsc0luQm94IC0gZGVzaXJlZE51bWJlck9mQmFsbHMsICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuYm94T2ZCYWxscy5yZW1vdmVBQmFsbCgpO1xyXG4gICAgICAgIH0gKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGR0IC0gZGVsdGEgdGltZSwgaW4gc2Vjb25kc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGVwKCBkdDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgaWYgKCB0aGlzLmJhbGxzTW92aW5nUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgIHRoaXMuYm94T2ZCYWxscy5zdGVwKCBkdCApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5yZXNldEluUHJvZ3Jlc3NQcm9wZXJ0eS52YWx1ZSA9IHRydWU7XHJcbiAgICB0aGlzLm51bWJlck9mQmFsbHNQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5iYWxsc01vdmluZ1Byb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnJlc2V0SW5Qcm9ncmVzc1Byb3BlcnR5LnZhbHVlID0gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG50YW1iby5yZWdpc3RlciggJ1NpbUxpa2VDb21wb25lbnRzTW9kZWwnLCBTaW1MaWtlQ29tcG9uZW50c01vZGVsICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTaW1MaWtlQ29tcG9uZW50c01vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSwyQ0FBMkM7QUFDdkUsT0FBT0MsY0FBYyxNQUFNLDBDQUEwQztBQUVyRSxPQUFPQyxLQUFLLE1BQU0sbUJBQW1CO0FBQ3JDLE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFFeEMsTUFBTUMsc0JBQXNCLENBQW1CO0VBRTdDOztFQUdBOztFQUdBOztFQUdBOztFQUdPQyxXQUFXQSxDQUFBLEVBQUc7SUFFbkIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBSUgsVUFBVSxDQUFFLEdBQUcsRUFBRSxFQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQ0kscUJBQXFCLEdBQUcsSUFBSU4sY0FBYyxDQUFFLENBQUUsQ0FBQztJQUNwRCxJQUFJLENBQUNPLG1CQUFtQixHQUFHLElBQUlSLGVBQWUsQ0FBRSxLQUFNLENBQUM7SUFDdkQsSUFBSSxDQUFDUyx1QkFBdUIsR0FBRyxJQUFJVCxlQUFlLENBQUUsS0FBTSxDQUFDOztJQUUzRDtJQUNBLElBQUksQ0FBQ08scUJBQXFCLENBQUNHLElBQUksQ0FBRUMsb0JBQW9CLElBQUk7TUFDdkQsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDTixVQUFVLENBQUNPLEtBQUssQ0FBQ0MsY0FBYyxDQUFDQyxHQUFHLENBQUMsQ0FBQztNQUNuRSxJQUFLSixvQkFBb0IsR0FBR0MsZ0JBQWdCLEVBQUc7UUFDN0NJLENBQUMsQ0FBQ0MsS0FBSyxDQUFFTixvQkFBb0IsR0FBR0MsZ0JBQWdCLEVBQUUsTUFBTTtVQUN0RCxJQUFJLENBQUNOLFVBQVUsQ0FBQ1ksYUFBYSxDQUFDLENBQUM7UUFDakMsQ0FBRSxDQUFDO01BQ0wsQ0FBQyxNQUNJLElBQUtQLG9CQUFvQixHQUFHQyxnQkFBZ0IsRUFBRztRQUNsREksQ0FBQyxDQUFDQyxLQUFLLENBQUVMLGdCQUFnQixHQUFHRCxvQkFBb0IsRUFBRSxNQUFNO1VBQ3RELElBQUksQ0FBQ0wsVUFBVSxDQUFDYSxXQUFXLENBQUMsQ0FBQztRQUMvQixDQUFFLENBQUM7TUFDTDtJQUNGLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxJQUFJQSxDQUFFQyxFQUFVLEVBQVM7SUFDOUIsSUFBSyxJQUFJLENBQUNiLG1CQUFtQixDQUFDYyxLQUFLLEVBQUc7TUFDcEMsSUFBSSxDQUFDaEIsVUFBVSxDQUFDYyxJQUFJLENBQUVDLEVBQUcsQ0FBQztJQUM1QjtFQUNGOztFQUVBO0FBQ0Y7RUFDU0UsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ2QsdUJBQXVCLENBQUNhLEtBQUssR0FBRyxJQUFJO0lBQ3pDLElBQUksQ0FBQ2YscUJBQXFCLENBQUNnQixLQUFLLENBQUMsQ0FBQztJQUNsQyxJQUFJLENBQUNmLG1CQUFtQixDQUFDZSxLQUFLLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUNkLHVCQUF1QixDQUFDYSxLQUFLLEdBQUcsS0FBSztFQUM1QztBQUNGO0FBRUFwQixLQUFLLENBQUNzQixRQUFRLENBQUUsd0JBQXdCLEVBQUVwQixzQkFBdUIsQ0FBQztBQUVsRSxlQUFlQSxzQkFBc0IifQ==