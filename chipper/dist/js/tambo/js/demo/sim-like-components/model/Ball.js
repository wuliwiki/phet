// Copyright 2018-2022, University of Colorado Boulder

/**
 * simple model of a ball
 */

import Emitter from '../../../../../axon/js/Emitter.js';
import Vector2Property from '../../../../../dot/js/Vector2Property.js';
import tambo from '../../../tambo.js';
class Ball {
  constructor(radius, color, initialPosition, initialVelocity) {
    this.radius = radius;
    this.color = color;
    this.positionProperty = new Vector2Property(initialPosition);
    this.velocityProperty = new Vector2Property(initialVelocity);
    this.bounceEmitter = new Emitter({
      parameters: [{
        valueType: 'string'
      }]
    });

    // monitor the velocity Property and fire the emitter when a bounce occurs
    this.velocityProperty.lazyLink((newVelocity, oldVelocity) => {
      // check for wall bounce
      if (oldVelocity.x > 0 && newVelocity.x < 0) {
        this.bounceEmitter.emit('right-wall');
      } else if (oldVelocity.x < 0 && newVelocity.x > 0) {
        this.bounceEmitter.emit('left-wall');
      }

      // check for floor and ceiling bounce
      if (oldVelocity.y > 0 && newVelocity.y < 0) {
        this.bounceEmitter.emit('ceiling');
      } else if (oldVelocity.y < 0 && newVelocity.y > 0) {
        this.bounceEmitter.emit('floor');
      }
    });
  }

  /**
   * restore initial state
   */
  reset() {
    this.positionProperty.reset();
    this.velocityProperty.reset();
  }
}
tambo.register('Ball', Ball);
export default Ball;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiVmVjdG9yMlByb3BlcnR5IiwidGFtYm8iLCJCYWxsIiwiY29uc3RydWN0b3IiLCJyYWRpdXMiLCJjb2xvciIsImluaXRpYWxQb3NpdGlvbiIsImluaXRpYWxWZWxvY2l0eSIsInBvc2l0aW9uUHJvcGVydHkiLCJ2ZWxvY2l0eVByb3BlcnR5IiwiYm91bmNlRW1pdHRlciIsInBhcmFtZXRlcnMiLCJ2YWx1ZVR5cGUiLCJsYXp5TGluayIsIm5ld1ZlbG9jaXR5Iiwib2xkVmVsb2NpdHkiLCJ4IiwiZW1pdCIsInkiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFsbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBzaW1wbGUgbW9kZWwgb2YgYSBiYWxsXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9FbWl0dGVyLmpzJztcclxuaW1wb3J0IFRFbWl0dGVyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvVEVtaXR0ZXIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHRhbWJvIGZyb20gJy4uLy4uLy4uL3RhbWJvLmpzJztcclxuXHJcbmNsYXNzIEJhbGwge1xyXG4gIHB1YmxpYyByZWFkb25seSByYWRpdXM6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgY29sb3I6IENvbG9yO1xyXG4gIHB1YmxpYyByZWFkb25seSBwb3NpdGlvblByb3BlcnR5OiBWZWN0b3IyUHJvcGVydHk7XHJcbiAgcHVibGljIHJlYWRvbmx5IHZlbG9jaXR5UHJvcGVydHk6IFZlY3RvcjJQcm9wZXJ0eTtcclxuICBwdWJsaWMgcmVhZG9ubHkgYm91bmNlRW1pdHRlcjogVEVtaXR0ZXI8WyBzdHJpbmcgXT47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcmFkaXVzOiBudW1iZXIsIGNvbG9yOiBDb2xvciwgaW5pdGlhbFBvc2l0aW9uOiBWZWN0b3IyLCBpbml0aWFsVmVsb2NpdHk6IFZlY3RvcjIgKSB7XHJcblxyXG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XHJcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBpbml0aWFsUG9zaXRpb24gKTtcclxuICAgIHRoaXMudmVsb2NpdHlQcm9wZXJ0eSA9IG5ldyBWZWN0b3IyUHJvcGVydHkoIGluaXRpYWxWZWxvY2l0eSApO1xyXG4gICAgdGhpcy5ib3VuY2VFbWl0dGVyID0gbmV3IEVtaXR0ZXIoIHsgcGFyYW1ldGVyczogWyB7IHZhbHVlVHlwZTogJ3N0cmluZycgfSBdIH0gKTtcclxuXHJcbiAgICAvLyBtb25pdG9yIHRoZSB2ZWxvY2l0eSBQcm9wZXJ0eSBhbmQgZmlyZSB0aGUgZW1pdHRlciB3aGVuIGEgYm91bmNlIG9jY3Vyc1xyXG4gICAgdGhpcy52ZWxvY2l0eVByb3BlcnR5LmxhenlMaW5rKCAoIG5ld1ZlbG9jaXR5LCBvbGRWZWxvY2l0eSApID0+IHtcclxuXHJcbiAgICAgIC8vIGNoZWNrIGZvciB3YWxsIGJvdW5jZVxyXG4gICAgICBpZiAoIG9sZFZlbG9jaXR5LnggPiAwICYmIG5ld1ZlbG9jaXR5LnggPCAwICkge1xyXG4gICAgICAgIHRoaXMuYm91bmNlRW1pdHRlci5lbWl0KCAncmlnaHQtd2FsbCcgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggb2xkVmVsb2NpdHkueCA8IDAgJiYgbmV3VmVsb2NpdHkueCA+IDAgKSB7XHJcbiAgICAgICAgdGhpcy5ib3VuY2VFbWl0dGVyLmVtaXQoICdsZWZ0LXdhbGwnICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGNoZWNrIGZvciBmbG9vciBhbmQgY2VpbGluZyBib3VuY2VcclxuICAgICAgaWYgKCBvbGRWZWxvY2l0eS55ID4gMCAmJiBuZXdWZWxvY2l0eS55IDwgMCApIHtcclxuICAgICAgICB0aGlzLmJvdW5jZUVtaXR0ZXIuZW1pdCggJ2NlaWxpbmcnICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIG9sZFZlbG9jaXR5LnkgPCAwICYmIG5ld1ZlbG9jaXR5LnkgPiAwICkge1xyXG4gICAgICAgIHRoaXMuYm91bmNlRW1pdHRlci5lbWl0KCAnZmxvb3InICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlc3RvcmUgaW5pdGlhbCBzdGF0ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy52ZWxvY2l0eVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG50YW1iby5yZWdpc3RlciggJ0JhbGwnLCBCYWxsICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCYWxsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxtQ0FBbUM7QUFHdkQsT0FBT0MsZUFBZSxNQUFNLDBDQUEwQztBQUV0RSxPQUFPQyxLQUFLLE1BQU0sbUJBQW1CO0FBRXJDLE1BQU1DLElBQUksQ0FBQztFQU9GQyxXQUFXQSxDQUFFQyxNQUFjLEVBQUVDLEtBQVksRUFBRUMsZUFBd0IsRUFBRUMsZUFBd0IsRUFBRztJQUVyRyxJQUFJLENBQUNILE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNHLGdCQUFnQixHQUFHLElBQUlSLGVBQWUsQ0FBRU0sZUFBZ0IsQ0FBQztJQUM5RCxJQUFJLENBQUNHLGdCQUFnQixHQUFHLElBQUlULGVBQWUsQ0FBRU8sZUFBZ0IsQ0FBQztJQUM5RCxJQUFJLENBQUNHLGFBQWEsR0FBRyxJQUFJWCxPQUFPLENBQUU7TUFBRVksVUFBVSxFQUFFLENBQUU7UUFBRUMsU0FBUyxFQUFFO01BQVMsQ0FBQztJQUFHLENBQUUsQ0FBQzs7SUFFL0U7SUFDQSxJQUFJLENBQUNILGdCQUFnQixDQUFDSSxRQUFRLENBQUUsQ0FBRUMsV0FBVyxFQUFFQyxXQUFXLEtBQU07TUFFOUQ7TUFDQSxJQUFLQSxXQUFXLENBQUNDLENBQUMsR0FBRyxDQUFDLElBQUlGLFdBQVcsQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsRUFBRztRQUM1QyxJQUFJLENBQUNOLGFBQWEsQ0FBQ08sSUFBSSxDQUFFLFlBQWEsQ0FBQztNQUN6QyxDQUFDLE1BQ0ksSUFBS0YsV0FBVyxDQUFDQyxDQUFDLEdBQUcsQ0FBQyxJQUFJRixXQUFXLENBQUNFLENBQUMsR0FBRyxDQUFDLEVBQUc7UUFDakQsSUFBSSxDQUFDTixhQUFhLENBQUNPLElBQUksQ0FBRSxXQUFZLENBQUM7TUFDeEM7O01BRUE7TUFDQSxJQUFLRixXQUFXLENBQUNHLENBQUMsR0FBRyxDQUFDLElBQUlKLFdBQVcsQ0FBQ0ksQ0FBQyxHQUFHLENBQUMsRUFBRztRQUM1QyxJQUFJLENBQUNSLGFBQWEsQ0FBQ08sSUFBSSxDQUFFLFNBQVUsQ0FBQztNQUN0QyxDQUFDLE1BQ0ksSUFBS0YsV0FBVyxDQUFDRyxDQUFDLEdBQUcsQ0FBQyxJQUFJSixXQUFXLENBQUNJLENBQUMsR0FBRyxDQUFDLEVBQUc7UUFDakQsSUFBSSxDQUFDUixhQUFhLENBQUNPLElBQUksQ0FBRSxPQUFRLENBQUM7TUFDcEM7SUFDRixDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7RUFDU0UsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ1gsZ0JBQWdCLENBQUNXLEtBQUssQ0FBQyxDQUFDO0lBQzdCLElBQUksQ0FBQ1YsZ0JBQWdCLENBQUNVLEtBQUssQ0FBQyxDQUFDO0VBQy9CO0FBQ0Y7QUFFQWxCLEtBQUssQ0FBQ21CLFFBQVEsQ0FBRSxNQUFNLEVBQUVsQixJQUFLLENBQUM7QUFFOUIsZUFBZUEsSUFBSSJ9