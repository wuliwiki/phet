// Copyright 2020-2022, University of Colorado Boulder

/**
 * @author John Blanco (PhET Interactive Simulations)
 */

/**
 * Decode a base-64 encoded sound into a Uint8Array.  This does *not* do audio decompression, such as that needed for
 * interpreting MP3 files.
 */
const base64SoundToByteArray = (audioContext, base64Sound) => {
  const soundData = base64Sound.replace(new RegExp('^.*,'), ''); // remove the mime header
  const byteChars = atob(soundData);
  const byteArray = new Uint8Array(byteChars.length);
  for (let j = 0; j < byteArray.length; j++) {
    // A note to future maintainers of this code: The line below, strictly speaking, seems to disregard the highest 8
    // bits of the character code, since strings in JavaScript are UTF-16.  This seems a little odd, but testing showed
    // that the decoded base64 data never had values above 255, so it worked.  This code was leveraged from examples
    // found on the web, and has worked through all our testing, so perhaps the upper bits are simply never used in this
    // decoding process.  That seems like the best explanation.  However, if we one day run into issues with sound
    // decoding, this might warrant further scrutiny.
    byteArray[j] = byteChars.charCodeAt(j);
  }
  return byteArray;
};
export default base64SoundToByteArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlNjRTb3VuZFRvQnl0ZUFycmF5IiwiYXVkaW9Db250ZXh0IiwiYmFzZTY0U291bmQiLCJzb3VuZERhdGEiLCJyZXBsYWNlIiwiUmVnRXhwIiwiYnl0ZUNoYXJzIiwiYXRvYiIsImJ5dGVBcnJheSIsIlVpbnQ4QXJyYXkiLCJsZW5ndGgiLCJqIiwiY2hhckNvZGVBdCJdLCJzb3VyY2VzIjpbImJhc2U2NFNvdW5kVG9CeXRlQXJyYXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG4vKipcclxuICogRGVjb2RlIGEgYmFzZS02NCBlbmNvZGVkIHNvdW5kIGludG8gYSBVaW50OEFycmF5LiAgVGhpcyBkb2VzICpub3QqIGRvIGF1ZGlvIGRlY29tcHJlc3Npb24sIHN1Y2ggYXMgdGhhdCBuZWVkZWQgZm9yXHJcbiAqIGludGVycHJldGluZyBNUDMgZmlsZXMuXHJcbiAqL1xyXG5jb25zdCBiYXNlNjRTb3VuZFRvQnl0ZUFycmF5ID0gKCBhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dCwgYmFzZTY0U291bmQ6IHN0cmluZyApOiBVaW50OEFycmF5ID0+IHtcclxuICBjb25zdCBzb3VuZERhdGEgPSBiYXNlNjRTb3VuZC5yZXBsYWNlKCBuZXcgUmVnRXhwKCAnXi4qLCcgKSwgJycgKTsgLy8gcmVtb3ZlIHRoZSBtaW1lIGhlYWRlclxyXG4gIGNvbnN0IGJ5dGVDaGFycyA9IGF0b2IoIHNvdW5kRGF0YSApO1xyXG4gIGNvbnN0IGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KCBieXRlQ2hhcnMubGVuZ3RoICk7XHJcbiAgZm9yICggbGV0IGogPSAwOyBqIDwgYnl0ZUFycmF5Lmxlbmd0aDsgaisrICkge1xyXG5cclxuICAgIC8vIEEgbm90ZSB0byBmdXR1cmUgbWFpbnRhaW5lcnMgb2YgdGhpcyBjb2RlOiBUaGUgbGluZSBiZWxvdywgc3RyaWN0bHkgc3BlYWtpbmcsIHNlZW1zIHRvIGRpc3JlZ2FyZCB0aGUgaGlnaGVzdCA4XHJcbiAgICAvLyBiaXRzIG9mIHRoZSBjaGFyYWN0ZXIgY29kZSwgc2luY2Ugc3RyaW5ncyBpbiBKYXZhU2NyaXB0IGFyZSBVVEYtMTYuICBUaGlzIHNlZW1zIGEgbGl0dGxlIG9kZCwgYnV0IHRlc3Rpbmcgc2hvd2VkXHJcbiAgICAvLyB0aGF0IHRoZSBkZWNvZGVkIGJhc2U2NCBkYXRhIG5ldmVyIGhhZCB2YWx1ZXMgYWJvdmUgMjU1LCBzbyBpdCB3b3JrZWQuICBUaGlzIGNvZGUgd2FzIGxldmVyYWdlZCBmcm9tIGV4YW1wbGVzXHJcbiAgICAvLyBmb3VuZCBvbiB0aGUgd2ViLCBhbmQgaGFzIHdvcmtlZCB0aHJvdWdoIGFsbCBvdXIgdGVzdGluZywgc28gcGVyaGFwcyB0aGUgdXBwZXIgYml0cyBhcmUgc2ltcGx5IG5ldmVyIHVzZWQgaW4gdGhpc1xyXG4gICAgLy8gZGVjb2RpbmcgcHJvY2Vzcy4gIFRoYXQgc2VlbXMgbGlrZSB0aGUgYmVzdCBleHBsYW5hdGlvbi4gIEhvd2V2ZXIsIGlmIHdlIG9uZSBkYXkgcnVuIGludG8gaXNzdWVzIHdpdGggc291bmRcclxuICAgIC8vIGRlY29kaW5nLCB0aGlzIG1pZ2h0IHdhcnJhbnQgZnVydGhlciBzY3J1dGlueS5cclxuICAgIGJ5dGVBcnJheVsgaiBdID0gYnl0ZUNoYXJzLmNoYXJDb2RlQXQoIGogKTtcclxuICB9XHJcbiAgcmV0dXJuIGJ5dGVBcnJheTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJhc2U2NFNvdW5kVG9CeXRlQXJyYXk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxzQkFBc0IsR0FBR0EsQ0FBRUMsWUFBMEIsRUFBRUMsV0FBbUIsS0FBa0I7RUFDaEcsTUFBTUMsU0FBUyxHQUFHRCxXQUFXLENBQUNFLE9BQU8sQ0FBRSxJQUFJQyxNQUFNLENBQUUsTUFBTyxDQUFDLEVBQUUsRUFBRyxDQUFDLENBQUMsQ0FBQztFQUNuRSxNQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBRUosU0FBVSxDQUFDO0VBQ25DLE1BQU1LLFNBQVMsR0FBRyxJQUFJQyxVQUFVLENBQUVILFNBQVMsQ0FBQ0ksTUFBTyxDQUFDO0VBQ3BELEtBQU0sSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxTQUFTLENBQUNFLE1BQU0sRUFBRUMsQ0FBQyxFQUFFLEVBQUc7SUFFM0M7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0FILFNBQVMsQ0FBRUcsQ0FBQyxDQUFFLEdBQUdMLFNBQVMsQ0FBQ00sVUFBVSxDQUFFRCxDQUFFLENBQUM7RUFDNUM7RUFDQSxPQUFPSCxTQUFTO0FBQ2xCLENBQUM7QUFFRCxlQUFlUixzQkFBc0IifQ==