// Copyright 2019-2022, University of Colorado Boulder

/**
 * The multiSelectionSoundPlayerFactory singleton is used to create a set of sound players that are similar to one
 * another but slightly different, and can thus be used to sonically indicate that a selection is being made from a
 * group of available options. It was originally developed to support radio buttons (and was called
 * radioButtonSoundPlayerFactory), but its usage was expanded to combo boxes, so the name was generalized.  It may be
 * appropriate to use in other contexts as well.
 *
 * By providing a factory for these sound players, we can avoid having to construct unique instances for each case where
 * a sound player is needed, thus conserving memory and minimizing load time.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import radioButtonV2_mp3 from '../sounds/radioButtonV2_mp3.js';
import SoundClip from './sound-generators/SoundClip.js';
import soundManager from './soundManager.js';
import tambo from './tambo.js';
class MultiSelectionSoundPlayerFactory {
  // sound clip that will serve as the basis for all sound plays, will be constructed the first time it is requested

  // instances of sound players, indexed by position in the group, created as needed

  constructor() {
    this._basisSoundClip = null;
    this.soundPlayers = [];
  }

  /**
   * get the single instance of the sound player, and create it if it doesn't exist yet
   */
  getSoundClipInstance() {
    if (!this._basisSoundClip) {
      this._basisSoundClip = new SoundClip(radioButtonV2_mp3, {
        initialOutputLevel: 0.7,
        rateChangesAffectPlayingSounds: false
      });

      // automatically register the sound generator
      soundManager.addSoundGenerator(this._basisSoundClip, {
        categoryName: 'user-interface'
      });
    }
    return this._basisSoundClip;
  }

  /**
   * Get a sound player for the specified position that will produce a sound that varies from the primary sound based on
   * provided parameter.
   * @param positionIndex - the position within the radio button group, combo box, or whatever
   */
  getSelectionSoundPlayer(positionIndex) {
    if (!this.soundPlayers[positionIndex]) {
      // calculate a playback rate that starts from the natural frequency of the sound and goes down by whole tones
      const playbackRate = Math.pow(2, -positionIndex / 12);

      // create the sound player for this rate
      this.soundPlayers[positionIndex] = new FixedSpeedSoundClipPlayer(this.getSoundClipInstance(), playbackRate);
    }

    // return the sound player that corresponds to this position in the radio button group
    return this.soundPlayers[positionIndex];
  }
}

/**
 * FixedSpeedSoundClipPlayer is an inner class that plays a sound clip at the provided playback rate.  The general
 * idea here is that one sound clip can be used at a number of different speeds, thus saving memory and load time
 * versus having a bunch of separate instances.  The provided sound clip is assumed to be registered with the sound
 * manager already, this class does not register it.
 */
class FixedSpeedSoundClipPlayer {
  constructor(soundPlayer, playbackRate) {
    this.soundPlayer = soundPlayer;
    this.playbackRate = playbackRate;
  }
  play() {
    this.soundPlayer.setPlaybackRate(this.playbackRate);
    this.soundPlayer.play();
  }
  stop() {
    this.soundPlayer.stop();
  }
}
const multiSelectionSoundPlayerFactory = new MultiSelectionSoundPlayerFactory();
tambo.register('multiSelectionSoundPlayerFactory', multiSelectionSoundPlayerFactory);
export default multiSelectionSoundPlayerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyYWRpb0J1dHRvblYyX21wMyIsIlNvdW5kQ2xpcCIsInNvdW5kTWFuYWdlciIsInRhbWJvIiwiTXVsdGlTZWxlY3Rpb25Tb3VuZFBsYXllckZhY3RvcnkiLCJjb25zdHJ1Y3RvciIsIl9iYXNpc1NvdW5kQ2xpcCIsInNvdW5kUGxheWVycyIsImdldFNvdW5kQ2xpcEluc3RhbmNlIiwiaW5pdGlhbE91dHB1dExldmVsIiwicmF0ZUNoYW5nZXNBZmZlY3RQbGF5aW5nU291bmRzIiwiYWRkU291bmRHZW5lcmF0b3IiLCJjYXRlZ29yeU5hbWUiLCJnZXRTZWxlY3Rpb25Tb3VuZFBsYXllciIsInBvc2l0aW9uSW5kZXgiLCJwbGF5YmFja1JhdGUiLCJNYXRoIiwicG93IiwiRml4ZWRTcGVlZFNvdW5kQ2xpcFBsYXllciIsInNvdW5kUGxheWVyIiwicGxheSIsInNldFBsYXliYWNrUmF0ZSIsInN0b3AiLCJtdWx0aVNlbGVjdGlvblNvdW5kUGxheWVyRmFjdG9yeSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsibXVsdGlTZWxlY3Rpb25Tb3VuZFBsYXllckZhY3RvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIG11bHRpU2VsZWN0aW9uU291bmRQbGF5ZXJGYWN0b3J5IHNpbmdsZXRvbiBpcyB1c2VkIHRvIGNyZWF0ZSBhIHNldCBvZiBzb3VuZCBwbGF5ZXJzIHRoYXQgYXJlIHNpbWlsYXIgdG8gb25lXHJcbiAqIGFub3RoZXIgYnV0IHNsaWdodGx5IGRpZmZlcmVudCwgYW5kIGNhbiB0aHVzIGJlIHVzZWQgdG8gc29uaWNhbGx5IGluZGljYXRlIHRoYXQgYSBzZWxlY3Rpb24gaXMgYmVpbmcgbWFkZSBmcm9tIGFcclxuICogZ3JvdXAgb2YgYXZhaWxhYmxlIG9wdGlvbnMuIEl0IHdhcyBvcmlnaW5hbGx5IGRldmVsb3BlZCB0byBzdXBwb3J0IHJhZGlvIGJ1dHRvbnMgKGFuZCB3YXMgY2FsbGVkXHJcbiAqIHJhZGlvQnV0dG9uU291bmRQbGF5ZXJGYWN0b3J5KSwgYnV0IGl0cyB1c2FnZSB3YXMgZXhwYW5kZWQgdG8gY29tYm8gYm94ZXMsIHNvIHRoZSBuYW1lIHdhcyBnZW5lcmFsaXplZC4gIEl0IG1heSBiZVxyXG4gKiBhcHByb3ByaWF0ZSB0byB1c2UgaW4gb3RoZXIgY29udGV4dHMgYXMgd2VsbC5cclxuICpcclxuICogQnkgcHJvdmlkaW5nIGEgZmFjdG9yeSBmb3IgdGhlc2Ugc291bmQgcGxheWVycywgd2UgY2FuIGF2b2lkIGhhdmluZyB0byBjb25zdHJ1Y3QgdW5pcXVlIGluc3RhbmNlcyBmb3IgZWFjaCBjYXNlIHdoZXJlXHJcbiAqIGEgc291bmQgcGxheWVyIGlzIG5lZWRlZCwgdGh1cyBjb25zZXJ2aW5nIG1lbW9yeSBhbmQgbWluaW1pemluZyBsb2FkIHRpbWUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHJhZGlvQnV0dG9uVjJfbXAzIGZyb20gJy4uL3NvdW5kcy9yYWRpb0J1dHRvblYyX21wMy5qcyc7XHJcbmltcG9ydCBTb3VuZENsaXAgZnJvbSAnLi9zb3VuZC1nZW5lcmF0b3JzL1NvdW5kQ2xpcC5qcyc7XHJcbmltcG9ydCBzb3VuZE1hbmFnZXIgZnJvbSAnLi9zb3VuZE1hbmFnZXIuanMnO1xyXG5pbXBvcnQgdGFtYm8gZnJvbSAnLi90YW1iby5qcyc7XHJcbmltcG9ydCBUU291bmRQbGF5ZXIgZnJvbSAnLi9UU291bmRQbGF5ZXIuanMnO1xyXG5cclxuY2xhc3MgTXVsdGlTZWxlY3Rpb25Tb3VuZFBsYXllckZhY3Rvcnkge1xyXG5cclxuICAvLyBzb3VuZCBjbGlwIHRoYXQgd2lsbCBzZXJ2ZSBhcyB0aGUgYmFzaXMgZm9yIGFsbCBzb3VuZCBwbGF5cywgd2lsbCBiZSBjb25zdHJ1Y3RlZCB0aGUgZmlyc3QgdGltZSBpdCBpcyByZXF1ZXN0ZWRcclxuICBwcml2YXRlIF9iYXNpc1NvdW5kQ2xpcDogU291bmRDbGlwIHwgbnVsbDtcclxuXHJcbiAgLy8gaW5zdGFuY2VzIG9mIHNvdW5kIHBsYXllcnMsIGluZGV4ZWQgYnkgcG9zaXRpb24gaW4gdGhlIGdyb3VwLCBjcmVhdGVkIGFzIG5lZWRlZFxyXG4gIHByaXZhdGUgcmVhZG9ubHkgc291bmRQbGF5ZXJzOiBUU291bmRQbGF5ZXJbXTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fYmFzaXNTb3VuZENsaXAgPSBudWxsO1xyXG4gICAgdGhpcy5zb3VuZFBsYXllcnMgPSBbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldCB0aGUgc2luZ2xlIGluc3RhbmNlIG9mIHRoZSBzb3VuZCBwbGF5ZXIsIGFuZCBjcmVhdGUgaXQgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXRcclxuICAgKi9cclxuICBwcml2YXRlIGdldFNvdW5kQ2xpcEluc3RhbmNlKCk6IFNvdW5kQ2xpcCB7XHJcbiAgICBpZiAoICF0aGlzLl9iYXNpc1NvdW5kQ2xpcCApIHtcclxuICAgICAgdGhpcy5fYmFzaXNTb3VuZENsaXAgPSBuZXcgU291bmRDbGlwKCByYWRpb0J1dHRvblYyX21wMywge1xyXG4gICAgICAgIGluaXRpYWxPdXRwdXRMZXZlbDogMC43LFxyXG4gICAgICAgIHJhdGVDaGFuZ2VzQWZmZWN0UGxheWluZ1NvdW5kczogZmFsc2VcclxuICAgICAgfSApO1xyXG5cclxuICAgICAgLy8gYXV0b21hdGljYWxseSByZWdpc3RlciB0aGUgc291bmQgZ2VuZXJhdG9yXHJcbiAgICAgIHNvdW5kTWFuYWdlci5hZGRTb3VuZEdlbmVyYXRvciggdGhpcy5fYmFzaXNTb3VuZENsaXAsIHsgY2F0ZWdvcnlOYW1lOiAndXNlci1pbnRlcmZhY2UnIH0gKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9iYXNpc1NvdW5kQ2xpcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIHNvdW5kIHBsYXllciBmb3IgdGhlIHNwZWNpZmllZCBwb3NpdGlvbiB0aGF0IHdpbGwgcHJvZHVjZSBhIHNvdW5kIHRoYXQgdmFyaWVzIGZyb20gdGhlIHByaW1hcnkgc291bmQgYmFzZWQgb25cclxuICAgKiBwcm92aWRlZCBwYXJhbWV0ZXIuXHJcbiAgICogQHBhcmFtIHBvc2l0aW9uSW5kZXggLSB0aGUgcG9zaXRpb24gd2l0aGluIHRoZSByYWRpbyBidXR0b24gZ3JvdXAsIGNvbWJvIGJveCwgb3Igd2hhdGV2ZXJcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2VsZWN0aW9uU291bmRQbGF5ZXIoIHBvc2l0aW9uSW5kZXg6IG51bWJlciApOiBUU291bmRQbGF5ZXIge1xyXG5cclxuICAgIGlmICggIXRoaXMuc291bmRQbGF5ZXJzWyBwb3NpdGlvbkluZGV4IF0gKSB7XHJcblxyXG4gICAgICAvLyBjYWxjdWxhdGUgYSBwbGF5YmFjayByYXRlIHRoYXQgc3RhcnRzIGZyb20gdGhlIG5hdHVyYWwgZnJlcXVlbmN5IG9mIHRoZSBzb3VuZCBhbmQgZ29lcyBkb3duIGJ5IHdob2xlIHRvbmVzXHJcbiAgICAgIGNvbnN0IHBsYXliYWNrUmF0ZSA9IE1hdGgucG93KCAyLCAtcG9zaXRpb25JbmRleCAvIDEyICk7XHJcblxyXG4gICAgICAvLyBjcmVhdGUgdGhlIHNvdW5kIHBsYXllciBmb3IgdGhpcyByYXRlXHJcbiAgICAgIHRoaXMuc291bmRQbGF5ZXJzWyBwb3NpdGlvbkluZGV4IF0gPSBuZXcgRml4ZWRTcGVlZFNvdW5kQ2xpcFBsYXllcihcclxuICAgICAgICB0aGlzLmdldFNvdW5kQ2xpcEluc3RhbmNlKCksXHJcbiAgICAgICAgcGxheWJhY2tSYXRlXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJuIHRoZSBzb3VuZCBwbGF5ZXIgdGhhdCBjb3JyZXNwb25kcyB0byB0aGlzIHBvc2l0aW9uIGluIHRoZSByYWRpbyBidXR0b24gZ3JvdXBcclxuICAgIHJldHVybiB0aGlzLnNvdW5kUGxheWVyc1sgcG9zaXRpb25JbmRleCBdO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEZpeGVkU3BlZWRTb3VuZENsaXBQbGF5ZXIgaXMgYW4gaW5uZXIgY2xhc3MgdGhhdCBwbGF5cyBhIHNvdW5kIGNsaXAgYXQgdGhlIHByb3ZpZGVkIHBsYXliYWNrIHJhdGUuICBUaGUgZ2VuZXJhbFxyXG4gKiBpZGVhIGhlcmUgaXMgdGhhdCBvbmUgc291bmQgY2xpcCBjYW4gYmUgdXNlZCBhdCBhIG51bWJlciBvZiBkaWZmZXJlbnQgc3BlZWRzLCB0aHVzIHNhdmluZyBtZW1vcnkgYW5kIGxvYWQgdGltZVxyXG4gKiB2ZXJzdXMgaGF2aW5nIGEgYnVuY2ggb2Ygc2VwYXJhdGUgaW5zdGFuY2VzLiAgVGhlIHByb3ZpZGVkIHNvdW5kIGNsaXAgaXMgYXNzdW1lZCB0byBiZSByZWdpc3RlcmVkIHdpdGggdGhlIHNvdW5kXHJcbiAqIG1hbmFnZXIgYWxyZWFkeSwgdGhpcyBjbGFzcyBkb2VzIG5vdCByZWdpc3RlciBpdC5cclxuICovXHJcbmNsYXNzIEZpeGVkU3BlZWRTb3VuZENsaXBQbGF5ZXIge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHNvdW5kUGxheWVyOiBTb3VuZENsaXA7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBwbGF5YmFja1JhdGU6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzb3VuZFBsYXllcjogU291bmRDbGlwLCBwbGF5YmFja1JhdGU6IG51bWJlciApIHtcclxuICAgIHRoaXMuc291bmRQbGF5ZXIgPSBzb3VuZFBsYXllcjtcclxuICAgIHRoaXMucGxheWJhY2tSYXRlID0gcGxheWJhY2tSYXRlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBsYXkoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNvdW5kUGxheWVyLnNldFBsYXliYWNrUmF0ZSggdGhpcy5wbGF5YmFja1JhdGUgKTtcclxuICAgIHRoaXMuc291bmRQbGF5ZXIucGxheSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0b3AoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNvdW5kUGxheWVyLnN0b3AoKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG11bHRpU2VsZWN0aW9uU291bmRQbGF5ZXJGYWN0b3J5ID0gbmV3IE11bHRpU2VsZWN0aW9uU291bmRQbGF5ZXJGYWN0b3J5KCk7XHJcbnRhbWJvLnJlZ2lzdGVyKCAnbXVsdGlTZWxlY3Rpb25Tb3VuZFBsYXllckZhY3RvcnknLCBtdWx0aVNlbGVjdGlvblNvdW5kUGxheWVyRmFjdG9yeSApO1xyXG5leHBvcnQgZGVmYXVsdCBtdWx0aVNlbGVjdGlvblNvdW5kUGxheWVyRmFjdG9yeTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxpQkFBaUIsTUFBTSxnQ0FBZ0M7QUFDOUQsT0FBT0MsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBQzVDLE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBRzlCLE1BQU1DLGdDQUFnQyxDQUFDO0VBRXJDOztFQUdBOztFQUdPQyxXQUFXQSxDQUFBLEVBQUc7SUFDbkIsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSTtJQUMzQixJQUFJLENBQUNDLFlBQVksR0FBRyxFQUFFO0VBQ3hCOztFQUVBO0FBQ0Y7QUFDQTtFQUNVQyxvQkFBb0JBLENBQUEsRUFBYztJQUN4QyxJQUFLLENBQUMsSUFBSSxDQUFDRixlQUFlLEVBQUc7TUFDM0IsSUFBSSxDQUFDQSxlQUFlLEdBQUcsSUFBSUwsU0FBUyxDQUFFRCxpQkFBaUIsRUFBRTtRQUN2RFMsa0JBQWtCLEVBQUUsR0FBRztRQUN2QkMsOEJBQThCLEVBQUU7TUFDbEMsQ0FBRSxDQUFDOztNQUVIO01BQ0FSLFlBQVksQ0FBQ1MsaUJBQWlCLENBQUUsSUFBSSxDQUFDTCxlQUFlLEVBQUU7UUFBRU0sWUFBWSxFQUFFO01BQWlCLENBQUUsQ0FBQztJQUM1RjtJQUNBLE9BQU8sSUFBSSxDQUFDTixlQUFlO0VBQzdCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU08sdUJBQXVCQSxDQUFFQyxhQUFxQixFQUFpQjtJQUVwRSxJQUFLLENBQUMsSUFBSSxDQUFDUCxZQUFZLENBQUVPLGFBQWEsQ0FBRSxFQUFHO01BRXpDO01BQ0EsTUFBTUMsWUFBWSxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBRSxDQUFDLEVBQUUsQ0FBQ0gsYUFBYSxHQUFHLEVBQUcsQ0FBQzs7TUFFdkQ7TUFDQSxJQUFJLENBQUNQLFlBQVksQ0FBRU8sYUFBYSxDQUFFLEdBQUcsSUFBSUkseUJBQXlCLENBQ2hFLElBQUksQ0FBQ1Ysb0JBQW9CLENBQUMsQ0FBQyxFQUMzQk8sWUFDRixDQUFDO0lBQ0g7O0lBRUE7SUFDQSxPQUFPLElBQUksQ0FBQ1IsWUFBWSxDQUFFTyxhQUFhLENBQUU7RUFDM0M7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNSSx5QkFBeUIsQ0FBQztFQUt2QmIsV0FBV0EsQ0FBRWMsV0FBc0IsRUFBRUosWUFBb0IsRUFBRztJQUNqRSxJQUFJLENBQUNJLFdBQVcsR0FBR0EsV0FBVztJQUM5QixJQUFJLENBQUNKLFlBQVksR0FBR0EsWUFBWTtFQUNsQztFQUVPSyxJQUFJQSxDQUFBLEVBQVM7SUFDbEIsSUFBSSxDQUFDRCxXQUFXLENBQUNFLGVBQWUsQ0FBRSxJQUFJLENBQUNOLFlBQWEsQ0FBQztJQUNyRCxJQUFJLENBQUNJLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7RUFDekI7RUFFT0UsSUFBSUEsQ0FBQSxFQUFTO0lBQ2xCLElBQUksQ0FBQ0gsV0FBVyxDQUFDRyxJQUFJLENBQUMsQ0FBQztFQUN6QjtBQUNGO0FBRUEsTUFBTUMsZ0NBQWdDLEdBQUcsSUFBSW5CLGdDQUFnQyxDQUFDLENBQUM7QUFDL0VELEtBQUssQ0FBQ3FCLFFBQVEsQ0FBRSxrQ0FBa0MsRUFBRUQsZ0NBQWlDLENBQUM7QUFDdEYsZUFBZUEsZ0NBQWdDIn0=