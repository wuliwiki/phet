// Copyright 2021-2022, University of Colorado Boulder

/**
 * PeakDetectorAudioNode is a Web Audio node that can be used to detect peak audio output values in an audio signal
 * chain.  The detected peak audio values are output to the console.  This file contains the portion that runs in the
 * main JavaScript thread, which is referred to as the "AudioWorklet Node" in the online documentation.  There is a
 * counterpart portion that runs in the Web Audio rendering thread that is referred to as the "AudioWorklet Processor".
 *
 * This is intended for diagnostic purposes only, and should not be included in production code.  It likely won't work
 * in built code anyway, since it makes a direct file reference for including the worklet processor code.
 *
 * Also note that as of this writing (Apr 2021), audio worklets are not supported in Safari.
 *
 * To use, create an instance and connect the node whose output you want to measure.  Example:
 *
 *    const peakDetector = new PeakDetectorAudioNode();
 *    this.masterGainNode.connect( peakDetector );
 *
 * TODO: !!! This does not work on all of PhET's supported platforms, so it should not be incorporated into any
 *       production code.  It should be used for debugging only.  See https://github.com/phetsims/tambo/issues/133#issuecomment-861042659.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import phetAudioContext from './phetAudioContext.js';
import tambo from './tambo.js';
class PeakDetectorAudioNode extends AudioWorkletNode {
  constructor(providedOptions) {
    const options = optionize()({
      logZeroValues: false
    }, providedOptions);
    super(phetAudioContext, 'peak-detector');

    // Listen for messages from the audio worklet processor and log peak values to the console.
    this.port.onmessage = event => {
      if (event.data.peak !== undefined) {
        const peak = event.data.peak;
        if (peak > 0 || options.logZeroValues) {
          console.log(`peak = ${peak}`);
        }
      }
    };
  }
}

// Load the worklet code that will run on the audio rendering thread.
console.log('loading peak-detector module on audio rendering thread...');
phetAudioContext.audioWorklet.addModule('../../tambo/js/peak-detector.js').then(() => {
  console.log('peak detector worklet loaded successfully');
}).catch(err => {
  console.warn(`error while loading peak detector worklet, peak detector probably won't work, error: ${err}`);
});
tambo.register('PeakDetectorAudioNode', PeakDetectorAudioNode);
export default PeakDetectorAudioNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJwaGV0QXVkaW9Db250ZXh0IiwidGFtYm8iLCJQZWFrRGV0ZWN0b3JBdWRpb05vZGUiLCJBdWRpb1dvcmtsZXROb2RlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibG9nWmVyb1ZhbHVlcyIsInBvcnQiLCJvbm1lc3NhZ2UiLCJldmVudCIsImRhdGEiLCJwZWFrIiwidW5kZWZpbmVkIiwiY29uc29sZSIsImxvZyIsImF1ZGlvV29ya2xldCIsImFkZE1vZHVsZSIsInRoZW4iLCJjYXRjaCIsImVyciIsIndhcm4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBlYWtEZXRlY3RvckF1ZGlvTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQZWFrRGV0ZWN0b3JBdWRpb05vZGUgaXMgYSBXZWIgQXVkaW8gbm9kZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGRldGVjdCBwZWFrIGF1ZGlvIG91dHB1dCB2YWx1ZXMgaW4gYW4gYXVkaW8gc2lnbmFsXHJcbiAqIGNoYWluLiAgVGhlIGRldGVjdGVkIHBlYWsgYXVkaW8gdmFsdWVzIGFyZSBvdXRwdXQgdG8gdGhlIGNvbnNvbGUuICBUaGlzIGZpbGUgY29udGFpbnMgdGhlIHBvcnRpb24gdGhhdCBydW5zIGluIHRoZVxyXG4gKiBtYWluIEphdmFTY3JpcHQgdGhyZWFkLCB3aGljaCBpcyByZWZlcnJlZCB0byBhcyB0aGUgXCJBdWRpb1dvcmtsZXQgTm9kZVwiIGluIHRoZSBvbmxpbmUgZG9jdW1lbnRhdGlvbi4gIFRoZXJlIGlzIGFcclxuICogY291bnRlcnBhcnQgcG9ydGlvbiB0aGF0IHJ1bnMgaW4gdGhlIFdlYiBBdWRpbyByZW5kZXJpbmcgdGhyZWFkIHRoYXQgaXMgcmVmZXJyZWQgdG8gYXMgdGhlIFwiQXVkaW9Xb3JrbGV0IFByb2Nlc3NvclwiLlxyXG4gKlxyXG4gKiBUaGlzIGlzIGludGVuZGVkIGZvciBkaWFnbm9zdGljIHB1cnBvc2VzIG9ubHksIGFuZCBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHByb2R1Y3Rpb24gY29kZS4gIEl0IGxpa2VseSB3b24ndCB3b3JrXHJcbiAqIGluIGJ1aWx0IGNvZGUgYW55d2F5LCBzaW5jZSBpdCBtYWtlcyBhIGRpcmVjdCBmaWxlIHJlZmVyZW5jZSBmb3IgaW5jbHVkaW5nIHRoZSB3b3JrbGV0IHByb2Nlc3NvciBjb2RlLlxyXG4gKlxyXG4gKiBBbHNvIG5vdGUgdGhhdCBhcyBvZiB0aGlzIHdyaXRpbmcgKEFwciAyMDIxKSwgYXVkaW8gd29ya2xldHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gU2FmYXJpLlxyXG4gKlxyXG4gKiBUbyB1c2UsIGNyZWF0ZSBhbiBpbnN0YW5jZSBhbmQgY29ubmVjdCB0aGUgbm9kZSB3aG9zZSBvdXRwdXQgeW91IHdhbnQgdG8gbWVhc3VyZS4gIEV4YW1wbGU6XHJcbiAqXHJcbiAqICAgIGNvbnN0IHBlYWtEZXRlY3RvciA9IG5ldyBQZWFrRGV0ZWN0b3JBdWRpb05vZGUoKTtcclxuICogICAgdGhpcy5tYXN0ZXJHYWluTm9kZS5jb25uZWN0KCBwZWFrRGV0ZWN0b3IgKTtcclxuICpcclxuICogVE9ETzogISEhIFRoaXMgZG9lcyBub3Qgd29yayBvbiBhbGwgb2YgUGhFVCdzIHN1cHBvcnRlZCBwbGF0Zm9ybXMsIHNvIGl0IHNob3VsZCBub3QgYmUgaW5jb3Jwb3JhdGVkIGludG8gYW55XHJcbiAqICAgICAgIHByb2R1Y3Rpb24gY29kZS4gIEl0IHNob3VsZCBiZSB1c2VkIGZvciBkZWJ1Z2dpbmcgb25seS4gIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdGFtYm8vaXNzdWVzLzEzMyNpc3N1ZWNvbW1lbnQtODYxMDQyNjU5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBwaGV0QXVkaW9Db250ZXh0IGZyb20gJy4vcGhldEF1ZGlvQ29udGV4dC5qcyc7XHJcbmltcG9ydCB0YW1ibyBmcm9tICcuL3RhbWJvLmpzJztcclxuXHJcbmV4cG9ydCB0eXBlIFBlYWtEZXRlY3RvckF1ZGlvTm9kZU9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIElmIHRydWUsIHplcm8gdmFsdWVzIHdpbGwgYmUgb3V0cHV0LCBvdGhlcndpc2Ugbm8gb3V0cHV0IHdpbGwgb2NjdXIgaWYgdGhlIHBlYWsgdmFsdWUgZGV0ZWN0ZWQgZm9yIGEgZ2l2ZW4gdGltZVxyXG4gIC8vIGludGVydmFsIGlzIHplcm8uXHJcbiAgbG9nWmVyb1ZhbHVlcz86IGJvb2xlYW47XHJcbn07XHJcblxyXG5jbGFzcyBQZWFrRGV0ZWN0b3JBdWRpb05vZGUgZXh0ZW5kcyBBdWRpb1dvcmtsZXROb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBQZWFrRGV0ZWN0b3JBdWRpb05vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UGVha0RldGVjdG9yQXVkaW9Ob2RlT3B0aW9ucywgUGVha0RldGVjdG9yQXVkaW9Ob2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICBsb2daZXJvVmFsdWVzOiBmYWxzZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIHBoZXRBdWRpb0NvbnRleHQsICdwZWFrLWRldGVjdG9yJyApO1xyXG5cclxuICAgIC8vIExpc3RlbiBmb3IgbWVzc2FnZXMgZnJvbSB0aGUgYXVkaW8gd29ya2xldCBwcm9jZXNzb3IgYW5kIGxvZyBwZWFrIHZhbHVlcyB0byB0aGUgY29uc29sZS5cclxuICAgIHRoaXMucG9ydC5vbm1lc3NhZ2UgPSBldmVudCA9PiB7XHJcbiAgICAgIGlmICggZXZlbnQuZGF0YS5wZWFrICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgY29uc3QgcGVhayA9IGV2ZW50LmRhdGEucGVhaztcclxuICAgICAgICBpZiAoIHBlYWsgPiAwIHx8IG9wdGlvbnMubG9nWmVyb1ZhbHVlcyApIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCBgcGVhayA9ICR7cGVha31gICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuLy8gTG9hZCB0aGUgd29ya2xldCBjb2RlIHRoYXQgd2lsbCBydW4gb24gdGhlIGF1ZGlvIHJlbmRlcmluZyB0aHJlYWQuXHJcbmNvbnNvbGUubG9nKCAnbG9hZGluZyBwZWFrLWRldGVjdG9yIG1vZHVsZSBvbiBhdWRpbyByZW5kZXJpbmcgdGhyZWFkLi4uJyApO1xyXG5waGV0QXVkaW9Db250ZXh0LmF1ZGlvV29ya2xldC5hZGRNb2R1bGUoICcuLi8uLi90YW1iby9qcy9wZWFrLWRldGVjdG9yLmpzJyApXHJcbiAgLnRoZW4oICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCAncGVhayBkZXRlY3RvciB3b3JrbGV0IGxvYWRlZCBzdWNjZXNzZnVsbHknICk7XHJcbiAgfSApXHJcbiAgLmNhdGNoKCBlcnIgPT4ge1xyXG4gICAgY29uc29sZS53YXJuKCBgZXJyb3Igd2hpbGUgbG9hZGluZyBwZWFrIGRldGVjdG9yIHdvcmtsZXQsIHBlYWsgZGV0ZWN0b3IgcHJvYmFibHkgd29uJ3Qgd29yaywgZXJyb3I6ICR7ZXJyfWAgKTtcclxuICB9ICk7XHJcblxyXG50YW1iby5yZWdpc3RlciggJ1BlYWtEZXRlY3RvckF1ZGlvTm9kZScsIFBlYWtEZXRlY3RvckF1ZGlvTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBQZWFrRGV0ZWN0b3JBdWRpb05vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFTOUIsTUFBTUMscUJBQXFCLFNBQVNDLGdCQUFnQixDQUFDO0VBRTVDQyxXQUFXQSxDQUFFQyxlQUE4QyxFQUFHO0lBRW5FLE1BQU1DLE9BQU8sR0FBR1AsU0FBUyxDQUE2RCxDQUFDLENBQUU7TUFDdkZRLGFBQWEsRUFBRTtJQUNqQixDQUFDLEVBQUVGLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFTCxnQkFBZ0IsRUFBRSxlQUFnQixDQUFDOztJQUUxQztJQUNBLElBQUksQ0FBQ1EsSUFBSSxDQUFDQyxTQUFTLEdBQUdDLEtBQUssSUFBSTtNQUM3QixJQUFLQSxLQUFLLENBQUNDLElBQUksQ0FBQ0MsSUFBSSxLQUFLQyxTQUFTLEVBQUc7UUFDbkMsTUFBTUQsSUFBSSxHQUFHRixLQUFLLENBQUNDLElBQUksQ0FBQ0MsSUFBSTtRQUM1QixJQUFLQSxJQUFJLEdBQUcsQ0FBQyxJQUFJTixPQUFPLENBQUNDLGFBQWEsRUFBRztVQUN2Q08sT0FBTyxDQUFDQyxHQUFHLENBQUcsVUFBU0gsSUFBSyxFQUFFLENBQUM7UUFDakM7TUFDRjtJQUNGLENBQUM7RUFDSDtBQUNGOztBQUVBO0FBQ0FFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLDJEQUE0RCxDQUFDO0FBQzFFZixnQkFBZ0IsQ0FBQ2dCLFlBQVksQ0FBQ0MsU0FBUyxDQUFFLGlDQUFrQyxDQUFDLENBQ3pFQyxJQUFJLENBQUUsTUFBTTtFQUNYSixPQUFPLENBQUNDLEdBQUcsQ0FBRSwyQ0FBNEMsQ0FBQztBQUM1RCxDQUFFLENBQUMsQ0FDRkksS0FBSyxDQUFFQyxHQUFHLElBQUk7RUFDYk4sT0FBTyxDQUFDTyxJQUFJLENBQUcsd0ZBQXVGRCxHQUFJLEVBQUUsQ0FBQztBQUMvRyxDQUFFLENBQUM7QUFFTG5CLEtBQUssQ0FBQ3FCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRXBCLHFCQUFzQixDQUFDO0FBQ2hFLGVBQWVBLHFCQUFxQiJ9