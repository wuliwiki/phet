// Copyright 2019-2022, University of Colorado Boulder

/**
 * BinMapper is an object that maps a continuous value to one of a finite number of "bins".
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import tambo from './tambo.js';
import optionize from '../../phet-core/js/optionize.js';
class BinMapper {
  constructor(valueRange, numBins, providedOptions) {
    // parameter checking
    assert && assert(numBins > 0);
    const options = optionize()({
      tolerateOutOfRangeValues: false
    }, providedOptions);
    this.minValue = valueRange.min;
    this.maxValue = valueRange.max;
    this.span = valueRange.getLength();
    this.numBins = numBins;
    this.options = options;
  }

  /**
   * Map the provided value to a bin.
   */
  mapToBin(value) {
    if (!this.options.tolerateOutOfRangeValues) {
      assert && assert(value <= this.maxValue);
      assert && assert(value >= this.minValue);
    }
    const proportion = (value - this.minValue) / this.span;

    // this calculation means that values on the boundaries will go into the higher bin except for the max value
    return Math.min(Math.floor(proportion * this.numBins), this.numBins - 1);
  }
}
tambo.register('BinMapper', BinMapper);
export default BinMapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW1ibyIsIm9wdGlvbml6ZSIsIkJpbk1hcHBlciIsImNvbnN0cnVjdG9yIiwidmFsdWVSYW5nZSIsIm51bUJpbnMiLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJvcHRpb25zIiwidG9sZXJhdGVPdXRPZlJhbmdlVmFsdWVzIiwibWluVmFsdWUiLCJtaW4iLCJtYXhWYWx1ZSIsIm1heCIsInNwYW4iLCJnZXRMZW5ndGgiLCJtYXBUb0JpbiIsInZhbHVlIiwicHJvcG9ydGlvbiIsIk1hdGgiLCJmbG9vciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmluTWFwcGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJpbk1hcHBlciBpcyBhbiBvYmplY3QgdGhhdCBtYXBzIGEgY29udGludW91cyB2YWx1ZSB0byBvbmUgb2YgYSBmaW5pdGUgbnVtYmVyIG9mIFwiYmluc1wiLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCB0YW1ibyBmcm9tICcuL3RhbWJvLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBCaW5NYXBwZXJPcHRpb25zID0ge1xyXG5cclxuICAvLyBBbGxvdyB2YWx1ZXMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgc3BlY2lmaWVkIHJhbmdlIChpZiBmYWxzZSwgYW4gYXNzZXJ0IG9jY3VycyBvbiBvdXQtb2YtcmFuZ2UgdmFsdWVzKS5cclxuICB0b2xlcmF0ZU91dE9mUmFuZ2VWYWx1ZXM/OiBib29sZWFuO1xyXG59O1xyXG5cclxuY2xhc3MgQmluTWFwcGVyIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IG1pblZhbHVlOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBtYXhWYWx1ZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgc3BhbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbnVtQmluczogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogQmluTWFwcGVyT3B0aW9ucztcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZVJhbmdlOiBSYW5nZSwgbnVtQmluczogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM/OiBCaW5NYXBwZXJPcHRpb25zICkge1xyXG5cclxuICAgIC8vIHBhcmFtZXRlciBjaGVja2luZ1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbnVtQmlucyA+IDAgKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJpbk1hcHBlck9wdGlvbnMsIEJpbk1hcHBlck9wdGlvbnM+KCkoIHtcclxuICAgICAgdG9sZXJhdGVPdXRPZlJhbmdlVmFsdWVzOiBmYWxzZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5taW5WYWx1ZSA9IHZhbHVlUmFuZ2UubWluO1xyXG4gICAgdGhpcy5tYXhWYWx1ZSA9IHZhbHVlUmFuZ2UubWF4O1xyXG4gICAgdGhpcy5zcGFuID0gdmFsdWVSYW5nZS5nZXRMZW5ndGgoKTtcclxuICAgIHRoaXMubnVtQmlucyA9IG51bUJpbnM7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFwIHRoZSBwcm92aWRlZCB2YWx1ZSB0byBhIGJpbi5cclxuICAgKi9cclxuICBwdWJsaWMgbWFwVG9CaW4oIHZhbHVlOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICAgIGlmICggIXRoaXMub3B0aW9ucy50b2xlcmF0ZU91dE9mUmFuZ2VWYWx1ZXMgKSB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHZhbHVlIDw9IHRoaXMubWF4VmFsdWUgKTtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdmFsdWUgPj0gdGhpcy5taW5WYWx1ZSApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByb3BvcnRpb24gPSAoIHZhbHVlIC0gdGhpcy5taW5WYWx1ZSApIC8gKCB0aGlzLnNwYW4gKTtcclxuXHJcbiAgICAvLyB0aGlzIGNhbGN1bGF0aW9uIG1lYW5zIHRoYXQgdmFsdWVzIG9uIHRoZSBib3VuZGFyaWVzIHdpbGwgZ28gaW50byB0aGUgaGlnaGVyIGJpbiBleGNlcHQgZm9yIHRoZSBtYXggdmFsdWVcclxuICAgIHJldHVybiBNYXRoLm1pbiggTWF0aC5mbG9vciggcHJvcG9ydGlvbiAqIHRoaXMubnVtQmlucyApLCB0aGlzLm51bUJpbnMgLSAxICk7XHJcbiAgfVxyXG59XHJcblxyXG50YW1iby5yZWdpc3RlciggJ0Jpbk1hcHBlcicsIEJpbk1hcHBlciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmluTWFwcGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sWUFBWTtBQUU5QixPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBUXZELE1BQU1DLFNBQVMsQ0FBQztFQU9QQyxXQUFXQSxDQUFFQyxVQUFpQixFQUFFQyxPQUFlLEVBQUVDLGVBQWtDLEVBQUc7SUFFM0Y7SUFDQUMsTUFBTSxJQUFJQSxNQUFNLENBQUVGLE9BQU8sR0FBRyxDQUFFLENBQUM7SUFFL0IsTUFBTUcsT0FBTyxHQUFHUCxTQUFTLENBQXFDLENBQUMsQ0FBRTtNQUMvRFEsd0JBQXdCLEVBQUU7SUFDNUIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLElBQUksQ0FBQ0ksUUFBUSxHQUFHTixVQUFVLENBQUNPLEdBQUc7SUFDOUIsSUFBSSxDQUFDQyxRQUFRLEdBQUdSLFVBQVUsQ0FBQ1MsR0FBRztJQUM5QixJQUFJLENBQUNDLElBQUksR0FBR1YsVUFBVSxDQUFDVyxTQUFTLENBQUMsQ0FBQztJQUNsQyxJQUFJLENBQUNWLE9BQU8sR0FBR0EsT0FBTztJQUN0QixJQUFJLENBQUNHLE9BQU8sR0FBR0EsT0FBTztFQUN4Qjs7RUFFQTtBQUNGO0FBQ0E7RUFDU1EsUUFBUUEsQ0FBRUMsS0FBYSxFQUFXO0lBQ3ZDLElBQUssQ0FBQyxJQUFJLENBQUNULE9BQU8sQ0FBQ0Msd0JBQXdCLEVBQUc7TUFDNUNGLE1BQU0sSUFBSUEsTUFBTSxDQUFFVSxLQUFLLElBQUksSUFBSSxDQUFDTCxRQUFTLENBQUM7TUFDMUNMLE1BQU0sSUFBSUEsTUFBTSxDQUFFVSxLQUFLLElBQUksSUFBSSxDQUFDUCxRQUFTLENBQUM7SUFDNUM7SUFFQSxNQUFNUSxVQUFVLEdBQUcsQ0FBRUQsS0FBSyxHQUFHLElBQUksQ0FBQ1AsUUFBUSxJQUFPLElBQUksQ0FBQ0ksSUFBTTs7SUFFNUQ7SUFDQSxPQUFPSyxJQUFJLENBQUNSLEdBQUcsQ0FBRVEsSUFBSSxDQUFDQyxLQUFLLENBQUVGLFVBQVUsR0FBRyxJQUFJLENBQUNiLE9BQVEsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsT0FBTyxHQUFHLENBQUUsQ0FBQztFQUM5RTtBQUNGO0FBRUFMLEtBQUssQ0FBQ3FCLFFBQVEsQ0FBRSxXQUFXLEVBQUVuQixTQUFVLENBQUM7QUFFeEMsZUFBZUEsU0FBUyJ9