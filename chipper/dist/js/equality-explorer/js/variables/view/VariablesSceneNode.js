// Copyright 2017-2022, University of Colorado Boulder

/**
 * View of a scene in the 'Variables' screen.
 * Same as the 'Basics' screen, but with a control for changing the variable value.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import BasicsSceneNode from '../../basics/view/BasicsSceneNode.js';
import VariablesAccordionBox from '../../common/view/VariablesAccordionBox.js';
import equalityExplorer from '../../equalityExplorer.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class VariablesSceneNode extends BasicsSceneNode {
  // whether variable values are visible in snapshots

  // whether the Variables accordion box is expanded or collapsed

  constructor(scene, equationAccordionBoxExpandedProperty, snapshotsAccordionBoxExpandedProperty, layoutBounds, providedOptions) {
    const options = optionize()({
      // BasicsSceneNode options
      termsToolboxSpacing: 30 // horizontal spacing between terms in the toolbox
    }, providedOptions);
    const variableValuesVisibleProperty = new BooleanProperty(true, {
      tandem: options.tandem.createTandem('variableValuesVisibleProperty')
    });
    options.variableValuesVisibleProperty = variableValuesVisibleProperty;
    super(scene, equationAccordionBoxExpandedProperty, snapshotsAccordionBoxExpandedProperty, layoutBounds, options);
    const variables = scene.variables;
    assert && assert(variables && variables.length > 0);
    this.variableValuesVisibleProperty = variableValuesVisibleProperty;
    this.variablesAccordionBoxExpandedProperty = new BooleanProperty(true, {
      // singular vs plural tandem name, to match VariablesAccordionBox title
      tandem: variables.length === 1 ? options.tandem.createTandem('variableAccordionBoxExpandedProperty') : options.tandem.createTandem('variablesAccordionBoxExpandedProperty')
    });

    // Variables accordion box, above the Snapshots accordion box
    const variablesAccordionBox = new VariablesAccordionBox(variables, {
      expandedProperty: this.variablesAccordionBoxExpandedProperty,
      fixedWidth: this.snapshotsAccordionBox.width,
      // same width as Snapshots
      right: this.snapshotsAccordionBox.right,
      top: this.snapshotsAccordionBox.top,
      // singular vs plural tandem name, to match VariablesAccordionBox title
      tandem: variables.length === 1 ? options.tandem.createTandem('variableAccordionBox') : options.tandem.createTandem('variablesAccordionBox')
    });
    this.addChild(variablesAccordionBox);
    variablesAccordionBox.moveToBack();
    const snapshotsAccordionBoxTop = this.snapshotsAccordionBox.top; // save the original position
    variablesAccordionBox.visibleProperty.link(visible => {
      if (visible) {
        // shift the Snapshots accordion box down
        this.snapshotsAccordionBox.top = variablesAccordionBox.bottom + 10;
      } else {
        this.snapshotsAccordionBox.top = snapshotsAccordionBoxTop;
      }
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.variablesAccordionBoxExpandedProperty.reset();
    this.variableValuesVisibleProperty.reset();
    super.reset();
  }
}
equalityExplorer.register('VariablesSceneNode', VariablesSceneNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,