// Copyright 2022, University of Colorado Boulder

/**
 * SolveItLevelSelectionButtonGroup is the group of level-selection buttons for the 'Solve It!' game.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import LevelSelectionButtonGroup from '../../../../vegas/js/LevelSelectionButtonGroup.js';
import ScoreDisplayNumberAndStar from '../../../../vegas/js/ScoreDisplayNumberAndStar.js';
import EqualityExplorerQueryParameters from '../../common/EqualityExplorerQueryParameters.js';
import VariableTermNode from '../../common/view/VariableTermNode.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerStrings from '../../EqualityExplorerStrings.js';
export default class SolveItLevelSelectionButtonGroup extends LevelSelectionButtonGroup {
  constructor(levelProperty, levels, providedOptions) {
    const options = optionize()({
      // LevelSelectionButtonGroupOptions
      levelSelectionButtonOptions: {
        baseColor: 'rgb( 191, 239, 254 )'
      },
      flowBoxOptions: {
        spacing: 20
      },
      gameLevels: EqualityExplorerQueryParameters.gameLevels
    }, providedOptions);
    const items = levels.map(level => {
      return {
        icon: VariableTermNode.createInteractiveTermNode(Fraction.fromInteger(level.levelNumber), EqualityExplorerStrings.xStringProperty, {
          diameter: 50,
          margin: 15,
          equationTermNodeOptions: {
            showOne: true
          }
        }),
        scoreProperty: level.scoreProperty,
        options: {
          createScoreDisplay: scoreProperty => new ScoreDisplayNumberAndStar(scoreProperty),
          listener: () => {
            levelProperty.value = level;
          },
          soundPlayerIndex: level.levelNumber - 1 // levelNumber uses 1-based numbering
        }
      };
    });

    super(items, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
equalityExplorer.register('SolveItLevelSelectionButtonGroup', SolveItLevelSelectionButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJGcmFjdGlvbiIsIkxldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAiLCJTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyIiwiRXF1YWxpdHlFeHBsb3JlclF1ZXJ5UGFyYW1ldGVycyIsIlZhcmlhYmxlVGVybU5vZGUiLCJlcXVhbGl0eUV4cGxvcmVyIiwiRXF1YWxpdHlFeHBsb3JlclN0cmluZ3MiLCJTb2x2ZUl0TGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwibGV2ZWxQcm9wZXJ0eSIsImxldmVscyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJsZXZlbFNlbGVjdGlvbkJ1dHRvbk9wdGlvbnMiLCJiYXNlQ29sb3IiLCJmbG93Qm94T3B0aW9ucyIsInNwYWNpbmciLCJnYW1lTGV2ZWxzIiwiaXRlbXMiLCJtYXAiLCJsZXZlbCIsImljb24iLCJjcmVhdGVJbnRlcmFjdGl2ZVRlcm1Ob2RlIiwiZnJvbUludGVnZXIiLCJsZXZlbE51bWJlciIsInhTdHJpbmdQcm9wZXJ0eSIsImRpYW1ldGVyIiwibWFyZ2luIiwiZXF1YXRpb25UZXJtTm9kZU9wdGlvbnMiLCJzaG93T25lIiwic2NvcmVQcm9wZXJ0eSIsImNyZWF0ZVNjb3JlRGlzcGxheSIsImxpc3RlbmVyIiwidmFsdWUiLCJzb3VuZFBsYXllckluZGV4IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU29sdmVJdExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNvbHZlSXRMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwIGlzIHRoZSBncm91cCBvZiBsZXZlbC1zZWxlY3Rpb24gYnV0dG9ucyBmb3IgdGhlICdTb2x2ZSBJdCEnIGdhbWUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBGcmFjdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL21vZGVsL0ZyYWN0aW9uLmpzJztcclxuaW1wb3J0IExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAsIHsgTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cEl0ZW0sIExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXBPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdmVnYXMvanMvTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyIGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL1Njb3JlRGlzcGxheU51bWJlckFuZFN0YXIuanMnO1xyXG5pbXBvcnQgRXF1YWxpdHlFeHBsb3JlclF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vRXF1YWxpdHlFeHBsb3JlclF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBWYXJpYWJsZVRlcm1Ob2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1ZhcmlhYmxlVGVybU5vZGUuanMnO1xyXG5pbXBvcnQgZXF1YWxpdHlFeHBsb3JlciBmcm9tICcuLi8uLi9lcXVhbGl0eUV4cGxvcmVyLmpzJztcclxuaW1wb3J0IEVxdWFsaXR5RXhwbG9yZXJTdHJpbmdzIGZyb20gJy4uLy4uL0VxdWFsaXR5RXhwbG9yZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IFNvbHZlSXRMZXZlbCBmcm9tICcuLi9tb2RlbC9Tb2x2ZUl0TGV2ZWwuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFNvbHZlSXRMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvbHZlSXRMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwIGV4dGVuZHMgTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbGV2ZWxQcm9wZXJ0eTogUHJvcGVydHk8U29sdmVJdExldmVsIHwgbnVsbD4sIGxldmVsczogU29sdmVJdExldmVsW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IFNvbHZlSXRMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFNvbHZlSXRMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwT3B0aW9ucywgU2VsZk9wdGlvbnMsIExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXBPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwT3B0aW9uc1xyXG4gICAgICBsZXZlbFNlbGVjdGlvbkJ1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBiYXNlQ29sb3I6ICdyZ2IoIDE5MSwgMjM5LCAyNTQgKSdcclxuICAgICAgfSxcclxuICAgICAgZmxvd0JveE9wdGlvbnM6IHtcclxuICAgICAgICBzcGFjaW5nOiAyMFxyXG4gICAgICB9LFxyXG4gICAgICBnYW1lTGV2ZWxzOiBFcXVhbGl0eUV4cGxvcmVyUXVlcnlQYXJhbWV0ZXJzLmdhbWVMZXZlbHNcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGl0ZW1zOiBMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwSXRlbVtdID0gbGV2ZWxzLm1hcCggbGV2ZWwgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGljb246IFZhcmlhYmxlVGVybU5vZGUuY3JlYXRlSW50ZXJhY3RpdmVUZXJtTm9kZShcclxuICAgICAgICAgIEZyYWN0aW9uLmZyb21JbnRlZ2VyKCBsZXZlbC5sZXZlbE51bWJlciApLCBFcXVhbGl0eUV4cGxvcmVyU3RyaW5ncy54U3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgICAgZGlhbWV0ZXI6IDUwLFxyXG4gICAgICAgICAgICBtYXJnaW46IDE1LFxyXG4gICAgICAgICAgICBlcXVhdGlvblRlcm1Ob2RlT3B0aW9uczoge1xyXG4gICAgICAgICAgICAgIHNob3dPbmU6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSApLFxyXG4gICAgICAgIHNjb3JlUHJvcGVydHk6IGxldmVsLnNjb3JlUHJvcGVydHksXHJcbiAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgY3JlYXRlU2NvcmVEaXNwbGF5OiAoIHNjb3JlUHJvcGVydHk6IFRQcm9wZXJ0eTxudW1iZXI+ICkgPT4gbmV3IFNjb3JlRGlzcGxheU51bWJlckFuZFN0YXIoIHNjb3JlUHJvcGVydHkgKSxcclxuICAgICAgICAgIGxpc3RlbmVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldmVsUHJvcGVydHkudmFsdWUgPSBsZXZlbDtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzb3VuZFBsYXllckluZGV4OiBsZXZlbC5sZXZlbE51bWJlciAtIDEgLy8gbGV2ZWxOdW1iZXIgdXNlcyAxLWJhc2VkIG51bWJlcmluZ1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggaXRlbXMsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnU29sdmVJdExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAnLCBTb2x2ZUl0TGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxRQUFRLE1BQU0sNkNBQTZDO0FBQ2xFLE9BQU9DLHlCQUF5QixNQUEyRSxtREFBbUQ7QUFDOUosT0FBT0MseUJBQXlCLE1BQU0sbURBQW1EO0FBQ3pGLE9BQU9DLCtCQUErQixNQUFNLGlEQUFpRDtBQUM3RixPQUFPQyxnQkFBZ0IsTUFBTSx1Q0FBdUM7QUFDcEUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQU90RSxlQUFlLE1BQU1DLGdDQUFnQyxTQUFTTix5QkFBeUIsQ0FBQztFQUUvRU8sV0FBV0EsQ0FBRUMsYUFBNEMsRUFBRUMsTUFBc0IsRUFDcEVDLGVBQXdELEVBQUc7SUFFN0UsTUFBTUMsT0FBTyxHQUFHYixTQUFTLENBQXlGLENBQUMsQ0FBRTtNQUVuSDtNQUNBYywyQkFBMkIsRUFBRTtRQUMzQkMsU0FBUyxFQUFFO01BQ2IsQ0FBQztNQUNEQyxjQUFjLEVBQUU7UUFDZEMsT0FBTyxFQUFFO01BQ1gsQ0FBQztNQUNEQyxVQUFVLEVBQUVkLCtCQUErQixDQUFDYztJQUM5QyxDQUFDLEVBQUVOLGVBQWdCLENBQUM7SUFFcEIsTUFBTU8sS0FBc0MsR0FBR1IsTUFBTSxDQUFDUyxHQUFHLENBQUVDLEtBQUssSUFBSTtNQUNsRSxPQUFPO1FBQ0xDLElBQUksRUFBRWpCLGdCQUFnQixDQUFDa0IseUJBQXlCLENBQzlDdEIsUUFBUSxDQUFDdUIsV0FBVyxDQUFFSCxLQUFLLENBQUNJLFdBQVksQ0FBQyxFQUFFbEIsdUJBQXVCLENBQUNtQixlQUFlLEVBQUU7VUFDbEZDLFFBQVEsRUFBRSxFQUFFO1VBQ1pDLE1BQU0sRUFBRSxFQUFFO1VBQ1ZDLHVCQUF1QixFQUFFO1lBQ3ZCQyxPQUFPLEVBQUU7VUFDWDtRQUNGLENBQUUsQ0FBQztRQUNMQyxhQUFhLEVBQUVWLEtBQUssQ0FBQ1UsYUFBYTtRQUNsQ2xCLE9BQU8sRUFBRTtVQUNQbUIsa0JBQWtCLEVBQUlELGFBQWdDLElBQU0sSUFBSTVCLHlCQUF5QixDQUFFNEIsYUFBYyxDQUFDO1VBQzFHRSxRQUFRLEVBQUVBLENBQUEsS0FBTTtZQUNkdkIsYUFBYSxDQUFDd0IsS0FBSyxHQUFHYixLQUFLO1VBQzdCLENBQUM7VUFDRGMsZ0JBQWdCLEVBQUVkLEtBQUssQ0FBQ0ksV0FBVyxHQUFHLENBQUMsQ0FBQztRQUMxQztNQUNGLENBQUM7SUFDSCxDQUFFLENBQUM7O0lBRUgsS0FBSyxDQUFFTixLQUFLLEVBQUVOLE9BQVEsQ0FBQztFQUN6QjtFQUVnQnVCLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBOUIsZ0JBQWdCLENBQUNnQyxRQUFRLENBQUUsa0NBQWtDLEVBQUU5QixnQ0FBaUMsQ0FBQyJ9