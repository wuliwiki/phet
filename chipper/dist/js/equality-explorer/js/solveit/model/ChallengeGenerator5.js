// Copyright 2018-2022, University of Colorado Boulder

/**
 * Challenge generator for game level 5.
 * See specification in https://docs.google.com/document/d/1vG5U9HhcqVGMvmGGXry28PLqlNWj25lStDP2vSWgUOo/edit.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import equalityExplorer from '../../equalityExplorer.js';
import Challenge from './Challenge.js';
import ChallengeGenerator from './ChallengeGenerator.js';

// strings (debug)
const PATTERN = 'ax + b = mx + n<br>' + 'x = {{x}}<br>' + 'a = {{a}}<br>' + 'b = {{b}}<br>' + 'm = {{m}}<br>' + 'n = (a–m)x + b = {{n}}';

// constants
const X_VALUES = ChallengeGenerator.rangeToArray(-40, 40);
const A_VALUES = ChallengeGenerator.rangeToArray(-10, 10);
const B_VALUES = ChallengeGenerator.rangeToArray(-10, 10);
const M_VALUES = ChallengeGenerator.rangeToArray(-10, 10);
export default class ChallengeGenerator5 extends ChallengeGenerator {
  constructor() {
    super();
  }

  /**
   * Generates the next challenge.
   *
   * Form: ax + b = mx + n
   * Let x be a random integer between [-40,40], x !== 0
   * Let a be a random integer between [-10,10], a !== 0
   * Let b be a random integer between [-10,10], b !== 0
   * Let m be a random integer between [-10,10], m !== 0, m !== a, |a-m| <= 10
   * Let n = (a – m)x + b, n == 0 is OK
   */
  nextChallengeProtected() {
    const x = this.randomX(X_VALUES);
    const a = ChallengeGenerator.randomValue(A_VALUES, [0]);
    const b = ChallengeGenerator.randomValue(B_VALUES, [0]);
    const m = ChallengeGenerator.randomValueBy(M_VALUES, m => m !== 0 && m !== a && Math.abs(a - m) <= 10);
    const n = (a - m) * x + b;

    // Verify that computations meeting design requirements.
    assert && assert(x !== 0, 'x is 0');
    assert && assert(a !== 0, 'a is 0');
    assert && assert(b !== 0, 'b is 0');
    assert && assert(m !== 0, 'm is 0');
    assert && assert(m !== a, `m === a: ${m}`);
    assert && assert(Math.abs(a - m) <= 10, `|a-m| is too large: ${Math.abs(a - m)}`);

    // derivation that corresponds to design doc, displayed with 'showAnswers' query parameter
    const debugDerivation = StringUtils.fillIn(PATTERN, {
      x: x,
      a: a,
      b: b,
      m: m,
      n: n
    });

    // ax + b = mx + n
    return new Challenge(x, Fraction.fromInteger(a), Fraction.fromInteger(b), Fraction.fromInteger(m), Fraction.fromInteger(n), debugDerivation);
  }
}
equalityExplorer.register('ChallengeGenerator5', ChallengeGenerator5);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGcmFjdGlvbiIsIlN0cmluZ1V0aWxzIiwiZXF1YWxpdHlFeHBsb3JlciIsIkNoYWxsZW5nZSIsIkNoYWxsZW5nZUdlbmVyYXRvciIsIlBBVFRFUk4iLCJYX1ZBTFVFUyIsInJhbmdlVG9BcnJheSIsIkFfVkFMVUVTIiwiQl9WQUxVRVMiLCJNX1ZBTFVFUyIsIkNoYWxsZW5nZUdlbmVyYXRvcjUiLCJjb25zdHJ1Y3RvciIsIm5leHRDaGFsbGVuZ2VQcm90ZWN0ZWQiLCJ4IiwicmFuZG9tWCIsImEiLCJyYW5kb21WYWx1ZSIsImIiLCJtIiwicmFuZG9tVmFsdWVCeSIsIk1hdGgiLCJhYnMiLCJuIiwiYXNzZXJ0IiwiZGVidWdEZXJpdmF0aW9uIiwiZmlsbEluIiwiZnJvbUludGVnZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNoYWxsZW5nZUdlbmVyYXRvcjUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2hhbGxlbmdlIGdlbmVyYXRvciBmb3IgZ2FtZSBsZXZlbCA1LlxyXG4gKiBTZWUgc3BlY2lmaWNhdGlvbiBpbiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzF2RzVVOUhoY3FWR012bUdHWHJ5MjhQTHFsTldqMjVsU3REUDJ2U1dnVU9vL2VkaXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEZyYWN0aW9uIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvbW9kZWwvRnJhY3Rpb24uanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IGVxdWFsaXR5RXhwbG9yZXIgZnJvbSAnLi4vLi4vZXF1YWxpdHlFeHBsb3Jlci5qcyc7XHJcbmltcG9ydCBDaGFsbGVuZ2UgZnJvbSAnLi9DaGFsbGVuZ2UuanMnO1xyXG5pbXBvcnQgQ2hhbGxlbmdlR2VuZXJhdG9yIGZyb20gJy4vQ2hhbGxlbmdlR2VuZXJhdG9yLmpzJztcclxuXHJcbi8vIHN0cmluZ3MgKGRlYnVnKVxyXG5jb25zdCBQQVRURVJOID0gJ2F4ICsgYiA9IG14ICsgbjxicj4nICtcclxuICAgICAgICAgICAgICAgICd4ID0ge3t4fX08YnI+JyArXHJcbiAgICAgICAgICAgICAgICAnYSA9IHt7YX19PGJyPicgK1xyXG4gICAgICAgICAgICAgICAgJ2IgPSB7e2J9fTxicj4nICtcclxuICAgICAgICAgICAgICAgICdtID0ge3ttfX08YnI+JyArXHJcbiAgICAgICAgICAgICAgICAnbiA9IChh4oCTbSl4ICsgYiA9IHt7bn19JztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBYX1ZBTFVFUyA9IENoYWxsZW5nZUdlbmVyYXRvci5yYW5nZVRvQXJyYXkoIC00MCwgNDAgKTtcclxuY29uc3QgQV9WQUxVRVMgPSBDaGFsbGVuZ2VHZW5lcmF0b3IucmFuZ2VUb0FycmF5KCAtMTAsIDEwICk7XHJcbmNvbnN0IEJfVkFMVUVTID0gQ2hhbGxlbmdlR2VuZXJhdG9yLnJhbmdlVG9BcnJheSggLTEwLCAxMCApO1xyXG5jb25zdCBNX1ZBTFVFUyA9IENoYWxsZW5nZUdlbmVyYXRvci5yYW5nZVRvQXJyYXkoIC0xMCwgMTAgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYWxsZW5nZUdlbmVyYXRvcjUgZXh0ZW5kcyBDaGFsbGVuZ2VHZW5lcmF0b3Ige1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGVzIHRoZSBuZXh0IGNoYWxsZW5nZS5cclxuICAgKlxyXG4gICAqIEZvcm06IGF4ICsgYiA9IG14ICsgblxyXG4gICAqIExldCB4IGJlIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBbLTQwLDQwXSwgeCAhPT0gMFxyXG4gICAqIExldCBhIGJlIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBbLTEwLDEwXSwgYSAhPT0gMFxyXG4gICAqIExldCBiIGJlIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBbLTEwLDEwXSwgYiAhPT0gMFxyXG4gICAqIExldCBtIGJlIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBbLTEwLDEwXSwgbSAhPT0gMCwgbSAhPT0gYSwgfGEtbXwgPD0gMTBcclxuICAgKiBMZXQgbiA9IChhIOKAkyBtKXggKyBiLCBuID09IDAgaXMgT0tcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgbmV4dENoYWxsZW5nZVByb3RlY3RlZCgpOiBDaGFsbGVuZ2Uge1xyXG5cclxuICAgIGNvbnN0IHggPSB0aGlzLnJhbmRvbVgoIFhfVkFMVUVTICk7XHJcbiAgICBjb25zdCBhID0gQ2hhbGxlbmdlR2VuZXJhdG9yLnJhbmRvbVZhbHVlKCBBX1ZBTFVFUywgWyAwIF0gKTtcclxuICAgIGNvbnN0IGIgPSBDaGFsbGVuZ2VHZW5lcmF0b3IucmFuZG9tVmFsdWUoIEJfVkFMVUVTLCBbIDAgXSApO1xyXG4gICAgY29uc3QgbSA9IENoYWxsZW5nZUdlbmVyYXRvci5yYW5kb21WYWx1ZUJ5KCBNX1ZBTFVFUyxcclxuICAgICAgbSA9PiAoIG0gIT09IDAgKSAmJiAoIG0gIT09IGEgKSAmJiAoIE1hdGguYWJzKCBhIC0gbSApIDw9IDEwIClcclxuICAgICk7XHJcbiAgICBjb25zdCBuID0gKCAoIGEgLSBtICkgKiB4ICkgKyBiO1xyXG5cclxuICAgIC8vIFZlcmlmeSB0aGF0IGNvbXB1dGF0aW9ucyBtZWV0aW5nIGRlc2lnbiByZXF1aXJlbWVudHMuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB4ICE9PSAwLCAneCBpcyAwJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYSAhPT0gMCwgJ2EgaXMgMCcgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGIgIT09IDAsICdiIGlzIDAnICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtICE9PSAwLCAnbSBpcyAwJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbSAhPT0gYSwgYG0gPT09IGE6ICR7bX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBNYXRoLmFicyggYSAtIG0gKSA8PSAxMCwgYHxhLW18IGlzIHRvbyBsYXJnZTogJHtNYXRoLmFicyggYSAtIG0gKX1gICk7XHJcblxyXG4gICAgLy8gZGVyaXZhdGlvbiB0aGF0IGNvcnJlc3BvbmRzIHRvIGRlc2lnbiBkb2MsIGRpc3BsYXllZCB3aXRoICdzaG93QW5zd2VycycgcXVlcnkgcGFyYW1ldGVyXHJcbiAgICBjb25zdCBkZWJ1Z0Rlcml2YXRpb24gPSBTdHJpbmdVdGlscy5maWxsSW4oIFBBVFRFUk4sIHsgeDogeCwgYTogYSwgYjogYiwgbTogbSwgbjogbiB9ICk7XHJcblxyXG4gICAgLy8gYXggKyBiID0gbXggKyBuXHJcbiAgICByZXR1cm4gbmV3IENoYWxsZW5nZSggeCxcclxuICAgICAgRnJhY3Rpb24uZnJvbUludGVnZXIoIGEgKSwgRnJhY3Rpb24uZnJvbUludGVnZXIoIGIgKSxcclxuICAgICAgRnJhY3Rpb24uZnJvbUludGVnZXIoIG0gKSwgRnJhY3Rpb24uZnJvbUludGVnZXIoIG4gKSxcclxuICAgICAgZGVidWdEZXJpdmF0aW9uICk7XHJcbiAgfVxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnQ2hhbGxlbmdlR2VuZXJhdG9yNScsIENoYWxsZW5nZUdlbmVyYXRvcjUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sNkNBQTZDO0FBQ2xFLE9BQU9DLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFD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