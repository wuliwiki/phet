// Copyright 2018-2022, University of Colorado Boulder

/**
 * Challenge generator for game level 3.
 * See specification in https://docs.google.com/document/d/1vG5U9HhcqVGMvmGGXry28PLqlNWj25lStDP2vSWgUOo/edit.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import equalityExplorer from '../../equalityExplorer.js';
import Challenge from './Challenge.js';
import ChallengeGenerator from './ChallengeGenerator.js';

// strings (debug)
const PATTERN = 'ax + b = c<br>' + 'x = {{x}}<br>' + 'a = {{a}}<br>' + 'b = {{b}}<br>' + 'c = ax + b = {{c}}';

// constants
const X_VALUES = ChallengeGenerator.rangeToArray(-40, 40);
const A_VALUES = ChallengeGenerator.rangeToArray(-10, 10);
const B_VALUES = ChallengeGenerator.rangeToArray(-10, 10);
export default class ChallengeGenerator3 extends ChallengeGenerator {
  constructor() {
    super();
  }

  /**
   * Generates the next challenge.
   *
   * Form: ax + b = c
   * Let x be a random integer between [-40,40], x !== 0
   * Let a be a random integer between [-10,10], a !== 0, a !== 1
   * Let b be a random integer between [-10,10], b !== 0
   * Let c = ax + b, c == 0 is OK
   */
  nextChallengeProtected() {
    const x = this.randomX(X_VALUES);
    const a = ChallengeGenerator.randomValue(A_VALUES, [0, 1]);
    const b = ChallengeGenerator.randomValue(B_VALUES, [0]);
    const c = a * x + b;

    // Verify that computations meeting design requirements.
    assert && assert(x !== 0, 'x is 0');
    assert && assert(a !== 0, 'a is 0');
    assert && assert(b !== 0, 'b is 0');

    // derivation that corresponds to design doc, displayed with 'showAnswers' query parameter
    const debugDerivation = StringUtils.fillIn(PATTERN, {
      x: x,
      a: a,
      b: b,
      c: c
    });

    // ax + b = 0x + c
    return new Challenge(x, Fraction.fromInteger(a), Fraction.fromInteger(b), Fraction.fromInteger(0), Fraction.fromInteger(c), debugDerivation);
  }
}
equalityExplorer.register('ChallengeGenerator3', ChallengeGenerator3);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGcmFjdGlvbiIsIlN0cmluZ1V0aWxzIiwiZXF1YWxpdHlFeHBsb3JlciIsIkNoYWxsZW5nZSIsIkNoYWxsZW5nZUdlbmVyYXRvciIsIlBBVFRFUk4iLCJYX1ZBTFVFUyIsInJhbmdlVG9BcnJheSIsIkFfVkFMVUVTIiwiQl9WQUxVRVMiLCJDaGFsbGVuZ2VHZW5lcmF0b3IzIiwiY29uc3RydWN0b3IiLCJuZXh0Q2hhbGxlbmdlUHJvdGVjdGVkIiwieCIsInJhbmRvbVgiLCJhIiwicmFuZG9tVmFsdWUiLCJiIiwiYyIsImFzc2VydCIsImRlYnVnRGVyaXZhdGlvbiIsImZpbGxJbiIsImZyb21JbnRlZ2VyIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDaGFsbGVuZ2VHZW5lcmF0b3IzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENoYWxsZW5nZSBnZW5lcmF0b3IgZm9yIGdhbWUgbGV2ZWwgMy5cclxuICogU2VlIHNwZWNpZmljYXRpb24gaW4gaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xdkc1VTlIaGNxVkdNdm1HR1hyeTI4UExxbE5XajI1bFN0RFAydlNXZ1VPby9lZGl0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBGcmFjdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL21vZGVsL0ZyYWN0aW9uLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5pbXBvcnQgQ2hhbGxlbmdlIGZyb20gJy4vQ2hhbGxlbmdlLmpzJztcclxuaW1wb3J0IENoYWxsZW5nZUdlbmVyYXRvciBmcm9tICcuL0NoYWxsZW5nZUdlbmVyYXRvci5qcyc7XHJcblxyXG4vLyBzdHJpbmdzIChkZWJ1ZylcclxuY29uc3QgUEFUVEVSTiA9ICdheCArIGIgPSBjPGJyPicgK1xyXG4gICAgICAgICAgICAgICAgJ3ggPSB7e3h9fTxicj4nICtcclxuICAgICAgICAgICAgICAgICdhID0ge3thfX08YnI+JyArXHJcbiAgICAgICAgICAgICAgICAnYiA9IHt7Yn19PGJyPicgK1xyXG4gICAgICAgICAgICAgICAgJ2MgPSBheCArIGIgPSB7e2N9fSc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgWF9WQUxVRVMgPSBDaGFsbGVuZ2VHZW5lcmF0b3IucmFuZ2VUb0FycmF5KCAtNDAsIDQwICk7XHJcbmNvbnN0IEFfVkFMVUVTID0gQ2hhbGxlbmdlR2VuZXJhdG9yLnJhbmdlVG9BcnJheSggLTEwLCAxMCApO1xyXG5jb25zdCBCX1ZBTFVFUyA9IENoYWxsZW5nZUdlbmVyYXRvci5yYW5nZVRvQXJyYXkoIC0xMCwgMTAgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYWxsZW5nZUdlbmVyYXRvcjMgZXh0ZW5kcyBDaGFsbGVuZ2VHZW5lcmF0b3Ige1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGVzIHRoZSBuZXh0IGNoYWxsZW5nZS5cclxuICAgKlxyXG4gICAqIEZvcm06IGF4ICsgYiA9IGNcclxuICAgKiBMZXQgeCBiZSBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gWy00MCw0MF0sIHggIT09IDBcclxuICAgKiBMZXQgYSBiZSBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gWy0xMCwxMF0sIGEgIT09IDAsIGEgIT09IDFcclxuICAgKiBMZXQgYiBiZSBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gWy0xMCwxMF0sIGIgIT09IDBcclxuICAgKiBMZXQgYyA9IGF4ICsgYiwgYyA9PSAwIGlzIE9LXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIG5leHRDaGFsbGVuZ2VQcm90ZWN0ZWQoKTogQ2hhbGxlbmdlIHtcclxuXHJcbiAgICBjb25zdCB4ID0gdGhpcy5yYW5kb21YKCBYX1ZBTFVFUyApO1xyXG4gICAgY29uc3QgYSA9IENoYWxsZW5nZUdlbmVyYXRvci5yYW5kb21WYWx1ZSggQV9WQUxVRVMsIFsgMCwgMSBdICk7XHJcbiAgICBjb25zdCBiID0gQ2hhbGxlbmdlR2VuZXJhdG9yLnJhbmRvbVZhbHVlKCBCX1ZBTFVFUywgWyAwIF0gKTtcclxuICAgIGNvbnN0IGMgPSAoIGEgKiB4ICkgKyBiO1xyXG5cclxuICAgIC8vIFZlcmlmeSB0aGF0IGNvbXB1dGF0aW9ucyBtZWV0aW5nIGRlc2lnbiByZXF1aXJlbWVudHMuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB4ICE9PSAwLCAneCBpcyAwJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYSAhPT0gMCwgJ2EgaXMgMCcgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGIgIT09IDAsICdiIGlzIDAnICk7XHJcblxyXG4gICAgLy8gZGVyaXZhdGlvbiB0aGF0IGNvcnJlc3BvbmRzIHRvIGRlc2lnbiBkb2MsIGRpc3BsYXllZCB3aXRoICdzaG93QW5zd2VycycgcXVlcnkgcGFyYW1ldGVyXHJcbiAgICBjb25zdCBkZWJ1Z0Rlcml2YXRpb24gPSBTdHJpbmdVdGlscy5maWxsSW4oIFBBVFRFUk4sIHsgeDogeCwgYTogYSwgYjogYiwgYzogYyB9ICk7XHJcblxyXG4gICAgLy8gYXggKyBiID0gMHggKyBjXHJcbiAgICByZXR1cm4gbmV3IENoYWxsZW5nZSggeCxcclxuICAgICAgRnJhY3Rpb24uZnJvbUludGVnZXIoIGEgKSwgRnJhY3Rpb24uZnJvbUludGVnZXIoIGIgKSxcclxuICAgICAgRnJhY3Rpb24uZnJvbUludGVnZXIoIDAgKSwgRnJhY3Rpb24uZnJvbUludGVnZXIoIGMgKSxcclxuICAgICAgZGVidWdEZXJpdmF0aW9uICk7XHJcbiAgfVxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnQ2hhbGxlbmdlR2VuZXJhdG9yMycsIENoYWxsZW5nZUdlbmVyYXRvcjMgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sNkNBQTZDO0FBQ2xFLE9BQU9DLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFDdEMsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCOztBQUV4RDtBQUNBLE1BQU1DLE9BQU8sR0FBRyxnQkFBZ0IsR0FDaEIsZUFBZSxHQUNmLGVBQWUsR0FDZixlQUFlLEdBQ2Ysb0JBQW9COztBQUVwQztBQUNBLE1BQU1DLFFBQVEsR0FBR0Ysa0JBQWtCLENBQUNHLFlBQVksQ0FBRSxDQUFDLEVBQUUsRUFBRSxFQUFHLENBQUM7QUFDM0QsTUFBTUMsUUFBUSxHQUFHSixrQkFBa0IsQ0FBQ0csWUFBWSxDQUFFLENBQUMsRUFBRSxFQUFFLEVBQUcsQ0FBQztBQUMzRCxNQUFNRSxRQUFRLEdBQUdMLGtCQUFrQixDQUFDRyxZQUFZLENBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRyxDQUFDO0FBRTNELGVBQWUsTUFBTUcsbUJBQW1CLFNBQVNOLGtCQUFrQixDQUFDO0VBRTNETyxXQUFXQSxDQUFBLEVBQUc7SUFDbkIsS0FBSyxDQUFDLENBQUM7RUFDVDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDcUJDLHNCQUFzQkEsQ0FBQSxFQUFjO0lBRXJELE1BQU1DLENBQUMsR0FBRyxJQUFJLENBQUNDLE9BQU8sQ0FBRVIsUUFBUyxDQUFDO0lBQ2xDLE1BQU1TLENBQUMsR0FBR1gsa0JBQWtCLENBQUNZLFdBQVcsQ0FBRVIsUUFBUSxFQUFFLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRyxDQUFDO0lBQzlELE1BQU1TLENBQUMsR0FBR2Isa0JBQWtCLENBQUNZLFdBQVcsQ0FBRVAsUUFBUSxFQUFFLENBQUUsQ0FBQyxDQUFHLENBQUM7SUFDM0QsTUFBTVMsQ0FBQyxHQUFLSCxDQUFDLEdBQUdGLENBQUMsR0FBS0ksQ0FBQzs7SUFFdkI7SUFDQUUsTUFBTSxJQUFJQSxNQUFNLENBQUVOLENBQUMsS0FBSyxDQUFDLEVBQUUsUUFBUyxDQUFDO0lBQ3JDTSxNQUFNLElBQUlBLE1BQU0sQ0FBRUosQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFTLENBQUM7SUFDckNJLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVMsQ0FBQzs7SUFFckM7SUFDQSxNQUFNRyxlQUFlLEdBQUduQixXQUFXLENBQUNvQixNQUFNLENBQUVoQixPQUFPLEVBQUU7TUFBRVEsQ0FBQyxFQUFFQSxDQUFDO01BQUVFLENBQUMsRUFBRUEsQ0FBQztNQUFFRSxDQUFDLEVBQUVBLENBQUM7TUFBRUMsQ0FBQyxFQUFFQTtJQUFFLENBQUUsQ0FBQzs7SUFFakY7SUFDQSxPQUFPLElBQUlmLFNBQVMsQ0FBRVUsQ0FBQyxFQUNyQmIsUUFBUSxDQUFDc0IsV0FBVyxDQUFFUCxDQUFFLENBQUMsRUFBRWYsUUFBUSxDQUFDc0IsV0FBVyxDQUFFTCxDQUFFLENBQUMsRUFDcERqQixRQUFRLENBQUNzQixXQUFXLENBQUUsQ0FBRSxDQUFDLEVBQUV0QixRQUFRLENBQUNzQixXQUFXLENBQUVKLENBQUUsQ0FBQyxFQUNwREUsZUFBZ0IsQ0FBQztFQUNyQjtBQUNGO0FBRUFsQixnQkFBZ0IsQ0FBQ3FCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWIsbUJBQW9CLENBQUMifQ==