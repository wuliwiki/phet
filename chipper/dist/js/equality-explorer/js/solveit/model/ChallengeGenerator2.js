// Copyright 2018-2022, University of Colorado Boulder

/**
 * Challenge generator for game level 2.
 * See specification in https://docs.google.com/document/d/1vG5U9HhcqVGMvmGGXry28PLqlNWj25lStDP2vSWgUOo/edit.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import equalityExplorer from '../../equalityExplorer.js';
import ChallengeGenerator from './ChallengeGenerator.js';
import ChallengeGenerator1 from './ChallengeGenerator1.js';
export default class ChallengeGenerator2 extends ChallengeGenerator {
  // ChallengeGenerator2 is a variation and subset of ChallengeGenerator1, so we'll use composition

  // methods for generating the 2 types of challenges

  constructor() {
    super();
    this.challengeGenerator1 = new ChallengeGenerator1({
      aValues: ChallengeGenerator.rangeToArray(-10, -1),
      dValues: ChallengeGenerator.rangeToArray(-10, -1)
    });
    this.challengeTypeMethods = [() => this.nextType1(), () => this.nextType3()];
  }

  /**
   * Generates the next challenge.
   */
  nextChallengeProtected() {
    if (this.numberOfChallenges === 0) {
      // First challenge should be type 1, with a=-1.
      return this.nextType1(-1);
    } else {
      // Randomly select the challenge type.
      return dotRandom.sample(this.challengeTypeMethods)();
    }
  }

  /**
   * Generates the next 'type 1' challenge. Delegates to ChallengeGenerator1.
   * @param [a] - if you'd like to use a specific value of a, otherwise randomly selected
   */
  nextType1(a) {
    return this.challengeGenerator1.nextType1(a);
  }

  /**
   * Generates the next 'type 3' challenge. Delegates to ChallengeGenerator1.
   */
  nextType3() {
    return this.challengeGenerator1.nextType3();
  }
}
equalityExplorer.register('ChallengeGenerator2', ChallengeGenerator2);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJlcXVhbGl0eUV4cGxvcmVyIiwiQ2hhbGxlbmdlR2VuZXJhdG9yIiwiQ2hhbGxlbmdlR2VuZXJhdG9yMSIsIkNoYWxsZW5nZUdlbmVyYXRvcjIiLCJjb25zdHJ1Y3RvciIsImNoYWxsZW5nZUdlbmVyYXRvcjEiLCJhVmFsdWVzIiwicmFuZ2VUb0FycmF5IiwiZFZhbHVlcyIsImNoYWxsZW5nZVR5cGVNZXRob2RzIiwibmV4dFR5cGUxIiwibmV4dFR5cGUzIiwibmV4dENoYWxsZW5nZVByb3RlY3RlZCIsIm51bWJlck9mQ2hhbGxlbmdlcyIsInNhbXBsZSIsImEiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNoYWxsZW5nZUdlbmVyYXRvcjIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2hhbGxlbmdlIGdlbmVyYXRvciBmb3IgZ2FtZSBsZXZlbCAyLlxyXG4gKiBTZWUgc3BlY2lmaWNhdGlvbiBpbiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzF2RzVVOUhoY3FWR012bUdHWHJ5MjhQTHFsTldqMjVsU3REUDJ2U1dnVU9vL2VkaXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IGVxdWFsaXR5RXhwbG9yZXIgZnJvbSAnLi4vLi4vZXF1YWxpdHlFeHBsb3Jlci5qcyc7XHJcbmltcG9ydCBDaGFsbGVuZ2VHZW5lcmF0b3IgZnJvbSAnLi9DaGFsbGVuZ2VHZW5lcmF0b3IuanMnO1xyXG5pbXBvcnQgQ2hhbGxlbmdlR2VuZXJhdG9yMSBmcm9tICcuL0NoYWxsZW5nZUdlbmVyYXRvcjEuanMnO1xyXG5pbXBvcnQgQ2hhbGxlbmdlIGZyb20gJy4vQ2hhbGxlbmdlLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYWxsZW5nZUdlbmVyYXRvcjIgZXh0ZW5kcyBDaGFsbGVuZ2VHZW5lcmF0b3Ige1xyXG5cclxuICAvLyBDaGFsbGVuZ2VHZW5lcmF0b3IyIGlzIGEgdmFyaWF0aW9uIGFuZCBzdWJzZXQgb2YgQ2hhbGxlbmdlR2VuZXJhdG9yMSwgc28gd2UnbGwgdXNlIGNvbXBvc2l0aW9uXHJcbiAgcHJpdmF0ZSByZWFkb25seSBjaGFsbGVuZ2VHZW5lcmF0b3IxOiBDaGFsbGVuZ2VHZW5lcmF0b3IxO1xyXG5cclxuICAvLyBtZXRob2RzIGZvciBnZW5lcmF0aW5nIHRoZSAyIHR5cGVzIG9mIGNoYWxsZW5nZXNcclxuICBwcml2YXRlIHJlYWRvbmx5IGNoYWxsZW5nZVR5cGVNZXRob2RzOiAoICgpID0+IENoYWxsZW5nZSApW107XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5jaGFsbGVuZ2VHZW5lcmF0b3IxID0gbmV3IENoYWxsZW5nZUdlbmVyYXRvcjEoIHtcclxuICAgICAgYVZhbHVlczogQ2hhbGxlbmdlR2VuZXJhdG9yLnJhbmdlVG9BcnJheSggLTEwLCAtMSApLFxyXG4gICAgICBkVmFsdWVzOiBDaGFsbGVuZ2VHZW5lcmF0b3IucmFuZ2VUb0FycmF5KCAtMTAsIC0xIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmNoYWxsZW5nZVR5cGVNZXRob2RzID0gW1xyXG4gICAgICAoKSA9PiB0aGlzLm5leHRUeXBlMSgpLFxyXG4gICAgICAoKSA9PiB0aGlzLm5leHRUeXBlMygpXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGVzIHRoZSBuZXh0IGNoYWxsZW5nZS5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgbmV4dENoYWxsZW5nZVByb3RlY3RlZCgpOiBDaGFsbGVuZ2Uge1xyXG5cclxuICAgIGlmICggdGhpcy5udW1iZXJPZkNoYWxsZW5nZXMgPT09IDAgKSB7XHJcblxyXG4gICAgICAvLyBGaXJzdCBjaGFsbGVuZ2Ugc2hvdWxkIGJlIHR5cGUgMSwgd2l0aCBhPS0xLlxyXG4gICAgICByZXR1cm4gdGhpcy5uZXh0VHlwZTEoIC0xICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuXHJcbiAgICAgIC8vIFJhbmRvbWx5IHNlbGVjdCB0aGUgY2hhbGxlbmdlIHR5cGUuXHJcbiAgICAgIHJldHVybiBkb3RSYW5kb20uc2FtcGxlKCB0aGlzLmNoYWxsZW5nZVR5cGVNZXRob2RzICkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdlbmVyYXRlcyB0aGUgbmV4dCAndHlwZSAxJyBjaGFsbGVuZ2UuIERlbGVnYXRlcyB0byBDaGFsbGVuZ2VHZW5lcmF0b3IxLlxyXG4gICAqIEBwYXJhbSBbYV0gLSBpZiB5b3UnZCBsaWtlIHRvIHVzZSBhIHNwZWNpZmljIHZhbHVlIG9mIGEsIG90aGVyd2lzZSByYW5kb21seSBzZWxlY3RlZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBuZXh0VHlwZTEoIGE/OiBudW1iZXIgKTogQ2hhbGxlbmdlIHtcclxuICAgIHJldHVybiB0aGlzLmNoYWxsZW5nZUdlbmVyYXRvcjEubmV4dFR5cGUxKCBhICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZXMgdGhlIG5leHQgJ3R5cGUgMycgY2hhbGxlbmdlLiBEZWxlZ2F0ZXMgdG8gQ2hhbGxlbmdlR2VuZXJhdG9yMS5cclxuICAgKi9cclxuICBwcml2YXRlIG5leHRUeXBlMygpOiBDaGFsbGVuZ2Uge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hhbGxlbmdlR2VuZXJhdG9yMS5uZXh0VHlwZTMoKTtcclxuICB9XHJcbn1cclxuXHJcbmVxdWFsaXR5RXhwbG9yZXIucmVnaXN0ZXIoICdDaGFsbGVuZ2VHZW5lcmF0b3IyJywgQ2hhbGxlbmdlR2VuZXJhdG9yMiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLGtCQUFrQixNQUFNLHlCQUF5QjtBQUN4RCxPQUFPQyxtQkFBbUIsTUFBTSwwQkFBMEI7QUFHMUQsZUFBZSxNQUFNQyxtQkFBbUIsU0FBU0Ysa0JBQWtCLENBQUM7RUFFbEU7O0VBR0E7O0VBR09HLFdBQVdBLENBQUEsRUFBRztJQUNuQixLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUcsSUFBSUgsbUJBQW1CLENBQUU7TUFDbERJLE9BQU8sRUFBRUwsa0JBQWtCLENBQUNNLFlBQVksQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUUsQ0FBQztNQUNuREMsT0FBTyxFQUFFUCxrQkFBa0IsQ0FBQ00sWUFBWSxDQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBRTtJQUNwRCxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNFLG9CQUFvQixHQUFHLENBQzFCLE1BQU0sSUFBSSxDQUFDQyxTQUFTLENBQUMsQ0FBQyxFQUN0QixNQUFNLElBQUksQ0FBQ0MsU0FBUyxDQUFDLENBQUMsQ0FDdkI7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7RUFDcUJDLHNCQUFzQkEsQ0FBQSxFQUFjO0lBRXJELElBQUssSUFBSSxDQUFDQyxrQkFBa0IsS0FBSyxDQUFDLEVBQUc7TUFFbkM7TUFDQSxPQUFPLElBQUksQ0FBQ0gsU0FBUyxDQUFFLENBQUMsQ0FBRSxDQUFDO0lBQzdCLENBQUMsTUFDSTtNQUVIO01BQ0EsT0FBT1gsU0FBUyxDQUFDZSxNQUFNLENBQUUsSUFBSSxDQUFDTCxvQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDeEQ7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTQyxTQUFTQSxDQUFFSyxDQUFVLEVBQWM7SUFDeEMsT0FBTyxJQUFJLENBQUNWLG1CQUFtQixDQUFDSyxTQUFTLENBQUVLLENBQUUsQ0FBQztFQUNoRDs7RUFFQTtBQUNGO0FBQ0E7RUFDVUosU0FBU0EsQ0FBQSxFQUFjO0lBQzdCLE9BQU8sSUFBSSxDQUFDTixtQkFBbUIsQ0FBQ00sU0FBUyxDQUFDLENBQUM7RUFDN0M7QUFDRjtBQUVBWCxnQkFBZ0IsQ0FBQ2dCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWIsbUJBQW9CLENBQUMifQ==