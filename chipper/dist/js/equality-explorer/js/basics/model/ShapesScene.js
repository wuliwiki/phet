// Copyright 2017-2023, University of Colorado Boulder

/**
 * The 'Shapes' scene in the 'Basics' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import sphere_png from '../../../images/sphere_png.js';
import sphereShadow_png from '../../../images/sphereShadow_png.js';
import square_png from '../../../images/square_png.js';
import squareShadow_png from '../../../images/squareShadow_png.js';
import ConstantTermNode from '../../common/view/ConstantTermNode.js'; // eslint-disable-line no-view-imported-from-model
import equalityExplorer from '../../equalityExplorer.js';
import BasicsScene from './BasicsScene.js';
import ObjectVariable from '../../common/model/ObjectVariable.js';
export default class ShapesScene extends BasicsScene {
  constructor(tandem) {
    const variablesTandem = tandem.createTandem('variables');
    const variables = [
    // sphere
    new ObjectVariable({
      image: sphere_png,
      shadow: sphereShadow_png,
      value: 2,
      tandem: variablesTandem.createTandem('sphere')
    }),
    // square
    new ObjectVariable({
      image: square_png,
      shadow: squareShadow_png,
      value: 3,
      tandem: variablesTandem.createTandem('square')
    })];
    super(variables, {
      // icon used to represent this scene in the scene control (radio buttons)
      icon: ConstantTermNode.createInteractiveTermNode(Fraction.fromInteger(1)),
      // this scene allows you to create constant terms
      hasConstantTerms: true,
      tandem: tandem
    });
  }
}
equalityExplorer.register('ShapesScene', ShapesScene);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGcmFjdGlvbiIsInNwaGVyZV9wbmciLCJzcGhlcmVTaGFkb3dfcG5nIiwic3F1YXJlX3BuZyIsInNxdWFyZVNoYWRvd19wbmciLCJDb25zdGFudFRlcm1Ob2RlIiwiZXF1YWxpdHlFeHBsb3JlciIsIkJhc2ljc1NjZW5lIiwiT2JqZWN0VmFyaWFibGUiLCJTaGFwZXNTY2VuZSIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwidmFyaWFibGVzVGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwidmFyaWFibGVzIiwiaW1hZ2UiLCJzaGFkb3ciLCJ2YWx1ZSIsImljb24iLCJjcmVhdGVJbnRlcmFjdGl2ZVRlcm1Ob2RlIiwiZnJvbUludGVnZXIiLCJoYXNDb25zdGFudFRlcm1zIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTaGFwZXNTY2VuZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgJ1NoYXBlcycgc2NlbmUgaW4gdGhlICdCYXNpY3MnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRnJhY3Rpb24gZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy9tb2RlbC9GcmFjdGlvbi5qcyc7XHJcbmltcG9ydCBzcGhlcmVfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9zcGhlcmVfcG5nLmpzJztcclxuaW1wb3J0IHNwaGVyZVNoYWRvd19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3NwaGVyZVNoYWRvd19wbmcuanMnO1xyXG5pbXBvcnQgc3F1YXJlX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvc3F1YXJlX3BuZy5qcyc7XHJcbmltcG9ydCBzcXVhcmVTaGFkb3dfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9zcXVhcmVTaGFkb3dfcG5nLmpzJztcclxuaW1wb3J0IENvbnN0YW50VGVybU5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQ29uc3RhbnRUZXJtTm9kZS5qcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdmlldy1pbXBvcnRlZC1mcm9tLW1vZGVsXHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5pbXBvcnQgQmFzaWNzU2NlbmUgZnJvbSAnLi9CYXNpY3NTY2VuZS5qcyc7XHJcbmltcG9ydCBPYmplY3RWYXJpYWJsZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvT2JqZWN0VmFyaWFibGUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhcGVzU2NlbmUgZXh0ZW5kcyBCYXNpY3NTY2VuZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgdmFyaWFibGVzVGFuZGVtID0gdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZhcmlhYmxlcycgKTtcclxuXHJcbiAgICBjb25zdCB2YXJpYWJsZXMgPSBbXHJcblxyXG4gICAgICAvLyBzcGhlcmVcclxuICAgICAgbmV3IE9iamVjdFZhcmlhYmxlKCB7XHJcbiAgICAgICAgaW1hZ2U6IHNwaGVyZV9wbmcsXHJcbiAgICAgICAgc2hhZG93OiBzcGhlcmVTaGFkb3dfcG5nLFxyXG4gICAgICAgIHZhbHVlOiAyLFxyXG4gICAgICAgIHRhbmRlbTogdmFyaWFibGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NwaGVyZScgKVxyXG4gICAgICB9ICksXHJcblxyXG4gICAgICAvLyBzcXVhcmVcclxuICAgICAgbmV3IE9iamVjdFZhcmlhYmxlKCB7XHJcbiAgICAgICAgaW1hZ2U6IHNxdWFyZV9wbmcsXHJcbiAgICAgICAgc2hhZG93OiBzcXVhcmVTaGFkb3dfcG5nLFxyXG4gICAgICAgIHZhbHVlOiAzLFxyXG4gICAgICAgIHRhbmRlbTogdmFyaWFibGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NxdWFyZScgKVxyXG4gICAgICB9IClcclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIHZhcmlhYmxlcywge1xyXG5cclxuICAgICAgLy8gaWNvbiB1c2VkIHRvIHJlcHJlc2VudCB0aGlzIHNjZW5lIGluIHRoZSBzY2VuZSBjb250cm9sIChyYWRpbyBidXR0b25zKVxyXG4gICAgICBpY29uOiBDb25zdGFudFRlcm1Ob2RlLmNyZWF0ZUludGVyYWN0aXZlVGVybU5vZGUoIEZyYWN0aW9uLmZyb21JbnRlZ2VyKCAxICkgKSxcclxuXHJcbiAgICAgIC8vIHRoaXMgc2NlbmUgYWxsb3dzIHlvdSB0byBjcmVhdGUgY29uc3RhbnQgdGVybXNcclxuICAgICAgaGFzQ29uc3RhbnRUZXJtczogdHJ1ZSxcclxuXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnU2hhcGVzU2NlbmUnLCBTaGFwZXNTY2VuZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sNkNBQTZDO0FBQ2xFLE9BQU9DLFVBQVUsTUFBTSwrQkFBK0I7QUFDdEQsT0FBT0MsZ0JBQWdCLE1BQU0scUNBQXFDO0FBQ2xFLE9BQU9DLFVBQVUsTUFBTSwrQkFBK0I7QUFDdEQsT0FBT0MsZ0JBQWdCLE1BQU0scUNBQXFDO0FBQ2xFLE9BQU9DLGdCQUFnQixNQUFNLHVDQUF1QyxDQUFDLENBQUM7QUFDdEUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsY0FBYyxNQUFNLHNDQUFzQztBQUdqRSxlQUFlLE1BQU1DLFdBQVcsU0FBU0YsV0FBVyxDQUFDO0VBRTVDRyxXQUFXQSxDQUFFQyxNQUFjLEVBQUc7SUFFbkMsTUFBTUMsZUFBZSxHQUFHRCxNQUFNLENBQUNFLFlBQVksQ0FBRSxXQUFZLENBQUM7SUFFMUQsTUFBTUMsU0FBUyxHQUFHO0lBRWhCO0lBQ0EsSUFBSU4sY0FBYyxDQUFFO01BQ2xCTyxLQUFLLEVBQUVkLFVBQVU7TUFDakJlLE1BQU0sRUFBRWQsZ0JBQWdCO01BQ3hCZSxLQUFLLEVBQUUsQ0FBQztNQUNSTixNQUFNLEVBQUVDLGVBQWUsQ0FBQ0MsWUFBWSxDQUFFLFFBQVM7SUFDakQsQ0FBRSxDQUFDO0lBRUg7SUFDQSxJQUFJTCxjQUFjLENBQUU7TUFDbEJPLEtBQUssRUFBRVosVUFBVTtNQUNqQmEsTUFBTSxFQUFFWixnQkFBZ0I7TUFDeEJhLEtBQUssRUFBRSxDQUFDO01BQ1JOLE1BQU0sRUFBRUMsZUFBZSxDQUFDQyxZQUFZLENBQUUsUUFBUztJQUNqRCxDQUFFLENBQUMsQ0FDSjtJQUVELEtBQUssQ0FBRUMsU0FBUyxFQUFFO01BRWhCO01BQ0FJLElBQUksRUFBRWIsZ0JBQWdCLENBQUNjLHlCQUF5QixDQUFFbkIsUUFBUSxDQUFDb0IsV0FBVyxDQUFFLENBQUUsQ0FBRSxDQUFDO01BRTdFO01BQ0FDLGdCQUFnQixFQUFFLElBQUk7TUFFdEJWLE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFMLGdCQUFnQixDQUFDZ0IsUUFBUSxDQUFFLGFBQWEsRUFBRWIsV0FBWSxDQUFDIn0=