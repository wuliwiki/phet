// Copyright 2017-2022, University of Colorado Boulder

/**
 * A rectangular 2D grid of cells.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Path } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerColors from '../EqualityExplorerColors.js';

// constants
const DEFAULT_CELL_SIZE = new Dimension2(5, 5);
export default class GridNode extends Path {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      rows: 1,
      columns: 1,
      cellSize: DEFAULT_CELL_SIZE,
      // PathOptions
      stroke: EqualityExplorerColors.GRID_STROKE,
      lineWidth: 0.5
    }, providedOptions);
    const gridWidth = options.columns * options.cellSize.width;
    const gridHeight = options.rows * options.cellSize.height;

    // border
    const gridShape = new Shape().rect(0, 0, gridWidth, gridHeight);

    // horizontal lines
    for (let row = 1; row < options.rows; row++) {
      gridShape.moveTo(0, row * options.cellSize.height).lineTo(gridWidth, row * options.cellSize.height);
    }

    // vertical lines
    for (let column = 1; column < options.columns; column++) {
      gridShape.moveTo(column * options.cellSize.width, 0).lineTo(column * options.cellSize.width, gridHeight);
    }
    super(gridShape, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
equalityExplorer.register('GridNode', GridNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiU2hhcGUiLCJvcHRpb25pemUiLCJQYXRoIiwiZXF1YWxpdHlFeHBsb3JlciIsIkVxdWFsaXR5RXhwbG9yZXJDb2xvcnMiLCJERUZBVUxUX0NFTExfU0laRSIsIkdyaWROb2RlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicm93cyIsImNvbHVtbnMiLCJjZWxsU2l6ZSIsInN0cm9rZSIsIkdSSURfU1RST0tFIiwibGluZVdpZHRoIiwiZ3JpZFdpZHRoIiwid2lkdGgiLCJncmlkSGVpZ2h0IiwiaGVpZ2h0IiwiZ3JpZFNoYXBlIiwicmVjdCIsInJvdyIsIm1vdmVUbyIsImxpbmVUbyIsImNvbHVtbiIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyaWROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgcmVjdGFuZ3VsYXIgMkQgZ3JpZCBvZiBjZWxscy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucywgUGF0aCwgUGF0aE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZXF1YWxpdHlFeHBsb3JlciBmcm9tICcuLi8uLi9lcXVhbGl0eUV4cGxvcmVyLmpzJztcclxuaW1wb3J0IEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMgZnJvbSAnLi4vRXF1YWxpdHlFeHBsb3JlckNvbG9ycy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgREVGQVVMVF9DRUxMX1NJWkUgPSBuZXcgRGltZW5zaW9uMiggNSwgNSApO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICByb3dzPzogbnVtYmVyOyAvLyBudW1iZXIgb2Ygcm93cyBpbiB0aGUgZ3JpZFxyXG4gIGNvbHVtbnM/OiBudW1iZXI7IC8vIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSBncmlkXHJcbiAgY2VsbFNpemU/OiBEaW1lbnNpb24yOyAvLyB1bmlmb3JtIHdpZHRoIGFuZCBoZWlnaHQgb2YgZWFjaCBjZWxsXHJcbn07XHJcblxyXG50eXBlIEdyaWROb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyaWROb2RlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogR3JpZE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8R3JpZE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGF0aE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIGNvbHVtbnM6IDEsXHJcbiAgICAgIGNlbGxTaXplOiBERUZBVUxUX0NFTExfU0laRSxcclxuXHJcbiAgICAgIC8vIFBhdGhPcHRpb25zXHJcbiAgICAgIHN0cm9rZTogRXF1YWxpdHlFeHBsb3JlckNvbG9ycy5HUklEX1NUUk9LRSxcclxuICAgICAgbGluZVdpZHRoOiAwLjVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGdyaWRXaWR0aCA9IG9wdGlvbnMuY29sdW1ucyAqIG9wdGlvbnMuY2VsbFNpemUud2lkdGg7XHJcbiAgICBjb25zdCBncmlkSGVpZ2h0ID0gb3B0aW9ucy5yb3dzICogb3B0aW9ucy5jZWxsU2l6ZS5oZWlnaHQ7XHJcblxyXG4gICAgLy8gYm9yZGVyXHJcbiAgICBjb25zdCBncmlkU2hhcGUgPSBuZXcgU2hhcGUoKS5yZWN0KCAwLCAwLCBncmlkV2lkdGgsIGdyaWRIZWlnaHQgKTtcclxuXHJcbiAgICAvLyBob3Jpem9udGFsIGxpbmVzXHJcbiAgICBmb3IgKCBsZXQgcm93ID0gMTsgcm93IDwgb3B0aW9ucy5yb3dzOyByb3crKyApIHtcclxuICAgICAgZ3JpZFNoYXBlLm1vdmVUbyggMCwgcm93ICogb3B0aW9ucy5jZWxsU2l6ZS5oZWlnaHQgKS5saW5lVG8oIGdyaWRXaWR0aCwgcm93ICogb3B0aW9ucy5jZWxsU2l6ZS5oZWlnaHQgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB2ZXJ0aWNhbCBsaW5lc1xyXG4gICAgZm9yICggbGV0IGNvbHVtbiA9IDE7IGNvbHVtbiA8IG9wdGlvbnMuY29sdW1uczsgY29sdW1uKysgKSB7XHJcbiAgICAgIGdyaWRTaGFwZS5tb3ZlVG8oIGNvbHVtbiAqIG9wdGlvbnMuY2VsbFNpemUud2lkdGgsIDAgKS5saW5lVG8oIGNvbHVtbiAqIG9wdGlvbnMuY2VsbFNpemUud2lkdGgsIGdyaWRIZWlnaHQgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlciggZ3JpZFNoYXBlLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZXF1YWxpdHlFeHBsb3Jl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