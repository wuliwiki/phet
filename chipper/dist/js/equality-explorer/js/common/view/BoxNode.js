// Copyright 2017-2022, University of Colorado Boulder

/**
 * A pseudo-3D box, with perspective. The front and top faces are visible.
 * Used for various parts of the scale in Equality Explorer.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
export default class BoxNode extends Node {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      width: 200,
      height: 10,
      depth: 20,
      vanishingPointDistance: 100,
      topFill: 'white',
      frontFill: 'white',
      stroke: 'black'
    }, providedOptions);
    const hypotenuse = Math.sqrt(options.vanishingPointDistance * options.vanishingPointDistance + options.width / 2 * (options.width / 2));
    const perspectiveXOffset = hypotenuse * (options.depth / options.vanishingPointDistance);

    // options.width is the width at the midpoint of the box's top face, compute the foreground and background widths
    const foregroundWidth = options.width + perspectiveXOffset;
    const backgroundWidth = options.width - perspectiveXOffset;

    // top face: describe clockwise, starting at front-left corner, in pseudo-3D using parallel perspective
    const topShape = new Shape().moveTo(0, 0).lineTo(perspectiveXOffset, -options.depth).lineTo(perspectiveXOffset + backgroundWidth, -options.depth).lineTo(foregroundWidth, 0);
    const topNode = new Path(topShape, {
      fill: options.topFill,
      stroke: options.stroke
    });

    // front face
    const frontShape = new Shape().rect(0, 0, options.width + perspectiveXOffset, options.height);
    const frontNode = new Path(frontShape, {
      fill: options.frontFill,
      stroke: options.stroke
    });
    options.children = [topNode, frontNode];
    super(options);
  }
}
equalityExplorer.register('BoxNode', BoxNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIk5vZGUiLCJQYXRoIiwiZXF1YWxpdHlFeHBsb3JlciIsIkJveE5vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ3aWR0aCIsImhlaWdodCIsImRlcHRoIiwidmFuaXNoaW5nUG9pbnREaXN0YW5jZSIsInRvcEZpbGwiLCJmcm9udEZpbGwiLCJzdHJva2UiLCJoeXBvdGVudXNlIiwiTWF0aCIsInNxcnQiLCJwZXJzcGVjdGl2ZVhPZmZzZXQiLCJmb3JlZ3JvdW5kV2lkdGgiLCJiYWNrZ3JvdW5kV2lkdGgiLCJ0b3BTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsInRvcE5vZGUiLCJmaWxsIiwiZnJvbnRTaGFwZSIsInJlY3QiLCJmcm9udE5vZGUiLCJjaGlsZHJlbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQm94Tm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHBzZXVkby0zRCBib3gsIHdpdGggcGVyc3BlY3RpdmUuIFRoZSBmcm9udCBhbmQgdG9wIGZhY2VzIGFyZSB2aXNpYmxlLlxyXG4gKiBVc2VkIGZvciB2YXJpb3VzIHBhcnRzIG9mIHRoZSBzY2FsZSBpbiBFcXVhbGl0eSBFeHBsb3Jlci5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBOb2RlLCBOb2RlT3B0aW9ucywgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucywgUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB3aWR0aD86IG51bWJlcjsgLy8gd2lkdGggb2YgdGhlIHRvcCBmYWNlIGF0IGl0J3MgY2VudGVyXHJcbiAgaGVpZ2h0PzogbnVtYmVyOyAvLyBoZWlnaHQgb2YgdGhlIGZyb250IGZhY2VcclxuICBkZXB0aD86IG51bWJlcjsgIC8vIGRlcHRoIG9mIHRoZSB0b3AgZmFjZSBhZnRlciBmbGF0dGVuaW5nIHRvIDJEXHJcbiAgdmFuaXNoaW5nUG9pbnREaXN0YW5jZT86IG51bWJlcjsgLy8gZGlzdGFuY2Ugb2YgdGhlIHZhbmlzaGluZyBwb2ludCBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIHRvcCBmYWNlXHJcbiAgdG9wRmlsbD86IENvbG9yIHwgc3RyaW5nOyAvLyBmaWxsIGZvciB0aGUgdG9wIGZhY2Ugb2YgdGhlIGJveFxyXG4gIGZyb250RmlsbD86IENvbG9yIHwgc3RyaW5nOyAvLyBmaWxsIGZvIHRoZSBmcm9udCBmYWNlIG9mIHRoZSBib3hcclxuICBzdHJva2U/OiBDb2xvciB8IHN0cmluZzsgLy8gc3Ryb2tlIHVzZWQgZm9yIGJvdGggZmFjZXMgb2YgdGhlIGJveFxyXG59O1xyXG5cclxudHlwZSBCb3hOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJveE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBCb3hOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJveE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgIGhlaWdodDogMTAsXHJcbiAgICAgIGRlcHRoOiAyMCxcclxuICAgICAgdmFuaXNoaW5nUG9pbnREaXN0YW5jZTogMTAwLFxyXG4gICAgICB0b3BGaWxsOiAnd2hpdGUnLFxyXG4gICAgICBmcm9udEZpbGw6ICd3aGl0ZScsXHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgaHlwb3RlbnVzZSA9IE1hdGguc3FydCggb3B0aW9ucy52YW5pc2hpbmdQb2ludERpc3RhbmNlICogb3B0aW9ucy52YW5pc2hpbmdQb2ludERpc3RhbmNlICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggb3B0aW9ucy53aWR0aCAvIDIgKSAqICggb3B0aW9ucy53aWR0aCAvIDIgKSApO1xyXG4gICAgY29uc3QgcGVyc3BlY3RpdmVYT2Zmc2V0ID0gaHlwb3RlbnVzZSAqICggb3B0aW9ucy5kZXB0aCAvIG9wdGlvbnMudmFuaXNoaW5nUG9pbnREaXN0YW5jZSApO1xyXG5cclxuICAgIC8vIG9wdGlvbnMud2lkdGggaXMgdGhlIHdpZHRoIGF0IHRoZSBtaWRwb2ludCBvZiB0aGUgYm94J3MgdG9wIGZhY2UsIGNvbXB1dGUgdGhlIGZvcmVncm91bmQgYW5kIGJhY2tncm91bmQgd2lkdGhzXHJcbiAgICBjb25zdCBmb3JlZ3JvdW5kV2lkdGggPSBvcHRpb25zLndpZHRoICsgcGVyc3BlY3RpdmVYT2Zmc2V0O1xyXG4gICAgY29uc3QgYmFja2dyb3VuZFdpZHRoID0gb3B0aW9ucy53aWR0aCAtIHBlcnNwZWN0aXZlWE9mZnNldDtcclxuXHJcbiAgICAvLyB0b3AgZmFjZTogZGVzY3JpYmUgY2xvY2t3aXNlLCBzdGFydGluZyBhdCBmcm9udC1sZWZ0IGNvcm5lciwgaW4gcHNldWRvLTNEIHVzaW5nIHBhcmFsbGVsIHBlcnNwZWN0aXZlXHJcbiAgICBjb25zdCB0b3BTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgIC5tb3ZlVG8oIDAsIDAgKVxyXG4gICAgICAubGluZVRvKCBwZXJzcGVjdGl2ZVhPZmZzZXQsIC1vcHRpb25zLmRlcHRoIClcclxuICAgICAgLmxpbmVUbyggcGVyc3BlY3RpdmVYT2Zmc2V0ICsgYmFja2dyb3VuZFdpZHRoLCAtb3B0aW9ucy5kZXB0aCApXHJcbiAgICAgIC5saW5lVG8oIGZvcmVncm91bmRXaWR0aCwgMCApO1xyXG4gICAgY29uc3QgdG9wTm9kZSA9IG5ldyBQYXRoKCB0b3BTaGFwZSwge1xyXG4gICAgICBmaWxsOiBvcHRpb25zLnRvcEZpbGwsXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5zdHJva2VcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBmcm9udCBmYWNlXHJcbiAgICBjb25zdCBmcm9udFNoYXBlID0gbmV3IFNoYXBlKCkucmVjdCggMCwgMCwgb3B0aW9ucy53aWR0aCArIHBlcnNwZWN0aXZlWE9mZnNldCwgb3B0aW9ucy5oZWlnaHQgKTtcclxuICAgIGNvbnN0IGZyb250Tm9kZSA9IG5ldyBQYXRoKCBmcm9udFNoYXBlLCB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuZnJvbnRGaWxsLFxyXG4gICAgICBzdHJva2U6IG9wdGlvbnMuc3Ryb2tlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgdG9wTm9kZSwgZnJvbnROb2RlIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmVxdWFsaXR5RXhwbG9yZXIucmVnaXN0ZXIoICdCb3hOb2RlJywgQm94Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsU0FBUyxNQUFNLHVDQUF1QztBQUM3RCxTQUFnQkMsSUFBSSxFQUF1Q0MsSUFBSSxRQUFRLG1DQUFtQztBQUMxRyxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFjeEQsZUFBZSxNQUFNQyxPQUFPLFNBQVNILElBQUksQ0FBQztFQUVqQ0ksV0FBV0EsQ0FBRUMsZUFBZ0MsRUFBRztJQUVyRCxNQUFNQyxPQUFPLEdBQUdQLFNBQVMsQ0FBMkMsQ0FBQyxDQUFFO01BRXJFO01BQ0FRLEtBQUssRUFBRSxHQUFHO01BQ1ZDLE1BQU0sRUFBRSxFQUFFO01BQ1ZDLEtBQUssRUFBRSxFQUFFO01BQ1RDLHNCQUFzQixFQUFFLEdBQUc7TUFDM0JDLE9BQU8sRUFBRSxPQUFPO01BQ2hCQyxTQUFTLEVBQUUsT0FBTztNQUNsQkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUFFUixlQUFnQixDQUFDO0lBRXBCLE1BQU1TLFVBQVUsR0FBR0MsSUFBSSxDQUFDQyxJQUFJLENBQUVWLE9BQU8sQ0FBQ0ksc0JBQXNCLEdBQUdKLE9BQU8sQ0FBQ0ksc0JBQXNCLEdBQzdESixPQUFPLENBQUNDLEtBQUssR0FBRyxDQUFDLElBQU9ELE9BQU8sQ0FBQ0MsS0FBSyxHQUFHLENBQUMsQ0FBRyxDQUFDO0lBQzdFLE1BQU1VLGtCQUFrQixHQUFHSCxVQUFVLElBQUtSLE9BQU8sQ0FBQ0csS0FBSyxHQUFHSCxPQUFPLENBQUNJLHNCQUFzQixDQUFFOztJQUUxRjtJQUNBLE1BQU1RLGVBQWUsR0FBR1osT0FBTyxDQUFDQyxLQUFLLEdBQUdVLGtCQUFrQjtJQUMxRCxNQUFNRSxlQUFlLEdBQUdiLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHVSxrQkFBa0I7O0lBRTFEO0lBQ0EsTUFBTUcsUUFBUSxHQUFHLElBQUl0QixLQUFLLENBQUMsQ0FBQyxDQUN6QnVCLE1BQU0sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQ2RDLE1BQU0sQ0FBRUwsa0JBQWtCLEVBQUUsQ0FBQ1gsT0FBTyxDQUFDRyxLQUFNLENBQUMsQ0FDNUNhLE1BQU0sQ0FBRUwsa0JBQWtCLEdBQUdFLGVBQWUsRUFBRSxDQUFDYixPQUFPLENBQUNHLEtBQU0sQ0FBQyxDQUM5RGEsTUFBTSxDQUFFSixlQUFlLEVBQUUsQ0FBRSxDQUFDO0lBQy9CLE1BQU1LLE9BQU8sR0FBRyxJQUFJdEIsSUFBSSxDQUFFbUIsUUFBUSxFQUFFO01BQ2xDSSxJQUFJLEVBQUVsQixPQUFPLENBQUNLLE9BQU87TUFDckJFLE1BQU0sRUFBRVAsT0FBTyxDQUFDTztJQUNsQixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNWSxVQUFVLEdBQUcsSUFBSTNCLEtBQUssQ0FBQyxDQUFDLENBQUM0QixJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRXBCLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHVSxrQkFBa0IsRUFBRVgsT0FBTyxDQUFDRSxNQUFPLENBQUM7SUFDL0YsTUFBTW1CLFNBQVMsR0FBRyxJQUFJMUIsSUFBSSxDQUFFd0IsVUFBVSxFQUFFO01BQ3RDRCxJQUFJLEVBQUVsQixPQUFPLENBQUNNLFNBQVM7TUFDdkJDLE1BQU0sRUFBRVAsT0FBTyxDQUFDTztJQUNsQixDQUFFLENBQUM7SUFFSFAsT0FBTyxDQUFDc0IsUUFBUSxHQUFHLENBQUVMLE9BQU8sRUFBRUksU0FBUyxDQUFFO0lBRXpDLEtBQUssQ0FBRXJCLE9BQVEsQ0FBQztFQUNsQjtBQUNGO0FBRUFKLGdCQUFnQixDQUFDMkIsUUFBUSxDQUFFLFNBQVMsRUFBRTFCLE9BQVEsQ0FBQyJ9