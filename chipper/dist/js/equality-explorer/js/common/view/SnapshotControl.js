// Copyright 2017-2022, University of Colorado Boulder

/**
 * Control for taking, displaying and selecting a snapshot.
 * The Snapshots accordion box contains a vertical column of these.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { FireListener, Node, Rectangle } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerColors from '../EqualityExplorerColors.js';
import Snapshot from '../model/Snapshot.js';
import SnapshotNode from './SnapshotNode.js';
import CameraButton from '../../../../scenery-phet/js/buttons/CameraButton.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
export default class SnapshotControl extends Node {
  /**
   * @param scene - the scene that we'll be taking a snapshot of
   * @param snapshotProperty - snapshot associated with this control, null if no snapshot
   * @param selectedSnapshotProperty - the selected snapshot, null if no selection
   * @param [providedOptions]
   */
  constructor(scene, snapshotProperty, selectedSnapshotProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      variableValuesVisibleProperty: null,
      controlWidth: 100,
      controlHeight: 50,
      orientation: 'horizontal',
      commaSeparated: true,
      variableValuesOpacity: 1
    }, providedOptions);
    assert && assert(options.variableValuesOpacity >= 0 && options.variableValuesOpacity <= 1, `invalid variableValuesOpacity: ${options.variableValuesOpacity}`);

    // Shows the equation and optional variable values for the snapshot
    const snapshotNode = new SnapshotNode(snapshotProperty, scene, {
      commaSeparated: options.commaSeparated,
      variableValuesOpacity: options.variableValuesOpacity,
      variableValuesVisibleProperty: options.variableValuesVisibleProperty,
      orientation: options.orientation,
      maxWidth: options.controlWidth - 20,
      maxHeight: options.controlHeight - 16,
      tandem: options.tandem.createTandem('snapshotNode')
    });

    // rectangle that appears around the snapshot when it's selected
    const selectionRectangle = new Rectangle(0, 0, options.controlWidth, options.controlHeight, {
      visibleProperty: snapshotNode.visibleProperty,
      cornerRadius: 3,
      lineWidth: 3,
      stroke: 'transparent',
      cursor: 'pointer'
    });

    // Center the snapshot in the selection rectangle.
    snapshotNode.boundsProperty.link(bounds => {
      snapshotNode.center = selectionRectangle.center;
    });

    // snapshot (camera) button
    const snapshotButton = new CameraButton({
      visibleProperty: DerivedProperty.not(snapshotNode.visibleProperty),
      baseColor: 'white',
      touchAreaXDilation: 10,
      touchAreaYDilation: 10,
      maxWidth: options.controlWidth,
      maxHeight: options.controlHeight,
      center: selectionRectangle.center,
      listener: () => {
        assert && assert(!snapshotProperty.value, 'snapshot is already occupied');
        const snapshot = new Snapshot(scene);
        snapshotProperty.value = snapshot; // associate the snapshot with this control
        selectedSnapshotProperty.value = snapshot; // select the created snapshot
      },

      tandem: options.tandem.createTandem('snapshotButton'),
      phetioEnabledPropertyInstrumented: false,
      visiblePropertyOptions: {
        phetioReadOnly: true
      } // so that PhET-iO client can see whether its visible
    });

    options.children = [selectionRectangle, snapshotNode, snapshotButton];
    super(options);

    // Selects the snapshot associated with this control.
    selectionRectangle.addInputListener(new FireListener({
      fire: () => {
        if (snapshotProperty.value) {
          selectedSnapshotProperty.value = snapshotProperty.value;
        }
      },
      tandem: options.tandem.createTandem('fireListener')
    }));

    // Shows that the associated snapshot has been selected.
    selectedSnapshotProperty.link(selectedSnapshot => {
      const isSelected = selectedSnapshot && selectedSnapshot === snapshotProperty.value;
      selectionRectangle.stroke = isSelected ? EqualityExplorerColors.SNAPSHOT_SELECTED_STROKE : EqualityExplorerColors.SNAPSHOT_DESELECTED_STROKE;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
equalityExplorer.register('SnapshotControl', SnapshotControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJGaXJlTGlzdGVuZXIiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiZXF1YWxpdHlFeHBsb3JlciIsIkVxdWFsaXR5RXhwbG9yZXJDb2xvcnMiLCJTbmFwc2hvdCIsIlNuYXBzaG90Tm9kZSIsIkNhbWVyYUJ1dHRvbiIsIkRlcml2ZWRQcm9wZXJ0eSIsIlNuYXBzaG90Q29udHJvbCIsImNvbnN0cnVjdG9yIiwic2NlbmUiLCJzbmFwc2hvdFByb3BlcnR5Iiwic2VsZWN0ZWRTbmFwc2hvdFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInZhcmlhYmxlVmFsdWVzVmlzaWJsZVByb3BlcnR5IiwiY29udHJvbFdpZHRoIiwiY29udHJvbEhlaWdodCIsIm9yaWVudGF0aW9uIiwiY29tbWFTZXBhcmF0ZWQiLCJ2YXJpYWJsZVZhbHVlc09wYWNpdHkiLCJhc3NlcnQiLCJzbmFwc2hvdE5vZGUiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInNlbGVjdGlvblJlY3RhbmdsZSIsInZpc2libGVQcm9wZXJ0eSIsImNvcm5lclJhZGl1cyIsImxpbmVXaWR0aCIsInN0cm9rZSIsImN1cnNvciIsImJvdW5kc1Byb3BlcnR5IiwibGluayIsImJvdW5kcyIsImNlbnRlciIsInNuYXBzaG90QnV0dG9uIiwibm90IiwiYmFzZUNvbG9yIiwidG91Y2hBcmVhWERpbGF0aW9uIiwidG91Y2hBcmVhWURpbGF0aW9uIiwibGlzdGVuZXIiLCJ2YWx1ZSIsInNuYXBzaG90IiwicGhldGlvRW5hYmxlZFByb3BlcnR5SW5zdHJ1bWVudGVkIiwidmlzaWJsZVByb3BlcnR5T3B0aW9ucyIsInBoZXRpb1JlYWRPbmx5IiwiY2hpbGRyZW4iLCJhZGRJbnB1dExpc3RlbmVyIiwiZmlyZSIsInNlbGVjdGVkU25hcHNob3QiLCJpc1NlbGVjdGVkIiwiU05BUFNIT1RfU0VMRUNURURfU1RST0tFIiwiU05BUFNIT1RfREVTRUxFQ1RFRF9TVFJPS0UiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTbmFwc2hvdENvbnRyb2wudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udHJvbCBmb3IgdGFraW5nLCBkaXNwbGF5aW5nIGFuZCBzZWxlY3RpbmcgYSBzbmFwc2hvdC5cclxuICogVGhlIFNuYXBzaG90cyBhY2NvcmRpb24gYm94IGNvbnRhaW5zIGEgdmVydGljYWwgY29sdW1uIG9mIHRoZXNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBGaXJlTGlzdGVuZXIsIE5vZGUsIE5vZGVPcHRpb25zLCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZXF1YWxpdHlFeHBsb3JlciBmcm9tICcuLi8uLi9lcXVhbGl0eUV4cGxvcmVyLmpzJztcclxuaW1wb3J0IEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMgZnJvbSAnLi4vRXF1YWxpdHlFeHBsb3JlckNvbG9ycy5qcyc7XHJcbmltcG9ydCBFcXVhbGl0eUV4cGxvcmVyU2NlbmUgZnJvbSAnLi4vbW9kZWwvRXF1YWxpdHlFeHBsb3JlclNjZW5lLmpzJztcclxuaW1wb3J0IFNuYXBzaG90IGZyb20gJy4uL21vZGVsL1NuYXBzaG90LmpzJztcclxuaW1wb3J0IFNuYXBzaG90Tm9kZSBmcm9tICcuL1NuYXBzaG90Tm9kZS5qcyc7XHJcbmltcG9ydCBDYW1lcmFCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2J1dHRvbnMvQ2FtZXJhQnV0dG9uLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIE9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgLy8gd2hldGhlciB2YXJpYWJsZSB2YWx1ZXMgYXJlIHZpc2libGUgaW4gc25hcHNob3RzLCBudWxsIGlmIHRoZSBmZWF0dXJlIGlzIG5vdCBzdXBwb3J0ZWRcclxuICB2YXJpYWJsZVZhbHVlc1Zpc2libGVQcm9wZXJ0eT86IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+IHwgbnVsbDtcclxuICBjb250cm9sV2lkdGg/OiBudW1iZXI7XHJcbiAgY29udHJvbEhlaWdodD86IG51bWJlcjtcclxuICBvcmllbnRhdGlvbj86IE9yaWVudGF0aW9uOyAvLyBsYXlvdXQgb2YgdGhlIGVxdWF0aW9uIGFuZCB2YXJpYWJsZSB2YWx1ZXNcclxuICBjb21tYVNlcGFyYXRlZD86IGJvb2xlYW47IC8vIGFyZSB2YXJpYWJsZSB2YWx1ZXMgc2VwYXJhdGVkIGJ5IGNvbW1hcz9cclxuICB2YXJpYWJsZVZhbHVlc09wYWNpdHk/OiBudW1iZXI7IC8vIFswLDFdLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2VxdWFsaXR5LWV4cGxvcmVyL2lzc3Vlcy8xMTNcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFNuYXBzaG90Q29udHJvbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxOb2RlT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU25hcHNob3RDb250cm9sIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzY2VuZSAtIHRoZSBzY2VuZSB0aGF0IHdlJ2xsIGJlIHRha2luZyBhIHNuYXBzaG90IG9mXHJcbiAgICogQHBhcmFtIHNuYXBzaG90UHJvcGVydHkgLSBzbmFwc2hvdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBjb250cm9sLCBudWxsIGlmIG5vIHNuYXBzaG90XHJcbiAgICogQHBhcmFtIHNlbGVjdGVkU25hcHNob3RQcm9wZXJ0eSAtIHRoZSBzZWxlY3RlZCBzbmFwc2hvdCwgbnVsbCBpZiBubyBzZWxlY3Rpb25cclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNjZW5lOiBFcXVhbGl0eUV4cGxvcmVyU2NlbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBzbmFwc2hvdFByb3BlcnR5OiBQcm9wZXJ0eTxTbmFwc2hvdCB8IG51bGw+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRTbmFwc2hvdFByb3BlcnR5OiBQcm9wZXJ0eTxTbmFwc2hvdCB8IG51bGw+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBTbmFwc2hvdENvbnRyb2xPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U25hcHNob3RDb250cm9sT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICB2YXJpYWJsZVZhbHVlc1Zpc2libGVQcm9wZXJ0eTogbnVsbCxcclxuICAgICAgY29udHJvbFdpZHRoOiAxMDAsXHJcbiAgICAgIGNvbnRyb2xIZWlnaHQ6IDUwLFxyXG4gICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICBjb21tYVNlcGFyYXRlZDogdHJ1ZSxcclxuICAgICAgdmFyaWFibGVWYWx1ZXNPcGFjaXR5OiAxXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLnZhcmlhYmxlVmFsdWVzT3BhY2l0eSA+PSAwICYmIG9wdGlvbnMudmFyaWFibGVWYWx1ZXNPcGFjaXR5IDw9IDEsXHJcbiAgICAgIGBpbnZhbGlkIHZhcmlhYmxlVmFsdWVzT3BhY2l0eTogJHtvcHRpb25zLnZhcmlhYmxlVmFsdWVzT3BhY2l0eX1gICk7XHJcblxyXG4gICAgLy8gU2hvd3MgdGhlIGVxdWF0aW9uIGFuZCBvcHRpb25hbCB2YXJpYWJsZSB2YWx1ZXMgZm9yIHRoZSBzbmFwc2hvdFxyXG4gICAgY29uc3Qgc25hcHNob3ROb2RlID0gbmV3IFNuYXBzaG90Tm9kZSggc25hcHNob3RQcm9wZXJ0eSwgc2NlbmUsIHtcclxuICAgICAgY29tbWFTZXBhcmF0ZWQ6IG9wdGlvbnMuY29tbWFTZXBhcmF0ZWQsXHJcbiAgICAgIHZhcmlhYmxlVmFsdWVzT3BhY2l0eTogb3B0aW9ucy52YXJpYWJsZVZhbHVlc09wYWNpdHksXHJcbiAgICAgIHZhcmlhYmxlVmFsdWVzVmlzaWJsZVByb3BlcnR5OiBvcHRpb25zLnZhcmlhYmxlVmFsdWVzVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICBvcmllbnRhdGlvbjogb3B0aW9ucy5vcmllbnRhdGlvbixcclxuICAgICAgbWF4V2lkdGg6IG9wdGlvbnMuY29udHJvbFdpZHRoIC0gMjAsXHJcbiAgICAgIG1heEhlaWdodDogb3B0aW9ucy5jb250cm9sSGVpZ2h0IC0gMTYsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnc25hcHNob3ROb2RlJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gcmVjdGFuZ2xlIHRoYXQgYXBwZWFycyBhcm91bmQgdGhlIHNuYXBzaG90IHdoZW4gaXQncyBzZWxlY3RlZFxyXG4gICAgY29uc3Qgc2VsZWN0aW9uUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgb3B0aW9ucy5jb250cm9sV2lkdGgsIG9wdGlvbnMuY29udHJvbEhlaWdodCwge1xyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IHNuYXBzaG90Tm9kZS52aXNpYmxlUHJvcGVydHksXHJcbiAgICAgIGNvcm5lclJhZGl1czogMyxcclxuICAgICAgbGluZVdpZHRoOiAzLFxyXG4gICAgICBzdHJva2U6ICd0cmFuc3BhcmVudCcsXHJcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQ2VudGVyIHRoZSBzbmFwc2hvdCBpbiB0aGUgc2VsZWN0aW9uIHJlY3RhbmdsZS5cclxuICAgIHNuYXBzaG90Tm9kZS5ib3VuZHNQcm9wZXJ0eS5saW5rKCBib3VuZHMgPT4ge1xyXG4gICAgICBzbmFwc2hvdE5vZGUuY2VudGVyID0gc2VsZWN0aW9uUmVjdGFuZ2xlLmNlbnRlcjtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBzbmFwc2hvdCAoY2FtZXJhKSBidXR0b25cclxuICAgIGNvbnN0IHNuYXBzaG90QnV0dG9uID0gbmV3IENhbWVyYUJ1dHRvbigge1xyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IERlcml2ZWRQcm9wZXJ0eS5ub3QoIHNuYXBzaG90Tm9kZS52aXNpYmxlUHJvcGVydHkgKSxcclxuICAgICAgYmFzZUNvbG9yOiAnd2hpdGUnLFxyXG4gICAgICB0b3VjaEFyZWFYRGlsYXRpb246IDEwLFxyXG4gICAgICB0b3VjaEFyZWFZRGlsYXRpb246IDEwLFxyXG4gICAgICBtYXhXaWR0aDogb3B0aW9ucy5jb250cm9sV2lkdGgsXHJcbiAgICAgIG1heEhlaWdodDogb3B0aW9ucy5jb250cm9sSGVpZ2h0LFxyXG4gICAgICBjZW50ZXI6IHNlbGVjdGlvblJlY3RhbmdsZS5jZW50ZXIsXHJcbiAgICAgIGxpc3RlbmVyOiAoKSA9PiB7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIXNuYXBzaG90UHJvcGVydHkudmFsdWUsICdzbmFwc2hvdCBpcyBhbHJlYWR5IG9jY3VwaWVkJyApO1xyXG4gICAgICAgIGNvbnN0IHNuYXBzaG90ID0gbmV3IFNuYXBzaG90KCBzY2VuZSApO1xyXG4gICAgICAgIHNuYXBzaG90UHJvcGVydHkudmFsdWUgPSBzbmFwc2hvdDsgLy8gYXNzb2NpYXRlIHRoZSBzbmFwc2hvdCB3aXRoIHRoaXMgY29udHJvbFxyXG4gICAgICAgIHNlbGVjdGVkU25hcHNob3RQcm9wZXJ0eS52YWx1ZSA9IHNuYXBzaG90OyAvLyBzZWxlY3QgdGhlIGNyZWF0ZWQgc25hcHNob3RcclxuICAgICAgfSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdzbmFwc2hvdEJ1dHRvbicgKSxcclxuICAgICAgcGhldGlvRW5hYmxlZFByb3BlcnR5SW5zdHJ1bWVudGVkOiBmYWxzZSxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5T3B0aW9uczogeyBwaGV0aW9SZWFkT25seTogdHJ1ZSB9IC8vIHNvIHRoYXQgUGhFVC1pTyBjbGllbnQgY2FuIHNlZSB3aGV0aGVyIGl0cyB2aXNpYmxlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgc2VsZWN0aW9uUmVjdGFuZ2xlLCBzbmFwc2hvdE5vZGUsIHNuYXBzaG90QnV0dG9uIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBTZWxlY3RzIHRoZSBzbmFwc2hvdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBjb250cm9sLlxyXG4gICAgc2VsZWN0aW9uUmVjdGFuZ2xlLmFkZElucHV0TGlzdGVuZXIoIG5ldyBGaXJlTGlzdGVuZXIoIHtcclxuICAgICAgZmlyZTogKCkgPT4ge1xyXG4gICAgICAgIGlmICggc25hcHNob3RQcm9wZXJ0eS52YWx1ZSApIHtcclxuICAgICAgICAgIHNlbGVjdGVkU25hcHNob3RQcm9wZXJ0eS52YWx1ZSA9IHNuYXBzaG90UHJvcGVydHkudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2ZpcmVMaXN0ZW5lcicgKVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gU2hvd3MgdGhhdCB0aGUgYXNzb2NpYXRlZCBzbmFwc2hvdCBoYXMgYmVlbiBzZWxlY3RlZC5cclxuICAgIHNlbGVjdGVkU25hcHNob3RQcm9wZXJ0eS5saW5rKCBzZWxlY3RlZFNuYXBzaG90ID0+IHtcclxuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9ICggc2VsZWN0ZWRTbmFwc2hvdCAmJiBzZWxlY3RlZFNuYXBzaG90ID09PSBzbmFwc2hvdFByb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgIHNlbGVjdGlvblJlY3RhbmdsZS5zdHJva2UgPSBpc1NlbGVjdGVkID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMuU05BUFNIT1RfU0VMRUNURURfU1RST0tFIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMuU05BUFNIT1RfREVTRUxFQ1RFRF9TVFJPS0U7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZXF1YWxpdHlFeHBsb3Jlci5yZWdpc3RlciggJ1NuYXBzaG90Q29udHJvbCcsIFNuYXBzaG90Q29udHJvbCApOyJdLCJtYXBw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