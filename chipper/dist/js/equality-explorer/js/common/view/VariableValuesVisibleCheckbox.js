// Copyright 2017-2022, University of Colorado Boulder

/**
 * Checkbox used to show/hide the values of variables in the Snapshots accordion box.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerStrings from '../../EqualityExplorerStrings.js';
import VariableNode from './VariableNode.js';

// constants
const FONT_SIZE = 24;
export default class VariableValuesVisibleCheckbox extends Checkbox {
  constructor(variableValueVisibleProperty, variables, providedOptions) {
    // Design decision: If there are multiple variables, use the first variable to label the checkbox.
    // This decision was based on the limited space we have for the checkbox in Snapshots accordion box.
    const variable = variables[0];

    // variable
    const variableNode = new VariableNode(variable, {
      iconScale: 0.45,
      fontSize: FONT_SIZE
    });

    // ' = ?'
    const rightStringProperty = new DerivedProperty([EqualityExplorerStrings.questionMarkStringProperty], questionMarkString => ` ${MathSymbols.EQUAL_TO} ${questionMarkString}`);
    const rightText = new Text(rightStringProperty, {
      font: new PhetFont(FONT_SIZE)
    });
    const contentNode = new HBox({
      children: [variableNode, rightText],
      // x = ?
      maxWidth: 100
    });
    super(variableValueVisibleProperty, contentNode, providedOptions);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
equalityExplorer.register('VariableValuesVisibleCheckbox', VariableValuesVisibleCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJNYXRoU3ltYm9scyIsIlBoZXRGb250IiwiSEJveCIsIlRleHQiLCJDaGVja2JveCIsImVxdWFsaXR5RXhwbG9yZXIiLCJFcXVhbGl0eUV4cGxvcmVyU3RyaW5ncyIsIlZhcmlhYmxlTm9kZSIsIkZPTlRfU0laRSIsIlZhcmlhYmxlVmFsdWVzVmlzaWJsZUNoZWNrYm94IiwiY29uc3RydWN0b3IiLCJ2YXJpYWJsZVZhbHVlVmlzaWJsZVByb3BlcnR5IiwidmFyaWFibGVzIiwicHJvdmlkZWRPcHRpb25zIiwidmFyaWFibGUiLCJ2YXJpYWJsZU5vZGUiLCJpY29uU2NhbGUiLCJmb250U2l6ZSIsInJpZ2h0U3RyaW5nUHJvcGVydHkiLCJxdWVzdGlvbk1hcmtTdHJpbmdQcm9wZXJ0eSIsInF1ZXN0aW9uTWFya1N0cmluZyIsIkVRVUFMX1RPIiwicmlnaHRUZXh0IiwiZm9udCIsImNvbnRlbnROb2RlIiwiY2hpbGRyZW4iLCJtYXhXaWR0aCIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZhcmlhYmxlVmFsdWVzVmlzaWJsZUNoZWNrYm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENoZWNrYm94IHVzZWQgdG8gc2hvdy9oaWRlIHRoZSB2YWx1ZXMgb2YgdmFyaWFibGVzIGluIHRoZSBTbmFwc2hvdHMgYWNjb3JkaW9uIGJveC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBNYXRoU3ltYm9scyBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTWF0aFN5bWJvbHMuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgSEJveCwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDaGVja2JveCwgeyBDaGVja2JveE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgZXF1YWxpdHlFeHBsb3JlciBmcm9tICcuLi8uLi9lcXVhbGl0eUV4cGxvcmVyLmpzJztcclxuaW1wb3J0IEVxdWFsaXR5RXhwbG9yZXJTdHJpbmdzIGZyb20gJy4uLy4uL0VxdWFsaXR5RXhwbG9yZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IFZhcmlhYmxlIGZyb20gJy4uL21vZGVsL1ZhcmlhYmxlLmpzJztcclxuaW1wb3J0IFZhcmlhYmxlTm9kZSBmcm9tICcuL1ZhcmlhYmxlTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgRk9OVF9TSVpFID0gMjQ7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgVmFyaWFibGVWYWx1ZXNWaXNpYmxlQ2hlY2tib3hPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBDaGVja2JveE9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Q2hlY2tib3hPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYXJpYWJsZVZhbHVlc1Zpc2libGVDaGVja2JveCBleHRlbmRzIENoZWNrYm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YXJpYWJsZVZhbHVlVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgdmFyaWFibGVzOiBWYXJpYWJsZVtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogVmFyaWFibGVWYWx1ZXNWaXNpYmxlQ2hlY2tib3hPcHRpb25zICkge1xyXG5cclxuICAgIC8vIERlc2lnbiBkZWNpc2lvbjogSWYgdGhlcmUgYXJlIG11bHRpcGxlIHZhcmlhYmxlcywgdXNlIHRoZSBmaXJzdCB2YXJpYWJsZSB0byBsYWJlbCB0aGUgY2hlY2tib3guXHJcbiAgICAvLyBUaGlzIGRlY2lzaW9uIHdhcyBiYXNlZCBvbiB0aGUgbGltaXRlZCBzcGFjZSB3ZSBoYXZlIGZvciB0aGUgY2hlY2tib3ggaW4gU25hcHNob3RzIGFjY29yZGlvbiBib3guXHJcbiAgICBjb25zdCB2YXJpYWJsZSA9IHZhcmlhYmxlc1sgMCBdO1xyXG5cclxuICAgIC8vIHZhcmlhYmxlXHJcbiAgICBjb25zdCB2YXJpYWJsZU5vZGUgPSBuZXcgVmFyaWFibGVOb2RlKCB2YXJpYWJsZSwge1xyXG4gICAgICBpY29uU2NhbGU6IDAuNDUsXHJcbiAgICAgIGZvbnRTaXplOiBGT05UX1NJWkVcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyAnID0gPydcclxuICAgIGNvbnN0IHJpZ2h0U3RyaW5nUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIEVxdWFsaXR5RXhwbG9yZXJTdHJpbmdzLnF1ZXN0aW9uTWFya1N0cmluZ1Byb3BlcnR5IF0sXHJcbiAgICAgIHF1ZXN0aW9uTWFya1N0cmluZyA9PiBgICR7TWF0aFN5bWJvbHMuRVFVQUxfVE99ICR7cXVlc3Rpb25NYXJrU3RyaW5nfWAgKTtcclxuXHJcbiAgICBjb25zdCByaWdodFRleHQgPSBuZXcgVGV4dCggcmlnaHRTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIEZPTlRfU0laRSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudE5vZGUgPSBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogWyB2YXJpYWJsZU5vZGUsIHJpZ2h0VGV4dCBdLCAvLyB4ID0gP1xyXG4gICAgICBtYXhXaWR0aDogMTAwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHZhcmlhYmxlVmFsdWVWaXNpYmxlUHJvcGVydHksIGNvbnRlbnROb2RlLCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnVmFyaWFibGVWYWx1ZXNWaXNpYmxlQ2hlY2tib3gnLCBWYXJpYWJsZVZhbHVlc1Zpc2libGVDaGVja2JveCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBSXBFLE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFDcEUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsUUFBUSxNQUEyQixnQ0FBZ0M7QUFDMUUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHVCQUF1QixNQUFNLGtDQUFrQztBQUV0RSxPQUFPQyxZQUFZLE1BQU0sbUJBQW1COztBQUU1QztBQUNBLE1BQU1DLFNBQVMsR0FBRyxFQUFFO0FBTXBCLGVBQWUsTUFBTUMsNkJBQTZCLFNBQVNMLFFBQVEsQ0FBQztFQUUzRE0sV0FBV0EsQ0FBRUMsNEJBQStDLEVBQUVDLFNBQXFCLEVBQ3RFQyxlQUFzRCxFQUFHO0lBRTNFO0lBQ0E7SUFDQSxNQUFNQyxRQUFRLEdBQUdGLFNBQVMsQ0FBRSxDQUFDLENBQUU7O0lBRS9CO0lBQ0EsTUFBTUcsWUFBWSxHQUFHLElBQUlSLFlBQVksQ0FBRU8sUUFBUSxFQUFFO01BQy9DRSxTQUFTLEVBQUUsSUFBSTtNQUNmQyxRQUFRLEVBQUVUO0lBQ1osQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTVUsbUJBQW1CLEdBQUcsSUFBSW5CLGVBQWUsQ0FDN0MsQ0FBRU8sdUJBQXVCLENBQUNhLDBCQUEwQixDQUFFLEVBQ3REQyxrQkFBa0IsSUFBSyxJQUFHcEIsV0FBVyxDQUFDcUIsUUFBUyxJQUFHRCxrQkFBbUIsRUFBRSxDQUFDO0lBRTFFLE1BQU1FLFNBQVMsR0FBRyxJQUFJbkIsSUFBSSxDQUFFZSxtQkFBbUIsRUFBRTtNQUMvQ0ssSUFBSSxFQUFFLElBQUl0QixRQUFRLENBQUVPLFNBQVU7SUFDaEMsQ0FBRSxDQUFDO0lBRUgsTUFBTWdCLFdBQVcsR0FBRyxJQUFJdEIsSUFBSSxDQUFFO01BQzVCdUIsUUFBUSxFQUFFLENBQUVWLFlBQVksRUFBRU8sU0FBUyxDQUFFO01BQUU7TUFDdkNJLFFBQVEsRUFBRTtJQUNaLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRWYsNEJBQTRCLEVBQUVhLFdBQVcsRUFBRVgsZUFBZ0IsQ0FBQztFQUNyRTtFQUVnQmMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUF0QixnQkFBZ0IsQ0FBQ3dCLFFBQVEsQ0FBRSwrQkFBK0IsRUFBRXBCLDZCQUE4QixDQUFDIn0=