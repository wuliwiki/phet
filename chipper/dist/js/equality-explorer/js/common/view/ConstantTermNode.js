// Copyright 2018-2022, University of Colorado Boulder

/**
 * Displays a constant term.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Circle, Node } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerColors from '../EqualityExplorerColors.js';
import EqualityExplorerConstants from '../EqualityExplorerConstants.js';
import ReducedFractionNode from './ReducedFractionNode.js';
import TermNode from './TermNode.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class ConstantTermNode extends TermNode {
  constructor(termCreator, term, providedOptions) {
    const options = optionize()({
      // empty optionize call because we access options.interactiveTermNodeOptions below
    }, providedOptions);
    const contentNode = ConstantTermNode.createInteractiveTermNode(term.constantValue, combineOptions({}, options.interactiveTermNodeOptions, {
      diameter: term.diameter
    }));
    const shadowNode = new Circle(term.diameter / 2, {
      fill: 'black',
      opacity: EqualityExplorerConstants.SHADOW_OPACITY
    });
    super(termCreator, term, contentNode, shadowNode, options);
  }

  /**
   * Creates the representation of a term that the user interacts with.
   */
  static createInteractiveTermNode(constantValue, providedOptions) {
    return new InteractiveTermNode(constantValue, providedOptions); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }

  /**
   * Creates the representation of a term that is shown in equations.
   */
  static createEquationTermNode(constantValue, providedOptions) {
    return new EquationTermNode(constantValue, providedOptions); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }
}

/**
 * The representation of a term that is shown in equations, a reduced fraction.
 */
class EquationTermNode extends ReducedFractionNode {
  constructor(constantValue, providedOptions) {
    assert && assert(constantValue.isReduced(), `constantValue must be reduced: ${constantValue}`);
    const options = optionize()({
      // ReducedFractionNodeOptions
      integerFont: new PhetFont(40),
      fractionFont: new PhetFont(20)
    }, providedOptions);
    super(constantValue, options);
  }
}

/**
 * The representation of a term that the user interacts with, in this case a number inside a circle.
 */
class InteractiveTermNode extends Node {
  constructor(constantValue, providedOptions) {
    assert && assert(constantValue.isReduced(), `constantValue must be reduced: ${constantValue}`);
    const options = optionize()({
      // InteractiveTermNodeSelfOptions
      diameter: EqualityExplorerConstants.SMALL_TERM_DIAMETER,
      margin: 8,
      positiveFill: EqualityExplorerColors.POSITIVE_CONSTANT_FILL,
      negativeFill: EqualityExplorerColors.NEGATIVE_CONSTANT_FILL,
      positiveLineDash: [],
      negativeLineDash: [3, 3]
    }, providedOptions);
    const isPositive = constantValue.getValue() >= 0;

    // background circle
    const circleNode = new Circle(options.diameter / 2, {
      stroke: 'black',
      fill: isPositive ? options.positiveFill : options.negativeFill,
      lineDash: isPositive ? options.positiveLineDash : options.negativeLineDash
    });

    // constant value
    const margin = 0.18 * options.diameter; // determined empirically
    const equationTermNode = ConstantTermNode.createEquationTermNode(constantValue, combineOptions({}, options.equationTermNodeOptions, {
      maxWidth: circleNode.width - 2 * margin,
      maxHeight: circleNode.height - 2 * margin
    }));
    equationTermNode.boundsProperty.link(bounds => {
      equationTermNode.center = circleNode.center;
    });
    options.children = [circleNode, equationTermNode];
    super(options);
  }
}
equalityExplorer.register('ConstantTermNode', ConstantTermNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,