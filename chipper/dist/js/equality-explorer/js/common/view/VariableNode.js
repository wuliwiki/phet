// Copyright 2018-2022, University of Colorado Boulder

/**
 * Displays the icon or symbol that represents a variable.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import MathSymbolFont from '../../../../scenery-phet/js/MathSymbolFont.js';
import { Image, Node, Text } from '../../../../scenery/js/imports.js';
import ObjectVariable from '../model/ObjectVariable.js';
import equalityExplorer from '../../equalityExplorer.js';
export default class VariableNode extends Node {
  constructor(variable, providedOptions) {
    const options = optionize()({
      // SelfOptions
      iconScale: 1,
      fontSize: 24
    }, providedOptions);
    let symbolNode;
    if (variable instanceof ObjectVariable) {
      // use an image for a variable associated with a real-world object
      symbolNode = new Image(variable.image, {
        scale: options.iconScale
      });
    } else {
      // use text for a symbolic variable, e.g 'x'
      symbolNode = new Text(variable.symbolProperty, {
        font: new MathSymbolFont(options.fontSize)
      });
    }
    options.children = [symbolNode];
    super(options);
    this.disposeVariableNode = () => {
      symbolNode.dispose();
    };
  }
  dispose() {
    this.disposeVariableNode();
    super.dispose();
  }
}
equalityExplorer.register('VariableNode', VariableNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJNYXRoU3ltYm9sRm9udCIsIkltYWdlIiwiTm9kZSIsIlRleHQiLCJPYmplY3RWYXJpYWJsZSIsImVxdWFsaXR5RXhwbG9yZXIiLCJWYXJpYWJsZU5vZGUiLCJjb25zdHJ1Y3RvciIsInZhcmlhYmxlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImljb25TY2FsZSIsImZvbnRTaXplIiwic3ltYm9sTm9kZSIsImltYWdlIiwic2NhbGUiLCJzeW1ib2xQcm9wZXJ0eSIsImZvbnQiLCJjaGlsZHJlbiIsImRpc3Bvc2VWYXJpYWJsZU5vZGUiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJWYXJpYWJsZU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlzcGxheXMgdGhlIGljb24gb3Igc3ltYm9sIHRoYXQgcmVwcmVzZW50cyBhIHZhcmlhYmxlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBNYXRoU3ltYm9sRm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTWF0aFN5bWJvbEZvbnQuanMnO1xyXG5pbXBvcnQgeyBJbWFnZSwgTm9kZSwgTm9kZU9wdGlvbnMsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgT2JqZWN0VmFyaWFibGUgZnJvbSAnLi4vbW9kZWwvT2JqZWN0VmFyaWFibGUuanMnO1xyXG5pbXBvcnQgZXF1YWxpdHlFeHBsb3JlciBmcm9tICcuLi8uLi9lcXVhbGl0eUV4cGxvcmVyLmpzJztcclxuaW1wb3J0IFZhcmlhYmxlIGZyb20gJy4uL21vZGVsL1ZhcmlhYmxlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgaWNvblNjYWxlPzogbnVtYmVyOyAvLyBmb3IgdmFyaWFibGVzIHRoYXQgYXJlIGRpc3BsYXllZCBhcyBhbiBpY29uLCBlLmcuIGFwcGxlLCBjYXQsIGNvaW5cclxuICBmb250U2l6ZT86IG51bWJlcjsgLy8gZm9yIHZhcmlhYmxlcyB0aGF0IGFyZSBkaXNwbGF5ZWQgYXMgYSB0ZXh0IHN5bWJvbCwgZS5nLiAneCdcclxufTtcclxuXHJcbnR5cGUgVmFyaWFibGVOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmFyaWFibGVOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVZhcmlhYmxlTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YXJpYWJsZTogVmFyaWFibGUsIHByb3ZpZGVkT3B0aW9ucz86IFZhcmlhYmxlTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxWYXJpYWJsZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGljb25TY2FsZTogMSxcclxuICAgICAgZm9udFNpemU6IDI0XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBsZXQgc3ltYm9sTm9kZTogTm9kZTtcclxuICAgIGlmICggdmFyaWFibGUgaW5zdGFuY2VvZiBPYmplY3RWYXJpYWJsZSApIHtcclxuXHJcbiAgICAgIC8vIHVzZSBhbiBpbWFnZSBmb3IgYSB2YXJpYWJsZSBhc3NvY2lhdGVkIHdpdGggYSByZWFsLXdvcmxkIG9iamVjdFxyXG4gICAgICBzeW1ib2xOb2RlID0gbmV3IEltYWdlKCB2YXJpYWJsZS5pbWFnZSwge1xyXG4gICAgICAgIHNjYWxlOiBvcHRpb25zLmljb25TY2FsZVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuXHJcbiAgICAgIC8vIHVzZSB0ZXh0IGZvciBhIHN5bWJvbGljIHZhcmlhYmxlLCBlLmcgJ3gnXHJcbiAgICAgIHN5bWJvbE5vZGUgPSBuZXcgVGV4dCggdmFyaWFibGUuc3ltYm9sUHJvcGVydHksIHtcclxuICAgICAgICBmb250OiBuZXcgTWF0aFN5bWJvbEZvbnQoIG9wdGlvbnMuZm9udFNpemUgKVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgc3ltYm9sTm9kZSBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlVmFyaWFibGVOb2RlID0gKCkgPT4ge1xyXG4gICAgICBzeW1ib2xOb2RlLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVZhcmlhYmxlTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZXF1YWxpdHlFeHBsb3Jlci5yZWdpc3RlciggJ1ZhcmlhYmxlTm9kZScsIFZhcmlhYmxlTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELE9BQU9DLGNBQWMsTUFBTSwrQ0FBK0M7QUFDMUUsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLEVBQWVDLElBQUksUUFBUSxtQ0FBbUM7QUFDbEYsT0FBT0MsY0FBYyxNQUFNLDRCQUE0QjtBQUN2RCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFVeEQsZUFBZSxNQUFNQyxZQUFZLFNBQVNKLElBQUksQ0FBQztFQUl0Q0ssV0FBV0EsQ0FBRUMsUUFBa0IsRUFBRUMsZUFBcUMsRUFBRztJQUU5RSxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBZ0QsQ0FBQyxDQUFFO01BRTFFO01BQ0FZLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFFBQVEsRUFBRTtJQUNaLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixJQUFJSSxVQUFnQjtJQUNwQixJQUFLTCxRQUFRLFlBQVlKLGNBQWMsRUFBRztNQUV4QztNQUNBUyxVQUFVLEdBQUcsSUFBSVosS0FBSyxDQUFFTyxRQUFRLENBQUNNLEtBQUssRUFBRTtRQUN0Q0MsS0FBSyxFQUFFTCxPQUFPLENBQUNDO01BQ2pCLENBQUUsQ0FBQztJQUNMLENBQUMsTUFDSTtNQUVIO01BQ0FFLFVBQVUsR0FBRyxJQUFJVixJQUFJLENBQUVLLFFBQVEsQ0FBQ1EsY0FBYyxFQUFFO1FBQzlDQyxJQUFJLEVBQUUsSUFBSWpCLGNBQWMsQ0FBRVUsT0FBTyxDQUFDRSxRQUFTO01BQzdDLENBQUUsQ0FBQztJQUNMO0lBRUFGLE9BQU8sQ0FBQ1EsUUFBUSxHQUFHLENBQUVMLFVBQVUsQ0FBRTtJQUVqQyxLQUFLLENBQUVILE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNTLG1CQUFtQixHQUFHLE1BQU07TUFDL0JOLFVBQVUsQ0FBQ08sT0FBTyxDQUFDLENBQUM7SUFDdEIsQ0FBQztFQUNIO0VBRWdCQSxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDRCxtQkFBbUIsQ0FBQyxDQUFDO0lBQzFCLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBZixnQkFBZ0IsQ0FBQ2dCLFFBQVEsQ0FBRSxjQUFjLEVBQUVmLFlBQWEsQ0FBQyJ9