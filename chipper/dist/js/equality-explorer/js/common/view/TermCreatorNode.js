// Copyright 2017-2023, University of Colorado Boulder

/**
 * Node that creates terms. These nodes appear in the toolboxes that appear below the scale's plates.
 * See https://github.com/phetsims/equality-explorer/blob/master/doc/implementation-notes.md
 * for a description of how the PhET 'creator pattern' is applied in this simulation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { DragListener, Node } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
export default class TermCreatorNode extends Node {
  /**
   * @param termCreator - model element associated with this Node
   * @param plate - associated plate on the scale
   * @param termsLayer - parent for TermNodes that will be created
   * @param [providedOptions]
   */
  constructor(termCreator, plate, termsLayer, providedOptions) {
    const options = optionize()({
      // SelfOptions
      sign: 1,
      // NodeOptions
      cursor: 'pointer',
      phetioVisiblePropertyInstrumented: false // because left and right toolboxes must contain the same term creators for lock feature
    }, providedOptions);
    options.children = [termCreator.createIcon(options.sign)];
    super(options);
    this.termCreator = termCreator;
    this.plate = plate;
    this.termsLayer = termsLayer;

    // On down event, create a term and start a drag cycle by forwarding the event
    this.addInputListener(DragListener.createForwardingListener(
    // down
    event => {
      termCreator.createTerm({
        event: event,
        sign: options.sign
      });
    }));

    // Things to do after the sim has loaded, when this Node has a valid position.
    const frameStartedCallback = () => {
      // This Node's position
      const position = termsLayer.globalToLocalPoint(this.parentToGlobalPoint(this.center));

      // assign to termCreator's position
      if (options.sign === 1) {
        termCreator.positivePosition = position;
      } else {
        termCreator.negativePosition = position;
      }

      // Remove this function, so that it's called only once.
      phet.joist.sim.frameStartedEmitter.removeListener(frameStartedCallback);
    };
    phet.joist.sim.frameStartedEmitter.addListener(frameStartedCallback); // removeListener after first call

    this.addLinkedElement(termCreator, {
      tandem: options.tandem.createTandem(termCreator.tandem.name)
    });
  }
}
equalityExplorer.register('TermCreatorNode', TermCreatorNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJEcmFnTGlzdGVuZXIiLCJOb2RlIiwiZXF1YWxpdHlFeHBsb3JlciIsIlRlcm1DcmVhdG9yTm9kZSIsImNvbnN0cnVjdG9yIiwidGVybUNyZWF0b3IiLCJwbGF0ZSIsInRlcm1zTGF5ZXIiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic2lnbiIsImN1cnNvciIsInBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZCIsImNoaWxkcmVuIiwiY3JlYXRlSWNvbiIsImFkZElucHV0TGlzdGVuZXIiLCJjcmVhdGVGb3J3YXJkaW5nTGlzdGVuZXIiLCJldmVudCIsImNyZWF0ZVRlcm0iLCJmcmFtZVN0YXJ0ZWRDYWxsYmFjayIsInBvc2l0aW9uIiwiZ2xvYmFsVG9Mb2NhbFBvaW50IiwicGFyZW50VG9HbG9iYWxQb2ludCIsImNlbnRlciIsInBvc2l0aXZlUG9zaXRpb24iLCJuZWdhdGl2ZVBvc2l0aW9uIiwicGhldCIsImpvaXN0Iiwic2ltIiwiZnJhbWVTdGFydGVkRW1pdHRlciIsInJlbW92ZUxpc3RlbmVyIiwiYWRkTGlzdGVuZXIiLCJhZGRMaW5rZWRFbGVtZW50IiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwibmFtZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGVybUNyZWF0b3JOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vZGUgdGhhdCBjcmVhdGVzIHRlcm1zLiBUaGVzZSBub2RlcyBhcHBlYXIgaW4gdGhlIHRvb2xib3hlcyB0aGF0IGFwcGVhciBiZWxvdyB0aGUgc2NhbGUncyBwbGF0ZXMuXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZXF1YWxpdHktZXhwbG9yZXIvYmxvYi9tYXN0ZXIvZG9jL2ltcGxlbWVudGF0aW9uLW5vdGVzLm1kXHJcbiAqIGZvciBhIGRlc2NyaXB0aW9uIG9mIGhvdyB0aGUgUGhFVCAnY3JlYXRvciBwYXR0ZXJuJyBpcyBhcHBsaWVkIGluIHRoaXMgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIsIE5vZGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGVxdWFsaXR5RXhwbG9yZXIgZnJvbSAnLi4vLi4vZXF1YWxpdHlFeHBsb3Jlci5qcyc7XHJcbmltcG9ydCBQbGF0ZSBmcm9tICcuLi9tb2RlbC9QbGF0ZS5qcyc7XHJcbmltcG9ydCBUZXJtQ3JlYXRvciwgeyBUZXJtQ3JlYXRvclNpZ24gfSBmcm9tICcuLi9tb2RlbC9UZXJtQ3JlYXRvci5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNpZ24/OiBUZXJtQ3JlYXRvclNpZ247IC8vIHNpZ24gdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGVybXMgY3JlYXRlZCBieSB0aGlzIE5vZGVcclxufTtcclxuXHJcbnR5cGUgVGVybUNyZWF0b3JOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXJtQ3JlYXRvck5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSB0ZXJtQ3JlYXRvcjogVGVybUNyZWF0b3I7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBwbGF0ZTogUGxhdGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB0ZXJtc0xheWVyOiBOb2RlO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gdGVybUNyZWF0b3IgLSBtb2RlbCBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIE5vZGVcclxuICAgKiBAcGFyYW0gcGxhdGUgLSBhc3NvY2lhdGVkIHBsYXRlIG9uIHRoZSBzY2FsZVxyXG4gICAqIEBwYXJhbSB0ZXJtc0xheWVyIC0gcGFyZW50IGZvciBUZXJtTm9kZXMgdGhhdCB3aWxsIGJlIGNyZWF0ZWRcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRlcm1DcmVhdG9yOiBUZXJtQ3JlYXRvciwgcGxhdGU6IFBsYXRlLCB0ZXJtc0xheWVyOiBOb2RlLCBwcm92aWRlZE9wdGlvbnM6IFRlcm1DcmVhdG9yTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxUZXJtQ3JlYXRvck5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHNpZ246IDEsXHJcblxyXG4gICAgICAvLyBOb2RlT3B0aW9uc1xyXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcclxuICAgICAgcGhldGlvVmlzaWJsZVByb3BlcnR5SW5zdHJ1bWVudGVkOiBmYWxzZSAvLyBiZWNhdXNlIGxlZnQgYW5kIHJpZ2h0IHRvb2xib3hlcyBtdXN0IGNvbnRhaW4gdGhlIHNhbWUgdGVybSBjcmVhdG9ycyBmb3IgbG9jayBmZWF0dXJlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyB0ZXJtQ3JlYXRvci5jcmVhdGVJY29uKCBvcHRpb25zLnNpZ24gKSBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy50ZXJtQ3JlYXRvciA9IHRlcm1DcmVhdG9yO1xyXG4gICAgdGhpcy5wbGF0ZSA9IHBsYXRlO1xyXG4gICAgdGhpcy50ZXJtc0xheWVyID0gdGVybXNMYXllcjtcclxuXHJcbiAgICAvLyBPbiBkb3duIGV2ZW50LCBjcmVhdGUgYSB0ZXJtIGFuZCBzdGFydCBhIGRyYWcgY3ljbGUgYnkgZm9yd2FyZGluZyB0aGUgZXZlbnRcclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggRHJhZ0xpc3RlbmVyLmNyZWF0ZUZvcndhcmRpbmdMaXN0ZW5lcihcclxuICAgICAgLy8gZG93blxyXG4gICAgICBldmVudCA9PiB7XHJcbiAgICAgICAgdGVybUNyZWF0b3IuY3JlYXRlVGVybSgge1xyXG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgc2lnbjogb3B0aW9ucy5zaWduXHJcbiAgICAgICAgfSApO1xyXG4gICAgICB9ICkgKTtcclxuXHJcbiAgICAvLyBUaGluZ3MgdG8gZG8gYWZ0ZXIgdGhlIHNpbSBoYXMgbG9hZGVkLCB3aGVuIHRoaXMgTm9kZSBoYXMgYSB2YWxpZCBwb3NpdGlvbi5cclxuICAgIGNvbnN0IGZyYW1lU3RhcnRlZENhbGxiYWNrID0gKCkgPT4ge1xyXG5cclxuICAgICAgLy8gVGhpcyBOb2RlJ3MgcG9zaXRpb25cclxuICAgICAgY29uc3QgcG9zaXRpb24gPSB0ZXJtc0xheWVyLmdsb2JhbFRvTG9jYWxQb2ludCggdGhpcy5wYXJlbnRUb0dsb2JhbFBvaW50KCB0aGlzLmNlbnRlciApICk7XHJcblxyXG4gICAgICAvLyBhc3NpZ24gdG8gdGVybUNyZWF0b3IncyBwb3NpdGlvblxyXG4gICAgICBpZiAoIG9wdGlvbnMuc2lnbiA9PT0gMSApIHtcclxuICAgICAgICB0ZXJtQ3JlYXRvci5wb3NpdGl2ZVBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGVybUNyZWF0b3IubmVnYXRpdmVQb3NpdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZW1vdmUgdGhpcyBmdW5jdGlvbiwgc28gdGhhdCBpdCdzIGNhbGxlZCBvbmx5IG9uY2UuXHJcbiAgICAgIHBoZXQuam9pc3Quc2ltLmZyYW1lU3RhcnRlZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIGZyYW1lU3RhcnRlZENhbGxiYWNrICk7XHJcbiAgICB9O1xyXG4gICAgcGhldC5qb2lzdC5zaW0uZnJhbWVTdGFydGVkRW1pdHRlci5hZGRMaXN0ZW5lciggZnJhbWVTdGFydGVkQ2FsbGJhY2sgKTsgLy8gcmVtb3ZlTGlzdGVuZXIgYWZ0ZXIgZmlyc3QgY2FsbFxyXG5cclxuICAgIHRoaXMuYWRkTGlua2VkRWxlbWVudCggdGVybUNyZWF0b3IsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oIHRlcm1DcmVhdG9yLnRhbmRlbS5uYW1lIClcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmVxdWFsaXR5RXhwbG9yZXIucmVnaXN0ZXIoICdUZXJtQ3JlYXRvck5vZGUnLCBUZXJtQ3JlYXRvck5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsU0FBU0MsWUFBWSxFQUFFQyxJQUFJLFFBQXFCLG1DQUFtQztBQUNuRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFVeEQsZUFBZSxNQUFNQyxlQUFlLFNBQVNGLElBQUksQ0FBQztFQU1oRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsV0FBd0IsRUFBRUMsS0FBWSxFQUFFQyxVQUFnQixFQUFFQyxlQUF1QyxFQUFHO0lBRXRILE1BQU1DLE9BQU8sR0FBR1YsU0FBUyxDQUFtRCxDQUFDLENBQUU7TUFFN0U7TUFDQVcsSUFBSSxFQUFFLENBQUM7TUFFUDtNQUNBQyxNQUFNLEVBQUUsU0FBUztNQUNqQkMsaUNBQWlDLEVBQUUsS0FBSyxDQUFDO0lBQzNDLENBQUMsRUFBRUosZUFBZ0IsQ0FBQztJQUVwQkMsT0FBTyxDQUFDSSxRQUFRLEdBQUcsQ0FBRVIsV0FBVyxDQUFDUyxVQUFVLENBQUVMLE9BQU8sQ0FBQ0MsSUFBSyxDQUFDLENBQUU7SUFFN0QsS0FBSyxDQUFFRCxPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDSixXQUFXLEdBQUdBLFdBQVc7SUFDOUIsSUFBSSxDQUFDQyxLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBLFVBQVU7O0lBRTVCO0lBQ0EsSUFBSSxDQUFDUSxnQkFBZ0IsQ0FBRWYsWUFBWSxDQUFDZ0Isd0JBQXdCO0lBQzFEO0lBQ0FDLEtBQUssSUFBSTtNQUNQWixXQUFXLENBQUNhLFVBQVUsQ0FBRTtRQUN0QkQsS0FBSyxFQUFFQSxLQUFLO1FBQ1pQLElBQUksRUFBRUQsT0FBTyxDQUFDQztNQUNoQixDQUFFLENBQUM7SUFDTCxDQUFFLENBQUUsQ0FBQzs7SUFFUDtJQUNBLE1BQU1TLG9CQUFvQixHQUFHQSxDQUFBLEtBQU07TUFFakM7TUFDQSxNQUFNQyxRQUFRLEdBQUdiLFVBQVUsQ0FBQ2Msa0JBQWtCLENBQUUsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBRSxJQUFJLENBQUNDLE1BQU8sQ0FBRSxDQUFDOztNQUV6RjtNQUNBLElBQUtkLE9BQU8sQ0FBQ0MsSUFBSSxLQUFLLENBQUMsRUFBRztRQUN4QkwsV0FBVyxDQUFDbUIsZ0JBQWdCLEdBQUdKLFFBQVE7TUFDekMsQ0FBQyxNQUNJO1FBQ0hmLFdBQVcsQ0FBQ29CLGdCQUFnQixHQUFHTCxRQUFRO01BQ3pDOztNQUVBO01BQ0FNLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxHQUFHLENBQUNDLG1CQUFtQixDQUFDQyxjQUFjLENBQUVYLG9CQUFxQixDQUFDO0lBQzNFLENBQUM7SUFDRE8sSUFBSSxDQUFDQyxLQUFLLENBQUNDLEdBQUcsQ0FBQ0MsbUJBQW1CLENBQUNFLFdBQVcsQ0FBRVosb0JBQXFCLENBQUMsQ0FBQyxDQUFDOztJQUV4RSxJQUFJLENBQUNhLGdCQUFnQixDQUFFM0IsV0FBVyxFQUFFO01BQ2xDNEIsTUFBTSxFQUFFeEIsT0FBTyxDQUFDd0IsTUFBTSxDQUFDQyxZQUFZLENBQUU3QixXQUFXLENBQUM0QixNQUFNLENBQUNFLElBQUs7SUFDL0QsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBakMsZ0JBQWdCLENBQUNrQyxRQUFRLENBQUUsaUJBQWlCLEVBQUVqQyxlQUFnQixDQUFDIn0=