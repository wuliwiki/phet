// Copyright 2017-2022, University of Colorado Boulder

/**
 * Fixed-size panel that displays an equation or inequality.
 * The equation is scaled to fix the panel.
 * The equation's relational operator remains horizontally centered in the panel.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerConstants from '../EqualityExplorerConstants.js';
import EquationNode from './EquationNode.js';
export default class EquationPanel extends Panel {
  /**
   * @param leftTermCreators - left side of equation
   * @param rightTermCreators - right side of equation
   * @param [providedOptions]
   */
  constructor(leftTermCreators, rightTermCreators, providedOptions) {
    const options = optionize()({
      // SelfOptions
      contentWidth: 100,
      contentHeight: 60,
      // PanelOptions
      fill: null,
      stroke: null,
      resize: false,
      cornerRadius: EqualityExplorerConstants.PANEL_CORNER_RADIUS,
      xMargin: 5,
      yMargin: 5
    }, providedOptions);

    // use an invisible rectangle to enforce fixed content size, stroke 'red' with ?dev
    const invisibleRectangle = new Rectangle(0, 0, options.contentWidth, options.contentHeight);
    const equationNode = new EquationNode(leftTermCreators, rightTermCreators, options.equationNodeOptions);

    // wrapper to avoid exceeding stack size when bounds of equationNode changes
    const equationParent = new Node({
      children: [equationNode]
    });

    // off is not needed
    equationNode.boundsProperty.lazyLink(() => {
      // Compute the scale required to keep the equation centered on the relational operator.
      // This is more complicated than setting maxWidth because the equation's relation operator is
      // centered in the panel, and only one side of the equation may get too wide.
      // equationNode.x is the center of the equation's relational operator.
      const maxSideWidth = options.contentWidth / 2;
      const leftSideOverflow = Math.max(0, equationNode.x - equationNode.left - maxSideWidth);
      const rightSideOverflow = Math.max(0, equationNode.right - equationNode.x - maxSideWidth);
      const maxOverflow = Math.max(leftSideOverflow, rightSideOverflow);
      const xScale = maxSideWidth / (maxSideWidth + maxOverflow);

      // vertical scale
      const yScale = options.contentHeight / equationNode.height;

      // Scale and center the parent
      equationParent.setScaleMagnitude(Math.min(xScale, yScale));
      equationParent.x = invisibleRectangle.centerX;
      equationParent.centerY = invisibleRectangle.centerY;
    });
    const contentNode = new Node({
      children: [invisibleRectangle, equationParent]
    });
    super(contentNode, options);
    this.equationNode = equationNode;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Update the equation that is displayed in this panel.
   * To be used when this Node was created with equationNodeOptions.updateEnabled: false.
   */
  updateEquation() {
    this.equationNode.update();
  }
}
equalityExplorer.register('EquationPanel', EquationPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,