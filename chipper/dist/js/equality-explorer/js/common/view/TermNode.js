// Copyright 2018-2022, University of Colorado Boulder

/**
 * TermNode is the base class for displaying a term.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Circle, Node } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
import CombineTermsDragListener from './CombineTermsDragListener.js';
import HaloNode from './HaloNode.js';
import SeparateTermsDragListener from './SeparateTermsDragListener.js';
// constants
const DEFAULT_SHADOW_OFFSET = new Dimension2(4, 4);
export default class TermNode extends Node {
  constructor(termCreator, term, contentNode, shadowNode, providedOptions) {
    const options = optionize()({
      // SelfOptions
      shadowOffset: DEFAULT_SHADOW_OFFSET,
      // NodeOptions
      cursor: 'pointer'
    }, providedOptions);
    contentNode.centerX = 0;
    contentNode.centerY = 0;
    shadowNode.right = contentNode.right + options.shadowOffset.width;
    shadowNode.bottom = contentNode.bottom + options.shadowOffset.height;

    // halo around the content
    const haloRadius = Math.max(contentNode.width, contentNode.height);
    const haloNode = new HaloNode(haloRadius, {
      center: contentNode.center,
      visible: false
    });
    assert && assert(!options.children, 'TermNode sets children');
    options.children = [haloNode, shadowNode, contentNode];

    // Red dot at the origin
    if (phet.chipper.queryParameters.dev) {
      options.children.push(new Circle(2, {
        fill: 'red'
      }));
    }
    super(options);
    this.term = term;
    this.contentNodeSize = new Dimension2(contentNode.width, contentNode.height);

    // Move to position
    const positionObserver = position => {
      this.center = position;
    };
    term.positionProperty.link(positionObserver); // unlink required in dispose

    // Pickable (interactivity)
    const pickableListener = pickable => {
      this.pickable = pickable;
    };
    term.pickableProperty.link(pickableListener); // unlink required in dispose

    // Whether the term is on a plate determines its rendering order
    const onPlateListener = onPlate => {
      if (onPlate) {
        this.moveToBack();
      } else {
        this.moveToFront();
      }
    };
    term.onPlateProperty.link(onPlateListener); // unlink required in dispose

    // Show/hide shadow
    const shadowVisibleListener = shadowVisible => {
      shadowNode.visible = shadowVisible;
    };
    term.shadowVisibleProperty.link(shadowVisibleListener); // unlink required in dispose

    // Show/hide halo
    const haloVisibleListener = haloVisible => {
      haloNode.visible = haloVisible;
    };
    term.haloVisibleProperty.link(haloVisibleListener); // unlink required in dispose

    const dragListenerOptions = {
      haloRadius: haloRadius
    };
    if (termCreator.combineLikeTermsEnabled) {
      // dispose required
      this.termDragListener = new CombineTermsDragListener(this, term, termCreator, dragListenerOptions);
    } else {
      // dispose required
      this.termDragListener = new SeparateTermsDragListener(this, term, termCreator, dragListenerOptions);
    }
    this.addInputListener(this.termDragListener); // removeListener required in dispose

    this.disposeTermNode = () => {
      if (term.positionProperty.hasListener(positionObserver)) {
        term.positionProperty.unlink(positionObserver);
      }
      if (term.pickableProperty.hasListener(pickableListener)) {
        term.pickableProperty.unlink(pickableListener);
      }
      if (term.onPlateProperty.hasListener(onPlateListener)) {
        term.onPlateProperty.unlink(onPlateListener);
      }
      if (term.shadowVisibleProperty.hasListener(shadowVisibleListener)) {
        term.haloVisibleProperty.unlink(shadowVisibleListener);
      }
      if (term.shadowVisibleProperty.hasListener(haloVisibleListener)) {
        term.haloVisibleProperty.unlink(haloVisibleListener);
      }
      if (this.hasInputListener(this.termDragListener)) {
        this.removeInputListener(this.termDragListener);
      }
      this.termDragListener.dispose();
    };
  }
  dispose() {
    this.disposeTermNode();
    super.dispose();
  }

  /**
   * Starts a drag cycle.
   * The user drags a new term out of a toolbox below the scale by clicking on a TermCreatorNode.
   * That action causes TermCreatorNode to instantiate a TermNode.  This function allows
   * TermCreatorNode to forward the startDrag event to the TermNode that it created.
   */
  startDrag(event) {
    this.termDragListener.press(event);
  }
}
equalityExplorer.register('TermNode', TermNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwib3B0aW9uaXplIiwiQ2lyY2xlIiwiTm9kZSIsImVxdWFsaXR5RXhwbG9yZXIiLCJDb21iaW5lVGVybXNEcmFnTGlzdGVuZXIiLCJIYWxvTm9kZSIsIlNlcGFyYXRlVGVybXNEcmFnTGlzdGVuZXIiLCJERUZBVUxUX1NIQURPV19PRkZTRVQiLCJUZXJtTm9kZSIsImNvbnN0cnVjdG9yIiwidGVybUNyZWF0b3IiLCJ0ZXJtIiwiY29udGVudE5vZGUiLCJzaGFkb3dOb2RlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNoYWRvd09mZnNldCIsImN1cnNvciIsImNlbnRlclgiLCJjZW50ZXJZIiwicmlnaHQiLCJ3aWR0aCIsImJvdHRvbSIsImhlaWdodCIsImhhbG9SYWRpdXMiLCJNYXRoIiwibWF4IiwiaGFsb05vZGUiLCJjZW50ZXIiLCJ2aXNpYmxlIiwiYXNzZXJ0IiwiY2hpbGRyZW4iLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImRldiIsInB1c2giLCJmaWxsIiwiY29udGVudE5vZGVTaXplIiwicG9zaXRpb25PYnNlcnZlciIsInBvc2l0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsImxpbmsiLCJwaWNrYWJsZUxpc3RlbmVyIiwicGlja2FibGUiLCJwaWNrYWJsZVByb3BlcnR5Iiwib25QbGF0ZUxpc3RlbmVyIiwib25QbGF0ZSIsIm1vdmVUb0JhY2siLCJtb3ZlVG9Gcm9udCIsIm9uUGxhdGVQcm9wZXJ0eSIsInNoYWRvd1Zpc2libGVMaXN0ZW5lciIsInNoYWRvd1Zpc2libGUiLCJzaGFkb3dWaXNpYmxlUHJvcGVydHkiLCJoYWxvVmlzaWJsZUxpc3RlbmVyIiwiaGFsb1Zpc2libGUiLCJoYWxvVmlzaWJsZVByb3BlcnR5IiwiZHJhZ0xpc3RlbmVyT3B0aW9ucyIsImNvbWJpbmVMaWtlVGVybXNFbmFibGVkIiwidGVybURyYWdMaXN0ZW5lciIsImFkZElucHV0TGlzdGVuZXIiLCJkaXNwb3NlVGVybU5vZGUiLCJoYXNMaXN0ZW5lciIsInVubGluayIsImhhc0lucHV0TGlzdGVuZXIiLCJyZW1vdmVJbnB1dExpc3RlbmVyIiwiZGlzcG9zZSIsInN0YXJ0RHJhZyIsImV2ZW50IiwicHJlc3MiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRlcm1Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRlcm1Ob2RlIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBkaXNwbGF5aW5nIGEgdGVybS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBOb2RlLCBOb2RlT3B0aW9ucywgUHJlc3NMaXN0ZW5lckV2ZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGVxdWFsaXR5RXhwbG9yZXIgZnJvbSAnLi4vLi4vZXF1YWxpdHlFeHBsb3Jlci5qcyc7XHJcbmltcG9ydCBUZXJtIGZyb20gJy4uL21vZGVsL1Rlcm0uanMnO1xyXG5pbXBvcnQgVGVybUNyZWF0b3IgZnJvbSAnLi4vbW9kZWwvVGVybUNyZWF0b3IuanMnO1xyXG5pbXBvcnQgQ29tYmluZVRlcm1zRHJhZ0xpc3RlbmVyIGZyb20gJy4vQ29tYmluZVRlcm1zRHJhZ0xpc3RlbmVyLmpzJztcclxuaW1wb3J0IEhhbG9Ob2RlIGZyb20gJy4vSGFsb05vZGUuanMnO1xyXG5pbXBvcnQgU2VwYXJhdGVUZXJtc0RyYWdMaXN0ZW5lciBmcm9tICcuL1NlcGFyYXRlVGVybXNEcmFnTGlzdGVuZXIuanMnO1xyXG5pbXBvcnQgVGVybURyYWdMaXN0ZW5lciBmcm9tICcuL1Rlcm1EcmFnTGlzdGVuZXIuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IERFRkFVTFRfU0hBRE9XX09GRlNFVCA9IG5ldyBEaW1lbnNpb24yKCA0LCA0ICk7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNoYWRvd09mZnNldD86IERpbWVuc2lvbjI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBUZXJtTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlcm1Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSB0ZXJtOiBUZXJtO1xyXG4gIHB1YmxpYyByZWFkb25seSBjb250ZW50Tm9kZVNpemU6IERpbWVuc2lvbjI7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgdGVybURyYWdMaXN0ZW5lcjogVGVybURyYWdMaXN0ZW5lcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VUZXJtTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCB0ZXJtQ3JlYXRvcjogVGVybUNyZWF0b3IsIHRlcm06IFRlcm0sIGNvbnRlbnROb2RlOiBOb2RlLCBzaGFkb3dOb2RlOiBOb2RlLCBwcm92aWRlZE9wdGlvbnM/OiBUZXJtTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxUZXJtTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgc2hhZG93T2Zmc2V0OiBERUZBVUxUX1NIQURPV19PRkZTRVQsXHJcblxyXG4gICAgICAvLyBOb2RlT3B0aW9uc1xyXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29udGVudE5vZGUuY2VudGVyWCA9IDA7XHJcbiAgICBjb250ZW50Tm9kZS5jZW50ZXJZID0gMDtcclxuICAgIHNoYWRvd05vZGUucmlnaHQgPSBjb250ZW50Tm9kZS5yaWdodCArIG9wdGlvbnMuc2hhZG93T2Zmc2V0LndpZHRoO1xyXG4gICAgc2hhZG93Tm9kZS5ib3R0b20gPSBjb250ZW50Tm9kZS5ib3R0b20gKyBvcHRpb25zLnNoYWRvd09mZnNldC5oZWlnaHQ7XHJcblxyXG4gICAgLy8gaGFsbyBhcm91bmQgdGhlIGNvbnRlbnRcclxuICAgIGNvbnN0IGhhbG9SYWRpdXMgPSBNYXRoLm1heCggY29udGVudE5vZGUud2lkdGgsIGNvbnRlbnROb2RlLmhlaWdodCApO1xyXG4gICAgY29uc3QgaGFsb05vZGUgPSBuZXcgSGFsb05vZGUoIGhhbG9SYWRpdXMsIHtcclxuICAgICAgY2VudGVyOiBjb250ZW50Tm9kZS5jZW50ZXIsXHJcbiAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuY2hpbGRyZW4sICdUZXJtTm9kZSBzZXRzIGNoaWxkcmVuJyApO1xyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgaGFsb05vZGUsIHNoYWRvd05vZGUsIGNvbnRlbnROb2RlIF07XHJcblxyXG4gICAgLy8gUmVkIGRvdCBhdCB0aGUgb3JpZ2luXHJcbiAgICBpZiAoIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuZGV2ICkge1xyXG4gICAgICBvcHRpb25zLmNoaWxkcmVuLnB1c2goIG5ldyBDaXJjbGUoIDIsIHsgZmlsbDogJ3JlZCcgfSApICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnRlcm0gPSB0ZXJtO1xyXG4gICAgdGhpcy5jb250ZW50Tm9kZVNpemUgPSBuZXcgRGltZW5zaW9uMiggY29udGVudE5vZGUud2lkdGgsIGNvbnRlbnROb2RlLmhlaWdodCApO1xyXG5cclxuICAgIC8vIE1vdmUgdG8gcG9zaXRpb25cclxuICAgIGNvbnN0IHBvc2l0aW9uT2JzZXJ2ZXIgPSAoIHBvc2l0aW9uOiBWZWN0b3IyICkgPT4ge1xyXG4gICAgICB0aGlzLmNlbnRlciA9IHBvc2l0aW9uO1xyXG4gICAgfTtcclxuICAgIHRlcm0ucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCBwb3NpdGlvbk9ic2VydmVyICk7IC8vIHVubGluayByZXF1aXJlZCBpbiBkaXNwb3NlXHJcblxyXG4gICAgLy8gUGlja2FibGUgKGludGVyYWN0aXZpdHkpXHJcbiAgICBjb25zdCBwaWNrYWJsZUxpc3RlbmVyID0gKCBwaWNrYWJsZTogYm9vbGVhbiApID0+IHtcclxuICAgICAgdGhpcy5waWNrYWJsZSA9IHBpY2thYmxlO1xyXG4gICAgfTtcclxuICAgIHRlcm0ucGlja2FibGVQcm9wZXJ0eS5saW5rKCBwaWNrYWJsZUxpc3RlbmVyICk7IC8vIHVubGluayByZXF1aXJlZCBpbiBkaXNwb3NlXHJcblxyXG4gICAgLy8gV2hldGhlciB0aGUgdGVybSBpcyBvbiBhIHBsYXRlIGRldGVybWluZXMgaXRzIHJlbmRlcmluZyBvcmRlclxyXG4gICAgY29uc3Qgb25QbGF0ZUxpc3RlbmVyID0gKCBvblBsYXRlOiBib29sZWFuICkgPT4ge1xyXG4gICAgICBpZiAoIG9uUGxhdGUgKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlVG9CYWNrKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlVG9Gcm9udCgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGVybS5vblBsYXRlUHJvcGVydHkubGluayggb25QbGF0ZUxpc3RlbmVyICk7IC8vIHVubGluayByZXF1aXJlZCBpbiBkaXNwb3NlXHJcblxyXG4gICAgLy8gU2hvdy9oaWRlIHNoYWRvd1xyXG4gICAgY29uc3Qgc2hhZG93VmlzaWJsZUxpc3RlbmVyID0gKCBzaGFkb3dWaXNpYmxlOiBib29sZWFuICkgPT4ge1xyXG4gICAgICBzaGFkb3dOb2RlLnZpc2libGUgPSBzaGFkb3dWaXNpYmxlO1xyXG4gICAgfTtcclxuICAgIHRlcm0uc2hhZG93VmlzaWJsZVByb3BlcnR5LmxpbmsoIHNoYWRvd1Zpc2libGVMaXN0ZW5lciApOyAvLyB1bmxpbmsgcmVxdWlyZWQgaW4gZGlzcG9zZVxyXG5cclxuICAgIC8vIFNob3cvaGlkZSBoYWxvXHJcbiAgICBjb25zdCBoYWxvVmlzaWJsZUxpc3RlbmVyID0gKCBoYWxvVmlzaWJsZTogYm9vbGVhbiApID0+IHtcclxuICAgICAgaGFsb05vZGUudmlzaWJsZSA9IGhhbG9WaXNpYmxlO1xyXG4gICAgfTtcclxuICAgIHRlcm0uaGFsb1Zpc2libGVQcm9wZXJ0eS5saW5rKCBoYWxvVmlzaWJsZUxpc3RlbmVyICk7IC8vIHVubGluayByZXF1aXJlZCBpbiBkaXNwb3NlXHJcblxyXG4gICAgY29uc3QgZHJhZ0xpc3RlbmVyT3B0aW9ucyA9IHtcclxuICAgICAgaGFsb1JhZGl1czogaGFsb1JhZGl1c1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIHRlcm1DcmVhdG9yLmNvbWJpbmVMaWtlVGVybXNFbmFibGVkICkge1xyXG4gICAgICAvLyBkaXNwb3NlIHJlcXVpcmVkXHJcbiAgICAgIHRoaXMudGVybURyYWdMaXN0ZW5lciA9IG5ldyBDb21iaW5lVGVybXNEcmFnTGlzdGVuZXIoIHRoaXMsIHRlcm0sIHRlcm1DcmVhdG9yLCBkcmFnTGlzdGVuZXJPcHRpb25zICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gZGlzcG9zZSByZXF1aXJlZFxyXG4gICAgICB0aGlzLnRlcm1EcmFnTGlzdGVuZXIgPSBuZXcgU2VwYXJhdGVUZXJtc0RyYWdMaXN0ZW5lciggdGhpcywgdGVybSwgdGVybUNyZWF0b3IsIGRyYWdMaXN0ZW5lck9wdGlvbnMgKTtcclxuICAgIH1cclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggdGhpcy50ZXJtRHJhZ0xpc3RlbmVyICk7IC8vIHJlbW92ZUxpc3RlbmVyIHJlcXVpcmVkIGluIGRpc3Bvc2VcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VUZXJtTm9kZSA9ICgpID0+IHtcclxuXHJcbiAgICAgIGlmICggdGVybS5wb3NpdGlvblByb3BlcnR5Lmhhc0xpc3RlbmVyKCBwb3NpdGlvbk9ic2VydmVyICkgKSB7XHJcbiAgICAgICAgdGVybS5wb3NpdGlvblByb3BlcnR5LnVubGluayggcG9zaXRpb25PYnNlcnZlciApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIHRlcm0ucGlja2FibGVQcm9wZXJ0eS5oYXNMaXN0ZW5lciggcGlja2FibGVMaXN0ZW5lciApICkge1xyXG4gICAgICAgIHRlcm0ucGlja2FibGVQcm9wZXJ0eS51bmxpbmsoIHBpY2thYmxlTGlzdGVuZXIgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCB0ZXJtLm9uUGxhdGVQcm9wZXJ0eS5oYXNMaXN0ZW5lciggb25QbGF0ZUxpc3RlbmVyICkgKSB7XHJcbiAgICAgICAgdGVybS5vblBsYXRlUHJvcGVydHkudW5saW5rKCBvblBsYXRlTGlzdGVuZXIgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCB0ZXJtLnNoYWRvd1Zpc2libGVQcm9wZXJ0eS5oYXNMaXN0ZW5lciggc2hhZG93VmlzaWJsZUxpc3RlbmVyICkgKSB7XHJcbiAgICAgICAgdGVybS5oYWxvVmlzaWJsZVByb3BlcnR5LnVubGluayggc2hhZG93VmlzaWJsZUxpc3RlbmVyICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICggdGVybS5zaGFkb3dWaXNpYmxlUHJvcGVydHkuaGFzTGlzdGVuZXIoIGhhbG9WaXNpYmxlTGlzdGVuZXIgKSApIHtcclxuICAgICAgICB0ZXJtLmhhbG9WaXNpYmxlUHJvcGVydHkudW5saW5rKCBoYWxvVmlzaWJsZUxpc3RlbmVyICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICggdGhpcy5oYXNJbnB1dExpc3RlbmVyKCB0aGlzLnRlcm1EcmFnTGlzdGVuZXIgKSApIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUlucHV0TGlzdGVuZXIoIHRoaXMudGVybURyYWdMaXN0ZW5lciApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudGVybURyYWdMaXN0ZW5lci5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VUZXJtTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIGEgZHJhZyBjeWNsZS5cclxuICAgKiBUaGUgdXNlciBkcmFncyBhIG5ldyB0ZXJtIG91dCBvZiBhIHRvb2xib3ggYmVsb3cgdGhlIHNjYWxlIGJ5IGNsaWNraW5nIG9uIGEgVGVybUNyZWF0b3JOb2RlLlxyXG4gICAqIFRoYXQgYWN0aW9uIGNhdXNlcyBUZXJtQ3JlYXRvck5vZGUgdG8gaW5zdGFudGlhdGUgYSBUZXJtTm9kZS4gIFRoaXMgZnVuY3Rpb24gYWxsb3dzXHJcbiAgICogVGVybUNyZWF0b3JOb2RlIHRvIGZvcndhcmQgdGhlIHN0YXJ0RHJhZyBldmVudCB0byB0aGUgVGVybU5vZGUgdGhhdCBpdCBjcmVhdGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGFydERyYWcoIGV2ZW50OiBQcmVzc0xpc3RlbmVyRXZlbnQgKTogdm9pZCB7XHJcbiAgICB0aGlzLnRlcm1EcmFnTGlzdGVuZXIucHJlc3MoIGV2ZW50ICk7XHJcbiAgfVxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnVGVybU5vZGUnLCBUZXJtTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sa0NBQWtDO0FB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