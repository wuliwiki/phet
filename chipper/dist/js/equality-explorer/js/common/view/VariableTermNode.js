// Copyright 2018-2022, University of Colorado Boulder

/**
 * Displays a variable term.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import MathSymbolFont from '../../../../scenery-phet/js/MathSymbolFont.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerColors from '../EqualityExplorerColors.js';
import EqualityExplorerConstants from '../EqualityExplorerConstants.js';
import ReducedFractionNode from './ReducedFractionNode.js';
import TermNode from './TermNode.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class VariableTermNode extends TermNode {
  constructor(termCreator, term, providedOptions) {
    const options = optionize()({
      // empty optionize call because we access options.interactiveTermNodeOptions below
    }, providedOptions);

    // contentNode must be disposed!
    const contentNode = VariableTermNode.createInteractiveTermNode(term.coefficient, term.variable.symbolProperty, combineOptions({}, options.interactiveTermNodeOptions, {
      diameter: term.diameter
    }));
    const shadowNode = new Rectangle(0, 0, term.diameter, term.diameter, {
      fill: 'black',
      opacity: EqualityExplorerConstants.SHADOW_OPACITY
    });
    super(termCreator, term, contentNode, shadowNode, options);
    this.disposeVariableTermNode = () => {
      contentNode.dispose();
    };
  }
  dispose() {
    this.disposeVariableTermNode();
    super.dispose();
  }

  /**
   * Creates the representation of a term that the user interacts with,
   */
  static createInteractiveTermNode(coefficient, symbolProperty, providedOptions) {
    return new InteractiveTermNode(coefficient, symbolProperty, providedOptions); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }

  /**
   * Creates the representation of a term that is shown in equations.
   */
  static createEquationTermNode(coefficient, symbolProperty, providedOptions) {
    return new EquationTermNode(coefficient, symbolProperty, providedOptions); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }
}

/**
 * The representation of a term that is shown in equations, a coefficient and variable.
 */
class EquationTermNode extends HBox {
  constructor(coefficient, symbolProperty, providedOptions) {
    assert && assert(coefficient.isReduced(), `coefficient must be reduced: ${coefficient}`);
    const options = optionize()({
      // EquationTermNodeSelfOptions
      integerXSpacing: 4,
      fractionXSpacing: 4,
      integerFont: new PhetFont(40),
      fractionFont: new PhetFont(20),
      symbolFont: new MathSymbolFont(40),
      showOne: false,
      // do not show 1 and -1 coefficients

      // HBoxOptions
      align: 'center'
    }, providedOptions);
    options.children = [];

    // coefficient, with option to show 1 and -1
    if (options.showOne || coefficient.abs().getValue() !== 1) {
      const coefficientNode = new ReducedFractionNode(coefficient, {
        fractionFont: options.fractionFont,
        integerFont: options.integerFont
      });
      options.children.push(coefficientNode);
    }

    // variable's symbol, with option to show 1 and -1
    const stringProperty = new DerivedProperty([symbolProperty], symbol => !options.showOne && coefficient.getValue() === -1 ? MathSymbols.UNARY_MINUS + symbol : symbol);
    const symbolText = new Text(stringProperty, {
      font: options.symbolFont
    });
    options.children.push(symbolText);
    options.spacing = coefficient.isInteger() ? options.integerXSpacing : options.fractionXSpacing;
    super(options);
    this.disposeEquationTermNode = () => {
      stringProperty.dispose();
      symbolText.dispose();
    };
  }
  dispose() {
    this.disposeEquationTermNode();
    super.dispose();
  }
}

/**
 * The representation of a term that the user interacts with, in this case a coefficient and variable inside a square.
 */
class InteractiveTermNode extends Node {
  constructor(coefficient, symbolProperty, providedOptions) {
    assert && assert(coefficient.isReduced(), `coefficient must be reduced: ${coefficient}`);
    const options = optionize()({
      // InteractiveTermNodeSelfOptions
      diameter: EqualityExplorerConstants.SMALL_TERM_DIAMETER,
      margin: null,
      positiveFill: EqualityExplorerColors.POSITIVE_X_FILL,
      negativeFill: EqualityExplorerColors.NEGATIVE_X_FILL,
      positiveLineDash: [],
      // solid border for positive coefficient
      negativeLineDash: [4, 4] // dashed border for negative coefficient
    }, providedOptions);
    if (options.margin === null) {
      options.margin = 0.12 * options.diameter; // determined empirically
    }

    const isPositive = coefficient.getValue() >= 0;

    // background square
    const squareNode = new Rectangle(0, 0, options.diameter, options.diameter, {
      stroke: 'black',
      fill: isPositive ? options.positiveFill : options.negativeFill,
      lineDash: isPositive ? options.positiveLineDash : options.negativeLineDash
    });

    // equationTermNode must be disposed, because it is linked to a translated string Property
    const equationTermNode = VariableTermNode.createEquationTermNode(coefficient, symbolProperty, combineOptions({}, options.equationTermNodeOptions, {
      align: 'center',
      maxWidth: squareNode.width - 2 * options.margin,
      maxHeight: squareNode.height - 2 * options.margin
    }));
    equationTermNode.boundsProperty.link(bounds => {
      equationTermNode.center = squareNode.center;
    });
    options.children = [squareNode, equationTermNode];
    super(options);
    this.disposeInteractiveTermNode = () => {
      equationTermNode.dispose();
    };
  }
  dispose() {
    this.disposeInteractiveTermNode();
    super.dispose();
  }
}
equalityExplorer.register('VariableTermNode', VariableTermNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,