// Copyright 2018-2022, University of Colorado Boulder

/**
 * Animation sequence that translates a Node, then fades it out.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Range from '../../../../dot/js/Range.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Animation from '../../../../twixt/js/Animation.js';
import Easing from '../../../../twixt/js/Easing.js';
import equalityExplorer from '../../equalityExplorer.js';

// constants
const STEP_EMITTER = null; // Animations will be stepped via this.step

export default class TranslateThenFade {
  // Animation for translate
  // Animation for fade

  constructor(node, providedOptions) {
    const options = optionize()({
      // SelfOptions
      destination: Vector2.ZERO,
      onComplete: _.noop,
      onStop: _.noop,
      translateDuration: 0.7,
      fadeDuration: 0.25
    }, providedOptions);
    this.onStop = options.onStop;

    // Property for animating position.
    const positionProperty = new Property(node.translation);
    positionProperty.link(position => {
      node.translation = position;
    });

    // Property for animating opacity.
    const opacityProperty = new NumberProperty(node.opacity, {
      range: new Range(0, 1)
    });
    opacityProperty.link(opacity => {
      node.opacity = opacity;
    });
    this.translateAnimation = new Animation({
      stepEmitter: STEP_EMITTER,
      duration: options.translateDuration,
      targets: [{
        property: positionProperty,
        easing: Easing.QUINTIC_IN,
        to: options.destination
      }]
    });
    this.fadeAnimation = new Animation({
      stepEmitter: STEP_EMITTER,
      duration: options.fadeDuration,
      targets: [{
        property: opacityProperty,
        easing: Easing.LINEAR,
        to: 0
      }]
    });

    // When translation finishes, start fade animation.
    this.translateAnimation.finishEmitter.addListener(() => this.fadeAnimation.start());

    // When fade finishes, perform callback.
    this.fadeAnimation.finishEmitter.addListener(() => options.onComplete());
  }

  /**
   * Steps the animation.
   * @param dt - time step, in seconds
   */
  step(dt) {
    this.translateAnimation.step(dt);
    this.fadeAnimation.step(dt);
  }

  /**
   * Starts the animation.
   */
  start() {
    this.translateAnimation.start();
  }

  /**
   * Stops the animation.
   */
  stop() {
    this.translateAnimation.stop();
    this.fadeAnimation.stop();
    this.onStop();
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
}
equalityExplorer.register('TranslateThenFade', TranslateThenFade);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlByb3BlcnR5IiwiVmVjdG9yMiIsIlJhbmdlIiwib3B0aW9uaXplIiwiQW5pbWF0aW9uIiwiRWFzaW5nIiwiZXF1YWxpdHlFeHBsb3JlciIsIlNURVBfRU1JVFRFUiIsIlRyYW5zbGF0ZVRoZW5GYWRlIiwiY29uc3RydWN0b3IiLCJub2RlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImRlc3RpbmF0aW9uIiwiWkVSTyIsIm9uQ29tcGxldGUiLCJfIiwibm9vcCIsIm9uU3RvcCIsInRyYW5zbGF0ZUR1cmF0aW9uIiwiZmFkZUR1cmF0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsInRyYW5zbGF0aW9uIiwibGluayIsInBvc2l0aW9uIiwib3BhY2l0eVByb3BlcnR5Iiwib3BhY2l0eSIsInJhbmdlIiwidHJhbnNsYXRlQW5pbWF0aW9uIiwic3RlcEVtaXR0ZXIiLCJkdXJhdGlvbiIsInRhcmdldHMiLCJwcm9wZXJ0eSIsImVhc2luZyIsIlFVSU5USUNfSU4iLCJ0byIsImZhZGVBbmltYXRpb24iLCJMSU5FQVIiLCJmaW5pc2hFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJzdGFydCIsInN0ZXAiLCJkdCIsInN0b3AiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUcmFuc2xhdGVUaGVuRmFkZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBbmltYXRpb24gc2VxdWVuY2UgdGhhdCB0cmFuc2xhdGVzIGEgTm9kZSwgdGhlbiBmYWRlcyBpdCBvdXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4uLy4uLy4uLy4uL3R3aXh0L2pzL0FuaW1hdGlvbi5qcyc7XHJcbmltcG9ydCBFYXNpbmcgZnJvbSAnLi4vLi4vLi4vLi4vdHdpeHQvanMvRWFzaW5nLmpzJztcclxuaW1wb3J0IGVxdWFsaXR5RXhwbG9yZXIgZnJvbSAnLi4vLi4vZXF1YWxpdHlFeHBsb3Jlci5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgU1RFUF9FTUlUVEVSID0gbnVsbDsgLy8gQW5pbWF0aW9ucyB3aWxsIGJlIHN0ZXBwZWQgdmlhIHRoaXMuc3RlcFxyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBkZXN0aW5hdGlvbj86IFZlY3RvcjI7IC8vIGRlc3RpbmF0aW9uIHBvc2l0aW9uXHJcbiAgb25Db21wbGV0ZT86ICgpID0+IHZvaWQ7IC8vIGNhbGxlZCB3aGVuIHRoZSBhbmltYXRpb24gY29tcGxldGVzXHJcbiAgb25TdG9wPzogKCkgPT4gdm9pZDsgLy8gY2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBzdG9wcGVkIChieSBjYWxsaW5nIHN0b3ApXHJcbiAgdHJhbnNsYXRlRHVyYXRpb24/OiBudW1iZXI7IC8vIG1vdGlvbiBkdXJhdGlvbiwgaW4gc2Vjb25kc1xyXG4gIGZhZGVEdXJhdGlvbj86IG51bWJlcjsgLy8gZmFkZSBkdXJhdGlvbiwgaW4gc2Vjb25kc1xyXG59O1xyXG5cclxudHlwZSBUcmFuc2xhdGVUaGVuRmFkZU9wdGlvbnMgPSBTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zbGF0ZVRoZW5GYWRlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBvblN0b3A6ICgpID0+IHZvaWQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB0cmFuc2xhdGVBbmltYXRpb246IEFuaW1hdGlvbjsgLy8gQW5pbWF0aW9uIGZvciB0cmFuc2xhdGVcclxuICBwcml2YXRlIHJlYWRvbmx5IGZhZGVBbmltYXRpb246IEFuaW1hdGlvbjsgLy8gQW5pbWF0aW9uIGZvciBmYWRlXHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggbm9kZTogTm9kZSwgcHJvdmlkZWRPcHRpb25zPzogVHJhbnNsYXRlVGhlbkZhZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VHJhbnNsYXRlVGhlbkZhZGVPcHRpb25zLCBTZWxmT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgZGVzdGluYXRpb246IFZlY3RvcjIuWkVSTyxcclxuICAgICAgb25Db21wbGV0ZTogXy5ub29wLFxyXG4gICAgICBvblN0b3A6IF8ubm9vcCxcclxuICAgICAgdHJhbnNsYXRlRHVyYXRpb246IDAuNyxcclxuICAgICAgZmFkZUR1cmF0aW9uOiAwLjI1XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLm9uU3RvcCA9IG9wdGlvbnMub25TdG9wO1xyXG5cclxuICAgIC8vIFByb3BlcnR5IGZvciBhbmltYXRpbmcgcG9zaXRpb24uXHJcbiAgICBjb25zdCBwb3NpdGlvblByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBub2RlLnRyYW5zbGF0aW9uICk7XHJcbiAgICBwb3NpdGlvblByb3BlcnR5LmxpbmsoIHBvc2l0aW9uID0+IHtcclxuICAgICAgbm9kZS50cmFuc2xhdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFByb3BlcnR5IGZvciBhbmltYXRpbmcgb3BhY2l0eS5cclxuICAgIGNvbnN0IG9wYWNpdHlQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggbm9kZS5vcGFjaXR5LCB7XHJcbiAgICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAsIDEgKVxyXG4gICAgfSApO1xyXG4gICAgb3BhY2l0eVByb3BlcnR5LmxpbmsoIG9wYWNpdHkgPT4ge1xyXG4gICAgICBub2RlLm9wYWNpdHkgPSBvcGFjaXR5O1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMudHJhbnNsYXRlQW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbigge1xyXG4gICAgICBzdGVwRW1pdHRlcjogU1RFUF9FTUlUVEVSLFxyXG4gICAgICBkdXJhdGlvbjogb3B0aW9ucy50cmFuc2xhdGVEdXJhdGlvbixcclxuICAgICAgdGFyZ2V0czogWyB7XHJcbiAgICAgICAgcHJvcGVydHk6IHBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgICAgZWFzaW5nOiBFYXNpbmcuUVVJTlRJQ19JTixcclxuICAgICAgICB0bzogb3B0aW9ucy5kZXN0aW5hdGlvblxyXG4gICAgICB9IF1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmZhZGVBbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKCB7XHJcbiAgICAgIHN0ZXBFbWl0dGVyOiBTVEVQX0VNSVRURVIsXHJcbiAgICAgIGR1cmF0aW9uOiBvcHRpb25zLmZhZGVEdXJhdGlvbixcclxuICAgICAgdGFyZ2V0czogWyB7XHJcbiAgICAgICAgcHJvcGVydHk6IG9wYWNpdHlQcm9wZXJ0eSxcclxuICAgICAgICBlYXNpbmc6IEVhc2luZy5MSU5FQVIsXHJcbiAgICAgICAgdG86IDBcclxuICAgICAgfSBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gV2hlbiB0cmFuc2xhdGlvbiBmaW5pc2hlcywgc3RhcnQgZmFkZSBhbmltYXRpb24uXHJcbiAgICB0aGlzLnRyYW5zbGF0ZUFuaW1hdGlvbi5maW5pc2hFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiB0aGlzLmZhZGVBbmltYXRpb24uc3RhcnQoKSApO1xyXG5cclxuICAgIC8vIFdoZW4gZmFkZSBmaW5pc2hlcywgcGVyZm9ybSBjYWxsYmFjay5cclxuICAgIHRoaXMuZmFkZUFuaW1hdGlvbi5maW5pc2hFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiBvcHRpb25zLm9uQ29tcGxldGUoKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcHMgdGhlIGFuaW1hdGlvbi5cclxuICAgKiBAcGFyYW0gZHQgLSB0aW1lIHN0ZXAsIGluIHNlY29uZHNcclxuICAgKi9cclxuICBwdWJsaWMgc3RlcCggZHQ6IG51bWJlciApOiB2b2lkIHtcclxuICAgIHRoaXMudHJhbnNsYXRlQW5pbWF0aW9uLnN0ZXAoIGR0ICk7XHJcbiAgICB0aGlzLmZhZGVBbmltYXRpb24uc3RlcCggZHQgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB0aGUgYW5pbWF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGFydCgpOiB2b2lkIHtcclxuICAgIHRoaXMudHJhbnNsYXRlQW5pbWF0aW9uLnN0YXJ0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wcyB0aGUgYW5pbWF0aW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xyXG4gICAgdGhpcy50cmFuc2xhdGVBbmltYXRpb24uc3RvcCgpO1xyXG4gICAgdGhpcy5mYWRlQW5pbWF0aW9uLnN0b3AoKTtcclxuICAgIHRoaXMub25TdG9wKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH1cclxufVxyXG5cclxuZXF1YWxpdHlFeHBsb3Jlci5yZWdpc3RlciggJ1RyYW5zbGF0ZVRoZW5GYWRlJywgVHJhbnNsYXRlVGhlbkZhZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHVDQUF1QztBQUNsRSxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBRTdELE9BQU9DLFNBQVMsTUFBTSxtQ0FBbUM7QUFDekQsT0FBT0MsTUFBTSxNQUFNLGdDQUFnQztBQUNuRCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7O0FBRXhEO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDOztBQVkzQixlQUFlLE1BQU1DLGlCQUFpQixDQUFDO0VBR1c7RUFDTDs7RUFFcENDLFdBQVdBLENBQUVDLElBQVUsRUFBRUMsZUFBMEMsRUFBRztJQUUzRSxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBd0MsQ0FBQyxDQUFFO01BRWxFO01BQ0FVLFdBQVcsRUFBRVosT0FBTyxDQUFDYSxJQUFJO01BQ3pCQyxVQUFVLEVBQUVDLENBQUMsQ0FBQ0MsSUFBSTtNQUNsQkMsTUFBTSxFQUFFRixDQUFDLENBQUNDLElBQUk7TUFDZEUsaUJBQWlCLEVBQUUsR0FBRztNQUN0QkMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFBRVQsZUFBZ0IsQ0FBQztJQUVwQixJQUFJLENBQUNPLE1BQU0sR0FBR04sT0FBTyxDQUFDTSxNQUFNOztJQUU1QjtJQUNBLE1BQU1HLGdCQUFnQixHQUFHLElBQUlyQixRQUFRLENBQUVVLElBQUksQ0FBQ1ksV0FBWSxDQUFDO0lBQ3pERCxnQkFBZ0IsQ0FBQ0UsSUFBSSxDQUFFQyxRQUFRLElBQUk7TUFDakNkLElBQUksQ0FBQ1ksV0FBVyxHQUFHRSxRQUFRO0lBQzdCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLGVBQWUsR0FBRyxJQUFJMUIsY0FBYyxDQUFFVyxJQUFJLENBQUNnQixPQUFPLEVBQUU7TUFDeERDLEtBQUssRUFBRSxJQUFJekIsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFFO0lBQ3pCLENBQUUsQ0FBQztJQUNIdUIsZUFBZSxDQUFDRixJQUFJLENBQUVHLE9BQU8sSUFBSTtNQUMvQmhCLElBQUksQ0FBQ2dCLE9BQU8sR0FBR0EsT0FBTztJQUN4QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNFLGtCQUFrQixHQUFHLElBQUl4QixTQUFTLENBQUU7TUFDdkN5QixXQUFXLEVBQUV0QixZQUFZO01BQ3pCdUIsUUFBUSxFQUFFbEIsT0FBTyxDQUFDTyxpQkFBaUI7TUFDbkNZLE9BQU8sRUFBRSxDQUFFO1FBQ1RDLFFBQVEsRUFBRVgsZ0JBQWdCO1FBQzFCWSxNQUFNLEVBQUU1QixNQUFNLENBQUM2QixVQUFVO1FBQ3pCQyxFQUFFLEVBQUV2QixPQUFPLENBQUNDO01BQ2QsQ0FBQztJQUNILENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ3VCLGFBQWEsR0FBRyxJQUFJaEMsU0FBUyxDQUFFO01BQ2xDeUIsV0FBVyxFQUFFdEIsWUFBWTtNQUN6QnVCLFFBQVEsRUFBRWxCLE9BQU8sQ0FBQ1EsWUFBWTtNQUM5QlcsT0FBTyxFQUFFLENBQUU7UUFDVEMsUUFBUSxFQUFFUCxlQUFlO1FBQ3pCUSxNQUFNLEVBQUU1QixNQUFNLENBQUNnQyxNQUFNO1FBQ3JCRixFQUFFLEVBQUU7TUFDTixDQUFDO0lBQ0gsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDUCxrQkFBa0IsQ0FBQ1UsYUFBYSxDQUFDQyxXQUFXLENBQUUsTUFBTSxJQUFJLENBQUNILGFBQWEsQ0FBQ0ksS0FBSyxDQUFDLENBQUUsQ0FBQzs7SUFFckY7SUFDQSxJQUFJLENBQUNKLGFBQWEsQ0FBQ0UsYUFBYSxDQUFDQyxXQUFXLENBQUUsTUFBTTNCLE9BQU8sQ0FBQ0csVUFBVSxDQUFDLENBQUUsQ0FBQztFQUM1RTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTMEIsSUFBSUEsQ0FBRUMsRUFBVSxFQUFTO0lBQzlCLElBQUksQ0FBQ2Qsa0JBQWtCLENBQUNhLElBQUksQ0FBRUMsRUFBRyxDQUFDO0lBQ2xDLElBQUksQ0FBQ04sYUFBYSxDQUFDSyxJQUFJLENBQUVDLEVBQUcsQ0FBQztFQUMvQjs7RUFFQTtBQUNGO0FBQ0E7RUFDU0YsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ1osa0JBQWtCLENBQUNZLEtBQUssQ0FBQyxDQUFDO0VBQ2pDOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRyxJQUFJQSxDQUFBLEVBQVM7SUFDbEIsSUFBSSxDQUFDZixrQkFBa0IsQ0FBQ2UsSUFBSSxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDUCxhQUFhLENBQUNPLElBQUksQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQ3pCLE1BQU0sQ0FBQyxDQUFDO0VBQ2Y7RUFFTzBCLE9BQU9BLENBQUEsRUFBUztJQUNyQkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0VBQzNGO0FBQ0Y7QUFFQXZDLGdCQUFnQixDQUFDd0MsUUFBUSxDQUFFLG1CQUFtQixFQUFFdEMsaUJBQWtCLENBQUMifQ==