// Copyright 2017-2022, University of Colorado Boulder

/**
 * A plate on the balance scale. Includes both the plate and the vertical support that attaches
 * the plate to the balance beam, since they move together.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Circle, Line, Node, Path, Rectangle } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerColors from '../EqualityExplorerColors.js';
import EqualityExplorerQueryParameters from '../EqualityExplorerQueryParameters.js';
import GridNode from './GridNode.js';
export default class PlateNode extends Node {
  constructor(plate, providedOptions) {
    const options = optionize()({
      // SelfOptions
      color: EqualityExplorerColors.PLATE_OUTSIDE_FILL,
      // {Color|string} color of the outside of the plate
      pivotRadius: 8 // {number} radius of the pivot point that attaches to the balance beam
    }, providedOptions);

    // Outside surface of the plate.
    // Path description (d= field) from assets/scale/plate-outside.svg
    // See assets/README.md for more details.
    const outsideSVG = 'M245.633,70.359c-1.15,1.836-1.764,1.672-7.195,3.125c-20.375,5.45-68.705,9-137.838,9c-65.326,0-110.102-2.84-131.033-7.493c-7.123-1.584-9.441-1.76-11.35-4.132c-1.295-1.611-11.043-3.625-8.484-8.625c2.043-3.994,79.203-6.75,150.867-6.75c72.723,0,147.553,1.775,150.016,5.75C254.025,66.734,246.588,68.836,245.633,70.359';
    const outsideNode = new Path(outsideSVG, {
      fill: options.color,
      stroke: 'black',
      lineWidth: 1
    });

    // Inside bottom surface of the plate, were terms will sit.
    // Path description (d= field) from assets/scale/plate-surface.svg
    // See assets/README.md for more details.
    const surfaceSVG = 'M243.527,69.984c0,2.25-64.234,8.75-143,8.75c-78.764,0-142.25-5.988-142.25-9.25c0-5.25,63.836-10.462,142.602-10.462S243.527,64.484,243.527,69.984';
    const surfaceNode = new Path(surfaceSVG, {
      fill: EqualityExplorerColors.PLATE_SURFACE_FILL,
      centerX: outsideNode.centerX,
      top: outsideNode.top
    });

    // Inside wall of the plate.
    // Path description (d= field) from assets/scale/rim.svg
    // See assets/README.md for more details.
    const insideSVG = 'M251.869,68.484c0,7.364-67.6,13.333-150.99,13.333c-83.389,0-150.988-5.969-150.988-13.333c0-7.363,67.6-13.333,150.988-13.333C184.27,55.151,251.869,61.121,251.869,68.484';
    const wallNode = new Path(insideSVG, {
      fill: EqualityExplorerColors.PLATE_INSIDE_FILL,
      centerX: outsideNode.centerX,
      bottom: surfaceNode.bottom
    });

    // Rim around the top of the plate, colored the same as the outside surface of the plate.
    const rimNode = new Path(insideSVG, {
      stroke: options.color,
      center: wallNode.center
    });

    // Put all of the parts of the plate together
    const plateNode = new Node({
      children: [outsideNode, wallNode, surfaceNode, rimNode],
      centerX: 0,
      centerY: 0
    });
    plateNode.setScaleMagnitude(plate.diameter / plateNode.width, 1);
    assert && assert(plateNode.width === plate.diameter, 'programming error in scaling');

    // Vertical support that attaches the plate to the pivot point
    const supportNode = new Rectangle(0, 0, 10, plate.supportHeight - options.pivotRadius, {
      fill: EqualityExplorerColors.PLATE_SUPPORT_FILL,
      stroke: 'black',
      centerX: plateNode.centerX,
      top: plateNode.centerY
    });

    // Pivot point that connects to the balance beam
    const pivotNode = new Circle(options.pivotRadius, {
      fill: EqualityExplorerColors.PLATE_SUPPORT_FILL,
      stroke: 'black',
      centerX: supportNode.centerX,
      centerY: supportNode.bottom
    });
    options.children = [supportNode, pivotNode, plateNode];

    // Grid where terms appear
    if (EqualityExplorerQueryParameters.showGrid) {
      options.children.push(new GridNode({
        rows: plate.gridRows,
        columns: plate.gridColumns,
        cellSize: plate.cellSize,
        centerX: 0,
        bottom: 0
      }));
    }
    if (phet.chipper.queryParameters.dev) {
      // Red dot at the origin
      options.children.push(new Circle(2, {
        fill: 'red'
      }));

      // Cutoff line for determine on vs off the plate when dragging terms
      options.children.push(new Line(0, 0, plateNode.width, 0, {
        centerX: plateNode.centerX,
        centerY: plateNode.centerY + EqualityExplorerQueryParameters.plateYOffset,
        stroke: 'red',
        lineWidth: 0.25
      }));
    }
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
equalityExplorer.register('PlateNode', PlateNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJDaXJjbGUiLCJMaW5lIiwiTm9kZSIsIlBhdGgiLCJSZWN0YW5nbGUiLCJlcXVhbGl0eUV4cGxvcmVyIiwiRXF1YWxpdHlFeHBsb3JlckNvbG9ycyIsIkVxdWFsaXR5RXhwbG9yZXJRdWVyeVBhcmFtZXRlcnMiLCJHcmlkTm9kZSIsIlBsYXRlTm9kZSIsImNvbnN0cnVjdG9yIiwicGxhdGUiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiY29sb3IiLCJQTEFURV9PVVRTSURFX0ZJTEwiLCJwaXZvdFJhZGl1cyIsIm91dHNpZGVTVkciLCJvdXRzaWRlTm9kZSIsImZpbGwiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJzdXJmYWNlU1ZHIiwic3VyZmFjZU5vZGUiLCJQTEFURV9TVVJGQUNFX0ZJTEwiLCJjZW50ZXJYIiwidG9wIiwiaW5zaWRlU1ZHIiwid2FsbE5vZGUiLCJQTEFURV9JTlNJREVfRklMTCIsImJvdHRvbSIsInJpbU5vZGUiLCJjZW50ZXIiLCJwbGF0ZU5vZGUiLCJjaGlsZHJlbiIsImNlbnRlclkiLCJzZXRTY2FsZU1hZ25pdHVkZSIsImRpYW1ldGVyIiwid2lkdGgiLCJhc3NlcnQiLCJzdXBwb3J0Tm9kZSIsInN1cHBvcnRIZWlnaHQiLCJQTEFURV9TVVBQT1JUX0ZJTEwiLCJwaXZvdE5vZGUiLCJzaG93R3JpZCIsInB1c2giLCJyb3dzIiwiZ3JpZFJvd3MiLCJjb2x1bW5zIiwiZ3JpZENvbHVtbnMiLCJjZWxsU2l6ZSIsInBoZXQiLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiZGV2IiwicGxhdGVZT2Zmc2V0IiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxhdGVOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgcGxhdGUgb24gdGhlIGJhbGFuY2Ugc2NhbGUuIEluY2x1ZGVzIGJvdGggdGhlIHBsYXRlIGFuZCB0aGUgdmVydGljYWwgc3VwcG9ydCB0aGF0IGF0dGFjaGVzXHJcbiAqIHRoZSBwbGF0ZSB0byB0aGUgYmFsYW5jZSBiZWFtLCBzaW5jZSB0aGV5IG1vdmUgdG9nZXRoZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBDb2xvciwgTGluZSwgTm9kZSwgTm9kZU9wdGlvbnMsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMsIFBhdGgsIFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5pbXBvcnQgRXF1YWxpdHlFeHBsb3JlckNvbG9ycyBmcm9tICcuLi9FcXVhbGl0eUV4cGxvcmVyQ29sb3JzLmpzJztcclxuaW1wb3J0IEVxdWFsaXR5RXhwbG9yZXJRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vRXF1YWxpdHlFeHBsb3JlclF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBQbGF0ZSBmcm9tICcuLi9tb2RlbC9QbGF0ZS5qcyc7XHJcbmltcG9ydCBHcmlkTm9kZSBmcm9tICcuL0dyaWROb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgY29sb3I/OiBDb2xvciB8IHN0cmluZzsgLy8gY29sb3Igb2YgdGhlIG91dHNpZGUgb2YgdGhlIHBsYXRlXHJcbiAgcGl2b3RSYWRpdXM/OiBudW1iZXI7ICAvLyByYWRpdXMgb2YgdGhlIHBpdm90IHBvaW50IHRoYXQgYXR0YWNoZXMgdG8gdGhlIGJhbGFuY2UgYmVhbVxyXG59O1xyXG5cclxudHlwZSBQbGF0ZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxhdGVOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcGxhdGU6IFBsYXRlLCBwcm92aWRlZE9wdGlvbnM/OiBQbGF0ZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UGxhdGVOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBjb2xvcjogRXF1YWxpdHlFeHBsb3JlckNvbG9ycy5QTEFURV9PVVRTSURFX0ZJTEwsIC8vIHtDb2xvcnxzdHJpbmd9IGNvbG9yIG9mIHRoZSBvdXRzaWRlIG9mIHRoZSBwbGF0ZVxyXG4gICAgICBwaXZvdFJhZGl1czogOCAgLy8ge251bWJlcn0gcmFkaXVzIG9mIHRoZSBwaXZvdCBwb2ludCB0aGF0IGF0dGFjaGVzIHRvIHRoZSBiYWxhbmNlIGJlYW1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIE91dHNpZGUgc3VyZmFjZSBvZiB0aGUgcGxhdGUuXHJcbiAgICAvLyBQYXRoIGRlc2NyaXB0aW9uIChkPSBmaWVsZCkgZnJvbSBhc3NldHMvc2NhbGUvcGxhdGUtb3V0c2lkZS5zdmdcclxuICAgIC8vIFNlZSBhc3NldHMvUkVBRE1FLm1kIGZvciBtb3JlIGRldGFpbHMuXHJcbiAgICBjb25zdCBvdXRzaWRlU1ZHID0gJ00yNDUuNjMzLDcwLjM1OWMtMS4xNSwxLjgzNi0xLjc2NCwxLjY3Mi03LjE5NSwzLjEyNWMtMjAuMzc1LDUuNDUtNjguNzA1LDktMTM3LjgzOCw5Yy02NS4zMjYsMC0xMTAuMTAyLTIuODQtMTMxLjAzMy03LjQ5M2MtNy4xMjMtMS41ODQtOS40NDEtMS43Ni0xMS4zNS00LjEzMmMtMS4yOTUtMS42MTEtMTEuMDQzLTMuNjI1LTguNDg0LTguNjI1YzIuMDQzLTMuOTk0LDc5LjIwMy02Ljc1LDE1MC44NjctNi43NWM3Mi43MjMsMCwxNDcuNTUzLDEuNzc1LDE1MC4wMTYsNS43NUMyNTQuMDI1LDY2LjczNCwyNDYuNTg4LDY4LjgzNiwyNDUuNjMzLDcwLjM1OSc7XHJcbiAgICBjb25zdCBvdXRzaWRlTm9kZSA9IG5ldyBQYXRoKCBvdXRzaWRlU1ZHLCB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuY29sb3IsXHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgbGluZVdpZHRoOiAxXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gSW5zaWRlIGJvdHRvbSBzdXJmYWNlIG9mIHRoZSBwbGF0ZSwgd2VyZSB0ZXJtcyB3aWxsIHNpdC5cclxuICAgIC8vIFBhdGggZGVzY3JpcHRpb24gKGQ9IGZpZWxkKSBmcm9tIGFzc2V0cy9zY2FsZS9wbGF0ZS1zdXJmYWNlLnN2Z1xyXG4gICAgLy8gU2VlIGFzc2V0cy9SRUFETUUubWQgZm9yIG1vcmUgZGV0YWlscy5cclxuICAgIGNvbnN0IHN1cmZhY2VTVkcgPSAnTTI0My41MjcsNjkuOTg0YzAsMi4yNS02NC4yMzQsOC43NS0xNDMsOC43NWMtNzguNzY0LDAtMTQyLjI1LTUuOTg4LTE0Mi4yNS05LjI1YzAtNS4yNSw2My44MzYtMTAuNDYyLDE0Mi42MDItMTAuNDYyUzI0My41MjcsNjQuNDg0LDI0My41MjcsNjkuOTg0JztcclxuICAgIGNvbnN0IHN1cmZhY2VOb2RlID0gbmV3IFBhdGgoIHN1cmZhY2VTVkcsIHtcclxuICAgICAgZmlsbDogRXF1YWxpdHlFeHBsb3JlckNvbG9ycy5QTEFURV9TVVJGQUNFX0ZJTEwsXHJcbiAgICAgIGNlbnRlclg6IG91dHNpZGVOb2RlLmNlbnRlclgsXHJcbiAgICAgIHRvcDogb3V0c2lkZU5vZGUudG9wXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gSW5zaWRlIHdhbGwgb2YgdGhlIHBsYXRlLlxyXG4gICAgLy8gUGF0aCBkZXNjcmlwdGlvbiAoZD0gZmllbGQpIGZyb20gYXNzZXRzL3NjYWxlL3JpbS5zdmdcclxuICAgIC8vIFNlZSBhc3NldHMvUkVBRE1FLm1kIGZvciBtb3JlIGRldGFpbHMuXHJcbiAgICBjb25zdCBpbnNpZGVTVkcgPSAnTTI1MS44NjksNjguNDg0YzAsNy4zNjQtNjcuNiwxMy4zMzMtMTUwLjk5LDEzLjMzM2MtODMuMzg5LDAtMTUwLjk4OC01Ljk2OS0xNTAuOTg4LTEzLjMzM2MwLTcuMzYzLDY3LjYtMTMuMzMzLDE1MC45ODgtMTMuMzMzQzE4NC4yNyw1NS4xNTEsMjUxLjg2OSw2MS4xMjEsMjUxLjg2OSw2OC40ODQnO1xyXG4gICAgY29uc3Qgd2FsbE5vZGUgPSBuZXcgUGF0aCggaW5zaWRlU1ZHLCB7XHJcbiAgICAgIGZpbGw6IEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMuUExBVEVfSU5TSURFX0ZJTEwsXHJcbiAgICAgIGNlbnRlclg6IG91dHNpZGVOb2RlLmNlbnRlclgsXHJcbiAgICAgIGJvdHRvbTogc3VyZmFjZU5vZGUuYm90dG9tXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gUmltIGFyb3VuZCB0aGUgdG9wIG9mIHRoZSBwbGF0ZSwgY29sb3JlZCB0aGUgc2FtZSBhcyB0aGUgb3V0c2lkZSBzdXJmYWNlIG9mIHRoZSBwbGF0ZS5cclxuICAgIGNvbnN0IHJpbU5vZGUgPSBuZXcgUGF0aCggaW5zaWRlU1ZHLCB7XHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5jb2xvcixcclxuICAgICAgY2VudGVyOiB3YWxsTm9kZS5jZW50ZXJcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBQdXQgYWxsIG9mIHRoZSBwYXJ0cyBvZiB0aGUgcGxhdGUgdG9nZXRoZXJcclxuICAgIGNvbnN0IHBsYXRlTm9kZSA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIG91dHNpZGVOb2RlLCB3YWxsTm9kZSwgc3VyZmFjZU5vZGUsIHJpbU5vZGUgXSxcclxuICAgICAgY2VudGVyWDogMCxcclxuICAgICAgY2VudGVyWTogMFxyXG4gICAgfSApO1xyXG4gICAgcGxhdGVOb2RlLnNldFNjYWxlTWFnbml0dWRlKCBwbGF0ZS5kaWFtZXRlciAvIHBsYXRlTm9kZS53aWR0aCwgMSApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggcGxhdGVOb2RlLndpZHRoID09PSBwbGF0ZS5kaWFtZXRlciwgJ3Byb2dyYW1taW5nIGVycm9yIGluIHNjYWxpbmcnICk7XHJcblxyXG4gICAgLy8gVmVydGljYWwgc3VwcG9ydCB0aGF0IGF0dGFjaGVzIHRoZSBwbGF0ZSB0byB0aGUgcGl2b3QgcG9pbnRcclxuICAgIGNvbnN0IHN1cHBvcnROb2RlID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgMTAsIHBsYXRlLnN1cHBvcnRIZWlnaHQgLSBvcHRpb25zLnBpdm90UmFkaXVzLCB7XHJcbiAgICAgIGZpbGw6IEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMuUExBVEVfU1VQUE9SVF9GSUxMLFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGNlbnRlclg6IHBsYXRlTm9kZS5jZW50ZXJYLFxyXG4gICAgICB0b3A6IHBsYXRlTm9kZS5jZW50ZXJZXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gUGl2b3QgcG9pbnQgdGhhdCBjb25uZWN0cyB0byB0aGUgYmFsYW5jZSBiZWFtXHJcbiAgICBjb25zdCBwaXZvdE5vZGUgPSBuZXcgQ2lyY2xlKCBvcHRpb25zLnBpdm90UmFkaXVzLCB7XHJcbiAgICAgIGZpbGw6IEVxdWFsaXR5RXhwbG9yZXJDb2xvcnMuUExBVEVfU1VQUE9SVF9GSUxMLFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGNlbnRlclg6IHN1cHBvcnROb2RlLmNlbnRlclgsXHJcbiAgICAgIGNlbnRlclk6IHN1cHBvcnROb2RlLmJvdHRvbVxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIHN1cHBvcnROb2RlLCBwaXZvdE5vZGUsIHBsYXRlTm9kZSBdO1xyXG5cclxuICAgIC8vIEdyaWQgd2hlcmUgdGVybXMgYXBwZWFyXHJcbiAgICBpZiAoIEVxdWFsaXR5RXhwbG9yZXJRdWVyeVBhcmFtZXRlcnMuc2hvd0dyaWQgKSB7XHJcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4ucHVzaCggbmV3IEdyaWROb2RlKCB7XHJcbiAgICAgICAgcm93czogcGxhdGUuZ3JpZFJvd3MsXHJcbiAgICAgICAgY29sdW1uczogcGxhdGUuZ3JpZENvbHVtbnMsXHJcbiAgICAgICAgY2VsbFNpemU6IHBsYXRlLmNlbGxTaXplLFxyXG4gICAgICAgIGNlbnRlclg6IDAsXHJcbiAgICAgICAgYm90dG9tOiAwXHJcbiAgICAgIH0gKSApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5kZXYgKSB7XHJcblxyXG4gICAgICAvLyBSZWQgZG90IGF0IHRoZSBvcmlnaW5cclxuICAgICAgb3B0aW9ucy5jaGlsZHJlbi5wdXNoKCBuZXcgQ2lyY2xlKCAyLCB7IGZpbGw6ICdyZWQnIH0gKSApO1xyXG5cclxuICAgICAgLy8gQ3V0b2ZmIGxpbmUgZm9yIGRldGVybWluZSBvbiB2cyBvZmYgdGhlIHBsYXRlIHdoZW4gZHJhZ2dpbmcgdGVybXNcclxuICAgICAgb3B0aW9ucy5jaGlsZHJlbi5wdXNoKCBuZXcgTGluZSggMCwgMCwgcGxhdGVOb2RlLndpZHRoLCAwLCB7XHJcbiAgICAgICAgY2VudGVyWDogcGxhdGVOb2RlLmNlbnRlclgsXHJcbiAgICAgICAgY2VudGVyWTogcGxhdGVOb2RlLmNlbnRlclkgKyBFcXVhbGl0eUV4cGxvcmVyUXVlcnlQYXJhbWV0ZXJzLnBsYXRlWU9mZnNldCxcclxuICAgICAgICBzdHJva2U6ICdyZWQnLFxyXG4gICAgICAgIGxpbmVXaWR0aDogMC4yNVxyXG4gICAgICB9ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmVxdWFsaXR5RXhwbG9yZXIucmVnaXN0ZXIoICdQbGF0ZU5vZGUnLCBQbGF0ZU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELFNBQVNDLE1BQU0sRUFBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQXVDQyxJQUFJLEVBQUVDLFNBQVMsUUFBUSxtQ0FBbUM7QUFDbkksT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQywrQkFBK0IsTUFBTSx1Q0FBdUM7QUFFbkYsT0FBT0MsUUFBUSxNQUFNLGVBQWU7QUFTcEMsZUFBZSxNQUFNQyxTQUFTLFNBQVNQLElBQUksQ0FBQztFQUVuQ1EsV0FBV0EsQ0FBRUMsS0FBWSxFQUFFQyxlQUFrQyxFQUFHO0lBRXJFLE1BQU1DLE9BQU8sR0FBR2QsU0FBUyxDQUE2QyxDQUFDLENBQUU7TUFFdkU7TUFDQWUsS0FBSyxFQUFFUixzQkFBc0IsQ0FBQ1Msa0JBQWtCO01BQUU7TUFDbERDLFdBQVcsRUFBRSxDQUFDLENBQUU7SUFDbEIsQ0FBQyxFQUFFSixlQUFnQixDQUFDOztJQUVwQjtJQUNBO0lBQ0E7SUFDQSxNQUFNSyxVQUFVLEdBQUcsMFRBQTBUO0lBQzdVLE1BQU1DLFdBQVcsR0FBRyxJQUFJZixJQUFJLENBQUVjLFVBQVUsRUFBRTtNQUN4Q0UsSUFBSSxFQUFFTixPQUFPLENBQUNDLEtBQUs7TUFDbkJNLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLFNBQVMsRUFBRTtJQUNiLENBQUUsQ0FBQzs7SUFFSDtJQUNBO0lBQ0E7SUFD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