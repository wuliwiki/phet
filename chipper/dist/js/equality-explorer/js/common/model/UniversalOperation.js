// Copyright 2018-2022, University of Colorado Boulder

/**
 * Data structure that describes a 'universal operation' (terminology specific to this sim),
 * an operation that will be applied to both sides of the equation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import equalityExplorer from '../../equalityExplorer.js';
import ConstantTerm from './ConstantTerm.js';
import VariableTerm from './VariableTerm.js';

// universal operand can be either a constant or a variable term

export default class UniversalOperation {
  constructor(operator, operand) {
    this.operator = operator;
    this.operand = operand;
  }

  /**
   * For debugging only. Do not rely on the format of toString.
   */
  toString() {
    return `operator=${this.operator}, operand=${this.operand}`;
  }

  /**
   * Creates a concise human-readable string representation, intended to be used for phet.log calls.
   */
  toLogString() {
    if (this.operand instanceof ConstantTerm) {
      // e.g. '+ 2'
      return StringUtils.fillIn('{{operator}} {{constantValue}}', {
        operator: this.operator,
        constantValue: this.operand.constantValue.getValue()
      });
    } else if (this.operand instanceof VariableTerm) {
      // e.g. '+ 2x (x=6)'
      return StringUtils.fillIn('{{operator}} {{coefficient}}{{symbol}} ({{symbol}}={{variableValue}})', {
        operator: this.operator,
        coefficient: this.operand.coefficient.getValue(),
        symbol: this.operand.variable.symbolProperty.value,
        variableValue: this.operand.variable.valueProperty.value
      });
    } else {
      throw new Error(`unsupported operand: ${this.operand}`);
    }
  }
}
equalityExplorer.register('UniversalOperation', UniversalOperation);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsImVxdWFsaXR5RXhwbG9yZXIiLCJDb25zdGFudFRlcm0iLCJWYXJpYWJsZVRlcm0iLCJVbml2ZXJzYWxPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsIm9wZXJhdG9yIiwib3BlcmFuZCIsInRvU3RyaW5nIiwidG9Mb2dTdHJpbmciLCJmaWxsSW4iLCJjb25zdGFudFZhbHVlIiwiZ2V0VmFsdWUiLCJjb2VmZmljaWVudCIsInN5bWJvbCIsInZhcmlhYmxlIiwic3ltYm9sUHJvcGVydHkiLCJ2YWx1ZSIsInZhcmlhYmxlVmFsdWUiLCJ2YWx1ZVByb3BlcnR5IiwiRXJyb3IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVuaXZlcnNhbE9wZXJhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEYXRhIHN0cnVjdHVyZSB0aGF0IGRlc2NyaWJlcyBhICd1bml2ZXJzYWwgb3BlcmF0aW9uJyAodGVybWlub2xvZ3kgc3BlY2lmaWMgdG8gdGhpcyBzaW0pLFxyXG4gKiBhbiBvcGVyYXRpb24gdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gYm90aCBzaWRlcyBvZiB0aGUgZXF1YXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5pbXBvcnQgQ29uc3RhbnRUZXJtIGZyb20gJy4vQ29uc3RhbnRUZXJtLmpzJztcclxuaW1wb3J0IFZhcmlhYmxlVGVybSBmcm9tICcuL1ZhcmlhYmxlVGVybS5qcyc7XHJcbmltcG9ydCBVbml2ZXJzYWxPcGVyYXRvciBmcm9tICcuL1VuaXZlcnNhbE9wZXJhdG9yLmpzJztcclxuXHJcbi8vIHVuaXZlcnNhbCBvcGVyYW5kIGNhbiBiZSBlaXRoZXIgYSBjb25zdGFudCBvciBhIHZhcmlhYmxlIHRlcm1cclxuZXhwb3J0IHR5cGUgVW5pdmVyc2FsT3BlcmFuZCA9IENvbnN0YW50VGVybSB8IFZhcmlhYmxlVGVybTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuaXZlcnNhbE9wZXJhdGlvbiB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBvcGVyYXRvcjogVW5pdmVyc2FsT3BlcmF0b3I7XHJcbiAgcHVibGljIHJlYWRvbmx5IG9wZXJhbmQ6IFVuaXZlcnNhbE9wZXJhbmQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggb3BlcmF0b3I6IFVuaXZlcnNhbE9wZXJhdG9yLCBvcGVyYW5kOiBVbml2ZXJzYWxPcGVyYW5kICkge1xyXG4gICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG4gICAgdGhpcy5vcGVyYW5kID0gb3BlcmFuZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvciBkZWJ1Z2dpbmcgb25seS4gRG8gbm90IHJlbHkgb24gdGhlIGZvcm1hdCBvZiB0b1N0cmluZy5cclxuICAgKi9cclxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgb3BlcmF0b3I9JHt0aGlzLm9wZXJhdG9yfSwgb3BlcmFuZD0ke3RoaXMub3BlcmFuZH1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIGNvbmNpc2UgaHVtYW4tcmVhZGFibGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uLCBpbnRlbmRlZCB0byBiZSB1c2VkIGZvciBwaGV0LmxvZyBjYWxscy5cclxuICAgKi9cclxuICBwdWJsaWMgdG9Mb2dTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIGlmICggdGhpcy5vcGVyYW5kIGluc3RhbmNlb2YgQ29uc3RhbnRUZXJtICkge1xyXG5cclxuICAgICAgLy8gZS5nLiAnKyAyJ1xyXG4gICAgICByZXR1cm4gU3RyaW5nVXRpbHMuZmlsbEluKCAne3tvcGVyYXRvcn19IHt7Y29uc3RhbnRWYWx1ZX19Jywge1xyXG4gICAgICAgIG9wZXJhdG9yOiB0aGlzLm9wZXJhdG9yLFxyXG4gICAgICAgIGNvbnN0YW50VmFsdWU6IHRoaXMub3BlcmFuZC5jb25zdGFudFZhbHVlLmdldFZhbHVlKClcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHRoaXMub3BlcmFuZCBpbnN0YW5jZW9mIFZhcmlhYmxlVGVybSApIHtcclxuXHJcbiAgICAgIC8vIGUuZy4gJysgMnggKHg9NiknXHJcbiAgICAgIHJldHVybiBTdHJpbmdVdGlscy5maWxsSW4oICd7e29wZXJhdG9yfX0ge3tjb2VmZmljaWVudH19e3tzeW1ib2x9fSAoe3tzeW1ib2x9fT17e3ZhcmlhYmxlVmFsdWV9fSknLCB7XHJcbiAgICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3IsXHJcbiAgICAgICAgY29lZmZpY2llbnQ6IHRoaXMub3BlcmFuZC5jb2VmZmljaWVudC5nZXRWYWx1ZSgpLFxyXG4gICAgICAgIHN5bWJvbDogdGhpcy5vcGVyYW5kLnZhcmlhYmxlLnN5bWJvbFByb3BlcnR5LnZhbHVlLFxyXG4gICAgICAgIHZhcmlhYmxlVmFsdWU6IHRoaXMub3BlcmFuZC52YXJpYWJsZS52YWx1ZVByb3BlcnR5LnZhbHVlXHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIGB1bnN1cHBvcnRlZCBvcGVyYW5kOiAke3RoaXMub3BlcmFuZH1gICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnVW5pdmVyc2FsT3BlcmF0aW9uJywgVW5pdmVyc2FsT3BlcmF0aW9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUM1QyxPQUFPQyxZQUFZLE1BQU0sbUJBQW1COztBQUc1Qzs7QUFHQSxlQUFlLE1BQU1DLGtCQUFrQixDQUFDO0VBSy9CQyxXQUFXQSxDQUFFQyxRQUEyQixFQUFFQyxPQUF5QixFQUFHO0lBQzNFLElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0VBQ3hCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxRQUFRQSxDQUFBLEVBQVc7SUFDeEIsT0FBUSxZQUFXLElBQUksQ0FBQ0YsUUFBUyxhQUFZLElBQUksQ0FBQ0MsT0FBUSxFQUFDO0VBQzdEOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRSxXQUFXQSxDQUFBLEVBQVc7SUFDM0IsSUFBSyxJQUFJLENBQUNGLE9BQU8sWUFBWUwsWUFBWSxFQUFHO01BRTFDO01BQ0EsT0FBT0YsV0FBVyxDQUFDVSxNQUFNLENBQUUsZ0NBQWdDLEVBQUU7UUFDM0RKLFFBQVEsRUFBRSxJQUFJLENBQUNBLFFBQVE7UUFDdkJLLGFBQWEsRUFBRSxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ksYUFBYSxDQUFDQyxRQUFRLENBQUM7TUFDckQsQ0FBRSxDQUFDO0lBQ0wsQ0FBQyxNQUNJLElBQUssSUFBSSxDQUFDTCxPQUFPLFlBQVlKLFlBQVksRUFBRztNQUUvQztNQUNBLE9BQU9ILFdBQVcsQ0FBQ1UsTUFBTSxDQUFFLHVFQUF1RSxFQUFFO1FBQ2xHSixRQUFRLEVBQUUsSUFBSSxDQUFDQSxRQUFRO1FBQ3ZCTyxXQUFXLEVBQUUsSUFBSSxDQUFDTixPQUFPLENBQUNNLFdBQVcsQ0FBQ0QsUUFBUSxDQUFDLENBQUM7UUFDaERFLE1BQU0sRUFBRSxJQUFJLENBQUNQLE9BQU8sQ0FBQ1EsUUFBUSxDQUFDQyxjQUFjLENBQUNDLEtBQUs7UUFDbERDLGFBQWEsRUFBRSxJQUFJLENBQUNYLE9BQU8sQ0FBQ1EsUUFBUSxDQUFDSSxhQUFhLENBQUNGO01BQ3JELENBQUUsQ0FBQztJQUNMLENBQUMsTUFDSTtNQUNILE1BQU0sSUFBSUcsS0FBSyxDQUFHLHdCQUF1QixJQUFJLENBQUNiLE9BQVEsRUFBRSxDQUFDO0lBQzNEO0VBQ0Y7QUFDRjtBQUVBTixnQkFBZ0IsQ0FBQ29CLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRWpCLGtCQUFtQixDQUFDIn0=