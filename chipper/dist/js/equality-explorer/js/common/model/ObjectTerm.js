// Copyright 2017-2022, University of Colorado Boulder

/**
 * ObjectTerm is a term associated with a type of real-world object (sphere, apple, coin, dog, ...)
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import equalityExplorer from '../../equalityExplorer.js';
import VariableTerm from './VariableTerm.js';

// constants
const COEFFICIENT = Fraction.fromInteger(1); // all object terms have an implicit coefficient of 1

export default class ObjectTerm extends VariableTerm {
  constructor(variable, providedOptions) {
    const options = optionize()({
      coefficient: COEFFICIENT
    }, providedOptions);
    super(variable, options);
    this.objectVariable = variable;
  }
  getVariable() {
    return this.variable;
  }

  /**
   * For debugging only. Do not rely on the format of toString.
   */
  toString() {
    return `ObjectTerm: ${this.coefficient} ${this.variable}`;
  }

  /**
   * Creates the options that would be needed to instantiate a copy of this object.
   * ObjectTerm has no SelfOptions, so this is identical to super.copyOptions.
   * We implement this method anyway, just to make that painfully obvious, and in
   * case SelfOptions is augmented in the future.
   */
  copyOptions() {
    return super.copyOptions();
  }

  /**
   * Creates a copy of this term, with modifications through options.
   */
  copy(providedOptions) {
    return new ObjectTerm(this.objectVariable, combineOptions(this.copyOptions(), providedOptions)); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }

  /**
   * Are this term and the specified term 'like terms'?
   * ObjectTerms are 'like' if they are associated with the same variable.
   */
  isLikeTerm(term) {
    return term instanceof ObjectTerm && term.variable === this.variable;
  }

  /**
   * Applies an operation to this term, resulting in a new term.
   * Returns null if the operation is not applicable to this term.
   */
  applyOperation(operation) {
    return null; // operations are not applicable to ObjectTerms
  }

  // The implementation of methods plus and minus are inherited from VariableTerm.
}

equalityExplorer.register('ObjectTerm', ObjectTerm);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkZyYWN0aW9uIiwiZXF1YWxpdHlFeHBsb3JlciIsIlZhcmlhYmxlVGVybSIsIkNPRUZGSUNJRU5UIiwiZnJvbUludGVnZXIiLCJPYmplY3RUZXJtIiwiY29uc3RydWN0b3IiLCJ2YXJpYWJsZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjb2VmZmljaWVudCIsIm9iamVjdFZhcmlhYmxlIiwiZ2V0VmFyaWFibGUiLCJ0b1N0cmluZyIsImNvcHlPcHRpb25zIiwiY29weSIsImlzTGlrZVRlcm0iLCJ0ZXJtIiwiYXBwbHlPcGVyYXRpb24iLCJvcGVyYXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk9iamVjdFRlcm0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT2JqZWN0VGVybSBpcyBhIHRlcm0gYXNzb2NpYXRlZCB3aXRoIGEgdHlwZSBvZiByZWFsLXdvcmxkIG9iamVjdCAoc3BoZXJlLCBhcHBsZSwgY29pbiwgZG9nLCAuLi4pXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgRnJhY3Rpb24gZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy9tb2RlbC9GcmFjdGlvbi5qcyc7XHJcbmltcG9ydCBUZXJtIGZyb20gJy4vVGVybS5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5pbXBvcnQgT2JqZWN0VmFyaWFibGUgZnJvbSAnLi9PYmplY3RWYXJpYWJsZS5qcyc7XHJcbmltcG9ydCBWYXJpYWJsZSBmcm9tICcuL1ZhcmlhYmxlLmpzJztcclxuaW1wb3J0IFVuaXZlcnNhbE9wZXJhdGlvbiBmcm9tICcuL1VuaXZlcnNhbE9wZXJhdGlvbi5qcyc7XHJcbmltcG9ydCBWYXJpYWJsZVRlcm0sIHsgVmFyaWFibGVUZXJtT3B0aW9ucyB9IGZyb20gJy4vVmFyaWFibGVUZXJtLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBDT0VGRklDSUVOVCA9IEZyYWN0aW9uLmZyb21JbnRlZ2VyKCAxICk7IC8vIGFsbCBvYmplY3QgdGVybXMgaGF2ZSBhbiBpbXBsaWNpdCBjb2VmZmljaWVudCBvZiAxXHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIE9iamVjdFRlcm1PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBWYXJpYWJsZVRlcm1PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JqZWN0VGVybSBleHRlbmRzIFZhcmlhYmxlVGVybSB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBvYmplY3RWYXJpYWJsZTogT2JqZWN0VmFyaWFibGU7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdmFyaWFibGU6IE9iamVjdFZhcmlhYmxlLCBwcm92aWRlZE9wdGlvbnM/OiBPYmplY3RUZXJtT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE9iamVjdFRlcm1PcHRpb25zLCBTZWxmT3B0aW9ucywgVmFyaWFibGVUZXJtT3B0aW9ucz4oKSgge1xyXG4gICAgICBjb2VmZmljaWVudDogQ09FRkZJQ0lFTlRcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCB2YXJpYWJsZSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMub2JqZWN0VmFyaWFibGUgPSB2YXJpYWJsZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBnZXRWYXJpYWJsZSgpOiBWYXJpYWJsZSB8IG51bGwge1xyXG4gICAgcmV0dXJuIHRoaXMudmFyaWFibGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGb3IgZGVidWdnaW5nIG9ubHkuIERvIG5vdCByZWx5IG9uIHRoZSBmb3JtYXQgb2YgdG9TdHJpbmcuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYE9iamVjdFRlcm06ICR7dGhpcy5jb2VmZmljaWVudH0gJHt0aGlzLnZhcmlhYmxlfWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBvcHRpb25zIHRoYXQgd291bGQgYmUgbmVlZGVkIHRvIGluc3RhbnRpYXRlIGEgY29weSBvZiB0aGlzIG9iamVjdC5cclxuICAgKiBPYmplY3RUZXJtIGhhcyBubyBTZWxmT3B0aW9ucywgc28gdGhpcyBpcyBpZGVudGljYWwgdG8gc3VwZXIuY29weU9wdGlvbnMuXHJcbiAgICogV2UgaW1wbGVtZW50IHRoaXMgbWV0aG9kIGFueXdheSwganVzdCB0byBtYWtlIHRoYXQgcGFpbmZ1bGx5IG9idmlvdXMsIGFuZCBpblxyXG4gICAqIGNhc2UgU2VsZk9wdGlvbnMgaXMgYXVnbWVudGVkIGluIHRoZSBmdXR1cmUuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGNvcHlPcHRpb25zKCk6IE9iamVjdFRlcm1PcHRpb25zIHtcclxuICAgIHJldHVybiBzdXBlci5jb3B5T3B0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB0ZXJtLCB3aXRoIG1vZGlmaWNhdGlvbnMgdGhyb3VnaCBvcHRpb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBjb3B5KCBwcm92aWRlZE9wdGlvbnM/OiBPYmplY3RUZXJtT3B0aW9ucyApOiBPYmplY3RUZXJtIHtcclxuICAgIHJldHVybiBuZXcgT2JqZWN0VGVybSggdGhpcy5vYmplY3RWYXJpYWJsZSwgY29tYmluZU9wdGlvbnM8T2JqZWN0VGVybU9wdGlvbnM+KCB0aGlzLmNvcHlPcHRpb25zKCksIHByb3ZpZGVkT3B0aW9ucyApICk7IC8vVE9ETyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZXF1YWxpdHktZXhwbG9yZXIvaXNzdWVzLzIwMCBkeW5hbWljXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBcmUgdGhpcyB0ZXJtIGFuZCB0aGUgc3BlY2lmaWVkIHRlcm0gJ2xpa2UgdGVybXMnP1xyXG4gICAqIE9iamVjdFRlcm1zIGFyZSAnbGlrZScgaWYgdGhleSBhcmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBzYW1lIHZhcmlhYmxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBpc0xpa2VUZXJtKCB0ZXJtOiBUZXJtICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICggdGVybSBpbnN0YW5jZW9mIE9iamVjdFRlcm0gKSAmJiAoIHRlcm0udmFyaWFibGUgPT09IHRoaXMudmFyaWFibGUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGxpZXMgYW4gb3BlcmF0aW9uIHRvIHRoaXMgdGVybSwgcmVzdWx0aW5nIGluIGEgbmV3IHRlcm0uXHJcbiAgICogUmV0dXJucyBudWxsIGlmIHRoZSBvcGVyYXRpb24gaXMgbm90IGFwcGxpY2FibGUgdG8gdGhpcyB0ZXJtLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBhcHBseU9wZXJhdGlvbiggb3BlcmF0aW9uOiBVbml2ZXJzYWxPcGVyYXRpb24gKTogT2JqZWN0VGVybSB8IG51bGwge1xyXG4gICAgcmV0dXJuIG51bGw7IC8vIG9wZXJhdGlvbnMgYXJlIG5vdCBhcHBsaWNhYmxlIHRvIE9iamVjdFRlcm1zXHJcbiAgfVxyXG5cclxuICAvLyBUaGUgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBwbHVzIGFuZCBtaW51cyBhcmUgaW5oZXJpdGVkIGZyb20gVmFyaWFibGVUZXJtLlxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnT2JqZWN0VGVybScsIE9iamVjdFRlcm0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxJQUFJQyxjQUFjLFFBQTBCLHVDQUF1QztBQUNuRyxPQUFPQyxRQUFRLE1BQU0sNkNBQTZDO0FBRWxFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUl4RCxPQUFPQyxZQUFZLE1BQStCLG1CQUFtQjs7QUFFckU7QUFDQSxNQUFNQyxXQUFXLEdBQUdILFFBQVEsQ0FBQ0ksV0FBVyxDQUFFLENBQUUsQ0FBQyxDQUFDLENBQUM7O0FBTS9DLGVBQWUsTUFBTUMsVUFBVSxTQUFTSCxZQUFZLENBQUM7RUFJNUNJLFdBQVdBLENBQUVDLFFBQXdCLEVBQUVDLGVBQW1DLEVBQUc7SUFFbEYsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQXNELENBQUMsQ0FBRTtNQUNoRlksV0FBVyxFQUFFUDtJQUNmLENBQUMsRUFBRUssZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVELFFBQVEsRUFBRUUsT0FBUSxDQUFDO0lBRTFCLElBQUksQ0FBQ0UsY0FBYyxHQUFHSixRQUFRO0VBQ2hDO0VBRWdCSyxXQUFXQSxDQUFBLEVBQW9CO0lBQzdDLE9BQU8sSUFBSSxDQUFDTCxRQUFRO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQk0sUUFBUUEsQ0FBQSxFQUFXO0lBQ2pDLE9BQVEsZUFBYyxJQUFJLENBQUNILFdBQVksSUFBRyxJQUFJLENBQUNILFFBQVMsRUFBQztFQUMzRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDa0JPLFdBQVdBLENBQUEsRUFBc0I7SUFDL0MsT0FBTyxLQUFLLENBQUNBLFdBQVcsQ0FBQyxDQUFDO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsSUFBSUEsQ0FBRVAsZUFBbUMsRUFBZTtJQUN0RSxPQUFPLElBQUlILFVBQVUsQ0FBRSxJQUFJLENBQUNNLGNBQWMsRUFBRVosY0FBYyxDQUFxQixJQUFJLENBQUNlLFdBQVcsQ0FBQyxDQUFDLEVBQUVOLGVBQWdCLENBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUg7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDa0JRLFVBQVVBLENBQUVDLElBQVUsRUFBWTtJQUNoRCxPQUFTQSxJQUFJLFlBQVlaLFVBQVUsSUFBUVksSUFBSSxDQUFDVixRQUFRLEtBQUssSUFBSSxDQUFDQSxRQUFVO0VBQzlFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ2tCVyxjQUFjQSxDQUFFQyxTQUE2QixFQUFzQjtJQUNqRixPQUFPLElBQUksQ0FBQyxDQUFDO0VBQ2Y7O0VBRUE7QUFDRjs7QUFFQWxCLGdCQUFnQixDQUFDbUIsUUFBUSxDQUFFLFlBQVksRUFBRWYsVUFBVyxDQUFDIn0=