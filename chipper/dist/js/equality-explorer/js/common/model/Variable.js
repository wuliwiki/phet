// Copyright 2018-2022, University of Colorado Boulder

/**
 * Model of a variable, e.g. 'x', used in variable terms.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import equalityExplorer from '../../equalityExplorer.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import EqualityExplorerConstants from '../EqualityExplorerConstants.js';
export default class Variable extends PhetioObject {
  // the value of the variable
  /**
   * @param symbolProperty - the variable's symbol, e.g. 'x'
   * @param [providedOptions]
   */
  constructor(symbolProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      value: 1,
      range: EqualityExplorerConstants.VARIABLE_RANGE,
      // PhetioObjectOptions
      phetioState: false
    }, providedOptions);
    assert && assert(!options.range || options.range.contains(options.value), `value ${options.value} is not in range ${options.range}`);
    super(options);
    this.symbolProperty = symbolProperty;
    this.range = options.range;
    this.valueProperty = new NumberProperty(options.value, {
      numberType: 'Integer',
      range: options.range,
      tandem: options.tandem.createTandem('valueProperty'),
      // If no range was provided, then do not allow the value to be changed.
      // This is important in the 'Solve It' screen, where the game challenges are responsible for the variable value.
      phetioReadOnly: options.range === null
    });
    this.addLinkedElement(symbolProperty, {
      tandem: options.tandem.createTandem('symbolProperty')
    });
  }
  reset() {
    this.valueProperty.reset();
  }

  /**
   * For debugging only. Do not rely on the format of toString.
   */
  toString() {
    return `Variable: symbol=${this.symbolProperty.value} value=${this.valueProperty.value}`;
  }
}
equalityExplorer.register('Variable', Variable);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsImVxdWFsaXR5RXhwbG9yZXIiLCJvcHRpb25pemUiLCJQaGV0aW9PYmplY3QiLCJFcXVhbGl0eUV4cGxvcmVyQ29uc3RhbnRzIiwiVmFyaWFibGUiLCJjb25zdHJ1Y3RvciIsInN5bWJvbFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInZhbHVlIiwicmFuZ2UiLCJWQVJJQUJMRV9SQU5HRSIsInBoZXRpb1N0YXRlIiwiYXNzZXJ0IiwiY29udGFpbnMiLCJ2YWx1ZVByb3BlcnR5IiwibnVtYmVyVHlwZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1JlYWRPbmx5IiwiYWRkTGlua2VkRWxlbWVudCIsInJlc2V0IiwidG9TdHJpbmciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZhcmlhYmxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIG9mIGEgdmFyaWFibGUsIGUuZy4gJ3gnLCB1c2VkIGluIHZhcmlhYmxlIHRlcm1zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QsIHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgTGlua2FibGVQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0xpbmthYmxlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRXF1YWxpdHlFeHBsb3JlckNvbnN0YW50cyBmcm9tICcuLi9FcXVhbGl0eUV4cGxvcmVyQ29uc3RhbnRzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgdmFsdWU/OiBudW1iZXI7IC8vIGluaXRpYWwgdmFsdWVcclxuICByYW5nZT86IFJhbmdlOyAvLyByYW5nZSBvZiB0aGUgdmFsdWVcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFZhcmlhYmxlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhcmlhYmxlIGV4dGVuZHMgUGhldGlvT2JqZWN0IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHN5bWJvbFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+O1xyXG4gIHB1YmxpYyByZWFkb25seSByYW5nZTogUmFuZ2U7XHJcbiAgcHVibGljIHJlYWRvbmx5IHZhbHVlUHJvcGVydHk6IE51bWJlclByb3BlcnR5OyAvLyB0aGUgdmFsdWUgb2YgdGhlIHZhcmlhYmxlXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzeW1ib2xQcm9wZXJ0eSAtIHRoZSB2YXJpYWJsZSdzIHN5bWJvbCwgZS5nLiAneCdcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN5bWJvbFByb3BlcnR5OiBMaW5rYWJsZVByb3BlcnR5PHN0cmluZz4sIHByb3ZpZGVkT3B0aW9uczogVmFyaWFibGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VmFyaWFibGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGhldGlvT2JqZWN0T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgdmFsdWU6IDEsXHJcbiAgICAgIHJhbmdlOiBFcXVhbGl0eUV4cGxvcmVyQ29uc3RhbnRzLlZBUklBQkxFX1JBTkdFLFxyXG5cclxuICAgICAgLy8gUGhldGlvT2JqZWN0T3B0aW9uc1xyXG4gICAgICBwaGV0aW9TdGF0ZTogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLnJhbmdlIHx8IG9wdGlvbnMucmFuZ2UuY29udGFpbnMoIG9wdGlvbnMudmFsdWUgKSxcclxuICAgICAgYHZhbHVlICR7b3B0aW9ucy52YWx1ZX0gaXMgbm90IGluIHJhbmdlICR7b3B0aW9ucy5yYW5nZX1gICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnN5bWJvbFByb3BlcnR5ID0gc3ltYm9sUHJvcGVydHk7XHJcbiAgICB0aGlzLnJhbmdlID0gb3B0aW9ucy5yYW5nZTtcclxuXHJcbiAgICB0aGlzLnZhbHVlUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMudmFsdWUsIHtcclxuICAgICAgbnVtYmVyVHlwZTogJ0ludGVnZXInLFxyXG4gICAgICByYW5nZTogb3B0aW9ucy5yYW5nZSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2YWx1ZVByb3BlcnR5JyApLFxyXG5cclxuICAgICAgLy8gSWYgbm8gcmFuZ2Ugd2FzIHByb3ZpZGVkLCB0aGVuIGRvIG5vdCBhbGxvdyB0aGUgdmFsdWUgdG8gYmUgY2hhbmdlZC5cclxuICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgaW4gdGhlICdTb2x2ZSBJdCcgc2NyZWVuLCB3aGVyZSB0aGUgZ2FtZSBjaGFsbGVuZ2VzIGFyZSByZXNwb25zaWJsZSBmb3IgdGhlIHZhcmlhYmxlIHZhbHVlLlxyXG4gICAgICBwaGV0aW9SZWFkT25seTogKCBvcHRpb25zLnJhbmdlID09PSBudWxsIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIHN5bWJvbFByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3ltYm9sUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMudmFsdWVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yIGRlYnVnZ2luZyBvbmx5LiBEbyBub3QgcmVseSBvbiB0aGUgZm9ybWF0IG9mIHRvU3RyaW5nLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBWYXJpYWJsZTogc3ltYm9sPSR7dGhpcy5zeW1ib2xQcm9wZXJ0eS52YWx1ZX0gdmFsdWU9JHt0aGlzLnZhbHVlUHJvcGVydHkudmFsdWV9YDtcclxuICB9XHJcbn1cclxuXHJcbmVxdWFsaXR5RXhwbG9yZXIucmVnaXN0ZXIoICdWYXJpYWJsZScsIFZhcmlhYmxlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx1Q0FBdUM7QUFFbEUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsT0FBT0MsWUFBWSxNQUErQix1Q0FBdUM7QUFHekYsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBU3ZFLGVBQWUsTUFBTUMsUUFBUSxTQUFTRixZQUFZLENBQUM7RUFJRjtFQUUvQztBQUNGO0FBQ0E7QUFDQTtFQUNTRyxXQUFXQSxDQUFFQyxjQUF3QyxFQUFFQyxlQUFnQyxFQUFHO0lBRS9GLE1BQU1DLE9BQU8sR0FBR1AsU0FBUyxDQUFvRCxDQUFDLENBQUU7TUFFOUU7TUFDQVEsS0FBSyxFQUFFLENBQUM7TUFDUkMsS0FBSyxFQUFFUCx5QkFBeUIsQ0FBQ1EsY0FBYztNQUUvQztNQUNBQyxXQUFXLEVBQUU7SUFDZixDQUFDLEVBQUVMLGVBQWdCLENBQUM7SUFFcEJNLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNMLE9BQU8sQ0FBQ0UsS0FBSyxJQUFJRixPQUFPLENBQUNFLEtBQUssQ0FBQ0ksUUFBUSxDQUFFTixPQUFPLENBQUNDLEtBQU0sQ0FBQyxFQUN4RSxTQUFRRCxPQUFPLENBQUNDLEtBQU0sb0JBQW1CRCxPQUFPLENBQUNFLEtBQU0sRUFBRSxDQUFDO0lBRTdELEtBQUssQ0FBRUYsT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ0YsY0FBYyxHQUFHQSxjQUFjO0lBQ3BDLElBQUksQ0FBQ0ksS0FBSyxHQUFHRixPQUFPLENBQUNFLEtBQUs7SUFFMUIsSUFBSSxDQUFDSyxhQUFhLEdBQUcsSUFBSWhCLGNBQWMsQ0FBRVMsT0FBTyxDQUFDQyxLQUFLLEVBQUU7TUFDdERPLFVBQVUsRUFBRSxTQUFTO01BQ3JCTixLQUFLLEVBQUVGLE9BQU8sQ0FBQ0UsS0FBSztNQUNwQk8sTUFBTSxFQUFFVCxPQUFPLENBQUNTLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLGVBQWdCLENBQUM7TUFFdEQ7TUFDQTtNQUNBQyxjQUFjLEVBQUlYLE9BQU8sQ0FBQ0UsS0FBSyxLQUFLO0lBQ3RDLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ1UsZ0JBQWdCLENBQUVkLGNBQWMsRUFBRTtNQUNyQ1csTUFBTSxFQUFFVCxPQUFPLENBQUNTLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLGdCQUFpQjtJQUN4RCxDQUFFLENBQUM7RUFDTDtFQUVPRyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDTixhQUFhLENBQUNNLEtBQUssQ0FBQyxDQUFDO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsUUFBUUEsQ0FBQSxFQUFXO0lBQ2pDLE9BQVEsb0JBQW1CLElBQUksQ0FBQ2hCLGNBQWMsQ0FBQ0csS0FBTSxVQUFTLElBQUksQ0FBQ00sYUFBYSxDQUFDTixLQUFNLEVBQUM7RUFDMUY7QUFDRjtBQUVBVCxnQkFBZ0IsQ0FBQ3VCLFFBQVEsQ0FBRSxVQUFVLEVBQUVuQixRQUFTLENBQUMifQ==