// Copyright 2018-2023, University of Colorado Boulder

/**
 * ConstantTermCreator creates and manages constant terms.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import Fraction from '../../../../phetcommon/js/model/Fraction.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerConstants from '../EqualityExplorerConstants.js';
import ConstantTermNode from '../view/ConstantTermNode.js'; // eslint-disable-line no-view-imported-from-model
import ConstantTerm from './ConstantTerm.js';
import TermCreator from './TermCreator.js';

// options to createTermProtected and createZeroTerm

export default class ConstantTermCreator extends TermCreator {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      constantValue: EqualityExplorerConstants.DEFAULT_CONSTANT_VALUE
    }, providedOptions);
    super(options);
    this.constantValue = options.constantValue;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  toString() {
    return `ConstantTermCreator constantValue=${this.constantValue}`;
  }

  /**
   * Returns the sum of constant values for all terms on the plate.
   */
  sumConstantsOnPlate() {
    let sum = Fraction.fromInteger(0);
    for (let i = 0; i < this.termsOnPlate.length; i++) {
      const term = this.termsOnPlate.get(i);
      assert && assert(term instanceof ConstantTerm); // eslint-disable-line no-simple-type-checking-assertions
      sum = sum.plus(term.constantValue).reduced();
    }
    return sum;
  }

  /**
   * Overridden so that we can expand the type definition of providedOptions, so that it includes properties
   * that are specific to this class. Note that super.createTerm calls createTermProtected.
   */
  createTerm(providedOptions) {
    return super.createTerm(providedOptions);
  }

  //-------------------------------------------------------------------------------------------------
  // Below here is the implementation of the TermCreator API
  //-------------------------------------------------------------------------------------------------

  /**
   * Creates the icon used to represent this term in the TermsToolboxNode and equations.
   * @param sign of the constant shown on the icon
   */
  createIcon(sign = 1) {
    const constantValue = this.constantValue.timesInteger(sign);
    return ConstantTermNode.createInteractiveTermNode(constantValue);
  }

  /**
   * Instantiates a ConstantTerm.
   */
  createTermProtected(providedOptions) {
    const options = combineOptions({
      sign: 1,
      constantValue: this.constantValue
    }, providedOptions);

    // Adjust the sign
    assert && assert(options.sign !== undefined);
    assert && assert(options.constantValue !== undefined);
    options.constantValue = options.constantValue.timesInteger(options.sign);
    return new ConstantTerm(options); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }

  /**
   * Creates a term whose significant value is zero. This is used when applying an operation to an empty plate.
   * The term is not managed by the TermCreator, so we call createTermProtected instead of createTerm.
   */
  createZeroTerm(providedOptions) {
    const options = providedOptions || {};
    assert && assert(!options.constantValue, 'ConstantTermCreator sets constantValue');
    options.constantValue = Fraction.fromInteger(0);
    return this.createTermProtected(options);
  }

  /**
   * Instantiates the Node that corresponds to this term.
   */
  createTermNode(term) {
    return new ConstantTermNode(this, term); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }
}

equalityExplorer.register('ConstantTermCreator', ConstantTermCreator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,