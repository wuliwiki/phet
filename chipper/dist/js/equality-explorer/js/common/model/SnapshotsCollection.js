// Copyright 2017-2022, University of Colorado Boulder

/**
 * Manages a collection of Snapshots.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import equalityExplorer from '../../equalityExplorer.js';
export default class SnapshotsCollection extends PhetioObject {
  // a Property for each possible snapshot, null means no snapshot

  // the selected snapshot, null means no selection

  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      numberOfSnapshots: 5,
      // PhetioObjectOptions
      phetioState: false,
      phetioDocumentation: 'Collection of snapshots that appear in the Snapshots accordion box'
    }, providedOptions);
    assert && assert(Number.isInteger(options.numberOfSnapshots) && options.numberOfSnapshots > 0);
    super(options);
    this.snapshotProperties = [];
    for (let i = 0; i < options.numberOfSnapshots; i++) {
      this.snapshotProperties.push(new Property(null, {
        //TODO https://github.com/phetsims/equality-explorer/issues/200 add these options after creating SnapshotIO
        //tandem: options.tandem.createTandem( `snapshot${i}Property` ),
        //phetioValueType: NullableIO( SnapshotIO ),
        //phetioDocumentation: `The snapshot that occupies row ${i} in the Snapshots accordion box. null means no snapshot.`
      }));
    }
    this.selectedSnapshotProperty = new Property(null, {
      // a valid snapshot is null or the value of one of the snapshotProperties' values
      isValidValue: snapshot => {
        return snapshot === null || _.some(this.snapshotProperties, snapshotProperty => snapshotProperty.value === snapshot);
      }
      //TODO https://github.com/phetsims/equality-explorer/issues/200 add these options after creating SnapshotIO
      //tandem: options.tandem.createTandem( 'selectedSnapshotProperty' ),
      //phetioValueType: NullableIO( SnapshotIO ),
      //phetioDocumentation: 'The snapshot that is selected in the Snapshots accordion box. null means no snapshot is selected.'
    });
  }

  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    // Reset the selected snapshot.
    this.selectedSnapshotProperty.reset();

    // Dispose of all snapshots.
    for (let i = 0; i < this.snapshotProperties.length; i++) {
      const snapshot = this.snapshotProperties[i].value;
      if (snapshot !== null) {
        snapshot.dispose();
        this.snapshotProperties[i].value = null;
      }
    }
  }

  /**
   * Restores the selected snapshot.
   */
  restoreSelectedSnapshot() {
    const snapshot = this.selectedSnapshotProperty.value;
    assert && assert(snapshot);
    snapshot.restore();
  }

  /**
   * Deletes the selected snapshot.
   */
  deleteSelectedSnapshot() {
    const selectedSnapshot = this.selectedSnapshotProperty.value;
    assert && assert(selectedSnapshot, 'no selected snapshot');

    // Clear the selection.
    this.selectedSnapshotProperty.value = null;

    // Clear the Property that corresponds to the selected snapshot.
    const snapshotProperty = _.find(this.snapshotProperties, p => p.value === selectedSnapshot);
    assert && assert(snapshotProperty);
    snapshotProperty.value = null;

    // Dispose of the selected snapshot.
    selectedSnapshot.dispose();
  }
}
equalityExplorer.register('SnapshotsCollection', SnapshotsCollection);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,