// Copyright 2018-2022, University of Colorado Boulder

/**
 * Term whose value is a coefficient times some variable value.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerConstants from '../EqualityExplorerConstants.js';
import Term from './Term.js';
import UniversalOperator from './UniversalOperator.js';
export default class VariableTerm extends Term {
  /**
   * @param variable - the variable for this term, e.g. 'x'
   * @param [providedOptions]
   */
  constructor(variable, providedOptions) {
    const options = optionize()({
      // SelfOptions
      coefficient: EqualityExplorerConstants.DEFAULT_COEFFICIENT
    }, providedOptions);
    assert && assert(options.coefficient.isReduced(), `coefficient must be reduced: ${options.coefficient}`);
    super(options.coefficient, options);
    this.coefficient = options.coefficient;
    this.variable = variable;
  }
  getVariable() {
    return this.variable;
  }

  /**
   * For debugging only. Do not rely on the format of toString.
   */
  toString() {
    return `VariableTerm: ${this.coefficient} ${this.variable}`;
  }

  /**
   * Creates the options that would be needed to instantiate a copy of this object.
   */
  copyOptions() {
    return combineOptions({}, super.copyOptions(), {
      coefficient: this.coefficient.copy()
    });
  }

  /**
   * Creates a copy of this term, with modifications through options.
   */
  copy(providedOptions) {
    return new VariableTerm(this.variable, combineOptions({}, this.copyOptions(), providedOptions)); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }

  /**
   * Gets the weight of this term.
   */
  get weight() {
    return this.coefficient.timesInteger(this.variable.valueProperty.value).reduced();
  }

  /**
   * Are this term and the specified term 'like terms'?
   * Variable terms are 'like' if they are associated with the same variable.
   */
  isLikeTerm(term) {
    return term instanceof VariableTerm && term.variable === this.variable;
  }

  /**
   * Applies an operation to this term, resulting in a new term.
   * Returns null if the operation is not applicable to this term.
   */
  applyOperation(operation) {
    let term = null;
    if (operation.operand instanceof VariableTerm) {
      // plus or minus a variable
      if (operation.operator === UniversalOperator.PLUS) {
        term = this.plus(operation.operand);
      } else if (operation.operator === UniversalOperator.MINUS) {
        term = this.minus(operation.operand);
      }
    } else {
      // times or divided-by a constant
      if (operation.operator === UniversalOperator.TIMES) {
        term = this.times(operation.operand);
      } else if (operation.operator === UniversalOperator.DIVIDE) {
        term = this.divided(operation.operand);
      }
    }
    return term;
  }

  /**
   * Adds a variable term to this term to create a new term.
   */
  plus(term) {
    assert && assert(this.isLikeTerm(term), `not a like term: ${term}`);
    return this.copy({
      coefficient: this.coefficient.plus(term.coefficient).reduced()
    });
  }

  /**
   * Subtracts a variable term from this term to create a new term.
   */
  minus(term) {
    assert && assert(this.isLikeTerm(term), `not a like term: ${term}`);
    return this.copy({
      coefficient: this.coefficient.minus(term.coefficient).reduced()
    });
  }

  /**
   * Multiplies this term by a constant term to create a new term.
   */
  times(term) {
    return this.copy({
      coefficient: this.coefficient.times(term.constantValue).reduced()
    });
  }

  /**
   * Divides this term by a constant term to create a new term.
   */
  divided(term) {
    assert && assert(term.constantValue.getValue() !== 0, 'attempt to divide by zero');
    return this.copy({
      coefficient: this.coefficient.divided(term.constantValue).reduced()
    });
  }
}
equalityExplorer.register('VariableTerm', VariableTerm);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,