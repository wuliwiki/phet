// Copyright 2022, University of Colorado Boulder

/**
 * UniversalOperator is a rich enumeration for operators that are supported by a UniversalOperation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import Enumeration from '../../../../phet-core/js/Enumeration.js';
import EnumerationValue from '../../../../phet-core/js/EnumerationValue.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import equalityExplorer from '../../equalityExplorer.js';
export default class UniversalOperator extends EnumerationValue {
  // In the order that they appear in the ObjectPicker for the UniversalOperationControl
  static PLUS = new UniversalOperator(MathSymbols.PLUS, 'plus');
  static MINUS = new UniversalOperator(MathSymbols.MINUS, 'minus');
  static TIMES = new UniversalOperator(MathSymbols.TIMES, 'times');
  static DIVIDE = new UniversalOperator(MathSymbols.DIVIDE, 'divide');
  static enumeration = new Enumeration(UniversalOperator);

  // The mathematical symbol for the operator

  // The tandem name for the operator, used as the prefix for related tandems

  constructor(symbol, tandemName) {
    super();
    this.symbol = symbol;
    this.tandemName = tandemName;
  }

  /**
   * Chooses a random operator.
   */
  static getRandom() {
    return dotRandom.sample([...UniversalOperator.enumeration.values]);
  }
}
equalityExplorer.register('UniversalOperator', UniversalOperator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJNYXRoU3ltYm9scyIsImVxdWFsaXR5RXhwbG9yZXIiLCJVbml2ZXJzYWxPcGVyYXRvciIsIlBMVVMiLCJNSU5VUyIsIlRJTUVTIiwiRElWSURFIiwiZW51bWVyYXRpb24iLCJjb25zdHJ1Y3RvciIsInN5bWJvbCIsInRhbmRlbU5hbWUiLCJnZXRSYW5kb20iLCJzYW1wbGUiLCJ2YWx1ZXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVuaXZlcnNhbE9wZXJhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBVbml2ZXJzYWxPcGVyYXRvciBpcyBhIHJpY2ggZW51bWVyYXRpb24gZm9yIG9wZXJhdG9ycyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgYSBVbml2ZXJzYWxPcGVyYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvbi5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblZhbHVlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvblZhbHVlLmpzJztcclxuaW1wb3J0IE1hdGhTeW1ib2xzIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9NYXRoU3ltYm9scy5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5pdmVyc2FsT3BlcmF0b3IgZXh0ZW5kcyBFbnVtZXJhdGlvblZhbHVlIHtcclxuXHJcbiAgLy8gSW4gdGhlIG9yZGVyIHRoYXQgdGhleSBhcHBlYXIgaW4gdGhlIE9iamVjdFBpY2tlciBmb3IgdGhlIFVuaXZlcnNhbE9wZXJhdGlvbkNvbnRyb2xcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBMVVMgPSBuZXcgVW5pdmVyc2FsT3BlcmF0b3IoIE1hdGhTeW1ib2xzLlBMVVMsICdwbHVzJyApO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUlOVVMgPSBuZXcgVW5pdmVyc2FsT3BlcmF0b3IoIE1hdGhTeW1ib2xzLk1JTlVTLCAnbWludXMnICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBUSU1FUyA9IG5ldyBVbml2ZXJzYWxPcGVyYXRvciggTWF0aFN5bWJvbHMuVElNRVMsICd0aW1lcycgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERJVklERSA9IG5ldyBVbml2ZXJzYWxPcGVyYXRvciggTWF0aFN5bWJvbHMuRElWSURFLCAnZGl2aWRlJyApO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBVbml2ZXJzYWxPcGVyYXRvciApO1xyXG5cclxuICAvLyBUaGUgbWF0aGVtYXRpY2FsIHN5bWJvbCBmb3IgdGhlIG9wZXJhdG9yXHJcbiAgcHVibGljIHJlYWRvbmx5IHN5bWJvbDogc3RyaW5nO1xyXG5cclxuICAvLyBUaGUgdGFuZGVtIG5hbWUgZm9yIHRoZSBvcGVyYXRvciwgdXNlZCBhcyB0aGUgcHJlZml4IGZvciByZWxhdGVkIHRhbmRlbXNcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFuZGVtTmFtZTogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN5bWJvbDogc3RyaW5nLCB0YW5kZW1OYW1lOiBzdHJpbmcgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5zeW1ib2wgPSBzeW1ib2w7XHJcbiAgICB0aGlzLnRhbmRlbU5hbWUgPSB0YW5kZW1OYW1lO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hvb3NlcyBhIHJhbmRvbSBvcGVyYXRvci5cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldFJhbmRvbSgpOiBVbml2ZXJzYWxPcGVyYXRvciB7XHJcbiAgICByZXR1cm4gZG90UmFuZG9tLnNhbXBsZSggWyAuLi5Vbml2ZXJzYWxPcGVyYXRvci5lbnVtZXJhdGlvbi52YWx1ZXMgXSApO1xyXG4gIH1cclxufVxyXG5cclxuZXF1YWxpdHlFeHBsb3Jlci5yZWdpc3RlciggJ1VuaXZlcnNhbE9wZXJhdG9yJywgVW5pdmVyc2FsT3BlcmF0b3IgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxXQUFXLE1BQU0seUNBQXlDO0FBQ2pFLE9BQU9DLGdCQUFnQixNQUFNLDhDQUE4QztBQUMzRSxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUV4RCxlQUFlLE1BQU1DLGlCQUFpQixTQUFTSCxnQkFBZ0IsQ0FBQztFQUU5RDtFQUNBLE9BQXVCSSxJQUFJLEdBQUcsSUFBSUQsaUJBQWlCLENBQUVGLFdBQVcsQ0FBQ0csSUFBSSxFQUFFLE1BQU8sQ0FBQztFQUMvRSxPQUF1QkMsS0FBSyxHQUFHLElBQUlGLGlCQUFpQixDQUFFRixXQUFXLENBQUNJLEtBQUssRUFBRSxPQUFRLENBQUM7RUFDbEYsT0FBdUJDLEtBQUssR0FBRyxJQUFJSCxpQkFBaUIsQ0FBRUYsV0FBVyxDQUFDSyxLQUFLLEVBQUUsT0FBUSxDQUFDO0VBQ2xGLE9BQXVCQyxNQUFNLEdBQUcsSUFBSUosaUJBQWlCLENBQUVGLFdBQVcsQ0FBQ00sTUFBTSxFQUFFLFFBQVMsQ0FBQztFQUVyRixPQUF1QkMsV0FBVyxHQUFHLElBQUlULFdBQVcsQ0FBRUksaUJBQWtCLENBQUM7O0VBRXpFOztFQUdBOztFQUdPTSxXQUFXQSxDQUFFQyxNQUFjLEVBQUVDLFVBQWtCLEVBQUc7SUFDdkQsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTtFQUM5Qjs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjQyxTQUFTQSxDQUFBLEVBQXNCO0lBQzNDLE9BQU9kLFNBQVMsQ0FBQ2UsTUFBTSxDQUFFLENBQUUsR0FBR1YsaUJBQWlCLENBQUNLLFdBQVcsQ0FBQ00sTUFBTSxDQUFHLENBQUM7RUFDeEU7QUFDRjtBQUVBWixnQkFBZ0IsQ0FBQ2EsUUFBUSxDQUFFLG1CQUFtQixFQUFFWixpQkFBa0IsQ0FBQyJ9