// Copyright 2017-2022, University of Colorado Boulder

/**
 * BalanceScale is the model of a balance scale.
 * It consists of 2 plates that sit on either ends of a beam.
 * The center of the beam is balanced on a fulcrum.
 * The origin is at the point where the beam is balanced on the fulcrum.
 * Terms are arranged in a 2D grid on each plate.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import equalityExplorer from '../../equalityExplorer.js';
import Plate from './Plate.js';
import { RelationalOperatorValues } from './RelationalOperator.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import StringIO from '../../../../tandem/js/types/StringIO.js';
export default class BalanceScale {
  // angle of the scale in radians, zero is balanced

  // relation operator for the equation that describes the state of the balance scale\
  // This is a PhET-iO-only Property, and is not used elsewhere in the sim.
  // total number of terms on the scale
  constructor(leftTermCreators, rightTermCreators, providedOptions) {
    const options = optionize()({
      position: Vector2.ZERO,
      // position of the point where the beam balances on the fulcrum
      beamWidth: 450,
      // width of the balance beam
      maxAngle: Utils.toRadians(22),
      // max angle of the scale, in radians
      maxWeight: 30,
      // weight at which a plate 'bottoms out'

      plateSupportHeight: 70,
      // height of vertical support that connects plate to beam
      plateDiameter: 300,
      // diameter of the plates
      plateXInset: 45,
      // inset of the plates from the ends of the beam

      // options related to the plate's 2D grid
      gridRows: 6,
      // rows in the grid
      gridColumns: 6,
      // columns in the grid
      gridXMargin: 2,
      // horizontal space between stacks of terms
      gridYMargin: 0,
      // vertical space between terms in each stack
      iconSize: null // {Dimension2|null} size of icons, computed if null
    }, providedOptions);
    assert && assert(options.beamWidth - 2 * options.plateXInset > options.plateDiameter, 'plates will overlap');
    this.position = options.position;
    this.beamWidth = options.beamWidth;
    this.maxAngle = options.maxAngle;
    this.leftTermCreators = leftTermCreators;
    this.rightTermCreators = rightTermCreators;

    // {TermCreator[]} all TermCreator instances
    const termCreators = leftTermCreators.concat(rightTermCreators);

    // Compute the maximum width and height of all term icons
    if (!options.iconSize) {
      let maxIconWidth = 0;
      let maxIconHeight = 0;
      termCreators.forEach(termCreator => {
        maxIconWidth = Math.max(maxIconWidth, termCreator.createIcon().width);
        maxIconHeight = Math.max(maxIconHeight, termCreator.createIcon().height);
      });
      options.iconSize = new Dimension2(maxIconWidth, maxIconHeight);
    }

    // size of each cell in the grid
    const cellSize = new Dimension2(options.iconSize.width + 2 * options.gridXMargin, options.iconSize.height + 2 * options.gridYMargin);
    assert && assert(options.gridColumns * cellSize.width <= options.plateDiameter, 'grid is wider than plate');

    // options that apply to both plates
    const plateOptions = {
      supportHeight: options.plateSupportHeight,
      diameter: options.plateDiameter,
      gridRows: options.gridRows,
      gridColumns: options.gridColumns,
      cellSize: cellSize
    };
    const platesTandem = options.tandem.createTandem('plates');
    this.leftPlate = new Plate(leftTermCreators, 'left', combineOptions({
      tandem: platesTandem.createTandem('leftPlate')
    }, plateOptions));
    this.rightPlate = new Plate(rightTermCreators, 'right', combineOptions({
      tandem: platesTandem.createTandem('rightPlate')
    }, plateOptions));
    this.angleProperty = new DerivedProperty([this.leftPlate.weightProperty, this.rightPlate.weightProperty], (leftWeight, rightWeight) => {
      // compute the weight difference between the 2 plates
      let weightDelta = rightWeight.minus(leftWeight).getValue();

      // constrain to maxWeight so the scale bottoms out
      if (weightDelta > options.maxWeight) {
        weightDelta = options.maxWeight;
      } else if (weightDelta < -options.maxWeight) {
        weightDelta = -options.maxWeight;
      }
      const angle = weightDelta / options.maxWeight * options.maxAngle;
      assert && assert(Math.abs(angle) <= options.maxAngle, `angle out of range: ${angle}`);
      return angle;
    }, {
      isValidValue: value => typeof value === 'number',
      tandem: options.tandem.createTandem('angleProperty'),
      phetioValueType: NumberIO,
      phetioDocumentation: 'Angle of the scale in radians, zero is balanced'
    });

    // Move the plates when the angle changes.
    this.angleProperty.link(angle => {
      // hoist reusable vars
      let dx = 0;
      let dy = 0;

      // move the right plate
      let rightPosition = null;
      const absXInset = Math.abs(options.plateXInset);
      if (angle === 0) {
        rightPosition = new Vector2(this.position.x + this.beamWidth / 2 - absXInset, this.position.y - options.plateSupportHeight);
      } else {
        const hypotenuse = this.beamWidth / 2 - absXInset;
        dx = Math.cos(angle) * hypotenuse;
        dy = Math.sin(angle) * hypotenuse;
        rightPosition = new Vector2(this.position.x + dx, this.position.y + dy - options.plateSupportHeight);
      }
      this.rightPlate.positionProperty.value = rightPosition;

      // move the left plate, relative to the right plate
      dx = rightPosition.x - this.position.x;
      dy = rightPosition.y + options.plateSupportHeight - this.position.y;
      this.leftPlate.positionProperty.value = new Vector2(this.position.x - dx, this.position.y - dy - options.plateSupportHeight);
    });
    this.relationalOperatorProperty = new DerivedProperty([this.angleProperty], angle => angle === 0 ? MathSymbols.EQUAL_TO : angle > 0 ? MathSymbols.GREATER_THAN : MathSymbols.LESS_THAN, {
      tandem: options.tandem.createTandem('relationalOperatorProperty'),
      phetioValueType: StringIO,
      validValues: RelationalOperatorValues,
      phetioDocumentation: 'the relationship between the left and right sides of the balance scale'
    });
    this.numberOfTermsProperty = new DerivedProperty([this.leftPlate.numberOfTermsProperty, this.rightPlate.numberOfTermsProperty], (leftNumberOfTerms, rightNumberOfTerms) => leftNumberOfTerms + rightNumberOfTerms, {
      isValidValue: value => Number.isInteger(value),
      tandem: options.tandem.createTandem('numberOfTermsProperty'),
      phetioValueType: NumberIO,
      phetioDocumentation: 'Number of terms on the scale'
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }

  /**
   * Organizes terms on the scale, grouping like terms together.
   */
  organize() {
    this.leftPlate.organize();
    this.rightPlate.organize();
  }

  /**
   * Clears the scale, by disposing of all terms that are on the scale.
   */
  clear() {
    const termCreators = this.leftTermCreators.concat(this.rightTermCreators);
    termCreators.forEach(termCreator => termCreator.disposeTermsOnPlate());
  }
}
equalityExplorer.register('BalanceScale', BalanceScale);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJEaW1lbnNpb24yIiwiVXRpbHMiLCJWZWN0b3IyIiwib3B0aW9uaXplIiwiY29tYmluZU9wdGlvbnMiLCJOdW1iZXJJTyIsImVxdWFsaXR5RXhwbG9yZXIiLCJQbGF0ZSIsIlJlbGF0aW9uYWxPcGVyYXRvclZhbHVlcyIsIk1hdGhTeW1ib2xzIiwiU3RyaW5nSU8iLCJCYWxhbmNlU2NhbGUiLCJjb25zdHJ1Y3RvciIsImxlZnRUZXJtQ3JlYXRvcnMiLCJyaWdodFRlcm1DcmVhdG9ycyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJwb3NpdGlvbiIsIlpFUk8iLCJiZWFtV2lkdGgiLCJtYXhBbmdsZSIsInRvUmFkaWFucyIsIm1heFdlaWdodCIsInBsYXRlU3VwcG9ydEhlaWdodCIsInBsYXRlRGlhbWV0ZXIiLCJwbGF0ZVhJbnNldCIsImdyaWRSb3dzIiwiZ3JpZENvbHVtbnMiLCJncmlkWE1hcmdpbiIsImdyaWRZTWFyZ2luIiwiaWNvblNpemUiLCJhc3NlcnQiLCJ0ZXJtQ3JlYXRvcnMiLCJjb25jYXQiLCJtYXhJY29uV2lkdGgiLCJtYXhJY29uSGVpZ2h0IiwiZm9yRWFjaCIsInRlcm1DcmVhdG9yIiwiTWF0aCIsIm1heCIsImNyZWF0ZUljb24iLCJ3aWR0aCIsImhlaWdodCIsImNlbGxTaXplIiwicGxhdGVPcHRpb25zIiwic3VwcG9ydEhlaWdodCIsImRpYW1ldGVyIiwicGxhdGVzVGFuZGVtIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwibGVmdFBsYXRlIiwicmlnaHRQbGF0ZSIsImFuZ2xlUHJvcGVydHkiLCJ3ZWlnaHRQcm9wZXJ0eSIsImxlZnRXZWlnaHQiLCJyaWdodFdlaWdodCIsIndlaWdodERlbHRhIiwibWludXMiLCJnZXRWYWx1ZSIsImFuZ2xlIiwiYWJzIiwiaXNWYWxpZFZhbHVlIiwidmFsdWUiLCJwaGV0aW9WYWx1ZVR5cGUiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwibGluayIsImR4IiwiZHkiLCJyaWdodFBvc2l0aW9uIiwiYWJzWEluc2V0IiwieCIsInkiLCJoeXBvdGVudXNlIiwiY29zIiwic2luIiwicG9zaXRpb25Qcm9wZXJ0eSIsInJlbGF0aW9uYWxPcGVyYXRvclByb3BlcnR5IiwiRVFVQUxfVE8iLCJHUkVBVEVSX1RIQU4iLCJMRVNTX1RIQU4iLCJ2YWxpZFZhbHVlcyIsIm51bWJlck9mVGVybXNQcm9wZXJ0eSIsImxlZnROdW1iZXJPZlRlcm1zIiwicmlnaHROdW1iZXJPZlRlcm1zIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiZGlzcG9zZSIsIm9yZ2FuaXplIiwiY2xlYXIiLCJkaXNwb3NlVGVybXNPblBsYXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCYWxhbmNlU2NhbGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmFsYW5jZVNjYWxlIGlzIHRoZSBtb2RlbCBvZiBhIGJhbGFuY2Ugc2NhbGUuXHJcbiAqIEl0IGNvbnNpc3RzIG9mIDIgcGxhdGVzIHRoYXQgc2l0IG9uIGVpdGhlciBlbmRzIG9mIGEgYmVhbS5cclxuICogVGhlIGNlbnRlciBvZiB0aGUgYmVhbSBpcyBiYWxhbmNlZCBvbiBhIGZ1bGNydW0uXHJcbiAqIFRoZSBvcmlnaW4gaXMgYXQgdGhlIHBvaW50IHdoZXJlIHRoZSBiZWFtIGlzIGJhbGFuY2VkIG9uIHRoZSBmdWxjcnVtLlxyXG4gKiBUZXJtcyBhcmUgYXJyYW5nZWQgaW4gYSAyRCBncmlkIG9uIGVhY2ggcGxhdGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5pbXBvcnQgUGxhdGUsIHsgUGxhdGVPcHRpb25zIH0gZnJvbSAnLi9QbGF0ZS5qcyc7XHJcbmltcG9ydCBUZXJtQ3JlYXRvciBmcm9tICcuL1Rlcm1DcmVhdG9yLmpzJztcclxuaW1wb3J0IHsgUmVsYXRpb25hbE9wZXJhdG9yLCBSZWxhdGlvbmFsT3BlcmF0b3JWYWx1ZXMgfSBmcm9tICcuL1JlbGF0aW9uYWxPcGVyYXRvci5qcyc7XHJcbmltcG9ydCBNYXRoU3ltYm9scyBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTWF0aFN5bWJvbHMuanMnO1xyXG5pbXBvcnQgU3RyaW5nSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0cmluZ0lPLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcG9zaXRpb24/OiBWZWN0b3IyOyAvLyBwb3NpdGlvbiBvZiB0aGUgcG9pbnQgd2hlcmUgdGhlIGJlYW0gYmFsYW5jZXMgb24gdGhlIGZ1bGNydW1cclxuICBiZWFtV2lkdGg/OiBudW1iZXI7IC8vIHdpZHRoIG9mIHRoZSBiYWxhbmNlIGJlYW1cclxuICBtYXhBbmdsZT86IG51bWJlcjsgLy8gbWF4IGFuZ2xlIG9mIHRoZSBzY2FsZSwgaW4gcmFkaWFuc1xyXG4gIG1heFdlaWdodD86IG51bWJlcjsgLy8gd2VpZ2h0IGF0IHdoaWNoIGEgcGxhdGUgJ2JvdHRvbXMgb3V0J1xyXG5cclxuICBwbGF0ZVN1cHBvcnRIZWlnaHQ/OiBudW1iZXI7IC8vIGhlaWdodCBvZiB2ZXJ0aWNhbCBzdXBwb3J0IHRoYXQgY29ubmVjdHMgcGxhdGUgdG8gYmVhbVxyXG4gIHBsYXRlRGlhbWV0ZXI/OiBudW1iZXI7IC8vIGRpYW1ldGVyIG9mIHRoZSBwbGF0ZXNcclxuICBwbGF0ZVhJbnNldD86IG51bWJlcjsgLy8gaW5zZXQgb2YgdGhlIHBsYXRlcyBmcm9tIHRoZSBlbmRzIG9mIHRoZSBiZWFtXHJcblxyXG4gIC8vIG9wdGlvbnMgcmVsYXRlZCB0byB0aGUgcGxhdGUncyAyRCBncmlkXHJcbiAgZ3JpZFJvd3M/OiBudW1iZXI7IC8vIHJvd3MgaW4gdGhlIGdyaWRcclxuICBncmlkQ29sdW1ucz86IG51bWJlcjsgLy8gY29sdW1ucyBpbiB0aGUgZ3JpZFxyXG4gIGdyaWRYTWFyZ2luPzogbnVtYmVyOyAvLyBob3Jpem9udGFsIHNwYWNlIGJldHdlZW4gc3RhY2tzIG9mIHRlcm1zXHJcbiAgZ3JpZFlNYXJnaW4/OiBudW1iZXI7ICAvLyB2ZXJ0aWNhbCBzcGFjZSBiZXR3ZWVuIHRlcm1zIGluIGVhY2ggc3RhY2tcclxuICBpY29uU2l6ZT86IERpbWVuc2lvbjIgfCBudWxsOyAvLyBzaXplIG9mIGljb25zLCBjb21wdXRlZCBpZiBudWxsXHJcbn07XHJcblxyXG50eXBlIEJhbGFuY2VTY2FsZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQaGV0aW9PYmplY3RPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgdHlwZSBCYWxhbmNlU2NhbGVTaWRlID0gJ2xlZnQnIHwgJ3JpZ2h0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhbGFuY2VTY2FsZSB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBwb3NpdGlvbjogVmVjdG9yMjtcclxuICBwdWJsaWMgcmVhZG9ubHkgYmVhbVdpZHRoOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1heEFuZ2xlOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGxlZnRQbGF0ZTogUGxhdGU7XHJcbiAgcHVibGljIHJlYWRvbmx5IHJpZ2h0UGxhdGU6IFBsYXRlO1xyXG5cclxuICAvLyBhbmdsZSBvZiB0aGUgc2NhbGUgaW4gcmFkaWFucywgemVybyBpcyBiYWxhbmNlZFxyXG4gIHB1YmxpYyByZWFkb25seSBhbmdsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+O1xyXG5cclxuICAvLyByZWxhdGlvbiBvcGVyYXRvciBmb3IgdGhlIGVxdWF0aW9uIHRoYXQgZGVzY3JpYmVzIHRoZSBzdGF0ZSBvZiB0aGUgYmFsYW5jZSBzY2FsZVxcXHJcbiAgLy8gVGhpcyBpcyBhIFBoRVQtaU8tb25seSBQcm9wZXJ0eSwgYW5kIGlzIG5vdCB1c2VkIGVsc2V3aGVyZSBpbiB0aGUgc2ltLlxyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVsYXRpb25hbE9wZXJhdG9yUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFJlbGF0aW9uYWxPcGVyYXRvcj47XHJcblxyXG4gIC8vIHRvdGFsIG51bWJlciBvZiB0ZXJtcyBvbiB0aGUgc2NhbGVcclxuICBwdWJsaWMgcmVhZG9ubHkgbnVtYmVyT2ZUZXJtc1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+O1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGxlZnRUZXJtQ3JlYXRvcnM6IFRlcm1DcmVhdG9yW107XHJcbiAgcHJpdmF0ZSByZWFkb25seSByaWdodFRlcm1DcmVhdG9yczogVGVybUNyZWF0b3JbXTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsZWZ0VGVybUNyZWF0b3JzOiBUZXJtQ3JlYXRvcltdLCByaWdodFRlcm1DcmVhdG9yczogVGVybUNyZWF0b3JbXSwgcHJvdmlkZWRPcHRpb25zPzogQmFsYW5jZVNjYWxlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJhbGFuY2VTY2FsZU9wdGlvbnMsIFNlbGZPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICBwb3NpdGlvbjogVmVjdG9yMi5aRVJPLCAvLyBwb3NpdGlvbiBvZiB0aGUgcG9pbnQgd2hlcmUgdGhlIGJlYW0gYmFsYW5jZXMgb24gdGhlIGZ1bGNydW1cclxuICAgICAgYmVhbVdpZHRoOiA0NTAsIC8vIHdpZHRoIG9mIHRoZSBiYWxhbmNlIGJlYW1cclxuICAgICAgbWF4QW5nbGU6IFV0aWxzLnRvUmFkaWFucyggMjIgKSwgLy8gbWF4IGFuZ2xlIG9mIHRoZSBzY2FsZSwgaW4gcmFkaWFuc1xyXG4gICAgICBtYXhXZWlnaHQ6IDMwLCAvLyB3ZWlnaHQgYXQgd2hpY2ggYSBwbGF0ZSAnYm90dG9tcyBvdXQnXHJcblxyXG4gICAgICBwbGF0ZVN1cHBvcnRIZWlnaHQ6IDcwLCAvLyBoZWlnaHQgb2YgdmVydGljYWwgc3VwcG9ydCB0aGF0IGNvbm5lY3RzIHBsYXRlIHRvIGJlYW1cclxuICAgICAgcGxhdGVEaWFtZXRlcjogMzAwLCAvLyBkaWFtZXRlciBvZiB0aGUgcGxhdGVzXHJcbiAgICAgIHBsYXRlWEluc2V0OiA0NSwgLy8gaW5zZXQgb2YgdGhlIHBsYXRlcyBmcm9tIHRoZSBlbmRzIG9mIHRoZSBiZWFtXHJcblxyXG4gICAgICAvLyBvcHRpb25zIHJlbGF0ZWQgdG8gdGhlIHBsYXRlJ3MgMkQgZ3JpZFxyXG4gICAgICBncmlkUm93czogNiwgLy8gcm93cyBpbiB0aGUgZ3JpZFxyXG4gICAgICBncmlkQ29sdW1uczogNiwgLy8gY29sdW1ucyBpbiB0aGUgZ3JpZFxyXG4gICAgICBncmlkWE1hcmdpbjogMiwgLy8gaG9yaXpvbnRhbCBzcGFjZSBiZXR3ZWVuIHN0YWNrcyBvZiB0ZXJtc1xyXG4gICAgICBncmlkWU1hcmdpbjogMCwgIC8vIHZlcnRpY2FsIHNwYWNlIGJldHdlZW4gdGVybXMgaW4gZWFjaCBzdGFja1xyXG4gICAgICBpY29uU2l6ZTogbnVsbCAvLyB7RGltZW5zaW9uMnxudWxsfSBzaXplIG9mIGljb25zLCBjb21wdXRlZCBpZiBudWxsXHJcblxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy5iZWFtV2lkdGggLSAoIDIgKiBvcHRpb25zLnBsYXRlWEluc2V0ICkgPiBvcHRpb25zLnBsYXRlRGlhbWV0ZXIsICdwbGF0ZXMgd2lsbCBvdmVybGFwJyApO1xyXG5cclxuICAgIHRoaXMucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xyXG4gICAgdGhpcy5iZWFtV2lkdGggPSBvcHRpb25zLmJlYW1XaWR0aDtcclxuICAgIHRoaXMubWF4QW5nbGUgPSBvcHRpb25zLm1heEFuZ2xlO1xyXG5cclxuICAgIHRoaXMubGVmdFRlcm1DcmVhdG9ycyA9IGxlZnRUZXJtQ3JlYXRvcnM7XHJcbiAgICB0aGlzLnJpZ2h0VGVybUNyZWF0b3JzID0gcmlnaHRUZXJtQ3JlYXRvcnM7XHJcblxyXG4gICAgLy8ge1Rlcm1DcmVhdG9yW119IGFsbCBUZXJtQ3JlYXRvciBpbnN0YW5jZXNcclxuICAgIGNvbnN0IHRlcm1DcmVhdG9ycyA9IGxlZnRUZXJtQ3JlYXRvcnMuY29uY2F0KCByaWdodFRlcm1DcmVhdG9ycyApO1xyXG5cclxuICAgIC8vIENvbXB1dGUgdGhlIG1heGltdW0gd2lkdGggYW5kIGhlaWdodCBvZiBhbGwgdGVybSBpY29uc1xyXG4gICAgaWYgKCAhb3B0aW9ucy5pY29uU2l6ZSApIHtcclxuICAgICAgbGV0IG1heEljb25XaWR0aCA9IDA7XHJcbiAgICAgIGxldCBtYXhJY29uSGVpZ2h0ID0gMDtcclxuICAgICAgdGVybUNyZWF0b3JzLmZvckVhY2goIHRlcm1DcmVhdG9yID0+IHtcclxuICAgICAgICBtYXhJY29uV2lkdGggPSBNYXRoLm1heCggbWF4SWNvbldpZHRoLCB0ZXJtQ3JlYXRvci5jcmVhdGVJY29uKCkud2lkdGggKTtcclxuICAgICAgICBtYXhJY29uSGVpZ2h0ID0gTWF0aC5tYXgoIG1heEljb25IZWlnaHQsIHRlcm1DcmVhdG9yLmNyZWF0ZUljb24oKS5oZWlnaHQgKTtcclxuICAgICAgfSApO1xyXG4gICAgICBvcHRpb25zLmljb25TaXplID0gbmV3IERpbWVuc2lvbjIoIG1heEljb25XaWR0aCwgbWF4SWNvbkhlaWdodCApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNpemUgb2YgZWFjaCBjZWxsIGluIHRoZSBncmlkXHJcbiAgICBjb25zdCBjZWxsU2l6ZSA9IG5ldyBEaW1lbnNpb24yKFxyXG4gICAgICBvcHRpb25zLmljb25TaXplLndpZHRoICsgKCAyICogb3B0aW9ucy5ncmlkWE1hcmdpbiApLFxyXG4gICAgICBvcHRpb25zLmljb25TaXplLmhlaWdodCArICggMiAqIG9wdGlvbnMuZ3JpZFlNYXJnaW4gKSApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy5ncmlkQ29sdW1ucyAqIGNlbGxTaXplLndpZHRoIDw9IG9wdGlvbnMucGxhdGVEaWFtZXRlciwgJ2dyaWQgaXMgd2lkZXIgdGhhbiBwbGF0ZScgKTtcclxuXHJcbiAgICAvLyBvcHRpb25zIHRoYXQgYXBwbHkgdG8gYm90aCBwbGF0ZXNcclxuICAgIGNvbnN0IHBsYXRlT3B0aW9ucyA9IHtcclxuICAgICAgc3VwcG9ydEhlaWdodDogb3B0aW9ucy5wbGF0ZVN1cHBvcnRIZWlnaHQsXHJcbiAgICAgIGRpYW1ldGVyOiBvcHRpb25zLnBsYXRlRGlhbWV0ZXIsXHJcbiAgICAgIGdyaWRSb3dzOiBvcHRpb25zLmdyaWRSb3dzLFxyXG4gICAgICBncmlkQ29sdW1uczogb3B0aW9ucy5ncmlkQ29sdW1ucyxcclxuICAgICAgY2VsbFNpemU6IGNlbGxTaXplXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHBsYXRlc1RhbmRlbSA9IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BsYXRlcycgKTtcclxuXHJcbiAgICB0aGlzLmxlZnRQbGF0ZSA9IG5ldyBQbGF0ZSggbGVmdFRlcm1DcmVhdG9ycywgJ2xlZnQnLCBjb21iaW5lT3B0aW9uczxQbGF0ZU9wdGlvbnM+KCB7XHJcbiAgICAgIHRhbmRlbTogcGxhdGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xlZnRQbGF0ZScgKVxyXG4gICAgfSwgcGxhdGVPcHRpb25zICkgKTtcclxuICAgIHRoaXMucmlnaHRQbGF0ZSA9IG5ldyBQbGF0ZSggcmlnaHRUZXJtQ3JlYXRvcnMsICdyaWdodCcsIGNvbWJpbmVPcHRpb25zPFBsYXRlT3B0aW9ucz4oIHtcclxuICAgICAgdGFuZGVtOiBwbGF0ZXNUYW5kZW0uY3JlYXRlVGFuZGVtKCAncmlnaHRQbGF0ZScgKVxyXG4gICAgfSwgcGxhdGVPcHRpb25zICkgKTtcclxuXHJcbiAgICB0aGlzLmFuZ2xlUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIHRoaXMubGVmdFBsYXRlLndlaWdodFByb3BlcnR5LCB0aGlzLnJpZ2h0UGxhdGUud2VpZ2h0UHJvcGVydHkgXSxcclxuICAgICAgKCBsZWZ0V2VpZ2h0LCByaWdodFdlaWdodCApID0+IHtcclxuXHJcbiAgICAgICAgLy8gY29tcHV0ZSB0aGUgd2VpZ2h0IGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgMiBwbGF0ZXNcclxuICAgICAgICBsZXQgd2VpZ2h0RGVsdGEgPSByaWdodFdlaWdodC5taW51cyggbGVmdFdlaWdodCApLmdldFZhbHVlKCk7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0cmFpbiB0byBtYXhXZWlnaHQgc28gdGhlIHNjYWxlIGJvdHRvbXMgb3V0XHJcbiAgICAgICAgaWYgKCB3ZWlnaHREZWx0YSA+IG9wdGlvbnMubWF4V2VpZ2h0ICkge1xyXG4gICAgICAgICAgd2VpZ2h0RGVsdGEgPSBvcHRpb25zLm1heFdlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIHdlaWdodERlbHRhIDwgLW9wdGlvbnMubWF4V2VpZ2h0ICkge1xyXG4gICAgICAgICAgd2VpZ2h0RGVsdGEgPSAtb3B0aW9ucy5tYXhXZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBhbmdsZSA9ICggd2VpZ2h0RGVsdGEgLyBvcHRpb25zLm1heFdlaWdodCApICogb3B0aW9ucy5tYXhBbmdsZTtcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBNYXRoLmFicyggYW5nbGUgKSA8PSBvcHRpb25zLm1heEFuZ2xlLCBgYW5nbGUgb3V0IG9mIHJhbmdlOiAke2FuZ2xlfWAgKTtcclxuICAgICAgICByZXR1cm4gYW5nbGU7XHJcbiAgICAgIH0sIHtcclxuICAgICAgICBpc1ZhbGlkVmFsdWU6IHZhbHVlID0+ICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyApLFxyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYW5nbGVQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bWJlcklPLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdBbmdsZSBvZiB0aGUgc2NhbGUgaW4gcmFkaWFucywgemVybyBpcyBiYWxhbmNlZCdcclxuICAgICAgfSApO1xyXG5cclxuICAgIC8vIE1vdmUgdGhlIHBsYXRlcyB3aGVuIHRoZSBhbmdsZSBjaGFuZ2VzLlxyXG4gICAgdGhpcy5hbmdsZVByb3BlcnR5LmxpbmsoIGFuZ2xlID0+IHtcclxuXHJcbiAgICAgIC8vIGhvaXN0IHJldXNhYmxlIHZhcnNcclxuICAgICAgbGV0IGR4ID0gMDtcclxuICAgICAgbGV0IGR5ID0gMDtcclxuXHJcbiAgICAgIC8vIG1vdmUgdGhlIHJpZ2h0IHBsYXRlXHJcbiAgICAgIGxldCByaWdodFBvc2l0aW9uID0gbnVsbDtcclxuICAgICAgY29uc3QgYWJzWEluc2V0ID0gTWF0aC5hYnMoIG9wdGlvbnMucGxhdGVYSW5zZXQgKTtcclxuICAgICAgaWYgKCBhbmdsZSA9PT0gMCApIHtcclxuICAgICAgICByaWdodFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoIHRoaXMucG9zaXRpb24ueCArICggdGhpcy5iZWFtV2lkdGggLyAyICkgLSBhYnNYSW5zZXQsXHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uLnkgLSBvcHRpb25zLnBsYXRlU3VwcG9ydEhlaWdodCApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGh5cG90ZW51c2UgPSAoIHRoaXMuYmVhbVdpZHRoIC8gMiApIC0gYWJzWEluc2V0O1xyXG4gICAgICAgIGR4ID0gTWF0aC5jb3MoIGFuZ2xlICkgKiBoeXBvdGVudXNlO1xyXG4gICAgICAgIGR5ID0gTWF0aC5zaW4oIGFuZ2xlICkgKiBoeXBvdGVudXNlO1xyXG4gICAgICAgIHJpZ2h0UG9zaXRpb24gPSBuZXcgVmVjdG9yMiggdGhpcy5wb3NpdGlvbi54ICsgZHgsIHRoaXMucG9zaXRpb24ueSArIGR5IC0gb3B0aW9ucy5wbGF0ZVN1cHBvcnRIZWlnaHQgKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnJpZ2h0UGxhdGUucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSA9IHJpZ2h0UG9zaXRpb247XHJcblxyXG4gICAgICAvLyBtb3ZlIHRoZSBsZWZ0IHBsYXRlLCByZWxhdGl2ZSB0byB0aGUgcmlnaHQgcGxhdGVcclxuICAgICAgZHggPSByaWdodFBvc2l0aW9uLnggLSB0aGlzLnBvc2l0aW9uLng7XHJcbiAgICAgIGR5ID0gKCByaWdodFBvc2l0aW9uLnkgKyBvcHRpb25zLnBsYXRlU3VwcG9ydEhlaWdodCApIC0gdGhpcy5wb3NpdGlvbi55O1xyXG4gICAgICB0aGlzLmxlZnRQbGF0ZS5wb3NpdGlvblByb3BlcnR5LnZhbHVlID1cclxuICAgICAgICBuZXcgVmVjdG9yMiggdGhpcy5wb3NpdGlvbi54IC0gZHgsIHRoaXMucG9zaXRpb24ueSAtIGR5IC0gb3B0aW9ucy5wbGF0ZVN1cHBvcnRIZWlnaHQgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnJlbGF0aW9uYWxPcGVyYXRvclByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB0aGlzLmFuZ2xlUHJvcGVydHkgXSxcclxuICAgICAgICBhbmdsZSA9PiAoIGFuZ2xlID09PSAwICkgPyBNYXRoU3ltYm9scy5FUVVBTF9UTyA6XHJcbiAgICAgICAgICAgICAgICAgKCBhbmdsZSA+IDAgKSA/IE1hdGhTeW1ib2xzLkdSRUFURVJfVEhBTiA6XHJcbiAgICAgICAgICAgICAgICAgTWF0aFN5bWJvbHMuTEVTU19USEFOLFxyXG4gICAgICB7XHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdyZWxhdGlvbmFsT3BlcmF0b3JQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IFN0cmluZ0lPLFxyXG4gICAgICAgIHZhbGlkVmFsdWVzOiBSZWxhdGlvbmFsT3BlcmF0b3JWYWx1ZXMsXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3RoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgb2YgdGhlIGJhbGFuY2Ugc2NhbGUnXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLm51bWJlck9mVGVybXNQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgdGhpcy5sZWZ0UGxhdGUubnVtYmVyT2ZUZXJtc1Byb3BlcnR5LCB0aGlzLnJpZ2h0UGxhdGUubnVtYmVyT2ZUZXJtc1Byb3BlcnR5IF0sXHJcbiAgICAgICggbGVmdE51bWJlck9mVGVybXMsIHJpZ2h0TnVtYmVyT2ZUZXJtcyApID0+ICggbGVmdE51bWJlck9mVGVybXMgKyByaWdodE51bWJlck9mVGVybXMgKSwge1xyXG4gICAgICAgIGlzVmFsaWRWYWx1ZTogdmFsdWUgPT4gTnVtYmVyLmlzSW50ZWdlciggdmFsdWUgKSxcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ251bWJlck9mVGVybXNQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bWJlcklPLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdOdW1iZXIgb2YgdGVybXMgb24gdGhlIHNjYWxlJ1xyXG4gICAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3JnYW5pemVzIHRlcm1zIG9uIHRoZSBzY2FsZSwgZ3JvdXBpbmcgbGlrZSB0ZXJtcyB0b2dldGhlci5cclxuICAgKi9cclxuICBwdWJsaWMgb3JnYW5pemUoKTogdm9pZCB7XHJcbiAgICB0aGlzLmxlZnRQbGF0ZS5vcmdhbml6ZSgpO1xyXG4gICAgdGhpcy5yaWdodFBsYXRlLm9yZ2FuaXplKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhcnMgdGhlIHNjYWxlLCBieSBkaXNwb3Npbmcgb2YgYWxsIHRlcm1zIHRoYXQgYXJlIG9uIHRoZSBzY2FsZS5cclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XHJcbiAgICBjb25zdCB0ZXJtQ3JlYXRvcnMgPSB0aGlzLmxlZnRUZXJtQ3JlYXRvcnMuY29uY2F0KCB0aGlzLnJpZ2h0VGVybUNyZWF0b3JzICk7XHJcbiAgICB0ZXJtQ3JlYXRvcnMuZm9yRWFjaCggdGVybUNyZWF0b3IgPT4gdGVybUNyZWF0b3IuZGlzcG9zZVRlcm1zT25QbGF0ZSgpICk7XHJcbiAgfVxyXG59XHJcblxyXG5lcXVhbGl0eUV4cGxvcmVyLnJlZ2lzdGVyKCAnQmFsYW5jZVNjYWxlJywgQmFsYW5jZVNjYWxlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUVwRSxPQUFPQyxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxTQUFTLElBQUlDLGNBQWMsUUFBUSx1Q0FBdUM7QUFHakYsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsS0FBSyxNQUF3QixZQUFZO0FBRWhELFNBQTZCQyx3QkFBd0IsUUFBUSx5QkFBeUI7QUFDdEYsT0FBT0MsV0FBVyxNQUFNLDRDQUE0QztBQUNwRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBd0I5RCxlQUFlLE1BQU1DLFlBQVksQ0FBQztFQVFoQzs7RUFHQTtFQUNBO0VBR0E7RUFNT0MsV0FBV0EsQ0FBRUMsZ0JBQStCLEVBQUVDLGlCQUFnQyxFQUFFQyxlQUFxQyxFQUFHO0lBRTdILE1BQU1DLE9BQU8sR0FBR2IsU0FBUyxDQUFtQyxDQUFDLENBQUU7TUFFN0RjLFFBQVEsRUFBRWYsT0FBTyxDQUFDZ0IsSUFBSTtNQUFFO01BQ3hCQyxTQUFTLEVBQUUsR0FBRztNQUFFO01BQ2hCQyxRQUFRLEVBQUVuQixLQUFLLENBQUNvQixTQUFTLENBQUUsRUFBRyxDQUFDO01BQUU7TUFDakNDLFNBQVMsRUFBRSxFQUFFO01BQUU7O01BRWZDLGtCQUFrQixFQUFFLEVB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