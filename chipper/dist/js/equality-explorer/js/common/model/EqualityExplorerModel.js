// Copyright 2017-2022, University of Colorado Boulder

/**
 * Base class for models in the Equality Explorer sim, except for SolveItModel (the game).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerScene from './EqualityExplorerScene.js';
export default class EqualityExplorerModel extends PhetioObject {
  // scenes, in the order that they appear from left-to-right as radio buttons

  // the selected scene

  constructor(scenes, tandem) {
    super({
      tandem: tandem,
      phetioState: false
    });
    this.scenes = scenes;

    // Instrument sceneProperty only if there is more than 1 scene, and sceneProperty therefore can be changed.
    const scenePropertyTandem = scenes.length > 1 ? tandem.createTandem('sceneProperty') : Tandem.OPT_OUT;
    this.sceneProperty = new Property(scenes[0], {
      validValues: scenes,
      tandem: scenePropertyTandem,
      phetioValueType: EqualityExplorerScene.EqualityExplorerSceneIO
    });

    // When the scene changes, dispose of any terms that are being dragged or animating.
    // See https://github.com/phetsims/equality-explorer/issues/73
    if (scenes.length > 1) {
      this.sceneProperty.lazyLink(scene => scene.disposeTermsNotOnScale());
    }
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Resets the model.
   */
  reset() {
    this.scenes.forEach(scene => scene.reset());
    this.sceneProperty.reset();
  }

  /**
   * Updates time-dependent parts of the model.
   * @param dt - time since the previous step, in seconds
   */
  step(dt) {
    // step the selected scene
    this.sceneProperty.value.step(dt);
  }

  /**
   * When the model is deactivated (by switching screens), delete all terms that are not on the scale.
   */
  deactivate() {
    this.scenes.forEach(scene => scene.disposeTermsNotOnScale());
  }
}
equalityExplorer.register('EqualityExplorerModel', EqualityExplorerModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlBoZXRpb09iamVjdCIsIlRhbmRlbSIsImVxdWFsaXR5RXhwbG9yZXIiLCJFcXVhbGl0eUV4cGxvcmVyU2NlbmUiLCJFcXVhbGl0eUV4cGxvcmVyTW9kZWwiLCJjb25zdHJ1Y3RvciIsInNjZW5lcyIsInRhbmRlbSIsInBoZXRpb1N0YXRlIiwic2NlbmVQcm9wZXJ0eVRhbmRlbSIsImxlbmd0aCIsImNyZWF0ZVRhbmRlbSIsIk9QVF9PVVQiLCJzY2VuZVByb3BlcnR5IiwidmFsaWRWYWx1ZXMiLCJwaGV0aW9WYWx1ZVR5cGUiLCJFcXVhbGl0eUV4cGxvcmVyU2NlbmVJTyIsImxhenlMaW5rIiwic2NlbmUiLCJkaXNwb3NlVGVybXNOb3RPblNjYWxlIiwiZGlzcG9zZSIsImFzc2VydCIsInJlc2V0IiwiZm9yRWFjaCIsInN0ZXAiLCJkdCIsInZhbHVlIiwiZGVhY3RpdmF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1YWxpdHlFeHBsb3Jlck1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIG1vZGVscyBpbiB0aGUgRXF1YWxpdHkgRXhwbG9yZXIgc2ltLCBleGNlcHQgZm9yIFNvbHZlSXRNb2RlbCAodGhlIGdhbWUpLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRNb2RlbCBmcm9tICcuLi8uLi8uLi8uLi9qb2lzdC9qcy9UTW9kZWwuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZXF1YWxpdHlFeHBsb3JlciBmcm9tICcuLi8uLi9lcXVhbGl0eUV4cGxvcmVyLmpzJztcclxuaW1wb3J0IEVxdWFsaXR5RXhwbG9yZXJTY2VuZSBmcm9tICcuL0VxdWFsaXR5RXhwbG9yZXJTY2VuZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcXVhbGl0eUV4cGxvcmVyTW9kZWwgZXh0ZW5kcyBQaGV0aW9PYmplY3QgaW1wbGVtZW50cyBUTW9kZWwge1xyXG5cclxuICAvLyBzY2VuZXMsIGluIHRoZSBvcmRlciB0aGF0IHRoZXkgYXBwZWFyIGZyb20gbGVmdC10by1yaWdodCBhcyByYWRpbyBidXR0b25zXHJcbiAgcHVibGljIHJlYWRvbmx5IHNjZW5lczogRXF1YWxpdHlFeHBsb3JlclNjZW5lW107XHJcblxyXG4gIC8vIHRoZSBzZWxlY3RlZCBzY2VuZVxyXG4gIHB1YmxpYyByZWFkb25seSBzY2VuZVByb3BlcnR5OiBQcm9wZXJ0eTxFcXVhbGl0eUV4cGxvcmVyU2NlbmU+O1xyXG5cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoIHNjZW5lczogRXF1YWxpdHlFeHBsb3JlclNjZW5lW10sIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBwaGV0aW9TdGF0ZTogZmFsc2VcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnNjZW5lcyA9IHNjZW5lcztcclxuXHJcbiAgICAvLyBJbnN0cnVtZW50IHNjZW5lUHJvcGVydHkgb25seSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gMSBzY2VuZSwgYW5kIHNjZW5lUHJvcGVydHkgdGhlcmVmb3JlIGNhbiBiZSBjaGFuZ2VkLlxyXG4gICAgY29uc3Qgc2NlbmVQcm9wZXJ0eVRhbmRlbSA9ICggc2NlbmVzLmxlbmd0aCA+IDEgKSA/IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzY2VuZVByb3BlcnR5JyApIDogVGFuZGVtLk9QVF9PVVQ7XHJcblxyXG4gICAgdGhpcy5zY2VuZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBzY2VuZXNbIDAgXSwge1xyXG4gICAgICB2YWxpZFZhbHVlczogc2NlbmVzLFxyXG4gICAgICB0YW5kZW06IHNjZW5lUHJvcGVydHlUYW5kZW0sXHJcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogRXF1YWxpdHlFeHBsb3JlclNjZW5lLkVxdWFsaXR5RXhwbG9yZXJTY2VuZUlPXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gV2hlbiB0aGUgc2NlbmUgY2hhbmdlcywgZGlzcG9zZSBvZiBhbnkgdGVybXMgdGhhdCBhcmUgYmVpbmcgZHJhZ2dlZCBvciBhbmltYXRpbmcuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2VxdWFsaXR5LWV4cGxvcmVyL2lzc3Vlcy83M1xyXG4gICAgaWYgKCBzY2VuZXMubGVuZ3RoID4gMSApIHtcclxuICAgICAgdGhpcy5zY2VuZVByb3BlcnR5LmxhenlMaW5rKCBzY2VuZSA9PiBzY2VuZS5kaXNwb3NlVGVybXNOb3RPblNjYWxlKCkgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldHMgdGhlIG1vZGVsLlxyXG4gICAqL1xyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2NlbmVzLmZvckVhY2goIHNjZW5lID0+IHNjZW5lLnJlc2V0KCkgKTtcclxuICAgIHRoaXMuc2NlbmVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyB0aW1lLWRlcGVuZGVudCBwYXJ0cyBvZiB0aGUgbW9kZWwuXHJcbiAgICogQHBhcmFtIGR0IC0gdGltZSBzaW5jZSB0aGUgcHJldmlvdXMgc3RlcCwgaW4gc2Vjb25kc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGVwKCBkdDogbnVtYmVyICk6IHZvaWQge1xyXG5cclxuICAgIC8vIHN0ZXAgdGhlIHNlbGVjdGVkIHNjZW5lXHJcbiAgICB0aGlzLnNjZW5lUHJvcGVydHkudmFsdWUuc3RlcCggZHQgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZW4gdGhlIG1vZGVsIGlzIGRlYWN0aXZhdGVkIChieSBzd2l0Y2hpbmcgc2NyZWVucyksIGRlbGV0ZSBhbGwgdGVybXMgdGhhdCBhcmUgbm90IG9uIHRoZSBzY2FsZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGVhY3RpdmF0ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2NlbmVzLmZvckVhY2goIHNjZW5lID0+IHNjZW5lLmRpc3Bvc2VUZXJtc05vdE9uU2NhbGUoKSApO1xyXG4gIH1cclxufVxyXG5cclxuZXF1YWxpdHlFeHBsb3Jlci5yZWdpc3RlciggJ0VxdWFsaXR5RXhwbG9yZXJNb2RlbCcsIEVxdWFsaXR5RXhwbG9yZXJNb2RlbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBRXRELE9BQU9DLFlBQVksTUFBTSx1Q0FBdUM7QUFDaEUsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MscUJBQXFCLE1BQU0sNEJBQTRCO0FBRTlELGVBQWUsTUFBTUMscUJBQXFCLFNBQVNKLFlBQVksQ0FBbUI7RUFFaEY7O0VBR0E7O0VBR1VLLFdBQVdBLENBQUVDLE1BQStCLEVBQUVDLE1BQWMsRUFBRztJQUV2RSxLQUFLLENBQUU7TUFDTEEsTUFBTSxFQUFFQSxNQUFNO01BQ2RDLFdBQVcsRUFBRTtJQUNmLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0YsTUFBTSxHQUFHQSxNQUFNOztJQUVwQjtJQUNBLE1BQU1HLG1CQUFtQixHQUFLSCxNQUFNLENBQUNJLE1BQU0sR0FBRyxDQUFDLEdBQUtILE1BQU0sQ0FBQ0ksWUFBWSxDQUFFLGVBQWdCLENBQUMsR0FBR1YsTUFBTSxDQUFDVyxPQUFPO0lBRTNHLElBQUksQ0FBQ0MsYUFBYSxHQUFHLElBQUlkLFFBQVEsQ0FBRU8sTUFBTSxDQUFFLENBQUMsQ0FBRSxFQUFFO01BQzlDUSxXQUFXLEVBQUVSLE1BQU07TUFDbkJDLE1BQU0sRUFBRUUsbUJBQW1CO01BQzNCTSxlQUFlLEVBQUVaLHFCQUFxQixDQUFDYTtJQUN6QyxDQUFFLENBQUM7O0lBRUg7SUFDQTtJQUNBLElBQUtWLE1BQU0sQ0FBQ0ksTUFBTSxHQUFHLENBQUMsRUFBRztNQUN2QixJQUFJLENBQUNHLGFBQWEsQ0FBQ0ksUUFBUSxDQUFFQyxLQUFLLElBQUlBLEtBQUssQ0FBQ0Msc0JBQXNCLENBQUMsQ0FBRSxDQUFDO0lBQ3hFO0VBQ0Y7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NFLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNoQixNQUFNLENBQUNpQixPQUFPLENBQUVMLEtBQUssSUFBSUEsS0FBSyxDQUFDSSxLQUFLLENBQUMsQ0FBRSxDQUFDO0lBQzdDLElBQUksQ0FBQ1QsYUFBYSxDQUFDUyxLQUFLLENBQUMsQ0FBQztFQUM1Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTRSxJQUFJQSxDQUFFQyxFQUFVLEVBQVM7SUFFOUI7SUFDQSxJQUFJLENBQUNaLGFBQWEsQ0FBQ2EsS0FBSyxDQUFDRixJQUFJLENBQUVDLEVBQUcsQ0FBQztFQUNyQzs7RUFFQTtBQUNGO0FBQ0E7RUFDU0UsVUFBVUEsQ0FBQSxFQUFTO0lBQ3hCLElBQUksQ0FBQ3JCLE1BQU0sQ0FBQ2lCLE9BQU8sQ0FBRUwsS0FBSyxJQUFJQSxLQUFLLENBQUNDLHNCQUFzQixDQUFDLENBQUUsQ0FBQztFQUNoRTtBQUNGO0FBRUFqQixnQkFBZ0IsQ0FBQzBCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRXhCLHFCQUFzQixDQUFDIn0=