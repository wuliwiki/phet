// Copyright 2017-2022, University of Colorado Boulder

/**
 * Abstract base type for a scene in Equality Explorer sim.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Node } from '../../../../scenery/js/imports.js';
import equalityExplorer from '../../equalityExplorer.js';
import EqualityExplorerConstants from '../EqualityExplorerConstants.js';
import EqualityExplorerQueryParameters from '../EqualityExplorerQueryParameters.js';
import BalanceScale from './BalanceScale.js';
import SnapshotsCollection from './SnapshotsCollection.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
// constants
const DEFAULT_SCALE_POSITION = new Vector2(355, 427);
const DRAG_BOUNDS_X_MARGIN = 20;
const DRAG_BOUNDS_Y_MARGIN = 10;
const DRAG_BOUNDS_MIN_Y = 100;
const DRAG_BOUNDS_MAX_Y = EqualityExplorerConstants.SCREEN_VIEW_LAYOUT_BOUNDS.maxY - DRAG_BOUNDS_Y_MARGIN;
export default class EqualityExplorerScene extends PhetioObject {
  // creators for terms on left and right sides of scale

  // for operations that need to be performed on all term creators

  // drag bounds for the plates

  // collection of snapshots, for saving/restoring the state of a scene

  // Locks equivalent terms, null if this feature is not supported.
  // See https://github.com/phetsims/equality-explorer/blob/master/doc/lock-scenarios.md for scenarios that
  // describe how this feature works with drag listeners.
  /**
   * @param createLeftTermCreators - in order that they appear in left toolbox and left side of equations
   * @param createRightTermCreators - in order that they appear in right toolbox and right side of equations
   * @param [providedOptions]
   * @abstract
   */
  constructor(createLeftTermCreators, createRightTermCreators, providedOptions) {
    const options = optionize()({
      // SelfOptions
      scalePosition: DEFAULT_SCALE_POSITION,
      hasNegativeTermsInToolbox: true,
      lockable: true,
      icon: null,
      maxWeight: 30,
      gridRows: EqualityExplorerQueryParameters.rows,
      gridColumns: EqualityExplorerQueryParameters.columns,
      numberOfSnapshots: 5,
      iconSize: null,
      variables: null,
      // PhetioObjectOptions
      phetioType: EqualityExplorerScene.EqualityExplorerSceneIO
    }, providedOptions);
    assert && assert(options.variables === null || options.variables.length > 0);
    super(options);
    phet.log && phet.log(`scene: ${this.tandem.name}, maxWeight=${options.maxWeight}`);
    this.lockedProperty = null;
    if (options.lockable) {
      this.lockedProperty = new BooleanProperty(EqualityExplorerQueryParameters.locked, {
        tandem: options.tandem.createTandem('lockedProperty')
      });
    }
    this.hasNegativeTermsInToolbox = options.hasNegativeTermsInToolbox;
    this._icon = options.icon;
    this.variables = options.variables;
    const termCreatorsTandem = options.tandem.createTandem('termCreators');
    this.leftTermCreators = createLeftTermCreators(this.lockedProperty, termCreatorsTandem.createTandem('leftTermCreators'));
    assert && validateTermCreators(this.leftTermCreators);
    this.rightTermCreators = createRightTermCreators(this.lockedProperty, termCreatorsTandem.createTandem('rightTermCreators'));
    assert && validateTermCreators(this.rightTermCreators);
    this.allTermCreators = this.leftTermCreators.concat(this.rightTermCreators);

    // Associate each term creator with a 'like term' creator on the opposite side of the scale.
    assert && assert(this.leftTermCreators.length === this.rightTermCreators.length, 'the same number of term creators are required on both sides of the scale');
    for (let i = 0; i < this.leftTermCreators.length; i++) {
      assert && assert(this.leftTermCreators[i].isLikeTermCreator(this.rightTermCreators[i]), 'like term creators must have the same indices on both sides of the scale');
      this.leftTermCreators[i].equivalentTermCreator = this.rightTermCreators[i];
      this.rightTermCreators[i].equivalentTermCreator = this.leftTermCreators[i];
    }
    this.scale = new BalanceScale(this.leftTermCreators, this.rightTermCreators, {
      position: options.scalePosition,
      gridRows: options.gridRows,
      gridColumns: options.gridColumns,
      iconSize: options.iconSize,
      maxWeight: options.maxWeight,
      tandem: options.tandem.createTandem('balanceScale')
    });
    this.leftDragBounds = new Bounds2(DRAG_BOUNDS_X_MARGIN, DRAG_BOUNDS_MIN_Y, this.scale.position.x - DRAG_BOUNDS_X_MARGIN, DRAG_BOUNDS_MAX_Y);
    this.leftTermCreators.forEach(termCreator => {
      termCreator.dragBounds = this.leftDragBounds;
    });
    this.rightDragBounds = new Bounds2(this.scale.position.x + DRAG_BOUNDS_X_MARGIN, DRAG_BOUNDS_MIN_Y, this.scale.position.x + DRAG_BOUNDS_X_MARGIN + this.leftDragBounds.width, DRAG_BOUNDS_MAX_Y);
    this.rightTermCreators.forEach(termCreator => {
      termCreator.dragBounds = this.rightDragBounds;
    });
    this.snapshotsCollection = new SnapshotsCollection({
      numberOfSnapshots: options.numberOfSnapshots,
      tandem: options.tandem.createTandem('snapshotsCollection')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Gets the icon used to represent this scene.
   * Since this icon is used in multiple places in the scenery DAG, it must be wrapped.
   */
  get icon() {
    const icon = this._icon;
    assert && assert(icon);
    return new Node({
      children: [icon]
    });
  }
  reset() {
    this.lockedProperty && this.lockedProperty.reset();

    // dispose all terms
    this.disposeAllTerms();

    // clear all snapshots
    this.snapshotsCollection.reset();

    // reset all variables
    if (this.variables) {
      this.variables.forEach(variable => variable.reset());
    }
  }

  /**
   * Disposes of all terms that are managed by term creators.
   */
  disposeAllTerms() {
    this.allTermCreators.forEach(termCreator => termCreator.disposeAllTerms());
  }

  /**
   * Disposes of all terms that are managed by term creators and are not on the scale.
   */
  disposeTermsNotOnScale() {
    this.allTermCreators.forEach(termCreator => termCreator.disposeTermsNotOnPlate());
  }

  /**
   * Updates time-dependent parts of the scene.
   * @param dt - time since the previous step, in seconds
   */
  step(dt) {
    // step all terms
    this.allTermCreators.forEach(termCreator => termCreator.step(dt));
  }

  /**
   * EqualityExplorerSceneIO handles PhET-iO serialization of EqualityExplorerScene.
   * It implements 'Reference type serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static EqualityExplorerSceneIO = new IOType('EqualityExplorerSceneIO', {
    valueType: EqualityExplorerScene,
    supertype: ReferenceIO(IOType.ObjectIO)
  });
}

/**
 * Verifies that none of the specified term creators are 'like term' creators.
 * Like term creators are not allowed on the same side of the equation.
 * For example, there should not be 2 creators for constants, or 2 creators for 'x'.
 */
function validateTermCreators(termCreators) {
  for (let i = 0; i < termCreators.length; i++) {
    for (let j = 0; j < termCreators.length; j++) {
      // skip comparisons to self
      if (termCreators[i] !== termCreators[j]) {
        assert && assert(!termCreators[i].isLikeTermCreator(termCreators[j]), 'like term creators are not allowed on the same side of the equation');
      }
    }
  }
}
equalityExplorer.register('EqualityExplorerScene', EqualityExplorerScene);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJCb3VuZHMyIiwiVmVjdG9yMiIsIm9wdGlvbml6ZSIsIk5vZGUiLCJlcXVhbGl0eUV4cGxvcmVyIiwiRXF1YWxpdHlFeHBsb3JlckNvbnN0YW50cyIsIkVxdWFsaXR5RXhwbG9yZXJRdWVyeVBhcmFtZXRlcnMiLCJCYWxhbmNlU2NhbGUiLCJTbmFwc2hvdHNDb2xsZWN0aW9uIiwiSU9UeXBlIiwiUmVmZXJlbmNlSU8iLCJQaGV0aW9PYmplY3QiLCJERUZBVUxUX1NDQUxFX1BPU0lUSU9OIiwiRFJBR19CT1VORFNfWF9NQVJHSU4iLCJEUkFHX0JPVU5EU19ZX01BUkdJTiIsIkRSQUdfQk9VTkRTX01JTl9ZIiwiRFJBR19CT1VORFNfTUFYX1kiLCJTQ1JFRU5fVklFV19MQVlPVVRfQk9VTkRTIiwibWF4WSIsIkVxdWFsaXR5RXhwbG9yZXJTY2VuZSIsImNvbnN0cnVjdG9yIiwiY3JlYXRlTGVmdFRlcm1DcmVhdG9ycyIsImNyZWF0ZVJpZ2h0VGVybUNyZWF0b3JzIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInNjYWxlUG9zaXRpb24iLCJoYXNOZWdhdGl2ZVRlcm1zSW5Ub29sYm94IiwibG9ja2FibGUiLCJpY29uIiwibWF4V2VpZ2h0IiwiZ3JpZFJvd3MiLCJyb3dzIiwiZ3JpZENvbHVtbnMiLCJjb2x1bW5zIiwibnVtYmVyT2ZTbmFwc2hvdHMiLCJpY29uU2l6ZSIsInZhcmlhYmxlcyIsInBoZXRpb1R5cGUiLCJFcXVhbGl0eUV4cGxvcmVyU2NlbmVJTyIsImFzc2VydCIsImxlbmd0aCIsInBoZXQiLCJsb2ciLCJ0YW5kZW0iLCJuYW1lIiwibG9ja2VkUHJvcGVydHkiLCJsb2NrZWQiLCJjcmVhdGVUYW5kZW0iLCJfaWNvbiIsInRlcm1DcmVhdG9yc1RhbmRlbSIsImxlZnRUZXJtQ3JlYXRvcnMiLCJ2YWxpZGF0ZVRlcm1DcmVhdG9ycyIsInJpZ2h0VGVybUNyZWF0b3JzIiwiYWxsVGVybUNyZWF0b3JzIiwiY29uY2F0IiwiaSIsImlzTGlrZVRlcm1DcmVhdG9yIiwiZXF1aXZhbGVudFRlcm1DcmVhdG9yIiwic2NhbGUiLCJwb3NpdGlvbiIsImxlZnREcmFnQm91bmRzIiwieCIsImZvckVhY2giLCJ0ZXJtQ3JlYXRvciIsImRyYWdCb3VuZHMiLCJyaWdodERyYWdCb3VuZHMiLCJ3aWR0aCIsInNuYXBzaG90c0NvbGxlY3Rpb24iLCJkaXNwb3NlIiwiY2hpbGRyZW4iLCJyZXNldCIsImRpc3Bvc2VBbGxUZXJtcyIsInZhcmlhYmxlIiwiZGlzcG9zZVRlcm1zTm90T25TY2FsZSIsImRpc3Bvc2VUZXJtc05vdE9uUGxhdGUiLCJzdGVwIiwiZHQiLCJ2YWx1ZVR5cGUiLCJzdXBlcnR5cGUiLCJPYmplY3RJTyIsInRlcm1DcmVhdG9ycyIsImoiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVxdWFsaXR5RXhwbG9yZXJTY2VuZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBYnN0cmFjdCBiYXNlIHR5cGUgZm9yIGEgc2NlbmUgaW4gRXF1YWxpdHkgRXhwbG9yZXIgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGVxdWFsaXR5RXhwbG9yZXIgZnJvbSAnLi4vLi4vZXF1YWxpdHlFeHBsb3Jlci5qcyc7XHJcbmltcG9ydCBFcXVhbGl0eUV4cGxvcmVyQ29uc3RhbnRzIGZyb20gJy4uL0VxdWFsaXR5RXhwbG9yZXJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRXF1YWxpdHlFeHBsb3JlclF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi9FcXVhbGl0eUV4cGxvcmVyUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IEJhbGFuY2VTY2FsZSBmcm9tICcuL0JhbGFuY2VTY2FsZS5qcyc7XHJcbmltcG9ydCBTbmFwc2hvdHNDb2xsZWN0aW9uIGZyb20gJy4vU25hcHNob3RzQ29sbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBUZXJtQ3JlYXRvciBmcm9tICcuL1Rlcm1DcmVhdG9yLmpzJztcclxuaW1wb3J0IFZhcmlhYmxlIGZyb20gJy4vVmFyaWFibGUuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvUmVmZXJlbmNlSU8uanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0LCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUZBVUxUX1NDQUxFX1BPU0lUSU9OID0gbmV3IFZlY3RvcjIoIDM1NSwgNDI3ICk7XHJcbmNvbnN0IERSQUdfQk9VTkRTX1hfTUFSR0lOID0gMjA7XHJcbmNvbnN0IERSQUdfQk9VTkRTX1lfTUFSR0lOID0gMTA7XHJcbmNvbnN0IERSQUdfQk9VTkRTX01JTl9ZID0gMTAwO1xyXG5jb25zdCBEUkFHX0JPVU5EU19NQVhfWSA9IEVxdWFsaXR5RXhwbG9yZXJDb25zdGFudHMuU0NSRUVOX1ZJRVdfTEFZT1VUX0JPVU5EUy5tYXhZIC0gRFJBR19CT1VORFNfWV9NQVJHSU47XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNjYWxlUG9zaXRpb24/OiBWZWN0b3IyOyAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgaGFzTmVnYXRpdmVUZXJtc0luVG9vbGJveD86IGJvb2xlYW47IC8vIGlmIHRydWUsIHB1dCBuZWdhdGl2ZSB0ZXJtcyBpbiB0aGUgdG9vbGJveCwgZS5nLiAteFxyXG4gIGxvY2thYmxlPzogYm9vbGVhbjsgLy8gaXMgdGhlIGxvY2sgZmVhdHVyZSBzdXBwb3J0ZWQgZm9yIHRoaXMgc2NlbmU/XHJcbiAgaWNvbj86IE5vZGUgfCBudWxsOyAvLyBvcHRpb25hbCBpY29uIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBzY2VuZSBpbiB0aGUgc2NlbmUgY29udHJvbCAocmFkaW8gYnV0dG9ucylcclxuICBtYXhXZWlnaHQ/OiBudW1iZXI7IC8vIG1heGltdW0gd2VpZ2h0IGF0IHdoaWNoIGEgcGxhdGUgJ2JvdHRvbXMgb3V0JywgYW5kIHdvbid0IG1vdmUgd2hlbiBtb3JlIHdlaWdodCBpcyBhZGRlZCB0byBpdCxcclxuICBncmlkUm93cz86IG51bWJlcjsgLy8gcm93cyBpbiB0aGUgZ3JpZCBvbiB0aGUgc2NhbGVcclxuICBncmlkQ29sdW1ucz86IG51bWJlcjsgLy8gY29sdW1ucyBpbiB0aGUgZ3JpZCBvbiB0aGUgc2NhbGVcclxuICBudW1iZXJPZlNuYXBzaG90cz86IG51bWJlcjsgLy8gbnVtYmVyIG9mIHNuYXBzaG90cyBpbiB0aGUgU25hcHNob3RzIGFjY29yZGlvbiBib3hcclxuICBpY29uU2l6ZT86IERpbWVuc2lvbjIgfCBudWxsOyAvLyBzaXplIG9mIHRlcm0gaWNvbnMgb24gdGhlIHNjYWxlLCBjb21wdXRlZCBpZiBudWxsXHJcbiAgdmFyaWFibGVzPzogVmFyaWFibGVbXSB8IG51bGw7IC8vIHZhcmlhYmxlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHNjZW5lXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFcXVhbGl0eUV4cGxvcmVyU2NlbmVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxudHlwZSBDcmVhdGVUZXJtQ3JlYXRvcnNGdW5jdGlvbiA9ICggbG9ja2VkUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+IHwgbnVsbCwgdGFuZGVtOiBUYW5kZW0gKSA9PiBUZXJtQ3JlYXRvcltdO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgRXF1YWxpdHlFeHBsb3JlclNjZW5lIGV4dGVuZHMgUGhldGlvT2JqZWN0IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc05lZ2F0aXZlVGVybXNJblRvb2xib3g6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfaWNvbjogTm9kZSB8IG51bGw7XHJcbiAgcHVibGljIHJlYWRvbmx5IHZhcmlhYmxlczogVmFyaWFibGVbXSB8IG51bGw7XHJcblxyXG4gIC8vIGNyZWF0b3JzIGZvciB0ZXJtcyBvbiBsZWZ0IGFuZCByaWdodCBzaWRlcyBvZiBzY2FsZVxyXG4gIHB1YmxpYyByZWFkb25seSBsZWZ0VGVybUNyZWF0b3JzOiBUZXJtQ3JlYXRvcltdO1xyXG4gIHB1YmxpYyByZWFkb25seSByaWdodFRlcm1DcmVhdG9yczogVGVybUNyZWF0b3JbXTtcclxuXHJcbiAgLy8gZm9yIG9wZXJhdGlvbnMgdGhhdCBuZWVkIHRvIGJlIHBlcmZvcm1lZCBvbiBhbGwgdGVybSBjcmVhdG9yc1xyXG4gIHB1YmxpYyByZWFkb25seSBhbGxUZXJtQ3JlYXRvcnM6IFRlcm1DcmVhdG9yW107XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBzY2FsZTogQmFsYW5jZVNjYWxlO1xyXG5cclxuICAvLyBkcmFnIGJvdW5kcyBmb3IgdGhlIHBsYXRlc1xyXG4gIHB1YmxpYyByZWFkb25seSBsZWZ0RHJhZ0JvdW5kczogQm91bmRzMjtcclxuICBwdWJsaWMgcmVhZG9ubHkgcmlnaHREcmFnQm91bmRzOiBCb3VuZHMyO1xyXG5cclxuICAvLyBjb2xsZWN0aW9uIG9mIHNuYXBzaG90cywgZm9yIHNhdmluZy9yZXN0b3JpbmcgdGhlIHN0YXRlIG9mIGEgc2NlbmVcclxuICBwdWJsaWMgcmVhZG9ubHkgc25hcHNob3RzQ29sbGVjdGlvbjogU25hcHNob3RzQ29sbGVjdGlvbjtcclxuXHJcbiAgLy8gTG9ja3MgZXF1aXZhbGVudCB0ZXJtcywgbnVsbCBpZiB0aGlzIGZlYXR1cmUgaXMgbm90IHN1cHBvcnRlZC5cclxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2VxdWFsaXR5LWV4cGxvcmVyL2Jsb2IvbWFzdGVyL2RvYy9sb2NrLXNjZW5hcmlvcy5tZCBmb3Igc2NlbmFyaW9zIHRoYXRcclxuICAvLyBkZXNjcmliZSBob3cgdGhpcyBmZWF0dXJlIHdvcmtzIHdpdGggZHJhZyBsaXN0ZW5lcnMuXHJcbiAgcHVibGljIHJlYWRvbmx5IGxvY2tlZFByb3BlcnR5PzogUHJvcGVydHk8Ym9vbGVhbj4gfCBudWxsO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gY3JlYXRlTGVmdFRlcm1DcmVhdG9ycyAtIGluIG9yZGVyIHRoYXQgdGhleSBhcHBlYXIgaW4gbGVmdCB0b29sYm94IGFuZCBsZWZ0IHNpZGUgb2YgZXF1YXRpb25zXHJcbiAgICogQHBhcmFtIGNyZWF0ZVJpZ2h0VGVybUNyZWF0b3JzIC0gaW4gb3JkZXIgdGhhdCB0aGV5IGFwcGVhciBpbiByaWdodCB0b29sYm94IGFuZCByaWdodCBzaWRlIG9mIGVxdWF0aW9uc1xyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqIEBhYnN0cmFjdFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvciggY3JlYXRlTGVmdFRlcm1DcmVhdG9yczogQ3JlYXRlVGVybUNyZWF0b3JzRnVuY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVSaWdodFRlcm1DcmVhdG9yczogQ3JlYXRlVGVybUNyZWF0b3JzRnVuY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEVxdWFsaXR5RXhwbG9yZXJTY2VuZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxFcXVhbGl0eUV4cGxvcmVyU2NlbmVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGhldGlvT2JqZWN0T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgc2NhbGVQb3NpdGlvbjogREVGQVVMVF9TQ0FMRV9QT1NJVElPTixcclxuICAgICAgaGFzTmVnYXRpdmVUZXJtc0luVG9vbGJveDogdHJ1ZSxcclxuICAgICAgbG9ja2FibGU6IHRydWUsXHJcbiAgICAgIGljb246IG51bGwsXHJcbiAgICAgIG1heFdlaWdodDogMzAsXHJcbiAgICAgIGdyaWRSb3dzOiBFcXVhbGl0eUV4cGxvcmVyUXVlcnlQYXJhbWV0ZXJzLnJvd3MsXHJcbiAgICAgIGdyaWRDb2x1bW5zOiBFcXVhbGl0eUV4cGxvcmVyUXVlcnlQYXJhbWV0ZXJzLmNvbHVtbnMsXHJcbiAgICAgIG51bWJlck9mU25hcHNob3RzOiA1LFxyXG4gICAgICBpY29uU2l6ZTogbnVsbCxcclxuICAgICAgdmFyaWFibGVzOiBudWxsLFxyXG5cclxuICAgICAgLy8gUGhldGlvT2JqZWN0T3B0aW9uc1xyXG4gICAgICBwaGV0aW9UeXBlOiBFcXVhbGl0eUV4cGxvcmVyU2NlbmUuRXF1YWxpdHlFeHBsb3JlclNjZW5lSU9cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMudmFyaWFibGVzID09PSBudWxsIHx8IG9wdGlvbnMudmFyaWFibGVzLmxlbmd0aCA+IDAgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHBoZXQubG9nICYmIHBoZXQubG9nKCBgc2NlbmU6ICR7dGhpcy50YW5kZW0ubmFtZX0sIG1heFdlaWdodD0ke29wdGlvbnMubWF4V2VpZ2h0fWAgKTtcclxuXHJcbiAgICB0aGlzLmxvY2tlZFByb3BlcnR5ID0gbnVsbDtcclxuICAgIGlmICggb3B0aW9ucy5sb2NrYWJsZSApIHtcclxuICAgICAgdGhpcy5sb2NrZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIEVxdWFsaXR5RXhwbG9yZXJRdWVyeVBhcmFtZXRlcnMubG9ja2VkLCB7XHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdsb2NrZWRQcm9wZXJ0eScgKVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5oYXNOZWdhdGl2ZVRlcm1zSW5Ub29sYm94ID0gb3B0aW9ucy5oYXNOZWdhdGl2ZVRlcm1zSW5Ub29sYm94O1xyXG4gICAgdGhpcy5faWNvbiA9IG9wdGlvbnMuaWNvbjtcclxuICAgIHRoaXMudmFyaWFibGVzID0gb3B0aW9ucy52YXJpYWJsZXM7XHJcblxyXG4gICAgY29uc3QgdGVybUNyZWF0b3JzVGFuZGVtID0gb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndGVybUNyZWF0b3JzJyApO1xyXG5cclxuICAgIHRoaXMubGVmdFRlcm1DcmVhdG9ycyA9IGNyZWF0ZUxlZnRUZXJtQ3JlYXRvcnMoIHRoaXMubG9ja2VkUHJvcGVydHksIHRlcm1DcmVhdG9yc1RhbmRlbS5jcmVhdGVUYW5kZW0oICdsZWZ0VGVybUNyZWF0b3JzJyApICk7XHJcbiAgICBhc3NlcnQgJiYgdmFsaWRhdGVUZXJtQ3JlYXRvcnMoIHRoaXMubGVmdFRlcm1DcmVhdG9ycyApO1xyXG5cclxuICAgIHRoaXMucmlnaHRUZXJtQ3JlYXRvcnMgPSBjcmVhdGVSaWdodFRlcm1DcmVhdG9ycyggdGhpcy5sb2NrZWRQcm9wZXJ0eSwgdGVybUNyZWF0b3JzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3JpZ2h0VGVybUNyZWF0b3JzJyApICk7XHJcbiAgICBhc3NlcnQgJiYgdmFsaWRhdGVUZXJtQ3JlYXRvcnMoIHRoaXMucmlnaHRUZXJtQ3JlYXRvcnMgKTtcclxuXHJcbiAgICB0aGlzLmFsbFRlcm1DcmVhdG9ycyA9IHRoaXMubGVmdFRlcm1DcmVhdG9ycy5jb25jYXQoIHRoaXMucmlnaHRUZXJtQ3JlYXRvcnMgKTtcclxuXHJcbiAgICAvLyBBc3NvY2lhdGUgZWFjaCB0ZXJtIGNyZWF0b3Igd2l0aCBhICdsaWtlIHRlcm0nIGNyZWF0b3Igb24gdGhlIG9wcG9zaXRlIHNpZGUgb2YgdGhlIHNjYWxlLlxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5sZWZ0VGVybUNyZWF0b3JzLmxlbmd0aCA9PT0gdGhpcy5yaWdodFRlcm1DcmVhdG9ycy5sZW5ndGgsXHJcbiAgICAgICd0aGUgc2FtZSBudW1iZXIgb2YgdGVybSBjcmVhdG9ycyBhcmUgcmVxdWlyZWQgb24gYm90aCBzaWRlcyBvZiB0aGUgc2NhbGUnICk7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmxlZnRUZXJtQ3JlYXRvcnMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMubGVmdFRlcm1DcmVhdG9yc1sgaSBdLmlzTGlrZVRlcm1DcmVhdG9yKCB0aGlzLnJpZ2h0VGVybUNyZWF0b3JzWyBpIF0gKSxcclxuICAgICAgICAnbGlrZSB0ZXJtIGNyZWF0b3JzIG11c3QgaGF2ZSB0aGUgc2FtZSBpbmRpY2VzIG9uIGJvdGggc2lkZXMgb2YgdGhlIHNjYWxlJyApO1xyXG4gICAgICB0aGlzLmxlZnRUZXJtQ3JlYXRvcnNbIGkgXS5lcXVpdmFsZW50VGVybUNyZWF0b3IgPSB0aGlzLnJpZ2h0VGVybUNyZWF0b3JzWyBpIF07XHJcbiAgICAgIHRoaXMucmlnaHRUZXJtQ3JlYXRvcnNbIGkgXS5lcXVpdmFsZW50VGVybUNyZWF0b3IgPSB0aGlzLmxlZnRUZXJtQ3JlYXRvcnNbIGkgXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNjYWxlID0gbmV3IEJhbGFuY2VTY2FsZSggdGhpcy5sZWZ0VGVybUNyZWF0b3JzLCB0aGlzLnJpZ2h0VGVybUNyZWF0b3JzLCB7XHJcbiAgICAgIHBvc2l0aW9uOiBvcHRpb25zLnNjYWxlUG9zaXRpb24sXHJcbiAgICAgIGdyaWRSb3dzOiBvcHRpb25zLmdyaWRSb3dzLFxyXG4gICAgICBncmlkQ29sdW1uczogb3B0aW9ucy5ncmlkQ29sdW1ucyxcclxuICAgICAgaWNvblNpemU6IG9wdGlvbnMuaWNvblNpemUsXHJcbiAgICAgIG1heFdlaWdodDogb3B0aW9ucy5tYXhXZWlnaHQsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYmFsYW5jZVNjYWxlJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5sZWZ0RHJhZ0JvdW5kcyA9IG5ldyBCb3VuZHMyKCBEUkFHX0JPVU5EU19YX01BUkdJTiwgRFJBR19CT1VORFNfTUlOX1ksXHJcbiAgICAgIHRoaXMuc2NhbGUucG9zaXRpb24ueCAtIERSQUdfQk9VTkRTX1hfTUFSR0lOLCBEUkFHX0JPVU5EU19NQVhfWSApO1xyXG4gICAgdGhpcy5sZWZ0VGVybUNyZWF0b3JzLmZvckVhY2goIHRlcm1DcmVhdG9yID0+IHtcclxuICAgICAgdGVybUNyZWF0b3IuZHJhZ0JvdW5kcyA9IHRoaXMubGVmdERyYWdCb3VuZHM7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5yaWdodERyYWdCb3VuZHMgPSBuZXcgQm91bmRzMiggdGhpcy5zY2FsZS5wb3NpdGlvbi54ICsgRFJBR19CT1VORFNfWF9NQVJHSU4sIERSQUdfQk9VTkRTX01JTl9ZLFxyXG4gICAgICB0aGlzLnNjYWxlLnBvc2l0aW9uLnggKyBEUkFHX0JPVU5EU19YX01BUkdJTiArIHRoaXMubGVmdERyYWdCb3VuZHMud2lkdGgsIERSQUdfQk9VTkRTX01BWF9ZICk7XHJcbiAgICB0aGlzLnJpZ2h0VGVybUNyZWF0b3JzLmZvckVhY2goIHRlcm1DcmVhdG9yID0+IHtcclxuICAgICAgdGVybUNyZWF0b3IuZHJhZ0JvdW5kcyA9IHRoaXMucmlnaHREcmFnQm91bmRzO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuc25hcHNob3RzQ29sbGVjdGlvbiA9IG5ldyBTbmFwc2hvdHNDb2xsZWN0aW9uKCB7XHJcbiAgICAgIG51bWJlck9mU25hcHNob3RzOiBvcHRpb25zLm51bWJlck9mU25hcHNob3RzLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NuYXBzaG90c0NvbGxlY3Rpb24nIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBpY29uIHVzZWQgdG8gcmVwcmVzZW50IHRoaXMgc2NlbmUuXHJcbiAgICogU2luY2UgdGhpcyBpY29uIGlzIHVzZWQgaW4gbXVsdGlwbGUgcGxhY2VzIGluIHRoZSBzY2VuZXJ5IERBRywgaXQgbXVzdCBiZSB3cmFwcGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgaWNvbigpOiBOb2RlIHtcclxuICAgIGNvbnN0IGljb24gPSB0aGlzLl9pY29uITtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGljb24gKTtcclxuICAgIHJldHVybiBuZXcgTm9kZSggeyBjaGlsZHJlbjogWyBpY29uIF0gfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG5cclxuICAgIHRoaXMubG9ja2VkUHJvcGVydHkgJiYgdGhpcy5sb2NrZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG5cclxuICAgIC8vIGRpc3Bvc2UgYWxsIHRlcm1zXHJcbiAgICB0aGlzLmRpc3Bvc2VBbGxUZXJtcygpO1xyXG5cclxuICAgIC8vIGNsZWFyIGFsbCBzbmFwc2hvdHNcclxuICAgIHRoaXMuc25hcHNob3RzQ29sbGVjdGlvbi5yZXNldCgpO1xyXG5cclxuICAgIC8vIHJlc2V0IGFsbCB2YXJpYWJsZXNcclxuICAgIGlmICggdGhpcy52YXJpYWJsZXMgKSB7XHJcbiAgICAgIHRoaXMudmFyaWFibGVzLmZvckVhY2goIHZhcmlhYmxlID0+IHZhcmlhYmxlLnJlc2V0KCkgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3Bvc2VzIG9mIGFsbCB0ZXJtcyB0aGF0IGFyZSBtYW5hZ2VkIGJ5IHRlcm0gY3JlYXRvcnMuXHJcbiAgICovXHJcbiAgcHVibGljIGRpc3Bvc2VBbGxUZXJtcygpOiB2b2lkIHtcclxuICAgIHRoaXMuYWxsVGVybUNyZWF0b3JzLmZvckVhY2goIHRlcm1DcmVhdG9yID0+IHRlcm1DcmVhdG9yLmRpc3Bvc2VBbGxUZXJtcygpICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwb3NlcyBvZiBhbGwgdGVybXMgdGhhdCBhcmUgbWFuYWdlZCBieSB0ZXJtIGNyZWF0b3JzIGFuZCBhcmUgbm90IG9uIHRoZSBzY2FsZS5cclxuICAgKi9cclxuICBwdWJsaWMgZGlzcG9zZVRlcm1zTm90T25TY2FsZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuYWxsVGVybUNyZWF0b3JzLmZvckVhY2goIHRlcm1DcmVhdG9yID0+IHRlcm1DcmVhdG9yLmRpc3Bvc2VUZXJtc05vdE9uUGxhdGUoKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyB0aW1lLWRlcGVuZGVudCBwYXJ0cyBvZiB0aGUgc2NlbmUuXHJcbiAgICogQHBhcmFtIGR0IC0gdGltZSBzaW5jZSB0aGUgcHJldmlvdXMgc3RlcCwgaW4gc2Vjb25kc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGVwKCBkdDogbnVtYmVyICk6IHZvaWQge1xyXG5cclxuICAgIC8vIHN0ZXAgYWxsIHRlcm1zXHJcbiAgICB0aGlzLmFsbFRlcm1DcmVhdG9ycy5mb3JFYWNoKCB0ZXJtQ3JlYXRvciA9PiB0ZXJtQ3JlYXRvci5zdGVwKCBkdCApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFcXVhbGl0eUV4cGxvcmVyU2NlbmVJTyBoYW5kbGVzIFBoRVQtaU8gc2VyaWFsaXphdGlvbiBvZiBFcXVhbGl0eUV4cGxvcmVyU2NlbmUuXHJcbiAgICogSXQgaW1wbGVtZW50cyAnUmVmZXJlbmNlIHR5cGUgc2VyaWFsaXphdGlvbicsIGFzIGRlc2NyaWJlZCBpbiB0aGUgU2VyaWFsaXphdGlvbiBzZWN0aW9uIG9mXHJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtaW8vYmxvYi9tYXN0ZXIvZG9jL3BoZXQtaW8taW5zdHJ1bWVudGF0aW9uLXRlY2huaWNhbC1ndWlkZS5tZCNzZXJpYWxpemF0aW9uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBFcXVhbGl0eUV4cGxvcmVyU2NlbmVJTyA9IG5ldyBJT1R5cGUoICdFcXVhbGl0eUV4cGxvcmVyU2NlbmVJTycsIHtcclxuICAgIHZhbHVlVHlwZTogRXF1YWxpdHlFeHBsb3JlclNjZW5lLFxyXG4gICAgc3VwZXJ0eXBlOiBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPIClcclxuICB9ICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWZXJpZmllcyB0aGF0IG5vbmUgb2YgdGhlIHNwZWNpZmllZCB0ZXJtIGNyZWF0b3JzIGFyZSAnbGlrZSB0ZXJtJyBjcmVhdG9ycy5cclxuICogTGlrZSB0ZXJtIGNyZWF0b3JzIGFyZSBub3QgYWxsb3dlZCBvbiB0aGUgc2FtZSBzaWRlIG9mIHRoZSBlcXVhdGlvbi5cclxuICogRm9yIGV4YW1wbGUsIHRoZXJlIHNob3VsZCBub3QgYmUgMiBjcmVhdG9ycyBmb3IgY29uc3RhbnRzLCBvciAyIGNyZWF0b3JzIGZvciAneCcuXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZVRlcm1DcmVhdG9ycyggdGVybUNyZWF0b3JzOiBUZXJtQ3JlYXRvcltdICk6IHZvaWQge1xyXG4gIGZvciAoIGxldCBpID0gMDsgaSA8IHRlcm1DcmVhdG9ycy5sZW5ndGg7IGkrKyApIHtcclxuICAgIGZvciAoIGxldCBqID0gMDsgaiA8IHRlcm1DcmVhdG9ycy5sZW5ndGg7IGorKyApIHtcclxuXHJcbiAgICAgIC8vIHNraXAgY29tcGFyaXNvbnMgdG8gc2VsZlxyXG4gICAgICBpZiAoIHRlcm1DcmVhdG9yc1sgaSBdICE9PSB0ZXJtQ3JlYXRvcnNbIGogXSApIHtcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhKCB0ZXJtQ3JlYXRvcnNbIGkgXS5pc0xpa2VUZXJtQ3JlYXRvciggdGVybUNyZWF0b3JzWyBqIF0gKSApLFxyXG4gICAgICAgICAgJ2xpa2UgdGVybSBjcmVhdG9ycyBhcmUgbm90IGFsbG93ZWQgb24gdGhlIHNhbWUgc2lkZSBvZiB0aGUgZXF1YXRpb24nICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmVxdWFsaXR5RXhwbG9yZXIucmVnaXN0ZXIoICdFcXVhbGl0eUV4cGxvcmVyU2NlbmUnLCBFcXVhbGl0eUV4cGxvcmVyU2NlbmUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVB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