// Copyright 2017-2023, University of Colorado Boulder

/**
 * ObjectTermCreator creates and manages terms that are associated with real-world objects.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import TermCreator from './TermCreator.js';
import equalityExplorer from '../../equalityExplorer.js';
import ObjectTermNode from '../view/ObjectTermNode.js'; // eslint-disable-line no-view-imported-from-model
import ObjectTerm from './ObjectTerm.js';
export default class ObjectTermCreator extends TermCreator {
  constructor(variable, providedOptions) {
    const options = optionize()({
      variable: variable
    }, providedOptions);
    super(options);
    this.objectVariable = variable;
    phet.log && phet.log(this);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  toString() {
    return `ObjectTermCreator variable={${this.objectVariable}}`;
  }

  /**
   * Overridden so that we can expand the type definition of providedOptions, so that it includes properties
   * that are specific to this class. Note that super.createTerm calls createTermProtected.
   */
  createTerm(providedOptions) {
    return super.createTerm(providedOptions);
  }

  //-------------------------------------------------------------------------------------------------
  // Below here is the implementation of the TermCreator API
  //-------------------------------------------------------------------------------------------------

  /**
   * Creates the icon used to represent this term in the TermsToolboxNode and equations.
   */
  createIcon(sign = 1) {
    assert && assert(sign === 1, 'negative ObjectTerms are not supported');
    return ObjectTermNode.createInteractiveTermNode(this.objectVariable.image);
  }

  /**
   * Instantiates an ObjectTerm.
   */
  createTermProtected(providedOptions) {
    return new ObjectTerm(this.objectVariable, providedOptions); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }

  /**
   * Creates a term whose significant value is zero. This is used when applying an operation to an empty plate.
   * The term is not managed by the TermCreator, so we call createTermProtected instead of createTerm.
   */
  createZeroTerm(providedOptions) {
    assert && assert(false, 'createZeroTerm is unused and untested for ObjectTermCreator');
    return this.createTermProtected(providedOptions);
  }

  /**
   * Instantiates the Node that corresponds to this term.
   */
  createTermNode(term) {
    return new ObjectTermNode(this, term); //TODO https://github.com/phetsims/equality-explorer/issues/200 dynamic
  }
}

equalityExplorer.register('ObjectTermCreator', ObjectTermCreator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJUZXJtQ3JlYXRvciIsImVxdWFsaXR5RXhwbG9yZXIiLCJPYmplY3RUZXJtTm9kZSIsIk9iamVjdFRlcm0iLCJPYmplY3RUZXJtQ3JlYXRvciIsImNvbnN0cnVjdG9yIiwidmFyaWFibGUiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwib2JqZWN0VmFyaWFibGUiLCJwaGV0IiwibG9nIiwiZGlzcG9zZSIsImFzc2VydCIsInRvU3RyaW5nIiwiY3JlYXRlVGVybSIsImNyZWF0ZUljb24iLCJzaWduIiwiY3JlYXRlSW50ZXJhY3RpdmVUZXJtTm9kZSIsImltYWdlIiwiY3JlYXRlVGVybVByb3RlY3RlZCIsImNyZWF0ZVplcm9UZXJtIiwiY3JlYXRlVGVybU5vZGUiLCJ0ZXJtIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPYmplY3RUZXJtQ3JlYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBPYmplY3RUZXJtQ3JlYXRvciBjcmVhdGVzIGFuZCBtYW5hZ2VzIHRlcm1zIHRoYXQgYXJlIGFzc29jaWF0ZWQgd2l0aCByZWFsLXdvcmxkIG9iamVjdHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IFRlcm1DcmVhdG9yLCB7IFRlcm1DcmVhdG9yT3B0aW9ucywgVGVybUNyZWF0b3JTaWduIH0gZnJvbSAnLi9UZXJtQ3JlYXRvci5qcyc7XHJcbmltcG9ydCBlcXVhbGl0eUV4cGxvcmVyIGZyb20gJy4uLy4uL2VxdWFsaXR5RXhwbG9yZXIuanMnO1xyXG5pbXBvcnQgT2JqZWN0VGVybU5vZGUgZnJvbSAnLi4vdmlldy9PYmplY3RUZXJtTm9kZS5qcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdmlldy1pbXBvcnRlZC1mcm9tLW1vZGVsXHJcbmltcG9ydCBPYmplY3RUZXJtIGZyb20gJy4vT2JqZWN0VGVybS5qcyc7XHJcbmltcG9ydCBPYmplY3RWYXJpYWJsZSBmcm9tICcuL09iamVjdFZhcmlhYmxlLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUZXJtIGZyb20gJy4vVGVybS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgT2JqZWN0VGVybUNyZWF0b3JPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFRlcm1DcmVhdG9yT3B0aW9ucywgJ3ZhcmlhYmxlJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3RUZXJtQ3JlYXRvciBleHRlbmRzIFRlcm1DcmVhdG9yIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBvYmplY3RWYXJpYWJsZTogT2JqZWN0VmFyaWFibGU7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdmFyaWFibGU6IE9iamVjdFZhcmlhYmxlLCBwcm92aWRlZE9wdGlvbnM6IE9iamVjdFRlcm1DcmVhdG9yT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE9iamVjdFRlcm1DcmVhdG9yT3B0aW9ucywgU2VsZk9wdGlvbnMsIFRlcm1DcmVhdG9yT3B0aW9ucz4oKSgge1xyXG4gICAgICB2YXJpYWJsZTogdmFyaWFibGVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5vYmplY3RWYXJpYWJsZSA9IHZhcmlhYmxlO1xyXG5cclxuICAgIHBoZXQubG9nICYmIHBoZXQubG9nKCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYE9iamVjdFRlcm1DcmVhdG9yIHZhcmlhYmxlPXske3RoaXMub2JqZWN0VmFyaWFibGV9fWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPdmVycmlkZGVuIHNvIHRoYXQgd2UgY2FuIGV4cGFuZCB0aGUgdHlwZSBkZWZpbml0aW9uIG9mIHByb3ZpZGVkT3B0aW9ucywgc28gdGhhdCBpdCBpbmNsdWRlcyBwcm9wZXJ0aWVzXHJcbiAgICogdGhhdCBhcmUgc3BlY2lmaWMgdG8gdGhpcyBjbGFzcy4gTm90ZSB0aGF0IHN1cGVyLmNyZWF0ZVRlcm0gY2FsbHMgY3JlYXRlVGVybVByb3RlY3RlZC5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgY3JlYXRlVGVybSggcHJvdmlkZWRPcHRpb25zPzogT2JqZWN0VGVybUNyZWF0b3JPcHRpb25zICk6IFRlcm0ge1xyXG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZVRlcm0oIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gQmVsb3cgaGVyZSBpcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIFRlcm1DcmVhdG9yIEFQSVxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBpY29uIHVzZWQgdG8gcmVwcmVzZW50IHRoaXMgdGVybSBpbiB0aGUgVGVybXNUb29sYm94Tm9kZSBhbmQgZXF1YXRpb25zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBjcmVhdGVJY29uKCBzaWduOiBUZXJtQ3JlYXRvclNpZ24gPSAxICk6IE5vZGUge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc2lnbiA9PT0gMSwgJ25lZ2F0aXZlIE9iamVjdFRlcm1zIGFyZSBub3Qgc3VwcG9ydGVkJyApO1xyXG4gICAgcmV0dXJuIE9iamVjdFRlcm1Ob2RlLmNyZWF0ZUludGVyYWN0aXZlVGVybU5vZGUoIHRoaXMub2JqZWN0VmFyaWFibGUuaW1hZ2UgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc3RhbnRpYXRlcyBhbiBPYmplY3RUZXJtLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBvdmVycmlkZSBjcmVhdGVUZXJtUHJvdGVjdGVkKCBwcm92aWRlZE9wdGlvbnM/OiBPYmplY3RUZXJtQ3JlYXRvck9wdGlvbnMgKTogT2JqZWN0VGVybSB7XHJcbiAgICByZXR1cm4gbmV3IE9iamVjdFRlcm0oIHRoaXMub2JqZWN0VmFyaWFibGUsIHByb3ZpZGVkT3B0aW9ucyApOyAvL1RPRE8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2VxdWFsaXR5LWV4cGxvcmVyL2lzc3Vlcy8yMDAgZHluYW1pY1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIHRlcm0gd2hvc2Ugc2lnbmlmaWNhbnQgdmFsdWUgaXMgemVyby4gVGhpcyBpcyB1c2VkIHdoZW4gYXBwbHlpbmcgYW4gb3BlcmF0aW9uIHRvIGFuIGVtcHR5IHBsYXRlLlxyXG4gICAqIFRoZSB0ZXJtIGlzIG5vdCBtYW5hZ2VkIGJ5IHRoZSBUZXJtQ3JlYXRvciwgc28gd2UgY2FsbCBjcmVhdGVUZXJtUHJvdGVjdGVkIGluc3RlYWQgb2YgY3JlYXRlVGVybS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgY3JlYXRlWmVyb1Rlcm0oIHByb3ZpZGVkT3B0aW9ucz86IE9iamVjdFRlcm1DcmVhdG9yT3B0aW9ucyApOiBPYmplY3RUZXJtIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnY3JlYXRlWmVyb1Rlcm0gaXMgdW51c2VkIGFuZCB1bnRlc3RlZCBmb3IgT2JqZWN0VGVybUNyZWF0b3InICk7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVUZXJtUHJvdGVjdGVkKCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc3RhbnRpYXRlcyB0aGUgTm9kZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoaXMgdGVybS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgY3JlYXRlVGVybU5vZGUoIHRlcm06IE9iamVjdFRlcm0gKTogT2JqZWN0VGVybU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBPYmplY3RUZXJtTm9kZSggdGhpcywgdGVybSApOyAvL1RPRE8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2VxdWFsaXR5LWV4cGxvcmVyL2lzc3Vlcy8yMDAgZHluYW1pY1xyXG4gIH1cclxufVxyXG5cclxuZXF1YWxpdHlFeHBsb3Jlci5yZWdpc3RlciggJ09iamVjdFRlcm1DcmVhdG9yJywgT2JqZWN0VGVybUNyZWF0b3IgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0MsV0FBVyxNQUErQyxrQkFBa0I7QUFDbkYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLGNBQWMsTUFBTSwyQkFBMkIsQ0FBQyxDQUFDO0FBQ3hELE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFTeEMsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU0osV0FBVyxDQUFDO0VBSWxESyxXQUFXQSxDQUFFQyxRQUF3QixFQUFFQyxlQUF5QyxFQUFHO0lBRXhGLE1BQU1DLE9BQU8sR0FBR1QsU0FBUyxDQUE0RCxDQUFDLENBQUU7TUFDdEZPLFFBQVEsRUFBRUE7SUFDWixDQUFDLEVBQUVDLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFQyxPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDQyxjQUFjLEdBQUdILFFBQVE7SUFFOUJJLElBQUksQ0FBQ0MsR0FBRyxJQUFJRCxJQUFJLENBQUNDLEdBQUcsQ0FBRSxJQUFLLENBQUM7RUFDOUI7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7RUFFZ0JFLFFBQVFBLENBQUEsRUFBVztJQUNqQyxPQUFRLCtCQUE4QixJQUFJLENBQUNMLGNBQWUsR0FBRTtFQUM5RDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNrQk0sVUFBVUEsQ0FBRVIsZUFBMEMsRUFBUztJQUM3RSxPQUFPLEtBQUssQ0FBQ1EsVUFBVSxDQUFFUixlQUFnQixDQUFDO0VBQzVDOztFQUVBO0VBQ0E7RUFDQTs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JTLFVBQVVBLENBQUVDLElBQXFCLEdBQUcsQ0FBQyxFQUFTO0lBQzVESixNQUFNLElBQUlBLE1BQU0sQ0FBRUksSUFBSSxLQUFLLENBQUMsRUFBRSx3Q0FBeUMsQ0FBQztJQUN4RSxPQUFPZixjQUFjLENBQUNnQix5QkFBeUIsQ0FBRSxJQUFJLENBQUNULGNBQWMsQ0FBQ1UsS0FBTSxDQUFDO0VBQzlFOztFQUVBO0FBQ0Y7QUFDQTtFQUNxQkMsbUJBQW1CQSxDQUFFYixlQUEwQyxFQUFlO0lBQy9GLE9BQU8sSUFBSUosVUFBVSxDQUFFLElBQUksQ0FBQ00sY0FBYyxFQUFFRixlQUFnQixDQUFDLENBQUMsQ0FBQztFQUNqRTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNrQmMsY0FBY0EsQ0FBRWQsZUFBMEMsRUFBZTtJQUN2Rk0sTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDZEQUE4RCxDQUFDO0lBQ3hGLE9BQU8sSUFBSSxDQUFDTyxtQkFBbUIsQ0FBRWIsZUFBZ0IsQ0FBQztFQUNwRDs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JlLGNBQWNBLENBQUVDLElBQWdCLEVBQW1CO0lBQ2pFLE9BQU8sSUFBSXJCLGNBQWMsQ0FBRSxJQUFJLEVBQUVxQixJQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzNDO0FBQ0Y7O0FBRUF0QixnQkFBZ0IsQ0FBQ3VCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRXBCLGlCQUFrQixDQUFDIn0=