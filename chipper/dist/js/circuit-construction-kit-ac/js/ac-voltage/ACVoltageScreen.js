// Copyright 2019-2023, University of Colorado Boulder

/**
 * The "AC Voltage" screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import CCKCConstants from '../../../circuit-construction-kit-common/js/CCKCConstants.js';
import CCKCColors from '../../../circuit-construction-kit-common/js/view/CCKCColors.js';
import CircuitConstructionKitModel from '../../../circuit-construction-kit-common/js/model/CircuitConstructionKitModel.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import screenIconACSource_png from '../../images/screenIconACSource_png.js';
import circuitConstructionKitAc from '../circuitConstructionKitAc.js';
import CircuitConstructionKitAcStrings from '../CircuitConstructionKitAcStrings.js';
import ACVoltageScreenView from './view/ACVoltageScreenView.js';
class ACVoltageScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const homeScreenIcon = new Image(screenIconACSource_png);
    const options = {
      name: CircuitConstructionKitAcStrings.screen['ac-voltageStringProperty'],
      backgroundColorProperty: new Property(CCKCColors.screenBackgroundColorProperty),
      homeScreenIcon: new ScreenIcon(homeScreenIcon, {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem,
      maxDT: CCKCConstants.MAX_DT
    };
    super(() => new CircuitConstructionKitModel(true, false, tandem.createTandem('model')), model => new ACVoltageScreenView(model, tandem.createTandem('view')), options);
  }
}
circuitConstructionKitAc.register('ACVoltageScreen', ACVoltageScreen);
export default ACVoltageScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkNDS0NDb25zdGFudHMiLCJDQ0tDQ29sb3JzIiwiQ2lyY3VpdENvbnN0cnVjdGlvbktpdE1vZGVsIiwiU2NyZWVuIiwiU2NyZWVuSWNvbiIsIkltYWdlIiwic2NyZWVuSWNvbkFDU291cmNlX3BuZyIsImNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRBYyIsIkNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRBY1N0cmluZ3MiLCJBQ1ZvbHRhZ2VTY3JlZW5WaWV3IiwiQUNWb2x0YWdlU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJob21lU2NyZWVuSWNvbiIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsIm1heERUIiwiTUFYX0RUIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkFDVm9sdGFnZVNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgXCJBQyBWb2x0YWdlXCIgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IENDS0NDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vY2lyY3VpdC1jb25zdHJ1Y3Rpb24ta2l0LWNvbW1vbi9qcy9DQ0tDQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENDS0NDb2xvcnMgZnJvbSAnLi4vLi4vLi4vY2lyY3VpdC1jb25zdHJ1Y3Rpb24ta2l0LWNvbW1vbi9qcy92aWV3L0NDS0NDb2xvcnMuanMnO1xyXG5pbXBvcnQgQ2lyY3VpdENvbnN0cnVjdGlvbktpdE1vZGVsIGZyb20gJy4uLy4uLy4uL2NpcmN1aXQtY29uc3RydWN0aW9uLWtpdC1jb21tb24vanMvbW9kZWwvQ2lyY3VpdENvbnN0cnVjdGlvbktpdE1vZGVsLmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2NyZWVuSWNvbkFDU291cmNlX3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvc2NyZWVuSWNvbkFDU291cmNlX3BuZy5qcyc7XHJcbmltcG9ydCBjaXJjdWl0Q29uc3RydWN0aW9uS2l0QWMgZnJvbSAnLi4vY2lyY3VpdENvbnN0cnVjdGlvbktpdEFjLmpzJztcclxuaW1wb3J0IENpcmN1aXRDb25zdHJ1Y3Rpb25LaXRBY1N0cmluZ3MgZnJvbSAnLi4vQ2lyY3VpdENvbnN0cnVjdGlvbktpdEFjU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBBQ1ZvbHRhZ2VTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9BQ1ZvbHRhZ2VTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIEFDVm9sdGFnZVNjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IGhvbWVTY3JlZW5JY29uID0gbmV3IEltYWdlKCBzY3JlZW5JY29uQUNTb3VyY2VfcG5nICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogQ2lyY3VpdENvbnN0cnVjdGlvbktpdEFjU3RyaW5ncy5zY3JlZW5bICdhYy12b2x0YWdlU3RyaW5nUHJvcGVydHknIF0sXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoIENDS0NDb2xvcnMuc2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHkgKSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBob21lU2NyZWVuSWNvbiwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgbWF4RFQ6IENDS0NDb25zdGFudHMuTUFYX0RUXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgQ2lyY3VpdENvbnN0cnVjdGlvbktpdE1vZGVsKCB0cnVlLCBmYWxzZSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBBQ1ZvbHRhZ2VTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRBYy5yZWdpc3RlciggJ0FDVm9sdGFnZVNjcmVlbicsIEFDVm9sdGFnZVNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBBQ1ZvbHRhZ2VTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsYUFBYSxNQUFNLDhEQUE4RDtBQUN4RixPQUFPQyxVQUFVLE1BQU0sZ0VBQWdFO0FBQ3ZGLE9BQU9DLDJCQUEyQixNQUFNLGtGQUFrRjtBQUMxSCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxzQkFBc0IsTUFBTSx3Q0FBd0M7QUFDM0UsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLCtCQUErQixNQUFNLHVDQUF1QztBQUNuRixPQUFPQyxtQkFBbUIsTUFBTSwrQkFBK0I7QUFFL0QsTUFBTUMsZUFBZSxTQUFTUCxNQUFNLENBQUM7RUFFbkM7QUFDRjtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQixNQUFNQyxjQUFjLEdBQUcsSUFBSVIsS0FBSyxDQUFFQyxzQkFBdUIsQ0FBQztJQUUxRCxNQUFNUSxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFUCwrQkFBK0IsQ0FBQ1EsTUFBTSxDQUFFLDBCQUEwQixDQUFFO01BQzFFQyx1QkFBdUIsRUFBRSxJQUFJbEIsUUFBUSxDQUFFRSxVQUFVLENBQUNpQiw2QkFBOEIsQ0FBQztNQUNqRkwsY0FBYyxFQUFFLElBQUlULFVBQVUsQ0FBRVMsY0FBYyxFQUFFO1FBQzlDTSxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSFIsTUFBTSxFQUFFQSxNQUFNO01BQ2RTLEtBQUssRUFBRXJCLGFBQWEsQ0FBQ3NCO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJcEIsMkJBQTJCLENBQUUsSUFBSSxFQUFFLEtBQUssRUFBRVUsTUFBTSxDQUFDVyxZQUFZLENBQUUsT0FBUSxDQUFFLENBQUMsRUFDcEZDLEtBQUssSUFBSSxJQUFJZixtQkFBbUIsQ0FBRWUsS0FBSyxFQUFFWixNQUFNLENBQUNXLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUN4RVQsT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCx3QkFBd0IsQ0FBQ2tCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRWYsZUFBZ0IsQ0FBQztBQUN2RSxlQUFlQSxlQUFlIn0=