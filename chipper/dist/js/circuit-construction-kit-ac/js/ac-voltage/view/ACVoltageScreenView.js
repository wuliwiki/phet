// Copyright 2019-2023, University of Colorado Boulder

/**
 * The view for the AC Voltage screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import CCKCScreenView from '../../../../circuit-construction-kit-common/js/view/CCKCScreenView.js';
import CircuitElementToolFactory from '../../../../circuit-construction-kit-common/js/view/CircuitElementToolFactory.js';
import CCKCConstants from '../../../../circuit-construction-kit-common/js/CCKCConstants.js';
import circuitConstructionKitAc from '../../circuitConstructionKitAc.js';
class ACVoltageScreenView extends CCKCScreenView {
  /**
   * @param {ACVoltageModel} model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    const circuitElementToolFactory = new CircuitElementToolFactory(model.circuit, model.showLabelsProperty, model.viewTypeProperty, point => this.circuitNode.globalToLocalPoint(point), tandem.createTandem('circuitElementToolbox').createTandem('carousel').createTandem('circuitElementTools'));

    // Tool nodes that appear on every screen. Pagination for the carousel, each page should begin with wire node,
    // see options.itemsPerPage below
    const circuitElementToolNodes = [{
      createNode: tandem => circuitElementToolFactory.createWireToolNode(tandem),
      tandemName: 'wireToolNode1'
    }, {
      createNode: tandem => circuitElementToolFactory.createRightBatteryToolNode(tandem),
      tandemName: 'rightBatteryToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createACVoltageToolNode(tandem),
      tandemName: 'acVoltageToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createLightBulbToolNode(tandem),
      tandemName: 'lightBulbToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createResistorToolNode(tandem),
      tandemName: 'resistorToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createSwitchToolNode(tandem),
      tandemName: 'switchToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createWireToolNode(tandem),
      tandemName: 'wireToolNode2'
    }, {
      createNode: tandem => circuitElementToolFactory.createFuseToolNode(tandem),
      tandemName: 'fuseToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createDollarBillToolNode(tandem),
      tandemName: 'dollarBillToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createPaperClipToolNode(tandem),
      tandemName: 'paperClipToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createCoinToolNode(tandem),
      tandemName: 'coinToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createEraserToolNode(tandem),
      tandemName: 'eraserToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createWireToolNode(tandem),
      tandemName: 'wireToolNode3'
    }, {
      createNode: tandem => circuitElementToolFactory.createPencilToolNode(tandem),
      tandemName: 'pencilToolNode'
    }];
    super(model, circuitElementToolNodes, tandem, {
      showAdvancedControls: false,
      showCharts: true,
      showTimeControls: true,
      circuitElementToolboxOptions: {
        carouselScale: CCKCConstants.AC_CAROUSEL_SCALE,
        carouselOptions: {
          itemsPerPage: 6 // NOTE: this must be kept in sync with the pagination above
        }
      },

      showStopwatchCheckbox: true,
      hasACandDCVoltageSources: true
    });
  }
}
circuitConstructionKitAc.register('ACVoltageScreenView', ACVoltageScreenView);
export default ACVoltageScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDQ0tDU2NyZWVuVmlldyIsIkNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkiLCJDQ0tDQ29uc3RhbnRzIiwiY2lyY3VpdENvbnN0cnVjdGlvbktpdEFjIiwiQUNWb2x0YWdlU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJjaXJjdWl0RWxlbWVudFRvb2xGYWN0b3J5IiwiY2lyY3VpdCIsInNob3dMYWJlbHNQcm9wZXJ0eSIsInZpZXdUeXBlUHJvcGVydHkiLCJwb2ludCIsImNpcmN1aXROb2RlIiwiZ2xvYmFsVG9Mb2NhbFBvaW50IiwiY3JlYXRlVGFuZGVtIiwiY2lyY3VpdEVsZW1lbnRUb29sTm9kZXMiLCJjcmVhdGVOb2RlIiwiY3JlYXRlV2lyZVRvb2xOb2RlIiwidGFuZGVtTmFtZSIsImNyZWF0ZVJpZ2h0QmF0dGVyeVRvb2xOb2RlIiwiY3JlYXRlQUNWb2x0YWdlVG9vbE5vZGUiLCJjcmVhdGVMaWdodEJ1bGJUb29sTm9kZSIsImNyZWF0ZVJlc2lzdG9yVG9vbE5vZGUiLCJjcmVhdGVTd2l0Y2hUb29sTm9kZSIsImNyZWF0ZUZ1c2VUb29sTm9kZSIsImNyZWF0ZURvbGxhckJpbGxUb29sTm9kZSIsImNyZWF0ZVBhcGVyQ2xpcFRvb2xOb2RlIiwiY3JlYXRlQ29pblRvb2xOb2RlIiwiY3JlYXRlRXJhc2VyVG9vbE5vZGUiLCJjcmVhdGVQZW5jaWxUb29sTm9kZSIsInNob3dBZHZhbmNlZENvbnRyb2xzIiwic2hvd0NoYXJ0cyIsInNob3dUaW1lQ29udHJvbHMiLCJjaXJjdWl0RWxlbWVudFRvb2xib3hPcHRpb25zIiwiY2Fyb3VzZWxTY2FsZSIsIkFDX0NBUk9VU0VMX1NDQUxFIiwiY2Fyb3VzZWxPcHRpb25zIiwiaXRlbXNQZXJQYWdlIiwic2hvd1N0b3B3YXRjaENoZWNrYm94IiwiaGFzQUNhbmREQ1ZvbHRhZ2VTb3VyY2VzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBQ1ZvbHRhZ2VTY3JlZW5WaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSB2aWV3IGZvciB0aGUgQUMgVm9sdGFnZSBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IENDS0NTY3JlZW5WaWV3IGZyb20gJy4uLy4uLy4uLy4uL2NpcmN1aXQtY29uc3RydWN0aW9uLWtpdC1jb21tb24vanMvdmlldy9DQ0tDU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBDaXJjdWl0RWxlbWVudFRvb2xGYWN0b3J5IGZyb20gJy4uLy4uLy4uLy4uL2NpcmN1aXQtY29uc3RydWN0aW9uLWtpdC1jb21tb24vanMvdmlldy9DaXJjdWl0RWxlbWVudFRvb2xGYWN0b3J5LmpzJztcclxuaW1wb3J0IENDS0NDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vLi4vY2lyY3VpdC1jb25zdHJ1Y3Rpb24ta2l0LWNvbW1vbi9qcy9DQ0tDQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRBYyBmcm9tICcuLi8uLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0QWMuanMnO1xyXG5cclxuY2xhc3MgQUNWb2x0YWdlU2NyZWVuVmlldyBleHRlbmRzIENDS0NTY3JlZW5WaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtBQ1ZvbHRhZ2VNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCB0YW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgY2lyY3VpdEVsZW1lbnRUb29sRmFjdG9yeSA9IG5ldyBDaXJjdWl0RWxlbWVudFRvb2xGYWN0b3J5KFxyXG4gICAgICBtb2RlbC5jaXJjdWl0LFxyXG4gICAgICBtb2RlbC5zaG93TGFiZWxzUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLnZpZXdUeXBlUHJvcGVydHksXHJcbiAgICAgIHBvaW50ID0+IHRoaXMuY2lyY3VpdE5vZGUuZ2xvYmFsVG9Mb2NhbFBvaW50KCBwb2ludCApLFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY2lyY3VpdEVsZW1lbnRUb29sYm94JyApLmNyZWF0ZVRhbmRlbSggJ2Nhcm91c2VsJyApLmNyZWF0ZVRhbmRlbSggJ2NpcmN1aXRFbGVtZW50VG9vbHMnIClcclxuICAgICk7XHJcblxyXG4gICAgLy8gVG9vbCBub2RlcyB0aGF0IGFwcGVhciBvbiBldmVyeSBzY3JlZW4uIFBhZ2luYXRpb24gZm9yIHRoZSBjYXJvdXNlbCwgZWFjaCBwYWdlIHNob3VsZCBiZWdpbiB3aXRoIHdpcmUgbm9kZSxcclxuICAgIC8vIHNlZSBvcHRpb25zLml0ZW1zUGVyUGFnZSBiZWxvd1xyXG4gICAgY29uc3QgY2lyY3VpdEVsZW1lbnRUb29sTm9kZXMgPSBbXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlV2lyZVRvb2xOb2RlKCB0YW5kZW0gKSwgdGFuZGVtTmFtZTogJ3dpcmVUb29sTm9kZTEnIH0sXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlUmlnaHRCYXR0ZXJ5VG9vbE5vZGUoIHRhbmRlbSApLCB0YW5kZW1OYW1lOiAncmlnaHRCYXR0ZXJ5VG9vbE5vZGUnIH0sXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlQUNWb2x0YWdlVG9vbE5vZGUoIHRhbmRlbSApLCB0YW5kZW1OYW1lOiAnYWNWb2x0YWdlVG9vbE5vZGUnIH0sXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlTGlnaHRCdWxiVG9vbE5vZGUoIHRhbmRlbSApLCB0YW5kZW1OYW1lOiAnbGlnaHRCdWxiVG9vbE5vZGUnIH0sXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlUmVzaXN0b3JUb29sTm9kZSggdGFuZGVtICksIHRhbmRlbU5hbWU6ICdyZXNpc3RvclRvb2xOb2RlJyB9LFxyXG4gICAgICB7IGNyZWF0ZU5vZGU6IHRhbmRlbSA9PiBjaXJjdWl0RWxlbWVudFRvb2xGYWN0b3J5LmNyZWF0ZVN3aXRjaFRvb2xOb2RlKCB0YW5kZW0gKSwgdGFuZGVtTmFtZTogJ3N3aXRjaFRvb2xOb2RlJyB9LFxyXG5cclxuICAgICAgeyBjcmVhdGVOb2RlOiB0YW5kZW0gPT4gY2lyY3VpdEVsZW1lbnRUb29sRmFjdG9yeS5jcmVhdGVXaXJlVG9vbE5vZGUoIHRhbmRlbSApLCB0YW5kZW1OYW1lOiAnd2lyZVRvb2xOb2RlMicgfSxcclxuICAgICAgeyBjcmVhdGVOb2RlOiB0YW5kZW0gPT4gY2lyY3VpdEVsZW1lbnRUb29sRmFjdG9yeS5jcmVhdGVGdXNlVG9vbE5vZGUoIHRhbmRlbSApLCB0YW5kZW1OYW1lOiAnZnVzZVRvb2xOb2RlJyB9LFxyXG4gICAgICB7IGNyZWF0ZU5vZGU6IHRhbmRlbSA9PiBjaXJjdWl0RWxlbWVudFRvb2xGYWN0b3J5LmNyZWF0ZURvbGxhckJpbGxUb29sTm9kZSggdGFuZGVtICksIHRhbmRlbU5hbWU6ICdkb2xsYXJCaWxsVG9vbE5vZGUnIH0sXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlUGFwZXJDbGlwVG9vbE5vZGUoIHRhbmRlbSApLCB0YW5kZW1OYW1lOiAncGFwZXJDbGlwVG9vbE5vZGUnIH0sXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlQ29pblRvb2xOb2RlKCB0YW5kZW0gKSwgdGFuZGVtTmFtZTogJ2NvaW5Ub29sTm9kZScgfSxcclxuICAgICAgeyBjcmVhdGVOb2RlOiB0YW5kZW0gPT4gY2lyY3VpdEVsZW1lbnRUb29sRmFjdG9yeS5jcmVhdGVFcmFzZXJUb29sTm9kZSggdGFuZGVtICksIHRhbmRlbU5hbWU6ICdlcmFzZXJUb29sTm9kZScgfSxcclxuXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlV2lyZVRvb2xOb2RlKCB0YW5kZW0gKSwgdGFuZGVtTmFtZTogJ3dpcmVUb29sTm9kZTMnIH0sXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogdGFuZGVtID0+IGNpcmN1aXRFbGVtZW50VG9vbEZhY3RvcnkuY3JlYXRlUGVuY2lsVG9vbE5vZGUoIHRhbmRlbSApLCB0YW5kZW1OYW1lOiAncGVuY2lsVG9vbE5vZGUnIH1cclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCBjaXJjdWl0RWxlbWVudFRvb2xOb2RlcywgdGFuZGVtLCB7XHJcbiAgICAgIHNob3dBZHZhbmNlZENvbnRyb2xzOiBmYWxzZSxcclxuICAgICAgc2hvd0NoYXJ0czogdHJ1ZSxcclxuICAgICAgc2hvd1RpbWVDb250cm9sczogdHJ1ZSxcclxuICAgICAgY2lyY3VpdEVsZW1lbnRUb29sYm94T3B0aW9uczoge1xyXG4gICAgICAgIGNhcm91c2VsU2NhbGU6IENDS0NDb25zdGFudHMuQUNfQ0FST1VTRUxfU0NBTEUsXHJcbiAgICAgICAgY2Fyb3VzZWxPcHRpb25zOiB7XHJcbiAgICAgICAgICBpdGVtc1BlclBhZ2U6IDYgLy8gTk9URTogdGhpcyBtdXN0IGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSBwYWdpbmF0aW9uIGFib3ZlXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBzaG93U3RvcHdhdGNoQ2hlY2tib3g6IHRydWUsXHJcbiAgICAgIGhhc0FDYW5kRENWb2x0YWdlU291cmNlczogdHJ1ZVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY2lyY3VpdENvbnN0cnVjdGlvbktpdEFjLnJlZ2lzdGVyKCAnQUNWb2x0YWdlU2NyZWVuVmlldycsIEFDVm9sdGFnZVNjcmVlblZpZXcgKTtcclxuZXhwb3J0IGRlZmF1bHQgQUNWb2x0YWdlU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHVFQUF1RTtBQUNsRyxPQUFPQyx5QkFBeUIsTUFBTSxrRkFBa0Y7QUFDeEgsT0FBT0MsYUFBYSxNQUFNLGlFQUFpRTtBQUMzRixPQUFPQyx3QkFBd0IsTUFBTSxtQ0FBbUM7QUFFeEUsTUFBTUMsbUJBQW1CLFNBQVNKLGNBQWMsQ0FBQztFQUUvQztBQUNGO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRztJQUUzQixNQUFNQyx5QkFBeUIsR0FBRyxJQUFJUCx5QkFBeUIsQ0FDN0RLLEtBQUssQ0FBQ0csT0FBTyxFQUNiSCxLQUFLLENBQUNJLGtCQUFrQixFQUN4QkosS0FBSyxDQUFDSyxnQkFBZ0IsRUFDdEJDLEtBQUssSUFBSSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0Msa0JBQWtCLENBQUVGLEtBQU0sQ0FBQyxFQUNyREwsTUFBTSxDQUFDUSxZQUFZLENBQUUsdUJBQXdCLENBQUMsQ0FBQ0EsWUFBWSxDQUFFLFVBQVcsQ0FBQyxDQUFDQSxZQUFZLENBQUUscUJBQXNCLENBQ2hILENBQUM7O0lBRUQ7SUFDQTtJQUNBLE1BQU1DLHVCQUF1QixHQUFHLENBQzlCO01BQUVDLFVBQVUsRUFBRVYsTUFBTSxJQUFJQyx5QkFBeUIsQ0FBQ1Usa0JBQWtCLENBQUVYLE1BQU8sQ0FBQztNQUFFWSxVQUFVLEVBQUU7SUFBZ0IsQ0FBQyxFQUM3RztNQUFFRixVQUFVLEVBQUVWLE1BQU0sSUFBSUMseUJBQXlCLENBQUNZLDBCQUEwQixDQUFFYixNQUFPLENBQUM7TUFBRVksVUFBVSxFQUFFO0lBQXVCLENBQUMsRUFDNUg7TUFBRUYsVUFBVSxFQUFFVixNQUFNLElBQUlDLHlCQUF5QixDQUFDYSx1QkFBdUIsQ0FBRWQsTUFBTyxDQUFDO01BQUVZLFVBQVUsRUFBRTtJQUFvQixDQUFDLEVBQ3RIO01BQUVGLFVBQVUsRUFBRVYsTUFBTSxJQUFJQyx5QkFBeUIsQ0FBQ2MsdUJBQXVCLENBQUVmLE1BQU8sQ0FBQztNQUFFWSxVQUFVLEVBQUU7SUFBb0IsQ0FBQyxFQUN0SDtNQUFFRixVQUFVLEVBQUVWLE1BQU0sSUFBSUMseUJBQXlCLENBQUNlLHNCQUFzQixDQUFFaEIsTUFBTyxDQUFDO01BQUVZLFVBQVUsRUFBRTtJQUFtQixDQUFDLEVBQ3BIO01BQUVGLFVBQVUsRUFBRVYsTUFBTSxJQUFJQyx5QkFBeUIsQ0FBQ2dCLG9CQUFvQixDQUFFakIsTUFBTyxDQUFDO01BQUVZLFVBQVUsRUFBRTtJQUFpQixDQUFDLEVBRWhIO01BQUVGLFVBQVUsRUFBRVYsTUFBTSxJQUFJQyx5QkFBeUIsQ0FBQ1Usa0JBQWtCLENBQUVYLE1BQU8sQ0FBQztNQUFFWSxVQUFVLEVBQUU7SUFBZ0IsQ0FBQyxFQUM3RztNQUFFRixVQUFVLEVBQUVWLE1BQU0sSUFBSUMseUJBQXlCLENBQUNpQixrQkFBa0IsQ0FBRWxCLE1BQU8sQ0FBQztNQUFFWSxVQUFVLEVBQUU7SUFBZSxDQUFDLEVBQzVHO01BQUVGLFVBQVUsRUFBRVYsTUFBTSxJQUFJQyx5QkFBeUIsQ0FBQ2tCLHdCQUF3QixDQUFFbkIsTUFBTyxDQUFDO01BQUVZLFVBQVUsRUFBRTtJQUFxQixDQUFDLEVBQ3hIO01BQUVGLFVBQVUsRUFBRVYsTUFBTSxJQUFJQyx5QkFBeUIsQ0FBQ21CLHVCQUF1QixDQUFFcEIsTUFBTyxDQUFDO01BQUVZLFVBQVUsRUFBRTtJQUFvQixDQUFDLEVBQ3RIO01BQUVGLFVBQVUsRUFBRVYsTUFBTSxJQUFJQyx5QkFBeUIsQ0FBQ29CLGtCQUFrQixDQUFFckIsTUFBTyxDQUFDO01BQUVZLFVBQVUsRUFBRTtJQUFlLENBQUMsRUFDNUc7TUFBRUYsVUFBVSxFQUFFVixNQUFNLElBQUlDLHlCQUF5QixDQUFDcUIsb0JBQW9CLENBQUV0QixNQUFPLENBQUM7TUFBRVksVUFBVSxFQUFFO0lBQWlCLENBQUMsRUFFaEg7TUFBRUYsVUFBVSxFQUFFVixNQUFNLElBQUlDLHlCQUF5QixDQUFDVSxrQkFBa0IsQ0FBRVgsTUFBTyxDQUFDO01BQUVZLFVBQVUsRUFBRTtJQUFnQixDQUFDLEVBQzdHO01BQUVGLFVBQVUsRUFBRVYsTUFBTSxJQUFJQyx5QkFBeUIsQ0FBQ3NCLG9CQUFvQixDQUFFdkIsTUFBTyxDQUFDO01BQUVZLFVBQVUsRUFBRTtJQUFpQixDQUFDLENBQ2pIO0lBRUQsS0FBSyxDQUFFYixLQUFLLEVBQUVVLHVCQUF1QixFQUFFVCxNQUFNLEVBQUU7TUFDN0N3QixvQkFBb0IsRUFBRSxLQUFLO01BQzNCQyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsNEJBQTRCLEVBQUU7UUFDNUJDLGFBQWEsRUFBRWpDLGFBQWEsQ0FBQ2tDLGlCQUFpQjtRQUM5Q0MsZUFBZSxFQUFFO1VBQ2ZDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDbEI7TUFDRixDQUFDOztNQUNEQyxxQkFBcUIsRUFBRSxJQUFJO01BQzNCQyx3QkFBd0IsRUFBRTtJQUM1QixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFyQyx3QkFBd0IsQ0FBQ3NDLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRXJDLG1CQUFvQixDQUFDO0FBQy9FLGVBQWVBLG1CQUFtQiJ9