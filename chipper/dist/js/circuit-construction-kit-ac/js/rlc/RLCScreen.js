// Copyright 2019-2023, University of Colorado Boulder

/**
 * The "RLC" screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import CCKCConstants from '../../../circuit-construction-kit-common/js/CCKCConstants.js';
import CCKCColors from '../../../circuit-construction-kit-common/js/view/CCKCColors.js';
import CircuitConstructionKitModel from '../../../circuit-construction-kit-common/js/model/CircuitConstructionKitModel.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import screenIconRLC_png from '../../images/screenIconRLC_png.js';
import circuitConstructionKitAc from '../circuitConstructionKitAc.js';
import CircuitConstructionKitAcStrings from '../CircuitConstructionKitAcStrings.js';
import RLCScreenView from './view/RLCScreenView.js';
class RLCScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const homeScreenIcon = new Image(screenIconRLC_png);
    const options = {
      name: CircuitConstructionKitAcStrings.screen.rlcStringProperty,
      backgroundColorProperty: new Property(CCKCColors.screenBackgroundColorProperty),
      homeScreenIcon: new ScreenIcon(homeScreenIcon, {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem,
      maxDT: CCKCConstants.MAX_DT
    };
    super(() => new CircuitConstructionKitModel(true, false, tandem.createTandem('model')), model => new RLCScreenView(model, tandem.createTandem('view')), options);
  }
}
circuitConstructionKitAc.register('RLCScreen', RLCScreen);
export default RLCScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkNDS0NDb25zdGFudHMiLCJDQ0tDQ29sb3JzIiwiQ2lyY3VpdENvbnN0cnVjdGlvbktpdE1vZGVsIiwiU2NyZWVuIiwiU2NyZWVuSWNvbiIsIkltYWdlIiwic2NyZWVuSWNvblJMQ19wbmciLCJjaXJjdWl0Q29uc3RydWN0aW9uS2l0QWMiLCJDaXJjdWl0Q29uc3RydWN0aW9uS2l0QWNTdHJpbmdzIiwiUkxDU2NyZWVuVmlldyIsIlJMQ1NjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiaG9tZVNjcmVlbkljb24iLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsInJsY1N0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsIm1heERUIiwiTUFYX0RUIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJMQ1NjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgXCJSTENcIiBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQ0NLQ0NvbnN0YW50cyBmcm9tICcuLi8uLi8uLi9jaXJjdWl0LWNvbnN0cnVjdGlvbi1raXQtY29tbW9uL2pzL0NDS0NDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ0NLQ0NvbG9ycyBmcm9tICcuLi8uLi8uLi9jaXJjdWl0LWNvbnN0cnVjdGlvbi1raXQtY29tbW9uL2pzL3ZpZXcvQ0NLQ0NvbG9ycy5qcyc7XHJcbmltcG9ydCBDaXJjdWl0Q29uc3RydWN0aW9uS2l0TW9kZWwgZnJvbSAnLi4vLi4vLi4vY2lyY3VpdC1jb25zdHJ1Y3Rpb24ta2l0LWNvbW1vbi9qcy9tb2RlbC9DaXJjdWl0Q29uc3RydWN0aW9uS2l0TW9kZWwuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzY3JlZW5JY29uUkxDX3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvc2NyZWVuSWNvblJMQ19wbmcuanMnO1xyXG5pbXBvcnQgY2lyY3VpdENvbnN0cnVjdGlvbktpdEFjIGZyb20gJy4uL2NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRBYy5qcyc7XHJcbmltcG9ydCBDaXJjdWl0Q29uc3RydWN0aW9uS2l0QWNTdHJpbmdzIGZyb20gJy4uL0NpcmN1aXRDb25zdHJ1Y3Rpb25LaXRBY1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgUkxDU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvUkxDU2NyZWVuVmlldy5qcyc7XHJcblxyXG5cclxuY2xhc3MgUkxDU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgaG9tZVNjcmVlbkljb24gPSBuZXcgSW1hZ2UoIHNjcmVlbkljb25STENfcG5nICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogQ2lyY3VpdENvbnN0cnVjdGlvbktpdEFjU3RyaW5ncy5zY3JlZW4ucmxjU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoIENDS0NDb2xvcnMuc2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHkgKSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBob21lU2NyZWVuSWNvbiwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgbWF4RFQ6IENDS0NDb25zdGFudHMuTUFYX0RUXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgQ2lyY3VpdENvbnN0cnVjdGlvbktpdE1vZGVsKCB0cnVlLCBmYWxzZSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBSTENTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNpcmN1aXRDb25zdHJ1Y3Rpb25LaXRBYy5yZWdpc3RlciggJ1JMQ1NjcmVlbicsIFJMQ1NjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBSTENTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsYUFBYSxNQUFNLDhEQUE4RDtBQUN4RixPQUFPQyxVQUFVLE1BQU0sZ0VBQWdFO0FBQ3ZGLE9BQU9DLDJCQUEyQixNQUFNLGtGQUFrRjtBQUMxSCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFDakUsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLCtCQUErQixNQUFNLHVDQUF1QztBQUNuRixPQUFPQyxhQUFhLE1BQU0seUJBQXlCO0FBR25ELE1BQU1DLFNBQVMsU0FBU1AsTUFBTSxDQUFDO0VBRTdCO0FBQ0Y7QUFDQTtFQUNFUSxXQUFXQSxDQUFFQyxNQUFNLEVBQUc7SUFFcEIsTUFBTUMsY0FBYyxHQUFHLElBQUlSLEtBQUssQ0FBRUMsaUJBQWtCLENBQUM7SUFFckQsTUFBTVEsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRVAsK0JBQStCLENBQUNRLE1BQU0sQ0FBQ0MsaUJBQWlCO01BQzlEQyx1QkFBdUIsRUFBRSxJQUFJbkIsUUFBUSxDQUFFRSxVQUFVLENBQUNrQiw2QkFBOEIsQ0FBQztNQUNqRk4sY0FBYyxFQUFFLElBQUlULFVBQVUsQ0FBRVMsY0FBYyxFQUFFO1FBQzlDTyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSFQsTUFBTSxFQUFFQSxNQUFNO01BQ2RVLEtBQUssRUFBRXRCLGFBQWEsQ0FBQ3VCO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJckIsMkJBQTJCLENBQUUsSUFBSSxFQUFFLEtBQUssRUFBRVUsTUFBTSxDQUFDWSxZQUFZLENBQUUsT0FBUSxDQUFFLENBQUMsRUFDcEZDLEtBQUssSUFBSSxJQUFJaEIsYUFBYSxDQUFFZ0IsS0FBSyxFQUFFYixNQUFNLENBQUNZLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUNsRVYsT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCx3QkFBd0IsQ0FBQ21CLFFBQVEsQ0FBRSxXQUFXLEVBQUVoQixTQUFVLENBQUM7QUFDM0QsZUFBZUEsU0FBUyJ9