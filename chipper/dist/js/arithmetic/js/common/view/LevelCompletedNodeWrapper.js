// Copyright 2014-2022, University of Colorado Boulder

/**
 * This node shows the level completed node when the user completes a level.
 *
 * @author Andrey Zelenkov (MLearner)
 */

import { Color, Node } from '../../../../scenery/js/imports.js';
import LevelCompletedNode from '../../../../vegas/js/LevelCompletedNode.js';
import arithmetic from '../../arithmetic.js';
import ArithmeticConstants from '../ArithmeticConstants.js';
import GameState from '../model/GameState.js';
class LevelCompletedNodeWrapper extends Node {
  /**
   * @param {Array} levelModels - Array of descriptions for each level. Necessary to get perfect and current score for
   * completed level.
   * @param {Property} levelNumberProperty - Level property.
   * @param {Property} stateProperty - Game state property.
   * @param {Property} timerEnabledProperty - Timer enabled flag.
   * @param {Function} continueCallback - Callback listener for continue button.
   * @param {Bounds2} layoutBounds - Bounds of main screen. Necessary for placing components.
   */
  constructor(levelModels, levelNumberProperty, stateProperty, timerEnabledProperty, continueCallback, layoutBounds) {
    super();

    // Show this node only when the level has been completed.
    stateProperty.lazyLink(state => {
      if (state === GameState.SHOWING_LEVEL_COMPLETED_DIALOG) {
        const levelModel = levelModels[levelNumberProperty.value];
        this.addChild(new LevelCompletedNode(levelNumberProperty.value + 1, levelModel.currentScoreProperty.get(), levelModel.perfectScore, ArithmeticConstants.NUM_STARS, timerEnabledProperty.value, levelModel.gameTimer.elapsedTimeProperty.value, levelModel.bestTimeProperty.get(), levelModel.gameTimer.elapsedTimeProperty.get() < levelModel.bestTimeProperty.get(), continueCallback, {
          fill: new Color(255, 235, 205),
          centerX: layoutBounds.maxX / 2,
          centerY: layoutBounds.maxY / 2
        }));
      } else if (state === GameState.AWAITING_USER_INPUT || state === GameState.LEVEL_COMPLETED) {
        this.removeAllChildren();
      }
    });
  }
}
arithmetic.register('LevelCompletedNodeWrapper', LevelCompletedNodeWrapper);
export default LevelCompletedNodeWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb2xvciIsIk5vZGUiLCJMZXZlbENvbXBsZXRlZE5vZGUiLCJhcml0aG1ldGljIiwiQXJpdGhtZXRpY0NvbnN0YW50cyIsIkdhbWVTdGF0ZSIsIkxldmVsQ29tcGxldGVkTm9kZVdyYXBwZXIiLCJjb25zdHJ1Y3RvciIsImxldmVsTW9kZWxzIiwibGV2ZWxOdW1iZXJQcm9wZXJ0eSIsInN0YXRlUHJvcGVydHkiLCJ0aW1lckVuYWJsZWRQcm9wZXJ0eSIsImNvbnRpbnVlQ2FsbGJhY2siLCJsYXlvdXRCb3VuZHMiLCJsYXp5TGluayIsInN0YXRlIiwiU0hPV0lOR19MRVZFTF9DT01QTEVURURfRElBTE9HIiwibGV2ZWxNb2RlbCIsInZhbHVlIiwiYWRkQ2hpbGQiLCJjdXJyZW50U2NvcmVQcm9wZXJ0eSIsImdldCIsInBlcmZlY3RTY29yZSIsIk5VTV9TVEFSUyIsImdhbWVUaW1lciIsImVsYXBzZWRUaW1lUHJvcGVydHkiLCJiZXN0VGltZVByb3BlcnR5IiwiZmlsbCIsImNlbnRlclgiLCJtYXhYIiwiY2VudGVyWSIsIm1heFkiLCJBV0FJVElOR19VU0VSX0lOUFVUIiwiTEVWRUxfQ09NUExFVEVEIiwicmVtb3ZlQWxsQ2hpbGRyZW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxldmVsQ29tcGxldGVkTm9kZVdyYXBwZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBub2RlIHNob3dzIHRoZSBsZXZlbCBjb21wbGV0ZWQgbm9kZSB3aGVuIHRoZSB1c2VyIGNvbXBsZXRlcyBhIGxldmVsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJleSBaZWxlbmtvdiAoTUxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29sb3IsIE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTGV2ZWxDb21wbGV0ZWROb2RlIGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL0xldmVsQ29tcGxldGVkTm9kZS5qcyc7XHJcbmltcG9ydCBhcml0aG1ldGljIGZyb20gJy4uLy4uL2FyaXRobWV0aWMuanMnO1xyXG5pbXBvcnQgQXJpdGhtZXRpY0NvbnN0YW50cyBmcm9tICcuLi9Bcml0aG1ldGljQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdhbWVTdGF0ZSBmcm9tICcuLi9tb2RlbC9HYW1lU3RhdGUuanMnO1xyXG5cclxuY2xhc3MgTGV2ZWxDb21wbGV0ZWROb2RlV3JhcHBlciBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0FycmF5fSBsZXZlbE1vZGVscyAtIEFycmF5IG9mIGRlc2NyaXB0aW9ucyBmb3IgZWFjaCBsZXZlbC4gTmVjZXNzYXJ5IHRvIGdldCBwZXJmZWN0IGFuZCBjdXJyZW50IHNjb3JlIGZvclxyXG4gICAqIGNvbXBsZXRlZCBsZXZlbC5cclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5fSBsZXZlbE51bWJlclByb3BlcnR5IC0gTGV2ZWwgcHJvcGVydHkuXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eX0gc3RhdGVQcm9wZXJ0eSAtIEdhbWUgc3RhdGUgcHJvcGVydHkuXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eX0gdGltZXJFbmFibGVkUHJvcGVydHkgLSBUaW1lciBlbmFibGVkIGZsYWcuXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29udGludWVDYWxsYmFjayAtIENhbGxiYWNrIGxpc3RlbmVyIGZvciBjb250aW51ZSBidXR0b24uXHJcbiAgICogQHBhcmFtIHtCb3VuZHMyfSBsYXlvdXRCb3VuZHMgLSBCb3VuZHMgb2YgbWFpbiBzY3JlZW4uIE5lY2Vzc2FyeSBmb3IgcGxhY2luZyBjb21wb25lbnRzLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBsZXZlbE1vZGVscywgbGV2ZWxOdW1iZXJQcm9wZXJ0eSwgc3RhdGVQcm9wZXJ0eSwgdGltZXJFbmFibGVkUHJvcGVydHksIGNvbnRpbnVlQ2FsbGJhY2ssIGxheW91dEJvdW5kcyApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gU2hvdyB0aGlzIG5vZGUgb25seSB3aGVuIHRoZSBsZXZlbCBoYXMgYmVlbiBjb21wbGV0ZWQuXHJcbiAgICBzdGF0ZVByb3BlcnR5LmxhenlMaW5rKCBzdGF0ZSA9PiB7XHJcbiAgICAgIGlmICggc3RhdGUgPT09IEdhbWVTdGF0ZS5TSE9XSU5HX0xFVkVMX0NPTVBMRVRFRF9ESUFMT0cgKSB7XHJcbiAgICAgICAgY29uc3QgbGV2ZWxNb2RlbCA9IGxldmVsTW9kZWxzWyBsZXZlbE51bWJlclByb3BlcnR5LnZhbHVlIF07XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZCggbmV3IExldmVsQ29tcGxldGVkTm9kZShcclxuICAgICAgICAgIGxldmVsTnVtYmVyUHJvcGVydHkudmFsdWUgKyAxLFxyXG4gICAgICAgICAgbGV2ZWxNb2RlbC5jdXJyZW50U2NvcmVQcm9wZXJ0eS5nZXQoKSxcclxuICAgICAgICAgIGxldmVsTW9kZWwucGVyZmVjdFNjb3JlLFxyXG4gICAgICAgICAgQXJpdGhtZXRpY0NvbnN0YW50cy5OVU1fU1RBUlMsXHJcbiAgICAgICAgICB0aW1lckVuYWJsZWRQcm9wZXJ0eS52YWx1ZSxcclxuICAgICAgICAgIGxldmVsTW9kZWwuZ2FtZVRpbWVyLmVsYXBzZWRUaW1lUHJvcGVydHkudmFsdWUsXHJcbiAgICAgICAgICBsZXZlbE1vZGVsLmJlc3RUaW1lUHJvcGVydHkuZ2V0KCksXHJcbiAgICAgICAgICAoIGxldmVsTW9kZWwuZ2FtZVRpbWVyLmVsYXBzZWRUaW1lUHJvcGVydHkuZ2V0KCkgPCBsZXZlbE1vZGVsLmJlc3RUaW1lUHJvcGVydHkuZ2V0KCkgKSxcclxuICAgICAgICAgIGNvbnRpbnVlQ2FsbGJhY2ssXHJcbiAgICAgICAgICB7IGZpbGw6IG5ldyBDb2xvciggMjU1LCAyMzUsIDIwNSApLCBjZW50ZXJYOiBsYXlvdXRCb3VuZHMubWF4WCAvIDIsIGNlbnRlclk6IGxheW91dEJvdW5kcy5tYXhZIC8gMiB9XHJcbiAgICAgICAgKSApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBzdGF0ZSA9PT0gR2FtZVN0YXRlLkFXQUlUSU5HX1VTRVJfSU5QVVQgfHwgc3RhdGUgPT09IEdhbWVTdGF0ZS5MRVZFTF9DT01QTEVURUQgKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxDaGlsZHJlbigpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5hcml0aG1ldGljLnJlZ2lzdGVyKCAnTGV2ZWxDb21wbGV0ZWROb2RlV3JhcHBlcicsIExldmVsQ29tcGxldGVkTm9kZVdyYXBwZXIgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExldmVsQ29tcGxldGVkTm9kZVdyYXBwZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUMvRCxPQUFPQyxrQkFBa0IsTUFBTSw0Q0FBNEM7QUFDM0UsT0FBT0MsVUFBVSxNQUFNLHFCQUFxQjtBQUM1QyxPQUFPQyxtQkFBbUIsTUFBTSwyQkFBMkI7QUFDM0QsT0FBT0MsU0FBUyxNQUFNLHVCQUF1QjtBQUU3QyxNQUFNQyx5QkFBeUIsU0FBU0wsSUFBSSxDQUFDO0VBRTNDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxXQUFXLEVBQUVDLG1CQUFtQixFQUFFQyxhQUFhLEVBQUVDLG9CQUFvQixFQUFFQyxnQkFBZ0IsRUFBRUMsWUFBWSxFQUFHO0lBQ25ILEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0FILGFBQWEsQ0FBQ0ksUUFBUSxDQUFFQyxLQUFLLElBQUk7TUFDL0IsSUFBS0EsS0FBSyxLQUFLVixTQUFTLENBQUNXLDhCQUE4QixFQUFHO1FBQ3hELE1BQU1DLFVBQVUsR0FBR1QsV0FBVyxDQUFFQyxtQkFBbUIsQ0FBQ1MsS0FBSyxDQUFFO1FBQzNELElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUlqQixrQkFBa0IsQ0FDbkNPLG1CQUFtQixDQUFDUyxLQUFLLEdBQUcsQ0FBQyxFQUM3QkQsVUFBVSxDQUFDRyxvQkFBb0IsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFDckNKLFVBQVUsQ0FBQ0ssWUFBWSxFQUN2QmxCLG1CQUFtQixDQUFDbUIsU0FBUyxFQUM3Qlosb0JBQW9CLENBQUNPLEtBQUssRUFDMUJELFVBQVUsQ0FBQ08sU0FBUyxDQUFDQyxtQkFBbUIsQ0FBQ1AsS0FBSyxFQUM5Q0QsVUFBVSxDQUFDUyxnQkFBZ0IsQ0FBQ0wsR0FBRyxDQUFDLENBQUMsRUFDL0JKLFVBQVUsQ0FBQ08sU0FBUyxDQUFDQyxtQkFBbUIsQ0FBQ0osR0FBRyxDQUFDLENBQUMsR0FBR0osVUFBVSxDQUFDUyxnQkFBZ0IsQ0FBQ0wsR0FBRyxDQUFDLENBQUMsRUFDcEZULGdCQUFnQixFQUNoQjtVQUFFZSxJQUFJLEVBQUUsSUFBSTNCLEtBQUssQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUksQ0FBQztVQUFFNEIsT0FBTyxFQUFFZixZQUFZLENBQUNnQixJQUFJLEdBQUcsQ0FBQztVQUFFQyxPQUFPLEVBQUVqQixZQUFZLENBQUNrQixJQUFJLEdBQUc7UUFBRSxDQUNyRyxDQUFFLENBQUM7TUFDTCxDQUFDLE1BQ0ksSUFBS2hCLEtBQUssS0FBS1YsU0FBUyxDQUFDMkIsbUJBQW1CLElBQUlqQixLQUFLLEtBQUtWLFNBQVMsQ0FBQzRCLGVBQWUsRUFBRztRQUN6RixJQUFJLENBQUNDLGlCQUFpQixDQUFDLENBQUM7TUFDMUI7SUFDRixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUEvQixVQUFVLENBQUNnQyxRQUFRLENBQUUsMkJBQTJCLEVBQUU3Qix5QkFBMEIsQ0FBQztBQUU3RSxlQUFlQSx5QkFBeUIifQ==