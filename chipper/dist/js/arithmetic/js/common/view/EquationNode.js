// Copyright 2014-2023, University of Colorado Boulder

/**
 * Abstract base type for a scenery node that represents a multiplication equation, with two multipliers and a product,
 * e.g. 2 x 3 = 6.
 *
 * @author Andrey Zelenkov (MLearner)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import merge from '../../../../phet-core/js/merge.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, Text } from '../../../../scenery/js/imports.js';
import arithmetic from '../../arithmetic.js';
import EquationInputNode from './EquationInputNode.js';

// constants
const FONT_EQUALS = new PhetFont(45);
const FONT_X = new PhetFont(50);
const INPUT_SIZE_MULTIPLIER = new Dimension2(70, 45); // size of input boxes for multiplier
const INPUT_SIZE_PRODUCT = new Dimension2(80, 45); // size of input box for product
const SPACING = 20; // spacing between equation elements
const SYMBOL_COLOR = '#FFFF00';
class EquationNode extends HBox {
  /**
   * @param {Property.<number>} multiplicandProperty - Property necessary for creating multiplicand input.
   * @param {Property.<number>} multiplierProperty - Property necessary for creating multiplier input.
   * @param {Property.<number>} productProperty - Property necessary for creating product input.
   * @param {Property.<number>} productProperty - Property necessary for creating product input.
   * @param {Object} [options]
   */
  constructor(multiplicandProperty, multiplierProperty, productProperty, options) {
    options = merge({
      spacing: SPACING,
      resize: false
    }, options);

    // @public - Set up the three nodes that depict the numbers in the equation.
    const multiplicandInput = new EquationInputNode(multiplicandProperty, INPUT_SIZE_MULTIPLIER);
    const multiplierInput = new EquationInputNode(multiplierProperty, INPUT_SIZE_MULTIPLIER);
    const productInput = new EquationInputNode(productProperty, INPUT_SIZE_PRODUCT);

    // @private - Set up the equals sign, which can potentially be changed to a not equals sign.
    const equalsSign = new Text(MathSymbols.EQUAL_TO, {
      font: FONT_EQUALS,
      fill: SYMBOL_COLOR
    });
    options.children = [multiplicandInput, new Text(MathSymbols.TIMES, {
      font: FONT_X,
      fill: SYMBOL_COLOR
    }), multiplierInput, equalsSign, productInput];

    // Perform the layout by placing everything in an HBox.
    super(options);

    // @public - these nodes can be manipulated externally
    this.multiplicandInput = multiplicandInput;
    this.multiplierInput = multiplierInput;
    this.productInput = productInput;

    // @private
    this.equalsSign = equalsSign;

    // Default to equals equation until set otherwise.
    this.setShowEqual(true);
  }

  /**
   * Set the equation to depict equals or not equals.
   *
   * @param {boolean} showEqual
   * @protected
   */
  setShowEqual(showEqual) {
    this.equalsSign.string = showEqual ? MathSymbols.EQUAL_TO : MathSymbols.NOT_EQUAL_TO;
  }
}
arithmetic.register('EquationNode', EquationNode);
export default EquationNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwibWVyZ2UiLCJNYXRoU3ltYm9scyIsIlBoZXRGb250IiwiSEJveCIsIlRleHQiLCJhcml0aG1ldGljIiwiRXF1YXRpb25JbnB1dE5vZGUiLCJGT05UX0VRVUFMUyIsIkZPTlRfWCIsIklOUFVUX1NJWkVfTVVMVElQTElFUiIsIklOUFVUX1NJWkVfUFJPRFVDVCIsIlNQQUNJTkciLCJTWU1CT0xfQ09MT1IiLCJFcXVhdGlvbk5vZGUiLCJjb25zdHJ1Y3RvciIsIm11bHRpcGxpY2FuZFByb3BlcnR5IiwibXVsdGlwbGllclByb3BlcnR5IiwicHJvZHVjdFByb3BlcnR5Iiwib3B0aW9ucyIsInNwYWNpbmciLCJyZXNpemUiLCJtdWx0aXBsaWNhbmRJbnB1dCIsIm11bHRpcGxpZXJJbnB1dCIsInByb2R1Y3RJbnB1dCIsImVxdWFsc1NpZ24iLCJFUVVBTF9UTyIsImZvbnQiLCJmaWxsIiwiY2hpbGRyZW4iLCJUSU1FUyIsInNldFNob3dFcXVhbCIsInNob3dFcXVhbCIsInN0cmluZyIsIk5PVF9FUVVBTF9UTyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1YXRpb25Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEFic3RyYWN0IGJhc2UgdHlwZSBmb3IgYSBzY2VuZXJ5IG5vZGUgdGhhdCByZXByZXNlbnRzIGEgbXVsdGlwbGljYXRpb24gZXF1YXRpb24sIHdpdGggdHdvIG11bHRpcGxpZXJzIGFuZCBhIHByb2R1Y3QsXHJcbiAqIGUuZy4gMiB4IDMgPSA2LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJleSBaZWxlbmtvdiAoTUxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IE1hdGhTeW1ib2xzIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9NYXRoU3ltYm9scy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGFyaXRobWV0aWMgZnJvbSAnLi4vLi4vYXJpdGhtZXRpYy5qcyc7XHJcbmltcG9ydCBFcXVhdGlvbklucHV0Tm9kZSBmcm9tICcuL0VxdWF0aW9uSW5wdXROb2RlLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBGT05UX0VRVUFMUyA9IG5ldyBQaGV0Rm9udCggNDUgKTtcclxuY29uc3QgRk9OVF9YID0gbmV3IFBoZXRGb250KCA1MCApO1xyXG5jb25zdCBJTlBVVF9TSVpFX01VTFRJUExJRVIgPSBuZXcgRGltZW5zaW9uMiggNzAsIDQ1ICk7IC8vIHNpemUgb2YgaW5wdXQgYm94ZXMgZm9yIG11bHRpcGxpZXJcclxuY29uc3QgSU5QVVRfU0laRV9QUk9EVUNUID0gbmV3IERpbWVuc2lvbjIoIDgwLCA0NSApOyAvLyBzaXplIG9mIGlucHV0IGJveCBmb3IgcHJvZHVjdFxyXG5jb25zdCBTUEFDSU5HID0gMjA7IC8vIHNwYWNpbmcgYmV0d2VlbiBlcXVhdGlvbiBlbGVtZW50c1xyXG5jb25zdCBTWU1CT0xfQ09MT1IgPSAnI0ZGRkYwMCc7XHJcblxyXG5jbGFzcyBFcXVhdGlvbk5vZGUgZXh0ZW5kcyBIQm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gbXVsdGlwbGljYW5kUHJvcGVydHkgLSBQcm9wZXJ0eSBuZWNlc3NhcnkgZm9yIGNyZWF0aW5nIG11bHRpcGxpY2FuZCBpbnB1dC5cclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxudW1iZXI+fSBtdWx0aXBsaWVyUHJvcGVydHkgLSBQcm9wZXJ0eSBuZWNlc3NhcnkgZm9yIGNyZWF0aW5nIG11bHRpcGxpZXIgaW5wdXQuXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gcHJvZHVjdFByb3BlcnR5IC0gUHJvcGVydHkgbmVjZXNzYXJ5IGZvciBjcmVhdGluZyBwcm9kdWN0IGlucHV0LlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IHByb2R1Y3RQcm9wZXJ0eSAtIFByb3BlcnR5IG5lY2Vzc2FyeSBmb3IgY3JlYXRpbmcgcHJvZHVjdCBpbnB1dC5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG11bHRpcGxpY2FuZFByb3BlcnR5LCBtdWx0aXBsaWVyUHJvcGVydHksIHByb2R1Y3RQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgc3BhY2luZzogU1BBQ0lORyxcclxuICAgICAgcmVzaXplOiBmYWxzZVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgLSBTZXQgdXAgdGhlIHRocmVlIG5vZGVzIHRoYXQgZGVwaWN0IHRoZSBudW1iZXJzIGluIHRoZSBlcXVhdGlvbi5cclxuICAgIGNvbnN0IG11bHRpcGxpY2FuZElucHV0ID0gbmV3IEVxdWF0aW9uSW5wdXROb2RlKCBtdWx0aXBsaWNhbmRQcm9wZXJ0eSwgSU5QVVRfU0laRV9NVUxUSVBMSUVSICk7XHJcbiAgICBjb25zdCBtdWx0aXBsaWVySW5wdXQgPSBuZXcgRXF1YXRpb25JbnB1dE5vZGUoIG11bHRpcGxpZXJQcm9wZXJ0eSwgSU5QVVRfU0laRV9NVUxUSVBMSUVSICk7XHJcbiAgICBjb25zdCBwcm9kdWN0SW5wdXQgPSBuZXcgRXF1YXRpb25JbnB1dE5vZGUoIHByb2R1Y3RQcm9wZXJ0eSwgSU5QVVRfU0laRV9QUk9EVUNUICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgLSBTZXQgdXAgdGhlIGVxdWFscyBzaWduLCB3aGljaCBjYW4gcG90ZW50aWFsbHkgYmUgY2hhbmdlZCB0byBhIG5vdCBlcXVhbHMgc2lnbi5cclxuICAgIGNvbnN0IGVxdWFsc1NpZ24gPSBuZXcgVGV4dCggTWF0aFN5bWJvbHMuRVFVQUxfVE8sIHsgZm9udDogRk9OVF9FUVVBTFMsIGZpbGw6IFNZTUJPTF9DT0xPUiB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFtcclxuICAgICAgbXVsdGlwbGljYW5kSW5wdXQsXHJcbiAgICAgIG5ldyBUZXh0KCBNYXRoU3ltYm9scy5USU1FUywgeyBmb250OiBGT05UX1gsIGZpbGw6IFNZTUJPTF9DT0xPUiB9ICksXHJcbiAgICAgIG11bHRpcGxpZXJJbnB1dCxcclxuICAgICAgZXF1YWxzU2lnbixcclxuICAgICAgcHJvZHVjdElucHV0XHJcbiAgICBdO1xyXG5cclxuICAgIC8vIFBlcmZvcm0gdGhlIGxheW91dCBieSBwbGFjaW5nIGV2ZXJ5dGhpbmcgaW4gYW4gSEJveC5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAtIHRoZXNlIG5vZGVzIGNhbiBiZSBtYW5pcHVsYXRlZCBleHRlcm5hbGx5XHJcbiAgICB0aGlzLm11bHRpcGxpY2FuZElucHV0ID0gbXVsdGlwbGljYW5kSW5wdXQ7XHJcbiAgICB0aGlzLm11bHRpcGxpZXJJbnB1dCA9IG11bHRpcGxpZXJJbnB1dDtcclxuICAgIHRoaXMucHJvZHVjdElucHV0ID0gcHJvZHVjdElucHV0O1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLmVxdWFsc1NpZ24gPSBlcXVhbHNTaWduO1xyXG5cclxuICAgIC8vIERlZmF1bHQgdG8gZXF1YWxzIGVxdWF0aW9uIHVudGlsIHNldCBvdGhlcndpc2UuXHJcbiAgICB0aGlzLnNldFNob3dFcXVhbCggdHJ1ZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBlcXVhdGlvbiB0byBkZXBpY3QgZXF1YWxzIG9yIG5vdCBlcXVhbHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3dFcXVhbFxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKi9cclxuICBzZXRTaG93RXF1YWwoIHNob3dFcXVhbCApIHtcclxuICAgIHRoaXMuZXF1YWxzU2lnbi5zdHJpbmcgPSBzaG93RXF1YWwgPyBNYXRoU3ltYm9scy5FUVVBTF9UTyA6IE1hdGhTeW1ib2xzLk5PVF9FUVVBTF9UTztcclxuICB9XHJcbn1cclxuXHJcbmFyaXRobWV0aWMucmVnaXN0ZXIoICdFcXVhdGlvbk5vZGUnLCBFcXVhdGlvbk5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEVxdWF0aW9uTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLDRDQUE0QztBQUNwRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxVQUFVLE1BQU0scUJBQXFCO0FBQzVDLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3Qjs7QUFFdEQ7QUFDQSxNQUFNQyxXQUFXLEdBQUcsSUFBSUwsUUFBUSxDQUFFLEVBQUcsQ0FBQztBQUN0QyxNQUFNTSxNQUFNLEdBQUcsSUFBSU4sUUFBUSxDQUFFLEVBQUcsQ0FBQztBQUNqQyxNQUFNTyxxQkFBcUIsR0FBRyxJQUFJVixVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQyxDQUFDLENBQUM7QUFDeEQsTUFBTVcsa0JBQWtCLEdBQUcsSUFBSVgsVUFBVSxDQUFFLEVBQUUsRUFBRSxFQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JELE1BQU1ZLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNwQixNQUFNQyxZQUFZLEdBQUcsU0FBUztBQUU5QixNQUFNQyxZQUFZLFNBQVNWLElBQUksQ0FBQztFQUU5QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFVyxXQUFXQSxDQUFFQyxvQkFBb0IsRUFBRUMsa0JBQWtCLEVBQUVDLGVBQWUsRUFBRUMsT0FBTyxFQUFHO0lBRWhGQSxPQUFPLEdBQUdsQixLQUFLLENBQUU7TUFDZm1CLE9BQU8sRUFBRVIsT0FBTztNQUNoQlMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxFQUFFRixPQUFRLENBQUM7O0lBRVo7SUFDQSxNQUFNRyxpQkFBaUIsR0FBRyxJQUFJZixpQkFBaUIsQ0FBRVMsb0JBQW9CLEVBQUVOLHFCQUFzQixDQUFDO0lBQzlGLE1BQU1hLGVBQWUsR0FBRyxJQUFJaEIsaUJBQWlCLENBQUVVLGtCQUFrQixFQUFFUCxxQkFBc0IsQ0FBQztJQUMxRixNQUFNYyxZQUFZLEdBQUcsSUFBSWpCLGlCQUFpQixDQUFFVyxlQUFlLEVBQUVQLGtCQUFtQixDQUFDOztJQUVqRjtJQUNBLE1BQU1jLFVBQVUsR0FBRyxJQUFJcEIsSUFBSSxDQUFFSCxXQUFXLENBQUN3QixRQUFRLEVBQUU7TUFBRUMsSUFBSSxFQUFFbkIsV0FBVztNQUFFb0IsSUFBSSxFQUFFZjtJQUFhLENBQUUsQ0FBQztJQUU5Rk0sT0FBTyxDQUFDVSxRQUFRLEdBQUcsQ0FDakJQLGlCQUFpQixFQUNqQixJQUFJakIsSUFBSSxDQUFFSCxXQUFXLENBQUM0QixLQUFLLEVBQUU7TUFBRUgsSUFBSSxFQUFFbEIsTUFBTTtNQUFFbUIsSUFBSSxFQUFFZjtJQUFhLENBQUUsQ0FBQyxFQUNuRVUsZUFBZSxFQUNmRSxVQUFVLEVBQ1ZELFlBQVksQ0FDYjs7SUFFRDtJQUNBLEtBQUssQ0FBRUwsT0FBUSxDQUFDOztJQUVoQjtJQUNBLElBQUksQ0FBQ0csaUJBQWlCLEdBQUdBLGlCQUFpQjtJQUMxQyxJQUFJLENBQUNDLGVBQWUsR0FBR0EsZUFBZTtJQUN0QyxJQUFJLENBQUNDLFlBQVksR0FBR0EsWUFBWTs7SUFFaEM7SUFDQSxJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTs7SUFFNUI7SUFDQSxJQUFJLENBQUNNLFlBQVksQ0FBRSxJQUFLLENBQUM7RUFDM0I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VBLFlBQVlBLENBQUVDLFNBQVMsRUFBRztJQUN4QixJQUFJLENBQUNQLFVBQVUsQ0FBQ1EsTUFBTSxHQUFHRCxTQUFTLEdBQUc5QixXQUFXLENBQUN3QixRQUFRLEdBQUd4QixXQUFXLENBQUNnQyxZQUFZO0VBQ3RGO0FBQ0Y7QUFFQTVCLFVBQVUsQ0FBQzZCLFFBQVEsQ0FBRSxjQUFjLEVBQUVyQixZQUFhLENBQUM7QUFFbkQsZUFBZUEsWUFBWSJ9