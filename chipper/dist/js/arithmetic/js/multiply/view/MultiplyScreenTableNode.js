// Copyright 2014-2021, University of Colorado Boulder

/**
 * Multiplication table node for the 'Multiply' screen in the 'Arithmetic' simulation.
 *
 * @author Andrey Zelenkov (MLearner)
 */

import arithmetic from '../../arithmetic.js';
import GameState from '../../common/model/GameState.js';
import MultiplicationTableNode from '../../common/view/table/MultiplicationTableNode.js';
class MultiplyScreenTableNode extends MultiplicationTableNode {
  /**
   * @param {ProblemModel} problemModel - Model for single multiplication problem.
   * @param {Property} levelNumberProperty - Level difficulty property.
   * @param {Property} stateProperty - Current state property.
   * @param {Array} levelModels - Array of descriptions for each level.
   *
   */
  constructor(problemModel, stateProperty, levelNumberProperty, levelModels) {
    super(levelNumberProperty, stateProperty, levelModels, true);
    this.problemModel = problemModel; // @private

    stateProperty.lazyLink(state => {
      // set view for multiplication table after choosing multiplicand and multiplier
      if (state === GameState.AWAITING_USER_INPUT) {
        // select the cells that correspond to the current problem
        this.setCellAppearanceForProblem(levelNumberProperty.value);
      } else if (state === GameState.LEVEL_COMPLETED) {
        // set all cells to default conditions when the table has been filled
        this.setCellsToDefaultColor(levelNumberProperty.value);
      }
    });
  }

  // @public, @override
  refreshLevel(level) {
    super.refreshLevel(level);
    this.setCellAppearanceForProblem(level);
  }

  // @private, set the appearance of the cells based on the currently presented problem
  setCellAppearanceForProblem(level) {
    this.setCellsToDefaultColor(level);

    // set the header cells for this problem to the selected state
    this.cells[level][0][this.problemModel.multiplierProperty.get()].setSelected();
    this.cells[level][this.problemModel.multiplicandProperty.get()][0].setSelected();

    // create a rectangle of selected body cells with a width defined by the multiplier and a height defined by the
    // multplicand
    this.cells[level].forEach((multiplicand, index) => {
      if (index && index <= this.problemModel.multiplicandProperty.get()) {
        multiplicand.forEach((cell, index) => {
          if (index && index <= this.problemModel.multiplierProperty.get()) {
            cell.setSelected();
          }
        });
      }
    });
  }
}
arithmetic.register('MultiplyScreenTableNode', MultiplyScreenTableNode);
export default MultiplyScreenTableNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcml0aG1ldGljIiwiR2FtZVN0YXRlIiwiTXVsdGlwbGljYXRpb25UYWJsZU5vZGUiLCJNdWx0aXBseVNjcmVlblRhYmxlTm9kZSIsImNvbnN0cnVjdG9yIiwicHJvYmxlbU1vZGVsIiwic3RhdGVQcm9wZXJ0eSIsImxldmVsTnVtYmVyUHJvcGVydHkiLCJsZXZlbE1vZGVscyIsImxhenlMaW5rIiwic3RhdGUiLCJBV0FJVElOR19VU0VSX0lOUFVUIiwic2V0Q2VsbEFwcGVhcmFuY2VGb3JQcm9ibGVtIiwidmFsdWUiLCJMRVZFTF9DT01QTEVURUQiLCJzZXRDZWxsc1RvRGVmYXVsdENvbG9yIiwicmVmcmVzaExldmVsIiwibGV2ZWwiLCJjZWxscyIsIm11bHRpcGxpZXJQcm9wZXJ0eSIsImdldCIsInNldFNlbGVjdGVkIiwibXVsdGlwbGljYW5kUHJvcGVydHkiLCJmb3JFYWNoIiwibXVsdGlwbGljYW5kIiwiaW5kZXgiLCJjZWxsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNdWx0aXBseVNjcmVlblRhYmxlTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsaWNhdGlvbiB0YWJsZSBub2RlIGZvciB0aGUgJ011bHRpcGx5JyBzY3JlZW4gaW4gdGhlICdBcml0aG1ldGljJyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJleSBaZWxlbmtvdiAoTUxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGFyaXRobWV0aWMgZnJvbSAnLi4vLi4vYXJpdGhtZXRpYy5qcyc7XHJcbmltcG9ydCBHYW1lU3RhdGUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0dhbWVTdGF0ZS5qcyc7XHJcbmltcG9ydCBNdWx0aXBsaWNhdGlvblRhYmxlTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy90YWJsZS9NdWx0aXBsaWNhdGlvblRhYmxlTm9kZS5qcyc7XHJcblxyXG5jbGFzcyBNdWx0aXBseVNjcmVlblRhYmxlTm9kZSBleHRlbmRzIE11bHRpcGxpY2F0aW9uVGFibGVOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9ibGVtTW9kZWx9IHByb2JsZW1Nb2RlbCAtIE1vZGVsIGZvciBzaW5nbGUgbXVsdGlwbGljYXRpb24gcHJvYmxlbS5cclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5fSBsZXZlbE51bWJlclByb3BlcnR5IC0gTGV2ZWwgZGlmZmljdWx0eSBwcm9wZXJ0eS5cclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5fSBzdGF0ZVByb3BlcnR5IC0gQ3VycmVudCBzdGF0ZSBwcm9wZXJ0eS5cclxuICAgKiBAcGFyYW0ge0FycmF5fSBsZXZlbE1vZGVscyAtIEFycmF5IG9mIGRlc2NyaXB0aW9ucyBmb3IgZWFjaCBsZXZlbC5cclxuICAgKlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwcm9ibGVtTW9kZWwsIHN0YXRlUHJvcGVydHksIGxldmVsTnVtYmVyUHJvcGVydHksIGxldmVsTW9kZWxzICkge1xyXG4gICAgc3VwZXIoIGxldmVsTnVtYmVyUHJvcGVydHksIHN0YXRlUHJvcGVydHksIGxldmVsTW9kZWxzLCB0cnVlICk7XHJcbiAgICB0aGlzLnByb2JsZW1Nb2RlbCA9IHByb2JsZW1Nb2RlbDsgLy8gQHByaXZhdGVcclxuXHJcbiAgICBzdGF0ZVByb3BlcnR5LmxhenlMaW5rKCBzdGF0ZSA9PiB7XHJcblxyXG4gICAgICAvLyBzZXQgdmlldyBmb3IgbXVsdGlwbGljYXRpb24gdGFibGUgYWZ0ZXIgY2hvb3NpbmcgbXVsdGlwbGljYW5kIGFuZCBtdWx0aXBsaWVyXHJcbiAgICAgIGlmICggc3RhdGUgPT09IEdhbWVTdGF0ZS5BV0FJVElOR19VU0VSX0lOUFVUICkge1xyXG5cclxuICAgICAgICAvLyBzZWxlY3QgdGhlIGNlbGxzIHRoYXQgY29ycmVzcG9uZCB0byB0aGUgY3VycmVudCBwcm9ibGVtXHJcbiAgICAgICAgdGhpcy5zZXRDZWxsQXBwZWFyYW5jZUZvclByb2JsZW0oIGxldmVsTnVtYmVyUHJvcGVydHkudmFsdWUgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggc3RhdGUgPT09IEdhbWVTdGF0ZS5MRVZFTF9DT01QTEVURUQgKSB7XHJcblxyXG4gICAgICAgIC8vIHNldCBhbGwgY2VsbHMgdG8gZGVmYXVsdCBjb25kaXRpb25zIHdoZW4gdGhlIHRhYmxlIGhhcyBiZWVuIGZpbGxlZFxyXG4gICAgICAgIHRoaXMuc2V0Q2VsbHNUb0RlZmF1bHRDb2xvciggbGV2ZWxOdW1iZXJQcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljLCBAb3ZlcnJpZGVcclxuICByZWZyZXNoTGV2ZWwoIGxldmVsICkge1xyXG4gICAgc3VwZXIucmVmcmVzaExldmVsKCBsZXZlbCApO1xyXG4gICAgdGhpcy5zZXRDZWxsQXBwZWFyYW5jZUZvclByb2JsZW0oIGxldmVsICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHJpdmF0ZSwgc2V0IHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBjZWxscyBiYXNlZCBvbiB0aGUgY3VycmVudGx5IHByZXNlbnRlZCBwcm9ibGVtXHJcbiAgc2V0Q2VsbEFwcGVhcmFuY2VGb3JQcm9ibGVtKCBsZXZlbCApIHtcclxuICAgIHRoaXMuc2V0Q2VsbHNUb0RlZmF1bHRDb2xvciggbGV2ZWwgKTtcclxuXHJcbiAgICAvLyBzZXQgdGhlIGhlYWRlciBjZWxscyBmb3IgdGhpcyBwcm9ibGVtIHRvIHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gICAgdGhpcy5jZWxsc1sgbGV2ZWwgXVsgMCBdWyB0aGlzLnByb2JsZW1Nb2RlbC5tdWx0aXBsaWVyUHJvcGVydHkuZ2V0KCkgXS5zZXRTZWxlY3RlZCgpO1xyXG4gICAgdGhpcy5jZWxsc1sgbGV2ZWwgXVsgdGhpcy5wcm9ibGVtTW9kZWwubXVsdGlwbGljYW5kUHJvcGVydHkuZ2V0KCkgXVsgMCBdLnNldFNlbGVjdGVkKCk7XHJcblxyXG4gICAgLy8gY3JlYXRlIGEgcmVjdGFuZ2xlIG9mIHNlbGVjdGVkIGJvZHkgY2VsbHMgd2l0aCBhIHdpZHRoIGRlZmluZWQgYnkgdGhlIG11bHRpcGxpZXIgYW5kIGEgaGVpZ2h0IGRlZmluZWQgYnkgdGhlXHJcbiAgICAvLyBtdWx0cGxpY2FuZFxyXG4gICAgdGhpcy5jZWxsc1sgbGV2ZWwgXS5mb3JFYWNoKCAoIG11bHRpcGxpY2FuZCwgaW5kZXggKSA9PiB7XHJcbiAgICAgIGlmICggaW5kZXggJiYgaW5kZXggPD0gdGhpcy5wcm9ibGVtTW9kZWwubXVsdGlwbGljYW5kUHJvcGVydHkuZ2V0KCkgKSB7XHJcbiAgICAgICAgbXVsdGlwbGljYW5kLmZvckVhY2goICggY2VsbCwgaW5kZXggKSA9PiB7XHJcbiAgICAgICAgICBpZiAoIGluZGV4ICYmIGluZGV4IDw9IHRoaXMucHJvYmxlbU1vZGVsLm11bHRpcGxpZXJQcm9wZXJ0eS5nZXQoKSApIHtcclxuICAgICAgICAgICAgY2VsbC5zZXRTZWxlY3RlZCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuYXJpdGhtZXRpYy5yZWdpc3RlciggJ011bHRpcGx5U2NyZWVuVGFibGVOb2RlJywgTXVsdGlwbHlTY3JlZW5UYWJsZU5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE11bHRpcGx5U2NyZWVuVGFibGVOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0scUJBQXFCO0FBQzVDLE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsdUJBQXVCLE1BQU0sb0RBQW9EO0FBRXhGLE1BQU1DLHVCQUF1QixTQUFTRCx1QkFBdUIsQ0FBQztFQUU1RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxZQUFZLEVBQUVDLGFBQWEsRUFBRUMsbUJBQW1CLEVBQUVDLFdBQVcsRUFBRztJQUMzRSxLQUFLLENBQUVELG1CQUFtQixFQUFFRCxhQUFhLEVBQUVFLFdBQVcsRUFBRSxJQUFLLENBQUM7SUFDOUQsSUFBSSxDQUFDSCxZQUFZLEdBQUdBLFlBQVksQ0FBQyxDQUFDOztJQUVsQ0MsYUFBYSxDQUFDRyxRQUFRLENBQUVDLEtBQUssSUFBSTtNQUUvQjtNQUNBLElBQUtBLEtBQUssS0FBS1QsU0FBUyxDQUFDVSxtQkFBbUIsRUFBRztRQUU3QztRQUNBLElBQUksQ0FBQ0MsMkJBQTJCLENBQUVMLG1CQUFtQixDQUFDTSxLQUFNLENBQUM7TUFDL0QsQ0FBQyxNQUNJLElBQUtILEtBQUssS0FBS1QsU0FBUyxDQUFDYSxlQUFlLEVBQUc7UUFFOUM7UUFDQSxJQUFJLENBQUNDLHNCQUFzQixDQUFFUixtQkFBbUIsQ0FBQ00sS0FBTSxDQUFDO01BQzFEO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7RUFDQUcsWUFBWUEsQ0FBRUMsS0FBSyxFQUFHO0lBQ3BCLEtBQUssQ0FBQ0QsWUFBWSxDQUFFQyxLQUFNLENBQUM7SUFDM0IsSUFBSSxDQUFDTCwyQkFBMkIsQ0FBRUssS0FBTSxDQUFDO0VBQzNDOztFQUVBO0VBQ0FMLDJCQUEyQkEsQ0FBRUssS0FBSyxFQUFHO0lBQ25DLElBQUksQ0FBQ0Ysc0JBQXNCLENBQUVFLEtBQU0sQ0FBQzs7SUFFcEM7SUFDQSxJQUFJLENBQUNDLEtBQUssQ0FBRUQsS0FBSyxDQUFFLENBQUUsQ0FBQyxDQUFFLENBQUUsSUFBSSxDQUFDWixZQUFZLENBQUNjLGtCQUFrQixDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFFLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BGLElBQUksQ0FBQ0gsS0FBSyxDQUFFRCxLQUFLLENBQUUsQ0FBRSxJQUFJLENBQUNaLFlBQVksQ0FBQ2lCLG9CQUFvQixDQUFDRixHQUFHLENBQUMsQ0FBQyxDQUFFLENBQUUsQ0FBQyxDQUFFLENBQUNDLFdBQVcsQ0FBQyxDQUFDOztJQUV0RjtJQUNBO0lBQ0EsSUFBSSxDQUFDSCxLQUFLLENBQUVELEtBQUssQ0FBRSxDQUFDTSxPQUFPLENBQUUsQ0FBRUMsWUFBWSxFQUFFQyxLQUFLLEtBQU07TUFDdEQsSUFBS0EsS0FBSyxJQUFJQSxLQUFLLElBQUksSUFBSSxDQUFDcEIsWUFBWSxDQUFDaUIsb0JBQW9CLENBQUNGLEdBQUcsQ0FBQyxDQUFDLEVBQUc7UUFDcEVJLFlBQVksQ0FBQ0QsT0FBTyxDQUFFLENBQUVHLElBQUksRUFBRUQsS0FBSyxLQUFNO1VBQ3ZDLElBQUtBLEtBQUssSUFBSUEsS0FBSyxJQUFJLElBQUksQ0FBQ3BCLFlBQVksQ0FBQ2Msa0JBQWtCLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEVBQUc7WUFDbEVNLElBQUksQ0FBQ0wsV0FBVyxDQUFDLENBQUM7VUFDcEI7UUFDRixDQUFFLENBQUM7TUFDTDtJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXJCLFVBQVUsQ0FBQzJCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRXhCLHVCQUF3QixDQUFDO0FBRXpFLGVBQWVBLHVCQUF1QiJ9