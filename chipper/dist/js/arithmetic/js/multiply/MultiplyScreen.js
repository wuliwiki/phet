// Copyright 2014-2022, University of Colorado Boulder

/**
 * The 'Multiply' screen. Conforms to the contract specified in joist/Screen.
 *
 * @author John Blanco, Andrey Zelenkov (MLearner)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import merge from '../../../phet-core/js/merge.js';
import Tandem from '../../../tandem/js/Tandem.js';
import arithmetic from '../arithmetic.js';
import ArithmeticStrings from '../ArithmeticStrings.js';
import ArithmeticConstants from '../common/ArithmeticConstants.js';
import MultiplyModel from './model/MultiplyModel.js';
import MultiplyScreenIconNode from './view/MultiplyScreenIconNode.js';
import MultiplyView from './view/MultiplyView.js';
class MultiplyScreen extends Screen {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      name: ArithmeticStrings.multiplyStringProperty,
      homeScreenIcon: new ScreenIcon(new MultiplyScreenIconNode(), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      backgroundColorProperty: new Property(ArithmeticConstants.BACKGROUND_COLOR),
      tandem: Tandem.REQUIRED
    }, options);
    super(() => new MultiplyModel(options.tandem.createTandem('model')), model => new MultiplyView(model), options);
  }
}
arithmetic.register('MultiplyScreen', MultiplyScreen);
export default MultiplyScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJtZXJnZSIsIlRhbmRlbSIsImFyaXRobWV0aWMiLCJBcml0aG1ldGljU3RyaW5ncyIsIkFyaXRobWV0aWNDb25zdGFudHMiLCJNdWx0aXBseU1vZGVsIiwiTXVsdGlwbHlTY3JlZW5JY29uTm9kZSIsIk11bHRpcGx5VmlldyIsIk11bHRpcGx5U2NyZWVuIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsIm11bHRpcGx5U3RyaW5nUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiQkFDS0dST1VORF9DT0xPUiIsInRhbmRlbSIsIlJFUVVJUkVEIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk11bHRpcGx5U2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnTXVsdGlwbHknIHNjcmVlbi4gQ29uZm9ybXMgdG8gdGhlIGNvbnRyYWN0IHNwZWNpZmllZCBpbiBqb2lzdC9TY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28sIEFuZHJleSBaZWxlbmtvdiAoTUxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IGFyaXRobWV0aWMgZnJvbSAnLi4vYXJpdGhtZXRpYy5qcyc7XHJcbmltcG9ydCBBcml0aG1ldGljU3RyaW5ncyBmcm9tICcuLi9Bcml0aG1ldGljU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBBcml0aG1ldGljQ29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbi9Bcml0aG1ldGljQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IE11bHRpcGx5TW9kZWwgZnJvbSAnLi9tb2RlbC9NdWx0aXBseU1vZGVsLmpzJztcclxuaW1wb3J0IE11bHRpcGx5U2NyZWVuSWNvbk5vZGUgZnJvbSAnLi92aWV3L011bHRpcGx5U2NyZWVuSWNvbk5vZGUuanMnO1xyXG5pbXBvcnQgTXVsdGlwbHlWaWV3IGZyb20gJy4vdmlldy9NdWx0aXBseVZpZXcuanMnO1xyXG5cclxuY2xhc3MgTXVsdGlwbHlTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG5hbWU6IEFyaXRobWV0aWNTdHJpbmdzLm11bHRpcGx5U3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU2NyZWVuSWNvbiggbmV3IE11bHRpcGx5U2NyZWVuSWNvbk5vZGUoKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBBcml0aG1ldGljQ29uc3RhbnRzLkJBQ0tHUk9VTkRfQ09MT1IgKSxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IE11bHRpcGx5TW9kZWwoIG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBNdWx0aXBseVZpZXcoIG1vZGVsICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5hcml0aG1ldGljLnJlZ2lzdGVyKCAnTXVsdGlwbHlTY3JlZW4nLCBNdWx0aXBseVNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBNdWx0aXBseVNjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBQ2pELE9BQU9DLFVBQVUsTUFBTSxrQkFBa0I7QUFDekMsT0FBT0MsaUJBQWlCLE1BQU0seUJBQXlCO0FBQ3ZELE9BQU9DLG1CQUFtQixNQUFNLGtDQUFrQztBQUNsRSxPQUFPQyxhQUFhLE1BQU0sMEJBQTBCO0FBQ3BELE9BQU9DLHNCQUFzQixNQUFNLGtDQUFrQztBQUNyRSxPQUFPQyxZQUFZLE1BQU0sd0JBQXdCO0FBRWpELE1BQU1DLGNBQWMsU0FBU1YsTUFBTSxDQUFDO0VBRWxDO0FBQ0Y7QUFDQTtFQUNFVyxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckJBLE9BQU8sR0FBR1YsS0FBSyxDQUFFO01BQ2ZXLElBQUksRUFBRVIsaUJBQWlCLENBQUNTLHNCQUFzQjtNQUM5Q0MsY0FBYyxFQUFFLElBQUlkLFVBQVUsQ0FBRSxJQUFJTyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUU7UUFDNURRLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUUsQ0FBQztNQUNIQyx1QkFBdUIsRUFBRSxJQUFJbkIsUUFBUSxDQUFFTyxtQkFBbUIsQ0FBQ2EsZ0JBQWlCLENBQUM7TUFDN0VDLE1BQU0sRUFBRWpCLE1BQU0sQ0FBQ2tCO0lBQ2pCLENBQUMsRUFBRVQsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUNILE1BQU0sSUFBSUwsYUFBYSxDQUFFSyxPQUFPLENBQUNRLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQ2pFQyxLQUFLLElBQUksSUFBSWQsWUFBWSxDQUFFYyxLQUFNLENBQUMsRUFDbENYLE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVIsVUFBVSxDQUFDb0IsUUFBUSxDQUFFLGdCQUFnQixFQUFFZCxjQUFlLENBQUM7QUFDdkQsZUFBZUEsY0FBYyJ9