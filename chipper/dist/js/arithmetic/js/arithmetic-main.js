// Copyright 2014-2022, University of Colorado Boulder

/**
 * Main entry point for the 'Arithmetic' sim.
 *
 * @author John Blanco, Andrey Zelenkov (MLearner)
 */

import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import Tandem from '../../tandem/js/Tandem.js';
import ArithmeticStrings from './ArithmeticStrings.js';
import DivideScreen from './divide/DivideScreen.js';
import FactorScreen from './factor/FactorScreen.js';
import MultiplyScreen from './multiply/MultiplyScreen.js';

// strings and images
const arithmeticTitleStringProperty = ArithmeticStrings.arithmetic.titleStringProperty;

// constants
const tandem = Tandem.ROOT;
const simOptions = {
  credits: {
    leadDesign: 'Michael Dubson, Amanda McGarry',
    softwareDevelopment: 'John Blanco, Michael Dubson',
    team: 'Bryce Gruneich, Karina K. R. Hensberry, Trish Loeblein, Ariel Paul, Kathy Perkins, Beth Stade',
    qualityAssurance: 'Steele Dalton, Bryce Griebenow, Elise Morgan, Oliver Orejola, Ben Roberts, Bryan Yoelin',
    thanks: 'Thanks to Mobile Learner Labs for working with the PhET development team to convert this simulation to HTML5.'
  }
};
simLauncher.launch(() => {
  // Create and start the sim
  new Sim(arithmeticTitleStringProperty, [new MultiplyScreen({
    tandem: tandem.createTandem('multiplyScreen')
  }), new FactorScreen({
    tandem: tandem.createTandem('factorScreen')
  }), new DivideScreen({
    tandem: tandem.createTandem('divideScreen')
  })], simOptions).start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW0iLCJzaW1MYXVuY2hlciIsIlRhbmRlbSIsIkFyaXRobWV0aWNTdHJpbmdzIiwiRGl2aWRlU2NyZWVuIiwiRmFjdG9yU2NyZWVuIiwiTXVsdGlwbHlTY3JlZW4iLCJhcml0aG1ldGljVGl0bGVTdHJpbmdQcm9wZXJ0eSIsImFyaXRobWV0aWMiLCJ0aXRsZVN0cmluZ1Byb3BlcnR5IiwidGFuZGVtIiwiUk9PVCIsInNpbU9wdGlvbnMiLCJjcmVkaXRzIiwibGVhZERlc2lnbiIsInNvZnR3YXJlRGV2ZWxvcG1lbnQiLCJ0ZWFtIiwicXVhbGl0eUFzc3VyYW5jZSIsInRoYW5rcyIsImxhdW5jaCIsImNyZWF0ZVRhbmRlbSIsInN0YXJ0Il0sInNvdXJjZXMiOlsiYXJpdGhtZXRpYy1tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSAnQXJpdGhtZXRpYycgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvLCBBbmRyZXkgWmVsZW5rb3YgKE1MZWFybmVyKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTaW0gZnJvbSAnLi4vLi4vam9pc3QvanMvU2ltLmpzJztcclxuaW1wb3J0IHNpbUxhdW5jaGVyIGZyb20gJy4uLy4uL2pvaXN0L2pzL3NpbUxhdW5jaGVyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEFyaXRobWV0aWNTdHJpbmdzIGZyb20gJy4vQXJpdGhtZXRpY1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgRGl2aWRlU2NyZWVuIGZyb20gJy4vZGl2aWRlL0RpdmlkZVNjcmVlbi5qcyc7XHJcbmltcG9ydCBGYWN0b3JTY3JlZW4gZnJvbSAnLi9mYWN0b3IvRmFjdG9yU2NyZWVuLmpzJztcclxuaW1wb3J0IE11bHRpcGx5U2NyZWVuIGZyb20gJy4vbXVsdGlwbHkvTXVsdGlwbHlTY3JlZW4uanMnO1xyXG5cclxuLy8gc3RyaW5ncyBhbmQgaW1hZ2VzXHJcbmNvbnN0IGFyaXRobWV0aWNUaXRsZVN0cmluZ1Byb3BlcnR5ID0gQXJpdGhtZXRpY1N0cmluZ3MuYXJpdGhtZXRpYy50aXRsZVN0cmluZ1Byb3BlcnR5O1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IHRhbmRlbSA9IFRhbmRlbS5ST09UO1xyXG5cclxuY29uc3Qgc2ltT3B0aW9ucyA9IHtcclxuICBjcmVkaXRzOiB7XHJcbiAgICBsZWFkRGVzaWduOiAnTWljaGFlbCBEdWJzb24sIEFtYW5kYSBNY0dhcnJ5JyxcclxuICAgIHNvZnR3YXJlRGV2ZWxvcG1lbnQ6ICdKb2huIEJsYW5jbywgTWljaGFlbCBEdWJzb24nLFxyXG4gICAgdGVhbTogJ0JyeWNlIEdydW5laWNoLCBLYXJpbmEgSy4gUi4gSGVuc2JlcnJ5LCBUcmlzaCBMb2VibGVpbiwgQXJpZWwgUGF1bCwgS2F0aHkgUGVya2lucywgQmV0aCBTdGFkZScsXHJcbiAgICBxdWFsaXR5QXNzdXJhbmNlOiAnU3RlZWxlIERhbHRvbiwgQnJ5Y2UgR3JpZWJlbm93LCBFbGlzZSBNb3JnYW4sIE9saXZlciBPcmVqb2xhLCBCZW4gUm9iZXJ0cywgQnJ5YW4gWW9lbGluJyxcclxuICAgIHRoYW5rczogJ1RoYW5rcyB0byBNb2JpbGUgTGVhcm5lciBMYWJzIGZvciB3b3JraW5nIHdpdGggdGhlIFBoRVQgZGV2ZWxvcG1lbnQgdGVhbSB0byBjb252ZXJ0IHRoaXMgc2ltdWxhdGlvbiB0byBIVE1MNS4nXHJcbiAgfVxyXG59O1xyXG5cclxuc2ltTGF1bmNoZXIubGF1bmNoKCAoKSA9PiB7XHJcbiAgLy8gQ3JlYXRlIGFuZCBzdGFydCB0aGUgc2ltXHJcbiAgbmV3IFNpbSggYXJpdGhtZXRpY1RpdGxlU3RyaW5nUHJvcGVydHksIFtcclxuICAgIG5ldyBNdWx0aXBseVNjcmVlbiggeyB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtdWx0aXBseVNjcmVlbicgKSB9ICksXHJcbiAgICBuZXcgRmFjdG9yU2NyZWVuKCB7IHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2ZhY3RvclNjcmVlbicgKSB9ICksXHJcbiAgICBuZXcgRGl2aWRlU2NyZWVuKCB7IHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2RpdmlkZVNjcmVlbicgKSB9IClcclxuICBdLCBzaW1PcHRpb25zICkuc3RhcnQoKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxHQUFHLE1BQU0sdUJBQXVCO0FBQ3ZDLE9BQU9DLFdBQVcsTUFBTSwrQkFBK0I7QUFDdkQsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUM5QyxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFDdEQsT0FBT0MsWUFBWSxNQUFNLDBCQUEwQjtBQUNuRCxPQUFPQyxZQUFZLE1BQU0sMEJBQTBCO0FBQ25ELE9BQU9DLGNBQWMsTUFBTSw4QkFBOEI7O0FBRXpEO0FBQ0EsTUFBTUMsNkJBQTZCLEdBQUdKLGlCQUFpQixDQUFDSyxVQUFVLENBQUNDLG1CQUFtQjs7QUFFdEY7QUFDQSxNQUFNQyxNQUFNLEdBQUdSLE1BQU0sQ0FBQ1MsSUFBSTtBQUUxQixNQUFNQyxVQUFVLEdBQUc7RUFDakJDLE9BQU8sRUFBRTtJQUNQQyxVQUFVLEVBQUUsZ0NBQWdDO0lBQzVDQyxtQkFBbUIsRUFBRSw2QkFBNkI7SUFDbERDLElBQUksRUFBRSwrRkFBK0Y7SUFDckdDLGdCQUFnQixFQUFFLHlGQUF5RjtJQUMzR0MsTUFBTSxFQUFFO0VBQ1Y7QUFDRixDQUFDO0FBRURqQixXQUFXLENBQUNrQixNQUFNLENBQUUsTUFBTTtFQUN4QjtFQUNBLElBQUluQixHQUFHLENBQUVPLDZCQUE2QixFQUFFLENBQ3RDLElBQUlELGNBQWMsQ0FBRTtJQUFFSSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLGdCQUFpQjtFQUFFLENBQUUsQ0FBQyxFQUN6RSxJQUFJZixZQUFZLENBQUU7SUFBRUssTUFBTSxFQUFFQSxNQUFNLENBQUNVLFlBQVksQ0FBRSxjQUFlO0VBQUUsQ0FBRSxDQUFDLEVBQ3JFLElBQUloQixZQUFZLENBQUU7SUFBRU0sTUFBTSxFQUFFQSxNQUFNLENBQUNVLFlBQVksQ0FBRSxjQUFlO0VBQUUsQ0FBRSxDQUFDLENBQ3RFLEVBQUVSLFVBQVcsQ0FBQyxDQUFDUyxLQUFLLENBQUMsQ0FBQztBQUN6QixDQUFFLENBQUMifQ==