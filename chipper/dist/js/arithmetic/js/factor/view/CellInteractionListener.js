// Copyright 2015-2021, University of Colorado Boulder

/**
 * This is a Scenery input listener that is meant to be attached to the cells of the multiplication table.  It
 * maintains various state variables and fires events that are meant to enable the various mouse and touch interactions
 * needed for the "Factor" screen.
 *
 * This listener maintains three state variables and fires three events.  See the code for details.
 *
 * @author John Blanco
 */

import Emitter from '../../../../axon/js/Emitter.js';
import Property from '../../../../axon/js/Property.js';
import arithmetic from '../../arithmetic.js';
class CellInteractionListener {
  /**
   */
  constructor() {
    this.mouseOverProperty = new Property(false);
    this.touchedProperty = new Property(false);
    this.enabledProperty = new Property(true);
    this.mouseDownEmitter = new Emitter();
    this.mouseUpEmitter = new Emitter();
    this.touchUpEmitter = new Emitter();
  }

  // @public
  enter(event, trail) {
    if (event.pointer.type === 'mouse') {
      this.mouseOverProperty.set(true);
    } else if (event.pointer.type === 'touch') {
      this.touchedProperty.set(true);
    }
  }

  // @public
  exit(event, trail) {
    if (event.pointer.type === 'mouse') {
      this.mouseOverProperty.set(false);
    } else if (event.pointer.type === 'touch') {
      this.touchedProperty.set(false);
    }
  }

  // @public
  down(event, trail) {
    if (event.pointer.type === 'mouse') {
      this.mouseDownEmitter.emit();
    }
  }

  // @public
  up(event, trail) {
    if (event.pointer.type === 'mouse') {
      this.mouseUpEmitter.emit();
    } else if (event.pointer.type === 'touch') {
      this.touchUpEmitter.emit();
    }
  }
}
arithmetic.register('CellInteractionListener', CellInteractionListener);
export default CellInteractionListener;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiUHJvcGVydHkiLCJhcml0aG1ldGljIiwiQ2VsbEludGVyYWN0aW9uTGlzdGVuZXIiLCJjb25zdHJ1Y3RvciIsIm1vdXNlT3ZlclByb3BlcnR5IiwidG91Y2hlZFByb3BlcnR5IiwiZW5hYmxlZFByb3BlcnR5IiwibW91c2VEb3duRW1pdHRlciIsIm1vdXNlVXBFbWl0dGVyIiwidG91Y2hVcEVtaXR0ZXIiLCJlbnRlciIsImV2ZW50IiwidHJhaWwiLCJwb2ludGVyIiwidHlwZSIsInNldCIsImV4aXQiLCJkb3duIiwiZW1pdCIsInVwIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDZWxsSW50ZXJhY3Rpb25MaXN0ZW5lci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgU2NlbmVyeSBpbnB1dCBsaXN0ZW5lciB0aGF0IGlzIG1lYW50IHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBjZWxscyBvZiB0aGUgbXVsdGlwbGljYXRpb24gdGFibGUuICBJdFxyXG4gKiBtYWludGFpbnMgdmFyaW91cyBzdGF0ZSB2YXJpYWJsZXMgYW5kIGZpcmVzIGV2ZW50cyB0aGF0IGFyZSBtZWFudCB0byBlbmFibGUgdGhlIHZhcmlvdXMgbW91c2UgYW5kIHRvdWNoIGludGVyYWN0aW9uc1xyXG4gKiBuZWVkZWQgZm9yIHRoZSBcIkZhY3RvclwiIHNjcmVlbi5cclxuICpcclxuICogVGhpcyBsaXN0ZW5lciBtYWludGFpbnMgdGhyZWUgc3RhdGUgdmFyaWFibGVzIGFuZCBmaXJlcyB0aHJlZSBldmVudHMuICBTZWUgdGhlIGNvZGUgZm9yIGRldGFpbHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgRW1pdHRlciBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VtaXR0ZXIuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBhcml0aG1ldGljIGZyb20gJy4uLy4uL2FyaXRobWV0aWMuanMnO1xyXG5cclxuY2xhc3MgQ2VsbEludGVyYWN0aW9uTGlzdGVuZXIge1xyXG5cclxuICAvKipcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMubW91c2VPdmVyUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGZhbHNlICk7XHJcbiAgICB0aGlzLnRvdWNoZWRQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggZmFsc2UgKTtcclxuICAgIHRoaXMuZW5hYmxlZFByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCB0cnVlICk7XHJcblxyXG4gICAgdGhpcy5tb3VzZURvd25FbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcclxuICAgIHRoaXMubW91c2VVcEVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xyXG4gICAgdGhpcy50b3VjaFVwRW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgZW50ZXIoIGV2ZW50LCB0cmFpbCApIHtcclxuICAgIGlmICggZXZlbnQucG9pbnRlci50eXBlID09PSAnbW91c2UnICkge1xyXG4gICAgICB0aGlzLm1vdXNlT3ZlclByb3BlcnR5LnNldCggdHJ1ZSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIGV2ZW50LnBvaW50ZXIudHlwZSA9PT0gJ3RvdWNoJyApIHtcclxuICAgICAgdGhpcy50b3VjaGVkUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgZXhpdCggZXZlbnQsIHRyYWlsICkge1xyXG4gICAgaWYgKCBldmVudC5wb2ludGVyLnR5cGUgPT09ICdtb3VzZScgKSB7XHJcbiAgICAgIHRoaXMubW91c2VPdmVyUHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIGV2ZW50LnBvaW50ZXIudHlwZSA9PT0gJ3RvdWNoJyApIHtcclxuICAgICAgdGhpcy50b3VjaGVkUHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQHB1YmxpY1xyXG4gIGRvd24oIGV2ZW50LCB0cmFpbCApIHtcclxuICAgIGlmICggZXZlbnQucG9pbnRlci50eXBlID09PSAnbW91c2UnICkge1xyXG4gICAgICB0aGlzLm1vdXNlRG93bkVtaXR0ZXIuZW1pdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQHB1YmxpY1xyXG4gIHVwKCBldmVudCwgdHJhaWwgKSB7XHJcbiAgICBpZiAoIGV2ZW50LnBvaW50ZXIudHlwZSA9PT0gJ21vdXNlJyApIHtcclxuICAgICAgdGhpcy5tb3VzZVVwRW1pdHRlci5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggZXZlbnQucG9pbnRlci50eXBlID09PSAndG91Y2gnICkge1xyXG4gICAgICB0aGlzLnRvdWNoVXBFbWl0dGVyLmVtaXQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmFyaXRobWV0aWMucmVnaXN0ZXIoICdDZWxsSW50ZXJhY3Rpb25MaXN0ZW5lcicsIENlbGxJbnRlcmFjdGlvbkxpc3RlbmVyICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDZWxsSW50ZXJhY3Rpb25MaXN0ZW5lcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sZ0NBQWdDO0FBQ3BELE9BQU9DLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsT0FBT0MsVUFBVSxNQUFNLHFCQUFxQjtBQUU1QyxNQUFNQyx1QkFBdUIsQ0FBQztFQUU1QjtBQUNGO0VBQ0VDLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsSUFBSUosUUFBUSxDQUFFLEtBQU0sQ0FBQztJQUM5QyxJQUFJLENBQUNLLGVBQWUsR0FBRyxJQUFJTCxRQUFRLENBQUUsS0FBTSxDQUFDO0lBQzVDLElBQUksQ0FBQ00sZUFBZSxHQUFHLElBQUlOLFFBQVEsQ0FBRSxJQUFLLENBQUM7SUFFM0MsSUFBSSxDQUFDTyxnQkFBZ0IsR0FBRyxJQUFJUixPQUFPLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUNTLGNBQWMsR0FBRyxJQUFJVCxPQUFPLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUNVLGNBQWMsR0FBRyxJQUFJVixPQUFPLENBQUMsQ0FBQztFQUNyQzs7RUFFQTtFQUNBVyxLQUFLQSxDQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRztJQUNwQixJQUFLRCxLQUFLLENBQUNFLE9BQU8sQ0FBQ0MsSUFBSSxLQUFLLE9BQU8sRUFBRztNQUNwQyxJQUFJLENBQUNWLGlCQUFpQixDQUFDVyxHQUFHLENBQUUsSUFBSyxDQUFDO0lBQ3BDLENBQUMsTUFDSSxJQUFLSixLQUFLLENBQUNFLE9BQU8sQ0FBQ0MsSUFBSSxLQUFLLE9BQU8sRUFBRztNQUN6QyxJQUFJLENBQUNULGVBQWUsQ0FBQ1UsR0FBRyxDQUFFLElBQUssQ0FBQztJQUNsQztFQUNGOztFQUVBO0VBQ0FDLElBQUlBLENBQUVMLEtBQUssRUFBRUMsS0FBSyxFQUFHO0lBQ25CLElBQUtELEtBQUssQ0FBQ0UsT0FBTyxDQUFDQyxJQUFJLEtBQUssT0FBTyxFQUFHO01BQ3BDLElBQUksQ0FBQ1YsaUJBQWlCLENBQUNXLEdBQUcsQ0FBRSxLQUFNLENBQUM7SUFDckMsQ0FBQyxNQUNJLElBQUtKLEtBQUssQ0FBQ0UsT0FBTyxDQUFDQyxJQUFJLEtBQUssT0FBTyxFQUFHO01BQ3pDLElBQUksQ0FBQ1QsZUFBZSxDQUFDVSxHQUFHLENBQUUsS0FBTSxDQUFDO0lBQ25DO0VBQ0Y7O0VBRUE7RUFDQUUsSUFBSUEsQ0FBRU4sS0FBSyxFQUFFQyxLQUFLLEVBQUc7SUFDbkIsSUFBS0QsS0FBSyxDQUFDRSxPQUFPLENBQUNDLElBQUksS0FBSyxPQUFPLEVBQUc7TUFDcEMsSUFBSSxDQUFDUCxnQkFBZ0IsQ0FBQ1csSUFBSSxDQUFDLENBQUM7SUFDOUI7RUFDRjs7RUFFQTtFQUNBQyxFQUFFQSxDQUFFUixLQUFLLEVBQUVDLEtBQUssRUFBRztJQUNqQixJQUFLRCxLQUFLLENBQUNFLE9BQU8sQ0FBQ0MsSUFBSSxLQUFLLE9BQU8sRUFBRztNQUNwQyxJQUFJLENBQUNOLGNBQWMsQ0FBQ1UsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQyxNQUNJLElBQUtQLEtBQUssQ0FBQ0UsT0FBTyxDQUFDQyxJQUFJLEtBQUssT0FBTyxFQUFHO01BQ3pDLElBQUksQ0FBQ0wsY0FBYyxDQUFDUyxJQUFJLENBQUMsQ0FBQztJQUM1QjtFQUNGO0FBQ0Y7QUFFQWpCLFVBQVUsQ0FBQ21CLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRWxCLHVCQUF3QixDQUFDO0FBRXpFLGVBQWVBLHVCQUF1QiJ9