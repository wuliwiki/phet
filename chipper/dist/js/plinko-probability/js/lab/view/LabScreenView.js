// Copyright 2014-2021, University of Colorado Boulder

/**
 * ScreenView for the 'Lab' screen
 *
 * @author Martin Veillette (Berea College)
 * @author Guillermo Ramos (Berea College)
 * @author Denzell Barnett (Berea College)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node } from '../../../../scenery/js/imports.js';
import counter_png from '../../../images/counter_png.js';
import fraction_png from '../../../images/fraction_png.js';
import PlinkoProbabilityConstants from '../../common/PlinkoProbabilityConstants.js';
import PlinkoProbabilityQueryParameters from '../../common/PlinkoProbabilityQueryParameters.js';
import HistogramModeControl from '../../common/view/HistogramModeControl.js';
import PegsNode from '../../common/view/PegsNode.js';
import PlinkoProbabilityCommonView from '../../common/view/PlinkoProbabilityCommonView.js';
import plinkoProbability from '../../plinkoProbability.js';
import HopperModeControl from './HopperModeControl.js';
import LabPlayPanel from './LabPlayPanel.js';
import OutOfBallsDialog from './OutOfBallsDialog.js';
import PegControls from './PegControls.js';
import StatisticsAccordionBox from './StatisticsAccordionBox.js';
import TrajectoryPath from './TrajectoryPath.js';

// constants
const PANEL_FIXED_WIDTH = 220; // determined empirically

class LabScreenView extends PlinkoProbabilityCommonView {
  /**
   * @param {LabModel} model
   */
  constructor(model) {
    super(model, {
      histogramMode: 'counter'
    });
    // pegs on the Galton board
    const pegsNode = new PegsNode(model.galtonBoard, model.numberOfRowsProperty, model.probabilityProperty, this.modelViewTransform, {
      canvasBounds: this.viewTriangularBoardBounds
    });

    // radio buttons to right of the hopper
    const hopperModeControl = new HopperModeControl(model.hopperModeProperty, {
      left: this.hopper.right + 47,
      top: this.hopper.top
    });

    // radio buttons that can toggle between 'fraction and 'counter' mode
    const histogramModeControl = new HistogramModeControl(this.viewProperties.histogramModeProperty, 'counter', counter_png, 'fraction', fraction_png, {
      bottom: this.eraserButton.top - 16,
      left: this.eraserButton.left
    });

    // we call pre populate here because the histogram would be created by now
    if (PlinkoProbabilityQueryParameters.histogramBallsLab > 0) {
      model.histogram.prepopulate(PlinkoProbabilityQueryParameters.histogramBallsLab);
    }

    // Play panel, at top right
    const playPanel = new LabPlayPanel(model, {
      minWidth: PANEL_FIXED_WIDTH,
      maxWidth: PANEL_FIXED_WIDTH,
      right: this.layoutBounds.maxX - PlinkoProbabilityConstants.PANEL_RIGHT_PADDING,
      top: 10
    });

    // controls that modify the pegs in the galton board, below the Play panel
    const pegControls = new PegControls(model.numberOfRowsProperty, model.probabilityProperty, {
      minWidth: PANEL_FIXED_WIDTH,
      maxWidth: PANEL_FIXED_WIDTH,
      top: playPanel.bottom + PlinkoProbabilityConstants.PANEL_VERTICAL_SPACING,
      right: playPanel.right
    });

    // statistics panel, below peg controls
    const statisticsAccordionBox = new StatisticsAccordionBox(model, this.viewProperties.isTheoreticalHistogramVisibleProperty, {
      expandedProperty: this.viewProperties.expandedAccordionBoxProperty,
      minWidth: PANEL_FIXED_WIDTH,
      maxWidth: PANEL_FIXED_WIDTH,
      top: pegControls.bottom + PlinkoProbabilityConstants.PANEL_VERTICAL_SPACING,
      right: playPanel.right
    });

    // create pathsLayer to keep all the TrajectoryPath
    const pathsLayer = new Node({
      layerSplit: true
    });

    // rendering order
    this.addChild(histogramModeControl);
    this.addChild(hopperModeControl);
    this.addChild(playPanel);
    this.addChild(pegControls);
    this.addChild(statisticsAccordionBox);
    this.addChild(pegsNode);
    this.addChild(pathsLayer);

    // handle the coming and going of the balls in the model.
    model.balls.addItemAddedListener(addedBall => {
      let removalListener;
      switch (model.hopperModeProperty.get()) {
        case 'ball':
          {
            // initiates sound to play when ball hits a peg
            const ballHittingPegListener = direction => {
              this.pegSoundGeneration.playBallHittingPegSound(direction);
            };
            addedBall.ballHittingPegEmitter.addListener(ballHittingPegListener);
            removalListener = removedBall => {
              if (removedBall === addedBall) {
                addedBall.ballHittingPegEmitter.removeListener(ballHittingPegListener);
                model.balls.removeItemRemovedListener(removalListener);
              }
            };
            model.balls.addItemRemovedListener(removalListener);
            break;
          }
        case 'path':
          {
            const addedTrajectoryPath = new TrajectoryPath(addedBall, this.modelViewTransform);
            pathsLayer.addChild(addedTrajectoryPath);
            removalListener = removedBall => {
              if (removedBall === addedBall) {
                pathsLayer.removeChild(addedTrajectoryPath);
                model.balls.removeItemRemovedListener(removalListener);
              }
            };
            model.balls.addItemRemovedListener(removalListener);
            break;
          }
        case 'none':
          break;
        default:
          throw new Error(`invalid hopperMode: ${model.hopperModeProperty.get()}`);
      }
    });

    // OutOfBallsDialog, created lazily because Dialog requires sim bounds during construction
    let dialog = null;

    // no need to dispose of this link
    model.isBallCapReachedProperty.lazyLink(isBallCapReached => {
      // when the max number of balls is reached...
      if (isBallCapReached) {
        // pop up a dialog
        if (!dialog) {
          dialog = new OutOfBallsDialog();
        }
        dialog.show();

        // makes the play button visible
        playPanel.playButtonVisibleProperty.set(true);

        // it is not playing anymore
        model.isPlayingProperty.set(false);
      }
    });

    // pdom
    this.pdomPlayAreaNode.pdomOrder = [playPanel, pegControls, statisticsAccordionBox, hopperModeControl, histogramModeControl, this.eraserButton];
  }
}
plinkoProbability.register('LabScreenView', LabScreenView);
export default LabScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiY291bnRlcl9wbmciLCJmcmFjdGlvbl9wbmciLCJQbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cyIsIlBsaW5rb1Byb2JhYmlsaXR5UXVlcnlQYXJhbWV0ZXJzIiwiSGlzdG9ncmFtTW9kZUNvbnRyb2wiLCJQZWdzTm9kZSIsIlBsaW5rb1Byb2JhYmlsaXR5Q29tbW9uVmlldyIsInBsaW5rb1Byb2JhYmlsaXR5IiwiSG9wcGVyTW9kZUNvbnRyb2wiLCJMYWJQbGF5UGFuZWwiLCJPdXRPZkJhbGxzRGlhbG9nIiwiUGVnQ29udHJvbHMiLCJTdGF0aXN0aWNzQWNjb3JkaW9uQm94IiwiVHJhamVjdG9yeVBhdGgiLCJQQU5FTF9GSVhFRF9XSURUSCIsIkxhYlNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwiaGlzdG9ncmFtTW9kZSIsInBlZ3NOb2RlIiwiZ2FsdG9uQm9hcmQiLCJudW1iZXJPZlJvd3NQcm9wZXJ0eSIsInByb2JhYmlsaXR5UHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJjYW52YXNCb3VuZHMiLCJ2aWV3VHJpYW5ndWxhckJvYXJkQm91bmRzIiwiaG9wcGVyTW9kZUNvbnRyb2wiLCJob3BwZXJNb2RlUHJvcGVydHkiLCJsZWZ0IiwiaG9wcGVyIiwicmlnaHQiLCJ0b3AiLCJoaXN0b2dyYW1Nb2RlQ29udHJvbCIsInZpZXdQcm9wZXJ0aWVzIiwiaGlzdG9ncmFtTW9kZVByb3BlcnR5IiwiYm90dG9tIiwiZXJhc2VyQnV0dG9uIiwiaGlzdG9ncmFtQmFsbHNMYWIiLCJoaXN0b2dyYW0iLCJwcmVwb3B1bGF0ZSIsInBsYXlQYW5lbCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJsYXlvdXRCb3VuZHMiLCJtYXhYIiwiUEFORUxfUklHSFRfUEFERElORyIsInBlZ0NvbnRyb2xzIiwiUEFORUxfVkVSVElDQUxfU1BBQ0lORyIsInN0YXRpc3RpY3NBY2NvcmRpb25Cb3giLCJpc1RoZW9yZXRpY2FsSGlzdG9ncmFtVmlzaWJsZVByb3BlcnR5IiwiZXhwYW5kZWRQcm9wZXJ0eSIsImV4cGFuZGVkQWNjb3JkaW9uQm94UHJvcGVydHkiLCJwYXRoc0xheWVyIiwibGF5ZXJTcGxpdCIsImFkZENoaWxkIiwiYmFsbHMiLCJhZGRJdGVtQWRkZWRMaXN0ZW5lciIsImFkZGVkQmFsbCIsInJlbW92YWxMaXN0ZW5lciIsImdldCIsImJhbGxIaXR0aW5nUGVnTGlzdGVuZXIiLCJkaXJlY3Rpb24iLCJwZWdTb3VuZEdlbmVyYXRpb24iLCJwbGF5QmFsbEhpdHRpbmdQZWdTb3VuZCIsImJhbGxIaXR0aW5nUGVnRW1pdHRlciIsImFkZExpc3RlbmVyIiwicmVtb3ZlZEJhbGwiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUl0ZW1SZW1vdmVkTGlzdGVuZXIiLCJhZGRJdGVtUmVtb3ZlZExpc3RlbmVyIiwiYWRkZWRUcmFqZWN0b3J5UGF0aCIsInJlbW92ZUNoaWxkIiwiRXJyb3IiLCJkaWFsb2ciLCJpc0JhbGxDYXBSZWFjaGVkUHJvcGVydHkiLCJsYXp5TGluayIsImlzQmFsbENhcFJlYWNoZWQiLCJzaG93IiwicGxheUJ1dHRvblZpc2libGVQcm9wZXJ0eSIsInNldCIsImlzUGxheWluZ1Byb3BlcnR5IiwicGRvbVBsYXlBcmVhTm9kZSIsInBkb21PcmRlciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGFiU2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY3JlZW5WaWV3IGZvciB0aGUgJ0xhYicgc2NyZWVuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZSAoQmVyZWEgQ29sbGVnZSlcclxuICogQGF1dGhvciBHdWlsbGVybW8gUmFtb3MgKEJlcmVhIENvbGxlZ2UpXHJcbiAqIEBhdXRob3IgRGVuemVsbCBCYXJuZXR0IChCZXJlYSBDb2xsZWdlKVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY291bnRlcl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2NvdW50ZXJfcG5nLmpzJztcclxuaW1wb3J0IGZyYWN0aW9uX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvZnJhY3Rpb25fcG5nLmpzJztcclxuaW1wb3J0IFBsaW5rb1Byb2JhYmlsaXR5Q29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9QbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBQbGlua29Qcm9iYWJpbGl0eVF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vUGxpbmtvUHJvYmFiaWxpdHlRdWVyeVBhcmFtZXRlcnMuanMnO1xyXG5pbXBvcnQgSGlzdG9ncmFtTW9kZUNvbnRyb2wgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvSGlzdG9ncmFtTW9kZUNvbnRyb2wuanMnO1xyXG5pbXBvcnQgUGVnc05vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvUGVnc05vZGUuanMnO1xyXG5pbXBvcnQgUGxpbmtvUHJvYmFiaWxpdHlDb21tb25WaWV3IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1BsaW5rb1Byb2JhYmlsaXR5Q29tbW9uVmlldy5qcyc7XHJcbmltcG9ydCBwbGlua29Qcm9iYWJpbGl0eSBmcm9tICcuLi8uLi9wbGlua29Qcm9iYWJpbGl0eS5qcyc7XHJcbmltcG9ydCBIb3BwZXJNb2RlQ29udHJvbCBmcm9tICcuL0hvcHBlck1vZGVDb250cm9sLmpzJztcclxuaW1wb3J0IExhYlBsYXlQYW5lbCBmcm9tICcuL0xhYlBsYXlQYW5lbC5qcyc7XHJcbmltcG9ydCBPdXRPZkJhbGxzRGlhbG9nIGZyb20gJy4vT3V0T2ZCYWxsc0RpYWxvZy5qcyc7XHJcbmltcG9ydCBQZWdDb250cm9scyBmcm9tICcuL1BlZ0NvbnRyb2xzLmpzJztcclxuaW1wb3J0IFN0YXRpc3RpY3NBY2NvcmRpb25Cb3ggZnJvbSAnLi9TdGF0aXN0aWNzQWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IFRyYWplY3RvcnlQYXRoIGZyb20gJy4vVHJhamVjdG9yeVBhdGguanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFBBTkVMX0ZJWEVEX1dJRFRIID0gMjIwOyAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcblxyXG5jbGFzcyBMYWJTY3JlZW5WaWV3IGV4dGVuZHMgUGxpbmtvUHJvYmFiaWxpdHlDb21tb25WaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtMYWJNb2RlbH0gbW9kZWxcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwgKSB7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCB7XHJcbiAgICAgIGhpc3RvZ3JhbU1vZGU6ICdjb3VudGVyJ1xyXG4gICAgfSApO1xyXG4gICAgLy8gcGVncyBvbiB0aGUgR2FsdG9uIGJvYXJkXHJcbiAgICBjb25zdCBwZWdzTm9kZSA9IG5ldyBQZWdzTm9kZSggbW9kZWwuZ2FsdG9uQm9hcmQsIG1vZGVsLm51bWJlck9mUm93c1Byb3BlcnR5LCBtb2RlbC5wcm9iYWJpbGl0eVByb3BlcnR5LCB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSwge1xyXG4gICAgICBjYW52YXNCb3VuZHM6IHRoaXMudmlld1RyaWFuZ3VsYXJCb2FyZEJvdW5kc1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHJhZGlvIGJ1dHRvbnMgdG8gcmlnaHQgb2YgdGhlIGhvcHBlclxyXG4gICAgY29uc3QgaG9wcGVyTW9kZUNvbnRyb2wgPSBuZXcgSG9wcGVyTW9kZUNvbnRyb2woIG1vZGVsLmhvcHBlck1vZGVQcm9wZXJ0eSwge1xyXG4gICAgICBsZWZ0OiB0aGlzLmhvcHBlci5yaWdodCArIDQ3LFxyXG4gICAgICB0b3A6IHRoaXMuaG9wcGVyLnRvcFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHJhZGlvIGJ1dHRvbnMgdGhhdCBjYW4gdG9nZ2xlIGJldHdlZW4gJ2ZyYWN0aW9uIGFuZCAnY291bnRlcicgbW9kZVxyXG4gICAgY29uc3QgaGlzdG9ncmFtTW9kZUNvbnRyb2wgPSBuZXcgSGlzdG9ncmFtTW9kZUNvbnRyb2woIHRoaXMudmlld1Byb3BlcnRpZXMuaGlzdG9ncmFtTW9kZVByb3BlcnR5LCAnY291bnRlcicsIGNvdW50ZXJfcG5nLCAnZnJhY3Rpb24nLCBmcmFjdGlvbl9wbmcsIHtcclxuICAgICAgYm90dG9tOiB0aGlzLmVyYXNlckJ1dHRvbi50b3AgLSAxNixcclxuICAgICAgbGVmdDogdGhpcy5lcmFzZXJCdXR0b24ubGVmdFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHdlIGNhbGwgcHJlIHBvcHVsYXRlIGhlcmUgYmVjYXVzZSB0aGUgaGlzdG9ncmFtIHdvdWxkIGJlIGNyZWF0ZWQgYnkgbm93XHJcbiAgICBpZiAoIFBsaW5rb1Byb2JhYmlsaXR5UXVlcnlQYXJhbWV0ZXJzLmhpc3RvZ3JhbUJhbGxzTGFiID4gMCApIHtcclxuICAgICAgbW9kZWwuaGlzdG9ncmFtLnByZXBvcHVsYXRlKCBQbGlua29Qcm9iYWJpbGl0eVF1ZXJ5UGFyYW1ldGVycy5oaXN0b2dyYW1CYWxsc0xhYiApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFBsYXkgcGFuZWwsIGF0IHRvcCByaWdodFxyXG4gICAgY29uc3QgcGxheVBhbmVsID0gbmV3IExhYlBsYXlQYW5lbCggbW9kZWwsIHtcclxuICAgICAgbWluV2lkdGg6IFBBTkVMX0ZJWEVEX1dJRFRILFxyXG4gICAgICBtYXhXaWR0aDogUEFORUxfRklYRURfV0lEVEgsXHJcbiAgICAgIHJpZ2h0OiB0aGlzLmxheW91dEJvdW5kcy5tYXhYIC0gUGxpbmtvUHJvYmFiaWxpdHlDb25zdGFudHMuUEFORUxfUklHSFRfUEFERElORyxcclxuICAgICAgdG9wOiAxMFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGNvbnRyb2xzIHRoYXQgbW9kaWZ5IHRoZSBwZWdzIGluIHRoZSBnYWx0b24gYm9hcmQsIGJlbG93IHRoZSBQbGF5IHBhbmVsXHJcbiAgICBjb25zdCBwZWdDb250cm9scyA9IG5ldyBQZWdDb250cm9scyggbW9kZWwubnVtYmVyT2ZSb3dzUHJvcGVydHksIG1vZGVsLnByb2JhYmlsaXR5UHJvcGVydHksIHtcclxuICAgICAgbWluV2lkdGg6IFBBTkVMX0ZJWEVEX1dJRFRILFxyXG4gICAgICBtYXhXaWR0aDogUEFORUxfRklYRURfV0lEVEgsXHJcbiAgICAgIHRvcDogcGxheVBhbmVsLmJvdHRvbSArIFBsaW5rb1Byb2JhYmlsaXR5Q29uc3RhbnRzLlBBTkVMX1ZFUlRJQ0FMX1NQQUNJTkcsXHJcbiAgICAgIHJpZ2h0OiBwbGF5UGFuZWwucmlnaHRcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBzdGF0aXN0aWNzIHBhbmVsLCBiZWxvdyBwZWcgY29udHJvbHNcclxuICAgIGNvbnN0IHN0YXRpc3RpY3NBY2NvcmRpb25Cb3ggPSBuZXcgU3RhdGlzdGljc0FjY29yZGlvbkJveCggbW9kZWwsXHJcbiAgICAgIHRoaXMudmlld1Byb3BlcnRpZXMuaXNUaGVvcmV0aWNhbEhpc3RvZ3JhbVZpc2libGVQcm9wZXJ0eSwge1xyXG4gICAgICAgIGV4cGFuZGVkUHJvcGVydHk6IHRoaXMudmlld1Byb3BlcnRpZXMuZXhwYW5kZWRBY2NvcmRpb25Cb3hQcm9wZXJ0eSxcclxuICAgICAgICBtaW5XaWR0aDogUEFORUxfRklYRURfV0lEVEgsXHJcbiAgICAgICAgbWF4V2lkdGg6IFBBTkVMX0ZJWEVEX1dJRFRILFxyXG4gICAgICAgIHRvcDogcGVnQ29udHJvbHMuYm90dG9tICsgUGxpbmtvUHJvYmFiaWxpdHlDb25zdGFudHMuUEFORUxfVkVSVElDQUxfU1BBQ0lORyxcclxuICAgICAgICByaWdodDogcGxheVBhbmVsLnJpZ2h0XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgcGF0aHNMYXllciB0byBrZWVwIGFsbCB0aGUgVHJhamVjdG9yeVBhdGhcclxuICAgIGNvbnN0IHBhdGhzTGF5ZXIgPSBuZXcgTm9kZSggeyBsYXllclNwbGl0OiB0cnVlIH0gKTtcclxuXHJcbiAgICAvLyByZW5kZXJpbmcgb3JkZXJcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGhpc3RvZ3JhbU1vZGVDb250cm9sICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBob3BwZXJNb2RlQ29udHJvbCApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcGxheVBhbmVsICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwZWdDb250cm9scyApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggc3RhdGlzdGljc0FjY29yZGlvbkJveCApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcGVnc05vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHBhdGhzTGF5ZXIgKTtcclxuXHJcbiAgICAvLyBoYW5kbGUgdGhlIGNvbWluZyBhbmQgZ29pbmcgb2YgdGhlIGJhbGxzIGluIHRoZSBtb2RlbC5cclxuICAgIG1vZGVsLmJhbGxzLmFkZEl0ZW1BZGRlZExpc3RlbmVyKCBhZGRlZEJhbGwgPT4ge1xyXG4gICAgICBsZXQgcmVtb3ZhbExpc3RlbmVyO1xyXG4gICAgICBzd2l0Y2goIG1vZGVsLmhvcHBlck1vZGVQcm9wZXJ0eS5nZXQoKSApIHtcclxuXHJcbiAgICAgICAgY2FzZSAnYmFsbCc6IHtcclxuICAgICAgICAgIC8vIGluaXRpYXRlcyBzb3VuZCB0byBwbGF5IHdoZW4gYmFsbCBoaXRzIGEgcGVnXHJcbiAgICAgICAgICBjb25zdCBiYWxsSGl0dGluZ1BlZ0xpc3RlbmVyID0gZGlyZWN0aW9uID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wZWdTb3VuZEdlbmVyYXRpb24ucGxheUJhbGxIaXR0aW5nUGVnU291bmQoIGRpcmVjdGlvbiApO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGFkZGVkQmFsbC5iYWxsSGl0dGluZ1BlZ0VtaXR0ZXIuYWRkTGlzdGVuZXIoIGJhbGxIaXR0aW5nUGVnTGlzdGVuZXIgKTtcclxuICAgICAgICAgIHJlbW92YWxMaXN0ZW5lciA9IHJlbW92ZWRCYWxsID0+IHtcclxuICAgICAgICAgICAgaWYgKCByZW1vdmVkQmFsbCA9PT0gYWRkZWRCYWxsICkge1xyXG4gICAgICAgICAgICAgIGFkZGVkQmFsbC5iYWxsSGl0dGluZ1BlZ0VtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIGJhbGxIaXR0aW5nUGVnTGlzdGVuZXIgKTtcclxuICAgICAgICAgICAgICBtb2RlbC5iYWxscy5yZW1vdmVJdGVtUmVtb3ZlZExpc3RlbmVyKCByZW1vdmFsTGlzdGVuZXIgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIG1vZGVsLmJhbGxzLmFkZEl0ZW1SZW1vdmVkTGlzdGVuZXIoIHJlbW92YWxMaXN0ZW5lciApO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlICdwYXRoJzoge1xyXG4gICAgICAgICAgY29uc3QgYWRkZWRUcmFqZWN0b3J5UGF0aCA9IG5ldyBUcmFqZWN0b3J5UGF0aCggYWRkZWRCYWxsLCB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSApO1xyXG4gICAgICAgICAgcGF0aHNMYXllci5hZGRDaGlsZCggYWRkZWRUcmFqZWN0b3J5UGF0aCApO1xyXG4gICAgICAgICAgcmVtb3ZhbExpc3RlbmVyID0gcmVtb3ZlZEJhbGwgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIHJlbW92ZWRCYWxsID09PSBhZGRlZEJhbGwgKSB7XHJcbiAgICAgICAgICAgICAgcGF0aHNMYXllci5yZW1vdmVDaGlsZCggYWRkZWRUcmFqZWN0b3J5UGF0aCApO1xyXG4gICAgICAgICAgICAgIG1vZGVsLmJhbGxzLnJlbW92ZUl0ZW1SZW1vdmVkTGlzdGVuZXIoIHJlbW92YWxMaXN0ZW5lciApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgbW9kZWwuYmFsbHMuYWRkSXRlbVJlbW92ZWRMaXN0ZW5lciggcmVtb3ZhbExpc3RlbmVyICk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgJ25vbmUnOlxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIGBpbnZhbGlkIGhvcHBlck1vZGU6ICR7bW9kZWwuaG9wcGVyTW9kZVByb3BlcnR5LmdldCgpfWAgKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIE91dE9mQmFsbHNEaWFsb2csIGNyZWF0ZWQgbGF6aWx5IGJlY2F1c2UgRGlhbG9nIHJlcXVpcmVzIHNpbSBib3VuZHMgZHVyaW5nIGNvbnN0cnVjdGlvblxyXG4gICAgbGV0IGRpYWxvZyA9IG51bGw7XHJcblxyXG4gICAgLy8gbm8gbmVlZCB0byBkaXNwb3NlIG9mIHRoaXMgbGlua1xyXG4gICAgbW9kZWwuaXNCYWxsQ2FwUmVhY2hlZFByb3BlcnR5LmxhenlMaW5rKCBpc0JhbGxDYXBSZWFjaGVkID0+IHtcclxuXHJcbiAgICAgIC8vIHdoZW4gdGhlIG1heCBudW1iZXIgb2YgYmFsbHMgaXMgcmVhY2hlZC4uLlxyXG4gICAgICBpZiAoIGlzQmFsbENhcFJlYWNoZWQgKSB7XHJcblxyXG4gICAgICAgIC8vIHBvcCB1cCBhIGRpYWxvZ1xyXG4gICAgICAgIGlmICggIWRpYWxvZyApIHtcclxuICAgICAgICAgIGRpYWxvZyA9IG5ldyBPdXRPZkJhbGxzRGlhbG9nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpYWxvZy5zaG93KCk7XHJcblxyXG4gICAgICAgIC8vIG1ha2VzIHRoZSBwbGF5IGJ1dHRvbiB2aXNpYmxlXHJcbiAgICAgICAgcGxheVBhbmVsLnBsYXlCdXR0b25WaXNpYmxlUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcblxyXG4gICAgICAgIC8vIGl0IGlzIG5vdCBwbGF5aW5nIGFueW1vcmVcclxuICAgICAgICBtb2RlbC5pc1BsYXlpbmdQcm9wZXJ0eS5zZXQoIGZhbHNlICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBwZG9tXHJcbiAgICB0aGlzLnBkb21QbGF5QXJlYU5vZGUucGRvbU9yZGVyID0gWyBwbGF5UGFuZWwsIHBlZ0NvbnRyb2xzLCBzdGF0aXN0aWNzQWNjb3JkaW9uQm94LCBob3BwZXJNb2RlQ29udHJvbCwgaGlzdG9ncmFtTW9kZUNvbnRyb2wsIHRoaXMuZXJhc2VyQnV0dG9uIF07XHJcbiAgfVxyXG59XHJcblxyXG5wbGlua29Qcm9iYWJpbGl0eS5yZWdpc3RlciggJ0xhYlNjcmVlblZpZXcnLCBMYWJTY3JlZW5WaWV3ICk7XHJcbmV4cG9ydCBkZWZhdWx0IExhYlNjcmVlblZpZXc7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsV0FBVyxNQUFNLGdDQUFnQztBQUN4RCxPQUFPQyxZQUFZLE1BQU0saUNBQWlDO0FBQzFELE9BQU9DLDBCQUEwQixNQUFNLDRDQUE0QztBQUNuRixPQUFPQyxnQ0FBZ0MsTUFBTSxrREFBa0Q7QUFDL0YsT0FBT0Msb0JBQW9CLE1BQU0sMkNBQTJDO0FBQzVFLE9BQU9DLFFBQVEsTUFBTSwrQkFBK0I7QUFDcEQsT0FBT0MsMkJBQTJCLE1BQU0sa0RBQWtEO0FBQzFGLE9BQU9DLGlCQUFpQixNQUFNLDRCQUE0QjtBQUMxRCxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFDdEQsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUM1QyxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFDaEUsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjs7QUFFaEQ7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxHQUFH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