// Copyright 2015-2023, University of Colorado Boulder

/**
 * Scenery Node that displays three Radio Buttons that control the flow of Balls
 *
 * @author Martin Veillette (Berea College)
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import plinkoProbability from '../../plinkoProbability.js';
import PlinkoProbabilityStrings from '../../PlinkoProbabilityStrings.js';
const ballString = PlinkoProbabilityStrings.ball;
const noneString = PlinkoProbabilityStrings.none;
const pathString = PlinkoProbabilityStrings.path;

// constants
const LABEL_OPTIONS = {
  font: new PhetFont(20),
  maxWidth: 175
};
class HopperModeControl extends Node {
  /**
   * @param {Property.<string>} hopperModeProperty - see PlinkoProbabilityCommonModel
   * @param {Object} [options]
   */
  constructor(hopperModeProperty, options) {
    super();
    options = merge({
      radioButtonOptions: {
        radius: 10
      },
      spacing: 12,
      // vertical separation of the buttons
      touchAreaXDilation: 10
    }, options);

    // create the radio buttons
    const showRadioButtons = new VerticalAquaRadioButtonGroup(hopperModeProperty, [{
      createNode: () => new Text(ballString, LABEL_OPTIONS),
      value: 'ball'
    }, {
      createNode: () => new Text(pathString, LABEL_OPTIONS),
      value: 'path'
    }, {
      createNode: () => new Text(noneString, LABEL_OPTIONS),
      value: 'none'
    }], options);
    this.addChild(showRadioButtons);
  }
}
plinkoProbability.register('HopperModeControl', HopperModeControl);
export default HopperModeControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiTm9kZSIsIlRleHQiLCJWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIiwicGxpbmtvUHJvYmFiaWxpdHkiLCJQbGlua29Qcm9iYWJpbGl0eVN0cmluZ3MiLCJiYWxsU3RyaW5nIiwiYmFsbCIsIm5vbmVTdHJpbmciLCJub25lIiwicGF0aFN0cmluZyIsInBhdGgiLCJMQUJFTF9PUFRJT05TIiwiZm9udCIsIm1heFdpZHRoIiwiSG9wcGVyTW9kZUNvbnRyb2wiLCJjb25zdHJ1Y3RvciIsImhvcHBlck1vZGVQcm9wZXJ0eSIsIm9wdGlvbnMiLCJyYWRpb0J1dHRvbk9wdGlvbnMiLCJyYWRpdXMiLCJzcGFjaW5nIiwidG91Y2hBcmVhWERpbGF0aW9uIiwic2hvd1JhZGlvQnV0dG9ucyIsImNyZWF0ZU5vZGUiLCJ2YWx1ZSIsImFkZENoaWxkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJIb3BwZXJNb2RlQ29udHJvbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY2VuZXJ5IE5vZGUgdGhhdCBkaXNwbGF5cyB0aHJlZSBSYWRpbyBCdXR0b25zIHRoYXQgY29udHJvbCB0aGUgZmxvdyBvZiBCYWxsc1xyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1ZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgcGxpbmtvUHJvYmFiaWxpdHkgZnJvbSAnLi4vLi4vcGxpbmtvUHJvYmFiaWxpdHkuanMnO1xyXG5pbXBvcnQgUGxpbmtvUHJvYmFiaWxpdHlTdHJpbmdzIGZyb20gJy4uLy4uL1BsaW5rb1Byb2JhYmlsaXR5U3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBiYWxsU3RyaW5nID0gUGxpbmtvUHJvYmFiaWxpdHlTdHJpbmdzLmJhbGw7XHJcbmNvbnN0IG5vbmVTdHJpbmcgPSBQbGlua29Qcm9iYWJpbGl0eVN0cmluZ3Mubm9uZTtcclxuY29uc3QgcGF0aFN0cmluZyA9IFBsaW5rb1Byb2JhYmlsaXR5U3RyaW5ncy5wYXRoO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IExBQkVMX09QVElPTlMgPSB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSwgbWF4V2lkdGg6IDE3NSB9O1xyXG5cclxuY2xhc3MgSG9wcGVyTW9kZUNvbnRyb2wgZXh0ZW5kcyBOb2RlIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxzdHJpbmc+fSBob3BwZXJNb2RlUHJvcGVydHkgLSBzZWUgUGxpbmtvUHJvYmFiaWxpdHlDb21tb25Nb2RlbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaG9wcGVyTW9kZVByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHJhZGlvQnV0dG9uT3B0aW9uczogeyByYWRpdXM6IDEwIH0sXHJcbiAgICAgIHNwYWNpbmc6IDEyLCAvLyB2ZXJ0aWNhbCBzZXBhcmF0aW9uIG9mIHRoZSBidXR0b25zXHJcbiAgICAgIHRvdWNoQXJlYVhEaWxhdGlvbjogMTBcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgdGhlIHJhZGlvIGJ1dHRvbnNcclxuICAgIGNvbnN0IHNob3dSYWRpb0J1dHRvbnMgPSBuZXcgVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cCggaG9wcGVyTW9kZVByb3BlcnR5LCBbXHJcbiAgICAgIHsgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFRleHQoIGJhbGxTdHJpbmcsIExBQkVMX09QVElPTlMgKSwgdmFsdWU6ICdiYWxsJyB9LFxyXG4gICAgICB7IGNyZWF0ZU5vZGU6ICgpID0+IG5ldyBUZXh0KCBwYXRoU3RyaW5nLCBMQUJFTF9PUFRJT05TICksIHZhbHVlOiAncGF0aCcgfSxcclxuICAgICAgeyBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggbm9uZVN0cmluZywgTEFCRUxfT1BUSU9OUyApLCB2YWx1ZTogJ25vbmUnIH1cclxuICAgIF0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBzaG93UmFkaW9CdXR0b25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5wbGlua29Qcm9iYWJpbGl0eS5yZWdpc3RlciggJ0hvcHBlck1vZGVDb250cm9sJywgSG9wcGVyTW9kZUNvbnRyb2wgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhvcHBlck1vZGVDb250cm9sOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLDRCQUE0QixNQUFNLG9EQUFvRDtBQUM3RixPQUFPQyxpQkFBaUIsTUFBTSw0QkFBNEI7QUFDMUQsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBRXhFLE1BQU1DLFVBQVUsR0FBR0Qsd0JBQXdCLENBQUNFLElBQUk7QUFDaEQsTUFBTUMsVUFBVSxHQUFHSCx3QkFBd0IsQ0FBQ0ksSUFBSTtBQUNoRCxNQUFNQyxVQUFVLEdBQUdMLHdCQUF3QixDQUFDTSxJQUFJOztBQUVoRDtBQUNBLE1BQU1DLGFBQWEsR0FBRztFQUFFQyxJQUFJLEVBQUUsSUFBSWIsUUFBUSxDQUFFLEVBQUcsQ0FBQztFQUFFYyxRQUFRLEVBQUU7QUFBSSxDQUFDO0FBRWpFLE1BQU1DLGlCQUFpQixTQUFTZCxJQUFJLENBQUM7RUFDbkM7QUFDRjtBQUNBO0FBQ0E7RUFDRWUsV0FBV0EsQ0FBRUMsa0JBQWtCLEVBQUVDLE9BQU8sRUFBRztJQUV6QyxLQUFLLENBQUMsQ0FBQztJQUVQQSxPQUFPLEdBQUduQixLQUFLLENBQUU7TUFDZm9CLGtCQUFrQixFQUFFO1FBQUVDLE1BQU0sRUFBRTtNQUFHLENBQUM7TUFDbENDLE9BQU8sRUFBRSxFQUFFO01BQUU7TUFDYkMsa0JBQWtCLEVBQUU7SUFDdEIsQ0FBQyxFQUFFSixPQUFRLENBQUM7O0lBRVo7SUFDQSxNQUFNSyxnQkFBZ0IsR0FBRyxJQUFJcEIsNEJBQTRCLENBQUVjLGtCQUFrQixFQUFFLENBQzdFO01BQUVPLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUl0QixJQUFJLENBQUVJLFVBQVUsRUFBRU0sYUFBYyxDQUFDO01BQUVhLEtBQUssRUFBRTtJQUFPLENBQUMsRUFDMUU7TUFBRUQsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSXRCLElBQUksQ0FBRVEsVUFBVSxFQUFFRSxhQUFjLENBQUM7TUFBRWEsS0FBSyxFQUFFO0lBQU8sQ0FBQyxFQUMxRTtNQUFFRCxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJdEIsSUFBSSxDQUFFTSxVQUFVLEVBQUVJLGFBQWMsQ0FBQztNQUFFYSxLQUFLLEVBQUU7SUFBTyxDQUFDLENBQzNFLEVBQUVQLE9BQVEsQ0FBQztJQUVaLElBQUksQ0FBQ1EsUUFBUSxDQUFFSCxnQkFBaUIsQ0FBQztFQUNuQztBQUNGO0FBRUFuQixpQkFBaUIsQ0FBQ3VCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRVosaUJBQWtCLENBQUM7QUFFcEUsZUFBZUEsaUJBQWlCIn0=