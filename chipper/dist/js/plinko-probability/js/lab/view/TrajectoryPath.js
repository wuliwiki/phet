// Copyright 2015-2022, University of Colorado Boulder

/**
 * Scenery view for the path line followed by a ball on the Galton board.
 *
 * @author Martin Veillette (Berea College)
 */

import { Shape } from '../../../../kite/js/imports.js';
import { Path } from '../../../../scenery/js/imports.js';
import PlinkoProbabilityConstants from '../../common/PlinkoProbabilityConstants.js';
import plinkoProbability from '../../plinkoProbability.js';
class TrajectoryPath extends Path {
  /**
   * Constructor for trajectory path of a ball falling through the galton board
   * @param {Ball} ball - model of the ball
   * @param {ModelViewTransform2} modelViewTransform - the coordinate transform between model coordinates and view coordinates
   */
  constructor(ball, modelViewTransform) {
    const pathOptions = {
      stroke: PlinkoProbabilityConstants.BALL_COLOR,
      lineWidth: 2
    };

    // The trajectory path will be some vertical distance above the pegs.
    // create a vertical offset that is a fraction of the peg separation.
    const verticalOffset = ball.pegSeparation / 2;

    // create the shape of the trajectory
    const shape = new Shape();

    // starting point of the shape is above the first peg plus some vertical offset.
    shape.moveTo(ball.pegHistory[0].positionX, ball.pegHistory[0].positionY + ball.pegSeparation);

    // add linear segments to the shape.
    ball.pegHistory.forEach(peg => {
      shape.lineTo(peg.positionX, peg.positionY + verticalOffset);
    });
    super(modelViewTransform.modelToViewShape(shape), pathOptions);
  }
}
plinkoProbability.register('TrajectoryPath', TrajectoryPath);
export default TrajectoryPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIlBhdGgiLCJQbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cyIsInBsaW5rb1Byb2JhYmlsaXR5IiwiVHJhamVjdG9yeVBhdGgiLCJjb25zdHJ1Y3RvciIsImJhbGwiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwYXRoT3B0aW9ucyIsInN0cm9rZSIsIkJBTExfQ09MT1IiLCJsaW5lV2lkdGgiLCJ2ZXJ0aWNhbE9mZnNldCIsInBlZ1NlcGFyYXRpb24iLCJzaGFwZSIsIm1vdmVUbyIsInBlZ0hpc3RvcnkiLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJmb3JFYWNoIiwicGVnIiwibGluZVRvIiwibW9kZWxUb1ZpZXdTaGFwZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVHJhamVjdG9yeVBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2NlbmVyeSB2aWV3IGZvciB0aGUgcGF0aCBsaW5lIGZvbGxvd2VkIGJ5IGEgYmFsbCBvbiB0aGUgR2FsdG9uIGJvYXJkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBsaW5rb1Byb2JhYmlsaXR5Q29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9QbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBwbGlua29Qcm9iYWJpbGl0eSBmcm9tICcuLi8uLi9wbGlua29Qcm9iYWJpbGl0eS5qcyc7XHJcblxyXG5jbGFzcyBUcmFqZWN0b3J5UGF0aCBleHRlbmRzIFBhdGgge1xyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yIGZvciB0cmFqZWN0b3J5IHBhdGggb2YgYSBiYWxsIGZhbGxpbmcgdGhyb3VnaCB0aGUgZ2FsdG9uIGJvYXJkXHJcbiAgICogQHBhcmFtIHtCYWxsfSBiYWxsIC0gbW9kZWwgb2YgdGhlIGJhbGxcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybSAtIHRoZSBjb29yZGluYXRlIHRyYW5zZm9ybSBiZXR3ZWVuIG1vZGVsIGNvb3JkaW5hdGVzIGFuZCB2aWV3IGNvb3JkaW5hdGVzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGJhbGwsIG1vZGVsVmlld1RyYW5zZm9ybSApIHtcclxuXHJcbiAgICBjb25zdCBwYXRoT3B0aW9ucyA9IHtcclxuICAgICAgc3Ryb2tlOiBQbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cy5CQUxMX0NPTE9SLFxyXG4gICAgICBsaW5lV2lkdGg6IDJcclxuICAgIH07XHJcblxyXG4gICAgLy8gVGhlIHRyYWplY3RvcnkgcGF0aCB3aWxsIGJlIHNvbWUgdmVydGljYWwgZGlzdGFuY2UgYWJvdmUgdGhlIHBlZ3MuXHJcbiAgICAvLyBjcmVhdGUgYSB2ZXJ0aWNhbCBvZmZzZXQgdGhhdCBpcyBhIGZyYWN0aW9uIG9mIHRoZSBwZWcgc2VwYXJhdGlvbi5cclxuICAgIGNvbnN0IHZlcnRpY2FsT2Zmc2V0ID0gYmFsbC5wZWdTZXBhcmF0aW9uIC8gMjtcclxuXHJcbiAgICAvLyBjcmVhdGUgdGhlIHNoYXBlIG9mIHRoZSB0cmFqZWN0b3J5XHJcbiAgICBjb25zdCBzaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG5cclxuICAgIC8vIHN0YXJ0aW5nIHBvaW50IG9mIHRoZSBzaGFwZSBpcyBhYm92ZSB0aGUgZmlyc3QgcGVnIHBsdXMgc29tZSB2ZXJ0aWNhbCBvZmZzZXQuXHJcbiAgICBzaGFwZS5tb3ZlVG8oXHJcbiAgICAgIGJhbGwucGVnSGlzdG9yeVsgMCBdLnBvc2l0aW9uWCxcclxuICAgICAgYmFsbC5wZWdIaXN0b3J5WyAwIF0ucG9zaXRpb25ZICsgYmFsbC5wZWdTZXBhcmF0aW9uICk7XHJcblxyXG4gICAgLy8gYWRkIGxpbmVhciBzZWdtZW50cyB0byB0aGUgc2hhcGUuXHJcbiAgICBiYWxsLnBlZ0hpc3RvcnkuZm9yRWFjaCggcGVnID0+IHtcclxuICAgICAgc2hhcGUubGluZVRvKCBwZWcucG9zaXRpb25YLCBwZWcucG9zaXRpb25ZICsgdmVydGljYWxPZmZzZXQgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3U2hhcGUoIHNoYXBlICksIHBhdGhPcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5wbGlua29Qcm9iYWJpbGl0eS5yZWdpc3RlciggJ1RyYWplY3RvcnlQYXRoJywgVHJhamVjdG9yeVBhdGggKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRyYWplY3RvcnlQYXRoOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsMEJBQTBCLE1BQU0sNENBQTRDO0FBQ25GLE9BQU9DLGlCQUFpQixNQUFNLDRCQUE0QjtBQUUxRCxNQUFNQyxjQUFjLFNBQVNILElBQUksQ0FBQztFQUNoQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLElBQUksRUFBRUMsa0JBQWtCLEVBQUc7SUFFdEMsTUFBTUMsV0FBVyxHQUFHO01BQ2xCQyxNQUFNLEVBQUVQLDBCQUEwQixDQUFDUSxVQUFVO01BQzdDQyxTQUFTLEVBQUU7SUFDYixDQUFDOztJQUVEO0lBQ0E7SUFDQSxNQUFNQyxjQUFjLEdBQUdOLElBQUksQ0FBQ08sYUFBYSxHQUFHLENBQUM7O0lBRTdDO0lBQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUlkLEtBQUssQ0FBQyxDQUFDOztJQUV6QjtJQUNBYyxLQUFLLENBQUNDLE1BQU0sQ0FDVlQsSUFBSSxDQUFDVSxVQUFVLENBQUUsQ0FBQyxDQUFFLENBQUNDLFNBQVMsRUFDOUJYLElBQUksQ0FBQ1UsVUFBVSxDQUFFLENBQUMsQ0FBRSxDQUFDRSxTQUFTLEdBQUdaLElBQUksQ0FBQ08sYUFBYyxDQUFDOztJQUV2RDtJQUNBUCxJQUFJLENBQUNVLFVBQVUsQ0FBQ0csT0FBTyxDQUFFQyxHQUFHLElBQUk7TUFDOUJOLEtBQUssQ0FBQ08sTUFBTSxDQUFFRCxHQUFHLENBQUNILFNBQVMsRUFBRUcsR0FBRyxDQUFDRixTQUFTLEdBQUdOLGNBQWUsQ0FBQztJQUMvRCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVMLGtCQUFrQixDQUFDZSxnQkFBZ0IsQ0FBRVIsS0FBTSxDQUFDLEVBQUVOLFdBQVksQ0FBQztFQUNwRTtBQUNGO0FBRUFMLGlCQUFpQixDQUFDb0IsUUFBUSxDQUFFLGdCQUFnQixFQUFFbkIsY0FBZSxDQUFDO0FBRTlELGVBQWVBLGNBQWMifQ==