// Copyright 2015-2022, University of Colorado Boulder

/**
 * View representation of the front cylinders (the side part of the cylinder) used within the Plinko Probability Simulation
 *
 * @author Martin Veillette (Berea College)
 */

import { Shape } from '../../../../kite/js/imports.js';
import { LinearGradient, Node, Path } from '../../../../scenery/js/imports.js';
import PlinkoProbabilityConstants from '../../common/PlinkoProbabilityConstants.js';
import plinkoProbability from '../../plinkoProbability.js';

// constants
const BOUNDS = PlinkoProbabilityConstants.HISTOGRAM_BOUNDS;
class CylindersFrontNode extends Node {
  /**
   * @param {Property.<number>} numberOfRowsProperty
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Object} cylinderInfo - Contains cylinder info: height, width, offset, ellipseHeight
   */
  constructor(numberOfRowsProperty, modelViewTransform, cylinderInfo) {
    super();

    // convenience variable for placing the object inn the view
    const ellipseWidth = modelViewTransform.modelToViewDeltaX(cylinderInfo.cylinderWidth);
    const ellipseHeight = Math.abs(modelViewTransform.modelToViewDeltaY(cylinderInfo.ellipseHeight));
    const cylinderHeight = Math.abs(modelViewTransform.modelToViewDeltaY(cylinderInfo.cylinderHeight));
    const verticalOffset = -modelViewTransform.modelToViewDeltaY(cylinderInfo.verticalOffset);

    // create side shape of the cylinder
    const sideShape = new Shape();
    sideShape.moveTo(-ellipseWidth / 2, 0).lineTo(-ellipseWidth / 2, cylinderHeight).ellipticalArc(0, 0, ellipseWidth / 2, ellipseHeight / 2, 0, Math.PI, 0, true).lineTo(ellipseWidth / 2, 0).ellipticalArc(0, cylinderHeight, ellipseWidth / 2, ellipseHeight / 2, 0, 0, Math.PI, false).close();

    // create the linear fill gradient for the cylinder
    const sideFill = new LinearGradient(-ellipseWidth / 2, 0, ellipseWidth / 2, 0).addColorStop(0.0, PlinkoProbabilityConstants.CYLINDER_BASE_COLOR.colorUtilsDarker(0.7)).addColorStop(0.5, PlinkoProbabilityConstants.CYLINDER_BASE_COLOR).addColorStop(1, PlinkoProbabilityConstants.CYLINDER_BASE_COLOR.colorUtilsBrighter(0.5));
    const sideLayerNode = new Node();
    this.addChild(sideLayerNode);

    // link is present for the lifetime of the sim
    numberOfRowsProperty.link(numberOfRows => {
      const numberOfTicks = numberOfRows + 1;
      for (let i = 0; i < numberOfTicks; i++) {
        const binCenterX = this.getBinCenterX(i, numberOfTicks);
        const x = modelViewTransform.modelToViewX(binCenterX);
        const y = modelViewTransform.modelToViewY(cylinderInfo.top);

        // create and add the path for side of the cylinder
        const side = new Path(sideShape, {
          fill: sideFill,
          stroke: PlinkoProbabilityConstants.SIDE_CYLINDER_STROKE_COLOR,
          centerX: x,
          top: y + verticalOffset + ellipseHeight / 2
        });
        sideLayerNode.addChild(side);
      }
    });
  }

  /**
   * Function that returns the center x coordinate of a bin with index binIndex
   *
   * @param {number} binIndex - index associated with the bin, the index may range from 0 to numberOfBins-1
   * @param {number} numberOfBins - the number of bins on the screen
   * @returns {number}
   * @public
   */
  getBinCenterX(binIndex, numberOfBins) {
    // We consider numberOfBins-1 because we consider the most left bin the first bin out of the total number of bins
    assert && assert(binIndex <= numberOfBins - 1);
    return (binIndex + 1 / 2) / numberOfBins * BOUNDS.width + BOUNDS.minX;
  }
}
plinkoProbability.register('CylindersFrontNode', CylindersFrontNode);
export default CylindersFrontNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIkxpbmVhckdyYWRpZW50IiwiTm9kZSIsIlBhdGgiLCJQbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cyIsInBsaW5rb1Byb2JhYmlsaXR5IiwiQk9VTkRTIiwiSElTVE9HUkFNX0JPVU5EUyIsIkN5bGluZGVyc0Zyb250Tm9kZSIsImNvbnN0cnVjdG9yIiwibnVtYmVyT2ZSb3dzUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJjeWxpbmRlckluZm8iLCJlbGxpcHNlV2lkdGgiLCJtb2RlbFRvVmlld0RlbHRhWCIsImN5bGluZGVyV2lkdGgiLCJlbGxpcHNlSGVpZ2h0IiwiTWF0aCIsImFicyIsIm1vZGVsVG9WaWV3RGVsdGFZIiwiY3lsaW5kZXJIZWlnaHQiLCJ2ZXJ0aWNhbE9mZnNldCIsInNpZGVTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsImVsbGlwdGljYWxBcmMiLCJQSSIsImNsb3NlIiwic2lkZUZpbGwiLCJhZGRDb2xvclN0b3AiLCJDWUxJTkRFUl9CQVNFX0NPTE9SIiwiY29sb3JVdGlsc0RhcmtlciIsImNvbG9yVXRpbHNCcmlnaHRlciIsInNpZGVMYXllck5vZGUiLCJhZGRDaGlsZCIsImxpbmsiLCJudW1iZXJPZlJvd3MiLCJudW1iZXJPZlRpY2tzIiwiaSIsImJpbkNlbnRlclgiLCJnZXRCaW5DZW50ZXJYIiwieCIsIm1vZGVsVG9WaWV3WCIsInkiLCJtb2RlbFRvVmlld1kiLCJ0b3AiLCJzaWRlIiwiZmlsbCIsInN0cm9rZSIsIlNJREVfQ1lMSU5ERVJfU1RST0tFX0NPTE9SIiwiY2VudGVyWCIsImJpbkluZGV4IiwibnVtYmVyT2ZCaW5zIiwiYXNzZXJ0Iiwid2lkdGgiLCJtaW5YIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDeWxpbmRlcnNGcm9udE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZnJvbnQgY3lsaW5kZXJzICh0aGUgc2lkZSBwYXJ0IG9mIHRoZSBjeWxpbmRlcikgdXNlZCB3aXRoaW4gdGhlIFBsaW5rbyBQcm9iYWJpbGl0eSBTaW11bGF0aW9uXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZSAoQmVyZWEgQ29sbGVnZSlcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IExpbmVhckdyYWRpZW50LCBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBsaW5rb1Byb2JhYmlsaXR5Q29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9QbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBwbGlua29Qcm9iYWJpbGl0eSBmcm9tICcuLi8uLi9wbGlua29Qcm9iYWJpbGl0eS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQk9VTkRTID0gUGxpbmtvUHJvYmFiaWxpdHlDb25zdGFudHMuSElTVE9HUkFNX0JPVU5EUztcclxuXHJcbmNsYXNzIEN5bGluZGVyc0Zyb250Tm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IG51bWJlck9mUm93c1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gY3lsaW5kZXJJbmZvIC0gQ29udGFpbnMgY3lsaW5kZXIgaW5mbzogaGVpZ2h0LCB3aWR0aCwgb2Zmc2V0LCBlbGxpcHNlSGVpZ2h0XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG51bWJlck9mUm93c1Byb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIGN5bGluZGVySW5mbyApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuXHJcbiAgICAvLyBjb252ZW5pZW5jZSB2YXJpYWJsZSBmb3IgcGxhY2luZyB0aGUgb2JqZWN0IGlubiB0aGUgdmlld1xyXG4gICAgY29uc3QgZWxsaXBzZVdpZHRoID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBjeWxpbmRlckluZm8uY3lsaW5kZXJXaWR0aCApO1xyXG4gICAgY29uc3QgZWxsaXBzZUhlaWdodCA9IE1hdGguYWJzKCBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVkoIGN5bGluZGVySW5mby5lbGxpcHNlSGVpZ2h0ICkgKTtcclxuICAgIGNvbnN0IGN5bGluZGVySGVpZ2h0ID0gTWF0aC5hYnMoIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggY3lsaW5kZXJJbmZvLmN5bGluZGVySGVpZ2h0ICkgKTtcclxuICAgIGNvbnN0IHZlcnRpY2FsT2Zmc2V0ID0gLW1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggY3lsaW5kZXJJbmZvLnZlcnRpY2FsT2Zmc2V0ICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHNpZGUgc2hhcGUgb2YgdGhlIGN5bGluZGVyXHJcbiAgICBjb25zdCBzaWRlU2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICAgIHNpZGVTaGFwZS5tb3ZlVG8oIC1lbGxpcHNlV2lkdGggLyAyLCAwIClcclxuICAgICAgLmxpbmVUbyggLWVsbGlwc2VXaWR0aCAvIDIsIGN5bGluZGVySGVpZ2h0IClcclxuICAgICAgLmVsbGlwdGljYWxBcmMoIDAsIDAsIGVsbGlwc2VXaWR0aCAvIDIsIGVsbGlwc2VIZWlnaHQgLyAyLCAwLCBNYXRoLlBJLCAwLCB0cnVlIClcclxuICAgICAgLmxpbmVUbyggZWxsaXBzZVdpZHRoIC8gMiwgMCApXHJcbiAgICAgIC5lbGxpcHRpY2FsQXJjKCAwLCBjeWxpbmRlckhlaWdodCwgZWxsaXBzZVdpZHRoIC8gMiwgZWxsaXBzZUhlaWdodCAvIDIsIDAsIDAsIE1hdGguUEksIGZhbHNlIClcclxuICAgICAgLmNsb3NlKCk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBsaW5lYXIgZmlsbCBncmFkaWVudCBmb3IgdGhlIGN5bGluZGVyXHJcbiAgICBjb25zdCBzaWRlRmlsbCA9IG5ldyBMaW5lYXJHcmFkaWVudCggLWVsbGlwc2VXaWR0aCAvIDIsIDAsIGVsbGlwc2VXaWR0aCAvIDIsIDAgKS5hZGRDb2xvclN0b3AoIDAuMCwgUGxpbmtvUHJvYmFiaWxpdHlDb25zdGFudHMuQ1lMSU5ERVJfQkFTRV9DT0xPUi5jb2xvclV0aWxzRGFya2VyKCAwLjcgKSApLmFkZENvbG9yU3RvcCggMC41LCBQbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cy5DWUxJTkRFUl9CQVNFX0NPTE9SICkuYWRkQ29sb3JTdG9wKCAxLCBQbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cy5DWUxJTkRFUl9CQVNFX0NPTE9SLmNvbG9yVXRpbHNCcmlnaHRlciggMC41ICkgKTtcclxuXHJcbiAgICBjb25zdCBzaWRlTGF5ZXJOb2RlID0gbmV3IE5vZGUoKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHNpZGVMYXllck5vZGUgKTtcclxuXHJcbiAgICAvLyBsaW5rIGlzIHByZXNlbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltXHJcbiAgICBudW1iZXJPZlJvd3NQcm9wZXJ0eS5saW5rKCBudW1iZXJPZlJvd3MgPT4ge1xyXG4gICAgICBjb25zdCBudW1iZXJPZlRpY2tzID0gbnVtYmVyT2ZSb3dzICsgMTtcclxuICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZUaWNrczsgaSsrICkge1xyXG4gICAgICAgIGNvbnN0IGJpbkNlbnRlclggPSB0aGlzLmdldEJpbkNlbnRlclgoIGksIG51bWJlck9mVGlja3MgKTtcclxuICAgICAgICBjb25zdCB4ID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggYmluQ2VudGVyWCApO1xyXG4gICAgICAgIGNvbnN0IHkgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCBjeWxpbmRlckluZm8udG9wICk7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSBhbmQgYWRkIHRoZSBwYXRoIGZvciBzaWRlIG9mIHRoZSBjeWxpbmRlclxyXG4gICAgICAgIGNvbnN0IHNpZGUgPSBuZXcgUGF0aCggc2lkZVNoYXBlLCB7XHJcbiAgICAgICAgICBmaWxsOiBzaWRlRmlsbCxcclxuICAgICAgICAgIHN0cm9rZTogUGxpbmtvUHJvYmFiaWxpdHlDb25zdGFudHMuU0lERV9DWUxJTkRFUl9TVFJPS0VfQ09MT1IsXHJcbiAgICAgICAgICBjZW50ZXJYOiB4LFxyXG4gICAgICAgICAgdG9wOiB5ICsgdmVydGljYWxPZmZzZXQgKyBlbGxpcHNlSGVpZ2h0IC8gMlxyXG4gICAgICAgIH0gKTtcclxuICAgICAgICBzaWRlTGF5ZXJOb2RlLmFkZENoaWxkKCBzaWRlICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjZW50ZXIgeCBjb29yZGluYXRlIG9mIGEgYmluIHdpdGggaW5kZXggYmluSW5kZXhcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiaW5JbmRleCAtIGluZGV4IGFzc29jaWF0ZWQgd2l0aCB0aGUgYmluLCB0aGUgaW5kZXggbWF5IHJhbmdlIGZyb20gMCB0byBudW1iZXJPZkJpbnMtMVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJPZkJpbnMgLSB0aGUgbnVtYmVyIG9mIGJpbnMgb24gdGhlIHNjcmVlblxyXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldEJpbkNlbnRlclgoIGJpbkluZGV4LCBudW1iZXJPZkJpbnMgKSB7XHJcbiAgICAvLyBXZSBjb25zaWRlciBudW1iZXJPZkJpbnMtMSBiZWNhdXNlIHdlIGNvbnNpZGVyIHRoZSBtb3N0IGxlZnQgYmluIHRoZSBmaXJzdCBiaW4gb3V0IG9mIHRoZSB0b3RhbCBudW1iZXIgb2YgYmluc1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYmluSW5kZXggPD0gbnVtYmVyT2ZCaW5zIC0gMSApO1xyXG4gICAgcmV0dXJuICggKCBiaW5JbmRleCArIDEgLyAyICkgLyBudW1iZXJPZkJpbnMgKSAqIEJPVU5EUy53aWR0aCArIEJPVU5EUy5taW5YO1xyXG4gIH1cclxufVxyXG5cclxucGxpbmtvUHJvYmFiaWxpdHkucmVnaXN0ZXIoICdDeWxpbmRlcnNGcm9udE5vZGUnLCBDeWxpbmRlcnNGcm9udE5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEN5bGluZGVyc0Zyb250Tm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxTQUFTQyxjQUFjLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RSxPQUFPQywwQkFBMEIsTUFBTSw0Q0FBNEM7QUFDbkYsT0FBT0MsaUJBQWlCLE1BQU0sNEJBQTRCOztBQUUxRDtBQUNBLE1BQU1DLE1BQU0sR0FBR0YsMEJBQTBCLENBQUNHLGdCQUFnQjtBQUUxRCxNQUFNQyxrQkFBa0IsU0FBU04sSUFBSSxDQUFDO0VBQ3BDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsb0JBQW9CLEVBQUVDLGtCQUFrQixFQUFFQyxZQUFZLEVBQUc7SUFFcEUsS0FBSyxDQUFDLENBQUM7O0lBR1A7SUFDQSxNQUFNQyxZQUFZLEdBQUdGLGtCQUFrQixDQUFDRyxpQkFBaUIsQ0FBRUYsWUFBWSxDQUFDRyxhQUFjLENBQUM7SUFDdkYsTUFBTUMsYUFBYSxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBRVAsa0JBQWtCLENBQUNRLGlCQUFpQixDQUFFUCxZQUFZLENBQUNJLGFBQWMsQ0FBRSxDQUFDO0lBQ3BHLE1BQU1JLGNBQWMsR0FBR0gsSUFBSSxDQUFDQyxHQUFHLENBQUVQLGtCQUFrQixDQUFDUSxpQkFBaUIsQ0FBRVAsWUFBWSxDQUFDUSxjQUFlLENBQUUsQ0FBQztJQUN0RyxNQUFNQyxjQUFjLEdBQUcsQ0FBQ1Ysa0JBQWtCLENBQUNRLGlCQUFpQixDQUFFUCxZQUFZLENBQUNTLGNBQWUsQ0FBQzs7SUFFM0Y7SUFDQSxNQUFNQyxTQUFTLEdBQUcsSUFBSXRCLEtBQUssQ0FBQyxDQUFDO0lBQzdCc0IsU0FBUyxDQUFDQyxNQUFNLENBQUUsQ0FBQ1YsWUFBWSxHQUFHLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FDckNXLE1BQU0sQ0FBRSxDQUFDWCxZQUFZLEdBQUcsQ0FBQyxFQUFFTyxjQUFlLENBQUMsQ0FDM0NLLGFBQWEsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFWixZQUFZLEdBQUcsQ0FBQyxFQUFFRyxhQUFhLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUMsSUFBSSxDQUFDUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUssQ0FBQyxDQUMvRUYsTUFBTSxDQUFFWCxZQUFZLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUM3QlksYUFBYSxDQUFFLENBQUMsRUFBRUwsY0FBYyxFQUFFUCxZQUFZLEdBQUcsQ0FBQyxFQUFFRyxhQUFhLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVDLElBQUksQ0FBQ1MsRUFBRSxFQUFFLEtBQU0sQ0FBQyxDQUM3RkMsS0FBSyxDQUFDLENBQUM7O0lBRVY7SUFDQSxNQUFNQyxRQUFRLEdBQUcsSUFBSTNCLGNBQWMsQ0FBRSxDQUFDWSxZQUFZLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUEsWUFBWSxHQUFHLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQ2dCLFlBQVksQ0FBRSxHQUFHLEVBQUV6QiwwQkFBMEIsQ0FBQzBCLG1CQUFtQixDQUFDQyxnQkFBZ0IsQ0FBRSxHQUFJLENBQUUsQ0FBQyxDQUFDRixZQUFZLENBQUUsR0FBRyxFQUFFekIsMEJBQTBCLENBQUMwQixtQkFBb0IsQ0FBQyxDQUFDRCxZQUFZLENBQUUsQ0FBQyxFQUFFekIsMEJBQTBCLENBQUMwQixtQkFBbUIsQ0FBQ0Usa0JBQWtCLENBQUUsR0FBSSxDQUFFLENBQUM7SUFFNVUsTUFBTUMsYUFBYSxHQUFHLElBQUkvQixJQUFJLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUNnQyxRQUFRLENBQUVELGFBQWMsQ0FBQzs7SUFFOUI7SUFDQXZCLG9CQUFvQixDQUFDeUIsSUFBSSxDQUFFQyxZQUFZLElBQUk7TUFDekMsTUFBTUMsYUFBYSxHQUFHRCxZQUFZLEdBQUcsQ0FBQztNQUN0QyxLQUFNLElBQUlFLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsYUFBYSxFQUFFQyxDQUFDLEVBQUUsRUFBRztRQUN4QyxNQUFNQyxVQUFVLEdBQUcsSUFBSSxDQUFDQyxhQUFhLENBQUVGLENBQUMsRUFBRUQsYUFBYyxDQUFDO1FBQ3pELE1BQU1JLENBQUMsR0FBRzlCLGtCQUFrQixDQUFDK0IsWUFBWSxDQUFFSCxVQUFXLENBQUM7UUFDdkQsTUFBTUksQ0FBQyxHQUFHaEMsa0JBQWtCLENBQUNpQyxZQUFZLENBQUVoQyxZQUFZLENBQUNpQyxHQUFJLENBQUM7O1FBRTdEO1FBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQUkzQyxJQUFJLENBQUVtQixTQUFTLEVBQUU7VUFDaEN5QixJQUFJLEVBQUVuQixRQUFRO1VBQ2RvQixNQUFNLEVBQUU1QywwQkFBMEIsQ0FBQzZDLDBCQUEwQjtVQUM3REMsT0FBTyxFQUFFVCxDQUFDO1VBQ1ZJLEdBQUcsRUFBRUYsQ0FBQyxHQUFHdEIsY0FBYyxHQUFHTCxhQUFhLEdBQUc7UUFDNUMsQ0FBRSxDQUFDO1FBQ0hpQixhQUFhLENBQUNDLFFBQVEsQ0FBRVksSUFBSyxDQUFDO01BQ2hDO0lBQ0YsQ0FBRSxDQUFDO0VBRUw7O0VBR0E7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTixhQUFhQSxDQUFFVyxRQUFRLEVBQUVDLFlBQVksRUFBRztJQUN0QztJQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsUUFBUSxJQUFJQyxZQUFZLEdBQUcsQ0FBRSxDQUFDO0lBQ2hELE9BQVMsQ0FBRUQsUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUtDLFlBQVksR0FBSzlDLE1BQU0sQ0FBQ2dELEtBQUssR0FBR2hELE1BQU0sQ0FBQ2lELElBQUk7RUFDN0U7QUFDRjtBQUVBbEQsaUJBQWlCLENBQUNtRCxRQUFRLENBQUUsb0JBQW9CLEVBQUVoRCxrQkFBbUIsQ0FBQztBQUV0RSxlQUFlQSxrQkFBa0IifQ==