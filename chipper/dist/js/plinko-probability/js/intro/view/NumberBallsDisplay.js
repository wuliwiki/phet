// Copyright 2015-2022, University of Colorado Boulder

/**
 * Panel Display of the number of balls that have landed in Plinko Probability Simulation Intro
 *
 * @author Martin Veillette (Berea College)
 */

import merge from '../../../../phet-core/js/merge.js';
import Panel from '../../../../sun/js/Panel.js';
import PlinkoProbabilityConstants from '../../common/PlinkoProbabilityConstants.js';
import EquationNode from '../../common/view/EquationNode.js';
import plinkoProbability from '../../plinkoProbability.js';
import PlinkoProbabilityStrings from '../../PlinkoProbabilityStrings.js';
class NumberBallsDisplay extends Panel {
  /**
   * @param {Histogram} histogram
   * @param {Object} [options]
   */
  constructor(histogram, options) {
    options = merge({
      minWidth: 214,
      // left border of panel is aligned with the left border of the play panel.
      align: 'left',
      yMargin: 7.5
    }, options);
    const optionsTitle = {
      leftHandSideFont: PlinkoProbabilityConstants.TEXT_FONT_BOLD,
      leftHandSideFill: PlinkoProbabilityConstants.SAMPLE_FONT_COLOR,
      rightHandSideFont: PlinkoProbabilityConstants.TEXT_FONT_BOLD,
      rightHandSideFill: PlinkoProbabilityConstants.SAMPLE_FONT_COLOR,
      maxDecimalPlaces: 0
    };
    const numberLandedBallsText = new EquationNode(PlinkoProbabilityStrings.n, 0, optionsTitle);
    histogram.histogramUpdatedEmitter.addListener(() => {
      numberLandedBallsText.setRightHandSideOfEquation(histogram.landedBallsNumber);
    });
    super(numberLandedBallsText, options);
  }
}
plinkoProbability.register('NumberBallsDisplay', NumberBallsDisplay);
export default NumberBallsDisplay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBhbmVsIiwiUGxpbmtvUHJvYmFiaWxpdHlDb25zdGFudHMiLCJFcXVhdGlvbk5vZGUiLCJwbGlua29Qcm9iYWJpbGl0eSIsIlBsaW5rb1Byb2JhYmlsaXR5U3RyaW5ncyIsIk51bWJlckJhbGxzRGlzcGxheSIsImNvbnN0cnVjdG9yIiwiaGlzdG9ncmFtIiwib3B0aW9ucyIsIm1pbldpZHRoIiwiYWxpZ24iLCJ5TWFyZ2luIiwib3B0aW9uc1RpdGxlIiwibGVmdEhhbmRTaWRlRm9udCIsIlRFWFRfRk9OVF9CT0xEIiwibGVmdEhhbmRTaWRlRmlsbCIsIlNBTVBMRV9GT05UX0NPTE9SIiwicmlnaHRIYW5kU2lkZUZvbnQiLCJyaWdodEhhbmRTaWRlRmlsbCIsIm1heERlY2ltYWxQbGFjZXMiLCJudW1iZXJMYW5kZWRCYWxsc1RleHQiLCJuIiwiaGlzdG9ncmFtVXBkYXRlZEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsInNldFJpZ2h0SGFuZFNpZGVPZkVxdWF0aW9uIiwibGFuZGVkQmFsbHNOdW1iZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk51bWJlckJhbGxzRGlzcGxheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQYW5lbCBEaXNwbGF5IG9mIHRoZSBudW1iZXIgb2YgYmFsbHMgdGhhdCBoYXZlIGxhbmRlZCBpbiBQbGlua28gUHJvYmFiaWxpdHkgU2ltdWxhdGlvbiBJbnRyb1xyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgUGxpbmtvUHJvYmFiaWxpdHlDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1BsaW5rb1Byb2JhYmlsaXR5Q29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEVxdWF0aW9uTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9FcXVhdGlvbk5vZGUuanMnO1xyXG5pbXBvcnQgcGxpbmtvUHJvYmFiaWxpdHkgZnJvbSAnLi4vLi4vcGxpbmtvUHJvYmFiaWxpdHkuanMnO1xyXG5pbXBvcnQgUGxpbmtvUHJvYmFiaWxpdHlTdHJpbmdzIGZyb20gJy4uLy4uL1BsaW5rb1Byb2JhYmlsaXR5U3RyaW5ncy5qcyc7XHJcblxyXG5jbGFzcyBOdW1iZXJCYWxsc0Rpc3BsYXkgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7SGlzdG9ncmFtfSBoaXN0b2dyYW1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGhpc3RvZ3JhbSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgbWluV2lkdGg6IDIxNCwgLy8gbGVmdCBib3JkZXIgb2YgcGFuZWwgaXMgYWxpZ25lZCB3aXRoIHRoZSBsZWZ0IGJvcmRlciBvZiB0aGUgcGxheSBwYW5lbC5cclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgeU1hcmdpbjogNy41XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9uc1RpdGxlID0ge1xyXG4gICAgICBsZWZ0SGFuZFNpZGVGb250OiBQbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cy5URVhUX0ZPTlRfQk9MRCxcclxuICAgICAgbGVmdEhhbmRTaWRlRmlsbDogUGxpbmtvUHJvYmFiaWxpdHlDb25zdGFudHMuU0FNUExFX0ZPTlRfQ09MT1IsXHJcbiAgICAgIHJpZ2h0SGFuZFNpZGVGb250OiBQbGlua29Qcm9iYWJpbGl0eUNvbnN0YW50cy5URVhUX0ZPTlRfQk9MRCxcclxuICAgICAgcmlnaHRIYW5kU2lkZUZpbGw6IFBsaW5rb1Byb2JhYmlsaXR5Q29uc3RhbnRzLlNBTVBMRV9GT05UX0NPTE9SLFxyXG4gICAgICBtYXhEZWNpbWFsUGxhY2VzOiAwXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG51bWJlckxhbmRlZEJhbGxzVGV4dCA9IG5ldyBFcXVhdGlvbk5vZGUoIFBsaW5rb1Byb2JhYmlsaXR5U3RyaW5ncy5uLCAwLCBvcHRpb25zVGl0bGUgKTtcclxuXHJcbiAgICBoaXN0b2dyYW0uaGlzdG9ncmFtVXBkYXRlZEVtaXR0ZXIuYWRkTGlzdGVuZXIoICgpID0+IHtcclxuICAgICAgbnVtYmVyTGFuZGVkQmFsbHNUZXh0LnNldFJpZ2h0SGFuZFNpZGVPZkVxdWF0aW9uKCBoaXN0b2dyYW0ubGFuZGVkQmFsbHNOdW1iZXIgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggbnVtYmVyTGFuZGVkQmFsbHNUZXh0LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5wbGlua29Qcm9iYWJpbGl0eS5yZWdpc3RlciggJ051bWJlckJhbGxzRGlzcGxheScsIE51bWJlckJhbGxzRGlzcGxheSApO1xyXG5leHBvcnQgZGVmYXVsdCBOdW1iZXJCYWxsc0Rpc3BsYXk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQywwQkFBMEIsTUFBTSw0Q0FBNEM7QUFDbkYsT0FBT0MsWUFBWSxNQUFNLG1DQUFtQztBQUM1RCxPQUFPQyxpQkFBaUIsTUFBTSw0QkFBNEI7QUFDMUQsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBRXhFLE1BQU1DLGtCQUFrQixTQUFTTCxLQUFLLENBQUM7RUFFckM7QUFDRjtBQUNBO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUc7SUFFaENBLE9BQU8sR0FBR1QsS0FBSyxDQUFFO01BQ2ZVLFFBQVEsRUFBRSxHQUFHO01BQUU7TUFDZkMsS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxFQUFFSCxPQUFRLENBQUM7SUFFWixNQUFNSSxZQUFZLEdBQUc7TUFDbkJDLGdCQUFnQixFQUFFWiwwQkFBMEIsQ0FBQ2EsY0FBYztNQUMzREMsZ0JBQWdCLEVBQUVkLDBCQUEwQixDQUFDZSxpQkFBaUI7TUFDOURDLGlCQUFpQixFQUFFaEIsMEJBQTBCLENBQUNhLGNBQWM7TUFDNURJLGlCQUFpQixFQUFFakIsMEJBQTBCLENBQUNlLGlCQUFpQjtNQUMvREcsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQztJQUVELE1BQU1DLHFCQUFxQixHQUFHLElBQUlsQixZQUFZLENBQUVFLHdCQUF3QixDQUFDaUIsQ0FBQyxFQUFFLENBQUMsRUFBRVQsWUFBYSxDQUFDO0lBRTdGTCxTQUFTLENBQUNlLHVCQUF1QixDQUFDQyxXQUFXLENBQUUsTUFBTTtNQUNuREgscUJBQXFCLENBQUNJLDBCQUEwQixDQUFFakIsU0FBUyxDQUFDa0IsaUJBQWtCLENBQUM7SUFDakYsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFTCxxQkFBcUIsRUFBRVosT0FBUSxDQUFDO0VBQ3pDO0FBQ0Y7QUFFQUwsaUJBQWlCLENBQUN1QixRQUFRLENBQUUsb0JBQW9CLEVBQUVyQixrQkFBbUIsQ0FBQztBQUN0RSxlQUFlQSxrQkFBa0IifQ==