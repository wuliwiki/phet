// Copyright 2016-2021, University of Colorado Boulder

/**
 * Ball model for Intro screen of Plinko Probability
 * This model inherits from the common ball and adds the information needed
 * to place the ball correctly in the cylinder
 * The ball determines its position based on the position and direction in the cylinder
 * of the last ball
 * it also calculates the height it should fall so that we get the a natural stack look.
 *
 * @author Martin Veillette (Berea College)
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import Ball from '../../common/model/Ball.js';
import plinkoProbability from '../../plinkoProbability.js';
class IntroBall extends Ball {
  /**
   * @param {number} probability - number ranging from 0 to 1
   * @param {number} numberOfRows - an integer
   * @param {Array.<Object>} bins
   * @param {Object} cylinderInfo - information about the cylinder: height, width, offset, ellipseHeight
   */
  constructor(probability, numberOfRows, bins, cylinderInfo) {
    super(probability, numberOfRows, bins);

    // let's find the ball horizontal orientation of the top ball within a cylinder
    const lastBallBinOrientation = bins[this.binIndex].orientation;

    // @public (read-only) the ball's orientation within the bin
    // Values are: -1 (left), 0 (center), 1 (right) or null (no ball are present)
    this.binOrientation = 0;
    switch (this.binCount % 3) {
      // a multiple of three, Ball makes decision to be centered
      case 0:
        this.binOrientation = 0; // @public (read-only)
        break;

      // Ball makes probabilistic decision whether to end in left or right horizontal position in the bin
      case 1:
        this.binOrientation = dotRandom.nextBoolean() ? 1 : -1;
        break;

      // the ball must take the opposite orientation than the last ball
      case 2:
        this.binOrientation = -lastBallBinOrientation;
        break;
      default:
        throw new Error(`invalid binOrientation: ${this.binOrientation}`);
    }

    // {number} describes number of rows in the ball stack within a bin, starting at 1
    const binStackLevel = 2 * Math.floor(this.binCount / 3) + (this.binCount % 3 === 0 ? 0 : 1); // number of balls per stack goes as (2,1,2,1,2...

    // {number} describes lowest point of cylinder that a ball will reach (bottom of the cylinder)
    const yMinimum = cylinderInfo.top - cylinderInfo.verticalOffset - cylinderInfo.ellipseHeight - cylinderInfo.cylinderHeight;

    // {number} describes the height difference between two balls in two adjacent rows in a ball stack
    const deltaY = this.ballRadius + Math.sqrt(Math.pow(2 * this.ballRadius, 2) - Math.pow(cylinderInfo.cylinderWidth / 2 - this.ballRadius, 2));

    // @public {number} describes final vertical offset of ball within a bin {number}
    // This field is owned by the supertype, but set here because it depends on other things computed in Ball.
    this.finalBinVerticalOffset = yMinimum + (binStackLevel - 1) * deltaY - this.ballRadius;

    // @public {number} describes final horizontal offset of the ball within a bin {number}
    // This field is owned by the supertype, but set here because it depends on other things computed in Ball.
    this.finalBinHorizontalOffset = this.binOrientation * (cylinderInfo.cylinderWidth / 2 - this.ballRadius);
  }
}
plinkoProbability.register('IntroBall', IntroBall);
export default IntroBall;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJCYWxsIiwicGxpbmtvUHJvYmFiaWxpdHkiLCJJbnRyb0JhbGwiLCJjb25zdHJ1Y3RvciIsInByb2JhYmlsaXR5IiwibnVtYmVyT2ZSb3dzIiwiYmlucyIsImN5bGluZGVySW5mbyIsImxhc3RCYWxsQmluT3JpZW50YXRpb24iLCJiaW5JbmRleCIsIm9yaWVudGF0aW9uIiwiYmluT3JpZW50YXRpb24iLCJiaW5Db3VudCIsIm5leHRCb29sZWFuIiwiRXJyb3IiLCJiaW5TdGFja0xldmVsIiwiTWF0aCIsImZsb29yIiwieU1pbmltdW0iLCJ0b3AiLCJ2ZXJ0aWNhbE9mZnNldCIsImVsbGlwc2VIZWlnaHQiLCJjeWxpbmRlckhlaWdodCIsImRlbHRhWSIsImJhbGxSYWRpdXMiLCJzcXJ0IiwicG93IiwiY3lsaW5kZXJXaWR0aCIsImZpbmFsQmluVmVydGljYWxPZmZzZXQiLCJmaW5hbEJpbkhvcml6b250YWxPZmZzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkludHJvQmFsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCYWxsIG1vZGVsIGZvciBJbnRybyBzY3JlZW4gb2YgUGxpbmtvIFByb2JhYmlsaXR5XHJcbiAqIFRoaXMgbW9kZWwgaW5oZXJpdHMgZnJvbSB0aGUgY29tbW9uIGJhbGwgYW5kIGFkZHMgdGhlIGluZm9ybWF0aW9uIG5lZWRlZFxyXG4gKiB0byBwbGFjZSB0aGUgYmFsbCBjb3JyZWN0bHkgaW4gdGhlIGN5bGluZGVyXHJcbiAqIFRoZSBiYWxsIGRldGVybWluZXMgaXRzIHBvc2l0aW9uIGJhc2VkIG9uIHRoZSBwb3NpdGlvbiBhbmQgZGlyZWN0aW9uIGluIHRoZSBjeWxpbmRlclxyXG4gKiBvZiB0aGUgbGFzdCBiYWxsXHJcbiAqIGl0IGFsc28gY2FsY3VsYXRlcyB0aGUgaGVpZ2h0IGl0IHNob3VsZCBmYWxsIHNvIHRoYXQgd2UgZ2V0IHRoZSBhIG5hdHVyYWwgc3RhY2sgbG9vay5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlIChCZXJlYSBDb2xsZWdlKVxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcbmltcG9ydCBCYWxsIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9CYWxsLmpzJztcclxuaW1wb3J0IHBsaW5rb1Byb2JhYmlsaXR5IGZyb20gJy4uLy4uL3BsaW5rb1Byb2JhYmlsaXR5LmpzJztcclxuXHJcbmNsYXNzIEludHJvQmFsbCBleHRlbmRzIEJhbGwge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcm9iYWJpbGl0eSAtIG51bWJlciByYW5naW5nIGZyb20gMCB0byAxXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlck9mUm93cyAtIGFuIGludGVnZXJcclxuICAgKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBiaW5zXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGN5bGluZGVySW5mbyAtIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjeWxpbmRlcjogaGVpZ2h0LCB3aWR0aCwgb2Zmc2V0LCBlbGxpcHNlSGVpZ2h0XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHByb2JhYmlsaXR5LCBudW1iZXJPZlJvd3MsIGJpbnMsIGN5bGluZGVySW5mbyApIHtcclxuXHJcbiAgICBzdXBlciggcHJvYmFiaWxpdHksIG51bWJlck9mUm93cywgYmlucyApO1xyXG5cclxuICAgIC8vIGxldCdzIGZpbmQgdGhlIGJhbGwgaG9yaXpvbnRhbCBvcmllbnRhdGlvbiBvZiB0aGUgdG9wIGJhbGwgd2l0aGluIGEgY3lsaW5kZXJcclxuICAgIGNvbnN0IGxhc3RCYWxsQmluT3JpZW50YXRpb24gPSBiaW5zWyB0aGlzLmJpbkluZGV4IF0ub3JpZW50YXRpb247XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSB0aGUgYmFsbCdzIG9yaWVudGF0aW9uIHdpdGhpbiB0aGUgYmluXHJcbiAgICAvLyBWYWx1ZXMgYXJlOiAtMSAobGVmdCksIDAgKGNlbnRlciksIDEgKHJpZ2h0KSBvciBudWxsIChubyBiYWxsIGFyZSBwcmVzZW50KVxyXG4gICAgdGhpcy5iaW5PcmllbnRhdGlvbiA9IDA7XHJcbiAgICBzd2l0Y2goIHRoaXMuYmluQ291bnQgJSAzICkge1xyXG5cclxuICAgICAgLy8gYSBtdWx0aXBsZSBvZiB0aHJlZSwgQmFsbCBtYWtlcyBkZWNpc2lvbiB0byBiZSBjZW50ZXJlZFxyXG4gICAgICBjYXNlIDA6XHJcbiAgICAgICAgdGhpcy5iaW5PcmllbnRhdGlvbiA9IDA7IC8vIEBwdWJsaWMgKHJlYWQtb25seSlcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIC8vIEJhbGwgbWFrZXMgcHJvYmFiaWxpc3RpYyBkZWNpc2lvbiB3aGV0aGVyIHRvIGVuZCBpbiBsZWZ0IG9yIHJpZ2h0IGhvcml6b250YWwgcG9zaXRpb24gaW4gdGhlIGJpblxyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgICAgdGhpcy5iaW5PcmllbnRhdGlvbiA9ICggZG90UmFuZG9tLm5leHRCb29sZWFuKCkgPyAxIDogLTEgKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIC8vIHRoZSBiYWxsIG11c3QgdGFrZSB0aGUgb3Bwb3NpdGUgb3JpZW50YXRpb24gdGhhbiB0aGUgbGFzdCBiYWxsXHJcbiAgICAgIGNhc2UgMjpcclxuICAgICAgICB0aGlzLmJpbk9yaWVudGF0aW9uID0gLWxhc3RCYWxsQmluT3JpZW50YXRpb247XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvciggYGludmFsaWQgYmluT3JpZW50YXRpb246ICR7dGhpcy5iaW5PcmllbnRhdGlvbn1gICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8ge251bWJlcn0gZGVzY3JpYmVzIG51bWJlciBvZiByb3dzIGluIHRoZSBiYWxsIHN0YWNrIHdpdGhpbiBhIGJpbiwgc3RhcnRpbmcgYXQgMVxyXG4gICAgY29uc3QgYmluU3RhY2tMZXZlbCA9IDIgKiBNYXRoLmZsb29yKCB0aGlzLmJpbkNvdW50IC8gMyApICsgKCAoIHRoaXMuYmluQ291bnQgJSAzID09PSAwICkgPyAwIDogMSApOyAvLyBudW1iZXIgb2YgYmFsbHMgcGVyIHN0YWNrIGdvZXMgYXMgKDIsMSwyLDEsMi4uLlxyXG5cclxuICAgIC8vIHtudW1iZXJ9IGRlc2NyaWJlcyBsb3dlc3QgcG9pbnQgb2YgY3lsaW5kZXIgdGhhdCBhIGJhbGwgd2lsbCByZWFjaCAoYm90dG9tIG9mIHRoZSBjeWxpbmRlcilcclxuICAgIGNvbnN0IHlNaW5pbXVtID0gY3lsaW5kZXJJbmZvLnRvcCAtIGN5bGluZGVySW5mby52ZXJ0aWNhbE9mZnNldCAtIGN5bGluZGVySW5mby5lbGxpcHNlSGVpZ2h0IC0gY3lsaW5kZXJJbmZvLmN5bGluZGVySGVpZ2h0O1xyXG5cclxuICAgIC8vIHtudW1iZXJ9IGRlc2NyaWJlcyB0aGUgaGVpZ2h0IGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gYmFsbHMgaW4gdHdvIGFkamFjZW50IHJvd3MgaW4gYSBiYWxsIHN0YWNrXHJcbiAgICBjb25zdCBkZWx0YVkgPSB0aGlzLmJhbGxSYWRpdXMgKyBNYXRoLnNxcnQoIE1hdGgucG93KCAyICogdGhpcy5iYWxsUmFkaXVzLCAyICkgLSBNYXRoLnBvdyggKCBjeWxpbmRlckluZm8uY3lsaW5kZXJXaWR0aCAvIDIgKSAtIHRoaXMuYmFsbFJhZGl1cywgMiApICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7bnVtYmVyfSBkZXNjcmliZXMgZmluYWwgdmVydGljYWwgb2Zmc2V0IG9mIGJhbGwgd2l0aGluIGEgYmluIHtudW1iZXJ9XHJcbiAgICAvLyBUaGlzIGZpZWxkIGlzIG93bmVkIGJ5IHRoZSBzdXBlcnR5cGUsIGJ1dCBzZXQgaGVyZSBiZWNhdXNlIGl0IGRlcGVuZHMgb24gb3RoZXIgdGhpbmdzIGNvbXB1dGVkIGluIEJhbGwuXHJcbiAgICB0aGlzLmZpbmFsQmluVmVydGljYWxPZmZzZXQgPSB5TWluaW11bSArICggKCBiaW5TdGFja0xldmVsIC0gMSApICogZGVsdGFZICkgLSB0aGlzLmJhbGxSYWRpdXM7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7bnVtYmVyfSBkZXNjcmliZXMgZmluYWwgaG9yaXpvbnRhbCBvZmZzZXQgb2YgdGhlIGJhbGwgd2l0aGluIGEgYmluIHtudW1iZXJ9XHJcbiAgICAvLyBUaGlzIGZpZWxkIGlzIG93bmVkIGJ5IHRoZSBzdXBlcnR5cGUsIGJ1dCBzZXQgaGVyZSBiZWNhdXNlIGl0IGRlcGVuZHMgb24gb3RoZXIgdGhpbmdzIGNvbXB1dGVkIGluIEJhbGwuXHJcbiAgICB0aGlzLmZpbmFsQmluSG9yaXpvbnRhbE9mZnNldCA9ICggdGhpcy5iaW5PcmllbnRhdGlvbiAqICggKCBjeWxpbmRlckluZm8uY3lsaW5kZXJXaWR0aCAvIDIgKSAtIHRoaXMuYmFsbFJhZGl1cyApICk7XHJcbiAgfVxyXG59XHJcblxyXG5wbGlua29Qcm9iYWJpbGl0eS5yZWdpc3RlciggJ0ludHJvQmFsbCcsIEludHJvQmFsbCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW50cm9CYWxsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxJQUFJLE1BQU0sNEJBQTRCO0FBQzdDLE9BQU9DLGlCQUFpQixNQUFNLDRCQUE0QjtBQUUxRCxNQUFNQyxTQUFTLFNBQVNGLElBQUksQ0FBQztFQUMzQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUVDLElBQUksRUFBRUMsWUFBWSxFQUFHO0lBRTNELEtBQUssQ0FBRUgsV0FBVyxFQUFFQyxZQUFZLEVBQUVDLElBQUssQ0FBQzs7SUFFeEM7SUFDQSxNQUFNRSxzQkFBc0IsR0FBR0YsSUFBSSxDQUFFLElBQUksQ0FBQ0csUUFBUSxDQUFFLENBQUNDLFdBQVc7O0lBRWhFO0lBQ0E7SUFDQSxJQUFJLENBQUNDLGNBQWMsR0FBRyxDQUFDO0lBQ3ZCLFFBQVEsSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBQztNQUV2QjtNQUNBLEtBQUssQ0FBQztRQUNKLElBQUksQ0FBQ0QsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCOztNQUVGO01BQ0EsS0FBSyxDQUFDO1FBQ0osSUFBSSxDQUFDQSxjQUFjLEdBQUtaLFNBQVMsQ0FBQ2MsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFHO1FBQzFEOztNQUVGO01BQ0EsS0FBSyxDQUFDO1FBQ0osSUFBSSxDQUFDRixjQUFjLEdBQUcsQ0FBQ0gsc0JBQXNCO1FBQzdDO01BRUY7UUFDRSxNQUFNLElBQUlNLEtBQUssQ0FBRywyQkFBMEIsSUFBSSxDQUFDSCxjQUFlLEVBQUUsQ0FBQztJQUN2RTs7SUFFQTtJQUNBLE1BQU1JLGFBQWEsR0FBRyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFFLElBQUksQ0FBQ0wsUUFBUSxHQUFHLENBQUUsQ0FBQyxJQUFPLElBQUksQ0FBQ0EsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUssQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLENBQUM7O0lBRXJHO0lBQ0EsTUFBTU0sUUFBUSxHQUFHWCxZQUFZLENBQUNZLEdBQUcsR0FBR1osWUFBWSxDQUFDYSxjQUFjLEdBQUdiLFlBQVksQ0FBQ2MsYUFBYSxHQUFHZCxZQUFZLENBQUNlLGNBQWM7O0lBRTFIO0lBQ0EsTUFBTUMsTUFBTSxHQUFHLElBQUksQ0FBQ0MsVUFBVSxHQUFHUixJQUFJLENBQUNTLElBQUksQ0FBRVQsSUFBSSxDQUFDVSxHQUFHLENBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQ0YsVUFBVSxFQUFFLENBQUUsQ0FBQyxHQUFHUixJQUFJLENBQUNVLEdBQUcsQ0FBSW5CLFlBQVksQ0FBQ29CLGFBQWEsR0FBRyxDQUFDLEdBQUssSUFBSSxDQUFDSCxVQUFVLEVBQUUsQ0FBRSxDQUFFLENBQUM7O0lBRXRKO0lBQ0E7SUFDQSxJQUFJLENBQUNJLHNCQUFzQixHQUFHVixRQUFRLEdBQUssQ0FBRUgsYUFBYSxHQUFHLENBQUMsSUFBS1EsTUFBUSxHQUFHLElBQUksQ0FBQ0MsVUFBVTs7SUFFN0Y7SUFDQTtJQUNBLElBQUksQ0FBQ0ssd0JBQXdCLEdBQUssSUFBSSxDQUFDbEIsY0FBYyxJQUFPSixZQUFZLENBQUNvQixhQUFhLEdBQUcsQ0FBQyxHQUFLLElBQUksQ0FBQ0gsVUFBVSxDQUFJO0VBQ3BIO0FBQ0Y7QUFFQXZCLGlCQUFpQixDQUFDNkIsUUFBUSxDQUFFLFdBQVcsRUFBRTVCLFNBQVUsQ0FBQztBQUVwRCxlQUFlQSxTQUFTIn0=