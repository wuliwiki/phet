// Copyright 2015-2023, University of Colorado Boulder

/**
 * Controls the values of the 'histogram mode' Property, which determines the representation
 * that is displayed at the output (bottom) of the Galton board.
 *
 * @author Denzell Barnett (Berea College)
 */

import merge from '../../../../phet-core/js/merge.js';
import { Image } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import plinkoProbability from '../../plinkoProbability.js';

// constants
const ICON_WIDTH = 35;
class HistogramModeControl extends RectangularRadioButtonGroup {
  /**
   * @param {Property.<string>} histogramModeProperty - see PlinkoProbabilityCommonView
   * @param {string} topValue - value associated with top radio button
   * @param {HTMLImageElement} topImage - image used to create icon for top radio button
   * @param {string} bottomValue - value associated with bottom radio button
   * @param {HTMLImageElement} bottomImage - image used to create icon for bottom radio button
   * @param {Object} [options]
   */
  constructor(histogramModeProperty, topValue, topImage, bottomValue, bottomImage, options) {
    options = merge({
      spacing: 5,
      // vertical separation of the buttons
      radioButtonOptions: {
        cornerRadius: 10,
        baseColor: 'white',
        xMargin: 5,
        yMargin: 5,
        buttonAppearanceStrategyOptions: {
          selectedStroke: 'black',
          deselectedLineWidth: 1,
          selectedLineWidth: 2
        }
      }
    }, options);

    // create the icons for the radio buttons
    const topNode = new Image(topImage);
    topNode.scale(ICON_WIDTH / topNode.width);
    const bottomNode = new Image(bottomImage);
    bottomNode.scale(ICON_WIDTH / bottomNode.width);
    super(histogramModeProperty, [{
      value: topValue,
      createNode: () => topNode
    }, {
      value: bottomValue,
      createNode: () => bottomNode
    }], options);
  }
}
plinkoProbability.register('HistogramModeControl', HistogramModeControl);
export default HistogramModeControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkltYWdlIiwiUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIiwicGxpbmtvUHJvYmFiaWxpdHkiLCJJQ09OX1dJRFRIIiwiSGlzdG9ncmFtTW9kZUNvbnRyb2wiLCJjb25zdHJ1Y3RvciIsImhpc3RvZ3JhbU1vZGVQcm9wZXJ0eSIsInRvcFZhbHVlIiwidG9wSW1hZ2UiLCJib3R0b21WYWx1ZSIsImJvdHRvbUltYWdlIiwib3B0aW9ucyIsInNwYWNpbmciLCJyYWRpb0J1dHRvbk9wdGlvbnMiLCJjb3JuZXJSYWRpdXMiLCJiYXNlQ29sb3IiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneU9wdGlvbnMiLCJzZWxlY3RlZFN0cm9rZSIsImRlc2VsZWN0ZWRMaW5lV2lkdGgiLCJzZWxlY3RlZExpbmVXaWR0aCIsInRvcE5vZGUiLCJzY2FsZSIsIndpZHRoIiwiYm90dG9tTm9kZSIsInZhbHVlIiwiY3JlYXRlTm9kZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSGlzdG9ncmFtTW9kZUNvbnRyb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udHJvbHMgdGhlIHZhbHVlcyBvZiB0aGUgJ2hpc3RvZ3JhbSBtb2RlJyBQcm9wZXJ0eSwgd2hpY2ggZGV0ZXJtaW5lcyB0aGUgcmVwcmVzZW50YXRpb25cclxuICogdGhhdCBpcyBkaXNwbGF5ZWQgYXQgdGhlIG91dHB1dCAoYm90dG9tKSBvZiB0aGUgR2FsdG9uIGJvYXJkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIERlbnplbGwgQmFybmV0dCAoQmVyZWEgQ29sbGVnZSlcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBwbGlua29Qcm9iYWJpbGl0eSBmcm9tICcuLi8uLi9wbGlua29Qcm9iYWJpbGl0eS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgSUNPTl9XSURUSCA9IDM1O1xyXG5cclxuY2xhc3MgSGlzdG9ncmFtTW9kZUNvbnRyb2wgZXh0ZW5kcyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxzdHJpbmc+fSBoaXN0b2dyYW1Nb2RlUHJvcGVydHkgLSBzZWUgUGxpbmtvUHJvYmFiaWxpdHlDb21tb25WaWV3XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcFZhbHVlIC0gdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRvcCByYWRpbyBidXR0b25cclxuICAgKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnR9IHRvcEltYWdlIC0gaW1hZ2UgdXNlZCB0byBjcmVhdGUgaWNvbiBmb3IgdG9wIHJhZGlvIGJ1dHRvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBib3R0b21WYWx1ZSAtIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBib3R0b20gcmFkaW8gYnV0dG9uXHJcbiAgICogQHBhcmFtIHtIVE1MSW1hZ2VFbGVtZW50fSBib3R0b21JbWFnZSAtIGltYWdlIHVzZWQgdG8gY3JlYXRlIGljb24gZm9yIGJvdHRvbSByYWRpbyBidXR0b25cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGhpc3RvZ3JhbU1vZGVQcm9wZXJ0eSwgdG9wVmFsdWUsIHRvcEltYWdlLCBib3R0b21WYWx1ZSwgYm90dG9tSW1hZ2UsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHNwYWNpbmc6IDUsIC8vIHZlcnRpY2FsIHNlcGFyYXRpb24gb2YgdGhlIGJ1dHRvbnNcclxuICAgICAgcmFkaW9CdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgY29ybmVyUmFkaXVzOiAxMCxcclxuICAgICAgICBiYXNlQ29sb3I6ICd3aGl0ZScsXHJcbiAgICAgICAgeE1hcmdpbjogNSxcclxuICAgICAgICB5TWFyZ2luOiA1LFxyXG4gICAgICAgIGJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneU9wdGlvbnM6IHtcclxuICAgICAgICAgIHNlbGVjdGVkU3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICAgICAgZGVzZWxlY3RlZExpbmVXaWR0aDogMSxcclxuICAgICAgICAgIHNlbGVjdGVkTGluZVdpZHRoOiAyXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBpY29ucyBmb3IgdGhlIHJhZGlvIGJ1dHRvbnNcclxuICAgIGNvbnN0IHRvcE5vZGUgPSBuZXcgSW1hZ2UoIHRvcEltYWdlICk7XHJcbiAgICB0b3BOb2RlLnNjYWxlKCBJQ09OX1dJRFRIIC8gdG9wTm9kZS53aWR0aCApO1xyXG5cclxuICAgIGNvbnN0IGJvdHRvbU5vZGUgPSBuZXcgSW1hZ2UoIGJvdHRvbUltYWdlICk7XHJcbiAgICBib3R0b21Ob2RlLnNjYWxlKCBJQ09OX1dJRFRIIC8gYm90dG9tTm9kZS53aWR0aCApO1xyXG5cclxuICAgIHN1cGVyKCBoaXN0b2dyYW1Nb2RlUHJvcGVydHksIFtcclxuICAgICAgeyB2YWx1ZTogdG9wVmFsdWUsIGNyZWF0ZU5vZGU6ICgpID0+IHRvcE5vZGUgfSxcclxuICAgICAgeyB2YWx1ZTogYm90dG9tVmFsdWUsIGNyZWF0ZU5vZGU6ICgpID0+IGJvdHRvbU5vZGUgfVxyXG4gICAgXSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxucGxpbmtvUHJvYmFiaWxpdHkucmVnaXN0ZXIoICdIaXN0b2dyYW1Nb2RlQ29udHJvbCcsIEhpc3RvZ3JhbU1vZGVDb250cm9sICk7XHJcbmV4cG9ydCBkZWZhdWx0IEhpc3RvZ3JhbU1vZGVDb250cm9sOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsS0FBSyxRQUFRLG1DQUFtQztBQUN6RCxPQUFPQywyQkFBMkIsTUFBTSwyREFBMkQ7QUFDbkcsT0FBT0MsaUJBQWlCLE1BQU0sNEJBQTRCOztBQUUxRDtBQUNBLE1BQU1DLFVBQVUsR0FBRyxFQUFFO0FBRXJCLE1BQU1DLG9CQUFvQixTQUFTSCwyQkFBMkIsQ0FBQztFQUU3RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLHFCQUFxQixFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRztJQUUxRkEsT0FBTyxHQUFHWixLQUFLLENBQUU7TUFDZmEsT0FBTyxFQUFFLENBQUM7TUFBRTtNQUNaQyxrQkFBa0IsRUFBRTtRQUNsQkMsWUFBWSxFQUFFLEVBQUU7UUFDaEJDLFNBQVMsRUFBRSxPQUFPO1FBQ2xCQyxPQUFPLEVBQUUsQ0FBQztRQUNWQyxPQUFPLEVBQUUsQ0FBQztRQUNWQywrQkFBK0IsRUFBRTtVQUMvQkMsY0FBYyxFQUFFLE9BQU87VUFDdkJDLG1CQUFtQixFQUFFLENBQUM7VUFDdEJDLGlCQUFpQixFQUFFO1FBQ3JCO01BQ0Y7SUFDRixDQUFDLEVBQUVWLE9BQVEsQ0FBQzs7SUFFWjtJQUNBLE1BQU1XLE9BQU8sR0FBRyxJQUFJdEIsS0FBSyxDQUFFUSxRQUFTLENBQUM7SUFDckNjLE9BQU8sQ0FBQ0MsS0FBSyxDQUFFcEIsVUFBVSxHQUFHbUIsT0FBTyxDQUFDRSxLQUFNLENBQUM7SUFFM0MsTUFBTUMsVUFBVSxHQUFHLElBQUl6QixLQUFLLENBQUVVLFdBQVksQ0FBQztJQUMzQ2UsVUFBVSxDQUFDRixLQUFLLENBQUVwQixVQUFVLEdBQUdzQixVQUFVLENBQUNELEtBQU0sQ0FBQztJQUVqRCxLQUFLLENBQUVsQixxQkFBcUIsRUFBRSxDQUM1QjtNQUFFb0IsS0FBSyxFQUFFbkIsUUFBUTtNQUFFb0IsVUFBVSxFQUFFQSxDQUFBLEtBQU1MO0lBQVEsQ0FBQyxFQUM5QztNQUFFSSxLQUFLLEVBQUVqQixXQUFXO01BQUVrQixVQUFVLEVBQUVBLENBQUEsS0FBTUY7SUFBVyxDQUFDLENBQ3JELEVBQUVkLE9BQVEsQ0FBQztFQUNkO0FBQ0Y7QUFFQVQsaUJBQWlCLENBQUMwQixRQUFRLENBQUUsc0JBQXNCLEVBQUV4QixvQkFBcUIsQ0FBQztBQUMxRSxlQUFlQSxvQkFBb0IifQ==