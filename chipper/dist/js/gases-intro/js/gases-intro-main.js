// Copyright 2019-2022, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import GasPropertiesConstants from '../../gas-properties/js/common/GasPropertiesConstants.js';
import GasPropertiesPreferences from '../../gas-properties/js/common/model/GasPropertiesPreferences.js';
import GasPropertiesPreferencesNode from '../../gas-properties/js/common/view/GasPropertiesPreferencesNode.js';
import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import { Utils } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import GasesIntroStrings from './GasesIntroStrings.js';
import IntroScreen from './intro/IntroScreen.js';
import LawsScreen from './laws/LawsScreen.js';
simLauncher.launch(() => {
  /**
   * If the pressureNoise query parameter was not specified in the URL, then set it to false.
   * The default is true for Gas Properties, and this is a workaround to change that default
   * for this derivative sim.  See https://github.com/phetsims/gases-intro/issues/3
   */
  if (!QueryStringMachine.containsKey('pressureNoise')) {
    GasPropertiesPreferences.pressureNoiseProperty.value = false;
  }
  const screens = [new IntroScreen(Tandem.ROOT.createTandem('introScreen')), new LawsScreen(Tandem.ROOT.createTandem('lawsScreen'))];
  const sim = new Sim(GasesIntroStrings['gases-intro'].titleStringProperty, screens, {
    webgl: true,
    // Enabled for high-performance Sprites
    credits: GasPropertiesConstants.CREDITS,
    preferencesModel: new PreferencesModel({
      visualOptions: {
        supportsProjectorMode: true
      },
      simulationOptions: {
        customPreferences: [{
          createContent: tandem => new GasPropertiesPreferencesNode({
            tandem: tandem.createTandem('simPreferences')
          })
        }]
      }
    })
  });

  // Log whether we're using WebGL, which is the preferred rendering option for Sprites
  phet.log && phet.log(`using WebGL = ${phet.chipper.queryParameters.webgl && Utils.isWebGLSupported}`);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzIiwiR2FzUHJvcGVydGllc1ByZWZlcmVuY2VzIiwiR2FzUHJvcGVydGllc1ByZWZlcmVuY2VzTm9kZSIsIlByZWZlcmVuY2VzTW9kZWwiLCJTaW0iLCJzaW1MYXVuY2hlciIsIlV0aWxzIiwiVGFuZGVtIiwiR2FzZXNJbnRyb1N0cmluZ3MiLCJJbnRyb1NjcmVlbiIsIkxhd3NTY3JlZW4iLCJsYXVuY2giLCJRdWVyeVN0cmluZ01hY2hpbmUiLCJjb250YWluc0tleSIsInByZXNzdXJlTm9pc2VQcm9wZXJ0eSIsInZhbHVlIiwic2NyZWVucyIsIlJPT1QiLCJjcmVhdGVUYW5kZW0iLCJzaW0iLCJ0aXRsZVN0cmluZ1Byb3BlcnR5Iiwid2ViZ2wiLCJjcmVkaXRzIiwiQ1JFRElUUyIsInByZWZlcmVuY2VzTW9kZWwiLCJ2aXN1YWxPcHRpb25zIiwic3VwcG9ydHNQcm9qZWN0b3JNb2RlIiwic2ltdWxhdGlvbk9wdGlvbnMiLCJjdXN0b21QcmVmZXJlbmNlcyIsImNyZWF0ZUNvbnRlbnQiLCJ0YW5kZW0iLCJwaGV0IiwibG9nIiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImlzV2ViR0xTdXBwb3J0ZWQiLCJzdGFydCJdLCJzb3VyY2VzIjpbImdhc2VzLWludHJvLW1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlIHNpbS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgR2FzUHJvcGVydGllc0NvbnN0YW50cyBmcm9tICcuLi8uLi9nYXMtcHJvcGVydGllcy9qcy9jb21tb24vR2FzUHJvcGVydGllc0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzUHJlZmVyZW5jZXMgZnJvbSAnLi4vLi4vZ2FzLXByb3BlcnRpZXMvanMvY29tbW9uL21vZGVsL0dhc1Byb3BlcnRpZXNQcmVmZXJlbmNlcy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzUHJlZmVyZW5jZXNOb2RlIGZyb20gJy4uLy4uL2dhcy1wcm9wZXJ0aWVzL2pzL2NvbW1vbi92aWV3L0dhc1Byb3BlcnRpZXNQcmVmZXJlbmNlc05vZGUuanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNNb2RlbCBmcm9tICcuLi8uLi9qb2lzdC9qcy9wcmVmZXJlbmNlcy9QcmVmZXJlbmNlc01vZGVsLmpzJztcclxuaW1wb3J0IFNpbSBmcm9tICcuLi8uLi9qb2lzdC9qcy9TaW0uanMnO1xyXG5pbXBvcnQgc2ltTGF1bmNoZXIgZnJvbSAnLi4vLi4vam9pc3QvanMvc2ltTGF1bmNoZXIuanMnO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHYXNlc0ludHJvU3RyaW5ncyBmcm9tICcuL0dhc2VzSW50cm9TdHJpbmdzLmpzJztcclxuaW1wb3J0IEludHJvU2NyZWVuIGZyb20gJy4vaW50cm8vSW50cm9TY3JlZW4uanMnO1xyXG5pbXBvcnQgTGF3c1NjcmVlbiBmcm9tICcuL2xhd3MvTGF3c1NjcmVlbi5qcyc7XHJcblxyXG5zaW1MYXVuY2hlci5sYXVuY2goICgpID0+IHtcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIHByZXNzdXJlTm9pc2UgcXVlcnkgcGFyYW1ldGVyIHdhcyBub3Qgc3BlY2lmaWVkIGluIHRoZSBVUkwsIHRoZW4gc2V0IGl0IHRvIGZhbHNlLlxyXG4gICAqIFRoZSBkZWZhdWx0IGlzIHRydWUgZm9yIEdhcyBQcm9wZXJ0aWVzLCBhbmQgdGhpcyBpcyBhIHdvcmthcm91bmQgdG8gY2hhbmdlIHRoYXQgZGVmYXVsdFxyXG4gICAqIGZvciB0aGlzIGRlcml2YXRpdmUgc2ltLiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9nYXNlcy1pbnRyby9pc3N1ZXMvM1xyXG4gICAqL1xyXG4gIGlmICggIVF1ZXJ5U3RyaW5nTWFjaGluZS5jb250YWluc0tleSggJ3ByZXNzdXJlTm9pc2UnICkgKSB7XHJcbiAgICBHYXNQcm9wZXJ0aWVzUHJlZmVyZW5jZXMucHJlc3N1cmVOb2lzZVByb3BlcnR5LnZhbHVlID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCBzY3JlZW5zID0gW1xyXG4gICAgbmV3IEludHJvU2NyZWVuKCBUYW5kZW0uUk9PVC5jcmVhdGVUYW5kZW0oICdpbnRyb1NjcmVlbicgKSApLFxyXG4gICAgbmV3IExhd3NTY3JlZW4oIFRhbmRlbS5ST09ULmNyZWF0ZVRhbmRlbSggJ2xhd3NTY3JlZW4nICkgKVxyXG4gIF07XHJcblxyXG4gIGNvbnN0IHNpbSA9IG5ldyBTaW0oIEdhc2VzSW50cm9TdHJpbmdzWyAnZ2FzZXMtaW50cm8nIF0udGl0bGVTdHJpbmdQcm9wZXJ0eSwgc2NyZWVucywge1xyXG4gICAgd2ViZ2w6IHRydWUsIC8vIEVuYWJsZWQgZm9yIGhpZ2gtcGVyZm9ybWFuY2UgU3ByaXRlc1xyXG4gICAgY3JlZGl0czogR2FzUHJvcGVydGllc0NvbnN0YW50cy5DUkVESVRTLFxyXG4gICAgcHJlZmVyZW5jZXNNb2RlbDogbmV3IFByZWZlcmVuY2VzTW9kZWwoIHtcclxuICAgICAgdmlzdWFsT3B0aW9uczoge1xyXG4gICAgICAgIHN1cHBvcnRzUHJvamVjdG9yTW9kZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzaW11bGF0aW9uT3B0aW9uczoge1xyXG4gICAgICAgIGN1c3RvbVByZWZlcmVuY2VzOiBbIHtcclxuICAgICAgICAgIGNyZWF0ZUNvbnRlbnQ6IHRhbmRlbSA9PiBuZXcgR2FzUHJvcGVydGllc1ByZWZlcmVuY2VzTm9kZSgge1xyXG4gICAgICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzaW1QcmVmZXJlbmNlcycgKVxyXG4gICAgICAgICAgfSApXHJcbiAgICAgICAgfSBdXHJcbiAgICAgIH1cclxuICAgIH0gKVxyXG4gIH0gKTtcclxuXHJcbiAgLy8gTG9nIHdoZXRoZXIgd2UncmUgdXNpbmcgV2ViR0wsIHdoaWNoIGlzIHRoZSBwcmVmZXJyZWQgcmVuZGVyaW5nIG9wdGlvbiBmb3IgU3ByaXRlc1xyXG4gIHBoZXQubG9nICYmIHBoZXQubG9nKCBgdXNpbmcgV2ViR0wgPSAke3BoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMud2ViZ2wgJiYgVXRpbHMuaXNXZWJHTFN1cHBvcnRlZH1gICk7XHJcblxyXG4gIHNpbS5zdGFydCgpO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHNCQUFzQixNQUFNLDBEQUEwRDtBQUM3RixPQUFPQyx3QkFBd0IsTUFBTSxrRUFBa0U7QUFDdkcsT0FBT0MsNEJBQTRCLE1BQU0scUVBQXFFO0FBQzlHLE9BQU9DLGdCQUFnQixNQUFNLGdEQUFnRDtBQUM3RSxPQUFPQyxHQUFHLE1BQU0sdUJBQXVCO0FBQ3ZDLE9BQU9DLFdBQVcsTUFBTSwrQkFBK0I7QUFDdkQsU0FBU0MsS0FBSyxRQUFRLDZCQUE2QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxXQUFXLE1BQU0sd0JBQXdCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxzQkFBc0I7QUFFN0NMLFdBQVcsQ0FBQ00sTUFBTSxDQUFFLE1BQU07RUFFeEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFLElBQUssQ0FBQ0Msa0JBQWtCLENBQUNDLFdBQVcsQ0FBRSxlQUFnQixDQUFDLEVBQUc7SUFDeERaLHdCQUF3QixDQUFDYSxxQkFBcUIsQ0FBQ0MsS0FBSyxHQUFHLEtBQUs7RUFDOUQ7RUFFQSxNQUFNQyxPQUFPLEdBQUcsQ0FDZCxJQUFJUCxXQUFXLENBQUVGLE1BQU0sQ0FBQ1UsSUFBSSxDQUFDQyxZQUFZLENBQUUsYUFBYyxDQUFFLENBQUMsRUFDNUQsSUFBSVIsVUFBVSxDQUFFSCxNQUFNLENBQUNVLElBQUksQ0FBQ0MsWUFBWSxDQUFFLFlBQWEsQ0FBRSxDQUFDLENBQzNEO0VBRUQsTUFBTUMsR0FBRyxHQUFHLElBQUlmLEdBQUcsQ0FBRUksaUJBQWlCLENBQUUsYUFBYSxDQUFFLENBQUNZLG1CQUFtQixFQUFFSixPQUFPLEVBQUU7SUFDcEZLLEtBQUssRUFBRSxJQUFJO0lBQUU7SUFDYkMsT0FBTyxFQUFFdEIsc0JBQXNCLENBQUN1QixPQUFPO0lBQ3ZDQyxnQkFBZ0IsRUFBRSxJQUFJckIsZ0JBQWdCLENBQUU7TUFDdENzQixhQUFhLEVBQUU7UUFDYkMscUJBQXFCLEVBQUU7TUFDekIsQ0FBQztNQUNEQyxpQkFBaUIsRUFBRTtRQUNqQkMsaUJBQWlCLEVBQUUsQ0FBRTtVQUNuQkMsYUFBYSxFQUFFQyxNQUFNLElBQUksSUFBSTVCLDRCQUE0QixDQUFFO1lBQ3pENEIsTUFBTSxFQUFFQSxNQUFNLENBQUNaLFlBQVksQ0FBRSxnQkFBaUI7VUFDaEQsQ0FBRTtRQUNKLENBQUM7TUFDSDtJQUNGLENBQUU7RUFDSixDQUFFLENBQUM7O0VBRUg7RUFDQWEsSUFBSSxDQUFDQyxHQUFHLElBQUlELElBQUksQ0FBQ0MsR0FBRyxDQUFHLGlCQUFnQkQsSUFBSSxDQUFDRSxPQUFPLENBQUNDLGVBQWUsQ0FBQ2IsS0FBSyxJQUFJZixLQUFLLENBQUM2QixnQkFBaUIsRUFBRSxDQUFDO0VBRXZHaEIsR0FBRyxDQUFDaUIsS0FBSyxDQUFDLENBQUM7QUFDYixDQUFFLENBQUMifQ==