// Copyright 2014-2022, University of Colorado Boulder

/**
 * FilterHalfEllipse is used to form the actual filter image. It is cut in half so
 * it can be layered with the beam above one half and below the other.
 *
 * @author Aaron Davis (PhET Interactive Simulations)
 */

import { Shape } from '../../../../kite/js/imports.js';
import VisibleColor from '../../../../scenery-phet/js/VisibleColor.js';
import { Path } from '../../../../scenery/js/imports.js';
import colorVision from '../../colorVision.js';
class FilterHalfEllipse extends Path {
  /**
   * @param {Property.<number>} filterWavelengthProperty
   * @param {Property.<number>} filterVisibleProperty
   * @param {number} centerX
   * @param {number} centerY
   * @param {number} radiusX
   * @param {number} radiusY
   * @param {boolean} left is true to draw the left half of the filter, false to draw the right
   */
  constructor(filterWavelengthProperty, filterVisibleProperty, centerX, centerY, radiusX, radiusY, left) {
    const shape = new Shape().moveTo(centerX, centerY - radiusY).ellipticalArc(centerX, centerY, radiusX, radiusY, 0, -Math.PI / 2, Math.PI / 2, left).close();
    super(shape);
    filterWavelengthProperty.link(wavelength => {
      this.fill = VisibleColor.wavelengthToColor(wavelength);
    });
    filterVisibleProperty.linkAttribute(this, 'visible');
  }
}
colorVision.register('FilterHalfEllipse', FilterHalfEllipse);
export default FilterHalfEllipse;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIlZpc2libGVDb2xvciIsIlBhdGgiLCJjb2xvclZpc2lvbiIsIkZpbHRlckhhbGZFbGxpcHNlIiwiY29uc3RydWN0b3IiLCJmaWx0ZXJXYXZlbGVuZ3RoUHJvcGVydHkiLCJmaWx0ZXJWaXNpYmxlUHJvcGVydHkiLCJjZW50ZXJYIiwiY2VudGVyWSIsInJhZGl1c1giLCJyYWRpdXNZIiwibGVmdCIsInNoYXBlIiwibW92ZVRvIiwiZWxsaXB0aWNhbEFyYyIsIk1hdGgiLCJQSSIsImNsb3NlIiwibGluayIsIndhdmVsZW5ndGgiLCJmaWxsIiwid2F2ZWxlbmd0aFRvQ29sb3IiLCJsaW5rQXR0cmlidXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGaWx0ZXJIYWxmRWxsaXBzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBGaWx0ZXJIYWxmRWxsaXBzZSBpcyB1c2VkIHRvIGZvcm0gdGhlIGFjdHVhbCBmaWx0ZXIgaW1hZ2UuIEl0IGlzIGN1dCBpbiBoYWxmIHNvXHJcbiAqIGl0IGNhbiBiZSBsYXllcmVkIHdpdGggdGhlIGJlYW0gYWJvdmUgb25lIGhhbGYgYW5kIGJlbG93IHRoZSBvdGhlci5cclxuICpcclxuICogQGF1dGhvciBBYXJvbiBEYXZpcyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBWaXNpYmxlQ29sb3IgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1Zpc2libGVDb2xvci5qcyc7XHJcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY29sb3JWaXNpb24gZnJvbSAnLi4vLi4vY29sb3JWaXNpb24uanMnO1xyXG5cclxuY2xhc3MgRmlsdGVySGFsZkVsbGlwc2UgZXh0ZW5kcyBQYXRoIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gZmlsdGVyV2F2ZWxlbmd0aFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gZmlsdGVyVmlzaWJsZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNlbnRlclhcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNYXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1lcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxlZnQgaXMgdHJ1ZSB0byBkcmF3IHRoZSBsZWZ0IGhhbGYgb2YgdGhlIGZpbHRlciwgZmFsc2UgdG8gZHJhdyB0aGUgcmlnaHRcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZmlsdGVyV2F2ZWxlbmd0aFByb3BlcnR5LCBmaWx0ZXJWaXNpYmxlUHJvcGVydHksIGNlbnRlclgsIGNlbnRlclksIHJhZGl1c1gsIHJhZGl1c1ksIGxlZnQgKSB7XHJcblxyXG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKVxyXG4gICAgICAubW92ZVRvKCBjZW50ZXJYLCBjZW50ZXJZIC0gcmFkaXVzWSApXHJcbiAgICAgIC5lbGxpcHRpY2FsQXJjKCBjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXNYLCByYWRpdXNZLCAwLCAtTWF0aC5QSSAvIDIsIE1hdGguUEkgLyAyLCBsZWZ0IClcclxuICAgICAgLmNsb3NlKCk7XHJcblxyXG4gICAgc3VwZXIoIHNoYXBlICk7XHJcblxyXG4gICAgZmlsdGVyV2F2ZWxlbmd0aFByb3BlcnR5LmxpbmsoIHdhdmVsZW5ndGggPT4ge1xyXG4gICAgICB0aGlzLmZpbGwgPSBWaXNpYmxlQ29sb3Iud2F2ZWxlbmd0aFRvQ29sb3IoIHdhdmVsZW5ndGggKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBmaWx0ZXJWaXNpYmxlUHJvcGVydHkubGlua0F0dHJpYnV0ZSggdGhpcywgJ3Zpc2libGUnICk7XHJcbiAgfVxyXG59XHJcblxyXG5jb2xvclZpc2lvbi5yZWdpc3RlciggJ0ZpbHRlckhhbGZFbGxpcHNlJywgRmlsdGVySGFsZkVsbGlwc2UgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbHRlckhhbGZFbGxpcHNlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsWUFBWSxNQUFNLDZDQUE2QztBQUN0RSxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFFOUMsTUFBTUMsaUJBQWlCLFNBQVNGLElBQUksQ0FBQztFQUVuQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsd0JBQXdCLEVBQUVDLHFCQUFxQixFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRztJQUV2RyxNQUFNQyxLQUFLLEdBQUcsSUFBSWIsS0FBSyxDQUFDLENBQUMsQ0FDdEJjLE1BQU0sQ0FBRU4sT0FBTyxFQUFFQyxPQUFPLEdBQUdFLE9BQVEsQ0FBQyxDQUNwQ0ksYUFBYSxDQUFFUCxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsRUFBRUQsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxFQUFFTCxJQUFLLENBQUMsQ0FDdkZNLEtBQUssQ0FBQyxDQUFDO0lBRVYsS0FBSyxDQUFFTCxLQUFNLENBQUM7SUFFZFAsd0JBQXdCLENBQUNhLElBQUksQ0FBRUMsVUFBVSxJQUFJO01BQzNDLElBQUksQ0FBQ0MsSUFBSSxHQUFHcEIsWUFBWSxDQUFDcUIsaUJBQWlCLENBQUVGLFVBQVcsQ0FBQztJQUMxRCxDQUFFLENBQUM7SUFFSGIscUJBQXFCLENBQUNnQixhQUFhLENBQUUsSUFBSSxFQUFFLFNBQVUsQ0FBQztFQUN4RDtBQUNGO0FBRUFwQixXQUFXLENBQUNxQixRQUFRLENBQUUsbUJBQW1CLEVBQUVwQixpQkFBa0IsQ0FBQztBQUU5RCxlQUFlQSxpQkFBaUIifQ==