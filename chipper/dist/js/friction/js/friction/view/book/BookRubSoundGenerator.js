// Copyright 2018-2022, University of Colorado Boulder

/**
 * sound generator used to produce a sound like two things being rubbed together
 *
 * @author John Blanco
 */

import BooleanProperty from '../../../../../axon/js/BooleanProperty.js';
import Multilink from '../../../../../axon/js/Multilink.js';
import NumberProperty from '../../../../../axon/js/NumberProperty.js';
import merge from '../../../../../phet-core/js/merge.js';
import NoiseGenerator from '../../../../../tambo/js/sound-generators/NoiseGenerator.js';
import friction from '../../../friction.js';

// constants
const FRICTION_SOUND_CENTER_FREQUENCY = 1000; // Hz
const FRICTION_SOUND_VARIATION = 0.15; // proportion
const DIRECTION_SWITCH_LOCKOUT_TIME = 0.030; // in seconds
const STILLNESS_TIME = 0.1; // in seconds, time used to determine when the book becomes still
const STOP_DURATION = 0.1; // in seconds

class BookRubSoundGenerator extends NoiseGenerator {
  /**
   * {Property.<Vector2>} topBookPositionProperty - position of the top book
   * {BooleanProperty} contactProperty - whether the books are in contact with one another
   * {Object} [options] - options, see parent classes for more information
   */
  constructor(topBookPositionProperty, contactProperty, options) {
    options = merge({
      noiseType: 'pink',
      centerFrequency: FRICTION_SOUND_CENTER_FREQUENCY,
      qFactor: 2,
      initialOutputLevel: 0,
      maxOutputLevel: 1
    }, options);
    super(options);

    // @private - state variables needed to update the sound output
    this.topBookXVelocityProperty = new NumberProperty(0);
    this.timeOfLastXVelocityUpdate = Number.NEGATIVE_INFINITY;
    this.rubSoundLockedOutProperty = new BooleanProperty(false); // used to create sonic space on direction changes
    this.rubSoundLockoutCounter = 0;

    // monitor the position of the top book and update local state variables as needed for the sound generator
    topBookPositionProperty.lazyLink((topBookPosition, previousTopBookPosition) => {
      const now = Date.now() / 1000;
      if (now - this.timeOfLastXVelocityUpdate !== 0) {
        this.topBookXVelocityProperty.set((topBookPosition.x - previousTopBookPosition.x) / (now - this.timeOfLastXVelocityUpdate));
        this.timeOfLastXVelocityUpdate = now;
      }
    });

    // monitor the velocity for a direction change
    this.topBookXVelocityProperty.link((velocity, previousVelocity) => {
      if (velocity > 0 && (previousVelocity === 0 || previousVelocity < 0)) {
        // the book has changed direction, now moving to the right
        this.setBandpassFilterCenterFrequency(FRICTION_SOUND_CENTER_FREQUENCY * (1 + FRICTION_SOUND_VARIATION));
        this.rubSoundLockedOutProperty.set(true);
        this.rubSoundLockoutCounter = DIRECTION_SWITCH_LOCKOUT_TIME;
      } else if (velocity < 0 && (previousVelocity === 0 || previousVelocity > 0)) {
        // the book has changed direction, now moving to the left
        this.setBandpassFilterCenterFrequency(FRICTION_SOUND_CENTER_FREQUENCY * (1 - FRICTION_SOUND_VARIATION));
        this.rubSoundLockedOutProperty.set(true);
        this.rubSoundLockoutCounter = DIRECTION_SWITCH_LOCKOUT_TIME;
      }
    });

    // set the output level based on the state of several properties
    Multilink.multilink([this.topBookXVelocityProperty, contactProperty, this.rubSoundLockedOutProperty], (topBookXVelocity, contact, rubSoundLockedOut) => {
      if (contact && Math.abs(topBookXVelocity) > 0 && !rubSoundLockedOut) {
        if (!this.isPlaying) {
          this.start();
        }

        // There really isn't an easily determined hard limit to the velocity, since it depends on how fast a user
        // can drag, so this value is derived from experimenting with fairly rapid drags.
        const maxVelocity = 2000;

        // calculate a normalized absolute value of the velocity
        const normalizedVelocity = Math.min(Math.abs(topBookXVelocity / maxVelocity), 1);

        // set the output level based on the velocity of the book
        const noiseAmplitude = options.maxOutputLevel * Math.pow(normalizedVelocity, 0.5);
        this.setOutputLevel(noiseAmplitude, 0.02);
      } else {
        if (this.isPlaying) {
          this.stop(this.audioContext.currentTime + STOP_DURATION);
        }
        this.setOutputLevel(0, 0.02);
      }
    });
  }

  /**
   * step function that mostly detects when the top book stops moving and helps create the silence intervals between
   * direction changes
   * @param {number} dt - amount of time step, in seconds
   * @public
   */
  step(dt) {
    // check to see if the book as stopped moving
    const now = Date.now() / 1000;
    if (Math.abs(this.topBookXVelocityProperty.value) > 0 && now - this.timeOfLastXVelocityUpdate > STILLNESS_TIME) {
      // there have been no updates to the velocity in a while, assume the book is now still
      this.topBookXVelocityProperty.set(0);
      this.timeOfLastXVelocityUpdate = now;
    }

    // update the lockout timer if it is running
    if (this.rubSoundLockoutCounter > 0) {
      this.rubSoundLockoutCounter = Math.max(this.rubSoundLockoutCounter - dt, 0);
      if (this.rubSoundLockoutCounter === 0) {
        this.rubSoundLockedOutProperty.set(false);
      }
    }
  }
}
friction.register('BookRubSoundGenerator', BookRubSoundGenerator);
export default BookRubSoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJNdWx0aWxpbmsiLCJOdW1iZXJQcm9wZXJ0eSIsIm1lcmdlIiwiTm9pc2VHZW5lcmF0b3IiLCJmcmljdGlvbiIsIkZSSUNUSU9OX1NPVU5EX0NFTlRFUl9GUkVRVUVOQ1kiLCJGUklDVElPTl9TT1VORF9WQVJJQVRJT04iLCJESVJFQ1RJT05fU1dJVENIX0xPQ0tPVVRfVElNRSIsIlNUSUxMTkVTU19USU1FIiwiU1RPUF9EVVJBVElPTiIsIkJvb2tSdWJTb3VuZEdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwidG9wQm9va1Bvc2l0aW9uUHJvcGVydHkiLCJjb250YWN0UHJvcGVydHkiLCJvcHRpb25zIiwibm9pc2VUeXBlIiwiY2VudGVyRnJlcXVlbmN5IiwicUZhY3RvciIsImluaXRpYWxPdXRwdXRMZXZlbCIsIm1heE91dHB1dExldmVsIiwidG9wQm9va1hWZWxvY2l0eVByb3BlcnR5IiwidGltZU9mTGFzdFhWZWxvY2l0eVVwZGF0ZSIsIk51bWJlciIsIk5FR0FUSVZFX0lORklOSVRZIiwicnViU291bmRMb2NrZWRPdXRQcm9wZXJ0eSIsInJ1YlNvdW5kTG9ja291dENvdW50ZXIiLCJsYXp5TGluayIsInRvcEJvb2tQb3NpdGlvbiIsInByZXZpb3VzVG9wQm9va1Bvc2l0aW9uIiwibm93IiwiRGF0ZSIsInNldCIsIngiLCJsaW5rIiwidmVsb2NpdHkiLCJwcmV2aW91c1ZlbG9jaXR5Iiwic2V0QmFuZHBhc3NGaWx0ZXJDZW50ZXJGcmVxdWVuY3kiLCJtdWx0aWxpbmsiLCJ0b3BCb29rWFZlbG9jaXR5IiwiY29udGFjdCIsInJ1YlNvdW5kTG9ja2VkT3V0IiwiTWF0aCIsImFicyIsImlzUGxheWluZyIsInN0YXJ0IiwibWF4VmVsb2NpdHkiLCJub3JtYWxpemVkVmVsb2NpdHkiLCJtaW4iLCJub2lzZUFtcGxpdHVkZSIsInBvdyIsInNldE91dHB1dExldmVsIiwic3RvcCIsImF1ZGlvQ29udGV4dCIsImN1cnJlbnRUaW1lIiwic3RlcCIsImR0IiwidmFsdWUiLCJtYXgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJvb2tSdWJTb3VuZEdlbmVyYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBzb3VuZCBnZW5lcmF0b3IgdXNlZCB0byBwcm9kdWNlIGEgc291bmQgbGlrZSB0d28gdGhpbmdzIGJlaW5nIHJ1YmJlZCB0b2dldGhlclxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgTm9pc2VHZW5lcmF0b3IgZnJvbSAnLi4vLi4vLi4vLi4vLi4vdGFtYm8vanMvc291bmQtZ2VuZXJhdG9ycy9Ob2lzZUdlbmVyYXRvci5qcyc7XHJcbmltcG9ydCBmcmljdGlvbiBmcm9tICcuLi8uLi8uLi9mcmljdGlvbi5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgRlJJQ1RJT05fU09VTkRfQ0VOVEVSX0ZSRVFVRU5DWSA9IDEwMDA7IC8vIEh6XHJcbmNvbnN0IEZSSUNUSU9OX1NPVU5EX1ZBUklBVElPTiA9IDAuMTU7IC8vIHByb3BvcnRpb25cclxuY29uc3QgRElSRUNUSU9OX1NXSVRDSF9MT0NLT1VUX1RJTUUgPSAwLjAzMDsgLy8gaW4gc2Vjb25kc1xyXG5jb25zdCBTVElMTE5FU1NfVElNRSA9IDAuMTsgLy8gaW4gc2Vjb25kcywgdGltZSB1c2VkIHRvIGRldGVybWluZSB3aGVuIHRoZSBib29rIGJlY29tZXMgc3RpbGxcclxuY29uc3QgU1RPUF9EVVJBVElPTiA9IDAuMTsgLy8gaW4gc2Vjb25kc1xyXG5cclxuY2xhc3MgQm9va1J1YlNvdW5kR2VuZXJhdG9yIGV4dGVuZHMgTm9pc2VHZW5lcmF0b3Ige1xyXG5cclxuICAvKipcclxuICAgKiB7UHJvcGVydHkuPFZlY3RvcjI+fSB0b3BCb29rUG9zaXRpb25Qcm9wZXJ0eSAtIHBvc2l0aW9uIG9mIHRoZSB0b3AgYm9va1xyXG4gICAqIHtCb29sZWFuUHJvcGVydHl9IGNvbnRhY3RQcm9wZXJ0eSAtIHdoZXRoZXIgdGhlIGJvb2tzIGFyZSBpbiBjb250YWN0IHdpdGggb25lIGFub3RoZXJcclxuICAgKiB7T2JqZWN0fSBbb3B0aW9uc10gLSBvcHRpb25zLCBzZWUgcGFyZW50IGNsYXNzZXMgZm9yIG1vcmUgaW5mb3JtYXRpb25cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdG9wQm9va1Bvc2l0aW9uUHJvcGVydHksIGNvbnRhY3RQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgICBub2lzZVR5cGU6ICdwaW5rJyxcclxuICAgICAgICBjZW50ZXJGcmVxdWVuY3k6IEZSSUNUSU9OX1NPVU5EX0NFTlRFUl9GUkVRVUVOQ1ksXHJcbiAgICAgICAgcUZhY3RvcjogMixcclxuICAgICAgICBpbml0aWFsT3V0cHV0TGV2ZWw6IDAsXHJcbiAgICAgICAgbWF4T3V0cHV0TGV2ZWw6IDFcclxuICAgICAgfSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIC0gc3RhdGUgdmFyaWFibGVzIG5lZWRlZCB0byB1cGRhdGUgdGhlIHNvdW5kIG91dHB1dFxyXG4gICAgdGhpcy50b3BCb29rWFZlbG9jaXR5UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAgKTtcclxuICAgIHRoaXMudGltZU9mTGFzdFhWZWxvY2l0eVVwZGF0ZSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcclxuICAgIHRoaXMucnViU291bmRMb2NrZWRPdXRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7IC8vIHVzZWQgdG8gY3JlYXRlIHNvbmljIHNwYWNlIG9uIGRpcmVjdGlvbiBjaGFuZ2VzXHJcbiAgICB0aGlzLnJ1YlNvdW5kTG9ja291dENvdW50ZXIgPSAwO1xyXG5cclxuICAgIC8vIG1vbml0b3IgdGhlIHBvc2l0aW9uIG9mIHRoZSB0b3AgYm9vayBhbmQgdXBkYXRlIGxvY2FsIHN0YXRlIHZhcmlhYmxlcyBhcyBuZWVkZWQgZm9yIHRoZSBzb3VuZCBnZW5lcmF0b3JcclxuICAgIHRvcEJvb2tQb3NpdGlvblByb3BlcnR5LmxhenlMaW5rKCAoIHRvcEJvb2tQb3NpdGlvbiwgcHJldmlvdXNUb3BCb29rUG9zaXRpb24gKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCkgLyAxMDAwO1xyXG4gICAgICBpZiAoIG5vdyAtIHRoaXMudGltZU9mTGFzdFhWZWxvY2l0eVVwZGF0ZSAhPT0gMCApIHtcclxuICAgICAgICB0aGlzLnRvcEJvb2tYVmVsb2NpdHlQcm9wZXJ0eS5zZXQoICggdG9wQm9va1Bvc2l0aW9uLnggLSBwcmV2aW91c1RvcEJvb2tQb3NpdGlvbi54ICkgL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBub3cgLSB0aGlzLnRpbWVPZkxhc3RYVmVsb2NpdHlVcGRhdGUgKSApO1xyXG4gICAgICAgIHRoaXMudGltZU9mTGFzdFhWZWxvY2l0eVVwZGF0ZSA9IG5vdztcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIG1vbml0b3IgdGhlIHZlbG9jaXR5IGZvciBhIGRpcmVjdGlvbiBjaGFuZ2VcclxuICAgIHRoaXMudG9wQm9va1hWZWxvY2l0eVByb3BlcnR5LmxpbmsoICggdmVsb2NpdHksIHByZXZpb3VzVmVsb2NpdHkgKSA9PiB7XHJcblxyXG4gICAgICBpZiAoIHZlbG9jaXR5ID4gMCAmJiAoIHByZXZpb3VzVmVsb2NpdHkgPT09IDAgfHwgcHJldmlvdXNWZWxvY2l0eSA8IDAgKSApIHtcclxuXHJcbiAgICAgICAgLy8gdGhlIGJvb2sgaGFzIGNoYW5nZWQgZGlyZWN0aW9uLCBub3cgbW92aW5nIHRvIHRoZSByaWdodFxyXG4gICAgICAgIHRoaXMuc2V0QmFuZHBhc3NGaWx0ZXJDZW50ZXJGcmVxdWVuY3koIEZSSUNUSU9OX1NPVU5EX0NFTlRFUl9GUkVRVUVOQ1kgKiAoIDEgKyBGUklDVElPTl9TT1VORF9WQVJJQVRJT04gKSApO1xyXG4gICAgICAgIHRoaXMucnViU291bmRMb2NrZWRPdXRQcm9wZXJ0eS5zZXQoIHRydWUgKTtcclxuICAgICAgICB0aGlzLnJ1YlNvdW5kTG9ja291dENvdW50ZXIgPSBESVJFQ1RJT05fU1dJVENIX0xPQ0tPVVRfVElNRTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggdmVsb2NpdHkgPCAwICYmICggcHJldmlvdXNWZWxvY2l0eSA9PT0gMCB8fCBwcmV2aW91c1ZlbG9jaXR5ID4gMCApICkge1xyXG5cclxuICAgICAgICAvLyB0aGUgYm9vayBoYXMgY2hhbmdlZCBkaXJlY3Rpb24sIG5vdyBtb3ZpbmcgdG8gdGhlIGxlZnRcclxuICAgICAgICB0aGlzLnNldEJhbmRwYXNzRmlsdGVyQ2VudGVyRnJlcXVlbmN5KCBGUklDVElPTl9TT1VORF9DRU5URVJfRlJFUVVFTkNZICogKCAxIC0gRlJJQ1RJT05fU09VTkRfVkFSSUFUSU9OICkgKTtcclxuICAgICAgICB0aGlzLnJ1YlNvdW5kTG9ja2VkT3V0UHJvcGVydHkuc2V0KCB0cnVlICk7XHJcbiAgICAgICAgdGhpcy5ydWJTb3VuZExvY2tvdXRDb3VudGVyID0gRElSRUNUSU9OX1NXSVRDSF9MT0NLT1VUX1RJTUU7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBzZXQgdGhlIG91dHB1dCBsZXZlbCBiYXNlZCBvbiB0aGUgc3RhdGUgb2Ygc2V2ZXJhbCBwcm9wZXJ0aWVzXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICBbIHRoaXMudG9wQm9va1hWZWxvY2l0eVByb3BlcnR5LCBjb250YWN0UHJvcGVydHksIHRoaXMucnViU291bmRMb2NrZWRPdXRQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHRvcEJvb2tYVmVsb2NpdHksIGNvbnRhY3QsIHJ1YlNvdW5kTG9ja2VkT3V0ICkgPT4ge1xyXG4gICAgICAgIGlmICggY29udGFjdCAmJiBNYXRoLmFicyggdG9wQm9va1hWZWxvY2l0eSApID4gMCAmJiAhcnViU291bmRMb2NrZWRPdXQgKSB7XHJcblxyXG4gICAgICAgICAgaWYgKCAhdGhpcy5pc1BsYXlpbmcgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBUaGVyZSByZWFsbHkgaXNuJ3QgYW4gZWFzaWx5IGRldGVybWluZWQgaGFyZCBsaW1pdCB0byB0aGUgdmVsb2NpdHksIHNpbmNlIGl0IGRlcGVuZHMgb24gaG93IGZhc3QgYSB1c2VyXHJcbiAgICAgICAgICAvLyBjYW4gZHJhZywgc28gdGhpcyB2YWx1ZSBpcyBkZXJpdmVkIGZyb20gZXhwZXJpbWVudGluZyB3aXRoIGZhaXJseSByYXBpZCBkcmFncy5cclxuICAgICAgICAgIGNvbnN0IG1heFZlbG9jaXR5ID0gMjAwMDtcclxuXHJcbiAgICAgICAgICAvLyBjYWxjdWxhdGUgYSBub3JtYWxpemVkIGFic29sdXRlIHZhbHVlIG9mIHRoZSB2ZWxvY2l0eVxyXG4gICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFZlbG9jaXR5ID0gTWF0aC5taW4oIE1hdGguYWJzKCB0b3BCb29rWFZlbG9jaXR5IC8gbWF4VmVsb2NpdHkgKSwgMSApO1xyXG5cclxuICAgICAgICAgIC8vIHNldCB0aGUgb3V0cHV0IGxldmVsIGJhc2VkIG9uIHRoZSB2ZWxvY2l0eSBvZiB0aGUgYm9va1xyXG4gICAgICAgICAgY29uc3Qgbm9pc2VBbXBsaXR1ZGUgPSBvcHRpb25zLm1heE91dHB1dExldmVsICogTWF0aC5wb3coIG5vcm1hbGl6ZWRWZWxvY2l0eSwgMC41ICk7XHJcbiAgICAgICAgICB0aGlzLnNldE91dHB1dExldmVsKCBub2lzZUFtcGxpdHVkZSwgMC4wMiApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGlmICggdGhpcy5pc1BsYXlpbmcgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcCggdGhpcy5hdWRpb0NvbnRleHQuY3VycmVudFRpbWUgKyBTVE9QX0RVUkFUSU9OICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnNldE91dHB1dExldmVsKCAwLCAwLjAyICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogc3RlcCBmdW5jdGlvbiB0aGF0IG1vc3RseSBkZXRlY3RzIHdoZW4gdGhlIHRvcCBib29rIHN0b3BzIG1vdmluZyBhbmQgaGVscHMgY3JlYXRlIHRoZSBzaWxlbmNlIGludGVydmFscyBiZXR3ZWVuXHJcbiAgICogZGlyZWN0aW9uIGNoYW5nZXNcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHQgLSBhbW91bnQgb2YgdGltZSBzdGVwLCBpbiBzZWNvbmRzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0ZXAoIGR0ICkge1xyXG5cclxuICAgIC8vIGNoZWNrIHRvIHNlZSBpZiB0aGUgYm9vayBhcyBzdG9wcGVkIG1vdmluZ1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKSAvIDEwMDA7XHJcbiAgICBpZiAoIE1hdGguYWJzKCB0aGlzLnRvcEJvb2tYVmVsb2NpdHlQcm9wZXJ0eS52YWx1ZSApID4gMCAmJlxyXG4gICAgICAgICBub3cgLSB0aGlzLnRpbWVPZkxhc3RYVmVsb2NpdHlVcGRhdGUgPiBTVElMTE5FU1NfVElNRSApIHtcclxuXHJcbiAgICAgIC8vIHRoZXJlIGhhdmUgYmVlbiBubyB1cGRhdGVzIHRvIHRoZSB2ZWxvY2l0eSBpbiBhIHdoaWxlLCBhc3N1bWUgdGhlIGJvb2sgaXMgbm93IHN0aWxsXHJcbiAgICAgIHRoaXMudG9wQm9va1hWZWxvY2l0eVByb3BlcnR5LnNldCggMCApO1xyXG4gICAgICB0aGlzLnRpbWVPZkxhc3RYVmVsb2NpdHlVcGRhdGUgPSBub3c7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdXBkYXRlIHRoZSBsb2Nrb3V0IHRpbWVyIGlmIGl0IGlzIHJ1bm5pbmdcclxuICAgIGlmICggdGhpcy5ydWJTb3VuZExvY2tvdXRDb3VudGVyID4gMCApIHtcclxuICAgICAgdGhpcy5ydWJTb3VuZExvY2tvdXRDb3VudGVyID0gTWF0aC5tYXgoIHRoaXMucnViU291bmRMb2Nrb3V0Q291bnRlciAtIGR0LCAwICk7XHJcbiAgICAgIGlmICggdGhpcy5ydWJTb3VuZExvY2tvdXRDb3VudGVyID09PSAwICkge1xyXG4gICAgICAgIHRoaXMucnViU291bmRMb2NrZWRPdXRQcm9wZXJ0eS5zZXQoIGZhbHNlICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5mcmljdGlvbi5yZWdpc3RlciggJ0Jvb2tSdWJTb3VuZEdlbmVyYXRvcicsIEJvb2tSdWJTb3VuZEdlbmVyYXRvciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQm9va1J1YlNvdW5kR2VuZXJhdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMkNBQTJDO0FBQ3ZFLE9BQU9DLFNBQVMsTUFBTSxxQ0FBcUM7QUFDM0QsT0FBT0MsY0FBYyxNQUFNLDBDQUEwQztBQUNyRSxPQUFPQyxLQUFLLE1BQU0sc0NBQXND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