// Copyright 2018-2021, University of Colorado Boulder

/**
 * a sound generator used to indicate the amount of molecule motion in the Friction simulation
 *
 * @author John Blanco
 */

// Copyright 2018, University of Colorado Boulder

/**
 * sound generator used for indicating the position of the arm in the John Travoltage sim, may be generalized at some
 * future for other purposes
 *
 * @author John Blanco
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import merge from '../../../../phet-core/js/merge.js';
import SoundClip from '../../../../tambo/js/sound-generators/SoundClip.js';
import SoundGenerator from '../../../../tambo/js/sound-generators/SoundGenerator.js';
import bounceMarimba_mp3 from '../../../sounds/bounceMarimba_mp3.js';
import friction from '../../friction.js';
import FrictionConstants from '../FrictionConstants.js';
import FrictionModel from '../model/FrictionModel.js';
class MoleculeMotionSoundGenerator extends SoundGenerator {
  /**
   * @constructor
   * {Property.<number>} moleculeAmplitudeProperty - amplitude of molecule motion
   * {Object} [options]
   */
  constructor(moleculeAmplitudeProperty, options) {
    options = merge({
      maxOutputLevel: 1 // max gain for this sound generator, sets the overall output of this sound generator
    }, options);
    super(options);

    // create several instances of the sound clip at different volume levels to allow more variation in the sound
    const motionSoundClips = [new SoundClip(bounceMarimba_mp3, {
      initialOutputLevel: 1,
      rateChangesAffectPlayingSounds: false
    }), new SoundClip(bounceMarimba_mp3, {
      initialOutputLevel: 0.75,
      rateChangesAffectPlayingSounds: false
    }), new SoundClip(bounceMarimba_mp3, {
      initialOutputLevel: 0.5,
      rateChangesAffectPlayingSounds: false
    }), new SoundClip(bounceMarimba_mp3, {
      initialOutputLevel: 0.25,
      rateChangesAffectPlayingSounds: false
    })];

    // connect up the sound clips
    motionSoundClips.forEach(motionSoundClip => {
      motionSoundClip.connect(this.soundSourceDestination);
    });
    moleculeAmplitudeProperty.lazyLink(amplitude => {
      // Normalize the amplitude value.  Note that the min amplitude is always 1.
      const normalizedAmplitude = Math.min((amplitude - 1) / FrictionModel.VIBRATION_AMPLITUDE_MAX, 1);

      // Map normalized amplitude to volume.  This uses a shifted sigmoid function, since that is what seems to sound
      // the best.
      const moleculeMotionSoundVolume = 1 / (1 + Math.pow(Math.E, -10 * (normalizedAmplitude - 0.5)));
      this.setOutputLevel(options.maxOutputLevel * moleculeMotionSoundVolume);

      // choose a sound clip (this creates variation in the output level for each play operation)
      const soundClip = dotRandom.sample(motionSoundClips);

      // set the playback rate in a way that sounds good with other sounds that are playing
      soundClip.setPlaybackRate(FrictionConstants.GET_RANDOM_PENTATONIC_PLAYBACK_RATE(), 0);
      soundClip.play();
    });
  }
}
friction.register('MoleculeMotionSoundGenerator', MoleculeMotionSoundGenerator);
export default MoleculeMotionSoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJtZXJnZSIsIlNvdW5kQ2xpcCIsIlNvdW5kR2VuZXJhdG9yIiwiYm91bmNlTWFyaW1iYV9tcDMiLCJmcmljdGlvbiIsIkZyaWN0aW9uQ29uc3RhbnRzIiwiRnJpY3Rpb25Nb2RlbCIsIk1vbGVjdWxlTW90aW9uU291bmRHZW5lcmF0b3IiLCJjb25zdHJ1Y3RvciIsIm1vbGVjdWxlQW1wbGl0dWRlUHJvcGVydHkiLCJvcHRpb25zIiwibWF4T3V0cHV0TGV2ZWwiLCJtb3Rpb25Tb3VuZENsaXBzIiwiaW5pdGlhbE91dHB1dExldmVsIiwicmF0ZUNoYW5nZXNBZmZlY3RQbGF5aW5nU291bmRzIiwiZm9yRWFjaCIsIm1vdGlvblNvdW5kQ2xpcCIsImNvbm5lY3QiLCJzb3VuZFNvdXJjZURlc3RpbmF0aW9uIiwibGF6eUxpbmsiLCJhbXBsaXR1ZGUiLCJub3JtYWxpemVkQW1wbGl0dWRlIiwiTWF0aCIsIm1pbiIsIlZJQlJBVElPTl9BTVBMSVRVREVfTUFYIiwibW9sZWN1bGVNb3Rpb25Tb3VuZFZvbHVtZSIsInBvdyIsIkUiLCJzZXRPdXRwdXRMZXZlbCIsInNvdW5kQ2xpcCIsInNhbXBsZSIsInNldFBsYXliYWNrUmF0ZSIsIkdFVF9SQU5ET01fUEVOVEFUT05JQ19QTEFZQkFDS19SQVRFIiwicGxheSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTW9sZWN1bGVNb3Rpb25Tb3VuZEdlbmVyYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBhIHNvdW5kIGdlbmVyYXRvciB1c2VkIHRvIGluZGljYXRlIHRoZSBhbW91bnQgb2YgbW9sZWN1bGUgbW90aW9uIGluIHRoZSBGcmljdGlvbiBzaW11bGF0aW9uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG4vLyBDb3B5cmlnaHQgMjAxOCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogc291bmQgZ2VuZXJhdG9yIHVzZWQgZm9yIGluZGljYXRpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBhcm0gaW4gdGhlIEpvaG4gVHJhdm9sdGFnZSBzaW0sIG1heSBiZSBnZW5lcmFsaXplZCBhdCBzb21lXHJcbiAqIGZ1dHVyZSBmb3Igb3RoZXIgcHVycG9zZXNcclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgU291bmRDbGlwIGZyb20gJy4uLy4uLy4uLy4uL3RhbWJvL2pzL3NvdW5kLWdlbmVyYXRvcnMvU291bmRDbGlwLmpzJztcclxuaW1wb3J0IFNvdW5kR2VuZXJhdG9yIGZyb20gJy4uLy4uLy4uLy4uL3RhbWJvL2pzL3NvdW5kLWdlbmVyYXRvcnMvU291bmRHZW5lcmF0b3IuanMnO1xyXG5pbXBvcnQgYm91bmNlTWFyaW1iYV9tcDMgZnJvbSAnLi4vLi4vLi4vc291bmRzL2JvdW5jZU1hcmltYmFfbXAzLmpzJztcclxuaW1wb3J0IGZyaWN0aW9uIGZyb20gJy4uLy4uL2ZyaWN0aW9uLmpzJztcclxuaW1wb3J0IEZyaWN0aW9uQ29uc3RhbnRzIGZyb20gJy4uL0ZyaWN0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEZyaWN0aW9uTW9kZWwgZnJvbSAnLi4vbW9kZWwvRnJpY3Rpb25Nb2RlbC5qcyc7XHJcblxyXG5jbGFzcyBNb2xlY3VsZU1vdGlvblNvdW5kR2VuZXJhdG9yIGV4dGVuZHMgU291bmRHZW5lcmF0b3Ige1xyXG5cclxuICAvKipcclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKiB7UHJvcGVydHkuPG51bWJlcj59IG1vbGVjdWxlQW1wbGl0dWRlUHJvcGVydHkgLSBhbXBsaXR1ZGUgb2YgbW9sZWN1bGUgbW90aW9uXHJcbiAgICoge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vbGVjdWxlQW1wbGl0dWRlUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG1heE91dHB1dExldmVsOiAxIC8vIG1heCBnYWluIGZvciB0aGlzIHNvdW5kIGdlbmVyYXRvciwgc2V0cyB0aGUgb3ZlcmFsbCBvdXRwdXQgb2YgdGhpcyBzb3VuZCBnZW5lcmF0b3JcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBzZXZlcmFsIGluc3RhbmNlcyBvZiB0aGUgc291bmQgY2xpcCBhdCBkaWZmZXJlbnQgdm9sdW1lIGxldmVscyB0byBhbGxvdyBtb3JlIHZhcmlhdGlvbiBpbiB0aGUgc291bmRcclxuICAgIGNvbnN0IG1vdGlvblNvdW5kQ2xpcHMgPSBbXHJcbiAgICAgIG5ldyBTb3VuZENsaXAoIGJvdW5jZU1hcmltYmFfbXAzLCB7IGluaXRpYWxPdXRwdXRMZXZlbDogMSwgcmF0ZUNoYW5nZXNBZmZlY3RQbGF5aW5nU291bmRzOiBmYWxzZSB9ICksXHJcbiAgICAgIG5ldyBTb3VuZENsaXAoIGJvdW5jZU1hcmltYmFfbXAzLCB7IGluaXRpYWxPdXRwdXRMZXZlbDogMC43NSwgcmF0ZUNoYW5nZXNBZmZlY3RQbGF5aW5nU291bmRzOiBmYWxzZSB9ICksXHJcbiAgICAgIG5ldyBTb3VuZENsaXAoIGJvdW5jZU1hcmltYmFfbXAzLCB7IGluaXRpYWxPdXRwdXRMZXZlbDogMC41LCByYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHM6IGZhbHNlIH0gKSxcclxuICAgICAgbmV3IFNvdW5kQ2xpcCggYm91bmNlTWFyaW1iYV9tcDMsIHsgaW5pdGlhbE91dHB1dExldmVsOiAwLjI1LCByYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHM6IGZhbHNlIH0gKVxyXG4gICAgXTtcclxuXHJcbiAgICAvLyBjb25uZWN0IHVwIHRoZSBzb3VuZCBjbGlwc1xyXG4gICAgbW90aW9uU291bmRDbGlwcy5mb3JFYWNoKCBtb3Rpb25Tb3VuZENsaXAgPT4geyBtb3Rpb25Tb3VuZENsaXAuY29ubmVjdCggdGhpcy5zb3VuZFNvdXJjZURlc3RpbmF0aW9uICk7IH0gKTtcclxuXHJcbiAgICBtb2xlY3VsZUFtcGxpdHVkZVByb3BlcnR5LmxhenlMaW5rKCBhbXBsaXR1ZGUgPT4ge1xyXG5cclxuICAgICAgLy8gTm9ybWFsaXplIHRoZSBhbXBsaXR1ZGUgdmFsdWUuICBOb3RlIHRoYXQgdGhlIG1pbiBhbXBsaXR1ZGUgaXMgYWx3YXlzIDEuXHJcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRBbXBsaXR1ZGUgPSBNYXRoLm1pbiggKCBhbXBsaXR1ZGUgLSAxICkgLyBGcmljdGlvbk1vZGVsLlZJQlJBVElPTl9BTVBMSVRVREVfTUFYLCAxICk7XHJcblxyXG4gICAgICAvLyBNYXAgbm9ybWFsaXplZCBhbXBsaXR1ZGUgdG8gdm9sdW1lLiAgVGhpcyB1c2VzIGEgc2hpZnRlZCBzaWdtb2lkIGZ1bmN0aW9uLCBzaW5jZSB0aGF0IGlzIHdoYXQgc2VlbXMgdG8gc291bmRcclxuICAgICAgLy8gdGhlIGJlc3QuXHJcbiAgICAgIGNvbnN0IG1vbGVjdWxlTW90aW9uU291bmRWb2x1bWUgPSAxIC8gKCAxICsgTWF0aC5wb3coIE1hdGguRSwgLTEwICogKCBub3JtYWxpemVkQW1wbGl0dWRlIC0gMC41ICkgKSApO1xyXG4gICAgICB0aGlzLnNldE91dHB1dExldmVsKCBvcHRpb25zLm1heE91dHB1dExldmVsICogbW9sZWN1bGVNb3Rpb25Tb3VuZFZvbHVtZSApO1xyXG5cclxuICAgICAgLy8gY2hvb3NlIGEgc291bmQgY2xpcCAodGhpcyBjcmVhdGVzIHZhcmlhdGlvbiBpbiB0aGUgb3V0cHV0IGxldmVsIGZvciBlYWNoIHBsYXkgb3BlcmF0aW9uKVxyXG4gICAgICBjb25zdCBzb3VuZENsaXAgPSBkb3RSYW5kb20uc2FtcGxlKCBtb3Rpb25Tb3VuZENsaXBzICk7XHJcblxyXG4gICAgICAvLyBzZXQgdGhlIHBsYXliYWNrIHJhdGUgaW4gYSB3YXkgdGhhdCBzb3VuZHMgZ29vZCB3aXRoIG90aGVyIHNvdW5kcyB0aGF0IGFyZSBwbGF5aW5nXHJcbiAgICAgIHNvdW5kQ2xpcC5zZXRQbGF5YmFja1JhdGUoIEZyaWN0aW9uQ29uc3RhbnRzLkdFVF9SQU5ET01fUEVOVEFUT05JQ19QTEFZQkFDS19SQVRFKCksIDAgKTtcclxuXHJcbiAgICAgIHNvdW5kQ2xpcC5wbGF5KCk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZnJpY3Rpb24ucmVnaXN0ZXIoICdNb2xlY3VsZU1vdGlvblNvdW5kR2VuZXJhdG9yJywgTW9sZWN1bGVNb3Rpb25Tb3VuZEdlbmVyYXRvciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9sZWN1bGVNb3Rpb25Tb3VuZEdlbmVyYXRvcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxTQUFTLE1BQU0sb0RBQW9EO0FBQzFFLE9BQU9DLGNBQWMsTUFBTSx5REFBeUQ7QUFDcEYsT0FBT0MsaUJBQWlCLE1BQU0sc0NBQXNDO0FBQ3BFLE9BQU9DLFFBQVEsTUFBTSxtQkFBbUI7QUFDeEMsT0FBT0MsaUJBQWlCLE1BQU0seUJBQXlCO0FBQ3ZELE9BQU9DLGFBQWEsTUFBTSwyQkFBMkI7QUFFckQsTUFBTUMsNEJBQTRCLFNBQVNMLGNBQWMsQ0FBQztFQUV4RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLHlCQUF5QixFQUFFQyxPQUFPLEVBQUc7SUFFaERBLE9BQU8sR0FBR1YsS0FBSyxDQUFFO01BQ2ZXLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxFQUFFRCxPQUFRLENBQUM7SUFFWixLQUFLLENBQUVBLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQSxNQUFNRSxnQkFBZ0IsR0FBRyxDQUN2QixJQUFJWCxTQUFTLENBQUVFLGlCQUFpQixFQUFFO01BQUVVLGtCQUFrQixFQUFFLENBQUM7TUFBRUMsOEJBQThCLEVBQUU7SUFBTSxDQUFFLENBQUMsRUFDcEcsSUFBSWIsU0FBUyxDQUFFRSxpQkFBaUIsRUFBRTtNQUFFVSxrQkFBa0IsRUFBRSxJQUFJO01BQUVDLDhCQUE4QixFQUFFO0lBQU0sQ0FBRSxDQUFDLEVBQ3ZHLElBQUliLFNBQVMsQ0FBRUUsaUJBQWlCLEVBQUU7TUFBRVUsa0JBQWtCLEVBQUUsR0FBRztNQUFFQyw4QkFBOEIsRUFBRTtJQUFNLENBQUUsQ0FBQyxFQUN0RyxJQUFJYixTQUFTLENBQUVFLGlCQUFpQixFQUFFO01BQUVVLGtCQUFrQixFQUFFLElBQUk7TUFBRUMsOEJBQThCLEVBQUU7SUFBTSxDQUFFLENBQUMsQ0FDeEc7O0lBRUQ7SUFDQUYsZ0JBQWdCLENBQUNHLE9BQU8sQ0FBRUMsZUFBZSxJQUFJO01BQUVBLGVBQWUsQ0FBQ0MsT0FBTyxDQUFFLElBQUksQ0FBQ0Msc0JBQXVCLENBQUM7SUFBRSxDQUFFLENBQUM7SUFFMUdULHlCQUF5QixDQUFDVSxRQUFRLENBQUVDLFNBQVMsSUFBSTtNQUUvQztNQUNBLE1BQU1DLG1CQUFtQixHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBRSxDQUFFSCxTQUFTLEdBQUcsQ0FBQyxJQUFLZCxhQUFhLENBQUNrQix1QkFBdUIsRUFBRSxDQUFFLENBQUM7O01BRXBHO01BQ0E7TUFDQSxNQUFNQyx5QkFBeUIsR0FBRyxDQUFDLElBQUssQ0FBQyxHQUFHSCxJQUFJLENBQUNJLEdBQUcsQ0FBRUosSUFBSSxDQUFDSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUtOLG1CQUFtQixHQUFHLEdBQUcsQ0FBRyxDQUFDLENBQUU7TUFDckcsSUFBSSxDQUFDTyxjQUFjLENBQUVsQixPQUFPLENBQUNDLGNBQWMsR0FBR2MseUJBQTBCLENBQUM7O01BRXpFO01BQ0EsTUFBTUksU0FBUyxHQUFHOUIsU0FBUyxDQUFDK0IsTUFBTSxDQUFFbEIsZ0JBQWlCLENBQUM7O01BRXREO01BQ0FpQixTQUFTLENBQUNFLGVBQWUsQ0FBRTFCLGlCQUFpQixDQUFDMkIsbUNBQW1DLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQztNQUV2RkgsU0FBUyxDQUFDSSxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFFLENBQUM7RUFDTDtBQUVGO0FBRUE3QixRQUFRLENBQUM4QixRQUFRLENBQUUsOEJBQThCLEVBQUUzQiw0QkFBNkIsQ0FBQztBQUVqRixlQUFlQSw0QkFBNEIifQ==