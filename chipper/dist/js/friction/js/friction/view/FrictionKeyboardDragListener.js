// Copyright 2017-2023, University of Colorado Boulder

/**
 * Keyboard drag handler used for a11y keyboard navigation for both the BookNode and the MagnifyingGlassNode atoms.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import { KeyboardDragListener } from '../../../../scenery/js/imports.js';
import friction from '../../friction.js';
class FrictionKeyboardDragListener extends KeyboardDragListener {
  /**
   * @param {FrictionModel} model
   * @param {TemperatureIncreasingAlerter} temperatureIncreasingAlerter
   * @param {TemperatureDecreasingAlerter} temperatureDecreasingAlerter
   * @param {BookMovementAlerter} bookMovementAlerter
   * @param {Object} [options]
   */
  constructor(model, temperatureIncreasingAlerter, temperatureDecreasingAlerter, bookMovementAlerter, options) {
    options = merge({
      dragVelocity: 1000,
      shiftDragVelocity: 500,
      positionProperty: model.topBookPositionProperty,
      start: () => {
        temperatureIncreasingAlerter.startDrag();
        temperatureDecreasingAlerter.startDrag();
      },
      end: event => {
        temperatureIncreasingAlerter.endDrag();
        bookMovementAlerter.endDrag(event && event.domEvent);
      },
      dragBoundsProperty: model.topBookDragBoundsProperty
    }, options);
    super(options);
  }
}
friction.register('FrictionKeyboardDragListener', FrictionKeyboardDragListener);
export default FrictionKeyboardDragListener;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIktleWJvYXJkRHJhZ0xpc3RlbmVyIiwiZnJpY3Rpb24iLCJGcmljdGlvbktleWJvYXJkRHJhZ0xpc3RlbmVyIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRlbXBlcmF0dXJlSW5jcmVhc2luZ0FsZXJ0ZXIiLCJ0ZW1wZXJhdHVyZURlY3JlYXNpbmdBbGVydGVyIiwiYm9va01vdmVtZW50QWxlcnRlciIsIm9wdGlvbnMiLCJkcmFnVmVsb2NpdHkiLCJzaGlmdERyYWdWZWxvY2l0eSIsInBvc2l0aW9uUHJvcGVydHkiLCJ0b3BCb29rUG9zaXRpb25Qcm9wZXJ0eSIsInN0YXJ0Iiwic3RhcnREcmFnIiwiZW5kIiwiZXZlbnQiLCJlbmREcmFnIiwiZG9tRXZlbnQiLCJkcmFnQm91bmRzUHJvcGVydHkiLCJ0b3BCb29rRHJhZ0JvdW5kc1Byb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGcmljdGlvbktleWJvYXJkRHJhZ0xpc3RlbmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEtleWJvYXJkIGRyYWcgaGFuZGxlciB1c2VkIGZvciBhMTF5IGtleWJvYXJkIG5hdmlnYXRpb24gZm9yIGJvdGggdGhlIEJvb2tOb2RlIGFuZCB0aGUgTWFnbmlmeWluZ0dsYXNzTm9kZSBhdG9tcy5cclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBLZXlib2FyZERyYWdMaXN0ZW5lciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBmcmljdGlvbiBmcm9tICcuLi8uLi9mcmljdGlvbi5qcyc7XHJcblxyXG5jbGFzcyBGcmljdGlvbktleWJvYXJkRHJhZ0xpc3RlbmVyIGV4dGVuZHMgS2V5Ym9hcmREcmFnTGlzdGVuZXIge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0ZyaWN0aW9uTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtUZW1wZXJhdHVyZUluY3JlYXNpbmdBbGVydGVyfSB0ZW1wZXJhdHVyZUluY3JlYXNpbmdBbGVydGVyXHJcbiAgICogQHBhcmFtIHtUZW1wZXJhdHVyZURlY3JlYXNpbmdBbGVydGVyfSB0ZW1wZXJhdHVyZURlY3JlYXNpbmdBbGVydGVyXHJcbiAgICogQHBhcmFtIHtCb29rTW92ZW1lbnRBbGVydGVyfSBib29rTW92ZW1lbnRBbGVydGVyXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgdGVtcGVyYXR1cmVJbmNyZWFzaW5nQWxlcnRlcixcclxuICAgICAgICAgICAgICAgdGVtcGVyYXR1cmVEZWNyZWFzaW5nQWxlcnRlciwgYm9va01vdmVtZW50QWxlcnRlcixcclxuICAgICAgICAgICAgICAgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgZHJhZ1ZlbG9jaXR5OiAxMDAwLFxyXG4gICAgICBzaGlmdERyYWdWZWxvY2l0eTogNTAwLFxyXG4gICAgICBwb3NpdGlvblByb3BlcnR5OiBtb2RlbC50b3BCb29rUG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgc3RhcnQ6ICgpID0+IHtcclxuICAgICAgICB0ZW1wZXJhdHVyZUluY3JlYXNpbmdBbGVydGVyLnN0YXJ0RHJhZygpO1xyXG4gICAgICAgIHRlbXBlcmF0dXJlRGVjcmVhc2luZ0FsZXJ0ZXIuc3RhcnREcmFnKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGVuZDogZXZlbnQgPT4ge1xyXG5cclxuICAgICAgICB0ZW1wZXJhdHVyZUluY3JlYXNpbmdBbGVydGVyLmVuZERyYWcoKTtcclxuICAgICAgICBib29rTW92ZW1lbnRBbGVydGVyLmVuZERyYWcoIGV2ZW50ICYmIGV2ZW50LmRvbUV2ZW50ICk7XHJcblxyXG4gICAgICB9LFxyXG4gICAgICBkcmFnQm91bmRzUHJvcGVydHk6IG1vZGVsLnRvcEJvb2tEcmFnQm91bmRzUHJvcGVydHlcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZnJpY3Rpb24ucmVnaXN0ZXIoICdGcmljdGlvbktleWJvYXJkRHJhZ0xpc3RlbmVyJywgRnJpY3Rpb25LZXlib2FyZERyYWdMaXN0ZW5lciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRnJpY3Rpb25LZXlib2FyZERyYWdMaXN0ZW5lcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxvQkFBb0IsUUFBUSxtQ0FBbUM7QUFDeEUsT0FBT0MsUUFBUSxNQUFNLG1CQUFtQjtBQUV4QyxNQUFNQyw0QkFBNEIsU0FBU0Ysb0JBQW9CLENBQUM7RUFFOUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyw0QkFBNEIsRUFDbkNDLDRCQUE0QixFQUFFQyxtQkFBbUIsRUFDakRDLE9BQU8sRUFBRztJQUVyQkEsT0FBTyxHQUFHVCxLQUFLLENBQUU7TUFDZlUsWUFBWSxFQUFFLElBQUk7TUFDbEJDLGlCQUFpQixFQUFFLEdBQUc7TUFDdEJDLGdCQUFnQixFQUFFUCxLQUFLLENBQUNRLHVCQUF1QjtNQUMvQ0MsS0FBSyxFQUFFQSxDQUFBLEtBQU07UUFDWFIsNEJBQTRCLENBQUNTLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDUiw0QkFBNEIsQ0FBQ1EsU0FBUyxDQUFDLENBQUM7TUFDMUMsQ0FBQztNQUNEQyxHQUFHLEVBQUVDLEtBQUssSUFBSTtRQUVaWCw0QkFBNEIsQ0FBQ1ksT0FBTyxDQUFDLENBQUM7UUFDdENWLG1CQUFtQixDQUFDVSxPQUFPLENBQUVELEtBQUssSUFBSUEsS0FBSyxDQUFDRSxRQUFTLENBQUM7TUFFeEQsQ0FBQztNQUNEQyxrQkFBa0IsRUFBRWYsS0FBSyxDQUFDZ0I7SUFDNUIsQ0FBQyxFQUFFWixPQUFRLENBQUM7SUFFWixLQUFLLENBQUVBLE9BQVEsQ0FBQztFQUNsQjtBQUNGO0FBRUFQLFFBQVEsQ0FBQ29CLFFBQVEsQ0FBRSw4QkFBOEIsRUFBRW5CLDRCQUE2QixDQUFDO0FBRWpGLGVBQWVBLDRCQUE0QiJ9