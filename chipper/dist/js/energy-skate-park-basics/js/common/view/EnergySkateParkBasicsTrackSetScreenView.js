// Copyright 2019-2022, University of Colorado Boulder

/**
 * The EnergySkateParkTrackSetScreenView used in screens in energy-skate-park-basics. Sets options for that
 * supertype that are shared between the intro and friction screens.
 * @author Jesse Greenberg
 */

import EnergySkateParkTrackSetScreenView from '../../../../energy-skate-park/js/common/view/EnergySkateParkTrackSetScreenView.js';
import merge from '../../../../phet-core/js/merge.js';
import energySkateParkBasics from '../../energySkateParkBasics.js';
class EnergySkateParkBasicsTrackSetScreenView extends EnergySkateParkTrackSetScreenView {
  /**
   * @param {EnergySkateParkTrackSetModel} model
   * @param {Array.<PhysicalNumberControl|PhysicalComboBox} controls
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(model, tandem, options) {
    options = merge({
      showToolbox: false,
      showReferenceHeight: false,
      showSeparateVisibilityControlsPanel: false,
      controlPanelOptions: {
        visibilityControlsOptions: {
          showGridCheckbox: true
        },
        showGravityControls: false,
        showFrictionControls: false,
        massControlsOptions: {
          includeMassSlider: true,
          includeMassNumberControl: false
        }
      }
    }, options);
    super(model, tandem, options);
  }
}
energySkateParkBasics.register('EnergySkateParkBasicsTrackSetScreenView', EnergySkateParkBasicsTrackSetScreenView);
export default EnergySkateParkBasicsTrackSetScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbmVyZ3lTa2F0ZVBhcmtUcmFja1NldFNjcmVlblZpZXciLCJtZXJnZSIsImVuZXJneVNrYXRlUGFya0Jhc2ljcyIsIkVuZXJneVNrYXRlUGFya0Jhc2ljc1RyYWNrU2V0U2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJvcHRpb25zIiwic2hvd1Rvb2xib3giLCJzaG93UmVmZXJlbmNlSGVpZ2h0Iiwic2hvd1NlcGFyYXRlVmlzaWJpbGl0eUNvbnRyb2xzUGFuZWwiLCJjb250cm9sUGFuZWxPcHRpb25zIiwidmlzaWJpbGl0eUNvbnRyb2xzT3B0aW9ucyIsInNob3dHcmlkQ2hlY2tib3giLCJzaG93R3Jhdml0eUNvbnRyb2xzIiwic2hvd0ZyaWN0aW9uQ29udHJvbHMiLCJtYXNzQ29udHJvbHNPcHRpb25zIiwiaW5jbHVkZU1hc3NTbGlkZXIiLCJpbmNsdWRlTWFzc051bWJlckNvbnRyb2wiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVuZXJneVNrYXRlUGFya0Jhc2ljc1RyYWNrU2V0U2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgRW5lcmd5U2thdGVQYXJrVHJhY2tTZXRTY3JlZW5WaWV3IHVzZWQgaW4gc2NyZWVucyBpbiBlbmVyZ3ktc2thdGUtcGFyay1iYXNpY3MuIFNldHMgb3B0aW9ucyBmb3IgdGhhdFxyXG4gKiBzdXBlcnR5cGUgdGhhdCBhcmUgc2hhcmVkIGJldHdlZW4gdGhlIGludHJvIGFuZCBmcmljdGlvbiBzY3JlZW5zLlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBFbmVyZ3lTa2F0ZVBhcmtUcmFja1NldFNjcmVlblZpZXcgZnJvbSAnLi4vLi4vLi4vLi4vZW5lcmd5LXNrYXRlLXBhcmsvanMvY29tbW9uL3ZpZXcvRW5lcmd5U2thdGVQYXJrVHJhY2tTZXRTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBlbmVyZ3lTa2F0ZVBhcmtCYXNpY3MgZnJvbSAnLi4vLi4vZW5lcmd5U2thdGVQYXJrQmFzaWNzLmpzJztcclxuXHJcbmNsYXNzIEVuZXJneVNrYXRlUGFya0Jhc2ljc1RyYWNrU2V0U2NyZWVuVmlldyBleHRlbmRzIEVuZXJneVNrYXRlUGFya1RyYWNrU2V0U2NyZWVuVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RW5lcmd5U2thdGVQYXJrVHJhY2tTZXRNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge0FycmF5LjxQaHlzaWNhbE51bWJlckNvbnRyb2x8UGh5c2ljYWxDb21ib0JveH0gY29udHJvbHNcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgdGFuZGVtLCBvcHRpb25zICkge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHNob3dUb29sYm94OiBmYWxzZSxcclxuICAgICAgc2hvd1JlZmVyZW5jZUhlaWdodDogZmFsc2UsXHJcbiAgICAgIHNob3dTZXBhcmF0ZVZpc2liaWxpdHlDb250cm9sc1BhbmVsOiBmYWxzZSxcclxuICAgICAgY29udHJvbFBhbmVsT3B0aW9uczoge1xyXG4gICAgICAgIHZpc2liaWxpdHlDb250cm9sc09wdGlvbnM6IHtcclxuICAgICAgICAgIHNob3dHcmlkQ2hlY2tib3g6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNob3dHcmF2aXR5Q29udHJvbHM6IGZhbHNlLFxyXG4gICAgICAgIHNob3dGcmljdGlvbkNvbnRyb2xzOiBmYWxzZSxcclxuICAgICAgICBtYXNzQ29udHJvbHNPcHRpb25zOiB7XHJcbiAgICAgICAgICBpbmNsdWRlTWFzc1NsaWRlcjogdHJ1ZSxcclxuICAgICAgICAgIGluY2x1ZGVNYXNzTnVtYmVyQ29udHJvbDogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHRhbmRlbSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZW5lcmd5U2thdGVQYXJrQmFzaWNzLnJlZ2lzdGVyKCAnRW5lcmd5U2thdGVQYXJrQmFzaWNzVHJhY2tTZXRTY3JlZW5WaWV3JywgRW5lcmd5U2thdGVQYXJrQmFzaWNzVHJhY2tTZXRTY3JlZW5WaWV3ICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVuZXJneVNrYXRlUGFya0Jhc2ljc1RyYWNrU2V0U2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsaUNBQWlDLE1BQU0sbUZBQW1GO0FBQ2pJLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBRWxFLE1BQU1DLHVDQUF1QyxTQUFTSCxpQ0FBaUMsQ0FBQztFQUV0RjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRztJQUNwQ0EsT0FBTyxHQUFHTixLQUFLLENBQUU7TUFDZk8sV0FBVyxFQUFFLEtBQUs7TUFDbEJDLG1CQUFtQixFQUFFLEtBQUs7TUFDMUJDLG1DQUFtQyxFQUFFLEtBQUs7TUFDMUNDLG1CQUFtQixFQUFFO1FBQ25CQyx5QkFBeUIsRUFBRTtVQUN6QkMsZ0JBQWdCLEVBQUU7UUFDcEIsQ0FBQztRQUNEQyxtQkFBbUIsRUFBRSxLQUFLO1FBQzFCQyxvQkFBb0IsRUFBRSxLQUFLO1FBQzNCQyxtQkFBbUIsRUFBRTtVQUNuQkMsaUJBQWlCLEVBQUUsSUFBSTtVQUN2QkMsd0JBQXdCLEVBQUU7UUFDNUI7TUFDRjtJQUNGLENBQUMsRUFBRVgsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFRixLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBUSxDQUFDO0VBQ2pDO0FBQ0Y7QUFFQUwscUJBQXFCLENBQUNpQixRQUFRLENBQUUseUNBQXlDLEVBQUVoQix1Q0FBd0MsQ0FBQztBQUNwSCxlQUFlQSx1Q0FBdUMifQ==