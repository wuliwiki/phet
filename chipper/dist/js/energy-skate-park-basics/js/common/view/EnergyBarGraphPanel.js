// Copyright 2019-2021, University of Colorado Boulder

/**
 * The Energy bar graph in Energy Skate Park, wrapped in a panel.
 *
 * @author Jesse Greenberg
 */

import EnergySkateParkConstants from '../../../../energy-skate-park/js/common/EnergySkateParkConstants.js';
import EnergyBarGraph from '../../../../energy-skate-park/js/common/view/EnergyBarGraph.js';
import merge from '../../../../phet-core/js/merge.js';
import { VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import energySkateParkBasics from '../../energySkateParkBasics.js';
class EnergyBarGraphPanel extends Panel {
  /**
   * @param {EnergySkateParkModel} model
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(model, tandem, options) {
    options = merge({
      // {null|*} options for the bar graph itself, passed on to EnergyBarGraph
      barGraphOptions: null
    }, EnergySkateParkConstants.PANEL_OPTIONS, options);
    const label = EnergyBarGraph.createLabel();
    const energyBarGraph = new EnergyBarGraph(model.skater, model.barGraphScaleProperty, model.barGraphVisibleProperty, tandem.createTandem('energyBarGraph'), options.barGraphOptions);
    const labelledGraph = new VBox({
      children: [label, energyBarGraph]
    });
    super(labelledGraph, options);
  }
}
energySkateParkBasics.register('EnergyBarGraphPanel', EnergyBarGraphPanel);
export default EnergyBarGraphPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbmVyZ3lTa2F0ZVBhcmtDb25zdGFudHMiLCJFbmVyZ3lCYXJHcmFwaCIsIm1lcmdlIiwiVkJveCIsIlBhbmVsIiwiZW5lcmd5U2thdGVQYXJrQmFzaWNzIiwiRW5lcmd5QmFyR3JhcGhQYW5lbCIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJvcHRpb25zIiwiYmFyR3JhcGhPcHRpb25zIiwiUEFORUxfT1BUSU9OUyIsImxhYmVsIiwiY3JlYXRlTGFiZWwiLCJlbmVyZ3lCYXJHcmFwaCIsInNrYXRlciIsImJhckdyYXBoU2NhbGVQcm9wZXJ0eSIsImJhckdyYXBoVmlzaWJsZVByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwibGFiZWxsZWRHcmFwaCIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbmVyZ3lCYXJHcmFwaFBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBFbmVyZ3kgYmFyIGdyYXBoIGluIEVuZXJneSBTa2F0ZSBQYXJrLCB3cmFwcGVkIGluIGEgcGFuZWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVuZXJneVNrYXRlUGFya0NvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9lbmVyZ3ktc2thdGUtcGFyay9qcy9jb21tb24vRW5lcmd5U2thdGVQYXJrQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEVuZXJneUJhckdyYXBoIGZyb20gJy4uLy4uLy4uLy4uL2VuZXJneS1za2F0ZS1wYXJrL2pzL2NvbW1vbi92aWV3L0VuZXJneUJhckdyYXBoLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IGVuZXJneVNrYXRlUGFya0Jhc2ljcyBmcm9tICcuLi8uLi9lbmVyZ3lTa2F0ZVBhcmtCYXNpY3MuanMnO1xyXG5cclxuY2xhc3MgRW5lcmd5QmFyR3JhcGhQYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFbmVyZ3lTa2F0ZVBhcmtNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgdGFuZGVtLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8ge251bGx8Kn0gb3B0aW9ucyBmb3IgdGhlIGJhciBncmFwaCBpdHNlbGYsIHBhc3NlZCBvbiB0byBFbmVyZ3lCYXJHcmFwaFxyXG4gICAgICBiYXJHcmFwaE9wdGlvbnM6IG51bGxcclxuICAgIH0sIEVuZXJneVNrYXRlUGFya0NvbnN0YW50cy5QQU5FTF9PUFRJT05TLCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgbGFiZWwgPSBFbmVyZ3lCYXJHcmFwaC5jcmVhdGVMYWJlbCgpO1xyXG4gICAgY29uc3QgZW5lcmd5QmFyR3JhcGggPSBuZXcgRW5lcmd5QmFyR3JhcGgoIG1vZGVsLnNrYXRlciwgbW9kZWwuYmFyR3JhcGhTY2FsZVByb3BlcnR5LCBtb2RlbC5iYXJHcmFwaFZpc2libGVQcm9wZXJ0eSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2VuZXJneUJhckdyYXBoJyApLCBvcHRpb25zLmJhckdyYXBoT3B0aW9ucyApO1xyXG4gICAgY29uc3QgbGFiZWxsZWRHcmFwaCA9IG5ldyBWQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIGxhYmVsLCBlbmVyZ3lCYXJHcmFwaCBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGxhYmVsbGVkR3JhcGgsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmVuZXJneVNrYXRlUGFya0Jhc2ljcy5yZWdpc3RlciggJ0VuZXJneUJhckdyYXBoUGFuZWwnLCBFbmVyZ3lCYXJHcmFwaFBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVuZXJneUJhckdyYXBoUGFuZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHdCQUF3QixNQUFNLHFFQUFxRTtBQUMxRyxPQUFPQyxjQUFjLE1BQU0sZ0VBQWdFO0FBQzNGLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUVsRSxNQUFNQyxtQkFBbUIsU0FBU0YsS0FBSyxDQUFDO0VBRXRDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRztJQUVwQ0EsT0FBTyxHQUFHUixLQUFLLENBQUU7TUFFZjtNQUNBUyxlQUFlLEVBQUU7SUFDbkIsQ0FBQyxFQUFFWCx3QkFBd0IsQ0FBQ1ksYUFBYSxFQUFFRixPQUFRLENBQUM7SUFFcEQsTUFBTUcsS0FBSyxHQUFHWixjQUFjLENBQUNhLFdBQVcsQ0FBQyxDQUFDO0lBQzFDLE1BQU1DLGNBQWMsR0FBRyxJQUFJZCxjQUFjLENBQUVPLEtBQUssQ0FBQ1EsTUFBTSxFQUFFUixLQUFLLENBQUNTLHFCQUFxQixFQUFFVCxLQUFLLENBQUNVLHVCQUF1QixFQUFFVCxNQUFNLENBQUNVLFlBQVksQ0FBRSxnQkFBaUIsQ0FBQyxFQUFFVCxPQUFPLENBQUNDLGVBQWdCLENBQUM7SUFDdkwsTUFBTVMsYUFBYSxHQUFHLElBQUlqQixJQUFJLENBQUU7TUFDOUJrQixRQUFRLEVBQUUsQ0FBRVIsS0FBSyxFQUFFRSxjQUFjO0lBQ25DLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRUssYUFBYSxFQUFFVixPQUFRLENBQUM7RUFDakM7QUFDRjtBQUVBTCxxQkFBcUIsQ0FBQ2lCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWhCLG1CQUFvQixDQUFDO0FBQzVFLGVBQWVBLG1CQUFtQiJ9