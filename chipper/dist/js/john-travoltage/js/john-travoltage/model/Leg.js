// Copyright 2013-2022, University of Colorado Boulder

/**
 * Leg model of John Travoltage. Can rotate.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Vasily Shakhov (Mlearner)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import johnTravoltage from '../../johnTravoltage.js';
import Appendage from './Appendage.js';
import JohnTravoltageModel from './JohnTravoltageModel.js';
class Leg extends Appendage {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    // empirically determined by inspecting the view
    const pivotPoint = new Vector2(398, 335);
    super(pivotPoint, tandem, {
      initialAngle: 1.3175443221852239,
      // determined empirically with DebutUtils
      range: new Range(0, Math.PI),
      precision: 7
    });

    // @public (sonification) - speed of leg determines volume of some audio
    this.angularVelocityProperty = new NumberProperty(0, {
      phetioReadOnly: true,
      tandem: tandem.createTandem('angularVelocityProperty'),
      units: 'radians/s'
    });

    // true when the foot is in contact with the carpet
    this.shoeOnCarpetProperty = new DerivedProperty([this.angleProperty], angle => angle > JohnTravoltageModel.FOOT_ON_CARPET_MIN_ANGLE && angle < JohnTravoltageModel.FOOT_ON_CARPET_MAX_ANGLE, {
      phetioValueType: BooleanIO,
      tandem: tandem.createTandem('shoeOnCarpetProperty')
    });
  }

  /**
   * Reset the leg.
   * @public
   */
  reset() {
    this.angularVelocityProperty.reset();
    super.reset();
  }

  /**
   * Calculate the change in angle from the initial value at construction.
   * @returns {number}
   * @public
   */
  deltaAngle() {
    return this.angleProperty.get() - this.initialAngle;
  }
}
johnTravoltage.register('Leg', Leg);
export default Leg;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiVmVjdG9yMiIsIkJvb2xlYW5JTyIsImpvaG5UcmF2b2x0YWdlIiwiQXBwZW5kYWdlIiwiSm9oblRyYXZvbHRhZ2VNb2RlbCIsIkxlZyIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwicGl2b3RQb2ludCIsImluaXRpYWxBbmdsZSIsInJhbmdlIiwiTWF0aCIsIlBJIiwicHJlY2lzaW9uIiwiYW5ndWxhclZlbG9jaXR5UHJvcGVydHkiLCJwaGV0aW9SZWFkT25seSIsImNyZWF0ZVRhbmRlbSIsInVuaXRzIiwic2hvZU9uQ2FycGV0UHJvcGVydHkiLCJhbmdsZVByb3BlcnR5IiwiYW5nbGUiLCJGT09UX09OX0NBUlBFVF9NSU5fQU5HTEUiLCJGT09UX09OX0NBUlBFVF9NQVhfQU5HTEUiLCJwaGV0aW9WYWx1ZVR5cGUiLCJyZXNldCIsImRlbHRhQW5nbGUiLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxlZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMZWcgbW9kZWwgb2YgSm9obiBUcmF2b2x0YWdlLiBDYW4gcm90YXRlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFZhc2lseSBTaGFraG92IChNbGVhcm5lcilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgQm9vbGVhbklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9Cb29sZWFuSU8uanMnO1xyXG5pbXBvcnQgam9oblRyYXZvbHRhZ2UgZnJvbSAnLi4vLi4vam9oblRyYXZvbHRhZ2UuanMnO1xyXG5pbXBvcnQgQXBwZW5kYWdlIGZyb20gJy4vQXBwZW5kYWdlLmpzJztcclxuaW1wb3J0IEpvaG5UcmF2b2x0YWdlTW9kZWwgZnJvbSAnLi9Kb2huVHJhdm9sdGFnZU1vZGVsLmpzJztcclxuXHJcbmNsYXNzIExlZyBleHRlbmRzIEFwcGVuZGFnZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZCBieSBpbnNwZWN0aW5nIHRoZSB2aWV3XHJcbiAgICBjb25zdCBwaXZvdFBvaW50ID0gbmV3IFZlY3RvcjIoIDM5OCwgMzM1ICk7XHJcblxyXG4gICAgc3VwZXIoIHBpdm90UG9pbnQsIHRhbmRlbSwge1xyXG4gICAgICBpbml0aWFsQW5nbGU6IDEuMzE3NTQ0MzIyMTg1MjIzOSwgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseSB3aXRoIERlYnV0VXRpbHNcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMCwgTWF0aC5QSSApLFxyXG4gICAgICBwcmVjaXNpb246IDdcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChzb25pZmljYXRpb24pIC0gc3BlZWQgb2YgbGVnIGRldGVybWluZXMgdm9sdW1lIG9mIHNvbWUgYXVkaW9cclxuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAsIHtcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWUsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2FuZ3VsYXJWZWxvY2l0eVByb3BlcnR5JyApLFxyXG4gICAgICB1bml0czogJ3JhZGlhbnMvcydcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyB0cnVlIHdoZW4gdGhlIGZvb3QgaXMgaW4gY29udGFjdCB3aXRoIHRoZSBjYXJwZXRcclxuICAgIHRoaXMuc2hvZU9uQ2FycGV0UHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIHRoaXMuYW5nbGVQcm9wZXJ0eSBdLFxyXG4gICAgICBhbmdsZSA9PiBhbmdsZSA+IEpvaG5UcmF2b2x0YWdlTW9kZWwuRk9PVF9PTl9DQVJQRVRfTUlOX0FOR0xFICYmIGFuZ2xlIDwgSm9oblRyYXZvbHRhZ2VNb2RlbC5GT09UX09OX0NBUlBFVF9NQVhfQU5HTEUsIHtcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IEJvb2xlYW5JTyxcclxuICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzaG9lT25DYXJwZXRQcm9wZXJ0eScgKVxyXG4gICAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGUgbGVnLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5UHJvcGVydHkucmVzZXQoKTtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhdGUgdGhlIGNoYW5nZSBpbiBhbmdsZSBmcm9tIHRoZSBpbml0aWFsIHZhbHVlIGF0IGNvbnN0cnVjdGlvbi5cclxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBkZWx0YUFuZ2xlKCkgeyByZXR1cm4gdGhpcy5hbmdsZVByb3BlcnR5LmdldCgpIC0gdGhpcy5pbml0aWFsQW5nbGU7IH1cclxufVxyXG5cclxuam9oblRyYXZvbHRhZ2UucmVnaXN0ZXIoICdMZWcnLCBMZWcgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExlZzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFNBQVMsTUFBTSwwQ0FBMEM7QUFDaEUsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQ3RDLE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQUUxRCxNQUFNQyxHQUFHLFNBQVNGLFNBQVMsQ0FBQztFQUMxQjtBQUNGO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBRXBCO0lBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUlSLE9BQU8sQ0FBRSxHQUFHLEVBQUUsR0FBSSxDQUFDO0lBRTFDLEtBQUssQ0FBRVEsVUFBVSxFQUFFRCxNQUFNLEVBQUU7TUFDekJFLFlBQVksRUFBRSxrQkFBa0I7TUFBRTtNQUNsQ0MsS0FBSyxFQUFFLElBQUlYLEtBQUssQ0FBRSxDQUFDLEVBQUVZLElBQUksQ0FBQ0MsRUFBRyxDQUFDO01BQzlCQyxTQUFTLEVBQUU7SUFDYixDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNDLHVCQUF1QixHQUFHLElBQUloQixjQUFjLENBQUUsQ0FBQyxFQUFFO01BQ3BEaUIsY0FBYyxFQUFFLElBQUk7TUFDcEJSLE1BQU0sRUFBRUEsTUFBTSxDQUFDUyxZQUFZLENBQUUseUJBQTBCLENBQUM7TUFDeERDLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUcsSUFBSXJCLGVBQWUsQ0FBRSxDQUFFLElBQUksQ0FBQ3NCLGFBQWEsQ0FBRSxFQUNyRUMsS0FBSyxJQUFJQSxLQUFLLEdBQUdoQixtQkFBbUIsQ0FBQ2lCLHdCQUF3QixJQUFJRCxLQUFLLEdBQUdoQixtQkFBbUIsQ0FBQ2tCLHdCQUF3QixFQUFFO01BQ3JIQyxlQUFlLEVBQUV0QixTQUFTO01BQzFCTSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ1MsWUFBWSxDQUFFLHNCQUF1QjtJQUN0RCxDQUFFLENBQUM7RUFDUDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFUSxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNWLHVCQUF1QixDQUFDVSxLQUFLLENBQUMsQ0FBQztJQUNwQyxLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0VBQ2Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxVQUFVQSxDQUFBLEVBQUc7SUFBRSxPQUFPLElBQUksQ0FBQ04sYUFBYSxDQUFDTyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ2pCLFlBQVk7RUFBRTtBQUN0RTtBQUVBUCxjQUFjLENBQUN5QixRQUFRLENBQUUsS0FBSyxFQUFFdEIsR0FBSSxDQUFDO0FBRXJDLGVBQWVBLEdBQUcifQ==