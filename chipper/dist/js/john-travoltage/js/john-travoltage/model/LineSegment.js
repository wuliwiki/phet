// Copyright 2013-2020, University of Colorado Boulder

/**
 * Simple line segment model.  Immutable, and all derived values are computed in advance for performance.
 * If you mutate the line, the derived values will be wrong.  This utility class does not need to be instrumented
 * for PhET-iO.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import johnTravoltage from '../../johnTravoltage.js';
class LineSegment {
  /**
   * Create a LineSegment from Number,Number,Number,Number
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   */
  constructor(x1, y1, x2, y2) {
    // @private
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;

    // @public (read-only)
    this.normalVector = new Vector2(this.x2 - this.x1, this.y2 - this.y1).perpendicular.normalized();
    this.vector = new Vector2(this.x2 - this.x1, this.y2 - this.y1);
    this.p0 = new Vector2(this.x1, this.y1);
    this.p1 = new Vector2(this.x2, this.y2);
    const epsilon = 0.01;

    // @public (read-only)
    this.pre0 = this.p0.blend(this.p1, epsilon);
    this.pre1 = this.p0.blend(this.p1, 1 - epsilon);
  }

  /**
   * Get the center of this line segment.  Does not need to be fast, this is only used for debugging.
   * @returns {[type]} [description]
   */
  get center() {
    return new Vector2((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);
  }

  /**
   * Get a normal vector to this line segment.
   *
   * @returns {Vector2}
   */
  get normal() {
    return new Vector2(this.x2 - this.x1, this.y2 - this.y1).normalized().perpendicular;
  }
}
johnTravoltage.register('LineSegment', LineSegment);
export default LineSegment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiam9oblRyYXZvbHRhZ2UiLCJMaW5lU2VnbWVudCIsImNvbnN0cnVjdG9yIiwieDEiLCJ5MSIsIngyIiwieTIiLCJub3JtYWxWZWN0b3IiLCJwZXJwZW5kaWN1bGFyIiwibm9ybWFsaXplZCIsInZlY3RvciIsInAwIiwicDEiLCJlcHNpbG9uIiwicHJlMCIsImJsZW5kIiwicHJlMSIsImNlbnRlciIsIm5vcm1hbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGluZVNlZ21lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2ltcGxlIGxpbmUgc2VnbWVudCBtb2RlbC4gIEltbXV0YWJsZSwgYW5kIGFsbCBkZXJpdmVkIHZhbHVlcyBhcmUgY29tcHV0ZWQgaW4gYWR2YW5jZSBmb3IgcGVyZm9ybWFuY2UuXHJcbiAqIElmIHlvdSBtdXRhdGUgdGhlIGxpbmUsIHRoZSBkZXJpdmVkIHZhbHVlcyB3aWxsIGJlIHdyb25nLiAgVGhpcyB1dGlsaXR5IGNsYXNzIGRvZXMgbm90IG5lZWQgdG8gYmUgaW5zdHJ1bWVudGVkXHJcbiAqIGZvciBQaEVULWlPLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IGpvaG5UcmF2b2x0YWdlIGZyb20gJy4uLy4uL2pvaG5UcmF2b2x0YWdlLmpzJztcclxuXHJcbmNsYXNzIExpbmVTZWdtZW50IHtcclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBMaW5lU2VnbWVudCBmcm9tIE51bWJlcixOdW1iZXIsTnVtYmVyLE51bWJlclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHgxXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkxXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHgyXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkyXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHgxLCB5MSwgeDIsIHkyICkge1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLngxID0geDE7XHJcbiAgICB0aGlzLnkxID0geTE7XHJcbiAgICB0aGlzLngyID0geDI7XHJcbiAgICB0aGlzLnkyID0geTI7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy5ub3JtYWxWZWN0b3IgPSBuZXcgVmVjdG9yMiggdGhpcy54MiAtIHRoaXMueDEsIHRoaXMueTIgLSB0aGlzLnkxICkucGVycGVuZGljdWxhci5ub3JtYWxpemVkKCk7XHJcbiAgICB0aGlzLnZlY3RvciA9IG5ldyBWZWN0b3IyKCB0aGlzLngyIC0gdGhpcy54MSwgdGhpcy55MiAtIHRoaXMueTEgKTtcclxuICAgIHRoaXMucDAgPSBuZXcgVmVjdG9yMiggdGhpcy54MSwgdGhpcy55MSApO1xyXG4gICAgdGhpcy5wMSA9IG5ldyBWZWN0b3IyKCB0aGlzLngyLCB0aGlzLnkyICk7XHJcblxyXG4gICAgY29uc3QgZXBzaWxvbiA9IDAuMDE7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy5wcmUwID0gdGhpcy5wMC5ibGVuZCggdGhpcy5wMSwgZXBzaWxvbiApO1xyXG4gICAgdGhpcy5wcmUxID0gdGhpcy5wMC5ibGVuZCggdGhpcy5wMSwgMSAtIGVwc2lsb24gKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGNlbnRlciBvZiB0aGlzIGxpbmUgc2VnbWVudC4gIERvZXMgbm90IG5lZWQgdG8gYmUgZmFzdCwgdGhpcyBpcyBvbmx5IHVzZWQgZm9yIGRlYnVnZ2luZy5cclxuICAgKiBAcmV0dXJucyB7W3R5cGVdfSBbZGVzY3JpcHRpb25dXHJcbiAgICovXHJcbiAgZ2V0IGNlbnRlcigpIHsgcmV0dXJuIG5ldyBWZWN0b3IyKCAoIHRoaXMueDEgKyB0aGlzLngyICkgLyAyLCAoIHRoaXMueTEgKyB0aGlzLnkyICkgLyAyICk7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGEgbm9ybWFsIHZlY3RvciB0byB0aGlzIGxpbmUgc2VnbWVudC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtWZWN0b3IyfVxyXG4gICAqL1xyXG4gIGdldCBub3JtYWwoKSB7IHJldHVybiBuZXcgVmVjdG9yMiggdGhpcy54MiAtIHRoaXMueDEsIHRoaXMueTIgLSB0aGlzLnkxICkubm9ybWFsaXplZCgpLnBlcnBlbmRpY3VsYXI7IH1cclxufVxyXG5cclxuam9oblRyYXZvbHRhZ2UucmVnaXN0ZXIoICdMaW5lU2VnbWVudCcsIExpbmVTZWdtZW50ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMaW5lU2VnbWVudDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUVwRCxNQUFNQyxXQUFXLENBQUM7RUFDaEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUc7SUFFNUI7SUFDQSxJQUFJLENBQUNILEVBQUUsR0FBR0EsRUFBRTtJQUNaLElBQUksQ0FBQ0MsRUFBRSxHQUFHQSxFQUFFO0lBQ1osSUFBSSxDQUFDQyxFQUFFLEdBQUdBLEVBQUU7SUFDWixJQUFJLENBQUNDLEVBQUUsR0FBR0EsRUFBRTs7SUFFWjtJQUNBLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlSLE9BQU8sQ0FBRSxJQUFJLENBQUNNLEVBQUUsR0FBRyxJQUFJLENBQUNGLEVBQUUsRUFBRSxJQUFJLENBQUNHLEVBQUUsR0FBRyxJQUFJLENBQUNGLEVBQUcsQ0FBQyxDQUFDSSxhQUFhLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xHLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlYLE9BQU8sQ0FBRSxJQUFJLENBQUNNLEVBQUUsR0FBRyxJQUFJLENBQUNGLEVBQUUsRUFBRSxJQUFJLENBQUNHLEVBQUUsR0FBRyxJQUFJLENBQUNGLEVBQUcsQ0FBQztJQUNqRSxJQUFJLENBQUNPLEVBQUUsR0FBRyxJQUFJWixPQUFPLENBQUUsSUFBSSxDQUFDSSxFQUFFLEVBQUUsSUFBSSxDQUFDQyxFQUFHLENBQUM7SUFDekMsSUFBSSxDQUFDUSxFQUFFLEdBQUcsSUFBSWIsT0FBTyxDQUFFLElBQUksQ0FBQ00sRUFBRSxFQUFFLElBQUksQ0FBQ0MsRUFBRyxDQUFDO0lBRXpDLE1BQU1PLE9BQU8sR0FBRyxJQUFJOztJQUVwQjtJQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0gsRUFBRSxDQUFDSSxLQUFLLENBQUUsSUFBSSxDQUFDSCxFQUFFLEVBQUVDLE9BQVEsQ0FBQztJQUM3QyxJQUFJLENBQUNHLElBQUksR0FBRyxJQUFJLENBQUNMLEVBQUUsQ0FBQ0ksS0FBSyxDQUFFLElBQUksQ0FBQ0gsRUFBRSxFQUFFLENBQUMsR0FBR0MsT0FBUSxDQUFDO0VBQ25EOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0UsSUFBSUksTUFBTUEsQ0FBQSxFQUFHO0lBQUUsT0FBTyxJQUFJbEIsT0FBTyxDQUFFLENBQUUsSUFBSSxDQUFDSSxFQUFFLEdBQUcsSUFBSSxDQUFDRSxFQUFFLElBQUssQ0FBQyxFQUFFLENBQUUsSUFBSSxDQUFDRCxFQUFFLEdBQUcsSUFBSSxDQUFDRSxFQUFFLElBQUssQ0FBRSxDQUFDO0VBQUU7O0VBRTNGO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRSxJQUFJWSxNQUFNQSxDQUFBLEVBQUc7SUFBRSxPQUFPLElBQUluQixPQUFPLENBQUUsSUFBSSxDQUFDTSxFQUFFLEdBQUcsSUFBSSxDQUFDRixFQUFFLEVBQUUsSUFBSSxDQUFDRyxFQUFFLEdBQUcsSUFBSSxDQUFDRixFQUFHLENBQUMsQ0FBQ0ssVUFBVSxDQUFDLENBQUMsQ0FBQ0QsYUFBYTtFQUFFO0FBQ3hHO0FBRUFSLGNBQWMsQ0FBQ21CLFFBQVEsQ0FBRSxhQUFhLEVBQUVsQixXQUFZLENBQUM7QUFFckQsZUFBZUEsV0FBVyJ9