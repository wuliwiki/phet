// Copyright 2019-2022, University of Colorado Boulder

/**
 * A Node that will catch input within the shape of the body in john-travoltage. The background of the
 * screen view is explicitly non-pickable so this node will catch input on top of it.
 * @author Jesse Greenberg
 */

import { DragListener, Path } from '../../../../scenery/js/imports.js';
import johnTravoltage from '../../johnTravoltage.js';
class BodyShapeNode extends Path {
  /**
   * @param {LineSegment[]} bodyLines - array of LineSegments that define the shape of the body.
   */
  constructor(model, options) {
    super(model.bodyShape);

    // determines if the pointer is within the body area - this is all about making it easier to understand
    // the shape of the body, so we use DragListener for its touchSnag support so the body is discoverable
    this.addInputListener(new DragListener({
      // just for vibration feedback, don't make the cursor look different
      pressCursor: null,
      press: (event, listener) => {
        model.touchingBodyProperty.set(true);
      },
      drag: (event, listener) => {
        const parentPoint = this.globalToParentPoint(event.pointer.point);
        model.touchingBodyProperty.set(model.bodyContainsPoint(parentPoint));
      },
      release: (event, listener) => {
        model.touchingBodyProperty.set(false);
      }
    }));
  }

  /**
   * Make the body shape visible. This is purely for debugging purposes.
   * @public
   */
  showBody() {
    this.setStroke('green');
  }
}
johnTravoltage.register('BodyShapeNode', BodyShapeNode);
export default BodyShapeNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEcmFnTGlzdGVuZXIiLCJQYXRoIiwiam9oblRyYXZvbHRhZ2UiLCJCb2R5U2hhcGVOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm9wdGlvbnMiLCJib2R5U2hhcGUiLCJhZGRJbnB1dExpc3RlbmVyIiwicHJlc3NDdXJzb3IiLCJwcmVzcyIsImV2ZW50IiwibGlzdGVuZXIiLCJ0b3VjaGluZ0JvZHlQcm9wZXJ0eSIsInNldCIsImRyYWciLCJwYXJlbnRQb2ludCIsImdsb2JhbFRvUGFyZW50UG9pbnQiLCJwb2ludGVyIiwicG9pbnQiLCJib2R5Q29udGFpbnNQb2ludCIsInJlbGVhc2UiLCJzaG93Qm9keSIsInNldFN0cm9rZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQm9keVNoYXBlTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIE5vZGUgdGhhdCB3aWxsIGNhdGNoIGlucHV0IHdpdGhpbiB0aGUgc2hhcGUgb2YgdGhlIGJvZHkgaW4gam9obi10cmF2b2x0YWdlLiBUaGUgYmFja2dyb3VuZCBvZiB0aGVcclxuICogc2NyZWVuIHZpZXcgaXMgZXhwbGljaXRseSBub24tcGlja2FibGUgc28gdGhpcyBub2RlIHdpbGwgY2F0Y2ggaW5wdXQgb24gdG9wIG9mIGl0LlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciwgUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBqb2huVHJhdm9sdGFnZSBmcm9tICcuLi8uLi9qb2huVHJhdm9sdGFnZS5qcyc7XHJcblxyXG5jbGFzcyBCb2R5U2hhcGVOb2RlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TGluZVNlZ21lbnRbXX0gYm9keUxpbmVzIC0gYXJyYXkgb2YgTGluZVNlZ21lbnRzIHRoYXQgZGVmaW5lIHRoZSBzaGFwZSBvZiB0aGUgYm9keS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggbW9kZWwuYm9keVNoYXBlICk7XHJcblxyXG4gICAgLy8gZGV0ZXJtaW5lcyBpZiB0aGUgcG9pbnRlciBpcyB3aXRoaW4gdGhlIGJvZHkgYXJlYSAtIHRoaXMgaXMgYWxsIGFib3V0IG1ha2luZyBpdCBlYXNpZXIgdG8gdW5kZXJzdGFuZFxyXG4gICAgLy8gdGhlIHNoYXBlIG9mIHRoZSBib2R5LCBzbyB3ZSB1c2UgRHJhZ0xpc3RlbmVyIGZvciBpdHMgdG91Y2hTbmFnIHN1cHBvcnQgc28gdGhlIGJvZHkgaXMgZGlzY292ZXJhYmxlXHJcbiAgICB0aGlzLmFkZElucHV0TGlzdGVuZXIoIG5ldyBEcmFnTGlzdGVuZXIoIHtcclxuXHJcbiAgICAgIC8vIGp1c3QgZm9yIHZpYnJhdGlvbiBmZWVkYmFjaywgZG9uJ3QgbWFrZSB0aGUgY3Vyc29yIGxvb2sgZGlmZmVyZW50XHJcbiAgICAgIHByZXNzQ3Vyc29yOiBudWxsLFxyXG5cclxuICAgICAgcHJlc3M6ICggZXZlbnQsIGxpc3RlbmVyICkgPT4ge1xyXG4gICAgICAgIG1vZGVsLnRvdWNoaW5nQm9keVByb3BlcnR5LnNldCggdHJ1ZSApO1xyXG4gICAgICB9LFxyXG4gICAgICBkcmFnOiAoIGV2ZW50LCBsaXN0ZW5lciApID0+IHtcclxuICAgICAgICBjb25zdCBwYXJlbnRQb2ludCA9IHRoaXMuZ2xvYmFsVG9QYXJlbnRQb2ludCggZXZlbnQucG9pbnRlci5wb2ludCApO1xyXG4gICAgICAgIG1vZGVsLnRvdWNoaW5nQm9keVByb3BlcnR5LnNldCggbW9kZWwuYm9keUNvbnRhaW5zUG9pbnQoIHBhcmVudFBvaW50ICkgKTtcclxuICAgICAgfSxcclxuICAgICAgcmVsZWFzZTogKCBldmVudCwgbGlzdGVuZXIgKSA9PiB7XHJcbiAgICAgICAgbW9kZWwudG91Y2hpbmdCb2R5UHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG4gICAgICB9XHJcbiAgICB9ICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ha2UgdGhlIGJvZHkgc2hhcGUgdmlzaWJsZS4gVGhpcyBpcyBwdXJlbHkgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc2hvd0JvZHkoKSB7XHJcbiAgICB0aGlzLnNldFN0cm9rZSggJ2dyZWVuJyApO1xyXG4gIH1cclxufVxyXG5cclxuam9oblRyYXZvbHRhZ2UucmVnaXN0ZXIoICdCb2R5U2hhcGVOb2RlJywgQm9keVNoYXBlTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBCb2R5U2hhcGVOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxZQUFZLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDdEUsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUVwRCxNQUFNQyxhQUFhLFNBQVNGLElBQUksQ0FBQztFQUUvQjtBQUNGO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUc7SUFDNUIsS0FBSyxDQUFFRCxLQUFLLENBQUNFLFNBQVUsQ0FBQzs7SUFFeEI7SUFDQTtJQUNBLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUUsSUFBSVIsWUFBWSxDQUFFO01BRXZDO01BQ0FTLFdBQVcsRUFBRSxJQUFJO01BRWpCQyxLQUFLLEVBQUVBLENBQUVDLEtBQUssRUFBRUMsUUFBUSxLQUFNO1FBQzVCUCxLQUFLLENBQUNRLG9CQUFvQixDQUFDQyxHQUFHLENBQUUsSUFBSyxDQUFDO01BQ3hDLENBQUM7TUFDREMsSUFBSSxFQUFFQSxDQUFFSixLQUFLLEVBQUVDLFFBQVEsS0FBTTtRQUMzQixNQUFNSSxXQUFXLEdBQUcsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBRU4sS0FBSyxDQUFDTyxPQUFPLENBQUNDLEtBQU0sQ0FBQztRQUNuRWQsS0FBSyxDQUFDUSxvQkFBb0IsQ0FBQ0MsR0FBRyxDQUFFVCxLQUFLLENBQUNlLGlCQUFpQixDQUFFSixXQUFZLENBQUUsQ0FBQztNQUMxRSxDQUFDO01BQ0RLLE9BQU8sRUFBRUEsQ0FBRVYsS0FBSyxFQUFFQyxRQUFRLEtBQU07UUFDOUJQLEtBQUssQ0FBQ1Esb0JBQW9CLENBQUNDLEdBQUcsQ0FBRSxLQUFNLENBQUM7TUFDekM7SUFDRixDQUFFLENBQUUsQ0FBQztFQUNQOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VRLFFBQVFBLENBQUEsRUFBRztJQUNULElBQUksQ0FBQ0MsU0FBUyxDQUFFLE9BQVEsQ0FBQztFQUMzQjtBQUNGO0FBRUFyQixjQUFjLENBQUNzQixRQUFRLENBQUUsZUFBZSxFQUFFckIsYUFBYyxDQUFDO0FBQ3pELGVBQWVBLGFBQWEifQ==