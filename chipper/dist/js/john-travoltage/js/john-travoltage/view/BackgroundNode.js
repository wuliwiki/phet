// Copyright 2013-2022, University of Colorado Boulder

/**
 * Background static elements of simulation
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Vasily Shakhov (Mlearner)
 */

import { Image, Node, Pattern, Rectangle } from '../../../../scenery/js/imports.js';
import body_png from '../../../images/body_png.js';
import door_png from '../../../images/door_png.js';
import floor_png from '../../../images/floor_png.js';
import rug_png from '../../../images/rug_png.js';
import wallpaper_png from '../../../images/wallpaper_png.js';
import window_png from '../../../images/window_png.js';
import johnTravoltage from '../../johnTravoltage.js';
class BackgroundNode extends Node {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    super({
      pickable: false,
      tandem: tandem
    });

    //wallpapers
    this.addChild(new Rectangle(-1000, -300, 3000, 1100, {
      fill: new Pattern(wallpaper_png),
      tandem: tandem.createTandem('wallpaper')
    }));

    // add the Window image
    this.addChild(new Image(window_png, {
      x: 50,
      y: 60,
      scale: 0.93,
      tandem: tandem.createTandem('window')
    }));

    // add the floor image
    this.addChild(new Rectangle(-1000, 440, 3000, 1100, {
      fill: new Pattern(floor_png),
      tandem: tandem.createTandem('floor')
    }));

    // add the rug image
    this.addChild(new Image(rug_png, {
      x: 110,
      y: 446,
      scale: 0.58,
      tandem: tandem.createTandem('rug')
    }));

    // add the door image
    this.addChild(new Image(door_png, {
      x: 513.5,
      y: 48,
      scale: 0.785,
      tandem: tandem.createTandem('door')
    }));

    // add the body image
    this.addChild(new Image(body_png, {
      x: 260,
      y: 60,
      scale: 0.85,
      tandem: tandem.createTandem('body')
    }));
  }
}
johnTravoltage.register('BackgroundNode', BackgroundNode);
export default BackgroundNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZSIsIk5vZGUiLCJQYXR0ZXJuIiwiUmVjdGFuZ2xlIiwiYm9keV9wbmciLCJkb29yX3BuZyIsImZsb29yX3BuZyIsInJ1Z19wbmciLCJ3YWxscGFwZXJfcG5nIiwid2luZG93X3BuZyIsImpvaG5UcmF2b2x0YWdlIiwiQmFja2dyb3VuZE5vZGUiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsInBpY2thYmxlIiwiYWRkQ2hpbGQiLCJmaWxsIiwiY3JlYXRlVGFuZGVtIiwieCIsInkiLCJzY2FsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFja2dyb3VuZE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmFja2dyb3VuZCBzdGF0aWMgZWxlbWVudHMgb2Ygc2ltdWxhdGlvblxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFZhc2lseSBTaGFraG92IChNbGVhcm5lcilcclxuICovXHJcblxyXG5pbXBvcnQgeyBJbWFnZSwgTm9kZSwgUGF0dGVybiwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJvZHlfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9ib2R5X3BuZy5qcyc7XHJcbmltcG9ydCBkb29yX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvZG9vcl9wbmcuanMnO1xyXG5pbXBvcnQgZmxvb3JfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9mbG9vcl9wbmcuanMnO1xyXG5pbXBvcnQgcnVnX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvcnVnX3BuZy5qcyc7XHJcbmltcG9ydCB3YWxscGFwZXJfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy93YWxscGFwZXJfcG5nLmpzJztcclxuaW1wb3J0IHdpbmRvd19wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL3dpbmRvd19wbmcuanMnO1xyXG5pbXBvcnQgam9oblRyYXZvbHRhZ2UgZnJvbSAnLi4vLi4vam9oblRyYXZvbHRhZ2UuanMnO1xyXG5cclxuY2xhc3MgQmFja2dyb3VuZE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgcGlja2FibGU6IGZhbHNlLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vd2FsbHBhcGVyc1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFJlY3RhbmdsZSggLTEwMDAsIC0zMDAsIDMwMDAsIDExMDAsIHtcclxuICAgICAgZmlsbDogbmV3IFBhdHRlcm4oIHdhbGxwYXBlcl9wbmcgKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnd2FsbHBhcGVyJyApXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIFdpbmRvdyBpbWFnZVxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IEltYWdlKCB3aW5kb3dfcG5nLCB7XHJcbiAgICAgIHg6IDUwLFxyXG4gICAgICB5OiA2MCxcclxuICAgICAgc2NhbGU6IDAuOTMsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3dpbmRvdycgKVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBmbG9vciBpbWFnZVxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFJlY3RhbmdsZSggLTEwMDAsIDQ0MCwgMzAwMCwgMTEwMCwge1xyXG4gICAgICBmaWxsOiBuZXcgUGF0dGVybiggZmxvb3JfcG5nICksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Zsb29yJyApXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIHJ1ZyBpbWFnZVxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IEltYWdlKCBydWdfcG5nLCB7XHJcbiAgICAgIHg6IDExMCxcclxuICAgICAgeTogNDQ2LFxyXG4gICAgICBzY2FsZTogMC41OCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncnVnJyApXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIGRvb3IgaW1hZ2VcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBJbWFnZSggZG9vcl9wbmcsIHtcclxuICAgICAgeDogNTEzLjUsXHJcbiAgICAgIHk6IDQ4LFxyXG4gICAgICBzY2FsZTogMC43ODUsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Rvb3InIClcclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIGFkZCB0aGUgYm9keSBpbWFnZVxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IEltYWdlKCBib2R5X3BuZywge1xyXG4gICAgICB4OiAyNjAsXHJcbiAgICAgIHk6IDYwLFxyXG4gICAgICBzY2FsZTogMC44NSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYm9keScgKVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5qb2huVHJhdm9sdGFnZS5yZWdpc3RlciggJ0JhY2tncm91bmROb2RlJywgQmFja2dyb3VuZE5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJhY2tncm91bmROb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsUUFBUSxtQ0FBbUM7QUFDbkYsT0FBT0MsUUFBUSxNQUFNLDZCQUE2QjtBQUNsRCxPQUFPQyxRQUFRLE1BQU0sNkJBQTZC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