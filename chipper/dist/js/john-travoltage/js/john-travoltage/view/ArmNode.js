// Copyright 2021-2022, University of Colorado Boulder

/**
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import LinearFunction from '../../../../dot/js/LinearFunction.js';
import merge from '../../../../phet-core/js/merge.js';
import arm_png from '../../../images/arm_png.js';
import johnTravoltage from '../../johnTravoltage.js';
import JohnTravoltageStrings from '../../JohnTravoltageStrings.js';
import AppendageRangeMaps from '../AppendageRangeMaps.js';
import AppendageNode from './AppendageNode.js';

// constants
const handInteractionHintString = JohnTravoltageStrings.a11y.voicing.handInteractionHint;
const appendageArmLabelString = JohnTravoltageStrings.a11y.appendages.arm.label;
class ArmNode extends AppendageNode {
  /**
   * @param {Arm} armModel
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(armModel, tandem, options) {
    options = merge({
      // pdom
      labelContent: appendageArmLabelString,
      // voicing
      voicingNameResponse: appendageArmLabelString,
      voicingHintResponse: handInteractionHintString
    }, options);
    const angleToPDOMValueFunction = new LinearFunction(armModel.angleProperty.range.max, armModel.angleProperty.range.min, -15, 15);
    super(armModel, arm_png, 4, 45, -0.1, AppendageRangeMaps.armMap, angleToPDOMValueFunction, tandem, options);

    // @public (a11y) - {number} arm position value when discharge starts
    this.positionAtDischarge = null;
    this.sliderProperty.lazyLink(() => this.voicingSpeakObjectResponse());
  }
}
johnTravoltage.register('ArmNode', ArmNode);
export default ArmNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lYXJGdW5jdGlvbiIsIm1lcmdlIiwiYXJtX3BuZyIsImpvaG5UcmF2b2x0YWdlIiwiSm9oblRyYXZvbHRhZ2VTdHJpbmdzIiwiQXBwZW5kYWdlUmFuZ2VNYXBzIiwiQXBwZW5kYWdlTm9kZSIsImhhbmRJbnRlcmFjdGlvbkhpbnRTdHJpbmciLCJhMTF5Iiwidm9pY2luZyIsImhhbmRJbnRlcmFjdGlvbkhpbnQiLCJhcHBlbmRhZ2VBcm1MYWJlbFN0cmluZyIsImFwcGVuZGFnZXMiLCJhcm0iLCJsYWJlbCIsIkFybU5vZGUiLCJjb25zdHJ1Y3RvciIsImFybU1vZGVsIiwidGFuZGVtIiwib3B0aW9ucyIsImxhYmVsQ29udGVudCIsInZvaWNpbmdOYW1lUmVzcG9uc2UiLCJ2b2ljaW5nSGludFJlc3BvbnNlIiwiYW5nbGVUb1BET01WYWx1ZUZ1bmN0aW9uIiwiYW5nbGVQcm9wZXJ0eSIsInJhbmdlIiwibWF4IiwibWluIiwiYXJtTWFwIiwicG9zaXRpb25BdERpc2NoYXJnZSIsInNsaWRlclByb3BlcnR5IiwibGF6eUxpbmsiLCJ2b2ljaW5nU3BlYWtPYmplY3RSZXNwb25zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXJtTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTGluZWFyRnVuY3Rpb24gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0xpbmVhckZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBhcm1fcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9hcm1fcG5nLmpzJztcclxuaW1wb3J0IGpvaG5UcmF2b2x0YWdlIGZyb20gJy4uLy4uL2pvaG5UcmF2b2x0YWdlLmpzJztcclxuaW1wb3J0IEpvaG5UcmF2b2x0YWdlU3RyaW5ncyBmcm9tICcuLi8uLi9Kb2huVHJhdm9sdGFnZVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQXBwZW5kYWdlUmFuZ2VNYXBzIGZyb20gJy4uL0FwcGVuZGFnZVJhbmdlTWFwcy5qcyc7XHJcbmltcG9ydCBBcHBlbmRhZ2VOb2RlIGZyb20gJy4vQXBwZW5kYWdlTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgaGFuZEludGVyYWN0aW9uSGludFN0cmluZyA9IEpvaG5UcmF2b2x0YWdlU3RyaW5ncy5hMTF5LnZvaWNpbmcuaGFuZEludGVyYWN0aW9uSGludDtcclxuY29uc3QgYXBwZW5kYWdlQXJtTGFiZWxTdHJpbmcgPSBKb2huVHJhdm9sdGFnZVN0cmluZ3MuYTExeS5hcHBlbmRhZ2VzLmFybS5sYWJlbDtcclxuXHJcbmNsYXNzIEFybU5vZGUgZXh0ZW5kcyBBcHBlbmRhZ2VOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtBcm19IGFybU1vZGVsXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYXJtTW9kZWwsIHRhbmRlbSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgbGFiZWxDb250ZW50OiBhcHBlbmRhZ2VBcm1MYWJlbFN0cmluZyxcclxuXHJcbiAgICAgIC8vIHZvaWNpbmdcclxuICAgICAgdm9pY2luZ05hbWVSZXNwb25zZTogYXBwZW5kYWdlQXJtTGFiZWxTdHJpbmcsXHJcbiAgICAgIHZvaWNpbmdIaW50UmVzcG9uc2U6IGhhbmRJbnRlcmFjdGlvbkhpbnRTdHJpbmdcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBhbmdsZVRvUERPTVZhbHVlRnVuY3Rpb24gPSBuZXcgTGluZWFyRnVuY3Rpb24oIGFybU1vZGVsLmFuZ2xlUHJvcGVydHkucmFuZ2UubWF4LCBhcm1Nb2RlbC5hbmdsZVByb3BlcnR5LnJhbmdlLm1pbiwgLTE1LCAxNSApO1xyXG4gICAgc3VwZXIoIGFybU1vZGVsLCBhcm1fcG5nLCA0LCA0NSwgLTAuMSwgQXBwZW5kYWdlUmFuZ2VNYXBzLmFybU1hcCwgYW5nbGVUb1BET01WYWx1ZUZ1bmN0aW9uLCB0YW5kZW0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChhMTF5KSAtIHtudW1iZXJ9IGFybSBwb3NpdGlvbiB2YWx1ZSB3aGVuIGRpc2NoYXJnZSBzdGFydHNcclxuICAgIHRoaXMucG9zaXRpb25BdERpc2NoYXJnZSA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5zbGlkZXJQcm9wZXJ0eS5sYXp5TGluayggKCkgPT4gdGhpcy52b2ljaW5nU3BlYWtPYmplY3RSZXNwb25zZSgpICk7XHJcbiAgfVxyXG59XHJcblxyXG5qb2huVHJhdm9sdGFnZS5yZWdpc3RlciggJ0FybU5vZGUnLCBBcm1Ob2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IEFybU5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSxzQ0FBc0M7QUFDakUsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBQ2xFLE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQUN6RCxPQUFPQyxhQUFhLE1BQU0sb0JBQW9COztBQUU5QztBQUNBLE1BQU1DLHlCQUF5QixHQUFHSCxxQkFBcUIsQ0FBQ0ksSUFBSSxDQUFDQyxPQUFPLENBQUNDLG1CQUFtQjtBQUN4RixNQUFNQyx1QkFBdUIsR0FBR1AscUJBQXFCLENBQUNJLElBQUksQ0FBQ0ksVUFBVSxDQUFDQyxHQUFHLENBQUNDLEtBQUs7QUFFL0UsTUFBTUMsT0FBTyxTQUFTVCxhQUFhLENBQUM7RUFFbEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFVSxXQUFXQSxDQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0lBRXZDQSxPQUFPLEdBQUdsQixLQUFLLENBQUU7TUFFZjtNQUNBbUIsWUFBWSxFQUFFVCx1QkFBdUI7TUFFckM7TUFDQVUsbUJBQW1CLEVBQUVWLHVCQUF1QjtNQUM1Q1csbUJBQW1CLEVBQUVmO0lBQ3ZCLENBQUMsRUFBRVksT0FBUSxDQUFDO0lBRVosTUFBTUksd0JBQXdCLEdBQUcsSUFBSXZCLGNBQWMsQ0FBRWlCLFFBQVEsQ0FBQ08sYUFBYSxDQUFDQyxLQUFLLENBQUNDLEdBQUcsRUFBRVQsUUFBUSxDQUFDTyxhQUFhLENBQUNDLEtBQUssQ0FBQ0UsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUcsQ0FBQztJQUNsSSxLQUFLLENBQUVWLFFBQVEsRUFBRWYsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUVHLGtCQUFrQixDQUFDdUIsTUFBTSxFQUFFTCx3QkFBd0IsRUFBRUwsTUFBTSxFQUFFQyxPQUFRLENBQUM7O0lBRTdHO0lBQ0EsSUFBSSxDQUFDVSxtQkFBbUIsR0FBRyxJQUFJO0lBRS9CLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxRQUFRLENBQUUsTUFBTSxJQUFJLENBQUNDLDBCQUEwQixDQUFDLENBQUUsQ0FBQztFQUN6RTtBQUNGO0FBRUE3QixjQUFjLENBQUM4QixRQUFRLENBQUUsU0FBUyxFQUFFbEIsT0FBUSxDQUFDO0FBQzdDLGVBQWVBLE9BQU8ifQ==