// Copyright 2020-2022, University of Colorado Boulder

/**
 * Node that holds the PDOM content for the screen summary in the Create screen. It also creates content for the voicing
 * overview buttons as appropriate.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import { Node } from '../../../../scenery/js/imports.js';
import ratioAndProportion from '../../ratioAndProportion.js';
import RatioAndProportionStrings from '../../RatioAndProportionStrings.js';
import BackgroundColorHandler from '../../common/view/BackgroundColorHandler.js';
import Multilink from '../../../../axon/js/Multilink.js';
class CreateScreenSummaryNode extends Node {
  constructor(ratioFitnessProperty, ratioTupleProperty, tickMarkViewProperty, ratioDescriber, inProportionProperty, handPositionsDescriber, tickMarkRangeProperty, myChallengeAccordionBox) {
    const stateOfSimNode = new Node({
      tagName: 'p'
    });
    const leftHandBullet = new Node({
      tagName: 'li'
    });
    const rightHandBullet = new Node({
      tagName: 'li'
    });
    const currentChallengeBullet = new Node({
      tagName: 'li'
    });
    const descriptionBullets = new Node({
      tagName: 'ul',
      children: [leftHandBullet, rightHandBullet]
    });
    super({
      children: [new Node({
        tagName: 'p',
        innerContent: RatioAndProportionStrings.a11y.create.screenSummary.paragraph1StringProperty
      }), new Node({
        tagName: 'p',
        innerContent: RatioAndProportionStrings.a11y.create.screenSummary.paragraph2StringProperty
      }), new Node({
        tagName: 'p',
        innerContent: RatioAndProportionStrings.a11y.screenSummaryControlAreaParagraphStringProperty
      }), stateOfSimNode, descriptionBullets, new Node({
        tagName: 'p',
        innerContent: RatioAndProportionStrings.a11y.create.screenSummary.interactionHintStringProperty
      })]
    });
    this.handPositionsDescriber = handPositionsDescriber;
    this.ratioDescriber = ratioDescriber;
    this.tickMarkViewProperty = tickMarkViewProperty;
    this.ratioTupleProperty = ratioTupleProperty;
    this.ratioFitnessProperty = ratioFitnessProperty;
    this.inProportionProperty = inProportionProperty;
    this.myChallengeAccordionBox = myChallengeAccordionBox;
    myChallengeAccordionBox.expandedProperty.link(expanded => {
      if (expanded) {
        descriptionBullets.addChild(currentChallengeBullet);
      } else if (descriptionBullets.hasChild(currentChallengeBullet)) {
        descriptionBullets.removeChild(currentChallengeBullet);
      }
    });
    Multilink.multilink([tickMarkViewProperty, myChallengeAccordionBox.targetAntecedentProperty, myChallengeAccordionBox.targetConsequentProperty, ratioTupleProperty, ratioFitnessProperty, inProportionProperty, tickMarkRangeProperty], () => {
      stateOfSimNode.innerContent = this.getStateOfSim();
      leftHandBullet.innerContent = this.getLeftHandState();
      rightHandBullet.innerContent = this.getRightHandState();
      currentChallengeBullet.innerContent = this.getCurrentChallengeState();
    });
  }
  getStateOfSim(currentChallenge = RatioAndProportionStrings.a11y.create.challengeStringProperty) {
    // TODO: PatternStringProperty when time, https://github.com/phetsims/ratio-and-proportion/issues/499
    return StringUtils.fillIn(RatioAndProportionStrings.a11y.screenSummaryQualitativeStateOfSimStringProperty, {
      color: BackgroundColorHandler.getCurrentColorRegion(this.ratioFitnessProperty.value, this.inProportionProperty.value),
      ratioFitness: this.ratioDescriber.getRatioFitness(false),
      currentChallenge: currentChallenge,
      distance: this.handPositionsDescriber.getDistanceRegion(true)
    });
  }
  getLeftHandState() {
    // TODO: PatternStringProperty when time, https://github.com/phetsims/ratio-and-proportion/issues/499
    return StringUtils.fillIn(RatioAndProportionStrings.a11y.leftHandBulletStringProperty, {
      position: this.handPositionsDescriber.getHandPositionDescription(this.ratioTupleProperty.value.antecedent, this.tickMarkViewProperty.value)
    });
  }
  getRightHandState() {
    // TODO: PatternStringProperty when time, https://github.com/phetsims/ratio-and-proportion/issues/499
    return StringUtils.fillIn(RatioAndProportionStrings.a11y.rightHandBulletStringProperty, {
      position: this.handPositionsDescriber.getHandPositionDescription(this.ratioTupleProperty.value.consequent, this.tickMarkViewProperty.value)
    });
  }
  getCurrentChallengeState() {
    return this.ratioDescriber.getCurrentChallengeSentence(this.myChallengeAccordionBox.targetAntecedentProperty.value, this.myChallengeAccordionBox.targetConsequentProperty.value);
  }
  getDetailsButtonState() {
    const patternStringProperty = this.myChallengeAccordionBox.expandedProperty.value ? RatioAndProportionStrings.a11y.detailsButtonWithCurrentChallengePatternStringProperty : RatioAndProportionStrings.a11y.detailsButtonPatternStringProperty;
    // TODO: PatternStringProperty when time, https://github.com/phetsims/ratio-and-proportion/issues/499
    return StringUtils.fillIn(patternStringProperty, {
      stateOfSim: this.getStateOfSim(),
      leftHand: this.getLeftHandState(),
      rightHand: this.getRightHandState(),
      currentChallenge: this.getCurrentChallengeState()
    });
  }
}
ratioAndProportion.register('CreateScreenSummaryNode', CreateScreenSummaryNode);
export default CreateScreenSummaryNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,