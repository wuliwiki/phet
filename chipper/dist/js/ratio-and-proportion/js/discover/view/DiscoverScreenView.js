// Copyright 2020-2022, University of Colorado Boulder

/**
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Property from '../../../../axon/js/Property.js';
import { Color, Node } from '../../../../scenery/js/imports.js';
import RAPScreenView from '../../common/view/RAPScreenView.js';
import ratioAndProportion from '../../ratioAndProportion.js';
import RatioAndProportionStrings from '../../RatioAndProportionStrings.js';
import ChallengeRatioComboBoxNode from './ChallengeRatioComboBoxNode.js';
import DiscoverScreenSummaryNode from './DiscoverScreenSummaryNode.js';
import HandPositionsDescriber from '../../common/view/describers/HandPositionsDescriber.js';
import TickMarkDescriber from '../../common/view/describers/TickMarkDescriber.js';
class DiscoverScreenView extends RAPScreenView {
  constructor(model, backgroundColorProperty, tandem) {
    // For this screen, one Property controls the color of both hands.
    const handColorProperty = new Property(Color.BLACK);
    super(model, backgroundColorProperty, {
      leftHandColorProperty: handColorProperty,
      rightHandColorProperty: handColorProperty,
      bothHandsPDOMNodeOptions: {
        gestureDescriptionHelpText: RatioAndProportionStrings.a11y.discover.bothHandsGestureDescriptionHelpTextStringProperty
      },
      tandem: tandem
    });
    const comboBoxListBoxParent = new Node();
    this.comboBoxContainer = new ChallengeRatioComboBoxNode(model.targetRatioProperty, this.ratioDescriber, handColorProperty, comboBoxListBoxParent, tandem.createTandem('myChallengeComboBox'));
    this.topScalingUILayerNode.addChild(this.comboBoxContainer);

    // Should be on top. Don't scale it because that messes with the scaling that the list box goes through, and changes
    // the dimensions of the scalingUILayerNode to make it too big. Discovered in https://github.com/phetsims/ratio-and-proportion/issues/273
    this.addChild(comboBoxListBoxParent);
    this.pdomPlayAreaNode.pdomOrder = this.pdomPlayAreaNode.pdomOrder.concat([this.comboBoxContainer, comboBoxListBoxParent]);
    const handPositionsDescriber = new HandPositionsDescriber(model.ratio.tupleProperty, new TickMarkDescriber(this.tickMarkRangeProperty, this.tickMarkViewProperty), model.inProportionProperty, model.ratio.enabledRatioTermsRangeProperty, model.ratio.lockedProperty);

    // set this after the supertype has initialized the view code needed to create the screen summary
    this.discoverScreenSummaryNode = new DiscoverScreenSummaryNode(model.ratioFitnessProperty, model.ratio.tupleProperty, model.targetRatioProperty, this.tickMarkViewProperty, this.ratioDescriber, model.inProportionProperty, handPositionsDescriber, this.comboBoxContainer.ratioToChallengeInfoMap);
    this.setScreenSummaryContent(this.discoverScreenSummaryNode);
    this.resetDiscoverScreenView = () => {
      handPositionsDescriber.reset();
    };
  }
  reset() {
    this.resetDiscoverScreenView();
    super.reset();
  }
  layout(bounds) {
    this.comboBoxContainer.hideListBox(); // hidden when layout changes, see https://github.com/phetsims/ratio-and-proportion/issues/324
    super.layout(bounds);
  }
  getVoicingOverviewContent() {
    return RatioAndProportionStrings.a11y.discover.overviewSentenceStringProperty;
  }
  getVoicingDetailsContent() {
    return this.discoverScreenSummaryNode.getDetailsButtonState();
  }
  getVoicingHintContent() {
    return RatioAndProportionStrings.a11y.discover.screenSummary.interactionHintStringProperty;
  }
}
ratioAndProportion.register('DiscoverScreenView', DiscoverScreenView);
export default DiscoverScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,