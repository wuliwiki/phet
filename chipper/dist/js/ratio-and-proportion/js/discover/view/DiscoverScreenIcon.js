// Copyright 2020-2022, University of Colorado Boulder

/**
 * The icon displayed on the HomeScreen for the Discover Screen
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import ScreenIcon from '../../../../joist/js/ScreenIcon.js';
import { HBox, Rectangle, VBox } from '../../../../scenery/js/imports.js';
import RAPColors from '../../common/view/RAPColors.js';
import RatioHandNode from '../../common/view/RatioHandNode.js';
import TickMarkView from '../../common/view/TickMarkView.js';
import ratioAndProportion from '../../ratioAndProportion.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
class DiscoverScreenIcon extends ScreenIcon {
  constructor(providedOptions) {
    const options = optionize()({
      fill: 'white',
      handColor: RAPColors.discoverChallenge1Property.value
    }, providedOptions);
    const tickMarksHiddenProperty = new EnumerationProperty(TickMarkView.NONE);
    const ratioHandNodeOptions = {
      handColor: options.handColor
    };
    const leftNode = new VBox({
      children: [new Rectangle(0, 0, 1, 15, {
        opacity: 0
      }), RatioHandNode.createIcon(false, tickMarksHiddenProperty, ratioHandNodeOptions)]
    });
    const rightNode = new VBox({
      children: [RatioHandNode.createIcon(true, tickMarksHiddenProperty, ratioHandNodeOptions), new Rectangle(0, 0, 1, 15, {
        opacity: 0
      })]
    });
    super(new HBox({
      spacing: 10,
      children: [leftNode, rightNode]
    }), options);
  }
}
ratioAndProportion.register('DiscoverScreenIcon', DiscoverScreenIcon);
export default DiscoverScreenIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW5JY29uIiwiSEJveCIsIlJlY3RhbmdsZSIsIlZCb3giLCJSQVBDb2xvcnMiLCJSYXRpb0hhbmROb2RlIiwiVGlja01hcmtWaWV3IiwicmF0aW9BbmRQcm9wb3J0aW9uIiwiRW51bWVyYXRpb25Qcm9wZXJ0eSIsIm9wdGlvbml6ZSIsIkRpc2NvdmVyU2NyZWVuSWNvbiIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImZpbGwiLCJoYW5kQ29sb3IiLCJkaXNjb3ZlckNoYWxsZW5nZTFQcm9wZXJ0eSIsInZhbHVlIiwidGlja01hcmtzSGlkZGVuUHJvcGVydHkiLCJOT05FIiwicmF0aW9IYW5kTm9kZU9wdGlvbnMiLCJsZWZ0Tm9kZSIsImNoaWxkcmVuIiwib3BhY2l0eSIsImNyZWF0ZUljb24iLCJyaWdodE5vZGUiLCJzcGFjaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaXNjb3ZlclNjcmVlbkljb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIGljb24gZGlzcGxheWVkIG9uIHRoZSBIb21lU2NyZWVuIGZvciB0aGUgRGlzY292ZXIgU2NyZWVuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuSWNvbiwgeyBTY3JlZW5JY29uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgSEJveCwgUmVjdGFuZ2xlLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJBUENvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9SQVBDb2xvcnMuanMnO1xyXG5pbXBvcnQgUmF0aW9IYW5kTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9SYXRpb0hhbmROb2RlLmpzJztcclxuaW1wb3J0IFRpY2tNYXJrVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9UaWNrTWFya1ZpZXcuanMnO1xyXG5pbXBvcnQgcmF0aW9BbmRQcm9wb3J0aW9uIGZyb20gJy4uLy4uL3JhdGlvQW5kUHJvcG9ydGlvbi5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGhhbmRDb2xvcj86IENvbG9yO1xyXG59O1xyXG5cclxuY2xhc3MgRGlzY292ZXJTY3JlZW5JY29uIGV4dGVuZHMgU2NyZWVuSWNvbiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogU2NyZWVuSWNvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxTY3JlZW5JY29uT3B0aW9ucywgU2VsZk9wdGlvbnMsIFNjcmVlbkljb25PcHRpb25zPigpKCB7XHJcbiAgICAgIGZpbGw6ICd3aGl0ZScsXHJcbiAgICAgIGhhbmRDb2xvcjogUkFQQ29sb3JzLmRpc2NvdmVyQ2hhbGxlbmdlMVByb3BlcnR5LnZhbHVlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB0aWNrTWFya3NIaWRkZW5Qcm9wZXJ0eSA9IG5ldyBFbnVtZXJhdGlvblByb3BlcnR5KCBUaWNrTWFya1ZpZXcuTk9ORSApO1xyXG5cclxuICAgIGNvbnN0IHJhdGlvSGFuZE5vZGVPcHRpb25zID0geyBoYW5kQ29sb3I6IG9wdGlvbnMuaGFuZENvbG9yIH07XHJcblxyXG4gICAgY29uc3QgbGVmdE5vZGUgPSBuZXcgVkJveCgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBSZWN0YW5nbGUoIDAsIDAsIDEsIDE1LCB7IG9wYWNpdHk6IDAgfSApLFxyXG4gICAgICAgIFJhdGlvSGFuZE5vZGUuY3JlYXRlSWNvbiggZmFsc2UsIHRpY2tNYXJrc0hpZGRlblByb3BlcnR5LCByYXRpb0hhbmROb2RlT3B0aW9ucyApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCByaWdodE5vZGUgPSBuZXcgVkJveCgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIFJhdGlvSGFuZE5vZGUuY3JlYXRlSWNvbiggdHJ1ZSwgdGlja01hcmtzSGlkZGVuUHJvcGVydHksIHJhdGlvSGFuZE5vZGVPcHRpb25zICksXHJcbiAgICAgICAgbmV3IFJlY3RhbmdsZSggMCwgMCwgMSwgMTUsIHsgb3BhY2l0eTogMCB9IClcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiAxMCxcclxuICAgICAgY2hpbGRyZW46IFsgbGVmdE5vZGUsIHJpZ2h0Tm9kZSBdXHJcbiAgICB9ICksIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnJhdGlvQW5kUHJvcG9ydGlvbi5yZWdpc3RlciggJ0Rpc2NvdmVyU2NyZWVuSWNvbicsIERpc2NvdmVyU2NyZWVuSWNvbiApO1xyXG5leHBvcnQgZGVmYXVsdCBEaXNjb3ZlclNjcmVlbkljb247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBNkIsb0NBQW9DO0FBQ2xGLFNBQWdCQyxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNoRixPQUFPQyxTQUFTLE1BQU0sZ0NBQWdDO0FBQ3RELE9BQU9DLGFBQWEsTUFBTSxvQ0FBb0M7QUFDOUQsT0FBT0MsWUFBWSxNQUFNLG1DQUFtQztBQUM1RCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsbUJBQW1CLE1BQU0sNENBQTRDO0FBQzVFLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFNN0QsTUFBTUMsa0JBQWtCLFNBQVNWLFVBQVUsQ0FBQztFQUVuQ1csV0FBV0EsQ0FBRUMsZUFBbUMsRUFBRztJQUV4RCxNQUFNQyxPQUFPLEdBQUdKLFNBQVMsQ0FBb0QsQ0FBQyxDQUFFO01BQzlFSyxJQUFJLEVBQUUsT0FBTztNQUNiQyxTQUFTLEVBQUVYLFNBQVMsQ0FBQ1ksMEJBQTBCLENBQUNDO0lBQ2xELENBQUMsRUFBRUwsZUFBZ0IsQ0FBQztJQUVwQixNQUFNTSx1QkFBdUIsR0FBRyxJQUFJVixtQkFBbUIsQ0FBRUYsWUFBWSxDQUFDYSxJQUFLLENBQUM7SUFFNUUsTUFBTUMsb0JBQW9CLEdBQUc7TUFBRUwsU0FBUyxFQUFFRixPQUFPLENBQUNFO0lBQVUsQ0FBQztJQUU3RCxNQUFNTSxRQUFRLEdBQUcsSUFBSWxCLElBQUksQ0FBRTtNQUN6Qm1CLFFBQVEsRUFBRSxDQUNSLElBQUlwQixTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQUVxQixPQUFPLEVBQUU7TUFBRSxDQUFFLENBQUMsRUFDNUNsQixhQUFhLENBQUNtQixVQUFVLENBQUUsS0FBSyxFQUFFTix1QkFBdUIsRUFBRUUsb0JBQXFCLENBQUM7SUFFcEYsQ0FBRSxDQUFDO0lBRUgsTUFBTUssU0FBUyxHQUFHLElBQUl0QixJQUFJLENBQUU7TUFDMUJtQixRQUFRLEVBQUUsQ0FDUmpCLGFBQWEsQ0FBQ21CLFVBQVUsQ0FBRSxJQUFJLEVBQUVOLHVCQUF1QixFQUFFRSxvQkFBcUIsQ0FBQyxFQUMvRSxJQUFJbEIsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtRQUFFcUIsT0FBTyxFQUFFO01BQUUsQ0FBRSxDQUFDO0lBRWhELENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRSxJQUFJdEIsSUFBSSxDQUFFO01BQ2Z5QixPQUFPLEVBQUUsRUFBRTtNQUNYSixRQUFRLEVBQUUsQ0FBRUQsUUFBUSxFQUFFSSxTQUFTO0lBQ2pDLENBQUUsQ0FBQyxFQUFFWixPQUFRLENBQUM7RUFDaEI7QUFDRjtBQUVBTixrQkFBa0IsQ0FBQ29CLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRWpCLGtCQUFtQixDQUFDO0FBQ3ZFLGVBQWVBLGtCQUFrQiJ9