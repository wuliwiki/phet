// Copyright 2022-2023, University of Colorado Boulder

/**
 * A small class that manages a list of values, updating it to maintain a max size, and determining if the values are
 * close enough together to be considered "stationary". This calculation is reflected in this.isStationaryProperty.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import ratioAndProportion from '../../ratioAndProportion.js';
import Stats from '../../../../dot/js/Stats.js';
import handleSmoothValue from './handleSmoothValue.js';
import optionize from '../../../../phet-core/js/optionize.js';

// A single array to prevent garbage each time we calculate the box plot
const boxPlotTempArray = [];
class StationaryValueTracker {
  isStationaryProperty = new BooleanProperty(false);
  historyValues = [];
  constructor(providedOptions) {
    const options = optionize()({
      // Number of previous positions to keep to determine if the position is "stationary" (adjusting for jitter)
      historyLength: 20,
      // the position range is between 0 and 1, this value is the absolut value of the difference between first and third
      // quartiles of the history. If less than this value, then the hands are considered stationary.
      stationaryThreshold: 0.01
    }, providedOptions);
    this.historyLength = options.historyLength;
    this.stationaryThreshold = options.stationaryThreshold;
  }
  update(newPosition) {
    this.isStationaryProperty.value = this.isStationary(newPosition);
  }
  isStationary(newPosition) {
    // Keep the array in sync without using the smoothing function
    handleSmoothValue(newPosition, this.historyValues, this.historyLength, _.identity);

    // A box plot needs >=4 values to calculate
    if (this.historyValues.length < 4) {
      return false;
    }
    boxPlotTempArray.length = 0;
    for (let i = 0; i < this.historyValues.length; i++) {
      boxPlotTempArray.push(this.historyValues[i]);
    }
    const boxPlotValues = Stats.getBoxPlotValues(boxPlotTempArray);
    return Math.abs(boxPlotValues.q3 - boxPlotValues.q1) < this.stationaryThreshold;
  }
}
ratioAndProportion.register('StationaryValueTracker', StationaryValueTracker);
export default StationaryValueTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJyYXRpb0FuZFByb3BvcnRpb24iLCJTdGF0cyIsImhhbmRsZVNtb290aFZhbHVlIiwib3B0aW9uaXplIiwiYm94UGxvdFRlbXBBcnJheSIsIlN0YXRpb25hcnlWYWx1ZVRyYWNrZXIiLCJpc1N0YXRpb25hcnlQcm9wZXJ0eSIsImhpc3RvcnlWYWx1ZXMiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJoaXN0b3J5TGVuZ3RoIiwic3RhdGlvbmFyeVRocmVzaG9sZCIsInVwZGF0ZSIsIm5ld1Bvc2l0aW9uIiwidmFsdWUiLCJpc1N0YXRpb25hcnkiLCJfIiwiaWRlbnRpdHkiLCJsZW5ndGgiLCJpIiwicHVzaCIsImJveFBsb3RWYWx1ZXMiLCJnZXRCb3hQbG90VmFsdWVzIiwiTWF0aCIsImFicyIsInEzIiwicTEiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN0YXRpb25hcnlWYWx1ZVRyYWNrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBzbWFsbCBjbGFzcyB0aGF0IG1hbmFnZXMgYSBsaXN0IG9mIHZhbHVlcywgdXBkYXRpbmcgaXQgdG8gbWFpbnRhaW4gYSBtYXggc2l6ZSwgYW5kIGRldGVybWluaW5nIGlmIHRoZSB2YWx1ZXMgYXJlXHJcbiAqIGNsb3NlIGVub3VnaCB0b2dldGhlciB0byBiZSBjb25zaWRlcmVkIFwic3RhdGlvbmFyeVwiLiBUaGlzIGNhbGN1bGF0aW9uIGlzIHJlZmxlY3RlZCBpbiB0aGlzLmlzU3RhdGlvbmFyeVByb3BlcnR5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCByYXRpb0FuZFByb3BvcnRpb24gZnJvbSAnLi4vLi4vcmF0aW9BbmRQcm9wb3J0aW9uLmpzJztcclxuaW1wb3J0IFN0YXRzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9TdGF0cy5qcyc7XHJcbmltcG9ydCBoYW5kbGVTbW9vdGhWYWx1ZSBmcm9tICcuL2hhbmRsZVNtb290aFZhbHVlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbi8vIEEgc2luZ2xlIGFycmF5IHRvIHByZXZlbnQgZ2FyYmFnZSBlYWNoIHRpbWUgd2UgY2FsY3VsYXRlIHRoZSBib3ggcGxvdFxyXG5jb25zdCBib3hQbG90VGVtcEFycmF5OiBudW1iZXJbXSA9IFtdO1xyXG5cclxudHlwZSBTdGF0aW9uYXJ5VmFsdWVUcmFja2VyT3B0aW9ucyA9IHtcclxuICBoaXN0b3J5TGVuZ3RoPzogbnVtYmVyO1xyXG4gIHN0YXRpb25hcnlUaHJlc2hvbGQ/OiBudW1iZXI7XHJcbn07XHJcblxyXG5jbGFzcyBTdGF0aW9uYXJ5VmFsdWVUcmFja2VyIHtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNTdGF0aW9uYXJ5UHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgaGlzdG9yeVZhbHVlcyA9IFtdO1xyXG4gIHB1YmxpYyByZWFkb25seSBoaXN0b3J5TGVuZ3RoOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHN0YXRpb25hcnlUaHJlc2hvbGQ6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBTdGF0aW9uYXJ5VmFsdWVUcmFja2VyT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFN0YXRpb25hcnlWYWx1ZVRyYWNrZXJPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBOdW1iZXIgb2YgcHJldmlvdXMgcG9zaXRpb25zIHRvIGtlZXAgdG8gZGV0ZXJtaW5lIGlmIHRoZSBwb3NpdGlvbiBpcyBcInN0YXRpb25hcnlcIiAoYWRqdXN0aW5nIGZvciBqaXR0ZXIpXHJcbiAgICAgIGhpc3RvcnlMZW5ndGg6IDIwLFxyXG5cclxuICAgICAgLy8gdGhlIHBvc2l0aW9uIHJhbmdlIGlzIGJldHdlZW4gMCBhbmQgMSwgdGhpcyB2YWx1ZSBpcyB0aGUgYWJzb2x1dCB2YWx1ZSBvZiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGZpcnN0IGFuZCB0aGlyZFxyXG4gICAgICAvLyBxdWFydGlsZXMgb2YgdGhlIGhpc3RvcnkuIElmIGxlc3MgdGhhbiB0aGlzIHZhbHVlLCB0aGVuIHRoZSBoYW5kcyBhcmUgY29uc2lkZXJlZCBzdGF0aW9uYXJ5LlxyXG4gICAgICBzdGF0aW9uYXJ5VGhyZXNob2xkOiAwLjAxXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmhpc3RvcnlMZW5ndGggPSBvcHRpb25zLmhpc3RvcnlMZW5ndGg7XHJcbiAgICB0aGlzLnN0YXRpb25hcnlUaHJlc2hvbGQgPSBvcHRpb25zLnN0YXRpb25hcnlUaHJlc2hvbGQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlKCBuZXdQb3NpdGlvbjogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgdGhpcy5pc1N0YXRpb25hcnlQcm9wZXJ0eS52YWx1ZSA9IHRoaXMuaXNTdGF0aW9uYXJ5KCBuZXdQb3NpdGlvbiApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc1N0YXRpb25hcnkoIG5ld1Bvc2l0aW9uOiBudW1iZXIgKTogYm9vbGVhbiB7XHJcblxyXG4gICAgLy8gS2VlcCB0aGUgYXJyYXkgaW4gc3luYyB3aXRob3V0IHVzaW5nIHRoZSBzbW9vdGhpbmcgZnVuY3Rpb25cclxuICAgIGhhbmRsZVNtb290aFZhbHVlKCBuZXdQb3NpdGlvbiwgdGhpcy5oaXN0b3J5VmFsdWVzLCB0aGlzLmhpc3RvcnlMZW5ndGgsIF8uaWRlbnRpdHkgKTtcclxuXHJcbiAgICAvLyBBIGJveCBwbG90IG5lZWRzID49NCB2YWx1ZXMgdG8gY2FsY3VsYXRlXHJcbiAgICBpZiAoIHRoaXMuaGlzdG9yeVZhbHVlcy5sZW5ndGggPCA0ICkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBib3hQbG90VGVtcEFycmF5Lmxlbmd0aCA9IDA7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmhpc3RvcnlWYWx1ZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIGJveFBsb3RUZW1wQXJyYXkucHVzaCggdGhpcy5oaXN0b3J5VmFsdWVzWyBpIF0gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJveFBsb3RWYWx1ZXMgPSBTdGF0cy5nZXRCb3hQbG90VmFsdWVzKCBib3hQbG90VGVtcEFycmF5ICk7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMoIGJveFBsb3RWYWx1ZXMucTMgLSBib3hQbG90VmFsdWVzLnExICkgPCB0aGlzLnN0YXRpb25hcnlUaHJlc2hvbGQ7XHJcbiAgfVxyXG59XHJcblxyXG5cclxucmF0aW9BbmRQcm9wb3J0aW9uLnJlZ2lzdGVyKCAnU3RhdGlvbmFyeVZhbHVlVHJhY2tlcicsIFN0YXRpb25hcnlWYWx1ZVRyYWNrZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgU3RhdGlvbmFyeVZhbHVlVHJhY2tlcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDOztBQUU3RDtBQUNBLE1BQU1DLGdCQUEwQixHQUFHLEVBQUU7QUFPckMsTUFBTUMsc0JBQXNCLENBQUM7RUFDWEMsb0JBQW9CLEdBQUcsSUFBSVAsZUFBZSxDQUFFLEtBQU0sQ0FBQztFQUNsRFEsYUFBYSxHQUFHLEVBQUU7RUFJNUJDLFdBQVdBLENBQUVDLGVBQStDLEVBQUc7SUFFcEUsTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQWdDLENBQUMsQ0FBRTtNQUUxRDtNQUNBUSxhQUFhLEVBQUUsRUFBRTtNQUVqQjtNQUNBO01BQ0FDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixJQUFJLENBQUNFLGFBQWEsR0FBR0QsT0FBTyxDQUFDQyxhQUFhO0lBQzFDLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUdGLE9BQU8sQ0FBQ0UsbUJBQW1CO0VBQ3hEO0VBRU9DLE1BQU1BLENBQUVDLFdBQW1CLEVBQVM7SUFDekMsSUFBSSxDQUFDUixvQkFBb0IsQ0FBQ1MsS0FBSyxHQUFHLElBQUksQ0FBQ0MsWUFBWSxDQUFFRixXQUFZLENBQUM7RUFDcEU7RUFFUUUsWUFBWUEsQ0FBRUYsV0FBbUIsRUFBWTtJQUVuRDtJQUNBWixpQkFBaUIsQ0FBRVksV0FBVyxFQUFFLElBQUksQ0FBQ1AsYUFBYSxFQUFFLElBQUksQ0FBQ0ksYUFBYSxFQUFFTSxDQUFDLENBQUNDLFFBQVMsQ0FBQzs7SUFFcEY7SUFDQSxJQUFLLElBQUksQ0FBQ1gsYUFBYSxDQUFDWSxNQUFNLEdBQUcsQ0FBQyxFQUFHO01BQ25DLE9BQU8sS0FBSztJQUNkO0lBQ0FmLGdCQUFnQixDQUFDZSxNQUFNLEdBQUcsQ0FBQztJQUMzQixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNiLGFBQWEsQ0FBQ1ksTUFBTSxFQUFFQyxDQUFDLEVBQUUsRUFBRztNQUNwRGhCLGdCQUFnQixDQUFDaUIsSUFBSSxDQUFFLElBQUksQ0FBQ2QsYUFBYSxDQUFFYSxDQUFDLENBQUcsQ0FBQztJQUNsRDtJQUNBLE1BQU1FLGFBQWEsR0FBR3JCLEtBQUssQ0FBQ3NCLGdCQUFnQixDQUFFbkIsZ0JBQWlCLENBQUM7SUFDaEUsT0FBT29CLElBQUksQ0FBQ0MsR0FBRyxDQUFFSCxhQUFhLENBQUNJLEVBQUUsR0FBR0osYUFBYSxDQUFDSyxFQUFHLENBQUMsR0FBRyxJQUFJLENBQUNmLG1CQUFtQjtFQUNuRjtBQUNGO0FBR0FaLGtCQUFrQixDQUFDNEIsUUFBUSxDQUFFLHdCQUF3QixFQUFFdkIsc0JBQXVCLENBQUM7QUFDL0UsZUFBZUEsc0JBQXNCIn0=