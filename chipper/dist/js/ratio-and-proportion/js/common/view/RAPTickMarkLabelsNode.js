// Copyright 2020-2022, University of Colorado Boulder

/**
 * Labels for the ratio tick marks that are centered on the horizontal tick marks.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import ratioAndProportion from '../../ratioAndProportion.js';
import TickMarkView from './TickMarkView.js';
import Multilink from '../../../../axon/js/Multilink.js';
const LABEL_X = 0;
class RAPTickMarkLabelsNode extends Node {
  heightOfText = null;
  constructor(tickMarkViewProperty, tickMarkRangeProperty, height, colorProperty, options) {
    super();
    this.totalHeight = height;
    this.tickMarkViewProperty = tickMarkViewProperty;
    this.tickMarkRangeProperty = tickMarkRangeProperty;
    this.colorProperty = colorProperty;
    this.mutate(options);
    Multilink.multilink([tickMarkRangeProperty, tickMarkViewProperty], this.update.bind(this));
  }

  /**
   * Get the height of a single label Text.
   *
   */
  get labelHeight() {
    assert && assert(this.heightOfText, 'cannot get labelHeight until labels have been drawn');
    return this.heightOfText;
  }
  layout(height) {
    this.totalHeight = height;
    this.update(this.tickMarkRangeProperty.value, this.tickMarkViewProperty.value);
  }
  update(tickMarkRange, tickMarkView) {
    // subtract one to account for potential rounding errors. This helps guarantee that the last line is drawn.
    const horizontalSpacing = (this.totalHeight - 1) / tickMarkRange;
    this.visible = tickMarkView === TickMarkView.VISIBLE_WITH_UNITS;
    this.updateUnitLabels(horizontalSpacing);
  }

  /**
   * Note: will clear all children
   */
  updateUnitLabels(horizontalSpacing) {
    this.children = [];
    let i = 0;
    for (let y = 0; y <= this.totalHeight; y += horizontalSpacing) {
      const text = new Text(i, {
        centerX: LABEL_X,
        font: new PhetFont({
          size: 18,
          weight: 'bold'
        }),
        fill: this.colorProperty,
        centerY: this.totalHeight - y
      });
      this.heightOfText = text.height;
      this.addChild(text);
      i++;
    }
  }
}
ratioAndProportion.register('RAPTickMarkLabelsNode', RAPTickMarkLabelsNode);
export default RAPTickMarkLabelsNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIk5vZGUiLCJUZXh0IiwicmF0aW9BbmRQcm9wb3J0aW9uIiwiVGlja01hcmtWaWV3IiwiTXVsdGlsaW5rIiwiTEFCRUxfWCIsIlJBUFRpY2tNYXJrTGFiZWxzTm9kZSIsImhlaWdodE9mVGV4dCIsImNvbnN0cnVjdG9yIiwidGlja01hcmtWaWV3UHJvcGVydHkiLCJ0aWNrTWFya1JhbmdlUHJvcGVydHkiLCJoZWlnaHQiLCJjb2xvclByb3BlcnR5Iiwib3B0aW9ucyIsInRvdGFsSGVpZ2h0IiwibXV0YXRlIiwibXVsdGlsaW5rIiwidXBkYXRlIiwiYmluZCIsImxhYmVsSGVpZ2h0IiwiYXNzZXJ0IiwibGF5b3V0IiwidmFsdWUiLCJ0aWNrTWFya1JhbmdlIiwidGlja01hcmtWaWV3IiwiaG9yaXpvbnRhbFNwYWNpbmciLCJ2aXNpYmxlIiwiVklTSUJMRV9XSVRIX1VOSVRTIiwidXBkYXRlVW5pdExhYmVscyIsImNoaWxkcmVuIiwiaSIsInkiLCJ0ZXh0IiwiY2VudGVyWCIsImZvbnQiLCJzaXplIiwid2VpZ2h0IiwiZmlsbCIsImNlbnRlclkiLCJhZGRDaGlsZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUkFQVGlja01hcmtMYWJlbHNOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExhYmVscyBmb3IgdGhlIHJhdGlvIHRpY2sgbWFya3MgdGhhdCBhcmUgY2VudGVyZWQgb24gdGhlIGhvcml6b250YWwgdGljayBtYXJrcy5cclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgTm9kZSwgTm9kZU9wdGlvbnMsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgcmF0aW9BbmRQcm9wb3J0aW9uIGZyb20gJy4uLy4uL3JhdGlvQW5kUHJvcG9ydGlvbi5qcyc7XHJcbmltcG9ydCBUaWNrTWFya1ZpZXcgZnJvbSAnLi9UaWNrTWFya1ZpZXcuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbmNvbnN0IExBQkVMX1ggPSAwO1xyXG5cclxuY2xhc3MgUkFQVGlja01hcmtMYWJlbHNOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgdG90YWxIZWlnaHQ6IG51bWJlcjtcclxuICBwcml2YXRlIGhlaWdodE9mVGV4dDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSB0aWNrTWFya1ZpZXdQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxUaWNrTWFya1ZpZXc+O1xyXG4gIHByaXZhdGUgdGlja01hcmtSYW5nZVByb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXI+O1xyXG4gIHByaXZhdGUgY29sb3JQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Q29sb3IgfCBzdHJpbmc+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRpY2tNYXJrVmlld1Byb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PFRpY2tNYXJrVmlldz4sIHRpY2tNYXJrUmFuZ2VQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgaGVpZ2h0OiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvclByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxDb2xvciB8IHN0cmluZz4sIG9wdGlvbnM/OiBTdHJpY3RPbWl0PE5vZGVPcHRpb25zLCAnY2hpbGRyZW4nPiApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMudG90YWxIZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB0aGlzLnRpY2tNYXJrVmlld1Byb3BlcnR5ID0gdGlja01hcmtWaWV3UHJvcGVydHk7XHJcbiAgICB0aGlzLnRpY2tNYXJrUmFuZ2VQcm9wZXJ0eSA9IHRpY2tNYXJrUmFuZ2VQcm9wZXJ0eTtcclxuICAgIHRoaXMuY29sb3JQcm9wZXJ0eSA9IGNvbG9yUHJvcGVydHk7XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHRpY2tNYXJrUmFuZ2VQcm9wZXJ0eSwgdGlja01hcmtWaWV3UHJvcGVydHkgXSwgdGhpcy51cGRhdGUuYmluZCggdGhpcyApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGhlaWdodCBvZiBhIHNpbmdsZSBsYWJlbCBUZXh0LlxyXG4gICAqXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBsYWJlbEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5oZWlnaHRPZlRleHQsICdjYW5ub3QgZ2V0IGxhYmVsSGVpZ2h0IHVudGlsIGxhYmVscyBoYXZlIGJlZW4gZHJhd24nICk7XHJcbiAgICByZXR1cm4gdGhpcy5oZWlnaHRPZlRleHQhO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxheW91dCggaGVpZ2h0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICB0aGlzLnRvdGFsSGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgdGhpcy51cGRhdGUoIHRoaXMudGlja01hcmtSYW5nZVByb3BlcnR5LnZhbHVlLCB0aGlzLnRpY2tNYXJrVmlld1Byb3BlcnR5LnZhbHVlICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZSggdGlja01hcmtSYW5nZTogbnVtYmVyLCB0aWNrTWFya1ZpZXc6IFRpY2tNYXJrVmlldyApOiB2b2lkIHtcclxuXHJcbiAgICAvLyBzdWJ0cmFjdCBvbmUgdG8gYWNjb3VudCBmb3IgcG90ZW50aWFsIHJvdW5kaW5nIGVycm9ycy4gVGhpcyBoZWxwcyBndWFyYW50ZWUgdGhhdCB0aGUgbGFzdCBsaW5lIGlzIGRyYXduLlxyXG4gICAgY29uc3QgaG9yaXpvbnRhbFNwYWNpbmcgPSAoIHRoaXMudG90YWxIZWlnaHQgLSAxICkgLyB0aWNrTWFya1JhbmdlO1xyXG5cclxuICAgIHRoaXMudmlzaWJsZSA9IHRpY2tNYXJrVmlldyA9PT0gVGlja01hcmtWaWV3LlZJU0lCTEVfV0lUSF9VTklUUztcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVVuaXRMYWJlbHMoIGhvcml6b250YWxTcGFjaW5nICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBOb3RlOiB3aWxsIGNsZWFyIGFsbCBjaGlsZHJlblxyXG4gICAqL1xyXG4gIHByaXZhdGUgdXBkYXRlVW5pdExhYmVscyggaG9yaXpvbnRhbFNwYWNpbmc6IG51bWJlciApOiB2b2lkIHtcclxuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuXHJcbiAgICBsZXQgaSA9IDA7XHJcblxyXG4gICAgZm9yICggbGV0IHkgPSAwOyB5IDw9IHRoaXMudG90YWxIZWlnaHQ7IHkgKz0gaG9yaXpvbnRhbFNwYWNpbmcgKSB7XHJcbiAgICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dCggaSwge1xyXG4gICAgICAgIGNlbnRlclg6IExBQkVMX1gsXHJcbiAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCB7IHNpemU6IDE4LCB3ZWlnaHQ6ICdib2xkJyB9ICksXHJcbiAgICAgICAgZmlsbDogdGhpcy5jb2xvclByb3BlcnR5LFxyXG4gICAgICAgIGNlbnRlclk6IHRoaXMudG90YWxIZWlnaHQgLSB5XHJcbiAgICAgIH0gKTtcclxuICAgICAgdGhpcy5oZWlnaHRPZlRleHQgPSB0ZXh0LmhlaWdodDtcclxuXHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIHRleHQgKTtcclxuICAgICAgaSsrO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxucmF0aW9BbmRQcm9wb3J0aW9uLnJlZ2lzdGVyKCAnUkFQVGlja01hcmtMYWJlbHNOb2RlJywgUkFQVGlja01hcmtMYWJlbHNOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFJBUFRpY2tNYXJrTGFiZWxzTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBTUEsT0FBT0EsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFnQkMsSUFBSSxFQUFlQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ2xGLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBQzVDLE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFFeEQsTUFBTUMsT0FBTyxHQUFHLENBQUM7QUFFakIsTUFBTUMscUJBQXFCLFNBQVNOLElBQUksQ0FBQztFQUcvQk8sWUFBWSxHQUFrQixJQUFJO0VBS25DQyxXQUFXQSxDQUFFQyxvQkFBdUQsRUFBRUMscUJBQXVDLEVBQUVDLE1BQWMsRUFDaEhDLGFBQWdELEVBQUVDLE9BQTZDLEVBQUc7SUFFcEgsS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJLENBQUNDLFdBQVcsR0FBR0gsTUFBTTtJQUN6QixJQUFJLENBQUNGLG9CQUFvQixHQUFHQSxvQkFBb0I7SUFDaEQsSUFBSSxDQUFDQyxxQkFBcUIsR0FBR0EscUJBQXFCO0lBQ2xELElBQUksQ0FBQ0UsYUFBYSxHQUFHQSxhQUFhO0lBRWxDLElBQUksQ0FBQ0csTUFBTSxDQUFFRixPQUFRLENBQUM7SUFFdEJULFNBQVMsQ0FBQ1ksU0FBUyxDQUFFLENBQUVOLHFCQUFxQixFQUFFRCxvQkFBb0IsQ0FBRSxFQUFFLElBQUksQ0FBQ1EsTUFBTSxDQUFDQyxJQUFJLENBQUUsSUFBSyxDQUFFLENBQUM7RUFDbEc7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRSxJQUFXQyxXQUFXQSxDQUFBLEVBQVc7SUFDL0JDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ2IsWUFBWSxFQUFFLHFEQUFzRCxDQUFDO0lBQzVGLE9BQU8sSUFBSSxDQUFDQSxZQUFZO0VBQzFCO0VBRU9jLE1BQU1BLENBQUVWLE1BQWMsRUFBUztJQUNwQyxJQUFJLENBQUNHLFdBQVcsR0FBR0gsTUFBTTtJQUN6QixJQUFJLENBQUNNLE1BQU0sQ0FBRSxJQUFJLENBQUNQLHFCQUFxQixDQUFDWSxLQUFLLEVBQUUsSUFBSSxDQUFDYixvQkFBb0IsQ0FBQ2EsS0FBTSxDQUFDO0VBQ2xGO0VBRVFMLE1BQU1BLENBQUVNLGFBQXFCLEVBQUVDLFlBQTBCLEVBQVM7SUFFeEU7SUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxDQUFFLElBQUksQ0FBQ1gsV0FBVyxHQUFHLENBQUMsSUFBS1MsYUFBYTtJQUVsRSxJQUFJLENBQUNHLE9BQU8sR0FBR0YsWUFBWSxLQUFLckIsWUFBWSxDQUFDd0Isa0JBQWtCO0lBRS9ELElBQUksQ0FBQ0MsZ0JBQWdCLENBQUVILGlCQUFrQixDQUFDO0VBQzVDOztFQUVBO0FBQ0Y7QUFDQTtFQUNVRyxnQkFBZ0JBLENBQUVILGlCQUF5QixFQUFTO0lBQzFELElBQUksQ0FBQ0ksUUFBUSxHQUFHLEVBQUU7SUFFbEIsSUFBSUMsQ0FBQyxHQUFHLENBQUM7SUFFVCxLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsSUFBSSxJQUFJLENBQUNqQixXQUFXLEVBQUVpQixDQUFDLElBQUlOLGlCQUFpQixFQUFHO01BQy9ELE1BQU1PLElBQUksR0FBRyxJQUFJL0IsSUFBSSxDQUFFNkIsQ0FBQyxFQUFFO1FBQ3hCRyxPQUFPLEVBQUU1QixPQUFPO1FBQ2hCNkIsSUFBSSxFQUFFLElBQUluQyxRQUFRLENBQUU7VUFBRW9DLElBQUksRUFBRSxFQUFFO1VBQUVDLE1BQU0sRUFBRTtRQUFPLENBQUUsQ0FBQztRQUNsREMsSUFBSSxFQUFFLElBQUksQ0FBQ3pCLGFBQWE7UUFDeEIwQixPQUFPLEVBQUUsSUFBSSxDQUFDeEIsV0FBVyxHQUFHaUI7TUFDOUIsQ0FBRSxDQUFDO01BQ0gsSUFBSSxDQUFDeEIsWUFBWSxHQUFHeUIsSUFBSSxDQUFDckIsTUFBTTtNQUUvQixJQUFJLENBQUM0QixRQUFRLENBQUVQLElBQUssQ0FBQztNQUNyQkYsQ0FBQyxFQUFFO0lBQ0w7RUFDRjtBQUNGO0FBRUE1QixrQkFBa0IsQ0FBQ3NDLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRWxDLHFCQUFzQixDQUFDO0FBQzdFLGVBQWVBLHFCQUFxQiJ9