// Copyright 2020-2022, University of Colorado Boulder

/**
 * Handle keyboard input in a consistent way across all usages of keyboard input to the ratio. This function creates and returns a
 * function that is responsible for making sure that keyboard input snaps to the in-proportion value if it would pass over it.
 * In some cases of targetProperty, the default keyboard steps are not granular enough to achieve the in-proportion state with keyboard
 * input. This function will map those keyboard steps to exact, in-proportion values while conserving the same number keypresses to get
 * in between tick marks for consistent UX.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import ratioAndProportion from '../../ratioAndProportion.js';
import rapConstants from '../rapConstants.js';

// a function that returns the snap/conserved value

/**
 * @param getIdealValue - get the ideal target value
 * @param keyboardStep
 * @param shiftKeyboardStep
 */
function getKeyboardInputSnappingMapper(getIdealValue, keyboardStep, shiftKeyboardStep) {
  // keep track of the remainder for next input post-process
  let remainder = 0;
  const snappingFunction = (newValue, oldValue, useShiftKeyStep, alreadyInProportion) => {
    // Don't conserve the snap for page up/down or home/end keys, just basic movement changes.
    const applyConservationSnap = rapConstants.toFixed(Math.abs(newValue - oldValue)) <= shiftKeyboardStep &&
    // eslint-disable-line bad-sim-text
    newValue > rapConstants.NO_SUCCESS_VALUE_THRESHOLD && oldValue > rapConstants.NO_SUCCESS_VALUE_THRESHOLD;

    // Default case if there is no saved remainder, then just step normally.
    if (remainder === 0) {
      const snapToKeyboardStep = useShiftKeyStep ? shiftKeyboardStep : keyboardStep;
      newValue = rapConstants.toFixed(
      // eslint-disable-line bad-sim-text
      Utils.roundSymmetric(newValue / snapToKeyboardStep) * snapToKeyboardStep);
    }

    // If we are in the case where we want to potentially snap to the value that would yield the in-proportion state.
    // No need to do this if we are already in Proportion. Skip if already in proportion without a snapped remainder.
    if (applyConservationSnap && !(alreadyInProportion && remainder === 0)) {
      let returnValue = newValue;
      const target = getIdealValue();
      if (newValue > target !== oldValue > target && oldValue !== target) {
        remainder = newValue - target;
        returnValue = target;
      } else if (remainder !== 0) {
        newValue = newValue + remainder;
        remainder = 0;
        returnValue = newValue;
      }
      assert && assert(!isNaN(returnValue));
      return returnValue;
    }
    return newValue;
  };
  snappingFunction.reset = () => {
    remainder = 0;
  };
  return snappingFunction;
}
ratioAndProportion.register('getKeyboardInputSnappingMapper', getKeyboardInputSnappingMapper);
export default getKeyboardInputSnappingMapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsInJhdGlvQW5kUHJvcG9ydGlvbiIsInJhcENvbnN0YW50cyIsImdldEtleWJvYXJkSW5wdXRTbmFwcGluZ01hcHBlciIsImdldElkZWFsVmFsdWUiLCJrZXlib2FyZFN0ZXAiLCJzaGlmdEtleWJvYXJkU3RlcCIsInJlbWFpbmRlciIsInNuYXBwaW5nRnVuY3Rpb24iLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwidXNlU2hpZnRLZXlTdGVwIiwiYWxyZWFkeUluUHJvcG9ydGlvbiIsImFwcGx5Q29uc2VydmF0aW9uU25hcCIsInRvRml4ZWQiLCJNYXRoIiwiYWJzIiwiTk9fU1VDQ0VTU19WQUxVRV9USFJFU0hPTEQiLCJzbmFwVG9LZXlib2FyZFN0ZXAiLCJyb3VuZFN5bW1ldHJpYyIsInJldHVyblZhbHVlIiwidGFyZ2V0IiwiYXNzZXJ0IiwiaXNOYU4iLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiZ2V0S2V5Ym9hcmRJbnB1dFNuYXBwaW5nTWFwcGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZSBrZXlib2FyZCBpbnB1dCBpbiBhIGNvbnNpc3RlbnQgd2F5IGFjcm9zcyBhbGwgdXNhZ2VzIG9mIGtleWJvYXJkIGlucHV0IHRvIHRoZSByYXRpby4gVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuZCByZXR1cm5zIGFcclxuICogZnVuY3Rpb24gdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgbWFraW5nIHN1cmUgdGhhdCBrZXlib2FyZCBpbnB1dCBzbmFwcyB0byB0aGUgaW4tcHJvcG9ydGlvbiB2YWx1ZSBpZiBpdCB3b3VsZCBwYXNzIG92ZXIgaXQuXHJcbiAqIEluIHNvbWUgY2FzZXMgb2YgdGFyZ2V0UHJvcGVydHksIHRoZSBkZWZhdWx0IGtleWJvYXJkIHN0ZXBzIGFyZSBub3QgZ3JhbnVsYXIgZW5vdWdoIHRvIGFjaGlldmUgdGhlIGluLXByb3BvcnRpb24gc3RhdGUgd2l0aCBrZXlib2FyZFxyXG4gKiBpbnB1dC4gVGhpcyBmdW5jdGlvbiB3aWxsIG1hcCB0aG9zZSBrZXlib2FyZCBzdGVwcyB0byBleGFjdCwgaW4tcHJvcG9ydGlvbiB2YWx1ZXMgd2hpbGUgY29uc2VydmluZyB0aGUgc2FtZSBudW1iZXIga2V5cHJlc3NlcyB0byBnZXRcclxuICogaW4gYmV0d2VlbiB0aWNrIG1hcmtzIGZvciBjb25zaXN0ZW50IFVYLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCByYXRpb0FuZFByb3BvcnRpb24gZnJvbSAnLi4vLi4vcmF0aW9BbmRQcm9wb3J0aW9uLmpzJztcclxuaW1wb3J0IHJhcENvbnN0YW50cyBmcm9tICcuLi9yYXBDb25zdGFudHMuanMnO1xyXG5cclxuLy8gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHNuYXAvY29uc2VydmVkIHZhbHVlXHJcbnR5cGUgS2V5Ym9hcmRJbnB1dE1hcHBlciA9IHtcclxuICAoIG5ld1ZhbHVlOiBudW1iZXIsIG9sZFZhdWU6IG51bWJlciwgdXNlU2hpZnRLZXlTdGVwOiBib29sZWFuLCBhbHJlYWR5SW5Qcm9wb3J0aW9uOiBib29sZWFuICk6IG51bWJlcjtcclxuICByZXNldDogKCkgPT4gdm9pZDtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIGdldElkZWFsVmFsdWUgLSBnZXQgdGhlIGlkZWFsIHRhcmdldCB2YWx1ZVxyXG4gKiBAcGFyYW0ga2V5Ym9hcmRTdGVwXHJcbiAqIEBwYXJhbSBzaGlmdEtleWJvYXJkU3RlcFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0S2V5Ym9hcmRJbnB1dFNuYXBwaW5nTWFwcGVyKCBnZXRJZGVhbFZhbHVlOiAoKSA9PiBudW1iZXIsIGtleWJvYXJkU3RlcDogbnVtYmVyLCBzaGlmdEtleWJvYXJkU3RlcDogbnVtYmVyICk6IEtleWJvYXJkSW5wdXRNYXBwZXIge1xyXG5cclxuICAvLyBrZWVwIHRyYWNrIG9mIHRoZSByZW1haW5kZXIgZm9yIG5leHQgaW5wdXQgcG9zdC1wcm9jZXNzXHJcbiAgbGV0IHJlbWFpbmRlciA9IDA7XHJcblxyXG4gIGNvbnN0IHNuYXBwaW5nRnVuY3Rpb246IEtleWJvYXJkSW5wdXRNYXBwZXIgPSAoIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgdXNlU2hpZnRLZXlTdGVwLCBhbHJlYWR5SW5Qcm9wb3J0aW9uICkgPT4ge1xyXG4gICAgLy8gRG9uJ3QgY29uc2VydmUgdGhlIHNuYXAgZm9yIHBhZ2UgdXAvZG93biBvciBob21lL2VuZCBrZXlzLCBqdXN0IGJhc2ljIG1vdmVtZW50IGNoYW5nZXMuXHJcbiAgICBjb25zdCBhcHBseUNvbnNlcnZhdGlvblNuYXAgPSByYXBDb25zdGFudHMudG9GaXhlZCggTWF0aC5hYnMoIG5ld1ZhbHVlIC0gb2xkVmFsdWUgKSApIDw9IHNoaWZ0S2V5Ym9hcmRTdGVwICYmIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFkLXNpbS10ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA+IHJhcENvbnN0YW50cy5OT19TVUNDRVNTX1ZBTFVFX1RIUkVTSE9MRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPiByYXBDb25zdGFudHMuTk9fU1VDQ0VTU19WQUxVRV9USFJFU0hPTEQ7XHJcblxyXG5cclxuICAgIC8vIERlZmF1bHQgY2FzZSBpZiB0aGVyZSBpcyBubyBzYXZlZCByZW1haW5kZXIsIHRoZW4ganVzdCBzdGVwIG5vcm1hbGx5LlxyXG4gICAgaWYgKCByZW1haW5kZXIgPT09IDAgKSB7XHJcbiAgICAgIGNvbnN0IHNuYXBUb0tleWJvYXJkU3RlcCA9IHVzZVNoaWZ0S2V5U3RlcCA/IHNoaWZ0S2V5Ym9hcmRTdGVwIDoga2V5Ym9hcmRTdGVwO1xyXG4gICAgICBuZXdWYWx1ZSA9IHJhcENvbnN0YW50cy50b0ZpeGVkKCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhZC1zaW0tdGV4dFxyXG4gICAgICAgIFV0aWxzLnJvdW5kU3ltbWV0cmljKCBuZXdWYWx1ZSAvIHNuYXBUb0tleWJvYXJkU3RlcCApICogc25hcFRvS2V5Ym9hcmRTdGVwICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgd2UgYXJlIGluIHRoZSBjYXNlIHdoZXJlIHdlIHdhbnQgdG8gcG90ZW50aWFsbHkgc25hcCB0byB0aGUgdmFsdWUgdGhhdCB3b3VsZCB5aWVsZCB0aGUgaW4tcHJvcG9ydGlvbiBzdGF0ZS5cclxuICAgIC8vIE5vIG5lZWQgdG8gZG8gdGhpcyBpZiB3ZSBhcmUgYWxyZWFkeSBpbiBQcm9wb3J0aW9uLiBTa2lwIGlmIGFscmVhZHkgaW4gcHJvcG9ydGlvbiB3aXRob3V0IGEgc25hcHBlZCByZW1haW5kZXIuXHJcbiAgICBpZiAoIGFwcGx5Q29uc2VydmF0aW9uU25hcCAmJiAhKCBhbHJlYWR5SW5Qcm9wb3J0aW9uICYmIHJlbWFpbmRlciA9PT0gMCApICkge1xyXG5cclxuICAgICAgbGV0IHJldHVyblZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldElkZWFsVmFsdWUoKTtcclxuICAgICAgaWYgKCBuZXdWYWx1ZSA+IHRhcmdldCAhPT0gb2xkVmFsdWUgPiB0YXJnZXQgJiYgb2xkVmFsdWUgIT09IHRhcmdldCApIHtcclxuICAgICAgICByZW1haW5kZXIgPSBuZXdWYWx1ZSAtIHRhcmdldDtcclxuICAgICAgICByZXR1cm5WYWx1ZSA9IHRhcmdldDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxzZSBpZiAoIHJlbWFpbmRlciAhPT0gMCApIHtcclxuICAgICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlICsgcmVtYWluZGVyO1xyXG4gICAgICAgIHJlbWFpbmRlciA9IDA7XHJcbiAgICAgICAgcmV0dXJuVmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIWlzTmFOKCByZXR1cm5WYWx1ZSApICk7XHJcblxyXG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3VmFsdWU7XHJcbiAgfTtcclxuXHJcbiAgc25hcHBpbmdGdW5jdGlvbi5yZXNldCA9ICgpID0+IHsgcmVtYWluZGVyID0gMDsgfTtcclxuXHJcbiAgcmV0dXJuIHNuYXBwaW5nRnVuY3Rpb247XHJcbn1cclxuXHJcbnJhdGlvQW5kUHJvcG9ydGlvbi5yZWdpc3RlciggJ2dldEtleWJvYXJkSW5wdXRTbmFwcGluZ01hcHBlcicsIGdldEtleWJvYXJkSW5wdXRTbmFwcGluZ01hcHBlciApO1xyXG5leHBvcnQgdHlwZSB7IEtleWJvYXJkSW5wdXRNYXBwZXIgfTtcclxuZXhwb3J0IGRlZmF1bHQgZ2V0S2V5Ym9hcmRJbnB1dFNuYXBwaW5nTWFwcGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7O0FBRTdDOztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyw4QkFBOEJBLENBQUVDLGFBQTJCLEVBQUVDLFlBQW9CLEVBQUVDLGlCQUF5QixFQUF3QjtFQUUzSTtFQUNBLElBQUlDLFNBQVMsR0FBRyxDQUFDO0VBRWpCLE1BQU1DLGdCQUFxQyxHQUFHQSxDQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsZUFBZSxFQUFFQyxtQkFBbUIsS0FBTTtJQUM1RztJQUNBLE1BQU1DLHFCQUFxQixHQUFHWCxZQUFZLENBQUNZLE9BQU8sQ0FBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUVQLFFBQVEsR0FBR0MsUUFBUyxDQUFFLENBQUMsSUFBSUosaUJBQWlCO0lBQUk7SUFDaEZHLFFBQVEsR0FBR1AsWUFBWSxDQUFDZSwwQkFBMEIsSUFDbERQLFFBQVEsR0FBR1IsWUFBWSxDQUFDZSwwQkFBMEI7O0lBR2hGO0lBQ0EsSUFBS1YsU0FBUyxLQUFLLENBQUMsRUFBRztNQUNyQixNQUFNVyxrQkFBa0IsR0FBR1AsZUFBZSxHQUFHTCxpQkFBaUIsR0FBR0QsWUFBWTtNQUM3RUksUUFBUSxHQUFHUCxZQUFZLENBQUNZLE9BQU87TUFBRTtNQUMvQmQsS0FBSyxDQUFDbUIsY0FBYyxDQUFFVixRQUFRLEdBQUdTLGtCQUFtQixDQUFDLEdBQUdBLGtCQUFtQixDQUFDO0lBQ2hGOztJQUVBO0lBQ0E7SUFDQSxJQUFLTCxxQkFBcUIsSUFBSSxFQUFHRCxtQkFBbUIsSUFBSUwsU0FBUyxLQUFLLENBQUMsQ0FBRSxFQUFHO01BRTFFLElBQUlhLFdBQVcsR0FBR1gsUUFBUTtNQUMxQixNQUFNWSxNQUFNLEdBQUdqQixhQUFhLENBQUMsQ0FBQztNQUM5QixJQUFLSyxRQUFRLEdBQUdZLE1BQU0sS0FBS1gsUUFBUSxHQUFHVyxNQUFNLElBQUlYLFFBQVEsS0FBS1csTUFBTSxFQUFHO1FBQ3BFZCxTQUFTLEdBQUdFLFFBQVEsR0FBR1ksTUFBTTtRQUM3QkQsV0FBVyxHQUFHQyxNQUFNO01BQ3RCLENBQUMsTUFFSSxJQUFLZCxTQUFTLEtBQUssQ0FBQyxFQUFHO1FBQzFCRSxRQUFRLEdBQUdBLFFBQVEsR0FBR0YsU0FBUztRQUMvQkEsU0FBUyxHQUFHLENBQUM7UUFDYmEsV0FBVyxHQUFHWCxRQUFRO01BQ3hCO01BRUFhLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNDLEtBQUssQ0FBRUgsV0FBWSxDQUFFLENBQUM7TUFFekMsT0FBT0EsV0FBVztJQUNwQjtJQUNBLE9BQU9YLFFBQVE7RUFDakIsQ0FBQztFQUVERCxnQkFBZ0IsQ0FBQ2dCLEtBQUssR0FBRyxNQUFNO0lBQUVqQixTQUFTLEdBQUcsQ0FBQztFQUFFLENBQUM7RUFFakQsT0FBT0MsZ0JBQWdCO0FBQ3pCO0FBRUFQLGtCQUFrQixDQUFDd0IsUUFBUSxDQUFFLGdDQUFnQyxFQUFFdEIsOEJBQStCLENBQUM7QUFFL0YsZUFBZUEsOEJBQThCIn0=