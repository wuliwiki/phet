// Copyright 2020-2022, University of Colorado Boulder

/**
 * A central class that keeps the current state of how the ratio has been interacted with. This is used to determine
 * what cues to display on each RatioHalf's RatioHandNode.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import ratioAndProportion from '../../ratioAndProportion.js';

// Even though there is only one Profile, it is still nice to use this pattern for color organizing.
class CueArrowsState {
  // if either hand has been moved with a mouse or touch or MediaPipe

  // if either hand has been moved with a keyboard

  // if either hand currently has keyboard focus

  constructor() {
    this.interactedWithMouseProperty = new BooleanProperty(false);
    this.interactedWithKeyboardProperty = new BooleanProperty(false);
    this.keyboardFocusedProperty = new BooleanProperty(false);
    this.bothHands = {
      // whether or not to show the both hands cue for this ratio term.
      antecedentCueDisplayedProperty: new BooleanProperty(false),
      consequentCueDisplayedProperty: new BooleanProperty(false),
      // Has the BothHands interaction been interacted with yet? We need to be able to pass this info to RatioHalf,
      // which is created before BothHandsPDOMNode is created. So even though this acts like a derivedProperty that
      // BothHandsPDOMNode should control, we need to create it here.
      interactedWithProperty: new BooleanProperty(false)
    };
  }
  reset() {
    this.interactedWithMouseProperty.reset();
    this.interactedWithKeyboardProperty.reset();
    this.keyboardFocusedProperty.reset();
  }
}
ratioAndProportion.register('CueArrowsState', CueArrowsState);
export default CueArrowsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJyYXRpb0FuZFByb3BvcnRpb24iLCJDdWVBcnJvd3NTdGF0ZSIsImNvbnN0cnVjdG9yIiwiaW50ZXJhY3RlZFdpdGhNb3VzZVByb3BlcnR5IiwiaW50ZXJhY3RlZFdpdGhLZXlib2FyZFByb3BlcnR5Iiwia2V5Ym9hcmRGb2N1c2VkUHJvcGVydHkiLCJib3RoSGFuZHMiLCJhbnRlY2VkZW50Q3VlRGlzcGxheWVkUHJvcGVydHkiLCJjb25zZXF1ZW50Q3VlRGlzcGxheWVkUHJvcGVydHkiLCJpbnRlcmFjdGVkV2l0aFByb3BlcnR5IiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1ZUFycm93c1N0YXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgY2VudHJhbCBjbGFzcyB0aGF0IGtlZXBzIHRoZSBjdXJyZW50IHN0YXRlIG9mIGhvdyB0aGUgcmF0aW8gaGFzIGJlZW4gaW50ZXJhY3RlZCB3aXRoLiBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lXHJcbiAqIHdoYXQgY3VlcyB0byBkaXNwbGF5IG9uIGVhY2ggUmF0aW9IYWxmJ3MgUmF0aW9IYW5kTm9kZS5cclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgcmF0aW9BbmRQcm9wb3J0aW9uIGZyb20gJy4uLy4uL3JhdGlvQW5kUHJvcG9ydGlvbi5qcyc7XHJcblxyXG4vLyBFdmVuIHRob3VnaCB0aGVyZSBpcyBvbmx5IG9uZSBQcm9maWxlLCBpdCBpcyBzdGlsbCBuaWNlIHRvIHVzZSB0aGlzIHBhdHRlcm4gZm9yIGNvbG9yIG9yZ2FuaXppbmcuXHJcbmNsYXNzIEN1ZUFycm93c1N0YXRlIHtcclxuXHJcbiAgLy8gaWYgZWl0aGVyIGhhbmQgaGFzIGJlZW4gbW92ZWQgd2l0aCBhIG1vdXNlIG9yIHRvdWNoIG9yIE1lZGlhUGlwZVxyXG4gIHB1YmxpYyBpbnRlcmFjdGVkV2l0aE1vdXNlUHJvcGVydHk6IEJvb2xlYW5Qcm9wZXJ0eTtcclxuXHJcbiAgLy8gaWYgZWl0aGVyIGhhbmQgaGFzIGJlZW4gbW92ZWQgd2l0aCBhIGtleWJvYXJkXHJcbiAgcHVibGljIGludGVyYWN0ZWRXaXRoS2V5Ym9hcmRQcm9wZXJ0eTogQm9vbGVhblByb3BlcnR5O1xyXG5cclxuICAvLyBpZiBlaXRoZXIgaGFuZCBjdXJyZW50bHkgaGFzIGtleWJvYXJkIGZvY3VzXHJcbiAgcHVibGljIGtleWJvYXJkRm9jdXNlZFByb3BlcnR5OiBCb29sZWFuUHJvcGVydHk7XHJcbiAgcHVibGljIGJvdGhIYW5kczoge1xyXG4gICAgYW50ZWNlZGVudEN1ZURpc3BsYXllZFByb3BlcnR5OiBCb29sZWFuUHJvcGVydHk7XHJcbiAgICBjb25zZXF1ZW50Q3VlRGlzcGxheWVkUHJvcGVydHk6IEJvb2xlYW5Qcm9wZXJ0eTtcclxuICAgIGludGVyYWN0ZWRXaXRoUHJvcGVydHk6IEJvb2xlYW5Qcm9wZXJ0eTtcclxuICB9O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgdGhpcy5pbnRlcmFjdGVkV2l0aE1vdXNlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG4gICAgdGhpcy5pbnRlcmFjdGVkV2l0aEtleWJvYXJkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG4gICAgdGhpcy5rZXlib2FyZEZvY3VzZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgdGhpcy5ib3RoSGFuZHMgPSB7XHJcblxyXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB0byBzaG93IHRoZSBib3RoIGhhbmRzIGN1ZSBmb3IgdGhpcyByYXRpbyB0ZXJtLlxyXG4gICAgICBhbnRlY2VkZW50Q3VlRGlzcGxheWVkUHJvcGVydHk6IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICksXHJcbiAgICAgIGNvbnNlcXVlbnRDdWVEaXNwbGF5ZWRQcm9wZXJ0eTogbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKSxcclxuXHJcblxyXG4gICAgICAvLyBIYXMgdGhlIEJvdGhIYW5kcyBpbnRlcmFjdGlvbiBiZWVuIGludGVyYWN0ZWQgd2l0aCB5ZXQ/IFdlIG5lZWQgdG8gYmUgYWJsZSB0byBwYXNzIHRoaXMgaW5mbyB0byBSYXRpb0hhbGYsXHJcbiAgICAgIC8vIHdoaWNoIGlzIGNyZWF0ZWQgYmVmb3JlIEJvdGhIYW5kc1BET01Ob2RlIGlzIGNyZWF0ZWQuIFNvIGV2ZW4gdGhvdWdoIHRoaXMgYWN0cyBsaWtlIGEgZGVyaXZlZFByb3BlcnR5IHRoYXRcclxuICAgICAgLy8gQm90aEhhbmRzUERPTU5vZGUgc2hvdWxkIGNvbnRyb2wsIHdlIG5lZWQgdG8gY3JlYXRlIGl0IGhlcmUuXHJcbiAgICAgIGludGVyYWN0ZWRXaXRoUHJvcGVydHk6IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlIClcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmludGVyYWN0ZWRXaXRoTW91c2VQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5pbnRlcmFjdGVkV2l0aEtleWJvYXJkUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMua2V5Ym9hcmRGb2N1c2VkUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnJhdGlvQW5kUHJvcG9ydGlvbi5yZWdpc3RlciggJ0N1ZUFycm93c1N0YXRlJywgQ3VlQXJyb3dzU3RhdGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ3VlQXJyb3dzU3RhdGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7O0FBRTVEO0FBQ0EsTUFBTUMsY0FBYyxDQUFDO0VBRW5COztFQUdBOztFQUdBOztFQVFPQyxXQUFXQSxDQUFBLEVBQUc7SUFFbkIsSUFBSSxDQUFDQywyQkFBMkIsR0FBRyxJQUFJSixlQUFlLENBQUUsS0FBTSxDQUFDO0lBQy9ELElBQUksQ0FBQ0ssOEJBQThCLEdBQUcsSUFBSUwsZUFBZSxDQUFFLEtBQU0sQ0FBQztJQUNsRSxJQUFJLENBQUNNLHVCQUF1QixHQUFHLElBQUlOLGVBQWUsQ0FBRSxLQUFNLENBQUM7SUFFM0QsSUFBSSxDQUFDTyxTQUFTLEdBQUc7TUFFZjtNQUNBQyw4QkFBOEIsRUFBRSxJQUFJUixlQUFlLENBQUUsS0FBTSxDQUFDO01BQzVEUyw4QkFBOEIsRUFBRSxJQUFJVCxlQUFlLENBQUUsS0FBTSxDQUFDO01BRzVEO01BQ0E7TUFDQTtNQUNBVSxzQkFBc0IsRUFBRSxJQUFJVixlQUFlLENBQUUsS0FBTTtJQUNyRCxDQUFDO0VBQ0g7RUFFT1csS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ1AsMkJBQTJCLENBQUNPLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQ04sOEJBQThCLENBQUNNLEtBQUssQ0FBQyxDQUFDO0lBQzNDLElBQUksQ0FBQ0wsdUJBQXVCLENBQUNLLEtBQUssQ0FBQyxDQUFDO0VBQ3RDO0FBQ0Y7QUFFQVYsa0JBQWtCLENBQUNXLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRVYsY0FBZSxDQUFDO0FBQy9ELGVBQWVBLGNBQWMifQ==