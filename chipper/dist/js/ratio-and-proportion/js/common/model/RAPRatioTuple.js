// Copyright 2020-2022, University of Colorado Boulder

/**
 * Data type that holds both terms of the ratio, with convenience functions
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import ratioAndProportion from '../../ratioAndProportion.js';
import RatioTerm from './RatioTerm.js';
class RAPRatioTuple {
  static STATE_SCHEMA = {
    antecedent: NumberIO,
    consequent: NumberIO
  };
  static RAPRatioTupleIO = new IOType('RAPRatioTupleIO', {
    valueType: RAPRatioTuple,
    toStateObject: rapRatioTuple => rapRatioTuple.toStateObject(),
    stateSchema: RAPRatioTuple.STATE_SCHEMA,
    fromStateObject: stateObject => RAPRatioTuple.fromStateObject(stateObject),
    documentation: 'the basic data structure that holds both ratio term values, the antecedent and consequent.'
  });
  constructor(antecedent, consequent) {
    assert && assert(!isNaN(antecedent));
    assert && assert(!isNaN(consequent));
    this.antecedent = antecedent;
    this.consequent = consequent;
  }
  withAntecedent(antecedent) {
    return new RAPRatioTuple(antecedent, this.consequent);
  }
  withConsequent(consequent) {
    return new RAPRatioTuple(this.antecedent, consequent);
  }
  withValueForTerm(value, ratioTerm) {
    return this.copy().setForTerm(value, ratioTerm);
  }
  plusAntecedent(antecedentDelta) {
    return new RAPRatioTuple(this.antecedent + antecedentDelta, this.consequent);
  }
  plusConsequent(consequentDelta) {
    return new RAPRatioTuple(this.antecedent, this.consequent + consequentDelta);
  }
  constrainFields(range) {
    this.antecedent = range.constrainValue(this.antecedent);
    this.consequent = range.constrainValue(this.consequent);
    return this; // for chaining
  }

  getRatio() {
    return this.consequent === 0 ? Number.POSITIVE_INFINITY : this.antecedent / this.consequent;
  }

  /**
   * Get the distance between the two numbers
   * @returns - greater than 0
   */
  getDistance() {
    return Math.abs(this.antecedent - this.consequent);
  }
  equals(otherRatioTuple) {
    return this.antecedent === otherRatioTuple.antecedent && this.consequent === otherRatioTuple.consequent;
  }
  getForTerm(ratioTerm) {
    switch (ratioTerm) {
      case RatioTerm.ANTECEDENT:
        return this.antecedent;
      case RatioTerm.CONSEQUENT:
        return this.consequent;
      default:
        assert && assert(false, `unexpected ratioTerm ${ratioTerm}`);
        return -1;
    }
  }
  setForTerm(value, ratioTerm) {
    switch (ratioTerm) {
      case RatioTerm.ANTECEDENT:
        this.antecedent = value;
        break;
      case RatioTerm.CONSEQUENT:
        this.consequent = value;
        break;
      default:
        assert && assert(false, `unexpected ratioTerm ${ratioTerm}`);
    }
    return this;
  }
  copy() {
    return new RAPRatioTuple(this.antecedent, this.consequent);
  }
  toStateObject() {
    return {
      antecedent: this.antecedent,
      consequent: this.consequent
    };
  }
  static fromStateObject(stateObject) {
    return new RAPRatioTuple(stateObject.antecedent, stateObject.consequent);
  }
}
ratioAndProportion.register('RAPRatioTuple', RAPRatioTuple);
export default RAPRatioTuple;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,