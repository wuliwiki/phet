// Copyright 2020-2022, University of Colorado Boulder

/**
 * Sim specific query parameters
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import logGlobal from '../../../phet-core/js/logGlobal.js';
import ratioAndProportion from '../ratioAndProportion.js';
const RAPQueryParameters = QueryStringMachine.getAll({
  // Show description qualitative position regions for the hands.
  showPositionRegions: {
    type: 'flag'
  },
  bluetooth: {
    type: 'flag'
  },
  // The model value for the tolerance of the proportion value to the target to be calculated as "in proportion".
  // This value was re-evaluated in most recently in https://github.com/phetsims/ratio-and-proportion/issues/500, but
  // more paper trail in https://github.com/phetsims/ratio-and-proportion/issues/465.
  cameraInputInProportionThreshold: {
    type: 'number',
    defaultValue: 0.075
  },
  // For bluetooth connections, what should the amount of history be to average/smooth out the jitter. MUST BE 4 OR
  // MORE (to calculate a box plot)!!!
  bluetoothHistoryLength: {
    type: 'number',
    defaultValue: 10
  },
  // The difference between the first and third quartile values of bluetooth history, in ratio units (min 0, max 1)
  bluetoothStationaryThreshold: {
    type: 'number',
    defaultValue: 0.02
  }
});
ratioAndProportion.register('RAPQueryParameters', RAPQueryParameters);

// Log query parameters
logGlobal('phet.chipper.queryParameters');
logGlobal('phet.preloads.phetio.queryParameters');
logGlobal('phet.ratioAndProportion.RAPQueryParameters');
export default RAPQueryParameters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dHbG9iYWwiLCJyYXRpb0FuZFByb3BvcnRpb24iLCJSQVBRdWVyeVBhcmFtZXRlcnMiLCJRdWVyeVN0cmluZ01hY2hpbmUiLCJnZXRBbGwiLCJzaG93UG9zaXRpb25SZWdpb25zIiwidHlwZSIsImJsdWV0b290aCIsImNhbWVyYUlucHV0SW5Qcm9wb3J0aW9uVGhyZXNob2xkIiwiZGVmYXVsdFZhbHVlIiwiYmx1ZXRvb3RoSGlzdG9yeUxlbmd0aCIsImJsdWV0b290aFN0YXRpb25hcnlUaHJlc2hvbGQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJBUFF1ZXJ5UGFyYW1ldGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaW0gc3BlY2lmaWMgcXVlcnkgcGFyYW1ldGVyc1xyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGxvZ0dsb2JhbCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvbG9nR2xvYmFsLmpzJztcclxuaW1wb3J0IHJhdGlvQW5kUHJvcG9ydGlvbiBmcm9tICcuLi9yYXRpb0FuZFByb3BvcnRpb24uanMnO1xyXG5cclxuY29uc3QgUkFQUXVlcnlQYXJhbWV0ZXJzID0gUXVlcnlTdHJpbmdNYWNoaW5lLmdldEFsbCgge1xyXG5cclxuICAvLyBTaG93IGRlc2NyaXB0aW9uIHF1YWxpdGF0aXZlIHBvc2l0aW9uIHJlZ2lvbnMgZm9yIHRoZSBoYW5kcy5cclxuICBzaG93UG9zaXRpb25SZWdpb25zOiB7XHJcbiAgICB0eXBlOiAnZmxhZydcclxuICB9LFxyXG5cclxuICBibHVldG9vdGg6IHtcclxuICAgIHR5cGU6ICdmbGFnJ1xyXG4gIH0sXHJcblxyXG4gIC8vIFRoZSBtb2RlbCB2YWx1ZSBmb3IgdGhlIHRvbGVyYW5jZSBvZiB0aGUgcHJvcG9ydGlvbiB2YWx1ZSB0byB0aGUgdGFyZ2V0IHRvIGJlIGNhbGN1bGF0ZWQgYXMgXCJpbiBwcm9wb3J0aW9uXCIuXHJcbiAgLy8gVGhpcyB2YWx1ZSB3YXMgcmUtZXZhbHVhdGVkIGluIG1vc3QgcmVjZW50bHkgaW4gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3JhdGlvLWFuZC1wcm9wb3J0aW9uL2lzc3Vlcy81MDAsIGJ1dFxyXG4gIC8vIG1vcmUgcGFwZXIgdHJhaWwgaW4gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3JhdGlvLWFuZC1wcm9wb3J0aW9uL2lzc3Vlcy80NjUuXHJcbiAgY2FtZXJhSW5wdXRJblByb3BvcnRpb25UaHJlc2hvbGQ6IHtcclxuICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgZGVmYXVsdFZhbHVlOiAwLjA3NVxyXG4gIH0sXHJcblxyXG4gIC8vIEZvciBibHVldG9vdGggY29ubmVjdGlvbnMsIHdoYXQgc2hvdWxkIHRoZSBhbW91bnQgb2YgaGlzdG9yeSBiZSB0byBhdmVyYWdlL3Ntb290aCBvdXQgdGhlIGppdHRlci4gTVVTVCBCRSA0IE9SXHJcbiAgLy8gTU9SRSAodG8gY2FsY3VsYXRlIGEgYm94IHBsb3QpISEhXHJcbiAgYmx1ZXRvb3RoSGlzdG9yeUxlbmd0aDoge1xyXG4gICAgdHlwZTogJ251bWJlcicsXHJcbiAgICBkZWZhdWx0VmFsdWU6IDEwXHJcbiAgfSxcclxuXHJcbiAgLy8gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIHRoaXJkIHF1YXJ0aWxlIHZhbHVlcyBvZiBibHVldG9vdGggaGlzdG9yeSwgaW4gcmF0aW8gdW5pdHMgKG1pbiAwLCBtYXggMSlcclxuICBibHVldG9vdGhTdGF0aW9uYXJ5VGhyZXNob2xkOiB7XHJcbiAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgIGRlZmF1bHRWYWx1ZTogMC4wMlxyXG4gIH1cclxufSApO1xyXG5cclxucmF0aW9BbmRQcm9wb3J0aW9uLnJlZ2lzdGVyKCAnUkFQUXVlcnlQYXJhbWV0ZXJzJywgUkFQUXVlcnlQYXJhbWV0ZXJzICk7XHJcblxyXG4vLyBMb2cgcXVlcnkgcGFyYW1ldGVyc1xyXG5sb2dHbG9iYWwoICdwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzJyApO1xyXG5sb2dHbG9iYWwoICdwaGV0LnByZWxvYWRzLnBoZXRpby5xdWVyeVBhcmFtZXRlcnMnICk7XHJcbmxvZ0dsb2JhbCggJ3BoZXQucmF0aW9BbmRQcm9wb3J0aW9uLlJBUFF1ZXJ5UGFyYW1ldGVycycgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJBUFF1ZXJ5UGFyYW1ldGVyczsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFFekQsTUFBTUMsa0JBQWtCLEdBQUdDLGtCQUFrQixDQUFDQyxNQUFNLENBQUU7RUFFcEQ7RUFDQUMsbUJBQW1CLEVBQUU7SUFDbkJDLElBQUksRUFBRTtFQUNSLENBQUM7RUFFREMsU0FBUyxFQUFFO0lBQ1RELElBQUksRUFBRTtFQUNSLENBQUM7RUFFRDtFQUNBO0VBQ0E7RUFDQUUsZ0NBQWdDLEVBQUU7SUFDaENGLElBQUksRUFBRSxRQUFRO0lBQ2RHLFlBQVksRUFBRTtFQUNoQixDQUFDO0VBRUQ7RUFDQTtFQUNBQyxzQkFBc0IsRUFBRTtJQUN0QkosSUFBSSxFQUFFLFFBQVE7SUFDZEcsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFFRDtFQUNBRSw0QkFBNEIsRUFBRTtJQUM1QkwsSUFBSSxFQUFFLFFBQVE7SUFDZEcsWUFBWSxFQUFFO0VBQ2hCO0FBQ0YsQ0FBRSxDQUFDO0FBRUhSLGtCQUFrQixDQUFDVyxRQUFRLENBQUUsb0JBQW9CLEVBQUVWLGtCQUFtQixDQUFDOztBQUV2RTtBQUNBRixTQUFTLENBQUUsOEJBQStCLENBQUM7QUFDM0NBLFNBQVMsQ0FBRSxzQ0FBdUMsQ0FBQztBQUNuREEsU0FBUyxDQUFFLDRDQUE2QyxDQUFDO0FBRXpELGVBQWVFLGtCQUFrQiJ9