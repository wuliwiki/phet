// Copyright 2016-2023, University of Colorado Boulder

/**
 * The 'Model' screen.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import modelIcon_png from '../../mipmaps/modelIcon_png.js';

// Since the screen is named "model" this lint rule has a false positive
// eslint-disable-next-line no-view-imported-from-model
import GravityAndOrbitsScreenView from '../common/view/GravityAndOrbitsScreenView.js';
import gravityAndOrbits from '../gravityAndOrbits.js';
import GravityAndOrbitsStrings from '../GravityAndOrbitsStrings.js';
import ModelModel from './ModelModel.js';
import optionize from '../../../phet-core/js/optionize.js';
class ModelScreen extends Screen {
  constructor(providedOptions) {
    const options = optionize()({
      name: GravityAndOrbitsStrings.modelStringProperty,
      homeScreenIcon: new ScreenIcon(new Image(modelIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1,
        fill: 'black'
      })
    }, providedOptions);
    const viewTandem = options.tandem.createTandem('view');
    super(() => new ModelModel(options.tandem.createTandem('model'), viewTandem), model => new GravityAndOrbitsScreenView(model, viewTandem), options);
  }
}
gravityAndOrbits.register('ModelScreen', ModelScreen);
export default ModelScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJtb2RlbEljb25fcG5nIiwiR3Jhdml0eUFuZE9yYml0c1NjcmVlblZpZXciLCJncmF2aXR5QW5kT3JiaXRzIiwiR3Jhdml0eUFuZE9yYml0c1N0cmluZ3MiLCJNb2RlbE1vZGVsIiwib3B0aW9uaXplIiwiTW9kZWxTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJuYW1lIiwibW9kZWxTdHJpbmdQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwiZmlsbCIsInZpZXdUYW5kZW0iLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTW9kZWxTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdNb2RlbCcgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuLCB7IFNjcmVlbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbW9kZWxJY29uX3BuZyBmcm9tICcuLi8uLi9taXBtYXBzL21vZGVsSWNvbl9wbmcuanMnO1xyXG5cclxuLy8gU2luY2UgdGhlIHNjcmVlbiBpcyBuYW1lZCBcIm1vZGVsXCIgdGhpcyBsaW50IHJ1bGUgaGFzIGEgZmFsc2UgcG9zaXRpdmVcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZpZXctaW1wb3J0ZWQtZnJvbS1tb2RlbFxyXG5pbXBvcnQgR3Jhdml0eUFuZE9yYml0c1NjcmVlblZpZXcgZnJvbSAnLi4vY29tbW9uL3ZpZXcvR3Jhdml0eUFuZE9yYml0c1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgZ3Jhdml0eUFuZE9yYml0cyBmcm9tICcuLi9ncmF2aXR5QW5kT3JiaXRzLmpzJztcclxuaW1wb3J0IEdyYXZpdHlBbmRPcmJpdHNTdHJpbmdzIGZyb20gJy4uL0dyYXZpdHlBbmRPcmJpdHNTdHJpbmdzLmpzJztcclxuaW1wb3J0IE1vZGVsTW9kZWwgZnJvbSAnLi9Nb2RlbE1vZGVsLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG5jbGFzcyBNb2RlbFNjcmVlbiBleHRlbmRzIFNjcmVlbjxNb2RlbE1vZGVsLCBHcmF2aXR5QW5kT3JiaXRzU2NyZWVuVmlldz4ge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogU2NyZWVuT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFNjcmVlbk9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMsIFNjcmVlbk9wdGlvbnM+KCkoIHtcclxuICAgICAgbmFtZTogR3Jhdml0eUFuZE9yYml0c1N0cmluZ3MubW9kZWxTdHJpbmdQcm9wZXJ0eSxcclxuXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU2NyZWVuSWNvbiggbmV3IEltYWdlKCBtb2RlbEljb25fcG5nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIGZpbGw6ICdibGFjaydcclxuICAgICAgfSApXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB2aWV3VGFuZGVtID0gb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlldycgKTtcclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgTW9kZWxNb2RlbCggb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICksIHZpZXdUYW5kZW0gKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IEdyYXZpdHlBbmRPcmJpdHNTY3JlZW5WaWV3KCBtb2RlbCwgdmlld1RhbmRlbSApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZ3Jhdml0eUFuZE9yYml0cy5yZWdpc3RlciggJ01vZGVsU2NyZWVuJywgTW9kZWxTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgTW9kZWxTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBeUIsNkJBQTZCO0FBQ25FLE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxhQUFhLE1BQU0sZ0NBQWdDOztBQUUxRDtBQUNBO0FBQ0EsT0FBT0MsMEJBQTBCLE1BQU0sOENBQThDO0FBQ3JGLE9BQU9DLGdCQUFnQixNQUFNLHdCQUF3QjtBQUNyRCxPQUFPQyx1QkFBdUIsTUFBTSwrQkFBK0I7QUFDbkUsT0FBT0MsVUFBVSxNQUFNLGlCQUFpQjtBQUN4QyxPQUFPQyxTQUFTLE1BQTRCLG9DQUFvQztBQUVoRixNQUFNQyxXQUFXLFNBQVNULE1BQU0sQ0FBeUM7RUFDaEVVLFdBQVdBLENBQUVDLGVBQStCLEVBQUc7SUFFcEQsTUFBTUMsT0FBTyxHQUFHSixTQUFTLENBQWlELENBQUMsQ0FBRTtNQUMzRUssSUFBSSxFQUFFUCx1QkFBdUIsQ0FBQ1EsbUJBQW1CO01BRWpEQyxjQUFjLEVBQUUsSUFBSWQsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUMsYUFBYyxDQUFDLEVBQUU7UUFDMURhLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFLENBQUM7UUFDMUJDLElBQUksRUFBRTtNQUNSLENBQUU7SUFDSixDQUFDLEVBQUVQLGVBQWdCLENBQUM7SUFFcEIsTUFBTVEsVUFBVSxHQUFHUCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE1BQU8sQ0FBQztJQUN4RCxLQUFLLENBQ0gsTUFBTSxJQUFJZCxVQUFVLENBQUVLLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDQyxZQUFZLENBQUUsT0FBUSxDQUFDLEVBQUVGLFVBQVcsQ0FBQyxFQUMxRUcsS0FBSyxJQUFJLElBQUlsQiwwQkFBMEIsQ0FBRWtCLEtBQUssRUFBRUgsVUFBVyxDQUFDLEVBQzVEUCxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFQLGdCQUFnQixDQUFDa0IsUUFBUSxDQUFFLGFBQWEsRUFBRWQsV0FBWSxDQUFDO0FBQ3ZELGVBQWVBLFdBQVcifQ==