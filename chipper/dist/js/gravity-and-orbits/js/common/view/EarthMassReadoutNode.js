// Copyright 2014-2022, University of Colorado Boulder

/**
 * Provides a textual readout of a Body's mass in "earth masses"
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 */

import Utils from '../../../../dot/js/Utils.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import gravityAndOrbits from '../../gravityAndOrbits.js';
import GravityAndOrbitsStrings from '../../GravityAndOrbitsStrings.js';
import GravityAndOrbitsConstants from '../GravityAndOrbitsConstants.js';
import MassReadoutNode from './MassReadoutNode.js';
const earthMassesStringProperty = GravityAndOrbitsStrings.earthMassesStringProperty;
const earthMassStringProperty = GravityAndOrbitsStrings.earthMassStringProperty;
const pattern0Value1UnitsStringProperty = GravityAndOrbitsStrings.pattern['0value']['1unitsStringProperty'];
const thousandEarthMassesStringProperty = GravityAndOrbitsStrings.thousandEarthMassesStringProperty;
class EarthMassReadoutNode extends MassReadoutNode {
  constructor(bodyNode, visibleProperty, providedOptions) {
    super(bodyNode, visibleProperty, providedOptions);

    /**
     * Create a label for the earth, but with rules to provide either exact or qualitative representations,
     * and limitations so that the label looks good in the view.
     */
    const updateText = () => {
      const massKG = this.bodyNode.body.massProperty.get();
      const earthMasses = massKG / GravityAndOrbitsConstants.EARTH_MASS;

      // Show the value in terms of earth masses (or thousands of earth masses)
      let value;
      let units;
      if (earthMasses > 1E3) {
        value = Utils.toFixed(Utils.roundSymmetric(earthMasses / 1E3), 0);
        units = thousandEarthMassesStringProperty.value;
      } else if (Math.abs(earthMasses - 1) < 1E-2) {
        value = '1';
        units = earthMassStringProperty.value;
      } else if (earthMasses < 1) {
        value = Utils.toFixed(earthMasses, 2);
        units = earthMassesStringProperty.value;
      } else {
        // Handle showing exactly "1 earth mass" instead of "1 earth masses"
        value = Utils.toFixed(earthMasses, 2);
        units = earthMasses === 1 ? earthMassStringProperty.value : earthMassesStringProperty.value;
      }
      this.stringProperty.value = StringUtils.format(pattern0Value1UnitsStringProperty.value, value, units);
    };
    this.bodyNode.body.massProperty.lazyLink(updateText);
    thousandEarthMassesStringProperty.lazyLink(updateText);
    earthMassStringProperty.lazyLink(updateText);
    earthMassesStringProperty.lazyLink(updateText);
    pattern0Value1UnitsStringProperty.lazyLink(updateText);
    updateText();
  }
}
gravityAndOrbits.register('EarthMassReadoutNode', EarthMassReadoutNode);
export default EarthMassReadoutNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlN0cmluZ1V0aWxzIiwiZ3Jhdml0eUFuZE9yYml0cyIsIkdyYXZpdHlBbmRPcmJpdHNTdHJpbmdzIiwiR3Jhdml0eUFuZE9yYml0c0NvbnN0YW50cyIsIk1hc3NSZWFkb3V0Tm9kZSIsImVhcnRoTWFzc2VzU3RyaW5nUHJvcGVydHkiLCJlYXJ0aE1hc3NTdHJpbmdQcm9wZXJ0eSIsInBhdHRlcm4wVmFsdWUxVW5pdHNTdHJpbmdQcm9wZXJ0eSIsInBhdHRlcm4iLCJ0aG91c2FuZEVhcnRoTWFzc2VzU3RyaW5nUHJvcGVydHkiLCJFYXJ0aE1hc3NSZWFkb3V0Tm9kZSIsImNvbnN0cnVjdG9yIiwiYm9keU5vZGUiLCJ2aXNpYmxlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJ1cGRhdGVUZXh0IiwibWFzc0tHIiwiYm9keSIsIm1hc3NQcm9wZXJ0eSIsImdldCIsImVhcnRoTWFzc2VzIiwiRUFSVEhfTUFTUyIsInZhbHVlIiwidW5pdHMiLCJ0b0ZpeGVkIiwicm91bmRTeW1tZXRyaWMiLCJNYXRoIiwiYWJzIiwic3RyaW5nUHJvcGVydHkiLCJmb3JtYXQiLCJsYXp5TGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRWFydGhNYXNzUmVhZG91dE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUHJvdmlkZXMgYSB0ZXh0dWFsIHJlYWRvdXQgb2YgYSBCb2R5J3MgbWFzcyBpbiBcImVhcnRoIG1hc3Nlc1wiXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQWFyb24gRGF2aXMgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBncmF2aXR5QW5kT3JiaXRzIGZyb20gJy4uLy4uL2dyYXZpdHlBbmRPcmJpdHMuanMnO1xyXG5pbXBvcnQgR3Jhdml0eUFuZE9yYml0c1N0cmluZ3MgZnJvbSAnLi4vLi4vR3Jhdml0eUFuZE9yYml0c1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgR3Jhdml0eUFuZE9yYml0c0NvbnN0YW50cyBmcm9tICcuLi9HcmF2aXR5QW5kT3JiaXRzQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEJvZHlOb2RlIGZyb20gJy4vQm9keU5vZGUuanMnO1xyXG5pbXBvcnQgTWFzc1JlYWRvdXROb2RlLCB7IE1hc3NSZWFkb3V0Tm9kZU9wdGlvbnMgfSBmcm9tICcuL01hc3NSZWFkb3V0Tm9kZS5qcyc7XHJcblxyXG5jb25zdCBlYXJ0aE1hc3Nlc1N0cmluZ1Byb3BlcnR5ID0gR3Jhdml0eUFuZE9yYml0c1N0cmluZ3MuZWFydGhNYXNzZXNTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgZWFydGhNYXNzU3RyaW5nUHJvcGVydHkgPSBHcmF2aXR5QW5kT3JiaXRzU3RyaW5ncy5lYXJ0aE1hc3NTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgcGF0dGVybjBWYWx1ZTFVbml0c1N0cmluZ1Byb3BlcnR5ID0gR3Jhdml0eUFuZE9yYml0c1N0cmluZ3MucGF0dGVyblsgJzB2YWx1ZScgXVsgJzF1bml0c1N0cmluZ1Byb3BlcnR5JyBdO1xyXG5jb25zdCB0aG91c2FuZEVhcnRoTWFzc2VzU3RyaW5nUHJvcGVydHkgPSBHcmF2aXR5QW5kT3JiaXRzU3RyaW5ncy50aG91c2FuZEVhcnRoTWFzc2VzU3RyaW5nUHJvcGVydHk7XHJcblxyXG5jbGFzcyBFYXJ0aE1hc3NSZWFkb3V0Tm9kZSBleHRlbmRzIE1hc3NSZWFkb3V0Tm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYm9keU5vZGU6IEJvZHlOb2RlLCB2aXNpYmxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LCBwcm92aWRlZE9wdGlvbnM/OiBNYXNzUmVhZG91dE5vZGVPcHRpb25zICkge1xyXG4gICAgc3VwZXIoIGJvZHlOb2RlLCB2aXNpYmxlUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbGFiZWwgZm9yIHRoZSBlYXJ0aCwgYnV0IHdpdGggcnVsZXMgdG8gcHJvdmlkZSBlaXRoZXIgZXhhY3Qgb3IgcXVhbGl0YXRpdmUgcmVwcmVzZW50YXRpb25zLFxyXG4gICAgICogYW5kIGxpbWl0YXRpb25zIHNvIHRoYXQgdGhlIGxhYmVsIGxvb2tzIGdvb2QgaW4gdGhlIHZpZXcuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZVRleHQgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1hc3NLRyA9IHRoaXMuYm9keU5vZGUuYm9keS5tYXNzUHJvcGVydHkuZ2V0KCk7XHJcbiAgICAgIGNvbnN0IGVhcnRoTWFzc2VzID0gbWFzc0tHIC8gR3Jhdml0eUFuZE9yYml0c0NvbnN0YW50cy5FQVJUSF9NQVNTO1xyXG5cclxuICAgICAgLy8gU2hvdyB0aGUgdmFsdWUgaW4gdGVybXMgb2YgZWFydGggbWFzc2VzIChvciB0aG91c2FuZHMgb2YgZWFydGggbWFzc2VzKVxyXG4gICAgICBsZXQgdmFsdWU7XHJcbiAgICAgIGxldCB1bml0cztcclxuICAgICAgaWYgKCBlYXJ0aE1hc3NlcyA+IDFFMyApIHtcclxuICAgICAgICB2YWx1ZSA9IFV0aWxzLnRvRml4ZWQoIFV0aWxzLnJvdW5kU3ltbWV0cmljKCBlYXJ0aE1hc3NlcyAvIDFFMyApLCAwICk7XHJcbiAgICAgICAgdW5pdHMgPSB0aG91c2FuZEVhcnRoTWFzc2VzU3RyaW5nUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIE1hdGguYWJzKCBlYXJ0aE1hc3NlcyAtIDEgKSA8IDFFLTIgKSB7XHJcbiAgICAgICAgdmFsdWUgPSAnMSc7XHJcbiAgICAgICAgdW5pdHMgPSBlYXJ0aE1hc3NTdHJpbmdQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggZWFydGhNYXNzZXMgPCAxICkge1xyXG4gICAgICAgIHZhbHVlID0gVXRpbHMudG9GaXhlZCggZWFydGhNYXNzZXMsIDIgKTtcclxuICAgICAgICB1bml0cyA9IGVhcnRoTWFzc2VzU3RyaW5nUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBzaG93aW5nIGV4YWN0bHkgXCIxIGVhcnRoIG1hc3NcIiBpbnN0ZWFkIG9mIFwiMSBlYXJ0aCBtYXNzZXNcIlxyXG4gICAgICAgIHZhbHVlID0gVXRpbHMudG9GaXhlZCggZWFydGhNYXNzZXMsIDIgKTtcclxuICAgICAgICB1bml0cyA9ICggZWFydGhNYXNzZXMgPT09IDEgKSA/IGVhcnRoTWFzc1N0cmluZ1Byb3BlcnR5LnZhbHVlIDogZWFydGhNYXNzZXNTdHJpbmdQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnN0cmluZ1Byb3BlcnR5LnZhbHVlID0gU3RyaW5nVXRpbHMuZm9ybWF0KCBwYXR0ZXJuMFZhbHVlMVVuaXRzU3RyaW5nUHJvcGVydHkudmFsdWUsIHZhbHVlLCB1bml0cyApO1xyXG4gICAgfTtcclxuICAgIHRoaXMuYm9keU5vZGUuYm9keS5tYXNzUHJvcGVydHkubGF6eUxpbmsoIHVwZGF0ZVRleHQgKTtcclxuICAgIHRob3VzYW5kRWFydGhNYXNzZXNTdHJpbmdQcm9wZXJ0eS5sYXp5TGluayggdXBkYXRlVGV4dCApO1xyXG4gICAgZWFydGhNYXNzU3RyaW5nUHJvcGVydHkubGF6eUxpbmsoIHVwZGF0ZVRleHQgKTtcclxuICAgIGVhcnRoTWFzc2VzU3RyaW5nUHJvcGVydHkubGF6eUxpbmsoIHVwZGF0ZVRleHQgKTtcclxuICAgIHBhdHRlcm4wVmFsdWUxVW5pdHNTdHJpbmdQcm9wZXJ0eS5sYXp5TGluayggdXBkYXRlVGV4dCApO1xyXG4gICAgdXBkYXRlVGV4dCgpO1xyXG4gIH1cclxufVxyXG5cclxuZ3Jhdml0eUFuZE9yYml0cy5yZWdpc3RlciggJ0VhcnRoTWFzc1JlYWRvdXROb2RlJywgRWFydGhNYXNzUmVhZG91dE5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgRWFydGhNYXNzUmVhZG91dE5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBRXZFLE9BQU9DLGVBQWUsTUFBa0Msc0JBQXNCO0FBRTlFLE1BQU1DLHlCQUF5QixHQUFHSCx1QkFBdUIsQ0FBQ0cseUJBQXlCO0FBQ25GLE1BQU1DLHVCQUF1QixHQUFHSix1QkFBdUIsQ0FBQ0ksdUJBQXVCO0FBQy9FLE1BQU1DLGlDQUFpQyxHQUFHTCx1QkFBdUIsQ0FBQ00sT0FBTyxDQUFFLFFBQVEsQ0FBRSxDQUFFLHNCQUFzQixDQUFFO0FBQy9HLE1BQU1DLGlDQUFpQyxHQUFHUCx1QkFBdUIsQ0FBQ08saUNBQWlDO0FBRW5HLE1BQU1DLG9CQUFvQixTQUFTTixlQUFlLENBQUM7RUFFMUNPLFdBQVdBLENBQUVDLFFBQWtCLEVBQUVDLGVBQTJDLEVBQUVDLGVBQXdDLEVBQUc7SUFDOUgsS0FBSyxDQUFFRixRQUFRLEVBQUVDLGVBQWUsRUFBRUMsZUFBZ0IsQ0FBQzs7SUFFbkQ7QUFDSjtBQUNBO0FBQ0E7SUFDSSxNQUFNQyxVQUFVLEdBQUdBLENBQUEsS0FBTTtNQUN2QixNQUFNQyxNQUFNLEdBQUcsSUFBSSxDQUFDSixRQUFRLENBQUNLLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxHQUFHLENBQUMsQ0FBQztNQUNwRCxNQUFNQyxXQUFXLEdBQUdKLE1BQU0sR0FBR2IseUJBQXlCLENBQUNrQixVQUFVOztNQUVqRTtNQUNBLElBQUlDLEtBQUs7TUFDVCxJQUFJQyxLQUFLO01BQ1QsSUFBS0gsV0FBVyxHQUFHLEdBQUcsRUFBRztRQUN2QkUsS0FBSyxHQUFHdkIsS0FBSyxDQUFDeUIsT0FBTyxDQUFFekIsS0FBSyxDQUFDMEIsY0FBYyxDQUFFTCxXQUFXLEdBQUcsR0FBSSxDQUFDLEVBQUUsQ0FBRSxDQUFDO1FBQ3JFRyxLQUFLLEdBQUdkLGlDQUFpQyxDQUFDYSxLQUFLO01BQ2pELENBQUMsTUFDSSxJQUFLSSxJQUFJLENBQUNDLEdBQUcsQ0FBRVAsV0FBVyxHQUFHLENBQUUsQ0FBQyxHQUFHLElBQUksRUFBRztRQUM3Q0UsS0FBSyxHQUFHLEdBQUc7UUFDWEMsS0FBSyxHQUFHakIsdUJBQXVCLENBQUNnQixLQUFLO01BQ3ZDLENBQUMsTUFDSSxJQUFLRixXQUFXLEdBQUcsQ0FBQyxFQUFHO1FBQzFCRSxLQUFLLEdBQUd2QixLQUFLLENBQUN5QixPQUFPLENBQUVKLFdBQVcsRUFBRSxDQUFFLENBQUM7UUFDdkNHLEtBQUssR0FBR2xCLHlCQUF5QixDQUFDaUIsS0FBSztNQUN6QyxDQUFDLE1BQ0k7UUFFSDtRQUNBQSxLQUFLLEdBQUd2QixLQUFLLENBQUN5QixPQUFPLENBQUVKLFdBQVcsRUFBRSxDQUFFLENBQUM7UUFDdkNHLEtBQUssR0FBS0gsV0FBVyxLQUFLLENBQUMsR0FBS2QsdUJBQXVCLENBQUNnQixLQUFLLEdBQUdqQix5QkFBeUIsQ0FBQ2lCLEtBQUs7TUFDakc7TUFDQSxJQUFJLENBQUNNLGNBQWMsQ0FBQ04sS0FBSyxHQUFHdEIsV0FBVyxDQUFDNkIsTUFBTSxDQUFFdEIsaUNBQWlDLENBQUNlLEtBQUssRUFBRUEsS0FBSyxFQUFFQyxLQUFNLENBQUM7SUFDekcsQ0FBQztJQUNELElBQUksQ0FBQ1gsUUFBUSxDQUFDSyxJQUFJLENBQUNDLFlBQVksQ0FBQ1ksUUFBUSxDQUFFZixVQUFXLENBQUM7SUFDdEROLGlDQUFpQyxDQUFDcUIsUUFBUSxDQUFFZixVQUFXLENBQUM7SUFDeERULHVCQUF1QixDQUFDd0IsUUFBUSxDQUFFZixVQUFXLENBQUM7SUFDOUNWLHlCQUF5QixDQUFDeUIsUUFBUSxDQUFFZixVQUFXLENBQUM7SUFDaERSLGlDQUFpQyxDQUFDdUIsUUFBUSxDQUFFZixVQUFXLENBQUM7SUFDeERBLFVBQVUsQ0FBQyxDQUFDO0VBQ2Q7QUFDRjtBQUVBZCxnQkFBZ0IsQ0FBQzhCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRXJCLG9CQUFxQixDQUFDO0FBQ3pFLGVBQWVBLG9CQUFvQiJ9