// Copyright 2014-2022, University of Colorado Boulder

/**
 * Used to show the draggable velocity vectors.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 */

import { Shape } from '../../../../kite/js/imports.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Color, DragListener, Path, Text } from '../../../../scenery/js/imports.js';
import gravityAndOrbits from '../../gravityAndOrbits.js';
import VectorNode from './VectorNode.js';
import Multilink from '../../../../axon/js/Multilink.js';
class DraggableVectorNode extends VectorNode {
  constructor(body, transformProperty, visibleProperty, vectorProperty, scale, fill, outline, labelText, tandem, providedOptions) {
    super(body, transformProperty, visibleProperty, vectorProperty, scale, fill, outline, tandem, providedOptions);

    // a circle with text (a character) in the center, to help indicate what it represents
    // ("v" for velocity in this sim)
    const ellipse = Shape.ellipse(0, 0, 18, 18, 0);
    const grabArea = new Path(ellipse, {
      lineWidth: 3,
      stroke: Color.lightGray,
      cursor: 'pointer'
    });
    const text = new Text(labelText, {
      font: new PhetFont(22),
      fontWeight: 'bold',
      fill: Color.gray,
      maxWidth: 25
    });
    text.localBoundsProperty.link(() => {
      text.center = this.getTip();
    });
    grabArea.center = this.getTip();
    this.addChild(grabArea);
    this.addChild(text);

    // Center the grab area on the tip (see getTip()) when any of its dependencies change
    const propertyListener = visible => {
      if (visible) {
        const newTip = this.getTip();
        grabArea.center = newTip;
        text.center = newTip;
      }
    };
    Multilink.multilink([visibleProperty, vectorProperty, body.positionProperty, transformProperty], propertyListener);

    // The velocity vector is rooted on the object, so we manage all of its drags by deltas.
    let previousPoint = null;
    let previousValue = null;

    // Add the drag handler
    const dragListener = new DragListener({
      start: event => {
        previousPoint = transformProperty.value.viewToModelPosition(this.globalToParentPoint(event.pointer.point)).timesScalar(1 / scale);
        previousValue = body.velocityProperty.get();
      },
      drag: event => {
        const currentPoint = transformProperty.value.viewToModelPosition(this.globalToParentPoint(event.pointer.point)).timesScalar(1 / scale);
        if (previousPoint) {
          const delta = currentPoint.minus(previousPoint);
          const proposedVelocity = previousValue.plus(delta);
          const viewVector = this.transformProperty.get().modelToViewDelta(proposedVelocity.times(this.vectorNodeScale));
          if (viewVector.magnitude < 10) {
            proposedVelocity.setXY(0, 0);
          }
          body.velocityProperty.set(proposedVelocity);
          body.userModifiedVelocityEmitter.emit();
        }
      },
      end: _.noop,
      tandem: tandem.createTandem('dragListener')
    });
    grabArea.addInputListener(dragListener);

    // move behind the geometry created by the superclass
    grabArea.moveToBack();
    text.moveToBack();

    // For PhET-iO, when the node does not support input, don't show the drag circle
    this.inputEnabledProperty.link(inputEnabled => {
      grabArea.visible = inputEnabled;
      text.visible = inputEnabled;
    });
  }
}
gravityAndOrbits.register('DraggableVectorNode', DraggableVectorNode);
export default DraggableVectorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIlBoZXRGb250IiwiQ29sb3IiLCJEcmFnTGlzdGVuZXIiLCJQYXRoIiwiVGV4dCIsImdyYXZpdHlBbmRPcmJpdHMiLCJWZWN0b3JOb2RlIiwiTXVsdGlsaW5rIiwiRHJhZ2dhYmxlVmVjdG9yTm9kZSIsImNvbnN0cnVjdG9yIiwiYm9keSIsInRyYW5zZm9ybVByb3BlcnR5IiwidmlzaWJsZVByb3BlcnR5IiwidmVjdG9yUHJvcGVydHkiLCJzY2FsZSIsImZpbGwiLCJvdXRsaW5lIiwibGFiZWxUZXh0IiwidGFuZGVtIiwicHJvdmlkZWRPcHRpb25zIiwiZWxsaXBzZSIsImdyYWJBcmVhIiwibGluZVdpZHRoIiwic3Ryb2tlIiwibGlnaHRHcmF5IiwiY3Vyc29yIiwidGV4dCIsImZvbnQiLCJmb250V2VpZ2h0IiwiZ3JheSIsIm1heFdpZHRoIiwibG9jYWxCb3VuZHNQcm9wZXJ0eSIsImxpbmsiLCJjZW50ZXIiLCJnZXRUaXAiLCJhZGRDaGlsZCIsInByb3BlcnR5TGlzdGVuZXIiLCJ2aXNpYmxlIiwibmV3VGlwIiwibXVsdGlsaW5rIiwicG9zaXRpb25Qcm9wZXJ0eSIsInByZXZpb3VzUG9pbnQiLCJwcmV2aW91c1ZhbHVlIiwiZHJhZ0xpc3RlbmVyIiwic3RhcnQiLCJldmVudCIsInZhbHVlIiwidmlld1RvTW9kZWxQb3NpdGlvbiIsImdsb2JhbFRvUGFyZW50UG9pbnQiLCJwb2ludGVyIiwicG9pbnQiLCJ0aW1lc1NjYWxhciIsInZlbG9jaXR5UHJvcGVydHkiLCJnZXQiLCJkcmFnIiwiY3VycmVudFBvaW50IiwiZGVsdGEiLCJtaW51cyIsInByb3Bvc2VkVmVsb2NpdHkiLCJwbHVzIiwidmlld1ZlY3RvciIsIm1vZGVsVG9WaWV3RGVsdGEiLCJ0aW1lcyIsInZlY3Rvck5vZGVTY2FsZSIsIm1hZ25pdHVkZSIsInNldFhZIiwic2V0IiwidXNlck1vZGlmaWVkVmVsb2NpdHlFbWl0dGVyIiwiZW1pdCIsImVuZCIsIl8iLCJub29wIiwiY3JlYXRlVGFuZGVtIiwiYWRkSW5wdXRMaXN0ZW5lciIsIm1vdmVUb0JhY2siLCJpbnB1dEVuYWJsZWRQcm9wZXJ0eSIsImlucHV0RW5hYmxlZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRHJhZ2dhYmxlVmVjdG9yTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBVc2VkIHRvIHNob3cgdGhlIGRyYWdnYWJsZSB2ZWxvY2l0eSB2ZWN0b3JzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEFhcm9uIERhdmlzIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIERyYWdMaXN0ZW5lciwgUGF0aCwgUHJlc3NMaXN0ZW5lckV2ZW50LCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdyYXZpdHlBbmRPcmJpdHMgZnJvbSAnLi4vLi4vZ3Jhdml0eUFuZE9yYml0cy5qcyc7XHJcbmltcG9ydCBWZWN0b3JOb2RlIGZyb20gJy4vVmVjdG9yTm9kZS5qcyc7XHJcbmltcG9ydCBCb2R5IGZyb20gJy4uL21vZGVsL0JvZHkuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuXHJcbmNsYXNzIERyYWdnYWJsZVZlY3Rvck5vZGUgZXh0ZW5kcyBWZWN0b3JOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBib2R5OiBCb2R5LCB0cmFuc2Zvcm1Qcm9wZXJ0eTogUHJvcGVydHk8TW9kZWxWaWV3VHJhbnNmb3JtMj4sIHZpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIHZlY3RvclByb3BlcnR5OiBQcm9wZXJ0eTxWZWN0b3IyPiwgc2NhbGU6IG51bWJlciwgZmlsbDogQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiBDb2xvciwgbGFiZWxUZXh0OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCB0YW5kZW06IFRhbmRlbSwgcHJvdmlkZWRPcHRpb25zPzogb2JqZWN0ICkge1xyXG5cclxuICAgIHN1cGVyKCBib2R5LCB0cmFuc2Zvcm1Qcm9wZXJ0eSwgdmlzaWJsZVByb3BlcnR5LCB2ZWN0b3JQcm9wZXJ0eSwgc2NhbGUsIGZpbGwsIG91dGxpbmUsIHRhbmRlbSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gYSBjaXJjbGUgd2l0aCB0ZXh0IChhIGNoYXJhY3RlcikgaW4gdGhlIGNlbnRlciwgdG8gaGVscCBpbmRpY2F0ZSB3aGF0IGl0IHJlcHJlc2VudHNcclxuICAgIC8vIChcInZcIiBmb3IgdmVsb2NpdHkgaW4gdGhpcyBzaW0pXHJcbiAgICBjb25zdCBlbGxpcHNlID0gU2hhcGUuZWxsaXBzZSggMCwgMCwgMTgsIDE4LCAwICk7XHJcbiAgICBjb25zdCBncmFiQXJlYSA9IG5ldyBQYXRoKCBlbGxpcHNlLCB7XHJcbiAgICAgIGxpbmVXaWR0aDogMyxcclxuICAgICAgc3Ryb2tlOiBDb2xvci5saWdodEdyYXksXHJcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0KCBsYWJlbFRleHQsIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAyMiApLFxyXG4gICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgIGZpbGw6IENvbG9yLmdyYXksXHJcbiAgICAgIG1heFdpZHRoOiAyNVxyXG4gICAgfSApO1xyXG4gICAgdGV4dC5sb2NhbEJvdW5kc1Byb3BlcnR5LmxpbmsoICgpID0+IHtcclxuICAgICAgdGV4dC5jZW50ZXIgPSB0aGlzLmdldFRpcCgpO1xyXG4gICAgfSApO1xyXG4gICAgZ3JhYkFyZWEuY2VudGVyID0gdGhpcy5nZXRUaXAoKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBncmFiQXJlYSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGV4dCApO1xyXG5cclxuICAgIC8vIENlbnRlciB0aGUgZ3JhYiBhcmVhIG9uIHRoZSB0aXAgKHNlZSBnZXRUaXAoKSkgd2hlbiBhbnkgb2YgaXRzIGRlcGVuZGVuY2llcyBjaGFuZ2VcclxuICAgIGNvbnN0IHByb3BlcnR5TGlzdGVuZXIgPSAoIHZpc2libGU6IGJvb2xlYW4gKSA9PiB7XHJcbiAgICAgIGlmICggdmlzaWJsZSApIHtcclxuICAgICAgICBjb25zdCBuZXdUaXAgPSB0aGlzLmdldFRpcCgpO1xyXG4gICAgICAgIGdyYWJBcmVhLmNlbnRlciA9IG5ld1RpcDtcclxuICAgICAgICB0ZXh0LmNlbnRlciA9IG5ld1RpcDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoIFsgdmlzaWJsZVByb3BlcnR5LCB2ZWN0b3JQcm9wZXJ0eSwgYm9keS5wb3NpdGlvblByb3BlcnR5LCB0cmFuc2Zvcm1Qcm9wZXJ0eSBdLCBwcm9wZXJ0eUxpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gVGhlIHZlbG9jaXR5IHZlY3RvciBpcyByb290ZWQgb24gdGhlIG9iamVjdCwgc28gd2UgbWFuYWdlIGFsbCBvZiBpdHMgZHJhZ3MgYnkgZGVsdGFzLlxyXG4gICAgbGV0IHByZXZpb3VzUG9pbnQ6IFZlY3RvcjIgfCBudWxsID0gbnVsbDtcclxuICAgIGxldCBwcmV2aW91c1ZhbHVlOiBWZWN0b3IyIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBkcmFnIGhhbmRsZXJcclxuICAgIGNvbnN0IGRyYWdMaXN0ZW5lciA9IG5ldyBEcmFnTGlzdGVuZXIoIHtcclxuICAgICAgc3RhcnQ6ICggZXZlbnQ6IFByZXNzTGlzdGVuZXJFdmVudCApID0+IHtcclxuICAgICAgICBwcmV2aW91c1BvaW50ID0gdHJhbnNmb3JtUHJvcGVydHkudmFsdWUudmlld1RvTW9kZWxQb3NpdGlvbiggdGhpcy5nbG9iYWxUb1BhcmVudFBvaW50KCBldmVudC5wb2ludGVyLnBvaW50ICkgKS50aW1lc1NjYWxhciggMSAvIHNjYWxlICk7XHJcbiAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGJvZHkudmVsb2NpdHlQcm9wZXJ0eS5nZXQoKTtcclxuICAgICAgfSxcclxuICAgICAgZHJhZzogKCBldmVudDogUHJlc3NMaXN0ZW5lckV2ZW50ICkgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50UG9pbnQgPSB0cmFuc2Zvcm1Qcm9wZXJ0eS52YWx1ZS52aWV3VG9Nb2RlbFBvc2l0aW9uKCB0aGlzLmdsb2JhbFRvUGFyZW50UG9pbnQoIGV2ZW50LnBvaW50ZXIucG9pbnQgKSApLnRpbWVzU2NhbGFyKCAxIC8gc2NhbGUgKTtcclxuICAgICAgICBpZiAoIHByZXZpb3VzUG9pbnQgKSB7XHJcbiAgICAgICAgICBjb25zdCBkZWx0YSA9IGN1cnJlbnRQb2ludC5taW51cyggcHJldmlvdXNQb2ludCApO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHByb3Bvc2VkVmVsb2NpdHkgPSBwcmV2aW91c1ZhbHVlIS5wbHVzKCBkZWx0YSApO1xyXG4gICAgICAgICAgY29uc3Qgdmlld1ZlY3RvciA9IHRoaXMudHJhbnNmb3JtUHJvcGVydHkuZ2V0KCkubW9kZWxUb1ZpZXdEZWx0YSggcHJvcG9zZWRWZWxvY2l0eS50aW1lcyggdGhpcy52ZWN0b3JOb2RlU2NhbGUgKSApO1xyXG4gICAgICAgICAgaWYgKCB2aWV3VmVjdG9yLm1hZ25pdHVkZSA8IDEwICkge1xyXG4gICAgICAgICAgICBwcm9wb3NlZFZlbG9jaXR5LnNldFhZKCAwLCAwICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBib2R5LnZlbG9jaXR5UHJvcGVydHkuc2V0KCBwcm9wb3NlZFZlbG9jaXR5ICk7XHJcbiAgICAgICAgICBib2R5LnVzZXJNb2RpZmllZFZlbG9jaXR5RW1pdHRlci5lbWl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBlbmQ6IF8ubm9vcCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnZHJhZ0xpc3RlbmVyJyApXHJcbiAgICB9ICk7XHJcbiAgICBncmFiQXJlYS5hZGRJbnB1dExpc3RlbmVyKCBkcmFnTGlzdGVuZXIgKTtcclxuXHJcbiAgICAvLyBtb3ZlIGJlaGluZCB0aGUgZ2VvbWV0cnkgY3JlYXRlZCBieSB0aGUgc3VwZXJjbGFzc1xyXG4gICAgZ3JhYkFyZWEubW92ZVRvQmFjaygpO1xyXG4gICAgdGV4dC5tb3ZlVG9CYWNrKCk7XHJcblxyXG4gICAgLy8gRm9yIFBoRVQtaU8sIHdoZW4gdGhlIG5vZGUgZG9lcyBub3Qgc3VwcG9ydCBpbnB1dCwgZG9uJ3Qgc2hvdyB0aGUgZHJhZyBjaXJjbGVcclxuICAgIHRoaXMuaW5wdXRFbmFibGVkUHJvcGVydHkubGluayggKCBpbnB1dEVuYWJsZWQ6IGJvb2xlYW4gKSA9PiB7XHJcbiAgICAgIGdyYWJBcmVhLnZpc2libGUgPSBpbnB1dEVuYWJsZWQ7XHJcbiAgICAgIHRleHQudmlzaWJsZSA9IGlucHV0RW5hYmxlZDtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXZpdHlBbmRPcmJpdHMucmVnaXN0ZXIoICdEcmFnZ2FibGVWZWN0b3JOb2RlJywgRHJhZ2dhYmxlVmVjdG9yTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBEcmFnZ2FibGVWZWN0b3JOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxLQUFLLEVBQUVDLFlBQVksRUFBRUMsSUFBSSxFQUFzQkMsSUFBSSxRQUFRLG1DQUFtQztBQUN2RyxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsVUFBVSxNQUFNLGlCQUFpQjtBQUt4QyxPQUFPQyxTQUFTLE1BQU0sa0NBQWtDO0FBR3hELE1BQU1DLG1CQUFtQixTQUFTRixVQUFVLENBQUM7RUFFcENHLFdBQVdBLENBQUVDLElBQVUsRUFBRUMsaUJBQWdELEVBQUVDLGVBQWtDLEVBQUVDLGNBQWlDLEVBQUVDLEtBQWEsRUFBRUMsSUFBVyxFQUMvSkMsT0FBYyxFQUFFQyxTQUFvQyxFQUFFQyxNQUFjLEVBQUVDLGVBQXdCLEVBQUc7SUFFbkgsS0FBSyxDQUFFVCxJQUFJLEVBQUVDLGlCQUFpQixFQUFFQyxlQUFlLEVBQUVDLGNBQWMsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUUsTUFBTSxFQUFFQyxlQUFnQixDQUFDOztJQUVoSDtJQUNBO0lBQ0EsTUFBTUMsT0FBTyxHQUFHckIsS0FBSyxDQUFDcUIsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxF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