// Copyright 2015-2022, University of Colorado Boulder

/**
 * Container for scene selection controls.
 *
 * @author Andrey Zelenkov (Mlearner)
 * @author Aaron Davis (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import { Color, HStrut, Image, Node } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import resetArrow_png from '../../../../scenery-phet/images/resetArrow_png.js';
import gravityAndOrbits from '../../gravityAndOrbits.js';
import GravityAndOrbitsColors from '../GravityAndOrbitsColors.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import optionize from '../../../../phet-core/js/optionize.js';
class SceneSelectionControls extends Node {
  /**
   * @param sceneProperty
   * @param modes
   * @param [providedOptions] - This object contains options for main node of planet menu.
   */
  constructor(sceneProperty, modes, screenView, providedOptions) {
    super(providedOptions);
    const options = merge({
      tandem: Tandem.OPTIONAL
    }, providedOptions);
    const content = modes.map(scene => {
      return {
        value: scene,
        createNode: tandem => scene.iconImage,
        tandemName: scene.radioButtonTandemName
      };
    });
    const radioButtonGroup = new RectangularRadioButtonGroup(sceneProperty, content, {
      spacing: 0,
      touchAreaYDilation: 0,
      // reduce to 0 to prevent overlap between buttons
      radioButtonOptions: {
        baseColor: 'rgba(0,0,0,0)',
        cornerRadius: 5,
        xMargin: 5,
        yMargin: 5,
        buttonAppearanceStrategyOptions: {
          selectedStroke: GravityAndOrbitsColors.foregroundProperty,
          selectedLineWidth: 2,
          deselectedLineWidth: 0
        }
      },
      tandem: options.tandem.createTandem('sceneSelectionRadioButtonGroup')
    });
    this.addChild(radioButtonGroup);
    const resetButtonTuples = modes.map(scene => {
      // Extra level so visibilty can be controlled by PhET-iO
      const sceneResetButton = new SceneResetButton(scene, screenView, {
        tandem: options.tandem.createTandem(scene.resetButtonTandemName)
      });
      return {
        container: new Node({
          children: [sceneResetButton]
        }),
        sceneResetButton: sceneResetButton
      };
    });
    resetButtonTuples.forEach(resetButtonTuple => this.addChild(resetButtonTuple.container));
    const updateResetButtons = () => {
      const selectedScene = sceneProperty.value;
      resetButtonTuples.forEach(resetButtonTuple => {
        const visible = selectedScene === resetButtonTuple.sceneResetButton.scene;
        resetButtonTuple.container.visible = visible;
        if (visible) {
          resetButtonTuple.container.leftCenter = radioButtonGroup.getButtonForValue(selectedScene).rightCenter.plusXY(10, 0);
        }
      });
    };
    sceneProperty.link(updateResetButtons);
    radioButtonGroup.boundsProperty.link(updateResetButtons);
    this.addChild(new HStrut(219));
  }
}
gravityAndOrbits.register('SceneSelectionControls', SceneSelectionControls);
class SceneResetButton extends RectangularPushButton {
  /**
   * @param scene
   * @param [providedOptions]
   */
  constructor(scene, screenView, providedOptions) {
    const options = optionize()({
      content: new Node({
        children: [new Image(resetArrow_png, {
          scale: 0.3
        })]
      }),
      xMargin: 5,
      yMargin: 3,
      baseColor: new Color(220, 220, 220),
      listener: () => {
        screenView.interruptSubtreeInput();
        scene.resetScene();
      }
    }, providedOptions);
    super(options);
    this.scene = scene;
  }
}
gravityAndOrbits.register('SceneResetButton', SceneResetButton);
export default SceneSelectionControls;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,