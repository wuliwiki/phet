// Copyright 2014-2022, University of Colorado Boulder

/**
 * Abstract class provides functionality for displaying the mass readout (in text) of a Body node.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Color, Text } from '../../../../scenery/js/imports.js';
import gravityAndOrbits from '../../gravityAndOrbits.js';
import GravityAndOrbitsColors from '../GravityAndOrbitsColors.js';
import StringProperty from '../../../../axon/js/StringProperty.js';
import Panel from '../../../../sun/js/Panel.js';
class MassReadoutNode extends Panel {
  constructor(bodyNode, visibleProperty, providedOptions) {
    const options = merge({
      textMaxWidth: 240
    }, providedOptions);
    const stringProperty = new StringProperty('-');
    const readoutText = new Text(stringProperty, {
      pickable: false,
      font: new PhetFont(18),
      maxWidth: options.textMaxWidth,
      fill: GravityAndOrbitsColors.foregroundProperty
    });

    // Expand text area to repaint artifacts
    super(readoutText, {
      visibleProperty: visibleProperty,
      stroke: null,
      fill: new Color(0, 0, 1, 0.0001),
      cornerRadius: 0
    });
    this.bodyNode = bodyNode;
    this.stringProperty = stringProperty;
    const updatePosition = () => {
      const bounds = bodyNode.bodyRenderer.getBounds();
      this.x = bounds.centerX - this.width / 2;
      if (bodyNode.body.massReadoutBelow) {
        this.y = bounds.maxX + this.height;
      } else {
        this.y = bounds.minY - this.height;
      }
    };
    bodyNode.body.massProperty.lazyLink(updatePosition);
    this.stringProperty.lazyLink(updatePosition);
    visibleProperty.lazyLink(updatePosition);
  }
}
gravityAndOrbits.register('MassReadoutNode', MassReadoutNode);
export default MassReadoutNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiQ29sb3IiLCJUZXh0IiwiZ3Jhdml0eUFuZE9yYml0cyIsIkdyYXZpdHlBbmRPcmJpdHNDb2xvcnMiLCJTdHJpbmdQcm9wZXJ0eSIsIlBhbmVsIiwiTWFzc1JlYWRvdXROb2RlIiwiY29uc3RydWN0b3IiLCJib2R5Tm9kZSIsInZpc2libGVQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ0ZXh0TWF4V2lkdGgiLCJzdHJpbmdQcm9wZXJ0eSIsInJlYWRvdXRUZXh0IiwicGlja2FibGUiLCJmb250IiwibWF4V2lkdGgiLCJmaWxsIiwiZm9yZWdyb3VuZFByb3BlcnR5Iiwic3Ryb2tlIiwiY29ybmVyUmFkaXVzIiwidXBkYXRlUG9zaXRpb24iLCJib3VuZHMiLCJib2R5UmVuZGVyZXIiLCJnZXRCb3VuZHMiLCJ4IiwiY2VudGVyWCIsIndpZHRoIiwiYm9keSIsIm1hc3NSZWFkb3V0QmVsb3ciLCJ5IiwibWF4WCIsImhlaWdodCIsIm1pblkiLCJtYXNzUHJvcGVydHkiLCJsYXp5TGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWFzc1JlYWRvdXROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEFic3RyYWN0IGNsYXNzIHByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgZm9yIGRpc3BsYXlpbmcgdGhlIG1hc3MgcmVhZG91dCAoaW4gdGV4dCkgb2YgYSBCb2R5IG5vZGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQWFyb24gRGF2aXMgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBncmF2aXR5QW5kT3JiaXRzIGZyb20gJy4uLy4uL2dyYXZpdHlBbmRPcmJpdHMuanMnO1xyXG5pbXBvcnQgR3Jhdml0eUFuZE9yYml0c0NvbG9ycyBmcm9tICcuLi9HcmF2aXR5QW5kT3JiaXRzQ29sb3JzLmpzJztcclxuaW1wb3J0IEJvZHlOb2RlIGZyb20gJy4vQm9keU5vZGUuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdHJpbmdQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1N0cmluZ1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBNYXNzUmVhZG91dE5vZGVPcHRpb25zID0ge1xyXG4gIHRleHRNYXhXaWR0aD86IG51bWJlcjtcclxufTtcclxuXHJcbmFic3RyYWN0IGNsYXNzIE1hc3NSZWFkb3V0Tm9kZSBleHRlbmRzIFBhbmVsIHtcclxuICBwcm90ZWN0ZWQgYm9keU5vZGU6IEJvZHlOb2RlO1xyXG5cclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgc3RyaW5nUHJvcGVydHk7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYm9keU5vZGU6IEJvZHlOb2RlLCB2aXNpYmxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LCBwcm92aWRlZE9wdGlvbnM/OiBNYXNzUmVhZG91dE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnM6IE1hc3NSZWFkb3V0Tm9kZU9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICB0ZXh0TWF4V2lkdGg6IDI0MFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICkgYXMgTWFzc1JlYWRvdXROb2RlT3B0aW9ucztcclxuXHJcbiAgICBjb25zdCBzdHJpbmdQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJy0nICk7XHJcblxyXG4gICAgY29uc3QgcmVhZG91dFRleHQgPSBuZXcgVGV4dCggc3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgcGlja2FibGU6IGZhbHNlLFxyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE4ICksXHJcbiAgICAgIG1heFdpZHRoOiBvcHRpb25zLnRleHRNYXhXaWR0aCxcclxuICAgICAgZmlsbDogR3Jhdml0eUFuZE9yYml0c0NvbG9ycy5mb3JlZ3JvdW5kUHJvcGVydHlcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBFeHBhbmQgdGV4dCBhcmVhIHRvIHJlcGFpbnQgYXJ0aWZhY3RzXHJcbiAgICBzdXBlciggcmVhZG91dFRleHQsIHtcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiB2aXNpYmxlUHJvcGVydHksXHJcbiAgICAgIHN0cm9rZTogbnVsbCxcclxuICAgICAgZmlsbDogbmV3IENvbG9yKCAwLCAwLCAxLCAwLjAwMDEgKSxcclxuICAgICAgY29ybmVyUmFkaXVzOiAwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5ib2R5Tm9kZSA9IGJvZHlOb2RlO1xyXG5cclxuICAgIHRoaXMuc3RyaW5nUHJvcGVydHkgPSBzdHJpbmdQcm9wZXJ0eTtcclxuICAgIGNvbnN0IHVwZGF0ZVBvc2l0aW9uID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBib3VuZHMgPSBib2R5Tm9kZS5ib2R5UmVuZGVyZXIuZ2V0Qm91bmRzKCk7XHJcblxyXG4gICAgICB0aGlzLnggPSBib3VuZHMuY2VudGVyWCAtIHRoaXMud2lkdGggLyAyO1xyXG4gICAgICBpZiAoIGJvZHlOb2RlLmJvZHkubWFzc1JlYWRvdXRCZWxvdyApIHtcclxuICAgICAgICB0aGlzLnkgPSBib3VuZHMubWF4WCArIHRoaXMuaGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMueSA9IGJvdW5kcy5taW5ZIC0gdGhpcy5oZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgYm9keU5vZGUuYm9keS5tYXNzUHJvcGVydHkubGF6eUxpbmsoIHVwZGF0ZVBvc2l0aW9uICk7XHJcbiAgICB0aGlzLnN0cmluZ1Byb3BlcnR5LmxhenlMaW5rKCB1cGRhdGVQb3NpdGlvbiApO1xyXG4gICAgdmlzaWJsZVByb3BlcnR5LmxhenlMaW5rKCB1cGRhdGVQb3NpdGlvbiApO1xyXG4gIH1cclxufVxyXG5cclxuZ3Jhdml0eUFuZE9yYml0cy5yZWdpc3RlciggJ01hc3NSZWFkb3V0Tm9kZScsIE1hc3NSZWFkb3V0Tm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBNYXNzUmVhZG91dE5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxLQUFLLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDL0QsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUdqRSxPQUFPQyxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFNL0MsTUFBZUMsZUFBZSxTQUFTRCxLQUFLLENBQUM7RUFLcENFLFdBQVdBLENBQUVDLFFBQWtCLEVBQUVDLGVBQTJDLEVBQUVDLGVBQXdDLEVBQUc7SUFFOUgsTUFBTUMsT0FBK0IsR0FBR2IsS0FBSyxDQUFFO01BQzdDYyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxFQUFFRixlQUFnQixDQUEyQjtJQUU5QyxNQUFNRyxjQUFjLEdBQUcsSUFBSVQsY0FBYyxDQUFFLEdBQUksQ0FBQztJQUVoRCxNQUFNVSxXQUFXLEdBQUcsSUFBSWIsSUFBSSxDQUFFWSxjQUFjLEVBQUU7TUFDNUNFLFFBQVEsRUFBRSxLQUFLO01BQ2ZDLElBQUksRUFBRSxJQUFJakIsUUFBUSxDQUFFLEVBQUcsQ0FBQztNQUN4QmtCLFFBQVEsRUFBRU4sT0FBTyxDQUFDQyxZQUFZO01BQzlCTSxJQUFJLEVBQUVmLHNCQUFzQixDQUFDZ0I7SUFDL0IsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsS0FBSyxDQUFFTCxXQUFXLEVBQUU7TUFDbEJMLGVBQWUsRUFBRUEsZUFBZTtNQUNoQ1csTUFBTSxFQUFFLElBQUk7TUFDWkYsSUFBSSxFQUFFLElBQUlsQixLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTyxDQUFDO01BQ2xDcUIsWUFBWSxFQUFFO0lBQ2hCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ2IsUUFBUSxHQUFHQSxRQUFRO0lBRXhCLElBQUksQ0FBQ0ssY0FBYyxHQUFHQSxjQUFjO0lBQ3BDLE1BQU1TLGNBQWMsR0FBR0EsQ0FBQSxLQUFNO01BQzNCLE1BQU1DLE1BQU0sR0FBR2YsUUFBUSxDQUFDZ0IsWUFBWSxDQUFDQyxTQUFTLENBQUMsQ0FBQztNQUVoRCxJQUFJLENBQUNDLENBQUMsR0FBR0gsTUFBTSxDQUFDSSxPQUFPLEdBQUcsSUFBSSxDQUFDQyxLQUFLLEdBQUcsQ0FBQztNQUN4QyxJQUFLcEIsUUFBUSxDQUFDcUIsSUFBSSxDQUFDQyxnQkFBZ0IsRUFBRztRQUNwQyxJQUFJLENBQUNDLENBQUMsR0FBR1IsTUFBTSxDQUFDUyxJQUFJLEdBQUcsSUFBSSxDQUFDQyxNQUFNO01BQ3BDLENBQUMsTUFDSTtRQUNILElBQUksQ0FBQ0YsQ0FBQyxHQUFHUixNQUFNLENBQUNXLElBQUksR0FBRyxJQUFJLENBQUNELE1BQU07TUFDcEM7SUFDRixDQUFDO0lBRUR6QixRQUFRLENBQUNxQixJQUFJLENBQUNNLFlBQVksQ0FBQ0MsUUFBUSxDQUFFZCxjQUFlLENBQUM7SUFDckQsSUFBSSxDQUFDVCxjQUFjLENBQUN1QixRQUFRLENBQUVkLGNBQWUsQ0FBQztJQUM5Q2IsZUFBZSxDQUFDMkIsUUFBUSxDQUFFZCxjQUFlLENBQUM7RUFDNUM7QUFDRjtBQUVBcEIsZ0JBQWdCLENBQUNtQyxRQUFRLENBQUUsaUJBQWlCLEVBQUUvQixlQUFnQixDQUFDO0FBQy9ELGVBQWVBLGVBQWUifQ==