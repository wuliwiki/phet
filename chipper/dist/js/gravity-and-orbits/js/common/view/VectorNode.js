// Copyright 2014-2022, University of Colorado Boulder

/**
 * Draws a vector for a Body, such as a force vector or velocity vector.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import { Node } from '../../../../scenery/js/imports.js';
import gravityAndOrbits from '../../gravityAndOrbits.js';
import Multilink from '../../../../axon/js/Multilink.js';
import optionize from '../../../../phet-core/js/optionize.js';

// constants
const FORCE_SCALE = 76.0 / 5.179E15;
class VectorNode extends Node {
  static FORCE_SCALE = FORCE_SCALE;
  constructor(body, transformProperty, visibleProperty, vectorProperty, scale, fill, outline, tandem, providedOptions) {
    const options = optionize()({
      tandem: tandem,
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);
    super(options);
    this.body = body;
    this.vectorProperty = vectorProperty;
    this.body = body;
    this.transformProperty = transformProperty;
    this.vectorNodeScale = scale;

    // Only show if the body hasn't collided
    const shouldBeShownProperty = new DerivedProperty([visibleProperty, body.isCollidedProperty], (visible, collided) => visible && !collided);
    shouldBeShownProperty.linkAttribute(this, 'visible');
    const arrowNode = new ArrowNode(0, 0, 0, 0, {
      headHeight: 15,
      headWidth: 15,
      tailWidth: 5,
      fill: fill,
      stroke: outline,
      pickable: false,
      isHeadDynamic: true,
      scaleTailToo: true
    });
    this.propertyListener = visible => {
      if (visible) {
        const tail = this.getTail();
        const tip = this.getTip(tail);
        arrowNode.setTailAndTip(tail.x, tail.y, tip.x, tip.y);
      }
    };
    Multilink.multilink([visibleProperty, vectorProperty, body.positionProperty, transformProperty], this.propertyListener);
    this.addChild(arrowNode);
  }
  getTail() {
    return this.transformProperty.get().modelToViewPosition(this.body.positionProperty.get());
  }
  getTip(tail = this.getTail()) {
    const force = this.transformProperty.get().modelToViewDelta(this.vectorProperty.get().times(this.vectorNodeScale));
    return new Vector2(force.x + tail.x, force.y + tail.y);
  }
}
gravityAndOrbits.register('VectorNode', VectorNode);
export default VectorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,