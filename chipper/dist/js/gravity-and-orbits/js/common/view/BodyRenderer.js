// Copyright 2014-2022, University of Colorado Boulder

/**
 * This is the Node that renders the content of a physical body, such as a planet or space station.  This component
 * is separate from BodyNode since it is used to create icons.  It is also used to be able to switch between rendering
 * types (i.e. image vs cartoon sphere) without changing any other characteristics of the Node.
 *
 * The classes SwitchableBodyRenderer, SphereRenderer, ImageRenderer, and SunRenderer were static classes in the Java
 * version.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 */

import Matrix3 from '../../../../dot/js/Matrix3.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Image, Node, Path } from '../../../../scenery/js/imports.js';
import sun_png from '../../../mipmaps/sun_png.js';
import gravityAndOrbits from '../../gravityAndOrbits.js';
export default class BodyRenderer extends Node {
  constructor(body) {
    super();
    this.body = body;
  }
  getBody() {
    return this.body;
  }
}
gravityAndOrbits.register('BodyRenderer', BodyRenderer);
export class SwitchableBodyRenderer extends BodyRenderer {
  /**
   * This SwitchableBodyRenderer displays one representation when the object is at a specific mass, and a different
   * renderer otherwise.  This is so that (e.g.) the planet can be drawn with an earth image when its mass is equal to
   * earth mass or otherwise drawn as a sphere with a gradient paint.
   */
  constructor(body, targetMass, targetBodyRenderer, defaultBodyRenderer) {
    super(body);

    // (read-only)
    this.targetBodyRenderer = targetBodyRenderer;
    this.defaultBodyRenderer = defaultBodyRenderer;
    this.addChild(defaultBodyRenderer);
    this.addChild(targetBodyRenderer);
    this.massListener = () => {
      const showTarget = body.massProperty.get() === targetMass;
      targetBodyRenderer.visible = showTarget;
      defaultBodyRenderer.visible = !showTarget;
    };
    body.massProperty.link(this.massListener.bind(this));
  }

  /**
   * Set the diameter for the renderer in view coordinates for both the current and default renderers.
   */
  setDiameter(viewDiameter) {
    this.targetBodyRenderer.setDiameter(viewDiameter);
    this.defaultBodyRenderer.setDiameter(viewDiameter);
  }
}
gravityAndOrbits.register('SwitchableBodyRenderer', SwitchableBodyRenderer);
export class ImageRenderer extends BodyRenderer {
  /**
   * Renders the body using the specified image and the specified diameter in view coordinates.
   */
  constructor(body, viewDiameter, imageName) {
    super(body);
    this.imageNode = new Image(imageName);
    this.viewDiameter = viewDiameter;
    this.addChild(this.imageNode);
    this.updateViewDiameter();
  }

  /**
   * Set the diameter for the rednerer in view coordinates
   */
  setDiameter(viewDiameter) {
    this.viewDiameter = viewDiameter;
    this.updateViewDiameter();
  }
  updateViewDiameter() {
    this.imageNode.matrix = new Matrix3();
    const scale = this.viewDiameter / this.imageNode.width;
    this.imageNode.setScaleMagnitude(scale);

    // Make sure the image is centered on the body's center
    this.imageNode.translate(-this.imageNode.width / 2 / scale, -this.imageNode.height / 2 / scale);
  }
}
gravityAndOrbits.register('ImageRenderer', ImageRenderer);
export class SunRenderer extends ImageRenderer {
  /**
   * Adds triangle edges to the sun to make it look more recognizable
   */
  constructor(body, viewDiameter, numSegments, twinkleRadius) {
    super(body, viewDiameter, sun_png);
    this.twinkles = new Path(null, {
      fill: 'yellow'
    });
    this.numSegments = numSegments;
    this.twinkleRadius = twinkleRadius;
    this.addChild(this.twinkles);
    this.twinkles.moveToBack();
    this.setDiameter(viewDiameter);
  }

  /**
   * Set the diamater for the sun, based on view coordinates.
   *
   * @param  {number} viewDiameter
   */
  setDiameter(viewDiameter) {
    super.setDiameter(viewDiameter);
    let angle = 0;
    const deltaAngle = Math.PI * 2 / this.numSegments;
    const radius = viewDiameter / 2;
    const shape = new Shape();
    shape.moveTo(0, 0);
    for (let i = 0; i < this.numSegments + 1; i++) {
      const myRadius = i % 2 === 0 ? this.twinkleRadius(radius) : radius;
      const target = Vector2.createPolar(myRadius, angle);
      shape.lineToPoint(target);
      angle += deltaAngle;
    }
    this.twinkles.setShape(shape);
  }
}
gravityAndOrbits.register('SunRenderer', SunRenderer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiVmVjdG9yMiIsIlNoYXBlIiwiSW1hZ2UiLCJOb2RlIiwiUGF0aCIsInN1bl9wbmciLCJncmF2aXR5QW5kT3JiaXRzIiwiQm9keVJlbmRlcmVyIiwiY29uc3RydWN0b3IiLCJib2R5IiwiZ2V0Qm9keSIsInJlZ2lzdGVyIiwiU3dpdGNoYWJsZUJvZHlSZW5kZXJlciIsInRhcmdldE1hc3MiLCJ0YXJnZXRCb2R5UmVuZGVyZXIiLCJkZWZhdWx0Qm9keVJlbmRlcmVyIiwiYWRkQ2hpbGQiLCJtYXNzTGlzdGVuZXIiLCJzaG93VGFyZ2V0IiwibWFzc1Byb3BlcnR5IiwiZ2V0IiwidmlzaWJsZSIsImxpbmsiLCJiaW5kIiwic2V0RGlhbWV0ZXIiLCJ2aWV3RGlhbWV0ZXIiLCJJbWFnZVJlbmRlcmVyIiwiaW1hZ2VOYW1lIiwiaW1hZ2VOb2RlIiwidXBkYXRlVmlld0RpYW1ldGVyIiwibWF0cml4Iiwic2NhbGUiLCJ3aWR0aCIsInNldFNjYWxlTWFnbml0dWRlIiwidHJhbnNsYXRlIiwiaGVpZ2h0IiwiU3VuUmVuZGVyZXIiLCJudW1TZWdtZW50cyIsInR3aW5rbGVSYWRpdXMiLCJ0d2lua2xlcyIsImZpbGwiLCJtb3ZlVG9CYWNrIiwiYW5nbGUiLCJkZWx0YUFuZ2xlIiwiTWF0aCIsIlBJIiwicmFkaXVzIiwic2hhcGUiLCJtb3ZlVG8iLCJpIiwibXlSYWRpdXMiLCJ0YXJnZXQiLCJjcmVhdGVQb2xhciIsImxpbmVUb1BvaW50Iiwic2V0U2hhcGUiXSwic291cmNlcyI6WyJCb2R5UmVuZGVyZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBpcyB0aGUgTm9kZSB0aGF0IHJlbmRlcnMgdGhlIGNvbnRlbnQgb2YgYSBwaHlzaWNhbCBib2R5LCBzdWNoIGFzIGEgcGxhbmV0IG9yIHNwYWNlIHN0YXRpb24uICBUaGlzIGNvbXBvbmVudFxyXG4gKiBpcyBzZXBhcmF0ZSBmcm9tIEJvZHlOb2RlIHNpbmNlIGl0IGlzIHVzZWQgdG8gY3JlYXRlIGljb25zLiAgSXQgaXMgYWxzbyB1c2VkIHRvIGJlIGFibGUgdG8gc3dpdGNoIGJldHdlZW4gcmVuZGVyaW5nXHJcbiAqIHR5cGVzIChpLmUuIGltYWdlIHZzIGNhcnRvb24gc3BoZXJlKSB3aXRob3V0IGNoYW5naW5nIGFueSBvdGhlciBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIE5vZGUuXHJcbiAqXHJcbiAqIFRoZSBjbGFzc2VzIFN3aXRjaGFibGVCb2R5UmVuZGVyZXIsIFNwaGVyZVJlbmRlcmVyLCBJbWFnZVJlbmRlcmVyLCBhbmQgU3VuUmVuZGVyZXIgd2VyZSBzdGF0aWMgY2xhc3NlcyBpbiB0aGUgSmF2YVxyXG4gKiB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEFhcm9uIERhdmlzIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNYXRyaXgzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9NYXRyaXgzLmpzJztcclxuaW1wb3J0IEJvZHkgZnJvbSAnLi4vbW9kZWwvQm9keS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBJbWFnZSwgTWlwbWFwLCBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHN1bl9wbmcgZnJvbSAnLi4vLi4vLi4vbWlwbWFwcy9zdW5fcG5nLmpzJztcclxuaW1wb3J0IGdyYXZpdHlBbmRPcmJpdHMgZnJvbSAnLi4vLi4vZ3Jhdml0eUFuZE9yYml0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBCb2R5UmVuZGVyZXIgZXh0ZW5kcyBOb2RlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGJvZHk6IEJvZHk7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldEJvZHlSZW5kZXJlcj86IEJvZHlSZW5kZXJlcjtcclxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBJbWFnZVJlbmRlcmVyOiB0eXBlb2YgSW1hZ2VSZW5kZXJlcjtcclxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTd2l0Y2hhYmxlQm9keVJlbmRlcmVyOiB0eXBlb2YgU3dpdGNoYWJsZUJvZHlSZW5kZXJlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBib2R5OiBCb2R5ICkge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5ib2R5ID0gYm9keTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Qm9keSgpOiBCb2R5IHtcclxuICAgIHJldHVybiB0aGlzLmJvZHk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWJzdHJhY3Qgc2V0RGlhbWV0ZXIoIHZpZXdEaWFtZXRlcjogbnVtYmVyICk6IHZvaWQ7XHJcbn1cclxuXHJcbmdyYXZpdHlBbmRPcmJpdHMucmVnaXN0ZXIoICdCb2R5UmVuZGVyZXInLCBCb2R5UmVuZGVyZXIgKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTd2l0Y2hhYmxlQm9keVJlbmRlcmVyIGV4dGVuZHMgQm9keVJlbmRlcmVyIHtcclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVhZG9ubHkgdGFyZ2V0Qm9keVJlbmRlcmVyOiBCb2R5UmVuZGVyZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0Qm9keVJlbmRlcmVyOiBCb2R5UmVuZGVyZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBtYXNzTGlzdGVuZXI6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgU3dpdGNoYWJsZUJvZHlSZW5kZXJlciBkaXNwbGF5cyBvbmUgcmVwcmVzZW50YXRpb24gd2hlbiB0aGUgb2JqZWN0IGlzIGF0IGEgc3BlY2lmaWMgbWFzcywgYW5kIGEgZGlmZmVyZW50XHJcbiAgICogcmVuZGVyZXIgb3RoZXJ3aXNlLiAgVGhpcyBpcyBzbyB0aGF0IChlLmcuKSB0aGUgcGxhbmV0IGNhbiBiZSBkcmF3biB3aXRoIGFuIGVhcnRoIGltYWdlIHdoZW4gaXRzIG1hc3MgaXMgZXF1YWwgdG9cclxuICAgKiBlYXJ0aCBtYXNzIG9yIG90aGVyd2lzZSBkcmF3biBhcyBhIHNwaGVyZSB3aXRoIGEgZ3JhZGllbnQgcGFpbnQuXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBib2R5OiBCb2R5LCB0YXJnZXRNYXNzOiBudW1iZXIsIHRhcmdldEJvZHlSZW5kZXJlcjogQm9keVJlbmRlcmVyLCBkZWZhdWx0Qm9keVJlbmRlcmVyOiBCb2R5UmVuZGVyZXIgKSB7XHJcblxyXG4gICAgc3VwZXIoIGJvZHkgKTtcclxuXHJcbiAgICAvLyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy50YXJnZXRCb2R5UmVuZGVyZXIgPSB0YXJnZXRCb2R5UmVuZGVyZXI7XHJcbiAgICB0aGlzLmRlZmF1bHRCb2R5UmVuZGVyZXIgPSBkZWZhdWx0Qm9keVJlbmRlcmVyO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIGRlZmF1bHRCb2R5UmVuZGVyZXIgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRhcmdldEJvZHlSZW5kZXJlciApO1xyXG5cclxuICAgIHRoaXMubWFzc0xpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBzaG93VGFyZ2V0ID0gYm9keS5tYXNzUHJvcGVydHkuZ2V0KCkgPT09IHRhcmdldE1hc3M7XHJcbiAgICAgIHRhcmdldEJvZHlSZW5kZXJlci52aXNpYmxlID0gc2hvd1RhcmdldDtcclxuICAgICAgZGVmYXVsdEJvZHlSZW5kZXJlci52aXNpYmxlID0gIXNob3dUYXJnZXQ7XHJcbiAgICB9O1xyXG4gICAgYm9keS5tYXNzUHJvcGVydHkubGluayggdGhpcy5tYXNzTGlzdGVuZXIuYmluZCggdGhpcyApICk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBkaWFtZXRlciBmb3IgdGhlIHJlbmRlcmVyIGluIHZpZXcgY29vcmRpbmF0ZXMgZm9yIGJvdGggdGhlIGN1cnJlbnQgYW5kIGRlZmF1bHQgcmVuZGVyZXJzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXREaWFtZXRlciggdmlld0RpYW1ldGVyOiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICB0aGlzLnRhcmdldEJvZHlSZW5kZXJlci5zZXREaWFtZXRlciggdmlld0RpYW1ldGVyICk7XHJcbiAgICB0aGlzLmRlZmF1bHRCb2R5UmVuZGVyZXIuc2V0RGlhbWV0ZXIoIHZpZXdEaWFtZXRlciApO1xyXG4gIH1cclxufVxyXG5cclxuZ3Jhdml0eUFuZE9yYml0cy5yZWdpc3RlciggJ1N3aXRjaGFibGVCb2R5UmVuZGVyZXInLCBTd2l0Y2hhYmxlQm9keVJlbmRlcmVyICk7XHJcblxyXG5leHBvcnQgY2xhc3MgSW1hZ2VSZW5kZXJlciBleHRlbmRzIEJvZHlSZW5kZXJlciB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBpbWFnZU5vZGU6IEltYWdlO1xyXG4gIHByaXZhdGUgdmlld0RpYW1ldGVyOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbmRlcnMgdGhlIGJvZHkgdXNpbmcgdGhlIHNwZWNpZmllZCBpbWFnZSBhbmQgdGhlIHNwZWNpZmllZCBkaWFtZXRlciBpbiB2aWV3IGNvb3JkaW5hdGVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYm9keTogQm9keSwgdmlld0RpYW1ldGVyOiBudW1iZXIsIGltYWdlTmFtZTogTWlwbWFwICkge1xyXG5cclxuICAgIHN1cGVyKCBib2R5ICk7XHJcblxyXG4gICAgdGhpcy5pbWFnZU5vZGUgPSBuZXcgSW1hZ2UoIGltYWdlTmFtZSApO1xyXG4gICAgdGhpcy52aWV3RGlhbWV0ZXIgPSB2aWV3RGlhbWV0ZXI7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLmltYWdlTm9kZSApO1xyXG5cclxuICAgIHRoaXMudXBkYXRlVmlld0RpYW1ldGVyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIGRpYW1ldGVyIGZvciB0aGUgcmVkbmVyZXIgaW4gdmlldyBjb29yZGluYXRlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXREaWFtZXRlciggdmlld0RpYW1ldGVyOiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICB0aGlzLnZpZXdEaWFtZXRlciA9IHZpZXdEaWFtZXRlcjtcclxuICAgIHRoaXMudXBkYXRlVmlld0RpYW1ldGVyKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVZpZXdEaWFtZXRlcigpOiB2b2lkIHtcclxuICAgIHRoaXMuaW1hZ2VOb2RlLm1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XHJcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMudmlld0RpYW1ldGVyIC8gdGhpcy5pbWFnZU5vZGUud2lkdGg7XHJcbiAgICB0aGlzLmltYWdlTm9kZS5zZXRTY2FsZU1hZ25pdHVkZSggc2NhbGUgKTtcclxuXHJcbiAgICAvLyBNYWtlIHN1cmUgdGhlIGltYWdlIGlzIGNlbnRlcmVkIG9uIHRoZSBib2R5J3MgY2VudGVyXHJcbiAgICB0aGlzLmltYWdlTm9kZS50cmFuc2xhdGUoIC10aGlzLmltYWdlTm9kZS53aWR0aCAvIDIgLyBzY2FsZSwgLXRoaXMuaW1hZ2VOb2RlLmhlaWdodCAvIDIgLyBzY2FsZSApO1xyXG4gIH1cclxufVxyXG5cclxuZ3Jhdml0eUFuZE9yYml0cy5yZWdpc3RlciggJ0ltYWdlUmVuZGVyZXInLCBJbWFnZVJlbmRlcmVyICk7XHJcblxyXG5leHBvcnQgY2xhc3MgU3VuUmVuZGVyZXIgZXh0ZW5kcyBJbWFnZVJlbmRlcmVyIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IHR3aW5rbGVzOiBQYXRoO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbnVtU2VnbWVudHM6IG51bWJlcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IHR3aW5rbGVSYWRpdXM6ICggbjogbnVtYmVyICkgPT4gbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBBZGRzIHRyaWFuZ2xlIGVkZ2VzIHRvIHRoZSBzdW4gdG8gbWFrZSBpdCBsb29rIG1vcmUgcmVjb2duaXphYmxlXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBib2R5OiBCb2R5LCB2aWV3RGlhbWV0ZXI6IG51bWJlciwgbnVtU2VnbWVudHM6IG51bWJlciwgdHdpbmtsZVJhZGl1czogKCBuOiBudW1iZXIgKSA9PiBudW1iZXIgKSB7XHJcbiAgICBzdXBlciggYm9keSwgdmlld0RpYW1ldGVyLCBzdW5fcG5nICk7XHJcbiAgICB0aGlzLnR3aW5rbGVzID0gbmV3IFBhdGgoIG51bGwsIHsgZmlsbDogJ3llbGxvdycgfSApO1xyXG4gICAgdGhpcy5udW1TZWdtZW50cyA9IG51bVNlZ21lbnRzO1xyXG4gICAgdGhpcy50d2lua2xlUmFkaXVzID0gdHdpbmtsZVJhZGl1cztcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMudHdpbmtsZXMgKTtcclxuICAgIHRoaXMudHdpbmtsZXMubW92ZVRvQmFjaygpO1xyXG4gICAgdGhpcy5zZXREaWFtZXRlciggdmlld0RpYW1ldGVyICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIGRpYW1hdGVyIGZvciB0aGUgc3VuLCBiYXNlZCBvbiB2aWV3IGNvb3JkaW5hdGVzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7bnVtYmVyfSB2aWV3RGlhbWV0ZXJcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgc2V0RGlhbWV0ZXIoIHZpZXdEaWFtZXRlcjogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgc3VwZXIuc2V0RGlhbWV0ZXIoIHZpZXdEaWFtZXRlciApO1xyXG4gICAgbGV0IGFuZ2xlID0gMDtcclxuICAgIGNvbnN0IGRlbHRhQW5nbGUgPSBNYXRoLlBJICogMiAvIHRoaXMubnVtU2VnbWVudHM7XHJcbiAgICBjb25zdCByYWRpdXMgPSB2aWV3RGlhbWV0ZXIgLyAyO1xyXG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICAgIHNoYXBlLm1vdmVUbyggMCwgMCApO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5udW1TZWdtZW50cyArIDE7IGkrKyApIHtcclxuICAgICAgY29uc3QgbXlSYWRpdXMgPSAoIGkgJSAyID09PSAwICkgPyB0aGlzLnR3aW5rbGVSYWRpdXMoIHJhZGl1cyApIDogcmFkaXVzO1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBWZWN0b3IyLmNyZWF0ZVBvbGFyKCBteVJhZGl1cywgYW5nbGUgKTtcclxuICAgICAgc2hhcGUubGluZVRvUG9pbnQoIHRhcmdldCApO1xyXG4gICAgICBhbmdsZSArPSBkZWx0YUFuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy50d2lua2xlcy5zZXRTaGFwZSggc2hhcGUgKTtcclxuICB9XHJcbn1cclxuXHJcbmdyYXZpdHlBbmRPcmJpdHMucmVnaXN0ZXIoICdTdW5SZW5kZXJlcicsIFN1blJlbmRlcmVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFFbkQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELFNBQVNDLEtBQUssRUFBVUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzdFLE9BQU9DLE9BQU8sTUFBTSw2QkFBNkI7QUFDakQsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBRXhELGVBQWUsTUFBZUMsWUFBWSxTQUFTSixJQUFJLENBQUM7RUFNL0NLLFdBQVdBLENBQUVDLElBQVUsRUFBRztJQUUvQixLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0EsSUFBSSxHQUFHQSxJQUFJO0VBQ2xCO0VBRVFDLE9BQU9BLENBQUEsRUFBUztJQUN0QixPQUFPLElBQUksQ0FBQ0QsSUFBSTtFQUNsQjtBQUdGO0FBRUFILGdCQUFnQixDQUFDSyxRQUFRLENBQUUsY0FBYyxFQUFFSixZQUFhLENBQUM7QUFFekQsT0FBTyxNQUFNSyxzQkFBc0IsU0FBU0wsWUFBWSxDQUFDO0VBS3ZEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsSUFBVSxFQUFFSSxVQUFrQixFQUFFQyxrQkFBZ0MsRUFBRUMsbUJBQWlDLEVBQUc7SUFFeEgsS0FBSyxDQUFFTixJQUFLLENBQUM7O0lBRWI7SUFDQSxJQUFJLENBQUNLLGtCQUFrQixHQUFHQSxrQkFBa0I7SUFDNUMsSUFBSSxDQUFDQyxtQkFBbUIsR0FBR0EsbUJBQW1CO0lBRTlDLElBQUksQ0FBQ0MsUUFBUSxDQUFFRCxtQkFBb0IsQ0FBQztJQUNwQyxJQUFJLENBQUNDLFFBQVEsQ0FBRUYsa0JBQW1CLENBQUM7SUFFbkMsSUFBSSxDQUFDRyxZQUFZLEdBQUcsTUFBTTtNQUN4QixNQUFNQyxVQUFVLEdBQUdULElBQUksQ0FBQ1UsWUFBWSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxLQUFLUCxVQUFVO01BQ3pEQyxrQkFBa0IsQ0FBQ08sT0FBTyxHQUFHSCxVQUFVO01BQ3ZDSCxtQkFBbUIsQ0FBQ00sT0FBTyxHQUFHLENBQUNILFVBQVU7SUFDM0MsQ0FBQztJQUNEVCxJQUFJLENBQUNVLFlBQVksQ0FBQ0csSUFBSSxDQUFFLElBQUksQ0FBQ0wsWUFBWSxDQUFDTSxJQUFJLENBQUUsSUFBSyxDQUFFLENBQUM7RUFFMUQ7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLFlBQW9CLEVBQVM7SUFDL0MsSUFBSSxDQUFDWCxrQkFBa0IsQ0FBQ1UsV0FBVyxDQUFFQyxZQUFhLENBQUM7SUFDbkQsSUFBSSxDQUFDVixtQkFBbUIsQ0FBQ1MsV0FBVyxDQUFFQyxZQUFhLENBQUM7RUFDdEQ7QUFDRjtBQUVBbkIsZ0JBQWdCLENBQUNLLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRUMsc0JBQXVCLENBQUM7QUFFN0UsT0FBTyxNQUFNYyxhQUFhLFNBQVNuQixZQUFZLENBQUM7RUFJOUM7QUFDRjtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLElBQVUsRUFBRWdCLFlBQW9CLEVBQUVFLFNBQWlCLEVBQUc7SUFFeEUsS0FBSyxDQUFFbEIsSUFBSyxDQUFDO0lBRWIsSUFBSSxDQUFDbUIsU0FBUyxHQUFHLElBQUkxQixLQUFLLENBQUV5QixTQUFVLENBQUM7SUFDdkMsSUFBSSxDQUFDRixZQUFZLEdBQUdBLFlBQVk7SUFDaEMsSUFBSSxDQUFDVCxRQUFRLENBQUUsSUFBSSxDQUFDWSxTQUFVLENBQUM7SUFFL0IsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQyxDQUFDO0VBQzNCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTTCxXQUFXQSxDQUFFQyxZQUFvQixFQUFTO0lBQy9DLElBQUksQ0FBQ0EsWUFBWSxHQUFHQSxZQUFZO0lBQ2hDLElBQUksQ0FBQ0ksa0JBQWtCLENBQUMsQ0FBQztFQUMzQjtFQUVRQSxrQkFBa0JBLENBQUEsRUFBUztJQUNqQyxJQUFJLENBQUNELFNBQVMsQ0FBQ0UsTUFBTSxHQUFHLElBQUkvQixPQUFPLENBQUMsQ0FBQztJQUNyQyxNQUFNZ0MsS0FBSyxHQUFHLElBQUksQ0FBQ04sWUFBWSxHQUFHLElBQUksQ0FBQ0csU0FBUyxDQUFDSSxLQUFLO0lBQ3RELElBQUksQ0FBQ0osU0FBUyxDQUFDSyxpQkFBaUIsQ0FBRUYsS0FBTSxDQUFDOztJQUV6QztJQUNBLElBQUksQ0FBQ0gsU0FBUyxDQUFDTSxTQUFTLENBQUUsQ0FBQyxJQUFJLENBQUNOLFNBQVMsQ0FBQ0ksS0FBSyxHQUFHLENBQUMsR0FBR0QsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDSCxTQUFTLENBQUNPLE1BQU0sR0FBRyxDQUFDLEdBQUdKLEtBQU0sQ0FBQztFQUNuRztBQUNGO0FBRUF6QixnQkFBZ0IsQ0FBQ0ssUUFBUSxDQUFFLGVBQWUsRUFBRWUsYUFBYyxDQUFDO0FBRTNELE9BQU8sTUFBTVUsV0FBVyxTQUFTVixhQUFhLENBQUM7RUFLN0M7QUFDRjtBQUNBO0VBQ1NsQixXQUFXQSxDQUFFQyxJQUFVLEVBQUVnQixZQUFvQixFQUFFWSxXQUFtQixFQUFFQyxhQUFzQyxFQUFHO0lBQ2xILEtBQUssQ0FBRTdCLElBQUksRUFBRWdCLFlBQVksRUFBRXBCLE9BQVEsQ0FBQztJQUNwQyxJQUFJLENBQUNrQyxRQUFRLEdBQUcsSUFBSW5DLElBQUksQ0FBRSxJQUFJLEVBQUU7TUFBRW9DLElBQUksRUFBRTtJQUFTLENBQUUsQ0FBQztJQUNwRCxJQUFJLENBQUNILFdBQVcsR0FBR0EsV0FBVztJQUM5QixJQUFJLENBQUNDLGFBQWEsR0FBR0EsYUFBYTtJQUNsQyxJQUFJLENBQUN0QixRQUFRLENBQUUsSUFBSSxDQUFDdUIsUUFBUyxDQUFDO0lBQzlCLElBQUksQ0FBQ0EsUUFBUSxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUMxQixJQUFJLENBQUNqQixXQUFXLENBQUVDLFlBQWEsQ0FBQztFQUNsQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ2tCRCxXQUFXQSxDQUFFQyxZQUFvQixFQUFTO0lBQ3hELEtBQUssQ0FBQ0QsV0FBVyxDQUFFQyxZQUFhLENBQUM7SUFDakMsSUFBSWlCLEtBQUssR0FBRyxDQUFDO0lBQ2IsTUFBTUMsVUFBVSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDUixXQUFXO0lBQ2pELE1BQU1TLE1BQU0sR0FBR3JCLFlBQVksR0FBRyxDQUFDO0lBQy9CLE1BQU1zQixLQUFLLEdBQUcsSUFBSTlDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCOEMsS0FBSyxDQUFDQyxNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztJQUNwQixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNaLFdBQVcsR0FBRyxDQUFDLEVBQUVZLENBQUMsRUFBRSxFQUFHO01BQy9DLE1BQU1DLFFBQVEsR0FBS0QsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUssSUFBSSxDQUFDWCxhQUFhLENBQUVRLE1BQU8sQ0FBQyxHQUFHQSxNQUFNO01BQ3hFLE1BQU1LLE1BQU0sR0FBR25ELE9BQU8sQ0FBQ29ELFdBQVcsQ0FBRUYsUUFBUSxFQUFFUixLQUFNLENBQUM7TUFDckRLLEtBQUssQ0FBQ00sV0FBVyxDQUFFRixNQUFPLENBQUM7TUFDM0JULEtBQUssSUFBSUMsVUFBVTtJQUNyQjtJQUNBLElBQUksQ0FBQ0osUUFBUSxDQUFDZSxRQUFRLENBQUVQLEtBQU0sQ0FBQztFQUNqQztBQUNGO0FBRUF6QyxnQkFBZ0IsQ0FBQ0ssUUFBUSxDQUFFLGFBQWEsRUFBRXlCLFdBQVksQ0FBQyJ9