// Copyright 2014-2023, University of Colorado Boulder

/**
 * This is a property that can be rewound, and when rewound it goes back to the value that was last set by
 * storeRewindValueNoNotify. In this sim, the rewind value is stored at the initial configuration of a mode, or when a
 * user modifies the position of a body.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Property from '../../../../axon/js/Property.js';
import gravityAndOrbits from '../../gravityAndOrbits.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
class RewindableProperty extends Property {
  /**
   * An observable Property that triggers notifications when the value changes.
   * This caching implementation should be kept in sync with the other parametric IO Type caching implementations.
   */
  static RewindablePropertyIO = parameterType => {
    assert && assert(parameterType, 'RewindablePropertyIO needs parameterType');
    const cacheKey = parameterType;
    if (!cache.has(cacheKey)) {
      const PropertyIOImpl = Property.PropertyIO(parameterType);
      cache.set(cacheKey, new IOType(`RewindablePropertyIO<${parameterType.typeName}>`, {
        valueType: RewindableProperty,
        parameterTypes: [parameterType],
        documentation: 'Observable values that send out notifications when the value changes. This differs from the ' + 'traditional listener pattern in that added listeners also receive a callback with the current value ' + 'when the listeners are registered. This is a widely-used pattern in PhET-iO simulations.',
        supertype: PropertyIOImpl,
        toStateObject: property => {
          const stateObject = PropertyIOImpl.toStateObject(property);
          stateObject.rewindValue = parameterType.toStateObject(property.rewindValue);
          return stateObject;
        },
        applyState: (property, stateObject) => {
          PropertyIOImpl.applyState(property, stateObject);
          property.rewindValue = parameterType.fromStateObject(stateObject.rewindValue);
          property.updateDifferentProperty();
        },
        stateSchema: {
          rewindValue: parameterType
        }
      }));
    }
    return cache.get(cacheKey);
  };

  /**
   * @param changeRewindValueProperty - whether the newly set value should be captured as a rewindable point
   * @param value
   * @param [providedOptions]
   */
  constructor(changeRewindValueProperty, value, providedOptions) {
    const options = combineOptions({
      tandem: Tandem.OPTIONAL,
      phetioOuterType: RewindableProperty.RewindablePropertyIO
    }, providedOptions);
    super(value, options);

    // the "initial condition" the property can be rewound to, different than the overall "reset" value
    this.rewindValue = value;
    this.changeRewindValueProperty = changeRewindValueProperty;

    // (read-only) true when the rewind point value is different than the property's current value
    this.differentProperty = new BooleanProperty(!this.equalsRewindValue(), {
      tandem: options.tandem.createTandem('differentProperty'),
      phetioFeatured: false,
      phetioReadOnly: true,
      phetioDocumentation: 'for internal PhET use only'
    });
    this.link(() => {
      this.updateDifferentProperty();
    });
  }

  /**
   * Reset both the value and the rewind value.
   */
  reset() {
    super.reset();

    // reset the rewind value as well
    this.rewindValue = this.value;
    this.updateDifferentProperty();
  }

  // Whenever the primary value or rewindValue changes, update whether they differ
  updateDifferentProperty() {
    this.differentProperty.set(!this.equalsRewindValue());
  }
  set(value) {
    super.set(value);

    // If the user changed the initial conditions (as opposed to the state changing through model stepping),
    // then store the new initial conditions, which can be rewound to
    if (this.changeRewindValueProperty.get()) {
      this.storeRewindValueNoNotify();
    }
    this.updateDifferentProperty();
    return this;
  }

  /**
   * Store the new value as the initial condition which can be rewound to. We have to skip notifications sometimes
   * or the wrong initial conditions get stored.
   */
  storeRewindValueNoNotify() {
    this.rewindValue = this.get();
    this.updateDifferentProperty();
  }

  /**
   * Check for equality between current and rewind values.  Supported types are number, boolean
   * and Vector2.
   */
  equalsRewindValue() {
    const rewindValue = this.rewindValue;

    // if an object, must call unique function to check for equality
    if (typeof rewindValue !== 'number' && typeof rewindValue !== 'boolean' && typeof rewindValue !== 'string') {
      return rewindValue.equals(this.get());
    } else {
      return this.rewindValue === this.get();
    }
  }

  /**
   * Set the value to match the last recorded rewindValue
   */
  rewind() {
    this.set(this.rewindValue);
  }
}

// {Map.<IOType, IOType>} - Cache each parameterized RewindablePropertyIO so that it is only created once
const cache = new Map();
gravityAndOrbits.register('RewindableProperty', RewindableProperty);
export default RewindableProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,