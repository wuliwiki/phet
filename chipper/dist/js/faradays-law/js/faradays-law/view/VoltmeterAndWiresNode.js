// Copyright 2018-2021, University of Colorado Boulder

/**
 * A Node that holds the Voltmeter and the Voltmeter wires. This is handy for phet-io because we want both of these
 * child nodes to be controlled in the same way (with visibility, opacity etc).
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import { Node } from '../../../../scenery/js/imports.js';
import faradaysLaw from '../../faradaysLaw.js';
import FaradaysLawConstants from '../FaradaysLawConstants.js';
import VoltmeterNode from './VoltmeterNode.js';
import VoltmeterWiresNode from './VoltmeterWiresNode.js';
class VoltmeterAndWiresNode extends Node {
  /**
   * @param {NumberProperty} needleAngleProperty - angle of needle in voltmeter
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(needleAngleProperty, tandem, options) {
    options = merge({
      tandem: tandem,
      phetioDocumentation: 'The voltmeter and its connecting wires'
    }, options);
    super(options);

    // pass an unmodified tandem in so that the VoltmeterNode's children look the this types children.
    const voltmeterNode = new VoltmeterNode(needleAngleProperty, tandem);
    const voltmeterWiresNode = new VoltmeterWiresNode(voltmeterNode);
    voltmeterNode.center = FaradaysLawConstants.VOLTMETER_POSITION;
    this.children = [voltmeterNode, voltmeterWiresNode];
  }
}
faradaysLaw.register('VoltmeterAndWiresNode', VoltmeterAndWiresNode);
export default VoltmeterAndWiresNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJmYXJhZGF5c0xhdyIsIkZhcmFkYXlzTGF3Q29uc3RhbnRzIiwiVm9sdG1ldGVyTm9kZSIsIlZvbHRtZXRlcldpcmVzTm9kZSIsIlZvbHRtZXRlckFuZFdpcmVzTm9kZSIsImNvbnN0cnVjdG9yIiwibmVlZGxlQW5nbGVQcm9wZXJ0eSIsInRhbmRlbSIsIm9wdGlvbnMiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwidm9sdG1ldGVyTm9kZSIsInZvbHRtZXRlcldpcmVzTm9kZSIsImNlbnRlciIsIlZPTFRNRVRFUl9QT1NJVElPTiIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJWb2x0bWV0ZXJBbmRXaXJlc05vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBOb2RlIHRoYXQgaG9sZHMgdGhlIFZvbHRtZXRlciBhbmQgdGhlIFZvbHRtZXRlciB3aXJlcy4gVGhpcyBpcyBoYW5keSBmb3IgcGhldC1pbyBiZWNhdXNlIHdlIHdhbnQgYm90aCBvZiB0aGVzZVxyXG4gKiBjaGlsZCBub2RlcyB0byBiZSBjb250cm9sbGVkIGluIHRoZSBzYW1lIHdheSAod2l0aCB2aXNpYmlsaXR5LCBvcGFjaXR5IGV0YykuXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBmYXJhZGF5c0xhdyBmcm9tICcuLi8uLi9mYXJhZGF5c0xhdy5qcyc7XHJcbmltcG9ydCBGYXJhZGF5c0xhd0NvbnN0YW50cyBmcm9tICcuLi9GYXJhZGF5c0xhd0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBWb2x0bWV0ZXJOb2RlIGZyb20gJy4vVm9sdG1ldGVyTm9kZS5qcyc7XHJcbmltcG9ydCBWb2x0bWV0ZXJXaXJlc05vZGUgZnJvbSAnLi9Wb2x0bWV0ZXJXaXJlc05vZGUuanMnO1xyXG5cclxuY2xhc3MgVm9sdG1ldGVyQW5kV2lyZXNOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyUHJvcGVydHl9IG5lZWRsZUFuZ2xlUHJvcGVydHkgLSBhbmdsZSBvZiBuZWVkbGUgaW4gdm9sdG1ldGVyXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbmVlZGxlQW5nbGVQcm9wZXJ0eSwgdGFuZGVtLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1RoZSB2b2x0bWV0ZXIgYW5kIGl0cyBjb25uZWN0aW5nIHdpcmVzJ1xyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gcGFzcyBhbiB1bm1vZGlmaWVkIHRhbmRlbSBpbiBzbyB0aGF0IHRoZSBWb2x0bWV0ZXJOb2RlJ3MgY2hpbGRyZW4gbG9vayB0aGUgdGhpcyB0eXBlcyBjaGlsZHJlbi5cclxuICAgIGNvbnN0IHZvbHRtZXRlck5vZGUgPSBuZXcgVm9sdG1ldGVyTm9kZSggbmVlZGxlQW5nbGVQcm9wZXJ0eSwgdGFuZGVtICk7XHJcbiAgICBjb25zdCB2b2x0bWV0ZXJXaXJlc05vZGUgPSBuZXcgVm9sdG1ldGVyV2lyZXNOb2RlKCB2b2x0bWV0ZXJOb2RlICk7XHJcbiAgICB2b2x0bWV0ZXJOb2RlLmNlbnRlciA9IEZhcmFkYXlzTGF3Q29uc3RhbnRzLlZPTFRNRVRFUl9QT1NJVElPTjtcclxuXHJcbiAgICB0aGlzLmNoaWxkcmVuID0gWyB2b2x0bWV0ZXJOb2RlLCB2b2x0bWV0ZXJXaXJlc05vZGUgXTtcclxuICB9XHJcbn1cclxuXHJcbmZhcmFkYXlzTGF3LnJlZ2lzdGVyKCAnVm9sdG1ldGVyQW5kV2lyZXNOb2RlJywgVm9sdG1ldGVyQW5kV2lyZXNOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFZvbHRtZXRlckFuZFdpcmVzTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0Msb0JBQW9CLE1BQU0sNEJBQTRCO0FBQzdELE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFDOUMsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBRXhELE1BQU1DLHFCQUFxQixTQUFTTCxJQUFJLENBQUM7RUFFdkM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxtQkFBbUIsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUc7SUFFbERBLE9BQU8sR0FBR1YsS0FBSyxDQUFFO01BQ2ZTLE1BQU0sRUFBRUEsTUFBTTtNQUNkRSxtQkFBbUIsRUFBRTtJQUN2QixDQUFDLEVBQUVELE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUEsT0FBUSxDQUFDOztJQUVoQjtJQUNBLE1BQU1FLGFBQWEsR0FBRyxJQUFJUixhQUFhLENBQUVJLG1CQUFtQixFQUFFQyxNQUFPLENBQUM7SUFDdEUsTUFBTUksa0JBQWtCLEdBQUcsSUFBSVIsa0JBQWtCLENBQUVPLGFBQWMsQ0FBQztJQUNsRUEsYUFBYSxDQUFDRSxNQUFNLEdBQUdYLG9CQUFvQixDQUFDWSxrQkFBa0I7SUFFOUQsSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBRUosYUFBYSxFQUFFQyxrQkFBa0IsQ0FBRTtFQUN2RDtBQUNGO0FBRUFYLFdBQVcsQ0FBQ2UsUUFBUSxDQUFFLHVCQUF1QixFQUFFWCxxQkFBc0IsQ0FBQztBQUN0RSxlQUFlQSxxQkFBcUIifQ==