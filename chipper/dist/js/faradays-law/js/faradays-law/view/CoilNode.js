// Copyright 2014-2022, University of Colorado Boulder

/**
 * Coil node for 'Faradays Law' simulation.
 *
 * @author Vasily Shakhov (MLearner)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Image, Node } from '../../../../scenery/js/imports.js';
import fourLoopBack_png from '../../../mipmaps/fourLoopBack_png.js';
import fourLoopFront_png from '../../../mipmaps/fourLoopFront_png.js';
import twoLoopBack_png from '../../../mipmaps/twoLoopBack_png.js';
import twoLoopFront_png from '../../../mipmaps/twoLoopFront_png.js';
import faradaysLaw from '../../faradaysLaw.js';
import CoilTypeEnum from './CoilTypeEnum.js';
const IMAGE_MAP = {};
IMAGE_MAP[CoilTypeEnum.TWO_COIL] = {
  frontImage: twoLoopFront_png,
  backImage: twoLoopBack_png
};
IMAGE_MAP[CoilTypeEnum.FOUR_COIL] = {
  frontImage: fourLoopFront_png,
  backImage: fourLoopBack_png
};

// each coil have 2 ends, coordinates of each end relative to center of the coil
const COIL_END_COORDINATES_MAP = {};
COIL_END_COORDINATES_MAP[CoilTypeEnum.TWO_COIL] = {
  topEnd: new Vector2(30, -10),
  bottomEnd: new Vector2(60, 6)
};
COIL_END_COORDINATES_MAP[CoilTypeEnum.FOUR_COIL] = {
  topEnd: new Vector2(0, -10),
  bottomEnd: new Vector2(70, 6)
};
class CoilNode extends Node {
  /**
   * @param {CoilTypeEnum} coilType - determines which picture must we add to show coil
   * @param {Object} [options]
   */
  constructor(coilType, options) {
    options = options || {};
    super();
    const scale = 1 / 3;
    const xOffset = CoilNode.xOffset + (coilType === CoilTypeEnum.TWO_COIL ? CoilNode.twoOffset : 0);
    this.addChild(new Image(IMAGE_MAP[coilType].backImage, {
      centerX: xOffset,
      centerY: 0,
      scale: scale
    }));

    // In FaradaysLawScreenView, the front image is detached from this Node and appended to front layer because the
    // front of the coil must be over magnet and backImage must be under it.
    // @public
    this.frontImage = new Image(IMAGE_MAP[coilType].frontImage, {
      centerX: xOffset,
      centerY: 0,
      scale: scale
    });
    this.addChild(this.frontImage);
    this.endRelativePositions = COIL_END_COORDINATES_MAP[coilType];
    this.mutate(options);
  }
}

// extra offset is applied to the two-coil image to align with the wires
CoilNode.twoOffset = 8;
CoilNode.xOffset = 8;
faradaysLaw.register('CoilNode', CoilNode);
export default CoilNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiSW1hZ2UiLCJOb2RlIiwiZm91ckxvb3BCYWNrX3BuZyIsImZvdXJMb29wRnJvbnRfcG5nIiwidHdvTG9vcEJhY2tfcG5nIiwidHdvTG9vcEZyb250X3BuZyIsImZhcmFkYXlzTGF3IiwiQ29pbFR5cGVFbnVtIiwiSU1BR0VfTUFQIiwiVFdPX0NPSUwiLCJmcm9udEltYWdlIiwiYmFja0ltYWdlIiwiRk9VUl9DT0lMIiwiQ09JTF9FTkRfQ09PUkRJTkFURVNfTUFQIiwidG9wRW5kIiwiYm90dG9tRW5kIiwiQ29pbE5vZGUiLCJjb25zdHJ1Y3RvciIsImNvaWxUeXBlIiwib3B0aW9ucyIsInNjYWxlIiwieE9mZnNldCIsInR3b09mZnNldCIsImFkZENoaWxkIiwiY2VudGVyWCIsImNlbnRlclkiLCJlbmRSZWxhdGl2ZVBvc2l0aW9ucyIsIm11dGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29pbE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29pbCBub2RlIGZvciAnRmFyYWRheXMgTGF3JyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFZhc2lseSBTaGFraG92IChNTGVhcm5lcilcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IEltYWdlLCBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGZvdXJMb29wQmFja19wbmcgZnJvbSAnLi4vLi4vLi4vbWlwbWFwcy9mb3VyTG9vcEJhY2tfcG5nLmpzJztcclxuaW1wb3J0IGZvdXJMb29wRnJvbnRfcG5nIGZyb20gJy4uLy4uLy4uL21pcG1hcHMvZm91ckxvb3BGcm9udF9wbmcuanMnO1xyXG5pbXBvcnQgdHdvTG9vcEJhY2tfcG5nIGZyb20gJy4uLy4uLy4uL21pcG1hcHMvdHdvTG9vcEJhY2tfcG5nLmpzJztcclxuaW1wb3J0IHR3b0xvb3BGcm9udF9wbmcgZnJvbSAnLi4vLi4vLi4vbWlwbWFwcy90d29Mb29wRnJvbnRfcG5nLmpzJztcclxuaW1wb3J0IGZhcmFkYXlzTGF3IGZyb20gJy4uLy4uL2ZhcmFkYXlzTGF3LmpzJztcclxuaW1wb3J0IENvaWxUeXBlRW51bSBmcm9tICcuL0NvaWxUeXBlRW51bS5qcyc7XHJcblxyXG5jb25zdCBJTUFHRV9NQVAgPSB7fTtcclxuSU1BR0VfTUFQWyBDb2lsVHlwZUVudW0uVFdPX0NPSUwgXSA9IHtcclxuICBmcm9udEltYWdlOiB0d29Mb29wRnJvbnRfcG5nLFxyXG4gIGJhY2tJbWFnZTogdHdvTG9vcEJhY2tfcG5nXHJcbn07XHJcbklNQUdFX01BUFsgQ29pbFR5cGVFbnVtLkZPVVJfQ09JTCBdID0ge1xyXG4gIGZyb250SW1hZ2U6IGZvdXJMb29wRnJvbnRfcG5nLFxyXG4gIGJhY2tJbWFnZTogZm91ckxvb3BCYWNrX3BuZ1xyXG59O1xyXG5cclxuLy8gZWFjaCBjb2lsIGhhdmUgMiBlbmRzLCBjb29yZGluYXRlcyBvZiBlYWNoIGVuZCByZWxhdGl2ZSB0byBjZW50ZXIgb2YgdGhlIGNvaWxcclxuY29uc3QgQ09JTF9FTkRfQ09PUkRJTkFURVNfTUFQID0ge307XHJcbkNPSUxfRU5EX0NPT1JESU5BVEVTX01BUFsgQ29pbFR5cGVFbnVtLlRXT19DT0lMIF0gPSB7XHJcbiAgdG9wRW5kOiBuZXcgVmVjdG9yMiggMzAsIC0xMCApLFxyXG4gIGJvdHRvbUVuZDogbmV3IFZlY3RvcjIoIDYwLCA2IClcclxufTtcclxuQ09JTF9FTkRfQ09PUkRJTkFURVNfTUFQWyBDb2lsVHlwZUVudW0uRk9VUl9DT0lMIF0gPSB7XHJcbiAgdG9wRW5kOiBuZXcgVmVjdG9yMiggMCwgLTEwICksXHJcbiAgYm90dG9tRW5kOiBuZXcgVmVjdG9yMiggNzAsIDYgKVxyXG59O1xyXG5cclxuY2xhc3MgQ29pbE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDb2lsVHlwZUVudW19IGNvaWxUeXBlIC0gZGV0ZXJtaW5lcyB3aGljaCBwaWN0dXJlIG11c3Qgd2UgYWRkIHRvIHNob3cgY29pbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY29pbFR5cGUsIG9wdGlvbnMgKSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgY29uc3Qgc2NhbGUgPSAxIC8gMztcclxuXHJcbiAgICBjb25zdCB4T2Zmc2V0ID0gQ29pbE5vZGUueE9mZnNldCArICggY29pbFR5cGUgPT09IENvaWxUeXBlRW51bS5UV09fQ09JTCA/IENvaWxOb2RlLnR3b09mZnNldCA6IDAgKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgSW1hZ2UoIElNQUdFX01BUFsgY29pbFR5cGUgXS5iYWNrSW1hZ2UsIHtcclxuICAgICAgY2VudGVyWDogeE9mZnNldCxcclxuICAgICAgY2VudGVyWTogMCxcclxuICAgICAgc2NhbGU6IHNjYWxlXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICAvLyBJbiBGYXJhZGF5c0xhd1NjcmVlblZpZXcsIHRoZSBmcm9udCBpbWFnZSBpcyBkZXRhY2hlZCBmcm9tIHRoaXMgTm9kZSBhbmQgYXBwZW5kZWQgdG8gZnJvbnQgbGF5ZXIgYmVjYXVzZSB0aGVcclxuICAgIC8vIGZyb250IG9mIHRoZSBjb2lsIG11c3QgYmUgb3ZlciBtYWduZXQgYW5kIGJhY2tJbWFnZSBtdXN0IGJlIHVuZGVyIGl0LlxyXG4gICAgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5mcm9udEltYWdlID0gbmV3IEltYWdlKCBJTUFHRV9NQVBbIGNvaWxUeXBlIF0uZnJvbnRJbWFnZSwge1xyXG4gICAgICBjZW50ZXJYOiB4T2Zmc2V0LFxyXG4gICAgICBjZW50ZXJZOiAwLFxyXG4gICAgICBzY2FsZTogc2NhbGVcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuZnJvbnRJbWFnZSApO1xyXG5cclxuICAgIHRoaXMuZW5kUmVsYXRpdmVQb3NpdGlvbnMgPSBDT0lMX0VORF9DT09SRElOQVRFU19NQVBbIGNvaWxUeXBlIF07XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGV4dHJhIG9mZnNldCBpcyBhcHBsaWVkIHRvIHRoZSB0d28tY29pbCBpbWFnZSB0byBhbGlnbiB3aXRoIHRoZSB3aXJlc1xyXG5Db2lsTm9kZS50d29PZmZzZXQgPSA4O1xyXG5Db2lsTm9kZS54T2Zmc2V0ID0gODtcclxuXHJcbmZhcmFkYXlzTGF3LnJlZ2lzdGVyKCAnQ29pbE5vZGUnLCBDb2lsTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBDb2lsTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLEtBQUssRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUMvRCxPQUFPQyxnQkFBZ0IsTUFBTSxzQ0FBc0M7QUFDbkUsT0FBT0MsaUJBQWlCLE1BQU0sdUNBQXVDO0FBQ3JFLE9BQU9DLGVBQWUsTUFBTSxxQ0FBcUM7QUFDakUsT0FBT0MsZ0JBQWdCLE1BQU0sc0NBQXNDO0FBQ25FLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUU1QyxNQUFNQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCQSxTQUFTLENBQUVELFlBQVksQ0FBQ0UsUUFBUSxDQUFFLEdBQUc7RUFDbkNDLFVBQVUsRUFBRUwsZ0JBQWdCO0VBQzVCTSxTQUFTLEVBQUVQO0FBQ2IsQ0FBQztBQUNESSxTQUFTLENBQUVELFlBQVksQ0FBQ0ssU0FBUyxDQUFFLEdBQUc7RUFDcENGLFVBQVUsRUFBRVAsaUJBQWlCO0VBQzdCUSxTQUFTLEVBQUVUO0FBQ2IsQ0FBQzs7QUFFRDtBQUNBLE1BQU1XLHdCQUF3QixHQUFHLENBQUMsQ0FBQztBQUNuQ0Esd0JBQXdCLENBQUVOLFlBQVksQ0FBQ0UsUUFBUSxDQUFFLEdBQUc7RUFDbERLLE1BQU0sRUFBRSxJQUFJZixPQUFPLENBQUUsRUFBRSxFQUFFLENBQUMsRUFBRyxDQUFDO0VBQzlCZ0IsU0FBUyxFQUFFLElBQUloQixPQUFPLENBQUUsRUFBRSxFQUFFLENBQUU7QUFDaEMsQ0FBQztBQUNEYyx3QkFBd0IsQ0FBRU4sWUFBWSxDQUFDSyxTQUFTLENBQUUsR0FBRztFQUNuREUsTUFBTSxFQUFFLElBQUlmLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFHLENBQUM7RUFDN0JnQixTQUFTLEVBQUUsSUFBSWhCLE9BQU8sQ0FBRSxFQUFFLEVBQUUsQ0FBRTtBQUNoQyxDQUFDO0FBRUQsTUFBTWlCLFFBQVEsU0FBU2YsSUFBSSxDQUFDO0VBRTFCO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VnQixXQUFXQSxDQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRztJQUMvQkEsT0FBTyxHQUFHQSxPQUFPLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBRW5CLE1BQU1DLE9BQU8sR0FBR0wsUUFBUSxDQUFDSyxPQUFPLElBQUtILFFBQVEsS0FBS1gsWUFBWSxDQUFDRSxRQUFRLEdBQUdPLFFBQVEsQ0FBQ00sU0FBUyxHQUFHLENBQUMsQ0FBRTtJQUVsRyxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJdkIsS0FBSyxDQUFFUSxTQUFTLENBQUVVLFFBQVEsQ0FBRSxDQUFDUCxTQUFTLEVBQUU7TUFDekRhLE9BQU8sRUFBRUgsT0FBTztNQUNoQkksT0FBTyxFQUFFLENBQUM7TUFDVkwsS0FBSyxFQUFFQTtJQUNULENBQUUsQ0FBRSxDQUFDOztJQUVMO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ1YsVUFBVSxHQUFHLElBQUlWLEtBQUssQ0FBRVEsU0FBUyxDQUFFVSxRQUFRLENBQUUsQ0FBQ1IsVUFBVSxFQUFFO01BQzdEYyxPQUFPLEVBQUVILE9BQU87TUFDaEJJLE9BQU8sRUFBRSxDQUFDO01BQ1ZMLEtBQUssRUFBRUE7SUFDVCxDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNHLFFBQVEsQ0FBRSxJQUFJLENBQUNiLFVBQVcsQ0FBQztJQUVoQyxJQUFJLENBQUNnQixvQkFBb0IsR0FBR2Isd0JBQXdCLENBQUVLLFFBQVEsQ0FBRTtJQUVoRSxJQUFJLENBQUNTLE1BQU0sQ0FBRVIsT0FBUSxDQUFDO0VBQ3hCO0FBQ0Y7O0FBRUE7QUFDQUgsUUFBUSxDQUFDTSxTQUFTLEdBQUcsQ0FBQztBQUN0Qk4sUUFBUSxDQUFDSyxPQUFPLEdBQUcsQ0FBQztBQUVwQmYsV0FBVyxDQUFDc0IsUUFBUSxDQUFFLFVBQVUsRUFBRVosUUFBUyxDQUFDO0FBQzVDLGVBQWVBLFFBQVEifQ==