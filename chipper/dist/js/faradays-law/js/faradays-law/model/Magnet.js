// Copyright 2014-2022, University of Colorado Boulder

/**
 * Magnet model for the 'Faradays Law' simulation.
 *
 * @author Vasily Shakhov (MLearner)
 * @author Sam Reid (PhET Interactive Simulations)
 */

// modules
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationDeprecatedProperty from '../../../../axon/js/EnumerationDeprecatedProperty.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import faradaysLaw from '../../faradaysLaw.js';
import FaradaysLawConstants from '../FaradaysLawConstants.js';
import OrientationEnum from './OrientationEnum.js';
class Magnet {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    // @public {number} - width of the magnet
    this.width = FaradaysLawConstants.MAGNET_WIDTH;

    // @public {number} - height of the magnet
    this.height = FaradaysLawConstants.MAGNET_HEIGHT;

    // @public - position of the magnet
    this.positionProperty = new Vector2Property(new Vector2(647, 200), {
      tandem: tandem.createTandem('positionProperty'),
      phetioDocumentation: 'The position of the center of the bar magnet in view coordinates',
      phetioHighFrequency: true
    });

    // @public {BooleanProperty} - true if the magnet is flipped
    this.orientationProperty = new EnumerationDeprecatedProperty(OrientationEnum, OrientationEnum.NS, {
      tandem: tandem.createTandem('orientationProperty'),
      phetioDocumentation: 'The direction the bar magnet is oriented'
    });

    // @public {BooleanProperty} - show field lines for magnet
    this.fieldLinesVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('fieldLinesVisibleProperty'),
      phetioDocumentation: 'True if the field lines are visible'
    });

    // @public {BooleanProperty} - whether the user is currently dragging the magnet
    this.isDraggingProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('isDraggingProperty')
    });
  }

  /**
   * Get the bounds of the magnet
   * @returns {Bounds2}
   * @public
   */
  getBounds() {
    const currentPosition = this.positionProperty.value;
    return new Bounds2(currentPosition.x - this.width / 2, currentPosition.y - this.height / 2, currentPosition.x + this.width / 2, currentPosition.y + this.height / 2);
  }

  /**
   * Restore the initial conditions
   * @public
   */
  reset() {
    this.positionProperty.reset();
    this.orientationProperty.reset();
    this.fieldLinesVisibleProperty.reset();
  }
}
faradaysLaw.register('Magnet', Magnet);
export default Magnet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSIsIkJvdW5kczIiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwiZmFyYWRheXNMYXciLCJGYXJhZGF5c0xhd0NvbnN0YW50cyIsIk9yaWVudGF0aW9uRW51bSIsIk1hZ25ldCIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwid2lkdGgiLCJNQUdORVRfV0lEVEgiLCJoZWlnaHQiLCJNQUdORVRfSEVJR0hUIiwicG9zaXRpb25Qcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJwaGV0aW9IaWdoRnJlcXVlbmN5Iiwib3JpZW50YXRpb25Qcm9wZXJ0eSIsIk5TIiwiZmllbGRMaW5lc1Zpc2libGVQcm9wZXJ0eSIsImlzRHJhZ2dpbmdQcm9wZXJ0eSIsImdldEJvdW5kcyIsImN1cnJlbnRQb3NpdGlvbiIsInZhbHVlIiwieCIsInkiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWFnbmV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1hZ25ldCBtb2RlbCBmb3IgdGhlICdGYXJhZGF5cyBMYXcnIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgVmFzaWx5IFNoYWtob3YgKE1MZWFybmVyKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbi8vIG1vZHVsZXNcclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBmYXJhZGF5c0xhdyBmcm9tICcuLi8uLi9mYXJhZGF5c0xhdy5qcyc7XHJcbmltcG9ydCBGYXJhZGF5c0xhd0NvbnN0YW50cyBmcm9tICcuLi9GYXJhZGF5c0xhd0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBPcmllbnRhdGlvbkVudW0gZnJvbSAnLi9PcmllbnRhdGlvbkVudW0uanMnO1xyXG5cclxuY2xhc3MgTWFnbmV0IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7bnVtYmVyfSAtIHdpZHRoIG9mIHRoZSBtYWduZXRcclxuICAgIHRoaXMud2lkdGggPSBGYXJhZGF5c0xhd0NvbnN0YW50cy5NQUdORVRfV0lEVEg7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7bnVtYmVyfSAtIGhlaWdodCBvZiB0aGUgbWFnbmV0XHJcbiAgICB0aGlzLmhlaWdodCA9IEZhcmFkYXlzTGF3Q29uc3RhbnRzLk1BR05FVF9IRUlHSFQ7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAtIHBvc2l0aW9uIG9mIHRoZSBtYWduZXRcclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eSA9IG5ldyBWZWN0b3IyUHJvcGVydHkoIG5ldyBWZWN0b3IyKCA2NDcsIDIwMCApLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Bvc2l0aW9uUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdUaGUgcG9zaXRpb24gb2YgdGhlIGNlbnRlciBvZiB0aGUgYmFyIG1hZ25ldCBpbiB2aWV3IGNvb3JkaW5hdGVzJyxcclxuICAgICAgcGhldGlvSGlnaEZyZXF1ZW5jeTogdHJ1ZVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge0Jvb2xlYW5Qcm9wZXJ0eX0gLSB0cnVlIGlmIHRoZSBtYWduZXQgaXMgZmxpcHBlZFxyXG4gICAgdGhpcy5vcmllbnRhdGlvblByb3BlcnR5ID0gbmV3IEVudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5KCBPcmllbnRhdGlvbkVudW0sIE9yaWVudGF0aW9uRW51bS5OUywge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdvcmllbnRhdGlvblByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVGhlIGRpcmVjdGlvbiB0aGUgYmFyIG1hZ25ldCBpcyBvcmllbnRlZCdcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtCb29sZWFuUHJvcGVydHl9IC0gc2hvdyBmaWVsZCBsaW5lcyBmb3IgbWFnbmV0XHJcbiAgICB0aGlzLmZpZWxkTGluZXNWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdmaWVsZExpbmVzVmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVHJ1ZSBpZiB0aGUgZmllbGQgbGluZXMgYXJlIHZpc2libGUnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7Qm9vbGVhblByb3BlcnR5fSAtIHdoZXRoZXIgdGhlIHVzZXIgaXMgY3VycmVudGx5IGRyYWdnaW5nIHRoZSBtYWduZXRcclxuICAgIHRoaXMuaXNEcmFnZ2luZ1Byb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaXNEcmFnZ2luZ1Byb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGJvdW5kcyBvZiB0aGUgbWFnbmV0XHJcbiAgICogQHJldHVybnMge0JvdW5kczJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldEJvdW5kcygpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZTtcclxuICAgIHJldHVybiBuZXcgQm91bmRzMihcclxuICAgICAgY3VycmVudFBvc2l0aW9uLnggLSB0aGlzLndpZHRoIC8gMixcclxuICAgICAgY3VycmVudFBvc2l0aW9uLnkgLSB0aGlzLmhlaWdodCAvIDIsXHJcbiAgICAgIGN1cnJlbnRQb3NpdGlvbi54ICsgdGhpcy53aWR0aCAvIDIsXHJcbiAgICAgIGN1cnJlbnRQb3NpdGlvbi55ICsgdGhpcy5oZWlnaHQgLyAyXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdG9yZSB0aGUgaW5pdGlhbCBjb25kaXRpb25zXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLm9yaWVudGF0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuZmllbGRMaW5lc1Zpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuZmFyYWRheXNMYXcucmVnaXN0ZXIoICdNYWduZXQnLCBNYWduZXQgKTtcclxuZXhwb3J0IGRlZmF1bHQgTWFnbmV0OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyw2QkFB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