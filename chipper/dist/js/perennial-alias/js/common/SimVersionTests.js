// Copyright 2023, University of Colorado Boulder

/**
 * Node qunit tests for SimVersion
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

/* eslint-env node */

const SimVersion = require('./SimVersion');
const qunit = require('qunit');
qunit.module('SimVersion');
qunit.test('SimVersion Basics', async assert => {
  const testVersion = (simVersion, major, minor, maintenance, message) => {
    assert.ok(simVersion.major === major, `major: ${message}`);
    assert.ok(simVersion.minor === minor, `minor: ${message}`);
    assert.ok(simVersion.maintenance === maintenance, `maintenance: ${message}`);
  };
  const simVersion = new SimVersion(1, 2, 0);
  testVersion(simVersion, 1, 2, 0, 'basic constructor');
  let versions = [new SimVersion(1, 2, 0), new SimVersion(1, 4, 0), new SimVersion(1, 3, 0)];
  versions.sort((a, b) => a.compareNumber(b));
  testVersion(versions[0], 1, 2, 0, 'sorted first');
  testVersion(versions[1], 1, 3, 0, 'sorted second');
  testVersion(versions[2], 1, 4, 0, 'sorted third');
  versions = [new SimVersion(2, 2, 2), new SimVersion(1, 5, 6), new SimVersion(3, 0, 0)];
  versions.sort(SimVersion.comparator);
  testVersion(versions[0], 1, 5, 6, 'another sorted first');
  testVersion(versions[1], 2, 2, 2, 'another sorted second');
  testVersion(versions[2], 3, 0, 0, 'another sorted third');
  assert.throws(() => {
    return SimVersion('1fdsaf', '2fdsaf', '3fdsa');
  }, 'letters as version, boo');
  assert.throws(() => {
    return SimVersion('fdsaf1fdsaf', 'fdsaf2fdsaf', 'fdsa3fdsa');
  }, 'letters as version, boo two');
  assert.throws(() => {
    return SimVersion(true, false, true);
  }, 'letters as version, boo');
  const mySimVersion = new SimVersion('1', '2', '3', {
    testType: 'rc',
    testNumber: '1'
  });
  testVersion(mySimVersion, 1, 2, 3, 'basic constructor');
  assert.ok(mySimVersion.testNumber === 1, 'testNumber number cast check');
  assert.ok(mySimVersion.toString() === '1.2.3-rc.1', 'as string');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW1WZXJzaW9uIiwicmVxdWlyZSIsInF1bml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsInRlc3RWZXJzaW9uIiwic2ltVmVyc2lvbiIsIm1ham9yIiwibWlub3IiLCJtYWludGVuYW5jZSIsIm1lc3NhZ2UiLCJvayIsInZlcnNpb25zIiwic29ydCIsImEiLCJiIiwiY29tcGFyZU51bWJlciIsImNvbXBhcmF0b3IiLCJ0aHJvd3MiLCJteVNpbVZlcnNpb24iLCJ0ZXN0VHlwZSIsInRlc3ROdW1iZXIiLCJ0b1N0cmluZyJdLCJzb3VyY2VzIjpbIlNpbVZlcnNpb25UZXN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTm9kZSBxdW5pdCB0ZXN0cyBmb3IgU2ltVmVyc2lvblxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuLyogZXNsaW50LWVudiBub2RlICovXHJcblxyXG5cclxuY29uc3QgU2ltVmVyc2lvbiA9IHJlcXVpcmUoICcuL1NpbVZlcnNpb24nICk7XHJcbmNvbnN0IHF1bml0ID0gcmVxdWlyZSggJ3F1bml0JyApO1xyXG5cclxucXVuaXQubW9kdWxlKCAnU2ltVmVyc2lvbicgKTtcclxuXHJcblxyXG5xdW5pdC50ZXN0KCAnU2ltVmVyc2lvbiBCYXNpY3MnLCBhc3luYyBhc3NlcnQgPT4ge1xyXG5cclxuICBjb25zdCB0ZXN0VmVyc2lvbiA9ICggc2ltVmVyc2lvbiwgbWFqb3IsIG1pbm9yLCBtYWludGVuYW5jZSwgbWVzc2FnZSApID0+IHtcclxuXHJcbiAgICBhc3NlcnQub2soIHNpbVZlcnNpb24ubWFqb3IgPT09IG1ham9yLCBgbWFqb3I6ICR7bWVzc2FnZX1gICk7XHJcbiAgICBhc3NlcnQub2soIHNpbVZlcnNpb24ubWlub3IgPT09IG1pbm9yLCBgbWlub3I6ICR7bWVzc2FnZX1gICk7XHJcbiAgICBhc3NlcnQub2soIHNpbVZlcnNpb24ubWFpbnRlbmFuY2UgPT09IG1haW50ZW5hbmNlLCBgbWFpbnRlbmFuY2U6ICR7bWVzc2FnZX1gICk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2ltVmVyc2lvbiA9IG5ldyBTaW1WZXJzaW9uKCAxLCAyLCAwICk7XHJcbiAgdGVzdFZlcnNpb24oIHNpbVZlcnNpb24sIDEsIDIsIDAsICdiYXNpYyBjb25zdHJ1Y3RvcicgKTtcclxuXHJcbiAgbGV0IHZlcnNpb25zID0gW1xyXG4gICAgbmV3IFNpbVZlcnNpb24oIDEsIDIsIDAgKSxcclxuICAgIG5ldyBTaW1WZXJzaW9uKCAxLCA0LCAwICksXHJcbiAgICBuZXcgU2ltVmVyc2lvbiggMSwgMywgMCApXHJcbiAgXTtcclxuXHJcbiAgdmVyc2lvbnMuc29ydCggKCBhLCBiICkgPT4gYS5jb21wYXJlTnVtYmVyKCBiICkgKTtcclxuXHJcbiAgdGVzdFZlcnNpb24oIHZlcnNpb25zWyAwIF0sIDEsIDIsIDAsICdzb3J0ZWQgZmlyc3QnICk7XHJcbiAgdGVzdFZlcnNpb24oIHZlcnNpb25zWyAxIF0sIDEsIDMsIDAsICdzb3J0ZWQgc2Vjb25kJyApO1xyXG4gIHRlc3RWZXJzaW9uKCB2ZXJzaW9uc1sgMiBdLCAxLCA0LCAwLCAnc29ydGVkIHRoaXJkJyApO1xyXG5cclxuICB2ZXJzaW9ucyA9IFtcclxuICAgIG5ldyBTaW1WZXJzaW9uKCAyLCAyLCAyICksXHJcbiAgICBuZXcgU2ltVmVyc2lvbiggMSwgNSwgNiApLFxyXG4gICAgbmV3IFNpbVZlcnNpb24oIDMsIDAsIDAgKVxyXG4gIF07XHJcblxyXG4gIHZlcnNpb25zLnNvcnQoIFNpbVZlcnNpb24uY29tcGFyYXRvciApO1xyXG4gIHRlc3RWZXJzaW9uKCB2ZXJzaW9uc1sgMCBdLCAxLCA1LCA2LCAnYW5vdGhlciBzb3J0ZWQgZmlyc3QnICk7XHJcbiAgdGVzdFZlcnNpb24oIHZlcnNpb25zWyAxIF0sIDIsIDIsIDIsICdhbm90aGVyIHNvcnRlZCBzZWNvbmQnICk7XHJcbiAgdGVzdFZlcnNpb24oIHZlcnNpb25zWyAyIF0sIDMsIDAsIDAsICdhbm90aGVyIHNvcnRlZCB0aGlyZCcgKTtcclxuXHJcbiAgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgcmV0dXJuIFNpbVZlcnNpb24oICcxZmRzYWYnLCAnMmZkc2FmJywgJzNmZHNhJyApO1xyXG4gIH0sICdsZXR0ZXJzIGFzIHZlcnNpb24sIGJvbycgKTtcclxuXHJcbiAgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgcmV0dXJuIFNpbVZlcnNpb24oICdmZHNhZjFmZHNhZicsICdmZHNhZjJmZHNhZicsICdmZHNhM2Zkc2EnICk7XHJcbiAgfSwgJ2xldHRlcnMgYXMgdmVyc2lvbiwgYm9vIHR3bycgKTtcclxuXHJcbiAgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgcmV0dXJuIFNpbVZlcnNpb24oIHRydWUsIGZhbHNlLCB0cnVlICk7XHJcbiAgfSwgJ2xldHRlcnMgYXMgdmVyc2lvbiwgYm9vJyApO1xyXG5cclxuICBjb25zdCBteVNpbVZlcnNpb24gPSBuZXcgU2ltVmVyc2lvbiggJzEnLCAnMicsICczJywge1xyXG4gICAgdGVzdFR5cGU6ICdyYycsXHJcbiAgICB0ZXN0TnVtYmVyOiAnMSdcclxuICB9ICk7XHJcbiAgdGVzdFZlcnNpb24oIG15U2ltVmVyc2lvbiwgMSwgMiwgMywgJ2Jhc2ljIGNvbnN0cnVjdG9yJyApO1xyXG4gIGFzc2VydC5vayggbXlTaW1WZXJzaW9uLnRlc3ROdW1iZXIgPT09IDEsICd0ZXN0TnVtYmVyIG51bWJlciBjYXN0IGNoZWNrJyApO1xyXG4gIGFzc2VydC5vayggbXlTaW1WZXJzaW9uLnRvU3RyaW5nKCkgPT09ICcxLjIuMy1yYy4xJywgJ2FzIHN0cmluZycgKTtcclxuXHJcbn0gKTtcclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7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