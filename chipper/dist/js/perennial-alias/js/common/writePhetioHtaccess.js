// Copyright 2017-2019, University of Colorado Boulder

const buildLocal = require('./buildLocal');
const devScp = require('./devScp');
const writeFile = require('./writeFile');
const axios = require('axios');
const fs = require('graceful-fs'); // eslint-disable-line require-statement-match
const winston = require('winston');

// A list of directories directly nested under the phet-io build output folder that should be password protected. Slashes
// added later.
const PASSWORD_PROTECTED_SUB_DIRS = ['wrappers', 'doc'];

/**
 * Writes the htaccess file to password protect the exclusive content for phet-io sims
 * @param {string} passwordProtectPath - deployment location, with no trailing slash
 * @param {{simName:string, version:string, directory:string}} [latestOption]
 *      if provided, then we are publishing to production. We then write the /latest/ redirect .htaccess file.
 *      This is only to be used for production deploys by the build-server.
 * @param {string} [devVersionPath] - if provided, scp the htaccess files to here, relatively

 */
module.exports = async function writePhetioHtaccess(passwordProtectPath, latestOption, devVersionPath) {
  const authFilepath = '/etc/httpd/conf/phet-io_pw';
  const isProductionDeploy = !!latestOption;

  // This option is for production deploys by the build-server
  // If we are provided a simName and version then write a .htaccess file to redirect
  // https://phet-io.colorado.edu/sims/{{sim-name}}/{{major}}.{{minor}} to https://phet-io.colorado.edu/sims/{{sim-name}}/{{major}}.{{minor}}.{{latest}}{{[-suffix]}}
  if (isProductionDeploy) {
    if (latestOption.simName && latestOption.version && latestOption.directory) {
      const redirectFilepath = `${latestOption.directory + latestOption.simName}/.htaccess`;
      let latestRedirectContents = 'RewriteEngine on\n' + `RewriteBase /sims/${latestOption.simName}/\n`;
      const versions = (await axios(`${buildLocal.productionServerURL}/services/metadata/phetio?name=${latestOption.simName}&latest=true`)).data;
      for (const v of versions) {
        // Add a trailing slash to /sims/sim-name/x.y
        latestRedirectContents += `RewriteRule ^${v.versionMajor}.${v.versionMinor}$ ${v.versionMajor}.${v.versionMinor}/ [R=301,L]\n`;
        // Rewrite /sims/sim-name/x.y/* to /sims/sim-name/x.y.z/*
        latestRedirectContents += `RewriteRule ^${v.versionMajor}.${v.versionMinor}/(.*) ${v.versionMajor}.${v.versionMinor}.${v.versionMaintenance}${v.versionSuffix ? '-' : ''}${v.versionSuffix}/$1\n`;
      }
      // 'RewriteRule latest(.*) ' + latestOption.version + '$1\n';
      latestRedirectContents += 'RewriteCond %{QUERY_STRING} =download\n' + 'RewriteRule ([^/]*)$ - [L,E=download:$1]\n' + 'Header onsuccess set Content-disposition "attachment; filename=%{download}e" env=download\n';
      await writeFile(redirectFilepath, latestRedirectContents);
    } else {
      winston.error(`simName: ${latestOption.simName}`);
      winston.error(`version: ${latestOption.version}`);
      winston.error(`directory: ${latestOption.directory}`);
      throw new Error('latestOption is missing one of the required parameters (simName, version, or directory)');
    }
  }
  const simPackage = isProductionDeploy ? JSON.parse(fs.readFileSync(`../${latestOption.simName}/package.json`)) : null;
  const htaccessFilename = '.htaccess';
  const getSubdirHtaccessPath = subdir => `${subdir}/${htaccessFilename}`;
  const getSubdirHtaccessFullPath = subdir => `${passwordProtectPath}/${getSubdirHtaccessPath(subdir)}`;
  const rootHtaccessFullPath = `${passwordProtectPath}/${htaccessFilename}`;

  // Only skip htaccess creation if in production deploy when the "allowPublicAccess" flag is present
  // If we are allowing public access, make sure that the htaccess files don't already exist locally already. This can
  // occur when an rc is published (first) during a production deploy.
  if (simPackage && simPackage.phet && simPackage.phet['phet-io'] && simPackage.phet['phet-io'].allowPublicAccess) {
    for (const subdir of PASSWORD_PROTECTED_SUB_DIRS) {
      // Use individual try/catch blocks to ensure atomic operations.
      try {
        await fs.unlinkSync(getSubdirHtaccessFullPath(subdir));
      } catch (e) {
        winston.debug(`did not remove ${subdir} htaccess ${e}`);
      }
    }
    try {
      await fs.unlinkSync(rootHtaccessFullPath);
    } catch (e) {
      winston.debug(`did not remove root htaccess ${e}`);
    }
  } else {
    try {
      const basePasswordProtectContents = `
AuthType Basic
AuthName "PhET-iO Password Protected Area"
AuthUserFile ${authFilepath}
<LimitExcept OPTIONS>
  Require valid-user
</LimitExcept>
`;
      const passwordProtectWrapperContents = `${basePasswordProtectContents}\n
          
# Uncomment these lines to support public access to this "wrappers/" directory
# Satisfy Any
# Allow from all
`;

      // Write a file to add authentication to subdirectories like wrappers/ or doc/
      for (const subdir of PASSWORD_PROTECTED_SUB_DIRS) {
        const htaccessPathToDir = getSubdirHtaccessFullPath(subdir);

        // if the directory exists
        if (fs.existsSync(htaccessPathToDir.replace(htaccessFilename, ''))) {
          await writeFile(htaccessPathToDir, passwordProtectWrapperContents);
          if (devVersionPath) {
            await devScp(htaccessPathToDir, `${devVersionPath}/phet-io/${getSubdirHtaccessPath(subdir)}`);
          }
        }
      }
      const phetioPackage = JSON.parse(fs.readFileSync('../phet-io/package.json'));

      // Write a file to add authentication to the top level index pages
      if (phetioPackage.phet && phetioPackage.phet.addRootHTAccessFile) {
        const passwordProtectIndexContents = `<FilesMatch "(index\\.\\w+|api\\.json)$">\n${basePasswordProtectContents}</FilesMatch>
                        
# Uncomment these lines to support public access to all resources in this version (including wrappers)
# Satisfy Any
# Allow from all
`;
        await writeFile(rootHtaccessFullPath, passwordProtectIndexContents);
        if (devVersionPath) {
          await devScp(rootHtaccessFullPath, `${devVersionPath}/phet-io/${htaccessFilename}`);
        }
      }
      winston.debug('phetio authentication htaccess written');
    } catch (err) {
      winston.debug('phetio authentication htaccess not written');
      throw err;
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZExvY2FsIiwicmVxdWlyZSIsImRldlNjcCIsIndyaXRlRmlsZSIsImF4aW9zIiwiZnMiLCJ3aW5zdG9uIiwiUEFTU1dPUkRfUFJPVEVDVEVEX1NVQl9ESVJTIiwibW9kdWxlIiwiZXhwb3J0cyIsIndyaXRlUGhldGlvSHRhY2Nlc3MiLCJwYXNzd29yZFByb3RlY3RQYXRoIiwibGF0ZXN0T3B0aW9uIiwiZGV2VmVyc2lvblBhdGgiLCJhdXRoRmlsZXBhdGgiLCJpc1Byb2R1Y3Rpb25EZXBsb3kiLCJzaW1OYW1lIiwidmVyc2lvbiIsImRpcmVjdG9yeSIsInJlZGlyZWN0RmlsZXBhdGgiLCJsYXRlc3RSZWRpcmVjdENvbnRlbnRzIiwidmVyc2lvbnMiLCJwcm9kdWN0aW9uU2VydmVyVVJMIiwiZGF0YSIsInYiLCJ2ZXJzaW9uTWFqb3IiLCJ2ZXJzaW9uTWlub3IiLCJ2ZXJzaW9uTWFpbnRlbmFuY2UiLCJ2ZXJzaW9uU3VmZml4IiwiZXJyb3IiLCJFcnJvciIsInNpbVBhY2thZ2UiLCJKU09OIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJodGFjY2Vzc0ZpbGVuYW1lIiwiZ2V0U3ViZGlySHRhY2Nlc3NQYXRoIiwic3ViZGlyIiwiZ2V0U3ViZGlySHRhY2Nlc3NGdWxsUGF0aCIsInJvb3RIdGFjY2Vzc0Z1bGxQYXRoIiwicGhldCIsImFsbG93UHVibGljQWNjZXNzIiwidW5saW5rU3luYyIsImUiLCJkZWJ1ZyIsImJhc2VQYXNzd29yZFByb3RlY3RDb250ZW50cyIsInBhc3N3b3JkUHJvdGVjdFdyYXBwZXJDb250ZW50cyIsImh0YWNjZXNzUGF0aFRvRGlyIiwiZXhpc3RzU3luYyIsInJlcGxhY2UiLCJwaGV0aW9QYWNrYWdlIiwiYWRkUm9vdEhUQWNjZXNzRmlsZSIsInBhc3N3b3JkUHJvdGVjdEluZGV4Q29udGVudHMiLCJlcnIiXSwic291cmNlcyI6WyJ3cml0ZVBoZXRpb0h0YWNjZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMTksIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuY29uc3QgYnVpbGRMb2NhbCA9IHJlcXVpcmUoICcuL2J1aWxkTG9jYWwnICk7XHJcbmNvbnN0IGRldlNjcCA9IHJlcXVpcmUoICcuL2RldlNjcCcgKTtcclxuY29uc3Qgd3JpdGVGaWxlID0gcmVxdWlyZSggJy4vd3JpdGVGaWxlJyApO1xyXG5jb25zdCBheGlvcyA9IHJlcXVpcmUoICdheGlvcycgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZ3JhY2VmdWwtZnMnICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1zdGF0ZW1lbnQtbWF0Y2hcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5cclxuLy8gQSBsaXN0IG9mIGRpcmVjdG9yaWVzIGRpcmVjdGx5IG5lc3RlZCB1bmRlciB0aGUgcGhldC1pbyBidWlsZCBvdXRwdXQgZm9sZGVyIHRoYXQgc2hvdWxkIGJlIHBhc3N3b3JkIHByb3RlY3RlZC4gU2xhc2hlc1xyXG4vLyBhZGRlZCBsYXRlci5cclxuY29uc3QgUEFTU1dPUkRfUFJPVEVDVEVEX1NVQl9ESVJTID0gWyAnd3JhcHBlcnMnLCAnZG9jJyBdO1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyB0aGUgaHRhY2Nlc3MgZmlsZSB0byBwYXNzd29yZCBwcm90ZWN0IHRoZSBleGNsdXNpdmUgY29udGVudCBmb3IgcGhldC1pbyBzaW1zXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZFByb3RlY3RQYXRoIC0gZGVwbG95bWVudCBsb2NhdGlvbiwgd2l0aCBubyB0cmFpbGluZyBzbGFzaFxyXG4gKiBAcGFyYW0ge3tzaW1OYW1lOnN0cmluZywgdmVyc2lvbjpzdHJpbmcsIGRpcmVjdG9yeTpzdHJpbmd9fSBbbGF0ZXN0T3B0aW9uXVxyXG4gKiAgICAgIGlmIHByb3ZpZGVkLCB0aGVuIHdlIGFyZSBwdWJsaXNoaW5nIHRvIHByb2R1Y3Rpb24uIFdlIHRoZW4gd3JpdGUgdGhlIC9sYXRlc3QvIHJlZGlyZWN0IC5odGFjY2VzcyBmaWxlLlxyXG4gKiAgICAgIFRoaXMgaXMgb25seSB0byBiZSB1c2VkIGZvciBwcm9kdWN0aW9uIGRlcGxveXMgYnkgdGhlIGJ1aWxkLXNlcnZlci5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtkZXZWZXJzaW9uUGF0aF0gLSBpZiBwcm92aWRlZCwgc2NwIHRoZSBodGFjY2VzcyBmaWxlcyB0byBoZXJlLCByZWxhdGl2ZWx5XHJcblxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiB3cml0ZVBoZXRpb0h0YWNjZXNzKCBwYXNzd29yZFByb3RlY3RQYXRoLCBsYXRlc3RPcHRpb24sIGRldlZlcnNpb25QYXRoICkge1xyXG4gIGNvbnN0IGF1dGhGaWxlcGF0aCA9ICcvZXRjL2h0dHBkL2NvbmYvcGhldC1pb19wdyc7XHJcblxyXG4gIGNvbnN0IGlzUHJvZHVjdGlvbkRlcGxveSA9ICEhbGF0ZXN0T3B0aW9uO1xyXG5cclxuICAvLyBUaGlzIG9wdGlvbiBpcyBmb3IgcHJvZHVjdGlvbiBkZXBsb3lzIGJ5IHRoZSBidWlsZC1zZXJ2ZXJcclxuICAvLyBJZiB3ZSBhcmUgcHJvdmlkZWQgYSBzaW1OYW1lIGFuZCB2ZXJzaW9uIHRoZW4gd3JpdGUgYSAuaHRhY2Nlc3MgZmlsZSB0byByZWRpcmVjdFxyXG4gIC8vIGh0dHBzOi8vcGhldC1pby5jb2xvcmFkby5lZHUvc2ltcy97e3NpbS1uYW1lfX0ve3ttYWpvcn19Lnt7bWlub3J9fSB0byBodHRwczovL3BoZXQtaW8uY29sb3JhZG8uZWR1L3NpbXMve3tzaW0tbmFtZX19L3t7bWFqb3J9fS57e21pbm9yfX0ue3tsYXRlc3R9fXt7Wy1zdWZmaXhdfX1cclxuICBpZiAoIGlzUHJvZHVjdGlvbkRlcGxveSApIHtcclxuICAgIGlmICggbGF0ZXN0T3B0aW9uLnNpbU5hbWUgJiYgbGF0ZXN0T3B0aW9uLnZlcnNpb24gJiYgbGF0ZXN0T3B0aW9uLmRpcmVjdG9yeSApIHtcclxuICAgICAgY29uc3QgcmVkaXJlY3RGaWxlcGF0aCA9IGAke2xhdGVzdE9wdGlvbi5kaXJlY3RvcnkgKyBsYXRlc3RPcHRpb24uc2ltTmFtZX0vLmh0YWNjZXNzYDtcclxuICAgICAgbGV0IGxhdGVzdFJlZGlyZWN0Q29udGVudHMgPSAnUmV3cml0ZUVuZ2luZSBvblxcbicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBSZXdyaXRlQmFzZSAvc2ltcy8ke2xhdGVzdE9wdGlvbi5zaW1OYW1lfS9cXG5gO1xyXG4gICAgICBjb25zdCB2ZXJzaW9ucyA9ICggYXdhaXQgYXhpb3MoIGAke2J1aWxkTG9jYWwucHJvZHVjdGlvblNlcnZlclVSTH0vc2VydmljZXMvbWV0YWRhdGEvcGhldGlvP25hbWU9JHtsYXRlc3RPcHRpb24uc2ltTmFtZX0mbGF0ZXN0PXRydWVgICkgKS5kYXRhO1xyXG4gICAgICBmb3IgKCBjb25zdCB2IG9mIHZlcnNpb25zICkge1xyXG4gICAgICAgIC8vIEFkZCBhIHRyYWlsaW5nIHNsYXNoIHRvIC9zaW1zL3NpbS1uYW1lL3gueVxyXG4gICAgICAgIGxhdGVzdFJlZGlyZWN0Q29udGVudHMgKz0gYFJld3JpdGVSdWxlIF4ke3YudmVyc2lvbk1ham9yfS4ke3YudmVyc2lvbk1pbm9yfSQgJHt2LnZlcnNpb25NYWpvcn0uJHt2LnZlcnNpb25NaW5vcn0vIFtSPTMwMSxMXVxcbmA7XHJcbiAgICAgICAgLy8gUmV3cml0ZSAvc2ltcy9zaW0tbmFtZS94LnkvKiB0byAvc2ltcy9zaW0tbmFtZS94Lnkuei8qXHJcbiAgICAgICAgbGF0ZXN0UmVkaXJlY3RDb250ZW50cyArPSBgUmV3cml0ZVJ1bGUgXiR7di52ZXJzaW9uTWFqb3J9LiR7di52ZXJzaW9uTWlub3J9LyguKikgJHt2LnZlcnNpb25NYWpvcn0uJHt2LnZlcnNpb25NaW5vcn0uJHt2LnZlcnNpb25NYWludGVuYW5jZX0ke3YudmVyc2lvblN1ZmZpeCA/ICctJyA6ICcnfSR7di52ZXJzaW9uU3VmZml4fS8kMVxcbmA7XHJcbiAgICAgIH1cclxuICAgICAgLy8gJ1Jld3JpdGVSdWxlIGxhdGVzdCguKikgJyArIGxhdGVzdE9wdGlvbi52ZXJzaW9uICsgJyQxXFxuJztcclxuICAgICAgbGF0ZXN0UmVkaXJlY3RDb250ZW50cyArPSAnUmV3cml0ZUNvbmQgJXtRVUVSWV9TVFJJTkd9ID1kb3dubG9hZFxcbicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZXdyaXRlUnVsZSAoW14vXSopJCAtIFtMLEU9ZG93bmxvYWQ6JDFdXFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0hlYWRlciBvbnN1Y2Nlc3Mgc2V0IENvbnRlbnQtZGlzcG9zaXRpb24gXCJhdHRhY2htZW50OyBmaWxlbmFtZT0le2Rvd25sb2FkfWVcIiBlbnY9ZG93bmxvYWRcXG4nO1xyXG4gICAgICBhd2FpdCB3cml0ZUZpbGUoIHJlZGlyZWN0RmlsZXBhdGgsIGxhdGVzdFJlZGlyZWN0Q29udGVudHMgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB3aW5zdG9uLmVycm9yKCBgc2ltTmFtZTogJHtsYXRlc3RPcHRpb24uc2ltTmFtZX1gICk7XHJcbiAgICAgIHdpbnN0b24uZXJyb3IoIGB2ZXJzaW9uOiAke2xhdGVzdE9wdGlvbi52ZXJzaW9ufWAgKTtcclxuICAgICAgd2luc3Rvbi5lcnJvciggYGRpcmVjdG9yeTogJHtsYXRlc3RPcHRpb24uZGlyZWN0b3J5fWAgKTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnbGF0ZXN0T3B0aW9uIGlzIG1pc3Npbmcgb25lIG9mIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXJzIChzaW1OYW1lLCB2ZXJzaW9uLCBvciBkaXJlY3RvcnkpJyApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2ltUGFja2FnZSA9IGlzUHJvZHVjdGlvbkRlcGxveSA/IEpTT04ucGFyc2UoIGZzLnJlYWRGaWxlU3luYyggYC4uLyR7bGF0ZXN0T3B0aW9uLnNpbU5hbWV9L3BhY2thZ2UuanNvbmAgKSApIDogbnVsbDtcclxuXHJcbiAgY29uc3QgaHRhY2Nlc3NGaWxlbmFtZSA9ICcuaHRhY2Nlc3MnO1xyXG4gIGNvbnN0IGdldFN1YmRpckh0YWNjZXNzUGF0aCA9IHN1YmRpciA9PiBgJHtzdWJkaXJ9LyR7aHRhY2Nlc3NGaWxlbmFtZX1gO1xyXG4gIGNvbnN0IGdldFN1YmRpckh0YWNjZXNzRnVsbFBhdGggPSBzdWJkaXIgPT4gYCR7cGFzc3dvcmRQcm90ZWN0UGF0aH0vJHtnZXRTdWJkaXJIdGFjY2Vzc1BhdGgoIHN1YmRpciApfWA7XHJcbiAgY29uc3Qgcm9vdEh0YWNjZXNzRnVsbFBhdGggPSBgJHtwYXNzd29yZFByb3RlY3RQYXRofS8ke2h0YWNjZXNzRmlsZW5hbWV9YDtcclxuXHJcbiAgLy8gT25seSBza2lwIGh0YWNjZXNzIGNyZWF0aW9uIGlmIGluIHByb2R1Y3Rpb24gZGVwbG95IHdoZW4gdGhlIFwiYWxsb3dQdWJsaWNBY2Nlc3NcIiBmbGFnIGlzIHByZXNlbnRcclxuICAvLyBJZiB3ZSBhcmUgYWxsb3dpbmcgcHVibGljIGFjY2VzcywgbWFrZSBzdXJlIHRoYXQgdGhlIGh0YWNjZXNzIGZpbGVzIGRvbid0IGFscmVhZHkgZXhpc3QgbG9jYWxseSBhbHJlYWR5LiBUaGlzIGNhblxyXG4gIC8vIG9jY3VyIHdoZW4gYW4gcmMgaXMgcHVibGlzaGVkIChmaXJzdCkgZHVyaW5nIGEgcHJvZHVjdGlvbiBkZXBsb3kuXHJcbiAgaWYgKCBzaW1QYWNrYWdlICYmIHNpbVBhY2thZ2UucGhldCAmJiBzaW1QYWNrYWdlLnBoZXRbICdwaGV0LWlvJyBdICYmIHNpbVBhY2thZ2UucGhldFsgJ3BoZXQtaW8nIF0uYWxsb3dQdWJsaWNBY2Nlc3MgKSB7XHJcblxyXG4gICAgZm9yICggY29uc3Qgc3ViZGlyIG9mIFBBU1NXT1JEX1BST1RFQ1RFRF9TVUJfRElSUyApIHtcclxuXHJcbiAgICAgIC8vIFVzZSBpbmRpdmlkdWFsIHRyeS9jYXRjaCBibG9ja3MgdG8gZW5zdXJlIGF0b21pYyBvcGVyYXRpb25zLlxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IGZzLnVubGlua1N5bmMoIGdldFN1YmRpckh0YWNjZXNzRnVsbFBhdGgoIHN1YmRpciApICk7XHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goIGUgKSB7XHJcbiAgICAgICAgd2luc3Rvbi5kZWJ1ZyggYGRpZCBub3QgcmVtb3ZlICR7c3ViZGlyfSBodGFjY2VzcyAke2V9YCApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBmcy51bmxpbmtTeW5jKCByb290SHRhY2Nlc3NGdWxsUGF0aCApO1xyXG4gICAgfVxyXG4gICAgY2F0Y2goIGUgKSB7XHJcbiAgICAgIHdpbnN0b24uZGVidWcoIGBkaWQgbm90IHJlbW92ZSByb290IGh0YWNjZXNzICR7ZX1gICk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgYmFzZVBhc3N3b3JkUHJvdGVjdENvbnRlbnRzID0gYFxyXG5BdXRoVHlwZSBCYXNpY1xyXG5BdXRoTmFtZSBcIlBoRVQtaU8gUGFzc3dvcmQgUHJvdGVjdGVkIEFyZWFcIlxyXG5BdXRoVXNlckZpbGUgJHthdXRoRmlsZXBhdGh9XHJcbjxMaW1pdEV4Y2VwdCBPUFRJT05TPlxyXG4gIFJlcXVpcmUgdmFsaWQtdXNlclxyXG48L0xpbWl0RXhjZXB0PlxyXG5gO1xyXG5cclxuICAgICAgY29uc3QgcGFzc3dvcmRQcm90ZWN0V3JhcHBlckNvbnRlbnRzID0gYCR7YmFzZVBhc3N3b3JkUHJvdGVjdENvbnRlbnRzfVxcblxyXG4gICAgICAgICAgXHJcbiMgVW5jb21tZW50IHRoZXNlIGxpbmVzIHRvIHN1cHBvcnQgcHVibGljIGFjY2VzcyB0byB0aGlzIFwid3JhcHBlcnMvXCIgZGlyZWN0b3J5XHJcbiMgU2F0aXNmeSBBbnlcclxuIyBBbGxvdyBmcm9tIGFsbFxyXG5gO1xyXG5cclxuICAgICAgLy8gV3JpdGUgYSBmaWxlIHRvIGFkZCBhdXRoZW50aWNhdGlvbiB0byBzdWJkaXJlY3RvcmllcyBsaWtlIHdyYXBwZXJzLyBvciBkb2MvXHJcbiAgICAgIGZvciAoIGNvbnN0IHN1YmRpciBvZiBQQVNTV09SRF9QUk9URUNURURfU1VCX0RJUlMgKSB7XHJcbiAgICAgICAgY29uc3QgaHRhY2Nlc3NQYXRoVG9EaXIgPSBnZXRTdWJkaXJIdGFjY2Vzc0Z1bGxQYXRoKCBzdWJkaXIgKTtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhlIGRpcmVjdG9yeSBleGlzdHNcclxuICAgICAgICBpZiAoIGZzLmV4aXN0c1N5bmMoIGh0YWNjZXNzUGF0aFRvRGlyLnJlcGxhY2UoIGh0YWNjZXNzRmlsZW5hbWUsICcnICkgKSApIHtcclxuXHJcbiAgICAgICAgICBhd2FpdCB3cml0ZUZpbGUoIGh0YWNjZXNzUGF0aFRvRGlyLCBwYXNzd29yZFByb3RlY3RXcmFwcGVyQ29udGVudHMgKTtcclxuICAgICAgICAgIGlmICggZGV2VmVyc2lvblBhdGggKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGRldlNjcCggaHRhY2Nlc3NQYXRoVG9EaXIsIGAke2RldlZlcnNpb25QYXRofS9waGV0LWlvLyR7Z2V0U3ViZGlySHRhY2Nlc3NQYXRoKCBzdWJkaXIgKX1gICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBwaGV0aW9QYWNrYWdlID0gSlNPTi5wYXJzZSggZnMucmVhZEZpbGVTeW5jKCAnLi4vcGhldC1pby9wYWNrYWdlLmpzb24nICkgKTtcclxuXHJcbiAgICAgIC8vIFdyaXRlIGEgZmlsZSB0byBhZGQgYXV0aGVudGljYXRpb24gdG8gdGhlIHRvcCBsZXZlbCBpbmRleCBwYWdlc1xyXG4gICAgICBpZiAoIHBoZXRpb1BhY2thZ2UucGhldCAmJiBwaGV0aW9QYWNrYWdlLnBoZXQuYWRkUm9vdEhUQWNjZXNzRmlsZSApIHtcclxuICAgICAgICBjb25zdCBwYXNzd29yZFByb3RlY3RJbmRleENvbnRlbnRzID0gYDxGaWxlc01hdGNoIFwiKGluZGV4XFxcXC5cXFxcdyt8YXBpXFxcXC5qc29uKSRcIj5cXG4ke1xyXG4gICAgICAgICAgYmFzZVBhc3N3b3JkUHJvdGVjdENvbnRlbnRzXHJcbiAgICAgICAgfTwvRmlsZXNNYXRjaD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiMgVW5jb21tZW50IHRoZXNlIGxpbmVzIHRvIHN1cHBvcnQgcHVibGljIGFjY2VzcyB0byBhbGwgcmVzb3VyY2VzIGluIHRoaXMgdmVyc2lvbiAoaW5jbHVkaW5nIHdyYXBwZXJzKVxyXG4jIFNhdGlzZnkgQW55XHJcbiMgQWxsb3cgZnJvbSBhbGxcclxuYDtcclxuICAgICAgICBhd2FpdCB3cml0ZUZpbGUoIHJvb3RIdGFjY2Vzc0Z1bGxQYXRoLCBwYXNzd29yZFByb3RlY3RJbmRleENvbnRlbnRzICk7XHJcbiAgICAgICAgaWYgKCBkZXZWZXJzaW9uUGF0aCApIHtcclxuICAgICAgICAgIGF3YWl0IGRldlNjcCggcm9vdEh0YWNjZXNzRnVsbFBhdGgsIGAke2RldlZlcnNpb25QYXRofS9waGV0LWlvLyR7aHRhY2Nlc3NGaWxlbmFtZX1gICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHdpbnN0b24uZGVidWcoICdwaGV0aW8gYXV0aGVudGljYXRpb24gaHRhY2Nlc3Mgd3JpdHRlbicgKTtcclxuICAgIH1cclxuICAgIGNhdGNoKCBlcnIgKSB7XHJcbiAgICAgIHdpbnN0b24uZGVidWcoICdwaGV0aW8gYXV0aGVudGljYXRpb24gaHRhY2Nlc3Mgbm90IHdyaXR0ZW4nICk7XHJcbiAgICAgIHRocm93IGVycjtcclxuICAgIH1cclxuICB9XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUUsY0FBZSxDQUFDO0FBQzVDLE1BQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFFLFVBQVcsQ0FBQztBQUNwQyxNQUFNRSxTQUFTLEdB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