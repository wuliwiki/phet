// Copyright 2017, University of Colorado Boulder

/**
 * Checks out master for a repository and all of its dependencies.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const getDependencies = require('./getDependencies');
const gitCheckout = require('./gitCheckout');
const npmUpdate = require('./npmUpdate');
const winston = require('winston');

/**
 * Checks out master for a repository and all of its dependencies.
 * @public
 *
 * @param {string} repo - The repository name
 * @param {boolean} includeNpmUpdate - Whether npm updates should be done to repositories.
 * @returns {Promise}
 */
module.exports = async function (repo, includeNpmUpdate) {
  winston.info(`checking out master for ${repo}`);
  const dependencies = await getDependencies(repo);

  // Ignore the comment
  const repoNames = Object.keys(dependencies).filter(key => key !== 'comment');
  for (const repoName of repoNames) {
    await gitCheckout(repoName, 'master');
  }
  if (includeNpmUpdate) {
    await npmUpdate(repo);
    await npmUpdate('chipper');
    await npmUpdate('perennial-alias');
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXREZXBlbmRlbmNpZXMiLCJyZXF1aXJlIiwiZ2l0Q2hlY2tvdXQiLCJucG1VcGRhdGUiLCJ3aW5zdG9uIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcG8iLCJpbmNsdWRlTnBtVXBkYXRlIiwiaW5mbyIsImRlcGVuZGVuY2llcyIsInJlcG9OYW1lcyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJyZXBvTmFtZSJdLCJzb3VyY2VzIjpbImNoZWNrb3V0TWFzdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDaGVja3Mgb3V0IG1hc3RlciBmb3IgYSByZXBvc2l0b3J5IGFuZCBhbGwgb2YgaXRzIGRlcGVuZGVuY2llcy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmNvbnN0IGdldERlcGVuZGVuY2llcyA9IHJlcXVpcmUoICcuL2dldERlcGVuZGVuY2llcycgKTtcclxuY29uc3QgZ2l0Q2hlY2tvdXQgPSByZXF1aXJlKCAnLi9naXRDaGVja291dCcgKTtcclxuY29uc3QgbnBtVXBkYXRlID0gcmVxdWlyZSggJy4vbnBtVXBkYXRlJyApO1xyXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSggJ3dpbnN0b24nICk7XHJcblxyXG4vKipcclxuICogQ2hlY2tzIG91dCBtYXN0ZXIgZm9yIGEgcmVwb3NpdG9yeSBhbmQgYWxsIG9mIGl0cyBkZXBlbmRlbmNpZXMuXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcG8gLSBUaGUgcmVwb3NpdG9yeSBuYW1lXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZU5wbVVwZGF0ZSAtIFdoZXRoZXIgbnBtIHVwZGF0ZXMgc2hvdWxkIGJlIGRvbmUgdG8gcmVwb3NpdG9yaWVzLlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgZnVuY3Rpb24oIHJlcG8sIGluY2x1ZGVOcG1VcGRhdGUgKSB7XHJcbiAgd2luc3Rvbi5pbmZvKCBgY2hlY2tpbmcgb3V0IG1hc3RlciBmb3IgJHtyZXBvfWAgKTtcclxuXHJcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gYXdhaXQgZ2V0RGVwZW5kZW5jaWVzKCByZXBvICk7XHJcblxyXG4gIC8vIElnbm9yZSB0aGUgY29tbWVudFxyXG4gIGNvbnN0IHJlcG9OYW1lcyA9IE9iamVjdC5rZXlzKCBkZXBlbmRlbmNpZXMgKS5maWx0ZXIoIGtleSA9PiBrZXkgIT09ICdjb21tZW50JyApO1xyXG5cclxuICBmb3IgKCBjb25zdCByZXBvTmFtZSBvZiByZXBvTmFtZXMgKSB7XHJcbiAgICBhd2FpdCBnaXRDaGVja291dCggcmVwb05hbWUsICdtYXN0ZXInICk7XHJcbiAgfVxyXG5cclxuICBpZiAoIGluY2x1ZGVOcG1VcGRhdGUgKSB7XHJcbiAgICBhd2FpdCBucG1VcGRhdGUoIHJlcG8gKTtcclxuICAgIGF3YWl0IG5wbVVwZGF0ZSggJ2NoaXBwZXInICk7XHJcbiAgICBhd2FpdCBucG1VcGRhdGUoICdwZXJlbm5pYWwtYWxpYXMnICk7XHJcbiAgfVxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsZUFBZSxHQUFHQyxPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDdEQsTUFBTUMsV0FBVyxHQUFHRCxPQUFPLENBQUUsZUFBZ0IsQ0FBQztBQUM5QyxNQUFNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFDMUMsTUFBTUcsT0FBTyxHQUFHSCxPQUFPLENBQUUsU0FBVSxDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLGdCQUFnQkMsSUFBSSxFQUFFQyxnQkFBZ0IsRUFBRztFQUN4REosT0FBTyxDQUFDSyxJQUFJLENBQUcsMkJBQTBCRixJQUFLLEVBQUUsQ0FBQztFQUVqRCxNQUFNRyxZQUFZLEdBQUcsTUFBTVYsZUFBZSxDQUFFTyxJQUFLLENBQUM7O0VBRWxEO0VBQ0EsTUFBTUksU0FBUyxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBRUgsWUFBYSxDQUFDLENBQUNJLE1BQU0sQ0FBRUMsR0FBRyxJQUFJQSxHQUFHLEtBQUssU0FBVSxDQUFDO0VBRWhGLEtBQU0sTUFBTUMsUUFBUSxJQUFJTCxTQUFTLEVBQUc7SUFDbEMsTUFBTVQsV0FBVyxDQUFFYyxRQUFRLEVBQUUsUUFBUyxDQUFDO0VBQ3pDO0VBRUEsSUFBS1IsZ0JBQWdCLEVBQUc7SUFDdEIsTUFBTUwsU0FBUyxDQUFFSSxJQUFLLENBQUM7SUFDdkIsTUFBTUosU0FBUyxDQUFFLFNBQVUsQ0FBQztJQUM1QixNQUFNQSxTQUFTLENBQUUsaUJBQWtCLENBQUM7RUFDdEM7QUFDRixDQUFDIn0=