// Copyright 2017, University of Colorado Boulder

/**
 * Handles chipper version information, see https://github.com/phetsims/perennial/issues/78.
 */

const assert = require('assert');
const fs = require('fs');
module.exports = function () {
  /**
   * @public
   * @constructor
   *
   * @param {number} major - The major part of the version (the 3 in 3.1.2)
   * @param {number} minor - The minor part of the version (the 1 in 3.1.2)
   * @param {number} maintenance - The maintenance part of the version (the 2 in 3.1.2)
   * @param {boolean} chipperSupportsOutputJSGruntTasks - Flag that indicates whether grunt suppports the family of command `output-js-all`
   */
  function ChipperVersion(major, minor, maintenance, chipperSupportsOutputJSGruntTasks) {
    assert(typeof major === 'number' && major >= 0 && major % 1 === 0, 'major version should be a non-negative integer');
    assert(typeof minor === 'number' && minor >= 0 && minor % 1 === 0, 'minor version should be a non-negative integer');
    assert(typeof maintenance === 'number' && maintenance >= 0 && maintenance % 1 === 0, 'maintenance version should be a non-negative integer');

    // @public {number}
    this.major = major;
    this.minor = minor;
    this.maintenance = maintenance;
    this.chipperSupportsOutputJSGruntTasks = chipperSupportsOutputJSGruntTasks;
  }

  // Can't rely on inherit existing
  ChipperVersion.prototype = {
    constructor: ChipperVersion,
    /**
     * Returns a string form of the version.
     * @public
     *
     * @returns {string}
     */
    toString: function () {
      return `${this.major}.${this.minor}.${this.maintenance}`;
    }
  };
  ChipperVersion.getFromPackageJSON = function (packageJSON) {
    const versionString = packageJSON.version;
    const matches = versionString.match(/(\d+)\.(\d+)\.(\d+)/);
    if (!matches) {
      throw new Error(`could not parse chipper version: ${versionString}`);
    }
    const major = Number(matches[1]);
    const minor = Number(matches[2]);
    const maintenance = Number(matches[3]);
    const chipperSupportsOutputJSGruntTasks = packageJSON.phet && packageJSON.phet.chipperSupportsOutputJSGruntTasks;
    return new ChipperVersion(major, minor, maintenance, chipperSupportsOutputJSGruntTasks);
  };

  /**
   * Returns the chipper version of the currently-checked-out chipper repository.
   * @public
   *
   * @returns {ChipperVersion}
   */
  ChipperVersion.getFromRepository = function () {
    return ChipperVersion.getFromPackageJSON(JSON.parse(fs.readFileSync('../chipper/package.json', 'utf8')));
  };
  return ChipperVersion;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiZnMiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ2hpcHBlclZlcnNpb24iLCJtYWpvciIsIm1pbm9yIiwibWFpbnRlbmFuY2UiLCJjaGlwcGVyU3VwcG9ydHNPdXRwdXRKU0dydW50VGFza3MiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsInRvU3RyaW5nIiwiZ2V0RnJvbVBhY2thZ2VKU09OIiwicGFja2FnZUpTT04iLCJ2ZXJzaW9uU3RyaW5nIiwidmVyc2lvbiIsIm1hdGNoZXMiLCJtYXRjaCIsIkVycm9yIiwiTnVtYmVyIiwicGhldCIsImdldEZyb21SZXBvc2l0b3J5IiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIl0sInNvdXJjZXMiOlsiQ2hpcHBlclZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTcsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgY2hpcHBlciB2ZXJzaW9uIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BlcmVubmlhbC9pc3N1ZXMvNzguXHJcbiAqL1xyXG5cclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZnMnICk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICggZnVuY3Rpb24oKSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYWpvciAtIFRoZSBtYWpvciBwYXJ0IG9mIHRoZSB2ZXJzaW9uICh0aGUgMyBpbiAzLjEuMilcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlub3IgLSBUaGUgbWlub3IgcGFydCBvZiB0aGUgdmVyc2lvbiAodGhlIDEgaW4gMy4xLjIpXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1haW50ZW5hbmNlIC0gVGhlIG1haW50ZW5hbmNlIHBhcnQgb2YgdGhlIHZlcnNpb24gKHRoZSAyIGluIDMuMS4yKVxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2hpcHBlclN1cHBvcnRzT3V0cHV0SlNHcnVudFRhc2tzIC0gRmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGdydW50IHN1cHBwb3J0cyB0aGUgZmFtaWx5IG9mIGNvbW1hbmQgYG91dHB1dC1qcy1hbGxgXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gQ2hpcHBlclZlcnNpb24oIG1ham9yLCBtaW5vciwgbWFpbnRlbmFuY2UsIGNoaXBwZXJTdXBwb3J0c091dHB1dEpTR3J1bnRUYXNrcyApIHtcclxuXHJcbiAgICBhc3NlcnQoIHR5cGVvZiBtYWpvciA9PT0gJ251bWJlcicgJiYgbWFqb3IgPj0gMCAmJiBtYWpvciAlIDEgPT09IDAsICdtYWpvciB2ZXJzaW9uIHNob3VsZCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyJyApO1xyXG4gICAgYXNzZXJ0KCB0eXBlb2YgbWlub3IgPT09ICdudW1iZXInICYmIG1pbm9yID49IDAgJiYgbWlub3IgJSAxID09PSAwLCAnbWlub3IgdmVyc2lvbiBzaG91bGQgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcicgKTtcclxuICAgIGFzc2VydCggdHlwZW9mIG1haW50ZW5hbmNlID09PSAnbnVtYmVyJyAmJiBtYWludGVuYW5jZSA+PSAwICYmIG1haW50ZW5hbmNlICUgMSA9PT0gMCwgJ21haW50ZW5hbmNlIHZlcnNpb24gc2hvdWxkIGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXInICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7bnVtYmVyfVxyXG4gICAgdGhpcy5tYWpvciA9IG1ham9yO1xyXG4gICAgdGhpcy5taW5vciA9IG1pbm9yO1xyXG4gICAgdGhpcy5tYWludGVuYW5jZSA9IG1haW50ZW5hbmNlO1xyXG4gICAgdGhpcy5jaGlwcGVyU3VwcG9ydHNPdXRwdXRKU0dydW50VGFza3MgPSBjaGlwcGVyU3VwcG9ydHNPdXRwdXRKU0dydW50VGFza3M7XHJcbiAgfVxyXG5cclxuICAvLyBDYW4ndCByZWx5IG9uIGluaGVyaXQgZXhpc3RpbmdcclxuICBDaGlwcGVyVmVyc2lvbi5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogQ2hpcHBlclZlcnNpb24sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIGZvcm0gb2YgdGhlIHZlcnNpb24uXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gYCR7dGhpcy5tYWpvcn0uJHt0aGlzLm1pbm9yfS4ke3RoaXMubWFpbnRlbmFuY2V9YDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBDaGlwcGVyVmVyc2lvbi5nZXRGcm9tUGFja2FnZUpTT04gPSBmdW5jdGlvbiggcGFja2FnZUpTT04gKSB7XHJcbiAgICBjb25zdCB2ZXJzaW9uU3RyaW5nID0gcGFja2FnZUpTT04udmVyc2lvbjtcclxuXHJcbiAgICBjb25zdCBtYXRjaGVzID0gdmVyc2lvblN0cmluZy5tYXRjaCggLyhcXGQrKVxcLihcXGQrKVxcLihcXGQrKS8gKTtcclxuXHJcbiAgICBpZiAoICFtYXRjaGVzICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIGBjb3VsZCBub3QgcGFyc2UgY2hpcHBlciB2ZXJzaW9uOiAke3ZlcnNpb25TdHJpbmd9YCApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1ham9yID0gTnVtYmVyKCBtYXRjaGVzWyAxIF0gKTtcclxuICAgIGNvbnN0IG1pbm9yID0gTnVtYmVyKCBtYXRjaGVzWyAyIF0gKTtcclxuICAgIGNvbnN0IG1haW50ZW5hbmNlID0gTnVtYmVyKCBtYXRjaGVzWyAzIF0gKTtcclxuICAgIGNvbnN0IGNoaXBwZXJTdXBwb3J0c091dHB1dEpTR3J1bnRUYXNrcyA9IHBhY2thZ2VKU09OLnBoZXQgJiYgcGFja2FnZUpTT04ucGhldC5jaGlwcGVyU3VwcG9ydHNPdXRwdXRKU0dydW50VGFza3M7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBDaGlwcGVyVmVyc2lvbiggbWFqb3IsIG1pbm9yLCBtYWludGVuYW5jZSwgY2hpcHBlclN1cHBvcnRzT3V0cHV0SlNHcnVudFRhc2tzICk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgY2hpcHBlciB2ZXJzaW9uIG9mIHRoZSBjdXJyZW50bHktY2hlY2tlZC1vdXQgY2hpcHBlciByZXBvc2l0b3J5LlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtDaGlwcGVyVmVyc2lvbn1cclxuICAgKi9cclxuICBDaGlwcGVyVmVyc2lvbi5nZXRGcm9tUmVwb3NpdG9yeSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIENoaXBwZXJWZXJzaW9uLmdldEZyb21QYWNrYWdlSlNPTihcclxuICAgICAgSlNPTi5wYXJzZSggZnMucmVhZEZpbGVTeW5jKCAnLi4vY2hpcHBlci9wYWNrYWdlLmpzb24nLCAndXRmOCcgKSApXHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBDaGlwcGVyVmVyc2lvbjtcclxufSApKCk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFFLFFBQVMsQ0FBQztBQUNsQyxNQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBRSxJQUFLLENBQUM7QUFFMUJFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFLLFlBQVc7RUFFNUI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsU0FBU0MsY0FBY0EsQ0FBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLFdBQVcsRUFBRUMsaUNBQWlDLEVBQUc7SUFFdEZULE1BQU0sQ0FBRSxPQUFPTSxLQUFLLEtBQUssUUFBUSxJQUFJQSxLQUFLLElBQUksQ0FBQyxJQUFJQSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxnREFBaUQsQ0FBQztJQUN0SE4sTUFBTSxDQUFFLE9BQU9PLEtBQUssS0FBSyxRQUFRLElBQUlBLEtBQUssSUFBSSxDQUFDLElBQUlBLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLGdEQUFpRCxDQUFDO0lBQ3RIUCxNQUFNLENBQUUsT0FBT1EsV0FBVyxLQUFLLFFBQVEsSUFBSUEsV0FBVyxJQUFJLENBQUMsSUFBSUEsV0FBVyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsc0RBQXVELENBQUM7O0lBRTlJO0lBQ0EsSUFBSSxDQUFDRixLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDQyxLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDQyxXQUFXLEdBQUdBLFdBQVc7SUFDOUIsSUFBSSxDQUFDQyxpQ0FBaUMsR0FBR0EsaUNBQWlDO0VBQzVFOztFQUVBO0VBQ0FKLGNBQWMsQ0FBQ0ssU0FBUyxHQUFHO0lBQ3pCQyxXQUFXLEVBQUVOLGNBQWM7SUFFM0I7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0lPLFFBQVEsRUFBRSxTQUFBQSxDQUFBLEVBQVc7TUFDbkIsT0FBUSxHQUFFLElBQUksQ0FBQ04sS0FBTSxJQUFHLElBQUksQ0FBQ0MsS0FBTSxJQUFHLElBQUksQ0FBQ0MsV0FBWSxFQUFDO0lBQzFEO0VBQ0YsQ0FBQztFQUVESCxjQUFjLENBQUNRLGtCQUFrQixHQUFHLFVBQVVDLFdBQVcsRUFBRztJQUMxRCxNQUFNQyxhQUFhLEdBQUdELFdBQVcsQ0FBQ0UsT0FBTztJQUV6QyxNQUFNQyxPQUFPLEdBQUdGLGFBQWEsQ0FBQ0csS0FBSyxDQUFFLHFCQUFzQixDQUFDO0lBRTVELElBQUssQ0FBQ0QsT0FBTyxFQUFHO01BQ2QsTUFBTSxJQUFJRSxLQUFLLENBQUcsb0NBQW1DSixhQUFjLEVBQUUsQ0FBQztJQUN4RTtJQUVBLE1BQU1ULEtBQUssR0FBR2MsTUFBTSxDQUFFSCxPQUFPLENBQUUsQ0FBQyxDQUFHLENBQUM7SUFDcEMsTUFBTVYsS0FBSyxHQUFHYSxNQUFNLENBQUVILE9BQU8sQ0FBRSxDQUFDLENBQUcsQ0FBQztJQUNwQyxNQUFNVCxXQUFXLEdBQUdZLE1BQU0sQ0FBRUgsT0FBTyxDQUFFLENBQUMsQ0FBRyxDQUFDO0lBQzFDLE1BQU1SLGlDQUFpQyxHQUFHSyxXQUFXLENBQUNPLElBQUksSUFBSVAsV0FBVyxDQUFDTyxJQUFJLENBQUNaLGlDQUFpQztJQUVoSCxPQUFPLElBQUlKLGNBQWMsQ0FBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLFdBQVcsRUFBRUMsaUNBQWtDLENBQUM7RUFDM0YsQ0FBQzs7RUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUosY0FBYyxDQUFDaUIsaUJBQWlCLEdBQUcsWUFBVztJQUM1QyxPQUFPakIsY0FBYyxDQUFDUSxrQkFBa0IsQ0FDdENVLElBQUksQ0FBQ0MsS0FBSyxDQUFFdEIsRUFBRSxDQUFDdUIsWUFBWSxDQUFFLHlCQUF5QixFQUFFLE1BQU8sQ0FBRSxDQUNuRSxDQUFDO0VBQ0gsQ0FBQztFQUVELE9BQU9wQixjQUFjO0FBQ3ZCLENBQUMsQ0FBRyxDQUFDIn0=