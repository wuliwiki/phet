// Copyright 2021, University of Colorado Boulder

/**
 * Lints and typechecks, reporting any errors
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const execute = require('../common/execute');
const gruntCommand = require('../common/gruntCommand');
const winston = require('winston');
winston.default.transports.console.level = 'error';

// ANSI escape sequences to move to the right (in the same line) or to apply or reset colors
const red = '\u001b[31m';
const green = '\u001b[32m';
const reset = '\u001b[0m';
(async () => {
  // {code:number,stdout:string,stderr:string}
  let lintResults = null;
  let tscResults = null;
  const outputResult = (name, results) => {
    if (results.code === 0) {
      console.log(`${green}${name} OK${reset}`);
    } else {
      console.log(`${red}${name} FAIL${reset}`);
      if (results.stdout.trim().length > 0) {
        console.log(results.stdout);
      }
      if (results.stderr.trim().length > 0) {
        console.log(results.stderr);
      }
    }
  };
  const runLint = async () => {
    lintResults = await execute(gruntCommand, ['lint-everything'], '../perennial', {
      errors: 'resolve'
    });
    outputResult('lint', lintResults);
  };
  const runTsc = async () => {
    tscResults = await execute('../../node_modules/typescript/bin/tsc', [], '../chipper/tsconfig/all', {
      errors: 'resolve'
    });
    outputResult('tsc', tscResults);
  };
  await Promise.all([runLint(), runTsc()]);
  console.log(`\n${lintResults.code === 0 && tscResults.code === 0 ? green : red}-----=====] finished [=====-----${reset}\n`);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjdXRlIiwicmVxdWlyZSIsImdydW50Q29tbWFuZCIsIndpbnN0b24iLCJkZWZhdWx0IiwidHJhbnNwb3J0cyIsImNvbnNvbGUiLCJsZXZlbCIsInJlZCIsImdyZWVuIiwicmVzZXQiLCJsaW50UmVzdWx0cyIsInRzY1Jlc3VsdHMiLCJvdXRwdXRSZXN1bHQiLCJuYW1lIiwicmVzdWx0cyIsImNvZGUiLCJsb2ciLCJzdGRvdXQiLCJ0cmltIiwibGVuZ3RoIiwic3RkZXJyIiwicnVuTGludCIsImVycm9ycyIsInJ1blRzYyIsIlByb21pc2UiLCJhbGwiXSwic291cmNlcyI6WyJsaW50LXRzYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTGludHMgYW5kIHR5cGVjaGVja3MsIHJlcG9ydGluZyBhbnkgZXJyb3JzXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5jb25zdCBleGVjdXRlID0gcmVxdWlyZSggJy4uL2NvbW1vbi9leGVjdXRlJyApO1xyXG5jb25zdCBncnVudENvbW1hbmQgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dydW50Q29tbWFuZCcgKTtcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5cclxud2luc3Rvbi5kZWZhdWx0LnRyYW5zcG9ydHMuY29uc29sZS5sZXZlbCA9ICdlcnJvcic7XHJcblxyXG4vLyBBTlNJIGVzY2FwZSBzZXF1ZW5jZXMgdG8gbW92ZSB0byB0aGUgcmlnaHQgKGluIHRoZSBzYW1lIGxpbmUpIG9yIHRvIGFwcGx5IG9yIHJlc2V0IGNvbG9yc1xyXG5jb25zdCByZWQgPSAnXFx1MDAxYlszMW0nO1xyXG5jb25zdCBncmVlbiA9ICdcXHUwMDFiWzMybSc7XHJcbmNvbnN0IHJlc2V0ID0gJ1xcdTAwMWJbMG0nO1xyXG5cclxuKCBhc3luYyAoKSA9PiB7XHJcblxyXG4gIC8vIHtjb2RlOm51bWJlcixzdGRvdXQ6c3RyaW5nLHN0ZGVycjpzdHJpbmd9XHJcbiAgbGV0IGxpbnRSZXN1bHRzID0gbnVsbDtcclxuICBsZXQgdHNjUmVzdWx0cyA9IG51bGw7XHJcblxyXG4gIGNvbnN0IG91dHB1dFJlc3VsdCA9ICggbmFtZSwgcmVzdWx0cyApID0+IHtcclxuICAgIGlmICggcmVzdWx0cy5jb2RlID09PSAwICkge1xyXG4gICAgICBjb25zb2xlLmxvZyggYCR7Z3JlZW59JHtuYW1lfSBPSyR7cmVzZXR9YCApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCBgJHtyZWR9JHtuYW1lfSBGQUlMJHtyZXNldH1gICk7XHJcblxyXG4gICAgICBpZiAoIHJlc3VsdHMuc3Rkb3V0LnRyaW0oKS5sZW5ndGggPiAwICkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCByZXN1bHRzLnN0ZG91dCApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICggcmVzdWx0cy5zdGRlcnIudHJpbSgpLmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coIHJlc3VsdHMuc3RkZXJyICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBydW5MaW50ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgbGludFJlc3VsdHMgPSBhd2FpdCBleGVjdXRlKCBncnVudENvbW1hbmQsIFsgJ2xpbnQtZXZlcnl0aGluZycgXSwgJy4uL3BlcmVubmlhbCcsIHtcclxuICAgICAgZXJyb3JzOiAncmVzb2x2ZSdcclxuICAgIH0gKTtcclxuICAgIG91dHB1dFJlc3VsdCggJ2xpbnQnLCBsaW50UmVzdWx0cyApO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHJ1blRzYyA9IGFzeW5jICgpID0+IHtcclxuICAgIHRzY1Jlc3VsdHMgPSBhd2FpdCBleGVjdXRlKCAnLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGVzY3JpcHQvYmluL3RzYycsIFtdLCAnLi4vY2hpcHBlci90c2NvbmZpZy9hbGwnLCB7XHJcbiAgICAgIGVycm9yczogJ3Jlc29sdmUnXHJcbiAgICB9ICk7XHJcbiAgICBvdXRwdXRSZXN1bHQoICd0c2MnLCB0c2NSZXN1bHRzICk7XHJcbiAgfTtcclxuXHJcbiAgYXdhaXQgUHJvbWlzZS5hbGwoIFsgcnVuTGludCgpLCBydW5Uc2MoKSBdICk7XHJcblxyXG4gIGNvbnNvbGUubG9nKCBgXFxuJHtsaW50UmVzdWx0cy5jb2RlID09PSAwICYmIHRzY1Jlc3VsdHMuY29kZSA9PT0gMCA/IGdyZWVuIDogcmVkfS0tLS0tPT09PT1dIGZpbmlzaGVkIFs9PT09PS0tLS0tJHtyZXNldH1cXG5gICk7XHJcbn0gKSgpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDOUMsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUUsd0JBQXlCLENBQUM7QUFDeEQsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUUsU0FBVSxDQUFDO0FBRXBDRSxPQUFPLENBQUNDLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDQyxPQUFPLENBQUNDLEtBQUssR0FBRyxPQUFPOztBQUVsRDtBQUNBLE1BQU1DLEdBQUcsR0FBRyxZQUFZO0FBQ3hCLE1BQU1DLEtBQUssR0FBRyxZQUFZO0FBQzFCLE1BQU1DLEtBQUssR0FBRyxXQUFXO0FBRXpCLENBQUUsWUFBWTtFQUVaO0VBQ0EsSUFBSUMsV0FBVyxHQUFHLElBQUk7RUFDdEIsSUFBSUMsVUFBVSxHQUFHLElBQUk7RUFFckIsTUFBTUMsWUFBWSxHQUFHQSxDQUFFQyxJQUFJLEVBQUVDLE9BQU8sS0FBTTtJQUN4QyxJQUFLQSxPQUFPLENBQUNDLElBQUksS0FBSyxDQUFDLEVBQUc7TUFDeEJWLE9BQU8sQ0FBQ1csR0FBRyxDQUFHLEdBQUVSLEtBQU0sR0FBRUssSUFBSyxNQUFLSixLQUFNLEVBQUUsQ0FBQztJQUM3QyxDQUFDLE1BQ0k7TUFDSEosT0FBTyxDQUFDVyxHQUFHLENBQUcsR0FBRVQsR0FBSSxHQUFFTSxJQUFLLFFBQU9KLEtBQU0sRUFBRSxDQUFDO01BRTNDLElBQUtLLE9BQU8sQ0FBQ0csTUFBTSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFHO1FBQ3RDZCxPQUFPLENBQUNXLEdBQUcsQ0FBRUYsT0FBTyxDQUFDRyxNQUFPLENBQUM7TUFDL0I7TUFDQSxJQUFLSCxPQUFPLENBQUNNLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsRUFBRztRQUN0Q2QsT0FBTyxDQUFDVyxHQUFHLENBQUVGLE9BQU8sQ0FBQ00sTUFBTyxDQUFDO01BQy9CO0lBQ0Y7RUFDRixDQUFDO0VBRUQsTUFBTUMsT0FBTyxHQUFHLE1BQUFBLENBQUEsS0FBWTtJQUMxQlgsV0FBVyxHQUFHLE1BQU1YLE9BQU8sQ0FBRUUsWUFBWSxFQUFFLENBQUUsaUJBQWlCLENBQUUsRUFBRSxjQUFjLEVBQUU7TUFDaEZxQixNQUFNLEVBQUU7SUFDVixDQUFFLENBQUM7SUFDSFYsWUFBWSxDQUFFLE1BQU0sRUFBRUYsV0FBWSxDQUFDO0VBQ3JDLENBQUM7RUFFRCxNQUFNYSxNQUFNLEdBQUcsTUFBQUEsQ0FBQSxLQUFZO0lBQ3pCWixVQUFVLEdBQUcsTUFBTVosT0FBTyxDQUFFLHVDQUF1QyxFQUFFLEVBQUUsRUFBRSx5QkFBeUIsRUFBRTtNQUNsR3VCLE1BQU0sRUFBRTtJQUNWLENBQUUsQ0FBQztJQUNIVixZQUFZLENBQUUsS0FBSyxFQUFFRCxVQUFXLENBQUM7RUFDbkMsQ0FBQztFQUVELE1BQU1hLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLENBQUVKLE9BQU8sQ0FBQyxDQUFDLEVBQUVFLE1BQU0sQ0FBQyxDQUFDLENBQUcsQ0FBQztFQUU1Q2xCLE9BQU8sQ0FBQ1csR0FBRyxDQUFHLEtBQUlOLFdBQVcsQ0FBQ0ssSUFBSSxLQUFLLENBQUMsSUFBSUosVUFBVSxDQUFDSSxJQUFJLEtBQUssQ0FBQyxHQUFHUCxLQUFLLEdBQUdELEdBQUksbUNBQWtDRSxLQUFNLElBQUksQ0FBQztBQUMvSCxDQUFDLEVBQUcsQ0FBQyJ9