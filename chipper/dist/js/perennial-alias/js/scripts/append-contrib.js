// Copyright 2023, University of Colorado Boulder

/* eslint-disable default-import-match-filename */

/**
 * Append a note about contributing and a link to the contributing
 * doc in this repo to core common repos then commit. This script
 * is meant to be run from the root of the PhET project directory.
 *
 * @author Liam Mulhall <liammulh@gmail.com>
 */

import { join } from 'node:path';
import { execSync } from 'node:child_process';
import { cwd, chdir } from 'node:process';
import appendToFile from './append-to-file.js';
import coreCommonRepos from './core-common-repos.js';
const contributingNote = `### Contributing
If you would like to contribute to this repo, please read our [contributing guidelines](https://github.com/phetsims/community/blob/master/CONTRIBUTING.md).
`;
for (const repo of coreCommonRepos) {
  console.log('=======================================');
  console.log(`appending contrib note to ${repo}`);
  appendToFile(join(repo, 'README.md'), '\n\n' + contributingNote);
  const repoDir = join(cwd(), repo);
  console.log(`changing directory to ${repoDir}`);
  chdir(repoDir);
  const commitMessage = '"automated commit from phetsims/community; adding contrib doc note"';
  const commands = ['git pull origin master', 'git add README.md', `git commit --message ${commitMessage} --no-verify`, 'git push origin master'];
  for (const command of commands) {
    console.log(`executing command: ${command}`);
    execSync(command);
  }
  console.log('going back one directory');
  chdir('..');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2luIiwiZXhlY1N5bmMiLCJjd2QiLCJjaGRpciIsImFwcGVuZFRvRmlsZSIsImNvcmVDb21tb25SZXBvcyIsImNvbnRyaWJ1dGluZ05vdGUiLCJyZXBvIiwiY29uc29sZSIsImxvZyIsInJlcG9EaXIiLCJjb21taXRNZXNzYWdlIiwiY29tbWFuZHMiLCJjb21tYW5kIl0sInNvdXJjZXMiOlsiYXBwZW5kLWNvbnRyaWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyogZXNsaW50LWRpc2FibGUgZGVmYXVsdC1pbXBvcnQtbWF0Y2gtZmlsZW5hbWUgKi9cclxuXHJcblxyXG4vKipcclxuICogQXBwZW5kIGEgbm90ZSBhYm91dCBjb250cmlidXRpbmcgYW5kIGEgbGluayB0byB0aGUgY29udHJpYnV0aW5nXHJcbiAqIGRvYyBpbiB0aGlzIHJlcG8gdG8gY29yZSBjb21tb24gcmVwb3MgdGhlbiBjb21taXQuIFRoaXMgc2NyaXB0XHJcbiAqIGlzIG1lYW50IHRvIGJlIHJ1biBmcm9tIHRoZSByb290IG9mIHRoZSBQaEVUIHByb2plY3QgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIExpYW0gTXVsaGFsbCA8bGlhbW11bGhAZ21haWwuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdub2RlOnBhdGgnO1xyXG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ25vZGU6Y2hpbGRfcHJvY2Vzcyc7XHJcbmltcG9ydCB7IGN3ZCwgY2hkaXIgfSBmcm9tICdub2RlOnByb2Nlc3MnO1xyXG5pbXBvcnQgYXBwZW5kVG9GaWxlIGZyb20gJy4vYXBwZW5kLXRvLWZpbGUuanMnO1xyXG5pbXBvcnQgY29yZUNvbW1vblJlcG9zIGZyb20gJy4vY29yZS1jb21tb24tcmVwb3MuanMnO1xyXG5cclxuY29uc3QgY29udHJpYnV0aW5nTm90ZSA9IGAjIyMgQ29udHJpYnV0aW5nXHJcbklmIHlvdSB3b3VsZCBsaWtlIHRvIGNvbnRyaWJ1dGUgdG8gdGhpcyByZXBvLCBwbGVhc2UgcmVhZCBvdXIgW2NvbnRyaWJ1dGluZyBndWlkZWxpbmVzXShodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY29tbXVuaXR5L2Jsb2IvbWFzdGVyL0NPTlRSSUJVVElORy5tZCkuXHJcbmA7XHJcblxyXG5mb3IgKCBjb25zdCByZXBvIG9mIGNvcmVDb21tb25SZXBvcyApIHtcclxuICBjb25zb2xlLmxvZyggJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScgKTtcclxuICBjb25zb2xlLmxvZyggYGFwcGVuZGluZyBjb250cmliIG5vdGUgdG8gJHtyZXBvfWAgKTtcclxuICBhcHBlbmRUb0ZpbGUoIGpvaW4oIHJlcG8sICdSRUFETUUubWQnICksICdcXG5cXG4nICsgY29udHJpYnV0aW5nTm90ZSApO1xyXG4gIGNvbnN0IHJlcG9EaXIgPSBqb2luKCBjd2QoKSwgcmVwbyApO1xyXG4gIGNvbnNvbGUubG9nKCBgY2hhbmdpbmcgZGlyZWN0b3J5IHRvICR7cmVwb0Rpcn1gICk7XHJcbiAgY2hkaXIoIHJlcG9EaXIgKTtcclxuICBjb25zdCBjb21taXRNZXNzYWdlID0gJ1wiYXV0b21hdGVkIGNvbW1pdCBmcm9tIHBoZXRzaW1zL2NvbW11bml0eTsgYWRkaW5nIGNvbnRyaWIgZG9jIG5vdGVcIic7XHJcbiAgY29uc3QgY29tbWFuZHMgPSBbXHJcbiAgICAnZ2l0IHB1bGwgb3JpZ2luIG1hc3RlcicsXHJcbiAgICAnZ2l0IGFkZCBSRUFETUUubWQnLFxyXG4gICAgYGdpdCBjb21taXQgLS1tZXNzYWdlICR7Y29tbWl0TWVzc2FnZX0gLS1uby12ZXJpZnlgLFxyXG4gICAgJ2dpdCBwdXNoIG9yaWdpbiBtYXN0ZXInXHJcbiAgXTtcclxuICBmb3IgKCBjb25zdCBjb21tYW5kIG9mIGNvbW1hbmRzICkge1xyXG4gICAgY29uc29sZS5sb2coIGBleGVjdXRpbmcgY29tbWFuZDogJHtjb21tYW5kfWAgKTtcclxuICAgIGV4ZWNTeW5jKCBjb21tYW5kICk7XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKCAnZ29pbmcgYmFjayBvbmUgZGlyZWN0b3J5JyApO1xyXG4gIGNoZGlyKCAnLi4nICk7XHJcbn0iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksUUFBUSxXQUFXO0FBQ2hDLFNBQVNDLFFBQVEsUUFBUSxvQkFBb0I7QUFDN0MsU0FBU0MsR0FBRyxFQUFFQyxLQUFLLFFBQVEsY0FBYztBQUN6QyxPQUFPQyxZQUFZLE1BQU0scUJBQXFCO0FBQzlDLE9BQU9DLGVBQWUsTUFBTSx3QkFBd0I7QUFFcEQsTUFBTUMsZ0JBQWdCLEdBQUk7QUFDMUI7QUFDQSxDQUFDO0FBRUQsS0FBTSxNQUFNQyxJQUFJLElBQUlGLGVBQWUsRUFBRztFQUNwQ0csT0FBTyxDQUFDQyxHQUFHLENBQUUseUNBQTBDLENBQUM7RUFDeERELE9BQU8sQ0FBQ0MsR0FBRyxDQUFHLDZCQUE0QkYsSUFBSyxFQUFFLENBQUM7RUFDbERILFlBQVksQ0FBRUosSUFBSSxDQUFFTyxJQUFJLEVBQUUsV0FBWSxDQUFDLEVBQUUsTUFBTSxHQUFHRCxnQkFBaUIsQ0FBQztFQUNwRSxNQUFNSSxPQUFPLEdBQUdWLElBQUksQ0FBRUUsR0FBRyxDQUFDLENBQUMsRUFBRUssSUFBSyxDQUFDO0VBQ25DQyxPQUFPLENBQUNDLEdBQUcsQ0FBRyx5QkFBd0JDLE9BQVEsRUFBRSxDQUFDO0VBQ2pEUCxLQUFLLENBQUVPLE9BQVEsQ0FBQztFQUNoQixNQUFNQyxhQUFhLEdBQUcscUVBQXFFO0VBQzNGLE1BQU1DLFFBQVEsR0FBRyxDQUNmLHdCQUF3QixFQUN4QixtQkFBbUIsRUFDbEIsd0JBQXVCRCxhQUFjLGNBQWEsRUFDbkQsd0JBQXdCLENBQ3pCO0VBQ0QsS0FBTSxNQUFNRSxPQUFPLElBQUlELFFBQVEsRUFBRztJQUNoQ0osT0FBTyxDQUFDQyxHQUFHLENBQUcsc0JBQXFCSSxPQUFRLEVBQUUsQ0FBQztJQUM5Q1osUUFBUSxDQUFFWSxPQUFRLENBQUM7RUFDckI7RUFDQUwsT0FBTyxDQUFDQyxHQUFHLENBQUUsMEJBQTJCLENBQUM7RUFDekNOLEtBQUssQ0FBRSxJQUFLLENBQUM7QUFDZiJ9