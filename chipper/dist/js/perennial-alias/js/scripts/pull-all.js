// Copyright 2021, University of Colorado Boulder

const execute = require('../common/execute');
const _ = require('lodash'); // eslint-disable-line no-unused-vars
const fs = require('fs');

// constants
// Don't use getActiveRepos() since it cannot be run from the root
const contents = fs.readFileSync('perennial/data/active-repos', 'utf8').trim();
const repos = contents.split('\n').map(sim => sim.trim());

/**
 * Pulls all repos (with rebase)
 *
 * USAGE:
 * cd ${root containing all repos}
 * node perennial/js/scripts/pull-all.js
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
(async () => {
  const a = repos.map(repo => execute('git', ['pull', '--rebase'], `${repo}`, {
    // resolve errors so Promise.all doesn't fail on first repo that cannot pull/rebase
    errors: 'resolve'
  }));
  const out = await Promise.all(a);

  // Report results
  for (let i = 0; i < a.length; i++) {
    const repo = repos[i];
    const o = out[i];
    if (o.code === 0 && o.stderr === '' && (o.stdout === 'Already up to date.\nCurrent branch master is up to date.\n' || o.stdout === 'Already up to date.\n' || o.stdout === 'Current branch master is up to date.\n')) {

      // nothing to do
    } else {
      console.log('##', repo);
      o.stdout.trim().length > 0 && console.log(o.stdout);
      o.stderr.trim().length > 0 && console.log(o.stderr);
      o.error && console.log(o.error);
    }
  }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjdXRlIiwicmVxdWlyZSIsIl8iLCJmcyIsImNvbnRlbnRzIiwicmVhZEZpbGVTeW5jIiwidHJpbSIsInJlcG9zIiwic3BsaXQiLCJtYXAiLCJzaW0iLCJhIiwicmVwbyIsImVycm9ycyIsIm91dCIsIlByb21pc2UiLCJhbGwiLCJpIiwibGVuZ3RoIiwibyIsImNvZGUiLCJzdGRlcnIiLCJzdGRvdXQiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiXSwic291cmNlcyI6WyJwdWxsLWFsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5jb25zdCBleGVjdXRlID0gcmVxdWlyZSggJy4uL2NvbW1vbi9leGVjdXRlJyApO1xyXG5jb25zdCBfID0gcmVxdWlyZSggJ2xvZGFzaCcgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuXHJcbi8vIGNvbnN0YW50c1xyXG4vLyBEb24ndCB1c2UgZ2V0QWN0aXZlUmVwb3MoKSBzaW5jZSBpdCBjYW5ub3QgYmUgcnVuIGZyb20gdGhlIHJvb3RcclxuY29uc3QgY29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMoICdwZXJlbm5pYWwvZGF0YS9hY3RpdmUtcmVwb3MnLCAndXRmOCcgKS50cmltKCk7XHJcbmNvbnN0IHJlcG9zID0gY29udGVudHMuc3BsaXQoICdcXG4nICkubWFwKCBzaW0gPT4gc2ltLnRyaW0oKSApO1xyXG5cclxuLyoqXHJcbiAqIFB1bGxzIGFsbCByZXBvcyAod2l0aCByZWJhc2UpXHJcbiAqXHJcbiAqIFVTQUdFOlxyXG4gKiBjZCAke3Jvb3QgY29udGFpbmluZyBhbGwgcmVwb3N9XHJcbiAqIG5vZGUgcGVyZW5uaWFsL2pzL3NjcmlwdHMvcHVsbC1hbGwuanNcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcbiggYXN5bmMgKCkgPT4ge1xyXG5cclxuICBjb25zdCBhID0gcmVwb3MubWFwKCByZXBvID0+IGV4ZWN1dGUoICdnaXQnLCBbICdwdWxsJywgJy0tcmViYXNlJyBdLCBgJHtyZXBvfWAsIHtcclxuXHJcbiAgICAvLyByZXNvbHZlIGVycm9ycyBzbyBQcm9taXNlLmFsbCBkb2Vzbid0IGZhaWwgb24gZmlyc3QgcmVwbyB0aGF0IGNhbm5vdCBwdWxsL3JlYmFzZVxyXG4gICAgZXJyb3JzOiAncmVzb2x2ZSdcclxuICB9ICkgKTtcclxuICBjb25zdCBvdXQgPSBhd2FpdCBQcm9taXNlLmFsbCggYSApO1xyXG5cclxuICAvLyBSZXBvcnQgcmVzdWx0c1xyXG4gIGZvciAoIGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKysgKSB7XHJcbiAgICBjb25zdCByZXBvID0gcmVwb3NbIGkgXTtcclxuICAgIGNvbnN0IG8gPSBvdXRbIGkgXTtcclxuXHJcbiAgICBpZiAoIG8uY29kZSA9PT0gMCAmJiBvLnN0ZGVyciA9PT0gJycgJiYgKCBvLnN0ZG91dCA9PT0gJ0FscmVhZHkgdXAgdG8gZGF0ZS5cXG5DdXJyZW50IGJyYW5jaCBtYXN0ZXIgaXMgdXAgdG8gZGF0ZS5cXG4nIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnN0ZG91dCA9PT0gJ0FscmVhZHkgdXAgdG8gZGF0ZS5cXG4nIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnN0ZG91dCA9PT0gJ0N1cnJlbnQgYnJhbmNoIG1hc3RlciBpcyB1cCB0byBkYXRlLlxcbicgKSApIHtcclxuXHJcbiAgICAgIC8vIG5vdGhpbmcgdG8gZG9cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyggJyMjJywgcmVwbyApO1xyXG4gICAgICBvLnN0ZG91dC50cmltKCkubGVuZ3RoID4gMCAmJiBjb25zb2xlLmxvZyggby5zdGRvdXQgKTtcclxuICAgICAgby5zdGRlcnIudHJpbSgpLmxlbmd0aCA+IDAgJiYgY29uc29sZS5sb2coIG8uc3RkZXJyICk7XHJcbiAgICAgIG8uZXJyb3IgJiYgY29uc29sZS5sb2coIG8uZXJyb3IgKTtcclxuICAgIH1cclxuICB9XHJcbn0gKSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDOUMsTUFBTUMsQ0FBQyxHQUFHRCxPQUFPLENBQUUsUUFBUyxDQUFDLENBQUMsQ0FBQztBQUMvQixNQUFNRSxFQUFFLEdBQUdGLE9BQU8sQ0FBRSxJQUFLLENBQUM7O0FBRTFCO0FBQ0E7QUFDQSxNQUFNRyxRQUFRLEdBQUdELEVBQUUsQ0FBQ0UsWUFBWSxDQUFFLDZCQUE2QixFQUFFLE1BQU8sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQztBQUNoRixNQUFNQyxLQUFLLEdBQUdILFFBQVEsQ0FBQ0ksS0FBSyxDQUFFLElBQUssQ0FBQyxDQUFDQyxHQUFHLENBQUVDLEdBQUcsSUFBSUEsR0FBRyxDQUFDSixJQUFJLENBQUMsQ0FBRSxDQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFFLFlBQVk7RUFFWixNQUFNSyxDQUFDLEdBQUdKLEtBQUssQ0FBQ0UsR0FBRyxDQUFFRyxJQUFJLElBQUlaLE9BQU8sQ0FBRSxLQUFLLEVBQUUsQ0FBRSxNQUFNLEVBQUUsVUFBVSxDQUFFLEVBQUcsR0FBRVksSUFBSyxFQUFDLEVBQUU7SUFFOUU7SUFDQUMsTUFBTSxFQUFFO0VBQ1YsQ0FBRSxDQUFFLENBQUM7RUFDTCxNQUFNQyxHQUFHLEdBQUcsTUFBTUMsT0FBTyxDQUFDQyxHQUFHLENBQUVMLENBQUUsQ0FBQzs7RUFFbEM7RUFDQSxLQUFNLElBQUlNLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR04sQ0FBQyxDQUFDTyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFHO0lBQ25DLE1BQU1MLElBQUksR0FBR0wsS0FBSyxDQUFFVSxDQUFDLENBQUU7SUFDdkIsTUFBTUUsQ0FBQyxHQUFHTCxHQUFHLENBQUVHLENBQUMsQ0FBRTtJQUVsQixJQUFLRSxDQUFDLENBQUNDLElBQUksS0FBSyxDQUFDLElBQUlELENBQUMsQ0FBQ0UsTUFBTSxLQUFLLEVBQUUsS0FBTUYsQ0FBQyxDQUFDRyxNQUFNLEtBQUssNkRBQTZELElBQzFFSCxDQUFDLENBQUNHLE1BQU0sS0FBSyx1QkFBdUIsSUFDcENILENBQUMsQ0FBQ0csTUFBTSxLQUFLLHdDQUF3QyxDQUFFLEVBQUc7O01BRWxHO0lBQUEsQ0FDRCxNQUNJO01BQ0hDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLElBQUksRUFBRVosSUFBSyxDQUFDO01BQ3pCTyxDQUFDLENBQUNHLE1BQU0sQ0FBQ2hCLElBQUksQ0FBQyxDQUFDLENBQUNZLE1BQU0sR0FBRyxDQUFDLElBQUlLLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFTCxDQUFDLENBQUNHLE1BQU8sQ0FBQztNQUNyREgsQ0FBQyxDQUFDRSxNQUFNLENBQUNmLElBQUksQ0FBQyxDQUFDLENBQUNZLE1BQU0sR0FBRyxDQUFDLElBQUlLLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFTCxDQUFDLENBQUNFLE1BQU8sQ0FBQztNQUNyREYsQ0FBQyxDQUFDTSxLQUFLLElBQUlGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFTCxDQUFDLENBQUNNLEtBQU0sQ0FBQztJQUNuQztFQUNGO0FBQ0YsQ0FBQyxFQUFHLENBQUMifQ==