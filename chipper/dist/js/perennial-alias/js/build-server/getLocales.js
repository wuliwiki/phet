// Copyright 2017, University of Colorado Boulder

const constants = require('./constants');
const fs = require('graceful-fs'); // eslint-disable-line require-statement-match
const getSortedVersionDirectories = require('./getSortedVersionDirectories');
const parseString = require('xml2js').parseString; // eslint-disable-line no-property-in-require-statement
const winston = require('winston');
async function getJsonFromXML(xmlString) {
  return new Promise((resolve, reject) => {
    parseString(xmlString, (error, json) => {
      if (error) {
        reject(error);
      } else {
        resolve(json);
      }
    });
  });
}

/**
 * Get all of the deployed locales for the latest deployed version of the specified simulation.  This is generally done
 * before publishing a new version so that we can know which locales to rebuild.
 * @param {String} locales - comma separated list of locale codes
 * @param {String} simName - name of the sim, should match GitHub repo name, e.g. "energy-skate-park-basics"
 */
async function getLocales(locales, simName) {
  let callbackLocales;
  if (locales && locales !== '*') {
    // from rosetta
    callbackLocales = locales;
  } else {
    // from grunt deploy-production
    const simDirectory = constants.HTML_SIMS_DIRECTORY + simName;
    const versionDirectories = await getSortedVersionDirectories(simDirectory);
    if (versionDirectories.length > 0) {
      const latest = versionDirectories[versionDirectories.length - 1];
      const translationsXMLFile = `${constants.HTML_SIMS_DIRECTORY + simName}/${latest}/${simName}.xml`;
      winston.log('info', `path to translations XML file = ${translationsXMLFile}`);
      const xmlString = fs.readFileSync(translationsXMLFile);
      let json;
      try {
        json = await getJsonFromXML(xmlString);
      } catch (err) {
        // TODO https://github.com/phetsims/perennial/issues/167 should we call reject here? what happens when callbackLocales is undefined?
        winston.log('error', `error parsing XML, err = ${err}`);
      }
      winston.log('info', 'data extracted from translations XML file:');
      winston.log('info', JSON.stringify(json, null, 2));
      const simsArray = json.project.simulations[0].simulation;
      const localesArray = [];
      for (let i = 0; i < simsArray.length; i++) {
        localesArray.push(simsArray[i].$.locale);
      }
      callbackLocales = localesArray.join(',');
    } else {
      // first deploy, sim directory will not exist yet, just publish the english version
      callbackLocales = 'en';
    }
  }
  winston.log('info', `building locales=${callbackLocales}`);
  return callbackLocales;
}
module.exports = getLocales;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25zdGFudHMiLCJyZXF1aXJlIiwiZnMiLCJnZXRTb3J0ZWRWZXJzaW9uRGlyZWN0b3JpZXMiLCJwYXJzZVN0cmluZyIsIndpbnN0b24iLCJnZXRKc29uRnJvbVhNTCIsInhtbFN0cmluZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3IiLCJqc29uIiwiZ2V0TG9jYWxlcyIsImxvY2FsZXMiLCJzaW1OYW1lIiwiY2FsbGJhY2tMb2NhbGVzIiwic2ltRGlyZWN0b3J5IiwiSFRNTF9TSU1TX0RJUkVDVE9SWSIsInZlcnNpb25EaXJlY3RvcmllcyIsImxlbmd0aCIsImxhdGVzdCIsInRyYW5zbGF0aW9uc1hNTEZpbGUiLCJsb2ciLCJyZWFkRmlsZVN5bmMiLCJlcnIiLCJKU09OIiwic3RyaW5naWZ5Iiwic2ltc0FycmF5IiwicHJvamVjdCIsInNpbXVsYXRpb25zIiwic2ltdWxhdGlvbiIsImxvY2FsZXNBcnJheSIsImkiLCJwdXNoIiwiJCIsImxvY2FsZSIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZ2V0TG9jYWxlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5cclxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSggJy4vY29uc3RhbnRzJyApO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdncmFjZWZ1bC1mcycgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLXN0YXRlbWVudC1tYXRjaFxyXG5jb25zdCBnZXRTb3J0ZWRWZXJzaW9uRGlyZWN0b3JpZXMgPSByZXF1aXJlKCAnLi9nZXRTb3J0ZWRWZXJzaW9uRGlyZWN0b3JpZXMnICk7XHJcbmNvbnN0IHBhcnNlU3RyaW5nID0gcmVxdWlyZSggJ3htbDJqcycgKS5wYXJzZVN0cmluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm9wZXJ0eS1pbi1yZXF1aXJlLXN0YXRlbWVudFxyXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSggJ3dpbnN0b24nICk7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRKc29uRnJvbVhNTCggeG1sU3RyaW5nICkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XHJcbiAgICBwYXJzZVN0cmluZyggeG1sU3RyaW5nLCAoIGVycm9yLCBqc29uICkgPT4ge1xyXG4gICAgICBpZiAoIGVycm9yICkge1xyXG4gICAgICAgIHJlamVjdCggZXJyb3IgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKCBqc29uICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9ICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgYWxsIG9mIHRoZSBkZXBsb3llZCBsb2NhbGVzIGZvciB0aGUgbGF0ZXN0IGRlcGxveWVkIHZlcnNpb24gb2YgdGhlIHNwZWNpZmllZCBzaW11bGF0aW9uLiAgVGhpcyBpcyBnZW5lcmFsbHkgZG9uZVxyXG4gKiBiZWZvcmUgcHVibGlzaGluZyBhIG5ldyB2ZXJzaW9uIHNvIHRoYXQgd2UgY2FuIGtub3cgd2hpY2ggbG9jYWxlcyB0byByZWJ1aWxkLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbG9jYWxlcyAtIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIGxvY2FsZSBjb2Rlc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2ltTmFtZSAtIG5hbWUgb2YgdGhlIHNpbSwgc2hvdWxkIG1hdGNoIEdpdEh1YiByZXBvIG5hbWUsIGUuZy4gXCJlbmVyZ3ktc2thdGUtcGFyay1iYXNpY3NcIlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYWxlcyggbG9jYWxlcywgc2ltTmFtZSApIHtcclxuICBsZXQgY2FsbGJhY2tMb2NhbGVzO1xyXG5cclxuICBpZiAoIGxvY2FsZXMgJiYgbG9jYWxlcyAhPT0gJyonICkge1xyXG5cclxuICAgIC8vIGZyb20gcm9zZXR0YVxyXG4gICAgY2FsbGJhY2tMb2NhbGVzID0gbG9jYWxlcztcclxuICB9XHJcbiAgZWxzZSB7XHJcblxyXG4gICAgLy8gZnJvbSBncnVudCBkZXBsb3ktcHJvZHVjdGlvblxyXG4gICAgY29uc3Qgc2ltRGlyZWN0b3J5ID0gY29uc3RhbnRzLkhUTUxfU0lNU19ESVJFQ1RPUlkgKyBzaW1OYW1lO1xyXG4gICAgY29uc3QgdmVyc2lvbkRpcmVjdG9yaWVzID0gYXdhaXQgZ2V0U29ydGVkVmVyc2lvbkRpcmVjdG9yaWVzKCBzaW1EaXJlY3RvcnkgKTtcclxuICAgIGlmICggdmVyc2lvbkRpcmVjdG9yaWVzLmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgIGNvbnN0IGxhdGVzdCA9IHZlcnNpb25EaXJlY3Rvcmllc1sgdmVyc2lvbkRpcmVjdG9yaWVzLmxlbmd0aCAtIDEgXTtcclxuICAgICAgY29uc3QgdHJhbnNsYXRpb25zWE1MRmlsZSA9IGAke2NvbnN0YW50cy5IVE1MX1NJTVNfRElSRUNUT1JZICsgc2ltTmFtZX0vJHtsYXRlc3R9LyR7c2ltTmFtZX0ueG1sYDtcclxuICAgICAgd2luc3Rvbi5sb2coICdpbmZvJywgYHBhdGggdG8gdHJhbnNsYXRpb25zIFhNTCBmaWxlID0gJHt0cmFuc2xhdGlvbnNYTUxGaWxlfWAgKTtcclxuICAgICAgY29uc3QgeG1sU3RyaW5nID0gZnMucmVhZEZpbGVTeW5jKCB0cmFuc2xhdGlvbnNYTUxGaWxlICk7XHJcbiAgICAgIGxldCBqc29uO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGpzb24gPSBhd2FpdCBnZXRKc29uRnJvbVhNTCggeG1sU3RyaW5nICk7XHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goIGVyciApIHtcclxuICAgICAgICAvLyBUT0RPIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9wZXJlbm5pYWwvaXNzdWVzLzE2NyBzaG91bGQgd2UgY2FsbCByZWplY3QgaGVyZT8gd2hhdCBoYXBwZW5zIHdoZW4gY2FsbGJhY2tMb2NhbGVzIGlzIHVuZGVmaW5lZD9cclxuICAgICAgICB3aW5zdG9uLmxvZyggJ2Vycm9yJywgYGVycm9yIHBhcnNpbmcgWE1MLCBlcnIgPSAke2Vycn1gICk7XHJcbiAgICAgIH1cclxuICAgICAgd2luc3Rvbi5sb2coICdpbmZvJywgJ2RhdGEgZXh0cmFjdGVkIGZyb20gdHJhbnNsYXRpb25zIFhNTCBmaWxlOicgKTtcclxuICAgICAgd2luc3Rvbi5sb2coICdpbmZvJywgSlNPTi5zdHJpbmdpZnkoIGpzb24sIG51bGwsIDIgKSApO1xyXG4gICAgICBjb25zdCBzaW1zQXJyYXkgPSBqc29uLnByb2plY3Quc2ltdWxhdGlvbnNbIDAgXS5zaW11bGF0aW9uO1xyXG4gICAgICBjb25zdCBsb2NhbGVzQXJyYXkgPSBbXTtcclxuICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgc2ltc0FycmF5Lmxlbmd0aDsgaSsrICkge1xyXG4gICAgICAgIGxvY2FsZXNBcnJheS5wdXNoKCBzaW1zQXJyYXlbIGkgXS4kLmxvY2FsZSApO1xyXG4gICAgICB9XHJcbiAgICAgIGNhbGxiYWNrTG9jYWxlcyA9IGxvY2FsZXNBcnJheS5qb2luKCAnLCcgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAvLyBmaXJzdCBkZXBsb3ksIHNpbSBkaXJlY3Rvcnkgd2lsbCBub3QgZXhpc3QgeWV0LCBqdXN0IHB1Ymxpc2ggdGhlIGVuZ2xpc2ggdmVyc2lvblxyXG4gICAgICBjYWxsYmFja0xvY2FsZXMgPSAnZW4nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgd2luc3Rvbi5sb2coICdpbmZvJywgYGJ1aWxkaW5nIGxvY2FsZXM9JHtjYWxsYmFja0xvY2FsZXN9YCApO1xyXG5cclxuICByZXR1cm4gY2FsbGJhY2tMb2NhbGVzO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGdldExvY2FsZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFD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