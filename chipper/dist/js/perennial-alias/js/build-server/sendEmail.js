// Copyright 2017, University of Colorado Boulder

const constants = require('./constants');
const winston = require('winston');
const nodemailer = require('nodemailer');

// configure email server
let transporter;
if (constants.BUILD_SERVER_CONFIG.emailUsername && constants.BUILD_SERVER_CONFIG.emailPassword && constants.BUILD_SERVER_CONFIG.emailTo) {
  transporter = nodemailer.createTransport({
    auth: {
      user: constants.BUILD_SERVER_CONFIG.emailUsername,
      pass: constants.BUILD_SERVER_CONFIG.emailPassword
    },
    host: constants.BUILD_SERVER_CONFIG.emailServer,
    port: 587,
    tls: {
      ciphers: 'SSLv3'
    }
  });
} else {
  winston.log('warn', 'failed to set up email server, missing one or more of the following fields in build-local.json:\n' + 'emailUsername, emailPassword, emailTo');
}

/**
 * Send an email. Used to notify developers if a build fails
 * @param subject
 * @param text
 * @param emailParameter - recipient defined per request
 * @param emailParameterOnly - if true send the email only to the passed in email, not to the default list as well
 */
module.exports = async function sendEmail(subject, text, emailParameter, emailParameterOnly) {
  if (transporter) {
    let emailTo = constants.BUILD_SERVER_CONFIG.emailTo;
    if (emailParameter) {
      if (emailParameterOnly) {
        emailTo = emailParameter;
      } else {
        emailTo += `, ${emailParameter}`;
      }
    }

    // don't send an email if no email is given
    if (emailParameterOnly && !emailParameter) {
      return;
    }
    try {
      const emailResult = await transporter.sendMail({
        from: `"PhET Mail" <${constants.BUILD_SERVER_CONFIG.emailUsername}>`,
        to: emailTo,
        subject: subject,
        text: text.replace(/([^\r])\n/g, '$1\r\n') // Replace LF with CRLF, bare line feeds are rejected by some email clients,
      });

      winston.info(`sent email: ${emailTo}, ${subject}, ${emailResult.messageId}, ${emailResult.response}`);
    } catch (err) {
      let errorString = typeof err === 'string' ? err : JSON.stringify(err);
      errorString = errorString.replace(constants.BUILD_SERVER_CONFIG.emailPassword, '***PASSWORD REDACTED***');
      winston.error(`error when attempted to send email, err = ${errorString}`);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25zdGFudHMiLCJyZXF1aXJlIiwid2luc3RvbiIsIm5vZGVtYWlsZXIiLCJ0cmFuc3BvcnRlciIsIkJVSUxEX1NFUlZFUl9DT05GSUciLCJlbWFpbFVzZXJuYW1lIiwiZW1haWxQYXNzd29yZCIsImVtYWlsVG8iLCJjcmVhdGVUcmFuc3BvcnQiLCJhdXRoIiwidXNlciIsInBhc3MiLCJob3N0IiwiZW1haWxTZXJ2ZXIiLCJwb3J0IiwidGxzIiwiY2lwaGVycyIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZW5kRW1haWwiLCJzdWJqZWN0IiwidGV4dCIsImVtYWlsUGFyYW1ldGVyIiwiZW1haWxQYXJhbWV0ZXJPbmx5IiwiZW1haWxSZXN1bHQiLCJzZW5kTWFpbCIsImZyb20iLCJ0byIsInJlcGxhY2UiLCJpbmZvIiwibWVzc2FnZUlkIiwicmVzcG9uc2UiLCJlcnIiLCJlcnJvclN0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciJdLCJzb3VyY2VzIjpbInNlbmRFbWFpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5cclxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSggJy4vY29uc3RhbnRzJyApO1xyXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSggJ3dpbnN0b24nICk7XHJcbmNvbnN0IG5vZGVtYWlsZXIgPSByZXF1aXJlKCAnbm9kZW1haWxlcicgKTtcclxuXHJcbi8vIGNvbmZpZ3VyZSBlbWFpbCBzZXJ2ZXJcclxubGV0IHRyYW5zcG9ydGVyO1xyXG5pZiAoIGNvbnN0YW50cy5CVUlMRF9TRVJWRVJfQ09ORklHLmVtYWlsVXNlcm5hbWUgJiYgY29uc3RhbnRzLkJVSUxEX1NFUlZFUl9DT05GSUcuZW1haWxQYXNzd29yZCAmJiBjb25zdGFudHMuQlVJTERfU0VSVkVSX0NPTkZJRy5lbWFpbFRvICkge1xyXG4gIHRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoIHtcclxuICAgIGF1dGg6IHtcclxuICAgICAgdXNlcjogY29uc3RhbnRzLkJVSUxEX1NFUlZFUl9DT05GSUcuZW1haWxVc2VybmFtZSxcclxuICAgICAgcGFzczogY29uc3RhbnRzLkJVSUxEX1NFUlZFUl9DT05GSUcuZW1haWxQYXNzd29yZFxyXG4gICAgfSxcclxuICAgIGhvc3Q6IGNvbnN0YW50cy5CVUlMRF9TRVJWRVJfQ09ORklHLmVtYWlsU2VydmVyLFxyXG4gICAgcG9ydDogNTg3LFxyXG4gICAgdGxzOiB7XHJcbiAgICAgIGNpcGhlcnM6ICdTU0x2MydcclxuICAgIH1cclxuICB9ICk7XHJcbn1cclxuZWxzZSB7XHJcbiAgd2luc3Rvbi5sb2coICd3YXJuJywgJ2ZhaWxlZCB0byBzZXQgdXAgZW1haWwgc2VydmVyLCBtaXNzaW5nIG9uZSBvciBtb3JlIG9mIHRoZSBmb2xsb3dpbmcgZmllbGRzIGluIGJ1aWxkLWxvY2FsLmpzb246XFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgJ2VtYWlsVXNlcm5hbWUsIGVtYWlsUGFzc3dvcmQsIGVtYWlsVG8nICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZW5kIGFuIGVtYWlsLiBVc2VkIHRvIG5vdGlmeSBkZXZlbG9wZXJzIGlmIGEgYnVpbGQgZmFpbHNcclxuICogQHBhcmFtIHN1YmplY3RcclxuICogQHBhcmFtIHRleHRcclxuICogQHBhcmFtIGVtYWlsUGFyYW1ldGVyIC0gcmVjaXBpZW50IGRlZmluZWQgcGVyIHJlcXVlc3RcclxuICogQHBhcmFtIGVtYWlsUGFyYW1ldGVyT25seSAtIGlmIHRydWUgc2VuZCB0aGUgZW1haWwgb25seSB0byB0aGUgcGFzc2VkIGluIGVtYWlsLCBub3QgdG8gdGhlIGRlZmF1bHQgbGlzdCBhcyB3ZWxsXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uIHNlbmRFbWFpbCggc3ViamVjdCwgdGV4dCwgZW1haWxQYXJhbWV0ZXIsIGVtYWlsUGFyYW1ldGVyT25seSApIHtcclxuICBpZiAoIHRyYW5zcG9ydGVyICkge1xyXG4gICAgbGV0IGVtYWlsVG8gPSBjb25zdGFudHMuQlVJTERfU0VSVkVSX0NPTkZJRy5lbWFpbFRvO1xyXG5cclxuICAgIGlmICggZW1haWxQYXJhbWV0ZXIgKSB7XHJcbiAgICAgIGlmICggZW1haWxQYXJhbWV0ZXJPbmx5ICkge1xyXG4gICAgICAgIGVtYWlsVG8gPSBlbWFpbFBhcmFtZXRlcjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBlbWFpbFRvICs9ICggYCwgJHtlbWFpbFBhcmFtZXRlcn1gICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBkb24ndCBzZW5kIGFuIGVtYWlsIGlmIG5vIGVtYWlsIGlzIGdpdmVuXHJcbiAgICBpZiAoIGVtYWlsUGFyYW1ldGVyT25seSAmJiAhZW1haWxQYXJhbWV0ZXIgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBlbWFpbFJlc3VsdCA9IGF3YWl0IHRyYW5zcG9ydGVyLnNlbmRNYWlsKCB7XHJcbiAgICAgICAgZnJvbTogYFwiUGhFVCBNYWlsXCIgPCR7Y29uc3RhbnRzLkJVSUxEX1NFUlZFUl9DT05GSUcuZW1haWxVc2VybmFtZX0+YCxcclxuICAgICAgICB0bzogZW1haWxUbyxcclxuICAgICAgICBzdWJqZWN0OiBzdWJqZWN0LFxyXG4gICAgICAgIHRleHQ6IHRleHQucmVwbGFjZSggLyhbXlxccl0pXFxuL2csICckMVxcclxcbicgKSAvLyBSZXBsYWNlIExGIHdpdGggQ1JMRiwgYmFyZSBsaW5lIGZlZWRzIGFyZSByZWplY3RlZCBieSBzb21lIGVtYWlsIGNsaWVudHMsXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIHdpbnN0b24uaW5mbyggYHNlbnQgZW1haWw6ICR7ZW1haWxUb30sICR7c3ViamVjdH0sICR7ZW1haWxSZXN1bHQubWVzc2FnZUlkfSwgJHtlbWFpbFJlc3VsdC5yZXNwb25zZX1gICk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCggZXJyICkge1xyXG4gICAgICBsZXQgZXJyb3JTdHJpbmcgPSB0eXBlb2YgZXJyID09PSAnc3RyaW5nJyA/IGVyciA6IEpTT04uc3RyaW5naWZ5KCBlcnIgKTtcclxuICAgICAgZXJyb3JTdHJpbmcgPSBlcnJvclN0cmluZy5yZXBsYWNlKCBjb25zdGFudHMuQlVJTERfU0VSVkVSX0NPTkZJRy5lbWFpbFBhc3N3b3JkLCAnKioqUEFTU1dPUkQgUkVEQUNURUQqKionICk7XHJcbiAgICAgIHdpbnN0b24uZXJyb3IoIGBlcnJvciB3aGVuIGF0dGVtcHRlZCB0byBzZW5kIGVtYWlsLCBlcnIgPSAke2Vycm9yU3RyaW5nfWAgKTtcclxuICAgIH1cclxuICB9XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFDMUMsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUUsU0FBVSxDQUFDO0FBQ3BDLE1BQU1FLFVBQVUsR0FBR0YsT0FBTyxDQUFFLFlBQWEsQ0FBQzs7QUFFMUM7QUFDQSxJQUFJRyxXQUFXO0FBQ2YsSUFBS0osU0FBUyxDQUFDSyxtQkFBbUIsQ0FBQ0MsYUFBYSxJQUFJTixTQUFTLENBQUNLLG1CQUFtQixDQUFDRSxhQUFhLElBQUlQLFNBQVMsQ0FBQ0ssbUJBQW1CLENBQUNHLE9BQU8sRUFBRztFQUN6SUosV0FBVyxHQUFHRCxVQUFVLENBQUNNLGVBQWUsQ0FBRTtJQUN4Q0MsSUFBSSxFQUFFO01BQ0pDLElBQUksRUFBRVgsU0FBUyxDQUFDSyxtQkFBbUIsQ0FBQ0MsYUFBYTtNQUNqRE0sSUFBSSxFQUFFWixTQUFTLENBQUNLLG1CQUFtQixDQUFDRTtJQUN0QyxDQUFDO0lBQ0RNLElBQUksRUFBRWIsU0FBUyxDQUFDSyxtQkFBbUIsQ0FBQ1MsV0FBVztJQUMvQ0MsSUFBSSxFQUFFLEdBQUc7SUFDVEMsR0FBRyxFQUFFO01BQ0hDLE9BQU8sRUFBRTtJQUNYO0VBQ0YsQ0FBRSxDQUFDO0FBQ0wsQ0FBQyxNQUNJO0VBQ0hmLE9BQU8sQ0FBQ2dCLEdBQUcsQ0FBRSxNQUFNLEVBQUUsbUdBQW1HLEdBQ25HLHVDQUF3QyxDQUFDO0FBQ2hFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLGVBQWVDLFNBQVNBLENBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxjQUFjLEVBQUVDLGtCQUFrQixFQUFHO0VBQzdGLElBQUtyQixXQUFXLEVBQUc7SUFDakIsSUFBSUksT0FBTyxHQUFHUixTQUFTLENBQUNLLG1CQUFtQixDQUFDRyxPQUFPO0lBRW5ELElBQUtnQixjQUFjLEVBQUc7TUFDcEIsSUFBS0Msa0JBQWtCLEVBQUc7UUFDeEJqQixPQUFPLEdBQUdnQixjQUFjO01BQzFCLENBQUMsTUFDSTtRQUNIaEIsT0FBTyxJQUFPLEtBQUlnQixjQUFlLEVBQUc7TUFDdEM7SUFDRjs7SUFFQTtJQUNBLElBQUtDLGtCQUFrQixJQUFJLENBQUNELGNBQWMsRUFBRztNQUMzQztJQUNGO0lBRUEsSUFBSTtNQUNGLE1BQU1FLFdBQVcsR0FBRyxNQUFNdEIsV0FBVyxDQUFDdUIsUUFBUSxDQUFFO1FBQzlDQyxJQUFJLEVBQUcsZ0JBQWU1QixTQUFTLENBQUNLLG1CQUFtQixDQUFDQyxhQUFjLEdBQUU7UUFDcEV1QixFQUFFLEVBQUVyQixPQUFPO1FBQ1hjLE9BQU8sRUFBRUEsT0FBTztRQUNoQkMsSUFBSSxFQUFFQSxJQUFJLENBQUNPLE9BQU8sQ0FBRSxZQUFZLEVBQUUsUUFBUyxDQUFDLENBQUM7TUFDL0MsQ0FBRSxDQUFDOztNQUVINUIsT0FBTyxDQUFDNkIsSUFBSSxDQUFHLGVBQWN2QixPQUFRLEtBQUljLE9BQVEsS0FBSUksV0FBVyxDQUFDTSxTQUFVLEtBQUlOLFdBQVcsQ0FBQ08sUUFBUyxFQUFFLENBQUM7SUFDekcsQ0FBQyxDQUNELE9BQU9DLEdBQUcsRUFBRztNQUNYLElBQUlDLFdBQVcsR0FBRyxPQUFPRCxHQUFHLEtBQUssUUFBUSxHQUFHQSxHQUFHLEdBQUdFLElBQUksQ0FBQ0MsU0FBUyxDQUFFSCxHQUFJLENBQUM7TUFDdkVDLFdBQVcsR0FBR0EsV0FBVyxDQUFDTCxPQUFPLENBQUU5QixTQUFTLENBQUNLLG1CQUFtQixDQUFDRSxhQUFhLEVBQUUseUJBQTBCLENBQUM7TUFDM0dMLE9BQU8sQ0FBQ29DLEtBQUssQ0FBRyw2Q0FBNENILFdBQVksRUFBRSxDQUFDO0lBQzdFO0VBQ0Y7QUFDRixDQUFDIn0=