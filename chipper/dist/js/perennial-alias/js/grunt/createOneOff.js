// Copyright 2017, University of Colorado Boulder

/**
 * For `grunt create-one-off`, see Gruntfile for details
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const SimVersion = require('../common/SimVersion');
const build = require('../common/build');
const copyFile = require('../common/copyFile');
const execute = require('../common/execute');
const getRepoVersion = require('../common/getRepoVersion');
const gitAdd = require('../common/gitAdd');
const gitCommit = require('../common/gitCommit');
const gitIsClean = require('../common/gitIsClean');
const gitPush = require('../common/gitPush');
const hasRemoteBranch = require('../common/hasRemoteBranch');
const npmUpdate = require('../common/npmUpdate');
const setRepoVersion = require('../common/setRepoVersion');
const grunt = require('grunt');

/**
 * For `grunt create-one-off`, see Gruntfile for details
 * @public
 *
 * @param {string} repo - The repository name
 * @param {string} branch - The branch to create (should be {{MAJOR}}.{{MINOR}})
 * @param {string} [message] - Optional message to append to the version-increment commit.
 * @returns {Promise}
 */
module.exports = async function (repo, branch, message) {
  const hasBranchAlready = await hasRemoteBranch(repo, branch);
  if (hasBranchAlready) {
    grunt.fail.fatal('Branch already exists, aborting');
  }
  const branchedVersion = await getRepoVersion(repo);
  const newVersion = new SimVersion(branchedVersion.major, branchedVersion.minor, 0, {
    testType: branch,
    testNumber: 0
  });
  const isClean = await gitIsClean(repo);
  if (!isClean) {
    throw new Error(`Unclean status in ${repo}, cannot create release branch`);
  }

  // Create the branch, update the version info
  await execute('git', ['checkout', '-b', branch], `../${repo}`);
  await setRepoVersion(repo, newVersion, message);
  await gitPush(repo, branch);

  // Update dependencies.json for the release branch
  await npmUpdate(repo);
  await npmUpdate('chipper');
  await npmUpdate('perennial-alias');
  const brand = 'phet';
  await build(repo, {
    brands: [brand]
  });
  await copyFile(`../${repo}/build/${brand}/dependencies.json`, `../${repo}/dependencies.json`);
  await gitAdd(repo, 'dependencies.json');
  await gitCommit(repo, `updated dependencies.json for version ${newVersion.toString()}`);
  await gitPush(repo, branch);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW1WZXJzaW9uIiwicmVxdWlyZSIsImJ1aWxkIiwiY29weUZpbGUiLCJleGVjdXRlIiwiZ2V0UmVwb1ZlcnNpb24iLCJnaXRBZGQiLCJnaXRDb21taXQiLCJnaXRJc0NsZWFuIiwiZ2l0UHVzaCIsImhhc1JlbW90ZUJyYW5jaCIsIm5wbVVwZGF0ZSIsInNldFJlcG9WZXJzaW9uIiwiZ3J1bnQiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVwbyIsImJyYW5jaCIsIm1lc3NhZ2UiLCJoYXNCcmFuY2hBbHJlYWR5IiwiZmFpbCIsImZhdGFsIiwiYnJhbmNoZWRWZXJzaW9uIiwibmV3VmVyc2lvbiIsIm1ham9yIiwibWlub3IiLCJ0ZXN0VHlwZSIsInRlc3ROdW1iZXIiLCJpc0NsZWFuIiwiRXJyb3IiLCJicmFuZCIsImJyYW5kcyIsInRvU3RyaW5nIl0sInNvdXJjZXMiOlsiY3JlYXRlT25lT2ZmLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBGb3IgYGdydW50IGNyZWF0ZS1vbmUtb2ZmYCwgc2VlIEdydW50ZmlsZSBmb3IgZGV0YWlsc1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuY29uc3QgU2ltVmVyc2lvbiA9IHJlcXVpcmUoICcuLi9jb21tb24vU2ltVmVyc2lvbicgKTtcclxuY29uc3QgYnVpbGQgPSByZXF1aXJlKCAnLi4vY29tbW9uL2J1aWxkJyApO1xyXG5jb25zdCBjb3B5RmlsZSA9IHJlcXVpcmUoICcuLi9jb21tb24vY29weUZpbGUnICk7XHJcbmNvbnN0IGV4ZWN1dGUgPSByZXF1aXJlKCAnLi4vY29tbW9uL2V4ZWN1dGUnICk7XHJcbmNvbnN0IGdldFJlcG9WZXJzaW9uID0gcmVxdWlyZSggJy4uL2NvbW1vbi9nZXRSZXBvVmVyc2lvbicgKTtcclxuY29uc3QgZ2l0QWRkID0gcmVxdWlyZSggJy4uL2NvbW1vbi9naXRBZGQnICk7XHJcbmNvbnN0IGdpdENvbW1pdCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0Q29tbWl0JyApO1xyXG5jb25zdCBnaXRJc0NsZWFuID0gcmVxdWlyZSggJy4uL2NvbW1vbi9naXRJc0NsZWFuJyApO1xyXG5jb25zdCBnaXRQdXNoID0gcmVxdWlyZSggJy4uL2NvbW1vbi9naXRQdXNoJyApO1xyXG5jb25zdCBoYXNSZW1vdGVCcmFuY2ggPSByZXF1aXJlKCAnLi4vY29tbW9uL2hhc1JlbW90ZUJyYW5jaCcgKTtcclxuY29uc3QgbnBtVXBkYXRlID0gcmVxdWlyZSggJy4uL2NvbW1vbi9ucG1VcGRhdGUnICk7XHJcbmNvbnN0IHNldFJlcG9WZXJzaW9uID0gcmVxdWlyZSggJy4uL2NvbW1vbi9zZXRSZXBvVmVyc2lvbicgKTtcclxuY29uc3QgZ3J1bnQgPSByZXF1aXJlKCAnZ3J1bnQnICk7XHJcblxyXG4vKipcclxuICogRm9yIGBncnVudCBjcmVhdGUtb25lLW9mZmAsIHNlZSBHcnVudGZpbGUgZm9yIGRldGFpbHNcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbyAtIFRoZSByZXBvc2l0b3J5IG5hbWVcclxuICogQHBhcmFtIHtzdHJpbmd9IGJyYW5jaCAtIFRoZSBicmFuY2ggdG8gY3JlYXRlIChzaG91bGQgYmUge3tNQUpPUn19Lnt7TUlOT1J9fSlcclxuICogQHBhcmFtIHtzdHJpbmd9IFttZXNzYWdlXSAtIE9wdGlvbmFsIG1lc3NhZ2UgdG8gYXBwZW5kIHRvIHRoZSB2ZXJzaW9uLWluY3JlbWVudCBjb21taXQuXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiggcmVwbywgYnJhbmNoLCBtZXNzYWdlICkge1xyXG4gIGNvbnN0IGhhc0JyYW5jaEFscmVhZHkgPSBhd2FpdCBoYXNSZW1vdGVCcmFuY2goIHJlcG8sIGJyYW5jaCApO1xyXG4gIGlmICggaGFzQnJhbmNoQWxyZWFkeSApIHtcclxuICAgIGdydW50LmZhaWwuZmF0YWwoICdCcmFuY2ggYWxyZWFkeSBleGlzdHMsIGFib3J0aW5nJyApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYnJhbmNoZWRWZXJzaW9uID0gYXdhaXQgZ2V0UmVwb1ZlcnNpb24oIHJlcG8gKTtcclxuXHJcbiAgY29uc3QgbmV3VmVyc2lvbiA9IG5ldyBTaW1WZXJzaW9uKCBicmFuY2hlZFZlcnNpb24ubWFqb3IsIGJyYW5jaGVkVmVyc2lvbi5taW5vciwgMCwge1xyXG4gICAgdGVzdFR5cGU6IGJyYW5jaCxcclxuICAgIHRlc3ROdW1iZXI6IDBcclxuICB9ICk7XHJcblxyXG4gIGNvbnN0IGlzQ2xlYW4gPSBhd2FpdCBnaXRJc0NsZWFuKCByZXBvICk7XHJcbiAgaWYgKCAhaXNDbGVhbiApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggYFVuY2xlYW4gc3RhdHVzIGluICR7cmVwb30sIGNhbm5vdCBjcmVhdGUgcmVsZWFzZSBicmFuY2hgICk7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgdGhlIGJyYW5jaCwgdXBkYXRlIHRoZSB2ZXJzaW9uIGluZm9cclxuICBhd2FpdCBleGVjdXRlKCAnZ2l0JywgWyAnY2hlY2tvdXQnLCAnLWInLCBicmFuY2ggXSwgYC4uLyR7cmVwb31gICk7XHJcbiAgYXdhaXQgc2V0UmVwb1ZlcnNpb24oIHJlcG8sIG5ld1ZlcnNpb24sIG1lc3NhZ2UgKTtcclxuICBhd2FpdCBnaXRQdXNoKCByZXBvLCBicmFuY2ggKTtcclxuXHJcbiAgLy8gVXBkYXRlIGRlcGVuZGVuY2llcy5qc29uIGZvciB0aGUgcmVsZWFzZSBicmFuY2hcclxuICBhd2FpdCBucG1VcGRhdGUoIHJlcG8gKTtcclxuICBhd2FpdCBucG1VcGRhdGUoICdjaGlwcGVyJyApO1xyXG4gIGF3YWl0IG5wbVVwZGF0ZSggJ3BlcmVubmlhbC1hbGlhcycgKTtcclxuXHJcbiAgY29uc3QgYnJhbmQgPSAncGhldCc7XHJcbiAgYXdhaXQgYnVpbGQoIHJlcG8sIHtcclxuICAgIGJyYW5kczogWyBicmFuZCBdXHJcbiAgfSApO1xyXG4gIGF3YWl0IGNvcHlGaWxlKCBgLi4vJHtyZXBvfS9idWlsZC8ke2JyYW5kfS9kZXBlbmRlbmNpZXMuanNvbmAsIGAuLi8ke3JlcG99L2RlcGVuZGVuY2llcy5qc29uYCApO1xyXG4gIGF3YWl0IGdpdEFkZCggcmVwbywgJ2RlcGVuZGVuY2llcy5qc29uJyApO1xyXG4gIGF3YWl0IGdpdENvbW1pdCggcmVwbywgYHVwZGF0ZWQgZGVwZW5kZW5jaWVzLmpzb24gZm9yIHZlcnNpb24gJHtuZXdWZXJzaW9uLnRvU3RyaW5nKCl9YCApO1xyXG4gIGF3YWl0IGdpdFB1c2goIHJlcG8sIGJyYW5jaCApO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUUsc0JBQXVCLENBQUM7QUFDcEQsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUUsaUJBQWtCLENBQUM7QUFDMUMsTUFBTUUsUUFBUSxHQUFHRixPQUFPLENBQUUsb0JBQXFCLENBQUM7QUFDaEQsTUFBTUcsT0FBTyxHQUFHSCxPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDOUMsTUFBTUksY0FBYyxHQUFHSixPQUFPLENBQUUsMEJBQTJCLENBQUM7QUFDNUQsTUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUUsa0JBQW1CLENBQUM7QUFDNUMsTUFBTU0sU0FBUyxHQUFHTixPQUFPLENBQUUscUJBQXNCLENBQUM7QUFDbEQsTUFBTU8sVUFBVSxHQUFHUCxPQUFPLENBQUUsc0JBQXVCLENBQUM7QUFDcEQsTUFBTVEsT0FBTyxHQUFHUixPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDOUMsTUFBTVMsZUFBZSxHQUFHVCxPQUFPLENBQUUsMkJBQTRCLENBQUM7QUFDOUQsTUFBTVUsU0FBUyxHQUFHVixPQUFPLENBQUUscUJBQXNCLENBQUM7QUFDbEQsTUFBTVcsY0FBYyxHQUFHWCxPQUFPLENBQUUsMEJBQTJCLENBQUM7QUFDNUQsTUFBTVksS0FBSyxHQUFHWixPQUFPLENBQUUsT0FBUSxDQUFDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsZ0JBQWdCQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0VBQ3ZELE1BQU1DLGdCQUFnQixHQUFHLE1BQU1ULGVBQWUsQ0FBRU0sSUFBSSxFQUFFQyxNQUFPLENBQUM7RUFDOUQsSUFBS0UsZ0JBQWdCLEVBQUc7SUFDdEJOLEtBQUssQ0FBQ08sSUFBSSxDQUFDQyxLQUFLLENBQUUsaUNBQWtDLENBQUM7RUFDdkQ7RUFFQSxNQUFNQyxlQUFlLEdBQUcsTUFBTWpCLGNBQWMsQ0FBRVcsSUFBSyxDQUFDO0VBRXBELE1BQU1PLFVBQVUsR0FBRyxJQUFJdkIsVUFBVSxDQUFFc0IsZUFBZSxDQUFDRSxLQUFLLEVBQUVGLGVBQWUsQ0FBQ0csS0FBSyxFQUFFLENBQUMsRUFBRTtJQUNsRkMsUUFBUSxFQUFFVCxNQUFNO0lBQ2hCVSxVQUFVLEVBQUU7RUFDZCxDQUFFLENBQUM7RUFFSCxNQUFNQyxPQUFPLEdBQUcsTUFBTXBCLFVBQVUsQ0FBRVEsSUFBSyxDQUFDO0VBQ3hDLElBQUssQ0FBQ1ksT0FBTyxFQUFHO0lBQ2QsTUFBTSxJQUFJQyxLQUFLLENBQUcscUJBQW9CYixJQUFLLGdDQUFnQyxDQUFDO0VBQzlFOztFQUVBO0VBQ0EsTUFBTVosT0FBTyxDQUFFLEtBQUssRUFBRSxDQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUVhLE1BQU0sQ0FBRSxFQUFHLE1BQUtELElBQUssRUFBRSxDQUFDO0VBQ2xFLE1BQU1KLGNBQWMsQ0FBRUksSUFBSSxFQUFFTyxVQUFVLEVBQUVMLE9BQVEsQ0FBQztFQUNqRCxNQUFNVCxPQUFPLENBQUVPLElBQUksRUFBRUMsTUFBTyxDQUFDOztFQUU3QjtFQUNBLE1BQU1OLFNBQVMsQ0FBRUssSUFBSyxDQUFDO0VBQ3ZCLE1BQU1MLFNBQVMsQ0FBRSxTQUFVLENBQUM7RUFDNUIsTUFBTUEsU0FBUyxDQUFFLGlCQUFrQixDQUFDO0VBRXBDLE1BQU1tQixLQUFLLEdBQUcsTUFBTTtFQUNwQixNQUFNNUIsS0FBSyxDQUFFYyxJQUFJLEVBQUU7SUFDakJlLE1BQU0sRUFBRSxDQUFFRCxLQUFLO0VBQ2pCLENBQUUsQ0FBQztFQUNILE1BQU0zQixRQUFRLENBQUcsTUFBS2EsSUFBSyxVQUFTYyxLQUFNLG9CQUFtQixFQUFHLE1BQUtkLElBQUssb0JBQW9CLENBQUM7RUFDL0YsTUFBTVYsTUFBTSxDQUFFVSxJQUFJLEVBQUUsbUJBQW9CLENBQUM7RUFDekMsTUFBTVQsU0FBUyxDQUFFUyxJQUFJLEVBQUcseUNBQXdDTyxVQUFVLENBQUNTLFFBQVEsQ0FBQyxDQUFFLEVBQUUsQ0FBQztFQUN6RixNQUFNdkIsT0FBTyxDQUFFTyxJQUFJLEVBQUVDLE1BQU8sQ0FBQztBQUMvQixDQUFDIn0=