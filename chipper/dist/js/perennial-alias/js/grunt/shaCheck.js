// Copyright 2017, University of Colorado Boulder

/**
 * Given a repository and a SHA, it checks all live HTML sims to see whether they include the SHA in their release
 * branch or not.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const getDependencies = require('../common/getDependencies');
const gitCheckout = require('../common/gitCheckout');
const gitIsAncestor = require('../common/gitIsAncestor');
const simMetadata = require('../common/simMetadata');

/**
 * Will print out information about with simulations include the given SHA, and which ones don't.
 * @public
 *
 * @param {string} repo
 * @param {string} sha
 * @returns {Promise}
 */
module.exports = async function (repo, sha) {
  const data = await simMetadata();
  const sims = data.projects.map(simData => {
    return {
      name: simData.name.slice(simData.name.indexOf('/') + 1),
      branch: `${simData.version.major}.${simData.version.minor}`
    };
  });
  const includedSims = [];
  const excludedSims = [];
  for (const sim of sims) {
    console.log(`checking ${sim.name}`);
    await gitCheckout(sim.name, sim.branch);
    const dependencies = await getDependencies(sim.name);
    const repoSHA = dependencies[repo].sha;
    const isAncestor = await gitIsAncestor(repo, sha, repoSHA);
    (isAncestor ? includedSims : excludedSims).push(sim);
    await gitCheckout(sim.name, 'master');
  }
  console.log('\nSims that include the commit in their tree: ');
  console.log(includedSims.map(sim => sim.name).join('\n'));
  console.log('\nSims that do NOT include the commit in their tree: ');
  console.log(excludedSims.map(sim => sim.name).join('\n'));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXREZXBlbmRlbmNpZXMiLCJyZXF1aXJlIiwiZ2l0Q2hlY2tvdXQiLCJnaXRJc0FuY2VzdG9yIiwic2ltTWV0YWRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVwbyIsInNoYSIsImRhdGEiLCJzaW1zIiwicHJvamVjdHMiLCJtYXAiLCJzaW1EYXRhIiwibmFtZSIsInNsaWNlIiwiaW5kZXhPZiIsImJyYW5jaCIsInZlcnNpb24iLCJtYWpvciIsIm1pbm9yIiwiaW5jbHVkZWRTaW1zIiwiZXhjbHVkZWRTaW1zIiwic2ltIiwiY29uc29sZSIsImxvZyIsImRlcGVuZGVuY2llcyIsInJlcG9TSEEiLCJpc0FuY2VzdG9yIiwicHVzaCIsImpvaW4iXSwic291cmNlcyI6WyJzaGFDaGVjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR2l2ZW4gYSByZXBvc2l0b3J5IGFuZCBhIFNIQSwgaXQgY2hlY2tzIGFsbCBsaXZlIEhUTUwgc2ltcyB0byBzZWUgd2hldGhlciB0aGV5IGluY2x1ZGUgdGhlIFNIQSBpbiB0aGVpciByZWxlYXNlXHJcbiAqIGJyYW5jaCBvciBub3QuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5jb25zdCBnZXREZXBlbmRlbmNpZXMgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dldERlcGVuZGVuY2llcycgKTtcclxuY29uc3QgZ2l0Q2hlY2tvdXQgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dpdENoZWNrb3V0JyApO1xyXG5jb25zdCBnaXRJc0FuY2VzdG9yID0gcmVxdWlyZSggJy4uL2NvbW1vbi9naXRJc0FuY2VzdG9yJyApO1xyXG5jb25zdCBzaW1NZXRhZGF0YSA9IHJlcXVpcmUoICcuLi9jb21tb24vc2ltTWV0YWRhdGEnICk7XHJcblxyXG4vKipcclxuICogV2lsbCBwcmludCBvdXQgaW5mb3JtYXRpb24gYWJvdXQgd2l0aCBzaW11bGF0aW9ucyBpbmNsdWRlIHRoZSBnaXZlbiBTSEEsIGFuZCB3aGljaCBvbmVzIGRvbid0LlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBvXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzaGFcclxuICogQHJldHVybnMge1Byb21pc2V9XHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uKCByZXBvLCBzaGEgKSB7XHJcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHNpbU1ldGFkYXRhKCk7XHJcblxyXG4gIGNvbnN0IHNpbXMgPSBkYXRhLnByb2plY3RzLm1hcCggc2ltRGF0YSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuYW1lOiBzaW1EYXRhLm5hbWUuc2xpY2UoIHNpbURhdGEubmFtZS5pbmRleE9mKCAnLycgKSArIDEgKSxcclxuICAgICAgYnJhbmNoOiBgJHtzaW1EYXRhLnZlcnNpb24ubWFqb3J9LiR7c2ltRGF0YS52ZXJzaW9uLm1pbm9yfWBcclxuICAgIH07XHJcbiAgfSApO1xyXG5cclxuICBjb25zdCBpbmNsdWRlZFNpbXMgPSBbXTtcclxuICBjb25zdCBleGNsdWRlZFNpbXMgPSBbXTtcclxuXHJcbiAgZm9yICggY29uc3Qgc2ltIG9mIHNpbXMgKSB7XHJcbiAgICBjb25zb2xlLmxvZyggYGNoZWNraW5nICR7c2ltLm5hbWV9YCApO1xyXG5cclxuICAgIGF3YWl0IGdpdENoZWNrb3V0KCBzaW0ubmFtZSwgc2ltLmJyYW5jaCApO1xyXG4gICAgY29uc3QgZGVwZW5kZW5jaWVzID0gYXdhaXQgZ2V0RGVwZW5kZW5jaWVzKCBzaW0ubmFtZSApO1xyXG4gICAgY29uc3QgcmVwb1NIQSA9IGRlcGVuZGVuY2llc1sgcmVwbyBdLnNoYTtcclxuICAgIGNvbnN0IGlzQW5jZXN0b3IgPSBhd2FpdCBnaXRJc0FuY2VzdG9yKCByZXBvLCBzaGEsIHJlcG9TSEEgKTtcclxuICAgICggaXNBbmNlc3RvciA/IGluY2x1ZGVkU2ltcyA6IGV4Y2x1ZGVkU2ltcyApLnB1c2goIHNpbSApO1xyXG4gICAgYXdhaXQgZ2l0Q2hlY2tvdXQoIHNpbS5uYW1lLCAnbWFzdGVyJyApO1xyXG4gIH1cclxuXHJcbiAgY29uc29sZS5sb2coICdcXG5TaW1zIHRoYXQgaW5jbHVkZSB0aGUgY29tbWl0IGluIHRoZWlyIHRyZWU6ICcgKTtcclxuICBjb25zb2xlLmxvZyggaW5jbHVkZWRTaW1zLm1hcCggc2ltID0+IHNpbS5uYW1lICkuam9pbiggJ1xcbicgKSApO1xyXG4gIGNvbnNvbGUubG9nKCAnXFxuU2ltcyB0aGF0IGRvIE5PVCBpbmNsdWRlIHRoZSBjb21taXQgaW4gdGhlaXIgdHJlZTogJyApO1xyXG4gIGNvbnNvbGUubG9nKCBleGNsdWRlZFNpbXMubWFwKCBzaW0gPT4gc2ltLm5hbWUgKS5qb2luKCAnXFxuJyApICk7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLGVBQWUsR0FBR0MsT0FBTyxDQUFFLDJCQUE0QixDQUFDO0FBQzlELE1BQU1DLFdBQVcsR0FBR0QsT0FBTyxDQUFFLHVCQUF3QixDQUFDO0FBQ3RELE1BQU1FLGFBQWEsR0FBR0YsT0FBTyxDQUFFLHlCQUEwQixDQUFDO0FBQzFELE1BQU1HLFdBQVcsR0FBR0gsT0FBTyxDQUFFLHVCQUF3QixDQUFDOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLGdCQUFnQkMsSUFBSSxFQUFFQyxHQUFHLEVBQUc7RUFDM0MsTUFBTUMsSUFBSSxHQUFHLE1BQU1MLFdBQVcsQ0FBQyxDQUFDO0VBRWhDLE1BQU1NLElBQUksR0FBR0QsSUFBSSxDQUFDRSxRQUFRLENBQUNDLEdBQUcsQ0FBRUMsT0FBTyxJQUFJO0lBQ3pDLE9BQU87TUFDTEMsSUFBSSxFQUFFRCxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFFRixPQUFPLENBQUNDLElBQUksQ0FBQ0UsT0FBTyxDQUFFLEdBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQztNQUMzREMsTUFBTSxFQUFHLEdBQUVKLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDQyxLQUFNLElBQUdOLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDRSxLQUFNO0lBQzVELENBQUM7RUFDSCxDQUFFLENBQUM7RUFFSCxNQUFNQyxZQUFZLEdBQUcsRUFBRTtFQUN2QixNQUFNQyxZQUFZLEdBQUcsRUFBRTtFQUV2QixLQUFNLE1BQU1DLEdBQUcsSUFBSWIsSUFBSSxFQUFHO0lBQ3hCYyxPQUFPLENBQUNDLEdBQUcsQ0FBRyxZQUFXRixHQUFHLENBQUNULElBQUssRUFBRSxDQUFDO0lBRXJDLE1BQU1aLFdBQVcsQ0FBRXFCLEdBQUcsQ0FBQ1QsSUFBSSxFQUFFUyxHQUFHLENBQUNOLE1BQU8sQ0FBQztJQUN6QyxNQUFNUyxZQUFZLEdBQUcsTUFBTTFCLGVBQWUsQ0FBRXVCLEdBQUcsQ0FBQ1QsSUFBSyxDQUFDO0lBQ3RELE1BQU1hLE9BQU8sR0FBR0QsWUFBWSxDQUFFbkIsSUFBSSxDQUFFLENBQUNDLEdBQUc7SUFDeEMsTUFBTW9CLFVBQVUsR0FBRyxNQUFNekIsYUFBYSxDQUFFSSxJQUFJLEVBQUVDLEdBQUcsRUFBRW1CLE9BQVEsQ0FBQztJQUM1RCxDQUFFQyxVQUFVLEdBQUdQLFlBQVksR0FBR0MsWUFBWSxFQUFHTyxJQUFJLENBQUVOLEdBQUksQ0FBQztJQUN4RCxNQUFNckIsV0FBVyxDQUFFcUIsR0FBRyxDQUFDVCxJQUFJLEVBQUUsUUFBUyxDQUFDO0VBQ3pDO0VBRUFVLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLGdEQUFpRCxDQUFDO0VBQy9ERCxPQUFPLENBQUNDLEdBQUcsQ0FBRUosWUFBWSxDQUFDVCxHQUFHLENBQUVXLEdBQUcsSUFBSUEsR0FBRyxDQUFDVCxJQUFLLENBQUMsQ0FBQ2dCLElBQUksQ0FBRSxJQUFLLENBQUUsQ0FBQztFQUMvRE4sT0FBTyxDQUFDQyxHQUFHLENBQUUsdURBQXdELENBQUM7RUFDdEVELE9BQU8sQ0FBQ0MsR0FBRyxDQUFFSCxZQUFZLENBQUNWLEdBQUcsQ0FBRVcsR0FBRyxJQUFJQSxHQUFHLENBQUNULElBQUssQ0FBQyxDQUFDZ0IsSUFBSSxDQUFFLElBQUssQ0FBRSxDQUFDO0FBQ2pFLENBQUMifQ==