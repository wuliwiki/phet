// Copyright 2015-2023, University of Colorado Boulder

/**
 * Scene for the 'Equations' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import FBConstants from '../../common/FBConstants.js';
import FBSymbols from '../../common/FBSymbols.js';
import MathBuilder from '../../common/model/builder/MathBuilder.js';
import Divide from '../../common/model/functions/Divide.js';
import FunctionCreator from '../../common/model/functions/FunctionCreator.js';
import Minus from '../../common/model/functions/Minus.js';
import Plus from '../../common/model/functions/Plus.js';
import Times from '../../common/model/functions/Times.js';
import RationalNumber from '../../common/model/RationalNumber.js';
import Scene from '../../common/model/Scene.js';
import functionBuilder from '../../functionBuilder.js';

// constants
const CARD_NUMBERS_RANGE = new Range(-4, 6);
export default class EquationsScene extends Scene {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      numberOfSlots: 3,
      // number of slots in the builder
      numberOfEachCard: 1,
      // number of instances of each card type
      numberOfEachFunction: 2,
      // number of instances of each function type
      cardSymbol: FBSymbols.X // add 'x' card to the carousels
    }, options);

    // {RationalNumber[]} number cards, in the order that they appear in the carousel
    const cardContent = [];
    for (let i = CARD_NUMBERS_RANGE.min; i <= CARD_NUMBERS_RANGE.max; i++) {
      cardContent.push(RationalNumber.withInteger(i));
    }

    // {FunctionCreator[]} function creators, in the order that functions appear in the carousel
    const functionCreators = [new FunctionCreator(Plus), new FunctionCreator(Minus), new FunctionCreator(Times), new FunctionCreator(Divide)];

    // builder
    const builderWidth = Scene.computeBuilderWidth(options.numberOfSlots);
    const builderX = FBConstants.SCREEN_VIEW_LAYOUT_BOUNDS.width / 2 - builderWidth / 2;
    const builder = new MathBuilder({
      numberOfSlots: options.numberOfSlots,
      width: builderWidth,
      position: new Vector2(builderX, FBConstants.BUILDER_Y)
    });
    super(cardContent, functionCreators, builder, options);
  }
}
functionBuilder.register('EquationsScene', EquationsScene);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlZlY3RvcjIiLCJtZXJnZSIsIkZCQ29uc3RhbnRzIiwiRkJTeW1ib2xzIiwiTWF0aEJ1aWxkZXIiLCJEaXZpZGUiLCJGdW5jdGlvbkNyZWF0b3IiLCJNaW51cyIsIlBsdXMiLCJUaW1lcyIsIlJhdGlvbmFsTnVtYmVyIiwiU2NlbmUiLCJmdW5jdGlvbkJ1aWxkZXIiLCJDQVJEX05VTUJFUlNfUkFOR0UiLCJFcXVhdGlvbnNTY2VuZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm51bWJlck9mU2xvdHMiLCJudW1iZXJPZkVhY2hDYXJkIiwibnVtYmVyT2ZFYWNoRnVuY3Rpb24iLCJjYXJkU3ltYm9sIiwiWCIsImNhcmRDb250ZW50IiwiaSIsIm1pbiIsIm1heCIsInB1c2giLCJ3aXRoSW50ZWdlciIsImZ1bmN0aW9uQ3JlYXRvcnMiLCJidWlsZGVyV2lkdGgiLCJjb21wdXRlQnVpbGRlcldpZHRoIiwiYnVpbGRlclgiLCJTQ1JFRU5fVklFV19MQVlPVVRfQk9VTkRTIiwid2lkdGgiLCJidWlsZGVyIiwicG9zaXRpb24iLCJCVUlMREVSX1kiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVxdWF0aW9uc1NjZW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNjZW5lIGZvciB0aGUgJ0VxdWF0aW9ucycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgRkJDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0ZCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEZCU3ltYm9scyBmcm9tICcuLi8uLi9jb21tb24vRkJTeW1ib2xzLmpzJztcclxuaW1wb3J0IE1hdGhCdWlsZGVyIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9idWlsZGVyL01hdGhCdWlsZGVyLmpzJztcclxuaW1wb3J0IERpdmlkZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvZnVuY3Rpb25zL0RpdmlkZS5qcyc7XHJcbmltcG9ydCBGdW5jdGlvbkNyZWF0b3IgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL2Z1bmN0aW9ucy9GdW5jdGlvbkNyZWF0b3IuanMnO1xyXG5pbXBvcnQgTWludXMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL2Z1bmN0aW9ucy9NaW51cy5qcyc7XHJcbmltcG9ydCBQbHVzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9mdW5jdGlvbnMvUGx1cy5qcyc7XHJcbmltcG9ydCBUaW1lcyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvZnVuY3Rpb25zL1RpbWVzLmpzJztcclxuaW1wb3J0IFJhdGlvbmFsTnVtYmVyIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9SYXRpb25hbE51bWJlci5qcyc7XHJcbmltcG9ydCBTY2VuZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU2NlbmUuanMnO1xyXG5pbXBvcnQgZnVuY3Rpb25CdWlsZGVyIGZyb20gJy4uLy4uL2Z1bmN0aW9uQnVpbGRlci5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQ0FSRF9OVU1CRVJTX1JBTkdFID0gbmV3IFJhbmdlKCAtNCwgNiApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXF1YXRpb25zU2NlbmUgZXh0ZW5kcyBTY2VuZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgbnVtYmVyT2ZTbG90czogMywgLy8gbnVtYmVyIG9mIHNsb3RzIGluIHRoZSBidWlsZGVyXHJcbiAgICAgIG51bWJlck9mRWFjaENhcmQ6IDEsIC8vIG51bWJlciBvZiBpbnN0YW5jZXMgb2YgZWFjaCBjYXJkIHR5cGVcclxuICAgICAgbnVtYmVyT2ZFYWNoRnVuY3Rpb246IDIsIC8vIG51bWJlciBvZiBpbnN0YW5jZXMgb2YgZWFjaCBmdW5jdGlvbiB0eXBlXHJcbiAgICAgIGNhcmRTeW1ib2w6IEZCU3ltYm9scy5YIC8vIGFkZCAneCcgY2FyZCB0byB0aGUgY2Fyb3VzZWxzXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8ge1JhdGlvbmFsTnVtYmVyW119IG51bWJlciBjYXJkcywgaW4gdGhlIG9yZGVyIHRoYXQgdGhleSBhcHBlYXIgaW4gdGhlIGNhcm91c2VsXHJcbiAgICBjb25zdCBjYXJkQ29udGVudCA9IFtdO1xyXG4gICAgZm9yICggbGV0IGkgPSBDQVJEX05VTUJFUlNfUkFOR0UubWluOyBpIDw9IENBUkRfTlVNQkVSU19SQU5HRS5tYXg7IGkrKyApIHtcclxuICAgICAgY2FyZENvbnRlbnQucHVzaCggUmF0aW9uYWxOdW1iZXIud2l0aEludGVnZXIoIGkgKSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHtGdW5jdGlvbkNyZWF0b3JbXX0gZnVuY3Rpb24gY3JlYXRvcnMsIGluIHRoZSBvcmRlciB0aGF0IGZ1bmN0aW9ucyBhcHBlYXIgaW4gdGhlIGNhcm91c2VsXHJcbiAgICBjb25zdCBmdW5jdGlvbkNyZWF0b3JzID0gW1xyXG4gICAgICBuZXcgRnVuY3Rpb25DcmVhdG9yKCBQbHVzICksXHJcbiAgICAgIG5ldyBGdW5jdGlvbkNyZWF0b3IoIE1pbnVzICksXHJcbiAgICAgIG5ldyBGdW5jdGlvbkNyZWF0b3IoIFRpbWVzICksXHJcbiAgICAgIG5ldyBGdW5jdGlvbkNyZWF0b3IoIERpdmlkZSApXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIGJ1aWxkZXJcclxuICAgIGNvbnN0IGJ1aWxkZXJXaWR0aCA9IFNjZW5lLmNvbXB1dGVCdWlsZGVyV2lkdGgoIG9wdGlvbnMubnVtYmVyT2ZTbG90cyApO1xyXG4gICAgY29uc3QgYnVpbGRlclggPSAoIEZCQ29uc3RhbnRzLlNDUkVFTl9WSUVXX0xBWU9VVF9CT1VORFMud2lkdGggLyAyICkgLSAoIGJ1aWxkZXJXaWR0aCAvIDIgKTtcclxuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgTWF0aEJ1aWxkZXIoIHtcclxuICAgICAgbnVtYmVyT2ZTbG90czogb3B0aW9ucy5udW1iZXJPZlNsb3RzLFxyXG4gICAgICB3aWR0aDogYnVpbGRlcldpZHRoLFxyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjIoIGJ1aWxkZXJYLCBGQkNvbnN0YW50cy5CVUlMREVSX1kgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBjYXJkQ29udGVudCwgZnVuY3Rpb25DcmVhdG9ycywgYnVpbGRlciwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb25CdWlsZGVyLnJlZ2lzdGVyKCAnRXF1YXRpb25zU2NlbmUnLCBFcXVhdGlvbnNTY2VuZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxXQUFXLE1BQU0sNkJBQTZCO0FBQ3JELE9BQU9DLFNBQVMsTUFBTSwyQkFBMkI7QUFDakQsT0FBT0MsV0FBVyxNQUFNLDJDQUEyQztBQUNuRSxPQUFPQyxNQUFNLE1BQU0sd0NBQXdDO0FBQzNELE9BQU9DLGVBQWUsTUFBTSxpREFBaUQ7QUFDN0UsT0FBT0MsS0FBSyxNQUFNLHVDQUF1QztBQUN6RCxPQUFPQyxJQUFJLE1BQU0sc0NBQXNDO0FBQ3ZELE9BQU9DLEtBQUssTUFBTSx1Q0FBdUM7QUFDekQsT0FBT0MsY0FBYyxNQUFNLHNDQUFzQztBQUNqRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7O0FBRXREO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsSUFBSWQsS0FBSyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQztBQUU3QyxlQUFlLE1BQU1lLGNBQWMsU0FBU0gsS0FBSyxDQUFDO0VBRWhEO0FBQ0Y7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckJBLE9BQU8sR0FBR2YsS0FBSyxDQUFFO01BQ2ZnQixhQUFhLEVBQUUsQ0FBQztNQUFFO01BQ2xCQyxnQkFBZ0IsRUFBRSxDQUFDO01BQUU7TUFDckJDLG9CQUFvQixFQUFFLENBQUM7TUFBRTtNQUN6QkMsVUFBVSxFQUFFakIsU0FBUyxDQUFDa0IsQ0FBQyxDQUFDO0lBQzFCLENBQUMsRUFBRUwsT0FBUSxDQUFDOztJQUVaO0lBQ0EsTUFBTU0sV0FBVyxHQUFHLEVBQUU7SUFDdEIsS0FBTSxJQUFJQyxDQUFDLEdBQUdWLGtCQUFrQixDQUFDVyxHQUFHLEVBQUVELENBQUMsSUFBSVYsa0JBQWtCLENBQUNZLEdBQUcsRUFBRUYsQ0FBQyxFQUFFLEVBQUc7TUFDdkVELFdBQVcsQ0FBQ0ksSUFBSSxDQUFFaEIsY0FBYyxDQUFDaUIsV0FBVyxDQUFFSixDQUFFLENBQUUsQ0FBQztJQUNyRDs7SUFFQTtJQUNBLE1BQU1LLGdCQUFnQixHQUFHLENBQ3ZCLElBQUl0QixlQUFlLENBQUVFLElBQUssQ0FBQyxFQUMzQixJQUFJRixlQUFlLENBQUVDLEtBQU0sQ0FBQyxFQUM1QixJQUFJRCxlQUFlLENBQUVHLEtBQU0sQ0FBQyxFQUM1QixJQUFJSCxlQUFlLENBQUVELE1BQU8sQ0FBQyxDQUM5Qjs7SUFFRDtJQUNBLE1BQU13QixZQUFZLEdBQUdsQixLQUFLLENBQUNtQixtQkFBbUIsQ0FBRWQsT0FBTyxDQUFDQyxhQUFjLENBQUM7SUFDdkUsTUFBTWMsUUFBUSxHQUFLN0IsV0FBVyxDQUFDOEIseUJBQXlCLENBQUNDLEtBQUssR0FBRyxDQUFDLEdBQU9KLFlBQVksR0FBRyxDQUFHO0lBQzNGLE1BQU1LLE9BQU8sR0FBRyxJQUFJOUIsV0FBVyxDQUFFO01BQy9CYSxhQUFhLEVBQUVELE9BQU8sQ0FBQ0MsYUFBYTtNQUNwQ2dCLEtBQUssRUFBRUosWUFBWTtNQUNuQk0sUUFBUSxFQUFFLElBQUluQyxPQUFPLENBQUUrQixRQUFRLEVBQUU3QixXQUFXLENBQUNrQyxTQUFVO0lBQ3pELENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRWQsV0FBVyxFQUFFTSxnQkFBZ0IsRUFBRU0sT0FBTyxFQUFFbEIsT0FBUSxDQUFDO0VBQzFEO0FBQ0Y7QUFFQUosZUFBZSxDQUFDeUIsUUFBUSxDQUFFLGdCQUFnQixFQUFFdkIsY0FBZSxDQUFDIn0=