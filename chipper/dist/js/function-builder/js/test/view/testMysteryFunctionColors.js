// Copyright 2016-2023, University of Colorado Boulder

/**
 * Displays the colors used for functions in the Mystery screen.
 * Each row is a mutually-exclusive set of colors, from which 1 color will be chosen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import { Shape } from '../../../../kite/js/imports.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Color, HBox, Node, Path, Text, VBox } from '../../../../scenery/js/imports.js';
import FBColors from '../../common/FBColors.js';
import functionBuilder from '../../functionBuilder.js';

/**
 * @param {Bounds2} layoutBounds
 * @returns {Node}
 */
export default function testMysteryFunctionColors(layoutBounds) {
  // These names are hard coded to correspond to the pools in FBColors.MYSTERY_COLOR_SETS
  const colorSetNames = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'magenta'];
  assert && assert(colorSetNames.length === FBColors.MYSTERY_COLOR_SETS.length);
  const vBoxChildren = [];
  for (let i = 0; i < FBColors.MYSTERY_COLOR_SETS.length; i++) {
    const hBoxChildren = [];

    // label to left of row
    hBoxChildren.push(new Text(colorSetNames[i], {
      font: new PhetFont(20)
    }));

    // row of functions
    const colorSet = FBColors.MYSTERY_COLOR_SETS[i];
    colorSet.forEach(color => {
      hBoxChildren.push(new TestFunctionNode({
        fill: color
      }));
    });
    vBoxChildren.push(new HBox({
      children: hBoxChildren,
      spacing: 10
    }));
  }
  return new VBox({
    children: vBoxChildren,
    align: 'right',
    spacing: 10,
    centerX: layoutBounds.centerX,
    centerY: layoutBounds.centerY + 30
  });
}
class TestFunctionNode extends Node {
  /**
   * Use this simplified representation so that this test is not dependent on other sim code.
   *
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      size: new Dimension2(140, 60),
      fill: 'white',
      stroke: 'black'
    }, options);
    const WIDTH = options.size.width;
    const HEIGHT = options.size.height;
    const X_INSET = 0.18 * WIDTH;

    // Described from top-left, moving clockwise.
    const functionShape = new Shape().moveTo(0, 0).lineTo(WIDTH - X_INSET, 0).lineTo(WIDTH, HEIGHT / 2).lineTo(WIDTH - X_INSET, HEIGHT).lineTo(0, HEIGHT).lineTo(X_INSET, HEIGHT / 2).close();
    const functionNode = new Path(functionShape, {
      fill: options.fill,
      stroke: options.stroke
    });
    const color = Color.toColor(options.fill);
    const rgbString = `${color.red}, ${color.green}, ${color.blue}`;
    const rgbTextNode = new Text(rgbString, {
      font: new PhetFont(14),
      centerX: functionNode.centerX + 0.25 * X_INSET,
      centerY: functionNode.centerY
    });
    options.children = [functionNode, rgbTextNode];
    super(options);
  }
}
functionBuilder.register('testMysteryFunctionColors', testMysteryFunctionColors);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiU2hhcGUiLCJtZXJnZSIsIlBoZXRGb250IiwiQ29sb3IiLCJIQm94IiwiTm9kZSIsIlBhdGgiLCJUZXh0IiwiVkJveCIsIkZCQ29sb3JzIiwiZnVuY3Rpb25CdWlsZGVyIiwidGVzdE15c3RlcnlGdW5jdGlvbkNvbG9ycyIsImxheW91dEJvdW5kcyIsImNvbG9yU2V0TmFtZXMiLCJhc3NlcnQiLCJsZW5ndGgiLCJNWVNURVJZX0NPTE9SX1NFVFMiLCJ2Qm94Q2hpbGRyZW4iLCJpIiwiaEJveENoaWxkcmVuIiwicHVzaCIsImZvbnQiLCJjb2xvclNldCIsImZvckVhY2giLCJjb2xvciIsIlRlc3RGdW5jdGlvbk5vZGUiLCJmaWxsIiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiYWxpZ24iLCJjZW50ZXJYIiwiY2VudGVyWSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInNpemUiLCJzdHJva2UiLCJXSURUSCIsIndpZHRoIiwiSEVJR0hUIiwiaGVpZ2h0IiwiWF9JTlNFVCIsImZ1bmN0aW9uU2hhcGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZSIsImZ1bmN0aW9uTm9kZSIsInRvQ29sb3IiLCJyZ2JTdHJpbmciLCJyZWQiLCJncmVlbiIsImJsdWUiLCJyZ2JUZXh0Tm9kZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsidGVzdE15c3RlcnlGdW5jdGlvbkNvbG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaXNwbGF5cyB0aGUgY29sb3JzIHVzZWQgZm9yIGZ1bmN0aW9ucyBpbiB0aGUgTXlzdGVyeSBzY3JlZW4uXHJcbiAqIEVhY2ggcm93IGlzIGEgbXV0dWFsbHktZXhjbHVzaXZlIHNldCBvZiBjb2xvcnMsIGZyb20gd2hpY2ggMSBjb2xvciB3aWxsIGJlIGNob3Nlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgSEJveCwgTm9kZSwgUGF0aCwgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBGQkNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vRkJDb2xvcnMuanMnO1xyXG5pbXBvcnQgZnVuY3Rpb25CdWlsZGVyIGZyb20gJy4uLy4uL2Z1bmN0aW9uQnVpbGRlci5qcyc7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtCb3VuZHMyfSBsYXlvdXRCb3VuZHNcclxuICogQHJldHVybnMge05vZGV9XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZXN0TXlzdGVyeUZ1bmN0aW9uQ29sb3JzKCBsYXlvdXRCb3VuZHMgKSB7XHJcblxyXG4gIC8vIFRoZXNlIG5hbWVzIGFyZSBoYXJkIGNvZGVkIHRvIGNvcnJlc3BvbmQgdG8gdGhlIHBvb2xzIGluIEZCQ29sb3JzLk1ZU1RFUllfQ09MT1JfU0VUU1xyXG4gIGNvbnN0IGNvbG9yU2V0TmFtZXMgPSBbICdyZWQnLCAnb3JhbmdlJywgJ3llbGxvdycsICdncmVlbicsICdibHVlJywgJ3B1cnBsZScsICdtYWdlbnRhJyBdO1xyXG4gIGFzc2VydCAmJiBhc3NlcnQoIGNvbG9yU2V0TmFtZXMubGVuZ3RoID09PSBGQkNvbG9ycy5NWVNURVJZX0NPTE9SX1NFVFMubGVuZ3RoICk7XHJcblxyXG4gIGNvbnN0IHZCb3hDaGlsZHJlbiA9IFtdO1xyXG5cclxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBGQkNvbG9ycy5NWVNURVJZX0NPTE9SX1NFVFMubGVuZ3RoOyBpKysgKSB7XHJcblxyXG4gICAgY29uc3QgaEJveENoaWxkcmVuID0gW107XHJcblxyXG4gICAgLy8gbGFiZWwgdG8gbGVmdCBvZiByb3dcclxuICAgIGhCb3hDaGlsZHJlbi5wdXNoKCBuZXcgVGV4dCggY29sb3JTZXROYW1lc1sgaSBdLCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gcm93IG9mIGZ1bmN0aW9uc1xyXG4gICAgY29uc3QgY29sb3JTZXQgPSBGQkNvbG9ycy5NWVNURVJZX0NPTE9SX1NFVFNbIGkgXTtcclxuICAgIGNvbG9yU2V0LmZvckVhY2goIGNvbG9yID0+IHtcclxuICAgICAgaEJveENoaWxkcmVuLnB1c2goIG5ldyBUZXN0RnVuY3Rpb25Ob2RlKCB7IGZpbGw6IGNvbG9yIH0gKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHZCb3hDaGlsZHJlbi5wdXNoKCBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogaEJveENoaWxkcmVuLFxyXG4gICAgICBzcGFjaW5nOiAxMFxyXG4gICAgfSApICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3IFZCb3goIHtcclxuICAgIGNoaWxkcmVuOiB2Qm94Q2hpbGRyZW4sXHJcbiAgICBhbGlnbjogJ3JpZ2h0JyxcclxuICAgIHNwYWNpbmc6IDEwLFxyXG4gICAgY2VudGVyWDogbGF5b3V0Qm91bmRzLmNlbnRlclgsXHJcbiAgICBjZW50ZXJZOiBsYXlvdXRCb3VuZHMuY2VudGVyWSArIDMwXHJcbiAgfSApO1xyXG59XHJcblxyXG5jbGFzcyBUZXN0RnVuY3Rpb25Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZSB0aGlzIHNpbXBsaWZpZWQgcmVwcmVzZW50YXRpb24gc28gdGhhdCB0aGlzIHRlc3QgaXMgbm90IGRlcGVuZGVudCBvbiBvdGhlciBzaW0gY29kZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgc2l6ZTogbmV3IERpbWVuc2lvbjIoIDE0MCwgNjAgKSxcclxuICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgV0lEVEggPSBvcHRpb25zLnNpemUud2lkdGg7XHJcbiAgICBjb25zdCBIRUlHSFQgPSBvcHRpb25zLnNpemUuaGVpZ2h0O1xyXG4gICAgY29uc3QgWF9JTlNFVCA9IDAuMTggKiBXSURUSDtcclxuXHJcbiAgICAvLyBEZXNjcmliZWQgZnJvbSB0b3AtbGVmdCwgbW92aW5nIGNsb2Nrd2lzZS5cclxuICAgIGNvbnN0IGZ1bmN0aW9uU2hhcGUgPSBuZXcgU2hhcGUoKVxyXG4gICAgICAubW92ZVRvKCAwLCAwIClcclxuICAgICAgLmxpbmVUbyggV0lEVEggLSBYX0lOU0VULCAwIClcclxuICAgICAgLmxpbmVUbyggV0lEVEgsIEhFSUdIVCAvIDIgKVxyXG4gICAgICAubGluZVRvKCBXSURUSCAtIFhfSU5TRVQsIEhFSUdIVCApXHJcbiAgICAgIC5saW5lVG8oIDAsIEhFSUdIVCApXHJcbiAgICAgIC5saW5lVG8oIFhfSU5TRVQsIEhFSUdIVCAvIDIgKVxyXG4gICAgICAuY2xvc2UoKTtcclxuICAgIGNvbnN0IGZ1bmN0aW9uTm9kZSA9IG5ldyBQYXRoKCBmdW5jdGlvblNoYXBlLCB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuZmlsbCxcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLnN0cm9rZVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNvbG9yID0gQ29sb3IudG9Db2xvciggb3B0aW9ucy5maWxsICk7XHJcbiAgICBjb25zdCByZ2JTdHJpbmcgPSBgJHtjb2xvci5yZWR9LCAke2NvbG9yLmdyZWVufSwgJHtjb2xvci5ibHVlfWA7XHJcbiAgICBjb25zdCByZ2JUZXh0Tm9kZSA9IG5ldyBUZXh0KCByZ2JTdHJpbmcsIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNCApLFxyXG4gICAgICBjZW50ZXJYOiBmdW5jdGlvbk5vZGUuY2VudGVyWCArICggMC4yNSAqIFhfSU5TRVQgKSxcclxuICAgICAgY2VudGVyWTogZnVuY3Rpb25Ob2RlLmNlbnRlcllcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBmdW5jdGlvbk5vZGUsIHJnYlRleHROb2RlIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uQnVpbGRlci5yZWdpc3RlciggJ3Rlc3RNeXN0ZXJ5RnVuY3Rpb25Db2xvcnMnLCB0ZXN0TXlzdGVyeUZ1bmN0aW9uQ29sb3JzICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUN2RixPQUFPQyxRQUFRLE1BQU0sMEJBQTBCO0FBQy9DLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTQyx5QkFBeUJBLENBQUVDLFlBQVksRUFBRztFQUVoRTtFQUNBLE1BQU1DLGFBQWEsR0FB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