// Copyright 2016-2023, University of Colorado Boulder

/**
 * Column heading for the XY table.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../../dot/js/Dimension2.js';
import { Shape } from '../../../../../kite/js/imports.js';
import merge from '../../../../../phet-core/js/merge.js';
import { Line, Node, Path, Text } from '../../../../../scenery/js/imports.js';
import functionBuilder from '../../../functionBuilder.js';
import FBConstants from '../../FBConstants.js';
export default class XYTableHeading extends Node {
  /**
   * @param {string} xSymbol - label for the x (input) column
   * @param {string} ySymbol - label for the y (output) column
   * @param {Object} [options]
   */
  constructor(xSymbol, ySymbol, options) {
    options = merge({
      size: new Dimension2(100, 25),
      font: FBConstants.TABLE_XY_HEADING_FONT,
      xMargin: 10,
      yMargin: 4,
      fill: 'rgb( 144, 226, 252 )',
      cornerRadii: null // {Object} see Shape.roundedRectangleWithRadii
    }, options);
    const backgroundShape = Shape.roundedRectangleWithRadii(0, 0, options.size.width, options.size.height, options.cornerRadii);
    const backgroundNode = new Path(backgroundShape, {
      stroke: 'black',
      lineWidth: 0.5,
      fill: options.fill
    });

    // constrain column labels to fit in cells
    const xyMaxWidth = backgroundNode.width / 2 - 2 * options.xMargin;
    const xyMaxHeight = backgroundNode.height - 2 * options.yMargin;
    const LABEL_OPTIONS = {
      font: options.font,
      maxWidth: xyMaxWidth,
      maxHeight: xyMaxHeight
    };
    const xLabelNode = new Text(xSymbol, merge({}, LABEL_OPTIONS, {
      centerX: 0.25 * backgroundNode.width,
      centerY: backgroundNode.centerY
    }));
    const yLabelNode = new Text(ySymbol, merge({}, LABEL_OPTIONS, {
      centerX: 0.75 * backgroundNode.width,
      centerY: backgroundNode.centerY
    }));

    // vertical line that separates columns
    const verticalLine = new Line(0, 0, 0, options.size.height, {
      stroke: 'black',
      lineWidth: 0.5,
      center: backgroundNode.center
    });
    assert && assert(!options.children);
    options.children = [backgroundNode, verticalLine, xLabelNode, yLabelNode];
    super(options);
  }
}
functionBuilder.register('XYTableHeading', XYTableHeading);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiU2hhcGUiLCJtZXJnZSIsIkxpbmUiLCJOb2RlIiwiUGF0aCIsIlRleHQiLCJmdW5jdGlvbkJ1aWxkZXIiLCJGQkNvbnN0YW50cyIsIlhZVGFibGVIZWFkaW5nIiwiY29uc3RydWN0b3IiLCJ4U3ltYm9sIiwieVN5bWJvbCIsIm9wdGlvbnMiLCJzaXplIiwiZm9udCIsIlRBQkxFX1hZX0hFQURJTkdfRk9OVCIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiZmlsbCIsImNvcm5lclJhZGlpIiwiYmFja2dyb3VuZFNoYXBlIiwicm91bmRlZFJlY3RhbmdsZVdpdGhSYWRpaSIsIndpZHRoIiwiaGVpZ2h0IiwiYmFja2dyb3VuZE5vZGUiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJ4eU1heFdpZHRoIiwieHlNYXhIZWlnaHQiLCJMQUJFTF9PUFRJT05TIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJ4TGFiZWxOb2RlIiwiY2VudGVyWCIsImNlbnRlclkiLCJ5TGFiZWxOb2RlIiwidmVydGljYWxMaW5lIiwiY2VudGVyIiwiYXNzZXJ0IiwiY2hpbGRyZW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlhZVGFibGVIZWFkaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbHVtbiBoZWFkaW5nIGZvciB0aGUgWFkgdGFibGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBOb2RlLCBQYXRoLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRkJDb25zdGFudHMgZnJvbSAnLi4vLi4vRkJDb25zdGFudHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWFlUYWJsZUhlYWRpbmcgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHhTeW1ib2wgLSBsYWJlbCBmb3IgdGhlIHggKGlucHV0KSBjb2x1bW5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30geVN5bWJvbCAtIGxhYmVsIGZvciB0aGUgeSAob3V0cHV0KSBjb2x1bW5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHhTeW1ib2wsIHlTeW1ib2wsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHNpemU6IG5ldyBEaW1lbnNpb24yKCAxMDAsIDI1ICksXHJcbiAgICAgIGZvbnQ6IEZCQ29uc3RhbnRzLlRBQkxFX1hZX0hFQURJTkdfRk9OVCxcclxuICAgICAgeE1hcmdpbjogMTAsXHJcbiAgICAgIHlNYXJnaW46IDQsXHJcbiAgICAgIGZpbGw6ICdyZ2IoIDE0NCwgMjI2LCAyNTIgKScsXHJcbiAgICAgIGNvcm5lclJhZGlpOiBudWxsIC8vIHtPYmplY3R9IHNlZSBTaGFwZS5yb3VuZGVkUmVjdGFuZ2xlV2l0aFJhZGlpXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgYmFja2dyb3VuZFNoYXBlID0gU2hhcGUucm91bmRlZFJlY3RhbmdsZVdpdGhSYWRpaSggMCwgMCwgb3B0aW9ucy5zaXplLndpZHRoLCBvcHRpb25zLnNpemUuaGVpZ2h0LCBvcHRpb25zLmNvcm5lclJhZGlpICk7XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kTm9kZSA9IG5ldyBQYXRoKCBiYWNrZ3JvdW5kU2hhcGUsIHtcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDAuNSxcclxuICAgICAgZmlsbDogb3B0aW9ucy5maWxsXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gY29uc3RyYWluIGNvbHVtbiBsYWJlbHMgdG8gZml0IGluIGNlbGxzXHJcbiAgICBjb25zdCB4eU1heFdpZHRoID0gKCBiYWNrZ3JvdW5kTm9kZS53aWR0aCAvIDIgKSAtICggMiAqIG9wdGlvbnMueE1hcmdpbiApO1xyXG4gICAgY29uc3QgeHlNYXhIZWlnaHQgPSBiYWNrZ3JvdW5kTm9kZS5oZWlnaHQgLSAoIDIgKiBvcHRpb25zLnlNYXJnaW4gKTtcclxuXHJcbiAgICBjb25zdCBMQUJFTF9PUFRJT05TID0ge1xyXG4gICAgICBmb250OiBvcHRpb25zLmZvbnQsXHJcbiAgICAgIG1heFdpZHRoOiB4eU1heFdpZHRoLFxyXG4gICAgICBtYXhIZWlnaHQ6IHh5TWF4SGVpZ2h0XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHhMYWJlbE5vZGUgPSBuZXcgVGV4dCggeFN5bWJvbCwgbWVyZ2UoIHt9LCBMQUJFTF9PUFRJT05TLCB7XHJcbiAgICAgIGNlbnRlclg6IDAuMjUgKiBiYWNrZ3JvdW5kTm9kZS53aWR0aCxcclxuICAgICAgY2VudGVyWTogYmFja2dyb3VuZE5vZGUuY2VudGVyWVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgY29uc3QgeUxhYmVsTm9kZSA9IG5ldyBUZXh0KCB5U3ltYm9sLCBtZXJnZSgge30sIExBQkVMX09QVElPTlMsIHtcclxuICAgICAgY2VudGVyWDogMC43NSAqIGJhY2tncm91bmROb2RlLndpZHRoLFxyXG4gICAgICBjZW50ZXJZOiBiYWNrZ3JvdW5kTm9kZS5jZW50ZXJZXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICAvLyB2ZXJ0aWNhbCBsaW5lIHRoYXQgc2VwYXJhdGVzIGNvbHVtbnNcclxuICAgIGNvbnN0IHZlcnRpY2FsTGluZSA9IG5ldyBMaW5lKCAwLCAwLCAwLCBvcHRpb25zLnNpemUuaGVpZ2h0LCB7XHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgbGluZVdpZHRoOiAwLjUsXHJcbiAgICAgIGNlbnRlcjogYmFja2dyb3VuZE5vZGUuY2VudGVyXHJcbiAgICB9ICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuY2hpbGRyZW4gKTtcclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGJhY2tncm91bmROb2RlLCB2ZXJ0aWNhbExpbmUsIHhMYWJlbE5vZGUsIHlMYWJlbE5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb25CdWlsZGVyLnJlZ2lzdGVyKCAnWFlUYWJsZUhlYWRpbmcnLCBYWVRhYmxlSGVhZGluZyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0scUNBQXFDO0FBQzVELFNBQVNDLEtBQUssUUFBUSxtQ0FBbUM7QUFDekQsT0FBT0MsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsc0NBQXNDO0FBQzdFLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUU5QyxlQUFlLE1BQU1DLGNBQWMsU0FBU0wsSUFBSSxDQUFDO0VBRS9DO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRztJQUV2Q0EsT0FBTyxHQUFHWCxLQUFLLENBQUU7TUFDZlksSUFBSSxFQUFFLElBQUlkLFVBQVUsQ0FB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