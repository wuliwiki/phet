// Copyright 2016-2023, University of Colorado Boulder

/**
 * Base type for function nodes. Provides a background shape for the function. Subtypes are responsible for
 * ensuring that the content (what is displayed on the function) fits on the background.
 * All drag handling and animation behavior for functions is encapsulated here.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../../axon/js/BooleanProperty.js';
import merge from '../../../../../phet-core/js/merge.js';
import functionBuilder from '../../../functionBuilder.js';
import FBColors from '../../FBColors.js';
import FBConstants from '../../FBConstants.js';
import FunctionSlot from '../../model/builder/FunctionSlot.js';
import EyeCloseNode from '../EyeCloseNode.js';
import MovableNode from '../MovableNode.js';
import NotInvertibleSymbolNode from '../NotInvertibleSymbolNode.js';
import FunctionBackgroundNode from './FunctionBackgroundNode.js';
export default class FunctionNode extends MovableNode {
  /**
   * NOTE: The relatively large number of constructor parameters here is a trade-off. There are many things
   * involved in drag handling and animation. I could have reduced the number of parameters by distributing
   * the responsibility for drag handling and animation. But encapsulating all responsibilities here seemed
   * like a superior solution.  So I chose encapsulation at the expense of some increased coupling.
   * See discussion in https://github.com/phetsims/function-builder/issues/77
   *
   * @param {AbstractFunction} functionInstance - model element associated with this node
   * @param {Node} contentNode - content that appears on the function, specific to functionInstance
   * @param {FunctionContainer} container - container in the function carousel where this node originates
   * @param {BuilderNode} builderNode - BuilderNode that may contain this node
   * @param {Node} dragLayer - parent for this node when it's being dragged or animating
   * @param {Object} [options]
   */
  constructor(functionInstance, contentNode, container, builderNode, dragLayer, options) {
    options = merge({
      size: FBConstants.FUNCTION_SIZE,
      // {Dimension2} size of the background
      identityVisible: true,
      // {boolean} is the function's identity visible?
      hiddenNode: null,
      // {Node} displayed when the function identity is hidden
      hiddenFill: FBColors.HIDDEN_FUNCTION,
      // {null|Color|string} background color when function identity is hidden

      //TODO remove this workaround, see https://github.com/phetsims/function-builder/issues/49
      allowTouchSnag: false
    }, options);
    if (!options.hiddenNode) {
      options.hiddenNode = new EyeCloseNode({
        maxHeight: 0.5 * options.size.height
      });
    }
    const backgroundNode = new FunctionBackgroundNode(merge({
      size: options.size
    }, functionInstance.viewOptions));

    // unlink unnecessary, instances exist for lifetime of the sim
    functionInstance.fillProperty.link(fill => {
      backgroundNode.fill = fill;
    });

    // center
    contentNode.boundsProperty.link(bounds => {
      contentNode.center = backgroundNode.center;
    });
    options.hiddenNode.boundsProperty.link(bounds => {
      options.hiddenNode.center = backgroundNode.center;
    });

    // @private
    const notInvertibleSymbolNode = new NotInvertibleSymbolNode({
      center: backgroundNode.center,
      visible: false
    });
    assert && assert(!options.children, 'decoration not supported');
    options.children = [backgroundNode, contentNode, options.hiddenNode, notInvertibleSymbolNode];

    // @public
    const identityVisibleProperty = new BooleanProperty(options.identityVisible);
    // unlink unnecessary, instance owns this Property
    identityVisibleProperty.link(identityVisible => {
      contentNode.visible = identityVisible;
      options.hiddenNode.visible = !identityVisible;
      if (options.hiddenFill) {
        backgroundNode.fill = identityVisible ? functionInstance.fillProperty.get() : options.hiddenFill;
      }
    });

    //-------------------------------------------------------------------------------
    // start a drag cycle

    let slotNumberRemovedFrom = FunctionSlot.NO_SLOT_NUMBER; // slot number that function was removed from at start of drag

    assert && assert(!options.startDrag);
    options.startDrag = () => {
      slotNumberRemovedFrom = FunctionSlot.NO_SLOT_NUMBER;
      if (container.containsNode(this)) {
        // function is in the carousel, pop it out
        container.removeNode(this);
        dragLayer.addChild(this);
        functionInstance.moveTo(container.carouselPosition.plus(FBConstants.FUNCTION_POP_OUT_OFFSET));
      } else if (builderNode.containsFunctionNode(this)) {
        // function is in the builder

        // if this node's 'not invertible' animation was running, stop it
        this.stopNotInvertibleAnimation();

        // pop it out of the builder
        slotNumberRemovedFrom = builderNode.removeFunctionNode(this);
        const slotPosition = builderNode.builder.getSlotPosition(slotNumberRemovedFrom);
        dragLayer.addChild(this);
        functionInstance.moveTo(slotPosition.plus(FBConstants.FUNCTION_POP_OUT_OFFSET));
      } else {
        // function was grabbed while in dragLayer, do nothing
      }
      assert && assert(dragLayer.hasChild(this), 'startDrag should be in dragLayer');
    };

    //-------------------------------------------------------------------------------
    // end a drag cycle
    assert && assert(!options.endDrag);
    options.endDrag = () => {
      assert && assert(dragLayer.hasChild(this), 'endDrag should be in dragLayer');

      // Find the closest slot in the builder
      const slotNumber = builderNode.builder.getClosestSlot(functionInstance.positionProperty.get(), FBConstants.FUNCTION_DISTANCE_THRESHOLD);
      if (slotNumber === FunctionSlot.NO_SLOT_NUMBER) {
        // no builder slot, animate back to the carousel
        this.animateToCarousel();
      } else {
        // put function in builder slot
        this.animateToBuilder(slotNumber, slotNumberRemovedFrom);
      }
    };
    super(functionInstance, options);

    //------------------------------------------------------------------------------------------------------------------
    // Define properties in one place, so we can see what's available and document visibility

    // @public
    this.functionInstance = functionInstance;
    this.identityVisibleProperty = identityVisibleProperty;

    // @protected used by subtypes
    this.backgroundNode = backgroundNode;

    // @private used by prototype functions
    this.contentNode = contentNode;
    this.container = container;
    this.builderNode = builderNode;
    this.builder = builderNode.builder;
    this.dragLayer = dragLayer;
    this.notInvertibleSymbolNode = notInvertibleSymbolNode;
  }

  /**
   * Animates this function to a slot in the builder.
   *
   * @param {number} slotNumber - slot number that the function is animating to
   * @param {number} slotNumberRemovedFrom - slot number that the function was removed from
   * @private
   */
  animateToBuilder(slotNumber, slotNumberRemovedFrom) {
    assert && assert(this.dragLayer.hasChild(this), 'card should be in dragLayer');

    // to improve readability
    const builderNode = this.builderNode;
    const builder = builderNode.builder;
    const dragLayer = this.dragLayer;
    this.functionInstance.animateTo(builder.getSlotPosition(slotNumber), () => {
      // If the slot is occupied, relocate the occupier.
      const occupierNode = builderNode.getFunctionNode(slotNumber);
      if (occupierNode) {
        builderNode.removeFunctionNode(occupierNode, slotNumber);
        dragLayer.addChild(occupierNode);
        if (builder.isValidSlotNumber(slotNumberRemovedFrom) && Math.abs(slotNumberRemovedFrom - slotNumber) === 1) {
          // swap adjacent slots
          occupierNode.animateToBuilder(slotNumberRemovedFrom, slotNumber);
        } else {
          // return function to the carousel.
          occupierNode.animateToCarousel();
        }
      }
      dragLayer.removeChild(this);
      builderNode.addFunctionNode(this, slotNumber);
    });
  }

  /**
   * Moves this function immediately to the builder, no animation.
   *
   * @param {number} slotNumber
   * @public
   */
  moveToBuilder(slotNumber) {
    assert && assert(!this.builderNode.containsFunctionNode(this), 'function is already in builder');
    assert && assert(!this.builderNode.getFunctionNode(slotNumber), `slot ${slotNumber} is occupied`);

    // remove from drag layer
    if (this.dragLayer.hasChild(this)) {
      this.interruptSubtreeInput(); // cancel drag
      this.dragLayer.removeChild(this);
    }

    // remove from carousel
    if (this.container.containsNode(this)) {
      this.container.removeNode(this);
    }

    // move to builder
    const slotPosition = this.builderNode.builder.getSlotPosition(slotNumber);
    this.functionInstance.moveTo(slotPosition);
    this.builderNode.addFunctionNode(this, slotNumber);
  }

  /**
   * Animates this function to the carousel.
   *
   * @private
   */
  animateToCarousel() {
    assert && assert(this.dragLayer.hasChild(this), 'card should be in dragLayer');
    this.functionInstance.animateTo(this.container.carouselPosition, () => {
      this.dragLayer.removeChild(this);
      this.container.addNode(this);
    });
  }

  /**
   * Moves this function immediately to the carousel, no animation.
   * If the function is already in the carousel, this is a no-op.
   *
   * @public
   */
  moveToCarousel() {
    if (this.dragLayer.hasChild(this)) {
      // remove from drag layer
      this.interruptSubtreeInput(); // cancel drag
      this.dragLayer.removeChild(this);
    } else if (this.builderNode.containsFunctionNode(this)) {
      // remove from builder
      this.stopNotInvertibleAnimation();
      this.builderNode.removeFunctionNode(this);
    }

    // move to function carousel
    if (!this.container.containsNode(this)) {
      this.container.addNode(this);
    }
  }

  /**
   * Starts animation showing that a function is not invertible.
   *
   * @public
   */
  startNotInvertibleAnimation() {
    assert && assert(!this.functionInstance.invertible);
    this.notInvertibleSymbolNode.startAnimation();
  }

  /**
   * Stops animation showing that a function is not invertible.
   * If no animation is in progress, this is a no-op.
   *
   * @public
   */
  stopNotInvertibleAnimation() {
    this.notInvertibleSymbolNode.stopAnimation();
  }
}
functionBuilder.register('FunctionNode', FunctionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJtZXJnZSIsImZ1bmN0aW9uQnVpbGRlciIsIkZCQ29sb3JzIiwiRkJDb25zdGFudHMiLCJGdW5jdGlvblNsb3QiLCJFeWVDbG9zZU5vZGUiLCJNb3ZhYmxlTm9kZSIsIk5vdEludmVydGlibGVTeW1ib2xOb2RlIiwiRnVuY3Rpb25CYWNrZ3JvdW5kTm9kZSIsIkZ1bmN0aW9uTm9kZSIsImNvbnN0cnVjdG9yIiwiZnVuY3Rpb25JbnN0YW5jZSIsImNvbnRlbnROb2RlIiwiY29udGFpbmVyIiwiYnVpbGRlck5vZGUiLCJkcmFnTGF5ZXIiLCJvcHRpb25zIiwic2l6ZSIsIkZVTkNUSU9OX1NJWkUiLCJpZGVudGl0eVZpc2libGUiLCJoaWRkZW5Ob2RlIiwiaGlkZGVuRmlsbCIsIkhJRERFTl9GVU5DVElPTiIsImFsbG93VG91Y2hTbmFnIiwibWF4SGVpZ2h0IiwiaGVpZ2h0IiwiYmFja2dyb3VuZE5vZGUiLCJ2aWV3T3B0aW9ucyIsImZpbGxQcm9wZXJ0eSIsImxpbmsiLCJmaWxsIiwiYm91bmRzUHJvcGVydHkiLCJib3VuZHMiLCJjZW50ZXIiLCJub3RJbnZlcnRpYmxlU3ltYm9sTm9kZSIsInZpc2libGUiLCJhc3NlcnQiLCJjaGlsZHJlbiIsImlkZW50aXR5VmlzaWJsZVByb3BlcnR5IiwiZ2V0Iiwic2xvdE51bWJlclJlbW92ZWRGcm9tIiwiTk9fU0xPVF9OVU1CRVIiLCJzdGFydERyYWciLCJjb250YWluc05vZGUiLCJyZW1vdmVOb2RlIiwiYWRkQ2hpbGQiLCJtb3ZlVG8iLCJjYXJvdXNlbFBvc2l0aW9uIiwicGx1cyIsIkZVTkNUSU9OX1BPUF9PVVRfT0ZGU0VUIiwiY29udGFpbnNGdW5jdGlvbk5vZGUiLCJzdG9wTm90SW52ZXJ0aWJsZUFuaW1hdGlvbiIsInJlbW92ZUZ1bmN0aW9uTm9kZSIsInNsb3RQb3NpdGlvbiIsImJ1aWxkZXIiLCJnZXRTbG90UG9zaXRpb24iLCJoYXNDaGlsZCIsImVuZERyYWciLCJzbG90TnVtYmVyIiwiZ2V0Q2xvc2VzdFNsb3QiLCJwb3NpdGlvblByb3BlcnR5IiwiRlVOQ1RJT05fRElTVEFOQ0VfVEhSRVNIT0xEIiwiYW5pbWF0ZVRvQ2Fyb3VzZWwiLCJhbmltYXRlVG9CdWlsZGVyIiwiYW5pbWF0ZVRvIiwib2NjdXBpZXJOb2RlIiwiZ2V0RnVuY3Rpb25Ob2RlIiwiaXNWYWxpZFNsb3ROdW1iZXIiLCJNYXRoIiwiYWJzIiwicmVtb3ZlQ2hpbGQiLCJhZGRGdW5jdGlvbk5vZGUiLCJtb3ZlVG9CdWlsZGVyIiwiaW50ZXJydXB0U3VidHJlZUlucHV0IiwiYWRkTm9kZSIsIm1vdmVUb0Nhcm91c2VsIiwic3RhcnROb3RJbnZlcnRpYmxlQW5pbWF0aW9uIiwiaW52ZXJ0aWJsZSIsInN0YXJ0QW5pbWF0aW9uIiwic3RvcEFuaW1hdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRnVuY3Rpb25Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJhc2UgdHlwZSBmb3IgZnVuY3Rpb24gbm9kZXMuIFByb3ZpZGVzIGEgYmFja2dyb3VuZCBzaGFwZSBmb3IgdGhlIGZ1bmN0aW9uLiBTdWJ0eXBlcyBhcmUgcmVzcG9uc2libGUgZm9yXHJcbiAqIGVuc3VyaW5nIHRoYXQgdGhlIGNvbnRlbnQgKHdoYXQgaXMgZGlzcGxheWVkIG9uIHRoZSBmdW5jdGlvbikgZml0cyBvbiB0aGUgYmFja2dyb3VuZC5cclxuICogQWxsIGRyYWcgaGFuZGxpbmcgYW5kIGFuaW1hdGlvbiBiZWhhdmlvciBmb3IgZnVuY3Rpb25zIGlzIGVuY2Fwc3VsYXRlZCBoZXJlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRkJDb2xvcnMgZnJvbSAnLi4vLi4vRkJDb2xvcnMuanMnO1xyXG5pbXBvcnQgRkJDb25zdGFudHMgZnJvbSAnLi4vLi4vRkJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRnVuY3Rpb25TbG90IGZyb20gJy4uLy4uL21vZGVsL2J1aWxkZXIvRnVuY3Rpb25TbG90LmpzJztcclxuaW1wb3J0IEV5ZUNsb3NlTm9kZSBmcm9tICcuLi9FeWVDbG9zZU5vZGUuanMnO1xyXG5pbXBvcnQgTW92YWJsZU5vZGUgZnJvbSAnLi4vTW92YWJsZU5vZGUuanMnO1xyXG5pbXBvcnQgTm90SW52ZXJ0aWJsZVN5bWJvbE5vZGUgZnJvbSAnLi4vTm90SW52ZXJ0aWJsZVN5bWJvbE5vZGUuanMnO1xyXG5pbXBvcnQgRnVuY3Rpb25CYWNrZ3JvdW5kTm9kZSBmcm9tICcuL0Z1bmN0aW9uQmFja2dyb3VuZE5vZGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnVuY3Rpb25Ob2RlIGV4dGVuZHMgTW92YWJsZU5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBOT1RFOiBUaGUgcmVsYXRpdmVseSBsYXJnZSBudW1iZXIgb2YgY29uc3RydWN0b3IgcGFyYW1ldGVycyBoZXJlIGlzIGEgdHJhZGUtb2ZmLiBUaGVyZSBhcmUgbWFueSB0aGluZ3NcclxuICAgKiBpbnZvbHZlZCBpbiBkcmFnIGhhbmRsaW5nIGFuZCBhbmltYXRpb24uIEkgY291bGQgaGF2ZSByZWR1Y2VkIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBieSBkaXN0cmlidXRpbmdcclxuICAgKiB0aGUgcmVzcG9uc2liaWxpdHkgZm9yIGRyYWcgaGFuZGxpbmcgYW5kIGFuaW1hdGlvbi4gQnV0IGVuY2Fwc3VsYXRpbmcgYWxsIHJlc3BvbnNpYmlsaXRpZXMgaGVyZSBzZWVtZWRcclxuICAgKiBsaWtlIGEgc3VwZXJpb3Igc29sdXRpb24uICBTbyBJIGNob3NlIGVuY2Fwc3VsYXRpb24gYXQgdGhlIGV4cGVuc2Ugb2Ygc29tZSBpbmNyZWFzZWQgY291cGxpbmcuXHJcbiAgICogU2VlIGRpc2N1c3Npb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2Z1bmN0aW9uLWJ1aWxkZXIvaXNzdWVzLzc3XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Fic3RyYWN0RnVuY3Rpb259IGZ1bmN0aW9uSW5zdGFuY2UgLSBtb2RlbCBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIG5vZGVcclxuICAgKiBAcGFyYW0ge05vZGV9IGNvbnRlbnROb2RlIC0gY29udGVudCB0aGF0IGFwcGVhcnMgb24gdGhlIGZ1bmN0aW9uLCBzcGVjaWZpYyB0byBmdW5jdGlvbkluc3RhbmNlXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbkNvbnRhaW5lcn0gY29udGFpbmVyIC0gY29udGFpbmVyIGluIHRoZSBmdW5jdGlvbiBjYXJvdXNlbCB3aGVyZSB0aGlzIG5vZGUgb3JpZ2luYXRlc1xyXG4gICAqIEBwYXJhbSB7QnVpbGRlck5vZGV9IGJ1aWxkZXJOb2RlIC0gQnVpbGRlck5vZGUgdGhhdCBtYXkgY29udGFpbiB0aGlzIG5vZGVcclxuICAgKiBAcGFyYW0ge05vZGV9IGRyYWdMYXllciAtIHBhcmVudCBmb3IgdGhpcyBub2RlIHdoZW4gaXQncyBiZWluZyBkcmFnZ2VkIG9yIGFuaW1hdGluZ1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZnVuY3Rpb25JbnN0YW5jZSwgY29udGVudE5vZGUsIGNvbnRhaW5lciwgYnVpbGRlck5vZGUsIGRyYWdMYXllciwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIHNpemU6IEZCQ29uc3RhbnRzLkZVTkNUSU9OX1NJWkUsIC8vIHtEaW1lbnNpb24yfSBzaXplIG9mIHRoZSBiYWNrZ3JvdW5kXHJcbiAgICAgIGlkZW50aXR5VmlzaWJsZTogdHJ1ZSwgLy8ge2Jvb2xlYW59IGlzIHRoZSBmdW5jdGlvbidzIGlkZW50aXR5IHZpc2libGU/XHJcbiAgICAgIGhpZGRlbk5vZGU6IG51bGwsIC8vIHtOb2RlfSBkaXNwbGF5ZWQgd2hlbiB0aGUgZnVuY3Rpb24gaWRlbnRpdHkgaXMgaGlkZGVuXHJcbiAgICAgIGhpZGRlbkZpbGw6IEZCQ29sb3JzLkhJRERFTl9GVU5DVElPTiwgLy8ge251bGx8Q29sb3J8c3RyaW5nfSBiYWNrZ3JvdW5kIGNvbG9yIHdoZW4gZnVuY3Rpb24gaWRlbnRpdHkgaXMgaGlkZGVuXHJcblxyXG4gICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgd29ya2Fyb3VuZCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9mdW5jdGlvbi1idWlsZGVyL2lzc3Vlcy80OVxyXG4gICAgICBhbGxvd1RvdWNoU25hZzogZmFsc2VcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBpZiAoICFvcHRpb25zLmhpZGRlbk5vZGUgKSB7XHJcbiAgICAgIG9wdGlvbnMuaGlkZGVuTm9kZSA9IG5ldyBFeWVDbG9zZU5vZGUoIHtcclxuICAgICAgICBtYXhIZWlnaHQ6IDAuNSAqIG9wdGlvbnMuc2l6ZS5oZWlnaHRcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJhY2tncm91bmROb2RlID0gbmV3IEZ1bmN0aW9uQmFja2dyb3VuZE5vZGUoIG1lcmdlKCB7XHJcbiAgICAgIHNpemU6IG9wdGlvbnMuc2l6ZVxyXG4gICAgfSwgZnVuY3Rpb25JbnN0YW5jZS52aWV3T3B0aW9ucyApICk7XHJcblxyXG4gICAgLy8gdW5saW5rIHVubmVjZXNzYXJ5LCBpbnN0YW5jZXMgZXhpc3QgZm9yIGxpZmV0aW1lIG9mIHRoZSBzaW1cclxuICAgIGZ1bmN0aW9uSW5zdGFuY2UuZmlsbFByb3BlcnR5LmxpbmsoIGZpbGwgPT4ge1xyXG4gICAgICBiYWNrZ3JvdW5kTm9kZS5maWxsID0gZmlsbDtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBjZW50ZXJcclxuICAgIGNvbnRlbnROb2RlLmJvdW5kc1Byb3BlcnR5LmxpbmsoIGJvdW5kcyA9PiB7XHJcbiAgICAgIGNvbnRlbnROb2RlLmNlbnRlciA9IGJhY2tncm91bmROb2RlLmNlbnRlcjtcclxuICAgIH0gKTtcclxuICAgIG9wdGlvbnMuaGlkZGVuTm9kZS5ib3VuZHNQcm9wZXJ0eS5saW5rKCBib3VuZHMgPT4ge1xyXG4gICAgICBvcHRpb25zLmhpZGRlbk5vZGUuY2VudGVyID0gYmFja2dyb3VuZE5vZGUuY2VudGVyO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICBjb25zdCBub3RJbnZlcnRpYmxlU3ltYm9sTm9kZSA9IG5ldyBOb3RJbnZlcnRpYmxlU3ltYm9sTm9kZSgge1xyXG4gICAgICBjZW50ZXI6IGJhY2tncm91bmROb2RlLmNlbnRlcixcclxuICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgIH0gKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5jaGlsZHJlbiwgJ2RlY29yYXRpb24gbm90IHN1cHBvcnRlZCcgKTtcclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGJhY2tncm91bmROb2RlLCBjb250ZW50Tm9kZSwgb3B0aW9ucy5oaWRkZW5Ob2RlLCBub3RJbnZlcnRpYmxlU3ltYm9sTm9kZSBdO1xyXG5cclxuICAgIC8vIEBwdWJsaWNcclxuICAgIGNvbnN0IGlkZW50aXR5VmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggb3B0aW9ucy5pZGVudGl0eVZpc2libGUgKTtcclxuICAgIC8vIHVubGluayB1bm5lY2Vzc2FyeSwgaW5zdGFuY2Ugb3ducyB0aGlzIFByb3BlcnR5XHJcbiAgICBpZGVudGl0eVZpc2libGVQcm9wZXJ0eS5saW5rKCBpZGVudGl0eVZpc2libGUgPT4ge1xyXG5cclxuICAgICAgY29udGVudE5vZGUudmlzaWJsZSA9IGlkZW50aXR5VmlzaWJsZTtcclxuICAgICAgb3B0aW9ucy5oaWRkZW5Ob2RlLnZpc2libGUgPSAhaWRlbnRpdHlWaXNpYmxlO1xyXG5cclxuICAgICAgaWYgKCBvcHRpb25zLmhpZGRlbkZpbGwgKSB7XHJcbiAgICAgICAgYmFja2dyb3VuZE5vZGUuZmlsbCA9IGlkZW50aXR5VmlzaWJsZSA/IGZ1bmN0aW9uSW5zdGFuY2UuZmlsbFByb3BlcnR5LmdldCgpIDogb3B0aW9ucy5oaWRkZW5GaWxsO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBzdGFydCBhIGRyYWcgY3ljbGVcclxuXHJcbiAgICBsZXQgc2xvdE51bWJlclJlbW92ZWRGcm9tID0gRnVuY3Rpb25TbG90Lk5PX1NMT1RfTlVNQkVSOyAgLy8gc2xvdCBudW1iZXIgdGhhdCBmdW5jdGlvbiB3YXMgcmVtb3ZlZCBmcm9tIGF0IHN0YXJ0IG9mIGRyYWdcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5zdGFydERyYWcgKTtcclxuICAgIG9wdGlvbnMuc3RhcnREcmFnID0gKCkgPT4ge1xyXG5cclxuICAgICAgc2xvdE51bWJlclJlbW92ZWRGcm9tID0gRnVuY3Rpb25TbG90Lk5PX1NMT1RfTlVNQkVSO1xyXG5cclxuICAgICAgaWYgKCBjb250YWluZXIuY29udGFpbnNOb2RlKCB0aGlzICkgKSB7XHJcblxyXG4gICAgICAgIC8vIGZ1bmN0aW9uIGlzIGluIHRoZSBjYXJvdXNlbCwgcG9wIGl0IG91dFxyXG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVOb2RlKCB0aGlzICk7XHJcbiAgICAgICAgZHJhZ0xheWVyLmFkZENoaWxkKCB0aGlzICk7XHJcbiAgICAgICAgZnVuY3Rpb25JbnN0YW5jZS5tb3ZlVG8oIGNvbnRhaW5lci5jYXJvdXNlbFBvc2l0aW9uLnBsdXMoIEZCQ29uc3RhbnRzLkZVTkNUSU9OX1BPUF9PVVRfT0ZGU0VUICkgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggYnVpbGRlck5vZGUuY29udGFpbnNGdW5jdGlvbk5vZGUoIHRoaXMgKSApIHtcclxuXHJcbiAgICAgICAgLy8gZnVuY3Rpb24gaXMgaW4gdGhlIGJ1aWxkZXJcclxuXHJcbiAgICAgICAgLy8gaWYgdGhpcyBub2RlJ3MgJ25vdCBpbnZlcnRpYmxlJyBhbmltYXRpb24gd2FzIHJ1bm5pbmcsIHN0b3AgaXRcclxuICAgICAgICB0aGlzLnN0b3BOb3RJbnZlcnRpYmxlQW5pbWF0aW9uKCk7XHJcblxyXG4gICAgICAgIC8vIHBvcCBpdCBvdXQgb2YgdGhlIGJ1aWxkZXJcclxuICAgICAgICBzbG90TnVtYmVyUmVtb3ZlZEZyb20gPSBidWlsZGVyTm9kZS5yZW1vdmVGdW5jdGlvbk5vZGUoIHRoaXMgKTtcclxuICAgICAgICBjb25zdCBzbG90UG9zaXRpb24gPSBidWlsZGVyTm9kZS5idWlsZGVyLmdldFNsb3RQb3NpdGlvbiggc2xvdE51bWJlclJlbW92ZWRGcm9tICk7XHJcbiAgICAgICAgZHJhZ0xheWVyLmFkZENoaWxkKCB0aGlzICk7XHJcbiAgICAgICAgZnVuY3Rpb25JbnN0YW5jZS5tb3ZlVG8oIHNsb3RQb3NpdGlvbi5wbHVzKCBGQkNvbnN0YW50cy5GVU5DVElPTl9QT1BfT1VUX09GRlNFVCApICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgLy8gZnVuY3Rpb24gd2FzIGdyYWJiZWQgd2hpbGUgaW4gZHJhZ0xheWVyLCBkbyBub3RoaW5nXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGRyYWdMYXllci5oYXNDaGlsZCggdGhpcyApLCAnc3RhcnREcmFnIHNob3VsZCBiZSBpbiBkcmFnTGF5ZXInICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gZW5kIGEgZHJhZyBjeWNsZVxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuZW5kRHJhZyApO1xyXG4gICAgb3B0aW9ucy5lbmREcmFnID0gKCkgPT4ge1xyXG5cclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZHJhZ0xheWVyLmhhc0NoaWxkKCB0aGlzICksICdlbmREcmFnIHNob3VsZCBiZSBpbiBkcmFnTGF5ZXInICk7XHJcblxyXG4gICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IHNsb3QgaW4gdGhlIGJ1aWxkZXJcclxuICAgICAgY29uc3Qgc2xvdE51bWJlciA9IGJ1aWxkZXJOb2RlLmJ1aWxkZXIuZ2V0Q2xvc2VzdFNsb3QoIGZ1bmN0aW9uSW5zdGFuY2UucG9zaXRpb25Qcm9wZXJ0eS5nZXQoKSxcclxuICAgICAgICBGQkNvbnN0YW50cy5GVU5DVElPTl9ESVNUQU5DRV9USFJFU0hPTEQgKTtcclxuXHJcbiAgICAgIGlmICggc2xvdE51bWJlciA9PT0gRnVuY3Rpb25TbG90Lk5PX1NMT1RfTlVNQkVSICkge1xyXG5cclxuICAgICAgICAvLyBubyBidWlsZGVyIHNsb3QsIGFuaW1hdGUgYmFjayB0byB0aGUgY2Fyb3VzZWxcclxuICAgICAgICB0aGlzLmFuaW1hdGVUb0Nhcm91c2VsKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIHB1dCBmdW5jdGlvbiBpbiBidWlsZGVyIHNsb3RcclxuICAgICAgICB0aGlzLmFuaW1hdGVUb0J1aWxkZXIoIHNsb3ROdW1iZXIsIHNsb3ROdW1iZXJSZW1vdmVkRnJvbSApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKCBmdW5jdGlvbkluc3RhbmNlLCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIERlZmluZSBwcm9wZXJ0aWVzIGluIG9uZSBwbGFjZSwgc28gd2UgY2FuIHNlZSB3aGF0J3MgYXZhaWxhYmxlIGFuZCBkb2N1bWVudCB2aXNpYmlsaXR5XHJcblxyXG4gICAgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5mdW5jdGlvbkluc3RhbmNlID0gZnVuY3Rpb25JbnN0YW5jZTtcclxuICAgIHRoaXMuaWRlbnRpdHlWaXNpYmxlUHJvcGVydHkgPSBpZGVudGl0eVZpc2libGVQcm9wZXJ0eTtcclxuXHJcbiAgICAvLyBAcHJvdGVjdGVkIHVzZWQgYnkgc3VidHlwZXNcclxuICAgIHRoaXMuYmFja2dyb3VuZE5vZGUgPSBiYWNrZ3JvdW5kTm9kZTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB1c2VkIGJ5IHByb3RvdHlwZSBmdW5jdGlvbnNcclxuICAgIHRoaXMuY29udGVudE5vZGUgPSBjb250ZW50Tm9kZTtcclxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgdGhpcy5idWlsZGVyTm9kZSA9IGJ1aWxkZXJOb2RlO1xyXG4gICAgdGhpcy5idWlsZGVyID0gYnVpbGRlck5vZGUuYnVpbGRlcjtcclxuICAgIHRoaXMuZHJhZ0xheWVyID0gZHJhZ0xheWVyO1xyXG4gICAgdGhpcy5ub3RJbnZlcnRpYmxlU3ltYm9sTm9kZSA9IG5vdEludmVydGlibGVTeW1ib2xOb2RlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQW5pbWF0ZXMgdGhpcyBmdW5jdGlvbiB0byBhIHNsb3QgaW4gdGhlIGJ1aWxkZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gc2xvdE51bWJlciAtIHNsb3QgbnVtYmVyIHRoYXQgdGhlIGZ1bmN0aW9uIGlzIGFuaW1hdGluZyB0b1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzbG90TnVtYmVyUmVtb3ZlZEZyb20gLSBzbG90IG51bWJlciB0aGF0IHRoZSBmdW5jdGlvbiB3YXMgcmVtb3ZlZCBmcm9tXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBhbmltYXRlVG9CdWlsZGVyKCBzbG90TnVtYmVyLCBzbG90TnVtYmVyUmVtb3ZlZEZyb20gKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLmRyYWdMYXllci5oYXNDaGlsZCggdGhpcyApLCAnY2FyZCBzaG91bGQgYmUgaW4gZHJhZ0xheWVyJyApO1xyXG5cclxuICAgIC8vIHRvIGltcHJvdmUgcmVhZGFiaWxpdHlcclxuICAgIGNvbnN0IGJ1aWxkZXJOb2RlID0gdGhpcy5idWlsZGVyTm9kZTtcclxuICAgIGNvbnN0IGJ1aWxkZXIgPSBidWlsZGVyTm9kZS5idWlsZGVyO1xyXG4gICAgY29uc3QgZHJhZ0xheWVyID0gdGhpcy5kcmFnTGF5ZXI7XHJcblxyXG4gICAgdGhpcy5mdW5jdGlvbkluc3RhbmNlLmFuaW1hdGVUbyggYnVpbGRlci5nZXRTbG90UG9zaXRpb24oIHNsb3ROdW1iZXIgKSxcclxuICAgICAgKCkgPT4ge1xyXG5cclxuICAgICAgICAvLyBJZiB0aGUgc2xvdCBpcyBvY2N1cGllZCwgcmVsb2NhdGUgdGhlIG9jY3VwaWVyLlxyXG4gICAgICAgIGNvbnN0IG9jY3VwaWVyTm9kZSA9IGJ1aWxkZXJOb2RlLmdldEZ1bmN0aW9uTm9kZSggc2xvdE51bWJlciApO1xyXG4gICAgICAgIGlmICggb2NjdXBpZXJOb2RlICkge1xyXG5cclxuICAgICAgICAgIGJ1aWxkZXJOb2RlLnJlbW92ZUZ1bmN0aW9uTm9kZSggb2NjdXBpZXJOb2RlLCBzbG90TnVtYmVyICk7XHJcbiAgICAgICAgICBkcmFnTGF5ZXIuYWRkQ2hpbGQoIG9jY3VwaWVyTm9kZSApO1xyXG5cclxuICAgICAgICAgIGlmICggYnVpbGRlci5pc1ZhbGlkU2xvdE51bWJlciggc2xvdE51bWJlclJlbW92ZWRGcm9tICkgJiYgTWF0aC5hYnMoIHNsb3ROdW1iZXJSZW1vdmVkRnJvbSAtIHNsb3ROdW1iZXIgKSA9PT0gMSApIHtcclxuXHJcbiAgICAgICAgICAgIC8vIHN3YXAgYWRqYWNlbnQgc2xvdHNcclxuICAgICAgICAgICAgb2NjdXBpZXJOb2RlLmFuaW1hdGVUb0J1aWxkZXIoIHNsb3ROdW1iZXJSZW1vdmVkRnJvbSwgc2xvdE51bWJlciApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gdG8gdGhlIGNhcm91c2VsLlxyXG4gICAgICAgICAgICBvY2N1cGllck5vZGUuYW5pbWF0ZVRvQ2Fyb3VzZWwoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRyYWdMYXllci5yZW1vdmVDaGlsZCggdGhpcyApO1xyXG4gICAgICAgIGJ1aWxkZXJOb2RlLmFkZEZ1bmN0aW9uTm9kZSggdGhpcywgc2xvdE51bWJlciApO1xyXG4gICAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNb3ZlcyB0aGlzIGZ1bmN0aW9uIGltbWVkaWF0ZWx5IHRvIHRoZSBidWlsZGVyLCBubyBhbmltYXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gc2xvdE51bWJlclxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBtb3ZlVG9CdWlsZGVyKCBzbG90TnVtYmVyICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLmJ1aWxkZXJOb2RlLmNvbnRhaW5zRnVuY3Rpb25Ob2RlKCB0aGlzICksICdmdW5jdGlvbiBpcyBhbHJlYWR5IGluIGJ1aWxkZXInICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhdGhpcy5idWlsZGVyTm9kZS5nZXRGdW5jdGlvbk5vZGUoIHNsb3ROdW1iZXIgKSwgYHNsb3QgJHtzbG90TnVtYmVyfSBpcyBvY2N1cGllZGAgKTtcclxuXHJcbiAgICAvLyByZW1vdmUgZnJvbSBkcmFnIGxheWVyXHJcbiAgICBpZiAoIHRoaXMuZHJhZ0xheWVyLmhhc0NoaWxkKCB0aGlzICkgKSB7XHJcbiAgICAgIHRoaXMuaW50ZXJydXB0U3VidHJlZUlucHV0KCk7IC8vIGNhbmNlbCBkcmFnXHJcbiAgICAgIHRoaXMuZHJhZ0xheWVyLnJlbW92ZUNoaWxkKCB0aGlzICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVtb3ZlIGZyb20gY2Fyb3VzZWxcclxuICAgIGlmICggdGhpcy5jb250YWluZXIuY29udGFpbnNOb2RlKCB0aGlzICkgKSB7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZU5vZGUoIHRoaXMgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBtb3ZlIHRvIGJ1aWxkZXJcclxuICAgIGNvbnN0IHNsb3RQb3NpdGlvbiA9IHRoaXMuYnVpbGRlck5vZGUuYnVpbGRlci5nZXRTbG90UG9zaXRpb24oIHNsb3ROdW1iZXIgKTtcclxuICAgIHRoaXMuZnVuY3Rpb25JbnN0YW5jZS5tb3ZlVG8oIHNsb3RQb3NpdGlvbiApO1xyXG4gICAgdGhpcy5idWlsZGVyTm9kZS5hZGRGdW5jdGlvbk5vZGUoIHRoaXMsIHNsb3ROdW1iZXIgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuaW1hdGVzIHRoaXMgZnVuY3Rpb24gdG8gdGhlIGNhcm91c2VsLlxyXG4gICAqXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBhbmltYXRlVG9DYXJvdXNlbCgpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuZHJhZ0xheWVyLmhhc0NoaWxkKCB0aGlzICksICdjYXJkIHNob3VsZCBiZSBpbiBkcmFnTGF5ZXInICk7XHJcbiAgICB0aGlzLmZ1bmN0aW9uSW5zdGFuY2UuYW5pbWF0ZVRvKCB0aGlzLmNvbnRhaW5lci5jYXJvdXNlbFBvc2l0aW9uLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kcmFnTGF5ZXIucmVtb3ZlQ2hpbGQoIHRoaXMgKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGROb2RlKCB0aGlzICk7XHJcbiAgICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vdmVzIHRoaXMgZnVuY3Rpb24gaW1tZWRpYXRlbHkgdG8gdGhlIGNhcm91c2VsLCBubyBhbmltYXRpb24uXHJcbiAgICogSWYgdGhlIGZ1bmN0aW9uIGlzIGFscmVhZHkgaW4gdGhlIGNhcm91c2VsLCB0aGlzIGlzIGEgbm8tb3AuXHJcbiAgICpcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgbW92ZVRvQ2Fyb3VzZWwoKSB7XHJcblxyXG4gICAgaWYgKCB0aGlzLmRyYWdMYXllci5oYXNDaGlsZCggdGhpcyApICkge1xyXG5cclxuICAgICAgLy8gcmVtb3ZlIGZyb20gZHJhZyBsYXllclxyXG4gICAgICB0aGlzLmludGVycnVwdFN1YnRyZWVJbnB1dCgpOyAvLyBjYW5jZWwgZHJhZ1xyXG4gICAgICB0aGlzLmRyYWdMYXllci5yZW1vdmVDaGlsZCggdGhpcyApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHRoaXMuYnVpbGRlck5vZGUuY29udGFpbnNGdW5jdGlvbk5vZGUoIHRoaXMgKSApIHtcclxuXHJcbiAgICAgIC8vIHJlbW92ZSBmcm9tIGJ1aWxkZXJcclxuICAgICAgdGhpcy5zdG9wTm90SW52ZXJ0aWJsZUFuaW1hdGlvbigpO1xyXG4gICAgICB0aGlzLmJ1aWxkZXJOb2RlLnJlbW92ZUZ1bmN0aW9uTm9kZSggdGhpcyApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG1vdmUgdG8gZnVuY3Rpb24gY2Fyb3VzZWxcclxuICAgIGlmICggIXRoaXMuY29udGFpbmVyLmNvbnRhaW5zTm9kZSggdGhpcyApICkge1xyXG4gICAgICB0aGlzLmNvbnRhaW5lci5hZGROb2RlKCB0aGlzICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydHMgYW5pbWF0aW9uIHNob3dpbmcgdGhhdCBhIGZ1bmN0aW9uIGlzIG5vdCBpbnZlcnRpYmxlLlxyXG4gICAqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0YXJ0Tm90SW52ZXJ0aWJsZUFuaW1hdGlvbigpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLmZ1bmN0aW9uSW5zdGFuY2UuaW52ZXJ0aWJsZSApO1xyXG4gICAgdGhpcy5ub3RJbnZlcnRpYmxlU3ltYm9sTm9kZS5zdGFydEFuaW1hdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcHMgYW5pbWF0aW9uIHNob3dpbmcgdGhhdCBhIGZ1bmN0aW9uIGlzIG5vdCBpbnZlcnRpYmxlLlxyXG4gICAqIElmIG5vIGFuaW1hdGlvbiBpcyBpbiBwcm9ncmVzcywgdGhpcyBpcyBhIG5vLW9wLlxyXG4gICAqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0b3BOb3RJbnZlcnRpYmxlQW5pbWF0aW9uKCkge1xyXG4gICAgdGhpcy5ub3RJbnZlcnRpYmxlU3ltYm9sTm9kZS5zdG9wQW5pbWF0aW9uKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdGdW5jdGlvbk5vZGUnLCBGdW5jdGlvbk5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSwyQ0FBMkM7QUFDdkUsT0FBT0MsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLFFBQVEsTUFBTSxtQkFBbUI7QUFDeEMsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxZQUFZLE1BQU0scUNBQXFDO0FBQzlELE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFDN0MsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQUMzQyxPQUFPQyx1QkFB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