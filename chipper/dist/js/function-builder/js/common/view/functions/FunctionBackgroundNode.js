// Copyright 2015-2023, University of Colorado Boulder

/**
 * Background for a function. It looks like this:
 *
 *    ---------
 *    \        \
 *    /        /
 *    ---------
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../../kite/js/imports.js';
import merge from '../../../../../phet-core/js/merge.js';
import { Path } from '../../../../../scenery/js/imports.js';
import functionBuilder from '../../../functionBuilder.js';
import FBConstants from '../../FBConstants.js';
export default class FunctionBackgroundNode extends Path {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      // Shape
      size: FBConstants.FUNCTION_SIZE,
      // {Dimensions2}

      // Path
      fill: 'white',
      // {Color|string}
      stroke: 'black',
      // {Color|string}
      lineWidth: 1,
      // {number}
      lineDash: [] // {number[]}
    }, options);

    // To improve readability of shape code
    const WIDTH = options.size.width;
    const HEIGHT = options.size.height;
    const X_INSET = FBConstants.FUNCTION_X_INSET_FACTOR * WIDTH;

    // Described from top-left, moving clockwise.
    const backgroundShape = new Shape().moveTo(0, 0).lineTo(WIDTH - X_INSET, 0).lineTo(WIDTH, HEIGHT / 2).lineTo(WIDTH - X_INSET, HEIGHT).lineTo(0, HEIGHT).lineTo(X_INSET, HEIGHT / 2).close();
    super(backgroundShape, options);
    this.xInset = X_INSET; // @public (read-only) needed for layout
  }
}

functionBuilder.register('FunctionBackgroundNode', FunctionBackgroundNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm1lcmdlIiwiUGF0aCIsImZ1bmN0aW9uQnVpbGRlciIsIkZCQ29uc3RhbnRzIiwiRnVuY3Rpb25CYWNrZ3JvdW5kTm9kZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInNpemUiLCJGVU5DVElPTl9TSVpFIiwiZmlsbCIsInN0cm9rZSIsImxpbmVXaWR0aCIsImxpbmVEYXNoIiwiV0lEVEgiLCJ3aWR0aCIsIkhFSUdIVCIsImhlaWdodCIsIlhfSU5TRVQiLCJGVU5DVElPTl9YX0lOU0VUX0ZBQ1RPUiIsImJhY2tncm91bmRTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlIiwieEluc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGdW5jdGlvbkJhY2tncm91bmROb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJhY2tncm91bmQgZm9yIGEgZnVuY3Rpb24uIEl0IGxvb2tzIGxpa2UgdGhpczpcclxuICpcclxuICogICAgLS0tLS0tLS0tXHJcbiAqICAgIFxcICAgICAgICBcXFxyXG4gKiAgICAvICAgICAgICAvXHJcbiAqICAgIC0tLS0tLS0tLVxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZnVuY3Rpb25CdWlsZGVyIGZyb20gJy4uLy4uLy4uL2Z1bmN0aW9uQnVpbGRlci5qcyc7XHJcbmltcG9ydCBGQkNvbnN0YW50cyBmcm9tICcuLi8uLi9GQkNvbnN0YW50cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGdW5jdGlvbkJhY2tncm91bmROb2RlIGV4dGVuZHMgUGF0aCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIC8vIFNoYXBlXHJcbiAgICAgIHNpemU6IEZCQ29uc3RhbnRzLkZVTkNUSU9OX1NJWkUsIC8vIHtEaW1lbnNpb25zMn1cclxuXHJcbiAgICAgIC8vIFBhdGhcclxuICAgICAgZmlsbDogJ3doaXRlJywgLy8ge0NvbG9yfHN0cmluZ31cclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLCAvLyB7Q29sb3J8c3RyaW5nfVxyXG4gICAgICBsaW5lV2lkdGg6IDEsIC8vIHtudW1iZXJ9XHJcbiAgICAgIGxpbmVEYXNoOiBbXSAvLyB7bnVtYmVyW119XHJcblxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFRvIGltcHJvdmUgcmVhZGFiaWxpdHkgb2Ygc2hhcGUgY29kZVxyXG4gICAgY29uc3QgV0lEVEggPSBvcHRpb25zLnNpemUud2lkdGg7XHJcbiAgICBjb25zdCBIRUlHSFQgPSBvcHRpb25zLnNpemUuaGVpZ2h0O1xyXG4gICAgY29uc3QgWF9JTlNFVCA9IEZCQ29uc3RhbnRzLkZVTkNUSU9OX1hfSU5TRVRfRkFDVE9SICogV0lEVEg7XHJcblxyXG4gICAgLy8gRGVzY3JpYmVkIGZyb20gdG9wLWxlZnQsIG1vdmluZyBjbG9ja3dpc2UuXHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kU2hhcGUgPSBuZXcgU2hhcGUoKVxyXG4gICAgICAubW92ZVRvKCAwLCAwIClcclxuICAgICAgLmxpbmVUbyggV0lEVEggLSBYX0lOU0VULCAwIClcclxuICAgICAgLmxpbmVUbyggV0lEVEgsIEhFSUdIVCAvIDIgKVxyXG4gICAgICAubGluZVRvKCBXSURUSCAtIFhfSU5TRVQsIEhFSUdIVCApXHJcbiAgICAgIC5saW5lVG8oIDAsIEhFSUdIVCApXHJcbiAgICAgIC5saW5lVG8oIFhfSU5TRVQsIEhFSUdIVCAvIDIgKVxyXG4gICAgICAuY2xvc2UoKTtcclxuXHJcbiAgICBzdXBlciggYmFja2dyb3VuZFNoYXBlLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy54SW5zZXQgPSBYX0lOU0VUOyAvLyBAcHVibGljIChyZWFkLW9ubHkpIG5lZWRlZCBmb3IgbGF5b3V0XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdGdW5jdGlvbkJhY2tncm91bmROb2RlJywgRnVuY3Rpb25CYWNrZ3JvdW5kTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLG1DQUFtQztBQUN6RCxPQUFPQyxLQUFLLE1BQU0sc0NBQXNDO0FBQ3hELFNBQVNDLElBQUksUUFBUSxzQ0FBc0M7QUFDM0QsT0FBT0MsZUFBZSxNQUFNLDZCQUE2QjtBQUN6RCxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBRTlDLGVBQWUsTUFBTUMsc0JBQXNCLFNBQVNILElBQUksQ0FBQztFQUV2RDtBQUNGO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsT0FBTyxFQUFHO0lBRXJCQSxPQUFPLEdBQUdOLEtBQUssQ0FBRTtNQUVmO01BQ0FPLElBQUksRUFBRUosV0FBVyxDQUFDSyxhQUFhO01BQUU7O01BRWpDO01BQ0FDLElBQUksRUFBRSxPQUFPO01BQUU7TUFDZkMsTUFBTSxFQUFFLE9BQU87TUFBRTtNQUNqQkMsU0FBUyxFQUFFLENBQUM7TUFBRTtNQUNkQyxRQUFRLEVBQUUsRUFBRSxDQUFDO0lBRWYsQ0FBQyxFQUFFTixPQUFRLENBQUM7O0lBRVo7SUFDQSxNQUFNTyxLQUFLLEdBQUdQLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDTyxLQUFLO0lBQ2hDLE1BQU1DLE1BQU0sR0FBR1QsT0FBTyxDQUFDQyxJQUFJLENBQUNTLE1BQU07SUFDbEMsTUFBTUMsT0FBTyxHQUFHZCxXQUFXLENBQUNlLHVCQUF1QixHQUFHTCxLQUFLOztJQUUzRDtJQUNBLE1BQU1NLGVBQWUsR0FBRyxJQUFJcEIsS0FBSyxDQUFDLENBQUMsQ0FDaENxQixNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUNkQyxNQUFNLENBQUVSLEtBQUssR0FBR0ksT0FBTyxFQUFFLENBQUUsQ0FBQyxDQUM1QkksTUFBTSxDQUFFUixLQUFLLEVBQUVFLE1BQU0sR0FBRyxDQUFFLENBQUMsQ0FDM0JNLE1BQU0sQ0FBRVIsS0FBSyxHQUFHSSxPQUFPLEVBQUVGLE1BQU8sQ0FBQyxDQUNqQ00sTUFBTSxDQUFFLENBQUMsRUFBRU4sTUFBTyxDQUFDLENBQ25CTSxNQUFNLENBQUVKLE9BQU8sRUFBRUYsTUFBTSxHQUFHLENBQUUsQ0FBQyxDQUM3Qk8sS0FBSyxDQUFDLENBQUM7SUFFVixLQUFLLENBQUVILGVBQWUsRUFBRWIsT0FBUSxDQUFDO0lBRWpDLElBQUksQ0FBQ2lCLE1BQU0sR0FBR04sT0FBTyxDQUFDLENBQUM7RUFDekI7QUFDRjs7QUFFQWYsZUFBZSxDQUFDc0IsUUFBUSxDQUFFLHdCQUF3QixFQUFFcEIsc0JBQXVCLENBQUMifQ==