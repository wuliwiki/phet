// Copyright 2016-2023, University of Colorado Boulder

/**
 * Node that synchronizes with a MathFunction, and supports changing its operand via a NumberPicker.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { HBox, Text } from '../../../../../scenery/js/imports.js';
import functionBuilder from '../../../functionBuilder.js';
import FBConstants from '../../FBConstants.js';
import MathFunction from '../../model/functions/MathFunction.js';
import FBNumberPicker from '../FBNumberPicker.js';
import FunctionNode from './FunctionNode.js';
export default class EditableMathFunctionNode extends FunctionNode {
  /**
   * @param {MathFunction} functionInstance
   * @param {FunctionContainer} container - container in the function carousel
   * @param {BuilderNode} builderNode
   * @param {Node} dragLayer - parent for this node when it's being dragged or animating
   * @param {Object} [options]
   */
  constructor(functionInstance, container, builderNode, dragLayer, options) {
    assert && assert(functionInstance instanceof MathFunction);
    const operatorNode = new Text(functionInstance.operator, {
      font: FBConstants.EQUATIONS_FUNCTION_OPERATOR_FONT
    });

    // picker for changing operand value
    const picker = new FBNumberPicker(functionInstance.operandProperty, functionInstance.operandRange, {
      color: functionInstance.viewOptions.pickerColor,
      font: FBConstants.EQUATIONS_FUNCTION_PICKER_FONT,
      arrowLineWidth: 0.5,
      skipZero: !functionInstance.zeroOperandValid
    });

    // prevent clicking on the picker from starting a drag sequence for the function node
    picker.addInputListener({
      down: event => {
        event.handle(); // don't propagate event to parent
      }
    });

    const contentNode = new HBox({
      children: [operatorNode, picker],
      spacing: 5
    });
    super(functionInstance, contentNode, container, builderNode, dragLayer, options);
  }
}
functionBuilder.register('EditableMathFunctionNode', EditableMathFunctionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIQm94IiwiVGV4dCIsImZ1bmN0aW9uQnVpbGRlciIsIkZCQ29uc3RhbnRzIiwiTWF0aEZ1bmN0aW9uIiwiRkJOdW1iZXJQaWNrZXIiLCJGdW5jdGlvbk5vZGUiLCJFZGl0YWJsZU1hdGhGdW5jdGlvbk5vZGUiLCJjb25zdHJ1Y3RvciIsImZ1bmN0aW9uSW5zdGFuY2UiLCJjb250YWluZXIiLCJidWlsZGVyTm9kZSIsImRyYWdMYXllciIsIm9wdGlvbnMiLCJhc3NlcnQiLCJvcGVyYXRvck5vZGUiLCJvcGVyYXRvciIsImZvbnQiLCJFUVVBVElPTlNfRlVOQ1RJT05fT1BFUkFUT1JfRk9OVCIsInBpY2tlciIsIm9wZXJhbmRQcm9wZXJ0eSIsIm9wZXJhbmRSYW5nZSIsImNvbG9yIiwidmlld09wdGlvbnMiLCJwaWNrZXJDb2xvciIsIkVRVUFUSU9OU19GVU5DVElPTl9QSUNLRVJfRk9OVCIsImFycm93TGluZVdpZHRoIiwic2tpcFplcm8iLCJ6ZXJvT3BlcmFuZFZhbGlkIiwiYWRkSW5wdXRMaXN0ZW5lciIsImRvd24iLCJldmVudCIsImhhbmRsZSIsImNvbnRlbnROb2RlIiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFZGl0YWJsZU1hdGhGdW5jdGlvbk5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTm9kZSB0aGF0IHN5bmNocm9uaXplcyB3aXRoIGEgTWF0aEZ1bmN0aW9uLCBhbmQgc3VwcG9ydHMgY2hhbmdpbmcgaXRzIG9wZXJhbmQgdmlhIGEgTnVtYmVyUGlja2VyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEhCb3gsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZnVuY3Rpb25CdWlsZGVyIGZyb20gJy4uLy4uLy4uL2Z1bmN0aW9uQnVpbGRlci5qcyc7XHJcbmltcG9ydCBGQkNvbnN0YW50cyBmcm9tICcuLi8uLi9GQkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBNYXRoRnVuY3Rpb24gZnJvbSAnLi4vLi4vbW9kZWwvZnVuY3Rpb25zL01hdGhGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBGQk51bWJlclBpY2tlciBmcm9tICcuLi9GQk51bWJlclBpY2tlci5qcyc7XHJcbmltcG9ydCBGdW5jdGlvbk5vZGUgZnJvbSAnLi9GdW5jdGlvbk5vZGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWRpdGFibGVNYXRoRnVuY3Rpb25Ob2RlIGV4dGVuZHMgRnVuY3Rpb25Ob2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtNYXRoRnVuY3Rpb259IGZ1bmN0aW9uSW5zdGFuY2VcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9uQ29udGFpbmVyfSBjb250YWluZXIgLSBjb250YWluZXIgaW4gdGhlIGZ1bmN0aW9uIGNhcm91c2VsXHJcbiAgICogQHBhcmFtIHtCdWlsZGVyTm9kZX0gYnVpbGRlck5vZGVcclxuICAgKiBAcGFyYW0ge05vZGV9IGRyYWdMYXllciAtIHBhcmVudCBmb3IgdGhpcyBub2RlIHdoZW4gaXQncyBiZWluZyBkcmFnZ2VkIG9yIGFuaW1hdGluZ1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZnVuY3Rpb25JbnN0YW5jZSwgY29udGFpbmVyLCBidWlsZGVyTm9kZSwgZHJhZ0xheWVyLCBvcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZ1bmN0aW9uSW5zdGFuY2UgaW5zdGFuY2VvZiBNYXRoRnVuY3Rpb24gKTtcclxuXHJcbiAgICBjb25zdCBvcGVyYXRvck5vZGUgPSBuZXcgVGV4dCggZnVuY3Rpb25JbnN0YW5jZS5vcGVyYXRvciwge1xyXG4gICAgICBmb250OiBGQkNvbnN0YW50cy5FUVVBVElPTlNfRlVOQ1RJT05fT1BFUkFUT1JfRk9OVFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHBpY2tlciBmb3IgY2hhbmdpbmcgb3BlcmFuZCB2YWx1ZVxyXG4gICAgY29uc3QgcGlja2VyID0gbmV3IEZCTnVtYmVyUGlja2VyKCBmdW5jdGlvbkluc3RhbmNlLm9wZXJhbmRQcm9wZXJ0eSwgZnVuY3Rpb25JbnN0YW5jZS5vcGVyYW5kUmFuZ2UsIHtcclxuICAgICAgY29sb3I6IGZ1bmN0aW9uSW5zdGFuY2Uudmlld09wdGlvbnMucGlja2VyQ29sb3IsXHJcbiAgICAgIGZvbnQ6IEZCQ29uc3RhbnRzLkVRVUFUSU9OU19GVU5DVElPTl9QSUNLRVJfRk9OVCxcclxuICAgICAgYXJyb3dMaW5lV2lkdGg6IDAuNSxcclxuICAgICAgc2tpcFplcm86ICFmdW5jdGlvbkluc3RhbmNlLnplcm9PcGVyYW5kVmFsaWRcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBwcmV2ZW50IGNsaWNraW5nIG9uIHRoZSBwaWNrZXIgZnJvbSBzdGFydGluZyBhIGRyYWcgc2VxdWVuY2UgZm9yIHRoZSBmdW5jdGlvbiBub2RlXHJcbiAgICBwaWNrZXIuYWRkSW5wdXRMaXN0ZW5lcigge1xyXG4gICAgICBkb3duOiBldmVudCA9PiB7XHJcbiAgICAgICAgZXZlbnQuaGFuZGxlKCk7IC8vIGRvbid0IHByb3BhZ2F0ZSBldmVudCB0byBwYXJlbnRcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnROb2RlID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFsgb3BlcmF0b3JOb2RlLCBwaWNrZXIgXSxcclxuICAgICAgc3BhY2luZzogNVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBmdW5jdGlvbkluc3RhbmNlLCBjb250ZW50Tm9kZSwgY29udGFpbmVyLCBidWlsZGVyTm9kZSwgZHJhZ0xheWVyLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdFZGl0YWJsZU1hdGhGdW5jdGlvbk5vZGUnLCBFZGl0YWJsZU1hdGhGdW5jdGlvbk5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxFQUFFQyxJQUFJLFFBQVEsc0NBQXNDO0FBQ2pFLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxZQUFZLE1BQU0sdUNBQXVDO0FBQ2hFLE9BQU9DLGNBQWMsTUFBTSxzQkFBc0I7QUFDakQsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUU1QyxlQUFlLE1BQU1DLHdCQUF3QixTQUFTRCxZQUFZLENBQUM7RUFFakU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsZ0JBQWdCLEVBQUVDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRztJQUUxRUMsTUFBTSxJQUFJQSxNQUFNLENBQUVMLGdCQUFnQixZQUFZTCxZQUFhLENBQUM7SUFFNUQsTUFBTVcsWUFBWSxHQUFHLElBQUlkLElBQUksQ0FBRVEsZ0JBQWdCLENBQUNPLFFBQVEsRUFBRTtNQUN4REMsSUFBSSxFQUFFZCxXQUFXLENBQUNlO0lBQ3BCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLE1BQU0sR0FBRyxJQUFJZCxjQUFjLENBQUVJLGdCQUFnQixDQUFDVyxlQUFlLEVBQUVYLGdCQUFnQixDQUFDWSxZQUFZLEVBQUU7TUFDbEdDLEtBQUssRUFBRWIsZ0JBQWdCLENBQUNjLFdBQVcsQ0FBQ0MsV0FBVztNQUMvQ1AsSUFBSSxFQUFFZCxXQUFXLENBQUNzQiw4QkFBOEI7TUFDaERDLGNBQWMsRUFBRSxHQUFHO01BQ25CQyxRQUFRLEVBQUUsQ0FBQ2xCLGdCQUFnQixDQUFDbUI7SUFDOUIsQ0FBRSxDQUFDOztJQUVIO0lBQ0FULE1BQU0sQ0FBQ1UsZ0JBQWdCLENBQUU7TUFDdkJDLElBQUksRUFBRUMsS0FBSyxJQUFJO1FBQ2JBLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ2xCO0lBQ0YsQ0FBRSxDQUFDOztJQUVILE1BQU1DLFdBQVcsR0FBRyxJQUFJakMsSUFBSSxDQUFFO01BQzVCa0MsUUFBUSxFQUFFLENBQUVuQixZQUFZLEVBQUVJLE1BQU0sQ0FBRTtNQUNsQ2dCLE9BQU8sRUFBRTtJQUNYLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRTFCLGdCQUFnQixFQUFFd0IsV0FBVyxFQUFFdkIsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLFNBQVMsRUFBRUMsT0FBUSxDQUFDO0VBQ3BGO0FBQ0Y7QUFFQVgsZUFBZSxDQUFDa0MsUUFBUSxDQUFFLDBCQUEwQixFQUFFN0Isd0JBQXlCLENBQUMifQ==