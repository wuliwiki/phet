// Copyright 2016-2023, University of Colorado Boulder

/**
 * Node that synchronizes with a MathFunction, but does not support editing its operand.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import StringUtils from '../../../../../phetcommon/js/util/StringUtils.js';
import { Text } from '../../../../../scenery/js/imports.js';
import functionBuilder from '../../../functionBuilder.js';
import FBConstants from '../../FBConstants.js';
import MathFunction from '../../model/functions/MathFunction.js';
import FunctionNode from './FunctionNode.js';
export default class MathFunctionNode extends FunctionNode {
  /**
   * @param {MathFunction} functionInstance
   * @param {FunctionContainer} container - container in the function carousel
   * @param {BuilderNode} builderNode
   * @param {Node} dragLayer - parent for this node when it's being dragged or animating
   * @param {Object} [options]
   */
  constructor(functionInstance, container, builderNode, dragLayer, options) {
    assert && assert(functionInstance instanceof MathFunction);

    // @private updated by operandProperty observer
    const contentNode = new Text('', {
      font: FBConstants.NUMBERS_FUNCTION_FONT
    });
    super(functionInstance, contentNode, container, builderNode, dragLayer, options);

    // synchronize operand with model.
    // unlink unnecessary, instances exist for lifetime of the sim
    functionInstance.operandProperty.link(operand => {
      contentNode.string = StringUtils.format('{0} {1}', functionInstance.operator, operand);
      contentNode.center = this.backgroundNode.center;
    });
  }
}
functionBuilder.register('MathFunctionNode', MathFunctionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIlRleHQiLCJmdW5jdGlvbkJ1aWxkZXIiLCJGQkNvbnN0YW50cyIsIk1hdGhGdW5jdGlvbiIsIkZ1bmN0aW9uTm9kZSIsIk1hdGhGdW5jdGlvbk5vZGUiLCJjb25zdHJ1Y3RvciIsImZ1bmN0aW9uSW5zdGFuY2UiLCJjb250YWluZXIiLCJidWlsZGVyTm9kZSIsImRyYWdMYXllciIsIm9wdGlvbnMiLCJhc3NlcnQiLCJjb250ZW50Tm9kZSIsImZvbnQiLCJOVU1CRVJTX0ZVTkNUSU9OX0ZPTlQiLCJvcGVyYW5kUHJvcGVydHkiLCJsaW5rIiwib3BlcmFuZCIsInN0cmluZyIsImZvcm1hdCIsIm9wZXJhdG9yIiwiY2VudGVyIiwiYmFja2dyb3VuZE5vZGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1hdGhGdW5jdGlvbk5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTm9kZSB0aGF0IHN5bmNocm9uaXplcyB3aXRoIGEgTWF0aEZ1bmN0aW9uLCBidXQgZG9lcyBub3Qgc3VwcG9ydCBlZGl0aW5nIGl0cyBvcGVyYW5kLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRkJDb25zdGFudHMgZnJvbSAnLi4vLi4vRkJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgTWF0aEZ1bmN0aW9uIGZyb20gJy4uLy4uL21vZGVsL2Z1bmN0aW9ucy9NYXRoRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgRnVuY3Rpb25Ob2RlIGZyb20gJy4vRnVuY3Rpb25Ob2RlLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhGdW5jdGlvbk5vZGUgZXh0ZW5kcyBGdW5jdGlvbk5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge01hdGhGdW5jdGlvbn0gZnVuY3Rpb25JbnN0YW5jZVxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb25Db250YWluZXJ9IGNvbnRhaW5lciAtIGNvbnRhaW5lciBpbiB0aGUgZnVuY3Rpb24gY2Fyb3VzZWxcclxuICAgKiBAcGFyYW0ge0J1aWxkZXJOb2RlfSBidWlsZGVyTm9kZVxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gZHJhZ0xheWVyIC0gcGFyZW50IGZvciB0aGlzIG5vZGUgd2hlbiBpdCdzIGJlaW5nIGRyYWdnZWQgb3IgYW5pbWF0aW5nXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBmdW5jdGlvbkluc3RhbmNlLCBjb250YWluZXIsIGJ1aWxkZXJOb2RlLCBkcmFnTGF5ZXIsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZnVuY3Rpb25JbnN0YW5jZSBpbnN0YW5jZW9mIE1hdGhGdW5jdGlvbiApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHVwZGF0ZWQgYnkgb3BlcmFuZFByb3BlcnR5IG9ic2VydmVyXHJcbiAgICBjb25zdCBjb250ZW50Tm9kZSA9IG5ldyBUZXh0KCAnJywge1xyXG4gICAgICBmb250OiBGQkNvbnN0YW50cy5OVU1CRVJTX0ZVTkNUSU9OX0ZPTlRcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggZnVuY3Rpb25JbnN0YW5jZSwgY29udGVudE5vZGUsIGNvbnRhaW5lciwgYnVpbGRlck5vZGUsIGRyYWdMYXllciwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHN5bmNocm9uaXplIG9wZXJhbmQgd2l0aCBtb2RlbC5cclxuICAgIC8vIHVubGluayB1bm5lY2Vzc2FyeSwgaW5zdGFuY2VzIGV4aXN0IGZvciBsaWZldGltZSBvZiB0aGUgc2ltXHJcbiAgICBmdW5jdGlvbkluc3RhbmNlLm9wZXJhbmRQcm9wZXJ0eS5saW5rKCBvcGVyYW5kID0+IHtcclxuICAgICAgY29udGVudE5vZGUuc3RyaW5nID0gU3RyaW5nVXRpbHMuZm9ybWF0KCAnezB9IHsxfScsIGZ1bmN0aW9uSW5zdGFuY2Uub3BlcmF0b3IsIG9wZXJhbmQgKTtcclxuICAgICAgY29udGVudE5vZGUuY2VudGVyID0gdGhpcy5iYWNrZ3JvdW5kTm9kZS5jZW50ZXI7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdNYXRoRnVuY3Rpb25Ob2RlJywgTWF0aEZ1bmN0aW9uTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sa0RBQWtEO0FBQzFFLFNBQVNDLElBQUksUUFBUSxzQ0FBc0M7QUFDM0QsT0FBT0MsZUFBZSxNQUFNLDZCQUE2QjtBQUN6RCxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLFlBQVksTUFBTSx1Q0FBdUM7QUFDaEUsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUU1QyxlQUFlLE1BQU1DLGdCQUFnQixTQUFTRCxZQUFZLENBQUM7RUFFekQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsZ0JBQWdCLEVBQUVDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRztJQUUxRUMsTUFBTSxJQUFJQSxNQUFNLENBQUVMLGdCQUFnQixZQUFZSixZQUFhLENBQUM7O0lBRTVEO0lBQ0EsTUFBTVUsV0FBVyxHQUFHLElBQUliLElBQUksQ0FBRSxFQUFFLEVBQUU7TUFDaENjLElBQUksRUFBRVosV0FBVyxDQUFDYTtJQUNwQixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVSLGdCQUFnQixFQUFFTSxXQUFXLEVBQUVMLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUVDLE9BQVEsQ0FBQzs7SUFFbEY7SUFDQTtJQUNBSixnQkFBZ0IsQ0FBQ1MsZUFBZSxDQUFDQyxJQUFJLENBQUVDLE9BQU8sSUFBSTtNQUNoREwsV0FBVyxDQUFDTSxNQUFNLEdBQUdwQixXQUFXLENBQUNxQixNQUFNLENBQUUsU0FBUyxFQUFFYixnQkFBZ0IsQ0FBQ2MsUUFBUSxFQUFFSCxPQUFRLENBQUM7TUFDeEZMLFdBQVcsQ0FBQ1MsTUFBTSxHQUFHLElBQUksQ0FBQ0MsY0FBYyxDQUFDRCxNQUFNO0lBQ2pELENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXJCLGVBQWUsQ0FBQ3VCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRW5CLGdCQUFpQixDQUFDIn0=