// Copyright 2016-2023, University of Colorado Boulder

/**
 * Container for functions.
 * A container is intended to be put in a carousel.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../../phet-core/js/merge.js';
import functionBuilder from '../../../functionBuilder.js';
import FBConstants from '../../FBConstants.js';
import MovableContainer from './MovableContainer.js';
export default class FunctionContainer extends MovableContainer {
  /**
   * @param {FunctionCreator} functionCreator - creates function instances
   * @param {constructor} functionNodeConstructor - constructor for subtype of FunctionNode
   * @param {Object} [options]
   */
  constructor(functionCreator, functionNodeConstructor, options) {
    options = merge({
      size: FBConstants.FUNCTION_SIZE
    }, options);
    super(options);

    // @private
    this.functionCreator = functionCreator;
    this.functionNodeConstructor = functionNodeConstructor;
  }

  /**
   * Gets the constructor associated with this container.
   * @returns {constructor} constructor for a subtype of AbstractFunction
   * @public
   */
  getFunctionConstructor() {
    return this.functionCreator.functionConstructor;
  }

  /**
   * Creates functions and puts them in the container.
   *
   * @param {number} numberOfInstances
   * @param {Scene} scene
   * @param {BuilderNode} builderNode
   * @param {Node} dragLayer
   * @public
   */
  createFunctions(numberOfInstances, scene, builderNode, dragLayer) {
    assert && assert(this.carouselPosition);
    assert && assert(this.isEmpty(), 'did you accidentally call this function twice?');
    for (let i = 0; i < numberOfInstances; i++) {
      // model element
      const functionInstance = this.functionCreator.createInstance({
        position: this.carouselPosition
      });
      scene.functionInstances.push(functionInstance);

      // associated Node
      const functionNode = new this.functionNodeConstructor(functionInstance, this, builderNode, dragLayer);

      // put the Node in this container
      this.addNode(functionNode);
    }
  }
}
functionBuilder.register('FunctionContainer', FunctionContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsImZ1bmN0aW9uQnVpbGRlciIsIkZCQ29uc3RhbnRzIiwiTW92YWJsZUNvbnRhaW5lciIsIkZ1bmN0aW9uQ29udGFpbmVyIiwiY29uc3RydWN0b3IiLCJmdW5jdGlvbkNyZWF0b3IiLCJmdW5jdGlvbk5vZGVDb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJzaXplIiwiRlVOQ1RJT05fU0laRSIsImdldEZ1bmN0aW9uQ29uc3RydWN0b3IiLCJmdW5jdGlvbkNvbnN0cnVjdG9yIiwiY3JlYXRlRnVuY3Rpb25zIiwibnVtYmVyT2ZJbnN0YW5jZXMiLCJzY2VuZSIsImJ1aWxkZXJOb2RlIiwiZHJhZ0xheWVyIiwiYXNzZXJ0IiwiY2Fyb3VzZWxQb3NpdGlvbiIsImlzRW1wdHkiLCJpIiwiZnVuY3Rpb25JbnN0YW5jZSIsImNyZWF0ZUluc3RhbmNlIiwicG9zaXRpb24iLCJmdW5jdGlvbkluc3RhbmNlcyIsInB1c2giLCJmdW5jdGlvbk5vZGUiLCJhZGROb2RlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGdW5jdGlvbkNvbnRhaW5lci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb250YWluZXIgZm9yIGZ1bmN0aW9ucy5cclxuICogQSBjb250YWluZXIgaXMgaW50ZW5kZWQgdG8gYmUgcHV0IGluIGEgY2Fyb3VzZWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBmdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vLi4vLi4vZnVuY3Rpb25CdWlsZGVyLmpzJztcclxuaW1wb3J0IEZCQ29uc3RhbnRzIGZyb20gJy4uLy4uL0ZCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IE1vdmFibGVDb250YWluZXIgZnJvbSAnLi9Nb3ZhYmxlQ29udGFpbmVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZ1bmN0aW9uQ29udGFpbmVyIGV4dGVuZHMgTW92YWJsZUNvbnRhaW5lciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb25DcmVhdG9yfSBmdW5jdGlvbkNyZWF0b3IgLSBjcmVhdGVzIGZ1bmN0aW9uIGluc3RhbmNlc1xyXG4gICAqIEBwYXJhbSB7Y29uc3RydWN0b3J9IGZ1bmN0aW9uTm9kZUNvbnN0cnVjdG9yIC0gY29uc3RydWN0b3IgZm9yIHN1YnR5cGUgb2YgRnVuY3Rpb25Ob2RlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBmdW5jdGlvbkNyZWF0b3IsIGZ1bmN0aW9uTm9kZUNvbnN0cnVjdG9yLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBzaXplOiBGQkNvbnN0YW50cy5GVU5DVElPTl9TSVpFXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5mdW5jdGlvbkNyZWF0b3IgPSBmdW5jdGlvbkNyZWF0b3I7XHJcbiAgICB0aGlzLmZ1bmN0aW9uTm9kZUNvbnN0cnVjdG9yID0gZnVuY3Rpb25Ob2RlQ29uc3RydWN0b3I7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBjb25zdHJ1Y3RvciBhc3NvY2lhdGVkIHdpdGggdGhpcyBjb250YWluZXIuXHJcbiAgICogQHJldHVybnMge2NvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBmb3IgYSBzdWJ0eXBlIG9mIEFic3RyYWN0RnVuY3Rpb25cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZ2V0RnVuY3Rpb25Db25zdHJ1Y3RvcigpIHtcclxuICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uQ3JlYXRvci5mdW5jdGlvbkNvbnN0cnVjdG9yO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBmdW5jdGlvbnMgYW5kIHB1dHMgdGhlbSBpbiB0aGUgY29udGFpbmVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlck9mSW5zdGFuY2VzXHJcbiAgICogQHBhcmFtIHtTY2VuZX0gc2NlbmVcclxuICAgKiBAcGFyYW0ge0J1aWxkZXJOb2RlfSBidWlsZGVyTm9kZVxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gZHJhZ0xheWVyXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNyZWF0ZUZ1bmN0aW9ucyggbnVtYmVyT2ZJbnN0YW5jZXMsIHNjZW5lLCBidWlsZGVyTm9kZSwgZHJhZ0xheWVyICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuY2Fyb3VzZWxQb3NpdGlvbiApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5pc0VtcHR5KCksICdkaWQgeW91IGFjY2lkZW50YWxseSBjYWxsIHRoaXMgZnVuY3Rpb24gdHdpY2U/JyApO1xyXG5cclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG51bWJlck9mSW5zdGFuY2VzOyBpKysgKSB7XHJcblxyXG4gICAgICAvLyBtb2RlbCBlbGVtZW50XHJcbiAgICAgIGNvbnN0IGZ1bmN0aW9uSW5zdGFuY2UgPSB0aGlzLmZ1bmN0aW9uQ3JlYXRvci5jcmVhdGVJbnN0YW5jZSggeyBwb3NpdGlvbjogdGhpcy5jYXJvdXNlbFBvc2l0aW9uIH0gKTtcclxuICAgICAgc2NlbmUuZnVuY3Rpb25JbnN0YW5jZXMucHVzaCggZnVuY3Rpb25JbnN0YW5jZSApO1xyXG5cclxuICAgICAgLy8gYXNzb2NpYXRlZCBOb2RlXHJcbiAgICAgIGNvbnN0IGZ1bmN0aW9uTm9kZSA9IG5ldyB0aGlzLmZ1bmN0aW9uTm9kZUNvbnN0cnVjdG9yKCBmdW5jdGlvbkluc3RhbmNlLCB0aGlzLCBidWlsZGVyTm9kZSwgZHJhZ0xheWVyICk7XHJcblxyXG4gICAgICAvLyBwdXQgdGhlIE5vZGUgaW4gdGhpcyBjb250YWluZXJcclxuICAgICAgdGhpcy5hZGROb2RlKCBmdW5jdGlvbk5vZGUgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uQnVpbGRlci5yZWdpc3RlciggJ0Z1bmN0aW9uQ29udGFpbmVyJywgRnVuY3Rpb25Db250YWluZXIgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sc0NBQXNDO0FBQ3hELE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFFcEQsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU0QsZ0JBQWdCLENBQUM7RUFFOUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxlQUFlLEVBQUVDLHVCQUF1QixFQUFFQyxPQUFPLEVBQUc7SUFFL0RBLE9BQU8sR0FBR1IsS0FBSyxDQUFFO01BQ2ZTLElBQUksRUFBRVAsV0FBVyxDQUFDUTtJQUNwQixDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUEsT0FBUSxDQUFDOztJQUVoQjtJQUNBLElBQUksQ0FBQ0YsZUFBZSxHQUFHQSxlQUFlO0lBQ3RDLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUdBLHVCQUF1QjtFQUN4RDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLHNCQUFzQkEsQ0FBQSxFQUFHO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDTCxlQUFlLENBQUNNLG1CQUFtQjtFQUNqRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsZUFBZUEsQ0FBRUMsaUJBQWlCLEVBQUVDLEtBQUssRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUc7SUFFbEVDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0MsZ0JBQWlCLENBQUM7SUFDekNELE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0UsT0FBTyxDQUFDLENBQUMsRUFBRSxnREFBaUQsQ0FBQztJQUVwRixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1AsaUJBQWlCLEVBQUVPLENBQUMsRUFBRSxFQUFHO01BRTVDO01BQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDaEIsZUFBZSxDQUFDaUIsY0FBYyxDQUFFO1FBQUVDLFFBQVEsRUFBRSxJQUFJLENBQUNMO01BQWlCLENBQUUsQ0FBQztNQUNuR0osS0FBSyxDQUFDVSxpQkFBaUIsQ0FBQ0MsSUFBSSxDQUFFSixnQkFBaUIsQ0FBQzs7TUFFaEQ7TUFDQSxNQUFNSyxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUNwQix1QkFBdUIsQ0FBRWUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFTixXQUFXLEVBQUVDLFNBQVUsQ0FBQzs7TUFFdkc7TUFDQSxJQUFJLENBQUNXLE9BQU8sQ0FBRUQsWUFBYSxDQUFDO0lBQzlCO0VBQ0Y7QUFDRjtBQUVBMUIsZUFBZSxDQUFDNEIsUUFBUSxDQUFFLG1CQUFtQixFQUFFekIsaUJBQWtCLENBQUMifQ==