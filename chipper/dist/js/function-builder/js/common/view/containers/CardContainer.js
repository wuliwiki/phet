// Copyright 2016-2023, University of Colorado Boulder

/**
 * Container for cards.
 * A container is intended to be put in a carousel.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../../phet-core/js/merge.js';
import functionBuilder from '../../../functionBuilder.js';
import FBConstants from '../../FBConstants.js';
import MovableContainer from './MovableContainer.js';
export default class CardContainer extends MovableContainer {
  /**
   * @param {constructor} cardConstructor
   * @param {constructor} cardNodeConstructor
   * @param {*} cardContent - content displayed on the card, type determined by subtype
   * @param {Object} [options]
   */
  constructor(cardConstructor, cardNodeConstructor, cardContent, options) {
    options = merge({
      size: FBConstants.CARD_OPTIONS.size,
      emptyNode: cardNodeConstructor.createGhostNode(cardContent) // {Node} shown when the container is empty
    }, options);
    super(options);

    // @private
    this.cardConstructor = cardConstructor;
    this.cardNodeConstructor = cardNodeConstructor;
    this.cardContent = cardContent;
  }

  /**
   * Creates cards and puts them in the container.
   *
   * @param {number} numberOfInstances - number of instances of the card to create
   * @param {Scene} scene
   * @param {CardContainer} inputContainer - container in the input carousel
   * @param {CardContainer} outputContainer - container in the output carousel
   * @param {BuilderNode} builderNode
   * @param {Node} dragLayer - parent for a CardNode when it's being dragged or animating
   * @param {SeeInsideLayer} seeInsideLayer
   * @param {Property.<boolean>} seeInsideProperty
   * @public
   */
  createCards(numberOfInstances, scene, inputContainer, outputContainer, builderNode, dragLayer, seeInsideLayer, seeInsideProperty) {
    assert && assert(this === inputContainer, 'cards must be created in the input carousel');
    assert && assert(inputContainer.isEmpty() && outputContainer.isEmpty(), 'did you accidentally call this function twice?');
    assert && assert(inputContainer.carouselPosition && outputContainer.carouselPosition, 'did you call this before containers were attached to ScreenView?');
    for (let i = 0; i < numberOfInstances; i++) {
      // model element
      const card = new this.cardConstructor(this.cardContent, {
        position: inputContainer.carouselPosition
      });
      scene.cards.push(card);

      // associated Node
      const cardNode = new this.cardNodeConstructor(card, inputContainer, outputContainer, builderNode, dragLayer, seeInsideProperty);

      // put the Node in this container
      this.addNode(cardNode);

      // add to 'see inside' layer, for viewing the card through windows
      seeInsideLayer.addCardNode(cardNode);

      // add a 'mole under the carpet' to the builder, synchronizes with the card's position
      builderNode.addMole(card);
    }
  }
}
functionBuilder.register('CardContainer', CardContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsImZ1bmN0aW9uQnVpbGRlciIsIkZCQ29uc3RhbnRzIiwiTW92YWJsZUNvbnRhaW5lciIsIkNhcmRDb250YWluZXIiLCJjb25zdHJ1Y3RvciIsImNhcmRDb25zdHJ1Y3RvciIsImNhcmROb2RlQ29uc3RydWN0b3IiLCJjYXJkQ29udGVudCIsIm9wdGlvbnMiLCJzaXplIiwiQ0FSRF9PUFRJT05TIiwiZW1wdHlOb2RlIiwiY3JlYXRlR2hvc3ROb2RlIiwiY3JlYXRlQ2FyZHMiLCJudW1iZXJPZkluc3RhbmNlcyIsInNjZW5lIiwiaW5wdXRDb250YWluZXIiLCJvdXRwdXRDb250YWluZXIiLCJidWlsZGVyTm9kZSIsImRyYWdMYXllciIsInNlZUluc2lkZUxheWVyIiwic2VlSW5zaWRlUHJvcGVydHkiLCJhc3NlcnQiLCJpc0VtcHR5IiwiY2Fyb3VzZWxQb3NpdGlvbiIsImkiLCJjYXJkIiwicG9zaXRpb24iLCJjYXJkcyIsInB1c2giLCJjYXJkTm9kZSIsImFkZE5vZGUiLCJhZGRDYXJkTm9kZSIsImFkZE1vbGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNhcmRDb250YWluZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udGFpbmVyIGZvciBjYXJkcy5cclxuICogQSBjb250YWluZXIgaXMgaW50ZW5kZWQgdG8gYmUgcHV0IGluIGEgY2Fyb3VzZWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBmdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vLi4vLi4vZnVuY3Rpb25CdWlsZGVyLmpzJztcclxuaW1wb3J0IEZCQ29uc3RhbnRzIGZyb20gJy4uLy4uL0ZCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IE1vdmFibGVDb250YWluZXIgZnJvbSAnLi9Nb3ZhYmxlQ29udGFpbmVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmRDb250YWluZXIgZXh0ZW5kcyBNb3ZhYmxlQ29udGFpbmVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtjb25zdHJ1Y3Rvcn0gY2FyZENvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHtjb25zdHJ1Y3Rvcn0gY2FyZE5vZGVDb25zdHJ1Y3RvclxyXG4gICAqIEBwYXJhbSB7Kn0gY2FyZENvbnRlbnQgLSBjb250ZW50IGRpc3BsYXllZCBvbiB0aGUgY2FyZCwgdHlwZSBkZXRlcm1pbmVkIGJ5IHN1YnR5cGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNhcmRDb25zdHJ1Y3RvciwgY2FyZE5vZGVDb25zdHJ1Y3RvciwgY2FyZENvbnRlbnQsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHNpemU6IEZCQ29uc3RhbnRzLkNBUkRfT1BUSU9OUy5zaXplLFxyXG4gICAgICBlbXB0eU5vZGU6IGNhcmROb2RlQ29uc3RydWN0b3IuY3JlYXRlR2hvc3ROb2RlKCBjYXJkQ29udGVudCApIC8vIHtOb2RlfSBzaG93biB3aGVuIHRoZSBjb250YWluZXIgaXMgZW1wdHlcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLmNhcmRDb25zdHJ1Y3RvciA9IGNhcmRDb25zdHJ1Y3RvcjtcclxuICAgIHRoaXMuY2FyZE5vZGVDb25zdHJ1Y3RvciA9IGNhcmROb2RlQ29uc3RydWN0b3I7XHJcbiAgICB0aGlzLmNhcmRDb250ZW50ID0gY2FyZENvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGNhcmRzIGFuZCBwdXRzIHRoZW0gaW4gdGhlIGNvbnRhaW5lci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJPZkluc3RhbmNlcyAtIG51bWJlciBvZiBpbnN0YW5jZXMgb2YgdGhlIGNhcmQgdG8gY3JlYXRlXHJcbiAgICogQHBhcmFtIHtTY2VuZX0gc2NlbmVcclxuICAgKiBAcGFyYW0ge0NhcmRDb250YWluZXJ9IGlucHV0Q29udGFpbmVyIC0gY29udGFpbmVyIGluIHRoZSBpbnB1dCBjYXJvdXNlbFxyXG4gICAqIEBwYXJhbSB7Q2FyZENvbnRhaW5lcn0gb3V0cHV0Q29udGFpbmVyIC0gY29udGFpbmVyIGluIHRoZSBvdXRwdXQgY2Fyb3VzZWxcclxuICAgKiBAcGFyYW0ge0J1aWxkZXJOb2RlfSBidWlsZGVyTm9kZVxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gZHJhZ0xheWVyIC0gcGFyZW50IGZvciBhIENhcmROb2RlIHdoZW4gaXQncyBiZWluZyBkcmFnZ2VkIG9yIGFuaW1hdGluZ1xyXG4gICAqIEBwYXJhbSB7U2VlSW5zaWRlTGF5ZXJ9IHNlZUluc2lkZUxheWVyXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHNlZUluc2lkZVByb3BlcnR5XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNyZWF0ZUNhcmRzKCBudW1iZXJPZkluc3RhbmNlcywgc2NlbmUsIGlucHV0Q29udGFpbmVyLCBvdXRwdXRDb250YWluZXIsIGJ1aWxkZXJOb2RlLFxyXG4gICAgICAgICAgICAgICBkcmFnTGF5ZXIsIHNlZUluc2lkZUxheWVyLCBzZWVJbnNpZGVQcm9wZXJ0eSApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzID09PSBpbnB1dENvbnRhaW5lcixcclxuICAgICAgJ2NhcmRzIG11c3QgYmUgY3JlYXRlZCBpbiB0aGUgaW5wdXQgY2Fyb3VzZWwnICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpbnB1dENvbnRhaW5lci5pc0VtcHR5KCkgJiYgb3V0cHV0Q29udGFpbmVyLmlzRW1wdHkoKSxcclxuICAgICAgJ2RpZCB5b3UgYWNjaWRlbnRhbGx5IGNhbGwgdGhpcyBmdW5jdGlvbiB0d2ljZT8nICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpbnB1dENvbnRhaW5lci5jYXJvdXNlbFBvc2l0aW9uICYmIG91dHB1dENvbnRhaW5lci5jYXJvdXNlbFBvc2l0aW9uLFxyXG4gICAgICAnZGlkIHlvdSBjYWxsIHRoaXMgYmVmb3JlIGNvbnRhaW5lcnMgd2VyZSBhdHRhY2hlZCB0byBTY3JlZW5WaWV3PycgKTtcclxuXHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkluc3RhbmNlczsgaSsrICkge1xyXG5cclxuICAgICAgLy8gbW9kZWwgZWxlbWVudFxyXG4gICAgICBjb25zdCBjYXJkID0gbmV3IHRoaXMuY2FyZENvbnN0cnVjdG9yKCB0aGlzLmNhcmRDb250ZW50LCB7IHBvc2l0aW9uOiBpbnB1dENvbnRhaW5lci5jYXJvdXNlbFBvc2l0aW9uIH0gKTtcclxuICAgICAgc2NlbmUuY2FyZHMucHVzaCggY2FyZCApO1xyXG5cclxuICAgICAgLy8gYXNzb2NpYXRlZCBOb2RlXHJcbiAgICAgIGNvbnN0IGNhcmROb2RlID0gbmV3IHRoaXMuY2FyZE5vZGVDb25zdHJ1Y3RvciggY2FyZCwgaW5wdXRDb250YWluZXIsIG91dHB1dENvbnRhaW5lciwgYnVpbGRlck5vZGUsIGRyYWdMYXllciwgc2VlSW5zaWRlUHJvcGVydHkgKTtcclxuXHJcbiAgICAgIC8vIHB1dCB0aGUgTm9kZSBpbiB0aGlzIGNvbnRhaW5lclxyXG4gICAgICB0aGlzLmFkZE5vZGUoIGNhcmROb2RlICk7XHJcblxyXG4gICAgICAvLyBhZGQgdG8gJ3NlZSBpbnNpZGUnIGxheWVyLCBmb3Igdmlld2luZyB0aGUgY2FyZCB0aHJvdWdoIHdpbmRvd3NcclxuICAgICAgc2VlSW5zaWRlTGF5ZXIuYWRkQ2FyZE5vZGUoIGNhcmROb2RlICk7XHJcblxyXG4gICAgICAvLyBhZGQgYSAnbW9sZSB1bmRlciB0aGUgY2FycGV0JyB0byB0aGUgYnVpbGRlciwgc3luY2hyb25pemVzIHdpdGggdGhlIGNhcmQncyBwb3NpdGlvblxyXG4gICAgICBidWlsZGVyTm9kZS5hZGRNb2xlKCBjYXJkICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdDYXJkQ29udGFpbmVyJywgQ2FyZENvbnRhaW5lciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxzQ0FBc0M7QUFDeEQsT0FBT0MsZUFBZSxNQUFNLDZCQUE2QjtBQUN6RCxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUVwRCxlQUFlLE1BQU1DLGFBQWEsU0FBU0QsZ0JBQWdCLENBQUM7RUFFMUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLGVBQWUsRUFBRUMsbUJBQW1CLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFHO0lBRXhFQSxPQUFPLEdBQUdULEtBQUssQ0FBRTtNQUNmVSxJQUFJLEVBQUVSLFdBQVcsQ0FBQ1MsWUFBWSxDQUFDRCxJQUFJO01BQ25DRSxTQUFTLEVBQUVMLG1CQUFtQixDQUFDTSxlQUFlLENBQUVMLFdBQVksQ0FBQyxDQUFDO0lBQ2hFLENBQUMsRUFBRUMsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFQSxPQUFRLENBQUM7O0lBRWhCO0lBQ0EsSUFBSSxDQUFDSCxlQUFlLEdBQUdBLGVBQWU7SUFDdEMsSUFBSSxDQUFDQyxtQkFBbUIsR0FBR0EsbUJBQW1CO0lBQzlDLElBQUksQ0FBQ0MsV0FBVyxHQUFHQSxXQUFXO0VBQ2hDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLGlCQUFpQixFQUFFQyxLQUFLLEVBQUVDLGNBQWMsRUFBRUMsZUFBZSxFQUFFQyxXQUFXLEVBQ3RFQyxTQUFTLEVBQUVDLGNBQWMsRUFBRUMsaUJBQWlCLEVBQUc7SUFFMURDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksS0FBS04sY0FBYyxFQUN2Qyw2Q0FBOEMsQ0FBQztJQUNqRE0sTUFBTSxJQUFJQSxNQUFNLENBQUVOLGNBQWMsQ0FBQ08sT0FBTyxDQUFDLENBQUMsSUFBSU4sZUFBZSxDQUFDTSxPQUFPLENBQUMsQ0FBQyxFQUNyRSxnREFBaUQsQ0FBQztJQUNwREQsTUFBTSxJQUFJQSxNQUFNLENBQUVOLGNBQWMsQ0FBQ1EsZ0JBQWdCLElBQUlQLGVBQWUsQ0FBQ08sZ0JBQWdCLEVBQ25GLGtFQUFtRSxDQUFDO0lBRXRFLEtBQU0sSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHWCxpQkFBaUIsRUFBRVcsQ0FBQyxFQUFFLEVBQUc7TUFFNUM7TUFDQSxNQUFNQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUNyQixlQUFlLENBQUUsSUFBSSxDQUFDRSxXQUFXLEVBQUU7UUFBRW9CLFFBQVEsRUFBRVgsY0FBYyxDQUFDUTtNQUFpQixDQUFFLENBQUM7TUFDeEdULEtBQUssQ0FBQ2EsS0FBSyxDQUFDQyxJQUFJLENBQUVILElBQUssQ0FBQzs7TUFFeEI7TUFDQSxNQUFNSSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUN4QixtQkFBbUIsQ0FBRW9CLElBQUksRUFBRVYsY0FBYyxFQUFFQyxlQUFlLEVBQUVDLFdBQVcsRUFBRUMsU0FBUyxFQUFFRSxpQkFBa0IsQ0FBQzs7TUFFakk7TUFDQSxJQUFJLENBQUNVLE9BQU8sQ0FBRUQsUUFBUyxDQUFDOztNQUV4QjtNQUNBVixjQUFjLENBQUNZLFdBQVcsQ0FBRUYsUUFBUyxDQUFDOztNQUV0QztNQUNBWixXQUFXLENBQUNlLE9BQU8sQ0FBRVAsSUFBSyxDQUFDO0lBQzdCO0VBQ0Y7QUFDRjtBQUVBMUIsZUFBZSxDQUFDa0MsUUFBUSxDQUFFLGVBQWUsRUFBRS9CLGFBQWMsQ0FBQyJ9