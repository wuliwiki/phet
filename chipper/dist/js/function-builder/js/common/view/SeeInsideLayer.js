// Copyright 2016-2023, University of Colorado Boulder

/**
 * Layer that implements the 'See Inside' feature. Each function in the builders has a 'window' at its right edge,
 * which lets you see the card change as it moves through the builder. Cards can be grabbed through these windows.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../kite/js/imports.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import functionBuilder from '../../functionBuilder.js';
import FBConstants from '../FBConstants.js';

// constants
const WINDOW_SIZE = FBConstants.CARD_OPTIONS.size;
const CORNER_RADIUS = FBConstants.CARD_OPTIONS.cornerRadius;
export default class SeeInsideLayer extends Node {
  /**
   * @param {Builder} builder
   * @param {Object} [options]
   */
  constructor(builder, options) {
    options = options || {};

    // add a window at the right end of each slot
    const windowsShape = new Shape();
    for (let i = 0; i < builder.numberOfSlots; i++) {
      const windowPosition = builder.getWindowPosition(i);
      const windowLeft = windowPosition.x - WINDOW_SIZE.width / 2;
      const windowY = windowPosition.y - WINDOW_SIZE.height / 2;
      if (i !== 0) {
        // move to center of rounded rect, so we don't see a line at rounded corner
        windowsShape.moveTo(windowPosition.x, windowY);
      }
      windowsShape.roundRect(windowLeft, windowY, WINDOW_SIZE.width, WINDOW_SIZE.height, CORNER_RADIUS, CORNER_RADIUS);
    }

    // parent for all cards, clip to the windows
    const cardsParent = new Node({
      clipArea: windowsShape
    });

    // background, black because it's dark inside the builder :)
    const backgroundNode = new Path(windowsShape, {
      fill: 'black'
    });

    // foreground, stroked with builder color, so it looks like we cut out a window
    const foregroundNode = new Path(windowsShape, {
      stroke: builder.colorScheme.middle,
      lineWidth: 2
    });
    assert && assert(!options.children, 'decoration not supported');
    options.children = [backgroundNode, cardsParent, foregroundNode];
    super(options);

    // @private
    this.cardsParent = cardsParent;
  }

  /**
   * Adds a card to this layer.
   * Cards are added when they are created, and remain in this layer for the lifetime of the sim.
   *
   * @param {CardNode} cardNode
   * @public
   */
  addCardNode(cardNode) {
    this.cardsParent.addChild(cardNode);
  }
}
functionBuilder.register('SeeInsideLayer', SeeInsideLayer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIk5vZGUiLCJQYXRoIiwiZnVuY3Rpb25CdWlsZGVyIiwiRkJDb25zdGFudHMiLCJXSU5ET1dfU0laRSIsIkNBUkRfT1BUSU9OUyIsInNpemUiLCJDT1JORVJfUkFESVVTIiwiY29ybmVyUmFkaXVzIiwiU2VlSW5zaWRlTGF5ZXIiLCJjb25zdHJ1Y3RvciIsImJ1aWxkZXIiLCJvcHRpb25zIiwid2luZG93c1NoYXBlIiwiaSIsIm51bWJlck9mU2xvdHMiLCJ3aW5kb3dQb3NpdGlvbiIsImdldFdpbmRvd1Bvc2l0aW9uIiwid2luZG93TGVmdCIsIngiLCJ3aWR0aCIsIndpbmRvd1kiLCJ5IiwiaGVpZ2h0IiwibW92ZVRvIiwicm91bmRSZWN0IiwiY2FyZHNQYXJlbnQiLCJjbGlwQXJlYSIsImJhY2tncm91bmROb2RlIiwiZmlsbCIsImZvcmVncm91bmROb2RlIiwic3Ryb2tlIiwiY29sb3JTY2hlbWUiLCJtaWRkbGUiLCJsaW5lV2lkdGgiLCJhc3NlcnQiLCJjaGlsZHJlbiIsImFkZENhcmROb2RlIiwiY2FyZE5vZGUiLCJhZGRDaGlsZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2VlSW5zaWRlTGF5ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTGF5ZXIgdGhhdCBpbXBsZW1lbnRzIHRoZSAnU2VlIEluc2lkZScgZmVhdHVyZS4gRWFjaCBmdW5jdGlvbiBpbiB0aGUgYnVpbGRlcnMgaGFzIGEgJ3dpbmRvdycgYXQgaXRzIHJpZ2h0IGVkZ2UsXHJcbiAqIHdoaWNoIGxldHMgeW91IHNlZSB0aGUgY2FyZCBjaGFuZ2UgYXMgaXQgbW92ZXMgdGhyb3VnaCB0aGUgYnVpbGRlci4gQ2FyZHMgY2FuIGJlIGdyYWJiZWQgdGhyb3VnaCB0aGVzZSB3aW5kb3dzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBmdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vLi4vZnVuY3Rpb25CdWlsZGVyLmpzJztcclxuaW1wb3J0IEZCQ29uc3RhbnRzIGZyb20gJy4uL0ZCQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBXSU5ET1dfU0laRSA9IEZCQ29uc3RhbnRzLkNBUkRfT1BUSU9OUy5zaXplO1xyXG5jb25zdCBDT1JORVJfUkFESVVTID0gRkJDb25zdGFudHMuQ0FSRF9PUFRJT05TLmNvcm5lclJhZGl1cztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlZUluc2lkZUxheWVyIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QnVpbGRlcn0gYnVpbGRlclxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYnVpbGRlciwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgICAvLyBhZGQgYSB3aW5kb3cgYXQgdGhlIHJpZ2h0IGVuZCBvZiBlYWNoIHNsb3RcclxuICAgIGNvbnN0IHdpbmRvd3NTaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgYnVpbGRlci5udW1iZXJPZlNsb3RzOyBpKysgKSB7XHJcblxyXG4gICAgICBjb25zdCB3aW5kb3dQb3NpdGlvbiA9IGJ1aWxkZXIuZ2V0V2luZG93UG9zaXRpb24oIGkgKTtcclxuICAgICAgY29uc3Qgd2luZG93TGVmdCA9IHdpbmRvd1Bvc2l0aW9uLnggLSAoIFdJTkRPV19TSVpFLndpZHRoIC8gMiApO1xyXG4gICAgICBjb25zdCB3aW5kb3dZID0gd2luZG93UG9zaXRpb24ueSAtICggV0lORE9XX1NJWkUuaGVpZ2h0IC8gMiApO1xyXG4gICAgICBpZiAoIGkgIT09IDAgKSB7XHJcbiAgICAgICAgLy8gbW92ZSB0byBjZW50ZXIgb2Ygcm91bmRlZCByZWN0LCBzbyB3ZSBkb24ndCBzZWUgYSBsaW5lIGF0IHJvdW5kZWQgY29ybmVyXHJcbiAgICAgICAgd2luZG93c1NoYXBlLm1vdmVUbyggd2luZG93UG9zaXRpb24ueCwgd2luZG93WSApO1xyXG4gICAgICB9XHJcbiAgICAgIHdpbmRvd3NTaGFwZS5yb3VuZFJlY3QoIHdpbmRvd0xlZnQsIHdpbmRvd1ksIFdJTkRPV19TSVpFLndpZHRoLCBXSU5ET1dfU0laRS5oZWlnaHQsIENPUk5FUl9SQURJVVMsIENPUk5FUl9SQURJVVMgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwYXJlbnQgZm9yIGFsbCBjYXJkcywgY2xpcCB0byB0aGUgd2luZG93c1xyXG4gICAgY29uc3QgY2FyZHNQYXJlbnQgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjbGlwQXJlYTogd2luZG93c1NoYXBlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gYmFja2dyb3VuZCwgYmxhY2sgYmVjYXVzZSBpdCdzIGRhcmsgaW5zaWRlIHRoZSBidWlsZGVyIDopXHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kTm9kZSA9IG5ldyBQYXRoKCB3aW5kb3dzU2hhcGUsIHtcclxuICAgICAgZmlsbDogJ2JsYWNrJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGZvcmVncm91bmQsIHN0cm9rZWQgd2l0aCBidWlsZGVyIGNvbG9yLCBzbyBpdCBsb29rcyBsaWtlIHdlIGN1dCBvdXQgYSB3aW5kb3dcclxuICAgIGNvbnN0IGZvcmVncm91bmROb2RlID0gbmV3IFBhdGgoIHdpbmRvd3NTaGFwZSwge1xyXG4gICAgICBzdHJva2U6IGJ1aWxkZXIuY29sb3JTY2hlbWUubWlkZGxlLFxyXG4gICAgICBsaW5lV2lkdGg6IDJcclxuICAgIH0gKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5jaGlsZHJlbiwgJ2RlY29yYXRpb24gbm90IHN1cHBvcnRlZCcgKTtcclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGJhY2tncm91bmROb2RlLCBjYXJkc1BhcmVudCwgZm9yZWdyb3VuZE5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLmNhcmRzUGFyZW50ID0gY2FyZHNQYXJlbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgY2FyZCB0byB0aGlzIGxheWVyLlxyXG4gICAqIENhcmRzIGFyZSBhZGRlZCB3aGVuIHRoZXkgYXJlIGNyZWF0ZWQsIGFuZCByZW1haW4gaW4gdGhpcyBsYXllciBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NhcmROb2RlfSBjYXJkTm9kZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBhZGRDYXJkTm9kZSggY2FyZE5vZGUgKSB7XHJcbiAgICB0aGlzLmNhcmRzUGFyZW50LmFkZENoaWxkKCBjYXJkTm9kZSApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb25CdWlsZGVyLnJlZ2lzdGVyKCAnU2VlSW5zaWRlTGF5ZXInLCBTZWVJbnNpZGVMYXllciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjs7QUFFM0M7QUFDQSxNQUFNQyxXQUFXLEdBQUdELFdBQVcsQ0FBQ0UsWUFBWSxDQUFDQyxJQUFJO0FBQ2pELE1BQU1DLGFBQWEsR0FBR0osV0FBVyxDQUFDRSxZQUFZLENBQUNHLFlBQVk7QUFFM0QsZUFBZSxNQUFNQyxjQUFjLFNBQVNULElBQUksQ0FBQztFQUUvQztBQUNGO0FBQ0E7QUFDQTtFQUNFVSxXQUFXQSxDQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRztJQUU5QkEsT0FBTyxHQUFHQSxPQUFPLElBQUksQ0FBQyxDQUFDOztJQUV2QjtJQUNBLE1BQU1DLFlBQVksR0FBRyxJQUFJZCxLQUFLLENBQUMsQ0FBQztJQUNoQyxLQUFNLElBQUllLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsT0FBTyxDQUFDSSxhQUFhLEVBQUVELENBQUMsRUFBRSxFQUFHO01BRWhELE1BQU1FLGNBQWMsR0FBR0wsT0FBTyxDQUFDTSxpQkFBaUIsQ0FBRUgsQ0FBRSxDQUFDO01BQ3JELE1BQU1JLFVBQVUsR0FBR0YsY0FBYyxDQUFDRyxDQUFDLEdBQUtmLFdBQVcsQ0FBQ2dCLEtBQUssR0FBRyxDQUFHO01BQy9ELE1BQU1DLE9BQU8sR0FBR0wsY0FBYyxDQUFDTSxDQUFDLEdBQUtsQixXQUFXLENBQUNtQixNQUFNLEdBQUcsQ0FBRztNQUM3RCxJQUFLVCxDQUFDLEtBQUssQ0FBQyxFQUFHO1FBQ2I7UUFDQUQsWUFBWSxDQUFDVyxNQUFNLENBQUVSLGNBQWMsQ0FBQ0csQ0FBQyxFQUFFRSxPQUFRLENBQUM7TUFDbEQ7TUFDQVIsWUFBWSxDQUFDWSxTQUFTLENBQUVQLFVBQVUsRUFBRUcsT0FBTyxFQUFFakIsV0FBVyxDQUFDZ0IsS0FBSyxFQUFFaEIsV0FBVyxDQUFDbUIsTUFBTSxFQUFFaEIsYUFBYSxFQUFFQSxhQUFjLENBQUM7SUFDcEg7O0lBRUE7SUFDQSxNQUFNbUIsV0FBVyxHQUFHLElBQUkxQixJQUFJLENBQUU7TUFDNUIyQixRQUFRLEVBQUVkO0lBQ1osQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTWUsY0FBYyxHQUFHLElBQUkzQixJQUFJLENBQUVZLFlBQVksRUFBRTtNQUM3Q2dCLElBQUksRUFBRTtJQUNSLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLGNBQWMsR0FBRyxJQUFJN0IsSUFBSSxDQUFFWSxZQUFZLEVBQUU7TUFDN0NrQixNQUFNLEVBQUVwQixPQUFPLENBQUNxQixXQUFXLENBQUNDLE1BQU07TUFDbENDLFNBQVMsRUFBRTtJQUNiLENBQUUsQ0FBQztJQUVIQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDdkIsT0FBTyxDQUFDd0IsUUFBUSxFQUFFLDBCQUEyQixDQUFDO0lBQ2pFeEIsT0FBTyxDQUFDd0IsUUFBUSxHQUFHLENBQUVSLGNBQWMsRUFBRUYsV0FBVyxFQUFFSSxjQUFjLENBQUU7SUFFbEUsS0FBSyxDQUFFbEIsT0FBUSxDQUFDOztJQUVoQjtJQUNBLElBQUksQ0FBQ2MsV0FBVyxHQUFHQSxXQUFXO0VBQ2hDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VXLFdBQVdBLENBQUVDLFFBQVEsRUFBRztJQUN0QixJQUFJLENBQUNaLFdBQVcsQ0FBQ2EsUUFBUSxDQUFFRCxRQUFTLENBQUM7RUFDdkM7QUFDRjtBQUVBcEMsZUFBZSxDQUFDc0MsUUFBUSxDQUFFLGdCQUFnQixFQUFFL0IsY0FBZSxDQUFDIn0=