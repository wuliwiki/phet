// Copyright 2016-2023, University of Colorado Boulder

/**
 * Drawer that contains the equation that corresponds to the functions in the builder.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../../phet-core/js/merge.js';
import Drawer from '../../../../../scenery-phet/js/Drawer.js';
import functionBuilder from '../../../functionBuilder.js';
import FBConstants from '../../FBConstants.js';
import EquationPanel from './EquationPanel.js';
export default class EquationDrawer extends Drawer {
  /**
   * @param {Builder} builder
   * @param {Property.<boolean>} slopeInterceptProperty - display the equation in slope-intercept form?
   * @param {Object} [options]
   */
  constructor(builder, slopeInterceptProperty, options) {
    options = merge({
      open: FBConstants.EQUATION_DRAWER_OPEN,
      handlePosition: 'bottom',
      equationOptions: null,
      // {*} options for EquationPanel

      // improve performance by disabling updates while the drawer is closed
      beforeOpen: () => {
        equationPanel.updateEnabled = true;
      },
      afterClose: () => {
        equationPanel.updateEnabled = false;
      }
    }, FBConstants.DRAWER_OPTIONS, options);
    const equationPanel = new EquationPanel(builder, slopeInterceptProperty, merge({
      size: FBConstants.EQUATION_DRAWER_SIZE,
      updateEnabled: options.open,
      cornerRadius: options.cornerRadius
    }, options.equationOptions));
    super(equationPanel, options);
  }
}
functionBuilder.register('EquationDrawer', EquationDrawer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkRyYXdlciIsImZ1bmN0aW9uQnVpbGRlciIsIkZCQ29uc3RhbnRzIiwiRXF1YXRpb25QYW5lbCIsIkVxdWF0aW9uRHJhd2VyIiwiY29uc3RydWN0b3IiLCJidWlsZGVyIiwic2xvcGVJbnRlcmNlcHRQcm9wZXJ0eSIsIm9wdGlvbnMiLCJvcGVuIiwiRVFVQVRJT05fRFJBV0VSX09QRU4iLCJoYW5kbGVQb3NpdGlvbiIsImVxdWF0aW9uT3B0aW9ucyIsImJlZm9yZU9wZW4iLCJlcXVhdGlvblBhbmVsIiwidXBkYXRlRW5hYmxlZCIsImFmdGVyQ2xvc2UiLCJEUkFXRVJfT1BUSU9OUyIsInNpemUiLCJFUVVBVElPTl9EUkFXRVJfU0laRSIsImNvcm5lclJhZGl1cyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1YXRpb25EcmF3ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRHJhd2VyIHRoYXQgY29udGFpbnMgdGhlIGVxdWF0aW9uIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGZ1bmN0aW9ucyBpbiB0aGUgYnVpbGRlci5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IERyYXdlciBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvRHJhd2VyLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRkJDb25zdGFudHMgZnJvbSAnLi4vLi4vRkJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRXF1YXRpb25QYW5lbCBmcm9tICcuL0VxdWF0aW9uUGFuZWwuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXF1YXRpb25EcmF3ZXIgZXh0ZW5kcyBEcmF3ZXIge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0J1aWxkZXJ9IGJ1aWxkZXJcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gc2xvcGVJbnRlcmNlcHRQcm9wZXJ0eSAtIGRpc3BsYXkgdGhlIGVxdWF0aW9uIGluIHNsb3BlLWludGVyY2VwdCBmb3JtP1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYnVpbGRlciwgc2xvcGVJbnRlcmNlcHRQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgb3BlbjogRkJDb25zdGFudHMuRVFVQVRJT05fRFJBV0VSX09QRU4sXHJcbiAgICAgIGhhbmRsZVBvc2l0aW9uOiAnYm90dG9tJyxcclxuICAgICAgZXF1YXRpb25PcHRpb25zOiBudWxsLCAvLyB7Kn0gb3B0aW9ucyBmb3IgRXF1YXRpb25QYW5lbFxyXG5cclxuICAgICAgLy8gaW1wcm92ZSBwZXJmb3JtYW5jZSBieSBkaXNhYmxpbmcgdXBkYXRlcyB3aGlsZSB0aGUgZHJhd2VyIGlzIGNsb3NlZFxyXG4gICAgICBiZWZvcmVPcGVuOiAoKSA9PiB7IGVxdWF0aW9uUGFuZWwudXBkYXRlRW5hYmxlZCA9IHRydWU7IH0sXHJcbiAgICAgIGFmdGVyQ2xvc2U6ICgpID0+IHsgZXF1YXRpb25QYW5lbC51cGRhdGVFbmFibGVkID0gZmFsc2U7IH1cclxuXHJcbiAgICB9LCBGQkNvbnN0YW50cy5EUkFXRVJfT1BUSU9OUywgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGVxdWF0aW9uUGFuZWwgPSBuZXcgRXF1YXRpb25QYW5lbCggYnVpbGRlciwgc2xvcGVJbnRlcmNlcHRQcm9wZXJ0eSwgbWVyZ2UoIHtcclxuICAgICAgc2l6ZTogRkJDb25zdGFudHMuRVFVQVRJT05fRFJBV0VSX1NJWkUsXHJcbiAgICAgIHVwZGF0ZUVuYWJsZWQ6IG9wdGlvbnMub3BlbixcclxuICAgICAgY29ybmVyUmFkaXVzOiBvcHRpb25zLmNvcm5lclJhZGl1c1xyXG4gICAgfSwgb3B0aW9ucy5lcXVhdGlvbk9wdGlvbnMgKSApO1xyXG5cclxuICAgIHN1cGVyKCBlcXVhdGlvblBhbmVsLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdFcXVhdGlvbkRyYXdlcicsIEVxdWF0aW9uRHJhd2VyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxzQ0FBc0M7QUFDeEQsT0FBT0MsTUFBTSxNQUFNLDBDQUEwQztBQUM3RCxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0MsYUFBYSxNQUFNLG9CQUFvQjtBQUU5QyxlQUFlLE1BQU1DLGNBQWMsU0FBU0osTUFBTSxDQUFDO0VBRWpEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsT0FBTyxFQUFFQyxzQkFBc0IsRUFBRUMsT0FBTyxFQUFHO0lBRXREQSxPQUFPLEdBQUdULEtBQUssQ0FBRTtNQUNmVSxJQUFJLEVBQUVQLFdBQVcsQ0FBQ1Esb0JBQW9CO01BQ3RDQyxjQUFjLEVBQUUsUUFBUTtNQUN4QkMsZUFBZSxFQUFFLElBQUk7TUFBRTs7TUFFdkI7TUFDQUMsVUFBVSxFQUFFQSxDQUFBLEtBQU07UUFBRUMsYUFBYSxDQUFDQyxhQUFhLEdBQUcsSUFBSTtNQUFFLENBQUM7TUFDekRDLFVBQVUsRUFBRUEsQ0FBQSxLQUFNO1FBQUVGLGFBQWEsQ0FBQ0MsYUFBYSxHQUFHLEtBQUs7TUFBRTtJQUUzRCxDQUFDLEVBQUViLFdBQVcsQ0FBQ2UsY0FBYyxFQUFFVCxPQUFRLENBQUM7SUFFeEMsTUFBTU0sYUFBYSxHQUFHLElBQUlYLGFBQWEsQ0FBRUcsT0FBTyxFQUFFQyxzQkFBc0IsRUFBRVIsS0FBSyxDQUFFO01BQy9FbUIsSUFBSSxFQUFFaEIsV0FBVyxDQUFDaUIsb0JBQW9CO01BQ3RDSixhQUFhLEVBQUVQLE9BQU8sQ0FBQ0MsSUFBSTtNQUMzQlcsWUFBWSxFQUFFWixPQUFPLENBQUNZO0lBQ3hCLENBQUMsRUFBRVosT0FBTyxDQUFDSSxlQUFnQixDQUFFLENBQUM7SUFFOUIsS0FBSyxDQUFFRSxhQUFhLEVBQUVOLE9BQVEsQ0FBQztFQUNqQztBQUNGO0FBRUFQLGVBQWUsQ0FBQ29CLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWpCLGNBQWUsQ0FBQyJ9