// Copyright 2016-2023, University of Colorado Boulder

/**
 * The end piece of a builder, which provides some pseudo-3D perspective.
 * It consists of an ellipse with a parallelogram slot that a card passes through.
 * This is factored out to facilitate splitting the builder into foreground and background,
 * so that we can provide the illusion of a card passing through the builder.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Matrix3 from '../../../../../dot/js/Matrix3.js';
import { Shape } from '../../../../../kite/js/imports.js';
import merge from '../../../../../phet-core/js/merge.js';
import { Node, Path } from '../../../../../scenery/js/imports.js';
import functionBuilder from '../../../functionBuilder.js';
export default class BuilderEndNode extends Node {
  /**
   * @param {string} orientation - which way the end faces, 'left'|'right'
   * @param {Object} [options]
   */
  constructor(orientation, options) {
    options = merge({
      // ellipse
      radiusX: 15,
      radiusY: 30,
      fill: 'white',
      stroke: 'black',
      lineWidth: 1,
      // slot
      slotFill: 'white',
      slotStroke: 'black',
      slotLineWidth: 2
    }, options);
    assert && assert(orientation === 'left' || orientation === 'right', `invalid value for orientation: ${orientation}`);

    // ellipse
    const ellipseNode = new Path(Shape.ellipse(0, 0, options.radiusX, options.radiusY, 0), {
      fill: options.fill,
      stroke: options.stroke,
      lineWidth: options.lineWidth
    });

    // constants that determine the shape of the slot
    const SLOT_WIDTH = 0.4 * options.radiusX;
    const SLOT_HEIGHT = 1.5 * options.radiusY;
    const SLOT_Y_OFFSET = 0.025 * SLOT_HEIGHT; // determines perspective of slot

    // shape for a slot that faces left, parallelogram described from upper-left, moving clockwise
    let slotShape = new Shape().moveTo(0, SLOT_Y_OFFSET).lineTo(SLOT_WIDTH, 0).lineTo(SLOT_WIDTH, SLOT_HEIGHT).lineTo(0, SLOT_HEIGHT - SLOT_Y_OFFSET).close();

    // shape for a slot that faces right is a reflection
    if (orientation === 'right') {
      slotShape = slotShape.transformed(Matrix3.scaling(-1, 1));
    }

    // slot node
    const slotNode = new Path(slotShape, {
      fill: options.slotFill,
      stroke: options.slotStroke,
      lineWidth: options.slotLineWidth,
      center: ellipseNode.center
    });
    assert && assert(!options.children, 'decoration not supported');
    options.children = [ellipseNode, slotNode];
    super(options);
  }
}
functionBuilder.register('BuilderEndNode', BuilderEndNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiU2hhcGUiLCJtZXJnZSIsIk5vZGUiLCJQYXRoIiwiZnVuY3Rpb25CdWlsZGVyIiwiQnVpbGRlckVuZE5vZGUiLCJjb25zdHJ1Y3RvciIsIm9yaWVudGF0aW9uIiwib3B0aW9ucyIsInJhZGl1c1giLCJyYWRpdXNZIiwiZmlsbCIsInN0cm9rZSIsImxpbmVXaWR0aCIsInNsb3RGaWxsIiwic2xvdFN0cm9rZSIsInNsb3RMaW5lV2lkdGgiLCJhc3NlcnQiLCJlbGxpcHNlTm9kZSIsImVsbGlwc2UiLCJTTE9UX1dJRFRIIiwiU0xPVF9IRUlHSFQiLCJTTE9UX1lfT0ZGU0VUIiwic2xvdFNoYXBlIiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2UiLCJ0cmFuc2Zvcm1lZCIsInNjYWxpbmciLCJzbG90Tm9kZSIsImNlbnRlciIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCdWlsZGVyRW5kTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgZW5kIHBpZWNlIG9mIGEgYnVpbGRlciwgd2hpY2ggcHJvdmlkZXMgc29tZSBwc2V1ZG8tM0QgcGVyc3BlY3RpdmUuXHJcbiAqIEl0IGNvbnNpc3RzIG9mIGFuIGVsbGlwc2Ugd2l0aCBhIHBhcmFsbGVsb2dyYW0gc2xvdCB0aGF0IGEgY2FyZCBwYXNzZXMgdGhyb3VnaC5cclxuICogVGhpcyBpcyBmYWN0b3JlZCBvdXQgdG8gZmFjaWxpdGF0ZSBzcGxpdHRpbmcgdGhlIGJ1aWxkZXIgaW50byBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kLFxyXG4gKiBzbyB0aGF0IHdlIGNhbiBwcm92aWRlIHRoZSBpbGx1c2lvbiBvZiBhIGNhcmQgcGFzc2luZyB0aHJvdWdoIHRoZSBidWlsZGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNYXRyaXgzIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9NYXRyaXgzLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBmdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vLi4vLi4vZnVuY3Rpb25CdWlsZGVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1aWxkZXJFbmROb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmllbnRhdGlvbiAtIHdoaWNoIHdheSB0aGUgZW5kIGZhY2VzLCAnbGVmdCd8J3JpZ2h0J1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3JpZW50YXRpb24sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcblxyXG4gICAgICAvLyBlbGxpcHNlXHJcbiAgICAgIHJhZGl1c1g6IDE1LFxyXG4gICAgICByYWRpdXNZOiAzMCxcclxuICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDEsXHJcblxyXG4gICAgICAvLyBzbG90XHJcbiAgICAgIHNsb3RGaWxsOiAnd2hpdGUnLFxyXG4gICAgICBzbG90U3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBzbG90TGluZVdpZHRoOiAyXHJcblxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9yaWVudGF0aW9uID09PSAnbGVmdCcgfHwgb3JpZW50YXRpb24gPT09ICdyaWdodCcsXHJcbiAgICAgIGBpbnZhbGlkIHZhbHVlIGZvciBvcmllbnRhdGlvbjogJHtvcmllbnRhdGlvbn1gICk7XHJcblxyXG4gICAgLy8gZWxsaXBzZVxyXG4gICAgY29uc3QgZWxsaXBzZU5vZGUgPSBuZXcgUGF0aCggU2hhcGUuZWxsaXBzZSggMCwgMCwgb3B0aW9ucy5yYWRpdXNYLCBvcHRpb25zLnJhZGl1c1ksIDAgKSwge1xyXG4gICAgICBmaWxsOiBvcHRpb25zLmZpbGwsXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5zdHJva2UsXHJcbiAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5saW5lV2lkdGhcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBjb25zdGFudHMgdGhhdCBkZXRlcm1pbmUgdGhlIHNoYXBlIG9mIHRoZSBzbG90XHJcbiAgICBjb25zdCBTTE9UX1dJRFRIID0gMC40ICogb3B0aW9ucy5yYWRpdXNYO1xyXG4gICAgY29uc3QgU0xPVF9IRUlHSFQgPSAxLjUgKiBvcHRpb25zLnJhZGl1c1k7XHJcbiAgICBjb25zdCBTTE9UX1lfT0ZGU0VUID0gMC4wMjUgKiBTTE9UX0hFSUdIVDsgLy8gZGV0ZXJtaW5lcyBwZXJzcGVjdGl2ZSBvZiBzbG90XHJcblxyXG4gICAgLy8gc2hhcGUgZm9yIGEgc2xvdCB0aGF0IGZhY2VzIGxlZnQsIHBhcmFsbGVsb2dyYW0gZGVzY3JpYmVkIGZyb20gdXBwZXItbGVmdCwgbW92aW5nIGNsb2Nrd2lzZVxyXG4gICAgbGV0IHNsb3RTaGFwZSA9IG5ldyBTaGFwZSgpXHJcbiAgICAgIC5tb3ZlVG8oIDAsIFNMT1RfWV9PRkZTRVQgKVxyXG4gICAgICAubGluZVRvKCBTTE9UX1dJRFRILCAwIClcclxuICAgICAgLmxpbmVUbyggU0xPVF9XSURUSCwgU0xPVF9IRUlHSFQgKVxyXG4gICAgICAubGluZVRvKCAwLCBTTE9UX0hFSUdIVCAtIFNMT1RfWV9PRkZTRVQgKVxyXG4gICAgICAuY2xvc2UoKTtcclxuXHJcbiAgICAvLyBzaGFwZSBmb3IgYSBzbG90IHRoYXQgZmFjZXMgcmlnaHQgaXMgYSByZWZsZWN0aW9uXHJcbiAgICBpZiAoIG9yaWVudGF0aW9uID09PSAncmlnaHQnICkge1xyXG4gICAgICBzbG90U2hhcGUgPSBzbG90U2hhcGUudHJhbnNmb3JtZWQoIE1hdHJpeDMuc2NhbGluZyggLTEsIDEgKSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNsb3Qgbm9kZVxyXG4gICAgY29uc3Qgc2xvdE5vZGUgPSBuZXcgUGF0aCggc2xvdFNoYXBlLCB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuc2xvdEZpbGwsXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5zbG90U3Ryb2tlLFxyXG4gICAgICBsaW5lV2lkdGg6IG9wdGlvbnMuc2xvdExpbmVXaWR0aCxcclxuICAgICAgY2VudGVyOiBlbGxpcHNlTm9kZS5jZW50ZXJcclxuICAgIH0gKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucy5jaGlsZHJlbiwgJ2RlY29yYXRpb24gbm90IHN1cHBvcnRlZCcgKTtcclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGVsbGlwc2VOb2RlLCBzbG90Tm9kZSBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdCdWlsZGVyRW5kTm9kZScsIEJ1aWxkZXJFbmROb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsU0FBU0MsS0FBSyxRQUFRLG1DQUFtQztBQUN6RCxPQUFPQyxLQUFLLE1BQU0sc0NBQXNDO0FBQ3hELFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLHNDQUFzQztBQUNqRSxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBRXpELGVBQWUsTUFBTUMsY0FBYyxTQUFTSCxJQUFJLENBQUM7RUFFL0M7QUFDRjtBQUNBO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUc7SUFFbENBLE9BQU8sR0FBR1AsS0FBSyxDQUFFO01BRWY7TUFDQVEsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsSUFBSSxFQUFFLE9BQU87TUFDYkMsTUFBTSxFQUFFLE9BQU87TUFDZkMsU0FBUyxFQUFFLENBQUM7TUFFWjtNQUNBQyxRQUFRLEVBQUUsT0FBTztNQUNqQkMsVUFBVSxFQUFFLE9BQU87TUFDbkJDLGFBQWEsRUFBRTtJQUVqQixDQUFDLEVBQUVSLE9BQVEsQ0FBQztJQUVaUyxNQUFNLElBQUlBLE1BQU0sQ0FBRVYsV0FBVyxLQUFLLE1BQU0sSUFBSUEsV0FBVyxLQUFLLE9BQU8sRUFDaEUsa0NBQWlDQSxXQUFZLEVBQUUsQ0FBQzs7SUFFbkQ7SUFDQSxNQUFNVyxXQUFXLEdBQUcsSUFBSWYsSUFBSSxDQUFFSCxLQUFLLENBQUNtQixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVgsT0FBTyxDQUFDQyxPQUFPLEVBQUVELE9BQU8sQ0FBQ0UsT0FBTyxFQUFFLENBQUUsQ0FBQyxFQUFFO01BQ3hGQyxJQUFJLEVBQUVILE9BQU8sQ0FBQ0csSUFBSTtNQUNsQkMsTUFBTSxFQUFFSixPQUFPLENBQUNJLE1BQU07TUFDdEJDLFNBQVMsRUFBRUwsT0FBTyxDQUFDSztJQUNyQixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNTyxVQUFVLEdBQUcsR0FBRyxHQUFHWixPQUFPLENBQUNDLE9BQU87SUFDeEMsTUFBTVksV0FBVyxHQUFHLEdBQUcsR0FBR2IsT0FBTyxDQUFDRSxPQUFPO0lBQ3pDLE1BQU1ZLGFBQWEsR0FBRyxLQUFLLEdBQUdELFdBQVcsQ0FBQyxDQUFDOztJQUUzQztJQUNBLElBQUlFLFNBQVMsR0FBRyxJQUFJdkIsS0FBSyxDQUFDLENBQUMsQ0FDeEJ3QixNQUFNLENBQUUsQ0FBQyxFQUFFRixhQUFjLENBQUMsQ0FDMUJHLE1BQU0sQ0FBRUwsVUFBVSxFQUFFLENBQUUsQ0FBQyxDQUN2QkssTUFBTSxDQUFFTCxVQUFVLEVBQUVDLFdBQVksQ0FBQyxDQUNqQ0ksTUFBTSxDQUFFLENBQUMsRUFBRUosV0FBVyxHQUFHQyxhQUFjLENBQUMsQ0FDeENJLEtBQUssQ0FBQyxDQUFDOztJQUVWO0lBQ0EsSUFBS25CLFdBQVcsS0FBSyxPQUFPLEVBQUc7TUFDN0JnQixTQUFTLEdBQUdBLFNBQVMsQ0FBQ0ksV0FBVyxDQUFFNUIsT0FBTyxDQUFDNkIsT0FBTyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQy9EOztJQUVBO0lBQ0EsTUFBTUMsUUFBUSxHQUFHLElBQUkxQixJQUFJLENBQUVvQixTQUFTLEVBQUU7TUFDcENaLElBQUksRUFBRUgsT0FBTyxDQUFDTSxRQUFRO01BQ3RCRixNQUFNLEVBQUVKLE9BQU8sQ0FBQ08sVUFBVTtNQUMxQkYsU0FBUyxFQUFFTCxPQUFPLENBQUNRLGFBQWE7TUFDaENjLE1BQU0sRUFBRVosV0FBVyxDQUFDWTtJQUN0QixDQUFFLENBQUM7SUFFSGIsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ1QsT0FBTyxDQUFDdUIsUUFBUSxFQUFFLDBCQUEyQixDQUFDO0lBQ2pFdkIsT0FBTyxDQUFDdUIsUUFBUSxHQUFHLENBQUViLFdBQVcsRUFBRVcsUUFBUSxDQUFFO0lBRTVDLEtBQUssQ0FBRXJCLE9BQVEsQ0FBQztFQUNsQjtBQUNGO0FBRUFKLGVBQWUsQ0FBQzRCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRTNCLGNBQWUsQ0FBQyJ9