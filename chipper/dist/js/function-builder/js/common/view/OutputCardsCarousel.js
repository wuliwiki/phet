// Copyright 2016-2023, University of Colorado Boulder

/***
 * Carousel for 'output' cards, those cards that have been run through the builder.
 * Extends Carousel by adding numberOfCardsProperty, used to disable 'eraser' button when carousel is empty.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Carousel from '../../../../sun/js/Carousel.js';
import functionBuilder from '../../functionBuilder.js';
export default class OutputCardsCarousel extends Carousel {
  /**
   * @param {CarouselItem[]} carouselItems
   * @param {Object} [options]
   */
  constructor(carouselItems, options) {
    super(carouselItems, options);

    // @private - the containers are the nodes created by the Carousel
    this.containers = this.carouselItemNodes;

    // @public (read-only) {Property.<number>} of cards in the carousel
    this.numberOfCardsProperty = new NumberProperty(getNumberOfCards(this.containers), {
      numberType: 'Integer'
    });

    // update numberOfCardsProperty as cards are added/removed
    const containerListener = () => {
      this.numberOfCardsProperty.set(getNumberOfCards(this.containers));
    };
    this.containers.forEach(container => {
      // unlink unnecessary, instances exist for lifetime of the sim
      container.numberOfItemsProperty.link(numberOfItems => containerListener());
    });
  }

  // @public @override
  reset() {
    this.erase();
    super.reset();
  }

  /**
   * Erases the output carousel by moving all cards to the input carousel immediately, no animation.
   *
   * @public
   */
  erase() {
    this.containers.forEach(container => {
      container.getContents().forEach(cardNode => {
        container.removeNode(cardNode);
        cardNode.moveToInputCarousel();
      });
    });
    assert && assert(getNumberOfCards(this.carouselItemNodes) === 0);
  }
}

/**
 * Gets the number of cards in a set of containers.
 *
 * @param {CardContainer[]} containers
 * @returns {number}
 */
function getNumberOfCards(containers) {
  let numberOfCards = 0;
  containers.forEach(container => {
    numberOfCards += container.numberOfItemsProperty.get();
  });
  return numberOfCards;
}
functionBuilder.register('OutputCardsCarousel', OutputCardsCarousel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIkNhcm91c2VsIiwiZnVuY3Rpb25CdWlsZGVyIiwiT3V0cHV0Q2FyZHNDYXJvdXNlbCIsImNvbnN0cnVjdG9yIiwiY2Fyb3VzZWxJdGVtcyIsIm9wdGlvbnMiLCJjb250YWluZXJzIiwiY2Fyb3VzZWxJdGVtTm9kZXMiLCJudW1iZXJPZkNhcmRzUHJvcGVydHkiLCJnZXROdW1iZXJPZkNhcmRzIiwibnVtYmVyVHlwZSIsImNvbnRhaW5lckxpc3RlbmVyIiwic2V0IiwiZm9yRWFjaCIsImNvbnRhaW5lciIsIm51bWJlck9mSXRlbXNQcm9wZXJ0eSIsImxpbmsiLCJudW1iZXJPZkl0ZW1zIiwicmVzZXQiLCJlcmFzZSIsImdldENvbnRlbnRzIiwiY2FyZE5vZGUiLCJyZW1vdmVOb2RlIiwibW92ZVRvSW5wdXRDYXJvdXNlbCIsImFzc2VydCIsIm51bWJlck9mQ2FyZHMiLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk91dHB1dENhcmRzQ2Fyb3VzZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKioqXHJcbiAqIENhcm91c2VsIGZvciAnb3V0cHV0JyBjYXJkcywgdGhvc2UgY2FyZHMgdGhhdCBoYXZlIGJlZW4gcnVuIHRocm91Z2ggdGhlIGJ1aWxkZXIuXHJcbiAqIEV4dGVuZHMgQ2Fyb3VzZWwgYnkgYWRkaW5nIG51bWJlck9mQ2FyZHNQcm9wZXJ0eSwgdXNlZCB0byBkaXNhYmxlICdlcmFzZXInIGJ1dHRvbiB3aGVuIGNhcm91c2VsIGlzIGVtcHR5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IENhcm91c2VsIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DYXJvdXNlbC5qcyc7XHJcbmltcG9ydCBmdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vLi4vZnVuY3Rpb25CdWlsZGVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE91dHB1dENhcmRzQ2Fyb3VzZWwgZXh0ZW5kcyBDYXJvdXNlbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q2Fyb3VzZWxJdGVtW119IGNhcm91c2VsSXRlbXNcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNhcm91c2VsSXRlbXMsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgc3VwZXIoIGNhcm91c2VsSXRlbXMsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSAtIHRoZSBjb250YWluZXJzIGFyZSB0aGUgbm9kZXMgY3JlYXRlZCBieSB0aGUgQ2Fyb3VzZWxcclxuICAgIHRoaXMuY29udGFpbmVycyA9IHRoaXMuY2Fyb3VzZWxJdGVtTm9kZXM7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSB7UHJvcGVydHkuPG51bWJlcj59IG9mIGNhcmRzIGluIHRoZSBjYXJvdXNlbFxyXG4gICAgdGhpcy5udW1iZXJPZkNhcmRzUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIGdldE51bWJlck9mQ2FyZHMoIHRoaXMuY29udGFpbmVycyApLCB7XHJcbiAgICAgIG51bWJlclR5cGU6ICdJbnRlZ2VyJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHVwZGF0ZSBudW1iZXJPZkNhcmRzUHJvcGVydHkgYXMgY2FyZHMgYXJlIGFkZGVkL3JlbW92ZWRcclxuICAgIGNvbnN0IGNvbnRhaW5lckxpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLm51bWJlck9mQ2FyZHNQcm9wZXJ0eS5zZXQoIGdldE51bWJlck9mQ2FyZHMoIHRoaXMuY29udGFpbmVycyApICk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jb250YWluZXJzLmZvckVhY2goIGNvbnRhaW5lciA9PiB7XHJcblxyXG4gICAgICAvLyB1bmxpbmsgdW5uZWNlc3NhcnksIGluc3RhbmNlcyBleGlzdCBmb3IgbGlmZXRpbWUgb2YgdGhlIHNpbVxyXG4gICAgICBjb250YWluZXIubnVtYmVyT2ZJdGVtc1Byb3BlcnR5LmxpbmsoIG51bWJlck9mSXRlbXMgPT4gY29udGFpbmVyTGlzdGVuZXIoKSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLy8gQHB1YmxpYyBAb3ZlcnJpZGVcclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuZXJhc2UoKTtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFcmFzZXMgdGhlIG91dHB1dCBjYXJvdXNlbCBieSBtb3ZpbmcgYWxsIGNhcmRzIHRvIHRoZSBpbnB1dCBjYXJvdXNlbCBpbW1lZGlhdGVseSwgbm8gYW5pbWF0aW9uLlxyXG4gICAqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGVyYXNlKCkge1xyXG4gICAgdGhpcy5jb250YWluZXJzLmZvckVhY2goIGNvbnRhaW5lciA9PiB7XHJcbiAgICAgIGNvbnRhaW5lci5nZXRDb250ZW50cygpLmZvckVhY2goIGNhcmROb2RlID0+IHtcclxuICAgICAgICBjb250YWluZXIucmVtb3ZlTm9kZSggY2FyZE5vZGUgKTtcclxuICAgICAgICBjYXJkTm9kZS5tb3ZlVG9JbnB1dENhcm91c2VsKCk7XHJcbiAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGdldE51bWJlck9mQ2FyZHMoIHRoaXMuY2Fyb3VzZWxJdGVtTm9kZXMgKSA9PT0gMCApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIG51bWJlciBvZiBjYXJkcyBpbiBhIHNldCBvZiBjb250YWluZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NhcmRDb250YWluZXJbXX0gY29udGFpbmVyc1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZDYXJkcyggY29udGFpbmVycyApIHtcclxuICBsZXQgbnVtYmVyT2ZDYXJkcyA9IDA7XHJcbiAgY29udGFpbmVycy5mb3JFYWNoKCBjb250YWluZXIgPT4ge1xyXG4gICAgbnVtYmVyT2ZDYXJkcyArPSBjb250YWluZXIubnVtYmVyT2ZJdGVtc1Byb3BlcnR5LmdldCgpO1xyXG4gIH0gKTtcclxuICByZXR1cm4gbnVtYmVyT2ZDYXJkcztcclxufVxyXG5cclxuZnVuY3Rpb25CdWlsZGVyLnJlZ2lzdGVyKCAnT3V0cHV0Q2FyZHNDYXJvdXNlbCcsIE91dHB1dENhcmRzQ2Fyb3VzZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLFFBQVEsTUFBTSxnQ0FBZ0M7QUFDckQsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUV0RCxlQUFlLE1BQU1DLG1CQUFtQixTQUFTRixRQUFRLENBQUM7RUFFeEQ7QUFDRjtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsYUFBYSxFQUFFQyxPQUFPLEVBQUc7SUFFcEMsS0FBSyxDQUFFRCxhQUFhLEVBQUVDLE9BQVEsQ0FBQzs7SUFFL0I7SUFDQSxJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJLENBQUNDLGlCQUFpQjs7SUFFeEM7SUFDQSxJQUFJLENBQUNDLHFCQUFxQixHQUFHLElBQUlULGNBQWMsQ0FBRVUsZ0JBQWdCLENBQUUsSUFBSSxDQUFDSCxVQUFXLENBQUMsRUFBRTtNQUNwRkksVUFBVSxFQUFFO0lBQ2QsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsaUJBQWlCLEdBQUdBLENBQUEsS0FBTTtNQUM5QixJQUFJLENBQUNILHFCQUFxQixDQUFDSSxHQUFHLENBQUVILGdCQUFnQixDQUFFLElBQUksQ0FBQ0gsVUFBVyxDQUFFLENBQUM7SUFDdkUsQ0FBQztJQUNELElBQUksQ0FBQ0EsVUFBVSxDQUFDTyxPQUFPLENBQUVDLFNBQVMsSUFBSTtNQUVwQztNQUNBQSxTQUFTLENBQUNDLHFCQUFxQixDQUFDQyxJQUFJLENBQUVDLGFBQWEsSUFBSU4saUJBQWlCLENBQUMsQ0FBRSxDQUFDO0lBQzlFLENBQUUsQ0FBQztFQUNMOztFQUVBO0VBQ0FPLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDWixLQUFLLENBQUNELEtBQUssQ0FBQyxDQUFDO0VBQ2Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNiLFVBQVUsQ0FBQ08sT0FBTyxDQUFFQyxTQUFTLElBQUk7TUFDcENBLFNBQVMsQ0FBQ00sV0FBVyxDQUFDLENBQUMsQ0FBQ1AsT0FBTyxDQUFFUSxRQUFRLElBQUk7UUFDM0NQLFNBQVMsQ0FBQ1EsVUFBVSxDQUFFRCxRQUFTLENBQUM7UUFDaENBLFFBQVEsQ0FBQ0UsbUJBQW1CLENBQUMsQ0FBQztNQUNoQyxDQUFFLENBQUM7SUFDTCxDQUFFLENBQUM7SUFDSEMsTUFBTSxJQUFJQSxNQUFNLENBQUVmLGdCQUFnQixDQUFFLElBQUksQ0FBQ0YsaUJBQWtCLENBQUMsS0FBSyxDQUFFLENBQUM7RUFDdEU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxnQkFBZ0JBLENBQUVILFVBQVUsRUFBRztFQUN0QyxJQUFJbUIsYUFBYSxHQUFHLENBQUM7RUFDckJuQixVQUFVLENBQUNPLE9BQU8sQ0FBRUMsU0FBUyxJQUFJO0lBQy9CVyxhQUFhLElBQUlYLFNBQVMsQ0FBQ0MscUJBQXFCLENBQUNXLEdBQUcsQ0FBQyxDQUFDO0VBQ3hELENBQUUsQ0FBQztFQUNILE9BQU9ELGFBQWE7QUFDdEI7QUFFQXhCLGVBQWUsQ0FBQzBCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRXpCLG1CQUFvQixDQUFDIn0=