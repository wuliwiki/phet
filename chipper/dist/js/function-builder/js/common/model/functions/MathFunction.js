// Copyright 2016-2023, University of Colorado Boulder

/**
 * A mathematical function with (optionally) dynamic operand.
 * Can be applied to either a rational number or a MathFunction[].
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../../axon/js/NumberProperty.js';
import Range from '../../../../../dot/js/Range.js';
import merge from '../../../../../phet-core/js/merge.js';
import functionBuilder from '../../../functionBuilder.js';
import RationalNumber from '../RationalNumber.js';
import AbstractFunction from './AbstractFunction.js';
export default class MathFunction extends AbstractFunction {
  /**
   * @param {string} operator - string representation of the operator
   * @param {function(RationalNumber,number):RationalNumber} applyRationalNumber - implementation of the apply function for rational numbers
   * @param {Object} [options]
   */
  constructor(operator, applyRationalNumber, options) {
    options = merge({
      operand: 1,
      // {number} initial value of operandProperty, an integer
      operandRange: new Range(-3, 3),
      // {Range|null} optional range of operandProperty
      zeroOperandValid: true,
      // {boolean} is zero a valid operand?
      pickerColor: 'white' // {Color|string} color used for NumberPicker UI component
    }, options);
    assert && assert(Number.isInteger(options.operand));
    assert && assert(!options.operandRange || options.operandRange.contains(options.operand));
    assert && assert(!(options.operand === 0 && !options.zeroOperandValid), 'default value zero is not a valid operand');
    super(options);

    // @public (read-only)
    this.operator = operator;
    this.operandRange = options.operandRange;
    this.zeroOperandValid = options.zeroOperandValid;

    // @private
    this.applyRationalNumber = applyRationalNumber;

    // @public
    this.operandProperty = new NumberProperty(options.operand); // {Property.<number>}
    // unlink unnecessary, instance owns this Property
    this.operandProperty.lazyLink(operand => {
      // validate operand
      assert && assert(Number.isInteger(operand));
      assert && assert(!options.operandRange || options.operandRange.contains(operand), `operand out of range: ${operand}`);
      assert && assert(!(operand === 0 && !options.zeroOperandValid), 'zero operand not valid');
    });
    this.viewOptions.pickerColor = options.pickerColor;
  }

  /**
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.operandProperty.reset();
  }

  /**
   * Applies this function.
   *
   * @param {RationalNumber|MathFunction[]} input - rational number or array of MathFunction
   * @returns {RationalNumber|MathFunction[]} output, of same type as input
   * @public
   * @override
   */
  applyFunction(input) {
    if (input instanceof RationalNumber) {
      return this.applyRationalNumber(input, this.operandProperty.get());
    } else if (Array.isArray(input)) {
      return input.concat(this);
    } else {
      throw new Error('unsupported input type');
    }
  }
}
functionBuilder.register('MathFunction', MathFunction);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwibWVyZ2UiLCJmdW5jdGlvbkJ1aWxkZXIiLCJSYXRpb25hbE51bWJlciIsIkFic3RyYWN0RnVuY3Rpb24iLCJNYXRoRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm9wZXJhdG9yIiwiYXBwbHlSYXRpb25hbE51bWJlciIsIm9wdGlvbnMiLCJvcGVyYW5kIiwib3BlcmFuZFJhbmdlIiwiemVyb09wZXJhbmRWYWxpZCIsInBpY2tlckNvbG9yIiwiYXNzZXJ0IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiY29udGFpbnMiLCJvcGVyYW5kUHJvcGVydHkiLCJsYXp5TGluayIsInZpZXdPcHRpb25zIiwicmVzZXQiLCJhcHBseUZ1bmN0aW9uIiwiaW5wdXQiLCJnZXQiLCJBcnJheSIsImlzQXJyYXkiLCJjb25jYXQiLCJFcnJvciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWF0aEZ1bmN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgbWF0aGVtYXRpY2FsIGZ1bmN0aW9uIHdpdGggKG9wdGlvbmFsbHkpIGR5bmFtaWMgb3BlcmFuZC5cclxuICogQ2FuIGJlIGFwcGxpZWQgdG8gZWl0aGVyIGEgcmF0aW9uYWwgbnVtYmVyIG9yIGEgTWF0aEZ1bmN0aW9uW10uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBmdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vLi4vLi4vZnVuY3Rpb25CdWlsZGVyLmpzJztcclxuaW1wb3J0IFJhdGlvbmFsTnVtYmVyIGZyb20gJy4uL1JhdGlvbmFsTnVtYmVyLmpzJztcclxuaW1wb3J0IEFic3RyYWN0RnVuY3Rpb24gZnJvbSAnLi9BYnN0cmFjdEZ1bmN0aW9uLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhGdW5jdGlvbiBleHRlbmRzIEFic3RyYWN0RnVuY3Rpb24ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3BlcmF0b3IgLSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9wZXJhdG9yXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbihSYXRpb25hbE51bWJlcixudW1iZXIpOlJhdGlvbmFsTnVtYmVyfSBhcHBseVJhdGlvbmFsTnVtYmVyIC0gaW1wbGVtZW50YXRpb24gb2YgdGhlIGFwcGx5IGZ1bmN0aW9uIGZvciByYXRpb25hbCBudW1iZXJzXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcGVyYXRvciwgYXBwbHlSYXRpb25hbE51bWJlciwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgb3BlcmFuZDogMSwgLy8ge251bWJlcn0gaW5pdGlhbCB2YWx1ZSBvZiBvcGVyYW5kUHJvcGVydHksIGFuIGludGVnZXJcclxuICAgICAgb3BlcmFuZFJhbmdlOiBuZXcgUmFuZ2UoIC0zLCAzICksIC8vIHtSYW5nZXxudWxsfSBvcHRpb25hbCByYW5nZSBvZiBvcGVyYW5kUHJvcGVydHlcclxuICAgICAgemVyb09wZXJhbmRWYWxpZDogdHJ1ZSwgLy8ge2Jvb2xlYW59IGlzIHplcm8gYSB2YWxpZCBvcGVyYW5kP1xyXG4gICAgICBwaWNrZXJDb2xvcjogJ3doaXRlJyAvLyB7Q29sb3J8c3RyaW5nfSBjb2xvciB1c2VkIGZvciBOdW1iZXJQaWNrZXIgVUkgY29tcG9uZW50XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggTnVtYmVyLmlzSW50ZWdlciggb3B0aW9ucy5vcGVyYW5kICkgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLm9wZXJhbmRSYW5nZSB8fCBvcHRpb25zLm9wZXJhbmRSYW5nZS5jb250YWlucyggb3B0aW9ucy5vcGVyYW5kICkgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICEoIG9wdGlvbnMub3BlcmFuZCA9PT0gMCAmJiAhb3B0aW9ucy56ZXJvT3BlcmFuZFZhbGlkICksXHJcbiAgICAgICdkZWZhdWx0IHZhbHVlIHplcm8gaXMgbm90IGEgdmFsaWQgb3BlcmFuZCcgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSlcclxuICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcclxuICAgIHRoaXMub3BlcmFuZFJhbmdlID0gb3B0aW9ucy5vcGVyYW5kUmFuZ2U7XHJcbiAgICB0aGlzLnplcm9PcGVyYW5kVmFsaWQgPSBvcHRpb25zLnplcm9PcGVyYW5kVmFsaWQ7XHJcblxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuYXBwbHlSYXRpb25hbE51bWJlciA9IGFwcGx5UmF0aW9uYWxOdW1iZXI7XHJcblxyXG4gICAgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5vcGVyYW5kUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMub3BlcmFuZCApOyAvLyB7UHJvcGVydHkuPG51bWJlcj59XHJcbiAgICAvLyB1bmxpbmsgdW5uZWNlc3NhcnksIGluc3RhbmNlIG93bnMgdGhpcyBQcm9wZXJ0eVxyXG4gICAgdGhpcy5vcGVyYW5kUHJvcGVydHkubGF6eUxpbmsoIG9wZXJhbmQgPT4ge1xyXG5cclxuICAgICAgLy8gdmFsaWRhdGUgb3BlcmFuZFxyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBOdW1iZXIuaXNJbnRlZ2VyKCBvcGVyYW5kICkgKTtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMub3BlcmFuZFJhbmdlIHx8IG9wdGlvbnMub3BlcmFuZFJhbmdlLmNvbnRhaW5zKCBvcGVyYW5kICksIGBvcGVyYW5kIG91dCBvZiByYW5nZTogJHtvcGVyYW5kfWAgKTtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggISggb3BlcmFuZCA9PT0gMCAmJiAhb3B0aW9ucy56ZXJvT3BlcmFuZFZhbGlkICksICd6ZXJvIG9wZXJhbmQgbm90IHZhbGlkJyApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMudmlld09wdGlvbnMucGlja2VyQ29sb3IgPSBvcHRpb25zLnBpY2tlckNvbG9yO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICAgIHRoaXMub3BlcmFuZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBcHBsaWVzIHRoaXMgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1JhdGlvbmFsTnVtYmVyfE1hdGhGdW5jdGlvbltdfSBpbnB1dCAtIHJhdGlvbmFsIG51bWJlciBvciBhcnJheSBvZiBNYXRoRnVuY3Rpb25cclxuICAgKiBAcmV0dXJucyB7UmF0aW9uYWxOdW1iZXJ8TWF0aEZ1bmN0aW9uW119IG91dHB1dCwgb2Ygc2FtZSB0eXBlIGFzIGlucHV0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGFwcGx5RnVuY3Rpb24oIGlucHV0ICkge1xyXG4gICAgaWYgKCBpbnB1dCBpbnN0YW5jZW9mIFJhdGlvbmFsTnVtYmVyICkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hcHBseVJhdGlvbmFsTnVtYmVyKCBpbnB1dCwgdGhpcy5vcGVyYW5kUHJvcGVydHkuZ2V0KCkgKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCBpbnB1dCApICkge1xyXG4gICAgICByZXR1cm4gaW5wdXQuY29uY2F0KCB0aGlzICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAndW5zdXBwb3J0ZWQgaW5wdXQgdHlwZScgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uQnVpbGRlci5yZWdpc3RlciggJ01hdGhGdW5jdGlvbicsIE1hdGhGdW5jdGlvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSwwQ0FBMEM7QUFDckUsT0FBT0MsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxPQUFPQyxLQUFLLE1BQU0sc0NBQXNDO0FBQ3hELE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsY0FBYyxNQUFNLHNCQUFzQjtBQUNqRCxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFFcEQsZUFBZSxNQUFNQyxZQUFZLFNBQVNELGdCQUFnQixDQUFDO0VBRXpEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsUUFBUSxFQUFFQyxtQkFBbUIsRUFBRUMsT0FBTyxFQUFHO0lBRXBEQSxPQUFPLEdBQUdSLEtBQUssQ0FBRTtNQUNmUyxPQUFPLEVBQUUsQ0FBQztNQUFFO01BQ1pDLFlBQVksRUFBRSxJQUFJWCxLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBRSxDQUFDO01BQUU7TUFDbENZLGdCQUFnQixFQUFFLElBQUk7TUFBRTtNQUN4QkMsV0FBVyxFQUFFLE9BQU8sQ0FBQztJQUN2QixDQUFDLEVBQUVKLE9BQVEsQ0FBQztJQUVaSyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsTUFBTSxDQUFDQyxTQUFTLENBQUVQLE9B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