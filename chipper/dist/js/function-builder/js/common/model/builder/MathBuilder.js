// Copyright 2016-2023, University of Colorado Boulder

/**
 * Extension of Builder for mathematical functions.
 * Observes changes to function operands and notifies listeners.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import functionBuilder from '../../../functionBuilder.js';
import Builder from './Builder.js';
export default class MathBuilder extends Builder {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    super(options);

    // when any function's operand changes, notify listeners
    this.operandObserver = () => this.functionChangedEmitter.emit();
  }

  /**
   * Puts a function instance into a slot. Start observing its operand.
   *
   * @param {AbstractFunction} functionInstance
   * @param {number} slotNumber
   * @public
   * @override
   */
  addFunctionInstance(functionInstance, slotNumber) {
    super.addFunctionInstance(functionInstance, slotNumber);
    functionInstance.operandProperty.link(this.operandObserver); // unlink handled in removeFunctionInstance
  }

  /**
   * Removes a function instance from a slot. Stop observing its operand.
   *
   * @param {AbstractFunction} functionInstance
   * @param {number} slotNumber
   * @public
   * @override
   */
  removeFunctionInstance(functionInstance, slotNumber) {
    super.removeFunctionInstance(functionInstance, slotNumber);
    functionInstance.operandProperty.unlink(this.operandObserver);
  }
}
functionBuilder.register('MathBuilder', MathBuilder);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmdW5jdGlvbkJ1aWxkZXIiLCJCdWlsZGVyIiwiTWF0aEJ1aWxkZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJvcGVyYW5kT2JzZXJ2ZXIiLCJmdW5jdGlvbkNoYW5nZWRFbWl0dGVyIiwiZW1pdCIsImFkZEZ1bmN0aW9uSW5zdGFuY2UiLCJmdW5jdGlvbkluc3RhbmNlIiwic2xvdE51bWJlciIsIm9wZXJhbmRQcm9wZXJ0eSIsImxpbmsiLCJyZW1vdmVGdW5jdGlvbkluc3RhbmNlIiwidW5saW5rIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYXRoQnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFeHRlbnNpb24gb2YgQnVpbGRlciBmb3IgbWF0aGVtYXRpY2FsIGZ1bmN0aW9ucy5cclxuICogT2JzZXJ2ZXMgY2hhbmdlcyB0byBmdW5jdGlvbiBvcGVyYW5kcyBhbmQgbm90aWZpZXMgbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBmdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vLi4vLi4vZnVuY3Rpb25CdWlsZGVyLmpzJztcclxuaW1wb3J0IEJ1aWxkZXIgZnJvbSAnLi9CdWlsZGVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhCdWlsZGVyIGV4dGVuZHMgQnVpbGRlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHdoZW4gYW55IGZ1bmN0aW9uJ3Mgb3BlcmFuZCBjaGFuZ2VzLCBub3RpZnkgbGlzdGVuZXJzXHJcbiAgICB0aGlzLm9wZXJhbmRPYnNlcnZlciA9ICgpID0+IHRoaXMuZnVuY3Rpb25DaGFuZ2VkRW1pdHRlci5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQdXRzIGEgZnVuY3Rpb24gaW5zdGFuY2UgaW50byBhIHNsb3QuIFN0YXJ0IG9ic2VydmluZyBpdHMgb3BlcmFuZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RGdW5jdGlvbn0gZnVuY3Rpb25JbnN0YW5jZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzbG90TnVtYmVyXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGFkZEZ1bmN0aW9uSW5zdGFuY2UoIGZ1bmN0aW9uSW5zdGFuY2UsIHNsb3ROdW1iZXIgKSB7XHJcbiAgICBzdXBlci5hZGRGdW5jdGlvbkluc3RhbmNlKCBmdW5jdGlvbkluc3RhbmNlLCBzbG90TnVtYmVyICk7XHJcbiAgICBmdW5jdGlvbkluc3RhbmNlLm9wZXJhbmRQcm9wZXJ0eS5saW5rKCB0aGlzLm9wZXJhbmRPYnNlcnZlciApOyAvLyB1bmxpbmsgaGFuZGxlZCBpbiByZW1vdmVGdW5jdGlvbkluc3RhbmNlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIGEgZnVuY3Rpb24gaW5zdGFuY2UgZnJvbSBhIHNsb3QuIFN0b3Agb2JzZXJ2aW5nIGl0cyBvcGVyYW5kLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBYnN0cmFjdEZ1bmN0aW9ufSBmdW5jdGlvbkluc3RhbmNlXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNsb3ROdW1iZXJcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcmVtb3ZlRnVuY3Rpb25JbnN0YW5jZSggZnVuY3Rpb25JbnN0YW5jZSwgc2xvdE51bWJlciApIHtcclxuICAgIHN1cGVyLnJlbW92ZUZ1bmN0aW9uSW5zdGFuY2UoIGZ1bmN0aW9uSW5zdGFuY2UsIHNsb3ROdW1iZXIgKTtcclxuICAgIGZ1bmN0aW9uSW5zdGFuY2Uub3BlcmFuZFByb3BlcnR5LnVubGluayggdGhpcy5vcGVyYW5kT2JzZXJ2ZXIgKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uQnVpbGRlci5yZWdpc3RlciggJ01hdGhCdWlsZGVyJywgTWF0aEJ1aWxkZXIgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBRWxDLGVBQWUsTUFBTUMsV0FBVyxTQUFTRCxPQUFPLENBQUM7RUFFL0M7QUFDRjtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUVyQixLQUFLLENBQUVBLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQSxJQUFJLENBQUNDLGVBQWUsR0FBRyxNQUFNLElBQUksQ0FBQ0Msc0JBQXNCLENBQUNDLElBQUksQ0FBQyxDQUFDO0VBQ2pFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsbUJBQW1CQSxDQUFFQyxnQkFBZ0IsRUFBRUMsVUFBVSxFQUFHO0lBQ2xELEtBQUssQ0FBQ0YsbUJBQW1CLENBQUVDLGdCQUFnQixFQUFFQyxVQUFXLENBQUM7SUFDekRELGdCQUFnQixDQUFDRSxlQUFlLENBQUNDLElBQUksQ0FBRSxJQUFJLENBQUNQLGVBQWdCLENBQUMsQ0FBQyxDQUFDO0VBQ2pFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRVEsc0JBQXNCQSxDQUFFSixnQkFBZ0IsRUFBRUMsVUFBVSxFQUFHO0lBQ3JELEtBQUssQ0FBQ0csc0JBQXNCLENBQUVKLGdCQUFnQixFQUFFQyxVQUFXLENBQUM7SUFDNURELGdCQUFnQixDQUFDRSxlQUFlLENBQUNHLE1BQU0sQ0FBRSxJQUFJLENBQUNULGVBQWdCLENBQUM7RUFDakU7QUFDRjtBQUVBTCxlQUFlLENBQUNlLFFBQVEsQ0FBRSxhQUFhLEVBQUViLFdBQVksQ0FBQyJ9