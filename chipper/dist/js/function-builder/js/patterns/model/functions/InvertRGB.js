// Copyright 2015-2023, University of Colorado Boulder

/**
 * Inverts colors in RGB color space.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Image } from '../../../../../scenery/js/imports.js';
import invertRGB_png from '../../../../mipmaps/functions/invertRGB_png.js';
import FBConstants from '../../../common/FBConstants.js';
import ImageFunction from '../../../common/model/functions/ImageFunction.js';
import functionBuilder from '../../../functionBuilder.js';
import FBCanvasUtils from '../FBCanvasUtils.js';
export default class InvertRGB extends ImageFunction {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = options || {};
    options.name = 'InvertRGB';
    options.fill = 'black';
    const iconNode = new Image(invertRGB_png, {
      scale: FBConstants.PATTERNS_FUNCTION_ICON_SCALE
    });
    super(iconNode, options);
  }

  /**
   * Applies this function.
   *
   * @param {HTMLCanvasElement} inputCanvas
   * @returns {HTMLCanvasElement}
   * @public
   * @override
   */
  applyFunction(inputCanvas) {
    const imageData = FBCanvasUtils.getImageData(inputCanvas);

    // invert colors for non-transparent pixels
    const data = imageData.data;
    for (let i = 0; i < data.length; i += 4) {
      if (data[i + 3] !== 0) {
        data[i] = 255 - data[i];
        data[i + 1] = 255 - data[i + 1];
        data[i + 2] = 255 - data[i + 2];
        data[i + 3] = 255;
      }
    }
    return FBCanvasUtils.createCanvasWithImageData(imageData);
  }
}
functionBuilder.register('InvertRGB', InvertRGB);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZSIsImludmVydFJHQl9wbmciLCJGQkNvbnN0YW50cyIsIkltYWdlRnVuY3Rpb24iLCJmdW5jdGlvbkJ1aWxkZXIiLCJGQkNhbnZhc1V0aWxzIiwiSW52ZXJ0UkdCIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsImZpbGwiLCJpY29uTm9kZSIsInNjYWxlIiwiUEFUVEVSTlNfRlVOQ1RJT05fSUNPTl9TQ0FMRSIsImFwcGx5RnVuY3Rpb24iLCJpbnB1dENhbnZhcyIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsImRhdGEiLCJpIiwibGVuZ3RoIiwiY3JlYXRlQ2FudmFzV2l0aEltYWdlRGF0YSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSW52ZXJ0UkdCLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEludmVydHMgY29sb3JzIGluIFJHQiBjb2xvciBzcGFjZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBpbnZlcnRSR0JfcG5nIGZyb20gJy4uLy4uLy4uLy4uL21pcG1hcHMvZnVuY3Rpb25zL2ludmVydFJHQl9wbmcuanMnO1xyXG5pbXBvcnQgRkJDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vY29tbW9uL0ZCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEltYWdlRnVuY3Rpb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL21vZGVsL2Z1bmN0aW9ucy9JbWFnZUZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRkJDYW52YXNVdGlscyBmcm9tICcuLi9GQkNhbnZhc1V0aWxzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmVydFJHQiBleHRlbmRzIEltYWdlRnVuY3Rpb24ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBvcHRpb25zLm5hbWUgPSAnSW52ZXJ0UkdCJztcclxuICAgIG9wdGlvbnMuZmlsbCA9ICdibGFjayc7XHJcblxyXG4gICAgY29uc3QgaWNvbk5vZGUgPSBuZXcgSW1hZ2UoIGludmVydFJHQl9wbmcsIHsgc2NhbGU6IEZCQ29uc3RhbnRzLlBBVFRFUk5TX0ZVTkNUSU9OX0lDT05fU0NBTEUgfSApO1xyXG5cclxuICAgIHN1cGVyKCBpY29uTm9kZSwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyB0aGlzIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gaW5wdXRDYW52YXNcclxuICAgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGFwcGx5RnVuY3Rpb24oIGlucHV0Q2FudmFzICkge1xyXG5cclxuICAgIGNvbnN0IGltYWdlRGF0YSA9IEZCQ2FudmFzVXRpbHMuZ2V0SW1hZ2VEYXRhKCBpbnB1dENhbnZhcyApO1xyXG5cclxuICAgIC8vIGludmVydCBjb2xvcnMgZm9yIG5vbi10cmFuc3BhcmVudCBwaXhlbHNcclxuICAgIGNvbnN0IGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQgKSB7XHJcbiAgICAgIGlmICggZGF0YVsgaSArIDMgXSAhPT0gMCApIHtcclxuICAgICAgICBkYXRhWyBpIF0gPSAyNTUgLSBkYXRhWyBpIF07XHJcbiAgICAgICAgZGF0YVsgaSArIDEgXSA9IDI1NSAtIGRhdGFbIGkgKyAxIF07XHJcbiAgICAgICAgZGF0YVsgaSArIDIgXSA9IDI1NSAtIGRhdGFbIGkgKyAyIF07XHJcbiAgICAgICAgZGF0YVsgaSArIDMgXSA9IDI1NTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBGQkNhbnZhc1V0aWxzLmNyZWF0ZUNhbnZhc1dpdGhJbWFnZURhdGEoIGltYWdlRGF0YSApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb25CdWlsZGVyLnJlZ2lzdGVyKCAnSW52ZXJ0UkdCJywgSW52ZXJ0UkdCICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxzQ0FBc0M7QUFDNUQsT0FBT0MsYUFBYSxNQUFNLGdEQUFnRDtBQUMxRSxPQUFPQyxXQUFXLE1BQU0sZ0NBQWdDO0FBQ3hELE9BQU9DLGFBQWEsTUFBTSxrREFBa0Q7QUFDNUUsT0FBT0MsZUFBZSxNQUFNLDZCQUE2QjtBQUN6RCxPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBRS9DLGVBQWUsTUFBTUMsU0FBUyxTQUFTSCxhQUFhLENBQUM7RUFFbkQ7QUFDRjtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUVyQkEsT0FBTyxHQUFHQSxPQUFPLElBQUksQ0FBQyxDQUFDO0lBQ3ZCQSxPQUFPLENBQUNDLElBQUksR0FBRyxXQUFXO0lBQzFCRCxPQUFPLENBQUNFLElBQUksR0FBRyxPQUFPO0lBRXRCLE1BQU1DLFFBQVEsR0FBRyxJQUFJWCxLQUFLLENBQUVDLGFBQWEsRUFBRTtNQUFFVyxLQUFLLEVBQUVWLFdBQVcsQ0FBQ1c7SUFBNkIsQ0FBRSxDQUFDO0lBRWhHLEtBQUssQ0FBRUYsUUFBUSxFQUFFSCxPQUFRLENBQUM7RUFDNUI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxhQUFhQSxDQUFFQyxXQUFXLEVBQUc7SUFFM0IsTUFBTUMsU0FBUyxHQUFHWCxhQUFhLENBQUNZLFlBQVksQ0FBRUYsV0FBWSxDQUFDOztJQUUzRDtJQUNBLE1BQU1HLElBQUksR0FBR0YsU0FBUyxDQUFDRSxJQUFJO0lBQzNCLEtBQU0sSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxJQUFJLENBQUNFLE1BQU0sRUFBRUQsQ0FBQyxJQUFJLENBQUMsRUFBRztNQUN6QyxJQUFLRCxJQUFJLENBQUVDLENBQUMsR0FBRyxDQUFDLENBQUUsS0FBSyxDQUFDLEVBQUc7UUFDekJELElBQUksQ0FBRUMsQ0FBQyxDQUFFLEdBQUcsR0FBRyxHQUFHRCxJQUFJLENBQUVDLENBQUMsQ0FBRTtRQUMzQkQsSUFBSSxDQUFFQyxDQUFDLEdBQUcsQ0FBQyxDQUFFLEdBQUcsR0FBRyxHQUFHRCxJQUFJLENBQUVDLENBQUMsR0FBRyxDQUFDLENBQUU7UUFDbkNELElBQUksQ0FBRUMsQ0FBQyxHQUFHLENBQUMsQ0FBRSxHQUFHLEdBQUcsR0FBR0QsSUFBSSxDQUFFQyxDQUFDLEdBQUcsQ0FBQyxDQUFFO1FBQ25DRCxJQUFJLENBQUVDLENBQUMsR0FBRyxDQUFDLENBQUUsR0FBRyxHQUFHO01BQ3JCO0lBQ0Y7SUFFQSxPQUFPZCxhQUFhLENBQUNnQix5QkFBeUIsQ0FBRUwsU0FBVSxDQUFDO0VBQzdEO0FBQ0Y7QUFFQVosZUFBZSxDQUFDa0IsUUFBUSxDQUFFLFdBQVcsRUFBRWhCLFNBQVUsQ0FBQyJ9