// Copyright 2015-2023, University of Colorado Boulder

/**
 * Reflects about the y-axis and rotates 90 degrees clockwise.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../../phet-core/js/merge.js';
import functionBuilder from '../../../functionBuilder.js';
import FunctionBuilderStrings from '../../../FunctionBuilderStrings.js';
import FBCanvasUtils from '../FBCanvasUtils.js';
import MysteryImageFunction from './MysteryImageFunction.js';
export default class MysteryB extends MysteryImageFunction {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    super(FunctionBuilderStrings.mysteryBStringProperty, merge({
      name: 'MysteryB',
      fill: 'rgb( 249, 144, 99 )'
    }, options));
  }

  /**
   * Applies this function.
   *
   * @param {HTMLCanvasElement} inputCanvas
   * @returns {HTMLCanvasElement}
   * @public
   * @override
   */
  applyFunction(inputCanvas) {
    // Create the output canvas
    const outputCanvas = FBCanvasUtils.createCanvas(inputCanvas.height, inputCanvas.width); // swap width and height!
    const context = outputCanvas.getContext('2d');

    // Reflect about the y axis and rotate 90 degrees
    context.translate(outputCanvas.width, outputCanvas.height);
    context.rotate(Math.PI / 2);
    context.scale(-1, 1);

    // Draw the input canvas to the output canvas
    context.drawImage(inputCanvas, 0, 0);
    return outputCanvas;
  }
}
functionBuilder.register('MysteryB', MysteryB);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsImZ1bmN0aW9uQnVpbGRlciIsIkZ1bmN0aW9uQnVpbGRlclN0cmluZ3MiLCJGQkNhbnZhc1V0aWxzIiwiTXlzdGVyeUltYWdlRnVuY3Rpb24iLCJNeXN0ZXJ5QiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm15c3RlcnlCU3RyaW5nUHJvcGVydHkiLCJuYW1lIiwiZmlsbCIsImFwcGx5RnVuY3Rpb24iLCJpbnB1dENhbnZhcyIsIm91dHB1dENhbnZhcyIsImNyZWF0ZUNhbnZhcyIsImhlaWdodCIsIndpZHRoIiwiY29udGV4dCIsImdldENvbnRleHQiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJNYXRoIiwiUEkiLCJzY2FsZSIsImRyYXdJbWFnZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTXlzdGVyeUIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmVmbGVjdHMgYWJvdXQgdGhlIHktYXhpcyBhbmQgcm90YXRlcyA5MCBkZWdyZWVzIGNsb2Nrd2lzZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRnVuY3Rpb25CdWlsZGVyU3RyaW5ncyBmcm9tICcuLi8uLi8uLi9GdW5jdGlvbkJ1aWxkZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IEZCQ2FudmFzVXRpbHMgZnJvbSAnLi4vRkJDYW52YXNVdGlscy5qcyc7XHJcbmltcG9ydCBNeXN0ZXJ5SW1hZ2VGdW5jdGlvbiBmcm9tICcuL015c3RlcnlJbWFnZUZ1bmN0aW9uLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15c3RlcnlCIGV4dGVuZHMgTXlzdGVyeUltYWdlRnVuY3Rpb24ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggRnVuY3Rpb25CdWlsZGVyU3RyaW5ncy5teXN0ZXJ5QlN0cmluZ1Byb3BlcnR5LCBtZXJnZSgge1xyXG4gICAgICBuYW1lOiAnTXlzdGVyeUInLFxyXG4gICAgICBmaWxsOiAncmdiKCAyNDksIDE0NCwgOTkgKSdcclxuICAgIH0sIG9wdGlvbnMgKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyB0aGlzIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gaW5wdXRDYW52YXNcclxuICAgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGFwcGx5RnVuY3Rpb24oIGlucHV0Q2FudmFzICkge1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgb3V0cHV0IGNhbnZhc1xyXG4gICAgY29uc3Qgb3V0cHV0Q2FudmFzID0gRkJDYW52YXNVdGlscy5jcmVhdGVDYW52YXMoIGlucHV0Q2FudmFzLmhlaWdodCwgaW5wdXRDYW52YXMud2lkdGggKTsgLy8gc3dhcCB3aWR0aCBhbmQgaGVpZ2h0IVxyXG4gICAgY29uc3QgY29udGV4dCA9IG91dHB1dENhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XHJcblxyXG4gICAgLy8gUmVmbGVjdCBhYm91dCB0aGUgeSBheGlzIGFuZCByb3RhdGUgOTAgZGVncmVlc1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUoIG91dHB1dENhbnZhcy53aWR0aCwgb3V0cHV0Q2FudmFzLmhlaWdodCApO1xyXG4gICAgY29udGV4dC5yb3RhdGUoIE1hdGguUEkgLyAyICk7XHJcbiAgICBjb250ZXh0LnNjYWxlKCAtMSwgMSApO1xyXG5cclxuICAgIC8vIERyYXcgdGhlIGlucHV0IGNhbnZhcyB0byB0aGUgb3V0cHV0IGNhbnZhc1xyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UoIGlucHV0Q2FudmFzLCAwLCAwICk7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dENhbnZhcztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uQnVpbGRlci5yZWdpc3RlciggJ015c3RlcnlCJywgTXlzdGVyeUIgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLHNCQUFzQixNQUFNLG9DQUFvQztBQUN2RSxPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLG9CQUFvQixNQUFNLDJCQUEyQjtBQUU1RCxlQUFlLE1BQU1DLFFBQVEsU0FBU0Qsb0JBQW9CLENBQUM7RUFFekQ7QUFDRjtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUNyQixLQUFLLENBQUVMLHNCQUFzQixDQUFDTSxzQkFBc0IsRUFBRVIsS0FBSyxDQUFFO01BQzNEUyxJQUFJLEVBQUUsVUFBVTtNQUNoQkMsSUFBSSxFQUFFO0lBQ1IsQ0FBQyxFQUFFSCxPQUFRLENBQUUsQ0FBQztFQUNoQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLGFBQWFBLENBQUVDLFdBQVcsRUFBRztJQUUzQjtJQUNBLE1BQU1DLFlBQVksR0FBR1YsYUFBYSxDQUFDVyxZQUFZLENBQUVGLFdBQVcsQ0FBQ0csTUFBTSxFQUFFSCxXQUFXLENBQUNJLEtBQU0sQ0FBQyxDQUFDLENBQUM7SUFDMUYsTUFBTUMsT0FBTyxHQUFHSixZQUFZLENBQUNLLFVBQVUsQ0FBRSxJQUFLLENBQUM7O0lBRS9DO0lBQ0FELE9BQU8sQ0FBQ0UsU0FBUyxDQUFFTixZQUFZLENBQUNHLEtBQUssRUFBRUgsWUFBWSxDQUFDRSxNQUFPLENBQUM7SUFDNURFLE9BQU8sQ0FBQ0csTUFBTSxDQUFFQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDN0JMLE9BQU8sQ0FBQ00sS0FBSyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQzs7SUFFdEI7SUFDQU4sT0FBTyxDQUFDTyxTQUFTLENBQUVaLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0lBRXRDLE9BQU9DLFlBQVk7RUFDckI7QUFDRjtBQUVBWixlQUFlLENBQUN3QixRQUFRLENBQUUsVUFBVSxFQUFFcEIsUUFBUyxDQUFDIn0=