// Copyright 2015-2023, University of Colorado Boulder

/**
 * Rotates 180 degrees.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Image } from '../../../../../scenery/js/imports.js';
import rotate180_png from '../../../../mipmaps/functions/rotate180_png.js';
import FBConstants from '../../../common/FBConstants.js';
import ImageFunction from '../../../common/model/functions/ImageFunction.js';
import functionBuilder from '../../../functionBuilder.js';
import FBCanvasUtils from '../FBCanvasUtils.js';
export default class Rotate180 extends ImageFunction {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = options || {};
    options.name = 'Rotate180';
    options.fill = 'rgb( 147, 231, 128 )';
    const iconNode = new Image(rotate180_png, {
      scale: FBConstants.PATTERNS_FUNCTION_ICON_SCALE
    });
    super(iconNode, options);
  }

  /**
   * Applies this function.
   *
   * @param {HTMLCanvasElement} inputCanvas
   * @returns {HTMLCanvasElement}
   * @public
   * @override
   */
  applyFunction(inputCanvas) {
    // Create the output canvas
    const outputCanvas = FBCanvasUtils.createCanvas(inputCanvas.width, inputCanvas.height);
    const context = outputCanvas.getContext('2d');

    // Rotate 180 degrees
    context.translate(outputCanvas.width, outputCanvas.height);
    context.rotate(Math.PI);

    // Draw the input canvas to the output canvas
    context.drawImage(inputCanvas, 0, 0);
    return outputCanvas;
  }
}
functionBuilder.register('Rotate180', Rotate180);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZSIsInJvdGF0ZTE4MF9wbmciLCJGQkNvbnN0YW50cyIsIkltYWdlRnVuY3Rpb24iLCJmdW5jdGlvbkJ1aWxkZXIiLCJGQkNhbnZhc1V0aWxzIiwiUm90YXRlMTgwIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsImZpbGwiLCJpY29uTm9kZSIsInNjYWxlIiwiUEFUVEVSTlNfRlVOQ1RJT05fSUNPTl9TQ0FMRSIsImFwcGx5RnVuY3Rpb24iLCJpbnB1dENhbnZhcyIsIm91dHB1dENhbnZhcyIsImNyZWF0ZUNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGV4dCIsImdldENvbnRleHQiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJNYXRoIiwiUEkiLCJkcmF3SW1hZ2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJvdGF0ZTE4MC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSb3RhdGVzIDE4MCBkZWdyZWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHJvdGF0ZTE4MF9wbmcgZnJvbSAnLi4vLi4vLi4vLi4vbWlwbWFwcy9mdW5jdGlvbnMvcm90YXRlMTgwX3BuZy5qcyc7XHJcbmltcG9ydCBGQkNvbnN0YW50cyBmcm9tICcuLi8uLi8uLi9jb21tb24vRkJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgSW1hZ2VGdW5jdGlvbiBmcm9tICcuLi8uLi8uLi9jb21tb24vbW9kZWwvZnVuY3Rpb25zL0ltYWdlRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgZnVuY3Rpb25CdWlsZGVyIGZyb20gJy4uLy4uLy4uL2Z1bmN0aW9uQnVpbGRlci5qcyc7XHJcbmltcG9ydCBGQkNhbnZhc1V0aWxzIGZyb20gJy4uL0ZCQ2FudmFzVXRpbHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm90YXRlMTgwIGV4dGVuZHMgSW1hZ2VGdW5jdGlvbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIG9wdGlvbnMubmFtZSA9ICdSb3RhdGUxODAnO1xyXG4gICAgb3B0aW9ucy5maWxsID0gJ3JnYiggMTQ3LCAyMzEsIDEyOCApJztcclxuXHJcbiAgICBjb25zdCBpY29uTm9kZSA9IG5ldyBJbWFnZSggcm90YXRlMTgwX3BuZywgeyBzY2FsZTogRkJDb25zdGFudHMuUEFUVEVSTlNfRlVOQ1RJT05fSUNPTl9TQ0FMRSB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGljb25Ob2RlLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBcHBsaWVzIHRoaXMgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBpbnB1dENhbnZhc1xyXG4gICAqIEByZXR1cm5zIHtIVE1MQ2FudmFzRWxlbWVudH1cclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgYXBwbHlGdW5jdGlvbiggaW5wdXRDYW52YXMgKSB7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBvdXRwdXQgY2FudmFzXHJcbiAgICBjb25zdCBvdXRwdXRDYW52YXMgPSBGQkNhbnZhc1V0aWxzLmNyZWF0ZUNhbnZhcyggaW5wdXRDYW52YXMud2lkdGgsIGlucHV0Q2FudmFzLmhlaWdodCApO1xyXG4gICAgY29uc3QgY29udGV4dCA9IG91dHB1dENhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XHJcblxyXG4gICAgLy8gUm90YXRlIDE4MCBkZWdyZWVzXHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSggb3V0cHV0Q2FudmFzLndpZHRoLCBvdXRwdXRDYW52YXMuaGVpZ2h0ICk7XHJcbiAgICBjb250ZXh0LnJvdGF0ZSggTWF0aC5QSSApO1xyXG5cclxuICAgIC8vIERyYXcgdGhlIGlucHV0IGNhbnZhcyB0byB0aGUgb3V0cHV0IGNhbnZhc1xyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UoIGlucHV0Q2FudmFzLCAwLCAwICk7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dENhbnZhcztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uQnVpbGRlci5yZWdpc3RlciggJ1JvdGF0ZTE4MCcsIFJvdGF0ZTE4MCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsc0NBQXNDO0FBQzVELE9BQU9DLGFBQWEsTUFBTSxnREFBZ0Q7QUFDMUUsT0FBT0MsV0FBVyxNQUFNLGdDQUFnQztBQUN4RCxPQUFPQyxhQUFhLE1BQU0sa0RBQWtEO0FBQzVFLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUUvQyxlQUFlLE1BQU1DLFNBQVMsU0FBU0gsYUFBYSxDQUFDO0VBRW5EO0FBQ0Y7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckJBLE9BQU8sR0FBR0EsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUN2QkEsT0FBTyxDQUFDQyxJQUFJLEdBQUcsV0FBVztJQUMxQkQsT0FBTyxDQUFDRSxJQUFJLEdBQUcsc0JBQXNCO0lBRXJDLE1BQU1DLFFBQVEsR0FBRyxJQUFJWCxLQUFLLENBQUVDLGFBQWEsRUFBRTtNQUFFVyxLQUFLLEVBQUVWLFdBQVcsQ0FBQ1c7SUFBNkIsQ0FBRSxDQUFDO0lBRWhHLEtBQUssQ0FBRUYsUUFBUSxFQUFFSCxPQUFRLENBQUM7RUFDNUI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxhQUFhQSxDQUFFQyxXQUFXLEVBQUc7SUFFM0I7SUFDQSxNQUFNQyxZQUFZLEdBQUdYLGFBQWEsQ0FBQ1ksWUFBWSxDQUFFRixXQUFXLENBQUNHLEtBQUssRUFBRUgsV0FBVyxDQUFDSSxNQUFPLENBQUM7SUFDeEYsTUFBTUMsT0FBTyxHQUFHSixZQUFZLENBQUNLLFVBQVUsQ0FBRSxJQUFLLENBQUM7O0lBRS9DO0lBQ0FELE9BQU8sQ0FBQ0UsU0FBUyxDQUFFTixZQUFZLENBQUNFLEtBQUssRUFBRUYsWUFBWSxDQUFDRyxNQUFPLENBQUM7SUFDNURDLE9BQU8sQ0FBQ0csTUFBTSxDQUFFQyxJQUFJLENBQUNDLEVBQUcsQ0FBQzs7SUFFekI7SUFDQUwsT0FBTyxDQUFDTSxTQUFTLENBQUVYLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0lBRXRDLE9BQU9DLFlBQVk7RUFDckI7QUFDRjtBQUVBWixlQUFlLENBQUN1QixRQUFRLENBQUUsV0FBVyxFQUFFckIsU0FBVSxDQUFDIn0=