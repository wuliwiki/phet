// Copyright 2015-2023, University of Colorado Boulder

/**
 * Shrinks an image.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../../dot/js/Utils.js';
import merge from '../../../../../phet-core/js/merge.js';
import { Image } from '../../../../../scenery/js/imports.js';
import shrink_png from '../../../../mipmaps/functions/shrink_png.js';
import FBConstants from '../../../common/FBConstants.js';
import ImageFunction from '../../../common/model/functions/ImageFunction.js';
import functionBuilder from '../../../functionBuilder.js';
import FBCanvasUtils from '../FBCanvasUtils.js';
export default class Shrink extends ImageFunction {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      scale: 0.75
    }, options);
    options.name = 'Shrink';
    options.fill = 'rgb( 246, 164, 255 )';
    assert && assert(options.scale > 0 && options.scale < 1);
    const iconNode = new Image(shrink_png, {
      scale: FBConstants.PATTERNS_FUNCTION_ICON_SCALE
    });
    super(iconNode, options);
    this.scale = options.scale; // @private
  }

  /**
   * Applies this function.
   *
   * @param {HTMLCanvasElement} inputCanvas
   * @returns {HTMLCanvasElement}
   * @public
   * @override
   */
  applyFunction(inputCanvas) {
    assert && assert(this.scale !== undefined, 'apply was called before constructor completed');

    // Constrain shrinking to even integer dimensions, to prevent anti-aliasing artifacts.
    // See https://github.com/phetsims/function-builder-basics/issues/18
    const width = toEvenInteger(this.scale * inputCanvas.width);
    const height = toEvenInteger(this.scale * inputCanvas.height);

    // scale by drawing into a smaller canvas
    const outputCanvas = FBCanvasUtils.createCanvas(width, height);
    outputCanvas.getContext('2d').drawImage(inputCanvas, 0, 0, outputCanvas.width, outputCanvas.height);
    return outputCanvas;
  }
}

/**
 * Converts a value to an even integer.
 * @param {number} value
 * @returns {number}
 */
function toEvenInteger(value) {
  let newValue = Utils.roundSymmetric(value);
  if (newValue % 2 !== 0) {
    newValue++;
  }
  return newValue;
}
functionBuilder.register('Shrink', Shrink);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIm1lcmdlIiwiSW1hZ2UiLCJzaHJpbmtfcG5nIiwiRkJDb25zdGFudHMiLCJJbWFnZUZ1bmN0aW9uIiwiZnVuY3Rpb25CdWlsZGVyIiwiRkJDYW52YXNVdGlscyIsIlNocmluayIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInNjYWxlIiwibmFtZSIsImZpbGwiLCJhc3NlcnQiLCJpY29uTm9kZSIsIlBBVFRFUk5TX0ZVTkNUSU9OX0lDT05fU0NBTEUiLCJhcHBseUZ1bmN0aW9uIiwiaW5wdXRDYW52YXMiLCJ1bmRlZmluZWQiLCJ3aWR0aCIsInRvRXZlbkludGVnZXIiLCJoZWlnaHQiLCJvdXRwdXRDYW52YXMiLCJjcmVhdGVDYW52YXMiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwidmFsdWUiLCJuZXdWYWx1ZSIsInJvdW5kU3ltbWV0cmljIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTaHJpbmsuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2hyaW5rcyBhbiBpbWFnZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHNocmlua19wbmcgZnJvbSAnLi4vLi4vLi4vLi4vbWlwbWFwcy9mdW5jdGlvbnMvc2hyaW5rX3BuZy5qcyc7XHJcbmltcG9ydCBGQkNvbnN0YW50cyBmcm9tICcuLi8uLi8uLi9jb21tb24vRkJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgSW1hZ2VGdW5jdGlvbiBmcm9tICcuLi8uLi8uLi9jb21tb24vbW9kZWwvZnVuY3Rpb25zL0ltYWdlRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgZnVuY3Rpb25CdWlsZGVyIGZyb20gJy4uLy4uLy4uL2Z1bmN0aW9uQnVpbGRlci5qcyc7XHJcbmltcG9ydCBGQkNhbnZhc1V0aWxzIGZyb20gJy4uL0ZCQ2FudmFzVXRpbHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hyaW5rIGV4dGVuZHMgSW1hZ2VGdW5jdGlvbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgc2NhbGU6IDAuNzVcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuICAgIG9wdGlvbnMubmFtZSA9ICdTaHJpbmsnO1xyXG4gICAgb3B0aW9ucy5maWxsID0gJ3JnYiggMjQ2LCAxNjQsIDI1NSApJztcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLnNjYWxlID4gMCAmJiBvcHRpb25zLnNjYWxlIDwgMSApO1xyXG5cclxuICAgIGNvbnN0IGljb25Ob2RlID0gbmV3IEltYWdlKCBzaHJpbmtfcG5nLCB7IHNjYWxlOiBGQkNvbnN0YW50cy5QQVRURVJOU19GVU5DVElPTl9JQ09OX1NDQUxFIH0gKTtcclxuXHJcbiAgICBzdXBlciggaWNvbk5vZGUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnNjYWxlID0gb3B0aW9ucy5zY2FsZTsgLy8gQHByaXZhdGVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGxpZXMgdGhpcyBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGlucHV0Q2FudmFzXHJcbiAgICogQHJldHVybnMge0hUTUxDYW52YXNFbGVtZW50fVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBhcHBseUZ1bmN0aW9uKCBpbnB1dENhbnZhcyApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuc2NhbGUgIT09IHVuZGVmaW5lZCwgJ2FwcGx5IHdhcyBjYWxsZWQgYmVmb3JlIGNvbnN0cnVjdG9yIGNvbXBsZXRlZCcgKTtcclxuXHJcbiAgICAvLyBDb25zdHJhaW4gc2hyaW5raW5nIHRvIGV2ZW4gaW50ZWdlciBkaW1lbnNpb25zLCB0byBwcmV2ZW50IGFudGktYWxpYXNpbmcgYXJ0aWZhY3RzLlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9mdW5jdGlvbi1idWlsZGVyLWJhc2ljcy9pc3N1ZXMvMThcclxuICAgIGNvbnN0IHdpZHRoID0gdG9FdmVuSW50ZWdlciggdGhpcy5zY2FsZSAqIGlucHV0Q2FudmFzLndpZHRoICk7XHJcbiAgICBjb25zdCBoZWlnaHQgPSB0b0V2ZW5JbnRlZ2VyKCB0aGlzLnNjYWxlICogaW5wdXRDYW52YXMuaGVpZ2h0ICk7XHJcblxyXG4gICAgLy8gc2NhbGUgYnkgZHJhd2luZyBpbnRvIGEgc21hbGxlciBjYW52YXNcclxuICAgIGNvbnN0IG91dHB1dENhbnZhcyA9IEZCQ2FudmFzVXRpbHMuY3JlYXRlQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICk7XHJcbiAgICBvdXRwdXRDYW52YXMuZ2V0Q29udGV4dCggJzJkJyApLmRyYXdJbWFnZSggaW5wdXRDYW52YXMsIDAsIDAsIG91dHB1dENhbnZhcy53aWR0aCwgb3V0cHV0Q2FudmFzLmhlaWdodCApO1xyXG4gICAgcmV0dXJuIG91dHB1dENhbnZhcztcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHZhbHVlIHRvIGFuIGV2ZW4gaW50ZWdlci5cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiB0b0V2ZW5JbnRlZ2VyKCB2YWx1ZSApIHtcclxuICBsZXQgbmV3VmFsdWUgPSBVdGlscy5yb3VuZFN5bW1ldHJpYyggdmFsdWUgKTtcclxuICBpZiAoIG5ld1ZhbHVlICUgMiAhPT0gMCApIHtcclxuICAgIG5ld1ZhbHVlKys7XHJcbiAgfVxyXG4gIHJldHVybiBuZXdWYWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb25CdWlsZGVyLnJlZ2lzdGVyKCAnU2hyaW5rJywgU2hyaW5rICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxTQUFTQyxLQUFLLFFBQVEsc0NBQXNDO0FBQzVELE9BQU9DLFVBQVUsTUFBTSw2Q0FBNkM7QUFDcEUsT0FBT0MsV0FBVyxNQUFNLGdDQUFnQztBQUN4RCxPQUFPQyxhQUFhLE1BQU0sa0RBQWtEO0FBQzVFLE9BQU9DLGVBQWUsTUFBTSw2QkFBNkI7QUFDekQsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUUvQyxlQUFlLE1BQU1DLE1BQU0sU0FBU0gsYUFBYSxDQUFDO0VBRWhEO0FBQ0Y7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckJBLE9BQU8sR0FBR1QsS0FBSyxDQUFFO01BQ2ZVLEtBQUssRUFBRTtJQUNULENBQUMsRUFBRUQsT0FBUSxDQUFDO0lBQ1pBLE9BQU8sQ0FBQ0UsSUFBSSxHQUFHLFFBQVE7SUFDdkJGLE9BQU8sQ0FBQ0csSUFBSSxHQUFHLHNCQUFzQjtJQUVyQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVKLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHLENBQUMsSUFBSUQsT0FBTyxDQUFDQyxLQUFLLEdBQUcsQ0FBRSxDQUFDO0lBRTFELE1BQU1JLFFBQVEsR0FBRyxJQUFJYixLQUFLLENBQUVDLFVBQVUsRUFBRTtNQUFFUSxLQUFLLEVBQUVQLFdBQVcsQ0FBQ1k7SUFBNkIsQ0FBRSxDQUFDO0lBRTdGLEtBQUssQ0FBRUQsUUFBUSxFQUFFTCxPQUFRLENBQUM7SUFFMUIsSUFBSSxDQUFDQyxLQUFLLEdBQUdELE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDOUI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxhQUFhQSxDQUFFQyxXQUFXLEVBQUc7SUFDM0JKLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0gsS0FBSyxLQUFLUSxTQUFTLEVBQUUsK0NBQWdELENBQUM7O0lBRTdGO0lBQ0E7SUFDQSxNQUFNQyxLQUFLLEdBQUdDLGFBQWEsQ0FBRSxJQUFJLENBQUNWLEtBQUssR0FBR08sV0FBVyxDQUFDRSxLQUFNLENBQUM7SUFDN0QsTUFBTUUsTUFBTSxHQUFHRCxhQUFhLENBQUUsSUFBSSxDQUFDVixLQUFLLEdBQUdPLFdBQVcsQ0FBQ0ksTUFBTyxDQUFDOztJQUUvRDtJQUNBLE1BQU1DLFlBQVksR0FBR2hCLGFBQWEsQ0FBQ2lCLFlBQVksQ0FBRUosS0FBSyxFQUFFRSxNQUFPLENBQUM7SUFDaEVDLFlBQVksQ0FBQ0UsVUFBVSxDQUFFLElBQUssQ0FBQyxDQUFDQyxTQUFTLENBQUVSLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFSyxZQUFZLENBQUNILEtBQUssRUFBRUcsWUFBWSxDQUFDRCxNQUFPLENBQUM7SUFDdkcsT0FBT0MsWUFBWTtFQUNyQjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRixhQUFhQSxDQUFFTSxLQUFLLEVBQUc7RUFDOUIsSUFBSUMsUUFBUSxHQUFHNUIsS0FBSyxDQUFDNkIsY0FBYyxDQUFFRixLQUFNLENBQUM7RUFDNUMsSUFBS0MsUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUc7SUFDeEJBLFFBQVEsRUFBRTtFQUNaO0VBQ0EsT0FBT0EsUUFBUTtBQUNqQjtBQUVBdEIsZUFBZSxDQUFDd0IsUUFBUSxDQUFFLFFBQVEsRUFBRXRCLE1BQU8sQ0FBQyJ9