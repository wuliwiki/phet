// Copyright 2015-2023, University of Colorado Boulder

/**
 * Divides the image into 4 quadrants and shifts them clockwise.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../../phet-core/js/merge.js';
import functionBuilder from '../../../functionBuilder.js';
import FunctionBuilderStrings from '../../../FunctionBuilderStrings.js';
import FBCanvasUtils from '../FBCanvasUtils.js';
import MysteryImageFunction from './MysteryImageFunction.js';
export default class MysteryC extends MysteryImageFunction {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    super(FunctionBuilderStrings.mysteryCStringProperty, merge({
      name: 'MysteryC',
      fill: 'rgb( 222, 186, 247 )'
    }, options));
  }

  /**
   * Applies this function.
   *
   * @param {HTMLCanvasElement} inputCanvas
   * @returns {HTMLCanvasElement}
   * @public
   * @override
   */
  applyFunction(inputCanvas) {
    // Create the output canvas
    const outputCanvas = FBCanvasUtils.createCanvas(inputCanvas.width, inputCanvas.height);
    const context = outputCanvas.getContext('2d');

    // Divide into 4 quadrants and shift clockwise

    // upper-left to upper-right
    context.drawImage(inputCanvas, 0, 0, inputCanvas.width / 2, inputCanvas.height / 2, inputCanvas.width / 2, 0, inputCanvas.width / 2, inputCanvas.height / 2);

    // upper-right to lower-right
    context.drawImage(inputCanvas, inputCanvas.width / 2, 0, inputCanvas.width / 2, inputCanvas.height / 2, inputCanvas.width / 2, inputCanvas.height / 2, inputCanvas.width / 2, inputCanvas.height / 2);

    // lower-right to lower-left
    context.drawImage(inputCanvas, inputCanvas.width / 2, inputCanvas.height / 2, inputCanvas.width / 2, inputCanvas.height / 2, 0, inputCanvas.height / 2, inputCanvas.width / 2, inputCanvas.height / 2);

    // lower-right to upper-left
    context.drawImage(inputCanvas, 0, inputCanvas.height / 2, inputCanvas.width / 2, inputCanvas.height / 2, 0, 0, inputCanvas.width / 2, inputCanvas.height / 2);
    return outputCanvas;
  }
}
functionBuilder.register('MysteryC', MysteryC);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsImZ1bmN0aW9uQnVpbGRlciIsIkZ1bmN0aW9uQnVpbGRlclN0cmluZ3MiLCJGQkNhbnZhc1V0aWxzIiwiTXlzdGVyeUltYWdlRnVuY3Rpb24iLCJNeXN0ZXJ5QyIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm15c3RlcnlDU3RyaW5nUHJvcGVydHkiLCJuYW1lIiwiZmlsbCIsImFwcGx5RnVuY3Rpb24iLCJpbnB1dENhbnZhcyIsIm91dHB1dENhbnZhcyIsImNyZWF0ZUNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGV4dCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk15c3RlcnlDLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpdmlkZXMgdGhlIGltYWdlIGludG8gNCBxdWFkcmFudHMgYW5kIHNoaWZ0cyB0aGVtIGNsb2Nrd2lzZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRnVuY3Rpb25CdWlsZGVyU3RyaW5ncyBmcm9tICcuLi8uLi8uLi9GdW5jdGlvbkJ1aWxkZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IEZCQ2FudmFzVXRpbHMgZnJvbSAnLi4vRkJDYW52YXNVdGlscy5qcyc7XHJcbmltcG9ydCBNeXN0ZXJ5SW1hZ2VGdW5jdGlvbiBmcm9tICcuL015c3RlcnlJbWFnZUZ1bmN0aW9uLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15c3RlcnlDIGV4dGVuZHMgTXlzdGVyeUltYWdlRnVuY3Rpb24ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggRnVuY3Rpb25CdWlsZGVyU3RyaW5ncy5teXN0ZXJ5Q1N0cmluZ1Byb3BlcnR5LCBtZXJnZSgge1xyXG4gICAgICBuYW1lOiAnTXlzdGVyeUMnLFxyXG4gICAgICBmaWxsOiAncmdiKCAyMjIsIDE4NiwgMjQ3ICknXHJcbiAgICB9LCBvcHRpb25zICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGxpZXMgdGhpcyBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGlucHV0Q2FudmFzXHJcbiAgICogQHJldHVybnMge0hUTUxDYW52YXNFbGVtZW50fVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBhcHBseUZ1bmN0aW9uKCBpbnB1dENhbnZhcyApIHtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIG91dHB1dCBjYW52YXNcclxuICAgIGNvbnN0IG91dHB1dENhbnZhcyA9IEZCQ2FudmFzVXRpbHMuY3JlYXRlQ2FudmFzKCBpbnB1dENhbnZhcy53aWR0aCwgaW5wdXRDYW52YXMuaGVpZ2h0ICk7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gb3V0cHV0Q2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcclxuXHJcbiAgICAvLyBEaXZpZGUgaW50byA0IHF1YWRyYW50cyBhbmQgc2hpZnQgY2xvY2t3aXNlXHJcblxyXG4gICAgLy8gdXBwZXItbGVmdCB0byB1cHBlci1yaWdodFxyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UoIGlucHV0Q2FudmFzLFxyXG4gICAgICAwLCAwLFxyXG4gICAgICBpbnB1dENhbnZhcy53aWR0aCAvIDIsIGlucHV0Q2FudmFzLmhlaWdodCAvIDIsXHJcbiAgICAgIGlucHV0Q2FudmFzLndpZHRoIC8gMiwgMCxcclxuICAgICAgaW5wdXRDYW52YXMud2lkdGggLyAyLCBpbnB1dENhbnZhcy5oZWlnaHQgLyAyICk7XHJcblxyXG4gICAgLy8gdXBwZXItcmlnaHQgdG8gbG93ZXItcmlnaHRcclxuICAgIGNvbnRleHQuZHJhd0ltYWdlKCBpbnB1dENhbnZhcyxcclxuICAgICAgaW5wdXRDYW52YXMud2lkdGggLyAyLCAwLFxyXG4gICAgICBpbnB1dENhbnZhcy53aWR0aCAvIDIsIGlucHV0Q2FudmFzLmhlaWdodCAvIDIsXHJcbiAgICAgIGlucHV0Q2FudmFzLndpZHRoIC8gMiwgaW5wdXRDYW52YXMuaGVpZ2h0IC8gMixcclxuICAgICAgaW5wdXRDYW52YXMud2lkdGggLyAyLCBpbnB1dENhbnZhcy5oZWlnaHQgLyAyICk7XHJcblxyXG4gICAgLy8gbG93ZXItcmlnaHQgdG8gbG93ZXItbGVmdFxyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UoIGlucHV0Q2FudmFzLFxyXG4gICAgICBpbnB1dENhbnZhcy53aWR0aCAvIDIsIGlucHV0Q2FudmFzLmhlaWdodCAvIDIsXHJcbiAgICAgIGlucHV0Q2FudmFzLndpZHRoIC8gMiwgaW5wdXRDYW52YXMuaGVpZ2h0IC8gMixcclxuICAgICAgMCwgaW5wdXRDYW52YXMuaGVpZ2h0IC8gMixcclxuICAgICAgaW5wdXRDYW52YXMud2lkdGggLyAyLCBpbnB1dENhbnZhcy5oZWlnaHQgLyAyICk7XHJcblxyXG4gICAgLy8gbG93ZXItcmlnaHQgdG8gdXBwZXItbGVmdFxyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UoIGlucHV0Q2FudmFzLFxyXG4gICAgICAwLCBpbnB1dENhbnZhcy5oZWlnaHQgLyAyLFxyXG4gICAgICBpbnB1dENhbnZhcy53aWR0aCAvIDIsIGlucHV0Q2FudmFzLmhlaWdodCAvIDIsXHJcbiAgICAgIDAsIDAsXHJcbiAgICAgIGlucHV0Q2FudmFzLndpZHRoIC8gMiwgaW5wdXRDYW52YXMuaGVpZ2h0IC8gMiApO1xyXG5cclxuICAgIHJldHVybiBvdXRwdXRDYW52YXM7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdNeXN0ZXJ5QycsIE15c3RlcnlDICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxzQ0FBc0M7QUFDeEQsT0FBT0MsZUFBZSxNQUFNLDZCQUE2QjtBQUN6RCxPQUFPQyxzQkFBc0IsTUFBTSxvQ0FBb0M7QUFDdkUsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsZUFBZSxNQUFNQyxRQUFRLFNBQVNELG9CQUFvQixDQUFDO0VBRXpEO0FBQ0Y7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFDckIsS0FBSyxDQUFFTCxzQkFBc0IsQ0FBQ00sc0JBQXNCLEVBQUVSLEtBQUssQ0FBRTtNQUMzRFMsSUFBSSxFQUFFLFVBQVU7TUFDaEJDLElBQUksRUFBRTtJQUNSLENBQUMsRUFBRUgsT0FBUSxDQUFFLENBQUM7RUFDaEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxhQUFhQSxDQUFFQyxXQUFXLEVBQUc7SUFFM0I7SUFDQSxNQUFNQyxZQUFZLEdBQUdWLGFBQWEsQ0FBQ1csWUFBWSxDQUFFRixXQUFXLENBQUNHLEtBQUssRUFBRUgsV0FBVyxDQUFDSSxNQUFPLENBQUM7SUFDeEYsTUFBTUMsT0FBTyxHQUFHSixZQUFZLENBQUNLLFVBQVUsQ0FBRSxJQUFLLENBQUM7O0lBRS9DOztJQUVBO0lBQ0FELE9BQU8sQ0FBQ0UsU0FBUyxDQUFFUCxXQUFXLEVBQzVCLENBQUMsRUFBRSxDQUFDLEVBQ0pBLFdBQVcsQ0FBQ0csS0FBSyxHQUFHLENBQUMsRUFBRUgsV0FBVyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxFQUM3Q0osV0FBVyxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFDeEJILFdBQVcsQ0FBQ0csS0FBSyxHQUFHLENBQUMsRUFBRUgsV0FBVyxDQUFDSSxNQUFNLEdBQUcsQ0FBRSxDQUFDOztJQUVqRDtJQUNBQyxPQUFPLENBQUNFLFNBQVMsQ0FBRVAsV0FBVyxFQUM1QkEsV0FBVyxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFDeEJILFdBQVcsQ0FBQ0csS0FBSyxHQUFHLENBQUMsRUFBRUgsV0FBVyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxFQUM3Q0osV0FBVyxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxFQUFFSCxXQUFXLENBQUNJLE1BQU0sR0FBRyxDQUFDLEVBQzdDSixXQUFXLENBQUNHLEtBQUssR0FBRyxDQUFDLEVBQUVILFdBQVcsQ0FBQ0ksTUFBTSxHQUFHLENBQUUsQ0FBQzs7SUFFakQ7SUFDQUMsT0FBTyxDQUFDRSxTQUFTLENBQUVQLFdBQVcsRUFDNUJBLFdBQVcsQ0FBQ0csS0FBSyxHQUFHLENBQUMsRUFBRUgsV0FBVyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxFQUM3Q0osV0FBVyxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxFQUFFSCxXQUFXLENBQUNJLE1BQU0sR0FBRyxDQUFDLEVBQzdDLENBQUMsRUFBRUosV0FBVyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxFQUN6QkosV0FBVyxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxFQUFFSCxXQUFXLENBQUNJLE1BQU0sR0FBRyxDQUFFLENBQUM7O0lBRWpEO0lBQ0FDLE9BQU8sQ0FBQ0UsU0FBUyxDQUFFUCxXQUFXLEVBQzVCLENBQUMsRUFBRUEsV0FBVyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxFQUN6QkosV0FBVyxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxFQUFFSCxXQUFXLENBQUNJLE1BQU0sR0FBRyxDQUFDLEVBQzdDLENBQUMsRUFBRSxDQUFDLEVBQ0pKLFdBQVcsQ0FBQ0csS0FBSyxHQUFHLENBQUMsRUFBRUgsV0FBVyxDQUFDSSxNQUFNLEdBQUcsQ0FBRSxDQUFDO0lBRWpELE9BQU9ILFlBQVk7RUFDckI7QUFDRjtBQUVBWixlQUFlLENBQUNtQixRQUFRLENBQUUsVUFBVSxFQUFFZixRQUFTLENBQUMifQ==