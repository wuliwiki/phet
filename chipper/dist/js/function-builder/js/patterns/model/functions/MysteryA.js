// Copyright 2015-2023, University of Colorado Boulder

/**
 * Reflects about the x axis.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../../phet-core/js/merge.js';
import functionBuilder from '../../../functionBuilder.js';
import FunctionBuilderStrings from '../../../FunctionBuilderStrings.js';
import FBCanvasUtils from '../FBCanvasUtils.js';
import MysteryImageFunction from './MysteryImageFunction.js';
export default class MysteryA extends MysteryImageFunction {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    super(FunctionBuilderStrings.mysteryAStringProperty, merge({
      name: 'MysteryA',
      fill: 'rgb( 127, 225, 173 )'
    }, options));
  }

  /**
   * Applies this function.
   *
   * @param {HTMLCanvasElement} inputCanvas
   * @returns {HTMLCanvasElement}
   * @public
   * @override
   */
  applyFunction(inputCanvas) {
    // Create the output canvas
    const outputCanvas = FBCanvasUtils.createCanvas(inputCanvas.width, inputCanvas.height);
    const context = outputCanvas.getContext('2d');

    // Reflect about the x axis
    context.translate(0, outputCanvas.height);
    context.scale(1, -1);

    // Draw the input canvas to the output canvas
    context.drawImage(inputCanvas, 0, 0);
    return outputCanvas;
  }
}
functionBuilder.register('MysteryA', MysteryA);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsImZ1bmN0aW9uQnVpbGRlciIsIkZ1bmN0aW9uQnVpbGRlclN0cmluZ3MiLCJGQkNhbnZhc1V0aWxzIiwiTXlzdGVyeUltYWdlRnVuY3Rpb24iLCJNeXN0ZXJ5QSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm15c3RlcnlBU3RyaW5nUHJvcGVydHkiLCJuYW1lIiwiZmlsbCIsImFwcGx5RnVuY3Rpb24iLCJpbnB1dENhbnZhcyIsIm91dHB1dENhbnZhcyIsImNyZWF0ZUNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGV4dCIsImdldENvbnRleHQiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsImRyYXdJbWFnZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTXlzdGVyeUEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmVmbGVjdHMgYWJvdXQgdGhlIHggYXhpcy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRnVuY3Rpb25CdWlsZGVyU3RyaW5ncyBmcm9tICcuLi8uLi8uLi9GdW5jdGlvbkJ1aWxkZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IEZCQ2FudmFzVXRpbHMgZnJvbSAnLi4vRkJDYW52YXNVdGlscy5qcyc7XHJcbmltcG9ydCBNeXN0ZXJ5SW1hZ2VGdW5jdGlvbiBmcm9tICcuL015c3RlcnlJbWFnZUZ1bmN0aW9uLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15c3RlcnlBIGV4dGVuZHMgTXlzdGVyeUltYWdlRnVuY3Rpb24ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggRnVuY3Rpb25CdWlsZGVyU3RyaW5ncy5teXN0ZXJ5QVN0cmluZ1Byb3BlcnR5LCBtZXJnZSgge1xyXG4gICAgICBuYW1lOiAnTXlzdGVyeUEnLFxyXG4gICAgICBmaWxsOiAncmdiKCAxMjcsIDIyNSwgMTczICknXHJcbiAgICB9LCBvcHRpb25zICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGxpZXMgdGhpcyBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGlucHV0Q2FudmFzXHJcbiAgICogQHJldHVybnMge0hUTUxDYW52YXNFbGVtZW50fVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBhcHBseUZ1bmN0aW9uKCBpbnB1dENhbnZhcyApIHtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIG91dHB1dCBjYW52YXNcclxuICAgIGNvbnN0IG91dHB1dENhbnZhcyA9IEZCQ2FudmFzVXRpbHMuY3JlYXRlQ2FudmFzKCBpbnB1dENhbnZhcy53aWR0aCwgaW5wdXRDYW52YXMuaGVpZ2h0ICk7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gb3V0cHV0Q2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcclxuXHJcbiAgICAvLyBSZWZsZWN0IGFib3V0IHRoZSB4IGF4aXNcclxuICAgIGNvbnRleHQudHJhbnNsYXRlKCAwLCBvdXRwdXRDYW52YXMuaGVpZ2h0ICk7XHJcbiAgICBjb250ZXh0LnNjYWxlKCAxLCAtMSApO1xyXG5cclxuICAgIC8vIERyYXcgdGhlIGlucHV0IGNhbnZhcyB0byB0aGUgb3V0cHV0IGNhbnZhc1xyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UoIGlucHV0Q2FudmFzLCAwLCAwICk7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dENhbnZhcztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uQnVpbGRlci5yZWdpc3RlciggJ015c3RlcnlBJywgTXlzdGVyeUEgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLHNCQUFzQixNQUFNLG9DQUFvQztBQUN2RSxPQUFPQyxhQUFhLE1BQU0scUJBQXFCO0FBQy9DLE9BQU9DLG9CQUFvQixNQUFNLDJCQUEyQjtBQUU1RCxlQUFlLE1BQU1DLFFBQVEsU0FBU0Qsb0JBQW9CLENBQUM7RUFFekQ7QUFDRjtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUNyQixLQUFLLENBQUVMLHNCQUFzQixDQUFDTSxzQkFBc0IsRUFBRVIsS0FBSyxDQUFFO01BQzNEUyxJQUFJLEVBQUUsVUFBVTtNQUNoQkMsSUFBSSxFQUFFO0lBQ1IsQ0FBQyxFQUFFSCxPQUFRLENBQUUsQ0FBQztFQUNoQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLGFBQWFBLENBQUVDLFdBQVcsRUFBRztJQUUzQjtJQUNBLE1BQU1DLFlBQVksR0FBR1YsYUFBYSxDQUFDVyxZQUFZLENBQUVGLFdBQVcsQ0FBQ0csS0FBSyxFQUFFSCxXQUFXLENBQUNJLE1BQU8sQ0FBQztJQUN4RixNQUFNQyxPQUFPLEdBQUdKLFlBQVksQ0FBQ0ssVUFBVSxDQUFFLElBQUssQ0FBQzs7SUFFL0M7SUFDQUQsT0FBTyxDQUFDRSxTQUFTLENBQUUsQ0FBQyxFQUFFTixZQUFZLENBQUNHLE1BQU8sQ0FBQztJQUMzQ0MsT0FBTyxDQUFDRyxLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDOztJQUV0QjtJQUNBSCxPQUFPLENBQUNJLFNBQVMsQ0FBRVQsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFFdEMsT0FBT0MsWUFBWTtFQUNyQjtBQUNGO0FBRUFaLGVBQWUsQ0FBQ3FCLFFBQVEsQ0FBRSxVQUFVLEVBQUVqQixRQUFTLENBQUMifQ==