// Copyright 2015-2023, University of Colorado Boulder

/**
 * Rotates 90 degrees clockwise.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Image } from '../../../../../scenery/js/imports.js';
import rotate90_png from '../../../../mipmaps/functions/rotate90_png.js';
import FBConstants from '../../../common/FBConstants.js';
import ImageFunction from '../../../common/model/functions/ImageFunction.js';
import functionBuilder from '../../../functionBuilder.js';
import FBCanvasUtils from '../FBCanvasUtils.js';
export default class Rotate90 extends ImageFunction {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = options || {};
    options.name = 'Rotate90';
    options.fill = 'rgb( 147, 231, 128 )';
    const iconNode = new Image(rotate90_png, {
      scale: FBConstants.PATTERNS_FUNCTION_ICON_SCALE
    });
    super(iconNode, options);
  }

  /**
   * Applies this function.
   *
   * @param {HTMLCanvasElement} inputCanvas
   * @returns {HTMLCanvasElement}
   * @public
   * @override
   */
  applyFunction(inputCanvas) {
    // Create the output canvas
    const outputCanvas = FBCanvasUtils.createCanvas(inputCanvas.height, inputCanvas.width); // swap width and height!
    const context = outputCanvas.getContext('2d');

    // Rotate 90 degrees
    context.translate(outputCanvas.width, 0);
    context.rotate(Math.PI / 2);

    // Draw the input canvas to the output canvas
    context.drawImage(inputCanvas, 0, 0);
    return outputCanvas;
  }
}
functionBuilder.register('Rotate90', Rotate90);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZSIsInJvdGF0ZTkwX3BuZyIsIkZCQ29uc3RhbnRzIiwiSW1hZ2VGdW5jdGlvbiIsImZ1bmN0aW9uQnVpbGRlciIsIkZCQ2FudmFzVXRpbHMiLCJSb3RhdGU5MCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm5hbWUiLCJmaWxsIiwiaWNvbk5vZGUiLCJzY2FsZSIsIlBBVFRFUk5TX0ZVTkNUSU9OX0lDT05fU0NBTEUiLCJhcHBseUZ1bmN0aW9uIiwiaW5wdXRDYW52YXMiLCJvdXRwdXRDYW52YXMiLCJjcmVhdGVDYW52YXMiLCJoZWlnaHQiLCJ3aWR0aCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwidHJhbnNsYXRlIiwicm90YXRlIiwiTWF0aCIsIlBJIiwiZHJhd0ltYWdlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSb3RhdGU5MC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSb3RhdGVzIDkwIGRlZ3JlZXMgY2xvY2t3aXNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHJvdGF0ZTkwX3BuZyBmcm9tICcuLi8uLi8uLi8uLi9taXBtYXBzL2Z1bmN0aW9ucy9yb3RhdGU5MF9wbmcuanMnO1xyXG5pbXBvcnQgRkJDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vY29tbW9uL0ZCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEltYWdlRnVuY3Rpb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL21vZGVsL2Z1bmN0aW9ucy9JbWFnZUZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRkJDYW52YXNVdGlscyBmcm9tICcuLi9GQkNhbnZhc1V0aWxzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdGF0ZTkwIGV4dGVuZHMgSW1hZ2VGdW5jdGlvbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIG9wdGlvbnMubmFtZSA9ICdSb3RhdGU5MCc7XHJcbiAgICBvcHRpb25zLmZpbGwgPSAncmdiKCAxNDcsIDIzMSwgMTI4ICknO1xyXG5cclxuICAgIGNvbnN0IGljb25Ob2RlID0gbmV3IEltYWdlKCByb3RhdGU5MF9wbmcsIHsgc2NhbGU6IEZCQ29uc3RhbnRzLlBBVFRFUk5TX0ZVTkNUSU9OX0lDT05fU0NBTEUgfSApO1xyXG5cclxuICAgIHN1cGVyKCBpY29uTm9kZSwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyB0aGlzIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gaW5wdXRDYW52YXNcclxuICAgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGFwcGx5RnVuY3Rpb24oIGlucHV0Q2FudmFzICkge1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgb3V0cHV0IGNhbnZhc1xyXG4gICAgY29uc3Qgb3V0cHV0Q2FudmFzID0gRkJDYW52YXNVdGlscy5jcmVhdGVDYW52YXMoIGlucHV0Q2FudmFzLmhlaWdodCwgaW5wdXRDYW52YXMud2lkdGggKTsgLy8gc3dhcCB3aWR0aCBhbmQgaGVpZ2h0IVxyXG4gICAgY29uc3QgY29udGV4dCA9IG91dHB1dENhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XHJcblxyXG4gICAgLy8gUm90YXRlIDkwIGRlZ3JlZXNcclxuICAgIGNvbnRleHQudHJhbnNsYXRlKCBvdXRwdXRDYW52YXMud2lkdGgsIDAgKTtcclxuICAgIGNvbnRleHQucm90YXRlKCBNYXRoLlBJIC8gMiApO1xyXG5cclxuICAgIC8vIERyYXcgdGhlIGlucHV0IGNhbnZhcyB0byB0aGUgb3V0cHV0IGNhbnZhc1xyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UoIGlucHV0Q2FudmFzLCAwLCAwICk7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dENhbnZhcztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uQnVpbGRlci5yZWdpc3RlciggJ1JvdGF0ZTkwJywgUm90YXRlOTAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLHNDQUFzQztBQUM1RCxPQUFPQyxZQUFZLE1BQU0sK0NBQStDO0FBQ3hFLE9BQU9DLFdBQVcsTUFBTSxnQ0FBZ0M7QUFDeEQsT0FBT0MsYUFBYSxNQUFNLGtEQUFrRDtBQUM1RSxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLGFBQWEsTUFBTSxxQkFBcUI7QUFFL0MsZUFBZSxNQUFNQyxRQUFRLFNBQVNILGFBQWEsQ0FBQztFQUVsRDtBQUNGO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsT0FBTyxFQUFHO0lBRXJCQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxDQUFDLENBQUM7SUFDdkJBLE9BQU8sQ0FBQ0MsSUFBSSxHQUFHLFVBQVU7SUFDekJELE9BQU8sQ0FBQ0UsSUFBSSxHQUFHLHNCQUFzQjtJQUVyQyxNQUFNQyxRQUFRLEdBQUcsSUFBSVgsS0FBSyxDQUFFQyxZQUFZLEVBQUU7TUFBRVcsS0FBSyxFQUFFVixXQUFXLENBQUNXO0lBQTZCLENBQUUsQ0FBQztJQUUvRixLQUFLLENBQUVGLFFBQVEsRUFBRUgsT0FBUSxDQUFDO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRU0sYUFBYUEsQ0FBRUMsV0FBVyxFQUFHO0lBRTNCO0lBQ0EsTUFBTUMsWUFBWSxHQUFHWCxhQUFhLENBQUNZLFlBQVksQ0FBRUYsV0FBVyxDQUFDRyxNQUFNLEVBQUVILFdBQVcsQ0FBQ0ksS0FBTSxDQUFDLENBQUMsQ0FBQztJQUMxRixNQUFNQyxPQUFPLEdBQUdKLFlBQVksQ0FBQ0ssVUFBVSxDQUFFLElBQUssQ0FBQzs7SUFFL0M7SUFDQUQsT0FBTyxDQUFDRSxTQUFTLENBQUVOLFlBQVksQ0FBQ0csS0FBSyxFQUFFLENBQUUsQ0FBQztJQUMxQ0MsT0FBTyxDQUFDRyxNQUFNLENBQUVDLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUUsQ0FBQzs7SUFFN0I7SUFDQUwsT0FBTyxDQUFDTSxTQUFTLENBQUVYLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0lBRXRDLE9BQU9DLFlBQVk7RUFDckI7QUFDRjtBQUVBWixlQUFlLENBQUN1QixRQUFRLENBQUUsVUFBVSxFQUFFckIsUUFBUyxDQUFDIn0=