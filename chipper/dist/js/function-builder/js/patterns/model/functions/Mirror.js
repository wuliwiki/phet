// Copyright 2015-2023, University of Colorado Boulder

/**
 * Creates a mirror image, a reflection about the y axis.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Image } from '../../../../../scenery/js/imports.js';
import mirror_png from '../../../../mipmaps/functions/mirror_png.js';
import FBConstants from '../../../common/FBConstants.js';
import ImageFunction from '../../../common/model/functions/ImageFunction.js';
import functionBuilder from '../../../functionBuilder.js';
import FBCanvasUtils from '../FBCanvasUtils.js';
export default class Mirror extends ImageFunction {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = options || {};
    options.name = 'Mirror';
    options.fill = 'rgb( 128, 197, 237 )';
    const iconNode = new Image(mirror_png, {
      scale: FBConstants.PATTERNS_FUNCTION_ICON_SCALE
    });
    super(iconNode, options);
  }

  /**
   * Applies this function.
   *
   * @param {HTMLCanvasElement} inputCanvas
   * @returns {HTMLCanvasElement}
   * @public
   * @override
   */
  applyFunction(inputCanvas) {
    // Create the output canvas
    const outputCanvas = FBCanvasUtils.createCanvas(inputCanvas.width, inputCanvas.height);
    const context = outputCanvas.getContext('2d');

    // Reflect about the y axis
    context.translate(outputCanvas.width, 0);
    context.scale(-1, 1);

    // Draw the input canvas to the output canvas
    context.drawImage(inputCanvas, 0, 0);
    return outputCanvas;
  }
}
functionBuilder.register('Mirror', Mirror);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZSIsIm1pcnJvcl9wbmciLCJGQkNvbnN0YW50cyIsIkltYWdlRnVuY3Rpb24iLCJmdW5jdGlvbkJ1aWxkZXIiLCJGQkNhbnZhc1V0aWxzIiwiTWlycm9yIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsImZpbGwiLCJpY29uTm9kZSIsInNjYWxlIiwiUEFUVEVSTlNfRlVOQ1RJT05fSUNPTl9TQ0FMRSIsImFwcGx5RnVuY3Rpb24iLCJpbnB1dENhbnZhcyIsIm91dHB1dENhbnZhcyIsImNyZWF0ZUNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGV4dCIsImdldENvbnRleHQiLCJ0cmFuc2xhdGUiLCJkcmF3SW1hZ2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1pcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWlycm9yIGltYWdlLCBhIHJlZmxlY3Rpb24gYWJvdXQgdGhlIHkgYXhpcy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtaXJyb3JfcG5nIGZyb20gJy4uLy4uLy4uLy4uL21pcG1hcHMvZnVuY3Rpb25zL21pcnJvcl9wbmcuanMnO1xyXG5pbXBvcnQgRkJDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vY29tbW9uL0ZCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEltYWdlRnVuY3Rpb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL21vZGVsL2Z1bmN0aW9ucy9JbWFnZUZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi8uLi8uLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRkJDYW52YXNVdGlscyBmcm9tICcuLi9GQkNhbnZhc1V0aWxzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pcnJvciBleHRlbmRzIEltYWdlRnVuY3Rpb24ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBvcHRpb25zLm5hbWUgPSAnTWlycm9yJztcclxuICAgIG9wdGlvbnMuZmlsbCA9ICdyZ2IoIDEyOCwgMTk3LCAyMzcgKSc7XHJcblxyXG4gICAgY29uc3QgaWNvbk5vZGUgPSBuZXcgSW1hZ2UoIG1pcnJvcl9wbmcsIHsgc2NhbGU6IEZCQ29uc3RhbnRzLlBBVFRFUk5TX0ZVTkNUSU9OX0lDT05fU0NBTEUgfSApO1xyXG5cclxuICAgIHN1cGVyKCBpY29uTm9kZSwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyB0aGlzIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gaW5wdXRDYW52YXNcclxuICAgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGFwcGx5RnVuY3Rpb24oIGlucHV0Q2FudmFzICkge1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgb3V0cHV0IGNhbnZhc1xyXG4gICAgY29uc3Qgb3V0cHV0Q2FudmFzID0gRkJDYW52YXNVdGlscy5jcmVhdGVDYW52YXMoIGlucHV0Q2FudmFzLndpZHRoLCBpbnB1dENhbnZhcy5oZWlnaHQgKTtcclxuICAgIGNvbnN0IGNvbnRleHQgPSBvdXRwdXRDYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xyXG5cclxuICAgIC8vIFJlZmxlY3QgYWJvdXQgdGhlIHkgYXhpc1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUoIG91dHB1dENhbnZhcy53aWR0aCwgMCApO1xyXG4gICAgY29udGV4dC5zY2FsZSggLTEsIDEgKTtcclxuXHJcbiAgICAvLyBEcmF3IHRoZSBpbnB1dCBjYW52YXMgdG8gdGhlIG91dHB1dCBjYW52YXNcclxuICAgIGNvbnRleHQuZHJhd0ltYWdlKCBpbnB1dENhbnZhcywgMCwgMCApO1xyXG5cclxuICAgIHJldHVybiBvdXRwdXRDYW52YXM7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdNaXJyb3InLCBNaXJyb3IgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLHNDQUFzQztBQUM1RCxPQUFPQyxVQUFVLE1BQU0sNkNBQTZDO0FBQ3BFLE9BQU9DLFdBQVcsTUFBTSxnQ0FBZ0M7QUFDeEQsT0FBT0MsYUFBYSxNQUFNLGtEQUFrRDtBQUM1RSxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLGFBQWEsTUFBTSxxQkFBcUI7QUFFL0MsZUFBZSxNQUFNQyxNQUFNLFNBQVNILGFBQWEsQ0FBQztFQUVoRDtBQUNGO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsT0FBTyxFQUFHO0lBRXJCQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxDQUFDLENBQUM7SUFDdkJBLE9BQU8sQ0FBQ0MsSUFBSSxHQUFHLFFBQVE7SUFDdkJELE9BQU8sQ0FBQ0UsSUFBSSxHQUFHLHNCQUFzQjtJQUVyQyxNQUFNQyxRQUFRLEdBQUcsSUFBSVgsS0FBSyxDQUFFQyxVQUFVLEVBQUU7TUFBRVcsS0FBSyxFQUFFVixXQUFXLENBQUNXO0lBQTZCLENBQUUsQ0FBQztJQUU3RixLQUFLLENBQUVGLFFBQVEsRUFBRUgsT0FBUSxDQUFDO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRU0sYUFBYUEsQ0FBRUMsV0FBVyxFQUFHO0lBRTNCO0lBQ0EsTUFBTUMsWUFBWSxHQUFHWCxhQUFhLENBQUNZLFlBQVksQ0FBRUYsV0FBVyxDQUFDRyxLQUFLLEVBQUVILFdBQVcsQ0FBQ0ksTUFBTyxDQUFDO0lBQ3hGLE1BQU1DLE9BQU8sR0FBR0osWUFBWSxDQUFDSyxVQUFVLENBQUUsSUFBSyxDQUFDOztJQUUvQztJQUNBRCxPQUFPLENBQUNFLFNBQVMsQ0FBRU4sWUFBWSxDQUFDRSxLQUFLLEVBQUUsQ0FBRSxDQUFDO0lBQzFDRSxPQUFPLENBQUNSLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFFLENBQUM7O0lBRXRCO0lBQ0FRLE9BQU8sQ0FBQ0csU0FBUyxDQUFFUixXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztJQUV0QyxPQUFPQyxZQUFZO0VBQ3JCO0FBQ0Y7QUFFQVosZUFBZSxDQUFDb0IsUUFBUSxDQUFFLFFBQVEsRUFBRWxCLE1BQU8sQ0FBQyJ9