// Copyright 2015-2023, University of Colorado Boulder

/**
 * The 'Patterns' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import merge from '../../../phet-core/js/merge.js';
import FBColors from '../common/FBColors.js';
import FBIconFactory from '../common/view/FBIconFactory.js';
import functionBuilder from '../functionBuilder.js';
import FunctionBuilderStrings from '../FunctionBuilderStrings.js';
import PatternsModel from './model/PatternsModel.js';
import PatternsScreenView from './view/PatternsScreenView.js';
export default class PatternsScreen extends Screen {
  /**
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(tandem, options) {
    options = merge({
      name: FunctionBuilderStrings.screen.patternsStringProperty,
      backgroundColorProperty: new Property(FBColors.PATTERNS_SCREEN_BACKGROUND),
      // {Property.<Color|string>}
      homeScreenIcon: FBIconFactory.createPatternsScreenIcon()
    }, options);
    assert && assert(!options.tandem, 'tandem is a constructor parameter');
    options.tandem = tandem;
    super(() => new PatternsModel(), model => new PatternsScreenView(model), options);
  }
}
functionBuilder.register('PatternsScreen', PatternsScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIm1lcmdlIiwiRkJDb2xvcnMiLCJGQkljb25GYWN0b3J5IiwiZnVuY3Rpb25CdWlsZGVyIiwiRnVuY3Rpb25CdWlsZGVyU3RyaW5ncyIsIlBhdHRlcm5zTW9kZWwiLCJQYXR0ZXJuc1NjcmVlblZpZXciLCJQYXR0ZXJuc1NjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwib3B0aW9ucyIsIm5hbWUiLCJzY3JlZW4iLCJwYXR0ZXJuc1N0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJQQVRURVJOU19TQ1JFRU5fQkFDS0dST1VORCIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlUGF0dGVybnNTY3JlZW5JY29uIiwiYXNzZXJ0IiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBhdHRlcm5zU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnUGF0dGVybnMnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBGQkNvbG9ycyBmcm9tICcuLi9jb21tb24vRkJDb2xvcnMuanMnO1xyXG5pbXBvcnQgRkJJY29uRmFjdG9yeSBmcm9tICcuLi9jb21tb24vdmlldy9GQkljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IGZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi9mdW5jdGlvbkJ1aWxkZXIuanMnO1xyXG5pbXBvcnQgRnVuY3Rpb25CdWlsZGVyU3RyaW5ncyBmcm9tICcuLi9GdW5jdGlvbkJ1aWxkZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IFBhdHRlcm5zTW9kZWwgZnJvbSAnLi9tb2RlbC9QYXR0ZXJuc01vZGVsLmpzJztcclxuaW1wb3J0IFBhdHRlcm5zU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvUGF0dGVybnNTY3JlZW5WaWV3LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdHRlcm5zU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBuYW1lOiBGdW5jdGlvbkJ1aWxkZXJTdHJpbmdzLnNjcmVlbi5wYXR0ZXJuc1N0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBGQkNvbG9ycy5QQVRURVJOU19TQ1JFRU5fQkFDS0dST1VORCApLCAvLyB7UHJvcGVydHkuPENvbG9yfHN0cmluZz59XHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBGQkljb25GYWN0b3J5LmNyZWF0ZVBhdHRlcm5zU2NyZWVuSWNvbigpXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMudGFuZGVtLCAndGFuZGVtIGlzIGEgY29uc3RydWN0b3IgcGFyYW1ldGVyJyApO1xyXG4gICAgb3B0aW9ucy50YW5kZW0gPSB0YW5kZW07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBQYXR0ZXJuc01vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBQYXR0ZXJuc1NjcmVlblZpZXcoIG1vZGVsICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbkJ1aWxkZXIucmVnaXN0ZXIoICdQYXR0ZXJuc1NjcmVlbicsIFBhdHRlcm5zU2NyZWVuICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELE9BQU9DLFFBQVEsTUFBTSx1QkFBdUI7QUFDNUMsT0FBT0MsYUFBYSxNQUFNLGlDQUFpQztBQUMzRCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyxhQUFhLE1BQU0sMEJBQTBCO0FBQ3BELE9BQU9DLGtCQUFrQixNQUFNLDhCQUE4QjtBQUU3RCxlQUFlLE1BQU1DLGNBQWMsU0FBU1IsTUFBTSxDQUFDO0VBRWpEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VTLFdBQVdBLENBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0lBRTdCQSxPQUFPLEdBQUdWLEtBQUssQ0FBRTtNQUNmVyxJQUFJLEVBQUVQLHNCQUFzQixDQUFDUSxNQUFNLENBQUNDLHNCQUFzQjtNQUMxREMsdUJBQXVCLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRUcsUUFBUSxDQUFDYywwQkFBMkIsQ0FBQztNQUFFO01BQzlFQyxjQUFjLEVBQUVkLGFBQWEsQ0FBQ2Usd0JBQXdCLENBQUM7SUFDekQsQ0FBQyxFQUFFUCxPQUFRLENBQUM7SUFFWlEsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ1IsT0FBTyxDQUFDRCxNQUFNLEVBQUUsbUNBQW9DLENBQUM7SUFDeEVDLE9BQU8sQ0FBQ0QsTUFBTSxHQUFHQSxNQUFNO0lBRXZCLEtBQUssQ0FDSCxNQUFNLElBQUlKLGFBQWEsQ0FBQyxDQUFDLEVBQ3pCYyxLQUFLLElBQUksSUFBSWIsa0JBQWtCLENBQUVhLEtBQU0sQ0FBQyxFQUN4Q1QsT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCxlQUFlLENBQUNpQixRQUFRLENBQUUsZ0JBQWdCLEVBQUViLGNBQWUsQ0FBQyJ9