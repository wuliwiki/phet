// Copyright 2014-2021, University of Colorado Boulder

/**
 *
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Rectangle } from '../../../../scenery/js/imports.js';
import forcesAndMotionBasics from '../../forcesAndMotionBasics.js';

// constants
const defaultStroke = 'black';
const defaultLineWidth = 1;
class PullerToolboxNode extends Rectangle {
  /**
   * Create toolbox backgrounds for the pullers
   * @param {NetForceModel} model
   * @param {NetForceScreenView} netForceScreenView
   * @param {number} x - the screen coordinate for the position of the toolbox
   * @param {number} side - 'left' || 'right'
   * @param {number} activePullerIndex
   * @param {number} minIndex
   * @param {number} maxIndex
   * @param {string || Color} highlightColor
   */
  constructor(model, netForceScreenView, x, side, activePullerIndex, minIndex, maxIndex, highlightColor) {
    const toolboxHeight = 216;
    const toolboxOptions = {
      fill: '#e7e8e9',
      stroke: defaultStroke,
      lineWidth: defaultLineWidth
    };
    const toolboxY = netForceScreenView.layoutBounds.height - toolboxHeight - 4;
    const toolboxWidth = 324;
    const toolboxArcWidth = 10;
    super(x, toolboxY, toolboxWidth, toolboxHeight, toolboxArcWidth, toolboxArcWidth, toolboxOptions);
    this.highlightColor = highlightColor;
    this.uniqueId = `${side}-pullerToolbox`;
  }
}
forcesAndMotionBasics.register('PullerToolboxNode', PullerToolboxNode);
export default PullerToolboxNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWN0YW5nbGUiLCJmb3JjZXNBbmRNb3Rpb25CYXNpY3MiLCJkZWZhdWx0U3Ryb2tlIiwiZGVmYXVsdExpbmVXaWR0aCIsIlB1bGxlclRvb2xib3hOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm5ldEZvcmNlU2NyZWVuVmlldyIsIngiLCJzaWRlIiwiYWN0aXZlUHVsbGVySW5kZXgiLCJtaW5JbmRleCIsIm1heEluZGV4IiwiaGlnaGxpZ2h0Q29sb3IiLCJ0b29sYm94SGVpZ2h0IiwidG9vbGJveE9wdGlvbnMiLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwidG9vbGJveFkiLCJsYXlvdXRCb3VuZHMiLCJoZWlnaHQiLCJ0b29sYm94V2lkdGgiLCJ0b29sYm94QXJjV2lkdGgiLCJ1bmlxdWVJZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUHVsbGVyVG9vbGJveE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICpcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZm9yY2VzQW5kTW90aW9uQmFzaWNzIGZyb20gJy4uLy4uL2ZvcmNlc0FuZE1vdGlvbkJhc2ljcy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgZGVmYXVsdFN0cm9rZSA9ICdibGFjayc7XHJcbmNvbnN0IGRlZmF1bHRMaW5lV2lkdGggPSAxO1xyXG5cclxuY2xhc3MgUHVsbGVyVG9vbGJveE5vZGUgZXh0ZW5kcyBSZWN0YW5nbGUge1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgdG9vbGJveCBiYWNrZ3JvdW5kcyBmb3IgdGhlIHB1bGxlcnNcclxuICAgKiBAcGFyYW0ge05ldEZvcmNlTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtOZXRGb3JjZVNjcmVlblZpZXd9IG5ldEZvcmNlU2NyZWVuVmlld1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gdGhlIHNjcmVlbiBjb29yZGluYXRlIGZvciB0aGUgcG9zaXRpb24gb2YgdGhlIHRvb2xib3hcclxuICAgKiBAcGFyYW0ge251bWJlcn0gc2lkZSAtICdsZWZ0JyB8fCAncmlnaHQnXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFjdGl2ZVB1bGxlckluZGV4XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pbkluZGV4XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heEluZGV4XHJcbiAgICogQHBhcmFtIHtzdHJpbmcgfHwgQ29sb3J9IGhpZ2hsaWdodENvbG9yXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBuZXRGb3JjZVNjcmVlblZpZXcsIHgsIHNpZGUsIGFjdGl2ZVB1bGxlckluZGV4LCBtaW5JbmRleCwgbWF4SW5kZXgsIGhpZ2hsaWdodENvbG9yICkge1xyXG5cclxuICAgIGNvbnN0IHRvb2xib3hIZWlnaHQgPSAyMTY7XHJcblxyXG4gICAgY29uc3QgdG9vbGJveE9wdGlvbnMgPSB7XHJcbiAgICAgIGZpbGw6ICcjZTdlOGU5JyxcclxuICAgICAgc3Ryb2tlOiBkZWZhdWx0U3Ryb2tlLFxyXG4gICAgICBsaW5lV2lkdGg6IGRlZmF1bHRMaW5lV2lkdGhcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdG9vbGJveFkgPSBuZXRGb3JjZVNjcmVlblZpZXcubGF5b3V0Qm91bmRzLmhlaWdodCAtIHRvb2xib3hIZWlnaHQgLSA0O1xyXG4gICAgY29uc3QgdG9vbGJveFdpZHRoID0gMzI0O1xyXG4gICAgY29uc3QgdG9vbGJveEFyY1dpZHRoID0gMTA7XHJcbiAgICBzdXBlciggeCwgdG9vbGJveFksIHRvb2xib3hXaWR0aCwgdG9vbGJveEhlaWdodCwgdG9vbGJveEFyY1dpZHRoLCB0b29sYm94QXJjV2lkdGgsIHRvb2xib3hPcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5oaWdobGlnaHRDb2xvciA9IGhpZ2hsaWdodENvbG9yO1xyXG4gICAgdGhpcy51bmlxdWVJZCA9IGAke3NpZGV9LXB1bGxlclRvb2xib3hgO1xyXG4gIH1cclxufVxyXG5cclxuZm9yY2VzQW5kTW90aW9uQmFzaWNzLnJlZ2lzdGVyKCAnUHVsbGVyVG9vbGJveE5vZGUnLCBQdWxsZXJUb29sYm94Tm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHVsbGVyVG9vbGJveE5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxTQUFTLFFBQVEsbUNBQW1DO0FBQzdELE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQzs7QUFFbEU7QUFDQSxNQUFNQyxhQUFhLEdBQUcsT0FBTztBQUM3QixNQUFNQyxnQkFBZ0IsR0FBRyxDQUFDO0FBRTFCLE1BQU1DLGlCQUFpQixTQUFTSixTQUFTLENBQUM7RUFFeEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLGtCQUFrQixFQUFFQyxDQUFDLEVBQUVDLElBQUksRUFBRUMsaUJBQWlCLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxjQUFjLEVBQUc7SUFFdkcsTUFBTUMsYUFBYSxHQUFHLEdBQUc7SUFFekIsTUFBTUMsY0FBYyxHQUFHO01BQ3JCQyxJQUFJLEVBQUUsU0FBUztNQUNmQyxNQUFNLEVBQUVmLGFBQWE7TUFDckJnQixTQUFTLEVBQUVmO0lBQ2IsQ0FBQztJQUVELE1BQU1nQixRQUFRLEdBQUdaLGtCQUFrQixDQUFDYSxZQUFZLENBQUNDLE1BQU0sR0FBR1AsYUFBYSxHQUFHLENBQUM7SUFDM0UsTUFBTVEsWUFBWSxHQUFHLEdBQUc7SUFDeEIsTUFBTUMsZUFBZSxHQUFHLEVBQUU7SUFDMUIsS0FBSyxDQUFFZixDQUFDLEVBQUVXLFFBQVEsRUFBRUcsWUFBWSxFQUFFUixhQUFhLEVBQUVTLGVBQWUsRUFBRUEsZUFBZSxFQUFFUixjQUFlLENBQUM7SUFFbkcsSUFBSSxDQUFDRixjQUFjLEdBQUdBLGNBQWM7SUFDcEMsSUFBSSxDQUFDVyxRQUFRLEdBQUksR0FBRWYsSUFBSyxnQkFBZTtFQUN6QztBQUNGO0FBRUFSLHFCQUFxQixDQUFDd0IsUUFBUSxDQUFFLG1CQUFtQixFQUFFckIsaUJBQWtCLENBQUM7QUFFeEUsZUFBZUEsaUJBQWlCIn0=