// Copyright 2015-2022, University of Colorado Boulder

/**
 * Node representation of the movable cart in Forces and Motion: Basics net force screen.
 *
 * @author Jesse Greenberg
 */

import Range from '../../../../dot/js/Range.js';
import GaugeNode from '../../../../scenery-phet/js/GaugeNode.js';
import { Image } from '../../../../scenery/js/imports.js';
import cart_png from '../../../images/cart_png.js';
import forcesAndMotionBasics from '../../forcesAndMotionBasics.js';
import ForcesAndMotionBasicsStrings from '../../ForcesAndMotionBasicsStrings.js';
const speedStringProperty = ForcesAndMotionBasicsStrings.speedStringProperty;
class CartNode extends Image {
  /**
   * @param {Cart} cart
   * @param {NumberProperty} speedProperty
   * @param {Property.<Boolean>} showSpeedProperty
   * @param {Tandem} tandem
   */
  constructor(cart, speedProperty, showSpeedProperty, tandem) {
    // super constructor
    super(cart_png, {
      y: 221,
      tandem: tandem
    });
    this.cart = cart;
    this.xPosition = this.cart.xProperty.get();

    // add a speedometer to the cart
    const speedRange = new Range(0, 6); // speed range of the cart in m/s
    const speedometerNode = new GaugeNode(speedProperty, speedStringProperty, speedRange, {
      centerX: this.centerX,
      centerY: this.height / 2,
      radius: this.width * 0.25,
      majorTickLength: 8,
      minorTickLength: 4,
      majorTickLineWidth: 1,
      maxLabelWidthScale: 1.0,
      tandem: tandem.createTandem('speedometerNode')
    });
    showSpeedProperty.linkAttribute(speedometerNode, 'visible');
    this.addChild(speedometerNode);
  }
}
forcesAndMotionBasics.register('CartNode', CartNode);
export default CartNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIkdhdWdlTm9kZSIsIkltYWdlIiwiY2FydF9wbmciLCJmb3JjZXNBbmRNb3Rpb25CYXNpY3MiLCJGb3JjZXNBbmRNb3Rpb25CYXNpY3NTdHJpbmdzIiwic3BlZWRTdHJpbmdQcm9wZXJ0eSIsIkNhcnROb2RlIiwiY29uc3RydWN0b3IiLCJjYXJ0Iiwic3BlZWRQcm9wZXJ0eSIsInNob3dTcGVlZFByb3BlcnR5IiwidGFuZGVtIiwieSIsInhQb3NpdGlvbiIsInhQcm9wZXJ0eSIsImdldCIsInNwZWVkUmFuZ2UiLCJzcGVlZG9tZXRlck5vZGUiLCJjZW50ZXJYIiwiY2VudGVyWSIsImhlaWdodCIsInJhZGl1cyIsIndpZHRoIiwibWFqb3JUaWNrTGVuZ3RoIiwibWlub3JUaWNrTGVuZ3RoIiwibWFqb3JUaWNrTGluZVdpZHRoIiwibWF4TGFiZWxXaWR0aFNjYWxlIiwiY3JlYXRlVGFuZGVtIiwibGlua0F0dHJpYnV0ZSIsImFkZENoaWxkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDYXJ0Tm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb3ZhYmxlIGNhcnQgaW4gRm9yY2VzIGFuZCBNb3Rpb246IEJhc2ljcyBuZXQgZm9yY2Ugc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgR2F1Z2VOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9HYXVnZU5vZGUuanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBjYXJ0X3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvY2FydF9wbmcuanMnO1xyXG5pbXBvcnQgZm9yY2VzQW5kTW90aW9uQmFzaWNzIGZyb20gJy4uLy4uL2ZvcmNlc0FuZE1vdGlvbkJhc2ljcy5qcyc7XHJcbmltcG9ydCBGb3JjZXNBbmRNb3Rpb25CYXNpY3NTdHJpbmdzIGZyb20gJy4uLy4uL0ZvcmNlc0FuZE1vdGlvbkJhc2ljc1N0cmluZ3MuanMnO1xyXG5cclxuY29uc3Qgc3BlZWRTdHJpbmdQcm9wZXJ0eSA9IEZvcmNlc0FuZE1vdGlvbkJhc2ljc1N0cmluZ3Muc3BlZWRTdHJpbmdQcm9wZXJ0eTtcclxuXHJcbmNsYXNzIENhcnROb2RlIGV4dGVuZHMgSW1hZ2Uge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q2FydH0gY2FydFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyUHJvcGVydHl9IHNwZWVkUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxCb29sZWFuPn0gc2hvd1NwZWVkUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNhcnQsIHNwZWVkUHJvcGVydHksIHNob3dTcGVlZFByb3BlcnR5LCB0YW5kZW0gKSB7XHJcbiAgICAvLyBzdXBlciBjb25zdHJ1Y3RvclxyXG4gICAgc3VwZXIoIGNhcnRfcG5nLCB7XHJcbiAgICAgIHk6IDIyMSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmNhcnQgPSBjYXJ0O1xyXG4gICAgdGhpcy54UG9zaXRpb24gPSB0aGlzLmNhcnQueFByb3BlcnR5LmdldCgpO1xyXG5cclxuICAgIC8vIGFkZCBhIHNwZWVkb21ldGVyIHRvIHRoZSBjYXJ0XHJcbiAgICBjb25zdCBzcGVlZFJhbmdlID0gbmV3IFJhbmdlKCAwLCA2ICk7IC8vIHNwZWVkIHJhbmdlIG9mIHRoZSBjYXJ0IGluIG0vc1xyXG4gICAgY29uc3Qgc3BlZWRvbWV0ZXJOb2RlID0gbmV3IEdhdWdlTm9kZSggc3BlZWRQcm9wZXJ0eSwgc3BlZWRTdHJpbmdQcm9wZXJ0eSwgc3BlZWRSYW5nZSwge1xyXG4gICAgICBjZW50ZXJYOiB0aGlzLmNlbnRlclgsXHJcbiAgICAgIGNlbnRlclk6IHRoaXMuaGVpZ2h0IC8gMixcclxuICAgICAgcmFkaXVzOiB0aGlzLndpZHRoICogMC4yNSxcclxuICAgICAgbWFqb3JUaWNrTGVuZ3RoOiA4LFxyXG4gICAgICBtaW5vclRpY2tMZW5ndGg6IDQsXHJcbiAgICAgIG1ham9yVGlja0xpbmVXaWR0aDogMSxcclxuICAgICAgbWF4TGFiZWxXaWR0aFNjYWxlOiAxLjAsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NwZWVkb21ldGVyTm9kZScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHNob3dTcGVlZFByb3BlcnR5LmxpbmtBdHRyaWJ1dGUoIHNwZWVkb21ldGVyTm9kZSwgJ3Zpc2libGUnICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBzcGVlZG9tZXRlck5vZGUgKTtcclxuICB9XHJcbn1cclxuXHJcbmZvcmNlc0FuZE1vdGlvbkJhc2ljcy5yZWdpc3RlciggJ0NhcnROb2RlJywgQ2FydE5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ2FydE5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxTQUFTQyxLQUFLLFFBQVEsbUNBQW1DO0FBQ3pELE9BQU9DLFFBQVEsTUFBTSw2QkFBNkI7QUFDbEQsT0FBT0MscUJBQXFCLE1BQU0sZ0NBQWdDO0FBQ2xFLE9BQU9DLDRCQUE0QixNQUFNLHVDQUF1QztBQUVoRixNQUFNQyxtQkFBbUIsR0FBR0QsNEJBQTRCLENBQUNDLG1CQUFtQjtBQUU1RSxNQUFNQyxRQUFRLFNBQVNMLEtBQUssQ0FBQztFQUMzQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsSUFBSSxFQUFFQyxhQUFhLEVBQUVDLGlCQUFpQixFQUFFQyxNQUFNLEVBQUc7SUFDNUQ7SUFDQSxLQUFLLENBQUVULFFBQVEsRUFBRTtNQUNmVSxDQUFDLEVBQUUsR0FBRztNQUNORCxNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDSCxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDSyxTQUFTLEdBQUcsSUFBSSxDQUFDTCxJQUFJLENBQUNNLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLENBQUM7O0lBRTFDO0lBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUlqQixLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsTUFBTWtCLGVBQWUsR0FBRyxJQUFJakIsU0FBUyxDQUFFUyxhQUFhLEVBQUVKLG1CQUFtQixFQUFFVyxVQUFVLEVBQUU7TUFDckZFLE9BQU8sRUFBRSxJQUFJLENBQUNBLE9BQU87TUFDckJDLE9BQU8sRUFBRSxJQUFJLENBQUNDLE1BQU0sR0FBRyxDQUFDO01BQ3hCQyxNQUFNLEVBQUUsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSTtNQUN6QkMsZUFBZSxFQUFFLENBQUM7TUFDbEJDLGVBQWUsRUFBRSxDQUFDO01BQ2xCQyxrQkFBa0IsRUFBRSxDQUFDO01BQ3JCQyxrQkFBa0IsRUFBRSxHQUFHO01BQ3ZCZixNQUFNLEVBQUVBLE1BQU0sQ0FBQ2dCLFlBQVksQ0FBRSxpQkFBa0I7SUFDakQsQ0FBRSxDQUFDO0lBRUhqQixpQkFBaUIsQ0FBQ2tCLGFBQWEsQ0FBRVgsZUFBZSxFQUFFLFNBQVUsQ0FBQztJQUM3RCxJQUFJLENBQUNZLFFBQVEsQ0FBRVosZUFBZ0IsQ0FBQztFQUNsQztBQUNGO0FBRUFkLHFCQUFxQixDQUFDMkIsUUFBUSxDQUFFLFVBQVUsRUFBRXhCLFFBQVMsQ0FBQztBQUN0RCxlQUFlQSxRQUFRIn0=