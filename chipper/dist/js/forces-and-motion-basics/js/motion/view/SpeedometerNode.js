// Copyright 2016-2022, University of Colorado Boulder

/**
 * Speedometer used in Forces and Motion: Basics.  This is a typical gauge node with a value readout near the bottom.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg
 */

//modules
import Range from '../../../../dot/js/Range.js';
import merge from '../../../../phet-core/js/merge.js';
import ValueGaugeNode from '../../../../scenery-phet/js/ValueGaugeNode.js';
import { Node } from '../../../../scenery/js/imports.js';
import forcesAndMotionBasics from '../../forcesAndMotionBasics.js';
import ForcesAndMotionBasicsStrings from '../../ForcesAndMotionBasicsStrings.js';
import MotionConstants from '../MotionConstants.js';
const pattern0Name1ValueUnitsVelocityString = ForcesAndMotionBasicsStrings.pattern['0name']['1valueUnitsVelocity'];
const speedStringProperty = ForcesAndMotionBasicsStrings.speedStringProperty;
class SpeedometerNode extends Node {
  /**
   * Constructor.
   *
   * @param {Property.<number>} speedProperty
   * @param {Property.<number>} showSpeedProperty
   * @param {Property.<boolean>} showValuesProperty
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(speedProperty, showSpeedProperty, showValuesProperty, tandem, options) {
    options = merge({
      radius: 67,
      tandem: tandem
    }, options);

    // mutate with the options after construction so we can set the 'top'
    super();
    const gaugeNode = new ValueGaugeNode(speedProperty, speedStringProperty, new Range(0, MotionConstants.MAX_SPEED), {
      radius: 67,
      tandem: tandem.createTandem('gaugeNode'),
      displayValue: true,
      numberDisplayOptions: {
        valuePattern: pattern0Name1ValueUnitsVelocityString,
        decimalPlaces: 1
      }
    });
    this.addChild(gaugeNode);

    // dispose unnecessary for property links, SpeedometerNode exists for the lifetime of the sim
    showSpeedProperty.linkAttribute(this, 'visible');
    showValuesProperty.link(showValues => {
      gaugeNode.numberDisplayVisible = showValues;
    });

    // mutate post node construction so we can correctly translate
    this.mutate(options);
  }
}
forcesAndMotionBasics.register('SpeedometerNode', SpeedometerNode);
export default SpeedometerNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIm1lcmdlIiwiVmFsdWVHYXVnZU5vZGUiLCJOb2RlIiwiZm9yY2VzQW5kTW90aW9uQmFzaWNzIiwiRm9yY2VzQW5kTW90aW9uQmFzaWNzU3RyaW5ncyIsIk1vdGlvbkNvbnN0YW50cyIsInBhdHRlcm4wTmFtZTFWYWx1ZVVuaXRzVmVsb2NpdHlTdHJpbmciLCJwYXR0ZXJuIiwic3BlZWRTdHJpbmdQcm9wZXJ0eSIsIlNwZWVkb21ldGVyTm9kZSIsImNvbnN0cnVjdG9yIiwic3BlZWRQcm9wZXJ0eSIsInNob3dTcGVlZFByb3BlcnR5Iiwic2hvd1ZhbHVlc1Byb3BlcnR5IiwidGFuZGVtIiwib3B0aW9ucyIsInJhZGl1cyIsImdhdWdlTm9kZSIsIk1BWF9TUEVFRCIsImNyZWF0ZVRhbmRlbSIsImRpc3BsYXlWYWx1ZSIsIm51bWJlckRpc3BsYXlPcHRpb25zIiwidmFsdWVQYXR0ZXJuIiwiZGVjaW1hbFBsYWNlcyIsImFkZENoaWxkIiwibGlua0F0dHJpYnV0ZSIsImxpbmsiLCJzaG93VmFsdWVzIiwibnVtYmVyRGlzcGxheVZpc2libGUiLCJtdXRhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNwZWVkb21ldGVyTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTcGVlZG9tZXRlciB1c2VkIGluIEZvcmNlcyBhbmQgTW90aW9uOiBCYXNpY3MuICBUaGlzIGlzIGEgdHlwaWNhbCBnYXVnZSBub2RlIHdpdGggYSB2YWx1ZSByZWFkb3V0IG5lYXIgdGhlIGJvdHRvbS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5cclxuLy9tb2R1bGVzXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFZhbHVlR2F1Z2VOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9WYWx1ZUdhdWdlTm9kZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZm9yY2VzQW5kTW90aW9uQmFzaWNzIGZyb20gJy4uLy4uL2ZvcmNlc0FuZE1vdGlvbkJhc2ljcy5qcyc7XHJcbmltcG9ydCBGb3JjZXNBbmRNb3Rpb25CYXNpY3NTdHJpbmdzIGZyb20gJy4uLy4uL0ZvcmNlc0FuZE1vdGlvbkJhc2ljc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgTW90aW9uQ29uc3RhbnRzIGZyb20gJy4uL01vdGlvbkNvbnN0YW50cy5qcyc7XHJcblxyXG5jb25zdCBwYXR0ZXJuME5hbWUxVmFsdWVVbml0c1ZlbG9jaXR5U3RyaW5nID0gRm9yY2VzQW5kTW90aW9uQmFzaWNzU3RyaW5ncy5wYXR0ZXJuWyAnMG5hbWUnIF1bICcxdmFsdWVVbml0c1ZlbG9jaXR5JyBdO1xyXG5jb25zdCBzcGVlZFN0cmluZ1Byb3BlcnR5ID0gRm9yY2VzQW5kTW90aW9uQmFzaWNzU3RyaW5ncy5zcGVlZFN0cmluZ1Byb3BlcnR5O1xyXG5cclxuY2xhc3MgU3BlZWRvbWV0ZXJOb2RlIGV4dGVuZHMgTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxudW1iZXI+fSBzcGVlZFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gc2hvd1NwZWVkUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gc2hvd1ZhbHVlc1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggc3BlZWRQcm9wZXJ0eSwgc2hvd1NwZWVkUHJvcGVydHksIHNob3dWYWx1ZXNQcm9wZXJ0eSwgdGFuZGVtLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICByYWRpdXM6IDY3LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIG11dGF0ZSB3aXRoIHRoZSBvcHRpb25zIGFmdGVyIGNvbnN0cnVjdGlvbiBzbyB3ZSBjYW4gc2V0IHRoZSAndG9wJ1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBjb25zdCBnYXVnZU5vZGUgPSBuZXcgVmFsdWVHYXVnZU5vZGUoIHNwZWVkUHJvcGVydHksIHNwZWVkU3RyaW5nUHJvcGVydHksIG5ldyBSYW5nZSggMCwgTW90aW9uQ29uc3RhbnRzLk1BWF9TUEVFRCApLFxyXG4gICAgICB7XHJcbiAgICAgICAgcmFkaXVzOiA2NyxcclxuICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdnYXVnZU5vZGUnICksXHJcbiAgICAgICAgZGlzcGxheVZhbHVlOiB0cnVlLFxyXG4gICAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgICB2YWx1ZVBhdHRlcm46IHBhdHRlcm4wTmFtZTFWYWx1ZVVuaXRzVmVsb2NpdHlTdHJpbmcsXHJcbiAgICAgICAgICBkZWNpbWFsUGxhY2VzOiAxXHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBnYXVnZU5vZGUgKTtcclxuXHJcbiAgICAvLyBkaXNwb3NlIHVubmVjZXNzYXJ5IGZvciBwcm9wZXJ0eSBsaW5rcywgU3BlZWRvbWV0ZXJOb2RlIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW1cclxuICAgIHNob3dTcGVlZFByb3BlcnR5LmxpbmtBdHRyaWJ1dGUoIHRoaXMsICd2aXNpYmxlJyApO1xyXG5cclxuICAgIHNob3dWYWx1ZXNQcm9wZXJ0eS5saW5rKCBzaG93VmFsdWVzID0+IHtcclxuICAgICAgZ2F1Z2VOb2RlLm51bWJlckRpc3BsYXlWaXNpYmxlID0gc2hvd1ZhbHVlcztcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBtdXRhdGUgcG9zdCBub2RlIGNvbnN0cnVjdGlvbiBzbyB3ZSBjYW4gY29ycmVjdGx5IHRyYW5zbGF0ZVxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmZvcmNlc0FuZE1vdGlvbkJhc2ljcy5yZWdpc3RlciggJ1NwZWVkb21ldGVyTm9kZScsIFNwZWVkb21ldGVyTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3BlZWRvbWV0ZXJOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0EsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLGNBQWMsTUFBTSwrQ0FBK0M7QUFDMUUsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFDbEUsT0FBT0MsNEJBQTRCLE1BQU0sdUNBQXVDO0FBQ2hGLE9BQU9DLGVBQWUsTUFBTSx1QkFBdUI7QUFFbkQsTUFBTUMscUNBQXFDLEdBQUdGLDRCQUE0QixDQUFDRyxPQUFPLENBQUUsT0FBTyxDQUFFLENBQUUscUJBQXFCLENBQUU7QUFDdEgsTUFBTUMsbUJBQW1CLEdBQUdKLDRCQUE0QixDQUFDSSxtQkFBbUI7QUFFNUUsTUFBTUMsZUFBZSxTQUFTUCxJQUFJLENBQUM7RUFDakM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLGFBQWEsRUFBRUMsaUJBQWlCLEVBQUVDLGtCQUFrQixFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRztJQUVuRkEsT0FBTyxHQUFHZixLQUFLLENBQUU7TUFDZmdCLE1BQU0sRUFBRSxFQUFFO01BQ1ZGLE1BQU0sRUFBRUE7SUFDVixDQUFDLEVBQUVDLE9BQVEsQ0FBQzs7SUFFWjtJQUNBLEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUUsU0FBUyxHQUFHLElBQUloQixjQUFjLENBQUVVLGFBQWEsRUFBRUgsbUJBQW1CLEVBQUUsSUFBSVQsS0FBSyxDQUFFLENBQUMsRUFBRU0sZUFBZSxDQUFDYSxTQUFVLENBQUMsRUFDakg7TUFDRUYsTUFBTSxFQUFFLEVBQUU7TUFDVkYsTUFBTSxFQUFFQSxNQUFNLENBQUNLLFlBQVksQ0FBRSxXQUFZLENBQUM7TUFDMUNDLFlBQVksRUFBRSxJQUFJO01BQ2xCQyxvQkFBb0IsRUFBRTtRQUNwQkMsWUFBWSxFQUFFaEIscUNBQXFDO1FBQ25EaUIsYUFBYSxFQUFFO01BQ2pCO0lBQ0YsQ0FBRSxDQUFDO0lBQ0wsSUFBSSxDQUFDQyxRQUFRLENBQUVQLFNBQVUsQ0FBQzs7SUFFMUI7SUFDQUwsaUJBQWlCLENBQUNhLGFBQWEsQ0FBRSxJQUFJLEVBQUUsU0FBVSxDQUFDO0lBRWxEWixrQkFBa0IsQ0FBQ2EsSUFBSSxDQUFFQyxVQUFVLElBQUk7TUFDckNWLFNBQVMsQ0FBQ1csb0JBQW9CLEdBQUdELFVBQVU7SUFDN0MsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDRSxNQUFNLENBQUVkLE9BQVEsQ0FBQztFQUN4QjtBQUNGO0FBRUFaLHFCQUFxQixDQUFDMkIsUUFBUSxDQUFFLGlCQUFpQixFQUFFckIsZUFBZ0IsQ0FBQztBQUVwRSxlQUFlQSxlQUFlIn0=