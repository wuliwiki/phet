// Copyright 2013-2022, University of Colorado Boulder

/**
 * Button that starts a pulse
 *
 * @author Anton Ulyanov (Mlearner)
 */

import { Shape } from '../../../../kite/js/imports.js';
import merge from '../../../../phet-core/js/merge.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import RoundPushButton from '../../../../sun/js/buttons/RoundPushButton.js';
import waveOnAString from '../../waveOnAString.js';
import WOASModel from '../model/WOASModel.js';
class PulseButton extends RoundPushButton {
  /**
   * @param {WOASModel} model
   * @param {Object} [options]
   */
  constructor(model, options) {
    const pulseShape = new Shape().moveTo(-9, 0).lineTo(-3.5, 0).lineTo(0, -10).lineTo(3.5, 0).lineTo(9, 0);
    super(merge({
      listener: () => {
        model.manualPulse();
        model.isPlayingProperty.value = true;
        model.yNowChangedEmitter.emit();
      },
      baseColor: '#33dd33',
      content: new Node({
        children: [new Path(pulseShape, {
          lineWidth: 3,
          stroke: '#eee',
          lineCap: 'round'
        }), new Path(pulseShape, {
          lineWidth: 1.5,
          stroke: '#333',
          lineCap: 'round'
        })]
      }),
      radius: 17,
      xMargin: 6,
      yMargin: 6,
      yContentOffset: -1
    }, options));
    this.touchArea = this.localBounds.dilatedXY(5, 10);
    model.waveModeProperty.link(mode => {
      this.visible = mode === WOASModel.Mode.PULSE;
    });
  }
}
waveOnAString.register('PulseButton', PulseButton);
export default PulseButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm1lcmdlIiwiTm9kZSIsIlBhdGgiLCJSb3VuZFB1c2hCdXR0b24iLCJ3YXZlT25BU3RyaW5nIiwiV09BU01vZGVsIiwiUHVsc2VCdXR0b24iLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwib3B0aW9ucyIsInB1bHNlU2hhcGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJsaXN0ZW5lciIsIm1hbnVhbFB1bHNlIiwiaXNQbGF5aW5nUHJvcGVydHkiLCJ2YWx1ZSIsInlOb3dDaGFuZ2VkRW1pdHRlciIsImVtaXQiLCJiYXNlQ29sb3IiLCJjb250ZW50IiwiY2hpbGRyZW4iLCJsaW5lV2lkdGgiLCJzdHJva2UiLCJsaW5lQ2FwIiwicmFkaXVzIiwieE1hcmdpbiIsInlNYXJnaW4iLCJ5Q29udGVudE9mZnNldCIsInRvdWNoQXJlYSIsImxvY2FsQm91bmRzIiwiZGlsYXRlZFhZIiwid2F2ZU1vZGVQcm9wZXJ0eSIsImxpbmsiLCJtb2RlIiwidmlzaWJsZSIsIk1vZGUiLCJQVUxTRSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUHVsc2VCdXR0b24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQnV0dG9uIHRoYXQgc3RhcnRzIGEgcHVsc2VcclxuICpcclxuICogQGF1dGhvciBBbnRvbiBVbHlhbm92IChNbGVhcm5lcilcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJvdW5kUHVzaEJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9Sb3VuZFB1c2hCdXR0b24uanMnO1xyXG5pbXBvcnQgd2F2ZU9uQVN0cmluZyBmcm9tICcuLi8uLi93YXZlT25BU3RyaW5nLmpzJztcclxuaW1wb3J0IFdPQVNNb2RlbCBmcm9tICcuLi9tb2RlbC9XT0FTTW9kZWwuanMnO1xyXG5cclxuY2xhc3MgUHVsc2VCdXR0b24gZXh0ZW5kcyBSb3VuZFB1c2hCdXR0b24ge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7V09BU01vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG9wdGlvbnMgKSB7XHJcbiAgICBjb25zdCBwdWxzZVNoYXBlID0gbmV3IFNoYXBlKCkubW92ZVRvKCAtOSwgMCApLmxpbmVUbyggLTMuNSwgMCApLmxpbmVUbyggMCwgLTEwICkubGluZVRvKCAzLjUsIDAgKS5saW5lVG8oIDksIDAgKTtcclxuXHJcbiAgICBzdXBlciggbWVyZ2UoIHtcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICBtb2RlbC5tYW51YWxQdWxzZSgpO1xyXG4gICAgICAgIG1vZGVsLmlzUGxheWluZ1Byb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuICAgICAgICBtb2RlbC55Tm93Q2hhbmdlZEVtaXR0ZXIuZW1pdCgpO1xyXG4gICAgICB9LFxyXG4gICAgICBiYXNlQ29sb3I6ICcjMzNkZDMzJyxcclxuICAgICAgY29udGVudDogbmV3IE5vZGUoIHtcclxuICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgbmV3IFBhdGgoIHB1bHNlU2hhcGUsIHtcclxuICAgICAgICAgICAgbGluZVdpZHRoOiAzLFxyXG4gICAgICAgICAgICBzdHJva2U6ICcjZWVlJyxcclxuICAgICAgICAgICAgbGluZUNhcDogJ3JvdW5kJ1xyXG4gICAgICAgICAgfSApLFxyXG4gICAgICAgICAgbmV3IFBhdGgoIHB1bHNlU2hhcGUsIHtcclxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLjUsXHJcbiAgICAgICAgICAgIHN0cm9rZTogJyMzMzMnLFxyXG4gICAgICAgICAgICBsaW5lQ2FwOiAncm91bmQnXHJcbiAgICAgICAgICB9IClcclxuICAgICAgICBdXHJcbiAgICAgIH0gKSxcclxuICAgICAgcmFkaXVzOiAxNyxcclxuICAgICAgeE1hcmdpbjogNixcclxuICAgICAgeU1hcmdpbjogNixcclxuICAgICAgeUNvbnRlbnRPZmZzZXQ6IC0xXHJcbiAgICB9LCBvcHRpb25zICkgKTtcclxuXHJcbiAgICB0aGlzLnRvdWNoQXJlYSA9IHRoaXMubG9jYWxCb3VuZHMuZGlsYXRlZFhZKCA1LCAxMCApO1xyXG5cclxuICAgIG1vZGVsLndhdmVNb2RlUHJvcGVydHkubGluayggbW9kZSA9PiB7XHJcbiAgICAgIHRoaXMudmlzaWJsZSA9IG1vZGUgPT09IFdPQVNNb2RlbC5Nb2RlLlBVTFNFO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxud2F2ZU9uQVN0cmluZy5yZWdpc3RlciggJ1B1bHNlQnV0dG9uJywgUHVsc2VCdXR0b24gKTtcclxuZXhwb3J0IGRlZmF1bHQgUHVsc2VCdXR0b247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsZUFBZSxNQUFNLCtDQUErQztBQUMzRSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLFNBQVMsTUFBTSx1QkFBdUI7QUFFN0MsTUFBTUMsV0FBVyxTQUFTSCxlQUFlLENBQUM7RUFDeEM7QUFDRjtBQUNBO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUc7SUFDNUIsTUFBTUMsVUFBVSxHQUFHLElBQUlYLEtBQUssQ0FBQyxDQUFDLENBQUNZLE1BQU0sQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQ0MsTUFBTSxDQUFFLENBQUMsR0FBRyxFQUFFLENBQUUsQ0FBQyxDQUFDQSxNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRyxDQUFDLENBQUNBLE1BQU0sQ0FBRSxHQUFHLEVBQUUsQ0FBRSxDQUFDLENBQUNBLE1BQU0sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0lBRWpILEtBQUssQ0FBRVosS0FBSyxDQUFFO01BQ1phLFFBQVEsRUFBRUEsQ0FBQSxLQUFNO1FBQ2RMLEtBQUssQ0FBQ00sV0FBVyxDQUFDLENBQUM7UUFDbkJOLEtBQUssQ0FBQ08saUJBQWlCLENBQUNDLEtBQUssR0FBRyxJQUFJO1FBQ3BDUixLQUFLLENBQUNTLGtCQUFrQixDQUFDQyxJQUFJLENBQUMsQ0FBQztNQUNqQyxDQUFDO01BQ0RDLFNBQVMsRUFBRSxTQUFTO01BQ3BCQyxPQUFPLEVBQUUsSUFBSW5CLElBQUksQ0FBRTtRQUNqQm9CLFFBQVEsRUFBRSxDQUNSLElBQUluQixJQUFJLENBQUVRLFVBQVUsRUFBRTtVQUNwQlksU0FBUyxFQUFFLENBQUM7VUFDWkMsTUFBTSxFQUFFLE1BQU07VUFDZEMsT0FBTyxFQUFFO1FBQ1gsQ0FBRSxDQUFDLEVBQ0gsSUFBSXRCLElBQUksQ0FBRVEsVUFBVSxFQUFFO1VBQ3BCWSxTQUFTLEVBQUUsR0FBRztVQUNkQyxNQUFNLEVBQUUsTUFBTTtVQUNkQyxPQUFPLEVBQUU7UUFDWCxDQUFFLENBQUM7TUFFUCxDQUFFLENBQUM7TUFDSEMsTUFBTSxFQUFFLEVBQUU7TUFDVkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsY0FBYyxFQUFFLENBQUM7SUFDbkIsQ0FBQyxFQUFFbkIsT0FBUSxDQUFFLENBQUM7SUFFZCxJQUFJLENBQUNvQixTQUFTLEdBQUcsSUFBSSxDQUFDQyxXQUFXLENBQUNDLFNBQVMsQ0FBRSxDQUFDLEVBQUUsRUFBRyxDQUFDO0lBRXBEdkIsS0FBSyxDQUFDd0IsZ0JBQWdCLENBQUNDLElBQUksQ0FBRUMsSUFBSSxJQUFJO01BQ25DLElBQUksQ0FBQ0MsT0FBTyxHQUFHRCxJQUFJLEtBQUs3QixTQUFTLENBQUMrQixJQUFJLENBQUNDLEtBQUs7SUFDOUMsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBakMsYUFBYSxDQUFDa0MsUUFBUSxDQUFFLGFBQWEsRUFBRWhDLFdBQVksQ0FBQztBQUNwRCxlQUFlQSxXQUFXIn0=