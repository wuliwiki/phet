// Copyright 2019-2022, University of Colorado Boulder

/**
 * HistogramsModel is a sub-model in the Energy screen, responsible for the Speed and Kinetic Energy histograms.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Emitter from '../../../../axon/js/Emitter.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Property from '../../../../axon/js/Property.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
import ArrayIO from '../../../../tandem/js/types/ArrayIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import gasProperties from '../../gasProperties.js';
export default class HistogramsModel {
  // number of bins, common to both histograms
  // bin width for the Speed histogram, in pm/ps
  // bin width for the Kinetic Energy histogram, in AMU * pm^2 / ps^2;
  // Speed bin counts
  // Kinetic Energy bin counts
  // the y-axis scale for all histograms
  // emits when the bin counts have been updated
  // speed samples
  // Speed samples for heavy particles
  // Speed samples for light particles
  // Kinetic Energy samples
  // Kinetic Energy samples for heavy particles
  // Kinetic Energy samples for light particles
  // for measuring sample period
  /**
   * @param particleSystem
   * @param isPlayingProperty
   * @param samplePeriod - data is averaged over this period, in ps
   * @param providedOptions
   */
  constructor(particleSystem, isPlayingProperty, samplePeriod, providedOptions) {
    assert && assert(samplePeriod > 0, `invalid samplePeriod: ${samplePeriod}`);
    const options = providedOptions;
    this.particleSystem = particleSystem;
    this.isPlayingProperty = isPlayingProperty;
    this.samplePeriod = samplePeriod;

    // values chosen in https://github.com/phetsims/gas-properties/issues/52
    this.numberOfBins = 19;
    this.speedBinWidth = 170;
    this.kineticEnergyBinWidth = 8E5;

    // Initialize histograms with 0 in all bins
    const emptyBins = [];
    for (let i = this.numberOfBins - 1; i >= 0; i--) {
      emptyBins[i] = 0;
    }
    const binCountsPropertyOptions = {
      isValidValue: binCounts => binCounts.length === this.numberOfBins,
      phetioValueType: ArrayIO(NumberIO),
      phetioReadOnly: true // derived from the state of the particle system
    };

    this.heavySpeedBinCountsProperty = new Property(emptyBins, combineOptions({}, binCountsPropertyOptions, {
      tandem: options.tandem.createTandem('heavySpeedBinCountsProperty'),
      phetioDocumentation: 'Speed histogram bin counts for heavy particles'
    }));
    this.lightSpeedBinCountsProperty = new Property(emptyBins, combineOptions({}, binCountsPropertyOptions, {
      tandem: options.tandem.createTandem('lightSpeedBinCountsProperty'),
      phetioDocumentation: 'Speed histogram bin counts for light particles'
    }));
    this.allSpeedBinCountsProperty = new Property(emptyBins, combineOptions({}, binCountsPropertyOptions, {
      tandem: options.tandem.createTandem('allSpeedBinCountsProperty'),
      phetioDocumentation: 'Speed histogram bin counts for all particles'
    }));
    this.heavyKineticEnergyBinCountsProperty = new Property(emptyBins, combineOptions({}, binCountsPropertyOptions, {
      tandem: options.tandem.createTandem('heavyKineticEnergyBinCountsProperty'),
      phetioDocumentation: 'Kinetic Energy histogram bin counts for heavy particles'
    }));
    this.lightKineticEnergyBinCountsProperty = new Property(emptyBins, combineOptions({}, binCountsPropertyOptions, {
      tandem: options.tandem.createTandem('lightKineticEnergyBinCountsProperty'),
      phetioDocumentation: 'Kinetic Energy histogram bin counts for light particles'
    }));
    this.allKineticEnergyBinCountsProperty = new Property(emptyBins, combineOptions({}, binCountsPropertyOptions, {
      tandem: options.tandem.createTandem('allKineticEnergyBinCountsProperty'),
      phetioDocumentation: 'Kinetic Energy histogram bin counts for all particles'
    }));
    this.yScaleProperty = new NumberProperty(GasPropertiesConstants.HISTOGRAM_LINE_SPACING, {
      isValidValue: value => value >= GasPropertiesConstants.HISTOGRAM_LINE_SPACING,
      tandem: options.tandem.createTandem('yScaleProperty'),
      phetioReadOnly: true,
      phetioDocumentation: 'scale of the y-axis for the Speed and Kinetic Energy histograms'
    });
    this.binCountsUpdatedEmitter = new Emitter();
    this.heavySpeedSamples = [];
    this.lightSpeedSamples = [];
    this.heavyKineticEnergySamples = [];
    this.lightKineticEnergySamples = [];
    this.dtAccumulator = 0;
    this.numberOfSamples = 0;

    // Clear sample data when the play state changes, so that we can update immediately if manually stepping.
    isPlayingProperty.link(() => {
      this.clearSamples();
    });

    // If the number of particles becomes zero, or changes while paused, update immediately.
    particleSystem.numberOfParticlesProperty.link(numberOfParticles => {
      if (numberOfParticles === 0 || !isPlayingProperty.value) {
        this.clearSamples();
        this.step(this.samplePeriod); // using the sample period causes an immediate update
      }
    });
  }

  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.clearSamples();
  }

  /**
   * Clears the sample data.
   */
  clearSamples() {
    this.dtAccumulator = 0;
    this.numberOfSamples = 0;

    // clear Speed samples
    this.heavySpeedSamples.length = 0;
    this.lightSpeedSamples.length = 0;

    // clear Kinetic Energy samples
    this.heavyKineticEnergySamples.length = 0;
    this.lightKineticEnergySamples.length = 0;
  }

  /**
   * Steps the histograms.
   * @param dt - time delta, in ps
   */
  step(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);

    // Accumulate dt
    this.dtAccumulator += dt;

    // Takes data samples
    this.sample();

    // Update now if we've reached the end of the sample period, or if we're manually stepping
    if (this.dtAccumulator >= this.samplePeriod || !this.isPlayingProperty.value) {
      this.update();
    }
  }

  /**
   * Takes a data sample for histograms.
   */
  sample() {
    assert && assert(!(this.numberOfSamples !== 0 && !this.isPlayingProperty.value), 'numberOfSamples should be 0 if called while the sim is paused');

    // take a Speed sample
    this.heavySpeedSamples.push(getSpeedValues(this.particleSystem.heavyParticles));
    this.lightSpeedSamples.push(getSpeedValues(this.particleSystem.lightParticles));

    // take a Kinetic Energy sample
    this.heavyKineticEnergySamples.push(getKineticEnergyValues(this.particleSystem.heavyParticles));
    this.lightKineticEnergySamples.push(getKineticEnergyValues(this.particleSystem.lightParticles));
    this.numberOfSamples++;
  }

  /**
   * Updates the histograms using the current sample data.
   */
  update() {
    assert && assert(!(this.numberOfSamples !== 1 && !this.isPlayingProperty.value), 'numberOfSamples should be 1 if called while the sim is paused');

    // update Speed bin counts
    this.heavySpeedBinCountsProperty.value = samplesToBinCounts(this.heavySpeedSamples, this.numberOfBins, this.speedBinWidth);
    this.lightSpeedBinCountsProperty.value = samplesToBinCounts(this.lightSpeedSamples, this.numberOfBins, this.speedBinWidth);
    this.allSpeedBinCountsProperty.value = sumBinCounts(this.heavySpeedBinCountsProperty.value, this.lightSpeedBinCountsProperty.value);

    // update Kinetic Energy bin counts
    this.heavyKineticEnergyBinCountsProperty.value = samplesToBinCounts(this.heavyKineticEnergySamples, this.numberOfBins, this.kineticEnergyBinWidth);
    this.lightKineticEnergyBinCountsProperty.value = samplesToBinCounts(this.lightKineticEnergySamples, this.numberOfBins, this.kineticEnergyBinWidth);
    this.allKineticEnergyBinCountsProperty.value = sumBinCounts(this.heavyKineticEnergyBinCountsProperty.value, this.lightKineticEnergyBinCountsProperty.value);

    // Find the maximum bin count for all histograms. It's sufficient to look at the 'all' histograms.
    // This is used to determine the y-axis scale, which must be the same for both histograms.
    const maxBinCount = Math.max(getMaxBinCount(this.allSpeedBinCountsProperty.value), getMaxBinCount(this.allKineticEnergyBinCountsProperty.value));

    // Adjust the y-axis scale to accommodate the maximum bin count.
    // Increase the y scale a bit so that there's always a little space above maxBinCount.
    // The minimum scale is determined by the spacing between horizontal lines in the histogram view.
    // We don't want to the scale to be less than one interval of the horizontal lines, so that the
    // y-axis doesn't scale for small numbers of particles.
    this.yScaleProperty.value = Math.max(1.05 * maxBinCount, GasPropertiesConstants.HISTOGRAM_LINE_SPACING);

    // Notify listeners that the bin counts have been updated.
    this.binCountsUpdatedEmitter.emit();

    // Clear sample data in preparation for the next sample period.
    this.clearSamples();
  }
}

/**
 * Gets the maximum in a set of bin counts, zero if the array is empty.
 */
function getMaxBinCount(binCounts) {
  let maxBinCount = 0;
  if (binCounts.length > 0) {
    maxBinCount = _.max(binCounts);
  }
  return maxBinCount;
}

/**
 * Gets the speed values for a set of particles, in pm/ps.
 */
function getSpeedValues(particles) {
  const values = [];
  for (let i = particles.length - 1; i >= 0; i--) {
    values.push(particles[i].velocity.magnitude);
  }
  return values;
}

/**
 * Gets the kinetic energy values for a set of particles, in in AMU * pm^2 / ps^2.
 */
function getKineticEnergyValues(particles) {
  const values = [];
  for (let i = particles.length - 1; i >= 0; i--) {
    values.push(particles[i].getKineticEnergy());
  }
  return values;
}

/**
 * Converts a collection of samples to bin counts.
 */
function samplesToBinCounts(sampleArrays, numberOfBins, binWidth) {
  assert && assert(numberOfBins > 0, `invalid numberOfBins: ${numberOfBins}`);
  assert && assert(binWidth > 0, `invalid binWidth: ${binWidth}`);

  // Initialize the bins with 0 counts
  const binCounts = [];
  for (let i = 0; i < numberOfBins; i++) {
    binCounts[i] = 0;
  }

  // Bin the sample data, for total binCounts
  for (let i = sampleArrays.length - 1; i >= 0; i--) {
    const values = sampleArrays[i];
    for (let j = values.length - 1; j >= 0; j--) {
      const index = Math.floor(values[j] / binWidth); // bin range is [min,max)
      if (index >= 0 && index < binCounts.length) {
        binCounts[index]++;
      }
    }
  }

  // Average the bin counts
  for (let i = binCounts.length - 1; i >= 0; i--) {
    assert && assert(typeof binCounts[i] === 'number' && binCounts[i] >= 0, `invalid binCount: ${binCounts[i]}`);
    binCounts[i] = binCounts[i] / sampleArrays.length;
  }
  assert && assert(binCounts.length === numberOfBins, `unexpected number of binCounts: ${binCounts.length}`);
  return binCounts;
}

/**
 * Sums the heavy and light bin counts to produce the bin counts for all particles.
 */
function sumBinCounts(heavyBinCounts, lightBinCounts) {
  assert && assert(heavyBinCounts.length === lightBinCounts.length, 'lengths should be the same');
  const sumBinCounts = [];
  for (let i = heavyBinCounts.length - 1; i >= 0; i--) {
    sumBinCounts[i] = heavyBinCounts[i] + lightBinCounts[i];
  }
  return sumBinCounts;
}
gasProperties.register('HistogramsModel', HistogramsModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiTnVtYmVyUHJvcGVydHkiLCJQcm9wZXJ0eSIsImNvbWJpbmVPcHRpb25zIiwiQXJyYXlJTyIsIk51bWJlcklPIiwiR2FzUHJvcGVydGllc0NvbnN0YW50cyIsImdhc1Byb3BlcnRpZXMiLCJIaXN0b2dyYW1zTW9kZWwiLCJjb25zdHJ1Y3RvciIsInBhcnRpY2xlU3lzdGVtIiwiaXNQbGF5aW5nUHJvcGVydHkiLCJzYW1wbGVQZXJpb2QiLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJvcHRpb25zIiwibnVtYmVyT2ZCaW5zIiwic3BlZWRCaW5XaWR0aCIsImtpbmV0aWNFbmVyZ3lCaW5XaWR0aCIsImVtcHR5QmlucyIsImkiLCJiaW5Db3VudHNQcm9wZXJ0eU9wdGlvbnMiLCJpc1ZhbGlkVmFsdWUiLCJiaW5Db3VudHMiLCJsZW5ndGgiLCJwaGV0aW9WYWx1ZVR5cGUiLCJwaGV0aW9SZWFkT25seSIsImhlYXZ5U3BlZWRCaW5Db3VudHNQcm9wZXJ0eSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJsaWdodFNwZWVkQmluQ291bnRzUHJvcGVydHkiLCJhbGxTcGVlZEJpbkNvdW50c1Byb3BlcnR5IiwiaGVhdnlLaW5ldGljRW5lcmd5QmluQ291bnRzUHJvcGVydHkiLCJsaWdodEtpbmV0aWNFbmVyZ3lCaW5Db3VudHNQcm9wZXJ0eSIsImFsbEtpbmV0aWNFbmVyZ3lCaW5Db3VudHNQcm9wZXJ0eSIsInlTY2FsZVByb3BlcnR5IiwiSElTVE9HUkFNX0xJTkVfU1BBQ0lORyIsInZhbHVlIiwiYmluQ291bnRzVXBkYXRlZEVtaXR0ZXIiLCJoZWF2eVNwZWVkU2FtcGxlcyIsImxpZ2h0U3BlZWRTYW1wbGVzIiwiaGVhdnlLaW5ldGljRW5lcmd5U2FtcGxlcyIsImxpZ2h0S2luZXRpY0VuZXJneVNhbXBsZXMiLCJkdEFjY3VtdWxhdG9yIiwibnVtYmVyT2ZTYW1wbGVzIiwibGluayIsImNsZWFyU2FtcGxlcyIsIm51bWJlck9mUGFydGljbGVzUHJvcGVydHkiLCJudW1iZXJPZlBhcnRpY2xlcyIsInN0ZXAiLCJkaXNwb3NlIiwicmVzZXQiLCJkdCIsInNhbXBsZSIsInVwZGF0ZSIsInB1c2giLCJnZXRTcGVlZFZhbHVlcyIsImhlYXZ5UGFydGljbGVzIiwibGlnaHRQYXJ0aWNsZXMiLCJnZXRLaW5ldGljRW5lcmd5VmFsdWVzIiwic2FtcGxlc1RvQmluQ291bnRzIiwic3VtQmluQ291bnRzIiwibWF4QmluQ291bnQiLCJNYXRoIiwibWF4IiwiZ2V0TWF4QmluQ291bnQiLCJlbWl0IiwiXyIsInBhcnRpY2xlcyIsInZhbHVlcyIsInZlbG9jaXR5IiwibWFnbml0dWRlIiwiZ2V0S2luZXRpY0VuZXJneSIsInNhbXBsZUFycmF5cyIsImJpbldpZHRoIiwiaiIsImluZGV4IiwiZmxvb3IiLCJoZWF2eUJpbkNvdW50cyIsImxpZ2h0QmluQ291bnRzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJIaXN0b2dyYW1zTW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSGlzdG9ncmFtc01vZGVsIGlzIGEgc3ViLW1vZGVsIGluIHRoZSBFbmVyZ3kgc2NyZWVuLCByZXNwb25zaWJsZSBmb3IgdGhlIFNwZWVkIGFuZCBLaW5ldGljIEVuZXJneSBoaXN0b2dyYW1zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW1pdHRlci5qcyc7XHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5LCB7IFByb3BlcnR5T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IGNvbWJpbmVPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IEFycmF5SU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0FycmF5SU8uanMnO1xyXG5pbXBvcnQgTnVtYmVySU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bWJlcklPLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0dhc1Byb3BlcnRpZXNDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUGFydGljbGUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1BhcnRpY2xlLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlU3lzdGVtIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9QYXJ0aWNsZVN5c3RlbS5qcyc7XHJcbmltcG9ydCBnYXNQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2dhc1Byb3BlcnRpZXMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEhpc3RvZ3JhbXNNb2RlbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQaGV0aW9PYmplY3RPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIaXN0b2dyYW1zTW9kZWwge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHBhcnRpY2xlU3lzdGVtOiBQYXJ0aWNsZVN5c3RlbTtcclxuICBwcml2YXRlIHJlYWRvbmx5IGlzUGxheWluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwcml2YXRlIHJlYWRvbmx5IHNhbXBsZVBlcmlvZDogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgbnVtYmVyT2ZCaW5zOiBudW1iZXI7IC8vIG51bWJlciBvZiBiaW5zLCBjb21tb24gdG8gYm90aCBoaXN0b2dyYW1zXHJcbiAgcHVibGljIHJlYWRvbmx5IHNwZWVkQmluV2lkdGg6IG51bWJlcjsgLy8gYmluIHdpZHRoIGZvciB0aGUgU3BlZWQgaGlzdG9ncmFtLCBpbiBwbS9wc1xyXG4gIHB1YmxpYyByZWFkb25seSBraW5ldGljRW5lcmd5QmluV2lkdGg6IG51bWJlcjsgLy8gYmluIHdpZHRoIGZvciB0aGUgS2luZXRpYyBFbmVyZ3kgaGlzdG9ncmFtLCBpbiBBTVUgKiBwbV4yIC8gcHNeMjtcclxuXHJcbiAgLy8gU3BlZWQgYmluIGNvdW50c1xyXG4gIHB1YmxpYyByZWFkb25seSBoZWF2eVNwZWVkQmluQ291bnRzUHJvcGVydHk6IFByb3BlcnR5PG51bWJlcltdPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbGlnaHRTcGVlZEJpbkNvdW50c1Byb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXJbXT47XHJcbiAgcHVibGljIHJlYWRvbmx5IGFsbFNwZWVkQmluQ291bnRzUHJvcGVydHk6IFByb3BlcnR5PG51bWJlcltdPjtcclxuXHJcbiAgLy8gS2luZXRpYyBFbmVyZ3kgYmluIGNvdW50c1xyXG4gIHB1YmxpYyByZWFkb25seSBoZWF2eUtpbmV0aWNFbmVyZ3lCaW5Db3VudHNQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyW10+O1xyXG4gIHB1YmxpYyByZWFkb25seSBsaWdodEtpbmV0aWNFbmVyZ3lCaW5Db3VudHNQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyW10+O1xyXG4gIHB1YmxpYyByZWFkb25seSBhbGxLaW5ldGljRW5lcmd5QmluQ291bnRzUHJvcGVydHk6IFByb3BlcnR5PG51bWJlcltdPjtcclxuXHJcbiAgLy8gdGhlIHktYXhpcyBzY2FsZSBmb3IgYWxsIGhpc3RvZ3JhbXNcclxuICBwdWJsaWMgcmVhZG9ubHkgeVNjYWxlUHJvcGVydHk6IFByb3BlcnR5PG51bWJlcj47XHJcblxyXG4gIC8vIGVtaXRzIHdoZW4gdGhlIGJpbiBjb3VudHMgaGF2ZSBiZWVuIHVwZGF0ZWRcclxuICBwdWJsaWMgcmVhZG9ubHkgYmluQ291bnRzVXBkYXRlZEVtaXR0ZXI6IEVtaXR0ZXI7XHJcblxyXG4gIC8vIHNwZWVkIHNhbXBsZXNcclxuICBwcml2YXRlIHJlYWRvbmx5IGhlYXZ5U3BlZWRTYW1wbGVzOiBudW1iZXJbXVtdOyAvLyBTcGVlZCBzYW1wbGVzIGZvciBoZWF2eSBwYXJ0aWNsZXNcclxuICBwcml2YXRlIHJlYWRvbmx5IGxpZ2h0U3BlZWRTYW1wbGVzOiBudW1iZXJbXVtdOyAvLyBTcGVlZCBzYW1wbGVzIGZvciBsaWdodCBwYXJ0aWNsZXNcclxuXHJcbiAgLy8gS2luZXRpYyBFbmVyZ3kgc2FtcGxlc1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgaGVhdnlLaW5ldGljRW5lcmd5U2FtcGxlczogbnVtYmVyW11bXTsgLy8gS2luZXRpYyBFbmVyZ3kgc2FtcGxlcyBmb3IgaGVhdnkgcGFydGljbGVzXHJcbiAgcHJpdmF0ZSByZWFkb25seSBsaWdodEtpbmV0aWNFbmVyZ3lTYW1wbGVzOiBudW1iZXJbXVtdOyAvLyBLaW5ldGljIEVuZXJneSBzYW1wbGVzIGZvciBsaWdodCBwYXJ0aWNsZXNcclxuXHJcbiAgLy8gZm9yIG1lYXN1cmluZyBzYW1wbGUgcGVyaW9kXHJcbiAgcHJpdmF0ZSBkdEFjY3VtdWxhdG9yOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBudW1iZXJPZlNhbXBsZXM6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHBhcnRpY2xlU3lzdGVtXHJcbiAgICogQHBhcmFtIGlzUGxheWluZ1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHNhbXBsZVBlcmlvZCAtIGRhdGEgaXMgYXZlcmFnZWQgb3ZlciB0aGlzIHBlcmlvZCwgaW4gcHNcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwYXJ0aWNsZVN5c3RlbTogUGFydGljbGVTeXN0ZW0sIGlzUGxheWluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZVBlcmlvZDogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM6IEhpc3RvZ3JhbXNNb2RlbE9wdGlvbnMgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzYW1wbGVQZXJpb2QgPiAwLCBgaW52YWxpZCBzYW1wbGVQZXJpb2Q6ICR7c2FtcGxlUGVyaW9kfWAgKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gcHJvdmlkZWRPcHRpb25zO1xyXG5cclxuICAgIHRoaXMucGFydGljbGVTeXN0ZW0gPSBwYXJ0aWNsZVN5c3RlbTtcclxuICAgIHRoaXMuaXNQbGF5aW5nUHJvcGVydHkgPSBpc1BsYXlpbmdQcm9wZXJ0eTtcclxuICAgIHRoaXMuc2FtcGxlUGVyaW9kID0gc2FtcGxlUGVyaW9kO1xyXG5cclxuICAgIC8vIHZhbHVlcyBjaG9zZW4gaW4gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2dhcy1wcm9wZXJ0aWVzL2lzc3Vlcy81MlxyXG4gICAgdGhpcy5udW1iZXJPZkJpbnMgPSAxOTtcclxuICAgIHRoaXMuc3BlZWRCaW5XaWR0aCA9IDE3MDtcclxuICAgIHRoaXMua2luZXRpY0VuZXJneUJpbldpZHRoID0gOEU1O1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgaGlzdG9ncmFtcyB3aXRoIDAgaW4gYWxsIGJpbnNcclxuICAgIGNvbnN0IGVtcHR5QmlucyA9IFtdO1xyXG4gICAgZm9yICggbGV0IGkgPSB0aGlzLm51bWJlck9mQmlucyAtIDE7IGkgPj0gMDsgaS0tICkge1xyXG4gICAgICBlbXB0eUJpbnNbIGkgXSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmluQ291bnRzUHJvcGVydHlPcHRpb25zID0ge1xyXG4gICAgICBpc1ZhbGlkVmFsdWU6ICggYmluQ291bnRzOiBudW1iZXJbXSApID0+ICggYmluQ291bnRzLmxlbmd0aCA9PT0gdGhpcy5udW1iZXJPZkJpbnMgKSxcclxuICAgICAgcGhldGlvVmFsdWVUeXBlOiBBcnJheUlPKCBOdW1iZXJJTyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSAvLyBkZXJpdmVkIGZyb20gdGhlIHN0YXRlIG9mIHRoZSBwYXJ0aWNsZSBzeXN0ZW1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5oZWF2eVNwZWVkQmluQ291bnRzUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGVtcHR5QmlucyxcclxuICAgICAgY29tYmluZU9wdGlvbnM8UHJvcGVydHlPcHRpb25zPG51bWJlcltdPj4oIHt9LCBiaW5Db3VudHNQcm9wZXJ0eU9wdGlvbnMsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2hlYXZ5U3BlZWRCaW5Db3VudHNQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnU3BlZWQgaGlzdG9ncmFtIGJpbiBjb3VudHMgZm9yIGhlYXZ5IHBhcnRpY2xlcydcclxuICAgICAgfSApICk7XHJcblxyXG4gICAgdGhpcy5saWdodFNwZWVkQmluQ291bnRzUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGVtcHR5QmlucyxcclxuICAgICAgY29tYmluZU9wdGlvbnM8UHJvcGVydHlPcHRpb25zPG51bWJlcltdPj4oIHt9LCBiaW5Db3VudHNQcm9wZXJ0eU9wdGlvbnMsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xpZ2h0U3BlZWRCaW5Db3VudHNQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnU3BlZWQgaGlzdG9ncmFtIGJpbiBjb3VudHMgZm9yIGxpZ2h0IHBhcnRpY2xlcydcclxuICAgICAgfSApICk7XHJcblxyXG4gICAgdGhpcy5hbGxTcGVlZEJpbkNvdW50c1Byb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBlbXB0eUJpbnMsXHJcbiAgICAgIGNvbWJpbmVPcHRpb25zPFByb3BlcnR5T3B0aW9uczxudW1iZXJbXT4+KCB7fSwgYmluQ291bnRzUHJvcGVydHlPcHRpb25zLCB7XHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhbGxTcGVlZEJpbkNvdW50c1Byb3BlcnR5JyApLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdTcGVlZCBoaXN0b2dyYW0gYmluIGNvdW50cyBmb3IgYWxsIHBhcnRpY2xlcydcclxuICAgICAgfSApICk7XHJcblxyXG4gICAgdGhpcy5oZWF2eUtpbmV0aWNFbmVyZ3lCaW5Db3VudHNQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggZW1wdHlCaW5zLFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxQcm9wZXJ0eU9wdGlvbnM8bnVtYmVyW10+Pigge30sIGJpbkNvdW50c1Byb3BlcnR5T3B0aW9ucywge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnaGVhdnlLaW5ldGljRW5lcmd5QmluQ291bnRzUHJvcGVydHknICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ0tpbmV0aWMgRW5lcmd5IGhpc3RvZ3JhbSBiaW4gY291bnRzIGZvciBoZWF2eSBwYXJ0aWNsZXMnXHJcbiAgICAgIH0gKSApO1xyXG5cclxuICAgIHRoaXMubGlnaHRLaW5ldGljRW5lcmd5QmluQ291bnRzUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGVtcHR5QmlucyxcclxuICAgICAgY29tYmluZU9wdGlvbnM8UHJvcGVydHlPcHRpb25zPG51bWJlcltdPj4oIHt9LCBiaW5Db3VudHNQcm9wZXJ0eU9wdGlvbnMsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xpZ2h0S2luZXRpY0VuZXJneUJpbkNvdW50c1Byb3BlcnR5JyApLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdLaW5ldGljIEVuZXJneSBoaXN0b2dyYW0gYmluIGNvdW50cyBmb3IgbGlnaHQgcGFydGljbGVzJ1xyXG4gICAgICB9ICkgKTtcclxuXHJcbiAgICB0aGlzLmFsbEtpbmV0aWNFbmVyZ3lCaW5Db3VudHNQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggZW1wdHlCaW5zLFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxQcm9wZXJ0eU9wdGlvbnM8bnVtYmVyW10+Pigge30sIGJpbkNvdW50c1Byb3BlcnR5T3B0aW9ucywge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYWxsS2luZXRpY0VuZXJneUJpbkNvdW50c1Byb3BlcnR5JyApLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdLaW5ldGljIEVuZXJneSBoaXN0b2dyYW0gYmluIGNvdW50cyBmb3IgYWxsIHBhcnRpY2xlcydcclxuICAgICAgfSApICk7XHJcblxyXG4gICAgdGhpcy55U2NhbGVQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggR2FzUHJvcGVydGllc0NvbnN0YW50cy5ISVNUT0dSQU1fTElORV9TUEFDSU5HLCB7XHJcbiAgICAgIGlzVmFsaWRWYWx1ZTogdmFsdWUgPT4gKCB2YWx1ZSA+PSBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLkhJU1RPR1JBTV9MSU5FX1NQQUNJTkcgKSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd5U2NhbGVQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWUsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdzY2FsZSBvZiB0aGUgeS1heGlzIGZvciB0aGUgU3BlZWQgYW5kIEtpbmV0aWMgRW5lcmd5IGhpc3RvZ3JhbXMnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5iaW5Db3VudHNVcGRhdGVkRW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XHJcblxyXG4gICAgdGhpcy5oZWF2eVNwZWVkU2FtcGxlcyA9IFtdO1xyXG4gICAgdGhpcy5saWdodFNwZWVkU2FtcGxlcyA9IFtdO1xyXG5cclxuICAgIHRoaXMuaGVhdnlLaW5ldGljRW5lcmd5U2FtcGxlcyA9IFtdO1xyXG4gICAgdGhpcy5saWdodEtpbmV0aWNFbmVyZ3lTYW1wbGVzID0gW107XHJcblxyXG4gICAgdGhpcy5kdEFjY3VtdWxhdG9yID0gMDtcclxuICAgIHRoaXMubnVtYmVyT2ZTYW1wbGVzID0gMDtcclxuXHJcbiAgICAvLyBDbGVhciBzYW1wbGUgZGF0YSB3aGVuIHRoZSBwbGF5IHN0YXRlIGNoYW5nZXMsIHNvIHRoYXQgd2UgY2FuIHVwZGF0ZSBpbW1lZGlhdGVseSBpZiBtYW51YWxseSBzdGVwcGluZy5cclxuICAgIGlzUGxheWluZ1Byb3BlcnR5LmxpbmsoICgpID0+IHtcclxuICAgICAgdGhpcy5jbGVhclNhbXBsZXMoKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBJZiB0aGUgbnVtYmVyIG9mIHBhcnRpY2xlcyBiZWNvbWVzIHplcm8sIG9yIGNoYW5nZXMgd2hpbGUgcGF1c2VkLCB1cGRhdGUgaW1tZWRpYXRlbHkuXHJcbiAgICBwYXJ0aWNsZVN5c3RlbS5udW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5LmxpbmsoIG51bWJlck9mUGFydGljbGVzID0+IHtcclxuICAgICAgaWYgKCBudW1iZXJPZlBhcnRpY2xlcyA9PT0gMCB8fCAhaXNQbGF5aW5nUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhclNhbXBsZXMoKTtcclxuICAgICAgICB0aGlzLnN0ZXAoIHRoaXMuc2FtcGxlUGVyaW9kICk7IC8vIHVzaW5nIHRoZSBzYW1wbGUgcGVyaW9kIGNhdXNlcyBhbiBpbW1lZGlhdGUgdXBkYXRlXHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNsZWFyU2FtcGxlcygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYXJzIHRoZSBzYW1wbGUgZGF0YS5cclxuICAgKi9cclxuICBwcml2YXRlIGNsZWFyU2FtcGxlcygpOiB2b2lkIHtcclxuXHJcbiAgICB0aGlzLmR0QWNjdW11bGF0b3IgPSAwO1xyXG4gICAgdGhpcy5udW1iZXJPZlNhbXBsZXMgPSAwO1xyXG5cclxuICAgIC8vIGNsZWFyIFNwZWVkIHNhbXBsZXNcclxuICAgIHRoaXMuaGVhdnlTcGVlZFNhbXBsZXMubGVuZ3RoID0gMDtcclxuICAgIHRoaXMubGlnaHRTcGVlZFNhbXBsZXMubGVuZ3RoID0gMDtcclxuXHJcbiAgICAvLyBjbGVhciBLaW5ldGljIEVuZXJneSBzYW1wbGVzXHJcbiAgICB0aGlzLmhlYXZ5S2luZXRpY0VuZXJneVNhbXBsZXMubGVuZ3RoID0gMDtcclxuICAgIHRoaXMubGlnaHRLaW5ldGljRW5lcmd5U2FtcGxlcy5sZW5ndGggPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcHMgdGhlIGhpc3RvZ3JhbXMuXHJcbiAgICogQHBhcmFtIGR0IC0gdGltZSBkZWx0YSwgaW4gcHNcclxuICAgKi9cclxuICBwdWJsaWMgc3RlcCggZHQ6IG51bWJlciApOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGR0ID4gMCwgYGludmFsaWQgZHQ6ICR7ZHR9YCApO1xyXG5cclxuICAgIC8vIEFjY3VtdWxhdGUgZHRcclxuICAgIHRoaXMuZHRBY2N1bXVsYXRvciArPSBkdDtcclxuXHJcbiAgICAvLyBUYWtlcyBkYXRhIHNhbXBsZXNcclxuICAgIHRoaXMuc2FtcGxlKCk7XHJcblxyXG4gICAgLy8gVXBkYXRlIG5vdyBpZiB3ZSd2ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHNhbXBsZSBwZXJpb2QsIG9yIGlmIHdlJ3JlIG1hbnVhbGx5IHN0ZXBwaW5nXHJcbiAgICBpZiAoIHRoaXMuZHRBY2N1bXVsYXRvciA+PSB0aGlzLnNhbXBsZVBlcmlvZCB8fCAhdGhpcy5pc1BsYXlpbmdQcm9wZXJ0eS52YWx1ZSApIHtcclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRha2VzIGEgZGF0YSBzYW1wbGUgZm9yIGhpc3RvZ3JhbXMuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzYW1wbGUoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhKCB0aGlzLm51bWJlck9mU2FtcGxlcyAhPT0gMCAmJiAhdGhpcy5pc1BsYXlpbmdQcm9wZXJ0eS52YWx1ZSApLFxyXG4gICAgICAnbnVtYmVyT2ZTYW1wbGVzIHNob3VsZCBiZSAwIGlmIGNhbGxlZCB3aGlsZSB0aGUgc2ltIGlzIHBhdXNlZCcgKTtcclxuXHJcbiAgICAvLyB0YWtlIGEgU3BlZWQgc2FtcGxlXHJcbiAgICB0aGlzLmhlYXZ5U3BlZWRTYW1wbGVzLnB1c2goIGdldFNwZWVkVmFsdWVzKCB0aGlzLnBhcnRpY2xlU3lzdGVtLmhlYXZ5UGFydGljbGVzICkgKTtcclxuICAgIHRoaXMubGlnaHRTcGVlZFNhbXBsZXMucHVzaCggZ2V0U3BlZWRWYWx1ZXMoIHRoaXMucGFydGljbGVTeXN0ZW0ubGlnaHRQYXJ0aWNsZXMgKSApO1xyXG5cclxuICAgIC8vIHRha2UgYSBLaW5ldGljIEVuZXJneSBzYW1wbGVcclxuICAgIHRoaXMuaGVhdnlLaW5ldGljRW5lcmd5U2FtcGxlcy5wdXNoKCBnZXRLaW5ldGljRW5lcmd5VmFsdWVzKCB0aGlzLnBhcnRpY2xlU3lzdGVtLmhlYXZ5UGFydGljbGVzICkgKTtcclxuICAgIHRoaXMubGlnaHRLaW5ldGljRW5lcmd5U2FtcGxlcy5wdXNoKCBnZXRLaW5ldGljRW5lcmd5VmFsdWVzKCB0aGlzLnBhcnRpY2xlU3lzdGVtLmxpZ2h0UGFydGljbGVzICkgKTtcclxuXHJcbiAgICB0aGlzLm51bWJlck9mU2FtcGxlcysrO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyB0aGUgaGlzdG9ncmFtcyB1c2luZyB0aGUgY3VycmVudCBzYW1wbGUgZGF0YS5cclxuICAgKi9cclxuICBwcml2YXRlIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICEoIHRoaXMubnVtYmVyT2ZTYW1wbGVzICE9PSAxICYmICF0aGlzLmlzUGxheWluZ1Byb3BlcnR5LnZhbHVlICksXHJcbiAgICAgICdudW1iZXJPZlNhbXBsZXMgc2hvdWxkIGJlIDEgaWYgY2FsbGVkIHdoaWxlIHRoZSBzaW0gaXMgcGF1c2VkJyApO1xyXG5cclxuICAgIC8vIHVwZGF0ZSBTcGVlZCBiaW4gY291bnRzXHJcbiAgICB0aGlzLmhlYXZ5U3BlZWRCaW5Db3VudHNQcm9wZXJ0eS52YWx1ZSA9XHJcbiAgICAgIHNhbXBsZXNUb0JpbkNvdW50cyggdGhpcy5oZWF2eVNwZWVkU2FtcGxlcywgdGhpcy5udW1iZXJPZkJpbnMsIHRoaXMuc3BlZWRCaW5XaWR0aCApO1xyXG4gICAgdGhpcy5saWdodFNwZWVkQmluQ291bnRzUHJvcGVydHkudmFsdWUgPVxyXG4gICAgICBzYW1wbGVzVG9CaW5Db3VudHMoIHRoaXMubGlnaHRTcGVlZFNhbXBsZXMsIHRoaXMubnVtYmVyT2ZCaW5zLCB0aGlzLnNwZWVkQmluV2lkdGggKTtcclxuICAgIHRoaXMuYWxsU3BlZWRCaW5Db3VudHNQcm9wZXJ0eS52YWx1ZSA9XHJcbiAgICAgIHN1bUJpbkNvdW50cyggdGhpcy5oZWF2eVNwZWVkQmluQ291bnRzUHJvcGVydHkudmFsdWUsIHRoaXMubGlnaHRTcGVlZEJpbkNvdW50c1Byb3BlcnR5LnZhbHVlICk7XHJcblxyXG4gICAgLy8gdXBkYXRlIEtpbmV0aWMgRW5lcmd5IGJpbiBjb3VudHNcclxuICAgIHRoaXMuaGVhdnlLaW5ldGljRW5lcmd5QmluQ291bnRzUHJvcGVydHkudmFsdWUgPVxyXG4gICAgICBzYW1wbGVzVG9CaW5Db3VudHMoIHRoaXMuaGVhdnlLaW5ldGljRW5lcmd5U2FtcGxlcywgdGhpcy5udW1iZXJPZkJpbnMsIHRoaXMua2luZXRpY0VuZXJneUJpbldpZHRoICk7XHJcbiAgICB0aGlzLmxpZ2h0S2luZXRpY0VuZXJneUJpbkNvdW50c1Byb3BlcnR5LnZhbHVlID1cclxuICAgICAgc2FtcGxlc1RvQmluQ291bnRzKCB0aGlzLmxpZ2h0S2luZXRpY0VuZXJneVNhbXBsZXMsIHRoaXMubnVtYmVyT2ZCaW5zLCB0aGlzLmtpbmV0aWNFbmVyZ3lCaW5XaWR0aCApO1xyXG4gICAgdGhpcy5hbGxLaW5ldGljRW5lcmd5QmluQ291bnRzUHJvcGVydHkudmFsdWUgPVxyXG4gICAgICBzdW1CaW5Db3VudHMoIHRoaXMuaGVhdnlLaW5ldGljRW5lcmd5QmluQ291bnRzUHJvcGVydHkudmFsdWUsIHRoaXMubGlnaHRLaW5ldGljRW5lcmd5QmluQ291bnRzUHJvcGVydHkudmFsdWUgKTtcclxuXHJcbiAgICAvLyBGaW5kIHRoZSBtYXhpbXVtIGJpbiBjb3VudCBmb3IgYWxsIGhpc3RvZ3JhbXMuIEl0J3Mgc3VmZmljaWVudCB0byBsb29rIGF0IHRoZSAnYWxsJyBoaXN0b2dyYW1zLlxyXG4gICAgLy8gVGhpcyBpcyB1c2VkIHRvIGRldGVybWluZSB0aGUgeS1heGlzIHNjYWxlLCB3aGljaCBtdXN0IGJlIHRoZSBzYW1lIGZvciBib3RoIGhpc3RvZ3JhbXMuXHJcbiAgICBjb25zdCBtYXhCaW5Db3VudCA9IE1hdGgubWF4KFxyXG4gICAgICBnZXRNYXhCaW5Db3VudCggdGhpcy5hbGxTcGVlZEJpbkNvdW50c1Byb3BlcnR5LnZhbHVlICksXHJcbiAgICAgIGdldE1heEJpbkNvdW50KCB0aGlzLmFsbEtpbmV0aWNFbmVyZ3lCaW5Db3VudHNQcm9wZXJ0eS52YWx1ZSApICk7XHJcblxyXG4gICAgLy8gQWRqdXN0IHRoZSB5LWF4aXMgc2NhbGUgdG8gYWNjb21tb2RhdGUgdGhlIG1heGltdW0gYmluIGNvdW50LlxyXG4gICAgLy8gSW5jcmVhc2UgdGhlIHkgc2NhbGUgYSBiaXQgc28gdGhhdCB0aGVyZSdzIGFsd2F5cyBhIGxpdHRsZSBzcGFjZSBhYm92ZSBtYXhCaW5Db3VudC5cclxuICAgIC8vIFRoZSBtaW5pbXVtIHNjYWxlIGlzIGRldGVybWluZWQgYnkgdGhlIHNwYWNpbmcgYmV0d2VlbiBob3Jpem9udGFsIGxpbmVzIGluIHRoZSBoaXN0b2dyYW0gdmlldy5cclxuICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gdGhlIHNjYWxlIHRvIGJlIGxlc3MgdGhhbiBvbmUgaW50ZXJ2YWwgb2YgdGhlIGhvcml6b250YWwgbGluZXMsIHNvIHRoYXQgdGhlXHJcbiAgICAvLyB5LWF4aXMgZG9lc24ndCBzY2FsZSBmb3Igc21hbGwgbnVtYmVycyBvZiBwYXJ0aWNsZXMuXHJcbiAgICB0aGlzLnlTY2FsZVByb3BlcnR5LnZhbHVlID0gTWF0aC5tYXgoIDEuMDUgKiBtYXhCaW5Db3VudCwgR2FzUHJvcGVydGllc0NvbnN0YW50cy5ISVNUT0dSQU1fTElORV9TUEFDSU5HICk7XHJcblxyXG4gICAgLy8gTm90aWZ5IGxpc3RlbmVycyB0aGF0IHRoZSBiaW4gY291bnRzIGhhdmUgYmVlbiB1cGRhdGVkLlxyXG4gICAgdGhpcy5iaW5Db3VudHNVcGRhdGVkRW1pdHRlci5lbWl0KCk7XHJcblxyXG4gICAgLy8gQ2xlYXIgc2FtcGxlIGRhdGEgaW4gcHJlcGFyYXRpb24gZm9yIHRoZSBuZXh0IHNhbXBsZSBwZXJpb2QuXHJcbiAgICB0aGlzLmNsZWFyU2FtcGxlcygpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIG1heGltdW0gaW4gYSBzZXQgb2YgYmluIGNvdW50cywgemVybyBpZiB0aGUgYXJyYXkgaXMgZW1wdHkuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRNYXhCaW5Db3VudCggYmluQ291bnRzOiBudW1iZXJbXSApOiBudW1iZXIge1xyXG4gIGxldCBtYXhCaW5Db3VudCA9IDA7XHJcbiAgaWYgKCBiaW5Db3VudHMubGVuZ3RoID4gMCApIHtcclxuICAgIG1heEJpbkNvdW50ID0gXy5tYXgoIGJpbkNvdW50cyApITtcclxuICB9XHJcbiAgcmV0dXJuIG1heEJpbkNvdW50O1xyXG59XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgc3BlZWQgdmFsdWVzIGZvciBhIHNldCBvZiBwYXJ0aWNsZXMsIGluIHBtL3BzLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0U3BlZWRWYWx1ZXMoIHBhcnRpY2xlczogUGFydGljbGVbXSApOiBudW1iZXJbXSB7XHJcbiAgY29uc3QgdmFsdWVzID0gW107XHJcbiAgZm9yICggbGV0IGkgPSBwYXJ0aWNsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XHJcbiAgICB2YWx1ZXMucHVzaCggcGFydGljbGVzWyBpIF0udmVsb2NpdHkubWFnbml0dWRlICk7XHJcbiAgfVxyXG4gIHJldHVybiB2YWx1ZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBraW5ldGljIGVuZXJneSB2YWx1ZXMgZm9yIGEgc2V0IG9mIHBhcnRpY2xlcywgaW4gaW4gQU1VICogcG1eMiAvIHBzXjIuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRLaW5ldGljRW5lcmd5VmFsdWVzKCBwYXJ0aWNsZXM6IFBhcnRpY2xlW10gKTogbnVtYmVyW10ge1xyXG4gIGNvbnN0IHZhbHVlcyA9IFtdO1xyXG4gIGZvciAoIGxldCBpID0gcGFydGljbGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xyXG4gICAgdmFsdWVzLnB1c2goIHBhcnRpY2xlc1sgaSBdLmdldEtpbmV0aWNFbmVyZ3koKSApO1xyXG4gIH1cclxuICByZXR1cm4gdmFsdWVzO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydHMgYSBjb2xsZWN0aW9uIG9mIHNhbXBsZXMgdG8gYmluIGNvdW50cy5cclxuICovXHJcbmZ1bmN0aW9uIHNhbXBsZXNUb0JpbkNvdW50cyggc2FtcGxlQXJyYXlzOiBudW1iZXJbXVtdLCBudW1iZXJPZkJpbnM6IG51bWJlciwgYmluV2lkdGg6IG51bWJlciApOiBudW1iZXJbXSB7XHJcbiAgYXNzZXJ0ICYmIGFzc2VydCggbnVtYmVyT2ZCaW5zID4gMCwgYGludmFsaWQgbnVtYmVyT2ZCaW5zOiAke251bWJlck9mQmluc31gICk7XHJcbiAgYXNzZXJ0ICYmIGFzc2VydCggYmluV2lkdGggPiAwLCBgaW52YWxpZCBiaW5XaWR0aDogJHtiaW5XaWR0aH1gICk7XHJcblxyXG4gIC8vIEluaXRpYWxpemUgdGhlIGJpbnMgd2l0aCAwIGNvdW50c1xyXG4gIGNvbnN0IGJpbkNvdW50cyA9IFtdO1xyXG4gIGZvciAoIGxldCBpID0gMDsgaSA8IG51bWJlck9mQmluczsgaSsrICkge1xyXG4gICAgYmluQ291bnRzWyBpIF0gPSAwO1xyXG4gIH1cclxuXHJcbiAgLy8gQmluIHRoZSBzYW1wbGUgZGF0YSwgZm9yIHRvdGFsIGJpbkNvdW50c1xyXG4gIGZvciAoIGxldCBpID0gc2FtcGxlQXJyYXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xyXG4gICAgY29uc3QgdmFsdWVzID0gc2FtcGxlQXJyYXlzWyBpIF07XHJcbiAgICBmb3IgKCBsZXQgaiA9IHZhbHVlcy5sZW5ndGggLSAxOyBqID49IDA7IGotLSApIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBNYXRoLmZsb29yKCB2YWx1ZXNbIGogXSAvIGJpbldpZHRoICk7IC8vIGJpbiByYW5nZSBpcyBbbWluLG1heClcclxuICAgICAgaWYgKCBpbmRleCA+PSAwICYmIGluZGV4IDwgYmluQ291bnRzLmxlbmd0aCApIHtcclxuICAgICAgICBiaW5Db3VudHNbIGluZGV4IF0rKztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQXZlcmFnZSB0aGUgYmluIGNvdW50c1xyXG4gIGZvciAoIGxldCBpID0gYmluQ291bnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdHlwZW9mIGJpbkNvdW50c1sgaSBdID09PSAnbnVtYmVyJyAmJiBiaW5Db3VudHNbIGkgXSA+PSAwLFxyXG4gICAgICBgaW52YWxpZCBiaW5Db3VudDogJHtiaW5Db3VudHNbIGkgXX1gICk7XHJcbiAgICBiaW5Db3VudHNbIGkgXSA9IGJpbkNvdW50c1sgaSBdIC8gc2FtcGxlQXJyYXlzLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGFzc2VydCAmJiBhc3NlcnQoIGJpbkNvdW50cy5sZW5ndGggPT09IG51bWJlck9mQmlucywgYHVuZXhwZWN0ZWQgbnVtYmVyIG9mIGJpbkNvdW50czogJHtiaW5Db3VudHMubGVuZ3RofWAgKTtcclxuICByZXR1cm4gYmluQ291bnRzO1xyXG59XHJcblxyXG4vKipcclxuICogU3VtcyB0aGUgaGVhdnkgYW5kIGxpZ2h0IGJpbiBjb3VudHMgdG8gcHJvZHVjZSB0aGUgYmluIGNvdW50cyBmb3IgYWxsIHBhcnRpY2xlcy5cclxuICovXHJcbmZ1bmN0aW9uIHN1bUJpbkNvdW50cyggaGVhdnlCaW5Db3VudHM6IG51bWJlcltdLCBsaWdodEJpbkNvdW50czogbnVtYmVyW10gKTogbnVtYmVyW10ge1xyXG4gIGFzc2VydCAmJiBhc3NlcnQoIGhlYXZ5QmluQ291bnRzLmxlbmd0aCA9PT0gbGlnaHRCaW5Db3VudHMubGVuZ3RoLCAnbGVuZ3RocyBzaG91bGQgYmUgdGhlIHNhbWUnICk7XHJcblxyXG4gIGNvbnN0IHN1bUJpbkNvdW50cyA9IFtdO1xyXG4gIGZvciAoIGxldCBpID0gaGVhdnlCaW5Db3VudHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XHJcbiAgICBzdW1CaW5Db3VudHNbIGkgXSA9IGhlYXZ5QmluQ291bnRzWyBpIF0gKyBsaWdodEJpbkNvdW50c1sgaSBdO1xyXG4gIH1cclxuICByZXR1cm4gc3VtQmluQ291bnRzO1xyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnSGlzdG9ncmFtc01vZGVsJywgSGlzdG9ncmFtc01vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxnQ0FBZ0M7QUFDcEQsT0FBT0MsY0FBYyxNQUFNLHVDQUF1QztBQUNsRSxPQUFPQyxRQUFRLE1BQTJCLGlDQUFpQztBQUUzRSxTQUFTQyxjQUFjLFFBQTBCLHVDQUF1QztBQUd4RixPQUFPQyxPQUFPLE1BQU0sd0NBQXdDO0FBQzVELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0Msc0JBQXNCLE1BQU0sd0NBQXdDO0FBRzNFLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFNbEQsZUFBZSxNQUFNQyxlQUFlLENBQUM7RUFNRztFQUNDO0VBQ1E7RUFFL0M7RUFLQTtFQUtBO0VBR0E7RUFHQTtFQUNnRDtFQUNBO0VBRWhEO0VBQ3dEO0VBQ0E7RUFFeEQ7RUFJQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsY0FBOEIsRUFBRUMsaUJBQTZDLEVBQzdFQyxZQUFvQixFQUFFQyxlQUF1QyxFQUFHO0lBQ2xGQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsWUFBWSxHQUFHLENBQUMsRUFBRyx5QkFBd0JBLFlBQWEsRUFBRSxDQUFDO0lBRTdFLE1BQU1HLE9BQU8sR0FBR0YsZUFBZTtJQUUvQixJQUFJLENBQUNILGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNDLGlCQUFpQixH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