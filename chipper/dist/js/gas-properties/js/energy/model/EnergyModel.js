// Copyright 2018-2022, University of Colorado Boulder

/**
 * EnergyModel is the top-level model for the 'Energy' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import IdealGasLawModel from '../../common/model/IdealGasLawModel.js';
import gasProperties from '../../gasProperties.js';
import AverageSpeedModel from './AverageSpeedModel.js';
import HistogramsModel from './HistogramsModel.js';

// constants
const SAMPLE_PERIOD = 1; // sample period for Average Speed and histograms, in ps

export default class EnergyModel extends IdealGasLawModel {
  constructor(tandem) {
    super(tandem, {
      holdConstant: 'volume',
      hasCollisionCounter: false
    });

    // In case clients attempt to use this feature of the base class
    this.holdConstantProperty.lazyLink(holdConstant => {
      throw new Error('holdConstant is fixed in the Energy screen');
    });

    // In case clients attempt to use this feature of the base class
    this.container.widthProperty.lazyLink(width => {
      throw new Error('container width is fixed in the Energy screen');
    });
    this.histogramsModel = new HistogramsModel(this.particleSystem, this.isPlayingProperty, SAMPLE_PERIOD, {
      tandem: tandem.createTandem('histogramsModel')
    });
    this.averageSpeedModel = new AverageSpeedModel(this.particleSystem, this.isPlayingProperty, SAMPLE_PERIOD, {
      tandem: tandem.createTandem('averageSpeedModel')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    super.reset();
    this.averageSpeedModel.reset();
    this.histogramsModel.reset();
  }

  /**
   * Steps the model, using model time units.
   * @param dt - time delta, in ps
   */
  stepModelTime(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);
    super.stepModelTime(dt);
    this.averageSpeedModel.step(dt);
    this.histogramsModel.step(dt);
  }
}
gasProperties.register('EnergyModel', EnergyModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJZGVhbEdhc0xhd01vZGVsIiwiZ2FzUHJvcGVydGllcyIsIkF2ZXJhZ2VTcGVlZE1vZGVsIiwiSGlzdG9ncmFtc01vZGVsIiwiU0FNUExFX1BFUklPRCIsIkVuZXJneU1vZGVsIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJob2xkQ29uc3RhbnQiLCJoYXNDb2xsaXNpb25Db3VudGVyIiwiaG9sZENvbnN0YW50UHJvcGVydHkiLCJsYXp5TGluayIsIkVycm9yIiwiY29udGFpbmVyIiwid2lkdGhQcm9wZXJ0eSIsIndpZHRoIiwiaGlzdG9ncmFtc01vZGVsIiwicGFydGljbGVTeXN0ZW0iLCJpc1BsYXlpbmdQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsImF2ZXJhZ2VTcGVlZE1vZGVsIiwiZGlzcG9zZSIsImFzc2VydCIsInJlc2V0Iiwic3RlcE1vZGVsVGltZSIsImR0Iiwic3RlcCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5lcmd5TW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRW5lcmd5TW9kZWwgaXMgdGhlIHRvcC1sZXZlbCBtb2RlbCBmb3IgdGhlICdFbmVyZ3knIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgSWRlYWxHYXNMYXdNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvSWRlYWxHYXNMYXdNb2RlbC5qcyc7XHJcbmltcG9ydCBnYXNQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2dhc1Byb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgQXZlcmFnZVNwZWVkTW9kZWwgZnJvbSAnLi9BdmVyYWdlU3BlZWRNb2RlbC5qcyc7XHJcbmltcG9ydCBIaXN0b2dyYW1zTW9kZWwgZnJvbSAnLi9IaXN0b2dyYW1zTW9kZWwuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFNBTVBMRV9QRVJJT0QgPSAxOyAvLyBzYW1wbGUgcGVyaW9kIGZvciBBdmVyYWdlIFNwZWVkIGFuZCBoaXN0b2dyYW1zLCBpbiBwc1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5lcmd5TW9kZWwgZXh0ZW5kcyBJZGVhbEdhc0xhd01vZGVsIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGhpc3RvZ3JhbXNNb2RlbDogSGlzdG9ncmFtc01vZGVsO1xyXG4gIHB1YmxpYyByZWFkb25seSBhdmVyYWdlU3BlZWRNb2RlbDogQXZlcmFnZVNwZWVkTW9kZWw7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIHRhbmRlbSwge1xyXG4gICAgICBob2xkQ29uc3RhbnQ6ICd2b2x1bWUnLFxyXG4gICAgICBoYXNDb2xsaXNpb25Db3VudGVyOiBmYWxzZVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEluIGNhc2UgY2xpZW50cyBhdHRlbXB0IHRvIHVzZSB0aGlzIGZlYXR1cmUgb2YgdGhlIGJhc2UgY2xhc3NcclxuICAgIHRoaXMuaG9sZENvbnN0YW50UHJvcGVydHkubGF6eUxpbmsoIGhvbGRDb25zdGFudCA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ2hvbGRDb25zdGFudCBpcyBmaXhlZCBpbiB0aGUgRW5lcmd5IHNjcmVlbicgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBJbiBjYXNlIGNsaWVudHMgYXR0ZW1wdCB0byB1c2UgdGhpcyBmZWF0dXJlIG9mIHRoZSBiYXNlIGNsYXNzXHJcbiAgICB0aGlzLmNvbnRhaW5lci53aWR0aFByb3BlcnR5LmxhenlMaW5rKCB3aWR0aCA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ2NvbnRhaW5lciB3aWR0aCBpcyBmaXhlZCBpbiB0aGUgRW5lcmd5IHNjcmVlbicgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmhpc3RvZ3JhbXNNb2RlbCA9IG5ldyBIaXN0b2dyYW1zTW9kZWwoIHRoaXMucGFydGljbGVTeXN0ZW0sIHRoaXMuaXNQbGF5aW5nUHJvcGVydHksIFNBTVBMRV9QRVJJT0QsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaGlzdG9ncmFtc01vZGVsJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hdmVyYWdlU3BlZWRNb2RlbCA9IG5ldyBBdmVyYWdlU3BlZWRNb2RlbCggdGhpcy5wYXJ0aWNsZVN5c3RlbSwgdGhpcy5pc1BsYXlpbmdQcm9wZXJ0eSwgU0FNUExFX1BFUklPRCwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdhdmVyYWdlU3BlZWRNb2RlbCcgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNldCgpOiB2b2lkIHtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgICB0aGlzLmF2ZXJhZ2VTcGVlZE1vZGVsLnJlc2V0KCk7XHJcbiAgICB0aGlzLmhpc3RvZ3JhbXNNb2RlbC5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcHMgdGhlIG1vZGVsLCB1c2luZyBtb2RlbCB0aW1lIHVuaXRzLlxyXG4gICAqIEBwYXJhbSBkdCAtIHRpbWUgZGVsdGEsIGluIHBzXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHN0ZXBNb2RlbFRpbWUoIGR0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBkdCA+IDAsIGBpbnZhbGlkIGR0OiAke2R0fWAgKTtcclxuXHJcbiAgICBzdXBlci5zdGVwTW9kZWxUaW1lKCBkdCApO1xyXG4gICAgdGhpcy5hdmVyYWdlU3BlZWRNb2RlbC5zdGVwKCBkdCApO1xyXG4gICAgdGhpcy5oaXN0b2dyYW1zTW9kZWwuc3RlcCggZHQgKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdFbmVyZ3lNb2RlbCcsIEVuZXJneU1vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLGdCQUFnQixNQUFNLHdDQUF3QztBQUNyRSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCOztBQUVsRDtBQUNBLE1BQU1DLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQzs7QUFFekIsZUFBZSxNQUFNQyxXQUFXLFNBQVNMLGdCQUFnQixDQUFDO0VBS2pETSxXQUFXQSxDQUFFQyxNQUFjLEVBQUc7SUFFbkMsS0FBSyxDQUFFQSxNQUFNLEVBQUU7TUFDYkMsWUFBWSxFQUFFLFFBQVE7TUFDdEJDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNDLFFBQVEsQ0FBRUgsWUFBWSxJQUFJO01BQ2xELE1BQU0sSUFBSUksS0FBSyxDQUFFLDRDQUE2QyxDQUFDO0lBQ2pFLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxhQUFhLENBQUNILFFBQVEsQ0FBRUksS0FBSyxJQUFJO01BQzlDLE1BQU0sSUFBSUgsS0FBSyxDQUFFLCtDQUFnRCxDQUFDO0lBQ3BFLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0ksZUFBZSxHQUFHLElBQUliLGVBQWUsQ0FBRSxJQUFJLENBQUNjLGNBQWMsRUFBRSxJQUFJLENBQUNDLGlCQUFpQixFQUFFZCxhQUFhLEVBQUU7TUFDdEdHLE1BQU0sRUFBRUEsTUFBTSxDQUFDWSxZQUFZLENBQUUsaUJBQWtCO0lBQ2pELENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsSUFBSWxCLGlCQUFpQixDQUFFLElBQUksQ0FBQ2UsY0FBYyxFQUFFLElBQUksQ0FBQ0MsaUJBQWlCLEVBQUVkLGFBQWEsRUFBRTtNQUMxR0csTUFBTSxFQUFFQSxNQUFNLENBQUNZLFlBQVksQ0FBRSxtQkFBb0I7SUFDbkQsQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JFLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7RUFFZ0JFLEtBQUtBLENBQUEsRUFBUztJQUM1QixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBQ2IsSUFBSSxDQUFDSCxpQkFBaUIsQ0FBQ0csS0FBSyxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDUCxlQUFlLENBQUNPLEtBQUssQ0FBQyxDQUFDO0VBQzlCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ3FCQyxhQUFhQSxDQUFFQyxFQUFVLEVBQVM7SUFDbkRILE1BQU0sSUFBSUEsTUFBTSxDQUFFRyxFQUFFLEdBQUcsQ0FBQyxFQUFHLGVBQWNBLEVBQUcsRUFBRSxDQUFDO0lBRS9DLEtBQUssQ0FBQ0QsYUFBYSxDQUFFQyxFQUFHLENBQUM7SUFDekIsSUFBSSxDQUFDTCxpQkFBaUIsQ0FBQ00sSUFBSSxDQUFFRCxFQUFHLENBQUM7SUFDakMsSUFBSSxDQUFDVCxlQUFlLENBQUNVLElBQUksQ0FBRUQsRUFBRyxDQUFDO0VBQ2pDO0FBQ0Y7QUFFQXhCLGFBQWEsQ0FBQzBCLFFBQVEsQ0FBRSxhQUFhLEVBQUV0QixXQUFZLENBQUMifQ==