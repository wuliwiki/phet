// Copyright 2019-2022, University of Colorado Boulder

/**
 * SpeedHistogramNode shows the distribution of particle speeds in the container.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import GasPropertiesColors from '../../common/GasPropertiesColors.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesStrings from '../../GasPropertiesStrings.js';
import HistogramNode from './HistogramNode.js';
export default class SpeedHistogramNode extends HistogramNode {
  constructor(histogramsModel, providedOptions) {
    const options = optionize()({
      // HistogramNodeOptions
      barColor: GasPropertiesColors.speedHistogramBarColorProperty
    }, providedOptions);
    super(histogramsModel.numberOfBins, histogramsModel.speedBinWidth, histogramsModel.binCountsUpdatedEmitter, histogramsModel.allSpeedBinCountsProperty, histogramsModel.heavySpeedBinCountsProperty, histogramsModel.lightSpeedBinCountsProperty, histogramsModel.yScaleProperty, GasPropertiesStrings.speedStringProperty,
    // x-axis label
    GasPropertiesStrings.numberOfParticlesStringProperty,
    // y-axis label
    options);
  }
}
gasProperties.register('SpeedHistogramNode', SpeedHistogramNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJHYXNQcm9wZXJ0aWVzQ29sb3JzIiwiZ2FzUHJvcGVydGllcyIsIkdhc1Byb3BlcnRpZXNTdHJpbmdzIiwiSGlzdG9ncmFtTm9kZSIsIlNwZWVkSGlzdG9ncmFtTm9kZSIsImNvbnN0cnVjdG9yIiwiaGlzdG9ncmFtc01vZGVsIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImJhckNvbG9yIiwic3BlZWRIaXN0b2dyYW1CYXJDb2xvclByb3BlcnR5IiwibnVtYmVyT2ZCaW5zIiwic3BlZWRCaW5XaWR0aCIsImJpbkNvdW50c1VwZGF0ZWRFbWl0dGVyIiwiYWxsU3BlZWRCaW5Db3VudHNQcm9wZXJ0eSIsImhlYXZ5U3BlZWRCaW5Db3VudHNQcm9wZXJ0eSIsImxpZ2h0U3BlZWRCaW5Db3VudHNQcm9wZXJ0eSIsInlTY2FsZVByb3BlcnR5Iiwic3BlZWRTdHJpbmdQcm9wZXJ0eSIsIm51bWJlck9mUGFydGljbGVzU3RyaW5nUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNwZWVkSGlzdG9ncmFtTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTcGVlZEhpc3RvZ3JhbU5vZGUgc2hvd3MgdGhlIGRpc3RyaWJ1dGlvbiBvZiBwYXJ0aWNsZSBzcGVlZHMgaW4gdGhlIGNvbnRhaW5lci5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNDb2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL0dhc1Byb3BlcnRpZXNDb2xvcnMuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNTdHJpbmdzIGZyb20gJy4uLy4uL0dhc1Byb3BlcnRpZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IEhpc3RvZ3JhbXNNb2RlbCBmcm9tICcuLi9tb2RlbC9IaXN0b2dyYW1zTW9kZWwuanMnO1xyXG5pbXBvcnQgSGlzdG9ncmFtTm9kZSwgeyBIaXN0b2dyYW1Ob2RlT3B0aW9ucyB9IGZyb20gJy4vSGlzdG9ncmFtTm9kZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgU3BlZWRIaXN0b2dyYW1Ob2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPEhpc3RvZ3JhbU5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcGVlZEhpc3RvZ3JhbU5vZGUgZXh0ZW5kcyBIaXN0b2dyYW1Ob2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBoaXN0b2dyYW1zTW9kZWw6IEhpc3RvZ3JhbXNNb2RlbCwgcHJvdmlkZWRPcHRpb25zOiBTcGVlZEhpc3RvZ3JhbU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U3BlZWRIaXN0b2dyYW1Ob2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIEhpc3RvZ3JhbU5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBIaXN0b2dyYW1Ob2RlT3B0aW9uc1xyXG4gICAgICBiYXJDb2xvcjogR2FzUHJvcGVydGllc0NvbG9ycy5zcGVlZEhpc3RvZ3JhbUJhckNvbG9yUHJvcGVydHlcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICBoaXN0b2dyYW1zTW9kZWwubnVtYmVyT2ZCaW5zLFxyXG4gICAgICBoaXN0b2dyYW1zTW9kZWwuc3BlZWRCaW5XaWR0aCxcclxuICAgICAgaGlzdG9ncmFtc01vZGVsLmJpbkNvdW50c1VwZGF0ZWRFbWl0dGVyLFxyXG4gICAgICBoaXN0b2dyYW1zTW9kZWwuYWxsU3BlZWRCaW5Db3VudHNQcm9wZXJ0eSxcclxuICAgICAgaGlzdG9ncmFtc01vZGVsLmhlYXZ5U3BlZWRCaW5Db3VudHNQcm9wZXJ0eSxcclxuICAgICAgaGlzdG9ncmFtc01vZGVsLmxpZ2h0U3BlZWRCaW5Db3VudHNQcm9wZXJ0eSxcclxuICAgICAgaGlzdG9ncmFtc01vZGVsLnlTY2FsZVByb3BlcnR5LFxyXG4gICAgICBHYXNQcm9wZXJ0aWVzU3RyaW5ncy5zcGVlZFN0cmluZ1Byb3BlcnR5LCAvLyB4LWF4aXMgbGFiZWxcclxuICAgICAgR2FzUHJvcGVydGllc1N0cmluZ3MubnVtYmVyT2ZQYXJ0aWNsZXNTdHJpbmdQcm9wZXJ0eSwgLy8geS1heGlzIGxhYmVsXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnU3BlZWRIaXN0b2dyYW1Ob2RlJywgU3BlZWRIaXN0b2dyYW1Ob2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLE9BQU9DLG1CQUFtQixNQUFNLHFDQUFxQztBQUNyRSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUVoRSxPQUFPQyxhQUFhLE1BQWdDLG9CQUFvQjtBQU14RSxlQUFlLE1BQU1DLGtCQUFrQixTQUFTRCxhQUFhLENBQUM7RUFFckRFLFdBQVdBLENBQUVDLGVBQWdDLEVBQUVDLGVBQTBDLEVBQUc7SUFFakcsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQStELENBQUMsQ0FBRTtNQUV6RjtNQUNBVSxRQUFRLEVBQUVULG1CQUFtQixDQUFDVTtJQUNoQyxDQUFDLEVBQUVILGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUNIRCxlQUFlLENBQUNLLFlBQVksRUFDNUJMLGVBQWUsQ0FBQ00sYUFBYSxFQUM3Qk4sZUFBZSxDQUFDTyx1QkFBdUIsRUFDdkNQLGVBQWUsQ0FBQ1EseUJBQXlCLEVBQ3pDUixlQUFlLENBQUNTLDJCQUEyQixFQUMzQ1QsZUFBZSxDQUFDVSwyQkFBMkIsRUFDM0NWLGVBQWUsQ0FBQ1csY0FBYyxFQUM5QmYsb0JBQW9CLENBQUNnQixtQkFBbUI7SUFBRTtJQUMxQ2hCLG9CQUFvQixDQUFDaUIsK0JBQStCO0lBQUU7SUFDdERYLE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVAsYUFBYSxDQUFDbUIsUUFBUSxDQUFFLG9CQUFvQixFQUFFaEIsa0JBQW1CLENBQUMifQ==