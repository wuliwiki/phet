// Copyright 2019-2022, University of Colorado Boulder

/**
 * LinePlotNode plots histogram data as a set of connected line segments. It is used to overlay species-specific
 * histogram data on top of a more typical bar-style histogram.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Path } from '../../../../scenery/js/imports.js';
import gasProperties from '../../gasProperties.js';
export default class LinePlotNode extends Path {
  /**
   * @param chartSize - dimensions of the chart
   * @param yScaleProperty - scale of the y-axis
   * @param color - color of the line segments
   * @param lineWidth - width of the line segments
   */
  constructor(chartSize, yScaleProperty, color, lineWidth) {
    assert && assert(lineWidth > 0, `invalid lineWidth: ${lineWidth}`);
    super(new Shape(), {
      stroke: color,
      lineWidth: lineWidth
    });
    this.chartSize = chartSize;
    this.yScaleProperty = yScaleProperty;
    this.shapeBounds = new Bounds2(0, 0, chartSize.width, chartSize.height);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Draws the data as a set of line segments.
   * @param binCounts - the count for each bin
   */
  plot(binCounts) {
    assert && assert(binCounts.length > 0, `invalid binCounts: ${binCounts}`);
    const numberOfBins = binCounts.length;
    const binWidth = this.chartSize.width / numberOfBins;
    const shape = new Shape().moveTo(0, this.chartSize.height);
    let previousCount = 0;
    for (let i = 0; i < numberOfBins; i++) {
      const binCount = binCounts[i];
      assert && assert(binCount <= this.yScaleProperty.value, `binCount ${binCount} should be <= yScale ${this.yScaleProperty.value}`);
      const lineHeight = binCount / this.yScaleProperty.value * this.chartSize.height;
      const y = this.chartSize.height - lineHeight;
      if (binCount !== previousCount) {
        shape.lineTo(i * binWidth, y);
      }
      shape.lineTo((i + 1) * binWidth, y);
      previousCount = binCount;
    }
    this.shape = shape;
  }

  /**
   * Always use the full chart bounds, as a performance optimization.
   * See https://github.com/phetsims/gas-properties/issues/146
   */
  computeShapeBounds() {
    return this.shapeBounds;
  }
}
gasProperties.register('LinePlotNode', LinePlotNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiU2hhcGUiLCJQYXRoIiwiZ2FzUHJvcGVydGllcyIsIkxpbmVQbG90Tm9kZSIsImNvbnN0cnVjdG9yIiwiY2hhcnRTaXplIiwieVNjYWxlUHJvcGVydHkiLCJjb2xvciIsImxpbmVXaWR0aCIsImFzc2VydCIsInN0cm9rZSIsInNoYXBlQm91bmRzIiwid2lkdGgiLCJoZWlnaHQiLCJkaXNwb3NlIiwicGxvdCIsImJpbkNvdW50cyIsImxlbmd0aCIsIm51bWJlck9mQmlucyIsImJpbldpZHRoIiwic2hhcGUiLCJtb3ZlVG8iLCJwcmV2aW91c0NvdW50IiwiaSIsImJpbkNvdW50IiwidmFsdWUiLCJsaW5lSGVpZ2h0IiwieSIsImxpbmVUbyIsImNvbXB1dGVTaGFwZUJvdW5kcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGluZVBsb3ROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExpbmVQbG90Tm9kZSBwbG90cyBoaXN0b2dyYW0gZGF0YSBhcyBhIHNldCBvZiBjb25uZWN0ZWQgbGluZSBzZWdtZW50cy4gSXQgaXMgdXNlZCB0byBvdmVybGF5IHNwZWNpZXMtc3BlY2lmaWNcclxuICogaGlzdG9ncmFtIGRhdGEgb24gdG9wIG9mIGEgbW9yZSB0eXBpY2FsIGJhci1zdHlsZSBoaXN0b2dyYW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBQYXRoLCBUQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVQbG90Tm9kZSBleHRlbmRzIFBhdGgge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGNoYXJ0U2l6ZTogRGltZW5zaW9uMjtcclxuICBwcml2YXRlIHJlYWRvbmx5IHlTY2FsZVByb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXI+O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgc2hhcGVCb3VuZHM6IEJvdW5kczI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBjaGFydFNpemUgLSBkaW1lbnNpb25zIG9mIHRoZSBjaGFydFxyXG4gICAqIEBwYXJhbSB5U2NhbGVQcm9wZXJ0eSAtIHNjYWxlIG9mIHRoZSB5LWF4aXNcclxuICAgKiBAcGFyYW0gY29sb3IgLSBjb2xvciBvZiB0aGUgbGluZSBzZWdtZW50c1xyXG4gICAqIEBwYXJhbSBsaW5lV2lkdGggLSB3aWR0aCBvZiB0aGUgbGluZSBzZWdtZW50c1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY2hhcnRTaXplOiBEaW1lbnNpb24yLCB5U2NhbGVQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgY29sb3I6IFRDb2xvciwgbGluZVdpZHRoOiBudW1iZXIgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBsaW5lV2lkdGggPiAwLCBgaW52YWxpZCBsaW5lV2lkdGg6ICR7bGluZVdpZHRofWAgKTtcclxuXHJcbiAgICBzdXBlciggbmV3IFNoYXBlKCksIHtcclxuICAgICAgc3Ryb2tlOiBjb2xvcixcclxuICAgICAgbGluZVdpZHRoOiBsaW5lV2lkdGhcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmNoYXJ0U2l6ZSA9IGNoYXJ0U2l6ZTtcclxuICAgIHRoaXMueVNjYWxlUHJvcGVydHkgPSB5U2NhbGVQcm9wZXJ0eTtcclxuICAgIHRoaXMuc2hhcGVCb3VuZHMgPSBuZXcgQm91bmRzMiggMCwgMCwgY2hhcnRTaXplLndpZHRoLCBjaGFydFNpemUuaGVpZ2h0ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd3MgdGhlIGRhdGEgYXMgYSBzZXQgb2YgbGluZSBzZWdtZW50cy5cclxuICAgKiBAcGFyYW0gYmluQ291bnRzIC0gdGhlIGNvdW50IGZvciBlYWNoIGJpblxyXG4gICAqL1xyXG4gIHB1YmxpYyBwbG90KCBiaW5Db3VudHM6IG51bWJlcltdICk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYmluQ291bnRzLmxlbmd0aCA+IDAsIGBpbnZhbGlkIGJpbkNvdW50czogJHtiaW5Db3VudHN9YCApO1xyXG5cclxuICAgIGNvbnN0IG51bWJlck9mQmlucyA9IGJpbkNvdW50cy5sZW5ndGg7XHJcbiAgICBjb25zdCBiaW5XaWR0aCA9IHRoaXMuY2hhcnRTaXplLndpZHRoIC8gbnVtYmVyT2ZCaW5zO1xyXG5cclxuICAgIGNvbnN0IHNoYXBlID0gbmV3IFNoYXBlKCkubW92ZVRvKCAwLCB0aGlzLmNoYXJ0U2l6ZS5oZWlnaHQgKTtcclxuICAgIGxldCBwcmV2aW91c0NvdW50ID0gMDtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG51bWJlck9mQmluczsgaSsrICkge1xyXG5cclxuICAgICAgY29uc3QgYmluQ291bnQgPSBiaW5Db3VudHNbIGkgXTtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggYmluQ291bnQgPD0gdGhpcy55U2NhbGVQcm9wZXJ0eS52YWx1ZSxcclxuICAgICAgICBgYmluQ291bnQgJHtiaW5Db3VudH0gc2hvdWxkIGJlIDw9IHlTY2FsZSAke3RoaXMueVNjYWxlUHJvcGVydHkudmFsdWV9YCApO1xyXG5cclxuICAgICAgY29uc3QgbGluZUhlaWdodCA9ICggYmluQ291bnQgLyB0aGlzLnlTY2FsZVByb3BlcnR5LnZhbHVlICkgKiB0aGlzLmNoYXJ0U2l6ZS5oZWlnaHQ7XHJcbiAgICAgIGNvbnN0IHkgPSB0aGlzLmNoYXJ0U2l6ZS5oZWlnaHQgLSBsaW5lSGVpZ2h0O1xyXG5cclxuICAgICAgaWYgKCBiaW5Db3VudCAhPT0gcHJldmlvdXNDb3VudCApIHtcclxuICAgICAgICBzaGFwZS5saW5lVG8oIGkgKiBiaW5XaWR0aCwgeSApO1xyXG4gICAgICB9XHJcbiAgICAgIHNoYXBlLmxpbmVUbyggKCBpICsgMSApICogYmluV2lkdGgsIHkgKTtcclxuXHJcbiAgICAgIHByZXZpb3VzQ291bnQgPSBiaW5Db3VudDtcclxuICAgIH1cclxuICAgIHRoaXMuc2hhcGUgPSBzaGFwZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsd2F5cyB1c2UgdGhlIGZ1bGwgY2hhcnQgYm91bmRzLCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi5cclxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2dhcy1wcm9wZXJ0aWVzL2lzc3Vlcy8xNDZcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgY29tcHV0ZVNoYXBlQm91bmRzKCk6IEJvdW5kczIge1xyXG4gICAgcmV0dXJuIHRoaXMuc2hhcGVCb3VuZHM7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnTGluZVBsb3ROb2RlJywgTGluZVBsb3ROb2RlICk7Il0sIm1hcHBpbmdz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