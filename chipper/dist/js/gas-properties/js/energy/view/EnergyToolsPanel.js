// Copyright 2018-2022, University of Colorado Boulder

/**
 * EnergyToolsPanel is the panel that appears in the upper-right corner of the 'Energy' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { optionize4 } from '../../../../phet-core/js/optionize.js';
import { VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import StopwatchCheckbox from '../../common/view/StopwatchCheckbox.js';
import WidthCheckbox from '../../common/view/WidthCheckbox.js';
import gasProperties from '../../gasProperties.js';
export default class EnergyToolsPanel extends Panel {
  constructor(widthVisibleProperty, stopwatchVisibleProperty, providedOptions) {
    const options = optionize4()({}, GasPropertiesConstants.PANEL_OPTIONS, {
      // SelfOptions
      fixedWidth: 100,
      // PanelOptions
      xMargin: GasPropertiesConstants.PANEL_OPTIONS.xMargin
    }, providedOptions);
    const contentWidth = options.fixedWidth - 2 * options.xMargin;
    const content = new VBox({
      preferredWidth: contentWidth,
      widthSizable: false,
      // so that width will remain preferredWidth
      align: 'left',
      spacing: 12,
      children: [new WidthCheckbox(widthVisibleProperty, {
        textMaxWidth: 110,
        tandem: options.tandem.createTandem('widthCheckbox')
      }), new StopwatchCheckbox(stopwatchVisibleProperty, {
        textMaxWidth: 125,
        tandem: options.tandem.createTandem('stopwatchCheckbox')
      })]
    });
    super(content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('EnergyToolsPanel', EnergyToolsPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemU0IiwiVkJveCIsIlBhbmVsIiwiR2FzUHJvcGVydGllc0NvbnN0YW50cyIsIlN0b3B3YXRjaENoZWNrYm94IiwiV2lkdGhDaGVja2JveCIsImdhc1Byb3BlcnRpZXMiLCJFbmVyZ3lUb29sc1BhbmVsIiwiY29uc3RydWN0b3IiLCJ3aWR0aFZpc2libGVQcm9wZXJ0eSIsInN0b3B3YXRjaFZpc2libGVQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJQQU5FTF9PUFRJT05TIiwiZml4ZWRXaWR0aCIsInhNYXJnaW4iLCJjb250ZW50V2lkdGgiLCJjb250ZW50IiwicHJlZmVycmVkV2lkdGgiLCJ3aWR0aFNpemFibGUiLCJhbGlnbiIsInNwYWNpbmciLCJjaGlsZHJlbiIsInRleHRNYXhXaWR0aCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVuZXJneVRvb2xzUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRW5lcmd5VG9vbHNQYW5lbCBpcyB0aGUgcGFuZWwgdGhhdCBhcHBlYXJzIGluIHRoZSB1cHBlci1yaWdodCBjb3JuZXIgb2YgdGhlICdFbmVyZ3knIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IG9wdGlvbml6ZTQgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCwgeyBQYW5lbE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc0NvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vR2FzUHJvcGVydGllc0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBTdG9wd2F0Y2hDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9TdG9wd2F0Y2hDaGVja2JveC5qcyc7XHJcbmltcG9ydCBXaWR0aENoZWNrYm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1dpZHRoQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgZml4ZWRXaWR0aD86IG51bWJlcjtcclxufTtcclxuXHJcbnR5cGUgRW5lcmd5VG9vbHNQYW5lbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQYW5lbE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZXJneVRvb2xzUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggd2lkdGhWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LCBzdG9wd2F0Y2hWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBFbmVyZ3lUb29sc1BhbmVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplNDxFbmVyZ3lUb29sc1BhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhbmVsT3B0aW9ucz4oKShcclxuICAgICAge30sIEdhc1Byb3BlcnRpZXNDb25zdGFudHMuUEFORUxfT1BUSU9OUywge1xyXG5cclxuICAgICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICAgIGZpeGVkV2lkdGg6IDEwMCxcclxuXHJcbiAgICAgICAgLy8gUGFuZWxPcHRpb25zXHJcbiAgICAgICAgeE1hcmdpbjogR2FzUHJvcGVydGllc0NvbnN0YW50cy5QQU5FTF9PUFRJT05TLnhNYXJnaW5cclxuICAgICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudFdpZHRoID0gb3B0aW9ucy5maXhlZFdpZHRoIC0gKCAyICogb3B0aW9ucy54TWFyZ2luICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBWQm94KCB7XHJcbiAgICAgIHByZWZlcnJlZFdpZHRoOiBjb250ZW50V2lkdGgsXHJcbiAgICAgIHdpZHRoU2l6YWJsZTogZmFsc2UsIC8vIHNvIHRoYXQgd2lkdGggd2lsbCByZW1haW4gcHJlZmVycmVkV2lkdGhcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogMTIsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IFdpZHRoQ2hlY2tib3goIHdpZHRoVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgICAgICB0ZXh0TWF4V2lkdGg6IDExMCxcclxuICAgICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnd2lkdGhDaGVja2JveCcgKVxyXG4gICAgICAgIH0gKSxcclxuICAgICAgICBuZXcgU3RvcHdhdGNoQ2hlY2tib3goIHN0b3B3YXRjaFZpc2libGVQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgdGV4dE1heFdpZHRoOiAxMjUsXHJcbiAgICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3N0b3B3YXRjaENoZWNrYm94JyApXHJcbiAgICAgICAgfSApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdFbmVyZ3lUb29sc1BhbmVsJywgRW5lcmd5VG9vbHNQYW5lbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxTQUFTQSxVQUFVLFFBQVEsdUNBQXVDO0FBRWxFLFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsS0FBSyxNQUF3Qiw2QkFBNkI7QUFDakUsT0FBT0Msc0JBQXNCLE1BQU0sd0NBQXdDO0FBQzNFLE9BQU9DLGlCQUFpQixNQUFNLHdDQUF3QztBQUN0RSxPQUFPQyxhQUFhLE1BQU0sb0NBQW9DO0FBQzlELE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFRbEQsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU0wsS0FBSyxDQUFDO0VBRTNDTSxXQUFXQSxDQUFFQyxvQkFBdUMsRUFBRUMsd0JBQTJDLEVBQ3BGQyxlQUF3QyxFQUFHO0lBRTdELE1BQU1DLE9BQU8sR0FBR1osVUFBVSxDQUFxRCxDQUFDLENBQzlFLENBQUMsQ0FBQyxFQUFFRyxzQkFBc0IsQ0FBQ1UsYUFBYSxFQUFFO01BRXhDO01BQ0FDLFVBQVUsRUFBRSxHQUFHO01BRWY7TUFDQUMsT0FBTyxFQUFFWixzQkFBc0IsQ0FBQ1UsYUFBYSxDQUFDRTtJQUNoRCxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFdEIsTUFBTUssWUFBWSxHQUFHSixPQUFPLENBQUNFLFVBQVUsR0FBSyxDQUFDLEdBQUdGLE9BQU8sQ0FBQ0csT0FBUztJQUVqRSxNQUFNRSxPQUFPLEdBQUcsSUFBSWhCLElBQUksQ0FBRTtNQUN4QmlCLGNBQWMsRUFBRUYsWUFBWTtNQUM1QkcsWUFBWSxFQUFFLEtBQUs7TUFBRTtNQUNyQkMsS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsUUFBUSxFQUFFLENBQ1IsSUFBSWpCLGFBQWEsQ0FBRUksb0JBQW9CLEVBQUU7UUFDdkNjLFlBQVksRUFBRSxHQUFHO1FBQ2pCQyxNQUFNLEVBQUVaLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDQyxZQUFZLENBQUUsZUFBZ0I7TUFDdkQsQ0FBRSxDQUFDLEVBQ0gsSUFBSXJCLGlCQUFpQixDQUFFTSx3QkFBd0IsRUFBRTtRQUMvQ2EsWUFBWSxFQUFFLEdBQUc7UUFDakJDLE1BQU0sRUFBRVosT0FBTyxDQUFDWSxNQUFNLENBQUNDLFlBQVksQ0FBRSxtQkFBb0I7TUFDM0QsQ0FBRSxDQUFDO0lBRVAsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFUixPQUFPLEVBQUVMLE9BQVEsQ0FBQztFQUMzQjtFQUVnQmMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFwQixhQUFhLENBQUNzQixRQUFRLENBQUUsa0JBQWtCLEVBQUVyQixnQkFBaUIsQ0FBQyJ9