// Copyright 2018-2022, University of Colorado Boulder

/**
 * EnergyViewProperties defines Properties that are specific to the view in the 'Energy' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import IdealGasLawViewProperties from '../../common/view/IdealGasLawViewProperties.js';
import gasProperties from '../../gasProperties.js';
export default class EnergyViewProperties extends IdealGasLawViewProperties {
  constructor(tandem) {
    super(tandem);
    this.averageSpeedExpandedProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('averageSpeedExpandedProperty'),
      phetioDocumentation: 'whether the Average Speed accordion box is expanded'
    });
    this.speedExpandedProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('speedExpandedProperty'),
      phetioDocumentation: 'whether the Speed accordion box is expanded'
    });
    this.kineticEnergyExpandedProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('kineticEnergyExpandedProperty'),
      phetioDocumentation: 'whether the Kinetic Energy accordion box is expanded'
    });
    this.injectionTemperatureExpandedProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('injectionTemperatureExpandedProperty'),
      phetioDocumentation: 'whether the Injection Temperature accordion box is expanded'
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    super.reset();
    this.averageSpeedExpandedProperty.reset();
    this.speedExpandedProperty.reset();
    this.kineticEnergyExpandedProperty.reset();
    this.injectionTemperatureExpandedProperty.reset();
  }
}
gasProperties.register('EnergyViewProperties', EnergyViewProperties);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJJZGVhbEdhc0xhd1ZpZXdQcm9wZXJ0aWVzIiwiZ2FzUHJvcGVydGllcyIsIkVuZXJneVZpZXdQcm9wZXJ0aWVzIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJhdmVyYWdlU3BlZWRFeHBhbmRlZFByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInNwZWVkRXhwYW5kZWRQcm9wZXJ0eSIsImtpbmV0aWNFbmVyZ3lFeHBhbmRlZFByb3BlcnR5IiwiaW5qZWN0aW9uVGVtcGVyYXR1cmVFeHBhbmRlZFByb3BlcnR5IiwiZGlzcG9zZSIsImFzc2VydCIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbmVyZ3lWaWV3UHJvcGVydGllcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFbmVyZ3lWaWV3UHJvcGVydGllcyBkZWZpbmVzIFByb3BlcnRpZXMgdGhhdCBhcmUgc3BlY2lmaWMgdG8gdGhlIHZpZXcgaW4gdGhlICdFbmVyZ3knIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgSWRlYWxHYXNMYXdWaWV3UHJvcGVydGllcyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9JZGVhbEdhc0xhd1ZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmVyZ3lWaWV3UHJvcGVydGllcyBleHRlbmRzIElkZWFsR2FzTGF3Vmlld1Byb3BlcnRpZXMge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgYXZlcmFnZVNwZWVkRXhwYW5kZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHVibGljIHJlYWRvbmx5IHNwZWVkRXhwYW5kZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHVibGljIHJlYWRvbmx5IGtpbmV0aWNFbmVyZ3lFeHBhbmRlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaW5qZWN0aW9uVGVtcGVyYXR1cmVFeHBhbmRlZFByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggdGFuZGVtICk7XHJcblxyXG4gICAgdGhpcy5hdmVyYWdlU3BlZWRFeHBhbmRlZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdhdmVyYWdlU3BlZWRFeHBhbmRlZFByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnd2hldGhlciB0aGUgQXZlcmFnZSBTcGVlZCBhY2NvcmRpb24gYm94IGlzIGV4cGFuZGVkJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuc3BlZWRFeHBhbmRlZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzcGVlZEV4cGFuZGVkUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd3aGV0aGVyIHRoZSBTcGVlZCBhY2NvcmRpb24gYm94IGlzIGV4cGFuZGVkJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMua2luZXRpY0VuZXJneUV4cGFuZGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdraW5ldGljRW5lcmd5RXhwYW5kZWRQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3doZXRoZXIgdGhlIEtpbmV0aWMgRW5lcmd5IGFjY29yZGlvbiBib3ggaXMgZXhwYW5kZWQnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5pbmplY3Rpb25UZW1wZXJhdHVyZUV4cGFuZGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdpbmplY3Rpb25UZW1wZXJhdHVyZUV4cGFuZGVkUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd3aGV0aGVyIHRoZSBJbmplY3Rpb24gVGVtcGVyYXR1cmUgYWNjb3JkaW9uIGJveCBpcyBleHBhbmRlZCdcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy5hdmVyYWdlU3BlZWRFeHBhbmRlZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnNwZWVkRXhwYW5kZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5raW5ldGljRW5lcmd5RXhwYW5kZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5pbmplY3Rpb25UZW1wZXJhdHVyZUV4cGFuZGVkUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdFbmVyZ3lWaWV3UHJvcGVydGllcycsIEVuZXJneVZpZXdQcm9wZXJ0aWVzICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFHcEUsT0FBT0MseUJBQXlCLE1BQU0sZ0RBQWdEO0FBQ3RGLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFFbEQsZUFBZSxNQUFNQyxvQkFBb0IsU0FBU0YseUJBQXlCLENBQUM7RUFPbkVHLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxLQUFLLENBQUVBLE1BQU8sQ0FBQztJQUVmLElBQUksQ0FBQ0MsNEJBQTRCLEdBQUcsSUFBSU4sZUFBZSxDQUFFLElBQUksRUFBRTtNQUM3REssTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSw4QkFBK0IsQ0FBQztNQUM3REMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxxQkFBcUIsR0FBRyxJQUFJVCxlQUFlLENBQUUsSUFBSSxFQUFFO01BQ3RESyxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLHVCQUF3QixDQUFDO01BQ3REQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNFLDZCQUE2QixHQUFHLElBQUlWLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDL0RLLE1BQU0sRUFBRUEsTUFBTSxDQUFDRSxZQUFZLENBQUUsK0JBQWdDLENBQUM7TUFDOURDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0csb0NBQW9DLEdBQUcsSUFBSVgsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUN0RUssTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSxzQ0FBdUMsQ0FBQztNQUNyRUMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0VBQ0w7RUFFZ0JJLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7RUFFZ0JFLEtBQUtBLENBQUEsRUFBUztJQUM1QixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBQ2IsSUFBSSxDQUFDUiw0QkFBNEIsQ0FBQ1EsS0FBSyxDQUFDLENBQUM7SUFDekMsSUFBSSxDQUFDTCxxQkFBcUIsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7SUFDbEMsSUFBSSxDQUFDSiw2QkFBNkIsQ0FBQ0ksS0FBSyxDQUFDLENBQUM7SUFDMUMsSUFBSSxDQUFDSCxvQ0FBb0MsQ0FBQ0csS0FBSyxDQUFDLENBQUM7RUFDbkQ7QUFDRjtBQUVBWixhQUFhLENBQUNhLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRVosb0JBQXFCLENBQUMifQ==