// Copyright 2019-2022, University of Colorado Boulder

/**
 * AverageSpeedAccordionBox displays the average speed (in m/s) for each type of particle in the container.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PatternStringProperty from '../../../../axon/js/PatternStringProperty.js';
import Range from '../../../../dot/js/Range.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
import NumberDisplay from '../../../../scenery-phet/js/NumberDisplay.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { GridBox, HStrut, Text, VBox } from '../../../../scenery/js/imports.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import SunConstants from '../../../../sun/js/SunConstants.js';
import GasPropertiesColors from '../../common/GasPropertiesColors.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import GasPropertiesIconFactory from '../../common/view/GasPropertiesIconFactory.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesStrings from '../../GasPropertiesStrings.js';
export default class AverageSpeedAccordionBox extends AccordionBox {
  constructor(heavyAverageSpeedProperty, lightAverageSpeedProperty, modelViewTransform, providedOptions) {
    const options = optionize4()({}, GasPropertiesConstants.ACCORDION_BOX_OPTIONS, {
      // SelfOptions
      fixedWidth: 100,
      // AccordionBoxOptions
      contentXMargin: GasPropertiesConstants.ACCORDION_BOX_OPTIONS.contentXMargin,
      contentYSpacing: 0,
      titleNode: new Text(GasPropertiesStrings.averageSpeedStringProperty, {
        font: GasPropertiesConstants.TITLE_FONT,
        fill: GasPropertiesColors.textFillProperty
      })
    }, providedOptions);

    // Limit width of title
    options.titleNode.maxWidth = 0.75 * options.fixedWidth; // determined empirically

    // icons for the particles
    const heavyParticleNode = GasPropertiesIconFactory.createHeavyParticleIcon(modelViewTransform);
    const lightParticleNode = GasPropertiesIconFactory.createLightParticleIcon(modelViewTransform);

    // add a horizontal strut so that icons have the same effective width
    const maxWidth = Math.max(heavyParticleNode.width, lightParticleNode.width);
    heavyParticleNode.addChild(new HStrut(maxWidth, {
      center: heavyParticleNode.center
    }));
    lightParticleNode.addChild(new HStrut(maxWidth, {
      center: lightParticleNode.center
    }));
    const numberDisplayRange = new Range(0, 9999);
    const numberDisplayOptions = {
      valuePattern: new PatternStringProperty(GasPropertiesStrings.valueUnitsStringProperty, {
        units: GasPropertiesStrings.metersPerSecondStringProperty
      }),
      noValuePattern: SunConstants.VALUE_NAMED_PLACEHOLDER,
      decimalPlaces: 0,
      align: 'right',
      noValueAlign: 'left',
      textOptions: {
        font: new PhetFont(16),
        fill: GasPropertiesColors.textFillProperty
      },
      backgroundFill: null,
      backgroundStroke: null,
      maxWidth: 150
    };

    // These Properties are in pm/ps, and we want to display in m/s.  There is no need to convert the values,
    // since the conversion (1E-12) is the same for numerator and denominator.
    const heavyNumberDisplay = new NumberDisplay(heavyAverageSpeedProperty, numberDisplayRange, numberDisplayOptions);
    const lightNumberDisplay = new NumberDisplay(lightAverageSpeedProperty, numberDisplayRange, numberDisplayOptions);
    const contentWidth = options.fixedWidth - 2 * options.contentXMargin;

    // layout icons and NumberDisplays in a grid
    const gridBox = new GridBox({
      rows: [[heavyParticleNode, heavyNumberDisplay], [lightParticleNode, lightNumberDisplay]]
    });
    const content = new VBox({
      preferredWidth: contentWidth,
      widthSizable: false,
      // so that width will remain preferredWidth
      align: 'center',
      children: [gridBox]
    });
    super(content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('AverageSpeedAccordionBox', AverageSpeedAccordionBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJSYW5nZSIsIm9wdGlvbml6ZTQiLCJOdW1iZXJEaXNwbGF5IiwiUGhldEZvbnQiLCJHcmlkQm94IiwiSFN0cnV0IiwiVGV4dCIsIlZCb3giLCJBY2NvcmRpb25Cb3giLCJTdW5Db25zdGFudHMiLCJHYXNQcm9wZXJ0aWVzQ29sb3JzIiwiR2FzUHJvcGVydGllc0NvbnN0YW50cyIsIkdhc1Byb3BlcnRpZXNJY29uRmFjdG9yeSIsImdhc1Byb3BlcnRpZXMiLCJHYXNQcm9wZXJ0aWVzU3RyaW5ncyIsIkF2ZXJhZ2VTcGVlZEFjY29yZGlvbkJveCIsImNvbnN0cnVjdG9yIiwiaGVhdnlBdmVyYWdlU3BlZWRQcm9wZXJ0eSIsImxpZ2h0QXZlcmFnZVNwZWVkUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiQUNDT1JESU9OX0JPWF9PUFRJT05TIiwiZml4ZWRXaWR0aCIsImNvbnRlbnRYTWFyZ2luIiwiY29udGVudFlTcGFjaW5nIiwidGl0bGVOb2RlIiwiYXZlcmFnZVNwZWVkU3RyaW5nUHJvcGVydHkiLCJmb250IiwiVElUTEVfRk9OVCIsImZpbGwiLCJ0ZXh0RmlsbFByb3BlcnR5IiwibWF4V2lkdGgiLCJoZWF2eVBhcnRpY2xlTm9kZSIsImNyZWF0ZUhlYXZ5UGFydGljbGVJY29uIiwibGlnaHRQYXJ0aWNsZU5vZGUiLCJjcmVhdGVMaWdodFBhcnRpY2xlSWNvbiIsIk1hdGgiLCJtYXgiLCJ3aWR0aCIsImFkZENoaWxkIiwiY2VudGVyIiwibnVtYmVyRGlzcGxheVJhbmdlIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJ2YWx1ZVBhdHRlcm4iLCJ2YWx1ZVVuaXRzU3RyaW5nUHJvcGVydHkiLCJ1bml0cyIsIm1ldGVyc1BlclNlY29uZFN0cmluZ1Byb3BlcnR5Iiwibm9WYWx1ZVBhdHRlcm4iLCJWQUxVRV9OQU1FRF9QTEFDRUhPTERFUiIsImRlY2ltYWxQbGFjZXMiLCJhbGlnbiIsIm5vVmFsdWVBbGlnbiIsInRleHRPcHRpb25zIiwiYmFja2dyb3VuZEZpbGwiLCJiYWNrZ3JvdW5kU3Ryb2tlIiwiaGVhdnlOdW1iZXJEaXNwbGF5IiwibGlnaHROdW1iZXJEaXNwbGF5IiwiY29udGVudFdpZHRoIiwiZ3JpZEJveCIsInJvd3MiLCJjb250ZW50IiwicHJlZmVycmVkV2lkdGgiLCJ3aWR0aFNpemFibGUiLCJjaGlsZHJlbiIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkF2ZXJhZ2VTcGVlZEFjY29yZGlvbkJveC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBdmVyYWdlU3BlZWRBY2NvcmRpb25Cb3ggZGlzcGxheXMgdGhlIGF2ZXJhZ2Ugc3BlZWQgKGluIG0vcykgZm9yIGVhY2ggdHlwZSBvZiBwYXJ0aWNsZSBpbiB0aGUgY29udGFpbmVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQYXR0ZXJuU3RyaW5nUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9QYXR0ZXJuU3RyaW5nUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgeyBvcHRpb25pemU0IH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IE51bWJlckRpc3BsYXksIHsgTnVtYmVyRGlzcGxheU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTnVtYmVyRGlzcGxheS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBHcmlkQm94LCBIU3RydXQsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQWNjb3JkaW9uQm94LCB7IEFjY29yZGlvbkJveE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IFN1bkNvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvU3VuQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNDb2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL0dhc1Byb3BlcnRpZXNDb2xvcnMuanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc0NvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vR2FzUHJvcGVydGllc0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzSWNvbkZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvR2FzUHJvcGVydGllc0ljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzU3RyaW5ncyBmcm9tICcuLi8uLi9HYXNQcm9wZXJ0aWVzU3RyaW5ncy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGZpeGVkV2lkdGg/OiBudW1iZXI7XHJcbn07XHJcblxyXG50eXBlIEF2ZXJhZ2VTcGVlZEFjY29yZGlvbkJveE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxBY2NvcmRpb25Cb3hPcHRpb25zLCAnZXhwYW5kZWRQcm9wZXJ0eScgfCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdmVyYWdlU3BlZWRBY2NvcmRpb25Cb3ggZXh0ZW5kcyBBY2NvcmRpb25Cb3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGhlYXZ5QXZlcmFnZVNwZWVkUHJvcGVydHk6IFByb3BlcnR5PG51bWJlciB8IG51bGw+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgbGlnaHRBdmVyYWdlU3BlZWRQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyIHwgbnVsbD4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEF2ZXJhZ2VTcGVlZEFjY29yZGlvbkJveE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTQ8QXZlcmFnZVNwZWVkQWNjb3JkaW9uQm94T3B0aW9ucywgU2VsZk9wdGlvbnMsIEFjY29yZGlvbkJveE9wdGlvbnM+KCkoXHJcbiAgICAgIHt9LCBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLkFDQ09SRElPTl9CT1hfT1BUSU9OUywge1xyXG5cclxuICAgICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICAgIGZpeGVkV2lkdGg6IDEwMCxcclxuXHJcbiAgICAgICAgLy8gQWNjb3JkaW9uQm94T3B0aW9uc1xyXG4gICAgICAgIGNvbnRlbnRYTWFyZ2luOiBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLkFDQ09SRElPTl9CT1hfT1BUSU9OUy5jb250ZW50WE1hcmdpbixcclxuICAgICAgICBjb250ZW50WVNwYWNpbmc6IDAsXHJcbiAgICAgICAgdGl0bGVOb2RlOiBuZXcgVGV4dCggR2FzUHJvcGVydGllc1N0cmluZ3MuYXZlcmFnZVNwZWVkU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgIGZvbnQ6IEdhc1Byb3BlcnRpZXNDb25zdGFudHMuVElUTEVfRk9OVCxcclxuICAgICAgICAgIGZpbGw6IEdhc1Byb3BlcnRpZXNDb2xvcnMudGV4dEZpbGxQcm9wZXJ0eVxyXG4gICAgICAgIH0gKVxyXG4gICAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBMaW1pdCB3aWR0aCBvZiB0aXRsZVxyXG4gICAgb3B0aW9ucy50aXRsZU5vZGUubWF4V2lkdGggPSAwLjc1ICogb3B0aW9ucy5maXhlZFdpZHRoOyAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcblxyXG4gICAgLy8gaWNvbnMgZm9yIHRoZSBwYXJ0aWNsZXNcclxuICAgIGNvbnN0IGhlYXZ5UGFydGljbGVOb2RlID0gR2FzUHJvcGVydGllc0ljb25GYWN0b3J5LmNyZWF0ZUhlYXZ5UGFydGljbGVJY29uKCBtb2RlbFZpZXdUcmFuc2Zvcm0gKTtcclxuICAgIGNvbnN0IGxpZ2h0UGFydGljbGVOb2RlID0gR2FzUHJvcGVydGllc0ljb25GYWN0b3J5LmNyZWF0ZUxpZ2h0UGFydGljbGVJY29uKCBtb2RlbFZpZXdUcmFuc2Zvcm0gKTtcclxuXHJcbiAgICAvLyBhZGQgYSBob3Jpem9udGFsIHN0cnV0IHNvIHRoYXQgaWNvbnMgaGF2ZSB0aGUgc2FtZSBlZmZlY3RpdmUgd2lkdGhcclxuICAgIGNvbnN0IG1heFdpZHRoID0gTWF0aC5tYXgoIGhlYXZ5UGFydGljbGVOb2RlLndpZHRoLCBsaWdodFBhcnRpY2xlTm9kZS53aWR0aCApO1xyXG4gICAgaGVhdnlQYXJ0aWNsZU5vZGUuYWRkQ2hpbGQoIG5ldyBIU3RydXQoIG1heFdpZHRoLCB7IGNlbnRlcjogaGVhdnlQYXJ0aWNsZU5vZGUuY2VudGVyIH0gKSApO1xyXG4gICAgbGlnaHRQYXJ0aWNsZU5vZGUuYWRkQ2hpbGQoIG5ldyBIU3RydXQoIG1heFdpZHRoLCB7IGNlbnRlcjogbGlnaHRQYXJ0aWNsZU5vZGUuY2VudGVyIH0gKSApO1xyXG5cclxuICAgIGNvbnN0IG51bWJlckRpc3BsYXlSYW5nZSA9IG5ldyBSYW5nZSggMCwgOTk5OSApO1xyXG4gICAgY29uc3QgbnVtYmVyRGlzcGxheU9wdGlvbnM6IE51bWJlckRpc3BsYXlPcHRpb25zID0ge1xyXG4gICAgICB2YWx1ZVBhdHRlcm46IG5ldyBQYXR0ZXJuU3RyaW5nUHJvcGVydHkoIEdhc1Byb3BlcnRpZXNTdHJpbmdzLnZhbHVlVW5pdHNTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgIHVuaXRzOiBHYXNQcm9wZXJ0aWVzU3RyaW5ncy5tZXRlcnNQZXJTZWNvbmRTdHJpbmdQcm9wZXJ0eVxyXG4gICAgICB9ICksXHJcbiAgICAgIG5vVmFsdWVQYXR0ZXJuOiBTdW5Db25zdGFudHMuVkFMVUVfTkFNRURfUExBQ0VIT0xERVIsXHJcbiAgICAgIGRlY2ltYWxQbGFjZXM6IDAsXHJcbiAgICAgIGFsaWduOiAncmlnaHQnLFxyXG4gICAgICBub1ZhbHVlQWxpZ246ICdsZWZ0JyxcclxuICAgICAgdGV4dE9wdGlvbnM6IHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE2ICksXHJcbiAgICAgICAgZmlsbDogR2FzUHJvcGVydGllc0NvbG9ycy50ZXh0RmlsbFByb3BlcnR5XHJcbiAgICAgIH0sXHJcbiAgICAgIGJhY2tncm91bmRGaWxsOiBudWxsLFxyXG4gICAgICBiYWNrZ3JvdW5kU3Ryb2tlOiBudWxsLFxyXG4gICAgICBtYXhXaWR0aDogMTUwXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRoZXNlIFByb3BlcnRpZXMgYXJlIGluIHBtL3BzLCBhbmQgd2Ugd2FudCB0byBkaXNwbGF5IGluIG0vcy4gIFRoZXJlIGlzIG5vIG5lZWQgdG8gY29udmVydCB0aGUgdmFsdWVzLFxyXG4gICAgLy8gc2luY2UgdGhlIGNvbnZlcnNpb24gKDFFLTEyKSBpcyB0aGUgc2FtZSBmb3IgbnVtZXJhdG9yIGFuZCBkZW5vbWluYXRvci5cclxuICAgIGNvbnN0IGhlYXZ5TnVtYmVyRGlzcGxheSA9IG5ldyBOdW1iZXJEaXNwbGF5KCBoZWF2eUF2ZXJhZ2VTcGVlZFByb3BlcnR5LCBudW1iZXJEaXNwbGF5UmFuZ2UsIG51bWJlckRpc3BsYXlPcHRpb25zICk7XHJcbiAgICBjb25zdCBsaWdodE51bWJlckRpc3BsYXkgPSBuZXcgTnVtYmVyRGlzcGxheSggbGlnaHRBdmVyYWdlU3BlZWRQcm9wZXJ0eSwgbnVtYmVyRGlzcGxheVJhbmdlLCBudW1iZXJEaXNwbGF5T3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IG9wdGlvbnMuZml4ZWRXaWR0aCAtICggMiAqIG9wdGlvbnMuY29udGVudFhNYXJnaW4gKTtcclxuXHJcbiAgICAvLyBsYXlvdXQgaWNvbnMgYW5kIE51bWJlckRpc3BsYXlzIGluIGEgZ3JpZFxyXG4gICAgY29uc3QgZ3JpZEJveCA9IG5ldyBHcmlkQm94KCB7XHJcbiAgICAgIHJvd3M6IFtcclxuICAgICAgICBbIGhlYXZ5UGFydGljbGVOb2RlLCBoZWF2eU51bWJlckRpc3BsYXkgXSxcclxuICAgICAgICBbIGxpZ2h0UGFydGljbGVOb2RlLCBsaWdodE51bWJlckRpc3BsYXkgXVxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBWQm94KCB7XHJcbiAgICAgIHByZWZlcnJlZFdpZHRoOiBjb250ZW50V2lkdGgsXHJcbiAgICAgIHdpZHRoU2l6YWJsZTogZmFsc2UsIC8vIHNvIHRoYXQgd2lkdGggd2lsbCByZW1haW4gcHJlZmVycmVkV2lkdGhcclxuICAgICAgYWxpZ246ICdjZW50ZXInLFxyXG4gICAgICBjaGlsZHJlbjogWyBncmlkQm94IF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdBdmVyYWdlU3BlZWRBY2NvcmRpb25Cb3gnLCBBdmVyYWdlU3BlZWRBY2NvcmRpb25Cb3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EscUJBQXFCLE1BQU0sOENBQThDO0FBRWhGLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsU0FBU0MsVUFBVSxRQUFRLHVDQUF1QztBQUdsRSxPQUFPQyxhQUFhLE1BQWdDLDhDQUE4QztBQUNsRyxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDL0UsT0FBT0MsWUFBWSxNQUErQixvQ0FBb0M7QUFDdEYsT0FBT0MsWUFBWSxNQUFNLG9DQUFvQztBQUM3RCxPQUFPQyxtQkFBbUIsTUFBTSxxQ0FBcUM7QUFDckUsT0FBT0Msc0JBQXNCLE1BQU0sd0NBQXdDO0FBQzNFLE9BQU9DLHdCQUF3QixNQUFNLCtDQUErQztBQUNwRixPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQVFoRSxlQUFlLE1BQU1DLHdCQUF3QixTQUFTUCxZQUFZLENBQUM7RUFFMURRLFdBQVdBLENBQUVDLHlCQUFrRCxFQUNsREMseUJBQWtELEVBQ2xEQyxrQkFBdUMsRUFDdkNDLGVBQWdELEVBQUc7SUFFckUsTUFBTUMsT0FBTyxHQUFHcEIsVUFBVSxDQUFvRSxDQUFDLENBQzdGLENBQUMsQ0FBQyxFQUFFVSxzQkFBc0IsQ0FB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