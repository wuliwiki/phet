// Copyright 2018-2022, University of Colorado Boulder

/**
 * ExploreToolsPanel is the panel that appears in the upper-right corner of the 'Explore' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { optionize4 } from '../../../../phet-core/js/optionize.js';
import { VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import CollisionCounterCheckbox from '../../common/view/CollisionCounterCheckbox.js';
import StopwatchCheckbox from '../../common/view/StopwatchCheckbox.js';
import WidthCheckbox from '../../common/view/WidthCheckbox.js';
import gasProperties from '../../gasProperties.js';
export default class ExploreToolsPanel extends Panel {
  constructor(widthVisibleProperty, stopwatchVisibleProperty, collisionCounterVisibleProperty, providedOptions) {
    const options = optionize4()({}, GasPropertiesConstants.PANEL_OPTIONS, {
      // SelfOptions
      fixedWidth: 100,
      xMargin: GasPropertiesConstants.PANEL_OPTIONS.xMargin
    }, providedOptions);
    const contentWidth = options.fixedWidth - 2 * options.xMargin;
    const content = new VBox({
      preferredWidth: contentWidth,
      widthSizable: false,
      // so that width will remain preferredWidth
      align: 'left',
      spacing: 12,
      children: [new WidthCheckbox(widthVisibleProperty, {
        textMaxWidth: 110,
        tandem: options.tandem.createTandem('widthCheckbox')
      }), new StopwatchCheckbox(stopwatchVisibleProperty, {
        textMaxWidth: 125,
        tandem: options.tandem.createTandem('stopwatchCheckbox')
      }), new CollisionCounterCheckbox(collisionCounterVisibleProperty, {
        textMaxWidth: 125,
        tandem: options.tandem.createTandem('collisionCounterCheckbox')
      })]
    });
    super(content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('ExploreToolsPanel', ExploreToolsPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemU0IiwiVkJveCIsIlBhbmVsIiwiR2FzUHJvcGVydGllc0NvbnN0YW50cyIsIkNvbGxpc2lvbkNvdW50ZXJDaGVja2JveCIsIlN0b3B3YXRjaENoZWNrYm94IiwiV2lkdGhDaGVja2JveCIsImdhc1Byb3BlcnRpZXMiLCJFeHBsb3JlVG9vbHNQYW5lbCIsImNvbnN0cnVjdG9yIiwid2lkdGhWaXNpYmxlUHJvcGVydHkiLCJzdG9wd2F0Y2hWaXNpYmxlUHJvcGVydHkiLCJjb2xsaXNpb25Db3VudGVyVmlzaWJsZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIlBBTkVMX09QVElPTlMiLCJmaXhlZFdpZHRoIiwieE1hcmdpbiIsImNvbnRlbnRXaWR0aCIsImNvbnRlbnQiLCJwcmVmZXJyZWRXaWR0aCIsIndpZHRoU2l6YWJsZSIsImFsaWduIiwic3BhY2luZyIsImNoaWxkcmVuIiwidGV4dE1heFdpZHRoIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwbG9yZVRvb2xzUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRXhwbG9yZVRvb2xzUGFuZWwgaXMgdGhlIHBhbmVsIHRoYXQgYXBwZWFycyBpbiB0aGUgdXBwZXItcmlnaHQgY29ybmVyIG9mIHRoZSAnRXhwbG9yZScgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgb3B0aW9uaXplNCB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhbmVsLCB7IFBhbmVsT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9HYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENvbGxpc2lvbkNvdW50ZXJDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Db2xsaXNpb25Db3VudGVyQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgU3RvcHdhdGNoQ2hlY2tib3ggZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvU3RvcHdhdGNoQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgV2lkdGhDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9XaWR0aENoZWNrYm94LmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGZpeGVkV2lkdGg/OiBudW1iZXI7XHJcbn07XHJcblxyXG50eXBlIEV4cGxvcmVUb29sc1BhbmVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQYW5lbE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4cGxvcmVUb29sc1BhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHdpZHRoVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIHN0b3B3YXRjaFZpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25Db3VudGVyVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogRXhwbG9yZVRvb2xzUGFuZWxPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU0PEV4cGxvcmVUb29sc1BhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhbmVsT3B0aW9ucz4oKShcclxuICAgICAge30sIEdhc1Byb3BlcnRpZXNDb25zdGFudHMuUEFORUxfT1BUSU9OUywge1xyXG5cclxuICAgICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICAgIGZpeGVkV2lkdGg6IDEwMCxcclxuICAgICAgICB4TWFyZ2luOiBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLlBBTkVMX09QVElPTlMueE1hcmdpblxyXG4gICAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50V2lkdGggPSBvcHRpb25zLmZpeGVkV2lkdGggLSAoIDIgKiBvcHRpb25zLnhNYXJnaW4gKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gbmV3IFZCb3goIHtcclxuICAgICAgcHJlZmVycmVkV2lkdGg6IGNvbnRlbnRXaWR0aCxcclxuICAgICAgd2lkdGhTaXphYmxlOiBmYWxzZSwgLy8gc28gdGhhdCB3aWR0aCB3aWxsIHJlbWFpbiBwcmVmZXJyZWRXaWR0aFxyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiAxMixcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgV2lkdGhDaGVja2JveCggd2lkdGhWaXNpYmxlUHJvcGVydHksIHtcclxuICAgICAgICAgIHRleHRNYXhXaWR0aDogMTEwLFxyXG4gICAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd3aWR0aENoZWNrYm94JyApXHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIG5ldyBTdG9wd2F0Y2hDaGVja2JveCggc3RvcHdhdGNoVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICAgICAgICB0ZXh0TWF4V2lkdGg6IDEyNSxcclxuICAgICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3RvcHdhdGNoQ2hlY2tib3gnIClcclxuICAgICAgICB9ICksXHJcbiAgICAgICAgbmV3IENvbGxpc2lvbkNvdW50ZXJDaGVja2JveCggY29sbGlzaW9uQ291bnRlclZpc2libGVQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgdGV4dE1heFdpZHRoOiAxMjUsXHJcbiAgICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvbGxpc2lvbkNvdW50ZXJDaGVja2JveCcgKVxyXG4gICAgICAgIH0gKVxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnRXhwbG9yZVRvb2xzUGFuZWwnLCBFeHBsb3JlVG9vbHNQYW5lbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxTQUFTQSxVQUFVLFFBQVEsdUNBQXVDO0FBRWxFLFNBQWlDQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ2hGLE9BQU9DLEtBQUssTUFBd0IsNkJBQTZCO0FBQ2pFLE9BQU9DLHNCQUFzQixNQUFNLHdDQUF3QztBQUMzRSxPQUFPQyx3QkFBd0IsTUFBTSwrQ0FBK0M7QUFDcEYsT0FBT0MsaUJBQWlCLE1BQU0sd0NBQXdDO0FBQ3RFLE9BQU9DLGFBQWEsTUFBTSxvQ0FBb0M7QUFDOUQsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQVFsRCxlQUFlLE1BQU1DLGlCQUFpQixTQUFTTixLQUFLLENBQUM7RUFFNUNPLFdBQVdBLENBQUVDLG9CQUF1QyxFQUN2Q0Msd0JBQTJDLEVBQzNDQywrQkFBa0QsRUFDbERDLGVBQXlDLEVBQUc7SUFFOUQsTUFBTUMsT0FBTyxHQUFHZCxVQUFVLENBQXNELENBQUMsQ0FDL0UsQ0FBQyxDQUFDLEVBQUVHLHNCQUFzQixDQUFDWSxhQUFhLEVBQUU7TUFFeEM7TUFDQUMsVUFBVSxFQUFFLEdBQUc7TUFDZkMsT0FBTyxFQUFFZCxzQkFBc0IsQ0FBQ1ksYUFBYSxDQUFDRTtJQUNoRCxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFdEIsTUFBTUssWUFBWSxHQUFHSixPQUFPLENBQUNFLFVBQVUsR0FBSyxDQUFDLEdBQUdGLE9BQU8sQ0FBQ0csT0FBUztJQUVqRSxNQUFNRSxPQUFPLEdBQUcsSUFBSWxCLElBQUksQ0FBRTtNQUN4Qm1CLGNBQWMsRUFBRUYsWUFBWTtNQUM1QkcsWUFBWSxFQUFFLEtBQUs7TUFBRTtNQUNyQkMsS0FBSyxFQUFFLE1BQU07TUFDYkMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsUUFBUSxFQUFFLENBQ1IsSUFBSWxCLGFBQWEsQ0FBRUksb0JBQW9CLEVBQUU7UUFDdkNlLFlBQVksRUFBRSxHQUFHO1FBQ2pCQyxNQUFNLEVBQUVaLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDQyxZQUFZLENBQUUsZUFBZ0I7TUFDdkQsQ0FBRSxDQUFDLEVBQ0gsSUFBSXRCLGlCQUFpQixDQUFFTSx3QkFBd0IsRUFBRTtRQUMvQ2MsWUFBWSxFQUFFLEdBQUc7UUFDakJDLE1BQU0sRUFBRVosT0FBTyxDQUFDWSxNQUFNLENBQUNDLFlBQVksQ0FBRSxtQkFBb0I7TUFDM0QsQ0FBRSxDQUFDLEVBQ0gsSUFBSXZCLHdCQUF3QixDQUFFUSwrQkFBK0IsRUFBRTtRQUM3RGEsWUFBWSxFQUFFLEdBQUc7UUFDakJDLE1BQU0sRUFBRVosT0FBTyxDQUFDWSxNQUFNLENBQUNDLFlBQVksQ0FBRSwwQkFBMkI7TUFDbEUsQ0FBRSxDQUFDO0lBRVAsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFUixPQUFPLEVBQUVMLE9BQVEsQ0FBQztFQUMzQjtFQUVnQmMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFyQixhQUFhLENBQUN1QixRQUFRLENBQUUsbUJBQW1CLEVBQUV0QixpQkFBa0IsQ0FBQyJ9