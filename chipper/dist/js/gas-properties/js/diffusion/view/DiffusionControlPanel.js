// Copyright 2018-2022, University of Colorado Boulder

/**
 * DiffusionControlPanel is the control panel that appears on the right side of the 'Diffusion' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { optionize4 } from '../../../../phet-core/js/optionize.js';
import { HSeparator, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import GasPropertiesColors from '../../common/GasPropertiesColors.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import StopwatchCheckbox from '../../common/view/StopwatchCheckbox.js';
import gasProperties from '../../gasProperties.js';
import CenterOfMassCheckbox from './CenterOfMassCheckbox.js';
import DiffusionSettingsNode from './DiffusionSettingsNode.js';
import DividerToggleButton from './DividerToggleButton.js';
import ParticleFlowRateCheckbox from './ParticleFlowRateCheckbox.js';
import ScaleCheckbox from './ScaleCheckbox.js';
export default class DiffusionControlPanel extends Panel {
  /**
   * @param leftSettings - setting for the left side of the container
   * @param rightSettings - setting for the right side of the container
   * @param modelViewTransform
   * @param hasDividerProperty
   * @param numberOfParticlesProperty
   * @param stopwatchVisibleProperty
   * @param viewProperties
   * @param providedOptions
   */
  constructor(leftSettings, rightSettings, modelViewTransform, hasDividerProperty, numberOfParticlesProperty, stopwatchVisibleProperty, viewProperties, providedOptions) {
    const options = optionize4()({}, GasPropertiesConstants.PANEL_OPTIONS, {
      // SelfOptions
      fixedWidth: 100,
      // PanelOptions
      xMargin: GasPropertiesConstants.PANEL_OPTIONS.xMargin
    }, providedOptions);
    const contentWidth = options.fixedWidth - 2 * options.xMargin;
    const dividerToggleButton = new DividerToggleButton(hasDividerProperty, {
      layoutOptions: {
        align: 'center'
      },
      tandem: options.tandem.createTandem('dividerToggleButton')
    });
    const textMaxWidth = 175; // determined empirically

    const content = new VBox({
      preferredWidth: contentWidth,
      widthSizable: false,
      // so that width will remain preferredWidth
      align: 'left',
      spacing: 18,
      children: [
      // spinners
      new DiffusionSettingsNode(leftSettings, rightSettings, modelViewTransform, hasDividerProperty, {
        tandem: options.tandem.createTandem('settingsNode')
      }),
      // Remove/Reset Divider button, centered
      dividerToggleButton,
      // ------------
      new HSeparator({
        stroke: GasPropertiesColors.separatorColorProperty
      }),
      // checkboxes
      new VBox({
        align: 'left',
        spacing: 12,
        children: [new CenterOfMassCheckbox(viewProperties.centerOfMassVisibleProperty, {
          textMaxWidth: textMaxWidth,
          tandem: options.tandem.createTandem('centerOfMassCheckbox')
        }), new ParticleFlowRateCheckbox(viewProperties.particleFlowRateVisibleProperty, {
          textMaxWidth: textMaxWidth,
          tandem: options.tandem.createTandem('particleFlowRateCheckbox')
        }), new ScaleCheckbox(viewProperties.scaleVisibleProperty, {
          textMaxWidth: textMaxWidth,
          tandem: options.tandem.createTandem('scaleCheckbox')
        }), new StopwatchCheckbox(stopwatchVisibleProperty, {
          textMaxWidth: textMaxWidth,
          tandem: options.tandem.createTandem('stopwatchCheckbox')
        })]
      })]
    });
    super(content, options);

    // Disable the button when the container is empty.
    numberOfParticlesProperty.link(numberOfParticles => {
      dividerToggleButton.enabled = numberOfParticles !== 0;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('DiffusionControlPanel', DiffusionControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,