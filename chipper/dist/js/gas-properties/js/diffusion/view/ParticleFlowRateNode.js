// Copyright 2019-2022, University of Colorado Boulder

/**
 * ParticleFlowRateNode is a pair of vectors that indicate the flow rate of one particle species between the left and
 * right sides of the container. Higher flow rate results in a bigger vector. Vectors are color-coded to the particle
 * color.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import { Node } from '../../../../scenery/js/imports.js';
import gasProperties from '../../gasProperties.js';
// constants
const X_SPACING = 5; // space between the tails of the left and right arrows
const VECTOR_SCALE = 25; // vector length per 1 particle/ps, see https://github.com/phetsims/gas-properties/issues/51

export default class ParticleFlowRateNode extends Node {
  constructor(model, providedOptions) {
    const options = optionize()({
      // SelfOptions
      arrowNodeOptions: {
        headHeight: 15,
        headWidth: 15,
        tailWidth: 8,
        fill: 'white',
        stroke: 'black'
      }
    }, providedOptions);
    const headHeight = options.arrowNodeOptions.headHeight;
    assert && assert(headHeight);
    const minTailLength = headHeight + 4;

    // left and right arrows
    const leftArrowNode = new ArrowNode(0, 0, -minTailLength, 0, options.arrowNodeOptions);
    const rightArrowNode = new ArrowNode(0, 0, minTailLength, 0, options.arrowNodeOptions);

    // origin is between the tails of the 2 arrows 
    leftArrowNode.x = -X_SPACING / 2;
    rightArrowNode.x = X_SPACING / 2;
    options.children = [leftArrowNode, rightArrowNode];
    super(options);
    model.leftFlowRateProperty.link(flowRate => {
      leftArrowNode.visible = flowRate > 0;
      leftArrowNode.setTip(-(minTailLength + flowRate * VECTOR_SCALE), 0);
    });
    model.rightFlowRateProperty.link(flowRate => {
      rightArrowNode.visible = flowRate > 0;
      rightArrowNode.setTip(minTailLength + flowRate * VECTOR_SCALE, 0);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('ParticleFlowRateNode', ParticleFlowRateNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJBcnJvd05vZGUiLCJOb2RlIiwiZ2FzUHJvcGVydGllcyIsIlhfU1BBQ0lORyIsIlZFQ1RPUl9TQ0FMRSIsIlBhcnRpY2xlRmxvd1JhdGVOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJhcnJvd05vZGVPcHRpb25zIiwiaGVhZEhlaWdodCIsImhlYWRXaWR0aCIsInRhaWxXaWR0aCIsImZpbGwiLCJzdHJva2UiLCJhc3NlcnQiLCJtaW5UYWlsTGVuZ3RoIiwibGVmdEFycm93Tm9kZSIsInJpZ2h0QXJyb3dOb2RlIiwieCIsImNoaWxkcmVuIiwibGVmdEZsb3dSYXRlUHJvcGVydHkiLCJsaW5rIiwiZmxvd1JhdGUiLCJ2aXNpYmxlIiwic2V0VGlwIiwicmlnaHRGbG93UmF0ZVByb3BlcnR5IiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGFydGljbGVGbG93UmF0ZU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGFydGljbGVGbG93UmF0ZU5vZGUgaXMgYSBwYWlyIG9mIHZlY3RvcnMgdGhhdCBpbmRpY2F0ZSB0aGUgZmxvdyByYXRlIG9mIG9uZSBwYXJ0aWNsZSBzcGVjaWVzIGJldHdlZW4gdGhlIGxlZnQgYW5kXHJcbiAqIHJpZ2h0IHNpZGVzIG9mIHRoZSBjb250YWluZXIuIEhpZ2hlciBmbG93IHJhdGUgcmVzdWx0cyBpbiBhIGJpZ2dlciB2ZWN0b3IuIFZlY3RvcnMgYXJlIGNvbG9yLWNvZGVkIHRvIHRoZSBwYXJ0aWNsZVxyXG4gKiBjb2xvci5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlLCB7IEFycm93Tm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQXJyb3dOb2RlLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlRmxvd1JhdGUgZnJvbSAnLi4vbW9kZWwvUGFydGljbGVGbG93UmF0ZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgWF9TUEFDSU5HID0gNTsgLy8gc3BhY2UgYmV0d2VlbiB0aGUgdGFpbHMgb2YgdGhlIGxlZnQgYW5kIHJpZ2h0IGFycm93c1xyXG5jb25zdCBWRUNUT1JfU0NBTEUgPSAyNTsgLy8gdmVjdG9yIGxlbmd0aCBwZXIgMSBwYXJ0aWNsZS9wcywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9nYXMtcHJvcGVydGllcy9pc3N1ZXMvNTFcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgYXJyb3dOb2RlT3B0aW9ucz86IEFycm93Tm9kZU9wdGlvbnM7XHJcbn07XHJcblxyXG50eXBlIFBhcnRpY2xlRmxvd1JhdGVOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxOb2RlT3B0aW9ucywgJ3RhbmRlbScgfCAndmlzaWJsZVByb3BlcnR5Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJ0aWNsZUZsb3dSYXRlTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBQYXJ0aWNsZUZsb3dSYXRlLCBwcm92aWRlZE9wdGlvbnM6IFBhcnRpY2xlRmxvd1JhdGVOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFBhcnRpY2xlRmxvd1JhdGVOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBhcnJvd05vZGVPcHRpb25zOiB7XHJcbiAgICAgICAgaGVhZEhlaWdodDogMTUsXHJcbiAgICAgICAgaGVhZFdpZHRoOiAxNSxcclxuICAgICAgICB0YWlsV2lkdGg6IDgsXHJcbiAgICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgICBzdHJva2U6ICdibGFjaydcclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgaGVhZEhlaWdodCA9IG9wdGlvbnMuYXJyb3dOb2RlT3B0aW9ucy5oZWFkSGVpZ2h0ITtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGhlYWRIZWlnaHQgKTtcclxuICAgIGNvbnN0IG1pblRhaWxMZW5ndGggPSBoZWFkSGVpZ2h0ICsgNDtcclxuXHJcbiAgICAvLyBsZWZ0IGFuZCByaWdodCBhcnJvd3NcclxuICAgIGNvbnN0IGxlZnRBcnJvd05vZGUgPSBuZXcgQXJyb3dOb2RlKCAwLCAwLCAtbWluVGFpbExlbmd0aCwgMCwgb3B0aW9ucy5hcnJvd05vZGVPcHRpb25zICk7XHJcbiAgICBjb25zdCByaWdodEFycm93Tm9kZSA9IG5ldyBBcnJvd05vZGUoIDAsIDAsIG1pblRhaWxMZW5ndGgsIDAsIG9wdGlvbnMuYXJyb3dOb2RlT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIG9yaWdpbiBpcyBiZXR3ZWVuIHRoZSB0YWlscyBvZiB0aGUgMiBhcnJvd3MgXHJcbiAgICBsZWZ0QXJyb3dOb2RlLnggPSAtWF9TUEFDSU5HIC8gMjtcclxuICAgIHJpZ2h0QXJyb3dOb2RlLnggPSBYX1NQQUNJTkcgLyAyO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGxlZnRBcnJvd05vZGUsIHJpZ2h0QXJyb3dOb2RlIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICBtb2RlbC5sZWZ0Rmxvd1JhdGVQcm9wZXJ0eS5saW5rKCBmbG93UmF0ZSA9PiB7XHJcbiAgICAgIGxlZnRBcnJvd05vZGUudmlzaWJsZSA9ICggZmxvd1JhdGUgPiAwICk7XHJcbiAgICAgIGxlZnRBcnJvd05vZGUuc2V0VGlwKCAtKCBtaW5UYWlsTGVuZ3RoICsgZmxvd1JhdGUgKiBWRUNUT1JfU0NBTEUgKSwgMCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIG1vZGVsLnJpZ2h0Rmxvd1JhdGVQcm9wZXJ0eS5saW5rKCBmbG93UmF0ZSA9PiB7XHJcbiAgICAgIHJpZ2h0QXJyb3dOb2RlLnZpc2libGUgPSAoIGZsb3dSYXRlID4gMCApO1xyXG4gICAgICByaWdodEFycm93Tm9kZS5zZXRUaXAoIG1pblRhaWxMZW5ndGggKyBmbG93UmF0ZSAqIFZFQ1RPUl9TQ0FMRSwgMCApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdQYXJ0aWNsZUZsb3dSYXRlTm9kZScsIFBhcnRpY2xlRmxvd1JhdGVOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0s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