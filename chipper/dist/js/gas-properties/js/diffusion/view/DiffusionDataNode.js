// Copyright 2019-2022, University of Colorado Boulder

/**
 * DiffusionDataNode display data for one side of the container in the 'Data' accordion box.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import NumberDisplay from '../../../../scenery-phet/js/NumberDisplay.js';
import { HBox, VBox } from '../../../../scenery/js/imports.js';
import GasPropertiesColors from '../../common/GasPropertiesColors.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import GasPropertiesIconFactory from '../../common/view/GasPropertiesIconFactory.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesStrings from '../../GasPropertiesStrings.js';
// constants
const PARTICLE_COUNT_RANGE = new Range(0, 1000);
const AVERAGE_TEMPERATURE_RANGE = new Range(0, 1000);
const NUMBER_DISPLAY_OPTIONS = {
  align: 'right',
  textOptions: {
    fill: GasPropertiesColors.textFillProperty,
    font: GasPropertiesConstants.CONTROL_FONT
  },
  backgroundFill: null,
  backgroundStroke: null,
  xMargin: 0,
  yMargin: 0
};
export default class DiffusionDataNode extends VBox {
  constructor(data, modelViewTransform, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      spacing: 10,
      align: 'left'
    }, providedOptions);

    // number of DiffusionParticle1
    const particle1CountNode = new HBox({
      spacing: 3,
      children: [GasPropertiesIconFactory.createDiffusionParticle1Icon(modelViewTransform), new NumberDisplay(data.numberOfParticles1Property, PARTICLE_COUNT_RANGE, NUMBER_DISPLAY_OPTIONS)]
    });

    // number of DiffusionParticle2
    const particle2CountNode = new HBox({
      spacing: 3,
      children: [GasPropertiesIconFactory.createDiffusionParticle2Icon(modelViewTransform), new NumberDisplay(data.numberOfParticles2Property, PARTICLE_COUNT_RANGE, NUMBER_DISPLAY_OPTIONS)]
    });
    const averageTemperatureNode = new NumberDisplay(data.averageTemperatureProperty, AVERAGE_TEMPERATURE_RANGE, combineOptions({}, NUMBER_DISPLAY_OPTIONS, {
      align: 'left',
      valuePattern: GasPropertiesStrings.tAvgKStringProperty,
      noValuePattern: GasPropertiesStrings.tAvgStringProperty,
      useRichText: true,
      maxWidth: 100 // determined empirically
    }));

    options.children = [particle1CountNode, particle2CountNode, averageTemperatureNode];
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('DiffusionDataNode', DiffusionDataNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIm9wdGlvbml6ZSIsImNvbWJpbmVPcHRpb25zIiwiTnVtYmVyRGlzcGxheSIsIkhCb3giLCJWQm94IiwiR2FzUHJvcGVydGllc0NvbG9ycyIsIkdhc1Byb3BlcnRpZXNDb25zdGFudHMiLCJHYXNQcm9wZXJ0aWVzSWNvbkZhY3RvcnkiLCJnYXNQcm9wZXJ0aWVzIiwiR2FzUHJvcGVydGllc1N0cmluZ3MiLCJQQVJUSUNMRV9DT1VOVF9SQU5HRSIsIkFWRVJBR0VfVEVNUEVSQVRVUkVfUkFOR0UiLCJOVU1CRVJfRElTUExBWV9PUFRJT05TIiwiYWxpZ24iLCJ0ZXh0T3B0aW9ucyIsImZpbGwiLCJ0ZXh0RmlsbFByb3BlcnR5IiwiZm9udCIsIkNPTlRST0xfRk9OVCIsImJhY2tncm91bmRGaWxsIiwiYmFja2dyb3VuZFN0cm9rZSIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiRGlmZnVzaW9uRGF0YU5vZGUiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic3BhY2luZyIsInBhcnRpY2xlMUNvdW50Tm9kZSIsImNoaWxkcmVuIiwiY3JlYXRlRGlmZnVzaW9uUGFydGljbGUxSWNvbiIsIm51bWJlck9mUGFydGljbGVzMVByb3BlcnR5IiwicGFydGljbGUyQ291bnROb2RlIiwiY3JlYXRlRGlmZnVzaW9uUGFydGljbGUySWNvbiIsIm51bWJlck9mUGFydGljbGVzMlByb3BlcnR5IiwiYXZlcmFnZVRlbXBlcmF0dXJlTm9kZSIsImF2ZXJhZ2VUZW1wZXJhdHVyZVByb3BlcnR5IiwidmFsdWVQYXR0ZXJuIiwidEF2Z0tTdHJpbmdQcm9wZXJ0eSIsIm5vVmFsdWVQYXR0ZXJuIiwidEF2Z1N0cmluZ1Byb3BlcnR5IiwidXNlUmljaFRleHQiLCJtYXhXaWR0aCIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpZmZ1c2lvbkRhdGFOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpZmZ1c2lvbkRhdGFOb2RlIGRpc3BsYXkgZGF0YSBmb3Igb25lIHNpZGUgb2YgdGhlIGNvbnRhaW5lciBpbiB0aGUgJ0RhdGEnIGFjY29yZGlvbiBib3guXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgTnVtYmVyRGlzcGxheSwgeyBOdW1iZXJEaXNwbGF5T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9OdW1iZXJEaXNwbGF5LmpzJztcclxuaW1wb3J0IHsgSEJveCwgVkJveCwgVkJveE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc0NvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vR2FzUHJvcGVydGllc0NvbG9ycy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9HYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNJY29uRmFjdG9yeSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9HYXNQcm9wZXJ0aWVzSWNvbkZhY3RvcnkuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNTdHJpbmdzIGZyb20gJy4uLy4uL0dhc1Byb3BlcnRpZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IERpZmZ1c2lvbkRhdGEgZnJvbSAnLi4vbW9kZWwvRGlmZnVzaW9uRGF0YS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgUEFSVElDTEVfQ09VTlRfUkFOR0UgPSBuZXcgUmFuZ2UoIDAsIDEwMDAgKTtcclxuY29uc3QgQVZFUkFHRV9URU1QRVJBVFVSRV9SQU5HRSA9IG5ldyBSYW5nZSggMCwgMTAwMCApO1xyXG5cclxuY29uc3QgTlVNQkVSX0RJU1BMQVlfT1BUSU9OUzogTnVtYmVyRGlzcGxheU9wdGlvbnMgPSB7XHJcbiAgYWxpZ246ICdyaWdodCcsXHJcbiAgdGV4dE9wdGlvbnM6IHtcclxuICAgIGZpbGw6IEdhc1Byb3BlcnRpZXNDb2xvcnMudGV4dEZpbGxQcm9wZXJ0eSxcclxuICAgIGZvbnQ6IEdhc1Byb3BlcnRpZXNDb25zdGFudHMuQ09OVFJPTF9GT05UXHJcbiAgfSxcclxuICBiYWNrZ3JvdW5kRmlsbDogbnVsbCxcclxuICBiYWNrZ3JvdW5kU3Ryb2tlOiBudWxsLFxyXG4gIHhNYXJnaW46IDAsXHJcbiAgeU1hcmdpbjogMFxyXG59O1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIERpZmZ1c2lvbkRhdGFOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFZCb3hPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWZmdXNpb25EYXRhTm9kZSBleHRlbmRzIFZCb3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGRhdGE6IERpZmZ1c2lvbkRhdGEsIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMiwgcHJvdmlkZWRPcHRpb25zOiBEaWZmdXNpb25EYXRhTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxEaWZmdXNpb25EYXRhTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBWQm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gVkJveE9wdGlvbnNcclxuICAgICAgc3BhY2luZzogMTAsXHJcbiAgICAgIGFsaWduOiAnbGVmdCdcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIG51bWJlciBvZiBEaWZmdXNpb25QYXJ0aWNsZTFcclxuICAgIGNvbnN0IHBhcnRpY2xlMUNvdW50Tm9kZSA9IG5ldyBIQm94KCB7XHJcbiAgICAgIHNwYWNpbmc6IDMsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgR2FzUHJvcGVydGllc0ljb25GYWN0b3J5LmNyZWF0ZURpZmZ1c2lvblBhcnRpY2xlMUljb24oIG1vZGVsVmlld1RyYW5zZm9ybSApLFxyXG4gICAgICAgIG5ldyBOdW1iZXJEaXNwbGF5KCBkYXRhLm51bWJlck9mUGFydGljbGVzMVByb3BlcnR5LCBQQVJUSUNMRV9DT1VOVF9SQU5HRSwgTlVNQkVSX0RJU1BMQVlfT1BUSU9OUyApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBudW1iZXIgb2YgRGlmZnVzaW9uUGFydGljbGUyXHJcbiAgICBjb25zdCBwYXJ0aWNsZTJDb3VudE5vZGUgPSBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiAzLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIEdhc1Byb3BlcnRpZXNJY29uRmFjdG9yeS5jcmVhdGVEaWZmdXNpb25QYXJ0aWNsZTJJY29uKCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSxcclxuICAgICAgICBuZXcgTnVtYmVyRGlzcGxheSggZGF0YS5udW1iZXJPZlBhcnRpY2xlczJQcm9wZXJ0eSwgUEFSVElDTEVfQ09VTlRfUkFOR0UsIE5VTUJFUl9ESVNQTEFZX09QVElPTlMgKVxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgYXZlcmFnZVRlbXBlcmF0dXJlTm9kZSA9IG5ldyBOdW1iZXJEaXNwbGF5KCBkYXRhLmF2ZXJhZ2VUZW1wZXJhdHVyZVByb3BlcnR5LCBBVkVSQUdFX1RFTVBFUkFUVVJFX1JBTkdFLFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxOdW1iZXJEaXNwbGF5T3B0aW9ucz4oIHt9LCBOVU1CRVJfRElTUExBWV9PUFRJT05TLCB7XHJcbiAgICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgICB2YWx1ZVBhdHRlcm46IEdhc1Byb3BlcnRpZXNTdHJpbmdzLnRBdmdLU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgbm9WYWx1ZVBhdHRlcm46IEdhc1Byb3BlcnRpZXNTdHJpbmdzLnRBdmdTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgICB1c2VSaWNoVGV4dDogdHJ1ZSxcclxuICAgICAgICBtYXhXaWR0aDogMTAwIC8vIGRldGVybWluZWQgZW1waXJpY2FsbHlcclxuICAgICAgfSApICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgcGFydGljbGUxQ291bnROb2RlLCBwYXJ0aWNsZTJDb3VudE5vZGUsIGF2ZXJhZ2VUZW1wZXJhdHVyZU5vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdEaWZmdXNpb25EYXRhTm9kZScsIERpZmZ1c2lvbkRhdGFOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsU0FBUyxJQUFJQyxjQUFjLFFBQTBCLHVDQUF1QztBQUduRyxPQUFPQyxhQUFhLE1BQWdDLDhDQUE4QztBQUNsRyxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBcUIsbUNBQW1DO0FBQzNFLE9BQU9DLG1CQUFtQixNQUFNLHFDQUFxQztBQUNyRSxPQUFPQyxzQkFBc0IsTUFBTSx3Q0FBd0M7QUFDM0UsT0FBT0Msd0JBQXdCLE1BQU0sK0NBQStDO0FBQ3BGLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBR2hFO0FBQ0EsTUFBTUMsb0JBQW9CLEdBQUcsSUFBSVgsS0FBSyxDQUFFLENBQUMsRUFBRSxJQUFLLENBQUM7QUFDakQsTUFBTVkseUJBQXlCLEdBQUcsSUFBSVosS0FBSyxDQUFFLENBQUMsRUFBRSxJQUFLLENBQUM7QUFFdEQsTUFBTWEsc0JBQTRDLEdBQUc7RUFDbkRDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLFdBQVcsRUFBRTtJQUNYQyxJQUFJLEVBQUVWLG1CQUFtQixDQUFDVyxnQkFBZ0I7SUFDMUNDLElBQUksRUFBRVgsc0JBQXNCLENBQUNZO0VBQy9CLENBQUM7RUFDREMsY0FBYyxFQUFFLElBQUk7RUFDcEJDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLE9BQU8sRUFBRSxDQUFDO0VBQ1ZDLE9BQU8sRUFBRTtBQUNYLENBQUM7QUFNRCxlQUFlLE1BQU1DLGlCQUFpQixTQUFTbkIsSUFBSSxDQUFDO0VBRTNDb0IsV0FBV0EsQ0FBRUMsSUFBbUIsRUFBRUMsa0JBQXVDLEVBQUVDLGVBQXlDLEVBQUc7SUFFNUgsTUFBTUMsT0FBTyxHQUFHNUIsU0FBUyxDQUFxRCxDQUFDLENBQUU7TUFFL0U7TUFDQTZCLE9BQU8sRUFBRSxFQUFFO01BQ1hoQixLQUFLLEVBQUU7SUFDVCxDQUFDLEVBQUVjLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUcsa0JBQWtCLEdBQUcsSUFBSTNCLElBQUksQ0FBRTtNQUNuQzBCLE9BQU8sRUFBRSxDQUFDO01BQ1ZFLFFBQVEsRUFBRSxDQUNSeEIsd0JBQXdCLENBQUN5Qiw0QkFBNEIsQ0FBRU4sa0JBQW1CLENBQUMsRUFDM0UsSUFBSXhCLGFBQWEsQ0FBRXVCLElBQUksQ0FBQ1EsMEJBQTBCLEVBQUV2QixvQkFBb0IsRUFBRUUsc0JBQXVCLENBQUM7SUFFdEcsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTXNCLGtCQUFrQixHQUFHLElBQUkvQixJQUFJLENBQUU7TUFDbkMwQixPQUFPLEVBQUUsQ0FBQztNQUNWRSxRQUFRLEVBQUUsQ0FDUnhCLHdCQUF3QixDQUFDNEIsNEJBQTRCLENBQUVULGtCQUFtQixDQUFDLEVBQzNFLElBQUl4QixhQUFhLENBQUV1QixJQUFJLENBQUNXLDBCQUEwQixFQUFFMUIsb0JBQW9CLEVBQUVFLHNCQUF1QixDQUFDO0lBRXRHLENBQUUsQ0FBQztJQUVILE1BQU15QixzQkFBc0IsR0FBRyxJQUFJbkMsYUFBYSxDQUFFdUIsSUFBSSxDQUFDYSwwQkFBMEIsRUFBRTNCLHlCQUF5QixFQUMxR1YsY0FBYyxDQUF3QixDQUFDLENBQUMsRUFBRVcsc0JBQXNCLEVBQUU7TUFDaEVDLEtBQUssRUFBRSxNQUFNO01BQ2IwQixZQUFZLEVBQUU5QixvQkFBb0IsQ0FBQytCLG1CQUFtQjtNQUN0REMsY0FBYyxFQUFFaEMsb0JBQW9CLENBQUNpQyxrQkFBa0I7TUFDdkRDLFdBQVcsRUFBRSxJQUFJO01BQ2pCQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0lBQ2hCLENBQUUsQ0FBRSxDQUFDOztJQUVQaEIsT0FBTyxDQUFDRyxRQUFRLEdBQUcsQ0FBRUQsa0JBQWtCLEVBQUVJLGtCQUFrQixFQUFFRyxzQkFBc0IsQ0FBRTtJQUVyRixLQUFLLENBQUVULE9BQVEsQ0FBQztFQUNsQjtFQUVnQmlCLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBckMsYUFBYSxDQUFDdUMsUUFBUSxDQUFFLG1CQUFtQixFQUFFeEIsaUJBQWtCLENBQUMifQ==