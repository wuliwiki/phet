// Copyright 2019-2022, University of Colorado Boulder

/**
 * DividerNode is the vertical divider in the Diffusion screen's container.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Line, Node } from '../../../../scenery/js/imports.js';
import GasPropertiesColors from '../../common/GasPropertiesColors.js';
import gasProperties from '../../gasProperties.js';
export default class DividerNode extends Node {
  constructor(hasDividerProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      length: 100,
      solidLineWidth: 1,
      dashedLineWidth: 1
    }, providedOptions);

    // Solid divider
    const solidLineNode = new Line(0, 0, 0, options.length, {
      stroke: GasPropertiesColors.dividerColorProperty,
      lineWidth: options.solidLineWidth
    });

    // Vertical dashed line to indicate the center of the container when the divider is not present.
    const dashedLineNode = new Line(0, 0, 0, options.length, {
      stroke: GasPropertiesColors.dividerColorProperty,
      lineWidth: options.dashedLineWidth,
      lineDash: [10, 24],
      opacity: 0.5,
      center: solidLineNode.center
    });
    options.children = [dashedLineNode, solidLineNode];
    super(options);

    // Switch between solid and dashed divider
    hasDividerProperty.link(hasDivider => {
      solidLineNode.visible = hasDivider;
      dashedLineNode.visible = !hasDivider;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('DividerNode', DividerNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJMaW5lIiwiTm9kZSIsIkdhc1Byb3BlcnRpZXNDb2xvcnMiLCJnYXNQcm9wZXJ0aWVzIiwiRGl2aWRlck5vZGUiLCJjb25zdHJ1Y3RvciIsImhhc0RpdmlkZXJQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJsZW5ndGgiLCJzb2xpZExpbmVXaWR0aCIsImRhc2hlZExpbmVXaWR0aCIsInNvbGlkTGluZU5vZGUiLCJzdHJva2UiLCJkaXZpZGVyQ29sb3JQcm9wZXJ0eSIsImxpbmVXaWR0aCIsImRhc2hlZExpbmVOb2RlIiwibGluZURhc2giLCJvcGFjaXR5IiwiY2VudGVyIiwiY2hpbGRyZW4iLCJsaW5rIiwiaGFzRGl2aWRlciIsInZpc2libGUiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEaXZpZGVyTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaXZpZGVyTm9kZSBpcyB0aGUgdmVydGljYWwgZGl2aWRlciBpbiB0aGUgRGlmZnVzaW9uIHNjcmVlbidzIGNvbnRhaW5lci5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IExpbmUsIE5vZGUsIE5vZGVPcHRpb25zLCBOb2RlVHJhbnNsYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNDb2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL0dhc1Byb3BlcnRpZXNDb2xvcnMuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgbGVuZ3RoPzogbnVtYmVyO1xyXG4gIHNvbGlkTGluZVdpZHRoPzogbnVtYmVyO1xyXG4gIGRhc2hlZExpbmVXaWR0aD86IG51bWJlcjtcclxufTtcclxuXHJcbnR5cGUgRGl2aWRlck5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXZpZGVyTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGhhc0RpdmlkZXJQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sIHByb3ZpZGVkT3B0aW9uczogRGl2aWRlck5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RGl2aWRlck5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGxlbmd0aDogMTAwLFxyXG4gICAgICBzb2xpZExpbmVXaWR0aDogMSxcclxuICAgICAgZGFzaGVkTGluZVdpZHRoOiAxXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBTb2xpZCBkaXZpZGVyXHJcbiAgICBjb25zdCBzb2xpZExpbmVOb2RlID0gbmV3IExpbmUoIDAsIDAsIDAsIG9wdGlvbnMubGVuZ3RoLCB7XHJcbiAgICAgIHN0cm9rZTogR2FzUHJvcGVydGllc0NvbG9ycy5kaXZpZGVyQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgbGluZVdpZHRoOiBvcHRpb25zLnNvbGlkTGluZVdpZHRoXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVmVydGljYWwgZGFzaGVkIGxpbmUgdG8gaW5kaWNhdGUgdGhlIGNlbnRlciBvZiB0aGUgY29udGFpbmVyIHdoZW4gdGhlIGRpdmlkZXIgaXMgbm90IHByZXNlbnQuXHJcbiAgICBjb25zdCBkYXNoZWRMaW5lTm9kZSA9IG5ldyBMaW5lKCAwLCAwLCAwLCBvcHRpb25zLmxlbmd0aCwge1xyXG4gICAgICBzdHJva2U6IEdhc1Byb3BlcnRpZXNDb2xvcnMuZGl2aWRlckNvbG9yUHJvcGVydHksXHJcbiAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5kYXNoZWRMaW5lV2lkdGgsXHJcbiAgICAgIGxpbmVEYXNoOiBbIDEwLCAyNCBdLFxyXG4gICAgICBvcGFjaXR5OiAwLjUsXHJcbiAgICAgIGNlbnRlcjogc29saWRMaW5lTm9kZS5jZW50ZXJcclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBkYXNoZWRMaW5lTm9kZSwgc29saWRMaW5lTm9kZSBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gU3dpdGNoIGJldHdlZW4gc29saWQgYW5kIGRhc2hlZCBkaXZpZGVyXHJcbiAgICBoYXNEaXZpZGVyUHJvcGVydHkubGluayggaGFzRGl2aWRlciA9PiB7XHJcbiAgICAgIHNvbGlkTGluZU5vZGUudmlzaWJsZSA9IGhhc0RpdmlkZXI7XHJcbiAgICAgIGRhc2hlZExpbmVOb2RlLnZpc2libGUgPSAhaGFzRGl2aWRlcjtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnRGl2aWRlck5vZGUnLCBEaXZpZGVyTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQU0sdUNBQXVDO0FBRTdELFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUE2QyxtQ0FBbUM7QUFDbkcsT0FBT0MsbUJBQW1CLE1BQU0scUNBQXFDO0FBQ3JFLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFVbEQsZUFBZSxNQUFNQyxXQUFXLFNBQVNILElBQUksQ0FBQztFQUVyQ0ksV0FBV0EsQ0FBRUMsa0JBQThDLEVBQUVDLGVBQW1DLEVBQUc7SUFFeEcsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQStDLENBQUMsQ0FBRTtNQUV6RTtNQUNBVSxNQUFNLEVBQUUsR0FBRztNQUNYQyxjQUFjLEVBQUUsQ0FBQztNQUNqQkMsZUFBZSxFQUFFO0lBQ25CLENBQUMsRUFBRUosZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNSyxhQUFhLEdBQUcsSUFBSVosSUFBSSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFUSxPQUFPLENBQUNDLE1BQU0sRUFBRTtNQUN2REksTUFBTSxFQUFFWCxtQkFBbUIsQ0FBQ1ksb0JBQW9CO01BQ2hEQyxTQUFTLEVBQUVQLE9BQU8sQ0FBQ0U7SUFDckIsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTU0sY0FBYyxHQUFHLElBQUloQixJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVRLE9BQU8sQ0FBQ0MsTUFBTSxFQUFFO01BQ3hESSxNQUFNLEVBQUVYLG1CQUFtQixDQUFDWSxvQkFBb0I7TUFDaERDLFNBQVMsRUFBRVAsT0FBTyxDQUFDRyxlQUFlO01BQ2xDTSxRQUFRLEVBQUUsQ0FBRSxFQUFFLEVBQUUsRUFBRSxDQUFFO01BQ3BCQyxPQUFPLEVBQUUsR0FBRztNQUNaQyxNQUFNLEVBQUVQLGFBQWEsQ0FBQ087SUFDeEIsQ0FBRSxDQUFDO0lBRUhYLE9BQU8sQ0FBQ1ksUUFBUSxHQUFHLENBQUVKLGNBQWMsRUFBRUosYUFBYSxDQUFFO0lBRXBELEtBQUssQ0FBRUosT0FBUSxDQUFDOztJQUVoQjtJQUNBRixrQkFBa0IsQ0FBQ2UsSUFBSSxDQUFFQyxVQUFVLElBQUk7TUFDckNWLGFBQWEsQ0FBQ1csT0FBTyxHQUFHRCxVQUFVO01BQ2xDTixjQUFjLENBQUNPLE9BQU8sR0FBRyxDQUFDRCxVQUFVO0lBQ3RDLENBQUUsQ0FBQztFQUNMO0VBRWdCRSxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXJCLGFBQWEsQ0FBQ3VCLFFBQVEsQ0FBRSxhQUFhLEVBQUV0QixXQUFZLENBQUMifQ==