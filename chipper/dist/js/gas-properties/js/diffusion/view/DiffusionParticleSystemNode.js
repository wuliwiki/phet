// Copyright 2019-2022, University of Colorado Boulder

/**
 * DiffusionParticleSystemNode renders the particle system for the 'Diffusion' screen.  Since all particles are
 * confined to the container, it requires only one Canvas, and therefore uses ParticlesNode via inheritance.
 *
 * Do not transform this Node! It's origin must be at the origin of the view coordinate frame.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import ParticleImageProperty from '../../common/view/ParticleImageProperty.js';
import ParticlesNode from '../../common/view/ParticlesNode.js';
import gasProperties from '../../gasProperties.js';
import DiffusionParticle1 from '../model/DiffusionParticle1.js';
import DiffusionParticle2 from '../model/DiffusionParticle2.js';
export default class DiffusionParticleSystemNode extends ParticlesNode {
  /**
   * @param model - passing in the entire model since we use so much of its public API
   */
  constructor(model) {
    // generated image for DiffusionParticle1 species
    const particle1ImageProperty = new ParticleImageProperty(() => new DiffusionParticle1(), model.modelViewTransform, model.leftSettings.radiusProperty);

    // generated image for DiffusionParticle2 species
    const particle2ImageProperty = new ParticleImageProperty(() => new DiffusionParticle2(), model.modelViewTransform, model.rightSettings.radiusProperty);

    // {Particle[][]} arrays for each particle species
    const particleArrays = [model.particles1, model.particles2];

    // {Property.<HTMLCanvasElement>[]} images for each particle species in particleArrays
    const imageProperties = [particle1ImageProperty, particle2ImageProperty];
    super(particleArrays, imageProperties, model.modelViewTransform);

    // Size the canvas to match the container bounds. See https://github.com/phetsims/gas-properties/issues/38
    this.setCanvasBounds(model.modelViewTransform.modelToViewBounds(model.container.bounds));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('DiffusionParticleSystemNode', DiffusionParticleSystemNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXJ0aWNsZUltYWdlUHJvcGVydHkiLCJQYXJ0aWNsZXNOb2RlIiwiZ2FzUHJvcGVydGllcyIsIkRpZmZ1c2lvblBhcnRpY2xlMSIsIkRpZmZ1c2lvblBhcnRpY2xlMiIsIkRpZmZ1c2lvblBhcnRpY2xlU3lzdGVtTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJwYXJ0aWNsZTFJbWFnZVByb3BlcnR5IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibGVmdFNldHRpbmdzIiwicmFkaXVzUHJvcGVydHkiLCJwYXJ0aWNsZTJJbWFnZVByb3BlcnR5IiwicmlnaHRTZXR0aW5ncyIsInBhcnRpY2xlQXJyYXlzIiwicGFydGljbGVzMSIsInBhcnRpY2xlczIiLCJpbWFnZVByb3BlcnRpZXMiLCJzZXRDYW52YXNCb3VuZHMiLCJtb2RlbFRvVmlld0JvdW5kcyIsImNvbnRhaW5lciIsImJvdW5kcyIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpZmZ1c2lvblBhcnRpY2xlU3lzdGVtTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaWZmdXNpb25QYXJ0aWNsZVN5c3RlbU5vZGUgcmVuZGVycyB0aGUgcGFydGljbGUgc3lzdGVtIGZvciB0aGUgJ0RpZmZ1c2lvbicgc2NyZWVuLiAgU2luY2UgYWxsIHBhcnRpY2xlcyBhcmVcclxuICogY29uZmluZWQgdG8gdGhlIGNvbnRhaW5lciwgaXQgcmVxdWlyZXMgb25seSBvbmUgQ2FudmFzLCBhbmQgdGhlcmVmb3JlIHVzZXMgUGFydGljbGVzTm9kZSB2aWEgaW5oZXJpdGFuY2UuXHJcbiAqXHJcbiAqIERvIG5vdCB0cmFuc2Zvcm0gdGhpcyBOb2RlISBJdCdzIG9yaWdpbiBtdXN0IGJlIGF0IHRoZSBvcmlnaW4gb2YgdGhlIHZpZXcgY29vcmRpbmF0ZSBmcmFtZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUGFydGljbGVJbWFnZVByb3BlcnR5IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1BhcnRpY2xlSW1hZ2VQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQYXJ0aWNsZXNOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1BhcnRpY2xlc05vZGUuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IERpZmZ1c2lvbk1vZGVsIGZyb20gJy4uL21vZGVsL0RpZmZ1c2lvbk1vZGVsLmpzJztcclxuaW1wb3J0IERpZmZ1c2lvblBhcnRpY2xlMSBmcm9tICcuLi9tb2RlbC9EaWZmdXNpb25QYXJ0aWNsZTEuanMnO1xyXG5pbXBvcnQgRGlmZnVzaW9uUGFydGljbGUyIGZyb20gJy4uL21vZGVsL0RpZmZ1c2lvblBhcnRpY2xlMi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWZmdXNpb25QYXJ0aWNsZVN5c3RlbU5vZGUgZXh0ZW5kcyBQYXJ0aWNsZXNOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIG1vZGVsIC0gcGFzc2luZyBpbiB0aGUgZW50aXJlIG1vZGVsIHNpbmNlIHdlIHVzZSBzbyBtdWNoIG9mIGl0cyBwdWJsaWMgQVBJXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBtb2RlbDogRGlmZnVzaW9uTW9kZWwgKSB7XHJcblxyXG4gICAgLy8gZ2VuZXJhdGVkIGltYWdlIGZvciBEaWZmdXNpb25QYXJ0aWNsZTEgc3BlY2llc1xyXG4gICAgY29uc3QgcGFydGljbGUxSW1hZ2VQcm9wZXJ0eSA9IG5ldyBQYXJ0aWNsZUltYWdlUHJvcGVydHkoXHJcbiAgICAgICgpID0+IG5ldyBEaWZmdXNpb25QYXJ0aWNsZTEoKSxcclxuICAgICAgbW9kZWwubW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICBtb2RlbC5sZWZ0U2V0dGluZ3MucmFkaXVzUHJvcGVydHlcclxuICAgICk7XHJcblxyXG4gICAgLy8gZ2VuZXJhdGVkIGltYWdlIGZvciBEaWZmdXNpb25QYXJ0aWNsZTIgc3BlY2llc1xyXG4gICAgY29uc3QgcGFydGljbGUySW1hZ2VQcm9wZXJ0eSA9IG5ldyBQYXJ0aWNsZUltYWdlUHJvcGVydHkoXHJcbiAgICAgICgpID0+IG5ldyBEaWZmdXNpb25QYXJ0aWNsZTIoKSxcclxuICAgICAgbW9kZWwubW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICBtb2RlbC5yaWdodFNldHRpbmdzLnJhZGl1c1Byb3BlcnR5XHJcbiAgICApO1xyXG5cclxuICAgIC8vIHtQYXJ0aWNsZVtdW119IGFycmF5cyBmb3IgZWFjaCBwYXJ0aWNsZSBzcGVjaWVzXHJcbiAgICBjb25zdCBwYXJ0aWNsZUFycmF5cyA9IFsgbW9kZWwucGFydGljbGVzMSwgbW9kZWwucGFydGljbGVzMiBdO1xyXG5cclxuICAgIC8vIHtQcm9wZXJ0eS48SFRNTENhbnZhc0VsZW1lbnQ+W119IGltYWdlcyBmb3IgZWFjaCBwYXJ0aWNsZSBzcGVjaWVzIGluIHBhcnRpY2xlQXJyYXlzXHJcbiAgICBjb25zdCBpbWFnZVByb3BlcnRpZXMgPSBbIHBhcnRpY2xlMUltYWdlUHJvcGVydHksIHBhcnRpY2xlMkltYWdlUHJvcGVydHkgXTtcclxuXHJcbiAgICBzdXBlciggcGFydGljbGVBcnJheXMsIGltYWdlUHJvcGVydGllcywgbW9kZWwubW9kZWxWaWV3VHJhbnNmb3JtICk7XHJcblxyXG4gICAgLy8gU2l6ZSB0aGUgY2FudmFzIHRvIG1hdGNoIHRoZSBjb250YWluZXIgYm91bmRzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2dhcy1wcm9wZXJ0aWVzL2lzc3Vlcy8zOFxyXG4gICAgdGhpcy5zZXRDYW52YXNCb3VuZHMoIG1vZGVsLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0JvdW5kcyggbW9kZWwuY29udGFpbmVyLmJvdW5kcyApICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZ2FzUHJvcGVydGllcy5yZWdpc3RlciggJ0RpZmZ1c2lvblBhcnRpY2xlU3lzdGVtTm9kZScsIERpZmZ1c2lvblBhcnRpY2xlU3lzdGVtTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxxQkFBcUIsTUFBTSw0Q0FBNEM7QUFDOUUsT0FBT0MsYUFBYSxNQUFNLG9DQUFvQztBQUM5RCxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBRWxELE9BQU9DLGtCQUFrQixNQUFNLGdDQUFnQztBQUMvRCxPQUFPQyxrQkFBa0IsTUFBTSxnQ0FBZ0M7QUFFL0QsZUFBZSxNQUFNQywyQkFBMkIsU0FBU0osYUFBYSxDQUFDO0VBRXJFO0FBQ0Y7QUFDQTtFQUNTSyxXQUFXQSxDQUFFQyxLQUFxQixFQUFHO0lBRTFDO0lBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsSUFBSVIscUJBQXFCLENBQ3RELE1BQU0sSUFBSUcsa0JBQWtCLENBQUMsQ0FBQyxFQUM5QkksS0FBSyxDQUFDRSxrQkFBa0IsRUFDeEJGLEtBQUssQ0FBQ0csWUFBWSxDQUFDQyxjQUNyQixDQUFDOztJQUVEO0lBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsSUFBSVoscUJBQXFCLENBQ3RELE1BQU0sSUFBSUksa0JBQWtCLENBQUMsQ0FBQyxFQUM5QkcsS0FBSyxDQUFDRSxrQkFBa0IsRUFDeEJGLEtBQUssQ0FBQ00sYUFBYSxDQUFDRixjQUN0QixDQUFDOztJQUVEO0lBQ0EsTUFBTUcsY0FBYyxHQUFHLENBQUVQLEtBQUssQ0FBQ1EsVUFBVSxFQUFFUixLQUFLLENBQUNTLFVBQVUsQ0FBRTs7SUFFN0Q7SUFDQSxNQUFNQyxlQUFlLEdBQUcsQ0FBRVQsc0JBQXNCLEVBQUVJLHNCQUFzQixDQUFFO0lBRTFFLEtBQUssQ0FBRUUsY0FBYyxFQUFFRyxlQUFlLEVBQUVWLEtBQUssQ0FBQ0Usa0JBQW1CLENBQUM7O0lBRWxFO0lBQ0EsSUFBSSxDQUFDUyxlQUFlLENBQUVYLEtBQUssQ0FBQ0Usa0JBQWtCLENBQUNVLGlCQUFpQixDQUFFWixLQUFLLENBQUNhLFNBQVMsQ0FBQ0MsTUFBTyxDQUFFLENBQUM7RUFDOUY7RUFFZ0JDLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBcEIsYUFBYSxDQUFDc0IsUUFBUSxDQUFFLDZCQUE2QixFQUFFbkIsMkJBQTRCLENBQUMifQ==