// Copyright 2019-2022, University of Colorado Boulder

/**
 * DiffusionViewProperties defines Properties that are specific to the view in the 'Diffusion' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import gasProperties from '../../gasProperties.js';
export default class DiffusionViewProperties {
  constructor(tandem) {
    this.dataExpandedProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('dataExpandedProperty'),
      phetioDocumentation: 'whether the Data accordion box is expanded'
    });
    this.particleFlowRateVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('particleFlowRateVisibleProperty'),
      phetioDocumentation: 'whether particle flow rate vectors are visible below the container'
    });
    this.centerOfMassVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('centerOfMassVisibleProperty'),
      phetioDocumentation: 'whether the center-of-mass indicators are visible on the container'
    });
    this.scaleVisibleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('scaleVisibleProperty'),
      phetioDocumentation: 'whether the scale is visible on the container'
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.dataExpandedProperty.reset();
    this.particleFlowRateVisibleProperty.reset();
    this.centerOfMassVisibleProperty.reset();
    this.scaleVisibleProperty.reset();
  }
}
gasProperties.register('DiffusionViewProperties', DiffusionViewProperties);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJnYXNQcm9wZXJ0aWVzIiwiRGlmZnVzaW9uVmlld1Byb3BlcnRpZXMiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsImRhdGFFeHBhbmRlZFByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInBhcnRpY2xlRmxvd1JhdGVWaXNpYmxlUHJvcGVydHkiLCJjZW50ZXJPZk1hc3NWaXNpYmxlUHJvcGVydHkiLCJzY2FsZVZpc2libGVQcm9wZXJ0eSIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGlmZnVzaW9uVmlld1Byb3BlcnRpZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlmZnVzaW9uVmlld1Byb3BlcnRpZXMgZGVmaW5lcyBQcm9wZXJ0aWVzIHRoYXQgYXJlIHNwZWNpZmljIHRvIHRoZSB2aWV3IGluIHRoZSAnRGlmZnVzaW9uJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWZmdXNpb25WaWV3UHJvcGVydGllcyB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBkYXRhRXhwYW5kZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHVibGljIHJlYWRvbmx5IHBhcnRpY2xlRmxvd1JhdGVWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG4gIHB1YmxpYyByZWFkb25seSBjZW50ZXJPZk1hc3NWaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG4gIHB1YmxpYyByZWFkb25seSBzY2FsZVZpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgdGhpcy5kYXRhRXhwYW5kZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2RhdGFFeHBhbmRlZFByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnd2hldGhlciB0aGUgRGF0YSBhY2NvcmRpb24gYm94IGlzIGV4cGFuZGVkJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMucGFydGljbGVGbG93UmF0ZVZpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BhcnRpY2xlRmxvd1JhdGVWaXNpYmxlUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd3aGV0aGVyIHBhcnRpY2xlIGZsb3cgcmF0ZSB2ZWN0b3JzIGFyZSB2aXNpYmxlIGJlbG93IHRoZSBjb250YWluZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5jZW50ZXJPZk1hc3NWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjZW50ZXJPZk1hc3NWaXNpYmxlUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd3aGV0aGVyIHRoZSBjZW50ZXItb2YtbWFzcyBpbmRpY2F0b3JzIGFyZSB2aXNpYmxlIG9uIHRoZSBjb250YWluZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5zY2FsZVZpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NjYWxlVmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnd2hldGhlciB0aGUgc2NhbGUgaXMgdmlzaWJsZSBvbiB0aGUgY29udGFpbmVyJ1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGF0YUV4cGFuZGVkUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMucGFydGljbGVGbG93UmF0ZVZpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5jZW50ZXJPZk1hc3NWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuc2NhbGVWaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdEaWZmdXNpb25WaWV3UHJvcGVydGllcycsIERpZmZ1c2lvblZpZXdQcm9wZXJ0aWVzICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFHcEUsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUVsRCxlQUFlLE1BQU1DLHVCQUF1QixDQUFDO0VBT3BDQyxXQUFXQSxDQUFFQyxNQUFjLEVBQUc7SUFFbkMsSUFBSSxDQUFDQyxvQkFBb0IsR0FBRyxJQUFJTCxlQUFlLENBQUUsS0FBSyxFQUFFO01BQ3RESSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLHNCQUF1QixDQUFDO01BQ3JEQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLCtCQUErQixHQUFHLElBQUlSLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDakVJLE1BQU0sRUFBRUEsTUFBTSxDQUFDRSxZQUFZLENBQUUsaUNBQWtDLENBQUM7TUFDaEVDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0UsMkJBQTJCLEdBQUcsSUFBSVQsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUM3REksTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSw2QkFBOEIsQ0FBQztNQUM1REMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDRyxvQkFBb0IsR0FBRyxJQUFJVixlQUFlLENBQUUsS0FBSyxFQUFFO01BQ3RESSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLHNCQUF1QixDQUFDO01BQ3JEQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7RUFDTDtFQUVPSSxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjtFQUVPQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDUixvQkFBb0IsQ0FBQ1EsS0FBSyxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDTCwrQkFBK0IsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7SUFDNUMsSUFBSSxDQUFDSiwyQkFBMkIsQ0FBQ0ksS0FBSyxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDSCxvQkFBb0IsQ0FBQ0csS0FBSyxDQUFDLENBQUM7RUFDbkM7QUFDRjtBQUVBWixhQUFhLENBQUNhLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRVosdUJBQXdCLENBQUMifQ==