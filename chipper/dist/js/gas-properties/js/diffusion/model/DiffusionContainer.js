// Copyright 2019-2022, University of Colorado Boulder

/**
 * DiffusionContainer is the container in the 'Diffusion' screen.
 * It has a fixed width, no lid, and a removable vertical divider.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import RangeWithValue from '../../../../dot/js/RangeWithValue.js';
import BaseContainer from '../../common/model/BaseContainer.js';
import gasProperties from '../../gasProperties.js';

// constants
const CONTAINER_WIDTH = 16000; // pm

export default class DiffusionContainer extends BaseContainer {
  // divider thickness, in pm
  // divider is horizontally centered, but no code assumes that
  // inside bounds for left and right sides of the container
  // whether the divider is in place
  constructor(tandem) {
    super({
      widthRange: new RangeWithValue(CONTAINER_WIDTH, CONTAINER_WIDTH, CONTAINER_WIDTH),
      tandem: tandem
    });

    // In case clients attempt to use this feature of the base class
    this.widthProperty.lazyLink(width => {
      throw new Error('container width is fixed in the Diffusion screen');
    });
    this.dividerThickness = 100;
    this.dividerX = this.left + this.width / 2;
    assert && assert(this.dividerX + this.dividerThickness / 2 > this.left && this.dividerX - this.dividerThickness / 2 < this.right, `dividerX is not in the container: ${this.dividerX}`);
    this.leftBounds = new Bounds2(this.left, this.bottom, this.dividerX, this.top);
    this.rightBounds = new Bounds2(this.dividerX, this.bottom, this.right, this.top);
    this.hasDividerProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('hasDividerProperty'),
      phetioDocumentation: 'whether the container\'s divider is in place'
    });

    // Adjust the bounds of the left and right sides of the container to account for divider thickness
    this.hasDividerProperty.link(hasDivider => {
      const dividerOffset = hasDivider ? this.dividerThickness / 2 : 0;
      this.leftBounds.setMaxX(this.dividerX - dividerOffset);
      this.rightBounds.setMinX(this.dividerX + dividerOffset);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    super.reset();
    this.hasDividerProperty.reset();
  }
}
gasProperties.register('DiffusionContainer', DiffusionContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJCb3VuZHMyIiwiUmFuZ2VXaXRoVmFsdWUiLCJCYXNlQ29udGFpbmVyIiwiZ2FzUHJvcGVydGllcyIsIkNPTlRBSU5FUl9XSURUSCIsIkRpZmZ1c2lvbkNvbnRhaW5lciIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwid2lkdGhSYW5nZSIsIndpZHRoUHJvcGVydHkiLCJsYXp5TGluayIsIndpZHRoIiwiRXJyb3IiLCJkaXZpZGVyVGhpY2tuZXNzIiwiZGl2aWRlclgiLCJsZWZ0IiwiYXNzZXJ0IiwicmlnaHQiLCJsZWZ0Qm91bmRzIiwiYm90dG9tIiwidG9wIiwicmlnaHRCb3VuZHMiLCJoYXNEaXZpZGVyUHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwibGluayIsImhhc0RpdmlkZXIiLCJkaXZpZGVyT2Zmc2V0Iiwic2V0TWF4WCIsInNldE1pblgiLCJkaXNwb3NlIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRpZmZ1c2lvbkNvbnRhaW5lci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaWZmdXNpb25Db250YWluZXIgaXMgdGhlIGNvbnRhaW5lciBpbiB0aGUgJ0RpZmZ1c2lvbicgc2NyZWVuLlxyXG4gKiBJdCBoYXMgYSBmaXhlZCB3aWR0aCwgbm8gbGlkLCBhbmQgYSByZW1vdmFibGUgdmVydGljYWwgZGl2aWRlci5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBSYW5nZVdpdGhWYWx1ZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2VXaXRoVmFsdWUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgQmFzZUNvbnRhaW5lciBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQmFzZUNvbnRhaW5lci5qcyc7XHJcbmltcG9ydCBnYXNQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2dhc1Byb3BlcnRpZXMuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IENPTlRBSU5FUl9XSURUSCA9IDE2MDAwOyAvLyBwbVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlmZnVzaW9uQ29udGFpbmVyIGV4dGVuZHMgQmFzZUNvbnRhaW5lciB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBkaXZpZGVyVGhpY2tuZXNzOiBudW1iZXI7IC8vIGRpdmlkZXIgdGhpY2tuZXNzLCBpbiBwbVxyXG4gIHB1YmxpYyByZWFkb25seSBkaXZpZGVyWDogbnVtYmVyOyAvLyBkaXZpZGVyIGlzIGhvcml6b250YWxseSBjZW50ZXJlZCwgYnV0IG5vIGNvZGUgYXNzdW1lcyB0aGF0XHJcblxyXG4gIC8vIGluc2lkZSBib3VuZHMgZm9yIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIG9mIHRoZSBjb250YWluZXJcclxuICBwdWJsaWMgcmVhZG9ubHkgbGVmdEJvdW5kczogQm91bmRzMjtcclxuICBwdWJsaWMgcmVhZG9ubHkgcmlnaHRCb3VuZHM6IEJvdW5kczI7XHJcblxyXG4gIC8vIHdoZXRoZXIgdGhlIGRpdmlkZXIgaXMgaW4gcGxhY2VcclxuICBwdWJsaWMgcmVhZG9ubHkgaGFzRGl2aWRlclByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICB3aWR0aFJhbmdlOiBuZXcgUmFuZ2VXaXRoVmFsdWUoIENPTlRBSU5FUl9XSURUSCwgQ09OVEFJTkVSX1dJRFRILCBDT05UQUlORVJfV0lEVEggKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBJbiBjYXNlIGNsaWVudHMgYXR0ZW1wdCB0byB1c2UgdGhpcyBmZWF0dXJlIG9mIHRoZSBiYXNlIGNsYXNzXHJcbiAgICB0aGlzLndpZHRoUHJvcGVydHkubGF6eUxpbmsoIHdpZHRoID0+IHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnY29udGFpbmVyIHdpZHRoIGlzIGZpeGVkIGluIHRoZSBEaWZmdXNpb24gc2NyZWVuJyApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuZGl2aWRlclRoaWNrbmVzcyA9IDEwMDtcclxuXHJcbiAgICB0aGlzLmRpdmlkZXJYID0gdGhpcy5sZWZ0ICsgKCB0aGlzLndpZHRoIC8gMiApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydChcclxuICAgICggdGhpcy5kaXZpZGVyWCArIHRoaXMuZGl2aWRlclRoaWNrbmVzcyAvIDIgPiB0aGlzLmxlZnQgKSAmJlxyXG4gICAgKCB0aGlzLmRpdmlkZXJYIC0gdGhpcy5kaXZpZGVyVGhpY2tuZXNzIC8gMiA8IHRoaXMucmlnaHQgKSxcclxuICAgICAgYGRpdmlkZXJYIGlzIG5vdCBpbiB0aGUgY29udGFpbmVyOiAke3RoaXMuZGl2aWRlclh9YCApO1xyXG5cclxuICAgIHRoaXMubGVmdEJvdW5kcyA9IG5ldyBCb3VuZHMyKCB0aGlzLmxlZnQsIHRoaXMuYm90dG9tLCB0aGlzLmRpdmlkZXJYLCB0aGlzLnRvcCApO1xyXG4gICAgdGhpcy5yaWdodEJvdW5kcyA9IG5ldyBCb3VuZHMyKCB0aGlzLmRpdmlkZXJYLCB0aGlzLmJvdHRvbSwgdGhpcy5yaWdodCwgdGhpcy50b3AgKTtcclxuXHJcbiAgICB0aGlzLmhhc0RpdmlkZXJQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaGFzRGl2aWRlclByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnd2hldGhlciB0aGUgY29udGFpbmVyXFwncyBkaXZpZGVyIGlzIGluIHBsYWNlJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEFkanVzdCB0aGUgYm91bmRzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBvZiB0aGUgY29udGFpbmVyIHRvIGFjY291bnQgZm9yIGRpdmlkZXIgdGhpY2tuZXNzXHJcbiAgICB0aGlzLmhhc0RpdmlkZXJQcm9wZXJ0eS5saW5rKCBoYXNEaXZpZGVyID0+IHtcclxuICAgICAgY29uc3QgZGl2aWRlck9mZnNldCA9IGhhc0RpdmlkZXIgPyAoIHRoaXMuZGl2aWRlclRoaWNrbmVzcyAvIDIgKSA6IDA7XHJcbiAgICAgIHRoaXMubGVmdEJvdW5kcy5zZXRNYXhYKCB0aGlzLmRpdmlkZXJYIC0gZGl2aWRlck9mZnNldCApO1xyXG4gICAgICB0aGlzLnJpZ2h0Qm91bmRzLnNldE1pblgoIHRoaXMuZGl2aWRlclggKyBkaXZpZGVyT2Zmc2V0ICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICAgIHRoaXMuaGFzRGl2aWRlclByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnRGlmZnVzaW9uQ29udGFpbmVyJywgRGlmZnVzaW9uQ29udGFpbmVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUVwRSxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLGNBQWMsTUFBTSxzQ0FBc0M7QUFFakUsT0FBT0MsYUFBYSxNQUFNLHFDQUFxQztBQUMvRCxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCOztBQUVsRDtBQUNBLE1BQU1DLGVBQWUsR0FBRyxLQUFLLENBQUMsQ0FBQzs7QUFFL0IsZUFBZSxNQUFNQyxrQkFBa0IsU0FBU0gsYUFBYSxDQUFDO0VBRWxCO0VBQ1I7RUFFbEM7RUFJQTtFQUdPSSxXQUFXQSxDQUFFQyxNQUFjLEVBQUc7SUFFbkMsS0FBSyxDQUFFO01BQ0xDLFVBQVUsRUFBRSxJQUFJUCxjQUFjLENBQUVHLGVBQWUsRUFBRUEsZUFBZSxFQUFFQSxlQUFnQixDQUFDO01BQ25GRyxNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDRSxhQUFhLENBQUNDLFFBQVEsQ0FBRUMsS0FBSyxJQUFJO01BQ3BDLE1BQU0sSUFBSUMsS0FBSyxDQUFFLGtEQUFtRCxDQUFDO0lBQ3ZFLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsR0FBRztJQUUzQixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJLENBQUNDLElBQUksR0FBSyxJQUFJLENBQUNKLEtBQUssR0FBRyxDQUFHO0lBQzlDSyxNQUFNLElBQUlBLE1BQU0sQ0FDZCxJQUFJLENBQUNGLFFBQVEsR0FBRyxJQUFJLENBQUNELGdCQUFnQixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUNFLElBQUksSUFDckQsSUFBSSxDQUFDRCxRQUFRLEdBQUcsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDSSxLQUFPLEVBQ3ZELHFDQUFvQyxJQUFJLENBQUNILFFBQVMsRUFBRSxDQUFDO0lBRXhELElBQUksQ0FBQ0ksVUFBVSxHQUFHLElBQUlsQixPQUFPLENBQUUsSUFBSSxDQUFDZSxJQUFJLEVBQUUsSUFBSSxDQUFDSSxNQUFNLEVBQUUsSUFBSSxDQUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDTSxHQUFJLENBQUM7SUFDaEYsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSXJCLE9BQU8sQ0FBRSxJQUFJLENBQUNjLFFBQVEsRUFBRSxJQUFJLENBQUNLLE1BQU0sRUFBRSxJQUFJLENBQUNGLEtBQUssRUFBRSxJQUFJLENBQUNHLEdBQUksQ0FBQztJQUVsRixJQUFJLENBQUNFLGtCQUFrQixHQUFHLElBQUl2QixlQUFlLENBQUUsSUFBSSxFQUFFO01BQ25EUSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ2dCLFlBQVksQ0FBRSxvQkFBcUIsQ0FBQztNQUNuREMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDRixrQkFBa0IsQ0FBQ0csSUFBSSxDQUFFQyxVQUFVLElBQUk7TUFDMUMsTUFBTUMsYUFBYSxHQUFHRCxVQUFVLEdBQUssSUFBSSxDQUFDYixnQkFBZ0IsR0FBRyxDQUFDLEdBQUssQ0FBQztNQUNwRSxJQUFJLENBQUNLLFVBQVUsQ0FBQ1UsT0FBTyxDQUFFLElBQUksQ0FBQ2QsUUFBUSxHQUFHYSxhQUFjLENBQUM7TUFDeEQsSUFBSSxDQUFDTixXQUFXLENBQUNRLE9BQU8sQ0FBRSxJQUFJLENBQUNmLFFBQVEsR0FBR2EsYUFBYyxDQUFDO0lBQzNELENBQUUsQ0FBQztFQUNMO0VBRWdCRyxPQUFPQSxDQUFBLEVBQVM7SUFDOUJkLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNjLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0VBRWdCQyxLQUFLQSxDQUFBLEVBQVM7SUFDNUIsS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ1Qsa0JBQWtCLENBQUNTLEtBQUssQ0FBQyxDQUFDO0VBQ2pDO0FBQ0Y7QUFFQTVCLGFBQWEsQ0FBQzZCLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRTNCLGtCQUFtQixDQUFDIn0=