// Copyright 2018-2022, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import { Utils } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import GasPropertiesConstants from './common/GasPropertiesConstants.js';
import GasPropertiesPreferencesNode from './common/view/GasPropertiesPreferencesNode.js';
import DiffusionScreen from './diffusion/DiffusionScreen.js';
import EnergyScreen from './energy/EnergyScreen.js';
import ExploreScreen from './explore/ExploreScreen.js';
import GasPropertiesStrings from './GasPropertiesStrings.js';
import IdealScreen from './ideal/IdealScreen.js';
simLauncher.launch(() => {
  const screens = [new IdealScreen(Tandem.ROOT.createTandem('idealScreen')), new ExploreScreen(Tandem.ROOT.createTandem('exploreScreen')), new EnergyScreen(Tandem.ROOT.createTandem('energyScreen')), new DiffusionScreen(Tandem.ROOT.createTandem('diffusionScreen'))];
  const sim = new Sim(GasPropertiesStrings['gas-properties'].titleStringProperty, screens, {
    webgl: true,
    // Enabled for high-performance Sprites
    credits: GasPropertiesConstants.CREDITS,
    preferencesModel: new PreferencesModel({
      visualOptions: {
        supportsProjectorMode: true
      },
      simulationOptions: {
        customPreferences: [{
          createContent: tandem => new GasPropertiesPreferencesNode({
            tandem: tandem.createTandem('simPreferences')
          })
        }]
      }
    })
  });

  // Log whether we're using WebGL, which is the preferred rendering option for Sprites
  phet.log && phet.log(`using WebGL = ${phet.chipper.queryParameters.webgl && Utils.isWebGLSupported}`);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc01vZGVsIiwiU2ltIiwic2ltTGF1bmNoZXIiLCJVdGlscyIsIlRhbmRlbSIsIkdhc1Byb3BlcnRpZXNDb25zdGFudHMiLCJHYXNQcm9wZXJ0aWVzUHJlZmVyZW5jZXNOb2RlIiwiRGlmZnVzaW9uU2NyZWVuIiwiRW5lcmd5U2NyZWVuIiwiRXhwbG9yZVNjcmVlbiIsIkdhc1Byb3BlcnRpZXNTdHJpbmdzIiwiSWRlYWxTY3JlZW4iLCJsYXVuY2giLCJzY3JlZW5zIiwiUk9PVCIsImNyZWF0ZVRhbmRlbSIsInNpbSIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJ3ZWJnbCIsImNyZWRpdHMiLCJDUkVESVRTIiwicHJlZmVyZW5jZXNNb2RlbCIsInZpc3VhbE9wdGlvbnMiLCJzdXBwb3J0c1Byb2plY3Rvck1vZGUiLCJzaW11bGF0aW9uT3B0aW9ucyIsImN1c3RvbVByZWZlcmVuY2VzIiwiY3JlYXRlQ29udGVudCIsInRhbmRlbSIsInBoZXQiLCJsb2ciLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiaXNXZWJHTFN1cHBvcnRlZCIsInN0YXJ0Il0sInNvdXJjZXMiOlsiZ2FzLXByb3BlcnRpZXMtbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWluIGVudHJ5IHBvaW50IGZvciB0aGUgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcmVmZXJlbmNlc01vZGVsIGZyb20gJy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzTW9kZWwuanMnO1xyXG5pbXBvcnQgU2ltIGZyb20gJy4uLy4uL2pvaXN0L2pzL1NpbS5qcyc7XHJcbmltcG9ydCBzaW1MYXVuY2hlciBmcm9tICcuLi8uLi9qb2lzdC9qcy9zaW1MYXVuY2hlci5qcyc7XHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNDb25zdGFudHMgZnJvbSAnLi9jb21tb24vR2FzUHJvcGVydGllc0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzUHJlZmVyZW5jZXNOb2RlIGZyb20gJy4vY29tbW9uL3ZpZXcvR2FzUHJvcGVydGllc1ByZWZlcmVuY2VzTm9kZS5qcyc7XHJcbmltcG9ydCBEaWZmdXNpb25TY3JlZW4gZnJvbSAnLi9kaWZmdXNpb24vRGlmZnVzaW9uU2NyZWVuLmpzJztcclxuaW1wb3J0IEVuZXJneVNjcmVlbiBmcm9tICcuL2VuZXJneS9FbmVyZ3lTY3JlZW4uanMnO1xyXG5pbXBvcnQgRXhwbG9yZVNjcmVlbiBmcm9tICcuL2V4cGxvcmUvRXhwbG9yZVNjcmVlbi5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzU3RyaW5ncyBmcm9tICcuL0dhc1Byb3BlcnRpZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IElkZWFsU2NyZWVuIGZyb20gJy4vaWRlYWwvSWRlYWxTY3JlZW4uanMnO1xyXG5cclxuc2ltTGF1bmNoZXIubGF1bmNoKCAoKSA9PiB7XHJcblxyXG4gIGNvbnN0IHNjcmVlbnMgPSBbXHJcbiAgICBuZXcgSWRlYWxTY3JlZW4oIFRhbmRlbS5ST09ULmNyZWF0ZVRhbmRlbSggJ2lkZWFsU2NyZWVuJyApICksXHJcbiAgICBuZXcgRXhwbG9yZVNjcmVlbiggVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAnZXhwbG9yZVNjcmVlbicgKSApLFxyXG4gICAgbmV3IEVuZXJneVNjcmVlbiggVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAnZW5lcmd5U2NyZWVuJyApICksXHJcbiAgICBuZXcgRGlmZnVzaW9uU2NyZWVuKCBUYW5kZW0uUk9PVC5jcmVhdGVUYW5kZW0oICdkaWZmdXNpb25TY3JlZW4nICkgKVxyXG4gIF07XHJcblxyXG4gIGNvbnN0IHNpbSA9IG5ldyBTaW0oIEdhc1Byb3BlcnRpZXNTdHJpbmdzWyAnZ2FzLXByb3BlcnRpZXMnIF0udGl0bGVTdHJpbmdQcm9wZXJ0eSwgc2NyZWVucywge1xyXG4gICAgd2ViZ2w6IHRydWUsIC8vIEVuYWJsZWQgZm9yIGhpZ2gtcGVyZm9ybWFuY2UgU3ByaXRlc1xyXG4gICAgY3JlZGl0czogR2FzUHJvcGVydGllc0NvbnN0YW50cy5DUkVESVRTLFxyXG4gICAgcHJlZmVyZW5jZXNNb2RlbDogbmV3IFByZWZlcmVuY2VzTW9kZWwoIHtcclxuICAgICAgdmlzdWFsT3B0aW9uczoge1xyXG4gICAgICAgIHN1cHBvcnRzUHJvamVjdG9yTW9kZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzaW11bGF0aW9uT3B0aW9uczoge1xyXG4gICAgICAgIGN1c3RvbVByZWZlcmVuY2VzOiBbIHtcclxuICAgICAgICAgIGNyZWF0ZUNvbnRlbnQ6IHRhbmRlbSA9PiBuZXcgR2FzUHJvcGVydGllc1ByZWZlcmVuY2VzTm9kZSgge1xyXG4gICAgICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzaW1QcmVmZXJlbmNlcycgKVxyXG4gICAgICAgICAgfSApXHJcbiAgICAgICAgfSBdXHJcbiAgICAgIH1cclxuICAgIH0gKVxyXG4gIH0gKTtcclxuXHJcbiAgLy8gTG9nIHdoZXRoZXIgd2UncmUgdXNpbmcgV2ViR0wsIHdoaWNoIGlzIHRoZSBwcmVmZXJyZWQgcmVuZGVyaW5nIG9wdGlvbiBmb3IgU3ByaXRlc1xyXG4gIHBoZXQubG9nICYmIHBoZXQubG9nKCBgdXNpbmcgV2ViR0wgPSAke3BoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMud2ViZ2wgJiYgVXRpbHMuaXNXZWJHTFN1cHBvcnRlZH1gICk7XHJcblxyXG4gIHNpbS5zdGFydCgpO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGdCQUFnQixNQUFNLGdEQUFnRDtBQUM3RSxPQUFPQyxHQUFHLE1BQU0sdUJBQXVCO0FBQ3ZDLE9BQU9DLFdBQVcsTUFBTSwrQkFBK0I7QUFDdkQsU0FBU0MsS0FBSyxRQUFRLDZCQUE2QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLHNCQUFzQixNQUFNLG9DQUFvQztBQUN2RSxPQUFPQyw0QkFBNEIsTUFBTSwrQ0FBK0M7QUFDeEYsT0FBT0MsZUFBZSxNQUFNLGdDQUFnQztBQUM1RCxPQUFPQyxZQUFZLE1BQU0sMEJBQTBCO0FBQ25ELE9BQU9DLGFBQWEsTUFBTSw0QkFBNEI7QUFDdEQsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBQzVELE9BQU9DLFdBQVcsTUFBTSx3QkFBd0I7QUFFaERULFdBQVcsQ0FBQ1UsTUFBTSxDQUFFLE1BQU07RUFFeEIsTUFBTUMsT0FBTyxHQUFHLENBQ2QsSUFBSUYsV0FBVyxDQUFFUCxNQUFNLENBQUNVLElBQUksQ0FBQ0MsWUFBWSxDQUFFLGFBQWMsQ0FBRSxDQUFDLEVBQzVELElBQUlOLGFBQWEsQ0FBRUwsTUFBTSxDQUFDVSxJQUFJLENBQUNDLFlBQVksQ0FBRSxlQUFnQixDQUFFLENBQUMsRUFDaEUsSUFBSVAsWUFBWSxDQUFFSixNQUFNLENBQUNVLElBQUksQ0FBQ0MsWUFBWSxDQUFFLGNBQWUsQ0FBRSxDQUFDLEVBQzlELElBQUlSLGVBQWUsQ0FBRUgsTUFBTSxDQUFDVSxJQUFJLENBQUNDLFlBQVksQ0FBRSxpQkFBa0IsQ0FBRSxDQUFDLENBQ3JFO0VBRUQsTUFBTUMsR0FBRyxHQUFHLElBQUlmLEdBQUcsQ0FBRVMsb0JBQW9CLENBQUUsZ0JBQWdCLENBQUUsQ0FBQ08sbUJBQW1CLEVBQUVKLE9BQU8sRUFBRTtJQUMxRkssS0FBSyxFQUFFLElBQUk7SUFBRTtJQUNiQyxPQUFPLEVBQUVkLHNCQUFzQixDQUFDZSxPQUFPO0lBQ3ZDQyxnQkFBZ0IsRUFBRSxJQUFJckIsZ0JBQWdCLENBQUU7TUFDdENzQixhQUFhLEVBQUU7UUFDYkMscUJBQXFCLEVBQUU7TUFDekIsQ0FBQztNQUNEQyxpQkFBaUIsRUFBRTtRQUNqQkMsaUJBQWlCLEVBQUUsQ0FBRTtVQUNuQkMsYUFBYSxFQUFFQyxNQUFNLElBQUksSUFBSXJCLDRCQUE0QixDQUFFO1lBQ3pEcUIsTUFBTSxFQUFFQSxNQUFNLENBQUNaLFlBQVksQ0FBRSxnQkFBaUI7VUFDaEQsQ0FBRTtRQUNKLENBQUM7TUFDSDtJQUNGLENBQUU7RUFDSixDQUFFLENBQUM7O0VBRUg7RUFDQWEsSUFBSSxDQUFDQyxHQUFHLElBQUlELElBQUksQ0FBQ0MsR0FBRyxDQUFHLGlCQUFnQkQsSUFBSSxDQUFDRSxPQUFPLENBQUNDLGVBQWUsQ0FBQ2IsS0FBSyxJQUFJZixLQUFLLENBQUM2QixnQkFBaUIsRUFBRSxDQUFDO0VBRXZHaEIsR0FBRyxDQUFDaUIsS0FBSyxDQUFDLENBQUM7QUFDYixDQUFFLENBQUMifQ==