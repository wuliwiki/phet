// Copyright 2018-2022, University of Colorado Boulder

/**
 * IdealScreen is the 'Ideal' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../phet-core/js/optionize.js';
import GasPropertiesScreen from '../common/GasPropertiesScreen.js';
import GasPropertiesIconFactory from '../common/view/GasPropertiesIconFactory.js';
import gasProperties from '../gasProperties.js';
import GasPropertiesStrings from '../GasPropertiesStrings.js';
import IdealModel from './model/IdealModel.js';
import IdealScreenView from './view/IdealScreenView.js';
export default class IdealScreen extends GasPropertiesScreen {
  constructor(tandem, providedOptions) {
    const options = optionize()({
      // SelfOptions
      hasHoldConstantControls: true,
      // GasPropertiesScreenOptions
      name: GasPropertiesStrings.screen.idealStringProperty,
      homeScreenIcon: GasPropertiesIconFactory.createIdealScreenIcon(),
      tandem: tandem
    }, providedOptions);
    const createModel = () => new IdealModel(tandem.createTandem('model'));
    const createView = model => new IdealScreenView(model, tandem.createTandem('view'), {
      hasHoldConstantControls: options.hasHoldConstantControls
    });
    super(createModel, createView, options);
  }
}
gasProperties.register('IdealScreen', IdealScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJHYXNQcm9wZXJ0aWVzU2NyZWVuIiwiR2FzUHJvcGVydGllc0ljb25GYWN0b3J5IiwiZ2FzUHJvcGVydGllcyIsIkdhc1Byb3BlcnRpZXNTdHJpbmdzIiwiSWRlYWxNb2RlbCIsIklkZWFsU2NyZWVuVmlldyIsIklkZWFsU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaGFzSG9sZENvbnN0YW50Q29udHJvbHMiLCJuYW1lIiwic2NyZWVuIiwiaWRlYWxTdHJpbmdQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlSWRlYWxTY3JlZW5JY29uIiwiY3JlYXRlTW9kZWwiLCJjcmVhdGVUYW5kZW0iLCJjcmVhdGVWaWV3IiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIklkZWFsU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIElkZWFsU2NyZWVuIGlzIHRoZSAnSWRlYWwnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc1NjcmVlbiwgeyBHYXNQcm9wZXJ0aWVzU2NyZWVuT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi9HYXNQcm9wZXJ0aWVzU2NyZWVuLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNJY29uRmFjdG9yeSBmcm9tICcuLi9jb21tb24vdmlldy9HYXNQcm9wZXJ0aWVzSWNvbkZhY3RvcnkuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNTdHJpbmdzIGZyb20gJy4uL0dhc1Byb3BlcnRpZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IElkZWFsTW9kZWwgZnJvbSAnLi9tb2RlbC9JZGVhbE1vZGVsLmpzJztcclxuaW1wb3J0IElkZWFsU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvSWRlYWxTY3JlZW5WaWV3LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIFdoZXRoZXIgdGhlIGNvbnRyb2wgcGFuZWwgaGFzIHRoZSByYWRpbyBidXR0b24gZ3JvdXAgdGl0bGVkICdIb2xkIENvbnN0YW50J1xyXG4gIGhhc0hvbGRDb25zdGFudENvbnRyb2xzPzogYm9vbGVhbjtcclxufTtcclxuXHJcbnR5cGUgSWRlYWxTY3JlZW5PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrT3B0aW9uYWw8R2FzUHJvcGVydGllc1NjcmVlbk9wdGlvbnMsICduYW1lJyB8ICdob21lU2NyZWVuSWNvbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRlYWxTY3JlZW4gZXh0ZW5kcyBHYXNQcm9wZXJ0aWVzU2NyZWVuPElkZWFsTW9kZWwsIElkZWFsU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtLCBwcm92aWRlZE9wdGlvbnM/OiBJZGVhbFNjcmVlbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxJZGVhbFNjcmVlbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBHYXNQcm9wZXJ0aWVzU2NyZWVuT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgaGFzSG9sZENvbnN0YW50Q29udHJvbHM6IHRydWUsXHJcblxyXG4gICAgICAvLyBHYXNQcm9wZXJ0aWVzU2NyZWVuT3B0aW9uc1xyXG4gICAgICBuYW1lOiBHYXNQcm9wZXJ0aWVzU3RyaW5ncy5zY3JlZW4uaWRlYWxTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IEdhc1Byb3BlcnRpZXNJY29uRmFjdG9yeS5jcmVhdGVJZGVhbFNjcmVlbkljb24oKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZU1vZGVsID0gKCkgPT4gbmV3IElkZWFsTW9kZWwoIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApO1xyXG4gICAgY29uc3QgY3JlYXRlVmlldyA9ICggbW9kZWw6IElkZWFsTW9kZWwgKSA9PiBuZXcgSWRlYWxTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICksIHtcclxuICAgICAgaGFzSG9sZENvbnN0YW50Q29udHJvbHM6IG9wdGlvbnMuaGFzSG9sZENvbnN0YW50Q29udHJvbHNcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY3JlYXRlTW9kZWwsIGNyZWF0ZVZpZXcsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdJZGVhbFNjcmVlbicsIElkZWFsU2NyZWVuICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxvQ0FBb0M7QUFHMUQsT0FBT0MsbUJBQW1CLE1BQXNDLGtDQUFrQztBQUNsRyxPQUFPQyx3QkFBd0IsTUFBTSw0Q0FBNEM7QUFDakYsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxvQkFBb0IsTUFBTSw0QkFBNEI7QUFDN0QsT0FBT0MsVUFBVSxNQUFNLHVCQUF1QjtBQUM5QyxPQUFPQyxlQUFlLE1BQU0sMkJBQTJCO0FBVXZELGVBQWUsTUFBTUMsV0FBVyxTQUFTTixtQkFBbUIsQ0FBOEI7RUFFakZPLFdBQVdBLENBQUVDLE1BQWMsRUFBRUMsZUFBb0MsRUFBRztJQUV6RSxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBOEQsQ0FBQyxDQUFFO01BRXhGO01BQ0FZLHVCQUF1QixFQUFFLElBQUk7TUFFN0I7TUFDQUMsSUFBSSxFQUFFVCxvQkFBb0IsQ0FBQ1UsTUFBTSxDQUFDQyxtQkFBbUI7TUFDckRDLGNBQWMsRUFBRWQsd0JBQXdCLENBQUNlLHFCQUFxQixDQUFDLENBQUM7TUFDaEVSLE1BQU0sRUFBRUE7SUFDVixDQUFDLEVBQUVDLGVBQWdCLENBQUM7SUFFcEIsTUFBTVEsV0FBVyxHQUFHQSxDQUFBLEtBQU0sSUFBSWIsVUFBVSxDQUFFSSxNQUFNLENBQUNVLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQztJQUMxRSxNQUFNQyxVQUFVLEdBQUtDLEtBQWlCLElBQU0sSUFBSWYsZUFBZSxDQUFFZSxLQUFLLEVBQUVaLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE1BQU8sQ0FBQyxFQUFFO01BQ3JHUCx1QkFBdUIsRUFBRUQsT0FBTyxDQUFDQztJQUNuQyxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVNLFdBQVcsRUFBRUUsVUFBVSxFQUFFVCxPQUFRLENBQUM7RUFDM0M7QUFDRjtBQUVBUixhQUFhLENBQUNtQixRQUFRLENBQUUsYUFBYSxFQUFFZixXQUFZLENBQUMifQ==