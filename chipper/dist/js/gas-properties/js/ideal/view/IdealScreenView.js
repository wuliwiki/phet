// Copyright 2018-2022, University of Colorado Boulder

/**
 * IdealScreenView is the view for the 'Ideal' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { VBox } from '../../../../scenery/js/imports.js';
import GasPropertiesColors from '../../common/GasPropertiesColors.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import GasPropertiesOopsDialog from '../../common/view/GasPropertiesOopsDialog.js';
import IdealGasLawScreenView from '../../common/view/IdealGasLawScreenView.js';
import ParticlesAccordionBox from '../../common/view/ParticlesAccordionBox.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesStrings from '../../GasPropertiesStrings.js';
import IdealControlPanel from './IdealControlPanel.js';
import IdealViewProperties from './IdealViewProperties.js';
export default class IdealScreenView extends IdealGasLawScreenView {
  constructor(model, tandem, providedOptions) {
    const options = optionize()({
      // SelfOptions
      hasHoldConstantControls: true,
      // IdealScreenViewOptions
      resizeGripColor: GasPropertiesColors.idealResizeGripColorProperty
    }, providedOptions);

    // view-specific Properties
    const viewProperties = new IdealViewProperties(tandem.createTandem('viewProperties'));
    super(model, viewProperties.particleTypeProperty, viewProperties.widthVisibleProperty, tandem, options);
    const collisionCounter = model.collisionCounter;
    assert && assert(collisionCounter);

    // Control panel at upper right
    const controlPanel = new IdealControlPanel(model.holdConstantProperty, model.particleSystem.numberOfParticlesProperty, model.pressureModel.pressureProperty, model.container.isOpenProperty, viewProperties.widthVisibleProperty, model.stopwatch.isVisibleProperty, collisionCounter.visibleProperty, {
      hasHoldConstantControls: options.hasHoldConstantControls,
      fixedWidth: GasPropertiesConstants.RIGHT_PANEL_WIDTH,
      tandem: tandem.createTandem('controlPanel')
    });

    // Particles accordion box
    const particlesAccordionBox = new ParticlesAccordionBox(model.particleSystem.numberOfHeavyParticlesProperty, model.particleSystem.numberOfLightParticlesProperty, model.modelViewTransform, {
      fixedWidth: GasPropertiesConstants.RIGHT_PANEL_WIDTH,
      expandedProperty: viewProperties.particlesExpandedProperty,
      tandem: tandem.createTandem('particlesAccordionBox')
    });
    const vBox = new VBox({
      align: 'left',
      spacing: 15,
      children: [controlPanel, particlesAccordionBox],
      right: this.layoutBounds.right - GasPropertiesConstants.SCREEN_VIEW_X_MARGIN,
      top: this.layoutBounds.top + GasPropertiesConstants.SCREEN_VIEW_Y_MARGIN
    });
    this.addChild(vBox);
    vBox.moveToBack();

    // OopsDialogs related to the 'Hold Constant' feature. When holding a quantity constant would break the model,
    // the model puts itself in a sane configuration, the model notifies the view via an Emitter, and the view
    // notifies the user via a dialog. The student is almost certain to encounter these conditions, so dialogs are
    // created eagerly and reused.
    const oopsTemperatureEmptyDialog = new GasPropertiesOopsDialog(GasPropertiesStrings.oopsTemperatureEmptyStringProperty, tandem.createTandem('oopsTemperatureEmptyDialog'));
    model.oopsEmitters.temperatureEmptyEmitter.addListener(() => {
      this.showDialog(oopsTemperatureEmptyDialog);
    });
    const oopsTemperatureOpenDialog = new GasPropertiesOopsDialog(GasPropertiesStrings.oopsTemperatureOpenStringProperty, tandem.createTandem('oopsTemperatureOpenDialog'));
    model.oopsEmitters.temperatureOpenEmitter.addListener(() => {
      this.showDialog(oopsTemperatureOpenDialog);
    });
    const oopsPressureEmptyDialog = new GasPropertiesOopsDialog(GasPropertiesStrings.oopsPressureEmptyStringProperty, tandem.createTandem('oopsPressureEmptyDialog'));
    model.oopsEmitters.pressureEmptyEmitter.addListener(() => {
      this.showDialog(oopsPressureEmptyDialog);
    });
    const oopsPressureLargeDialog = new GasPropertiesOopsDialog(GasPropertiesStrings.oopsPressureLargeStringProperty, tandem.createTandem('oopsPressureLargeDialog'));
    model.oopsEmitters.pressureLargeEmitter.addListener(() => {
      this.showDialog(oopsPressureLargeDialog);
    });
    const oopsPressureSmallDialog = new GasPropertiesOopsDialog(GasPropertiesStrings.oopsPressureSmallStringProperty, tandem.createTandem('oopsPressureSmallDialog'));
    model.oopsEmitters.pressureSmallEmitter.addListener(() => {
      this.showDialog(oopsPressureSmallDialog);
    });
    this.viewProperties = viewProperties;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    super.reset();
    this.viewProperties.reset();
  }
}
gasProperties.register('IdealScreenView', IdealScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJWQm94IiwiR2FzUHJvcGVydGllc0NvbG9ycyIsIkdhc1Byb3BlcnRpZXNDb25zdGFudHMiLCJHYXNQcm9wZXJ0aWVzT29wc0RpYWxvZyIsIklkZWFsR2FzTGF3U2NyZWVuVmlldyIsIlBhcnRpY2xlc0FjY29yZGlvbkJveCIsImdhc1Byb3BlcnRpZXMiLCJHYXNQcm9wZXJ0aWVzU3RyaW5ncyIsIklkZWFsQ29udHJvbFBhbmVsIiwiSWRlYWxWaWV3UHJvcGVydGllcyIsIklkZWFsU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaGFzSG9sZENvbnN0YW50Q29udHJvbHMiLCJyZXNpemVHcmlwQ29sb3IiLCJpZGVhbFJlc2l6ZUdyaXBDb2xvclByb3BlcnR5Iiwidmlld1Byb3BlcnRpZXMiLCJjcmVhdGVUYW5kZW0iLCJwYXJ0aWNsZVR5cGVQcm9wZXJ0eSIsIndpZHRoVmlzaWJsZVByb3BlcnR5IiwiY29sbGlzaW9uQ291bnRlciIsImFzc2VydCIsImNvbnRyb2xQYW5lbCIsImhvbGRDb25zdGFudFByb3BlcnR5IiwicGFydGljbGVTeXN0ZW0iLCJudW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5IiwicHJlc3N1cmVNb2RlbCIsInByZXNzdXJlUHJvcGVydHkiLCJjb250YWluZXIiLCJpc09wZW5Qcm9wZXJ0eSIsInN0b3B3YXRjaCIsImlzVmlzaWJsZVByb3BlcnR5IiwidmlzaWJsZVByb3BlcnR5IiwiZml4ZWRXaWR0aCIsIlJJR0hUX1BBTkVMX1dJRFRIIiwicGFydGljbGVzQWNjb3JkaW9uQm94IiwibnVtYmVyT2ZIZWF2eVBhcnRpY2xlc1Byb3BlcnR5IiwibnVtYmVyT2ZMaWdodFBhcnRpY2xlc1Byb3BlcnR5IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiZXhwYW5kZWRQcm9wZXJ0eSIsInBhcnRpY2xlc0V4cGFuZGVkUHJvcGVydHkiLCJ2Qm94IiwiYWxpZ24iLCJzcGFjaW5nIiwiY2hpbGRyZW4iLCJyaWdodCIsImxheW91dEJvdW5kcyIsIlNDUkVFTl9WSUVXX1hfTUFSR0lOIiwidG9wIiwiU0NSRUVOX1ZJRVdfWV9NQVJHSU4iLCJhZGRDaGlsZCIsIm1vdmVUb0JhY2siLCJvb3BzVGVtcGVyYXR1cmVFbXB0eURpYWxvZyIsIm9vcHNUZW1wZXJhdHVyZUVtcHR5U3RyaW5nUHJvcGVydHkiLCJvb3BzRW1pdHRlcnMiLCJ0ZW1wZXJhdHVyZUVtcHR5RW1pdHRlciIsImFkZExpc3RlbmVyIiwic2hvd0RpYWxvZyIsIm9vcHNUZW1wZXJhdHVyZU9wZW5EaWFsb2ciLCJvb3BzVGVtcGVyYXR1cmVPcGVuU3RyaW5nUHJvcGVydHkiLCJ0ZW1wZXJhdHVyZU9wZW5FbWl0dGVyIiwib29wc1ByZXNzdXJlRW1wdHlEaWFsb2ciLCJvb3BzUHJlc3N1cmVFbXB0eVN0cmluZ1Byb3BlcnR5IiwicHJlc3N1cmVFbXB0eUVtaXR0ZXIiLCJvb3BzUHJlc3N1cmVMYXJnZURpYWxvZyIsIm9vcHNQcmVzc3VyZUxhcmdlU3RyaW5nUHJvcGVydHkiLCJwcmVzc3VyZUxhcmdlRW1pdHRlciIsIm9vcHNQcmVzc3VyZVNtYWxsRGlhbG9nIiwib29wc1ByZXNzdXJlU21hbGxTdHJpbmdQcm9wZXJ0eSIsInByZXNzdXJlU21hbGxFbWl0dGVyIiwiZGlzcG9zZSIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJZGVhbFNjcmVlblZpZXcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSWRlYWxTY3JlZW5WaWV3IGlzIHRoZSB2aWV3IGZvciB0aGUgJ0lkZWFsJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9HYXNQcm9wZXJ0aWVzQ29sb3JzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0dhc1Byb3BlcnRpZXNDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc09vcHNEaWFsb2cgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvR2FzUHJvcGVydGllc09vcHNEaWFsb2cuanMnO1xyXG5pbXBvcnQgSWRlYWxHYXNMYXdTY3JlZW5WaWV3LCB7IElkZWFsR2FzTGF3U2NyZWVuVmlld09wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9JZGVhbEdhc0xhd1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgUGFydGljbGVzQWNjb3JkaW9uQm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1BhcnRpY2xlc0FjY29yZGlvbkJveC5qcyc7XHJcbmltcG9ydCBnYXNQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2dhc1Byb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc1N0cmluZ3MgZnJvbSAnLi4vLi4vR2FzUHJvcGVydGllc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgSWRlYWxNb2RlbCBmcm9tICcuLi9tb2RlbC9JZGVhbE1vZGVsLmpzJztcclxuaW1wb3J0IElkZWFsQ29udHJvbFBhbmVsIGZyb20gJy4vSWRlYWxDb250cm9sUGFuZWwuanMnO1xyXG5pbXBvcnQgSWRlYWxWaWV3UHJvcGVydGllcyBmcm9tICcuL0lkZWFsVmlld1Byb3BlcnRpZXMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBoYXNIb2xkQ29uc3RhbnRDb250cm9scz86IGJvb2xlYW47XHJcbn07XHJcblxyXG50eXBlIElkZWFsU2NyZWVuVmlld09wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIElkZWFsR2FzTGF3U2NyZWVuVmlld09wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJZGVhbFNjcmVlblZpZXcgZXh0ZW5kcyBJZGVhbEdhc0xhd1NjcmVlblZpZXcge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHZpZXdQcm9wZXJ0aWVzOiBJZGVhbFZpZXdQcm9wZXJ0aWVzO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBJZGVhbE1vZGVsLCB0YW5kZW06IFRhbmRlbSwgcHJvdmlkZWRPcHRpb25zPzogSWRlYWxTY3JlZW5WaWV3T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPElkZWFsU2NyZWVuVmlld09wdGlvbnMsIFNlbGZPcHRpb25zLCBJZGVhbEdhc0xhd1NjcmVlblZpZXdPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBoYXNIb2xkQ29uc3RhbnRDb250cm9sczogdHJ1ZSxcclxuXHJcbiAgICAgIC8vIElkZWFsU2NyZWVuVmlld09wdGlvbnNcclxuICAgICAgcmVzaXplR3JpcENvbG9yOiBHYXNQcm9wZXJ0aWVzQ29sb3JzLmlkZWFsUmVzaXplR3JpcENvbG9yUHJvcGVydHlcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHZpZXctc3BlY2lmaWMgUHJvcGVydGllc1xyXG4gICAgY29uc3Qgdmlld1Byb3BlcnRpZXMgPSBuZXcgSWRlYWxWaWV3UHJvcGVydGllcyggdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXdQcm9wZXJ0aWVzJyApICk7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCB2aWV3UHJvcGVydGllcy5wYXJ0aWNsZVR5cGVQcm9wZXJ0eSwgdmlld1Byb3BlcnRpZXMud2lkdGhWaXNpYmxlUHJvcGVydHksIHRhbmRlbSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGNvbGxpc2lvbkNvdW50ZXIgPSBtb2RlbC5jb2xsaXNpb25Db3VudGVyITtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvbGxpc2lvbkNvdW50ZXIgKTtcclxuXHJcbiAgICAvLyBDb250cm9sIHBhbmVsIGF0IHVwcGVyIHJpZ2h0XHJcbiAgICBjb25zdCBjb250cm9sUGFuZWwgPSBuZXcgSWRlYWxDb250cm9sUGFuZWwoXHJcbiAgICAgIG1vZGVsLmhvbGRDb25zdGFudFByb3BlcnR5LFxyXG4gICAgICBtb2RlbC5wYXJ0aWNsZVN5c3RlbS5udW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5LFxyXG4gICAgICBtb2RlbC5wcmVzc3VyZU1vZGVsLnByZXNzdXJlUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLmNvbnRhaW5lci5pc09wZW5Qcm9wZXJ0eSxcclxuICAgICAgdmlld1Byb3BlcnRpZXMud2lkdGhWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLnN0b3B3YXRjaC5pc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgY29sbGlzaW9uQ291bnRlci52aXNpYmxlUHJvcGVydHksIHtcclxuICAgICAgICBoYXNIb2xkQ29uc3RhbnRDb250cm9sczogb3B0aW9ucy5oYXNIb2xkQ29uc3RhbnRDb250cm9scyxcclxuICAgICAgICBmaXhlZFdpZHRoOiBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLlJJR0hUX1BBTkVMX1dJRFRILFxyXG4gICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvbnRyb2xQYW5lbCcgKVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gUGFydGljbGVzIGFjY29yZGlvbiBib3hcclxuICAgIGNvbnN0IHBhcnRpY2xlc0FjY29yZGlvbkJveCA9IG5ldyBQYXJ0aWNsZXNBY2NvcmRpb25Cb3goXHJcbiAgICAgIG1vZGVsLnBhcnRpY2xlU3lzdGVtLm51bWJlck9mSGVhdnlQYXJ0aWNsZXNQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwucGFydGljbGVTeXN0ZW0ubnVtYmVyT2ZMaWdodFBhcnRpY2xlc1Byb3BlcnR5LFxyXG4gICAgICBtb2RlbC5tb2RlbFZpZXdUcmFuc2Zvcm0sIHtcclxuICAgICAgICBmaXhlZFdpZHRoOiBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLlJJR0hUX1BBTkVMX1dJRFRILFxyXG4gICAgICAgIGV4cGFuZGVkUHJvcGVydHk6IHZpZXdQcm9wZXJ0aWVzLnBhcnRpY2xlc0V4cGFuZGVkUHJvcGVydHksXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncGFydGljbGVzQWNjb3JkaW9uQm94JyApXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB2Qm94ID0gbmV3IFZCb3goIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgc3BhY2luZzogMTUsXHJcbiAgICAgIGNoaWxkcmVuOiBbIGNvbnRyb2xQYW5lbCwgcGFydGljbGVzQWNjb3JkaW9uQm94IF0sXHJcbiAgICAgIHJpZ2h0OiB0aGlzLmxheW91dEJvdW5kcy5yaWdodCAtIEdhc1Byb3BlcnRpZXNDb25zdGFudHMuU0NSRUVOX1ZJRVdfWF9NQVJHSU4sXHJcbiAgICAgIHRvcDogdGhpcy5sYXlvdXRCb3VuZHMudG9wICsgR2FzUHJvcGVydGllc0NvbnN0YW50cy5TQ1JFRU5fVklFV19ZX01BUkdJTlxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdkJveCApO1xyXG4gICAgdkJveC5tb3ZlVG9CYWNrKCk7XHJcblxyXG4gICAgLy8gT29wc0RpYWxvZ3MgcmVsYXRlZCB0byB0aGUgJ0hvbGQgQ29uc3RhbnQnIGZlYXR1cmUuIFdoZW4gaG9sZGluZyBhIHF1YW50aXR5IGNvbnN0YW50IHdvdWxkIGJyZWFrIHRoZSBtb2RlbCxcclxuICAgIC8vIHRoZSBtb2RlbCBwdXRzIGl0c2VsZiBpbiBhIHNhbmUgY29uZmlndXJhdGlvbiwgdGhlIG1vZGVsIG5vdGlmaWVzIHRoZSB2aWV3IHZpYSBhbiBFbWl0dGVyLCBhbmQgdGhlIHZpZXdcclxuICAgIC8vIG5vdGlmaWVzIHRoZSB1c2VyIHZpYSBhIGRpYWxvZy4gVGhlIHN0dWRlbnQgaXMgYWxtb3N0IGNlcnRhaW4gdG8gZW5jb3VudGVyIHRoZXNlIGNvbmRpdGlvbnMsIHNvIGRpYWxvZ3MgYXJlXHJcbiAgICAvLyBjcmVhdGVkIGVhZ2VybHkgYW5kIHJldXNlZC5cclxuICAgIGNvbnN0IG9vcHNUZW1wZXJhdHVyZUVtcHR5RGlhbG9nID0gbmV3IEdhc1Byb3BlcnRpZXNPb3BzRGlhbG9nKCBHYXNQcm9wZXJ0aWVzU3RyaW5ncy5vb3BzVGVtcGVyYXR1cmVFbXB0eVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnb29wc1RlbXBlcmF0dXJlRW1wdHlEaWFsb2cnICkgKTtcclxuICAgIG1vZGVsLm9vcHNFbWl0dGVycy50ZW1wZXJhdHVyZUVtcHR5RW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4geyB0aGlzLnNob3dEaWFsb2coIG9vcHNUZW1wZXJhdHVyZUVtcHR5RGlhbG9nICk7IH0gKTtcclxuXHJcbiAgICBjb25zdCBvb3BzVGVtcGVyYXR1cmVPcGVuRGlhbG9nID0gbmV3IEdhc1Byb3BlcnRpZXNPb3BzRGlhbG9nKCBHYXNQcm9wZXJ0aWVzU3RyaW5ncy5vb3BzVGVtcGVyYXR1cmVPcGVuU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdvb3BzVGVtcGVyYXR1cmVPcGVuRGlhbG9nJyApICk7XHJcbiAgICBtb2RlbC5vb3BzRW1pdHRlcnMudGVtcGVyYXR1cmVPcGVuRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4geyB0aGlzLnNob3dEaWFsb2coIG9vcHNUZW1wZXJhdHVyZU9wZW5EaWFsb2cgKTsgfSApO1xyXG5cclxuICAgIGNvbnN0IG9vcHNQcmVzc3VyZUVtcHR5RGlhbG9nID0gbmV3IEdhc1Byb3BlcnRpZXNPb3BzRGlhbG9nKCBHYXNQcm9wZXJ0aWVzU3RyaW5ncy5vb3BzUHJlc3N1cmVFbXB0eVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnb29wc1ByZXNzdXJlRW1wdHlEaWFsb2cnICkgKTtcclxuICAgIG1vZGVsLm9vcHNFbWl0dGVycy5wcmVzc3VyZUVtcHR5RW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4geyB0aGlzLnNob3dEaWFsb2coIG9vcHNQcmVzc3VyZUVtcHR5RGlhbG9nICk7IH0gKTtcclxuXHJcbiAgICBjb25zdCBvb3BzUHJlc3N1cmVMYXJnZURpYWxvZyA9IG5ldyBHYXNQcm9wZXJ0aWVzT29wc0RpYWxvZyggR2FzUHJvcGVydGllc1N0cmluZ3Mub29wc1ByZXNzdXJlTGFyZ2VTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ29vcHNQcmVzc3VyZUxhcmdlRGlhbG9nJyApICk7XHJcbiAgICBtb2RlbC5vb3BzRW1pdHRlcnMucHJlc3N1cmVMYXJnZUVtaXR0ZXIuYWRkTGlzdGVuZXIoICgpID0+IHsgdGhpcy5zaG93RGlhbG9nKCBvb3BzUHJlc3N1cmVMYXJnZURpYWxvZyApOyB9ICk7XHJcblxyXG4gICAgY29uc3Qgb29wc1ByZXNzdXJlU21hbGxEaWFsb2cgPSBuZXcgR2FzUHJvcGVydGllc09vcHNEaWFsb2coIEdhc1Byb3BlcnRpZXNTdHJpbmdzLm9vcHNQcmVzc3VyZVNtYWxsU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdvb3BzUHJlc3N1cmVTbWFsbERpYWxvZycgKSApO1xyXG4gICAgbW9kZWwub29wc0VtaXR0ZXJzLnByZXNzdXJlU21hbGxFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiB7IHRoaXMuc2hvd0RpYWxvZyggb29wc1ByZXNzdXJlU21hbGxEaWFsb2cgKTsgfSApO1xyXG5cclxuICAgIHRoaXMudmlld1Byb3BlcnRpZXMgPSB2aWV3UHJvcGVydGllcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy52aWV3UHJvcGVydGllcy5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuZ2FzUHJvcGVydGllcy5yZWdpc3RlciggJ0lkZWFsU2NyZWVuVmlldycsIElkZWFsU2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFFeEQsT0FBT0MsbUJBQW1CLE1BQU0scUNBQXFDO0FBQ3JFLE9BQU9DLHNCQUFzQixNQUFNLHdDQUF3QztBQUMzRSxPQUFPQyx1QkFBdUIsTUFBTSw4Q0FBOEM7QUFDbEYsT0FBT0MscUJBQXFCLE1BQXdDLDRDQUE0QztBQUNoSCxPQUFPQyxxQkFBcUIsTUFBTSw0Q0FBNEM7QUFDOUUsT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUNsRCxPQUFPQyxvQkFBb0IsTUFBTSwrQkFBK0I7QUFFaEUsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBQ3RELE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQVExRCxlQUFlLE1BQU1DLGVBQWUsU0FBU04scUJBQXFCLENBQUM7RUFJMURPLFdBQVdBLENBQUVDLEtBQWlCLEVBQUVDLE1BQWMsRUFBRUMsZUFBd0MsRUFBRztJQUVoRyxNQUFNQyxPQUFPLEdBQUdoQixTQUFTLENBQW9FLENB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