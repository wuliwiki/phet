// Copyright 2018-2022, University of Colorado Boulder

/**
 * HoldConstantControl is the control for selecting which quantity should be held constant.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import AquaRadioButton from '../../../../sun/js/AquaRadioButton.js';
import AquaRadioButtonGroup from '../../../../sun/js/AquaRadioButtonGroup.js';
import GasPropertiesColors from '../../common/GasPropertiesColors.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesStrings from '../../GasPropertiesStrings.js';

// constants
const TEXT_OPTIONS = {
  font: GasPropertiesConstants.CONTROL_FONT,
  fill: GasPropertiesColors.textFillProperty,
  maxWidth: 175 // determined empirically
};

const SPACING = 12;
export default class HoldConstantControl extends VBox {
  constructor(holdConstantProperty, numberOfParticlesProperty, pressureProperty, isContainerOpenProperty, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: SPACING
    }, providedOptions);
    const titleText = new Text(GasPropertiesStrings.holdConstant.titleStringProperty, {
      font: GasPropertiesConstants.TITLE_FONT,
      fill: GasPropertiesColors.textFillProperty,
      maxWidth: 200,
      // determined empirically
      tandem: options.tandem.createTandem('titleText')
    });
    const items = [{
      value: 'nothing',
      createNode: tandem => new Text(GasPropertiesStrings.holdConstant.nothingStringProperty, TEXT_OPTIONS),
      tandemName: `nothing${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    }, {
      value: 'volume',
      createNode: tandem => new Text(GasPropertiesStrings.holdConstant.volumeStringProperty, TEXT_OPTIONS),
      tandemName: `volume${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    }, {
      value: 'temperature',
      createNode: tandem => new Text(GasPropertiesStrings.holdConstant.temperatureStringProperty, TEXT_OPTIONS),
      tandemName: `temperature${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    }, {
      value: 'pressureV',
      createNode: tandem => new Text(GasPropertiesStrings.holdConstant.pressureVStringProperty, TEXT_OPTIONS),
      tandemName: `pressureV${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    }, {
      value: 'pressureT',
      createNode: tandem => new Text(GasPropertiesStrings.holdConstant.pressureTStringProperty, TEXT_OPTIONS),
      tandemName: `pressureT${AquaRadioButton.TANDEM_NAME_SUFFIX}`
    }];
    const radioButtonGroup = new AquaRadioButtonGroup(holdConstantProperty, items, {
      radioButtonOptions: GasPropertiesConstants.AQUA_RADIO_BUTTON_OPTIONS,
      orientation: 'vertical',
      align: 'left',
      spacing: SPACING,
      tandem: options.tandem.createTandem('radioButtonGroup')
    });
    options.children = [titleText, radioButtonGroup];
    super(options);

    // Disable "Temperature (T)" radio button for conditions that are not possible.
    const temperatureRadioButton = radioButtonGroup.getButton('temperature');
    Multilink.multilink([numberOfParticlesProperty, isContainerOpenProperty], (numberOfParticles, isContainerOpen) => {
      temperatureRadioButton.enabledProperty.value = numberOfParticles !== 0 && !isContainerOpen;
    });

    // Disable radio buttons for selections that are not possible with zero pressure.
    const pressureVRadioButton = radioButtonGroup.getButton('pressureV');
    const pressureTRadioButton = radioButtonGroup.getButton('pressureT');
    pressureProperty.link(pressure => {
      pressureVRadioButton.enabledProperty.value = pressure !== 0;
      pressureTRadioButton.enabledProperty.value = pressure !== 0;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('HoldConstantControl', HoldConstantControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,