// Copyright 2018-2022, University of Colorado Boulder

/**
 * IdealControlPanel is the control panel that appears in the upper-right corner of the 'Ideal' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { HSeparator, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import GasPropertiesColors from '../../common/GasPropertiesColors.js';
import GasPropertiesConstants from '../../common/GasPropertiesConstants.js';
import CollisionCounterCheckbox from '../../common/view/CollisionCounterCheckbox.js';
import StopwatchCheckbox from '../../common/view/StopwatchCheckbox.js';
import WidthCheckbox from '../../common/view/WidthCheckbox.js';
import gasProperties from '../../gasProperties.js';
import HoldConstantControl from './HoldConstantControl.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
export default class IdealControlPanel extends Panel {
  constructor(holdConstantProperty, numberOfParticlesProperty, pressureProperty, isContainerOpenProperty, widthVisibleProperty, stopwatchVisibleProperty, collisionCounterVisibleProperty, providedOptions) {
    const options = optionize4()({}, GasPropertiesConstants.PANEL_OPTIONS, {
      // SelfOptions
      hasHoldConstantControls: true,
      fixedWidth: 100,
      xMargin: GasPropertiesConstants.PANEL_OPTIONS.xMargin
    }, providedOptions);
    const contentWidth = options.fixedWidth - 2 * options.xMargin;
    const children = [];

    // Optional HoldConstantControl and separator
    if (options.hasHoldConstantControls) {
      children.push(new HoldConstantControl(holdConstantProperty, numberOfParticlesProperty, pressureProperty, isContainerOpenProperty, {
        maxWidth: contentWidth,
        tandem: options.tandem.createTandem('holdConstantControl')
      }));
      children.push(new HSeparator({
        stroke: GasPropertiesColors.separatorColorProperty,
        minimumWidth: contentWidth
      }));
    }
    children.push(new WidthCheckbox(widthVisibleProperty, {
      textMaxWidth: 110,
      tandem: options.tandem.createTandem('widthCheckbox')
    }));
    children.push(new StopwatchCheckbox(stopwatchVisibleProperty, {
      textMaxWidth: 125,
      tandem: options.tandem.createTandem('stopwatchCheckbox')
    }));
    children.push(new CollisionCounterCheckbox(collisionCounterVisibleProperty, {
      textMaxWidth: 125,
      tandem: options.tandem.createTandem('collisionCounterCheckbox')
    }));
    const content = new VBox({
      preferredWidth: contentWidth,
      widthSizable: false,
      // so that width will remain preferredWidth
      align: 'left',
      spacing: 12,
      children: children
    });
    super(content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('IdealControlPanel', IdealControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,