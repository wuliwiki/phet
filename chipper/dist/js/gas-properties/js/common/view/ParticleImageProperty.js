// Copyright 2019-2022, University of Colorado Boulder

/**
 * ParticleImageProperty derives the HTMLCanvasElement for a Particle, used to render particles with CanvasNode.
 * This image needs to be regenerated when there is a change to the radius or colors for a particle species.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { DerivedProperty1 } from '../../../../axon/js/DerivedProperty.js';
import Multilink from '../../../../axon/js/Multilink.js';
import Property from '../../../../axon/js/Property.js';
import optionize from '../../../../phet-core/js/optionize.js';
import gasProperties from '../../gasProperties.js';
import ParticlesNode from './ParticlesNode.js';
export default class ParticleImageProperty extends DerivedProperty1 {
  constructor(createParticle, modelViewTransform, radiusProperty, providedOptions) {
    const options = optionize()({
      // DerivedPropertyOptions
      valueType: [HTMLCanvasElement]
    }, providedOptions);

    // Create a prototypical Particle
    const particle = createParticle();

    // Node.toCanvas takes a callback that doesn't return a value, so use an intermediate Property to
    // derive the value and act as a proxy for the DerivedProperty dependencies.
    const privateProperty = new Property(null);
    Multilink.multilink([radiusProperty, particle.colorProperty, particle.highlightColorProperty], (radius, color, highlightColor) => {
      particle.radius = radius;
      ParticlesNode.particleToCanvas(particle, modelViewTransform, privateProperty);
    });
    super([privateProperty], value => {
      const canvasElement = value;
      assert && assert(canvasElement);
      return canvasElement;
    }, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('ParticleImageProperty', ParticleImageProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkxIiwiTXVsdGlsaW5rIiwiUHJvcGVydHkiLCJvcHRpb25pemUiLCJnYXNQcm9wZXJ0aWVzIiwiUGFydGljbGVzTm9kZSIsIlBhcnRpY2xlSW1hZ2VQcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwiY3JlYXRlUGFydGljbGUiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJyYWRpdXNQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2YWx1ZVR5cGUiLCJIVE1MQ2FudmFzRWxlbWVudCIsInBhcnRpY2xlIiwicHJpdmF0ZVByb3BlcnR5IiwibXVsdGlsaW5rIiwiY29sb3JQcm9wZXJ0eSIsImhpZ2hsaWdodENvbG9yUHJvcGVydHkiLCJyYWRpdXMiLCJjb2xvciIsImhpZ2hsaWdodENvbG9yIiwicGFydGljbGVUb0NhbnZhcyIsInZhbHVlIiwiY2FudmFzRWxlbWVudCIsImFzc2VydCIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBhcnRpY2xlSW1hZ2VQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQYXJ0aWNsZUltYWdlUHJvcGVydHkgZGVyaXZlcyB0aGUgSFRNTENhbnZhc0VsZW1lbnQgZm9yIGEgUGFydGljbGUsIHVzZWQgdG8gcmVuZGVyIHBhcnRpY2xlcyB3aXRoIENhbnZhc05vZGUuXHJcbiAqIFRoaXMgaW1hZ2UgbmVlZHMgdG8gYmUgcmVnZW5lcmF0ZWQgd2hlbiB0aGVyZSBpcyBhIGNoYW5nZSB0byB0aGUgcmFkaXVzIG9yIGNvbG9ycyBmb3IgYSBwYXJ0aWNsZSBzcGVjaWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IERlcml2ZWRQcm9wZXJ0eTEsIERlcml2ZWRQcm9wZXJ0eU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCBQYXJ0aWNsZSBmcm9tICcuLi9tb2RlbC9QYXJ0aWNsZS5qcyc7XHJcbmltcG9ydCBQYXJ0aWNsZXNOb2RlIGZyb20gJy4vUGFydGljbGVzTm9kZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgUGFydGljbGVJbWFnZVByb3BlcnR5T3B0aW9ucyA9IFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFydGljbGVJbWFnZVByb3BlcnR5IGV4dGVuZHMgRGVyaXZlZFByb3BlcnR5MTxIVE1MQ2FudmFzRWxlbWVudCwgSFRNTENhbnZhc0VsZW1lbnQgfCBudWxsPiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY3JlYXRlUGFydGljbGU6ICgpID0+IFBhcnRpY2xlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBQYXJ0aWNsZUltYWdlUHJvcGVydHlPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UGFydGljbGVJbWFnZVByb3BlcnR5T3B0aW9ucywgU2VsZk9wdGlvbnMsIERlcml2ZWRQcm9wZXJ0eU9wdGlvbnM8SFRNTENhbnZhc0VsZW1lbnQ+PigpKCB7XHJcblxyXG4gICAgICAvLyBEZXJpdmVkUHJvcGVydHlPcHRpb25zXHJcbiAgICAgIHZhbHVlVHlwZTogWyBIVE1MQ2FudmFzRWxlbWVudCBdXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBwcm90b3R5cGljYWwgUGFydGljbGVcclxuICAgIGNvbnN0IHBhcnRpY2xlID0gY3JlYXRlUGFydGljbGUoKTtcclxuXHJcbiAgICAvLyBOb2RlLnRvQ2FudmFzIHRha2VzIGEgY2FsbGJhY2sgdGhhdCBkb2Vzbid0IHJldHVybiBhIHZhbHVlLCBzbyB1c2UgYW4gaW50ZXJtZWRpYXRlIFByb3BlcnR5IHRvXHJcbiAgICAvLyBkZXJpdmUgdGhlIHZhbHVlIGFuZCBhY3QgYXMgYSBwcm94eSBmb3IgdGhlIERlcml2ZWRQcm9wZXJ0eSBkZXBlbmRlbmNpZXMuXHJcbiAgICBjb25zdCBwcml2YXRlUHJvcGVydHkgPSBuZXcgUHJvcGVydHk8SFRNTENhbnZhc0VsZW1lbnQgfCBudWxsPiggbnVsbCApO1xyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggWyByYWRpdXNQcm9wZXJ0eSwgcGFydGljbGUuY29sb3JQcm9wZXJ0eSwgcGFydGljbGUuaGlnaGxpZ2h0Q29sb3JQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHJhZGl1cywgY29sb3IsIGhpZ2hsaWdodENvbG9yICkgPT4ge1xyXG4gICAgICAgIHBhcnRpY2xlLnJhZGl1cyA9IHJhZGl1cztcclxuICAgICAgICBQYXJ0aWNsZXNOb2RlLnBhcnRpY2xlVG9DYW52YXMoIHBhcnRpY2xlLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHByaXZhdGVQcm9wZXJ0eSApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgIFsgcHJpdmF0ZVByb3BlcnR5IF0sXHJcbiAgICAgICggdmFsdWU6IEhUTUxDYW52YXNFbGVtZW50IHwgbnVsbCApID0+IHtcclxuICAgICAgICBjb25zdCBjYW52YXNFbGVtZW50ID0gdmFsdWUhO1xyXG4gICAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGNhbnZhc0VsZW1lbnQgKTtcclxuICAgICAgICByZXR1cm4gY2FudmFzRWxlbWVudDtcclxuICAgICAgfSxcclxuICAgICAgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdQYXJ0aWNsZUltYWdlUHJvcGVydHknLCBQYXJ0aWNsZUltYWdlUHJvcGVydHkgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxnQkFBZ0IsUUFBZ0Msd0NBQXdDO0FBQ2pHLE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUV0RCxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBRWxELE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFNOUMsZUFBZSxNQUFNQyxxQkFBcUIsU0FBU04sZ0JBQWdCLENBQThDO0VBRXhHTyxXQUFXQSxDQUFFQyxjQUE4QixFQUM5QkMsa0JBQXVDLEVBQ3ZDQyxjQUF5QyxFQUN6Q0MsZUFBOEMsRUFBRztJQUVuRSxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBdUYsQ0FBQyxDQUFFO01BRWpIO01BQ0FVLFNBQVMsRUFBRSxDQUFFQyxpQkFBaUI7SUFDaEMsQ0FBQyxFQUFFSCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1JLFFBQVEsR0FBR1AsY0FBYyxDQUFDLENBQUM7O0lBRWpDO0lBQ0E7SUFDQSxNQUFNUSxlQUFlLEdBQUcsSUFBSWQsUUFBUSxDQUE0QixJQUFLLENBQUM7SUFDdEVELFNBQVMsQ0FBQ2dCLFNBQVMsQ0FBRSxDQUFFUCxjQUFjLEVBQUVLLFFBQVEsQ0FBQ0csYUFBYSxFQUFFSCxRQUFRLENBQUNJLHNCQUFzQixDQUFFLEVBQzlGLENBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxjQUFjLEtBQU07TUFDbkNQLFFBQVEsQ0FBQ0ssTUFBTSxHQUFHQSxNQUFNO01BQ3hCZixhQUFhLENBQUNrQixnQkFBZ0IsQ0FBRVIsUUFBUSxFQUFFTixrQkFBa0IsRUFBRU8sZUFBZ0IsQ0FBQztJQUNqRixDQUFFLENBQUM7SUFFTCxLQUFLLENBQ0gsQ0FBRUEsZUFBZSxDQUFFLEVBQ2pCUSxLQUErQixJQUFNO01BQ3JDLE1BQU1DLGFBQWEsR0FBR0QsS0FBTTtNQUM1QkUsTUFBTSxJQUFJQSxNQUFNLENBQUVELGFBQWMsQ0FBQztNQUNqQyxPQUFPQSxhQUFhO0lBQ3RCLENBQUMsRUFDRGIsT0FBUSxDQUFDO0VBQ2I7RUFFZ0JlLE9BQU9BLENBQUEsRUFBUztJQUM5QkQsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdkIsYUFBYSxDQUFDd0IsUUFBUSxDQUFFLHVCQUF1QixFQUFFdEIscUJBQXNCLENBQUMifQ==