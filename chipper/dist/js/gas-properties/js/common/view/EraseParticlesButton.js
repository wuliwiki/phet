// Copyright 2019-2022, University of Colorado Boulder

/**
 * EraseParticlesButton is the button for erasing (deleting) all particles from the container.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import EraserButton from '../../../../scenery-phet/js/buttons/EraserButton.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesColors from '../GasPropertiesColors.js';
export default class EraseParticlesButton extends EraserButton {
  constructor(particleSystem, providedOptions) {
    const options = optionize()({
      // EraserButtonOptions
      baseColor: GasPropertiesColors.eraserButtonColorProperty,
      // Deletes all particles when the button fires.
      listener: () => {
        particleSystem.removeAllParticles();
      },
      // Disables the button when the container is empty.
      enabledProperty: new DerivedProperty([particleSystem.numberOfParticlesProperty], numberOfParticles => numberOfParticles !== 0)
    }, providedOptions);
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('EraseParticlesButton', EraseParticlesButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJvcHRpb25pemUiLCJFcmFzZXJCdXR0b24iLCJnYXNQcm9wZXJ0aWVzIiwiR2FzUHJvcGVydGllc0NvbG9ycyIsIkVyYXNlUGFydGljbGVzQnV0dG9uIiwiY29uc3RydWN0b3IiLCJwYXJ0aWNsZVN5c3RlbSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJiYXNlQ29sb3IiLCJlcmFzZXJCdXR0b25Db2xvclByb3BlcnR5IiwibGlzdGVuZXIiLCJyZW1vdmVBbGxQYXJ0aWNsZXMiLCJlbmFibGVkUHJvcGVydHkiLCJudW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5IiwibnVtYmVyT2ZQYXJ0aWNsZXMiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFcmFzZVBhcnRpY2xlc0J1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFcmFzZVBhcnRpY2xlc0J1dHRvbiBpcyB0aGUgYnV0dG9uIGZvciBlcmFzaW5nIChkZWxldGluZykgYWxsIHBhcnRpY2xlcyBmcm9tIHRoZSBjb250YWluZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgRXJhc2VyQnV0dG9uLCB7IEVyYXNlckJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvYnV0dG9ucy9FcmFzZXJCdXR0b24uanMnO1xyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzQ29sb3JzIGZyb20gJy4uL0dhc1Byb3BlcnRpZXNDb2xvcnMuanMnO1xyXG5pbXBvcnQgUGFydGljbGVTeXN0ZW0gZnJvbSAnLi4vbW9kZWwvUGFydGljbGVTeXN0ZW0uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEVyYXNlUGFydGljbGVzQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxFcmFzZXJCdXR0b25PcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcmFzZVBhcnRpY2xlc0J1dHRvbiBleHRlbmRzIEVyYXNlckJ1dHRvbiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcGFydGljbGVTeXN0ZW06IFBhcnRpY2xlU3lzdGVtLCBwcm92aWRlZE9wdGlvbnM6IEVyYXNlUGFydGljbGVzQnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEVyYXNlUGFydGljbGVzQnV0dG9uT3B0aW9ucywgU2VsZk9wdGlvbnMsIEVyYXNlckJ1dHRvbk9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIEVyYXNlckJ1dHRvbk9wdGlvbnNcclxuICAgICAgYmFzZUNvbG9yOiBHYXNQcm9wZXJ0aWVzQ29sb3JzLmVyYXNlckJ1dHRvbkNvbG9yUHJvcGVydHksXHJcblxyXG4gICAgICAvLyBEZWxldGVzIGFsbCBwYXJ0aWNsZXMgd2hlbiB0aGUgYnV0dG9uIGZpcmVzLlxyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG4gICAgICAgIHBhcnRpY2xlU3lzdGVtLnJlbW92ZUFsbFBhcnRpY2xlcygpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gRGlzYWJsZXMgdGhlIGJ1dHRvbiB3aGVuIHRoZSBjb250YWluZXIgaXMgZW1wdHkuXHJcbiAgICAgIGVuYWJsZWRQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBwYXJ0aWNsZVN5c3RlbS5udW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5IF0sXHJcbiAgICAgICAgbnVtYmVyT2ZQYXJ0aWNsZXMgPT4gKCBudW1iZXJPZlBhcnRpY2xlcyAhPT0gMCApIClcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZ2FzUHJvcGVydGllcy5yZWdpc3RlciggJ0VyYXNlUGFydGljbGVzQnV0dG9uJywgRXJhc2VQYXJ0aWNsZXNCdXR0b24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxZQUFZLE1BQStCLHFEQUFxRDtBQUV2RyxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLG1CQUFtQixNQUFNLDJCQUEyQjtBQU8zRCxlQUFlLE1BQU1DLG9CQUFvQixTQUFTSCxZQUFZLENBQUM7RUFFdERJLFdBQVdBLENBQUVDLGNBQThCLEVBQUVDLGVBQTRDLEVBQUc7SUFFakcsTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQWdFLENBQUMsQ0FBRTtNQUUxRjtNQUNBUyxTQUFTLEVBQUVOLG1CQUFtQixDQUFDTyx5QkFBeUI7TUFFeEQ7TUFDQUMsUUFBUSxFQUFFQSxDQUFBLEtBQU07UUFDZEwsY0FBYyxDQUFDTSxrQkFBa0IsQ0FBQyxDQUFDO01BQ3JDLENBQUM7TUFFRDtNQUNBQyxlQUFlLEVBQUUsSUFBSWQsZUFBZSxDQUFFLENBQUVPLGNBQWMsQ0FBQ1EseUJBQXlCLENBQUUsRUFDaEZDLGlCQUFpQixJQUFNQSxpQkFBaUIsS0FBSyxDQUFJO0lBQ3JELENBQUMsRUFBRVIsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztFQUNsQjtFQUVnQlEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFkLGFBQWEsQ0FBQ2dCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRWQsb0JBQXFCLENBQUMifQ==