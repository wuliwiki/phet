// Copyright 2019-2022, University of Colorado Boulder

/**
 * ContainerResizeDragListener is the drag listener for resizing the container by changing its width.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { DragListener } from '../../../../scenery/js/imports.js';
import gasProperties from '../../gasProperties.js';
export default class ContainerResizeDragListener extends DragListener {
  constructor(container, modelViewTransform, parentNode, tandem) {
    // pointer's x offset from the left edge of the container, when a drag starts
    let startXOffset = 0;
    super({
      start: (event, listener) => {
        container.userIsAdjustingWidthProperty.value = true;
        const viewWidth = modelViewTransform.modelToViewX(container.left);
        startXOffset = viewWidth - parentNode.globalToParentPoint(event.pointer.point).x;
      },
      drag: (event, listener) => {
        const viewX = parentNode.globalToParentPoint(event.pointer.point).x;
        const modelX = modelViewTransform.viewToModelX(viewX + startXOffset);
        const desiredWidth = container.widthRange.constrainValue(container.right - modelX);
        if (container.leftWallDoesWork && desiredWidth < container.widthProperty.value) {
          // When making the container smaller, limit the speed.  See #90.
          container.desiredWidth = desiredWidth;
        } else {
          // When making the container larger, there is no speed limit, see #90.
          container.resizeImmediately(desiredWidth);
        }
      },
      end: () => {
        // Stop the animation wherever the container width happens to be when the drag ends.
        container.desiredWidth = container.widthProperty.value;
        container.userIsAdjustingWidthProperty.value = false;
      },
      tandem: tandem
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('ContainerResizeDragListener', ContainerResizeDragListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEcmFnTGlzdGVuZXIiLCJnYXNQcm9wZXJ0aWVzIiwiQ29udGFpbmVyUmVzaXplRHJhZ0xpc3RlbmVyIiwiY29uc3RydWN0b3IiLCJjb250YWluZXIiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwYXJlbnROb2RlIiwidGFuZGVtIiwic3RhcnRYT2Zmc2V0Iiwic3RhcnQiLCJldmVudCIsImxpc3RlbmVyIiwidXNlcklzQWRqdXN0aW5nV2lkdGhQcm9wZXJ0eSIsInZhbHVlIiwidmlld1dpZHRoIiwibW9kZWxUb1ZpZXdYIiwibGVmdCIsImdsb2JhbFRvUGFyZW50UG9pbnQiLCJwb2ludGVyIiwicG9pbnQiLCJ4IiwiZHJhZyIsInZpZXdYIiwibW9kZWxYIiwidmlld1RvTW9kZWxYIiwiZGVzaXJlZFdpZHRoIiwid2lkdGhSYW5nZSIsImNvbnN0cmFpblZhbHVlIiwicmlnaHQiLCJsZWZ0V2FsbERvZXNXb3JrIiwid2lkdGhQcm9wZXJ0eSIsInJlc2l6ZUltbWVkaWF0ZWx5IiwiZW5kIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29udGFpbmVyUmVzaXplRHJhZ0xpc3RlbmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRhaW5lclJlc2l6ZURyYWdMaXN0ZW5lciBpcyB0aGUgZHJhZyBsaXN0ZW5lciBmb3IgcmVzaXppbmcgdGhlIGNvbnRhaW5lciBieSBjaGFuZ2luZyBpdHMgd2lkdGguXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIsIE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IElkZWFsR2FzTGF3Q29udGFpbmVyIGZyb20gJy4uL21vZGVsL0lkZWFsR2FzTGF3Q29udGFpbmVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRhaW5lclJlc2l6ZURyYWdMaXN0ZW5lciBleHRlbmRzIERyYWdMaXN0ZW5lciB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY29udGFpbmVyOiBJZGVhbEdhc0xhd0NvbnRhaW5lciwgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLCBwYXJlbnROb2RlOiBOb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgLy8gcG9pbnRlcidzIHggb2Zmc2V0IGZyb20gdGhlIGxlZnQgZWRnZSBvZiB0aGUgY29udGFpbmVyLCB3aGVuIGEgZHJhZyBzdGFydHNcclxuICAgIGxldCBzdGFydFhPZmZzZXQgPSAwO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcblxyXG4gICAgICBzdGFydDogKCBldmVudCwgbGlzdGVuZXIgKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci51c2VySXNBZGp1c3RpbmdXaWR0aFByb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgY29uc3Qgdmlld1dpZHRoID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggY29udGFpbmVyLmxlZnQgKTtcclxuICAgICAgICBzdGFydFhPZmZzZXQgPSB2aWV3V2lkdGggLSBwYXJlbnROb2RlLmdsb2JhbFRvUGFyZW50UG9pbnQoIGV2ZW50LnBvaW50ZXIucG9pbnQgKS54O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZHJhZzogKCBldmVudCwgbGlzdGVuZXIgKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IHZpZXdYID0gcGFyZW50Tm9kZS5nbG9iYWxUb1BhcmVudFBvaW50KCBldmVudC5wb2ludGVyLnBvaW50ICkueDtcclxuICAgICAgICBjb25zdCBtb2RlbFggPSBtb2RlbFZpZXdUcmFuc2Zvcm0udmlld1RvTW9kZWxYKCB2aWV3WCArIHN0YXJ0WE9mZnNldCApO1xyXG5cclxuICAgICAgICBjb25zdCBkZXNpcmVkV2lkdGggPSBjb250YWluZXIud2lkdGhSYW5nZS5jb25zdHJhaW5WYWx1ZSggY29udGFpbmVyLnJpZ2h0IC0gbW9kZWxYICk7XHJcbiAgICAgICAgaWYgKCBjb250YWluZXIubGVmdFdhbGxEb2VzV29yayAmJiBkZXNpcmVkV2lkdGggPCBjb250YWluZXIud2lkdGhQcm9wZXJ0eS52YWx1ZSApIHtcclxuXHJcbiAgICAgICAgICAvLyBXaGVuIG1ha2luZyB0aGUgY29udGFpbmVyIHNtYWxsZXIsIGxpbWl0IHRoZSBzcGVlZC4gIFNlZSAjOTAuXHJcbiAgICAgICAgICBjb250YWluZXIuZGVzaXJlZFdpZHRoID0gZGVzaXJlZFdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyBXaGVuIG1ha2luZyB0aGUgY29udGFpbmVyIGxhcmdlciwgdGhlcmUgaXMgbm8gc3BlZWQgbGltaXQsIHNlZSAjOTAuXHJcbiAgICAgICAgICBjb250YWluZXIucmVzaXplSW1tZWRpYXRlbHkoIGRlc2lyZWRXaWR0aCApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIGVuZDogKCkgPT4ge1xyXG5cclxuICAgICAgICAvLyBTdG9wIHRoZSBhbmltYXRpb24gd2hlcmV2ZXIgdGhlIGNvbnRhaW5lciB3aWR0aCBoYXBwZW5zIHRvIGJlIHdoZW4gdGhlIGRyYWcgZW5kcy5cclxuICAgICAgICBjb250YWluZXIuZGVzaXJlZFdpZHRoID0gY29udGFpbmVyLndpZHRoUHJvcGVydHkudmFsdWU7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci51c2VySXNBZGp1c3RpbmdXaWR0aFByb3BlcnR5LnZhbHVlID0gZmFsc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdDb250YWluZXJSZXNpemVEcmFnTGlzdGVuZXInLCBDb250YWluZXJSZXNpemVEcmFnTGlzdGVuZXIgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsU0FBU0EsWUFBWSxRQUFjLG1DQUFtQztBQUV0RSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBR2xELGVBQWUsTUFBTUMsMkJBQTJCLFNBQVNGLFlBQVksQ0FBQztFQUU3REcsV0FBV0EsQ0FBRUMsU0FBK0IsRUFBRUMsa0JBQXVDLEVBQUVDLFVBQWdCLEVBQzFGQyxNQUFjLEVBQUc7SUFFbkM7SUFDQSxJQUFJQyxZQUFZLEdBQUcsQ0FBQztJQUVwQixLQUFLLENBQUU7TUFFTEMsS0FBSyxFQUFFQSxDQUFFQyxLQUFLLEVBQUVDLFFBQVEsS0FBTTtRQUU1QlAsU0FBUyxDQUFDUSw0QkFBNEIsQ0FBQ0MsS0FBSyxHQUFHLElBQUk7UUFFbkQsTUFBTUMsU0FBUyxHQUFHVCxrQkFBa0IsQ0FBQ1UsWUFBWSxDQUFFWCxTQUFTLENBQUNZLElBQUssQ0FBQztRQUNuRVIsWUFBWSxHQUFHTSxTQUFTLEdBQUdSLFVBQVUsQ0FBQ1csbUJBQW1CLENBQUVQLEtBQUssQ0FBQ1EsT0FBTyxDQUFDQyxLQUFNLENBQUMsQ0FBQ0MsQ0FBQztNQUNwRixDQUFDO01BRURDLElBQUksRUFBRUEsQ0FBRVgsS0FBSyxFQUFFQyxRQUFRLEtBQU07UUFFM0IsTUFBTVcsS0FBSyxHQUFHaEIsVUFBVSxDQUFDVyxtQkFBbUIsQ0FBRVAsS0FBSyxDQUFDUSxPQUFPLENBQUNDLEtBQU0sQ0FBQyxDQUFDQyxDQUFDO1FBQ3JFLE1BQU1HLE1BQU0sR0FBR2xCLGtCQUFrQixDQUFDbUIsWUFBWSxDQUFFRixLQUFLLEdBQUdkLFlBQWEsQ0FBQztRQUV0RSxNQUFNaUIsWUFBWSxHQUFHckIsU0FBUyxDQUFDc0IsVUFBVSxDQUFDQyxjQUFjLENBQUV2QixTQUFTLENBQUN3QixLQUFLLEdBQUdMLE1BQU8sQ0FBQztRQUNwRixJQUFLbkIsU0FBUyxDQUFDeUIsZ0JBQWdCLElBQUlKLFlBQVksR0FBR3JCLFNBQVMsQ0FBQzBCLGFBQWEsQ0FBQ2pCLEtBQUssRUFBRztVQUVoRjtVQUNBVCxTQUFTLENBQUNxQixZQUFZLEdBQUdBLFlBQVk7UUFDdkMsQ0FBQyxNQUNJO1VBRUg7VUFDQXJCLFNBQVMsQ0FBQzJCLGlCQUFpQixDQUFFTixZQUFhLENBQUM7UUFDN0M7TUFDRixDQUFDO01BRURPLEdBQUcsRUFBRUEsQ0FBQSxLQUFNO1FBRVQ7UUFDQTVCLFNBQVMsQ0FBQ3FCLFlBQVksR0FBR3JCLFNBQVMsQ0FBQzBCLGFBQWEsQ0FBQ2pCLEtBQUs7UUFFdERULFNBQVMsQ0FBQ1EsNEJBQTRCLENBQUNDLEtBQUssR0FBRyxLQUFLO01BQ3RELENBQUM7TUFFRE4sTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztFQUNMO0VBRWdCMEIsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFoQyxhQUFhLENBQUNrQyxRQUFRLENBQUUsNkJBQTZCLEVBQUVqQywyQkFBNEIsQ0FBQyJ9