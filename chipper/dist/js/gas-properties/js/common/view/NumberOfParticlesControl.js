// Copyright 2018-2022, University of Colorado Boulder

/**
 * NumberOfParticlesControl is a control for changing the number of particles for a specific type of particle.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import FineCoarseSpinner from '../../../../scenery-phet/js/FineCoarseSpinner.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, Text, VBox } from '../../../../scenery/js/imports.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesColors from '../GasPropertiesColors.js';
import GasPropertiesConstants from '../GasPropertiesConstants.js';

// const
const X_SPACING = 8;
export default class NumberOfParticlesControl extends VBox {
  constructor(icon, titleStringProperty, numberOfParticlesProperty, providedOptions) {
    const options = optionize()({
      // VBoxOptions
      align: 'left',
      spacing: 10
    }, providedOptions);
    const labelText = new Text(titleStringProperty, {
      font: GasPropertiesConstants.CONTROL_FONT,
      fill: GasPropertiesColors.textFillProperty,
      maxWidth: 150,
      // determined empirically,
      tandem: options.tandem.createTandem('labelText')
    });
    const labelBox = new HBox({
      spacing: X_SPACING,
      children: [icon, labelText]
    });
    const spinner = new FineCoarseSpinner(numberOfParticlesProperty, {
      deltaFine: 1,
      deltaCoarse: 50,
      numberDisplayOptions: {
        textOptions: {
          font: new PhetFont(18)
        }
      },
      maxWidth: 190,
      // determined empirically
      tandem: options.tandem.createTandem('spinner')
    });

    // Limit width of text
    labelText.maxWidth = spinner.width - icon.width - X_SPACING;
    options.children = [labelBox, spinner];
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('NumberOfParticlesControl', NumberOfParticlesControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJGaW5lQ29hcnNlU3Bpbm5lciIsIlBoZXRGb250IiwiSEJveCIsIlRleHQiLCJWQm94IiwiZ2FzUHJvcGVydGllcyIsIkdhc1Byb3BlcnRpZXNDb2xvcnMiLCJHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzIiwiWF9TUEFDSU5HIiwiTnVtYmVyT2ZQYXJ0aWNsZXNDb250cm9sIiwiY29uc3RydWN0b3IiLCJpY29uIiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsIm51bWJlck9mUGFydGljbGVzUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYWxpZ24iLCJzcGFjaW5nIiwibGFiZWxUZXh0IiwiZm9udCIsIkNPTlRST0xfRk9OVCIsImZpbGwiLCJ0ZXh0RmlsbFByb3BlcnR5IiwibWF4V2lkdGgiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJsYWJlbEJveCIsImNoaWxkcmVuIiwic3Bpbm5lciIsImRlbHRhRmluZSIsImRlbHRhQ29hcnNlIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJ0ZXh0T3B0aW9ucyIsIndpZHRoIiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVtYmVyT2ZQYXJ0aWNsZXNDb250cm9sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE51bWJlck9mUGFydGljbGVzQ29udHJvbCBpcyBhIGNvbnRyb2wgZm9yIGNoYW5naW5nIHRoZSBudW1iZXIgb2YgcGFydGljbGVzIGZvciBhIHNwZWNpZmljIHR5cGUgb2YgcGFydGljbGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgRmluZUNvYXJzZVNwaW5uZXIgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL0ZpbmVDb2Fyc2VTcGlubmVyLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIE5vZGUsIFRleHQsIFZCb3gsIFZCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzQ29sb3JzIGZyb20gJy4uL0dhc1Byb3BlcnRpZXNDb2xvcnMuanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc0NvbnN0YW50cyBmcm9tICcuLi9HYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLmpzJztcclxuXHJcbi8vIGNvbnN0XHJcbmNvbnN0IFhfU1BBQ0lORyA9IDg7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgTnVtYmVyT2ZQYXJ0aWNsZXNDb250cm9sT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFZCb3hPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOdW1iZXJPZlBhcnRpY2xlc0NvbnRyb2wgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBpY29uOiBOb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGVTdHJpbmdQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPixcclxuICAgICAgICAgICAgICAgICAgICAgIG51bWJlck9mUGFydGljbGVzUHJvcGVydHk6IE51bWJlclByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBOdW1iZXJPZlBhcnRpY2xlc0NvbnRyb2xPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TnVtYmVyT2ZQYXJ0aWNsZXNDb250cm9sT3B0aW9ucywgU2VsZk9wdGlvbnMsIFZCb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBWQm94T3B0aW9uc1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiAxMFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFRleHQoIHRpdGxlU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogR2FzUHJvcGVydGllc0NvbnN0YW50cy5DT05UUk9MX0ZPTlQsXHJcbiAgICAgIGZpbGw6IEdhc1Byb3BlcnRpZXNDb2xvcnMudGV4dEZpbGxQcm9wZXJ0eSxcclxuICAgICAgbWF4V2lkdGg6IDE1MCwgLy8gZGV0ZXJtaW5lZCBlbXBpcmljYWxseSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsYWJlbEJveCA9IG5ldyBIQm94KCB7XHJcbiAgICAgIHNwYWNpbmc6IFhfU1BBQ0lORyxcclxuICAgICAgY2hpbGRyZW46IFsgaWNvbiwgbGFiZWxUZXh0IF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBzcGlubmVyID0gbmV3IEZpbmVDb2Fyc2VTcGlubmVyKCBudW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5LCB7XHJcbiAgICAgIGRlbHRhRmluZTogMSxcclxuICAgICAgZGVsdGFDb2Fyc2U6IDUwLFxyXG4gICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgIHRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE4IClcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIG1heFdpZHRoOiAxOTAsIC8vIGRldGVybWluZWQgZW1waXJpY2FsbHlcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdzcGlubmVyJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gTGltaXQgd2lkdGggb2YgdGV4dFxyXG4gICAgbGFiZWxUZXh0Lm1heFdpZHRoID0gc3Bpbm5lci53aWR0aCAtIGljb24ud2lkdGggLSBYX1NQQUNJTkc7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgbGFiZWxCb3gsIHNwaW5uZXIgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdOdW1iZXJPZlBhcnRpY2xlc0NvbnRyb2wnLCBOdW1iZXJPZlBhcnRpY2xlc0NvbnRyb2wgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0MsaUJBQWlCLE1BQU0sa0RBQWtEO0FBQ2hGLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsSUFBSSxFQUFRQyxJQUFJLEVBQUVDLElBQUksUUFBcUIsbUNBQW1DO0FBQ3ZGLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0MsbUJBQW1CLE1BQU0sMkJBQTJCO0FBQzNELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4Qjs7QUFFakU7QUFDQSxNQUFNQyxTQUFTLEdBQUcsQ0FBQztBQU1uQixlQUFlLE1BQU1DLHdCQUF3QixTQUFTTCxJQUFJLENBQUM7RUFFbERNLFdBQVdBLENBQUVDLElBQVUsRUFDVkMsbUJBQThDLEVBQzlDQyx5QkFBeUMsRUFDekNDLGVBQWdELEVBQUc7SUFFckUsTUFBTUMsT0FBTyxHQUFHaEIsU0FBUyxDQUE0RCxDQUFDLENBQUU7TUFFdEY7TUFDQWlCLEtBQUssRUFBRSxNQUFNO01BQ2JDLE9BQU8sRUFBRTtJQUNYLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixNQUFNSSxTQUFTLEdBQUcsSUFBSWYsSUFBSSxDQUFFUyxtQkFBbUIsRUFBRTtNQUMvQ08sSUFBSSxFQUFFWixzQkFBc0IsQ0FBQ2EsWUFBWTtNQUN6Q0MsSUFBSSxFQUFFZixtQkFBbUIsQ0FBQ2dCLGdCQUFnQjtNQUMxQ0MsUUFBUSxFQUFFLEdBQUc7TUFBRTtNQUNmQyxNQUFNLEVBQUVULE9BQU8sQ0FBQ1MsTUFBTSxDQUFDQyxZQUFZLENBQUUsV0FBWTtJQUNuRCxDQUFFLENBQUM7SUFFSCxNQUFNQyxRQUFRLEdBQUcsSUFBSXhCLElBQUksQ0FBRTtNQUN6QmUsT0FBTyxFQUFFVCxTQUFTO01BQ2xCbUIsUUFBUSxFQUFFLENBQUVoQixJQUFJLEVBQUVPLFNBQVM7SUFDN0IsQ0FBRSxDQUFDO0lBRUgsTUFBTVUsT0FBTyxHQUFHLElBQUk1QixpQkFBaUIsQ0FBRWEseUJBQXlCLEVBQUU7TUFDaEVnQixTQUFTLEVBQUUsQ0FBQztNQUNaQyxXQUFXLEVBQUUsRUFBRTtNQUNmQyxvQkFBb0IsRUFBRTtRQUNwQkMsV0FBVyxFQUFFO1VBQ1hiLElBQUksRUFBRSxJQUFJbEIsUUFBUSxDQUFFLEVBQUc7UUFDekI7TUFDRixDQUFDO01BQ0RzQixRQUFRLEVBQUUsR0FBRztNQUFFO01BQ2ZDLE1BQU0sRUFBRVQsT0FBTyxDQUFDUyxNQUFNLENBQUNDLFlBQVksQ0FBRSxTQUFVO0lBQ2pELENBQUUsQ0FBQzs7SUFFSDtJQUNBUCxTQUFTLENBQUNLLFFBQVEsR0FBR0ssT0FBTyxDQUFDSyxLQUFLLEdBQUd0QixJQUFJLENBQUNzQixLQUFLLEdBQUd6QixTQUFTO0lBRTNETyxPQUFPLENBQUNZLFFBQVEsR0FBRyxDQUFFRCxRQUFRLEVBQUVFLE9BQU8sQ0FBRTtJQUV4QyxLQUFLLENBQUViLE9BQVEsQ0FBQztFQUNsQjtFQUVnQm1CLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBN0IsYUFBYSxDQUFDK0IsUUFBUSxDQUFFLDBCQUEwQixFQUFFM0Isd0JBQXlCLENBQUMifQ==