// Copyright 2018-2023, University of Colorado Boulder

/**
 * ParticleTypeRadioButtonGroup is a pair of radio buttons for selecting between heavy and light particle types.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import RectangularRadioButton from '../../../../sun/js/buttons/RectangularRadioButton.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesColors from '../GasPropertiesColors.js';
import GasPropertiesIconFactory from './GasPropertiesIconFactory.js';
export default class ParticleTypeRadioButtonGroup extends RectangularRadioButtonGroup {
  constructor(particleTypeProperty, modelViewTransform, providedOptions) {
    const options = optionize()({
      // RectangularRadioButtonGroupOptions
      orientation: 'horizontal',
      spacing: 8,
      radioButtonOptions: {
        baseColor: GasPropertiesColors.radioButtonGroupBaseColorProperty,
        xMargin: 15,
        yMargin: 12,
        buttonAppearanceStrategyOptions: {
          selectedStroke: GasPropertiesColors.radioButtonGroupSelectedStrokeProperty,
          deselectedStroke: GasPropertiesColors.radioButtonGroupDeselectedStrokeProperty,
          selectedLineWidth: 3,
          deselectedLineWidth: 1.5
        }
      }
    }, providedOptions);
    const content = [{
      value: 'heavy',
      createNode: () => GasPropertiesIconFactory.createHeavyParticleIcon(modelViewTransform),
      tandemName: `heavyParticles${RectangularRadioButton.TANDEM_NAME_SUFFIX}`
    }, {
      value: 'light',
      createNode: () => GasPropertiesIconFactory.createLightParticleIcon(modelViewTransform),
      tandemName: `lightParticles${RectangularRadioButton.TANDEM_NAME_SUFFIX}`
    }];
    super(particleTypeProperty, content, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('ParticleTypeRadioButtonGroup', ParticleTypeRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJSZWN0YW5ndWxhclJhZGlvQnV0dG9uIiwiUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIiwiZ2FzUHJvcGVydGllcyIsIkdhc1Byb3BlcnRpZXNDb2xvcnMiLCJHYXNQcm9wZXJ0aWVzSWNvbkZhY3RvcnkiLCJQYXJ0aWNsZVR5cGVSYWRpb0J1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJwYXJ0aWNsZVR5cGVQcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJvcmllbnRhdGlvbiIsInNwYWNpbmciLCJyYWRpb0J1dHRvbk9wdGlvbnMiLCJiYXNlQ29sb3IiLCJyYWRpb0J1dHRvbkdyb3VwQmFzZUNvbG9yUHJvcGVydHkiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneU9wdGlvbnMiLCJzZWxlY3RlZFN0cm9rZSIsInJhZGlvQnV0dG9uR3JvdXBTZWxlY3RlZFN0cm9rZVByb3BlcnR5IiwiZGVzZWxlY3RlZFN0cm9rZSIsInJhZGlvQnV0dG9uR3JvdXBEZXNlbGVjdGVkU3Ryb2tlUHJvcGVydHkiLCJzZWxlY3RlZExpbmVXaWR0aCIsImRlc2VsZWN0ZWRMaW5lV2lkdGgiLCJjb250ZW50IiwidmFsdWUiLCJjcmVhdGVOb2RlIiwiY3JlYXRlSGVhdnlQYXJ0aWNsZUljb24iLCJ0YW5kZW1OYW1lIiwiVEFOREVNX05BTUVfU1VGRklYIiwiY3JlYXRlTGlnaHRQYXJ0aWNsZUljb24iLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQYXJ0aWNsZVR5cGVSYWRpb0J1dHRvbkdyb3VwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBhcnRpY2xlVHlwZVJhZGlvQnV0dG9uR3JvdXAgaXMgYSBwYWlyIG9mIHJhZGlvIGJ1dHRvbnMgZm9yIHNlbGVjdGluZyBiZXR3ZWVuIGhlYXZ5IGFuZCBsaWdodCBwYXJ0aWNsZSB0eXBlcy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgU3RyaW5nVW5pb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1N0cmluZ1VuaW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbi5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAsIHsgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwSXRlbSwgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBnYXNQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2dhc1Byb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc0NvbG9ycyBmcm9tICcuLi9HYXNQcm9wZXJ0aWVzQ29sb3JzLmpzJztcclxuaW1wb3J0IHsgUGFydGljbGVUeXBlIH0gZnJvbSAnLi4vbW9kZWwvUGFydGljbGVUeXBlLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNJY29uRmFjdG9yeSBmcm9tICcuL0dhc1Byb3BlcnRpZXNJY29uRmFjdG9yeS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgUGFydGljbGVUeXBlUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgJlxyXG4gIFBpY2tSZXF1aXJlZDxSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJ0aWNsZVR5cGVSYWRpb0J1dHRvbkdyb3VwIGV4dGVuZHMgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwPFBhcnRpY2xlVHlwZT4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHBhcnRpY2xlVHlwZVByb3BlcnR5OiBTdHJpbmdVbmlvblByb3BlcnR5PFBhcnRpY2xlVHlwZT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IFBhcnRpY2xlVHlwZVJhZGlvQnV0dG9uR3JvdXBPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UGFydGljbGVUeXBlUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBPcHRpb25zXHJcbiAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgIHNwYWNpbmc6IDgsXHJcbiAgICAgIHJhZGlvQnV0dG9uT3B0aW9uczoge1xyXG4gICAgICAgIGJhc2VDb2xvcjogR2FzUHJvcGVydGllc0NvbG9ycy5yYWRpb0J1dHRvbkdyb3VwQmFzZUNvbG9yUHJvcGVydHksXHJcbiAgICAgICAgeE1hcmdpbjogMTUsXHJcbiAgICAgICAgeU1hcmdpbjogMTIsXHJcbiAgICAgICAgYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9uczoge1xyXG4gICAgICAgICAgc2VsZWN0ZWRTdHJva2U6IEdhc1Byb3BlcnRpZXNDb2xvcnMucmFkaW9CdXR0b25Hcm91cFNlbGVjdGVkU3Ryb2tlUHJvcGVydHksXHJcbiAgICAgICAgICBkZXNlbGVjdGVkU3Ryb2tlOiBHYXNQcm9wZXJ0aWVzQ29sb3JzLnJhZGlvQnV0dG9uR3JvdXBEZXNlbGVjdGVkU3Ryb2tlUHJvcGVydHksXHJcbiAgICAgICAgICBzZWxlY3RlZExpbmVXaWR0aDogMyxcclxuICAgICAgICAgIGRlc2VsZWN0ZWRMaW5lV2lkdGg6IDEuNVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudDogUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwSXRlbTxQYXJ0aWNsZVR5cGU+W10gPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogJ2hlYXZ5JyxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBHYXNQcm9wZXJ0aWVzSWNvbkZhY3RvcnkuY3JlYXRlSGVhdnlQYXJ0aWNsZUljb24oIG1vZGVsVmlld1RyYW5zZm9ybSApLFxyXG4gICAgICAgIHRhbmRlbU5hbWU6IGBoZWF2eVBhcnRpY2xlcyR7UmVjdGFuZ3VsYXJSYWRpb0J1dHRvbi5UQU5ERU1fTkFNRV9TVUZGSVh9YFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdmFsdWU6ICdsaWdodCcsXHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gR2FzUHJvcGVydGllc0ljb25GYWN0b3J5LmNyZWF0ZUxpZ2h0UGFydGljbGVJY29uKCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSxcclxuICAgICAgICB0YW5kZW1OYW1lOiBgbGlnaHRQYXJ0aWNsZXMke1JlY3Rhbmd1bGFyUmFkaW9CdXR0b24uVEFOREVNX05BTUVfU1VGRklYfWBcclxuICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggcGFydGljbGVUeXBlUHJvcGVydHksIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnUGFydGljbGVUeXBlUmFkaW9CdXR0b25Hcm91cCcsIFBhcnRpY2xlVHlwZVJhZGlvQnV0dG9uR3JvdXAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFJbkYsT0FBT0Msc0JBQXNCLE1BQU0sc0RBQXNEO0FBQ3pGLE9BQU9DLDJCQUEyQixNQUErRSwyREFBMkQ7QUFDNUssT0FBT0MsYUFBYSxNQUFNLHdCQUF3QjtBQUNsRCxPQUFPQyxtQkFBbUIsTUFBTSwyQkFBMkI7QUFFM0QsT0FBT0Msd0JBQXdCLE1BQU0sK0JBQStCO0FBT3BFLGVBQWUsTUFBTUMsNEJBQTRCLFNBQVNKLDJCQUEyQixDQUFlO0VBRTNGSyxXQUFXQSxDQUFFQyxvQkFBdUQsRUFDdkRDLGtCQUF1QyxFQUN2Q0MsZUFBb0QsRUFBRztJQUV6RSxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBdUYsQ0FBQyxDQUFFO01BRWpIO01BQ0FZLFdBQVcsRUFBRSxZQUFZO01BQ3pCQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxrQkFBa0IsRUFBRTtRQUNsQkMsU0FBUyxFQUFFWCxtQkFBbUIsQ0FBQ1ksaUNBQWlDO1FBQ2hFQyxPQUFPLEVBQUUsRUFBRTtRQUNYQyxPQUFPLEVBQUUsRUFBRTtRQUNYQywrQkFBK0IsRUFBRTtVQUMvQkMsY0FBYyxFQUFFaEIsbUJBQW1CLENBQUNpQixzQ0FBc0M7VUFDMUVDLGdCQUFnQixFQUFFbEIsbUJBQW1CLENBQUNtQix3Q0FBd0M7VUFDOUVDLGlCQUFpQixFQUFFLENBQUM7VUFDcEJDLG1CQUFtQixFQUFFO1FBQ3ZCO01BQ0Y7SUFDRixDQUFDLEVBQUVmLGVBQWdCLENBQUM7SUFFcEIsTUFBTWdCLE9BQXdELEdBQUcsQ0FDL0Q7TUFDRUMsS0FBSyxFQUFFLE9BQU87TUFDZEMsVUFBVSxFQUFFQSxDQUFBLEtBQU12Qix3QkFBd0IsQ0FBQ3dCLHVCQUF1QixDQUFFcEIsa0JBQW1CLENBQUM7TUFDeEZxQixVQUFVLEVBQUcsaUJBQWdCN0Isc0JBQXNCLENBQUM4QixrQkFBbUI7SUFDekUsQ0FBQyxFQUNEO01BQ0VKLEtBQUssRUFBRSxPQUFPO01BQ2RDLFVBQVUsRUFBRUEsQ0FBQSxLQUFNdkIsd0JBQXdCLENBQUMyQix1QkFBdUIsQ0FBRXZCLGtCQUFtQixDQUFDO01BQ3hGcUIsVUFBVSxFQUFHLGlCQUFnQjdCLHNCQUFzQixDQUFDOEIsa0JBQW1CO0lBQ3pFLENBQUMsQ0FDRjtJQUVELEtBQUssQ0FBRXZCLG9CQUFvQixFQUFFa0IsT0FBTyxFQUFFZixPQUFRLENBQUM7RUFDakQ7RUFFZ0JzQixPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTlCLGFBQWEsQ0FBQ2dDLFFBQVEsQ0FBRSw4QkFBOEIsRUFBRTdCLDRCQUE2QixDQUFDIn0=