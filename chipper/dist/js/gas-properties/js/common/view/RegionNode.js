// Copyright 2019-2023, University of Colorado Boulder

/**
 * RegionNode displays a region in the 2D grid that spatially partitions the collision detection space.
 * This is used for debugging, and is not visible to the user. See GasPropertiesQueryParameters.regions.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import gasProperties from '../../gasProperties.js';
// constants
const FONT = new PhetFont(14);
export default class RegionNode extends Node {
  constructor(region, modelViewTransform) {
    const viewBounds = modelViewTransform.modelToViewBounds(region.bounds);

    // Cell in the 2D grid
    const cellNode = new Rectangle(viewBounds.minX, viewBounds.minY, viewBounds.width, viewBounds.height, {
      fill: 'rgba( 0, 255, 0, 0.1 )',
      stroke: 'rgba( 0, 255, 0, 0.4 )',
      lineWidth: 0.25
    });

    // Displays the number of particles in the Region
    const countNode = new Text(region.particles.length, {
      fill: 'green',
      font: FONT,
      center: cellNode.center
    });
    super({
      children: [cellNode, countNode]
    });
    this.region = region;
    this.cellNode = cellNode;
    this.countNode = countNode;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }

  /**
   * Displays the number of particles in the region.
   */
  update() {
    this.countNode.string = this.region.particles.length;
    this.countNode.center = this.cellNode.center;
  }
}
gasProperties.register('RegionNode', RegionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIk5vZGUiLCJSZWN0YW5nbGUiLCJUZXh0IiwiZ2FzUHJvcGVydGllcyIsIkZPTlQiLCJSZWdpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJyZWdpb24iLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJ2aWV3Qm91bmRzIiwibW9kZWxUb1ZpZXdCb3VuZHMiLCJib3VuZHMiLCJjZWxsTm9kZSIsIm1pblgiLCJtaW5ZIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwiY291bnROb2RlIiwicGFydGljbGVzIiwibGVuZ3RoIiwiZm9udCIsImNlbnRlciIsImNoaWxkcmVuIiwiZGlzcG9zZSIsImFzc2VydCIsInVwZGF0ZSIsInN0cmluZyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVnaW9uTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZWdpb25Ob2RlIGRpc3BsYXlzIGEgcmVnaW9uIGluIHRoZSAyRCBncmlkIHRoYXQgc3BhdGlhbGx5IHBhcnRpdGlvbnMgdGhlIGNvbGxpc2lvbiBkZXRlY3Rpb24gc3BhY2UuXHJcbiAqIFRoaXMgaXMgdXNlZCBmb3IgZGVidWdnaW5nLCBhbmQgaXMgbm90IHZpc2libGUgdG8gdGhlIHVzZXIuIFNlZSBHYXNQcm9wZXJ0aWVzUXVlcnlQYXJhbWV0ZXJzLnJlZ2lvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUmVjdGFuZ2xlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCBSZWdpb24gZnJvbSAnLi4vbW9kZWwvUmVnaW9uLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBGT05UID0gbmV3IFBoZXRGb250KCAxNCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVnaW9uTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHJlZ2lvbjogUmVnaW9uO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgY2VsbE5vZGU6IE5vZGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjb3VudE5vZGU6IFRleHQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcmVnaW9uOiBSZWdpb24sIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMiApIHtcclxuXHJcbiAgICBjb25zdCB2aWV3Qm91bmRzID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3Qm91bmRzKCByZWdpb24uYm91bmRzICk7XHJcblxyXG4gICAgLy8gQ2VsbCBpbiB0aGUgMkQgZ3JpZFxyXG4gICAgY29uc3QgY2VsbE5vZGUgPSBuZXcgUmVjdGFuZ2xlKCB2aWV3Qm91bmRzLm1pblgsIHZpZXdCb3VuZHMubWluWSwgdmlld0JvdW5kcy53aWR0aCwgdmlld0JvdW5kcy5oZWlnaHQsIHtcclxuICAgICAgZmlsbDogJ3JnYmEoIDAsIDI1NSwgMCwgMC4xICknLFxyXG4gICAgICBzdHJva2U6ICdyZ2JhKCAwLCAyNTUsIDAsIDAuNCApJyxcclxuICAgICAgbGluZVdpZHRoOiAwLjI1XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gRGlzcGxheXMgdGhlIG51bWJlciBvZiBwYXJ0aWNsZXMgaW4gdGhlIFJlZ2lvblxyXG4gICAgY29uc3QgY291bnROb2RlID0gbmV3IFRleHQoIHJlZ2lvbi5wYXJ0aWNsZXMubGVuZ3RoLCB7XHJcbiAgICAgIGZpbGw6ICdncmVlbicsXHJcbiAgICAgIGZvbnQ6IEZPTlQsXHJcbiAgICAgIGNlbnRlcjogY2VsbE5vZGUuY2VudGVyXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgY2hpbGRyZW46IFsgY2VsbE5vZGUsIGNvdW50Tm9kZSBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5yZWdpb24gPSByZWdpb247XHJcbiAgICB0aGlzLmNlbGxOb2RlID0gY2VsbE5vZGU7XHJcbiAgICB0aGlzLmNvdW50Tm9kZSA9IGNvdW50Tm9kZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwbGF5cyB0aGUgbnVtYmVyIG9mIHBhcnRpY2xlcyBpbiB0aGUgcmVnaW9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvdW50Tm9kZS5zdHJpbmcgPSB0aGlzLnJlZ2lvbi5wYXJ0aWNsZXMubGVuZ3RoO1xyXG4gICAgdGhpcy5jb3VudE5vZGUuY2VudGVyID0gdGhpcy5jZWxsTm9kZS5jZW50ZXI7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnUmVnaW9uTm9kZScsIFJlZ2lvbk5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBRUMsU0FBUyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3pFLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFHbEQ7QUFDQSxNQUFNQyxJQUFJLEdBQUcsSUFBSUwsUUFBUSxDQUFFLEVBQUcsQ0FBQztBQUUvQixlQUFlLE1BQU1NLFVBQVUsU0FBU0wsSUFBSSxDQUFDO0VBTXBDTSxXQUFXQSxDQUFFQyxNQUFjLEVBQUVDLGtCQUF1QyxFQUFHO0lBRTVFLE1BQU1DLFVBQVUsR0FBR0Qsa0JBQWtCLENBQUNFLGlCQUFpQixDQUFFSCxNQUFNLENBQUNJLE1BQU8sQ0FBQzs7SUFFeEU7SUFDQSxNQUFNQyxRQUFRLEdBQUcsSUFBSVgsU0FBUyxDQUFFUSxVQUFVLENBQUNJLElBQUksRUFBRUosVUFBVSxDQUFDSyxJQUFJLEVBQUVMLFVBQVUsQ0FBQ00sS0FBSyxFQUFFTixVQUFVLENBQUNPLE1BQU0sRUFBRTtNQUNyR0MsSUFBSSxFQUFFLHdCQUF3QjtNQUM5QkMsTUFBTSxFQUFFLHdCQUF3QjtNQUNoQ0MsU0FBUyxFQUFFO0lBQ2IsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsU0FBUyxHQUFHLElBQUlsQixJQUFJLENBQUVLLE1BQU0sQ0FBQ2MsU0FBUyxDQUFDQyxNQUFNLEVBQUU7TUFDbkRMLElBQUksRUFBRSxPQUFPO01BQ2JNLElBQUksRUFBRW5CLElBQUk7TUFDVm9CLE1BQU0sRUFBRVosUUFBUSxDQUFDWTtJQUNuQixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUU7TUFDTEMsUUFBUSxFQUFFLENBQUViLFFBQVEsRUFBRVEsU0FBUztJQUNqQyxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNiLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNLLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNRLFNBQVMsR0FBR0EsU0FBUztFQUM1QjtFQUVnQk0sT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjs7RUFFQTtBQUNGO0FBQ0E7RUFDU0UsTUFBTUEsQ0FBQSxFQUFTO0lBQ3BCLElBQUksQ0FBQ1IsU0FBUyxDQUFDUyxNQUFNLEdBQUcsSUFBSSxDQUFDdEIsTUFBTSxDQUFDYyxTQUFTLENBQUNDLE1BQU07SUFDcEQsSUFBSSxDQUFDRixTQUFTLENBQUNJLE1BQU0sR0FBRyxJQUFJLENBQUNaLFFBQVEsQ0FBQ1ksTUFBTTtFQUM5QztBQUNGO0FBRUFyQixhQUFhLENBQUMyQixRQUFRLENBQUUsWUFBWSxFQUFFekIsVUFBVyxDQUFDIn0=