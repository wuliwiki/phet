// Copyright 2018-2022, University of Colorado Boulder

/**
 * TemperatureDisplay displays the temperature value, with the ability to switch units via a combo box.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Range from '../../../../dot/js/Range.js';
import ComboBoxDisplay from '../../../../scenery-phet/js/ComboBoxDisplay.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesStrings from '../../GasPropertiesStrings.js';
import GasPropertiesConstants from '../GasPropertiesConstants.js';
import { optionize3 } from '../../../../phet-core/js/optionize.js';

// constants
const NUMBER_DISPLAY_RANGE = new Range(-99999, 99999); // determines how wide items in the ComboBoxDisplay will be

export default class TemperatureDisplay extends ComboBoxDisplay {
  constructor(thermometer, listboxParent, providedOptions) {
    const options = optionize3()({}, GasPropertiesConstants.COMBO_BOX_DISPLAY_OPTIONS, providedOptions);
    const items = [{
      choice: 'kelvin',
      tandemName: `kelvin${ComboBoxDisplay.ITEM_TANDEM_NAME_SUFFIX}`,
      numberProperty: thermometer.temperatureKelvinProperty,
      range: NUMBER_DISPLAY_RANGE,
      units: GasPropertiesStrings.kelvinStringProperty
    }, {
      choice: 'celsius',
      tandemName: `celsius${ComboBoxDisplay.ITEM_TANDEM_NAME_SUFFIX}`,
      numberProperty: thermometer.temperatureCelsiusProperty,
      range: NUMBER_DISPLAY_RANGE,
      units: GasPropertiesStrings.degreesCelsiusStringProperty
    }];
    super(thermometer.unitsProperty, items, listboxParent, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('TemperatureDisplay', TemperatureDisplay);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIkNvbWJvQm94RGlzcGxheSIsImdhc1Byb3BlcnRpZXMiLCJHYXNQcm9wZXJ0aWVzU3RyaW5ncyIsIkdhc1Byb3BlcnRpZXNDb25zdGFudHMiLCJvcHRpb25pemUzIiwiTlVNQkVSX0RJU1BMQVlfUkFOR0UiLCJUZW1wZXJhdHVyZURpc3BsYXkiLCJjb25zdHJ1Y3RvciIsInRoZXJtb21ldGVyIiwibGlzdGJveFBhcmVudCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJDT01CT19CT1hfRElTUExBWV9PUFRJT05TIiwiaXRlbXMiLCJjaG9pY2UiLCJ0YW5kZW1OYW1lIiwiSVRFTV9UQU5ERU1fTkFNRV9TVUZGSVgiLCJudW1iZXJQcm9wZXJ0eSIsInRlbXBlcmF0dXJlS2VsdmluUHJvcGVydHkiLCJyYW5nZSIsInVuaXRzIiwia2VsdmluU3RyaW5nUHJvcGVydHkiLCJ0ZW1wZXJhdHVyZUNlbHNpdXNQcm9wZXJ0eSIsImRlZ3JlZXNDZWxzaXVzU3RyaW5nUHJvcGVydHkiLCJ1bml0c1Byb3BlcnR5IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGVtcGVyYXR1cmVEaXNwbGF5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRlbXBlcmF0dXJlRGlzcGxheSBkaXNwbGF5cyB0aGUgdGVtcGVyYXR1cmUgdmFsdWUsIHdpdGggdGhlIGFiaWxpdHkgdG8gc3dpdGNoIHVuaXRzIHZpYSBhIGNvbWJvIGJveC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IENvbWJvQm94RGlzcGxheSwgeyBDb21ib0JveERpc3BsYXlJdGVtLCBDb21ib0JveERpc3BsYXlPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL0NvbWJvQm94RGlzcGxheS5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNTdHJpbmdzIGZyb20gJy4uLy4uL0dhc1Byb3BlcnRpZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNDb25zdGFudHMgZnJvbSAnLi4vR2FzUHJvcGVydGllc0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBUaGVybW9tZXRlciBmcm9tICcuLi9tb2RlbC9UaGVybW9tZXRlci5qcyc7XHJcbmltcG9ydCB7IFRlbXBlcmF0dXJlVW5pdHMgfSBmcm9tICcuLi9tb2RlbC9UZW1wZXJhdHVyZVVuaXRzLmpzJztcclxuaW1wb3J0IFBpY2tPcHRpb25hbCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja09wdGlvbmFsLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgRW1wdHlTZWxmT3B0aW9ucywgb3B0aW9uaXplMyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IE5VTUJFUl9ESVNQTEFZX1JBTkdFID0gbmV3IFJhbmdlKCAtOTk5OTksIDk5OTk5ICk7IC8vIGRldGVybWluZXMgaG93IHdpZGUgaXRlbXMgaW4gdGhlIENvbWJvQm94RGlzcGxheSB3aWxsIGJlXHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgVGVtcGVyYXR1cmVEaXNwbGF5T3B0aW9ucyA9IFNlbGZPcHRpb25zICZcclxuICBQaWNrT3B0aW9uYWw8Q29tYm9Cb3hEaXNwbGF5T3B0aW9ucywgJ21heFdpZHRoJz4gJlxyXG4gIFBpY2tSZXF1aXJlZDxDb21ib0JveERpc3BsYXlPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1wZXJhdHVyZURpc3BsYXkgZXh0ZW5kcyBDb21ib0JveERpc3BsYXk8VGVtcGVyYXR1cmVVbml0cz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRoZXJtb21ldGVyOiBUaGVybW9tZXRlciwgbGlzdGJveFBhcmVudDogTm9kZSwgcHJvdmlkZWRPcHRpb25zOiBUZW1wZXJhdHVyZURpc3BsYXlPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemUzPFRlbXBlcmF0dXJlRGlzcGxheU9wdGlvbnMsIFNlbGZPcHRpb25zLCBDb21ib0JveERpc3BsYXlPcHRpb25zPigpKFxyXG4gICAgICB7fSwgR2FzUHJvcGVydGllc0NvbnN0YW50cy5DT01CT19CT1hfRElTUExBWV9PUFRJT05TLCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBpdGVtczogQ29tYm9Cb3hEaXNwbGF5SXRlbTxUZW1wZXJhdHVyZVVuaXRzPltdID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgY2hvaWNlOiAna2VsdmluJyxcclxuICAgICAgICB0YW5kZW1OYW1lOiBga2VsdmluJHtDb21ib0JveERpc3BsYXkuSVRFTV9UQU5ERU1fTkFNRV9TVUZGSVh9YCxcclxuICAgICAgICBudW1iZXJQcm9wZXJ0eTogdGhlcm1vbWV0ZXIudGVtcGVyYXR1cmVLZWx2aW5Qcm9wZXJ0eSxcclxuICAgICAgICByYW5nZTogTlVNQkVSX0RJU1BMQVlfUkFOR0UsXHJcbiAgICAgICAgdW5pdHM6IEdhc1Byb3BlcnRpZXNTdHJpbmdzLmtlbHZpblN0cmluZ1Byb3BlcnR5XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBjaG9pY2U6ICdjZWxzaXVzJyxcclxuICAgICAgICB0YW5kZW1OYW1lOiBgY2Vsc2l1cyR7Q29tYm9Cb3hEaXNwbGF5LklURU1fVEFOREVNX05BTUVfU1VGRklYfWAsXHJcbiAgICAgICAgbnVtYmVyUHJvcGVydHk6IHRoZXJtb21ldGVyLnRlbXBlcmF0dXJlQ2Vsc2l1c1Byb3BlcnR5LFxyXG4gICAgICAgIHJhbmdlOiBOVU1CRVJfRElTUExBWV9SQU5HRSxcclxuICAgICAgICB1bml0czogR2FzUHJvcGVydGllc1N0cmluZ3MuZGVncmVlc0NlbHNpdXNTdHJpbmdQcm9wZXJ0eVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCB0aGVybW9tZXRlci51bml0c1Byb3BlcnR5LCBpdGVtcywgbGlzdGJveFBhcmVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmdhc1Byb3BlcnRpZXMucmVnaXN0ZXIoICdUZW1wZXJhdHVyZURpc3BsYXknLCBUZW1wZXJhdHVyZURpc3BsYXkgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxlQUFlLE1BQXVELGdEQUFnRDtBQUU3SCxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUNoRSxPQUFPQyxzQkFBc0IsTUFBTSw4QkFBOEI7QUFLakUsU0FBMkJDLFVBQVUsUUFBUSx1Q0FBdUM7O0FBRXBGO0FBQ0EsTUFBTUMsb0JBQW9CLEdBQUcsSUFBSU4sS0FBSyxDQUFFLENBQUMsS0FBSyxFQUFFLEtBQU0sQ0FBQyxDQUFDLENBQUM7O0FBUXpELGVBQWUsTUFBTU8sa0JBQWtCLFNBQVNOLGVBQWUsQ0FBbUI7RUFFekVPLFdBQVdBLENBQUVDLFdBQXdCLEVBQUVDLGFBQW1CLEVBQUVDLGVBQTBDLEVBQUc7SUFFOUcsTUFBTUMsT0FBTyxHQUFHUCxVQUFVLENBQWlFLENBQUMsQ0FDMUYsQ0FBQyxDQUFDLEVBQUVELHNCQUFzQixDQUFDUyx5QkFBeUIsRUFBRUYsZUFBZ0IsQ0FBQztJQUV6RSxNQUFNRyxLQUE4QyxHQUFHLENBQ3JEO01BQ0VDLE1BQU0sRUFBRSxRQUFRO01BQ2hCQyxVQUFVLEVBQUcsU0FBUWYsZUFBZSxDQUFDZ0IsdUJBQXdCLEVBQUM7TUFDOURDLGNBQWMsRUFBRVQsV0FBVyxDQUFDVSx5QkFBeUI7TUFDckRDLEtBQUssRUFBRWQsb0JBQW9CO01BQzNCZSxLQUFLLEVBQUVsQixvQkFBb0IsQ0FBQ21CO0lBQzlCLENBQUMsRUFDRDtNQUNFUCxNQUFNLEVBQUUsU0FBUztNQUNqQkMsVUFBVSxFQUFHLFVBQVNmLGVBQWUsQ0FBQ2dCLHVCQUF3QixFQUFDO01BQy9EQyxjQUFjLEVBQUVULFdBQVcsQ0FBQ2MsMEJBQTBCO01BQ3RESCxLQUFLLEVBQUVkLG9CQUFvQjtNQUMzQmUsS0FBSyxFQUFFbEIsb0JBQW9CLENBQUNxQjtJQUM5QixDQUFDLENBQ0Y7SUFFRCxLQUFLLENBQUVmLFdBQVcsQ0FBQ2dCLGFBQWEsRUFBRVgsS0FBSyxFQUFFSixhQUFhLEVBQUVFLE9BQVEsQ0FBQztFQUNuRTtFQUVnQmMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUF4QixhQUFhLENBQUMwQixRQUFRLENBQUUsb0JBQW9CLEVBQUVyQixrQkFBbUIsQ0FBQyJ9