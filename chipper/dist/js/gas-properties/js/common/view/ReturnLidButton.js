// Copyright 2019-2022, University of Colorado Boulder

/**
 * ReturnLidButton is used to return the container's lid after it has been blown off.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetColorScheme from '../../../../scenery-phet/js/PhetColorScheme.js';
import { Text } from '../../../../scenery/js/imports.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesStrings from '../../GasPropertiesStrings.js';
import GasPropertiesConstants from '../GasPropertiesConstants.js';
export default class ReturnLidButton extends RectangularPushButton {
  constructor(container, providedOptions) {
    const textNode = new Text(GasPropertiesStrings.returnLidStringProperty, {
      font: GasPropertiesConstants.CONTROL_FONT,
      maxWidth: 150 // determined empirically
    });

    const options = optionize()({
      // RectangularPushButtonOptions
      baseColor: PhetColorScheme.BUTTON_YELLOW,
      content: textNode,
      listener: () => {
        container.lidIsOnProperty.value = true;
      }
    }, providedOptions);
    super(options);

    // Button is visible immediately, so it's possible to push it and repeatedly blow the lid off.
    container.lidIsOnProperty.link(lidIsOn => {
      this.visible = !lidIsOn;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
gasProperties.register('ReturnLidButton', ReturnLidButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0Q29sb3JTY2hlbWUiLCJUZXh0IiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwiZ2FzUHJvcGVydGllcyIsIkdhc1Byb3BlcnRpZXNTdHJpbmdzIiwiR2FzUHJvcGVydGllc0NvbnN0YW50cyIsIlJldHVybkxpZEJ1dHRvbiIsImNvbnN0cnVjdG9yIiwiY29udGFpbmVyIiwicHJvdmlkZWRPcHRpb25zIiwidGV4dE5vZGUiLCJyZXR1cm5MaWRTdHJpbmdQcm9wZXJ0eSIsImZvbnQiLCJDT05UUk9MX0ZPTlQiLCJtYXhXaWR0aCIsIm9wdGlvbnMiLCJiYXNlQ29sb3IiLCJCVVRUT05fWUVMTE9XIiwiY29udGVudCIsImxpc3RlbmVyIiwibGlkSXNPblByb3BlcnR5IiwidmFsdWUiLCJsaW5rIiwibGlkSXNPbiIsInZpc2libGUiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZXR1cm5MaWRCdXR0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmV0dXJuTGlkQnV0dG9uIGlzIHVzZWQgdG8gcmV0dXJuIHRoZSBjb250YWluZXIncyBsaWQgYWZ0ZXIgaXQgaGFzIGJlZW4gYmxvd24gb2ZmLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgUGhldENvbG9yU2NoZW1lIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Q29sb3JTY2hlbWUuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiwgeyBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IGdhc1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vZ2FzUHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzU3RyaW5ncyBmcm9tICcuLi8uLi9HYXNQcm9wZXJ0aWVzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzIGZyb20gJy4uL0dhc1Byb3BlcnRpZXNDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgSWRlYWxHYXNMYXdDb250YWluZXIgZnJvbSAnLi4vbW9kZWwvSWRlYWxHYXNMYXdDb250YWluZXIuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFJldHVybkxpZEJ1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXR1cm5MaWRCdXR0b24gZXh0ZW5kcyBSZWN0YW5ndWxhclB1c2hCdXR0b24ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvbnRhaW5lcjogSWRlYWxHYXNMYXdDb250YWluZXIsIHByb3ZpZGVkT3B0aW9uczogUmV0dXJuTGlkQnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCB0ZXh0Tm9kZSA9IG5ldyBUZXh0KCBHYXNQcm9wZXJ0aWVzU3RyaW5ncy5yZXR1cm5MaWRTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLkNPTlRST0xfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDE1MCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSZXR1cm5MaWRCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9uc1xyXG4gICAgICBiYXNlQ29sb3I6IFBoZXRDb2xvclNjaGVtZS5CVVRUT05fWUVMTE9XLFxyXG4gICAgICBjb250ZW50OiB0ZXh0Tm9kZSxcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICBjb250YWluZXIubGlkSXNPblByb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBCdXR0b24gaXMgdmlzaWJsZSBpbW1lZGlhdGVseSwgc28gaXQncyBwb3NzaWJsZSB0byBwdXNoIGl0IGFuZCByZXBlYXRlZGx5IGJsb3cgdGhlIGxpZCBvZmYuXHJcbiAgICBjb250YWluZXIubGlkSXNPblByb3BlcnR5LmxpbmsoIGxpZElzT24gPT4ge1xyXG4gICAgICB0aGlzLnZpc2libGUgPSAhbGlkSXNPbjtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnUmV0dXJuTGlkQnV0dG9uJywgUmV0dXJuTGlkQnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBRW5GLE9BQU9DLGVBQWUsTUFBTSxnREFBZ0Q7QUFDNUUsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxxQkFBcUIsTUFBd0MscURBQXFEO0FBQ3pILE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQU9qRSxlQUFlLE1BQU1DLGVBQWUsU0FBU0oscUJBQXFCLENBQUM7RUFFMURLLFdBQVdBLENBQUVDLFNBQStCLEVBQUVDLGVBQXVDLEVBQUc7SUFFN0YsTUFBTUMsUUFBUSxHQUFHLElBQUlULElBQUksQ0FBRUcsb0JBQW9CLENBQUNPLHVCQUF1QixFQUFFO01BQ3ZFQyxJQUFJLEVBQUVQLHNCQUFzQixDQUFDUSxZQUFZO01BQ3pDQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0lBQ2hCLENBQUUsQ0FBQzs7SUFFSCxNQUFNQyxPQUFPLEdBQUdoQixTQUFTLENBQW9FLENBQUMsQ0FBRTtNQUU5RjtNQUNBaUIsU0FBUyxFQUFFaEIsZUFBZSxDQUFDaUIsYUFBYTtNQUN4Q0MsT0FBTyxFQUFFUixRQUFRO01BQ2pCUyxRQUFRLEVBQUVBLENBQUEsS0FBTTtRQUNkWCxTQUFTLENBQUNZLGVBQWUsQ0FBQ0MsS0FBSyxHQUFHLElBQUk7TUFDeEM7SUFDRixDQUFDLEVBQUVaLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFTSxPQUFRLENBQUM7O0lBRWhCO0lBQ0FQLFNBQVMsQ0FBQ1ksZUFBZSxDQUFDRSxJQUFJLENBQUVDLE9BQU8sSUFBSTtNQUN6QyxJQUFJLENBQUNDLE9BQU8sR0FBRyxDQUFDRCxPQUFPO0lBQ3pCLENBQUUsQ0FBQztFQUNMO0VBRWdCRSxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXRCLGFBQWEsQ0FBQ3dCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRXJCLGVBQWdCLENBQUMifQ==