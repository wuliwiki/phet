// Copyright 2019-2022, University of Colorado Boulder

/**
 * Particle is the model for all types of particles. A particle is a perfect rigid sphere.
 *
 * Since there can be a large number of particles, properties of particles are not implemented as observable
 * Properties.  Instead, the entire particle system is inspected to derive the current state of the system.
 * To optimize performance, all Vector2 fields herein are mutated.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesConstants from '../GasPropertiesConstants.js';
export default class Particle {
  // these are mutated in the Diffusion screen
  // AMU
  // pm

  // center of the particle, pm, MUTATED!
  // position on previous time step, MUTATED!
  // pm/ps, initially at rest, MUTATED!

  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      mass: GasPropertiesConstants.MASS_RANGE.defaultValue,
      radius: GasPropertiesConstants.RADIUS_RANGE.defaultValue
    }, providedOptions);
    this.mass = options.mass;
    this.radius = options.radius;
    this.colorProperty = options.colorProperty || new Property('white');
    this.highlightColorProperty = options.highlightColorProperty || new Property('white');
    this.position = new Vector2(0, 0);
    this.previousPosition = this.position.copy();
    this.velocity = new Vector2(0, 0);
    this._isDisposed = false;
  }
  dispose() {
    assert && assert(!this._isDisposed, 'attempted to dispose again');
    this._isDisposed = true;
  }
  get isDisposed() {
    return this._isDisposed;
  }

  /**
   * ES5 getters and setters for particle position.
   */
  get left() {
    return this.position.x - this.radius;
  }
  set left(value) {
    this.setPositionXY(value + this.radius, this.position.y);
  }
  get right() {
    return this.position.x + this.radius;
  }
  set right(value) {
    this.setPositionXY(value - this.radius, this.position.y);
  }
  get top() {
    return this.position.y + this.radius;
  }
  set top(value) {
    this.setPositionXY(this.position.x, value - this.radius);
  }
  get bottom() {
    return this.position.y - this.radius;
  }
  set bottom(value) {
    this.setPositionXY(this.position.x, value + this.radius);
  }

  /**
   * Gets the kinetic energy of this particle.
   * @returns AMU * pm^2 / ps^2
   */
  getKineticEnergy() {
    return 0.5 * this.mass * this.velocity.magnitudeSquared; // KE = (1/2) * m * |v|^2
  }

  /**
   * Moves this particle by one time step.
   * @param dt - time delta, in ps
   */
  step(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);
    assert && assert(!this._isDisposed, 'attempted to step a disposed Particle');
    this.setPositionXY(this.position.x + dt * this.velocity.x, this.position.y + dt * this.velocity.y);
  }

  /**
   * Sets this particle's position and remembers the previous position.
   */
  setPositionXY(x, y) {
    this.previousPosition.setXY(this.position.x, this.position.y);
    this.position.setXY(x, y);
  }

  /**
   * Sets this particle's velocity in Cartesian coordinates.
   */
  setVelocityXY(x, y) {
    this.velocity.setXY(x, y);
  }

  /**
   * Sets this particle's velocity in polar coordinates.
   * @param magnitude - pm / ps
   * @param angle - in radians
   */
  setVelocityPolar(magnitude, angle) {
    assert && assert(magnitude >= 0, `invalid magnitude: ${magnitude}`);
    this.setVelocityXY(magnitude * Math.cos(angle), magnitude * Math.sin(angle));
  }

  /**
   * Sets this particle's velocity magnitude (speed).
   * @param magnitude - pm/ps
   */
  setVelocityMagnitude(magnitude) {
    assert && assert(magnitude >= 0, `invalid magnitude: ${magnitude}`);
    this.velocity.setMagnitude(magnitude);
  }

  /**
   * Scales this particle's velocity. Used when heat/cool is applied.
   */
  scaleVelocity(scale) {
    assert && assert(scale > 0, `invalid scale: ${scale}`);
    this.velocity.multiply(scale);
  }

  /**
   * Does this particle contact another particle now?
   */
  contactsParticle(particle) {
    return this.position.distance(particle.position) <= this.radius + particle.radius;
  }

  /**
   * Did this particle contact another particle on the previous time step? Prevents collections of particles
   * that are emitted from the pump from colliding until they spread out.  This was borrowed from the Java
   * implementation, and makes the collision behavior more natural looking.
   */
  contactedParticle(particle) {
    return this.previousPosition.distance(particle.previousPosition) <= this.radius + particle.radius;
  }

  /**
   * Does this particle intersect the specified bounds, including edges? This implementation was adapted
   * from Bounds2.intersectsBounds, removed Math.max and Math.min calls because this will be called thousands
   * of times per step.
   */
  intersectsBounds(bounds) {
    const minX = this.left > bounds.minX ? this.left : bounds.minX;
    const minY = this.bottom > bounds.minY ? this.bottom : bounds.minY;
    const maxX = this.right < bounds.maxX ? this.right : bounds.maxX;
    const maxY = this.top < bounds.maxY ? this.top : bounds.maxY;
    return maxX - minX >= 0 && maxY - minY >= 0;
  }

  /**
   * String representation of this particle. For debugging only, do not rely on format.
   */
  toString() {
    return `Particle[position:(${this.position.x},${this.position.y}) mass:${this.mass} radius:${this.radius}]`;
  }
}
gasProperties.register('Particle', Particle);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,