// Copyright 2018-2023, University of Colorado Boulder

/**
 * BaseModel is the base class for models in all screens. It provides functionality that is NOT related to the
 * Ideal Gas Law. Primarily responsibilities are:
 *
 * - model-view transform
 * - model bounds
 * - control of time (play, pause, step, speed)
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import Property from '../../../../axon/js/Property.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Range from '../../../../dot/js/Range.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import Stopwatch from '../../../../scenery-phet/js/Stopwatch.js';
import TimeSpeed from '../../../../scenery-phet/js/TimeSpeed.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesConstants from '../GasPropertiesConstants.js';
import TimeTransform from './TimeTransform.js';

// constants
const MODEL_VIEW_SCALE = 0.040; // number of pixels per pm

export default class BaseModel {
  // transform between model and view coordinate frames

  // Bounds of the entire space that the model knows about.
  // This corresponds to the browser window, and doesn't have a valid value until the view is created.
  // is the sim playing?
  // the clock speed of the sim
  // transform between real time and sim time, initialized below
  constructor(tandem, providedOptions) {
    const options = optionize()({
      // Offset of the model's origin, in view coordinates. Determines where the container's bottom-right corner is.
      // Determined empirically, and dependent on the ScreenView's layoutBounds.
      modelOriginOffset: new Vector2(645, 475),
      // Stopwatch initial position (in view coordinates!), determined empirically.
      stopwatchPosition: new Vector2(240, 15)
    }, providedOptions);
    this.modelViewTransform = ModelViewTransform2.createOffsetXYScaleMapping(options.modelOriginOffset, MODEL_VIEW_SCALE, -MODEL_VIEW_SCALE // y is inverted
    );

    this.modelBoundsProperty = new Property(new Bounds2(0, 0, 1, 1), {
      valueType: Bounds2
    });
    this.isPlayingProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('isPlayingProperty')
    });
    this.timeSpeedProperty = new EnumerationProperty(TimeSpeed.NORMAL, {
      tandem: tandem.createTandem('timeSpeedProperty')
    });
    this.timeTransform = TimeTransform.NORMAL;

    // Adjust the time transform
    this.timeSpeedProperty.link(speed => {
      this.timeTransform = speed === TimeSpeed.SLOW ? TimeTransform.SLOW : TimeTransform.NORMAL;
    });
    this.stopwatch = new Stopwatch({
      position: options.stopwatchPosition,
      timePropertyOptions: {
        range: new Range(0, GasPropertiesConstants.MAX_TIME),
        units: 'ps'
      },
      tandem: tandem.createTandem('stopwatch')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    // Properties
    this.isPlayingProperty.reset();
    this.timeSpeedProperty.reset();

    // model elements
    this.stopwatch.reset();
  }

  /**
   * Steps the model using real time units.
   * This should be called directly only by Sim.js, and is a no-op when the sim is paused.
   * Subclasses that need to add functionality should override stepModelTime, not this method.
   * @param dt - time delta, in seconds
   */
  step(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);
    if (this.isPlayingProperty.value) {
      this.stepRealTime(dt);
    }
  }

  /**
   * Steps the model using real time units.
   * This is intended to be called by clients that need to step the sim, e.g. Step button listener.
   * Subclasses that need to add functionality should override stepModelTime, not this method.
   * @param dt - time delta, in seconds
   */
  stepRealTime(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);
    this.stepModelTime(this.timeTransform.evaluate(dt));
  }

  /**
   * Steps the model using model time units.
   * Subclasses that need to add additional step functionality should override this method.
   * @param dt - time delta, in ps
   */
  stepModelTime(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);
    this.stopwatch.step(dt);
  }
}
gasProperties.register('BaseModel', BaseModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbnVtZXJhdGlvblByb3BlcnR5IiwiUHJvcGVydHkiLCJCb3VuZHMyIiwiUmFuZ2UiLCJWZWN0b3IyIiwib3B0aW9uaXplIiwiTW9kZWxWaWV3VHJhbnNmb3JtMiIsIlN0b3B3YXRjaCIsIlRpbWVTcGVlZCIsImdhc1Byb3BlcnRpZXMiLCJHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzIiwiVGltZVRyYW5zZm9ybSIsIk1PREVMX1ZJRVdfU0NBTEUiLCJCYXNlTW9kZWwiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJtb2RlbE9yaWdpbk9mZnNldCIsInN0b3B3YXRjaFBvc2l0aW9uIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiY3JlYXRlT2Zmc2V0WFlTY2FsZU1hcHBpbmciLCJtb2RlbEJvdW5kc1Byb3BlcnR5IiwidmFsdWVUeXBlIiwiaXNQbGF5aW5nUHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJ0aW1lU3BlZWRQcm9wZXJ0eSIsIk5PUk1BTCIsInRpbWVUcmFuc2Zvcm0iLCJsaW5rIiwic3BlZWQiLCJTTE9XIiwic3RvcHdhdGNoIiwicG9zaXRpb24iLCJ0aW1lUHJvcGVydHlPcHRpb25zIiwicmFuZ2UiLCJNQVhfVElNRSIsInVuaXRzIiwiZGlzcG9zZSIsImFzc2VydCIsInJlc2V0Iiwic3RlcCIsImR0IiwidmFsdWUiLCJzdGVwUmVhbFRpbWUiLCJzdGVwTW9kZWxUaW1lIiwiZXZhbHVhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJhc2VNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCYXNlTW9kZWwgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIG1vZGVscyBpbiBhbGwgc2NyZWVucy4gSXQgcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIE5PVCByZWxhdGVkIHRvIHRoZVxyXG4gKiBJZGVhbCBHYXMgTGF3LiBQcmltYXJpbHkgcmVzcG9uc2liaWxpdGllcyBhcmU6XHJcbiAqXHJcbiAqIC0gbW9kZWwtdmlldyB0cmFuc2Zvcm1cclxuICogLSBtb2RlbCBib3VuZHNcclxuICogLSBjb250cm9sIG9mIHRpbWUgKHBsYXksIHBhdXNlLCBzdGVwLCBzcGVlZClcclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBUTW9kZWwgZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvVE1vZGVsLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgU3RvcHdhdGNoIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9TdG9wd2F0Y2guanMnO1xyXG5pbXBvcnQgVGltZVNwZWVkIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9UaW1lU3BlZWQuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNDb25zdGFudHMgZnJvbSAnLi4vR2FzUHJvcGVydGllc0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBUaW1lVHJhbnNmb3JtIGZyb20gJy4vVGltZVRyYW5zZm9ybS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTU9ERUxfVklFV19TQ0FMRSA9IDAuMDQwOyAvLyBudW1iZXIgb2YgcGl4ZWxzIHBlciBwbVxyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gT2Zmc2V0IG9mIHRoZSBtb2RlbCdzIG9yaWdpbiwgaW4gdmlldyBjb29yZGluYXRlcy4gRGV0ZXJtaW5lcyB3aGVyZSB0aGUgY29udGFpbmVyJ3MgYm90dG9tLXJpZ2h0IGNvcm5lciBpcy5cclxuICAvLyBEZXRlcm1pbmVkIGVtcGlyaWNhbGx5LCBhbmQgZGVwZW5kZW50IG9uIHRoZSBTY3JlZW5WaWV3J3MgbGF5b3V0Qm91bmRzLlxyXG4gIG1vZGVsT3JpZ2luT2Zmc2V0PzogVmVjdG9yMjtcclxuXHJcbiAgLy8gU3RvcHdhdGNoIGluaXRpYWwgcG9zaXRpb24gKGluIHZpZXcgY29vcmRpbmF0ZXMhKSwgZGV0ZXJtaW5lZCBlbXBpcmljYWxseS5cclxuICBzdG9wd2F0Y2hQb3NpdGlvbj86IFZlY3RvcjI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBCYXNlTW9kZWxPcHRpb25zID0gU2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlTW9kZWwgaW1wbGVtZW50cyBUTW9kZWwge1xyXG5cclxuICAvLyB0cmFuc2Zvcm0gYmV0d2VlbiBtb2RlbCBhbmQgdmlldyBjb29yZGluYXRlIGZyYW1lc1xyXG4gIHB1YmxpYyByZWFkb25seSBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTI7XHJcblxyXG4gIC8vIEJvdW5kcyBvZiB0aGUgZW50aXJlIHNwYWNlIHRoYXQgdGhlIG1vZGVsIGtub3dzIGFib3V0LlxyXG4gIC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJyb3dzZXIgd2luZG93LCBhbmQgZG9lc24ndCBoYXZlIGEgdmFsaWQgdmFsdWUgdW50aWwgdGhlIHZpZXcgaXMgY3JlYXRlZC5cclxuICBwdWJsaWMgcmVhZG9ubHkgbW9kZWxCb3VuZHNQcm9wZXJ0eTogUHJvcGVydHk8Qm91bmRzMj47XHJcblxyXG4gIC8vIGlzIHRoZSBzaW0gcGxheWluZz9cclxuICBwdWJsaWMgcmVhZG9ubHkgaXNQbGF5aW5nUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyB0aGUgY2xvY2sgc3BlZWQgb2YgdGhlIHNpbVxyXG4gIHB1YmxpYyByZWFkb25seSB0aW1lU3BlZWRQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxUaW1lU3BlZWQ+O1xyXG5cclxuICAvLyB0cmFuc2Zvcm0gYmV0d2VlbiByZWFsIHRpbWUgYW5kIHNpbSB0aW1lLCBpbml0aWFsaXplZCBiZWxvd1xyXG4gIHB1YmxpYyB0aW1lVHJhbnNmb3JtOiBUaW1lVHJhbnNmb3JtO1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgc3RvcHdhdGNoOiBTdG9wd2F0Y2g7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0sIHByb3ZpZGVkT3B0aW9ucz86IEJhc2VNb2RlbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCYXNlTW9kZWxPcHRpb25zLCBTZWxmT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gT2Zmc2V0IG9mIHRoZSBtb2RlbCdzIG9yaWdpbiwgaW4gdmlldyBjb29yZGluYXRlcy4gRGV0ZXJtaW5lcyB3aGVyZSB0aGUgY29udGFpbmVyJ3MgYm90dG9tLXJpZ2h0IGNvcm5lciBpcy5cclxuICAgICAgLy8gRGV0ZXJtaW5lZCBlbXBpcmljYWxseSwgYW5kIGRlcGVuZGVudCBvbiB0aGUgU2NyZWVuVmlldydzIGxheW91dEJvdW5kcy5cclxuICAgICAgbW9kZWxPcmlnaW5PZmZzZXQ6IG5ldyBWZWN0b3IyKCA2NDUsIDQ3NSApLFxyXG5cclxuICAgICAgLy8gU3RvcHdhdGNoIGluaXRpYWwgcG9zaXRpb24gKGluIHZpZXcgY29vcmRpbmF0ZXMhKSwgZGV0ZXJtaW5lZCBlbXBpcmljYWxseS5cclxuICAgICAgc3RvcHdhdGNoUG9zaXRpb246IG5ldyBWZWN0b3IyKCAyNDAsIDE1IClcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtID0gTW9kZWxWaWV3VHJhbnNmb3JtMi5jcmVhdGVPZmZzZXRYWVNjYWxlTWFwcGluZyhcclxuICAgICAgb3B0aW9ucy5tb2RlbE9yaWdpbk9mZnNldCxcclxuICAgICAgTU9ERUxfVklFV19TQ0FMRSxcclxuICAgICAgLU1PREVMX1ZJRVdfU0NBTEUgLy8geSBpcyBpbnZlcnRlZFxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLm1vZGVsQm91bmRzUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIG5ldyBCb3VuZHMyKCAwLCAwLCAxLCAxICksIHtcclxuICAgICAgdmFsdWVUeXBlOiBCb3VuZHMyXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5pc1BsYXlpbmdQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaXNQbGF5aW5nUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnRpbWVTcGVlZFByb3BlcnR5ID0gbmV3IEVudW1lcmF0aW9uUHJvcGVydHkoIFRpbWVTcGVlZC5OT1JNQUwsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndGltZVNwZWVkUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnRpbWVUcmFuc2Zvcm0gPSBUaW1lVHJhbnNmb3JtLk5PUk1BTDtcclxuXHJcbiAgICAvLyBBZGp1c3QgdGhlIHRpbWUgdHJhbnNmb3JtXHJcbiAgICB0aGlzLnRpbWVTcGVlZFByb3BlcnR5LmxpbmsoIHNwZWVkID0+IHtcclxuICAgICAgdGhpcy50aW1lVHJhbnNmb3JtID0gKCBzcGVlZCA9PT0gVGltZVNwZWVkLlNMT1cgKSA/IFRpbWVUcmFuc2Zvcm0uU0xPVyA6IFRpbWVUcmFuc2Zvcm0uTk9STUFMO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuc3RvcHdhdGNoID0gbmV3IFN0b3B3YXRjaCgge1xyXG4gICAgICBwb3NpdGlvbjogb3B0aW9ucy5zdG9wd2F0Y2hQb3NpdGlvbixcclxuICAgICAgdGltZVByb3BlcnR5T3B0aW9uczoge1xyXG4gICAgICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAsIEdhc1Byb3BlcnRpZXNDb25zdGFudHMuTUFYX1RJTUUgKSxcclxuICAgICAgICB1bml0czogJ3BzJ1xyXG4gICAgICB9LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzdG9wd2F0Y2gnIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG4gICAgdGhpcy5pc1BsYXlpbmdQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy50aW1lU3BlZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG5cclxuICAgIC8vIG1vZGVsIGVsZW1lbnRzXHJcbiAgICB0aGlzLnN0b3B3YXRjaC5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcHMgdGhlIG1vZGVsIHVzaW5nIHJlYWwgdGltZSB1bml0cy5cclxuICAgKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgZGlyZWN0bHkgb25seSBieSBTaW0uanMsIGFuZCBpcyBhIG5vLW9wIHdoZW4gdGhlIHNpbSBpcyBwYXVzZWQuXHJcbiAgICogU3ViY2xhc3NlcyB0aGF0IG5lZWQgdG8gYWRkIGZ1bmN0aW9uYWxpdHkgc2hvdWxkIG92ZXJyaWRlIHN0ZXBNb2RlbFRpbWUsIG5vdCB0aGlzIG1ldGhvZC5cclxuICAgKiBAcGFyYW0gZHQgLSB0aW1lIGRlbHRhLCBpbiBzZWNvbmRzXHJcbiAgICovXHJcbiAgcHVibGljIHN0ZXAoIGR0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBkdCA+IDAsIGBpbnZhbGlkIGR0OiAke2R0fWAgKTtcclxuICAgIGlmICggdGhpcy5pc1BsYXlpbmdQcm9wZXJ0eS52YWx1ZSApIHtcclxuICAgICAgdGhpcy5zdGVwUmVhbFRpbWUoIGR0ICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGVwcyB0aGUgbW9kZWwgdXNpbmcgcmVhbCB0aW1lIHVuaXRzLlxyXG4gICAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGJ5IGNsaWVudHMgdGhhdCBuZWVkIHRvIHN0ZXAgdGhlIHNpbSwgZS5nLiBTdGVwIGJ1dHRvbiBsaXN0ZW5lci5cclxuICAgKiBTdWJjbGFzc2VzIHRoYXQgbmVlZCB0byBhZGQgZnVuY3Rpb25hbGl0eSBzaG91bGQgb3ZlcnJpZGUgc3RlcE1vZGVsVGltZSwgbm90IHRoaXMgbWV0aG9kLlxyXG4gICAqIEBwYXJhbSBkdCAtIHRpbWUgZGVsdGEsIGluIHNlY29uZHNcclxuICAgKi9cclxuICBwdWJsaWMgc3RlcFJlYWxUaW1lKCBkdDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZHQgPiAwLCBgaW52YWxpZCBkdDogJHtkdH1gICk7XHJcbiAgICB0aGlzLnN0ZXBNb2RlbFRpbWUoIHRoaXMudGltZVRyYW5zZm9ybS5ldmFsdWF0ZSggZHQgKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcHMgdGhlIG1vZGVsIHVzaW5nIG1vZGVsIHRpbWUgdW5pdHMuXHJcbiAgICogU3ViY2xhc3NlcyB0aGF0IG5lZWQgdG8gYWRkIGFkZGl0aW9uYWwgc3RlcCBmdW5jdGlvbmFsaXR5IHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZC5cclxuICAgKiBAcGFyYW0gZHQgLSB0aW1lIGRlbHRhLCBpbiBwc1xyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdGVwTW9kZWxUaW1lKCBkdDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZHQgPiAwLCBgaW52YWxpZCBkdDogJHtkdH1gICk7XHJcbiAgICB0aGlzLnN0b3B3YXRjaC5zdGVwKCBkdCApO1xyXG4gIH1cclxufVxyXG5cclxuZ2FzUHJvcGVydGllcy5yZWdpc3RlciggJ0Jhc2VNb2RlbCcsIEJhc2VNb2RlbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxtQkFBbUIsTUFBTSw0Q0FBNEM7QUFDNUUsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUVuRCxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELE9BQU9DLG1CQUFtQixNQUFNLHVE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