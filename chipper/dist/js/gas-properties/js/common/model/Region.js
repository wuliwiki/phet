// Copyright 2019-2022, University of Colorado Boulder

/**
 * Region is one cell in the collection-detection space.
 *
 * Spatial partitioning is a technique for improving the performance of collision detection. The collision detection
 * space is partitioned into a 2D grid of cells that we refer to as regions (the term used in the Java implementation).
 * Objects (particles and containers) are members of one or more regions based on whether they intersect the bounds
 * of the region. Rather than having to consider collisions between every object in the system, only objects within
 * the same region need to be considered.
 *
 * Run with ?regions to display the regions.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import gasProperties from '../../gasProperties.js';
export default class Region {
  // bounds of the region, in pm

  // the particles in this region

  constructor(bounds) {
    this.bounds = bounds;
    this.particles = [];
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }

  /**
   * Adds a particle to this region.
   */
  addParticle(particle) {
    assert && assert(!this.particles.includes(particle), 'particle is already in this Region');
    this.particles.push(particle);
  }

  /**
   * Removes all particles from this Region. Does not affect existence of particles in the model.
   */
  clear() {
    this.particles.length = 0;
  }
}
gasProperties.register('Region', Region);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnYXNQcm9wZXJ0aWVzIiwiUmVnaW9uIiwiY29uc3RydWN0b3IiLCJib3VuZHMiLCJwYXJ0aWNsZXMiLCJkaXNwb3NlIiwiYXNzZXJ0IiwiYWRkUGFydGljbGUiLCJwYXJ0aWNsZSIsImluY2x1ZGVzIiwicHVzaCIsImNsZWFyIiwibGVuZ3RoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWdpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmVnaW9uIGlzIG9uZSBjZWxsIGluIHRoZSBjb2xsZWN0aW9uLWRldGVjdGlvbiBzcGFjZS5cclxuICpcclxuICogU3BhdGlhbCBwYXJ0aXRpb25pbmcgaXMgYSB0ZWNobmlxdWUgZm9yIGltcHJvdmluZyB0aGUgcGVyZm9ybWFuY2Ugb2YgY29sbGlzaW9uIGRldGVjdGlvbi4gVGhlIGNvbGxpc2lvbiBkZXRlY3Rpb25cclxuICogc3BhY2UgaXMgcGFydGl0aW9uZWQgaW50byBhIDJEIGdyaWQgb2YgY2VsbHMgdGhhdCB3ZSByZWZlciB0byBhcyByZWdpb25zICh0aGUgdGVybSB1c2VkIGluIHRoZSBKYXZhIGltcGxlbWVudGF0aW9uKS5cclxuICogT2JqZWN0cyAocGFydGljbGVzIGFuZCBjb250YWluZXJzKSBhcmUgbWVtYmVycyBvZiBvbmUgb3IgbW9yZSByZWdpb25zIGJhc2VkIG9uIHdoZXRoZXIgdGhleSBpbnRlcnNlY3QgdGhlIGJvdW5kc1xyXG4gKiBvZiB0aGUgcmVnaW9uLiBSYXRoZXIgdGhhbiBoYXZpbmcgdG8gY29uc2lkZXIgY29sbGlzaW9ucyBiZXR3ZWVuIGV2ZXJ5IG9iamVjdCBpbiB0aGUgc3lzdGVtLCBvbmx5IG9iamVjdHMgd2l0aGluXHJcbiAqIHRoZSBzYW1lIHJlZ2lvbiBuZWVkIHRvIGJlIGNvbnNpZGVyZWQuXHJcbiAqXHJcbiAqIFJ1biB3aXRoID9yZWdpb25zIHRvIGRpc3BsYXkgdGhlIHJlZ2lvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgZ2FzUHJvcGVydGllcyBmcm9tICcuLi8uLi9nYXNQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlIGZyb20gJy4vUGFydGljbGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVnaW9uIHtcclxuXHJcbiAgLy8gYm91bmRzIG9mIHRoZSByZWdpb24sIGluIHBtXHJcbiAgcHVibGljIHJlYWRvbmx5IGJvdW5kczogQm91bmRzMjtcclxuXHJcbiAgLy8gdGhlIHBhcnRpY2xlcyBpbiB0aGlzIHJlZ2lvblxyXG4gIHB1YmxpYyByZWFkb25seSBwYXJ0aWNsZXM6IFBhcnRpY2xlW107XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYm91bmRzOiBCb3VuZHMyICkge1xyXG4gICAgdGhpcy5ib3VuZHMgPSBib3VuZHM7XHJcbiAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYSBwYXJ0aWNsZSB0byB0aGlzIHJlZ2lvbi5cclxuICAgKi9cclxuICBwdWJsaWMgYWRkUGFydGljbGUoIHBhcnRpY2xlOiBQYXJ0aWNsZSApOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLnBhcnRpY2xlcy5pbmNsdWRlcyggcGFydGljbGUgKSwgJ3BhcnRpY2xlIGlzIGFscmVhZHkgaW4gdGhpcyBSZWdpb24nICk7XHJcbiAgICB0aGlzLnBhcnRpY2xlcy5wdXNoKCBwYXJ0aWNsZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhbGwgcGFydGljbGVzIGZyb20gdGhpcyBSZWdpb24uIERvZXMgbm90IGFmZmVjdCBleGlzdGVuY2Ugb2YgcGFydGljbGVzIGluIHRoZSBtb2RlbC5cclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XHJcbiAgICB0aGlzLnBhcnRpY2xlcy5sZW5ndGggPSAwO1xyXG4gIH1cclxufVxyXG5cclxuZ2FzUHJvcGVydGllcy5yZWdpc3RlciggJ1JlZ2lvbicsIFJlZ2lvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsYUFBYSxNQUFNLHdCQUF3QjtBQUdsRCxlQUFlLE1BQU1DLE1BQU0sQ0FBQztFQUUxQjs7RUFHQTs7RUFHT0MsV0FBV0EsQ0FBRUMsTUFBZSxFQUFHO0lBQ3BDLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7RUFDckI7RUFFT0MsT0FBT0EsQ0FBQSxFQUFTO0lBQ3JCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7RUFDM0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLFFBQWtCLEVBQVM7SUFDN0NGLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFDRixTQUFTLENBQUNLLFFBQVEsQ0FBRUQsUUFBUyxDQUFDLEVBQUUsb0NBQXFDLENBQUM7SUFDOUYsSUFBSSxDQUFDSixTQUFTLENBQUNNLElBQUksQ0FBRUYsUUFBUyxDQUFDO0VBQ2pDOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDUCxTQUFTLENBQUNRLE1BQU0sR0FBRyxDQUFDO0VBQzNCO0FBQ0Y7QUFFQVosYUFBYSxDQUFDYSxRQUFRLENBQUUsUUFBUSxFQUFFWixNQUFPLENBQUMifQ==