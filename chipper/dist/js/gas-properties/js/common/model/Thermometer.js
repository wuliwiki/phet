// Copyright 2018-2022, University of Colorado Boulder

/**
 * Thermometer is the model for the thermometer. It is responsible for determining what units will be used to present
 * the temperature, and for deriving pressure in those units.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import StringUnionProperty from '../../../../axon/js/StringUnionProperty.js';
import Range from '../../../../dot/js/Range.js';
import optionize from '../../../../phet-core/js/optionize.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import gasProperties from '../../gasProperties.js';
import { TemperatureUnitsValues } from './TemperatureUnits.js';

// constants
const DEFAULT_RANGE = new Range(0, 1000); // in K

export default class Thermometer {
  // range of thermometer display, in K. temperatureProperty is expected to exceed this.

  // temperature in the container, in K. null when the container is empty.

  // temperature in the container, in Celsius. null when the container is empty.

  // temperature units displayed by the thermometer

  constructor(temperatureKelvinProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      range: DEFAULT_RANGE
    }, providedOptions);
    this.range = options.range;
    this.temperatureKelvinProperty = temperatureKelvinProperty;
    this.temperatureCelsiusProperty = new DerivedProperty([this.temperatureKelvinProperty], temperatureKelvin => temperatureKelvin === null ? null : temperatureKelvin - 273.15, {
      units: '\u00B0C',
      isValidValue: value => value === null || value !== 0,
      phetioValueType: NullableIO(NumberIO),
      tandem: options.tandem.createTandem('temperatureCelsiusProperty'),
      phetioDocumentation: 'temperature in degrees C'
    });
    this.unitsProperty = new StringUnionProperty('kelvin', {
      validValues: TemperatureUnitsValues,
      tandem: options.tandem.createTandem('unitsProperty'),
      phetioDocumentation: 'units displayed by the thermometer'
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.unitsProperty.reset();
  }
}
gasProperties.register('Thermometer', Thermometer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJTdHJpbmdVbmlvblByb3BlcnR5IiwiUmFuZ2UiLCJvcHRpb25pemUiLCJOdWxsYWJsZUlPIiwiTnVtYmVySU8iLCJnYXNQcm9wZXJ0aWVzIiwiVGVtcGVyYXR1cmVVbml0c1ZhbHVlcyIsIkRFRkFVTFRfUkFOR0UiLCJUaGVybW9tZXRlciIsImNvbnN0cnVjdG9yIiwidGVtcGVyYXR1cmVLZWx2aW5Qcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJyYW5nZSIsInRlbXBlcmF0dXJlQ2Vsc2l1c1Byb3BlcnR5IiwidGVtcGVyYXR1cmVLZWx2aW4iLCJ1bml0cyIsImlzVmFsaWRWYWx1ZSIsInZhbHVlIiwicGhldGlvVmFsdWVUeXBlIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInVuaXRzUHJvcGVydHkiLCJ2YWxpZFZhbHVlcyIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGhlcm1vbWV0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlcm1vbWV0ZXIgaXMgdGhlIG1vZGVsIGZvciB0aGUgdGhlcm1vbWV0ZXIuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciBkZXRlcm1pbmluZyB3aGF0IHVuaXRzIHdpbGwgYmUgdXNlZCB0byBwcmVzZW50XHJcbiAqIHRoZSB0ZW1wZXJhdHVyZSwgYW5kIGZvciBkZXJpdmluZyBwcmVzc3VyZSBpbiB0aG9zZSB1bml0cy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU3RyaW5nVW5pb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1N0cmluZ1VuaW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgeyBQaGV0aW9PYmplY3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb09iamVjdC5qcyc7XHJcbmltcG9ydCBOdWxsYWJsZUlPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdWxsYWJsZUlPLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBnYXNQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2dhc1Byb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgeyBUZW1wZXJhdHVyZVVuaXRzLCBUZW1wZXJhdHVyZVVuaXRzVmFsdWVzIH0gZnJvbSAnLi9UZW1wZXJhdHVyZVVuaXRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUZBVUxUX1JBTkdFID0gbmV3IFJhbmdlKCAwLCAxMDAwICk7IC8vIGluIEtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcmFuZ2U/OiBSYW5nZTtcclxufTtcclxuXHJcbnR5cGUgVGhlcm1vbWV0ZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhlcm1vbWV0ZXIge1xyXG5cclxuICAvLyByYW5nZSBvZiB0aGVybW9tZXRlciBkaXNwbGF5LCBpbiBLLiB0ZW1wZXJhdHVyZVByb3BlcnR5IGlzIGV4cGVjdGVkIHRvIGV4Y2VlZCB0aGlzLlxyXG4gIHB1YmxpYyByZWFkb25seSByYW5nZTogUmFuZ2U7XHJcblxyXG4gIC8vIHRlbXBlcmF0dXJlIGluIHRoZSBjb250YWluZXIsIGluIEsuIG51bGwgd2hlbiB0aGUgY29udGFpbmVyIGlzIGVtcHR5LlxyXG4gIHB1YmxpYyByZWFkb25seSB0ZW1wZXJhdHVyZUtlbHZpblByb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXIgfCBudWxsPjtcclxuXHJcbiAgLy8gdGVtcGVyYXR1cmUgaW4gdGhlIGNvbnRhaW5lciwgaW4gQ2Vsc2l1cy4gbnVsbCB3aGVuIHRoZSBjb250YWluZXIgaXMgZW1wdHkuXHJcbiAgcHVibGljIHJlYWRvbmx5IHRlbXBlcmF0dXJlQ2Vsc2l1c1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXIgfCBudWxsPjtcclxuXHJcbiAgLy8gdGVtcGVyYXR1cmUgdW5pdHMgZGlzcGxheWVkIGJ5IHRoZSB0aGVybW9tZXRlclxyXG4gIHB1YmxpYyByZWFkb25seSB1bml0c1Byb3BlcnR5OiBTdHJpbmdVbmlvblByb3BlcnR5PFRlbXBlcmF0dXJlVW5pdHM+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRlbXBlcmF0dXJlS2VsdmluUHJvcGVydHk6IFByb3BlcnR5PG51bWJlciB8IG51bGw+LCBwcm92aWRlZE9wdGlvbnM6IFRoZXJtb21ldGVyT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFRoZXJtb21ldGVyT3B0aW9ucywgU2VsZk9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHJhbmdlOiBERUZBVUxUX1JBTkdFXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnJhbmdlID0gb3B0aW9ucy5yYW5nZTtcclxuXHJcbiAgICB0aGlzLnRlbXBlcmF0dXJlS2VsdmluUHJvcGVydHkgPSB0ZW1wZXJhdHVyZUtlbHZpblByb3BlcnR5O1xyXG5cclxuICAgIHRoaXMudGVtcGVyYXR1cmVDZWxzaXVzUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIHRoaXMudGVtcGVyYXR1cmVLZWx2aW5Qcm9wZXJ0eSBdLFxyXG4gICAgICB0ZW1wZXJhdHVyZUtlbHZpbiA9PiAoIHRlbXBlcmF0dXJlS2VsdmluID09PSBudWxsICkgPyBudWxsIDogdGVtcGVyYXR1cmVLZWx2aW4gLSAyNzMuMTUsIHtcclxuICAgICAgICB1bml0czogJ1xcdTAwQjBDJyxcclxuICAgICAgICBpc1ZhbGlkVmFsdWU6IHZhbHVlID0+ICggdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgIT09IDAgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bGxhYmxlSU8oIE51bWJlcklPICksXHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd0ZW1wZXJhdHVyZUNlbHNpdXNQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAndGVtcGVyYXR1cmUgaW4gZGVncmVlcyBDJ1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgdGhpcy51bml0c1Byb3BlcnR5ID0gbmV3IFN0cmluZ1VuaW9uUHJvcGVydHk8VGVtcGVyYXR1cmVVbml0cz4oICdrZWx2aW4nLCB7XHJcbiAgICAgIHZhbGlkVmFsdWVzOiBUZW1wZXJhdHVyZVVuaXRzVmFsdWVzLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3VuaXRzUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd1bml0cyBkaXNwbGF5ZWQgYnkgdGhlIHRoZXJtb21ldGVyJ1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMudW5pdHNQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuZ2FzUHJvcGVydGllcy5yZWdpc3RlciggJ1RoZXJtb21ldGVyJywgVGhlcm1vbWV0ZXIgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBRXBFLE9BQU9DLG1CQUFtQixNQUFNLDRDQUE0QztBQUU1RSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFHN0QsT0FBT0MsVUFBVSxNQUFNLDJDQUEyQztBQUNsRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsU0FBMkJDLHNCQUFzQixRQUFRLHVCQUF1Qjs7QUFFaEY7QUFDQSxNQUFNQyxhQUFhLEdBQUcsSUFBSU4sS0FBSyxDQUFFLENBQUMsRUFBRSxJQUFLLENBQUMsQ0FBQyxDQUFDOztBQVE1QyxlQUFlLE1BQU1PLFdBQVcsQ0FBQztFQUUvQjs7RUFHQTs7RUFHQTs7RUFHQTs7RUFHT0MsV0FBV0EsQ0FBRUMseUJBQWtELEVBQUVDLGVBQW1DLEVBQUc7SUFFNUcsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQWtDLENBQUMsQ0FBRTtNQUU1RDtNQUNBVyxLQUFLLEVBQUVOO0lBQ1QsQ0FBQyxFQUFFSSxlQUFnQixDQUFDO0lBRXBCLElBQUksQ0FBQ0UsS0FBSyxHQUFHRCxPQUFPLENBQUNDLEtBQUs7SUFFMUIsSUFBSSxDQUFDSCx5QkFBeUIsR0FBR0EseUJBQXlCO0lBRTFELElBQUksQ0FBQ0ksMEJBQTBCLEdBQUcsSUFBSWYsZUFBZSxDQUFFLENBQUUsSUFBSSxDQUFDVyx5QkFBeUIsQ0FBRSxFQUN2RkssaUJBQWlCLElBQU1BLGlCQUFpQixLQUFLLElBQUksR0FBSyxJQUFJLEdBQUdBLGlCQUFpQixHQUFHLE1BQU0sRUFBRTtNQUN2RkMsS0FBSyxFQUFFLFNBQVM7TUFDaEJDLFlBQVksRUFBRUMsS0FBSyxJQUFNQSxLQUFLLEtBQUssSUFBSSxJQUFJQSxLQUFLLEtBQUssQ0FBRztNQUN4REMsZUFBZSxFQUFFaEIsVUFBVSxDQUFFQyxRQUFTLENBQUM7TUFDdkNnQixNQUFNLEVBQUVSLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDQyxZQUFZLENBQUUsNEJBQTZCLENBQUM7TUFDbkVDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVMLElBQUksQ0FBQ0MsYUFBYSxHQUFHLElBQUl2QixtQkFBbUIsQ0FBb0IsUUFBUSxFQUFFO01BQ3hFd0IsV0FBVyxFQUFFbEIsc0JBQXNCO01BQ25DYyxNQUFNLEVBQUVSLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDQyxZQUFZLENBQUUsZUFBZ0IsQ0FBQztNQUN0REMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0VBQ0w7RUFFT0csT0FBT0EsQ0FBQSxFQUFTO0lBQ3JCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7RUFDM0Y7RUFFT0MsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ0osYUFBYSxDQUFDSSxLQUFLLENBQUMsQ0FBQztFQUM1QjtBQUNGO0FBRUF0QixhQUFhLENBQUN1QixRQUFRLENBQUUsYUFBYSxFQUFFcEIsV0FBWSxDQUFDIn0=