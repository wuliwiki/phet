// Copyright 2019-2023, University of Colorado Boulder

/**
 * ParticleSystem is a sub-model of IdealGasModel. It is responsible for the particle system, including
 * the N (number of particles) component of the Ideal Gas Law, PV = NkT.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import propertyStateHandlerSingleton from '../../../../axon/js/propertyStateHandlerSingleton.js';
import PropertyStatePhase from '../../../../axon/js/PropertyStatePhase.js';
import dotRandom from '../../../../dot/js/dotRandom.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import gasProperties from '../../gasProperties.js';
import GasPropertiesConstants from '../GasPropertiesConstants.js';
import GasPropertiesUtils from '../GasPropertiesUtils.js';
import HeavyParticle from './HeavyParticle.js';
import LightParticle from './LightParticle.js';
import ParticleUtils from './ParticleUtils.js';

// constants

// used to compute the initial velocity angle for particles, in radians
const PARTICLE_DISPERSION_ANGLE = Math.PI / 2;
export default class ParticleSystem {
  // gets the temperature used to compute initial velocity magnitude

  // where particle-particle collisions are enabled

  // point where the particles enter the container

  // Together these arrays make up the 'particle system'. Separate arrays are kept to optimize performance.
  // heavy particles inside the container
  // light particles inside the container
  // heavy particles outside the container
  // light particles outside the container
  // performance optimization, for iterating over all particles inside the container
  // the number of heavy particles inside the container
  // the number of light particles inside the container
  // N, the total number of particles in the container
  constructor(getInitialTemperature, collisionsEnabledProperty, particleEntryPosition, tandem) {
    this.getInitialTemperature = getInitialTemperature;
    this.collisionsEnabledProperty = collisionsEnabledProperty;
    this.particleEntryPosition = particleEntryPosition;
    this.heavyParticles = [];
    this.lightParticles = [];
    this.heavyParticlesOutside = [];
    this.lightParticlesOutside = [];
    this.insideParticleArrays = [this.heavyParticles, this.lightParticles];
    this.numberOfHeavyParticlesProperty = new NumberProperty(GasPropertiesConstants.HEAVY_PARTICLES_RANGE.defaultValue, {
      numberType: 'Integer',
      range: GasPropertiesConstants.HEAVY_PARTICLES_RANGE,
      tandem: tandem.createTandem('numberOfHeavyParticlesProperty'),
      phetioDocumentation: 'the number of heavy particles in the container',
      hasListenerOrderDependencies: true // TODO: https://github.com/phetsims/gas-properties/issues/186
    });

    this.numberOfLightParticlesProperty = new NumberProperty(GasPropertiesConstants.LIGHT_PARTICLES_RANGE.defaultValue, {
      numberType: 'Integer',
      range: GasPropertiesConstants.LIGHT_PARTICLES_RANGE,
      tandem: tandem.createTandem('numberOfLightParticlesProperty'),
      phetioDocumentation: 'the number of light particles in the container',
      hasListenerOrderDependencies: true // TODO: https://github.com/phetsims/gas-properties/issues/186
    });

    // Synchronize particle counts and arrays.
    const createHeavyParticle = () => new HeavyParticle();
    this.numberOfHeavyParticlesProperty.link((newValue, oldValue) => {
      this.updateNumberOfParticles(newValue, oldValue, this.heavyParticles, createHeavyParticle);
    });
    const createLightParticle = () => new LightParticle();
    this.numberOfLightParticlesProperty.link((newValue, oldValue) => {
      this.updateNumberOfParticles(newValue, oldValue, this.lightParticles, createLightParticle);
    });
    this.numberOfParticlesProperty = new DerivedProperty([this.numberOfHeavyParticlesProperty, this.numberOfLightParticlesProperty], (numberOfHeavyParticles, numberOfLightParticles) => {
      // Verify that particle arrays have been populated before numberOfParticlesProperty is updated.
      // If you hit these assertions, then you need to add this listener later.  This is a trade-off
      // for using plain old Arrays instead of ObservableArrayDefs.
      assert && assert(this.heavyParticles.length === numberOfHeavyParticles, 'heavyParticles has not been populated yet');
      assert && assert(this.lightParticles.length === numberOfLightParticles, 'lightParticles has not been populated yet');
      return numberOfHeavyParticles + numberOfLightParticles;
    }, {
      phetioValueType: NumberIO,
      valueType: 'number',
      isValidValue: value => value >= 0,
      tandem: tandem.createTandem('numberOfParticlesProperty'),
      phetioDocumentation: 'the total number of particles in the container'
    });

    // Properties for the number of heavy and light particles need to notify listeners to update their associated
    // particle arrays. This occurs in the "notification" step when updateNumberOfParticles is called.
    // During PhET-iO restore state, this must occur before numberOfParticlesProperty is re-derived.
    // See https://github.com/phetsims/gas-properties/issues/178
    propertyStateHandlerSingleton.registerPhetioOrderDependency(this.numberOfHeavyParticlesProperty, PropertyStatePhase.NOTIFY, this.numberOfParticlesProperty, PropertyStatePhase.UNDEFER);
    propertyStateHandlerSingleton.registerPhetioOrderDependency(this.numberOfLightParticlesProperty, PropertyStatePhase.NOTIFY, this.numberOfParticlesProperty, PropertyStatePhase.UNDEFER);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.removeAllParticles();
  }

  /**
   * Removes and disposes of all particles.
   */
  removeAllParticles() {
    this.numberOfHeavyParticlesProperty.reset();
    assert && assert(this.heavyParticles.length === 0, 'there should be no heavyParticles');
    this.numberOfLightParticlesProperty.reset();
    assert && assert(this.lightParticles.length === 0, 'there should be no lightParticles');
    ParticleUtils.removeAllParticles(this.heavyParticlesOutside);
    assert && assert(this.heavyParticlesOutside.length === 0, 'there should be no heavyParticlesOutside');
    ParticleUtils.removeAllParticles(this.lightParticlesOutside);
    assert && assert(this.lightParticlesOutside.length === 0, 'there should be no lightParticlesOutside');
  }

  /**
   * Steps the particle system.
   * @param dt - time delta, in ps
   */
  step(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);
    ParticleUtils.stepParticles(this.heavyParticles, dt);
    ParticleUtils.stepParticles(this.lightParticles, dt);
    ParticleUtils.stepParticles(this.heavyParticlesOutside, dt);
    ParticleUtils.stepParticles(this.lightParticlesOutside, dt);
  }

  /**
   * Heats or cools the particle system.
   * @param heatCoolFactor - [-1,1] see HeaterCoolerNode heatCoolAmountProperty
   */
  heatCool(heatCoolFactor) {
    assert && assert(heatCoolFactor >= -1 && heatCoolFactor <= 1, `invalid heatCoolFactor: ${heatCoolFactor}`);
    if (heatCoolFactor !== 0) {
      ParticleUtils.heatCoolParticles(this.heavyParticles, heatCoolFactor);
      ParticleUtils.heatCoolParticles(this.lightParticles, heatCoolFactor);
    }
  }

  /**
   * Allows particles to escape from the opening in the top of the container.
   */
  escapeParticles(container) {
    if (container.isOpenProperty.value) {
      ParticleUtils.escapeParticles(container, this.numberOfHeavyParticlesProperty, this.heavyParticles, this.heavyParticlesOutside);
      ParticleUtils.escapeParticles(container, this.numberOfLightParticlesProperty, this.lightParticles, this.lightParticlesOutside);
    }
  }

  /**
   * Removes particles that are outside the specified bounds. This is used to dispose of particles once they
   * are outside the visible bounds of the sim.
   */
  removeParticlesOutOfBounds(bounds) {
    ParticleUtils.removeParticlesOutOfBounds(this.heavyParticlesOutside, bounds);
    ParticleUtils.removeParticlesOutOfBounds(this.lightParticlesOutside, bounds);
  }

  /**
   * Adjusts an array of particles to have the desired number of elements.
   * @param newValue - new number of particles
   * @param oldValue - old number of particles
   * @param particles - array of particles that corresponds to newValue and oldValue
   * @param createParticle - creates a Particle instance
   */
  updateNumberOfParticles(newValue, oldValue, particles, createParticle) {
    if (particles.length !== newValue) {
      const delta = newValue - (oldValue || 0);
      if (delta > 0) {
        this.addParticles(delta, particles, createParticle);
      } else if (delta < 0) {
        ParticleUtils.removeLastParticles(-delta, particles);
      }
      assert && assert(particles.length === newValue, 'particles array is out of sync');
    }
  }

  /**
   * Adds n particles to the end of the specified array.
   */
  addParticles(n, particles, createParticle) {
    assert && assert(n > 0, `invalid n: ${n}`);

    // Get the mean temperature that will be used to compute initial speed.
    const meanTemperature = this.getInitialTemperature();
    assert && assert(meanTemperature > 0, `invalid meanTemperature: ${meanTemperature}`);

    // Create n temperature values that will be used to compute initial speed.
    let temperatures = null;
    if (n === 1 || !this.collisionsEnabledProperty.value) {
      // For single particles, or if particle-particle collisions are disabled, use the mean temperature
      // for all particles. For groups of particles, this yields wave-like motion.
      temperatures = [];
      for (let i = 0; i < n; i++) {
        temperatures[i] = meanTemperature;
      }
    } else {
      // For groups of particles with particle-particle collisions enabled, create some deviation in the
      // temperature used to compute speed, but maintain the desired mean.  This makes the motion of a group
      // of particles look less wave-like. We do this for temperature instead of speed because temperature
      // in the container is T = (2/3)KE/k, and KE is a function of |v|^2, so deviation in speed would
      // change the desired temperature.
      temperatures = GasPropertiesUtils.getGaussianValues(n, meanTemperature, 0.2 * meanTemperature, 1E-3);
    }
    assert && assert(temperatures.length === n, `incorrect number of temperature values ${temperatures.length}, expected ${n}`);

    // Verify that all temperature values are > 0 Kelvin.
    assert && assert(_.every(temperatures, temperature => temperature > 0), `invalid temperature: ${_.find(temperatures, temperature => temperature <= 0)}, n=${n}, meanTemperature=${meanTemperature}, collisionsEnabled=${this.collisionsEnabledProperty.value}`);

    // Create n particles
    for (let i = 0; i < n; i++) {
      const particle = createParticle();

      // Position the particle just inside the container, accounting for radius.
      particle.setPositionXY(this.particleEntryPosition.x - particle.radius, this.particleEntryPosition.y);

      // Initial speed, |v| = sqrt( 3kT / m )
      const speed = Math.sqrt(3 * GasPropertiesConstants.BOLTZMANN * temperatures[i] / particle.mass);

      // Angle is randomly chosen from pump's dispersion angle, perpendicular to right wall of container.
      const angle = Math.PI - PARTICLE_DISPERSION_ANGLE / 2 + dotRandom.nextDouble() * PARTICLE_DISPERSION_ANGLE;
      particle.setVelocityPolar(speed, angle);
      particles.push(particle);
    }
  }

  /**
   * Redistributes the particles horizontally in the container.  This is used in the Ideal screen, where resizing
   * the container results in the particles being redistributed in the new container width.
   * @param scaleX - amount to scale each particle's x position
   */
  redistributeParticles(scaleX) {
    assert && assert(scaleX > 0, `invalid scaleX: ${scaleX}`);
    ParticleUtils.redistributeParticles(this.heavyParticles, scaleX);
    ParticleUtils.redistributeParticles(this.lightParticles, scaleX);
  }

  /**
   * Adjusts velocities of particle inside the container so that the resulting temperature matches
   * a specified temperature, in K.
   */
  setTemperature(temperature) {
    const desiredAverageKE = 3 / 2 * temperature * GasPropertiesConstants.BOLTZMANN; // KE = (3/2)Tk
    const actualAverageKE = this.getAverageKineticEnergy();
    const ratio = desiredAverageKE / actualAverageKE;
    for (let i = this.insideParticleArrays.length - 1; i >= 0; i--) {
      const particles = this.insideParticleArrays[i];
      for (let j = particles.length - 1; j >= 0; j--) {
        const particle = particles[j];
        const actualParticleKE = particle.getKineticEnergy();
        const desiredParticleKE = ratio * actualParticleKE;
        const desiredSpeed = Math.sqrt(2 * desiredParticleKE / particle.mass); // |v| = Math.sqrt( 2 * KE / m )
        particle.setVelocityMagnitude(desiredSpeed);
      }
    }
  }

  /**
   * Gets the average kinetic energy of the particles in the container, in AMU * pm^2 / ps^2.
   */
  getAverageKineticEnergy() {
    return this.getTotalKineticEnergy() / this.numberOfParticlesProperty.value;
  }

  /**
   * Gets the total kinetic energy of the particles in the container, in AMU * pm^2 / ps^2.
   */
  getTotalKineticEnergy() {
    return ParticleUtils.getTotalKineticEnergy(this.heavyParticles) + ParticleUtils.getTotalKineticEnergy(this.lightParticles);
  }
}
gasProperties.register('ParticleSystem', ParticleSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsInByb3BlcnR5U3RhdGVIYW5kbGVyU2luZ2xldG9uIiwiUHJvcGVydHlTdGF0ZVBoYXNlIiwiZG90UmFuZG9tIiwiTnVtYmVySU8iLCJnYXNQcm9wZXJ0aWVzIiwiR2FzUHJvcGVydGllc0NvbnN0YW50cyIsIkdhc1Byb3BlcnRpZXNVdGlscyIsIkhlYXZ5UGFydGljbGUiLCJMaWdodFBhcnRpY2xlIiwiUGFydGljbGVVdGlscyIsIlBBUlRJQ0xFX0RJU1BFUlNJT05fQU5HTEUiLCJNYXRoIiwiUEkiLCJQYXJ0aWNsZVN5c3RlbSIsImNvbnN0cnVjdG9yIiwiZ2V0SW5pdGlhbFRlbXBlcmF0dXJlIiwiY29sbGlzaW9uc0VuYWJsZWRQcm9wZXJ0eSIsInBhcnRpY2xlRW50cnlQb3NpdGlvbiIsInRhbmRlbSIsImhlYXZ5UGFydGljbGVzIiwibGlnaHRQYXJ0aWNsZXMiLCJoZWF2eVBhcnRpY2xlc091dHNpZGUiLCJsaWdodFBhcnRpY2xlc091dHNpZGUiLCJpbnNpZGVQYXJ0aWNsZUFycmF5cyIsIm51bWJlck9mSGVhdnlQYXJ0aWNsZXNQcm9wZXJ0eSIsIkhFQVZZX1BBUlRJQ0xFU19SQU5HRSIsImRlZmF1bHRWYWx1ZSIsIm51bWJlclR5cGUiLCJyYW5nZSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJoYXNMaXN0ZW5lck9yZGVyRGVwZW5kZW5jaWVzIiwibnVtYmVyT2ZMaWdodFBhcnRpY2xlc1Byb3BlcnR5IiwiTElHSFRfUEFSVElDTEVTX1JBTkdFIiwiY3JlYXRlSGVhdnlQYXJ0aWNsZSIsImxpbmsiLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwidXBkYXRlTnVtYmVyT2ZQYXJ0aWNsZXMiLCJjcmVhdGVMaWdodFBhcnRpY2xlIiwibnVtYmVyT2ZQYXJ0aWNsZXNQcm9wZXJ0eSIsIm51bWJlck9mSGVhdnlQYXJ0aWNsZXMiLCJudW1iZXJPZkxpZ2h0UGFydGljbGVzIiwiYXNzZXJ0IiwibGVuZ3RoIiwicGhldGlvVmFsdWVUeXBlIiwidmFsdWVUeXBlIiwiaXNWYWxpZFZhbHVlIiwidmFsdWUiLCJyZWdpc3RlclBoZXRpb09yZGVyRGVwZW5kZW5jeSIsIk5PVElGWSIsIlVOREVGRVIiLCJkaXNwb3NlIiwicmVzZXQiLCJyZW1vdmVBbGxQYXJ0aWNsZXMiLCJzdGVwIiwiZHQiLCJzdGVwUGFydGljbGVzIiwiaGVhdENvb2wiLCJoZWF0Q29vbEZhY3RvciIsImhlYXRDb29sUGFydGljbGVzIiwiZXNjYXBlUGFydGljbGVzIiwiY29udGFpbmVyIiwiaXNPcGVuUHJvcGVydHkiLCJyZW1vdmVQYXJ0aWNsZXNPdXRPZkJvdW5kcyIsImJvdW5kcyIsInBhcnRpY2xlcyIsImNyZWF0ZVBhcnRpY2xlIiwiZGVsdGEiLCJhZGRQYXJ0aWNsZXMiLCJyZW1vdmVMYXN0UGFydGljbGVzIiwibiIsIm1lYW5UZW1wZXJhdHVyZSIsInRlbXBlcmF0dXJlcyIsImkiLCJnZXRHYXVzc2lhblZhbHVlcyIsIl8iLCJldmVyeSIsInRlbXBlcmF0dXJlIiwiZmluZCIsInBhcnRpY2xlIiwic2V0UG9zaXRpb25YWSIsIngiLCJyYWRpdXMiLCJ5Iiwic3BlZWQiLCJzcXJ0IiwiQk9MVFpNQU5OIiwibWFzcyIsImFuZ2xlIiwibmV4dERvdWJsZSIsInNldFZlbG9jaXR5UG9sYXIiLCJwdXNoIiwicmVkaXN0cmlidXRlUGFydGljbGVzIiwic2NhbGVYIiwic2V0VGVtcGVyYXR1cmUiLCJkZXNpcmVkQXZlcmFnZUtFIiwiYWN0dWFsQXZlcmFnZUtFIiwiZ2V0QXZlcmFnZUtpbmV0aWNFbmVyZ3kiLCJyYXRpbyIsImoiLCJhY3R1YWxQYXJ0aWNsZUtFIiwiZ2V0S2luZXRpY0VuZXJneSIsImRlc2lyZWRQYXJ0aWNsZUtFIiwiZGVzaXJlZFNwZWVkIiwic2V0VmVsb2NpdHlNYWduaXR1ZGUiLCJnZXRUb3RhbEtpbmV0aWNFbmVyZ3kiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBhcnRpY2xlU3lzdGVtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBhcnRpY2xlU3lzdGVtIGlzIGEgc3ViLW1vZGVsIG9mIElkZWFsR2FzTW9kZWwuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcGFydGljbGUgc3lzdGVtLCBpbmNsdWRpbmdcclxuICogdGhlIE4gKG51bWJlciBvZiBwYXJ0aWNsZXMpIGNvbXBvbmVudCBvZiB0aGUgSWRlYWwgR2FzIExhdywgUFYgPSBOa1QuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgcHJvcGVydHlTdGF0ZUhhbmRsZXJTaW5nbGV0b24gZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9wcm9wZXJ0eVN0YXRlSGFuZGxlclNpbmdsZXRvbi5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eVN0YXRlUGhhc2UgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eVN0YXRlUGhhc2UuanMnO1xyXG5pbXBvcnQgUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1JlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBnYXNQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2dhc1Byb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgR2FzUHJvcGVydGllc0NvbnN0YW50cyBmcm9tICcuLi9HYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdhc1Byb3BlcnRpZXNVdGlscyBmcm9tICcuLi9HYXNQcm9wZXJ0aWVzVXRpbHMuanMnO1xyXG5pbXBvcnQgSGVhdnlQYXJ0aWNsZSBmcm9tICcuL0hlYXZ5UGFydGljbGUuanMnO1xyXG5pbXBvcnQgSWRlYWxHYXNMYXdDb250YWluZXIgZnJvbSAnLi9JZGVhbEdhc0xhd0NvbnRhaW5lci5qcyc7XHJcbmltcG9ydCBMaWdodFBhcnRpY2xlIGZyb20gJy4vTGlnaHRQYXJ0aWNsZS5qcyc7XHJcbmltcG9ydCBQYXJ0aWNsZSwgeyBQYXJ0aWNsZU9wdGlvbnMgfSBmcm9tICcuL1BhcnRpY2xlLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlVXRpbHMgZnJvbSAnLi9QYXJ0aWNsZVV0aWxzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5cclxuLy8gdXNlZCB0byBjb21wdXRlIHRoZSBpbml0aWFsIHZlbG9jaXR5IGFuZ2xlIGZvciBwYXJ0aWNsZXMsIGluIHJhZGlhbnNcclxuY29uc3QgUEFSVElDTEVfRElTUEVSU0lPTl9BTkdMRSA9IE1hdGguUEkgLyAyO1xyXG5cclxudHlwZSBDcmVhdGVQYXJ0aWNsZUZ1bmN0aW9uID0gKCBvcHRpb25zPzogUGFydGljbGVPcHRpb25zICkgPT4gUGFydGljbGU7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJ0aWNsZVN5c3RlbSB7XHJcblxyXG4gIC8vIGdldHMgdGhlIHRlbXBlcmF0dXJlIHVzZWQgdG8gY29tcHV0ZSBpbml0aWFsIHZlbG9jaXR5IG1hZ25pdHVkZVxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZ2V0SW5pdGlhbFRlbXBlcmF0dXJlOiAoKSA9PiBudW1iZXI7XHJcblxyXG4gIC8vIHdoZXJlIHBhcnRpY2xlLXBhcnRpY2xlIGNvbGxpc2lvbnMgYXJlIGVuYWJsZWRcclxuICBwcml2YXRlIHJlYWRvbmx5IGNvbGxpc2lvbnNFbmFibGVkUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyBwb2ludCB3aGVyZSB0aGUgcGFydGljbGVzIGVudGVyIHRoZSBjb250YWluZXJcclxuICBwcml2YXRlIHJlYWRvbmx5IHBhcnRpY2xlRW50cnlQb3NpdGlvbjogVmVjdG9yMjtcclxuXHJcbiAgLy8gVG9nZXRoZXIgdGhlc2UgYXJyYXlzIG1ha2UgdXAgdGhlICdwYXJ0aWNsZSBzeXN0ZW0nLiBTZXBhcmF0ZSBhcnJheXMgYXJlIGtlcHQgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UuXHJcbiAgcHVibGljIHJlYWRvbmx5IGhlYXZ5UGFydGljbGVzOiBIZWF2eVBhcnRpY2xlW107IC8vIGhlYXZ5IHBhcnRpY2xlcyBpbnNpZGUgdGhlIGNvbnRhaW5lclxyXG4gIHB1YmxpYyByZWFkb25seSBsaWdodFBhcnRpY2xlczogTGlnaHRQYXJ0aWNsZVtdOyAvLyBsaWdodCBwYXJ0aWNsZXMgaW5zaWRlIHRoZSBjb250YWluZXJcclxuICBwdWJsaWMgcmVhZG9ubHkgaGVhdnlQYXJ0aWNsZXNPdXRzaWRlOiBIZWF2eVBhcnRpY2xlW107IC8vIGhlYXZ5IHBhcnRpY2xlcyBvdXRzaWRlIHRoZSBjb250YWluZXJcclxuICBwdWJsaWMgcmVhZG9ubHkgbGlnaHRQYXJ0aWNsZXNPdXRzaWRlOiBMaWdodFBhcnRpY2xlW107IC8vIGxpZ2h0IHBhcnRpY2xlcyBvdXRzaWRlIHRoZSBjb250YWluZXJcclxuXHJcbiAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLCBmb3IgaXRlcmF0aW5nIG92ZXIgYWxsIHBhcnRpY2xlcyBpbnNpZGUgdGhlIGNvbnRhaW5lclxyXG4gIHB1YmxpYyByZWFkb25seSBpbnNpZGVQYXJ0aWNsZUFycmF5czogWyBIZWF2eVBhcnRpY2xlW10sIExpZ2h0UGFydGljbGVbXSBdO1xyXG5cclxuICAvLyB0aGUgbnVtYmVyIG9mIGhlYXZ5IHBhcnRpY2xlcyBpbnNpZGUgdGhlIGNvbnRhaW5lclxyXG4gIHB1YmxpYyByZWFkb25seSBudW1iZXJPZkhlYXZ5UGFydGljbGVzUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICAvLyB0aGUgbnVtYmVyIG9mIGxpZ2h0IHBhcnRpY2xlcyBpbnNpZGUgdGhlIGNvbnRhaW5lclxyXG4gIHB1YmxpYyByZWFkb25seSBudW1iZXJPZkxpZ2h0UGFydGljbGVzUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICAvLyBOLCB0aGUgdG90YWwgbnVtYmVyIG9mIHBhcnRpY2xlcyBpbiB0aGUgY29udGFpbmVyXHJcbiAgcHVibGljIHJlYWRvbmx5IG51bWJlck9mUGFydGljbGVzUHJvcGVydHk6IFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBnZXRJbml0aWFsVGVtcGVyYXR1cmU6ICgpID0+IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbnNFbmFibGVkUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcGFydGljbGVFbnRyeVBvc2l0aW9uOiBWZWN0b3IyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgdGhpcy5nZXRJbml0aWFsVGVtcGVyYXR1cmUgPSBnZXRJbml0aWFsVGVtcGVyYXR1cmU7XHJcbiAgICB0aGlzLmNvbGxpc2lvbnNFbmFibGVkUHJvcGVydHkgPSBjb2xsaXNpb25zRW5hYmxlZFByb3BlcnR5O1xyXG4gICAgdGhpcy5wYXJ0aWNsZUVudHJ5UG9zaXRpb24gPSBwYXJ0aWNsZUVudHJ5UG9zaXRpb247XHJcblxyXG4gICAgdGhpcy5oZWF2eVBhcnRpY2xlcyA9IFtdO1xyXG4gICAgdGhpcy5saWdodFBhcnRpY2xlcyA9IFtdO1xyXG4gICAgdGhpcy5oZWF2eVBhcnRpY2xlc091dHNpZGUgPSBbXTtcclxuICAgIHRoaXMubGlnaHRQYXJ0aWNsZXNPdXRzaWRlID0gW107XHJcblxyXG4gICAgdGhpcy5pbnNpZGVQYXJ0aWNsZUFycmF5cyA9IFsgdGhpcy5oZWF2eVBhcnRpY2xlcywgdGhpcy5saWdodFBhcnRpY2xlcyBdO1xyXG5cclxuICAgIHRoaXMubnVtYmVyT2ZIZWF2eVBhcnRpY2xlc1Byb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLkhFQVZZX1BBUlRJQ0xFU19SQU5HRS5kZWZhdWx0VmFsdWUsIHtcclxuICAgICAgbnVtYmVyVHlwZTogJ0ludGVnZXInLFxyXG4gICAgICByYW5nZTogR2FzUHJvcGVydGllc0NvbnN0YW50cy5IRUFWWV9QQVJUSUNMRVNfUkFOR0UsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ251bWJlck9mSGVhdnlQYXJ0aWNsZXNQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3RoZSBudW1iZXIgb2YgaGVhdnkgcGFydGljbGVzIGluIHRoZSBjb250YWluZXInLFxyXG4gICAgICBoYXNMaXN0ZW5lck9yZGVyRGVwZW5kZW5jaWVzOiB0cnVlIC8vIFRPRE86IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9nYXMtcHJvcGVydGllcy9pc3N1ZXMvMTg2XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5udW1iZXJPZkxpZ2h0UGFydGljbGVzUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIEdhc1Byb3BlcnRpZXNDb25zdGFudHMuTElHSFRfUEFSVElDTEVTX1JBTkdFLmRlZmF1bHRWYWx1ZSwge1xyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgIHJhbmdlOiBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLkxJR0hUX1BBUlRJQ0xFU19SQU5HRSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbnVtYmVyT2ZMaWdodFBhcnRpY2xlc1Byb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAndGhlIG51bWJlciBvZiBsaWdodCBwYXJ0aWNsZXMgaW4gdGhlIGNvbnRhaW5lcicsXHJcbiAgICAgIGhhc0xpc3RlbmVyT3JkZXJEZXBlbmRlbmNpZXM6IHRydWUgLy8gVE9ETzogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2dhcy1wcm9wZXJ0aWVzL2lzc3Vlcy8xODZcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBTeW5jaHJvbml6ZSBwYXJ0aWNsZSBjb3VudHMgYW5kIGFycmF5cy5cclxuICAgIGNvbnN0IGNyZWF0ZUhlYXZ5UGFydGljbGUgPSAoKSA9PiBuZXcgSGVhdnlQYXJ0aWNsZSgpO1xyXG4gICAgdGhpcy5udW1iZXJPZkhlYXZ5UGFydGljbGVzUHJvcGVydHkubGluayggKCBuZXdWYWx1ZSwgb2xkVmFsdWUgKSA9PiB7XHJcbiAgICAgIHRoaXMudXBkYXRlTnVtYmVyT2ZQYXJ0aWNsZXMoIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgdGhpcy5oZWF2eVBhcnRpY2xlcywgY3JlYXRlSGVhdnlQYXJ0aWNsZSApO1xyXG4gICAgfSApO1xyXG4gICAgY29uc3QgY3JlYXRlTGlnaHRQYXJ0aWNsZSA9ICgpID0+IG5ldyBMaWdodFBhcnRpY2xlKCk7XHJcbiAgICB0aGlzLm51bWJlck9mTGlnaHRQYXJ0aWNsZXNQcm9wZXJ0eS5saW5rKCAoIG5ld1ZhbHVlLCBvbGRWYWx1ZSApID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVOdW1iZXJPZlBhcnRpY2xlcyggbmV3VmFsdWUsIG9sZFZhbHVlLCB0aGlzLmxpZ2h0UGFydGljbGVzLCBjcmVhdGVMaWdodFBhcnRpY2xlICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5udW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgWyB0aGlzLm51bWJlck9mSGVhdnlQYXJ0aWNsZXNQcm9wZXJ0eSwgdGhpcy5udW1iZXJPZkxpZ2h0UGFydGljbGVzUHJvcGVydHkgXSxcclxuICAgICAgKCBudW1iZXJPZkhlYXZ5UGFydGljbGVzLCBudW1iZXJPZkxpZ2h0UGFydGljbGVzICkgPT4ge1xyXG5cclxuICAgICAgICAvLyBWZXJpZnkgdGhhdCBwYXJ0aWNsZSBhcnJheXMgaGF2ZSBiZWVuIHBvcHVsYXRlZCBiZWZvcmUgbnVtYmVyT2ZQYXJ0aWNsZXNQcm9wZXJ0eSBpcyB1cGRhdGVkLlxyXG4gICAgICAgIC8vIElmIHlvdSBoaXQgdGhlc2UgYXNzZXJ0aW9ucywgdGhlbiB5b3UgbmVlZCB0byBhZGQgdGhpcyBsaXN0ZW5lciBsYXRlci4gIFRoaXMgaXMgYSB0cmFkZS1vZmZcclxuICAgICAgICAvLyBmb3IgdXNpbmcgcGxhaW4gb2xkIEFycmF5cyBpbnN0ZWFkIG9mIE9ic2VydmFibGVBcnJheURlZnMuXHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5oZWF2eVBhcnRpY2xlcy5sZW5ndGggPT09IG51bWJlck9mSGVhdnlQYXJ0aWNsZXMsXHJcbiAgICAgICAgICAnaGVhdnlQYXJ0aWNsZXMgaGFzIG5vdCBiZWVuIHBvcHVsYXRlZCB5ZXQnICk7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5saWdodFBhcnRpY2xlcy5sZW5ndGggPT09IG51bWJlck9mTGlnaHRQYXJ0aWNsZXMsXHJcbiAgICAgICAgICAnbGlnaHRQYXJ0aWNsZXMgaGFzIG5vdCBiZWVuIHBvcHVsYXRlZCB5ZXQnICk7XHJcbiAgICAgICAgcmV0dXJuIG51bWJlck9mSGVhdnlQYXJ0aWNsZXMgKyBudW1iZXJPZkxpZ2h0UGFydGljbGVzO1xyXG4gICAgICB9LCB7XHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBOdW1iZXJJTyxcclxuICAgICAgICB2YWx1ZVR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgIGlzVmFsaWRWYWx1ZTogdmFsdWUgPT4gdmFsdWUgPj0gMCxcclxuICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdudW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5JyApLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd0aGUgdG90YWwgbnVtYmVyIG9mIHBhcnRpY2xlcyBpbiB0aGUgY29udGFpbmVyJ1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXMgZm9yIHRoZSBudW1iZXIgb2YgaGVhdnkgYW5kIGxpZ2h0IHBhcnRpY2xlcyBuZWVkIHRvIG5vdGlmeSBsaXN0ZW5lcnMgdG8gdXBkYXRlIHRoZWlyIGFzc29jaWF0ZWRcclxuICAgIC8vIHBhcnRpY2xlIGFycmF5cy4gVGhpcyBvY2N1cnMgaW4gdGhlIFwibm90aWZpY2F0aW9uXCIgc3RlcCB3aGVuIHVwZGF0ZU51bWJlck9mUGFydGljbGVzIGlzIGNhbGxlZC5cclxuICAgIC8vIER1cmluZyBQaEVULWlPIHJlc3RvcmUgc3RhdGUsIHRoaXMgbXVzdCBvY2N1ciBiZWZvcmUgbnVtYmVyT2ZQYXJ0aWNsZXNQcm9wZXJ0eSBpcyByZS1kZXJpdmVkLlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9nYXMtcHJvcGVydGllcy9pc3N1ZXMvMTc4XHJcbiAgICBwcm9wZXJ0eVN0YXRlSGFuZGxlclNpbmdsZXRvbi5yZWdpc3RlclBoZXRpb09yZGVyRGVwZW5kZW5jeSggdGhpcy5udW1iZXJPZkhlYXZ5UGFydGljbGVzUHJvcGVydHksIFByb3BlcnR5U3RhdGVQaGFzZS5OT1RJRlksIHRoaXMubnVtYmVyT2ZQYXJ0aWNsZXNQcm9wZXJ0eSwgUHJvcGVydHlTdGF0ZVBoYXNlLlVOREVGRVIgKTtcclxuICAgIHByb3BlcnR5U3RhdGVIYW5kbGVyU2luZ2xldG9uLnJlZ2lzdGVyUGhldGlvT3JkZXJEZXBlbmRlbmN5KCB0aGlzLm51bWJlck9mTGlnaHRQYXJ0aWNsZXNQcm9wZXJ0eSwgUHJvcGVydHlTdGF0ZVBoYXNlLk5PVElGWSwgdGhpcy5udW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5LCBQcm9wZXJ0eVN0YXRlUGhhc2UuVU5ERUZFUiApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICB9XHJcblxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlbW92ZUFsbFBhcnRpY2xlcygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhbmQgZGlzcG9zZXMgb2YgYWxsIHBhcnRpY2xlcy5cclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlQWxsUGFydGljbGVzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5udW1iZXJPZkhlYXZ5UGFydGljbGVzUHJvcGVydHkucmVzZXQoKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuaGVhdnlQYXJ0aWNsZXMubGVuZ3RoID09PSAwLCAndGhlcmUgc2hvdWxkIGJlIG5vIGhlYXZ5UGFydGljbGVzJyApO1xyXG5cclxuICAgIHRoaXMubnVtYmVyT2ZMaWdodFBhcnRpY2xlc1Byb3BlcnR5LnJlc2V0KCk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLmxpZ2h0UGFydGljbGVzLmxlbmd0aCA9PT0gMCwgJ3RoZXJlIHNob3VsZCBiZSBubyBsaWdodFBhcnRpY2xlcycgKTtcclxuXHJcbiAgICBQYXJ0aWNsZVV0aWxzLnJlbW92ZUFsbFBhcnRpY2xlcyggdGhpcy5oZWF2eVBhcnRpY2xlc091dHNpZGUgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuaGVhdnlQYXJ0aWNsZXNPdXRzaWRlLmxlbmd0aCA9PT0gMCwgJ3RoZXJlIHNob3VsZCBiZSBubyBoZWF2eVBhcnRpY2xlc091dHNpZGUnICk7XHJcblxyXG4gICAgUGFydGljbGVVdGlscy5yZW1vdmVBbGxQYXJ0aWNsZXMoIHRoaXMubGlnaHRQYXJ0aWNsZXNPdXRzaWRlICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLmxpZ2h0UGFydGljbGVzT3V0c2lkZS5sZW5ndGggPT09IDAsICd0aGVyZSBzaG91bGQgYmUgbm8gbGlnaHRQYXJ0aWNsZXNPdXRzaWRlJyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RlcHMgdGhlIHBhcnRpY2xlIHN5c3RlbS5cclxuICAgKiBAcGFyYW0gZHQgLSB0aW1lIGRlbHRhLCBpbiBwc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGVwKCBkdDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZHQgPiAwLCBgaW52YWxpZCBkdDogJHtkdH1gICk7XHJcblxyXG4gICAgUGFydGljbGVVdGlscy5zdGVwUGFydGljbGVzKCB0aGlzLmhlYXZ5UGFydGljbGVzLCBkdCApO1xyXG4gICAgUGFydGljbGVVdGlscy5zdGVwUGFydGljbGVzKCB0aGlzLmxpZ2h0UGFydGljbGVzLCBkdCApO1xyXG4gICAgUGFydGljbGVVdGlscy5zdGVwUGFydGljbGVzKCB0aGlzLmhlYXZ5UGFydGljbGVzT3V0c2lkZSwgZHQgKTtcclxuICAgIFBhcnRpY2xlVXRpbHMuc3RlcFBhcnRpY2xlcyggdGhpcy5saWdodFBhcnRpY2xlc091dHNpZGUsIGR0ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIZWF0cyBvciBjb29scyB0aGUgcGFydGljbGUgc3lzdGVtLlxyXG4gICAqIEBwYXJhbSBoZWF0Q29vbEZhY3RvciAtIFstMSwxXSBzZWUgSGVhdGVyQ29vbGVyTm9kZSBoZWF0Q29vbEFtb3VudFByb3BlcnR5XHJcbiAgICovXHJcbiAgcHVibGljIGhlYXRDb29sKCBoZWF0Q29vbEZhY3RvcjogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggaGVhdENvb2xGYWN0b3IgPj0gLTEgJiYgaGVhdENvb2xGYWN0b3IgPD0gMSwgYGludmFsaWQgaGVhdENvb2xGYWN0b3I6ICR7aGVhdENvb2xGYWN0b3J9YCApO1xyXG5cclxuICAgIGlmICggaGVhdENvb2xGYWN0b3IgIT09IDAgKSB7XHJcbiAgICAgIFBhcnRpY2xlVXRpbHMuaGVhdENvb2xQYXJ0aWNsZXMoIHRoaXMuaGVhdnlQYXJ0aWNsZXMsIGhlYXRDb29sRmFjdG9yICk7XHJcbiAgICAgIFBhcnRpY2xlVXRpbHMuaGVhdENvb2xQYXJ0aWNsZXMoIHRoaXMubGlnaHRQYXJ0aWNsZXMsIGhlYXRDb29sRmFjdG9yICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbGxvd3MgcGFydGljbGVzIHRvIGVzY2FwZSBmcm9tIHRoZSBvcGVuaW5nIGluIHRoZSB0b3Agb2YgdGhlIGNvbnRhaW5lci5cclxuICAgKi9cclxuICBwdWJsaWMgZXNjYXBlUGFydGljbGVzKCBjb250YWluZXI6IElkZWFsR2FzTGF3Q29udGFpbmVyICk6IHZvaWQge1xyXG5cclxuICAgIGlmICggY29udGFpbmVyLmlzT3BlblByb3BlcnR5LnZhbHVlICkge1xyXG5cclxuICAgICAgUGFydGljbGVVdGlscy5lc2NhcGVQYXJ0aWNsZXMoIGNvbnRhaW5lciwgdGhpcy5udW1iZXJPZkhlYXZ5UGFydGljbGVzUHJvcGVydHksXHJcbiAgICAgICAgdGhpcy5oZWF2eVBhcnRpY2xlcywgdGhpcy5oZWF2eVBhcnRpY2xlc091dHNpZGUgKTtcclxuXHJcbiAgICAgIFBhcnRpY2xlVXRpbHMuZXNjYXBlUGFydGljbGVzKCBjb250YWluZXIsIHRoaXMubnVtYmVyT2ZMaWdodFBhcnRpY2xlc1Byb3BlcnR5LFxyXG4gICAgICAgIHRoaXMubGlnaHRQYXJ0aWNsZXMsIHRoaXMubGlnaHRQYXJ0aWNsZXNPdXRzaWRlICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIHBhcnRpY2xlcyB0aGF0IGFyZSBvdXRzaWRlIHRoZSBzcGVjaWZpZWQgYm91bmRzLiBUaGlzIGlzIHVzZWQgdG8gZGlzcG9zZSBvZiBwYXJ0aWNsZXMgb25jZSB0aGV5XHJcbiAgICogYXJlIG91dHNpZGUgdGhlIHZpc2libGUgYm91bmRzIG9mIHRoZSBzaW0uXHJcbiAgICovXHJcbiAgcHVibGljIHJlbW92ZVBhcnRpY2xlc091dE9mQm91bmRzKCBib3VuZHM6IEJvdW5kczIgKTogdm9pZCB7XHJcbiAgICBQYXJ0aWNsZVV0aWxzLnJlbW92ZVBhcnRpY2xlc091dE9mQm91bmRzKCB0aGlzLmhlYXZ5UGFydGljbGVzT3V0c2lkZSwgYm91bmRzICk7XHJcbiAgICBQYXJ0aWNsZVV0aWxzLnJlbW92ZVBhcnRpY2xlc091dE9mQm91bmRzKCB0aGlzLmxpZ2h0UGFydGljbGVzT3V0c2lkZSwgYm91bmRzICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGp1c3RzIGFuIGFycmF5IG9mIHBhcnRpY2xlcyB0byBoYXZlIHRoZSBkZXNpcmVkIG51bWJlciBvZiBlbGVtZW50cy5cclxuICAgKiBAcGFyYW0gbmV3VmFsdWUgLSBuZXcgbnVtYmVyIG9mIHBhcnRpY2xlc1xyXG4gICAqIEBwYXJhbSBvbGRWYWx1ZSAtIG9sZCBudW1iZXIgb2YgcGFydGljbGVzXHJcbiAgICogQHBhcmFtIHBhcnRpY2xlcyAtIGFycmF5IG9mIHBhcnRpY2xlcyB0aGF0IGNvcnJlc3BvbmRzIHRvIG5ld1ZhbHVlIGFuZCBvbGRWYWx1ZVxyXG4gICAqIEBwYXJhbSBjcmVhdGVQYXJ0aWNsZSAtIGNyZWF0ZXMgYSBQYXJ0aWNsZSBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgdXBkYXRlTnVtYmVyT2ZQYXJ0aWNsZXMoIG5ld1ZhbHVlOiBudW1iZXIsIG9sZFZhbHVlOiBudW1iZXIgfCBudWxsLCBwYXJ0aWNsZXM6IFBhcnRpY2xlW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlUGFydGljbGU6IENyZWF0ZVBhcnRpY2xlRnVuY3Rpb24gKTogdm9pZCB7XHJcblxyXG4gICAgaWYgKCBwYXJ0aWNsZXMubGVuZ3RoICE9PSBuZXdWYWx1ZSApIHtcclxuICAgICAgY29uc3QgZGVsdGEgPSBuZXdWYWx1ZSAtICggb2xkVmFsdWUgfHwgMCApO1xyXG4gICAgICBpZiAoIGRlbHRhID4gMCApIHtcclxuICAgICAgICB0aGlzLmFkZFBhcnRpY2xlcyggZGVsdGEsIHBhcnRpY2xlcywgY3JlYXRlUGFydGljbGUgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggZGVsdGEgPCAwICkge1xyXG4gICAgICAgIFBhcnRpY2xlVXRpbHMucmVtb3ZlTGFzdFBhcnRpY2xlcyggLWRlbHRhLCBwYXJ0aWNsZXMgKTtcclxuICAgICAgfVxyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBwYXJ0aWNsZXMubGVuZ3RoID09PSBuZXdWYWx1ZSwgJ3BhcnRpY2xlcyBhcnJheSBpcyBvdXQgb2Ygc3luYycgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgbiBwYXJ0aWNsZXMgdG8gdGhlIGVuZCBvZiB0aGUgc3BlY2lmaWVkIGFycmF5LlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYWRkUGFydGljbGVzKCBuOiBudW1iZXIsIHBhcnRpY2xlczogUGFydGljbGVbXSwgY3JlYXRlUGFydGljbGU6IENyZWF0ZVBhcnRpY2xlRnVuY3Rpb24gKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBuID4gMCwgYGludmFsaWQgbjogJHtufWAgKTtcclxuXHJcbiAgICAvLyBHZXQgdGhlIG1lYW4gdGVtcGVyYXR1cmUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY29tcHV0ZSBpbml0aWFsIHNwZWVkLlxyXG4gICAgY29uc3QgbWVhblRlbXBlcmF0dXJlID0gdGhpcy5nZXRJbml0aWFsVGVtcGVyYXR1cmUoKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG1lYW5UZW1wZXJhdHVyZSA+IDAsIGBpbnZhbGlkIG1lYW5UZW1wZXJhdHVyZTogJHttZWFuVGVtcGVyYXR1cmV9YCApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBuIHRlbXBlcmF0dXJlIHZhbHVlcyB0aGF0IHdpbGwgYmUgdXNlZCB0byBjb21wdXRlIGluaXRpYWwgc3BlZWQuXHJcbiAgICBsZXQgdGVtcGVyYXR1cmVzID0gbnVsbDtcclxuICAgIGlmICggbiA9PT0gMSB8fCAhdGhpcy5jb2xsaXNpb25zRW5hYmxlZFByb3BlcnR5LnZhbHVlICkge1xyXG5cclxuICAgICAgLy8gRm9yIHNpbmdsZSBwYXJ0aWNsZXMsIG9yIGlmIHBhcnRpY2xlLXBhcnRpY2xlIGNvbGxpc2lvbnMgYXJlIGRpc2FibGVkLCB1c2UgdGhlIG1lYW4gdGVtcGVyYXR1cmVcclxuICAgICAgLy8gZm9yIGFsbCBwYXJ0aWNsZXMuIEZvciBncm91cHMgb2YgcGFydGljbGVzLCB0aGlzIHlpZWxkcyB3YXZlLWxpa2UgbW90aW9uLlxyXG4gICAgICB0ZW1wZXJhdHVyZXMgPSBbXTtcclxuICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbjsgaSsrICkge1xyXG4gICAgICAgIHRlbXBlcmF0dXJlc1sgaSBdID0gbWVhblRlbXBlcmF0dXJlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuXHJcbiAgICAgIC8vIEZvciBncm91cHMgb2YgcGFydGljbGVzIHdpdGggcGFydGljbGUtcGFydGljbGUgY29sbGlzaW9ucyBlbmFibGVkLCBjcmVhdGUgc29tZSBkZXZpYXRpb24gaW4gdGhlXHJcbiAgICAgIC8vIHRlbXBlcmF0dXJlIHVzZWQgdG8gY29tcHV0ZSBzcGVlZCwgYnV0IG1haW50YWluIHRoZSBkZXNpcmVkIG1lYW4uICBUaGlzIG1ha2VzIHRoZSBtb3Rpb24gb2YgYSBncm91cFxyXG4gICAgICAvLyBvZiBwYXJ0aWNsZXMgbG9vayBsZXNzIHdhdmUtbGlrZS4gV2UgZG8gdGhpcyBmb3IgdGVtcGVyYXR1cmUgaW5zdGVhZCBvZiBzcGVlZCBiZWNhdXNlIHRlbXBlcmF0dXJlXHJcbiAgICAgIC8vIGluIHRoZSBjb250YWluZXIgaXMgVCA9ICgyLzMpS0UvaywgYW5kIEtFIGlzIGEgZnVuY3Rpb24gb2YgfHZ8XjIsIHNvIGRldmlhdGlvbiBpbiBzcGVlZCB3b3VsZFxyXG4gICAgICAvLyBjaGFuZ2UgdGhlIGRlc2lyZWQgdGVtcGVyYXR1cmUuXHJcbiAgICAgIHRlbXBlcmF0dXJlcyA9IEdhc1Byb3BlcnRpZXNVdGlscy5nZXRHYXVzc2lhblZhbHVlcyggbiwgbWVhblRlbXBlcmF0dXJlLCAwLjIgKiBtZWFuVGVtcGVyYXR1cmUsIDFFLTMgKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0ZW1wZXJhdHVyZXMubGVuZ3RoID09PSBuLFxyXG4gICAgICBgaW5jb3JyZWN0IG51bWJlciBvZiB0ZW1wZXJhdHVyZSB2YWx1ZXMgJHt0ZW1wZXJhdHVyZXMubGVuZ3RofSwgZXhwZWN0ZWQgJHtufWAgKTtcclxuXHJcbiAgICAvLyBWZXJpZnkgdGhhdCBhbGwgdGVtcGVyYXR1cmUgdmFsdWVzIGFyZSA+IDAgS2VsdmluLlxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggXy5ldmVyeSggdGVtcGVyYXR1cmVzLCB0ZW1wZXJhdHVyZSA9PiB0ZW1wZXJhdHVyZSA+IDAgKSxcclxuICAgICAgYGludmFsaWQgdGVtcGVyYXR1cmU6ICR7XHJcbiAgICAgICAgXy5maW5kKCB0ZW1wZXJhdHVyZXMsIHRlbXBlcmF0dXJlID0+IHRlbXBlcmF0dXJlIDw9IDAgKVxyXG4gICAgICB9LCBuPSR7bn0sIG1lYW5UZW1wZXJhdHVyZT0ke21lYW5UZW1wZXJhdHVyZX0sIGNvbGxpc2lvbnNFbmFibGVkPSR7dGhpcy5jb2xsaXNpb25zRW5hYmxlZFByb3BlcnR5LnZhbHVlfWAgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgbiBwYXJ0aWNsZXNcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG47IGkrKyApIHtcclxuXHJcbiAgICAgIGNvbnN0IHBhcnRpY2xlID0gY3JlYXRlUGFydGljbGUoKTtcclxuXHJcbiAgICAgIC8vIFBvc2l0aW9uIHRoZSBwYXJ0aWNsZSBqdXN0IGluc2lkZSB0aGUgY29udGFpbmVyLCBhY2NvdW50aW5nIGZvciByYWRpdXMuXHJcbiAgICAgIHBhcnRpY2xlLnNldFBvc2l0aW9uWFkoIHRoaXMucGFydGljbGVFbnRyeVBvc2l0aW9uLnggLSBwYXJ0aWNsZS5yYWRpdXMsIHRoaXMucGFydGljbGVFbnRyeVBvc2l0aW9uLnkgKTtcclxuXHJcbiAgICAgIC8vIEluaXRpYWwgc3BlZWQsIHx2fCA9IHNxcnQoIDNrVCAvIG0gKVxyXG4gICAgICBjb25zdCBzcGVlZCA9IE1hdGguc3FydCggMyAqIEdhc1Byb3BlcnRpZXNDb25zdGFudHMuQk9MVFpNQU5OICogdGVtcGVyYXR1cmVzWyBpIF0gLyBwYXJ0aWNsZS5tYXNzICk7XHJcblxyXG4gICAgICAvLyBBbmdsZSBpcyByYW5kb21seSBjaG9zZW4gZnJvbSBwdW1wJ3MgZGlzcGVyc2lvbiBhbmdsZSwgcGVycGVuZGljdWxhciB0byByaWdodCB3YWxsIG9mIGNvbnRhaW5lci5cclxuICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLlBJIC0gUEFSVElDTEVfRElTUEVSU0lPTl9BTkdMRSAvIDIgKyBkb3RSYW5kb20ubmV4dERvdWJsZSgpICogUEFSVElDTEVfRElTUEVSU0lPTl9BTkdMRTtcclxuXHJcbiAgICAgIHBhcnRpY2xlLnNldFZlbG9jaXR5UG9sYXIoIHNwZWVkLCBhbmdsZSApO1xyXG5cclxuICAgICAgcGFydGljbGVzLnB1c2goIHBhcnRpY2xlICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWRpc3RyaWJ1dGVzIHRoZSBwYXJ0aWNsZXMgaG9yaXpvbnRhbGx5IGluIHRoZSBjb250YWluZXIuICBUaGlzIGlzIHVzZWQgaW4gdGhlIElkZWFsIHNjcmVlbiwgd2hlcmUgcmVzaXppbmdcclxuICAgKiB0aGUgY29udGFpbmVyIHJlc3VsdHMgaW4gdGhlIHBhcnRpY2xlcyBiZWluZyByZWRpc3RyaWJ1dGVkIGluIHRoZSBuZXcgY29udGFpbmVyIHdpZHRoLlxyXG4gICAqIEBwYXJhbSBzY2FsZVggLSBhbW91bnQgdG8gc2NhbGUgZWFjaCBwYXJ0aWNsZSdzIHggcG9zaXRpb25cclxuICAgKi9cclxuICBwdWJsaWMgcmVkaXN0cmlidXRlUGFydGljbGVzKCBzY2FsZVg6IG51bWJlciApOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHNjYWxlWCA+IDAsIGBpbnZhbGlkIHNjYWxlWDogJHtzY2FsZVh9YCApO1xyXG5cclxuICAgIFBhcnRpY2xlVXRpbHMucmVkaXN0cmlidXRlUGFydGljbGVzKCB0aGlzLmhlYXZ5UGFydGljbGVzLCBzY2FsZVggKTtcclxuICAgIFBhcnRpY2xlVXRpbHMucmVkaXN0cmlidXRlUGFydGljbGVzKCB0aGlzLmxpZ2h0UGFydGljbGVzLCBzY2FsZVggKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkanVzdHMgdmVsb2NpdGllcyBvZiBwYXJ0aWNsZSBpbnNpZGUgdGhlIGNvbnRhaW5lciBzbyB0aGF0IHRoZSByZXN1bHRpbmcgdGVtcGVyYXR1cmUgbWF0Y2hlc1xyXG4gICAqIGEgc3BlY2lmaWVkIHRlbXBlcmF0dXJlLCBpbiBLLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRUZW1wZXJhdHVyZSggdGVtcGVyYXR1cmU6IG51bWJlciApOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBkZXNpcmVkQXZlcmFnZUtFID0gKCAzIC8gMiApICogdGVtcGVyYXR1cmUgKiBHYXNQcm9wZXJ0aWVzQ29uc3RhbnRzLkJPTFRaTUFOTjsgLy8gS0UgPSAoMy8yKVRrXHJcbiAgICBjb25zdCBhY3R1YWxBdmVyYWdlS0UgPSB0aGlzLmdldEF2ZXJhZ2VLaW5ldGljRW5lcmd5KCk7XHJcbiAgICBjb25zdCByYXRpbyA9IGRlc2lyZWRBdmVyYWdlS0UgLyBhY3R1YWxBdmVyYWdlS0U7XHJcblxyXG4gICAgZm9yICggbGV0IGkgPSB0aGlzLmluc2lkZVBhcnRpY2xlQXJyYXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xyXG4gICAgICBjb25zdCBwYXJ0aWNsZXMgPSB0aGlzLmluc2lkZVBhcnRpY2xlQXJyYXlzWyBpIF07XHJcbiAgICAgIGZvciAoIGxldCBqID0gcGFydGljbGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tICkge1xyXG4gICAgICAgIGNvbnN0IHBhcnRpY2xlID0gcGFydGljbGVzWyBqIF07XHJcbiAgICAgICAgY29uc3QgYWN0dWFsUGFydGljbGVLRSA9IHBhcnRpY2xlLmdldEtpbmV0aWNFbmVyZ3koKTtcclxuICAgICAgICBjb25zdCBkZXNpcmVkUGFydGljbGVLRSA9IHJhdGlvICogYWN0dWFsUGFydGljbGVLRTtcclxuICAgICAgICBjb25zdCBkZXNpcmVkU3BlZWQgPSBNYXRoLnNxcnQoIDIgKiBkZXNpcmVkUGFydGljbGVLRSAvIHBhcnRpY2xlLm1hc3MgKTsgLy8gfHZ8ID0gTWF0aC5zcXJ0KCAyICogS0UgLyBtIClcclxuICAgICAgICBwYXJ0aWNsZS5zZXRWZWxvY2l0eU1hZ25pdHVkZSggZGVzaXJlZFNwZWVkICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGF2ZXJhZ2Uga2luZXRpYyBlbmVyZ3kgb2YgdGhlIHBhcnRpY2xlcyBpbiB0aGUgY29udGFpbmVyLCBpbiBBTVUgKiBwbV4yIC8gcHNeMi5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QXZlcmFnZUtpbmV0aWNFbmVyZ3koKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdldFRvdGFsS2luZXRpY0VuZXJneSgpIC8gdGhpcy5udW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgdG90YWwga2luZXRpYyBlbmVyZ3kgb2YgdGhlIHBhcnRpY2xlcyBpbiB0aGUgY29udGFpbmVyLCBpbiBBTVUgKiBwbV4yIC8gcHNeMi5cclxuICAgKi9cclxuICBwcml2YXRlIGdldFRvdGFsS2luZXRpY0VuZXJneSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFBhcnRpY2xlVXRpbHMuZ2V0VG90YWxLaW5ldGljRW5lcmd5KCB0aGlzLmhlYXZ5UGFydGljbGVzICkgK1xyXG4gICAgICAgICAgIFBhcnRpY2xlVXRpbHMuZ2V0VG90YWxLaW5ldGljRW5lcmd5KCB0aGlzLmxpZ2h0UGFydGljbGVzICk7XHJcbiAgfVxyXG59XHJcblxyXG5nYXNQcm9wZXJ0aWVzLnJlZ2lzdGVyKCAnUGFydGljbGVTeXN0ZW0nLCBQYXJ0aWNsZVN5c3RlbSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLHVDQUF1QztBQUVsRSxPQUFPQyw2QkFBNkIsTUFBTSxzREFBc0Q7QUFDaEcsT0FBT0Msa0JBQWtCLE1BQU0sMkNBQTJDO0FBRzFFLE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFHdkQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MsYUFBYSxNQUFNLG9CQUFvQjtBQUU5QyxPQUFPQyxhQUFhLE1BQU0sb0JBQW9CO0FBRTlDLE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7O0FBRTlDOztBQUVBO0FBQ0EsTUFBTUMseUJBQXlCLEdBQUdDLElB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