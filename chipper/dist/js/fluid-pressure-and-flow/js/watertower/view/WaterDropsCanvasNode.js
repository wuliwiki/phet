// Copyright 2014-2021, University of Colorado Boulder

/**
 * A canvas node to render a set of water drops.
 *
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import { CanvasNode } from '../../../../scenery/js/imports.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
class WaterDropsCanvasNode extends CanvasNode {
  /**
   * @param {ObservableArrayDef.<WaterDrop>} waterDrops that need to be rendered
   * @param {FluidColorModel} fluidColorModel that defines the color of the drops
   * @param {ModelViewTransform2} modelViewTransform to convert between view and model values
   * @param {Object} [options]
   */
  constructor(waterDrops, fluidColorModel, modelViewTransform, options) {
    super(options);
    this.waterDrops = waterDrops;
    this.fluidColorModel = fluidColorModel;
    this.modelViewTransform = modelViewTransform;
    this.options = options;
    this.invalidatePaint();
  }

  /**
   * @param {CanvasRenderingContext2D} context
   * @public
   */
  paintCanvas(context) {
    //If the showBounds flag is enabled, it will show the bounds of the canvas
    if (this.options.showBounds) {
      context.fillStyle = 'rgba(50,50,50,0.5)';
      context.fillRect(this.options.canvasBounds.minX, this.options.canvasBounds.minY, this.options.canvasBounds.maxX, this.options.canvasBounds.maxY);
    }
    context.fillStyle = this.fluidColorModel.colorProperty.value.toCSS();
    for (let i = 0; i < this.waterDrops.length; i++) {
      const drop = this.waterDrops.get(i);
      context.beginPath();
      context.arc(this.modelViewTransform.modelToViewX(drop.positionProperty.value.x), this.modelViewTransform.modelToViewY(drop.positionProperty.value.y), this.modelViewTransform.modelToViewDeltaX(drop.radiusProperty.value), 0, 2 * Math.PI, true);
      context.fill();
    }
  }

  /**
   * @public
   */
  step(dt) {
    this.invalidatePaint();
  }
}
fluidPressureAndFlow.register('WaterDropsCanvasNode', WaterDropsCanvasNode);
export default WaterDropsCanvasNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYW52YXNOb2RlIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJXYXRlckRyb3BzQ2FudmFzTm9kZSIsImNvbnN0cnVjdG9yIiwid2F0ZXJEcm9wcyIsImZsdWlkQ29sb3JNb2RlbCIsIm1vZGVsVmlld1RyYW5zZm9ybSIsIm9wdGlvbnMiLCJpbnZhbGlkYXRlUGFpbnQiLCJwYWludENhbnZhcyIsImNvbnRleHQiLCJzaG93Qm91bmRzIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJjYW52YXNCb3VuZHMiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwiY29sb3JQcm9wZXJ0eSIsInZhbHVlIiwidG9DU1MiLCJpIiwibGVuZ3RoIiwiZHJvcCIsImdldCIsImJlZ2luUGF0aCIsImFyYyIsIm1vZGVsVG9WaWV3WCIsInBvc2l0aW9uUHJvcGVydHkiLCJ4IiwibW9kZWxUb1ZpZXdZIiwieSIsIm1vZGVsVG9WaWV3RGVsdGFYIiwicmFkaXVzUHJvcGVydHkiLCJNYXRoIiwiUEkiLCJmaWxsIiwic3RlcCIsImR0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYXRlckRyb3BzQ2FudmFzTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGNhbnZhcyBub2RlIHRvIHJlbmRlciBhIHNldCBvZiB3YXRlciBkcm9wcy5cclxuICpcclxuICogQGF1dGhvciBTaWRkaGFydGhhIENoaW50aGFwYWxseSAoQWN0dWFsIENvbmNlcHRzKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENhbnZhc05vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZmx1aWRQcmVzc3VyZUFuZEZsb3cgZnJvbSAnLi4vLi4vZmx1aWRQcmVzc3VyZUFuZEZsb3cuanMnO1xyXG5cclxuY2xhc3MgV2F0ZXJEcm9wc0NhbnZhc05vZGUgZXh0ZW5kcyBDYW52YXNOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtPYnNlcnZhYmxlQXJyYXlEZWYuPFdhdGVyRHJvcD59IHdhdGVyRHJvcHMgdGhhdCBuZWVkIHRvIGJlIHJlbmRlcmVkXHJcbiAgICogQHBhcmFtIHtGbHVpZENvbG9yTW9kZWx9IGZsdWlkQ29sb3JNb2RlbCB0aGF0IGRlZmluZXMgdGhlIGNvbG9yIG9mIHRoZSBkcm9wc1xyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtIHRvIGNvbnZlcnQgYmV0d2VlbiB2aWV3IGFuZCBtb2RlbCB2YWx1ZXNcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHdhdGVyRHJvcHMsIGZsdWlkQ29sb3JNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtLCBvcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy53YXRlckRyb3BzID0gd2F0ZXJEcm9wcztcclxuICAgIHRoaXMuZmx1aWRDb2xvck1vZGVsID0gZmx1aWRDb2xvck1vZGVsO1xyXG4gICAgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0gPSBtb2RlbFZpZXdUcmFuc2Zvcm07XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIHRoaXMuaW52YWxpZGF0ZVBhaW50KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dFxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBwYWludENhbnZhcyggY29udGV4dCApIHtcclxuXHJcbiAgICAvL0lmIHRoZSBzaG93Qm91bmRzIGZsYWcgaXMgZW5hYmxlZCwgaXQgd2lsbCBzaG93IHRoZSBib3VuZHMgb2YgdGhlIGNhbnZhc1xyXG4gICAgaWYgKCB0aGlzLm9wdGlvbnMuc2hvd0JvdW5kcyApIHtcclxuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSg1MCw1MCw1MCwwLjUpJztcclxuICAgICAgY29udGV4dC5maWxsUmVjdCggdGhpcy5vcHRpb25zLmNhbnZhc0JvdW5kcy5taW5YLCB0aGlzLm9wdGlvbnMuY2FudmFzQm91bmRzLm1pblksIHRoaXMub3B0aW9ucy5jYW52YXNCb3VuZHMubWF4WCwgdGhpcy5vcHRpb25zLmNhbnZhc0JvdW5kcy5tYXhZICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmZsdWlkQ29sb3JNb2RlbC5jb2xvclByb3BlcnR5LnZhbHVlLnRvQ1NTKCk7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLndhdGVyRHJvcHMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIGNvbnN0IGRyb3AgPSB0aGlzLndhdGVyRHJvcHMuZ2V0KCBpICk7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuYXJjKCB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIGRyb3AucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS54ICksIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggZHJvcC5wb3NpdGlvblByb3BlcnR5LnZhbHVlLnkgKSwgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVgoIGRyb3AucmFkaXVzUHJvcGVydHkudmFsdWUgKSwgMCwgMiAqIE1hdGguUEksIHRydWUgKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCggZHQgKSB7XHJcbiAgICB0aGlzLmludmFsaWRhdGVQYWludCgpO1xyXG4gIH1cclxufVxyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdXYXRlckRyb3BzQ2FudmFzTm9kZScsIFdhdGVyRHJvcHNDYW52YXNOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFdhdGVyRHJvcHNDYW52YXNOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxVQUFVLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUVoRSxNQUFNQyxvQkFBb0IsU0FBU0YsVUFBVSxDQUFDO0VBRTVDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxXQUFXQSxDQUFFQyxVQUFVLEVBQUVDLGVBQWUsRUFBRUMsa0JBQWtCLEVBQUVDLE9BQU8sRUFBRztJQUV0RSxLQUFLLENBQUVBLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNILFVBQVUsR0FBR0EsVUFBVTtJQUM1QixJQUFJLENBQUNDLGVBQWUsR0FBR0EsZUFBZTtJQUN0QyxJQUFJLENBQUNDLGtCQUFrQixHQUFHQSxrQkFBa0I7SUFDNUMsSUFBSSxDQUFDQyxPQUFPLEdBQUdBLE9BQU87SUFFdEIsSUFBSSxDQUFDQyxlQUFlLENBQUMsQ0FBQztFQUN4Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxPQUFPLEVBQUc7SUFFckI7SUFDQSxJQUFLLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxVQUFVLEVBQUc7TUFDN0JELE9BQU8sQ0FBQ0UsU0FBUyxHQUFHLG9CQUFvQjtNQUN4Q0YsT0FBTyxDQUFDRyxRQUFRLENBQUUsSUFBSSxDQUFDTixPQUFPLENBQUNPLFlBQVksQ0FBQ0MsSUFBSSxFQUFFLElBQUksQ0FBQ1IsT0FBTyxDQUFDTyxZQUFZLENBQUNFLElBQUksRUFBRSxJQUFJLENBQUNULE9BQU8sQ0FBQ08sWUFBWSxDQUFDRyxJQUFJLEVBQUUsSUFBSSxDQUFDVixPQUFPLENBQUNPLFlBQVksQ0FBQ0ksSUFBSyxDQUFDO0lBQ3BKO0lBRUFSLE9BQU8sQ0FBQ0UsU0FBUyxHQUFHLElBQUksQ0FBQ1AsZUFBZSxDQUFDYyxhQUFhLENBQUNDLEtBQUssQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDcEUsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDbEIsVUFBVSxDQUFDbUIsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRztNQUNqRCxNQUFNRSxJQUFJLEdBQUcsSUFBSSxDQUFDcEIsVUFBVSxDQUFDcUIsR0FBRyxDQUFFSCxDQUFFLENBQUM7TUFDckNaLE9BQU8sQ0FBQ2dCLFNBQVMsQ0FBQyxDQUFDO01BQ25CaEIsT0FBTyxDQUFDaUIsR0FBRyxDQUFFLElBQUksQ0FBQ3JCLGtCQUFrQixDQUFDc0IsWUFBWSxDQUFFSixJQUFJLENBQUNLLGdCQUFnQixDQUFDVCxLQUFLLENBQUNVLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQ3hCLGtCQUFrQixDQUFDeUIsWUFBWSxDQUFFUCxJQUFJLENBQUNLLGdCQUFnQixDQUFDVCxLQUFLLENBQUNZLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQzFCLGtCQUFrQixDQUFDMkIsaUJBQWlCLENBQUVULElBQUksQ0FBQ1UsY0FBYyxDQUFDZCxLQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHZSxJQUFJLENBQUNDLEVBQUUsRUFBRSxJQUFLLENBQUM7TUFDelAxQixPQUFPLENBQUMyQixJQUFJLENBQUMsQ0FBQztJQUNoQjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNFQyxJQUFJQSxDQUFFQyxFQUFFLEVBQUc7SUFDVCxJQUFJLENBQUMvQixlQUFlLENBQUMsQ0FBQztFQUN4QjtBQUNGO0FBRUFQLG9CQUFvQixDQUFDdUMsUUFBUSxDQUFFLHNCQUFzQixFQUFFdEMsb0JBQXFCLENBQUM7QUFDN0UsZUFBZUEsb0JBQW9CIn0=