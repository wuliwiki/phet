// Copyright 2014-2020, University of Colorado Boulder

/**
 * Water drop model
 *
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Property from '../../../../axon/js/Property.js';
import Utils from '../../../../dot/js/Utils.js';
import Constants from '../../common/Constants.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
class WaterDrop {
  /**
   * @param {Vector2} position of the water drop
   * @param {Vector2} velocity of the water drop
   * @param {number} volume of the water drop in m3
   */
  constructor(position, velocity, volume) {
    this.positionProperty = new Property(position);
    this.velocityProperty = new Property(velocity);
    this.volumeProperty = new Property(volume);

    // node holds a reference to the waterdrop node. This is used to remove the view element when the water drop is no longer necessary.
    // This is a shortcut to prevent having removal listeners for individual drops.
    this.node = null;
    this.radiusProperty = new DerivedProperty([this.volumeProperty], volume => {
      return Utils.cubeRoot(3 * volume / (4 * Math.PI));
    });
  }

  /**
   * @public
   */
  step(dt) {
    //Math is done component-wise to avoid too many allocations, see https://github.com/phetsims/fluid-pressure-and-flow/issues/46
    // v_f = v_i + a * dt
    const accelerationY = -Constants.EARTH_GRAVITY;
    const initialVelocityX = this.velocityProperty.value.x;
    const initialVelocityY = this.velocityProperty.value.y;
    this.velocityProperty.value.setY(this.velocityProperty.value.y + accelerationY * dt);
    this.velocityProperty._notifyListeners(); // TODO: don't call this private method

    // d = (v_f + v_i) * dt/2; assuming constant acceleration
    const displacementX = (this.velocityProperty.value.x + initialVelocityX) * dt / 2;
    const displacementY = (this.velocityProperty.value.y + initialVelocityY) * dt / 2;
    this.positionProperty.value.setXY(this.positionProperty.value.x + displacementX, this.positionProperty.value.y + displacementY);
    this.positionProperty._notifyListeners(); // TODO: don't call this private method
  }

  /**
   * Checks if the given point is within this water point.
   * @param {Vector2} point
   * @public
   */
  contains(point) {
    return point.distanceXY(this.positionProperty.value.x, this.positionProperty.value.y) < this.radius;
  }
}
fluidPressureAndFlow.register('WaterDrop', WaterDrop);
export default WaterDrop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJQcm9wZXJ0eSIsIlV0aWxzIiwiQ29uc3RhbnRzIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJXYXRlckRyb3AiLCJjb25zdHJ1Y3RvciIsInBvc2l0aW9uIiwidmVsb2NpdHkiLCJ2b2x1bWUiLCJwb3NpdGlvblByb3BlcnR5IiwidmVsb2NpdHlQcm9wZXJ0eSIsInZvbHVtZVByb3BlcnR5Iiwibm9kZSIsInJhZGl1c1Byb3BlcnR5IiwiY3ViZVJvb3QiLCJNYXRoIiwiUEkiLCJzdGVwIiwiZHQiLCJhY2NlbGVyYXRpb25ZIiwiRUFSVEhfR1JBVklUWSIsImluaXRpYWxWZWxvY2l0eVgiLCJ2YWx1ZSIsIngiLCJpbml0aWFsVmVsb2NpdHlZIiwieSIsInNldFkiLCJfbm90aWZ5TGlzdGVuZXJzIiwiZGlzcGxhY2VtZW50WCIsImRpc3BsYWNlbWVudFkiLCJzZXRYWSIsImNvbnRhaW5zIiwicG9pbnQiLCJkaXN0YW5jZVhZIiwicmFkaXVzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYXRlckRyb3AuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogV2F0ZXIgZHJvcCBtb2RlbFxyXG4gKlxyXG4gKiBAYXV0aG9yIFNpZGRoYXJ0aGEgQ2hpbnRoYXBhbGx5IChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBmbHVpZFByZXNzdXJlQW5kRmxvdyBmcm9tICcuLi8uLi9mbHVpZFByZXNzdXJlQW5kRmxvdy5qcyc7XHJcblxyXG5jbGFzcyBXYXRlckRyb3Age1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gcG9zaXRpb24gb2YgdGhlIHdhdGVyIGRyb3BcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IHZlbG9jaXR5IG9mIHRoZSB3YXRlciBkcm9wXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZvbHVtZSBvZiB0aGUgd2F0ZXIgZHJvcCBpbiBtM1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwb3NpdGlvbiwgdmVsb2NpdHksIHZvbHVtZSApIHtcclxuXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHBvc2l0aW9uICk7XHJcbiAgICB0aGlzLnZlbG9jaXR5UHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHZlbG9jaXR5ICk7XHJcbiAgICB0aGlzLnZvbHVtZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCB2b2x1bWUgKTtcclxuXHJcbiAgICAvLyBub2RlIGhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZSB3YXRlcmRyb3Agbm9kZS4gVGhpcyBpcyB1c2VkIHRvIHJlbW92ZSB0aGUgdmlldyBlbGVtZW50IHdoZW4gdGhlIHdhdGVyIGRyb3AgaXMgbm8gbG9uZ2VyIG5lY2Vzc2FyeS5cclxuICAgIC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBwcmV2ZW50IGhhdmluZyByZW1vdmFsIGxpc3RlbmVycyBmb3IgaW5kaXZpZHVhbCBkcm9wcy5cclxuICAgIHRoaXMubm9kZSA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5yYWRpdXNQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy52b2x1bWVQcm9wZXJ0eSBdLCB2b2x1bWUgPT4ge1xyXG4gICAgICByZXR1cm4gVXRpbHMuY3ViZVJvb3QoICggMyAqIHZvbHVtZSApIC8gKCA0ICogTWF0aC5QSSApICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCggZHQgKSB7XHJcblxyXG4gICAgLy9NYXRoIGlzIGRvbmUgY29tcG9uZW50LXdpc2UgdG8gYXZvaWQgdG9vIG1hbnkgYWxsb2NhdGlvbnMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZmx1aWQtcHJlc3N1cmUtYW5kLWZsb3cvaXNzdWVzLzQ2XHJcbiAgICAvLyB2X2YgPSB2X2kgKyBhICogZHRcclxuICAgIGNvbnN0IGFjY2VsZXJhdGlvblkgPSAtQ29uc3RhbnRzLkVBUlRIX0dSQVZJVFk7XHJcblxyXG4gICAgY29uc3QgaW5pdGlhbFZlbG9jaXR5WCA9IHRoaXMudmVsb2NpdHlQcm9wZXJ0eS52YWx1ZS54O1xyXG4gICAgY29uc3QgaW5pdGlhbFZlbG9jaXR5WSA9IHRoaXMudmVsb2NpdHlQcm9wZXJ0eS52YWx1ZS55O1xyXG5cclxuICAgIHRoaXMudmVsb2NpdHlQcm9wZXJ0eS52YWx1ZS5zZXRZKCB0aGlzLnZlbG9jaXR5UHJvcGVydHkudmFsdWUueSArIGFjY2VsZXJhdGlvblkgKiBkdCApO1xyXG4gICAgdGhpcy52ZWxvY2l0eVByb3BlcnR5Ll9ub3RpZnlMaXN0ZW5lcnMoKTsgLy8gVE9ETzogZG9uJ3QgY2FsbCB0aGlzIHByaXZhdGUgbWV0aG9kXHJcblxyXG4gICAgLy8gZCA9ICh2X2YgKyB2X2kpICogZHQvMjsgYXNzdW1pbmcgY29uc3RhbnQgYWNjZWxlcmF0aW9uXHJcbiAgICBjb25zdCBkaXNwbGFjZW1lbnRYID0gKCB0aGlzLnZlbG9jaXR5UHJvcGVydHkudmFsdWUueCArIGluaXRpYWxWZWxvY2l0eVggKSAqIGR0IC8gMjtcclxuICAgIGNvbnN0IGRpc3BsYWNlbWVudFkgPSAoIHRoaXMudmVsb2NpdHlQcm9wZXJ0eS52YWx1ZS55ICsgaW5pdGlhbFZlbG9jaXR5WSApICogZHQgLyAyO1xyXG5cclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS5zZXRYWSggdGhpcy5wb3NpdGlvblByb3BlcnR5LnZhbHVlLnggKyBkaXNwbGFjZW1lbnRYLCB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUueSArIGRpc3BsYWNlbWVudFkgKTtcclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5fbm90aWZ5TGlzdGVuZXJzKCk7IC8vIFRPRE86IGRvbid0IGNhbGwgdGhpcyBwcml2YXRlIG1ldGhvZFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBwb2ludCBpcyB3aXRoaW4gdGhpcyB3YXRlciBwb2ludC5cclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IHBvaW50XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNvbnRhaW5zKCBwb2ludCApIHtcclxuICAgIHJldHVybiBwb2ludC5kaXN0YW5jZVhZKCB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUueCwgdGhpcy5wb3NpdGlvblByb3BlcnR5LnZhbHVlLnkgKSA8IHRoaXMucmFkaXVzO1xyXG4gIH1cclxufVxyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdXYXRlckRyb3AnLCBXYXRlckRyb3AgKTtcclxuZXhwb3J0IGRlZmF1bHQgV2F0ZXJEcm9wOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxTQUFTLE1BQU0sMkJBQTJCO0FBQ2pELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUVoRSxNQUFNQyxTQUFTLENBQUM7RUFDZDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUc7SUFFeEMsSUFBSSxD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