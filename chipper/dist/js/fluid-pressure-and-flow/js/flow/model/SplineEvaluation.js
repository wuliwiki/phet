// Copyright 2014-2021, University of Colorado Boulder

/**
 * Use these modified variants of numeric.js spline code because they are much faster!
 * Code copied from numeric.js and hence licensed under MIT
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';

//The most important function for this sim in numeric.js is just too slow because it uses tensor versions of all functions.
//This version inlines everything.
function _at(spline, x1, p) {
  const x = spline.x;
  const yl = spline.yl;
  const yr = spline.yr;
  const kl = spline.kl;
  const kr = spline.kr;
  const a = kl[p] * (x[p + 1] - x[p]) - (yr[p + 1] - yl[p]);
  const b = kr[p + 1] * (x[p] - x[p + 1]) + yr[p + 1] - yl[p];
  const t = (x1 - x[p]) / (x[p + 1] - x[p]);
  const s = t * (1 - t);
  return (1 - t) * yl[p] + t * yr[p + 1] + a * s * (1 - t) + b * s * t;
}
function atNumber(spline, x0) {
  const x = spline.x;
  const n = x.length;
  const floor = Math.floor; //TODO why?
  let p = 0;
  let q = n - 1;
  let mid;
  while (q - p > 1) {
    mid = floor((p + q) / 2);
    if (x[mid] <= x0) {
      p = mid;
    } else {
      q = mid;
    }
  }
  return _at(spline, x0, p);
}
function atArray(spline, x0) {
  const n = x0.length;
  const ret = new Array(n);
  for (let i = n - 1; i !== -1; --i) {
    ret[i] = atNumber(spline, x0[i]);
  }
  return ret;
}
const SplineEvaluation = {
  atNumber: atNumber,
  atArray: atArray
};
fluidPressureAndFlow.register('SplineEvaluation', SplineEvaluation);
export default SplineEvaluation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmbHVpZFByZXNzdXJlQW5kRmxvdyIsIl9hdCIsInNwbGluZSIsIngxIiwicCIsIngiLCJ5bCIsInlyIiwia2wiLCJrciIsImEiLCJiIiwidCIsInMiLCJhdE51bWJlciIsIngwIiwibiIsImxlbmd0aCIsImZsb29yIiwiTWF0aCIsInEiLCJtaWQiLCJhdEFycmF5IiwicmV0IiwiQXJyYXkiLCJpIiwiU3BsaW5lRXZhbHVhdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3BsaW5lRXZhbHVhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBVc2UgdGhlc2UgbW9kaWZpZWQgdmFyaWFudHMgb2YgbnVtZXJpYy5qcyBzcGxpbmUgY29kZSBiZWNhdXNlIHRoZXkgYXJlIG11Y2ggZmFzdGVyIVxyXG4gKiBDb2RlIGNvcGllZCBmcm9tIG51bWVyaWMuanMgYW5kIGhlbmNlIGxpY2Vuc2VkIHVuZGVyIE1JVFxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBmbHVpZFByZXNzdXJlQW5kRmxvdyBmcm9tICcuLi8uLi9mbHVpZFByZXNzdXJlQW5kRmxvdy5qcyc7XHJcblxyXG4vL1RoZSBtb3N0IGltcG9ydGFudCBmdW5jdGlvbiBmb3IgdGhpcyBzaW0gaW4gbnVtZXJpYy5qcyBpcyBqdXN0IHRvbyBzbG93IGJlY2F1c2UgaXQgdXNlcyB0ZW5zb3IgdmVyc2lvbnMgb2YgYWxsIGZ1bmN0aW9ucy5cclxuLy9UaGlzIHZlcnNpb24gaW5saW5lcyBldmVyeXRoaW5nLlxyXG5mdW5jdGlvbiBfYXQoIHNwbGluZSwgeDEsIHAgKSB7XHJcbiAgY29uc3QgeCA9IHNwbGluZS54O1xyXG4gIGNvbnN0IHlsID0gc3BsaW5lLnlsO1xyXG4gIGNvbnN0IHlyID0gc3BsaW5lLnlyO1xyXG4gIGNvbnN0IGtsID0gc3BsaW5lLmtsO1xyXG4gIGNvbnN0IGtyID0gc3BsaW5lLmtyO1xyXG4gIGNvbnN0IGEgPSAoIGtsWyBwIF0gKiAoIHhbIHAgKyAxIF0gLSB4WyBwIF0gKSApIC0gKCB5clsgcCArIDEgXSAtIHlsWyBwIF0gKTtcclxuICBjb25zdCBiID0ga3JbIHAgKyAxIF0gKiAoIHhbIHAgXSAtIHhbIHAgKyAxIF0gKSArIHlyWyBwICsgMSBdIC0geWxbIHAgXTtcclxuICBjb25zdCB0ID0gKCB4MSAtIHhbIHAgXSApIC8gKCB4WyBwICsgMSBdIC0geFsgcCBdICk7XHJcbiAgY29uc3QgcyA9IHQgKiAoIDEgLSB0ICk7XHJcbiAgcmV0dXJuICggKCAxIC0gdCApICogeWxbIHAgXSArIHQgKiB5clsgcCArIDEgXSArXHJcbiAgICAgICAgIGEgKiBzICogKCAxIC0gdCApICkgK1xyXG4gICAgICAgICBiICogcyAqIHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF0TnVtYmVyKCBzcGxpbmUsIHgwICkge1xyXG4gIGNvbnN0IHggPSBzcGxpbmUueDtcclxuICBjb25zdCBuID0geC5sZW5ndGg7XHJcbiAgY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yOyAvL1RPRE8gd2h5P1xyXG4gIGxldCBwID0gMDtcclxuICBsZXQgcSA9IG4gLSAxO1xyXG4gIGxldCBtaWQ7XHJcbiAgd2hpbGUgKCBxIC0gcCA+IDEgKSB7XHJcbiAgICBtaWQgPSBmbG9vciggKCBwICsgcSApIC8gMiApO1xyXG4gICAgaWYgKCB4WyBtaWQgXSA8PSB4MCApIHtcclxuICAgICAgcCA9IG1pZDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBxID0gbWlkO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gX2F0KCBzcGxpbmUsIHgwLCBwICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF0QXJyYXkoIHNwbGluZSwgeDAgKSB7XHJcbiAgY29uc3QgbiA9IHgwLmxlbmd0aDtcclxuICBjb25zdCByZXQgPSBuZXcgQXJyYXkoIG4gKTtcclxuICBmb3IgKCBsZXQgaSA9IG4gLSAxOyBpICE9PSAtMTsgLS1pICkge1xyXG4gICAgcmV0WyBpIF0gPSBhdE51bWJlciggc3BsaW5lLCB4MFsgaSBdICk7XHJcbiAgfVxyXG4gIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmNvbnN0IFNwbGluZUV2YWx1YXRpb24gPSB7IGF0TnVtYmVyOiBhdE51bWJlciwgYXRBcnJheTogYXRBcnJheSB9O1xyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdTcGxpbmVFdmFsdWF0aW9uJywgU3BsaW5lRXZhbHVhdGlvbiApO1xyXG5leHBvcnQgZGVmYXVsdCBTcGxpbmVFdmFsdWF0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLG9CQUFvQixNQUFNLCtCQUErQjs7QUFFaEU7QUFDQTtBQUNBLFNBQVNDLEdBQUdBLENBQUVDLE1BQU0sRUFBRUMsRUFBRSxFQUFFQyxDQUFDLEVBQUc7RUFDNUIsTUFBTUMsQ0FBQyxHQUFHSCxNQUFNLENBQUNHLENBQUM7RUFDbEIsTUFBTUMsRUFBRSxHQUFHSixNQUFNLENBQUNJLEVBQUU7RUFDcEIsTUFBTUMsRUFBRSxHQUFHTCxNQUFNLENBQUNLLEVBQUU7RUFDcEIsTUFBTUMsRUFBRSxHQUFHTixNQUFNLENBQUNNLEVBQUU7RUFDcEIsTUFBTUMsRUFBRSxHQUFHUCxNQUFNLENBQUNPLEVBQUU7RUFDcEIsTUFBTUMsQ0FBQyxHQUFLRixFQUFFLENBQUVKLENBQUMsQ0FBRSxJQUFLQyxDQUFDLENBQUVELENBQUMsR0FBRyxDQUFDLENBQUUsR0FBR0MsQ0FBQyxDQUFFRCxDQUFDLENBQUUsQ0FBRSxJQUFPRyxFQUFFLENBQUVILENBQUMsR0FBRyxDQUFDLENBQUUsR0FBR0UsRUFBRSxDQUFFRixDQUFDLENBQUUsQ0FBRTtFQUMzRSxNQUFNTyxDQUFDLEdBQUdGLEVBQUUsQ0FBRUwsQ0FBQyxH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