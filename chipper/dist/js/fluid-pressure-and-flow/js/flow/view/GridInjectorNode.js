// Copyright 2014-2022, University of Colorado Boulder

/**
 * View for the GridInjectorNode that injects a particle grid into the pipe.
 * The injector looks like a red button with yellow extended background and a tapered funnel at the bottom.
 *
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import Property from '../../../../axon/js/Property.js';
import { Image, Node } from '../../../../scenery/js/imports.js';
import RoundStickyToggleButton from '../../../../sun/js/buttons/RoundStickyToggleButton.js';
import injectorBulbCropped_png from '../../../images/injectorBulbCropped_png.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
const X_OFFSET = 50; //px
const Y_OFFSET = 150; //px

class GridInjectorNode extends Node {
  /**
   * @param {Property.<boolean>} isGridInjectorPressedProperty indicates whether the injector is pressed or not
   * @param {modelViewTransform} modelViewTransform , Transform between model and view coordinate frames
   * @param {Pipe} pipe model of the simulation
   * @param {Object} [options] that can be passed on to the underlying node
   */
  constructor(isGridInjectorPressedProperty, modelViewTransform, pipe, options) {
    super();
    this.modelViewTransform = modelViewTransform;
    this.pipe = pipe;
    this.gridInjectorX = -6; // model value

    const injector = new Image(injectorBulbCropped_png, {
      scale: 0.35
    });
    const redButton = new RoundStickyToggleButton(isGridInjectorPressedProperty, false, true, {
      radius: 25,
      centerX: injector.centerX,
      top: injector.top + 31,
      baseColor: 'red',
      stroke: 'red',
      fill: 'red',
      touchAreaDilation: 10
    });
    this.addChild(injector);
    this.addChild(redButton);
    this.updateGridInjector();
    const isGridInjectorNotPressedProperty = new Property(!isGridInjectorPressedProperty.value, {
      reentrant: true
    });
    isGridInjectorPressedProperty.link(pressed => {
      isGridInjectorNotPressedProperty.value = !pressed;
    });
    isGridInjectorNotPressedProperty.link(notPressed => {
      isGridInjectorPressedProperty.value = !notPressed;
    });
    isGridInjectorNotPressedProperty.linkAttribute(redButton, 'enabled');
    this.mutate(options);
  }

  /**
   * reposition the grid injector
   * @public
   */
  updateGridInjector() {
    this.setTranslation(this.modelViewTransform.modelToViewX(this.gridInjectorX) - X_OFFSET, this.modelViewTransform.modelToViewY(this.pipe.getCrossSection(this.gridInjectorX).yTop) - Y_OFFSET);
  }
}
fluidPressureAndFlow.register('GridInjectorNode', GridInjectorNode);
export default GridInjectorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkltYWdlIiwiTm9kZSIsIlJvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uIiwiaW5qZWN0b3JCdWxiQ3JvcHBlZF9wbmciLCJmbHVpZFByZXNzdXJlQW5kRmxvdyIsIlhfT0ZGU0VUIiwiWV9PRkZTRVQiLCJHcmlkSW5qZWN0b3JOb2RlIiwiY29uc3RydWN0b3IiLCJpc0dyaWRJbmplY3RvclByZXNzZWRQcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInBpcGUiLCJvcHRpb25zIiwiZ3JpZEluamVjdG9yWCIsImluamVjdG9yIiwic2NhbGUiLCJyZWRCdXR0b24iLCJyYWRpdXMiLCJjZW50ZXJYIiwidG9wIiwiYmFzZUNvbG9yIiwic3Ryb2tlIiwiZmlsbCIsInRvdWNoQXJlYURpbGF0aW9uIiwiYWRkQ2hpbGQiLCJ1cGRhdGVHcmlkSW5qZWN0b3IiLCJpc0dyaWRJbmplY3Rvck5vdFByZXNzZWRQcm9wZXJ0eSIsInZhbHVlIiwicmVlbnRyYW50IiwibGluayIsInByZXNzZWQiLCJub3RQcmVzc2VkIiwibGlua0F0dHJpYnV0ZSIsIm11dGF0ZSIsInNldFRyYW5zbGF0aW9uIiwibW9kZWxUb1ZpZXdYIiwibW9kZWxUb1ZpZXdZIiwiZ2V0Q3Jvc3NTZWN0aW9uIiwieVRvcCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR3JpZEluamVjdG9yTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IGZvciB0aGUgR3JpZEluamVjdG9yTm9kZSB0aGF0IGluamVjdHMgYSBwYXJ0aWNsZSBncmlkIGludG8gdGhlIHBpcGUuXHJcbiAqIFRoZSBpbmplY3RvciBsb29rcyBsaWtlIGEgcmVkIGJ1dHRvbiB3aXRoIHllbGxvdyBleHRlbmRlZCBiYWNrZ3JvdW5kIGFuZCBhIHRhcGVyZWQgZnVubmVsIGF0IHRoZSBib3R0b20uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IEltYWdlLCBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uLmpzJztcclxuaW1wb3J0IGluamVjdG9yQnVsYkNyb3BwZWRfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9pbmplY3RvckJ1bGJDcm9wcGVkX3BuZy5qcyc7XHJcbmltcG9ydCBmbHVpZFByZXNzdXJlQW5kRmxvdyBmcm9tICcuLi8uLi9mbHVpZFByZXNzdXJlQW5kRmxvdy5qcyc7XHJcblxyXG5jb25zdCBYX09GRlNFVCA9IDUwOyAvL3B4XHJcbmNvbnN0IFlfT0ZGU0VUID0gMTUwOyAvL3B4XHJcblxyXG5jbGFzcyBHcmlkSW5qZWN0b3JOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSBpc0dyaWRJbmplY3RvclByZXNzZWRQcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgaW5qZWN0b3IgaXMgcHJlc3NlZCBvciBub3RcclxuICAgKiBAcGFyYW0ge21vZGVsVmlld1RyYW5zZm9ybX0gbW9kZWxWaWV3VHJhbnNmb3JtICwgVHJhbnNmb3JtIGJldHdlZW4gbW9kZWwgYW5kIHZpZXcgY29vcmRpbmF0ZSBmcmFtZXNcclxuICAgKiBAcGFyYW0ge1BpcGV9IHBpcGUgbW9kZWwgb2YgdGhlIHNpbXVsYXRpb25cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIHRoYXQgY2FuIGJlIHBhc3NlZCBvbiB0byB0aGUgdW5kZXJseWluZyBub2RlXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGlzR3JpZEluamVjdG9yUHJlc3NlZFByb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHBpcGUsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSA9IG1vZGVsVmlld1RyYW5zZm9ybTtcclxuICAgIHRoaXMucGlwZSA9IHBpcGU7XHJcbiAgICB0aGlzLmdyaWRJbmplY3RvclggPSAtNjsgLy8gbW9kZWwgdmFsdWVcclxuXHJcbiAgICBjb25zdCBpbmplY3RvciA9IG5ldyBJbWFnZSggaW5qZWN0b3JCdWxiQ3JvcHBlZF9wbmcsIHsgc2NhbGU6IDAuMzUgfSApO1xyXG5cclxuICAgIGNvbnN0IHJlZEJ1dHRvbiA9IG5ldyBSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbiggaXNHcmlkSW5qZWN0b3JQcmVzc2VkUHJvcGVydHksIGZhbHNlLCB0cnVlLCB7XHJcbiAgICAgIHJhZGl1czogMjUsXHJcbiAgICAgIGNlbnRlclg6IGluamVjdG9yLmNlbnRlclgsXHJcbiAgICAgIHRvcDogaW5qZWN0b3IudG9wICsgMzEsXHJcbiAgICAgIGJhc2VDb2xvcjogJ3JlZCcsXHJcbiAgICAgIHN0cm9rZTogJ3JlZCcsXHJcbiAgICAgIGZpbGw6ICdyZWQnLFxyXG4gICAgICB0b3VjaEFyZWFEaWxhdGlvbjogMTBcclxuICAgIH0gKTtcclxuXHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggaW5qZWN0b3IgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHJlZEJ1dHRvbiApO1xyXG5cclxuICAgIHRoaXMudXBkYXRlR3JpZEluamVjdG9yKCk7XHJcblxyXG4gICAgY29uc3QgaXNHcmlkSW5qZWN0b3JOb3RQcmVzc2VkUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoICFpc0dyaWRJbmplY3RvclByZXNzZWRQcm9wZXJ0eS52YWx1ZSwgeyByZWVudHJhbnQ6IHRydWUgfSApO1xyXG4gICAgaXNHcmlkSW5qZWN0b3JQcmVzc2VkUHJvcGVydHkubGluayggcHJlc3NlZCA9PiB7XHJcbiAgICAgIGlzR3JpZEluamVjdG9yTm90UHJlc3NlZFByb3BlcnR5LnZhbHVlID0gIXByZXNzZWQ7XHJcbiAgICB9ICk7XHJcbiAgICBpc0dyaWRJbmplY3Rvck5vdFByZXNzZWRQcm9wZXJ0eS5saW5rKCBub3RQcmVzc2VkID0+IHtcclxuICAgICAgaXNHcmlkSW5qZWN0b3JQcmVzc2VkUHJvcGVydHkudmFsdWUgPSAhbm90UHJlc3NlZDtcclxuICAgIH0gKTtcclxuICAgIGlzR3JpZEluamVjdG9yTm90UHJlc3NlZFByb3BlcnR5LmxpbmtBdHRyaWJ1dGUoIHJlZEJ1dHRvbiwgJ2VuYWJsZWQnICk7XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiByZXBvc2l0aW9uIHRoZSBncmlkIGluamVjdG9yXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHVwZGF0ZUdyaWRJbmplY3RvcigpIHtcclxuICAgIHRoaXMuc2V0VHJhbnNsYXRpb24oIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggdGhpcy5ncmlkSW5qZWN0b3JYICkgLSBYX09GRlNFVCxcclxuICAgICAgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCB0aGlzLnBpcGUuZ2V0Q3Jvc3NTZWN0aW9uKCB0aGlzLmdyaWRJbmplY3RvclggKS55VG9wICkgLSBZX09GRlNFVCApO1xyXG4gIH1cclxufVxyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdHcmlkSW5qZWN0b3JOb2RlJywgR3JpZEluamVjdG9yTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBHcmlkSW5qZWN0b3JOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9B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