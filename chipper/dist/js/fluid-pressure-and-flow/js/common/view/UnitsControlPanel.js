// Copyright 2014-2022, University of Colorado Boulder

/**
 * Control panel for selecting unit systems. The available options are english, metric and atmospheres.
 *
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import AquaRadioButton from '../../../../sun/js/AquaRadioButton.js';
import Panel from '../../../../sun/js/Panel.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
import FluidPressureAndFlowStrings from '../../FluidPressureAndFlowStrings.js';
const atmospheresString = FluidPressureAndFlowStrings.atmospheres;
const englishString = FluidPressureAndFlowStrings.english;
const metricString = FluidPressureAndFlowStrings.metric;
const unitsString = FluidPressureAndFlowStrings.units;

// constants
const RADIO_BUTTON_TOUCH_DILATION_Y = 2; // empirically determined

class UnitsControlPanel extends Panel {
  /**
   * @param {Property.<string>} measureUnitsProperty can take values 'english', 'metric' or 'atmospheres'
   * @param {Object} [options]
   */
  constructor(measureUnitsProperty, options) {
    options = merge({
      fill: '#f2fa6a',
      stroke: 'gray',
      lineWidth: 1,
      resize: false,
      align: 'left'
    }, options);
    const maxControlWidth = options.maxWidth * 0.9 || 200; // the fallback value is fairly arbitrary

    const titleText = new Text(unitsString, {
      font: new PhetFont(12),
      fontWeight: 'bold',
      maxWidth: maxControlWidth
    });
    const AQUA_RADIO_BUTTON_OPTIONS = {
      radius: 6,
      font: new PhetFont(12)
    };
    const createButtonTextNode = text => {
      return new Text(text, {
        font: new PhetFont(12),
        maxWidth: maxControlWidth * 0.8
      });
    };

    // Create the radio buttons
    const metricRadio = new AquaRadioButton(measureUnitsProperty, 'metric', createButtonTextNode(metricString), AQUA_RADIO_BUTTON_OPTIONS);
    const atmosphereRadio = new AquaRadioButton(measureUnitsProperty, 'atmosphere', createButtonTextNode(atmospheresString), AQUA_RADIO_BUTTON_OPTIONS);
    const englishRadio = new AquaRadioButton(measureUnitsProperty, 'english', createButtonTextNode(englishString), AQUA_RADIO_BUTTON_OPTIONS);

    //touch areas
    metricRadio.touchArea = metricRadio.bounds.dilatedY(RADIO_BUTTON_TOUCH_DILATION_Y);
    atmosphereRadio.touchArea = atmosphereRadio.bounds.dilatedY(RADIO_BUTTON_TOUCH_DILATION_Y);
    englishRadio.touchArea = englishRadio.bounds.dilatedY(RADIO_BUTTON_TOUCH_DILATION_Y);
    const content = new VBox({
      spacing: 5,
      children: [titleText, metricRadio, atmosphereRadio, englishRadio],
      align: 'left'
    });
    super(content, options);
  }
}
fluidPressureAndFlow.register('UnitsControlPanel', UnitsControlPanel);
export default UnitsControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiVGV4dCIsIlZCb3giLCJBcXVhUmFkaW9CdXR0b24iLCJQYW5lbCIsImZsdWlkUHJlc3N1cmVBbmRGbG93IiwiRmx1aWRQcmVzc3VyZUFuZEZsb3dTdHJpbmdzIiwiYXRtb3NwaGVyZXNTdHJpbmciLCJhdG1vc3BoZXJlcyIsImVuZ2xpc2hTdHJpbmciLCJlbmdsaXNoIiwibWV0cmljU3RyaW5nIiwibWV0cmljIiwidW5pdHNTdHJpbmciLCJ1bml0cyIsIlJBRElPX0JVVFRPTl9UT1VDSF9ESUxBVElPTl9ZIiwiVW5pdHNDb250cm9sUGFuZWwiLCJjb25zdHJ1Y3RvciIsIm1lYXN1cmVVbml0c1Byb3BlcnR5Iiwib3B0aW9ucyIsImZpbGwiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJyZXNpemUiLCJhbGlnbiIsIm1heENvbnRyb2xXaWR0aCIsIm1heFdpZHRoIiwidGl0bGVUZXh0IiwiZm9udCIsImZvbnRXZWlnaHQiLCJBUVVBX1JBRElPX0JVVFRPTl9PUFRJT05TIiwicmFkaXVzIiwiY3JlYXRlQnV0dG9uVGV4dE5vZGUiLCJ0ZXh0IiwibWV0cmljUmFkaW8iLCJhdG1vc3BoZXJlUmFkaW8iLCJlbmdsaXNoUmFkaW8iLCJ0b3VjaEFyZWEiLCJib3VuZHMiLCJkaWxhdGVkWSIsImNvbnRlbnQiLCJzcGFjaW5nIiwiY2hpbGRyZW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVuaXRzQ29udHJvbFBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2wgcGFuZWwgZm9yIHNlbGVjdGluZyB1bml0IHN5c3RlbXMuIFRoZSBhdmFpbGFibGUgb3B0aW9ucyBhcmUgZW5nbGlzaCwgbWV0cmljIGFuZCBhdG1vc3BoZXJlcy5cclxuICpcclxuICogQGF1dGhvciBTaWRkaGFydGhhIENoaW50aGFwYWxseSAoQWN0dWFsIENvbmNlcHRzKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBBcXVhUmFkaW9CdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FxdWFSYWRpb0J1dHRvbi5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgZmx1aWRQcmVzc3VyZUFuZEZsb3cgZnJvbSAnLi4vLi4vZmx1aWRQcmVzc3VyZUFuZEZsb3cuanMnO1xyXG5pbXBvcnQgRmx1aWRQcmVzc3VyZUFuZEZsb3dTdHJpbmdzIGZyb20gJy4uLy4uL0ZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBhdG1vc3BoZXJlc1N0cmluZyA9IEZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncy5hdG1vc3BoZXJlcztcclxuY29uc3QgZW5nbGlzaFN0cmluZyA9IEZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncy5lbmdsaXNoO1xyXG5jb25zdCBtZXRyaWNTdHJpbmcgPSBGbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MubWV0cmljO1xyXG5jb25zdCB1bml0c1N0cmluZyA9IEZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncy51bml0cztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBSQURJT19CVVRUT05fVE9VQ0hfRElMQVRJT05fWSA9IDI7IC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuXHJcbmNsYXNzIFVuaXRzQ29udHJvbFBhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxzdHJpbmc+fSBtZWFzdXJlVW5pdHNQcm9wZXJ0eSBjYW4gdGFrZSB2YWx1ZXMgJ2VuZ2xpc2gnLCAnbWV0cmljJyBvciAnYXRtb3NwaGVyZXMnXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtZWFzdXJlVW5pdHNQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgZmlsbDogJyNmMmZhNmEnLFxyXG4gICAgICBzdHJva2U6ICdncmF5JyxcclxuICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICByZXNpemU6IGZhbHNlLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgbWF4Q29udHJvbFdpZHRoID0gKCBvcHRpb25zLm1heFdpZHRoICogMC45ICkgfHwgMjAwOyAvLyB0aGUgZmFsbGJhY2sgdmFsdWUgaXMgZmFpcmx5IGFyYml0cmFyeVxyXG5cclxuICAgIGNvbnN0IHRpdGxlVGV4dCA9IG5ldyBUZXh0KCB1bml0c1N0cmluZywge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDEyICksXHJcbiAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcclxuICAgICAgbWF4V2lkdGg6IG1heENvbnRyb2xXaWR0aFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IEFRVUFfUkFESU9fQlVUVE9OX09QVElPTlMgPSB7IHJhZGl1czogNiwgZm9udDogbmV3IFBoZXRGb250KCAxMiApIH07XHJcbiAgICBjb25zdCBjcmVhdGVCdXR0b25UZXh0Tm9kZSA9IHRleHQgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFRleHQoIHRleHQsIHsgZm9udDogbmV3IFBoZXRGb250KCAxMiApLCBtYXhXaWR0aDogbWF4Q29udHJvbFdpZHRoICogMC44IH0gKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSByYWRpbyBidXR0b25zXHJcbiAgICBjb25zdCBtZXRyaWNSYWRpbyA9IG5ldyBBcXVhUmFkaW9CdXR0b24oIG1lYXN1cmVVbml0c1Byb3BlcnR5LCAnbWV0cmljJywgY3JlYXRlQnV0dG9uVGV4dE5vZGUoIG1ldHJpY1N0cmluZyApLFxyXG4gICAgICBBUVVBX1JBRElPX0JVVFRPTl9PUFRJT05TICk7XHJcbiAgICBjb25zdCBhdG1vc3BoZXJlUmFkaW8gPSBuZXcgQXF1YVJhZGlvQnV0dG9uKCBtZWFzdXJlVW5pdHNQcm9wZXJ0eSwgJ2F0bW9zcGhlcmUnLFxyXG4gICAgICBjcmVhdGVCdXR0b25UZXh0Tm9kZSggYXRtb3NwaGVyZXNTdHJpbmcgKSwgQVFVQV9SQURJT19CVVRUT05fT1BUSU9OUyApO1xyXG4gICAgY29uc3QgZW5nbGlzaFJhZGlvID0gbmV3IEFxdWFSYWRpb0J1dHRvbiggbWVhc3VyZVVuaXRzUHJvcGVydHksICdlbmdsaXNoJywgY3JlYXRlQnV0dG9uVGV4dE5vZGUoIGVuZ2xpc2hTdHJpbmcgKSxcclxuICAgICAgQVFVQV9SQURJT19CVVRUT05fT1BUSU9OUyApO1xyXG5cclxuICAgIC8vdG91Y2ggYXJlYXNcclxuICAgIG1ldHJpY1JhZGlvLnRvdWNoQXJlYSA9IG1ldHJpY1JhZGlvLmJvdW5kcy5kaWxhdGVkWSggUkFESU9fQlVUVE9OX1RPVUNIX0RJTEFUSU9OX1kgKTtcclxuICAgIGF0bW9zcGhlcmVSYWRpby50b3VjaEFyZWEgPSBhdG1vc3BoZXJlUmFkaW8uYm91bmRzLmRpbGF0ZWRZKCBSQURJT19CVVRUT05fVE9VQ0hfRElMQVRJT05fWSApO1xyXG4gICAgZW5nbGlzaFJhZGlvLnRvdWNoQXJlYSA9IGVuZ2xpc2hSYWRpby5ib3VuZHMuZGlsYXRlZFkoIFJBRElPX0JVVFRPTl9UT1VDSF9ESUxBVElPTl9ZICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBWQm94KCB7XHJcbiAgICAgIHNwYWNpbmc6IDUsXHJcbiAgICAgIGNoaWxkcmVuOiBbIHRpdGxlVGV4dCwgbWV0cmljUmFkaW8sIGF0bW9zcGhlcmVSYWRpbywgZW5nbGlzaFJhZGlvIF0sXHJcbiAgICAgIGFsaWduOiAnbGVmdCdcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdVbml0c0NvbnRyb2xQYW5lbCcsIFVuaXRzQ29udHJvbFBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IFVuaXRzQ29udHJvbFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLGVBQWUsTUFBTSx1Q0FBdUM7QUFDbkUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxvQkFBb0IsTUFBTSwrQkFBK0I7QUFDaEUsT0FBT0MsMkJBQTJCLE1BQU0sc0NBQXNDO0FBRTlFLE1BQU1DLGlCQUFpQixHQUFHRCwyQkFBMkIsQ0FBQ0UsV0FBVztBQUNqRSxNQUFNQyxhQUFhLEdBQUdILDJCQUEyQixDQUFDSSxPQUFPO0FBQ3pELE1BQU1DLFlBQVksR0FBR0wsMkJBQTJCLENBQUNNLE1BQU07QUFDdkQsTUFBTUMsV0FBVyxHQUFHUCwyQkFBMkIsQ0FBQ1EsS0FBSzs7QUFFckQ7QUFDQSxNQUFNQyw2QkFBNkIsR0FBRyxDQUFDLENBQUMsQ0FBQzs7QUFFekMsTUFBTUMsaUJBQWlCLFNBQVNaLEtBQUssQ0FBQztFQUVwQztBQUNGO0FBQ0E7QUFDQTtFQUNFYSxXQUFXQSxDQUFFQyxvQkFBb0IsRUFBRUMsT0FBTyxFQUFHO0lBRTNDQSxPQUFPLEdBQUdwQixLQUFLLENBQUU7TUFDZnFCLElBQUksRUFBRSxTQUFTO01BQ2ZDLE1BQU0sRUFBRSxNQUFNO01BQ2RDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLE1BQU0sRUFBRSxLQUFLO01BQ2JDLEtBQUssRUFBRTtJQUNULENBQUMsRUFBRUwsT0FBUSxDQUFDO0lBRVosTUFBTU0sZUFBZSxHQUFLTixPQUFPLENBQUNPLFFBQVEsR0FBRyxHQUFHLElBQU0sR0FBRyxDQUFDLENBQUM7O0lBRTNELE1BQU1DLFNBQVMsR0FBRyxJQUFJMUIsSUFBSSxDQUFFWSxXQUFXLEVBQUU7TUFDdkNlLElBQUksRUFBRSxJQUFJNUIsUUFBUSxDQUFFLEVBQUcsQ0FBQztNQUN4QjZCLFVBQVUsRUFBRSxNQUFNO01BQ2xCSCxRQUFRLEVBQUVEO0lBQ1osQ0FBRSxDQUFDO0lBRUgsTUFBTUsseUJBQXlCLEdBQUc7TUFBRUMsTUFBTSxFQUFFLENBQUM7TUFBRUgsSUFBSSxFQUFFLElBQUk1QixRQUFRLENBQUUsRUFBRztJQUFFLENBQUM7SUFDekUsTUFBTWdDLG9CQUFvQixHQUFHQyxJQUFJLElBQUk7TUFDbkMsT0FBTyxJQUFJaEMsSUFBSSxDQUFFZ0MsSUFBSSxFQUFFO1FBQUVMLElBQUksRUFBRSxJQUFJNUIsUUFBUSxDQUFFLEVBQUcsQ0FBQztRQUFFMEIsUUFBUSxFQUFFRCxlQUFlLEdBQUc7TUFBSSxDQUFFLENBQUM7SUFDeEYsQ0FBQzs7SUFFRDtJQUNBLE1BQU1TLFdBQVcsR0FBRyxJQUFJL0IsZUFBZSxDQUFFZSxvQkFBb0IsRUFBRSxRQUFRLEVBQUVjLG9CQUFvQixDQUFFckIsWUFBYSxDQUFDLEVBQzNHbUIseUJBQTBCLENBQUM7SUFDN0IsTUFBTUssZUFBZSxHQUFHLElBQUloQyxlQUFlLENBQUVlLG9CQUFvQixFQUFFLFlBQVksRUFDN0VjLG9CQUFvQixDQUFFekIsaUJBQWtCLENBQUMsRUFBRXVCLHlCQUEwQixDQUFDO0lBQ3hFLE1BQU1NLFlBQVksR0FBRyxJQUFJakMsZUFBZSxDQUFFZSxvQkFBb0IsRUFBRSxTQUFTLEVBQUVjLG9CQUFvQixDQUFFdkIsYUFBYyxDQUFDLEVBQzlHcUIseUJBQTBCLENBQUM7O0lBRTdCO0lBQ0FJLFdBQVcsQ0FBQ0csU0FBUyxHQUFHSCxXQUFXLENBQUNJLE1BQU0sQ0FBQ0MsUUFBUSxDQUFFeEIsNkJBQThCLENBQUM7SUFDcEZvQixlQUFlLENBQUNFLFNBQVMsR0FBR0YsZUFBZSxDQUFDRyxNQUFNLENBQUNDLFFBQVEsQ0FBRXhCLDZCQUE4QixDQUFDO0lBQzVGcUIsWUFBWSxDQUFDQyxTQUFTLEdBQUdELFlBQVksQ0FBQ0UsTUFBTSxDQUFDQyxRQUFRLENBQUV4Qiw2QkFBOEIsQ0FBQztJQUV0RixNQUFNeUIsT0FBTyxHQUFHLElBQUl0QyxJQUFJLENBQUU7TUFDeEJ1QyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxRQUFRLEVBQUUsQ0FBRWYsU0FBUyxFQUFFTyxXQUFXLEVBQUVDLGVBQWUsRUFBRUMsWUFBWSxDQUFFO01BQ25FWixLQUFLLEVBQUU7SUFDVCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVnQixPQUFPLEVBQUVyQixPQUFRLENBQUM7RUFDM0I7QUFDRjtBQUVBZCxvQkFBb0IsQ0FBQ3NDLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRTNCLGlCQUFrQixDQUFDO0FBQ3ZFLGVBQWVBLGlCQUFpQiJ9