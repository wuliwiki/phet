// Copyright 2013-2022, University of Colorado Boulder

/**
 * View for the grid in Square Pool which shows horizontal lines along the pool indicating the depth.
 * Supports both english and metric units.
 *
 * @author Vasily Shakhov (Mlearner)
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import merge from '../../../../phet-core/js/merge.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import Units from '../../common/model/Units.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
import FluidPressureAndFlowStrings from '../../FluidPressureAndFlowStrings.js';
import GridLinesNode from './GridLinesNode.js';
const readoutFeetString = FluidPressureAndFlowStrings.readoutFeet;
const readoutMetersString = FluidPressureAndFlowStrings.readoutMeters;
class SquarePoolGrid extends Node {
  /**
   * @param {SquarePoolModel} squarePoolModel
   * @param {ModelViewTransform2} modelViewTransform to convert between model and view co-ordinates
   */
  constructor(squarePoolModel, modelViewTransform) {
    super();
    const fontOptions = {
      font: new PhetFont(12),
      fontWeight: 'bold',
      maxWidth: 60
    };
    const poolDimensions = squarePoolModel.poolDimensions;
    // add grid lines
    this.addChild(new GridLinesNode(squarePoolModel.underPressureModel.measureUnitsProperty, modelViewTransform, poolDimensions.x1, poolDimensions.y1, poolDimensions.x2, poolDimensions.y2 - 0.3));

    // meter labels
    const metersLabels = new Node();
    for (let i = 0; i < 4; i++) {
      metersLabels.addChild(new Text(StringUtils.format(readoutMetersString, i), merge({
        right: modelViewTransform.modelToViewX(poolDimensions.x1) - 8,
        centerY: modelViewTransform.modelToViewY(-i)
      }, fontOptions)));
    }

    // feet labels
    const feetLabels = new Node();
    for (let i = 0; i < 11; i++) {
      feetLabels.addChild(new Text(StringUtils.format(readoutFeetString, i), merge({
        right: modelViewTransform.modelToViewX(poolDimensions.x1) - 8,
        centerY: modelViewTransform.modelToViewY(-Units.feetToMeters(i))
      }, fontOptions)));
    }
    this.addChild(metersLabels);
    this.addChild(feetLabels);
    squarePoolModel.underPressureModel.measureUnitsProperty.link(measureUnits => {
      feetLabels.visible = measureUnits === 'english';
      metersLabels.visible = measureUnits !== 'english';
    });
    squarePoolModel.underPressureModel.isGridVisibleProperty.linkAttribute(this, 'visible');
  }
}
fluidPressureAndFlow.register('SquarePoolGrid', SquarePoolGrid);
export default SquarePoolGrid;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlN0cmluZ1V0aWxzIiwiUGhldEZvbnQiLCJOb2RlIiwiVGV4dCIsIlVuaXRzIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJGbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MiLCJHcmlkTGluZXNOb2RlIiwicmVhZG91dEZlZXRTdHJpbmciLCJyZWFkb3V0RmVldCIsInJlYWRvdXRNZXRlcnNTdHJpbmciLCJyZWFkb3V0TWV0ZXJzIiwiU3F1YXJlUG9vbEdyaWQiLCJjb25zdHJ1Y3RvciIsInNxdWFyZVBvb2xNb2RlbCIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImZvbnRPcHRpb25zIiwiZm9udCIsImZvbnRXZWlnaHQiLCJtYXhXaWR0aCIsInBvb2xEaW1lbnNpb25zIiwiYWRkQ2hpbGQiLCJ1bmRlclByZXNzdXJlTW9kZWwiLCJtZWFzdXJlVW5pdHNQcm9wZXJ0eSIsIngxIiwieTEiLCJ4MiIsInkyIiwibWV0ZXJzTGFiZWxzIiwiaSIsImZvcm1hdCIsInJpZ2h0IiwibW9kZWxUb1ZpZXdYIiwiY2VudGVyWSIsIm1vZGVsVG9WaWV3WSIsImZlZXRMYWJlbHMiLCJmZWV0VG9NZXRlcnMiLCJsaW5rIiwibWVhc3VyZVVuaXRzIiwidmlzaWJsZSIsImlzR3JpZFZpc2libGVQcm9wZXJ0eSIsImxpbmtBdHRyaWJ1dGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNxdWFyZVBvb2xHcmlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgZm9yIHRoZSBncmlkIGluIFNxdWFyZSBQb29sIHdoaWNoIHNob3dzIGhvcml6b250YWwgbGluZXMgYWxvbmcgdGhlIHBvb2wgaW5kaWNhdGluZyB0aGUgZGVwdGguXHJcbiAqIFN1cHBvcnRzIGJvdGggZW5nbGlzaCBhbmQgbWV0cmljIHVuaXRzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFZhc2lseSBTaGFraG92IChNbGVhcm5lcilcclxuICogQGF1dGhvciBTaWRkaGFydGhhIENoaW50aGFwYWxseSAoQWN0dWFsIENvbmNlcHRzKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVW5pdHMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1VuaXRzLmpzJztcclxuaW1wb3J0IGZsdWlkUHJlc3N1cmVBbmRGbG93IGZyb20gJy4uLy4uL2ZsdWlkUHJlc3N1cmVBbmRGbG93LmpzJztcclxuaW1wb3J0IEZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncyBmcm9tICcuLi8uLi9GbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgR3JpZExpbmVzTm9kZSBmcm9tICcuL0dyaWRMaW5lc05vZGUuanMnO1xyXG5cclxuY29uc3QgcmVhZG91dEZlZXRTdHJpbmcgPSBGbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MucmVhZG91dEZlZXQ7XHJcbmNvbnN0IHJlYWRvdXRNZXRlcnNTdHJpbmcgPSBGbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MucmVhZG91dE1ldGVycztcclxuXHJcbmNsYXNzIFNxdWFyZVBvb2xHcmlkIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7U3F1YXJlUG9vbE1vZGVsfSBzcXVhcmVQb29sTW9kZWxcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybSB0byBjb252ZXJ0IGJldHdlZW4gbW9kZWwgYW5kIHZpZXcgY28tb3JkaW5hdGVzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHNxdWFyZVBvb2xNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtICkge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgY29uc3QgZm9udE9wdGlvbnMgPSB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMTIgKSwgZm9udFdlaWdodDogJ2JvbGQnLCBtYXhXaWR0aDogNjAgfTtcclxuICAgIGNvbnN0IHBvb2xEaW1lbnNpb25zID0gc3F1YXJlUG9vbE1vZGVsLnBvb2xEaW1lbnNpb25zO1xyXG4gICAgLy8gYWRkIGdyaWQgbGluZXNcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBHcmlkTGluZXNOb2RlKCBzcXVhcmVQb29sTW9kZWwudW5kZXJQcmVzc3VyZU1vZGVsLm1lYXN1cmVVbml0c1Byb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm0sXHJcbiAgICAgIHBvb2xEaW1lbnNpb25zLngxLCBwb29sRGltZW5zaW9ucy55MSwgcG9vbERpbWVuc2lvbnMueDIsIHBvb2xEaW1lbnNpb25zLnkyIC0gMC4zICkgKTtcclxuXHJcbiAgICAvLyBtZXRlciBsYWJlbHNcclxuICAgIGNvbnN0IG1ldGVyc0xhYmVscyA9IG5ldyBOb2RlKCk7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCA0OyBpKysgKSB7XHJcbiAgICAgIG1ldGVyc0xhYmVscy5hZGRDaGlsZCggbmV3IFRleHQoIFN0cmluZ1V0aWxzLmZvcm1hdCggcmVhZG91dE1ldGVyc1N0cmluZywgaSApLCBtZXJnZSgge1xyXG4gICAgICAgIHJpZ2h0OiBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBwb29sRGltZW5zaW9ucy54MSApIC0gOCxcclxuICAgICAgICBjZW50ZXJZOiBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCAtaSApXHJcbiAgICAgIH0sIGZvbnRPcHRpb25zICkgKSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZlZXQgbGFiZWxzXHJcbiAgICBjb25zdCBmZWV0TGFiZWxzID0gbmV3IE5vZGUoKTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IDExOyBpKysgKSB7XHJcbiAgICAgIGZlZXRMYWJlbHMuYWRkQ2hpbGQoIG5ldyBUZXh0KCBTdHJpbmdVdGlscy5mb3JtYXQoIHJlYWRvdXRGZWV0U3RyaW5nLCBpICksIG1lcmdlKCB7XHJcbiAgICAgICAgcmlnaHQ6IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHBvb2xEaW1lbnNpb25zLngxICkgLSA4LFxyXG4gICAgICAgIGNlbnRlclk6IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIC1Vbml0cy5mZWV0VG9NZXRlcnMoIGkgKSApXHJcbiAgICAgIH0sIGZvbnRPcHRpb25zICkgKSApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG1ldGVyc0xhYmVscyApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggZmVldExhYmVscyApO1xyXG5cclxuICAgIHNxdWFyZVBvb2xNb2RlbC51bmRlclByZXNzdXJlTW9kZWwubWVhc3VyZVVuaXRzUHJvcGVydHkubGluayggbWVhc3VyZVVuaXRzID0+IHtcclxuICAgICAgZmVldExhYmVscy52aXNpYmxlID0gKCBtZWFzdXJlVW5pdHMgPT09ICdlbmdsaXNoJyApO1xyXG4gICAgICBtZXRlcnNMYWJlbHMudmlzaWJsZSA9ICggbWVhc3VyZVVuaXRzICE9PSAnZW5nbGlzaCcgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzcXVhcmVQb29sTW9kZWwudW5kZXJQcmVzc3VyZU1vZGVsLmlzR3JpZFZpc2libGVQcm9wZXJ0eS5saW5rQXR0cmlidXRlKCB0aGlzLCAndmlzaWJsZScgKTtcclxuICB9XHJcbn1cclxuXHJcbmZsdWlkUHJlc3N1cmVBbmRGbG93LnJlZ2lzdGVyKCAnU3F1YXJlUG9vbEdyaWQn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