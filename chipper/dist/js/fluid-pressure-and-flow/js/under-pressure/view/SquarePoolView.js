// Copyright 2013-2021, University of Colorado Boulder

/**
 * View for square pool.
 *
 * @author Vasily Shakhov (Mlearner)
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import { Node } from '../../../../scenery/js/imports.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
import FaucetFluidNode from './FaucetFluidNode.js';
import SquarePoolBack from './SquarePoolBack.js';
import SquarePoolGrid from './SquarePoolGrid.js';
import SquarePoolWaterNode from './SquarePoolWaterNode.js';
class SquarePoolView extends Node {
  /**
   * @param {SquarePoolModel} squarePoolModel
   * @param {ModelViewTransform2} modelViewTransform to convert between model and view co-ordinates
   */
  constructor(squarePoolModel, modelViewTransform) {
    super();

    // pool background with grass, cement, faucets
    this.addChild(new SquarePoolBack(squarePoolModel, modelViewTransform));

    // fluids from faucets
    this.addChild(new FaucetFluidNode(squarePoolModel.inputFaucet, squarePoolModel, modelViewTransform, modelViewTransform.modelToViewDeltaY(squarePoolModel.poolDimensions.y2 - squarePoolModel.inputFaucet.position.y)));
    this.addChild(new FaucetFluidNode(squarePoolModel.outputFaucet, squarePoolModel, modelViewTransform, 1000));

    // add water
    this.addChild(new SquarePoolWaterNode(squarePoolModel, modelViewTransform));

    // add grid
    this.addChild(new SquarePoolGrid(squarePoolModel, modelViewTransform));
  }
}
fluidPressureAndFlow.register('SquarePoolView', SquarePoolView);
export default SquarePoolView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJGYXVjZXRGbHVpZE5vZGUiLCJTcXVhcmVQb29sQmFjayIsIlNxdWFyZVBvb2xHcmlkIiwiU3F1YXJlUG9vbFdhdGVyTm9kZSIsIlNxdWFyZVBvb2xWaWV3IiwiY29uc3RydWN0b3IiLCJzcXVhcmVQb29sTW9kZWwiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJhZGRDaGlsZCIsImlucHV0RmF1Y2V0IiwibW9kZWxUb1ZpZXdEZWx0YVkiLCJwb29sRGltZW5zaW9ucyIsInkyIiwicG9zaXRpb24iLCJ5Iiwib3V0cHV0RmF1Y2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTcXVhcmVQb29sVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IGZvciBzcXVhcmUgcG9vbC5cclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAoTWxlYXJuZXIpXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGZsdWlkUHJlc3N1cmVBbmRGbG93IGZyb20gJy4uLy4uL2ZsdWlkUHJlc3N1cmVBbmRGbG93LmpzJztcclxuaW1wb3J0IEZhdWNldEZsdWlkTm9kZSBmcm9tICcuL0ZhdWNldEZsdWlkTm9kZS5qcyc7XHJcbmltcG9ydCBTcXVhcmVQb29sQmFjayBmcm9tICcuL1NxdWFyZVBvb2xCYWNrLmpzJztcclxuaW1wb3J0IFNxdWFyZVBvb2xHcmlkIGZyb20gJy4vU3F1YXJlUG9vbEdyaWQuanMnO1xyXG5pbXBvcnQgU3F1YXJlUG9vbFdhdGVyTm9kZSBmcm9tICcuL1NxdWFyZVBvb2xXYXRlck5vZGUuanMnO1xyXG5cclxuY2xhc3MgU3F1YXJlUG9vbFZpZXcgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtTcXVhcmVQb29sTW9kZWx9IHNxdWFyZVBvb2xNb2RlbFxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtIHRvIGNvbnZlcnQgYmV0d2VlbiBtb2RlbCBhbmQgdmlldyBjby1vcmRpbmF0ZXNcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggc3F1YXJlUG9vbE1vZGVsLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBwb29sIGJhY2tncm91bmQgd2l0aCBncmFzcywgY2VtZW50LCBmYXVjZXRzXHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgU3F1YXJlUG9vbEJhY2soIHNxdWFyZVBvb2xNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtICkgKTtcclxuXHJcbiAgICAvLyBmbHVpZHMgZnJvbSBmYXVjZXRzXHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgRmF1Y2V0Rmx1aWROb2RlKCBzcXVhcmVQb29sTW9kZWwuaW5wdXRGYXVjZXQsIHNxdWFyZVBvb2xNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVkoIHNxdWFyZVBvb2xNb2RlbC5wb29sRGltZW5zaW9ucy55MiAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlUG9vbE1vZGVsLmlucHV0RmF1Y2V0LnBvc2l0aW9uLnkgKSApICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgRmF1Y2V0Rmx1aWROb2RlKCBzcXVhcmVQb29sTW9kZWwub3V0cHV0RmF1Y2V0LCBzcXVhcmVQb29sTW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybSwgMTAwMCApICk7XHJcblxyXG4gICAgLy8gYWRkIHdhdGVyXHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgU3F1YXJlUG9vbFdhdGVyTm9kZSggc3F1YXJlUG9vbE1vZGVsLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSApO1xyXG5cclxuICAgIC8vIGFkZCBncmlkXHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgU3F1YXJlUG9vbEdyaWQoIHNxdWFyZVBvb2xNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtICkgKTtcclxuICB9XHJcbn1cclxuXHJcbmZsdWlkUHJlc3N1cmVBbmRGbG93LnJlZ2lzdGVyKCAnU3F1YXJlUG9vbFZpZXcnLCBTcXVhcmVQb29sVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBTcXVhcmVQb29sVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUNoRSxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLGNBQWMsTUFBTSxxQkFBcUI7QUFDaEQsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjtBQUNoRCxPQUFPQyxtQkFBbUIsTUFBTSwwQkFBMEI7QUFFMUQsTUFBTUMsY0FBYyxTQUFTTixJQUFJLENBQUM7RUFFaEM7QUFDRjtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxrQkFBa0IsRUFBRztJQUVqRCxLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBLElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUlQLGNBQWMsQ0FBRUssZUFBZSxFQUFFQyxrQkFBbUIsQ0FBRSxDQUFDOztJQUUxRTtJQUNBLElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUlSLGVBQWUsQ0FBRU0sZUFBZSxDQUFDRyxXQUFXLEVBQUVILGVBQWUsRUFBRUMsa0JBQWtCLEVBQ2xHQSxrQkFBa0IsQ0FBQ0csaUJBQWlCLENBQUVKLGVBQWUsQ0FBQ0ssY0FBYyxDQUFDQyxFQUFFLEdBQ2pDTixlQUFlLENBQUNHLFdBQVcsQ0FBQ0ksUUFBUSxDQUFDQyxDQUFFLENBQUUsQ0FBRSxDQUFDO0lBQ3BGLElBQUksQ0FBQ04sUUFBUSxDQUFFLElBQUlSLGVBQWUsQ0FBRU0sZUFBZSxDQUFDUyxZQUFZLEVBQUVULGVBQWUsRUFBRUMsa0JBQWtCLEVBQUUsSUFBSyxDQUFFLENBQUM7O0lBRS9HO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSUwsbUJBQW1CLENBQUVHLGVBQWUsRUFBRUMsa0JBQW1CLENBQUUsQ0FBQzs7SUFFL0U7SUFDQSxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJTixjQUFjLENBQUVJLGVBQWUsRUFBRUMsa0JBQW1CLENBQUUsQ0FBQztFQUM1RTtBQUNGO0FBRUFSLG9CQUFvQixDQUFDaUIsUUFBUSxDQUFFLGdCQUFnQixFQUFFWixjQUFlLENBQUM7QUFDakUsZUFBZUEsY0FBYyJ9