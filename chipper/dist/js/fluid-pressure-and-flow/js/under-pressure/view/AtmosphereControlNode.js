// Copyright 2014-2022, University of Colorado Boulder

/**
 * View for the atmosphere control options embedded within the control panel.
 * Contains on/off radio boxes and a border around the options with a title at the top left embedded within the border.
 *
 * @author Vasily Shakhov (Mlearner)
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, Node, Text } from '../../../../scenery/js/imports.js';
import AquaRadioButton from '../../../../sun/js/AquaRadioButton.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
import FluidPressureAndFlowStrings from '../../FluidPressureAndFlowStrings.js';
const atmosphereString = FluidPressureAndFlowStrings.atmosphere;
const offString = FluidPressureAndFlowStrings.off;
const onString = FluidPressureAndFlowStrings.on;
class AtmosphereControlNode extends Node {
  /**
   * @param {Property.<Boolean>} isAtmosphereProperty - to select atmosphere on/off
   * @param {Object} [options]
   */
  constructor(isAtmosphereProperty, options) {
    // default options
    options = merge({
      fill: '#f2fa6a',
      stroke: 'black',
      lineWidth: 1,
      // width of the background border
      xMargin: 5,
      yMargin: 6,
      cornerRadius: 5 // radius of the rounded corners on the background
    }, options);
    super();
    this.options = options;
    const radioButtonTextOptions = {
      font: new PhetFont(12),
      maxWidth: options.maxWidth * 0.4 || Number.POSITIVE_INFINITY
    };
    const atmosphereTrue = new AquaRadioButton(isAtmosphereProperty, true, new Text(onString, radioButtonTextOptions), {
      radius: 6
    });
    const atmosphereFalse = new AquaRadioButton(isAtmosphereProperty, false, new Text(offString, radioButtonTextOptions), {
      radius: 6
    });

    // touch areas, empirically determined
    atmosphereTrue.touchArea = atmosphereTrue.localBounds.dilatedXY(4, 4);
    atmosphereFalse.touchArea = atmosphereFalse.localBounds.dilatedXY(4, 4);
    this.contentNode = new HBox({
      children: [atmosphereTrue, atmosphereFalse],
      spacing: 10
    });
    const titleNode = new Text(atmosphereString, {
      font: new PhetFont(14),
      fontWeight: 'bold',
      maxWidth: options.maxWidth * 0.9 || Number.POSITIVE_INFINITY
    });
    this.contentNode.top = titleNode.bottom + 5;
    this.addChild(titleNode);
    this.addChild(this.contentNode);
    this.mutate(this.options);
  }
}
fluidPressureAndFlow.register('AtmosphereControlNode', AtmosphereControlNode);
export default AtmosphereControlNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiSEJveCIsIk5vZGUiLCJUZXh0IiwiQXF1YVJhZGlvQnV0dG9uIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJGbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MiLCJhdG1vc3BoZXJlU3RyaW5nIiwiYXRtb3NwaGVyZSIsIm9mZlN0cmluZyIsIm9mZiIsIm9uU3RyaW5nIiwib24iLCJBdG1vc3BoZXJlQ29udHJvbE5vZGUiLCJjb25zdHJ1Y3RvciIsImlzQXRtb3NwaGVyZVByb3BlcnR5Iiwib3B0aW9ucyIsImZpbGwiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImNvcm5lclJhZGl1cyIsInJhZGlvQnV0dG9uVGV4dE9wdGlvbnMiLCJmb250IiwibWF4V2lkdGgiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsImF0bW9zcGhlcmVUcnVlIiwicmFkaXVzIiwiYXRtb3NwaGVyZUZhbHNlIiwidG91Y2hBcmVhIiwibG9jYWxCb3VuZHMiLCJkaWxhdGVkWFkiLCJjb250ZW50Tm9kZSIsImNoaWxkcmVuIiwic3BhY2luZyIsInRpdGxlTm9kZSIsImZvbnRXZWlnaHQiLCJ0b3AiLCJib3R0b20iLCJhZGRDaGlsZCIsIm11dGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXRtb3NwaGVyZUNvbnRyb2xOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgZm9yIHRoZSBhdG1vc3BoZXJlIGNvbnRyb2wgb3B0aW9ucyBlbWJlZGRlZCB3aXRoaW4gdGhlIGNvbnRyb2wgcGFuZWwuXHJcbiAqIENvbnRhaW5zIG9uL29mZiByYWRpbyBib3hlcyBhbmQgYSBib3JkZXIgYXJvdW5kIHRoZSBvcHRpb25zIHdpdGggYSB0aXRsZSBhdCB0aGUgdG9wIGxlZnQgZW1iZWRkZWQgd2l0aGluIHRoZSBib3JkZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgVmFzaWx5IFNoYWtob3YgKE1sZWFybmVyKVxyXG4gKiBAYXV0aG9yIFNpZGRoYXJ0aGEgQ2hpbnRoYXBhbGx5IChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEFxdWFSYWRpb0J1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQXF1YVJhZGlvQnV0dG9uLmpzJztcclxuaW1wb3J0IGZsdWlkUHJlc3N1cmVBbmRGbG93IGZyb20gJy4uLy4uL2ZsdWlkUHJlc3N1cmVBbmRGbG93LmpzJztcclxuaW1wb3J0IEZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncyBmcm9tICcuLi8uLi9GbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MuanMnO1xyXG5cclxuY29uc3QgYXRtb3NwaGVyZVN0cmluZyA9IEZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncy5hdG1vc3BoZXJlO1xyXG5jb25zdCBvZmZTdHJpbmcgPSBGbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3Mub2ZmO1xyXG5jb25zdCBvblN0cmluZyA9IEZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncy5vbjtcclxuXHJcbmNsYXNzIEF0bW9zcGhlcmVDb250cm9sTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxCb29sZWFuPn0gaXNBdG1vc3BoZXJlUHJvcGVydHkgLSB0byBzZWxlY3QgYXRtb3NwaGVyZSBvbi9vZmZcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGlzQXRtb3NwaGVyZVByb3BlcnR5LCBvcHRpb25zICkge1xyXG5cclxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIGZpbGw6ICcjZjJmYTZhJyxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDEsIC8vIHdpZHRoIG9mIHRoZSBiYWNrZ3JvdW5kIGJvcmRlclxyXG4gICAgICB4TWFyZ2luOiA1LFxyXG4gICAgICB5TWFyZ2luOiA2LFxyXG4gICAgICBjb3JuZXJSYWRpdXM6IDUgLy8gcmFkaXVzIG9mIHRoZSByb3VuZGVkIGNvcm5lcnMgb24gdGhlIGJhY2tncm91bmRcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG4gICAgY29uc3QgcmFkaW9CdXR0b25UZXh0T3B0aW9ucyA9IHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxMiApLFxyXG4gICAgICBtYXhXaWR0aDogKCBvcHRpb25zLm1heFdpZHRoICogMC40IHx8IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSApXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGF0bW9zcGhlcmVUcnVlID0gbmV3IEFxdWFSYWRpb0J1dHRvbiggaXNBdG1vc3BoZXJlUHJvcGVydHksIHRydWUsIG5ldyBUZXh0KCBvblN0cmluZywgcmFkaW9CdXR0b25UZXh0T3B0aW9ucyApLCB7XHJcbiAgICAgIHJhZGl1czogNlxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGF0bW9zcGhlcmVGYWxzZSA9IG5ldyBBcXVhUmFkaW9CdXR0b24oIGlzQXRtb3NwaGVyZVByb3BlcnR5LCBmYWxzZSwgbmV3IFRleHQoIG9mZlN0cmluZywgcmFkaW9CdXR0b25UZXh0T3B0aW9ucyApLCB7XHJcbiAgICAgIHJhZGl1czogNlxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHRvdWNoIGFyZWFzLCBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcbiAgICBhdG1vc3BoZXJlVHJ1ZS50b3VjaEFyZWEgPSBhdG1vc3BoZXJlVHJ1ZS5sb2NhbEJvdW5kcy5kaWxhdGVkWFkoIDQsIDQgKTtcclxuICAgIGF0bW9zcGhlcmVGYWxzZS50b3VjaEFyZWEgPSBhdG1vc3BoZXJlRmFsc2UubG9jYWxCb3VuZHMuZGlsYXRlZFhZKCA0LCA0ICk7XHJcblxyXG4gICAgdGhpcy5jb250ZW50Tm9kZSA9IG5ldyBIQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIGF0bW9zcGhlcmVUcnVlLCBhdG1vc3BoZXJlRmFsc2UgXSxcclxuICAgICAgc3BhY2luZzogMTBcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB0aXRsZU5vZGUgPSBuZXcgVGV4dCggYXRtb3NwaGVyZVN0cmluZywge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE0ICksXHJcbiAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcclxuICAgICAgbWF4V2lkdGg6ICggb3B0aW9ucy5tYXhXaWR0aCAqIDAuOSB8fCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuY29udGVudE5vZGUudG9wID0gdGl0bGVOb2RlLmJvdHRvbSArIDU7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aXRsZU5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuY29udGVudE5vZGUgKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggdGhpcy5vcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mbHVpZFByZXNzdXJlQW5kRmxvdy5yZWdpc3RlciggJ0F0bW9zcGhlcmVDb250cm9sTm9kZScsIEF0bW9zcGhlcmVDb250cm9sTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBBdG1vc3BoZXJlQ29udHJvbE5vZGU7Il0sIm1h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