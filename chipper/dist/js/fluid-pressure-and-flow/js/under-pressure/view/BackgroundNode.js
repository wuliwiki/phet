// Copyright 2013-2022, University of Colorado Boulder

/**
 * View for the background node containing sky and ground with an option to turn off the atmosphere
 *
 * @author Vasily Shakhov (Mlearner)
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import GroundNode from '../../../../scenery-phet/js/GroundNode.js';
import SkyNode from '../../../../scenery-phet/js/SkyNode.js';
import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
class BackgroundNode extends Node {
  /**
   * @param {UnderPressureModel} underPressureModel of the sim
   * @param {ModelViewTransform2} modelViewTransform for transforming between model and view co-ordinates
   */
  constructor(underPressureModel, modelViewTransform) {
    super();

    // empirically determined
    const backgroundStartX = -2000;
    const backgroundWidth = 5000;
    const skyExtension = 5000;
    const groundExtension = 5000;
    const groundY = modelViewTransform.modelToViewY(0);

    // This is a workaround, see https://github.com/phetsims/fluid-pressure-and-flow/issues/87
    // add rectangle on top of the sky node to extend sky upwards.
    this.addChild(new Rectangle(backgroundStartX, -skyExtension, backgroundWidth, skyExtension, {
      stroke: '#01ACE4',
      fill: '#01ACE4'
    }));
    const skyNode = new SkyNode(backgroundStartX, 0, backgroundWidth, groundY, groundY);
    const skyNodeWithNoAtmosphere = new Rectangle(backgroundStartX, -skyExtension, backgroundWidth, skyExtension + groundY, {
      fill: 'black'
    });
    this.addChild(skyNode);
    this.addChild(skyNodeWithNoAtmosphere);
    underPressureModel.isAtmosphereProperty.link(isAtmosphere => {
      skyNode.visible = isAtmosphere;
      skyNodeWithNoAtmosphere.visible = !isAtmosphere;
    });

    //Ground node
    this.addChild(new GroundNode(backgroundStartX, groundY, backgroundWidth, groundY + groundExtension, 295, {
      topColor: '#93774C',
      bottomColor: '#93774C'
    }));
  }
}
fluidPressureAndFlow.register('BackgroundNode', BackgroundNode);
export default BackgroundNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHcm91bmROb2RlIiwiU2t5Tm9kZSIsIk5vZGUiLCJSZWN0YW5nbGUiLCJmbHVpZFByZXNzdXJlQW5kRmxvdyIsIkJhY2tncm91bmROb2RlIiwiY29uc3RydWN0b3IiLCJ1bmRlclByZXNzdXJlTW9kZWwiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJiYWNrZ3JvdW5kU3RhcnRYIiwiYmFja2dyb3VuZFdpZHRoIiwic2t5RXh0ZW5zaW9uIiwiZ3JvdW5kRXh0ZW5zaW9uIiwiZ3JvdW5kWSIsIm1vZGVsVG9WaWV3WSIsImFkZENoaWxkIiwic3Ryb2tlIiwiZmlsbCIsInNreU5vZGUiLCJza3lOb2RlV2l0aE5vQXRtb3NwaGVyZSIsImlzQXRtb3NwaGVyZVByb3BlcnR5IiwibGluayIsImlzQXRtb3NwaGVyZSIsInZpc2libGUiLCJ0b3BDb2xvciIsImJvdHRvbUNvbG9yIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCYWNrZ3JvdW5kTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IGZvciB0aGUgYmFja2dyb3VuZCBub2RlIGNvbnRhaW5pbmcgc2t5IGFuZCBncm91bmQgd2l0aCBhbiBvcHRpb24gdG8gdHVybiBvZmYgdGhlIGF0bW9zcGhlcmVcclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAoTWxlYXJuZXIpXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgR3JvdW5kTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvR3JvdW5kTm9kZS5qcyc7XHJcbmltcG9ydCBTa3lOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9Ta3lOb2RlLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGZsdWlkUHJlc3N1cmVBbmRGbG93IGZyb20gJy4uLy4uL2ZsdWlkUHJlc3N1cmVBbmRGbG93LmpzJztcclxuXHJcbmNsYXNzIEJhY2tncm91bmROb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VW5kZXJQcmVzc3VyZU1vZGVsfSB1bmRlclByZXNzdXJlTW9kZWwgb2YgdGhlIHNpbVxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtIGZvciB0cmFuc2Zvcm1pbmcgYmV0d2VlbiBtb2RlbCBhbmQgdmlldyBjby1vcmRpbmF0ZXNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdW5kZXJQcmVzc3VyZU1vZGVsLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuICAgIGNvbnN0IGJhY2tncm91bmRTdGFydFggPSAtMjAwMDtcclxuICAgIGNvbnN0IGJhY2tncm91bmRXaWR0aCA9IDUwMDA7XHJcbiAgICBjb25zdCBza3lFeHRlbnNpb24gPSA1MDAwO1xyXG4gICAgY29uc3QgZ3JvdW5kRXh0ZW5zaW9uID0gNTAwMDtcclxuICAgIGNvbnN0IGdyb3VuZFkgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCAwICk7XHJcblxyXG4gICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZmx1aWQtcHJlc3N1cmUtYW5kLWZsb3cvaXNzdWVzLzg3XHJcbiAgICAvLyBhZGQgcmVjdGFuZ2xlIG9uIHRvcCBvZiB0aGUgc2t5IG5vZGUgdG8gZXh0ZW5kIHNreSB1cHdhcmRzLlxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFJlY3RhbmdsZSggYmFja2dyb3VuZFN0YXJ0WCwgLXNreUV4dGVuc2lvbiwgYmFja2dyb3VuZFdpZHRoLCBza3lFeHRlbnNpb24sXHJcbiAgICAgIHsgc3Ryb2tlOiAnIzAxQUNFNCcsIGZpbGw6ICcjMDFBQ0U0JyB9ICkgKTtcclxuXHJcbiAgICBjb25zdCBza3lOb2RlID0gbmV3IFNreU5vZGUoIGJhY2tncm91bmRTdGFydFgsIDAsIGJhY2tncm91bmRXaWR0aCwgZ3JvdW5kWSwgZ3JvdW5kWSApO1xyXG4gICAgY29uc3Qgc2t5Tm9kZVdpdGhOb0F0bW9zcGhlcmUgPSBuZXcgUmVjdGFuZ2xlKFxyXG4gICAgICBiYWNrZ3JvdW5kU3RhcnRYLFxyXG4gICAgICAtc2t5RXh0ZW5zaW9uLFxyXG4gICAgICBiYWNrZ3JvdW5kV2lkdGgsXHJcbiAgICAgICggc2t5RXh0ZW5zaW9uICsgZ3JvdW5kWSApLFxyXG4gICAgICB7IGZpbGw6ICdibGFjaycgfVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBza3lOb2RlICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBza3lOb2RlV2l0aE5vQXRtb3NwaGVyZSApO1xyXG5cclxuICAgIHVuZGVyUHJlc3N1cmVNb2RlbC5pc0F0bW9zcGhlcmVQcm9wZXJ0eS5saW5rKCBpc0F0bW9zcGhlcmUgPT4ge1xyXG4gICAgICBza3lOb2RlLnZpc2libGUgPSBpc0F0bW9zcGhlcmU7XHJcbiAgICAgIHNreU5vZGVXaXRoTm9BdG1vc3BoZXJlLnZpc2libGUgPSAhaXNBdG1vc3BoZXJlO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vR3JvdW5kIG5vZGVcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBHcm91bmROb2RlKCBiYWNrZ3JvdW5kU3RhcnRYLCBncm91bmRZLCBiYWNrZ3JvdW5kV2lkdGgsIGdyb3VuZFkgKyBncm91bmRFeHRlbnNpb24sIDI5NSxcclxuICAgICAgeyB0b3BDb2xvcjogJyM5Mzc3NEMnLCBib3R0b21Db2xvcjogJyM5Mzc3NEMnIH0gKSApO1xyXG4gIH1cclxufVxyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdCYWNrZ3JvdW5kTm9kZScsIEJhY2tncm91bmROb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IEJhY2tncm91bmROb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSwyQ0FBMkM7QUFDbEUsT0FBT0MsT0FBTyxNQUFNLHdDQUF3QztBQUM1RCxTQUFTQyxJQUFJLEVBQUVDLFNBQVMsUUFBUSxtQ0FBbUM7QUFDbkUsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBRWhFLE1BQU1DLGNBQWMsU0FBU0gsSUFBSSxDQUFDO0VBRWhDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRztJQUNwRCxLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBLE1BQU1DLGdCQUFnQixHQUFHLENBQUMsSUFBSTtJQUM5QixNQUFNQyxlQUFlLEdBQUcsSUFBSTtJQUM1QixNQUFNQyxZQUFZLEdBQUcsSUFBSTtJQUN6QixNQUFNQyxlQUFlLEdBQUcsSUFBSTtJQUM1QixNQUFNQyxPQUFPLEdBQUdMLGtCQUFrQixDQUFDTSxZQUFZLENBQUUsQ0FBRSxDQUFDOztJQUVwRDtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSVosU0FBUyxDQUFFTSxnQkFBZ0IsRUFBRSxDQUFDRSxZQUFZLEVBQUVELGVBQWUsRUFBRUMsWUFBWSxFQUMxRjtNQUFFSyxNQUFNLEVBQUUsU0FBUztNQUFFQyxJQUFJLEVBQUU7SUFBVSxDQUFFLENBQUUsQ0FBQztJQUU1QyxNQUFNQyxPQUFPLEdBQUcsSUFBSWpCLE9BQU8sQ0FBRVEsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFQyxlQUFlLEVBQUVHLE9BQU8sRUFBRUEsT0FBUSxDQUFDO0lBQ3JGLE1BQU1NLHVCQUF1QixHQUFHLElBQUloQixTQUFTLENBQzNDTSxnQkFBZ0IsRUFDaEIsQ0FBQ0UsWUFBWSxFQUNiRCxlQUFlLEVBQ2JDLFlBQVksR0FBR0UsT0FBTyxFQUN4QjtNQUFFSSxJQUFJLEVBQUU7SUFBUSxDQUNsQixDQUFDO0lBRUQsSUFBSSxDQUFDRixRQUFRLENBQUVHLE9BQVEsQ0FBQztJQUN4QixJQUFJLENBQUNILFFBQVEsQ0FBRUksdUJBQXdCLENBQUM7SUFFeENaLGtCQUFrQixDQUFDYSxvQkFBb0IsQ0FBQ0MsSUFBSSxDQUFFQyxZQUFZLElBQUk7TUFDNURKLE9BQU8sQ0FBQ0ssT0FBTyxHQUFHRCxZQUFZO01BQzlCSCx1QkFBdUIsQ0FBQ0ksT0FBTyxHQUFHLENBQUNELFlBQVk7SUFDakQsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDUCxRQUFRLENBQUUsSUFBSWYsVUFBVSxDQUFFUyxnQkFBZ0IsRUFBRUksT0FBTyxFQUFFSCxlQUFlLEVBQUVHLE9BQU8sR0FBR0QsZUFBZSxFQUFFLEdBQUcsRUFDdkc7TUFBRVksUUFBUSxFQUFFLFNBQVM7TUFBRUMsV0FBVyxFQUFFO0lBQVUsQ0FBRSxDQUFFLENBQUM7RUFDdkQ7QUFDRjtBQUVBckIsb0JBQW9CLENBQUNzQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVyQixjQUFlLENBQUM7QUFDakUsZUFBZUEsY0FBYyJ9