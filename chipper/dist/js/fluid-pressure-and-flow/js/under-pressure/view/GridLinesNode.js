// Copyright 2013-2022, University of Colorado Boulder

/**
 * View for grid lines
 *
 * @author Anton Ulyanov, Vasily Shakhov (Mlearner)
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import { Line, Node } from '../../../../scenery/js/imports.js';
import Units from '../../common/model/Units.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
class GridLinesNode extends Node {
  /**
   * Draw grid lines in rect (x1, y1, x2 , y2)
   * @param { Property.<string> }  measureUnitsProperty takes one of 'english'/'metric'/'atmospheres'
   * @param {ModelViewTransform2} modelViewTransform to transform between model and view coordinate frames
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @param {Object} [options] to pass to the underlying node
   */
  constructor(measureUnitsProperty, modelViewTransform, x1, y1, x2, y2, options) {
    super();

    // adds a 1.5px thick line with a 1px bottom border
    function addLine(parentNode, viewY) {
      const viewX1 = modelViewTransform.modelToViewX(x1);
      const viewX2 = modelViewTransform.modelToViewX(x2);
      parentNode.addChild(new Line(viewX1, viewY, viewX2, viewY, {
        stroke: 'rgb(192, 192, 192)',
        lineWidth: 1.5
      }));
      parentNode.addChild(new Line(viewX1, viewY + 1, viewX2, viewY + 1, {
        stroke: 'rgb(64, 64, 64)',
        lineWidth: 1
      }));
    }
    const startY = modelViewTransform.modelToViewY(y1);
    const endY = modelViewTransform.modelToViewY(y2);
    const metersGrid = new Node();
    const meterStep = Math.abs(modelViewTransform.modelToViewDeltaY(1));

    // add lines from startY to endY every meterStep pixels
    for (let i = startY; i <= endY; i += meterStep) {
      addLine(metersGrid, i);
    }
    const feetGrid = new Node();
    const feetStep = Math.abs(modelViewTransform.modelToViewDeltaY(Units.feetToMeters(1)));

    // add lines from startY to endY every feetStep pixels
    for (let i = startY; i <= endY; i += feetStep) {
      addLine(feetGrid, i);
    }
    this.addChild(feetGrid);
    this.addChild(metersGrid);
    measureUnitsProperty.link(measureUnits => {
      metersGrid.visible = measureUnits !== 'english';
      feetGrid.visible = measureUnits === 'english';
    });
    this.mutate(options);
  }
}
fluidPressureAndFlow.register('GridLinesNode', GridLinesNode);
export default GridLinesNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lIiwiTm9kZSIsIlVuaXRzIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJHcmlkTGluZXNOb2RlIiwiY29uc3RydWN0b3IiLCJtZWFzdXJlVW5pdHNQcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsIngxIiwieTEiLCJ4MiIsInkyIiwib3B0aW9ucyIsImFkZExpbmUiLCJwYXJlbnROb2RlIiwidmlld1kiLCJ2aWV3WDEiLCJtb2RlbFRvVmlld1giLCJ2aWV3WDIiLCJhZGRDaGlsZCIsInN0cm9rZSIsImxpbmVXaWR0aCIsInN0YXJ0WSIsIm1vZGVsVG9WaWV3WSIsImVuZFkiLCJtZXRlcnNHcmlkIiwibWV0ZXJTdGVwIiwiTWF0aCIsImFicyIsIm1vZGVsVG9WaWV3RGVsdGFZIiwiaSIsImZlZXRHcmlkIiwiZmVldFN0ZXAiLCJmZWV0VG9NZXRlcnMiLCJsaW5rIiwibWVhc3VyZVVuaXRzIiwidmlzaWJsZSIsIm11dGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR3JpZExpbmVzTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IGZvciBncmlkIGxpbmVzXHJcbiAqXHJcbiAqIEBhdXRob3IgQW50b24gVWx5YW5vdiwgVmFzaWx5IFNoYWtob3YgKE1sZWFybmVyKVxyXG4gKiBAYXV0aG9yIFNpZGRoYXJ0aGEgQ2hpbnRoYXBhbGx5IChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTGluZSwgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBVbml0cyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVW5pdHMuanMnO1xyXG5pbXBvcnQgZmx1aWRQcmVzc3VyZUFuZEZsb3cgZnJvbSAnLi4vLi4vZmx1aWRQcmVzc3VyZUFuZEZsb3cuanMnO1xyXG5cclxuY2xhc3MgR3JpZExpbmVzTm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIC8qKlxyXG4gICAqIERyYXcgZ3JpZCBsaW5lcyBpbiByZWN0ICh4MSwgeTEsIHgyICwgeTIpXHJcbiAgICogQHBhcmFtIHsgUHJvcGVydHkuPHN0cmluZz4gfSAgbWVhc3VyZVVuaXRzUHJvcGVydHkgdGFrZXMgb25lIG9mICdlbmdsaXNoJy8nbWV0cmljJy8nYXRtb3NwaGVyZXMnXHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm0gdG8gdHJhbnNmb3JtIGJldHdlZW4gbW9kZWwgYW5kIHZpZXcgY29vcmRpbmF0ZSBmcmFtZXNcclxuICAgKiBAcGFyYW0ge251bWJlcn0geDFcclxuICAgKiBAcGFyYW0ge251bWJlcn0geTFcclxuICAgKiBAcGFyYW0ge251bWJlcn0geDJcclxuICAgKiBAcGFyYW0ge251bWJlcn0geTJcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIHRvIHBhc3MgdG8gdGhlIHVuZGVybHlpbmcgbm9kZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtZWFzdXJlVW5pdHNQcm9wZXJ0eSwgbW9kZWxWaWV3VHJhbnNmb3JtLCB4MSwgeTEsIHgyLCB5Miwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIGFkZHMgYSAxLjVweCB0aGljayBsaW5lIHdpdGggYSAxcHggYm90dG9tIGJvcmRlclxyXG4gICAgZnVuY3Rpb24gYWRkTGluZSggcGFyZW50Tm9kZSwgdmlld1kgKSB7XHJcbiAgICAgIGNvbnN0IHZpZXdYMSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHgxICk7XHJcbiAgICAgIGNvbnN0IHZpZXdYMiA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHgyICk7XHJcbiAgICAgIHBhcmVudE5vZGUuYWRkQ2hpbGQoIG5ldyBMaW5lKCB2aWV3WDEsIHZpZXdZLCB2aWV3WDIsIHZpZXdZLCB7XHJcbiAgICAgICAgc3Ryb2tlOiAncmdiKDE5MiwgMTkyLCAxOTIpJyxcclxuICAgICAgICBsaW5lV2lkdGg6IDEuNVxyXG4gICAgICB9ICkgKTtcclxuXHJcbiAgICAgIHBhcmVudE5vZGUuYWRkQ2hpbGQoIG5ldyBMaW5lKCB2aWV3WDEsIHZpZXdZICsgMSwgdmlld1gyLCB2aWV3WSArIDEsIHtcclxuICAgICAgICBzdHJva2U6ICdyZ2IoNjQsIDY0LCA2NCknLFxyXG4gICAgICAgIGxpbmVXaWR0aDogMVxyXG4gICAgICB9ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdGFydFkgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCB5MSApO1xyXG4gICAgY29uc3QgZW5kWSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIHkyICk7XHJcblxyXG4gICAgY29uc3QgbWV0ZXJzR3JpZCA9IG5ldyBOb2RlKCk7XHJcbiAgICBjb25zdCBtZXRlclN0ZXAgPSBNYXRoLmFicyggbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCAxICkgKTtcclxuXHJcbiAgICAvLyBhZGQgbGluZXMgZnJvbSBzdGFydFkgdG8gZW5kWSBldmVyeSBtZXRlclN0ZXAgcGl4ZWxzXHJcbiAgICBmb3IgKCBsZXQgaSA9IHN0YXJ0WTsgaSA8PSBlbmRZOyBpICs9IG1ldGVyU3RlcCApIHtcclxuICAgICAgYWRkTGluZSggbWV0ZXJzR3JpZCwgaSApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZlZXRHcmlkID0gbmV3IE5vZGUoKTtcclxuICAgIGNvbnN0IGZlZXRTdGVwID0gTWF0aC5hYnMoIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggVW5pdHMuZmVldFRvTWV0ZXJzKCAxICkgKSApO1xyXG5cclxuICAgIC8vIGFkZCBsaW5lcyBmcm9tIHN0YXJ0WSB0byBlbmRZIGV2ZXJ5IGZlZXRTdGVwIHBpeGVsc1xyXG4gICAgZm9yICggbGV0IGkgPSBzdGFydFk7IGkgPD0gZW5kWTsgaSArPSBmZWV0U3RlcCApIHtcclxuICAgICAgYWRkTGluZSggZmVldEdyaWQsIGkgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBmZWV0R3JpZCApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbWV0ZXJzR3JpZCApO1xyXG5cclxuICAgIG1lYXN1cmVVbml0c1Byb3BlcnR5LmxpbmsoIG1lYXN1cmVVbml0cyA9PiB7XHJcbiAgICAgIG1ldGVyc0dyaWQudmlzaWJsZSA9ICggbWVhc3VyZVVuaXRzICE9PSAnZW5nbGlzaCcgKTtcclxuICAgICAgZmVldEdyaWQudmlzaWJsZSA9ICggbWVhc3VyZVVuaXRzID09PSAnZW5nbGlzaCcgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdHcmlkTGluZXNOb2RlJywgR3JpZExpbmVzTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBHcmlkTGluZXNOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUVoRSxNQUFNQyxhQUFhLFNBQVNILElBQUksQ0FBQztFQUMvQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxvQkFBb0IsRUFBRUMsa0JBQWtCLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsT0FBTyxFQUFHO0lBRS9FLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsU0FBU0MsT0FBT0EsQ0FBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUc7TUFDcEMsTUFBTUMsTUFBTSxHQUFHVCxrQkFBa0IsQ0FBQ1UsWUFBWSxDQUFFVCxFQUFHLENBQUM7TUFDcEQsTUFBTVUsTUFBTSxHQUFHWCxrQkFBa0IsQ0FBQ1UsWUFBWSxDQUFFUCxFQUFHLENBQUM7TUFDcERJLFVBQVUsQ0FBQ0ssUUFBUSxDQUFFLElBQUluQixJQUFJLENBQUVnQixNQUFNLEVBQUVELEtBQUssRUFBRUcsTUFBTSxFQUFFSCxLQUFLLEVBQUU7UUFDM0RLLE1BQU0sRUFBRSxvQkFBb0I7UUFDNUJDLFNBQVMsRUFBRTtNQUNiLENBQUUsQ0FBRSxDQUFDO01BRUxQLFVBQVUsQ0FBQ0ssUUFBUSxDQUFFLElBQUluQixJQUFJLENBQUVnQixNQUFNLEVBQUVELEtBQUssR0FBRyxDQUFDLEVBQUVHLE1BQU0sRUFBRUgsS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNuRUssTUFBTSxFQUFFLGlCQUFpQjtRQUN6QkMsU0FBUyxFQUFFO01BQ2IsQ0FBRSxDQUFFLENBQUM7SUFDUDtJQUVBLE1BQU1DLE1BQU0sR0FBR2Ysa0JBQWtCLENBQUNnQixZQUFZLENBQUVkLEVBQUcsQ0FBQztJQUNwRCxNQUFNZSxJQUFJLEdBQUdqQixrQkFBa0IsQ0FBQ2dCLFlBQVksQ0FBRVosRUFBRyxDQUFDO0lBRWxELE1BQU1jLFVBQVUsR0FBRyxJQUFJeEIsSUFBSSxDQUFDLENBQUM7SUFDN0IsTUFBTXlCLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUVyQixrQkFBa0IsQ0FBQ3NCLGlCQUFpQixDQUFFLENBQUUsQ0FBRSxDQUFDOztJQUV2RTtJQUNBLEtBQU0sSUFBSUMsQ0FBQyxHQUFHUixNQUFNLEVBQUVRLENBQUMsSUFBSU4sSUFBSSxFQUFFTSxDQUFDLElBQUlKLFNBQVMsRUFBRztNQUNoRGIsT0FBTyxDQUFFWSxVQUFVLEVBQUVLLENBQUUsQ0FBQztJQUMxQjtJQUVBLE1BQU1DLFFBQVEsR0FBRyxJQUFJOUIsSUFBSSxDQUFDLENBQUM7SUFDM0IsTUFBTStCLFFBQVEsR0FBR0wsSUFBSSxDQUFDQyxHQUFHLENBQUVyQixrQkFBa0IsQ0FBQ3NCLGlCQUFpQixDQUFFM0IsS0FBSyxDQUFDK0IsWUFBWSxDQUFFLENBQUUsQ0FBRSxDQUFFLENBQUM7O0lBRTVGO0lBQ0EsS0FBTSxJQUFJSCxDQUFDLEdBQUdSLE1BQU0sRUFBRVEsQ0FBQyxJQUFJTixJQUFJLEVBQUVNLENBQUMsSUFBSUUsUUFBUSxFQUFHO01BQy9DbkIsT0FBTyxDQUFFa0IsUUFBUSxFQUFFRCxDQUFFLENBQUM7SUFDeEI7SUFFQSxJQUFJLENBQUNYLFFBQVEsQ0FBRVksUUFBUyxDQUFDO0lBQ3pCLElBQUksQ0FBQ1osUUFBUSxDQUFFTSxVQUFXLENBQUM7SUFFM0JuQixvQkFBb0IsQ0FBQzRCLElBQUksQ0FBRUMsWUFBWSxJQUFJO01BQ3pDVixVQUFVLENBQUNXLE9BQU8sR0FBS0QsWUFBWSxLQUFLLFNBQVc7TUFDbkRKLFFBQVEsQ0FBQ0ssT0FBTyxHQUFLRCxZQUFZLEtBQUssU0FBVztJQUNuRCxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNFLE1BQU0sQ0FBRXpCLE9BQVEsQ0FBQztFQUN4QjtBQUNGO0FBRUFULG9CQUFvQixDQUFDbUMsUUFBUSxDQUFFLGVBQWUsRUFBRWxDLGFBQWMsQ0FBQztBQUMvRCxlQUFlQSxhQUFhIn0=