// Copyright 2013-2022, University of Colorado Boulder

/**
 * View for the chamber pool background containing grass, cement etc grass, cement container
 *
 * @author Vasily Shakhov (Mlearner)
 */

import Matrix3 from '../../../../dot/js/Matrix3.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Node, Path, Pattern, Rectangle } from '../../../../scenery/js/imports.js';
import cementTextureDark_jpg from '../../../images/cementTextureDark_jpg.js';
import grassTexture_png from '../../../images/grassTexture_png.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
class ChamberPoolBack extends Node {
  /**
   * @param {ChamberPoolModel} chamberPoolModel
   * @param {ModelViewTransform2} modelViewTransform to convert between model and view co-ordinates
   */
  constructor(chamberPoolModel, modelViewTransform) {
    super();

    //grass
    const grassPattern = new Pattern(grassTexture_png).setTransformMatrix(Matrix3.scale(0.25));
    const grassRectYOffset = 1;
    const grassRectHeight = 10;
    const grassExtension = 2000;
    const backgroundGrassWidth = 5000;
    const poolDimensions = chamberPoolModel.poolDimensions;
    const grassRectangle = new Rectangle(-grassExtension, grassRectYOffset, backgroundGrassWidth, grassRectHeight, {
      fill: grassPattern,
      y: modelViewTransform.modelToViewY(0) - grassRectHeight
    });
    grassRectangle.clipArea = new Shape().rect(-grassExtension, grassRectYOffset, grassExtension + modelViewTransform.modelToViewX(poolDimensions.leftOpening.x1), grassRectHeight).moveTo(modelViewTransform.modelToViewX(poolDimensions.leftOpening.x2), grassRectYOffset).rect(modelViewTransform.modelToViewX(poolDimensions.leftOpening.x2), grassRectYOffset, modelViewTransform.modelToViewDeltaX(poolDimensions.rightOpening.x1 - poolDimensions.leftOpening.x2), grassRectHeight).moveTo(modelViewTransform.modelToViewX(poolDimensions.rightOpening.x2), grassRectYOffset).rect(modelViewTransform.modelToViewX(poolDimensions.rightOpening.x2), grassRectYOffset, grassExtension, grassRectHeight);
    this.addChild(grassRectangle);

    //calculated view coordinates for water
    const leftOpeningX1 = modelViewTransform.modelToViewX(poolDimensions.leftOpening.x1);
    const leftOpeningX2 = modelViewTransform.modelToViewX(poolDimensions.leftOpening.x2);
    const leftChamberX1 = modelViewTransform.modelToViewX(poolDimensions.leftChamber.x1);
    const leftChamberX2 = modelViewTransform.modelToViewX(poolDimensions.leftChamber.x2);
    const rightChamberX1 = modelViewTransform.modelToViewX(poolDimensions.rightChamber.x1);
    const rightChamberX2 = modelViewTransform.modelToViewX(poolDimensions.rightChamber.x2);
    const rightOpeningX1 = modelViewTransform.modelToViewX(poolDimensions.rightOpening.x1);
    const rightOpeningX2 = modelViewTransform.modelToViewX(poolDimensions.rightOpening.x2);
    const leftOpeningY1 = modelViewTransform.modelToViewY(poolDimensions.leftOpening.y1);
    const leftOpeningY2 = modelViewTransform.modelToViewY(poolDimensions.leftOpening.y2);
    const leftChamberY2 = modelViewTransform.modelToViewY(poolDimensions.leftChamber.y2);
    const passageY1 = modelViewTransform.modelToViewY(poolDimensions.horizontalPassage.y1);
    const passageY2 = modelViewTransform.modelToViewY(poolDimensions.horizontalPassage.y2);

    //cement border
    const cementWidth = 2;
    const shape = new Shape().moveTo(leftOpeningX1 - cementWidth, leftOpeningY1) //outer part
    .lineTo(leftOpeningX1 - cementWidth, leftOpeningY2 - cementWidth).lineTo(leftChamberX1 - cementWidth, leftOpeningY2 - cementWidth).lineTo(leftChamberX1 - cementWidth, leftChamberY2 + cementWidth).lineTo(leftChamberX2 + cementWidth, leftChamberY2 + cementWidth).lineTo(leftChamberX2 + cementWidth, passageY2 + cementWidth).lineTo(rightChamberX1 - cementWidth, passageY2 + cementWidth).lineTo(rightChamberX1 - cementWidth, leftChamberY2 + cementWidth).lineTo(rightChamberX2 + cementWidth, leftChamberY2 + cementWidth).lineTo(rightChamberX2 + cementWidth, leftOpeningY2 + cementWidth).lineTo(rightOpeningX2 + cementWidth, leftOpeningY2 + cementWidth).lineTo(rightOpeningX2 + cementWidth, leftOpeningY1).moveTo(leftOpeningX2 + cementWidth, leftOpeningY1) //inner part
    .lineTo(leftOpeningX2 + cementWidth, leftOpeningY2 - cementWidth).lineTo(leftChamberX2 + cementWidth, leftOpeningY2 - cementWidth).lineTo(leftChamberX2 + cementWidth, passageY1 - cementWidth).lineTo(rightChamberX1 - cementWidth, passageY1 - cementWidth).lineTo(rightChamberX1 - cementWidth, leftOpeningY2 + cementWidth).lineTo(rightOpeningX1 - cementWidth, leftOpeningY2 + cementWidth).lineTo(rightOpeningX1 - cementWidth, leftOpeningY1);
    this.addChild(new Path(shape, {
      stroke: new Pattern(cementTextureDark_jpg),
      lineWidth: 4,
      lineJoin: 'round'
    }));

    //white background for pool
    this.addChild(new Path(new Shape().moveTo(leftOpeningX1, leftOpeningY1 - 1).lineTo(leftOpeningX1, leftOpeningY2).lineTo(leftChamberX1, leftOpeningY2).lineTo(leftChamberX1, leftChamberY2).lineTo(leftChamberX2, leftChamberY2).lineTo(leftChamberX2, passageY2).lineTo(rightChamberX1, passageY2).lineTo(rightChamberX1, leftChamberY2).lineTo(rightChamberX2, leftChamberY2).lineTo(rightChamberX2, leftOpeningY2).lineTo(rightOpeningX2, leftOpeningY2).lineTo(rightOpeningX2, leftOpeningY1 - 1).lineTo(rightOpeningX1, leftOpeningY1 - 1).lineTo(rightOpeningX1, leftOpeningY2).lineTo(rightChamberX1, leftOpeningY2).lineTo(rightChamberX1, passageY1).lineTo(leftChamberX2, passageY1).lineTo(leftChamberX2, leftOpeningY2).lineTo(leftOpeningX2, leftOpeningY2).lineTo(leftOpeningX2, leftOpeningY1 - 1), {
      fill: '#f3f0e9'
    }));
  }
}
fluidPressureAndFlow.register('ChamberPoolBack', ChamberPoolBack);
export default ChamberPoolBack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiU2hhcGUiLCJOb2RlIiwiUGF0aCIsIlBhdHRlcm4iLCJSZWN0YW5nbGUiLCJjZW1lbnRUZXh0dXJlRGFya19qcGciLCJncmFzc1RleHR1cmVfcG5nIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJDaGFtYmVyUG9vbEJhY2siLCJjb25zdHJ1Y3RvciIsImNoYW1iZXJQb29sTW9kZWwiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJncmFzc1BhdHRlcm4iLCJzZXRUcmFuc2Zvcm1NYXRyaXgiLCJzY2FsZSIsImdyYXNzUmVjdFlPZmZzZXQiLCJncmFzc1JlY3RIZWlnaHQiLCJncmFzc0V4dGVuc2lvbiIsImJhY2tncm91bmRHcmFzc1dpZHRoIiwicG9vbERpbWVuc2lvbnMiLCJncmFzc1JlY3RhbmdsZSIsImZpbGwiLCJ5IiwibW9kZWxUb1ZpZXdZIiwiY2xpcEFyZWEiLCJyZWN0IiwibW9kZWxUb1ZpZXdYIiwibGVmdE9wZW5pbmciLCJ4MSIsIm1vdmVUbyIsIngyIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJyaWdodE9wZW5pbmciLCJhZGRDaGlsZCIsImxlZnRPcGVuaW5nWDEiLCJsZWZ0T3BlbmluZ1gyIiwibGVmdENoYW1iZXJYMSIsImxlZnRDaGFtYmVyIiwibGVmdENoYW1iZXJYMiIsInJpZ2h0Q2hhbWJlclgxIiwicmlnaHRDaGFtYmVyIiwicmlnaHRDaGFtYmVyWDIiLCJyaWdodE9wZW5pbmdYMSIsInJpZ2h0T3BlbmluZ1gyIiwibGVmdE9wZW5pbmdZMSIsInkxIiwibGVmdE9wZW5pbmdZMiIsInkyIiwibGVmdENoYW1iZXJZMiIsInBhc3NhZ2VZMSIsImhvcml6b250YWxQYXNzYWdlIiwicGFzc2FnZVkyIiwiY2VtZW50V2lkdGgiLCJzaGFwZSIsImxpbmVUbyIsInN0cm9rZSIsImxpbmVXaWR0aCIsImxpbmVKb2luIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDaGFtYmVyUG9vbEJhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgdGhlIGNoYW1iZXIgcG9vbCBiYWNrZ3JvdW5kIGNvbnRhaW5pbmcgZ3Jhc3MsIGNlbWVudCBldGMgZ3Jhc3MsIGNlbWVudCBjb250YWluZXJcclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAoTWxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFBhdGgsIFBhdHRlcm4sIFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBjZW1lbnRUZXh0dXJlRGFya19qcGcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2NlbWVudFRleHR1cmVEYXJrX2pwZy5qcyc7XHJcbmltcG9ydCBncmFzc1RleHR1cmVfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9ncmFzc1RleHR1cmVfcG5nLmpzJztcclxuaW1wb3J0IGZsdWlkUHJlc3N1cmVBbmRGbG93IGZyb20gJy4uLy4uL2ZsdWlkUHJlc3N1cmVBbmRGbG93LmpzJztcclxuXHJcbmNsYXNzIENoYW1iZXJQb29sQmFjayBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0NoYW1iZXJQb29sTW9kZWx9IGNoYW1iZXJQb29sTW9kZWxcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybSB0byBjb252ZXJ0IGJldHdlZW4gbW9kZWwgYW5kIHZpZXcgY28tb3JkaW5hdGVzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNoYW1iZXJQb29sTW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybSApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vZ3Jhc3NcclxuICAgIGNvbnN0IGdyYXNzUGF0dGVybiA9IG5ldyBQYXR0ZXJuKCBncmFzc1RleHR1cmVfcG5nICkuc2V0VHJhbnNmb3JtTWF0cml4KCBNYXRyaXgzLnNjYWxlKCAwLjI1ICkgKTtcclxuICAgIGNvbnN0IGdyYXNzUmVjdFlPZmZzZXQgPSAxO1xyXG4gICAgY29uc3QgZ3Jhc3NSZWN0SGVpZ2h0ID0gMTA7XHJcbiAgICBjb25zdCBncmFzc0V4dGVuc2lvbiA9IDIwMDA7XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kR3Jhc3NXaWR0aCA9IDUwMDA7XHJcblxyXG4gICAgY29uc3QgcG9vbERpbWVuc2lvbnMgPSBjaGFtYmVyUG9vbE1vZGVsLnBvb2xEaW1lbnNpb25zO1xyXG5cclxuICAgIGNvbnN0IGdyYXNzUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZShcclxuICAgICAgLWdyYXNzRXh0ZW5zaW9uLFxyXG4gICAgICBncmFzc1JlY3RZT2Zmc2V0LFxyXG4gICAgICBiYWNrZ3JvdW5kR3Jhc3NXaWR0aCxcclxuICAgICAgZ3Jhc3NSZWN0SGVpZ2h0LFxyXG4gICAgICB7XHJcbiAgICAgICAgZmlsbDogZ3Jhc3NQYXR0ZXJuLFxyXG4gICAgICAgIHk6IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIDAgKSAtIGdyYXNzUmVjdEhlaWdodFxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGdyYXNzUmVjdGFuZ2xlLmNsaXBBcmVhID0gbmV3IFNoYXBlKClcclxuICAgICAgLnJlY3QoXHJcbiAgICAgICAgLWdyYXNzRXh0ZW5zaW9uLFxyXG4gICAgICAgIGdyYXNzUmVjdFlPZmZzZXQsXHJcbiAgICAgICAgZ3Jhc3NFeHRlbnNpb24gKyBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBwb29sRGltZW5zaW9ucy5sZWZ0T3BlbmluZy54MSApLFxyXG4gICAgICAgIGdyYXNzUmVjdEhlaWdodCApXHJcbiAgICAgIC5tb3ZlVG8oIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHBvb2xEaW1lbnNpb25zLmxlZnRPcGVuaW5nLngyICksIGdyYXNzUmVjdFlPZmZzZXQgKVxyXG4gICAgICAucmVjdChcclxuICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBwb29sRGltZW5zaW9ucy5sZWZ0T3BlbmluZy54MiApLFxyXG4gICAgICAgIGdyYXNzUmVjdFlPZmZzZXQsXHJcbiAgICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBwb29sRGltZW5zaW9ucy5yaWdodE9wZW5pbmcueDEgLSBwb29sRGltZW5zaW9ucy5sZWZ0T3BlbmluZy54MiApLFxyXG4gICAgICAgIGdyYXNzUmVjdEhlaWdodCApXHJcbiAgICAgIC5tb3ZlVG8oIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHBvb2xEaW1lbnNpb25zLnJpZ2h0T3BlbmluZy54MiApLCBncmFzc1JlY3RZT2Zmc2V0IClcclxuICAgICAgLnJlY3QoXHJcbiAgICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggcG9vbERpbWVuc2lvbnMucmlnaHRPcGVuaW5nLngyICksXHJcbiAgICAgICAgZ3Jhc3NSZWN0WU9mZnNldCxcclxuICAgICAgICBncmFzc0V4dGVuc2lvbixcclxuICAgICAgICBncmFzc1JlY3RIZWlnaHQgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGdyYXNzUmVjdGFuZ2xlICk7XHJcblxyXG4gICAgLy9jYWxjdWxhdGVkIHZpZXcgY29vcmRpbmF0ZXMgZm9yIHdhdGVyXHJcbiAgICBjb25zdCBsZWZ0T3BlbmluZ1gxID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggcG9vbERpbWVuc2lvbnMubGVmdE9wZW5pbmcueDEgKTtcclxuICAgIGNvbnN0IGxlZnRPcGVuaW5nWDIgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBwb29sRGltZW5zaW9ucy5sZWZ0T3BlbmluZy54MiApO1xyXG4gICAgY29uc3QgbGVmdENoYW1iZXJYMSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHBvb2xEaW1lbnNpb25zLmxlZnRDaGFtYmVyLngxICk7XHJcbiAgICBjb25zdCBsZWZ0Q2hhbWJlclgyID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggcG9vbERpbWVuc2lvbnMubGVmdENoYW1iZXIueDIgKTtcclxuICAgIGNvbnN0IHJpZ2h0Q2hhbWJlclgxID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggcG9vbERpbWVuc2lvbnMucmlnaHRDaGFtYmVyLngxICk7XHJcbiAgICBjb25zdCByaWdodENoYW1iZXJYMiA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1goIHBvb2xEaW1lbnNpb25zLnJpZ2h0Q2hhbWJlci54MiApO1xyXG4gICAgY29uc3QgcmlnaHRPcGVuaW5nWDEgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBwb29sRGltZW5zaW9ucy5yaWdodE9wZW5pbmcueDEgKTtcclxuICAgIGNvbnN0IHJpZ2h0T3BlbmluZ1gyID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggcG9vbERpbWVuc2lvbnMucmlnaHRPcGVuaW5nLngyICk7XHJcbiAgICBjb25zdCBsZWZ0T3BlbmluZ1kxID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggcG9vbERpbWVuc2lvbnMubGVmdE9wZW5pbmcueTEgKTtcclxuICAgIGNvbnN0IGxlZnRPcGVuaW5nWTIgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCBwb29sRGltZW5zaW9ucy5sZWZ0T3BlbmluZy55MiApO1xyXG4gICAgY29uc3QgbGVmdENoYW1iZXJZMiA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIHBvb2xEaW1lbnNpb25zLmxlZnRDaGFtYmVyLnkyICk7XHJcbiAgICBjb25zdCBwYXNzYWdlWTEgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCBwb29sRGltZW5zaW9ucy5ob3Jpem9udGFsUGFzc2FnZS55MSApO1xyXG4gICAgY29uc3QgcGFzc2FnZVkyID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggcG9vbERpbWVuc2lvbnMuaG9yaXpvbnRhbFBhc3NhZ2UueTIgKTtcclxuXHJcbiAgICAvL2NlbWVudCBib3JkZXJcclxuICAgIGNvbnN0IGNlbWVudFdpZHRoID0gMjtcclxuICAgIGNvbnN0IHNoYXBlID0gbmV3IFNoYXBlKClcclxuICAgICAgLm1vdmVUbyggbGVmdE9wZW5pbmdYMSAtIGNlbWVudFdpZHRoLCBsZWZ0T3BlbmluZ1kxICkgLy9vdXRlciBwYXJ0XHJcbiAgICAgIC5saW5lVG8oIGxlZnRPcGVuaW5nWDEgLSBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMiAtIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggbGVmdENoYW1iZXJYMSAtIGNlbWVudFdpZHRoLCBsZWZ0T3BlbmluZ1kyIC0gY2VtZW50V2lkdGggKVxyXG4gICAgICAubGluZVRvKCBsZWZ0Q2hhbWJlclgxIC0gY2VtZW50V2lkdGgsIGxlZnRDaGFtYmVyWTIgKyBjZW1lbnRXaWR0aCApXHJcbiAgICAgIC5saW5lVG8oIGxlZnRDaGFtYmVyWDIgKyBjZW1lbnRXaWR0aCwgbGVmdENoYW1iZXJZMiArIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggbGVmdENoYW1iZXJYMiArIGNlbWVudFdpZHRoLCBwYXNzYWdlWTIgKyBjZW1lbnRXaWR0aCApXHJcbiAgICAgIC5saW5lVG8oIHJpZ2h0Q2hhbWJlclgxIC0gY2VtZW50V2lkdGgsIHBhc3NhZ2VZMiArIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRDaGFtYmVyWDEgLSBjZW1lbnRXaWR0aCwgbGVmdENoYW1iZXJZMiArIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRDaGFtYmVyWDIgKyBjZW1lbnRXaWR0aCwgbGVmdENoYW1iZXJZMiArIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRDaGFtYmVyWDIgKyBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMiArIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRPcGVuaW5nWDIgKyBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMiArIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRPcGVuaW5nWDIgKyBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMSApXHJcbiAgICAgIC5tb3ZlVG8oIGxlZnRPcGVuaW5nWDIgKyBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMSApIC8vaW5uZXIgcGFydFxyXG4gICAgICAubGluZVRvKCBsZWZ0T3BlbmluZ1gyICsgY2VtZW50V2lkdGgsIGxlZnRPcGVuaW5nWTIgLSBjZW1lbnRXaWR0aCApXHJcbiAgICAgIC5saW5lVG8oIGxlZnRDaGFtYmVyWDIgKyBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMiAtIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggbGVmdENoYW1iZXJYMiArIGNlbWVudFdpZHRoLCBwYXNzYWdlWTEgLSBjZW1lbnRXaWR0aCApXHJcbiAgICAgIC5saW5lVG8oIHJpZ2h0Q2hhbWJlclgxIC0gY2VtZW50V2lkdGgsIHBhc3NhZ2VZMSAtIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRDaGFtYmVyWDEgLSBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMiArIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRPcGVuaW5nWDEgLSBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMiArIGNlbWVudFdpZHRoIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRPcGVuaW5nWDEgLSBjZW1lbnRXaWR0aCwgbGVmdE9wZW5pbmdZMSApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBQYXRoKCBzaGFwZSwgeyBzdHJva2U6IG5ldyBQYXR0ZXJuKCBjZW1lbnRUZXh0dXJlRGFya19qcGcgKSwgbGluZVdpZHRoOiA0LCBsaW5lSm9pbjogJ3JvdW5kJyB9ICkgKTtcclxuXHJcbiAgICAvL3doaXRlIGJhY2tncm91bmQgZm9yIHBvb2xcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBQYXRoKCBuZXcgU2hhcGUoKVxyXG4gICAgICAubW92ZVRvKCBsZWZ0T3BlbmluZ1gxLCBsZWZ0T3BlbmluZ1kxIC0gMSApXHJcbiAgICAgIC5saW5lVG8oIGxlZnRPcGVuaW5nWDEsIGxlZnRPcGVuaW5nWTIgKVxyXG4gICAgICAubGluZVRvKCBsZWZ0Q2hhbWJlclgxLCBsZWZ0T3BlbmluZ1kyIClcclxuICAgICAgLmxpbmVUbyggbGVmdENoYW1iZXJYMSwgbGVmdENoYW1iZXJZMiApXHJcbiAgICAgIC5saW5lVG8oIGxlZnRDaGFtYmVyWDIsIGxlZnRDaGFtYmVyWTIgKVxyXG4gICAgICAubGluZVRvKCBsZWZ0Q2hhbWJlclgyLCBwYXNzYWdlWTIgKVxyXG4gICAgICAubGluZVRvKCByaWdodENoYW1iZXJYMSwgcGFzc2FnZVkyIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRDaGFtYmVyWDEsIGxlZnRDaGFtYmVyWTIgKVxyXG4gICAgICAubGluZVRvKCByaWdodENoYW1iZXJYMiwgbGVmdENoYW1iZXJZMiApXHJcbiAgICAgIC5saW5lVG8oIHJpZ2h0Q2hhbWJlclgyLCBsZWZ0T3BlbmluZ1kyIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRPcGVuaW5nWDIsIGxlZnRPcGVuaW5nWTIgKVxyXG4gICAgICAubGluZVRvKCByaWdodE9wZW5pbmdYMiwgbGVmdE9wZW5pbmdZMSAtIDEgKVxyXG4gICAgICAubGluZVRvKCByaWdodE9wZW5pbmdYMSwgbGVmdE9wZW5pbmdZMSAtIDEgKVxyXG4gICAgICAubGluZVRvKCByaWdodE9wZW5pbmdYMSwgbGVmdE9wZW5pbmdZMiApXHJcbiAgICAgIC5saW5lVG8oIHJpZ2h0Q2hhbWJlclgxLCBsZWZ0T3BlbmluZ1kyIClcclxuICAgICAgLmxpbmVUbyggcmlnaHRDaGFtYmVyWDEsIHBhc3NhZ2VZMSApXHJcbiAgICAgIC5saW5lVG8oIGxlZnRDaGFtYmVyWDIsIHBhc3NhZ2VZMSApXHJcbiAgICAgIC5saW5lVG8oIGxlZnRDaGFtYmVyWDIsIGxlZnRPcGVuaW5nWTIgKVxyXG4gICAgICAubGluZVRvKCBsZWZ0T3BlbmluZ1gyLCBsZWZ0T3BlbmluZ1kyIClcclxuICAgICAgLmxpbmVUbyggbGVmdE9wZW5pbmdYMiwgbGVmdE9wZW5pbmdZMSAtIDEgKSwge1xyXG4gICAgICBmaWxsOiAnI2YzZjBlOSdcclxuICAgIH0gKSApO1xyXG4gIH1cclxufVxyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdDaGFtYmVyUG9vbEJhY2snLCBDaGFtYmVyUG9vbEJhY2sgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ2hhbWJlclBvb2xCYWNrOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxRQUFRLG1DQUFtQztBQUNsRixPQUFPQyxxQkFBcUIsTUFBTSwwQ0FBMEM7QUFDNUUsT0FBT0MsZ0JBQWdCLE1BQU0scUNBQXFDO0FBQ2xFLE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUVoRSxNQUFNQyxlQUFlLFNBQVNQLElBQUksQ0FBQztFQUVqQztBQUNGO0FBQ0E7QUFDQTtFQUNFUSxXQUFXQSxDQUFFQyxnQkFBZ0IsRUFBRUMsa0JBQWtCLEVBQUc7SUFFbEQsS0FBSyxDQUFDLENBQUM7O0lBRVA7SUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBSVQsT0FBTyxDQUFFRyxnQkFBaUIsQ0FBQyxD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