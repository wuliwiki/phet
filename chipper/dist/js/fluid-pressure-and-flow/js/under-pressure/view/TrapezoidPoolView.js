// Copyright 2013-2021, University of Colorado Boulder

/**
 * View for trapezoid pool.
 *
 * @author Vasily Shakhov (Mlearner)
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import { Node } from '../../../../scenery/js/imports.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
import FaucetFluidNode from './FaucetFluidNode.js';
import TrapezoidPoolBack from './TrapezoidPoolBack.js';
import TrapezoidPoolGrid from './TrapezoidPoolGrid.js';
import TrapezoidPoolWaterNode from './TrapezoidPoolWaterNode.js';
class TrapezoidPoolView extends Node {
  /**
   * @param {TrapezoidPoolModel} trapezoidPoolModel
   * @param {ModelViewTransform2 } modelViewTransform to convert between model and view co-ordinates
   */
  constructor(trapezoidPoolModel, modelViewTransform) {
    super();
    const poolDimensions = trapezoidPoolModel.poolDimensions;

    // add pool back
    this.addChild(new TrapezoidPoolBack(trapezoidPoolModel, modelViewTransform));

    // add fluids
    const inputFaucetFluidMaxHeight = Math.abs(modelViewTransform.modelToViewDeltaY(trapezoidPoolModel.inputFaucet.position.y - poolDimensions.bottomChamber.y2));
    this.addChild(new FaucetFluidNode(trapezoidPoolModel.inputFaucet, trapezoidPoolModel, modelViewTransform, inputFaucetFluidMaxHeight));
    const outputFaucetFluidMaxHeight = 1000;
    this.addChild(new FaucetFluidNode(trapezoidPoolModel.outputFaucet, trapezoidPoolModel, modelViewTransform, outputFaucetFluidMaxHeight));

    // add water
    this.addChild(new TrapezoidPoolWaterNode(trapezoidPoolModel, modelViewTransform));

    // pool dimensions in view values
    const poolLeftX = poolDimensions.leftChamber.centerTop - poolDimensions.leftChamber.widthBottom / 2;
    const poolTopY = poolDimensions.leftChamber.y;
    const poolRightX = poolDimensions.rightChamber.centerTop + poolDimensions.rightChamber.widthTop / 2;
    const poolBottomY = poolDimensions.leftChamber.y - poolDimensions.leftChamber.height - 0.3;
    const poolHeight = poolDimensions.leftChamber.height;
    const labelXPosition = modelViewTransform.modelToViewX((poolDimensions.leftChamber.centerTop + poolDimensions.leftChamber.widthTop / 2 + poolDimensions.rightChamber.centerTop - poolDimensions.rightChamber.widthTop / 2) / 2);
    const slantMultiplier = 0.45; // Empirically determined to make labels line up in space between the pools

    // add grid
    this.addChild(new TrapezoidPoolGrid(trapezoidPoolModel.underPressureModel, modelViewTransform, poolLeftX, poolTopY, poolRightX, poolBottomY, poolHeight, labelXPosition, slantMultiplier));
  }
}
fluidPressureAndFlow.register('TrapezoidPoolView', TrapezoidPoolView);
export default TrapezoidPoolView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJGYXVjZXRGbHVpZE5vZGUiLCJUcmFwZXpvaWRQb29sQmFjayIsIlRyYXBlem9pZFBvb2xHcmlkIiwiVHJhcGV6b2lkUG9vbFdhdGVyTm9kZSIsIlRyYXBlem9pZFBvb2xWaWV3IiwiY29uc3RydWN0b3IiLCJ0cmFwZXpvaWRQb29sTW9kZWwiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwb29sRGltZW5zaW9ucyIsImFkZENoaWxkIiwiaW5wdXRGYXVjZXRGbHVpZE1heEhlaWdodCIsIk1hdGgiLCJhYnMiLCJtb2RlbFRvVmlld0RlbHRhWSIsImlucHV0RmF1Y2V0IiwicG9zaXRpb24iLCJ5IiwiYm90dG9tQ2hhbWJlciIsInkyIiwib3V0cHV0RmF1Y2V0Rmx1aWRNYXhIZWlnaHQiLCJvdXRwdXRGYXVjZXQiLCJwb29sTGVmdFgiLCJsZWZ0Q2hhbWJlciIsImNlbnRlclRvcCIsIndpZHRoQm90dG9tIiwicG9vbFRvcFkiLCJwb29sUmlnaHRYIiwicmlnaHRDaGFtYmVyIiwid2lkdGhUb3AiLCJwb29sQm90dG9tWSIsImhlaWdodCIsInBvb2xIZWlnaHQiLCJsYWJlbFhQb3NpdGlvbiIsIm1vZGVsVG9WaWV3WCIsInNsYW50TXVsdGlwbGllciIsInVuZGVyUHJlc3N1cmVNb2RlbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVHJhcGV6b2lkUG9vbFZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgdHJhcGV6b2lkIHBvb2wuXHJcbiAqXHJcbiAqIEBhdXRob3IgVmFzaWx5IFNoYWtob3YgKE1sZWFybmVyKVxyXG4gKiBAYXV0aG9yIFNpZGRoYXJ0aGEgQ2hpbnRoYXBhbGx5IChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBmbHVpZFByZXNzdXJlQW5kRmxvdyBmcm9tICcuLi8uLi9mbHVpZFByZXNzdXJlQW5kRmxvdy5qcyc7XHJcbmltcG9ydCBGYXVjZXRGbHVpZE5vZGUgZnJvbSAnLi9GYXVjZXRGbHVpZE5vZGUuanMnO1xyXG5pbXBvcnQgVHJhcGV6b2lkUG9vbEJhY2sgZnJvbSAnLi9UcmFwZXpvaWRQb29sQmFjay5qcyc7XHJcbmltcG9ydCBUcmFwZXpvaWRQb29sR3JpZCBmcm9tICcuL1RyYXBlem9pZFBvb2xHcmlkLmpzJztcclxuaW1wb3J0IFRyYXBlem9pZFBvb2xXYXRlck5vZGUgZnJvbSAnLi9UcmFwZXpvaWRQb29sV2F0ZXJOb2RlLmpzJztcclxuXHJcbmNsYXNzIFRyYXBlem9pZFBvb2xWaWV3IGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VHJhcGV6b2lkUG9vbE1vZGVsfSB0cmFwZXpvaWRQb29sTW9kZWxcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTIgfSBtb2RlbFZpZXdUcmFuc2Zvcm0gdG8gY29udmVydCBiZXR3ZWVuIG1vZGVsIGFuZCB2aWV3IGNvLW9yZGluYXRlc1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0cmFwZXpvaWRQb29sTW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybSApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGNvbnN0IHBvb2xEaW1lbnNpb25zID0gdHJhcGV6b2lkUG9vbE1vZGVsLnBvb2xEaW1lbnNpb25zO1xyXG5cclxuICAgIC8vIGFkZCBwb29sIGJhY2tcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBUcmFwZXpvaWRQb29sQmFjayggdHJhcGV6b2lkUG9vbE1vZGVsLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSApO1xyXG5cclxuICAgIC8vIGFkZCBmbHVpZHNcclxuICAgIGNvbnN0IGlucHV0RmF1Y2V0Rmx1aWRNYXhIZWlnaHQgPSBNYXRoLmFicyggbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCB0cmFwZXpvaWRQb29sTW9kZWwuaW5wdXRGYXVjZXQucG9zaXRpb24ueSAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9vbERpbWVuc2lvbnMuYm90dG9tQ2hhbWJlci55MiApICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgRmF1Y2V0Rmx1aWROb2RlKFxyXG4gICAgICB0cmFwZXpvaWRQb29sTW9kZWwuaW5wdXRGYXVjZXQsIHRyYXBlem9pZFBvb2xNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtLCBpbnB1dEZhdWNldEZsdWlkTWF4SGVpZ2h0ICkgKTtcclxuXHJcbiAgICBjb25zdCBvdXRwdXRGYXVjZXRGbHVpZE1heEhlaWdodCA9IDEwMDA7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgRmF1Y2V0Rmx1aWROb2RlKCB0cmFwZXpvaWRQb29sTW9kZWwub3V0cHV0RmF1Y2V0LCB0cmFwZXpvaWRQb29sTW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgb3V0cHV0RmF1Y2V0Rmx1aWRNYXhIZWlnaHQgKSApO1xyXG5cclxuICAgIC8vIGFkZCB3YXRlclxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFRyYXBlem9pZFBvb2xXYXRlck5vZGUoIHRyYXBlem9pZFBvb2xNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtICkgKTtcclxuXHJcbiAgICAvLyBwb29sIGRpbWVuc2lvbnMgaW4gdmlldyB2YWx1ZXNcclxuICAgIGNvbnN0IHBvb2xMZWZ0WCA9IHBvb2xEaW1lbnNpb25zLmxlZnRDaGFtYmVyLmNlbnRlclRvcCAtIHBvb2xEaW1lbnNpb25zLmxlZnRDaGFtYmVyLndpZHRoQm90dG9tIC8gMjtcclxuICAgIGNvbnN0IHBvb2xUb3BZID0gcG9vbERpbWVuc2lvbnMubGVmdENoYW1iZXIueTtcclxuICAgIGNvbnN0IHBvb2xSaWdodFggPSBwb29sRGltZW5zaW9ucy5yaWdodENoYW1iZXIuY2VudGVyVG9wICsgcG9vbERpbWVuc2lvbnMucmlnaHRDaGFtYmVyLndpZHRoVG9wIC8gMjtcclxuICAgIGNvbnN0IHBvb2xCb3R0b21ZID0gcG9vbERpbWVuc2lvbnMubGVmdENoYW1iZXIueSAtIHBvb2xEaW1lbnNpb25zLmxlZnRDaGFtYmVyLmhlaWdodCAtIDAuMztcclxuICAgIGNvbnN0IHBvb2xIZWlnaHQgPSBwb29sRGltZW5zaW9ucy5sZWZ0Q2hhbWJlci5oZWlnaHQ7XHJcblxyXG4gICAgY29uc3QgbGFiZWxYUG9zaXRpb24gPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKFxyXG4gICAgICAoIHBvb2xEaW1lbnNpb25zLmxlZnRDaGFtYmVyLmNlbnRlclRvcCArIHBvb2xEaW1lbnNpb25zLmxlZnRDaGFtYmVyLndpZHRoVG9wIC8gMiArXHJcbiAgICAgICAgcG9vbERpbWVuc2lvbnMucmlnaHRDaGFtYmVyLmNlbnRlclRvcCAtIHBvb2xEaW1lbnNpb25zLnJpZ2h0Q2hhbWJlci53aWR0aFRvcCAvIDIgKSAvIDIgKTtcclxuXHJcbiAgICBjb25zdCBzbGFudE11bHRpcGxpZXIgPSAwLjQ1OyAvLyBFbXBpcmljYWxseSBkZXRlcm1pbmVkIHRvIG1ha2UgbGFiZWxzIGxpbmUgdXAgaW4gc3BhY2UgYmV0d2VlbiB0aGUgcG9vbHNcclxuXHJcbiAgICAvLyBhZGQgZ3JpZFxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFRyYXBlem9pZFBvb2xHcmlkKCB0cmFwZXpvaWRQb29sTW9kZWwudW5kZXJQcmVzc3VyZU1vZGVsLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHBvb2xMZWZ0WCxcclxuICAgICAgcG9vbFRvcFksIHBvb2xSaWdodFgsIHBvb2xCb3R0b21ZLCBwb29sSGVpZ2h0LCBsYWJlbFhQb3NpdGlvbiwgc2xhbnRNdWx0aXBsaWVyICkgKTtcclxuICB9XHJcbn1cclxuXHJcbmZsdWlkUHJlc3N1cmVBbmRGbG93LnJlZ2lzdGVyKCAnVHJhcGV6b2lkUG9vbFZpZXcnLCBUcmFwZXpvaWRQb29sVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBUcmFwZXpvaWRQb29sVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUNoRSxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFDdEQsT0FBT0Msc0JBQXNCLE1BQU0sNkJBQTZCO0FBRWhFLE1BQU1DLGlCQUFpQixTQUFTTixJQUFJLENBQUM7RUFFbkM7QUFDRjtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsa0JBQWtCLEVBQUVDLGtCQUFrQixFQUFHO0lBRXBELEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUMsY0FBYyxHQUFHRixrQkFBa0IsQ0FBQ0UsY0FBYzs7SUFFeEQ7SUFDQSxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJUixpQkFBaUIsQ0FBRUssa0JBQWtCLEVBQUVDLGtCQUFtQixDQUFFLENBQUM7O0lBRWhGO0lBQ0EsTUFBTUcseUJBQXlCLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFFTCxrQkFBa0IsQ0FBQ00saUJBQWlCLENBQUVQLGtCQUFrQixDQUFDUSxXQUFXLENBQUNDLFFBQVEsQ0FBQ0MsQ0FBQyxHQUN6Q1IsY0FBYyxDQUFDUyxhQUFhLENBQUNDLEVBQUcsQ0FBRSxDQUFDO0lBQ3JILElBQUksQ0FBQ1QsUUFBUSxDQUFFLElBQUlULGVBQWUsQ0FDaENNLGtCQUFrQixDQUFDUSxXQUFXLEVBQUVSLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRUcseUJBQTBCLENBQUUsQ0FBQztJQUV2RyxNQUFNUywwQkFBMEIsR0FBRyxJQUFJO0lBQ3ZDLElBQUksQ0FBQ1YsUUFBUSxDQUFFLElBQUlULGVBQWUsQ0FBRU0sa0JBQWtCLENBQUNjLFlBQVksRUFBRWQsa0JBQWtCLEVBQUVDLGtCQUFrQixFQUN6R1ksMEJBQTJCLENBQUUsQ0FBQzs7SUFFaEM7SUFDQSxJQUFJLENBQUNWLFFBQVEsQ0FBRSxJQUFJTixzQkFBc0IsQ0FBRUcsa0JBQWtCLEVBQUVDLGtCQUFtQixDQUFFLENBQUM7O0lBRXJGO0lBQ0EsTUFBTWMsU0FBUyxHQUFHYixjQUFjLENBQUNjLFdBQVcsQ0FBQ0MsU0FBUyxHQUFHZixjQUFjLENBQUNjLFdBQVcsQ0FBQ0UsV0FBVyxHQUFHLENBQUM7SUFDbkcsTUFBTUMsUUFBUSxHQUFHakIsY0FBYyxDQUFDYyxXQUFXLENBQUNOLENBQUM7SUFDN0MsTUFBTVUsVUFBVSxHQUFHbEIsY0FBYyxDQUFDbUIsWUFBWSxDQUFDSixTQUFTLEdBQUdmLGNBQWMsQ0FBQ21CLFlBQVksQ0FBQ0MsUUFBUSxHQUFHLENBQUM7SUFDbkcsTUFBTUMsV0FBVyxHQUFHckIsY0FBYyxDQUFDYyxXQUFXLENBQUNOLENBQUMsR0FBR1IsY0FBYyxDQUFDYyxXQUFXLENBQUNRLE1BQU0sR0FBRyxHQUFHO0lBQzFGLE1BQU1DLFVBQVUsR0FBR3ZCLGNBQWMsQ0FBQ2MsV0FBVyxDQUFDUSxNQUFNO0lBRXBELE1BQU1FLGNBQWMsR0FBR3pCLGtCQUFrQixDQUFDMEIsWUFBWSxDQUNwRCxDQUFFekIsY0FBYyxDQUFDYyxXQUFXLENBQUNDLFNBQVMsR0FBR2YsY0FBYyxDQUFDYyxXQUFXLENBQUNNLFFBQVEsR0FBRyxDQUFDLEdBQzlFcEIsY0FBYyxDQUFDbUIsWUFBWSxDQUFDSixTQUFTLEdBQUdmLGNBQWMsQ0FBQ21CLFlBQVksQ0FBQ0MsUUFBUSxHQUFHLENBQUMsSUFBSyxDQUFFLENBQUM7SUFFNUYsTUFBTU0sZUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDOztJQUU5QjtJQUNBLElBQUksQ0FBQ3pCLFFBQVEsQ0FBRSxJQUFJUCxpQkFBaUIsQ0FBRUksa0JBQWtCLENBQUM2QixrQkFBa0IsRUFBRTVCLGtCQUFrQixFQUFFYyxTQUFTLEVBQ3hHSSxRQUFRLEVBQUVDLFVBQVUsRUFBRUcsV0FBVyxFQUFFRSxVQUFVLEVBQUVDLGNBQWMsRUFBRUUsZUFBZ0IsQ0FBRSxDQUFDO0VBQ3RGO0FBQ0Y7QUFFQW5DLG9CQUFvQixDQUFDcUMsUUFBUSxDQUFFLG1CQUFtQixFQUFFaEMsaUJBQWtCLENBQUM7QUFDdkUsZUFBZUEsaUJBQWlCIn0=