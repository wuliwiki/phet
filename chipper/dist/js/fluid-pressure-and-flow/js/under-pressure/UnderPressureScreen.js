// Copyright 2016-2022, University of Colorado Boulder

/**
 * The screen (model + view) for the Under Pressure screen, which appears as a standalone sim in the "Under Pressure" sim
 * as well as the 1st screen in the "Fluid Pressure and Flow" sim.
 *
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import underPressure_png from '../../images/underPressure_png.js';
import fluidPressureAndFlow from '../fluidPressureAndFlow.js';
import FluidPressureAndFlowStrings from '../FluidPressureAndFlowStrings.js';
import UnderPressureModel from './model/UnderPressureModel.js';
import UnderPressureScreenView from './view/UnderPressureScreenView.js';
class UnderPressureScreen extends Screen {
  constructor() {
    const options = {
      name: FluidPressureAndFlowStrings.underPressureScreenTitleStringProperty,
      backgroundColorProperty: new Property('white'),
      homeScreenIcon: new ScreenIcon(new Image(underPressure_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      })
    };
    super(() => new UnderPressureModel(), model => new UnderPressureScreenView(model), options);
  }
}
fluidPressureAndFlow.register('UnderPressureScreen', UnderPressureScreen);
export default UnderPressureScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsInVuZGVyUHJlc3N1cmVfcG5nIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJGbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MiLCJVbmRlclByZXNzdXJlTW9kZWwiLCJVbmRlclByZXNzdXJlU2NyZWVuVmlldyIsIlVuZGVyUHJlc3N1cmVTY3JlZW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJuYW1lIiwidW5kZXJQcmVzc3VyZVNjcmVlblRpdGxlU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVuZGVyUHJlc3N1cmVTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIHNjcmVlbiAobW9kZWwgKyB2aWV3KSBmb3IgdGhlIFVuZGVyIFByZXNzdXJlIHNjcmVlbiwgd2hpY2ggYXBwZWFycyBhcyBhIHN0YW5kYWxvbmUgc2ltIGluIHRoZSBcIlVuZGVyIFByZXNzdXJlXCIgc2ltXHJcbiAqIGFzIHdlbGwgYXMgdGhlIDFzdCBzY3JlZW4gaW4gdGhlIFwiRmx1aWQgUHJlc3N1cmUgYW5kIEZsb3dcIiBzaW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHVuZGVyUHJlc3N1cmVfcG5nIGZyb20gJy4uLy4uL2ltYWdlcy91bmRlclByZXNzdXJlX3BuZy5qcyc7XHJcbmltcG9ydCBmbHVpZFByZXNzdXJlQW5kRmxvdyBmcm9tICcuLi9mbHVpZFByZXNzdXJlQW5kRmxvdy5qcyc7XHJcbmltcG9ydCBGbHVpZFByZXNzdXJlQW5kRmxvd1N0cmluZ3MgZnJvbSAnLi4vRmx1aWRQcmVzc3VyZUFuZEZsb3dTdHJpbmdzLmpzJztcclxuaW1wb3J0IFVuZGVyUHJlc3N1cmVNb2RlbCBmcm9tICcuL21vZGVsL1VuZGVyUHJlc3N1cmVNb2RlbC5qcyc7XHJcbmltcG9ydCBVbmRlclByZXNzdXJlU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvVW5kZXJQcmVzc3VyZVNjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgVW5kZXJQcmVzc3VyZVNjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IEZsdWlkUHJlc3N1cmVBbmRGbG93U3RyaW5ncy51bmRlclByZXNzdXJlU2NyZWVuVGl0bGVTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggJ3doaXRlJyApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggdW5kZXJQcmVzc3VyZV9wbmcgKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgVW5kZXJQcmVzc3VyZU1vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBVbmRlclByZXNzdXJlU2NyZWVuVmlldyggbW9kZWwgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmZsdWlkUHJlc3N1cmVBbmRGbG93LnJlZ2lzdGVyKCAnVW5kZXJQcmVzc3VyZVNjcmVlbicsIFVuZGVyUHJlc3N1cmVTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgVW5kZXJQcmVzc3VyZVNjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLGlCQUFpQixNQUFNLG1DQUFtQztBQUNqRSxPQUFPQyxvQkFBb0IsTUFBTSw0QkFBNEI7QUFDN0QsT0FBT0MsMkJBQTJCLE1BQU0sbUNBQW1DO0FBQzNFLE9BQU9DLGtCQUFrQixNQUFNLCtCQUErQjtBQUM5RCxPQUFPQyx1QkFBdUIsTUFBTSxtQ0FBbUM7QUFFdkUsTUFBTUMsbUJBQW1CLFNBQVNSLE1BQU0sQ0FBQztFQUV2Q1MsV0FBV0EsQ0FBQSxFQUFHO0lBRVosTUFBTUMsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRU4sMkJBQTJCLENBQUNPLHNDQUFzQztNQUN4RUMsdUJBQXVCLEVBQUUsSUFBSWQsUUFBUSxDQUFFLE9BQVEsQ0FBQztNQUNoRGUsY0FBYyxFQUFFLElBQUliLFVBQVUsQ0FBRSxJQUFJQyxLQUFLLENBQUVDLGlCQUFrQixDQUFDLEVBQUU7UUFDOURZLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUU7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUNILE1BQU0sSUFBSVYsa0JBQWtCLENBQUMsQ0FBQyxFQUM5QlcsS0FBSyxJQUFJLElBQUlWLHVCQUF1QixDQUFFVSxLQUFNLENBQUMsRUFDN0NQLE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQU4sb0JBQW9CLENBQUNjLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRVYsbUJBQW9CLENBQUM7QUFDM0UsZUFBZUEsbUJBQW1CIn0=