// Copyright 2013-2020, University of Colorado Boulder

/**
 * Model for square pool screen.
 *
 * @author Vasily Shakhov (Mlearner)
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import Constants from '../../common/Constants.js';
import fluidPressureAndFlow from '../../fluidPressureAndFlow.js';
import FaucetModel from './FaucetModel.js';
import PoolWithFaucetsModel from './PoolWithFaucetsModel.js';
class SquarePoolModel extends PoolWithFaucetsModel {
  /**
   * @param {UnderPressureModel} underPressureModel
   */
  constructor(underPressureModel) {
    const maxHeight = Constants.MAX_POOL_HEIGHT; // @public - Meters

    //TODO this assignment makes no sense
    const maxVolume = maxHeight; // @public - Liters

    // empirically determined to make sure input faucet is above ground , output faucet is below ground and output
    // faucet is attached to the pool
    const inputFaucetX = 2.7;
    const inputFaucetY = 0.44;
    const outputFaucetX = 6.6;
    const outputFaucetY = -3.45;
    const inputFaucet = new FaucetModel(new Vector2(inputFaucetX, inputFaucetY), 1, 0.42); // @public
    const outputFaucet = new FaucetModel(new Vector2(outputFaucetX, outputFaucetY), 1, 0.3); // @public

    super(underPressureModel, inputFaucet, outputFaucet, maxVolume);
    this.maxHeight = maxHeight;
    this.maxVolume = maxVolume;
    this.inputFaucet = inputFaucet;
    this.outputFaucet = outputFaucet;
    this.underPressureModel = underPressureModel;

    // empirically determined to match the visual appearance from design document
    const poolLeftX = 2.3;
    const poolRightX = 6;

    // @public
    this.poolDimensions = {
      x1: poolLeftX,
      y1: 0,
      // pool top y
      x2: poolRightX,
      y2: -this.maxHeight // pool bottom y
    };
  }

  /**
   * @public
   * Returns height of the water above the given position
   * @param {number} x - position in meters
   * @param {number} y - position in meters
   * @returns {number} height of the water above the y
   */
  getWaterHeightAboveY(x, y) {
    return this.poolDimensions.y2 + this.maxHeight * this.volumeProperty.value / this.maxVolume - y;
  }

  /**
   * @public
   * Returns true if the given point is inside the square pool, false otherwise.
   * @param {number} x - position in meters
   * @param {number} y - position in meters
   * @returns {boolean}
   */
  isPointInsidePool(x, y) {
    return x > this.poolDimensions.x1 && x < this.poolDimensions.x2 && y > this.poolDimensions.y2 && y < this.poolDimensions.y1;
  }
}
fluidPressureAndFlow.register('SquarePoolModel', SquarePoolModel);
export default SquarePoolModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiQ29uc3RhbnRzIiwiZmx1aWRQcmVzc3VyZUFuZEZsb3ciLCJGYXVjZXRNb2RlbCIsIlBvb2xXaXRoRmF1Y2V0c01vZGVsIiwiU3F1YXJlUG9vbE1vZGVsIiwiY29uc3RydWN0b3IiLCJ1bmRlclByZXNzdXJlTW9kZWwiLCJtYXhIZWlnaHQiLCJNQVhfUE9PTF9IRUlHSFQiLCJtYXhWb2x1bWUiLCJpbnB1dEZhdWNldFgiLCJpbnB1dEZhdWNldFkiLCJvdXRwdXRGYXVjZXRYIiwib3V0cHV0RmF1Y2V0WSIsImlucHV0RmF1Y2V0Iiwib3V0cHV0RmF1Y2V0IiwicG9vbExlZnRYIiwicG9vbFJpZ2h0WCIsInBvb2xEaW1lbnNpb25zIiwieDEiLCJ5MSIsIngyIiwieTIiLCJnZXRXYXRlckhlaWdodEFib3ZlWSIsIngiLCJ5Iiwidm9sdW1lUHJvcGVydHkiLCJ2YWx1ZSIsImlzUG9pbnRJbnNpZGVQb29sIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTcXVhcmVQb29sTW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIHNxdWFyZSBwb29sIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAoTWxlYXJuZXIpXHJcbiAqIEBhdXRob3IgU2lkZGhhcnRoYSBDaGludGhhcGFsbHkgKEFjdHVhbCBDb25jZXB0cylcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBmbHVpZFByZXNzdXJlQW5kRmxvdyBmcm9tICcuLi8uLi9mbHVpZFByZXNzdXJlQW5kRmxvdy5qcyc7XHJcbmltcG9ydCBGYXVjZXRNb2RlbCBmcm9tICcuL0ZhdWNldE1vZGVsLmpzJztcclxuaW1wb3J0IFBvb2xXaXRoRmF1Y2V0c01vZGVsIGZyb20gJy4vUG9vbFdpdGhGYXVjZXRzTW9kZWwuanMnO1xyXG5cclxuY2xhc3MgU3F1YXJlUG9vbE1vZGVsIGV4dGVuZHMgUG9vbFdpdGhGYXVjZXRzTW9kZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1VuZGVyUHJlc3N1cmVNb2RlbH0gdW5kZXJQcmVzc3VyZU1vZGVsXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHVuZGVyUHJlc3N1cmVNb2RlbCApIHtcclxuXHJcbiAgICBjb25zdCBtYXhIZWlnaHQgPSBDb25zdGFudHMuTUFYX1BPT0xfSEVJR0hUOyAvLyBAcHVibGljIC0gTWV0ZXJzXHJcblxyXG4gICAgLy9UT0RPIHRoaXMgYXNzaWdubWVudCBtYWtlcyBubyBzZW5zZVxyXG4gICAgY29uc3QgbWF4Vm9sdW1lID0gbWF4SGVpZ2h0OyAvLyBAcHVibGljIC0gTGl0ZXJzXHJcblxyXG4gICAgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZCB0byBtYWtlIHN1cmUgaW5wdXQgZmF1Y2V0IGlzIGFib3ZlIGdyb3VuZCAsIG91dHB1dCBmYXVjZXQgaXMgYmVsb3cgZ3JvdW5kIGFuZCBvdXRwdXRcclxuICAgIC8vIGZhdWNldCBpcyBhdHRhY2hlZCB0byB0aGUgcG9vbFxyXG4gICAgY29uc3QgaW5wdXRGYXVjZXRYID0gMi43O1xyXG4gICAgY29uc3QgaW5wdXRGYXVjZXRZID0gMC40NDtcclxuICAgIGNvbnN0IG91dHB1dEZhdWNldFggPSA2LjY7XHJcbiAgICBjb25zdCBvdXRwdXRGYXVjZXRZID0gLTMuNDU7XHJcbiAgICBjb25zdCBpbnB1dEZhdWNldCA9IG5ldyBGYXVjZXRNb2RlbCggbmV3IFZlY3RvcjIoIGlucHV0RmF1Y2V0WCwgaW5wdXRGYXVjZXRZICksIDEsIDAuNDIgKTsgLy8gQHB1YmxpY1xyXG4gICAgY29uc3Qgb3V0cHV0RmF1Y2V0ID0gbmV3IEZhdWNldE1vZGVsKCBuZXcgVmVjdG9yMiggb3V0cHV0RmF1Y2V0WCwgb3V0cHV0RmF1Y2V0WSApLCAxLCAwLjMgKTsgLy8gQHB1YmxpY1xyXG5cclxuICAgIHN1cGVyKCB1bmRlclByZXNzdXJlTW9kZWwsIGlucHV0RmF1Y2V0LCBvdXRwdXRGYXVjZXQsIG1heFZvbHVtZSApO1xyXG5cclxuICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xyXG4gICAgdGhpcy5tYXhWb2x1bWUgPSBtYXhWb2x1bWU7XHJcbiAgICB0aGlzLmlucHV0RmF1Y2V0ID0gaW5wdXRGYXVjZXQ7XHJcbiAgICB0aGlzLm91dHB1dEZhdWNldCA9IG91dHB1dEZhdWNldDtcclxuICAgIHRoaXMudW5kZXJQcmVzc3VyZU1vZGVsID0gdW5kZXJQcmVzc3VyZU1vZGVsO1xyXG5cclxuICAgIC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWQgdG8gbWF0Y2ggdGhlIHZpc3VhbCBhcHBlYXJhbmNlIGZyb20gZGVzaWduIGRvY3VtZW50XHJcbiAgICBjb25zdCBwb29sTGVmdFggPSAyLjM7XHJcbiAgICBjb25zdCBwb29sUmlnaHRYID0gNjtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLnBvb2xEaW1lbnNpb25zID0ge1xyXG4gICAgICB4MTogcG9vbExlZnRYLFxyXG4gICAgICB5MTogMCwgLy8gcG9vbCB0b3AgeVxyXG4gICAgICB4MjogcG9vbFJpZ2h0WCxcclxuICAgICAgeTI6IC10aGlzLm1heEhlaWdodCAgLy8gcG9vbCBib3R0b20geVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBSZXR1cm5zIGhlaWdodCBvZiB0aGUgd2F0ZXIgYWJvdmUgdGhlIGdpdmVuIHBvc2l0aW9uXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBwb3NpdGlvbiBpbiBtZXRlcnNcclxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHBvc2l0aW9uIGluIG1ldGVyc1xyXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IGhlaWdodCBvZiB0aGUgd2F0ZXIgYWJvdmUgdGhlIHlcclxuICAgKi9cclxuICBnZXRXYXRlckhlaWdodEFib3ZlWSggeCwgeSApIHtcclxuICAgIHJldHVybiB0aGlzLnBvb2xEaW1lbnNpb25zLnkyICsgdGhpcy5tYXhIZWlnaHQgKiB0aGlzLnZvbHVtZVByb3BlcnR5LnZhbHVlIC8gdGhpcy5tYXhWb2x1bWUgLSB5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gcG9pbnQgaXMgaW5zaWRlIHRoZSBzcXVhcmUgcG9vbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gcG9zaXRpb24gaW4gbWV0ZXJzXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBwb3NpdGlvbiBpbiBtZXRlcnNcclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBpc1BvaW50SW5zaWRlUG9vbCggeCwgeSApIHtcclxuICAgIHJldHVybiB4ID4gdGhpcy5wb29sRGltZW5zaW9ucy54MSAmJiB4IDwgdGhpcy5wb29sRGltZW5zaW9ucy54MiAmJlxyXG4gICAgICAgICAgIHkgPiB0aGlzLnBvb2xEaW1lbnNpb25zLnkyICYmIHkgPCB0aGlzLnBvb2xEaW1lbnNpb25zLnkxO1xyXG4gIH1cclxufVxyXG5cclxuZmx1aWRQcmVzc3VyZUFuZEZsb3cucmVnaXN0ZXIoICdTcXVhcmVQb29sTW9kZWwnLCBTcXVhcmVQb29sTW9kZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgU3F1YXJlUG9vbE1vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsU0FBUyxNQUFNLDJCQUEyQjtBQUNqRCxPQUFPQyxvQkFBb0IsTUFBTSwrQkFBK0I7QUFDaEUsT0FBT0Ms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