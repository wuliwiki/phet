// Copyright 2020-2021, University of Colorado Boulder

/**
 * HoldingBox is the area in the model where items that have value (assets, debts, chips, and such) hang out when not in
 * use. It is basically just a rectangular space that keeps track of where things go within it.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import numberLineOperations from '../../numberLineOperations.js';
class HoldingBox {
  /**
   * @param {Vector2} position - position in model space of the rectangle's upper left corner
   * @param {Dimension2} size
   * @param {ValueItem[]} items
   */
  constructor(position, size, items) {
    // @public (read-only)
    this.rectangleBounds = new Bounds2(position.x, position.y, position.x + size.width, position.y + size.height);

    // map of items to storage positions, populated below
    this.mapOfItemsToStoragePositions = new Map();

    // Position each of the items and remember where each one goes when returned.
    const interItemSpacing = size.height / items.length;
    const yPositionOffset = interItemSpacing / 2;
    items.forEach((item, index) => {
      item.teleportTo(new Vector2(this.rectangleBounds.centerX, this.rectangleBounds.minY + yPositionOffset + index * interItemSpacing));
      this.mapOfItemsToStoragePositions.set(item, item.positionProperty.value);
    });
  }

  /**
   * Return the provided item to its original position within this box.
   * @param {ValueItem }item
   * @param {boolean} animate
   * @public
   */
  returnItem(item, animate) {
    const storagePosition = this.mapOfItemsToStoragePositions.get(item);
    assert && assert(storagePosition, 'the provided item does not go in this box');
    if (animate) {
      item.animateTo(storagePosition);
    } else {
      item.teleportTo(storagePosition);
    }
  }

  /**
   * Returns true if this box holds the provided item.
   * @param {ValueItem} item
   * @returns {boolean}
   * @public
   */
  holdsItem(item) {
    return this.mapOfItemsToStoragePositions.get(item) !== undefined;
  }
}
numberLineOperations.register('HoldingBox', HoldingBox);
export default HoldingBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiVmVjdG9yMiIsIm51bWJlckxpbmVPcGVyYXRpb25zIiwiSG9sZGluZ0JveCIsImNvbnN0cnVjdG9yIiwicG9zaXRpb24iLCJzaXplIiwiaXRlbXMiLCJyZWN0YW5nbGVCb3VuZHMiLCJ4IiwieSIsIndpZHRoIiwiaGVpZ2h0IiwibWFwT2ZJdGVtc1RvU3RvcmFnZVBvc2l0aW9ucyIsIk1hcCIsImludGVySXRlbVNwYWNpbmciLCJsZW5ndGgiLCJ5UG9zaXRpb25PZmZzZXQiLCJmb3JFYWNoIiwiaXRlbSIsImluZGV4IiwidGVsZXBvcnRUbyIsImNlbnRlclgiLCJtaW5ZIiwic2V0IiwicG9zaXRpb25Qcm9wZXJ0eSIsInZhbHVlIiwicmV0dXJuSXRlbSIsImFuaW1hdGUiLCJzdG9yYWdlUG9zaXRpb24iLCJnZXQiLCJhc3NlcnQiLCJhbmltYXRlVG8iLCJob2xkc0l0ZW0iLCJ1bmRlZmluZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkhvbGRpbmdCb3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSG9sZGluZ0JveCBpcyB0aGUgYXJlYSBpbiB0aGUgbW9kZWwgd2hlcmUgaXRlbXMgdGhhdCBoYXZlIHZhbHVlIChhc3NldHMsIGRlYnRzLCBjaGlwcywgYW5kIHN1Y2gpIGhhbmcgb3V0IHdoZW4gbm90IGluXHJcbiAqIHVzZS4gSXQgaXMgYmFzaWNhbGx5IGp1c3QgYSByZWN0YW5ndWxhciBzcGFjZSB0aGF0IGtlZXBzIHRyYWNrIG9mIHdoZXJlIHRoaW5ncyBnbyB3aXRoaW4gaXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lT3BlcmF0aW9ucyBmcm9tICcuLi8uLi9udW1iZXJMaW5lT3BlcmF0aW9ucy5qcyc7XHJcblxyXG5jbGFzcyBIb2xkaW5nQm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBwb3NpdGlvbiAtIHBvc2l0aW9uIGluIG1vZGVsIHNwYWNlIG9mIHRoZSByZWN0YW5nbGUncyB1cHBlciBsZWZ0IGNvcm5lclxyXG4gICAqIEBwYXJhbSB7RGltZW5zaW9uMn0gc2l6ZVxyXG4gICAqIEBwYXJhbSB7VmFsdWVJdGVtW119IGl0ZW1zXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHBvc2l0aW9uLCBzaXplLCBpdGVtcyApIHtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpXHJcbiAgICB0aGlzLnJlY3RhbmdsZUJvdW5kcyA9IG5ldyBCb3VuZHMyKFxyXG4gICAgICBwb3NpdGlvbi54LFxyXG4gICAgICBwb3NpdGlvbi55LFxyXG4gICAgICBwb3NpdGlvbi54ICsgc2l6ZS53aWR0aCxcclxuICAgICAgcG9zaXRpb24ueSArIHNpemUuaGVpZ2h0XHJcbiAgICApO1xyXG5cclxuICAgIC8vIG1hcCBvZiBpdGVtcyB0byBzdG9yYWdlIHBvc2l0aW9ucywgcG9wdWxhdGVkIGJlbG93XHJcbiAgICB0aGlzLm1hcE9mSXRlbXNUb1N0b3JhZ2VQb3NpdGlvbnMgPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLy8gUG9zaXRpb24gZWFjaCBvZiB0aGUgaXRlbXMgYW5kIHJlbWVtYmVyIHdoZXJlIGVhY2ggb25lIGdvZXMgd2hlbiByZXR1cm5lZC5cclxuICAgIGNvbnN0IGludGVySXRlbVNwYWNpbmcgPSBzaXplLmhlaWdodCAvIGl0ZW1zLmxlbmd0aDtcclxuICAgIGNvbnN0IHlQb3NpdGlvbk9mZnNldCA9IGludGVySXRlbVNwYWNpbmcgLyAyO1xyXG4gICAgaXRlbXMuZm9yRWFjaCggKCBpdGVtLCBpbmRleCApID0+IHtcclxuICAgICAgaXRlbS50ZWxlcG9ydFRvKCBuZXcgVmVjdG9yMihcclxuICAgICAgICB0aGlzLnJlY3RhbmdsZUJvdW5kcy5jZW50ZXJYLFxyXG4gICAgICAgIHRoaXMucmVjdGFuZ2xlQm91bmRzLm1pblkgKyB5UG9zaXRpb25PZmZzZXQgKyBpbmRleCAqIGludGVySXRlbVNwYWNpbmdcclxuICAgICAgKSApO1xyXG4gICAgICB0aGlzLm1hcE9mSXRlbXNUb1N0b3JhZ2VQb3NpdGlvbnMuc2V0KCBpdGVtLCBpdGVtLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybiB0aGUgcHJvdmlkZWQgaXRlbSB0byBpdHMgb3JpZ2luYWwgcG9zaXRpb24gd2l0aGluIHRoaXMgYm94LlxyXG4gICAqIEBwYXJhbSB7VmFsdWVJdGVtIH1pdGVtXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBhbmltYXRlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJldHVybkl0ZW0oIGl0ZW0sIGFuaW1hdGUgKSB7XHJcblxyXG4gICAgY29uc3Qgc3RvcmFnZVBvc2l0aW9uID0gdGhpcy5tYXBPZkl0ZW1zVG9TdG9yYWdlUG9zaXRpb25zLmdldCggaXRlbSApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc3RvcmFnZVBvc2l0aW9uLCAndGhlIHByb3ZpZGVkIGl0ZW0gZG9lcyBub3QgZ28gaW4gdGhpcyBib3gnICk7XHJcbiAgICBpZiAoIGFuaW1hdGUgKSB7XHJcbiAgICAgIGl0ZW0uYW5pbWF0ZVRvKCBzdG9yYWdlUG9zaXRpb24gKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpdGVtLnRlbGVwb3J0VG8oIHN0b3JhZ2VQb3NpdGlvbiApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYm94IGhvbGRzIHRoZSBwcm92aWRlZCBpdGVtLlxyXG4gICAqIEBwYXJhbSB7VmFsdWVJdGVtfSBpdGVtXHJcbiAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGhvbGRzSXRlbSggaXRlbSApIHtcclxuICAgIHJldHVybiB0aGlzLm1hcE9mSXRlbXNUb1N0b3JhZ2VQb3NpdGlvbnMuZ2V0KCBpdGVtICkgIT09IHVuZGVmaW5lZDtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlckxpbmVPcGVyYXRpb25zLnJlZ2lzdGVyKCAnSG9sZGluZ0JveCcsIEhvbGRpbmdCb3ggKTtcclxuZXhwb3J0IGRlZmF1bHQgSG9sZGluZ0JveDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBRWhFLE1BQU1DLFVBQVUsQ0FBQztFQUVmO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRztJQUVuQztJQUNBLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUlSLE9BQU8sQ0FDaENLLFFBQVEsQ0FBQ0ksQ0FBQyxFQUNWSixRQUFRLENBQUNLLENBQUMsRUFDVkwsUUFBUSxDQUFDSSxDQUFDLEdBQUdILElBQUksQ0FBQ0ssS0FBSyxFQUN2Qk4sUUFBUSxDQUFDSyxDQUFDLEdBQUdKLElBQUksQ0FBQ00sTUFDcEIsQ0FBQzs7SUFFRDtJQUNBLElBQUksQ0FBQ0MsNEJBQTRCLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7O0lBRTdDO0lBQ0EsTUFBTUMsZ0JBQWdCLEdBQUdULElBQUksQ0FBQ00sTUFBTSxHQUFHTCxLQUFLLENBQUNTLE1BQU07SUFDbkQsTUFBTUMsZUFBZSxHQUFHRixnQkFBZ0IsR0FBRyxDQUFDO0lBQzVDUixLQUFLLENBQUNXLE9BQU8sQ0FBRSxDQUFFQyxJQUFJLEVBQUVDLEtBQUssS0FBTTtNQUNoQ0QsSUFBSSxDQUFDRSxVQUFVLENBQUUsSUFBSXBCLE9BQU8sQ0FDMUIsSUFBSSxDQUFDTyxlQUFlLENBQUNjLE9BQU8sRUFDNUIsSUFBSSxDQUFDZCxlQUFlLENBQUNlLElBQUksR0FBR04sZUFBZSxHQUFHRyxLQUFLLEdBQUdMLGdCQUN4RCxDQUFFLENBQUM7TUFDSCxJQUFJLENBQUNGLDRCQUE0QixDQUFDVyxHQUFHLENBQUVMLElBQUksRUFBRUEsSUFBSSxDQUFDTSxnQkFBZ0IsQ0FBQ0MsS0FBTSxDQUFDO0lBQzVFLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxVQUFVQSxDQUFFUixJQUFJLEVBQUVTLE9BQU8sRUFBRztJQUUxQixNQUFNQyxlQUFlLEdBQUcsSUFBSSxDQUFDaEIsNEJBQTRCLENBQUNpQixHQUFHLENBQUVYLElBQUssQ0FBQztJQUNyRVksTUFBTSxJQUFJQSxNQUFNLENBQUVGLGVBQWUsRUFBRSwyQ0FBNEMsQ0FBQztJQUNoRixJQUFLRCxPQUFPLEVBQUc7TUFDYlQsSUFBSSxDQUFDYSxTQUFTLENBQUVILGVBQWdCLENBQUM7SUFDbkMsQ0FBQyxNQUNJO01BQ0hWLElBQUksQ0FBQ0UsVUFBVSxDQUFFUSxlQUFnQixDQUFDO0lBQ3BDO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFNBQVNBLENBQUVkLElBQUksRUFBRztJQUNoQixPQUFPLElBQUksQ0FBQ04sNEJBQTRCLENBQUNpQixHQUFHLENBQUVYLElBQUssQ0FBQyxLQUFLZSxTQUFTO0VBQ3BFO0FBQ0Y7QUFFQWhDLG9CQUFvQixDQUFDaUMsUUFBUSxDQUFFLFlBQVksRUFBRWhDLFVBQVcsQ0FBQztBQUN6RCxlQUFlQSxVQUFVIn0=