// Copyright 2020-2022, University of Colorado Boulder

/**
 * NumberLineOperation is a class used to track arithmetic operations of addition and subtraction that have been
 * performed on an operation-tracking number line.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationDeprecatedProperty from '../../../../axon/js/EnumerationDeprecatedProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import numberLineOperations from '../../numberLineOperations.js';
import Operation from './Operation.js';
class NumberLineOperation {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      // {Operation}
      initialOperationType: Operation.ADDITION,
      // {number}
      initialAmount: 0,
      // {boolean}
      initiallyActive: false
    }, options);

    // @public {Property.<OperationType>} - type of operation, e.g. addition or subtraction
    this.operationTypeProperty = new EnumerationDeprecatedProperty(Operation, options.initialOperationType);

    // @public - amount of the operation
    this.amountProperty = new NumberProperty(options.initialAmount);

    // @public - whether or not this Property is "active", meaning it is shown on the number line and considered in
    // calculations
    this.isActiveProperty = new BooleanProperty(options.initiallyActive);
  }

  /**
   * Get the value at the end of this operation.
   * @returns {number}
   * @public
   */
  getResult(startingValue) {
    let value = startingValue;
    if (this.operationTypeProperty.value === Operation.ADDITION) {
      value += this.amountProperty.value;
    } else if (this.operationTypeProperty.value === Operation.SUBTRACTION) {
      value -= this.amountProperty.value;
    } else {
      assert && assert(false, 'unrecognized operation type');
    }
    return value;
  }

  /**
   * Get a string representation that is worthy of logging to the console.
   * @public
   * @returns {string}
   */
  toString() {
    return `operation type: ${this.operationTypeProperty.value}, amount: ${this.amountProperty.value}, isActive: ${this.isActiveProperty.value}`;
  }

  /**
   * @public
   */
  reset() {
    this.operationTypeProperty.reset();
    this.amountProperty.reset();
  }
}
numberLineOperations.register('NumberLineOperation', NumberLineOperation);
export default NumberLineOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSIsIk51bWJlclByb3BlcnR5IiwibWVyZ2UiLCJudW1iZXJMaW5lT3BlcmF0aW9ucyIsIk9wZXJhdGlvbiIsIk51bWJlckxpbmVPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJpbml0aWFsT3BlcmF0aW9uVHlwZSIsIkFERElUSU9OIiwiaW5pdGlhbEFtb3VudCIsImluaXRpYWxseUFjdGl2ZSIsIm9wZXJhdGlvblR5cGVQcm9wZXJ0eSIsImFtb3VudFByb3BlcnR5IiwiaXNBY3RpdmVQcm9wZXJ0eSIsImdldFJlc3VsdCIsInN0YXJ0aW5nVmFsdWUiLCJ2YWx1ZSIsIlNVQlRSQUNUSU9OIiwiYXNzZXJ0IiwidG9TdHJpbmciLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVtYmVyTGluZU9wZXJhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOdW1iZXJMaW5lT3BlcmF0aW9uIGlzIGEgY2xhc3MgdXNlZCB0byB0cmFjayBhcml0aG1ldGljIG9wZXJhdGlvbnMgb2YgYWRkaXRpb24gYW5kIHN1YnRyYWN0aW9uIHRoYXQgaGF2ZSBiZWVuXHJcbiAqIHBlcmZvcm1lZCBvbiBhbiBvcGVyYXRpb24tdHJhY2tpbmcgbnVtYmVyIGxpbmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IG51bWJlckxpbmVPcGVyYXRpb25zIGZyb20gJy4uLy4uL251bWJlckxpbmVPcGVyYXRpb25zLmpzJztcclxuaW1wb3J0IE9wZXJhdGlvbiBmcm9tICcuL09wZXJhdGlvbi5qcyc7XHJcblxyXG5jbGFzcyBOdW1iZXJMaW5lT3BlcmF0aW9uIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8ge09wZXJhdGlvbn1cclxuICAgICAgaW5pdGlhbE9wZXJhdGlvblR5cGU6IE9wZXJhdGlvbi5BRERJVElPTixcclxuXHJcbiAgICAgIC8vIHtudW1iZXJ9XHJcbiAgICAgIGluaXRpYWxBbW91bnQ6IDAsXHJcblxyXG4gICAgICAvLyB7Ym9vbGVhbn1cclxuICAgICAgaW5pdGlhbGx5QWN0aXZlOiBmYWxzZVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5LjxPcGVyYXRpb25UeXBlPn0gLSB0eXBlIG9mIG9wZXJhdGlvbiwgZS5nLiBhZGRpdGlvbiBvciBzdWJ0cmFjdGlvblxyXG4gICAgdGhpcy5vcGVyYXRpb25UeXBlUHJvcGVydHkgPSBuZXcgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkoIE9wZXJhdGlvbiwgb3B0aW9ucy5pbml0aWFsT3BlcmF0aW9uVHlwZSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgLSBhbW91bnQgb2YgdGhlIG9wZXJhdGlvblxyXG4gICAgdGhpcy5hbW91bnRQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggb3B0aW9ucy5pbml0aWFsQW1vdW50ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAtIHdoZXRoZXIgb3Igbm90IHRoaXMgUHJvcGVydHkgaXMgXCJhY3RpdmVcIiwgbWVhbmluZyBpdCBpcyBzaG93biBvbiB0aGUgbnVtYmVyIGxpbmUgYW5kIGNvbnNpZGVyZWQgaW5cclxuICAgIC8vIGNhbGN1bGF0aW9uc1xyXG4gICAgdGhpcy5pc0FjdGl2ZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggb3B0aW9ucy5pbml0aWFsbHlBY3RpdmUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgdmFsdWUgYXQgdGhlIGVuZCBvZiB0aGlzIG9wZXJhdGlvbi5cclxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBnZXRSZXN1bHQoIHN0YXJ0aW5nVmFsdWUgKSB7XHJcbiAgICBsZXQgdmFsdWUgPSBzdGFydGluZ1ZhbHVlO1xyXG4gICAgaWYgKCB0aGlzLm9wZXJhdGlvblR5cGVQcm9wZXJ0eS52YWx1ZSA9PT0gT3BlcmF0aW9uLkFERElUSU9OICkge1xyXG4gICAgICB2YWx1ZSArPSB0aGlzLmFtb3VudFByb3BlcnR5LnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHRoaXMub3BlcmF0aW9uVHlwZVByb3BlcnR5LnZhbHVlID09PSBPcGVyYXRpb24uU1VCVFJBQ1RJT04gKSB7XHJcbiAgICAgIHZhbHVlIC09IHRoaXMuYW1vdW50UHJvcGVydHkudmFsdWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICd1bnJlY29nbml6ZWQgb3BlcmF0aW9uIHR5cGUnICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gdGhhdCBpcyB3b3J0aHkgb2YgbG9nZ2luZyB0byB0aGUgY29uc29sZS5cclxuICAgKiBAcHVibGljXHJcbiAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgKi9cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiBgb3BlcmF0aW9uIHR5cGU6ICR7dGhpcy5vcGVyYXRpb25UeXBlUHJvcGVydHkudmFsdWV9LCBhbW91bnQ6ICR7dGhpcy5hbW91bnRQcm9wZXJ0eS52YWx1ZX0sIGlzQWN0aXZlOiAke3RoaXMuaXNBY3RpdmVQcm9wZXJ0eS52YWx1ZX1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5vcGVyYXRpb25UeXBlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuYW1vdW50UHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlckxpbmVPcGVyYXRpb25zLnJlZ2lzdGVyKCAnTnVtYmVyTGluZU9wZXJhdGlvbicsIE51bWJlckxpbmVPcGVyYXRpb24gKTtcclxuZXhwb3J0IGRlZmF1bHQgTnVtYmVyTGluZU9wZXJhdGlvbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLDZCQUE2QixNQUFNLHNEQUFzRDtBQUNoRyxPQUFPQyxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFFdEMsTUFBTUMsbUJBQW1CLENBQUM7RUFFeEI7QUFDRjtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUVyQkEsT0FBTyxHQUFHTCxLQUFLLENBQUU7TUFFZjtNQUNBTSxvQkFBb0IsRUFBRUosU0FBUyxDQUFDSyxRQUFRO01BRXhDO01BQ0FDLGFBQWEsRUFBRSxDQUFDO01BRWhCO01BQ0FDLGVBQWUsRUFBRTtJQUNuQixDQUFDLEVBQUVKLE9BQVEsQ0FBQzs7SUFFWjtJQUNBLElBQUksQ0FBQ0sscUJBQXFCLEdBQUcsSUFBSVosNkJBQTZCLENBQUVJLFNBQVMsRUFBRUcsT0FBTyxDQUFDQyxvQkFBcUIsQ0FBQzs7SUFFekc7SUFDQSxJQUFJLENBQUNLLGNBQWMsR0FBRyxJQUFJWixjQUFjLENBQUVNLE9BQU8sQ0FBQ0csYUFBYyxDQUFDOztJQUVqRTtJQUNBO0lBQ0EsSUFBSSxDQUFDSSxnQkFBZ0IsR0FBRyxJQUFJZixlQUFlLENBQUVRLE9BQU8sQ0FBQ0ksZUFBZ0IsQ0FBQztFQUN4RTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFNBQVNBLENBQUVDLGFBQWEsRUFBRztJQUN6QixJQUFJQyxLQUFLLEdBQUdELGFBQWE7SUFDekIsSUFBSyxJQUFJLENBQUNKLHFCQUFxQixDQUFDSyxLQUFLLEtBQUtiLFNBQVMsQ0FBQ0ssUUFBUSxFQUFHO01BQzdEUSxLQUFLLElBQUksSUFBSSxDQUFDSixjQUFjLENBQUNJLEtBQUs7SUFDcEMsQ0FBQyxNQUNJLElBQUssSUFBSSxDQUFDTCxxQkFBcUIsQ0FBQ0ssS0FBSyxLQUFLYixTQUFTLENBQUNjLFdBQVcsRUFBRztNQUNyRUQsS0FBSyxJQUFJLElBQUksQ0FBQ0osY0FBYyxDQUFDSSxLQUFLO0lBQ3BDLENBQUMsTUFDSTtNQUNIRSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsNkJBQThCLENBQUM7SUFDMUQ7SUFDQSxPQUFPRixLQUFLO0VBQ2Q7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxRQUFRQSxDQUFBLEVBQUc7SUFDVCxPQUFRLG1CQUFrQixJQUFJLENBQUNSLHFCQUFxQixDQUFDSyxLQUFNLGFBQVksSUFBSSxDQUFDSixjQUFjLENBQUNJLEtBQU0sZUFBYyxJQUFJLENBQUNILGdCQUFnQixDQUFDRyxLQUFNLEVBQUM7RUFDOUk7O0VBRUE7QUFDRjtBQUNBO0VBQ0VJLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ1QscUJBQXFCLENBQUNTLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQ1IsY0FBYyxDQUFDUSxLQUFLLENBQUMsQ0FBQztFQUM3QjtBQUNGO0FBRUFsQixvQkFBb0IsQ0FBQ21CLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWpCLG1CQUFvQixDQUFDO0FBQzNFLGVBQWVBLG1CQUFtQiJ9