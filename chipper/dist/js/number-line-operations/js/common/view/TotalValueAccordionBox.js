// Copyright 2020-2023, University of Colorado Boulder

/**
 * TotalValueAccordionBox is an accordion box that displays the value of a provided Property and allows customization of
 * the title and label through the options.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import NLCConstants from '../../../../number-line-common/js/common/NLCConstants.js';
import merge from '../../../../phet-core/js/merge.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import numberLineOperations from '../../numberLineOperations.js';
import NumberLineOperationsStrings from '../../NumberLineOperationsStrings.js';

// constants
const DEFAULT_WIDTH = 350; // empirically determined to look decent

class TotalValueAccordionBox extends AccordionBox {
  /**
   * @param {NumberProperty} totalValueProperty
   * @param options
   */
  constructor(totalValueProperty, options) {
    options = merge({
      titleText: NumberLineOperationsStrings.total,
      labelText: NumberLineOperationsStrings.total,
      showTotalAsCurrency: false,
      minWidth: DEFAULT_WIDTH,
      maxWidth: DEFAULT_WIDTH
    }, NLCConstants.ACCORDION_BOX_COMMON_OPTIONS, options);
    const totalReadoutNode = new Text('', {
      font: new PhetFont(26),
      maxWidth: DEFAULT_WIDTH * 0.9
    });

    // Update readout when total value changes.  Instances of this class are assumed to exist for the duration of the
    // sim, so no unlink is necessary.
    totalValueProperty.link(totalValue => {
      let readoutText;
      const sign = totalValue < 0 ? MathSymbols.MINUS : '';
      if (options.showTotalAsCurrency) {
        readoutText = StringUtils.fillIn(NumberLineOperationsStrings.totalCurrencyPattern, {
          totalString: options.labelText,
          sign: sign,
          currencyUnits: NumberLineOperationsStrings.currencyUnits,
          totalValue: Math.abs(totalValue)
        });
      } else {
        readoutText = StringUtils.fillIn(NumberLineOperationsStrings.totalValuePattern, {
          totalString: options.labelText,
          totalValue: sign + Math.abs(totalValue).toString(10)
        });
      }
      totalReadoutNode.string = readoutText;
    });

    // accordion box title node
    const titleNode = new Text(options.titleText, {
      font: new PhetFont(18)
    });
    super(totalReadoutNode, merge(options, {
      titleNode: titleNode
    }));
  }
}
numberLineOperations.register('TotalValueAccordionBox', TotalValueAccordionBox);
export default TotalValueAccordionBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOTENDb25zdGFudHMiLCJtZXJnZSIsIlN0cmluZ1V0aWxzIiwiTWF0aFN5bWJvbHMiLCJQaGV0Rm9udCIsIlRleHQiLCJBY2NvcmRpb25Cb3giLCJudW1iZXJMaW5lT3BlcmF0aW9ucyIsIk51bWJlckxpbmVPcGVyYXRpb25zU3RyaW5ncyIsIkRFRkFVTFRfV0lEVEgiLCJUb3RhbFZhbHVlQWNjb3JkaW9uQm94IiwiY29uc3RydWN0b3IiLCJ0b3RhbFZhbHVlUHJvcGVydHkiLCJvcHRpb25zIiwidGl0bGVUZXh0IiwidG90YWwiLCJsYWJlbFRleHQiLCJzaG93VG90YWxBc0N1cnJlbmN5IiwibWluV2lkdGgiLCJtYXhXaWR0aCIsIkFDQ09SRElPTl9CT1hfQ09NTU9OX09QVElPTlMiLCJ0b3RhbFJlYWRvdXROb2RlIiwiZm9udCIsImxpbmsiLCJ0b3RhbFZhbHVlIiwicmVhZG91dFRleHQiLCJzaWduIiwiTUlOVVMiLCJmaWxsSW4iLCJ0b3RhbEN1cnJlbmN5UGF0dGVybiIsInRvdGFsU3RyaW5nIiwiY3VycmVuY3lVbml0cyIsIk1hdGgiLCJhYnMiLCJ0b3RhbFZhbHVlUGF0dGVybiIsInRvU3RyaW5nIiwic3RyaW5nIiwidGl0bGVOb2RlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUb3RhbFZhbHVlQWNjb3JkaW9uQm94LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRvdGFsVmFsdWVBY2NvcmRpb25Cb3ggaXMgYW4gYWNjb3JkaW9uIGJveCB0aGF0IGRpc3BsYXlzIHRoZSB2YWx1ZSBvZiBhIHByb3ZpZGVkIFByb3BlcnR5IGFuZCBhbGxvd3MgY3VzdG9taXphdGlvbiBvZlxyXG4gKiB0aGUgdGl0bGUgYW5kIGxhYmVsIHRocm91Z2ggdGhlIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE5MQ0NvbnN0YW50cyBmcm9tICcuLi8uLi8uLi8uLi9udW1iZXItbGluZS1jb21tb24vanMvY29tbW9uL05MQ0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IE1hdGhTeW1ib2xzIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9NYXRoU3ltYm9scy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEFjY29yZGlvbkJveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IG51bWJlckxpbmVPcGVyYXRpb25zIGZyb20gJy4uLy4uL251bWJlckxpbmVPcGVyYXRpb25zLmpzJztcclxuaW1wb3J0IE51bWJlckxpbmVPcGVyYXRpb25zU3RyaW5ncyBmcm9tICcuLi8uLi9OdW1iZXJMaW5lT3BlcmF0aW9uc1N0cmluZ3MuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IERFRkFVTFRfV0lEVEggPSAzNTA7IC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWQgdG8gbG9vayBkZWNlbnRcclxuXHJcbmNsYXNzIFRvdGFsVmFsdWVBY2NvcmRpb25Cb3ggZXh0ZW5kcyBBY2NvcmRpb25Cb3gge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge051bWJlclByb3BlcnR5fSB0b3RhbFZhbHVlUHJvcGVydHlcclxuICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0b3RhbFZhbHVlUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRpdGxlVGV4dDogTnVtYmVyTGluZU9wZXJhdGlvbnNTdHJpbmdzLnRvdGFsLFxyXG4gICAgICBsYWJlbFRleHQ6IE51bWJlckxpbmVPcGVyYXRpb25zU3RyaW5ncy50b3RhbCxcclxuICAgICAgc2hvd1RvdGFsQXNDdXJyZW5jeTogZmFsc2UsXHJcbiAgICAgIG1pbldpZHRoOiBERUZBVUxUX1dJRFRILFxyXG4gICAgICBtYXhXaWR0aDogREVGQVVMVF9XSURUSFxyXG4gICAgfSwgTkxDQ29uc3RhbnRzLkFDQ09SRElPTl9CT1hfQ09NTU9OX09QVElPTlMsIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB0b3RhbFJlYWRvdXROb2RlID0gbmV3IFRleHQoICcnLCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjYgKSxcclxuICAgICAgbWF4V2lkdGg6IERFRkFVTFRfV0lEVEggKiAwLjlcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgcmVhZG91dCB3aGVuIHRvdGFsIHZhbHVlIGNoYW5nZXMuICBJbnN0YW5jZXMgb2YgdGhpcyBjbGFzcyBhcmUgYXNzdW1lZCB0byBleGlzdCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxyXG4gICAgLy8gc2ltLCBzbyBubyB1bmxpbmsgaXMgbmVjZXNzYXJ5LlxyXG4gICAgdG90YWxWYWx1ZVByb3BlcnR5LmxpbmsoIHRvdGFsVmFsdWUgPT4ge1xyXG4gICAgICBsZXQgcmVhZG91dFRleHQ7XHJcbiAgICAgIGNvbnN0IHNpZ24gPSB0b3RhbFZhbHVlIDwgMCA/IE1hdGhTeW1ib2xzLk1JTlVTIDogJyc7XHJcbiAgICAgIGlmICggb3B0aW9ucy5zaG93VG90YWxBc0N1cnJlbmN5ICkge1xyXG4gICAgICAgIHJlYWRvdXRUZXh0ID0gU3RyaW5nVXRpbHMuZmlsbEluKCBOdW1iZXJMaW5lT3BlcmF0aW9uc1N0cmluZ3MudG90YWxDdXJyZW5jeVBhdHRlcm4sIHtcclxuICAgICAgICAgIHRvdGFsU3RyaW5nOiBvcHRpb25zLmxhYmVsVGV4dCxcclxuICAgICAgICAgIHNpZ246IHNpZ24sXHJcbiAgICAgICAgICBjdXJyZW5jeVVuaXRzOiBOdW1iZXJMaW5lT3BlcmF0aW9uc1N0cmluZ3MuY3VycmVuY3lVbml0cyxcclxuICAgICAgICAgIHRvdGFsVmFsdWU6IE1hdGguYWJzKCB0b3RhbFZhbHVlIClcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmVhZG91dFRleHQgPSBTdHJpbmdVdGlscy5maWxsSW4oIE51bWJlckxpbmVPcGVyYXRpb25zU3RyaW5ncy50b3RhbFZhbHVlUGF0dGVybiwge1xyXG4gICAgICAgICAgdG90YWxTdHJpbmc6IG9wdGlvbnMubGFiZWxUZXh0LFxyXG4gICAgICAgICAgdG90YWxWYWx1ZTogc2lnbiArIE1hdGguYWJzKCB0b3RhbFZhbHVlICkudG9TdHJpbmcoIDEwIClcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgICAgdG90YWxSZWFkb3V0Tm9kZS5zdHJpbmcgPSByZWFkb3V0VGV4dDtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBhY2NvcmRpb24gYm94IHRpdGxlIG5vZGVcclxuICAgIGNvbnN0IHRpdGxlTm9kZSA9IG5ldyBUZXh0KCBvcHRpb25zLnRpdGxlVGV4dCwgeyBmb250OiBuZXcgUGhldEZvbnQoIDE4ICkgfSApO1xyXG5cclxuICAgIHN1cGVyKCB0b3RhbFJlYWRvdXROb2RlLCBtZXJnZSggb3B0aW9ucywgeyB0aXRsZU5vZGU6IHRpdGxlTm9kZSB9ICkgKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlckxpbmVPcGVyYXRpb25zLnJlZ2lzdGVyKCAnVG90YWxWYWx1ZUFjY29yZGlvbkJveCcsIFRvdGFsVmFsdWVBY2NvcmRpb25Cb3gg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