// Copyright 2020-2021, University of Colorado Boulder

/**
 * OperationTrackingNumberLineNode is a specialization of SpatializedNumberLineNode that adds the ability to depict
 * labeled operations that have occurred between the points on the number line.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import PointsOffScaleCondition from '../../../../number-line-common/js/common/view/PointsOffScaleCondition.js';
import SpatializedNumberLineNode from '../../../../number-line-common/js/common/view/SpatializedNumberLineNode.js';
import merge from '../../../../phet-core/js/merge.js';
import numberLineOperations from '../../numberLineOperations.js';
import NLOConstants from '../NLOConstants.js';
import NumberLineOperationNode from './NumberLineOperationNode.js';
class OperationTrackingNumberLineNode extends SpatializedNumberLineNode {
  /**
   * {OperationTrackingNumberLine} numberLine - model of a number line
   * {Object} [options] - options that control the appearance of the number line
   * @public
   */
  constructor(numberLine, options) {
    options = merge({
      // This is here as documentation so that clients know how options are passed through to the operation nodes.
      numberLineOperationNodeOptions: {},
      pointsOffScaleCondition: PointsOffScaleCondition.ALL
    }, options);
    super(numberLine, options);

    // @private
    this.numberLine = numberLine;
    this.operationToNodeMap = new Map();

    // Create an operation node for each operation on the number line.
    numberLine.operations.forEach((operation, index) => {
      // nodes for even-indexed operations go above the number line, odd below
      const operationNodeOptions = index % 2 === 1 ? {
        relativePosition: NumberLineOperationNode.RelativePosition.BELOW_NUMBER_LINE
      } : {};

      // Add the node.
      const numberLineOperationNode = new NumberLineOperationNode(operation, numberLine.showOperationLabelsProperty, numberLine.showOperationDescriptionsProperty, numberLine, merge(operationNodeOptions, options.numberLineOperationNodeOptions));
      this.addChild(numberLineOperationNode);

      // The operation nodes should be behind the points and the labels.
      numberLineOperationNode.moveToBack();

      // Map it to the operation.
      this.operationToNodeMap.set(operation, numberLineOperationNode);
    });
  }

  /**
   * @public
   */
  step() {
    // Fade operation nodes that are set to expire.
    for (const [operation, operationNode] of this.operationToNodeMap) {
      if (this.numberLine.operationExpirationTimes.has(operation)) {
        const expirationTimeForOperation = this.numberLine.operationExpirationTimes.get(operation);
        operationNode.opacity = Math.min(1, (expirationTimeForOperation - phet.joist.elapsedTime) / NLOConstants.OPERATION_FADE_OUT_TIME);
      }
    }
  }
}
numberLineOperations.register('OperationTrackingNumberLineNode', OperationTrackingNumberLineNode);
export default OperationTrackingNumberLineNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb2ludHNPZmZTY2FsZUNvbmRpdGlvbiIsIlNwYXRpYWxpemVkTnVtYmVyTGluZU5vZGUiLCJtZXJnZSIsIm51bWJlckxpbmVPcGVyYXRpb25zIiwiTkxPQ29uc3RhbnRzIiwiTnVtYmVyTGluZU9wZXJhdGlvbk5vZGUiLCJPcGVyYXRpb25UcmFja2luZ051bWJlckxpbmVOb2RlIiwiY29uc3RydWN0b3IiLCJudW1iZXJMaW5lIiwib3B0aW9ucyIsIm51bWJlckxpbmVPcGVyYXRpb25Ob2RlT3B0aW9ucyIsInBvaW50c09mZlNjYWxlQ29uZGl0aW9uIiwiQUxMIiwib3BlcmF0aW9uVG9Ob2RlTWFwIiwiTWFwIiwib3BlcmF0aW9ucyIsImZvckVhY2giLCJvcGVyYXRpb24iLCJpbmRleCIsIm9wZXJhdGlvbk5vZGVPcHRpb25zIiwicmVsYXRpdmVQb3NpdGlvbiIsIlJlbGF0aXZlUG9zaXRpb24iLCJCRUxPV19OVU1CRVJfTElORSIsIm51bWJlckxpbmVPcGVyYXRpb25Ob2RlIiwic2hvd09wZXJhdGlvbkxhYmVsc1Byb3BlcnR5Iiwic2hvd09wZXJhdGlvbkRlc2NyaXB0aW9uc1Byb3BlcnR5IiwiYWRkQ2hpbGQiLCJtb3ZlVG9CYWNrIiwic2V0Iiwic3RlcCIsIm9wZXJhdGlvbk5vZGUiLCJvcGVyYXRpb25FeHBpcmF0aW9uVGltZXMiLCJoYXMiLCJleHBpcmF0aW9uVGltZUZvck9wZXJhdGlvbiIsImdldCIsIm9wYWNpdHkiLCJNYXRoIiwibWluIiwicGhldCIsImpvaXN0IiwiZWxhcHNlZFRpbWUiLCJPUEVSQVRJT05fRkFERV9PVVRfVElNRSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiT3BlcmF0aW9uVHJhY2tpbmdOdW1iZXJMaW5lTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBPcGVyYXRpb25UcmFja2luZ051bWJlckxpbmVOb2RlIGlzIGEgc3BlY2lhbGl6YXRpb24gb2YgU3BhdGlhbGl6ZWROdW1iZXJMaW5lTm9kZSB0aGF0IGFkZHMgdGhlIGFiaWxpdHkgdG8gZGVwaWN0XHJcbiAqIGxhYmVsZWQgb3BlcmF0aW9ucyB0aGF0IGhhdmUgb2NjdXJyZWQgYmV0d2VlbiB0aGUgcG9pbnRzIG9uIHRoZSBudW1iZXIgbGluZS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUG9pbnRzT2ZmU2NhbGVDb25kaXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLWxpbmUtY29tbW9uL2pzL2NvbW1vbi92aWV3L1BvaW50c09mZlNjYWxlQ29uZGl0aW9uLmpzJztcclxuaW1wb3J0IFNwYXRpYWxpemVkTnVtYmVyTGluZU5vZGUgZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLWxpbmUtY29tbW9uL2pzL2NvbW1vbi92aWV3L1NwYXRpYWxpemVkTnVtYmVyTGluZU5vZGUuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IG51bWJlckxpbmVPcGVyYXRpb25zIGZyb20gJy4uLy4uL251bWJlckxpbmVPcGVyYXRpb25zLmpzJztcclxuaW1wb3J0IE5MT0NvbnN0YW50cyBmcm9tICcuLi9OTE9Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgTnVtYmVyTGluZU9wZXJhdGlvbk5vZGUgZnJvbSAnLi9OdW1iZXJMaW5lT3BlcmF0aW9uTm9kZS5qcyc7XHJcblxyXG5jbGFzcyBPcGVyYXRpb25UcmFja2luZ051bWJlckxpbmVOb2RlIGV4dGVuZHMgU3BhdGlhbGl6ZWROdW1iZXJMaW5lTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIHtPcGVyYXRpb25UcmFja2luZ051bWJlckxpbmV9IG51bWJlckxpbmUgLSBtb2RlbCBvZiBhIG51bWJlciBsaW5lXHJcbiAgICoge09iamVjdH0gW29wdGlvbnNdIC0gb3B0aW9ucyB0aGF0IGNvbnRyb2wgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIG51bWJlciBsaW5lXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBudW1iZXJMaW5lLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG5cclxuICAgICAgLy8gVGhpcyBpcyBoZXJlIGFzIGRvY3VtZW50YXRpb24gc28gdGhhdCBjbGllbnRzIGtub3cgaG93IG9wdGlvbnMgYXJlIHBhc3NlZCB0aHJvdWdoIHRvIHRoZSBvcGVyYXRpb24gbm9kZXMuXHJcbiAgICAgIG51bWJlckxpbmVPcGVyYXRpb25Ob2RlT3B0aW9uczoge30sXHJcbiAgICAgIHBvaW50c09mZlNjYWxlQ29uZGl0aW9uOiBQb2ludHNPZmZTY2FsZUNvbmRpdGlvbi5BTExcclxuXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG51bWJlckxpbmUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5udW1iZXJMaW5lID0gbnVtYmVyTGluZTtcclxuICAgIHRoaXMub3BlcmF0aW9uVG9Ob2RlTWFwID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhbiBvcGVyYXRpb24gbm9kZSBmb3IgZWFjaCBvcGVyYXRpb24gb24gdGhlIG51bWJlciBsaW5lLlxyXG4gICAgbnVtYmVyTGluZS5vcGVyYXRpb25zLmZvckVhY2goICggb3BlcmF0aW9uLCBpbmRleCApID0+IHtcclxuXHJcbiAgICAgIC8vIG5vZGVzIGZvciBldmVuLWluZGV4ZWQgb3BlcmF0aW9ucyBnbyBhYm92ZSB0aGUgbnVtYmVyIGxpbmUsIG9kZCBiZWxvd1xyXG4gICAgICBjb25zdCBvcGVyYXRpb25Ob2RlT3B0aW9ucyA9IGluZGV4ICUgMiA9PT0gMSA/XHJcbiAgICAgICAgeyByZWxhdGl2ZVBvc2l0aW9uOiBOdW1iZXJMaW5lT3BlcmF0aW9uTm9kZS5SZWxhdGl2ZVBvc2l0aW9uLkJFTE9XX05VTUJFUl9MSU5FIH0gOlxyXG4gICAgICAgIHt9O1xyXG5cclxuICAgICAgLy8gQWRkIHRoZSBub2RlLlxyXG4gICAgICBjb25zdCBudW1iZXJMaW5lT3BlcmF0aW9uTm9kZSA9IG5ldyBOdW1iZXJMaW5lT3BlcmF0aW9uTm9kZShcclxuICAgICAgICBvcGVyYXRpb24sXHJcbiAgICAgICAgbnVtYmVyTGluZS5zaG93T3BlcmF0aW9uTGFiZWxzUHJvcGVydHksXHJcbiAgICAgICAgbnVtYmVyTGluZS5zaG93T3BlcmF0aW9uRGVzY3JpcHRpb25zUHJvcGVydHksXHJcbiAgICAgICAgbnVtYmVyTGluZSxcclxuICAgICAgICBtZXJnZSggb3BlcmF0aW9uTm9kZU9wdGlvbnMsIG9wdGlvbnMubnVtYmVyTGluZU9wZXJhdGlvbk5vZGVPcHRpb25zIClcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5hZGRDaGlsZCggbnVtYmVyTGluZU9wZXJhdGlvbk5vZGUgKTtcclxuXHJcbiAgICAgIC8vIFRoZSBvcGVyYXRpb24gbm9kZXMgc2hvdWxkIGJlIGJlaGluZCB0aGUgcG9pbnRzIGFuZCB0aGUgbGFiZWxzLlxyXG4gICAgICBudW1iZXJMaW5lT3BlcmF0aW9uTm9kZS5tb3ZlVG9CYWNrKCk7XHJcblxyXG4gICAgICAvLyBNYXAgaXQgdG8gdGhlIG9wZXJhdGlvbi5cclxuICAgICAgdGhpcy5vcGVyYXRpb25Ub05vZGVNYXAuc2V0KCBvcGVyYXRpb24sIG51bWJlckxpbmVPcGVyYXRpb25Ob2RlICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCgpIHtcclxuXHJcbiAgICAvLyBGYWRlIG9wZXJhdGlvbiBub2RlcyB0aGF0IGFyZSBzZXQgdG8gZXhwaXJlLlxyXG4gICAgZm9yICggY29uc3QgWyBvcGVyYXRpb24sIG9wZXJhdGlvbk5vZGUgXSBvZiB0aGlzLm9wZXJhdGlvblRvTm9kZU1hcCApIHtcclxuICAgICAgaWYgKCB0aGlzLm51bWJlckxpbmUub3BlcmF0aW9uRXhwaXJhdGlvblRpbWVzLmhhcyggb3BlcmF0aW9uICkgKSB7XHJcbiAgICAgICAgY29uc3QgZXhwaXJhdGlvblRpbWVGb3JPcGVyYXRpb24gPSB0aGlzLm51bWJlckxpbmUub3BlcmF0aW9uRXhwaXJhdGlvblRpbWVzLmdldCggb3BlcmF0aW9uICk7XHJcbiAgICAgICAgb3BlcmF0aW9uTm9kZS5vcGFjaXR5ID0gTWF0aC5taW4oIDEsICggZXhwaXJhdGlvblRpbWVGb3JPcGVyYXRpb24gLSBwaGV0LmpvaXN0LmVsYXBzZWRUaW1lICkgLyBOTE9Db25zdGFudHMuT1BFUkFUSU9OX0ZBREVfT1VUX1RJTUUgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxubnVtYmVyTGluZU9wZXJhdGlvbnMucmVnaXN0ZXIoICdPcGVyYXRpb25UcmFja2luZ051bWJlckxpbmVOb2RlJywgT3BlcmF0aW9uVHJhY2tpbmdOdW1iZXJMaW5lTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBPcGVyYXRpb25UcmFja2luZ051bWJlckxpbmVOb2RlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx1QkFBdUIsTUFBTSwwRUFBMEU7QUFDOUcsT0FBT0MseUJBQXlCLE1BQU0sNEVBQTRFO0FBQ2xILE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFDN0MsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBRWxFLE1BQU1DLCtCQUErQixTQUFTTCx5QkFBeUIsQ0FBQztFQUV0RTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLFVBQVUsRUFBRUMsT0FBTyxFQUFHO0lBRWpDQSxPQUFPLEdBQUdQLEtBQUssQ0FBRTtNQUVmO01BQ0FRLDhCQUE4QixFQUFFLENBQUMsQ0FBQztNQUNsQ0MsdUJBQXVCLEVBQUVYLHVCQUF1QixDQUFDWTtJQUVuRCxDQUFDLEVBQUVILE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUQsVUFBVSxFQUFFQyxPQUFRLENBQUM7O0lBRTVCO0lBQ0EsSUFBSSxDQUFDRCxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDSyxrQkFBa0IsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQzs7SUFFbkM7SUFDQU4sVUFBVSxDQUFDTyxVQUFVLENBQUNDLE9BQU8sQ0FBRSxDQUFFQyxTQUFTLEVBQUVDLEtBQUssS0FBTTtNQUVyRDtNQUNBLE1BQU1DLG9CQUFvQixHQUFHRCxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FDMUM7UUFBRUUsZ0JBQWdCLEVBQUVmLHVCQUF1QixDQUFDZ0IsZ0JBQWdCLENBQUNDO01BQWtCLENBQUMsR0FDaEYsQ0FBQyxDQUFDOztNQUVKO01BQ0EsTUFBTUMsdUJBQXVCLEdBQUcsSUFBSWxCLHVCQUF1QixDQUN6RFksU0FBUyxFQUNUVCxVQUFVLENBQUNnQiwyQkFBMkIsRUFDdENoQixVQUFVLENBQUNpQixpQ0FBaUMsRUFDNUNqQixVQUFVLEVBQ1ZOLEtBQUssQ0FBRWlCLG9CQUFvQixFQUFFVixPQUFPLENBQUNDLDhCQUErQixDQUN0RSxDQUFDO01BQ0QsSUFBSSxDQUFDZ0IsUUFBUSxDQUFFSCx1QkFBd0IsQ0FBQzs7TUFFeEM7TUFDQUEsdUJBQXVCLENBQUNJLFVBQVUsQ0FBQyxDQUFDOztNQUVwQztNQUNBLElBQUksQ0FBQ2Qsa0JBQWtCLENBQUNlLEdBQUcsQ0FBRVgsU0FBUyxFQUFFTSx1QkFBd0IsQ0FBQztJQUNuRSxDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7RUFDRU0sSUFBSUEsQ0FBQSxFQUFHO0lBRUw7SUFDQSxLQUFNLE1BQU0sQ0FBRVosU0FBUyxFQUFFYSxhQUFhLENBQUUsSUFBSSxJQUFJLENBQUNqQixrQkFBa0IsRUFBRztNQUNwRSxJQUFLLElBQUksQ0FBQ0wsVUFBVSxDQUFDdUIsd0JBQXdCLENBQUNDLEdBQUcsQ0FBRWYsU0FBVSxDQUFDLEVBQUc7UUFDL0QsTUFBTWdCLDBCQUEwQixHQUFHLElBQUksQ0FBQ3pCLFVBQVUsQ0FBQ3VCLHdCQUF3QixDQUFDRyxHQUFHLENBQUVqQixTQUFVLENBQUM7UUFDNUZhLGFBQWEsQ0FBQ0ssT0FBTyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBRSxDQUFDLEVBQUUsQ0FBRUosMEJBQTBCLEdBQUdLLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxXQUFXLElBQUtwQyxZQUFZLENBQUNxQyx1QkFBd0IsQ0FBQztNQUN2STtJQUNGO0VBQ0Y7QUFDRjtBQUVBdEMsb0JBQW9CLENBQUN1QyxRQUFRLENBQUUsaUNBQWlDLEVBQUVwQywrQkFBZ0MsQ0FBQztBQUNuRyxlQUFlQSwrQkFBK0IifQ==