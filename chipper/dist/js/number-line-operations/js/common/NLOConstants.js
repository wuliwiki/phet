// Copyright 2020-2022, University of Colorado Boulder

/**
 * Constants used throughout this simulation.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import Range from '../../../dot/js/Range.js';
import ScreenView from '../../../joist/js/ScreenView.js';
import StringUtils from '../../../phetcommon/js/util/StringUtils.js';
import { Color } from '../../../scenery/js/imports.js';
import numberLineOperations from '../numberLineOperations.js';
import NumberLineOperationsStrings from '../NumberLineOperationsStrings.js';
const NLOConstants = {
  // layout bounds used for all screens
  LAYOUT_BOUNDS: ScreenView.DEFAULT_LAYOUT_BOUNDS,
  // shared constants used for consistent layout between screens
  NUMBER_LINE_WIDTH: ScreenView.DEFAULT_LAYOUT_BOUNDS.width - 200,
  CHECKBOX_SPACING: 12,
  OPERATION_ENTRY_CAROUSEL_LEFT_INSET: 70,
  ERASER_BUTTON_ICON_WIDTH: 32,
  ERASER_BUTTON_INSET: 12,
  // length of time between activating and then deactivating it when the timed deactivation feature is in use
  OPERATION_AUTO_DEACTIVATE_TIME: 4000,
  // in milliseconds

  // fade out time for operations that are being deactivated
  OPERATION_FADE_OUT_TIME: 1500,
  // in milliseconds,

  // patternized string for net worth with a currency symbol that is used in multiple places
  NET_WORTH_WITH_CURRENCY_STRING: StringUtils.fillIn(NumberLineOperationsStrings.netWorthWithCurrencyPattern, {
    netWorthString: NumberLineOperationsStrings.netWorth,
    currencyUnits: NumberLineOperationsStrings.currencyUnits
  }),
  // net worth range, used in a couple of places
  NET_WORTH_RANGE: new Range(-1000, 1000),
  // common colors used for points in multiple places
  DARK_BLUE_POINT_COLOR: new Color('#0000C4'),
  MEDIUM_BLUE_POINT_COLOR: new Color('#4069FF'),
  LIGHT_BLUE_POINT_COLOR: new Color('#64A3FF')
};
numberLineOperations.register('NLOConstants', NLOConstants);
export default NLOConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlNjcmVlblZpZXciLCJTdHJpbmdVdGlscyIsIkNvbG9yIiwibnVtYmVyTGluZU9wZXJhdGlvbnMiLCJOdW1iZXJMaW5lT3BlcmF0aW9uc1N0cmluZ3MiLCJOTE9Db25zdGFudHMiLCJMQVlPVVRfQk9VTkRTIiwiREVGQVVMVF9MQVlPVVRfQk9VTkRTIiwiTlVNQkVSX0xJTkVfV0lEVEgiLCJ3aWR0aCIsIkNIRUNLQk9YX1NQQUNJTkciLCJPUEVSQVRJT05fRU5UUllfQ0FST1VTRUxfTEVGVF9JTlNFVCIsIkVSQVNFUl9CVVRUT05fSUNPTl9XSURUSCIsIkVSQVNFUl9CVVRUT05fSU5TRVQiLCJPUEVSQVRJT05fQVVUT19ERUFDVElWQVRFX1RJTUUiLCJPUEVSQVRJT05fRkFERV9PVVRfVElNRSIsIk5FVF9XT1JUSF9XSVRIX0NVUlJFTkNZX1NUUklORyIsImZpbGxJbiIsIm5ldFdvcnRoV2l0aEN1cnJlbmN5UGF0dGVybiIsIm5ldFdvcnRoU3RyaW5nIiwibmV0V29ydGgiLCJjdXJyZW5jeVVuaXRzIiwiTkVUX1dPUlRIX1JBTkdFIiwiREFSS19CTFVFX1BPSU5UX0NPTE9SIiwiTUVESVVNX0JMVUVfUE9JTlRfQ09MT1IiLCJMSUdIVF9CTFVFX1BPSU5UX0NPTE9SIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOTE9Db25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29uc3RhbnRzIHVzZWQgdGhyb3VnaG91dCB0aGlzIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBTY3JlZW5WaWV3IGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbnVtYmVyTGluZU9wZXJhdGlvbnMgZnJvbSAnLi4vbnVtYmVyTGluZU9wZXJhdGlvbnMuanMnO1xyXG5pbXBvcnQgTnVtYmVyTGluZU9wZXJhdGlvbnNTdHJpbmdzIGZyb20gJy4uL051bWJlckxpbmVPcGVyYXRpb25zU3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBOTE9Db25zdGFudHMgPSB7XHJcblxyXG4gIC8vIGxheW91dCBib3VuZHMgdXNlZCBmb3IgYWxsIHNjcmVlbnNcclxuICBMQVlPVVRfQk9VTkRTOiBTY3JlZW5WaWV3LkRFRkFVTFRfTEFZT1VUX0JPVU5EUyxcclxuXHJcbiAgLy8gc2hhcmVkIGNvbnN0YW50cyB1c2VkIGZvciBjb25zaXN0ZW50IGxheW91dCBiZXR3ZWVuIHNjcmVlbnNcclxuICBOVU1CRVJfTElORV9XSURUSDogU2NyZWVuVmlldy5ERUZBVUxUX0xBWU9VVF9CT1VORFMud2lkdGggLSAyMDAsXHJcbiAgQ0hFQ0tCT1hfU1BBQ0lORzogMTIsXHJcbiAgT1BFUkFUSU9OX0VOVFJZX0NBUk9VU0VMX0xFRlRfSU5TRVQ6IDcwLFxyXG4gIEVSQVNFUl9CVVRUT05fSUNPTl9XSURUSDogMzIsXHJcbiAgRVJBU0VSX0JVVFRPTl9JTlNFVDogMTIsXHJcblxyXG4gIC8vIGxlbmd0aCBvZiB0aW1lIGJldHdlZW4gYWN0aXZhdGluZyBhbmQgdGhlbiBkZWFjdGl2YXRpbmcgaXQgd2hlbiB0aGUgdGltZWQgZGVhY3RpdmF0aW9uIGZlYXR1cmUgaXMgaW4gdXNlXHJcbiAgT1BFUkFUSU9OX0FVVE9fREVBQ1RJVkFURV9USU1FOiA0MDAwLCAvLyBpbiBtaWxsaXNlY29uZHNcclxuXHJcbiAgLy8gZmFkZSBvdXQgdGltZSBmb3Igb3BlcmF0aW9ucyB0aGF0IGFyZSBiZWluZyBkZWFjdGl2YXRlZFxyXG4gIE9QRVJBVElPTl9GQURFX09VVF9USU1FOiAxNTAwLCAvLyBpbiBtaWxsaXNlY29uZHMsXHJcblxyXG4gIC8vIHBhdHRlcm5pemVkIHN0cmluZyBmb3IgbmV0IHdvcnRoIHdpdGggYSBjdXJyZW5jeSBzeW1ib2wgdGhhdCBpcyB1c2VkIGluIG11bHRpcGxlIHBsYWNlc1xyXG4gIE5FVF9XT1JUSF9XSVRIX0NVUlJFTkNZX1NUUklORzogU3RyaW5nVXRpbHMuZmlsbEluKCBOdW1iZXJMaW5lT3BlcmF0aW9uc1N0cmluZ3MubmV0V29ydGhXaXRoQ3VycmVuY3lQYXR0ZXJuLCB7XHJcbiAgICBuZXRXb3J0aFN0cmluZzogTnVtYmVyTGluZU9wZXJhdGlvbnNTdHJpbmdzLm5ldFdvcnRoLFxyXG4gICAgY3VycmVuY3lVbml0czogTnVtYmVyTGluZU9wZXJhdGlvbnNTdHJpbmdzLmN1cnJlbmN5VW5pdHNcclxuICB9ICksXHJcblxyXG4gIC8vIG5ldCB3b3J0aCByYW5nZSwgdXNlZCBpbiBhIGNvdXBsZSBvZiBwbGFjZXNcclxuICBORVRfV09SVEhfUkFOR0U6IG5ldyBSYW5nZSggLTEwMDAsIDEwMDAgKSxcclxuXHJcbiAgLy8gY29tbW9uIGNvbG9ycyB1c2VkIGZvciBwb2ludHMgaW4gbXVsdGlwbGUgcGxhY2VzXHJcbiAgREFSS19CTFVFX1BPSU5UX0NPTE9SOiBuZXcgQ29sb3IoICcjMDAwMEM0JyApLFxyXG4gIE1FRElVTV9CTFVFX1BPSU5UX0NPTE9SOiBuZXcgQ29sb3IoICcjNDA2OUZGJyApLFxyXG4gIExJR0hUX0JMVUVfUE9JTlRfQ09MT1I6IG5ldyBDb2xvciggJyM2NEEzRkYnIClcclxufTtcclxuXHJcbm51bWJlckxpbmVPcGVyYXRpb25zLnJlZ2lzdGVyKCAnTkxPQ29uc3RhbnRzJywgTkxPQ29uc3RhbnRzICk7XHJcbmV4cG9ydCBkZWZhdWx0IE5MT0NvbnN0YW50cztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSwwQkFBMEI7QUFDNUMsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0Msb0JBQW9CLE1BQU0sNEJBQTRCO0FBQzdELE9BQU9DLDJCQUEyQixNQUFNLG1DQUFtQztBQUUzRSxNQUFNQyxZQUFZLEdBQUc7RUFFbkI7RUFDQUMsYUFBYSxFQUFFTixVQUFVLENBQUNPLHFCQUFxQjtFQUUvQztFQUNBQyxpQkFBaUIsRUFBRVIsVUFBVSxDQUFDTyxxQkFBcUIsQ0FBQ0UsS0FBSyxHQUFHLEdBQUc7RUFDL0RDLGdCQUFnQixFQUFFLEVBQUU7RUFDcEJDLG1DQUFtQyxFQUFFLEVBQUU7RUFDdkNDLHdCQUF3QixFQUFFLEVBQUU7RUFDNUJDLG1CQUFtQixFQUFFLEVBQUU7RUFFdkI7RUFDQUMsOEJBQThCLEVBQUUsSUFBSTtFQUFFOztFQUV0QztFQUNBQyx1QkFBdUIsRUFBRSxJQUFJO0VBQUU7O0VBRS9CO0VBQ0FDLDhCQUE4QixFQUFFZixXQUFXLENBQUNnQixNQUFNLENBQUViLDJCQUEyQixDQUFDYywyQkFBMkIsRUFBRTtJQUMzR0MsY0FBYyxFQUFFZiwyQkFBMkIsQ0FBQ2dCLFFBQVE7SUFDcERDLGFBQWEsRUFBRWpCLDJCQUEyQixDQUFDaUI7RUFDN0MsQ0FBRSxDQUFDO0VBRUg7RUFDQUMsZUFBZSxFQUFFLElBQUl2QixLQUFLLENBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSyxDQUFDO0VBRXpDO0VBQ0F3QixxQkFBcUIsRUFBRSxJQUFJckIsS0FBSyxDQUFFLFNBQVUsQ0FBQztFQUM3Q3NCLHVCQUF1QixFQUFFLElBQUl0QixLQUFLLENBQUUsU0FBVSxDQUFDO0VBQy9DdUIsc0JBQXNCLEVBQUUsSUFBSXZCLEtBQUssQ0FBRSxTQUFVO0FBQy9DLENBQUM7QUFFREMsb0JBQW9CLENBQUN1QixRQUFRLENBQUUsY0FBYyxFQUFFckIsWUFBYSxDQUFDO0FBQzdELGVBQWVBLFlBQVkifQ==