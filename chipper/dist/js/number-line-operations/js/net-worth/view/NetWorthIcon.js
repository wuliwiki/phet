// Copyright 2021-2022, University of Colorado Boulder

/**
 * NetWorthIcon is the icon that is used for the home screen and nav bar for the "Net Worth" screen.  It consists of an
 * image of a piggy bank with a translatable currency symbol on it.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import ScreenIcon from '../../../../joist/js/ScreenIcon.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Color, Image, Text } from '../../../../scenery/js/imports.js';
import netWorthHomeScreenIcon_png from '../../../images/netWorthHomeScreenIcon_png.js';
import numberLineOperations from '../../numberLineOperations.js';
import NumberLineOperationsStrings from '../../NumberLineOperationsStrings.js';
class NetWorthIcon extends ScreenIcon {
  constructor() {
    const piggyBankImage = new Image(netWorthHomeScreenIcon_png);
    const currencySymbol = new Text(NumberLineOperationsStrings.currencyUnits, {
      fill: Color.WHITE,
      stroke: Color.black,
      // font size and scale were arrived at empirically
      font: new PhetFont(32),
      scale: 8,
      // position determined empirically
      centerX: piggyBankImage.width * 0.475,
      centerY: piggyBankImage.height * 0.5
    });

    // Because there is a scale factor in the options, the maxWidth parameter doesn't work very well, so limiting the
    // width of the string is explicitly handled here.
    const maxWidthOfCurrencySymbol = piggyBankImage.width * 0.6;
    if (currencySymbol.width > maxWidthOfCurrencySymbol) {
      currencySymbol.scale(maxWidthOfCurrencySymbol / currencySymbol.width);
      currencySymbol.centerX = piggyBankImage.width * 0.5;
      currencySymbol.centerY = piggyBankImage.height * 0.5;
    }
    piggyBankImage.addChild(currencySymbol);
    super(piggyBankImage, {
      maxIconWidthProportion: 1,
      maxIconHeightProportion: 1
    });
  }
}
numberLineOperations.register('NetWorthIcon', NetWorthIcon);
export default NetWorthIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW5JY29uIiwiUGhldEZvbnQiLCJDb2xvciIsIkltYWdlIiwiVGV4dCIsIm5ldFdvcnRoSG9tZVNjcmVlbkljb25fcG5nIiwibnVtYmVyTGluZU9wZXJhdGlvbnMiLCJOdW1iZXJMaW5lT3BlcmF0aW9uc1N0cmluZ3MiLCJOZXRXb3J0aEljb24iLCJjb25zdHJ1Y3RvciIsInBpZ2d5QmFua0ltYWdlIiwiY3VycmVuY3lTeW1ib2wiLCJjdXJyZW5jeVVuaXRzIiwiZmlsbCIsIldISVRFIiwic3Ryb2tlIiwiYmxhY2siLCJmb250Iiwic2NhbGUiLCJjZW50ZXJYIiwid2lkdGgiLCJjZW50ZXJZIiwiaGVpZ2h0IiwibWF4V2lkdGhPZkN1cnJlbmN5U3ltYm9sIiwiYWRkQ2hpbGQiLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk5ldFdvcnRoSWNvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOZXRXb3J0aEljb24gaXMgdGhlIGljb24gdGhhdCBpcyB1c2VkIGZvciB0aGUgaG9tZSBzY3JlZW4gYW5kIG5hdiBiYXIgZm9yIHRoZSBcIk5ldCBXb3J0aFwiIHNjcmVlbi4gIEl0IGNvbnNpc3RzIG9mIGFuXHJcbiAqIGltYWdlIG9mIGEgcGlnZ3kgYmFuayB3aXRoIGEgdHJhbnNsYXRhYmxlIGN1cnJlbmN5IHN5bWJvbCBvbiBpdC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBJbWFnZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBuZXRXb3J0aEhvbWVTY3JlZW5JY29uX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvbmV0V29ydGhIb21lU2NyZWVuSWNvbl9wbmcuanMnO1xyXG5pbXBvcnQgbnVtYmVyTGluZU9wZXJhdGlvbnMgZnJvbSAnLi4vLi4vbnVtYmVyTGluZU9wZXJhdGlvbnMuanMnO1xyXG5pbXBvcnQgTnVtYmVyTGluZU9wZXJhdGlvbnNTdHJpbmdzIGZyb20gJy4uLy4uL051bWJlckxpbmVPcGVyYXRpb25zU3RyaW5ncy5qcyc7XHJcblxyXG5jbGFzcyBOZXRXb3J0aEljb24gZXh0ZW5kcyBTY3JlZW5JY29uIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBjb25zdCBwaWdneUJhbmtJbWFnZSA9IG5ldyBJbWFnZSggbmV0V29ydGhIb21lU2NyZWVuSWNvbl9wbmcgKTtcclxuICAgIGNvbnN0IGN1cnJlbmN5U3ltYm9sID0gbmV3IFRleHQoIE51bWJlckxpbmVPcGVyYXRpb25zU3RyaW5ncy5jdXJyZW5jeVVuaXRzLCB7XHJcblxyXG4gICAgICBmaWxsOiBDb2xvci5XSElURSxcclxuICAgICAgc3Ryb2tlOiBDb2xvci5ibGFjayxcclxuXHJcbiAgICAgIC8vIGZvbnQgc2l6ZSBhbmQgc2NhbGUgd2VyZSBhcnJpdmVkIGF0IGVtcGlyaWNhbGx5XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMzIgKSxcclxuICAgICAgc2NhbGU6IDgsXHJcblxyXG4gICAgICAvLyBwb3NpdGlvbiBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICAgIGNlbnRlclg6IHBpZ2d5QmFua0ltYWdlLndpZHRoICogMC40NzUsXHJcbiAgICAgIGNlbnRlclk6IHBpZ2d5QmFua0ltYWdlLmhlaWdodCAqIDAuNVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEJlY2F1c2UgdGhlcmUgaXMgYSBzY2FsZSBmYWN0b3IgaW4gdGhlIG9wdGlvbnMsIHRoZSBtYXhXaWR0aCBwYXJhbWV0ZXIgZG9lc24ndCB3b3JrIHZlcnkgd2VsbCwgc28gbGltaXRpbmcgdGhlXHJcbiAgICAvLyB3aWR0aCBvZiB0aGUgc3RyaW5nIGlzIGV4cGxpY2l0bHkgaGFuZGxlZCBoZXJlLlxyXG4gICAgY29uc3QgbWF4V2lkdGhPZkN1cnJlbmN5U3ltYm9sID0gcGlnZ3lCYW5rSW1hZ2Uud2lkdGggKiAwLjY7XHJcbiAgICBpZiAoIGN1cnJlbmN5U3ltYm9sLndpZHRoID4gbWF4V2lkdGhPZkN1cnJlbmN5U3ltYm9sICkge1xyXG4gICAgICBjdXJyZW5jeVN5bWJvbC5zY2FsZSggbWF4V2lkdGhPZkN1cnJlbmN5U3ltYm9sIC8gY3VycmVuY3lTeW1ib2wud2lkdGggKTtcclxuICAgICAgY3VycmVuY3lTeW1ib2wuY2VudGVyWCA9IHBpZ2d5QmFua0ltYWdlLndpZHRoICogMC41O1xyXG4gICAgICBjdXJyZW5jeVN5bWJvbC5jZW50ZXJZID0gcGlnZ3lCYW5rSW1hZ2UuaGVpZ2h0ICogMC41O1xyXG4gICAgfVxyXG4gICAgcGlnZ3lCYW5rSW1hZ2UuYWRkQ2hpbGQoIGN1cnJlbmN5U3ltYm9sICk7XHJcblxyXG4gICAgc3VwZXIoIHBpZ2d5QmFua0ltYWdlLCB7XHJcbiAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJMaW5lT3BlcmF0aW9ucy5yZWdpc3RlciggJ05ldFdvcnRoSWNvbicsIE5ldFdvcnRoSWNvbiApO1xyXG5leHBvcnQgZGVmYXVsdCBOZXRXb3J0aEljb247Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLG9DQUFvQztBQUMzRCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3RFLE9BQU9DLDBCQUEwQixNQUFNLCtDQUErQztBQUN0RixPQUFPQyxvQkFBb0IsTUFBTSwrQkFBK0I7QUFDaEUsT0FBT0MsMkJBQTJCLE1BQU0sc0NBQXNDO0FBRTlFLE1BQU1DLFlBQVksU0FBU1IsVUFBVSxDQUFDO0VBRXBDUyxXQUFXQSxDQUFBLEVBQUc7SUFDWixNQUFNQyxjQUFjLEdBQUcsSUFBSVAsS0FBSyxDQUFFRSwwQkFBMkIsQ0FBQztJQUM5RCxNQUFNTSxjQUFjLEdBQUcsSUFBSVAsSUFBSSxDQUFFRywyQkFBMkIsQ0FBQ0ssYUFBYSxFQUFFO01BRTFFQyxJQUFJLEVBQUVYLEtBQUssQ0FBQ1ksS0FBSztNQUNqQkMsTUFBTSxFQUFFYixLQUFLLENBQUNjLEtBQUs7TUFFbkI7TUFDQUMsSUFBSSxFQUFFLElBQUloQixRQUFRLENBQUUsRUFBRyxDQUFDO01BQ3hCaUIsS0FBSyxFQUFFLENBQUM7TUFFUjtNQUNBQyxPQUFPLEVBQUVULGNBQWMsQ0FBQ1UsS0FBSyxHQUFHLEtBQUs7TUFDckNDLE9BQU8sRUFBRVgsY0FBYyxDQUFDWSxNQUFNLEdBQUc7SUFDbkMsQ0FBRSxDQUFDOztJQUVIO0lBQ0E7SUFDQSxNQUFNQyx3QkFBd0IsR0FBR2IsY0FBYyxDQUFDVSxLQUFLLEdBQUcsR0FBRztJQUMzRCxJQUFLVCxjQUFjLENBQUNTLEtBQUssR0FBR0csd0JBQXdCLEVBQUc7TUFDckRaLGNBQWMsQ0FBQ08sS0FBSyxDQUFFSyx3QkFBd0IsR0FBR1osY0FBYyxDQUFDUyxLQUFNLENBQUM7TUFDdkVULGNBQWMsQ0FBQ1EsT0FBTyxHQUFHVCxjQUFjLENBQUNVLEtBQUssR0FBRyxHQUFHO01BQ25EVCxjQUFjLENBQUNVLE9BQU8sR0FBR1gsY0FBYyxDQUFDWSxNQUFNLEdBQUcsR0FBRztJQUN0RDtJQUNBWixjQUFjLENBQUNjLFFBQVEsQ0FBRWIsY0FBZSxDQUFDO0lBRXpDLEtBQUssQ0FBRUQsY0FBYyxFQUFFO01BQ3JCZSxzQkFBc0IsRUFBRSxDQUFDO01BQ3pCQyx1QkFBdUIsRUFBRTtJQUMzQixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFwQixvQkFBb0IsQ0FBQ3FCLFFBQVEsQ0FBRSxjQUFjLEVBQUVuQixZQUFhLENBQUM7QUFDN0QsZUFBZUEsWUFBWSJ9