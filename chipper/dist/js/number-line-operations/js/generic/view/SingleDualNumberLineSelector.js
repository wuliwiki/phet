// Copyright 2020-2023, University of Colorado Boulder

/**
 * SingleDualNumberLineSelector defines a Scenery node with two radio buttons that are used to choose between "single
 * number line" and "dual number line" modes.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import { VBox } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import numberLineOperations from '../../numberLineOperations.js';

// constants
const ARROW_ICON_LENGTH = 40;
const ARROW_ICON_OPTIONS = {
  doubleHead: true,
  tailWidth: 1
};
class SingleDualNumberLineSelector extends RectangularRadioButtonGroup {
  /**
   * @param {BooleanProperty} secondNumberLineVisibleProperty
   * @param {Object} [options]
   */
  constructor(secondNumberLineVisibleProperty, options) {
    options = merge({
      orientation: 'horizontal',
      spacing: 12,
      touchAreaXDilation: 2,
      touchAreaYDilation: 2,
      radioButtonOptions: {
        xMargin: 5,
        yMargin: 10,
        baseColor: 'white',
        buttonAppearanceStrategyOptions: {
          selectedLineWidth: 2,
          deselectedLineWidth: 0.5,
          deselectedButtonOpacity: 0.5
        }
      }
    }, options);

    // radio button descriptor items
    const items = [{
      value: false,
      createNode: () => createDoubleArrowNode()
    }, {
      value: true,
      createNode: () => new VBox({
        children: [createDoubleArrowNode(), createDoubleArrowNode()],
        spacing: 10
      })
    }];
    super(secondNumberLineVisibleProperty, items, options);
  }
}

// convenience function for creating the arrow nodes
const createDoubleArrowNode = () => new ArrowNode(-ARROW_ICON_LENGTH / 2, 0, ARROW_ICON_LENGTH / 2, 0, ARROW_ICON_OPTIONS);
numberLineOperations.register('SingleDualNumberLineSelector', SingleDualNumberLineSelector);
export default SingleDualNumberLineSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFycm93Tm9kZSIsIlZCb3giLCJSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAiLCJudW1iZXJMaW5lT3BlcmF0aW9ucyIsIkFSUk9XX0lDT05fTEVOR1RIIiwiQVJST1dfSUNPTl9PUFRJT05TIiwiZG91YmxlSGVhZCIsInRhaWxXaWR0aCIsIlNpbmdsZUR1YWxOdW1iZXJMaW5lU2VsZWN0b3IiLCJjb25zdHJ1Y3RvciIsInNlY29uZE51bWJlckxpbmVWaXNpYmxlUHJvcGVydHkiLCJvcHRpb25zIiwib3JpZW50YXRpb24iLCJzcGFjaW5nIiwidG91Y2hBcmVhWERpbGF0aW9uIiwidG91Y2hBcmVhWURpbGF0aW9uIiwicmFkaW9CdXR0b25PcHRpb25zIiwieE1hcmdpbiIsInlNYXJnaW4iLCJiYXNlQ29sb3IiLCJidXR0b25BcHBlYXJhbmNlU3RyYXRlZ3lPcHRpb25zIiwic2VsZWN0ZWRMaW5lV2lkdGgiLCJkZXNlbGVjdGVkTGluZVdpZHRoIiwiZGVzZWxlY3RlZEJ1dHRvbk9wYWNpdHkiLCJpdGVtcyIsInZhbHVlIiwiY3JlYXRlTm9kZSIsImNyZWF0ZURvdWJsZUFycm93Tm9kZSIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTaW5nbGVEdWFsTnVtYmVyTGluZVNlbGVjdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNpbmdsZUR1YWxOdW1iZXJMaW5lU2VsZWN0b3IgZGVmaW5lcyBhIFNjZW5lcnkgbm9kZSB3aXRoIHR3byByYWRpbyBidXR0b25zIHRoYXQgYXJlIHVzZWQgdG8gY2hvb3NlIGJldHdlZW4gXCJzaW5nbGVcclxuICogbnVtYmVyIGxpbmVcIiBhbmQgXCJkdWFsIG51bWJlciBsaW5lXCIgbW9kZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBBcnJvd05vZGUgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL0Fycm93Tm9kZS5qcyc7XHJcbmltcG9ydCB7IFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBudW1iZXJMaW5lT3BlcmF0aW9ucyBmcm9tICcuLi8uLi9udW1iZXJMaW5lT3BlcmF0aW9ucy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQVJST1dfSUNPTl9MRU5HVEggPSA0MDtcclxuY29uc3QgQVJST1dfSUNPTl9PUFRJT05TID0ge1xyXG4gIGRvdWJsZUhlYWQ6IHRydWUsXHJcbiAgdGFpbFdpZHRoOiAxXHJcbn07XHJcblxyXG5jbGFzcyBTaW5nbGVEdWFsTnVtYmVyTGluZVNlbGVjdG9yIGV4dGVuZHMgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IHNlY29uZE51bWJlckxpbmVWaXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHNlY29uZE51bWJlckxpbmVWaXNpYmxlUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgIHNwYWNpbmc6IDEyLFxyXG4gICAgICB0b3VjaEFyZWFYRGlsYXRpb246IDIsXHJcbiAgICAgIHRvdWNoQXJlYVlEaWxhdGlvbjogMixcclxuICAgICAgcmFkaW9CdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgeE1hcmdpbjogNSxcclxuICAgICAgICB5TWFyZ2luOiAxMCxcclxuICAgICAgICBiYXNlQ29sb3I6ICd3aGl0ZScsXHJcbiAgICAgICAgYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9uczoge1xyXG4gICAgICAgICAgc2VsZWN0ZWRMaW5lV2lkdGg6IDIsXHJcbiAgICAgICAgICBkZXNlbGVjdGVkTGluZVdpZHRoOiAwLjUsXHJcbiAgICAgICAgICBkZXNlbGVjdGVkQnV0dG9uT3BhY2l0eTogMC41XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gcmFkaW8gYnV0dG9uIGRlc2NyaXB0b3IgaXRlbXNcclxuICAgIGNvbnN0IGl0ZW1zID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IGNyZWF0ZURvdWJsZUFycm93Tm9kZSgpXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVkJveCgge1xyXG4gICAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAgY3JlYXRlRG91YmxlQXJyb3dOb2RlKCksXHJcbiAgICAgICAgICAgIGNyZWF0ZURvdWJsZUFycm93Tm9kZSgpXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgc3BhY2luZzogMTBcclxuICAgICAgICB9IClcclxuICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggc2Vjb25kTnVtYmVyTGluZVZpc2libGVQcm9wZXJ0eSwgaXRlbXMsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBjcmVhdGluZyB0aGUgYXJyb3cgbm9kZXNcclxuY29uc3QgY3JlYXRlRG91YmxlQXJyb3dOb2RlID0gKCkgPT4gbmV3IEFycm93Tm9kZSggLUFSUk9XX0lDT05fTEVOR1RIIC8gMiwgMCwgQVJST1dfSUNPTl9MRU5HVEggLyAyLCAwLCBBUlJPV19JQ09OX09QVElPTlMgKTtcclxuXHJcbm51bWJlckxpbmVPcGVyYXRpb25zLnJlZ2lzdGVyKCAnU2luZ2xlRHVhbE51bWJlckxpbmVTZWxlY3RvcicsIFNpbmdsZUR1YWxOdW1iZXJMaW5lU2VsZWN0b3IgKTtcclxuZXhwb3J0IGRlZmF1bHQgU2luZ2xlRHVhbE51bWJlckxpbmVTZWxlY3RvcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFNBQVMsTUFBTSwwQ0FBMEM7QUFDaEUsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQywyQkFBMkIsTUFBTSwyREFBMkQ7QUFDbkcsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCOztBQUVoRTtBQUNBLE1BQU1DLGlCQUFpQixHQUFHLEVBQUU7QUFDNUIsTUFBTUMsa0JBQWtCLEdBQUc7RUFDekJDLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxTQUFTLEVBQUU7QUFDYixDQUFDO0FBRUQsTUFBTUMsNEJBQTRCLFNBQVNOLDJCQUEyQixDQUFDO0VBRXJFO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VPLFdBQVdBLENBQUVDLCtCQUErQixFQUFFQyxPQUFPLEVBQUc7SUFFdERBLE9BQU8sR0FBR1osS0FBSyxDQUFFO01BQ2ZhLFdBQVcsRUFBRSxZQUFZO01BQ3pCQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxrQkFBa0IsRUFBRSxDQUFDO01BQ3JCQyxrQkFBa0IsRUFBRSxDQUFDO01BQ3JCQyxrQkFBa0IsRUFBRTtRQUNsQkMsT0FBTyxFQUFFLENBQUM7UUFDVkMsT0FBTyxFQUFFLEVBQUU7UUFDWEMsU0FBUyxFQUFFLE9BQU87UUFDbEJDLCtCQUErQixFQUFFO1VBQy9CQyxpQkFBaUIsRUFBRSxDQUFDO1VBQ3BCQyxtQkFBbUIsRUFBRSxHQUFHO1VBQ3hCQyx1QkFBdUIsRUFBRTtRQUMzQjtNQUNGO0lBQ0YsQ0FBQyxFQUFFWixPQUFRLENBQUM7O0lBRVo7SUFDQSxNQUFNYSxLQUFLLEdBQUcsQ0FDWjtNQUNFQyxLQUFLLEVBQUUsS0FBSztNQUNaQyxVQUFVLEVBQUVBLENBQUEsS0FBTUMscUJBQXFCLENBQUM7SUFDMUMsQ0FBQyxFQUNEO01BQ0VGLEtBQUssRUFBRSxJQUFJO01BQ1hDLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUl6QixJQUFJLENBQUU7UUFDMUIyQixRQUFRLEVBQUUsQ0FDUkQscUJBQXFCLENBQUMsQ0FBQyxFQUN2QkEscUJBQXFCLENBQUMsQ0FBQyxDQUN4QjtRQUNEZCxPQUFPLEVBQUU7TUFDWCxDQUFFO0lBQ0osQ0FBQyxDQUNGO0lBRUQsS0FBSyxDQUFFSCwrQkFBK0IsRUFBRWMsS0FBSyxFQUFFYixPQUFRLENBQUM7RUFDMUQ7QUFDRjs7QUFFQTtBQUNBLE1BQU1nQixxQkFBcUIsR0FBR0EsQ0FBQSxLQUFNLElBQUkzQixTQUFTLENBQUUsQ0FBQ0ksaUJBQWlCLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUEsaUJBQWlCLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUMsa0JBQW1CLENBQUM7QUFFNUhGLG9CQUFvQixDQUFDMEIsUUFBUSxDQUFFLDhCQUE4QixFQUFFckIsNEJBQTZCLENBQUM7QUFDN0YsZUFBZUEsNEJBQTRCIn0=