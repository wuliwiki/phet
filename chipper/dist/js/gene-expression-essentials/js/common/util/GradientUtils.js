// Copyright 2015-2021, University of Colorado Boulder

/**
 * utilities for creating gradients
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

//modules
import { LinearGradient } from '../../../../scenery/js/imports.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import GEEConstants from '../GEEConstants.js';
const GradientUtils = {
  /**
   * Create a gradient paint in order to give a molecule a little depth. This is public so that it can be used by other
   * nodes that need to depict biomolecules.
   *
   * @param {Shape} shape;
   * @param {Color} baseColor
   */
  createGradientPaint(shape, baseColor) {
    let paint;
    if (!GEEConstants.FLORESCENT_FILL_COLOR.equals(baseColor)) {
      const shapeBounds = shape.bounds;
      paint = new LinearGradient(shapeBounds.getMinX(), shapeBounds.getCenterY(), shapeBounds.getMaxX(), shapeBounds.getCenterY());
      paint.addColorStop(0, baseColor.brighterColor(0.5));
      paint.addColorStop(1, baseColor.darkerColor(0.5));
    } else {
      // Special case: If using the "fluorescent" color, i.e. the one used to depict green fluorescent protein in the
      // sim, don't create a gradient, because it looks brighter and more distinct.
      paint = baseColor;
    }
    return paint;
  }
};
geneExpressionEssentials.register('GradientUtils', GradientUtils);
export default GradientUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lYXJHcmFkaWVudCIsImdlbmVFeHByZXNzaW9uRXNzZW50aWFscyIsIkdFRUNvbnN0YW50cyIsIkdyYWRpZW50VXRpbHMiLCJjcmVhdGVHcmFkaWVudFBhaW50Iiwic2hhcGUiLCJiYXNlQ29sb3IiLCJwYWludCIsIkZMT1JFU0NFTlRfRklMTF9DT0xPUiIsImVxdWFscyIsInNoYXBlQm91bmRzIiwiYm91bmRzIiwiZ2V0TWluWCIsImdldENlbnRlclkiLCJnZXRNYXhYIiwiYWRkQ29sb3JTdG9wIiwiYnJpZ2h0ZXJDb2xvciIsImRhcmtlckNvbG9yIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHcmFkaWVudFV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIHV0aWxpdGllcyBmb3IgY3JlYXRpbmcgZ3JhZGllbnRzXHJcbiAqXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWZcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcblxyXG4vL21vZHVsZXNcclxuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBHRUVDb25zdGFudHMgZnJvbSAnLi4vR0VFQ29uc3RhbnRzLmpzJztcclxuXHJcbmNvbnN0IEdyYWRpZW50VXRpbHMgPSB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgZ3JhZGllbnQgcGFpbnQgaW4gb3JkZXIgdG8gZ2l2ZSBhIG1vbGVjdWxlIGEgbGl0dGxlIGRlcHRoLiBUaGlzIGlzIHB1YmxpYyBzbyB0aGF0IGl0IGNhbiBiZSB1c2VkIGJ5IG90aGVyXHJcbiAgICogbm9kZXMgdGhhdCBuZWVkIHRvIGRlcGljdCBiaW9tb2xlY3VsZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1NoYXBlfSBzaGFwZTtcclxuICAgKiBAcGFyYW0ge0NvbG9yfSBiYXNlQ29sb3JcclxuICAgKi9cclxuICBjcmVhdGVHcmFkaWVudFBhaW50KCBzaGFwZSwgYmFzZUNvbG9yICkge1xyXG4gICAgbGV0IHBhaW50O1xyXG4gICAgaWYgKCAhR0VFQ29uc3RhbnRzLkZMT1JFU0NFTlRfRklMTF9DT0xPUi5lcXVhbHMoIGJhc2VDb2xvciApICkge1xyXG4gICAgICBjb25zdCBzaGFwZUJvdW5kcyA9IHNoYXBlLmJvdW5kcztcclxuICAgICAgcGFpbnQgPSBuZXcgTGluZWFyR3JhZGllbnQoIHNoYXBlQm91bmRzLmdldE1pblgoKSxcclxuICAgICAgICBzaGFwZUJvdW5kcy5nZXRDZW50ZXJZKCksXHJcbiAgICAgICAgc2hhcGVCb3VuZHMuZ2V0TWF4WCgpLFxyXG4gICAgICAgIHNoYXBlQm91bmRzLmdldENlbnRlclkoKSApO1xyXG5cclxuICAgICAgcGFpbnQuYWRkQ29sb3JTdG9wKCAwLCBiYXNlQ29sb3IuYnJpZ2h0ZXJDb2xvciggMC41ICkgKTtcclxuICAgICAgcGFpbnQuYWRkQ29sb3JTdG9wKCAxLCBiYXNlQ29sb3IuZGFya2VyQ29sb3IoIDAuNSApICk7XHJcblxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8vIFNwZWNpYWwgY2FzZTogSWYgdXNpbmcgdGhlIFwiZmx1b3Jlc2NlbnRcIiBjb2xvciwgaS5lLiB0aGUgb25lIHVzZWQgdG8gZGVwaWN0IGdyZWVuIGZsdW9yZXNjZW50IHByb3RlaW4gaW4gdGhlXHJcbiAgICAgIC8vIHNpbSwgZG9uJ3QgY3JlYXRlIGEgZ3JhZGllbnQsIGJlY2F1c2UgaXQgbG9va3MgYnJpZ2h0ZXIgYW5kIG1vcmUgZGlzdGluY3QuXHJcbiAgICAgIHBhaW50ID0gYmFzZUNvbG9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhaW50O1xyXG4gIH1cclxufTtcclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnR3JhZGllbnRVdGlscycsIEdyYWRpZW50VXRpbHMgKTtcclxuZXhwb3J0IGRlZmF1bHQgR3JhZGllbnRVdGlsczsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0EsU0FBU0EsY0FBYyxRQUFRLG1DQUFtQztBQUNsRSxPQUFPQyx3QkFBd0IsTUFBTSxtQ0FBbUM7QUFDeEUsT0FBT0MsWUFBWSxNQUFNLG9CQUFvQjtBQUU3QyxNQUFNQyxhQUFhLEdBQUc7RUFDcEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsbUJBQW1CQSxDQUFFQyxLQUFLLEVBQUVDLFNBQVMsRUFBRztJQUN0QyxJQUFJQyxLQUFLO0lBQ1QsSUFBSyxDQUFDTCxZQUFZLENBQUNNLHFCQUFxQixDQUFDQyxNQUFNLENBQUVILFNBQVUsQ0FBQyxFQUFHO01BQzdELE1BQU1JLFdBQVcsR0FBR0wsS0FBSyxDQUFDTSxNQUFNO01BQ2hDSixLQUFLLEdBQUcsSUFBSVAsY0FBYyxDQUFFVSxXQUFXLENBQUNFLE9BQU8sQ0FBQyxDQUFDLEVBQy9DRixXQUFXLENBQUNHLFVBQVUsQ0FBQyxDQUFDLEVBQ3hCSCxXQUFXLENBQUNJLE9BQU8sQ0FBQyxDQUFDLEVBQ3JCSixXQUFXLENBQUNHLFVBQVUsQ0FBQyxDQUFFLENBQUM7TUFFNUJOLEtBQUssQ0FBQ1EsWUFBWSxDQUFFLENBQUMsRUFBRVQsU0FBUyxDQUFDVSxhQUFhLENBQUUsR0FBSSxDQUFFLENBQUM7TUFDdkRULEtBQUssQ0FBQ1EsWUFBWSxDQUFFLENBQUMsRUFBRVQsU0FBUyxDQUFDVyxXQUFXLENBQUUsR0FBSSxDQUFFLENBQUM7SUFFdkQsQ0FBQyxNQUNJO01BQ0g7TUFDQTtNQUNBVixLQUFLLEdBQUdELFNBQVM7SUFDbkI7SUFDQSxPQUFPQyxLQUFLO0VBQ2Q7QUFDRixDQUFDO0FBQ0ROLHdCQUF3QixDQUFDaUIsUUFBUSxDQUFFLGVBQWUsRUFBRWYsYUFBYyxDQUFDO0FBQ25FLGVBQWVBLGFBQWEifQ==