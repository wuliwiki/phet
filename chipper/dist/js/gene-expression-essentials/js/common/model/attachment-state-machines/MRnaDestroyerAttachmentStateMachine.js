// Copyright 2015-2020, University of Colorado Boulder

/**
 * This class defined the attachment state machine for the biomolecules that destroy the messenger RNA molecules.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import GenericAttachmentStateMachine from './GenericAttachmentStateMachine.js';
import MRnaDestroyerAttachedState from './MRnaDestroyerAttachedState.js';
import UnattachedAndAvailableForMRnaAttachmentState from './UnattachedAndAvailableForMRnaAttachmentState.js';
class MRnaDestroyerAttachmentStateMachine extends GenericAttachmentStateMachine {
  /**
   * @param {MessengerRnaDestroyer} messengerRnaDestroyer
   */
  constructor(messengerRnaDestroyer) {
    super(messengerRnaDestroyer);

    // @public {MessengerRnaDestroyer}
    this.mRnaDestroyer = messengerRnaDestroyer;

    // @override - override the unattached state, since attaching to mRNA is a little different versus the default behavior
    this.unattachedAndAvailableState = new UnattachedAndAvailableForMRnaAttachmentState(this);

    // @override - Set up a non-default "attached" state, since the behavior is different from the default.
    this.attachedState = new MRnaDestroyerAttachedState(this);
  }

  /**
   * @override
   * @public
   */
  forceImmediateUnattachedAndAvailable() {
    if (this.mRnaDestroyer.getMessengerRnaBeingDestroyed() !== null) {
      // Abort a pending attachment to mRNA.
      this.mRnaDestroyer.getMessengerRnaBeingDestroyed().abortDestruction();
      this.mRnaDestroyer.clearMessengerRnaBeingDestroyed();
    }
    super.forceImmediateUnattachedAndAvailable();
  }
}
geneExpressionEssentials.register('MRnaDestroyerAttachmentStateMachine', MRnaDestroyerAttachmentStateMachine);
export default MRnaDestroyerAttachmentStateMachine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJHZW5lcmljQXR0YWNobWVudFN0YXRlTWFjaGluZSIsIk1SbmFEZXN0cm95ZXJBdHRhY2hlZFN0YXRlIiwiVW5hdHRhY2hlZEFuZEF2YWlsYWJsZUZvck1SbmFBdHRhY2htZW50U3RhdGUiLCJNUm5hRGVzdHJveWVyQXR0YWNobWVudFN0YXRlTWFjaGluZSIsImNvbnN0cnVjdG9yIiwibWVzc2VuZ2VyUm5hRGVzdHJveWVyIiwibVJuYURlc3Ryb3llciIsInVuYXR0YWNoZWRBbmRBdmFpbGFibGVTdGF0ZSIsImF0dGFjaGVkU3RhdGUiLCJmb3JjZUltbWVkaWF0ZVVuYXR0YWNoZWRBbmRBdmFpbGFibGUiLCJnZXRNZXNzZW5nZXJSbmFCZWluZ0Rlc3Ryb3llZCIsImFib3J0RGVzdHJ1Y3Rpb24iLCJjbGVhck1lc3NlbmdlclJuYUJlaW5nRGVzdHJveWVkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNUm5hRGVzdHJveWVyQXR0YWNobWVudFN0YXRlTWFjaGluZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGRlZmluZWQgdGhlIGF0dGFjaG1lbnQgc3RhdGUgbWFjaGluZSBmb3IgdGhlIGJpb21vbGVjdWxlcyB0aGF0IGRlc3Ryb3kgdGhlIG1lc3NlbmdlciBSTkEgbW9sZWN1bGVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgR2VuZXJpY0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgZnJvbSAnLi9HZW5lcmljQXR0YWNobWVudFN0YXRlTWFjaGluZS5qcyc7XHJcbmltcG9ydCBNUm5hRGVzdHJveWVyQXR0YWNoZWRTdGF0ZSBmcm9tICcuL01SbmFEZXN0cm95ZXJBdHRhY2hlZFN0YXRlLmpzJztcclxuaW1wb3J0IFVuYXR0YWNoZWRBbmRBdmFpbGFibGVGb3JNUm5hQXR0YWNobWVudFN0YXRlIGZyb20gJy4vVW5hdHRhY2hlZEFuZEF2YWlsYWJsZUZvck1SbmFBdHRhY2htZW50U3RhdGUuanMnO1xyXG5cclxuY2xhc3MgTVJuYURlc3Ryb3llckF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgZXh0ZW5kcyBHZW5lcmljQXR0YWNobWVudFN0YXRlTWFjaGluZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TWVzc2VuZ2VyUm5hRGVzdHJveWVyfSBtZXNzZW5nZXJSbmFEZXN0cm95ZXJcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbWVzc2VuZ2VyUm5hRGVzdHJveWVyICkge1xyXG4gICAgc3VwZXIoIG1lc3NlbmdlclJuYURlc3Ryb3llciApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge01lc3NlbmdlclJuYURlc3Ryb3llcn1cclxuICAgIHRoaXMubVJuYURlc3Ryb3llciA9IG1lc3NlbmdlclJuYURlc3Ryb3llcjtcclxuXHJcbiAgICAvLyBAb3ZlcnJpZGUgLSBvdmVycmlkZSB0aGUgdW5hdHRhY2hlZCBzdGF0ZSwgc2luY2UgYXR0YWNoaW5nIHRvIG1STkEgaXMgYSBsaXR0bGUgZGlmZmVyZW50IHZlcnN1cyB0aGUgZGVmYXVsdCBiZWhhdmlvclxyXG4gICAgdGhpcy51bmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGUgPSBuZXcgVW5hdHRhY2hlZEFuZEF2YWlsYWJsZUZvck1SbmFBdHRhY2htZW50U3RhdGUoIHRoaXMgKTtcclxuXHJcbiAgICAvLyBAb3ZlcnJpZGUgLSBTZXQgdXAgYSBub24tZGVmYXVsdCBcImF0dGFjaGVkXCIgc3RhdGUsIHNpbmNlIHRoZSBiZWhhdmlvciBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgZGVmYXVsdC5cclxuICAgIHRoaXMuYXR0YWNoZWRTdGF0ZSA9IG5ldyBNUm5hRGVzdHJveWVyQXR0YWNoZWRTdGF0ZSggdGhpcyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGZvcmNlSW1tZWRpYXRlVW5hdHRhY2hlZEFuZEF2YWlsYWJsZSgpIHtcclxuICAgIGlmICggdGhpcy5tUm5hRGVzdHJveWVyLmdldE1lc3NlbmdlclJuYUJlaW5nRGVzdHJveWVkKCkgIT09IG51bGwgKSB7XHJcblxyXG4gICAgICAvLyBBYm9ydCBhIHBlbmRpbmcgYXR0YWNobWVudCB0byBtUk5BLlxyXG4gICAgICB0aGlzLm1SbmFEZXN0cm95ZXIuZ2V0TWVzc2VuZ2VyUm5hQmVpbmdEZXN0cm95ZWQoKS5hYm9ydERlc3RydWN0aW9uKCk7XHJcbiAgICAgIHRoaXMubVJuYURlc3Ryb3llci5jbGVhck1lc3NlbmdlclJuYUJlaW5nRGVzdHJveWVkKCk7XHJcbiAgICB9XHJcbiAgICBzdXBlci5mb3JjZUltbWVkaWF0ZVVuYXR0YWNoZWRBbmRBdmFpbGFibGUoKTtcclxuICB9XHJcbn1cclxuXHJcbmdlbmVFeHByZXNzaW9uRXNzZW50aWFscy5yZWdpc3RlciggJ01SbmFEZXN0cm95ZXJBdHRhY2htZW50U3RhdGVNYWNoaW5lJywgTVJuYURlc3Ryb3llckF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1SbmFEZXN0cm95ZXJBdHRhY2htZW50U3RhdGVNYWNoaW5lOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0Esd0JBQXdCLE1BQU0sc0NBQXNDO0FBQzNFLE9BQU9DLDZCQUE2QixNQUFNLG9DQUFvQztBQUM5RSxPQUFPQywwQkFBMEIsTUFBTSxpQ0FBaUM7QUFDeEUsT0FBT0MsNENBQTRDLE1BQU0sbURBQW1EO0FBRTVHLE1BQU1DLG1DQUFtQyxTQUFTSCw2QkFBNkIsQ0FBQztFQUU5RTtBQUNGO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMscUJBQXFCLEVBQUc7SUFDbkMsS0FBSyxDQUFFQSxxQkFBc0IsQ0FBQzs7SUFFOUI7SUFDQSxJQUFJLENBQUNDLGFBQWEsR0FBR0QscUJBQXFCOztJQUUxQztJQUNBLElBQUksQ0FBQ0UsMkJBQTJCLEdBQUcsSUFBSUwsNENBQTRDLENBQUUsSUFBSyxDQUFDOztJQUUzRjtJQUNBLElBQUksQ0FBQ00sYUFBYSxHQUFHLElBQUlQLDBCQUEwQixDQUFFLElBQUssQ0FBQztFQUM3RDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFUSxvQ0FBb0NBLENBQUEsRUFBRztJQUNyQyxJQUFLLElBQUksQ0FBQ0gsYUFBYSxDQUFDSSw2QkFBNkIsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFHO01BRWpFO01BQ0EsSUFBSSxDQUFDSixhQUFhLENBQUNJLDZCQUE2QixDQUFDLENBQUMsQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQztNQUNyRSxJQUFJLENBQUNMLGFBQWEsQ0FBQ00sK0JBQStCLENBQUMsQ0FBQztJQUN0RDtJQUNBLEtBQUssQ0FBQ0gsb0NBQW9DLENBQUMsQ0FBQztFQUM5QztBQUNGO0FBRUFWLHdCQUF3QixDQUFDYyxRQUFRLENBQUUscUNBQXFDLEVBQUVWLG1DQUFvQyxDQUFDO0FBRS9HLGVBQWVBLG1DQUFtQyJ9