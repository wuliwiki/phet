// Copyright 2015-2020, University of Colorado Boulder

/**
 * One of the states for MessengerRnaAttachmentStateMachine
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import WanderInGeneralDirectionMotionStrategy from '../motion-strategies/WanderInGeneralDirectionMotionStrategy.js';
import AttachmentState from './AttachmentState.js';

// constants
const PRE_FADE_TIME = 5;
const FADE_OUT_TIME = 2;
class UnattachedAndFadingState extends AttachmentState {
  /**
   * @param {MessengerRnaAttachmentStateMachine} messengerRnaAttachmentStateMachine
   */
  constructor(messengerRnaAttachmentStateMachine) {
    super();
    this.messengerRnaAttachmentStateMachine = messengerRnaAttachmentStateMachine; //@public
    this.preFadeCountdown = PRE_FADE_TIME; //@private
  }

  /**
   * @override
   * @param {AttachmentStateMachine} asm
   * @param {number} dt
   * @public
   */
  step(asm, dt) {
    if (this.preFadeCountdown > 0) {
      this.preFadeCountdown -= dt;
    } else {
      const biomolecule = this.messengerRnaAttachmentStateMachine.biomolecule;
      biomolecule.existenceStrengthProperty.set(Math.max(biomolecule.existenceStrengthProperty.get() - dt / FADE_OUT_TIME, 0));
    }
  }

  /**
   * @override
   * @param {AttachmentStateMachine}  asm
   * @public
   */
  entered(asm) {
    // State checking - should be at full strength.
    assert && assert(this.messengerRnaAttachmentStateMachine.biomolecule.existenceStrengthProperty.get() === 1);
    this.preFadeCountdown = PRE_FADE_TIME;

    // Move upwards, away from the DNA and polymerase.
    asm.biomolecule.setMotionStrategy(new WanderInGeneralDirectionMotionStrategy(new Vector2(0, 0.75), asm.biomolecule.motionBoundsProperty));
  }
}
geneExpressionEssentials.register('UnattachedAndFadingState', UnattachedAndFadingState);
export default UnattachedAndFadingState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIiwiV2FuZGVySW5HZW5lcmFsRGlyZWN0aW9uTW90aW9uU3RyYXRlZ3kiLCJBdHRhY2htZW50U3RhdGUiLCJQUkVfRkFERV9USU1FIiwiRkFERV9PVVRfVElNRSIsIlVuYXR0YWNoZWRBbmRGYWRpbmdTdGF0ZSIsImNvbnN0cnVjdG9yIiwibWVzc2VuZ2VyUm5hQXR0YWNobWVudFN0YXRlTWFjaGluZSIsInByZUZhZGVDb3VudGRvd24iLCJzdGVwIiwiYXNtIiwiZHQiLCJiaW9tb2xlY3VsZSIsImV4aXN0ZW5jZVN0cmVuZ3RoUHJvcGVydHkiLCJzZXQiLCJNYXRoIiwibWF4IiwiZ2V0IiwiZW50ZXJlZCIsImFzc2VydCIsInNldE1vdGlvblN0cmF0ZWd5IiwibW90aW9uQm91bmRzUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVuYXR0YWNoZWRBbmRGYWRpbmdTdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBPbmUgb2YgdGhlIHN0YXRlcyBmb3IgTWVzc2VuZ2VyUm5hQXR0YWNobWVudFN0YXRlTWFjaGluZVxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBXYW5kZXJJbkdlbmVyYWxEaXJlY3Rpb25Nb3Rpb25TdHJhdGVneSBmcm9tICcuLi9tb3Rpb24tc3RyYXRlZ2llcy9XYW5kZXJJbkdlbmVyYWxEaXJlY3Rpb25Nb3Rpb25TdHJhdGVneS5qcyc7XHJcbmltcG9ydCBBdHRhY2htZW50U3RhdGUgZnJvbSAnLi9BdHRhY2htZW50U3RhdGUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFBSRV9GQURFX1RJTUUgPSA1O1xyXG5jb25zdCBGQURFX09VVF9USU1FID0gMjtcclxuXHJcbmNsYXNzIFVuYXR0YWNoZWRBbmRGYWRpbmdTdGF0ZSBleHRlbmRzIEF0dGFjaG1lbnRTdGF0ZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TWVzc2VuZ2VyUm5hQXR0YWNobWVudFN0YXRlTWFjaGluZX0gbWVzc2VuZ2VyUm5hQXR0YWNobWVudFN0YXRlTWFjaGluZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtZXNzZW5nZXJSbmFBdHRhY2htZW50U3RhdGVNYWNoaW5lICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMubWVzc2VuZ2VyUm5hQXR0YWNobWVudFN0YXRlTWFjaGluZSA9IG1lc3NlbmdlclJuYUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmU7IC8vQHB1YmxpY1xyXG4gICAgdGhpcy5wcmVGYWRlQ291bnRkb3duID0gUFJFX0ZBREVfVElNRTsgLy9AcHJpdmF0ZVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtBdHRhY2htZW50U3RhdGVNYWNoaW5lfSBhc21cclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHRcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCggYXNtLCBkdCApIHtcclxuICAgIGlmICggdGhpcy5wcmVGYWRlQ291bnRkb3duID4gMCApIHtcclxuICAgICAgdGhpcy5wcmVGYWRlQ291bnRkb3duIC09IGR0O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNvbnN0IGJpb21vbGVjdWxlID0gdGhpcy5tZXNzZW5nZXJSbmFBdHRhY2htZW50U3RhdGVNYWNoaW5lLmJpb21vbGVjdWxlO1xyXG4gICAgICBiaW9tb2xlY3VsZS5leGlzdGVuY2VTdHJlbmd0aFByb3BlcnR5LnNldCggTWF0aC5tYXgoIGJpb21vbGVjdWxlLmV4aXN0ZW5jZVN0cmVuZ3RoUHJvcGVydHkuZ2V0KCkgLSBkdCAvIEZBREVfT1VUX1RJTUUsIDAgKSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtBdHRhY2htZW50U3RhdGVNYWNoaW5lfSAgYXNtXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGVudGVyZWQoIGFzbSApIHtcclxuICAgIC8vIFN0YXRlIGNoZWNraW5nIC0gc2hvdWxkIGJlIGF0IGZ1bGwgc3RyZW5ndGguXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLm1lc3NlbmdlclJuYUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUuYmlvbW9sZWN1bGUuZXhpc3RlbmNlU3RyZW5ndGhQcm9wZXJ0eS5nZXQoKSA9PT0gMSApO1xyXG4gICAgdGhpcy5wcmVGYWRlQ291bnRkb3duID0gUFJFX0ZBREVfVElNRTtcclxuXHJcbiAgICAvLyBNb3ZlIHVwd2FyZHMsIGF3YXkgZnJvbSB0aGUgRE5BIGFuZCBwb2x5bWVyYXNlLlxyXG4gICAgYXNtLmJpb21vbGVjdWxlLnNldE1vdGlvblN0cmF0ZWd5KCBuZXcgV2FuZGVySW5HZW5lcmFsRGlyZWN0aW9uTW90aW9uU3RyYXRlZ3koIG5ldyBWZWN0b3IyKCAwLCAwLjc1ICksXHJcbiAgICAgIGFzbS5iaW9tb2xlY3VsZS5tb3Rpb25Cb3VuZHNQcm9wZXJ0eSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdVbmF0dGFjaGVkQW5kRmFkaW5nU3RhdGUnLCBVbmF0dGFjaGVkQW5kRmFkaW5nU3RhdGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVuYXR0YWNoZWRBbmRGYWRpbmdTdGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sa0NBQWtDO0FBQ3RELE9BQU9DLHdCQUF3QixNQUFNLHNDQUFzQztBQUMzRSxPQUFPQyxzQ0FBc0MsTUFBTSxnRUFBZ0U7QUFDbkgsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjs7QUFFbEQ7QUFDQSxNQUFNQyxhQUFhLEdBQUcsQ0FBQztBQUN2QixNQUFNQyxhQUFhLEdBQUcsQ0FBQztBQUV2QixNQUFNQyx3QkFBd0IsU0FBU0gsZUFBZSxDQUFDO0VBRXJEO0FBQ0Y7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxrQ0FBa0MsRUFBRztJQUNoRCxLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQ0Esa0NBQWtDLEdBQUdBLGtDQUFrQyxDQUFDLENBQUM7SUFDOUUsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0wsYUFBYSxDQUFDLENBQUM7RUFDekM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLElBQUlBLENBQUVDLEdBQUcsRUFBRUMsRUFBRSxFQUFHO0lBQ2QsSUFBSyxJQUFJLENBQUNILGdCQUFnQixHQUFHLENBQUMsRUFBRztNQUMvQixJQUFJLENBQUNBLGdCQUFnQixJQUFJRyxFQUFFO0lBQzdCLENBQUMsTUFDSTtNQUNILE1BQU1DLFdBQVcsR0FBRyxJQUFJLENBQUNMLGtDQUFrQyxDQUFDSyxXQUFXO01BQ3ZFQSxXQUFXLENBQUNDLHlCQUF5QixDQUFDQyxHQUFHLENBQUVDLElBQUksQ0FBQ0MsR0FBRyxDQUFFSixXQUFXLENBQUNDLHlCQUF5QixDQUFDSSxHQUFHLENBQUMsQ0FBQyxHQUFHTixFQUFFLEdBQUdQLGFBQWEsRUFBRSxDQUFFLENBQUUsQ0FBQztJQUM5SDtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRWMsT0FBT0EsQ0FBRVIsR0FBRyxFQUFHO0lBQ2I7SUFDQVMsTUFBTSxJQUFJQSxNQUFNLENBQUUsSUFBSSxDQUFDWixrQ0FBa0MsQ0FBQ0ssV0FBVyxDQUFDQyx5QkFBeUIsQ0FBQ0ksR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUM7SUFDN0csSUFBSSxDQUFDVCxnQkFBZ0IsR0FBR0wsYUFBYTs7SUFFckM7SUFDQU8sR0FBRyxDQUFDRSxXQUFXLENBQUNRLGlCQUFpQixDQUFFLElBQUluQixzQ0FBc0MsQ0FBRSxJQUFJRixPQUFPLENBQUUsQ0FBQyxFQUFFLElBQUssQ0FBQyxFQUNuR1csR0FBRyxDQUFDRSxXQUFXLENBQUNTLG9CQUFxQixDQUFFLENBQUM7RUFDNUM7QUFDRjtBQUVBckIsd0JBQXdCLENBQUNzQixRQUFRLENBQUUsMEJBQTBCLEVBQUVqQix3QkFBeUIsQ0FBQztBQUV6RixlQUFlQSx3QkFBd0IifQ==