// Copyright 2015-2021, University of Colorado Boulder

/**
 * One of the states for RnaPolymeraseAttachmentStateMachine. RnaPolymerase enters this stage when it detached from DNA
 * and recycle mode is set to true.
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import dotRandom from '../../../../../dot/js/dotRandom.js';
import Vector2 from '../../../../../dot/js/Vector2.js';
import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import DriftThenTeleportMotionStrategy from '../motion-strategies/DriftThenTeleportMotionStrategy.js';
import RandomWalkMotionStrategy from '../motion-strategies/RandomWalkMotionStrategy.js';
import AttachmentState from './AttachmentState.js';
class BeingRecycledState extends AttachmentState {
  /**
   * @param {RnaPolymeraseAttachmentStateMachine} rnaPolymeraseAttachmentStateMachine
   * @param {Array.<Bounds2>} recycleReturnZones
   */
  constructor(rnaPolymeraseAttachmentStateMachine, recycleReturnZones) {
    super();

    // @public (read-ony) {RnaPolymeraseAttachmentStateMachine}
    this.rnaPolymeraseAttachmentStateMachine = rnaPolymeraseAttachmentStateMachine;

    // private
    this.recycleReturnZones = recycleReturnZones;
  }

  /**
   * @override
   * @param {AttachmentStateMachine} asm
   * @param {number} dt
   * @public
   */
  step(asm, dt) {
    // Verify that state is consistent.
    assert && assert(asm.attachmentSite === null);
    const biomolecule = this.rnaPolymeraseAttachmentStateMachine.biomolecule;
    const unattachedAndAvailableState = this.rnaPolymeraseAttachmentStateMachine.unattachedAndAvailableState;
    if (this.rnaPolymeraseAttachmentStateMachine.pointContainedInBoundsList(asm.biomolecule.getPosition(), this.recycleReturnZones)) {
      // The motion strategy has returned the biomolecule to the recycle return zone, so this state is complete.
      asm.biomolecule.setMotionStrategy(new RandomWalkMotionStrategy(biomolecule.motionBoundsProperty));
      asm.setState(unattachedAndAvailableState);
    }
  }

  /**
   * @override
   * @param {AttachmentStateMachine} asm
   * @public
   */
  entered(asm) {
    const biomolecule = this.rnaPolymeraseAttachmentStateMachine.biomolecule;

    // Prevent user interaction.
    asm.biomolecule.movableByUserProperty.set(false);

    // Set the motion strategy that will move the polymerase clear of the DNA, then teleport it to a position within
    // the specified bounds.
    asm.biomolecule.setMotionStrategy(new DriftThenTeleportMotionStrategy(new Vector2(0, dotRandom.nextBoolean() ? 1 : -1), this.recycleReturnZones, biomolecule.motionBoundsProperty));
  }
}
geneExpressionEssentials.register('BeingRecycledState', BeingRecycledState);
export default BeingRecycledState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJWZWN0b3IyIiwiZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIiwiRHJpZnRUaGVuVGVsZXBvcnRNb3Rpb25TdHJhdGVneSIsIlJhbmRvbVdhbGtNb3Rpb25TdHJhdGVneSIsIkF0dGFjaG1lbnRTdGF0ZSIsIkJlaW5nUmVjeWNsZWRTdGF0ZSIsImNvbnN0cnVjdG9yIiwicm5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUiLCJyZWN5Y2xlUmV0dXJuWm9uZXMiLCJzdGVwIiwiYXNtIiwiZHQiLCJhc3NlcnQiLCJhdHRhY2htZW50U2l0ZSIsImJpb21vbGVjdWxlIiwidW5hdHRhY2hlZEFuZEF2YWlsYWJsZVN0YXRlIiwicG9pbnRDb250YWluZWRJbkJvdW5kc0xpc3QiLCJnZXRQb3NpdGlvbiIsInNldE1vdGlvblN0cmF0ZWd5IiwibW90aW9uQm91bmRzUHJvcGVydHkiLCJzZXRTdGF0ZSIsImVudGVyZWQiLCJtb3ZhYmxlQnlVc2VyUHJvcGVydHkiLCJzZXQiLCJuZXh0Qm9vbGVhbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmVpbmdSZWN5Y2xlZFN0YXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE9uZSBvZiB0aGUgc3RhdGVzIGZvciBSbmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZS4gUm5hUG9seW1lcmFzZSBlbnRlcnMgdGhpcyBzdGFnZSB3aGVuIGl0IGRldGFjaGVkIGZyb20gRE5BXHJcbiAqIGFuZCByZWN5Y2xlIG1vZGUgaXMgc2V0IHRvIHRydWUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWZcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RSYW5kb20gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL2RvdFJhbmRvbS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgRHJpZnRUaGVuVGVsZXBvcnRNb3Rpb25TdHJhdGVneSBmcm9tICcuLi9tb3Rpb24tc3RyYXRlZ2llcy9EcmlmdFRoZW5UZWxlcG9ydE1vdGlvblN0cmF0ZWd5LmpzJztcclxuaW1wb3J0IFJhbmRvbVdhbGtNb3Rpb25TdHJhdGVneSBmcm9tICcuLi9tb3Rpb24tc3RyYXRlZ2llcy9SYW5kb21XYWxrTW90aW9uU3RyYXRlZ3kuanMnO1xyXG5pbXBvcnQgQXR0YWNobWVudFN0YXRlIGZyb20gJy4vQXR0YWNobWVudFN0YXRlLmpzJztcclxuXHJcbmNsYXNzIEJlaW5nUmVjeWNsZWRTdGF0ZSBleHRlbmRzIEF0dGFjaG1lbnRTdGF0ZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Um5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmV9IHJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lXHJcbiAgICogQHBhcmFtIHtBcnJheS48Qm91bmRzMj59IHJlY3ljbGVSZXR1cm5ab25lc1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBybmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZSwgcmVjeWNsZVJldHVyblpvbmVzICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ueSkge1JuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lfVxyXG4gICAgdGhpcy5ybmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZSA9IHJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lO1xyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIHRoaXMucmVjeWNsZVJldHVyblpvbmVzID0gcmVjeWNsZVJldHVyblpvbmVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtBdHRhY2htZW50U3RhdGVNYWNoaW5lfSBhc21cclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHRcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCggYXNtLCBkdCApIHtcclxuXHJcbiAgICAvLyBWZXJpZnkgdGhhdCBzdGF0ZSBpcyBjb25zaXN0ZW50LlxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYXNtLmF0dGFjaG1lbnRTaXRlID09PSBudWxsICk7XHJcblxyXG4gICAgY29uc3QgYmlvbW9sZWN1bGUgPSB0aGlzLnJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lLmJpb21vbGVjdWxlO1xyXG4gICAgY29uc3QgdW5hdHRhY2hlZEFuZEF2YWlsYWJsZVN0YXRlID0gdGhpcy5ybmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZS51bmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGU7XHJcblxyXG4gICAgaWYgKCB0aGlzLnJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lLnBvaW50Q29udGFpbmVkSW5Cb3VuZHNMaXN0KFxyXG4gICAgICBhc20uYmlvbW9sZWN1bGUuZ2V0UG9zaXRpb24oKSwgdGhpcy5yZWN5Y2xlUmV0dXJuWm9uZXNcclxuICAgICkgKSB7XHJcblxyXG4gICAgICAvLyBUaGUgbW90aW9uIHN0cmF0ZWd5IGhhcyByZXR1cm5lZCB0aGUgYmlvbW9sZWN1bGUgdG8gdGhlIHJlY3ljbGUgcmV0dXJuIHpvbmUsIHNvIHRoaXMgc3RhdGUgaXMgY29tcGxldGUuXHJcbiAgICAgIGFzbS5iaW9tb2xlY3VsZS5zZXRNb3Rpb25TdHJhdGVneSggbmV3IFJhbmRvbVdhbGtNb3Rpb25TdHJhdGVneSggYmlvbW9sZWN1bGUubW90aW9uQm91bmRzUHJvcGVydHkgKSApO1xyXG4gICAgICBhc20uc2V0U3RhdGUoIHVuYXR0YWNoZWRBbmRBdmFpbGFibGVTdGF0ZSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtBdHRhY2htZW50U3RhdGVNYWNoaW5lfSBhc21cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZW50ZXJlZCggYXNtICkge1xyXG4gICAgY29uc3QgYmlvbW9sZWN1bGUgPSB0aGlzLnJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lLmJpb21vbGVjdWxlO1xyXG5cclxuICAgIC8vIFByZXZlbnQgdXNlciBpbnRlcmFjdGlvbi5cclxuICAgIGFzbS5iaW9tb2xlY3VsZS5tb3ZhYmxlQnlVc2VyUHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG5cclxuICAgIC8vIFNldCB0aGUgbW90aW9uIHN0cmF0ZWd5IHRoYXQgd2lsbCBtb3ZlIHRoZSBwb2x5bWVyYXNlIGNsZWFyIG9mIHRoZSBETkEsIHRoZW4gdGVsZXBvcnQgaXQgdG8gYSBwb3NpdGlvbiB3aXRoaW5cclxuICAgIC8vIHRoZSBzcGVjaWZpZWQgYm91bmRzLlxyXG4gICAgYXNtLmJpb21vbGVjdWxlLnNldE1vdGlvblN0cmF0ZWd5KCBuZXcgRHJpZnRUaGVuVGVsZXBvcnRNb3Rpb25TdHJhdGVneSggbmV3IFZlY3RvcjIoIDAsXHJcbiAgICAgIGRvdFJhbmRvbS5uZXh0Qm9vbGVhbigpID8gMSA6IC0xICksXHJcbiAgICAgIHRoaXMucmVjeWNsZVJldHVyblpvbmVzLCBiaW9tb2xlY3VsZS5tb3Rpb25Cb3VuZHNQcm9wZXJ0eSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdCZWluZ1JlY3ljbGVkU3RhdGUnLCBCZWluZ1JlY3ljbGVkU3RhdGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJlaW5nUmVjeWNsZWRTdGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxPQUFPLE1BQU0sa0NBQWtDO0FBQ3RELE9BQU9DLHdCQUF3QixNQUFNLHNDQUFzQztBQUMzRSxPQUFPQywrQkFBK0IsTUFBTSx5REFBeUQ7QUFDckcsT0FBT0Msd0JBQXdCLE1BQU0sa0RBQWtEO0FBQ3ZGLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFbEQsTUFBTUMsa0JBQWtCLFNBQVNELGVBQWUsQ0FBQztFQUUvQztBQUNGO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxtQ0FBbUMsRUFBRUMsa0JBQWtCLEVBQUc7SUFDckUsS0FBSyxDQUFDLENBQUM7O0lBRVA7SUFDQSxJQUFJLENBQUNELG1DQUFtQyxHQUFHQSxtQ0FBbUM7O0lBRTlFO0lBQ0EsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR0Esa0JBQWtCO0VBQzlDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxJQUFJQSxDQUFFQyxHQUFHLEVBQUVDLEVBQUUsRUFBRztJQUVkO0lBQ0FDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixHQUFHLENBQUNHLGNBQWMsS0FBSyxJQUFLLENBQUM7SUFFL0MsTUFBTUMsV0FBVyxHQUFHLElBQUksQ0FBQ1AsbUNBQW1DLENBQUNPLFdBQVc7SUFDeEUsTUFBTUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDUixtQ0FBbUMsQ0FBQ1EsMkJBQTJCO0lBRXhHLElBQUssSUFBSSxDQUFDUixtQ0FBbUMsQ0FBQ1MsMEJBQTBCLENBQ3RFTixHQUFHLENBQUNJLFdBQVcsQ0FBQ0csV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNULGtCQUN0QyxDQUFDLEVBQUc7TUFFRjtNQUNBRSxHQUFHLENBQUNJLFdBQVcsQ0FBQ0ksaUJBQWlCLENBQUUsSUFBSWYsd0JBQXdCLENBQUVXLFdBQVcsQ0FBQ0ssb0JBQXFCLENBQUUsQ0FBQztNQUNyR1QsR0FBRyxDQUFDVSxRQUFRLENBQUVMLDJCQUE0QixDQUFDO0lBQzdDO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxPQUFPQSxDQUFFWCxHQUFHLEVBQUc7SUFDYixNQUFNSSxXQUFXLEdBQUcsSUFBSSxDQUFDUCxtQ0FBbUMsQ0FBQ08sV0FBVzs7SUFFeEU7SUFDQUosR0FBRyxDQUFDSSxXQUFXLENBQUNRLHFCQUFxQixDQUFDQyxHQUFHLENBQUUsS0FBTSxDQUFDOztJQUVsRDtJQUNBO0lBQ0FiLEdBQUcsQ0FBQ0ksV0FBVyxDQUFDSSxpQkFBaUIsQ0FBRSxJQUFJaEIsK0JBQStCLENBQUUsSUFBSUYsT0FBTyxDQUFFLENBQUMsRUFDcEZELFNBQVMsQ0FBQ3lCLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEVBQ2xDLElBQUksQ0FBQ2hCLGtCQUFrQixFQUFFTSxXQUFXLENBQUNLLG9CQUFxQixDQUFFLENBQUM7RUFDakU7QUFDRjtBQUVBbEIsd0JBQXdCLENBQUN3QixRQUFRLENBQUUsb0JBQW9CLEVBQUVwQixrQkFBbUIsQ0FBQztBQUU3RSxlQUFlQSxrQkFBa0IifQ==