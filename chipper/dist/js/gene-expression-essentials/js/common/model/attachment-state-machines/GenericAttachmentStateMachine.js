// Copyright 2015-2020, University of Colorado Boulder

/**
 * Generic attachment state machine - implements basic behavior of a biomolecule.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import WanderInGeneralDirectionMotionStrategy from '../motion-strategies/WanderInGeneralDirectionMotionStrategy.js';
import AttachmentStateMachine from './AttachmentStateMachine.js';
import GenericAttachedState from './GenericAttachedState.js';
import GenericMovingTowardsAttachmentState from './GenericMovingTowardsAttachmentState.js';
import GenericUnattachedAndAvailableState from './GenericUnattachedAndAvailableState.js';
import GenericUnattachedButUnavailableState from './GenericUnattachedButUnavailableState.js';
class GenericAttachmentStateMachine extends AttachmentStateMachine {
  /**
   * @param {MobileBiomolecule} biomolecule
   */
  constructor(biomolecule) {
    super(biomolecule);

    // @public - States used by this state machine. These are often set by subclasses to non-default values in order to
    // change the default behavior.
    this.unattachedAndAvailableState = new GenericUnattachedAndAvailableState();
    this.attachedState = new GenericAttachedState();
    this.movingTowardsAttachmentState = new GenericMovingTowardsAttachmentState(this);
    this.unattachedButUnavailableState = new GenericUnattachedButUnavailableState();
    this.setState(this.unattachedAndAvailableState);
  }

  /**
   * @override
   * @public
   */
  detach() {
    assert && assert(this.attachmentSite !== null); // Verify internal state is consistent
    this.attachmentSite.attachedOrAttachingMoleculeProperty.set(null);
    this.attachmentSite = null;
    this.forceImmediateUnattachedButUnavailable();
  }

  /**
   * @override
   * @public
   */
  forceImmediateUnattachedAndAvailable() {
    if (this.attachmentSite !== null) {
      this.attachmentSite.attachedOrAttachingMoleculeProperty.set(null);
    }
    this.attachmentSite = null;
    this.setState(this.unattachedAndAvailableState);
  }

  /**
   * @override
   * @public
   */
  forceImmediateUnattachedButUnavailable() {
    if (this.attachmentSite !== null) {
      this.attachmentSite.attachedOrAttachingMoleculeProperty.set(null);
    }
    this.attachmentSite = null;
    this.biomolecule.setMotionStrategy(new WanderInGeneralDirectionMotionStrategy(this.biomolecule.getDetachDirection(), this.biomolecule.motionBoundsProperty));
    this.setState(this.unattachedButUnavailableState);
  }
}
geneExpressionEssentials.register('GenericAttachmentStateMachine', GenericAttachmentStateMachine);
export default GenericAttachmentStateMachine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJXYW5kZXJJbkdlbmVyYWxEaXJlY3Rpb25Nb3Rpb25TdHJhdGVneSIsIkF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUiLCJHZW5lcmljQXR0YWNoZWRTdGF0ZSIsIkdlbmVyaWNNb3ZpbmdUb3dhcmRzQXR0YWNobWVudFN0YXRlIiwiR2VuZXJpY1VuYXR0YWNoZWRBbmRBdmFpbGFibGVTdGF0ZSIsIkdlbmVyaWNVbmF0dGFjaGVkQnV0VW5hdmFpbGFibGVTdGF0ZSIsIkdlbmVyaWNBdHRhY2htZW50U3RhdGVNYWNoaW5lIiwiY29uc3RydWN0b3IiLCJiaW9tb2xlY3VsZSIsInVuYXR0YWNoZWRBbmRBdmFpbGFibGVTdGF0ZSIsImF0dGFjaGVkU3RhdGUiLCJtb3ZpbmdUb3dhcmRzQXR0YWNobWVudFN0YXRlIiwidW5hdHRhY2hlZEJ1dFVuYXZhaWxhYmxlU3RhdGUiLCJzZXRTdGF0ZSIsImRldGFjaCIsImFzc2VydCIsImF0dGFjaG1lbnRTaXRlIiwiYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlUHJvcGVydHkiLCJzZXQiLCJmb3JjZUltbWVkaWF0ZVVuYXR0YWNoZWRCdXRVbmF2YWlsYWJsZSIsImZvcmNlSW1tZWRpYXRlVW5hdHRhY2hlZEFuZEF2YWlsYWJsZSIsInNldE1vdGlvblN0cmF0ZWd5IiwiZ2V0RGV0YWNoRGlyZWN0aW9uIiwibW90aW9uQm91bmRzUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdlbmVyaWNBdHRhY2htZW50U3RhdGVNYWNoaW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdlbmVyaWMgYXR0YWNobWVudCBzdGF0ZSBtYWNoaW5lIC0gaW1wbGVtZW50cyBiYXNpYyBiZWhhdmlvciBvZiBhIGJpb21vbGVjdWxlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgV2FuZGVySW5HZW5lcmFsRGlyZWN0aW9uTW90aW9uU3RyYXRlZ3kgZnJvbSAnLi4vbW90aW9uLXN0cmF0ZWdpZXMvV2FuZGVySW5HZW5lcmFsRGlyZWN0aW9uTW90aW9uU3RyYXRlZ3kuanMnO1xyXG5pbXBvcnQgQXR0YWNobWVudFN0YXRlTWFjaGluZSBmcm9tICcuL0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmUuanMnO1xyXG5pbXBvcnQgR2VuZXJpY0F0dGFjaGVkU3RhdGUgZnJvbSAnLi9HZW5lcmljQXR0YWNoZWRTdGF0ZS5qcyc7XHJcbmltcG9ydCBHZW5lcmljTW92aW5nVG93YXJkc0F0dGFjaG1lbnRTdGF0ZSBmcm9tICcuL0dlbmVyaWNNb3ZpbmdUb3dhcmRzQXR0YWNobWVudFN0YXRlLmpzJztcclxuaW1wb3J0IEdlbmVyaWNVbmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGUgZnJvbSAnLi9HZW5lcmljVW5hdHRhY2hlZEFuZEF2YWlsYWJsZVN0YXRlLmpzJztcclxuaW1wb3J0IEdlbmVyaWNVbmF0dGFjaGVkQnV0VW5hdmFpbGFibGVTdGF0ZSBmcm9tICcuL0dlbmVyaWNVbmF0dGFjaGVkQnV0VW5hdmFpbGFibGVTdGF0ZS5qcyc7XHJcblxyXG5jbGFzcyBHZW5lcmljQXR0YWNobWVudFN0YXRlTWFjaGluZSBleHRlbmRzIEF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge01vYmlsZUJpb21vbGVjdWxlfSBiaW9tb2xlY3VsZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBiaW9tb2xlY3VsZSApIHtcclxuICAgIHN1cGVyKCBiaW9tb2xlY3VsZSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgLSBTdGF0ZXMgdXNlZCBieSB0aGlzIHN0YXRlIG1hY2hpbmUuIFRoZXNlIGFyZSBvZnRlbiBzZXQgYnkgc3ViY2xhc3NlcyB0byBub24tZGVmYXVsdCB2YWx1ZXMgaW4gb3JkZXIgdG9cclxuICAgIC8vIGNoYW5nZSB0aGUgZGVmYXVsdCBiZWhhdmlvci5cclxuICAgIHRoaXMudW5hdHRhY2hlZEFuZEF2YWlsYWJsZVN0YXRlID0gbmV3IEdlbmVyaWNVbmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGUoKTtcclxuICAgIHRoaXMuYXR0YWNoZWRTdGF0ZSA9IG5ldyBHZW5lcmljQXR0YWNoZWRTdGF0ZSgpO1xyXG4gICAgdGhpcy5tb3ZpbmdUb3dhcmRzQXR0YWNobWVudFN0YXRlID0gbmV3IEdlbmVyaWNNb3ZpbmdUb3dhcmRzQXR0YWNobWVudFN0YXRlKCB0aGlzICk7XHJcbiAgICB0aGlzLnVuYXR0YWNoZWRCdXRVbmF2YWlsYWJsZVN0YXRlID0gbmV3IEdlbmVyaWNVbmF0dGFjaGVkQnV0VW5hdmFpbGFibGVTdGF0ZSgpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSggdGhpcy51bmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBkZXRhY2goKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLmF0dGFjaG1lbnRTaXRlICE9PSBudWxsICk7IC8vIFZlcmlmeSBpbnRlcm5hbCBzdGF0ZSBpcyBjb25zaXN0ZW50XHJcbiAgICB0aGlzLmF0dGFjaG1lbnRTaXRlLmF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5LnNldCggbnVsbCApO1xyXG4gICAgdGhpcy5hdHRhY2htZW50U2l0ZSA9IG51bGw7XHJcbiAgICB0aGlzLmZvcmNlSW1tZWRpYXRlVW5hdHRhY2hlZEJ1dFVuYXZhaWxhYmxlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZm9yY2VJbW1lZGlhdGVVbmF0dGFjaGVkQW5kQXZhaWxhYmxlKCkge1xyXG4gICAgaWYgKCB0aGlzLmF0dGFjaG1lbnRTaXRlICE9PSBudWxsICkge1xyXG4gICAgICB0aGlzLmF0dGFjaG1lbnRTaXRlLmF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5LnNldCggbnVsbCApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hdHRhY2htZW50U2l0ZSA9IG51bGw7XHJcbiAgICB0aGlzLnNldFN0YXRlKCB0aGlzLnVuYXR0YWNoZWRBbmRBdmFpbGFibGVTdGF0ZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGZvcmNlSW1tZWRpYXRlVW5hdHRhY2hlZEJ1dFVuYXZhaWxhYmxlKCkge1xyXG4gICAgaWYgKCB0aGlzLmF0dGFjaG1lbnRTaXRlICE9PSBudWxsICkge1xyXG4gICAgICB0aGlzLmF0dGFjaG1lbnRTaXRlLmF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5LnNldCggbnVsbCApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hdHRhY2htZW50U2l0ZSA9IG51bGw7XHJcbiAgICB0aGlzLmJpb21vbGVjdWxlLnNldE1vdGlvblN0cmF0ZWd5KCBuZXcgV2FuZGVySW5HZW5lcmFsRGlyZWN0aW9uTW90aW9uU3RyYXRlZ3koIHRoaXMuYmlvbW9sZWN1bGUuZ2V0RGV0YWNoRGlyZWN0aW9uKCksXHJcbiAgICAgIHRoaXMuYmlvbW9sZWN1bGUubW90aW9uQm91bmRzUHJvcGVydHkgKSApO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSggdGhpcy51bmF0dGFjaGVkQnV0VW5hdmFpbGFibGVTdGF0ZSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnR2VuZXJpY0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmUnLCBHZW5lcmljQXR0YWNobWVudFN0YXRlTWFjaGluZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2VuZXJpY0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx3QkFBd0IsTUFBTSxzQ0FBc0M7QUFDM0UsT0FBT0Msc0NBQXNDLE1BQU0sZ0VBQWdFO0FBQ25ILE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUNoRSxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFDNUQsT0FBT0MsbUNBQW1DLE1BQU0sMENBQTBDO0FBQzFGLE9BQU9DLGtDQUFrQyxNQUFNLHlDQUF5QztBQUN4RixPQUFPQyxvQ0FBb0MsTUFBTSwyQ0FBMkM7QUFFNUYsTUFBTUMsNkJBQTZCLFNBQVNMLHNCQUFzQixDQUFDO0VBRWpFO0FBQ0Y7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxXQUFXLEVBQUc7SUFDekIsS0FBSyxDQUFFQSxXQUFZLENBQUM7O0lBRXBCO0lBQ0E7SUFDQSxJQUFJLENBQUNDLDJCQUEyQixHQUFHLElBQUlMLGtDQUFrQyxDQUFDLENBQUM7SUFDM0UsSUFBSSxDQUFDTSxhQUFhLEdBQUcsSUFBSVIsb0JBQW9CLENBQUMsQ0FBQztJQUMvQyxJQUFJLENBQUNTLDRCQUE0QixHQUFHLElBQUlSLG1DQUFtQyxDQUFFLElBQUssQ0FBQztJQUNuRixJQUFJLENBQUNTLDZCQUE2QixHQUFHLElBQUlQLG9DQUFvQyxDQUFDLENBQUM7SUFDL0UsSUFBSSxDQUFDUSxRQUFRLENBQUUsSUFBSSxDQUFDSiwyQkFBNEIsQ0FBQztFQUNuRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFSyxNQUFNQSxDQUFBLEVBQUc7SUFDUEMsTUFBTSxJQUFJQSxNQUFNLENBQUUsSUFBSSxDQUFDQyxjQUFjLEtBQUssSUFBSyxDQUFDLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUNBLGNBQWMsQ0FBQ0MsbUNBQW1DLENBQUNDLEdBQUcsQ0FBRSxJQUFLLENBQUM7SUFDbkUsSUFBSSxDQUFDRixjQUFjLEdBQUcsSUFBSTtJQUMxQixJQUFJLENBQUNHLHNDQUFzQyxDQUFDLENBQUM7RUFDL0M7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsb0NBQW9DQSxDQUFBLEVBQUc7SUFDckMsSUFBSyxJQUFJLENBQUNKLGNBQWMsS0FBSyxJQUFJLEVBQUc7TUFDbEMsSUFBSSxDQUFDQSxjQUFjLENBQUNDLG1DQUFtQyxDQUFDQyxHQUFHLENBQUUsSUFBSyxDQUFDO0lBQ3JFO0lBQ0EsSUFBSSxDQUFDRixjQUFjLEdBQUcsSUFBSTtJQUMxQixJQUFJLENBQUNILFFBQVEsQ0FBRSxJQUFJLENBQUNKLDJCQUE0QixDQUFDO0VBQ25EOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VVLHNDQUFzQ0EsQ0FBQSxFQUFHO0lBQ3ZDLElBQUssSUFBSSxDQUFDSCxjQUFjLEtBQUssSUFBSSxFQUFHO01BQ2xDLElBQUksQ0FBQ0EsY0FBYyxDQUFDQyxtQ0FBbUMsQ0FBQ0MsR0FBRyxDQUFFLElBQUssQ0FBQztJQUNyRTtJQUNBLElBQUksQ0FBQ0YsY0FBYyxHQUFHLElBQUk7SUFDMUIsSUFBSSxDQUFDUixXQUFXLENBQUNhLGlCQUFpQixDQUFFLElBQUlyQixzQ0FBc0MsQ0FBRSxJQUFJLENBQUNRLFdBQVcsQ0FBQ2Msa0JBQWtCLENBQUMsQ0FBQyxFQUNuSCxJQUFJLENBQUNkLFdBQVcsQ0FBQ2Usb0JBQXFCLENBQUUsQ0FBQztJQUMzQyxJQUFJLENBQUNWLFFBQVEsQ0FBRSxJQUFJLENBQUNELDZCQUE4QixDQUFDO0VBQ3JEO0FBQ0Y7QUFFQWIsd0JBQXdCLENBQUN5QixRQUFRLENBQUUsK0JBQStCLEVBQUVsQiw2QkFBOEIsQ0FBQztBQUVuRyxlQUFlQSw2QkFBNkIifQ==