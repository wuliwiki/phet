// Copyright 2015-2020, University of Colorado Boulder

/**
 * This class defined the attachment state machine for all ribosomes. Ribosomes pretty much only connect to mRNA, so
 * that's what this controls.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

// modules
import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import Ribosome from '../Ribosome.js';
import GenericAttachmentStateMachine from './GenericAttachmentStateMachine.js';
import RibosomeAttachedState from './RibosomeAttachedState.js';
import UnattachedAndAvailableForMRnaAttachmentState from './UnattachedAndAvailableForMRnaAttachmentState.js';
class RibosomeAttachmentStateMachine extends GenericAttachmentStateMachine {
  /**
   * @param {MobileBiomolecule} biomolecule
   */
  constructor(biomolecule) {
    super(biomolecule);

    // Set up a local reference of the needed type.

    this.ribosome = biomolecule; //@public

    // Protein created during translation process, null if no protein is being synthesized.
    this.proteinBeingSynthesized = null; //@public

    // Set up offset used when attaching to mRNA.
    this.setDestinationOffset(Ribosome.OFFSET_TO_TRANSLATION_CHANNEL_ENTRANCE);

    // @override - override the unattached state, since attaching to mRNA is a little different versus the default behavior
    this.unattachedAndAvailableState = new UnattachedAndAvailableForMRnaAttachmentState(this);

    // @override - Set up a non-default "attached" state, since the behavior is different from the default.
    this.attachedState = new RibosomeAttachedState(this); //@public
  }

  /**
   * @override
   * @public
   */
  forceImmediateUnattachedAndAvailable() {
    if (this.ribosome.getMessengerRnaBeingTranslated() !== null) {
      this.ribosome.releaseMessengerRna();
    }
    super.forceImmediateUnattachedAndAvailable();
  }

  /**
   * detach is a little different for a ribosome, since it will likely have moved away from its original attachment
   * point on the mRNA
   * @override
   * @public
   */
  detach() {
    if (this.attachmentSite) {
      this.attachmentSite.attachedOrAttachingMoleculeProperty.set(null);
      this.attachmentSite = null;
    }
    this.forceImmediateUnattachedButUnavailable();
  }

  /**
   * returns true if the state indicates that the ribosome is currently translating mRNA, false otherwise
   * @returns {boolean}
   * @public
   */
  isTranslating() {
    return this.attachmentState === this.attachedState;
  }
}
geneExpressionEssentials.register('RibosomeAttachmentStateMachine', RibosomeAttachmentStateMachine);
export default RibosomeAttachmentStateMachine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJSaWJvc29tZSIsIkdlbmVyaWNBdHRhY2htZW50U3RhdGVNYWNoaW5lIiwiUmlib3NvbWVBdHRhY2hlZFN0YXRlIiwiVW5hdHRhY2hlZEFuZEF2YWlsYWJsZUZvck1SbmFBdHRhY2htZW50U3RhdGUiLCJSaWJvc29tZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUiLCJjb25zdHJ1Y3RvciIsImJpb21vbGVjdWxlIiwicmlib3NvbWUiLCJwcm90ZWluQmVpbmdTeW50aGVzaXplZCIsInNldERlc3RpbmF0aW9uT2Zmc2V0IiwiT0ZGU0VUX1RPX1RSQU5TTEFUSU9OX0NIQU5ORUxfRU5UUkFOQ0UiLCJ1bmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGUiLCJhdHRhY2hlZFN0YXRlIiwiZm9yY2VJbW1lZGlhdGVVbmF0dGFjaGVkQW5kQXZhaWxhYmxlIiwiZ2V0TWVzc2VuZ2VyUm5hQmVpbmdUcmFuc2xhdGVkIiwicmVsZWFzZU1lc3NlbmdlclJuYSIsImRldGFjaCIsImF0dGFjaG1lbnRTaXRlIiwiYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlUHJvcGVydHkiLCJzZXQiLCJmb3JjZUltbWVkaWF0ZVVuYXR0YWNoZWRCdXRVbmF2YWlsYWJsZSIsImlzVHJhbnNsYXRpbmciLCJhdHRhY2htZW50U3RhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJpYm9zb21lQXR0YWNobWVudFN0YXRlTWFjaGluZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGRlZmluZWQgdGhlIGF0dGFjaG1lbnQgc3RhdGUgbWFjaGluZSBmb3IgYWxsIHJpYm9zb21lcy4gUmlib3NvbWVzIHByZXR0eSBtdWNoIG9ubHkgY29ubmVjdCB0byBtUk5BLCBzb1xyXG4gKiB0aGF0J3Mgd2hhdCB0aGlzIGNvbnRyb2xzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuXHJcbi8vIG1vZHVsZXNcclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgUmlib3NvbWUgZnJvbSAnLi4vUmlib3NvbWUuanMnO1xyXG5pbXBvcnQgR2VuZXJpY0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgZnJvbSAnLi9HZW5lcmljQXR0YWNobWVudFN0YXRlTWFjaGluZS5qcyc7XHJcbmltcG9ydCBSaWJvc29tZUF0dGFjaGVkU3RhdGUgZnJvbSAnLi9SaWJvc29tZUF0dGFjaGVkU3RhdGUuanMnO1xyXG5pbXBvcnQgVW5hdHRhY2hlZEFuZEF2YWlsYWJsZUZvck1SbmFBdHRhY2htZW50U3RhdGUgZnJvbSAnLi9VbmF0dGFjaGVkQW5kQXZhaWxhYmxlRm9yTVJuYUF0dGFjaG1lbnRTdGF0ZS5qcyc7XHJcblxyXG5jbGFzcyBSaWJvc29tZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgZXh0ZW5kcyBHZW5lcmljQXR0YWNobWVudFN0YXRlTWFjaGluZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TW9iaWxlQmlvbW9sZWN1bGV9IGJpb21vbGVjdWxlXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGJpb21vbGVjdWxlICkge1xyXG4gICAgc3VwZXIoIGJpb21vbGVjdWxlICk7XHJcblxyXG4gICAgLy8gU2V0IHVwIGEgbG9jYWwgcmVmZXJlbmNlIG9mIHRoZSBuZWVkZWQgdHlwZS5cclxuXHJcbiAgICB0aGlzLnJpYm9zb21lID0gYmlvbW9sZWN1bGU7IC8vQHB1YmxpY1xyXG5cclxuICAgIC8vIFByb3RlaW4gY3JlYXRlZCBkdXJpbmcgdHJhbnNsYXRpb24gcHJvY2VzcywgbnVsbCBpZiBubyBwcm90ZWluIGlzIGJlaW5nIHN5bnRoZXNpemVkLlxyXG4gICAgdGhpcy5wcm90ZWluQmVpbmdTeW50aGVzaXplZCA9IG51bGw7IC8vQHB1YmxpY1xyXG5cclxuICAgIC8vIFNldCB1cCBvZmZzZXQgdXNlZCB3aGVuIGF0dGFjaGluZyB0byBtUk5BLlxyXG4gICAgdGhpcy5zZXREZXN0aW5hdGlvbk9mZnNldCggUmlib3NvbWUuT0ZGU0VUX1RPX1RSQU5TTEFUSU9OX0NIQU5ORUxfRU5UUkFOQ0UgKTtcclxuXHJcbiAgICAvLyBAb3ZlcnJpZGUgLSBvdmVycmlkZSB0aGUgdW5hdHRhY2hlZCBzdGF0ZSwgc2luY2UgYXR0YWNoaW5nIHRvIG1STkEgaXMgYSBsaXR0bGUgZGlmZmVyZW50IHZlcnN1cyB0aGUgZGVmYXVsdCBiZWhhdmlvclxyXG4gICAgdGhpcy51bmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGUgPSBuZXcgVW5hdHRhY2hlZEFuZEF2YWlsYWJsZUZvck1SbmFBdHRhY2htZW50U3RhdGUoIHRoaXMgKTtcclxuXHJcbiAgICAvLyBAb3ZlcnJpZGUgLSBTZXQgdXAgYSBub24tZGVmYXVsdCBcImF0dGFjaGVkXCIgc3RhdGUsIHNpbmNlIHRoZSBiZWhhdmlvciBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgZGVmYXVsdC5cclxuICAgIHRoaXMuYXR0YWNoZWRTdGF0ZSA9IG5ldyBSaWJvc29tZUF0dGFjaGVkU3RhdGUoIHRoaXMgKTsgLy9AcHVibGljXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZm9yY2VJbW1lZGlhdGVVbmF0dGFjaGVkQW5kQXZhaWxhYmxlKCkge1xyXG4gICAgaWYgKCB0aGlzLnJpYm9zb21lLmdldE1lc3NlbmdlclJuYUJlaW5nVHJhbnNsYXRlZCgpICE9PSBudWxsICkge1xyXG4gICAgICB0aGlzLnJpYm9zb21lLnJlbGVhc2VNZXNzZW5nZXJSbmEoKTtcclxuICAgIH1cclxuICAgIHN1cGVyLmZvcmNlSW1tZWRpYXRlVW5hdHRhY2hlZEFuZEF2YWlsYWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZGV0YWNoIGlzIGEgbGl0dGxlIGRpZmZlcmVudCBmb3IgYSByaWJvc29tZSwgc2luY2UgaXQgd2lsbCBsaWtlbHkgaGF2ZSBtb3ZlZCBhd2F5IGZyb20gaXRzIG9yaWdpbmFsIGF0dGFjaG1lbnRcclxuICAgKiBwb2ludCBvbiB0aGUgbVJOQVxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBkZXRhY2goKSB7XHJcbiAgICBpZiAoIHRoaXMuYXR0YWNobWVudFNpdGUgKSB7XHJcbiAgICAgIHRoaXMuYXR0YWNobWVudFNpdGUuYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlUHJvcGVydHkuc2V0KCBudWxsICk7XHJcbiAgICAgIHRoaXMuYXR0YWNobWVudFNpdGUgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgdGhpcy5mb3JjZUltbWVkaWF0ZVVuYXR0YWNoZWRCdXRVbmF2YWlsYWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmV0dXJucyB0cnVlIGlmIHRoZSBzdGF0ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgcmlib3NvbWUgaXMgY3VycmVudGx5IHRyYW5zbGF0aW5nIG1STkEsIGZhbHNlIG90aGVyd2lzZVxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBpc1RyYW5zbGF0aW5nKCkge1xyXG4gICAgcmV0dXJuICggdGhpcy5hdHRhY2htZW50U3RhdGUgPT09IHRoaXMuYXR0YWNoZWRTdGF0ZSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnUmlib3NvbWVBdHRhY2htZW50U3RhdGVNYWNoaW5lJywgUmlib3NvbWVBdHRhY2htZW50U3RhdGVNYWNoaW5lICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSaWJvc29tZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0EsT0FBT0Esd0JBQXdCLE1BQU0sc0NBQXNDO0FBQzNFLE9BQU9DLFFBQVEsTUFBTSxnQkFBZ0I7QUFDckMsT0FBT0MsNkJBQTZCLE1BQU0sb0NBQW9DO0FBQzlFLE9BQU9DLHFCQUFxQixNQUFNLDRCQUE0QjtBQUM5RCxPQUFPQyw0Q0FBNEMsTUFBTSxtREFBbUQ7QUFFNUcsTUFBTUMsOEJBQThCLFNBQVNILDZCQUE2QixDQUFDO0VBRXpFO0FBQ0Y7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxXQUFXLEVBQUc7SUFDekIsS0FBSyxDQUFFQSxXQUFZLENBQUM7O0lBRXBCOztJQUVBLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxXQUFXLENBQUMsQ0FBQzs7SUFFN0I7SUFDQSxJQUFJLENBQUNFLHVCQUF1QixHQUFHLElBQUksQ0FBQyxDQUFDOztJQUVyQztJQUNBLElBQUksQ0FBQ0Msb0JBQW9CLENBQUVULFFBQVEsQ0FBQ1Usc0NBQXVDLENBQUM7O0lBRTVFO0lBQ0EsSUFBSSxDQUFDQywyQkFBMkIsR0FBRyxJQUFJUiw0Q0FBNEMsQ0FBRSxJQUFLLENBQUM7O0lBRTNGO0lBQ0EsSUFBSSxDQUFDUyxhQUFhLEdBQUcsSUFBSVYscUJBQXFCLENBQUUsSUFBSyxDQUFDLENBQUMsQ0FBQztFQUMxRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFVyxvQ0FBb0NBLENBQUEsRUFBRztJQUNyQyxJQUFLLElBQUksQ0FBQ04sUUFBUSxDQUFDTyw4QkFBOEIsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFHO01BQzdELElBQUksQ0FBQ1AsUUFBUSxDQUFDUSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3JDO0lBQ0EsS0FBSyxDQUFDRixvQ0FBb0MsQ0FBQyxDQUFDO0VBQzlDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxNQUFNQSxDQUFBLEVBQUc7SUFDUCxJQUFLLElBQUksQ0FBQ0MsY0FBYyxFQUFHO01BQ3pCLElBQUksQ0FBQ0EsY0FBYyxDQUFDQyxtQ0FBbUMsQ0FBQ0MsR0FBRyxDQUFFLElBQUssQ0FBQztNQUNuRSxJQUFJLENBQUNGLGNBQWMsR0FBRyxJQUFJO0lBQzVCO0lBQ0EsSUFBSSxDQUFDRyxzQ0FBc0MsQ0FBQyxDQUFDO0VBQy9DOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsYUFBYUEsQ0FBQSxFQUFHO0lBQ2QsT0FBUyxJQUFJLENBQUNDLGVBQWUsS0FBSyxJQUFJLENBQUNWLGFBQWE7RUFDdEQ7QUFDRjtBQUVBYix3QkFBd0IsQ0FBQ3dCLFFBQVEsQ0FBRSxnQ0FBZ0MsRUFBRW5CLDhCQUErQixDQUFDO0FBRXJHLGVBQWVBLDhCQUE4QiJ9