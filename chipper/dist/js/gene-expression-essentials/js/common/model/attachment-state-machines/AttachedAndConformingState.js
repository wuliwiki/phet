// Copyright 2015-2020, University of Colorado Boulder

/**
 * One of the states for RnaPolymeraseAttachmentStateMachine. RnaPolymerase enters this state when it is attached to DNA
 * and ready to conform
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import GEEConstants from '../../GEEConstants.js';
import AttachmentState from './AttachmentState.js';
class AttachedAndConformingState extends AttachmentState {
  /**
   * @param {RnaPolymeraseAttachmentStateMachine} rnaPolymeraseAttachmentStateMachine
   */
  constructor(rnaPolymeraseAttachmentStateMachine) {
    super();

    // @public (read-ony) {RnaPolymeraseAttachmentStateMachine}
    this.rnaPolymeraseAttachmentStateMachine = rnaPolymeraseAttachmentStateMachine;

    // @private
    this.conformationalChangeAmount = 0;
  }

  /**
   * @override
   * @param {AttachmentStateMachine} asm
   * @param {number} dt - delta time
   * @public
   */
  step(asm, dt) {
    const biomolecule = this.rnaPolymeraseAttachmentStateMachine.biomolecule;
    const dnaStrandSeparation = this.rnaPolymeraseAttachmentStateMachine.dnaStrandSeparation;
    const attachedAndTranscribingState = this.rnaPolymeraseAttachmentStateMachine.attachedAndTranscribingState;

    // Verify that state is consistent.
    assert && assert(asm.attachmentSite !== null);
    assert && assert(asm.attachmentSite.attachedOrAttachingMoleculeProperty.get() === biomolecule);
    this.conformationalChangeAmount = Math.min(this.conformationalChangeAmount + GEEConstants.CONFORMATIONAL_CHANGE_RATE * dt, 1);
    biomolecule.changeConformation(this.conformationalChangeAmount);
    dnaStrandSeparation.setProportionOfTargetAmount(this.conformationalChangeAmount);
    if (this.conformationalChangeAmount === 1) {
      // Conformational change complete, time to start actual transcription.
      this.rnaPolymeraseAttachmentStateMachine.attachedState = attachedAndTranscribingState;
      this.rnaPolymeraseAttachmentStateMachine.setState(this.rnaPolymeraseAttachmentStateMachine.attachedState);
    }
  }

  /**
   * @override
   * @param {AttachmentStateMachine} asm
   * @public
   */
  entered(asm) {
    const rnaPolymerase = this.rnaPolymeraseAttachmentStateMachine.rnaPolymerase;
    const dnaStrandSeparation = this.rnaPolymeraseAttachmentStateMachine.dnaStrandSeparation;

    // Prevent user interaction.
    asm.biomolecule.movableByUserProperty.set(false);

    // Insert the DNA strand separator.
    dnaStrandSeparation.setXPosition(rnaPolymerase.getPosition().x);
    rnaPolymerase.getModel().getDnaMolecule().addSeparation(dnaStrandSeparation);
    this.conformationalChangeAmount = 0;
  }
}
geneExpressionEssentials.register('AttachedAndConformingState', AttachedAndConformingState);
export default AttachedAndConformingState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJHRUVDb25zdGFudHMiLCJBdHRhY2htZW50U3RhdGUiLCJBdHRhY2hlZEFuZENvbmZvcm1pbmdTdGF0ZSIsImNvbnN0cnVjdG9yIiwicm5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUiLCJjb25mb3JtYXRpb25hbENoYW5nZUFtb3VudCIsInN0ZXAiLCJhc20iLCJkdCIsImJpb21vbGVjdWxlIiwiZG5hU3RyYW5kU2VwYXJhdGlvbiIsImF0dGFjaGVkQW5kVHJhbnNjcmliaW5nU3RhdGUiLCJhc3NlcnQiLCJhdHRhY2htZW50U2l0ZSIsImF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5IiwiZ2V0IiwiTWF0aCIsIm1pbiIsIkNPTkZPUk1BVElPTkFMX0NIQU5HRV9SQVRFIiwiY2hhbmdlQ29uZm9ybWF0aW9uIiwic2V0UHJvcG9ydGlvbk9mVGFyZ2V0QW1vdW50IiwiYXR0YWNoZWRTdGF0ZSIsInNldFN0YXRlIiwiZW50ZXJlZCIsInJuYVBvbHltZXJhc2UiLCJtb3ZhYmxlQnlVc2VyUHJvcGVydHkiLCJzZXQiLCJzZXRYUG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsIngiLCJnZXRNb2RlbCIsImdldERuYU1vbGVjdWxlIiwiYWRkU2VwYXJhdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXR0YWNoZWRBbmRDb25mb3JtaW5nU3RhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT25lIG9mIHRoZSBzdGF0ZXMgZm9yIFJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lLiBSbmFQb2x5bWVyYXNlIGVudGVycyB0aGlzIHN0YXRlIHdoZW4gaXQgaXMgYXR0YWNoZWQgdG8gRE5BXHJcbiAqIGFuZCByZWFkeSB0byBjb25mb3JtXHJcbiAqXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWZcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcbmltcG9ydCBnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMgZnJvbSAnLi4vLi4vLi4vZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLmpzJztcclxuaW1wb3J0IEdFRUNvbnN0YW50cyBmcm9tICcuLi8uLi9HRUVDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQXR0YWNobWVudFN0YXRlIGZyb20gJy4vQXR0YWNobWVudFN0YXRlLmpzJztcclxuXHJcbmNsYXNzIEF0dGFjaGVkQW5kQ29uZm9ybWluZ1N0YXRlIGV4dGVuZHMgQXR0YWNobWVudFN0YXRlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtSbmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZX0gcm5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmVcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggcm5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb255KSB7Um5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmV9XHJcbiAgICB0aGlzLnJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lID0gcm5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmU7XHJcblxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuY29uZm9ybWF0aW9uYWxDaGFuZ2VBbW91bnQgPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtBdHRhY2htZW50U3RhdGVNYWNoaW5lfSBhc21cclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHQgLSBkZWx0YSB0aW1lXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0ZXAoIGFzbSwgZHQgKSB7XHJcblxyXG4gICAgY29uc3QgYmlvbW9sZWN1bGUgPSB0aGlzLnJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lLmJpb21vbGVjdWxlO1xyXG4gICAgY29uc3QgZG5hU3RyYW5kU2VwYXJhdGlvbiA9IHRoaXMucm5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUuZG5hU3RyYW5kU2VwYXJhdGlvbjtcclxuICAgIGNvbnN0IGF0dGFjaGVkQW5kVHJhbnNjcmliaW5nU3RhdGUgPSB0aGlzLnJuYVBvbHltZXJhc2VBdHRhY2htZW50U3RhdGVNYWNoaW5lLmF0dGFjaGVkQW5kVHJhbnNjcmliaW5nU3RhdGU7XHJcblxyXG4gICAgLy8gVmVyaWZ5IHRoYXQgc3RhdGUgaXMgY29uc2lzdGVudC5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGFzbS5hdHRhY2htZW50U2l0ZSAhPT0gbnVsbCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYXNtLmF0dGFjaG1lbnRTaXRlLmF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5LmdldCgpID09PSBiaW9tb2xlY3VsZSApO1xyXG5cclxuICAgIHRoaXMuY29uZm9ybWF0aW9uYWxDaGFuZ2VBbW91bnQgPSBNYXRoLm1pbiggdGhpcy5jb25mb3JtYXRpb25hbENoYW5nZUFtb3VudCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdFRUNvbnN0YW50cy5DT05GT1JNQVRJT05BTF9DSEFOR0VfUkFURSAqIGR0LCAxICk7XHJcbiAgICBiaW9tb2xlY3VsZS5jaGFuZ2VDb25mb3JtYXRpb24oIHRoaXMuY29uZm9ybWF0aW9uYWxDaGFuZ2VBbW91bnQgKTtcclxuICAgIGRuYVN0cmFuZFNlcGFyYXRpb24uc2V0UHJvcG9ydGlvbk9mVGFyZ2V0QW1vdW50KCB0aGlzLmNvbmZvcm1hdGlvbmFsQ2hhbmdlQW1vdW50ICk7XHJcbiAgICBpZiAoIHRoaXMuY29uZm9ybWF0aW9uYWxDaGFuZ2VBbW91bnQgPT09IDEgKSB7XHJcbiAgICAgIC8vIENvbmZvcm1hdGlvbmFsIGNoYW5nZSBjb21wbGV0ZSwgdGltZSB0byBzdGFydCBhY3R1YWwgdHJhbnNjcmlwdGlvbi5cclxuICAgICAgdGhpcy5ybmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZS5hdHRhY2hlZFN0YXRlID0gYXR0YWNoZWRBbmRUcmFuc2NyaWJpbmdTdGF0ZTtcclxuICAgICAgdGhpcy5ybmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZS5zZXRTdGF0ZSggdGhpcy5ybmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZS5hdHRhY2hlZFN0YXRlICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcGFyYW0ge0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmV9IGFzbVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBlbnRlcmVkKCBhc20gKSB7XHJcbiAgICBjb25zdCBybmFQb2x5bWVyYXNlID0gdGhpcy5ybmFQb2x5bWVyYXNlQXR0YWNobWVudFN0YXRlTWFjaGluZS5ybmFQb2x5bWVyYXNlO1xyXG4gICAgY29uc3QgZG5hU3RyYW5kU2VwYXJhdGlvbiA9IHRoaXMucm5hUG9seW1lcmFzZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUuZG5hU3RyYW5kU2VwYXJhdGlvbjtcclxuXHJcbiAgICAvLyBQcmV2ZW50IHVzZXIgaW50ZXJhY3Rpb24uXHJcbiAgICBhc20uYmlvbW9sZWN1bGUubW92YWJsZUJ5VXNlclByb3BlcnR5LnNldCggZmFsc2UgKTtcclxuXHJcbiAgICAvLyBJbnNlcnQgdGhlIEROQSBzdHJhbmQgc2VwYXJhdG9yLlxyXG4gICAgZG5hU3RyYW5kU2VwYXJhdGlvbi5zZXRYUG9zaXRpb24oIHJuYVBvbHltZXJhc2UuZ2V0UG9zaXRpb24oKS54ICk7XHJcbiAgICBybmFQb2x5bWVyYXNlLmdldE1vZGVsKCkuZ2V0RG5hTW9sZWN1bGUoKS5hZGRTZXBhcmF0aW9uKCBkbmFTdHJhbmRTZXBhcmF0aW9uICk7XHJcbiAgICB0aGlzLmNvbmZvcm1hdGlvbmFsQ2hhbmdlQW1vdW50ID0gMDtcclxuICB9XHJcbn1cclxuXHJcbmdlbmVFeHByZXNzaW9uRXNzZW50aWFscy5yZWdpc3RlciggJ0F0dGFjaGVkQW5kQ29uZm9ybWluZ1N0YXRlJywgQXR0YWNoZWRBbmRDb25mb3JtaW5nU3RhdGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEF0dGFjaGVkQW5kQ29uZm9ybWluZ1N0YXRlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx3QkFBd0IsTUFBTSxzQ0FBc0M7QUFDM0UsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBRWxELE1BQU1DLDBCQUEwQixTQUFTRCxlQUFlLENBQUM7RUFFdkQ7QUFDRjtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLG1DQUFtQyxFQUFHO0lBQ2pELEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDQSxtQ0FBbUMsR0FBR0EsbUNBQW1DOztJQUU5RTtJQUNBLElBQUksQ0FBQ0MsMEJBQTBCLEdBQUcsQ0FBQztFQUNyQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsSUFBSUEsQ0FBRUMsR0FBRyxFQUFFQyxFQUFFLEVBQUc7SUFFZCxNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFDTCxtQ0FBbUMsQ0FBQ0ssV0FBVztJQUN4RSxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJLENBQUNOLG1DQUFtQyxDQUFDTSxtQkFBbUI7SUFDeEYsTUFBTUMsNEJBQTRCLEdBQUcsSUFBSSxDQUFDUCxtQ0FBbUMsQ0FBQ08sNEJBQTRCOztJQUUxRztJQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUwsR0FBRyxDQUFDTSxjQUFjLEtBQUssSUFBSyxDQUFDO0lBQy9DRCxNQUFNLElBQUlBLE1BQU0sQ0FBRUwsR0FBRyxDQUFDTSxjQUFjLENBQUNDLG1DQUFtQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxLQUFLTixXQUFZLENBQUM7SUFFaEcsSUFBSSxDQUFDSiwwQkFBMEIsR0FBR1csSUFBSSxDQUFDQyxHQUFHLENBQUUsSUFBSSxDQUFDWiwwQkFBMEIsR0FDL0JMLFlBQVksQ0FBQ2tCLDBCQUEwQixHQUFHVixFQUFFLEVBQUUsQ0FBRSxDQUFDO0lBQzdGQyxXQUFXLENBQUNVLGtCQUFrQixDQUFFLElBQUksQ0FBQ2QsMEJBQTJCLENBQUM7SUFDakVLLG1CQUFtQixDQUFDVSwyQkFBMkIsQ0FBRSxJQUFJLENBQUNmLDBCQUEyQixDQUFDO0lBQ2xGLElBQUssSUFBSSxDQUFDQSwwQkFBMEIsS0FBSyxDQUFDLEVBQUc7TUFDM0M7TUFDQSxJQUFJLENBQUNELG1DQUFtQyxDQUFDaUIsYUFBYSxHQUFHViw0QkFBNEI7TUFDckYsSUFBSSxDQUFDUCxtQ0FBbUMsQ0FBQ2tCLFFBQVEsQ0FBRSxJQUFJLENBQUNsQixtQ0FBbUMsQ0FBQ2lCLGFBQWMsQ0FBQztJQUM3RztFQUNGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsT0FBT0EsQ0FBRWhCLEdBQUcsRUFBRztJQUNiLE1BQU1pQixhQUFhLEdBQUcsSUFBSSxDQUFDcEIsbUNBQW1DLENBQUNvQixhQUFhO0lBQzVFLE1BQU1kLG1CQUFtQixHQUFHLElBQUksQ0FBQ04sbUNBQW1DLENBQUNNLG1CQUFtQjs7SUFFeEY7SUFDQUgsR0FBRyxDQUFDRSxXQUFXLENBQUNnQixxQkFBcUIsQ0FBQ0MsR0FBRyxDQUFFLEtBQU0sQ0FBQzs7SUFFbEQ7SUFDQWhCLG1CQUFtQixDQUFDaUIsWUFBWSxDQUFFSCxhQUFhLENBQUNJLFdBQVcsQ0FBQyxDQUFDLENBQUNDLENBQUUsQ0FBQztJQUNqRUwsYUFBYSxDQUFDTSxRQUFRLENBQUMsQ0FBQyxDQUFDQyxjQUFjLENBQUMsQ0FBQyxDQUFDQyxhQUFhLENBQUV0QixtQkFBb0IsQ0FBQztJQUM5RSxJQUFJLENBQUNMLDBCQUEwQixHQUFHLENBQUM7RUFDckM7QUFDRjtBQUVBTix3QkFBd0IsQ0FBQ2tDLFFBQVEsQ0FBRSw0QkFBNEIsRUFBRS9CLDBCQUEyQixDQUFDO0FBRTdGLGVBQWVBLDBCQUEwQiJ9