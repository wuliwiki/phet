// Copyright 2015-2020, University of Colorado Boulder

/**
 * The generic "attached" state isn't very useful, but is included for completeness. The reason it isn't useful is
 * because the different biomolecules all have their own unique behavior with respect to attaching, and thus define
 * their own attached states.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import FollowAttachmentSite from '../motion-strategies/FollowAttachmentSite.js';
import WanderInGeneralDirectionMotionStrategy from '../motion-strategies/WanderInGeneralDirectionMotionStrategy.js';
import AttachmentState from './AttachmentState.js';

// constants
const DEFAULT_ATTACH_TIME = 3; // In seconds.

class GenericAttachedState extends AttachmentState {
  /**
   */
  constructor() {
    super();
    this.attachCountdownTime = DEFAULT_ATTACH_TIME; //@private
  }

  /**
   * @override
   * @param  {AttachmentStateMachine} enclosingStateMachine
   * @param {number} dt
   * @public
   */
  step(enclosingStateMachine, dt) {
    const gsm = enclosingStateMachine;

    // Verify that state is consistent.
    assert && assert(gsm.attachmentSite !== null);
    assert && assert(gsm.attachmentSite.attachedOrAttachingMolecule.get() === gsm.biomolecule);

    // See if it is time to detach.
    this.attachCountdownTime -= dt;
    if (this.attachCountdownTime <= 0) {
      // Detach.
      gsm.detach();
      gsm.biomolecule.setMotionStrategy(new WanderInGeneralDirectionMotionStrategy(gsm.biomolecule.getDetachDirection(), gsm.biomolecule.motionBoundsProperty));
    }
  }

  /**
   * @override
   * @param {AttachmentStateMachine} enclosingStateMachine
   * @public
   */
  entered(enclosingStateMachine) {
    this.attachCountdownTime = DEFAULT_ATTACH_TIME;
    enclosingStateMachine.biomolecule.setMotionStrategy(new FollowAttachmentSite(enclosingStateMachine.attachmentSite));

    // Prevent user interaction.
    enclosingStateMachine.biomolecule.movableByUserProperty.set(false);
  }
}
geneExpressionEssentials.register('GenericAttachedState', GenericAttachedState);
export default GenericAttachedState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJGb2xsb3dBdHRhY2htZW50U2l0ZSIsIldhbmRlckluR2VuZXJhbERpcmVjdGlvbk1vdGlvblN0cmF0ZWd5IiwiQXR0YWNobWVudFN0YXRlIiwiREVGQVVMVF9BVFRBQ0hfVElNRSIsIkdlbmVyaWNBdHRhY2hlZFN0YXRlIiwiY29uc3RydWN0b3IiLCJhdHRhY2hDb3VudGRvd25UaW1lIiwic3RlcCIsImVuY2xvc2luZ1N0YXRlTWFjaGluZSIsImR0IiwiZ3NtIiwiYXNzZXJ0IiwiYXR0YWNobWVudFNpdGUiLCJhdHRhY2hlZE9yQXR0YWNoaW5nTW9sZWN1bGUiLCJnZXQiLCJiaW9tb2xlY3VsZSIsImRldGFjaCIsInNldE1vdGlvblN0cmF0ZWd5IiwiZ2V0RGV0YWNoRGlyZWN0aW9uIiwibW90aW9uQm91bmRzUHJvcGVydHkiLCJlbnRlcmVkIiwibW92YWJsZUJ5VXNlclByb3BlcnR5Iiwic2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHZW5lcmljQXR0YWNoZWRTdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgZ2VuZXJpYyBcImF0dGFjaGVkXCIgc3RhdGUgaXNuJ3QgdmVyeSB1c2VmdWwsIGJ1dCBpcyBpbmNsdWRlZCBmb3IgY29tcGxldGVuZXNzLiBUaGUgcmVhc29uIGl0IGlzbid0IHVzZWZ1bCBpc1xyXG4gKiBiZWNhdXNlIHRoZSBkaWZmZXJlbnQgYmlvbW9sZWN1bGVzIGFsbCBoYXZlIHRoZWlyIG93biB1bmlxdWUgYmVoYXZpb3Igd2l0aCByZXNwZWN0IHRvIGF0dGFjaGluZywgYW5kIHRodXMgZGVmaW5lXHJcbiAqIHRoZWlyIG93biBhdHRhY2hlZCBzdGF0ZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBNb2hhbWVkIFNhZmlcclxuICogQGF1dGhvciBBYWRpc2ggR3VwdGFcclxuICovXHJcblxyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBGb2xsb3dBdHRhY2htZW50U2l0ZSBmcm9tICcuLi9tb3Rpb24tc3RyYXRlZ2llcy9Gb2xsb3dBdHRhY2htZW50U2l0ZS5qcyc7XHJcbmltcG9ydCBXYW5kZXJJbkdlbmVyYWxEaXJlY3Rpb25Nb3Rpb25TdHJhdGVneSBmcm9tICcuLi9tb3Rpb24tc3RyYXRlZ2llcy9XYW5kZXJJbkdlbmVyYWxEaXJlY3Rpb25Nb3Rpb25TdHJhdGVneS5qcyc7XHJcbmltcG9ydCBBdHRhY2htZW50U3RhdGUgZnJvbSAnLi9BdHRhY2htZW50U3RhdGUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IERFRkFVTFRfQVRUQUNIX1RJTUUgPSAzOyAvLyBJbiBzZWNvbmRzLlxyXG5cclxuY2xhc3MgR2VuZXJpY0F0dGFjaGVkU3RhdGUgZXh0ZW5kcyBBdHRhY2htZW50U3RhdGUge1xyXG5cclxuICAvKipcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmF0dGFjaENvdW50ZG93blRpbWUgPSBERUZBVUxUX0FUVEFDSF9USU1FOyAvL0Bwcml2YXRlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcGFyYW0gIHtBdHRhY2htZW50U3RhdGVNYWNoaW5lfSBlbmNsb3NpbmdTdGF0ZU1hY2hpbmVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHRcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCggZW5jbG9zaW5nU3RhdGVNYWNoaW5lLCBkdCApIHtcclxuICAgIGNvbnN0IGdzbSA9IGVuY2xvc2luZ1N0YXRlTWFjaGluZTtcclxuXHJcbiAgICAvLyBWZXJpZnkgdGhhdCBzdGF0ZSBpcyBjb25zaXN0ZW50LlxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZ3NtLmF0dGFjaG1lbnRTaXRlICE9PSBudWxsICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBnc20uYXR0YWNobWVudFNpdGUuYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlLmdldCgpID09PSBnc20uYmlvbW9sZWN1bGUgKTtcclxuXHJcbiAgICAvLyBTZWUgaWYgaXQgaXMgdGltZSB0byBkZXRhY2guXHJcbiAgICB0aGlzLmF0dGFjaENvdW50ZG93blRpbWUgLT0gZHQ7XHJcbiAgICBpZiAoIHRoaXMuYXR0YWNoQ291bnRkb3duVGltZSA8PSAwICkge1xyXG5cclxuICAgICAgLy8gRGV0YWNoLlxyXG4gICAgICBnc20uZGV0YWNoKCk7XHJcbiAgICAgIGdzbS5iaW9tb2xlY3VsZS5zZXRNb3Rpb25TdHJhdGVneSggbmV3IFdhbmRlckluR2VuZXJhbERpcmVjdGlvbk1vdGlvblN0cmF0ZWd5KFxyXG4gICAgICAgIGdzbS5iaW9tb2xlY3VsZS5nZXREZXRhY2hEaXJlY3Rpb24oKSwgZ3NtLmJpb21vbGVjdWxlLm1vdGlvbkJvdW5kc1Byb3BlcnR5ICkgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwYXJhbSB7QXR0YWNobWVudFN0YXRlTWFjaGluZX0gZW5jbG9zaW5nU3RhdGVNYWNoaW5lXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGVudGVyZWQoIGVuY2xvc2luZ1N0YXRlTWFjaGluZSApIHtcclxuICAgIHRoaXMuYXR0YWNoQ291bnRkb3duVGltZSA9IERFRkFVTFRfQVRUQUNIX1RJTUU7XHJcbiAgICBlbmNsb3NpbmdTdGF0ZU1hY2hpbmUuYmlvbW9sZWN1bGUuc2V0TW90aW9uU3RyYXRlZ3koXHJcbiAgICAgIG5ldyBGb2xsb3dBdHRhY2htZW50U2l0ZSggZW5jbG9zaW5nU3RhdGVNYWNoaW5lLmF0dGFjaG1lbnRTaXRlICkgKTtcclxuXHJcbiAgICAvLyBQcmV2ZW50IHVzZXIgaW50ZXJhY3Rpb24uXHJcbiAgICBlbmNsb3NpbmdTdGF0ZU1hY2hpbmUuYmlvbW9sZWN1bGUubW92YWJsZUJ5VXNlclByb3BlcnR5LnNldCggZmFsc2UgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlbmVFeHByZXNzaW9uRXNzZW50aWFscy5yZWdpc3RlciggJ0dlbmVyaWNBdHRhY2hlZFN0YXRlJywgR2VuZXJpY0F0dGFjaGVkU3RhdGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdlbmVyaWNBdHRhY2hlZFN0YXRlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHdCQUF3QixNQUFNLHNDQUFzQztBQUMzRSxPQUFPQyxvQkFBb0IsTUFBTSw4Q0FBOEM7QUFDL0UsT0FBT0Msc0NBQXNDLE1BQU0sZ0VBQWdFO0FBQ25ILE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7O0FBRWxEO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0FBRS9CLE1BQU1DLG9CQUFvQixTQUFTRixlQUFlLENBQUM7RUFFakQ7QUFDRjtFQUNFRyxXQUFXQSxDQUFBLEVBQUc7SUFDWixLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUdILG1CQUFtQixDQUFDLENBQUM7RUFDbEQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLElBQUlBLENBQUVDLHFCQUFxQixFQUFFQyxFQUFFLEVBQUc7SUFDaEMsTUFBTUMsR0FBRyxHQUFHRixxQkFBcUI7O0lBRWpDO0lBQ0FHLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxHQUFHLENBQUNFLGNBQWMsS0FBSyxJQUFLLENBQUM7SUFDL0NELE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxHQUFHLENBQUNFLGNBQWMsQ0FBQ0MsMkJBQTJCLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEtBQUtKLEdBQUcsQ0FBQ0ssV0FBWSxDQUFDOztJQUU1RjtJQUNBLElBQUksQ0FBQ1QsbUJBQW1CLElBQUlHLEVBQUU7SUFDOUIsSUFBSyxJQUFJLENBQUNILG1CQUFtQixJQUFJLENBQUMsRUFBRztNQUVuQztNQUNBSSxHQUFHLENBQUNNLE1BQU0sQ0FBQyxDQUFDO01BQ1pOLEdBQUcsQ0FBQ0ssV0FBVyxDQUFDRSxpQkFBaUIsQ0FBRSxJQUFJaEIsc0NBQXNDLENBQzNFUyxHQUFHLENBQUNLLFdBQVcsQ0FBQ0csa0JBQWtCLENBQUMsQ0FBQyxFQUFFUixHQUFHLENBQUNLLFdBQVcsQ0FBQ0ksb0JBQXFCLENBQUUsQ0FBQztJQUNsRjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsT0FBT0EsQ0FBRVoscUJBQXFCLEVBQUc7SUFDL0IsSUFBSSxDQUFDRixtQkFBbUIsR0FBR0gsbUJBQW1CO0lBQzlDSyxxQkFBcUIsQ0FBQ08sV0FBVyxDQUFDRSxpQkFBaUIsQ0FDakQsSUFBSWpCLG9CQUFvQixDQUFFUSxxQkFBcUIsQ0FBQ0ksY0FBZSxDQUFFLENBQUM7O0lBRXBFO0lBQ0FKLHFCQUFxQixDQUFDTyxXQUFXLENBQUNNLHFCQUFxQixDQUFDQyxHQUFHLENBQUUsS0FBTSxDQUFDO0VBQ3RFO0FBQ0Y7QUFFQXZCLHdCQUF3QixDQUFDd0IsUUFBUSxDQUFFLHNCQUFzQixFQUFFbkIsb0JBQXFCLENBQUM7QUFFakYsZUFBZUEsb0JBQW9CIn0=