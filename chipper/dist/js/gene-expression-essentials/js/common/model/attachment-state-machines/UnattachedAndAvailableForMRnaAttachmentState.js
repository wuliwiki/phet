// Copyright 2017-2022, University of Colorado Boulder

/**
 * One of the states used in RibosomeAttachmentStateMachine and MMRnaDestroyerAttachmentStateMachine. This state
 * descends from the GenericUnattachedAndAvailableState, but it handles a special case where it has to move differently
 * if the mRNA is in the process of being transcribed (aka synthesized).  This state is only used for attachments that
 * are formed with messenger RNA (mRNA).
 *
 * For more information about why this sub-type is needed, please see:
 * It is set up like this due to https://github.com/phetsims/gene-expression-essentials/issues/24
 * It is set up like this due to https://github.com/phetsims/gene-expression-essentials/issues/91
 *
 * @author John Blanco
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import GEEConstants from '../../GEEConstants.js';
import MeanderToDestinationMotionStrategy from '../motion-strategies/MeanderToDestinationMotionStrategy.js';
import MoveDirectlyToDestinationMotionStrategy from '../motion-strategies/MoveDirectlyToDestinationMotionStrategy.js';
import GenericUnattachedAndAvailableState from './GenericUnattachedAndAvailableState.js';
class UnattachedAndAvailableForMRnaAttachmentState extends GenericUnattachedAndAvailableState {
  /**
   * @param  {AttachmentStateMachine} attachmentStateMachine
   */
  constructor(attachmentStateMachine) {
    super(attachmentStateMachine);
    this.attachmentStateMachine = attachmentStateMachine; //@public
  }

  /**
   * @override
   * @param {AttachmentStateMachine} enclosingStateMachine
   * @param {number} dt
   * @public
   */
  step(enclosingStateMachine, dt) {
    const gsm = enclosingStateMachine;

    // verify that state is consistent
    assert && assert(gsm.attachmentSite === null);

    // make the biomolecule look for attachments
    gsm.attachmentSite = gsm.biomolecule.proposeAttachments();
    if (gsm.attachmentSite !== null) {
      // A proposal was accepted.  Mark the attachment site as being in use.
      gsm.attachmentSite.attachedOrAttachingMoleculeProperty.set(gsm.biomolecule);

      // Start moving towards the attachment site on the mRNA.  If the mRNA is being transcribed (aka synthesized),
      // it will be moving rapidly, so we will need a motion strategy that moves to it quickly.
      if (gsm.attachmentSite.owner.beingSynthesizedProperty.get()) {
        gsm.biomolecule.setMotionStrategy(new MoveDirectlyToDestinationMotionStrategy(gsm.attachmentSite.positionProperty, gsm.biomolecule.motionBoundsProperty, gsm.destinationOffset, GEEConstants.TRANSCRIPTION_SPEED * 2));
      } else {
        gsm.biomolecule.setMotionStrategy(new MeanderToDestinationMotionStrategy(gsm.attachmentSite.positionProperty, gsm.biomolecule.motionBoundsProperty, gsm.destinationOffset));
      }

      // Update state.
      gsm.setState(gsm.movingTowardsAttachmentState);
    }
  }
}
geneExpressionEssentials.register('UnattachedAndAvailableForMRnaAttachmentState', UnattachedAndAvailableForMRnaAttachmentState);
export default UnattachedAndAvailableForMRnaAttachmentState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJHRUVDb25zdGFudHMiLCJNZWFuZGVyVG9EZXN0aW5hdGlvbk1vdGlvblN0cmF0ZWd5IiwiTW92ZURpcmVjdGx5VG9EZXN0aW5hdGlvbk1vdGlvblN0cmF0ZWd5IiwiR2VuZXJpY1VuYXR0YWNoZWRBbmRBdmFpbGFibGVTdGF0ZSIsIlVuYXR0YWNoZWRBbmRBdmFpbGFibGVGb3JNUm5hQXR0YWNobWVudFN0YXRlIiwiY29uc3RydWN0b3IiLCJhdHRhY2htZW50U3RhdGVNYWNoaW5lIiwic3RlcCIsImVuY2xvc2luZ1N0YXRlTWFjaGluZSIsImR0IiwiZ3NtIiwiYXNzZXJ0IiwiYXR0YWNobWVudFNpdGUiLCJiaW9tb2xlY3VsZSIsInByb3Bvc2VBdHRhY2htZW50cyIsImF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5Iiwic2V0Iiwib3duZXIiLCJiZWluZ1N5bnRoZXNpemVkUHJvcGVydHkiLCJnZXQiLCJzZXRNb3Rpb25TdHJhdGVneSIsInBvc2l0aW9uUHJvcGVydHkiLCJtb3Rpb25Cb3VuZHNQcm9wZXJ0eSIsImRlc3RpbmF0aW9uT2Zmc2V0IiwiVFJBTlNDUklQVElPTl9TUEVFRCIsInNldFN0YXRlIiwibW92aW5nVG93YXJkc0F0dGFjaG1lbnRTdGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVW5hdHRhY2hlZEFuZEF2YWlsYWJsZUZvck1SbmFBdHRhY2htZW50U3RhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogT25lIG9mIHRoZSBzdGF0ZXMgdXNlZCBpbiBSaWJvc29tZUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgYW5kIE1NUm5hRGVzdHJveWVyQXR0YWNobWVudFN0YXRlTWFjaGluZS4gVGhpcyBzdGF0ZVxyXG4gKiBkZXNjZW5kcyBmcm9tIHRoZSBHZW5lcmljVW5hdHRhY2hlZEFuZEF2YWlsYWJsZVN0YXRlLCBidXQgaXQgaGFuZGxlcyBhIHNwZWNpYWwgY2FzZSB3aGVyZSBpdCBoYXMgdG8gbW92ZSBkaWZmZXJlbnRseVxyXG4gKiBpZiB0aGUgbVJOQSBpcyBpbiB0aGUgcHJvY2VzcyBvZiBiZWluZyB0cmFuc2NyaWJlZCAoYWthIHN5bnRoZXNpemVkKS4gIFRoaXMgc3RhdGUgaXMgb25seSB1c2VkIGZvciBhdHRhY2htZW50cyB0aGF0XHJcbiAqIGFyZSBmb3JtZWQgd2l0aCBtZXNzZW5nZXIgUk5BIChtUk5BKS5cclxuICpcclxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgd2h5IHRoaXMgc3ViLXR5cGUgaXMgbmVlZGVkLCBwbGVhc2Ugc2VlOlxyXG4gKiBJdCBpcyBzZXQgdXAgbGlrZSB0aGlzIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZ2VuZS1leHByZXNzaW9uLWVzc2VudGlhbHMvaXNzdWVzLzI0XHJcbiAqIEl0IGlzIHNldCB1cCBsaWtlIHRoaXMgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9nZW5lLWV4cHJlc3Npb24tZXNzZW50aWFscy9pc3N1ZXMvOTFcclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMgZnJvbSAnLi4vLi4vLi4vZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLmpzJztcclxuaW1wb3J0IEdFRUNvbnN0YW50cyBmcm9tICcuLi8uLi9HRUVDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgTWVhbmRlclRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneSBmcm9tICcuLi9tb3Rpb24tc3RyYXRlZ2llcy9NZWFuZGVyVG9EZXN0aW5hdGlvbk1vdGlvblN0cmF0ZWd5LmpzJztcclxuaW1wb3J0IE1vdmVEaXJlY3RseVRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneSBmcm9tICcuLi9tb3Rpb24tc3RyYXRlZ2llcy9Nb3ZlRGlyZWN0bHlUb0Rlc3RpbmF0aW9uTW90aW9uU3RyYXRlZ3kuanMnO1xyXG5pbXBvcnQgR2VuZXJpY1VuYXR0YWNoZWRBbmRBdmFpbGFibGVTdGF0ZSBmcm9tICcuL0dlbmVyaWNVbmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGUuanMnO1xyXG5cclxuY2xhc3MgVW5hdHRhY2hlZEFuZEF2YWlsYWJsZUZvck1SbmFBdHRhY2htZW50U3RhdGUgZXh0ZW5kcyBHZW5lcmljVW5hdHRhY2hlZEFuZEF2YWlsYWJsZVN0YXRlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtICB7QXR0YWNobWVudFN0YXRlTWFjaGluZX0gYXR0YWNobWVudFN0YXRlTWFjaGluZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBhdHRhY2htZW50U3RhdGVNYWNoaW5lICkge1xyXG4gICAgc3VwZXIoIGF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgKTtcclxuICAgIHRoaXMuYXR0YWNobWVudFN0YXRlTWFjaGluZSA9IGF0dGFjaG1lbnRTdGF0ZU1hY2hpbmU7IC8vQHB1YmxpY1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtBdHRhY2htZW50U3RhdGVNYWNoaW5lfSBlbmNsb3NpbmdTdGF0ZU1hY2hpbmVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHRcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCggZW5jbG9zaW5nU3RhdGVNYWNoaW5lLCBkdCApIHtcclxuICAgIGNvbnN0IGdzbSA9IGVuY2xvc2luZ1N0YXRlTWFjaGluZTtcclxuXHJcbiAgICAvLyB2ZXJpZnkgdGhhdCBzdGF0ZSBpcyBjb25zaXN0ZW50XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBnc20uYXR0YWNobWVudFNpdGUgPT09IG51bGwgKTtcclxuXHJcbiAgICAvLyBtYWtlIHRoZSBiaW9tb2xlY3VsZSBsb29rIGZvciBhdHRhY2htZW50c1xyXG4gICAgZ3NtLmF0dGFjaG1lbnRTaXRlID0gZ3NtLmJpb21vbGVjdWxlLnByb3Bvc2VBdHRhY2htZW50cygpO1xyXG4gICAgaWYgKCBnc20uYXR0YWNobWVudFNpdGUgIT09IG51bGwgKSB7XHJcblxyXG4gICAgICAvLyBBIHByb3Bvc2FsIHdhcyBhY2NlcHRlZC4gIE1hcmsgdGhlIGF0dGFjaG1lbnQgc2l0ZSBhcyBiZWluZyBpbiB1c2UuXHJcbiAgICAgIGdzbS5hdHRhY2htZW50U2l0ZS5hdHRhY2hlZE9yQXR0YWNoaW5nTW9sZWN1bGVQcm9wZXJ0eS5zZXQoIGdzbS5iaW9tb2xlY3VsZSApO1xyXG5cclxuICAgICAgLy8gU3RhcnQgbW92aW5nIHRvd2FyZHMgdGhlIGF0dGFjaG1lbnQgc2l0ZSBvbiB0aGUgbVJOQS4gIElmIHRoZSBtUk5BIGlzIGJlaW5nIHRyYW5zY3JpYmVkIChha2Egc3ludGhlc2l6ZWQpLFxyXG4gICAgICAvLyBpdCB3aWxsIGJlIG1vdmluZyByYXBpZGx5LCBzbyB3ZSB3aWxsIG5lZWQgYSBtb3Rpb24gc3RyYXRlZ3kgdGhhdCBtb3ZlcyB0byBpdCBxdWlja2x5LlxyXG4gICAgICBpZiAoIGdzbS5hdHRhY2htZW50U2l0ZS5vd25lci5iZWluZ1N5bnRoZXNpemVkUHJvcGVydHkuZ2V0KCkgKSB7XHJcblxyXG4gICAgICAgIGdzbS5iaW9tb2xlY3VsZS5zZXRNb3Rpb25TdHJhdGVneShcclxuICAgICAgICAgIG5ldyBNb3ZlRGlyZWN0bHlUb0Rlc3RpbmF0aW9uTW90aW9uU3RyYXRlZ3koXHJcbiAgICAgICAgICAgIGdzbS5hdHRhY2htZW50U2l0ZS5wb3NpdGlvblByb3BlcnR5LFxyXG4gICAgICAgICAgICBnc20uYmlvbW9sZWN1bGUubW90aW9uQm91bmRzUHJvcGVydHksXHJcbiAgICAgICAgICAgIGdzbS5kZXN0aW5hdGlvbk9mZnNldCxcclxuICAgICAgICAgICAgR0VFQ29uc3RhbnRzLlRSQU5TQ1JJUFRJT05fU1BFRUQgKiAyXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBnc20uYmlvbW9sZWN1bGUuc2V0TW90aW9uU3RyYXRlZ3koXHJcbiAgICAgICAgICBuZXcgTWVhbmRlclRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneShcclxuICAgICAgICAgICAgZ3NtLmF0dGFjaG1lbnRTaXRlLnBvc2l0aW9uUHJvcGVydHksXHJcbiAgICAgICAgICAgIGdzbS5iaW9tb2xlY3VsZS5tb3Rpb25Cb3VuZHNQcm9wZXJ0eSxcclxuICAgICAgICAgICAgZ3NtLmRlc3RpbmF0aW9uT2Zmc2V0XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVXBkYXRlIHN0YXRlLlxyXG4gICAgICBnc20uc2V0U3RhdGUoIGdzbS5tb3ZpbmdUb3dhcmRzQXR0YWNobWVudFN0YXRlICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdVbmF0dGFjaGVkQW5kQXZhaWxhYmxlRm9yTVJuYUF0dGFjaG1lbnRTdGF0ZScsIFVuYXR0YWNoZWRBbmRBdmFpbGFibGVGb3JNUm5hQXR0YWNobWVudFN0YXRlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVbmF0dGFjaGVkQW5kQXZhaWxhYmxlRm9yTVJuYUF0dGFjaG1lbnRTdGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx3QkFBd0IsTUFBTSxzQ0FBc0M7QUFDM0UsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxrQ0FBa0MsTUFBTSw0REFBNEQ7QUFDM0csT0FBT0MsdUNBQXVDLE1BQU0saUVBQWlFO0FBQ3JILE9BQU9DLGtDQUFrQyxNQUFNLHlDQUF5QztBQUV4RixNQUFNQyw0Q0FBNEMsU0FBU0Qsa0NBQWtDLENBQUM7RUFFNUY7QUFDRjtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLHNCQUFzQixFQUFHO0lBQ3BDLEtBQUssQ0FBRUEsc0JBQXVCLENBQUM7SUFDL0IsSUFBSSxDQUFDQSxzQkFBc0IsR0FBR0Esc0JBQXNCLENBQUMsQ0FBQztFQUN4RDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsSUFBSUEsQ0FBRUMscUJBQXFCLEVBQUVDLEVBQUUsRUFBRztJQUNoQyxNQUFNQyxHQUFHLEdBQUdGLHFCQUFxQjs7SUFFakM7SUFDQUcsTUFBTSxJQUFJQSxNQUFNLENBQUVELEdBQUcsQ0FBQ0UsY0FBYyxLQUFLLElBQUssQ0FBQzs7SUFFL0M7SUFDQUYsR0FBRyxDQUFDRSxjQUFjLEdBQUdGLEdBQUcsQ0FBQ0csV0FBVyxDQUFDQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3pELElBQUtKLEdBQUcsQ0FBQ0UsY0FBYyxLQUFLLElBQUksRUFBRztNQUVqQztNQUNBRixHQUFHLENBQUNFLGNBQWMsQ0FBQ0csbUNBQW1DLENBQUNDLEdBQUcsQ0FBRU4sR0FBRyxDQUFDRyxXQUFZLENBQUM7O01BRTdFO01BQ0E7TUFDQSxJQUFLSCxHQUFHLENBQUNFLGNBQWMsQ0FBQ0ssS0FBSyxDQUFDQyx3QkFBd0IsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRztRQUU3RFQsR0FBRyxDQUFDRyxXQUFXLENBQUNPLGlCQUFpQixDQUMvQixJQUFJbEIsdUNBQXVDLENBQ3pDUSxHQUFHLENBQUNFLGNBQWMsQ0FBQ1MsZ0JBQWdCLEVBQ25DWCxHQUFHLENBQUNHLFdBQVcsQ0FBQ1Msb0JBQW9CLEVBQ3BDWixHQUFHLENBQUNhLGlCQUFpQixFQUNyQnZCLFlBQVksQ0FBQ3dCLG1CQUFtQixHQUFHLENBQ3JDLENBQ0YsQ0FBQztNQUNILENBQUMsTUFDSTtRQUNIZCxHQUFHLENBQUNHLFdBQVcsQ0FBQ08saUJBQWlCLENBQy9CLElBQUluQixrQ0FBa0MsQ0FDcENTLEdBQUcsQ0FBQ0UsY0FBYyxDQUFDUyxnQkFBZ0IsRUFDbkNYLEdBQUcsQ0FBQ0csV0FBVyxDQUFDUyxvQkFBb0IsRUFDcENaLEdBQUcsQ0FBQ2EsaUJBQ04sQ0FDRixDQUFDO01BQ0g7O01BRUE7TUFDQWIsR0FBRyxDQUFDZSxRQUFRLENBQUVmLEdBQUcsQ0FBQ2dCLDRCQUE2QixDQUFDO0lBQ2xEO0VBQ0Y7QUFDRjtBQUVBM0Isd0JBQXdCLENBQUM0QixRQUFRLENBQUUsOENBQThDLEVBQUV2Qiw0Q0FBNkMsQ0FBQztBQUVqSSxlQUFlQSw0Q0FBNEMifQ==