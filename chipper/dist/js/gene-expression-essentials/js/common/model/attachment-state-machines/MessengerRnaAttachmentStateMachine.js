// Copyright 2015-2020, University of Colorado Boulder

/**
 * Attachment state machine for messenger RNA.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import AttachmentStateMachine from './AttachmentStateMachine.js';
import BeingDestroyedState from './BeingDestroyedState.js';
import BeingSynthesizedState from './BeingSynthesizedState.js';
import BeingTranslatedState from './BeingTranslatedState.js';
import DetachingFromPolymeraseState from './DetachingFromPolymeraseState.js';
import UnattachedAndFadingState from './UnattachedAndFadingState.js';
import WanderingAroundCytoplasmState from './WanderingAroundCytoplasmState.js';
class MessengerRnaAttachmentStateMachine extends AttachmentStateMachine {
  /**
   * @param {MessengerRna} messengerRna
   */
  constructor(messengerRna) {
    super(messengerRna);

    // Local reference of appropriate type.
    this.messengerRna = messengerRna; //@private;

    // @private - flag to control whether the mRNA continues to exist once fully formed
    this.fadeAwayWhenFormed = false;
    this.setState(new BeingSynthesizedState());
  }

  /**
   * @override
   * Detach from the RNA polymerase. Note that this should NOT be used to detach the mRNA from ribosomes or any other
   * biomolecules.
   * @public
   */
  detach() {
    if (this.fadeAwayWhenFormed) {
      this.setState(new UnattachedAndFadingState(this));
    } else {
      this.setState(new DetachingFromPolymeraseState(this));
    }
  }

  /**
   * @override
   * @public
   */
  forceImmediateUnattachedAndAvailable() {
    if (this.attachmentSite !== null) {
      const attachedOrAttachingMolecule = this.attachmentSite.attachedOrAttachingMoleculeProperty.get();

      // this is the case for when the incoming molecule is a ribosome
      attachedOrAttachingMolecule.cancelTranslation && attachedOrAttachingMolecule.cancelTranslation();

      // this is the case for when the incoming molecule is an mRNA destroyer
      attachedOrAttachingMolecule.cancelDestruction && attachedOrAttachingMolecule.cancelDestruction();
      this.attachmentSite.attachedOrAttachingMoleculeProperty.set(null);
    }
    this.attachmentSite = null;
    this.setState(new WanderingAroundCytoplasmState());
  }

  /**
   * Sets whether mRNA fades away or not when formed
   * @param {boolean} fadeAwayWhenFormed
   * @public
   */
  setFadeAwayWhenFormed(fadeAwayWhenFormed) {
    this.fadeAwayWhenFormed = fadeAwayWhenFormed;
  }

  /**
   * Signals this state machine that at least one ribosome is now attached to the mRNA and is thus translating it.
   * @public
   */
  attachedToRibosome() {
    this.setState(new BeingTranslatedState());
  }

  /**
   * Signals this state machine that all ribosomes that were translating it have completed the translation process and
   * have detached.
   * @public
   */
  allRibosomesDetached() {
    this.setState(new WanderingAroundCytoplasmState());
  }

  /**
   * Signals this state machine that destroyer is now attached to the mRNA and is thus being destroyed.
   * @public
   */
  attachToDestroyer() {
    this.setState(new BeingDestroyedState());
  }
}
geneExpressionEssentials.register('MessengerRnaAttachmentStateMachine', MessengerRnaAttachmentStateMachine);
export default MessengerRnaAttachmentStateMachine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJBdHRhY2htZW50U3RhdGVNYWNoaW5lIiwiQmVpbmdEZXN0cm95ZWRTdGF0ZSIsIkJlaW5nU3ludGhlc2l6ZWRTdGF0ZSIsIkJlaW5nVHJhbnNsYXRlZFN0YXRlIiwiRGV0YWNoaW5nRnJvbVBvbHltZXJhc2VTdGF0ZSIsIlVuYXR0YWNoZWRBbmRGYWRpbmdTdGF0ZSIsIldhbmRlcmluZ0Fyb3VuZEN5dG9wbGFzbVN0YXRlIiwiTWVzc2VuZ2VyUm5hQXR0YWNobWVudFN0YXRlTWFjaGluZSIsImNvbnN0cnVjdG9yIiwibWVzc2VuZ2VyUm5hIiwiZmFkZUF3YXlXaGVuRm9ybWVkIiwic2V0U3RhdGUiLCJkZXRhY2giLCJmb3JjZUltbWVkaWF0ZVVuYXR0YWNoZWRBbmRBdmFpbGFibGUiLCJhdHRhY2htZW50U2l0ZSIsImF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZSIsImF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5IiwiZ2V0IiwiY2FuY2VsVHJhbnNsYXRpb24iLCJjYW5jZWxEZXN0cnVjdGlvbiIsInNldCIsInNldEZhZGVBd2F5V2hlbkZvcm1lZCIsImF0dGFjaGVkVG9SaWJvc29tZSIsImFsbFJpYm9zb21lc0RldGFjaGVkIiwiYXR0YWNoVG9EZXN0cm95ZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1lc3NlbmdlclJuYUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQXR0YWNobWVudCBzdGF0ZSBtYWNoaW5lIGZvciBtZXNzZW5nZXIgUk5BLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgQXR0YWNobWVudFN0YXRlTWFjaGluZSBmcm9tICcuL0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmUuanMnO1xyXG5pbXBvcnQgQmVpbmdEZXN0cm95ZWRTdGF0ZSBmcm9tICcuL0JlaW5nRGVzdHJveWVkU3RhdGUuanMnO1xyXG5pbXBvcnQgQmVpbmdTeW50aGVzaXplZFN0YXRlIGZyb20gJy4vQmVpbmdTeW50aGVzaXplZFN0YXRlLmpzJztcclxuaW1wb3J0IEJlaW5nVHJhbnNsYXRlZFN0YXRlIGZyb20gJy4vQmVpbmdUcmFuc2xhdGVkU3RhdGUuanMnO1xyXG5pbXBvcnQgRGV0YWNoaW5nRnJvbVBvbHltZXJhc2VTdGF0ZSBmcm9tICcuL0RldGFjaGluZ0Zyb21Qb2x5bWVyYXNlU3RhdGUuanMnO1xyXG5pbXBvcnQgVW5hdHRhY2hlZEFuZEZhZGluZ1N0YXRlIGZyb20gJy4vVW5hdHRhY2hlZEFuZEZhZGluZ1N0YXRlLmpzJztcclxuaW1wb3J0IFdhbmRlcmluZ0Fyb3VuZEN5dG9wbGFzbVN0YXRlIGZyb20gJy4vV2FuZGVyaW5nQXJvdW5kQ3l0b3BsYXNtU3RhdGUuanMnO1xyXG5cclxuY2xhc3MgTWVzc2VuZ2VyUm5hQXR0YWNobWVudFN0YXRlTWFjaGluZSBleHRlbmRzIEF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge01lc3NlbmdlclJuYX0gbWVzc2VuZ2VyUm5hXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1lc3NlbmdlclJuYSApIHtcclxuICAgIHN1cGVyKCBtZXNzZW5nZXJSbmEgKTtcclxuXHJcbiAgICAvLyBMb2NhbCByZWZlcmVuY2Ugb2YgYXBwcm9wcmlhdGUgdHlwZS5cclxuICAgIHRoaXMubWVzc2VuZ2VyUm5hID0gbWVzc2VuZ2VyUm5hOyAvL0Bwcml2YXRlO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIC0gZmxhZyB0byBjb250cm9sIHdoZXRoZXIgdGhlIG1STkEgY29udGludWVzIHRvIGV4aXN0IG9uY2UgZnVsbHkgZm9ybWVkXHJcbiAgICB0aGlzLmZhZGVBd2F5V2hlbkZvcm1lZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSggbmV3IEJlaW5nU3ludGhlc2l6ZWRTdGF0ZSgpICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBEZXRhY2ggZnJvbSB0aGUgUk5BIHBvbHltZXJhc2UuIE5vdGUgdGhhdCB0aGlzIHNob3VsZCBOT1QgYmUgdXNlZCB0byBkZXRhY2ggdGhlIG1STkEgZnJvbSByaWJvc29tZXMgb3IgYW55IG90aGVyXHJcbiAgICogYmlvbW9sZWN1bGVzLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBkZXRhY2goKSB7XHJcbiAgICBpZiAoIHRoaXMuZmFkZUF3YXlXaGVuRm9ybWVkICkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKCBuZXcgVW5hdHRhY2hlZEFuZEZhZGluZ1N0YXRlKCB0aGlzICkgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKCBuZXcgRGV0YWNoaW5nRnJvbVBvbHltZXJhc2VTdGF0ZSggdGhpcyApICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZm9yY2VJbW1lZGlhdGVVbmF0dGFjaGVkQW5kQXZhaWxhYmxlKCkge1xyXG4gICAgaWYgKCB0aGlzLmF0dGFjaG1lbnRTaXRlICE9PSBudWxsICkge1xyXG4gICAgICBjb25zdCBhdHRhY2hlZE9yQXR0YWNoaW5nTW9sZWN1bGUgPSB0aGlzLmF0dGFjaG1lbnRTaXRlLmF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5LmdldCgpO1xyXG5cclxuICAgICAgLy8gdGhpcyBpcyB0aGUgY2FzZSBmb3Igd2hlbiB0aGUgaW5jb21pbmcgbW9sZWN1bGUgaXMgYSByaWJvc29tZVxyXG4gICAgICBhdHRhY2hlZE9yQXR0YWNoaW5nTW9sZWN1bGUuY2FuY2VsVHJhbnNsYXRpb24gJiYgYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlLmNhbmNlbFRyYW5zbGF0aW9uKCk7XHJcblxyXG4gICAgICAvLyB0aGlzIGlzIHRoZSBjYXNlIGZvciB3aGVuIHRoZSBpbmNvbWluZyBtb2xlY3VsZSBpcyBhbiBtUk5BIGRlc3Ryb3llclxyXG4gICAgICBhdHRhY2hlZE9yQXR0YWNoaW5nTW9sZWN1bGUuY2FuY2VsRGVzdHJ1Y3Rpb24gJiYgYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlLmNhbmNlbERlc3RydWN0aW9uKCk7XHJcblxyXG4gICAgICB0aGlzLmF0dGFjaG1lbnRTaXRlLmF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5LnNldCggbnVsbCApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hdHRhY2htZW50U2l0ZSA9IG51bGw7XHJcbiAgICB0aGlzLnNldFN0YXRlKCBuZXcgV2FuZGVyaW5nQXJvdW5kQ3l0b3BsYXNtU3RhdGUoKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB3aGV0aGVyIG1STkEgZmFkZXMgYXdheSBvciBub3Qgd2hlbiBmb3JtZWRcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZhZGVBd2F5V2hlbkZvcm1lZFxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzZXRGYWRlQXdheVdoZW5Gb3JtZWQoIGZhZGVBd2F5V2hlbkZvcm1lZCApIHtcclxuICAgIHRoaXMuZmFkZUF3YXlXaGVuRm9ybWVkID0gZmFkZUF3YXlXaGVuRm9ybWVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2lnbmFscyB0aGlzIHN0YXRlIG1hY2hpbmUgdGhhdCBhdCBsZWFzdCBvbmUgcmlib3NvbWUgaXMgbm93IGF0dGFjaGVkIHRvIHRoZSBtUk5BIGFuZCBpcyB0aHVzIHRyYW5zbGF0aW5nIGl0LlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBhdHRhY2hlZFRvUmlib3NvbWUoKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKCBuZXcgQmVpbmdUcmFuc2xhdGVkU3RhdGUoKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2lnbmFscyB0aGlzIHN0YXRlIG1hY2hpbmUgdGhhdCBhbGwgcmlib3NvbWVzIHRoYXQgd2VyZSB0cmFuc2xhdGluZyBpdCBoYXZlIGNvbXBsZXRlZCB0aGUgdHJhbnNsYXRpb24gcHJvY2VzcyBhbmRcclxuICAgKiBoYXZlIGRldGFjaGVkLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBhbGxSaWJvc29tZXNEZXRhY2hlZCgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoIG5ldyBXYW5kZXJpbmdBcm91bmRDeXRvcGxhc21TdGF0ZSgpICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaWduYWxzIHRoaXMgc3RhdGUgbWFjaGluZSB0aGF0IGRlc3Ryb3llciBpcyBub3cgYXR0YWNoZWQgdG8gdGhlIG1STkEgYW5kIGlzIHRodXMgYmVpbmcgZGVzdHJveWVkLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBhdHRhY2hUb0Rlc3Ryb3llcigpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoIG5ldyBCZWluZ0Rlc3Ryb3llZFN0YXRlKCkgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlbmVFeHByZXNzaW9uRXNzZW50aWFscy5yZWdpc3RlciggJ01lc3NlbmdlclJuYUF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUnLCBNZXNzZW5nZXJSbmFBdHRhY2htZW50U3RhdGVNYWNoaW5lICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXNzZW5nZXJSbmFBdHRhY2htZW50U3RhdGVNYWNoaW5lOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0Esd0JBQXdC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