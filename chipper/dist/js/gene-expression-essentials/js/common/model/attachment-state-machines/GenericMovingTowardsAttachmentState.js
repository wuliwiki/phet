// Copyright 2015-2020, University of Colorado Boulder

/**
 * GenericMovingTowardsAttachmentState is the generic moving towards attachment state
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import AttachmentState from './AttachmentState.js';
class GenericMovingTowardsAttachmentState extends AttachmentState {
  constructor(genericAttachmentStateMachine) {
    super();
    this.genericAttachmentStateMachine = genericAttachmentStateMachine; //@public
  }

  /**
   * @override
   * @param {AttachmentStateMachine} enclosingStateMachine
   * @param {number} dt
   * @public
   */
  step(enclosingStateMachine, dt) {
    const gsm = enclosingStateMachine;

    // verify that state is consistent
    assert && assert(gsm.attachmentSite !== null);
    assert && assert(gsm.attachmentSite.attachedOrAttachingMoleculeProperty.get() === this.genericAttachmentStateMachine.biomolecule);

    // calculate the position where this biomolecule must be in order to attach to the attachment site
    const destination = new Vector2(gsm.attachmentSite.positionProperty.get().x - gsm.destinationOffset.x, gsm.attachmentSite.positionProperty.get().y - gsm.destinationOffset.y);

    // see if the attachment site has been reached
    if (gsm.biomolecule.getPosition().distance(destination) < AttachmentState.ATTACHED_DISTANCE_THRESHOLD) {
      // this molecule is now at the attachment site, so consider it attached
      gsm.setState(gsm.attachedState);
    }
  }

  /**
   * @override
   * @param {AttachmentStateMachine} enclosingStateMachine
   * @public
   */
  entered(enclosingStateMachine) {
    // allow user interaction
    enclosingStateMachine.biomolecule.movableByUserProperty.set(true);
  }
}
geneExpressionEssentials.register('GenericMovingTowardsAttachmentState', GenericMovingTowardsAttachmentState);
export default GenericMovingTowardsAttachmentState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIiwiQXR0YWNobWVudFN0YXRlIiwiR2VuZXJpY01vdmluZ1Rvd2FyZHNBdHRhY2htZW50U3RhdGUiLCJjb25zdHJ1Y3RvciIsImdlbmVyaWNBdHRhY2htZW50U3RhdGVNYWNoaW5lIiwic3RlcCIsImVuY2xvc2luZ1N0YXRlTWFjaGluZSIsImR0IiwiZ3NtIiwiYXNzZXJ0IiwiYXR0YWNobWVudFNpdGUiLCJhdHRhY2hlZE9yQXR0YWNoaW5nTW9sZWN1bGVQcm9wZXJ0eSIsImdldCIsImJpb21vbGVjdWxlIiwiZGVzdGluYXRpb24iLCJwb3NpdGlvblByb3BlcnR5IiwieCIsImRlc3RpbmF0aW9uT2Zmc2V0IiwieSIsImdldFBvc2l0aW9uIiwiZGlzdGFuY2UiLCJBVFRBQ0hFRF9ESVNUQU5DRV9USFJFU0hPTEQiLCJzZXRTdGF0ZSIsImF0dGFjaGVkU3RhdGUiLCJlbnRlcmVkIiwibW92YWJsZUJ5VXNlclByb3BlcnR5Iiwic2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHZW5lcmljTW92aW5nVG93YXJkc0F0dGFjaG1lbnRTdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmljTW92aW5nVG93YXJkc0F0dGFjaG1lbnRTdGF0ZSBpcyB0aGUgZ2VuZXJpYyBtb3ZpbmcgdG93YXJkcyBhdHRhY2htZW50IHN0YXRlXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBNb2hhbWVkIFNhZmlcclxuICogQGF1dGhvciBBYWRpc2ggR3VwdGFcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMgZnJvbSAnLi4vLi4vLi4vZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLmpzJztcclxuaW1wb3J0IEF0dGFjaG1lbnRTdGF0ZSBmcm9tICcuL0F0dGFjaG1lbnRTdGF0ZS5qcyc7XHJcblxyXG5jbGFzcyBHZW5lcmljTW92aW5nVG93YXJkc0F0dGFjaG1lbnRTdGF0ZSBleHRlbmRzIEF0dGFjaG1lbnRTdGF0ZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCBnZW5lcmljQXR0YWNobWVudFN0YXRlTWFjaGluZSApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmdlbmVyaWNBdHRhY2htZW50U3RhdGVNYWNoaW5lID0gZ2VuZXJpY0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmU7IC8vQHB1YmxpY1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtBdHRhY2htZW50U3RhdGVNYWNoaW5lfSBlbmNsb3NpbmdTdGF0ZU1hY2hpbmVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHRcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc3RlcCggZW5jbG9zaW5nU3RhdGVNYWNoaW5lLCBkdCApIHtcclxuXHJcbiAgICBjb25zdCBnc20gPSBlbmNsb3NpbmdTdGF0ZU1hY2hpbmU7XHJcblxyXG4gICAgLy8gdmVyaWZ5IHRoYXQgc3RhdGUgaXMgY29uc2lzdGVudFxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZ3NtLmF0dGFjaG1lbnRTaXRlICE9PSBudWxsICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBnc20uYXR0YWNobWVudFNpdGUuYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlUHJvcGVydHkuZ2V0KCkgPT09IHRoaXMuZ2VuZXJpY0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmUuYmlvbW9sZWN1bGUgKTtcclxuXHJcbiAgICAvLyBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIHdoZXJlIHRoaXMgYmlvbW9sZWN1bGUgbXVzdCBiZSBpbiBvcmRlciB0byBhdHRhY2ggdG8gdGhlIGF0dGFjaG1lbnQgc2l0ZVxyXG4gICAgY29uc3QgZGVzdGluYXRpb24gPSBuZXcgVmVjdG9yMihcclxuICAgICAgZ3NtLmF0dGFjaG1lbnRTaXRlLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkueCAtIGdzbS5kZXN0aW5hdGlvbk9mZnNldC54LFxyXG4gICAgICBnc20uYXR0YWNobWVudFNpdGUucG9zaXRpb25Qcm9wZXJ0eS5nZXQoKS55IC0gZ3NtLmRlc3RpbmF0aW9uT2Zmc2V0LnlcclxuICAgICk7XHJcblxyXG4gICAgLy8gc2VlIGlmIHRoZSBhdHRhY2htZW50IHNpdGUgaGFzIGJlZW4gcmVhY2hlZFxyXG4gICAgaWYgKCBnc20uYmlvbW9sZWN1bGUuZ2V0UG9zaXRpb24oKS5kaXN0YW5jZSggZGVzdGluYXRpb24gKSA8IEF0dGFjaG1lbnRTdGF0ZS5BVFRBQ0hFRF9ESVNUQU5DRV9USFJFU0hPTEQgKSB7XHJcblxyXG4gICAgICAvLyB0aGlzIG1vbGVjdWxlIGlzIG5vdyBhdCB0aGUgYXR0YWNobWVudCBzaXRlLCBzbyBjb25zaWRlciBpdCBhdHRhY2hlZFxyXG4gICAgICBnc20uc2V0U3RhdGUoIGdzbS5hdHRhY2hlZFN0YXRlICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcGFyYW0ge0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmV9IGVuY2xvc2luZ1N0YXRlTWFjaGluZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBlbnRlcmVkKCBlbmNsb3NpbmdTdGF0ZU1hY2hpbmUgKSB7XHJcblxyXG4gICAgLy8gYWxsb3cgdXNlciBpbnRlcmFjdGlvblxyXG4gICAgZW5jbG9zaW5nU3RhdGVNYWNoaW5lLmJpb21vbGVjdWxlLm1vdmFibGVCeVVzZXJQcm9wZXJ0eS5zZXQoIHRydWUgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlbmVFeHByZXNzaW9uRXNzZW50aWFscy5yZWdpc3RlciggJ0dlbmVyaWNNb3ZpbmdUb3dhcmRzQXR0YWNobWVudFN0YXRlJywgR2VuZXJpY01vdmluZ1Rvd2FyZHNBdHRhY2htZW50U3RhdGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdlbmVyaWNNb3ZpbmdUb3dhcmRzQXR0YWNobWVudFN0YXRlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsT0FBT0Msd0JBQXdCLE1BQU0sc0NBQXNDO0FBQzNFLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFbEQsTUFBTUMsbUNBQW1DLFNBQVNELGVBQWUsQ0FBQztFQUVoRUUsV0FBV0EsQ0FBRUMsNkJBQTZCLEVBQUc7SUFDM0MsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNBLDZCQUE2QixHQUFHQSw2QkFBNkIsQ0FBQyxDQUFDO0VBQ3RFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxJQUFJQSxDQUFFQyxxQkFBcUIsRUFBRUMsRUFBRSxFQUFHO0lBRWhDLE1BQU1DLEdBQUcsR0FBR0YscUJBQXFCOztJQUVqQztJQUNBRyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsR0FBRyxDQUFDRSxjQUFjLEtBQUssSUFBSyxDQUFDO0lBQy9DRCxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsR0FBRyxDQUFDRSxjQUFjLENBQUNDLG1DQUFtQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQ1IsNkJBQTZCLENBQUNTLFdBQVksQ0FBQzs7SUFFbkk7SUFDQSxNQUFNQyxXQUFXLEdBQUcsSUFBSWYsT0FBTyxDQUM3QlMsR0FBRyxDQUFDRSxjQUFjLENBQUNLLGdCQUFnQixDQUFDSCxHQUFHLENBQUMsQ0FBQyxDQUFDSSxDQUFDLEdBQUdSLEdBQUcsQ0FBQ1MsaUJBQWlCLENBQUNELENBQUMsRUFDckVSLEdBQUcsQ0FBQ0UsY0FBYyxDQUFDSyxnQkFBZ0IsQ0FBQ0gsR0FBRyxDQUFDLENBQUMsQ0FBQ00sQ0FBQyxHQUFHVixHQUFHLENBQUNTLGlCQUFpQixDQUFDQyxDQUN0RSxDQUFDOztJQUVEO0lBQ0EsSUFBS1YsR0FBRyxDQUFDSyxXQUFXLENBQUNNLFdBQVcsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBRU4sV0FBWSxDQUFDLEdBQUdiLGVBQWUsQ0FBQ29CLDJCQUEyQixFQUFHO01BRXpHO01BQ0FiLEdBQUcsQ0FBQ2MsUUFBUSxDQUFFZCxHQUFHLENBQUNlLGFBQWMsQ0FBQztJQUNuQztFQUNGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsT0FBT0EsQ0FBRWxCLHFCQUFxQixFQUFHO0lBRS9CO0lBQ0FBLHFCQUFxQixDQUFDTyxXQUFXLENBQUNZLHFCQUFxQixDQUFDQyxHQUFHLENBQUUsSUFBSyxDQUFDO0VBQ3JFO0FBQ0Y7QUFFQTFCLHdCQUF3QixDQUFDMkIsUUFBUSxDQUFFLHFDQUFxQyxFQUFFekIsbUNBQW9DLENBQUM7QUFFL0csZUFBZUEsbUNBQW1DIn0=