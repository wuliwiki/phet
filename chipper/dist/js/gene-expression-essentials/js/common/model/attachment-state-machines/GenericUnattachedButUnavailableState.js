// Copyright 2015-2020, University of Colorado Boulder

/**
 * GenericUnattachedButUnavailableState is a generic state when biomolecule is unattached but unavailable
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import AttachmentState from './AttachmentState.js';

// constants
const DEFAULT_DETACH_TIME = 3; // In seconds.

class GenericUnattachedButUnavailableState extends AttachmentState {
  /**
   */
  constructor() {
    super();
    this.detachCountdownTime = DEFAULT_DETACH_TIME; //@private
  }

  /**
   * @override
   * @param {AttachmentStateMachine} enclosingStateMachine
   * @param {number} dt
   * @public
   */
  step(enclosingStateMachine, dt) {
    const gsm = enclosingStateMachine;

    // Verify that state is consistent
    assert && assert(gsm.attachmentSite === null);

    // See if we've been detached long enough.
    this.detachCountdownTime -= dt;
    if (this.detachCountdownTime <= 0) {
      // Move to the unattached-and-available state.
      gsm.setState(gsm.unattachedAndAvailableState);
    }
  }

  /**
   * @override
   * @param {AttachmentStateMachine} enclosingStateMachine
   * @public
   */
  entered(enclosingStateMachine) {
    this.detachCountdownTime = DEFAULT_DETACH_TIME;

    // Allow user interaction.
    enclosingStateMachine.biomolecule.movableByUserProperty.set(true);
  }
}
geneExpressionEssentials.register('GenericUnattachedButUnavailableState', GenericUnattachedButUnavailableState);
export default GenericUnattachedButUnavailableState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJBdHRhY2htZW50U3RhdGUiLCJERUZBVUxUX0RFVEFDSF9USU1FIiwiR2VuZXJpY1VuYXR0YWNoZWRCdXRVbmF2YWlsYWJsZVN0YXRlIiwiY29uc3RydWN0b3IiLCJkZXRhY2hDb3VudGRvd25UaW1lIiwic3RlcCIsImVuY2xvc2luZ1N0YXRlTWFjaGluZSIsImR0IiwiZ3NtIiwiYXNzZXJ0IiwiYXR0YWNobWVudFNpdGUiLCJzZXRTdGF0ZSIsInVuYXR0YWNoZWRBbmRBdmFpbGFibGVTdGF0ZSIsImVudGVyZWQiLCJiaW9tb2xlY3VsZSIsIm1vdmFibGVCeVVzZXJQcm9wZXJ0eSIsInNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR2VuZXJpY1VuYXR0YWNoZWRCdXRVbmF2YWlsYWJsZVN0YXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdlbmVyaWNVbmF0dGFjaGVkQnV0VW5hdmFpbGFibGVTdGF0ZSBpcyBhIGdlbmVyaWMgc3RhdGUgd2hlbiBiaW9tb2xlY3VsZSBpcyB1bmF0dGFjaGVkIGJ1dCB1bmF2YWlsYWJsZVxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgQXR0YWNobWVudFN0YXRlIGZyb20gJy4vQXR0YWNobWVudFN0YXRlLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUZBVUxUX0RFVEFDSF9USU1FID0gMzsgLy8gSW4gc2Vjb25kcy5cclxuXHJcbmNsYXNzIEdlbmVyaWNVbmF0dGFjaGVkQnV0VW5hdmFpbGFibGVTdGF0ZSBleHRlbmRzIEF0dGFjaG1lbnRTdGF0ZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuZGV0YWNoQ291bnRkb3duVGltZSA9IERFRkFVTFRfREVUQUNIX1RJTUU7IC8vQHByaXZhdGVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwYXJhbSB7QXR0YWNobWVudFN0YXRlTWFjaGluZX0gZW5jbG9zaW5nU3RhdGVNYWNoaW5lXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR0XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0ZXAoIGVuY2xvc2luZ1N0YXRlTWFjaGluZSwgZHQgKSB7XHJcbiAgICBjb25zdCBnc20gPSBlbmNsb3NpbmdTdGF0ZU1hY2hpbmU7XHJcblxyXG4gICAgLy8gVmVyaWZ5IHRoYXQgc3RhdGUgaXMgY29uc2lzdGVudFxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZ3NtLmF0dGFjaG1lbnRTaXRlID09PSBudWxsICk7XHJcblxyXG4gICAgLy8gU2VlIGlmIHdlJ3ZlIGJlZW4gZGV0YWNoZWQgbG9uZyBlbm91Z2guXHJcbiAgICB0aGlzLmRldGFjaENvdW50ZG93blRpbWUgLT0gZHQ7XHJcbiAgICBpZiAoIHRoaXMuZGV0YWNoQ291bnRkb3duVGltZSA8PSAwICkge1xyXG5cclxuICAgICAgLy8gTW92ZSB0byB0aGUgdW5hdHRhY2hlZC1hbmQtYXZhaWxhYmxlIHN0YXRlLlxyXG4gICAgICBnc20uc2V0U3RhdGUoIGdzbS51bmF0dGFjaGVkQW5kQXZhaWxhYmxlU3RhdGUgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwYXJhbSB7QXR0YWNobWVudFN0YXRlTWFjaGluZX0gZW5jbG9zaW5nU3RhdGVNYWNoaW5lXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGVudGVyZWQoIGVuY2xvc2luZ1N0YXRlTWFjaGluZSApIHtcclxuICAgIHRoaXMuZGV0YWNoQ291bnRkb3duVGltZSA9IERFRkFVTFRfREVUQUNIX1RJTUU7XHJcblxyXG4gICAgLy8gQWxsb3cgdXNlciBpbnRlcmFjdGlvbi5cclxuICAgIGVuY2xvc2luZ1N0YXRlTWFjaGluZS5iaW9tb2xlY3VsZS5tb3ZhYmxlQnlVc2VyUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdHZW5lcmljVW5hdHRhY2hlZEJ1dFVuYXZhaWxhYmxlU3RhdGUnLCBHZW5lcmljVW5hdHRhY2hlZEJ1dFVuYXZhaWxhYmxlU3RhdGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdlbmVyaWNVbmF0dGFjaGVkQnV0VW5hdmFpbGFibGVTdGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx3QkFBd0IsTUFBTSxzQ0FBc0M7QUFDM0UsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjs7QUFFbEQ7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxDQUFDLENBQUMsQ0FBQzs7QUFFL0IsTUFBTUMsb0NBQW9DLFNBQVNGLGVBQWUsQ0FBQztFQUVqRTtBQUNGO0VBQ0VHLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDQyxtQkFBbUIsR0FBR0gsbUJBQW1CLENBQUMsQ0FBQztFQUNsRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUksSUFBSUEsQ0FBRUMscUJBQXFCLEVBQUVDLEVBQUUsRUFBRztJQUNoQyxNQUFNQyxHQUFHLEdBQUdGLHFCQUFxQjs7SUFFakM7SUFDQUcsTUFBTSxJQUFJQSxNQUFNLENBQUVELEdBQUcsQ0FBQ0UsY0FBYyxLQUFLLElBQUssQ0FBQzs7SUFFL0M7SUFDQSxJQUFJLENBQUNOLG1CQUFtQixJQUFJRyxFQUFFO0lBQzlCLElBQUssSUFBSSxDQUFDSCxtQkFBbUIsSUFBSSxDQUFDLEVBQUc7TUFFbkM7TUFDQUksR0FBRyxDQUFDRyxRQUFRLENBQUVILEdBQUcsQ0FBQ0ksMkJBQTRCLENBQUM7SUFDakQ7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLE9BQU9BLENBQUVQLHFCQUFxQixFQUFHO0lBQy9CLElBQUksQ0FBQ0YsbUJBQW1CLEdBQUdILG1CQUFtQjs7SUFFOUM7SUFDQUsscUJBQXFCLENBQUNRLFdBQVcsQ0FBQ0MscUJBQXFCLENBQUNDLEdBQUcsQ0FBRSxJQUFLLENBQUM7RUFDckU7QUFDRjtBQUVBakIsd0JBQXdCLENBQUNrQixRQUFRLENBQUUsc0NBQXNDLEVBQUVmLG9DQUFxQyxDQUFDO0FBRWpILGVBQWVBLG9DQUFvQyJ9