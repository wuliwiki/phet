// Copyright 2015-2020, University of Colorado Boulder

/**
 * Attachment state machine for all protein molecules. This class controls how protein molecules behave with respect to
 * attachments.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import StillnessMotionStrategy from '../motion-strategies/StillnessMotionStrategy.js';
import AttachmentState from './AttachmentState.js';
import GenericAttachmentStateMachine from './GenericAttachmentStateMachine.js';

//------------------------------------------
//States for this attachment state machine
//------------------------------------------
class ProteinAttachedToRibosomeState extends AttachmentState {
  /**
   * @param {ProteinAttachmentStateMachine} proteinAttachmentStateMachine
   */
  constructor(proteinAttachmentStateMachine) {
    super();
    this.proteinAttachmentStateMachine = proteinAttachmentStateMachine;
  }

  /**
   * @override
   * @param {AttachmentStateMachine} asm
   * @public
   */
  entered(asm) {
    const biomolecule = this.proteinAttachmentStateMachine.biomolecule;
    biomolecule.setMotionStrategy(new StillnessMotionStrategy());

    // Prevent user interaction while the protein is growing.
    asm.biomolecule.movableByUserProperty.set(false);
  }
}
class ProteinAttachmentStateMachine extends GenericAttachmentStateMachine {
  /**
   * @param biomolecule {MobileBiomolecule}
   */
  constructor(biomolecule) {
    super(biomolecule);
    // Set up a new "attached" state, since the behavior is different from the default.
    this.attachedState = new ProteinAttachedToRibosomeState(this); //@public
    this.setState(this.attachedState);
  }
}
geneExpressionEssentials.register('ProteinAttachmentStateMachine', ProteinAttachmentStateMachine);
export default ProteinAttachmentStateMachine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJTdGlsbG5lc3NNb3Rpb25TdHJhdGVneSIsIkF0dGFjaG1lbnRTdGF0ZSIsIkdlbmVyaWNBdHRhY2htZW50U3RhdGVNYWNoaW5lIiwiUHJvdGVpbkF0dGFjaGVkVG9SaWJvc29tZVN0YXRlIiwiY29uc3RydWN0b3IiLCJwcm90ZWluQXR0YWNobWVudFN0YXRlTWFjaGluZSIsImVudGVyZWQiLCJhc20iLCJiaW9tb2xlY3VsZSIsInNldE1vdGlvblN0cmF0ZWd5IiwibW92YWJsZUJ5VXNlclByb3BlcnR5Iiwic2V0IiwiUHJvdGVpbkF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUiLCJhdHRhY2hlZFN0YXRlIiwic2V0U3RhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByb3RlaW5BdHRhY2htZW50U3RhdGVNYWNoaW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEF0dGFjaG1lbnQgc3RhdGUgbWFjaGluZSBmb3IgYWxsIHByb3RlaW4gbW9sZWN1bGVzLiBUaGlzIGNsYXNzIGNvbnRyb2xzIGhvdyBwcm90ZWluIG1vbGVjdWxlcyBiZWhhdmUgd2l0aCByZXNwZWN0IHRvXHJcbiAqIGF0dGFjaG1lbnRzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgU3RpbGxuZXNzTW90aW9uU3RyYXRlZ3kgZnJvbSAnLi4vbW90aW9uLXN0cmF0ZWdpZXMvU3RpbGxuZXNzTW90aW9uU3RyYXRlZ3kuanMnO1xyXG5pbXBvcnQgQXR0YWNobWVudFN0YXRlIGZyb20gJy4vQXR0YWNobWVudFN0YXRlLmpzJztcclxuaW1wb3J0IEdlbmVyaWNBdHRhY2htZW50U3RhdGVNYWNoaW5lIGZyb20gJy4vR2VuZXJpY0F0dGFjaG1lbnRTdGF0ZU1hY2hpbmUuanMnO1xyXG5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy9TdGF0ZXMgZm9yIHRoaXMgYXR0YWNobWVudCBzdGF0ZSBtYWNoaW5lXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmNsYXNzIFByb3RlaW5BdHRhY2hlZFRvUmlib3NvbWVTdGF0ZSBleHRlbmRzIEF0dGFjaG1lbnRTdGF0ZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvdGVpbkF0dGFjaG1lbnRTdGF0ZU1hY2hpbmV9IHByb3RlaW5BdHRhY2htZW50U3RhdGVNYWNoaW5lXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHByb3RlaW5BdHRhY2htZW50U3RhdGVNYWNoaW5lICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMucHJvdGVpbkF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgPSBwcm90ZWluQXR0YWNobWVudFN0YXRlTWFjaGluZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwYXJhbSB7QXR0YWNobWVudFN0YXRlTWFjaGluZX0gYXNtXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGVudGVyZWQoIGFzbSApIHtcclxuICAgIGNvbnN0IGJpb21vbGVjdWxlID0gdGhpcy5wcm90ZWluQXR0YWNobWVudFN0YXRlTWFjaGluZS5iaW9tb2xlY3VsZTtcclxuICAgIGJpb21vbGVjdWxlLnNldE1vdGlvblN0cmF0ZWd5KCBuZXcgU3RpbGxuZXNzTW90aW9uU3RyYXRlZ3koKSApO1xyXG5cclxuICAgIC8vIFByZXZlbnQgdXNlciBpbnRlcmFjdGlvbiB3aGlsZSB0aGUgcHJvdGVpbiBpcyBncm93aW5nLlxyXG4gICAgYXNtLmJpb21vbGVjdWxlLm1vdmFibGVCeVVzZXJQcm9wZXJ0eS5zZXQoIGZhbHNlICk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBQcm90ZWluQXR0YWNobWVudFN0YXRlTWFjaGluZSBleHRlbmRzIEdlbmVyaWNBdHRhY2htZW50U3RhdGVNYWNoaW5lIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGJpb21vbGVjdWxlIHtNb2JpbGVCaW9tb2xlY3VsZX1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYmlvbW9sZWN1bGUgKSB7XHJcbiAgICBzdXBlciggYmlvbW9sZWN1bGUgKTtcclxuICAgIC8vIFNldCB1cCBhIG5ldyBcImF0dGFjaGVkXCIgc3RhdGUsIHNpbmNlIHRoZSBiZWhhdmlvciBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgZGVmYXVsdC5cclxuICAgIHRoaXMuYXR0YWNoZWRTdGF0ZSA9IG5ldyBQcm90ZWluQXR0YWNoZWRUb1JpYm9zb21lU3RhdGUoIHRoaXMgKTsgLy9AcHVibGljXHJcbiAgICB0aGlzLnNldFN0YXRlKCB0aGlzLmF0dGFjaGVkU3RhdGUgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlbmVFeHByZXNzaW9uRXNzZW50aWFscy5yZWdpc3RlciggJ1Byb3RlaW5BdHRhY2htZW50U3RhdGVNYWNoaW5lJywgUHJvdGVpbkF0dGFjaG1lbnRTdGF0ZU1hY2hpbmUgKTtcclxuZXhwb3J0IGRlZmF1bHQgUHJvdGVpbkF0dGFjaG1lbnRTdGF0ZU1hY2hpbmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHdCQUF3QixNQUFNLHNDQUFzQztBQUMzRSxPQUFPQyx1QkFBdUIsTUFBTSxpREFBaUQ7QUFDckYsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjtBQUNsRCxPQUFPQyw2QkFBNkIsTUFBTSxvQ0FBb0M7O0FBRTlFO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLDhCQUE4QixTQUFTRixlQUFlLENBQUM7RUFFM0Q7QUFDRjtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLDZCQUE2QixFQUFHO0lBQzNDLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDQSw2QkFBNkIsR0FBR0EsNkJBQTZCO0VBQ3BFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsT0FBT0EsQ0FBRUMsR0FBRyxFQUFHO0lBQ2IsTUFBTUMsV0FBVyxHQUFHLElBQUksQ0FBQ0gsNkJBQTZCLENBQUNHLFdBQVc7SUFDbEVBLFdBQVcsQ0FBQ0MsaUJBQWlCLENBQUUsSUFBSVQsdUJBQXVCLENBQUMsQ0FBRSxDQUFDOztJQUU5RDtJQUNBTyxHQUFHLENBQUNDLFdBQVcsQ0FBQ0UscUJBQXFCLENBQUNDLEdBQUcsQ0FBRSxLQUFNLENBQUM7RUFDcEQ7QUFDRjtBQUVBLE1BQU1DLDZCQUE2QixTQUFTViw2QkFBNkIsQ0FBQztFQUV4RTtBQUNGO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUksV0FBVyxFQUFHO0lBQ3pCLEtBQUssQ0FBRUEsV0FBWSxDQUFDO0lBQ3BCO0lBQ0EsSUFBSSxDQUFDSyxhQUFhLEdBQUcsSUFBSVYsOEJBQThCLENBQUUsSUFBSyxDQUFDLENBQUMsQ0FBQztJQUNqRSxJQUFJLENBQUNXLFFBQVEsQ0FBRSxJQUFJLENBQUNELGFBQWMsQ0FBQztFQUNyQztBQUNGO0FBRUFkLHdCQUF3QixDQUFDZ0IsUUFBUSxDQUFFLCtCQUErQixFQUFFSCw2QkFBOEIsQ0FBQztBQUNuRyxlQUFlQSw2QkFBNkIifQ==