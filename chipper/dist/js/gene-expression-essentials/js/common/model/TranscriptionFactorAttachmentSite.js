// Copyright 2015-2020, University of Colorado Boulder

/**
 * Specialization of the attachment site for transcription factors - associates a transcription factor configuration and
 * a property with the attachment site.
 *
 * NOTE TO SELF (or other future developers): If any other attachment site is needed that has variable affinity, the
 * class hierarchy should be changed to make this more general.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

//modules
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import AttachmentSite from './AttachmentSite.js';
class TranscriptionFactorAttachmentSite extends AttachmentSite {
  /**
   * @param {Object} owner - the molecule upon which this attachment site exists
   * @param {Vector2} initialPosition
   * @param {TranscriptionFactorConfig} tfConfig
   * @param {number} initialAffinity
   */
  constructor(owner, initialPosition, tfConfig, initialAffinity) {
    super(owner, initialPosition, initialAffinity);

    // Configuration of TF that attaches to this site.
    this.tfConfig = tfConfig; // @private
  }

  /**
   * @param {TranscriptionFactorConfig} tfConfig
   * @returns {boolean}
   * @public
   */
  configurationMatches(tfConfig) {
    return this.tfConfig === tfConfig;
  }

  /**
   * @returns {TranscriptionFactorConfig}
   * @public
   */
  getTfConfig() {
    return this.tfConfig;
  }
}
geneExpressionEssentials.register('TranscriptionFactorAttachmentSite', TranscriptionFactorAttachmentSite);
export default TranscriptionFactorAttachmentSite;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJBdHRhY2htZW50U2l0ZSIsIlRyYW5zY3JpcHRpb25GYWN0b3JBdHRhY2htZW50U2l0ZSIsImNvbnN0cnVjdG9yIiwib3duZXIiLCJpbml0aWFsUG9zaXRpb24iLCJ0ZkNvbmZpZyIsImluaXRpYWxBZmZpbml0eSIsImNvbmZpZ3VyYXRpb25NYXRjaGVzIiwiZ2V0VGZDb25maWciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRyYW5zY3JpcHRpb25GYWN0b3JBdHRhY2htZW50U2l0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTcGVjaWFsaXphdGlvbiBvZiB0aGUgYXR0YWNobWVudCBzaXRlIGZvciB0cmFuc2NyaXB0aW9uIGZhY3RvcnMgLSBhc3NvY2lhdGVzIGEgdHJhbnNjcmlwdGlvbiBmYWN0b3IgY29uZmlndXJhdGlvbiBhbmRcclxuICogYSBwcm9wZXJ0eSB3aXRoIHRoZSBhdHRhY2htZW50IHNpdGUuXHJcbiAqXHJcbiAqIE5PVEUgVE8gU0VMRiAob3Igb3RoZXIgZnV0dXJlIGRldmVsb3BlcnMpOiBJZiBhbnkgb3RoZXIgYXR0YWNobWVudCBzaXRlIGlzIG5lZWRlZCB0aGF0IGhhcyB2YXJpYWJsZSBhZmZpbml0eSwgdGhlXHJcbiAqIGNsYXNzIGhpZXJhcmNoeSBzaG91bGQgYmUgY2hhbmdlZCB0byBtYWtlIHRoaXMgbW9yZSBnZW5lcmFsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuXHJcbi8vbW9kdWxlc1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBBdHRhY2htZW50U2l0ZSBmcm9tICcuL0F0dGFjaG1lbnRTaXRlLmpzJztcclxuXHJcbmNsYXNzIFRyYW5zY3JpcHRpb25GYWN0b3JBdHRhY2htZW50U2l0ZSBleHRlbmRzIEF0dGFjaG1lbnRTaXRlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG93bmVyIC0gdGhlIG1vbGVjdWxlIHVwb24gd2hpY2ggdGhpcyBhdHRhY2htZW50IHNpdGUgZXhpc3RzXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBpbml0aWFsUG9zaXRpb25cclxuICAgKiBAcGFyYW0ge1RyYW5zY3JpcHRpb25GYWN0b3JDb25maWd9IHRmQ29uZmlnXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluaXRpYWxBZmZpbml0eVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvd25lciwgaW5pdGlhbFBvc2l0aW9uLCB0ZkNvbmZpZywgaW5pdGlhbEFmZmluaXR5ICkge1xyXG4gICAgc3VwZXIoIG93bmVyLCBpbml0aWFsUG9zaXRpb24sIGluaXRpYWxBZmZpbml0eSApO1xyXG5cclxuICAgIC8vIENvbmZpZ3VyYXRpb24gb2YgVEYgdGhhdCBhdHRhY2hlcyB0byB0aGlzIHNpdGUuXHJcbiAgICB0aGlzLnRmQ29uZmlnID0gdGZDb25maWc7IC8vIEBwcml2YXRlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1RyYW5zY3JpcHRpb25GYWN0b3JDb25maWd9IHRmQ29uZmlnXHJcbiAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNvbmZpZ3VyYXRpb25NYXRjaGVzKCB0ZkNvbmZpZyApIHtcclxuICAgIHJldHVybiB0aGlzLnRmQ29uZmlnID09PSB0ZkNvbmZpZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm5zIHtUcmFuc2NyaXB0aW9uRmFjdG9yQ29uZmlnfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBnZXRUZkNvbmZpZygpIHtcclxuICAgIHJldHVybiB0aGlzLnRmQ29uZmlnO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnVHJhbnNjcmlwdGlvbkZhY3RvckF0dGFjaG1lbnRTaXRlJywgVHJhbnNjcmlwdGlvbkZhY3RvckF0dGFjaG1lbnRTaXRlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUcmFuc2NyaXB0aW9uRmFjdG9yQXR0YWNobWVudFNpdGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBLE9BQU9BLHdCQUF3QixNQUFNLG1DQUFtQztBQUN4RSxPQUFPQyxjQUFjLE1BQU0scUJBQXFCO0FBRWhELE1BQU1DLGlDQUFpQyxTQUFTRCxjQUFjLENBQUM7RUFFN0Q7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsZUFBZSxFQUFFQyxRQUFRLEVBQUVDLGVBQWUsRUFBRztJQUMvRCxLQUFLLENBQUVILEtBQUssRUFBRUMsZUFBZSxFQUFFRSxlQUFnQixDQUFDOztJQUVoRDtJQUNBLElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxRQUFRLENBQUMsQ0FBQztFQUM1Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLG9CQUFvQkEsQ0FBRUYsUUFBUSxFQUFHO0lBQy9CLE9BQU8sSUFBSSxDQUFDQSxRQUFRLEtBQUtBLFFBQVE7RUFDbkM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osT0FBTyxJQUFJLENBQUNILFFBQVE7RUFDdEI7QUFDRjtBQUVBTix3QkFBd0IsQ0FBQ1UsUUFBUSxDQUFFLG1DQUFtQyxFQUFFUixpQ0FBa0MsQ0FBQztBQUUzRyxlQUFlQSxpQ0FBaUMifQ==