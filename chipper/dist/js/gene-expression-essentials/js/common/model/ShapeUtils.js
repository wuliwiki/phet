// Copyright 2015-2022, University of Colorado Boulder

/**
 * Contains utility  methods for creating different shapes
 *
 * @author John Blanco
 * @author Sharfudeen Ashraf
 * @author Aadish Gupta
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
const ShapeUtils = {
  /**
   * Creates a rounded shape from a set of points. The points must be in an order that, if connected by straight lines,
   * would form a closed shape.
   *
   * @param {Array} points Set of points to connect.
   * @param {Shape} [existingShape]
   * @returns Shape that the provided points define.
   * @public
   */
  createRoundedShapeFromPoints(points, existingShape) {
    const shape = existingShape || new Shape();
    shape.moveToPoint(points[0]);
    let cp1 = Vector2.pool.fetch();
    let cp2 = Vector2.pool.fetch();
    for (let i = 0; i < points.length; i++) {
      const segmentStartPoint = points[i];
      const segmentEndPoint = points[(i + 1) % points.length];
      const previousPoint = points[i - 1 >= 0 ? i - 1 : points.length - 1];
      const nextPoint = points[(i + 2) % points.length];
      cp1 = this.extrapolateControlPoint(previousPoint, segmentStartPoint, segmentEndPoint, cp1);
      cp2 = this.extrapolateControlPoint(nextPoint, segmentEndPoint, segmentStartPoint, cp2);
      shape.cubicCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, segmentEndPoint.x, segmentEndPoint.y);
    }
    cp1.freeToPool();
    cp2.freeToPool();
    return shape.makeImmutable();
  },
  /**
   * Extrapolates a control point given three input points. The resulting control point is for the segment from point y
   * to point z, and the resulting curve would reasonably connect to point x.
   *
   * @param {Object} x - Position where the line is "coming from".
   * @param {Object} y - Beginning of line segment.
   * @param {Object} z - End of line segment.
   * @param {Vector2} cp - control point to be set and returned
   * @returns {Object}
   * @public
   */
  extrapolateControlPoint(x, y, z, cp) {
    const xz_x = 0.25 * (z.x - x.x);
    const xz_y = 0.25 * (z.y - x.y);
    return cp.setXY(y.x + xz_x, y.y + xz_y);
  }
};
geneExpressionEssentials.register('ShapeUtils', ShapeUtils);
export default ShapeUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2hhcGUiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJTaGFwZVV0aWxzIiwiY3JlYXRlUm91bmRlZFNoYXBlRnJvbVBvaW50cyIsInBvaW50cyIsImV4aXN0aW5nU2hhcGUiLCJzaGFwZSIsIm1vdmVUb1BvaW50IiwiY3AxIiwicG9vbCIsImZldGNoIiwiY3AyIiwiaSIsImxlbmd0aCIsInNlZ21lbnRTdGFydFBvaW50Iiwic2VnbWVudEVuZFBvaW50IiwicHJldmlvdXNQb2ludCIsIm5leHRQb2ludCIsImV4dHJhcG9sYXRlQ29udHJvbFBvaW50IiwiY3ViaWNDdXJ2ZVRvIiwieCIsInkiLCJmcmVlVG9Qb29sIiwibWFrZUltbXV0YWJsZSIsInoiLCJjcCIsInh6X3giLCJ4el95Iiwic2V0WFkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNoYXBlVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udGFpbnMgdXRpbGl0eSAgbWV0aG9kcyBmb3IgY3JlYXRpbmcgZGlmZmVyZW50IHNoYXBlc1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWZcclxuICogQGF1dGhvciBBYWRpc2ggR3VwdGFcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5cclxuY29uc3QgU2hhcGVVdGlscyA9IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIHJvdW5kZWQgc2hhcGUgZnJvbSBhIHNldCBvZiBwb2ludHMuIFRoZSBwb2ludHMgbXVzdCBiZSBpbiBhbiBvcmRlciB0aGF0LCBpZiBjb25uZWN0ZWQgYnkgc3RyYWlnaHQgbGluZXMsXHJcbiAgICogd291bGQgZm9ybSBhIGNsb3NlZCBzaGFwZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBvaW50cyBTZXQgb2YgcG9pbnRzIHRvIGNvbm5lY3QuXHJcbiAgICogQHBhcmFtIHtTaGFwZX0gW2V4aXN0aW5nU2hhcGVdXHJcbiAgICogQHJldHVybnMgU2hhcGUgdGhhdCB0aGUgcHJvdmlkZWQgcG9pbnRzIGRlZmluZS5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY3JlYXRlUm91bmRlZFNoYXBlRnJvbVBvaW50cyggcG9pbnRzLCBleGlzdGluZ1NoYXBlICkge1xyXG4gICAgY29uc3Qgc2hhcGUgPSBleGlzdGluZ1NoYXBlIHx8IG5ldyBTaGFwZSgpO1xyXG4gICAgc2hhcGUubW92ZVRvUG9pbnQoIHBvaW50c1sgMCBdICk7XHJcbiAgICBsZXQgY3AxID0gVmVjdG9yMi5wb29sLmZldGNoKCk7XHJcbiAgICBsZXQgY3AyID0gVmVjdG9yMi5wb29sLmZldGNoKCk7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIGNvbnN0IHNlZ21lbnRTdGFydFBvaW50ID0gcG9pbnRzWyBpIF07XHJcbiAgICAgIGNvbnN0IHNlZ21lbnRFbmRQb2ludCA9IHBvaW50c1sgKCBpICsgMSApICUgcG9pbnRzLmxlbmd0aCBdO1xyXG4gICAgICBjb25zdCBwcmV2aW91c1BvaW50ID0gcG9pbnRzWyBpIC0gMSA+PSAwID8gaSAtIDEgOiBwb2ludHMubGVuZ3RoIC0gMSBdO1xyXG4gICAgICBjb25zdCBuZXh0UG9pbnQgPSBwb2ludHNbICggaSArIDIgKSAlIHBvaW50cy5sZW5ndGggXTtcclxuICAgICAgY3AxID0gdGhpcy5leHRyYXBvbGF0ZUNvbnRyb2xQb2ludCggcHJldmlvdXNQb2ludCwgc2VnbWVudFN0YXJ0UG9pbnQsIHNlZ21lbnRFbmRQb2ludCwgY3AxICk7XHJcbiAgICAgIGNwMiA9IHRoaXMuZXh0cmFwb2xhdGVDb250cm9sUG9pbnQoIG5leHRQb2ludCwgc2VnbWVudEVuZFBvaW50LCBzZWdtZW50U3RhcnRQb2ludCwgY3AyICk7XHJcbiAgICAgIHNoYXBlLmN1YmljQ3VydmVUbyggY3AxLngsIGNwMS55LCBjcDIueCwgY3AyLnksIHNlZ21lbnRFbmRQb2ludC54LCBzZWdtZW50RW5kUG9pbnQueSApO1xyXG4gICAgfVxyXG4gICAgY3AxLmZyZWVUb1Bvb2woKTtcclxuICAgIGNwMi5mcmVlVG9Qb29sKCk7XHJcbiAgICByZXR1cm4gc2hhcGUubWFrZUltbXV0YWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEV4dHJhcG9sYXRlcyBhIGNvbnRyb2wgcG9pbnQgZ2l2ZW4gdGhyZWUgaW5wdXQgcG9pbnRzLiBUaGUgcmVzdWx0aW5nIGNvbnRyb2wgcG9pbnQgaXMgZm9yIHRoZSBzZWdtZW50IGZyb20gcG9pbnQgeVxyXG4gICAqIHRvIHBvaW50IHosIGFuZCB0aGUgcmVzdWx0aW5nIGN1cnZlIHdvdWxkIHJlYXNvbmFibHkgY29ubmVjdCB0byBwb2ludCB4LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHggLSBQb3NpdGlvbiB3aGVyZSB0aGUgbGluZSBpcyBcImNvbWluZyBmcm9tXCIuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHkgLSBCZWdpbm5pbmcgb2YgbGluZSBzZWdtZW50LlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB6IC0gRW5kIG9mIGxpbmUgc2VnbWVudC5cclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IGNwIC0gY29udHJvbCBwb2ludCB0byBiZSBzZXQgYW5kIHJldHVybmVkXHJcbiAgICogQHJldHVybnMge09iamVjdH1cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZXh0cmFwb2xhdGVDb250cm9sUG9pbnQoIHgsIHksIHosIGNwICkge1xyXG4gICAgY29uc3QgeHpfeCA9IDAuMjUgKiAoIHoueCAtIHgueCApO1xyXG4gICAgY29uc3QgeHpfeSA9IDAuMjUgKiAoIHoueSAtIHgueSApO1xyXG4gICAgcmV0dXJuICggY3Auc2V0WFkoIHkueCArIHh6X3gsIHkueSArIHh6X3kgKSApO1xyXG4gIH1cclxufTtcclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnU2hhcGVVdGlscycsIFNoYXBlVXRpbHMgKTtcclxuZXhwb3J0IGRlZmF1bHQgU2hhcGVVdGlscztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBRXhFLE1BQU1DLFVBQVUsR0FBRztFQUVqQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsNEJBQTRCQSxDQUFFQyxNQUFNLEVBQUVDLGFBQWEsRUFBRztJQUNwRCxNQUFNQyxLQUFLLEdBQUdELGFBQWEsSUFBSSxJQUFJTCxLQUFLLENBQUMsQ0FBQztJQUMxQ00sS0FBSyxDQUFDQyxXQUFXLENBQUVILE1BQU0sQ0FBRSxDQUFDLENBQUcsQ0FBQztJQUNoQyxJQUFJSSxHQUFHLEdBQUdULE9BQU8sQ0FBQ1UsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUM5QixJQUFJQyxHQUFHLEdBQUdaLE9BQU8sQ0FBQ1UsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUM5QixLQUFNLElBQUlFLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1IsTUFBTSxDQUFDUyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFHO01BQ3hDLE1BQU1FLGlCQUFpQixHQUFHVixNQUFNLENBQUVRLENBQUMsQ0FBRTtNQUNyQyxNQUFNRyxlQUFlLEdBQUdYLE1BQU0sQ0FBRSxDQUFFUSxDQUFDLEdBQUcsQ0FBQyxJQUFLUixNQUFNLENBQUNTLE1BQU0sQ0FBRTtNQUMzRCxNQUFNRyxhQUFhLEdBQUdaLE1BQU0sQ0FBRVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUdBLENBQUMsR0FBRyxDQUFDLEdBQUdSLE1BQU0sQ0FBQ1MsTUFBTSxHQUFHLENBQUMsQ0FBRTtNQUN0RSxNQUFNSSxTQUFTLEdBQUdiLE1BQU0sQ0FBRSxDQUFFUSxDQUFDLEdBQUcsQ0FBQyxJQUFLUixNQUFNLENBQUNTLE1BQU0sQ0FBRTtNQUNyREwsR0FBRyxHQUFHLElBQUksQ0FBQ1UsdUJBQXVCLENBQUVGLGFBQWEsRUFBRUYsaUJBQWlCLEVBQUVDLGVBQWUsRUFBRVAsR0FBSSxDQUFDO01BQzVGRyxHQUFHLEdBQUcsSUFBSSxDQUFDTyx1QkFBdUIsQ0FBRUQsU0FBUyxFQUFFRixlQUFlLEVBQUVELGlCQUFpQixFQUFFSCxHQUFJLENBQUM7TUFDeEZMLEtBQUssQ0FBQ2EsWUFBWSxDQUFFWCxHQUFHLENBQUNZLENBQUMsRUFBRVosR0FBRyxDQUFDYSxDQUFDLEVBQUVWLEdBQUcsQ0FBQ1MsQ0FBQyxFQUFFVCxHQUFHLENBQUNVLENBQUMsRUFBRU4sZUFBZSxDQUFDSyxDQUFDLEVBQUVMLGVBQWUsQ0FBQ00sQ0FBRSxDQUFDO0lBQ3hGO0lBQ0FiLEdBQUcsQ0FBQ2MsVUFBVSxDQUFDLENBQUM7SUFDaEJYLEdBQUcsQ0FBQ1csVUFBVSxDQUFDLENBQUM7SUFDaEIsT0FBT2hCLEtBQUssQ0FBQ2lCLGFBQWEsQ0FBQyxDQUFDO0VBQzlCLENBQUM7RUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VMLHVCQUF1QkEsQ0FBRUUsQ0FBQyxFQUFFQyxDQUFDLEVBQUVHLENBQUMsRUFBRUMsRUFBRSxFQUFHO0lBQ3JDLE1BQU1DLElBQUksR0FBRyxJQUFJLElBQUtGLENBQUMsQ0FBQ0osQ0FBQyxHQUFHQSxDQUFDLENBQUNBLENBQUMsQ0FBRTtJQUNqQyxNQUFNTyxJQUFJLEdBQUcsSUFBSSxJQUFLSCxDQUFDLENBQUNILENBQUMsR0FBR0QsQ0FBQyxDQUFDQyxDQUFDLENBQUU7SUFDakMsT0FBU0ksRUFBRSxDQUFDRyxLQUFLLENBQUVQLENBQUMsQ0FBQ0QsQ0FBQyxHQUFHTSxJQUFJLEVBQUVMLENBQUMsQ0FBQ0EsQ0FBQyxHQUFHTSxJQUFLLENBQUM7RUFDN0M7QUFDRixDQUFDO0FBQ0QxQix3QkFBd0IsQ0FBQzRCLFFBQVEsQ0FBRSxZQUFZLEVBQUUzQixVQUFXLENBQUM7QUFDN0QsZUFBZUEsVUFBVSJ9