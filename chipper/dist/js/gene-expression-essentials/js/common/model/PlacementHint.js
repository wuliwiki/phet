// Copyright 2015-2020, University of Colorado Boulder

/**
 * This class represents a "placement hint" in the model, which is a position where a biomolecule of the provided type
 * can be placed and which will be "hinted" to the user at the appropriate times.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import Property from '../../../../axon/js/Property.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import ShapeChangingModelElement from './ShapeChangingModelElement.js';
class PlacementHint extends ShapeChangingModelElement {
  /**
   * @param {MobileBiomolecule} biomolecule - biomolecule that defines the shape of this hint
   */
  constructor(biomolecule) {
    super(biomolecule.getShape());

    // @public
    this.biomolecule = biomolecule;

    // @public - property that tracks whether or not the hint is should be visible to the user
    this.activeProperty = new Property(false);
  }

  /**
   * @returns {Color}
   * @public
   */
  getBaseColor() {
    return this.biomolecule.colorProperty.get();
  }

  /**
   * Determine whether the given biomolecule matches the one that this hint is meant to represent. In this base class,
   * type alone indicates a match. Subclass if greater specificity is needed.
   *
   * @param {MobileBiomolecule} testBiomolecule
   * @returns {boolean}
   * @public
   */
  isMatchingBiomolecule(testBiomolecule) {
    return testBiomolecule instanceof this.biomolecule.constructor;
  }

  /**
   * If the proffered test biomolecule is of the appropriate type, activate this hint.
   * @param {MobileBiomolecule} testBiomolecule
   * @public
   */
  activateIfMatch(testBiomolecule) {
    if (this.isMatchingBiomolecule(testBiomolecule)) {
      this.activeProperty.set(true);
    }
  }
}
geneExpressionEssentials.register('PlacementHint', PlacementHint);
export default PlacementHint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsImdlbmVFeHByZXNzaW9uRXNzZW50aWFscyIsIlNoYXBlQ2hhbmdpbmdNb2RlbEVsZW1lbnQiLCJQbGFjZW1lbnRIaW50IiwiY29uc3RydWN0b3IiLCJiaW9tb2xlY3VsZSIsImdldFNoYXBlIiwiYWN0aXZlUHJvcGVydHkiLCJnZXRCYXNlQ29sb3IiLCJjb2xvclByb3BlcnR5IiwiZ2V0IiwiaXNNYXRjaGluZ0Jpb21vbGVjdWxlIiwidGVzdEJpb21vbGVjdWxlIiwiYWN0aXZhdGVJZk1hdGNoIiwic2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQbGFjZW1lbnRIaW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFwicGxhY2VtZW50IGhpbnRcIiBpbiB0aGUgbW9kZWwsIHdoaWNoIGlzIGEgcG9zaXRpb24gd2hlcmUgYSBiaW9tb2xlY3VsZSBvZiB0aGUgcHJvdmlkZWQgdHlwZVxyXG4gKiBjYW4gYmUgcGxhY2VkIGFuZCB3aGljaCB3aWxsIGJlIFwiaGludGVkXCIgdG8gdGhlIHVzZXIgYXQgdGhlIGFwcHJvcHJpYXRlIHRpbWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBTaGFwZUNoYW5naW5nTW9kZWxFbGVtZW50IGZyb20gJy4vU2hhcGVDaGFuZ2luZ01vZGVsRWxlbWVudC5qcyc7XHJcblxyXG5jbGFzcyBQbGFjZW1lbnRIaW50IGV4dGVuZHMgU2hhcGVDaGFuZ2luZ01vZGVsRWxlbWVudCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TW9iaWxlQmlvbW9sZWN1bGV9IGJpb21vbGVjdWxlIC0gYmlvbW9sZWN1bGUgdGhhdCBkZWZpbmVzIHRoZSBzaGFwZSBvZiB0aGlzIGhpbnRcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYmlvbW9sZWN1bGUgKSB7XHJcblxyXG4gICAgc3VwZXIoIGJpb21vbGVjdWxlLmdldFNoYXBlKCkgKTtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLmJpb21vbGVjdWxlID0gYmlvbW9sZWN1bGU7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAtIHByb3BlcnR5IHRoYXQgdHJhY2tzIHdoZXRoZXIgb3Igbm90IHRoZSBoaW50IGlzIHNob3VsZCBiZSB2aXNpYmxlIHRvIHRoZSB1c2VyXHJcbiAgICB0aGlzLmFjdGl2ZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBmYWxzZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge0NvbG9yfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBnZXRCYXNlQ29sb3IoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5iaW9tb2xlY3VsZS5jb2xvclByb3BlcnR5LmdldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGdpdmVuIGJpb21vbGVjdWxlIG1hdGNoZXMgdGhlIG9uZSB0aGF0IHRoaXMgaGludCBpcyBtZWFudCB0byByZXByZXNlbnQuIEluIHRoaXMgYmFzZSBjbGFzcyxcclxuICAgKiB0eXBlIGFsb25lIGluZGljYXRlcyBhIG1hdGNoLiBTdWJjbGFzcyBpZiBncmVhdGVyIHNwZWNpZmljaXR5IGlzIG5lZWRlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7TW9iaWxlQmlvbW9sZWN1bGV9IHRlc3RCaW9tb2xlY3VsZVxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBpc01hdGNoaW5nQmlvbW9sZWN1bGUoIHRlc3RCaW9tb2xlY3VsZSApIHtcclxuICAgIHJldHVybiB0ZXN0QmlvbW9sZWN1bGUgaW5zdGFuY2VvZiB0aGlzLmJpb21vbGVjdWxlLmNvbnN0cnVjdG9yO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSWYgdGhlIHByb2ZmZXJlZCB0ZXN0IGJpb21vbGVjdWxlIGlzIG9mIHRoZSBhcHByb3ByaWF0ZSB0eXBlLCBhY3RpdmF0ZSB0aGlzIGhpbnQuXHJcbiAgICogQHBhcmFtIHtNb2JpbGVCaW9tb2xlY3VsZX0gdGVzdEJpb21vbGVjdWxlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGFjdGl2YXRlSWZNYXRjaCggdGVzdEJpb21vbGVjdWxlICkge1xyXG4gICAgaWYgKCB0aGlzLmlzTWF0Y2hpbmdCaW9tb2xlY3VsZSggdGVzdEJpb21vbGVjdWxlICkgKSB7XHJcbiAgICAgIHRoaXMuYWN0aXZlUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdQbGFjZW1lbnRIaW50JywgUGxhY2VtZW50SGludCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGxhY2VtZW50SGludDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBQ3hFLE9BQU9DLHlCQUF5QixNQUFNLGdDQUFnQztBQUV0RSxNQUFNQyxhQUFhLFNBQVNELHlCQUF5QixDQUFDO0VBRXBEO0FBQ0Y7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxXQUFXLEVBQUc7SUFFekIsS0FBSyxDQUFFQSxXQUFXLENBQUNDLFFBQVEsQ0FBQyxDQUFFLENBQUM7O0lBRS9CO0lBQ0EsSUFBSSxDQUFDRCxXQUFXLEdBQUdBLFdBQVc7O0lBRTlCO0lBQ0EsSUFBSSxDQUFDRSxjQUFjLEdBQUcsSUFBSVAsUUFBUSxDQUFFLEtBQU0sQ0FBQztFQUM3Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFUSxZQUFZQSxDQUFBLEVBQUc7SUFDYixPQUFPLElBQUksQ0FBQ0gsV0FBVyxDQUFDSSxhQUFhLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0VBQzdDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMscUJBQXFCQSxDQUFFQyxlQUFlLEVBQUc7SUFDdkMsT0FBT0EsZUFBZSxZQUFZLElBQUksQ0FBQ1AsV0FBVyxDQUFDRCxXQUFXO0VBQ2hFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRVMsZUFBZUEsQ0FBRUQsZUFBZSxFQUFHO0lBQ2pDLElBQUssSUFBSSxDQUFDRCxxQkFBcUIsQ0FBRUMsZUFBZ0IsQ0FBQyxFQUFHO01BQ25ELElBQUksQ0FBQ0wsY0FBYyxDQUFDTyxHQUFHLENBQUUsSUFBSyxDQUFDO0lBQ2pDO0VBQ0Y7QUFDRjtBQUVBYix3QkFBd0IsQ0FBQ2MsUUFBUSxDQUFFLGVBQWUsRUFBRVosYUFBYyxDQUFDO0FBRW5FLGVBQWVBLGFBQWEifQ==