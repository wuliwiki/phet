// Copyright 2015-2020, University of Colorado Boulder

/**
 * This class defines a very specific motion strategy used by a ribosome to follow the translation attachment point of a
 * strand of mRNA.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import MotionStrategy from './MotionStrategy.js';
class RibosomeTranslatingRnaMotionStrategy extends MotionStrategy {
  /**
   * @param ribosome {Ribosome}
   */
  constructor(ribosome) {
    super();
    this.ribosome = ribosome; // @private
    this.messengerRna = ribosome.getMessengerRnaBeingTranslated(); // @private
  }

  /**
   * @override
   * @param {Vector2} currentPosition
   * @param {Bounds2} bounds
   * @param {number} dt
   * @returns {Vector2}
   * @public
   */
  getNextPosition(currentPosition, bounds, dt) {
    const ribosomeAttachmentPoint = this.messengerRna.getRibosomeGenerateInitialPosition3D(this.ribosome);
    return ribosomeAttachmentPoint.minus(this.ribosome.offsetToTranslationChannelEntrance);
  }
}
geneExpressionEssentials.register('RibosomeTranslatingRnaMotionStrategy', RibosomeTranslatingRnaMotionStrategy);
export default RibosomeTranslatingRnaMotionStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJNb3Rpb25TdHJhdGVneSIsIlJpYm9zb21lVHJhbnNsYXRpbmdSbmFNb3Rpb25TdHJhdGVneSIsImNvbnN0cnVjdG9yIiwicmlib3NvbWUiLCJtZXNzZW5nZXJSbmEiLCJnZXRNZXNzZW5nZXJSbmFCZWluZ1RyYW5zbGF0ZWQiLCJnZXROZXh0UG9zaXRpb24iLCJjdXJyZW50UG9zaXRpb24iLCJib3VuZHMiLCJkdCIsInJpYm9zb21lQXR0YWNobWVudFBvaW50IiwiZ2V0Umlib3NvbWVHZW5lcmF0ZUluaXRpYWxQb3NpdGlvbjNEIiwibWludXMiLCJvZmZzZXRUb1RyYW5zbGF0aW9uQ2hhbm5lbEVudHJhbmNlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSaWJvc29tZVRyYW5zbGF0aW5nUm5hTW90aW9uU3RyYXRlZ3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBjbGFzcyBkZWZpbmVzIGEgdmVyeSBzcGVjaWZpYyBtb3Rpb24gc3RyYXRlZ3kgdXNlZCBieSBhIHJpYm9zb21lIHRvIGZvbGxvdyB0aGUgdHJhbnNsYXRpb24gYXR0YWNobWVudCBwb2ludCBvZiBhXHJcbiAqIHN0cmFuZCBvZiBtUk5BLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgTW90aW9uU3RyYXRlZ3kgZnJvbSAnLi9Nb3Rpb25TdHJhdGVneS5qcyc7XHJcblxyXG5jbGFzcyBSaWJvc29tZVRyYW5zbGF0aW5nUm5hTW90aW9uU3RyYXRlZ3kgZXh0ZW5kcyBNb3Rpb25TdHJhdGVneSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSByaWJvc29tZSB7Umlib3NvbWV9XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHJpYm9zb21lICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMucmlib3NvbWUgPSByaWJvc29tZTsgLy8gQHByaXZhdGVcclxuICAgIHRoaXMubWVzc2VuZ2VyUm5hID0gcmlib3NvbWUuZ2V0TWVzc2VuZ2VyUm5hQmVpbmdUcmFuc2xhdGVkKCk7IC8vIEBwcml2YXRlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IGN1cnJlbnRQb3NpdGlvblxyXG4gICAqIEBwYXJhbSB7Qm91bmRzMn0gYm91bmRzXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR0XHJcbiAgICogQHJldHVybnMge1ZlY3RvcjJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldE5leHRQb3NpdGlvbiggY3VycmVudFBvc2l0aW9uLCBib3VuZHMsIGR0ICkge1xyXG4gICAgY29uc3Qgcmlib3NvbWVBdHRhY2htZW50UG9pbnQgPSB0aGlzLm1lc3NlbmdlclJuYS5nZXRSaWJvc29tZUdlbmVyYXRlSW5pdGlhbFBvc2l0aW9uM0QoIHRoaXMucmlib3NvbWUgKTtcclxuICAgIHJldHVybiByaWJvc29tZUF0dGFjaG1lbnRQb2ludC5taW51cyggdGhpcy5yaWJvc29tZS5vZmZzZXRUb1RyYW5zbGF0aW9uQ2hhbm5lbEVudHJhbmNlICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdSaWJvc29tZVRyYW5zbGF0aW5nUm5hTW90aW9uU3RyYXRlZ3knLCBSaWJvc29tZVRyYW5zbGF0aW5nUm5hTW90aW9uU3RyYXRlZ3kgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJpYm9zb21lVHJhbnNsYXRpbmdSbmFNb3Rpb25TdHJhdGVneTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0Esd0JBQXdCLE1BQU0sc0NBQXNDO0FBQzNFLE9BQU9DLGNBQWMsTUFBTSxxQkFBcUI7QUFFaEQsTUFBTUMsb0NBQW9DLFNBQVNELGNBQWMsQ0FBQztFQUVoRTtBQUNGO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsUUFBUSxFQUFHO0lBQ3RCLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQ0MsWUFBWSxHQUFHRCxRQUFRLENBQUNFLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2pFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsZUFBZUEsQ0FBRUMsZUFBZSxFQUFFQyxNQUFNLEVBQUVDLEVBQUUsRUFBRztJQUM3QyxNQUFNQyx1QkFBdUIsR0FBRyxJQUFJLENBQUNOLFlBQVksQ0FBQ08sb0NBQW9DLENBQUUsSUFBSSxDQUFDUixRQUFTLENBQUM7SUFDdkcsT0FBT08sdUJBQXVCLENBQUNFLEtBQUssQ0FBRSxJQUFJLENBQUNULFFBQVEsQ0FBQ1Usa0NBQW1DLENBQUM7RUFDMUY7QUFDRjtBQUVBZCx3QkFBd0IsQ0FBQ2UsUUFBUSxDQUFFLHNDQUFzQyxFQUFFYixvQ0FBcUMsQ0FBQztBQUVqSCxlQUFlQSxvQ0FBb0MifQ==