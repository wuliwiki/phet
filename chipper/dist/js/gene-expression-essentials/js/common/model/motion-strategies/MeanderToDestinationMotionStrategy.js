// Copyright 2015-2020, University of Colorado Boulder

/**
 * Motion strategy that moves towards a destination, but it wanders (or "meanders") a bit on the way to look less
 * directed and, hopefully, more natural.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import Vector3 from '../../../../../dot/js/Vector3.js';
import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import MotionStrategy from './MotionStrategy.js';
import MoveDirectlyToDestinationMotionStrategy from './MoveDirectlyToDestinationMotionStrategy.js';
import RandomWalkMotionStrategy from './RandomWalkMotionStrategy.js';
class MeanderToDestinationMotionStrategy extends MotionStrategy {
  /**
   * @param  {Property} destinationProperty
   * @param {Property} motionBoundsProperty
   * @param {Vector2} destinationOffset
   */
  constructor(destinationProperty, motionBoundsProperty, destinationOffset) {
    super();

    // @private
    this.randomWalkMotionStrategy = new RandomWalkMotionStrategy(motionBoundsProperty);
    this.directToDestinationMotionStrategy = new MoveDirectlyToDestinationMotionStrategy(destinationProperty, motionBoundsProperty, destinationOffset, 750);
    this.destinationProperty = destinationProperty;
  }

  /**
   * override
   * @public
   */
  dispose() {
    this.randomWalkMotionStrategy.dispose();
    this.directToDestinationMotionStrategy.dispose();
  }

  /**
   * @override
   * @param {Vector2} currentPosition
   * @param {Bounds2} bounds
   * @param {number} dt
   * @returns {Vector2}
   * @public
   */
  getNextPosition(currentPosition, bounds, dt) {
    const nextPosition3D = this.getNextPosition3D(new Vector3(currentPosition.x, currentPosition.y, 0), bounds, dt);
    return new Vector2(nextPosition3D.x, nextPosition3D.y);
  }

  /**
   * @override
   * @param {Vector2} currentPosition
   * @param {Bounds2} bounds
   * @param {number} dt
   * @returns {Vector3}
   * @public
   */
  getNextPosition3D(currentPosition, bounds, dt) {
    // If the destination in within the shape, go straight to it.
    if (bounds.containsPoint(this.destinationProperty.get())) {
      // Move directly towards the destination with no randomness.
      return this.directToDestinationMotionStrategy.getNextPosition3D(currentPosition, bounds, dt);
    } else {
      // Use a combination of the random and linear motion.
      const intermediatePosition = this.randomWalkMotionStrategy.getNextPosition3D(currentPosition, bounds, dt * 0.6);
      return this.directToDestinationMotionStrategy.getNextPosition3D(intermediatePosition, bounds, dt * 0.4);
    }
  }
}
geneExpressionEssentials.register('MeanderToDestinationMotionStrategy', MeanderToDestinationMotionStrategy);
export default MeanderToDestinationMotionStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiVmVjdG9yMyIsImdlbmVFeHByZXNzaW9uRXNzZW50aWFscyIsIk1vdGlvblN0cmF0ZWd5IiwiTW92ZURpcmVjdGx5VG9EZXN0aW5hdGlvbk1vdGlvblN0cmF0ZWd5IiwiUmFuZG9tV2Fsa01vdGlvblN0cmF0ZWd5IiwiTWVhbmRlclRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneSIsImNvbnN0cnVjdG9yIiwiZGVzdGluYXRpb25Qcm9wZXJ0eSIsIm1vdGlvbkJvdW5kc1Byb3BlcnR5IiwiZGVzdGluYXRpb25PZmZzZXQiLCJyYW5kb21XYWxrTW90aW9uU3RyYXRlZ3kiLCJkaXJlY3RUb0Rlc3RpbmF0aW9uTW90aW9uU3RyYXRlZ3kiLCJkaXNwb3NlIiwiZ2V0TmV4dFBvc2l0aW9uIiwiY3VycmVudFBvc2l0aW9uIiwiYm91bmRzIiwiZHQiLCJuZXh0UG9zaXRpb24zRCIsImdldE5leHRQb3NpdGlvbjNEIiwieCIsInkiLCJjb250YWluc1BvaW50IiwiZ2V0IiwiaW50ZXJtZWRpYXRlUG9zaXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1lYW5kZXJUb0Rlc3RpbmF0aW9uTW90aW9uU3RyYXRlZ3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW90aW9uIHN0cmF0ZWd5IHRoYXQgbW92ZXMgdG93YXJkcyBhIGRlc3RpbmF0aW9uLCBidXQgaXQgd2FuZGVycyAob3IgXCJtZWFuZGVyc1wiKSBhIGJpdCBvbiB0aGUgd2F5IHRvIGxvb2sgbGVzc1xyXG4gKiBkaXJlY3RlZCBhbmQsIGhvcGVmdWxseSwgbW9yZSBuYXR1cmFsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMyBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMy5qcyc7XHJcbmltcG9ydCBnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMgZnJvbSAnLi4vLi4vLi4vZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLmpzJztcclxuaW1wb3J0IE1vdGlvblN0cmF0ZWd5IGZyb20gJy4vTW90aW9uU3RyYXRlZ3kuanMnO1xyXG5pbXBvcnQgTW92ZURpcmVjdGx5VG9EZXN0aW5hdGlvbk1vdGlvblN0cmF0ZWd5IGZyb20gJy4vTW92ZURpcmVjdGx5VG9EZXN0aW5hdGlvbk1vdGlvblN0cmF0ZWd5LmpzJztcclxuaW1wb3J0IFJhbmRvbVdhbGtNb3Rpb25TdHJhdGVneSBmcm9tICcuL1JhbmRvbVdhbGtNb3Rpb25TdHJhdGVneS5qcyc7XHJcblxyXG5jbGFzcyBNZWFuZGVyVG9EZXN0aW5hdGlvbk1vdGlvblN0cmF0ZWd5IGV4dGVuZHMgTW90aW9uU3RyYXRlZ3kge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gIHtQcm9wZXJ0eX0gZGVzdGluYXRpb25Qcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHl9IG1vdGlvbkJvdW5kc1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBkZXN0aW5hdGlvbk9mZnNldFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBkZXN0aW5hdGlvblByb3BlcnR5LCBtb3Rpb25Cb3VuZHNQcm9wZXJ0eSwgZGVzdGluYXRpb25PZmZzZXQgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLnJhbmRvbVdhbGtNb3Rpb25TdHJhdGVneSA9IG5ldyBSYW5kb21XYWxrTW90aW9uU3RyYXRlZ3koIG1vdGlvbkJvdW5kc1Byb3BlcnR5ICk7XHJcbiAgICB0aGlzLmRpcmVjdFRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneSA9IG5ldyBNb3ZlRGlyZWN0bHlUb0Rlc3RpbmF0aW9uTW90aW9uU3RyYXRlZ3koXHJcbiAgICAgIGRlc3RpbmF0aW9uUHJvcGVydHksXHJcbiAgICAgIG1vdGlvbkJvdW5kc1Byb3BlcnR5LFxyXG4gICAgICBkZXN0aW5hdGlvbk9mZnNldCxcclxuICAgICAgNzUwXHJcbiAgICApO1xyXG4gICAgdGhpcy5kZXN0aW5hdGlvblByb3BlcnR5ID0gZGVzdGluYXRpb25Qcm9wZXJ0eTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG92ZXJyaWRlXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnJhbmRvbVdhbGtNb3Rpb25TdHJhdGVneS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmRpcmVjdFRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneS5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IGN1cnJlbnRQb3NpdGlvblxyXG4gICAqIEBwYXJhbSB7Qm91bmRzMn0gYm91bmRzXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR0XHJcbiAgICogQHJldHVybnMge1ZlY3RvcjJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldE5leHRQb3NpdGlvbiggY3VycmVudFBvc2l0aW9uLCBib3VuZHMsIGR0ICkge1xyXG4gICAgY29uc3QgbmV4dFBvc2l0aW9uM0QgPSB0aGlzLmdldE5leHRQb3NpdGlvbjNEKCBuZXcgVmVjdG9yMyggY3VycmVudFBvc2l0aW9uLngsIGN1cnJlbnRQb3NpdGlvbi55LCAwICksIGJvdW5kcywgZHQgKTtcclxuICAgIHJldHVybiBuZXcgVmVjdG9yMiggbmV4dFBvc2l0aW9uM0QueCwgbmV4dFBvc2l0aW9uM0QueSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBjdXJyZW50UG9zaXRpb25cclxuICAgKiBAcGFyYW0ge0JvdW5kczJ9IGJvdW5kc1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdFxyXG4gICAqIEByZXR1cm5zIHtWZWN0b3IzfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBnZXROZXh0UG9zaXRpb24zRCggY3VycmVudFBvc2l0aW9uLCBib3VuZHMsIGR0ICkge1xyXG5cclxuICAgIC8vIElmIHRoZSBkZXN0aW5hdGlvbiBpbiB3aXRoaW4gdGhlIHNoYXBlLCBnbyBzdHJhaWdodCB0byBpdC5cclxuICAgIGlmICggYm91bmRzLmNvbnRhaW5zUG9pbnQoIHRoaXMuZGVzdGluYXRpb25Qcm9wZXJ0eS5nZXQoKSApICkge1xyXG5cclxuICAgICAgLy8gTW92ZSBkaXJlY3RseSB0b3dhcmRzIHRoZSBkZXN0aW5hdGlvbiB3aXRoIG5vIHJhbmRvbW5lc3MuXHJcbiAgICAgIHJldHVybiB0aGlzLmRpcmVjdFRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneS5nZXROZXh0UG9zaXRpb24zRCggY3VycmVudFBvc2l0aW9uLCBib3VuZHMsIGR0ICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuXHJcbiAgICAgIC8vIFVzZSBhIGNvbWJpbmF0aW9uIG9mIHRoZSByYW5kb20gYW5kIGxpbmVhciBtb3Rpb24uXHJcbiAgICAgIGNvbnN0IGludGVybWVkaWF0ZVBvc2l0aW9uID0gdGhpcy5yYW5kb21XYWxrTW90aW9uU3RyYXRlZ3kuZ2V0TmV4dFBvc2l0aW9uM0QoIGN1cnJlbnRQb3NpdGlvbiwgYm91bmRzLCBkdCAqIDAuNiApO1xyXG4gICAgICByZXR1cm4gdGhpcy5kaXJlY3RUb0Rlc3RpbmF0aW9uTW90aW9uU3RyYXRlZ3kuZ2V0TmV4dFBvc2l0aW9uM0QoIGludGVybWVkaWF0ZVBvc2l0aW9uLCBib3VuZHMsIGR0ICogMC40ICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdNZWFuZGVyVG9EZXN0aW5hdGlvbk1vdGlvblN0cmF0ZWd5JywgTWVhbmRlclRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWVhbmRlclRvRGVzdGluYXRpb25Nb3Rpb25TdHJhdGVneTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsT0FBT0MsT0FBTyxNQUFNLGtDQUFrQztBQUN0RCxPQUFPQyx3QkFBd0IsTUFBTSxzQ0FBc0M7QUFDM0UsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjtBQUNoRCxPQUFPQyx1Q0FBdUMsTUFBTSw4Q0FBOEM7QUFDbEcsT0FBT0Msd0JBQXdCLE1BQU0sK0JBQStCO0FBRXBFLE1BQU1DLGtDQUFrQyxTQUFTSCxjQUFjLENBQUM7RUFFOUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxtQkFBbUIsRUFBRUMsb0JBQW9CLEVBQUVDLGlCQUFpQixFQUFHO0lBQzFFLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDQyx3QkFBd0IsR0FBRyxJQUFJTix3QkFBd0IsQ0FBRUksb0JBQXFCLENBQUM7SUFDcEYsSUFBSSxDQUFDRyxpQ0FBaUMsR0FBRyxJQUFJUix1Q0FBdUMsQ0FDbEZJLG1CQUFtQixFQUNuQkMsb0JBQW9CLEVBQ3BCQyxpQkFBaUIsRUFDakIsR0FDRixDQUFDO0lBQ0QsSUFBSSxDQUFDRixtQkFBbUIsR0FBR0EsbUJBQW1CO0VBQ2hEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VLLE9BQU9BLENBQUEsRUFBRztJQUNSLElBQUksQ0FBQ0Ysd0JBQXdCLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLElBQUksQ0FBQ0QsaUNBQWlDLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2xEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsZUFBZUEsQ0FBRUMsZUFBZSxFQUFFQyxNQUFNLEVBQUVDLEVBQUUsRUFBRztJQUM3QyxNQUFNQyxjQUFjLEdBQUcsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBRSxJQUFJbEIsT0FBTyxDQUFFYyxlQUFlLENBQUNLLENBQUMsRUFBRUwsZUFBZSxDQUFDTSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEVBQUVMLE1BQU0sRUFBRUMsRUFBRyxDQUFDO0lBQ25ILE9BQU8sSUFBSWpCLE9BQU8sQ0FBRWtCLGNBQWMsQ0FBQ0UsQ0FBQyxFQUFFRixjQUFjLENBQUNHLENBQUUsQ0FBQztFQUMxRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VGLGlCQUFpQkEsQ0FBRUosZUFBZSxFQUFFQyxNQUFNLEVBQUVDLEVBQUUsRUFBRztJQUUvQztJQUNBLElBQUtELE1BQU0sQ0FBQ00sYUFBYSxDQUFFLElBQUksQ0FBQ2QsbUJBQW1CLENBQUNlLEdBQUcsQ0FBQyxDQUFFLENBQUMsRUFBRztNQUU1RDtNQUNBLE9BQU8sSUFBSSxDQUFDWCxpQ0FBaUMsQ0FBQ08saUJBQWlCLENBQUVKLGVBQWUsRUFBRUMsTUFBTSxFQUFFQyxFQUFHLENBQUM7SUFDaEcsQ0FBQyxNQUNJO01BRUg7TUFDQSxNQUFNTyxvQkFBb0IsR0FBRyxJQUFJLENBQUNiLHdCQUF3QixDQUFDUSxpQkFBaUIsQ0FBRUosZUFBZSxFQUFFQyxNQUFNLEVBQUVDLEVBQUUsR0FBRyxHQUFJLENBQUM7TUFDakgsT0FBTyxJQUFJLENBQUNMLGlDQUFpQyxDQUFDTyxpQkFBaUIsQ0FBRUssb0JBQW9CLEVBQUVSLE1BQU0sRUFBRUMsRUFBRSxHQUFHLEdBQUksQ0FBQztJQUMzRztFQUNGO0FBQ0Y7QUFFQWYsd0JBQXdCLENBQUN1QixRQUFRLENBQUUsb0NBQW9DLEVBQUVuQixrQ0FBbUMsQ0FBQztBQUU3RyxlQUFlQSxrQ0FBa0MifQ==