// Copyright 2015-2020, University of Colorado Boulder

/**
 * This class defines a very specific motion strategy used by an mRNA destroyer to follow the attachment point of a
 * strand of mRNA.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import geneExpressionEssentials from '../../../geneExpressionEssentials.js';
import MotionStrategy from './MotionStrategy.js';
class DestroyerTrackingRnaMotionStrategy extends MotionStrategy {
  /**
   * @param messengerRnaDestroyer {MessengerRnaDestroyer}
   */
  constructor(messengerRnaDestroyer) {
    super();
    this.messengerRna = messengerRnaDestroyer.getMessengerRnaBeingDestroyed(); //@private
  }

  /**
   * @override
   * @param {Vector2} currentPosition
   * @param {Bounds2} bounds
   * @param {number} dt
   * @returns {Vector2}
   * @public
   */
  getNextPosition(currentPosition, bounds, dt) {
    const generateInitialPosition3D = this.messengerRna.getDestroyerGenerateInitialPosition3D();
    return new Vector2(generateInitialPosition3D.x, generateInitialPosition3D.y);
  }
}
geneExpressionEssentials.register('DestroyerTrackingRnaMotionStrategy', DestroyerTrackingRnaMotionStrategy);
export default DestroyerTrackingRnaMotionStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIiwiTW90aW9uU3RyYXRlZ3kiLCJEZXN0cm95ZXJUcmFja2luZ1JuYU1vdGlvblN0cmF0ZWd5IiwiY29uc3RydWN0b3IiLCJtZXNzZW5nZXJSbmFEZXN0cm95ZXIiLCJtZXNzZW5nZXJSbmEiLCJnZXRNZXNzZW5nZXJSbmFCZWluZ0Rlc3Ryb3llZCIsImdldE5leHRQb3NpdGlvbiIsImN1cnJlbnRQb3NpdGlvbiIsImJvdW5kcyIsImR0IiwiZ2VuZXJhdGVJbml0aWFsUG9zaXRpb24zRCIsImdldERlc3Ryb3llckdlbmVyYXRlSW5pdGlhbFBvc2l0aW9uM0QiLCJ4IiwieSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGVzdHJveWVyVHJhY2tpbmdSbmFNb3Rpb25TdHJhdGVneS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGRlZmluZXMgYSB2ZXJ5IHNwZWNpZmljIG1vdGlvbiBzdHJhdGVneSB1c2VkIGJ5IGFuIG1STkEgZGVzdHJveWVyIHRvIGZvbGxvdyB0aGUgYXR0YWNobWVudCBwb2ludCBvZiBhXHJcbiAqIHN0cmFuZCBvZiBtUk5BLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBNb3Rpb25TdHJhdGVneSBmcm9tICcuL01vdGlvblN0cmF0ZWd5LmpzJztcclxuXHJcbmNsYXNzIERlc3Ryb3llclRyYWNraW5nUm5hTW90aW9uU3RyYXRlZ3kgZXh0ZW5kcyBNb3Rpb25TdHJhdGVneSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBtZXNzZW5nZXJSbmFEZXN0cm95ZXIge01lc3NlbmdlclJuYURlc3Ryb3llcn1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbWVzc2VuZ2VyUm5hRGVzdHJveWVyICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMubWVzc2VuZ2VyUm5hID0gbWVzc2VuZ2VyUm5hRGVzdHJveWVyLmdldE1lc3NlbmdlclJuYUJlaW5nRGVzdHJveWVkKCk7IC8vQHByaXZhdGVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gY3VycmVudFBvc2l0aW9uXHJcbiAgICogQHBhcmFtIHtCb3VuZHMyfSBib3VuZHNcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHRcclxuICAgKiBAcmV0dXJucyB7VmVjdG9yMn1cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZ2V0TmV4dFBvc2l0aW9uKCBjdXJyZW50UG9zaXRpb24sIGJvdW5kcywgZHQgKSB7XHJcbiAgICBjb25zdCBnZW5lcmF0ZUluaXRpYWxQb3NpdGlvbjNEID0gdGhpcy5tZXNzZW5nZXJSbmEuZ2V0RGVzdHJveWVyR2VuZXJhdGVJbml0aWFsUG9zaXRpb24zRCgpO1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKCBnZW5lcmF0ZUluaXRpYWxQb3NpdGlvbjNELngsIGdlbmVyYXRlSW5pdGlhbFBvc2l0aW9uM0QueSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnRGVzdHJveWVyVHJhY2tpbmdSbmFNb3Rpb25TdHJhdGVneScsIERlc3Ryb3llclRyYWNraW5nUm5hTW90aW9uU3RyYXRlZ3kgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERlc3Ryb3llclRyYWNraW5nUm5hTW90aW9uU3RyYXRlZ3k7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsT0FBT0Msd0JBQXdCLE1BQU0sc0NBQXNDO0FBQzNFLE9BQU9DLGNBQWMsTUFBTSxxQkFBcUI7QUFFaEQsTUFBTUMsa0NBQWtDLFNBQVNELGNBQWMsQ0FBQztFQUU5RDtBQUNGO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMscUJBQXFCLEVBQUc7SUFDbkMsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNDLFlBQVksR0FBR0QscUJBQXFCLENBQUNFLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsZUFBZUEsQ0FBRUMsZUFBZSxFQUFFQyxNQUFNLEVBQUVDLEVBQUUsRUFBRztJQUM3QyxNQUFNQyx5QkFBeUIsR0FBRyxJQUFJLENBQUNOLFlBQVksQ0FBQ08scUNBQXFDLENBQUMsQ0FBQztJQUMzRixPQUFPLElBQUliLE9BQU8sQ0FBRVkseUJBQXlCLENBQUNFLENBQUMsRUFBRUYseUJBQXlCLENBQUNHLENBQUUsQ0FBQztFQUNoRjtBQUNGO0FBRUFkLHdCQUF3QixDQUFDZSxRQUFRLENBQUUsb0NBQW9DLEVBQUViLGtDQUFtQyxDQUFDO0FBRTdHLGVBQWVBLGtDQUFrQyJ9