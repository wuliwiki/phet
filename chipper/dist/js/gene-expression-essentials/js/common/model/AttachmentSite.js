// Copyright 2015-2020, University of Colorado Boulder

/**
 * An attachment site is a single point in model space to which a biomolecule may attach. Typically, one biomolecule
 * (e.g. a DnaMolecule) owns the attachment site, so if the biomolecule that owns it moves, the attachment site should
 * move with it.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Property from '../../../../axon/js/Property.js';
import Range from '../../../../dot/js/Range.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';

// constants
const ATTACHED_THRESHOLD = 10; // Threshold used to decide whether or not a biomolecule is attached, in picometers.

class AttachmentSite {
  /**
   * @param {Object} owner - the molecule upon which this attachment site exists
   * @param {Vector2} initialPosition
   * @param {number} initialAffinity
   */
  constructor(owner, initialPosition, initialAffinity) {
    // @public (read-only) {Object}
    this.owner = owner;

    // @public {Property.<Vector2> - position of this attachment site - it is a property so that it can be followed in
    // the event that the biomolecule upon which it exists is moving
    this.positionProperty = new Property(initialPosition);

    // @public {Property.<MobileBiomolecule>} - a property that tracks which if any biomolecule is attached to or moving
    // towards attachment with this site
    this.attachedOrAttachingMoleculeProperty = new Property(null);

    // @public {NumberProperty} - affinity of the attachment site, meaning how strongly things attach
    this.affinityProperty = new NumberProperty(initialAffinity, {
      range: new Range(0.0, 1.0)
    });
  }

  /**
   * Return the affinity of attachment site
   * @returns {number}
   * @public
   */
  getAffinity() {
    return this.affinityProperty.get();
  }

  /**
   * Indicates whether or not a biomolecules is currently attached to this site.
   * @returns {boolean} - true if a biomolecule is fully attached, false if not.  If a molecule is on its way but not
   * yet at the site, false is returned.
   * @public
   */
  isMoleculeAttached() {
    return this.attachedOrAttachingMoleculeProperty.get() !== null && this.positionProperty.get().distance(this.attachedOrAttachingMoleculeProperty.get().getPosition()) < ATTACHED_THRESHOLD;
  }

  /**
   * @param {AttachmentSite} obj
   * @returns {boolean}
   * @public
   */
  equals(obj) {
    if (this === obj) {
      return true;
    }
    if (!(obj instanceof AttachmentSite)) {
      return false;
    }
    const otherAttachmentSite = obj;
    return this.affinityProperty.get() === otherAttachmentSite.affinityProperty.get() && this.positionProperty.get().equals(otherAttachmentSite.positionProperty.get());
  }
}
geneExpressionEssentials.register('AttachmentSite', AttachmentSite);
export default AttachmentSite;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlByb3BlcnR5IiwiUmFuZ2UiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJBVFRBQ0hFRF9USFJFU0hPTEQiLCJBdHRhY2htZW50U2l0ZSIsImNvbnN0cnVjdG9yIiwib3duZXIiLCJpbml0aWFsUG9zaXRpb24iLCJpbml0aWFsQWZmaW5pdHkiLCJwb3NpdGlvblByb3BlcnR5IiwiYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlUHJvcGVydHkiLCJhZmZpbml0eVByb3BlcnR5IiwicmFuZ2UiLCJnZXRBZmZpbml0eSIsImdldCIsImlzTW9sZWN1bGVBdHRhY2hlZCIsImRpc3RhbmNlIiwiZ2V0UG9zaXRpb24iLCJlcXVhbHMiLCJvYmoiLCJvdGhlckF0dGFjaG1lbnRTaXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBdHRhY2htZW50U2l0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBbiBhdHRhY2htZW50IHNpdGUgaXMgYSBzaW5nbGUgcG9pbnQgaW4gbW9kZWwgc3BhY2UgdG8gd2hpY2ggYSBiaW9tb2xlY3VsZSBtYXkgYXR0YWNoLiBUeXBpY2FsbHksIG9uZSBiaW9tb2xlY3VsZVxyXG4gKiAoZS5nLiBhIERuYU1vbGVjdWxlKSBvd25zIHRoZSBhdHRhY2htZW50IHNpdGUsIHNvIGlmIHRoZSBiaW9tb2xlY3VsZSB0aGF0IG93bnMgaXQgbW92ZXMsIHRoZSBhdHRhY2htZW50IHNpdGUgc2hvdWxkXHJcbiAqIG1vdmUgd2l0aCBpdC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIE1vaGFtZWQgU2FmaVxyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEFUVEFDSEVEX1RIUkVTSE9MRCA9IDEwOyAvLyBUaHJlc2hvbGQgdXNlZCB0byBkZWNpZGUgd2hldGhlciBvciBub3QgYSBiaW9tb2xlY3VsZSBpcyBhdHRhY2hlZCwgaW4gcGljb21ldGVycy5cclxuXHJcbmNsYXNzIEF0dGFjaG1lbnRTaXRlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG93bmVyIC0gdGhlIG1vbGVjdWxlIHVwb24gd2hpY2ggdGhpcyBhdHRhY2htZW50IHNpdGUgZXhpc3RzXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBpbml0aWFsUG9zaXRpb25cclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5pdGlhbEFmZmluaXR5XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG93bmVyLCBpbml0aWFsUG9zaXRpb24sIGluaXRpYWxBZmZpbml0eSApIHtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtPYmplY3R9XHJcbiAgICB0aGlzLm93bmVyID0gb3duZXI7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPFZlY3RvcjI+IC0gcG9zaXRpb24gb2YgdGhpcyBhdHRhY2htZW50IHNpdGUgLSBpdCBpcyBhIHByb3BlcnR5IHNvIHRoYXQgaXQgY2FuIGJlIGZvbGxvd2VkIGluXHJcbiAgICAvLyB0aGUgZXZlbnQgdGhhdCB0aGUgYmlvbW9sZWN1bGUgdXBvbiB3aGljaCBpdCBleGlzdHMgaXMgbW92aW5nXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGluaXRpYWxQb3NpdGlvbiApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5LjxNb2JpbGVCaW9tb2xlY3VsZT59IC0gYSBwcm9wZXJ0eSB0aGF0IHRyYWNrcyB3aGljaCBpZiBhbnkgYmlvbW9sZWN1bGUgaXMgYXR0YWNoZWQgdG8gb3IgbW92aW5nXHJcbiAgICAvLyB0b3dhcmRzIGF0dGFjaG1lbnQgd2l0aCB0aGlzIHNpdGVcclxuICAgIHRoaXMuYXR0YWNoZWRPckF0dGFjaGluZ01vbGVjdWxlUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIG51bGwgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtOdW1iZXJQcm9wZXJ0eX0gLSBhZmZpbml0eSBvZiB0aGUgYXR0YWNobWVudCBzaXRlLCBtZWFuaW5nIGhvdyBzdHJvbmdseSB0aGluZ3MgYXR0YWNoXHJcbiAgICB0aGlzLmFmZmluaXR5UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIGluaXRpYWxBZmZpbml0eSwgeyByYW5nZTogbmV3IFJhbmdlKCAwLjAsIDEuMCApIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybiB0aGUgYWZmaW5pdHkgb2YgYXR0YWNobWVudCBzaXRlXHJcbiAgICogQHJldHVybnMge251bWJlcn1cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZ2V0QWZmaW5pdHkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5hZmZpbml0eVByb3BlcnR5LmdldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IGEgYmlvbW9sZWN1bGVzIGlzIGN1cnJlbnRseSBhdHRhY2hlZCB0byB0aGlzIHNpdGUuXHJcbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gdHJ1ZSBpZiBhIGJpb21vbGVjdWxlIGlzIGZ1bGx5IGF0dGFjaGVkLCBmYWxzZSBpZiBub3QuICBJZiBhIG1vbGVjdWxlIGlzIG9uIGl0cyB3YXkgYnV0IG5vdFxyXG4gICAqIHlldCBhdCB0aGUgc2l0ZSwgZmFsc2UgaXMgcmV0dXJuZWQuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGlzTW9sZWN1bGVBdHRhY2hlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLmF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5LmdldCgpICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LmdldCgpLmRpc3RhbmNlKCB0aGlzLmF0dGFjaGVkT3JBdHRhY2hpbmdNb2xlY3VsZVByb3BlcnR5LmdldCgpLmdldFBvc2l0aW9uKCkgKSA8IEFUVEFDSEVEX1RIUkVTSE9MRDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QXR0YWNobWVudFNpdGV9IG9ialxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBlcXVhbHMoIG9iaiApIHtcclxuICAgIGlmICggdGhpcyA9PT0gb2JqICkgeyByZXR1cm4gdHJ1ZTsgfVxyXG5cclxuICAgIGlmICggISggb2JqIGluc3RhbmNlb2YgQXR0YWNobWVudFNpdGUgKSApIHsgcmV0dXJuIGZhbHNlOyB9XHJcblxyXG4gICAgY29uc3Qgb3RoZXJBdHRhY2htZW50U2l0ZSA9IG9iajtcclxuXHJcbiAgICByZXR1cm4gKCB0aGlzLmFmZmluaXR5UHJvcGVydHkuZ2V0KCkgPT09IG90aGVyQXR0YWNobWVudFNpdGUuYWZmaW5pdHlQcm9wZXJ0eS5nZXQoKSApICYmXHJcbiAgICAgICAgICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LmdldCgpLmVxdWFscyggb3RoZXJBdHRhY2htZW50U2l0ZS5wb3NpdGlvblByb3BlcnR5LmdldCgpICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdBdHRhY2htZW50U2l0ZScsIEF0dGFjaG1l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