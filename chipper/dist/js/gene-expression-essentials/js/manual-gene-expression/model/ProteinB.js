// Copyright 2015-2022, University of Colorado Boulder

/**
 * Specific instance of protein
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Color } from '../../../../scenery/js/imports.js';
import Protein from '../../common/model/Protein.js';
import StubGeneExpressionModel from '../../common/model/StubGeneExpressionModel.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';

// constants
const BASE_COLOR = new Color(255, 99, 71);
const FULL_GROWN_WIDTH = 450;
class ProteinB extends Protein {
  /**
   * @param {GeneExpressionModel} model
   */
  constructor(model) {
    model = model || new StubGeneExpressionModel();
    super(model, createShape(0), BASE_COLOR);
  }

  /**
   * @override
   * @returns {ProteinB}
   * @public
   */
  createInstance() {
    return new ProteinB(this.model);
  }

  /**
   * @override
   * @param {number} growthFactor
   * @returns {Shape}
   * @protected
   */
  getScaledShape(growthFactor) {
    return this.createShape(growthFactor);
  }

  /**
   * @override
   * @param {Vector2} attachmentPointPosition
   * @public
   */
  setAttachmentPointPosition(attachmentPointPosition) {
    // Note: This is specific to this protein's shape, and will need to be adjusted if the protein's shape algorithm
    // changes.
    this.setAttachmentPointPositionXY(attachmentPointPosition.x, attachmentPointPosition.y);
  }

  /**
   * @param {number} attachmentPointPositionX
   * @param {number} attachmentPointPositionY
   * @private
   */
  setAttachmentPointPositionXY(attachmentPointPositionX, attachmentPointPositionY) {
    // Note: This is specific to this protein's shape, and will need to be adjusted if the protein's shape algorithm
    // changes.
    this.setPosition(new Vector2(attachmentPointPositionX + FULL_GROWN_WIDTH * 0.12 * this.getFullSizeProportion(), attachmentPointPositionY + FULL_GROWN_WIDTH * 0.45 * this.getFullSizeProportion()));
  }

  /**
   * @param {number} growthFactor
   * @returns {Shape}
   * @private
   */
  createShape(growthFactor) {
    return createShape(growthFactor);
  }
}
const createShape = growthFactor => {
  const currentWidth = Utils.clamp(growthFactor, 0.01, 1) * FULL_GROWN_WIDTH;
  const path = new Shape();
  const vector = new Vector2(-currentWidth / 2, 0);
  path.moveTo(vector.x, vector.y);
  for (let i = 0; i < 6; i++) {
    vector.rotate(Math.PI / 3);
    path.lineTo(vector.x, vector.y);
  }
  path.close();
  return path;
};
geneExpressionEssentials.register('ProteinB', ProteinB);
export default ProteinB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJTaGFwZSIsIkNvbG9yIiwiUHJvdGVpbiIsIlN0dWJHZW5lRXhwcmVzc2lvbk1vZGVsIiwiZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIiwiQkFTRV9DT0xPUiIsIkZVTExfR1JPV05fV0lEVEgiLCJQcm90ZWluQiIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJjcmVhdGVTaGFwZSIsImNyZWF0ZUluc3RhbmNlIiwiZ2V0U2NhbGVkU2hhcGUiLCJncm93dGhGYWN0b3IiLCJzZXRBdHRhY2htZW50UG9pbnRQb3NpdGlvbiIsImF0dGFjaG1lbnRQb2ludFBvc2l0aW9uIiwic2V0QXR0YWNobWVudFBvaW50UG9zaXRpb25YWSIsIngiLCJ5IiwiYXR0YWNobWVudFBvaW50UG9zaXRpb25YIiwiYXR0YWNobWVudFBvaW50UG9zaXRpb25ZIiwic2V0UG9zaXRpb24iLCJnZXRGdWxsU2l6ZVByb3BvcnRpb24iLCJjdXJyZW50V2lkdGgiLCJjbGFtcCIsInBhdGgiLCJ2ZWN0b3IiLCJtb3ZlVG8iLCJpIiwicm90YXRlIiwiTWF0aCIsIlBJIiwibGluZVRvIiwiY2xvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByb3RlaW5CLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNwZWNpZmljIGluc3RhbmNlIG9mIHByb3RlaW5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIE1vaGFtZWQgU2FmaVxyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUHJvdGVpbiBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUHJvdGVpbi5qcyc7XHJcbmltcG9ydCBTdHViR2VuZUV4cHJlc3Npb25Nb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU3R1YkdlbmVFeHByZXNzaW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQkFTRV9DT0xPUiA9IG5ldyBDb2xvciggMjU1LCA5OSwgNzEgKTtcclxuY29uc3QgRlVMTF9HUk9XTl9XSURUSCA9IDQ1MDtcclxuXHJcbmNsYXNzIFByb3RlaW5CIGV4dGVuZHMgUHJvdGVpbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7R2VuZUV4cHJlc3Npb25Nb2RlbH0gbW9kZWxcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwgKSB7XHJcbiAgICBtb2RlbCA9IG1vZGVsIHx8IG5ldyBTdHViR2VuZUV4cHJlc3Npb25Nb2RlbCgpO1xyXG4gICAgc3VwZXIoIG1vZGVsLCBjcmVhdGVTaGFwZSggMCApLCBCQVNFX0NPTE9SICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcmV0dXJucyB7UHJvdGVpbkJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNyZWF0ZUluc3RhbmNlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm90ZWluQiggdGhpcy5tb2RlbCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGdyb3d0aEZhY3RvclxyXG4gICAqIEByZXR1cm5zIHtTaGFwZX1cclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICovXHJcbiAgZ2V0U2NhbGVkU2hhcGUoIGdyb3d0aEZhY3RvciApIHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZVNoYXBlKCBncm93dGhGYWN0b3IgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gYXR0YWNobWVudFBvaW50UG9zaXRpb25cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgc2V0QXR0YWNobWVudFBvaW50UG9zaXRpb24oIGF0dGFjaG1lbnRQb2ludFBvc2l0aW9uICkge1xyXG5cclxuICAgIC8vIE5vdGU6IFRoaXMgaXMgc3BlY2lmaWMgdG8gdGhpcyBwcm90ZWluJ3Mgc2hhcGUsIGFuZCB3aWxsIG5lZWQgdG8gYmUgYWRqdXN0ZWQgaWYgdGhlIHByb3RlaW4ncyBzaGFwZSBhbGdvcml0aG1cclxuICAgIC8vIGNoYW5nZXMuXHJcbiAgICB0aGlzLnNldEF0dGFjaG1lbnRQb2ludFBvc2l0aW9uWFkoIGF0dGFjaG1lbnRQb2ludFBvc2l0aW9uLngsIGF0dGFjaG1lbnRQb2ludFBvc2l0aW9uLnkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhdHRhY2htZW50UG9pbnRQb3NpdGlvblhcclxuICAgKiBAcGFyYW0ge251bWJlcn0gYXR0YWNobWVudFBvaW50UG9zaXRpb25ZXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBzZXRBdHRhY2htZW50UG9pbnRQb3NpdGlvblhZKCBhdHRhY2htZW50UG9pbnRQb3NpdGlvblgsIGF0dGFjaG1lbnRQb2ludFBvc2l0aW9uWSApIHtcclxuICAgIC8vIE5vdGU6IFRoaXMgaXMgc3BlY2lmaWMgdG8gdGhpcyBwcm90ZWluJ3Mgc2hhcGUsIGFuZCB3aWxsIG5lZWQgdG8gYmUgYWRqdXN0ZWQgaWYgdGhlIHByb3RlaW4ncyBzaGFwZSBhbGdvcml0aG1cclxuICAgIC8vIGNoYW5nZXMuXHJcbiAgICB0aGlzLnNldFBvc2l0aW9uKCBuZXcgVmVjdG9yMiggYXR0YWNobWVudFBvaW50UG9zaXRpb25YICsgRlVMTF9HUk9XTl9XSURUSCAqIDAuMTIgKiB0aGlzLmdldEZ1bGxTaXplUHJvcG9ydGlvbigpLFxyXG4gICAgICBhdHRhY2htZW50UG9pbnRQb3NpdGlvblkgKyBGVUxMX0dST1dOX1dJRFRIICogMC40NSAqIHRoaXMuZ2V0RnVsbFNpemVQcm9wb3J0aW9uKCkgKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGdyb3d0aEZhY3RvclxyXG4gICAqIEByZXR1cm5zIHtTaGFwZX1cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGNyZWF0ZVNoYXBlKCBncm93dGhGYWN0b3IgKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlU2hhcGUoIGdyb3d0aEZhY3RvciApO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgY3JlYXRlU2hhcGUgPSBncm93dGhGYWN0b3IgPT4ge1xyXG4gIGNvbnN0IGN1cnJlbnRXaWR0aCA9IFV0aWxzLmNsYW1wKCBncm93dGhGYWN0b3IsIDAuMDEsIDEgKSAqIEZVTExfR1JPV05fV0lEVEg7XHJcbiAgY29uc3QgcGF0aCA9IG5ldyBTaGFwZSgpO1xyXG4gIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IyKCAtY3VycmVudFdpZHRoIC8gMiwgMCApO1xyXG4gIHBhdGgubW92ZVRvKCB2ZWN0b3IueCwgdmVjdG9yLnkgKTtcclxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpKysgKSB7XHJcbiAgICB2ZWN0b3Iucm90YXRlKCBNYXRoLlBJIC8gMyApO1xyXG4gICAgcGF0aC5saW5lVG8oIHZlY3Rvci54LCB2ZWN0b3IueSApO1xyXG4gIH1cclxuICBwYXRoLmNsb3NlKCk7XHJcbiAgcmV0dXJuIHBhdGg7XHJcbn07XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdQcm90ZWluQicsIFByb3RlaW5CICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm90ZWluQjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELFNBQVNDLEtBQUssUUFBUSxtQ0FBbUM7QUFDekQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyx1QkFBdUIsTUFBTSwrQ0FBK0M7QUFDbkYsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DOztBQUV4RTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxJQUFJSixLQUFLLENBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFHLENBQUM7QUFDM0MsTUFBTUssZ0JBQWdCLEdBQUcsR0FBRztBQUU1QixNQUFNQyxRQUFRLFNBQVNMLE9BQU8sQ0FBQztFQUU3QjtBQUNGO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsS0FBSyxFQUFHO0lBQ25CQSxLQUFLLEdBQUdBLEtBQUssSUFBSSxJQUFJTix1QkFBdUIsQ0FBQyxDQUFDO0lBQzlDLEtBQUssQ0FBRU0sS0FBSyxFQUFFQyxXQUFXLENBQUUsQ0FBRSxDQUFDLEVBQUVMLFVBQVcsQ0FBQztFQUM5Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLGNBQWNBLENBQUEsRUFBRztJQUNmLE9BQU8sSUFBSUosUUFBUSxDQUFFLElBQUksQ0FBQ0UsS0FBTSxDQUFDO0VBQ25DOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxjQUFjQSxDQUFFQyxZQUFZLEVBQUc7SUFDN0IsT0FBTyxJQUFJLENBQUNILFdBQVcsQ0FBRUcsWUFBYSxDQUFDO0VBQ3pDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsMEJBQTBCQSxDQUFFQyx1QkFBdUIsRUFBRztJQUVwRDtJQUNBO0lBQ0EsSUFBSSxDQUFDQyw0QkFBNEIsQ0FBRUQsdUJBQXVCLENBQUNFLENBQUMsRUFBRUYsdUJBQXVCLENBQUNHLENBQUUsQ0FBQztFQUMzRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VGLDRCQUE0QkEsQ0FBRUcsd0JBQXdCLEVBQUVDLHdCQUF3QixFQUFHO0lBQ2pGO0lBQ0E7SUFDQSxJQUFJLENBQUNDLFdBQVcsQ0FBRSxJQUFJdEIsT0FBTyxDQUFFb0Isd0JBQXdCLEdBQUdiLGdCQUFnQixHQUFHLElBQUksR0FBRyxJQUFJLENBQUNnQixxQkFBcUIsQ0FBQyxDQUFDLEVBQzlHRix3QkFBd0IsR0FBR2QsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQ2dCLHFCQUFxQixDQUFDLENBQUUsQ0FBRSxDQUFDO0VBQ3pGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRVosV0FBV0EsQ0FBRUcsWUFBWSxFQUFHO0lBQzFCLE9BQU9ILFdBQVcsQ0FBRUcsWUFBYSxDQUFDO0VBQ3BDO0FBQ0Y7QUFFQSxNQUFNSCxXQUFXLEdBQUdHLFlBQVksSUFBSTtFQUNsQyxNQUFNVSxZQUFZLEdBQUd6QixLQUFLLENBQUMwQixLQUFLLENBQUVYLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBRSxDQUFDLEdBQUdQLGdCQUFnQjtFQUM1RSxNQUFNbUIsSUFBSSxHQUFHLElBQUl6QixLQUFLLENBQUMsQ0FBQztFQUN4QixNQUFNMEIsTUFBTSxHQUFHLElBQUkzQixPQUFPLENBQUUsQ0FBQ3dCLFlBQVksR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFDO0VBQ2xERSxJQUFJLENBQUNFLE1BQU0sQ0FBRUQsTUFBTSxDQUFDVCxDQUFDLEVBQUVTLE1BQU0sQ0FBQ1IsQ0FBRSxDQUFDO0VBQ2pDLEtBQU0sSUFBSVUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUc7SUFDNUJGLE1BQU0sQ0FBQ0csTUFBTSxDQUFFQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDNUJOLElBQUksQ0FBQ08sTUFBTSxDQUFFTixNQUFNLENBQUNULENBQUMsRUFBRVMsTUFBTSxDQUFDUixDQUFFLENBQUM7RUFDbkM7RUFDQU8sSUFBSSxDQUFDUSxLQUFLLENBQUMsQ0FBQztFQUNaLE9BQU9SLElBQUk7QUFDYixDQUFDO0FBRURyQix3QkFBd0IsQ0FBQzhCLFFBQVEsQ0FBRSxVQUFVLEVBQUUzQixRQUFTLENBQUM7QUFFekQsZUFBZUEsUUFBUSJ9