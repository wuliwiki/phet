// Copyright 2015-2021, University of Colorado Boulder

/**
 * Specific instance of a gene.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import Range from '../../../../dot/js/Range.js';
import { Color } from '../../../../scenery/js/imports.js';
import Gene from '../../common/model/Gene.js';
import TranscriptionFactor from '../../common/model/TranscriptionFactor.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import ProteinC from './ProteinC.js';

// constants
const REGULATORY_REGION_COLOR = new Color(216, 191, 216);
const TRANSCRIBED_REGION_COLOR = new Color(205, 255, 112, 150);
const NUM_BASE_PAIRS_IN_REGULATORY_REGION = 28;
const NUM_BASE_PAIRS_IN_TRANSCRIBED_REGION = 200;
const NUM_BASE_PAIRS = NUM_BASE_PAIRS_IN_REGULATORY_REGION + NUM_BASE_PAIRS_IN_TRANSCRIBED_REGION;
const MRNA_WINDING_ALGORITHM_NUMBER = 4;
class GeneC extends Gene {
  /**
   * @param {DnaMolecule} dnaMolecule -  The DNA molecule within which this gene exists
   * @param {number} initialBasePair - Where this gene starts on the DNA strand
   */
  constructor(dnaMolecule, initialBasePair) {
    super(dnaMolecule, new Range(initialBasePair, initialBasePair + NUM_BASE_PAIRS_IN_REGULATORY_REGION), REGULATORY_REGION_COLOR, new Range(initialBasePair + NUM_BASE_PAIRS_IN_REGULATORY_REGION + 1, initialBasePair + NUM_BASE_PAIRS_IN_REGULATORY_REGION + 1 + NUM_BASE_PAIRS_IN_TRANSCRIBED_REGION), TRANSCRIBED_REGION_COLOR, MRNA_WINDING_ALGORITHM_NUMBER);

    // Add transcription factors that are specific to this gene.  Position is pretty much arbitrary, just meant to look
    // decent.
    this.addTranscriptionFactorPosition(5, TranscriptionFactor.TRANSCRIPTION_FACTOR_CONFIG_GENE_3_POS_1);
    this.addTranscriptionFactorPosition(16, TranscriptionFactor.TRANSCRIPTION_FACTOR_CONFIG_GENE_3_POS_2);
    this.addTranscriptionFactorPosition(11, TranscriptionFactor.TRANSCRIPTION_FACTOR_CONFIG_GENE_3_NEG);
  }

  /**
   * @override
   * @returns {ProteinC}
   * @public
   */
  getProteinPrototype() {
    return new ProteinC();
  }
}

// statics
GeneC.NUM_BASE_PAIRS = NUM_BASE_PAIRS;
geneExpressionEssentials.register('GeneC', GeneC);
export default GeneC;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIkNvbG9yIiwiR2VuZSIsIlRyYW5zY3JpcHRpb25GYWN0b3IiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJQcm90ZWluQyIsIlJFR1VMQVRPUllfUkVHSU9OX0NPTE9SIiwiVFJBTlNDUklCRURfUkVHSU9OX0NPTE9SIiwiTlVNX0JBU0VfUEFJUlNfSU5fUkVHVUxBVE9SWV9SRUdJT04iLCJOVU1fQkFTRV9QQUlSU19JTl9UUkFOU0NSSUJFRF9SRUdJT04iLCJOVU1fQkFTRV9QQUlSUyIsIk1STkFfV0lORElOR19BTEdPUklUSE1fTlVNQkVSIiwiR2VuZUMiLCJjb25zdHJ1Y3RvciIsImRuYU1vbGVjdWxlIiwiaW5pdGlhbEJhc2VQYWlyIiwiYWRkVHJhbnNjcmlwdGlvbkZhY3RvclBvc2l0aW9uIiwiVFJBTlNDUklQVElPTl9GQUNUT1JfQ09ORklHX0dFTkVfM19QT1NfMSIsIlRSQU5TQ1JJUFRJT05fRkFDVE9SX0NPTkZJR19HRU5FXzNfUE9TXzIiLCJUUkFOU0NSSVBUSU9OX0ZBQ1RPUl9DT05GSUdfR0VORV8zX05FRyIsImdldFByb3RlaW5Qcm90b3R5cGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdlbmVDLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNwZWNpZmljIGluc3RhbmNlIG9mIGEgZ2VuZS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIE1vaGFtZWQgU2FmaVxyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBHZW5lIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9HZW5lLmpzJztcclxuaW1wb3J0IFRyYW5zY3JpcHRpb25GYWN0b3IgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1RyYW5zY3JpcHRpb25GYWN0b3IuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBQcm90ZWluQyBmcm9tICcuL1Byb3RlaW5DLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBSRUdVTEFUT1JZX1JFR0lPTl9DT0xPUiA9IG5ldyBDb2xvciggMjE2LCAxOTEsIDIxNiApO1xyXG5jb25zdCBUUkFOU0NSSUJFRF9SRUdJT05fQ09MT1IgPSBuZXcgQ29sb3IoIDIwNSwgMjU1LCAxMTIsIDE1MCApO1xyXG5jb25zdCBOVU1fQkFTRV9QQUlSU19JTl9SRUdVTEFUT1JZX1JFR0lPTiA9IDI4O1xyXG5jb25zdCBOVU1fQkFTRV9QQUlSU19JTl9UUkFOU0NSSUJFRF9SRUdJT04gPSAyMDA7XHJcbmNvbnN0IE5VTV9CQVNFX1BBSVJTID0gTlVNX0JBU0VfUEFJUlNfSU5fUkVHVUxBVE9SWV9SRUdJT04gKyBOVU1fQkFTRV9QQUlSU19JTl9UUkFOU0NSSUJFRF9SRUdJT047XHJcbmNvbnN0IE1STkFfV0lORElOR19BTEdPUklUSE1fTlVNQkVSID0gNDtcclxuXHJcbmNsYXNzIEdlbmVDIGV4dGVuZHMgR2VuZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RG5hTW9sZWN1bGV9IGRuYU1vbGVjdWxlIC0gIFRoZSBETkEgbW9sZWN1bGUgd2l0aGluIHdoaWNoIHRoaXMgZ2VuZSBleGlzdHNcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5pdGlhbEJhc2VQYWlyIC0gV2hlcmUgdGhpcyBnZW5lIHN0YXJ0cyBvbiB0aGUgRE5BIHN0cmFuZFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBkbmFNb2xlY3VsZSwgaW5pdGlhbEJhc2VQYWlyICkge1xyXG4gICAgc3VwZXIoIGRuYU1vbGVjdWxlLFxyXG4gICAgICBuZXcgUmFuZ2UoIGluaXRpYWxCYXNlUGFpciwgaW5pdGlhbEJhc2VQYWlyICsgTlVNX0JBU0VfUEFJUlNfSU5fUkVHVUxBVE9SWV9SRUdJT04gKSxcclxuICAgICAgUkVHVUxBVE9SWV9SRUdJT05fQ09MT1IsXHJcbiAgICAgIG5ldyBSYW5nZShcclxuICAgICAgICBpbml0aWFsQmFzZVBhaXIgKyBOVU1fQkFTRV9QQUlSU19JTl9SRUdVTEFUT1JZX1JFR0lPTiArIDEsXHJcbiAgICAgICAgaW5pdGlhbEJhc2VQYWlyICsgTlVNX0JBU0VfUEFJUlNfSU5fUkVHVUxBVE9SWV9SRUdJT04gKyAxICsgTlVNX0JBU0VfUEFJUlNfSU5fVFJBTlNDUklCRURfUkVHSU9OXHJcbiAgICAgICksXHJcbiAgICAgIFRSQU5TQ1JJQkVEX1JFR0lPTl9DT0xPUixcclxuICAgICAgTVJOQV9XSU5ESU5HX0FMR09SSVRITV9OVU1CRVJcclxuICAgICk7XHJcblxyXG4gICAgLy8gQWRkIHRyYW5zY3JpcHRpb24gZmFjdG9ycyB0aGF0IGFyZSBzcGVjaWZpYyB0byB0aGlzIGdlbmUuICBQb3NpdGlvbiBpcyBwcmV0dHkgbXVjaCBhcmJpdHJhcnksIGp1c3QgbWVhbnQgdG8gbG9va1xyXG4gICAgLy8gZGVjZW50LlxyXG4gICAgdGhpcy5hZGRUcmFuc2NyaXB0aW9uRmFjdG9yUG9zaXRpb24oIDUsIFRyYW5zY3JpcHRpb25GYWN0b3IuVFJBTlNDUklQVElPTl9GQUNUT1JfQ09ORklHX0dFTkVfM19QT1NfMSApO1xyXG4gICAgdGhpcy5hZGRUcmFuc2NyaXB0aW9uRmFjdG9yUG9zaXRpb24oIDE2LCBUcmFuc2NyaXB0aW9uRmFjdG9yLlRSQU5TQ1JJUFRJT05fRkFDVE9SX0NPTkZJR19HRU5FXzNfUE9TXzIgKTtcclxuICAgIHRoaXMuYWRkVHJhbnNjcmlwdGlvbkZhY3RvclBvc2l0aW9uKCAxMSwgVHJhbnNjcmlwdGlvbkZhY3Rvci5UUkFOU0NSSVBUSU9OX0ZBQ1RPUl9DT05GSUdfR0VORV8zX05FRyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHJldHVybnMge1Byb3RlaW5DfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBnZXRQcm90ZWluUHJvdG90eXBlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm90ZWluQygpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcblxyXG4vLyBzdGF0aWNzXHJcbkdlbmVDLk5VTV9CQVNFX1BBSVJTID0gTlVNX0JBU0VfUEFJUlM7XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdHZW5lQycsIEdlbmVDICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHZW5lQztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLFNBQVNDLEtBQUssUUFBUSxtQ0FBbUM7QUFDekQsT0FBT0MsSUFBSSxNQUFNLDRCQUE0QjtBQUM3QyxPQUFPQyxtQkFBbUIsTUFBTSwyQ0FBMkM7QUFDM0UsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBQ3hFLE9BQU9DLFFBQVEsTUFBTSxlQUFlOztBQUVwQztBQUNBLE1BQU1DLHVCQUF1QixHQUFHLElBQUlMLEtBQUssQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUksQ0FBQztBQUMxRCxNQUFNTSx3QkFBd0IsR0FBRyxJQUFJTixLQUFLLENBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBSSxDQUFDO0FBQ2hFLE1BQU1PLG1DQUFtQyxHQUFHLEVBQUU7QUFDOUMsTUFBTUMsb0NBQW9DLEdBQUcsR0FBRztBQUNoRCxNQUFNQyxjQUFjLEdBQUdGLG1DQUFtQyxHQUFHQyxvQ0FBb0M7QUFDakcsTUFBTUUsNkJBQTZCLEdBQUcsQ0FBQztBQUV2QyxNQUFNQyxLQUFLLFNBQVNWLElBQUksQ0FBQztFQUV2QjtBQUNGO0FBQ0E7QUFDQTtFQUNFVyxXQUFXQSxDQUFFQyxXQUFXLEVBQUVDLGVBQWUsRUFBRztJQUMxQyxLQUFLLENBQUVELFdBQVcsRUFDaEIsSUFBSWQsS0FBSyxDQUFFZSxlQUFlLEVBQUVBLGVBQWUsR0FBR1AsbUNBQW9DLENBQUMsRUFDbkZGLHVCQUF1QixFQUN2QixJQUFJTixLQUFLLENBQ1BlLGVBQWUsR0FBR1AsbUNBQW1DLEdBQUcsQ0FBQyxFQUN6RE8sZUFBZSxHQUFHUCxtQ0FBbUMsR0FBRyxDQUFDLEdBQUdDLG9DQUM5RCxDQUFDLEVBQ0RGLHdCQUF3QixFQUN4QkksNkJBQ0YsQ0FBQzs7SUFFRDtJQUNBO0lBQ0EsSUFBSSxDQUFDSyw4QkFBOEIsQ0FBRSxDQUFDLEVBQUViLG1CQUFtQixDQUFDYyx3Q0FBeUMsQ0FBQztJQUN0RyxJQUFJLENBQUNELDhCQUE4QixDQUFFLEVBQUUsRUFBRWIsbUJBQW1CLENBQUNlLHdDQUF5QyxDQUFDO0lBQ3ZHLElBQUksQ0FBQ0YsOEJBQThCLENBQUUsRUFBRSxFQUFFYixtQkFBbUIsQ0FBQ2dCLHNDQUF1QyxDQUFDO0VBQ3ZHOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsbUJBQW1CQSxDQUFBLEVBQUc7SUFDcEIsT0FBTyxJQUFJZixRQUFRLENBQUMsQ0FBQztFQUN2QjtBQUVGOztBQUdBO0FBQ0FPLEtBQUssQ0FBQ0YsY0FBYyxHQUFHQSxjQUFjO0FBRXJDTix3QkFBd0IsQ0FBQ2lCLFFBQVEsQ0FBRSxPQUFPLEVBQUVULEtBQU0sQ0FBQztBQUVuRCxlQUFlQSxLQUFLIn0=