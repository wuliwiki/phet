// Copyright 2015-2022, University of Colorado Boulder

/**
 * Specific instance of protein
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

//modules
import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Color } from '../../../../scenery/js/imports.js';
import Protein from '../../common/model/Protein.js';
import StubGeneExpressionModel from '../../common/model/StubGeneExpressionModel.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';

// constants
const BASE_COLOR = new Color(255, 99, 71);
const FULL_GROWN_WIDTH = 450;
class ProteinA extends Protein {
  /**
   * @param {GeneExpressionModel} model
   */
  constructor(model) {
    model = model || new StubGeneExpressionModel();
    super(model, createShape(0), BASE_COLOR);
  }

  /**
   * @override
   * @param {number} growthFactor
   * @returns {Shape}
   * @protected
   */
  getScaledShape(growthFactor) {
    return this.createShape(growthFactor);
  }

  /**
   * @override
   * @returns {ProteinA}
   * @public
   */
  createInstance() {
    return new ProteinA(this.model);
  }

  /**
   * @override
   * @param {Vector2} attachmentPointPosition
   * @public
   */
  setAttachmentPointPosition(attachmentPointPosition) {
    // Note: This is specific to this protein's shape, and will need to be adjusted if the protein's shape algorithm
    // changes.
    this.setAttachmentPointPositionXY(attachmentPointPosition.x, attachmentPointPosition.y);
  }

  /**
   *
   * @param {number} attachmentPointPositionX
   * @param {number} attachmentPointPositionY
   * @private
   */
  setAttachmentPointPositionXY(attachmentPointPositionX, attachmentPointPositionY) {
    // Note: This is specific to this protein's shape, and will need to be adjusted if the protein's shape algorithm
    // changes.
    this.setPosition(new Vector2(attachmentPointPositionX, attachmentPointPositionY + FULL_GROWN_WIDTH / 2 * this.getFullSizeProportion()));
  }

  /**
   * @param {number} growthFactor
   * @returns {Shape}
   * @private
   */
  createShape(growthFactor) {
    return createShape(growthFactor);
  }
}

// function to create the shape
const createShape = growthFactor => {
  const currentWidth = Utils.clamp(growthFactor, 0.01, 1) * FULL_GROWN_WIDTH;
  const shape = new Shape();
  shape.moveTo(-currentWidth / 2, 0);
  shape.lineTo(0, -currentWidth / 2);
  shape.lineTo(currentWidth / 2, 0);
  shape.lineTo(0, currentWidth / 2);
  shape.lineTo(-currentWidth / 2, 0);
  shape.close();
  return shape;
};
geneExpressionEssentials.register('ProteinA', ProteinA);
export default ProteinA;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJTaGFwZSIsIkNvbG9yIiwiUHJvdGVpbiIsIlN0dWJHZW5lRXhwcmVzc2lvbk1vZGVsIiwiZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIiwiQkFTRV9DT0xPUiIsIkZVTExfR1JPV05fV0lEVEgiLCJQcm90ZWluQSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJjcmVhdGVTaGFwZSIsImdldFNjYWxlZFNoYXBlIiwiZ3Jvd3RoRmFjdG9yIiwiY3JlYXRlSW5zdGFuY2UiLCJzZXRBdHRhY2htZW50UG9pbnRQb3NpdGlvbiIsImF0dGFjaG1lbnRQb2ludFBvc2l0aW9uIiwic2V0QXR0YWNobWVudFBvaW50UG9zaXRpb25YWSIsIngiLCJ5IiwiYXR0YWNobWVudFBvaW50UG9zaXRpb25YIiwiYXR0YWNobWVudFBvaW50UG9zaXRpb25ZIiwic2V0UG9zaXRpb24iLCJnZXRGdWxsU2l6ZVByb3BvcnRpb24iLCJjdXJyZW50V2lkdGgiLCJjbGFtcCIsInNoYXBlIiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByb3RlaW5BLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNwZWNpZmljIGluc3RhbmNlIG9mIHByb3RlaW5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIE1vaGFtZWQgU2FmaVxyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcblxyXG4vL21vZHVsZXNcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQcm90ZWluIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Qcm90ZWluLmpzJztcclxuaW1wb3J0IFN0dWJHZW5lRXhwcmVzc2lvbk1vZGVsIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9TdHViR2VuZUV4cHJlc3Npb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMgZnJvbSAnLi4vLi4vZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBCQVNFX0NPTE9SID0gbmV3IENvbG9yKCAyNTUsIDk5LCA3MSApO1xyXG5jb25zdCBGVUxMX0dST1dOX1dJRFRIID0gNDUwO1xyXG5cclxuY2xhc3MgUHJvdGVpbkEgZXh0ZW5kcyBQcm90ZWluIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtHZW5lRXhwcmVzc2lvbk1vZGVsfSBtb2RlbFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCApIHtcclxuICAgIG1vZGVsID0gbW9kZWwgfHwgbmV3IFN0dWJHZW5lRXhwcmVzc2lvbk1vZGVsKCk7XHJcbiAgICBzdXBlciggbW9kZWwsIGNyZWF0ZVNoYXBlKCAwICksIEJBU0VfQ09MT1IgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBncm93dGhGYWN0b3JcclxuICAgKiBAcmV0dXJucyB7U2hhcGV9XHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqL1xyXG4gIGdldFNjYWxlZFNoYXBlKCBncm93dGhGYWN0b3IgKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVTaGFwZSggZ3Jvd3RoRmFjdG9yICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcmV0dXJucyB7UHJvdGVpbkF9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNyZWF0ZUluc3RhbmNlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm90ZWluQSggdGhpcy5tb2RlbCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBhdHRhY2htZW50UG9pbnRQb3NpdGlvblxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzZXRBdHRhY2htZW50UG9pbnRQb3NpdGlvbiggYXR0YWNobWVudFBvaW50UG9zaXRpb24gKSB7XHJcblxyXG4gICAgLy8gTm90ZTogVGhpcyBpcyBzcGVjaWZpYyB0byB0aGlzIHByb3RlaW4ncyBzaGFwZSwgYW5kIHdpbGwgbmVlZCB0byBiZSBhZGp1c3RlZCBpZiB0aGUgcHJvdGVpbidzIHNoYXBlIGFsZ29yaXRobVxyXG4gICAgLy8gY2hhbmdlcy5cclxuICAgIHRoaXMuc2V0QXR0YWNobWVudFBvaW50UG9zaXRpb25YWSggYXR0YWNobWVudFBvaW50UG9zaXRpb24ueCwgYXR0YWNobWVudFBvaW50UG9zaXRpb24ueSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gYXR0YWNobWVudFBvaW50UG9zaXRpb25YXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGF0dGFjaG1lbnRQb2ludFBvc2l0aW9uWVxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgc2V0QXR0YWNobWVudFBvaW50UG9zaXRpb25YWSggYXR0YWNobWVudFBvaW50UG9zaXRpb25YLCBhdHRhY2htZW50UG9pbnRQb3NpdGlvblkgKSB7XHJcblxyXG4gICAgLy8gTm90ZTogVGhpcyBpcyBzcGVjaWZpYyB0byB0aGlzIHByb3RlaW4ncyBzaGFwZSwgYW5kIHdpbGwgbmVlZCB0byBiZSBhZGp1c3RlZCBpZiB0aGUgcHJvdGVpbidzIHNoYXBlIGFsZ29yaXRobVxyXG4gICAgLy8gY2hhbmdlcy5cclxuICAgIHRoaXMuc2V0UG9zaXRpb24oIG5ldyBWZWN0b3IyKCBhdHRhY2htZW50UG9pbnRQb3NpdGlvblgsIGF0dGFjaG1lbnRQb2ludFBvc2l0aW9uWSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIEZVTExfR1JPV05fV0lEVEggLyAyICogdGhpcy5nZXRGdWxsU2l6ZVByb3BvcnRpb24oKSApICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBncm93dGhGYWN0b3JcclxuICAgKiBAcmV0dXJucyB7U2hhcGV9XHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBjcmVhdGVTaGFwZSggZ3Jvd3RoRmFjdG9yICkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVNoYXBlKCBncm93dGhGYWN0b3IgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgc2hhcGVcclxuY29uc3QgY3JlYXRlU2hhcGUgPSBncm93dGhGYWN0b3IgPT4ge1xyXG4gIGNvbnN0IGN1cnJlbnRXaWR0aCA9IFV0aWxzLmNsYW1wKCBncm93dGhGYWN0b3IsIDAuMDEsIDEgKSAqIEZVTExfR1JPV05fV0lEVEg7XHJcbiAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICBzaGFwZS5tb3ZlVG8oIC1jdXJyZW50V2lkdGggLyAyLCAwICk7XHJcbiAgc2hhcGUubGluZVRvKCAwLCAtY3VycmVudFdpZHRoIC8gMiApO1xyXG4gIHNoYXBlLmxpbmVUbyggY3VycmVudFdpZHRoIC8gMiwgMCApO1xyXG4gIHNoYXBlLmxpbmVUbyggMCwgY3VycmVudFdpZHRoIC8gMiApO1xyXG4gIHNoYXBlLmxpbmVUbyggLWN1cnJlbnRXaWR0aCAvIDIsIDAgKTtcclxuICBzaGFwZS5jbG9zZSgpO1xyXG5cclxuICByZXR1cm4gc2hhcGU7XHJcbn07XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdQcm90ZWluQScsIFByb3RlaW5BICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm90ZWluQTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0EsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsU0FBU0MsS0FBSyxRQUFRLG1DQUFtQztBQUN6RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLHVCQUF1QixNQUFNLCtDQUErQztBQUNuRixPQUFPQyx3QkFBd0IsTUFBTSxtQ0FBbUM7O0FBRXhFO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUlKLEtBQUssQ0FBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztBQUMzQyxNQUFNSyxnQkFBZ0IsR0FBRyxHQUFHO0FBRTVCLE1BQU1DLFFBQVEsU0FBU0wsT0FBTyxDQUFDO0VBRTdCO0FBQ0Y7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxLQUFLLEVBQUc7SUFDbkJBLEtBQUssR0FBR0EsS0FBSyxJQUFJLElBQUlOLHVCQUF1QixDQUFDLENBQUM7SUFDOUMsS0FBSyxDQUFFTSxLQUFLLEVBQUVDLFdBQVcsQ0FBRSxDQUFFLENBQUMsRUFBRUwsVUFBVyxDQUFDO0VBQzlDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxjQUFjQSxDQUFFQyxZQUFZLEVBQUc7SUFDN0IsT0FBTyxJQUFJLENBQUNGLFdBQVcsQ0FBRUUsWUFBYSxDQUFDO0VBQ3pDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsY0FBY0EsQ0FBQSxFQUFHO0lBQ2YsT0FBTyxJQUFJTixRQUFRLENBQUUsSUFBSSxDQUFDRSxLQUFNLENBQUM7RUFDbkM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSywwQkFBMEJBLENBQUVDLHVCQUF1QixFQUFHO0lBRXBEO0lBQ0E7SUFDQSxJQUFJLENBQUNDLDRCQUE0QixDQUFFRCx1QkFBdUIsQ0FBQ0UsQ0FBQyxFQUFFRix1QkFBdUIsQ0FBQ0csQ0FBRSxDQUFDO0VBQzNGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRiw0QkFBNEJBLENBQUVHLHdCQUF3QixFQUFFQyx3QkFBd0IsRUFBRztJQUVqRjtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxXQUFXLENBQUUsSUFBSXRCLE9BQU8sQ0FBRW9CLHdCQUF3QixFQUFFQyx3QkFBd0IsR0FDdEJkLGdCQUFnQixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUNnQixxQkFBcUIsQ0FBQyxDQUFJLENBQUUsQ0FBQztFQUN0SDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VaLFdBQVdBLENBQUVFLFlBQVksRUFBRztJQUMxQixPQUFPRixXQUFXLENBQUVFLFlBQWEsQ0FBQztFQUNwQztBQUNGOztBQUVBO0FBQ0EsTUFBTUYsV0FBVyxHQUFHRSxZQUFZLElBQUk7RUFDbEMsTUFBTVcsWUFBWSxHQUFHekIsS0FBSyxDQUFDMEIsS0FBSyxDQUFFWixZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBQyxHQUFHTixnQkFBZ0I7RUFDNUUsTUFBTW1CLEtBQUssR0FBRyxJQUFJekIsS0FBSyxDQUFDLENBQUM7RUFDekJ5QixLQUFLLENBQUNDLE1BQU0sQ0FBRSxDQUFDSCxZQUFZLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBQztFQUNwQ0UsS0FBSyxDQUFDRSxNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUNKLFlBQVksR0FBRyxDQUFFLENBQUM7RUFDcENFLEtBQUssQ0FBQ0UsTUFBTSxDQUFFSixZQUFZLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBQztFQUNuQ0UsS0FBSyxDQUFDRSxNQUFNLENBQUUsQ0FBQyxFQUFFSixZQUFZLEdBQUcsQ0FBRSxDQUFDO0VBQ25DRSxLQUFLLENBQUNFLE1BQU0sQ0FBRSxDQUFDSixZQUFZLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBQztFQUNwQ0UsS0FBSyxDQUFDRyxLQUFLLENBQUMsQ0FBQztFQUViLE9BQU9ILEtBQUs7QUFDZCxDQUFDO0FBRURyQix3QkFBd0IsQ0FBQ3lCLFFBQVEsQ0FBRSxVQUFVLEVBQUV0QixRQUFTLENBQUM7QUFFekQsZUFBZUEsUUFBUSJ9