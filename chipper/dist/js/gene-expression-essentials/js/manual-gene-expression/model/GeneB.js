// Copyright 2015-2021, University of Colorado Boulder

/**
 * Specific instance of a gene.
 *
 * @author John Blanco
 * @author Mohamed Safi
 * @author Aadish Gupta
 */

import Range from '../../../../dot/js/Range.js';
import { Color } from '../../../../scenery/js/imports.js';
import Gene from '../../common/model/Gene.js';
import TranscriptionFactor from '../../common/model/TranscriptionFactor.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import ProteinB from './ProteinB.js';

// constants
const REGULATORY_REGION_COLOR = new Color(216, 191, 216);
const TRANSCRIBED_REGION_COLOR = new Color(240, 246, 143, 150);
const NUM_BASE_PAIRS_IN_REGULATORY_REGION = 28;
const NUM_BASE_PAIRS_IN_TRANSCRIBED_REGION = 150;
const MRNA_WINDING_ALGORITHM_NUMBER = 4;
class GeneB extends Gene {
  /**
   * @param {DnaMolecule} dnaMolecule -  The DNA molecule within which this gene exists
   * @param {number} initialBasePair - Where this gene starts on the DNA strand
   */
  constructor(dnaMolecule, initialBasePair) {
    super(dnaMolecule, new Range(initialBasePair, initialBasePair + NUM_BASE_PAIRS_IN_REGULATORY_REGION), REGULATORY_REGION_COLOR, new Range(initialBasePair + NUM_BASE_PAIRS_IN_REGULATORY_REGION + 1, initialBasePair + NUM_BASE_PAIRS_IN_REGULATORY_REGION + 1 + NUM_BASE_PAIRS_IN_TRANSCRIBED_REGION), TRANSCRIBED_REGION_COLOR, MRNA_WINDING_ALGORITHM_NUMBER);

    // Add transcription factors that are specific to this gene. Position is pretty much arbitrary, just meant to look
    // decent.
    this.addTranscriptionFactorPosition(5, TranscriptionFactor.TRANSCRIPTION_FACTOR_CONFIG_GENE_2_POS_1);
    this.addTranscriptionFactorPosition(16, TranscriptionFactor.TRANSCRIPTION_FACTOR_CONFIG_GENE_2_POS_2);
    this.addTranscriptionFactorPosition(11, TranscriptionFactor.TRANSCRIPTION_FACTOR_CONFIG_GENE_2_NEG);
  }

  /**
   * @override
   * @returns {ProteinB}
   * @public
   */
  getProteinPrototype() {
    return new ProteinB();
  }
}

// statics
GeneB.NUM_BASE_PAIRS = NUM_BASE_PAIRS_IN_REGULATORY_REGION + NUM_BASE_PAIRS_IN_TRANSCRIBED_REGION;
geneExpressionEssentials.register('GeneB', GeneB);
export default GeneB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIkNvbG9yIiwiR2VuZSIsIlRyYW5zY3JpcHRpb25GYWN0b3IiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJQcm90ZWluQiIsIlJFR1VMQVRPUllfUkVHSU9OX0NPTE9SIiwiVFJBTlNDUklCRURfUkVHSU9OX0NPTE9SIiwiTlVNX0JBU0VfUEFJUlNfSU5fUkVHVUxBVE9SWV9SRUdJT04iLCJOVU1fQkFTRV9QQUlSU19JTl9UUkFOU0NSSUJFRF9SRUdJT04iLCJNUk5BX1dJTkRJTkdfQUxHT1JJVEhNX05VTUJFUiIsIkdlbmVCIiwiY29uc3RydWN0b3IiLCJkbmFNb2xlY3VsZSIsImluaXRpYWxCYXNlUGFpciIsImFkZFRyYW5zY3JpcHRpb25GYWN0b3JQb3NpdGlvbiIsIlRSQU5TQ1JJUFRJT05fRkFDVE9SX0NPTkZJR19HRU5FXzJfUE9TXzEiLCJUUkFOU0NSSVBUSU9OX0ZBQ1RPUl9DT05GSUdfR0VORV8yX1BPU18yIiwiVFJBTlNDUklQVElPTl9GQUNUT1JfQ09ORklHX0dFTkVfMl9ORUciLCJnZXRQcm90ZWluUHJvdG90eXBlIiwiTlVNX0JBU0VfUEFJUlMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdlbmVCLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNwZWNpZmljIGluc3RhbmNlIG9mIGEgZ2VuZS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIE1vaGFtZWQgU2FmaVxyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBHZW5lIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9HZW5lLmpzJztcclxuaW1wb3J0IFRyYW5zY3JpcHRpb25GYWN0b3IgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1RyYW5zY3JpcHRpb25GYWN0b3IuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBQcm90ZWluQiBmcm9tICcuL1Byb3RlaW5CLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBSRUdVTEFUT1JZX1JFR0lPTl9DT0xPUiA9IG5ldyBDb2xvciggMjE2LCAxOTEsIDIxNiApO1xyXG5jb25zdCBUUkFOU0NSSUJFRF9SRUdJT05fQ09MT1IgPSBuZXcgQ29sb3IoIDI0MCwgMjQ2LCAxNDMsIDE1MCApO1xyXG5jb25zdCBOVU1fQkFTRV9QQUlSU19JTl9SRUdVTEFUT1JZX1JFR0lPTiA9IDI4O1xyXG5jb25zdCBOVU1fQkFTRV9QQUlSU19JTl9UUkFOU0NSSUJFRF9SRUdJT04gPSAxNTA7XHJcbmNvbnN0IE1STkFfV0lORElOR19BTEdPUklUSE1fTlVNQkVSID0gNDtcclxuXHJcbmNsYXNzIEdlbmVCIGV4dGVuZHMgR2VuZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RG5hTW9sZWN1bGV9IGRuYU1vbGVjdWxlIC0gIFRoZSBETkEgbW9sZWN1bGUgd2l0aGluIHdoaWNoIHRoaXMgZ2VuZSBleGlzdHNcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5pdGlhbEJhc2VQYWlyIC0gV2hlcmUgdGhpcyBnZW5lIHN0YXJ0cyBvbiB0aGUgRE5BIHN0cmFuZFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBkbmFNb2xlY3VsZSwgaW5pdGlhbEJhc2VQYWlyICkge1xyXG4gICAgc3VwZXIoIGRuYU1vbGVjdWxlLFxyXG4gICAgICBuZXcgUmFuZ2UoIGluaXRpYWxCYXNlUGFpciwgaW5pdGlhbEJhc2VQYWlyICsgTlVNX0JBU0VfUEFJUlNfSU5fUkVHVUxBVE9SWV9SRUdJT04gKSxcclxuICAgICAgUkVHVUxBVE9SWV9SRUdJT05fQ09MT1IsXHJcbiAgICAgIG5ldyBSYW5nZShcclxuICAgICAgICBpbml0aWFsQmFzZVBhaXIgKyBOVU1fQkFTRV9QQUlSU19JTl9SRUdVTEFUT1JZX1JFR0lPTiArIDEsXHJcbiAgICAgICAgaW5pdGlhbEJhc2VQYWlyICsgTlVNX0JBU0VfUEFJUlNfSU5fUkVHVUxBVE9SWV9SRUdJT04gKyAxICsgTlVNX0JBU0VfUEFJUlNfSU5fVFJBTlNDUklCRURfUkVHSU9OXHJcbiAgICAgICksXHJcbiAgICAgIFRSQU5TQ1JJQkVEX1JFR0lPTl9DT0xPUixcclxuICAgICAgTVJOQV9XSU5ESU5HX0FMR09SSVRITV9OVU1CRVJcclxuICAgICk7XHJcblxyXG4gICAgLy8gQWRkIHRyYW5zY3JpcHRpb24gZmFjdG9ycyB0aGF0IGFyZSBzcGVjaWZpYyB0byB0aGlzIGdlbmUuIFBvc2l0aW9uIGlzIHByZXR0eSBtdWNoIGFyYml0cmFyeSwganVzdCBtZWFudCB0byBsb29rXHJcbiAgICAvLyBkZWNlbnQuXHJcbiAgICB0aGlzLmFkZFRyYW5zY3JpcHRpb25GYWN0b3JQb3NpdGlvbiggNSwgVHJhbnNjcmlwdGlvbkZhY3Rvci5UUkFOU0NSSVBUSU9OX0ZBQ1RPUl9DT05GSUdfR0VORV8yX1BPU18xICk7XHJcbiAgICB0aGlzLmFkZFRyYW5zY3JpcHRpb25GYWN0b3JQb3NpdGlvbiggMTYsIFRyYW5zY3JpcHRpb25GYWN0b3IuVFJBTlNDUklQVElPTl9GQUNUT1JfQ09ORklHX0dFTkVfMl9QT1NfMiApO1xyXG4gICAgdGhpcy5hZGRUcmFuc2NyaXB0aW9uRmFjdG9yUG9zaXRpb24oIDExLCBUcmFuc2NyaXB0aW9uRmFjdG9yLlRSQU5TQ1JJUFRJT05fRkFDVE9SX0NPTkZJR19HRU5FXzJfTkVHICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcmV0dXJucyB7UHJvdGVpbkJ9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldFByb3RlaW5Qcm90b3R5cGUoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb3RlaW5CKCk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gc3RhdGljc1xyXG5HZW5lQi5OVU1fQkFTRV9QQUlSUyA9IE5VTV9CQVNFX1BBSVJTX0lOX1JFR1VMQVRPUllfUkVHSU9OICsgTlVNX0JBU0VfUEFJUlNfSU5fVFJBTlNDUklCRURfUkVHSU9OO1xyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnR2VuZUInLCBHZW5lQiApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2VuZUI7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxTQUFTQyxLQUFLLFFBQVEsbUNBQW1DO0FBQ3pELE9BQU9DLElBQUksTUFBTSw0QkFBNEI7QUFDN0MsT0FBT0MsbUJBQW1CLE1BQU0sMkNBQTJDO0FBQzNFLE9BQU9DLHdCQUF3QixNQUFNLG1DQUFtQztBQUN4RSxPQUFPQyxRQUFRLE1BQU0sZUFBZTs7QUFFcEM7QUFDQSxNQUFNQyx1QkFBdUIsR0FBRyxJQUFJTCxLQUFLLENBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFJLENBQUM7QUFDMUQsTUFBTU0sd0JBQXdCLEdBQUcsSUFBSU4sS0FBSyxDQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUksQ0FBQztBQUNoRSxNQUFNTyxtQ0FBbUMsR0FBRyxFQUFFO0FBQzlDLE1BQU1DLG9DQUFvQyxHQUFHLEdBQUc7QUFDaEQsTUFBTUMsNkJBQTZCLEdBQUcsQ0FBQztBQUV2QyxNQUFNQyxLQUFLLFNBQVNULElBQUksQ0FBQztFQUV2QjtBQUNGO0FBQ0E7QUFDQTtFQUNFVSxXQUFXQSxDQUFFQyxXQUFXLEVBQUVDLGVBQWUsRUFBRztJQUMxQyxLQUFLLENBQUVELFdBQVcsRUFDaEIsSUFBSWIsS0FBSyxDQUFFYyxlQUFlLEVBQUVBLGVBQWUsR0FBR04sbUNBQW9DLENBQUMsRUFDbkZGLHVCQUF1QixFQUN2QixJQUFJTixLQUFLLENBQ1BjLGVBQWUsR0FBR04sbUNBQW1DLEdBQUcsQ0FBQyxFQUN6RE0sZUFBZSxHQUFHTixtQ0FBbUMsR0FBRyxDQUFDLEdBQUdDLG9DQUM5RCxDQUFDLEVBQ0RGLHdCQUF3QixFQUN4QkcsNkJBQ0YsQ0FBQzs7SUFFRDtJQUNBO0lBQ0EsSUFBSSxDQUFDSyw4QkFBOEIsQ0FBRSxDQUFDLEVBQUVaLG1CQUFtQixDQUFDYSx3Q0FBeUMsQ0FBQztJQUN0RyxJQUFJLENBQUNELDhCQUE4QixDQUFFLEVBQUUsRUFBRVosbUJBQW1CLENBQUNjLHdDQUF5QyxDQUFDO0lBQ3ZHLElBQUksQ0FBQ0YsOEJBQThCLENBQUUsRUFBRSxFQUFFWixtQkFBbUIsQ0FBQ2Usc0NBQXVDLENBQUM7RUFDdkc7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxtQkFBbUJBLENBQUEsRUFBRztJQUNwQixPQUFPLElBQUlkLFFBQVEsQ0FBQyxDQUFDO0VBQ3ZCO0FBQ0Y7O0FBR0E7QUFDQU0sS0FBSyxDQUFDUyxjQUFjLEdBQUdaLG1DQUFtQyxHQUFHQyxvQ0FBb0M7QUFFakdMLHdCQUF3QixDQUFDaUIsUUFBUSxDQUFFLE9BQU8sRUFBRVYsS0FBTSxDQUFDO0FBRW5ELGVBQWVBLEtBQUsifQ==