// Copyright 2015-2021, University of Colorado Boulder

/**
 * Node that, when clicked on, will add a ribosome to the active area.
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import Ribosome from '../../common/model/Ribosome.js';
import StubGeneExpressionModel from '../../common/model/StubGeneExpressionModel.js';
import MobileBiomoleculeNode from '../../common/view/MobileBiomoleculeNode.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import BiomoleculeCreatorNode from './BiomoleculeCreatorNode.js';

// Scaling factor for this node when used as a creator node. May be significantly different from the size of the
// corresponding element in the model.
const SCALING_FACTOR = 0.07;
const SCALING_MVT = ModelViewTransform2.createSinglePointScaleInvertedYMapping(new Vector2(0, 0), new Vector2(0, 0), SCALING_FACTOR);
class RibosomeCreatorNode extends BiomoleculeCreatorNode {
  /**
   * @param {BiomoleculeToolboxNode} biomoleculeBoxNode
   */
  constructor(biomoleculeBoxNode) {
    super(new MobileBiomoleculeNode(SCALING_MVT, new Ribosome(new StubGeneExpressionModel())), biomoleculeBoxNode.screenView, biomoleculeBoxNode.modelViewTransform, pos => {
      const srs = new Ribosome(biomoleculeBoxNode.model, pos);
      biomoleculeBoxNode.model.addMobileBiomolecule(srs);
      return srs;
    }, mobileBiomolecule => {
      biomoleculeBoxNode.model.removeMobileBiomolecule(mobileBiomolecule);
    }, biomoleculeBoxNode);
  }
}
geneExpressionEssentials.register('RibosomeCreatorNode', RibosomeCreatorNode);
export default RibosomeCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiTW9kZWxWaWV3VHJhbnNmb3JtMiIsIlJpYm9zb21lIiwiU3R1YkdlbmVFeHByZXNzaW9uTW9kZWwiLCJNb2JpbGVCaW9tb2xlY3VsZU5vZGUiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJCaW9tb2xlY3VsZUNyZWF0b3JOb2RlIiwiU0NBTElOR19GQUNUT1IiLCJTQ0FMSU5HX01WVCIsImNyZWF0ZVNpbmdsZVBvaW50U2NhbGVJbnZlcnRlZFlNYXBwaW5nIiwiUmlib3NvbWVDcmVhdG9yTm9kZSIsImNvbnN0cnVjdG9yIiwiYmlvbW9sZWN1bGVCb3hOb2RlIiwic2NyZWVuVmlldyIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInBvcyIsInNycyIsIm1vZGVsIiwiYWRkTW9iaWxlQmlvbW9sZWN1bGUiLCJtb2JpbGVCaW9tb2xlY3VsZSIsInJlbW92ZU1vYmlsZUJpb21vbGVjdWxlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSaWJvc29tZUNyZWF0b3JOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vZGUgdGhhdCwgd2hlbiBjbGlja2VkIG9uLCB3aWxsIGFkZCBhIHJpYm9zb21lIHRvIHRoZSBhY3RpdmUgYXJlYS5cclxuICpcclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBSaWJvc29tZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUmlib3NvbWUuanMnO1xyXG5pbXBvcnQgU3R1YkdlbmVFeHByZXNzaW9uTW9kZWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1N0dWJHZW5lRXhwcmVzc2lvbk1vZGVsLmpzJztcclxuaW1wb3J0IE1vYmlsZUJpb21vbGVjdWxlTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Nb2JpbGVCaW9tb2xlY3VsZU5vZGUuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBCaW9tb2xlY3VsZUNyZWF0b3JOb2RlIGZyb20gJy4vQmlvbW9sZWN1bGVDcmVhdG9yTm9kZS5qcyc7XHJcblxyXG4vLyBTY2FsaW5nIGZhY3RvciBmb3IgdGhpcyBub2RlIHdoZW4gdXNlZCBhcyBhIGNyZWF0b3Igbm9kZS4gTWF5IGJlIHNpZ25pZmljYW50bHkgZGlmZmVyZW50IGZyb20gdGhlIHNpemUgb2YgdGhlXHJcbi8vIGNvcnJlc3BvbmRpbmcgZWxlbWVudCBpbiB0aGUgbW9kZWwuXHJcbmNvbnN0IFNDQUxJTkdfRkFDVE9SID0gMC4wNztcclxuY29uc3QgU0NBTElOR19NVlQgPSBNb2RlbFZpZXdUcmFuc2Zvcm0yLmNyZWF0ZVNpbmdsZVBvaW50U2NhbGVJbnZlcnRlZFlNYXBwaW5nKFxyXG4gIG5ldyBWZWN0b3IyKCAwLCAwICksXHJcbiAgbmV3IFZlY3RvcjIoIDAsIDAgKSxcclxuICBTQ0FMSU5HX0ZBQ1RPUlxyXG4pO1xyXG5cclxuY2xhc3MgUmlib3NvbWVDcmVhdG9yTm9kZSBleHRlbmRzIEJpb21vbGVjdWxlQ3JlYXRvck5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0Jpb21vbGVjdWxlVG9vbGJveE5vZGV9IGJpb21vbGVjdWxlQm94Tm9kZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBiaW9tb2xlY3VsZUJveE5vZGUgKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgbmV3IE1vYmlsZUJpb21vbGVjdWxlTm9kZShcclxuICAgICAgICBTQ0FMSU5HX01WVCxcclxuICAgICAgICBuZXcgUmlib3NvbWUoIG5ldyBTdHViR2VuZUV4cHJlc3Npb25Nb2RlbCgpIClcclxuICAgICAgKSxcclxuICAgICAgYmlvbW9sZWN1bGVCb3hOb2RlLnNjcmVlblZpZXcsXHJcbiAgICAgIGJpb21vbGVjdWxlQm94Tm9kZS5tb2RlbFZpZXdUcmFuc2Zvcm0sXHJcbiAgICAgIHBvcyA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3JzID0gbmV3IFJpYm9zb21lKCBiaW9tb2xlY3VsZUJveE5vZGUubW9kZWwsIHBvcyApO1xyXG4gICAgICAgIGJpb21vbGVjdWxlQm94Tm9kZS5tb2RlbC5hZGRNb2JpbGVCaW9tb2xlY3VsZSggc3JzICk7XHJcbiAgICAgICAgcmV0dXJuIHNycztcclxuICAgICAgfSxcclxuICAgICAgbW9iaWxlQmlvbW9sZWN1bGUgPT4ge1xyXG4gICAgICAgIGJpb21vbGVjdWxlQm94Tm9kZS5tb2RlbC5yZW1vdmVNb2JpbGVCaW9tb2xlY3VsZSggbW9iaWxlQmlvbW9sZWN1bGUgKTtcclxuICAgICAgfSxcclxuICAgICAgYmlvbW9sZWN1bGVCb3hOb2RlXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnUmlib3NvbWVDcmVhdG9yTm9kZScsIFJpYm9zb21lQ3JlYXRvck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJpYm9zb21lQ3JlYXRvck5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLG1CQUFtQixNQUFNLHVEQUF1RDtBQUN2RixPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLHVCQUF1QixNQUFNLCtDQUErQztBQUNuRixPQUFPQyxxQkFBcUIsTUFBTSw0Q0FBNEM7QUFDOUUsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBQ3hFLE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2Qjs7QUFFaEU7QUFDQTtBQUNBLE1BQU1DLGNBQWMsR0FBRyxJQUFJO0FBQzNCLE1BQU1DLFdBQVcsR0FBR1AsbUJBQW1CLENBQUNRLHNDQUFzQyxDQUM1RSxJQUFJVCxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUNuQixJQUFJQSxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUNuQk8sY0FDRixDQUFDO0FBRUQsTUFBTUcsbUJBQW1CLFNBQVNKLHNCQUFzQixDQUFDO0VBRXZEO0FBQ0Y7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxrQkFBa0IsRUFBRztJQUNoQyxLQUFLLENBQ0gsSUFBSVIscUJBQXFCLENBQ3ZCSSxXQUFXLEVBQ1gsSUFBSU4sUUFBUSxDQUFFLElBQUlDLHVCQUF1QixDQUFDLENBQUUsQ0FDOUMsQ0FBQyxFQUNEUyxrQkFBa0IsQ0FBQ0MsVUFBVSxFQUM3QkQsa0JBQWtCLENBQUNFLGtCQUFrQixFQUNyQ0MsR0FBRyxJQUFJO01BQ0wsTUFBTUMsR0FBRyxHQUFHLElBQUlkLFFBQVEsQ0FBRVUsa0JBQWtCLENBQUNLLEtBQUssRUFBRUYsR0FBSSxDQUFDO01BQ3pESCxrQkFBa0IsQ0FBQ0ssS0FBSyxDQUFDQyxvQkFBb0IsQ0FBRUYsR0FBSSxDQUFDO01BQ3BELE9BQU9BLEdBQUc7SUFDWixDQUFDLEVBQ0RHLGlCQUFpQixJQUFJO01BQ25CUCxrQkFBa0IsQ0FBQ0ssS0FBSyxDQUFDRyx1QkFBdUIsQ0FBRUQsaUJBQWtCLENBQUM7SUFDdkUsQ0FBQyxFQUNEUCxrQkFDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCx3QkFBd0IsQ0FBQ2dCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRVgsbUJBQW9CLENBQUM7QUFFL0UsZUFBZUEsbUJBQW1CIn0=