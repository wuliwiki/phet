// Copyright 2015-2022, University of Colorado Boulder

/**
 * BiomoleculeToolboxNode is a Scenery node that portrays a box from which the user can extract various biomolecules and
 * put them into action within the cell.
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Color, HBox, Node, RichText, Spacer, Text, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import GEEConstants from '../../common/GEEConstants.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import GeneExpressionEssentialsStrings from '../../GeneExpressionEssentialsStrings.js';
import MessengerRnaDestroyerCreatorNode from './MessengerRnaDestroyerCreatorNode.js';
import RibosomeCreatorNode from './RibosomeCreatorNode.js';
import RnaPolymeraseCreatorNode from './RnaPolymeraseCreatorNode.js';
import TranscriptionFactorCreatorNode from './TranscriptionFactorCreatorNode.js';

// constants
const TITLE_FONT = new PhetFont({
  size: 20,
  weight: 'bold'
});
const biomoleculeToolboxString = GeneExpressionEssentialsStrings.biomoleculeToolbox;
const mRnaDestroyerString = GeneExpressionEssentialsStrings.mRnaDestroyer;
const negativeTranscriptionFactorHtmlString = GeneExpressionEssentialsStrings.negativeTranscriptionFactorHtml;
const positiveTranscriptionFactorHtmlString = GeneExpressionEssentialsStrings.positiveTranscriptionFactorHtml;
const ribosomeString = GeneExpressionEssentialsStrings.ribosome;
const rnaPolymeraseString = GeneExpressionEssentialsStrings.rnaPolymerase;
class BiomoleculeToolboxNode extends Node {
  /**
   * @param {ManualGeneExpressionModel} model
   * @param {ManualGeneExpressionScreenView} screenView
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Gene} gene
   */
  constructor(model, screenView, modelViewTransform, gene) {
    super();

    // @public {ManualGeneExpressionModel} - used by the creator nodes to add new biomolecules to the model
    this.model = model;

    // @public {ManualGeneExpressionScreenView} - used by the creator nodes to add new biomolecule nodes to the view
    this.screenView = screenView;

    // @public {ModelViewTransform2} - used by the creator nodes to add new biomolecule nodes to the view
    this.modelViewTransform = modelViewTransform;

    // @private
    this.biomoleculeCreatorNodeList = [];

    // title
    const toolboxTitleNode = new Text(biomoleculeToolboxString, {
      font: TITLE_FONT,
      maxWidth: 200
    });

    // labels for the rows
    const positiveTranscriptionFactorLabel = BiomoleculeToolboxNode.createRowLabel(positiveTranscriptionFactorHtmlString);
    const positiveTranscriptionFactorLabelWidth = positiveTranscriptionFactorLabel.width;
    const rnaPolymeraseLabel = BiomoleculeToolboxNode.createRowLabel(rnaPolymeraseString);
    const rnaPolymeraseLabelWidth = rnaPolymeraseLabel.width;
    const ribosomeLabel = BiomoleculeToolboxNode.createRowLabel(ribosomeString);
    const ribosomeLabelWidth = ribosomeLabel.width;
    const mrnaDestroyerLabel = BiomoleculeToolboxNode.createRowLabel(mRnaDestroyerString);
    const mrnaDestroyerLabelWidth = mrnaDestroyerLabel.width;
    const negativeTranscriptionFactorLabel = BiomoleculeToolboxNode.createRowLabel(negativeTranscriptionFactorHtmlString);
    const negativeTranscriptionFactorLabelWidth = negativeTranscriptionFactorLabel.width;
    const maxWidth = _.max([positiveTranscriptionFactorLabelWidth, rnaPolymeraseLabelWidth, ribosomeLabelWidth, mrnaDestroyerLabelWidth, negativeTranscriptionFactorLabelWidth]);

    // transcription factor(s)
    const transcriptionFactors = gene.getTranscriptionFactorConfigs();
    const positiveTranscriptBoxNodes = [];
    const negativeTranscriptBoxNodes = [];
    transcriptionFactors.forEach(tfConfig => {
      const creatorNode = this.addCreatorNode(new TranscriptionFactorCreatorNode(this, tfConfig));
      if (tfConfig.isPositive) {
        const positiveTranscriptionBox = new HBox({
          children: [new Node({
            children: [positiveTranscriptionFactorLabel]
          }), new Spacer(maxWidth - positiveTranscriptionFactorLabelWidth, 0), creatorNode],
          spacing: 10
        });
        positiveTranscriptBoxNodes.push(positiveTranscriptionBox);
      } else {
        const negativeTranscriptionBox = new HBox({
          children: [new Node({
            children: [negativeTranscriptionFactorLabel]
          }), new Spacer(maxWidth - negativeTranscriptionFactorLabelWidth, 0), creatorNode],
          spacing: 10
        });
        negativeTranscriptBoxNodes.push(negativeTranscriptionBox);
      }
    });

    // polymerase
    const polymeraseBox = new HBox({
      children: [rnaPolymeraseLabel, new Spacer(maxWidth - rnaPolymeraseLabelWidth, 0), this.addCreatorNode(new RnaPolymeraseCreatorNode(this)), this.addCreatorNode(new RnaPolymeraseCreatorNode(this))],
      spacing: 10
    });

    // ribosomes
    const ribosomeBox = new HBox({
      children: [ribosomeLabel, new Spacer(maxWidth - ribosomeLabelWidth, 0), this.addCreatorNode(new RibosomeCreatorNode(this)), this.addCreatorNode(new RibosomeCreatorNode(this))],
      spacing: 10
    });

    // mRNA destroyer
    const mRnaDestroyerBox = new HBox({
      children: [mrnaDestroyerLabel, new Spacer(maxWidth - mrnaDestroyerLabelWidth, 0), this.addCreatorNode(new MessengerRnaDestroyerCreatorNode(this)), this.addCreatorNode(new MessengerRnaDestroyerCreatorNode(this))],
      spacing: 10
    });
    let childrenNodesArray = [];
    childrenNodesArray = childrenNodesArray.concat(positiveTranscriptBoxNodes);
    childrenNodesArray.push(polymeraseBox);
    childrenNodesArray.push(ribosomeBox);
    childrenNodesArray.push(mRnaDestroyerBox);
    childrenNodesArray = childrenNodesArray.concat(negativeTranscriptBoxNodes);

    // create the content of the panel
    const contentNode = new Node();
    contentNode.addChild(toolboxTitleNode);
    const childrenNode = new VBox({
      children: childrenNodesArray,
      spacing: 10,
      align: 'left'
    });
    contentNode.addChild(childrenNode);
    childrenNode.top = toolboxTitleNode.bottom + 10;
    toolboxTitleNode.centerX = childrenNode.centerX;

    // add the panel
    this.addChild(new Panel(contentNode, {
      cornerRadius: GEEConstants.CORNER_RADIUS,
      xMargin: 10,
      yMargin: 10,
      fill: new Color(250, 250, 250),
      lineWidth: 1,
      align: 'center',
      resize: false
    }));
  }

  /**
   * convenience function to push a creator node on to the creator node list and return a reference to it
   * @param {BiomoleculeCreatorNode} creatorNode
   * @returns {BiomoleculeCreatorNode}
   * @private
   */
  addCreatorNode(creatorNode) {
    this.biomoleculeCreatorNodeList.push(creatorNode);
    return creatorNode;
  }

  /**
   * reset the toolbox by resetting each of the biomolecule creator nodes
   * @public
   */
  reset() {
    const bioMoleculeCreatorNodeLength = this.biomoleculeCreatorNodeList.length;
    for (let i = 0; i < bioMoleculeCreatorNodeLength; i++) {
      this.biomoleculeCreatorNodeList[i].reset();
    }
  }

  /**
   * convenience function for creating row labels
   * @private
   */
  static createRowLabel(text) {
    return new RichText(text, {
      font: new PhetFont({
        size: 15
      }),
      maxWidth: 150,
      align: 'center'
    });
  }
}
geneExpressionEssentials.register('BiomoleculeToolboxNode', BiomoleculeToolboxNode);
export default BiomoleculeToolboxNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIkNvbG9yIiwiSEJveCIsIk5vZGUiLCJSaWNoVGV4dCIsIlNwYWNlciIsIlRleHQiLCJWQm94IiwiUGFuZWwiLCJHRUVDb25zdGFudHMiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzIiwiTWVzc2VuZ2VyUm5hRGVzdHJveWVyQ3JlYXRvck5vZGUiLCJSaWJvc29tZUNyZWF0b3JOb2RlIiwiUm5hUG9seW1lcmFzZUNyZWF0b3JOb2RlIiwiVHJhbnNjcmlwdGlvbkZhY3RvckNyZWF0b3JOb2RlIiwiVElUTEVfRk9OVCIsInNpemUiLCJ3ZWlnaHQiLCJiaW9tb2xlY3VsZVRvb2xib3hTdHJpbmciLCJiaW9tb2xlY3VsZVRvb2xib3giLCJtUm5hRGVzdHJveWVyU3RyaW5nIiwibVJuYURlc3Ryb3llciIsIm5lZ2F0aXZlVHJhbnNjcmlwdGlvbkZhY3Rvckh0bWxTdHJpbmciLCJuZWdhdGl2ZVRyYW5zY3JpcHRpb25GYWN0b3JIdG1sIiwicG9zaXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9ySHRtbFN0cmluZyIsInBvc2l0aXZlVHJhbnNjcmlwdGlvbkZhY3Rvckh0bWwiLCJyaWJvc29tZVN0cmluZyIsInJpYm9zb21lIiwicm5hUG9seW1lcmFzZVN0cmluZyIsInJuYVBvbHltZXJhc2UiLCJCaW9tb2xlY3VsZVRvb2xib3hOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInNjcmVlblZpZXciLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJnZW5lIiwiYmlvbW9sZWN1bGVDcmVhdG9yTm9kZUxpc3QiLCJ0b29sYm94VGl0bGVOb2RlIiwiZm9udCIsIm1heFdpZHRoIiwicG9zaXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9yTGFiZWwiLCJjcmVhdGVSb3dMYWJlbCIsInBvc2l0aXZlVHJhbnNjcmlwdGlvbkZhY3RvckxhYmVsV2lkdGgiLCJ3aWR0aCIsInJuYVBvbHltZXJhc2VMYWJlbCIsInJuYVBvbHltZXJhc2VMYWJlbFdpZHRoIiwicmlib3NvbWVMYWJlbCIsInJpYm9zb21lTGFiZWxXaWR0aCIsIm1ybmFEZXN0cm95ZXJMYWJlbCIsIm1ybmFEZXN0cm95ZXJMYWJlbFdpZHRoIiwibmVnYXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9yTGFiZWwiLCJuZWdhdGl2ZVRyYW5zY3JpcHRpb25GYWN0b3JMYWJlbFdpZHRoIiwiXyIsIm1heCIsInRyYW5zY3JpcHRpb25GYWN0b3JzIiwiZ2V0VHJhbnNjcmlwdGlvbkZhY3RvckNvbmZpZ3MiLCJwb3NpdGl2ZVRyYW5zY3JpcHRCb3hOb2RlcyIsIm5lZ2F0aXZlVHJhbnNjcmlwdEJveE5vZGVzIiwiZm9yRWFjaCIsInRmQ29uZmlnIiwiY3JlYXRvck5vZGUiLCJhZGRDcmVhdG9yTm9kZSIsImlzUG9zaXRpdmUiLCJwb3NpdGl2ZVRyYW5zY3JpcHRpb25Cb3giLCJjaGlsZHJlbiIsInNwYWNpbmciLCJwdXNoIiwibmVnYXRpdmVUcmFuc2NyaXB0aW9uQm94IiwicG9seW1lcmFzZUJveCIsInJpYm9zb21lQm94IiwibVJuYURlc3Ryb3llckJveCIsImNoaWxkcmVuTm9kZXNBcnJheSIsImNvbmNhdCIsImNvbnRlbnROb2RlIiwiYWRkQ2hpbGQiLCJjaGlsZHJlbk5vZGUiLCJhbGlnbiIsInRvcCIsImJvdHRvbSIsImNlbnRlclgiLCJjb3JuZXJSYWRpdXMiLCJDT1JORVJfUkFESVVTIiwieE1hcmdpbiIsInlNYXJnaW4iLCJmaWxsIiwibGluZVdpZHRoIiwicmVzaXplIiwicmVzZXQiLCJiaW9Nb2xlY3VsZUNyZWF0b3JOb2RlTGVuZ3RoIiwibGVuZ3RoIiwiaSIsInRleHQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJpb21vbGVjdWxlVG9vbGJveE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmlvbW9sZWN1bGVUb29sYm94Tm9kZSBpcyBhIFNjZW5lcnkgbm9kZSB0aGF0IHBvcnRyYXlzIGEgYm94IGZyb20gd2hpY2ggdGhlIHVzZXIgY2FuIGV4dHJhY3QgdmFyaW91cyBiaW9tb2xlY3VsZXMgYW5kXHJcbiAqIHB1dCB0aGVtIGludG8gYWN0aW9uIHdpdGhpbiB0aGUgY2VsbC5cclxuICpcclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBIQm94LCBOb2RlLCBSaWNoVGV4dCwgU3BhY2VyLCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBHRUVDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0dFRUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMgZnJvbSAnLi4vLi4vZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLmpzJztcclxuaW1wb3J0IEdlbmVFeHByZXNzaW9uRXNzZW50aWFsc1N0cmluZ3MgZnJvbSAnLi4vLi4vR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBNZXNzZW5nZXJSbmFEZXN0cm95ZXJDcmVhdG9yTm9kZSBmcm9tICcuL01lc3NlbmdlclJuYURlc3Ryb3llckNyZWF0b3JOb2RlLmpzJztcclxuaW1wb3J0IFJpYm9zb21lQ3JlYXRvck5vZGUgZnJvbSAnLi9SaWJvc29tZUNyZWF0b3JOb2RlLmpzJztcclxuaW1wb3J0IFJuYVBvbHltZXJhc2VDcmVhdG9yTm9kZSBmcm9tICcuL1JuYVBvbHltZXJhc2VDcmVhdG9yTm9kZS5qcyc7XHJcbmltcG9ydCBUcmFuc2NyaXB0aW9uRmFjdG9yQ3JlYXRvck5vZGUgZnJvbSAnLi9UcmFuc2NyaXB0aW9uRmFjdG9yQ3JlYXRvck5vZGUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFRJVExFX0ZPTlQgPSBuZXcgUGhldEZvbnQoIHsgc2l6ZTogMjAsIHdlaWdodDogJ2JvbGQnIH0gKTtcclxuXHJcbmNvbnN0IGJpb21vbGVjdWxlVG9vbGJveFN0cmluZyA9IEdlbmVFeHByZXNzaW9uRXNzZW50aWFsc1N0cmluZ3MuYmlvbW9sZWN1bGVUb29sYm94O1xyXG5jb25zdCBtUm5hRGVzdHJveWVyU3RyaW5nID0gR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5tUm5hRGVzdHJveWVyO1xyXG5jb25zdCBuZWdhdGl2ZVRyYW5zY3JpcHRpb25GYWN0b3JIdG1sU3RyaW5nID0gR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5uZWdhdGl2ZVRyYW5zY3JpcHRpb25GYWN0b3JIdG1sO1xyXG5jb25zdCBwb3NpdGl2ZVRyYW5zY3JpcHRpb25GYWN0b3JIdG1sU3RyaW5nID0gR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5wb3NpdGl2ZVRyYW5zY3JpcHRpb25GYWN0b3JIdG1sO1xyXG5jb25zdCByaWJvc29tZVN0cmluZyA9IEdlbmVFeHByZXNzaW9uRXNzZW50aWFsc1N0cmluZ3Mucmlib3NvbWU7XHJcbmNvbnN0IHJuYVBvbHltZXJhc2VTdHJpbmcgPSBHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzLnJuYVBvbHltZXJhc2U7XHJcblxyXG5jbGFzcyBCaW9tb2xlY3VsZVRvb2xib3hOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TWFudWFsR2VuZUV4cHJlc3Npb25Nb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge01hbnVhbEdlbmVFeHByZXNzaW9uU2NyZWVuVmlld30gc2NyZWVuVmlld1xyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICogQHBhcmFtIHtHZW5lfSBnZW5lXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBzY3JlZW5WaWV3LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIGdlbmUgKSB7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtNYW51YWxHZW5lRXhwcmVzc2lvbk1vZGVsfSAtIHVzZWQgYnkgdGhlIGNyZWF0b3Igbm9kZXMgdG8gYWRkIG5ldyBiaW9tb2xlY3VsZXMgdG8gdGhlIG1vZGVsXHJcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7TWFudWFsR2VuZUV4cHJlc3Npb25TY3JlZW5WaWV3fSAtIHVzZWQgYnkgdGhlIGNyZWF0b3Igbm9kZXMgdG8gYWRkIG5ldyBiaW9tb2xlY3VsZSBub2RlcyB0byB0aGUgdmlld1xyXG4gICAgdGhpcy5zY3JlZW5WaWV3ID0gc2NyZWVuVmlldztcclxuXHJcbiAgICAvLyBAcHVibGljIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSAtIHVzZWQgYnkgdGhlIGNyZWF0b3Igbm9kZXMgdG8gYWRkIG5ldyBiaW9tb2xlY3VsZSBub2RlcyB0byB0aGUgdmlld1xyXG4gICAgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0gPSBtb2RlbFZpZXdUcmFuc2Zvcm07XHJcblxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuYmlvbW9sZWN1bGVDcmVhdG9yTm9kZUxpc3QgPSBbXTtcclxuXHJcbiAgICAvLyB0aXRsZVxyXG4gICAgY29uc3QgdG9vbGJveFRpdGxlTm9kZSA9IG5ldyBUZXh0KCBiaW9tb2xlY3VsZVRvb2xib3hTdHJpbmcsIHtcclxuICAgICAgZm9udDogVElUTEVfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDIwMFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGxhYmVscyBmb3IgdGhlIHJvd3NcclxuICAgIGNvbnN0IHBvc2l0aXZlVHJhbnNjcmlwdGlvbkZhY3RvckxhYmVsID0gQmlvbW9sZWN1bGVUb29sYm94Tm9kZS5jcmVhdGVSb3dMYWJlbCggcG9zaXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9ySHRtbFN0cmluZyApO1xyXG4gICAgY29uc3QgcG9zaXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9yTGFiZWxXaWR0aCA9IHBvc2l0aXZlVHJhbnNjcmlwdGlvbkZhY3RvckxhYmVsLndpZHRoO1xyXG4gICAgY29uc3Qgcm5hUG9seW1lcmFzZUxhYmVsID0gQmlvbW9sZWN1bGVUb29sYm94Tm9kZS5jcmVhdGVSb3dMYWJlbCggcm5hUG9seW1lcmFzZVN0cmluZyApO1xyXG4gICAgY29uc3Qgcm5hUG9seW1lcmFzZUxhYmVsV2lkdGggPSBybmFQb2x5bWVyYXNlTGFiZWwud2lkdGg7XHJcbiAgICBjb25zdCByaWJvc29tZUxhYmVsID0gQmlvbW9sZWN1bGVUb29sYm94Tm9kZS5jcmVhdGVSb3dMYWJlbCggcmlib3NvbWVTdHJpbmcgKTtcclxuICAgIGNvbnN0IHJpYm9zb21lTGFiZWxXaWR0aCA9IHJpYm9zb21lTGFiZWwud2lkdGg7XHJcbiAgICBjb25zdCBtcm5hRGVzdHJveWVyTGFiZWwgPSBCaW9tb2xlY3VsZVRvb2xib3hOb2RlLmNyZWF0ZVJvd0xhYmVsKCBtUm5hRGVzdHJveWVyU3RyaW5nICk7XHJcbiAgICBjb25zdCBtcm5hRGVzdHJveWVyTGFiZWxXaWR0aCA9IG1ybmFEZXN0cm95ZXJMYWJlbC53aWR0aDtcclxuICAgIGNvbnN0IG5lZ2F0aXZlVHJhbnNjcmlwdGlvbkZhY3RvckxhYmVsID0gQmlvbW9sZWN1bGVUb29sYm94Tm9kZS5jcmVhdGVSb3dMYWJlbCggbmVnYXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9ySHRtbFN0cmluZyApO1xyXG4gICAgY29uc3QgbmVnYXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9yTGFiZWxXaWR0aCA9IG5lZ2F0aXZlVHJhbnNjcmlwdGlvbkZhY3RvckxhYmVsLndpZHRoO1xyXG5cclxuICAgIGNvbnN0IG1heFdpZHRoID0gXy5tYXgoIFtcclxuICAgICAgcG9zaXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9yTGFiZWxXaWR0aCxcclxuICAgICAgcm5hUG9seW1lcmFzZUxhYmVsV2lkdGgsXHJcbiAgICAgIHJpYm9zb21lTGFiZWxXaWR0aCxcclxuICAgICAgbXJuYURlc3Ryb3llckxhYmVsV2lkdGgsXHJcbiAgICAgIG5lZ2F0aXZlVHJhbnNjcmlwdGlvbkZhY3RvckxhYmVsV2lkdGhcclxuICAgIF0gKTtcclxuXHJcbiAgICAvLyB0cmFuc2NyaXB0aW9uIGZhY3RvcihzKVxyXG4gICAgY29uc3QgdHJhbnNjcmlwdGlvbkZhY3RvcnMgPSBnZW5lLmdldFRyYW5zY3JpcHRpb25GYWN0b3JDb25maWdzKCk7XHJcbiAgICBjb25zdCBwb3NpdGl2ZVRyYW5zY3JpcHRCb3hOb2RlcyA9IFtdO1xyXG4gICAgY29uc3QgbmVnYXRpdmVUcmFuc2NyaXB0Qm94Tm9kZXMgPSBbXTtcclxuICAgIHRyYW5zY3JpcHRpb25GYWN0b3JzLmZvckVhY2goIHRmQ29uZmlnID0+IHtcclxuICAgICAgY29uc3QgY3JlYXRvck5vZGUgPSB0aGlzLmFkZENyZWF0b3JOb2RlKCBuZXcgVHJhbnNjcmlwdGlvbkZhY3RvckNyZWF0b3JOb2RlKCB0aGlzLCB0ZkNvbmZpZyApICk7XHJcbiAgICAgIGlmICggdGZDb25maWcuaXNQb3NpdGl2ZSApIHtcclxuICAgICAgICBjb25zdCBwb3NpdGl2ZVRyYW5zY3JpcHRpb25Cb3ggPSBuZXcgSEJveCgge1xyXG4gICAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAgbmV3IE5vZGUoIHsgY2hpbGRyZW46IFsgcG9zaXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9yTGFiZWwgXSB9ICksXHJcbiAgICAgICAgICAgIG5ldyBTcGFjZXIoIG1heFdpZHRoIC0gcG9zaXRpdmVUcmFuc2NyaXB0aW9uRmFjdG9yTGFiZWxXaWR0aCwgMCApLFxyXG4gICAgICAgICAgICBjcmVhdG9yTm9kZVxyXG4gICAgICAgICAgXSxcclxuICAgICAgICAgIHNwYWNpbmc6IDEwXHJcbiAgICAgICAgfSApO1xyXG4gICAgICAgIHBvc2l0aXZlVHJhbnNjcmlwdEJveE5vZGVzLnB1c2goIHBvc2l0aXZlVHJhbnNjcmlwdGlvbkJveCApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG5lZ2F0aXZlVHJhbnNjcmlwdGlvbkJveCA9IG5ldyBIQm94KCB7XHJcbiAgICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICBuZXcgTm9kZSggeyBjaGlsZHJlbjogWyBuZWdhdGl2ZVRyYW5zY3JpcHRpb25GYWN0b3JMYWJlbCBdIH0gKSxcclxuICAgICAgICAgICAgbmV3IFNwYWNlciggbWF4V2lkdGggLSBuZWdhdGl2ZVRyYW5zY3JpcHRpb25GYWN0b3JMYWJlbFdpZHRoLCAwICksXHJcbiAgICAgICAgICAgIGNyZWF0b3JOb2RlXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgc3BhY2luZzogMTBcclxuICAgICAgICB9ICk7XHJcbiAgICAgICAgbmVnYXRpdmVUcmFuc2NyaXB0Qm94Tm9kZXMucHVzaCggbmVnYXRpdmVUcmFuc2NyaXB0aW9uQm94ICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBwb2x5bWVyYXNlXHJcbiAgICBjb25zdCBwb2x5bWVyYXNlQm94ID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBybmFQb2x5bWVyYXNlTGFiZWwsXHJcbiAgICAgICAgbmV3IFNwYWNlciggbWF4V2lkdGggLSBybmFQb2x5bWVyYXNlTGFiZWxXaWR0aCwgMCApLFxyXG4gICAgICAgIHRoaXMuYWRkQ3JlYXRvck5vZGUoIG5ldyBSbmFQb2x5bWVyYXNlQ3JlYXRvck5vZGUoIHRoaXMgKSApLFxyXG4gICAgICAgIHRoaXMuYWRkQ3JlYXRvck5vZGUoIG5ldyBSbmFQb2x5bWVyYXNlQ3JlYXRvck5vZGUoIHRoaXMgKSApXHJcbiAgICAgIF0sXHJcbiAgICAgIHNwYWNpbmc6IDEwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gcmlib3NvbWVzXHJcbiAgICBjb25zdCByaWJvc29tZUJveCA9IG5ldyBIQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgcmlib3NvbWVMYWJlbCxcclxuICAgICAgICBuZXcgU3BhY2VyKCBtYXhXaWR0aCAtIHJpYm9zb21lTGFiZWxXaWR0aCwgMCApLFxyXG4gICAgICAgIHRoaXMuYWRkQ3JlYXRvck5vZGUoIG5ldyBSaWJvc29tZUNyZWF0b3JOb2RlKCB0aGlzICkgKSxcclxuICAgICAgICB0aGlzLmFkZENyZWF0b3JOb2RlKCBuZXcgUmlib3NvbWVDcmVhdG9yTm9kZSggdGhpcyApIClcclxuICAgICAgXSxcclxuICAgICAgc3BhY2luZzogMTBcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBtUk5BIGRlc3Ryb3llclxyXG4gICAgY29uc3QgbVJuYURlc3Ryb3llckJveCA9IG5ldyBIQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbXJuYURlc3Ryb3llckxhYmVsLFxyXG4gICAgICAgIG5ldyBTcGFjZXIoIG1heFdpZHRoIC0gbXJuYURlc3Ryb3llckxhYmVsV2lkdGgsIDAgKSxcclxuICAgICAgICB0aGlzLmFkZENyZWF0b3JOb2RlKCBuZXcgTWVzc2VuZ2VyUm5hRGVzdHJveWVyQ3JlYXRvck5vZGUoIHRoaXMgKSApLFxyXG4gICAgICAgIHRoaXMuYWRkQ3JlYXRvck5vZGUoIG5ldyBNZXNzZW5nZXJSbmFEZXN0cm95ZXJDcmVhdG9yTm9kZSggdGhpcyApIClcclxuICAgICAgXSxcclxuICAgICAgc3BhY2luZzogMTBcclxuICAgIH0gKTtcclxuXHJcbiAgICBsZXQgY2hpbGRyZW5Ob2Rlc0FycmF5ID0gW107XHJcbiAgICBjaGlsZHJlbk5vZGVzQXJyYXkgPSBjaGlsZHJlbk5vZGVzQXJyYXkuY29uY2F0KCBwb3NpdGl2ZVRyYW5zY3JpcHRCb3hOb2RlcyApO1xyXG4gICAgY2hpbGRyZW5Ob2Rlc0FycmF5LnB1c2goIHBvbHltZXJhc2VCb3ggKTtcclxuICAgIGNoaWxkcmVuTm9kZXNBcnJheS5wdXNoKCByaWJvc29tZUJveCApO1xyXG4gICAgY2hpbGRyZW5Ob2Rlc0FycmF5LnB1c2goIG1SbmFEZXN0cm95ZXJCb3ggKTtcclxuICAgIGNoaWxkcmVuTm9kZXNBcnJheSA9IGNoaWxkcmVuTm9kZXNBcnJheS5jb25jYXQoIG5lZ2F0aXZlVHJhbnNjcmlwdEJveE5vZGVzICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBjb250ZW50IG9mIHRoZSBwYW5lbFxyXG4gICAgY29uc3QgY29udGVudE5vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgY29udGVudE5vZGUuYWRkQ2hpbGQoIHRvb2xib3hUaXRsZU5vZGUgKTtcclxuICAgIGNvbnN0IGNoaWxkcmVuTm9kZSA9IG5ldyBWQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbk5vZGVzQXJyYXksXHJcbiAgICAgIHNwYWNpbmc6IDEwLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnXHJcbiAgICB9ICk7XHJcbiAgICBjb250ZW50Tm9kZS5hZGRDaGlsZCggY2hpbGRyZW5Ob2RlICk7XHJcbiAgICBjaGlsZHJlbk5vZGUudG9wID0gdG9vbGJveFRpdGxlTm9kZS5ib3R0b20gKyAxMDtcclxuICAgIHRvb2xib3hUaXRsZU5vZGUuY2VudGVyWCA9IGNoaWxkcmVuTm9kZS5jZW50ZXJYO1xyXG5cclxuICAgIC8vIGFkZCB0aGUgcGFuZWxcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBQYW5lbCggY29udGVudE5vZGUsIHtcclxuICAgICAgY29ybmVyUmFkaXVzOiBHRUVDb25zdGFudHMuQ09STkVSX1JBRElVUyxcclxuICAgICAgeE1hcmdpbjogMTAsXHJcbiAgICAgIHlNYXJnaW46IDEwLFxyXG4gICAgICBmaWxsOiBuZXcgQ29sb3IoIDI1MCwgMjUwLCAyNTAgKSxcclxuICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgIHJlc2l6ZTogZmFsc2VcclxuICAgIH0gKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogY29udmVuaWVuY2UgZnVuY3Rpb24gdG8gcHVzaCBhIGNyZWF0b3Igbm9kZSBvbiB0byB0aGUgY3JlYXRvciBub2RlIGxpc3QgYW5kIHJldHVybiBhIHJlZmVyZW5jZSB0byBpdFxyXG4gICAqIEBwYXJhbSB7QmlvbW9sZWN1bGVDcmVhdG9yTm9kZX0gY3JlYXRvck5vZGVcclxuICAgKiBAcmV0dXJucyB7QmlvbW9sZWN1bGVDcmVhdG9yTm9kZX1cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGFkZENyZWF0b3JOb2RlKCBjcmVhdG9yTm9kZSApIHtcclxuICAgIHRoaXMuYmlvbW9sZWN1bGVDcmVhdG9yTm9kZUxpc3QucHVzaCggY3JlYXRvck5vZGUgKTtcclxuICAgIHJldHVybiBjcmVhdG9yTm9kZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlc2V0IHRoZSB0b29sYm94IGJ5IHJlc2V0dGluZyBlYWNoIG9mIHRoZSBiaW9tb2xlY3VsZSBjcmVhdG9yIG5vZGVzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgY29uc3QgYmlvTW9sZWN1bGVDcmVhdG9yTm9kZUxlbmd0aCA9IHRoaXMuYmlvbW9sZWN1bGVDcmVhdG9yTm9kZUxpc3QubGVuZ3RoO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgYmlvTW9sZWN1bGVDcmVhdG9yTm9kZUxlbmd0aDsgaSsrICkge1xyXG4gICAgICB0aGlzLmJpb21vbGVjdWxlQ3JlYXRvck5vZGVMaXN0WyBpIF0ucmVzZXQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBjcmVhdGluZyByb3cgbGFiZWxzXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBzdGF0aWMgY3JlYXRlUm93TGFiZWwoIHRleHQgKSB7XHJcbiAgICByZXR1cm4gbmV3IFJpY2hUZXh0KCB0ZXh0LCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggeyBzaXplOiAxNSB9ICksXHJcbiAgICAgIG1heFdpZHRoOiAxNTAsXHJcbiAgICAgIGFsaWduOiAnY2VudGVyJ1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnQmlvbW9sZWN1bGVUb29sYm94Tm9kZScsIEJpb21vbGVjdWxlVG9vbGJveE5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQmlvbW9sZWN1bGVUb29sYm94Tm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ25HLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQUN2RCxPQUFPQyx3QkFBd0IsTUFBTSxtQ0FBbUM7QUFDeEUsT0FBT0MsK0JBQStCLE1BQU0sMENBQTBDO0FBQ3RGLE9BQU9DLGdDQUFnQyxNQUFNLHVDQUF1QztBQUNwRixPQUFPQyxtQkFBbUIsTUFBTSwwQkFBMEI7QUFDMUQsT0FBT0Msd0JBQXdCLE1BQU0sK0JBQStCO0FBQ3BFLE9BQU9DLDhCQUE4QixNQUFNLHFDQUFxQzs7QUFFaEY7QUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSWhCLFFBQVEsQ0FBRTtFQUFFaUIsSUFBSSxFQUFFLEVBQUU7RUFBRUMsTUFBTSxFQUFFO0FBQU8sQ0FBRSxDQUFDO0FBRS9ELE1BQU1DLHdCQUF3QixHQUFHUiwr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