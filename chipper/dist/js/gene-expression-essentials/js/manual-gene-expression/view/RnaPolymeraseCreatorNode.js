// Copyright 2015-2021, University of Colorado Boulder

/**
 * Node that, when clicked on, will add an RNA polymerase to the model.
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import RnaPolymerase from '../../common/model/RnaPolymerase.js';
import MobileBiomoleculeNode from '../../common/view/MobileBiomoleculeNode.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import BiomoleculeCreatorNode from './BiomoleculeCreatorNode.js';

// constants

// Scaling factor for this node when used as a creator node. May be significantly different from the size of the
// corresponding element in the model.
const SCALING_FACTOR = 0.07;
const SCALING_MVT = ModelViewTransform2.createSinglePointScaleInvertedYMapping(new Vector2(0, 0), new Vector2(0, 0), SCALING_FACTOR);
class RnaPolymeraseCreatorNode extends BiomoleculeCreatorNode {
  /**
   * @param {BiomoleculeToolboxNode} biomoleculeBoxNode - Biomolecule box, which is a sort of toolbox, in which
   * this creator node exists.
   *
   */
  constructor(biomoleculeBoxNode) {
    super(new MobileBiomoleculeNode(SCALING_MVT, new RnaPolymerase()), biomoleculeBoxNode.screenView, biomoleculeBoxNode.modelViewTransform, pos => {
      // Molecule creator function.
      const rnaPolymerase = new RnaPolymerase(biomoleculeBoxNode.model, pos);
      biomoleculeBoxNode.model.addMobileBiomolecule(rnaPolymerase);
      return rnaPolymerase;
    }, mobileBiomolecule => {
      biomoleculeBoxNode.model.removeMobileBiomolecule(mobileBiomolecule);
    }, biomoleculeBoxNode);
  }
}
geneExpressionEssentials.register('RnaPolymeraseCreatorNode', RnaPolymeraseCreatorNode);
export default RnaPolymeraseCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiTW9kZWxWaWV3VHJhbnNmb3JtMiIsIlJuYVBvbHltZXJhc2UiLCJNb2JpbGVCaW9tb2xlY3VsZU5vZGUiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJCaW9tb2xlY3VsZUNyZWF0b3JOb2RlIiwiU0NBTElOR19GQUNUT1IiLCJTQ0FMSU5HX01WVCIsImNyZWF0ZVNpbmdsZVBvaW50U2NhbGVJbnZlcnRlZFlNYXBwaW5nIiwiUm5hUG9seW1lcmFzZUNyZWF0b3JOb2RlIiwiY29uc3RydWN0b3IiLCJiaW9tb2xlY3VsZUJveE5vZGUiLCJzY3JlZW5WaWV3IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicG9zIiwicm5hUG9seW1lcmFzZSIsIm1vZGVsIiwiYWRkTW9iaWxlQmlvbW9sZWN1bGUiLCJtb2JpbGVCaW9tb2xlY3VsZSIsInJlbW92ZU1vYmlsZUJpb21vbGVjdWxlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSbmFQb2x5bWVyYXNlQ3JlYXRvck5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTm9kZSB0aGF0LCB3aGVuIGNsaWNrZWQgb24sIHdpbGwgYWRkIGFuIFJOQSBwb2x5bWVyYXNlIHRvIHRoZSBtb2RlbC5cclxuICpcclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBSbmFQb2x5bWVyYXNlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9SbmFQb2x5bWVyYXNlLmpzJztcclxuaW1wb3J0IE1vYmlsZUJpb21vbGVjdWxlTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Nb2JpbGVCaW9tb2xlY3VsZU5vZGUuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBCaW9tb2xlY3VsZUNyZWF0b3JOb2RlIGZyb20gJy4vQmlvbW9sZWN1bGVDcmVhdG9yTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuXHJcbi8vIFNjYWxpbmcgZmFjdG9yIGZvciB0aGlzIG5vZGUgd2hlbiB1c2VkIGFzIGEgY3JlYXRvciBub2RlLiBNYXkgYmUgc2lnbmlmaWNhbnRseSBkaWZmZXJlbnQgZnJvbSB0aGUgc2l6ZSBvZiB0aGVcclxuLy8gY29ycmVzcG9uZGluZyBlbGVtZW50IGluIHRoZSBtb2RlbC5cclxuY29uc3QgU0NBTElOR19GQUNUT1IgPSAwLjA3O1xyXG5jb25zdCBTQ0FMSU5HX01WVCA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlU2luZ2xlUG9pbnRTY2FsZUludmVydGVkWU1hcHBpbmcoXHJcbiAgbmV3IFZlY3RvcjIoIDAsIDAgKSxcclxuICBuZXcgVmVjdG9yMiggMCwgMCApLFxyXG4gIFNDQUxJTkdfRkFDVE9SXHJcbik7XHJcblxyXG5jbGFzcyBSbmFQb2x5bWVyYXNlQ3JlYXRvck5vZGUgZXh0ZW5kcyBCaW9tb2xlY3VsZUNyZWF0b3JOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCaW9tb2xlY3VsZVRvb2xib3hOb2RlfSBiaW9tb2xlY3VsZUJveE5vZGUgLSBCaW9tb2xlY3VsZSBib3gsIHdoaWNoIGlzIGEgc29ydCBvZiB0b29sYm94LCBpbiB3aGljaFxyXG4gICAqIHRoaXMgY3JlYXRvciBub2RlIGV4aXN0cy5cclxuICAgKlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBiaW9tb2xlY3VsZUJveE5vZGUgKSB7XHJcbiAgICBzdXBlciggbmV3IE1vYmlsZUJpb21vbGVjdWxlTm9kZSggU0NBTElOR19NVlQsIG5ldyBSbmFQb2x5bWVyYXNlKCkgKSxcclxuICAgICAgYmlvbW9sZWN1bGVCb3hOb2RlLnNjcmVlblZpZXcsXHJcbiAgICAgIGJpb21vbGVjdWxlQm94Tm9kZS5tb2RlbFZpZXdUcmFuc2Zvcm0sXHJcblxyXG4gICAgICBwb3MgPT4geyAvLyBNb2xlY3VsZSBjcmVhdG9yIGZ1bmN0aW9uLlxyXG4gICAgICAgIGNvbnN0IHJuYVBvbHltZXJhc2UgPSBuZXcgUm5hUG9seW1lcmFzZSggYmlvbW9sZWN1bGVCb3hOb2RlLm1vZGVsLCBwb3MgKTtcclxuICAgICAgICBiaW9tb2xlY3VsZUJveE5vZGUubW9kZWwuYWRkTW9iaWxlQmlvbW9sZWN1bGUoIHJuYVBvbHltZXJhc2UgKTtcclxuICAgICAgICByZXR1cm4gcm5hUG9seW1lcmFzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIG1vYmlsZUJpb21vbGVjdWxlID0+IHtcclxuICAgICAgICBiaW9tb2xlY3VsZUJveE5vZGUubW9kZWwucmVtb3ZlTW9iaWxlQmlvbW9sZWN1bGUoIG1vYmlsZUJpb21vbGVjdWxlICk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBiaW9tb2xlY3VsZUJveE5vZGVcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdSbmFQb2x5bWVyYXNlQ3JlYXRvck5vZGUnLCBSbmFQb2x5bWVyYXNlQ3JlYXRvck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJuYVBvbHltZXJhc2VDcmVhdG9yTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsbUJBQW1CLE1BQU0sdURBQXVEO0FBQ3ZGLE9BQU9DLGFBQWEsTUFBTSxxQ0FBcUM7QUFDL0QsT0FBT0MscUJBQXFCLE1BQU0sNENBQTRDO0FBQzlFLE9BQU9DLHdCQUF3QixNQUFNLG1DQUFtQztBQUN4RSxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQSxNQUFNQyxjQUFjLEdBQUcsSUFBSTtBQUMzQixNQUFNQyxXQUFXLEdBQUdOLG1CQUFtQixDQUFDTyxzQ0FBc0MsQ0FDNUUsSUFBSVIsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsRUFDbkIsSUFBSUEsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsRUFDbkJNLGNBQ0YsQ0FBQztBQUVELE1BQU1HLHdCQUF3QixTQUFTSixzQkFBc0IsQ0FBQztFQUU1RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLGtCQUFrQixFQUFHO0lBQ2hDLEtBQUssQ0FBRSxJQUFJUixxQkFBcUIsQ0FBRUksV0FBVyxFQUFFLElBQUlMLGFBQWEsQ0FBQyxDQUFFLENBQUMsRUFDbEVTLGtCQUFrQixDQUFDQyxVQUFVLEVBQzdCRCxrQkFBa0IsQ0FBQ0Usa0JBQWtCLEVBRXJDQyxHQUFHLElBQUk7TUFBRTtNQUNQLE1BQU1DLGFBQWEsR0FBRyxJQUFJYixhQUFhLENBQUVTLGtCQUFrQixDQUFDSyxLQUFLLEVBQUVGLEdBQUksQ0FBQztNQUN4RUgsa0JBQWtCLENBQUNLLEtBQUssQ0FBQ0Msb0JBQW9CLENBQUVGLGFBQWMsQ0FBQztNQUM5RCxPQUFPQSxhQUFhO0lBQ3RCLENBQUMsRUFFREcsaUJBQWlCLElBQUk7TUFDbkJQLGtCQUFrQixDQUFDSyxLQUFLLENBQUNHLHVCQUF1QixDQUFFRCxpQkFBa0IsQ0FBQztJQUN2RSxDQUFDLEVBRURQLGtCQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFQLHdCQUF3QixDQUFDZ0IsUUFBUSxDQUFFLDBCQUEwQixFQUFFWCx3QkFBeUIsQ0FBQztBQUV6RixlQUFlQSx3QkFBd0IifQ==