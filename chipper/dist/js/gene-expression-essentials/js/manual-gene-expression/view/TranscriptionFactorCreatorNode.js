// Copyright 2015-2021, University of Colorado Boulder

/**
 * Node that, when clicked on, will add a transcription factor to the active area.
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import StubGeneExpressionModel from '../../common/model/StubGeneExpressionModel.js';
import TranscriptionFactor from '../../common/model/TranscriptionFactor.js';
import MobileBiomoleculeNode from '../../common/view/MobileBiomoleculeNode.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import BiomoleculeCreatorNode from './BiomoleculeCreatorNode.js';

// constants
// Scaling factor for this node when used as a creator node. May be significantly different from the size of the
// corresponding element in the model.
const SCALING_FACTOR = 0.07;
const SCALING_MVT = ModelViewTransform2.createSinglePointScaleInvertedYMapping(new Vector2(0, 0), new Vector2(0, 0), SCALING_FACTOR);
class TranscriptionFactorCreatorNode extends BiomoleculeCreatorNode {
  /**
   * @param {BiomoleculeToolboxNode} biomoleculeBoxNode
   * @param {TranscriptionFactorConfig} tfConfig
   */
  constructor(biomoleculeBoxNode, tfConfig) {
    super(new MobileBiomoleculeNode(SCALING_MVT, new TranscriptionFactor(new StubGeneExpressionModel(), tfConfig, new Vector2(0, 0))), biomoleculeBoxNode.screenView, biomoleculeBoxNode.modelViewTransform, pos => {
      const transcriptionFactor = new TranscriptionFactor(biomoleculeBoxNode.model, tfConfig, pos);
      biomoleculeBoxNode.model.addMobileBiomolecule(transcriptionFactor);
      return transcriptionFactor;
    }, mobileBiomolecule => {
      biomoleculeBoxNode.model.removeMobileBiomolecule(mobileBiomolecule);
    }, biomoleculeBoxNode);
  }
}
geneExpressionEssentials.register('TranscriptionFactorCreatorNode', TranscriptionFactorCreatorNode);
export default TranscriptionFactorCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiTW9kZWxWaWV3VHJhbnNmb3JtMiIsIlN0dWJHZW5lRXhwcmVzc2lvbk1vZGVsIiwiVHJhbnNjcmlwdGlvbkZhY3RvciIsIk1vYmlsZUJpb21vbGVjdWxlTm9kZSIsImdlbmVFeHByZXNzaW9uRXNzZW50aWFscyIsIkJpb21vbGVjdWxlQ3JlYXRvck5vZGUiLCJTQ0FMSU5HX0ZBQ1RPUiIsIlNDQUxJTkdfTVZUIiwiY3JlYXRlU2luZ2xlUG9pbnRTY2FsZUludmVydGVkWU1hcHBpbmciLCJUcmFuc2NyaXB0aW9uRmFjdG9yQ3JlYXRvck5vZGUiLCJjb25zdHJ1Y3RvciIsImJpb21vbGVjdWxlQm94Tm9kZSIsInRmQ29uZmlnIiwic2NyZWVuVmlldyIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInBvcyIsInRyYW5zY3JpcHRpb25GYWN0b3IiLCJtb2RlbCIsImFkZE1vYmlsZUJpb21vbGVjdWxlIiwibW9iaWxlQmlvbW9sZWN1bGUiLCJyZW1vdmVNb2JpbGVCaW9tb2xlY3VsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVHJhbnNjcmlwdGlvbkZhY3RvckNyZWF0b3JOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vZGUgdGhhdCwgd2hlbiBjbGlja2VkIG9uLCB3aWxsIGFkZCBhIHRyYW5zY3JpcHRpb24gZmFjdG9yIHRvIHRoZSBhY3RpdmUgYXJlYS5cclxuICpcclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBTdHViR2VuZUV4cHJlc3Npb25Nb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU3R1YkdlbmVFeHByZXNzaW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgVHJhbnNjcmlwdGlvbkZhY3RvciBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVHJhbnNjcmlwdGlvbkZhY3Rvci5qcyc7XHJcbmltcG9ydCBNb2JpbGVCaW9tb2xlY3VsZU5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTW9iaWxlQmlvbW9sZWN1bGVOb2RlLmpzJztcclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgQmlvbW9sZWN1bGVDcmVhdG9yTm9kZSBmcm9tICcuL0Jpb21vbGVjdWxlQ3JlYXRvck5vZGUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbi8vIFNjYWxpbmcgZmFjdG9yIGZvciB0aGlzIG5vZGUgd2hlbiB1c2VkIGFzIGEgY3JlYXRvciBub2RlLiBNYXkgYmUgc2lnbmlmaWNhbnRseSBkaWZmZXJlbnQgZnJvbSB0aGUgc2l6ZSBvZiB0aGVcclxuLy8gY29ycmVzcG9uZGluZyBlbGVtZW50IGluIHRoZSBtb2RlbC5cclxuY29uc3QgU0NBTElOR19GQUNUT1IgPSAwLjA3O1xyXG5jb25zdCBTQ0FMSU5HX01WVCA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlU2luZ2xlUG9pbnRTY2FsZUludmVydGVkWU1hcHBpbmcoXHJcbiAgbmV3IFZlY3RvcjIoIDAsIDAgKSxcclxuICBuZXcgVmVjdG9yMiggMCwgMCApLFxyXG4gIFNDQUxJTkdfRkFDVE9SXHJcbik7XHJcblxyXG5jbGFzcyBUcmFuc2NyaXB0aW9uRmFjdG9yQ3JlYXRvck5vZGUgZXh0ZW5kcyBCaW9tb2xlY3VsZUNyZWF0b3JOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCaW9tb2xlY3VsZVRvb2xib3hOb2RlfSBiaW9tb2xlY3VsZUJveE5vZGVcclxuICAgKiBAcGFyYW0ge1RyYW5zY3JpcHRpb25GYWN0b3JDb25maWd9IHRmQ29uZmlnXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGJpb21vbGVjdWxlQm94Tm9kZSwgdGZDb25maWcgKSB7XHJcbiAgICBzdXBlciggbmV3IE1vYmlsZUJpb21vbGVjdWxlTm9kZSggU0NBTElOR19NVlQsXHJcbiAgICAgIG5ldyBUcmFuc2NyaXB0aW9uRmFjdG9yKCBuZXcgU3R1YkdlbmVFeHByZXNzaW9uTW9kZWwoKSwgdGZDb25maWcsIG5ldyBWZWN0b3IyKCAwLCAwICkgKSApLFxyXG4gICAgICBiaW9tb2xlY3VsZUJveE5vZGUuc2NyZWVuVmlldyxcclxuICAgICAgYmlvbW9sZWN1bGVCb3hOb2RlLm1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgcG9zID0+IHtcclxuICAgICAgICBjb25zdCB0cmFuc2NyaXB0aW9uRmFjdG9yID0gbmV3IFRyYW5zY3JpcHRpb25GYWN0b3IoIGJpb21vbGVjdWxlQm94Tm9kZS5tb2RlbCwgdGZDb25maWcsIHBvcyApO1xyXG4gICAgICAgIGJpb21vbGVjdWxlQm94Tm9kZS5tb2RlbC5hZGRNb2JpbGVCaW9tb2xlY3VsZSggdHJhbnNjcmlwdGlvbkZhY3RvciApO1xyXG4gICAgICAgIHJldHVybiB0cmFuc2NyaXB0aW9uRmFjdG9yO1xyXG4gICAgICB9LFxyXG4gICAgICBtb2JpbGVCaW9tb2xlY3VsZSA9PiB7XHJcbiAgICAgICAgYmlvbW9sZWN1bGVCb3hOb2RlLm1vZGVsLnJlbW92ZU1vYmlsZUJpb21vbGVjdWxlKCBtb2JpbGVCaW9tb2xlY3VsZSApO1xyXG4gICAgICB9LFxyXG4gICAgICBiaW9tb2xlY3VsZUJveE5vZGVcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdUcmFuc2NyaXB0aW9uRmFjdG9yQ3JlYXRvck5vZGUnLCBUcmFuc2NyaXB0aW9uRmFjdG9yQ3JlYXRvck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRyYW5zY3JpcHRpb25GYWN0b3JDcmVhdG9yTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsbUJBQW1CLE1BQU0sdURBQXVEO0FBQ3ZGLE9BQU9DLHVCQUF1QixNQUFNLCtDQUErQztBQUNuRixPQUFPQyxtQkFBbUIsTUFBTSwyQ0FBMkM7QUFDM0UsT0FBT0MscUJBQXFCLE1BQU0sNENBQTRDO0FBQzlFLE9BQU9DLHdCQUF3QixNQUFNLG1DQUFtQztBQUN4RSxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGNBQWMsR0FBRyxJQUFJO0FBQzNCLE1BQU1DLFdBQVcsR0FBR1AsbUJBQW1CLENBQUNRLHNDQUFzQyxDQUM1RSxJQUFJVCxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUNuQixJQUFJQSxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUNuQk8sY0FDRixDQUFDO0FBRUQsTUFBTUcsOEJBQThCLFNBQVNKLHNCQUFzQixDQUFDO0VBRWxFO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLGtCQUFrQixFQUFFQyxRQUFRLEVBQUc7SUFDMUMsS0FBSyxDQUFFLElBQUlULHFCQUFxQixDQUFFSSxXQUFXLEVBQzNDLElBQUlMLG1CQUFtQixDQUFFLElBQUlELHVCQUF1QixDQUFDLENBQUMsRUFBRVcsUUFBUSxFQUFFLElBQUliLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFFLENBQUUsQ0FBQyxFQUN6Rlksa0JBQWtCLENBQUNFLFVBQVUsRUFDN0JGLGtCQUFrQixDQUFDRyxrQkFBa0IsRUFDckNDLEdBQUcsSUFBSTtNQUNMLE1BQU1DLG1CQUFtQixHQUFHLElBQUlkLG1CQUFtQixDQUFFUyxrQkFBa0IsQ0FBQ00sS0FBSyxFQUFFTCxRQUFRLEVBQUVHLEdBQUksQ0FBQztNQUM5Rkosa0JBQWtCLENBQUNNLEtBQUssQ0FBQ0Msb0JBQW9CLENBQUVGLG1CQUFvQixDQUFDO01BQ3BFLE9BQU9BLG1CQUFtQjtJQUM1QixDQUFDLEVBQ0RHLGlCQUFpQixJQUFJO01BQ25CUixrQkFBa0IsQ0FBQ00sS0FBSyxDQUFDRyx1QkFBdUIsQ0FBRUQsaUJBQWtCLENBQUM7SUFDdkUsQ0FBQyxFQUNEUixrQkFDRixDQUFDO0VBQ0g7QUFDRjtBQUVBUCx3QkFBd0IsQ0FBQ2lCLFFBQVEsQ0FBRSxnQ0FBZ0MsRUFBRVosOEJBQStCLENBQUM7QUFFckcsZUFBZUEsOEJBQThCIn0=