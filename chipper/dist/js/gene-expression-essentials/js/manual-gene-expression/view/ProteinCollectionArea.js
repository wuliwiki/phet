// Copyright 2015-2023, University of Colorado Boulder

/**
 * Class that represents the collection area, where several different types of protein can be collected.
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Matrix3 from '../../../../dot/js/Matrix3.js';
import { LineStyles } from '../../../../kite/js/imports.js';
import { HBox, Node } from '../../../../scenery/js/imports.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import ProteinA from '../model/ProteinA.js';
import ProteinB from '../model/ProteinB.js';
import ProteinC from '../model/ProteinC.js';
import ProteinCaptureNode from './ProteinCaptureNode.js';
class ProteinCollectionArea extends Node {
  /**
   * @param {ManualGeneExpressionModel} model
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(model, modelViewTransform) {
    super();

    // Get a transform that performs only the scaling portion of the modelViewTransform.
    const scaleVector = modelViewTransform.getMatrix().getScaleVector();
    const scale = modelViewTransform.getMatrix().scaleVector.x;

    // The getScaleVector method of Matrix3 always returns positive value for the scales, even though
    // the modelViewTransform uses inverted scaling for Y, so changing the assertion statement to check for absolute values
    // see issue #7
    assert && assert(scale === Math.abs(scaleVector.y)); // This only handles symmetric transform case.
    const transform = Matrix3.scaling(scale, -scale);

    // Figure out the max dimensions of the various protein types so that the capture nodes can be properly laid out.
    const captureNodeBackgroundSize = new Dimension2(0, 0);
    const proteinTypes = [ProteinA, ProteinB, ProteinC];
    for (let i = 0; i < proteinTypes.length; i++) {
      const protein = new proteinTypes[i]();
      const proteinShapeBounds = protein.getFullyGrownShape().transformed(transform).getStrokedBounds(new LineStyles({
        lineWidth: 1
      }));
      captureNodeBackgroundSize.width = Math.max(proteinShapeBounds.width * ProteinCaptureNode.SCALE_FOR_FLASH_NODE, captureNodeBackgroundSize.width);
      captureNodeBackgroundSize.height = Math.max(proteinShapeBounds.height * ProteinCaptureNode.SCALE_FOR_FLASH_NODE, captureNodeBackgroundSize.height);
    }

    // Add the collection area, which is a set of collection nodes.
    this.addChild(new HBox({
      children: [new ProteinCaptureNode(model, 'ProteinA', transform, captureNodeBackgroundSize), new ProteinCaptureNode(model, 'ProteinB', transform, captureNodeBackgroundSize), new ProteinCaptureNode(model, 'ProteinC', transform, captureNodeBackgroundSize)],
      spacing: 0
    }));
  }
}
geneExpressionEssentials.register('ProteinCollectionArea', ProteinCollectionArea);
export default ProteinCollectionArea;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiTWF0cml4MyIsIkxpbmVTdHlsZXMiLCJIQm94IiwiTm9kZSIsImdlbmVFeHByZXNzaW9uRXNzZW50aWFscyIsIlByb3RlaW5BIiwiUHJvdGVpbkIiLCJQcm90ZWluQyIsIlByb3RlaW5DYXB0dXJlTm9kZSIsIlByb3RlaW5Db2xsZWN0aW9uQXJlYSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJzY2FsZVZlY3RvciIsImdldE1hdHJpeCIsImdldFNjYWxlVmVjdG9yIiwic2NhbGUiLCJ4IiwiYXNzZXJ0IiwiTWF0aCIsImFicyIsInkiLCJ0cmFuc2Zvcm0iLCJzY2FsaW5nIiwiY2FwdHVyZU5vZGVCYWNrZ3JvdW5kU2l6ZSIsInByb3RlaW5UeXBlcyIsImkiLCJsZW5ndGgiLCJwcm90ZWluIiwicHJvdGVpblNoYXBlQm91bmRzIiwiZ2V0RnVsbHlHcm93blNoYXBlIiwidHJhbnNmb3JtZWQiLCJnZXRTdHJva2VkQm91bmRzIiwibGluZVdpZHRoIiwid2lkdGgiLCJtYXgiLCJTQ0FMRV9GT1JfRkxBU0hfTk9ERSIsImhlaWdodCIsImFkZENoaWxkIiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm90ZWluQ29sbGVjdGlvbkFyZWEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2xhc3MgdGhhdCByZXByZXNlbnRzIHRoZSBjb2xsZWN0aW9uIGFyZWEsIHdoZXJlIHNldmVyYWwgZGlmZmVyZW50IHR5cGVzIG9mIHByb3RlaW4gY2FuIGJlIGNvbGxlY3RlZC5cclxuICpcclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvTWF0cml4My5qcyc7XHJcbmltcG9ydCB7IExpbmVTdHlsZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGdlbmVFeHByZXNzaW9uRXNzZW50aWFscyBmcm9tICcuLi8uLi9nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMuanMnO1xyXG5pbXBvcnQgUHJvdGVpbkEgZnJvbSAnLi4vbW9kZWwvUHJvdGVpbkEuanMnO1xyXG5pbXBvcnQgUHJvdGVpbkIgZnJvbSAnLi4vbW9kZWwvUHJvdGVpbkIuanMnO1xyXG5pbXBvcnQgUHJvdGVpbkMgZnJvbSAnLi4vbW9kZWwvUHJvdGVpbkMuanMnO1xyXG5pbXBvcnQgUHJvdGVpbkNhcHR1cmVOb2RlIGZyb20gJy4vUHJvdGVpbkNhcHR1cmVOb2RlLmpzJztcclxuXHJcbmNsYXNzIFByb3RlaW5Db2xsZWN0aW9uQXJlYSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge01hbnVhbEdlbmVFeHByZXNzaW9uTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG1vZGVsVmlld1RyYW5zZm9ybSApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gR2V0IGEgdHJhbnNmb3JtIHRoYXQgcGVyZm9ybXMgb25seSB0aGUgc2NhbGluZyBwb3J0aW9uIG9mIHRoZSBtb2RlbFZpZXdUcmFuc2Zvcm0uXHJcbiAgICBjb25zdCBzY2FsZVZlY3RvciA9IG1vZGVsVmlld1RyYW5zZm9ybS5nZXRNYXRyaXgoKS5nZXRTY2FsZVZlY3RvcigpO1xyXG4gICAgY29uc3Qgc2NhbGUgPSBtb2RlbFZpZXdUcmFuc2Zvcm0uZ2V0TWF0cml4KCkuc2NhbGVWZWN0b3IueDtcclxuXHJcbiAgICAvLyBUaGUgZ2V0U2NhbGVWZWN0b3IgbWV0aG9kIG9mIE1hdHJpeDMgYWx3YXlzIHJldHVybnMgcG9zaXRpdmUgdmFsdWUgZm9yIHRoZSBzY2FsZXMsIGV2ZW4gdGhvdWdoXHJcbiAgICAvLyB0aGUgbW9kZWxWaWV3VHJhbnNmb3JtIHVzZXMgaW52ZXJ0ZWQgc2NhbGluZyBmb3IgWSwgc28gY2hhbmdpbmcgdGhlIGFzc2VydGlvbiBzdGF0ZW1lbnQgdG8gY2hlY2sgZm9yIGFic29sdXRlIHZhbHVlc1xyXG4gICAgLy8gc2VlIGlzc3VlICM3XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzY2FsZSA9PT0gTWF0aC5hYnMoIHNjYWxlVmVjdG9yLnkgKSApOyAvLyBUaGlzIG9ubHkgaGFuZGxlcyBzeW1tZXRyaWMgdHJhbnNmb3JtIGNhc2UuXHJcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBNYXRyaXgzLnNjYWxpbmcoIHNjYWxlLCAtc2NhbGUgKTtcclxuXHJcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSBtYXggZGltZW5zaW9ucyBvZiB0aGUgdmFyaW91cyBwcm90ZWluIHR5cGVzIHNvIHRoYXQgdGhlIGNhcHR1cmUgbm9kZXMgY2FuIGJlIHByb3Blcmx5IGxhaWQgb3V0LlxyXG4gICAgY29uc3QgY2FwdHVyZU5vZGVCYWNrZ3JvdW5kU2l6ZSA9IG5ldyBEaW1lbnNpb24yKCAwLCAwICk7XHJcblxyXG4gICAgY29uc3QgcHJvdGVpblR5cGVzID0gWyBQcm90ZWluQSwgUHJvdGVpbkIsIFByb3RlaW5DIF07XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm90ZWluVHlwZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIGNvbnN0IHByb3RlaW4gPSBuZXcgcHJvdGVpblR5cGVzWyBpIF0oKTtcclxuICAgICAgY29uc3QgcHJvdGVpblNoYXBlQm91bmRzID0gcHJvdGVpbi5nZXRGdWxseUdyb3duU2hhcGUoKVxyXG4gICAgICAgIC50cmFuc2Zvcm1lZCggdHJhbnNmb3JtIClcclxuICAgICAgICAuZ2V0U3Ryb2tlZEJvdW5kcyggbmV3IExpbmVTdHlsZXMoIHsgbGluZVdpZHRoOiAxIH0gKSApO1xyXG4gICAgICBjYXB0dXJlTm9kZUJhY2tncm91bmRTaXplLndpZHRoID0gKCBNYXRoLm1heChcclxuICAgICAgICBwcm90ZWluU2hhcGVCb3VuZHMud2lkdGggKiBQcm90ZWluQ2FwdHVyZU5vZGUuU0NBTEVfRk9SX0ZMQVNIX05PREUsXHJcbiAgICAgICAgY2FwdHVyZU5vZGVCYWNrZ3JvdW5kU2l6ZS53aWR0aFxyXG4gICAgICApICk7XHJcbiAgICAgIGNhcHR1cmVOb2RlQmFja2dyb3VuZFNpemUuaGVpZ2h0ID0gKCBNYXRoLm1heChcclxuICAgICAgICAgIHByb3RlaW5TaGFwZUJvdW5kcy5oZWlnaHQgKiBQcm90ZWluQ2FwdHVyZU5vZGUuU0NBTEVfRk9SX0ZMQVNIX05PREUsXHJcbiAgICAgICAgICBjYXB0dXJlTm9kZUJhY2tncm91bmRTaXplLmhlaWdodCApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIHRoZSBjb2xsZWN0aW9uIGFyZWEsIHdoaWNoIGlzIGEgc2V0IG9mIGNvbGxlY3Rpb24gbm9kZXMuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBQcm90ZWluQ2FwdHVyZU5vZGUoIG1vZGVsLCAnUHJvdGVpbkEnLCB0cmFuc2Zvcm0sIGNhcHR1cmVOb2RlQmFja2dyb3VuZFNpemUgKSxcclxuICAgICAgICBuZXcgUHJvdGVpbkNhcHR1cmVOb2RlKCBtb2RlbCwgJ1Byb3RlaW5CJywgdHJhbnNmb3JtLCBjYXB0dXJlTm9kZUJhY2tncm91bmRTaXplICksXHJcbiAgICAgICAgbmV3IFByb3RlaW5DYXB0dXJlTm9kZSggbW9kZWwsICdQcm90ZWluQycsIHRyYW5zZm9ybSwgY2FwdHVyZU5vZGVCYWNrZ3JvdW5kU2l6ZSApXHJcbiAgICAgIF0sXHJcbiAgICAgIHNwYWNpbmc6IDBcclxuICAgIH0gKSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnUHJvdGVpbkNvbGxlY3Rpb25BcmVhJywgUHJvdGVpbkNvbGxlY3Rpb25BcmVhICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm90ZWluQ29sbGVjdGlvbkFyZWE7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsVUFBVSxRQUFRLGdDQUFnQztBQUMzRCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBQ3hFLE9BQU9DLFFBQVEsTUFBTSxzQkFBc0I7QUFDM0MsT0FBT0MsUUFBUSxNQUFNLHNCQUFzQjtBQUMzQyxPQUFPQyxRQUFRLE1BQU0sc0JBQXNCO0FBQzNDLE9BQU9DLGtCQUFrQixNQUFNLHlCQUF5QjtBQUV4RCxNQUFNQyxxQkFBcUIsU0FBU04sSUFBSSxDQUFDO0VBRXZDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VPLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsa0JBQWtCLEVBQUc7SUFDdkMsS0FBSyxDQUFDLENBQUM7O0lBRVA7SUFDQSxNQUFNQyxXQUFXLEdBQUdELGtCQUFrQixDQUFDRSxTQUFTLENBQUMsQ0FBQyxDQUFDQyxjQUFjLENBQUMsQ0FBQztJQUNuRSxNQUFNQyxLQUFLLEdBQUdKLGtCQUFrQixDQUFDRSxTQUFTLENBQUMsQ0FBQyxDQUFDRCxXQUFXLENBQUNJLENBQUM7O0lBRTFEO0lBQ0E7SUFDQTtJQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsS0FBSyxLQUFLRyxJQUFJLENBQUNDLEdBQUcsQ0FBRVAsV0FBVyxDQUFDUSxDQUFFLENBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsTUFBTUMsU0FBUyxHQUFHdEIsT0FBTyxDQUFDdUIsT0FBTyxDQUFFUCxLQUFLLEVBQUUsQ0FBQ0EsS0FBTSxDQUFDOztJQUVsRDtJQUNBLE1BQU1RLHlCQUF5QixHQUFHLElBQUl6QixVQUFVLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztJQUV4RCxNQUFNMEIsWUFBWSxHQUFHLENBQUVwQixRQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxDQUFFO0lBQ3JELEtBQU0sSUFBSW1CLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsWUFBWSxDQUFDRSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFHO01BQzlDLE1BQU1FLE9BQU8sR0FBRyxJQUFJSCxZQUFZLENBQUVDLENBQUMsQ0FBRSxDQUFDLENBQUM7TUFDdkMsTUFBTUcsa0JBQWtCLEdBQUdELE9BQU8sQ0FBQ0Usa0JBQWtCLENBQUMsQ0FBQyxDQUNwREMsV0FBVyxDQUFFVCxTQUFVLENBQUMsQ0FDeEJVLGdCQUFnQixDQUFFLElBQUkvQixVQUFVLENBQUU7UUFBRWdDLFNBQVMsRUFBRTtNQUFFLENBQUUsQ0FBRSxDQUFDO01BQ3pEVCx5QkFBeUIsQ0FBQ1UsS0FBSyxHQUFLZixJQUFJLENBQUNnQixHQUFHLENBQzFDTixrQkFBa0IsQ0FBQ0ssS0FBSyxHQUFHMUIsa0JBQWtCLENBQUM0QixvQkFBb0IsRUFDbEVaLHlCQUF5QixDQUFDVSxLQUM1QixDQUFHO01BQ0hWLHlCQUF5QixDQUFDYSxNQUFNLEdBQUtsQixJQUFJLENBQUNnQixHQUFHLENBQ3pDTixrQkFBa0IsQ0FBQ1EsTUFBTSxHQUFHN0Isa0JBQWtCLENBQUM0QixvQkFBb0IsRUFDbkVaLHlCQUF5QixDQUFDYSxNQUFPLENBQ3BDO0lBQ0g7O0lBRUE7SUFDQSxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJcEMsSUFBSSxDQUFFO01BQ3ZCcUMsUUFBUSxFQUFFLENBQ1IsSUFBSS9CLGtCQUFrQixDQUFFRyxLQUFLLEVBQUUsVUFBVSxFQUFFVyxTQUFTLEVBQUVFLHlCQUEwQixDQUFDLEVBQ2pGLElBQUloQixrQkFBa0IsQ0FBRUcsS0FBSyxFQUFFLFVBQVUsRUFBRVcsU0FBUyxFQUFFRSx5QkFBMEIsQ0FBQyxFQUNqRixJQUFJaEIsa0JBQWtCLENBQUVHLEtBQUssRUFBRSxVQUFVLEVBQUVXLFNBQVMsRUFBRUUseUJBQTBCLENBQUMsQ0FDbEY7TUFDRGdCLE9BQU8sRUFBRTtJQUNYLENBQUUsQ0FBRSxDQUFDO0VBQ1A7QUFDRjtBQUVBcEMsd0JBQXdCLENBQUNxQyxRQUFRLENBQUUsdUJBQXVCLEVBQUVoQyxxQkFBc0IsQ0FBQztBQUVuRixlQUFlQSxxQkFBcUIifQ==