// Copyright 2015-2022, University of Colorado Boulder

/**
 * main screen view type for the 'Expression' screen
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import manualGeneExpressionIcon_png from '../../mipmaps/manualGeneExpressionIcon_png.js';
import GEEConstants from '../common/GEEConstants.js';
import geneExpressionEssentials from '../geneExpressionEssentials.js';
import GeneExpressionEssentialsStrings from '../GeneExpressionEssentialsStrings.js';
import ManualGeneExpressionModel from './model/ManualGeneExpressionModel.js';
import ManualGeneExpressionScreenView from './view/ManualGeneExpressionScreenView.js';
class ManualGeneExpressionScreen extends Screen {
  constructor() {
    const options = {
      name: GeneExpressionEssentialsStrings.screen.expressionStringProperty,
      backgroundColorProperty: new Property('#ABCBDB'),
      homeScreenIcon: new ScreenIcon(new Image(manualGeneExpressionIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      maxDT: GEEConstants.MAX_DT
    };
    super(() => new ManualGeneExpressionModel(), model => new ManualGeneExpressionScreenView(model), options);
  }
}
geneExpressionEssentials.register('ManualGeneExpressionScreen', ManualGeneExpressionScreen);
export default ManualGeneExpressionScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsIm1hbnVhbEdlbmVFeHByZXNzaW9uSWNvbl9wbmciLCJHRUVDb25zdGFudHMiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzIiwiTWFudWFsR2VuZUV4cHJlc3Npb25Nb2RlbCIsIk1hbnVhbEdlbmVFeHByZXNzaW9uU2NyZWVuVmlldyIsIk1hbnVhbEdlbmVFeHByZXNzaW9uU2NyZWVuIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsImV4cHJlc3Npb25TdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJtYXhEVCIsIk1BWF9EVCIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYW51YWxHZW5lRXhwcmVzc2lvblNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBtYWluIHNjcmVlbiB2aWV3IHR5cGUgZm9yIHRoZSAnRXhwcmVzc2lvbicgc2NyZWVuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWZcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbWFudWFsR2VuZUV4cHJlc3Npb25JY29uX3BuZyBmcm9tICcuLi8uLi9taXBtYXBzL21hbnVhbEdlbmVFeHByZXNzaW9uSWNvbl9wbmcuanMnO1xyXG5pbXBvcnQgR0VFQ29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbi9HRUVDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzIGZyb20gJy4uL0dlbmVFeHByZXNzaW9uRXNzZW50aWFsc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgTWFudWFsR2VuZUV4cHJlc3Npb25Nb2RlbCBmcm9tICcuL21vZGVsL01hbnVhbEdlbmVFeHByZXNzaW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgTWFudWFsR2VuZUV4cHJlc3Npb25TY3JlZW5WaWV3IGZyb20gJy4vdmlldy9NYW51YWxHZW5lRXhwcmVzc2lvblNjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgTWFudWFsR2VuZUV4cHJlc3Npb25TY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiBHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzLnNjcmVlbi5leHByZXNzaW9uU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoICcjQUJDQkRCJyApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggbWFudWFsR2VuZUV4cHJlc3Npb25JY29uX3BuZyApLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9ICksXHJcbiAgICAgIG1heERUOiBHRUVDb25zdGFudHMuTUFYX0RUXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgTWFudWFsR2VuZUV4cHJlc3Npb25Nb2RlbCgpLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgTWFudWFsR2VuZUV4cHJlc3Npb25TY3JlZW5WaWV3KCBtb2RlbCApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnTWFudWFsR2VuZUV4cHJlc3Npb25TY3JlZW4nLCBNYW51YWxHZW5lRXhwcmVzc2lvblNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBNYW51YWxHZW5lRXhwcmVzc2lvblNjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsNEJBQTRCLE1BQU0sK0NBQStDO0FBQ3hGLE9BQU9DLFlBQVksTUFBTSwyQkFBMkI7QUFDcEQsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLCtCQUErQixNQUFNLHVDQUF1QztBQUNuRixPQUFPQyx5QkFBeUIsTUFBTSxzQ0FBc0M7QUFDNUUsT0FBT0MsOEJBQThCLE1BQU0sMENBQTBDO0FBRXJGLE1BQU1DLDBCQUEwQixTQUFTVCxNQUFNLENBQUM7RUFFOUNVLFdBQVdBLENBQUEsRUFBRztJQUVaLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVOLCtCQUErQixDQUFDTyxNQUFNLENBQUNDLHdCQUF3QjtNQUNyRUMsdUJBQXVCLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRSxTQUFVLENBQUM7TUFDbERpQixjQUFjLEVBQUUsSUFBSWYsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUMsNEJBQTZCLENBQUMsRUFBRTtRQUN6RWMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hDLEtBQUssRUFBRWYsWUFBWSxDQUFDZ0I7SUFDdEIsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUliLHlCQUF5QixDQUFDLENBQUMsRUFDckNjLEtBQUssSUFBSSxJQUFJYiw4QkFBOEIsQ0FBRWEsS0FBTSxDQUFDLEVBQ3BEVixPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFOLHdCQUF3QixDQUFDaUIsUUFBUSxDQUFFLDRCQUE0QixFQUFFYiwwQkFBMkIsQ0FBQztBQUM3RixlQUFlQSwwQkFBMEIifQ==