// Copyright 2015-2022, University of Colorado Boulder
/**
 * main screen view for the 'mRNA' screen
 *
 * @author Sharfudeen Ashraf
 * @author John Blanco
 * @author Aadish Gupta
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import mrnaProductionIcon_png from '../../mipmaps/mrnaProductionIcon_png.js';
import GEEConstants from '../common/GEEConstants.js';
import geneExpressionEssentials from '../geneExpressionEssentials.js';
import GeneExpressionEssentialsStrings from '../GeneExpressionEssentialsStrings.js';
import MessengerRnaProductionModel from './model/MessengerRnaProductionModel.js';
import MessengerRnaProductionScreenView from './view/MessengerRnaProductionScreenView.js';
class MessengerRnaProductionScreen extends Screen {
  constructor() {
    const options = {
      name: GeneExpressionEssentialsStrings.screen.mRnaStringProperty,
      backgroundColorProperty: new Property('#ABCBDB'),
      homeScreenIcon: new ScreenIcon(new Image(mrnaProductionIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      maxDT: GEEConstants.MAX_DT
    };
    super(() => new MessengerRnaProductionModel(), model => new MessengerRnaProductionScreenView(model), options);
  }
}
geneExpressionEssentials.register('MessengerRnaProductionScreen', MessengerRnaProductionScreen);
export default MessengerRnaProductionScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsIm1ybmFQcm9kdWN0aW9uSWNvbl9wbmciLCJHRUVDb25zdGFudHMiLCJnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMiLCJHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzIiwiTWVzc2VuZ2VyUm5hUHJvZHVjdGlvbk1vZGVsIiwiTWVzc2VuZ2VyUm5hUHJvZHVjdGlvblNjcmVlblZpZXciLCJNZXNzZW5nZXJSbmFQcm9kdWN0aW9uU2NyZWVuIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsIm1SbmFTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJtYXhEVCIsIk1BWF9EVCIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNZXNzZW5nZXJSbmFQcm9kdWN0aW9uU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG4vKipcclxuICogbWFpbiBzY3JlZW4gdmlldyBmb3IgdGhlICdtUk5BJyBzY3JlZW5cclxuICpcclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtcm5hUHJvZHVjdGlvbkljb25fcG5nIGZyb20gJy4uLy4uL21pcG1hcHMvbXJuYVByb2R1Y3Rpb25JY29uX3BuZy5qcyc7XHJcbmltcG9ydCBHRUVDb25zdGFudHMgZnJvbSAnLi4vY29tbW9uL0dFRUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMgZnJvbSAnLi4vZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLmpzJztcclxuaW1wb3J0IEdlbmVFeHByZXNzaW9uRXNzZW50aWFsc1N0cmluZ3MgZnJvbSAnLi4vR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBNZXNzZW5nZXJSbmFQcm9kdWN0aW9uTW9kZWwgZnJvbSAnLi9tb2RlbC9NZXNzZW5nZXJSbmFQcm9kdWN0aW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgTWVzc2VuZ2VyUm5hUHJvZHVjdGlvblNjcmVlblZpZXcgZnJvbSAnLi92aWV3L01lc3NlbmdlclJuYVByb2R1Y3Rpb25TY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIE1lc3NlbmdlclJuYVByb2R1Y3Rpb25TY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiBHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzLnNjcmVlbi5tUm5hU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoICcjQUJDQkRCJyApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggbXJuYVByb2R1Y3Rpb25JY29uX3BuZyApLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9ICksXHJcbiAgICAgIG1heERUOiBHRUVDb25zdGFudHMuTUFYX0RUXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgTWVzc2VuZ2VyUm5hUHJvZHVjdGlvbk1vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBNZXNzZW5nZXJSbmFQcm9kdWN0aW9uU2NyZWVuVmlldyggbW9kZWwgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmdlbmVFeHByZXNzaW9uRXNzZW50aWFscy5yZWdpc3RlciggJ01lc3NlbmdlclJuYVByb2R1Y3Rpb25TY3JlZW4nLCBNZXNzZW5nZXJSbmFQcm9kdWN0aW9uU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IE1lc3NlbmdlclJuYVByb2R1Y3Rpb25TY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0Msc0JBQXNCLE1BQU0seUNBQXlDO0FBQzVFLE9BQU9DLFlBQVksTUFBTSwyQkFBMkI7QUFDcEQsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLCtCQUErQixNQUFNLHVDQUF1QztBQUNuRixPQUFPQywyQkFBMkIsTUFBTSx3Q0FBd0M7QUFDaEYsT0FBT0MsZ0NBQWdDLE1BQU0sNENBQTRDO0FBRXpGLE1BQU1DLDRCQUE0QixTQUFTVCxNQUFNLENBQUM7RUFFaERVLFdBQVdBLENBQUEsRUFBRztJQUVaLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVOLCtCQUErQixDQUFDTyxNQUFNLENBQUNDLGtCQUFrQjtNQUMvREMsdUJBQXVCLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRSxTQUFVLENBQUM7TUFDbERpQixjQUFjLEVBQUUsSUFBSWYsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUMsc0JBQXVCLENBQUMsRUFBRTtRQUNuRWMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hDLEtBQUssRUFBRWYsWUFBWSxDQUFDZ0I7SUFDdEIsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUliLDJCQUEyQixDQUFDLENBQUMsRUFDdkNjLEtBQUssSUFBSSxJQUFJYixnQ0FBZ0MsQ0FBRWEsS0FBTSxDQUFDLEVBQ3REVixPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFOLHdCQUF3QixDQUFDaUIsUUFBUSxDQUFFLDhCQUE4QixFQUFFYiw0QkFBNkIsQ0FBQztBQUNqRyxlQUFlQSw0QkFBNEIifQ==