// Copyright 2015-2022, University of Colorado Boulder

/**
 * User interface control that can be used to control the affinity between a transcription factor and the DNA. Presents
 * a node with the transcription factor, an arrow, and a fragment of DNA in order to create the idea that
 *
 * @author Mohamed Safi
 * @author John Blanco
 * @author Aadish Gupta
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, Node, Text, VBox } from '../../../../scenery/js/imports.js';
import ControllerNode from '../../common/view/ControllerNode.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import GeneExpressionEssentialsStrings from '../../GeneExpressionEssentialsStrings.js';

// constants
const ARROW_LENGTH = 30;
const ARROW_HEAD_HEIGHT = 10;
const affinityString = GeneExpressionEssentialsStrings.affinity;
const highString = GeneExpressionEssentialsStrings.high;
const lowString = GeneExpressionEssentialsStrings.low;
class AffinityController extends Node {
  /**
   * @param {Node} leftNode
   * @param {Node} rightNode
   * @param {Property} affinityProperty
   */
  constructor(leftNode, rightNode, affinityProperty) {
    super();
    const captionNode = new Text(affinityString, {
      font: new PhetFont({
        size: 14,
        weight: 'bold'
      }),
      maxWidth: 180
    });
    const arrowTail = new Vector2(0, 0);
    const arrowTip = new Vector2(ARROW_LENGTH, 0);
    const arrowOptions = {
      doubleHead: true,
      headHeight: ARROW_HEAD_HEIGHT / 2,
      headWidth: ARROW_HEAD_HEIGHT,
      tailWidth: ARROW_HEAD_HEIGHT / 3
    };
    const arrowNode = new ArrowNode(arrowTail.x, arrowTail.y, arrowTip.x, arrowTip.y, arrowOptions);
    const affinityKey = new HBox({
      children: [new Node({
        children: [leftNode]
      }), arrowNode, new Node({
        children: [rightNode]
      })],
      spacing: 10
    });
    affinityKey.setPickable(false);
    const horizontalSlider = new ControllerNode(affinityProperty, 0, 1, lowString, highString, {
      trackSize: new Dimension2(130, 5)
    });
    this.addChild(new VBox({
      children: [captionNode, affinityKey, horizontalSlider],
      spacing: 10
    }));
  }
}
geneExpressionEssentials.register('AffinityController', AffinityController);
export default AffinityController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVmVjdG9yMiIsIkFycm93Tm9kZSIsIlBoZXRGb250IiwiSEJveCIsIk5vZGUiLCJUZXh0IiwiVkJveCIsIkNvbnRyb2xsZXJOb2RlIiwiZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIiwiR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncyIsIkFSUk9XX0xFTkdUSCIsIkFSUk9XX0hFQURfSEVJR0hUIiwiYWZmaW5pdHlTdHJpbmciLCJhZmZpbml0eSIsImhpZ2hTdHJpbmciLCJoaWdoIiwibG93U3RyaW5nIiwibG93IiwiQWZmaW5pdHlDb250cm9sbGVyIiwiY29uc3RydWN0b3IiLCJsZWZ0Tm9kZSIsInJpZ2h0Tm9kZSIsImFmZmluaXR5UHJvcGVydHkiLCJjYXB0aW9uTm9kZSIsImZvbnQiLCJzaXplIiwid2VpZ2h0IiwibWF4V2lkdGgiLCJhcnJvd1RhaWwiLCJhcnJvd1RpcCIsImFycm93T3B0aW9ucyIsImRvdWJsZUhlYWQiLCJoZWFkSGVpZ2h0IiwiaGVhZFdpZHRoIiwidGFpbFdpZHRoIiwiYXJyb3dOb2RlIiwieCIsInkiLCJhZmZpbml0eUtleSIsImNoaWxkcmVuIiwic3BhY2luZyIsInNldFBpY2thYmxlIiwiaG9yaXpvbnRhbFNsaWRlciIsInRyYWNrU2l6ZSIsImFkZENoaWxkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBZmZpbml0eUNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVXNlciBpbnRlcmZhY2UgY29udHJvbCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIGFmZmluaXR5IGJldHdlZW4gYSB0cmFuc2NyaXB0aW9uIGZhY3RvciBhbmQgdGhlIEROQS4gUHJlc2VudHNcclxuICogYSBub2RlIHdpdGggdGhlIHRyYW5zY3JpcHRpb24gZmFjdG9yLCBhbiBhcnJvdywgYW5kIGEgZnJhZ21lbnQgb2YgRE5BIGluIG9yZGVyIHRvIGNyZWF0ZSB0aGUgaWRlYSB0aGF0XHJcbiAqXHJcbiAqIEBhdXRob3IgTW9oYW1lZCBTYWZpXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBBYWRpc2ggR3VwdGFcclxuICovXHJcblxyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IEFycm93Tm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQXJyb3dOb2RlLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIE5vZGUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQ29udHJvbGxlck5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQ29udHJvbGxlck5vZGUuanMnO1xyXG5pbXBvcnQgZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzIGZyb20gJy4uLy4uL2dlbmVFeHByZXNzaW9uRXNzZW50aWFscy5qcyc7XHJcbmltcG9ydCBHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzIGZyb20gJy4uLy4uL0dlbmVFeHByZXNzaW9uRXNzZW50aWFsc1N0cmluZ3MuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEFSUk9XX0xFTkdUSCA9IDMwO1xyXG5jb25zdCBBUlJPV19IRUFEX0hFSUdIVCA9IDEwO1xyXG5cclxuY29uc3QgYWZmaW5pdHlTdHJpbmcgPSBHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzLmFmZmluaXR5O1xyXG5jb25zdCBoaWdoU3RyaW5nID0gR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5oaWdoO1xyXG5jb25zdCBsb3dTdHJpbmcgPSBHZW5lRXhwcmVzc2lvbkVzc2VudGlhbHNTdHJpbmdzLmxvdztcclxuXHJcbmNsYXNzIEFmZmluaXR5Q29udHJvbGxlciBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge05vZGV9IGxlZnROb2RlXHJcbiAgICogQHBhcmFtIHtOb2RlfSByaWdodE5vZGVcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5fSBhZmZpbml0eVByb3BlcnR5XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGxlZnROb2RlLCByaWdodE5vZGUsIGFmZmluaXR5UHJvcGVydHkgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgY29uc3QgY2FwdGlvbk5vZGUgPSBuZXcgVGV4dCggYWZmaW5pdHlTdHJpbmcsIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCB7IHNpemU6IDE0LCB3ZWlnaHQ6ICdib2xkJyB9ICksXHJcbiAgICAgIG1heFdpZHRoOiAxODBcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGFycm93VGFpbCA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XHJcbiAgICBjb25zdCBhcnJvd1RpcCA9IG5ldyBWZWN0b3IyKCBBUlJPV19MRU5HVEgsIDAgKTtcclxuICAgIGNvbnN0IGFycm93T3B0aW9ucyA9IHtcclxuICAgICAgZG91YmxlSGVhZDogdHJ1ZSxcclxuICAgICAgaGVhZEhlaWdodDogQVJST1dfSEVBRF9IRUlHSFQgLyAyLFxyXG4gICAgICBoZWFkV2lkdGg6IEFSUk9XX0hFQURfSEVJR0hULFxyXG4gICAgICB0YWlsV2lkdGg6IEFSUk9XX0hFQURfSEVJR0hUIC8gM1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGFycm93Tm9kZSA9IG5ldyBBcnJvd05vZGUoIGFycm93VGFpbC54LCBhcnJvd1RhaWwueSwgYXJyb3dUaXAueCwgYXJyb3dUaXAueSwgYXJyb3dPcHRpb25zICk7XHJcbiAgICBjb25zdCBhZmZpbml0eUtleSA9IG5ldyBIQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGxlZnROb2RlIF0gfSApLCBhcnJvd05vZGUsIG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIHJpZ2h0Tm9kZSBdIH0gKSBdLFxyXG4gICAgICBzcGFjaW5nOiAxMFxyXG4gICAgfSApO1xyXG4gICAgYWZmaW5pdHlLZXkuc2V0UGlja2FibGUoIGZhbHNlICk7XHJcblxyXG4gICAgY29uc3QgaG9yaXpvbnRhbFNsaWRlciA9IG5ldyBDb250cm9sbGVyTm9kZShcclxuICAgICAgYWZmaW5pdHlQcm9wZXJ0eSxcclxuICAgICAgMCxcclxuICAgICAgMSxcclxuICAgICAgbG93U3RyaW5nLFxyXG4gICAgICBoaWdoU3RyaW5nLFxyXG4gICAgICB7IHRyYWNrU2l6ZTogbmV3IERpbWVuc2lvbjIoIDEzMCwgNSApIH1cclxuICAgICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgVkJveCgge1xyXG4gICAgICBjaGlsZHJlbjogWyBjYXB0aW9uTm9kZSwgYWZmaW5pdHlLZXksIGhvcml6b250YWxTbGlkZXIgXSxcclxuICAgICAgc3BhY2luZzogMTBcclxuICAgIH0gKSApO1xyXG4gIH1cclxufVxyXG5cclxuZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLnJlZ2lzdGVyKCAnQWZmaW5pdHlDb250cm9sbGVyJywgQWZmaW5pdHlDb250cm9sbGVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IEFmZmluaXR5Q29udHJvbGxlcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFNBQVMsTUFBTSwwQ0FBMEM7QUFDaEUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJ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