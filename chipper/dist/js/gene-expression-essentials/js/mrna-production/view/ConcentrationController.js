// Copyright 2015-2022, University of Colorado Boulder

/**
 * Class definition for slider that controls the concentration of a transcription factor.
 *
 * @author Mohamed Safi
 * @author John Blanco
 * @author Aadish Gupta
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text, VBox } from '../../../../scenery/js/imports.js';
import GEEConstants from '../../common/GEEConstants.js';
import StubGeneExpressionModel from '../../common/model/StubGeneExpressionModel.js';
import TranscriptionFactor from '../../common/model/TranscriptionFactor.js';
import ControllerNode from '../../common/view/ControllerNode.js';
import MobileBiomoleculeNode from '../../common/view/MobileBiomoleculeNode.js';
import geneExpressionEssentials from '../../geneExpressionEssentials.js';
import GeneExpressionEssentialsStrings from '../../GeneExpressionEssentialsStrings.js';
const concentrationString = GeneExpressionEssentialsStrings.concentration;
const highString = GeneExpressionEssentialsStrings.high;
const noneString = GeneExpressionEssentialsStrings.none;
class ConcentrationController extends Node {
  /**
   * @param {TranscriptionFactorConfig} transcriptionFactorConfig
   * @param {Property} tfLevelProperty
   * @param {number} min
   * @param {number} max
   *
   */
  constructor(transcriptionFactorConfig, tfLevelProperty, min, max) {
    super();
    const captionNode = new Text(concentrationString, {
      font: new PhetFont({
        size: 14,
        weight: 'bold'
      }),
      maxWidth: 180
    });
    const molecule = new MobileBiomoleculeNode(GEEConstants.TRANSCRIPTION_FACTOR_MVT, new TranscriptionFactor(new StubGeneExpressionModel(), transcriptionFactorConfig));
    molecule.setPickable(false);
    this.addChild(new VBox({
      spacing: 5,
      children: [captionNode, molecule, new ControllerNode(tfLevelProperty, min, max, noneString, highString, {
        trackSize: new Dimension2(130, 5)
      })]
    }));
  }
}
geneExpressionEssentials.register('ConcentrationController', ConcentrationController);
export default ConcentrationController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiUGhldEZvbnQiLCJOb2RlIiwiVGV4dCIsIlZCb3giLCJHRUVDb25zdGFudHMiLCJTdHViR2VuZUV4cHJlc3Npb25Nb2RlbCIsIlRyYW5zY3JpcHRpb25GYWN0b3IiLCJDb250cm9sbGVyTm9kZSIsIk1vYmlsZUJpb21vbGVjdWxlTm9kZSIsImdlbmVFeHByZXNzaW9uRXNzZW50aWFscyIsIkdlbmVFeHByZXNzaW9uRXNzZW50aWFsc1N0cmluZ3MiLCJjb25jZW50cmF0aW9uU3RyaW5nIiwiY29uY2VudHJhdGlvbiIsImhpZ2hTdHJpbmciLCJoaWdoIiwibm9uZVN0cmluZyIsIm5vbmUiLCJDb25jZW50cmF0aW9uQ29udHJvbGxlciIsImNvbnN0cnVjdG9yIiwidHJhbnNjcmlwdGlvbkZhY3RvckNvbmZpZyIsInRmTGV2ZWxQcm9wZXJ0eSIsIm1pbiIsIm1heCIsImNhcHRpb25Ob2RlIiwiZm9udCIsInNpemUiLCJ3ZWlnaHQiLCJtYXhXaWR0aCIsIm1vbGVjdWxlIiwiVFJBTlNDUklQVElPTl9GQUNUT1JfTVZUIiwic2V0UGlja2FibGUiLCJhZGRDaGlsZCIsInNwYWNpbmciLCJjaGlsZHJlbiIsInRyYWNrU2l6ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29uY2VudHJhdGlvbkNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2xhc3MgZGVmaW5pdGlvbiBmb3Igc2xpZGVyIHRoYXQgY29udHJvbHMgdGhlIGNvbmNlbnRyYXRpb24gb2YgYSB0cmFuc2NyaXB0aW9uIGZhY3Rvci5cclxuICpcclxuICogQGF1dGhvciBNb2hhbWVkIFNhZmlcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgR0VFQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9HRUVDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgU3R1YkdlbmVFeHByZXNzaW9uTW9kZWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1N0dWJHZW5lRXhwcmVzc2lvbk1vZGVsLmpzJztcclxuaW1wb3J0IFRyYW5zY3JpcHRpb25GYWN0b3IgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1RyYW5zY3JpcHRpb25GYWN0b3IuanMnO1xyXG5pbXBvcnQgQ29udHJvbGxlck5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQ29udHJvbGxlck5vZGUuanMnO1xyXG5pbXBvcnQgTW9iaWxlQmlvbW9sZWN1bGVOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L01vYmlsZUJpb21vbGVjdWxlTm9kZS5qcyc7XHJcbmltcG9ydCBnZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMgZnJvbSAnLi4vLi4vZ2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzLmpzJztcclxuaW1wb3J0IEdlbmVFeHByZXNzaW9uRXNzZW50aWFsc1N0cmluZ3MgZnJvbSAnLi4vLi4vR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBjb25jZW50cmF0aW9uU3RyaW5nID0gR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5jb25jZW50cmF0aW9uO1xyXG5jb25zdCBoaWdoU3RyaW5nID0gR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5oaWdoO1xyXG5jb25zdCBub25lU3RyaW5nID0gR2VuZUV4cHJlc3Npb25Fc3NlbnRpYWxzU3RyaW5ncy5ub25lO1xyXG5cclxuY2xhc3MgQ29uY2VudHJhdGlvbkNvbnRyb2xsZXIgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUcmFuc2NyaXB0aW9uRmFjdG9yQ29uZmlnfSB0cmFuc2NyaXB0aW9uRmFjdG9yQ29uZmlnXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eX0gdGZMZXZlbFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pblxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcclxuICAgKlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0cmFuc2NyaXB0aW9uRmFjdG9yQ29uZmlnLCB0ZkxldmVsUHJvcGVydHksIG1pbiwgbWF4ICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBjb25zdCBjYXB0aW9uTm9kZSA9IG5ldyBUZXh0KCBjb25jZW50cmF0aW9uU3RyaW5nLCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggeyBzaXplOiAxNCwgd2VpZ2h0OiAnYm9sZCcgfSApLFxyXG4gICAgICBtYXhXaWR0aDogMTgwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgbW9sZWN1bGUgPSBuZXcgTW9iaWxlQmlvbW9sZWN1bGVOb2RlKCBHRUVDb25zdGFudHMuVFJBTlNDUklQVElPTl9GQUNUT1JfTVZULFxyXG4gICAgICBuZXcgVHJhbnNjcmlwdGlvbkZhY3RvciggbmV3IFN0dWJHZW5lRXhwcmVzc2lvbk1vZGVsKCksIHRyYW5zY3JpcHRpb25GYWN0b3JDb25maWcgKSApO1xyXG4gICAgbW9sZWN1bGUuc2V0UGlja2FibGUoIGZhbHNlICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFZCb3goIHtcclxuICAgICAgc3BhY2luZzogNSxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBjYXB0aW9uTm9kZSxcclxuICAgICAgICBtb2xlY3VsZSxcclxuICAgICAgICBuZXcgQ29udHJvbGxlck5vZGUoXHJcbiAgICAgICAgICB0ZkxldmVsUHJvcGVydHksXHJcbiAgICAgICAgICBtaW4sXHJcbiAgICAgICAgICBtYXgsXHJcbiAgICAgICAgICBub25lU3RyaW5nLFxyXG4gICAgICAgICAgaGlnaFN0cmluZyxcclxuICAgICAgICAgIHsgdHJhY2tTaXplOiBuZXcgRGltZW5zaW9uMiggMTMwLCA1ICkgfVxyXG4gICAgICAgIClcclxuICAgICAgXVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5nZW5lRXhwcmVzc2lvbkVzc2VudGlhbHMucmVnaXN0ZXIoICdDb25jZW50cmF0aW9uQ29udHJvbGxlcicsIENvbmNlbnRyYXRpb25Db250cm9sbGVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IENvbmNlbnRyYXRpb25Db250cm9sbGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3BFLE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFDdkQsT0FBT0MsdUJBQXVCLE1BQU0sK0NBQStDO0FBQ25GLE9BQU9DLG1CQUFtQixNQUFNLDJDQUEyQztBQUMzRSxPQUFPQyxjQUFjLE1BQU0scUNBQXFDO0FBQ2hFLE9BQU9DLHFCQUFxQixNQUFNLDRDQUE0QztBQUM5RSxPQUFPQyx3QkFBd0IsTUFBTSxtQ0FBbUM7QUFDeEUsT0FBT0MsK0JBQStCLE1BQU0sMENBQTBDO0FBRXRGLE1BQU1DLG1CQUFtQixHQUFHRCwrQkFBK0IsQ0FBQ0UsYUFBYTtBQUN6RSxNQUFNQyxVQUFVLEdBQUdILCtCQUErQixDQUFDSSxJQUFJO0FBQ3ZELE1BQU1DLFVBQVUsR0FBR0wsK0JBQStCLENBQUNNLElBQUk7QUFFdkQsTUFBTUMsdUJBQXVCLFNBQVNoQixJQUFJLENBQUM7RUFFekM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRWlCLFdBQVdBLENBQUVDLHlCQUF5QixFQUFFQyxlQUFlLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFHO0lBQ2xFLEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUMsV0FBVyxHQUFHLElBQUlyQixJQUFJLENBQUVTLG1CQUFtQixFQUFFO01BQ2pEYSxJQUFJLEVBQUUsSUFBSXhCLFFBQVEsQ0FBRTtRQUFFeUIsSUFBSSxFQUFFLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQU8sQ0FBRSxDQUFDO01BQ2xEQyxRQUFRLEVBQUU7SUFDWixDQUFFLENBQUM7SUFFSCxNQUFNQyxRQUFRLEdBQUcsSUFBSXBCLHFCQUFxQixDQUFFSixZQUFZLENBQUN5Qix3QkFBd0IsRUFDL0UsSUFBSXZCLG1CQUFtQixDQUFFLElBQUlELHVCQUF1QixDQUFDLENBQUMsRUFBRWMseUJBQTBCLENBQUUsQ0FBQztJQUN2RlMsUUFBUSxDQUFDRSxXQUFXLENBQUUsS0FBTSxDQUFDO0lBRTdCLElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUk1QixJQUFJLENBQUU7TUFDdkI2QixPQUFPLEVBQUUsQ0FBQztNQUNWQyxRQUFRLEVBQUUsQ0FDUlYsV0FBVyxFQUNYSyxRQUFRLEVBQ1IsSUFBSXJCLGNBQWMsQ0FDaEJhLGVBQWUsRUFDZkMsR0FBRyxFQUNIQyxHQUFHLEVBQ0hQLFVBQVUsRUFDVkYsVUFBVSxFQUNWO1FBQUVxQixTQUFTLEVBQUUsSUFBSW5DLFVBQVUsQ0FBRSxHQUFHLEVBQUUsQ0FBRTtNQUFFLENBQ3hDLENBQUM7SUFFTCxDQUFFLENBQUUsQ0FBQztFQUNQO0FBQ0Y7QUFFQVUsd0JBQXdCLENBQUMwQixRQUFRLENBQUUseUJBQXlCLEVBQUVsQix1QkFBd0IsQ0FBQztBQUN2RixlQUFlQSx1QkFBdUIifQ==