// Copyright 2015-2022, University of Colorado Boulder

/**
 * LightBulb screen for the Capacitor Lab Basics sim.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import YawPitchModelViewTransform3 from '../../../scenery-phet/js/capacitor/YawPitchModelViewTransform3.js';
import capacitorLabBasics from '../capacitorLabBasics.js';
import CapacitorLabBasicsStrings from '../CapacitorLabBasicsStrings.js';
import CLBConstants from '../common/CLBConstants.js';
import BulbNode from '../common/view/BulbNode.js';
import CLBLightBulbModel from './model/CLBLightBulbModel.js';
import CLBLightBulbScreenView from './view/CLBLightBulbScreenView.js';
class CLBLightBulbScreen extends Screen {
  /**
   * @param {Property.<boolean>} switchUsedProperty - whether switch has been changed by user. Affects both screens.
   * @param {Tandem} tandem
   */
  constructor(switchUsedProperty, tandem) {
    const iconNode = BulbNode.createBulbIcon();
    iconNode.rotate(-Math.PI / 2);
    const icon = new ScreenIcon(iconNode, {
      fill: CLBConstants.SCREEN_VIEW_BACKGROUND_COLOR
    });
    const iconOptions = {
      maxIconWidthProportion: 1,
      maxIconHeightProportion: 1
    };
    const options = {
      name: CapacitorLabBasicsStrings.screen.lightBulbStringProperty,
      backgroundColorProperty: new Property(CLBConstants.SCREEN_VIEW_BACKGROUND_COLOR),
      homeScreenIcon: new ScreenIcon(icon, iconOptions),
      tandem: tandem
    };
    super(() => new CLBLightBulbModel(switchUsedProperty, new YawPitchModelViewTransform3(), tandem.createTandem('model')), model => new CLBLightBulbScreenView(model, tandem.createTandem('view')), options);
  }
}
capacitorLabBasics.register('CLBLightBulbScreen', CLBLightBulbScreen);
export default CLBLightBulbScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMiLCJjYXBhY2l0b3JMYWJCYXNpY3MiLCJDYXBhY2l0b3JMYWJCYXNpY3NTdHJpbmdzIiwiQ0xCQ29uc3RhbnRzIiwiQnVsYk5vZGUiLCJDTEJMaWdodEJ1bGJNb2RlbCIsIkNMQkxpZ2h0QnVsYlNjcmVlblZpZXciLCJDTEJMaWdodEJ1bGJTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInN3aXRjaFVzZWRQcm9wZXJ0eSIsInRhbmRlbSIsImljb25Ob2RlIiwiY3JlYXRlQnVsYkljb24iLCJyb3RhdGUiLCJNYXRoIiwiUEkiLCJpY29uIiwiZmlsbCIsIlNDUkVFTl9WSUVXX0JBQ0tHUk9VTkRfQ09MT1IiLCJpY29uT3B0aW9ucyIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwibGlnaHRCdWxiU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNMQkxpZ2h0QnVsYlNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMaWdodEJ1bGIgc2NyZWVuIGZvciB0aGUgQ2FwYWNpdG9yIExhYiBCYXNpY3Mgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCBZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2NhcGFjaXRvci9ZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMuanMnO1xyXG5pbXBvcnQgY2FwYWNpdG9yTGFiQmFzaWNzIGZyb20gJy4uL2NhcGFjaXRvckxhYkJhc2ljcy5qcyc7XHJcbmltcG9ydCBDYXBhY2l0b3JMYWJCYXNpY3NTdHJpbmdzIGZyb20gJy4uL0NhcGFjaXRvckxhYkJhc2ljc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ0xCQ29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbi9DTEJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQnVsYk5vZGUgZnJvbSAnLi4vY29tbW9uL3ZpZXcvQnVsYk5vZGUuanMnO1xyXG5pbXBvcnQgQ0xCTGlnaHRCdWxiTW9kZWwgZnJvbSAnLi9tb2RlbC9DTEJMaWdodEJ1bGJNb2RlbC5qcyc7XHJcbmltcG9ydCBDTEJMaWdodEJ1bGJTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9DTEJMaWdodEJ1bGJTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIENMQkxpZ2h0QnVsYlNjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSBzd2l0Y2hVc2VkUHJvcGVydHkgLSB3aGV0aGVyIHN3aXRjaCBoYXMgYmVlbiBjaGFuZ2VkIGJ5IHVzZXIuIEFmZmVjdHMgYm90aCBzY3JlZW5zLlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggc3dpdGNoVXNlZFByb3BlcnR5LCB0YW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgaWNvbk5vZGUgPSBCdWxiTm9kZS5jcmVhdGVCdWxiSWNvbigpO1xyXG4gICAgaWNvbk5vZGUucm90YXRlKCAtTWF0aC5QSSAvIDIgKTtcclxuICAgIGNvbnN0IGljb24gPSBuZXcgU2NyZWVuSWNvbiggaWNvbk5vZGUsIHtcclxuICAgICAgZmlsbDogQ0xCQ29uc3RhbnRzLlNDUkVFTl9WSUVXX0JBQ0tHUk9VTkRfQ09MT1JcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBpY29uT3B0aW9ucyA9IHtcclxuICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogQ2FwYWNpdG9yTGFiQmFzaWNzU3RyaW5ncy5zY3JlZW4ubGlnaHRCdWxiU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoIENMQkNvbnN0YW50cy5TQ1JFRU5fVklFV19CQUNLR1JPVU5EX0NPTE9SICksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBuZXcgU2NyZWVuSWNvbiggaWNvbiwgaWNvbk9wdGlvbnMgKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBDTEJMaWdodEJ1bGJNb2RlbCggc3dpdGNoVXNlZFByb3BlcnR5LCBuZXcgWWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zKCksIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgQ0xCTGlnaHRCdWxiU2NyZWVuVmlldyggbW9kZWwsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYXBhY2l0b3JMYWJCYXNpY3MucmVnaXN0ZXIoICdDTEJMaWdodEJ1bGJTY3JlZW4nLCBDTEJMaWdodEJ1bGJTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgQ0xCTGlnaHRCdWxiU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQywyQkFBMkIsTUFBTSxtRUFBbUU7QUFDM0csT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBQ3pELE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUN2RSxPQUFPQyxZQUFZLE1BQU0sMkJBQTJCO0FBQ3BELE9BQU9DLFFBQVEsTUFBTSw0QkFBNEI7QUFDakQsT0FBT0MsaUJBQWlCLE1BQU0sOEJBQThCO0FBQzVELE9BQU9DLHNCQUFzQixNQUFNLGtDQUFrQztBQUVyRSxNQUFNQyxrQkFBa0IsU0FBU1QsTUFBTSxDQUFDO0VBRXRDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VVLFdBQVdBLENBQUVDLGtCQUFrQixFQUFFQyxNQUFNLEVBQUc7SUFFeEMsTUFBTUMsUUFBUSxHQUFHUCxRQUFRLENBQUNRLGNBQWMsQ0FBQyxDQUFDO0lBQzFDRCxRQUFRLENBQUNFLE1BQU0sQ0FBRSxDQUFDQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDL0IsTUFBTUMsSUFBSSxHQUFHLElBQUlqQixVQUFVLENBQUVZLFFBQVEsRUFBRTtNQUNyQ00sSUFBSSxFQUFFZCxZQUFZLENBQUNlO0lBQ3JCLENBQUUsQ0FBQztJQUVILE1BQU1DLFdBQVcsR0FBRztNQUNsQkMsc0JBQXNCLEVBQUUsQ0FBQztNQUN6QkMsdUJBQXVCLEVBQUU7SUFDM0IsQ0FBQztJQUVELE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVyQix5QkFBeUIsQ0FBQ3NCLE1BQU0sQ0FBQ0MsdUJBQXVCO01BQzlEQyx1QkFBdUIsRUFBRSxJQUFJN0IsUUFBUSxDQUFFTSxZQUFZLENBQUNlLDRCQUE2QixDQUFDO01BQ2xGUyxjQUFjLEVBQUUsSUFBSTVCLFVBQVUsQ0FBRWlCLElBQUksRUFBRUcsV0FBWSxDQUFDO01BQ25EVCxNQUFNLEVBQUVBO0lBQ1YsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUlMLGlCQUFpQixDQUFFSSxrQkFBa0IsRUFBRSxJQUFJVCwyQkFBMkIsQ0FBQyxDQUFDLEVBQUVVLE1BQU0sQ0FBQ2tCLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQyxFQUNwSEMsS0FBSyxJQUFJLElBQUl2QixzQkFBc0IsQ0FBRXVCLEtBQUssRUFBRW5CLE1BQU0sQ0FBQ2tCLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUMzRU4sT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBckIsa0JBQWtCLENBQUM2QixRQUFRLENBQUUsb0JBQW9CLEVBQUV2QixrQkFBbUIsQ0FBQztBQUN2RSxlQUFlQSxrQkFBa0IifQ==