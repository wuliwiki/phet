// Copyright 2015-2022, University of Colorado Boulder

/**
 * Capacitance screen for the Capacitor Lab Basics sim.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import YawPitchModelViewTransform3 from '../../../scenery-phet/js/capacitor/YawPitchModelViewTransform3.js';
import { Image } from '../../../scenery/js/imports.js';
import capacitanceScreenIcon_png from '../../mipmaps/capacitanceScreenIcon_png.js';
import capacitorLabBasics from '../capacitorLabBasics.js';
import CapacitorLabBasicsStrings from '../CapacitorLabBasicsStrings.js';
import CLBConstants from '../common/CLBConstants.js';
import CapacitanceModel from './model/CapacitanceModel.js';
import CapacitanceScreenView from './view/CapacitanceScreenView.js';
class CapacitanceScreen extends Screen {
  /**
   * @param {Property.<boolean>} switchUsedProperty - whether switch has been changed by user. Affects both screens.
   * @param {Tandem} tandem
   */
  constructor(switchUsedProperty, tandem) {
    const options = {
      name: CapacitorLabBasicsStrings.screen.capacitanceStringProperty,
      backgroundColorProperty: new Property(CLBConstants.SCREEN_VIEW_BACKGROUND_COLOR),
      homeScreenIcon: new ScreenIcon(new Image(capacitanceScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    };
    super(() => new CapacitanceModel(switchUsedProperty, new YawPitchModelViewTransform3(), tandem.createTandem('model')), model => new CapacitanceScreenView(model, tandem.createTandem('view')), options);
  }
}
capacitorLabBasics.register('CapacitanceScreen', CapacitanceScreen);
export default CapacitanceScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMiLCJJbWFnZSIsImNhcGFjaXRhbmNlU2NyZWVuSWNvbl9wbmciLCJjYXBhY2l0b3JMYWJCYXNpY3MiLCJDYXBhY2l0b3JMYWJCYXNpY3NTdHJpbmdzIiwiQ0xCQ29uc3RhbnRzIiwiQ2FwYWNpdGFuY2VNb2RlbCIsIkNhcGFjaXRhbmNlU2NyZWVuVmlldyIsIkNhcGFjaXRhbmNlU2NyZWVuIiwiY29uc3RydWN0b3IiLCJzd2l0Y2hVc2VkUHJvcGVydHkiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsImNhcGFjaXRhbmNlU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsIlNDUkVFTl9WSUVXX0JBQ0tHUk9VTkRfQ09MT1IiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDYXBhY2l0YW5jZVNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDYXBhY2l0YW5jZSBzY3JlZW4gZm9yIHRoZSBDYXBhY2l0b3IgTGFiIEJhc2ljcyBzaW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IFlhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMyBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvY2FwYWNpdG9yL1lhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMy5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGNhcGFjaXRhbmNlU2NyZWVuSWNvbl9wbmcgZnJvbSAnLi4vLi4vbWlwbWFwcy9jYXBhY2l0YW5jZVNjcmVlbkljb25fcG5nLmpzJztcclxuaW1wb3J0IGNhcGFjaXRvckxhYkJhc2ljcyBmcm9tICcuLi9jYXBhY2l0b3JMYWJCYXNpY3MuanMnO1xyXG5pbXBvcnQgQ2FwYWNpdG9yTGFiQmFzaWNzU3RyaW5ncyBmcm9tICcuLi9DYXBhY2l0b3JMYWJCYXNpY3NTdHJpbmdzLmpzJztcclxuaW1wb3J0IENMQkNvbnN0YW50cyBmcm9tICcuLi9jb21tb24vQ0xCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENhcGFjaXRhbmNlTW9kZWwgZnJvbSAnLi9tb2RlbC9DYXBhY2l0YW5jZU1vZGVsLmpzJztcclxuaW1wb3J0IENhcGFjaXRhbmNlU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvQ2FwYWNpdGFuY2VTY3JlZW5WaWV3LmpzJztcclxuXHJcbmNsYXNzIENhcGFjaXRhbmNlU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IHN3aXRjaFVzZWRQcm9wZXJ0eSAtIHdoZXRoZXIgc3dpdGNoIGhhcyBiZWVuIGNoYW5nZWQgYnkgdXNlci4gQWZmZWN0cyBib3RoIHNjcmVlbnMuXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBzd2l0Y2hVc2VkUHJvcGVydHksIHRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiBDYXBhY2l0b3JMYWJCYXNpY3NTdHJpbmdzLnNjcmVlbi5jYXBhY2l0YW5jZVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBDTEJDb25zdGFudHMuU0NSRUVOX1ZJRVdfQkFDS0dST1VORF9DT0xPUiApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggY2FwYWNpdGFuY2VTY3JlZW5JY29uX3BuZyApLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9ICksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgQ2FwYWNpdGFuY2VNb2RlbCggc3dpdGNoVXNlZFByb3BlcnR5LCBuZXcgWWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zKCksIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgQ2FwYWNpdGFuY2VTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNhcGFjaXRvckxhYkJhc2ljcy5yZWdpc3RlciggJ0NhcGFjaXRhbmNlU2NyZWVuJywgQ2FwYWNpdGFuY2VTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgQ2FwYWNpdGFuY2VTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELE9BQU9DLDJCQUEyQixNQUFNLG1FQUFtRTtBQUMzRyxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLHlCQUF5QixNQUFNLDRDQUE0QztBQUNsRixPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBQ3ZFLE9BQU9DLFlBQVksTUFBTSwyQkFBMkI7QUFDcEQsT0FBT0MsZ0JBQWdCLE1BQU0sNkJBQTZCO0FBQzFELE9BQU9DLHFCQUFxQixNQUFNLGlDQUFpQztBQUVuRSxNQUFNQyxpQkFBaUIsU0FBU1YsTUFBTSxDQUFDO0VBRXJDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VXLFdBQVdBLENBQUVDLGtCQUFrQixFQUFFQyxNQUFNLEVBQUc7SUFFeEMsTUFBTUMsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRVQseUJBQXlCLENBQUNVLE1BQU0sQ0FBQ0MseUJBQXlCO01BQ2hFQyx1QkFBdUIsRUFBRSxJQUFJbkIsUUFBUSxDQUFFUSxZQUFZLENBQUNZLDRCQUE2QixDQUFDO01BQ2xGQyxjQUFjLEVBQUUsSUFBSW5CLFVBQVUsQ0FBRSxJQUFJRSxLQUFLLENBQUVDLHlCQUEwQixDQUFDLEVBQUU7UUFDdEVpQixzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSFQsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJTCxnQkFBZ0IsQ0FBRUksa0JBQWtCLEVBQUUsSUFBSVYsMkJBQTJCLENBQUMsQ0FBQyxFQUFFVyxNQUFNLENBQUNVLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQyxFQUNuSEMsS0FBSyxJQUFJLElBQUlmLHFCQUFxQixDQUFFZSxLQUFLLEVBQUVYLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQzFFVCxPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFULGtCQUFrQixDQUFDb0IsUUFBUSxDQUFFLG1CQUFtQixFQUFFZixpQkFBa0IsQ0FBQztBQUNyRSxlQUFlQSxpQkFBaUIifQ==