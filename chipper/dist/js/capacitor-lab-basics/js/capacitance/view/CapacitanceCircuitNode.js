// Copyright 2015-2022, University of Colorado Boulder

/**
 * Node for the capacitance circuit.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import capacitorLabBasics from '../../capacitorLabBasics.js';
import CircuitState from '../../common/model/CircuitState.js';
import CLBCircuitNode from '../../common/view/CLBCircuitNode.js';
class CapacitanceCircuitNode extends CLBCircuitNode {
  /**
   * @param {CapacitanceModel} model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    super(model, tandem);
    Multilink.multilink([model.circuit.circuitConnectionProperty, model.currentVisibleProperty], (circuitConnection, currentIndicatorsVisible) => {
      this.updateCurrentVisibility(circuitConnection, currentIndicatorsVisible);
    });
  }

  /**
   * Updates the visibility of the current indicators.
   * @public
   *
   * @param {CircuitState} circuitConnection - OPEN_CIRCUIT | BATTERY_CONNECTED
   * @param {boolean} currentIndicatorsVisible
   */
  updateCurrentVisibility(circuitConnection, currentIndicatorsVisible) {
    const isBatteryConnected = circuitConnection === CircuitState.BATTERY_CONNECTED;
    this.batteryTopCurrentIndicatorNode.setVisible(isBatteryConnected && currentIndicatorsVisible);
    this.batteryBottomCurrentIndicatorNode.setVisible(isBatteryConnected && currentIndicatorsVisible);
  }
}
capacitorLabBasics.register('CapacitanceCircuitNode', CapacitanceCircuitNode);
export default CapacitanceCircuitNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJjYXBhY2l0b3JMYWJCYXNpY3MiLCJDaXJjdWl0U3RhdGUiLCJDTEJDaXJjdWl0Tm9kZSIsIkNhcGFjaXRhbmNlQ2lyY3VpdE5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidGFuZGVtIiwibXVsdGlsaW5rIiwiY2lyY3VpdCIsImNpcmN1aXRDb25uZWN0aW9uUHJvcGVydHkiLCJjdXJyZW50VmlzaWJsZVByb3BlcnR5IiwiY2lyY3VpdENvbm5lY3Rpb24iLCJjdXJyZW50SW5kaWNhdG9yc1Zpc2libGUiLCJ1cGRhdGVDdXJyZW50VmlzaWJpbGl0eSIsImlzQmF0dGVyeUNvbm5lY3RlZCIsIkJBVFRFUllfQ09OTkVDVEVEIiwiYmF0dGVyeVRvcEN1cnJlbnRJbmRpY2F0b3JOb2RlIiwic2V0VmlzaWJsZSIsImJhdHRlcnlCb3R0b21DdXJyZW50SW5kaWNhdG9yTm9kZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2FwYWNpdGFuY2VDaXJjdWl0Tm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOb2RlIGZvciB0aGUgY2FwYWNpdGFuY2UgY2lyY3VpdC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBjYXBhY2l0b3JMYWJCYXNpY3MgZnJvbSAnLi4vLi4vY2FwYWNpdG9yTGFiQmFzaWNzLmpzJztcclxuaW1wb3J0IENpcmN1aXRTdGF0ZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ2lyY3VpdFN0YXRlLmpzJztcclxuaW1wb3J0IENMQkNpcmN1aXROb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0NMQkNpcmN1aXROb2RlLmpzJztcclxuXHJcbmNsYXNzIENhcGFjaXRhbmNlQ2lyY3VpdE5vZGUgZXh0ZW5kcyBDTEJDaXJjdWl0Tm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDYXBhY2l0YW5jZU1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIHRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHRhbmRlbSApO1xyXG5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoIFsgbW9kZWwuY2lyY3VpdC5jaXJjdWl0Q29ubmVjdGlvblByb3BlcnR5LCBtb2RlbC5jdXJyZW50VmlzaWJsZVByb3BlcnR5IF0sXHJcbiAgICAgICggY2lyY3VpdENvbm5lY3Rpb24sIGN1cnJlbnRJbmRpY2F0b3JzVmlzaWJsZSApID0+IHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUN1cnJlbnRWaXNpYmlsaXR5KCBjaXJjdWl0Q29ubmVjdGlvbiwgY3VycmVudEluZGljYXRvcnNWaXNpYmxlICk7XHJcbiAgICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGN1cnJlbnQgaW5kaWNhdG9ycy5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NpcmN1aXRTdGF0ZX0gY2lyY3VpdENvbm5lY3Rpb24gLSBPUEVOX0NJUkNVSVQgfCBCQVRURVJZX0NPTk5FQ1RFRFxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY3VycmVudEluZGljYXRvcnNWaXNpYmxlXHJcbiAgICovXHJcbiAgdXBkYXRlQ3VycmVudFZpc2liaWxpdHkoIGNpcmN1aXRDb25uZWN0aW9uLCBjdXJyZW50SW5kaWNhdG9yc1Zpc2libGUgKSB7XHJcbiAgICBjb25zdCBpc0JhdHRlcnlDb25uZWN0ZWQgPSAoIGNpcmN1aXRDb25uZWN0aW9uID09PSBDaXJjdWl0U3RhdGUuQkFUVEVSWV9DT05ORUNURUQgKTtcclxuXHJcbiAgICB0aGlzLmJhdHRlcnlUb3BDdXJyZW50SW5kaWNhdG9yTm9kZS5zZXRWaXNpYmxlKCBpc0JhdHRlcnlDb25uZWN0ZWQgJiYgY3VycmVudEluZGljYXRvcnNWaXNpYmxlICk7XHJcbiAgICB0aGlzLmJhdHRlcnlCb3R0b21DdXJyZW50SW5kaWNhdG9yTm9kZS5zZXRWaXNpYmxlKCBpc0JhdHRlcnlDb25uZWN0ZWQgJiYgY3VycmVudEluZGljYXRvcnNWaXNpYmxlICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYXBhY2l0b3JMYWJCYXNpY3MucmVnaXN0ZXIoICdDYXBhY2l0YW5jZUNpcmN1aXROb2RlJywgQ2FwYWNpdGFuY2VDaXJjdWl0Tm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FwYWNpdGFuY2VDaXJjdWl0Tm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sa0NBQWtDO0FBQ3hELE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxZQUFZLE1BQU0sb0NBQW9DO0FBQzdELE9BQU9DLGNBQWMsTUFBTSxxQ0FBcUM7QUFFaEUsTUFBTUMsc0JBQXNCLFNBQVNELGNBQWMsQ0FBQztFQUNsRDtBQUNGO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRztJQUUzQixLQUFLLENBQUVELEtBQUssRUFBRUMsTUFBTyxDQUFDO0lBRXRCUCxTQUFTLENBQUNRLFNBQVMsQ0FBRSxDQUFFRixLQUFLLENBQUNHLE9BQU8sQ0FBQ0MseUJBQXlCLEVBQUVKLEtBQUssQ0FBQ0ssc0JBQXNCLENBQUUsRUFDNUYsQ0FBRUMsaUJBQWlCLEVBQUVDLHdCQUF3QixLQUFNO01BQ2pELElBQUksQ0FBQ0MsdUJBQXVCLENBQUVGLGlCQUFpQixFQUFFQyx3QkFBeUIsQ0FBQztJQUM3RSxDQUFFLENBQUM7RUFDUDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyx1QkFBdUJBLENBQUVGLGlCQUFpQixFQUFFQyx3QkFBd0IsRUFBRztJQUNyRSxNQUFNRSxrQkFBa0IsR0FBS0gsaUJBQWlCLEtBQUtWLFlBQVksQ0FBQ2MsaUJBQW1CO0lBRW5GLElBQUksQ0FBQ0MsOEJBQThCLENBQUNDLFVBQVUsQ0FBRUgsa0JBQWtCLElBQUlGLHdCQUF5QixDQUFDO0lBQ2hHLElBQUksQ0FBQ00saUNBQWlDLENBQUNELFVBQVUsQ0FBRUgsa0JBQWtCLElBQUlGLHdCQUF5QixDQUFDO0VBQ3JHO0FBQ0Y7QUFFQVosa0JBQWtCLENBQUNtQixRQUFRLENBQUUsd0JBQXdCLEVBQUVoQixzQkFBdUIsQ0FBQztBQUUvRSxlQUFlQSxzQkFBc0IifQ==