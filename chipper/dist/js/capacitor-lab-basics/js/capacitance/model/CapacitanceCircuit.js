// Copyright 2015-2021, University of Colorado Boulder

/**
 * Model of a circuit with a battery (B) connected to a single capacitor.  This is treated as a special case of a
 * parallel circuit, with some added features.  The capacitor also has a switch attached to it so that it can be
 * disconnected from the battery.
 *
 * +-----+
 * |      \
 * |       |
 * B      ===
 * |       |
 * |      /
 * +-----+
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import capacitorLabBasics from '../../capacitorLabBasics.js';
import CircuitState from '../../common/model/CircuitState.js';
import ParallelCircuit from '../../common/model/ParallelCircuit.js';
class CapacitanceCircuit extends ParallelCircuit {
  /**
   * @param {CircuitConfig} config
   * @param {Tandem} tandem
   */
  constructor(config, tandem) {
    super(config, tandem);
    this.lightBulb = null; // There is no light bulb in the first screen
  }

  /**
   * Updates the plate voltage, depending on whether the battery is connected.
   * @public
   */
  updatePlateVoltages() {
    // Undefined check required because superclass calls this method from its constructor.
    if (this.circuitConnectionProperty !== undefined) {
      // if the battery is connected, the voltage is equal to the battery voltage
      if (this.circuitConnectionProperty.value === CircuitState.BATTERY_CONNECTED) {
        this.capacitor.plateVoltageProperty.value = this.battery.voltageProperty.value;
      } else {
        // otherwise, the voltage can be found by V=Q/C
        this.capacitor.plateVoltageProperty.value = this.disconnectedPlateChargeProperty.value / this.capacitor.capacitanceProperty.value;
      }
    }
  }
}
capacitorLabBasics.register('CapacitanceCircuit', CapacitanceCircuit);
export default CapacitanceCircuit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYXBhY2l0b3JMYWJCYXNpY3MiLCJDaXJjdWl0U3RhdGUiLCJQYXJhbGxlbENpcmN1aXQiLCJDYXBhY2l0YW5jZUNpcmN1aXQiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsInRhbmRlbSIsImxpZ2h0QnVsYiIsInVwZGF0ZVBsYXRlVm9sdGFnZXMiLCJjaXJjdWl0Q29ubmVjdGlvblByb3BlcnR5IiwidW5kZWZpbmVkIiwidmFsdWUiLCJCQVRURVJZX0NPTk5FQ1RFRCIsImNhcGFjaXRvciIsInBsYXRlVm9sdGFnZVByb3BlcnR5IiwiYmF0dGVyeSIsInZvbHRhZ2VQcm9wZXJ0eSIsImRpc2Nvbm5lY3RlZFBsYXRlQ2hhcmdlUHJvcGVydHkiLCJjYXBhY2l0YW5jZVByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDYXBhY2l0YW5jZUNpcmN1aXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgb2YgYSBjaXJjdWl0IHdpdGggYSBiYXR0ZXJ5IChCKSBjb25uZWN0ZWQgdG8gYSBzaW5nbGUgY2FwYWNpdG9yLiAgVGhpcyBpcyB0cmVhdGVkIGFzIGEgc3BlY2lhbCBjYXNlIG9mIGFcclxuICogcGFyYWxsZWwgY2lyY3VpdCwgd2l0aCBzb21lIGFkZGVkIGZlYXR1cmVzLiAgVGhlIGNhcGFjaXRvciBhbHNvIGhhcyBhIHN3aXRjaCBhdHRhY2hlZCB0byBpdCBzbyB0aGF0IGl0IGNhbiBiZVxyXG4gKiBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgYmF0dGVyeS5cclxuICpcclxuICogKy0tLS0tK1xyXG4gKiB8ICAgICAgXFxcclxuICogfCAgICAgICB8XHJcbiAqIEIgICAgICA9PT1cclxuICogfCAgICAgICB8XHJcbiAqIHwgICAgICAvXHJcbiAqICstLS0tLStcclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBjYXBhY2l0b3JMYWJCYXNpY3MgZnJvbSAnLi4vLi4vY2FwYWNpdG9yTGFiQmFzaWNzLmpzJztcclxuaW1wb3J0IENpcmN1aXRTdGF0ZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ2lyY3VpdFN0YXRlLmpzJztcclxuaW1wb3J0IFBhcmFsbGVsQ2lyY3VpdCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUGFyYWxsZWxDaXJjdWl0LmpzJztcclxuXHJcbmNsYXNzIENhcGFjaXRhbmNlQ2lyY3VpdCBleHRlbmRzIFBhcmFsbGVsQ2lyY3VpdCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDaXJjdWl0Q29uZmlnfSBjb25maWdcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvbmZpZywgdGFuZGVtICkge1xyXG4gICAgc3VwZXIoIGNvbmZpZywgdGFuZGVtICk7XHJcblxyXG4gICAgdGhpcy5saWdodEJ1bGIgPSBudWxsOyAvLyBUaGVyZSBpcyBubyBsaWdodCBidWxiIGluIHRoZSBmaXJzdCBzY3JlZW5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGhlIHBsYXRlIHZvbHRhZ2UsIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBiYXR0ZXJ5IGlzIGNvbm5lY3RlZC5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgdXBkYXRlUGxhdGVWb2x0YWdlcygpIHtcclxuXHJcbiAgICAvLyBVbmRlZmluZWQgY2hlY2sgcmVxdWlyZWQgYmVjYXVzZSBzdXBlcmNsYXNzIGNhbGxzIHRoaXMgbWV0aG9kIGZyb20gaXRzIGNvbnN0cnVjdG9yLlxyXG4gICAgaWYgKCB0aGlzLmNpcmN1aXRDb25uZWN0aW9uUHJvcGVydHkgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcbiAgICAgIC8vIGlmIHRoZSBiYXR0ZXJ5IGlzIGNvbm5lY3RlZCwgdGhlIHZvbHRhZ2UgaXMgZXF1YWwgdG8gdGhlIGJhdHRlcnkgdm9sdGFnZVxyXG4gICAgICBpZiAoIHRoaXMuY2lyY3VpdENvbm5lY3Rpb25Qcm9wZXJ0eS52YWx1ZSA9PT0gQ2lyY3VpdFN0YXRlLkJBVFRFUllfQ09OTkVDVEVEICkge1xyXG4gICAgICAgIHRoaXMuY2FwYWNpdG9yLnBsYXRlVm9sdGFnZVByb3BlcnR5LnZhbHVlID0gdGhpcy5iYXR0ZXJ5LnZvbHRhZ2VQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIG90aGVyd2lzZSwgdGhlIHZvbHRhZ2UgY2FuIGJlIGZvdW5kIGJ5IFY9US9DXHJcbiAgICAgICAgdGhpcy5jYXBhY2l0b3IucGxhdGVWb2x0YWdlUHJvcGVydHkudmFsdWUgPVxyXG4gICAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWRQbGF0ZUNoYXJnZVByb3BlcnR5LnZhbHVlIC8gdGhpcy5jYXBhY2l0b3IuY2FwYWNpdGFuY2VQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY2FwYWNpdG9yTGFiQmFzaWNzLnJlZ2lzdGVyKCAnQ2FwYWNpdGFuY2VDaXJjdWl0JywgQ2FwYWNpdGFuY2VDaXJjdWl0ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYXBhY2l0YW5jZUNpcmN1aXQ7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxZQUFZLE1BQU0sb0NBQW9DO0FBQzdELE9BQU9DLGVBQWUsTUFBTSx1Q0FBdUM7QUFFbkUsTUFBTUMsa0JBQWtCLFNBQVNELGVBQWUsQ0FBQztFQUMvQztBQUNGO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRztJQUM1QixLQUFLLENBQUVELE1BQU0sRUFBRUMsTUFBTyxDQUFDO0lBRXZCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3pCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLG1CQUFtQkEsQ0FBQSxFQUFHO0lBRXBCO0lBQ0EsSUFBSyxJQUFJLENBQUNDLHlCQUF5QixLQUFLQyxTQUFTLEVBQUc7TUFFbEQ7TUFDQSxJQUFLLElBQUksQ0FBQ0QseUJBQXlCLENBQUNFLEtBQUssS0FBS1YsWUFBWSxDQUFDVyxpQkFBaUIsRUFBRztRQUM3RSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0Msb0JBQW9CLENBQUNILEtBQUssR0FBRyxJQUFJLENBQUNJLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDTCxLQUFLO01BQ2hGLENBQUMsTUFFSTtRQUVIO1FBQ0EsSUFBSSxDQUFDRSxTQUFTLENBQUNDLG9CQUFvQixDQUFDSCxLQUFLLEdBQ3ZDLElBQUksQ0FBQ00sK0JBQStCLENBQUNOLEtBQUssR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0ssbUJBQW1CLENBQUNQLEtBQUs7TUFDekY7SUFDRjtFQUNGO0FBQ0Y7QUFFQVgsa0JBQWtCLENBQUNtQixRQUFRLENBQUUsb0JBQW9CLEVBQUVoQixrQkFBbUIsQ0FBQztBQUV2RSxlQUFlQSxrQkFBa0IifQ==