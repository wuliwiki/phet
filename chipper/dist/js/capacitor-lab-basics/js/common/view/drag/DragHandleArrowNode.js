// Copyright 2015-2021, University of Colorado Boulder

/**
 * Double arrow used for drag handles.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import ArrowNode from '../../../../../scenery-phet/js/ArrowNode.js';
import capacitorLabBasics from '../../../capacitorLabBasics.js';

// constants
const NORMAL_COLOR = 'rgb( 61, 179, 79 )';
const HIGHLIGHT_COLOR = 'yellow';
const STROKE_COLOR = 'black';
const LINE_WIDTH = 1;
class DragHandleArrowNode extends ArrowNode {
  /**
   * @param {Vector2} pStart
   * @param {Vector2} pEnd
   * @param {Property.<boolean>} isHighlightedProperty
   * @param {Tandem} tandem
   */
  constructor(pStart, pEnd, isHighlightedProperty, tandem) {
    // calculate the parameter for head and tail width and height.
    const length = Math.abs(pStart.distance(pEnd));
    super(pStart.x, pStart.y, pEnd.x, pEnd.y, {
      fill: NORMAL_COLOR,
      stroke: STROKE_COLOR,
      lineWidth: LINE_WIDTH,
      doubleHead: true,
      headHeight: length,
      headWidth: length / 2,
      tailWidth: length / 5,
      tandem: tandem
    });
    this.normalColor = NORMAL_COLOR;
    this.highlightColor = HIGHLIGHT_COLOR;

    // make the arrow slightly easier to drag
    this.touchArea = this.bounds.dilated(10);

    // highlight the arrow on pointer over
    isHighlightedProperty.link(highlighted => {
      this.fill = highlighted ? HIGHLIGHT_COLOR : NORMAL_COLOR;
    });
  }
}
capacitorLabBasics.register('DragHandleArrowNode', DragHandleArrowNode);
export default DragHandleArrowNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcnJvd05vZGUiLCJjYXBhY2l0b3JMYWJCYXNpY3MiLCJOT1JNQUxfQ09MT1IiLCJISUdITElHSFRfQ09MT1IiLCJTVFJPS0VfQ09MT1IiLCJMSU5FX1dJRFRIIiwiRHJhZ0hhbmRsZUFycm93Tm9kZSIsImNvbnN0cnVjdG9yIiwicFN0YXJ0IiwicEVuZCIsImlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eSIsInRhbmRlbSIsImxlbmd0aCIsIk1hdGgiLCJhYnMiLCJkaXN0YW5jZSIsIngiLCJ5IiwiZmlsbCIsInN0cm9rZSIsImxpbmVXaWR0aCIsImRvdWJsZUhlYWQiLCJoZWFkSGVpZ2h0IiwiaGVhZFdpZHRoIiwidGFpbFdpZHRoIiwibm9ybWFsQ29sb3IiLCJoaWdobGlnaHRDb2xvciIsInRvdWNoQXJlYSIsImJvdW5kcyIsImRpbGF0ZWQiLCJsaW5rIiwiaGlnaGxpZ2h0ZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRyYWdIYW5kbGVBcnJvd05vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRG91YmxlIGFycm93IHVzZWQgZm9yIGRyYWcgaGFuZGxlcy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEFycm93Tm9kZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQXJyb3dOb2RlLmpzJztcclxuaW1wb3J0IGNhcGFjaXRvckxhYkJhc2ljcyBmcm9tICcuLi8uLi8uLi9jYXBhY2l0b3JMYWJCYXNpY3MuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IE5PUk1BTF9DT0xPUiA9ICdyZ2IoIDYxLCAxNzksIDc5ICknO1xyXG5jb25zdCBISUdITElHSFRfQ09MT1IgPSAneWVsbG93JztcclxuY29uc3QgU1RST0tFX0NPTE9SID0gJ2JsYWNrJztcclxuY29uc3QgTElORV9XSURUSCA9IDE7XHJcblxyXG5jbGFzcyBEcmFnSGFuZGxlQXJyb3dOb2RlIGV4dGVuZHMgQXJyb3dOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBwU3RhcnRcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IHBFbmRcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gaXNIaWdobGlnaHRlZFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwU3RhcnQsIHBFbmQsIGlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eSwgdGFuZGVtICkge1xyXG5cclxuICAgIC8vIGNhbGN1bGF0ZSB0aGUgcGFyYW1ldGVyIGZvciBoZWFkIGFuZCB0YWlsIHdpZHRoIGFuZCBoZWlnaHQuXHJcbiAgICBjb25zdCBsZW5ndGggPSBNYXRoLmFicyggcFN0YXJ0LmRpc3RhbmNlKCBwRW5kICkgKTtcclxuXHJcbiAgICBzdXBlciggcFN0YXJ0LngsIHBTdGFydC55LCBwRW5kLngsIHBFbmQueSwge1xyXG4gICAgICBmaWxsOiBOT1JNQUxfQ09MT1IsXHJcbiAgICAgIHN0cm9rZTogU1RST0tFX0NPTE9SLFxyXG4gICAgICBsaW5lV2lkdGg6IExJTkVfV0lEVEgsXHJcbiAgICAgIGRvdWJsZUhlYWQ6IHRydWUsXHJcbiAgICAgIGhlYWRIZWlnaHQ6IGxlbmd0aCxcclxuICAgICAgaGVhZFdpZHRoOiBsZW5ndGggLyAyLFxyXG4gICAgICB0YWlsV2lkdGg6IGxlbmd0aCAvIDUsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5ub3JtYWxDb2xvciA9IE5PUk1BTF9DT0xPUjtcclxuICAgIHRoaXMuaGlnaGxpZ2h0Q29sb3IgPSBISUdITElHSFRfQ09MT1I7XHJcblxyXG4gICAgLy8gbWFrZSB0aGUgYXJyb3cgc2xpZ2h0bHkgZWFzaWVyIHRvIGRyYWdcclxuICAgIHRoaXMudG91Y2hBcmVhID0gdGhpcy5ib3VuZHMuZGlsYXRlZCggMTAgKTtcclxuXHJcbiAgICAvLyBoaWdobGlnaHQgdGhlIGFycm93IG9uIHBvaW50ZXIgb3ZlclxyXG4gICAgaXNIaWdobGlnaHRlZFByb3BlcnR5LmxpbmsoIGhpZ2hsaWdodGVkID0+IHtcclxuICAgICAgdGhpcy5maWxsID0gaGlnaGxpZ2h0ZWQgPyBISUdITElHSFRfQ09MT1IgOiBOT1JNQUxfQ09MT1I7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYXBhY2l0b3JMYWJCYXNpY3MucmVnaXN0ZXIoICdEcmFnSGFuZGxlQXJyb3dOb2RlJywgRHJhZ0hhbmRsZUFycm93Tm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBEcmFnSGFuZGxlQXJyb3dOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSw2Q0FBNkM7QUFDbkUsT0FBT0Msa0JBQWtCLE1BQU0sZ0NBQWdDOztBQUUvRDtBQUNBLE1BQU1DLFlBQVksR0FBRyxvQkFBb0I7QUFDekMsTUFBTUMsZUFBZSxHQUFHLFFBQVE7QUFDaEMsTUFBTUMsWUFBWSxHQUFHLE9BQU87QUFDNUIsTUFBTUMsVUFBVSxHQUFHLENBQUM7QUFFcEIsTUFBTUMsbUJBQW1CLFNBQVNOLFNBQVMsQ0FBQztFQUUxQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLHFCQUFxQixFQUFFQyxNQUFNLEVBQUc7SUFFekQ7SUFDQSxNQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFFTixNQUFNLENBQUNPLFFBQVEsQ0FBRU4sSUFBSyxDQUFFLENBQUM7SUFFbEQsS0FBSyxDQUFFRCxNQUFNLENBQUNRLENBQUMsRUFBRVIsTUFBTSxDQUFDUyxDQUFDLEVBQUVSLElBQUksQ0FBQ08sQ0FBQyxFQUFFUCxJQUFJLENBQUNRLENBQUMsRUFBRTtNQUN6Q0MsSUFBSSxFQUFFaEIsWUFBWTtNQUNsQmlCLE1BQU0sRUFBRWYsWUFBWTtNQUNwQmdCLFNBQVMsRUFBRWYsVUFBVTtNQUNyQmdCLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxVQUFVLEVBQUVWLE1BQU07TUFDbEJXLFNBQVMsRUFBRVgsTUFBTSxHQUFHLENBQUM7TUFDckJZLFNBQVMsRUFBRVosTUFBTSxHQUFHLENBQUM7TUFDckJELE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNjLFdBQVcsR0FBR3ZCLFlBQVk7SUFDL0IsSUFBSSxDQUFDd0IsY0FBYyxHQUFHdkIsZUFBZTs7SUFFckM7SUFDQSxJQUFJLENBQUN3QixTQUFTLEdBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBRSxFQUFHLENBQUM7O0lBRTFDO0lBQ0FuQixxQkFBcUIsQ0FBQ29CLElBQUksQ0FBRUMsV0FBVyxJQUFJO01BQ3pDLElBQUksQ0FBQ2IsSUFBSSxHQUFHYSxXQUFXLEdBQUc1QixlQUFlLEdBQUdELFlBQVk7SUFDMUQsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBRCxrQkFBa0IsQ0FBQytCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRTFCLG1CQUFvQixDQUFDO0FBQ3pFLGVBQWVBLG1CQUFtQiJ9