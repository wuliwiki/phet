// Copyright 2015-2022, University of Colorado Boulder

/**
 * Dashed line used to connect a drag handle to the thing that it's dragging. This is a string of circles between two
 * points because some browsers do not support dashed lines.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import { Circle, Node } from '../../../../../scenery/js/imports.js';
import capacitorLabBasics from '../../../capacitorLabBasics.js';

// constants
const DOT_COLOR = 'black';
const DOT_SPACING = 6; // spacing of the dotted line.
const DOT_RADIUS = 2;
class DragHandleLineNode extends Node {
  /**
   * This is a string of circles that connects the capacitor plate to the drag handler node.
   *
   * @param {Vector2} pStart
   * @param {Vector2} pEnd
   */
  constructor(pStart, pEnd) {
    super();
    // length of line
    const length = pStart.distance(pEnd);

    // Unit vector from pStart to pEnd.
    const spacingVector = pEnd.minus(pStart).normalize().multiplyScalar(DOT_SPACING);

    // number of dots to be used along the line
    const numberOfDots = length / DOT_SPACING;
    for (let i = 0; i < numberOfDots; i++) {
      const dotPosition = new Vector2(pStart.x + i * spacingVector.x, pStart.y + i * spacingVector.y);
      this.addChild(new Circle(DOT_RADIUS, {
        fill: DOT_COLOR,
        center: dotPosition
      }));
    }
  }
}
capacitorLabBasics.register('DragHandleLineNode', DragHandleLineNode);
export default DragHandleLineNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiQ2lyY2xlIiwiTm9kZSIsImNhcGFjaXRvckxhYkJhc2ljcyIsIkRPVF9DT0xPUiIsIkRPVF9TUEFDSU5HIiwiRE9UX1JBRElVUyIsIkRyYWdIYW5kbGVMaW5lTm9kZSIsImNvbnN0cnVjdG9yIiwicFN0YXJ0IiwicEVuZCIsImxlbmd0aCIsImRpc3RhbmNlIiwic3BhY2luZ1ZlY3RvciIsIm1pbnVzIiwibm9ybWFsaXplIiwibXVsdGlwbHlTY2FsYXIiLCJudW1iZXJPZkRvdHMiLCJpIiwiZG90UG9zaXRpb24iLCJ4IiwieSIsImFkZENoaWxkIiwiZmlsbCIsImNlbnRlciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRHJhZ0hhbmRsZUxpbmVOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERhc2hlZCBsaW5lIHVzZWQgdG8gY29ubmVjdCBhIGRyYWcgaGFuZGxlIHRvIHRoZSB0aGluZyB0aGF0IGl0J3MgZHJhZ2dpbmcuIFRoaXMgaXMgYSBzdHJpbmcgb2YgY2lyY2xlcyBiZXR3ZWVuIHR3b1xyXG4gKiBwb2ludHMgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGRvIG5vdCBzdXBwb3J0IGRhc2hlZCBsaW5lcy5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY2FwYWNpdG9yTGFiQmFzaWNzIGZyb20gJy4uLy4uLy4uL2NhcGFjaXRvckxhYkJhc2ljcy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgRE9UX0NPTE9SID0gJ2JsYWNrJztcclxuY29uc3QgRE9UX1NQQUNJTkcgPSA2OyAvLyBzcGFjaW5nIG9mIHRoZSBkb3R0ZWQgbGluZS5cclxuY29uc3QgRE9UX1JBRElVUyA9IDI7XHJcblxyXG5jbGFzcyBEcmFnSGFuZGxlTGluZU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuICAvKipcclxuICAgKiBUaGlzIGlzIGEgc3RyaW5nIG9mIGNpcmNsZXMgdGhhdCBjb25uZWN0cyB0aGUgY2FwYWNpdG9yIHBsYXRlIHRvIHRoZSBkcmFnIGhhbmRsZXIgbm9kZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gcFN0YXJ0XHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBwRW5kXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHBTdGFydCwgcEVuZCApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG4gICAgLy8gbGVuZ3RoIG9mIGxpbmVcclxuICAgIGNvbnN0IGxlbmd0aCA9IHBTdGFydC5kaXN0YW5jZSggcEVuZCApO1xyXG5cclxuICAgIC8vIFVuaXQgdmVjdG9yIGZyb20gcFN0YXJ0IHRvIHBFbmQuXHJcbiAgICBjb25zdCBzcGFjaW5nVmVjdG9yID0gcEVuZC5taW51cyggcFN0YXJ0ICkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIERPVF9TUEFDSU5HICk7XHJcblxyXG4gICAgLy8gbnVtYmVyIG9mIGRvdHMgdG8gYmUgdXNlZCBhbG9uZyB0aGUgbGluZVxyXG4gICAgY29uc3QgbnVtYmVyT2ZEb3RzID0gbGVuZ3RoIC8gRE9UX1NQQUNJTkc7XHJcblxyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZEb3RzOyBpKysgKSB7XHJcbiAgICAgIGNvbnN0IGRvdFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoIHBTdGFydC54ICsgaSAqIHNwYWNpbmdWZWN0b3IueCwgcFN0YXJ0LnkgKyBpICogc3BhY2luZ1ZlY3Rvci55ICk7XHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBDaXJjbGUoIERPVF9SQURJVVMsIHsgZmlsbDogRE9UX0NPTE9SLCBjZW50ZXI6IGRvdFBvc2l0aW9uIH0gKSApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY2FwYWNpdG9yTGFiQmFzaWNzLnJlZ2lzdGVyKCAnRHJhZ0hhbmRsZUxpbmVOb2RlJywgRHJhZ0hhbmRsZUxpbmVOb2RlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEcmFnSGFuZGxlTGluZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLGtDQUFrQztBQUN0RCxTQUFTQyxNQUFNLEVBQUVDLElBQUksUUFBUSxzQ0FBc0M7QUFDbkUsT0FBT0Msa0JBQWtCLE1BQU0sZ0NBQWdDOztBQUUvRDtBQUNBLE1BQU1DLFNBQVMsR0FBRyxPQUFPO0FBQ3pCLE1BQU1DLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN2QixNQUFNQyxVQUFVLEdBQUcsQ0FBQztBQUVwQixNQUFNQyxrQkFBa0IsU0FBU0wsSUFBSSxDQUFDO0VBQ3BDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRztJQUUxQixLQUFLLENBQUMsQ0FBQztJQUNQO0lBQ0EsTUFBTUMsTUFBTSxHQUFHRixNQUFNLENBQUNHLFFBQVEsQ0FBRUYsSUFBSyxDQUFDOztJQUV0QztJQUNBLE1BQU1HLGFBQWEsR0FBR0gsSUFBSSxDQUFDSSxLQUFLLENBQUVMLE1BQU8sQ0FBQyxDQUFDTSxTQUFTLENBQUMsQ0FBQyxDQUFDQyxjQUFjLENBQUVYLFdBQVksQ0FBQzs7SUFFcEY7SUFDQSxNQUFNWSxZQUFZLEdBQUdOLE1BQU0sR0FBR04sV0FBVztJQUV6QyxLQUFNLElBQUlhLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsWUFBWSxFQUFFQyxDQUFDLEVBQUUsRUFBRztNQUN2QyxNQUFNQyxXQUFXLEdBQUcsSUFBSW5CLE9BQU8sQ0FBRVMsTUFBTSxDQUFDVyxDQUFDLEdBQUdGLENBQUMsR0FBR0wsYUFBYSxDQUFDTyxDQUFDLEVBQUVYLE1BQU0sQ0FBQ1ksQ0FBQyxHQUFHSCxDQUFDLEdBQUdMLGFBQWEsQ0FBQ1EsQ0FBRSxDQUFDO01BQ2pHLElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUlyQixNQUFNLENBQUVLLFVBQVUsRUFBRTtRQUFFaUIsSUFBSSxFQUFFbkIsU0FBUztRQUFFb0IsTUFBTSxFQUFFTDtNQUFZLENBQUUsQ0FBRSxDQUFDO0lBQ3JGO0VBQ0Y7QUFDRjtBQUVBaEIsa0JBQWtCLENBQUNzQixRQUFRLENBQUUsb0JBQW9CLEVBQUVsQixrQkFBbUIsQ0FBQztBQUV2RSxlQUFlQSxrQkFBa0IifQ==