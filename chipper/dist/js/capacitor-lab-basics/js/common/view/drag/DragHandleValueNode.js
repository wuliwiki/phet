// Copyright 2015-2022, University of Colorado Boulder

/**
 * Value displayed on a drag handle.
 * The value is formatted, and its presentation is localizable.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Utils from '../../../../../dot/js/Utils.js';
import Vector2 from '../../../../../dot/js/Vector2.js';
import merge from '../../../../../phet-core/js/merge.js';
import StringUtils from '../../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../../scenery-phet/js/PhetFont.js';
import { Node, RichText, Text } from '../../../../../scenery/js/imports.js';
import Tandem from '../../../../../tandem/js/Tandem.js';
import capacitorLabBasics from '../../../capacitorLabBasics.js';

// constants
const LABEL_FONT = new PhetFont({
  weight: 'bold',
  size: 12
});
const VALUE_FONT = new PhetFont({
  size: 12
});

// max width of text for the label and value, determined empirically
const LABEL_MAX_WIDTH = 100;
const VALUE_MAX_WIDTH = 80;
class DragHandleValueNode extends Node {
  /**
   * @param {string} label
   * @param {number} value
   * @param {string} unitsPattern
   * @param {Object} [options]
   */
  constructor(label, value, unitsPattern, options) {
    options = merge({
      tandem: Tandem.OPTIONAL
    }, options);
    super();

    // @private {string}
    this.unitsPattern = unitsPattern;
    const labelNode = new Text(label, {
      font: LABEL_FONT,
      maxWidth: LABEL_MAX_WIDTH
    });
    this.addChild(labelNode);

    // @private
    this.valueText = new RichText('', {
      font: VALUE_FONT,
      maxWidth: VALUE_MAX_WIDTH,
      tandem: options.tandem.createTandem('valueText')
    });
    this.addChild(this.valueText);

    // layout: value below label, left-justified
    labelNode.translation = new Vector2(0, 0);
    this.valueText.translation = new Vector2(0, labelNode.bottom + 15);
    this.setValue(value);
    this.mutate(options);
  }

  /**
   * Set the value of the value node, formatting the number and the units to the pattern.
   * @public
   *
   * @param {number} value
   * @param {number} decimalPlaces
   */
  setValue(value, decimalPlaces) {
    const formattedValue = Utils.toFixed(value, decimalPlaces /* one decimal place */);
    this.valueText.setString(StringUtils.fillIn(this.unitsPattern, {
      value: formattedValue
    }));
  }
}
capacitorLabBasics.register('DragHandleValueNode', DragHandleValueNode);
export default DragHandleValueNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJtZXJnZSIsIlN0cmluZ1V0aWxzIiwiUGhldEZvbnQiLCJOb2RlIiwiUmljaFRleHQiLCJUZXh0IiwiVGFuZGVtIiwiY2FwYWNpdG9yTGFiQmFzaWNzIiwiTEFCRUxfRk9OVCIsIndlaWdodCIsInNpemUiLCJWQUxVRV9GT05UIiwiTEFCRUxfTUFYX1dJRFRIIiwiVkFMVUVfTUFYX1dJRFRIIiwiRHJhZ0hhbmRsZVZhbHVlTm9kZSIsImNvbnN0cnVjdG9yIiwibGFiZWwiLCJ2YWx1ZSIsInVuaXRzUGF0dGVybiIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJPUFRJT05BTCIsImxhYmVsTm9kZSIsImZvbnQiLCJtYXhXaWR0aCIsImFkZENoaWxkIiwidmFsdWVUZXh0IiwiY3JlYXRlVGFuZGVtIiwidHJhbnNsYXRpb24iLCJib3R0b20iLCJzZXRWYWx1ZSIsIm11dGF0ZSIsImRlY2ltYWxQbGFjZXMiLCJmb3JtYXR0ZWRWYWx1ZSIsInRvRml4ZWQiLCJzZXRTdHJpbmciLCJmaWxsSW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRyYWdIYW5kbGVWYWx1ZU5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmFsdWUgZGlzcGxheWVkIG9uIGEgZHJhZyBoYW5kbGUuXHJcbiAqIFRoZSB2YWx1ZSBpcyBmb3JtYXR0ZWQsIGFuZCBpdHMgcHJlc2VudGF0aW9uIGlzIGxvY2FsaXphYmxlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBSaWNoVGV4dCwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBjYXBhY2l0b3JMYWJCYXNpY3MgZnJvbSAnLi4vLi4vLi4vY2FwYWNpdG9yTGFiQmFzaWNzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBMQUJFTF9GT05UID0gbmV3IFBoZXRGb250KCB7IHdlaWdodDogJ2JvbGQnLCBzaXplOiAxMiB9ICk7XHJcbmNvbnN0IFZBTFVFX0ZPTlQgPSBuZXcgUGhldEZvbnQoIHsgc2l6ZTogMTIgfSApO1xyXG5cclxuLy8gbWF4IHdpZHRoIG9mIHRleHQgZm9yIHRoZSBsYWJlbCBhbmQgdmFsdWUsIGRldGVybWluZWQgZW1waXJpY2FsbHlcclxuY29uc3QgTEFCRUxfTUFYX1dJRFRIID0gMTAwO1xyXG5jb25zdCBWQUxVRV9NQVhfV0lEVEggPSA4MDtcclxuXHJcbmNsYXNzIERyYWdIYW5kbGVWYWx1ZU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWxcclxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdHNQYXR0ZXJuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBsYWJlbCwgdmFsdWUsIHVuaXRzUGF0dGVybiwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHsgdGFuZGVtOiBUYW5kZW0uT1BUSU9OQUwgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge3N0cmluZ31cclxuICAgIHRoaXMudW5pdHNQYXR0ZXJuID0gdW5pdHNQYXR0ZXJuO1xyXG5cclxuICAgIGNvbnN0IGxhYmVsTm9kZSA9IG5ldyBUZXh0KCBsYWJlbCwgeyBmb250OiBMQUJFTF9GT05ULCBtYXhXaWR0aDogTEFCRUxfTUFYX1dJRFRIIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGxhYmVsTm9kZSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLnZhbHVlVGV4dCA9IG5ldyBSaWNoVGV4dCggJycsIHtcclxuICAgICAgZm9udDogVkFMVUVfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IFZBTFVFX01BWF9XSURUSCxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2YWx1ZVRleHQnIClcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMudmFsdWVUZXh0ICk7XHJcblxyXG4gICAgLy8gbGF5b3V0OiB2YWx1ZSBiZWxvdyBsYWJlbCwgbGVmdC1qdXN0aWZpZWRcclxuICAgIGxhYmVsTm9kZS50cmFuc2xhdGlvbiA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XHJcbiAgICB0aGlzLnZhbHVlVGV4dC50cmFuc2xhdGlvbiA9IG5ldyBWZWN0b3IyKCAwLCBsYWJlbE5vZGUuYm90dG9tICsgMTUgKTtcclxuXHJcbiAgICB0aGlzLnNldFZhbHVlKCB2YWx1ZSApO1xyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoZSB2YWx1ZSBub2RlLCBmb3JtYXR0aW5nIHRoZSBudW1iZXIgYW5kIHRoZSB1bml0cyB0byB0aGUgcGF0dGVybi5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVjaW1hbFBsYWNlc1xyXG4gICAqL1xyXG4gIHNldFZhbHVlKCB2YWx1ZSwgZGVjaW1hbFBsYWNlcyApIHtcclxuICAgIGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gVXRpbHMudG9GaXhlZCggdmFsdWUsIGRlY2ltYWxQbGFjZXMgLyogb25lIGRlY2ltYWwgcGxhY2UgKi8gKTtcclxuICAgIHRoaXMudmFsdWVUZXh0LnNldFN0cmluZyggU3RyaW5nVXRpbHMuZmlsbEluKCB0aGlzLnVuaXRzUGF0dGVybiwge1xyXG4gICAgICB2YWx1ZTogZm9ybWF0dGVkVmFsdWVcclxuICAgIH0gKSApO1xyXG4gIH1cclxufVxyXG5cclxuY2FwYWNpdG9yTGFiQmFzaWNzLnJlZ2lzdGVyKCAnRHJhZ0hhbmRsZVZhbHVlTm9kZScsIERyYWdIYW5kbGVWYWx1ZU5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERyYWdIYW5kbGVWYWx1ZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELE9BQU9DLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsT0FBT0MsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxPQUFPQyxXQUFXLE1BQU0sa0RBQWtEO0FBQzFFLE9BQU9DLFFBQVEsTUFBTSw0Q0FBNEM7QUFDakUsU0FBU0MsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLElBQUksUUFBUSxzQ0FBc0M7QUFDM0UsT0FBT0MsTUFBTSxNQUFNLG9DQUFvQztBQUN2RCxPQUFPQyxrQkFBa0IsTUFBTSxnQ0FBZ0M7O0FBRS9EO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUlOLFFBQVEsQ0FBRTtFQUFFTyxNQUFNLEVBQUUsTUFBTTtFQUFFQyxJQUFJLEVBQUU7QUFBRyxDQUFFLENBQUM7QUFDL0QsTUFBTUMsVUFBVSxHQUFHLElBQUlULFFBQVEsQ0FBRTtFQUFFUSxJQUFJLEVBQUU7QUFBRyxDQUFFLENBQUM7O0FBRS9DO0FBQ0EsTUFBTUUsZUFBZSxHQUFHLEdBQUc7QUFDM0IsTUFBTUMsZUFBZSxHQUFHLEVBQUU7QUFFMUIsTUFBTUMsbUJBQW1CLFNBQVNYLElBQUksQ0FBQztFQUNyQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRVksV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFHO0lBRWpEQSxPQUFPLEdBQUduQixLQUFLLENBQUU7TUFBRW9CLE1BQU0sRUFBRWQsTUFBTSxDQUFDZTtJQUFTLENBQUMsRUFBRUYsT0FBUSxDQUFDO0lBRXZELEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDRCxZQUFZLEdBQUdBLFlBQVk7SUFFaEMsTUFBTUksU0FBUyxHQUFHLElBQUlqQixJQUFJLENBQUVXLEtBQUssRUFBRTtNQUFFTyxJQUFJLEVBQUVmLFVBQVU7TUFBRWdCLFFBQVEsRUFBRVo7SUFBZ0IsQ0FBRSxDQUFDO0lBQ3BGLElBQUksQ0FBQ2EsUUFBUSxDQUFFSCxTQUFVLENBQUM7O0lBRTFCO0lBQ0EsSUFBSSxDQUFDSSxTQUFTLEdBQUcsSUFBSXRCLFFBQVEsQ0FBRSxFQUFFLEVBQUU7TUFDakNtQixJQUFJLEVBQUVaLFVBQVU7TUFDaEJhLFFBQVEsRUFBRVgsZUFBZTtNQUN6Qk8sTUFBTSxFQUFFRCxPQUFPLENBQUNDLE1BQU0sQ0FBQ08sWUFBWSxDQUFFLFdBQVk7SUFDbkQsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDRixRQUFRLENBQUUsSUFBSSxDQUFDQyxTQUFVLENBQUM7O0lBRS9CO0lBQ0FKLFNBQVMsQ0FBQ00sV0FBVyxHQUFHLElBQUk3QixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztJQUMzQyxJQUFJLENBQUMyQixTQUFTLENBQUNFLFdBQVcsR0FBRyxJQUFJN0IsT0FBTyxDQUFFLENBQUMsRUFBRXVCLFNBQVMsQ0FBQ08sTUFBTSxHQUFHLEVBQUcsQ0FBQztJQUVwRSxJQUFJLENBQUNDLFFBQVEsQ0FBRWIsS0FBTSxDQUFDO0lBQ3RCLElBQUksQ0FBQ2MsTUFBTSxDQUFFWixPQUFRLENBQUM7RUFDeEI7O0VBR0E7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRVcsUUFBUUEsQ0FBRWIsS0FBSyxFQUFFZSxhQUFhLEVBQUc7SUFDL0IsTUFBTUMsY0FBYyxHQUFHbkMsS0FBSyxDQUFDb0MsT0FBTyxDQUFFakIsS0FBSyxFQUFFZSxhQUFhLENBQUMsdUJBQXdCLENBQUM7SUFDcEYsSUFBSSxDQUFDTixTQUFTLENBQUNTLFNBQVMsQ0FBRWxDLFdBQVcsQ0FBQ21DLE1BQU0sQ0FBRSxJQUFJLENBQUNsQixZQUFZLEVBQUU7TUFDL0RELEtBQUssRUFBRWdCO0lBQ1QsQ0FBRSxDQUFFLENBQUM7RUFDUDtBQUNGO0FBRUExQixrQkFBa0IsQ0FBQzhCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRXZCLG1CQUFvQixDQUFDO0FBRXpFLGVBQWVBLG1CQUFtQiJ9