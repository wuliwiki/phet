// Copyright 2015-2022, University of Colorado Boulder

/**
 * Bulb Node.  Bulb is composed of a image at the base, and the bulb and filament are drawn.
 * Bulb brightness is a function of the current running through the bulb.
 *
 * NOTE: This code is borrowed directly from Faraday's Law.  LightBulbNode is still being generalized, see
 * https://github.com/phetsims/scenery-phet/issues/170.
 *
 * @author Vasily Shakhov (MLearner)
 * @author John Blanco (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import LinearFunction from '../../../../dot/js/LinearFunction.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import lightBulbBase_png from '../../../../scenery-phet/mipmaps/lightBulbBase_png.js';
import { Circle, Image, Node, Path, RadialGradient } from '../../../../scenery/js/imports.js';
import capacitorLabBasics from '../../capacitorLabBasics.js';
import CircuitState from '../model/CircuitState.js';

// constants
const BULB_HEIGHT = 130;
const BULB_WIDTH = 65;
const BULB_BASE_WIDTH = 42;
const NUM_FILAMENT_ZIG_ZAGS = 8;
const FILAMENT_ZIG_ZAG_SPAN = 8;
class BulbNode extends Node {
  /**
   * @param {LightBulb} lightBulb
   * @param {Property.<number>} voltageProperty - voltage across the terminals of the lightbulb, determines brightness
   * @param {Property.<CircuitState>} circuitConnectionProperty
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(lightBulb, voltageProperty, circuitConnectionProperty, tandem, options) {
    super({
      tandem: tandem
    });

    // @private {LightBulb}
    this.bulb = drawBulbNode(options);
    this.addChild(this.bulb);

    // NOTE: this map deviates from the bulb in faradays-law
    const bulbBrightnessMap = new LinearFunction(0, 5E-13, 0, 225, true);
    const updateBrightnessScale = voltage => {
      if (circuitConnectionProperty.value === CircuitState.LIGHT_BULB_CONNECTED) {
        const targetScaleFactor = bulbBrightnessMap.evaluate(Math.abs(lightBulb.getCurrent(voltage)));
        if (targetScaleFactor < 0.1) {
          this.bulb.haloNode.visible = false;
        } else {
          this.bulb.haloNode.visible = true;
          const scale = targetScaleFactor / this.bulb.haloNode.transform.matrix.scaleVector.x;
          this.bulb.haloNode.scale(scale);
        }
      }

      // Light bulb is not connected to the circuit, so no current can flow through it.
      else {
        this.bulb.haloNode.visible = false;
      }
    };

    // Update the halo as the needle angle changes.
    voltageProperty.link(voltage => {
      updateBrightnessScale(voltage);
    });

    // make sure that the light bulb turns off instantly when disconnected from capacitor.
    circuitConnectionProperty.link(circuitConnection => {
      updateBrightnessScale(voltageProperty.value);
    });
  }

  /**
   * Create a bulb node icon.  This creates a node that is not linked to any model properties.
   * @public
   *
   * @param {Object} [options]
   * @returns {Node}
   */
  static createBulbIcon(options) {
    return drawBulbNode(options);
  }
}
capacitorLabBasics.register('BulbNode', BulbNode);

/**
 * Create the visual components for a bulbNode with a base, bulb, filament and halo.
 * The halo is made public so that the BulbNode can change its size as a representation
 * of brightness.
 * @private
 *
 * @param {Object} [options]
 * @returns {Node}
 */
function drawBulbNode(options) {
  const iconNode = new Node(options);

  // Create the base of the bulb
  const bulbBase = new Image(lightBulbBase_png);
  bulbBase.scale(BULB_BASE_WIDTH / bulbBase.bounds.height);

  // Important Note: For the drawing code below, the reference frame is assumed to be such that the point x=0, y=0 is
  // at the left side of the light bulb base, which is also the right side of the light bulb body, and the vertical
  // center of both.  This was the easiest to work with.

  // Create the bulb body.
  const bulbNeckWidth = BULB_BASE_WIDTH * 0.85;
  const bulbBodyHeight = BULB_HEIGHT - bulbBase.bounds.width;
  const controlPointYValue = BULB_WIDTH * 0.7;
  const bulbShape = new Shape().moveTo(0, -bulbNeckWidth / 2).cubicCurveTo(-bulbBodyHeight * 0.33, -controlPointYValue, -bulbBodyHeight * 0.95, -controlPointYValue, -bulbBodyHeight, 0).cubicCurveTo(-bulbBodyHeight * 0.95, controlPointYValue, -bulbBodyHeight * 0.33, controlPointYValue, 0, bulbNeckWidth / 2);
  const bulbBodyOutline = new Path(bulbShape, {
    stroke: 'black',
    lineCap: 'round'
  });
  const bulbBodyFill = new Path(bulbShape, {
    fill: new RadialGradient(bulbBodyOutline.centerX, bulbBodyOutline.centerY, BULB_WIDTH / 10, bulbBodyOutline.centerX, bulbBodyOutline.centerY, BULB_WIDTH / 2).addColorStop(0, '#eeeeee').addColorStop(1, '#bbccbb')
  });

  // Create the filament support wires.
  const filamentWireHeight = bulbBodyHeight * 0.6;
  const filamentTopPoint = new Vector2(-filamentWireHeight, -BULB_WIDTH * 0.3);
  const filamentBottomPoint = new Vector2(-filamentWireHeight, BULB_WIDTH * 0.3);
  const filamentSupportWiresShape = new Shape();
  filamentSupportWiresShape.moveTo(0, -BULB_BASE_WIDTH * 0.3);
  filamentSupportWiresShape.cubicCurveTo(-filamentWireHeight * 0.3, -BULB_BASE_WIDTH * 0.3, -filamentWireHeight * 0.4, filamentTopPoint.y, filamentTopPoint.x, filamentTopPoint.y);
  filamentSupportWiresShape.moveTo(0, BULB_BASE_WIDTH * 0.3);
  filamentSupportWiresShape.cubicCurveTo(-filamentWireHeight * 0.3, BULB_BASE_WIDTH * 0.3, -filamentWireHeight * 0.4, filamentBottomPoint.y, filamentBottomPoint.x, filamentBottomPoint.y);
  const filamentSupportWires = new Path(filamentSupportWiresShape, {
    stroke: 'black'
  });

  // Create the filament, which is a zig-zag shape.
  const filamentShape = new Shape().moveToPoint(filamentBottomPoint).zigZagToPoint(filamentTopPoint, FILAMENT_ZIG_ZAG_SPAN, NUM_FILAMENT_ZIG_ZAGS, true);
  const filament = new Path(filamentShape, {
    stroke: 'black'
  });

  // Create the 'halo' that makes the bulb look like it is shining.
  // @public
  iconNode.haloNode = new Node();
  iconNode.haloNode.addChild(new Circle(5, {
    fill: 'white',
    opacity: 0.46
  }));
  iconNode.haloNode.addChild(new Circle(3.75, {
    fill: 'white',
    opacity: 0.51
  }));
  iconNode.haloNode.addChild(new Circle(2, {
    fill: 'white'
  }));

  // Add the children in the order needed to get the desired layering
  iconNode.addChild(bulbBodyFill);
  iconNode.addChild(filamentSupportWires);
  iconNode.addChild(filament);
  iconNode.addChild(iconNode.haloNode);
  iconNode.addChild(bulbBase);
  iconNode.addChild(bulbBodyOutline);

  // Do some last layout
  bulbBase.centerY = 0;
  bulbBase.left = 0;
  iconNode.haloNode.center = filament.center;
  iconNode.haloNode.visible = false;
  iconNode.rotate(Math.PI);
  return iconNode;
}
export default BulbNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lYXJGdW5jdGlvbiIsIlZlY3RvcjIiLCJTaGFwZSIsImxpZ2h0QnVsYkJhc2VfcG5nIiwiQ2lyY2xlIiwiSW1hZ2UiLCJOb2RlIiwiUGF0aCIsIlJhZGlhbEdyYWRpZW50IiwiY2FwYWNpdG9yTGFiQmFzaWNzIiwiQ2lyY3VpdFN0YXRlIiwiQlVMQl9IRUlHSFQiLCJCVUxCX1dJRFRIIiwiQlVMQl9CQVNFX1dJRFRIIiwiTlVNX0ZJTEFNRU5UX1pJR19aQUdTIiwiRklMQU1FTlRfWklHX1pBR19TUEFOIiwiQnVsYk5vZGUiLCJjb25zdHJ1Y3RvciIsImxpZ2h0QnVsYiIsInZvbHRhZ2VQcm9wZXJ0eSIsImNpcmN1aXRDb25uZWN0aW9uUHJvcGVydHkiLCJ0YW5kZW0iLCJvcHRpb25zIiwiYnVsYiIsImRyYXdCdWxiTm9kZSIsImFkZENoaWxkIiwiYnVsYkJyaWdodG5lc3NNYXAiLCJ1cGRhdGVCcmlnaHRuZXNzU2NhbGUiLCJ2b2x0YWdlIiwidmFsdWUiLCJMSUdIVF9CVUxCX0NPTk5FQ1RFRCIsInRhcmdldFNjYWxlRmFjdG9yIiwiZXZhbHVhdGUiLCJNYXRoIiwiYWJzIiwiZ2V0Q3VycmVudCIsImhhbG9Ob2RlIiwidmlzaWJsZSIsInNjYWxlIiwidHJhbnNmb3JtIiwibWF0cml4Iiwic2NhbGVWZWN0b3IiLCJ4IiwibGluayIsImNpcmN1aXRDb25uZWN0aW9uIiwiY3JlYXRlQnVsYkljb24iLCJyZWdpc3RlciIsImljb25Ob2RlIiwiYnVsYkJhc2UiLCJib3VuZHMiLCJoZWlnaHQiLCJidWxiTmVja1dpZHRoIiwiYnVsYkJvZHlIZWlnaHQiLCJ3aWR0aCIsImNvbnRyb2xQb2ludFlWYWx1ZSIsImJ1bGJTaGFwZSIsIm1vdmVUbyIsImN1YmljQ3VydmVUbyIsImJ1bGJCb2R5T3V0bGluZSIsInN0cm9rZSIsImxpbmVDYXAiLCJidWxiQm9keUZpbGwiLCJmaWxsIiwiY2VudGVyWCIsImNlbnRlclkiLCJhZGRDb2xvclN0b3AiLCJmaWxhbWVudFdpcmVIZWlnaHQiLCJmaWxhbWVudFRvcFBvaW50IiwiZmlsYW1lbnRCb3R0b21Qb2ludCIsImZpbGFtZW50U3VwcG9ydFdpcmVzU2hhcGUiLCJ5IiwiZmlsYW1lbnRTdXBwb3J0V2lyZXMiLCJmaWxhbWVudFNoYXBlIiwibW92ZVRvUG9pbnQiLCJ6aWdaYWdUb1BvaW50IiwiZmlsYW1lbnQiLCJvcGFjaXR5IiwibGVmdCIsImNlbnRlciIsInJvdGF0ZSIsIlBJIl0sInNvdXJjZXMiOlsiQnVsYk5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQnVsYiBOb2RlLiAgQnVsYiBpcyBjb21wb3NlZCBvZiBhIGltYWdlIGF0IHRoZSBiYXNlLCBhbmQgdGhlIGJ1bGIgYW5kIGZpbGFtZW50IGFyZSBkcmF3bi5cclxuICogQnVsYiBicmlnaHRuZXNzIGlzIGEgZnVuY3Rpb24gb2YgdGhlIGN1cnJlbnQgcnVubmluZyB0aHJvdWdoIHRoZSBidWxiLlxyXG4gKlxyXG4gKiBOT1RFOiBUaGlzIGNvZGUgaXMgYm9ycm93ZWQgZGlyZWN0bHkgZnJvbSBGYXJhZGF5J3MgTGF3LiAgTGlnaHRCdWxiTm9kZSBpcyBzdGlsbCBiZWluZyBnZW5lcmFsaXplZCwgc2VlXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5LXBoZXQvaXNzdWVzLzE3MC5cclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAoTUxlYXJuZXIpXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBMaW5lYXJGdW5jdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvTGluZWFyRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGxpZ2h0QnVsYkJhc2VfcG5nIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9taXBtYXBzL2xpZ2h0QnVsYkJhc2VfcG5nLmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBJbWFnZSwgTm9kZSwgUGF0aCwgUmFkaWFsR3JhZGllbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY2FwYWNpdG9yTGFiQmFzaWNzIGZyb20gJy4uLy4uL2NhcGFjaXRvckxhYkJhc2ljcy5qcyc7XHJcbmltcG9ydCBDaXJjdWl0U3RhdGUgZnJvbSAnLi4vbW9kZWwvQ2lyY3VpdFN0YXRlLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBCVUxCX0hFSUdIVCA9IDEzMDtcclxuY29uc3QgQlVMQl9XSURUSCA9IDY1O1xyXG5jb25zdCBCVUxCX0JBU0VfV0lEVEggPSA0MjtcclxuY29uc3QgTlVNX0ZJTEFNRU5UX1pJR19aQUdTID0gODtcclxuY29uc3QgRklMQU1FTlRfWklHX1pBR19TUEFOID0gODtcclxuXHJcbmNsYXNzIEJ1bGJOb2RlIGV4dGVuZHMgTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtMaWdodEJ1bGJ9IGxpZ2h0QnVsYlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IHZvbHRhZ2VQcm9wZXJ0eSAtIHZvbHRhZ2UgYWNyb3NzIHRoZSB0ZXJtaW5hbHMgb2YgdGhlIGxpZ2h0YnVsYiwgZGV0ZXJtaW5lcyBicmlnaHRuZXNzXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Q2lyY3VpdFN0YXRlPn0gY2lyY3VpdENvbm5lY3Rpb25Qcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGxpZ2h0QnVsYiwgdm9sdGFnZVByb3BlcnR5LCBjaXJjdWl0Q29ubmVjdGlvblByb3BlcnR5LCB0YW5kZW0sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7TGlnaHRCdWxifVxyXG4gICAgdGhpcy5idWxiID0gZHJhd0J1bGJOb2RlKCBvcHRpb25zICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLmJ1bGIgKTtcclxuXHJcbiAgICAvLyBOT1RFOiB0aGlzIG1hcCBkZXZpYXRlcyBmcm9tIHRoZSBidWxiIGluIGZhcmFkYXlzLWxhd1xyXG4gICAgY29uc3QgYnVsYkJyaWdodG5lc3NNYXAgPSBuZXcgTGluZWFyRnVuY3Rpb24oIDAsIDVFLTEzLCAwLCAyMjUsIHRydWUgKTtcclxuXHJcbiAgICBjb25zdCB1cGRhdGVCcmlnaHRuZXNzU2NhbGUgPSB2b2x0YWdlID0+IHtcclxuICAgICAgaWYgKCBjaXJjdWl0Q29ubmVjdGlvblByb3BlcnR5LnZhbHVlID09PSBDaXJjdWl0U3RhdGUuTElHSFRfQlVMQl9DT05ORUNURUQgKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0U2NhbGVGYWN0b3IgPSBidWxiQnJpZ2h0bmVzc01hcC5ldmFsdWF0ZSggTWF0aC5hYnMoIGxpZ2h0QnVsYi5nZXRDdXJyZW50KCB2b2x0YWdlICkgKSApO1xyXG4gICAgICAgIGlmICggdGFyZ2V0U2NhbGVGYWN0b3IgPCAwLjEgKSB7XHJcbiAgICAgICAgICB0aGlzLmJ1bGIuaGFsb05vZGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuYnVsYi5oYWxvTm9kZS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgIGNvbnN0IHNjYWxlID0gdGFyZ2V0U2NhbGVGYWN0b3IgLyB0aGlzLmJ1bGIuaGFsb05vZGUudHJhbnNmb3JtLm1hdHJpeC5zY2FsZVZlY3Rvci54O1xyXG4gICAgICAgICAgdGhpcy5idWxiLmhhbG9Ob2RlLnNjYWxlKCBzY2FsZSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTGlnaHQgYnVsYiBpcyBub3QgY29ubmVjdGVkIHRvIHRoZSBjaXJjdWl0LCBzbyBubyBjdXJyZW50IGNhbiBmbG93IHRocm91Z2ggaXQuXHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYnVsYi5oYWxvTm9kZS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBoYWxvIGFzIHRoZSBuZWVkbGUgYW5nbGUgY2hhbmdlcy5cclxuICAgIHZvbHRhZ2VQcm9wZXJ0eS5saW5rKCB2b2x0YWdlID0+IHtcclxuICAgICAgdXBkYXRlQnJpZ2h0bmVzc1NjYWxlKCB2b2x0YWdlICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIGxpZ2h0IGJ1bGIgdHVybnMgb2ZmIGluc3RhbnRseSB3aGVuIGRpc2Nvbm5lY3RlZCBmcm9tIGNhcGFjaXRvci5cclxuICAgIGNpcmN1aXRDb25uZWN0aW9uUHJvcGVydHkubGluayggY2lyY3VpdENvbm5lY3Rpb24gPT4ge1xyXG4gICAgICB1cGRhdGVCcmlnaHRuZXNzU2NhbGUoIHZvbHRhZ2VQcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgYnVsYiBub2RlIGljb24uICBUaGlzIGNyZWF0ZXMgYSBub2RlIHRoYXQgaXMgbm90IGxpbmtlZCB0byBhbnkgbW9kZWwgcHJvcGVydGllcy5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICogQHJldHVybnMge05vZGV9XHJcbiAgICovXHJcbiAgc3RhdGljIGNyZWF0ZUJ1bGJJY29uKCBvcHRpb25zICkge1xyXG4gICAgcmV0dXJuIGRyYXdCdWxiTm9kZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuY2FwYWNpdG9yTGFiQmFzaWNzLnJlZ2lzdGVyKCAnQnVsYk5vZGUnLCBCdWxiTm9kZSApO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSB0aGUgdmlzdWFsIGNvbXBvbmVudHMgZm9yIGEgYnVsYk5vZGUgd2l0aCBhIGJhc2UsIGJ1bGIsIGZpbGFtZW50IGFuZCBoYWxvLlxyXG4gKiBUaGUgaGFsbyBpcyBtYWRlIHB1YmxpYyBzbyB0aGF0IHRoZSBCdWxiTm9kZSBjYW4gY2hhbmdlIGl0cyBzaXplIGFzIGEgcmVwcmVzZW50YXRpb25cclxuICogb2YgYnJpZ2h0bmVzcy5cclxuICogQHByaXZhdGVcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAcmV0dXJucyB7Tm9kZX1cclxuICovXHJcbmZ1bmN0aW9uIGRyYXdCdWxiTm9kZSggb3B0aW9ucyApIHtcclxuXHJcbiAgY29uc3QgaWNvbk5vZGUgPSBuZXcgTm9kZSggb3B0aW9ucyApO1xyXG5cclxuICAvLyBDcmVhdGUgdGhlIGJhc2Ugb2YgdGhlIGJ1bGJcclxuICBjb25zdCBidWxiQmFzZSA9IG5ldyBJbWFnZSggbGlnaHRCdWxiQmFzZV9wbmcgKTtcclxuICBidWxiQmFzZS5zY2FsZSggQlVMQl9CQVNFX1dJRFRIIC8gYnVsYkJhc2UuYm91bmRzLmhlaWdodCApO1xyXG5cclxuICAvLyBJbXBvcnRhbnQgTm90ZTogRm9yIHRoZSBkcmF3aW5nIGNvZGUgYmVsb3csIHRoZSByZWZlcmVuY2UgZnJhbWUgaXMgYXNzdW1lZCB0byBiZSBzdWNoIHRoYXQgdGhlIHBvaW50IHg9MCwgeT0wIGlzXHJcbiAgLy8gYXQgdGhlIGxlZnQgc2lkZSBvZiB0aGUgbGlnaHQgYnVsYiBiYXNlLCB3aGljaCBpcyBhbHNvIHRoZSByaWdodCBzaWRlIG9mIHRoZSBsaWdodCBidWxiIGJvZHksIGFuZCB0aGUgdmVydGljYWxcclxuICAvLyBjZW50ZXIgb2YgYm90aC4gIFRoaXMgd2FzIHRoZSBlYXNpZXN0IHRvIHdvcmsgd2l0aC5cclxuXHJcbiAgLy8gQ3JlYXRlIHRoZSBidWxiIGJvZHkuXHJcbiAgY29uc3QgYnVsYk5lY2tXaWR0aCA9IEJVTEJfQkFTRV9XSURUSCAqIDAuODU7XHJcbiAgY29uc3QgYnVsYkJvZHlIZWlnaHQgPSBCVUxCX0hFSUdIVCAtIGJ1bGJCYXNlLmJvdW5kcy53aWR0aDtcclxuICBjb25zdCBjb250cm9sUG9pbnRZVmFsdWUgPSBCVUxCX1dJRFRIICogMC43O1xyXG4gIGNvbnN0IGJ1bGJTaGFwZSA9IG5ldyBTaGFwZSgpLm1vdmVUbyggMCwgLWJ1bGJOZWNrV2lkdGggLyAyICkuY3ViaWNDdXJ2ZVRvKCAtYnVsYkJvZHlIZWlnaHQgKiAwLjMzLCAtY29udHJvbFBvaW50WVZhbHVlLCAtYnVsYkJvZHlIZWlnaHQgKiAwLjk1LCAtY29udHJvbFBvaW50WVZhbHVlLCAtYnVsYkJvZHlIZWlnaHQsIDAgKS5jdWJpY0N1cnZlVG8oIC1idWxiQm9keUhlaWdodCAqIDAuOTUsIGNvbnRyb2xQb2ludFlWYWx1ZSwgLWJ1bGJCb2R5SGVpZ2h0ICogMC4zMyxcclxuICAgIGNvbnRyb2xQb2ludFlWYWx1ZSwgMCwgYnVsYk5lY2tXaWR0aCAvIDIgKTtcclxuICBjb25zdCBidWxiQm9keU91dGxpbmUgPSBuZXcgUGF0aCggYnVsYlNoYXBlLCB7XHJcbiAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICBsaW5lQ2FwOiAncm91bmQnXHJcbiAgfSApO1xyXG4gIGNvbnN0IGJ1bGJCb2R5RmlsbCA9IG5ldyBQYXRoKCBidWxiU2hhcGUsIHtcclxuICAgIGZpbGw6IG5ldyBSYWRpYWxHcmFkaWVudCggYnVsYkJvZHlPdXRsaW5lLmNlbnRlclgsIGJ1bGJCb2R5T3V0bGluZS5jZW50ZXJZLCBCVUxCX1dJRFRIIC8gMTAsIGJ1bGJCb2R5T3V0bGluZS5jZW50ZXJYLFxyXG4gICAgICBidWxiQm9keU91dGxpbmUuY2VudGVyWSwgQlVMQl9XSURUSCAvIDIgKS5hZGRDb2xvclN0b3AoIDAsICcjZWVlZWVlJyApLmFkZENvbG9yU3RvcCggMSwgJyNiYmNjYmInIClcclxuICB9ICk7XHJcblxyXG4gIC8vIENyZWF0ZSB0aGUgZmlsYW1lbnQgc3VwcG9ydCB3aXJlcy5cclxuICBjb25zdCBmaWxhbWVudFdpcmVIZWlnaHQgPSBidWxiQm9keUhlaWdodCAqIDAuNjtcclxuICBjb25zdCBmaWxhbWVudFRvcFBvaW50ID0gbmV3IFZlY3RvcjIoIC1maWxhbWVudFdpcmVIZWlnaHQsIC1CVUxCX1dJRFRIICogMC4zICk7XHJcbiAgY29uc3QgZmlsYW1lbnRCb3R0b21Qb2ludCA9IG5ldyBWZWN0b3IyKCAtZmlsYW1lbnRXaXJlSGVpZ2h0LCBCVUxCX1dJRFRIICogMC4zICk7XHJcbiAgY29uc3QgZmlsYW1lbnRTdXBwb3J0V2lyZXNTaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG4gIGZpbGFtZW50U3VwcG9ydFdpcmVzU2hhcGUubW92ZVRvKCAwLCAtQlVMQl9CQVNFX1dJRFRIICogMC4zICk7XHJcbiAgZmlsYW1lbnRTdXBwb3J0V2lyZXNTaGFwZS5jdWJpY0N1cnZlVG8oIC1maWxhbWVudFdpcmVIZWlnaHQgKiAwLjMsIC1CVUxCX0JBU0VfV0lEVEggKiAwLjMsIC1maWxhbWVudFdpcmVIZWlnaHQgKiAwLjQsIGZpbGFtZW50VG9wUG9pbnQueSwgZmlsYW1lbnRUb3BQb2ludC54LCBmaWxhbWVudFRvcFBvaW50LnkgKTtcclxuICBmaWxhbWVudFN1cHBvcnRXaXJlc1NoYXBlLm1vdmVUbyggMCwgQlVMQl9CQVNFX1dJRFRIICogMC4zICk7XHJcbiAgZmlsYW1lbnRTdXBwb3J0V2lyZXNTaGFwZS5jdWJpY0N1cnZlVG8oIC1maWxhbWVudFdpcmVIZWlnaHQgKiAwLjMsIEJVTEJfQkFTRV9XSURUSCAqIDAuMywgLWZpbGFtZW50V2lyZUhlaWdodCAqIDAuNCwgZmlsYW1lbnRCb3R0b21Qb2ludC55LCBmaWxhbWVudEJvdHRvbVBvaW50LngsIGZpbGFtZW50Qm90dG9tUG9pbnQueSApO1xyXG4gIGNvbnN0IGZpbGFtZW50U3VwcG9ydFdpcmVzID0gbmV3IFBhdGgoIGZpbGFtZW50U3VwcG9ydFdpcmVzU2hhcGUsIHsgc3Ryb2tlOiAnYmxhY2snIH0gKTtcclxuXHJcbiAgLy8gQ3JlYXRlIHRoZSBmaWxhbWVudCwgd2hpY2ggaXMgYSB6aWctemFnIHNoYXBlLlxyXG4gIGNvbnN0IGZpbGFtZW50U2hhcGUgPSBuZXcgU2hhcGUoKS5tb3ZlVG9Qb2ludCggZmlsYW1lbnRCb3R0b21Qb2ludCApLnppZ1phZ1RvUG9pbnQoIGZpbGFtZW50VG9wUG9pbnQsIEZJTEFNRU5UX1pJR19aQUdfU1BBTiwgTlVNX0ZJTEFNRU5UX1pJR19aQUdTLCB0cnVlICk7XHJcbiAgY29uc3QgZmlsYW1lbnQgPSBuZXcgUGF0aCggZmlsYW1lbnRTaGFwZSwgeyBzdHJva2U6ICdibGFjaycgfSApO1xyXG5cclxuICAvLyBDcmVhdGUgdGhlICdoYWxvJyB0aGF0IG1ha2VzIHRoZSBidWxiIGxvb2sgbGlrZSBpdCBpcyBzaGluaW5nLlxyXG4gIC8vIEBwdWJsaWNcclxuICBpY29uTm9kZS5oYWxvTm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgaWNvbk5vZGUuaGFsb05vZGUuYWRkQ2hpbGQoIG5ldyBDaXJjbGUoIDUsIHtcclxuICAgIGZpbGw6ICd3aGl0ZScsXHJcbiAgICBvcGFjaXR5OiAwLjQ2XHJcbiAgfSApICk7XHJcbiAgaWNvbk5vZGUuaGFsb05vZGUuYWRkQ2hpbGQoIG5ldyBDaXJjbGUoIDMuNzUsIHtcclxuICAgIGZpbGw6ICd3aGl0ZScsXHJcbiAgICBvcGFjaXR5OiAwLjUxXHJcbiAgfSApICk7XHJcbiAgaWNvbk5vZGUuaGFsb05vZGUuYWRkQ2hpbGQoIG5ldyBDaXJjbGUoIDIsIHtcclxuICAgIGZpbGw6ICd3aGl0ZSdcclxuICB9ICkgKTtcclxuXHJcbiAgLy8gQWRkIHRoZSBjaGlsZHJlbiBpbiB0aGUgb3JkZXIgbmVlZGVkIHRvIGdldCB0aGUgZGVzaXJlZCBsYXllcmluZ1xyXG4gIGljb25Ob2RlLmFkZENoaWxkKCBidWxiQm9keUZpbGwgKTtcclxuICBpY29uTm9kZS5hZGRDaGlsZCggZmlsYW1lbnRTdXBwb3J0V2lyZXMgKTtcclxuICBpY29uTm9kZS5hZGRDaGlsZCggZmlsYW1lbnQgKTtcclxuICBpY29uTm9kZS5hZGRDaGlsZCggaWNvbk5vZGUuaGFsb05vZGUgKTtcclxuICBpY29uTm9kZS5hZGRDaGlsZCggYnVsYkJhc2UgKTtcclxuICBpY29uTm9kZS5hZGRDaGlsZCggYnVsYkJvZHlPdXRsaW5lICk7XHJcblxyXG4gIC8vIERvIHNvbWUgbGFzdCBsYXlvdXRcclxuICBidWxiQmFzZS5jZW50ZXJZID0gMDtcclxuICBidWxiQmFzZS5sZWZ0ID0gMDtcclxuICBpY29uTm9kZS5oYWxvTm9kZS5jZW50ZXIgPSBmaWxhbWVudC5jZW50ZXI7XHJcbiAgaWNvbk5vZGUuaGFsb05vZGUudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICBpY29uTm9kZS5yb3RhdGUoIE1hdGguUEkgKTtcclxuXHJcbiAgcmV0dXJuIGljb25Ob2RlO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCdWxiTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHNDQUFzQztBQUNqRSxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsaUJBQWlCLE1BQU0sdURBQXVEO0FBQ3JGLFNBQVNDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsY0FBYyxRQUFRLG1DQUFtQztBQUM3RixPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FB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