// Copyright 2016-2021, University of Colorado Boulder

/**
 * BarMeterNode subclass that implements a custom setValue method
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import capacitorLabBasics from '../../../capacitorLabBasics.js';
import CLBConstants from '../../CLBConstants.js';
import BarMeterNode from './BarMeterNode.js';
class PlateChargeBarMeterNode extends BarMeterNode {
  /**
   * @param {BarMeter} meter
   * @param {string} barColor - fill color of the BarMeter
   * @param {number} maxValue - model value at which the bar has max length
   * @param {string} unitsString - string representing units
   * @param {string} titleString - title string for the bar graph
   * @param {Tandem} tandem
   */
  constructor(meter, barColor, maxValue, unitsString, titleString, tandem) {
    super(meter, barColor, maxValue, unitsString, titleString, tandem);
  }

  /**
   * This meter displays absolute value, and changes color to indicate positive or negative charge.
   *
   * @param {number} value
   * @public
   * @override
   */
  setValue(value) {
    super.setValue(Math.abs(value));
    this.setBarColor(value >= 0 ? CLBConstants.POSITIVE_CHARGE_COLOR : CLBConstants.NEGATIVE_CHARGE_COLOR);
  }
}
capacitorLabBasics.register('PlateChargeBarMeterNode', PlateChargeBarMeterNode);
export default PlateChargeBarMeterNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYXBhY2l0b3JMYWJCYXNpY3MiLCJDTEJDb25zdGFudHMiLCJCYXJNZXRlck5vZGUiLCJQbGF0ZUNoYXJnZUJhck1ldGVyTm9kZSIsImNvbnN0cnVjdG9yIiwibWV0ZXIiLCJiYXJDb2xvciIsIm1heFZhbHVlIiwidW5pdHNTdHJpbmciLCJ0aXRsZVN0cmluZyIsInRhbmRlbSIsInNldFZhbHVlIiwidmFsdWUiLCJNYXRoIiwiYWJzIiwic2V0QmFyQ29sb3IiLCJQT1NJVElWRV9DSEFSR0VfQ09MT1IiLCJORUdBVElWRV9DSEFSR0VfQ09MT1IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBsYXRlQ2hhcmdlQmFyTWV0ZXJOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJhck1ldGVyTm9kZSBzdWJjbGFzcyB0aGF0IGltcGxlbWVudHMgYSBjdXN0b20gc2V0VmFsdWUgbWV0aG9kXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZSAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgY2FwYWNpdG9yTGFiQmFzaWNzIGZyb20gJy4uLy4uLy4uL2NhcGFjaXRvckxhYkJhc2ljcy5qcyc7XHJcbmltcG9ydCBDTEJDb25zdGFudHMgZnJvbSAnLi4vLi4vQ0xCQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEJhck1ldGVyTm9kZSBmcm9tICcuL0Jhck1ldGVyTm9kZS5qcyc7XHJcblxyXG5jbGFzcyBQbGF0ZUNoYXJnZUJhck1ldGVyTm9kZSBleHRlbmRzIEJhck1ldGVyTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCYXJNZXRlcn0gbWV0ZXJcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gYmFyQ29sb3IgLSBmaWxsIGNvbG9yIG9mIHRoZSBCYXJNZXRlclxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhWYWx1ZSAtIG1vZGVsIHZhbHVlIGF0IHdoaWNoIHRoZSBiYXIgaGFzIG1heCBsZW5ndGhcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdHNTdHJpbmcgLSBzdHJpbmcgcmVwcmVzZW50aW5nIHVuaXRzXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlU3RyaW5nIC0gdGl0bGUgc3RyaW5nIGZvciB0aGUgYmFyIGdyYXBoXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtZXRlciwgYmFyQ29sb3IsIG1heFZhbHVlLCB1bml0c1N0cmluZywgdGl0bGVTdHJpbmcsIHRhbmRlbSApIHtcclxuICAgIHN1cGVyKCBtZXRlciwgYmFyQ29sb3IsIG1heFZhbHVlLCB1bml0c1N0cmluZywgdGl0bGVTdHJpbmcsIHRhbmRlbSApO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0ZXIgZGlzcGxheXMgYWJzb2x1dGUgdmFsdWUsIGFuZCBjaGFuZ2VzIGNvbG9yIHRvIGluZGljYXRlIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIGNoYXJnZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBzZXRWYWx1ZSggdmFsdWUgKSB7XHJcbiAgICBzdXBlci5zZXRWYWx1ZSggTWF0aC5hYnMoIHZhbHVlICkgKTtcclxuICAgIHRoaXMuc2V0QmFyQ29sb3IoICggdmFsdWUgPj0gMCApID8gQ0xCQ29uc3RhbnRzLlBPU0lUSVZFX0NIQVJHRV9DT0xPUiA6IENMQkNvbnN0YW50cy5ORUdBVElWRV9DSEFSR0VfQ09MT1IgKTtcclxuICB9XHJcbn1cclxuXHJcbmNhcGFjaXRvckxhYkJhc2ljcy5yZWdpc3RlciggJ1BsYXRlQ2hhcmdlQmFyTWV0ZXJOb2RlJywgUGxhdGVDaGFyZ2VCYXJNZXRlck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBsYXRlQ2hhcmdlQmFyTWV0ZXJOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGtCQUFrQixNQUFNLGdDQUFnQztBQUMvRCxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFFNUMsTUFBTUMsdUJBQXVCLFNBQVNELFlBQVksQ0FBQztFQUNqRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxFQUFFQyxNQUFNLEVBQUc7SUFDekUsS0FBSyxDQUFFTCxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxXQUFXLEVBQUVDLFdBQVcsRUFBRUMsTUFBTyxDQUFDO0VBQ3RFOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFFBQVFBLENBQUVDLEtBQUssRUFBRztJQUNoQixLQUFLLENBQUNELFFBQVEsQ0FBRUUsSUFBSSxDQUFDQyxHQUFHLENBQUVGLEtBQU0sQ0FBRSxDQUFDO0lBQ25DLElBQUksQ0FBQ0csV0FBVyxDQUFJSCxLQUFLLElBQUksQ0FBQyxHQUFLWCxZQUFZLENBQUNlLHFCQUFxQixHQUFHZixZQUFZLENBQUNnQixxQkFBc0IsQ0FBQztFQUM5RztBQUNGO0FBRUFqQixrQkFBa0IsQ0FBQ2tCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRWYsdUJBQXdCLENBQUM7QUFFakYsZUFBZUEsdUJBQXVCIn0=