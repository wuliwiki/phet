// Copyright 2015-2021, University of Colorado Boulder

/**
 * Configuration information for a circuit. This is purely a data structure, whose purpose is to reduce the number of
 * parameters required in constructors and creation methods.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import CapacitorConstants from '../../../../scenery-phet/js/capacitor/CapacitorConstants.js';
import YawPitchModelViewTransform3 from '../../../../scenery-phet/js/capacitor/YawPitchModelViewTransform3.js';
import capacitorLabBasics from '../../capacitorLabBasics.js';
import CircuitState from './CircuitState.js';

// Constants with default assignments
const CAPACITOR_X_SPACING = 0.024; // meters
const CAPACITOR_Y_SPACING = 0; // meters
const PLATE_WIDTH = CapacitorConstants.PLATE_WIDTH_RANGE.defaultValue;
const PLATE_SEPARATION = CapacitorConstants.PLATE_SEPARATION_RANGE.defaultValue;
const WIRE_EXTENT = 0.016; // how far the wire extends above or below the capacitor (meters)

const CircuitConfig = {
  /**
   * Returns the default circuit config, overridden with any options.
   * @public
   *
   * @param {Object} [options]
   * @returns {Object}
   */
  create(options) {
    return merge({
      modelViewTransform: new YawPitchModelViewTransform3(),
      capacitorXSpacing: CAPACITOR_X_SPACING,
      capacitorYSpacing: CAPACITOR_Y_SPACING,
      plateWidth: PLATE_WIDTH,
      plateSeparation: PLATE_SEPARATION,
      wireExtent: WIRE_EXTENT,
      lightBulb: null,
      // Type: {Array.<CircuitState>})
      circuitConnections: [CircuitState.BATTERY_CONNECTED, CircuitState.OPEN_CIRCUIT, CircuitState.LIGHT_BULB_CONNECTED]
    }, options);
  }
};
capacitorLabBasics.register('CircuitConfig', CircuitConfig);
export default CircuitConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkNhcGFjaXRvckNvbnN0YW50cyIsIllhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMyIsImNhcGFjaXRvckxhYkJhc2ljcyIsIkNpcmN1aXRTdGF0ZSIsIkNBUEFDSVRPUl9YX1NQQUNJTkciLCJDQVBBQ0lUT1JfWV9TUEFDSU5HIiwiUExBVEVfV0lEVEgiLCJQTEFURV9XSURUSF9SQU5HRSIsImRlZmF1bHRWYWx1ZSIsIlBMQVRFX1NFUEFSQVRJT04iLCJQTEFURV9TRVBBUkFUSU9OX1JBTkdFIiwiV0lSRV9FWFRFTlQiLCJDaXJjdWl0Q29uZmlnIiwiY3JlYXRlIiwib3B0aW9ucyIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImNhcGFjaXRvclhTcGFjaW5nIiwiY2FwYWNpdG9yWVNwYWNpbmciLCJwbGF0ZVdpZHRoIiwicGxhdGVTZXBhcmF0aW9uIiwid2lyZUV4dGVudCIsImxpZ2h0QnVsYiIsImNpcmN1aXRDb25uZWN0aW9ucyIsIkJBVFRFUllfQ09OTkVDVEVEIiwiT1BFTl9DSVJDVUlUIiwiTElHSFRfQlVMQl9DT05ORUNURUQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNpcmN1aXRDb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbiBmb3IgYSBjaXJjdWl0LiBUaGlzIGlzIHB1cmVseSBhIGRhdGEgc3RydWN0dXJlLCB3aG9zZSBwdXJwb3NlIGlzIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mXHJcbiAqIHBhcmFtZXRlcnMgcmVxdWlyZWQgaW4gY29uc3RydWN0b3JzIGFuZCBjcmVhdGlvbiBtZXRob2RzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBBbmRyZXcgQWRhcmUgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBDYXBhY2l0b3JDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2NhcGFjaXRvci9DYXBhY2l0b3JDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgWWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9jYXBhY2l0b3IvWWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zLmpzJztcclxuaW1wb3J0IGNhcGFjaXRvckxhYkJhc2ljcyBmcm9tICcuLi8uLi9jYXBhY2l0b3JMYWJCYXNpY3MuanMnO1xyXG5pbXBvcnQgQ2lyY3VpdFN0YXRlIGZyb20gJy4vQ2lyY3VpdFN0YXRlLmpzJztcclxuXHJcbi8vIENvbnN0YW50cyB3aXRoIGRlZmF1bHQgYXNzaWdubWVudHNcclxuY29uc3QgQ0FQQUNJVE9SX1hfU1BBQ0lORyA9IDAuMDI0OyAvLyBtZXRlcnNcclxuY29uc3QgQ0FQQUNJVE9SX1lfU1BBQ0lORyA9IDA7IC8vIG1ldGVyc1xyXG5jb25zdCBQTEFURV9XSURUSCA9IENhcGFjaXRvckNvbnN0YW50cy5QTEFURV9XSURUSF9SQU5HRS5kZWZhdWx0VmFsdWU7XHJcbmNvbnN0IFBMQVRFX1NFUEFSQVRJT04gPSBDYXBhY2l0b3JDb25zdGFudHMuUExBVEVfU0VQQVJBVElPTl9SQU5HRS5kZWZhdWx0VmFsdWU7XHJcbmNvbnN0IFdJUkVfRVhURU5UID0gMC4wMTY7IC8vIGhvdyBmYXIgdGhlIHdpcmUgZXh0ZW5kcyBhYm92ZSBvciBiZWxvdyB0aGUgY2FwYWNpdG9yIChtZXRlcnMpXHJcblxyXG5jb25zdCBDaXJjdWl0Q29uZmlnID0ge1xyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGNpcmN1aXQgY29uZmlnLCBvdmVycmlkZGVuIHdpdGggYW55IG9wdGlvbnMuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICovXHJcbiAgY3JlYXRlKCBvcHRpb25zICkge1xyXG5cclxuICAgIHJldHVybiBtZXJnZSgge1xyXG4gICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IG5ldyBZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMoKSxcclxuICAgICAgY2FwYWNpdG9yWFNwYWNpbmc6IENBUEFDSVRPUl9YX1NQQUNJTkcsXHJcbiAgICAgIGNhcGFjaXRvcllTcGFjaW5nOiBDQVBBQ0lUT1JfWV9TUEFDSU5HLFxyXG4gICAgICBwbGF0ZVdpZHRoOiBQTEFURV9XSURUSCxcclxuICAgICAgcGxhdGVTZXBhcmF0aW9uOiBQTEFURV9TRVBBUkFUSU9OLFxyXG4gICAgICB3aXJlRXh0ZW50OiBXSVJFX0VYVEVOVCxcclxuICAgICAgbGlnaHRCdWxiOiBudWxsLFxyXG5cclxuICAgICAgLy8gVHlwZToge0FycmF5LjxDaXJjdWl0U3RhdGU+fSlcclxuICAgICAgY2lyY3VpdENvbm5lY3Rpb25zOiBbXHJcbiAgICAgICAgQ2lyY3VpdFN0YXRlLkJBVFRFUllfQ09OTkVDVEVELFxyXG4gICAgICAgIENpcmN1aXRTdGF0ZS5PUEVOX0NJUkNVSVQsXHJcbiAgICAgICAgQ2lyY3VpdFN0YXRlLkxJR0hUX0JVTEJfQ09OTkVDVEVEXHJcbiAgICAgIF1cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgfVxyXG59O1xyXG5cclxuY2FwYWNpdG9yTGFiQmFzaWNzLnJlZ2lzdGVyKCAnQ2lyY3VpdENvbmZpZycsIENpcmN1aXRDb25maWcgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENpcmN1aXRDb25maWc7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0Msa0JBQWtCLE1BQU0sNkRBQTZEO0FBQzVGLE9BQU9DLDJCQUEyQixNQUFNLHNFQUFzRTtBQUM5RyxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjs7QUFFNUM7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNuQyxNQUFNQyxtQkFBbUIsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMvQixNQUFNQyxXQUFXLEdBQUdOLGtCQUFrQixDQUFDTyxpQkFBaUIsQ0FBQ0MsWUFBWTtBQUNyRSxNQUFNQyxnQkFBZ0IsR0FBR1Qsa0JBQWtCLENBQUNVLHNCQUFzQixDQUFDRixZQUFZO0FBQy9FLE1BQU1HLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQzs7QUFFM0IsTUFBTUMsYUFBYSxHQUFHO0VBRXBCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLE1BQU1BLENBQUVDLE9BQU8sRUFBRztJQUVoQixPQUFPZixLQUFLLENBQUU7TUFDWmdCLGtCQUFrQixFQUFFLElBQUlkLDJCQUEyQixDQUFDLENBQUM7TUFDckRlLGlCQUFpQixFQUFFWixtQkFBbUI7TUFDdENhLGlCQUFpQixFQUFFWixtQkFBbUI7TUFDdENhLFVBQVUsRUFBRVosV0FBVztNQUN2QmEsZUFBZSxFQUFFVixnQkFBZ0I7TUFDakNXLFVBQVUsRUFBRVQsV0FBVztNQUN2QlUsU0FBUyxFQUFFLElBQUk7TUFFZjtNQUNBQyxrQkFBa0IsRUFBRSxDQUNsQm5CLFlBQVksQ0FBQ29CLGlCQUFpQixFQUM5QnBCLFlBQVksQ0FBQ3FCLFlBQVksRUFDekJyQixZQUFZLENBQUNzQixvQkFBb0I7SUFFckMsQ0FBQyxFQUFFWCxPQUFRLENBQUM7RUFFZDtBQUNGLENBQUM7QUFFRFosa0JBQWtCLENBQUN3QixRQUFRLENBQUUsZUFBZSxFQUFFZCxhQUFjLENBQUM7QUFFN0QsZUFBZUEsYUFBYSJ9