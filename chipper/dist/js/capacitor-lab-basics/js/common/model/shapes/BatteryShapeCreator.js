// Copyright 2015-2021, University of Colorado Boulder

/**
 * Creates 2D projections of shapes that are related to the 3D battery model. Shapes are in the global view coordinate
 * frame.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

// modules
// TODO: Reverse the shapes so they are in the model?
// TODO: Did you mean invert the shapes?
import Matrix3 from '../../../../../dot/js/Matrix3.js';
import YawPitchModelViewTransform3 from '../../../../../scenery-phet/js/capacitor/YawPitchModelViewTransform3.js';
import capacitorLabBasics from '../../../capacitorLabBasics.js';
import BatteryGraphicNode from '../../view/BatteryGraphicNode.js';
class BatteryShapeCreator {
  /**
   * @param {Battery} battery
   * @param {YawPitchModelViewTransform3} modelViewTransform
   */
  constructor(battery, modelViewTransform) {
    assert && assert(modelViewTransform instanceof YawPitchModelViewTransform3);

    // @public {Battery}
    this.battery = battery;

    // @public {YawPitchModelViewTransform3}
    this.modelViewTransform = modelViewTransform;
  }

  /**
   * Creates the shape of the top positive terminal in the world coordinate frame.
   * @public
   *
   * TODO: Battery position doesn't change? Doesn't require recreation every time?
   *
   * @returns {Shape}
   */
  createPositiveTerminalShape() {
    let shape = BatteryGraphicNode.POSITIVE_UP.terminalShape;
    shape = shape.transformed(Matrix3.scaling(0.3));
    const batteryPosition = this.modelViewTransform.modelToViewPosition(this.battery.position);
    shape = shape.transformed(Matrix3.translation(batteryPosition.x - BatteryGraphicNode.POSITIVE_UP.bounds.centerX * 0.3, batteryPosition.y - BatteryGraphicNode.POSITIVE_UP.bounds.centerY * 0.3));
    return shape;
  }

  /**
   * Creates the shape of the top negative terminal in the world coordinate frame.
   * @public
   *
   * TODO: Battery position doesn't change? Doesn't require recreation every time?
   *
   * @returns {Shape}
   */
  createNegativeTerminalShape() {
    let shape = BatteryGraphicNode.POSITIVE_DOWN.terminalShape;
    shape = shape.transformed(Matrix3.scaling(0.3));
    const batteryPosition = this.modelViewTransform.modelToViewPosition(this.battery.position);
    shape = shape.transformed(Matrix3.translation(batteryPosition.x - BatteryGraphicNode.POSITIVE_DOWN.bounds.centerX * 0.3, batteryPosition.y - BatteryGraphicNode.POSITIVE_DOWN.bounds.centerY * 0.3));
    return shape;
  }
}
capacitorLabBasics.register('BatteryShapeCreator', BatteryShapeCreator);
export default BatteryShapeCreator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiWWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zIiwiY2FwYWNpdG9yTGFiQmFzaWNzIiwiQmF0dGVyeUdyYXBoaWNOb2RlIiwiQmF0dGVyeVNoYXBlQ3JlYXRvciIsImNvbnN0cnVjdG9yIiwiYmF0dGVyeSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImFzc2VydCIsImNyZWF0ZVBvc2l0aXZlVGVybWluYWxTaGFwZSIsInNoYXBlIiwiUE9TSVRJVkVfVVAiLCJ0ZXJtaW5hbFNoYXBlIiwidHJhbnNmb3JtZWQiLCJzY2FsaW5nIiwiYmF0dGVyeVBvc2l0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsInBvc2l0aW9uIiwidHJhbnNsYXRpb24iLCJ4IiwiYm91bmRzIiwiY2VudGVyWCIsInkiLCJjZW50ZXJZIiwiY3JlYXRlTmVnYXRpdmVUZXJtaW5hbFNoYXBlIiwiUE9TSVRJVkVfRE9XTiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmF0dGVyeVNoYXBlQ3JlYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIDJEIHByb2plY3Rpb25zIG9mIHNoYXBlcyB0aGF0IGFyZSByZWxhdGVkIHRvIHRoZSAzRCBiYXR0ZXJ5IG1vZGVsLiBTaGFwZXMgYXJlIGluIHRoZSBnbG9iYWwgdmlldyBjb29yZGluYXRlXHJcbiAqIGZyYW1lLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBBbmRyZXcgQWRhcmUgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuXHJcbi8vIG1vZHVsZXNcclxuLy8gVE9ETzogUmV2ZXJzZSB0aGUgc2hhcGVzIHNvIHRoZXkgYXJlIGluIHRoZSBtb2RlbD9cclxuLy8gVE9ETzogRGlkIHlvdSBtZWFuIGludmVydCB0aGUgc2hhcGVzP1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvTWF0cml4My5qcyc7XHJcbmltcG9ydCBZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2NhcGFjaXRvci9ZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMuanMnO1xyXG5pbXBvcnQgY2FwYWNpdG9yTGFiQmFzaWNzIGZyb20gJy4uLy4uLy4uL2NhcGFjaXRvckxhYkJhc2ljcy5qcyc7XHJcbmltcG9ydCBCYXR0ZXJ5R3JhcGhpY05vZGUgZnJvbSAnLi4vLi4vdmlldy9CYXR0ZXJ5R3JhcGhpY05vZGUuanMnO1xyXG5cclxuY2xhc3MgQmF0dGVyeVNoYXBlQ3JlYXRvciB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCYXR0ZXJ5fSBiYXR0ZXJ5XHJcbiAgICogQHBhcmFtIHtZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTN9IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBiYXR0ZXJ5LCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBtb2RlbFZpZXdUcmFuc2Zvcm0gaW5zdGFuY2VvZiBZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtCYXR0ZXJ5fVxyXG4gICAgdGhpcy5iYXR0ZXJ5ID0gYmF0dGVyeTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTN9XHJcbiAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSA9IG1vZGVsVmlld1RyYW5zZm9ybTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBzaGFwZSBvZiB0aGUgdG9wIHBvc2l0aXZlIHRlcm1pbmFsIGluIHRoZSB3b3JsZCBjb29yZGluYXRlIGZyYW1lLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIFRPRE86IEJhdHRlcnkgcG9zaXRpb24gZG9lc24ndCBjaGFuZ2U/IERvZXNuJ3QgcmVxdWlyZSByZWNyZWF0aW9uIGV2ZXJ5IHRpbWU/XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7U2hhcGV9XHJcbiAgICovXHJcbiAgY3JlYXRlUG9zaXRpdmVUZXJtaW5hbFNoYXBlKCkge1xyXG4gICAgbGV0IHNoYXBlID0gQmF0dGVyeUdyYXBoaWNOb2RlLlBPU0lUSVZFX1VQLnRlcm1pbmFsU2hhcGU7XHJcbiAgICBzaGFwZSA9IHNoYXBlLnRyYW5zZm9ybWVkKCBNYXRyaXgzLnNjYWxpbmcoIDAuMyApICk7XHJcbiAgICBjb25zdCBiYXR0ZXJ5UG9zaXRpb24gPSB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCB0aGlzLmJhdHRlcnkucG9zaXRpb24gKTtcclxuICAgIHNoYXBlID0gc2hhcGUudHJhbnNmb3JtZWQoIE1hdHJpeDMudHJhbnNsYXRpb24oIGJhdHRlcnlQb3NpdGlvbi54IC0gQmF0dGVyeUdyYXBoaWNOb2RlLlBPU0lUSVZFX1VQLmJvdW5kcy5jZW50ZXJYICogMC4zLFxyXG4gICAgICBiYXR0ZXJ5UG9zaXRpb24ueSAtIEJhdHRlcnlHcmFwaGljTm9kZS5QT1NJVElWRV9VUC5ib3VuZHMuY2VudGVyWSAqIDAuMyApICk7XHJcbiAgICByZXR1cm4gc2hhcGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBzaGFwZSBvZiB0aGUgdG9wIG5lZ2F0aXZlIHRlcm1pbmFsIGluIHRoZSB3b3JsZCBjb29yZGluYXRlIGZyYW1lLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIFRPRE86IEJhdHRlcnkgcG9zaXRpb24gZG9lc24ndCBjaGFuZ2U/IERvZXNuJ3QgcmVxdWlyZSByZWNyZWF0aW9uIGV2ZXJ5IHRpbWU/XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7U2hhcGV9XHJcbiAgICovXHJcbiAgY3JlYXRlTmVnYXRpdmVUZXJtaW5hbFNoYXBlKCkge1xyXG4gICAgbGV0IHNoYXBlID0gQmF0dGVyeUdyYXBoaWNOb2RlLlBPU0lUSVZFX0RPV04udGVybWluYWxTaGFwZTtcclxuICAgIHNoYXBlID0gc2hhcGUudHJhbnNmb3JtZWQoIE1hdHJpeDMuc2NhbGluZyggMC4zICkgKTtcclxuICAgIGNvbnN0IGJhdHRlcnlQb3NpdGlvbiA9IHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIHRoaXMuYmF0dGVyeS5wb3NpdGlvbiApO1xyXG4gICAgc2hhcGUgPSBzaGFwZS50cmFuc2Zvcm1lZCggTWF0cml4My50cmFuc2xhdGlvbiggYmF0dGVyeVBvc2l0aW9uLnggLSBCYXR0ZXJ5R3JhcGhpY05vZGUuUE9TSVRJVkVfRE9XTi5ib3VuZHMuY2VudGVyWCAqIDAuMyxcclxuICAgICAgYmF0dGVyeVBvc2l0aW9uLnkgLSBCYXR0ZXJ5R3JhcGhpY05vZGUuUE9TSVRJVkVfRE9XTi5ib3VuZHMuY2VudGVyWSAqIDAuMyApICk7XHJcbiAgICByZXR1cm4gc2hhcGU7XHJcbiAgfVxyXG59XHJcblxyXG5jYXBhY2l0b3JMYWJCYXNpY3MucmVnaXN0ZXIoICdCYXR0ZXJ5U2hhcGVDcmVhdG9yJywgQmF0dGVyeVNoYXBlQ3JlYXRvciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmF0dGVyeVNoYXBlQ3JlYXRvcjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBLE9BQU9BLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsT0FBT0MsMkJBQTJCLE1BQU0seUVBQXlFO0FBQ2pILE9BQU9DLGtCQUFrQixNQUFNLGdDQUFnQztBQUMvRCxPQUFPQyxrQkFBa0IsTUFBTSxrQ0FBa0M7QUFFakUsTUFBTUMsbUJBQW1CLENBQUM7RUFDeEI7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsT0FBTyxFQUFFQyxrQkFBa0IsRUFBRztJQUN6Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVELGtCQUFrQixZQUFZTiwyQkFBNEIsQ0FBQzs7SUFFN0U7SUFDQSxJQUFJLENBQUNLLE9BQU8sR0FBR0EsT0FBTzs7SUFFdEI7SUFDQSxJQUFJLENBQUNDLGtCQUFrQixHQUFHQSxrQkFBa0I7RUFDOUM7O0VBR0E7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSwyQkFBMkJBLENBQUEsRUFBRztJQUM1QixJQUFJQyxLQUFLLEdBQUdQLGtCQUFrQixDQUFDUSxXQUFXLENBQUNDLGFBQWE7SUFDeERGLEtBQUssR0FBR0EsS0FBSyxDQUFDRyxXQUFXLENBQUViLE9BQU8sQ0FBQ2MsT0FBTyxDQUFFLEdBQUksQ0FBRSxDQUFDO0lBQ25ELE1BQU1DLGVBQWUsR0FBRyxJQUFJLENBQUNSLGtCQUFrQixDQUFDUyxtQkFBbUIsQ0FBRSxJQUFJLENBQUNWLE9BQU8sQ0FBQ1csUUFBUyxDQUFDO0lBQzVGUCxLQUFLLEdBQUdBLEtBQUssQ0FBQ0csV0FBVyxDQUFFYixPQUFPLENBQUNrQixXQUFXLENBQUVILGVBQWUsQ0FBQ0ksQ0FBQyxHQUFHaEIsa0JBQWtCLENBQUNRLFdBQVcsQ0FBQ1MsTUFBTSxDQUFDQyxPQUFPLEdBQUcsR0FBRyxFQUNySE4sZUFBZSxDQUFDTyxDQUFDLEdBQUduQixrQkFBa0IsQ0FBQ1EsV0FBVyxDQUFDUyxNQUFNLENBQUNHLE9BQU8sR0FBRyxHQUFJLENBQUUsQ0FBQztJQUM3RSxPQUFPYixLQUFLO0VBQ2Q7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFYywyQkFBMkJBLENBQUEsRUFBRztJQUM1QixJQUFJZCxLQUFLLEdBQUdQLGtCQUFrQixDQUFDc0IsYUFBYSxDQUFDYixhQUFhO0lBQzFERixLQUFLLEdBQUdBLEtBQUssQ0FBQ0csV0FBVyxDQUFFYixPQUFPLENBQUNjLE9BQU8sQ0FBRSxHQUFJLENBQUUsQ0FBQztJQUNuRCxNQUFNQyxlQUFlLEdBQUcsSUFBSSxDQUFDUixrQkFBa0IsQ0FBQ1MsbUJBQW1CLENBQUUsSUFBSSxDQUFDVixPQUFPLENBQUNXLFFBQVMsQ0FBQztJQUM1RlAsS0FBSyxHQUFHQSxLQUFLLENBQUNHLFdBQVcsQ0FBRWIsT0FBTyxDQUFDa0IsV0FBVyxDQUFFSCxlQUFlLENBQUNJLENBQUMsR0FBR2hCLGtCQUFrQixDQUFDc0IsYUFBYSxDQUFDTCxNQUFNLENBQUNDLE9BQU8sR0FBRyxHQUFHLEVBQ3ZITixlQUFlLENBQUNPLENBQUMsR0FBR25CLGtCQUFrQixDQUFDc0IsYUFBYSxDQUFDTCxNQUFNLENBQUNHLE9BQU8sR0FBRyxHQUFJLENBQUUsQ0FBQztJQUMvRSxPQUFPYixLQUFLO0VBQ2Q7QUFDRjtBQUVBUixrQkFBa0IsQ0FBQ3dCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRXRCLG1CQUFvQixDQUFDO0FBRXpFLGVBQWVBLG1CQUFtQiJ9