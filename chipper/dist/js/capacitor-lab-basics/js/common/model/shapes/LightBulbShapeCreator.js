// Copyright 2016-2022, University of Colorado Boulder

/**
 * Creates 2D projections of shapes that are related to the light bulb.
 * Shapes are in the global view coordinate frame.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import { Shape } from '../../../../../kite/js/imports.js';
import YawPitchModelViewTransform3 from '../../../../../scenery-phet/js/capacitor/YawPitchModelViewTransform3.js';
import capacitorLabBasics from '../../../capacitorLabBasics.js';
class LightBulbShapeCreator {
  /**
   * @param {LightBulb} lightBulb
   * @param {CLModelViewTransform3D} modelViewTransform
   */
  constructor(lightBulb, modelViewTransform) {
    assert && assert(modelViewTransform instanceof YawPitchModelViewTransform3);

    // @public {LightBulb} lightBulb
    this.lightBulb = lightBulb;

    // @private {YawPitchModelViewTransform3}
    this.modelViewTransform = modelViewTransform;
  }

  /**
   * Gets the shape of the light bulb base in the world coordinate frame.  Origin at the top center.
   * The base shape is composed of a rectangle, half circle, and custom shape to mimic the image representing
   * the base.
   * @public
   *
   * @returns {Shape}
   */
  createTopBaseShape() {
    const position = this.lightBulb.position;
    const shape = new Shape().rect(position.x - 0.0013, position.y - 0.00175, 0.00225, 0.0035);
    return this.modelViewTransform.modelToViewShape(shape);
  }

  /**
   * Gets the shape of the light bulb base in the world coordinate frame.  Origin at the top center.
   * The base shape is composed of a rectangle, half circle, and custom shape to mimic the image representing
   * the base.
   * @public
   *
   * @returns {Shape}
   */
  createBottomBaseShape() {
    const position = this.lightBulb.position;
    const smallLeft = position.x - 0.00343;
    const smallRight = smallLeft + 0.00063;
    const smallTop = position.y - 0.00113;
    const smallBottom = smallTop + 0.00228;
    const shape = new Shape().moveTo(smallLeft, (smallTop + smallBottom) / 2).cubicCurveTo(smallLeft, smallTop * 0.8 + smallBottom * 0.2, smallLeft * 0.6 + smallRight * 0.4, smallTop * 0.85 + smallBottom * 0.15, smallRight, smallTop).lineTo(smallRight, smallBottom).cubicCurveTo(smallLeft * 0.6 + smallRight * 0.4, smallBottom * 0.85 + smallTop * 0.15, smallLeft, smallBottom * 0.8 + smallTop * 0.2, smallLeft, (smallTop + smallBottom) / 2).close();
    return this.modelViewTransform.modelToViewShape(shape);
  }
}
capacitorLabBasics.register('LightBulbShapeCreator', LightBulbShapeCreator);
export default LightBulbShapeCreator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIllhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMyIsImNhcGFjaXRvckxhYkJhc2ljcyIsIkxpZ2h0QnVsYlNoYXBlQ3JlYXRvciIsImNvbnN0cnVjdG9yIiwibGlnaHRCdWxiIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiYXNzZXJ0IiwiY3JlYXRlVG9wQmFzZVNoYXBlIiwicG9zaXRpb24iLCJzaGFwZSIsInJlY3QiLCJ4IiwieSIsIm1vZGVsVG9WaWV3U2hhcGUiLCJjcmVhdGVCb3R0b21CYXNlU2hhcGUiLCJzbWFsbExlZnQiLCJzbWFsbFJpZ2h0Iiwic21hbGxUb3AiLCJzbWFsbEJvdHRvbSIsIm1vdmVUbyIsImN1YmljQ3VydmVUbyIsImxpbmVUbyIsImNsb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMaWdodEJ1bGJTaGFwZUNyZWF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyAyRCBwcm9qZWN0aW9ucyBvZiBzaGFwZXMgdGhhdCBhcmUgcmVsYXRlZCB0byB0aGUgbGlnaHQgYnVsYi5cclxuICogU2hhcGVzIGFyZSBpbiB0aGUgZ2xvYmFsIHZpZXcgY29vcmRpbmF0ZSBmcmFtZS5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFlhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMyBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvY2FwYWNpdG9yL1lhd1BpdGNoTW9kZWxWaWV3VHJhbnNmb3JtMy5qcyc7XHJcbmltcG9ydCBjYXBhY2l0b3JMYWJCYXNpY3MgZnJvbSAnLi4vLi4vLi4vY2FwYWNpdG9yTGFiQmFzaWNzLmpzJztcclxuXHJcbmNsYXNzIExpZ2h0QnVsYlNoYXBlQ3JlYXRvciB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtMaWdodEJ1bGJ9IGxpZ2h0QnVsYlxyXG4gICAqIEBwYXJhbSB7Q0xNb2RlbFZpZXdUcmFuc2Zvcm0zRH0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGxpZ2h0QnVsYiwgbW9kZWxWaWV3VHJhbnNmb3JtICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbW9kZWxWaWV3VHJhbnNmb3JtIGluc3RhbmNlb2YgWWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7TGlnaHRCdWxifSBsaWdodEJ1bGJcclxuICAgIHRoaXMubGlnaHRCdWxiID0gbGlnaHRCdWxiO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTN9XHJcbiAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSA9IG1vZGVsVmlld1RyYW5zZm9ybTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIHNoYXBlIG9mIHRoZSBsaWdodCBidWxiIGJhc2UgaW4gdGhlIHdvcmxkIGNvb3JkaW5hdGUgZnJhbWUuICBPcmlnaW4gYXQgdGhlIHRvcCBjZW50ZXIuXHJcbiAgICogVGhlIGJhc2Ugc2hhcGUgaXMgY29tcG9zZWQgb2YgYSByZWN0YW5nbGUsIGhhbGYgY2lyY2xlLCBhbmQgY3VzdG9tIHNoYXBlIHRvIG1pbWljIHRoZSBpbWFnZSByZXByZXNlbnRpbmdcclxuICAgKiB0aGUgYmFzZS5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7U2hhcGV9XHJcbiAgICovXHJcbiAgY3JlYXRlVG9wQmFzZVNoYXBlKCkge1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmxpZ2h0QnVsYi5wb3NpdGlvbjtcclxuICAgIGNvbnN0IHNoYXBlID0gbmV3IFNoYXBlKCkucmVjdCggcG9zaXRpb24ueCAtIDAuMDAxMywgcG9zaXRpb24ueSAtIDAuMDAxNzUsIDAuMDAyMjUsIDAuMDAzNSApO1xyXG4gICAgcmV0dXJuIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3U2hhcGUoIHNoYXBlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBzaGFwZSBvZiB0aGUgbGlnaHQgYnVsYiBiYXNlIGluIHRoZSB3b3JsZCBjb29yZGluYXRlIGZyYW1lLiAgT3JpZ2luIGF0IHRoZSB0b3AgY2VudGVyLlxyXG4gICAqIFRoZSBiYXNlIHNoYXBlIGlzIGNvbXBvc2VkIG9mIGEgcmVjdGFuZ2xlLCBoYWxmIGNpcmNsZSwgYW5kIGN1c3RvbSBzaGFwZSB0byBtaW1pYyB0aGUgaW1hZ2UgcmVwcmVzZW50aW5nXHJcbiAgICogdGhlIGJhc2UuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge1NoYXBlfVxyXG4gICAqL1xyXG4gIGNyZWF0ZUJvdHRvbUJhc2VTaGFwZSgpIHtcclxuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5saWdodEJ1bGIucG9zaXRpb247XHJcbiAgICBjb25zdCBzbWFsbExlZnQgPSBwb3NpdGlvbi54IC0gMC4wMDM0MztcclxuICAgIGNvbnN0IHNtYWxsUmlnaHQgPSBzbWFsbExlZnQgKyAwLjAwMDYzO1xyXG4gICAgY29uc3Qgc21hbGxUb3AgPSBwb3NpdGlvbi55IC0gMC4wMDExMztcclxuICAgIGNvbnN0IHNtYWxsQm90dG9tID0gc21hbGxUb3AgKyAwLjAwMjI4O1xyXG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGUoKS5tb3ZlVG8oIHNtYWxsTGVmdCwgKCBzbWFsbFRvcCArIHNtYWxsQm90dG9tICkgLyAyIClcclxuICAgICAgLmN1YmljQ3VydmVUbyggc21hbGxMZWZ0LCBzbWFsbFRvcCAqIDAuOCArIHNtYWxsQm90dG9tICogMC4yLFxyXG4gICAgICAgIHNtYWxsTGVmdCAqIDAuNiArIHNtYWxsUmlnaHQgKiAwLjQsIHNtYWxsVG9wICogMC44NSArIHNtYWxsQm90dG9tICogMC4xNSxcclxuICAgICAgICBzbWFsbFJpZ2h0LCBzbWFsbFRvcCApXHJcbiAgICAgIC5saW5lVG8oIHNtYWxsUmlnaHQsIHNtYWxsQm90dG9tIClcclxuICAgICAgLmN1YmljQ3VydmVUbyggc21hbGxMZWZ0ICogMC42ICsgc21hbGxSaWdodCAqIDAuNCwgc21hbGxCb3R0b20gKiAwLjg1ICsgc21hbGxUb3AgKiAwLjE1LFxyXG4gICAgICAgIHNtYWxsTGVmdCwgc21hbGxCb3R0b20gKiAwLjggKyBzbWFsbFRvcCAqIDAuMixcclxuICAgICAgICBzbWFsbExlZnQsICggc21hbGxUb3AgKyBzbWFsbEJvdHRvbSApIC8gMiApXHJcbiAgICAgIC5jbG9zZSgpO1xyXG4gICAgcmV0dXJuIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3U2hhcGUoIHNoYXBlICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYXBhY2l0b3JMYWJCYXNpY3MucmVnaXN0ZXIoICdMaWdodEJ1bGJTaGFwZUNyZWF0b3InLCBMaWdodEJ1bGJTaGFwZUNyZWF0b3IgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExpZ2h0QnVsYlNoYXBlQ3JlYXRvcjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsbUNBQW1DO0FBQ3pELE9BQU9DLDJCQUEyQixNQUFNLHlFQUF5RTtBQUNqSCxPQUFPQyxrQkFBa0IsTUFBTSxnQ0FBZ0M7QUFFL0QsTUFBTUMscUJBQXFCLENBQUM7RUFDMUI7QUFDRjtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsU0FBUyxFQUFFQyxrQkFBa0IsRUFBRztJQUMzQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVELGtCQUFrQixZQUFZTCwyQkFBNEIsQ0FBQzs7SUFFN0U7SUFDQSxJQUFJLENBQUNJLFNBQVMsR0FBR0EsU0FBUzs7SUFFMUI7SUFDQSxJQUFJLENBQUNDLGtCQUFrQixHQUFHQSxrQkFBa0I7RUFDOUM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxrQkFBa0JBLENBQUEsRUFBRztJQUNuQixNQUFNQyxRQUFRLEdBQUcsSUFBSSxDQUFDSixTQUFTLENBQUNJLFFBQVE7SUFDeEMsTUFBTUMsS0FBSyxHQUFHLElBQUlWLEtBQUssQ0FBQyxDQUFDLENBQUNXLElBQUksQ0FBRUYsUUFBUSxDQUFDRyxDQUFDLEdBQUcsTUFBTSxFQUFFSCxRQUFRLENBQUNJLENBQUMsR0FBRyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU8sQ0FBQztJQUM1RixPQUFPLElBQUksQ0FBQ1Asa0JBQWtCLENBQUNRLGdCQUFnQixDQUFFSixLQUFNLENBQUM7RUFDMUQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSyxxQkFBcUJBLENBQUEsRUFBRztJQUN0QixNQUFNTixRQUFRLEdBQUcsSUFBSSxDQUFDSixTQUFTLENBQUNJLFFBQVE7SUFDeEMsTUFBTU8sU0FBUyxHQUFHUCxRQUFRLENBQUNHLENBQUMsR0FBRyxPQUFPO0lBQ3RDLE1BQU1LLFVBQVUsR0FBR0QsU0FBUyxHQUFHLE9BQU87SUFDdEMsTUFBTUUsUUFBUSxHQUFHVCxRQUFRLENBQUNJLENBQUMsR0FBRyxPQUFPO0lBQ3JDLE1BQU1NLFdBQVcsR0FBR0QsUUFBUSxHQUFHLE9BQU87SUFDdEMsTUFBTVIsS0FBSyxHQUFHLElBQUlWLEtBQUssQ0FBQyxDQUFDLENBQUNvQixNQUFNLENBQUVKLFNBQVMsRUFBRSxDQUFFRSxRQUFRLEdBQUdDLFdBQVcsSUFBSyxDQUFFLENBQUMsQ0FDMUVFLFlBQVksQ0FBRUwsU0FBUyxFQUFFRSxRQUFRLEdBQUcsR0FBRyxHQUFHQyxXQUFXLEdBQUcsR0FBRyxFQUMxREgsU0FBUyxHQUFHLEdBQUcsR0FBR0MsVUFBVSxHQUFHLEdBQUcsRUFBRUMsUUFBUSxHQUFHLElBQUksR0FBR0MsV0FBVyxHQUFHLElBQUksRUFDeEVGLFVBQVUsRUFBRUMsUUFBUyxDQUFDLENBQ3ZCSSxNQUFNLENBQUVMLFVBQVUsRUFBRUUsV0FBWSxDQUFDLENBQ2pDRSxZQUFZLENBQUVMLFNBQVMsR0FBRyxHQUFHLEdBQUdDLFVBQVUsR0FBRyxHQUFHLEVBQUVFLFdBQVcsR0FBRyxJQUFJLEdBQUdELFFBQVEsR0FBRyxJQUFJLEVBQ3JGRixTQUFTLEVBQUVHLFdBQVcsR0FBRyxHQUFHLEdBQUdELFFBQVEsR0FBRyxHQUFHLEVBQzdDRixTQUFTLEVBQUUsQ0FBRUUsUUFBUSxHQUFHQyxXQUFXLElBQUssQ0FBRSxDQUFDLENBQzVDSSxLQUFLLENBQUMsQ0FBQztJQUNWLE9BQU8sSUFBSSxDQUFDakIsa0JBQWtCLENBQUNRLGdCQUFnQixDQUFFSixLQUFNLENBQUM7RUFDMUQ7QUFDRjtBQUVBUixrQkFBa0IsQ0FBQ3NCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRXJCLHFCQUFzQixDQUFDO0FBRTdFLGVBQWVBLHFCQUFxQiJ9