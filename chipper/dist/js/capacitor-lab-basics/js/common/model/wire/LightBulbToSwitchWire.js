// Copyright 2015-2022, University of Colorado Boulder

/**
 * Creates a wire that connects a light bulb to a circuit switch.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Vector3 from '../../../../../dot/js/Vector3.js';
import required from '../../../../../phet-core/js/required.js';
import capacitorLabBasics from '../../../capacitorLabBasics.js';
import CircuitPosition from '../CircuitPosition.js';
import CircuitState from '../CircuitState.js';
import Wire from './Wire.js';
import WireSegment from './WireSegment.js';
class LightBulbToSwitchWire extends Wire {
  /**
   * @param {CircuitPosition} connectionPoint
   * @param {CircuitConfig} config
   * @param {CircuitSwitch} circuitSwitch
   */
  constructor(connectionPoint, config, circuitSwitch) {
    required(config.lightBulb);
    const segments = [];

    // Get y coordinate of the horizontal wire
    const horizontalY = circuitSwitch.getConnectionPoint(CircuitState.BATTERY_CONNECTED).y;

    // Get x coordinate of the connection point
    const isTop = connectionPoint === CircuitPosition.LIGHT_BULB_TOP;
    const connectionPointX = isTop ? config.lightBulb.getTopConnectionPoint().x : config.lightBulb.getBottomConnectionPoint().x;

    // This is the (x,y) position of the upper right corner
    const rightCorner = new Vector3(connectionPointX, horizontalY, 0);

    // add the vertical segment.
    let verticalSegment;
    if (isTop) {
      verticalSegment = WireSegment.createComponentTopWireSegment(config.lightBulb, rightCorner);
    } else {
      verticalSegment = WireSegment.createComponentBottomWireSegment(config.lightBulb, rightCorner);
    }
    segments.push(verticalSegment);

    // connect light bulb to switch connection point.
    const switchConnectionPoint = circuitSwitch.getConnectionPoint(CircuitState.LIGHT_BULB_CONNECTED);
    const separationOffset = new Vector3(0.0006, 0, 0);
    const wireSegment = new WireSegment(rightCorner, switchConnectionPoint.plus(separationOffset));
    segments.push(wireSegment);
    super(config.modelViewTransform, segments, connectionPoint);
  }

  /**
   * Factory methods for top LightBulbToSwitchWire instance
   * @public
   *
   * @param {CircuitConfig} config
   * @param {CircuitSwitch} circuitSwitch
   * @returns {LightBulbToSwitchWire}
   */
  static createLightBulbToSwitchWireBottom(config, circuitSwitch) {
    return new LightBulbToSwitchWire(CircuitPosition.LIGHT_BULB_BOTTOM, config, circuitSwitch);
  }

  /**
   * Factory methods for bottom LightBulbToSwitchWire instance
   * @public
   *
   * @param {CircuitConfig} config
   * @param {CircuitSwitch} circuitSwitch
   * @returns {LightBulbToSwitchWire}
   */
  static createLightBulbToSwitchWireTop(config, circuitSwitch) {
    return new LightBulbToSwitchWire(CircuitPosition.LIGHT_BULB_TOP, config, circuitSwitch);
  }
}
capacitorLabBasics.register('LightBulbToSwitchWire', LightBulbToSwitchWire);
export default LightBulbToSwitchWire;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IzIiwicmVxdWlyZWQiLCJjYXBhY2l0b3JMYWJCYXNpY3MiLCJDaXJjdWl0UG9zaXRpb24iLCJDaXJjdWl0U3RhdGUiLCJXaXJlIiwiV2lyZVNlZ21lbnQiLCJMaWdodEJ1bGJUb1N3aXRjaFdpcmUiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb25Qb2ludCIsImNvbmZpZyIsImNpcmN1aXRTd2l0Y2giLCJsaWdodEJ1bGIiLCJzZWdtZW50cyIsImhvcml6b250YWxZIiwiZ2V0Q29ubmVjdGlvblBvaW50IiwiQkFUVEVSWV9DT05ORUNURUQiLCJ5IiwiaXNUb3AiLCJMSUdIVF9CVUxCX1RPUCIsImNvbm5lY3Rpb25Qb2ludFgiLCJnZXRUb3BDb25uZWN0aW9uUG9pbnQiLCJ4IiwiZ2V0Qm90dG9tQ29ubmVjdGlvblBvaW50IiwicmlnaHRDb3JuZXIiLCJ2ZXJ0aWNhbFNlZ21lbnQiLCJjcmVhdGVDb21wb25lbnRUb3BXaXJlU2VnbWVudCIsImNyZWF0ZUNvbXBvbmVudEJvdHRvbVdpcmVTZWdtZW50IiwicHVzaCIsInN3aXRjaENvbm5lY3Rpb25Qb2ludCIsIkxJR0hUX0JVTEJfQ09OTkVDVEVEIiwic2VwYXJhdGlvbk9mZnNldCIsIndpcmVTZWdtZW50IiwicGx1cyIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImNyZWF0ZUxpZ2h0QnVsYlRvU3dpdGNoV2lyZUJvdHRvbSIsIkxJR0hUX0JVTEJfQk9UVE9NIiwiY3JlYXRlTGlnaHRCdWxiVG9Td2l0Y2hXaXJlVG9wIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMaWdodEJ1bGJUb1N3aXRjaFdpcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHdpcmUgdGhhdCBjb25uZWN0cyBhIGxpZ2h0IGJ1bGIgdG8gYSBjaXJjdWl0IHN3aXRjaC5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgcmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3JlcXVpcmVkLmpzJztcclxuaW1wb3J0IGNhcGFjaXRvckxhYkJhc2ljcyBmcm9tICcuLi8uLi8uLi9jYXBhY2l0b3JMYWJCYXNpY3MuanMnO1xyXG5pbXBvcnQgQ2lyY3VpdFBvc2l0aW9uIGZyb20gJy4uL0NpcmN1aXRQb3NpdGlvbi5qcyc7XHJcbmltcG9ydCBDaXJjdWl0U3RhdGUgZnJvbSAnLi4vQ2lyY3VpdFN0YXRlLmpzJztcclxuaW1wb3J0IFdpcmUgZnJvbSAnLi9XaXJlLmpzJztcclxuaW1wb3J0IFdpcmVTZWdtZW50IGZyb20gJy4vV2lyZVNlZ21lbnQuanMnO1xyXG5cclxuY2xhc3MgTGlnaHRCdWxiVG9Td2l0Y2hXaXJlIGV4dGVuZHMgV2lyZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDaXJjdWl0UG9zaXRpb259IGNvbm5lY3Rpb25Qb2ludFxyXG4gICAqIEBwYXJhbSB7Q2lyY3VpdENvbmZpZ30gY29uZmlnXHJcbiAgICogQHBhcmFtIHtDaXJjdWl0U3dpdGNofSBjaXJjdWl0U3dpdGNoXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvbm5lY3Rpb25Qb2ludCwgY29uZmlnLCBjaXJjdWl0U3dpdGNoICkge1xyXG4gICAgcmVxdWlyZWQoIGNvbmZpZy5saWdodEJ1bGIgKTtcclxuICAgIGNvbnN0IHNlZ21lbnRzID0gW107XHJcblxyXG4gICAgLy8gR2V0IHkgY29vcmRpbmF0ZSBvZiB0aGUgaG9yaXpvbnRhbCB3aXJlXHJcbiAgICBjb25zdCBob3Jpem9udGFsWSA9IGNpcmN1aXRTd2l0Y2guZ2V0Q29ubmVjdGlvblBvaW50KCBDaXJjdWl0U3RhdGUuQkFUVEVSWV9DT05ORUNURUQgKS55O1xyXG5cclxuICAgIC8vIEdldCB4IGNvb3JkaW5hdGUgb2YgdGhlIGNvbm5lY3Rpb24gcG9pbnRcclxuICAgIGNvbnN0IGlzVG9wID0gY29ubmVjdGlvblBvaW50ID09PSBDaXJjdWl0UG9zaXRpb24uTElHSFRfQlVMQl9UT1A7XHJcbiAgICBjb25zdCBjb25uZWN0aW9uUG9pbnRYID0gaXNUb3AgPyBjb25maWcubGlnaHRCdWxiLmdldFRvcENvbm5lY3Rpb25Qb2ludCgpLnggOiBjb25maWcubGlnaHRCdWxiLmdldEJvdHRvbUNvbm5lY3Rpb25Qb2ludCgpLng7XHJcblxyXG4gICAgLy8gVGhpcyBpcyB0aGUgKHgseSkgcG9zaXRpb24gb2YgdGhlIHVwcGVyIHJpZ2h0IGNvcm5lclxyXG4gICAgY29uc3QgcmlnaHRDb3JuZXIgPSBuZXcgVmVjdG9yMyggY29ubmVjdGlvblBvaW50WCwgaG9yaXpvbnRhbFksIDAgKTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIHZlcnRpY2FsIHNlZ21lbnQuXHJcbiAgICBsZXQgdmVydGljYWxTZWdtZW50O1xyXG4gICAgaWYgKCBpc1RvcCApIHtcclxuICAgICAgdmVydGljYWxTZWdtZW50ID0gV2lyZVNlZ21lbnQuY3JlYXRlQ29tcG9uZW50VG9wV2lyZVNlZ21lbnQoXHJcbiAgICAgICAgY29uZmlnLmxpZ2h0QnVsYixcclxuICAgICAgICByaWdodENvcm5lclxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZlcnRpY2FsU2VnbWVudCA9IFdpcmVTZWdtZW50LmNyZWF0ZUNvbXBvbmVudEJvdHRvbVdpcmVTZWdtZW50KFxyXG4gICAgICAgIGNvbmZpZy5saWdodEJ1bGIsXHJcbiAgICAgICAgcmlnaHRDb3JuZXJcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHNlZ21lbnRzLnB1c2goIHZlcnRpY2FsU2VnbWVudCApO1xyXG5cclxuICAgIC8vIGNvbm5lY3QgbGlnaHQgYnVsYiB0byBzd2l0Y2ggY29ubmVjdGlvbiBwb2ludC5cclxuICAgIGNvbnN0IHN3aXRjaENvbm5lY3Rpb25Qb2ludCA9IGNpcmN1aXRTd2l0Y2guZ2V0Q29ubmVjdGlvblBvaW50KCBDaXJjdWl0U3RhdGUuTElHSFRfQlVMQl9DT05ORUNURUQgKTtcclxuXHJcbiAgICBjb25zdCBzZXBhcmF0aW9uT2Zmc2V0ID0gbmV3IFZlY3RvcjMoIDAuMDAwNiwgMCwgMCApO1xyXG5cclxuICAgIGNvbnN0IHdpcmVTZWdtZW50ID0gbmV3IFdpcmVTZWdtZW50KFxyXG4gICAgICByaWdodENvcm5lcixcclxuICAgICAgc3dpdGNoQ29ubmVjdGlvblBvaW50LnBsdXMoIHNlcGFyYXRpb25PZmZzZXQgKVxyXG4gICAgKTtcclxuICAgIHNlZ21lbnRzLnB1c2goIHdpcmVTZWdtZW50ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbmZpZy5tb2RlbFZpZXdUcmFuc2Zvcm0sIHNlZ21lbnRzLCBjb25uZWN0aW9uUG9pbnQgKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBGYWN0b3J5IG1ldGhvZHMgZm9yIHRvcCBMaWdodEJ1bGJUb1N3aXRjaFdpcmUgaW5zdGFuY2VcclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NpcmN1aXRDb25maWd9IGNvbmZpZ1xyXG4gICAqIEBwYXJhbSB7Q2lyY3VpdFN3aXRjaH0gY2lyY3VpdFN3aXRjaFxyXG4gICAqIEByZXR1cm5zIHtMaWdodEJ1bGJUb1N3aXRjaFdpcmV9XHJcbiAgICovXHJcbiAgc3RhdGljIGNyZWF0ZUxpZ2h0QnVsYlRvU3dpdGNoV2lyZUJvdHRvbSggY29uZmlnLCBjaXJjdWl0U3dpdGNoICkge1xyXG4gICAgcmV0dXJuIG5ldyBMaWdodEJ1bGJUb1N3aXRjaFdpcmUoIENpcmN1aXRQb3NpdGlvbi5MSUdIVF9CVUxCX0JPVFRPTSwgY29uZmlnLCBjaXJjdWl0U3dpdGNoICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGYWN0b3J5IG1ldGhvZHMgZm9yIGJvdHRvbSBMaWdodEJ1bGJUb1N3aXRjaFdpcmUgaW5zdGFuY2VcclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NpcmN1aXRDb25maWd9IGNvbmZpZ1xyXG4gICAqIEBwYXJhbSB7Q2lyY3VpdFN3aXRjaH0gY2lyY3VpdFN3aXRjaFxyXG4gICAqIEByZXR1cm5zIHtMaWdodEJ1bGJUb1N3aXRjaFdpcmV9XHJcbiAgICovXHJcbiAgc3RhdGljIGNyZWF0ZUxpZ2h0QnVsYlRvU3dpdGNoV2lyZVRvcCggY29uZmlnLCBjaXJjdWl0U3dpdGNoICkge1xyXG4gICAgcmV0dXJuIG5ldyBMaWdodEJ1bGJUb1N3aXRjaFdpcmUoIENpcmN1aXRQb3NpdGlvbi5MSUdIVF9CVUxCX1RPUCwgY29uZmlnLCBjaXJjdWl0U3dpdGNoICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYXBhY2l0b3JMYWJCYXNpY3MucmVnaXN0ZXIoICdMaWdodEJ1bGJUb1N3aXRjaFdpcmUnLCBMaWdodEJ1bGJUb1N3aXRjaFdpcmUgKTtcclxuZXhwb3J0IGRlZmF1bHQgTGlnaHRCdWxiVG9Td2l0Y2hXaXJlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLGtDQUFrQztBQUN0RCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLGtCQUFrQixNQUFNLGdDQUFnQztBQUMvRCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFDN0MsT0FBT0MsSUFBSSxNQUFNLFdBQVc7QUFDNUIsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUUxQyxNQUFNQyxxQkFBcUIsU0FBU0YsSUFBSSxDQUFDO0VBQ3ZDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsZUFBZSxFQUFFQyxNQUFNLEVBQUVDLGFBQWEsRUFBRztJQUNwRFYsUUFBUSxDQUFFUyxNQUFNLENBQUNFLFNBQVUsQ0FBQztJQUM1QixNQUFNQyxRQUFRLEdBQUcsRUFBRTs7SUFFbkI7SUFDQSxNQUFNQyxXQUFXLEdBQUdILGFBQWEsQ0FBQ0ksa0JBQWtCLENBQUVYLFlBQVksQ0FBQ1ksaUJBQWtCLENBQUMsQ0FBQ0MsQ0FBQzs7SUFFeEY7SUFDQSxNQUFNQyxLQUFLLEdBQUdULGVBQWUsS0FBS04sZUFBZSxDQUFDZ0IsY0FBYztJQUNoRSxNQUFNQyxnQkFBZ0IsR0FBR0YsS0FBSyxHQUFHUixNQUFNLENBQUNFLFNBQVMsQ0FBQ1MscUJBQXFCLENBQUMsQ0FBQyxDQUFDQyxDQUFDLEdBQUdaLE1BQU0sQ0FBQ0UsU0FBUyxDQUFDVyx3QkFBd0IsQ0FBQyxDQUFDLENBQUNELENBQUM7O0lBRTNIO0lBQ0EsTUFBTUUsV0FBVyxHQUFHLElBQUl4QixPQUFPLENBQUVvQixnQkFBZ0IsRUFBRU4sV0FBVyxFQUFFLENBQUUsQ0FBQzs7SUFFbkU7SUFDQSxJQUFJVyxlQUFlO0lBQ25CLElBQUtQLEtBQUssRUFBRztNQUNYTyxlQUFlLEdBQUduQixXQUFXLENBQUNvQiw2QkFBNkIsQ0FDekRoQixNQUFNLENBQUNFLFNBQVMsRUFDaEJZLFdBQ0YsQ0FBQztJQUNILENBQUMsTUFDSTtNQUNIQyxlQUFlLEdBQUduQixXQUFXLENBQUNxQixnQ0FBZ0MsQ0FDNURqQixNQUFNLENBQUNFLFNBQVMsRUFDaEJZLFdBQ0YsQ0FBQztJQUNIO0lBQ0FYLFFBQVEsQ0FBQ2UsSUFBSSxDQUFFSCxlQUFnQixDQUFDOztJQUVoQztJQUNBLE1BQU1JLHFCQUFxQixHQUFHbEIsYUFBYSxDQUFDSSxrQkFBa0IsQ0FBRVgsWUFBWSxDQUFDMEIsb0JBQXFCLENBQUM7SUFFbkcsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSS9CLE9BQU8sQ0FBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztJQUVwRCxNQUFNZ0MsV0FBVyxHQUFHLElBQUkxQixXQUFXLENBQ2pDa0IsV0FBVyxFQUNYSyxxQkFBcUIsQ0FBQ0ksSUFBSSxDQUFFRixnQkFBaUIsQ0FDL0MsQ0FBQztJQUNEbEIsUUFBUSxDQUFDZSxJQUFJLENBQUVJLFdBQVksQ0FBQztJQUU1QixLQUFLLENBQUV0QixNQUFNLENBQUN3QixrQkFBa0IsRUFBRXJCLFFBQVEsRUFBRUosZUFBZ0IsQ0FBQztFQUMvRDs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBTzBCLGlDQUFpQ0EsQ0FBRXpCLE1BQU0sRUFBRUMsYUFBYSxFQUFHO0lBQ2hFLE9BQU8sSUFBSUoscUJBQXFCLENBQUVKLGVBQWUsQ0FBQ2lDLGlCQUFpQixFQUFFMUIsTUFBTSxFQUFFQyxhQUFjLENBQUM7RUFDOUY7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLE9BQU8wQiw4QkFBOEJBLENBQUUzQixNQUFNLEVBQUVDLGFBQWEsRUFBRztJQUM3RCxPQUFPLElBQUlKLHFCQUFxQixDQUFFSixlQUFlLENBQUNnQixjQUFjLEVBQUVULE1BQU0sRUFBRUMsYUFBYyxDQUFDO0VBQzNGO0FBQ0Y7QUFFQVQsa0JBQWtCLENBQUNvQyxRQUFRLENBQUUsdUJBQXVCLEVBQUUvQixxQkFBc0IsQ0FBQztBQUM3RSxlQUFlQSxxQkFBcUIifQ==