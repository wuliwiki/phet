// Copyright 2015-2022, University of Colorado Boulder

/**
 * A wire is a collection of connected wire segments. It contains a creator object that creates the wire shape. The
 * shape is used to display the wire, and to check continuity when measuring voltage.
 *
 * Note that strict connectivity of the wire segments is not required. In fact, you'll notice that segment endpoints
 * are often adjusted to accommodate the creation of wire shapes that look convincing in the view.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import Multilink from '../../../../../axon/js/Multilink.js';
import Property from '../../../../../axon/js/Property.js';
import capacitorLabBasics from '../../../capacitorLabBasics.js';
import WireShapeCreator from '../shapes/WireShapeCreator.js';
class Wire {
  /**
   * @param {YawPitchModelViewTransform3} modelViewTransform
   * @param {WireSegment[]} segments
   * @param {CircuitPosition} connectionPoint
   *
   */
  constructor(modelViewTransform, segments, connectionPoint) {
    this.segments = segments; // @public
    this.connectionPoint = connectionPoint; // @public
    this.shapeCreator = new WireShapeCreator(this, modelViewTransform); // @private

    // @public
    this.shapeProperty = new Property(this.shapeCreator.createWireShape());

    // Whenever a segment changes, update the shape.
    this.segments.forEach(segment => {
      Multilink.multilink([segment.startPointProperty, segment.endPointProperty], () => {
        this.shapeProperty.set(this.shapeCreator.createWireShape());
      });
    });
  }

  /**
   * Update all segments of the wire
   * @public
   */
  update() {
    this.segments.forEach(segment => {
      segment.update();
    });
  }

  /**
   * Whether the given shape intersects with the wire.
   * @public
   *
   * @param {Shape} shape
   */
  contacts(shape) {
    return shape.bounds.intersectsBounds(this.shapeProperty.value.bounds) && shape.shapeIntersection(this.shapeProperty.value).getNonoverlappingArea() > 0;
  }
}
capacitorLabBasics.register('Wire', Wire);
export default Wire;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJQcm9wZXJ0eSIsImNhcGFjaXRvckxhYkJhc2ljcyIsIldpcmVTaGFwZUNyZWF0b3IiLCJXaXJlIiwiY29uc3RydWN0b3IiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJzZWdtZW50cyIsImNvbm5lY3Rpb25Qb2ludCIsInNoYXBlQ3JlYXRvciIsInNoYXBlUHJvcGVydHkiLCJjcmVhdGVXaXJlU2hhcGUiLCJmb3JFYWNoIiwic2VnbWVudCIsIm11bHRpbGluayIsInN0YXJ0UG9pbnRQcm9wZXJ0eSIsImVuZFBvaW50UHJvcGVydHkiLCJzZXQiLCJ1cGRhdGUiLCJjb250YWN0cyIsInNoYXBlIiwiYm91bmRzIiwiaW50ZXJzZWN0c0JvdW5kcyIsInZhbHVlIiwic2hhcGVJbnRlcnNlY3Rpb24iLCJnZXROb25vdmVybGFwcGluZ0FyZWEiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldpcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSB3aXJlIGlzIGEgY29sbGVjdGlvbiBvZiBjb25uZWN0ZWQgd2lyZSBzZWdtZW50cy4gSXQgY29udGFpbnMgYSBjcmVhdG9yIG9iamVjdCB0aGF0IGNyZWF0ZXMgdGhlIHdpcmUgc2hhcGUuIFRoZVxyXG4gKiBzaGFwZSBpcyB1c2VkIHRvIGRpc3BsYXkgdGhlIHdpcmUsIGFuZCB0byBjaGVjayBjb250aW51aXR5IHdoZW4gbWVhc3VyaW5nIHZvbHRhZ2UuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCBzdHJpY3QgY29ubmVjdGl2aXR5IG9mIHRoZSB3aXJlIHNlZ21lbnRzIGlzIG5vdCByZXF1aXJlZC4gSW4gZmFjdCwgeW91J2xsIG5vdGljZSB0aGF0IHNlZ21lbnQgZW5kcG9pbnRzXHJcbiAqIGFyZSBvZnRlbiBhZGp1c3RlZCB0byBhY2NvbW1vZGF0ZSB0aGUgY3JlYXRpb24gb2Ygd2lyZSBzaGFwZXMgdGhhdCBsb29rIGNvbnZpbmNpbmcgaW4gdGhlIHZpZXcuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZSAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgY2FwYWNpdG9yTGFiQmFzaWNzIGZyb20gJy4uLy4uLy4uL2NhcGFjaXRvckxhYkJhc2ljcy5qcyc7XHJcbmltcG9ydCBXaXJlU2hhcGVDcmVhdG9yIGZyb20gJy4uL3NoYXBlcy9XaXJlU2hhcGVDcmVhdG9yLmpzJztcclxuXHJcbmNsYXNzIFdpcmUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7WWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge1dpcmVTZWdtZW50W119IHNlZ21lbnRzXHJcbiAgICogQHBhcmFtIHtDaXJjdWl0UG9zaXRpb259IGNvbm5lY3Rpb25Qb2ludFxyXG4gICAqXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsVmlld1RyYW5zZm9ybSwgc2VnbWVudHMsIGNvbm5lY3Rpb25Qb2ludCApIHtcclxuXHJcbiAgICB0aGlzLnNlZ21lbnRzID0gc2VnbWVudHM7IC8vIEBwdWJsaWNcclxuICAgIHRoaXMuY29ubmVjdGlvblBvaW50ID0gY29ubmVjdGlvblBvaW50OyAvLyBAcHVibGljXHJcbiAgICB0aGlzLnNoYXBlQ3JlYXRvciA9IG5ldyBXaXJlU2hhcGVDcmVhdG9yKCB0aGlzLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKTsgLy8gQHByaXZhdGVcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLnNoYXBlUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHRoaXMuc2hhcGVDcmVhdG9yLmNyZWF0ZVdpcmVTaGFwZSgpICk7XHJcblxyXG4gICAgLy8gV2hlbmV2ZXIgYSBzZWdtZW50IGNoYW5nZXMsIHVwZGF0ZSB0aGUgc2hhcGUuXHJcbiAgICB0aGlzLnNlZ21lbnRzLmZvckVhY2goIHNlZ21lbnQgPT4ge1xyXG4gICAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHNlZ21lbnQuc3RhcnRQb2ludFByb3BlcnR5LCBzZWdtZW50LmVuZFBvaW50UHJvcGVydHkgXSwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2hhcGVQcm9wZXJ0eS5zZXQoIHRoaXMuc2hhcGVDcmVhdG9yLmNyZWF0ZVdpcmVTaGFwZSgpICk7XHJcbiAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSBhbGwgc2VnbWVudHMgb2YgdGhlIHdpcmVcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgdGhpcy5zZWdtZW50cy5mb3JFYWNoKCBzZWdtZW50ID0+IHtcclxuICAgICAgc2VnbWVudC51cGRhdGUoKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIGdpdmVuIHNoYXBlIGludGVyc2VjdHMgd2l0aCB0aGUgd2lyZS5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1NoYXBlfSBzaGFwZVxyXG4gICAqL1xyXG4gIGNvbnRhY3RzKCBzaGFwZSApIHtcclxuICAgIHJldHVybiBzaGFwZS5ib3VuZHMuaW50ZXJzZWN0c0JvdW5kcyggdGhpcy5zaGFwZVByb3BlcnR5LnZhbHVlLmJvdW5kcyApICYmXHJcbiAgICAgICAgICAgc2hhcGUuc2hhcGVJbnRlcnNlY3Rpb24oIHRoaXMuc2hhcGVQcm9wZXJ0eS52YWx1ZSApLmdldE5vbm92ZXJsYXBwaW5nQXJlYSgpID4gMDtcclxuICB9XHJcbn1cclxuXHJcbmNhcGFjaXRvckxhYkJhc2ljcy5yZWdpc3RlciggJ1dpcmUnLCBXaXJlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBXaXJlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLHFDQUFxQztBQUMzRCxPQUFPQyxRQUFRLE1BQU0sb0NBQW9DO0FBQ3pELE9BQU9DLGtCQUFrQixNQUFNLGdDQUFnQztBQUMvRCxPQUFPQyxnQkFBZ0IsTUFBTSwrQkFBK0I7QUFFNUQsTUFBTUMsSUFBSSxDQUFDO0VBQ1Q7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLGtCQUFrQixFQUFFQyxRQUFRLEVBQUVDLGVBQWUsRUFBRztJQUUzRCxJQUFJLENBQUNELFFBQVEsR0FBR0EsUUFBUSxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDQyxlQUFlLEdBQUdBLGVBQWUsQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlOLGdCQUFnQixDQUFFLElBQUksRUFBRUcsa0JBQW1CLENBQUMsQ0FBQyxDQUFDOztJQUV0RTtJQUNBLElBQUksQ0FBQ0ksYUFBYSxHQUFHLElBQUlULFFBQVEsQ0FBRSxJQUFJLENBQUNRLFlBQVksQ0FBQ0UsZUFBZSxDQUFDLENBQUUsQ0FBQzs7SUFFeEU7SUFDQSxJQUFJLENBQUNKLFFBQVEsQ0FBQ0ssT0FBTyxDQUFFQyxPQUFPLElBQUk7TUFDaENiLFNBQVMsQ0FBQ2MsU0FBUyxDQUFFLENBQUVELE9BQU8sQ0FBQ0Usa0JBQWtCLEVBQUVGLE9BQU8sQ0FBQ0csZ0JBQWdCLENBQUUsRUFBRSxNQUFNO1FBQ25GLElBQUksQ0FBQ04sYUFBYSxDQUFDTyxHQUFHLENBQUUsSUFBSSxDQUFDUixZQUFZLENBQUNFLGVBQWUsQ0FBQyxDQUFFLENBQUM7TUFDL0QsQ0FBRSxDQUFDO0lBQ0wsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRU8sTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsSUFBSSxDQUFDWCxRQUFRLENBQUNLLE9BQU8sQ0FBRUMsT0FBTyxJQUFJO01BQ2hDQSxPQUFPLENBQUNLLE1BQU0sQ0FBQyxDQUFDO0lBQ2xCLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxRQUFRQSxDQUFFQyxLQUFLLEVBQUc7SUFDaEIsT0FBT0EsS0FBSyxDQUFDQyxNQUFNLENBQUNDLGdCQUFnQixDQUFFLElBQUksQ0FBQ1osYUFBYSxDQUFDYSxLQUFLLENBQUNGLE1BQU8sQ0FBQyxJQUNoRUQsS0FBSyxDQUFDSSxpQkFBaUIsQ0FBRSxJQUFJLENBQUNkLGFBQWEsQ0FBQ2EsS0FBTSxDQUFDLENBQUNFLHFCQUFxQixDQUFDLENBQUMsR0FBRyxDQUFDO0VBQ3hGO0FBQ0Y7QUFFQXZCLGtCQUFrQixDQUFDd0IsUUFBUSxDQUFFLE1BQU0sRUFBRXRCLElBQUssQ0FBQztBQUUzQyxlQUFlQSxJQUFJIn0=