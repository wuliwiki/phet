// Copyright 2015-2021, University of Colorado Boulder

/**
 * A straight segment of wire. One or more segments are joined to create a Wire.  Contains factory functions to
 * construct wire segments for each of the circuit components, since segments will need unique functions to update
 * their geometry depending on the components they connect.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import Property from '../../../../../axon/js/Property.js';
import Vector3 from '../../../../../dot/js/Vector3.js';
import capacitorLabBasics from '../../../capacitorLabBasics.js';
class WireSegment {
  /**
   * @param {Vector3} startPoint
   * @param {Vector3} endPoint
   */
  constructor(startPoint, endPoint) {
    assert && assert(startPoint instanceof Vector3);
    assert && assert(endPoint instanceof Vector3);

    // @public {Property.<Vector3>}
    this.startPointProperty = new Property(startPoint);

    // @public {Property.<Vector3>}
    this.endPointProperty = new Property(endPoint);
  }

  /**
   * No-op function to provide a uniform interface for all descendants
   * @public
   */
  update() {}

  // Factory methods for specific wire segments

  /**
   * Factory for a ComponentWireSegment that attaches to the top of a circuit component
   * @public
   *
   * @param {Capacitor|LightBulb} component
   * @param {Vector3} endPoint
   * @returns {WireSegment}
   */
  static createComponentTopWireSegment(component, endPoint) {
    return new ComponentTopWireSegment(component, endPoint);
  }

  /**
   * Factory for a ComponentWireSegment that attaches to the bottom of a circuit component
   * @public
   *
   * @param {Capacitor|LightBulb} component
   * @param {Vector3} endPoint
   * @returns {ComponentBottomWireSegment}
   */
  static createComponentBottomWireSegment(component, endPoint) {
    return new ComponentBottomWireSegment(component, endPoint);
  }
}
capacitorLabBasics.register('WireSegment', WireSegment);
class ComponentTopWireSegment extends WireSegment {
  /**
   * This is a wire segment whose start point is connected to the top
   * connection point of a component.  Adjusts the wire geometry when the component changes geometry or orientation.
   * @public
   *
   * @param {Capacitor|LightBulb} component
   * @param {Vector3} endPoint
   */
  constructor(component, endPoint) {
    super(component.getTopConnectionPoint(), endPoint);

    // @private
    this.component = component;
  }

  /**
   * Update the start point of the segment. Called when the component geometry changes.
   * @public
   */
  update() {
    const connectionPoint = this.component.getTopConnectionPoint();
    if (!this.startPointProperty.value.equals(connectionPoint)) {
      this.startPointProperty.value = connectionPoint;
    }
  }
}
capacitorLabBasics.register('ComponentTopWireSegment', ComponentTopWireSegment);
class ComponentBottomWireSegment extends WireSegment {
  /**
   * Wire segment whose start point is connected to the bottom connection
   * point of a component.  Adjusts the start point when the component geometry changes.
   * @public
   *
   * @param {Capacitor|LightBulb} component
   * @param {Vector3} endPoint
   */
  constructor(component, endPoint) {
    super(component.getBottomConnectionPoint(), endPoint);

    // @private
    this.component = component;
  }

  /**
   * Update the start point of the segment. Called when the component geometry changes
   * @public
   */
  update() {
    const connectionPoint = this.component.getBottomConnectionPoint();
    if (!this.startPointProperty.value.equals(connectionPoint)) {
      this.startPointProperty.value = connectionPoint;
    }
  }
}
capacitorLabBasics.register('ComponentBottomWireSegment', ComponentBottomWireSegment);
export default WireSegment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjMiLCJjYXBhY2l0b3JMYWJCYXNpY3MiLCJXaXJlU2VnbWVudCIsImNvbnN0cnVjdG9yIiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwiYXNzZXJ0Iiwic3RhcnRQb2ludFByb3BlcnR5IiwiZW5kUG9pbnRQcm9wZXJ0eSIsInVwZGF0ZSIsImNyZWF0ZUNvbXBvbmVudFRvcFdpcmVTZWdtZW50IiwiY29tcG9uZW50IiwiQ29tcG9uZW50VG9wV2lyZVNlZ21lbnQiLCJjcmVhdGVDb21wb25lbnRCb3R0b21XaXJlU2VnbWVudCIsIkNvbXBvbmVudEJvdHRvbVdpcmVTZWdtZW50IiwicmVnaXN0ZXIiLCJnZXRUb3BDb25uZWN0aW9uUG9pbnQiLCJjb25uZWN0aW9uUG9pbnQiLCJ2YWx1ZSIsImVxdWFscyIsImdldEJvdHRvbUNvbm5lY3Rpb25Qb2ludCJdLCJzb3VyY2VzIjpbIldpcmVTZWdtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgc3RyYWlnaHQgc2VnbWVudCBvZiB3aXJlLiBPbmUgb3IgbW9yZSBzZWdtZW50cyBhcmUgam9pbmVkIHRvIGNyZWF0ZSBhIFdpcmUuICBDb250YWlucyBmYWN0b3J5IGZ1bmN0aW9ucyB0b1xyXG4gKiBjb25zdHJ1Y3Qgd2lyZSBzZWdtZW50cyBmb3IgZWFjaCBvZiB0aGUgY2lyY3VpdCBjb21wb25lbnRzLCBzaW5jZSBzZWdtZW50cyB3aWxsIG5lZWQgdW5pcXVlIGZ1bmN0aW9ucyB0byB1cGRhdGVcclxuICogdGhlaXIgZ2VvbWV0cnkgZGVwZW5kaW5nIG9uIHRoZSBjb21wb25lbnRzIHRoZXkgY29ubmVjdC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQW5kcmV3IEFkYXJlIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjMuanMnO1xyXG5pbXBvcnQgY2FwYWNpdG9yTGFiQmFzaWNzIGZyb20gJy4uLy4uLy4uL2NhcGFjaXRvckxhYkJhc2ljcy5qcyc7XHJcblxyXG5jbGFzcyBXaXJlU2VnbWVudCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtWZWN0b3IzfSBzdGFydFBvaW50XHJcbiAgICogQHBhcmFtIHtWZWN0b3IzfSBlbmRQb2ludFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBzdGFydFBvaW50LCBlbmRQb2ludCApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzdGFydFBvaW50IGluc3RhbmNlb2YgVmVjdG9yMyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZW5kUG9pbnQgaW5zdGFuY2VvZiBWZWN0b3IzICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPFZlY3RvcjM+fVxyXG4gICAgdGhpcy5zdGFydFBvaW50UHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIHN0YXJ0UG9pbnQgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48VmVjdG9yMz59XHJcbiAgICB0aGlzLmVuZFBvaW50UHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGVuZFBvaW50ICk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogTm8tb3AgZnVuY3Rpb24gdG8gcHJvdmlkZSBhIHVuaWZvcm0gaW50ZXJmYWNlIGZvciBhbGwgZGVzY2VuZGFudHNcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgdXBkYXRlKCkge31cclxuXHJcblxyXG4gIC8vIEZhY3RvcnkgbWV0aG9kcyBmb3Igc3BlY2lmaWMgd2lyZSBzZWdtZW50c1xyXG5cclxuICAvKipcclxuICAgKiBGYWN0b3J5IGZvciBhIENvbXBvbmVudFdpcmVTZWdtZW50IHRoYXQgYXR0YWNoZXMgdG8gdGhlIHRvcCBvZiBhIGNpcmN1aXQgY29tcG9uZW50XHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtDYXBhY2l0b3J8TGlnaHRCdWxifSBjb21wb25lbnRcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjN9IGVuZFBvaW50XHJcbiAgICogQHJldHVybnMge1dpcmVTZWdtZW50fVxyXG4gICAqL1xyXG4gIHN0YXRpYyBjcmVhdGVDb21wb25lbnRUb3BXaXJlU2VnbWVudCggY29tcG9uZW50LCBlbmRQb2ludCApIHtcclxuICAgIHJldHVybiBuZXcgQ29tcG9uZW50VG9wV2lyZVNlZ21lbnQoIGNvbXBvbmVudCwgZW5kUG9pbnQgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZhY3RvcnkgZm9yIGEgQ29tcG9uZW50V2lyZVNlZ21lbnQgdGhhdCBhdHRhY2hlcyB0byB0aGUgYm90dG9tIG9mIGEgY2lyY3VpdCBjb21wb25lbnRcclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NhcGFjaXRvcnxMaWdodEJ1bGJ9IGNvbXBvbmVudFxyXG4gICAqIEBwYXJhbSB7VmVjdG9yM30gZW5kUG9pbnRcclxuICAgKiBAcmV0dXJucyB7Q29tcG9uZW50Qm90dG9tV2lyZVNlZ21lbnR9XHJcbiAgICovXHJcbiAgc3RhdGljIGNyZWF0ZUNvbXBvbmVudEJvdHRvbVdpcmVTZWdtZW50KCBjb21wb25lbnQsIGVuZFBvaW50ICkge1xyXG4gICAgcmV0dXJuIG5ldyBDb21wb25lbnRCb3R0b21XaXJlU2VnbWVudCggY29tcG9uZW50LCBlbmRQb2ludCApO1xyXG4gIH1cclxufVxyXG5cclxuY2FwYWNpdG9yTGFiQmFzaWNzLnJlZ2lzdGVyKCAnV2lyZVNlZ21lbnQnLCBXaXJlU2VnbWVudCApO1xyXG5cclxuY2xhc3MgQ29tcG9uZW50VG9wV2lyZVNlZ21lbnQgZXh0ZW5kcyBXaXJlU2VnbWVudCB7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBpcyBhIHdpcmUgc2VnbWVudCB3aG9zZSBzdGFydCBwb2ludCBpcyBjb25uZWN0ZWQgdG8gdGhlIHRvcFxyXG4gICAqIGNvbm5lY3Rpb24gcG9pbnQgb2YgYSBjb21wb25lbnQuICBBZGp1c3RzIHRoZSB3aXJlIGdlb21ldHJ5IHdoZW4gdGhlIGNvbXBvbmVudCBjaGFuZ2VzIGdlb21ldHJ5IG9yIG9yaWVudGF0aW9uLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2FwYWNpdG9yfExpZ2h0QnVsYn0gY29tcG9uZW50XHJcbiAgICogQHBhcmFtIHtWZWN0b3IzfSBlbmRQb2ludFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBjb21wb25lbnQsIGVuZFBvaW50ICkge1xyXG4gICAgc3VwZXIoIGNvbXBvbmVudC5nZXRUb3BDb25uZWN0aW9uUG9pbnQoKSwgZW5kUG9pbnQgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIHRoZSBzdGFydCBwb2ludCBvZiB0aGUgc2VnbWVudC4gQ2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBnZW9tZXRyeSBjaGFuZ2VzLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICB1cGRhdGUoKSB7XHJcbiAgICBjb25zdCBjb25uZWN0aW9uUG9pbnQgPSB0aGlzLmNvbXBvbmVudC5nZXRUb3BDb25uZWN0aW9uUG9pbnQoKTtcclxuICAgIGlmICggIXRoaXMuc3RhcnRQb2ludFByb3BlcnR5LnZhbHVlLmVxdWFscyggY29ubmVjdGlvblBvaW50ICkgKSB7XHJcbiAgICAgIHRoaXMuc3RhcnRQb2ludFByb3BlcnR5LnZhbHVlID0gY29ubmVjdGlvblBvaW50O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY2FwYWNpdG9yTGFiQmFzaWNzLnJlZ2lzdGVyKCAnQ29tcG9uZW50VG9wV2lyZVNlZ21lbnQnLCBDb21wb25lbnRUb3BXaXJlU2VnbWVudCApO1xyXG5cclxuY2xhc3MgQ29tcG9uZW50Qm90dG9tV2lyZVNlZ21lbnQgZXh0ZW5kcyBXaXJlU2VnbWVudCB7XHJcbiAgLyoqXHJcbiAgICogV2lyZSBzZWdtZW50IHdob3NlIHN0YXJ0IHBvaW50IGlzIGNvbm5lY3RlZCB0byB0aGUgYm90dG9tIGNvbm5lY3Rpb25cclxuICAgKiBwb2ludCBvZiBhIGNvbXBvbmVudC4gIEFkanVzdHMgdGhlIHN0YXJ0IHBvaW50IHdoZW4gdGhlIGNvbXBvbmVudCBnZW9tZXRyeSBjaGFuZ2VzLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2FwYWNpdG9yfExpZ2h0QnVsYn0gY29tcG9uZW50XHJcbiAgICogQHBhcmFtIHtWZWN0b3IzfSBlbmRQb2ludFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBjb21wb25lbnQsIGVuZFBvaW50ICkge1xyXG4gICAgc3VwZXIoIGNvbXBvbmVudC5nZXRCb3R0b21Db25uZWN0aW9uUG9pbnQoKSwgZW5kUG9pbnQgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIHRoZSBzdGFydCBwb2ludCBvZiB0aGUgc2VnbWVudC4gQ2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBnZW9tZXRyeSBjaGFuZ2VzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGNvbnN0IGNvbm5lY3Rpb25Qb2ludCA9IHRoaXMuY29tcG9uZW50LmdldEJvdHRvbUNvbm5lY3Rpb25Qb2ludCgpO1xyXG4gICAgaWYgKCAhdGhpcy5zdGFydFBvaW50UHJvcGVydHkudmFsdWUuZXF1YWxzKCBjb25uZWN0aW9uUG9pbnQgKSApIHtcclxuICAgICAgdGhpcy5zdGFydFBvaW50UHJvcGVydHkudmFsdWUgPSBjb25uZWN0aW9uUG9pbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jYXBhY2l0b3JMYWJCYXNpY3MucmVnaXN0ZXIoICdDb21wb25lbnRCb3R0b21XaXJlU2VnbWVudCcsIENvbXBvbmVudEJvdHRvbVdpcmVTZWdtZW50ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBXaXJlU2VnbWVudDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sb0NBQW9DO0FBQ3pELE9BQU9DLE9BQU8sTUFBTSxrQ0FBa0M7QUFDdEQsT0FBT0Msa0JBQWtCLE1BQU0sZ0NBQWdDO0FBRS9ELE1BQU1DLFdBQVcsQ0FBQztFQUNoQjtBQUNGO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRztJQUVsQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVGLFVBQVUsWUFBWUosT0FBUSxDQUFDO0lBQ2pETSxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsUUFBUSxZQUFZTCxPQUFRLENBQUM7O0lBRS9DO0lBQ0EsSUFBSSxDQUFDTyxrQkFBa0IsR0FBRyxJQUFJUixRQUFRLENBQUVLLFVBQVcsQ0FBQzs7SUFFcEQ7SUFDQSxJQUFJLENBQUNJLGdCQUFnQixHQUFHLElBQUlULFFBQVEsQ0FBRU0sUUFBUyxDQUFDO0VBQ2xEOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VJLE1BQU1BLENBQUEsRUFBRyxDQUFDOztFQUdWOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPQyw2QkFBNkJBLENBQUVDLFNBQVMsRUFBRU4sUUFBUSxFQUFHO0lBQzFELE9BQU8sSUFBSU8sdUJBQXVCLENBQUVELFNBQVMsRUFBRU4sUUFBUyxDQUFDO0VBQzNEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPUSxnQ0FBZ0NBLENBQUVGLFNBQVMsRUFBRU4sUUFBUSxFQUFHO0lBQzdELE9BQU8sSUFBSVMsMEJBQTBCLENBQUVILFNBQVMsRUFBRU4sUUFBUyxDQUFDO0VBQzlEO0FBQ0Y7QUFFQUosa0JBQWtCLENBQUNjLFFBQVEsQ0FBRSxhQUFhLEVBQUViLFdBQVksQ0FBQztBQUV6RCxNQUFNVSx1QkFBdUIsU0FBU1YsV0FBVyxDQUFDO0VBQ2hEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRVEsU0FBUyxFQUFFTixRQUFRLEVBQUc7SUFDakMsS0FBSyxDQUFFTSxTQUFTLENBQUNLLHFCQUFxQixDQUFDLENBQUMsRUFBRVgsUUFBUyxDQUFDOztJQUVwRDtJQUNBLElBQUksQ0FBQ00sU0FBUyxHQUFHQSxTQUFTO0VBQzVCOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VGLE1BQU1BLENBQUEsRUFBRztJQUNQLE1BQU1RLGVBQWUsR0FBRyxJQUFJLENBQUNOLFNBQVMsQ0FBQ0sscUJBQXFCLENBQUMsQ0FBQztJQUM5RCxJQUFLLENBQUMsSUFBSSxDQUFDVCxrQkFBa0IsQ0FBQ1csS0FBSyxDQUFDQyxNQUFNLENBQUVGLGVBQWdCLENBQUMsRUFBRztNQUM5RCxJQUFJLENBQUNWLGtCQUFrQixDQUFDVyxLQUFLLEdBQUdELGVBQWU7SUFDakQ7RUFDRjtBQUNGO0FBRUFoQixrQkFBa0IsQ0FBQ2MsUUFBUSxDQUFFLHlCQUF5QixFQUFFSCx1QkFBd0IsQ0FBQztBQUVqRixNQUFNRSwwQkFBMEIsU0FBU1osV0FBVyxDQUFDO0VBQ25EO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRVEsU0FBUyxFQUFFTixRQUFRLEVBQUc7SUFDakMsS0FBSyxDQUFFTSxTQUFTLENBQUNTLHdCQUF3QixDQUFDLENBQUMsRUFBRWYsUUFBUyxDQUFDOztJQUV2RDtJQUNBLElBQUksQ0FBQ00sU0FBUyxHQUFHQSxTQUFTO0VBQzVCOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VGLE1BQU1BLENBQUEsRUFBRztJQUNQLE1BQU1RLGVBQWUsR0FBRyxJQUFJLENBQUNOLFNBQVMsQ0FBQ1Msd0JBQXdCLENBQUMsQ0FBQztJQUNqRSxJQUFLLENBQUMsSUFBSSxDQUFDYixrQkFBa0IsQ0FBQ1csS0FBSyxDQUFDQyxNQUFNLENBQUVGLGVBQWdCLENBQUMsRUFBRztNQUM5RCxJQUFJLENBQUNWLGtCQUFrQixDQUFDVyxLQUFLLEdBQUdELGVBQWU7SUFDakQ7RUFDRjtBQUNGO0FBRUFoQixrQkFBa0IsQ0FBQ2MsUUFBUSxDQUFFLDRCQUE0QixFQUFFRCwwQkFBMkIsQ0FBQztBQUV2RixlQUFlWixXQUFXIn0=