// Copyright 2013-2022, University of Colorado Boulder

/**
 * Faucet that dispenses water (the solvent).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import FaucetNode from '../../../../scenery-phet/js/FaucetNode.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import phScale from '../../phScale.js';
import Water from '../model/Water.js';
import PHScaleConstants from '../PHScaleConstants.js';
// constants
const SCALE = 0.6;
export default class WaterFaucetNode extends Node {
  constructor(faucet, modelViewTransform, providedOptions) {
    const options = optionize()({
      // Empty optionize call is needed because we're setting options.children below.
    }, providedOptions);
    const horizontalPipeLength = Math.abs(modelViewTransform.modelToViewX(faucet.position.x - faucet.pipeMinX)) / SCALE;
    const faucetNode = new FaucetNode(faucet.maxFlowRate, faucet.flowRateProperty, faucet.enabledProperty, combineOptions({}, PHScaleConstants.FAUCET_OPTIONS, {
      horizontalPipeLength: horizontalPipeLength,
      verticalPipeLength: 20,
      tandem: options.tandem.createTandem('faucetNode')
    }));
    faucetNode.translation = modelViewTransform.modelToViewPosition(faucet.position);
    faucetNode.setScaleMagnitude(-SCALE, SCALE); // reflect horizontally

    // decorate the faucet with 'Water' label
    const waterText = new Text(Water.nameProperty, {
      font: new PhetFont(28),
      maxWidth: 85,
      left: faucetNode.left + 115,
      bottom: faucetNode.centerY - 40,
      tandem: options.tandem.createTandem('waterText'),
      phetioVisiblePropertyInstrumented: true
    });
    options.children = [faucetNode, waterText];
    super(options);
  }
}
phScale.register('WaterFaucetNode', WaterFaucetNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkZhdWNldE5vZGUiLCJQaGV0Rm9udCIsIk5vZGUiLCJUZXh0IiwicGhTY2FsZSIsIldhdGVyIiwiUEhTY2FsZUNvbnN0YW50cyIsIlNDQUxFIiwiV2F0ZXJGYXVjZXROb2RlIiwiY29uc3RydWN0b3IiLCJmYXVjZXQiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaG9yaXpvbnRhbFBpcGVMZW5ndGgiLCJNYXRoIiwiYWJzIiwibW9kZWxUb1ZpZXdYIiwicG9zaXRpb24iLCJ4IiwicGlwZU1pblgiLCJmYXVjZXROb2RlIiwibWF4Rmxvd1JhdGUiLCJmbG93UmF0ZVByb3BlcnR5IiwiZW5hYmxlZFByb3BlcnR5IiwiRkFVQ0VUX09QVElPTlMiLCJ2ZXJ0aWNhbFBpcGVMZW5ndGgiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJ0cmFuc2xhdGlvbiIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJzZXRTY2FsZU1hZ25pdHVkZSIsIndhdGVyVGV4dCIsIm5hbWVQcm9wZXJ0eSIsImZvbnQiLCJtYXhXaWR0aCIsImxlZnQiLCJib3R0b20iLCJjZW50ZXJZIiwicGhldGlvVmlzaWJsZVByb3BlcnR5SW5zdHJ1bWVudGVkIiwiY2hpbGRyZW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldhdGVyRmF1Y2V0Tm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIgIC8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZhdWNldCB0aGF0IGRpc3BlbnNlcyB3YXRlciAodGhlIHNvbHZlbnQpLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IEZhdWNldE5vZGUsIHsgRmF1Y2V0Tm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvRmF1Y2V0Tm9kZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBOb2RlT3B0aW9ucywgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBwaFNjYWxlIGZyb20gJy4uLy4uL3BoU2NhbGUuanMnO1xyXG5pbXBvcnQgV2F0ZXIgZnJvbSAnLi4vbW9kZWwvV2F0ZXIuanMnO1xyXG5pbXBvcnQgUEhTY2FsZUNvbnN0YW50cyBmcm9tICcuLi9QSFNjYWxlQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEZhdWNldCBmcm9tICcuLi9tb2RlbC9GYXVjZXQuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgU0NBTEUgPSAwLjY7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgV2F0ZXJGYXVjZXROb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXRlckZhdWNldE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBmYXVjZXQ6IEZhdWNldCwgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLCBwcm92aWRlZE9wdGlvbnM6IFdhdGVyRmF1Y2V0Tm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxXYXRlckZhdWNldE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgLy8gRW1wdHkgb3B0aW9uaXplIGNhbGwgaXMgbmVlZGVkIGJlY2F1c2Ugd2UncmUgc2V0dGluZyBvcHRpb25zLmNoaWxkcmVuIGJlbG93LlxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgaG9yaXpvbnRhbFBpcGVMZW5ndGggPSBNYXRoLmFicyggbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggZmF1Y2V0LnBvc2l0aW9uLnggLSBmYXVjZXQucGlwZU1pblggKSApIC8gU0NBTEU7XHJcblxyXG4gICAgY29uc3QgZmF1Y2V0Tm9kZSA9IG5ldyBGYXVjZXROb2RlKCBmYXVjZXQubWF4Rmxvd1JhdGUsIGZhdWNldC5mbG93UmF0ZVByb3BlcnR5LCBmYXVjZXQuZW5hYmxlZFByb3BlcnR5LFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxGYXVjZXROb2RlT3B0aW9ucz4oIHt9LCBQSFNjYWxlQ29uc3RhbnRzLkZBVUNFVF9PUFRJT05TLCB7XHJcbiAgICAgICAgaG9yaXpvbnRhbFBpcGVMZW5ndGg6IGhvcml6b250YWxQaXBlTGVuZ3RoLFxyXG4gICAgICAgIHZlcnRpY2FsUGlwZUxlbmd0aDogMjAsXHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdmYXVjZXROb2RlJyApXHJcbiAgICAgIH0gKSApO1xyXG4gICAgZmF1Y2V0Tm9kZS50cmFuc2xhdGlvbiA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBmYXVjZXQucG9zaXRpb24gKTtcclxuICAgIGZhdWNldE5vZGUuc2V0U2NhbGVNYWduaXR1ZGUoIC1TQ0FMRSwgU0NBTEUgKTsgLy8gcmVmbGVjdCBob3Jpem9udGFsbHlcclxuXHJcbiAgICAvLyBkZWNvcmF0ZSB0aGUgZmF1Y2V0IHdpdGggJ1dhdGVyJyBsYWJlbFxyXG4gICAgY29uc3Qgd2F0ZXJUZXh0ID0gbmV3IFRleHQoIFdhdGVyLm5hbWVQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDI4ICksXHJcbiAgICAgIG1heFdpZHRoOiA4NSxcclxuICAgICAgbGVmdDogZmF1Y2V0Tm9kZS5sZWZ0ICsgMTE1LFxyXG4gICAgICBib3R0b206IGZhdWNldE5vZGUuY2VudGVyWSAtIDQwLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3dhdGVyVGV4dCcgKSxcclxuICAgICAgcGhldGlvVmlzaWJsZVByb3BlcnR5SW5zdHJ1bWVudGVkOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgZmF1Y2V0Tm9kZSwgd2F0ZXJUZXh0IF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnBoU2NhbGUucmVnaXN0ZXIoICdXYXRlckZhdWNldE5vZGUnLCBXYXRlckZhdWNldE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxJQUFJQyxjQUFjLFFBQTBCLHVDQUF1QztBQUVuRyxPQUFPQyxVQUFVLE1BQTZCLDJDQUEyQztBQUN6RixPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBZUMsSUFBSSxRQUFRLG1DQUFtQztBQUMzRSxPQUFPQyxPQUFPLE1BQU0sa0JBQWtCO0FBQ3RDLE9BQU9DLEtBQUssTUFBTSxtQkFBbUI7QUFDckMsT0FBT0MsZ0JBQWdCLE1BQU0sd0JBQXdCO0FBSXJEO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLEdBQUc7QUFNakIsZUFBZSxNQUFNQyxlQUFlLFNBQVNOLElBQUksQ0FBQztFQUV6Q08sV0FBV0EsQ0FBRUMsTUFBYyxFQUFFQyxrQkFBdUMsRUFBRUMsZUFBdUMsRUFBRztJQUVySCxNQUFNQyxPQUFPLEdBQUdmLFNBQVMsQ0FBbUQsQ0FBQyxDQUFFO01BQzdFO0lBQUEsQ0FDRCxFQUFFYyxlQUFnQixDQUFDO0lBRXBCLE1BQU1FLG9CQUFvQixHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBRUwsa0JBQWtCLENBQUNNLFlBQVksQ0FBRVAsTUFBTSxDQUFDUSxRQUFRLENBQUNDLENBQUMsR0FBR1QsTUFBTSxDQUFDVSxRQUFTLENBQUUsQ0FBQyxHQUFHYixLQUFLO0lBRXZILE1BQU1jLFVBQVUsR0FBRyxJQUFJckIsVUFBVSxDQUFFVSxNQUFNLENBQUNZLFdBQVcsRUFBRVosTUFBTSxDQUFDYSxnQkFBZ0IsRUFBRWIsTUFBTSxDQUFDYyxlQUFlLEVBQ3BHekIsY0FBYyxDQUFxQixDQUFDLENBQUMsRUFBRU8sZ0JBQWdCLENBQUNtQixjQUFjLEVBQUU7TUFDdEVYLG9CQUFvQixFQUFFQSxvQkFBb0I7TUFDMUNZLGtCQUFrQixFQUFFLEVBQUU7TUFDdEJDLE1BQU0sRUFBRWQsT0FBTyxDQUFDYyxNQUFNLENBQUNDLFlBQVksQ0FBRSxZQUFhO0lBQ3BELENBQUUsQ0FBRSxDQUFDO0lBQ1BQLFVBQVUsQ0FBQ1EsV0FBVyxHQUFHbEIsa0JBQWtCLENBQUNtQixtQkFBbUIsQ0FBRXBCLE1BQU0sQ0FBQ1EsUUFBUyxDQUFDO0lBQ2xGRyxVQUFVLENBQUNVLGlCQUFpQixDQUFFLENBQUN4QixLQUFLLEVBQUVBLEtBQU0sQ0FBQyxDQUFDLENBQUM7O0lBRS9DO0lBQ0EsTUFBTXlCLFNBQVMsR0FBRyxJQUFJN0IsSUFBSSxDQUFFRSxLQUFLLENBQUM0QixZQUFZLEVBQUU7TUFDOUNDLElBQUksRUFBRSxJQUFJakMsUUFBUSxDQUFFLEVBQUcsQ0FBQztNQUN4QmtDLFFBQVEsRUFBRSxFQUFFO01BQ1pDLElBQUksRUFBRWYsVUFBVSxDQUFDZSxJQUFJLEdBQUcsR0FBRztNQUMzQkMsTUFBTSxFQUFFaEIsVUFBVSxDQUFDaUIsT0FBTyxHQUFHLEVBQUU7TUFDL0JYLE1BQU0sRUFBRWQsT0FBTyxDQUFDYyxNQUFNLENBQUNDLFlBQVksQ0FBRSxXQUFZLENBQUM7TUFDbERXLGlDQUFpQyxFQUFFO0lBQ3JDLENBQUUsQ0FBQztJQUVIMUIsT0FBTyxDQUFDMkIsUUFBUSxHQUFHLENBQUVuQixVQUFVLEVBQUVXLFNBQVMsQ0FBRTtJQUU1QyxLQUFLLENBQUVuQixPQUFRLENBQUM7RUFDbEI7QUFDRjtBQUVBVCxPQUFPLENBQUNxQyxRQUFRLENBQUUsaUJBQWlCLEVBQUVqQyxlQUFnQixDQUFDIn0=