// Copyright 2013-2022, University of Colorado Boulder

/**
 * Fluid coming out of a faucet.
 * Origin is at the top center, to simplify alignment with the center of the faucet's spout.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Rectangle } from '../../../../scenery/js/imports.js';
import phScale from '../../phScale.js';
export default class FaucetFluidNode extends Rectangle {
  constructor(faucet, colorProperty, height, modelViewTransform) {
    const options = {
      // RectangleOptions
      pickable: false

      // Do not instrument FaucetFluidNode, see https://github.com/phetsims/ph-scale/issues/107
    };

    super(0, 0, 0, 0, options);

    // Set the color of the fluid coming out of the spout.
    colorProperty.link(color => {
      this.fill = color;
      this.stroke = color.darkerColor();
    });

    // Set the width of the shape to match the flow rate.
    const viewPosition = modelViewTransform.modelToViewPosition(faucet.position);
    const viewHeight = modelViewTransform.modelToViewDeltaY(height);
    faucet.flowRateProperty.link(flowRate => {
      if (flowRate === 0) {
        this.setRect(-1, -1, 0, 0); // empty rectangle, at a position where we won't intersect with it
      } else {
        const viewWidth = modelViewTransform.modelToViewDeltaX(faucet.spoutWidth * flowRate / faucet.maxFlowRate);
        this.setRect(viewPosition.x - viewWidth / 2, viewPosition.y, viewWidth, viewHeight);
      }
    });
  }
}
phScale.register('FaucetFluidNode', FaucetFluidNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWN0YW5nbGUiLCJwaFNjYWxlIiwiRmF1Y2V0Rmx1aWROb2RlIiwiY29uc3RydWN0b3IiLCJmYXVjZXQiLCJjb2xvclByb3BlcnR5IiwiaGVpZ2h0IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwib3B0aW9ucyIsInBpY2thYmxlIiwibGluayIsImNvbG9yIiwiZmlsbCIsInN0cm9rZSIsImRhcmtlckNvbG9yIiwidmlld1Bvc2l0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsInBvc2l0aW9uIiwidmlld0hlaWdodCIsIm1vZGVsVG9WaWV3RGVsdGFZIiwiZmxvd1JhdGVQcm9wZXJ0eSIsImZsb3dSYXRlIiwic2V0UmVjdCIsInZpZXdXaWR0aCIsIm1vZGVsVG9WaWV3RGVsdGFYIiwic3BvdXRXaWR0aCIsIm1heEZsb3dSYXRlIiwieCIsInkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZhdWNldEZsdWlkTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBGbHVpZCBjb21pbmcgb3V0IG9mIGEgZmF1Y2V0LlxyXG4gKiBPcmlnaW4gaXMgYXQgdGhlIHRvcCBjZW50ZXIsIHRvIHNpbXBsaWZ5IGFsaWdubWVudCB3aXRoIHRoZSBjZW50ZXIgb2YgdGhlIGZhdWNldCdzIHNwb3V0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHBoU2NhbGUgZnJvbSAnLi4vLi4vcGhTY2FsZS5qcyc7XHJcbmltcG9ydCBGYXVjZXQgZnJvbSAnLi4vbW9kZWwvRmF1Y2V0LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZhdWNldEZsdWlkTm9kZSBleHRlbmRzIFJlY3RhbmdsZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZmF1Y2V0OiBGYXVjZXQsIGNvbG9yUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PENvbG9yPiwgaGVpZ2h0OiBudW1iZXIsIG1vZGVsVmlld1RyYW5zZm9ybTogTW9kZWxWaWV3VHJhbnNmb3JtMiApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG5cclxuICAgICAgLy8gUmVjdGFuZ2xlT3B0aW9uc1xyXG4gICAgICBwaWNrYWJsZTogZmFsc2VcclxuXHJcbiAgICAgIC8vIERvIG5vdCBpbnN0cnVtZW50IEZhdWNldEZsdWlkTm9kZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9waC1zY2FsZS9pc3N1ZXMvMTA3XHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKCAwLCAwLCAwLCAwLCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSBjb2xvciBvZiB0aGUgZmx1aWQgY29taW5nIG91dCBvZiB0aGUgc3BvdXQuXHJcbiAgICBjb2xvclByb3BlcnR5LmxpbmsoIGNvbG9yID0+IHtcclxuICAgICAgdGhpcy5maWxsID0gY29sb3I7XHJcbiAgICAgIHRoaXMuc3Ryb2tlID0gY29sb3IuZGFya2VyQ29sb3IoKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIHdpZHRoIG9mIHRoZSBzaGFwZSB0byBtYXRjaCB0aGUgZmxvdyByYXRlLlxyXG4gICAgY29uc3Qgdmlld1Bvc2l0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGZhdWNldC5wb3NpdGlvbiApO1xyXG4gICAgY29uc3Qgdmlld0hlaWdodCA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggaGVpZ2h0ICk7XHJcbiAgICBmYXVjZXQuZmxvd1JhdGVQcm9wZXJ0eS5saW5rKCBmbG93UmF0ZSA9PiB7XHJcbiAgICAgIGlmICggZmxvd1JhdGUgPT09IDAgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRSZWN0KCAtMSwgLTEsIDAsIDAgKTsgLy8gZW1wdHkgcmVjdGFuZ2xlLCBhdCBhIHBvc2l0aW9uIHdoZXJlIHdlIHdvbid0IGludGVyc2VjdCB3aXRoIGl0XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgdmlld1dpZHRoID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBmYXVjZXQuc3BvdXRXaWR0aCAqIGZsb3dSYXRlIC8gZmF1Y2V0Lm1heEZsb3dSYXRlICk7XHJcbiAgICAgICAgdGhpcy5zZXRSZWN0KCB2aWV3UG9zaXRpb24ueCAtICggdmlld1dpZHRoIC8gMiApLCB2aWV3UG9zaXRpb24ueSwgdmlld1dpZHRoLCB2aWV3SGVpZ2h0ICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbnBoU2NhbGUucmVnaXN0ZXIoICdGYXVjZXRGbHVpZE5vZGUnLCBGYXVjZXRGbHVpZE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFnQkEsU0FBUyxRQUFRLG1DQUFtQztBQUNwRSxPQUFPQyxPQUFPLE1BQU0sa0JBQWtCO0FBR3RDLGVBQWUsTUFBTUMsZUFBZSxTQUFTRixTQUFTLENBQUM7RUFFOUNHLFdBQVdBLENBQUVDLE1BQWMsRUFBRUMsYUFBdUMsRUFBRUMsTUFBYyxFQUFFQyxrQkFBdUMsRUFBRztJQUVySSxNQUFNQyxPQUFPLEdBQUc7TUFFZDtNQUNBQyxRQUFRLEVBQUU7O01BRVY7SUFDRixDQUFDOztJQUVELEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVELE9BQVEsQ0FBQzs7SUFFNUI7SUFDQUgsYUFBYSxDQUFDSyxJQUFJLENBQUVDLEtBQUssSUFBSTtNQUMzQixJQUFJLENBQUNDLElBQUksR0FBR0QsS0FBSztNQUNqQixJQUFJLENBQUNFLE1BQU0sR0FBR0YsS0FBSyxDQUFDRyxXQUFXLENBQUMsQ0FBQztJQUNuQyxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxZQUFZLEdBQUdSLGtCQUFrQixDQUFDUyxtQkFBbUIsQ0FBRVosTUFBTSxDQUFDYSxRQUFTLENBQUM7SUFDOUUsTUFBTUMsVUFBVSxHQUFHWCxrQkFBa0IsQ0FBQ1ksaUJBQWlCLENBQUViLE1BQU8sQ0FBQztJQUNqRUYsTUFBTSxDQUFDZ0IsZ0JBQWdCLENBQUNWLElBQUksQ0FBRVcsUUFBUSxJQUFJO01BQ3hDLElBQUtBLFFBQVEsS0FBSyxDQUFDLEVBQUc7UUFDcEIsSUFBSSxDQUFDQyxPQUFPLENBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUM7TUFDaEMsQ0FBQyxNQUNJO1FBQ0gsTUFBTUMsU0FBUyxHQUFHaEIsa0JBQWtCLENBQUNpQixpQkFBaUIsQ0FBRXBCLE1BQU0sQ0FBQ3FCLFVBQVUsR0FBR0osUUFBUSxHQUFHakIsTUFBTSxDQUFDc0IsV0FBWSxDQUFDO1FBQzNHLElBQUksQ0FBQ0osT0FBTyxDQUFFUCxZQUFZLENBQUNZLENBQUMsR0FBS0osU0FBUyxHQUFHLENBQUcsRUFBRVIsWUFBWSxDQUFDYSxDQUFDLEVBQUVMLFNBQVMsRUFBRUwsVUFBVyxDQUFDO01BQzNGO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBakIsT0FBTyxDQUFDNEIsUUFBUSxDQUFFLGlCQUFpQixFQUFFM0IsZUFBZ0IsQ0FBQyJ9