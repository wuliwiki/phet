// Copyright 2013-2022, University of Colorado Boulder

/**
 * Controls for things that you see in the beaker.
 * This includes the 'H3O+/OH- Ratio' and 'Particle Counts' checkboxes.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HSeparator, RichText, Text, VBox } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Panel from '../../../../sun/js/Panel.js';
import StringIO from '../../../../tandem/js/types/StringIO.js';
import phScale from '../../phScale.js';
import PhScaleStrings from '../../PhScaleStrings.js';
import PHScaleColors from '../PHScaleColors.js';
import PHScaleConstants from '../PHScaleConstants.js';

// constants
const FONT = new PhetFont(20);
export default class BeakerControlPanel extends Panel {
  constructor(ratioVisibleProperty, particleCountsVisibleProperty, providedOptions) {
    const options = optionize()({
      // PanelOptions
      xMargin: 15,
      yMargin: 10,
      lineWidth: 2,
      fill: PHScaleColors.PANEL_FILL,
      phetioDocumentation: 'control panel that appears below the beaker'
    }, providedOptions);

    // 'H3O+ / OH- Ratio' checkbox
    const ratioCheckbox = new RatioCheckbox(ratioVisibleProperty, options.tandem.createTandem('ratioCheckbox'));
    ratioCheckbox.touchArea = ratioCheckbox.localBounds.dilatedXY(10, 6);

    // 'Particle Counts' checkbox
    const particleCountsCheckbox = new ParticleCountsCheckbox(particleCountsVisibleProperty, options.tandem.createTandem('particleCountsCheckbox'));
    particleCountsCheckbox.touchArea = ratioCheckbox.localBounds.dilatedXY(10, 6);
    const content = new VBox({
      children: [ratioCheckbox, new HSeparator(), particleCountsCheckbox],
      align: 'left',
      spacing: 10
    });
    super(content, options);
  }
}

/**
 * 'H3O+ / OH- Ratio' checkbox, with color-coded symbols
 */
class RatioCheckbox extends Checkbox {
  constructor(ratioVisibleProperty, tandem) {
    const stringProperty = new DerivedProperty([PhScaleStrings.ratioStringProperty], ratioString => StringUtils.fillIn(`{{h3o}} / {{oh}} ${ratioString} `, {
      h3o: `<span style="color:${PHScaleColors.H3O_PARTICLES.toCSS()}">${PHScaleConstants.H3O_FORMULA}</span>`,
      oh: `<span style="color:${PHScaleColors.OH_PARTICLES.toCSS()}">${PHScaleConstants.OH_FORMULA}</span>`
    }), {
      tandem: tandem.createTandem(RichText.STRING_PROPERTY_TANDEM_NAME),
      phetioValueType: StringIO
    });
    const ratioText = new RichText(stringProperty, {
      font: FONT
    });
    super(ratioVisibleProperty, ratioText, {
      tandem: tandem
    });
  }
}

/**
 * 'Particle Counts' checkbox
 */
class ParticleCountsCheckbox extends Checkbox {
  constructor(particleCountsVisibleProperty, tandem) {
    const text = new Text(PhScaleStrings.particleCountsStringProperty, {
      font: FONT,
      tandem: tandem.createTandem('text')
    });
    super(particleCountsVisibleProperty, text, {
      tandem: tandem
    });
  }
}
phScale.register('BeakerControlPanel', BeakerControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,