// Copyright 2020-2022, University of Colorado Boulder

/**
 * GraphControlPanel is the control panel that appears above the graph.  It contains controls to collapse the graph,
 * and change units.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../../phet-core/js/optionize.js';
import { Node, Rectangle } from '../../../../../scenery/js/imports.js';
import ExpandCollapseButton from '../../../../../sun/js/ExpandCollapseButton.js';
import Panel from '../../../../../sun/js/Panel.js';
import phScale from '../../../phScale.js';
import PHScaleColors from '../../PHScaleColors.js';
import PHScaleConstants from '../../PHScaleConstants.js';
import GraphUnitsSwitch from './GraphUnitsSwitch.js';
const MIN_HEIGHT = 50;
export default class GraphControlPanel extends Panel {
  constructor(graphUnitsProperty, expandedProperty, providedOptions) {
    const options = optionize()({
      // PanelOptions
      fill: PHScaleColors.PANEL_FILL,
      lineWidth: 2,
      cornerRadius: 6,
      xMargin: 8,
      yMargin: 8,
      minWidth: 330,
      align: 'right',
      phetioDocumentation: 'control panel that appears above the graph'
    }, providedOptions);

    // Invisible rectangle, for layout of switch and button.
    const rectangle = new Rectangle(0, 0, options.minWidth, MIN_HEIGHT);
    const graphUnitsSwitch = new GraphUnitsSwitch(graphUnitsProperty, {
      tandem: options.tandem.createTandem('graphUnitsSwitch')
    });
    graphUnitsSwitch.boundsProperty.link(bounds => {
      graphUnitsSwitch.center = rectangle.center;
    });
    const expandCollapseButton = new ExpandCollapseButton(expandedProperty, combineOptions({}, PHScaleConstants.EXPAND_COLLAPSE_BUTTON_OPTIONS, {
      right: rectangle.right,
      top: rectangle.top,
      tandem: options.tandem.createTandem('expandCollapseButton')
    }));
    const content = new Node({
      children: [rectangle, graphUnitsSwitch, expandCollapseButton]
    });
    super(content, options);

    // keyboard traversal order, see https://github.com/phetsims/ph-scale/issues/249
    this.pdomOrder = [graphUnitsSwitch, expandCollapseButton];
  }
}
phScale.register('GraphControlPanel', GraphControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIk5vZGUiLCJSZWN0YW5nbGUiLCJFeHBhbmRDb2xsYXBzZUJ1dHRvbiIsIlBhbmVsIiwicGhTY2FsZSIsIlBIU2NhbGVDb2xvcnMiLCJQSFNjYWxlQ29uc3RhbnRzIiwiR3JhcGhVbml0c1N3aXRjaCIsIk1JTl9IRUlHSFQiLCJHcmFwaENvbnRyb2xQYW5lbCIsImNvbnN0cnVjdG9yIiwiZ3JhcGhVbml0c1Byb3BlcnR5IiwiZXhwYW5kZWRQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJmaWxsIiwiUEFORUxfRklMTCIsImxpbmVXaWR0aCIsImNvcm5lclJhZGl1cyIsInhNYXJnaW4iLCJ5TWFyZ2luIiwibWluV2lkdGgiLCJhbGlnbiIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJyZWN0YW5nbGUiLCJncmFwaFVuaXRzU3dpdGNoIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiYm91bmRzUHJvcGVydHkiLCJsaW5rIiwiYm91bmRzIiwiY2VudGVyIiwiZXhwYW5kQ29sbGFwc2VCdXR0b24iLCJFWFBBTkRfQ09MTEFQU0VfQlVUVE9OX09QVElPTlMiLCJyaWdodCIsInRvcCIsImNvbnRlbnQiLCJjaGlsZHJlbiIsInBkb21PcmRlciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR3JhcGhDb250cm9sUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR3JhcGhDb250cm9sUGFuZWwgaXMgdGhlIGNvbnRyb2wgcGFuZWwgdGhhdCBhcHBlYXJzIGFib3ZlIHRoZSBncmFwaC4gIEl0IGNvbnRhaW5zIGNvbnRyb2xzIHRvIGNvbGxhcHNlIHRoZSBncmFwaCxcclxuICogYW5kIGNoYW5nZSB1bml0cy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEV4cGFuZENvbGxhcHNlQnV0dG9uLCB7IEV4cGFuZENvbGxhcHNlQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9FeHBhbmRDb2xsYXBzZUJ1dHRvbi5qcyc7XHJcbmltcG9ydCBQYW5lbCwgeyBQYW5lbE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgcGhTY2FsZSBmcm9tICcuLi8uLi8uLi9waFNjYWxlLmpzJztcclxuaW1wb3J0IFBIU2NhbGVDb2xvcnMgZnJvbSAnLi4vLi4vUEhTY2FsZUNvbG9ycy5qcyc7XHJcbmltcG9ydCBQSFNjYWxlQ29uc3RhbnRzIGZyb20gJy4uLy4uL1BIU2NhbGVDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgR3JhcGhVbml0cyBmcm9tICcuL0dyYXBoVW5pdHMuanMnO1xyXG5pbXBvcnQgR3JhcGhVbml0c1N3aXRjaCBmcm9tICcuL0dyYXBoVW5pdHNTd2l0Y2guanMnO1xyXG5cclxuY29uc3QgTUlOX0hFSUdIVCA9IDUwO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEdyYXBoQ29udHJvbFBhbmVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBhbmVsT3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhDb250cm9sUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZ3JhcGhVbml0c1Byb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PEdyYXBoVW5pdHM+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEdyYXBoQ29udHJvbFBhbmVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEdyYXBoQ29udHJvbFBhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhbmVsT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUGFuZWxPcHRpb25zXHJcbiAgICAgIGZpbGw6IFBIU2NhbGVDb2xvcnMuUEFORUxfRklMTCxcclxuICAgICAgbGluZVdpZHRoOiAyLFxyXG4gICAgICBjb3JuZXJSYWRpdXM6IDYsXHJcbiAgICAgIHhNYXJnaW46IDgsXHJcbiAgICAgIHlNYXJnaW46IDgsXHJcbiAgICAgIG1pbldpZHRoOiAzMzAsXHJcbiAgICAgIGFsaWduOiAncmlnaHQnLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnY29udHJvbCBwYW5lbCB0aGF0IGFwcGVhcnMgYWJvdmUgdGhlIGdyYXBoJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gSW52aXNpYmxlIHJlY3RhbmdsZSwgZm9yIGxheW91dCBvZiBzd2l0Y2ggYW5kIGJ1dHRvbi5cclxuICAgIGNvbnN0IHJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIG9wdGlvbnMubWluV2lkdGgsIE1JTl9IRUlHSFQgKTtcclxuXHJcbiAgICBjb25zdCBncmFwaFVuaXRzU3dpdGNoID0gbmV3IEdyYXBoVW5pdHNTd2l0Y2goIGdyYXBoVW5pdHNQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2dyYXBoVW5pdHNTd2l0Y2gnIClcclxuICAgIH0gKTtcclxuICAgIGdyYXBoVW5pdHNTd2l0Y2guYm91bmRzUHJvcGVydHkubGluayggYm91bmRzID0+IHtcclxuICAgICAgZ3JhcGhVbml0c1N3aXRjaC5jZW50ZXIgPSByZWN0YW5nbGUuY2VudGVyO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGV4cGFuZENvbGxhcHNlQnV0dG9uID0gbmV3IEV4cGFuZENvbGxhcHNlQnV0dG9uKCBleHBhbmRlZFByb3BlcnR5LFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxFeHBhbmRDb2xsYXBzZUJ1dHRvbk9wdGlvbnM+KCB7fSwgUEhTY2FsZUNvbnN0YW50cy5FWFBBTkRfQ09MTEFQU0VfQlVUVE9OX09QVElPTlMsIHtcclxuICAgICAgICByaWdodDogcmVjdGFuZ2xlLnJpZ2h0LFxyXG4gICAgICAgIHRvcDogcmVjdGFuZ2xlLnRvcCxcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2V4cGFuZENvbGxhcHNlQnV0dG9uJyApXHJcbiAgICAgIH0gKSApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyByZWN0YW5nbGUsIGdyYXBoVW5pdHNTd2l0Y2gsIGV4cGFuZENvbGxhcHNlQnV0dG9uIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGtleWJvYXJkIHRyYXZlcnNhbCBvcmRlciwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9waC1zY2FsZS9pc3N1ZXMvMjQ5XHJcbiAgICB0aGlzLnBkb21PcmRlciA9IFtcclxuICAgICAgZ3JhcGhVbml0c1N3aXRjaCxcclxuICAgICAgZXhwYW5kQ29sbGFwc2VCdXR0b25cclxuICAgIF07XHJcbiAgfVxyXG59XHJcblxyXG5waFNjYWxlLnJlZ2lzdGVyKCAnR3JhcGhDb250cm9sUGFuZWwnLCBHcmFwaENvbnRyb2xQYW5lbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLFNBQVMsSUFBSUMsY0FBYyxRQUEwQiwwQ0FBMEM7QUFFdEcsU0FBU0MsSUFBSSxFQUFFQyxTQUFTLFFBQVEsc0NBQXNDO0FBQ3RFLE9BQU9DLG9CQUFvQixNQUF1QywrQ0FBK0M7QUFDakgsT0FBT0MsS0FBSyxNQUF3QixnQ0FBZ0M7QUFDcEUsT0FBT0MsT0FBTyxNQUFNLHFCQUFxQjtBQUN6QyxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUV4RCxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFFcEQsTUFBTUMsVUFBVSxHQUFHLEVBQUU7QUFNckIsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU04sS0FBSyxDQUFDO0VBRTVDTyxXQUFXQSxDQUFFQyxrQkFBbUQsRUFDbkRDLGdCQUFtQyxFQUNuQ0MsZUFBeUMsRUFBRztJQUU5RCxNQUFNQyxPQUFPLEdBQUdoQixTQUFTLENBQXNELENBQUMsQ0FBRTtNQUVoRjtNQUNBaUIsSUFBSSxFQUFFVixhQUFhLENBQUNXLFVBQVU7TUFDOUJDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFlBQVksRUFBRSxDQUFDO01BQ2ZDLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLFFBQVEsRUFBRSxHQUFHO01BQ2JDLEtBQUssRUFBRSxPQUFPO01BQ2RDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUMsRUFBRVYsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNVyxTQUFTLEdBQUcsSUFBSXZCLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFYSxPQUFPLENBQUNPLFFBQVEsRUFBRWIsVUFBVyxDQUFDO0lBRXJFLE1BQU1pQixnQkFBZ0IsR0FBRyxJQUFJbEIsZ0JBQWdCLENBQUVJLGtCQUFrQixFQUFFO01BQ2pFZSxNQUFNLEVBQUVaLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDQyxZQUFZLENBQUUsa0JBQW1CO0lBQzFELENBQUUsQ0FBQztJQUNIRixnQkFBZ0IsQ0FBQ0csY0FBYyxDQUFDQyxJQUFJLENBQUVDLE1BQU0sSUFBSTtNQUM5Q0wsZ0JBQWdCLENBQUNNLE1BQU0sR0FBR1AsU0FBUyxDQUFDTyxNQUFNO0lBQzVDLENBQUUsQ0FBQztJQUVILE1BQU1DLG9CQUFvQixHQUFHLElBQUk5QixvQkFBb0IsQ0FBRVUsZ0JBQWdCLEVBQ3JFYixjQUFjLENBQStCLENBQUMsQ0FBQyxFQUFFTyxnQkFBZ0IsQ0FBQzJCLDhCQUE4QixFQUFFO01BQ2hHQyxLQUFLLEVBQUVWLFNBQVMsQ0FBQ1UsS0FBSztNQUN0QkMsR0FBRyxFQUFFWCxTQUFTLENBQUNXLEdBQUc7TUFDbEJULE1BQU0sRUFBRVosT0FBTyxDQUFDWSxNQUFNLENBQUNDLFlBQVksQ0FBRSxzQkFBdUI7SUFDOUQsQ0FBRSxDQUFFLENBQUM7SUFFUCxNQUFNUyxPQUFPLEdBQUcsSUFBSXBDLElBQUksQ0FBRTtNQUN4QnFDLFFBQVEsRUFBRSxDQUFFYixTQUFTLEVBQUVDLGdCQUFnQixFQUFFTyxvQkFBb0I7SUFDL0QsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFSSxPQUFPLEVBQUV0QixPQUFRLENBQUM7O0lBRXpCO0lBQ0EsSUFBSSxDQUFDd0IsU0FBUyxHQUFHLENBQ2ZiLGdCQUFnQixFQUNoQk8sb0JBQW9CLENBQ3JCO0VBQ0g7QUFDRjtBQUVBNUIsT0FBTyxDQUFDbUMsUUFBUSxDQUFFLG1CQUFtQixFQUFFOUIsaUJBQWtCLENBQUMifQ==