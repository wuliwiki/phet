// Copyright 2013-2022, University of Colorado Boulder

/**
 * Graph with a logarithmic scale, for displaying concentration (mol/L) and quantity (moles).
 * Assumes that graphing concentration and quantity can be graphed on the same scale.
 * Origin is at the top-left of the scale rectangle.
 *
 * Some of the code related to indicators (initialization and updateIndicators) is similar
 * to LinearGraph. But it was difficult to identify a natural pattern for factoring
 * this out, so I chose to leave it as is. See issue #16.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../../axon/js/DerivedProperty.js';
import Multilink from '../../../../../axon/js/Multilink.js';
import Property from '../../../../../axon/js/Property.js';
import Utils from '../../../../../dot/js/Utils.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../../scenery-phet/js/PhetFont.js';
import { Line, LinearGradient, Node, Rectangle, RichText } from '../../../../../scenery/js/imports.js';
import phScale from '../../../phScale.js';
import PHModel from '../../model/PHModel.js';
import PHScaleConstants from '../../PHScaleConstants.js';
import GraphIndicatorDragListener from './GraphIndicatorDragListener.js';
import GraphIndicatorNode from './GraphIndicatorNode.js';
import GraphUnits from './GraphUnits.js';
import GraphIndicatorKeyboardDragListener from './GraphIndicatorKeyboardDragListener.js';
export default class LogarithmicGraphNode extends Node {
  constructor(totalVolumeProperty, derivedProperties, graphUnitsProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      scaleHeight: 100,
      minScaleWidth: 100,
      scaleYMargin: 30,
      scaleCornerRadius: 20,
      scaleStroke: 'black',
      scaleLineWidth: 2,
      majorTickFont: new PhetFont(22),
      majorTickStroke: 'black',
      majorTickLength: 15,
      majorTickLineWidth: 1,
      majorTickXSpacing: 5,
      minorTickStroke: 'black',
      minorTickLength: 7,
      minorTickLineWidth: 1,
      indicatorXOffset: 10,
      // NodeOptions
      visiblePropertyOptions: {
        phetioReadOnly: true
      }
    }, providedOptions);
    super();
    const isInteractive = options.pHProperty instanceof Property;

    // background for the scale, width sized to fit
    const widestTickLabel = createTickLabel(PHScaleConstants.LOGARITHMIC_EXPONENT_RANGE.min, options.majorTickFont);
    const scaleWidth = Math.max(options.minScaleWidth, widestTickLabel.width + 2 * options.majorTickXSpacing + 2 * options.majorTickLength);
    const backgroundNode = new Rectangle(0, 0, scaleWidth, options.scaleHeight, options.scaleCornerRadius, options.scaleCornerRadius, {
      fill: new LinearGradient(0, 0, 0, options.scaleHeight).addColorStop(0, 'rgb( 200, 200, 200 )').addColorStop(1, 'white'),
      stroke: options.scaleStroke,
      lineWidth: options.scaleLineWidth
    });
    this.addChild(backgroundNode);

    // tick marks
    const numberOfTicks = PHScaleConstants.LOGARITHMIC_EXPONENT_RANGE.getLength() + 1;
    const ySpacing = (options.scaleHeight - 2 * options.scaleYMargin) / (numberOfTicks - 1); // vertical space between ticks
    let exponent;
    let tickLabel;
    let tickLineLeft;
    let tickLineRight;
    for (let i = 0; i < numberOfTicks; i++) {
      exponent = PHScaleConstants.LOGARITHMIC_EXPONENT_RANGE.max - i;

      // major ticks at even-numbered exponents
      if (exponent % 2 === 0) {
        // major lines and label
        tickLineLeft = new Line(0, 0, options.majorTickLength, 0, {
          stroke: options.majorTickStroke,
          lineWidth: options.majorTickLineWidth
        });
        tickLineRight = new Line(0, 0, options.majorTickLength, 0, {
          stroke: options.majorTickStroke,
          lineWidth: options.majorTickLineWidth
        });
        tickLabel = createTickLabel(exponent, options.majorTickFont);

        // rendering order
        this.addChild(tickLineLeft);
        this.addChild(tickLineRight);
        this.addChild(tickLabel);

        // layout
        tickLineLeft.left = backgroundNode.left;
        tickLineLeft.centerY = options.scaleYMargin + i * ySpacing;
        tickLineRight.right = backgroundNode.right;
        tickLineRight.centerY = tickLineLeft.centerY;
        tickLabel.centerX = backgroundNode.centerX;
        tickLabel.centerY = tickLineLeft.centerY;
      } else {
        // minor lines
        tickLineLeft = new Line(0, 0, options.minorTickLength, 0, {
          stroke: options.minorTickStroke,
          lineWidth: options.minorTickLineWidth
        });
        tickLineRight = new Line(0, 0, options.minorTickLength, 0, {
          stroke: options.minorTickStroke,
          lineWidth: options.minorTickLineWidth
        });

        // rendering order
        this.addChild(tickLineLeft);
        this.addChild(tickLineRight);

        // layout
        tickLineLeft.left = backgroundNode.left;
        tickLineLeft.centerY = options.scaleYMargin + i * ySpacing;
        tickLineRight.right = backgroundNode.right;
        tickLineRight.centerY = tickLineLeft.centerY;
      }
    }

    // Values displayed on the indicators
    const valueH2OProperty = new DerivedProperty([derivedProperties.concentrationH2OProperty, derivedProperties.quantityH2OProperty, graphUnitsProperty], (concentration, quantity, graphUnits) => graphUnits === GraphUnits.MOLES_PER_LITER ? concentration : quantity);
    const valueH3OProperty = new DerivedProperty([derivedProperties.concentrationH3OProperty, derivedProperties.quantityH3OProperty, graphUnitsProperty], (concentration, quantity, graphUnits) => graphUnits === GraphUnits.MOLES_PER_LITER ? concentration : quantity);
    const valueOHProperty = new DerivedProperty([derivedProperties.concentrationOHProperty, derivedProperties.quantityOHProperty, graphUnitsProperty], (concentration, quantity, graphUnits) => graphUnits === GraphUnits.MOLES_PER_LITER ? concentration : quantity);

    // indicators
    const indicatorH2ONode = GraphIndicatorNode.createH2OIndicator(valueH2OProperty, {
      x: backgroundNode.right - options.indicatorXOffset,
      tandem: options.tandem.createTandem('indicatorH2ONode')
    });
    const indicatorH3ONode = GraphIndicatorNode.createH3OIndicator(valueH3OProperty, {
      x: backgroundNode.left + options.indicatorXOffset,
      isInteractive: isInteractive,
      tandem: options.tandem.createTandem('indicatorH3ONode')
    });
    const indicatorOHNode = GraphIndicatorNode.createOHIndicator(valueOHProperty, {
      x: backgroundNode.right - options.indicatorXOffset,
      isInteractive: isInteractive,
      tandem: options.tandem.createTandem('indicatorOHNode')
    });
    this.addChild(indicatorH2ONode);
    this.addChild(indicatorH3ONode);
    this.addChild(indicatorOHNode);

    /**
     * Given a value, compute it's y position relative to the top of the scale.
     */
    const valueToY = value => {
      if (value === 0 || value === null) {
        // below the bottom tick
        return options.scaleHeight - 0.5 * options.scaleYMargin;
      } else {
        // between the top and bottom tick
        const maxHeight = options.scaleHeight - 2 * options.scaleYMargin;
        const maxExponent = PHScaleConstants.LOGARITHMIC_EXPONENT_RANGE.max;
        const minExponent = PHScaleConstants.LOGARITHMIC_EXPONENT_RANGE.min;
        const valueExponent = Utils.log10(value);
        return options.scaleYMargin + maxHeight - maxHeight * (valueExponent - minExponent) / (maxExponent - minExponent);
      }
    };

    // Given a y position relative to the top of the scale, compute a value.
    const yToValue = y => {
      const yOffset = y - options.scaleYMargin; // distance between indicator's origin and top tick mark
      const maxHeight = options.scaleHeight - 2 * options.scaleYMargin; // distance between top and bottom tick marks
      const exponent = Utils.linear(0, maxHeight, PHScaleConstants.LOGARITHMIC_EXPONENT_RANGE.max, PHScaleConstants.LOGARITHMIC_EXPONENT_RANGE.min, yOffset);
      return Math.pow(10, exponent);
    };

    // Move the indicators
    Multilink.multilink([valueH2OProperty, graphUnitsProperty], (valueH2O, graphUnits) => {
      indicatorH2ONode.y = valueToY(valueH2O);
    });
    Multilink.multilink([valueH3OProperty, graphUnitsProperty], (valueH3O, graphUnits) => {
      indicatorH3ONode.y = valueToY(valueH3O);
    });
    Multilink.multilink([valueOHProperty, graphUnitsProperty], (valueOH, graphUnits) => {
      indicatorOHNode.y = valueToY(valueOH);
    });

    // Add drag handlers for H3O+ and OH-
    if (isInteractive) {
      const pHProperty = options.pHProperty;

      // H3O+ indicator
      indicatorH3ONode.cursor = 'pointer';
      indicatorH3ONode.addInputListener(new GraphIndicatorDragListener(indicatorH3ONode, pHProperty, totalVolumeProperty, graphUnitsProperty, yToValue, PHModel.concentrationH3OToPH, PHModel.molesH3OToPH, () => indicatorOHNode.interruptSubtreeInput(),
      // dragging is mutually exclusive, see https://github.com/phetsims/ph-scale/issues/261
      indicatorH3ONode.tandem.createTandem('dragListener')));
      indicatorH3ONode.addInputListener(new GraphIndicatorKeyboardDragListener(indicatorH3ONode, pHProperty, totalVolumeProperty, graphUnitsProperty, yToValue, PHModel.concentrationH3OToPH, PHModel.molesH3OToPH, indicatorH3ONode.tandem.createTandem('keyboardDragListener')));

      // OH- indicator
      indicatorOHNode.cursor = 'pointer';
      indicatorOHNode.addInputListener(new GraphIndicatorDragListener(indicatorOHNode, pHProperty, totalVolumeProperty, graphUnitsProperty, yToValue, PHModel.concentrationOHToPH, PHModel.molesOHToPH, () => indicatorH3ONode.interruptSubtreeInput(),
      // dragging is mutually exclusive, see https://github.com/phetsims/ph-scale/issues/261
      indicatorOHNode.tandem.createTandem('dragListener')));
      indicatorOHNode.addInputListener(new GraphIndicatorKeyboardDragListener(indicatorOHNode, pHProperty, totalVolumeProperty, graphUnitsProperty, yToValue, PHModel.concentrationOHToPH, PHModel.molesOHToPH, indicatorOHNode.tandem.createTandem('keyboardDragListener')));

      // keyboard traversal order, see https://github.com/phetsims/ph-scale/issues/249
      this.pdomOrder = [indicatorH3ONode, indicatorOHNode];
    }
    this.mutate(options);
  }
}

/**
 * Creates a tick label, '10' to some exponent.
 */
function createTickLabel(exponent, font) {
  return new RichText(`10<sup>${exponent}</sup>`, {
    font: font,
    fill: 'black'
  });
}
phScale.register('LogarithmicGraphNode', LogarithmicGraphNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJNdWx0aWxpbmsiLCJQcm9wZXJ0eSIsIlV0aWxzIiwib3B0aW9uaXplIiwiUGhldEZvbnQiLCJMaW5lIiwiTGluZWFyR3JhZGllbnQiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiUmljaFRleHQiLCJwaFNjYWxlIiwiUEhNb2RlbCIsIlBIU2NhbGVDb25zdGFudHMiLCJHcmFwaEluZGljYXRvckRyYWdMaXN0ZW5lciIsIkdyYXBoSW5kaWNhdG9yTm9kZSIsIkdyYXBoVW5pdHMiLCJHcmFwaEluZGljYXRvcktleWJvYXJkRHJhZ0xpc3RlbmVyIiwiTG9nYXJpdGhtaWNHcmFwaE5vZGUiLCJjb25zdHJ1Y3RvciIsInRvdGFsVm9sdW1lUHJvcGVydHkiLCJkZXJpdmVkUHJvcGVydGllcyIsImdyYXBoVW5pdHNQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzY2FsZUhlaWdodCIsIm1pblNjYWxlV2lkdGgiLCJzY2FsZVlNYXJnaW4iLCJzY2FsZUNvcm5lclJhZGl1cyIsInNjYWxlU3Ryb2tlIiwic2NhbGVMaW5lV2lkdGgiLCJtYWpvclRpY2tGb250IiwibWFqb3JUaWNrU3Ryb2tlIiwibWFqb3JUaWNrTGVuZ3RoIiwibWFqb3JUaWNrTGluZVdpZHRoIiwibWFqb3JUaWNrWFNwYWNpbmciLCJtaW5vclRpY2tTdHJva2UiLCJtaW5vclRpY2tMZW5ndGgiLCJtaW5vclRpY2tMaW5lV2lkdGgiLCJpbmRpY2F0b3JYT2Zmc2V0IiwidmlzaWJsZVByb3BlcnR5T3B0aW9ucyIsInBoZXRpb1JlYWRPbmx5IiwiaXNJbnRlcmFjdGl2ZSIsInBIUHJvcGVydHkiLCJ3aWRlc3RUaWNrTGFiZWwiLCJjcmVhdGVUaWNrTGFiZWwiLCJMT0dBUklUSE1JQ19FWFBPTkVOVF9SQU5HRSIsIm1pbiIsInNjYWxlV2lkdGgiLCJNYXRoIiwibWF4Iiwid2lkdGgiLCJiYWNrZ3JvdW5kTm9kZSIsImZpbGwiLCJhZGRDb2xvclN0b3AiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJhZGRDaGlsZCIsIm51bWJlck9mVGlja3MiLCJnZXRMZW5ndGgiLCJ5U3BhY2luZyIsImV4cG9uZW50IiwidGlja0xhYmVsIiwidGlja0xpbmVMZWZ0IiwidGlja0xpbmVSaWdodCIsImkiLCJsZWZ0IiwiY2VudGVyWSIsInJpZ2h0IiwiY2VudGVyWCIsInZhbHVlSDJPUHJvcGVydHkiLCJjb25jZW50cmF0aW9uSDJPUHJvcGVydHkiLCJxdWFudGl0eUgyT1Byb3BlcnR5IiwiY29uY2VudHJhdGlvbiIsInF1YW50aXR5IiwiZ3JhcGhVbml0cyIsIk1PTEVTX1BFUl9MSVRFUiIsInZhbHVlSDNPUHJvcGVydHkiLCJjb25jZW50cmF0aW9uSDNPUHJvcGVydHkiLCJxdWFudGl0eUgzT1Byb3BlcnR5IiwidmFsdWVPSFByb3BlcnR5IiwiY29uY2VudHJhdGlvbk9IUHJvcGVydHkiLCJxdWFudGl0eU9IUHJvcGVydHkiLCJpbmRpY2F0b3JIMk9Ob2RlIiwiY3JlYXRlSDJPSW5kaWNhdG9yIiwieCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImluZGljYXRvckgzT05vZGUiLCJjcmVhdGVIM09JbmRpY2F0b3IiLCJpbmRpY2F0b3JPSE5vZGUiLCJjcmVhdGVPSEluZGljYXRvciIsInZhbHVlVG9ZIiwidmFsdWUiLCJtYXhIZWlnaHQiLCJtYXhFeHBvbmVudCIsIm1pbkV4cG9uZW50IiwidmFsdWVFeHBvbmVudCIsImxvZzEwIiwieVRvVmFsdWUiLCJ5IiwieU9mZnNldCIsImxpbmVhciIsInBvdyIsIm11bHRpbGluayIsInZhbHVlSDJPIiwidmFsdWVIM08iLCJ2YWx1ZU9IIiwiY3Vyc29yIiwiYWRkSW5wdXRMaXN0ZW5lciIsImNvbmNlbnRyYXRpb25IM09Ub1BIIiwibW9sZXNIM09Ub1BIIiwiaW50ZXJydXB0U3VidHJlZUlucHV0IiwiY29uY2VudHJhdGlvbk9IVG9QSCIsIm1vbGVzT0hUb1BIIiwicGRvbU9yZGVyIiwibXV0YXRlIiwiZm9udCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTG9nYXJpdGhtaWNHcmFwaE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR3JhcGggd2l0aCBhIGxvZ2FyaXRobWljIHNjYWxlLCBmb3IgZGlzcGxheWluZyBjb25jZW50cmF0aW9uIChtb2wvTCkgYW5kIHF1YW50aXR5IChtb2xlcykuXHJcbiAqIEFzc3VtZXMgdGhhdCBncmFwaGluZyBjb25jZW50cmF0aW9uIGFuZCBxdWFudGl0eSBjYW4gYmUgZ3JhcGhlZCBvbiB0aGUgc2FtZSBzY2FsZS5cclxuICogT3JpZ2luIGlzIGF0IHRoZSB0b3AtbGVmdCBvZiB0aGUgc2NhbGUgcmVjdGFuZ2xlLlxyXG4gKlxyXG4gKiBTb21lIG9mIHRoZSBjb2RlIHJlbGF0ZWQgdG8gaW5kaWNhdG9ycyAoaW5pdGlhbGl6YXRpb24gYW5kIHVwZGF0ZUluZGljYXRvcnMpIGlzIHNpbWlsYXJcclxuICogdG8gTGluZWFyR3JhcGguIEJ1dCBpdCB3YXMgZGlmZmljdWx0IHRvIGlkZW50aWZ5IGEgbmF0dXJhbCBwYXR0ZXJuIGZvciBmYWN0b3JpbmdcclxuICogdGhpcyBvdXQsIHNvIEkgY2hvc2UgdG8gbGVhdmUgaXQgYXMgaXMuIFNlZSBpc3N1ZSAjMTYuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBGb250LCBMaW5lLCBMaW5lYXJHcmFkaWVudCwgTm9kZSwgTm9kZU9wdGlvbnMsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMsIFJlY3RhbmdsZSwgUmljaFRleHQsIFRDb2xvciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBwaFNjYWxlIGZyb20gJy4uLy4uLy4uL3BoU2NhbGUuanMnO1xyXG5pbXBvcnQgUEhNb2RlbCwgeyBQSFZhbHVlIH0gZnJvbSAnLi4vLi4vbW9kZWwvUEhNb2RlbC5qcyc7XHJcbmltcG9ydCBTb2x1dGlvbkRlcml2ZWRQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL21vZGVsL1NvbHV0aW9uRGVyaXZlZFByb3BlcnRpZXMuanMnO1xyXG5pbXBvcnQgUEhTY2FsZUNvbnN0YW50cyBmcm9tICcuLi8uLi9QSFNjYWxlQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdyYXBoSW5kaWNhdG9yRHJhZ0xpc3RlbmVyIGZyb20gJy4vR3JhcGhJbmRpY2F0b3JEcmFnTGlzdGVuZXIuanMnO1xyXG5pbXBvcnQgR3JhcGhJbmRpY2F0b3JOb2RlIGZyb20gJy4vR3JhcGhJbmRpY2F0b3JOb2RlLmpzJztcclxuaW1wb3J0IEdyYXBoVW5pdHMgZnJvbSAnLi9HcmFwaFVuaXRzLmpzJztcclxuaW1wb3J0IEdyYXBoSW5kaWNhdG9yS2V5Ym9hcmREcmFnTGlzdGVuZXIgZnJvbSAnLi9HcmFwaEluZGljYXRvcktleWJvYXJkRHJhZ0xpc3RlbmVyLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIEZvciB0aGUgJ01pY3JvJyBzY3JlZW4sIHBIUHJvcGVydHkgaXMgcmVhZC1vbmx5LlxyXG4gIC8vIEZvciB0aGUgJ015IFNvbHV0aW9ucycgc2NyZWVuLCBwSFByb3BlcnR5IGlzIG11dGFibGUuXHJcbiAgLy8gVGhlIHR5cGUgb2YgcEhQcm9wZXJ0eSBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIExvZ2FyaXRobWljIGdyYXBoIGlzIGludGVyYWN0aXZlLlxyXG4gIHBIUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFBIVmFsdWU+IHwgUHJvcGVydHk8bnVtYmVyPjtcclxuXHJcbiAgLy8gc2NhbGVcclxuICBzY2FsZUhlaWdodD86IG51bWJlcjtcclxuICBtaW5TY2FsZVdpZHRoPzogbnVtYmVyO1xyXG4gIHNjYWxlWU1hcmdpbj86IG51bWJlcjsgLy8gc3BhY2UgYWJvdmUvYmVsb3cgdG9wL2JvdHRvbSB0aWNrIG1hcmtzXHJcbiAgc2NhbGVDb3JuZXJSYWRpdXM/OiBudW1iZXI7XHJcbiAgc2NhbGVTdHJva2U/OiBUQ29sb3I7XHJcbiAgc2NhbGVMaW5lV2lkdGg/OiBudW1iZXI7XHJcblxyXG4gIC8vIG1ham9yIHRpY2tzXHJcbiAgbWFqb3JUaWNrRm9udD86IEZvbnQ7XHJcbiAgbWFqb3JUaWNrU3Ryb2tlPzogVENvbG9yO1xyXG4gIG1ham9yVGlja0xlbmd0aD86IG51bWJlcjtcclxuICBtYWpvclRpY2tMaW5lV2lkdGg/OiBudW1iZXI7XHJcbiAgbWFqb3JUaWNrWFNwYWNpbmc/OiBudW1iZXI7XHJcblxyXG4gIC8vIG1pbm9yIHRpY2tzXHJcbiAgbWlub3JUaWNrU3Ryb2tlPzogVENvbG9yO1xyXG4gIG1pbm9yVGlja0xlbmd0aD86IG51bWJlcjtcclxuICBtaW5vclRpY2tMaW5lV2lkdGg/OiBudW1iZXI7XHJcblxyXG4gIC8vIGluZGljYXRvcnNcclxuICBpbmRpY2F0b3JYT2Zmc2V0PzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgTG9nYXJpdGhtaWNHcmFwaE5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2dhcml0aG1pY0dyYXBoTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRvdGFsVm9sdW1lUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBkZXJpdmVkUHJvcGVydGllczogU29sdXRpb25EZXJpdmVkUHJvcGVydGllcyxcclxuICAgICAgICAgICAgICAgICAgICAgIGdyYXBoVW5pdHNQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxHcmFwaFVuaXRzPixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogTG9nYXJpdGhtaWNHcmFwaE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TG9nYXJpdGhtaWNHcmFwaE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHNjYWxlSGVpZ2h0OiAxMDAsXHJcbiAgICAgIG1pblNjYWxlV2lkdGg6IDEwMCxcclxuICAgICAgc2NhbGVZTWFyZ2luOiAzMCxcclxuICAgICAgc2NhbGVDb3JuZXJSYWRpdXM6IDIwLFxyXG4gICAgICBzY2FsZVN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgc2NhbGVMaW5lV2lkdGg6IDIsXHJcbiAgICAgIG1ham9yVGlja0ZvbnQ6IG5ldyBQaGV0Rm9udCggMjIgKSxcclxuICAgICAgbWFqb3JUaWNrU3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBtYWpvclRpY2tMZW5ndGg6IDE1LFxyXG4gICAgICBtYWpvclRpY2tMaW5lV2lkdGg6IDEsXHJcbiAgICAgIG1ham9yVGlja1hTcGFjaW5nOiA1LFxyXG4gICAgICBtaW5vclRpY2tTdHJva2U6ICdibGFjaycsXHJcbiAgICAgIG1pbm9yVGlja0xlbmd0aDogNyxcclxuICAgICAgbWlub3JUaWNrTGluZVdpZHRoOiAxLFxyXG4gICAgICBpbmRpY2F0b3JYT2Zmc2V0OiAxMCxcclxuXHJcbiAgICAgIC8vIE5vZGVPcHRpb25zXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHtcclxuICAgICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGNvbnN0IGlzSW50ZXJhY3RpdmUgPSBvcHRpb25zLnBIUHJvcGVydHkgaW5zdGFuY2VvZiBQcm9wZXJ0eTtcclxuXHJcbiAgICAvLyBiYWNrZ3JvdW5kIGZvciB0aGUgc2NhbGUsIHdpZHRoIHNpemVkIHRvIGZpdFxyXG4gICAgY29uc3Qgd2lkZXN0VGlja0xhYmVsID0gY3JlYXRlVGlja0xhYmVsKCBQSFNjYWxlQ29uc3RhbnRzLkxPR0FSSVRITUlDX0VYUE9ORU5UX1JBTkdFLm1pbiwgb3B0aW9ucy5tYWpvclRpY2tGb250ICk7XHJcbiAgICBjb25zdCBzY2FsZVdpZHRoID0gTWF0aC5tYXgoIG9wdGlvbnMubWluU2NhbGVXaWR0aCwgd2lkZXN0VGlja0xhYmVsLndpZHRoICsgKCAyICogb3B0aW9ucy5tYWpvclRpY2tYU3BhY2luZyApICsgKCAyICogb3B0aW9ucy5tYWpvclRpY2tMZW5ndGggKSApO1xyXG4gICAgY29uc3QgYmFja2dyb3VuZE5vZGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCBzY2FsZVdpZHRoLCBvcHRpb25zLnNjYWxlSGVpZ2h0LCBvcHRpb25zLnNjYWxlQ29ybmVyUmFkaXVzLCBvcHRpb25zLnNjYWxlQ29ybmVyUmFkaXVzLCB7XHJcbiAgICAgIGZpbGw6IG5ldyBMaW5lYXJHcmFkaWVudCggMCwgMCwgMCwgb3B0aW9ucy5zY2FsZUhlaWdodCApLmFkZENvbG9yU3RvcCggMCwgJ3JnYiggMjAwLCAyMDAsIDIwMCApJyApLmFkZENvbG9yU3RvcCggMSwgJ3doaXRlJyApLFxyXG4gICAgICBzdHJva2U6IG9wdGlvbnMuc2NhbGVTdHJva2UsXHJcbiAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5zY2FsZUxpbmVXaWR0aFxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggYmFja2dyb3VuZE5vZGUgKTtcclxuXHJcbiAgICAvLyB0aWNrIG1hcmtzXHJcbiAgICBjb25zdCBudW1iZXJPZlRpY2tzID0gUEhTY2FsZUNvbnN0YW50cy5MT0dBUklUSE1JQ19FWFBPTkVOVF9SQU5HRS5nZXRMZW5ndGgoKSArIDE7XHJcbiAgICBjb25zdCB5U3BhY2luZyA9ICggb3B0aW9ucy5zY2FsZUhlaWdodCAtICggMiAqIG9wdGlvbnMuc2NhbGVZTWFyZ2luICkgKSAvICggbnVtYmVyT2ZUaWNrcyAtIDEgKTsgLy8gdmVydGljYWwgc3BhY2UgYmV0d2VlbiB0aWNrc1xyXG4gICAgbGV0IGV4cG9uZW50O1xyXG4gICAgbGV0IHRpY2tMYWJlbDtcclxuICAgIGxldCB0aWNrTGluZUxlZnQ7XHJcbiAgICBsZXQgdGlja0xpbmVSaWdodDtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG51bWJlck9mVGlja3M7IGkrKyApIHtcclxuXHJcbiAgICAgIGV4cG9uZW50ID0gUEhTY2FsZUNvbnN0YW50cy5MT0dBUklUSE1JQ19FWFBPTkVOVF9SQU5HRS5tYXggLSBpO1xyXG5cclxuICAgICAgLy8gbWFqb3IgdGlja3MgYXQgZXZlbi1udW1iZXJlZCBleHBvbmVudHNcclxuICAgICAgaWYgKCBleHBvbmVudCAlIDIgPT09IDAgKSB7XHJcblxyXG4gICAgICAgIC8vIG1ham9yIGxpbmVzIGFuZCBsYWJlbFxyXG4gICAgICAgIHRpY2tMaW5lTGVmdCA9IG5ldyBMaW5lKCAwLCAwLCBvcHRpb25zLm1ham9yVGlja0xlbmd0aCwgMCwge1xyXG4gICAgICAgICAgc3Ryb2tlOiBvcHRpb25zLm1ham9yVGlja1N0cm9rZSxcclxuICAgICAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5tYWpvclRpY2tMaW5lV2lkdGhcclxuICAgICAgICB9ICk7XHJcbiAgICAgICAgdGlja0xpbmVSaWdodCA9IG5ldyBMaW5lKCAwLCAwLCBvcHRpb25zLm1ham9yVGlja0xlbmd0aCwgMCwge1xyXG4gICAgICAgICAgc3Ryb2tlOiBvcHRpb25zLm1ham9yVGlja1N0cm9rZSxcclxuICAgICAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5tYWpvclRpY2tMaW5lV2lkdGhcclxuICAgICAgICB9ICk7XHJcbiAgICAgICAgdGlja0xhYmVsID0gY3JlYXRlVGlja0xhYmVsKCBleHBvbmVudCwgb3B0aW9ucy5tYWpvclRpY2tGb250ICk7XHJcblxyXG4gICAgICAgIC8vIHJlbmRlcmluZyBvcmRlclxyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoIHRpY2tMaW5lTGVmdCApO1xyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoIHRpY2tMaW5lUmlnaHQgKTtcclxuICAgICAgICB0aGlzLmFkZENoaWxkKCB0aWNrTGFiZWwgKTtcclxuXHJcbiAgICAgICAgLy8gbGF5b3V0XHJcbiAgICAgICAgdGlja0xpbmVMZWZ0LmxlZnQgPSBiYWNrZ3JvdW5kTm9kZS5sZWZ0O1xyXG4gICAgICAgIHRpY2tMaW5lTGVmdC5jZW50ZXJZID0gb3B0aW9ucy5zY2FsZVlNYXJnaW4gKyAoIGkgKiB5U3BhY2luZyApO1xyXG4gICAgICAgIHRpY2tMaW5lUmlnaHQucmlnaHQgPSBiYWNrZ3JvdW5kTm9kZS5yaWdodDtcclxuICAgICAgICB0aWNrTGluZVJpZ2h0LmNlbnRlclkgPSB0aWNrTGluZUxlZnQuY2VudGVyWTtcclxuICAgICAgICB0aWNrTGFiZWwuY2VudGVyWCA9IGJhY2tncm91bmROb2RlLmNlbnRlclg7XHJcbiAgICAgICAgdGlja0xhYmVsLmNlbnRlclkgPSB0aWNrTGluZUxlZnQuY2VudGVyWTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAvLyBtaW5vciBsaW5lc1xyXG4gICAgICAgIHRpY2tMaW5lTGVmdCA9IG5ldyBMaW5lKCAwLCAwLCBvcHRpb25zLm1pbm9yVGlja0xlbmd0aCwgMCwge1xyXG4gICAgICAgICAgc3Ryb2tlOiBvcHRpb25zLm1pbm9yVGlja1N0cm9rZSxcclxuICAgICAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5taW5vclRpY2tMaW5lV2lkdGhcclxuICAgICAgICB9ICk7XHJcbiAgICAgICAgdGlja0xpbmVSaWdodCA9IG5ldyBMaW5lKCAwLCAwLCBvcHRpb25zLm1pbm9yVGlja0xlbmd0aCwgMCwge1xyXG4gICAgICAgICAgc3Ryb2tlOiBvcHRpb25zLm1pbm9yVGlja1N0cm9rZSxcclxuICAgICAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5taW5vclRpY2tMaW5lV2lkdGhcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgIC8vIHJlbmRlcmluZyBvcmRlclxyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoIHRpY2tMaW5lTGVmdCApO1xyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoIHRpY2tMaW5lUmlnaHQgKTtcclxuXHJcbiAgICAgICAgLy8gbGF5b3V0XHJcbiAgICAgICAgdGlja0xpbmVMZWZ0LmxlZnQgPSBiYWNrZ3JvdW5kTm9kZS5sZWZ0O1xyXG4gICAgICAgIHRpY2tMaW5lTGVmdC5jZW50ZXJZID0gb3B0aW9ucy5zY2FsZVlNYXJnaW4gKyAoIGkgKiB5U3BhY2luZyApO1xyXG4gICAgICAgIHRpY2tMaW5lUmlnaHQucmlnaHQgPSBiYWNrZ3JvdW5kTm9kZS5yaWdodDtcclxuICAgICAgICB0aWNrTGluZVJpZ2h0LmNlbnRlclkgPSB0aWNrTGluZUxlZnQuY2VudGVyWTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFZhbHVlcyBkaXNwbGF5ZWQgb24gdGhlIGluZGljYXRvcnNcclxuICAgIGNvbnN0IHZhbHVlSDJPUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIGRlcml2ZWRQcm9wZXJ0aWVzLmNvbmNlbnRyYXRpb25IMk9Qcm9wZXJ0eSwgZGVyaXZlZFByb3BlcnRpZXMucXVhbnRpdHlIMk9Qcm9wZXJ0eSwgZ3JhcGhVbml0c1Byb3BlcnR5IF0sXHJcbiAgICAgICggY29uY2VudHJhdGlvbiwgcXVhbnRpdHksIGdyYXBoVW5pdHMgKSA9PlxyXG4gICAgICAgICggZ3JhcGhVbml0cyA9PT0gR3JhcGhVbml0cy5NT0xFU19QRVJfTElURVIgKSA/IGNvbmNlbnRyYXRpb24gOiBxdWFudGl0eVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHZhbHVlSDNPUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIGRlcml2ZWRQcm9wZXJ0aWVzLmNvbmNlbnRyYXRpb25IM09Qcm9wZXJ0eSwgZGVyaXZlZFByb3BlcnRpZXMucXVhbnRpdHlIM09Qcm9wZXJ0eSwgZ3JhcGhVbml0c1Byb3BlcnR5IF0sXHJcbiAgICAgICggY29uY2VudHJhdGlvbiwgcXVhbnRpdHksIGdyYXBoVW5pdHMgKSA9PlxyXG4gICAgICAgICggZ3JhcGhVbml0cyA9PT0gR3JhcGhVbml0cy5NT0xFU19QRVJfTElURVIgKSA/IGNvbmNlbnRyYXRpb24gOiBxdWFudGl0eVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHZhbHVlT0hQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgZGVyaXZlZFByb3BlcnRpZXMuY29uY2VudHJhdGlvbk9IUHJvcGVydHksIGRlcml2ZWRQcm9wZXJ0aWVzLnF1YW50aXR5T0hQcm9wZXJ0eSwgZ3JhcGhVbml0c1Byb3BlcnR5IF0sXHJcbiAgICAgICggY29uY2VudHJhdGlvbiwgcXVhbnRpdHksIGdyYXBoVW5pdHMgKSA9PlxyXG4gICAgICAgICggZ3JhcGhVbml0cyA9PT0gR3JhcGhVbml0cy5NT0xFU19QRVJfTElURVIgKSA/IGNvbmNlbnRyYXRpb24gOiBxdWFudGl0eVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBpbmRpY2F0b3JzXHJcbiAgICBjb25zdCBpbmRpY2F0b3JIMk9Ob2RlID0gR3JhcGhJbmRpY2F0b3JOb2RlLmNyZWF0ZUgyT0luZGljYXRvciggdmFsdWVIMk9Qcm9wZXJ0eSwge1xyXG4gICAgICB4OiBiYWNrZ3JvdW5kTm9kZS5yaWdodCAtIG9wdGlvbnMuaW5kaWNhdG9yWE9mZnNldCxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdpbmRpY2F0b3JIMk9Ob2RlJyApXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBpbmRpY2F0b3JIM09Ob2RlID0gR3JhcGhJbmRpY2F0b3JOb2RlLmNyZWF0ZUgzT0luZGljYXRvciggdmFsdWVIM09Qcm9wZXJ0eSwge1xyXG4gICAgICB4OiBiYWNrZ3JvdW5kTm9kZS5sZWZ0ICsgb3B0aW9ucy5pbmRpY2F0b3JYT2Zmc2V0LFxyXG4gICAgICBpc0ludGVyYWN0aXZlOiBpc0ludGVyYWN0aXZlLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2luZGljYXRvckgzT05vZGUnIClcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGluZGljYXRvck9ITm9kZSA9IEdyYXBoSW5kaWNhdG9yTm9kZS5jcmVhdGVPSEluZGljYXRvciggdmFsdWVPSFByb3BlcnR5LCB7XHJcbiAgICAgIHg6IGJhY2tncm91bmROb2RlLnJpZ2h0IC0gb3B0aW9ucy5pbmRpY2F0b3JYT2Zmc2V0LFxyXG4gICAgICBpc0ludGVyYWN0aXZlOiBpc0ludGVyYWN0aXZlLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2luZGljYXRvck9ITm9kZScgKVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggaW5kaWNhdG9ySDJPTm9kZSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggaW5kaWNhdG9ySDNPTm9kZSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggaW5kaWNhdG9yT0hOb2RlICk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHZhbHVlLCBjb21wdXRlIGl0J3MgeSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgdG9wIG9mIHRoZSBzY2FsZS5cclxuICAgICAqL1xyXG4gICAgY29uc3QgdmFsdWVUb1kgPSAoIHZhbHVlOiBudW1iZXIgfCBudWxsICkgPT4ge1xyXG4gICAgICBpZiAoIHZhbHVlID09PSAwIHx8IHZhbHVlID09PSBudWxsICkge1xyXG4gICAgICAgIC8vIGJlbG93IHRoZSBib3R0b20gdGlja1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zLnNjYWxlSGVpZ2h0IC0gKCAwLjUgKiBvcHRpb25zLnNjYWxlWU1hcmdpbiApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIHRvcCBhbmQgYm90dG9tIHRpY2tcclxuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSAoIG9wdGlvbnMuc2NhbGVIZWlnaHQgLSAyICogb3B0aW9ucy5zY2FsZVlNYXJnaW4gKTtcclxuICAgICAgICBjb25zdCBtYXhFeHBvbmVudCA9IFBIU2NhbGVDb25zdGFudHMuTE9HQVJJVEhNSUNfRVhQT05FTlRfUkFOR0UubWF4O1xyXG4gICAgICAgIGNvbnN0IG1pbkV4cG9uZW50ID0gUEhTY2FsZUNvbnN0YW50cy5MT0dBUklUSE1JQ19FWFBPTkVOVF9SQU5HRS5taW47XHJcbiAgICAgICAgY29uc3QgdmFsdWVFeHBvbmVudCA9IFV0aWxzLmxvZzEwKCB2YWx1ZSApO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zLnNjYWxlWU1hcmdpbiArIG1heEhlaWdodCAtICggbWF4SGVpZ2h0ICogKCB2YWx1ZUV4cG9uZW50IC0gbWluRXhwb25lbnQgKSAvICggbWF4RXhwb25lbnQgLSBtaW5FeHBvbmVudCApICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gR2l2ZW4gYSB5IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSB0b3Agb2YgdGhlIHNjYWxlLCBjb21wdXRlIGEgdmFsdWUuXHJcbiAgICBjb25zdCB5VG9WYWx1ZSA9ICggeTogbnVtYmVyICkgPT4ge1xyXG4gICAgICBjb25zdCB5T2Zmc2V0ID0geSAtIG9wdGlvbnMuc2NhbGVZTWFyZ2luOyAvLyBkaXN0YW5jZSBiZXR3ZWVuIGluZGljYXRvcidzIG9yaWdpbiBhbmQgdG9wIHRpY2sgbWFya1xyXG4gICAgICBjb25zdCBtYXhIZWlnaHQgPSAoIG9wdGlvbnMuc2NhbGVIZWlnaHQgLSAyICogb3B0aW9ucy5zY2FsZVlNYXJnaW4gKTsgLy8gZGlzdGFuY2UgYmV0d2VlbiB0b3AgYW5kIGJvdHRvbSB0aWNrIG1hcmtzXHJcbiAgICAgIGNvbnN0IGV4cG9uZW50ID0gVXRpbHMubGluZWFyKCAwLCBtYXhIZWlnaHQsIFBIU2NhbGVDb25zdGFudHMuTE9HQVJJVEhNSUNfRVhQT05FTlRfUkFOR0UubWF4LCBQSFNjYWxlQ29uc3RhbnRzLkxPR0FSSVRITUlDX0VYUE9ORU5UX1JBTkdFLm1pbiwgeU9mZnNldCApO1xyXG4gICAgICByZXR1cm4gTWF0aC5wb3coIDEwLCBleHBvbmVudCApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNb3ZlIHRoZSBpbmRpY2F0b3JzXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHZhbHVlSDJPUHJvcGVydHksIGdyYXBoVW5pdHNQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHZhbHVlSDJPLCBncmFwaFVuaXRzICkgPT4ge1xyXG4gICAgICAgIGluZGljYXRvckgyT05vZGUueSA9IHZhbHVlVG9ZKCB2YWx1ZUgyTyApO1xyXG4gICAgICB9ICk7XHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHZhbHVlSDNPUHJvcGVydHksIGdyYXBoVW5pdHNQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHZhbHVlSDNPLCBncmFwaFVuaXRzICkgPT4ge1xyXG4gICAgICAgIGluZGljYXRvckgzT05vZGUueSA9IHZhbHVlVG9ZKCB2YWx1ZUgzTyApO1xyXG4gICAgICB9ICk7XHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHZhbHVlT0hQcm9wZXJ0eSwgZ3JhcGhVbml0c1Byb3BlcnR5IF0sXHJcbiAgICAgICggdmFsdWVPSCwgZ3JhcGhVbml0cyApID0+IHtcclxuICAgICAgICBpbmRpY2F0b3JPSE5vZGUueSA9IHZhbHVlVG9ZKCB2YWx1ZU9IICk7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAvLyBBZGQgZHJhZyBoYW5kbGVycyBmb3IgSDNPKyBhbmQgT0gtXHJcbiAgICBpZiAoIGlzSW50ZXJhY3RpdmUgKSB7XHJcbiAgICAgIGNvbnN0IHBIUHJvcGVydHkgPSBvcHRpb25zLnBIUHJvcGVydHkgYXMgUHJvcGVydHk8bnVtYmVyPjtcclxuXHJcbiAgICAgIC8vIEgzTysgaW5kaWNhdG9yXHJcbiAgICAgIGluZGljYXRvckgzT05vZGUuY3Vyc29yID0gJ3BvaW50ZXInO1xyXG4gICAgICBpbmRpY2F0b3JIM09Ob2RlLmFkZElucHV0TGlzdGVuZXIoXHJcbiAgICAgICAgbmV3IEdyYXBoSW5kaWNhdG9yRHJhZ0xpc3RlbmVyKCBpbmRpY2F0b3JIM09Ob2RlLCBwSFByb3BlcnR5LCB0b3RhbFZvbHVtZVByb3BlcnR5LCBncmFwaFVuaXRzUHJvcGVydHksIHlUb1ZhbHVlLFxyXG4gICAgICAgICAgUEhNb2RlbC5jb25jZW50cmF0aW9uSDNPVG9QSCwgUEhNb2RlbC5tb2xlc0gzT1RvUEgsXHJcbiAgICAgICAgICAoKSA9PiBpbmRpY2F0b3JPSE5vZGUuaW50ZXJydXB0U3VidHJlZUlucHV0KCksIC8vIGRyYWdnaW5nIGlzIG11dHVhbGx5IGV4Y2x1c2l2ZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9waC1zY2FsZS9pc3N1ZXMvMjYxXHJcbiAgICAgICAgICBpbmRpY2F0b3JIM09Ob2RlLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdkcmFnTGlzdGVuZXInIClcclxuICAgICAgICApICk7XHJcbiAgICAgIGluZGljYXRvckgzT05vZGUuYWRkSW5wdXRMaXN0ZW5lcihcclxuICAgICAgICBuZXcgR3JhcGhJbmRpY2F0b3JLZXlib2FyZERyYWdMaXN0ZW5lciggaW5kaWNhdG9ySDNPTm9kZSwgcEhQcm9wZXJ0eSwgdG90YWxWb2x1bWVQcm9wZXJ0eSwgZ3JhcGhVbml0c1Byb3BlcnR5LCB5VG9WYWx1ZSxcclxuICAgICAgICAgIFBITW9kZWwuY29uY2VudHJhdGlvbkgzT1RvUEgsIFBITW9kZWwubW9sZXNIM09Ub1BILCBpbmRpY2F0b3JIM09Ob2RlLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdrZXlib2FyZERyYWdMaXN0ZW5lcicgKVxyXG4gICAgICAgICkgKTtcclxuXHJcbiAgICAgIC8vIE9ILSBpbmRpY2F0b3JcclxuICAgICAgaW5kaWNhdG9yT0hOb2RlLmN1cnNvciA9ICdwb2ludGVyJztcclxuICAgICAgaW5kaWNhdG9yT0hOb2RlLmFkZElucHV0TGlzdGVuZXIoXHJcbiAgICAgICAgbmV3IEdyYXBoSW5kaWNhdG9yRHJhZ0xpc3RlbmVyKCBpbmRpY2F0b3JPSE5vZGUsIHBIUHJvcGVydHksIHRvdGFsVm9sdW1lUHJvcGVydHksIGdyYXBoVW5pdHNQcm9wZXJ0eSwgeVRvVmFsdWUsXHJcbiAgICAgICAgICBQSE1vZGVsLmNvbmNlbnRyYXRpb25PSFRvUEgsIFBITW9kZWwubW9sZXNPSFRvUEgsXHJcbiAgICAgICAgICAoKSA9PiBpbmRpY2F0b3JIM09Ob2RlLmludGVycnVwdFN1YnRyZWVJbnB1dCgpLCAvLyBkcmFnZ2luZyBpcyBtdXR1YWxseSBleGNsdXNpdmUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGgtc2NhbGUvaXNzdWVzLzI2MVxyXG4gICAgICAgICAgaW5kaWNhdG9yT0hOb2RlLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdkcmFnTGlzdGVuZXInIClcclxuICAgICAgICApICk7XHJcbiAgICAgIGluZGljYXRvck9ITm9kZS5hZGRJbnB1dExpc3RlbmVyKFxyXG4gICAgICAgIG5ldyBHcmFwaEluZGljYXRvcktleWJvYXJkRHJhZ0xpc3RlbmVyKCBpbmRpY2F0b3JPSE5vZGUsIHBIUHJvcGVydHksIHRvdGFsVm9sdW1lUHJvcGVydHksIGdyYXBoVW5pdHNQcm9wZXJ0eSwgeVRvVmFsdWUsXHJcbiAgICAgICAgICBQSE1vZGVsLmNvbmNlbnRyYXRpb25PSFRvUEgsIFBITW9kZWwubW9sZXNPSFRvUEgsXHJcbiAgICAgICAgICBpbmRpY2F0b3JPSE5vZGUudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2tleWJvYXJkRHJhZ0xpc3RlbmVyJyApXHJcbiAgICAgICAgKSApO1xyXG5cclxuICAgICAgLy8ga2V5Ym9hcmQgdHJhdmVyc2FsIG9yZGVyLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoLXNjYWxlL2lzc3Vlcy8yNDlcclxuICAgICAgdGhpcy5wZG9tT3JkZXIgPSBbXHJcbiAgICAgICAgaW5kaWNhdG9ySDNPTm9kZSxcclxuICAgICAgICBpbmRpY2F0b3JPSE5vZGVcclxuICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSB0aWNrIGxhYmVsLCAnMTAnIHRvIHNvbWUgZXhwb25lbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVUaWNrTGFiZWwoIGV4cG9uZW50OiBudW1iZXIsIGZvbnQ6IEZvbnQgKTogTm9kZSB7XHJcbiAgcmV0dXJuIG5ldyBSaWNoVGV4dCggYDEwPHN1cD4ke2V4cG9uZW50fTwvc3VwPmAsIHtcclxuICAgIGZvbnQ6IGZvbnQsXHJcbiAgICBmaWxsOiAnYmxhY2snXHJcbiAgfSApO1xyXG59XHJcblxyXG5waFNjYWxlLnJlZ2lzdGVyKCAnTG9nYXJpdGhtaWNHcmFwaE5vZGUnLCBMb2dhcml0aG1pY0dyYXBoTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMkNBQTJDO0FBRXZFLE9BQU9DLFNBQVMsTUFBTSxxQ0FBcUM7QUFDM0QsT0FBT0MsUUFBUSxNQUFNLG9DQUFvQztBQUV6RCxPQUFPQyxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELE9BQU9DLFNBQVMsTUFBTSwwQ0FBMEM7QUFFaEUsT0FBT0MsUUFBUSxNQUFNLDRDQUE0QztBQUNqRSxTQUFlQyxJQUFJLEVBQUVDLGNBQWMsRUFBRUMsSUFBSSxFQUF1Q0MsU0FBUyxFQUFFQyxRQUFRLFFBQWdCLHNDQUFzQztBQUN6SixPQUFPQyxPQUFPLE1BQU0scUJBQXFCO0FBQ3pDLE9BQU9DLE9BQU8sTUFBbUIsd0JBQXdCO0FBRXpELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQywwQkFBMEIsTUFBTSxpQ0FBaUM7QUFDeEUsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBQ3hELE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFDeEMsT0FBT0Msa0NBQWtDLE1BQU0seUNBQXlDO0FBbUN4RixlQUFlLE1BQU1DLG9CQUFvQixTQUFTVixJQUFJLENBQUM7RUFFOUNXLFdBQVdBLENBQUVDLG1CQUE4QyxFQUM5Q0MsaUJBQTRDLEVBQzVDQyxrQkFBbUQsRUFDbkRDLGVBQTRDLEVBQUc7SUFFakUsTUFBTUMsT0FBTyxHQUFHcEIsU0FBUyxDQUF3RCxDQUFDLENBQUU7TUFFbEY7TUFDQXFCLFdB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