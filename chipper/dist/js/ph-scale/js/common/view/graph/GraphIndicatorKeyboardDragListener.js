// Copyright 2022, University of Colorado Boulder

/**
 * Keyboard drag handler for the interactive graph indicators.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { KeyboardDragListener } from '../../../../../scenery/js/imports.js';
import phScale from '../../../phScale.js';
import GraphIndicatorDragListener from './GraphIndicatorDragListener.js';
export default class GraphIndicatorKeyboardDragListener extends KeyboardDragListener {
  /**
   * @param targetNode
   * @param pHProperty - pH of the solution
   * @param totalVolumeProperty - volume of the solution
   * @param graphUnitsProperty
   * @param yToValue - converts a y view coordinate to a model value
   * @param concentrationToPH - converts concentration to pH
   * @param molesToPH - converts moles + volume to pH
   * @param tandem
   */
  constructor(targetNode, pHProperty, totalVolumeProperty, graphUnitsProperty, yToValue, concentrationToPH, molesToPH, tandem) {
    super({
      keyboardDragDirection: 'upDown',
      // constrained to vertical dragging
      drag: viewDelta => GraphIndicatorDragListener.doDrag(targetNode.y + viewDelta.y, targetNode, pHProperty, totalVolumeProperty.value, graphUnitsProperty.value, yToValue, concentrationToPH, molesToPH),
      // Velocity of the Node being dragged, in view coordinates per second.
      dragVelocity: 300,
      // Velocity with the Shift key pressed, typically slower than dragVelocity.
      // Careful! If this value is too small, the indicator will not move, due to the precision of the value.
      shiftDragVelocity: 40,
      tandem: tandem
    });
  }
}
phScale.register('GraphIndicatorKeyboardDragListener', GraphIndicatorKeyboardDragListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJLZXlib2FyZERyYWdMaXN0ZW5lciIsInBoU2NhbGUiLCJHcmFwaEluZGljYXRvckRyYWdMaXN0ZW5lciIsIkdyYXBoSW5kaWNhdG9yS2V5Ym9hcmREcmFnTGlzdGVuZXIiLCJjb25zdHJ1Y3RvciIsInRhcmdldE5vZGUiLCJwSFByb3BlcnR5IiwidG90YWxWb2x1bWVQcm9wZXJ0eSIsImdyYXBoVW5pdHNQcm9wZXJ0eSIsInlUb1ZhbHVlIiwiY29uY2VudHJhdGlvblRvUEgiLCJtb2xlc1RvUEgiLCJ0YW5kZW0iLCJrZXlib2FyZERyYWdEaXJlY3Rpb24iLCJkcmFnIiwidmlld0RlbHRhIiwiZG9EcmFnIiwieSIsInZhbHVlIiwiZHJhZ1ZlbG9jaXR5Iiwic2hpZnREcmFnVmVsb2NpdHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyYXBoSW5kaWNhdG9yS2V5Ym9hcmREcmFnTGlzdGVuZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEtleWJvYXJkIGRyYWcgaGFuZGxlciBmb3IgdGhlIGludGVyYWN0aXZlIGdyYXBoIGluZGljYXRvcnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgS2V5Ym9hcmREcmFnTGlzdGVuZXIsIE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgcGhTY2FsZSBmcm9tICcuLi8uLi8uLi9waFNjYWxlLmpzJztcclxuaW1wb3J0IEdyYXBoVW5pdHMgZnJvbSAnLi9HcmFwaFVuaXRzLmpzJztcclxuaW1wb3J0IHsgQ29uY2VudHJhdGlvblZhbHVlLCBQSFZhbHVlIH0gZnJvbSAnLi4vLi4vbW9kZWwvUEhNb2RlbC5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgR3JhcGhJbmRpY2F0b3JEcmFnTGlzdGVuZXIgZnJvbSAnLi9HcmFwaEluZGljYXRvckRyYWdMaXN0ZW5lci5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFwaEluZGljYXRvcktleWJvYXJkRHJhZ0xpc3RlbmVyIGV4dGVuZHMgS2V5Ym9hcmREcmFnTGlzdGVuZXIge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gdGFyZ2V0Tm9kZVxyXG4gICAqIEBwYXJhbSBwSFByb3BlcnR5IC0gcEggb2YgdGhlIHNvbHV0aW9uXHJcbiAgICogQHBhcmFtIHRvdGFsVm9sdW1lUHJvcGVydHkgLSB2b2x1bWUgb2YgdGhlIHNvbHV0aW9uXHJcbiAgICogQHBhcmFtIGdyYXBoVW5pdHNQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB5VG9WYWx1ZSAtIGNvbnZlcnRzIGEgeSB2aWV3IGNvb3JkaW5hdGUgdG8gYSBtb2RlbCB2YWx1ZVxyXG4gICAqIEBwYXJhbSBjb25jZW50cmF0aW9uVG9QSCAtIGNvbnZlcnRzIGNvbmNlbnRyYXRpb24gdG8gcEhcclxuICAgKiBAcGFyYW0gbW9sZXNUb1BIIC0gY29udmVydHMgbW9sZXMgKyB2b2x1bWUgdG8gcEhcclxuICAgKiBAcGFyYW0gdGFuZGVtXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YXJnZXROb2RlOiBOb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcEhQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPixcclxuICAgICAgICAgICAgICAgICAgICAgIHRvdGFsVm9sdW1lUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBncmFwaFVuaXRzUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8R3JhcGhVbml0cz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICB5VG9WYWx1ZTogKCB5OiBudW1iZXIgKSA9PiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjb25jZW50cmF0aW9uVG9QSDogKCBjb25jZW50cmF0aW9uOiBDb25jZW50cmF0aW9uVmFsdWUgKSA9PiBQSFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9sZXNUb1BIOiAoIG1vbGVzOiBudW1iZXIsIHZvbHVtZTogbnVtYmVyICkgPT4gUEhWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgIHRhbmRlbTogVGFuZGVtICkge1xyXG4gICAgc3VwZXIoIHtcclxuICAgICAga2V5Ym9hcmREcmFnRGlyZWN0aW9uOiAndXBEb3duJywgLy8gY29uc3RyYWluZWQgdG8gdmVydGljYWwgZHJhZ2dpbmdcclxuICAgICAgZHJhZzogdmlld0RlbHRhID0+IEdyYXBoSW5kaWNhdG9yRHJhZ0xpc3RlbmVyLmRvRHJhZyggdGFyZ2V0Tm9kZS55ICsgdmlld0RlbHRhLnksIHRhcmdldE5vZGUsIHBIUHJvcGVydHksXHJcbiAgICAgICAgdG90YWxWb2x1bWVQcm9wZXJ0eS52YWx1ZSwgZ3JhcGhVbml0c1Byb3BlcnR5LnZhbHVlLCB5VG9WYWx1ZSwgY29uY2VudHJhdGlvblRvUEgsIG1vbGVzVG9QSCApLFxyXG5cclxuICAgICAgLy8gVmVsb2NpdHkgb2YgdGhlIE5vZGUgYmVpbmcgZHJhZ2dlZCwgaW4gdmlldyBjb29yZGluYXRlcyBwZXIgc2Vjb25kLlxyXG4gICAgICBkcmFnVmVsb2NpdHk6IDMwMCxcclxuXHJcbiAgICAgIC8vIFZlbG9jaXR5IHdpdGggdGhlIFNoaWZ0IGtleSBwcmVzc2VkLCB0eXBpY2FsbHkgc2xvd2VyIHRoYW4gZHJhZ1ZlbG9jaXR5LlxyXG4gICAgICAvLyBDYXJlZnVsISBJZiB0aGlzIHZhbHVlIGlzIHRvbyBzbWFsbCwgdGhlIGluZGljYXRvciB3aWxsIG5vdCBtb3ZlLCBkdWUgdG8gdGhlIHByZWNpc2lvbiBvZiB0aGUgdmFsdWUuXHJcbiAgICAgIHNoaWZ0RHJhZ1ZlbG9jaXR5OiA0MCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbnBoU2NhbGUucmVnaXN0ZXIoICdHcmFwaEluZGljYXRvcktleWJvYXJkRHJhZ0xpc3RlbmVyJywgR3JhcGhJbmRpY2F0b3JLZXlib2FyZERyYWdMaXN0ZW5lciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxvQkFBb0IsUUFBYyxzQ0FBc0M7QUFFakYsT0FBT0MsT0FBTyxNQUFNLHFCQUFxQjtBQU16QyxPQUFPQywwQkFBMEIsTUFBTSxpQ0FBaUM7QUFFeEUsZUFBZSxNQUFNQyxrQ0FBa0MsU0FBU0gsb0JBQW9CLENBQUM7RUFFbkY7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsVUFBZ0IsRUFDaEJDLFVBQTRCLEVBQzVCQyxtQkFBOEMsRUFDOUNDLGtCQUFtRCxFQUNuREMsUUFBaUMsRUFDakNDLGlCQUFtRSxFQUNuRUMsU0FBdUQsRUFDdkRDLE1BQWMsRUFBRztJQUNuQyxLQUFLLENBQUU7TUFDTEMscUJBQXFCLEVBQUUsUUFBUTtNQUFFO01BQ2pDQyxJQUFJLEVBQUVDLFNBQVMsSUFBSWIsMEJBQTBCLENBQUNjLE1BQU0sQ0FBRVgsVUFBVSxDQUFDWSxDQUFDLEdBQUdGLFNBQVMsQ0FBQ0UsQ0FBQyxFQUFFWixVQUFVLEVBQUVDLFVBQVUsRUFDdEdDLG1CQUFtQixDQUFDVyxLQUFLLEVBQUVWLGtCQUFrQixDQUFDVSxLQUFLLEVBQUVULFFBQVEsRUFBRUMsaUJBQWlCLEVBQUVDLFNBQVUsQ0FBQztNQUUvRjtNQUNBUSxZQUFZLEVBQUUsR0FBRztNQUVqQjtNQUNBO01BQ0FDLGlCQUFpQixFQUFFLEVBQUU7TUFDckJSLE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFYLE9BQU8sQ0FBQ29CLFFBQVEsQ0FBRSxvQ0FBb0MsRUFBRWxCLGtDQUFtQyxDQUFDIn0=