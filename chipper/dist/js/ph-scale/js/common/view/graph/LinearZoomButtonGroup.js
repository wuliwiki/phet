// Copyright 2020-2022, University of Colorado Boulder

/**
 * LinearZoomButtonGroup is the group of zoom button for the 'Linear' graph.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../../axon/js/NumberProperty.js';
import Range from '../../../../../dot/js/Range.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import MagnifyingGlassZoomButtonGroup from '../../../../../scenery-phet/js/MagnifyingGlassZoomButtonGroup.js';
import phScale from '../../../phScale.js';
export default class LinearZoomButtonGroup extends MagnifyingGlassZoomButtonGroup {
  constructor(exponentProperty, providedOptions) {
    const options = optionize()({
      // MagnifyingGlassZoomButtonGroupOptions
      spacing: 25,
      magnifyingGlassNodeOptions: {
        glassRadius: 13
      }
    }, providedOptions);
    const range = exponentProperty.range;
    assert && assert(range, 'exponentProperty must have range');

    // For exponent, a smaller value means 'more zoomed in'.
    // For MagnifyingGlassZoomButtonGroup and zoomLevelProperty, a smaller value means 'more zoomed out'.
    // So this is a two-way conversion between exponent and zoom level, accomplished by inverting the sign.
    // We can't use DynamicProperty here because MagnifyingGlassZoomButtonGroup require a NumberProperty.
    const zoomLevelProperty = new NumberProperty(-exponentProperty.value, {
      numberType: 'Integer',
      range: new Range(-range.max, -range.min)
    });
    zoomLevelProperty.link(zoomLevel => {
      exponentProperty.value = -zoomLevel;
    });
    exponentProperty.link(exponent => {
      zoomLevelProperty.value = -exponent;
    });
    super(zoomLevelProperty, options);
  }
}
phScale.register('LinearZoomButtonGroup', LinearZoomButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwib3B0aW9uaXplIiwiTWFnbmlmeWluZ0dsYXNzWm9vbUJ1dHRvbkdyb3VwIiwicGhTY2FsZSIsIkxpbmVhclpvb21CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwiZXhwb25lbnRQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzcGFjaW5nIiwibWFnbmlmeWluZ0dsYXNzTm9kZU9wdGlvbnMiLCJnbGFzc1JhZGl1cyIsInJhbmdlIiwiYXNzZXJ0Iiwiem9vbUxldmVsUHJvcGVydHkiLCJ2YWx1ZSIsIm51bWJlclR5cGUiLCJtYXgiLCJtaW4iLCJsaW5rIiwiem9vbUxldmVsIiwiZXhwb25lbnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxpbmVhclpvb21CdXR0b25Hcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMaW5lYXJab29tQnV0dG9uR3JvdXAgaXMgdGhlIGdyb3VwIG9mIHpvb20gYnV0dG9uIGZvciB0aGUgJ0xpbmVhcicgZ3JhcGguXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBNYWduaWZ5aW5nR2xhc3Nab29tQnV0dG9uR3JvdXAsIHsgTWFnbmlmeWluZ0dsYXNzWm9vbUJ1dHRvbkdyb3VwT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9NYWduaWZ5aW5nR2xhc3Nab29tQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHBoU2NhbGUgZnJvbSAnLi4vLi4vLi4vcGhTY2FsZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgTGluZWFyWm9vbUJ1dHRvbkdyb3VwT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucyAmXHJcbiAgUGlja1JlcXVpcmVkPE1hZ25pZnlpbmdHbGFzc1pvb21CdXR0b25Hcm91cE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVhclpvb21CdXR0b25Hcm91cCBleHRlbmRzIE1hZ25pZnlpbmdHbGFzc1pvb21CdXR0b25Hcm91cCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZXhwb25lbnRQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHksIHByb3ZpZGVkT3B0aW9uczogTGluZWFyWm9vbUJ1dHRvbkdyb3VwT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPExpbmVhclpvb21CdXR0b25Hcm91cE9wdGlvbnMsIFNlbGZPcHRpb25zLCBNYWduaWZ5aW5nR2xhc3Nab29tQnV0dG9uR3JvdXBPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBNYWduaWZ5aW5nR2xhc3Nab29tQnV0dG9uR3JvdXBPcHRpb25zXHJcbiAgICAgIHNwYWNpbmc6IDI1LFxyXG4gICAgICBtYWduaWZ5aW5nR2xhc3NOb2RlT3B0aW9uczoge1xyXG4gICAgICAgIGdsYXNzUmFkaXVzOiAxM1xyXG4gICAgICB9XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCByYW5nZSA9IGV4cG9uZW50UHJvcGVydHkucmFuZ2U7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCByYW5nZSwgJ2V4cG9uZW50UHJvcGVydHkgbXVzdCBoYXZlIHJhbmdlJyApO1xyXG5cclxuICAgIC8vIEZvciBleHBvbmVudCwgYSBzbWFsbGVyIHZhbHVlIG1lYW5zICdtb3JlIHpvb21lZCBpbicuXHJcbiAgICAvLyBGb3IgTWFnbmlmeWluZ0dsYXNzWm9vbUJ1dHRvbkdyb3VwIGFuZCB6b29tTGV2ZWxQcm9wZXJ0eSwgYSBzbWFsbGVyIHZhbHVlIG1lYW5zICdtb3JlIHpvb21lZCBvdXQnLlxyXG4gICAgLy8gU28gdGhpcyBpcyBhIHR3by13YXkgY29udmVyc2lvbiBiZXR3ZWVuIGV4cG9uZW50IGFuZCB6b29tIGxldmVsLCBhY2NvbXBsaXNoZWQgYnkgaW52ZXJ0aW5nIHRoZSBzaWduLlxyXG4gICAgLy8gV2UgY2FuJ3QgdXNlIER5bmFtaWNQcm9wZXJ0eSBoZXJlIGJlY2F1c2UgTWFnbmlmeWluZ0dsYXNzWm9vbUJ1dHRvbkdyb3VwIHJlcXVpcmUgYSBOdW1iZXJQcm9wZXJ0eS5cclxuICAgIGNvbnN0IHpvb21MZXZlbFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCAtZXhwb25lbnRQcm9wZXJ0eS52YWx1ZSwge1xyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgIHJhbmdlOiBuZXcgUmFuZ2UoIC1yYW5nZS5tYXgsIC1yYW5nZS5taW4gKVxyXG4gICAgfSApO1xyXG4gICAgem9vbUxldmVsUHJvcGVydHkubGluayggem9vbUxldmVsID0+IHsgZXhwb25lbnRQcm9wZXJ0eS52YWx1ZSA9IC16b29tTGV2ZWw7IH0gKTtcclxuICAgIGV4cG9uZW50UHJvcGVydHkubGluayggZXhwb25lbnQgPT4geyB6b29tTGV2ZWxQcm9wZXJ0eS52YWx1ZSA9IC1leHBvbmVudDsgfSApO1xyXG5cclxuICAgIHN1cGVyKCB6b29tTGV2ZWxQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxucGhTY2FsZS5yZWdpc3RlciggJ0xpbmVhclpvb21CdXR0b25Hcm91cCcsIExpbmVhclpvb21CdXR0b25Hcm91cCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sMENBQTBDO0FBQ3JFLE9BQU9DLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsU0FBUyxNQUE0QiwwQ0FBMEM7QUFFdEYsT0FBT0MsOEJBQThCLE1BQWlELGtFQUFrRTtBQUV4SixPQUFPQyxPQUFPLE1BQU0scUJBQXFCO0FBT3pDLGVBQWUsTUFBTUMscUJBQXFCLFNBQVNGLDhCQUE4QixDQUFDO0VBRXpFRyxXQUFXQSxDQUFFQyxnQkFBZ0MsRUFBRUMsZUFBNkMsRUFBRztJQUVwRyxNQUFNQyxPQUFPLEdBQUdQLFNBQVMsQ0FBbUYsQ0FBQyxDQUFFO01BRTdHO01BQ0FRLE9BQU8sRUFBRSxFQUFFO01BQ1hDLDBCQUEwQixFQUFFO1FBQzFCQyxXQUFXLEVBQUU7TUFDZjtJQUNGLENBQUMsRUFBRUosZUFBZ0IsQ0FBQztJQUVwQixNQUFNSyxLQUFLLEdBQUdOLGdCQUFnQixDQUFDTSxLQUFLO0lBQ3BDQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsS0FBSyxFQUFFLGtDQUFtQyxDQUFDOztJQUU3RDtJQUNBO0lBQ0E7SUFDQTtJQUNBLE1BQU1FLGlCQUFpQixHQUFHLElBQUlmLGNBQWMsQ0FBRSxDQUFDTyxnQkFBZ0IsQ0FBQ1MsS0FBSyxFQUFFO01BQ3JFQyxVQUFVLEVBQUUsU0FBUztNQUNyQkosS0FBSyxFQUFFLElBQUlaLEtBQUssQ0FBRSxDQUFDWSxLQUFLLENBQUNLLEdBQUcsRUFBRSxDQUFDTCxLQUFLLENBQUNNLEdBQUk7SUFDM0MsQ0FBRSxDQUFDO0lBQ0hKLGlCQUFpQixDQUFDSyxJQUFJLENBQUVDLFNBQVMsSUFBSTtNQUFFZCxnQkFBZ0IsQ0FBQ1MsS0FBSyxHQUFHLENBQUNLLFNBQVM7SUFBRSxDQUFFLENBQUM7SUFDL0VkLGdCQUFnQixDQUFDYSxJQUFJLENBQUVFLFFBQVEsSUFBSTtNQUFFUCxpQkFBaUIsQ0FBQ0MsS0FBSyxHQUFHLENBQUNNLFFBQVE7SUFBRSxDQUFFLENBQUM7SUFFN0UsS0FBSyxDQUFFUCxpQkFBaUIsRUFBRU4sT0FBUSxDQUFDO0VBQ3JDO0FBQ0Y7QUFFQUwsT0FBTyxDQUFDbUIsUUFBUSxDQUFFLHVCQUF1QixFQUFFbEIscUJBQXNCLENBQUMifQ==