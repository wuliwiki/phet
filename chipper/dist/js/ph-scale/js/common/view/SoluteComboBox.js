// Copyright 2013-2023, University of Colorado Boulder

/**
 * Combo box for choosing a solute (stock solution).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, Rectangle, Text } from '../../../../scenery/js/imports.js';
import ComboBox from '../../../../sun/js/ComboBox.js';
import phScale from '../../phScale.js';
export default class SoluteComboBox extends ComboBox {
  constructor(selectedSoluteProperty, soluteListParent, providedOptions) {
    const options = optionize()({
      // ComboBoxOptions
      listPosition: 'below',
      xMargin: 16,
      yMargin: 16,
      highlightFill: 'rgb( 218, 255, 255 )',
      buttonLineWidth: 2,
      cornerRadius: 10
    }, providedOptions);
    const items = [];
    const solutes = selectedSoluteProperty.validValues;
    assert && assert(solutes);

    // Create items for the listbox
    solutes.forEach(solute => {
      // color chip
      const colorNode = new Rectangle(0, 0, 20, 20, {
        fill: solute.stockColor,
        stroke: solute.stockColor.darkerColor()
      });

      // label
      const labelText = new Text(solute.nameProperty, {
        font: new PhetFont(22),
        maxWidth: 140 // determined empirically
      });

      const hBox = new HBox({
        spacing: 5,
        children: [colorNode, labelText]
      });
      items.push({
        value: solute,
        createNode: () => hBox,
        tandemName: `${solute.tandemName}${ComboBox.ITEM_TANDEM_NAME_SUFFIX}`
      });
    });
    super(selectedSoluteProperty, items, soluteListParent, options);
  }
}
phScale.register('SoluteComboBox', SoluteComboBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQaGV0Rm9udCIsIkhCb3giLCJSZWN0YW5nbGUiLCJUZXh0IiwiQ29tYm9Cb3giLCJwaFNjYWxlIiwiU29sdXRlQ29tYm9Cb3giLCJjb25zdHJ1Y3RvciIsInNlbGVjdGVkU29sdXRlUHJvcGVydHkiLCJzb2x1dGVMaXN0UGFyZW50IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImxpc3RQb3NpdGlvbiIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiaGlnaGxpZ2h0RmlsbCIsImJ1dHRvbkxpbmVXaWR0aCIsImNvcm5lclJhZGl1cyIsIml0ZW1zIiwic29sdXRlcyIsInZhbGlkVmFsdWVzIiwiYXNzZXJ0IiwiZm9yRWFjaCIsInNvbHV0ZSIsImNvbG9yTm9kZSIsImZpbGwiLCJzdG9ja0NvbG9yIiwic3Ryb2tlIiwiZGFya2VyQ29sb3IiLCJsYWJlbFRleHQiLCJuYW1lUHJvcGVydHkiLCJmb250IiwibWF4V2lkdGgiLCJoQm94Iiwic3BhY2luZyIsImNoaWxkcmVuIiwicHVzaCIsInZhbHVlIiwiY3JlYXRlTm9kZSIsInRhbmRlbU5hbWUiLCJJVEVNX1RBTkRFTV9OQU1FX1NVRkZJWCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU29sdXRlQ29tYm9Cb3gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29tYm8gYm94IGZvciBjaG9vc2luZyBhIHNvbHV0ZSAoc3RvY2sgc29sdXRpb24pLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrT3B0aW9uYWwgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tPcHRpb25hbC5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlLCBSZWN0YW5nbGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQ29tYm9Cb3gsIHsgQ29tYm9Cb3hJdGVtLCBDb21ib0JveE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ29tYm9Cb3guanMnO1xyXG5pbXBvcnQgcGhTY2FsZSBmcm9tICcuLi8uLi9waFNjYWxlLmpzJztcclxuaW1wb3J0IFNvbHV0ZSBmcm9tICcuLi9tb2RlbC9Tb2x1dGUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFNvbHV0ZUNvbWJvQm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICZcclxuICBQaWNrUmVxdWlyZWQ8Q29tYm9Cb3hPcHRpb25zLCAndGFuZGVtJz4gJlxyXG4gIFBpY2tPcHRpb25hbDxDb21ib0JveE9wdGlvbnMsICdtYXhXaWR0aCc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29sdXRlQ29tYm9Cb3ggZXh0ZW5kcyBDb21ib0JveDxTb2x1dGU+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzZWxlY3RlZFNvbHV0ZVByb3BlcnR5OiBQcm9wZXJ0eTxTb2x1dGU+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgc29sdXRlTGlzdFBhcmVudDogTm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogU29sdXRlQ29tYm9Cb3hPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U29sdXRlQ29tYm9Cb3hPcHRpb25zLCBTZWxmT3B0aW9ucywgQ29tYm9Cb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBDb21ib0JveE9wdGlvbnNcclxuICAgICAgbGlzdFBvc2l0aW9uOiAnYmVsb3cnLFxyXG4gICAgICB4TWFyZ2luOiAxNixcclxuICAgICAgeU1hcmdpbjogMTYsXHJcbiAgICAgIGhpZ2hsaWdodEZpbGw6ICdyZ2IoIDIxOCwgMjU1LCAyNTUgKScsXHJcbiAgICAgIGJ1dHRvbkxpbmVXaWR0aDogMixcclxuICAgICAgY29ybmVyUmFkaXVzOiAxMFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgaXRlbXM6IENvbWJvQm94SXRlbTxTb2x1dGU+W10gPSBbXTtcclxuXHJcbiAgICBjb25zdCBzb2x1dGVzID0gc2VsZWN0ZWRTb2x1dGVQcm9wZXJ0eS52YWxpZFZhbHVlcyE7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzb2x1dGVzICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGl0ZW1zIGZvciB0aGUgbGlzdGJveFxyXG4gICAgc29sdXRlcy5mb3JFYWNoKCBzb2x1dGUgPT4ge1xyXG5cclxuICAgICAgLy8gY29sb3IgY2hpcFxyXG4gICAgICBjb25zdCBjb2xvck5vZGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAyMCwgMjAsIHtcclxuICAgICAgICBmaWxsOiBzb2x1dGUuc3RvY2tDb2xvcixcclxuICAgICAgICBzdHJva2U6IHNvbHV0ZS5zdG9ja0NvbG9yLmRhcmtlckNvbG9yKClcclxuICAgICAgfSApO1xyXG5cclxuICAgICAgLy8gbGFiZWxcclxuICAgICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFRleHQoIHNvbHV0ZS5uYW1lUHJvcGVydHksIHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDIyICksXHJcbiAgICAgICAgbWF4V2lkdGg6IDE0MCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIGNvbnN0IGhCb3ggPSBuZXcgSEJveCgge1xyXG4gICAgICAgIHNwYWNpbmc6IDUsXHJcbiAgICAgICAgY2hpbGRyZW46IFsgY29sb3JOb2RlLCBsYWJlbFRleHQgXVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICBpdGVtcy5wdXNoKCB7XHJcbiAgICAgICAgdmFsdWU6IHNvbHV0ZSxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBoQm94LFxyXG4gICAgICAgIHRhbmRlbU5hbWU6IGAke3NvbHV0ZS50YW5kZW1OYW1lfSR7Q29tYm9Cb3guSVRFTV9UQU5ERU1fTkFNRV9TVUZGSVh9YFxyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHNlbGVjdGVkU29sdXRlUHJvcGVydHksIGl0ZW1zLCBzb2x1dGVMaXN0UGFyZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5waFNjYWxlLnJlZ2lzdGVyKCAnU29sdXRlQ29tYm9Cb3gnLCBTb2x1dGVDb21ib0JveCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUduRixPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBUUMsU0FBUyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQy9FLE9BQU9DLFFBQVEsTUFBeUMsZ0NBQWdDO0FBQ3hGLE9BQU9DLE9BQU8sTUFBTSxrQkFBa0I7QUFTdEMsZUFBZSxNQUFNQyxjQUFjLFNBQVNGLFFBQVEsQ0FBUztFQUVwREcsV0FBV0EsQ0FBRUMsc0JBQXdDLEVBQ3hDQyxnQkFBc0IsRUFDdEJDLGVBQXNDLEVBQUc7SUFFM0QsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQXNELENBQUMsQ0FBRTtNQUVoRjtNQUNBYSxZQUFZLEVBQUUsT0FBTztNQUNyQkMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsYUFBYSxFQUFFLHNCQUFzQjtNQUNyQ0MsZUFBZSxFQUFFLENBQUM7TUFDbEJDLFlBQVksRUFBRTtJQUNoQixDQUFDLEVBQUVQLGVBQWdCLENBQUM7SUFFcEIsTUFBTVEsS0FBNkIsR0FBRyxFQUFFO0lBRXhDLE1BQU1DLE9BQU8sR0FBR1gsc0JBQXNCLENBQUNZLFdBQVk7SUFDbkRDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixPQUFRLENBQUM7O0lBRTNCO0lBQ0FBLE9BQU8sQ0FBQ0csT0FBTyxDQUFFQyxNQUFNLElBQUk7TUFFekI7TUFDQSxNQUFNQyxTQUFTLEdBQUcsSUFBSXRCLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDN0N1QixJQUFJLEVBQUVGLE1BQU0sQ0FBQ0csVUFBVTtRQUN2QkMsTUFBTSxFQUFFSixNQUFNLENBQUNHLFVBQVUsQ0FBQ0UsV0FBVyxDQUFDO01BQ3hDLENBQUUsQ0FBQzs7TUFFSDtNQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJMUIsSUFBSSxDQUFFb0IsTUFBTSxDQUFDTyxZQUFZLEVBQUU7UUFDL0NDLElBQUksRUFBRSxJQUFJL0IsUUFBUSxDQUFFLEVBQUcsQ0FBQztRQUN4QmdDLFFBQVEsRUFBRSxHQUFHLENBQUM7TUFDaEIsQ0FBRSxDQUFDOztNQUVILE1BQU1DLElBQUksR0FBRyxJQUFJaEMsSUFBSSxDQUFFO1FBQ3JCaUMsT0FBTyxFQUFFLENBQUM7UUFDVkMsUUFBUSxFQUFFLENBQUVYLFNBQVMsRUFBRUssU0FBUztNQUNsQyxDQUFFLENBQUM7TUFFSFgsS0FBSyxDQUFDa0IsSUFBSSxDQUFFO1FBQ1ZDLEtBQUssRUFBRWQsTUFBTTtRQUNiZSxVQUFVLEVBQUVBLENBQUEsS0FBTUwsSUFBSTtRQUN0Qk0sVUFBVSxFQUFHLEdBQUVoQixNQUFNLENBQUNnQixVQUFXLEdBQUVuQyxRQUFRLENBQUNvQyx1QkFBd0I7TUFDdEUsQ0FBRSxDQUFDO0lBQ0wsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFaEMsc0JBQXNCLEVBQUVVLEtBQUssRUFBRVQsZ0JBQWdCLEVBQUVFLE9BQVEsQ0FBQztFQUNuRTtBQUNGO0FBRUFOLE9BQU8sQ0FBQ29DLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRW5DLGNBQWUsQ0FBQyJ9