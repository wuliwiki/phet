// Copyright 2013-2022, University of Colorado Boulder

/**
 * Solution that appears in the beaker.
 * Origin is at bottom center of beaker.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import { Rectangle } from '../../../../scenery/js/imports.js';
import phScale from '../../phScale.js';
import PHScaleConstants from '../PHScaleConstants.js';
export default class SolutionNode extends Rectangle {
  constructor(solutionVolumeProperty, solutionColorProperty, beaker, modelViewTransform) {
    // PhET-iO: do not instrument. See https://github.com/phetsims/ph-scale/issues/108

    super(0, 0, 1, 1); // correct size will be set below

    // Update the color of the solution, accounting for saturation.
    solutionColorProperty.link(color => {
      this.fill = color;
      this.stroke = color.darkerColor();
    });

    // Update the amount of stuff in the beaker, based on solution total volume.
    const viewPosition = modelViewTransform.modelToViewPosition(beaker.position);
    const viewWidth = modelViewTransform.modelToViewDeltaX(beaker.size.width);
    solutionVolumeProperty.link(solutionVolume => {
      assert && assert(solutionVolume >= 0);

      // min non-zero volume, so that the solution is visible to the user and detectable by the concentration probe
      if (solutionVolume !== 0 && solutionVolume < PHScaleConstants.MIN_SOLUTION_VOLUME) {
        solutionVolume = PHScaleConstants.MIN_SOLUTION_VOLUME;
      }

      // determine dimensions in model coordinates
      const solutionHeight = Utils.linear(0, beaker.volume, 0, beaker.size.height, solutionVolume); // solutionVolume -> height

      // convert to view coordinates and create shape
      const viewHeight = modelViewTransform.modelToViewDeltaY(solutionHeight);

      // shape
      this.setRect(viewPosition.x - viewWidth / 2, viewPosition.y - viewHeight, viewWidth, viewHeight);
    });
  }
}
phScale.register('SolutionNode', SolutionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlJlY3RhbmdsZSIsInBoU2NhbGUiLCJQSFNjYWxlQ29uc3RhbnRzIiwiU29sdXRpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJzb2x1dGlvblZvbHVtZVByb3BlcnR5Iiwic29sdXRpb25Db2xvclByb3BlcnR5IiwiYmVha2VyIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibGluayIsImNvbG9yIiwiZmlsbCIsInN0cm9rZSIsImRhcmtlckNvbG9yIiwidmlld1Bvc2l0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsInBvc2l0aW9uIiwidmlld1dpZHRoIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJzaXplIiwid2lkdGgiLCJzb2x1dGlvblZvbHVtZSIsImFzc2VydCIsIk1JTl9TT0xVVElPTl9WT0xVTUUiLCJzb2x1dGlvbkhlaWdodCIsImxpbmVhciIsInZvbHVtZSIsImhlaWdodCIsInZpZXdIZWlnaHQiLCJtb2RlbFRvVmlld0RlbHRhWSIsInNldFJlY3QiLCJ4IiwieSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU29sdXRpb25Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNvbHV0aW9uIHRoYXQgYXBwZWFycyBpbiB0aGUgYmVha2VyLlxyXG4gKiBPcmlnaW4gaXMgYXQgYm90dG9tIGNlbnRlciBvZiBiZWFrZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHBoU2NhbGUgZnJvbSAnLi4vLi4vcGhTY2FsZS5qcyc7XHJcbmltcG9ydCBCZWFrZXIgZnJvbSAnLi4vbW9kZWwvQmVha2VyLmpzJztcclxuaW1wb3J0IFBIU2NhbGVDb25zdGFudHMgZnJvbSAnLi4vUEhTY2FsZUNvbnN0YW50cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb2x1dGlvbk5vZGUgZXh0ZW5kcyBSZWN0YW5nbGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNvbHV0aW9uVm9sdW1lUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBzb2x1dGlvbkNvbG9yUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PENvbG9yPixcclxuICAgICAgICAgICAgICAgICAgICAgIGJlYWtlcjogQmVha2VyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yICkge1xyXG5cclxuICAgIC8vIFBoRVQtaU86IGRvIG5vdCBpbnN0cnVtZW50LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoLXNjYWxlL2lzc3Vlcy8xMDhcclxuXHJcbiAgICBzdXBlciggMCwgMCwgMSwgMSApOyAvLyBjb3JyZWN0IHNpemUgd2lsbCBiZSBzZXQgYmVsb3dcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGNvbG9yIG9mIHRoZSBzb2x1dGlvbiwgYWNjb3VudGluZyBmb3Igc2F0dXJhdGlvbi5cclxuICAgIHNvbHV0aW9uQ29sb3JQcm9wZXJ0eS5saW5rKCBjb2xvciA9PiB7XHJcbiAgICAgIHRoaXMuZmlsbCA9IGNvbG9yO1xyXG4gICAgICB0aGlzLnN0cm9rZSA9IGNvbG9yLmRhcmtlckNvbG9yKCk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBhbW91bnQgb2Ygc3R1ZmYgaW4gdGhlIGJlYWtlciwgYmFzZWQgb24gc29sdXRpb24gdG90YWwgdm9sdW1lLlxyXG4gICAgY29uc3Qgdmlld1Bvc2l0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGJlYWtlci5wb3NpdGlvbiApO1xyXG4gICAgY29uc3Qgdmlld1dpZHRoID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBiZWFrZXIuc2l6ZS53aWR0aCApO1xyXG4gICAgc29sdXRpb25Wb2x1bWVQcm9wZXJ0eS5saW5rKCBzb2x1dGlvblZvbHVtZSA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHNvbHV0aW9uVm9sdW1lID49IDAgKTtcclxuXHJcbiAgICAgIC8vIG1pbiBub24temVybyB2b2x1bWUsIHNvIHRoYXQgdGhlIHNvbHV0aW9uIGlzIHZpc2libGUgdG8gdGhlIHVzZXIgYW5kIGRldGVjdGFibGUgYnkgdGhlIGNvbmNlbnRyYXRpb24gcHJvYmVcclxuICAgICAgaWYgKCBzb2x1dGlvblZvbHVtZSAhPT0gMCAmJiBzb2x1dGlvblZvbHVtZSA8IFBIU2NhbGVDb25zdGFudHMuTUlOX1NPTFVUSU9OX1ZPTFVNRSApIHtcclxuICAgICAgICBzb2x1dGlvblZvbHVtZSA9IFBIU2NhbGVDb25zdGFudHMuTUlOX1NPTFVUSU9OX1ZPTFVNRTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZGV0ZXJtaW5lIGRpbWVuc2lvbnMgaW4gbW9kZWwgY29vcmRpbmF0ZXNcclxuICAgICAgY29uc3Qgc29sdXRpb25IZWlnaHQgPSBVdGlscy5saW5lYXIoIDAsIGJlYWtlci52b2x1bWUsIDAsIGJlYWtlci5zaXplLmhlaWdodCwgc29sdXRpb25Wb2x1bWUgKTsgLy8gc29sdXRpb25Wb2x1bWUgLT4gaGVpZ2h0XHJcblxyXG4gICAgICAvLyBjb252ZXJ0IHRvIHZpZXcgY29vcmRpbmF0ZXMgYW5kIGNyZWF0ZSBzaGFwZVxyXG4gICAgICBjb25zdCB2aWV3SGVpZ2h0ID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCBzb2x1dGlvbkhlaWdodCApO1xyXG5cclxuICAgICAgLy8gc2hhcGVcclxuICAgICAgdGhpcy5zZXRSZWN0KCB2aWV3UG9zaXRpb24ueCAtICggdmlld1dpZHRoIC8gMiApLCB2aWV3UG9zaXRpb24ueSAtIHZpZXdIZWlnaHQsIHZpZXdXaWR0aCwgdmlld0hlaWdodCApO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxucGhTY2FsZS5yZWdpc3RlciggJ1NvbHV0aW9uTm9kZScsIFNvbHV0aW9uTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFFL0MsU0FBZ0JDLFNBQVMsUUFBUSxtQ0FBbUM7QUFDcEUsT0FBT0MsT0FBTyxNQUFNLGtCQUFrQjtBQUV0QyxPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFFckQsZUFBZSxNQUFNQyxZQUFZLFNBQVNILFNBQVMsQ0FBQztFQUUzQ0ksV0FBV0EsQ0FBRUMsc0JBQWlELEVBQ2pEQyxxQkFBK0MsRUFDL0NDLE1BQWMsRUFDZEMsa0JBQXVDLEVBQUc7SUFFNUQ7O0lBRUEsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUM7O0lBRXJCO0lBQ0FGLHFCQUFxQixDQUFDRyxJQUFJLENBQUVDLEtBQUssSUFBSTtNQUNuQyxJQUFJLENBQUNDLElBQUksR0FBR0QsS0FBSztNQUNqQixJQUFJLENBQUNFLE1BQU0sR0FBR0YsS0FBSyxDQUFDRyxXQUFXLENBQUMsQ0FBQztJQUNuQyxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxZQUFZLEdBQUdOLGtCQUFrQixDQUFDTyxtQkFBbUIsQ0FBRVIsTUFBTSxDQUFDUyxRQUFTLENBQUM7SUFDOUUsTUFBTUMsU0FBUyxHQUFHVCxrQkFBa0IsQ0FBQ1UsaUJBQWlCLENBQUVYLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDQyxLQUFNLENBQUM7SUFDM0VmLHNCQUFzQixDQUFDSSxJQUFJLENBQUVZLGNBQWMsSUFBSTtNQUM3Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVELGNBQWMsSUFBSSxDQUFFLENBQUM7O01BRXZDO01BQ0EsSUFBS0EsY0FBYyxLQUFLLENBQUMsSUFBSUEsY0FBYyxHQUFHbkIsZ0JBQWdCLENBQUNxQixtQkFBbUIsRUFBRztRQUNuRkYsY0FBYyxHQUFHbkIsZ0JBQWdCLENBQUNxQixtQkFBbUI7TUFDdkQ7O01BRUE7TUFDQSxNQUFNQyxjQUFjLEdBQUd6QixLQUFLLENBQUMwQixNQUFNLENBQUUsQ0FBQyxFQUFFbEIsTUFBTSxDQUFDbUIsTUFBTSxFQUFFLENBQUMsRUFBRW5CLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDUSxNQUFNLEVBQUVOLGNBQWUsQ0FBQyxDQUFDLENBQUM7O01BRWhHO01BQ0EsTUFBTU8sVUFBVSxHQUFHcEIsa0JBQWtCLENBQUNxQixpQkFBaUIsQ0FBRUwsY0FBZSxDQUFDOztNQUV6RTtNQUNBLElBQUksQ0FBQ00sT0FBTyxDQUFFaEIsWUFBWSxDQUFDaUIsQ0FBQyxHQUFLZCxTQUFTLEdBQUcsQ0FBRyxFQUFFSCxZQUFZLENBQUNrQixDQUFDLEdBQUdKLFVBQVUsRUFBRVgsU0FBUyxFQUFFVyxVQUFXLENBQUM7SUFDeEcsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBM0IsT0FBTyxDQUFDZ0MsUUFBUSxDQUFFLGNBQWMsRUFBRTlCLFlBQWEsQ0FBQyJ9