// Copyright 2013-2022, University of Colorado Boulder

/**
 * Faucet model, used for input and output faucets.
 * This model assumes that the pipe enters the faucet from the left.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import optionize from '../../../../phet-core/js/optionize.js';
import phScale from '../../phScale.js';
export default class Faucet {
  /**
   * @param position - center of output pipe
   * @param pipeMinX - x-coordinate of where the pipe starts
   * @param [providedOptions]
   */
  constructor(position, pipeMinX, providedOptions) {
    const options = optionize()({
      // SelfOptions
      spoutWidth: 45,
      // pixels
      maxFlowRate: 0.25,
      // L/sec
      flowRate: 0,
      enabled: true
    }, providedOptions);
    this.position = position;
    this.pipeMinX = pipeMinX;
    this.spoutWidth = options.spoutWidth;
    this.maxFlowRate = options.maxFlowRate;
    this.flowRateProperty = new NumberProperty(options.flowRate, {
      range: new Range(0, options.maxFlowRate),
      units: 'L/s',
      tandem: options.tandem.createTandem('flowRateProperty'),
      phetioReadOnly: true,
      phetioDocumentation: 'the flow rate of solution coming out of the faucet',
      phetioHighFrequency: true
    });
    this.enabledProperty = new BooleanProperty(options.enabled, {
      tandem: options.tandem.createTandem('enabledProperty'),
      phetioReadOnly: true,
      phetioDocumentation: 'whether the faucet is enabled'
    });

    // when disabled, turn off the faucet.
    this.enabledProperty.link(enabled => {
      if (!enabled && !phet.joist.sim.isSettingPhetioStateProperty.value) {
        this.flowRateProperty.value = 0;
      }
    });
  }
  reset() {
    this.flowRateProperty.reset();
    this.enabledProperty.reset();
  }
}
phScale.register('Faucet', Faucet);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwib3B0aW9uaXplIiwicGhTY2FsZSIsIkZhdWNldCIsImNvbnN0cnVjdG9yIiwicG9zaXRpb24iLCJwaXBlTWluWCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzcG91dFdpZHRoIiwibWF4Rmxvd1JhdGUiLCJmbG93UmF0ZSIsImVuYWJsZWQiLCJmbG93UmF0ZVByb3BlcnR5IiwicmFuZ2UiLCJ1bml0cyIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInBoZXRpb0hpZ2hGcmVxdWVuY3kiLCJlbmFibGVkUHJvcGVydHkiLCJsaW5rIiwicGhldCIsImpvaXN0Iiwic2ltIiwiaXNTZXR0aW5nUGhldGlvU3RhdGVQcm9wZXJ0eSIsInZhbHVlIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZhdWNldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBGYXVjZXQgbW9kZWwsIHVzZWQgZm9yIGlucHV0IGFuZCBvdXRwdXQgZmF1Y2V0cy5cclxuICogVGhpcyBtb2RlbCBhc3N1bWVzIHRoYXQgdGhlIHBpcGUgZW50ZXJzIHRoZSBmYXVjZXQgZnJvbSB0aGUgbGVmdC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IHBoU2NhbGUgZnJvbSAnLi4vLi4vcGhTY2FsZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNwb3V0V2lkdGg/OiBudW1iZXI7IC8vIHBpeGVsc1xyXG4gIG1heEZsb3dSYXRlPzogbnVtYmVyOyAvLyBML3NlY1xyXG4gIGZsb3dSYXRlPzogbnVtYmVyOyAvLyBML3NlY1xyXG4gIGVuYWJsZWQ/OiBib29sZWFuO1xyXG59O1xyXG5cclxudHlwZSBGYXVjZXRPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmF1Y2V0IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHBvc2l0aW9uOiBWZWN0b3IyO1xyXG4gIHB1YmxpYyByZWFkb25seSBwaXBlTWluWDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBzcG91dFdpZHRoOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1heEZsb3dSYXRlOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGZsb3dSYXRlUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG4gIHB1YmxpYyByZWFkb25seSBlbmFibGVkUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcG9zaXRpb24gLSBjZW50ZXIgb2Ygb3V0cHV0IHBpcGVcclxuICAgKiBAcGFyYW0gcGlwZU1pblggLSB4LWNvb3JkaW5hdGUgb2Ygd2hlcmUgdGhlIHBpcGUgc3RhcnRzXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwb3NpdGlvbjogVmVjdG9yMiwgcGlwZU1pblg6IG51bWJlciwgcHJvdmlkZWRPcHRpb25zOiBGYXVjZXRPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RmF1Y2V0T3B0aW9ucywgU2VsZk9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHNwb3V0V2lkdGg6IDQ1LCAvLyBwaXhlbHNcclxuICAgICAgbWF4Rmxvd1JhdGU6IDAuMjUsIC8vIEwvc2VjXHJcbiAgICAgIGZsb3dSYXRlOiAwLFxyXG4gICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICB0aGlzLnBpcGVNaW5YID0gcGlwZU1pblg7XHJcbiAgICB0aGlzLnNwb3V0V2lkdGggPSBvcHRpb25zLnNwb3V0V2lkdGg7XHJcbiAgICB0aGlzLm1heEZsb3dSYXRlID0gb3B0aW9ucy5tYXhGbG93UmF0ZTtcclxuXHJcbiAgICB0aGlzLmZsb3dSYXRlUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMuZmxvd1JhdGUsIHtcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMCwgb3B0aW9ucy5tYXhGbG93UmF0ZSApLFxyXG4gICAgICB1bml0czogJ0wvcycsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnZmxvd1JhdGVQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWUsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd0aGUgZmxvdyByYXRlIG9mIHNvbHV0aW9uIGNvbWluZyBvdXQgb2YgdGhlIGZhdWNldCcsXHJcbiAgICAgIHBoZXRpb0hpZ2hGcmVxdWVuY3k6IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmVuYWJsZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIG9wdGlvbnMuZW5hYmxlZCwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2VuYWJsZWRQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWUsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICd3aGV0aGVyIHRoZSBmYXVjZXQgaXMgZW5hYmxlZCdcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyB3aGVuIGRpc2FibGVkLCB0dXJuIG9mZiB0aGUgZmF1Y2V0LlxyXG4gICAgdGhpcy5lbmFibGVkUHJvcGVydHkubGluayggZW5hYmxlZCA9PiB7XHJcbiAgICAgIGlmICggIWVuYWJsZWQgJiYgIXBoZXQuam9pc3Quc2ltLmlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgICAgdGhpcy5mbG93UmF0ZVByb3BlcnR5LnZhbHVlID0gMDtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5mbG93UmF0ZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmVuYWJsZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxucGhTY2FsZS5yZWdpc3RlciggJ0ZhdWNldCcsIEZhdWNldCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLHVDQUF1QztBQUVsRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBRS9DLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFHN0QsT0FBT0MsT0FBTyxNQUFNLGtCQUFrQjtBQVd0QyxlQUFlLE1BQU1DLE1BQU0sQ0FBQztFQVMxQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLFFBQWlCLEVBQUVDLFFBQWdCLEVBQUVDLGVBQThCLEVBQUc7SUFFeEYsTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQTZCLENBQUMsQ0FBRTtNQUV2RDtNQUNBUSxVQUFVLEVBQUUsRUFBRTtNQUFFO01BQ2hCQyxXQUFXLEVBQUUsSUFBSTtNQUFFO01BQ25CQyxRQUFRLEVBQUUsQ0FBQztNQUNYQyxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQUVMLGVBQWdCLENBQUM7SUFFcEIsSUFBSSxDQUFDRixRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDRyxVQUFVLEdBQUdELE9BQU8sQ0FBQ0MsVUFBVTtJQUNwQyxJQUFJLENBQUNDLFdBQVcsR0FBR0YsT0FBTyxDQUFDRSxXQUFXO0lBRXRDLElBQUksQ0FBQ0csZ0JBQWdCLEdBQUcsSUFBSWQsY0FBYyxDQUFFUyxPQUFPLENBQUNHLFFBQVEsRUFBRTtNQUM1REcsS0FBSyxFQUFFLElBQUlkLEtBQUssQ0FBRSxDQUFDLEVBQUVRLE9BQU8sQ0FBQ0UsV0FBWSxDQUFDO01BQzFDSyxLQUFLLEVBQUUsS0FBSztNQUNaQyxNQUFNLEVBQUVSLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDQyxZQUFZLENBQUUsa0JBQW1CLENBQUM7TUFDekRDLGNBQWMsRUFBRSxJQUFJO01BQ3BCQyxtQkFBbUIsRUFBRSxvREFBb0Q7TUFDekVDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUl2QixlQUFlLENBQUVVLE9BQU8sQ0FBQ0ksT0FBTyxFQUFFO01BQzNESSxNQUFNLEVBQUVSLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDQyxZQUFZLENBQUUsaUJBQWtCLENBQUM7TUFDeERDLGNBQWMsRUFBRSxJQUFJO01BQ3BCQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNFLGVBQWUsQ0FBQ0MsSUFBSSxDQUFFVixPQUFPLElBQUk7TUFDcEMsSUFBSyxDQUFDQSxPQUFPLElBQUksQ0FBQ1csSUFBSSxDQUFDQyxLQUFLLENBQUNDLEdBQUcsQ0FBQ0MsNEJBQTRCLENBQUNDLEtBQUssRUFBRztRQUNwRSxJQUFJLENBQUNkLGdCQUFnQixDQUFDYyxLQUFLLEdBQUcsQ0FBQztNQUNqQztJQUNGLENBQUUsQ0FBQztFQUNMO0VBRU9DLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNmLGdCQUFnQixDQUFDZSxLQUFLLENBQUMsQ0FBQztJQUM3QixJQUFJLENBQUNQLGVBQWUsQ0FBQ08sS0FBSyxDQUFDLENBQUM7RUFDOUI7QUFDRjtBQUVBMUIsT0FBTyxDQUFDMkIsUUFBUSxDQUFFLFFBQVEsRUFBRTFCLE1BQU8sQ0FBQyJ9