// Copyright 2013-2023, University of Colorado Boulder

/**
 * PHModel is the base-class model for the 'Macro' and 'Micro' screens.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Beaker from './Beaker.js';
import Dropper from './Dropper.js';
import Faucet from './Faucet.js';
import Solute from './Solute.js';
import PHScaleConstants from '../PHScaleConstants.js';
import PHScaleQueryParameters from '../PHScaleQueryParameters.js';
import phScale from '../../phScale.js';
import Water from './Water.js';
import Utils from '../../../../dot/js/Utils.js';
// constants
const AVOGADROS_NUMBER = 6.023E23; // number of particles in one mole of solution

// null means 'no value', typically when we have no solution because the volume is zero.
// null means 'no value', typically when we have no solution because the volume is zero.
export default class PHModel {
  // solute choices, in order that they'll appear in the combo box
  // The order is alphabetical (English names), see https://github.com/phetsims/ph-scale/issues/101

  // the beaker, everything else is positioned relative to it

  // solution in the beaker

  // water faucet, at the beaker's top-right

  // drain faucet, at the beaker's bottom-left

  // whether the autofill feature is enabled, see https://github.com/phetsims/ph-scale/issues/104

  // how much (L) to autofill when the solute changes

  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      autofillVolume: 0.5
    }, providedOptions);
    this.solutes = [Solute.BATTERY_ACID, Solute.BLOOD, Solute.CHICKEN_SOUP, Solute.COFFEE, Solute.DRAIN_CLEANER, Solute.HAND_SOAP, Solute.MILK, Solute.ORANGE_JUICE, Solute.SODA, Solute.SPIT, Solute.VOMIT, Solute.WATER];
    this.beaker = new Beaker(PHScaleConstants.BEAKER_POSITION);
    const yDropper = this.beaker.position.y - this.beaker.size.height - 15;
    this.dropper = new Dropper(Solute.WATER, this.solutes, new Vector2(this.beaker.position.x - 50, yDropper), {
      tandem: options.tandem.createTandem('dropper')
    });
    this.solution = options.createSolution(this.dropper.soluteProperty, this.beaker.volume, options.tandem.createTandem('solution'));
    this.waterFaucet = new Faucet(new Vector2(this.beaker.right - 50, this.beaker.position.y - this.beaker.size.height - 45), this.beaker.right + 400, {
      enabled: this.solution.totalVolumeProperty.value < this.beaker.volume,
      tandem: options.tandem.createTandem('waterFaucet')
    });
    this.drainFaucet = new Faucet(new Vector2(this.beaker.left - 75, this.beaker.position.y + 43), this.beaker.left, {
      enabled: this.solution.totalVolumeProperty.value > 0,
      tandem: options.tandem.createTandem('drainFaucet')
    });
    this.autofillEnabledProperty = new BooleanProperty(PHScaleQueryParameters.autofill, {
      tandem: options.tandem.createTandem('autofillEnabledProperty'),
      phetioDocumentation: 'whether solute is automatically added to the beaker when the solute is changed'
    });
    this.autofillVolume = options.autofillVolume;
    this.isAutofillingProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('isAutofillingProperty'),
      phetioReadOnly: true,
      phetioDocumentation: 'whether the beaker is in the process of being automatically filled with solute'
    });

    // animate the dropper adding solute to the beaker
    this.dropper.soluteProperty.link(() => {
      // Do not autofill when state is being restored, see https://github.com/phetsims/ph-scale/issues/223.
      if (!phet.joist.sim.isSettingPhetioStateProperty.value) {
        // disable the faucets to cancel any multi-touch interaction that may be in progress, see issue #28
        this.waterFaucet.enabledProperty.value = false;
        this.drainFaucet.enabledProperty.value = false;

        // animate the dropper adding solute to the beaker
        this.startAutofill();
      }
    });

    // Enable faucets and dropper based on amount of solution in the beaker.
    this.solution.totalVolumeProperty.link(volume => {
      this.updateFaucetsAndDropper();
    });
  }
  reset() {
    this.dropper.reset();
    this.solution.reset();
    this.waterFaucet.reset();
    this.drainFaucet.reset();
    this.startAutofill();
  }

  /**
   * Enables faucets and dropper based on amount of solution in the beaker.
   */
  updateFaucetsAndDropper() {
    const volume = this.solution.totalVolumeProperty.value;
    this.waterFaucet.enabledProperty.value = volume < this.beaker.volume;
    this.drainFaucet.enabledProperty.value = volume > 0;
    this.dropper.enabledProperty.value = volume < this.beaker.volume;
  }

  /**
   * Moves time forward by the specified delta, in seconds.
   */
  step(dt) {
    if (this.isAutofillingProperty.value) {
      this.stepAutofill(dt);
    } else {
      this.solution.addSolute(this.dropper.flowRateProperty.value * dt);
      this.solution.addWater(this.waterFaucet.flowRateProperty.value * dt);
      this.solution.drainSolution(this.drainFaucet.flowRateProperty.value * dt);
    }
  }

  /**
   * Starts the autofill animation.
   */
  startAutofill() {
    if (this.autofillEnabledProperty.value && this.autofillVolume > 0) {
      this.isAutofillingProperty.value = true;
      this.dropper.isDispensingProperty.value = true;
      this.dropper.flowRateProperty.value = 0.75; // faster than standard flow rate
    } else {
      this.updateFaucetsAndDropper();
    }
  }

  /**
   * Advances the autofill animation by dt, in seconds.
   */
  stepAutofill(dt) {
    this.solution.addSolute(Math.min(this.dropper.flowRateProperty.value * dt, this.autofillVolume - this.solution.totalVolumeProperty.value));
    if (this.solution.totalVolumeProperty.value === this.autofillVolume) {
      this.stopAutofill();
    }
  }

  /**
   * Stops the autofill animation.
   */
  stopAutofill() {
    this.isAutofillingProperty.value = false;
    this.dropper.isDispensingProperty.value = false;
    this.updateFaucetsAndDropper();
  }

  /**
   * General algorithm for pH.
   * @param solutePH
   * @param soluteVolume liters
   * @param waterVolume liters
   * @returns pH, null if total volume is zero
   */
  static computePH(solutePH, soluteVolume, waterVolume) {
    let pH;
    const totalVolume = soluteVolume + waterVolume;
    if (totalVolume === 0) {
      pH = null;
    } else if (waterVolume === 0) {
      pH = solutePH; // to prevent floating-point error in log10 computations
    } else if (soluteVolume === 0) {
      pH = Water.pH; // to prevent floating-point error in log10 computations
    } else if (solutePH < 7) {
      pH = -Utils.log10((Math.pow(10, -solutePH) * soluteVolume + Math.pow(10, -Water.pH) * waterVolume) / totalVolume);
    } else {
      pH = 14 + Utils.log10((Math.pow(10, solutePH - 14) * soluteVolume + Math.pow(10, Water.pH - 14) * waterVolume) / totalVolume);
    }
    return pH;
  }

  /**
   * Compute pH from H3O+ concentration.
   * @param concentration
   * @returns pH, null if concentration is zero
   */
  static concentrationH3OToPH(concentration) {
    return concentration === null || concentration === 0 ? null : -Utils.log10(concentration);
  }

  /**
   * Compute pH from OH- concentration.
   * @param concentration
   * @returns pH, null if concentration is zero
   */
  static concentrationOHToPH(concentration) {
    const pH = PHModel.concentrationH3OToPH(concentration);
    return pH === null ? null : 14 - pH;
  }

  /**
   * Compute pH from moles of H3O+.
   * @param moles
   * @param volume volume of the solution in liters
   * @returns pH, null if moles or volume is zero
   */
  static molesH3OToPH(moles, volume) {
    return moles === 0 || volume === 0 ? null : PHModel.concentrationH3OToPH(moles / volume);
  }

  /**
   * Compute pH from moles of OH-.
   * @param moles
   * @param volume volume of the solution in liters
   * @returns pH, null if moles or volume is zero
   */
  static molesOHToPH(moles, volume) {
    return moles === 0 || volume === 0 ? null : PHModel.concentrationOHToPH(moles / volume);
  }

  /**
   * Computes concentration of H20 from volume.
   * @param volume
   * @returns concentration in moles/L, null if volume is 0
   */
  static volumeToConcentrationH20(volume) {
    return volume === 0 ? null : Water.concentration;
  }

  /**
   * Computes concentration of H3O+ from pH.
   *
   * @param pH null means 'no value'
   * @returns concentration in moles/L, null means no concentration
   */
  static pHToConcentrationH3O(pH) {
    return pH === null ? null : Math.pow(10, -pH);
  }

  /**
   * Computes concentration of OH- from pH.
   * @param pH null means 'no value'
   * @returns concentration in moles/L, null means no concentration
   */
  static pHToConcentrationOH(pH) {
    return pH === null ? null : PHModel.pHToConcentrationH3O(14 - pH);
  }

  /**
   * Computes the number of particles in solution.
   */
  static computeParticleCount(concentration, volume) {
    return concentration === null ? 0 : concentration * volume * AVOGADROS_NUMBER;
  }

  /**
   * Computes moles in solution.
   */
  static computeMoles(concentration, volume) {
    return concentration === null ? 0 : concentration * volume;
  }

  /**
   * True if the value displayed by the pH meter has precision that makes it equivalent to the pH of water.
   * Eg, the value displayed to the user is '7.00'.
   */
  static isEquivalentToWater(pH) {
    return pH !== null && Utils.toFixedNumber(pH, PHScaleConstants.PH_METER_DECIMAL_PLACES) === Water.pH;
  }
}
phScale.register('PHModel', PHModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,