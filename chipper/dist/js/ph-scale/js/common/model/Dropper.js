// Copyright 2013-2023, University of Colorado Boulder

/**
 * Model of the dropper, contains solute in solution form (stock solution).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Property from '../../../../axon/js/Property.js';
import optionize from '../../../../phet-core/js/optionize.js';
import phScale from '../../phScale.js';
import Solute from './Solute.js';
export default class Dropper {
  // Added for PhET-iO clients, so they can choose to make the dropper invisible.
  // See https://github.com/phetsims/ph-scale/issues/178
  constructor(solute, solutes, position, providedOptions) {
    const options = optionize()({
      // SelfOptions
      flowRate: 0,
      maxFlowRate: 0.05,
      dispensing: false,
      empty: false,
      enabled: true,
      visible: true
    }, providedOptions);
    this.position = position;
    this.soluteProperty = new Property(solute, {
      validValues: solutes,
      tandem: options.tandem.createTandem('soluteProperty'),
      phetioValueType: Solute.SoluteIO,
      phetioDocumentation: 'the solute dispensed by the dropper'
    });
    this.flowRateProperty = new NumberProperty(options.flowRate, {
      units: 'L/s',
      isValidValue: value => value >= 0,
      tandem: options.tandem.createTandem('flowRateProperty'),
      phetioReadOnly: true,
      phetioDocumentation: 'the flow rate of solute coming out of the dropper'
    }); // L/sec

    this.isDispensingProperty = new BooleanProperty(options.dispensing, {
      tandem: options.tandem.createTandem('isDispensingProperty'),
      phetioReadOnly: true,
      phetioDocumentation: 'whether solute is currently flowing out of the dropper'
    });
    this.enabledProperty = new BooleanProperty(options.enabled, {
      tandem: options.tandem.createTandem('enabledProperty'),
      phetioReadOnly: true,
      phetioDocumentation: 'whether the button on the dropper is enabled'
    });
    this.visibleProperty = new BooleanProperty(true, {
      tandem: options.tandem.createTandem('visibleProperty'),
      phetioDocumentation: 'whether the dropper is visible'
    });

    // Turn off the dropper when it's disabled.
    this.enabledProperty.link(enabled => {
      if (!enabled && !phet.joist.sim.isSettingPhetioStateProperty.value) {
        this.isDispensingProperty.value = false;
      }
    });

    // Toggle the flow rate when the dropper is turned on/off.
    this.isDispensingProperty.link(dispensing => {
      if (!phet.joist.sim.isSettingPhetioStateProperty.value) {
        this.flowRateProperty.value = dispensing ? options.maxFlowRate : 0;
      }
    });
  }
  reset() {
    this.soluteProperty.reset();
    this.isDispensingProperty.reset();
    this.enabledProperty.reset();
    this.flowRateProperty.reset();
  }
}
phScale.register('Dropper', Dropper);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,