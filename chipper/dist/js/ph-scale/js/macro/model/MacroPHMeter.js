// Copyright 2013-2022, University of Colorado Boulder

/**
 * Model of the pH meter.
 * <p/>
 * NOTE: Determining when the probe is in one of the various fluids is handled in the view,
 * where testing node intersections simplifies the process. Otherwise we'd need to
 * model the shapes of the various fluids, an unnecessary complication.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import PHMovable from '../../common/model/PHMovable.js';
import phScale from '../../phScale.js';
export default class MacroPHMeter {
  // pH value displayed by the meter, null if the meter is not reading a value

  // fixed position of the meter's body

  // movable probe

  constructor(bodyPosition, probePosition, probeDragBounds, providedOptions) {
    const options = providedOptions;
    this.pHProperty = new Property(null, {
      tandem: options.tandem.createTandem('pHProperty'),
      phetioValueType: NullableIO(NumberIO),
      phetioReadOnly: true,
      // because this depends on where the probe is positioned
      phetioHighFrequency: true
    });
    this.bodyPosition = bodyPosition;
    this.probe = new PHMovable(probePosition, probeDragBounds, {
      tandem: options.tandem.createTandem('probe'),
      positionPropertyOptions: {
        phetioHighFrequency: true
      }
    });
  }
  reset() {
    this.pHProperty.reset();
    this.probe.reset();
  }
}
phScale.register('MacroPHMeter', MacroPHMeter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIk51bGxhYmxlSU8iLCJOdW1iZXJJTyIsIlBITW92YWJsZSIsInBoU2NhbGUiLCJNYWNyb1BITWV0ZXIiLCJjb25zdHJ1Y3RvciIsImJvZHlQb3NpdGlvbiIsInByb2JlUG9zaXRpb24iLCJwcm9iZURyYWdCb3VuZHMiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicEhQcm9wZXJ0eSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1ZhbHVlVHlwZSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvSGlnaEZyZXF1ZW5jeSIsInByb2JlIiwicG9zaXRpb25Qcm9wZXJ0eU9wdGlvbnMiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWFjcm9QSE1ldGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIG9mIHRoZSBwSCBtZXRlci5cclxuICogPHAvPlxyXG4gKiBOT1RFOiBEZXRlcm1pbmluZyB3aGVuIHRoZSBwcm9iZSBpcyBpbiBvbmUgb2YgdGhlIHZhcmlvdXMgZmx1aWRzIGlzIGhhbmRsZWQgaW4gdGhlIHZpZXcsXHJcbiAqIHdoZXJlIHRlc3Rpbmcgbm9kZSBpbnRlcnNlY3Rpb25zIHNpbXBsaWZpZXMgdGhlIHByb2Nlc3MuIE90aGVyd2lzZSB3ZSdkIG5lZWQgdG9cclxuICogbW9kZWwgdGhlIHNoYXBlcyBvZiB0aGUgdmFyaW91cyBmbHVpZHMsIGFuIHVubmVjZXNzYXJ5IGNvbXBsaWNhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IE51bGxhYmxlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bGxhYmxlSU8uanMnO1xyXG5pbXBvcnQgTnVtYmVySU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bWJlcklPLmpzJztcclxuaW1wb3J0IFBITW92YWJsZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUEhNb3ZhYmxlLmpzJztcclxuaW1wb3J0IHBoU2NhbGUgZnJvbSAnLi4vLi4vcGhTY2FsZS5qcyc7XHJcbmltcG9ydCB7IFBIVmFsdWUgfSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUEhNb2RlbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgTWFjcm9QSE1ldGVyT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hY3JvUEhNZXRlciB7XHJcblxyXG4gIC8vIHBIIHZhbHVlIGRpc3BsYXllZCBieSB0aGUgbWV0ZXIsIG51bGwgaWYgdGhlIG1ldGVyIGlzIG5vdCByZWFkaW5nIGEgdmFsdWVcclxuICBwdWJsaWMgcmVhZG9ubHkgcEhQcm9wZXJ0eTogUHJvcGVydHk8UEhWYWx1ZT47XHJcblxyXG4gIC8vIGZpeGVkIHBvc2l0aW9uIG9mIHRoZSBtZXRlcidzIGJvZHlcclxuICBwdWJsaWMgcmVhZG9ubHkgYm9keVBvc2l0aW9uOiBWZWN0b3IyO1xyXG5cclxuICAvLyBtb3ZhYmxlIHByb2JlXHJcbiAgcHVibGljIHJlYWRvbmx5IHByb2JlOiBQSE1vdmFibGU7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYm9keVBvc2l0aW9uOiBWZWN0b3IyLCBwcm9iZVBvc2l0aW9uOiBWZWN0b3IyLCBwcm9iZURyYWdCb3VuZHM6IEJvdW5kczIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IE1hY3JvUEhNZXRlck9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHByb3ZpZGVkT3B0aW9ucztcclxuXHJcbiAgICB0aGlzLnBIUHJvcGVydHkgPSBuZXcgUHJvcGVydHk8UEhWYWx1ZT4oIG51bGwsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwSFByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bGxhYmxlSU8oIE51bWJlcklPICksXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlLCAvLyBiZWNhdXNlIHRoaXMgZGVwZW5kcyBvbiB3aGVyZSB0aGUgcHJvYmUgaXMgcG9zaXRpb25lZFxyXG4gICAgICBwaGV0aW9IaWdoRnJlcXVlbmN5OiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5ib2R5UG9zaXRpb24gPSBib2R5UG9zaXRpb247XHJcblxyXG4gICAgdGhpcy5wcm9iZSA9IG5ldyBQSE1vdmFibGUoIHByb2JlUG9zaXRpb24sIHByb2JlRHJhZ0JvdW5kcywge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Byb2JlJyApLFxyXG4gICAgICBwb3NpdGlvblByb3BlcnR5T3B0aW9uczoge1xyXG4gICAgICAgIHBoZXRpb0hpZ2hGcmVxdWVuY3k6IHRydWVcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5wSFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnByb2JlLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5waFNjYWxlLnJlZ2lzdGVyKCAnTWFjcm9QSE1ldGVyJywgTWFjcm9QSE1ldGVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGlDQUFpQztBQU10RCxPQUFPQyxVQUFVLE1BQU0sMkNBQTJDO0FBQ2xFLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxPQUFPLE1BQU0sa0JBQWtCO0FBT3RDLGVBQWUsTUFBTUMsWUFBWSxDQUFDO0VBRWhDOztFQUdBOztFQUdBOztFQUdPQyxXQUFXQSxDQUFFQyxZQUFxQixFQUFFQyxhQUFzQixFQUFFQyxlQUF3QixFQUN2RUMsZUFBb0MsRUFBRztJQUV6RCxNQUFNQyxPQUFPLEdBQUdELGVBQWU7SUFFL0IsSUFBSSxDQUFDRSxVQUFVLEdBQUcsSUFBSVosUUFBUSxDQUFXLElBQUksRUFBRTtNQUM3Q2EsTUFBTSxFQUFFRixPQUFPLENBQUNFLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLFlBQWEsQ0FBQztNQUNuREMsZUFBZSxFQUFFZCxVQUFVLENBQUVDLFFBQVMsQ0FBQztNQUN2Q2MsY0FBYyxFQUFFLElBQUk7TUFBRTtNQUN0QkMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDVixZQUFZLEdBQUdBLFlBQVk7SUFFaEMsSUFBSSxDQUFDVyxLQUFLLEdBQUcsSUFBSWYsU0FBUyxDQUFFSyxhQUFhLEVBQUVDLGVBQWUsRUFBRTtNQUMxREksTUFBTSxFQUFFRixPQUFPLENBQUNFLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE9BQVEsQ0FBQztNQUM5Q0ssdUJBQXVCLEVBQUU7UUFDdkJGLG1CQUFtQixFQUFFO01BQ3ZCO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7RUFFT0csS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ1IsVUFBVSxDQUFDUSxLQUFLLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUNGLEtBQUssQ0FBQ0UsS0FBSyxDQUFDLENBQUM7RUFDcEI7QUFDRjtBQUVBaEIsT0FBTyxDQUFDaUIsUUFBUSxDQUFFLGNBQWMsRUFBRWhCLFlBQWEsQ0FBQyJ9