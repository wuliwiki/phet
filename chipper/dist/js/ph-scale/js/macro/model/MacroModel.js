// Copyright 2022, University of Colorado Boulder

/**
 * MacroModel is the model for the 'Micro' screen.  It extends the PHModel, substituting a different solution
 * model, and omitting the pH meter.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PHModel from '../../common/model/PHModel.js';
import phScale from '../../phScale.js';
import MacroPHMeter from './MacroPHMeter.js';
import PHScaleConstants from '../../common/PHScaleConstants.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import MacroSolution from './MacroSolution.js';
export default class MacroModel extends PHModel {
  constructor(providedOptions) {
    const options = optionize()({
      // Creates the solution needed by the Macro screen
      createSolution: (solutionProperty, maxVolume, tandem) => new MacroSolution(solutionProperty, {
        maxVolume: maxVolume,
        tandem: tandem
      })
    }, providedOptions);
    super(options);

    // to the left of the drain faucet
    const pHMeterPosition = new Vector2(this.drainFaucet.position.x - 300, 75);
    this.pHMeter = new MacroPHMeter(pHMeterPosition, new Vector2(pHMeterPosition.x + 150, this.beaker.position.y), PHScaleConstants.SCREEN_VIEW_OPTIONS.layoutBounds, {
      tandem: options.tandem.createTandem('pHMeter')
    });
  }
  reset() {
    super.reset();
    this.pHMeter.reset();
  }
}
phScale.register('MacroModel', MacroModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQSE1vZGVsIiwicGhTY2FsZSIsIk1hY3JvUEhNZXRlciIsIlBIU2NhbGVDb25zdGFudHMiLCJWZWN0b3IyIiwiTWFjcm9Tb2x1dGlvbiIsIk1hY3JvTW9kZWwiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjcmVhdGVTb2x1dGlvbiIsInNvbHV0aW9uUHJvcGVydHkiLCJtYXhWb2x1bWUiLCJ0YW5kZW0iLCJwSE1ldGVyUG9zaXRpb24iLCJkcmFpbkZhdWNldCIsInBvc2l0aW9uIiwieCIsInBITWV0ZXIiLCJiZWFrZXIiLCJ5IiwiU0NSRUVOX1ZJRVdfT1BUSU9OUyIsImxheW91dEJvdW5kcyIsImNyZWF0ZVRhbmRlbSIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYWNyb01vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWNyb01vZGVsIGlzIHRoZSBtb2RlbCBmb3IgdGhlICdNaWNybycgc2NyZWVuLiAgSXQgZXh0ZW5kcyB0aGUgUEhNb2RlbCwgc3Vic3RpdHV0aW5nIGEgZGlmZmVyZW50IHNvbHV0aW9uXHJcbiAqIG1vZGVsLCBhbmQgb21pdHRpbmcgdGhlIHBIIG1ldGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgUEhNb2RlbCwgeyBQSE1vZGVsT3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9QSE1vZGVsLmpzJztcclxuaW1wb3J0IHBoU2NhbGUgZnJvbSAnLi4vLi4vcGhTY2FsZS5qcyc7XHJcbmltcG9ydCBNYWNyb1BITWV0ZXIgZnJvbSAnLi9NYWNyb1BITWV0ZXIuanMnO1xyXG5pbXBvcnQgUEhTY2FsZUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vUEhTY2FsZUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE1hY3JvU29sdXRpb24gZnJvbSAnLi9NYWNyb1NvbHV0aW9uLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBNYWNyb01vZGVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBITW9kZWxPcHRpb25zPE1hY3JvU29sdXRpb24+LCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWNyb01vZGVsIGV4dGVuZHMgUEhNb2RlbDxNYWNyb1NvbHV0aW9uPiB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBwSE1ldGVyOiBNYWNyb1BITWV0ZXI7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBNYWNyb01vZGVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE1hY3JvTW9kZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgUEhNb2RlbE9wdGlvbnM8TWFjcm9Tb2x1dGlvbj4+KCkoIHtcclxuXHJcbiAgICAgIC8vIENyZWF0ZXMgdGhlIHNvbHV0aW9uIG5lZWRlZCBieSB0aGUgTWFjcm8gc2NyZWVuXHJcbiAgICAgIGNyZWF0ZVNvbHV0aW9uOiAoIHNvbHV0aW9uUHJvcGVydHksIG1heFZvbHVtZSwgdGFuZGVtICkgPT4gbmV3IE1hY3JvU29sdXRpb24oIHNvbHV0aW9uUHJvcGVydHksIHtcclxuICAgICAgICBtYXhWb2x1bWU6IG1heFZvbHVtZSxcclxuICAgICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgICB9IClcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGRyYWluIGZhdWNldFxyXG4gICAgY29uc3QgcEhNZXRlclBvc2l0aW9uID0gbmV3IFZlY3RvcjIoIHRoaXMuZHJhaW5GYXVjZXQucG9zaXRpb24ueCAtIDMwMCwgNzUgKTtcclxuICAgIHRoaXMucEhNZXRlciA9IG5ldyBNYWNyb1BITWV0ZXIoXHJcbiAgICAgIHBITWV0ZXJQb3NpdGlvbixcclxuICAgICAgbmV3IFZlY3RvcjIoIHBITWV0ZXJQb3NpdGlvbi54ICsgMTUwLCB0aGlzLmJlYWtlci5wb3NpdGlvbi55ICksXHJcbiAgICAgIFBIU2NhbGVDb25zdGFudHMuU0NSRUVOX1ZJRVdfT1BUSU9OUy5sYXlvdXRCb3VuZHMsIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BITWV0ZXInIClcclxuICAgICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICAgIHRoaXMucEhNZXRlci5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxucGhTY2FsZS5yZWdpc3RlciggJ01hY3JvTW9kZWwnLCBNYWNyb01vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0MsT0FBTyxNQUEwQiwrQkFBK0I7QUFDdkUsT0FBT0MsT0FBTyxNQUFNLGtCQUFrQjtBQUN0QyxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBQzVDLE9BQU9DLGdCQUFnQixNQUFNLGtDQUFrQztBQUMvRCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFNOUMsZUFBZSxNQUFNQyxVQUFVLFNBQVNOLE9BQU8sQ0FBZ0I7RUFJdERPLFdBQVdBLENBQUVDLGVBQWtDLEVBQUc7SUFFdkQsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQWdFLENBQUMsQ0FBRTtNQUUxRjtNQUNBVyxjQUFjLEVBQUVBLENBQUVDLGdCQUFnQixFQUFFQyxTQUFTLEVBQUVDLE1BQU0sS0FBTSxJQUFJUixhQUFhLENBQUVNLGdCQUFnQixFQUFFO1FBQzlGQyxTQUFTLEVBQUVBLFNBQVM7UUFDcEJDLE1BQU0sRUFBRUE7TUFDVixDQUFFO0lBQ0osQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUMsT0FBUSxDQUFDOztJQUVoQjtJQUNBLE1BQU1LLGVBQWUsR0FBRyxJQUFJVixPQUFPLENBQUUsSUFBSSxDQUFDVyxXQUFXLENBQUNDLFFBQVEsQ0FBQ0MsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFHLENBQUM7SUFDNUUsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSWhCLFlBQVksQ0FDN0JZLGVBQWUsRUFDZixJQUFJVixPQUFPLENBQUVVLGVBQWUsQ0FBQ0csQ0FBQyxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUNFLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDSSxDQUFFLENBQUMsRUFDOURqQixnQkFBZ0IsQ0FBQ2tCLG1CQUFtQixDQUFDQyxZQUFZLEVBQUU7TUFDakRULE1BQU0sRUFBRUosT0FBTyxDQUFDSSxNQUFNLENBQUNVLFlBQVksQ0FBRSxTQUFVO0lBQ2pELENBQUUsQ0FBQztFQUNQO0VBRWdCQyxLQUFLQSxDQUFBLEVBQVM7SUFDNUIsS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ04sT0FBTyxDQUFDTSxLQUFLLENBQUMsQ0FBQztFQUN0QjtBQUNGO0FBRUF2QixPQUFPLENBQUN3QixRQUFRLENBQUUsWUFBWSxFQUFFbkIsVUFBVyxDQUFDIn0=