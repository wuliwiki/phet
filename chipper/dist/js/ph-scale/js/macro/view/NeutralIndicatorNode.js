// Copyright 2013-2022, University of Colorado Boulder

/**
 * Indicator that the solution is neutral.
 * This consists of 'Neutral' on a translucent background.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import phScale from '../../phScale.js';
import PhScaleStrings from '../../PhScaleStrings.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PHModel from '../../common/model/PHModel.js';
export default class NeutralIndicatorNode extends Node {
  constructor(pHProperty, providedOptions) {
    const options = optionize()({
      // NodeOptions
      phetioDocumentation: 'becomes visible when the solution has neutral pH'
    }, providedOptions);
    super(options);
    const labelText = new Text(PhScaleStrings.neutralStringProperty, {
      font: new PhetFont({
        size: 30,
        weight: 'bold'
      }),
      maxWidth: 300
    });

    // translucent light-gray background, so this shows up on all solution colors
    const background = new Rectangle(0, 0, 1, 1, {
      cornerRadius: 8,
      fill: 'rgba( 240, 240, 240, 0.6 )'
    });

    // Size the background to fit the label, center the label.
    labelText.boundsProperty.link(bounds => {
      background.setRect(0, 0, 1.4 * bounds.width, 1.2 * bounds.height);
      labelText.center = background.center;
    });

    // Wrap things in a parentNode, so that this feature can be permanently disabled via PhET-iO via
    // this.visibleProperty. See https://github.com/phetsims/ph-scale/issues/102
    const parentNode = new Node({
      children: [background, labelText]
    });
    this.addChild(parentNode);

    // Make parentNode visible when the solution has neutral pH.
    pHProperty.link(pH => {
      parentNode.visible = PHModel.isEquivalentToWater(pH);
    });
  }
}
phScale.register('NeutralIndicatorNode', NeutralIndicatorNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIk5vZGUiLCJSZWN0YW5nbGUiLCJUZXh0IiwicGhTY2FsZSIsIlBoU2NhbGVTdHJpbmdzIiwib3B0aW9uaXplIiwiUEhNb2RlbCIsIk5ldXRyYWxJbmRpY2F0b3JOb2RlIiwiY29uc3RydWN0b3IiLCJwSFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJsYWJlbFRleHQiLCJuZXV0cmFsU3RyaW5nUHJvcGVydHkiLCJmb250Iiwic2l6ZSIsIndlaWdodCIsIm1heFdpZHRoIiwiYmFja2dyb3VuZCIsImNvcm5lclJhZGl1cyIsImZpbGwiLCJib3VuZHNQcm9wZXJ0eSIsImxpbmsiLCJib3VuZHMiLCJzZXRSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJjZW50ZXIiLCJwYXJlbnROb2RlIiwiY2hpbGRyZW4iLCJhZGRDaGlsZCIsInBIIiwidmlzaWJsZSIsImlzRXF1aXZhbGVudFRvV2F0ZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk5ldXRyYWxJbmRpY2F0b3JOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRvciB0aGF0IHRoZSBzb2x1dGlvbiBpcyBuZXV0cmFsLlxyXG4gKiBUaGlzIGNvbnNpc3RzIG9mICdOZXV0cmFsJyBvbiBhIHRyYW5zbHVjZW50IGJhY2tncm91bmQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBSZWN0YW5nbGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgcGhTY2FsZSBmcm9tICcuLi8uLi9waFNjYWxlLmpzJztcclxuaW1wb3J0IHsgUEhWYWx1ZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9QSE1vZGVsLmpzJztcclxuaW1wb3J0IFBoU2NhbGVTdHJpbmdzIGZyb20gJy4uLy4uL1BoU2NhbGVTdHJpbmdzLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUEhNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvUEhNb2RlbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgTmV1dHJhbEluZGljYXRvck5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5ldXRyYWxJbmRpY2F0b3JOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcEhQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8UEhWYWx1ZT4sIHByb3ZpZGVkT3B0aW9uczogTmV1dHJhbEluZGljYXRvck5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TmV1dHJhbEluZGljYXRvck5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGhldGlvT2JqZWN0T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTm9kZU9wdGlvbnNcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ2JlY29tZXMgdmlzaWJsZSB3aGVuIHRoZSBzb2x1dGlvbiBoYXMgbmV1dHJhbCBwSCdcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFRleHQoIFBoU2NhbGVTdHJpbmdzLm5ldXRyYWxTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIHsgc2l6ZTogMzAsIHdlaWdodDogJ2JvbGQnIH0gKSxcclxuICAgICAgbWF4V2lkdGg6IDMwMFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHRyYW5zbHVjZW50IGxpZ2h0LWdyYXkgYmFja2dyb3VuZCwgc28gdGhpcyBzaG93cyB1cCBvbiBhbGwgc29sdXRpb24gY29sb3JzXHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgMSwgMSwge1xyXG4gICAgICBjb3JuZXJSYWRpdXM6IDgsXHJcbiAgICAgIGZpbGw6ICdyZ2JhKCAyNDAsIDI0MCwgMjQwLCAwLjYgKSdcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBTaXplIHRoZSBiYWNrZ3JvdW5kIHRvIGZpdCB0aGUgbGFiZWwsIGNlbnRlciB0aGUgbGFiZWwuXHJcbiAgICBsYWJlbFRleHQuYm91bmRzUHJvcGVydHkubGluayggYm91bmRzID0+IHtcclxuICAgICAgYmFja2dyb3VuZC5zZXRSZWN0KCAwLCAwLCAxLjQgKiBib3VuZHMud2lkdGgsIDEuMiAqIGJvdW5kcy5oZWlnaHQgKTtcclxuICAgICAgbGFiZWxUZXh0LmNlbnRlciA9IGJhY2tncm91bmQuY2VudGVyO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFdyYXAgdGhpbmdzIGluIGEgcGFyZW50Tm9kZSwgc28gdGhhdCB0aGlzIGZlYXR1cmUgY2FuIGJlIHBlcm1hbmVudGx5IGRpc2FibGVkIHZpYSBQaEVULWlPIHZpYVxyXG4gICAgLy8gdGhpcy52aXNpYmxlUHJvcGVydHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGgtc2NhbGUvaXNzdWVzLzEwMlxyXG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIGJhY2tncm91bmQsIGxhYmVsVGV4dCBdXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwYXJlbnROb2RlICk7XHJcblxyXG4gICAgLy8gTWFrZSBwYXJlbnROb2RlIHZpc2libGUgd2hlbiB0aGUgc29sdXRpb24gaGFzIG5ldXRyYWwgcEguXHJcbiAgICBwSFByb3BlcnR5LmxpbmsoIHBIID0+IHtcclxuICAgICAgcGFyZW50Tm9kZS52aXNpYmxlID0gUEhNb2RlbC5pc0VxdWl2YWxlbnRUb1dhdGVyKCBwSCApO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxucGhTY2FsZS5yZWdpc3RlciggJ05ldXRyYWxJbmRpY2F0b3JOb2RlJywgTmV1dHJhbEluZGljYXRvck5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBZUMsU0FBUyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3RGLE9BQU9DLE9BQU8sTUFBTSxrQkFBa0I7QUFFdEMsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUVwRCxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUduRixPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBTW5ELGVBQWUsTUFBTUMsb0JBQW9CLFNBQVNQLElBQUksQ0FBQztFQUU5Q1EsV0FBV0EsQ0FBRUMsVUFBc0MsRUFBRUMsZUFBNEMsRUFBRztJQUV6RyxNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBZ0UsQ0FBQyxDQUFFO01BRTFGO01BQ0FPLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixNQUFNRSxTQUFTLEdBQUcsSUFBSVgsSUFBSSxDQUFFRSxjQUFjLENBQUNVLHFCQUFxQixFQUFFO01BQ2hFQyxJQUFJLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRTtRQUFFaUIsSUFBSSxFQUFFLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQU8sQ0FBRSxDQUFDO01BQ2xEQyxRQUFRLEVBQUU7SUFDWixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSWxCLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7TUFDNUNtQixZQUFZLEVBQUUsQ0FBQztNQUNmQyxJQUFJLEVBQUU7SUFDUixDQUFFLENBQUM7O0lBRUg7SUFDQVIsU0FBUyxDQUFDUyxjQUFjLENBQUNDLElBQUksQ0FBRUMsTUFBTSxJQUFJO01BQ3ZDTCxVQUFVLENBQUNNLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBR0QsTUFBTSxDQUFDRSxLQUFLLEVBQUUsR0FBRyxHQUFHRixNQUFNLENBQUNHLE1BQU8sQ0FBQztNQUNuRWQsU0FBUyxDQUFDZSxNQUFNLEdBQUdULFVBQVUsQ0FBQ1MsTUFBTTtJQUN0QyxDQUFFLENBQUM7O0lBRUg7SUFDQTtJQUNBLE1BQU1DLFVBQVUsR0FBRyxJQUFJN0IsSUFBSSxDQUFFO01BQzNCOEIsUUFBUSxFQUFFLENBQUVYLFVBQVUsRUFBRU4sU0FBUztJQUNuQyxDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNrQixRQUFRLENBQUVGLFVBQVcsQ0FBQzs7SUFFM0I7SUFDQXBCLFVBQVUsQ0FBQ2MsSUFBSSxDQUFFUyxFQUFFLElBQUk7TUFDckJILFVBQVUsQ0FBQ0ksT0FBTyxHQUFHM0IsT0FBTyxDQUFDNEIsbUJBQW1CLENBQUVGLEVBQUcsQ0FBQztJQUN4RCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUE3QixPQUFPLENBQUNnQyxRQUFRLENBQUUsc0JBQXNCLEVBQUU1QixvQkFBcUIsQ0FBQyJ9