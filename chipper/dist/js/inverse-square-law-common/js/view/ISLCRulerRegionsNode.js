// Copyright 2019-2022, University of Colorado Boulder

/**
 * Shows the regions that a ruler can occupy in vertical space. These regions are used for interactive description of
 * the ruler.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import { Shape } from '../../../kite/js/imports.js';
import merge from '../../../phet-core/js/merge.js';
import { Path } from '../../../scenery/js/imports.js';
import inverseSquareLawCommon from '../inverseSquareLawCommon.js';

/**
 * @param {Array.<number>} rulerRegionPositions - a list of y values that are the ruler region boundaries
 * @param {Bounds2} layoutBounds
 * @param {Object} [options]
 * @constructor
 */
class ISLCRulerRegionsNode extends Path {
  constructor(rulerRegionPositions, layoutBounds, options) {
    options = merge({
      stroke: 'rgba(237,54,187,0.6)',
      lineWidth: 1.5
    }, options);
    const regionsShape = new Shape();
    rulerRegionPositions.forEach(position => {
      // draw the grid line
      regionsShape.moveTo(layoutBounds.left, position);
      regionsShape.lineTo(layoutBounds.right, position);
    });
    super(regionsShape, options);
  }
}
inverseSquareLawCommon.register('ISLCRulerRegionsNode', ISLCRulerRegionsNode);
export default ISLCRulerRegionsNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm1lcmdlIiwiUGF0aCIsImludmVyc2VTcXVhcmVMYXdDb21tb24iLCJJU0xDUnVsZXJSZWdpb25zTm9kZSIsImNvbnN0cnVjdG9yIiwicnVsZXJSZWdpb25Qb3NpdGlvbnMiLCJsYXlvdXRCb3VuZHMiLCJvcHRpb25zIiwic3Ryb2tlIiwibGluZVdpZHRoIiwicmVnaW9uc1NoYXBlIiwiZm9yRWFjaCIsInBvc2l0aW9uIiwibW92ZVRvIiwibGVmdCIsImxpbmVUbyIsInJpZ2h0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJU0xDUnVsZXJSZWdpb25zTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaG93cyB0aGUgcmVnaW9ucyB0aGF0IGEgcnVsZXIgY2FuIG9jY3VweSBpbiB2ZXJ0aWNhbCBzcGFjZS4gVGhlc2UgcmVnaW9ucyBhcmUgdXNlZCBmb3IgaW50ZXJhY3RpdmUgZGVzY3JpcHRpb24gb2ZcclxuICogdGhlIHJ1bGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgUGF0aCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBpbnZlcnNlU3F1YXJlTGF3Q29tbW9uIGZyb20gJy4uL2ludmVyc2VTcXVhcmVMYXdDb21tb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHJ1bGVyUmVnaW9uUG9zaXRpb25zIC0gYSBsaXN0IG9mIHkgdmFsdWVzIHRoYXQgYXJlIHRoZSBydWxlciByZWdpb24gYm91bmRhcmllc1xyXG4gKiBAcGFyYW0ge0JvdW5kczJ9IGxheW91dEJvdW5kc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuY2xhc3MgSVNMQ1J1bGVyUmVnaW9uc05vZGUgZXh0ZW5kcyBQYXRoIHtcclxuICBjb25zdHJ1Y3RvciggcnVsZXJSZWdpb25Qb3NpdGlvbnMsIGxheW91dEJvdW5kcywgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgc3Ryb2tlOiAncmdiYSgyMzcsNTQsMTg3LDAuNiknLFxyXG4gICAgICBsaW5lV2lkdGg6IDEuNVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHJlZ2lvbnNTaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG5cclxuICAgIHJ1bGVyUmVnaW9uUG9zaXRpb25zLmZvckVhY2goIHBvc2l0aW9uID0+IHtcclxuXHJcbiAgICAgIC8vIGRyYXcgdGhlIGdyaWQgbGluZVxyXG4gICAgICByZWdpb25zU2hhcGUubW92ZVRvKCBsYXlvdXRCb3VuZHMubGVmdCwgcG9zaXRpb24gKTtcclxuICAgICAgcmVnaW9uc1NoYXBlLmxpbmVUbyggbGF5b3V0Qm91bmRzLnJpZ2h0LCBwb3NpdGlvbiApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCByZWdpb25zU2hhcGUsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmludmVyc2VTcXVhcmVMYXdDb21tb24ucmVnaXN0ZXIoICdJU0xDUnVsZXJSZWdpb25zTm9kZScsIElTTENSdWxlclJlZ2lvbnNOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IElTTENSdWxlclJlZ2lvbnNOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSw2QkFBNkI7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxTQUFTQyxJQUFJLFFBQVEsZ0NBQWdDO0FBQ3JELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4Qjs7QUFFakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsb0JBQW9CLFNBQVNGLElBQUksQ0FBQztFQUN0Q0csV0FBV0EsQ0FBRUMsb0JBQW9CLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFHO0lBRXpEQSxPQUFPLEdBQUdQLEtBQUssQ0FBRTtNQUNmUSxNQUFNLEVBQUUsc0JBQXNCO01BQzlCQyxTQUFTLEVBQUU7SUFDYixDQUFDLEVBQUVGLE9BQVEsQ0FBQztJQUVaLE1BQU1HLFlBQVksR0FBRyxJQUFJWCxLQUFLLENBQUMsQ0FBQztJQUVoQ00sb0JBQW9CLENBQUNNLE9BQU8sQ0FBRUMsUUFBUSxJQUFJO01BRXhDO01BQ0FGLFlBQVksQ0FBQ0csTUFBTSxDQUFFUCxZQUFZLENBQUNRLElBQUksRUFBRUYsUUFBUyxDQUFDO01BQ2xERixZQUFZLENBQUNLLE1BQU0sQ0FBRVQsWUFBWSxDQUFDVSxLQUFLLEVBQUVKLFFBQVMsQ0FBQztJQUNyRCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVGLFlBQVksRUFBRUgsT0FBUSxDQUFDO0VBQ2hDO0FBQ0Y7QUFFQUwsc0JBQXNCLENBQUNlLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRWQsb0JBQXFCLENBQUM7QUFDL0UsZUFBZUEsb0JBQW9CIn0=