// Copyright 2018-2023, University of Colorado Boulder

/**
 * Node that creates the PDOM description for the ISLCObject. This Node has no visual output.
 *
 * NOTE: this node should have its labelContent filled in.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Michael Barlow (PhET Interactive Simulations)
 */

import merge from '../../../phet-core/js/merge.js';
import { Node } from '../../../scenery/js/imports.js';
import inverseSquareLawCommon from '../inverseSquareLawCommon.js';
import ISLCObjectEnum from '../model/ISLCObjectEnum.js';
class ISLCObjectDescriptionNode extends Node {
  /**
   * @param {ISLCModel} model
   * @param {ISLCObjectEnum} objectEnum
   * @param {Object} config
   */
  constructor(model, objectEnum, config) {
    config = merge({
      object1Label: null,
      // {string} @required
      object2Label: null,
      // {string} @required

      // pdom
      labelTagName: 'h3',
      tagName: 'ul',
      ariaRole: 'list'
    }, config);
    assert && assert(config.object2Label && config.object1Label, 'required params must be specified');
    super(config);

    // @protected
    this.thisObjectLabel = ISLCObjectEnum.isObject1(objectEnum) ? config.object1Label : config.object2Label;
    this.otherObjectLabel = ISLCObjectEnum.isObject1(objectEnum) ? config.object2Label : config.object1Label;
    this.forceVectorMagnitudeItemNode = new Node({
      tagName: 'li'
    });
    this.forceBetweenAndVectorNode = new Node({
      tagName: 'li'
    });
    this.addChild(this.forceBetweenAndVectorNode);
    this.addChild(this.forceVectorMagnitudeItemNode);
    model.showForceValuesProperty.link(showValues => {
      this.forceVectorMagnitudeItemNode.visible = showValues;
    });
  }
}
inverseSquareLawCommon.register('ISLCObjectDescriptionNode', ISLCObjectDescriptionNode);
export default ISLCObjectDescriptionNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJpbnZlcnNlU3F1YXJlTGF3Q29tbW9uIiwiSVNMQ09iamVjdEVudW0iLCJJU0xDT2JqZWN0RGVzY3JpcHRpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm9iamVjdEVudW0iLCJjb25maWciLCJvYmplY3QxTGFiZWwiLCJvYmplY3QyTGFiZWwiLCJsYWJlbFRhZ05hbWUiLCJ0YWdOYW1lIiwiYXJpYVJvbGUiLCJhc3NlcnQiLCJ0aGlzT2JqZWN0TGFiZWwiLCJpc09iamVjdDEiLCJvdGhlck9iamVjdExhYmVsIiwiZm9yY2VWZWN0b3JNYWduaXR1ZGVJdGVtTm9kZSIsImZvcmNlQmV0d2VlbkFuZFZlY3Rvck5vZGUiLCJhZGRDaGlsZCIsInNob3dGb3JjZVZhbHVlc1Byb3BlcnR5IiwibGluayIsInNob3dWYWx1ZXMiLCJ2aXNpYmxlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJU0xDT2JqZWN0RGVzY3JpcHRpb25Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vZGUgdGhhdCBjcmVhdGVzIHRoZSBQRE9NIGRlc2NyaXB0aW9uIGZvciB0aGUgSVNMQ09iamVjdC4gVGhpcyBOb2RlIGhhcyBubyB2aXN1YWwgb3V0cHV0LlxyXG4gKlxyXG4gKiBOT1RFOiB0aGlzIG5vZGUgc2hvdWxkIGhhdmUgaXRzIGxhYmVsQ29udGVudCBmaWxsZWQgaW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBNaWNoYWVsIEJhcmxvdyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBpbnZlcnNlU3F1YXJlTGF3Q29tbW9uIGZyb20gJy4uL2ludmVyc2VTcXVhcmVMYXdDb21tb24uanMnO1xyXG5pbXBvcnQgSVNMQ09iamVjdEVudW0gZnJvbSAnLi4vbW9kZWwvSVNMQ09iamVjdEVudW0uanMnO1xyXG5cclxuY2xhc3MgSVNMQ09iamVjdERlc2NyaXB0aW9uTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0lTTENNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge0lTTENPYmplY3RFbnVtfSBvYmplY3RFbnVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgb2JqZWN0RW51bSwgY29uZmlnICkge1xyXG5cclxuICAgIGNvbmZpZyA9IG1lcmdlKCB7XHJcbiAgICAgIG9iamVjdDFMYWJlbDogbnVsbCwgLy8ge3N0cmluZ30gQHJlcXVpcmVkXHJcbiAgICAgIG9iamVjdDJMYWJlbDogbnVsbCwgLy8ge3N0cmluZ30gQHJlcXVpcmVkXHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIGxhYmVsVGFnTmFtZTogJ2gzJyxcclxuICAgICAgdGFnTmFtZTogJ3VsJyxcclxuICAgICAgYXJpYVJvbGU6ICdsaXN0J1xyXG4gICAgfSwgY29uZmlnICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggY29uZmlnLm9iamVjdDJMYWJlbCAmJiBjb25maWcub2JqZWN0MUxhYmVsLCAncmVxdWlyZWQgcGFyYW1zIG11c3QgYmUgc3BlY2lmaWVkJyApO1xyXG5cclxuICAgIHN1cGVyKCBjb25maWcgKTtcclxuXHJcbiAgICAvLyBAcHJvdGVjdGVkXHJcbiAgICB0aGlzLnRoaXNPYmplY3RMYWJlbCA9IElTTENPYmplY3RFbnVtLmlzT2JqZWN0MSggb2JqZWN0RW51bSApID8gY29uZmlnLm9iamVjdDFMYWJlbCA6IGNvbmZpZy5vYmplY3QyTGFiZWw7XHJcbiAgICB0aGlzLm90aGVyT2JqZWN0TGFiZWwgPSBJU0xDT2JqZWN0RW51bS5pc09iamVjdDEoIG9iamVjdEVudW0gKSA/IGNvbmZpZy5vYmplY3QyTGFiZWwgOiBjb25maWcub2JqZWN0MUxhYmVsO1xyXG4gICAgdGhpcy5mb3JjZVZlY3Rvck1hZ25pdHVkZUl0ZW1Ob2RlID0gbmV3IE5vZGUoIHsgdGFnTmFtZTogJ2xpJyB9ICk7XHJcbiAgICB0aGlzLmZvcmNlQmV0d2VlbkFuZFZlY3Rvck5vZGUgPSBuZXcgTm9kZSggeyB0YWdOYW1lOiAnbGknIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLmZvcmNlQmV0d2VlbkFuZFZlY3Rvck5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuZm9yY2VWZWN0b3JNYWduaXR1ZGVJdGVtTm9kZSApO1xyXG5cclxuICAgIG1vZGVsLnNob3dGb3JjZVZhbHVlc1Byb3BlcnR5LmxpbmsoIHNob3dWYWx1ZXMgPT4ge1xyXG4gICAgICB0aGlzLmZvcmNlVmVjdG9yTWFnbml0dWRlSXRlbU5vZGUudmlzaWJsZSA9IHNob3dWYWx1ZXM7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5pbnZlcnNlU3F1YXJlTGF3Q29tbW9uLnJlZ2lzdGVyKCAnSVNMQ09iamVjdERlc2NyaXB0aW9uTm9kZScsIElTTENPYmplY3REZXNjcmlwdGlvbk5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgSVNMQ09iamVjdERlc2NyaXB0aW9uTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxTQUFTQyxJQUFJLFFBQVEsZ0NBQWdDO0FBQ3JELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyxjQUFjLE1BQU0sNEJBQTRCO0FBRXZELE1BQU1DLHlCQUF5QixTQUFTSCxJQUFJLENBQUM7RUFFM0M7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFHO0lBRXZDQSxNQUFNLEdBQUdSLEtBQUssQ0FBRTtNQUNkUyxZQUFZLEVBQUUsSUFBSTtNQUFFO01BQ3BCQyxZQUFZLEVBQUUsSUFBSTtNQUFFOztNQUVwQjtNQUNBQyxZQUFZLEVBQUUsSUFBSTtNQUNsQkMsT0FBTyxFQUFFLElBQUk7TUFDYkMsUUFBUSxFQUFFO0lBQ1osQ0FBQyxFQUFFTCxNQUFPLENBQUM7SUFFWE0sTUFBTSxJQUFJQSxNQUFNLENBQUVOLE1BQU0sQ0FBQ0UsWUFBWSxJQUFJRixNQUFNLENBQUNDLFlBQVksRUFBRSxtQ0FBb0MsQ0FBQztJQUVuRyxLQUFLLENBQUVELE1BQU8sQ0FBQzs7SUFFZjtJQUNBLElBQUksQ0FBQ08sZUFBZSxHQUFHWixjQUFjLENBQUNhLFNBQVMsQ0FBRVQsVUFBVyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsWUFBWSxHQUFHRCxNQUFNLENBQUNFLFlBQVk7SUFDekcsSUFBSSxDQUFDTyxnQkFBZ0IsR0FBR2QsY0FBYyxDQUFDYSxTQUFTLENBQUVULFVBQVcsQ0FBQyxHQUFHQyxNQUFNLENBQUNFLFlBQVksR0FBR0YsTUFBTSxDQUFDQyxZQUFZO0lBQzFHLElBQUksQ0FBQ1MsNEJBQTRCLEdBQUcsSUFBSWpCLElBQUksQ0FBRTtNQUFFVyxPQUFPLEVBQUU7SUFBSyxDQUFFLENBQUM7SUFDakUsSUFBSSxDQUFDTyx5QkFBeUIsR0FBRyxJQUFJbEIsSUFBSSxDQUFFO01BQUVXLE9BQU8sRUFBRTtJQUFLLENBQUUsQ0FBQztJQUU5RCxJQUFJLENBQUNRLFFBQVEsQ0FBRSxJQUFJLENBQUNELHlCQUEwQixDQUFDO0lBQy9DLElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUksQ0FBQ0YsNEJBQTZCLENBQUM7SUFFbERaLEtBQUssQ0FBQ2UsdUJBQXVCLENBQUNDLElBQUksQ0FBRUMsVUFBVSxJQUFJO01BQ2hELElBQUksQ0FBQ0wsNEJBQTRCLENBQUNNLE9BQU8sR0FBR0QsVUFBVTtJQUN4RCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFyQixzQkFBc0IsQ0FBQ3VCLFFBQVEsQ0FBRSwyQkFBMkIsRUFBRXJCLHlCQUEwQixDQUFDO0FBQ3pGLGVBQWVBLHlCQUF5QiJ9