// Copyright 2018-2022, University of Colorado Boulder

/**
 * Base type for all AlertManager instances. In general AlertManagers are responsible for sending alerts through the
 * utteranceQueue powering the aria-live alerts. This base type covers alerting that occurs due to changes in the
 * ISLCModel. Subtype alert managers are likely needed to alert state that is added in ISLCModel subtypes.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Michael Barlow (PhET Interactive Simulations)
 */

import Alerter from '../../../scenery-phet/js/accessibility/describers/Alerter.js';
import ActivationUtterance from '../../../utterance-queue/js/ActivationUtterance.js';
import inverseSquareLawCommon from '../inverseSquareLawCommon.js';
import InverseSquareLawCommonStrings from '../InverseSquareLawCommonStrings.js';

// constants
const forceValuesHiddenString = InverseSquareLawCommonStrings.a11y.forceValuesHidden;
class ISLCAlertManager extends Alerter {
  /**
   * @param {ISLCModel} model
   * @param {ForceDescriber} forceDescriber
   * @param {Object} [options]
   */
  constructor(model, forceDescriber, options) {
    super(options);

    // @protected
    this.forceDescriber = forceDescriber;
    this.model = model;

    // @public {Utterance} - utterances to be added to utteranceQueue, can be used to leverage
    // alertStableDelay feature so this alert content doesn't hit the user too frequently
    this.showForceValuesUtterance = new ActivationUtterance();
  }

  /**
   * Alert for when the show force values Property changes
   * @param {boolean} showForceValues
   * @public
   */
  alertShowForceValues(showForceValues) {
    this.showForceValuesUtterance.alert = this.getShowForceValuesAlert(showForceValues);
    this.alertDescriptionUtterance(this.showForceValuesUtterance);
  }

  /**
   * Get an alert describing the change in whether force values are shown or hidden.
   * @public
   *
   * @param {boolean} showForceValues
   * @returns {string}
   */
  getShowForceValuesAlert(showForceValues) {
    let alert = '';
    if (showForceValues) {
      alert = this.forceDescriber.getValuesInUnitsText();
    } else {
      alert = forceValuesHiddenString;
    }
    return alert;
  }
}
inverseSquareLawCommon.register('ISLCAlertManager', ISLCAlertManager);
export default ISLCAlertManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbGVydGVyIiwiQWN0aXZhdGlvblV0dGVyYW5jZSIsImludmVyc2VTcXVhcmVMYXdDb21tb24iLCJJbnZlcnNlU3F1YXJlTGF3Q29tbW9uU3RyaW5ncyIsImZvcmNlVmFsdWVzSGlkZGVuU3RyaW5nIiwiYTExeSIsImZvcmNlVmFsdWVzSGlkZGVuIiwiSVNMQ0FsZXJ0TWFuYWdlciIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJmb3JjZURlc2NyaWJlciIsIm9wdGlvbnMiLCJzaG93Rm9yY2VWYWx1ZXNVdHRlcmFuY2UiLCJhbGVydFNob3dGb3JjZVZhbHVlcyIsInNob3dGb3JjZVZhbHVlcyIsImFsZXJ0IiwiZ2V0U2hvd0ZvcmNlVmFsdWVzQWxlcnQiLCJhbGVydERlc2NyaXB0aW9uVXR0ZXJhbmNlIiwiZ2V0VmFsdWVzSW5Vbml0c1RleHQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIklTTENBbGVydE1hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmFzZSB0eXBlIGZvciBhbGwgQWxlcnRNYW5hZ2VyIGluc3RhbmNlcy4gSW4gZ2VuZXJhbCBBbGVydE1hbmFnZXJzIGFyZSByZXNwb25zaWJsZSBmb3Igc2VuZGluZyBhbGVydHMgdGhyb3VnaCB0aGVcclxuICogdXR0ZXJhbmNlUXVldWUgcG93ZXJpbmcgdGhlIGFyaWEtbGl2ZSBhbGVydHMuIFRoaXMgYmFzZSB0eXBlIGNvdmVycyBhbGVydGluZyB0aGF0IG9jY3VycyBkdWUgdG8gY2hhbmdlcyBpbiB0aGVcclxuICogSVNMQ01vZGVsLiBTdWJ0eXBlIGFsZXJ0IG1hbmFnZXJzIGFyZSBsaWtlbHkgbmVlZGVkIHRvIGFsZXJ0IHN0YXRlIHRoYXQgaXMgYWRkZWQgaW4gSVNMQ01vZGVsIHN1YnR5cGVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBCYXJsb3cgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEFsZXJ0ZXIgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2FjY2Vzc2liaWxpdHkvZGVzY3JpYmVycy9BbGVydGVyLmpzJztcclxuaW1wb3J0IEFjdGl2YXRpb25VdHRlcmFuY2UgZnJvbSAnLi4vLi4vLi4vdXR0ZXJhbmNlLXF1ZXVlL2pzL0FjdGl2YXRpb25VdHRlcmFuY2UuanMnO1xyXG5pbXBvcnQgaW52ZXJzZVNxdWFyZUxhd0NvbW1vbiBmcm9tICcuLi9pbnZlcnNlU3F1YXJlTGF3Q29tbW9uLmpzJztcclxuaW1wb3J0IEludmVyc2VTcXVhcmVMYXdDb21tb25TdHJpbmdzIGZyb20gJy4uL0ludmVyc2VTcXVhcmVMYXdDb21tb25TdHJpbmdzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBmb3JjZVZhbHVlc0hpZGRlblN0cmluZyA9IEludmVyc2VTcXVhcmVMYXdDb21tb25TdHJpbmdzLmExMXkuZm9yY2VWYWx1ZXNIaWRkZW47XHJcblxyXG5jbGFzcyBJU0xDQWxlcnRNYW5hZ2VyIGV4dGVuZHMgQWxlcnRlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7SVNMQ01vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7Rm9yY2VEZXNjcmliZXJ9IGZvcmNlRGVzY3JpYmVyXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgZm9yY2VEZXNjcmliZXIsIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwcm90ZWN0ZWRcclxuICAgIHRoaXMuZm9yY2VEZXNjcmliZXIgPSBmb3JjZURlc2NyaWJlcjtcclxuICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuXHJcbiAgICAvLyBAcHVibGljIHtVdHRlcmFuY2V9IC0gdXR0ZXJhbmNlcyB0byBiZSBhZGRlZCB0byB1dHRlcmFuY2VRdWV1ZSwgY2FuIGJlIHVzZWQgdG8gbGV2ZXJhZ2VcclxuICAgIC8vIGFsZXJ0U3RhYmxlRGVsYXkgZmVhdHVyZSBzbyB0aGlzIGFsZXJ0IGNvbnRlbnQgZG9lc24ndCBoaXQgdGhlIHVzZXIgdG9vIGZyZXF1ZW50bHlcclxuICAgIHRoaXMuc2hvd0ZvcmNlVmFsdWVzVXR0ZXJhbmNlID0gbmV3IEFjdGl2YXRpb25VdHRlcmFuY2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsZXJ0IGZvciB3aGVuIHRoZSBzaG93IGZvcmNlIHZhbHVlcyBQcm9wZXJ0eSBjaGFuZ2VzXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzaG93Rm9yY2VWYWx1ZXNcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgYWxlcnRTaG93Rm9yY2VWYWx1ZXMoIHNob3dGb3JjZVZhbHVlcyApIHtcclxuICAgIHRoaXMuc2hvd0ZvcmNlVmFsdWVzVXR0ZXJhbmNlLmFsZXJ0ID0gdGhpcy5nZXRTaG93Rm9yY2VWYWx1ZXNBbGVydCggc2hvd0ZvcmNlVmFsdWVzICk7XHJcbiAgICB0aGlzLmFsZXJ0RGVzY3JpcHRpb25VdHRlcmFuY2UoIHRoaXMuc2hvd0ZvcmNlVmFsdWVzVXR0ZXJhbmNlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYW4gYWxlcnQgZGVzY3JpYmluZyB0aGUgY2hhbmdlIGluIHdoZXRoZXIgZm9yY2UgdmFsdWVzIGFyZSBzaG93biBvciBoaWRkZW4uXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzaG93Rm9yY2VWYWx1ZXNcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAqL1xyXG4gIGdldFNob3dGb3JjZVZhbHVlc0FsZXJ0KCBzaG93Rm9yY2VWYWx1ZXMgKSB7XHJcbiAgICBsZXQgYWxlcnQgPSAnJztcclxuICAgIGlmICggc2hvd0ZvcmNlVmFsdWVzICkge1xyXG4gICAgICBhbGVydCA9IHRoaXMuZm9yY2VEZXNjcmliZXIuZ2V0VmFsdWVzSW5Vbml0c1RleHQoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBhbGVydCA9IGZvcmNlVmFsdWVzSGlkZGVuU3RyaW5nO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFsZXJ0O1xyXG4gIH1cclxufVxyXG5cclxuaW52ZXJzZVNxdWFyZUxhd0NvbW1vbi5yZWdpc3RlciggJ0lTTENBbGVydE1hbmFnZXInLCBJU0xDQWxlcnRNYW5hZ2VyICk7XHJcbmV4cG9ydCBkZWZhdWx0IElTTENBbGVydE1hbmFnZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSw4REFBOEQ7QUFDbEYsT0FBT0MsbUJBQW1CLE1BQU0sb0RBQW9EO0FBQ3BGLE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyw2QkFBNkIsTUFBTSxxQ0FBcUM7O0FBRS9FO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUdELDZCQUE2QixDQUFDRSxJQUFJLENBQUNDLGlCQUFpQjtBQUVwRixNQUFNQyxnQkFBZ0IsU0FBU1AsT0FBTyxDQUFDO0VBRXJDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRVEsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sRUFBRztJQUM1QyxLQUFLLENBQUVBLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQSxJQUFJLENBQUNELGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNELEtBQUssR0FBR0EsS0FBSzs7SUFFbEI7SUFDQTtJQUNBLElBQUksQ0FBQ0csd0JBQXdCLEdBQUcsSUFBSVgsbUJBQW1CLENBQUMsQ0FBQztFQUMzRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VZLG9CQUFvQkEsQ0FBRUMsZUFBZSxFQUFHO0lBQ3RDLElBQUksQ0FBQ0Ysd0JBQXdCLENBQUNHLEtBQUssR0FBRyxJQUFJLENBQUNDLHVCQUF1QixDQUFFRixlQUFnQixDQUFDO0lBQ3JGLElBQUksQ0FBQ0cseUJBQXlCLENBQUUsSUFBSSxDQUFDTCx3QkFBeUIsQ0FBQztFQUNqRTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSSx1QkFBdUJBLENBQUVGLGVBQWUsRUFBRztJQUN6QyxJQUFJQyxLQUFLLEdBQUcsRUFBRTtJQUNkLElBQUtELGVBQWUsRUFBRztNQUNyQkMsS0FBSyxHQUFHLElBQUksQ0FBQ0wsY0FBYyxDQUFDUSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3BELENBQUMsTUFDSTtNQUNISCxLQUFLLEdBQUdYLHVCQUF1QjtJQUNqQztJQUNBLE9BQU9XLEtBQUs7RUFDZDtBQUNGO0FBRUFiLHNCQUFzQixDQUFDaUIsUUFBUSxDQUFFLGtCQUFrQixFQUFFWixnQkFBaUIsQ0FBQztBQUN2RSxlQUFlQSxnQkFBZ0IifQ==