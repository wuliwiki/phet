// Copyright 2018-2023, University of Colorado Boulder

/**
 * Base type for all ISLC associated Describer types. In general, this stores state that is useful to have for any describer
 * instance.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Michael Barlow (PhET Interactive Simulations)
 */

import inverseSquareLawCommon from '../../inverseSquareLawCommon.js';
import ISLCObjectEnum from '../../model/ISLCObjectEnum.js';
class ISLCDescriber {
  /**
   * @param {ISLCModel} model
   * @param {string} object1Label
   * @param {string} object2Label
   */
  constructor(model, object1Label, object2Label) {
    // @private
    this.object1 = model.object1;
    this.object2 = model.object2;
    this.object1Label = object1Label;
    this.object2Label = object2Label;
  }

  /**
   * @param {ISLCObjectEnum} objectEnum
   * @returns {Mass}
   * @public
   */
  getObjectFromEnum(objectEnum) {
    assert && assert(ISLCObjectEnum.includes(objectEnum));
    return ISLCObjectEnum.isObject1(objectEnum) ? this.object1 : this.object2;
  }

  /**
   * @param {ISLCObjectEnum} objectEnum
   * @returns {Mass}
   * @public
   */
  getOtherObjectFromEnum(objectEnum) {
    assert && assert(ISLCObjectEnum.includes(objectEnum));
    return ISLCObjectEnum.isObject1(objectEnum) ? this.object2 : this.object1;
  }

  /**
   * @param {ISLCObjectEnum} objectEnum
   * @returns {string}
   * @public
   */
  getObjectLabelFromEnum(objectEnum) {
    assert && assert(ISLCObjectEnum.includes(objectEnum));
    return ISLCObjectEnum.isObject1(objectEnum) ? this.object1Label : this.object2Label;
  }

  /**
   * @param {ISLCObjectEnum} objectEnum
   * @returns {string}
   * @public
   */
  getOtherObjectLabelFromEnum(objectEnum) {
    assert && assert(ISLCObjectEnum.includes(objectEnum));
    return ISLCObjectEnum.isObject1(objectEnum) ? this.object2Label : this.object1Label;
  }
}
inverseSquareLawCommon.register('ISLCDescriber', ISLCDescriber);
export default ISLCDescriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZlcnNlU3F1YXJlTGF3Q29tbW9uIiwiSVNMQ09iamVjdEVudW0iLCJJU0xDRGVzY3JpYmVyIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm9iamVjdDFMYWJlbCIsIm9iamVjdDJMYWJlbCIsIm9iamVjdDEiLCJvYmplY3QyIiwiZ2V0T2JqZWN0RnJvbUVudW0iLCJvYmplY3RFbnVtIiwiYXNzZXJ0IiwiaW5jbHVkZXMiLCJpc09iamVjdDEiLCJnZXRPdGhlck9iamVjdEZyb21FbnVtIiwiZ2V0T2JqZWN0TGFiZWxGcm9tRW51bSIsImdldE90aGVyT2JqZWN0TGFiZWxGcm9tRW51bSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSVNMQ0Rlc2NyaWJlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCYXNlIHR5cGUgZm9yIGFsbCBJU0xDIGFzc29jaWF0ZWQgRGVzY3JpYmVyIHR5cGVzLiBJbiBnZW5lcmFsLCB0aGlzIHN0b3JlcyBzdGF0ZSB0aGF0IGlzIHVzZWZ1bCB0byBoYXZlIGZvciBhbnkgZGVzY3JpYmVyXHJcbiAqIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBCYXJsb3cgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGludmVyc2VTcXVhcmVMYXdDb21tb24gZnJvbSAnLi4vLi4vaW52ZXJzZVNxdWFyZUxhd0NvbW1vbi5qcyc7XHJcbmltcG9ydCBJU0xDT2JqZWN0RW51bSBmcm9tICcuLi8uLi9tb2RlbC9JU0xDT2JqZWN0RW51bS5qcyc7XHJcblxyXG5jbGFzcyBJU0xDRGVzY3JpYmVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtJU0xDTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9iamVjdDFMYWJlbFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3QyTGFiZWxcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG9iamVjdDFMYWJlbCwgb2JqZWN0MkxhYmVsICkge1xyXG5cclxuICAgIC8vIEBwcml2YXRlXHJcbiAgICB0aGlzLm9iamVjdDEgPSBtb2RlbC5vYmplY3QxO1xyXG4gICAgdGhpcy5vYmplY3QyID0gbW9kZWwub2JqZWN0MjtcclxuICAgIHRoaXMub2JqZWN0MUxhYmVsID0gb2JqZWN0MUxhYmVsO1xyXG4gICAgdGhpcy5vYmplY3QyTGFiZWwgPSBvYmplY3QyTGFiZWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0lTTENPYmplY3RFbnVtfSBvYmplY3RFbnVtXHJcbiAgICogQHJldHVybnMge01hc3N9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldE9iamVjdEZyb21FbnVtKCBvYmplY3RFbnVtICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggSVNMQ09iamVjdEVudW0uaW5jbHVkZXMoIG9iamVjdEVudW0gKSApO1xyXG4gICAgcmV0dXJuIElTTENPYmplY3RFbnVtLmlzT2JqZWN0MSggb2JqZWN0RW51bSApID8gdGhpcy5vYmplY3QxIDogdGhpcy5vYmplY3QyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtJU0xDT2JqZWN0RW51bX0gb2JqZWN0RW51bVxyXG4gICAqIEByZXR1cm5zIHtNYXNzfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBnZXRPdGhlck9iamVjdEZyb21FbnVtKCBvYmplY3RFbnVtICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggSVNMQ09iamVjdEVudW0uaW5jbHVkZXMoIG9iamVjdEVudW0gKSApO1xyXG4gICAgcmV0dXJuIElTTENPYmplY3RFbnVtLmlzT2JqZWN0MSggb2JqZWN0RW51bSApID8gdGhpcy5vYmplY3QyIDogdGhpcy5vYmplY3QxO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtJU0xDT2JqZWN0RW51bX0gb2JqZWN0RW51bVxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldE9iamVjdExhYmVsRnJvbUVudW0oIG9iamVjdEVudW0gKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBJU0xDT2JqZWN0RW51bS5pbmNsdWRlcyggb2JqZWN0RW51bSApICk7XHJcbiAgICByZXR1cm4gSVNMQ09iamVjdEVudW0uaXNPYmplY3QxKCBvYmplY3RFbnVtICkgPyB0aGlzLm9iamVjdDFMYWJlbCA6IHRoaXMub2JqZWN0MkxhYmVsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtJU0xDT2JqZWN0RW51bX0gb2JqZWN0RW51bVxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldE90aGVyT2JqZWN0TGFiZWxGcm9tRW51bSggb2JqZWN0RW51bSApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIElTTENPYmplY3RFbnVtLmluY2x1ZGVzKCBvYmplY3RFbnVtICkgKTtcclxuICAgIHJldHVybiBJU0xDT2JqZWN0RW51bS5pc09iamVjdDEoIG9iamVjdEVudW0gKSA/IHRoaXMub2JqZWN0MkxhYmVsIDogdGhpcy5vYmplY3QxTGFiZWw7XHJcbiAgfVxyXG59XHJcblxyXG5pbnZlcnNlU3F1YXJlTGF3Q29tbW9uLnJlZ2lzdGVyKCAnSVNMQ0Rlc2NyaWJlcicsIElTTENEZXNjcmliZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgSVNMQ0Rlc2NyaWJlcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHNCQUFzQixNQUFNLGlDQUFpQztBQUNwRSxPQUFPQyxjQUFjLE1BQU0sK0JBQStCO0FBRTFELE1BQU1DLGFBQWEsQ0FBQztFQUVsQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsWUFBWSxFQUFFQyxZQUFZLEVBQUc7SUFFL0M7SUFDQSxJQUFJLENBQUNDLE9BQU8sR0FBR0gsS0FBSyxDQUFDRyxPQUFPO0lBQzVCLElBQUksQ0FBQ0MsT0FBTyxHQUFHSixLQUFLLENBQUNJLE9BQU87SUFDNUIsSUFBSSxDQUFDSCxZQUFZLEdBQUdBLFlBQVk7SUFDaEMsSUFBSSxDQUFDQyxZQUFZLEdBQUdBLFlBQVk7RUFDbEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxpQkFBaUJBLENBQUVDLFVBQVUsRUFBRztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUVWLGNBQWMsQ0FBQ1csUUFBUSxDQUFFRixVQUFXLENBQUUsQ0FBQztJQUN6RCxPQUFPVCxjQUFjLENBQUNZLFNBQVMsQ0FBRUgsVUFBVyxDQUFDLEdBQUcsSUFBSSxDQUFDSCxPQUFPLEdBQUcsSUFBSSxDQUFDQyxPQUFPO0VBQzdFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU0sc0JBQXNCQSxDQUFFSixVQUFVLEVBQUc7SUFDbkNDLE1BQU0sSUFBSUEsTUFBTSxDQUFFVixjQUFjLENBQUNXLFFBQVEsQ0FBRUYsVUFBVyxDQUFFLENBQUM7SUFDekQsT0FBT1QsY0FBYyxDQUFDWSxTQUFTLENBQUVILFVBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQ0YsT0FBTyxHQUFHLElBQUksQ0FBQ0QsT0FBTztFQUM3RTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VRLHNCQUFzQkEsQ0FBRUwsVUFBVSxFQUFHO0lBQ25DQyxNQUFNLElBQUlBLE1BQU0sQ0FBRVYsY0FBYyxDQUFDVyxRQUFRLENBQUVGLFVBQVcsQ0FBRSxDQUFDO0lBQ3pELE9BQU9ULGNBQWMsQ0FBQ1ksU0FBUyxDQUFFSCxVQUFXLENBQUMsR0FBRyxJQUFJLENBQUNMLFlBQVksR0FBRyxJQUFJLENBQUNDLFlBQVk7RUFDdkY7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFVSwyQkFBMkJBLENBQUVOLFVBQVUsRUFBRztJQUN4Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVWLGNBQWMsQ0FBQ1csUUFBUSxDQUFFRixVQUFXLENBQUUsQ0FBQztJQUN6RCxPQUFPVCxjQUFjLENBQUNZLFNBQVMsQ0FBRUgsVUFBVyxDQUFDLEdBQUcsSUFBSSxDQUFDSixZQUFZLEdBQUcsSUFBSSxDQUFDRCxZQUFZO0VBQ3ZGO0FBQ0Y7QUFFQUwsc0JBQXNCLENBQUNpQixRQUFRLENBQUUsZUFBZSxFQUFFZixhQUFjLENBQUM7QUFDakUsZUFBZUEsYUFBYSJ9