// Copyright 2017-2022, University of Colorado Boulder

/**
 * A legend graphic consisting of a double-ended arrow, two endpoint lines, and a label string. Intended to visually
 * indicate a distance scale.
 *
 * @author Michael Barlow (PhET Interactive Simulations)
 */

import merge from '../../../phet-core/js/merge.js';
import ArrowNode from '../../../scenery-phet/js/ArrowNode.js';
import { Line, Node, Text } from '../../../scenery/js/imports.js';
import inverseSquareLawCommon from '../inverseSquareLawCommon.js';
class ISLCLegendNode extends Node {
  /**
   * @param {number} width (in view coordinates)
   * @param {string} labelString
   * @param {Object} [options]
   */
  constructor(width, labelString, options) {
    options = merge({
      fill: 'rgb(0,255,0)',
      fontSize: 14,
      maxWidth: 85
    }, options);
    super();
    this.center.subtractXY(0, 10);

    // @public (read-only) - layout for this type is often relative to this line
    this.legendArrowLine = new ArrowNode(0, 100, width, 100, {
      fill: options.fill,
      stroke: null,
      headHeight: 4,
      headWidth: 5,
      tailWidth: 2,
      lineWidth: 1,
      doubleHead: true
    });
    this.addChild(this.legendArrowLine);

    // create left and right end lines
    const endLinesBottom = this.legendArrowLine.bottom + 2.5;
    const endLinesTop = endLinesBottom - 10;
    const endLinesOptions = {
      stroke: options.fill,
      lineWidth: 1.25
    };
    const leftEndLine = new Line(this.legendArrowLine.left, endLinesBottom, this.legendArrowLine.left, endLinesTop, endLinesOptions);
    const rightEndLine = new Line(this.legendArrowLine.right, endLinesBottom, this.legendArrowLine.right, endLinesTop, endLinesOptions);
    this.legendArrowLine.addChild(leftEndLine);
    this.legendArrowLine.addChild(rightEndLine);
    const legendLabel = new Text(labelString, {
      fill: options.fill,
      fontSize: 14,
      maxWidth: 65
    });
    this.addChild(legendLabel);
    this.mutate(options);

    // positioning
    legendLabel.centerX = this.localBounds.centerX;
    legendLabel.bottom = this.localBounds.maxY - 18;
    this.legendArrowLine.centerX = this.localBounds.centerX;
    this.legendArrowLine.bottom = this.localBounds.maxY;
  }
}
inverseSquareLawCommon.register('ISLCLegendNode', ISLCLegendNode);
export default ISLCLegendNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkFycm93Tm9kZSIsIkxpbmUiLCJOb2RlIiwiVGV4dCIsImludmVyc2VTcXVhcmVMYXdDb21tb24iLCJJU0xDTGVnZW5kTm9kZSIsImNvbnN0cnVjdG9yIiwid2lkdGgiLCJsYWJlbFN0cmluZyIsIm9wdGlvbnMiLCJmaWxsIiwiZm9udFNpemUiLCJtYXhXaWR0aCIsImNlbnRlciIsInN1YnRyYWN0WFkiLCJsZWdlbmRBcnJvd0xpbmUiLCJzdHJva2UiLCJoZWFkSGVpZ2h0IiwiaGVhZFdpZHRoIiwidGFpbFdpZHRoIiwibGluZVdpZHRoIiwiZG91YmxlSGVhZCIsImFkZENoaWxkIiwiZW5kTGluZXNCb3R0b20iLCJib3R0b20iLCJlbmRMaW5lc1RvcCIsImVuZExpbmVzT3B0aW9ucyIsImxlZnRFbmRMaW5lIiwibGVmdCIsInJpZ2h0RW5kTGluZSIsInJpZ2h0IiwibGVnZW5kTGFiZWwiLCJtdXRhdGUiLCJjZW50ZXJYIiwibG9jYWxCb3VuZHMiLCJtYXhZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJU0xDTGVnZW5kTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGxlZ2VuZCBncmFwaGljIGNvbnNpc3Rpbmcgb2YgYSBkb3VibGUtZW5kZWQgYXJyb3csIHR3byBlbmRwb2ludCBsaW5lcywgYW5kIGEgbGFiZWwgc3RyaW5nLiBJbnRlbmRlZCB0byB2aXN1YWxseVxyXG4gKiBpbmRpY2F0ZSBhIGRpc3RhbmNlIHNjYWxlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgQmFybG93IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlIGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGludmVyc2VTcXVhcmVMYXdDb21tb24gZnJvbSAnLi4vaW52ZXJzZVNxdWFyZUxhd0NvbW1vbi5qcyc7XHJcblxyXG5jbGFzcyBJU0xDTGVnZW5kTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggKGluIHZpZXcgY29vcmRpbmF0ZXMpXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsU3RyaW5nXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB3aWR0aCwgbGFiZWxTdHJpbmcsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIGZpbGw6ICdyZ2IoMCwyNTUsMCknLFxyXG4gICAgICBmb250U2l6ZTogMTQsXHJcbiAgICAgIG1heFdpZHRoOiA4NVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmNlbnRlci5zdWJ0cmFjdFhZKCAwLCAxMCApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgLSBsYXlvdXQgZm9yIHRoaXMgdHlwZSBpcyBvZnRlbiByZWxhdGl2ZSB0byB0aGlzIGxpbmVcclxuICAgIHRoaXMubGVnZW5kQXJyb3dMaW5lID0gbmV3IEFycm93Tm9kZSggMCwgMTAwLCB3aWR0aCwgMTAwLCB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuZmlsbCxcclxuICAgICAgc3Ryb2tlOiBudWxsLFxyXG4gICAgICBoZWFkSGVpZ2h0OiA0LFxyXG4gICAgICBoZWFkV2lkdGg6IDUsXHJcbiAgICAgIHRhaWxXaWR0aDogMixcclxuICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICBkb3VibGVIZWFkOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5sZWdlbmRBcnJvd0xpbmUgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgbGVmdCBhbmQgcmlnaHQgZW5kIGxpbmVzXHJcbiAgICBjb25zdCBlbmRMaW5lc0JvdHRvbSA9IHRoaXMubGVnZW5kQXJyb3dMaW5lLmJvdHRvbSArIDIuNTtcclxuICAgIGNvbnN0IGVuZExpbmVzVG9wID0gZW5kTGluZXNCb3R0b20gLSAxMDtcclxuICAgIGNvbnN0IGVuZExpbmVzT3B0aW9ucyA9IHtcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLmZpbGwsXHJcbiAgICAgIGxpbmVXaWR0aDogMS4yNVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBsZWZ0RW5kTGluZSA9IG5ldyBMaW5lKCB0aGlzLmxlZ2VuZEFycm93TGluZS5sZWZ0LCBlbmRMaW5lc0JvdHRvbSwgdGhpcy5sZWdlbmRBcnJvd0xpbmUubGVmdCwgZW5kTGluZXNUb3AsIGVuZExpbmVzT3B0aW9ucyApO1xyXG4gICAgY29uc3QgcmlnaHRFbmRMaW5lID0gbmV3IExpbmUoIHRoaXMubGVnZW5kQXJyb3dMaW5lLnJpZ2h0LCBlbmRMaW5lc0JvdHRvbSwgdGhpcy5sZWdlbmRBcnJvd0xpbmUucmlnaHQsIGVuZExpbmVzVG9wLCBlbmRMaW5lc09wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmxlZ2VuZEFycm93TGluZS5hZGRDaGlsZCggbGVmdEVuZExpbmUgKTtcclxuICAgIHRoaXMubGVnZW5kQXJyb3dMaW5lLmFkZENoaWxkKCByaWdodEVuZExpbmUgKTtcclxuXHJcbiAgICBjb25zdCBsZWdlbmRMYWJlbCA9IG5ldyBUZXh0KCBsYWJlbFN0cmluZywge1xyXG4gICAgICBmaWxsOiBvcHRpb25zLmZpbGwsXHJcbiAgICAgIGZvbnRTaXplOiAxNCxcclxuICAgICAgbWF4V2lkdGg6IDY1XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggbGVnZW5kTGFiZWwgKTtcclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gcG9zaXRpb25pbmdcclxuICAgIGxlZ2VuZExhYmVsLmNlbnRlclggPSB0aGlzLmxvY2FsQm91bmRzLmNlbnRlclg7XHJcbiAgICBsZWdlbmRMYWJlbC5ib3R0b20gPSB0aGlzLmxvY2FsQm91bmRzLm1heFkgLSAxODtcclxuXHJcbiAgICB0aGlzLmxlZ2VuZEFycm93TGluZS5jZW50ZXJYID0gdGhpcy5sb2NhbEJvdW5kcy5jZW50ZXJYO1xyXG4gICAgdGhpcy5sZWdlbmRBcnJvd0xpbmUuYm90dG9tID0gdGhpcy5sb2NhbEJvdW5kcy5tYXhZO1xyXG4gIH1cclxufVxyXG5cclxuaW52ZXJzZVNxdWFyZUxhd0NvbW1vbi5yZWdpc3RlciggJ0lTTENMZWdlbmROb2RlJywgSVNMQ0xlZ2VuZE5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IElTTENMZWdlbmROb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsU0FBUyxNQUFNLHVDQUF1QztBQUM3RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLGdDQUFnQztBQUNqRSxPQUFPQyxzQkFBc0IsTUFBTSw4QkFBOEI7QUFFakUsTUFBTUMsY0FBYyxTQUFTSCxJQUFJLENBQUM7RUFFaEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFHO0lBRXpDQSxPQUFPLEdBQUdWLEtBQUssQ0FBRTtNQUNmVyxJQUFJLEVBQUUsY0FBYztNQUNwQkMsUUFBUSxFQUFFLEVBQUU7TUFDWkMsUUFBUSxFQUFFO0lBQ1osQ0FBQyxFQUFFSCxPQUFRLENBQUM7SUFFWixLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQ0ksTUFBTSxDQUFDQyxVQUFVLENBQUUsQ0FBQyxFQUFFLEVBQUcsQ0FBQzs7SUFFL0I7SUFDQSxJQUFJLENBQUNDLGVBQWUsR0FBRyxJQUFJZixTQUFTLENBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRU8sS0FBSyxFQUFFLEdBQUcsRUFBRTtNQUN4REcsSUFBSSxFQUFFRCxPQUFPLENBQUNDLElBQUk7TUFDbEJNLE1BQU0sRUFBRSxJQUFJO01BQ1pDLFVBQVUsRUFBRSxDQUFDO01BQ2JDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFVBQVUsRUFBRTtJQUNkLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUksQ0FBQ1AsZUFBZ0IsQ0FBQzs7SUFFckM7SUFDQSxNQUFNUSxjQUFjLEdBQUcsSUFBSSxDQUFDUixlQUFlLENBQUNTLE1BQU0sR0FBRyxHQUFHO0lBQ3hELE1BQU1DLFdBQVcsR0FBR0YsY0FBYyxHQUFHLEVBQUU7SUFDdkMsTUFBTUcsZUFBZSxHQUFHO01BQ3RCVixNQUFNLEVBQUVQLE9BQU8sQ0FBQ0MsSUFBSTtNQUNwQlUsU0FBUyxFQUFFO0lBQ2IsQ0FBQztJQUVELE1BQU1PLFdBQVcsR0FBRyxJQUFJMUIsSUFBSSxDQUFFLElBQUksQ0FBQ2MsZUFBZSxDQUFDYSxJQUFJLEVBQUVMLGNBQWMsRUFBRSxJQUFJLENBQUNSLGVBQWUsQ0FBQ2EsSUFBSSxFQUFFSCxXQUFXLEVBQUVDLGVBQWdCLENBQUM7SUFDbEksTUFBTUcsWUFBWSxHQUFHLElBQUk1QixJQUFJLENBQUUsSUFBSSxDQUFDYyxlQUFlLENBQUNlLEtBQUssRUFBRVAsY0FBYyxFQUFFLElBQUksQ0FBQ1IsZUFBZSxDQUFDZSxLQUFLLEVBQUVMLFdBQVcsRUFBRUMsZUFBZ0IsQ0FBQztJQUVySSxJQUFJLENBQUNYLGVBQWUsQ0FBQ08sUUFBUSxDQUFFSyxXQUFZLENBQUM7SUFDNUMsSUFBSSxDQUFDWixlQUFlLENBQUNPLFFBQVEsQ0FBRU8sWUFBYSxDQUFDO0lBRTdDLE1BQU1FLFdBQVcsR0FBRyxJQUFJNUIsSUFBSSxDQUFFSyxXQUFXLEVBQUU7TUFDekNFLElBQUksRUFBRUQsT0FBTyxDQUFDQyxJQUFJO01BQ2xCQyxRQUFRLEVBQUUsRUFBRTtNQUNaQyxRQUFRLEVBQUU7SUFDWixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNVLFFBQVEsQ0FBRVMsV0FBWSxDQUFDO0lBQzVCLElBQUksQ0FBQ0MsTUFBTSxDQUFFdkIsT0FBUSxDQUFDOztJQUV0QjtJQUNBc0IsV0FBVyxDQUFDRSxPQUFPLEdBQUcsSUFBSSxDQUFDQyxXQUFXLENBQUNELE9BQU87SUFDOUNGLFdBQVcsQ0FBQ1AsTUFBTSxHQUFHLElBQUksQ0FBQ1UsV0FBVyxDQUFDQyxJQUFJLEdBQUcsRUFBRTtJQUUvQyxJQUFJLENBQUNwQixlQUFlLENBQUNrQixPQUFPLEdBQUcsSUFBSSxDQUFDQyxXQUFXLENBQUNELE9BQU87SUFDdkQsSUFBSSxDQUFDbEIsZUFBZSxDQUFDUyxNQUFNLEdBQUcsSUFBSSxDQUFDVSxXQUFXLENBQUNDLElBQUk7RUFDckQ7QUFDRjtBQUVBL0Isc0JBQXNCLENBQUNnQyxRQUFRLENBQUUsZ0JBQWdCLEVBQUUvQixjQUFlLENBQUM7QUFFbkUsZUFBZUEsY0FBYyJ9