// Copyright 2017-2021, University of Colorado Boulder

/**
 * Spring view used for the energy screen.
 *
 * @author Matt Pennington (PhET Interactive Simulations)
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { VBox } from '../../../../scenery/js/imports.js';
import MassesAndSpringsConstants from '../../common/MassesAndSpringsConstants.js';
import OneSpringScreenView from '../../common/view/OneSpringScreenView.js';
import massesAndSprings from '../../massesAndSprings.js';
class EnergyScreenView extends OneSpringScreenView {
  /**
   * @param {EnergyModel} model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    super(model, tandem, {
      dampingVisible: true
    });
    // Contains visibility options for the reference lines and displacement arrow
    const indicatorVisibilityControlNode = this.createIndicatorVisibilityPanel(model, false, tandem);

    // VBox that contains all of the panel's content
    const optionsVBox = new VBox({
      spacing: 10,
      children: [indicatorVisibilityControlNode, MassesAndSpringsConstants.LINE_SEPARATOR(165), this.gravityAndDampingControlNode]
    });

    // Panel that will display all the toggleable options.
    const optionsPanel = this.createOptionsPanel(optionsVBox, this.rightPanelAlignGroup, tandem);

    // Contains all of the options for the reference lines, gravity, damping, and toolbox
    const rightPanelsVBox = new VBox({
      children: [optionsPanel, this.toolboxPanel],
      spacing: this.spacing * 0.9
    });
    this.addChild(rightPanelsVBox);
    rightPanelsVBox.moveToBack();
    this.visibleBoundsProperty.link(() => {
      rightPanelsVBox.rightTop = new Vector2(this.panelRightSpacing, this.energyGraphAccordionBox.top);
    });
    this.shelf.rectWidth = 140;
    this.shelf.left = this.energyGraphAccordionBox.right + this.spacing;

    // Move this plane to the back of the scene graph
    this.backgroundDragPlane.moveToBack();
  }
}
massesAndSprings.register('EnergyScreenView', EnergyScreenView);
export default EnergyScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiVkJveCIsIk1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMiLCJPbmVTcHJpbmdTY3JlZW5WaWV3IiwibWFzc2VzQW5kU3ByaW5ncyIsIkVuZXJneVNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidGFuZGVtIiwiZGFtcGluZ1Zpc2libGUiLCJpbmRpY2F0b3JWaXNpYmlsaXR5Q29udHJvbE5vZGUiLCJjcmVhdGVJbmRpY2F0b3JWaXNpYmlsaXR5UGFuZWwiLCJvcHRpb25zVkJveCIsInNwYWNpbmciLCJjaGlsZHJlbiIsIkxJTkVfU0VQQVJBVE9SIiwiZ3Jhdml0eUFuZERhbXBpbmdDb250cm9sTm9kZSIsIm9wdGlvbnNQYW5lbCIsImNyZWF0ZU9wdGlvbnNQYW5lbCIsInJpZ2h0UGFuZWxBbGlnbkdyb3VwIiwicmlnaHRQYW5lbHNWQm94IiwidG9vbGJveFBhbmVsIiwiYWRkQ2hpbGQiLCJtb3ZlVG9CYWNrIiwidmlzaWJsZUJvdW5kc1Byb3BlcnR5IiwibGluayIsInJpZ2h0VG9wIiwicGFuZWxSaWdodFNwYWNpbmciLCJlbmVyZ3lHcmFwaEFjY29yZGlvbkJveCIsInRvcCIsInNoZWxmIiwicmVjdFdpZHRoIiwibGVmdCIsInJpZ2h0IiwiYmFja2dyb3VuZERyYWdQbGFuZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5lcmd5U2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTcHJpbmcgdmlldyB1c2VkIGZvciB0aGUgZW5lcmd5IHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBNYXR0IFBlbm5pbmd0b24gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgRGVuemVsbCBCYXJuZXR0IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9NYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IE9uZVNwcmluZ1NjcmVlblZpZXcgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvT25lU3ByaW5nU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBtYXNzZXNBbmRTcHJpbmdzIGZyb20gJy4uLy4uL21hc3Nlc0FuZFNwcmluZ3MuanMnO1xyXG5cclxuY2xhc3MgRW5lcmd5U2NyZWVuVmlldyBleHRlbmRzIE9uZVNwcmluZ1NjcmVlblZpZXcge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0VuZXJneU1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIHRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHRhbmRlbSwge1xyXG4gICAgICBkYW1waW5nVmlzaWJsZTogdHJ1ZVxyXG4gICAgfSApO1xyXG4gICAgLy8gQ29udGFpbnMgdmlzaWJpbGl0eSBvcHRpb25zIGZvciB0aGUgcmVmZXJlbmNlIGxpbmVzIGFuZCBkaXNwbGFjZW1lbnQgYXJyb3dcclxuICAgIGNvbnN0IGluZGljYXRvclZpc2liaWxpdHlDb250cm9sTm9kZSA9IHRoaXMuY3JlYXRlSW5kaWNhdG9yVmlzaWJpbGl0eVBhbmVsKCBtb2RlbCwgZmFsc2UsIHRhbmRlbSApO1xyXG5cclxuICAgIC8vIFZCb3ggdGhhdCBjb250YWlucyBhbGwgb2YgdGhlIHBhbmVsJ3MgY29udGVudFxyXG4gICAgY29uc3Qgb3B0aW9uc1ZCb3ggPSBuZXcgVkJveCgge1xyXG4gICAgICBzcGFjaW5nOiAxMCxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBpbmRpY2F0b3JWaXNpYmlsaXR5Q29udHJvbE5vZGUsXHJcbiAgICAgICAgTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cy5MSU5FX1NFUEFSQVRPUiggMTY1ICksXHJcbiAgICAgICAgdGhpcy5ncmF2aXR5QW5kRGFtcGluZ0NvbnRyb2xOb2RlXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBQYW5lbCB0aGF0IHdpbGwgZGlzcGxheSBhbGwgdGhlIHRvZ2dsZWFibGUgb3B0aW9ucy5cclxuICAgIGNvbnN0IG9wdGlvbnNQYW5lbCA9IHRoaXMuY3JlYXRlT3B0aW9uc1BhbmVsKCBvcHRpb25zVkJveCwgdGhpcy5yaWdodFBhbmVsQWxpZ25Hcm91cCwgdGFuZGVtICk7XHJcblxyXG4gICAgLy8gQ29udGFpbnMgYWxsIG9mIHRoZSBvcHRpb25zIGZvciB0aGUgcmVmZXJlbmNlIGxpbmVzLCBncmF2aXR5LCBkYW1waW5nLCBhbmQgdG9vbGJveFxyXG4gICAgY29uc3QgcmlnaHRQYW5lbHNWQm94ID0gbmV3IFZCb3goIHsgY2hpbGRyZW46IFsgb3B0aW9uc1BhbmVsLCB0aGlzLnRvb2xib3hQYW5lbCBdLCBzcGFjaW5nOiB0aGlzLnNwYWNpbmcgKiAwLjkgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcmlnaHRQYW5lbHNWQm94ICk7XHJcbiAgICByaWdodFBhbmVsc1ZCb3gubW92ZVRvQmFjaygpO1xyXG5cclxuXHJcbiAgICB0aGlzLnZpc2libGVCb3VuZHNQcm9wZXJ0eS5saW5rKCAoKSA9PiB7XHJcbiAgICAgIHJpZ2h0UGFuZWxzVkJveC5yaWdodFRvcCA9IG5ldyBWZWN0b3IyKCB0aGlzLnBhbmVsUmlnaHRTcGFjaW5nLCB0aGlzLmVuZXJneUdyYXBoQWNjb3JkaW9uQm94LnRvcCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuc2hlbGYucmVjdFdpZHRoID0gMTQwO1xyXG4gICAgdGhpcy5zaGVsZi5sZWZ0ID0gdGhpcy5lbmVyZ3lHcmFwaEFjY29yZGlvbkJveC5yaWdodCArIHRoaXMuc3BhY2luZztcclxuXHJcbiAgICAvLyBNb3ZlIHRoaXMgcGxhbmUgdG8gdGhlIGJhY2sgb2YgdGhlIHNjZW5lIGdyYXBoXHJcbiAgICB0aGlzLmJhY2tncm91bmREcmFnUGxhbmUubW92ZVRvQmFjaygpO1xyXG4gIH1cclxufVxyXG5cclxubWFzc2VzQW5kU3ByaW5ncy5yZWdpc3RlciggJ0VuZXJneVNjcmVlblZpZXcnLCBFbmVyZ3lTY3JlZW5WaWV3ICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVuZXJneVNjcmVlblZpZXc7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQztBQUNqRixPQUFPQyxtQkFBbUIsTUFBTSwwQ0FBMEM7QUFDMUUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBRXhELE1BQU1DLGdCQUFnQixTQUFTRixtQkFBbUIsQ0FBQztFQUVqRDtBQUNGO0FBQ0E7QUFDQTtFQUNFRyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRztJQUUzQixLQUFLLENBQUVELEtBQUssRUFBRUMsTUFBTSxFQUFFO01BQ3BCQyxjQUFjLEVBQUU7SUFDbEIsQ0FBRSxDQUFDO0lBQ0g7SUFDQSxNQUFNQyw4QkFBOEIsR0FBRyxJQUFJLENBQUNDLDhCQUE4QixDQUFFSixLQUFLLEVBQUUsS0FBSyxFQUFFQyxNQUFPLENBQUM7O0lBRWxHO0lBQ0EsTUFBTUksV0FBVyxHQUFHLElBQUlYLElBQUksQ0FBRTtNQUM1QlksT0FBTyxFQUFFLEVBQUU7TUFDWEMsUUFBUSxFQUFFLENBQ1JKLDhCQUE4QixFQUM5QlIseUJBQXlCLENBQUNhLGNBQWMsQ0FBRSxHQUFJLENBQUMsRUFDL0MsSUFBSSxDQUFDQyw0QkFBNEI7SUFFckMsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUksQ0FBQ0Msa0JBQWtCLENBQUVOLFdBQVcsRUFBRSxJQUFJLENBQUNPLG9CQUFvQixFQUFFWCxNQUFPLENBQUM7O0lBRTlGO0lBQ0EsTUFBTVksZUFBZSxHQUFHLElBQUluQixJQUFJLENBQUU7TUFBRWEsUUFBUSxFQUFFLENBQUVHLFlBQVksRUFBRSxJQUFJLENBQUNJLFlBQVksQ0FBRTtNQUFFUixPQUFPLEVBQUUsSUFBSSxDQUFDQSxPQUFPLEdBQUc7SUFBSSxDQUFFLENBQUM7SUFDbEgsSUFBSSxDQUFDUyxRQUFRLENBQUVGLGVBQWdCLENBQUM7SUFDaENBLGVBQWUsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFHNUIsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQ0MsSUFBSSxDQUFFLE1BQU07TUFDckNMLGVBQWUsQ0FBQ00sUUFBUSxHQUFHLElBQUkxQixPQUFPLENBQUUsSUFBSSxDQUFDMkIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQ0MsR0FBSSxDQUFDO0lBQ3BHLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxTQUFTLEdBQUcsR0FBRztJQUMxQixJQUFJLENBQUNELEtBQUssQ0FBQ0UsSUFBSSxHQUFHLElBQUksQ0FBQ0osdUJBQXVCLENBQUNLLEtBQUssR0FBRyxJQUFJLENBQUNwQixPQUFPOztJQUVuRTtJQUNBLElBQUksQ0FBQ3FCLG1CQUFtQixDQUFDWCxVQUFVLENBQUMsQ0FBQztFQUN2QztBQUNGO0FBRUFuQixnQkFBZ0IsQ0FBQytCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRTlCLGdCQUFpQixDQUFDO0FBQ2pFLGVBQWVBLGdCQUFnQiJ9