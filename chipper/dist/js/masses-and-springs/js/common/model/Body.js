// Copyright 2016-2022, University of Colorado Boulder

/**
 * Responsible for the attributes associated with each planet.
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 * @author Matt Pennington (PhET Interactive Simulations)
 */

import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import massesAndSprings from '../../massesAndSprings.js';
import MassesAndSpringsStrings from '../../MassesAndSpringsStrings.js';
import MassesAndSpringsConstants from '../MassesAndSpringsConstants.js';
const bodyCustomString = MassesAndSpringsStrings.body.custom;
const bodyEarthString = MassesAndSpringsStrings.body.earth;
const bodyJupiterString = MassesAndSpringsStrings.body.jupiter;
const bodyMoonString = MassesAndSpringsStrings.body.moon;
const bodyPlanetXString = MassesAndSpringsStrings.body.planetX;
class Body {
  /**
   * @param {string} title - name of body.
   * @param {number|null} gravity - gravitational acceleration of body.
   */
  constructor(title, gravity) {
    // @public {string}
    this.title = title;

    // @public {number|null} gravity acceleration (m/s^2)
    this.gravity = gravity;
  }
}
massesAndSprings.register('Body', Body);

// @public {Body} (read-only) body objects for gravity panel
Body.MOON = new Body(bodyMoonString, MassesAndSpringsConstants.MOON_GRAVITY);
Body.EARTH = new Body(bodyEarthString, MassesAndSpringsConstants.EARTH_GRAVITY);
Body.JUPITER = new Body(bodyJupiterString, MassesAndSpringsConstants.JUPITER_GRAVITY);
Body.PLANET_X = new Body(bodyPlanetXString, MassesAndSpringsConstants.PLANET_X);
Body.CUSTOM = new Body(bodyCustomString, MassesAndSpringsConstants.EARTH_GRAVITY);
Body.BODIES = [Body.MOON, Body.EARTH, Body.JUPITER, Body.PLANET_X, Body.CUSTOM];
Body.BodyIO = new IOType('BodyIO', {
  valueType: Body,
  documentation: 'Planet which determines the force of gravity.',
  supertype: ReferenceIO(IOType.ObjectIO)
});
export default Body;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJSZWZlcmVuY2VJTyIsIm1hc3Nlc0FuZFNwcmluZ3MiLCJNYXNzZXNBbmRTcHJpbmdzU3RyaW5ncyIsIk1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMiLCJib2R5Q3VzdG9tU3RyaW5nIiwiYm9keSIsImN1c3RvbSIsImJvZHlFYXJ0aFN0cmluZyIsImVhcnRoIiwiYm9keUp1cGl0ZXJTdHJpbmciLCJqdXBpdGVyIiwiYm9keU1vb25TdHJpbmciLCJtb29uIiwiYm9keVBsYW5ldFhTdHJpbmciLCJwbGFuZXRYIiwiQm9keSIsImNvbnN0cnVjdG9yIiwidGl0bGUiLCJncmF2aXR5IiwicmVnaXN0ZXIiLCJNT09OIiwiTU9PTl9HUkFWSVRZIiwiRUFSVEgiLCJFQVJUSF9HUkFWSVRZIiwiSlVQSVRFUiIsIkpVUElURVJfR1JBVklUWSIsIlBMQU5FVF9YIiwiQ1VTVE9NIiwiQk9ESUVTIiwiQm9keUlPIiwidmFsdWVUeXBlIiwiZG9jdW1lbnRhdGlvbiIsInN1cGVydHlwZSIsIk9iamVjdElPIl0sInNvdXJjZXMiOlsiQm9keS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZXNwb25zaWJsZSBmb3IgdGhlIGF0dHJpYnV0ZXMgYXNzb2NpYXRlZCB3aXRoIGVhY2ggcGxhbmV0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIERlbnplbGwgQmFybmV0dCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBNYXR0IFBlbm5pbmd0b24gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUlPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9SZWZlcmVuY2VJTy5qcyc7XHJcbmltcG9ydCBtYXNzZXNBbmRTcHJpbmdzIGZyb20gJy4uLy4uL21hc3Nlc0FuZFNwcmluZ3MuanMnO1xyXG5pbXBvcnQgTWFzc2VzQW5kU3ByaW5nc1N0cmluZ3MgZnJvbSAnLi4vLi4vTWFzc2VzQW5kU3ByaW5nc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cyBmcm9tICcuLi9NYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLmpzJztcclxuXHJcbmNvbnN0IGJvZHlDdXN0b21TdHJpbmcgPSBNYXNzZXNBbmRTcHJpbmdzU3RyaW5ncy5ib2R5LmN1c3RvbTtcclxuY29uc3QgYm9keUVhcnRoU3RyaW5nID0gTWFzc2VzQW5kU3ByaW5nc1N0cmluZ3MuYm9keS5lYXJ0aDtcclxuY29uc3QgYm9keUp1cGl0ZXJTdHJpbmcgPSBNYXNzZXNBbmRTcHJpbmdzU3RyaW5ncy5ib2R5Lmp1cGl0ZXI7XHJcbmNvbnN0IGJvZHlNb29uU3RyaW5nID0gTWFzc2VzQW5kU3ByaW5nc1N0cmluZ3MuYm9keS5tb29uO1xyXG5jb25zdCBib2R5UGxhbmV0WFN0cmluZyA9IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzLmJvZHkucGxhbmV0WDtcclxuXHJcbmNsYXNzIEJvZHkge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZSAtIG5hbWUgb2YgYm9keS5cclxuICAgKiBAcGFyYW0ge251bWJlcnxudWxsfSBncmF2aXR5IC0gZ3Jhdml0YXRpb25hbCBhY2NlbGVyYXRpb24gb2YgYm9keS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGl0bGUsIGdyYXZpdHkgKSB7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7c3RyaW5nfVxyXG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge251bWJlcnxudWxsfSBncmF2aXR5IGFjY2VsZXJhdGlvbiAobS9zXjIpXHJcbiAgICB0aGlzLmdyYXZpdHkgPSBncmF2aXR5O1xyXG4gIH1cclxufVxyXG5cclxubWFzc2VzQW5kU3ByaW5ncy5yZWdpc3RlciggJ0JvZHknLCBCb2R5ICk7XHJcblxyXG4vLyBAcHVibGljIHtCb2R5fSAocmVhZC1vbmx5KSBib2R5IG9iamVjdHMgZm9yIGdyYXZpdHkgcGFuZWxcclxuQm9keS5NT09OID0gbmV3IEJvZHkoIGJvZHlNb29uU3RyaW5nLCBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLk1PT05fR1JBVklUWSApO1xyXG5Cb2R5LkVBUlRIID0gbmV3IEJvZHkoIGJvZHlFYXJ0aFN0cmluZywgTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cy5FQVJUSF9HUkFWSVRZICk7XHJcbkJvZHkuSlVQSVRFUiA9IG5ldyBCb2R5KCBib2R5SnVwaXRlclN0cmluZywgTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cy5KVVBJVEVSX0dSQVZJVFkgKTtcclxuQm9keS5QTEFORVRfWCA9IG5ldyBCb2R5KCBib2R5UGxhbmV0WFN0cmluZywgTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cy5QTEFORVRfWCApO1xyXG5Cb2R5LkNVU1RPTSA9IG5ldyBCb2R5KCBib2R5Q3VzdG9tU3RyaW5nLCBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLkVBUlRIX0dSQVZJVFkgKTtcclxuQm9keS5CT0RJRVMgPSBbIEJvZHkuTU9PTiwgQm9keS5FQVJUSCwgQm9keS5KVVBJVEVSLCBCb2R5LlBMQU5FVF9YLCBCb2R5LkNVU1RPTSBdO1xyXG5cclxuQm9keS5Cb2R5SU8gPSBuZXcgSU9UeXBlKCAnQm9keUlPJywge1xyXG4gIHZhbHVlVHlwZTogQm9keSxcclxuICBkb2N1bWVudGF0aW9uOiAnUGxhbmV0IHdoaWNoIGRldGVybWluZXMgdGhlIGZvcmNlIG9mIGdyYXZpdHkuJyxcclxuICBzdXBlcnR5cGU6IFJlZmVyZW5jZUlPKCBJT1R5cGUuT2JqZWN0SU8gKVxyXG59ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCb2R5OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSx1Q0FBdUM7QUFDMUQsT0FBT0MsV0FBVyxNQUFNLDRDQUE0QztBQUNwRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBQ3RFLE9BQU9DLHlCQUF5QixNQUFNLGlDQUFpQztBQUV2RSxNQUFNQyxnQkFBZ0IsR0FBR0YsdUJBQXVCLENBQUNHLElBQUksQ0FBQ0MsTUFBTTtBQUM1RCxNQUFNQyxlQUFlLEdBQUdMLHVCQUF1QixDQUFDRyxJQUFJLENBQUNHLEtBQUs7QUFDMUQsTUFBTUMsaUJBQWlCLEdBQUdQLHVCQUF1QixDQUFDRyxJQUFJLENBQUNLLE9BQU87QUFDOUQsTUFBTUMsY0FBYyxHQUFHVCx1QkFBdUIsQ0FBQ0csSUFBSSxDQUFDTyxJQUFJO0FBQ3hELE1BQU1DLGlCQUFpQixHQUFHWCx1QkFBdUIsQ0FBQ0csSUFBSSxDQUFDUyxPQUFPO0FBRTlELE1BQU1DLElBQUksQ0FBQztFQUNUO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFHO0lBRTVCO0lBQ0EsSUFBSSxDQUFDRCxLQUFLLEdBQUdBLEtBQUs7O0lBRWxCO0lBQ0EsSUFBSSxDQUFDQyxPQUFPLEdBQUdBLE9BQU87RUFDeEI7QUFDRjtBQUVBakIsZ0JBQWdCLENBQUNrQixRQUFRLENBQUUsTUFBTSxFQUFFSixJQUFLLENBQUM7O0FBRXpDO0FBQ0FBLElBQUksQ0FBQ0ssSUFBSSxHQUFHLElBQUlMLElBQUksQ0FBRUosY0FBYyxFQUFFUix5QkFBeUIsQ0FBQ2tCLFlBQWEsQ0FBQztBQUM5RU4sSUFBSSxDQUFDTyxLQUFLLEdBQUcsSUFBSVAsSUFBSSxDQUFFUixlQUFlLEVBQUVKLHlCQUF5QixDQUFDb0IsYUFBYyxDQUFDO0FBQ2pGUixJQUFJLENBQUNTLE9BQU8sR0FBRyxJQUFJVCxJQUFJLENBQUVOLGlCQUFpQixFQUFFTix5QkFBeUIsQ0FBQ3NCLGVBQWdCLENBQUM7QUFDdkZWLElBQUksQ0FBQ1csUUFBUSxHQUFHLElBQUlYLElBQUksQ0FBRUYsaUJBQWlCLEVBQUVWLHlCQUF5QixDQUFDdUIsUUFBUyxDQUFDO0FBQ2pGWCxJQUFJLENBQUNZLE1BQU0sR0FBRyxJQUFJWixJQUFJLENBQUVYLGdCQUFnQixFQUFFRCx5QkFBeUIsQ0FBQ29CLGFBQWMsQ0FBQztBQUNuRlIsSUFBSSxDQUFDYSxNQUFNLEdBQUcsQ0FBRWIsSUFBSSxDQUFDSyxJQUFJLEVBQUVMLElBQUksQ0FBQ08sS0FBSyxFQUFFUCxJQUFJLENBQUNTLE9BQU8sRUFBRVQsSUFBSSxDQUFDVyxRQUFRLEVBQUVYLElBQUksQ0FBQ1ksTUFBTSxDQUFFO0FBRWpGWixJQUFJLENBQUNjLE1BQU0sR0FBRyxJQUFJOUIsTUFBTSxDQUFFLFFBQVEsRUFBRTtFQUNsQytCLFNBQVMsRUFBRWYsSUFBSTtFQUNmZ0IsYUFBYSxFQUFFLCtDQUErQztFQUM5REMsU0FBUyxFQUFFaEMsV0FBVyxDQUFFRCxNQUFNLENBQUNrQyxRQUFTO0FBQzFDLENBQUUsQ0FBQztBQUVILGVBQWVsQixJQUFJIn0=