// Copyright 2016-2022, University of Colorado Boulder

/**
 * Common ScreenView for using two masses.
 *
 * @author Matt Pennington (PhET Interactive Simulations)
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { HBox, Text } from '../../../../scenery/js/imports.js';
import massesAndSprings from '../../massesAndSprings.js';
import MassesAndSpringsStrings from '../../MassesAndSpringsStrings.js';
import MassesAndSpringsConstants from '../MassesAndSpringsConstants.js';
import MassesAndSpringsColors from './MassesAndSpringsColors.js';
import MovableLineNode from './MovableLineNode.js';
import ReferenceLineNode from './ReferenceLineNode.js';
import SpringHangerNode from './SpringHangerNode.js';
import SpringScreenView from './SpringScreenView.js';
const largeString = MassesAndSpringsStrings.large;
const smallString = MassesAndSpringsStrings.small;
class TwoSpringScreenView extends SpringScreenView {
  /**
   * @param {MassesAndSpringsModel} model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    super(model, tandem);
    // @public {SpringHangerNode} Spring Hanger Node
    this.springHangerNode = new SpringHangerNode(model.springs, this.modelViewTransform, tandem.createTandem('springHangerNode'));
    const leftSpring = this.model.firstSpring;
    const rightSpring = this.model.secondSpring;

    // @public {StopperButtonNode}
    this.firstSpringStopperButtonNode = this.createStopperButton(leftSpring, tandem);
    this.firstSpringStopperButtonNode.right = this.springHangerNode.left - this.spacing;

    // @public {StopperButtonNode}
    this.secondSpringStopperButtonNode = this.createStopperButton(rightSpring, tandem);
    this.secondSpringStopperButtonNode.left = this.springHangerNode.right + this.spacing;
    leftSpring.buttonEnabledProperty.link(enabled => {
      this.firstSpringStopperButtonNode.enabled = enabled;
    });
    rightSpring.buttonEnabledProperty.link(enabled => {
      this.secondSpringStopperButtonNode.enabled = enabled;
    });

    // Spring Constant Control Panels
    const minMaxLabels = [new Text(smallString, {
      font: MassesAndSpringsConstants.LABEL_FONT,
      maxWidth: 40
    }), new Text(largeString, {
      font: MassesAndSpringsConstants.LABEL_FONT,
      maxWidth: 40
    })];

    // @public {SpringConstantPanel}
    this.firstSpringConstantControlPanel = this.createSpringConstantPanel(0, minMaxLabels, tandem);
    this.firstSpringConstantControlPanel.right = this.firstSpringStopperButtonNode.left - this.spacing;

    // @public {SpringConstantPanel}
    this.secondSpringConstantControlPanel = this.createSpringConstantPanel(1, minMaxLabels, tandem);
    this.secondSpringConstantControlPanel.left = this.secondSpringStopperButtonNode.right + this.spacing;
    const xBoundsLimit = this.springHangerNode.centerX + 5;

    // @public {MovableLineNode} Initializes red movable reference line
    this.movableLineNode = new MovableLineNode(this.visibleBoundsProperty.value.center.minus(new Vector2(45, 0)), 210, model.movableLineVisibleProperty, new Bounds2(xBoundsLimit, 55, xBoundsLimit, 600), tandem.createTandem('movableLineNode'));

    /**
     * @param {Spring} spring
     * @returns {ReferenceLineNode}
     */
    const createNaturalLineNode = spring => new ReferenceLineNode(this.modelViewTransform, spring, spring.bottomProperty, model.naturalLengthVisibleProperty, {
      stroke: MassesAndSpringsColors.unstretchedLengthProperty,
      // Naming convention pulled from basics version.
      fixedPosition: true
    });

    // @public {ReferenceLineNode} Initializes natural line for springs
    this.firstNaturalLengthLineNode = createNaturalLineNode(model.firstSpring);
    this.secondNaturalLengthLineNode = createNaturalLineNode(model.secondSpring);
    this.resetAllButton.addListener(() => {
      this.movableLineNode.reset();
    });

    // @public {HBox} Contains Panels/Nodes that hover near the spring system at the center of the screen.
    this.springSystemControlsNode = new HBox({
      children: [this.firstSpringConstantControlPanel, this.firstSpringStopperButtonNode, this.springHangerNode, this.secondSpringStopperButtonNode, this.secondSpringConstantControlPanel],
      spacing: this.spacing,
      align: 'top',
      excludeInvisibleChildrenFromBounds: false
    });

    // Adjust the floating panels to the visibleBounds of the screen.
    this.visibleBoundsProperty.link(visibleBounds => {
      this.adjustViewComponents(false, visibleBounds);
    });
  }
}
massesAndSprings.register('TwoSpringScreenView', TwoSpringScreenView);
export default TwoSpringScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiVmVjdG9yMiIsIkhCb3giLCJUZXh0IiwibWFzc2VzQW5kU3ByaW5ncyIsIk1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzIiwiTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cyIsIk1hc3Nlc0FuZFNwcmluZ3NDb2xvcnMiLCJNb3ZhYmxlTGluZU5vZGUiLCJSZWZlcmVuY2VMaW5lTm9kZSIsIlNwcmluZ0hhbmdlck5vZGUiLCJTcHJpbmdTY3JlZW5WaWV3IiwibGFyZ2VTdHJpbmciLCJsYXJnZSIsInNtYWxsU3RyaW5nIiwic21hbGwiLCJUd29TcHJpbmdTY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRhbmRlbSIsInNwcmluZ0hhbmdlck5vZGUiLCJzcHJpbmdzIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiY3JlYXRlVGFuZGVtIiwibGVmdFNwcmluZyIsImZpcnN0U3ByaW5nIiwicmlnaHRTcHJpbmciLCJzZWNvbmRTcHJpbmciLCJmaXJzdFNwcmluZ1N0b3BwZXJCdXR0b25Ob2RlIiwiY3JlYXRlU3RvcHBlckJ1dHRvbiIsInJpZ2h0IiwibGVmdCIsInNwYWNpbmciLCJzZWNvbmRTcHJpbmdTdG9wcGVyQnV0dG9uTm9kZSIsImJ1dHRvbkVuYWJsZWRQcm9wZXJ0eSIsImxpbmsiLCJlbmFibGVkIiwibWluTWF4TGFiZWxzIiwiZm9udCIsIkxBQkVMX0ZPTlQiLCJtYXhXaWR0aCIsImZpcnN0U3ByaW5nQ29uc3RhbnRDb250cm9sUGFuZWwiLCJjcmVhdGVTcHJpbmdDb25zdGFudFBhbmVsIiwic2Vjb25kU3ByaW5nQ29uc3RhbnRDb250cm9sUGFuZWwiLCJ4Qm91bmRzTGltaXQiLCJjZW50ZXJYIiwibW92YWJsZUxpbmVOb2RlIiwidmlzaWJsZUJvdW5kc1Byb3BlcnR5IiwidmFsdWUiLCJjZW50ZXIiLCJtaW51cyIsIm1vdmFibGVMaW5lVmlzaWJsZVByb3BlcnR5IiwiY3JlYXRlTmF0dXJhbExpbmVOb2RlIiwic3ByaW5nIiwiYm90dG9tUHJvcGVydHkiLCJuYXR1cmFsTGVuZ3RoVmlzaWJsZVByb3BlcnR5Iiwic3Ryb2tlIiwidW5zdHJldGNoZWRMZW5ndGhQcm9wZXJ0eSIsImZpeGVkUG9zaXRpb24iLCJmaXJzdE5hdHVyYWxMZW5ndGhMaW5lTm9kZSIsInNlY29uZE5hdHVyYWxMZW5ndGhMaW5lTm9kZSIsInJlc2V0QWxsQnV0dG9uIiwiYWRkTGlzdGVuZXIiLCJyZXNldCIsInNwcmluZ1N5c3RlbUNvbnRyb2xzTm9kZSIsImNoaWxkcmVuIiwiYWxpZ24iLCJleGNsdWRlSW52aXNpYmxlQ2hpbGRyZW5Gcm9tQm91bmRzIiwidmlzaWJsZUJvdW5kcyIsImFkanVzdFZpZXdDb21wb25lbnRzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUd29TcHJpbmdTY3JlZW5WaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbW1vbiBTY3JlZW5WaWV3IGZvciB1c2luZyB0d28gbWFzc2VzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hdHQgUGVubmluZ3RvbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBEZW56ZWxsIEJhcm5ldHQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbWFzc2VzQW5kU3ByaW5ncyBmcm9tICcuLi8uLi9tYXNzZXNBbmRTcHJpbmdzLmpzJztcclxuaW1wb3J0IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzIGZyb20gJy4uLy4uL01hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzLmpzJztcclxuaW1wb3J0IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMgZnJvbSAnLi4vTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBNYXNzZXNBbmRTcHJpbmdzQ29sb3JzIGZyb20gJy4vTWFzc2VzQW5kU3ByaW5nc0NvbG9ycy5qcyc7XHJcbmltcG9ydCBNb3ZhYmxlTGluZU5vZGUgZnJvbSAnLi9Nb3ZhYmxlTGluZU5vZGUuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlTGluZU5vZGUgZnJvbSAnLi9SZWZlcmVuY2VMaW5lTm9kZS5qcyc7XHJcbmltcG9ydCBTcHJpbmdIYW5nZXJOb2RlIGZyb20gJy4vU3ByaW5nSGFuZ2VyTm9kZS5qcyc7XHJcbmltcG9ydCBTcHJpbmdTY3JlZW5WaWV3IGZyb20gJy4vU3ByaW5nU2NyZWVuVmlldy5qcyc7XHJcblxyXG5jb25zdCBsYXJnZVN0cmluZyA9IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzLmxhcmdlO1xyXG5jb25zdCBzbWFsbFN0cmluZyA9IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzLnNtYWxsO1xyXG5cclxuY2xhc3MgVHdvU3ByaW5nU2NyZWVuVmlldyBleHRlbmRzIFNwcmluZ1NjcmVlblZpZXcge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge01hc3Nlc0FuZFNwcmluZ3NNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCB0YW5kZW0gKSB7XHJcbiAgICBzdXBlciggbW9kZWwsIHRhbmRlbSApO1xyXG4gICAgLy8gQHB1YmxpYyB7U3ByaW5nSGFuZ2VyTm9kZX0gU3ByaW5nIEhhbmdlciBOb2RlXHJcbiAgICB0aGlzLnNwcmluZ0hhbmdlck5vZGUgPSBuZXcgU3ByaW5nSGFuZ2VyTm9kZShcclxuICAgICAgbW9kZWwuc3ByaW5ncyxcclxuICAgICAgdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0sXHJcbiAgICAgIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzcHJpbmdIYW5nZXJOb2RlJyApICk7XHJcbiAgICBjb25zdCBsZWZ0U3ByaW5nID0gdGhpcy5tb2RlbC5maXJzdFNwcmluZztcclxuICAgIGNvbnN0IHJpZ2h0U3ByaW5nID0gdGhpcy5tb2RlbC5zZWNvbmRTcHJpbmc7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7U3RvcHBlckJ1dHRvbk5vZGV9XHJcbiAgICB0aGlzLmZpcnN0U3ByaW5nU3RvcHBlckJ1dHRvbk5vZGUgPSB0aGlzLmNyZWF0ZVN0b3BwZXJCdXR0b24oIGxlZnRTcHJpbmcsIHRhbmRlbSApO1xyXG4gICAgdGhpcy5maXJzdFNwcmluZ1N0b3BwZXJCdXR0b25Ob2RlLnJpZ2h0ID0gdGhpcy5zcHJpbmdIYW5nZXJOb2RlLmxlZnQgLSB0aGlzLnNwYWNpbmc7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7U3RvcHBlckJ1dHRvbk5vZGV9XHJcbiAgICB0aGlzLnNlY29uZFNwcmluZ1N0b3BwZXJCdXR0b25Ob2RlID0gdGhpcy5jcmVhdGVTdG9wcGVyQnV0dG9uKCByaWdodFNwcmluZywgdGFuZGVtICk7XHJcbiAgICB0aGlzLnNlY29uZFNwcmluZ1N0b3BwZXJCdXR0b25Ob2RlLmxlZnQgPSB0aGlzLnNwcmluZ0hhbmdlck5vZGUucmlnaHQgKyB0aGlzLnNwYWNpbmc7XHJcblxyXG4gICAgbGVmdFNwcmluZy5idXR0b25FbmFibGVkUHJvcGVydHkubGluayggZW5hYmxlZCA9PiB7XHJcbiAgICAgIHRoaXMuZmlyc3RTcHJpbmdTdG9wcGVyQnV0dG9uTm9kZS5lbmFibGVkID0gZW5hYmxlZDtcclxuICAgIH0gKTtcclxuXHJcbiAgICByaWdodFNwcmluZy5idXR0b25FbmFibGVkUHJvcGVydHkubGluayggZW5hYmxlZCA9PiB7XHJcbiAgICAgIHRoaXMuc2Vjb25kU3ByaW5nU3RvcHBlckJ1dHRvbk5vZGUuZW5hYmxlZCA9IGVuYWJsZWQ7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gU3ByaW5nIENvbnN0YW50IENvbnRyb2wgUGFuZWxzXHJcbiAgICBjb25zdCBtaW5NYXhMYWJlbHMgPSBbXHJcbiAgICAgIG5ldyBUZXh0KCBzbWFsbFN0cmluZywgeyBmb250OiBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLkxBQkVMX0ZPTlQsIG1heFdpZHRoOiA0MCB9ICksXHJcbiAgICAgIG5ldyBUZXh0KCBsYXJnZVN0cmluZywgeyBmb250OiBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLkxBQkVMX0ZPTlQsIG1heFdpZHRoOiA0MCB9IClcclxuICAgIF07XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7U3ByaW5nQ29uc3RhbnRQYW5lbH1cclxuICAgIHRoaXMuZmlyc3RTcHJpbmdDb25zdGFudENvbnRyb2xQYW5lbCA9IHRoaXMuY3JlYXRlU3ByaW5nQ29uc3RhbnRQYW5lbCggMCwgbWluTWF4TGFiZWxzLCB0YW5kZW0gKTtcclxuICAgIHRoaXMuZmlyc3RTcHJpbmdDb25zdGFudENvbnRyb2xQYW5lbC5yaWdodCA9IHRoaXMuZmlyc3RTcHJpbmdTdG9wcGVyQnV0dG9uTm9kZS5sZWZ0IC0gdGhpcy5zcGFjaW5nO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1NwcmluZ0NvbnN0YW50UGFuZWx9XHJcbiAgICB0aGlzLnNlY29uZFNwcmluZ0NvbnN0YW50Q29udHJvbFBhbmVsID0gdGhpcy5jcmVhdGVTcHJpbmdDb25zdGFudFBhbmVsKCAxLCBtaW5NYXhMYWJlbHMsIHRhbmRlbSApO1xyXG4gICAgdGhpcy5zZWNvbmRTcHJpbmdDb25zdGFudENvbnRyb2xQYW5lbC5sZWZ0ID0gdGhpcy5zZWNvbmRTcHJpbmdTdG9wcGVyQnV0dG9uTm9kZS5yaWdodCArIHRoaXMuc3BhY2luZztcclxuXHJcbiAgICBjb25zdCB4Qm91bmRzTGltaXQgPSB0aGlzLnNwcmluZ0hhbmdlck5vZGUuY2VudGVyWCArIDU7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7TW92YWJsZUxpbmVOb2RlfSBJbml0aWFsaXplcyByZWQgbW92YWJsZSByZWZlcmVuY2UgbGluZVxyXG4gICAgdGhpcy5tb3ZhYmxlTGluZU5vZGUgPSBuZXcgTW92YWJsZUxpbmVOb2RlKFxyXG4gICAgICB0aGlzLnZpc2libGVCb3VuZHNQcm9wZXJ0eS52YWx1ZS5jZW50ZXIubWludXMoIG5ldyBWZWN0b3IyKCA0NSwgMCApICksXHJcbiAgICAgIDIxMCxcclxuICAgICAgbW9kZWwubW92YWJsZUxpbmVWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIG5ldyBCb3VuZHMyKCB4Qm91bmRzTGltaXQsIDU1LCB4Qm91bmRzTGltaXQsIDYwMCApLFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW92YWJsZUxpbmVOb2RlJyApXHJcbiAgICApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtTcHJpbmd9IHNwcmluZ1xyXG4gICAgICogQHJldHVybnMge1JlZmVyZW5jZUxpbmVOb2RlfVxyXG4gICAgICovXHJcbiAgICBjb25zdCBjcmVhdGVOYXR1cmFsTGluZU5vZGUgPSBzcHJpbmcgPT4gbmV3IFJlZmVyZW5jZUxpbmVOb2RlKFxyXG4gICAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgc3ByaW5nLFxyXG4gICAgICBzcHJpbmcuYm90dG9tUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLm5hdHVyYWxMZW5ndGhWaXNpYmxlUHJvcGVydHksIHtcclxuICAgICAgICBzdHJva2U6IE1hc3Nlc0FuZFNwcmluZ3NDb2xvcnMudW5zdHJldGNoZWRMZW5ndGhQcm9wZXJ0eSwgLy8gTmFtaW5nIGNvbnZlbnRpb24gcHVsbGVkIGZyb20gYmFzaWNzIHZlcnNpb24uXHJcbiAgICAgICAgZml4ZWRQb3NpdGlvbjogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1JlZmVyZW5jZUxpbmVOb2RlfSBJbml0aWFsaXplcyBuYXR1cmFsIGxpbmUgZm9yIHNwcmluZ3NcclxuICAgIHRoaXMuZmlyc3ROYXR1cmFsTGVuZ3RoTGluZU5vZGUgPSBjcmVhdGVOYXR1cmFsTGluZU5vZGUoIG1vZGVsLmZpcnN0U3ByaW5nICk7XHJcbiAgICB0aGlzLnNlY29uZE5hdHVyYWxMZW5ndGhMaW5lTm9kZSA9IGNyZWF0ZU5hdHVyYWxMaW5lTm9kZSggbW9kZWwuc2Vjb25kU3ByaW5nICk7XHJcblxyXG4gICAgdGhpcy5yZXNldEFsbEJ1dHRvbi5hZGRMaXN0ZW5lciggKCkgPT4ge1xyXG4gICAgICB0aGlzLm1vdmFibGVMaW5lTm9kZS5yZXNldCgpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge0hCb3h9IENvbnRhaW5zIFBhbmVscy9Ob2RlcyB0aGF0IGhvdmVyIG5lYXIgdGhlIHNwcmluZyBzeXN0ZW0gYXQgdGhlIGNlbnRlciBvZiB0aGUgc2NyZWVuLlxyXG4gICAgdGhpcy5zcHJpbmdTeXN0ZW1Db250cm9sc05vZGUgPSBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIHRoaXMuZmlyc3RTcHJpbmdDb25zdGFudENvbnRyb2xQYW5lbCxcclxuICAgICAgICB0aGlzLmZpcnN0U3ByaW5nU3RvcHBlckJ1dHRvbk5vZGUsXHJcbiAgICAgICAgdGhpcy5zcHJpbmdIYW5nZXJOb2RlLFxyXG4gICAgICAgIHRoaXMuc2Vjb25kU3ByaW5nU3RvcHBlckJ1dHRvbk5vZGUsXHJcbiAgICAgICAgdGhpcy5zZWNvbmRTcHJpbmdDb25zdGFudENvbnRyb2xQYW5lbFxyXG4gICAgICBdLFxyXG4gICAgICBzcGFjaW5nOiB0aGlzLnNwYWNpbmcsXHJcbiAgICAgIGFsaWduOiAndG9wJyxcclxuICAgICAgZXhjbHVkZUludmlzaWJsZUNoaWxkcmVuRnJvbUJvdW5kczogZmFsc2VcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBBZGp1c3QgdGhlIGZsb2F0aW5nIHBhbmVscyB0byB0aGUgdmlzaWJsZUJvdW5kcyBvZiB0aGUgc2NyZWVuLlxyXG4gICAgdGhpcy52aXNpYmxlQm91bmRzUHJvcGVydHkubGluayggdmlzaWJsZUJvdW5kcyA9PiB7XHJcbiAgICAgIHRoaXMuYWRqdXN0Vmlld0NvbXBvbmVudHMoIGZhbHNlLCB2aXNpYmxlQm91bmRzICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5tYXNzZXNBbmRTcHJpbmdzLnJlZ2lzdGVyKCAnVHdvU3ByaW5nU2NyZWVuVmlldycsIFR3b1NwcmluZ1NjcmVlblZpZXcgKTtcclxuZXhwb3J0IGRlZmF1bHQgVHdvU3ByaW5nU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx1QkFBdUIsTUFBTSxrQ0FBa0M7QUFDdEUsT0FBT0MseUJBQXlCLE1BQU0saUNBQWlDO0FBQ3ZFLE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUNoRSxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBRXBELE1BQU1DLFdBQVcsR0FBR1AsdUJBQXVCLENBQUNRLEtBQUs7QUFDakQsTUFBTUMsV0FBVyxHQUFHVCx1QkFBdUIsQ0FBQ1UsS0FBSztBQUVqRCxNQUFNQyxtQkFBbUIsU0FBU0wsZ0JBQWdCLENBQUM7RUFFakQ7QUFDRjtBQUNBO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUc7SUFDM0IsS0FBSyxDQUFFRCxLQUFLLEVBQUVDLE1BQU8sQ0FBQztJQUN0QjtJQUNBLElBQUksQ0FBQ0MsZ0JBQWdC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