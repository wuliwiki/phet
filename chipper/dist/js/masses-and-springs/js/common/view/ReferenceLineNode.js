// Copyright 2017-2022, University of Colorado Boulder

/**
 * Responsible for the attributes associated with the reference line nodes.
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import LinearFunction from '../../../../dot/js/LinearFunction.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import merge from '../../../../phet-core/js/merge.js';
import { Line } from '../../../../scenery/js/imports.js';
import massesAndSprings from '../../massesAndSprings.js';

// constants
const LINE_LENGTH = 100;
class ReferenceLineNode extends Line {
  /**
   * @param {ModelViewTransform2} modelViewTransform2
   * @param {Spring} spring - spring model object
   * @param {Property.<*>} property - determines which Property is being referenced
   * @param {Property.<boolean>} visibleProperty
   * @param {Object} [options]
   *
   */
  constructor(modelViewTransform2, spring, property, visibleProperty, options) {
    options = merge({
      fixedPosition: false,
      // flag for a line that remain at a target position
      zeroPointLine: false,
      // flag for a line that remains at the zero reference point of the sim
      stroke: 'black',
      label: null
    }, options);
    super(0, 0, LINE_LENGTH, 0, {
      stroke: options.stroke,
      lineDash: [12, 8],
      lineWidth: 1.5,
      cursor: 'pointer',
      pickable: false
    });
    this.mouseArea = this.localBounds.dilatedY(10);
    this.touchArea = this.localBounds.dilatedY(10);

    // Prevents overlap with the equilibrium line
    const xPos = modelViewTransform2.modelToViewX(spring.positionProperty.get().x);

    // Helper function to derive the length as if the mass wasn't attached.
    const lengthFunction = new LinearFunction(0.1, 0.5, 1.37, 0.97);
    let yPos = modelViewTransform2.modelToViewY(lengthFunction.evaluate(spring.naturalRestingLengthProperty.value));

    // @private (read-write) - position of line in screen coordinates.
    this.positionProperty = new Vector2Property(new Vector2(xPos, yPos));

    // Add a label if it exists
    if (options.label) {
      this.addChild(options.label);
    }

    // updates the position of the reference line as the system changes
    Multilink.multilink([spring.massAttachedProperty, spring.naturalRestingLengthProperty, property], (mass, restingLength, monitoredProperty) => {
      if (options.zeroPointLine) {
        return;
      }
      if (options.fixedPosition || !mass) {
        // Y position of line in screen coordinates as if a mass isn't attached
        yPos = modelViewTransform2.modelToViewY(lengthFunction.evaluate(restingLength));
      } else {
        // Y position of line in screen coordinates with an attached mass
        yPos = modelViewTransform2.modelToViewY(monitoredProperty);
      }
      this.positionProperty.set(new Vector2(xPos, yPos));
    });

    // Link that handles the change in the lines position in screen coordinates
    this.positionProperty.link(position => {
      this.translation = position.minus(new Vector2(LINE_LENGTH / 2, 0));

      // Adjust the position of the label
      if (options.label) {
        options.label.centerY = 0;
        options.label.x = LINE_LENGTH + 10;
      }
    });
    visibleProperty.linkAttribute(this, 'visible');
  }

  /**
   * Resets the position of the line Node.
   *
   * @public
   */
  reset() {
    this.positionProperty.reset();
  }
}
massesAndSprings.register('ReferenceLineNode', ReferenceLineNode);
export default ReferenceLineNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJMaW5lYXJGdW5jdGlvbiIsIlZlY3RvcjIiLCJWZWN0b3IyUHJvcGVydHkiLCJtZXJnZSIsIkxpbmUiLCJtYXNzZXNBbmRTcHJpbmdzIiwiTElORV9MRU5HVEgiLCJSZWZlcmVuY2VMaW5lTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWxWaWV3VHJhbnNmb3JtMiIsInNwcmluZyIsInByb3BlcnR5IiwidmlzaWJsZVByb3BlcnR5Iiwib3B0aW9ucyIsImZpeGVkUG9zaXRpb24iLCJ6ZXJvUG9pbnRMaW5lIiwic3Ryb2tlIiwibGFiZWwiLCJsaW5lRGFzaCIsImxpbmVXaWR0aCIsImN1cnNvciIsInBpY2thYmxlIiwibW91c2VBcmVhIiwibG9jYWxCb3VuZHMiLCJkaWxhdGVkWSIsInRvdWNoQXJlYSIsInhQb3MiLCJtb2RlbFRvVmlld1giLCJwb3NpdGlvblByb3BlcnR5IiwiZ2V0IiwieCIsImxlbmd0aEZ1bmN0aW9uIiwieVBvcyIsIm1vZGVsVG9WaWV3WSIsImV2YWx1YXRlIiwibmF0dXJhbFJlc3RpbmdMZW5ndGhQcm9wZXJ0eSIsInZhbHVlIiwiYWRkQ2hpbGQiLCJtdWx0aWxpbmsiLCJtYXNzQXR0YWNoZWRQcm9wZXJ0eSIsIm1hc3MiLCJyZXN0aW5nTGVuZ3RoIiwibW9uaXRvcmVkUHJvcGVydHkiLCJzZXQiLCJsaW5rIiwicG9zaXRpb24iLCJ0cmFuc2xhdGlvbiIsIm1pbnVzIiwiY2VudGVyWSIsImxpbmtBdHRyaWJ1dGUiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVmZXJlbmNlTGluZU5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmVzcG9uc2libGUgZm9yIHRoZSBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVmZXJlbmNlIGxpbmUgbm9kZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgRGVuemVsbCBCYXJuZXR0IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgTGluZWFyRnVuY3Rpb24gZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0xpbmVhckZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMlByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgTGluZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtYXNzZXNBbmRTcHJpbmdzIGZyb20gJy4uLy4uL21hc3Nlc0FuZFNwcmluZ3MuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IExJTkVfTEVOR1RIID0gMTAwO1xyXG5cclxuY2xhc3MgUmVmZXJlbmNlTGluZU5vZGUgZXh0ZW5kcyBMaW5lIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybTJcclxuICAgKiBAcGFyYW0ge1NwcmluZ30gc3ByaW5nIC0gc3ByaW5nIG1vZGVsIG9iamVjdFxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPCo+fSBwcm9wZXJ0eSAtIGRldGVybWluZXMgd2hpY2ggUHJvcGVydHkgaXMgYmVpbmcgcmVmZXJlbmNlZFxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSB2aXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICpcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWxWaWV3VHJhbnNmb3JtMiwgc3ByaW5nLCBwcm9wZXJ0eSwgdmlzaWJsZVByb3BlcnR5LCBvcHRpb25zICkge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIGZpeGVkUG9zaXRpb246IGZhbHNlLCAvLyBmbGFnIGZvciBhIGxpbmUgdGhhdCByZW1haW4gYXQgYSB0YXJnZXQgcG9zaXRpb25cclxuICAgICAgemVyb1BvaW50TGluZTogZmFsc2UsIC8vIGZsYWcgZm9yIGEgbGluZSB0aGF0IHJlbWFpbnMgYXQgdGhlIHplcm8gcmVmZXJlbmNlIHBvaW50IG9mIHRoZSBzaW1cclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsYWJlbDogbnVsbFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCAwLCAwLCBMSU5FX0xFTkdUSCwgMCwge1xyXG4gICAgICBzdHJva2U6IG9wdGlvbnMuc3Ryb2tlLFxyXG4gICAgICBsaW5lRGFzaDogWyAxMiwgOCBdLFxyXG4gICAgICBsaW5lV2lkdGg6IDEuNSxcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICAgIHBpY2thYmxlOiBmYWxzZVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5tb3VzZUFyZWEgPSB0aGlzLmxvY2FsQm91bmRzLmRpbGF0ZWRZKCAxMCApO1xyXG4gICAgdGhpcy50b3VjaEFyZWEgPSB0aGlzLmxvY2FsQm91bmRzLmRpbGF0ZWRZKCAxMCApO1xyXG5cclxuICAgIC8vIFByZXZlbnRzIG92ZXJsYXAgd2l0aCB0aGUgZXF1aWxpYnJpdW0gbGluZVxyXG4gICAgY29uc3QgeFBvcyA9IG1vZGVsVmlld1RyYW5zZm9ybTIubW9kZWxUb1ZpZXdYKCBzcHJpbmcucG9zaXRpb25Qcm9wZXJ0eS5nZXQoKS54ICk7XHJcblxyXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGRlcml2ZSB0aGUgbGVuZ3RoIGFzIGlmIHRoZSBtYXNzIHdhc24ndCBhdHRhY2hlZC5cclxuICAgIGNvbnN0IGxlbmd0aEZ1bmN0aW9uID0gbmV3IExpbmVhckZ1bmN0aW9uKCAwLjEsIDAuNSwgMS4zNywgMC45NyApO1xyXG5cclxuICAgIGxldCB5UG9zID0gbW9kZWxWaWV3VHJhbnNmb3JtMi5tb2RlbFRvVmlld1koIGxlbmd0aEZ1bmN0aW9uLmV2YWx1YXRlKCBzcHJpbmcubmF0dXJhbFJlc3RpbmdMZW5ndGhQcm9wZXJ0eS52YWx1ZSApICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgKHJlYWQtd3JpdGUpIC0gcG9zaXRpb24gb2YgbGluZSBpbiBzY3JlZW4gY29vcmRpbmF0ZXMuXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBuZXcgVmVjdG9yMiggeFBvcywgeVBvcyApICk7XHJcblxyXG4gICAgLy8gQWRkIGEgbGFiZWwgaWYgaXQgZXhpc3RzXHJcbiAgICBpZiAoIG9wdGlvbnMubGFiZWwgKSB7XHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIG9wdGlvbnMubGFiZWwgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB1cGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcmVmZXJlbmNlIGxpbmUgYXMgdGhlIHN5c3RlbSBjaGFuZ2VzXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHNwcmluZy5tYXNzQXR0YWNoZWRQcm9wZXJ0eSwgc3ByaW5nLm5hdHVyYWxSZXN0aW5nTGVuZ3RoUHJvcGVydHksIHByb3BlcnR5IF0sXHJcbiAgICAgICggbWFzcywgcmVzdGluZ0xlbmd0aCwgbW9uaXRvcmVkUHJvcGVydHkgKSA9PiB7XHJcbiAgICAgICAgaWYgKCBvcHRpb25zLnplcm9Qb2ludExpbmUgKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggb3B0aW9ucy5maXhlZFBvc2l0aW9uIHx8ICFtYXNzICkge1xyXG5cclxuICAgICAgICAgIC8vIFkgcG9zaXRpb24gb2YgbGluZSBpbiBzY3JlZW4gY29vcmRpbmF0ZXMgYXMgaWYgYSBtYXNzIGlzbid0IGF0dGFjaGVkXHJcbiAgICAgICAgICB5UG9zID0gbW9kZWxWaWV3VHJhbnNmb3JtMi5tb2RlbFRvVmlld1koIGxlbmd0aEZ1bmN0aW9uLmV2YWx1YXRlKCByZXN0aW5nTGVuZ3RoICkgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gWSBwb3NpdGlvbiBvZiBsaW5lIGluIHNjcmVlbiBjb29yZGluYXRlcyB3aXRoIGFuIGF0dGFjaGVkIG1hc3NcclxuICAgICAgICAgIHlQb3MgPSBtb2RlbFZpZXdUcmFuc2Zvcm0yLm1vZGVsVG9WaWV3WSggbW9uaXRvcmVkUHJvcGVydHkgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnNldCggbmV3IFZlY3RvcjIoIHhQb3MsIHlQb3MgKSApO1xyXG4gICAgICB9ICk7XHJcblxyXG5cclxuICAgIC8vIExpbmsgdGhhdCBoYW5kbGVzIHRoZSBjaGFuZ2UgaW4gdGhlIGxpbmVzIHBvc2l0aW9uIGluIHNjcmVlbiBjb29yZGluYXRlc1xyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LmxpbmsoIHBvc2l0aW9uID0+IHtcclxuICAgICAgdGhpcy50cmFuc2xhdGlvbiA9IHBvc2l0aW9uLm1pbnVzKCBuZXcgVmVjdG9yMiggTElORV9MRU5HVEggLyAyLCAwICkgKTtcclxuXHJcbiAgICAgIC8vIEFkanVzdCB0aGUgcG9zaXRpb24gb2YgdGhlIGxhYmVsXHJcbiAgICAgIGlmICggb3B0aW9ucy5sYWJlbCApIHtcclxuICAgICAgICBvcHRpb25zLmxhYmVsLmNlbnRlclkgPSAwO1xyXG4gICAgICAgIG9wdGlvbnMubGFiZWwueCA9IExJTkVfTEVOR1RIICsgMTA7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICB2aXNpYmxlUHJvcGVydHkubGlua0F0dHJpYnV0ZSggdGhpcywgJ3Zpc2libGUnICk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgbGluZSBOb2RlLlxyXG4gICAqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5tYXNzZXNBbmRTcHJpbmdzLnJlZ2lzdGVyKCAnUmVmZXJlbmNlTGluZU5vZGUnLCBSZWZlcmVuY2VMaW5lTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVmZXJlbmNlTGluZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsY0FBYyxNQUFNLHNDQUFzQztBQUNqRSxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLGVBQWUsTUFBTSx1Q0FBdUM7QUFDbkUsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjs7QUFFeEQ7QUFDQSxNQUFNQyxXQUFXLEdBQUcsR0FBRztBQUV2QixNQUFNQyxpQkFBaUIsU0FBU0gsSUFBSSxDQUFDO0VBQ25DO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsbUJBQW1CLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxlQUFlLEVBQUVDLE9BQU8sRUFBRztJQUM3RUEsT0FBTyxHQUFHVixLQUFLLENBQUU7TUFDZlcsYUFBYSxFQUFFLEtBQUs7TUFBRTtNQUN0QkMsYUFBYSxFQUFFLEtBQUs7TUFBRTtNQUN0QkMsTUFBTSxFQUFFLE9BQU87TUFDZkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQyxFQUFFSixPQUFRLENBQUM7SUFFWixLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUMs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