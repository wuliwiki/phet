// Copyright 2016-2023, University of Colorado Boulder

/**
 * ScreenView for the 'Intro' screen
 *
 * @author Matt Pennington (PhET Interactive Simulations)
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Range from '../../../../dot/js/Range.js';
import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import { AlignBox, AlignGroup, Text, VBox } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import Panel from '../../../../sun/js/Panel.js';
import MassesAndSpringsConstants from '../../common/MassesAndSpringsConstants.js';
import ConstantMode from '../../common/model/ConstantMode.js';
import SceneMode from '../../common/model/SceneMode.js';
import LineVisibilityNode from '../../common/view/LineVisibilityNode.js';
import MassesAndSpringsColors from '../../common/view/MassesAndSpringsColors.js';
import ReferenceLineNode from '../../common/view/ReferenceLineNode.js';
import SpringControlPanel from '../../common/view/SpringControlPanel.js';
import TwoSpringScreenView from '../../common/view/TwoSpringScreenView.js';
import massesAndSprings from '../../massesAndSprings.js';
import MassesAndSpringsStrings from '../../MassesAndSpringsStrings.js';
import ConstantsControlPanel from './ConstantsControlPanel.js';
import SceneSelectionButton from './SceneSelectionButton.js';
const constantParameterString = MassesAndSpringsStrings.constantParameter;
const lengthString = MassesAndSpringsStrings.length;
const longString = MassesAndSpringsStrings.long;
const shortString = MassesAndSpringsStrings.short;
class IntroScreenView extends TwoSpringScreenView {
  /**
   * @param {IntroModel} model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    super(model, tandem);

    // AlignGroup to align components for spring options
    const optionsContentAlignGroup = new AlignGroup({
      matchVertical: false
    });

    // Spring Length Control Panel
    const minMaxLabels = [new Text(shortString, {
      font: MassesAndSpringsConstants.LABEL_FONT,
      maxWidth: 40
    }), new Text(longString, {
      font: MassesAndSpringsConstants.LABEL_FONT,
      maxWidth: 40
    })];
    this.springLengthControlPanel = new SpringControlPanel(model.spring1.naturalRestingLengthProperty, new Range(0.1, 0.5), StringUtils.fillIn(lengthString, {
      spring: 1
    }), minMaxLabels, tandem.createTandem('springLengthControlPanel'), {
      fill: 'transparent',
      alignGroup: optionsContentAlignGroup,
      xMargin: 5,
      yMargin: 0,
      spacing: 2,
      stroke: null,
      visible: false,
      centerTick: true,
      constrainValue: value => Utils.roundToInterval(value, 0.05)
    });

    // Panel that keeps thickness/spring constant at constant value
    const constantsControlPanel = new AlignBox(new ConstantsControlPanel(model.constantModeProperty, ConstantMode, constantParameterString, tandem.createTandem('constantsControlPanel'), {
      maxWidth: 160,
      stroke: null
    }));
    const lineSeparator = MassesAndSpringsConstants.LINE_SEPARATOR(140);

    // VBox that contains all of the spring options panel's content
    const springOptionsVBox = new VBox({
      spacing: 10,
      children: [this.springLengthControlPanel, lineSeparator, new AlignBox(constantsControlPanel, {
        group: optionsContentAlignGroup,
        xAlign: 'left',
        leftMargin: 10
      })],
      excludeInvisibleChildrenFromBounds: false
    });
    const optionsContentAlignBox = new AlignBox(springOptionsVBox, {
      group: optionsContentAlignGroup
    });

    // Panel that contains all the left sided options for the springs
    const springOptionsPanel = new Panel(optionsContentAlignBox, {
      cornerRadius: MassesAndSpringsConstants.PANEL_CORNER_RADIUS,
      right: this.firstSpringStopperButtonNode.left - this.spacing,
      top: this.spacing,
      tandem: tandem.createTandem('springOptionsPanel'),
      align: 'left',
      fill: 'white',
      xMargin: 0,
      stroke: 'gray',
      resize: false,
      visible: false
    });
    this.addChild(springOptionsPanel);
    springOptionsPanel.moveToBack();

    // Equilibrium of mass is dependent on the mass being attached and the visibility of the equilibrium line.
    const firstMassEquilibriumVisibilityProperty = new DerivedProperty([model.equilibriumPositionVisibleProperty, model.firstSpring.massAttachedProperty], (equilibriumPositionVisible, massAttached) => {
      if (massAttached) {
        return equilibriumPositionVisible;
      } else {
        return false;
      }
    });
    const secondMassEquilibriumVisibilityProperty = new DerivedProperty([model.equilibriumPositionVisibleProperty, model.secondSpring.massAttachedProperty], (equilibriumPositionVisible, massAttached) => {
      if (massAttached) {
        return equilibriumPositionVisible;
      } else {
        return false;
      }
    });

    // Initializes equilibrium line for first spring
    const firstSpringEquilibriumLineNode = new ReferenceLineNode(this.modelViewTransform, model.firstSpring, model.firstSpring.equilibriumYPositionProperty, firstMassEquilibriumVisibilityProperty, {
      stroke: MassesAndSpringsColors.restingPositionProperty
    });

    // Initializes equilibrium line for second spring
    const secondSpringEquilibriumLineNode = new ReferenceLineNode(this.modelViewTransform, model.secondSpring, model.secondSpring.equilibriumYPositionProperty, secondMassEquilibriumVisibilityProperty, {
      stroke: MassesAndSpringsColors.restingPositionProperty
    });

    // Adding system controls to scene graph
    this.addChild(this.springSystemControlsNode);

    // Reference lines from indicator visibility box
    this.addChild(this.firstNaturalLengthLineNode);
    this.addChild(this.secondNaturalLengthLineNode);
    this.addChild(firstSpringEquilibriumLineNode);
    this.addChild(secondSpringEquilibriumLineNode);
    this.addChild(this.movableLineNode);
    this.addChild(this.massLayer);
    this.addChild(this.toolsLayer);

    // Link responsible for visibility of the length control panel.
    model.sceneModeProperty.lazyLink(mode => {
      this.resetMassLayer();
      if (mode === SceneMode.SAME_LENGTH) {
        this.springLengthControlPanel.visible = false;
      } else if (mode === SceneMode.ADJUSTABLE_LENGTH) {
        this.springLengthControlPanel.visible = true;
      }

      // Manages visibility of panels for spring constant and thickness
      constantsControlPanel.visible = this.springLengthControlPanel.visible;
      this.firstSpringConstantControlPanel.visible = !this.springLengthControlPanel.visible;
      this.secondSpringConstantControlPanel.visible = !this.springLengthControlPanel.visible;
      springOptionsPanel.visible = this.springLengthControlPanel.visible;
    });

    // Creation of same length icon node
    const sameLengthIcon = new SceneSelectionButton(SceneMode.SAME_LENGTH, model.sceneModeProperty, this.modelViewTransform, tandem);

    // Creation of adjustable length icon node
    const differentLengthIcon = new SceneSelectionButton(SceneMode.ADJUSTABLE_LENGTH, model.sceneModeProperty, this.modelViewTransform, tandem);

    //  Creation of toggled modes for scene selection
    const toggleButtonsContent = [{
      value: SceneMode.SAME_LENGTH,
      createNode: () => sameLengthIcon
    }, {
      value: SceneMode.ADJUSTABLE_LENGTH,
      createNode: () => differentLengthIcon
    }];

    // Creation of icons for scene selection
    const sceneRadioButtonGroup = new RectangularRadioButtonGroup(model.sceneModeProperty, toggleButtonsContent, {
      right: this.gravityAndDampingControlNode.right,
      orientation: 'horizontal',
      spacing: 10,
      radioButtonOptions: {
        xMargin: 1,
        yMargin: 1,
        baseColor: 'black',
        buttonAppearanceStrategyOptions: {
          selectedLineWidth: 2,
          deselectedLineWidth: 0.5,
          deselectedButtonOpacity: 0.25
        }
      }
    });

    // Control Panel for display elements with varying visibility
    const lineVisibilityNode = new LineVisibilityNode(model, tandem.createTandem('LineVisibilityNode'));

    // VBox that contains all of the panel's content
    const optionsVBox = new VBox({
      spacing: 10,
      children: [lineVisibilityNode, MassesAndSpringsConstants.LINE_SEPARATOR(165), this.gravityAndDampingControlNode]
    });

    // Panel that will display all the toggleable options.
    const optionsPanel = this.createOptionsPanel(optionsVBox, this.rightPanelAlignGroup, tandem);

    // Contains all of the options for the reference lines, gravity, damping, and toolbox
    const rightPanelsVBox = new VBox({
      children: [optionsPanel, this.toolboxPanel, sceneRadioButtonGroup],
      spacing: this.spacing * 0.9
    });
    this.addChild(rightPanelsVBox);
    rightPanelsVBox.moveToBack();

    // Move this plane to the back of the scene graph
    this.backgroundDragPlane.moveToBack();
    this.visibleBoundsProperty.link(() => {
      rightPanelsVBox.rightTop = new Vector2(this.panelRightSpacing, this.springSystemControlsNode.top);
      springOptionsPanel.leftTop = this.springSystemControlsNode.leftTop.minus(new Vector2(0, 0));
    });
  }
}
massesAndSprings.register('IntroScreenView', IntroScreenView);
export default IntroScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJSYW5nZSIsIlV0aWxzIiwiVmVjdG9yMiIsIlN0cmluZ1V0aWxzIiwiQWxpZ25Cb3giLCJBbGlnbkdyb3VwIiwiVGV4dCIsIlZCb3giLCJSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAiLCJQYW5lbCIsIk1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMiLCJDb25zdGFudE1vZGUiLCJTY2VuZU1vZGUiLCJMaW5lVmlzaWJpbGl0eU5vZGUiLCJNYXNzZXNBbmRTcHJpbmdzQ29sb3JzIiwiUmVmZXJlbmNlTGluZU5vZGUiLCJTcHJpbmdDb250cm9sUGFuZWwiLCJUd29TcHJpbmdTY3JlZW5WaWV3IiwibWFzc2VzQW5kU3ByaW5ncyIsIk1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzIiwiQ29uc3RhbnRzQ29udHJvbFBhbmVsIiwiU2NlbmVTZWxlY3Rpb25CdXR0b24iLCJjb25zdGFudFBhcmFtZXRlclN0cmluZyIsImNvbnN0YW50UGFyYW1ldGVyIiwibGVuZ3RoU3RyaW5nIiwibGVuZ3RoIiwibG9uZ1N0cmluZyIsImxvbmciLCJzaG9ydFN0cmluZyIsInNob3J0IiwiSW50cm9TY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRhbmRlbSIsIm9wdGlvbnNDb250ZW50QWxpZ25Hcm91cCIsIm1hdGNoVmVydGljYWwiLCJtaW5NYXhMYWJlbHMiLCJmb250IiwiTEFCRUxfRk9OVCIsIm1heFdpZHRoIiwic3ByaW5nTGVuZ3RoQ29udHJvbFBhbmVsIiwic3ByaW5nMSIsIm5hdHVyYWxSZXN0aW5nTGVuZ3RoUHJvcGVydHkiLCJmaWxsSW4iLCJzcHJpbmciLCJjcmVhdGVUYW5kZW0iLCJmaWxsIiwiYWxpZ25Hcm91cCIsInhNYXJnaW4iLCJ5TWFyZ2luIiwic3BhY2luZyIsInN0cm9rZSIsInZpc2libGUiLCJjZW50ZXJUaWNrIiwiY29uc3RyYWluVmFsdWUiLCJ2YWx1ZSIsInJvdW5kVG9JbnRlcnZhbCIsImNvbnN0YW50c0NvbnRyb2xQYW5lbCIsImNvbnN0YW50TW9kZVByb3BlcnR5IiwibGluZVNlcGFyYXRvciIsIkxJTkVfU0VQQVJBVE9SIiwic3ByaW5nT3B0aW9uc1ZCb3giLCJjaGlsZHJlbiIsImdyb3VwIiwieEFsaWduIiwibGVmdE1hcmdpbiIsImV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHMiLCJvcHRpb25zQ29udGVudEFsaWduQm94Iiwic3ByaW5nT3B0aW9uc1BhbmVsIiwiY29ybmVyUmFkaXVzIiwiUEFORUxfQ09STkVSX1JBRElVUyIsInJpZ2h0IiwiZmlyc3RTcHJpbmdTdG9wcGVyQnV0dG9uTm9kZSIsImxlZnQiLCJ0b3AiLCJhbGlnbiIsInJlc2l6ZSIsImFkZENoaWxkIiwibW92ZVRvQmFjayIsImZpcnN0TWFzc0VxdWlsaWJyaXVtVmlzaWJpbGl0eVByb3BlcnR5IiwiZXF1aWxpYnJpdW1Qb3NpdGlvblZpc2libGVQcm9wZXJ0eSIsImZpcnN0U3ByaW5nIiwibWFzc0F0dGFjaGVkUHJvcGVydHkiLCJlcXVpbGlicml1bVBvc2l0aW9uVmlzaWJsZSIsIm1hc3NBdHRhY2hlZCIsInNlY29uZE1hc3NFcXVpbGlicml1bVZpc2liaWxpdHlQcm9wZXJ0eSIsInNlY29uZFNwcmluZyIsImZpcnN0U3ByaW5nRXF1aWxpYnJpdW1MaW5lTm9kZSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImVxdWlsaWJyaXVtWVBvc2l0aW9uUHJvcGVydHkiLCJyZXN0aW5nUG9zaXRpb25Qcm9wZXJ0eSIsInNlY29uZFNwcmluZ0VxdWlsaWJyaXVtTGluZU5vZGUiLCJzcHJpbmdTeXN0ZW1Db250cm9sc05vZGUiLCJmaXJzdE5hdHVyYWxMZW5ndGhMaW5lTm9kZSIsInNlY29uZE5hdHVyYWxMZW5ndGhMaW5lTm9kZSIsIm1vdmFibGVMaW5lTm9kZSIsIm1hc3NMYXllciIsInRvb2xzTGF5ZXIiLCJzY2VuZU1vZGVQcm9wZXJ0eSIsImxhenlMaW5rIiwibW9kZSIsInJlc2V0TWFzc0xheWVyIiwiU0FNRV9MRU5HVEgiLCJBREpVU1RBQkxFX0xFTkdUSCIsImZpcnN0U3ByaW5nQ29uc3RhbnRDb250cm9sUGFuZWwiLCJzZWNvbmRTcHJpbmdDb25zdGFudENvbnRyb2xQYW5lbCIsInNhbWVMZW5ndGhJY29uIiwiZGlmZmVyZW50TGVuZ3RoSWNvbiIsInRvZ2dsZUJ1dHRvbnNDb250ZW50IiwiY3JlYXRlTm9kZSIsInNjZW5lUmFkaW9CdXR0b25Hcm91cCIsImdyYXZpdHlBbmREYW1waW5nQ29udHJvbE5vZGUiLCJvcmllbnRhdGlvbiIsInJhZGlvQnV0dG9uT3B0aW9ucyIsImJhc2VDb2xvciIsImJ1dHRvbkFwcGVhcmFuY2VTdHJhdGVneU9wdGlvbnMiLCJzZWxlY3RlZExpbmVXaWR0aCIsImRlc2VsZWN0ZWRMaW5lV2lkdGgiLCJkZXNlbGVjdGVkQnV0dG9uT3BhY2l0eSIsImxpbmVWaXNpYmlsaXR5Tm9kZSIsIm9wdGlvbnNWQm94Iiwib3B0aW9uc1BhbmVsIiwiY3JlYXRlT3B0aW9uc1BhbmVsIiwicmlnaHRQYW5lbEFsaWduR3JvdXAiLCJyaWdodFBhbmVsc1ZCb3giLCJ0b29sYm94UGFuZWwiLCJiYWNrZ3JvdW5kRHJhZ1BsYW5lIiwidmlzaWJsZUJvdW5kc1Byb3BlcnR5IiwibGluayIsInJpZ2h0VG9wIiwicGFuZWxSaWdodFNwYWNpbmciLCJsZWZ0VG9wIiwibWludXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkludHJvU2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY3JlZW5WaWV3IGZvciB0aGUgJ0ludHJvJyBzY3JlZW5cclxuICpcclxuICogQGF1dGhvciBNYXR0IFBlbm5pbmd0b24gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgRGVuemVsbCBCYXJuZXR0IChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCB7IEFsaWduQm94LCBBbGlnbkdyb3VwLCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL01hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ29uc3RhbnRNb2RlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Db25zdGFudE1vZGUuanMnO1xyXG5pbXBvcnQgU2NlbmVNb2RlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9TY2VuZU1vZGUuanMnO1xyXG5pbXBvcnQgTGluZVZpc2liaWxpdHlOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0xpbmVWaXNpYmlsaXR5Tm9kZS5qcyc7XHJcbmltcG9ydCBNYXNzZXNBbmRTcHJpbmdzQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L01hc3Nlc0FuZFNwcmluZ3NDb2xvcnMuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlTGluZU5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvUmVmZXJlbmNlTGluZU5vZGUuanMnO1xyXG5pbXBvcnQgU3ByaW5nQ29udHJvbFBhbmVsIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1NwcmluZ0NvbnRyb2xQYW5lbC5qcyc7XHJcbmltcG9ydCBUd29TcHJpbmdTY3JlZW5WaWV3IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1R3b1NwcmluZ1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgbWFzc2VzQW5kU3ByaW5ncyBmcm9tICcuLi8uLi9tYXNzZXNBbmRTcHJpbmdzLmpzJztcclxuaW1wb3J0IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzIGZyb20gJy4uLy4uL01hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzLmpzJztcclxuaW1wb3J0IENvbnN0YW50c0NvbnRyb2xQYW5lbCBmcm9tICcuL0NvbnN0YW50c0NvbnRyb2xQYW5lbC5qcyc7XHJcbmltcG9ydCBTY2VuZVNlbGVjdGlvbkJ1dHRvbiBmcm9tICcuL1NjZW5lU2VsZWN0aW9uQnV0dG9uLmpzJztcclxuXHJcbmNvbnN0IGNvbnN0YW50UGFyYW1ldGVyU3RyaW5nID0gTWFzc2VzQW5kU3ByaW5nc1N0cmluZ3MuY29uc3RhbnRQYXJhbWV0ZXI7XHJcbmNvbnN0IGxlbmd0aFN0cmluZyA9IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzLmxlbmd0aDtcclxuY29uc3QgbG9uZ1N0cmluZyA9IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzLmxvbmc7XHJcbmNvbnN0IHNob3J0U3RyaW5nID0gTWFzc2VzQW5kU3ByaW5nc1N0cmluZ3Muc2hvcnQ7XHJcblxyXG5jbGFzcyBJbnRyb1NjcmVlblZpZXcgZXh0ZW5kcyBUd29TcHJpbmdTY3JlZW5WaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtJbnRyb01vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIHRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHRhbmRlbSApO1xyXG5cclxuICAgIC8vIEFsaWduR3JvdXAgdG8gYWxpZ24gY29tcG9uZW50cyBmb3Igc3ByaW5nIG9wdGlvbnNcclxuICAgIGNvbnN0IG9wdGlvbnNDb250ZW50QWxpZ25Hcm91cCA9IG5ldyBBbGlnbkdyb3VwKCB7IG1hdGNoVmVydGljYWw6IGZhbHNlIH0gKTtcclxuXHJcbiAgICAvLyBTcHJpbmcgTGVuZ3RoIENvbnRyb2wgUGFuZWxcclxuICAgIGNvbnN0IG1pbk1heExhYmVscyA9IFtcclxuICAgICAgbmV3IFRleHQoIHNob3J0U3RyaW5nLCB7IGZvbnQ6IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMuTEFCRUxfRk9OVCwgbWF4V2lkdGg6IDQwIH0gKSxcclxuICAgICAgbmV3IFRleHQoIGxvbmdTdHJpbmcsIHsgZm9udDogTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cy5MQUJFTF9GT05ULCBtYXhXaWR0aDogNDAgfSApXHJcbiAgICBdO1xyXG5cclxuICAgIHRoaXMuc3ByaW5nTGVuZ3RoQ29udHJvbFBhbmVsID0gbmV3IFNwcmluZ0NvbnRyb2xQYW5lbChcclxuICAgICAgbW9kZWwuc3ByaW5nMS5uYXR1cmFsUmVzdGluZ0xlbmd0aFByb3BlcnR5LFxyXG4gICAgICBuZXcgUmFuZ2UoIDAuMSwgMC41ICksXHJcbiAgICAgIFN0cmluZ1V0aWxzLmZpbGxJbiggbGVuZ3RoU3RyaW5nLCB7IHNwcmluZzogMSB9ICksXHJcbiAgICAgIG1pbk1heExhYmVscyxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NwcmluZ0xlbmd0aENvbnRyb2xQYW5lbCcgKSxcclxuICAgICAge1xyXG4gICAgICAgIGZpbGw6ICd0cmFuc3BhcmVudCcsXHJcbiAgICAgICAgYWxpZ25Hcm91cDogb3B0aW9uc0NvbnRlbnRBbGlnbkdyb3VwLFxyXG4gICAgICAgIHhNYXJnaW46IDUsXHJcbiAgICAgICAgeU1hcmdpbjogMCxcclxuICAgICAgICBzcGFjaW5nOiAyLFxyXG4gICAgICAgIHN0cm9rZTogbnVsbCxcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBjZW50ZXJUaWNrOiB0cnVlLFxyXG4gICAgICAgIGNvbnN0cmFpblZhbHVlOiB2YWx1ZSA9PiBVdGlscy5yb3VuZFRvSW50ZXJ2YWwoIHZhbHVlLCAwLjA1IClcclxuICAgICAgfSApO1xyXG5cclxuICAgIC8vIFBhbmVsIHRoYXQga2VlcHMgdGhpY2tuZXNzL3NwcmluZyBjb25zdGFudCBhdCBjb25zdGFudCB2YWx1ZVxyXG4gICAgY29uc3QgY29uc3RhbnRzQ29udHJvbFBhbmVsID0gbmV3IEFsaWduQm94KCBuZXcgQ29uc3RhbnRzQ29udHJvbFBhbmVsKFxyXG4gICAgICBtb2RlbC5jb25zdGFudE1vZGVQcm9wZXJ0eSxcclxuICAgICAgQ29uc3RhbnRNb2RlLFxyXG4gICAgICBjb25zdGFudFBhcmFtZXRlclN0cmluZyxcclxuICAgICAgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvbnN0YW50c0NvbnRyb2xQYW5lbCcgKSwge1xyXG4gICAgICAgIG1heFdpZHRoOiAxNjAsXHJcbiAgICAgICAgc3Ryb2tlOiBudWxsXHJcbiAgICAgIH0gKSApO1xyXG5cclxuICAgIGNvbnN0IGxpbmVTZXBhcmF0b3IgPSBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLkxJTkVfU0VQQVJBVE9SKCAxNDAgKTtcclxuXHJcbiAgICAvLyBWQm94IHRoYXQgY29udGFpbnMgYWxsIG9mIHRoZSBzcHJpbmcgb3B0aW9ucyBwYW5lbCdzIGNvbnRlbnRcclxuICAgIGNvbnN0IHNwcmluZ09wdGlvbnNWQm94ID0gbmV3IFZCb3goIHtcclxuICAgICAgc3BhY2luZzogMTAsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgdGhpcy5zcHJpbmdMZW5ndGhDb250cm9sUGFuZWwsXHJcbiAgICAgICAgbGluZVNlcGFyYXRvcixcclxuICAgICAgICBuZXcgQWxpZ25Cb3goIGNvbnN0YW50c0NvbnRyb2xQYW5lbCwgeyBncm91cDogb3B0aW9uc0NvbnRlbnRBbGlnbkdyb3VwLCB4QWxpZ246ICdsZWZ0JywgbGVmdE1hcmdpbjogMTAgfSApXHJcbiAgICAgIF0sXHJcbiAgICAgIGV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHM6IGZhbHNlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9uc0NvbnRlbnRBbGlnbkJveCA9IG5ldyBBbGlnbkJveCggc3ByaW5nT3B0aW9uc1ZCb3gsIHsgZ3JvdXA6IG9wdGlvbnNDb250ZW50QWxpZ25Hcm91cCB9ICk7XHJcblxyXG4gICAgLy8gUGFuZWwgdGhhdCBjb250YWlucyBhbGwgdGhlIGxlZnQgc2lkZWQgb3B0aW9ucyBmb3IgdGhlIHNwcmluZ3NcclxuICAgIGNvbnN0IHNwcmluZ09wdGlvbnNQYW5lbCA9IG5ldyBQYW5lbCggb3B0aW9uc0NvbnRlbnRBbGlnbkJveCwge1xyXG4gICAgICBjb3JuZXJSYWRpdXM6IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMuUEFORUxfQ09STkVSX1JBRElVUyxcclxuICAgICAgcmlnaHQ6IHRoaXMuZmlyc3RTcHJpbmdTdG9wcGVyQnV0dG9uTm9kZS5sZWZ0IC0gdGhpcy5zcGFjaW5nLFxyXG4gICAgICB0b3A6IHRoaXMuc3BhY2luZyxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3ByaW5nT3B0aW9uc1BhbmVsJyApLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICB4TWFyZ2luOiAwLFxyXG4gICAgICBzdHJva2U6ICdncmF5JyxcclxuICAgICAgcmVzaXplOiBmYWxzZSxcclxuICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHNwcmluZ09wdGlvbnNQYW5lbCApO1xyXG4gICAgc3ByaW5nT3B0aW9uc1BhbmVsLm1vdmVUb0JhY2soKTtcclxuXHJcbiAgICAvLyBFcXVpbGlicml1bSBvZiBtYXNzIGlzIGRlcGVuZGVudCBvbiB0aGUgbWFzcyBiZWluZyBhdHRhY2hlZCBhbmQgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGVxdWlsaWJyaXVtIGxpbmUuXHJcbiAgICBjb25zdCBmaXJzdE1hc3NFcXVpbGlicml1bVZpc2liaWxpdHlQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgbW9kZWwuZXF1aWxpYnJpdW1Qb3NpdGlvblZpc2libGVQcm9wZXJ0eSwgbW9kZWwuZmlyc3RTcHJpbmcubWFzc0F0dGFjaGVkUHJvcGVydHkgXSxcclxuICAgICAgKCBlcXVpbGlicml1bVBvc2l0aW9uVmlzaWJsZSwgbWFzc0F0dGFjaGVkICkgPT4ge1xyXG4gICAgICAgIGlmICggbWFzc0F0dGFjaGVkICkge1xyXG4gICAgICAgICAgcmV0dXJuIGVxdWlsaWJyaXVtUG9zaXRpb25WaXNpYmxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKTtcclxuICAgIGNvbnN0IHNlY29uZE1hc3NFcXVpbGlicml1bVZpc2liaWxpdHlQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgbW9kZWwuZXF1aWxpYnJpdW1Qb3NpdGlvblZpc2libGVQcm9wZXJ0eSwgbW9kZWwuc2Vjb25kU3ByaW5nLm1hc3NBdHRhY2hlZFByb3BlcnR5IF0sXHJcbiAgICAgICggZXF1aWxpYnJpdW1Qb3NpdGlvblZpc2libGUsIG1hc3NBdHRhY2hlZCApID0+IHtcclxuICAgICAgICBpZiAoIG1hc3NBdHRhY2hlZCApIHtcclxuICAgICAgICAgIHJldHVybiBlcXVpbGlicml1bVBvc2l0aW9uVmlzaWJsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZXMgZXF1aWxpYnJpdW0gbGluZSBmb3IgZmlyc3Qgc3ByaW5nXHJcbiAgICBjb25zdCBmaXJzdFNwcmluZ0VxdWlsaWJyaXVtTGluZU5vZGUgPSBuZXcgUmVmZXJlbmNlTGluZU5vZGUoXHJcbiAgICAgIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICBtb2RlbC5maXJzdFNwcmluZyxcclxuICAgICAgbW9kZWwuZmlyc3RTcHJpbmcuZXF1aWxpYnJpdW1ZUG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgZmlyc3RNYXNzRXF1aWxpYnJpdW1WaXNpYmlsaXR5UHJvcGVydHksIHtcclxuICAgICAgICBzdHJva2U6IE1hc3Nlc0FuZFNwcmluZ3NDb2xvcnMucmVzdGluZ1Bvc2l0aW9uUHJvcGVydHlcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBJbml0aWFsaXplcyBlcXVpbGlicml1bSBsaW5lIGZvciBzZWNvbmQgc3ByaW5nXHJcbiAgICBjb25zdCBzZWNvbmRTcHJpbmdFcXVpbGlicml1bUxpbmVOb2RlID0gbmV3IFJlZmVyZW5jZUxpbmVOb2RlKFxyXG4gICAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSxcclxuICAgICAgbW9kZWwuc2Vjb25kU3ByaW5nLFxyXG4gICAgICBtb2RlbC5zZWNvbmRTcHJpbmcuZXF1aWxpYnJpdW1ZUG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgc2Vjb25kTWFzc0VxdWlsaWJyaXVtVmlzaWJpbGl0eVByb3BlcnR5LCB7XHJcbiAgICAgICAgc3Ryb2tlOiBNYXNzZXNBbmRTcHJpbmdzQ29sb3JzLnJlc3RpbmdQb3NpdGlvblByb3BlcnR5XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgLy8gQWRkaW5nIHN5c3RlbSBjb250cm9scyB0byBzY2VuZSBncmFwaFxyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5zcHJpbmdTeXN0ZW1Db250cm9sc05vZGUgKTtcclxuXHJcbiAgICAvLyBSZWZlcmVuY2UgbGluZXMgZnJvbSBpbmRpY2F0b3IgdmlzaWJpbGl0eSBib3hcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuZmlyc3ROYXR1cmFsTGVuZ3RoTGluZU5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMuc2Vjb25kTmF0dXJhbExlbmd0aExpbmVOb2RlICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBmaXJzdFNwcmluZ0VxdWlsaWJyaXVtTGluZU5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHNlY29uZFNwcmluZ0VxdWlsaWJyaXVtTGluZU5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMubW92YWJsZUxpbmVOb2RlICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0aGlzLm1hc3NMYXllciApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy50b29sc0xheWVyICk7XHJcblxyXG4gICAgLy8gTGluayByZXNwb25zaWJsZSBmb3IgdmlzaWJpbGl0eSBvZiB0aGUgbGVuZ3RoIGNvbnRyb2wgcGFuZWwuXHJcbiAgICBtb2RlbC5zY2VuZU1vZGVQcm9wZXJ0eS5sYXp5TGluayggbW9kZSA9PiB7XHJcbiAgICAgIHRoaXMucmVzZXRNYXNzTGF5ZXIoKTtcclxuICAgICAgaWYgKCBtb2RlID09PSBTY2VuZU1vZGUuU0FNRV9MRU5HVEggKSB7XHJcbiAgICAgICAgdGhpcy5zcHJpbmdMZW5ndGhDb250cm9sUGFuZWwudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBtb2RlID09PSBTY2VuZU1vZGUuQURKVVNUQUJMRV9MRU5HVEggKSB7XHJcbiAgICAgICAgdGhpcy5zcHJpbmdMZW5ndGhDb250cm9sUGFuZWwudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE1hbmFnZXMgdmlzaWJpbGl0eSBvZiBwYW5lbHMgZm9yIHNwcmluZyBjb25zdGFudCBhbmQgdGhpY2tuZXNzXHJcbiAgICAgIGNvbnN0YW50c0NvbnRyb2xQYW5lbC52aXNpYmxlID0gdGhpcy5zcHJpbmdMZW5ndGhDb250cm9sUGFuZWwudmlzaWJsZTtcclxuICAgICAgdGhpcy5maXJzdFNwcmluZ0NvbnN0YW50Q29udHJvbFBhbmVsLnZpc2libGUgPSAhdGhpcy5zcHJpbmdMZW5ndGhDb250cm9sUGFuZWwudmlzaWJsZTtcclxuICAgICAgdGhpcy5zZWNvbmRTcHJpbmdDb25zdGFudENvbnRyb2xQYW5lbC52aXNpYmxlID0gIXRoaXMuc3ByaW5nTGVuZ3RoQ29udHJvbFBhbmVsLnZpc2libGU7XHJcbiAgICAgIHNwcmluZ09wdGlvbnNQYW5lbC52aXNpYmxlID0gdGhpcy5zcHJpbmdMZW5ndGhDb250cm9sUGFuZWwudmlzaWJsZTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBDcmVhdGlvbiBvZiBzYW1lIGxlbmd0aCBpY29uIG5vZGVcclxuICAgIGNvbnN0IHNhbWVMZW5ndGhJY29uID0gbmV3IFNjZW5lU2VsZWN0aW9uQnV0dG9uKCBTY2VuZU1vZGUuU0FNRV9MRU5HVEgsIG1vZGVsLnNjZW5lTW9kZVByb3BlcnR5LCB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSwgdGFuZGVtICk7XHJcblxyXG4gICAgLy8gQ3JlYXRpb24gb2YgYWRqdXN0YWJsZSBsZW5ndGggaWNvbiBub2RlXHJcbiAgICBjb25zdCBkaWZmZXJlbnRMZW5ndGhJY29uID0gbmV3IFNjZW5lU2VsZWN0aW9uQnV0dG9uKCBTY2VuZU1vZGUuQURKVVNUQUJMRV9MRU5HVEgsIG1vZGVsLnNjZW5lTW9kZVByb3BlcnR5LCB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSwgdGFuZGVtICk7XHJcblxyXG4gICAgLy8gIENyZWF0aW9uIG9mIHRvZ2dsZWQgbW9kZXMgZm9yIHNjZW5lIHNlbGVjdGlvblxyXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uc0NvbnRlbnQgPSBbIHtcclxuICAgICAgdmFsdWU6IFNjZW5lTW9kZS5TQU1FX0xFTkdUSCxcclxuICAgICAgY3JlYXRlTm9kZTogKCkgPT4gc2FtZUxlbmd0aEljb25cclxuICAgIH0sIHtcclxuICAgICAgdmFsdWU6IFNjZW5lTW9kZS5BREpVU1RBQkxFX0xFTkdUSCxcclxuICAgICAgY3JlYXRlTm9kZTogKCkgPT4gZGlmZmVyZW50TGVuZ3RoSWNvblxyXG4gICAgfSBdO1xyXG5cclxuICAgIC8vIENyZWF0aW9uIG9mIGljb25zIGZvciBzY2VuZSBzZWxlY3Rpb25cclxuICAgIGNvbnN0IHNjZW5lUmFkaW9CdXR0b25Hcm91cCA9IG5ldyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAoIG1vZGVsLnNjZW5lTW9kZVByb3BlcnR5LCB0b2dnbGVCdXR0b25zQ29udGVudCwge1xyXG4gICAgICByaWdodDogdGhpcy5ncmF2aXR5QW5kRGFtcGluZ0NvbnRyb2xOb2RlLnJpZ2h0LFxyXG4gICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICBzcGFjaW5nOiAxMCxcclxuICAgICAgcmFkaW9CdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgeE1hcmdpbjogMSxcclxuICAgICAgICB5TWFyZ2luOiAxLFxyXG4gICAgICAgIGJhc2VDb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICBidXR0b25BcHBlYXJhbmNlU3RyYXRlZ3lPcHRpb25zOiB7XHJcbiAgICAgICAgICBzZWxlY3RlZExpbmVXaWR0aDogMixcclxuICAgICAgICAgIGRlc2VsZWN0ZWRMaW5lV2lkdGg6IDAuNSxcclxuICAgICAgICAgIGRlc2VsZWN0ZWRCdXR0b25PcGFjaXR5OiAwLjI1XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQ29udHJvbCBQYW5lbCBmb3IgZGlzcGxheSBlbGVtZW50cyB3aXRoIHZhcnlpbmcgdmlzaWJpbGl0eVxyXG4gICAgY29uc3QgbGluZVZpc2liaWxpdHlOb2RlID0gbmV3IExpbmVWaXNpYmlsaXR5Tm9kZSggbW9kZWwsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdMaW5lVmlzaWJpbGl0eU5vZGUnICkgKTtcclxuXHJcbiAgICAvLyBWQm94IHRoYXQgY29udGFpbnMgYWxsIG9mIHRoZSBwYW5lbCdzIGNvbnRlbnRcclxuICAgIGNvbnN0IG9wdGlvbnNWQm94ID0gbmV3IFZCb3goIHtcclxuICAgICAgc3BhY2luZzogMTAsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbGluZVZpc2liaWxpdHlOb2RlLFxyXG4gICAgICAgIE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMuTElORV9TRVBBUkFUT1IoIDE2NSApLFxyXG4gICAgICAgIHRoaXMuZ3Jhdml0eUFuZERhbXBpbmdDb250cm9sTm9kZVxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gUGFuZWwgdGhhdCB3aWxsIGRpc3BsYXkgYWxsIHRoZSB0b2dnbGVhYmxlIG9wdGlvbnMuXHJcbiAgICBjb25zdCBvcHRpb25zUGFuZWwgPSB0aGlzLmNyZWF0ZU9wdGlvbnNQYW5lbCggb3B0aW9uc1ZCb3gsIHRoaXMucmlnaHRQYW5lbEFsaWduR3JvdXAsIHRhbmRlbSApO1xyXG5cclxuICAgIC8vIENvbnRhaW5zIGFsbCBvZiB0aGUgb3B0aW9ucyBmb3IgdGhlIHJlZmVyZW5jZSBsaW5lcywgZ3Jhdml0eSwgZGFtcGluZywgYW5kIHRvb2xib3hcclxuICAgIGNvbnN0IHJpZ2h0UGFuZWxzVkJveCA9IG5ldyBWQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbIG9wdGlvbnNQYW5lbCwgdGhpcy50b29sYm94UGFuZWwsIHNjZW5lUmFkaW9CdXR0b25Hcm91cCBdLFxyXG4gICAgICBzcGFjaW5nOiB0aGlzLnNwYWNpbmcgKiAwLjlcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHJpZ2h0UGFuZWxzVkJveCApO1xyXG4gICAgcmlnaHRQYW5lbHNWQm94Lm1vdmVUb0JhY2soKTtcclxuXHJcbiAgICAvLyBNb3ZlIHRoaXMgcGxhbmUgdG8gdGhlIGJhY2sgb2YgdGhlIHNjZW5lIGdyYXBoXHJcbiAgICB0aGlzLmJhY2tncm91bmREcmFnUGxhbmUubW92ZVRvQmFjaygpO1xyXG5cclxuICAgIHRoaXMudmlzaWJsZUJvdW5kc1Byb3BlcnR5LmxpbmsoICgpID0+IHtcclxuICAgICAgcmlnaHRQYW5lbHNWQm94LnJpZ2h0VG9wID0gbmV3IFZlY3RvcjIoIHRoaXMucGFuZWxSaWdodFNwYWNpbmcsIHRoaXMuc3ByaW5nU3lzdGVtQ29udHJvbHNOb2RlLnRvcCApO1xyXG4gICAgICBzcHJpbmdPcHRpb25zUGFuZWwubGVmdFRvcCA9IHRoaXMuc3ByaW5nU3lzdGVtQ29udHJvbHNOb2RlLmxlZnRUb3AubWludXMoIG5ldyBWZWN0b3IyKCAwLCAwICkgKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbm1hc3Nlc0FuZFNwcmluZ3MucmVnaXN0ZXIoICdJbnRyb1NjcmVlblZpZXcnLCBJbnRyb1NjcmVlblZpZXcgKTtcclxuZXhwb3J0IGRlZmF1bHQgSW50cm9TY3JlZW5WaWV3OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxTQUFTQyxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3BGLE9BQU9DLDJCQUEyQixNQUFNLDJEQUEyRDtBQUNuRyxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQztBQUNqRixPQUFPQyxZQUFZLE1BQU0sb0NBQW9DO0FBQzdELE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0Msa0JBQWtCLE1B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