// Copyright 2017-2022, University of Colorado Boulder

/**
 * Vector representation of displacement (y).
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import merge from '../../../../phet-core/js/merge.js';
import LineArrowNode from '../../../../scenery-phet/js/LineArrowNode.js';
import { Color, Line, Node } from '../../../../scenery/js/imports.js';
import massesAndSprings from '../../massesAndSprings.js';
class DisplacementArrowNode extends Node {
  /**
   * @param {Property.<number>} displacementProperty units = m
   * @param {Property.<boolean>} visibleProperty
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(displacementProperty, visibleProperty, tandem, options) {
    options = merge({
      modelViewTransform: null,
      verticalLineVisible: true,
      symbolRepresentation: false,
      unitDisplacementLength: -100 // use this value to adjust the scale of the vector's length
    }, options);
    const DISPLACEMENT_ARROW_OPTIONS = {
      stroke: new Color(0, 180, 0),
      headWidth: 20,
      headHeight: 10,
      tailLineWidth: 3,
      headLineWidth: 3
    };

    // Creation of the symbol for the displacement vector.
    const displacementArrow = new LineArrowNode(0, 0, 30, 0, DISPLACEMENT_ARROW_OPTIONS);
    options.children = [displacementArrow];
    if (!options.symbolRepresentation) {
      assert && assert(options.modelViewTransform !== null, ' options.modelViewTransform should be defined ');
      const verticalLine = new Line(-10, 0, 10, 0, {
        stroke: 'black',
        lineWidth: 2,
        centerY: displacementArrow.centerY,
        visible: options.verticalLineVisible,
        rotate: Math.PI
      });
      Multilink.multilink([displacementProperty, visibleProperty], (displacement, visible) => {
        // update the vector length
        displacementArrow.visible = displacement !== 0 && visible; // since we can't draw a zero-length arrow
        verticalLine.visible = displacementArrow.visible && visible;
        if (displacement !== 0) {
          // Used because springs are offset slightly below dev bounds.
          const ceilingOffset = -0.01;
          displacementArrow.setTailAndTip(0, 0, 0, ceilingOffset * options.modelViewTransform.modelToViewDeltaY(options.unitDisplacementLength * displacement));
        }
      });
      options.children = [displacementArrow, verticalLine];
    }
    super(options);
  }
}
massesAndSprings.register('DisplacementArrowNode', DisplacementArrowNode);
export default DisplacementArrowNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJtZXJnZSIsIkxpbmVBcnJvd05vZGUiLCJDb2xvciIsIkxpbmUiLCJOb2RlIiwibWFzc2VzQW5kU3ByaW5ncyIsIkRpc3BsYWNlbWVudEFycm93Tm9kZSIsImNvbnN0cnVjdG9yIiwiZGlzcGxhY2VtZW50UHJvcGVydHkiLCJ2aXNpYmxlUHJvcGVydHkiLCJ0YW5kZW0iLCJvcHRpb25zIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwidmVydGljYWxMaW5lVmlzaWJsZSIsInN5bWJvbFJlcHJlc2VudGF0aW9uIiwidW5pdERpc3BsYWNlbWVudExlbmd0aCIsIkRJU1BMQUNFTUVOVF9BUlJPV19PUFRJT05TIiwic3Ryb2tlIiwiaGVhZFdpZHRoIiwiaGVhZEhlaWdodCIsInRhaWxMaW5lV2lkdGgiLCJoZWFkTGluZVdpZHRoIiwiZGlzcGxhY2VtZW50QXJyb3ciLCJjaGlsZHJlbiIsImFzc2VydCIsInZlcnRpY2FsTGluZSIsImxpbmVXaWR0aCIsImNlbnRlclkiLCJ2aXNpYmxlIiwicm90YXRlIiwiTWF0aCIsIlBJIiwibXVsdGlsaW5rIiwiZGlzcGxhY2VtZW50IiwiY2VpbGluZ09mZnNldCIsInNldFRhaWxBbmRUaXAiLCJtb2RlbFRvVmlld0RlbHRhWSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGlzcGxhY2VtZW50QXJyb3dOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZlY3RvciByZXByZXNlbnRhdGlvbiBvZiBkaXNwbGFjZW1lbnQgKHkpLlxyXG4gKlxyXG4gKiBAYXV0aG9yIERlbnplbGwgQmFybmV0dCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBMaW5lQXJyb3dOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9MaW5lQXJyb3dOb2RlLmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIExpbmUsIE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbWFzc2VzQW5kU3ByaW5ncyBmcm9tICcuLi8uLi9tYXNzZXNBbmRTcHJpbmdzLmpzJztcclxuXHJcbmNsYXNzIERpc3BsYWNlbWVudEFycm93Tm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IGRpc3BsYWNlbWVudFByb3BlcnR5IHVuaXRzID0gbVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSB2aXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBkaXNwbGFjZW1lbnRQcm9wZXJ0eSwgdmlzaWJsZVByb3BlcnR5LCB0YW5kZW0sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG1vZGVsVmlld1RyYW5zZm9ybTogbnVsbCxcclxuICAgICAgdmVydGljYWxMaW5lVmlzaWJsZTogdHJ1ZSxcclxuICAgICAgc3ltYm9sUmVwcmVzZW50YXRpb246IGZhbHNlLFxyXG4gICAgICB1bml0RGlzcGxhY2VtZW50TGVuZ3RoOiAtMTAwIC8vIHVzZSB0aGlzIHZhbHVlIHRvIGFkanVzdCB0aGUgc2NhbGUgb2YgdGhlIHZlY3RvcidzIGxlbmd0aFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IERJU1BMQUNFTUVOVF9BUlJPV19PUFRJT05TID0ge1xyXG4gICAgICBzdHJva2U6IG5ldyBDb2xvciggMCwgMTgwLCAwICksXHJcbiAgICAgIGhlYWRXaWR0aDogMjAsXHJcbiAgICAgIGhlYWRIZWlnaHQ6IDEwLFxyXG4gICAgICB0YWlsTGluZVdpZHRoOiAzLFxyXG4gICAgICBoZWFkTGluZVdpZHRoOiAzXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENyZWF0aW9uIG9mIHRoZSBzeW1ib2wgZm9yIHRoZSBkaXNwbGFjZW1lbnQgdmVjdG9yLlxyXG4gICAgY29uc3QgZGlzcGxhY2VtZW50QXJyb3cgPSBuZXcgTGluZUFycm93Tm9kZSggMCwgMCwgMzAsIDAsIERJU1BMQUNFTUVOVF9BUlJPV19PUFRJT05TICk7XHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBkaXNwbGFjZW1lbnRBcnJvdyBdO1xyXG5cclxuICAgIGlmICggIW9wdGlvbnMuc3ltYm9sUmVwcmVzZW50YXRpb24gKSB7XHJcblxyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLm1vZGVsVmlld1RyYW5zZm9ybSAhPT0gbnVsbCwgJyBvcHRpb25zLm1vZGVsVmlld1RyYW5zZm9ybSBzaG91bGQgYmUgZGVmaW5lZCAnICk7XHJcblxyXG4gICAgICBjb25zdCB2ZXJ0aWNhbExpbmUgPSBuZXcgTGluZSggLTEwLCAwLCAxMCwgMCwge1xyXG4gICAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgICBsaW5lV2lkdGg6IDIsXHJcbiAgICAgICAgY2VudGVyWTogZGlzcGxhY2VtZW50QXJyb3cuY2VudGVyWSxcclxuICAgICAgICB2aXNpYmxlOiBvcHRpb25zLnZlcnRpY2FsTGluZVZpc2libGUsXHJcbiAgICAgICAgcm90YXRlOiBNYXRoLlBJXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIE11bHRpbGluay5tdWx0aWxpbmsoIFsgZGlzcGxhY2VtZW50UHJvcGVydHksIHZpc2libGVQcm9wZXJ0eSBdLCAoIGRpc3BsYWNlbWVudCwgdmlzaWJsZSApID0+IHtcclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIHRoZSB2ZWN0b3IgbGVuZ3RoXHJcbiAgICAgICAgZGlzcGxhY2VtZW50QXJyb3cudmlzaWJsZSA9ICggZGlzcGxhY2VtZW50ICE9PSAwICkgJiYgdmlzaWJsZTsgLy8gc2luY2Ugd2UgY2FuJ3QgZHJhdyBhIHplcm8tbGVuZ3RoIGFycm93XHJcbiAgICAgICAgdmVydGljYWxMaW5lLnZpc2libGUgPSBkaXNwbGFjZW1lbnRBcnJvdy52aXNpYmxlICYmIHZpc2libGU7XHJcbiAgICAgICAgaWYgKCBkaXNwbGFjZW1lbnQgIT09IDAgKSB7XHJcblxyXG4gICAgICAgICAgLy8gVXNlZCBiZWNhdXNlIHNwcmluZ3MgYXJlIG9mZnNldCBzbGlnaHRseSBiZWxvdyBkZXYgYm91bmRzLlxyXG4gICAgICAgICAgY29uc3QgY2VpbGluZ09mZnNldCA9IC0wLjAxO1xyXG4gICAgICAgICAgZGlzcGxhY2VtZW50QXJyb3cuc2V0VGFpbEFuZFRpcCggMCwgMCwgMCwgY2VpbGluZ09mZnNldCAqIG9wdGlvbnMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCBvcHRpb25zLnVuaXREaXNwbGFjZW1lbnRMZW5ndGggKiBkaXNwbGFjZW1lbnQgKSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSApO1xyXG4gICAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBkaXNwbGFjZW1lbnRBcnJvdywgdmVydGljYWxMaW5lIF07XHJcbiAgICB9XHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubWFzc2VzQW5kU3ByaW5ncy5yZWdpc3RlciggJ0Rpc3BsYWNlbWVudEFycm93Tm9kZScsIERpc3BsYWNlbWVudEFycm93Tm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGlzcGxhY2VtZW50QXJyb3dOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sa0NBQWtDO0FBQ3hELE9B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