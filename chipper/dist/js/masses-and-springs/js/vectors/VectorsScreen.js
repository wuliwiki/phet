// Copyright 2016-2022, University of Colorado Boulder

/**
 *
 * @author Matt Pennington (PhET Interactive Simulations)
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import vectorsScreenIcon_png from '../../images/vectorsScreenIcon_png.js';
import MassesAndSpringsModel from '../common/model/MassesAndSpringsModel.js';
import MassesAndSpringsColors from '../common/view/MassesAndSpringsColors.js';
import massesAndSprings from '../massesAndSprings.js';
import MassesAndSpringsStrings from '../MassesAndSpringsStrings.js';
import VectorsScreenView from './view/VectorsScreenView.js';
class VectorsScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const options = {
      name: MassesAndSpringsStrings.screen.vectorsStringProperty,
      backgroundColorProperty: MassesAndSpringsColors.backgroundProperty,
      homeScreenIcon: new ScreenIcon(new Image(vectorsScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    };
    super(() => {
      const modelTandem = tandem.createTandem('model');
      const model = new MassesAndSpringsModel(modelTandem);
      model.basicsVersion = false;
      model.addDefaultSprings(modelTandem);
      model.addDefaultMasses(modelTandem);
      return model;
    }, model => new VectorsScreenView(model, tandem.createTandem('view')), options);
  }
}
massesAndSprings.register('VectorsScreen', VectorsScreen);
export default VectorsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJ2ZWN0b3JzU2NyZWVuSWNvbl9wbmciLCJNYXNzZXNBbmRTcHJpbmdzTW9kZWwiLCJNYXNzZXNBbmRTcHJpbmdzQ29sb3JzIiwibWFzc2VzQW5kU3ByaW5ncyIsIk1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzIiwiVmVjdG9yc1NjcmVlblZpZXciLCJWZWN0b3JzU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsInZlY3RvcnNTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiYmFja2dyb3VuZFByb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJtb2RlbFRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsIm1vZGVsIiwiYmFzaWNzVmVyc2lvbiIsImFkZERlZmF1bHRTcHJpbmdzIiwiYWRkRGVmYXVsdE1hc3NlcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVmVjdG9yc1NjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hdHQgUGVubmluZ3RvbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBEZW56ZWxsIEJhcm5ldHQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgdmVjdG9yc1NjcmVlbkljb25fcG5nIGZyb20gJy4uLy4uL2ltYWdlcy92ZWN0b3JzU2NyZWVuSWNvbl9wbmcuanMnO1xyXG5pbXBvcnQgTWFzc2VzQW5kU3ByaW5nc01vZGVsIGZyb20gJy4uL2NvbW1vbi9tb2RlbC9NYXNzZXNBbmRTcHJpbmdzTW9kZWwuanMnO1xyXG5pbXBvcnQgTWFzc2VzQW5kU3ByaW5nc0NvbG9ycyBmcm9tICcuLi9jb21tb24vdmlldy9NYXNzZXNBbmRTcHJpbmdzQ29sb3JzLmpzJztcclxuaW1wb3J0IG1hc3Nlc0FuZFNwcmluZ3MgZnJvbSAnLi4vbWFzc2VzQW5kU3ByaW5ncy5qcyc7XHJcbmltcG9ydCBNYXNzZXNBbmRTcHJpbmdzU3RyaW5ncyBmcm9tICcuLi9NYXNzZXNBbmRTcHJpbmdzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBWZWN0b3JzU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvVmVjdG9yc1NjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgVmVjdG9yc1NjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzLnNjcmVlbi52ZWN0b3JzU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBNYXNzZXNBbmRTcHJpbmdzQ29sb3JzLmJhY2tncm91bmRQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgSW1hZ2UoIHZlY3RvcnNTY3JlZW5JY29uX3BuZyApLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9ICksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbW9kZWxUYW5kZW0gPSB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICk7XHJcbiAgICAgICAgY29uc3QgbW9kZWwgPSBuZXcgTWFzc2VzQW5kU3ByaW5nc01vZGVsKCBtb2RlbFRhbmRlbSApO1xyXG4gICAgICAgIG1vZGVsLmJhc2ljc1ZlcnNpb24gPSBmYWxzZTtcclxuICAgICAgICBtb2RlbC5hZGREZWZhdWx0U3ByaW5ncyggbW9kZWxUYW5kZW0gKTtcclxuICAgICAgICBtb2RlbC5hZGREZWZhdWx0TWFzc2VzKCBtb2RlbFRhbmRlbSApO1xyXG4gICAgICAgIHJldHVybiBtb2RlbDtcclxuICAgICAgfSxcclxuICAgICAgbW9kZWwgPT4gbmV3IFZlY3RvcnNTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbm1hc3Nlc0FuZFNwcmluZ3MucmVnaXN0ZXIoICdWZWN0b3JzU2NyZWVuJywgVmVjdG9yc1NjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBWZWN0b3JzU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxxQkFBcUIsTUFBTSx1Q0FBdUM7QUFDekUsT0FBT0MscUJBQXFCLE1BQU0sMENBQTBDO0FBQzVFLE9BQU9DLHNCQUFzQixNQUFNLDBDQUEwQztBQUM3RSxPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFDckQsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLGlCQUFpQixNQUFNLDZCQUE2QjtBQUUzRCxNQUFNQyxhQUFhLFNBQVNULE1BQU0sQ0FBQztFQUVqQztBQUNGO0FBQ0E7RUFDRVUsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBRXBCLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxJQUFJLEVBQUVOLHVCQUF1QixDQUFDTyxNQUFNLENBQUNDLHFCQUFxQjtNQUMxREMsdUJBQXVCLEVBQUVYLHNCQUFzQixDQUFDWSxrQkFBa0I7TUFDbEVDLGNBQWMsRUFBRSxJQUFJakIsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUMscUJBQXNCLENBQUMsRUFBRTtRQUNsRWdCLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUUsQ0FBQztNQUNIVCxNQUFNLEVBQUVBO0lBQ1YsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNO01BQ0osTUFBTVUsV0FBVyxHQUFHVixNQUFNLENBQUNXLFlBQVksQ0FBRSxPQUFRLENBQUM7TUFDbEQsTUFBTUMsS0FBSyxHQUFHLElBQUluQixxQkFBcUIsQ0FBRWlCLFdBQVksQ0FBQztNQUN0REUsS0FBSyxDQUFDQyxhQUFhLEdBQUcsS0FBSztNQUMzQkQsS0FBSyxDQUFDRSxpQkFBaUIsQ0FBRUosV0FBWSxDQUFDO01BQ3RDRSxLQUFLLENBQUNHLGdCQUFnQixDQUFFTCxXQUFZLENBQUM7TUFDckMsT0FBT0UsS0FBSztJQUNkLENBQUMsRUFDREEsS0FBSyxJQUFJLElBQUlmLGlCQUFpQixDQUFFZSxLQUFLLEVBQUVaLE1BQU0sQ0FBQ1csWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQ3RFVixPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFOLGdCQUFnQixDQUFDcUIsUUFBUSxDQUFFLGVBQWUsRUFBRWxCLGFBQWMsQ0FBQztBQUMzRCxlQUFlQSxhQUFhIn0=