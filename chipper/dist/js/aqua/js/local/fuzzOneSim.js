// Copyright 2018-2023, University of Colorado Boulder

const puppeteer = require('puppeteer');
const puppeteerPage = require('./puppeteerPage');
const _ = require('../../../sherpa/lib/lodash-4.17.4');
const child_process = require('child_process');
(async () => {
  const say = _.includes(process.argv, '--say');
  const sim = process.argv[2];
  const url = `http://localhost/${sim}/${sim}_en.html?brand=phet&ea&fuzz`;
  const browser = await puppeteer.launch();
  const timeout = 6000; // Timed so it takes about the same length of time as unit tests and linting, at least on my machine!

  console.log(`Fuzzing ${sim}...`);
  const result = await puppeteerPage(browser, url, timeout);
  if (!result.ok) {
    console.log(`failed fuzzing ${sim}, see ${url}, message:\n${result.message}`);
    say && child_process.execSync('say Fuzz test failed');
  }

  // const phetioSimsToTest = ['faradays-law'];
  // phetioSimsToTest.forEach( sim => tests.push( { name: sim, type: 'Fuzz Studio', run: () => puppeteerPage( browser, `http://localhost/studio/?sim=${sim}&phetioDebug=true&fuzz`, timeout ) } ) );
  // phetioSimsToTest.forEach( sim => tests.push( { name: sim, type: 'Fuzz Input Record and Playback', run: () => puppeteerPage( browser, `http://localhost/phet-io-wrappers/input-record-and-playback/?sim=${sim}&phetioDebug=true&fuzz`, timeout ) } ) );
  // phetioSimsToTest.forEach( sim => tests.push( { name: sim, type: 'Fuzz State', run: () => puppeteerPage( browser, `http://localhost/phet-io-wrappers/state/?sim=${sim}&phetioDebug=true&fuzz&numberOfMillisecondsBetweenUpdates=50`, timeout ) } ) );
  // phetioSimsToTest.forEach( sim => tests.push( { name: sim, type: 'PhET-iO Wrapper Tests', run: () => puppeteerPage( browser, `http://localhost/phet-io-wrappers/phet-io-wrappers-tests.html?sim=${sim}`, timeout ) } ) );
  // const simsToTest = ['graphing-quadratics'];
  // simsToTest.forEach( test => tests.push( { name: test, type: 'Fuzz Test', run: () => puppeteerPage( browser, `http://localhost/${test}/${test}_en.html?brand=phet&ea&fuzz`, timeout ) } ) );

  await browser.close();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwdXBwZXRlZXIiLCJyZXF1aXJlIiwicHVwcGV0ZWVyUGFnZSIsIl8iLCJjaGlsZF9wcm9jZXNzIiwic2F5IiwiaW5jbHVkZXMiLCJwcm9jZXNzIiwiYXJndiIsInNpbSIsInVybCIsImJyb3dzZXIiLCJsYXVuY2giLCJ0aW1lb3V0IiwiY29uc29sZSIsImxvZyIsInJlc3VsdCIsIm9rIiwibWVzc2FnZSIsImV4ZWNTeW5jIiwiY2xvc2UiXSwic291cmNlcyI6WyJmdXp6T25lU2ltLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuXHJcbmNvbnN0IHB1cHBldGVlciA9IHJlcXVpcmUoICdwdXBwZXRlZXInICk7XHJcbmNvbnN0IHB1cHBldGVlclBhZ2UgPSByZXF1aXJlKCAnLi9wdXBwZXRlZXJQYWdlJyApO1xyXG5jb25zdCBfID0gcmVxdWlyZSggJy4uLy4uLy4uL3NoZXJwYS9saWIvbG9kYXNoLTQuMTcuNCcgKTtcclxuY29uc3QgY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUoICdjaGlsZF9wcm9jZXNzJyApO1xyXG5cclxuKCBhc3luYyAoKSA9PiB7XHJcblxyXG4gIGNvbnN0IHNheSA9IF8uaW5jbHVkZXMoIHByb2Nlc3MuYXJndiwgJy0tc2F5JyApO1xyXG5cclxuICBjb25zdCBzaW0gPSBwcm9jZXNzLmFyZ3ZbIDIgXTtcclxuICBjb25zdCB1cmwgPSBgaHR0cDovL2xvY2FsaG9zdC8ke3NpbX0vJHtzaW19X2VuLmh0bWw/YnJhbmQ9cGhldCZlYSZmdXp6YDtcclxuXHJcbiAgY29uc3QgYnJvd3NlciA9IGF3YWl0IHB1cHBldGVlci5sYXVuY2goKTtcclxuICBjb25zdCB0aW1lb3V0ID0gNjAwMDsgLy8gVGltZWQgc28gaXQgdGFrZXMgYWJvdXQgdGhlIHNhbWUgbGVuZ3RoIG9mIHRpbWUgYXMgdW5pdCB0ZXN0cyBhbmQgbGludGluZywgYXQgbGVhc3Qgb24gbXkgbWFjaGluZSFcclxuXHJcbiAgY29uc29sZS5sb2coIGBGdXp6aW5nICR7c2ltfS4uLmAgKTtcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBwdXBwZXRlZXJQYWdlKCBicm93c2VyLCB1cmwsIHRpbWVvdXQgKTtcclxuXHJcbiAgaWYgKCAhcmVzdWx0Lm9rICkge1xyXG4gICAgY29uc29sZS5sb2coIGBmYWlsZWQgZnV6emluZyAke3NpbX0sIHNlZSAke3VybH0sIG1lc3NhZ2U6XFxuJHtyZXN1bHQubWVzc2FnZX1gICk7XHJcbiAgICBzYXkgJiYgY2hpbGRfcHJvY2Vzcy5leGVjU3luYyggJ3NheSBGdXp6IHRlc3QgZmFpbGVkJyApO1xyXG4gIH1cclxuXHJcbiAgLy8gY29uc3QgcGhldGlvU2ltc1RvVGVzdCA9IFsnZmFyYWRheXMtbGF3J107XHJcbiAgLy8gcGhldGlvU2ltc1RvVGVzdC5mb3JFYWNoKCBzaW0gPT4gdGVzdHMucHVzaCggeyBuYW1lOiBzaW0sIHR5cGU6ICdGdXp6IFN0dWRpbycsIHJ1bjogKCkgPT4gcHVwcGV0ZWVyUGFnZSggYnJvd3NlciwgYGh0dHA6Ly9sb2NhbGhvc3Qvc3R1ZGlvLz9zaW09JHtzaW19JnBoZXRpb0RlYnVnPXRydWUmZnV6emAsIHRpbWVvdXQgKSB9ICkgKTtcclxuICAvLyBwaGV0aW9TaW1zVG9UZXN0LmZvckVhY2goIHNpbSA9PiB0ZXN0cy5wdXNoKCB7IG5hbWU6IHNpbSwgdHlwZTogJ0Z1enogSW5wdXQgUmVjb3JkIGFuZCBQbGF5YmFjaycsIHJ1bjogKCkgPT4gcHVwcGV0ZWVyUGFnZSggYnJvd3NlciwgYGh0dHA6Ly9sb2NhbGhvc3QvcGhldC1pby13cmFwcGVycy9pbnB1dC1yZWNvcmQtYW5kLXBsYXliYWNrLz9zaW09JHtzaW19JnBoZXRpb0RlYnVnPXRydWUmZnV6emAsIHRpbWVvdXQgKSB9ICkgKTtcclxuICAvLyBwaGV0aW9TaW1zVG9UZXN0LmZvckVhY2goIHNpbSA9PiB0ZXN0cy5wdXNoKCB7IG5hbWU6IHNpbSwgdHlwZTogJ0Z1enogU3RhdGUnLCBydW46ICgpID0+IHB1cHBldGVlclBhZ2UoIGJyb3dzZXIsIGBodHRwOi8vbG9jYWxob3N0L3BoZXQtaW8td3JhcHBlcnMvc3RhdGUvP3NpbT0ke3NpbX0mcGhldGlvRGVidWc9dHJ1ZSZmdXp6Jm51bWJlck9mTWlsbGlzZWNvbmRzQmV0d2VlblVwZGF0ZXM9NTBgLCB0aW1lb3V0ICkgfSApICk7XHJcbiAgLy8gcGhldGlvU2ltc1RvVGVzdC5mb3JFYWNoKCBzaW0gPT4gdGVzdHMucHVzaCggeyBuYW1lOiBzaW0sIHR5cGU6ICdQaEVULWlPIFdyYXBwZXIgVGVzdHMnLCBydW46ICgpID0+IHB1cHBldGVlclBhZ2UoIGJyb3dzZXIsIGBodHRwOi8vbG9jYWxob3N0L3BoZXQtaW8td3JhcHBlcnMvcGhldC1pby13cmFwcGVycy10ZXN0cy5odG1sP3NpbT0ke3NpbX1gLCB0aW1lb3V0ICkgfSApICk7XHJcbiAgLy8gY29uc3Qgc2ltc1RvVGVzdCA9IFsnZ3JhcGhpbmctcXVhZHJhdGljcyddO1xyXG4gIC8vIHNpbXNUb1Rlc3QuZm9yRWFjaCggdGVzdCA9PiB0ZXN0cy5wdXNoKCB7IG5hbWU6IHRlc3QsIHR5cGU6ICdGdXp6IFRlc3QnLCBydW46ICgpID0+IHB1cHBldGVlclBhZ2UoIGJyb3dzZXIsIGBodHRwOi8vbG9jYWxob3N0LyR7dGVzdH0vJHt0ZXN0fV9lbi5odG1sP2JyYW5kPXBoZXQmZWEmZnV6emAsIHRpbWVvdXQgKSB9ICkgKTtcclxuXHJcbiAgYXdhaXQgYnJvd3Nlci5jbG9zZSgpO1xyXG59ICkoKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBRSxXQUFZLENBQUM7QUFDeEMsTUFBTUMsYUFBYSxHQUFHRCxPQUFPLENBQUUsaUJBQWtCLENBQUM7QUFDbEQsTUFBTUUsQ0FBQyxHQUFHRixPQUFPLENBQUUsbUNBQW9DLENBQUM7QUFDeEQsTUFBTUcsYUFBYSxHQUFHSCxPQUFPLENBQUUsZUFBZ0IsQ0FBQztBQUVoRCxDQUFFLFlBQVk7RUFFWixNQUFNSSxHQUFHLEdBQUdGLENBQUMsQ0FBQ0csUUFBUSxDQUFFQyxPQUFPLENBQUNDLElBQUksRUFBRSxPQUFRLENBQUM7RUFFL0MsTUFBTUMsR0FBRyxHQUFHRixPQUFPLENBQUNDLElBQUksQ0FBRSxDQUFDLENBQUU7RUFDN0IsTUFBTUUsR0FBRyxHQUFJLG9CQUFtQkQsR0FBSSxJQUFHQSxHQUFJLDZCQUE0QjtFQUV2RSxNQUFNRSxPQUFPLEdBQUcsTUFBTVgsU0FBUyxDQUFDWSxNQUFNLENBQUMsQ0FBQztFQUN4QyxNQUFNQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUM7O0VBRXRCQyxPQUFPLENBQUNDLEdBQUcsQ0FBRyxXQUFVTixHQUFJLEtBQUssQ0FBQztFQUNsQyxNQUFNTyxNQUFNLEdBQUcsTUFBTWQsYUFBYSxDQUFFUyxPQUFPLEVBQUVELEdBQUcsRUFBRUcsT0FBUSxDQUFDO0VBRTNELElBQUssQ0FBQ0csTUFBTSxDQUFDQyxFQUFFLEVBQUc7SUFDaEJILE9BQU8sQ0FBQ0MsR0FBRyxDQUFHLGtCQUFpQk4sR0FBSSxTQUFRQyxHQUFJLGVBQWNNLE1BQU0sQ0FBQ0UsT0FBUSxFQUFFLENBQUM7SUFDL0ViLEdBQUcsSUFBSUQsYUFBYSxDQUFDZSxRQUFRLENBQUUsc0JBQXVCLENBQUM7RUFDekQ7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUEsTUFBTVIsT0FBTyxDQUFDUyxLQUFLLENBQUMsQ0FBQztBQUN2QixDQUFDLEVBQUcsQ0FBQyJ9