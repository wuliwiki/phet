// Copyright 2017-2022, University of Colorado Boulder

/*
 * Runs QUnit tests in an iframe, and passes results to our parent frame (continuous-loop.html).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

(() => {
  const options = QueryStringMachine.getAll({
    url: {
      type: 'string',
      defaultValue: ''
    },
    duration: {
      type: 'number',
      defaultValue: 300000
    }
  });
  const iframe = aqua.createFrame();
  iframe.src = options.url;

  // Since QUnit doesn't give us an accurate "done" message, we just tally pass/fail counts
  let passed = 0;
  let failed = 0;
  let receivedDone = false;
  let message = '';
  let error = '';
  const done = function () {
    if (id !== null) {
      message = `${iframe.src}\n${passed} out of ${passed + failed} tests passed. ${failed} failed.\n${message}`;
      if (!receivedDone) {
        if (error) {
          message += `\n${error}`;
        } else {
          message += `\nDid not complete in ${options.duration}ms, may not have completed all tests`;
        }
        aqua.testFail(message);
      } else if (passed > 0 && failed === 0) {
        aqua.testPass(message);
      } else {
        aqua.testFail(message);
      }
      id = null;
      aqua.nextTest();
    }
  };

  // Supports old tests (which do not know when they are done)
  let id = setTimeout(done, options.duration);
  window.addEventListener('message', async evt => {
    if (typeof evt.data !== 'string') {
      return;
    }
    const data = JSON.parse(evt.data);

    // Sent from all of our QUnit wrappers
    if (data.type === 'qunit-test') {
      if (data.result) {
        passed++;
      } else {
        failed++;
        message += `${data.module}: ${data.name} failed:\n${data.message}\n${data.source}\n\n`;
      }
    } else if (data.type === 'qunit-done') {
      // Supports new tests, which know when they are done
      failed = data.failed;
      passed = data.passed;
      if (id !== null) {
        clearTimeout(id);
        receivedDone = true;
        done();
      }
    } else if (data.type === 'error') {
      clearTimeout(id);
      const transpiledStacktrace = await window.transpileStacktrace(data.stack);
      error = data.message + transpiledStacktrace;
      done();
    }
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25zIiwiUXVlcnlTdHJpbmdNYWNoaW5lIiwiZ2V0QWxsIiwidXJsIiwidHlwZSIsImRlZmF1bHRWYWx1ZSIsImR1cmF0aW9uIiwiaWZyYW1lIiwiYXF1YSIsImNyZWF0ZUZyYW1lIiwic3JjIiwicGFzc2VkIiwiZmFpbGVkIiwicmVjZWl2ZWREb25lIiwibWVzc2FnZSIsImVycm9yIiwiZG9uZSIsImlkIiwidGVzdEZhaWwiLCJ0ZXN0UGFzcyIsIm5leHRUZXN0Iiwic2V0VGltZW91dCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwicmVzdWx0IiwibW9kdWxlIiwibmFtZSIsInNvdXJjZSIsImNsZWFyVGltZW91dCIsInRyYW5zcGlsZWRTdGFja3RyYWNlIiwidHJhbnNwaWxlU3RhY2t0cmFjZSIsInN0YWNrIl0sInNvdXJjZXMiOlsicXVuaXQtdGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qXHJcbiAqIFJ1bnMgUVVuaXQgdGVzdHMgaW4gYW4gaWZyYW1lLCBhbmQgcGFzc2VzIHJlc3VsdHMgdG8gb3VyIHBhcmVudCBmcmFtZSAoY29udGludW91cy1sb29wLmh0bWwpLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuXHJcbiggKCkgPT4ge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBRdWVyeVN0cmluZ01hY2hpbmUuZ2V0QWxsKCB7XHJcbiAgICB1cmw6IHtcclxuICAgICAgdHlwZTogJ3N0cmluZycsXHJcbiAgICAgIGRlZmF1bHRWYWx1ZTogJydcclxuICAgIH0sXHJcbiAgICBkdXJhdGlvbjoge1xyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgZGVmYXVsdFZhbHVlOiAzMDAwMDBcclxuICAgIH1cclxuICB9ICk7XHJcblxyXG4gIGNvbnN0IGlmcmFtZSA9IGFxdWEuY3JlYXRlRnJhbWUoKTtcclxuICBpZnJhbWUuc3JjID0gb3B0aW9ucy51cmw7XHJcblxyXG4gIC8vIFNpbmNlIFFVbml0IGRvZXNuJ3QgZ2l2ZSB1cyBhbiBhY2N1cmF0ZSBcImRvbmVcIiBtZXNzYWdlLCB3ZSBqdXN0IHRhbGx5IHBhc3MvZmFpbCBjb3VudHNcclxuICBsZXQgcGFzc2VkID0gMDtcclxuICBsZXQgZmFpbGVkID0gMDtcclxuICBsZXQgcmVjZWl2ZWREb25lID0gZmFsc2U7XHJcbiAgbGV0IG1lc3NhZ2UgPSAnJztcclxuICBsZXQgZXJyb3IgPSAnJztcclxuXHJcbiAgY29uc3QgZG9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCBpZCAhPT0gbnVsbCApIHtcclxuICAgICAgbWVzc2FnZSA9IGAke2lmcmFtZS5zcmN9XFxuJHtwYXNzZWR9IG91dCBvZiAke3Bhc3NlZCArIGZhaWxlZH0gdGVzdHMgcGFzc2VkLiAke2ZhaWxlZH0gZmFpbGVkLlxcbiR7bWVzc2FnZX1gO1xyXG4gICAgICBpZiAoICFyZWNlaXZlZERvbmUgKSB7XHJcbiAgICAgICAgaWYgKCBlcnJvciApIHtcclxuICAgICAgICAgIG1lc3NhZ2UgKz0gYFxcbiR7ZXJyb3J9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBtZXNzYWdlICs9IGBcXG5EaWQgbm90IGNvbXBsZXRlIGluICR7b3B0aW9ucy5kdXJhdGlvbn1tcywgbWF5IG5vdCBoYXZlIGNvbXBsZXRlZCBhbGwgdGVzdHNgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhcXVhLnRlc3RGYWlsKCBtZXNzYWdlICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIHBhc3NlZCA+IDAgJiYgZmFpbGVkID09PSAwICkge1xyXG4gICAgICAgIGFxdWEudGVzdFBhc3MoIG1lc3NhZ2UgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBhcXVhLnRlc3RGYWlsKCBtZXNzYWdlICk7XHJcbiAgICAgIH1cclxuICAgICAgaWQgPSBudWxsO1xyXG4gICAgICBhcXVhLm5leHRUZXN0KCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gU3VwcG9ydHMgb2xkIHRlc3RzICh3aGljaCBkbyBub3Qga25vdyB3aGVuIHRoZXkgYXJlIGRvbmUpXHJcbiAgbGV0IGlkID0gc2V0VGltZW91dCggZG9uZSwgb3B0aW9ucy5kdXJhdGlvbiApO1xyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ21lc3NhZ2UnLCBhc3luYyBldnQgPT4ge1xyXG4gICAgaWYgKCB0eXBlb2YgZXZ0LmRhdGEgIT09ICdzdHJpbmcnICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoIGV2dC5kYXRhICk7XHJcblxyXG4gICAgLy8gU2VudCBmcm9tIGFsbCBvZiBvdXIgUVVuaXQgd3JhcHBlcnNcclxuICAgIGlmICggZGF0YS50eXBlID09PSAncXVuaXQtdGVzdCcgKSB7XHJcbiAgICAgIGlmICggZGF0YS5yZXN1bHQgKSB7XHJcbiAgICAgICAgcGFzc2VkKys7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZmFpbGVkKys7XHJcbiAgICAgICAgbWVzc2FnZSArPSBgJHtkYXRhLm1vZHVsZX06ICR7ZGF0YS5uYW1lfSBmYWlsZWQ6XFxuJHtkYXRhLm1lc3NhZ2V9XFxuJHtkYXRhLnNvdXJjZX1cXG5cXG5gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSBpZiAoIGRhdGEudHlwZSA9PT0gJ3F1bml0LWRvbmUnICkge1xyXG5cclxuICAgICAgLy8gU3VwcG9ydHMgbmV3IHRlc3RzLCB3aGljaCBrbm93IHdoZW4gdGhleSBhcmUgZG9uZVxyXG4gICAgICBmYWlsZWQgPSBkYXRhLmZhaWxlZDtcclxuICAgICAgcGFzc2VkID0gZGF0YS5wYXNzZWQ7XHJcblxyXG4gICAgICBpZiAoIGlkICE9PSBudWxsICkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCggaWQgKTtcclxuICAgICAgICByZWNlaXZlZERvbmUgPSB0cnVlO1xyXG4gICAgICAgIGRvbmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIGRhdGEudHlwZSA9PT0gJ2Vycm9yJyApIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KCBpZCApO1xyXG5cclxuICAgICAgY29uc3QgdHJhbnNwaWxlZFN0YWNrdHJhY2UgPSBhd2FpdCB3aW5kb3cudHJhbnNwaWxlU3RhY2t0cmFjZSggZGF0YS5zdGFjayApO1xyXG4gICAgICBlcnJvciA9IGRhdGEubWVzc2FnZSArIHRyYW5zcGlsZWRTdGFja3RyYWNlO1xyXG4gICAgICBkb25lKCk7XHJcbiAgICB9XHJcbiAgfSApO1xyXG59ICkoKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsQ0FBRSxNQUFNO0VBQ04sTUFBTUEsT0FBTyxHQUFHQyxrQkFBa0IsQ0FBQ0MsTUFBTSxDQUFFO0lBQ3pDQyxHQUFHLEVBQUU7TUFDSEMsSUFBSSxFQUFFLFFBQVE7TUFDZEMsWUFBWSxFQUFFO0lBQ2hCLENBQUM7SUFDREMsUUFBUSxFQUFFO01BQ1JGLElBQUksRUFBRSxRQUFRO01BQ2RDLFlBQVksRUFBRTtJQUNoQjtFQUNGLENBQUUsQ0FBQztFQUVILE1BQU1FLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxXQUFXLENBQUMsQ0FBQztFQUNqQ0YsTUFBTSxDQUFDRyxHQUFHLEdBQUdWLE9BQU8sQ0FBQ0csR0FBRzs7RUFFeEI7RUFDQSxJQUFJUSxNQUFNLEdBQUcsQ0FBQztFQUNkLElBQUlDLE1BQU0sR0FBRyxDQUFDO0VBQ2QsSUFBSUMsWUFBWSxHQUFHLEtBQUs7RUFDeEIsSUFBSUMsT0FBTyxHQUFHLEVBQUU7RUFDaEIsSUFBSUMsS0FBSyxHQUFHLEVBQUU7RUFFZCxN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