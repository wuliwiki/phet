// Copyright 2022-2023, University of Colorado Boulder

/**
 * Shows a quick-server status visually
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { FireListener, HBox, Rectangle, Text } from '../../../scenery/js/imports.js';
import constants from './constants.js';
import popup from './popup.js';
import quickStatusProperty from './quickStatusProperty.js';
const createQuickResult = (labelString, name) => {
  const label = new Text(labelString, {
    font: constants.interfaceFont
  });
  const node = new Rectangle({
    rectBounds: label.bounds.dilatedXY(10, 5),
    children: [label],
    cursor: 'pointer'
  });
  node.addInputListener(new FireListener({
    fire: () => {
      const quickStatus = quickStatusProperty.value;
      if (quickStatus && quickStatus.tests && quickStatus.tests[name]) {
        popup(node, quickStatus.tests[name].message);
      }
    }
  }));
  quickStatusProperty.link(quickStatus => {
    if (quickStatus && quickStatus.tests && quickStatus.tests[name]) {
      node.fill = quickStatus.tests[name].passed ? constants.passColor : constants.failColor;
    } else {
      node.fill = constants.untestedColor;
    }
  });
  return node;
};
const quickTimestampText = new Text('loading...', {
  font: constants.interfaceFont,
  cursor: 'pointer'
});
quickTimestampText.addInputListener(new FireListener({
  fire: () => {
    const quickStatus = quickStatusProperty.value;
    if (quickStatus && quickStatus.shas) {
      popup(quickTimestampText, JSON.stringify(quickStatus.shas, null, 2));
    }
  }
}));
quickStatusProperty.lazyLink(quickStatus => {
  if (quickStatus && quickStatus.timestamp) {
    quickTimestampText.string = new Date(quickStatus.timestamp).toLocaleString();
  }
});
const quickNode = new HBox({
  spacing: 3,
  children: [quickTimestampText, createQuickResult('lint', 'lint'), createQuickResult('tsc', 'tsc'), createQuickResult('simFuzz', 'simFuzz'), createQuickResult('studioFuzz', 'studioFuzz')]
});
export default quickNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaXJlTGlzdGVuZXIiLCJIQm94IiwiUmVjdGFuZ2xlIiwiVGV4dCIsImNvbnN0YW50cyIsInBvcHVwIiwicXVpY2tTdGF0dXNQcm9wZXJ0eSIsImNyZWF0ZVF1aWNrUmVzdWx0IiwibGFiZWxTdHJpbmciLCJuYW1lIiwibGFiZWwiLCJmb250IiwiaW50ZXJmYWNlRm9udCIsIm5vZGUiLCJyZWN0Qm91bmRzIiwiYm91bmRzIiwiZGlsYXRlZFhZIiwiY2hpbGRyZW4iLCJjdXJzb3IiLCJhZGRJbnB1dExpc3RlbmVyIiwiZmlyZSIsInF1aWNrU3RhdHVzIiwidmFsdWUiLCJ0ZXN0cyIsIm1lc3NhZ2UiLCJsaW5rIiwiZmlsbCIsInBhc3NlZCIsInBhc3NDb2xvciIsImZhaWxDb2xvciIsInVudGVzdGVkQ29sb3IiLCJxdWlja1RpbWVzdGFtcFRleHQiLCJzaGFzIiwiSlNPTiIsInN0cmluZ2lmeSIsImxhenlMaW5rIiwidGltZXN0YW1wIiwic3RyaW5nIiwiRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwicXVpY2tOb2RlIiwic3BhY2luZyJdLCJzb3VyY2VzIjpbInF1aWNrTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaG93cyBhIHF1aWNrLXNlcnZlciBzdGF0dXMgdmlzdWFsbHlcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEZpcmVMaXN0ZW5lciwgSEJveCwgUmVjdGFuZ2xlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBwb3B1cCBmcm9tICcuL3BvcHVwLmpzJztcclxuaW1wb3J0IHF1aWNrU3RhdHVzUHJvcGVydHkgZnJvbSAnLi9xdWlja1N0YXR1c1Byb3BlcnR5LmpzJztcclxuXHJcbmNvbnN0IGNyZWF0ZVF1aWNrUmVzdWx0ID0gKCBsYWJlbFN0cmluZywgbmFtZSApID0+IHtcclxuICBjb25zdCBsYWJlbCA9IG5ldyBUZXh0KCBsYWJlbFN0cmluZywgeyBmb250OiBjb25zdGFudHMuaW50ZXJmYWNlRm9udCB9ICk7XHJcbiAgY29uc3Qgbm9kZSA9IG5ldyBSZWN0YW5nbGUoIHtcclxuICAgIHJlY3RCb3VuZHM6IGxhYmVsLmJvdW5kcy5kaWxhdGVkWFkoIDEwLCA1ICksXHJcbiAgICBjaGlsZHJlbjogWyBsYWJlbCBdLFxyXG4gICAgY3Vyc29yOiAncG9pbnRlcidcclxuICB9ICk7XHJcbiAgbm9kZS5hZGRJbnB1dExpc3RlbmVyKCBuZXcgRmlyZUxpc3RlbmVyKCB7XHJcbiAgICBmaXJlOiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHF1aWNrU3RhdHVzID0gcXVpY2tTdGF0dXNQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgaWYgKCBxdWlja1N0YXR1cyAmJiBxdWlja1N0YXR1cy50ZXN0cyAmJiBxdWlja1N0YXR1cy50ZXN0c1sgbmFtZSBdICkge1xyXG4gICAgICAgIHBvcHVwKCBub2RlLCBxdWlja1N0YXR1cy50ZXN0c1sgbmFtZSBdLm1lc3NhZ2UgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0gKSApO1xyXG4gIHF1aWNrU3RhdHVzUHJvcGVydHkubGluayggcXVpY2tTdGF0dXMgPT4ge1xyXG4gICAgaWYgKCBxdWlja1N0YXR1cyAmJiBxdWlja1N0YXR1cy50ZXN0cyAmJiBxdWlja1N0YXR1cy50ZXN0c1sgbmFtZSBdICkge1xyXG4gICAgICBub2RlLmZpbGwgPSBxdWlja1N0YXR1cy50ZXN0c1sgbmFtZSBdLnBhc3NlZCA/IGNvbnN0YW50cy5wYXNzQ29sb3IgOiBjb25zdGFudHMuZmFpbENvbG9yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIG5vZGUuZmlsbCA9IGNvbnN0YW50cy51bnRlc3RlZENvbG9yO1xyXG4gICAgfVxyXG4gIH0gKTtcclxuICByZXR1cm4gbm9kZTtcclxufTtcclxuXHJcbmNvbnN0IHF1aWNrVGltZXN0YW1wVGV4dCA9IG5ldyBUZXh0KCAnbG9hZGluZy4uLicsIHsgZm9udDogY29uc3RhbnRzLmludGVyZmFjZUZvbnQsIGN1cnNvcjogJ3BvaW50ZXInIH0gKTtcclxucXVpY2tUaW1lc3RhbXBUZXh0LmFkZElucHV0TGlzdGVuZXIoIG5ldyBGaXJlTGlzdGVuZXIoIHtcclxuICBmaXJlOiAoKSA9PiB7XHJcbiAgICBjb25zdCBxdWlja1N0YXR1cyA9IHF1aWNrU3RhdHVzUHJvcGVydHkudmFsdWU7XHJcbiAgICBpZiAoIHF1aWNrU3RhdHVzICYmIHF1aWNrU3RhdHVzLnNoYXMgKSB7XHJcbiAgICAgIHBvcHVwKCBxdWlja1RpbWVzdGFtcFRleHQsIEpTT04uc3RyaW5naWZ5KCBxdWlja1N0YXR1cy5zaGFzLCBudWxsLCAyICkgKTtcclxuICAgIH1cclxuICB9XHJcbn0gKSApO1xyXG5xdWlja1N0YXR1c1Byb3BlcnR5LmxhenlMaW5rKCBxdWlja1N0YXR1cyA9PiB7XHJcbiAgaWYgKCBxdWlja1N0YXR1cyAmJiBxdWlja1N0YXR1cy50aW1lc3RhbXAgKSB7XHJcbiAgICBxdWlja1RpbWVzdGFtcFRleHQuc3RyaW5nID0gbmV3IERhdGUoIHF1aWNrU3RhdHVzLnRpbWVzdGFtcCApLnRvTG9jYWxlU3RyaW5nKCk7XHJcbiAgfVxyXG59ICk7XHJcblxyXG5jb25zdCBxdWlja05vZGUgPSBuZXcgSEJveCgge1xyXG4gIHNwYWNpbmc6IDMsXHJcbiAgY2hpbGRyZW46IFtcclxuICAgIHF1aWNrVGltZXN0YW1wVGV4dCxcclxuICAgIGNyZWF0ZVF1aWNrUmVzdWx0KCAnbGludCcsICdsaW50JyApLFxyXG4gICAgY3JlYXRlUXVpY2tSZXN1bHQoICd0c2MnLCAndHNjJyApLFxyXG4gICAgY3JlYXRlUXVpY2tSZXN1bHQoICdzaW1GdXp6JywgJ3NpbUZ1enonICksXHJcbiAgICBjcmVhdGVRdWlja1Jlc3VsdCggJ3N0dWRpb0Z1enonLCAnc3R1ZGlvRnV6eicgKVxyXG4gIF1cclxufSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcXVpY2tOb2RlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsWUFBWSxFQUFFQyxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxRQUFRLGdDQUFnQztBQUNwRixPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQ3RDLE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBQzlCLE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQUUxRCxNQUFNQyxpQkFBaUIsR0FBR0EsQ0FBRUMsV0FBVyxFQUFFQyxJQUFJLEtBQU07RUFDakQsTUFBTUMsS0FBSyxHQUFHLElBQUlQLElBQUksQ0FBRUssV0FBVyxFQUFFO0lBQUVHLElBQUksRUFBRVAsU0FBUyxDQUFDUTtFQUFjLENBQUUsQ0FBQztFQUN4RSxNQUFNQyxJQUFJLEdBQUcsSUFBSVgsU0FBUyxDQUFFO0lBQzFCWSxVQUFVLEVBQUVKLEtBQUssQ0FBQ0ssTUFBTSxDQUFDQyxTQUFTLENBQUUsRUFBRSxFQUFFLENBQUUsQ0FBQztJQUMzQ0MsUUFBUSxFQUFFLENBQUVQLEtBQUssQ0FBRTtJQUNuQlEsTUFBTSxFQUFFO0VBQ1YsQ0FBRSxDQUFDO0VBQ0hMLElBQUksQ0FBQ00sZ0JBQWdCLENBQUUsSUFBSW5CLFlBQVksQ0FBRTtJQUN2Q29CLElBQUksRUFBRUEsQ0FBQSxLQUFNO01BQ1YsTUFBTUMsV0FBVyxHQUFHZixtQkFBbUIsQ0FBQ2dCLEtBQUs7TUFDN0MsSUFBS0QsV0FBVyxJQUFJQSxXQUFXLENBQUNFLEtBQUssSUFBSUYsV0FBVyxDQUFDRSxLQUFLLENBQUVkLElBQUksQ0FBRSxFQUFHO1FBQ25FSixLQUFLLENBQUVRLElBQUksRUFBRVEsV0FBVyxDQUFDRSxLQUFLLENBQUVkLElBQUksQ0FBRSxDQUFDZSxPQUFRLENBQUM7TUFDbEQ7SUFDRjtFQUNGLENBQUUsQ0FBRSxDQUFDO0VBQ0xsQixtQkFBbUIsQ0FBQ21CLElBQUksQ0FBRUosV0FBVyxJQUFJO0lBQ3ZDLElBQUtBLFdBQVcsSUFBSUEsV0FBVyxDQUFDRSxLQUFLLElBQUlGLFdBQVcsQ0FBQ0UsS0FBSyxDQUFFZCxJQUFJLENBQUUsRUFBRztNQUNuRUksSUFBSSxDQUFDYSxJQUFJLEdBQUdMLFdBQVcsQ0FBQ0UsS0FBSyxDQUFFZCxJQUFJLENBQUUsQ0FBQ2tCLE1BQU0sR0FBR3ZCLFNBQVMsQ0FBQ3dCLFNBQVMsR0FBR3hCLFNBQVMsQ0FBQ3lCLFNBQVM7SUFDMUYsQ0FBQyxNQUNJO01BQ0hoQixJQUFJLENBQUNhLElBQUksR0FBR3RCLFNBQVMsQ0FBQzBCLGFBQWE7SUFDckM7RUFDRixDQUFFLENBQUM7RUFDSCxPQUFPakIsSUFBSTtBQUNiLENBQUM7QUFFRCxNQUFNa0Isa0JBQWtCLEdBQUcsSUFBSTVCLElBQUksQ0FBRSxZQUFZLEVBQUU7RUFBRVEsSUFBSSxFQUFFUCxTQUFTLENBQUNRLGFBQWE7RUFBRU0sTUFBTSxFQUFFO0FBQVUsQ0FBRSxDQUFDO0FBQ3pHYSxrQkFBa0IsQ0FBQ1osZ0JBQWdCLENBQUUsSUFBSW5CLFlBQVksQ0FBRTtFQUNyRG9CLElBQUksRUFBRUEsQ0FBQSxLQUFNO0lBQ1YsTUFBTUMsV0FBVyxHQUFHZixtQkFBbUIsQ0FBQ2dCLEtBQUs7SUFDN0MsSUFBS0QsV0FBVyxJQUFJQSxXQUFXLENBQUNXLElBQUksRUFBRztNQUNyQzNCLEtBQUssQ0FBRTBCLGtCQUFrQixFQUFFRSxJQUFJLENBQUNDLFNBQVMsQ0FBRWIsV0FBVyxDQUFDVyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQzFFO0VBQ0Y7QUFDRixDQUFFLENBQUUsQ0FBQztBQUNMMUIsbUJBQW1CLENBQUM2QixRQUFRLENBQUVkLFdBQVcsSUFBSTtFQUMzQyxJQUFLQSxXQUFXLElBQUlBLFdBQVcsQ0FBQ2UsU0FBUyxFQUFHO0lBQzFDTCxrQkFBa0IsQ0FBQ00sTUFBTSxHQUFHLElBQUlDLElBQUksQ0FBRWpCLFdBQVcsQ0FBQ2UsU0FBVSxDQUFDLENBQUNHLGNBQWMsQ0FBQyxDQUFDO0VBQ2hGO0FBQ0YsQ0FBRSxDQUFDO0FBRUgsTUFBTUMsU0FBUyxHQUFHLElBQUl2QyxJQUFJLENBQUU7RUFDMUJ3QyxPQUFPLEVBQUUsQ0FBQztFQUNWeEIsUUFBUSxFQUFFLENBQ1JjLGtCQUFrQixFQUNsQnhCLGlCQUFpQixDQUFFLE1BQU0sRUFBRSxNQUFPLENBQUMsRUFDbkNBLGlCQUFpQixDQUFFLEtBQUssRUFBRSxLQUFNLENBQUMsRUFDakNBLGlCQUFpQixDQUFFLFNBQVMsRUFBRSxTQUFVLENBQUMsRUFDekNBLGlCQUFpQixDQUFFLFlBQVksRUFBRSxZQUFhLENBQUM7QUFFbkQsQ0FBRSxDQUFDO0FBRUgsZUFBZWlDLFNBQVMifQ==