// Copyright 2023, University of Colorado Boulder

/**
 * Launch playwright and point it to CT running on a server for 15 minutes.
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

const assert = require('assert');
const playwrightLoad = require('../../../perennial/js/common/playwrightLoad');
const {
  parentPort
} = require('worker_threads'); // eslint-disable-line require-statement-match
const playwright = require('../../../perennial/node_modules/playwright');
process.on('SIGINT', () => process.exit());
(async () => {
  const ctID = process.argv[2];
  assert(ctID, 'usage: node puppeteerCTClient {{SOME_IDENTIFIER_HERE}} {{SERVER}}');
  let server = process.argv[3];
  assert(server, 'usage: node puppeteerCTClient {{SOME_IDENTIFIER_HERE}} {{SERVER}}');
  server = server.endsWith('/') ? server : `${server}/`;

  // http so we don't need to overhead when running locally
  const url = `${server}continuous-testing/aqua/html/continuous-loop.html?id=${ctID}%20Playwright%20Firefox`;
  const loadingMessage = `Loading ${url}`;
  parentPort && parentPort.postMessage(loadingMessage);
  // console.log( loadingMessage );

  const error = await playwrightLoad(url, {
    testingBrowserCreator: playwright.firefox,
    // hard coded to firefox at this time
    waitAfterLoad: 10 * 60 * 1000,
    // 15 minutes
    allowedTimeToLoad: 2 * 60 * 1000,
    gotoTimeout: 1000000000,
    // a long time

    // A page error is what we are testing for. Don't fail the browser instance out when an assertion occurs
    rejectPageErrors: false
  });
  if (error) {
    // console.error( error );

    // Send the error to the parent Node process that spawned the worker.
    parentPort && parentPort.postMessage(error);
  }

  // The worker didn't seem to exit without this line
  process.exit(0);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwicGxheXdyaWdodExvYWQiLCJwYXJlbnRQb3J0IiwicGxheXdyaWdodCIsInByb2Nlc3MiLCJvbiIsImV4aXQiLCJjdElEIiwiYXJndiIsInNlcnZlciIsImVuZHNXaXRoIiwidXJsIiwibG9hZGluZ01lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImVycm9yIiwidGVzdGluZ0Jyb3dzZXJDcmVhdG9yIiwiZmlyZWZveCIsIndhaXRBZnRlckxvYWQiLCJhbGxvd2VkVGltZVRvTG9hZCIsImdvdG9UaW1lb3V0IiwicmVqZWN0UGFnZUVycm9ycyJdLCJzb3VyY2VzIjpbInBsYXl3cmlnaHRDVENsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTGF1bmNoIHBsYXl3cmlnaHQgYW5kIHBvaW50IGl0IHRvIENUIHJ1bm5pbmcgb24gYSBzZXJ2ZXIgZm9yIDE1IG1pbnV0ZXMuXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCAnYXNzZXJ0JyApO1xyXG5jb25zdCBwbGF5d3JpZ2h0TG9hZCA9IHJlcXVpcmUoICcuLi8uLi8uLi9wZXJlbm5pYWwvanMvY29tbW9uL3BsYXl3cmlnaHRMb2FkJyApO1xyXG5jb25zdCB7IHBhcmVudFBvcnQgfSA9IHJlcXVpcmUoICd3b3JrZXJfdGhyZWFkcycgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLXN0YXRlbWVudC1tYXRjaFxyXG5jb25zdCBwbGF5d3JpZ2h0ID0gcmVxdWlyZSggJy4uLy4uLy4uL3BlcmVubmlhbC9ub2RlX21vZHVsZXMvcGxheXdyaWdodCcgKTtcclxuXHJcbnByb2Nlc3Mub24oICdTSUdJTlQnLCAoKSA9PiBwcm9jZXNzLmV4aXQoKSApO1xyXG5cclxuKCBhc3luYyAoKSA9PiB7XHJcblxyXG4gIGNvbnN0IGN0SUQgPSBwcm9jZXNzLmFyZ3ZbIDIgXTtcclxuICBhc3NlcnQoIGN0SUQsICd1c2FnZTogbm9kZSBwdXBwZXRlZXJDVENsaWVudCB7e1NPTUVfSURFTlRJRklFUl9IRVJFfX0ge3tTRVJWRVJ9fScgKTtcclxuXHJcbiAgbGV0IHNlcnZlciA9IHByb2Nlc3MuYXJndlsgMyBdO1xyXG4gIGFzc2VydCggc2VydmVyLCAndXNhZ2U6IG5vZGUgcHVwcGV0ZWVyQ1RDbGllbnQge3tTT01FX0lERU5USUZJRVJfSEVSRX19IHt7U0VSVkVSfX0nICk7XHJcblxyXG4gIHNlcnZlciA9IHNlcnZlci5lbmRzV2l0aCggJy8nICkgPyBzZXJ2ZXIgOiBgJHtzZXJ2ZXJ9L2A7XHJcblxyXG4gIC8vIGh0dHAgc28gd2UgZG9uJ3QgbmVlZCB0byBvdmVyaGVhZCB3aGVuIHJ1bm5pbmcgbG9jYWxseVxyXG4gIGNvbnN0IHVybCA9IGAke3NlcnZlcn1jb250aW51b3VzLXRlc3RpbmcvYXF1YS9odG1sL2NvbnRpbnVvdXMtbG9vcC5odG1sP2lkPSR7Y3RJRH0lMjBQbGF5d3JpZ2h0JTIwRmlyZWZveGA7XHJcbiAgY29uc3QgbG9hZGluZ01lc3NhZ2UgPSBgTG9hZGluZyAke3VybH1gO1xyXG4gIHBhcmVudFBvcnQgJiYgcGFyZW50UG9ydC5wb3N0TWVzc2FnZSggbG9hZGluZ01lc3NhZ2UgKTtcclxuICAvLyBjb25zb2xlLmxvZyggbG9hZGluZ01lc3NhZ2UgKTtcclxuXHJcbiAgY29uc3QgZXJyb3IgPSBhd2FpdCBwbGF5d3JpZ2h0TG9hZCggdXJsLCB7XHJcbiAgICB0ZXN0aW5nQnJvd3NlckNyZWF0b3I6IHBsYXl3cmlnaHQuZmlyZWZveCwgLy8gaGFyZCBjb2RlZCB0byBmaXJlZm94IGF0IHRoaXMgdGltZVxyXG4gICAgd2FpdEFmdGVyTG9hZDogMTAgKiA2MCAqIDEwMDAsIC8vIDE1IG1pbnV0ZXNcclxuICAgIGFsbG93ZWRUaW1lVG9Mb2FkOiAyICogNjAgKiAxMDAwLFxyXG4gICAgZ290b1RpbWVvdXQ6IDEwMDAwMDAwMDAsIC8vIGEgbG9uZyB0aW1lXHJcblxyXG4gICAgLy8gQSBwYWdlIGVycm9yIGlzIHdoYXQgd2UgYXJlIHRlc3RpbmcgZm9yLiBEb24ndCBmYWlsIHRoZSBicm93c2VyIGluc3RhbmNlIG91dCB3aGVuIGFuIGFzc2VydGlvbiBvY2N1cnNcclxuICAgIHJlamVjdFBhZ2VFcnJvcnM6IGZhbHNlXHJcbiAgfSApO1xyXG4gIGlmICggZXJyb3IgKSB7XHJcbiAgICAvLyBjb25zb2xlLmVycm9yKCBlcnJvciApO1xyXG5cclxuICAgIC8vIFNlbmQgdGhlIGVycm9yIHRvIHRoZSBwYXJlbnQgTm9kZSBwcm9jZXNzIHRoYXQgc3Bhd25lZCB0aGUgd29ya2VyLlxyXG4gICAgcGFyZW50UG9ydCAmJiBwYXJlbnRQb3J0LnBvc3RNZXNzYWdlKCBlcnJvciApO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhlIHdvcmtlciBkaWRuJ3Qgc2VlbSB0byBleGl0IHdpdGhvdXQgdGhpcyBsaW5lXHJcbiAgcHJvY2Vzcy5leGl0KCAwICk7XHJcbn0gKSgpO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFFLFFBQVMsQ0FBQztBQUNsQyxNQUFNQyxjQUFjLEdBQUdELE9BQU8sQ0FBRSw2Q0FBOEMsQ0FBQztBQUMvRSxNQUFNO0VBQUVFO0FBQVcsQ0FBQyxHQUFHRixPQUFPLENBQUUsZ0JBQWlCLENBQUMsQ0FBQyxDQUFDO0FBQ3BELE1BQU1HLFVBQVUsR0FBR0gsT0FBTyxDQUFFLDRDQUE2QyxDQUFDO0FBRTFFSSxPQUFPLENBQUNDLEVBQUUsQ0FBRSxRQUFRLEVBQUUsTUFBTUQsT0FBTyxDQUFDRSxJQUFJLENBQUMsQ0FBRSxDQUFDO0FBRTVDLENBQUUsWUFBWTtFQUVaLE1BQU1DLElBQUksR0FBR0gsT0FBTyxDQUFDSSxJQUFJLENBQUUsQ0FBQyxDQUFFO0VBQzlCVCxNQUFNLENBQUVRLElBQUksRUFBRSxtRUFBb0UsQ0FBQztFQUVuRixJQUFJRSxNQUFNLEdBQUdMLE9BQU8sQ0FBQ0ksSUFBSSxDQUFFLENBQUMsQ0FBRTtFQUM5QlQsTUFBTSxDQUFFVSxNQUFNLEVBQUUsbUVBQW9FLENBQUM7RUFFckZBLE1BQU0sR0FBR0EsTUFBTSxDQUFDQyxRQUFRLENBQUUsR0FBSSxDQUFDLEdBQUdELE1BQU0sR0FBSSxHQUFFQSxNQUFPLEdBQUU7O0VBRXZEO0VBQ0EsTUFBTUUsR0FBRyxHQUFJLEdBQUVGLE1BQU8sd0RBQXVERixJQUFLLHlCQUF3QjtFQUMxRyxNQUFNSyxjQUFjLEdBQUksV0FBVUQsR0FBSSxFQUFDO0VBQ3ZDVCxVQUFVLElBQUlBLFVBQVUsQ0FBQ1csV0FBVyxDQUFFRCxjQUFlLENBQUM7RUFDdEQ7O0VBRUEsTUFBTUUsS0FBSyxHQUFHLE1BQU1iLGNBQWMsQ0FBRVUsR0FBRyxFQUFFO0lBQ3ZDSSxxQkFBcUIsRUFBRVosVUFBVSxDQUFDYSxPQUFPO0lBQUU7SUFDM0NDLGFBQWEsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUk7SUFBRTtJQUMvQkMsaUJBQWlCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJO0lBQ2hDQyxXQUFXLEVBQUUsVUFBVTtJQUFFOztJQUV6QjtJQUNBQyxnQkFBZ0IsRUFBRTtFQUNwQixDQUFFLENBQUM7RUFDSCxJQUFLTixLQUFLLEVBQUc7SUFDWDs7SUFFQTtJQUNBWixVQUFVLElBQUlBLFVBQVUsQ0FBQ1csV0FBVyxDQUFFQyxLQUFNLENBQUM7RUFDL0M7O0VBRUE7RUFDQVYsT0FBTyxDQUFDRSxJQUFJLENBQUUsQ0FBRSxDQUFDO0FBQ25CLENBQUMsRUFBRyxDQUFDIn0=