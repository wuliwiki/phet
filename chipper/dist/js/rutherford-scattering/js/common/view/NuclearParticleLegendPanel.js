// Copyright 2016-2022, University of Colorado Boulder

/**
 * Legend for particles related to the nuclear views in the sim
 *
 * @author Dave Schmitz (Schmitzware)
 * @author Jesse Greenberg
 */

import merge from '../../../../phet-core/js/merge.js';
import rutherfordScattering from '../../rutherfordScattering.js';
import RutherfordScatteringStrings from '../../RutherfordScatteringStrings.js';
import ParticleLegendPanel from './ParticleLegendPanel.js';
import ParticleNodeFactory from './ParticleNodeFactory.js';
const alphaParticleString = RutherfordScatteringStrings.alphaParticle;
const electronString = RutherfordScatteringStrings.electron;
const neutronString = RutherfordScatteringStrings.neutron;
const positiveChargeString = RutherfordScatteringStrings.positiveCharge;
const protonString = RutherfordScatteringStrings.proton;
class NuclearParticleLegendPanel extends ParticleLegendPanel {
  /**
   * @param {Node} content
   * @param {Object} [options]
   */
  constructor(content, options) {
    super(content, options);
  }

  /**
   * Create the panel content that is to be in this control panel.
   * @param  {Object} options
   * @returns {Node}
   * @public
   */
  static createPanelContent(options) {
    options = merge({
      includeElectron: true // should the panel include an entry for the electron?
    }, options);

    // {Array.<Node>} - children for the content, gets wrapped in AlignBoxes in createPanelContent
    const content = [];
    if (options.includeElectron) {
      content.push(ParticleLegendPanel.createParticleBox(ParticleNodeFactory.createElectron(), electronString));
    }
    content.push(ParticleLegendPanel.createParticleBox(ParticleNodeFactory.createProton(), protonString));
    content.push(ParticleLegendPanel.createParticleBox(ParticleNodeFactory.createNeutron(), neutronString));
    content.push(ParticleLegendPanel.createParticleBox(ParticleNodeFactory.createNucleusAlpha(), alphaParticleString));
    if (options.includePlumPudding) {
      content.push(ParticleLegendPanel.createParticleBox(ParticleNodeFactory.createPlumPuddingIcon(), positiveChargeString));
    }
    return ParticleLegendPanel.createPanelContent(content, options);
  }
}
rutherfordScattering.register('NuclearParticleLegendPanel', NuclearParticleLegendPanel);
export default NuclearParticleLegendPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsInJ1dGhlcmZvcmRTY2F0dGVyaW5nIiwiUnV0aGVyZm9yZFNjYXR0ZXJpbmdTdHJpbmdzIiwiUGFydGljbGVMZWdlbmRQYW5lbCIsIlBhcnRpY2xlTm9kZUZhY3RvcnkiLCJhbHBoYVBhcnRpY2xlU3RyaW5nIiwiYWxwaGFQYXJ0aWNsZSIsImVsZWN0cm9uU3RyaW5nIiwiZWxlY3Ryb24iLCJuZXV0cm9uU3RyaW5nIiwibmV1dHJvbiIsInBvc2l0aXZlQ2hhcmdlU3RyaW5nIiwicG9zaXRpdmVDaGFyZ2UiLCJwcm90b25TdHJpbmciLCJwcm90b24iLCJOdWNsZWFyUGFydGljbGVMZWdlbmRQYW5lbCIsImNvbnN0cnVjdG9yIiwiY29udGVudCIsIm9wdGlvbnMiLCJjcmVhdGVQYW5lbENvbnRlbnQiLCJpbmNsdWRlRWxlY3Ryb24iLCJwdXNoIiwiY3JlYXRlUGFydGljbGVCb3giLCJjcmVhdGVFbGVjdHJvbiIsImNyZWF0ZVByb3RvbiIsImNyZWF0ZU5ldXRyb24iLCJjcmVhdGVOdWNsZXVzQWxwaGEiLCJpbmNsdWRlUGx1bVB1ZGRpbmciLCJjcmVhdGVQbHVtUHVkZGluZ0ljb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk51Y2xlYXJQYXJ0aWNsZUxlZ2VuZFBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExlZ2VuZCBmb3IgcGFydGljbGVzIHJlbGF0ZWQgdG8gdGhlIG51Y2xlYXIgdmlld3MgaW4gdGhlIHNpbVxyXG4gKlxyXG4gKiBAYXV0aG9yIERhdmUgU2NobWl0eiAoU2NobWl0endhcmUpXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBydXRoZXJmb3JkU2NhdHRlcmluZyBmcm9tICcuLi8uLi9ydXRoZXJmb3JkU2NhdHRlcmluZy5qcyc7XHJcbmltcG9ydCBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MgZnJvbSAnLi4vLi4vUnV0aGVyZm9yZFNjYXR0ZXJpbmdTdHJpbmdzLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlTGVnZW5kUGFuZWwgZnJvbSAnLi9QYXJ0aWNsZUxlZ2VuZFBhbmVsLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlTm9kZUZhY3RvcnkgZnJvbSAnLi9QYXJ0aWNsZU5vZGVGYWN0b3J5LmpzJztcclxuXHJcbmNvbnN0IGFscGhhUGFydGljbGVTdHJpbmcgPSBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MuYWxwaGFQYXJ0aWNsZTtcclxuY29uc3QgZWxlY3Ryb25TdHJpbmcgPSBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MuZWxlY3Ryb247XHJcbmNvbnN0IG5ldXRyb25TdHJpbmcgPSBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MubmV1dHJvbjtcclxuY29uc3QgcG9zaXRpdmVDaGFyZ2VTdHJpbmcgPSBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MucG9zaXRpdmVDaGFyZ2U7XHJcbmNvbnN0IHByb3RvblN0cmluZyA9IFJ1dGhlcmZvcmRTY2F0dGVyaW5nU3RyaW5ncy5wcm90b247XHJcblxyXG5jbGFzcyBOdWNsZWFyUGFydGljbGVMZWdlbmRQYW5lbCBleHRlbmRzIFBhcnRpY2xlTGVnZW5kUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge05vZGV9IGNvbnRlbnRcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvbnRlbnQsIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIHRoZSBwYW5lbCBjb250ZW50IHRoYXQgaXMgdG8gYmUgaW4gdGhpcyBjb250cm9sIHBhbmVsLlxyXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xyXG4gICAqIEByZXR1cm5zIHtOb2RlfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzdGF0aWMgY3JlYXRlUGFuZWxDb250ZW50KCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBpbmNsdWRlRWxlY3Ryb246IHRydWUgLy8gc2hvdWxkIHRoZSBwYW5lbCBpbmNsdWRlIGFuIGVudHJ5IGZvciB0aGUgZWxlY3Ryb24/XHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8ge0FycmF5LjxOb2RlPn0gLSBjaGlsZHJlbiBmb3IgdGhlIGNvbnRlbnQsIGdldHMgd3JhcHBlZCBpbiBBbGlnbkJveGVzIGluIGNyZWF0ZVBhbmVsQ29udGVudFxyXG4gICAgY29uc3QgY29udGVudCA9IFtdO1xyXG4gICAgaWYgKCBvcHRpb25zLmluY2x1ZGVFbGVjdHJvbiApIHtcclxuICAgICAgY29udGVudC5wdXNoKCBQYXJ0aWNsZUxlZ2VuZFBhbmVsLmNyZWF0ZVBhcnRpY2xlQm94KCBQYXJ0aWNsZU5vZGVGYWN0b3J5LmNyZWF0ZUVsZWN0cm9uKCksIGVsZWN0cm9uU3RyaW5nICkgKTtcclxuICAgIH1cclxuICAgIGNvbnRlbnQucHVzaCggUGFydGljbGVMZWdlbmRQYW5lbC5jcmVhdGVQYXJ0aWNsZUJveCggUGFydGljbGVOb2RlRmFjdG9yeS5jcmVhdGVQcm90b24oKSwgcHJvdG9uU3RyaW5nICkgKTtcclxuICAgIGNvbnRlbnQucHVzaCggUGFydGljbGVMZWdlbmRQYW5lbC5jcmVhdGVQYXJ0aWNsZUJveCggUGFydGljbGVOb2RlRmFjdG9yeS5jcmVhdGVOZXV0cm9uKCksIG5ldXRyb25TdHJpbmcgKSApO1xyXG4gICAgY29udGVudC5wdXNoKCBQYXJ0aWNsZUxlZ2VuZFBhbmVsLmNyZWF0ZVBhcnRpY2xlQm94KCBQYXJ0aWNsZU5vZGVGYWN0b3J5LmNyZWF0ZU51Y2xldXNBbHBoYSgpLCBhbHBoYVBhcnRpY2xlU3RyaW5nICkgKTtcclxuICAgIGlmICggb3B0aW9ucy5pbmNsdWRlUGx1bVB1ZGRpbmcgKSB7XHJcbiAgICAgIGNvbnRlbnQucHVzaCggUGFydGljbGVMZWdlbmRQYW5lbC5jcmVhdGVQYXJ0aWNsZUJveCggUGFydGljbGVOb2RlRmFjdG9yeS5jcmVhdGVQbHVtUHVkZGluZ0ljb24oKSwgcG9zaXRpdmVDaGFyZ2VTdHJpbmcgKSApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBQYXJ0aWNsZUxlZ2VuZFBhbmVsLmNyZWF0ZVBhbmVsQ29udGVudCggY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxucnV0aGVyZm9yZFNjYXR0ZXJpbmcucmVnaXN0ZXIoICdOdWNsZWFyUGFydGljbGVMZWdlbmRQYW5lbCcsIE51Y2xlYXJQYXJ0aWNsZUxlZ2VuZFBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IE51Y2xlYXJQYXJ0aWNsZUxlZ2VuZFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLDJCQUEyQixNQUFNLHNDQUFzQztBQUM5RSxPQUFPQyxtQkFBbUIsTUFBTSwwQkFBMEI7QUFDMUQsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBRTFELE1BQU1DLG1CQUFtQixHQUFHSCwyQkFBMkIsQ0FBQ0ksYUFBYTtBQUNyRSxNQUFNQyxjQUFjLEdBQUdMLDJCQUEyQixDQUFDTSxRQUFRO0FBQzNELE1BQU1DLGFBQWEsR0FBR1AsMkJBQTJCLENBQUNRLE9BQU87QUFDekQsTUFBTUMsb0JBQW9CLEdBQUdULDJCQUEyQixDQUFDVSxjQUFjO0FBQ3ZFLE1BQU1DLFlBQVksR0FBR1gsMkJBQTJCLENBQUNZLE1BQU07QUFFdkQsTUFBTUMsMEJBQTBCLFNBQVNaLG1CQUFtQixDQUFDO0VBRTNEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VhLFdBQVdBLENBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFHO0lBQzlCLEtBQUssQ0FBRUQsT0FBTyxFQUFFQyxPQUFRLENBQUM7RUFDM0I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBT0Msa0JBQWtCQSxDQUFFRCxPQUFPLEVBQUc7SUFFbkNBLE9BQU8sR0FBR2xCLEtBQUssQ0FBRTtNQUNmb0IsZUFBZSxFQUFFLElBQUksQ0FBQztJQUN4QixDQUFDLEVBQUVGLE9BQVEsQ0FBQzs7SUFFWjtJQUNBLE1BQU1ELE9BQU8sR0FBRyxFQUFFO0lBQ2xCLElBQUtDLE9BQU8sQ0FBQ0UsZUFBZSxFQUFHO01BQzdCSCxPQUFPLENBQUNJLElBQUksQ0FBRWxCLG1CQUFtQixDQUFDbUIsaUJBQWlCLENBQUVsQixtQkFBbUIsQ0FBQ21CLGNBQWMsQ0FBQyxDQUFDLEVBQUVoQixjQUFlLENBQUUsQ0FBQztJQUMvRztJQUNBVSxPQUFPLENBQUNJLElBQUksQ0FBRWxCLG1CQUFtQixDQUFDbUIsaUJBQWlCLENBQUVsQixtQkFBbUIsQ0FBQ29CLFlBQVksQ0FBQyxDQUFDLEVBQUVYLFlBQWEsQ0FBRSxDQUFDO0lBQ3pHSSxPQUFPLENBQUNJLElBQUksQ0FBRWxCLG1CQUFtQixDQUFDbUIsaUJBQWlCLENBQUVsQixtQkFBbUIsQ0FBQ3FCLGFBQWEsQ0FBQyxDQUFDLEVBQUVoQixhQUFjLENBQUUsQ0FBQztJQUMzR1EsT0FBTyxDQUFDSSxJQUFJLENBQUVsQixtQkFBbUIsQ0FBQ21CLGlCQUFpQixDQUFFbEIsbUJBQW1CLENBQUNzQixrQkFBa0IsQ0FBQyxDQUFDLEVBQUVyQixtQkFBb0IsQ0FBRSxDQUFDO0lBQ3RILElBQUthLE9BQU8sQ0FBQ1Msa0JBQWtCLEVBQUc7TUFDaENWLE9BQU8sQ0FBQ0ksSUFBSSxDQUFFbEIsbUJBQW1CLENBQUNtQixpQkFBaUIsQ0FBRWxCLG1CQUFtQixDQUFDd0IscUJBQXFCLENBQUMsQ0FBQyxFQUFFakIsb0JBQXFCLENBQUUsQ0FBQztJQUM1SDtJQUVBLE9BQU9SLG1CQUFtQixDQUFDZ0Isa0JBQWtCLENBQUVGLE9BQU8sRUFBRUMsT0FBUSxDQUFDO0VBQ25FO0FBQ0Y7QUFFQWpCLG9CQUFvQixDQUFDNEIsUUFBUSxDQUFFLDRCQUE0QixFQUFFZCwwQkFBMkIsQ0FBQztBQUN6RixlQUFlQSwwQkFBMEIifQ==