// Copyright 2016-2022, University of Colorado Boulder

/**
 * Builds the UI scale label w/ arrows & end markers
 * i.e.  |<--------- label ---------->|
 *
 * @author Dave Schmitz (Schmitzware)
 */

import { Shape } from '../../../../kite/js/imports.js';
import merge from '../../../../phet-core/js/merge.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import { Node, Path, RichText } from '../../../../scenery/js/imports.js';
import rutherfordScattering from '../../rutherfordScattering.js';
import RSColors from '../RSColors.js';
import RSConstants from '../RSConstants.js';

// constants
const ARROW_HEAD_WIDTH = 12;
const ARROW_HEAD_HEIGHT = 12;
const ARROW_TAIL_MARGIN = 5;
class ScaleInfoNode extends Node {
  /**
   * @param {string} label - the label to place in the middle of the arrows
   * @param {number} width - the desired width of the Node
   * @param {Object} [options]
   */
  constructor(label, width, options) {
    options = merge({
      font: RSConstants.SCALE_TITLE_FONT
    }, options);

    // scale text
    const labelText = new RichText(label, {
      font: options.font,
      fill: RSColors.panelLabelColorProperty,
      maxWidth: 0.9 * width
    });

    // left arrow
    const arrowWidth = (width - labelText.getWidth()) / 2;
    const leftArrowX = labelText.left - arrowWidth;
    const leftArrowNode = new ArrowNode(labelText.left - ARROW_TAIL_MARGIN, labelText.centerY, leftArrowX, labelText.centerY, {
      headHeight: ARROW_HEAD_HEIGHT,
      headWidth: ARROW_HEAD_WIDTH,
      tailWidth: 2,
      fill: RSColors.panelLabelColorProperty
    });

    // right arrow
    const rightArrowX = labelText.right + arrowWidth;
    const rightArrowNode = new ArrowNode(labelText.right + ARROW_TAIL_MARGIN, labelText.centerY, rightArrowX, labelText.centerY, {
      headHeight: ARROW_HEAD_HEIGHT,
      headWidth: ARROW_HEAD_WIDTH,
      tailWidth: 2,
      fill: RSColors.panelLabelColorProperty
    });

    // end markers
    const leftMarker = new Path(new Shape().moveTo(leftArrowX, labelText.bounds.minY).lineTo(leftArrowX, labelText.bounds.maxY), {
      stroke: RSColors.panelLabelColorProperty,
      lineWidth: 1.5
    });
    const rightMarker = new Path(new Shape().moveTo(rightArrowX, labelText.bounds.minY).lineTo(rightArrowX, labelText.bounds.maxY), {
      stroke: RSColors.panelLabelColorProperty,
      lineWidth: 1.5
    });
    assert && assert(!options.children, 'additional children not supported');
    options.children = [labelText, leftArrowNode, rightArrowNode, leftMarker, rightMarker];
    super(options);
  }
}
rutherfordScattering.register('ScaleInfoNode', ScaleInfoNode);
export default ScaleInfoNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm1lcmdlIiwiQXJyb3dOb2RlIiwiTm9kZSIsIlBhdGgiLCJSaWNoVGV4dCIsInJ1dGhlcmZvcmRTY2F0dGVyaW5nIiwiUlNDb2xvcnMiLCJSU0NvbnN0YW50cyIsIkFSUk9XX0hFQURfV0lEVEgiLCJBUlJPV19IRUFEX0hFSUdIVCIsIkFSUk9XX1RBSUxfTUFSR0lOIiwiU2NhbGVJbmZvTm9kZSIsImNvbnN0cnVjdG9yIiwibGFiZWwiLCJ3aWR0aCIsIm9wdGlvbnMiLCJmb250IiwiU0NBTEVfVElUTEVfRk9OVCIsImxhYmVsVGV4dCIsImZpbGwiLCJwYW5lbExhYmVsQ29sb3JQcm9wZXJ0eSIsIm1heFdpZHRoIiwiYXJyb3dXaWR0aCIsImdldFdpZHRoIiwibGVmdEFycm93WCIsImxlZnQiLCJsZWZ0QXJyb3dOb2RlIiwiY2VudGVyWSIsImhlYWRIZWlnaHQiLCJoZWFkV2lkdGgiLCJ0YWlsV2lkdGgiLCJyaWdodEFycm93WCIsInJpZ2h0IiwicmlnaHRBcnJvd05vZGUiLCJsZWZ0TWFya2VyIiwibW92ZVRvIiwiYm91bmRzIiwibWluWSIsImxpbmVUbyIsIm1heFkiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJyaWdodE1hcmtlciIsImFzc2VydCIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTY2FsZUluZm9Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJ1aWxkcyB0aGUgVUkgc2NhbGUgbGFiZWwgdy8gYXJyb3dzICYgZW5kIG1hcmtlcnNcclxuICogaS5lLiAgfDwtLS0tLS0tLS0gbGFiZWwgLS0tLS0tLS0tLT58XHJcbiAqXHJcbiAqIEBhdXRob3IgRGF2ZSBTY2htaXR6IChTY2htaXR6d2FyZSlcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBQYXRoLCBSaWNoVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBydXRoZXJmb3JkU2NhdHRlcmluZyBmcm9tICcuLi8uLi9ydXRoZXJmb3JkU2NhdHRlcmluZy5qcyc7XHJcbmltcG9ydCBSU0NvbG9ycyBmcm9tICcuLi9SU0NvbG9ycy5qcyc7XHJcbmltcG9ydCBSU0NvbnN0YW50cyBmcm9tICcuLi9SU0NvbnN0YW50cy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQVJST1dfSEVBRF9XSURUSCA9IDEyO1xyXG5jb25zdCBBUlJPV19IRUFEX0hFSUdIVCA9IDEyO1xyXG5jb25zdCBBUlJPV19UQUlMX01BUkdJTiA9IDU7XHJcblxyXG5jbGFzcyBTY2FsZUluZm9Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbCAtIHRoZSBsYWJlbCB0byBwbGFjZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBhcnJvd3NcclxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSB0aGUgZGVzaXJlZCB3aWR0aCBvZiB0aGUgTm9kZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbGFiZWwsIHdpZHRoLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBmb250OiBSU0NvbnN0YW50cy5TQ0FMRV9USVRMRV9GT05UXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gc2NhbGUgdGV4dFxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFJpY2hUZXh0KCBsYWJlbCwge1xyXG4gICAgICBmb250OiBvcHRpb25zLmZvbnQsXHJcbiAgICAgIGZpbGw6IFJTQ29sb3JzLnBhbmVsTGFiZWxDb2xvclByb3BlcnR5LFxyXG4gICAgICBtYXhXaWR0aDogMC45ICogd2lkdGhcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBsZWZ0IGFycm93XHJcbiAgICBjb25zdCBhcnJvd1dpZHRoID0gKCB3aWR0aCAtIGxhYmVsVGV4dC5nZXRXaWR0aCgpICkgLyAyO1xyXG4gICAgY29uc3QgbGVmdEFycm93WCA9IGxhYmVsVGV4dC5sZWZ0IC0gYXJyb3dXaWR0aDtcclxuICAgIGNvbnN0IGxlZnRBcnJvd05vZGUgPSBuZXcgQXJyb3dOb2RlKCBsYWJlbFRleHQubGVmdCAtIEFSUk9XX1RBSUxfTUFSR0lOLCBsYWJlbFRleHQuY2VudGVyWSxcclxuICAgICAgbGVmdEFycm93WCwgbGFiZWxUZXh0LmNlbnRlclksIHtcclxuICAgICAgICBoZWFkSGVpZ2h0OiBBUlJPV19IRUFEX0hFSUdIVCxcclxuICAgICAgICBoZWFkV2lkdGg6IEFSUk9XX0hFQURfV0lEVEgsXHJcbiAgICAgICAgdGFpbFdpZHRoOiAyLFxyXG4gICAgICAgIGZpbGw6IFJTQ29sb3JzLnBhbmVsTGFiZWxDb2xvclByb3BlcnR5XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAvLyByaWdodCBhcnJvd1xyXG4gICAgY29uc3QgcmlnaHRBcnJvd1ggPSBsYWJlbFRleHQucmlnaHQgKyBhcnJvd1dpZHRoO1xyXG4gICAgY29uc3QgcmlnaHRBcnJvd05vZGUgPSBuZXcgQXJyb3dOb2RlKCBsYWJlbFRleHQucmlnaHQgKyBBUlJPV19UQUlMX01BUkdJTiwgbGFiZWxUZXh0LmNlbnRlclksXHJcbiAgICAgIHJpZ2h0QXJyb3dYLCBsYWJlbFRleHQuY2VudGVyWSwge1xyXG4gICAgICAgIGhlYWRIZWlnaHQ6IEFSUk9XX0hFQURfSEVJR0hULFxyXG4gICAgICAgIGhlYWRXaWR0aDogQVJST1dfSEVBRF9XSURUSCxcclxuICAgICAgICB0YWlsV2lkdGg6IDIsXHJcbiAgICAgICAgZmlsbDogUlNDb2xvcnMucGFuZWxMYWJlbENvbG9yUHJvcGVydHlcclxuICAgICAgfSApO1xyXG5cclxuICAgIC8vIGVuZCBtYXJrZXJzXHJcbiAgICBjb25zdCBsZWZ0TWFya2VyID0gbmV3IFBhdGgoIG5ldyBTaGFwZSgpLm1vdmVUbyggbGVmdEFycm93WCwgbGFiZWxUZXh0LmJvdW5kcy5taW5ZICkubGluZVRvKCBsZWZ0QXJyb3dYLCBsYWJlbFRleHQuYm91bmRzLm1heFkgKSwge1xyXG4gICAgICBzdHJva2U6IFJTQ29sb3JzLnBhbmVsTGFiZWxDb2xvclByb3BlcnR5LFxyXG4gICAgICBsaW5lV2lkdGg6IDEuNVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHJpZ2h0TWFya2VyID0gbmV3IFBhdGgoIG5ldyBTaGFwZSgpLm1vdmVUbyggcmlnaHRBcnJvd1gsIGxhYmVsVGV4dC5ib3VuZHMubWluWSApLmxpbmVUbyggcmlnaHRBcnJvd1gsIGxhYmVsVGV4dC5ib3VuZHMubWF4WSApLCB7XHJcbiAgICAgIHN0cm9rZTogUlNDb2xvcnMucGFuZWxMYWJlbENvbG9yUHJvcGVydHksXHJcbiAgICAgIGxpbmVXaWR0aDogMS41XHJcbiAgICB9ICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuY2hpbGRyZW4sICdhZGRpdGlvbmFsIGNoaWxkcmVuIG5vdCBzdXBwb3J0ZWQnICk7XHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBsYWJlbFRleHQsIGxlZnRBcnJvd05vZGUsIHJpZ2h0QXJyb3dOb2RlLCBsZWZ0TWFya2VyLCByaWdodE1hcmtlciBdO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5ydXRoZXJmb3JkU2NhdHRlcmluZy5yZWdpc3RlciggJ1NjYWxlSW5mb05vZGUnLCBTY2FsZUluZm9O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