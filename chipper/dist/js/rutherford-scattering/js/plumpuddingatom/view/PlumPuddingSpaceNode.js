// Copyright 2016-2021, University of Colorado Boulder

/**
 * PlumPuddingSpaceNode is the space in which atoms and alpha particles are rendered.
 *
 * @author Dave Schmitz (Schmitzware)
 */

import merge from '../../../../phet-core/js/merge.js';
import required from '../../../../phet-core/js/required.js';
import { Color } from '../../../../scenery/js/imports.js';
import ParticleSpaceNode from '../../common/view/ParticleSpaceNode.js';
import rutherfordScattering from '../../rutherfordScattering.js';
import PlumPuddingAtomNode from './PlumPuddingAtomNode.js';
class PlumPuddingSpaceNode extends ParticleSpaceNode {
  /**
   * @param {RSBaseModel} model
   * @param {Property.<boolean>} showAlphaTraceProperty
   * @param {ModelViewTransform2} modelViewTransform - model to view  transform
   * @param {Object} config - must provide {Bounds2} canvasBounds
   */
  constructor(model, showAlphaTraceProperty, modelViewTransform, config) {
    config = merge({
      canvasBounds: required(config.canvasBounds),
      particleTraceColor: new Color('grey')
    }, config);
    super(model.plumPuddingSpace, showAlphaTraceProperty, modelViewTransform, config);

    // plum pudding image - calc image scale and center positioning
    this.atomNode = new PlumPuddingAtomNode();
    const scale = Math.min(this.width, this.height) / Math.max(this.atomNode.width, this.atomNode.height);
    const imageWidth = this.atomNode.width * scale;
    const imageHeight = this.atomNode.height * scale;
    const imageX = this.bounds.centerX - imageWidth / 2;
    const imageY = this.bounds.centerY - imageHeight / 2;
    this.atomNodeRect = {
      x: imageX,
      y: imageY,
      width: imageWidth,
      height: imageHeight
    };
    this.invalidatePaint();
  }

  /**
   * Draws the background image
   *
   * @param {CanvasRenderingContext2D} context
   * @override
   * @protected
   */
  paintSpace(context) {
    // Slight chance the image used isn't available. In that case, return & try again on next frame
    if (this.atomNode.image === null) {
      return;
    }
    context.drawImage(this.atomNode.image, this.atomNodeRect.x, this.atomNodeRect.y, this.atomNodeRect.width, this.atomNodeRect.height);
  }
}
rutherfordScattering.register('PlumPuddingSpaceNode', PlumPuddingSpaceNode);
export default PlumPuddingSpaceNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsInJlcXVpcmVkIiwiQ29sb3IiLCJQYXJ0aWNsZVNwYWNlTm9kZSIsInJ1dGhlcmZvcmRTY2F0dGVyaW5nIiwiUGx1bVB1ZGRpbmdBdG9tTm9kZSIsIlBsdW1QdWRkaW5nU3BhY2VOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInNob3dBbHBoYVRyYWNlUHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJjb25maWciLCJjYW52YXNCb3VuZHMiLCJwYXJ0aWNsZVRyYWNlQ29sb3IiLCJwbHVtUHVkZGluZ1NwYWNlIiwiYXRvbU5vZGUiLCJzY2FsZSIsIk1hdGgiLCJtaW4iLCJ3aWR0aCIsImhlaWdodCIsIm1heCIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsImltYWdlWCIsImJvdW5kcyIsImNlbnRlclgiLCJpbWFnZVkiLCJjZW50ZXJZIiwiYXRvbU5vZGVSZWN0IiwieCIsInkiLCJpbnZhbGlkYXRlUGFpbnQiLCJwYWludFNwYWNlIiwiY29udGV4dCIsImltYWdlIiwiZHJhd0ltYWdlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQbHVtUHVkZGluZ1NwYWNlTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQbHVtUHVkZGluZ1NwYWNlTm9kZSBpcyB0aGUgc3BhY2UgaW4gd2hpY2ggYXRvbXMgYW5kIGFscGhhIHBhcnRpY2xlcyBhcmUgcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgRGF2ZSBTY2htaXR6IChTY2htaXR6d2FyZSlcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHJlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9yZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlU3BhY2VOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1BhcnRpY2xlU3BhY2VOb2RlLmpzJztcclxuaW1wb3J0IHJ1dGhlcmZvcmRTY2F0dGVyaW5nIGZyb20gJy4uLy4uL3J1dGhlcmZvcmRTY2F0dGVyaW5nLmpzJztcclxuaW1wb3J0IFBsdW1QdWRkaW5nQXRvbU5vZGUgZnJvbSAnLi9QbHVtUHVkZGluZ0F0b21Ob2RlLmpzJztcclxuXHJcbmNsYXNzIFBsdW1QdWRkaW5nU3BhY2VOb2RlIGV4dGVuZHMgUGFydGljbGVTcGFjZU5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1JTQmFzZU1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSBzaG93QWxwaGFUcmFjZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm0gLSBtb2RlbCB0byB2aWV3ICB0cmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gbXVzdCBwcm92aWRlIHtCb3VuZHMyfSBjYW52YXNCb3VuZHNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIHNob3dBbHBoYVRyYWNlUHJvcGVydHksIG1vZGVsVmlld1RyYW5zZm9ybSwgY29uZmlnICkge1xyXG4gICAgY29uZmlnID0gbWVyZ2UoIHtcclxuICAgICAgY2FudmFzQm91bmRzOiByZXF1aXJlZCggY29uZmlnLmNhbnZhc0JvdW5kcyApLFxyXG4gICAgICBwYXJ0aWNsZVRyYWNlQ29sb3I6IG5ldyBDb2xvciggJ2dyZXknIClcclxuICAgIH0sIGNvbmZpZyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbC5wbHVtUHVkZGluZ1NwYWNlLCBzaG93QWxwaGFUcmFjZVByb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIGNvbmZpZyApO1xyXG5cclxuICAgIC8vIHBsdW0gcHVkZGluZyBpbWFnZSAtIGNhbGMgaW1hZ2Ugc2NhbGUgYW5kIGNlbnRlciBwb3NpdGlvbmluZ1xyXG4gICAgdGhpcy5hdG9tTm9kZSA9IG5ldyBQbHVtUHVkZGluZ0F0b21Ob2RlKCk7XHJcbiAgICBjb25zdCBzY2FsZSA9IE1hdGgubWluKCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCApIC9cclxuICAgICAgICAgICAgICAgICAgKCBNYXRoLm1heCggdGhpcy5hdG9tTm9kZS53aWR0aCwgdGhpcy5hdG9tTm9kZS5oZWlnaHQgKSApO1xyXG4gICAgY29uc3QgaW1hZ2VXaWR0aCA9IHRoaXMuYXRvbU5vZGUud2lkdGggKiBzY2FsZTtcclxuICAgIGNvbnN0IGltYWdlSGVpZ2h0ID0gdGhpcy5hdG9tTm9kZS5oZWlnaHQgKiBzY2FsZTtcclxuICAgIGNvbnN0IGltYWdlWCA9IHRoaXMuYm91bmRzLmNlbnRlclggLSBpbWFnZVdpZHRoIC8gMjtcclxuICAgIGNvbnN0IGltYWdlWSA9IHRoaXMuYm91bmRzLmNlbnRlclkgLSBpbWFnZUhlaWdodCAvIDI7XHJcbiAgICB0aGlzLmF0b21Ob2RlUmVjdCA9IHsgeDogaW1hZ2VYLCB5OiBpbWFnZVksIHdpZHRoOiBpbWFnZVdpZHRoLCBoZWlnaHQ6IGltYWdlSGVpZ2h0IH07XHJcblxyXG4gICAgdGhpcy5pbnZhbGlkYXRlUGFpbnQoKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBEcmF3cyB0aGUgYmFja2dyb3VuZCBpbWFnZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHRcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICovXHJcbiAgcGFpbnRTcGFjZSggY29udGV4dCApIHtcclxuICAgIC8vIFNsaWdodCBjaGFuY2UgdGhlIGltYWdlIHVzZWQgaXNuJ3QgYXZhaWxhYmxlLiBJbiB0aGF0IGNhc2UsIHJldHVybiAmIHRyeSBhZ2FpbiBvbiBuZXh0IGZyYW1lXHJcbiAgICBpZiAoIHRoaXMuYXRvbU5vZGUuaW1hZ2UgPT09IG51bGwgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0LmRyYXdJbWFnZSggdGhpcy5hdG9tTm9kZS5pbWFnZSwgdGhpcy5hdG9tTm9kZVJlY3QueCwgdGhpcy5hdG9tTm9kZVJlY3QueSxcclxuICAgICAgdGhpcy5hdG9tTm9kZVJlY3Qud2lkdGgsIHRoaXMuYXRvbU5vZGVSZWN0LmhlaWdodCApO1xyXG4gIH1cclxufVxyXG5cclxucnV0aGVyZm9yZFNjYXR0ZXJpbmcucmVnaXN0ZXIoICdQbHVtUHVkZGluZ1NwYWNlTm9kZScsIFBsdW1QdWRkaW5nU3BhY2VOb2RlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQbHVtUHVkZGluZ1NwYWNlTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxRQUFRLE1BQU0sc0NBQXNDO0FBQzNELFNBQVNDLEtBQUssUUFBUSxtQ0FBbUM7QUFDekQsT0FBT0MsaUJBQWlCLE1BQU0sd0NBQXdDO0FBQ3RFLE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUNoRSxPQUFPQyxtQkFBbUIsTUFBTSwwQkFBMEI7QUFFMUQsTUFBTUMsb0JBQW9CLFNBQVNILGlCQUFpQixDQUFDO0VBRW5EO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLHNCQUFzQixFQUFFQyxrQkFBa0IsRUFBRUMsTUFBTSxFQUFHO0lBQ3ZFQSxNQUFNLEdBQUdYLEtBQUssQ0FBRTtNQUNkWSxZQUFZLEVBQUVYLFFBQVEsQ0FBRVUsTUFBTSxDQUFDQyxZQUFhLENBQUM7TUFDN0NDLGtCQUFrQixFQUFFLElBQUlYLEtBQUssQ0FBRSxNQUFPO0lBQ3hDLENBQUMsRUFBRVMsTUFBTyxDQUFDO0lBRVgsS0FBSyxDQUFFSCxLQUFLLENBQUNNLGdCQUFnQixFQUFFTCxzQkFBc0IsRUFBRUMsa0JBQWtCLEVBQUVDLE1BQU8sQ0FBQzs7SUFFbkY7SUFDQSxJQUFJLENBQUNJLFFBQVEsR0FBRyxJQUFJVixtQkFBbUIsQ0FBQyxDQUFDO0lBQ3pDLE1BQU1XLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUUsSUFBSSxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDQyxNQUFPLENBQUMsR0FDakNILElBQUksQ0FBQ0ksR0FBRyxDQUFFLElBQUksQ0FBQ04sUUFBUSxDQUFDSSxLQUFLLEVBQUUsSUFBSSxDQUFDSixRQUFRLENBQUNLLE1BQU8sQ0FBRztJQUN2RSxNQUFNRSxVQUFVLEdBQUcsSUFBSSxDQUFDUCxRQUFRLENBQUNJLEtBQUssR0FBR0gsS0FBSztJQUM5QyxNQUFNTyxXQUFXLEdBQUcsSUFBSSxDQUFDUixRQUFRLENBQUNLLE1BQU0sR0FBR0osS0FBSztJQUNoRCxNQUFNUSxNQUFNLEdBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUNDLE9BQU8sR0FBR0osVUFBVSxHQUFHLENBQUM7SUFDbkQsTUFBTUssTUFBTSxHQUFHLElBQUksQ0FBQ0YsTUFBTSxDQUFDRyxPQUFPLEdBQUdMLFdBQVcsR0FBRyxDQUFDO0lBQ3BELElBQUksQ0FBQ00sWUFBWSxHQUFHO01BQUVDLENBQUMsRUFBRU4sTUFBTTtNQUFFTyxDQUFDLEVBQUVKLE1BQU07TUFBRVIsS0FBSyxFQUFFRyxVQUFVO01BQUVGLE1BQU0sRUFBRUc7SUFBWSxDQUFDO0lBRXBGLElBQUksQ0FBQ1MsZUFBZSxDQUFDLENBQUM7RUFDeEI7O0VBR0E7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsVUFBVUEsQ0FBRUMsT0FBTyxFQUFHO0lBQ3BCO0lBQ0EsSUFBSyxJQUFJLENBQUNuQixRQUFRLENBQUNvQixLQUFLLEtBQUssSUFBSSxFQUFHO01BQ2xDO0lBQ0Y7SUFFQUQsT0FBTyxDQUFDRSxTQUFTLENBQUUsSUFBSSxDQUFDckIsUUFBUSxDQUFDb0IsS0FBSyxFQUFFLElBQUksQ0FBQ04sWUFBWSxDQUFDQyxDQUFDLEVBQUUsSUFBSSxDQUFDRCxZQUFZLENBQUNFLENBQUMsRUFDOUUsSUFBSSxDQUFDRixZQUFZLENBQUNWLEtBQUssRUFBRSxJQUFJLENBQUNVLFlBQVksQ0FBQ1QsTUFBTyxDQUFDO0VBQ3ZEO0FBQ0Y7QUFFQWhCLG9CQUFvQixDQUFDaUMsUUFBUSxDQUFFLHNCQUFzQixFQUFFL0Isb0JBQXFCLENBQUM7QUFFN0UsZUFBZUEsb0JBQW9CIn0=