// Copyright 2016-2022, University of Colorado Boulder

/**
 * Plum pudding screen & model construction
 *
 * @author Dave Schmitz (Schmitzware)
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import plumPuddingAtomScreenIcon_png from '../../images/plumPuddingAtomScreenIcon_png.js';
import RSColors from '../common/RSColors.js';
import rutherfordScattering from '../rutherfordScattering.js';
import RutherfordScatteringStrings from '../RutherfordScatteringStrings.js';
import PlumPuddingAtomModel from './model/PlumPuddingAtomModel.js';
import PlumPuddingAtomScreenView from './view/PlumPuddingAtomScreenView.js';
class PlumPuddingAtomScreen extends Screen {
  constructor() {
    const options = {
      name: RutherfordScatteringStrings.plumPuddingAtomStringProperty,
      backgroundColorProperty: RSColors.backgroundColorProperty,
      homeScreenIcon: new ScreenIcon(new Image(plumPuddingAtomScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1,
        fill: RSColors.screenIconFillColorProperty
      })
    };
    super(() => new PlumPuddingAtomModel(), model => new PlumPuddingAtomScreenView(model), options);
  }
}
rutherfordScattering.register('PlumPuddingAtomScreen', PlumPuddingAtomScreen);
export default PlumPuddingAtomScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJwbHVtUHVkZGluZ0F0b21TY3JlZW5JY29uX3BuZyIsIlJTQ29sb3JzIiwicnV0aGVyZm9yZFNjYXR0ZXJpbmciLCJSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MiLCJQbHVtUHVkZGluZ0F0b21Nb2RlbCIsIlBsdW1QdWRkaW5nQXRvbVNjcmVlblZpZXciLCJQbHVtUHVkZGluZ0F0b21TY3JlZW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJuYW1lIiwicGx1bVB1ZGRpbmdBdG9tU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwiZmlsbCIsInNjcmVlbkljb25GaWxsQ29sb3JQcm9wZXJ0eSIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQbHVtUHVkZGluZ0F0b21TY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGx1bSBwdWRkaW5nIHNjcmVlbiAmIG1vZGVsIGNvbnN0cnVjdGlvblxyXG4gKlxyXG4gKiBAYXV0aG9yIERhdmUgU2NobWl0eiAoU2NobWl0endhcmUpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgcGx1bVB1ZGRpbmdBdG9tU2NyZWVuSWNvbl9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL3BsdW1QdWRkaW5nQXRvbVNjcmVlbkljb25fcG5nLmpzJztcclxuaW1wb3J0IFJTQ29sb3JzIGZyb20gJy4uL2NvbW1vbi9SU0NvbG9ycy5qcyc7XHJcbmltcG9ydCBydXRoZXJmb3JkU2NhdHRlcmluZyBmcm9tICcuLi9ydXRoZXJmb3JkU2NhdHRlcmluZy5qcyc7XHJcbmltcG9ydCBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MgZnJvbSAnLi4vUnV0aGVyZm9yZFNjYXR0ZXJpbmdTdHJpbmdzLmpzJztcclxuaW1wb3J0IFBsdW1QdWRkaW5nQXRvbU1vZGVsIGZyb20gJy4vbW9kZWwvUGx1bVB1ZGRpbmdBdG9tTW9kZWwuanMnO1xyXG5pbXBvcnQgUGx1bVB1ZGRpbmdBdG9tU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvUGx1bVB1ZGRpbmdBdG9tU2NyZWVuVmlldy5qcyc7XHJcblxyXG5jbGFzcyBQbHVtUHVkZGluZ0F0b21TY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IFJ1dGhlcmZvcmRTY2F0dGVyaW5nU3RyaW5ncy5wbHVtUHVkZGluZ0F0b21TdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IFJTQ29sb3JzLmJhY2tncm91bmRDb2xvclByb3BlcnR5LFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggcGx1bVB1ZGRpbmdBdG9tU2NyZWVuSWNvbl9wbmcgKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgZmlsbDogUlNDb2xvcnMuc2NyZWVuSWNvbkZpbGxDb2xvclByb3BlcnR5XHJcbiAgICAgIH0gKVxyXG4gICAgfTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IFBsdW1QdWRkaW5nQXRvbU1vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBQbHVtUHVkZGluZ0F0b21TY3JlZW5WaWV3KCBtb2RlbCApLFxyXG4gICAgICBvcHRpb25zXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxucnV0aGVyZm9yZFNjYXR0ZXJpbmcucmVnaXN0ZXIoICdQbHVtUHVkZGluZ0F0b21TY3JlZW4nLCBQbHVtUHVkZGluZ0F0b21TY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgUGx1bVB1ZGRpbmdBdG9tU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyw2QkFBNkIsTUFBTSwrQ0FBK0M7QUFDekYsT0FBT0MsUUFBUSxNQUFNLHVCQUF1QjtBQUM1QyxPQUFPQyxvQkFBb0IsTUFBTSw0QkFBNEI7QUFDN0QsT0FBT0MsMkJBQTJCLE1BQU0sbUNBQW1DO0FBQzNFLE9BQU9DLG9CQUFvQixNQUFNLGlDQUFpQztBQUNsRSxPQUFPQyx5QkFBeUIsTUFBTSxxQ0FBcUM7QUFFM0UsTUFBTUMscUJBQXFCLFNBQVNULE1BQU0sQ0FBQztFQUN6Q1UsV0FBV0EsQ0FBQSxFQUFHO0lBRVosTUFBTUMsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRU4sMkJBQTJCLENBQUNPLDZCQUE2QjtNQUMvREMsdUJBQXVCLEVBQUVWLFFBQVEsQ0FBQ1UsdUJBQXVCO01BQ3pEQyxjQUFjLEVBQUUsSUFBSWQsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUMsNkJBQThCLENBQUMsRUFBRTtRQUMxRWEsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUUsQ0FBQztRQUMxQkMsSUFBSSxFQUFFZCxRQUFRLENBQUNlO01BQ2pCLENBQUU7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUNILE1BQU0sSUFBSVosb0JBQW9CLENBQUMsQ0FBQyxFQUNoQ2EsS0FBSyxJQUFJLElBQUlaLHlCQUF5QixDQUFFWSxLQUFNLENBQUMsRUFDL0NULE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQU4sb0JBQW9CLENBQUNnQixRQUFRLENBQUUsdUJBQXVCLEVBQUVaLHFCQUFzQixDQUFDO0FBQy9FLGVBQWVBLHFCQUFxQiJ9