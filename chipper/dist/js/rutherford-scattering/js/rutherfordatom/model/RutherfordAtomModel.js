// Copyright 2016-2022, University of Colorado Boulder

/**
 * Model for the 'Rutherford Atom' screen.
 *
 * @author Dave Schmitz (Schmitzware)
 * @author Jesse Greenberg
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Property from '../../../../axon/js/Property.js';
import RSBaseModel from '../../common/model/RSBaseModel.js';
import RSConstants from '../../common/RSConstants.js';
import rutherfordScattering from '../../rutherfordScattering.js';
import RutherfordAtomSpace from './RutherfordAtomSpace.js';
import RutherfordNucleusSpace from './RutherfordNucleusSpace.js';
class RutherfordAtomModel extends RSBaseModel {
  constructor() {
    // interactions that create dependencies for the DerivedProperties that will track user interaction, generally
    // used by control panels to prevent multitouch issues by tracking when the user is changing something
    const energyInteractionProperty = new Property(false); // interaction with the energy slider
    const protonInteractionProperty = new Property(false); // interaction with the proton count slider
    const neutronInteractionProperty = new Property(false); // interaction with the neutron count slider

    // @public - create a derived property for user interaction, so that the an interaction occurs when any dependency
    // is true
    const userInteractionProperty = DerivedProperty.or([energyInteractionProperty, protonInteractionProperty, neutronInteractionProperty]);
    super(userInteractionProperty);

    // @public
    this.energyInteractionProperty = energyInteractionProperty;
    this.protonInteractionProperty = protonInteractionProperty;
    this.neutronInteractionProperty = neutronInteractionProperty;

    // @public {number}
    this.protonCountProperty = new Property(RSConstants.DEFAULT_PROTON_COUNT);

    // @public {number}
    this.neutronCountProperty = new Property(RSConstants.DEFAULT_NEUTRON_COUNT);

    // @public {string} - scene to display, 'atom'|'nucleus'
    this.sceneProperty = new Property('atom');

    // @public (read-only) - spaces containing the atoms
    this.atomSpace = new RutherfordAtomSpace(this.protonCountProperty, this.bounds);
    this.nucleusSpace = new RutherfordNucleusSpace(this.protonCountProperty, this.neutronCountProperty, this.bounds);

    // @public (read-only)
    this.atomSpaces = [this.atomSpace, this.nucleusSpace];
  }

  /**
   * @public
   */
  reset() {
    this.protonCountProperty.reset();
    this.neutronCountProperty.reset();
    this.sceneProperty.reset();
    this.energyInteractionProperty.reset();
    this.protonInteractionProperty.reset();
    this.neutronInteractionProperty.reset();
    super.reset();
  }
}
rutherfordScattering.register('RutherfordAtomModel', RutherfordAtomModel);
export default RutherfordAtomModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJQcm9wZXJ0eSIsIlJTQmFzZU1vZGVsIiwiUlNDb25zdGFudHMiLCJydXRoZXJmb3JkU2NhdHRlcmluZyIsIlJ1dGhlcmZvcmRBdG9tU3BhY2UiLCJSdXRoZXJmb3JkTnVjbGV1c1NwYWNlIiwiUnV0aGVyZm9yZEF0b21Nb2RlbCIsImNvbnN0cnVjdG9yIiwiZW5lcmd5SW50ZXJhY3Rpb25Qcm9wZXJ0eSIsInByb3RvbkludGVyYWN0aW9uUHJvcGVydHkiLCJuZXV0cm9uSW50ZXJhY3Rpb25Qcm9wZXJ0eSIsInVzZXJJbnRlcmFjdGlvblByb3BlcnR5Iiwib3IiLCJwcm90b25Db3VudFByb3BlcnR5IiwiREVGQVVMVF9QUk9UT05fQ09VTlQiLCJuZXV0cm9uQ291bnRQcm9wZXJ0eSIsIkRFRkFVTFRfTkVVVFJPTl9DT1VOVCIsInNjZW5lUHJvcGVydHkiLCJhdG9tU3BhY2UiLCJib3VuZHMiLCJudWNsZXVzU3BhY2UiLCJhdG9tU3BhY2VzIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJ1dGhlcmZvcmRBdG9tTW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIHRoZSAnUnV0aGVyZm9yZCBBdG9tJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgRGF2ZSBTY2htaXR6IChTY2htaXR6d2FyZSlcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUlNCYXNlTW9kZWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1JTQmFzZU1vZGVsLmpzJztcclxuaW1wb3J0IFJTQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9SU0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBydXRoZXJmb3JkU2NhdHRlcmluZyBmcm9tICcuLi8uLi9ydXRoZXJmb3JkU2NhdHRlcmluZy5qcyc7XHJcbmltcG9ydCBSdXRoZXJmb3JkQXRvbVNwYWNlIGZyb20gJy4vUnV0aGVyZm9yZEF0b21TcGFjZS5qcyc7XHJcbmltcG9ydCBSdXRoZXJmb3JkTnVjbGV1c1NwYWNlIGZyb20gJy4vUnV0aGVyZm9yZE51Y2xldXNTcGFjZS5qcyc7XHJcblxyXG5jbGFzcyBSdXRoZXJmb3JkQXRvbU1vZGVsIGV4dGVuZHMgUlNCYXNlTW9kZWwge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIC8vIGludGVyYWN0aW9ucyB0aGF0IGNyZWF0ZSBkZXBlbmRlbmNpZXMgZm9yIHRoZSBEZXJpdmVkUHJvcGVydGllcyB0aGF0IHdpbGwgdHJhY2sgdXNlciBpbnRlcmFjdGlvbiwgZ2VuZXJhbGx5XHJcbiAgICAvLyB1c2VkIGJ5IGNvbnRyb2wgcGFuZWxzIHRvIHByZXZlbnQgbXVsdGl0b3VjaCBpc3N1ZXMgYnkgdHJhY2tpbmcgd2hlbiB0aGUgdXNlciBpcyBjaGFuZ2luZyBzb21ldGhpbmdcclxuICAgIGNvbnN0IGVuZXJneUludGVyYWN0aW9uUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGZhbHNlICk7IC8vIGludGVyYWN0aW9uIHdpdGggdGhlIGVuZXJneSBzbGlkZXJcclxuICAgIGNvbnN0IHByb3RvbkludGVyYWN0aW9uUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGZhbHNlICk7IC8vIGludGVyYWN0aW9uIHdpdGggdGhlIHByb3RvbiBjb3VudCBzbGlkZXJcclxuICAgIGNvbnN0IG5ldXRyb25JbnRlcmFjdGlvblByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBmYWxzZSApOyAvLyBpbnRlcmFjdGlvbiB3aXRoIHRoZSBuZXV0cm9uIGNvdW50IHNsaWRlclxyXG5cclxuICAgIC8vIEBwdWJsaWMgLSBjcmVhdGUgYSBkZXJpdmVkIHByb3BlcnR5IGZvciB1c2VyIGludGVyYWN0aW9uLCBzbyB0aGF0IHRoZSBhbiBpbnRlcmFjdGlvbiBvY2N1cnMgd2hlbiBhbnkgZGVwZW5kZW5jeVxyXG4gICAgLy8gaXMgdHJ1ZVxyXG4gICAgY29uc3QgdXNlckludGVyYWN0aW9uUHJvcGVydHkgPSBEZXJpdmVkUHJvcGVydHkub3IoIFsgZW5lcmd5SW50ZXJhY3Rpb25Qcm9wZXJ0eSwgcHJvdG9uSW50ZXJhY3Rpb25Qcm9wZXJ0eSwgbmV1dHJvbkludGVyYWN0aW9uUHJvcGVydHkgXSApO1xyXG5cclxuICAgIHN1cGVyKCB1c2VySW50ZXJhY3Rpb25Qcm9wZXJ0eSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWNcclxuICAgIHRoaXMuZW5lcmd5SW50ZXJhY3Rpb25Qcm9wZXJ0eSA9IGVuZXJneUludGVyYWN0aW9uUHJvcGVydHk7XHJcbiAgICB0aGlzLnByb3RvbkludGVyYWN0aW9uUHJvcGVydHkgPSBwcm90b25JbnRlcmFjdGlvblByb3BlcnR5O1xyXG4gICAgdGhpcy5uZXV0cm9uSW50ZXJhY3Rpb25Qcm9wZXJ0eSA9IG5ldXRyb25JbnRlcmFjdGlvblByb3BlcnR5O1xyXG5cclxuICAgIC8vIEBwdWJsaWMge251bWJlcn1cclxuICAgIHRoaXMucHJvdG9uQ291bnRQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggUlNDb25zdGFudHMuREVGQVVMVF9QUk9UT05fQ09VTlQgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtudW1iZXJ9XHJcbiAgICB0aGlzLm5ldXRyb25Db3VudFByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBSU0NvbnN0YW50cy5ERUZBVUxUX05FVVRST05fQ09VTlQgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtzdHJpbmd9IC0gc2NlbmUgdG8gZGlzcGxheSwgJ2F0b20nfCdudWNsZXVzJ1xyXG4gICAgdGhpcy5zY2VuZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCAnYXRvbScgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIC0gc3BhY2VzIGNvbnRhaW5pbmcgdGhlIGF0b21zXHJcbiAgICB0aGlzLmF0b21TcGFjZSA9IG5ldyBSdXRoZXJmb3JkQXRvbVNwYWNlKCB0aGlzLnByb3RvbkNvdW50UHJvcGVydHksIHRoaXMuYm91bmRzICk7XHJcbiAgICB0aGlzLm51Y2xldXNTcGFjZSA9IG5ldyBSdXRoZXJmb3JkTnVjbGV1c1NwYWNlKCB0aGlzLnByb3RvbkNvdW50UHJvcGVydHksIHRoaXMubmV1dHJvbkNvdW50UHJvcGVydHksIHRoaXMuYm91bmRzICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KVxyXG4gICAgdGhpcy5hdG9tU3BhY2VzID0gWyB0aGlzLmF0b21TcGFjZSwgdGhpcy5udWNsZXVzU3BhY2UgXTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnByb3RvbkNvdW50UHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubmV1dHJvbkNvdW50UHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuc2NlbmVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5lbmVyZ3lJbnRlcmFjdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnByb3RvbkludGVyYWN0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubmV1dHJvbkludGVyYWN0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuXHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxucnV0aGVyZm9yZFNjYXR0ZXJpbmcucmVnaXN0ZXIoICdSdXRoZXJmb3JkQXRvbU1vZGVsJywgUnV0aGVyZm9yZEF0b21Nb2RlbCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUnV0aGVyZm9yZEF0b21Nb2RlbDsiXSwibWFw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