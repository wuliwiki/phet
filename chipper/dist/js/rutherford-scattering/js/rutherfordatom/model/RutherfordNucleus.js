// Copyright 2016-2020, University of Colorado Boulder

/**
 * Model for the Rutherford Nucleus.  Has Protons, and neutrons which can change in number.
 *
 * @author Dave Schmitz (Schmitzware)
 * @author Jesse Greenberg
 */

import Utils from '../../../../dot/js/Utils.js';
import Particle from '../../../../shred/js/model/Particle.js';
import ParticleAtom from '../../../../shred/js/model/ParticleAtom.js';
import rutherfordScattering from '../../rutherfordScattering.js';
class RutherfordNucleus extends ParticleAtom {
  /**
   * @param {Property.<number>} protonCountProperty
   * @param {Property.<number>} neutronCountProperty
   */
  constructor(protonCountProperty, neutronCountProperty) {
    super({
      nucleonRadius: 3
    });
    let particle;

    // update number of nucleons of a particular type and move all to destination
    const configureNucleus = (nucleonCount, particleType) => {
      const particleCount = Utils.toFixedNumber(nucleonCount, 0);
      const nucleons = particleType === 'proton' ? this.protons : this.neutrons;
      while (nucleons.length !== particleCount) {
        if (particleCount - nucleons.length > 0) {
          particle = new Particle(particleType);
          this.addParticle(particle);
        } else {
          this.extractParticle(particleType);
          this.reconfigureNucleus();
        }
      }
      this.moveAllParticlesToDestination();
    };
    const protonObserver = protonCount => {
      configureNucleus(protonCount, 'proton');
    };
    const neutronObserver = neutronCount => {
      configureNucleus(neutronCount, 'neutron');
    };
    protonCountProperty.link(protonObserver);
    neutronCountProperty.link(neutronObserver);

    // @private
    this.disposeRutherfordNucleus = () => {
      protonCountProperty.unlink(protonObserver);
      neutronCountProperty.unlink(neutronObserver);
    };
  }

  /**
   * @public
   * @override
   */
  dispose() {
    this.disposeRutherfordNucleus();
    super.dispose();
  }
}
rutherfordScattering.register('RutherfordNucleus', RutherfordNucleus);
export default RutherfordNucleus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlBhcnRpY2xlIiwiUGFydGljbGVBdG9tIiwicnV0aGVyZm9yZFNjYXR0ZXJpbmciLCJSdXRoZXJmb3JkTnVjbGV1cyIsImNvbnN0cnVjdG9yIiwicHJvdG9uQ291bnRQcm9wZXJ0eSIsIm5ldXRyb25Db3VudFByb3BlcnR5IiwibnVjbGVvblJhZGl1cyIsInBhcnRpY2xlIiwiY29uZmlndXJlTnVjbGV1cyIsIm51Y2xlb25Db3VudCIsInBhcnRpY2xlVHlwZSIsInBhcnRpY2xlQ291bnQiLCJ0b0ZpeGVkTnVtYmVyIiwibnVjbGVvbnMiLCJwcm90b25zIiwibmV1dHJvbnMiLCJsZW5ndGgiLCJhZGRQYXJ0aWNsZSIsImV4dHJhY3RQYXJ0aWNsZSIsInJlY29uZmlndXJlTnVjbGV1cyIsIm1vdmVBbGxQYXJ0aWNsZXNUb0Rlc3RpbmF0aW9uIiwicHJvdG9uT2JzZXJ2ZXIiLCJwcm90b25Db3VudCIsIm5ldXRyb25PYnNlcnZlciIsIm5ldXRyb25Db3VudCIsImxpbmsiLCJkaXNwb3NlUnV0aGVyZm9yZE51Y2xldXMiLCJ1bmxpbmsiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSdXRoZXJmb3JkTnVjbGV1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlIFJ1dGhlcmZvcmQgTnVjbGV1cy4gIEhhcyBQcm90b25zLCBhbmQgbmV1dHJvbnMgd2hpY2ggY2FuIGNoYW5nZSBpbiBudW1iZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgRGF2ZSBTY2htaXR6IChTY2htaXR6d2FyZSlcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlIGZyb20gJy4uLy4uLy4uLy4uL3NocmVkL2pzL21vZGVsL1BhcnRpY2xlLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlQXRvbSBmcm9tICcuLi8uLi8uLi8uLi9zaHJlZC9qcy9tb2RlbC9QYXJ0aWNsZUF0b20uanMnO1xyXG5pbXBvcnQgcnV0aGVyZm9yZFNjYXR0ZXJpbmcgZnJvbSAnLi4vLi4vcnV0aGVyZm9yZFNjYXR0ZXJpbmcuanMnO1xyXG5cclxuY2xhc3MgUnV0aGVyZm9yZE51Y2xldXMgZXh0ZW5kcyBQYXJ0aWNsZUF0b20ge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxudW1iZXI+fSBwcm90b25Db3VudFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gbmV1dHJvbkNvdW50UHJvcGVydHlcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggcHJvdG9uQ291bnRQcm9wZXJ0eSwgbmV1dHJvbkNvdW50UHJvcGVydHkgKSB7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgbnVjbGVvblJhZGl1czogM1xyXG4gICAgfSApO1xyXG5cclxuICAgIGxldCBwYXJ0aWNsZTtcclxuXHJcbiAgICAvLyB1cGRhdGUgbnVtYmVyIG9mIG51Y2xlb25zIG9mIGEgcGFydGljdWxhciB0eXBlIGFuZCBtb3ZlIGFsbCB0byBkZXN0aW5hdGlvblxyXG4gICAgY29uc3QgY29uZmlndXJlTnVjbGV1cyA9ICggbnVjbGVvbkNvdW50LCBwYXJ0aWNsZVR5cGUgKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcnRpY2xlQ291bnQgPSBVdGlscy50b0ZpeGVkTnVtYmVyKCBudWNsZW9uQ291bnQsIDAgKTtcclxuICAgICAgY29uc3QgbnVjbGVvbnMgPSBwYXJ0aWNsZVR5cGUgPT09ICdwcm90b24nID8gdGhpcy5wcm90b25zIDogdGhpcy5uZXV0cm9ucztcclxuICAgICAgd2hpbGUgKCBudWNsZW9ucy5sZW5ndGggIT09IHBhcnRpY2xlQ291bnQgKSB7XHJcbiAgICAgICAgaWYgKCBwYXJ0aWNsZUNvdW50IC0gbnVjbGVvbnMubGVuZ3RoID4gMCApIHtcclxuICAgICAgICAgIHBhcnRpY2xlID0gbmV3IFBhcnRpY2xlKCBwYXJ0aWNsZVR5cGUgKTtcclxuICAgICAgICAgIHRoaXMuYWRkUGFydGljbGUoIHBhcnRpY2xlICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5leHRyYWN0UGFydGljbGUoIHBhcnRpY2xlVHlwZSApO1xyXG4gICAgICAgICAgdGhpcy5yZWNvbmZpZ3VyZU51Y2xldXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5tb3ZlQWxsUGFydGljbGVzVG9EZXN0aW5hdGlvbigpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBwcm90b25PYnNlcnZlciA9IHByb3RvbkNvdW50ID0+IHsgY29uZmlndXJlTnVjbGV1cyggcHJvdG9uQ291bnQsICdwcm90b24nICk7IH07XHJcbiAgICBjb25zdCBuZXV0cm9uT2JzZXJ2ZXIgPSBuZXV0cm9uQ291bnQgPT4geyBjb25maWd1cmVOdWNsZXVzKCBuZXV0cm9uQ291bnQsICduZXV0cm9uJyApOyB9O1xyXG4gICAgcHJvdG9uQ291bnRQcm9wZXJ0eS5saW5rKCBwcm90b25PYnNlcnZlciApO1xyXG4gICAgbmV1dHJvbkNvdW50UHJvcGVydHkubGluayggbmV1dHJvbk9ic2VydmVyICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuZGlzcG9zZVJ1dGhlcmZvcmROdWNsZXVzID0gKCkgPT4ge1xyXG4gICAgICBwcm90b25Db3VudFByb3BlcnR5LnVubGluayggcHJvdG9uT2JzZXJ2ZXIgKTtcclxuICAgICAgbmV1dHJvbkNvdW50UHJvcGVydHkudW5saW5rKCBuZXV0cm9uT2JzZXJ2ZXIgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuZGlzcG9zZVJ1dGhlcmZvcmROdWNsZXVzKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5ydXRoZXJmb3JkU2NhdHRlcmluZy5yZWdpc3RlciggJ1J1dGhlcmZvcmROdWNsZXVzJywgUnV0aGVyZm9yZE51Y2xldXMgKTtcclxuZXhwb3J0IGRlZmF1bHQgUnV0aGVyZm9yZE51Y2xldXM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxRQUFRLE1BQU0sd0NBQXdDO0FBQzdELE9BQU9DLFlBQVksTUFBTSw0Q0FBNEM7QUFDckUsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBRWhFLE1BQU1DLGlCQUFpQixTQUFTRixZQUFZLENBQUM7RUFFM0M7QUFDRjtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsbUJBQW1CLEVBQUVDLG9CQUFvQixFQUFHO0lBRXZELEtBQUssQ0FBRTtNQUNMQyxhQUFhLEVBQUU7SUFDakIsQ0FBRSxDQUFDO0lBRUgsSUFBSUMsUUFBUTs7SUFFWjtJQUNBLE1BQU1DLGdCQUFnQixHQUFHQSxDQUFFQyxZQUFZLEVBQUVDLFlBQVksS0FBTTtNQUN6RCxNQUFNQyxhQUFhLEdBQUdiLEtBQUssQ0FBQ2MsYUFBYSxDQUFFSCxZQUFZLEVBQUUsQ0FBRSxDQUFDO01BQzVELE1BQU1JLFFBQVEsR0FBR0gsWUFBWSxLQUFLLFFBQVEsR0FBRyxJQUFJLENBQUNJLE9BQU8sR0FBRyxJQUFJLENBQUNDLFFBQVE7TUFDekUsT0FBUUYsUUFBUSxDQUFDRyxNQUFNLEtBQUtMLGFBQWEsRUFBRztRQUMxQyxJQUFLQSxhQUFhLEdBQUdFLFFBQVEsQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRztVQUN6Q1QsUUFBUSxHQUFHLElBQUlSLFFBQVEsQ0FBRVcsWUFBYSxDQUFDO1VBQ3ZDLElBQUksQ0FBQ08sV0FBVyxDQUFFVixRQUFTLENBQUM7UUFDOUIsQ0FBQyxNQUNJO1VBQ0gsSUFBSSxDQUFDVyxlQUFlLENBQUVSLFlBQWEsQ0FBQztVQUNwQyxJQUFJLENBQUNTLGtCQUFrQixDQUFDLENBQUM7UUFDM0I7TUFDRjtNQUNBLElBQUksQ0FBQ0MsNkJBQTZCLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsTUFBTUMsY0FBYyxHQUFHQyxXQUFXLElBQUk7TUFBRWQsZ0JBQWdCLENBQUVjLFdBQVcsRUFBRSxRQUFTLENBQUM7SUFBRSxDQUFDO0lBQ3BGLE1BQU1DLGVBQWUsR0FBR0MsWUFBWSxJQUFJO01BQUVoQixnQkFBZ0IsQ0FBRWdCLFlBQVksRUFBRSxTQUFVLENBQUM7SUFBRSxDQUFDO0lBQ3hGcEIsbUJBQW1CLENBQUNxQixJQUFJLENBQUVKLGNBQWUsQ0FBQztJQUMxQ2hCLG9CQUFvQixDQUFDb0IsSUFBSSxDQUFFRixlQUFnQixDQUFDOztJQUU1QztJQUNBLElBQUksQ0FBQ0csd0JBQXdCLEdBQUcsTUFBTTtNQUNwQ3RCLG1CQUFtQixDQUFDdUIsTUFBTSxDQUFFTixjQUFlLENBQUM7TUFDNUNoQixvQkFBb0IsQ0FBQ3NCLE1BQU0sQ0FBRUosZUFBZ0IsQ0FBQztJQUNoRCxDQUFDO0VBQ0g7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUssT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSSxDQUFDRix3QkFBd0IsQ0FBQyxDQUFDO0lBQy9CLEtBQUssQ0FBQ0UsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBM0Isb0JBQW9CLENBQUM0QixRQUFRLENBQUUsbUJBQW1CLEVBQUUzQixpQkFBa0IsQ0FBQztBQUN2RSxlQUFlQSxpQkFBaUIifQ==