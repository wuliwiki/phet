// Copyright 2016-2021, University of Colorado Boulder

/**
 * Model for the Rutherford Atom space, responsible for atoms of the model.
 *
 * @author Jesse Greenberg
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import AtomSpace from '../../common/model/AtomSpace.js';
import rutherfordScattering from '../../rutherfordScattering.js';
import RutherfordAtom from './RutherfordAtom.js';
import RutherfordNucleus from './RutherfordNucleus.js';
class RutherfordNucleusSpace extends AtomSpace {
  /**
   * @param {Property.<number>} protonCountProperty
   * @param {Property.<number>} neutronCountProperty
   * @param {Bounds2} bounds
   */
  constructor(protonCountProperty, neutronCountProperty, bounds) {
    super(protonCountProperty, bounds);

    // create a nucleus model containing protons and neutrons
    this.rutherfordNucleus = new RutherfordNucleus(protonCountProperty, neutronCountProperty);
    const rutherfordAtom = new RutherfordAtom(this.particleRemovedFromAtomEmitter, protonCountProperty, new Vector2(0, 0), this.bounds.width);
    this.atoms.push(rutherfordAtom);

    // make sure that atom bounds are OK
    this.checkAtomBounds();
  }
}
rutherfordScattering.register('RutherfordNucleusSpace', RutherfordNucleusSpace);
export default RutherfordNucleusSpace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiQXRvbVNwYWNlIiwicnV0aGVyZm9yZFNjYXR0ZXJpbmciLCJSdXRoZXJmb3JkQXRvbSIsIlJ1dGhlcmZvcmROdWNsZXVzIiwiUnV0aGVyZm9yZE51Y2xldXNTcGFjZSIsImNvbnN0cnVjdG9yIiwicHJvdG9uQ291bnRQcm9wZXJ0eSIsIm5ldXRyb25Db3VudFByb3BlcnR5IiwiYm91bmRzIiwicnV0aGVyZm9yZE51Y2xldXMiLCJydXRoZXJmb3JkQXRvbSIsInBhcnRpY2xlUmVtb3ZlZEZyb21BdG9tRW1pdHRlciIsIndpZHRoIiwiYXRvbXMiLCJwdXNoIiwiY2hlY2tBdG9tQm91bmRzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSdXRoZXJmb3JkTnVjbGV1c1NwYWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciB0aGUgUnV0aGVyZm9yZCBBdG9tIHNwYWNlLCByZXNwb25zaWJsZSBmb3IgYXRvbXMgb2YgdGhlIG1vZGVsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IEF0b21TcGFjZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQXRvbVNwYWNlLmpzJztcclxuaW1wb3J0IHJ1dGhlcmZvcmRTY2F0dGVyaW5nIGZyb20gJy4uLy4uL3J1dGhlcmZvcmRTY2F0dGVyaW5nLmpzJztcclxuaW1wb3J0IFJ1dGhlcmZvcmRBdG9tIGZyb20gJy4vUnV0aGVyZm9yZEF0b20uanMnO1xyXG5pbXBvcnQgUnV0aGVyZm9yZE51Y2xldXMgZnJvbSAnLi9SdXRoZXJmb3JkTnVjbGV1cy5qcyc7XHJcblxyXG5jbGFzcyBSdXRoZXJmb3JkTnVjbGV1c1NwYWNlIGV4dGVuZHMgQXRvbVNwYWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gcHJvdG9uQ291bnRQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IG5ldXRyb25Db3VudFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtCb3VuZHMyfSBib3VuZHNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggcHJvdG9uQ291bnRQcm9wZXJ0eSwgbmV1dHJvbkNvdW50UHJvcGVydHksIGJvdW5kcyApIHtcclxuXHJcbiAgICBzdXBlciggcHJvdG9uQ291bnRQcm9wZXJ0eSwgYm91bmRzICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIGEgbnVjbGV1cyBtb2RlbCBjb250YWluaW5nIHByb3RvbnMgYW5kIG5ldXRyb25zXHJcbiAgICB0aGlzLnJ1dGhlcmZvcmROdWNsZXVzID0gbmV3IFJ1dGhlcmZvcmROdWNsZXVzKCBwcm90b25Db3VudFByb3BlcnR5LCBuZXV0cm9uQ291bnRQcm9wZXJ0eSApO1xyXG5cclxuICAgIGNvbnN0IHJ1dGhlcmZvcmRBdG9tID0gbmV3IFJ1dGhlcmZvcmRBdG9tKCB0aGlzLnBhcnRpY2xlUmVtb3ZlZEZyb21BdG9tRW1pdHRlciwgcHJvdG9uQ291bnRQcm9wZXJ0eSwgbmV3IFZlY3RvcjIoIDAsIDAgKSwgdGhpcy5ib3VuZHMud2lkdGggKTtcclxuICAgIHRoaXMuYXRvbXMucHVzaCggcnV0aGVyZm9yZEF0b20gKTtcclxuXHJcbiAgICAvLyBtYWtlIHN1cmUgdGhhdCBhdG9tIGJvdW5kcyBhcmUgT0tcclxuICAgIHRoaXMuY2hlY2tBdG9tQm91bmRzKCk7XHJcbiAgfVxyXG59XHJcblxyXG5ydXRoZXJmb3JkU2NhdHRlcmluZy5yZWdpc3RlciggJ1J1dGhlcmZvcmROdWNsZXVzU3BhY2UnLCBSdXRoZXJmb3JkTnVjbGV1c1NwYWNlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSdXRoZXJmb3JkTnVjbGV1c1NwYWNlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLGNBQWMsTUFBTSxxQkFBcUI7QUFDaEQsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBRXRELE1BQU1DLHNCQUFzQixTQUFTSixTQUFTLENBQUM7RUFFN0M7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxtQkFBbUIsRUFBRUMsb0JBQW9CLEVBQUVDLE1BQU0sRUFBRztJQUUvRCxLQUFLLENBQUVGLG1CQUFtQixFQUFFRSxNQUFPLENBQUM7O0lBRXBDO0lBQ0EsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJTixpQkFBaUIsQ0FBRUcsbUJBQW1CLEVBQUVDLG9CQUFxQixDQUFDO0lBRTNGLE1BQU1HLGNBQWMsR0FBRyxJQUFJUixjQUFjLENBQUUsSUFBSSxDQUFDUyw4QkFBOEIsRUFBRUwsbUJBQW1CLEVBQUUsSUFBSVAsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUNTLE1BQU0sQ0FBQ0ksS0FBTSxDQUFDO0lBQzdJLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUVKLGNBQWUsQ0FBQzs7SUFFakM7SUFDQSxJQUFJLENBQUNLLGVBQWUsQ0FBQyxDQUFDO0VBQ3hCO0FBQ0Y7QUFFQWQsb0JBQW9CLENBQUNlLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRVosc0JBQXVCLENBQUM7QUFFakYsZUFBZUEsc0JBQXNCIn0=