// Copyright 2016-2022, University of Colorado Boulder

/**
 * Rutherford screen & model construction
 *
 * @author Dave Schmitz (Schmitzware)
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import RSColors from '../common/RSColors.js';
import RSConstants from '../common/RSConstants.js';
import rutherfordScattering from '../rutherfordScattering.js';
import RutherfordScatteringStrings from '../RutherfordScatteringStrings.js';
import RutherfordAtomModel from './model/RutherfordAtomModel.js';
import RutherfordAtomScreenView from './view/RutherfordAtomScreenView.js';
import RutherfordNucleusNode from './view/RutherfordNucleusNode.js';
class RutherfordAtomScreen extends Screen {
  constructor() {
    // create an icon for the rutherford atom screen with default number of protons and neutrons
    const homeScreenIcon = new ScreenIcon(RutherfordNucleusNode.RutherfordNucleusIcon(RSConstants.DEFAULT_PROTON_COUNT, RSConstants.DEFAULT_NEUTRON_COUNT), {
      fill: RSColors.screenIconFillColorProperty
    });
    const options = {
      name: RutherfordScatteringStrings.rutherfordAtomStringProperty,
      backgroundColorProperty: RSColors.backgroundColorProperty,
      homeScreenIcon: homeScreenIcon
    };
    super(() => new RutherfordAtomModel(), model => new RutherfordAtomScreenView(model), options);
  }
}
rutherfordScattering.register('RutherfordAtomScreen', RutherfordAtomScreen);
export default RutherfordAtomScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiUlNDb2xvcnMiLCJSU0NvbnN0YW50cyIsInJ1dGhlcmZvcmRTY2F0dGVyaW5nIiwiUnV0aGVyZm9yZFNjYXR0ZXJpbmdTdHJpbmdzIiwiUnV0aGVyZm9yZEF0b21Nb2RlbCIsIlJ1dGhlcmZvcmRBdG9tU2NyZWVuVmlldyIsIlJ1dGhlcmZvcmROdWNsZXVzTm9kZSIsIlJ1dGhlcmZvcmRBdG9tU2NyZWVuIiwiY29uc3RydWN0b3IiLCJob21lU2NyZWVuSWNvbiIsIlJ1dGhlcmZvcmROdWNsZXVzSWNvbiIsIkRFRkFVTFRfUFJPVE9OX0NPVU5UIiwiREVGQVVMVF9ORVVUUk9OX0NPVU5UIiwiZmlsbCIsInNjcmVlbkljb25GaWxsQ29sb3JQcm9wZXJ0eSIsIm9wdGlvbnMiLCJuYW1lIiwicnV0aGVyZm9yZEF0b21TdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJ1dGhlcmZvcmRBdG9tU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJ1dGhlcmZvcmQgc2NyZWVuICYgbW9kZWwgY29uc3RydWN0aW9uXHJcbiAqXHJcbiAqIEBhdXRob3IgRGF2ZSBTY2htaXR6IChTY2htaXR6d2FyZSlcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgUlNDb2xvcnMgZnJvbSAnLi4vY29tbW9uL1JTQ29sb3JzLmpzJztcclxuaW1wb3J0IFJTQ29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbi9SU0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBydXRoZXJmb3JkU2NhdHRlcmluZyBmcm9tICcuLi9ydXRoZXJmb3JkU2NhdHRlcmluZy5qcyc7XHJcbmltcG9ydCBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MgZnJvbSAnLi4vUnV0aGVyZm9yZFNjYXR0ZXJpbmdTdHJpbmdzLmpzJztcclxuaW1wb3J0IFJ1dGhlcmZvcmRBdG9tTW9kZWwgZnJvbSAnLi9tb2RlbC9SdXRoZXJmb3JkQXRvbU1vZGVsLmpzJztcclxuaW1wb3J0IFJ1dGhlcmZvcmRBdG9tU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvUnV0aGVyZm9yZEF0b21TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFJ1dGhlcmZvcmROdWNsZXVzTm9kZSBmcm9tICcuL3ZpZXcvUnV0aGVyZm9yZE51Y2xldXNOb2RlLmpzJztcclxuXHJcbmNsYXNzIFJ1dGhlcmZvcmRBdG9tU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAvLyBjcmVhdGUgYW4gaWNvbiBmb3IgdGhlIHJ1dGhlcmZvcmQgYXRvbSBzY3JlZW4gd2l0aCBkZWZhdWx0IG51bWJlciBvZiBwcm90b25zIGFuZCBuZXV0cm9uc1xyXG4gICAgY29uc3QgaG9tZVNjcmVlbkljb24gPSBuZXcgU2NyZWVuSWNvbiggUnV0aGVyZm9yZE51Y2xldXNOb2RlLlJ1dGhlcmZvcmROdWNsZXVzSWNvbihcclxuICAgICAgUlNDb25zdGFudHMuREVGQVVMVF9QUk9UT05fQ09VTlQsIFJTQ29uc3RhbnRzLkRFRkFVTFRfTkVVVFJPTl9DT1VOVFxyXG4gICAgKSwge1xyXG4gICAgICBmaWxsOiBSU0NvbG9ycy5zY3JlZW5JY29uRmlsbENvbG9yUHJvcGVydHlcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MucnV0aGVyZm9yZEF0b21TdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IFJTQ29sb3JzLmJhY2tncm91bmRDb2xvclByb3BlcnR5LFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogaG9tZVNjcmVlbkljb25cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBSdXRoZXJmb3JkQXRvbU1vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBSdXRoZXJmb3JkQXRvbVNjcmVlblZpZXcoIG1vZGVsICksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5ydXRoZXJmb3JkU2NhdHRlcmluZy5yZWdpc3RlciggJ1J1dGhlcmZvcmRBdG9tU2NyZWVuJywgUnV0aGVyZm9yZEF0b21TY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgUnV0aGVyZm9yZEF0b21TY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxRQUFRLE1BQU0sdUJBQXVCO0FBQzVDLE9BQU9DLFdBQVcsTUFBTSwwQkFBMEI7QUFDbEQsT0FBT0Msb0JBQW9CLE1BQU0sNEJBQTRCO0FBQzdELE9BQU9DLDJCQUEyQixNQUFNLG1DQUFtQztBQUMzRSxPQUFPQyxtQkFBbUIsTUFBTSxnQ0FBZ0M7QUFDaEUsT0FBT0Msd0JBQXdCLE1BQU0sb0NBQW9DO0FBQ3pFLE9BQU9DLHFCQUFxQixNQUFNLGlDQUFpQztBQUVuRSxNQUFNQyxvQkFBb0IsU0FBU1QsTUFBTSxDQUFDO0VBQ3hDVSxXQUFXQSxDQUFBLEVBQUc7SUFFWjtJQUNBLE1BQU1DLGNBQWMsR0FBRyxJQUFJVixVQUFVLENBQUVPLHFCQUFxQixDQUFDSSxxQkFBcUIsQ0FDaEZULFdBQVcsQ0FBQ1Usb0JBQW9CLEVBQUVWLFdBQVcsQ0FBQ1cscUJBQ2hELENBQUMsRUFBRTtNQUNEQyxJQUFJLEVBQUViLFFBQVEsQ0FBQ2M7SUFDakIsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsT0FBTyxHQUFHO01BQ2RDLElBQUksRUFBRWIsMkJBQTJCLENBQUNjLDRCQUE0QjtNQUM5REMsdUJBQXVCLEVBQUVsQixRQUFRLENBQUNrQix1QkFBdUI7TUFDekRULGNBQWMsRUFBRUE7SUFDbEIsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUlMLG1CQUFtQixDQUFDLENBQUMsRUFDL0JlLEtBQUssSUFBSSxJQUFJZCx3QkFBd0IsQ0FBRWMsS0FBTSxDQUFDLEVBQzlDSixPQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFiLG9CQUFvQixDQUFDa0IsUUFBUSxDQUFFLHNCQUFzQixFQUFFYixvQkFBcUIsQ0FBQztBQUM3RSxlQUFlQSxvQkFBb0IifQ==