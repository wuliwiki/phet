// Copyright 2016-2022, University of Colorado Boulder

/**
 * Space in which atoms and alpha particles are rendered.  In this representation, there are several
 * atoms in the space and the alpha particles are small particles, most of which travel through the
 * atoms undeflected.
 *
 * @author Dave Schmitz (Schmitzware)
 */

import merge from '../../../../phet-core/js/merge.js';
import required from '../../../../phet-core/js/required.js';
import { Path } from '../../../../scenery/js/imports.js';
import RSQueryParameters from '../../common/RSQueryParameters.js';
import ParticleSpaceNode from '../../common/view/ParticleSpaceNode.js';
import rutherfordScattering from '../../rutherfordScattering.js';
import RutherfordScatteringStrings from '../../RutherfordScatteringStrings.js';
import AtomCollectionNode from './AtomCollectionNode.js';

// constants
const observationWindowString = RutherfordScatteringStrings.a11y.observationWindow;
const atomSpaceDescriptionString = RutherfordScatteringStrings.a11y.atomSpaceDescription;
class AtomSpaceNode extends ParticleSpaceNode {
  /**
   * @param {RSBaseModel} model
   * @param {Property.<boolean>} showAlphaTraceProperty
   * @param {ModelViewTransform2} modelViewTransform - model to view transform
   * @param {Object} config - must provide {Bounds2} canvasBounds
   */
  constructor(model, showAlphaTraceProperty, modelViewTransform, config) {
    config = merge({
      // {Bounds2}
      canvasBounds: required(config.canvasBounds),
      particleStyle: 'particle',
      // pdom
      tagName: 'div',
      labelTagName: 'h3',
      labelContent: observationWindowString,
      descriptionContent: atomSpaceDescriptionString,
      appendDescription: true
    }, config);
    super(model.atomSpace, showAlphaTraceProperty, modelViewTransform, config);

    // @private - generates an image for the collection of atoms
    this.atomsNode = new AtomCollectionNode(model.atomSpace, modelViewTransform);
    if (RSQueryParameters.showDebugShapes) {
      model.atomSpace.particleTransitionedEmitter.addListener(particle => {
        // a particle has been transitioned to a new atom - show the bounding box of the particle
        this.addChild(new Path(modelViewTransform.modelToViewShape(particle.preparedBoundingBox), {
          stroke: 'rgb(114,183,188)'
        }));
      });
    }
  }

  /**
   * @param {CanvasRenderingContext2D} context
   * @override
   * @protected
   */
  paintSpace(context) {
    // Slight chance the image used isn't available. In that case, return & try again on next frame
    if (!this.atomsNode.image) {
      return;
    }
    const x = this.centerX - this.atomsNode.image.width / 2;
    const y = this.centerY - this.atomsNode.image.height / 2;
    context.drawImage(this.atomsNode.image, x, y, this.atomsNode.image.width, this.atomsNode.image.height);
  }
}
rutherfordScattering.register('AtomSpaceNode', AtomSpaceNode);
export default AtomSpaceNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsInJlcXVpcmVkIiwiUGF0aCIsIlJTUXVlcnlQYXJhbWV0ZXJzIiwiUGFydGljbGVTcGFjZU5vZGUiLCJydXRoZXJmb3JkU2NhdHRlcmluZyIsIlJ1dGhlcmZvcmRTY2F0dGVyaW5nU3RyaW5ncyIsIkF0b21Db2xsZWN0aW9uTm9kZSIsIm9ic2VydmF0aW9uV2luZG93U3RyaW5nIiwiYTExeSIsIm9ic2VydmF0aW9uV2luZG93IiwiYXRvbVNwYWNlRGVzY3JpcHRpb25TdHJpbmciLCJhdG9tU3BhY2VEZXNjcmlwdGlvbiIsIkF0b21TcGFjZU5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwic2hvd0FscGhhVHJhY2VQcm9wZXJ0eSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImNvbmZpZyIsImNhbnZhc0JvdW5kcyIsInBhcnRpY2xlU3R5bGUiLCJ0YWdOYW1lIiwibGFiZWxUYWdOYW1lIiwibGFiZWxDb250ZW50IiwiZGVzY3JpcHRpb25Db250ZW50IiwiYXBwZW5kRGVzY3JpcHRpb24iLCJhdG9tU3BhY2UiLCJhdG9tc05vZGUiLCJzaG93RGVidWdTaGFwZXMiLCJwYXJ0aWNsZVRyYW5zaXRpb25lZEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsInBhcnRpY2xlIiwiYWRkQ2hpbGQiLCJtb2RlbFRvVmlld1NoYXBlIiwicHJlcGFyZWRCb3VuZGluZ0JveCIsInN0cm9rZSIsInBhaW50U3BhY2UiLCJjb250ZXh0IiwiaW1hZ2UiLCJ4IiwiY2VudGVyWCIsIndpZHRoIiwieSIsImNlbnRlclkiLCJoZWlnaHQiLCJkcmF3SW1hZ2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkF0b21TcGFjZU5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3BhY2UgaW4gd2hpY2ggYXRvbXMgYW5kIGFscGhhIHBhcnRpY2xlcyBhcmUgcmVuZGVyZWQuICBJbiB0aGlzIHJlcHJlc2VudGF0aW9uLCB0aGVyZSBhcmUgc2V2ZXJhbFxyXG4gKiBhdG9tcyBpbiB0aGUgc3BhY2UgYW5kIHRoZSBhbHBoYSBwYXJ0aWNsZXMgYXJlIHNtYWxsIHBhcnRpY2xlcywgbW9zdCBvZiB3aGljaCB0cmF2ZWwgdGhyb3VnaCB0aGVcclxuICogYXRvbXMgdW5kZWZsZWN0ZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgRGF2ZSBTY2htaXR6IChTY2htaXR6d2FyZSlcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHJlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9yZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUlNRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vLi4vY29tbW9uL1JTUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IFBhcnRpY2xlU3BhY2VOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1BhcnRpY2xlU3BhY2VOb2RlLmpzJztcclxuaW1wb3J0IHJ1dGhlcmZvcmRTY2F0dGVyaW5nIGZyb20gJy4uLy4uL3J1dGhlcmZvcmRTY2F0dGVyaW5nLmpzJztcclxuaW1wb3J0IFJ1dGhlcmZvcmRTY2F0dGVyaW5nU3RyaW5ncyBmcm9tICcuLi8uLi9SdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgQXRvbUNvbGxlY3Rpb25Ob2RlIGZyb20gJy4vQXRvbUNvbGxlY3Rpb25Ob2RlLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBvYnNlcnZhdGlvbldpbmRvd1N0cmluZyA9IFJ1dGhlcmZvcmRTY2F0dGVyaW5nU3RyaW5ncy5hMTF5Lm9ic2VydmF0aW9uV2luZG93O1xyXG5jb25zdCBhdG9tU3BhY2VEZXNjcmlwdGlvblN0cmluZyA9IFJ1dGhlcmZvcmRTY2F0dGVyaW5nU3RyaW5ncy5hMTF5LmF0b21TcGFjZURlc2NyaXB0aW9uO1xyXG5cclxuY2xhc3MgQXRvbVNwYWNlTm9kZSBleHRlbmRzIFBhcnRpY2xlU3BhY2VOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtSU0Jhc2VNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gc2hvd0FscGhhVHJhY2VQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtIC0gbW9kZWwgdG8gdmlldyB0cmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gbXVzdCBwcm92aWRlIHtCb3VuZHMyfSBjYW52YXNCb3VuZHNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIHNob3dBbHBoYVRyYWNlUHJvcGVydHksIG1vZGVsVmlld1RyYW5zZm9ybSwgY29uZmlnICkge1xyXG4gICAgY29uZmlnID0gbWVyZ2UoIHtcclxuXHJcbiAgICAgIC8vIHtCb3VuZHMyfVxyXG4gICAgICBjYW52YXNCb3VuZHM6IHJlcXVpcmVkKCBjb25maWcuY2FudmFzQm91bmRzICksXHJcbiAgICAgIHBhcnRpY2xlU3R5bGU6ICdwYXJ0aWNsZScsXHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICBsYWJlbFRhZ05hbWU6ICdoMycsXHJcbiAgICAgIGxhYmVsQ29udGVudDogb2JzZXJ2YXRpb25XaW5kb3dTdHJpbmcsXHJcbiAgICAgIGRlc2NyaXB0aW9uQ29udGVudDogYXRvbVNwYWNlRGVzY3JpcHRpb25TdHJpbmcsXHJcbiAgICAgIGFwcGVuZERlc2NyaXB0aW9uOiB0cnVlXHJcbiAgICB9LCBjb25maWcgKTtcclxuXHJcbiAgICBzdXBlciggbW9kZWwuYXRvbVNwYWNlLCBzaG93QWxwaGFUcmFjZVByb3BlcnR5LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIGNvbmZpZyApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIC0gZ2VuZXJhdGVzIGFuIGltYWdlIGZvciB0aGUgY29sbGVjdGlvbiBvZiBhdG9tc1xyXG4gICAgdGhpcy5hdG9tc05vZGUgPSBuZXcgQXRvbUNvbGxlY3Rpb25Ob2RlKCBtb2RlbC5hdG9tU3BhY2UsIG1vZGVsVmlld1RyYW5zZm9ybSApO1xyXG5cclxuICAgIGlmICggUlNRdWVyeVBhcmFtZXRlcnMuc2hvd0RlYnVnU2hhcGVzICkge1xyXG4gICAgICBtb2RlbC5hdG9tU3BhY2UucGFydGljbGVUcmFuc2l0aW9uZWRFbWl0dGVyLmFkZExpc3RlbmVyKCBwYXJ0aWNsZSA9PiB7XHJcbiAgICAgICAgLy8gYSBwYXJ0aWNsZSBoYXMgYmVlbiB0cmFuc2l0aW9uZWQgdG8gYSBuZXcgYXRvbSAtIHNob3cgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgcGFydGljbGVcclxuICAgICAgICB0aGlzLmFkZENoaWxkKCBuZXcgUGF0aCggbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3U2hhcGUoIHBhcnRpY2xlLnByZXBhcmVkQm91bmRpbmdCb3ggKSwge1xyXG4gICAgICAgICAgc3Ryb2tlOiAncmdiKDExNCwxODMsMTg4KSdcclxuICAgICAgICB9ICkgKTtcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHRcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICovXHJcbiAgcGFpbnRTcGFjZSggY29udGV4dCApIHtcclxuXHJcbiAgICAvLyBTbGlnaHQgY2hhbmNlIHRoZSBpbWFnZSB1c2VkIGlzbid0IGF2YWlsYWJsZS4gSW4gdGhhdCBjYXNlLCByZXR1cm4gJiB0cnkgYWdhaW4gb24gbmV4dCBmcmFtZVxyXG4gICAgaWYgKCAhdGhpcy5hdG9tc05vZGUuaW1hZ2UgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB4ID0gdGhpcy5jZW50ZXJYIC0gdGhpcy5hdG9tc05vZGUuaW1hZ2Uud2lkdGggLyAyO1xyXG4gICAgY29uc3QgeSA9IHRoaXMuY2VudGVyWSAtIHRoaXMuYXRvbXNOb2RlLmltYWdlLmhlaWdodCAvIDI7XHJcbiAgICBjb250ZXh0LmRyYXdJbWFnZSggdGhpcy5hdG9tc05vZGUuaW1hZ2UsIHgsIHksIHRoaXMuYXRvbXNOb2RlLmltYWdlLndpZHRoLCB0aGlzLmF0b21zTm9kZS5pbWFnZS5oZWlnaHQgKTtcclxuICB9XHJcbn1cclxuXHJcbnJ1dGhlcmZvcmRTY2F0dGVyaW5nLnJlZ2lzdGVyKCAnQXRvbVNwYWNlTm9kZScsIEF0b21TcGFjZU5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEF0b21TcGFjZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFFBQVEsTUFBTSxzQ0FBc0M7QUFDM0QsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFDakUsT0FBT0MsaUJBQWlCLE1BQU0sd0NBQXdDO0FBQ3RFLE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUNoRSxPQUFPQywyQkFBMkIsTUFBTSxzQ0FBc0M7QUFDOUUsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCOztBQUV4RDtBQUNBLE1BQU1DLHVCQUF1QixHQUFHRiwyQkFBMkIsQ0FBQ0csSUFBSSxDQUFDQyxpQkFBaUI7QUFDbEYsTUFBTUMsMEJBQTBCLEdBQUdMLDJCQUEyQixDQUFDRyxJQUFJLENBQUNHLG9CQUFvQjtBQUV4RixNQUFNQyxhQUFhLFNBQVNULGlCQUFpQixDQUFDO0VBRTVDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFVSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLHNCQUFzQixFQUFFQyxrQkFBa0IsRUFBRUMsTUFBTSxFQUFHO0lBQ3ZFQSxNQUFNLEdBQUdsQixLQUFLLENBQUU7TUFFZDtNQUNBbUIsWUFBWSxFQUFFbEIsUUFBUSxDQUFFaUIsTUFBTSxDQUFDQyxZQUFhLENBQUM7TUFDN0NDLGFBQWEsRUFBRSxVQUFVO01BRXpCO01BQ0FDLE9BQU8sRUFBRSxLQUFLO01BQ2RDLFlBQVksRUFBRSxJQUFJO01BQ2xCQyxZQUFZLEVBQUVmLHVCQUF1QjtNQUNyQ2dCLGtCQUFrQixFQUFFYiwwQkFBMEI7TUFDOUNjLGlCQUFpQixFQUFFO0lBQ3JCLENBQUMsRUFBRVAsTUFBTyxDQUFDO0lBRVgsS0FBSyxDQUFFSCxLQUFLLENBQUNXLFNBQVMsRUFBRVYsc0JBQXNCLEVBQUVDLGtCQUFrQixFQUFFQyxNQUFPLENBQUM7O0lBRTVFO0lBQ0EsSUFBSSxDQUFDUyxTQUFTLEdBQUcsSUFBSXBCLGtCQUFrQixDQUFFUSxLQUFLLENBQUNXLFNBQVMsRUFBRVQsa0JBQW1CLENBQUM7SUFFOUUsSUFBS2QsaUJBQWlCLENBQUN5QixlQUFlLEVBQUc7TUFDdkNiLEtBQUssQ0FBQ1csU0FBUyxDQUFDRywyQkFBMkIsQ0FBQ0MsV0FBVyxDQUFFQyxRQUFRLElBQUk7UUFDbkU7UUFDQSxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJOUIsSUFBSSxDQUFFZSxrQkFBa0IsQ0FBQ2dCLGdCQUFnQixDQUFFRixRQUFRLENBQUNHLG1CQUFvQixDQUFDLEVBQUU7VUFDNUZDLE1BQU0sRUFBRTtRQUNWLENBQUUsQ0FBRSxDQUFDO01BQ1AsQ0FBRSxDQUFDO0lBQ0w7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFVBQVVBLENBQUVDLE9BQU8sRUFBRztJQUVwQjtJQUNBLElBQUssQ0FBQyxJQUFJLENBQUNWLFNBQVMsQ0FBQ1csS0FBSyxFQUFHO01BQzNCO0lBQ0Y7SUFFQSxNQUFNQyxDQUFDLEdBQUcsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSSxDQUFDYixTQUFTLENBQUNXLEtBQUssQ0FBQ0csS0FBSyxHQUFHLENBQUM7SUFDdkQsTUFBTUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUksQ0FBQ2hCLFNBQVMsQ0FBQ1csS0FBSyxDQUFDTSxNQUFNLEdBQUcsQ0FBQztJQUN4RFAsT0FBTyxDQUFDUSxTQUFTLENBQUUsSUFBSSxDQUFDbEIsU0FBUyxDQUFDVyxLQUFLLEVBQUVDLENBQUMsRUFBRUcsQ0FBQyxFQUFFLElBQUksQ0FBQ2YsU0FBUyxDQUFDVyxLQUFLLENBQUNHLEtBQUssRUFBRSxJQUFJLENBQUNkLFNBQVMsQ0FBQ1csS0FBSyxDQUFDTSxNQUFPLENBQUM7RUFDMUc7QUFDRjtBQUVBdkMsb0JBQW9CLENBQUN5QyxRQUFRLENBQUUsZUFBZSxFQUFFakMsYUFBYyxDQUFDO0FBRS9ELGVBQWVBLGFBQWEifQ==