// Copyright 2016-2022, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author Dave Schmitz (Schmitzware)
 */

import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import { HighlightOverlay } from '../../scenery/js/imports.js';
import RSColors from './common/RSColors.js';
import PlumPuddingAtomScreen from './plumpuddingatom/PlumPuddingAtomScreen.js';
import RutherfordAtomScreen from './rutherfordatom/RutherfordAtomScreen.js';
import RutherfordScatteringStrings from './RutherfordScatteringStrings.js';
const rutherfordScatteringTitleStringProperty = RutherfordScatteringStrings['rutherford-scattering'].titleStringProperty;
const simOptions = {
  credits: {
    leadDesign: 'Amy Hanson, Sam McKagan',
    softwareDevelopment: 'Jesse Greenberg, Chris Malley, Dave Schmitz',
    team: 'Wendy Adams, Michael Dubson, Noah Finkelstein, Danielle Harlow, Ariel Paul, Kathy Perkins, ' + 'Noah Podolefsky, Amy Rouinfar, Carl Weiman',
    qualityAssurance: 'Steele Dalton, Amanda Davis, Bryce Griebenow, Andrea Lin, Ben Roberts, Kathryn Woessner, Bryan Yoelin',
    graphicArts: '',
    thanks: ''
  },
  preferencesModel: new PreferencesModel({
    visualOptions: {
      supportsProjectorMode: true
    }
  })
};

// group focus highlights are synced with color profile
HighlightOverlay.setInnerGroupHighlightColor(RSColors.innerGroupHighlightColorProperty);
HighlightOverlay.setOuterGroupHighlightColor(RSColors.outerGroupHighlightColorProperty);
simLauncher.launch(() => {
  const screens = [new RutherfordAtomScreen(), new PlumPuddingAtomScreen()];
  const sim = new Sim(rutherfordScatteringTitleStringProperty, screens, simOptions);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc01vZGVsIiwiU2ltIiwic2ltTGF1bmNoZXIiLCJIaWdobGlnaHRPdmVybGF5IiwiUlNDb2xvcnMiLCJQbHVtUHVkZGluZ0F0b21TY3JlZW4iLCJSdXRoZXJmb3JkQXRvbVNjcmVlbiIsIlJ1dGhlcmZvcmRTY2F0dGVyaW5nU3RyaW5ncyIsInJ1dGhlcmZvcmRTY2F0dGVyaW5nVGl0bGVTdHJpbmdQcm9wZXJ0eSIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJzaW1PcHRpb25zIiwiY3JlZGl0cyIsImxlYWREZXNpZ24iLCJzb2Z0d2FyZURldmVsb3BtZW50IiwidGVhbSIsInF1YWxpdHlBc3N1cmFuY2UiLCJncmFwaGljQXJ0cyIsInRoYW5rcyIsInByZWZlcmVuY2VzTW9kZWwiLCJ2aXN1YWxPcHRpb25zIiwic3VwcG9ydHNQcm9qZWN0b3JNb2RlIiwic2V0SW5uZXJHcm91cEhpZ2hsaWdodENvbG9yIiwiaW5uZXJHcm91cEhpZ2hsaWdodENvbG9yUHJvcGVydHkiLCJzZXRPdXRlckdyb3VwSGlnaGxpZ2h0Q29sb3IiLCJvdXRlckdyb3VwSGlnaGxpZ2h0Q29sb3JQcm9wZXJ0eSIsImxhdW5jaCIsInNjcmVlbnMiLCJzaW0iLCJzdGFydCJdLCJzb3VyY2VzIjpbInJ1dGhlcmZvcmQtc2NhdHRlcmluZy1tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBzaW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgRGF2ZSBTY2htaXR6IChTY2htaXR6d2FyZSlcclxuICovXHJcblxyXG5pbXBvcnQgUHJlZmVyZW5jZXNNb2RlbCBmcm9tICcuLi8uLi9qb2lzdC9qcy9wcmVmZXJlbmNlcy9QcmVmZXJlbmNlc01vZGVsLmpzJztcclxuaW1wb3J0IFNpbSBmcm9tICcuLi8uLi9qb2lzdC9qcy9TaW0uanMnO1xyXG5pbXBvcnQgc2ltTGF1bmNoZXIgZnJvbSAnLi4vLi4vam9pc3QvanMvc2ltTGF1bmNoZXIuanMnO1xyXG5pbXBvcnQgeyBIaWdobGlnaHRPdmVybGF5IH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJTQ29sb3JzIGZyb20gJy4vY29tbW9uL1JTQ29sb3JzLmpzJztcclxuaW1wb3J0IFBsdW1QdWRkaW5nQXRvbVNjcmVlbiBmcm9tICcuL3BsdW1wdWRkaW5nYXRvbS9QbHVtUHVkZGluZ0F0b21TY3JlZW4uanMnO1xyXG5pbXBvcnQgUnV0aGVyZm9yZEF0b21TY3JlZW4gZnJvbSAnLi9ydXRoZXJmb3JkYXRvbS9SdXRoZXJmb3JkQXRvbVNjcmVlbi5qcyc7XHJcbmltcG9ydCBSdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MgZnJvbSAnLi9SdXRoZXJmb3JkU2NhdHRlcmluZ1N0cmluZ3MuanMnO1xyXG5cclxuXHJcbmNvbnN0IHJ1dGhlcmZvcmRTY2F0dGVyaW5nVGl0bGVTdHJpbmdQcm9wZXJ0eSA9IFJ1dGhlcmZvcmRTY2F0dGVyaW5nU3RyaW5nc1sgJ3J1dGhlcmZvcmQtc2NhdHRlcmluZycgXS50aXRsZVN0cmluZ1Byb3BlcnR5O1xyXG5cclxuY29uc3Qgc2ltT3B0aW9ucyA9IHtcclxuICBjcmVkaXRzOiB7XHJcbiAgICBsZWFkRGVzaWduOiAnQW15IEhhbnNvbiwgU2FtIE1jS2FnYW4nLFxyXG4gICAgc29mdHdhcmVEZXZlbG9wbWVudDogJ0plc3NlIEdyZWVuYmVyZywgQ2hyaXMgTWFsbGV5LCBEYXZlIFNjaG1pdHonLFxyXG4gICAgdGVhbTogJ1dlbmR5IEFkYW1zLCBNaWNoYWVsIER1YnNvbiwgTm9haCBGaW5rZWxzdGVpbiwgRGFuaWVsbGUgSGFybG93LCBBcmllbCBQYXVsLCBLYXRoeSBQZXJraW5zLCAnICtcclxuICAgICAgICAgICdOb2FoIFBvZG9sZWZza3ksIEFteSBSb3VpbmZhciwgQ2FybCBXZWltYW4nLFxyXG4gICAgcXVhbGl0eUFzc3VyYW5jZTogJ1N0ZWVsZSBEYWx0b24sIEFtYW5kYSBEYXZpcywgQnJ5Y2UgR3JpZWJlbm93LCBBbmRyZWEgTGluLCBCZW4gUm9iZXJ0cywgS2F0aHJ5biBXb2Vzc25lciwgQnJ5YW4gWW9lbGluJyxcclxuICAgIGdyYXBoaWNBcnRzOiAnJyxcclxuICAgIHRoYW5rczogJydcclxuICB9LFxyXG5cclxuICBwcmVmZXJlbmNlc01vZGVsOiBuZXcgUHJlZmVyZW5jZXNNb2RlbCgge1xyXG4gICAgdmlzdWFsT3B0aW9uczoge1xyXG4gICAgICBzdXBwb3J0c1Byb2plY3Rvck1vZGU6IHRydWVcclxuICAgIH1cclxuICB9IClcclxufTtcclxuXHJcbi8vIGdyb3VwIGZvY3VzIGhpZ2hsaWdodHMgYXJlIHN5bmNlZCB3aXRoIGNvbG9yIHByb2ZpbGVcclxuSGlnaGxpZ2h0T3ZlcmxheS5zZXRJbm5lckdyb3VwSGlnaGxpZ2h0Q29sb3IoIFJTQ29sb3JzLmlubmVyR3JvdXBIaWdobGlnaHRDb2xvclByb3BlcnR5ICk7XHJcbkhpZ2hsaWdodE92ZXJsYXkuc2V0T3V0ZXJHcm91cEhpZ2hsaWdodENvbG9yKCBSU0NvbG9ycy5vdXRlckdyb3VwSGlnaGxpZ2h0Q29sb3JQcm9wZXJ0eSApO1xyXG5cclxuc2ltTGF1bmNoZXIubGF1bmNoKCAoKSA9PiB7XHJcbiAgY29uc3Qgc2NyZWVucyA9IFtcclxuICAgIG5ldyBSdXRoZXJmb3JkQXRvbVNjcmVlbigpLFxyXG4gICAgbmV3IFBsdW1QdWRkaW5nQXRvbVNjcmVlbigpXHJcbiAgXTtcclxuICBjb25zdCBzaW0gPSBuZXcgU2ltKCBydXRoZXJmb3JkU2NhdHRlcmluZ1RpdGxlU3RyaW5nUHJvcGVydHksIHNjcmVlbnMsIHNpbU9wdGlvbnMgKTtcclxuICBzaW0uc3RhcnQoKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSxnREFBZ0Q7QUFDN0UsT0FBT0MsR0FBRyxNQUFNLHVCQUF1QjtBQUN2QyxPQUFPQyxXQUFXLE1BQU0sK0JBQStCO0FBQ3ZELFNBQVNDLGdCQUFnQixRQUFRLDZCQUE2QjtBQUM5RCxPQUFPQyxRQUFRLE1BQU0sc0JBQXNCO0FBQzNDLE9BQU9DLHFCQUFxQixNQUFNLDRDQUE0QztBQUM5RSxPQUFPQyxvQkFBb0IsTUFBTSwwQ0FBMEM7QUFDM0UsT0FBT0MsMkJBQTJCLE1BQU0sa0NBQWtDO0FBRzFFLE1BQU1DLHVDQUF1QyxHQUFHRCwyQkFBMkIsQ0FBRSx1QkFBdUIsQ0FBRSxDQUFDRSxtQkFBbUI7QUFFMUgsTUFBTUMsVUFBVSxHQUFHO0VBQ2pCQyxPQUFPLEVBQUU7SUFDUEMsVUFBVSxFQUFFLHlCQUF5QjtJQUNyQ0MsbUJBQW1CLEVBQUUsNkNBQTZDO0lBQ2xFQyxJQUFJLEVBQUUsNkZBQTZGLEdBQzdGLDRDQUE0QztJQUNsREMsZ0JBQWdCLEVBQUUsdUdBQXVHO0lBQ3pIQyxXQUFXLEVBQUUsRUFBRTtJQUNmQyxNQUFNLEVBQUU7RUFDVixDQUFDO0VBRURDLGdCQUFnQixFQUFFLElBQUlsQixnQkFBZ0IsQ0FBRTtJQUN0Q21CLGFBQWEsRUFBRTtNQUNiQyxxQkFBcUIsRUFBRTtJQUN6QjtFQUNGLENBQUU7QUFDSixDQUFDOztBQUVEO0FBQ0FqQixnQkFBZ0IsQ0FBQ2tCLDJCQUEyQixDQUFFakIsUUFBUSxDQUFDa0IsZ0NBQWlDLENBQUM7QUFDekZuQixnQkFBZ0IsQ0FBQ29CLDJCQUEyQixDQUFFbkIsUUFBUSxDQUFDb0IsZ0NBQWlDLENBQUM7QUFFekZ0QixXQUFXLENBQUN1QixNQUFNLENBQUUsTUFBTTtFQUN4QixNQUFNQyxPQUFPLEdBQUcsQ0FDZCxJQUFJcEIsb0JBQW9CLENBQUMsQ0FBQyxFQUMxQixJQUFJRCxxQkFBcUIsQ0FBQyxDQUFDLENBQzVCO0VBQ0QsTUFBTXNCLEdBQUcsR0FBRyxJQUFJMUIsR0FBRyxDQUFFTyx1Q0FBdUMsRUFBRWtCLE9BQU8sRUFBRWhCLFVBQVcsQ0FBQztFQUNuRmlCLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7QUFDYixDQUFFLENBQUMifQ==