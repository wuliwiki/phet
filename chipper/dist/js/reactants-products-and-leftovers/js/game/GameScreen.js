// Copyright 2014-2023, University of Colorado Boulder

/**
 * 'Game' screen
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Shape } from '../../../kite/js/imports.js';
import FaceNode from '../../../scenery-phet/js/FaceNode.js';
import { HBox, Path, VBox } from '../../../scenery/js/imports.js';
import RPALColors from '../common/RPALColors.js';
import reactantsProductsAndLeftovers from '../reactantsProductsAndLeftovers.js';
import ReactantsProductsAndLeftoversStrings from '../ReactantsProductsAndLeftoversStrings.js';
import GameModel from './model/GameModel.js';
import GameScreenView from './view/GameScreenView.js';
export default class GameScreen extends Screen {
  constructor(tandem) {
    const options = {
      name: ReactantsProductsAndLeftoversStrings.screen.gameStringProperty,
      backgroundColorProperty: new Property(RPALColors.SCREEN_BACKGROUND),
      homeScreenIcon: createScreenIcon(),
      tandem: tandem
    };
    super(() => new GameModel(tandem.createTandem('model')), model => new GameScreenView(model, tandem.createTandem('view')), options);
  }
}

/**
 * Creates the ScreenIcon for this screen, a smiley face with up/down spinner arrows.
 */
function createScreenIcon() {
  // smiley face
  const faceNode = new FaceNode(200, {
    headStroke: 'black',
    headLineWidth: 4
  });

  // up/down arrows
  const ARROW_OPTIONS = {
    fill: 'black'
  };
  const ARROW_SIZE = 0.4 * faceNode.height;
  const upArrowNode = new Path(new Shape()
  // clockwise from tip
  .moveTo(0, 0).lineTo(ARROW_SIZE / 2, ARROW_SIZE).lineTo(-ARROW_SIZE / 2, ARROW_SIZE).close(), ARROW_OPTIONS);
  const downArrowNode = new Path(new Shape()
  // clockwise from tip
  .moveTo(0, 0).lineTo(-ARROW_SIZE / 2, -ARROW_SIZE).lineTo(ARROW_SIZE / 2, -ARROW_SIZE).close(), ARROW_OPTIONS);
  const arrowsBox = new VBox({
    children: [upArrowNode, downArrowNode],
    spacing: 20
  });

  // centered in background, scaled to fit
  const contentNode = new HBox({
    children: [arrowsBox, faceNode],
    spacing: 25
  });
  return new ScreenIcon(contentNode, {
    fill: 'white'
  });
}
reactantsProductsAndLeftovers.register('GameScreen', GameScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJTaGFwZSIsIkZhY2VOb2RlIiwiSEJveCIsIlBhdGgiLCJWQm94IiwiUlBBTENvbG9ycyIsInJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzIiwiUmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnNTdHJpbmdzIiwiR2FtZU1vZGVsIiwiR2FtZVNjcmVlblZpZXciLCJHYW1lU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsImdhbWVTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiU0NSRUVOX0JBQ0tHUk9VTkQiLCJob21lU2NyZWVuSWNvbiIsImNyZWF0ZVNjcmVlbkljb24iLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsImZhY2VOb2RlIiwiaGVhZFN0cm9rZSIsImhlYWRMaW5lV2lkdGgiLCJBUlJPV19PUFRJT05TIiwiZmlsbCIsIkFSUk9XX1NJWkUiLCJoZWlnaHQiLCJ1cEFycm93Tm9kZSIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlIiwiZG93bkFycm93Tm9kZSIsImFycm93c0JveCIsImNoaWxkcmVuIiwic3BhY2luZyIsImNvbnRlbnROb2RlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHYW1lU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqICdHYW1lJyBzY3JlZW5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEZhY2VOb2RlIGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9GYWNlTm9kZS5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIFBhdGgsIFBhdGhPcHRpb25zLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFJQQUxDb2xvcnMgZnJvbSAnLi4vY29tbW9uL1JQQUxDb2xvcnMuanMnO1xyXG5pbXBvcnQgcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMgZnJvbSAnLi4vcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMuanMnO1xyXG5pbXBvcnQgUmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnNTdHJpbmdzIGZyb20gJy4uL1JlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBHYW1lTW9kZWwgZnJvbSAnLi9tb2RlbC9HYW1lTW9kZWwuanMnO1xyXG5pbXBvcnQgR2FtZVNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0dhbWVTY3JlZW5WaWV3LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVTY3JlZW4gZXh0ZW5kcyBTY3JlZW48R2FtZU1vZGVsLCBHYW1lU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIG5hbWU6IFJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzU3RyaW5ncy5zY3JlZW4uZ2FtZVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBSUEFMQ29sb3JzLlNDUkVFTl9CQUNLR1JPVU5EICksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBjcmVhdGVTY3JlZW5JY29uKCksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgR2FtZU1vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IEdhbWVTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIHRoZSBTY3JlZW5JY29uIGZvciB0aGlzIHNjcmVlbiwgYSBzbWlsZXkgZmFjZSB3aXRoIHVwL2Rvd24gc3Bpbm5lciBhcnJvd3MuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTY3JlZW5JY29uKCk6IFNjcmVlbkljb24ge1xyXG5cclxuICAvLyBzbWlsZXkgZmFjZVxyXG4gIGNvbnN0IGZhY2VOb2RlID0gbmV3IEZhY2VOb2RlKCAyMDAsIHtcclxuICAgIGhlYWRTdHJva2U6ICdibGFjaycsXHJcbiAgICBoZWFkTGluZVdpZHRoOiA0XHJcbiAgfSApO1xyXG5cclxuICAvLyB1cC9kb3duIGFycm93c1xyXG4gIGNvbnN0IEFSUk9XX09QVElPTlM6IFBhdGhPcHRpb25zID0geyBmaWxsOiAnYmxhY2snIH07XHJcbiAgY29uc3QgQVJST1dfU0laRSA9IDAuNCAqIGZhY2VOb2RlLmhlaWdodDtcclxuICBjb25zdCB1cEFycm93Tm9kZSA9IG5ldyBQYXRoKCBuZXcgU2hhcGUoKVxyXG4gICAgICAvLyBjbG9ja3dpc2UgZnJvbSB0aXBcclxuICAgICAgLm1vdmVUbyggMCwgMCApXHJcbiAgICAgIC5saW5lVG8oIEFSUk9XX1NJWkUgLyAyLCBBUlJPV19TSVpFIClcclxuICAgICAgLmxpbmVUbyggLUFSUk9XX1NJWkUgLyAyLCBBUlJPV19TSVpFIClcclxuICAgICAgLmNsb3NlKCksXHJcbiAgICBBUlJPV19PUFRJT05TICk7XHJcbiAgY29uc3QgZG93bkFycm93Tm9kZSA9IG5ldyBQYXRoKCBuZXcgU2hhcGUoKVxyXG4gICAgICAvLyBjbG9ja3dpc2UgZnJvbSB0aXBcclxuICAgICAgLm1vdmVUbyggMCwgMCApXHJcbiAgICAgIC5saW5lVG8oIC1BUlJPV19TSVpFIC8gMiwgLUFSUk9XX1NJWkUgKVxyXG4gICAgICAubGluZVRvKCBBUlJPV19TSVpFIC8gMiwgLUFSUk9XX1NJWkUgKVxyXG4gICAgICAuY2xvc2UoKSxcclxuICAgIEFSUk9XX09QVElPTlMgKTtcclxuICBjb25zdCBhcnJvd3NCb3ggPSBuZXcgVkJveCgge1xyXG4gICAgY2hpbGRyZW46IFsgdXBBcnJvd05vZGUsIGRvd25BcnJvd05vZGUgXSxcclxuICAgIHNwYWNpbmc6IDIwXHJcbiAgfSApO1xyXG5cclxuICAvLyBjZW50ZXJlZCBpbiBiYWNrZ3JvdW5kLCBzY2FsZWQgdG8gZml0XHJcbiAgY29uc3QgY29udGVudE5vZGUgPSBuZXcgSEJveCgge1xyXG4gICAgY2hpbGRyZW46IFsgYXJyb3dzQm94LCBmYWNlTm9kZSBdLFxyXG4gICAgc3BhY2luZzogMjVcclxuICB9ICk7XHJcblxyXG4gIHJldHVybiBuZXcgU2NyZWVuSWNvbiggY29udGVudE5vZGUsIHtcclxuICAgIGZpbGw6ICd3aGl0ZSdcclxuICB9ICk7XHJcbn1cclxuXHJcbnJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzLnJlZ2lzdGVyKCAnR2FtZVNjcmVlbicsIEdhbWVTY3JlZW4gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLDZCQUE2QjtBQUNuRCxPQUFPQyxRQUFRLE1BQU0sc0NBQXNDO0FBQzNELFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFlQyxJQUFJLFFBQVEsZ0NBQWdDO0FBRTlFLE9BQU9DLFVBQVUsTUFBTSx5QkFBeUI7QUFDaEQsT0FBT0MsNkJBQTZCLE1BQU0scUNBQXFDO0FBQy9FLE9BQU9DLG9DQUFvQyxNQUFNLDRDQUE0QztBQUM3RixPQUFPQyxTQUFTLE1BQU0sc0JBQXNCO0FBQzVDLE9BQU9DLGNBQWMsTUFBTSwwQkFBMEI7QUFFckQsZUFBZSxNQUFNQyxVQUFVLFNBQVNaLE1BQU0sQ0FBNEI7RUFFakVhLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFUCxvQ0FBb0MsQ0FBQ1EsTUFBTSxDQUFDQyxrQkFBa0I7TUFDcEVDLHVCQUF1QixFQUFFLElBQUlwQixRQUFRLENBQUVRLFVBQVUsQ0FBQ2EsaUJBQWtCLENBQUM7TUFDckVDLGNBQWMsRUFBRUMsZ0JBQWdCLENBQUMsQ0FBQztNQUNsQ1IsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJSixTQUFTLENBQUVJLE1BQU0sQ0FBQ1MsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQ3JEQyxLQUFLLElBQUksSUFBSWIsY0FBYyxDQUFFYSxLQUFLLEVBQUVWLE1BQU0sQ0FBQ1MsWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQ25FUixPQUNGLENBQUM7RUFDSDtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNPLGdCQUFnQkEsQ0FBQSxFQUFlO0VBRXRDO0VBQ0EsTUFBTUcsUUFBUSxHQUFHLElBQUl0QixRQUFRLENBQUUsR0FBRyxFQUFFO0lBQ2xDdUIsVUFBVSxFQUFFLE9BQU87SUFDbkJDLGFBQWEsRUFBRTtFQUNqQixDQUFFLENBQUM7O0VBRUg7RUFDQSxNQUFNQyxhQUEwQixHQUFHO0lBQUVDLElBQUksRUFBRTtFQUFRLENBQUM7RUFDcEQsTUFBTUMsVUFBVSxHQUFHLEdBQUcsR0FBR0wsUUFBUSxDQUFDTSxNQUFNO0VBQ3hDLE1BQU1DLFdBQVcsR0FBRyxJQUFJM0IsSUFBSSxDQUFFLElBQUlILEtBQUssQ0FBQztFQUNwQztFQUFBLENBQ0MrQixNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUNkQyxNQUFNLENBQUVKLFVBQVUsR0FBRyxDQUFDLEVBQUVBLFVBQVcsQ0FBQyxDQUNwQ0ksTUFBTSxDQUFFLENBQUNKLFVBQVUsR0FBRyxDQUFDLEVBQUVBLFVBQVcsQ0FBQyxDQUNyQ0ssS0FBSyxDQUFDLENBQUMsRUFDVlAsYUFBYyxDQUFDO0VBQ2pCLE1BQU1RLGFBQWEsR0FBRyxJQUFJL0IsSUFBSSxDQUFFLElBQUlILEtBQUssQ0FBQztFQUN0QztFQUFBLENBQ0MrQixNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUNkQyxNQUFNLENBQUUsQ0FBQ0osVUFBVSxHQUFHLENBQUMsRUFBRSxDQUFDQSxVQUFXLENBQUMsQ0FDdENJLE1BQU0sQ0FBRUosVUFBVSxHQUFHLENBQUMsRUFBRSxDQUFDQSxVQUFXLENBQUMsQ0FDckNLLEtBQUssQ0FBQyxDQUFDLEVBQ1ZQLGFBQWMsQ0FBQztFQUNqQixNQUFNUyxTQUFTLEdBQUcsSUFBSS9CLElBQUksQ0FBRTtJQUMxQmdDLFFBQVEsRUFBRSxDQUFFTixXQUFXLEVBQUVJLGFBQWEsQ0FBRTtJQUN4Q0csT0FBTyxFQUFFO0VBQ1gsQ0FBRSxDQUFDOztFQUVIO0VBQ0EsTUFBTUMsV0FBVyxHQUFHLElBQUlwQyxJQUFJLENBQUU7SUFDNUJrQyxRQUFRLEVBQUUsQ0FBRUQsU0FBUyxFQUFFWixRQUFRLENBQUU7SUFDakNjLE9BQU8sRUFBRTtFQUNYLENBQUUsQ0FBQztFQUVILE9BQU8sSUFBSXRDLFVBQVUsQ0FBRXVDLFdBQVcsRUFBRTtJQUNsQ1gsSUFBSSxFQUFFO0VBQ1IsQ0FBRSxDQUFDO0FBQ0w7QUFFQXJCLDZCQUE2QixDQUFDaUMsUUFBUSxDQUFFLFlBQVksRUFBRTdCLFVBQVcsQ0FBQyJ9