// Copyright 2014-2023, University of Colorado Boulder

/**
 * A 'guess' is the user's answer to a game challenge, and it may or may not be correct.
 * We call it a 'guess' to distinguish the user's answer from the correct answer.
 * (And yes, 'guess' is semantically incorrect, since a guess is uninformed. Live with it :-)
 *
 * A guess is constructed based on a reaction and challenge type.
 * The guess will have the same number of reactants and products as the reaction,
 * and they are guaranteed to be in the same order.
 * Depending on the challenge type, values in the guess will be initialized to zero.
 *
 * A guess is correct if the reaction and guess have the same quantities of reactants,
 * products and leftovers.
 *
 * Run with the 'playAll' or 'playOne' query parameter to fill in the correct answer.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BoxType from '../../common/model/BoxType.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
export default class GameGuess {
  constructor(reaction, interactiveBox) {
    assert && assert(interactiveBox === BoxType.BEFORE || interactiveBox === BoxType.AFTER);

    // Clone reactants, quantities are initialized to zero for 'Before' challenges.
    this.reactants = [];
    reaction.reactants.forEach(reactant => {
      this.reactants.push(interactiveBox === BoxType.BEFORE ? reactant.clone(0) : reactant.clone());
    });

    // Clone products, quantities are initialized to zero for 'After' challenges.
    this.products = [];
    reaction.products.forEach(product => {
      this.products.push(interactiveBox === BoxType.AFTER ? product.clone(0) : product.clone());
    });

    // Clone leftovers, quantities are initialized to zero for 'After' challenges.
    this.leftovers = [];
    reaction.leftovers.forEach(leftover => {
      this.leftovers.push(interactiveBox === BoxType.AFTER ? leftover.clone(0) : leftover.clone());
    });
    assert && assert(this.reactants.length === reaction.reactants.length);
    assert && assert(this.products.length === reaction.products.length);
    assert && assert(this.leftovers.length === reaction.leftovers.length);
  }
  reset() {
    this.reactants.forEach(reactant => reactant.reset());
    this.products.forEach(product => product.reset());
    this.leftovers.forEach(leftover => leftover.reset());
  }
}
reactantsProductsAndLeftovers.register('GameGuess', GameGuess);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3hUeXBlIiwicmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMiLCJHYW1lR3Vlc3MiLCJjb25zdHJ1Y3RvciIsInJlYWN0aW9uIiwiaW50ZXJhY3RpdmVCb3giLCJhc3NlcnQiLCJCRUZPUkUiLCJBRlRFUiIsInJlYWN0YW50cyIsImZvckVhY2giLCJyZWFjdGFudCIsInB1c2giLCJjbG9uZSIsInByb2R1Y3RzIiwicHJvZHVjdCIsImxlZnRvdmVycyIsImxlZnRvdmVyIiwibGVuZ3RoIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdhbWVHdWVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBICdndWVzcycgaXMgdGhlIHVzZXIncyBhbnN3ZXIgdG8gYSBnYW1lIGNoYWxsZW5nZSwgYW5kIGl0IG1heSBvciBtYXkgbm90IGJlIGNvcnJlY3QuXHJcbiAqIFdlIGNhbGwgaXQgYSAnZ3Vlc3MnIHRvIGRpc3Rpbmd1aXNoIHRoZSB1c2VyJ3MgYW5zd2VyIGZyb20gdGhlIGNvcnJlY3QgYW5zd2VyLlxyXG4gKiAoQW5kIHllcywgJ2d1ZXNzJyBpcyBzZW1hbnRpY2FsbHkgaW5jb3JyZWN0LCBzaW5jZSBhIGd1ZXNzIGlzIHVuaW5mb3JtZWQuIExpdmUgd2l0aCBpdCA6LSlcclxuICpcclxuICogQSBndWVzcyBpcyBjb25zdHJ1Y3RlZCBiYXNlZCBvbiBhIHJlYWN0aW9uIGFuZCBjaGFsbGVuZ2UgdHlwZS5cclxuICogVGhlIGd1ZXNzIHdpbGwgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgcmVhY3RhbnRzIGFuZCBwcm9kdWN0cyBhcyB0aGUgcmVhY3Rpb24sXHJcbiAqIGFuZCB0aGV5IGFyZSBndWFyYW50ZWVkIHRvIGJlIGluIHRoZSBzYW1lIG9yZGVyLlxyXG4gKiBEZXBlbmRpbmcgb24gdGhlIGNoYWxsZW5nZSB0eXBlLCB2YWx1ZXMgaW4gdGhlIGd1ZXNzIHdpbGwgYmUgaW5pdGlhbGl6ZWQgdG8gemVyby5cclxuICpcclxuICogQSBndWVzcyBpcyBjb3JyZWN0IGlmIHRoZSByZWFjdGlvbiBhbmQgZ3Vlc3MgaGF2ZSB0aGUgc2FtZSBxdWFudGl0aWVzIG9mIHJlYWN0YW50cyxcclxuICogcHJvZHVjdHMgYW5kIGxlZnRvdmVycy5cclxuICpcclxuICogUnVuIHdpdGggdGhlICdwbGF5QWxsJyBvciAncGxheU9uZScgcXVlcnkgcGFyYW1ldGVyIHRvIGZpbGwgaW4gdGhlIGNvcnJlY3QgYW5zd2VyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3hUeXBlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Cb3hUeXBlLmpzJztcclxuaW1wb3J0IFJlYWN0aW9uIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9SZWFjdGlvbi5qcyc7XHJcbmltcG9ydCByZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycyBmcm9tICcuLi8uLi9yZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycy5qcyc7XHJcbmltcG9ydCBTdWJzdGFuY2UgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1N1YnN0YW5jZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lR3Vlc3Mge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgcmVhY3RhbnRzOiBTdWJzdGFuY2VbXTtcclxuICBwdWJsaWMgcmVhZG9ubHkgcHJvZHVjdHM6IFN1YnN0YW5jZVtdO1xyXG4gIHB1YmxpYyByZWFkb25seSBsZWZ0b3ZlcnM6IFN1YnN0YW5jZVtdO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHJlYWN0aW9uOiBSZWFjdGlvbiwgaW50ZXJhY3RpdmVCb3g6IEJveFR5cGUgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggaW50ZXJhY3RpdmVCb3ggPT09IEJveFR5cGUuQkVGT1JFIHx8IGludGVyYWN0aXZlQm94ID09PSBCb3hUeXBlLkFGVEVSICk7XHJcblxyXG4gICAgLy8gQ2xvbmUgcmVhY3RhbnRzLCBxdWFudGl0aWVzIGFyZSBpbml0aWFsaXplZCB0byB6ZXJvIGZvciAnQmVmb3JlJyBjaGFsbGVuZ2VzLlxyXG4gICAgdGhpcy5yZWFjdGFudHMgPSBbXTtcclxuICAgIHJlYWN0aW9uLnJlYWN0YW50cy5mb3JFYWNoKCByZWFjdGFudCA9PiB7XHJcbiAgICAgIHRoaXMucmVhY3RhbnRzLnB1c2goICggaW50ZXJhY3RpdmVCb3ggPT09IEJveFR5cGUuQkVGT1JFICkgPyByZWFjdGFudC5jbG9uZSggMCApIDogcmVhY3RhbnQuY2xvbmUoKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENsb25lIHByb2R1Y3RzLCBxdWFudGl0aWVzIGFyZSBpbml0aWFsaXplZCB0byB6ZXJvIGZvciAnQWZ0ZXInIGNoYWxsZW5nZXMuXHJcbiAgICB0aGlzLnByb2R1Y3RzID0gW107XHJcbiAgICByZWFjdGlvbi5wcm9kdWN0cy5mb3JFYWNoKCBwcm9kdWN0ID0+IHtcclxuICAgICAgdGhpcy5wcm9kdWN0cy5wdXNoKCAoIGludGVyYWN0aXZlQm94ID09PSBCb3hUeXBlLkFGVEVSICkgPyBwcm9kdWN0LmNsb25lKCAwICkgOiBwcm9kdWN0LmNsb25lKCkgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBDbG9uZSBsZWZ0b3ZlcnMsIHF1YW50aXRpZXMgYXJlIGluaXRpYWxpemVkIHRvIHplcm8gZm9yICdBZnRlcicgY2hhbGxlbmdlcy5cclxuICAgIHRoaXMubGVmdG92ZXJzID0gW107XHJcbiAgICByZWFjdGlvbi5sZWZ0b3ZlcnMuZm9yRWFjaCggbGVmdG92ZXIgPT4ge1xyXG4gICAgICB0aGlzLmxlZnRvdmVycy5wdXNoKCAoIGludGVyYWN0aXZlQm94ID09PSBCb3hUeXBlLkFGVEVSICkgPyBsZWZ0b3Zlci5jbG9uZSggMCApIDogbGVmdG92ZXIuY2xvbmUoKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMucmVhY3RhbnRzLmxlbmd0aCA9PT0gcmVhY3Rpb24ucmVhY3RhbnRzLmxlbmd0aCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5wcm9kdWN0cy5sZW5ndGggPT09IHJlYWN0aW9uLnByb2R1Y3RzLmxlbmd0aCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5sZWZ0b3ZlcnMubGVuZ3RoID09PSByZWFjdGlvbi5sZWZ0b3ZlcnMubGVuZ3RoICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlYWN0YW50cy5mb3JFYWNoKCByZWFjdGFudCA9PiByZWFjdGFudC5yZXNldCgpICk7XHJcbiAgICB0aGlzLnByb2R1Y3RzLmZvckVhY2goIHByb2R1Y3QgPT4gcHJvZHVjdC5yZXNldCgpICk7XHJcbiAgICB0aGlzLmxlZnRvdmVycy5mb3JFYWNoKCBsZWZ0b3ZlciA9PiBsZWZ0b3Zlci5yZXNldCgpICk7XHJcbiAgfVxyXG59XHJcblxyXG5yZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycy5yZWdpc3RlciggJ0dhbWVHdWVzcycsIEdhbWVHdWVzcyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBRW5ELE9BQU9DLDZCQUE2QixNQUFNLHdDQUF3QztBQUdsRixlQUFlLE1BQU1DLFNBQVMsQ0FBQztFQU10QkMsV0FBV0EsQ0FBRUMsUUFBa0IsRUFBRUMsY0FBdUIsRUFBRztJQUVoRUMsTUFBTSxJQUFJQSxNQUFNLENBQUVELGNBQWMsS0FBS0wsT0FBTyxDQUFDTyxNQUFNLElBQUlGLGNBQWMsS0FBS0wsT0FBTyxDQUFDUSxLQUFNLENBQUM7O0lBRXpGO0lBQ0EsSUFBSSxDQUFDQyxTQUFTLEdBQUcsRUFBRTtJQUNuQkwsUUFBUSxDQUFDSyxTQUFTLENBQUNDLE9BQU8sQ0FBRUMsUUFBUSxJQUFJO01BQ3RDLElBQUksQ0FBQ0YsU0FBUyxDQUFDRyxJQUFJLENBQUlQLGNBQWMsS0FBS0wsT0FBTyxDQUFDTyxNQUFNLEdBQUtJLFFBQVEsQ0FBQ0UsS0FBSyxDQUFFLENBQUUsQ0FBQyxHQUFHRixRQUFRLENBQUNFLEtBQUssQ0FBQyxDQUFFLENBQUM7SUFDdkcsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLEdBQUcsRUFBRTtJQUNsQlYsUUFBUSxDQUFDVSxRQUFRLENBQUNKLE9BQU8sQ0FBRUssT0FBTyxJQUFJO01BQ3BDLElBQUksQ0FBQ0QsUUFBUSxDQUFDRixJQUFJLENBQUlQLGNBQWMsS0FBS0wsT0FBTyxDQUFDUSxLQUFLLEdBQUtPLE9BQU8sQ0FBQ0YsS0FBSyxDQUFFLENBQUUsQ0FBQyxHQUFHRSxPQUFPLENBQUNGLEtBQUssQ0FBQyxDQUFFLENBQUM7SUFDbkcsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDRyxTQUFTLEdBQUcsRUFBRTtJQUNuQlosUUFBUSxDQUFDWSxTQUFTLENBQUNOLE9BQU8sQ0FBRU8sUUFBUSxJQUFJO01BQ3RDLElBQUksQ0FBQ0QsU0FBUyxDQUFDSixJQUFJLENBQUlQLGNBQWMsS0FBS0wsT0FBTyxDQUFDUSxLQUFLLEdBQUtTLFFBQVEsQ0FBQ0osS0FBSyxDQUFFLENBQUUsQ0FBQyxHQUFHSSxRQUFRLENBQUNKLEtBQUssQ0FBQyxDQUFFLENBQUM7SUFDdEcsQ0FBRSxDQUFDO0lBRUhQLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0csU0FBUyxDQUFDUyxNQUFNLEtBQUtkLFFBQVEsQ0FBQ0ssU0FBUyxDQUFDUyxNQUFPLENBQUM7SUFDdkVaLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ1EsUUFBUSxDQUFDSSxNQUFNLEtBQUtkLFFBQVEsQ0FBQ1UsUUFBUSxDQUFDSSxNQUFPLENBQUM7SUFDckVaLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ1UsU0FBUyxDQUFDRSxNQUFNLEtBQUtkLFFBQVEsQ0FBQ1ksU0FBUyxDQUFDRSxNQUFPLENBQUM7RUFDekU7RUFFT0MsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ1YsU0FBUyxDQUFDQyxPQUFPLENBQUVDLFFBQVEsSUFBSUEsUUFBUSxDQUFDUSxLQUFLLENBQUMsQ0FBRSxDQUFDO0lBQ3RELElBQUksQ0FBQ0wsUUFBUSxDQUFDSixPQUFPLENBQUVLLE9BQU8sSUFBSUEsT0FBTyxDQUFDSSxLQUFLLENBQUMsQ0FBRSxDQUFDO0lBQ25ELElBQUksQ0FBQ0gsU0FBUyxDQUFDTixPQUFPLENBQUVPLFFBQVEsSUFBSUEsUUFBUSxDQUFDRSxLQUFLLENBQUMsQ0FBRSxDQUFDO0VBQ3hEO0FBQ0Y7QUFFQWxCLDZCQUE2QixDQUFDbUIsUUFBUSxDQUFFLFdBQVcsRUFBRWxCLFNBQVUsQ0FBQyJ9