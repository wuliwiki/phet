// Copyright 2014-2023, University of Colorado Boulder

/**
 * SettingsNode is responsible for the view that corresponds to GamePhase.RESULTS.
 * It displays the game results (score, optional time,...) and a reward (if the user got a perfect score).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import LevelCompletedNode from '../../../../vegas/js/LevelCompletedNode.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import GamePhase from '../model/GamePhase.js';
import RPALRewardNode from './RPALRewardNode.js';
import RPALQueryParameters from '../../common/RPALQueryParameters.js';
import GamePhaseNode from './GamePhaseNode.js';
export default class ResultsNode extends GamePhaseNode {
  // created dynamically to match the level

  constructor(model, layoutBounds, audioPlayer, tandem) {
    super(GamePhase.RESULTS, model.gamePhaseProperty, {
      tandem: tandem
    });
    this.rewardNode = null;

    // Created dynamically to match the level
    let levelCompletedNode = null;

    /*
     * Displays the game results, possibly with a 'reward'.
     * Unlink is unnecessary because this node exists for the lifetime of the simulation.
     */
    model.gamePhaseProperty.link(gamePhase => {
      // show results when we enter this phase
      if (gamePhase === GamePhase.RESULTS) {
        // Show the reward if the score is perfect, and play the appropriate audio feedback.
        if (model.isPerfectScore() || RPALQueryParameters.showReward) {
          this.rewardNode = new RPALRewardNode(model.levelProperty.value);
          this.addChild(this.rewardNode);
          audioPlayer.gameOverPerfectScore();
        } else {
          audioPlayer.gameOverImperfectScore();
        }

        // Pseudo-dialog that shows results.
        const level = model.levelProperty.value;
        levelCompletedNode = new LevelCompletedNode(level + 1, model.scoreProperty.value, model.getPerfectScore(level), model.numberOfChallengesProperty.value,
        // number of stars in the progress indicator
        model.timerEnabledProperty.value, model.timer.elapsedTimeProperty.value, model.bestTimeProperties[level].value, model.isNewBestTime, () => model.settings(), {
          starDiameter: 45,
          centerX: layoutBounds.centerX,
          centerY: layoutBounds.centerY
        });
        this.addChild(levelCompletedNode);
      } else {
        if (this.rewardNode) {
          this.rewardNode.dispose();
          this.rewardNode = null;
        }
        if (levelCompletedNode) {
          levelCompletedNode.dispose();
          levelCompletedNode = null;
        }
      }
    });
  }

  /**
   * Animates the game reward.
   * @param dt - time between step calls, in seconds
   */
  step(dt) {
    if (this.rewardNode) {
      this.rewardNode.step(dt);
    }
  }
}
reactantsProductsAndLeftovers.register('ResultsNode', ResultsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,