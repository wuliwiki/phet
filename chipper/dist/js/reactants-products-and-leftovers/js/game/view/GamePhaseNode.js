// Copyright 2023, University of Colorado Boulder

/**
 * GamePhaseNode is the base class for a node that shows the view for one phase of the game.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node } from '../../../../scenery/js/imports.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class GamePhaseNode extends Node {
  constructor(gamePhase, gamePhaseProperty, providedOptions) {
    const options = optionize()({
      // NodeOptions
      visibleProperty: new DerivedProperty([gamePhaseProperty], value => value === gamePhase, {
        tandem: providedOptions.tandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO,
        hasListenerOrderDependencies: true // TODO: https://github.com/phetsims/reactants-products-and-leftovers/issues/85
      })
    }, providedOptions);
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
reactantsProductsAndLeftovers.register('GamePhaseNode', GamePhaseNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwicmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMiLCJEZXJpdmVkUHJvcGVydHkiLCJCb29sZWFuSU8iLCJvcHRpb25pemUiLCJHYW1lUGhhc2VOb2RlIiwiY29uc3RydWN0b3IiLCJnYW1lUGhhc2UiLCJnYW1lUGhhc2VQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2aXNpYmxlUHJvcGVydHkiLCJ2YWx1ZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1ZhbHVlVHlwZSIsImhhc0xpc3RlbmVyT3JkZXJEZXBlbmRlbmNpZXMiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHYW1lUGhhc2VOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHYW1lUGhhc2VOb2RlIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBhIG5vZGUgdGhhdCBzaG93cyB0aGUgdmlldyBmb3Igb25lIHBoYXNlIG9mIHRoZSBnYW1lLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzIGZyb20gJy4uLy4uL3JlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzLmpzJztcclxuaW1wb3J0IEdhbWVQaGFzZSBmcm9tICcuLi9tb2RlbC9HYW1lUGhhc2UuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvb2xlYW5JTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvQm9vbGVhbklPLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaWNrT3B0aW9uYWwgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tPcHRpb25hbC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgR2FtZVBoYXNlTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tPcHRpb25hbDxOb2RlT3B0aW9ucywgJ2NoaWxkcmVuJz4gJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVQaGFzZU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCBnYW1lUGhhc2U6IEdhbWVQaGFzZSwgZ2FtZVBoYXNlUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8R2FtZVBoYXNlPiwgcHJvdmlkZWRPcHRpb25zOiBHYW1lUGhhc2VOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEdhbWVQaGFzZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIE5vZGVPcHRpb25zXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBnYW1lUGhhc2VQcm9wZXJ0eSBdLCB2YWx1ZSA9PiAoIHZhbHVlID09PSBnYW1lUGhhc2UgKSwge1xyXG4gICAgICAgIHRhbmRlbTogcHJvdmlkZWRPcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aXNpYmxlUHJvcGVydHknICksXHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBCb29sZWFuSU8sXHJcbiAgICAgICAgaGFzTGlzdGVuZXJPcmRlckRlcGVuZGVuY2llczogdHJ1ZSAvLyBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcmVhY3RhbnRzLXByb2R1Y3RzLWFuZC1sZWZ0b3ZlcnMvaXNzdWVzLzg1XHJcbiAgICAgIH0gKVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5yZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycy5yZWdpc3RlciggJ0dhbWVQaGFzZU5vZGUnLCBHYW1lUGhhc2VOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksUUFBcUIsbUNBQW1DO0FBQ3JFLE9BQU9DLDZCQUE2QixNQUFNLHdDQUF3QztBQUVsRixPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLFNBQVMsTUFBTSwwQ0FBMEM7QUFFaEUsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFRbkYsZUFBZSxNQUFNQyxhQUFhLFNBQVNMLElBQUksQ0FBQztFQUVwQ00sV0FBV0EsQ0FBRUMsU0FBb0IsRUFBRUMsaUJBQWlELEVBQUVDLGVBQXFDLEVBQUc7SUFFdEksTUFBTUMsT0FBTyxHQUFHTixTQUFTLENBQWlELENBQUMsQ0FBRTtNQUUzRTtNQUNBTyxlQUFlLEVBQUUsSUFBSVQsZUFBZSxDQUFFLENBQUVNLGlCQUFpQixDQUFFLEVBQUVJLEtBQUssSUFBTUEsS0FBSyxLQUFLTCxTQUFXLEVBQUU7UUFDN0ZNLE1BQU0sRUFBRUosZUFBZSxDQUFDSSxNQUFNLENBQUNDLFlBQVksQ0FBRSxpQkFBa0IsQ0FBQztRQUNoRUMsZUFBZSxFQUFFWixTQUFTO1FBQzFCYSw0QkFBNEIsRUFBRSxJQUFJLENBQUM7TUFDckMsQ0FBRTtJQUNKLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztFQUNsQjtFQUVnQk8sT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFoQiw2QkFBNkIsQ0FBQ2tCLFFBQVEsQ0FBRSxlQUFlLEVBQUVkLGFBQWMsQ0FBQyJ9