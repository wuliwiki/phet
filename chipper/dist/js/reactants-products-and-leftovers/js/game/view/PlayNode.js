// Copyright 2014-2023, University of Colorado Boulder

/**
 * SettingsNode is responsible for the view that corresponds to GamePhase.PLAY.
 * It displays the status bar and current challenge.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import FiniteStatusBar from '../../../../vegas/js/FiniteStatusBar.js';
import ScoreDisplayLabeledNumber from '../../../../vegas/js/ScoreDisplayLabeledNumber.js';
import DevGameControls from '../../dev/DevGameControls.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import GamePhase from '../model/GamePhase.js';
import ChallengeNode from './ChallengeNode.js';
import GamePhaseNode from './GamePhaseNode.js';
const STATUS_BAR_FONT = new PhetFont(16);
const STATUS_BAR_TEXT_FILL = 'white';
export default class PlayNode extends GamePhaseNode {
  // challenge will be displayed in the area below the status bar

  constructor(model, layoutBounds, visibleBoundsProperty, audioPlayer, tandem) {
    super(GamePhase.PLAY, model.gamePhaseProperty, {
      tandem: tandem
    });
    this.model = model;
    this.layoutBounds = layoutBounds;
    this.audioPlayer = audioPlayer;

    // status bar, across the top of the screen
    const statusBar = new FiniteStatusBar(layoutBounds, visibleBoundsProperty, model.scoreProperty, {
      createScoreDisplay: scoreProperty => new ScoreDisplayLabeledNumber(scoreProperty, {
        font: STATUS_BAR_FONT,
        textFill: STATUS_BAR_TEXT_FILL
      }),
      // FiniteStatusBar uses 1-based level numbering, model is 0-based, see #57.
      levelProperty: new DerivedProperty([model.levelProperty], level => level + 1),
      challengeIndexProperty: model.challengeIndexProperty,
      numberOfChallengesProperty: model.numberOfChallengesProperty,
      elapsedTimeProperty: model.timer.elapsedTimeProperty,
      timerEnabledProperty: model.timerEnabledProperty,
      font: STATUS_BAR_FONT,
      textFill: STATUS_BAR_TEXT_FILL,
      barFill: 'rgb( 49, 117, 202 )',
      xMargin: 50,
      startOverButtonOptions: {
        baseColor: 'rgb( 229, 243, 255 )',
        textFill: 'black',
        xMargin: 10,
        yMargin: 5,
        listener: () => model.settings()
      },
      tandem: tandem.createTandem('statusBar')
    });
    this.addChild(statusBar);

    // Developer controls at top-right, below status bar
    if (phet.chipper.queryParameters.showAnswers) {
      this.addChild(new DevGameControls(model, {
        right: layoutBounds.right - 5,
        top: statusBar.bottom + 5
      }));
    }
    this.challengeBounds = new Bounds2(layoutBounds.left, statusBar.bottom, layoutBounds.right, layoutBounds.bottom);
    let currentChallengeNode = null;

    /*
     * Displays the current challenge.
     * Unlink is unnecessary because this node exists for the lifetime of the simulation.
     */
    model.challengeProperty.link(challenge => {
      // schedule previous challenge for deletion
      if (currentChallengeNode) {
        currentChallengeNode.dispose(); // handles removeChild
        currentChallengeNode = null;
      }

      // activate current challenge
      if (challenge) {
        // challenge will be null on startup and 'Reset All'
        currentChallengeNode = new ChallengeNode(model, challenge, this.challengeBounds, audioPlayer);
        this.addChild(currentChallengeNode);
      }
    });

    /*
     * When we transition away from 'play' phase, dispose of the current challengeNode.
     */
    model.gamePhaseProperty.link(gamePhase => {
      if (gamePhase !== GamePhase.PLAY && currentChallengeNode) {
        currentChallengeNode.dispose();
        currentChallengeNode = null;
      }
    });
  }
}
reactantsProductsAndLeftovers.register('PlayNode', PlayNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJCb3VuZHMyIiwiUGhldEZvbnQiLCJGaW5pdGVTdGF0dXNCYXIiLCJTY29yZURpc3BsYXlMYWJlbGVkTnVtYmVyIiwiRGV2R2FtZUNvbnRyb2xzIiwicmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMiLCJHYW1lUGhhc2UiLCJDaGFsbGVuZ2VOb2RlIiwiR2FtZVBoYXNlTm9kZSIsIlNUQVRVU19CQVJfRk9OVCIsIlNUQVRVU19CQVJfVEVYVF9GSUxMIiwiUGxheU5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwibGF5b3V0Qm91bmRzIiwidmlzaWJsZUJvdW5kc1Byb3BlcnR5IiwiYXVkaW9QbGF5ZXIiLCJ0YW5kZW0iLCJQTEFZIiwiZ2FtZVBoYXNlUHJvcGVydHkiLCJzdGF0dXNCYXIiLCJzY29yZVByb3BlcnR5IiwiY3JlYXRlU2NvcmVEaXNwbGF5IiwiZm9udCIsInRleHRGaWxsIiwibGV2ZWxQcm9wZXJ0eSIsImxldmVsIiwiY2hhbGxlbmdlSW5kZXhQcm9wZXJ0eSIsIm51bWJlck9mQ2hhbGxlbmdlc1Byb3BlcnR5IiwiZWxhcHNlZFRpbWVQcm9wZXJ0eSIsInRpbWVyIiwidGltZXJFbmFibGVkUHJvcGVydHkiLCJiYXJGaWxsIiwieE1hcmdpbiIsInN0YXJ0T3ZlckJ1dHRvbk9wdGlvbnMiLCJiYXNlQ29sb3IiLCJ5TWFyZ2luIiwibGlzdGVuZXIiLCJzZXR0aW5ncyIsImNyZWF0ZVRhbmRlbSIsImFkZENoaWxkIiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJzaG93QW5zd2VycyIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiY2hhbGxlbmdlQm91bmRzIiwibGVmdCIsImN1cnJlbnRDaGFsbGVuZ2VOb2RlIiwiY2hhbGxlbmdlUHJvcGVydHkiLCJsaW5rIiwiY2hhbGxlbmdlIiwiZGlzcG9zZSIsImdhbWVQaGFzZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGxheU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2V0dGluZ3NOb2RlIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgdmlldyB0aGF0IGNvcnJlc3BvbmRzIHRvIEdhbWVQaGFzZS5QTEFZLlxyXG4gKiBJdCBkaXNwbGF5cyB0aGUgc3RhdHVzIGJhciBhbmQgY3VycmVudCBjaGFsbGVuZ2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEZpbml0ZVN0YXR1c0JhciBmcm9tICcuLi8uLi8uLi8uLi92ZWdhcy9qcy9GaW5pdGVTdGF0dXNCYXIuanMnO1xyXG5pbXBvcnQgR2FtZUF1ZGlvUGxheWVyIGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL0dhbWVBdWRpb1BsYXllci5qcyc7XHJcbmltcG9ydCBTY29yZURpc3BsYXlMYWJlbGVkTnVtYmVyIGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL1Njb3JlRGlzcGxheUxhYmVsZWROdW1iZXIuanMnO1xyXG5pbXBvcnQgRGV2R2FtZUNvbnRyb2xzIGZyb20gJy4uLy4uL2Rldi9EZXZHYW1lQ29udHJvbHMuanMnO1xyXG5pbXBvcnQgcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMgZnJvbSAnLi4vLi4vcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMuanMnO1xyXG5pbXBvcnQgR2FtZU1vZGVsIGZyb20gJy4uL21vZGVsL0dhbWVNb2RlbC5qcyc7XHJcbmltcG9ydCBHYW1lUGhhc2UgZnJvbSAnLi4vbW9kZWwvR2FtZVBoYXNlLmpzJztcclxuaW1wb3J0IENoYWxsZW5nZU5vZGUgZnJvbSAnLi9DaGFsbGVuZ2VOb2RlLmpzJztcclxuaW1wb3J0IEdhbWVQaGFzZU5vZGUgZnJvbSAnLi9HYW1lUGhhc2VOb2RlLmpzJztcclxuXHJcbmNvbnN0IFNUQVRVU19CQVJfRk9OVCA9IG5ldyBQaGV0Rm9udCggMTYgKTtcclxuY29uc3QgU1RBVFVTX0JBUl9URVhUX0ZJTEwgPSAnd2hpdGUnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheU5vZGUgZXh0ZW5kcyBHYW1lUGhhc2VOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBtb2RlbDogR2FtZU1vZGVsO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGF5b3V0Qm91bmRzOiBCb3VuZHMyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYXVkaW9QbGF5ZXI6IEdhbWVBdWRpb1BsYXllcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IGNoYWxsZW5nZUJvdW5kczogQm91bmRzMjsgLy8gY2hhbGxlbmdlIHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBhcmVhIGJlbG93IHRoZSBzdGF0dXMgYmFyXHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IEdhbWVNb2RlbCwgbGF5b3V0Qm91bmRzOiBCb3VuZHMyLCB2aXNpYmxlQm91bmRzUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PEJvdW5kczI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgYXVkaW9QbGF5ZXI6IEdhbWVBdWRpb1BsYXllciwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgc3VwZXIoIEdhbWVQaGFzZS5QTEFZLCBtb2RlbC5nYW1lUGhhc2VQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgIHRoaXMubGF5b3V0Qm91bmRzID0gbGF5b3V0Qm91bmRzO1xyXG4gICAgdGhpcy5hdWRpb1BsYXllciA9IGF1ZGlvUGxheWVyO1xyXG5cclxuICAgIC8vIHN0YXR1cyBiYXIsIGFjcm9zcyB0aGUgdG9wIG9mIHRoZSBzY3JlZW5cclxuICAgIGNvbnN0IHN0YXR1c0JhciA9IG5ldyBGaW5pdGVTdGF0dXNCYXIoIGxheW91dEJvdW5kcywgdmlzaWJsZUJvdW5kc1Byb3BlcnR5LCBtb2RlbC5zY29yZVByb3BlcnR5LCB7XHJcbiAgICAgIGNyZWF0ZVNjb3JlRGlzcGxheTogc2NvcmVQcm9wZXJ0eSA9PiBuZXcgU2NvcmVEaXNwbGF5TGFiZWxlZE51bWJlciggc2NvcmVQcm9wZXJ0eSwge1xyXG4gICAgICAgIGZvbnQ6IFNUQVRVU19CQVJfRk9OVCxcclxuICAgICAgICB0ZXh0RmlsbDogU1RBVFVTX0JBUl9URVhUX0ZJTExcclxuICAgICAgfSApLFxyXG5cclxuICAgICAgLy8gRmluaXRlU3RhdHVzQmFyIHVzZXMgMS1iYXNlZCBsZXZlbCBudW1iZXJpbmcsIG1vZGVsIGlzIDAtYmFzZWQsIHNlZSAjNTcuXHJcbiAgICAgIGxldmVsUHJvcGVydHk6IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgbW9kZWwubGV2ZWxQcm9wZXJ0eSBdLCBsZXZlbCA9PiBsZXZlbCArIDEgKSxcclxuICAgICAgY2hhbGxlbmdlSW5kZXhQcm9wZXJ0eTogbW9kZWwuY2hhbGxlbmdlSW5kZXhQcm9wZXJ0eSxcclxuICAgICAgbnVtYmVyT2ZDaGFsbGVuZ2VzUHJvcGVydHk6IG1vZGVsLm51bWJlck9mQ2hhbGxlbmdlc1Byb3BlcnR5LFxyXG4gICAgICBlbGFwc2VkVGltZVByb3BlcnR5OiBtb2RlbC50aW1lci5lbGFwc2VkVGltZVByb3BlcnR5LFxyXG4gICAgICB0aW1lckVuYWJsZWRQcm9wZXJ0eTogbW9kZWwudGltZXJFbmFibGVkUHJvcGVydHksXHJcbiAgICAgIGZvbnQ6IFNUQVRVU19CQVJfRk9OVCxcclxuICAgICAgdGV4dEZpbGw6IFNUQVRVU19CQVJfVEVYVF9GSUxMLFxyXG4gICAgICBiYXJGaWxsOiAncmdiKCA0OSwgMTE3LCAyMDIgKScsXHJcbiAgICAgIHhNYXJnaW46IDUwLFxyXG4gICAgICBzdGFydE92ZXJCdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgYmFzZUNvbG9yOiAncmdiKCAyMjksIDI0MywgMjU1ICknLFxyXG4gICAgICAgIHRleHRGaWxsOiAnYmxhY2snLFxyXG4gICAgICAgIHhNYXJnaW46IDEwLFxyXG4gICAgICAgIHlNYXJnaW46IDUsXHJcbiAgICAgICAgbGlzdGVuZXI6ICgpID0+IG1vZGVsLnNldHRpbmdzKClcclxuICAgICAgfSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3RhdHVzQmFyJyApXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBzdGF0dXNCYXIgKTtcclxuXHJcbiAgICAvLyBEZXZlbG9wZXIgY29udHJvbHMgYXQgdG9wLXJpZ2h0LCBiZWxvdyBzdGF0dXMgYmFyXHJcbiAgICBpZiAoIHBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuc2hvd0Fuc3dlcnMgKSB7XHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBEZXZHYW1lQ29udHJvbHMoIG1vZGVsLCB7XHJcbiAgICAgICAgcmlnaHQ6IGxheW91dEJvdW5kcy5yaWdodCAtIDUsXHJcbiAgICAgICAgdG9wOiBzdGF0dXNCYXIuYm90dG9tICsgNVxyXG4gICAgICB9ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNoYWxsZW5nZUJvdW5kcyA9IG5ldyBCb3VuZHMyKCBsYXlvdXRCb3VuZHMubGVmdCwgc3RhdHVzQmFyLmJvdHRvbSwgbGF5b3V0Qm91bmRzLnJpZ2h0LCBsYXlvdXRCb3VuZHMuYm90dG9tICk7XHJcblxyXG4gICAgbGV0IGN1cnJlbnRDaGFsbGVuZ2VOb2RlOiBDaGFsbGVuZ2VOb2RlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgLypcclxuICAgICAqIERpc3BsYXlzIHRoZSBjdXJyZW50IGNoYWxsZW5nZS5cclxuICAgICAqIFVubGluayBpcyB1bm5lY2Vzc2FyeSBiZWNhdXNlIHRoaXMgbm9kZSBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltdWxhdGlvbi5cclxuICAgICAqL1xyXG4gICAgbW9kZWwuY2hhbGxlbmdlUHJvcGVydHkubGluayggY2hhbGxlbmdlID0+IHtcclxuXHJcbiAgICAgIC8vIHNjaGVkdWxlIHByZXZpb3VzIGNoYWxsZW5nZSBmb3IgZGVsZXRpb25cclxuICAgICAgaWYgKCBjdXJyZW50Q2hhbGxlbmdlTm9kZSApIHtcclxuICAgICAgICBjdXJyZW50Q2hhbGxlbmdlTm9kZS5kaXNwb3NlKCk7IC8vIGhhbmRsZXMgcmVtb3ZlQ2hpbGRcclxuICAgICAgICBjdXJyZW50Q2hhbGxlbmdlTm9kZSA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGFjdGl2YXRlIGN1cnJlbnQgY2hhbGxlbmdlXHJcbiAgICAgIGlmICggY2hhbGxlbmdlICkgeyAvLyBjaGFsbGVuZ2Ugd2lsbCBiZSBudWxsIG9uIHN0YXJ0dXAgYW5kICdSZXNldCBBbGwnXHJcbiAgICAgICAgY3VycmVudENoYWxsZW5nZU5vZGUgPSBuZXcgQ2hhbGxlbmdlTm9kZSggbW9kZWwsIGNoYWxsZW5nZSwgdGhpcy5jaGFsbGVuZ2VCb3VuZHMsIGF1ZGlvUGxheWVyICk7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZCggY3VycmVudENoYWxsZW5nZU5vZGUgKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8qXHJcbiAgICAgKiBXaGVuIHdlIHRyYW5zaXRpb24gYXdheSBmcm9tICdwbGF5JyBwaGFzZSwgZGlzcG9zZSBvZiB0aGUgY3VycmVudCBjaGFsbGVuZ2VOb2RlLlxyXG4gICAgICovXHJcbiAgICBtb2RlbC5nYW1lUGhhc2VQcm9wZXJ0eS5saW5rKCBnYW1lUGhhc2UgPT4ge1xyXG4gICAgICBpZiAoIGdhbWVQaGFzZSAhPT0gR2FtZVBoYXNlLlBMQVkgJiYgY3VycmVudENoYWxsZW5nZU5vZGUgKSB7XHJcbiAgICAgICAgY3VycmVudENoYWxsZW5nZU5vZGUuZGlzcG9zZSgpO1xyXG4gICAgICAgIGN1cnJlbnRDaGFsbGVuZ2VOb2RlID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxucmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMucmVnaXN0ZXIoICdQbGF5Tm9kZScsIFBsYXlOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUVwRSxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFFOUQsT0FBT0MsZUFBZSxNQUFNLHlDQUF5QztBQUVyRSxPQUFPQyx5QkFBeUIsTUFBTSxtREFBbUQ7QUFDekYsT0FBT0MsZUFBZSxNQUFNLDhCQUE4QjtBQUMxRCxPQUFPQyw2QkFBNkIsTUFBTSx3Q0FBd0M7QUFFbEYsT0FBT0MsU0FBUyxNQUFNLHVCQUF1QjtBQUM3QyxPQUFPQyxhQUFhLE1BQU0sb0JBQW9CO0FBQzlDLE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFFOUMsTUFBTUMsZUFBZSxHQUFHLElBQUlSLFFBQVEsQ0FBRSxFQUFHLENBQUM7QUFDMUMsTUFBTVMsb0JBQW9CLEdBQUcsT0FBTztBQUVwQyxlQUFlLE1BQU1DLFFBQVEsU0FBU0gsYUFBYSxDQUFDO0VBS1A7O0VBRXBDSSxXQUFXQSxDQUFFQyxLQUFnQixFQUFFQyxZQUFxQixFQUFFQyxxQkFBaUQsRUFDMUZDLFdB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