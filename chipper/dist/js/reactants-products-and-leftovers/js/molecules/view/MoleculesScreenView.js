// Copyright 2014-2023, University of Colorado Boulder

/**
 * MoleculesScreenView is the view for the 'Molecules' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
import RPALConstants from '../../common/RPALConstants.js';
import RPALSceneNode from '../../common/view/RPALSceneNode.js';
import MoleculesEquationNode from '../../common/view/MoleculesEquationNode.js';
import RPALScreenView from '../../common/view/RPALScreenView.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
export default class MoleculesScreenView extends RPALScreenView {
  constructor(model, tandem) {
    // Creates an equation for a specified reaction.
    const createEquationNode = (reaction, visibleProperty) => new MoleculesEquationNode(reaction, {
      visibleProperty: visibleProperty
    });

    // Creates the user interface for a specified reaction.
    const createSceneNode = (reaction, beforeExpandedProperty, afterExpandedProperty, options) => new RPALSceneNode(reaction, beforeExpandedProperty, afterExpandedProperty, combineOptions({
      contentSize: RPALConstants.MOLECULES_BEFORE_AFTER_BOX_SIZE,
      minIconSize: new Dimension2(30, 25) // eyeballed
    }, options));
    super(model, createEquationNode, createSceneNode, tandem);
  }
}
reactantsProductsAndLeftovers.register('MoleculesScreenView', MoleculesScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiY29tYmluZU9wdGlvbnMiLCJSUEFMQ29uc3RhbnRzIiwiUlBBTFNjZW5lTm9kZSIsIk1vbGVjdWxlc0VxdWF0aW9uTm9kZSIsIlJQQUxTY3JlZW5WaWV3IiwicmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMiLCJNb2xlY3VsZXNTY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRhbmRlbSIsImNyZWF0ZUVxdWF0aW9uTm9kZSIsInJlYWN0aW9uIiwidmlzaWJsZVByb3BlcnR5IiwiY3JlYXRlU2NlbmVOb2RlIiwiYmVmb3JlRXhwYW5kZWRQcm9wZXJ0eSIsImFmdGVyRXhwYW5kZWRQcm9wZXJ0eSIsIm9wdGlvbnMiLCJjb250ZW50U2l6ZSIsIk1PTEVDVUxFU19CRUZPUkVfQUZURVJfQk9YX1NJWkUiLCJtaW5JY29uU2l6ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTW9sZWN1bGVzU2NyZWVuVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2xlY3VsZXNTY3JlZW5WaWV3IGlzIHRoZSB2aWV3IGZvciB0aGUgJ01vbGVjdWxlcycgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFJQQUxDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1JQQUxDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUlBBTFNjZW5lTm9kZSwgeyBCZWZvcmVBZnRlck5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvUlBBTFNjZW5lTm9kZS5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZXNFcXVhdGlvbk5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTW9sZWN1bGVzRXF1YXRpb25Ob2RlLmpzJztcclxuaW1wb3J0IFJQQUxTY3JlZW5WaWV3LCB7IENyZWF0ZVNjZW5lTm9kZUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvUlBBTFNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMgZnJvbSAnLi4vLi4vcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMuanMnO1xyXG5pbXBvcnQgTW9sZWN1bGVzTW9kZWwgZnJvbSAnLi4vbW9kZWwvTW9sZWN1bGVzTW9kZWwuanMnO1xyXG5pbXBvcnQgeyBDcmVhdGVFcXVhdGlvbk5vZGVGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1JlYWN0aW9uQmFyTm9kZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2xlY3VsZXNTY3JlZW5WaWV3IGV4dGVuZHMgUlBBTFNjcmVlblZpZXcge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBNb2xlY3VsZXNNb2RlbCwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgLy8gQ3JlYXRlcyBhbiBlcXVhdGlvbiBmb3IgYSBzcGVjaWZpZWQgcmVhY3Rpb24uXHJcbiAgICBjb25zdCBjcmVhdGVFcXVhdGlvbk5vZGU6IENyZWF0ZUVxdWF0aW9uTm9kZUZ1bmN0aW9uID1cclxuICAgICAgKCByZWFjdGlvbiwgdmlzaWJsZVByb3BlcnR5ICkgPT4gbmV3IE1vbGVjdWxlc0VxdWF0aW9uTm9kZSggcmVhY3Rpb24sIHtcclxuICAgICAgICB2aXNpYmxlUHJvcGVydHk6IHZpc2libGVQcm9wZXJ0eVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlcyB0aGUgdXNlciBpbnRlcmZhY2UgZm9yIGEgc3BlY2lmaWVkIHJlYWN0aW9uLlxyXG4gICAgY29uc3QgY3JlYXRlU2NlbmVOb2RlOiBDcmVhdGVTY2VuZU5vZGVGdW5jdGlvbiA9XHJcbiAgICAgICggcmVhY3Rpb24sIGJlZm9yZUV4cGFuZGVkUHJvcGVydHksIGFmdGVyRXhwYW5kZWRQcm9wZXJ0eSwgb3B0aW9ucyApID0+XHJcbiAgICAgICAgbmV3IFJQQUxTY2VuZU5vZGUoIHJlYWN0aW9uLCBiZWZvcmVFeHBhbmRlZFByb3BlcnR5LCBhZnRlckV4cGFuZGVkUHJvcGVydHksXHJcbiAgICAgICAgICBjb21iaW5lT3B0aW9uczxCZWZvcmVBZnRlck5vZGVPcHRpb25zPigge1xyXG4gICAgICAgICAgICBjb250ZW50U2l6ZTogUlBBTENvbnN0YW50cy5NT0xFQ1VMRVNfQkVGT1JFX0FGVEVSX0JPWF9TSVpFLFxyXG4gICAgICAgICAgICBtaW5JY29uU2l6ZTogbmV3IERpbWVuc2lvbjIoIDMwLCAyNSApIC8vIGV5ZWJhbGxlZFxyXG4gICAgICAgICAgfSwgb3B0aW9ucyApICk7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCBjcmVhdGVFcXVhdGlvbk5vZGUsIGNyZWF0ZVNjZW5lTm9kZSwgdGFuZGVtICk7XHJcbiAgfVxyXG59XHJcblxyXG5yZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycy5yZWdpc3RlciggJ01vbGVjdWxlc1NjcmVlblZpZXcnLCBNb2xlY3VsZXNTY3JlZW5WaWV3ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsU0FBU0MsY0FBYyxRQUFRLHVDQUF1QztBQUV0RSxPQUFPQyxhQUFhLE1BQU0sK0JBQStCO0FBQ3pELE9BQU9DLGFBQWEsTUFBa0Msb0NBQW9DO0FBQzFGLE9BQU9DLHFCQUFxQixNQUFNLDRDQUE0QztBQUM5RSxPQUFPQyxjQUFjLE1BQW1DLHFDQUFxQztBQUM3RixPQUFPQyw2QkFBNkIsTUFBTSx3Q0FBd0M7QUFJbEYsZUFBZSxNQUFNQyxtQkFBbUIsU0FBU0YsY0FBYyxDQUFDO0VBRXZERyxXQUFXQSxDQUFFQyxLQUFxQixFQUFFQyxNQUFjLEVBQUc7SUFFMUQ7SUFDQSxNQUFNQyxrQkFBOEMsR0FDbERBLENBQUVDLFFBQVEsRUFBRUMsZUFBZSxLQUFNLElBQUlULHFCQUFxQixDQUFFUSxRQUFRLEVBQUU7TUFDcEVDLGVBQWUsRUFBRUE7SUFDbkIsQ0FBRSxDQUFDOztJQUVMO0lBQ0EsTUFBTUMsZUFBd0MsR0FDNUNBLENBQUVGLFFBQVEsRUFBRUcsc0JBQXNCLEVBQUVDLHFCQUFxQixFQUFFQyxPQUFPLEtBQ2hFLElBQUlkLGFBQWEsQ0FBRVMsUUFBUSxFQUFFRyxzQkFBc0IsRUFBRUMscUJBQXFCLEVBQ3hFZixjQUFjLENBQTBCO01BQ3RDaUIsV0FBVyxFQUFFaEIsYUFBYSxDQUFDaUIsK0JBQStCO01BQzFEQyxXQUFXLEVBQUUsSUFBSXBCLFVBQVUsQ0FBRSxFQUFFLEVBQUUsRUFBRyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxFQUFFaUIsT0FBUSxDQUFFLENBQUM7SUFFcEIsS0FBSyxDQUFFUixLQUFLLEVBQUVFLGtCQUFrQixFQUFFRyxlQUFlLEVBQUVKLE1BQU8sQ0FBQztFQUM3RDtBQUNGO0FBRUFKLDZCQUE2QixDQUFDZSxRQUFRLENBQUUscUJBQXFCLEVBQUVkLG1CQUFvQixDQUFDIn0=