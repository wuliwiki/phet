// Copyright 2014-2023, University of Colorado Boulder

/**
 * 'Molecules' screen
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import H2ONode from '../../../nitroglycerin/js/nodes/H2ONode.js';
import RPALColors from '../common/RPALColors.js';
import reactantsProductsAndLeftovers from '../reactantsProductsAndLeftovers.js';
import ReactantsProductsAndLeftoversStrings from '../ReactantsProductsAndLeftoversStrings.js';
import MoleculesModel from './model/MoleculesModel.js';
import MoleculesScreenView from './view/MoleculesScreenView.js';
export default class MoleculesScreen extends Screen {
  constructor(tandem) {
    const options = {
      name: ReactantsProductsAndLeftoversStrings.screen.moleculesStringProperty,
      backgroundColorProperty: new Property(RPALColors.SCREEN_BACKGROUND),
      homeScreenIcon: createScreenIcon(0.1),
      navigationBarIcon: createScreenIcon(0.5),
      tandem: tandem
    };
    super(() => new MoleculesModel(tandem.createTandem('model')), model => new MoleculesScreenView(model, tandem.createTandem('view')), options);
  }
}

/**
 * Creates the ScreenIcon for this screen, an H2O molecule.
 */
function createScreenIcon(moleculeLineWidth) {
  const iconNode = new H2ONode({
    atomNodeOptions: {
      stroke: 'black',
      lineWidth: moleculeLineWidth
    }
  });
  return new ScreenIcon(iconNode, {
    fill: 'white'
  });
}
reactantsProductsAndLeftovers.register('MoleculesScreen', MoleculesScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJIMk9Ob2RlIiwiUlBBTENvbG9ycyIsInJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzIiwiUmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnNTdHJpbmdzIiwiTW9sZWN1bGVzTW9kZWwiLCJNb2xlY3VsZXNTY3JlZW5WaWV3IiwiTW9sZWN1bGVzU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsIm1vbGVjdWxlc1N0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJTQ1JFRU5fQkFDS0dST1VORCIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlU2NyZWVuSWNvbiIsIm5hdmlnYXRpb25CYXJJY29uIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJtb2xlY3VsZUxpbmVXaWR0aCIsImljb25Ob2RlIiwiYXRvbU5vZGVPcHRpb25zIiwic3Ryb2tlIiwibGluZVdpZHRoIiwiZmlsbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTW9sZWN1bGVzU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqICdNb2xlY3VsZXMnIHNjcmVlblxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IEgyT05vZGUgZnJvbSAnLi4vLi4vLi4vbml0cm9nbHljZXJpbi9qcy9ub2Rlcy9IMk9Ob2RlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFJQQUxDb2xvcnMgZnJvbSAnLi4vY29tbW9uL1JQQUxDb2xvcnMuanMnO1xyXG5pbXBvcnQgcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMgZnJvbSAnLi4vcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMuanMnO1xyXG5pbXBvcnQgUmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnNTdHJpbmdzIGZyb20gJy4uL1JlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBNb2xlY3VsZXNNb2RlbCBmcm9tICcuL21vZGVsL01vbGVjdWxlc01vZGVsLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlc1NjcmVlblZpZXcgZnJvbSAnLi92aWV3L01vbGVjdWxlc1NjcmVlblZpZXcuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9sZWN1bGVzU2NyZWVuIGV4dGVuZHMgU2NyZWVuPE1vbGVjdWxlc01vZGVsLCBNb2xlY3VsZXNTY3JlZW5WaWV3PiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogUmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnNTdHJpbmdzLnNjcmVlbi5tb2xlY3VsZXNTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggUlBBTENvbG9ycy5TQ1JFRU5fQkFDS0dST1VORCApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogY3JlYXRlU2NyZWVuSWNvbiggMC4xICksXHJcbiAgICAgIG5hdmlnYXRpb25CYXJJY29uOiBjcmVhdGVTY3JlZW5JY29uKCAwLjUgKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH07XHJcblxyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBNb2xlY3VsZXNNb2RlbCggdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApICksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBNb2xlY3VsZXNTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIHRoZSBTY3JlZW5JY29uIGZvciB0aGlzIHNjcmVlbiwgYW4gSDJPIG1vbGVjdWxlLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlU2NyZWVuSWNvbiggbW9sZWN1bGVMaW5lV2lkdGg6IG51bWJlciApOiBTY3JlZW5JY29uIHtcclxuXHJcbiAgY29uc3QgaWNvbk5vZGUgPSBuZXcgSDJPTm9kZSgge1xyXG4gICAgYXRvbU5vZGVPcHRpb25zOiB7XHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgbGluZVdpZHRoOiBtb2xlY3VsZUxpbmVXaWR0aFxyXG4gICAgfVxyXG4gIH0gKTtcclxuXHJcbiAgcmV0dXJuIG5ldyBTY3JlZW5JY29uKCBpY29uTm9kZSwge1xyXG4gICAgZmlsbDogJ3doaXRlJ1xyXG4gIH0gKTtcclxufVxyXG5cclxucmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMucmVnaXN0ZXIoICdNb2xlY3VsZXNTY3JlZW4nLCBNb2xlY3VsZXNTY3JlZW4gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsT0FBT0MsT0FBTyxNQUFNLDRDQUE0QztBQUVoRSxPQUFPQyxVQUFVLE1BQU0seUJBQXlCO0FBQ2hELE9BQU9DLDZCQUE2QixNQUFNLHFDQUFxQztBQUMvRSxPQUFPQyxvQ0FBb0MsTUFBTSw0Q0FBNEM7QUFDN0YsT0FBT0MsY0FBYyxNQUFNLDJCQUEyQjtBQUN0RCxPQUFPQyxtQkFBbUIsTUFBTSwrQkFBK0I7QUFFL0QsZUFBZSxNQUFNQyxlQUFlLFNBQVNSLE1BQU0sQ0FBc0M7RUFFaEZTLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFUCxvQ0FBb0MsQ0FBQ1EsTUFBTSxDQUFDQyx1QkFBdUI7TUFDekVDLHVCQUF1QixFQUFFLElBQUloQixRQUFRLENBQUVJLFVBQVUsQ0FBQ2EsaUJBQWtCLENBQUM7TUFDckVDLGNBQWMsRUFBRUMsZ0JBQWdCLENBQUUsR0FBSSxDQUFDO01BQ3ZDQyxpQkFBaUIsRUFBRUQsZ0JBQWdCLENBQUUsR0FBSSxDQUFDO01BQzFDUixNQUFNLEVBQUVBO0lBQ1YsQ0FBQztJQUVELEtBQUssQ0FDSCxNQUFNLElBQUlKLGNBQWMsQ0FBRUksTUFBTSxDQUFDVSxZQUFZLENBQUUsT0FBUSxDQUFFLENBQUMsRUFDMURDLEtBQUssSUFBSSxJQUFJZCxtQkFBbUIsQ0FBRWMsS0FBSyxFQUFFWCxNQUFNLENBQUNVLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUN4RVQsT0FDRixDQUFDO0VBQ0g7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTTyxnQkFBZ0JBLENBQUVJLGlCQUF5QixFQUFlO0VBRWpFLE1BQU1DLFFBQVEsR0FBRyxJQUFJckIsT0FBTyxDQUFFO0lBQzVCc0IsZUFBZSxFQUFFO01BQ2ZDLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLFNBQVMsRUFBRUo7SUFDYjtFQUNGLENBQUUsQ0FBQztFQUVILE9BQU8sSUFBSXJCLFVBQVUsQ0FBRXNCLFFBQVEsRUFBRTtJQUMvQkksSUFBSSxFQUFFO0VBQ1IsQ0FBRSxDQUFDO0FBQ0w7QUFFQXZCLDZCQUE2QixDQUFDd0IsUUFBUSxDQUFFLGlCQUFpQixFQUFFcEIsZUFBZ0IsQ0FBQyJ9