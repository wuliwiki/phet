// Copyright 2014-2023, University of Colorado Boulder

/**
 * This is the primary UI component for the 'Sandwiches' and 'Molecules' screens.
 * It displays a reaction as 2 boxes, representing the 'Before' and 'After' states of the reaction.
 * The 'Before' box is on the left, and shows the initial reactants.
 * The 'After' box is on the right, and shows the products and leftovers when the reaction has completed.
 * Below the 'Before' box is a set of spinners for changing the reactant quantities.
 * Below the 'After' box is a set of noneditable quantities for products and leftovers.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HBox, Node } from '../../../../scenery/js/imports.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import ReactantsProductsAndLeftoversStrings from '../../ReactantsProductsAndLeftoversStrings.js';
import RPALColors from '../RPALColors.js';
import RPALConstants from '../RPALConstants.js';
import QuantitiesNode from './QuantitiesNode.js';
import RightArrowNode from './RightArrowNode.js';
import StacksAccordionBox from './StacksAccordionBox.js';
const DEFAULT_CONTENT_SIZE = new Dimension2(100, 100);
const DEFAULT_MIN_ICON_SIZE = new Dimension2(0, 0);
export default class RPALSceneNode extends Node {
  /**
   * @param reaction - the reaction to be displayed
   * @param beforeExpandedProperty - whether the 'Before' box is expanded
   * @param afterExpandedProperty - whether the 'After' box is expanded
   * @param [providedOptions]
   */
  constructor(reaction, beforeExpandedProperty, afterExpandedProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      quantityRange: RPALConstants.QUANTITY_RANGE,
      showSymbols: true,
      beforeTitleProperty: ReactantsProductsAndLeftoversStrings.beforeReactionStringProperty,
      afterTitleProperty: ReactantsProductsAndLeftoversStrings.afterReactionStringProperty,
      contentSize: DEFAULT_CONTENT_SIZE,
      minIconSize: DEFAULT_MIN_ICON_SIZE,
      boxYMargin: 6
    }, providedOptions);

    // vars to improve readability
    const reactants = reaction.reactants;
    const products = reaction.products;
    const leftovers = reaction.leftovers;

    // x-offsets of the substances relative to their boxes
    const beforeXOffsets = QuantitiesNode.createXOffsets(reactants.length, options.contentSize.width);
    const afterXOffsets = QuantitiesNode.createXOffsets(products.length + leftovers.length, options.contentSize.width);
    const stacksAccordionBoxOptions = {
      contentSize: options.contentSize,
      minIconSize: options.minIconSize,
      maxQuantity: options.quantityRange.max,
      boxYMargin: options.boxYMargin
    };

    // 'Before Reaction' accordion box, with stacks of reactants
    const beforeAccordionBox = new StacksAccordionBox(reactants, beforeXOffsets, options.beforeTitleProperty, beforeExpandedProperty, combineOptions({
      tandem: options.tandem.createTandem('beforeAccordionBox')
    }, stacksAccordionBoxOptions));

    // 'After Reaction' accordion box, with stacks of products and leftovers
    const afterAccordionBox = new StacksAccordionBox([...products, ...leftovers], afterXOffsets, options.afterTitleProperty, afterExpandedProperty, combineOptions({
      tandem: options.tandem.createTandem('afterAccordionBox')
    }, stacksAccordionBoxOptions));

    // Arrow between boxes
    const rightArrowNode = new RightArrowNode({
      fill: RPALColors.STATUS_BAR_FILL,
      stroke: null,
      scale: 0.75,
      tandem: options.tandem.createTandem('rightArrowNode')
    });

    // layout of boxes and arrow
    const hBox = new HBox({
      children: [beforeAccordionBox, rightArrowNode, afterAccordionBox],
      spacing: 10,
      excludeInvisibleChildrenFromBounds: false
    });

    // Everything below the boxes
    const quantitiesNode = new QuantitiesNode(reactants, products, leftovers, beforeXOffsets, afterXOffsets, {
      showSymbols: options.showSymbols,
      boxWidth: options.contentSize.width,
      afterBoxXOffset: afterAccordionBox.left - beforeAccordionBox.left,
      minIconSize: options.minIconSize,
      quantityRange: options.quantityRange,
      x: beforeAccordionBox.x,
      top: beforeAccordionBox.bottom + 6,
      tandem: options.tandem.createTandem('quantitiesNode')
    });
    options.children = [hBox, quantitiesNode];
    super(options);
    this.addLinkedElement(reaction, {
      tandem: options.tandem.createTandem(reaction.tandem.name)
    });
    this.disposeBeforeAfterNode = () => {
      beforeAccordionBox.dispose();
      afterAccordionBox.dispose();
      rightArrowNode.dispose();
      quantitiesNode.dispose();
    };
  }
  dispose() {
    this.disposeBeforeAfterNode();
    super.dispose();
  }
}
reactantsProductsAndLeftovers.register('RPALSceneNode', RPALSceneNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,