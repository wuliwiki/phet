// Copyright 2014-2023, University of Colorado Boulder

/**
 * StackNode is a vertical stack of Substances, built from the bottom up. The maximum number of Nodes in the stack
 * are created eagerly. The visibility of Nodes is then adjusted to show the correct quantity of the substance.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Node } from '../../../../scenery/js/imports.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import SubstanceIcon from './SubstanceIcon.js';
import RPALConstants from '../RPALConstants.js';
export default class StackNode extends Node {
  /**
   * @param height - height of the stack
   * @param iconProperty - the icon to display
   * @param quantityProperty - the number of nodes to display
   * @param startCenterY - the centerY of the bottom node in the stack
   * @param deltaY - the vertical spacing between nodes in the stack
   * @param [providedOptions]
   */
  constructor(height, iconProperty, quantityProperty, startCenterY, deltaY, providedOptions) {
    const options = optionize()({}, providedOptions);

    // Eagerly create the maximum number of Nodes in the stack, positioned from the bottom up.
    const icons = [];
    for (let i = 0; i < RPALConstants.QUANTITY_RANGE.max; i++) {
      icons.push(new SubstanceIcon(iconProperty, {
        centerX: 0,
        centerY: startCenterY - i * deltaY
      }));
    }

    // Make the proper number of Nodes visible in the stack, from the bottom up.
    const quantityPropertyObserver = quantity => {
      assert && assert(RPALConstants.QUANTITY_RANGE.contains(quantity));
      for (let i = 0; i < icons.length; i++) {
        icons[i].visible = i < quantity;
      }
    };
    quantityProperty.link(quantityPropertyObserver); // must be unlinked in dispose

    options.children = icons;
    super(options);
    this.disposeStackNode = () => {
      icons.forEach(icon => icon.dispose());
      icons.length = 0;
      if (quantityProperty.hasListener(quantityPropertyObserver)) {
        quantityProperty.unlink(quantityPropertyObserver);
      }
    };
  }
  dispose() {
    this.disposeStackNode();
    super.dispose();
  }
}
reactantsProductsAndLeftovers.register('StackNode', StackNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwicmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMiLCJTdWJzdGFuY2VJY29uIiwiUlBBTENvbnN0YW50cyIsIlN0YWNrTm9kZSIsImNvbnN0cnVjdG9yIiwiaGVpZ2h0IiwiaWNvblByb3BlcnR5IiwicXVhbnRpdHlQcm9wZXJ0eSIsInN0YXJ0Q2VudGVyWSIsImRlbHRhWSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJpY29ucyIsImkiLCJRVUFOVElUWV9SQU5HRSIsIm1heCIsInB1c2giLCJjZW50ZXJYIiwiY2VudGVyWSIsInF1YW50aXR5UHJvcGVydHlPYnNlcnZlciIsInF1YW50aXR5IiwiYXNzZXJ0IiwiY29udGFpbnMiLCJsZW5ndGgiLCJ2aXNpYmxlIiwibGluayIsImNoaWxkcmVuIiwiZGlzcG9zZVN0YWNrTm9kZSIsImZvckVhY2giLCJpY29uIiwiZGlzcG9zZSIsImhhc0xpc3RlbmVyIiwidW5saW5rIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdGFja05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3RhY2tOb2RlIGlzIGEgdmVydGljYWwgc3RhY2sgb2YgU3Vic3RhbmNlcywgYnVpbHQgZnJvbSB0aGUgYm90dG9tIHVwLiBUaGUgbWF4aW11bSBudW1iZXIgb2YgTm9kZXMgaW4gdGhlIHN0YWNrXHJcbiAqIGFyZSBjcmVhdGVkIGVhZ2VybHkuIFRoZSB2aXNpYmlsaXR5IG9mIE5vZGVzIGlzIHRoZW4gYWRqdXN0ZWQgdG8gc2hvdyB0aGUgY29ycmVjdCBxdWFudGl0eSBvZiB0aGUgc3Vic3RhbmNlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zLCBOb2RlVHJhbnNsYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzIGZyb20gJy4uLy4uL3JlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzLmpzJztcclxuaW1wb3J0IFN1YnN0YW5jZUljb24gZnJvbSAnLi9TdWJzdGFuY2VJY29uLmpzJztcclxuaW1wb3J0IFJQQUxDb25zdGFudHMgZnJvbSAnLi4vUlBBTENvbnN0YW50cy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgU3RhY2tOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YWNrTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VTdGFja05vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBoZWlnaHQgLSBoZWlnaHQgb2YgdGhlIHN0YWNrXHJcbiAgICogQHBhcmFtIGljb25Qcm9wZXJ0eSAtIHRoZSBpY29uIHRvIGRpc3BsYXlcclxuICAgKiBAcGFyYW0gcXVhbnRpdHlQcm9wZXJ0eSAtIHRoZSBudW1iZXIgb2Ygbm9kZXMgdG8gZGlzcGxheVxyXG4gICAqIEBwYXJhbSBzdGFydENlbnRlclkgLSB0aGUgY2VudGVyWSBvZiB0aGUgYm90dG9tIG5vZGUgaW4gdGhlIHN0YWNrXHJcbiAgICogQHBhcmFtIGRlbHRhWSAtIHRoZSB2ZXJ0aWNhbCBzcGFjaW5nIGJldHdlZW4gbm9kZXMgaW4gdGhlIHN0YWNrXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBoZWlnaHQ6IG51bWJlciwgaWNvblByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxOb2RlPiwgcXVhbnRpdHlQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPixcclxuICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Q2VudGVyWTogbnVtYmVyLCBkZWx0YVk6IG51bWJlciwgcHJvdmlkZWRPcHRpb25zPzogU3RhY2tOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFN0YWNrTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge30sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEVhZ2VybHkgY3JlYXRlIHRoZSBtYXhpbXVtIG51bWJlciBvZiBOb2RlcyBpbiB0aGUgc3RhY2ssIHBvc2l0aW9uZWQgZnJvbSB0aGUgYm90dG9tIHVwLlxyXG4gICAgY29uc3QgaWNvbnM6IFN1YnN0YW5jZUljb25bXSA9IFtdO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgUlBBTENvbnN0YW50cy5RVUFOVElUWV9SQU5HRS5tYXg7IGkrKyApIHtcclxuICAgICAgaWNvbnMucHVzaCggbmV3IFN1YnN0YW5jZUljb24oIGljb25Qcm9wZXJ0eSwge1xyXG4gICAgICAgIGNlbnRlclg6IDAsXHJcbiAgICAgICAgY2VudGVyWTogc3RhcnRDZW50ZXJZIC0gKCBpICogZGVsdGFZIClcclxuICAgICAgfSApICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFrZSB0aGUgcHJvcGVyIG51bWJlciBvZiBOb2RlcyB2aXNpYmxlIGluIHRoZSBzdGFjaywgZnJvbSB0aGUgYm90dG9tIHVwLlxyXG4gICAgY29uc3QgcXVhbnRpdHlQcm9wZXJ0eU9ic2VydmVyID0gKCBxdWFudGl0eTogbnVtYmVyICkgPT4ge1xyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBSUEFMQ29uc3RhbnRzLlFVQU5USVRZX1JBTkdFLmNvbnRhaW5zKCBxdWFudGl0eSApICk7XHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGljb25zLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICAgIGljb25zWyBpIF0udmlzaWJsZSA9ICggaSA8IHF1YW50aXR5ICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBxdWFudGl0eVByb3BlcnR5LmxpbmsoIHF1YW50aXR5UHJvcGVydHlPYnNlcnZlciApOyAvLyBtdXN0IGJlIHVubGlua2VkIGluIGRpc3Bvc2VcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gaWNvbnM7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VTdGFja05vZGUgPSAoKSA9PiB7XHJcbiAgICAgIGljb25zLmZvckVhY2goIGljb24gPT4gaWNvbi5kaXNwb3NlKCkgKTtcclxuICAgICAgaWNvbnMubGVuZ3RoID0gMDtcclxuICAgICAgaWYgKCBxdWFudGl0eVByb3BlcnR5Lmhhc0xpc3RlbmVyKCBxdWFudGl0eVByb3BlcnR5T2JzZXJ2ZXIgKSApIHtcclxuICAgICAgICBxdWFudGl0eVByb3BlcnR5LnVubGluayggcXVhbnRpdHlQcm9wZXJ0eU9ic2VydmVyICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVN0YWNrTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxucmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMucmVnaXN0ZXIoICdTdGFja05vZGUnLCBTdGFja05vZGUgKTsiXSwibWFwcGlu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