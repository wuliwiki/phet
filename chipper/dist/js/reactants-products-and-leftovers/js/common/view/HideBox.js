// Copyright 2014-2023, University of Colorado Boulder

/**
 * Box that is placed over things that are 'hidden' while playing a challenge.
 * Has a dashed border and a 'closed eye' icon in the center of the box.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Node, Path, Rectangle } from '../../../../scenery/js/imports.js';
import eyeSlashSolidShape from '../../../../sherpa/js/fontawesome-5/eyeSlashSolidShape.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
const DEFAULT_BOX_SIZE = new Dimension2(100, 100);
export default class HideBox extends Node {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      boxSize: DEFAULT_BOX_SIZE,
      iconHeight: 35,
      cornerRadius: 0
    }, providedOptions);

    // dashed box
    const boxNode = new Rectangle(0, 0, options.boxSize.width, options.boxSize.height, {
      cornerRadius: options.cornerRadius,
      fill: 'white',
      stroke: 'rgb( 180, 180, 180 )',
      lineDash: [14, 14]
    });

    // closed-eye icon
    const eyeNode = new Path(eyeSlashSolidShape, {
      fill: 'rgb( 180, 180, 180 )'
    });
    eyeNode.setScaleMagnitude(options.iconHeight / eyeNode.height);
    eyeNode.center = boxNode.center;
    options.children = [boxNode, eyeNode];
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
reactantsProductsAndLeftovers.register('HideBox', HideBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwib3B0aW9uaXplIiwiTm9kZSIsIlBhdGgiLCJSZWN0YW5nbGUiLCJleWVTbGFzaFNvbGlkU2hhcGUiLCJyZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycyIsIkRFRkFVTFRfQk9YX1NJWkUiLCJIaWRlQm94IiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYm94U2l6ZSIsImljb25IZWlnaHQiLCJjb3JuZXJSYWRpdXMiLCJib3hOb2RlIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsIiwic3Ryb2tlIiwibGluZURhc2giLCJleWVOb2RlIiwic2V0U2NhbGVNYWduaXR1ZGUiLCJjZW50ZXIiLCJjaGlsZHJlbiIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkhpZGVCb3gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQm94IHRoYXQgaXMgcGxhY2VkIG92ZXIgdGhpbmdzIHRoYXQgYXJlICdoaWRkZW4nIHdoaWxlIHBsYXlpbmcgYSBjaGFsbGVuZ2UuXHJcbiAqIEhhcyBhIGRhc2hlZCBib3JkZXIgYW5kIGEgJ2Nsb3NlZCBleWUnIGljb24gaW4gdGhlIGNlbnRlciBvZiB0aGUgYm94LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tPcHRpb25hbCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja09wdGlvbmFsLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMsIFBhdGgsIFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBleWVTbGFzaFNvbGlkU2hhcGUgZnJvbSAnLi4vLi4vLi4vLi4vc2hlcnBhL2pzL2ZvbnRhd2Vzb21lLTUvZXllU2xhc2hTb2xpZFNoYXBlLmpzJztcclxuaW1wb3J0IHJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzIGZyb20gJy4uLy4uL3JlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzLmpzJztcclxuXHJcbmNvbnN0IERFRkFVTFRfQk9YX1NJWkUgPSBuZXcgRGltZW5zaW9uMiggMTAwLCAxMDAgKTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgYm94U2l6ZT86IERpbWVuc2lvbjI7XHJcbiAgaWNvbkhlaWdodD86IG51bWJlcjtcclxuICBjb3JuZXJSYWRpdXM/OiBudW1iZXI7XHJcbn07XHJcblxyXG50eXBlIEhpZGVCb3hPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zICYgUGlja09wdGlvbmFsPE5vZGVPcHRpb25zLCAndmlzaWJsZSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlkZUJveCBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IEhpZGVCb3hPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8SGlkZUJveE9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgYm94U2l6ZTogREVGQVVMVF9CT1hfU0laRSxcclxuICAgICAgaWNvbkhlaWdodDogMzUsXHJcbiAgICAgIGNvcm5lclJhZGl1czogMFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gZGFzaGVkIGJveFxyXG4gICAgY29uc3QgYm94Tm9kZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIG9wdGlvbnMuYm94U2l6ZS53aWR0aCwgb3B0aW9ucy5ib3hTaXplLmhlaWdodCwge1xyXG4gICAgICBjb3JuZXJSYWRpdXM6IG9wdGlvbnMuY29ybmVyUmFkaXVzLFxyXG4gICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICBzdHJva2U6ICdyZ2IoIDE4MCwgMTgwLCAxODAgKScsXHJcbiAgICAgIGxpbmVEYXNoOiBbIDE0LCAxNCBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gY2xvc2VkLWV5ZSBpY29uXHJcbiAgICBjb25zdCBleWVOb2RlID0gbmV3IFBhdGgoIGV5ZVNsYXNoU29saWRTaGFwZSwge1xyXG4gICAgICBmaWxsOiAncmdiKCAxODAsIDE4MCwgMTgwICknXHJcbiAgICB9ICk7XHJcbiAgICBleWVOb2RlLnNldFNjYWxlTWFnbml0dWRlKCBvcHRpb25zLmljb25IZWlnaHQgLyBleWVOb2RlLmhlaWdodCApO1xyXG4gICAgZXllTm9kZS5jZW50ZXIgPSBib3hOb2RlLmNlbnRlcjtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBib3hOb2RlLCBleWVOb2RlIF07XHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzLnJlZ2lzdGVyKCAnSGlkZUJveCcsIEhpZGVCb3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsU0FBU0MsSUFBSSxFQUF1Q0MsSUFBSSxFQUFFQyxTQUFTLFFBQVEsbUNBQW1DO0FBQzlHLE9BQU9DLGtCQUFrQixNQUFNLDJEQUEyRDtBQUMxRixPQUFPQyw2QkFBNkIsTUFBTSx3Q0FBd0M7QUFFbEYsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSVAsVUFBVSxDQUFFLEdBQUcsRUFBRSxHQUFJLENBQUM7QUFVbkQsZUFBZSxNQUFNUSxPQUFPLFNBQVNOLElBQUksQ0FBQztFQUVqQ08sV0FBV0EsQ0FBRUMsZUFBZ0MsRUFBRztJQUVyRCxNQUFNQyxPQUFPLEdBQUdWLFNBQVMsQ0FBMkMsQ0FBQyxDQUFFO01BRXJFO01BQ0FXLE9BQU8sRUFBRUwsZ0JBQWdCO01BQ3pCTSxVQUFVLEVBQUUsRUFBRTtNQUNkQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxFQUFFSixlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1LLE9BQU8sR0FBRyxJQUFJWCxTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRU8sT0FBTyxDQUFDQyxPQUFPLENBQUNJLEtBQUssRUFBRUwsT0FBTyxDQUFDQyxPQUFPLENBQUNLLE1BQU0sRUFBRTtNQUNsRkgsWUFBWSxFQUFFSCxPQUFPLENBQUNHLFlBQVk7TUFDbENJLElBQUksRUFBRSxPQUFPO01BQ2JDLE1BQU0sRUFBRSxzQkFBc0I7TUFDOUJDLFFBQVEsRUFBRSxDQUFFLEVBQUUsRUFBRSxFQUFFO0lBQ3BCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLE9BQU8sR0FBRyxJQUFJbEIsSUFBSSxDQUFFRSxrQkFBa0IsRUFBRTtNQUM1Q2EsSUFBSSxFQUFFO0lBQ1IsQ0FBRSxDQUFDO0lBQ0hHLE9BQU8sQ0FBQ0MsaUJBQWlCLENBQUVYLE9BQU8sQ0FBQ0UsVUFBVSxHQUFHUSxPQUFPLENBQUNKLE1BQU8sQ0FBQztJQUNoRUksT0FBTyxDQUFDRSxNQUFNLEdBQUdSLE9BQU8sQ0FBQ1EsTUFBTTtJQUUvQlosT0FBTyxDQUFDYSxRQUFRLEdBQUcsQ0FBRVQsT0FBTyxFQUFFTSxPQUFPLENBQUU7SUFDdkMsS0FBSyxDQUFFVixPQUFRLENBQUM7RUFDbEI7RUFFZ0JjLE9BQU9BLENBQUEsRUFBUztJQUM5QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0lBQ3pGLEtBQUssQ0FBQ0QsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBbkIsNkJBQTZCLENBQUNxQixRQUFRLENBQUUsU0FBUyxFQUFFbkIsT0FBUSxDQUFDIn0=