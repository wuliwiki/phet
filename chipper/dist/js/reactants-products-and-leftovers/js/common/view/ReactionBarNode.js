// Copyright 2014-2023, University of Colorado Boulder

/**
 * ReactionBarNode is the horizontal bar that appears at the top of the screen. It contains radio buttons for selecting
 * a reaction, and displays the selected reaction's equation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import RPALColors from '../RPALColors.js';
import ReactionRadioButtonGroup from './ReactionRadioButtonGroup.js';
const X_MARGIN = 20;
const Y_MARGIN = 10;
export default class ReactionBarNode extends Node {
  constructor(reactionProperty, reactions, createEquationNode, providedOptions) {
    const options = optionize()({}, providedOptions);

    // radio buttons for choosing a reaction
    const radioButtonGroup = new ReactionRadioButtonGroup(reactionProperty, reactions, options.tandem.createTandem('radioButtonGroup'));

    // The horizontal bar, sized to fit the width of the browser window.
    const barNode = new Rectangle(0, 0, 0, 1, {
      fill: RPALColors.STATUS_BAR_FILL
    });
    options.visibleBoundsProperty.link(visibleBounds => {
      barNode.setRect(visibleBounds.left, 0, visibleBounds.width, radioButtonGroup.height + 2 * Y_MARGIN);
    });

    // radio buttons at right, vertically centered in the bar
    radioButtonGroup.boundsProperty.link(bounds => {
      radioButtonGroup.right = options.layoutBounds.right - X_MARGIN;
      radioButtonGroup.centerY = barNode.centerY;
    });
    const reactionEquations = reactions.map(reaction => {
      const visibleProperty = new DerivedProperty([reactionProperty], value => value === reaction);
      const equationNode = createEquationNode(reaction, visibleProperty);

      // center the equation in the space to the left of the radio buttons
      radioButtonGroup.boundsProperty.link(() => {
        const availableWidth = radioButtonGroup.left - X_MARGIN;
        equationNode.centerX = X_MARGIN + availableWidth / 2;
        equationNode.centerY = barNode.centerY;
      });
      return equationNode;
    });
    options.children = [barNode, radioButtonGroup, ...reactionEquations];
    super(options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
reactantsProductsAndLeftovers.register('ReactionBarNode', ReactionBarNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,