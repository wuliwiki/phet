// Copyright 2014-2023, University of Colorado Boulder

/**
 * A chemical reaction is a process that leads to the transformation of one set of
 * chemical substances (reactants) to another (products).
 * The reactants that do not transform to products are referred to herein as leftovers.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import DevStringUtils from '../../dev/DevStringUtils.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import Substance from './Substance.js';

//TODO https://github.com/phetsims/reactants-products-and-leftovers/issues/78 tandem required

export default class Reaction extends PhetioObject {
  // a leftover for each reactant, in the same order as reactants

  constructor(reactants, products, providedOptions) {
    assert && assert(reactants.length > 1, 'a reaction requires at least 2 reactants');
    assert && assert(products.length > 0, 'a reaction requires at least 1 product');
    const options = optionize()({
      nameProperty: null,
      // PhetioObjectOptions
      tandem: Tandem.OPT_OUT,
      //TODO https://github.com/phetsims/reactants-products-and-leftovers/issues/78 tandem required
      phetioState: false,
      phetioType: Reaction.ReactionIO
    }, providedOptions);
    super(options);
    this.reactants = reactants;
    this.products = products;
    this.nameProperty = options.nameProperty;

    // Create a leftover for each reactant, in the same order.
    this.leftovers = [];
    this.reactants.forEach(reactant => {
      this.leftovers.push(new Substance(1, reactant.symbol, reactant.iconProperty.value, 0));
    });
    const quantityListener = this.updateQuantities.bind(this);
    this.reactants.forEach(reactant => reactant.quantityProperty.link(quantityListener));
  }
  reset() {
    this.reactants.forEach(reactant => reactant.reset());
    this.products.forEach(product => product.reset());
    this.leftovers.forEach(leftover => leftover.reset());
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  toString() {
    return DevStringUtils.equationString(this);
  }

  /**
   * Formula is a reaction if more than one coefficient is non-zero, or if any coefficient is > 1.
   */
  isReaction() {
    let greaterThanZero = 0;
    let greaterThanOne = 0;
    this.reactants.forEach(reactant => {
      if (reactant.coefficientProperty.value > 0) {
        greaterThanZero++;
      }
      if (reactant.coefficientProperty.value > 1) {
        greaterThanOne++;
      }
    });
    return greaterThanZero > 1 || greaterThanOne > 0;
  }

  /*
   * Updates the quantities of products and leftovers.
   */
  updateQuantities() {
    const numberOfReactions = this.getNumberOfReactions();
    this.products.forEach(product => {
      product.quantityProperty.value = numberOfReactions * product.coefficientProperty.value;
    });
    // reactants and leftovers array have identical orders
    for (let i = 0; i < this.reactants.length; i++) {
      this.leftovers[i].quantityProperty.value = this.reactants[i].quantityProperty.value - numberOfReactions * this.reactants[i].coefficientProperty.value;
    }
  }

  /**
   * Gets the number of reactions we have, based on the coefficients and reactant quantities.
   * For each reactant, we divide its quantity by its coefficient.
   * The smallest such value determines the number of reactions N that will occur.
   */
  getNumberOfReactions() {
    let numberOfReactions = 0;
    if (this.isReaction()) {
      const possibleValues = [];
      this.reactants.forEach(reactant => {
        if (reactant.coefficientProperty.value !== 0) {
          possibleValues.push(Math.floor(reactant.quantityProperty.value / reactant.coefficientProperty.value));
        }
      });
      assert && assert(possibleValues.length > 0);
      possibleValues.sort();
      numberOfReactions = possibleValues[0];
    }
    return numberOfReactions;
  }
  static ReactionIO = new IOType('ReactionIO', {
    valueType: Reaction,
    supertype: ReferenceIO(IOType.ObjectIO)
  });
}
reactantsProductsAndLeftovers.register('Reaction', Reaction);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,