// Copyright 2014-2023, University of Colorado Boulder

/**
 * Model for the 'Sandwiches' screen.
 *
 * For the purposes of the 'sandwiches' analogy:
 * - sandwich recipe == reaction
 * - ingredients == reactants
 * - sandwich == product
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import RPALBaseModel from '../../common/model/RPALBaseModel.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import ReactantsProductsAndLeftoversStrings from '../../ReactantsProductsAndLeftoversStrings.js';
import SandwichRecipe from './SandwichRecipe.js';
export default class SandwichesModel extends RPALBaseModel {
  constructor(tandem) {
    const sandwichesTandem = tandem.createTandem('sandwiches');
    const reactions = [
    // sandwich recipe choices, numeric args are: bread, meat, cheese
    new SandwichRecipe(2, 0, 1, {
      nameProperty: ReactantsProductsAndLeftoversStrings.cheeseStringProperty,
      tandem: sandwichesTandem.createTandem('cheeseSandwich')
    }), new SandwichRecipe(2, 1, 1, {
      nameProperty: ReactantsProductsAndLeftoversStrings.meatAndCheeseStringProperty,
      tandem: sandwichesTandem.createTandem('meatAndCheeseSandwich')
    }),
    // for Custom sandwich, the user can change coefficients of the ingredients
    new SandwichRecipe(0, 0, 0, {
      coefficientsMutable: true,
      nameProperty: ReactantsProductsAndLeftoversStrings.customStringProperty,
      tandem: sandwichesTandem.createTandem('customSandwich')
    })];
    super(reactions, tandem);
  }
}
reactantsProductsAndLeftovers.register('SandwichesModel', SandwichesModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSUEFMQmFzZU1vZGVsIiwicmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMiLCJSZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVyc1N0cmluZ3MiLCJTYW5kd2ljaFJlY2lwZSIsIlNhbmR3aWNoZXNNb2RlbCIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwic2FuZHdpY2hlc1RhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInJlYWN0aW9ucyIsIm5hbWVQcm9wZXJ0eSIsImNoZWVzZVN0cmluZ1Byb3BlcnR5IiwibWVhdEFuZENoZWVzZVN0cmluZ1Byb3BlcnR5IiwiY29lZmZpY2llbnRzTXV0YWJsZSIsImN1c3RvbVN0cmluZ1Byb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTYW5kd2ljaGVzTW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIHRoZSAnU2FuZHdpY2hlcycgc2NyZWVuLlxyXG4gKlxyXG4gKiBGb3IgdGhlIHB1cnBvc2VzIG9mIHRoZSAnc2FuZHdpY2hlcycgYW5hbG9neTpcclxuICogLSBzYW5kd2ljaCByZWNpcGUgPT0gcmVhY3Rpb25cclxuICogLSBpbmdyZWRpZW50cyA9PSByZWFjdGFudHNcclxuICogLSBzYW5kd2ljaCA9PSBwcm9kdWN0XHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFJQQUxCYXNlTW9kZWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1JQQUxCYXNlTW9kZWwuanMnO1xyXG5pbXBvcnQgcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMgZnJvbSAnLi4vLi4vcmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnMuanMnO1xyXG5pbXBvcnQgUmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnNTdHJpbmdzIGZyb20gJy4uLy4uL1JlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBTYW5kd2ljaFJlY2lwZSBmcm9tICcuL1NhbmR3aWNoUmVjaXBlLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNhbmR3aWNoZXNNb2RlbCBleHRlbmRzIFJQQUxCYXNlTW9kZWw8U2FuZHdpY2hSZWNpcGU+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBzYW5kd2ljaGVzVGFuZGVtID0gdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NhbmR3aWNoZXMnICk7XHJcblxyXG4gICAgY29uc3QgcmVhY3Rpb25zID0gW1xyXG5cclxuICAgICAgLy8gc2FuZHdpY2ggcmVjaXBlIGNob2ljZXMsIG51bWVyaWMgYXJncyBhcmU6IGJyZWFkLCBtZWF0LCBjaGVlc2VcclxuICAgICAgbmV3IFNhbmR3aWNoUmVjaXBlKCAyLCAwLCAxLCB7XHJcbiAgICAgICAgbmFtZVByb3BlcnR5OiBSZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVyc1N0cmluZ3MuY2hlZXNlU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgdGFuZGVtOiBzYW5kd2ljaGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NoZWVzZVNhbmR3aWNoJyApXHJcbiAgICAgIH0gKSxcclxuICAgICAgbmV3IFNhbmR3aWNoUmVjaXBlKCAyLCAxLCAxLCB7XHJcbiAgICAgICAgbmFtZVByb3BlcnR5OiBSZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVyc1N0cmluZ3MubWVhdEFuZENoZWVzZVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgIHRhbmRlbTogc2FuZHdpY2hlc1RhbmRlbS5jcmVhdGVUYW5kZW0oICdtZWF0QW5kQ2hlZXNlU2FuZHdpY2gnIClcclxuICAgICAgfSApLFxyXG5cclxuICAgICAgLy8gZm9yIEN1c3RvbSBzYW5kd2ljaCwgdGhlIHVzZXIgY2FuIGNoYW5nZSBjb2VmZmljaWVudHMgb2YgdGhlIGluZ3JlZGllbnRzXHJcbiAgICAgIG5ldyBTYW5kd2ljaFJlY2lwZSggMCwgMCwgMCwge1xyXG4gICAgICAgIGNvZWZmaWNpZW50c011dGFibGU6IHRydWUsXHJcbiAgICAgICAgbmFtZVByb3BlcnR5OiBSZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVyc1N0cmluZ3MuY3VzdG9tU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgdGFuZGVtOiBzYW5kd2ljaGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2N1c3RvbVNhbmR3aWNoJyApXHJcbiAgICAgIH0gKVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggcmVhY3Rpb25zLCB0YW5kZW0gKTtcclxuICB9XHJcbn1cclxuXHJcbnJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzLnJlZ2lzdGVyKCAnU2FuZHdpY2hlc01vZGVsJywgU2FuZHdpY2hlc01vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxhQUFhLE1BQU0scUNBQXFDO0FBQy9ELE9BQU9DLDZCQUE2QixNQUFNLHdDQUF3QztBQUNsRixPQUFPQyxvQ0FBb0MsTUFBTSwrQ0FBK0M7QUFDaEcsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjtBQUVoRCxlQUFlLE1BQU1DLGVBQWUsU0FBU0osYUFBYSxDQUFpQjtFQUVsRUssV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBRW5DLE1BQU1DLGdCQUFnQixHQUFHRCxNQUFNLENBQUNFLFlBQVksQ0FBRSxZQUFhLENBQUM7SUFFNUQsTUFBTUMsU0FBUyxHQUFHO0lBRWhCO0lBQ0EsSUFBSU4sY0FBYyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO01BQzNCTyxZQUFZLEVBQUVSLG9DQUFvQyxDQUFDUyxvQkFBb0I7TUFDdkVMLE1BQU0sRUFBRUMsZ0JBQWdCLENBQUNDLFlBQVksQ0FBRSxnQkFBaUI7SUFDMUQsQ0FBRSxDQUFDLEVBQ0gsSUFBSUwsY0FBYyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO01BQzNCTyxZQUFZLEVBQUVSLG9DQUFvQyxDQUFDVSwyQkFBMkI7TUFDOUVOLE1BQU0sRUFBRUMsZ0JBQWdCLENBQUNDLFlBQVksQ0FBRSx1QkFBd0I7SUFDakUsQ0FBRSxDQUFDO0lBRUg7SUFDQSxJQUFJTCxjQUFjLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7TUFDM0JVLG1CQUFtQixFQUFFLElBQUk7TUFDekJILFlBQVksRUFBRVIsb0NBQW9DLENBQUNZLG9CQUFvQjtNQUN2RVIsTUFBTSxFQUFFQyxnQkFBZ0IsQ0FBQ0MsWUFBWSxDQUFFLGdCQUFpQjtJQUMxRCxDQUFFLENBQUMsQ0FDSjtJQUVELEtBQUssQ0FBRUMsU0FBUyxFQUFFSCxNQUFPLENBQUM7RUFDNUI7QUFDRjtBQUVBTCw2QkFBNkIsQ0FBQ2MsUUFBUSxDQUFFLGlCQUFpQixFQUFFWCxlQUFnQixDQUFDIn0=