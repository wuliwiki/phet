// Copyright 2014-2023, University of Colorado Boulder

/**
 * SandwichesScreenView is the view for the 'Sandwiches' screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import RPALConstants from '../../common/RPALConstants.js';
import RPALSceneNode from '../../common/view/RPALSceneNode.js';
import RPALScreenView from '../../common/view/RPALScreenView.js';
import reactantsProductsAndLeftovers from '../../reactantsProductsAndLeftovers.js';
import ReactantsProductsAndLeftoversStrings from '../../ReactantsProductsAndLeftoversStrings.js';
import SandwichesEquationNode from './SandwichesEquationNode.js';
import SandwichNode from './SandwichNode.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class SandwichesScreenView extends RPALScreenView {
  constructor(model, tandem) {
    // compute the size of the largest sandwich, used for view layout
    const maxCoefficient = RPALConstants.SANDWICH_COEFFICIENT_RANGE.max;
    const maxSandwich = new SandwichNode(maxCoefficient, maxCoefficient, maxCoefficient);
    const maxSandwichSize = new Dimension2(maxSandwich.width, maxSandwich.height);

    // Creates an equation for a specified reaction.
    const createEquationNode = (reaction, visibleProperty) => new SandwichesEquationNode(reaction, maxSandwichSize, visibleProperty);

    // Creates the user interface for a specified reaction.
    const createSceneNode = (reaction, beforeExpandedProperty, afterExpandedProperty, options) => new RPALSceneNode(reaction, beforeExpandedProperty, afterExpandedProperty, combineOptions({
      contentSize: RPALConstants.SANDWICHES_BEFORE_AFTER_BOX_SIZE,
      showSymbols: false,
      beforeTitleProperty: ReactantsProductsAndLeftoversStrings.beforeSandwichStringProperty,
      afterTitleProperty: ReactantsProductsAndLeftoversStrings.afterSandwichStringProperty,
      minIconSize: maxSandwichSize,
      boxYMargin: 8 // large enough to accommodate the biggest sandwich
    }, options));
    super(model, createEquationNode, createSceneNode, tandem);
  }
}
reactantsProductsAndLeftovers.register('SandwichesScreenView', SandwichesScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiUlBBTENvbnN0YW50cyIsIlJQQUxTY2VuZU5vZGUiLCJSUEFMU2NyZWVuVmlldyIsInJlYWN0YW50c1Byb2R1Y3RzQW5kTGVmdG92ZXJzIiwiUmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnNTdHJpbmdzIiwiU2FuZHdpY2hlc0VxdWF0aW9uTm9kZSIsIlNhbmR3aWNoTm9kZSIsImNvbWJpbmVPcHRpb25zIiwiU2FuZHdpY2hlc1NjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidGFuZGVtIiwibWF4Q29lZmZpY2llbnQiLCJTQU5EV0lDSF9DT0VGRklDSUVOVF9SQU5HRSIsIm1heCIsIm1heFNhbmR3aWNoIiwibWF4U2FuZHdpY2hTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVFcXVhdGlvbk5vZGUiLCJyZWFjdGlvbiIsInZpc2libGVQcm9wZXJ0eSIsImNyZWF0ZVNjZW5lTm9kZSIsImJlZm9yZUV4cGFuZGVkUHJvcGVydHkiLCJhZnRlckV4cGFuZGVkUHJvcGVydHkiLCJvcHRpb25zIiwiY29udGVudFNpemUiLCJTQU5EV0lDSEVTX0JFRk9SRV9BRlRFUl9CT1hfU0laRSIsInNob3dTeW1ib2xzIiwiYmVmb3JlVGl0bGVQcm9wZXJ0eSIsImJlZm9yZVNhbmR3aWNoU3RyaW5nUHJvcGVydHkiLCJhZnRlclRpdGxlUHJvcGVydHkiLCJhZnRlclNhbmR3aWNoU3RyaW5nUHJvcGVydHkiLCJtaW5JY29uU2l6ZSIsImJveFlNYXJnaW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNhbmR3aWNoZXNTY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNhbmR3aWNoZXNTY3JlZW5WaWV3IGlzIHRoZSB2aWV3IGZvciB0aGUgJ1NhbmR3aWNoZXMnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBSUEFMQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9SUEFMQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFJQQUxTY2VuZU5vZGUsIHsgQmVmb3JlQWZ0ZXJOb2RlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1JQQUxTY2VuZU5vZGUuanMnO1xyXG5pbXBvcnQgUlBBTFNjcmVlblZpZXcsIHsgQ3JlYXRlU2NlbmVOb2RlRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9SUEFMU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCByZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycyBmcm9tICcuLi8uLi9yZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycy5qcyc7XHJcbmltcG9ydCBSZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVyc1N0cmluZ3MgZnJvbSAnLi4vLi4vUmVhY3RhbnRzUHJvZHVjdHNBbmRMZWZ0b3ZlcnNTdHJpbmdzLmpzJztcclxuaW1wb3J0IFNhbmR3aWNoZXNNb2RlbCBmcm9tICcuLi9tb2RlbC9TYW5kd2ljaGVzTW9kZWwuanMnO1xyXG5pbXBvcnQgU2FuZHdpY2hlc0VxdWF0aW9uTm9kZSBmcm9tICcuL1NhbmR3aWNoZXNFcXVhdGlvbk5vZGUuanMnO1xyXG5pbXBvcnQgU2FuZHdpY2hOb2RlIGZyb20gJy4vU2FuZHdpY2hOb2RlLmpzJztcclxuaW1wb3J0IHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgQ3JlYXRlRXF1YXRpb25Ob2RlRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9SZWFjdGlvbkJhck5vZGUuanMnO1xyXG5pbXBvcnQgU2FuZHdpY2hSZWNpcGUgZnJvbSAnLi4vbW9kZWwvU2FuZHdpY2hSZWNpcGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2FuZHdpY2hlc1NjcmVlblZpZXcgZXh0ZW5kcyBSUEFMU2NyZWVuVmlldzxTYW5kd2ljaFJlY2lwZT4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBTYW5kd2ljaGVzTW9kZWwsIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIC8vIGNvbXB1dGUgdGhlIHNpemUgb2YgdGhlIGxhcmdlc3Qgc2FuZHdpY2gsIHVzZWQgZm9yIHZpZXcgbGF5b3V0XHJcbiAgICBjb25zdCBtYXhDb2VmZmljaWVudCA9IFJQQUxDb25zdGFudHMuU0FORFdJQ0hfQ09FRkZJQ0lFTlRfUkFOR0UubWF4O1xyXG4gICAgY29uc3QgbWF4U2FuZHdpY2ggPSBuZXcgU2FuZHdpY2hOb2RlKCBtYXhDb2VmZmljaWVudCwgbWF4Q29lZmZpY2llbnQsIG1heENvZWZmaWNpZW50ICk7XHJcbiAgICBjb25zdCBtYXhTYW5kd2ljaFNpemUgPSBuZXcgRGltZW5zaW9uMiggbWF4U2FuZHdpY2gud2lkdGgsIG1heFNhbmR3aWNoLmhlaWdodCApO1xyXG5cclxuICAgIC8vIENyZWF0ZXMgYW4gZXF1YXRpb24gZm9yIGEgc3BlY2lmaWVkIHJlYWN0aW9uLlxyXG4gICAgY29uc3QgY3JlYXRlRXF1YXRpb25Ob2RlOiBDcmVhdGVFcXVhdGlvbk5vZGVGdW5jdGlvbjxTYW5kd2ljaFJlY2lwZT4gPVxyXG4gICAgICAoIHJlYWN0aW9uLCB2aXNpYmxlUHJvcGVydHkgKSA9PiBuZXcgU2FuZHdpY2hlc0VxdWF0aW9uTm9kZSggcmVhY3Rpb24sIG1heFNhbmR3aWNoU2l6ZSwgdmlzaWJsZVByb3BlcnR5ICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlcyB0aGUgdXNlciBpbnRlcmZhY2UgZm9yIGEgc3BlY2lmaWVkIHJlYWN0aW9uLlxyXG4gICAgY29uc3QgY3JlYXRlU2NlbmVOb2RlOiBDcmVhdGVTY2VuZU5vZGVGdW5jdGlvbiA9XHJcbiAgICAgICggcmVhY3Rpb24sIGJlZm9yZUV4cGFuZGVkUHJvcGVydHksIGFmdGVyRXhwYW5kZWRQcm9wZXJ0eSwgb3B0aW9ucyApID0+XHJcbiAgICAgICAgbmV3IFJQQUxTY2VuZU5vZGUoIHJlYWN0aW9uLCBiZWZvcmVFeHBhbmRlZFByb3BlcnR5LCBhZnRlckV4cGFuZGVkUHJvcGVydHksXHJcbiAgICAgICAgICBjb21iaW5lT3B0aW9uczxCZWZvcmVBZnRlck5vZGVPcHRpb25zPigge1xyXG4gICAgICAgICAgICBjb250ZW50U2l6ZTogUlBBTENvbnN0YW50cy5TQU5EV0lDSEVTX0JFRk9SRV9BRlRFUl9CT1hfU0laRSxcclxuICAgICAgICAgICAgc2hvd1N5bWJvbHM6IGZhbHNlLFxyXG4gICAgICAgICAgICBiZWZvcmVUaXRsZVByb3BlcnR5OiBSZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVyc1N0cmluZ3MuYmVmb3JlU2FuZHdpY2hTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgICAgICAgYWZ0ZXJUaXRsZVByb3BlcnR5OiBSZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVyc1N0cmluZ3MuYWZ0ZXJTYW5kd2ljaFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgICAgICBtaW5JY29uU2l6ZTogbWF4U2FuZHdpY2hTaXplLFxyXG4gICAgICAgICAgICBib3hZTWFyZ2luOiA4IC8vIGxhcmdlIGVub3VnaCB0byBhY2NvbW1vZGF0ZSB0aGUgYmlnZ2VzdCBzYW5kd2ljaFxyXG4gICAgICAgICAgfSwgb3B0aW9ucyApICk7XHJcblxyXG4gICAgc3VwZXIoIG1vZGVsLCBjcmVhdGVFcXVhdGlvbk5vZGUsIGNyZWF0ZVNjZW5lTm9kZSwgdGFuZGVtICk7XHJcbiAgfVxyXG59XHJcblxyXG5yZWFjdGFudHNQcm9kdWN0c0FuZExlZnRvdmVycy5yZWdpc3RlciggJ1NhbmR3aWNoZXNTY3JlZW5WaWV3JywgU2FuZHdpY2hlc1NjcmVlblZpZXcgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGtDQUFrQztBQUV6RCxPQUFPQyxhQUFhLE1BQU0sK0JBQStCO0FBQ3pELE9BQU9DLGFBQWEsTUFBa0Msb0NBQW9DO0FBQzFGLE9BQU9DLGNBQWMsTUFBbUMscUNBQXFDO0FBQzdGLE9BQU9DLDZCQUE2QixNQUFNLHdDQUF3QztBQUNsRixPQUFPQyxvQ0FBb0MsTUFBTSwrQ0FBK0M7QUFFaEcsT0FBT0Msc0JBQXNCLE1BQU0sNkJBQTZCO0FBQ2hFLE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFDNUMsU0FBU0MsY0FBYyxRQUFRLHVDQUF1QztBQUl0RSxlQUFlLE1BQU1DLG9CQUFvQixTQUFTTixjQUFjLENBQWlCO0VBRXhFTyxXQUFXQSxDQUFFQyxLQUFzQixFQUFFQyxNQUFjLEVBQUc7SUFFM0Q7SUFDQSxNQUFNQyxjQUFjLEdBQUdaLGFBQWEsQ0FBQ2EsMEJBQTBCLENBQUNDLEdBQUc7SUFDbkUsTUFBTUMsV0FBVyxHQUFHLElBQUlULFlBQVksQ0FBRU0sY0FBYyxFQUFFQSxjQUFjLEVBQUVBLGNBQWUsQ0FBQztJQUN0RixNQUFNSSxlQUFlLEdBQUcsSUFBSWpCLFVBQVUsQ0FBRWdCLFdBQVcsQ0FBQ0UsS0FBSyxFQUFFRixXQUFXLENBQUNHLE1BQU8sQ0FBQzs7SUFFL0U7SUFDQSxNQUFNQyxrQkFBOEQsR0FDbEVBLENBQUVDLFFBQVEsRUFBRUMsZUFBZSxLQUFNLElBQUloQixzQkFBc0IsQ0FBRWUsUUFBUSxFQUFFSixlQUFlLEVBQUVLLGVBQWdCLENBQUM7O0lBRTNHO0lBQ0EsTUFBTUMsZUFBd0MsR0FDNUNBLENBQUVGLFFBQVEsRUFBRUcsc0JBQXNCLEVBQUVDLHFCQUFxQixFQUFFQyxPQUFPLEtBQ2hFLElBQUl4QixhQUFhLENBQUVtQixRQUFRLEVBQUVHLHNCQUFzQixFQUFFQyxxQkFBcUIsRUFDeEVqQixjQUFjLENBQTBCO01BQ3RDbUIsV0FBVyxFQUFFMUIsYUFBYSxDQUFDMkIsZ0NBQWdDO01BQzNEQyxXQUFXLEVBQUUsS0FBSztNQUNsQkMsbUJBQW1CLEVBQUV6QixvQ0FBb0MsQ0FBQzBCLDRCQUE0QjtNQUN0RkMsa0JBQWtCLEVBQUUzQixvQ0FBb0MsQ0FBQzRCLDJCQUEyQjtNQUNwRkMsV0FBVyxFQUFFakIsZUFBZTtNQUM1QmtCLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDaEIsQ0FBQyxFQUFFVCxPQUFRLENBQUUsQ0FBQztJQUVwQixLQUFLLENBQUVmLEtBQUssRUFBRVMsa0JBQWtCLEVBQUVHLGVBQWUsRUFBRVgsTUFBTyxDQUFDO0VBQzdEO0FBQ0Y7QUFFQVIsNkJBQTZCLENBQUNnQyxRQUFRLENBQUUsc0JBQXNCLEVBQUUzQixvQkFBcUIsQ0FBQyJ9