// Copyright 2019-2023, University of Colorado Boulder

/**
 * Explore2DVectorCreatorPanel is a specialization of VectorCreatorPanel (the vector 'toolbox') for the 'Explore 2D' screen.
 *
 * @author Brandon Li
 */

import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import SceneNode from '../../common/view/SceneNode.js';
import VectorCreatorPanel from '../../common/view/VectorCreatorPanel.js';
import VectorCreatorPanelSlot from '../../common/view/VectorCreatorPanelSlot.js';
import vectorAddition from '../../vectorAddition.js';
import Explore2DGraph from '../model/Explore2DGraph.js';

// constants

// initial values for vectors in Cartesian scene, see https://github.com/phetsims/vector-addition/issues/227
const CARTESIAN_INITIAL_VECTOR_COMPONENTS = [new Vector2(6, 8),
// a
new Vector2(8, 6),
// b
new Vector2(0, -10) // c
];

// initial values for vectors in Polar scene, see https://github.com/phetsims/vector-addition/issues/227
const POLAR_INITIAL_VECTOR_COMPONENTS = [Vector2.createPolar(8, Utils.toRadians(30)),
// d
Vector2.createPolar(8, Utils.toRadians(60)),
// e
Vector2.createPolar(8, Utils.toRadians(-90)) // f
];

export default class Explore2DVectorCreatorPanel extends VectorCreatorPanel {
  /**
   * @param {Explore2DGraph} graph
   * @param {SceneNode} sceneNode
   * @param {string[]} symbols - the symbols corresponding to each slot
   * @param {Object} [options]
   */
  constructor(graph, sceneNode, symbols, options) {
    assert && assert(graph instanceof Explore2DGraph, `invalid graph: ${graph}`);
    assert && assert(sceneNode instanceof SceneNode, `invalid sceneNode: ${sceneNode}`);
    assert && assert(_.every(symbols, symbol => typeof symbol === 'string'), `invalid symbols: ${symbols}`);
    assert && assert(!options || Object.getPrototypeOf(options) === Object.prototype, `Extra prototype on options: ${options}`);

    // Get the initial vector components, they are different for each symbol.
    // See https://github.com/phetsims/vector-addition/issues/227
    const initialVectorComponents = graph.coordinateSnapMode === CoordinateSnapModes.CARTESIAN ? CARTESIAN_INITIAL_VECTOR_COMPONENTS : POLAR_INITIAL_VECTOR_COMPONENTS;
    assert && assert(initialVectorComponents.length === symbols.length, 'components are required for each symbol');

    // Create a slot for each symbol
    const panelSlots = [];
    for (let i = 0; i < symbols.length; i++) {
      panelSlots.push(new VectorCreatorPanelSlot(graph, graph.vectorSet, sceneNode, initialVectorComponents[i], {
        symbol: symbols[i],
        iconArrowMagnitude: 35,
        iconVectorComponents: new Vector2(1, 1) // all of the icons in the slots look the same, see #227
      }));
    }

    super(panelSlots, options);
  }
}
vectorAddition.register('Explore2DVectorCreatorPanel', Explore2DVectorCreatorPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJDb29yZGluYXRlU25hcE1vZGVzIiwiU2NlbmVOb2RlIiwiVmVjdG9yQ3JlYXRvclBhbmVsIiwiVmVjdG9yQ3JlYXRvclBhbmVsU2xvdCIsInZlY3RvckFkZGl0aW9uIiwiRXhwbG9yZTJER3JhcGgiLCJDQVJURVNJQU5fSU5JVElBTF9WRUNUT1JfQ09NUE9ORU5UUyIsIlBPTEFSX0lOSVRJQUxfVkVDVE9SX0NPTVBPTkVOVFMiLCJjcmVhdGVQb2xhciIsInRvUmFkaWFucyIsIkV4cGxvcmUyRFZlY3RvckNyZWF0b3JQYW5lbCIsImNvbnN0cnVjdG9yIiwiZ3JhcGgiLCJzY2VuZU5vZGUiLCJzeW1ib2xzIiwib3B0aW9ucyIsImFzc2VydCIsIl8iLCJldmVyeSIsInN5bWJvbCIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiaW5pdGlhbFZlY3RvckNvbXBvbmVudHMiLCJjb29yZGluYXRlU25hcE1vZGUiLCJDQVJURVNJQU4iLCJsZW5ndGgiLCJwYW5lbFNsb3RzIiwiaSIsInB1c2giLCJ2ZWN0b3JTZXQiLCJpY29uQXJyb3dNYWduaXR1ZGUiLCJpY29uVmVjdG9yQ29tcG9uZW50cyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwbG9yZTJEVmVjdG9yQ3JlYXRvclBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEV4cGxvcmUyRFZlY3RvckNyZWF0b3JQYW5lbCBpcyBhIHNwZWNpYWxpemF0aW9uIG9mIFZlY3RvckNyZWF0b3JQYW5lbCAodGhlIHZlY3RvciAndG9vbGJveCcpIGZvciB0aGUgJ0V4cGxvcmUgMkQnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IENvb3JkaW5hdGVTbmFwTW9kZXMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5pbXBvcnQgU2NlbmVOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1NjZW5lTm9kZS5qcyc7XHJcbmltcG9ydCBWZWN0b3JDcmVhdG9yUGFuZWwgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsU2xvdC5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBFeHBsb3JlMkRHcmFwaCBmcm9tICcuLi9tb2RlbC9FeHBsb3JlMkRHcmFwaC5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuXHJcbi8vIGluaXRpYWwgdmFsdWVzIGZvciB2ZWN0b3JzIGluIENhcnRlc2lhbiBzY2VuZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzIyN1xyXG5jb25zdCBDQVJURVNJQU5fSU5JVElBTF9WRUNUT1JfQ09NUE9ORU5UUyA9IFtcclxuICBuZXcgVmVjdG9yMiggNiwgOCApLCAvLyBhXHJcbiAgbmV3IFZlY3RvcjIoIDgsIDYgKSwgLy8gYlxyXG4gIG5ldyBWZWN0b3IyKCAwLCAtMTAgKSAvLyBjXHJcbl07XHJcblxyXG4vLyBpbml0aWFsIHZhbHVlcyBmb3IgdmVjdG9ycyBpbiBQb2xhciBzY2VuZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzIyN1xyXG5jb25zdCBQT0xBUl9JTklUSUFMX1ZFQ1RPUl9DT01QT05FTlRTID0gW1xyXG4gIFZlY3RvcjIuY3JlYXRlUG9sYXIoIDgsIFV0aWxzLnRvUmFkaWFucyggMzAgKSApLCAvLyBkXHJcbiAgVmVjdG9yMi5jcmVhdGVQb2xhciggOCwgVXRpbHMudG9SYWRpYW5zKCA2MCApICksIC8vIGVcclxuICBWZWN0b3IyLmNyZWF0ZVBvbGFyKCA4LCBVdGlscy50b1JhZGlhbnMoIC05MCApICkgLy8gZlxyXG5dO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwbG9yZTJEVmVjdG9yQ3JlYXRvclBhbmVsIGV4dGVuZHMgVmVjdG9yQ3JlYXRvclBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFeHBsb3JlMkRHcmFwaH0gZ3JhcGhcclxuICAgKiBAcGFyYW0ge1NjZW5lTm9kZX0gc2NlbmVOb2RlXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gc3ltYm9scyAtIHRoZSBzeW1ib2xzIGNvcnJlc3BvbmRpbmcgdG8gZWFjaCBzbG90XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBncmFwaCwgc2NlbmVOb2RlLCBzeW1ib2xzLCBvcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGdyYXBoIGluc3RhbmNlb2YgRXhwbG9yZTJER3JhcGgsIGBpbnZhbGlkIGdyYXBoOiAke2dyYXBofWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHNjZW5lTm9kZSBpbnN0YW5jZW9mIFNjZW5lTm9kZSwgYGludmFsaWQgc2NlbmVOb2RlOiAke3NjZW5lTm9kZX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBfLmV2ZXJ5KCBzeW1ib2xzLCBzeW1ib2wgPT4gdHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycgKSwgYGludmFsaWQgc3ltYm9sczogJHtzeW1ib2xzfWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZiggb3B0aW9ucyApID09PSBPYmplY3QucHJvdG90eXBlLCBgRXh0cmEgcHJvdG90eXBlIG9uIG9wdGlvbnM6ICR7b3B0aW9uc31gICk7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBpbml0aWFsIHZlY3RvciBjb21wb25lbnRzLCB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGVhY2ggc3ltYm9sLlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzIyN1xyXG4gICAgY29uc3QgaW5pdGlhbFZlY3RvckNvbXBvbmVudHMgPSAoIGdyYXBoLmNvb3JkaW5hdGVTbmFwTW9kZSA9PT0gQ29vcmRpbmF0ZVNuYXBNb2Rlcy5DQVJURVNJQU4gKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENBUlRFU0lBTl9JTklUSUFMX1ZFQ1RPUl9DT01QT05FTlRTIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUE9MQVJfSU5JVElBTF9WRUNUT1JfQ09NUE9ORU5UUztcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGluaXRpYWxWZWN0b3JDb21wb25lbnRzLmxlbmd0aCA9PT0gc3ltYm9scy5sZW5ndGgsICdjb21wb25lbnRzIGFyZSByZXF1aXJlZCBmb3IgZWFjaCBzeW1ib2wnICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgc2xvdCBmb3IgZWFjaCBzeW1ib2xcclxuICAgIGNvbnN0IHBhbmVsU2xvdHMgPSBbXTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIHBhbmVsU2xvdHMucHVzaCggbmV3IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QoIGdyYXBoLCBncmFwaC52ZWN0b3JTZXQsIHNjZW5lTm9kZSwgaW5pdGlhbFZlY3RvckNvbXBvbmVudHNbIGkgXSwge1xyXG4gICAgICAgIHN5bWJvbDogc3ltYm9sc1sgaSBdLFxyXG4gICAgICAgIGljb25BcnJvd01hZ25pdHVkZTogMzUsXHJcbiAgICAgICAgaWNvblZlY3RvckNvbXBvbmVudHM6IG5ldyBWZWN0b3IyKCAxLCAxICkgLy8gYWxsIG9mIHRoZSBpY29ucyBpbiB0aGUgc2xvdHMgbG9vayB0aGUgc2FtZSwgc2VlICMyMjdcclxuICAgICAgfSApICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VwZXIoIHBhbmVsU2xvdHMsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnRXhwbG9yZTJEVmVjdG9yQ3JlYXRvclBhbmVsJywgRXhwbG9yZTJEVmVjdG9yQ3JlYXRvclBhbmVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxtQkFBbUIsTUFBTSwyQ0FBMkM7QUFDM0UsT0FBT0MsU0FBUyxNQUFNLGdDQUFnQztBQUN0RCxPQUFPQyxrQkFBa0IsTUFBTSx5Q0FBeUM7QUFDeEUsT0FBT0Msc0JBQXNCLE1BQU0sNkNBQTZDO0FBQ2hGLE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MsY0FBYyxNQUFNLDRCQUE0Qjs7QUFFdkQ7O0FBRUE7QUFDQSxNQUFNQyxtQ0FBbUMsR0FBRyxDQUMxQyxJQUFJUCxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztBQUFFO0FBQ3JCLElBQUlBLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0FBQUU7QUFDckIsSUFBSUEsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUcsQ0FBQyxDQUFDO0FBQUEsQ0FDdkI7O0FBRUQ7QUFDQSxNQUFNUSwrQkFBK0IsR0FBRyxDQUN0Q1IsT0FBTyxDQUFDUyxXQUFXLENBQUUsQ0FBQyxFQUFFVixLQUFLLENBQUNXLFNBQVMsQ0FBRSxFQUFHLENBQUUsQ0FBQztBQUFFO0FBQ2pEVixPQUFPLENBQUNTLFdBQVcsQ0FBRSxDQUFDLEVBQUVWLEtBQUssQ0FBQ1csU0FBUyxDQUFFLEVBQUcsQ0FBRSxDQUFDO0FBQUU7QUFDakRWLE9BQU8sQ0FBQ1MsV0FBVyxDQUFFLENBQUMsRUFBRVYsS0FBSyxDQUFDVyxTQUFTLENBQUUsQ0FBQyxFQUFHLENBQUUsQ0FBQyxDQUFDO0FBQUEsQ0FDbEQ7O0FBRUQsZUFBZSxNQUFNQywyQkFBMkIsU0FBU1Isa0JBQWtCLENBQUM7RUFFMUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VTLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRztJQUVoREMsTUFBTSxJQUFJQSxNQUFNLENBQUVKLEtBQUssWUFBWVAsY0FBYyxFQUFHLGtCQUFpQk8sS0FBTSxFQUFFLENBQUM7SUFDOUVJLE1BQU0sSUFBSUEsTUFBTSxDQUFFSCxTQUFTLFlBQVlaLFNBQVMsRUFBRyxzQkFBcUJZLFNBQVUsRUFBRSxDQUFDO0lBQ3JGRyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsQ0FBQyxDQUFDQyxLQUFLLENBQUVKLE9BQU8sRUFBRUssTUFBTSxJQUFJLE9BQU9BLE1BQU0sS0FBSyxRQUFTLENBQUMsRUFBRyxvQkFBbUJMLE9BQVEsRUFBRSxDQUFDO0lBQzNHRSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDRCxPQUFPLElBQUlLLE1BQU0sQ0FBQ0MsY0FBYyxDQUFFTixPQUFRLENBQUMsS0FBS0ssTUFBTSxDQUFDRSxTQUFTLEVBQUcsK0JBQThCUCxPQUFRLEVBQUUsQ0FBQzs7SUFFL0g7SUFDQTtJQUNBLE1BQU1RLHVCQUF1QixHQUFLWCxLQUFLLENBQUNZLGtCQUFrQixLQUFLeEIsbUJBQW1CLENBQUN5QixTQUFTLEdBQzVEbkIsbUNBQW1DLEdBQ25DQywrQkFBK0I7SUFDL0RTLE1BQU0sSUFBSUEsTUFBTSxDQUFFTyx1QkFBdUIsQ0FBQ0csTUFBTSxLQUFLWixPQUFPLENBQUNZLE1BQU0sRUFBRSx5Q0FBMEMsQ0FBQzs7SUFFaEg7SUFDQSxNQUFNQyxVQUFVLEdBQUcsRUFBRTtJQUNyQixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2QsT0FBTyxDQUFDWSxNQUFNLEVBQUVFLENBQUMsRUFBRSxFQUFHO01BQ3pDRCxVQUFVLENBQUNFLElBQUksQ0FBRSxJQUFJMUIsc0JBQXNCLENBQUVTLEtBQUssRUFBRUEsS0FBSyxDQUFDa0IsU0FBUyxFQUFFakIsU0FBUyxFQUFFVSx1QkFBdUIsQ0FBRUssQ0FBQyxDQUFFLEVBQUU7UUFDNUdULE1BQU0sRUFBRUwsT0FBTyxDQUFFYyxDQUFDLENBQUU7UUFDcEJHLGtCQUFrQixFQUFFLEVBQUU7UUFDdEJDLG9CQUFvQixFQUFFLElBQUlqQyxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDO01BQzVDLENBQUUsQ0FBRSxDQUFDO0lBQ1A7O0lBRUEsS0FBSyxDQUFFNEIsVUFBVSxFQUFFWixPQUFRLENBQUM7RUFDOUI7QUFDRjtBQUVBWCxjQUFjLENBQUM2QixRQUFRLENBQUUsNkJBQTZCLEVBQUV2QiwyQkFBNEIsQ0FBQyJ9