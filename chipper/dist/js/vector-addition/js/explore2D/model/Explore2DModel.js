// Copyright 2019-2023, University of Colorado Boulder

/**
 * Explore2DModel is the model for the 'Explore 2D' screen.
 *
 * @author Martin Veillette
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import VectorAdditionModel from '../../common/model/VectorAdditionModel.js';
import VectorAdditionColors from '../../common/VectorAdditionColors.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import vectorAddition from '../../vectorAddition.js';
import Explore2DGraph from './Explore2DGraph.js';
export default class Explore2DModel extends VectorAdditionModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    assert && assert(tandem instanceof Tandem, `invalid tandem: ${tandem}`);
    super(tandem);

    // @public Property controlling the visibility of the sum for both Graph instances
    this.sumVisibleProperty = new BooleanProperty(VectorAdditionConstants.DEFAULT_SUM_VISIBLE);

    // @public (read-only) {VectorColorPalette}
    this.cartesianVectorColorPalette = VectorAdditionColors.BLUE_COLOR_PALETTE;
    this.polarVectorColorPalette = VectorAdditionColors.PINK_COLOR_PALETTE;

    // @public (read-only) graph for Cartesian snap mode
    this.cartesianGraph = new Explore2DGraph(CoordinateSnapModes.CARTESIAN, this.componentStyleProperty, this.sumVisibleProperty, this.cartesianVectorColorPalette);

    // @public (read-only) graph for Polar snap mode
    this.polarGraph = new Explore2DGraph(CoordinateSnapModes.POLAR, this.componentStyleProperty, this.sumVisibleProperty, this.polarVectorColorPalette);
  }

  /**
   * Resets the Explore2DModel.
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.sumVisibleProperty.reset();
    this.cartesianGraph.reset();
    this.polarGraph.reset();
  }
}
vectorAddition.register('Explore2DModel', Explore2DModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJUYW5kZW0iLCJDb29yZGluYXRlU25hcE1vZGVzIiwiVmVjdG9yQWRkaXRpb25Nb2RlbCIsIlZlY3RvckFkZGl0aW9uQ29sb3JzIiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJ2ZWN0b3JBZGRpdGlvbiIsIkV4cGxvcmUyREdyYXBoIiwiRXhwbG9yZTJETW9kZWwiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsImFzc2VydCIsInN1bVZpc2libGVQcm9wZXJ0eSIsIkRFRkFVTFRfU1VNX1ZJU0lCTEUiLCJjYXJ0ZXNpYW5WZWN0b3JDb2xvclBhbGV0dGUiLCJCTFVFX0NPTE9SX1BBTEVUVEUiLCJwb2xhclZlY3RvckNvbG9yUGFsZXR0ZSIsIlBJTktfQ09MT1JfUEFMRVRURSIsImNhcnRlc2lhbkdyYXBoIiwiQ0FSVEVTSUFOIiwiY29tcG9uZW50U3R5bGVQcm9wZXJ0eSIsInBvbGFyR3JhcGgiLCJQT0xBUiIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeHBsb3JlMkRNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFeHBsb3JlMkRNb2RlbCBpcyB0aGUgbW9kZWwgZm9yIHRoZSAnRXhwbG9yZSAyRCcgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IENvb3JkaW5hdGVTbmFwTW9kZXMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Nb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVmVjdG9yQWRkaXRpb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbkNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vVmVjdG9yQWRkaXRpb25Db2xvcnMuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHZlY3RvckFkZGl0aW9uIGZyb20gJy4uLy4uL3ZlY3RvckFkZGl0aW9uLmpzJztcclxuaW1wb3J0IEV4cGxvcmUyREdyYXBoIGZyb20gJy4vRXhwbG9yZTJER3JhcGguanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwbG9yZTJETW9kZWwgZXh0ZW5kcyBWZWN0b3JBZGRpdGlvbk1vZGVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGFuZGVtIGluc3RhbmNlb2YgVGFuZGVtLCBgaW52YWxpZCB0YW5kZW06ICR7dGFuZGVtfWAgKTtcclxuXHJcbiAgICBzdXBlciggdGFuZGVtICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyBQcm9wZXJ0eSBjb250cm9sbGluZyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgc3VtIGZvciBib3RoIEdyYXBoIGluc3RhbmNlc1xyXG4gICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5ERUZBVUxUX1NVTV9WSVNJQkxFICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSB7VmVjdG9yQ29sb3JQYWxldHRlfVxyXG4gICAgdGhpcy5jYXJ0ZXNpYW5WZWN0b3JDb2xvclBhbGV0dGUgPSBWZWN0b3JBZGRpdGlvbkNvbG9ycy5CTFVFX0NPTE9SX1BBTEVUVEU7XHJcbiAgICB0aGlzLnBvbGFyVmVjdG9yQ29sb3JQYWxldHRlID0gVmVjdG9yQWRkaXRpb25Db2xvcnMuUElOS19DT0xPUl9QQUxFVFRFO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgZ3JhcGggZm9yIENhcnRlc2lhbiBzbmFwIG1vZGVcclxuICAgIHRoaXMuY2FydGVzaWFuR3JhcGggPSBuZXcgRXhwbG9yZTJER3JhcGgoIENvb3JkaW5hdGVTbmFwTW9kZXMuQ0FSVEVTSUFOLFxyXG4gICAgICB0aGlzLmNvbXBvbmVudFN0eWxlUHJvcGVydHksXHJcbiAgICAgIHRoaXMuc3VtVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICB0aGlzLmNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgZ3JhcGggZm9yIFBvbGFyIHNuYXAgbW9kZVxyXG4gICAgdGhpcy5wb2xhckdyYXBoID0gbmV3IEV4cGxvcmUyREdyYXBoKCBDb29yZGluYXRlU25hcE1vZGVzLlBPTEFSLFxyXG4gICAgICB0aGlzLmNvbXBvbmVudFN0eWxlUHJvcGVydHksXHJcbiAgICAgIHRoaXMuc3VtVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICB0aGlzLnBvbGFyVmVjdG9yQ29sb3JQYWxldHRlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldHMgdGhlIEV4cGxvcmUyRE1vZGVsLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgICB0aGlzLnN1bVZpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5jYXJ0ZXNpYW5HcmFwaC5yZXNldCgpO1xyXG4gICAgdGhpcy5wb2xhckdyYXBoLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ0V4cGxvcmUyRE1vZGVsJywgRXhwbG9yZTJETW9kZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLG1CQUFtQixNQUFNLDJDQUEyQztBQUMzRSxPQUFPQyxtQkFBbUIsTUFBTSwyQ0FBMkM7QUFDM0UsT0FBT0Msb0JBQW9CLE1BQU0sc0NBQXNDO0FBQ3ZFLE9BQU9DLHVCQUF1QixNQUFNLHlDQUF5QztBQUM3RSxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLGNBQWMsTUFBTSxxQkFBcUI7QUFFaEQsZUFBZSxNQUFNQyxjQUFjLFNBQVNMLG1CQUFtQixDQUFDO0VBRTlEO0FBQ0Y7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxNQUFNLEVBQUc7SUFFcEJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxNQUFNLFlBQVlULE1BQU0sRUFBRyxtQkFBa0JTLE1BQU8sRUFBRSxDQUFDO0lBRXpFLEtBQUssQ0FBRUEsTUFBTyxDQUFDOztJQUVmO0lBQ0EsSUFBSSxDQUFDRSxrQkFBa0IsR0FBRyxJQUFJWixlQUFlLENBQUVLLHVCQUF1QixDQUFDUSxtQkFBb0IsQ0FBQzs7SUFFNUY7SUFDQSxJQUFJLENBQUNDLDJCQUEyQixHQUFHVixvQkFBb0IsQ0FBQ1csa0JBQWtCO0lBQzFFLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUdaLG9CQUFvQixDQUFDYSxrQkFBa0I7O0lBRXRFO0lBQ0EsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSVgsY0FBYyxDQUFFTCxtQkFBbUIsQ0FBQ2lCLFNBQVMsRUFDckUsSUFBSSxDQUFDQyxzQkFBc0IsRUFDM0IsSUFBSSxDQUFDUixrQkFBa0IsRUFDdkIsSUFBSSxDQUFDRSwyQkFBNEIsQ0FBQzs7SUFFcEM7SUFDQSxJQUFJLENBQUNPLFVBQVUsR0FBRyxJQUFJZCxjQUFjLENBQUVMLG1CQUFtQixDQUFDb0IsS0FBSyxFQUM3RCxJQUFJLENBQUNGLHNCQUFzQixFQUMzQixJQUFJLENBQUNSLGtCQUFrQixFQUN2QixJQUFJLENBQUNJLHVCQUF3QixDQUFDO0VBQ2xDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU8sS0FBS0EsQ0FBQSxFQUFHO0lBQ04sS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ1gsa0JBQWtCLENBQUNXLEtBQUssQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ0wsY0FBYyxDQUFDSyxLQUFLLENBQUMsQ0FBQztJQUMzQixJQUFJLENBQUNGLFVBQVUsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7RUFDekI7QUFDRjtBQUVBakIsY0FBYyxDQUFDa0IsUUFBUSxDQUFFLGdCQUFnQixFQUFFaEIsY0FBZSxDQUFDIn0=