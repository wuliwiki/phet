// Copyright 2019-2023, University of Colorado Boulder

/**
 * LabVectorCreatorPanel is a specialization of VectorCreatorPanel (the vector 'toolbox') for the 'Lab' screen.
 *
 * @author Brandon Li
 */

import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import SceneNode from '../../common/view/SceneNode.js';
import VectorCreatorPanel from '../../common/view/VectorCreatorPanel.js';
import VectorCreatorPanelSlot from '../../common/view/VectorCreatorPanelSlot.js';
import vectorAddition from '../../vectorAddition.js';
import LabGraph from '../model/LabGraph.js';
export default class LabVectorCreatorPanel extends VectorCreatorPanel {
  /**
   * @param {LabGraph} graph
   * @param {SceneNode} sceneNode
   * @param {Object} [options]
   */
  constructor(graph, sceneNode, options) {
    assert && assert(graph instanceof LabGraph, `invalid graph: ${graph}`);
    assert && assert(sceneNode instanceof SceneNode, `invalid sceneNode: ${sceneNode}`);
    assert && assert(!options || Object.getPrototypeOf(options) === Object.prototype, `Extra prototype on options: ${options}`);
    options = merge({
      slotSpacing: 40
    }, options);

    // Create the initial vector components, the same for all vectors in a set.
    // See https://github.com/phetsims/vector-addition/issues/227
    const initialVectorComponents = graph.coordinateSnapMode === CoordinateSnapModes.CARTESIAN ? new Vector2(8, 6) : Vector2.createPolar(8, Utils.toRadians(45));

    // Create a slot for each VectorSet
    const slots = [];
    graph.vectorSets.forEach(vectorSet => {
      slots.push(new VectorCreatorPanelSlot(graph, vectorSet, sceneNode, initialVectorComponents, {
        iconArrowMagnitude: 57,
        numberOfVectors: 10 // Each slot can create 10 vectors
      }));
    });

    super(slots, options);
  }
}
vectorAddition.register('LabVectorCreatorPanel', LabVectorCreatorPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJtZXJnZSIsIkNvb3JkaW5hdGVTbmFwTW9kZXMiLCJTY2VuZU5vZGUiLCJWZWN0b3JDcmVhdG9yUGFuZWwiLCJWZWN0b3JDcmVhdG9yUGFuZWxTbG90IiwidmVjdG9yQWRkaXRpb24iLCJMYWJHcmFwaCIsIkxhYlZlY3RvckNyZWF0b3JQYW5lbCIsImNvbnN0cnVjdG9yIiwiZ3JhcGgiLCJzY2VuZU5vZGUiLCJvcHRpb25zIiwiYXNzZXJ0IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJzbG90U3BhY2luZyIsImluaXRpYWxWZWN0b3JDb21wb25lbnRzIiwiY29vcmRpbmF0ZVNuYXBNb2RlIiwiQ0FSVEVTSUFOIiwiY3JlYXRlUG9sYXIiLCJ0b1JhZGlhbnMiLCJzbG90cyIsInZlY3RvclNldHMiLCJmb3JFYWNoIiwidmVjdG9yU2V0IiwicHVzaCIsImljb25BcnJvd01hZ25pdHVkZSIsIm51bWJlck9mVmVjdG9ycyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGFiVmVjdG9yQ3JlYXRvclBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExhYlZlY3RvckNyZWF0b3JQYW5lbCBpcyBhIHNwZWNpYWxpemF0aW9uIG9mIFZlY3RvckNyZWF0b3JQYW5lbCAodGhlIHZlY3RvciAndG9vbGJveCcpIGZvciB0aGUgJ0xhYicgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IENvb3JkaW5hdGVTbmFwTW9kZXMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5pbXBvcnQgU2NlbmVOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1NjZW5lTm9kZS5qcyc7XHJcbmltcG9ydCBWZWN0b3JDcmVhdG9yUGFuZWwgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsU2xvdC5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBMYWJHcmFwaCBmcm9tICcuLi9tb2RlbC9MYWJHcmFwaC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYWJWZWN0b3JDcmVhdG9yUGFuZWwgZXh0ZW5kcyBWZWN0b3JDcmVhdG9yUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0xhYkdyYXBofSBncmFwaFxyXG4gICAqIEBwYXJhbSB7U2NlbmVOb2RlfSBzY2VuZU5vZGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGdyYXBoLCBzY2VuZU5vZGUsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZ3JhcGggaW5zdGFuY2VvZiBMYWJHcmFwaCwgYGludmFsaWQgZ3JhcGg6ICR7Z3JhcGh9YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc2NlbmVOb2RlIGluc3RhbmNlb2YgU2NlbmVOb2RlLCBgaW52YWxpZCBzY2VuZU5vZGU6ICR7c2NlbmVOb2RlfWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZiggb3B0aW9ucyApID09PSBPYmplY3QucHJvdG90eXBlLCBgRXh0cmEgcHJvdG90eXBlIG9uIG9wdGlvbnM6ICR7b3B0aW9uc31gICk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHNsb3RTcGFjaW5nOiA0MFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgaW5pdGlhbCB2ZWN0b3IgY29tcG9uZW50cywgdGhlIHNhbWUgZm9yIGFsbCB2ZWN0b3JzIGluIGEgc2V0LlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzIyN1xyXG4gICAgY29uc3QgaW5pdGlhbFZlY3RvckNvbXBvbmVudHMgPSAoIGdyYXBoLmNvb3JkaW5hdGVTbmFwTW9kZSA9PT0gQ29vcmRpbmF0ZVNuYXBNb2Rlcy5DQVJURVNJQU4gKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKCA4LCA2ICkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZWN0b3IyLmNyZWF0ZVBvbGFyKCA4LCBVdGlscy50b1JhZGlhbnMoIDQ1ICkgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBzbG90IGZvciBlYWNoIFZlY3RvclNldFxyXG4gICAgY29uc3Qgc2xvdHMgPSBbXTtcclxuICAgIGdyYXBoLnZlY3RvclNldHMuZm9yRWFjaCggdmVjdG9yU2V0ID0+IHtcclxuICAgICAgc2xvdHMucHVzaCggbmV3IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QoIGdyYXBoLCB2ZWN0b3JTZXQsIHNjZW5lTm9kZSwgaW5pdGlhbFZlY3RvckNvbXBvbmVudHMsIHtcclxuICAgICAgICBpY29uQXJyb3dNYWduaXR1ZGU6IDU3LFxyXG4gICAgICAgIG51bWJlck9mVmVjdG9yczogMTAgLy8gRWFjaCBzbG90IGNhbiBjcmVhdGUgMTAgdmVjdG9yc1xyXG4gICAgICB9ICkgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggc2xvdHMsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnTGFiVmVjdG9yQ3JlYXRvclBhbmVsJywgTGFiVmVjdG9yQ3JlYXRvclBhbmVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLG1CQUFtQixNQUFNLDJDQUEyQztBQUMzRSxPQUFPQyxTQUFTLE1BQU0sZ0NBQWdDO0FBQ3RELE9BQU9DLGtCQUFrQixNQUFNLHlDQUF5QztBQUN4RSxPQUFPQyxzQkFBc0IsTUFBTSw2Q0FBNkM7QUFDaEYsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxRQUFRLE1BQU0sc0JBQXNCO0FBRTNDLGVBQWUsTUFBTUMscUJBQXFCLFNBQVNKLGtCQUFrQixDQUFDO0VBRXBFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRztJQUV2Q0MsTUFBTSxJQUFJQSxNQUFNLENBQUVILEtBQUssWUFBWUgsUUFBUSxFQUFHLGtCQUFpQkcsS0FBTSxFQUFFLENBQUM7SUFDeEVHLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixTQUFTLFlBQVlSLFNBQVMsRUFBRyxzQkFBcUJRLFNBQVUsRUFBRSxDQUFDO0lBQ3JGRSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDRCxPQUFPLElBQUlFLE1BQU0sQ0FBQ0MsY0FBYyxDQUFFSCxPQUFRLENBQUMsS0FBS0UsTUFBTSxDQUFDRSxTQUFTLEVBQUcsK0JBQThCSixPQUFRLEVBQUUsQ0FBQztJQUUvSEEsT0FBTyxHQUFHWCxLQUFLLENBQUU7TUFDZmdCLFdBQVcsRUFBRTtJQUNmLENBQUMsRUFBRUwsT0FBUSxDQUFDOztJQUVaO0lBQ0E7SUFDQSxNQUFNTSx1QkFBdUIsR0FBS1IsS0FBSyxDQUFDUyxrQkFBa0IsS0FBS2pCLG1CQUFtQixDQUFDa0IsU0FBUyxHQUM1RCxJQUFJcEIsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsR0FDbkJBLE9BQU8sQ0FBQ3FCLFdBQVcsQ0FBRSxDQUFDLEVBQUV0QixLQUFLLENBQUN1QixTQUFTLENBQUUsRUFBRyxDQUFFLENBQUM7O0lBRS9FO0lBQ0EsTUFBTUMsS0FBSyxHQUFHLEVBQUU7SUFDaEJiLEtBQUssQ0FBQ2MsVUFBVSxDQUFDQyxPQUFPLENBQUVDLFNBQVMsSUFBSTtNQUNyQ0gsS0FBSyxDQUFDSSxJQUFJLENBQUUsSUFBSXRCLHNCQUFzQixDQUFFSyxLQUFLLEVBQUVnQixTQUFTLEVBQUVmLFNBQVMsRUFBRU8sdUJBQXVCLEVBQUU7UUFDNUZVLGtCQUFrQixFQUFFLEVBQUU7UUFDdEJDLGVBQWUsRUFBRSxFQUFFLENBQUM7TUFDdEIsQ0FBRSxDQUFFLENBQUM7SUFDUCxDQUFFLENBQUM7O0lBRUgsS0FBSyxDQUFFTixLQUFLLEVBQUVYLE9BQVEsQ0FBQztFQUN6QjtBQUNGO0FBRUFOLGNBQWMsQ0FBQ3dCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRXRCLHFCQUFzQixDQUFDIn0=