// Copyright 2019-2023, University of Colorado Boulder

/**
 * LabModel is the model for the 'Lab' screen.
 *
 * @author Martin Veillette
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import VectorAdditionModel from '../../common/model/VectorAdditionModel.js';
import VectorAdditionColors from '../../common/VectorAdditionColors.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import vectorAddition from '../../vectorAddition.js';
import LabGraph from './LabGraph.js';
export default class LabModel extends VectorAdditionModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    assert && assert(tandem instanceof Tandem, `invalid tandem: ${tandem}`);
    super(tandem);

    // @public visibility of the sum for the first vector set
    this.sumVisibleProperty1 = new BooleanProperty(VectorAdditionConstants.DEFAULT_SUM_VISIBLE);

    // @public visibility of the sum for the second vector set
    this.sumVisibleProperty2 = new BooleanProperty(VectorAdditionConstants.DEFAULT_SUM_VISIBLE);

    // @public (read-only) {VectorColorPalette}
    this.cartesianVectorColorPalette1 = VectorAdditionColors.BLUE_COLOR_PALETTE;
    this.cartesianVectorColorPalette2 = VectorAdditionColors.ORANGE_COLOR_PALETTE;
    this.polarVectorColorPalette1 = VectorAdditionColors.PINK_COLOR_PALETTE;
    this.polarVectorColorPalette2 = VectorAdditionColors.GREEN_COLOR_PALETTE;

    // @public (read-only) graph for Cartesian snap mode
    this.cartesianGraph = new LabGraph(CoordinateSnapModes.CARTESIAN, this.componentStyleProperty, this.sumVisibleProperty1, this.sumVisibleProperty2, this.cartesianVectorColorPalette1, this.cartesianVectorColorPalette2);

    // @public (read-only) graph for Polar snap mode
    this.polarGraph = new LabGraph(CoordinateSnapModes.POLAR, this.componentStyleProperty, this.sumVisibleProperty1, this.sumVisibleProperty2, this.polarVectorColorPalette1, this.polarVectorColorPalette2);
  }

  /**
   * Resets the LabModel.
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.sumVisibleProperty1.reset();
    this.sumVisibleProperty2.reset();
    this.cartesianGraph.reset();
    this.polarGraph.reset();
  }
}
vectorAddition.register('LabModel', LabModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJUYW5kZW0iLCJDb29yZGluYXRlU25hcE1vZGVzIiwiVmVjdG9yQWRkaXRpb25Nb2RlbCIsIlZlY3RvckFkZGl0aW9uQ29sb3JzIiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJ2ZWN0b3JBZGRpdGlvbiIsIkxhYkdyYXBoIiwiTGFiTW9kZWwiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsImFzc2VydCIsInN1bVZpc2libGVQcm9wZXJ0eTEiLCJERUZBVUxUX1NVTV9WSVNJQkxFIiwic3VtVmlzaWJsZVByb3BlcnR5MiIsImNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZTEiLCJCTFVFX0NPTE9SX1BBTEVUVEUiLCJjYXJ0ZXNpYW5WZWN0b3JDb2xvclBhbGV0dGUyIiwiT1JBTkdFX0NPTE9SX1BBTEVUVEUiLCJwb2xhclZlY3RvckNvbG9yUGFsZXR0ZTEiLCJQSU5LX0NPTE9SX1BBTEVUVEUiLCJwb2xhclZlY3RvckNvbG9yUGFsZXR0ZTIiLCJHUkVFTl9DT0xPUl9QQUxFVFRFIiwiY2FydGVzaWFuR3JhcGgiLCJDQVJURVNJQU4iLCJjb21wb25lbnRTdHlsZVByb3BlcnR5IiwicG9sYXJHcmFwaCIsIlBPTEFSIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxhYk1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExhYk1vZGVsIGlzIHRoZSBtb2RlbCBmb3IgdGhlICdMYWInIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBDb29yZGluYXRlU25hcE1vZGVzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Db29yZGluYXRlU25hcE1vZGVzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uTW9kZWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1ZlY3RvckFkZGl0aW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL1ZlY3RvckFkZGl0aW9uQ29sb3JzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBMYWJHcmFwaCBmcm9tICcuL0xhYkdyYXBoLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYk1vZGVsIGV4dGVuZHMgVmVjdG9yQWRkaXRpb25Nb2RlbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRhbmRlbSBpbnN0YW5jZW9mIFRhbmRlbSwgYGludmFsaWQgdGFuZGVtOiAke3RhbmRlbX1gICk7XHJcblxyXG4gICAgc3VwZXIoIHRhbmRlbSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgdmlzaWJpbGl0eSBvZiB0aGUgc3VtIGZvciB0aGUgZmlyc3QgdmVjdG9yIHNldFxyXG4gICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHkxID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggVmVjdG9yQWRkaXRpb25Db25zdGFudHMuREVGQVVMVF9TVU1fVklTSUJMRSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgdmlzaWJpbGl0eSBvZiB0aGUgc3VtIGZvciB0aGUgc2Vjb25kIHZlY3RvciBzZXRcclxuICAgIHRoaXMuc3VtVmlzaWJsZVByb3BlcnR5MiA9IG5ldyBCb29sZWFuUHJvcGVydHkoIFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLkRFRkFVTFRfU1VNX1ZJU0lCTEUgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtWZWN0b3JDb2xvclBhbGV0dGV9XHJcbiAgICB0aGlzLmNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZTEgPSBWZWN0b3JBZGRpdGlvbkNvbG9ycy5CTFVFX0NPTE9SX1BBTEVUVEU7XHJcbiAgICB0aGlzLmNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZTIgPSBWZWN0b3JBZGRpdGlvbkNvbG9ycy5PUkFOR0VfQ09MT1JfUEFMRVRURTtcclxuICAgIHRoaXMucG9sYXJWZWN0b3JDb2xvclBhbGV0dGUxID0gVmVjdG9yQWRkaXRpb25Db2xvcnMuUElOS19DT0xPUl9QQUxFVFRFO1xyXG4gICAgdGhpcy5wb2xhclZlY3RvckNvbG9yUGFsZXR0ZTIgPSBWZWN0b3JBZGRpdGlvbkNvbG9ycy5HUkVFTl9DT0xPUl9QQUxFVFRFO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgZ3JhcGggZm9yIENhcnRlc2lhbiBzbmFwIG1vZGVcclxuICAgIHRoaXMuY2FydGVzaWFuR3JhcGggPSBuZXcgTGFiR3JhcGgoXHJcbiAgICAgIENvb3JkaW5hdGVTbmFwTW9kZXMuQ0FSVEVTSUFOLFxyXG4gICAgICB0aGlzLmNvbXBvbmVudFN0eWxlUHJvcGVydHksXHJcbiAgICAgIHRoaXMuc3VtVmlzaWJsZVByb3BlcnR5MSxcclxuICAgICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHkyLFxyXG4gICAgICB0aGlzLmNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZTEsXHJcbiAgICAgIHRoaXMuY2FydGVzaWFuVmVjdG9yQ29sb3JQYWxldHRlMlxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIGdyYXBoIGZvciBQb2xhciBzbmFwIG1vZGVcclxuICAgIHRoaXMucG9sYXJHcmFwaCA9IG5ldyBMYWJHcmFwaChcclxuICAgICAgQ29vcmRpbmF0ZVNuYXBNb2Rlcy5QT0xBUixcclxuICAgICAgdGhpcy5jb21wb25lbnRTdHlsZVByb3BlcnR5LFxyXG4gICAgICB0aGlzLnN1bVZpc2libGVQcm9wZXJ0eTEsXHJcbiAgICAgIHRoaXMuc3VtVmlzaWJsZVByb3BlcnR5MixcclxuICAgICAgdGhpcy5wb2xhclZlY3RvckNvbG9yUGFsZXR0ZTEsXHJcbiAgICAgIHRoaXMucG9sYXJWZWN0b3JDb2xvclBhbGV0dGUyXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoZSBMYWJNb2RlbC5cclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHkxLnJlc2V0KCk7XHJcbiAgICB0aGlzLnN1bVZpc2libGVQcm9wZXJ0eTIucmVzZXQoKTtcclxuICAgIHRoaXMuY2FydGVzaWFuR3JhcGgucmVzZXQoKTtcclxuICAgIHRoaXMucG9sYXJHcmFwaC5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdMYWJNb2RlbCcsIExhYk1vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxtQkFBbUIsTUFBTSwyQ0FBMkM7QUFDM0UsT0FBT0MsbUJBQW1CLE1BQU0sMkNBQTJDO0FBQzNFLE9BQU9DLG9CQUFvQixNQUFNLHNDQUFzQztBQUN2RSxPQUFPQyx1QkFBdUIsTUFBTSx5Q0FBeUM7QUFDN0UsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxRQUFRLE1BQU0sZUFBZTtBQUVwQyxlQUFlLE1BQU1DLFFBQVEsU0FBU0wsbUJBQW1CLENBQUM7RUFFeEQ7QUFDRjtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQkMsTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sWUFBWVQsTUFBTSxFQUFHLG1CQUFrQlMsTUFBTyxFQUFFLENBQUM7SUFFekUsS0FBSyxDQUFFQSxNQUFPLENBQUM7O0lBRWY7SUFDQSxJQUFJLENBQUNFLG1CQUFtQixHQUFHLElBQUlaLGVBQWUsQ0FBRUssdUJBQXVCLENBQUNRLG1CQUFvQixDQUFDOztJQUU3RjtJQUNBLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUcsSUFBSWQsZUFBZSxDQUFFSyx1QkFBdUIsQ0FBQ1EsbUJBQW9CLENBQUM7O0lBRTdGO0lBQ0EsSUFBSSxDQUFDRSw0QkFBNEIsR0FBR1gsb0JBQW9CLENBQUNZLGtCQUFrQjtJQUMzRSxJQUFJLENBQUNDLDRCQUE0QixHQUFHYixvQkFBb0IsQ0FBQ2Msb0JBQW9CO0lBQzdFLElBQUksQ0FBQ0Msd0JBQXdCLEdBQUdmLG9CQUFvQixDQUFDZ0Isa0JBQWtCO0lBQ3ZFLElBQUksQ0FBQ0Msd0JBQXdCLEdBQUdqQixvQkFBb0IsQ0FBQ2tCLG1CQUFtQjs7SUFFeEU7SUFDQSxJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJaEIsUUFBUSxDQUNoQ0wsbUJBQW1CLENBQUNzQixTQUFTLEVBQzdCLElBQUksQ0FBQ0Msc0JBQXNCLEVBQzNCLElBQUksQ0FBQ2IsbUJBQW1CLEVBQ3hCLElBQUksQ0FBQ0UsbUJBQW1CLEVBQ3hCLElBQUksQ0FBQ0MsNEJBQTRCLEVBQ2pDLElBQUksQ0FBQ0UsNEJBQ1AsQ0FBQzs7SUFFRDtJQUNBLElBQUksQ0FBQ1MsVUFBVSxHQUFHLElBQUluQixRQUFRLENBQzVCTCxtQkFBbUIsQ0FBQ3lCLEtBQUssRUFDekIsSUFBSSxDQUFDRixzQkFBc0IsRUFDM0IsSUFBSSxDQUFDYixtQkFBbUIsRUFDeEIsSUFBSSxDQUFDRSxtQkFBbUIsRUFDeEIsSUFBSSxDQUFDSyx3QkFBd0IsRUFDN0IsSUFBSSxDQUFDRSx3QkFDUCxDQUFDO0VBQ0g7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFTyxLQUFLQSxDQUFBLEVBQUc7SUFDTixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBQ2IsSUFBSSxDQUFDaEIsbUJBQW1CLENBQUNnQixLQUFLLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUNkLG1CQUFtQixDQUFDYyxLQUFLLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUNMLGNBQWMsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDRixVQUFVLENBQUNFLEtBQUssQ0FBQyxDQUFDO0VBQ3pCO0FBQ0Y7QUFFQXRCLGNBQWMsQ0FBQ3VCLFFBQVEsQ0FBRSxVQUFVLEVBQUVyQixRQUFTLENBQUMifQ==