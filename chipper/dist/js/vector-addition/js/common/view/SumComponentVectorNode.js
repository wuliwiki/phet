// Copyright 2019-2023, University of Colorado Boulder

/**
 * View for the component of the sum vector.
 *
 * Extends ComponentVectorNode but adds the following functionality:
 *  - a distinct appearance
 *  - toggle visibility based on the sumVisibleProperty
 *  - disables ability to take the sum vector node off of the graph
 *
 * @author Brandon Li
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Multilink from '../../../../axon/js/Multilink.js';
import merge from '../../../../phet-core/js/merge.js';
import vectorAddition from '../../vectorAddition.js';
import ComponentVectorStyles from '../model/ComponentVectorStyles.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import ComponentVectorNode from './ComponentVectorNode.js';
export default class SumComponentVectorNode extends ComponentVectorNode {
  /**
   * @param {ComponentVector} componentVector - the vector model for the component
   * @param {Graph} graph - the graph the component belongs to
   * @param {EnumerationProperty.<ComponentVectorStyles>} componentStyleProperty
   * @param {BooleanProperty} valuesVisibleProperty
   * @param {BooleanProperty} sumVisibleProperty
   * @param {Object} [options]
   */
  constructor(componentVector, graph, componentStyleProperty, valuesVisibleProperty, sumVisibleProperty, options) {
    assert && assert(sumVisibleProperty instanceof BooleanProperty, `invalid sumVisibleProperty: ${sumVisibleProperty}`);
    options = merge({
      arrowOptions: merge({}, VectorAdditionConstants.SUM_COMPONENT_VECTOR_ARROW_OPTIONS, {
        fill: componentVector.vectorColorPalette.sumComponentFill
      })
    }, options);
    super(componentVector, graph, componentStyleProperty, valuesVisibleProperty, options);

    // @private {BooleanProperty} sumVisibleProperty
    this.sumVisibleProperty = sumVisibleProperty;

    // Update when the sum becomes visible or defined.
    // unlink is unnecessary, exists for the lifetime of the sim.
    Multilink.multilink([sumVisibleProperty, componentVector.parentVector.isDefinedProperty], () => this.updateComponentVector(componentVector, graph.modelViewTransformProperty.value, componentStyleProperty.value, componentVector.isParentVectorActiveProperty.value));
  }

  /**
   * @public
   * @override
   */
  dispose() {
    assert && assert(false, 'SumComponentVectorNode is not intended to be disposed.');
  }

  /**
   * Handles visibility of sum component vectors.
   * @private
   * @param {ComponentVector} componentVector
   * @param {ModelViewTransform2} modelViewTransform
   * @param {ComponentVectorStyles} componentStyle
   * @param {boolean} isParentActive
   */
  updateComponentVector(componentVector, modelViewTransform, componentStyle, isParentActive) {
    super.updateComponentVector(componentVector, modelViewTransform, componentStyle, isParentActive);
    this.visible =
    // components are visible
    componentStyle !== ComponentVectorStyles.INVISIBLE &&
    // sum is visible
    !!this.sumVisibleProperty && this.sumVisibleProperty.value &&
    // sum is defined
    componentVector.parentVector.isDefinedProperty.value;
  }
}
vectorAddition.register('SumComponentVectorNode', SumComponentVectorNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJNdWx0aWxpbmsiLCJtZXJnZSIsInZlY3RvckFkZGl0aW9uIiwiQ29tcG9uZW50VmVjdG9yU3R5bGVzIiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJDb21wb25lbnRWZWN0b3JOb2RlIiwiU3VtQ29tcG9uZW50VmVjdG9yTm9kZSIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50VmVjdG9yIiwiZ3JhcGgiLCJjb21wb25lbnRTdHlsZVByb3BlcnR5IiwidmFsdWVzVmlzaWJsZVByb3BlcnR5Iiwic3VtVmlzaWJsZVByb3BlcnR5Iiwib3B0aW9ucyIsImFzc2VydCIsImFycm93T3B0aW9ucyIsIlNVTV9DT01QT05FTlRfVkVDVE9SX0FSUk9XX09QVElPTlMiLCJmaWxsIiwidmVjdG9yQ29sb3JQYWxldHRlIiwic3VtQ29tcG9uZW50RmlsbCIsIm11bHRpbGluayIsInBhcmVudFZlY3RvciIsImlzRGVmaW5lZFByb3BlcnR5IiwidXBkYXRlQ29tcG9uZW50VmVjdG9yIiwibW9kZWxWaWV3VHJhbnNmb3JtUHJvcGVydHkiLCJ2YWx1ZSIsImlzUGFyZW50VmVjdG9yQWN0aXZlUHJvcGVydHkiLCJkaXNwb3NlIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiY29tcG9uZW50U3R5bGUiLCJpc1BhcmVudEFjdGl2ZSIsInZpc2libGUiLCJJTlZJU0lCTEUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN1bUNvbXBvbmVudFZlY3Rvck5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgdGhlIGNvbXBvbmVudCBvZiB0aGUgc3VtIHZlY3Rvci5cclxuICpcclxuICogRXh0ZW5kcyBDb21wb25lbnRWZWN0b3JOb2RlIGJ1dCBhZGRzIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25hbGl0eTpcclxuICogIC0gYSBkaXN0aW5jdCBhcHBlYXJhbmNlXHJcbiAqICAtIHRvZ2dsZSB2aXNpYmlsaXR5IGJhc2VkIG9uIHRoZSBzdW1WaXNpYmxlUHJvcGVydHlcclxuICogIC0gZGlzYWJsZXMgYWJpbGl0eSB0byB0YWtlIHRoZSBzdW0gdmVjdG9yIG5vZGUgb2ZmIG9mIHRoZSBncmFwaFxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgQ29tcG9uZW50VmVjdG9yU3R5bGVzIGZyb20gJy4uL21vZGVsL0NvbXBvbmVudFZlY3RvclN0eWxlcy5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyBmcm9tICcuLi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBDb21wb25lbnRWZWN0b3JOb2RlIGZyb20gJy4vQ29tcG9uZW50VmVjdG9yTm9kZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdW1Db21wb25lbnRWZWN0b3JOb2RlIGV4dGVuZHMgQ29tcG9uZW50VmVjdG9yTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50VmVjdG9yfSBjb21wb25lbnRWZWN0b3IgLSB0aGUgdmVjdG9yIG1vZGVsIGZvciB0aGUgY29tcG9uZW50XHJcbiAgICogQHBhcmFtIHtHcmFwaH0gZ3JhcGggLSB0aGUgZ3JhcGggdGhlIGNvbXBvbmVudCBiZWxvbmdzIHRvXHJcbiAgICogQHBhcmFtIHtFbnVtZXJhdGlvblByb3BlcnR5LjxDb21wb25lbnRWZWN0b3JTdHlsZXM+fSBjb21wb25lbnRTdHlsZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IHZhbHVlc1Zpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhblByb3BlcnR5fSBzdW1WaXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvbXBvbmVudFZlY3RvcixcclxuICAgICAgICAgICAgICAgZ3JhcGgsXHJcbiAgICAgICAgICAgICAgIGNvbXBvbmVudFN0eWxlUHJvcGVydHksXHJcbiAgICAgICAgICAgICAgIHZhbHVlc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgICAgICAgICAgc3VtVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICBvcHRpb25zICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHN1bVZpc2libGVQcm9wZXJ0eSBpbnN0YW5jZW9mIEJvb2xlYW5Qcm9wZXJ0eSwgYGludmFsaWQgc3VtVmlzaWJsZVByb3BlcnR5OiAke3N1bVZpc2libGVQcm9wZXJ0eX1gICk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIGFycm93T3B0aW9uczogbWVyZ2UoIHt9LCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5TVU1fQ09NUE9ORU5UX1ZFQ1RPUl9BUlJPV19PUFRJT05TLCB7XHJcbiAgICAgICAgZmlsbDogY29tcG9uZW50VmVjdG9yLnZlY3RvckNvbG9yUGFsZXR0ZS5zdW1Db21wb25lbnRGaWxsXHJcbiAgICAgIH0gKVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBjb21wb25lbnRWZWN0b3IsIGdyYXBoLCBjb21wb25lbnRTdHlsZVByb3BlcnR5LCB2YWx1ZXNWaXNpYmxlUHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7Qm9vbGVhblByb3BlcnR5fSBzdW1WaXNpYmxlUHJvcGVydHlcclxuICAgIHRoaXMuc3VtVmlzaWJsZVByb3BlcnR5ID0gc3VtVmlzaWJsZVByb3BlcnR5O1xyXG5cclxuICAgIC8vIFVwZGF0ZSB3aGVuIHRoZSBzdW0gYmVjb21lcyB2aXNpYmxlIG9yIGRlZmluZWQuXHJcbiAgICAvLyB1bmxpbmsgaXMgdW5uZWNlc3NhcnksIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0uXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICBbIHN1bVZpc2libGVQcm9wZXJ0eSwgY29tcG9uZW50VmVjdG9yLnBhcmVudFZlY3Rvci5pc0RlZmluZWRQcm9wZXJ0eSBdLFxyXG4gICAgICAoKSA9PiB0aGlzLnVwZGF0ZUNvbXBvbmVudFZlY3RvciggY29tcG9uZW50VmVjdG9yLFxyXG4gICAgICAgIGdyYXBoLm1vZGVsVmlld1RyYW5zZm9ybVByb3BlcnR5LnZhbHVlLFxyXG4gICAgICAgIGNvbXBvbmVudFN0eWxlUHJvcGVydHkudmFsdWUsXHJcbiAgICAgICAgY29tcG9uZW50VmVjdG9yLmlzUGFyZW50VmVjdG9yQWN0aXZlUHJvcGVydHkudmFsdWUgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdTdW1Db21wb25lbnRWZWN0b3JOb2RlIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBkaXNwb3NlZC4nICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGVzIHZpc2liaWxpdHkgb2Ygc3VtIGNvbXBvbmVudCB2ZWN0b3JzLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtDb21wb25lbnRWZWN0b3J9IGNvbXBvbmVudFZlY3RvclxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICogQHBhcmFtIHtDb21wb25lbnRWZWN0b3JTdHlsZXN9IGNvbXBvbmVudFN0eWxlXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1BhcmVudEFjdGl2ZVxyXG4gICAqL1xyXG4gIHVwZGF0ZUNvbXBvbmVudFZlY3RvciggY29tcG9uZW50VmVjdG9yLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIGNvbXBvbmVudFN0eWxlLCBpc1BhcmVudEFjdGl2ZSApIHtcclxuICAgIHN1cGVyLnVwZGF0ZUNvbXBvbmVudFZlY3RvciggY29tcG9uZW50VmVjdG9yLCBtb2RlbFZpZXdUcmFuc2Zvcm0sIGNvbXBvbmVudFN0eWxlLCBpc1BhcmVudEFjdGl2ZSApO1xyXG5cclxuICAgIHRoaXMudmlzaWJsZSA9IChcclxuICAgICAgLy8gY29tcG9uZW50cyBhcmUgdmlzaWJsZVxyXG4gICAgICAoIGNvbXBvbmVudFN0eWxlICE9PSBDb21wb25lbnRWZWN0b3JTdHlsZXMuSU5WSVNJQkxFICkgJiZcclxuICAgICAgLy8gc3VtIGlzIHZpc2libGVcclxuICAgICAgKCAhIXRoaXMuc3VtVmlzaWJsZVByb3BlcnR5ICYmIHRoaXMuc3VtVmlzaWJsZVByb3BlcnR5LnZhbHVlICkgJiZcclxuICAgICAgLy8gc3VtIGlzIGRlZmluZWRcclxuICAgICAgY29tcG9uZW50VmVjdG9yLnBhcmVudFZlY3Rvci5pc0RlZmluZWRQcm9wZXJ0eS52YWx1ZVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnU3VtQ29tcG9uZW50VmVjdG9yTm9kZScsIFN1bUNvbXBvbmVudFZlY3Rvck5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsU0FBUyxNQUFNLGtDQUFrQztBQUN4RCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MscUJBQXFCLE1BQU0sbUNBQW1DO0FBQ3JFLE9BQU9DLHVCQUF1QixNQUFNLCtCQUErQjtBQUNuRSxPQUFPQyxtQkFBbUIsTUFBTSwwQkFBMEI7QUFFMUQsZUFBZSxNQUFNQyxzQkFBc0IsU0FBU0QsbUJBQW1CLENBQUM7RUFFdEU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxlQUFlLEVBQ2ZDLEtBQUssRUFDTEMsc0JBQXNCLEVBQ3RCQyxxQkFBcUIsRUFDckJDLGtCQUFrQixFQUNsQkMsT0FBTyxFQUFHO0lBRXJCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsa0JBQWtCLFlBQVliLGVBQWUsRUFBRywrQkFBOEJhLGtCQUFtQixFQUFFLENBQUM7SUFFdEhDLE9BQU8sR0FBR1osS0FBSyxDQUFFO01BQ2ZjLFlBQVksRUFBRWQsS0FBSyxDQUFFLENBQUMsQ0FBQyxFQUFFRyx1QkFBdUIsQ0FBQ1ksa0NBQWtDLEVBQUU7UUFDbkZDLElBQUksRUFBRVQsZUFBZSxDQUFDVSxrQkFBa0IsQ0FBQ0M7TUFDM0MsQ0FBRTtJQUNKLENBQUMsRUFBRU4sT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFTCxlQUFlLEVBQUVDLEtBQUssRUFBRUMsc0JBQXNCLEVBQUVDLHFCQUFxQixFQUFFRSxPQUFRLENBQUM7O0lBRXZGO0lBQ0EsSUFBSSxDQUFDRCxrQkFBa0IsR0FBR0Esa0JBQWtCOztJQUU1QztJQUNBO0lBQ0FaLFNBQVMsQ0FBQ29CLFNBQVMsQ0FDakIsQ0FBRVIsa0JBQWtCLEVBQUVKLGVBQWUsQ0FBQ2EsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBRSxFQUN0RSxNQUFNLElBQUksQ0FBQ0MscUJBQXFCLENBQUVmLGVBQWUsRUFDL0NDLEtBQUssQ0FBQ2UsMEJBQTBCLENBQUNDLEtBQUssRUFDdENmLHNCQUFzQixDQUFDZSxLQUFLLEVBQzVCakIsZUFBZSxDQUFDa0IsNEJBQTRCLENBQUNELEtBQU0sQ0FDdkQsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VFLE9BQU9BLENBQUEsRUFBRztJQUNSYixNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsd0RBQXlELENBQUM7RUFDckY7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFUyxxQkFBcUJBLENBQUVmLGVBQWUsRUFBRW9CLGtCQUFrQixFQUFFQyxjQUFjLEVBQUVDLGNBQWMsRUFBRztJQUMzRixLQUFLLENBQUNQLHFCQUFxQixDQUFFZixlQUFlLEVBQUVvQixrQkFBa0IsRUFBRUMsY0FBYyxFQUFFQyxjQUFlLENBQUM7SUFFbEcsSUFBSSxDQUFDQyxPQUFPO0lBQ1Y7SUFDRUYsY0FBYyxLQUFLMUIscUJBQXFCLENBQUM2QixTQUFTO0lBQ3BEO0lBQ0UsQ0FBQyxDQUFDLElBQUksQ0FBQ3BCLGtCQUFrQixJQUFJLElBQUksQ0FBQ0Esa0JBQWtCLENBQUNhLEtBQU87SUFDOUQ7SUFDQWpCLGVBQWUsQ0FBQ2EsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBQ0csS0FDaEQ7RUFDSDtBQUNGO0FBRUF2QixjQUFjLENBQUMrQixRQUFRLENBQUUsd0JBQXdCLEVBQUUzQixzQkFBdUIsQ0FBQyJ9