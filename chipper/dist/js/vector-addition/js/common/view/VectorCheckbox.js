// Copyright 2019-2023, University of Colorado Boulder

/**
 * VectorCheckbox is a checkbox that is labeled with a vector symbol and vector arrow.
 * It's used to control the visibility of the sum ('c' or 'f') vector in the Equations screen.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import { Color, HBox } from '../../../../scenery/js/imports.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import ArrowOverSymbolNode from './ArrowOverSymbolNode.js';
import VectorAdditionCheckbox from './VectorAdditionCheckbox.js';
import VectorAdditionIconFactory from './VectorAdditionIconFactory.js';
export default class VectorCheckbox extends VectorAdditionCheckbox {
  /**
   * @param {BooleanProperty} vectorVisibleProperty
   * @param {string} symbol
   * @param {Object} [options]
   */
  constructor(vectorVisibleProperty, symbol, options) {
    // Type check arguments
    assert && assert(vectorVisibleProperty instanceof BooleanProperty, `invalid vectorVisibleProperty: ${vectorVisibleProperty}`);
    assert && assert(typeof symbol === 'string', `invalid symbol: ${symbol}`);
    options = merge({
      vectorFill: Color.WHITE,
      vectorStroke: Color.BLACK
    }, options);
    const symbolNode = new ArrowOverSymbolNode(symbol, {
      maxWidth: 95 // determined empirically
    });

    const icon = VectorAdditionIconFactory.createVectorIcon({
      fill: options.vectorFill,
      stroke: options.vectorStroke,
      length: 35
    });
    const content = new HBox({
      spacing: VectorAdditionConstants.CHECKBOX_ICON_SPACING,
      children: [symbolNode, icon]
    });
    super(vectorVisibleProperty, content, options);
  }
}
vectorAddition.register('VectorCheckbox', VectorCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJtZXJnZSIsIkNvbG9yIiwiSEJveCIsInZlY3RvckFkZGl0aW9uIiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJBcnJvd092ZXJTeW1ib2xOb2RlIiwiVmVjdG9yQWRkaXRpb25DaGVja2JveCIsIlZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkiLCJWZWN0b3JDaGVja2JveCIsImNvbnN0cnVjdG9yIiwidmVjdG9yVmlzaWJsZVByb3BlcnR5Iiwic3ltYm9sIiwib3B0aW9ucyIsImFzc2VydCIsInZlY3RvckZpbGwiLCJXSElURSIsInZlY3RvclN0cm9rZSIsIkJMQUNLIiwic3ltYm9sTm9kZSIsIm1heFdpZHRoIiwiaWNvbiIsImNyZWF0ZVZlY3Rvckljb24iLCJmaWxsIiwic3Ryb2tlIiwibGVuZ3RoIiwiY29udGVudCIsInNwYWNpbmciLCJDSEVDS0JPWF9JQ09OX1NQQUNJTkciLCJjaGlsZHJlbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVmVjdG9yQ2hlY2tib3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmVjdG9yQ2hlY2tib3ggaXMgYSBjaGVja2JveCB0aGF0IGlzIGxhYmVsZWQgd2l0aCBhIHZlY3RvciBzeW1ib2wgYW5kIHZlY3RvciBhcnJvdy5cclxuICogSXQncyB1c2VkIHRvIGNvbnRyb2wgdGhlIHZpc2liaWxpdHkgb2YgdGhlIHN1bSAoJ2MnIG9yICdmJykgdmVjdG9yIGluIHRoZSBFcXVhdGlvbnMgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIEhCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vVmVjdG9yQWRkaXRpb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgQXJyb3dPdmVyU3ltYm9sTm9kZSBmcm9tICcuL0Fycm93T3ZlclN5bWJvbE5vZGUuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25DaGVja2JveCBmcm9tICcuL1ZlY3RvckFkZGl0aW9uQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeSBmcm9tICcuL1ZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yQ2hlY2tib3ggZXh0ZW5kcyBWZWN0b3JBZGRpdGlvbkNoZWNrYm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IHZlY3RvclZpc2libGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzeW1ib2xcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHZlY3RvclZpc2libGVQcm9wZXJ0eSwgc3ltYm9sLCBvcHRpb25zICkge1xyXG5cclxuICAgIC8vIFR5cGUgY2hlY2sgYXJndW1lbnRzXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB2ZWN0b3JWaXNpYmxlUHJvcGVydHkgaW5zdGFuY2VvZiBCb29sZWFuUHJvcGVydHksIGBpbnZhbGlkIHZlY3RvclZpc2libGVQcm9wZXJ0eTogJHt2ZWN0b3JWaXNpYmxlUHJvcGVydHl9YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycsIGBpbnZhbGlkIHN5bWJvbDogJHtzeW1ib2x9YCApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICB2ZWN0b3JGaWxsOiBDb2xvci5XSElURSxcclxuICAgICAgdmVjdG9yU3Ryb2tlOiBDb2xvci5CTEFDS1xyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHN5bWJvbE5vZGUgPSBuZXcgQXJyb3dPdmVyU3ltYm9sTm9kZSggc3ltYm9sLCB7XHJcbiAgICAgIG1heFdpZHRoOiA5NSAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkuY3JlYXRlVmVjdG9ySWNvbigge1xyXG4gICAgICBmaWxsOiBvcHRpb25zLnZlY3RvckZpbGwsXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy52ZWN0b3JTdHJva2UsXHJcbiAgICAgIGxlbmd0aDogMzVcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gbmV3IEhCb3goIHtcclxuICAgICAgc3BhY2luZzogVmVjdG9yQWRkaXRpb25Db25zdGFudHMuQ0hFQ0tCT1hfSUNPTl9TUEFDSU5HLFxyXG4gICAgICBjaGlsZHJlbjogWyBzeW1ib2xOb2RlLCBpY29uIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggdmVjdG9yVmlzaWJsZVByb3BlcnR5LCBjb250ZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ1ZlY3RvckNoZWNrYm94JywgVmVjdG9yQ2hlY2tib3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQy9ELE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQUMxRCxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFDaEUsT0FBT0MseUJBQXlCLE1BQU0sZ0NBQWdDO0FBRXRFLGVBQWUsTUFBTUMsY0FBYyxTQUFTRixzQkFBc0IsQ0FBQztFQUVqRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLHFCQUFxQixFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRztJQUVwRDtJQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgscUJBQXFCLFlBQVlYLGVBQWUsRUFBRyxrQ0FBaUNXLHFCQUFzQixFQUFFLENBQUM7SUFDL0hHLE1BQU0sSUFBSUEsTUFBTSxDQUFFLE9BQU9GLE1BQU0sS0FBSyxRQUFRLEVBQUcsbUJBQWtCQSxNQUFPLEVBQUUsQ0FBQztJQUUzRUMsT0FBTyxHQUFHWixLQUFLLENBQUU7TUFDZmMsVUFBVSxFQUFFYixLQUFLLENBQUNjLEtBQUs7TUFDdkJDLFlBQVksRUFBRWYsS0FBSyxDQUFDZ0I7SUFDdEIsQ0FBQyxFQUFFTCxPQUFRLENBQUM7SUFFWixNQUFNTSxVQUFVLEdBQUcsSUFBSWIsbUJBQW1CLENBQUVNLE1BQU0sRUFBRTtNQUNsRFEsUUFBUSxFQUFFLEVBQUUsQ0FBQztJQUNmLENBQUUsQ0FBQzs7SUFFSCxNQUFNQyxJQUFJLEdBQUdiLHlCQUF5QixDQUFDYyxnQkFBZ0IsQ0FBRTtNQUN2REMsSUFBSSxFQUFFVixPQUFPLENBQUNFLFVBQVU7TUFDeEJTLE1BQU0sRUFBRVgsT0FBTyxDQUFDSSxZQUFZO01BQzVCUSxNQUFNLEVBQUU7SUFDVixDQUFFLENBQUM7SUFFSCxNQUFNQyxPQUFPLEdBQUcsSUFBSXZCLElBQUksQ0FBRTtNQUN4QndCLE9BQU8sRUFBRXRCLHVCQUF1QixDQUFDdUIscUJBQXFCO01BQ3REQyxRQUFRLEVBQUUsQ0FBRVYsVUFBVSxFQUFFRSxJQUFJO0lBQzlCLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVYscUJBQXFCLEVBQUVlLE9BQU8sRUFBRWIsT0FBUSxDQUFDO0VBQ2xEO0FBQ0Y7QUFFQVQsY0FBYyxDQUFDMEIsUUFBUSxDQUFFLGdCQUFnQixFQUFFckIsY0FBZSxDQUFDIn0=