// Copyright 2019-2023, University of Colorado Boulder

/**
 * Base class for the top-level view of each screen.
 *
 * @author Martin Veillette
 */

import ScreenView from '../../../../joist/js/ScreenView.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionModel from '../model/VectorAdditionModel.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
export default class VectorAdditionScreenView extends ScreenView {
  /**
   * @abstract
   * @param {VectorAdditionModel} model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    assert && assert(model instanceof VectorAdditionModel, `invalid model: ${model}`);
    assert && assert(tandem instanceof Tandem, `invalid tandem: ${tandem}`);
    super({
      layoutBounds: VectorAdditionConstants.SCREEN_VIEW_BOUNDS,
      tandem: tandem
    });

    // @protected for layout
    this.resetAllButton = new ResetAllButton({
      listener: () => {
        model.reset();
        this.reset();
      },
      right: this.layoutBounds.maxX - VectorAdditionConstants.SCREEN_VIEW_X_MARGIN,
      bottom: this.layoutBounds.maxY - VectorAdditionConstants.SCREEN_VIEW_Y_MARGIN,
      tandem: tandem.createTandem('resetAllButton')
    });
    this.addChild(this.resetAllButton);
  }

  /**
   * @public
   * @override
   */
  dispose() {
    assert && assert(false, 'VectorAdditionScreenView is not intended to be disposed');
  }

  /**
   * @public
   */
  reset() {
    // cancel any interactions that are in progress
    this.interruptSubtreeInput();
  }
}
vectorAddition.register('VectorAdditionScreenView', VectorAdditionScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW5WaWV3IiwiUmVzZXRBbGxCdXR0b24iLCJUYW5kZW0iLCJ2ZWN0b3JBZGRpdGlvbiIsIlZlY3RvckFkZGl0aW9uTW9kZWwiLCJWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyIsIlZlY3RvckFkZGl0aW9uU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJhc3NlcnQiLCJsYXlvdXRCb3VuZHMiLCJTQ1JFRU5fVklFV19CT1VORFMiLCJyZXNldEFsbEJ1dHRvbiIsImxpc3RlbmVyIiwicmVzZXQiLCJyaWdodCIsIm1heFgiLCJTQ1JFRU5fVklFV19YX01BUkdJTiIsImJvdHRvbSIsIm1heFkiLCJTQ1JFRU5fVklFV19ZX01BUkdJTiIsImNyZWF0ZVRhbmRlbSIsImFkZENoaWxkIiwiZGlzcG9zZSIsImludGVycnVwdFN1YnRyZWVJbnB1dCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVmVjdG9yQWRkaXRpb25TY3JlZW5WaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIHRoZSB0b3AtbGV2ZWwgdmlldyBvZiBlYWNoIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNjcmVlblZpZXcgZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBSZXNldEFsbEJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvYnV0dG9ucy9SZXNldEFsbEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbk1vZGVsIGZyb20gJy4uL21vZGVsL1ZlY3RvckFkZGl0aW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vVmVjdG9yQWRkaXRpb25Db25zdGFudHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yQWRkaXRpb25TY3JlZW5WaWV3IGV4dGVuZHMgU2NyZWVuVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBhYnN0cmFjdFxyXG4gICAqIEBwYXJhbSB7VmVjdG9yQWRkaXRpb25Nb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCB0YW5kZW0gKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbW9kZWwgaW5zdGFuY2VvZiBWZWN0b3JBZGRpdGlvbk1vZGVsLCBgaW52YWxpZCBtb2RlbDogJHttb2RlbH1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0YW5kZW0gaW5zdGFuY2VvZiBUYW5kZW0sIGBpbnZhbGlkIHRhbmRlbTogJHt0YW5kZW19YCApO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGxheW91dEJvdW5kczogVmVjdG9yQWRkaXRpb25Db25zdGFudHMuU0NSRUVOX1ZJRVdfQk9VTkRTLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwcm90ZWN0ZWQgZm9yIGxheW91dFxyXG4gICAgdGhpcy5yZXNldEFsbEJ1dHRvbiA9IG5ldyBSZXNldEFsbEJ1dHRvbigge1xyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG4gICAgICAgIG1vZGVsLnJlc2V0KCk7XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICB9LFxyXG4gICAgICByaWdodDogdGhpcy5sYXlvdXRCb3VuZHMubWF4WCAtIFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLlNDUkVFTl9WSUVXX1hfTUFSR0lOLFxyXG4gICAgICBib3R0b206IHRoaXMubGF5b3V0Qm91bmRzLm1heFkgLSBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5TQ1JFRU5fVklFV19ZX01BUkdJTixcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncmVzZXRBbGxCdXR0b24nIClcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRoaXMucmVzZXRBbGxCdXR0b24gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdWZWN0b3JBZGRpdGlvblNjcmVlblZpZXcgaXMgbm90IGludGVuZGVkIHRvIGJlIGRpc3Bvc2VkJyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG5cclxuICAgIC8vIGNhbmNlbCBhbnkgaW50ZXJhY3Rpb25zIHRoYXQgYXJlIGluIHByb2dyZXNzXHJcbiAgICB0aGlzLmludGVycnVwdFN1YnRyZWVJbnB1dCgpO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdWZWN0b3JBZGRpdGlvblNjcmVlblZpZXcnLCBWZWN0b3JBZGRpdGlvblNjcmVlblZpZXcgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLG9DQUFvQztBQUMzRCxPQUFPQyxjQUFjLE1BQU0sdURBQXVEO0FBQ2xGLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxtQkFBbUIsTUFBTSxpQ0FBaUM7QUFDakUsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBRW5FLGVBQWUsTUFBTUMsd0JBQXdCLFNBQVNOLFVBQVUsQ0FBQztFQUUvRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VPLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFHO0lBRTNCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsS0FBSyxZQUFZSixtQkFBbUIsRUFBRyxrQkFBaUJJLEtBQU0sRUFBRSxDQUFDO0lBQ25GRSxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsTUFBTSxZQUFZUCxNQUFNLEVBQUcsbUJBQWtCTyxNQUFPLEVBQUUsQ0FBQztJQUV6RSxLQUFLLENBQUU7TUFDTEUsWUFBWSxFQUFFTix1QkFBdUIsQ0FBQ08sa0JBQWtCO01BQ3hESCxNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDSSxjQUFjLEdBQUcsSUFBSVosY0FBYyxDQUFFO01BQ3hDYSxRQUFRLEVBQUVBLENBQUEsS0FBTTtRQUNkTixLQUFLLENBQUNPLEtBQUssQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDQSxLQUFLLENBQUMsQ0FBQztNQUNkLENBQUM7TUFDREMsS0FBSyxFQUFFLElBQUksQ0FBQ0wsWUFBWSxDQUFDTSxJQUFJLEdBQUdaLHVCQUF1QixDQUFDYSxvQkFBb0I7TUFDNUVDLE1BQU0sRUFBRSxJQUFJLENBQUNSLFlBQVksQ0FBQ1MsSUFBSSxHQUFHZix1QkFBdUIsQ0FBQ2dCLG9CQUFvQjtNQUM3RVosTUFBTSxFQUFFQSxNQUFNLENBQUNhLFlBQVksQ0FBRSxnQkFBaUI7SUFDaEQsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSSxDQUFDVixjQUFlLENBQUM7RUFDdEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRVcsT0FBT0EsQ0FBQSxFQUFHO0lBQ1JkLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSx5REFBMEQsQ0FBQztFQUN0Rjs7RUFFQTtBQUNGO0FBQ0E7RUFDRUssS0FBS0EsQ0FBQSxFQUFHO0lBRU47SUFDQSxJQUFJLENBQUNVLHFCQUFxQixDQUFDLENBQUM7RUFDOUI7QUFDRjtBQUVBdEIsY0FBYyxDQUFDdUIsUUFBUSxDQUFFLDBCQUEwQixFQUFFcEIsd0JBQXlCLENBQUMifQ==