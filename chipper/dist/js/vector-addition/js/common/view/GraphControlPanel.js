// Copyright 2019-2023, University of Colorado Boulder

/**
 * GraphControlPanel is the base class for graph control panels. These panels contain controls that affect the graph.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import { VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
export default class GraphControlPanel extends Panel {
  /**
   * @param {Node[]} children
   * @param {Object} [options]
   */
  constructor(children, options) {
    options = merge({}, VectorAdditionConstants.PANEL_OPTIONS, options);
    const content = new VBox({
      children: children,
      spacing: VectorAdditionConstants.GRAPH_CONTROL_PANEL_Y_SPACING,
      align: 'left'
    });

    // Make the panel a fixed width
    assert && assert(options.minWidth === undefined, 'GraphControlPanel sets minWidth');
    assert && assert(options.maxWidth === undefined, 'GraphControlPanel sets maxWidth');
    const panelWidth = VectorAdditionConstants.GRAPH_CONTROL_PANEL_CONTENT_WIDTH + 2 * options.xMargin;
    options.minWidth = panelWidth;
    options.maxWidth = panelWidth;
    super(content, options);
  }

  /**
   * @public
   * @override
   */
  dispose() {
    assert && assert(false, 'GraphControlPanel is not intended to be disposed');
  }
}
vectorAddition.register('GraphControlPanel', GraphControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlZCb3giLCJQYW5lbCIsInZlY3RvckFkZGl0aW9uIiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJHcmFwaENvbnRyb2xQYW5lbCIsImNvbnN0cnVjdG9yIiwiY2hpbGRyZW4iLCJvcHRpb25zIiwiUEFORUxfT1BUSU9OUyIsImNvbnRlbnQiLCJzcGFjaW5nIiwiR1JBUEhfQ09OVFJPTF9QQU5FTF9ZX1NQQUNJTkciLCJhbGlnbiIsImFzc2VydCIsIm1pbldpZHRoIiwidW5kZWZpbmVkIiwibWF4V2lkdGgiLCJwYW5lbFdpZHRoIiwiR1JBUEhfQ09OVFJPTF9QQU5FTF9DT05URU5UX1dJRFRIIiwieE1hcmdpbiIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyYXBoQ29udHJvbFBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdyYXBoQ29udHJvbFBhbmVsIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBncmFwaCBjb250cm9sIHBhbmVscy4gVGhlc2UgcGFuZWxzIGNvbnRhaW4gY29udHJvbHMgdGhhdCBhZmZlY3QgdGhlIGdyYXBoLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vVmVjdG9yQWRkaXRpb25Db25zdGFudHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhDb250cm9sUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Tm9kZVtdfSBjaGlsZHJlblxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY2hpbGRyZW4sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7fSwgVmVjdG9yQWRkaXRpb25Db25zdGFudHMuUEFORUxfT1BUSU9OUywgb3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgVkJveCgge1xyXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXHJcbiAgICAgIHNwYWNpbmc6IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLkdSQVBIX0NPTlRST0xfUEFORUxfWV9TUEFDSU5HLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gTWFrZSB0aGUgcGFuZWwgYSBmaXhlZCB3aWR0aFxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy5taW5XaWR0aCA9PT0gdW5kZWZpbmVkLCAnR3JhcGhDb250cm9sUGFuZWwgc2V0cyBtaW5XaWR0aCcgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMubWF4V2lkdGggPT09IHVuZGVmaW5lZCwgJ0dyYXBoQ29udHJvbFBhbmVsIHNldHMgbWF4V2lkdGgnICk7XHJcbiAgICBjb25zdCBwYW5lbFdpZHRoID0gVmVjdG9yQWRkaXRpb25Db25zdGFudHMuR1JBUEhfQ09OVFJPTF9QQU5FTF9DT05URU5UX1dJRFRIICsgKCAyICogb3B0aW9ucy54TWFyZ2luICk7XHJcbiAgICBvcHRpb25zLm1pbldpZHRoID0gcGFuZWxXaWR0aDtcclxuICAgIG9wdGlvbnMubWF4V2lkdGggPSBwYW5lbFdpZHRoO1xyXG5cclxuICAgIHN1cGVyKCBjb250ZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnR3JhcGhDb250cm9sUGFuZWwgaXMgbm90IGludGVuZGVkIHRvIGJlIGRpc3Bvc2VkJyApO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdHcmFwaENvbnRyb2xQYW5lbCcsIEdyYXBoQ29udHJvbFBhbmVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyx1QkFBdUIsTUFBTSwrQkFBK0I7QUFFbkUsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU0gsS0FBSyxDQUFDO0VBRW5EO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFHO0lBRS9CQSxPQUFPLEdBQUdSLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRUksdUJBQXVCLENBQUNLLGFBQWEsRUFBRUQsT0FBUSxDQUFDO0lBRXJFLE1BQU1FLE9BQU8sR0FBRyxJQUFJVCxJQUFJLENBQUU7TUFDeEJNLFFBQVEsRUFBRUEsUUFBUTtNQUNsQkksT0FBTyxFQUFFUCx1QkFBdUIsQ0FBQ1EsNkJBQTZCO01BQzlEQyxLQUFLLEVBQUU7SUFDVCxDQUFFLENBQUM7O0lBRUg7SUFDQUMsTUFBTSxJQUFJQSxNQUFNLENBQUVOLE9BQU8sQ0FBQ08sUUFBUSxLQUFLQyxTQUFTLEVBQUUsaUNBQWtDLENBQUM7SUFDckZGLE1BQU0sSUFBSUEsTUFBTSxDQUFFTixPQUFPLENBQUNTLFFBQVEsS0FBS0QsU0FBUyxFQUFFLGlDQUFrQyxDQUFDO0lBQ3JGLE1BQU1FLFVBQVUsR0FBR2QsdUJBQXVCLENBQUNlLGlDQUFpQyxHQUFLLENBQUMsR0FBR1gsT0FBTyxDQUFDWSxPQUFTO0lBQ3RHWixPQUFPLENBQUNPLFFBQVEsR0FBR0csVUFBVTtJQUM3QlYsT0FBTyxDQUFDUyxRQUFRLEdBQUdDLFVBQVU7SUFFN0IsS0FBSyxDQUFFUixPQUFPLEVBQUVGLE9BQVEsQ0FBQztFQUMzQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFYSxPQUFPQSxDQUFBLEVBQUc7SUFDUlAsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLGtEQUFtRCxDQUFDO0VBQy9FO0FBQ0Y7QUFFQVgsY0FBYyxDQUFDbUIsUUFBUSxDQUFFLG1CQUFtQixFQUFFakIsaUJBQWtCLENBQUMifQ==