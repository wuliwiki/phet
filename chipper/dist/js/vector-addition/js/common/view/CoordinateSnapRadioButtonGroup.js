// Copyright 2019-2023, University of Colorado Boulder

/**
 * Radio button group for switching between polar and Cartesian snap modes.
 *
 * See https://github.com/phetsims/vector-addition/issues/21 for a visual.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import vectorAddition from '../../vectorAddition.js';
import CoordinateSnapModes from '../model/CoordinateSnapModes.js';
import VectorColorPalette from '../model/VectorColorPalette.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import VectorAdditionIconFactory from './VectorAdditionIconFactory.js';
export default class CoordinateSnapRadioButtonGroup extends RectangularRadioButtonGroup {
  /**
   * @param {EnumerationProperty.<CoordinateSnapModes>} coordinateSnapModeProperty
   * @param {VectorColorPalette} cartesianVectorColorPalette
   * @param {VectorColorPalette} polarVectorColorPalette
   * @param {Object} [options]
   */
  constructor(coordinateSnapModeProperty, cartesianVectorColorPalette, polarVectorColorPalette, options) {
    assert && assert(coordinateSnapModeProperty instanceof EnumerationProperty && CoordinateSnapModes.enumeration.includes(coordinateSnapModeProperty.value), `invalid coordinateSnapModeProperty: ${coordinateSnapModeProperty}`);
    assert && assert(cartesianVectorColorPalette instanceof VectorColorPalette, `invalid cartesianVectorColorPalette: ${cartesianVectorColorPalette}`);
    assert && assert(polarVectorColorPalette instanceof VectorColorPalette, `invalid polarVectorColorPalette: ${polarVectorColorPalette}`);
    assert && assert(!options || Object.getPrototypeOf(options) === Object.prototype, `Extra prototype on options: ${options}`);
    options = merge({}, VectorAdditionConstants.RADIO_BUTTON_GROUP_OPTIONS, options);

    // Create the description of the buttons
    const content = [{
      value: CoordinateSnapModes.CARTESIAN,
      createNode: () => VectorAdditionIconFactory.createCartesianSnapModeIcon(cartesianVectorColorPalette)
    }, {
      value: CoordinateSnapModes.POLAR,
      createNode: () => VectorAdditionIconFactory.createPolarSnapModeIcon(polarVectorColorPalette)
    }];
    super(coordinateSnapModeProperty, content, options);
  }

  /**
   * @public
   * @override
   */
  dispose() {
    assert && assert(false, 'CoordinateSnapRadioButtonGroup is not intended to be disposed');
  }
}
vectorAddition.register('CoordinateSnapRadioButtonGroup', CoordinateSnapRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvblByb3BlcnR5IiwibWVyZ2UiLCJSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAiLCJ2ZWN0b3JBZGRpdGlvbiIsIkNvb3JkaW5hdGVTbmFwTW9kZXMiLCJWZWN0b3JDb2xvclBhbGV0dGUiLCJWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyIsIlZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkiLCJDb29yZGluYXRlU25hcFJhZGlvQnV0dG9uR3JvdXAiLCJjb25zdHJ1Y3RvciIsImNvb3JkaW5hdGVTbmFwTW9kZVByb3BlcnR5IiwiY2FydGVzaWFuVmVjdG9yQ29sb3JQYWxldHRlIiwicG9sYXJWZWN0b3JDb2xvclBhbGV0dGUiLCJvcHRpb25zIiwiYXNzZXJ0IiwiZW51bWVyYXRpb24iLCJpbmNsdWRlcyIsInZhbHVlIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJSQURJT19CVVRUT05fR1JPVVBfT1BUSU9OUyIsImNvbnRlbnQiLCJDQVJURVNJQU4iLCJjcmVhdGVOb2RlIiwiY3JlYXRlQ2FydGVzaWFuU25hcE1vZGVJY29uIiwiUE9MQVIiLCJjcmVhdGVQb2xhclNuYXBNb2RlSWNvbiIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvb3JkaW5hdGVTbmFwUmFkaW9CdXR0b25Hcm91cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSYWRpbyBidXR0b24gZ3JvdXAgZm9yIHN3aXRjaGluZyBiZXR3ZWVuIHBvbGFyIGFuZCBDYXJ0ZXNpYW4gc25hcCBtb2Rlcy5cclxuICpcclxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzIxIGZvciBhIHZpc3VhbC5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IHZlY3RvckFkZGl0aW9uIGZyb20gJy4uLy4uL3ZlY3RvckFkZGl0aW9uLmpzJztcclxuaW1wb3J0IENvb3JkaW5hdGVTbmFwTW9kZXMgZnJvbSAnLi4vbW9kZWwvQ29vcmRpbmF0ZVNuYXBNb2Rlcy5qcyc7XHJcbmltcG9ydCBWZWN0b3JDb2xvclBhbGV0dGUgZnJvbSAnLi4vbW9kZWwvVmVjdG9yQ29sb3JQYWxldHRlLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkgZnJvbSAnLi9WZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvb3JkaW5hdGVTbmFwUmFkaW9CdXR0b25Hcm91cCBleHRlbmRzIFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RW51bWVyYXRpb25Qcm9wZXJ0eS48Q29vcmRpbmF0ZVNuYXBNb2Rlcz59IGNvb3JkaW5hdGVTbmFwTW9kZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtWZWN0b3JDb2xvclBhbGV0dGV9IGNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZVxyXG4gICAqIEBwYXJhbSB7VmVjdG9yQ29sb3JQYWxldHRlfSBwb2xhclZlY3RvckNvbG9yUGFsZXR0ZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY29vcmRpbmF0ZVNuYXBNb2RlUHJvcGVydHksIGNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZSwgcG9sYXJWZWN0b3JDb2xvclBhbGV0dGUsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggY29vcmRpbmF0ZVNuYXBNb2RlUHJvcGVydHkgaW5zdGFuY2VvZiBFbnVtZXJhdGlvblByb3BlcnR5ICYmIENvb3JkaW5hdGVTbmFwTW9kZXMuZW51bWVyYXRpb24uaW5jbHVkZXMoIGNvb3JkaW5hdGVTbmFwTW9kZVByb3BlcnR5LnZhbHVlICksXHJcbiAgICAgIGBpbnZhbGlkIGNvb3JkaW5hdGVTbmFwTW9kZVByb3BlcnR5OiAke2Nvb3JkaW5hdGVTbmFwTW9kZVByb3BlcnR5fWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZSBpbnN0YW5jZW9mIFZlY3RvckNvbG9yUGFsZXR0ZSwgYGludmFsaWQgY2FydGVzaWFuVmVjdG9yQ29sb3JQYWxldHRlOiAke2NhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBwb2xhclZlY3RvckNvbG9yUGFsZXR0ZSBpbnN0YW5jZW9mIFZlY3RvckNvbG9yUGFsZXR0ZSwgYGludmFsaWQgcG9sYXJWZWN0b3JDb2xvclBhbGV0dGU6ICR7cG9sYXJWZWN0b3JDb2xvclBhbGV0dGV9YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKCBvcHRpb25zICkgPT09IE9iamVjdC5wcm90b3R5cGUsIGBFeHRyYSBwcm90b3R5cGUgb24gb3B0aW9uczogJHtvcHRpb25zfWAgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5SQURJT19CVVRUT05fR1JPVVBfT1BUSU9OUywgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1dHRvbnNcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogQ29vcmRpbmF0ZVNuYXBNb2Rlcy5DQVJURVNJQU4sXHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeS5jcmVhdGVDYXJ0ZXNpYW5TbmFwTW9kZUljb24oIGNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZSApXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogQ29vcmRpbmF0ZVNuYXBNb2Rlcy5QT0xBUixcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBWZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5LmNyZWF0ZVBvbGFyU25hcE1vZGVJY29uKCBwb2xhclZlY3RvckNvbG9yUGFsZXR0ZSApXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIGNvb3JkaW5hdGVTbmFwTW9kZVByb3BlcnR5LCBjb250ZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnQ29vcmRpbmF0ZVNuYXBSYWRpb0J1dHRvbkdyb3VwIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBkaXNwb3NlZCcgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnQ29vcmRpbmF0ZVNuYXBSYWRpb0J1dHRvbkdyb3VwJywgQ29vcmRpbmF0ZVNuYXBSYWRpb0J1dHRvbkdyb3VwICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLG1CQUFtQixNQUFNLDRDQUE0QztBQUM1RSxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLDJCQUEyQixNQUFNLDJEQUEyRDtBQUNuRyxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLG1CQUFtQixNQUFNLGlDQUFpQztBQUNqRSxPQUFPQyxrQkFBa0IsTUFBTSxnQ0FBZ0M7QUFDL0QsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLHlCQUF5QixNQUFNLGdDQUFnQztBQUV0RSxlQUFlLE1BQU1DLDhCQUE4QixTQUFTTiwyQkFBMkIsQ0FBQztFQUV0RjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRU8sV0FBV0EsQ0FBRUMsMEJBQTBCLEVBQUVDLDJCQUEyQixFQUFFQyx1QkFBdUIsRUFBRUMsT0FBTyxFQUFHO0lBRXZHQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUosMEJBQTBCLFlBQVlWLG1CQUFtQixJQUFJSSxtQkFBbUIsQ0FBQ1csV0FBVyxDQUFDQyxRQUFRLENBQUVOLDBCQUEwQixDQUFDTyxLQUFNLENBQUMsRUFDeEosdUNBQXNDUCwwQkFBMkIsRUFBRSxDQUFDO0lBQ3ZFSSxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsMkJBQTJCLFlBQVlOLGtCQUFrQixFQUFHLHdDQUF1Q00sMkJBQTRCLEVBQUUsQ0FBQztJQUNwSkcsTUFBTSxJQUFJQSxNQUFNLENBQUVGLHVCQUF1QixZQUFZUCxrQkFBa0IsRUFBRyxvQ0FBbUNPLHVCQUF3QixFQUFFLENBQUM7SUFDeElFLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNELE9BQU8sSUFBSUssTUFBTSxDQUFDQyxjQUFjLENBQUVOLE9BQVEsQ0FBQyxLQUFLSyxNQUFNLENBQUNFLFNBQVMsRUFBRywrQkFBOEJQLE9BQVEsRUFBRSxDQUFDO0lBRS9IQSxPQUFPLEdBQUdaLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRUssdUJBQXVCLENBQUNlLDBCQUEwQixFQUFFUixPQUFRLENBQUM7O0lBRWxGO0lBQ0EsTUFBTVMsT0FBTyxHQUFHLENBQ2Q7TUFDRUwsS0FBSyxFQUFFYixtQkFBbUIsQ0FBQ21CLFNBQVM7TUFDcENDLFVBQVUsRUFBRUEsQ0FBQSxLQUFNakIseUJBQXlCLENBQUNrQiwyQkFBMkIsQ0FBRWQsMkJBQTRCO0lBQ3ZHLENBQUMsRUFDRDtNQUNFTSxLQUFLLEVBQUViLG1CQUFtQixDQUFDc0IsS0FBSztNQUNoQ0YsVUFBVSxFQUFFQSxDQUFBLEtBQU1qQix5QkFBeUIsQ0FBQ29CLHVCQUF1QixDQUFFZix1QkFBd0I7SUFDL0YsQ0FBQyxDQUNGO0lBRUQsS0FBSyxDQUFFRiwwQkFBMEIsRUFBRVksT0FBTyxFQUFFVCxPQUFRLENBQUM7RUFDdkQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRWUsT0FBT0EsQ0FBQSxFQUFHO0lBQ1JkLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSwrREFBZ0UsQ0FBQztFQUM1RjtBQUNGO0FBRUFYLGNBQWMsQ0FBQzBCLFFBQVEsQ0FBRSxnQ0FBZ0MsRUFBRXJCLDhCQUErQixDQUFDIn0=