// Copyright 2019-2023, University of Colorado Boulder

/**
 * CartesianBaseVector is the subclass of BaseVector used with CoordinateSnapModes.CARTESIAN.
 * It creates NumberProperties for the x and y components that are controlled by NumberPickers, and
 * adjusts its x and y components based on the values of those Properties.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import vectorAddition from '../../vectorAddition.js';
import BaseVector from './BaseVector.js';
import CoordinateSnapModes from './CoordinateSnapModes.js';
export default class CartesianBaseVector extends BaseVector {
  /**
   * @param {Vector2} initialTailPosition - starting tail position of the Base Vector
   * @param {Vector2} initialComponents - starting components of the Base Vector
   * @param {EquationsGraph} graph - the graph the Base Vector belongs to
   * @param {EquationsVectorSet} vectorSet - the set that the Base Vector belongs to
   * @param {string|null} symbol - the symbol for the Base Vector (e.g. 'a', 'b', 'c', ...)
   */
  constructor(initialTailPosition, initialComponents, graph, vectorSet, symbol) {
    assert && assert(graph.coordinateSnapMode === CoordinateSnapModes.CARTESIAN, `invalid coordinateSnapMode: ${graph.coordinateSnapMode}`);
    super(initialTailPosition, initialComponents, graph, vectorSet, symbol);

    // @public (read-only) Property to set the x component
    this.xComponentProperty = new NumberProperty(this.xComponent);

    // @public (read-only) Property to set the y component
    this.yComponentProperty = new NumberProperty(this.yComponent);

    // Observe when the component NumberProperties change and update the components to match.
    // unlink is unnecessary, exists for the lifetime of the sim.
    this.xComponentProperty.link(xComponent => {
      this.xComponent = xComponent;
    });
    this.yComponentProperty.link(yComponent => {
      this.yComponent = yComponent;
    });
  }

  /**
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.xComponentProperty.reset();
    this.yComponentProperty.reset();
  }
}
vectorAddition.register('CartesianBaseVector', CartesianBaseVector);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsInZlY3RvckFkZGl0aW9uIiwiQmFzZVZlY3RvciIsIkNvb3JkaW5hdGVTbmFwTW9kZXMiLCJDYXJ0ZXNpYW5CYXNlVmVjdG9yIiwiY29uc3RydWN0b3IiLCJpbml0aWFsVGFpbFBvc2l0aW9uIiwiaW5pdGlhbENvbXBvbmVudHMiLCJncmFwaCIsInZlY3RvclNldCIsInN5bWJvbCIsImFzc2VydCIsImNvb3JkaW5hdGVTbmFwTW9kZSIsIkNBUlRFU0lBTiIsInhDb21wb25lbnRQcm9wZXJ0eSIsInhDb21wb25lbnQiLCJ5Q29tcG9uZW50UHJvcGVydHkiLCJ5Q29tcG9uZW50IiwibGluayIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDYXJ0ZXNpYW5CYXNlVmVjdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENhcnRlc2lhbkJhc2VWZWN0b3IgaXMgdGhlIHN1YmNsYXNzIG9mIEJhc2VWZWN0b3IgdXNlZCB3aXRoIENvb3JkaW5hdGVTbmFwTW9kZXMuQ0FSVEVTSUFOLlxyXG4gKiBJdCBjcmVhdGVzIE51bWJlclByb3BlcnRpZXMgZm9yIHRoZSB4IGFuZCB5IGNvbXBvbmVudHMgdGhhdCBhcmUgY29udHJvbGxlZCBieSBOdW1iZXJQaWNrZXJzLCBhbmRcclxuICogYWRqdXN0cyBpdHMgeCBhbmQgeSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSB2YWx1ZXMgb2YgdGhvc2UgUHJvcGVydGllcy5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgQmFzZVZlY3RvciBmcm9tICcuL0Jhc2VWZWN0b3IuanMnO1xyXG5pbXBvcnQgQ29vcmRpbmF0ZVNuYXBNb2RlcyBmcm9tICcuL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FydGVzaWFuQmFzZVZlY3RvciBleHRlbmRzIEJhc2VWZWN0b3Ige1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IGluaXRpYWxUYWlsUG9zaXRpb24gLSBzdGFydGluZyB0YWlsIHBvc2l0aW9uIG9mIHRoZSBCYXNlIFZlY3RvclxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gaW5pdGlhbENvbXBvbmVudHMgLSBzdGFydGluZyBjb21wb25lbnRzIG9mIHRoZSBCYXNlIFZlY3RvclxyXG4gICAqIEBwYXJhbSB7RXF1YXRpb25zR3JhcGh9IGdyYXBoIC0gdGhlIGdyYXBoIHRoZSBCYXNlIFZlY3RvciBiZWxvbmdzIHRvXHJcbiAgICogQHBhcmFtIHtFcXVhdGlvbnNWZWN0b3JTZXR9IHZlY3RvclNldCAtIHRoZSBzZXQgdGhhdCB0aGUgQmFzZSBWZWN0b3IgYmVsb25ncyB0b1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHN5bWJvbCAtIHRoZSBzeW1ib2wgZm9yIHRoZSBCYXNlIFZlY3RvciAoZS5nLiAnYScsICdiJywgJ2MnLCAuLi4pXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGluaXRpYWxUYWlsUG9zaXRpb24sIGluaXRpYWxDb21wb25lbnRzLCBncmFwaCwgdmVjdG9yU2V0LCBzeW1ib2wgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZ3JhcGguY29vcmRpbmF0ZVNuYXBNb2RlID09PSBDb29yZGluYXRlU25hcE1vZGVzLkNBUlRFU0lBTiwgYGludmFsaWQgY29vcmRpbmF0ZVNuYXBNb2RlOiAke2dyYXBoLmNvb3JkaW5hdGVTbmFwTW9kZX1gICk7XHJcblxyXG4gICAgc3VwZXIoIGluaXRpYWxUYWlsUG9zaXRpb24sIGluaXRpYWxDb21wb25lbnRzLCBncmFwaCwgdmVjdG9yU2V0LCBzeW1ib2wgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIFByb3BlcnR5IHRvIHNldCB0aGUgeCBjb21wb25lbnRcclxuICAgIHRoaXMueENvbXBvbmVudFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCB0aGlzLnhDb21wb25lbnQgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIFByb3BlcnR5IHRvIHNldCB0aGUgeSBjb21wb25lbnRcclxuICAgIHRoaXMueUNvbXBvbmVudFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCB0aGlzLnlDb21wb25lbnQgKTtcclxuXHJcbiAgICAvLyBPYnNlcnZlIHdoZW4gdGhlIGNvbXBvbmVudCBOdW1iZXJQcm9wZXJ0aWVzIGNoYW5nZSBhbmQgdXBkYXRlIHRoZSBjb21wb25lbnRzIHRvIG1hdGNoLlxyXG4gICAgLy8gdW5saW5rIGlzIHVubmVjZXNzYXJ5LCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltLlxyXG4gICAgdGhpcy54Q29tcG9uZW50UHJvcGVydHkubGluayggeENvbXBvbmVudCA9PiB7IHRoaXMueENvbXBvbmVudCA9IHhDb21wb25lbnQ7IH0gKTtcclxuICAgIHRoaXMueUNvbXBvbmVudFByb3BlcnR5LmxpbmsoIHlDb21wb25lbnQgPT4geyB0aGlzLnlDb21wb25lbnQgPSB5Q29tcG9uZW50OyB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy54Q29tcG9uZW50UHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMueUNvbXBvbmVudFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ0NhcnRlc2lhbkJhc2VWZWN0b3InLCBDYXJ0ZXNpYW5CYXNlVmVjdG9yICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxVQUFVLE1BQU0saUJBQWlCO0FBQ3hDLE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQUUxRCxlQUFlLE1BQU1DLG1CQUFtQixTQUFTRixVQUFVLENBQUM7RUFFMUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsbUJBQW1CLEVBQUVDLGlCQUFpQixFQUFFQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFHO0lBRTlFQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsS0FBSyxDQUFDSSxrQkFBa0IsS0FBS1QsbUJBQW1CLENBQUNVLFNBQVMsRUFBRywrQkFBOEJMLEtBQUssQ0FBQ0ksa0JBQW1CLEVBQUUsQ0FBQztJQUV6SSxLQUFLLENBQUVOLG1CQUFtQixFQUFFQyxpQkFBaUIsRUFBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLE1BQU8sQ0FBQzs7SUFFekU7SUFDQSxJQUFJLENBQUNJLGtCQUFrQixHQUFHLElBQUlkLGNBQWMsQ0FBRSxJQUFJLENBQUNlLFVBQVcsQ0FBQzs7SUFFL0Q7SUFDQSxJQUFJLENBQUNDLGtCQUFrQixHQUFHLElBQUloQixjQUFjLENBQUUsSUFBSSxDQUFDaUIsVUFBVyxDQUFDOztJQUUvRDtJQUNBO0lBQ0EsSUFBSSxDQUFDSCxrQkFBa0IsQ0FBQ0ksSUFBSSxDQUFFSCxVQUFVLElBQUk7TUFBRSxJQUFJLENBQUNBLFVBQVUsR0FBR0EsVUFBVTtJQUFFLENBQUUsQ0FBQztJQUMvRSxJQUFJLENBQUNDLGtCQUFrQixDQUFDRSxJQUFJLENBQUVELFVBQVUsSUFBSTtNQUFFLElBQUksQ0FBQ0EsVUFBVSxHQUFHQSxVQUFVO0lBQUUsQ0FBRSxDQUFDO0VBQ2pGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VFLEtBQUtBLENBQUEsRUFBRztJQUNOLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7SUFDYixJQUFJLENBQUNMLGtCQUFrQixDQUFDSyxLQUFLLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUNILGtCQUFrQixDQUFDRyxLQUFLLENBQUMsQ0FBQztFQUNqQztBQUNGO0FBRUFsQixjQUFjLENBQUNtQixRQUFRLENBQUUscUJBQXFCLEVBQUVoQixtQkFBb0IsQ0FBQyJ9