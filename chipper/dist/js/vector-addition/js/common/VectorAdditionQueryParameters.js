// Copyright 2019-2021, University of Colorado Boulder

/**
 * Query parameters supported by this simulation.
 * Running with ?log will print these query parameters and their values to the console at startup.
 *
 * @author Brandon Li
 */

import logGlobal from '../../../phet-core/js/logGlobal.js';
import vectorAddition from '../vectorAddition.js';
const VectorAdditionQueryParameters = QueryStringMachine.getAll({
  /**
   * The maximum amount of dragging before the vector will be removed from the graph when attempting to drag a vector
   * outside the graph. See https://github.com/phetsims/vector-addition/issues/46
   * For internal use only.
   */
  vectorDragThreshold: {
    type: 'number',
    isValidValue: value => value > 0,
    defaultValue: 10
  },
  /**
   * The minimum distance between a vector's tail to another vector's tail or tip to snap to the other vector in polar
   * mode. See https://docs.google.com/document/d/1opnDgqIqIroo8VK0CbOyQ5608_g11MSGZXnFlI8k5Ds/edit?ts=5ced51e9#
   * For internal use only.
   */
  polarSnapDistance: {
    type: 'number',
    isValidValue: value => value > 0,
    defaultValue: 1
  },
  /**
   * Head width for all vectors and their component vectors.
   * See https://github.com/phetsims/vector-addition/issues/240.
   * For internal use only.
   */
  headWidth: {
    type: 'number',
    isValidValue: value => value > 0,
    defaultValue: 12
  },
  /**
   * Head height for all vectors and their component vectors.
   * See https://github.com/phetsims/vector-addition/issues/240.
   * For internal use only.
   */
  headHeight: {
    type: 'number',
    isValidValue: value => value > 0,
    defaultValue: 14
  },
  /**
   * Tail width for all vectors and their component vectors.
   * See https://github.com/phetsims/vector-addition/issues/240.
   * For internal use only.
   */
  tailWidth: {
    type: 'number',
    isValidValue: value => value > 0,
    defaultValue: 3.5
  }
});
assert && assert(VectorAdditionQueryParameters.tailWidth < VectorAdditionQueryParameters.headWidth, 'tailWidth must be < headWidth');
vectorAddition.register('VectorAdditionQueryParameters', VectorAdditionQueryParameters);

// Log query parameters
logGlobal('phet.chipper.queryParameters');
logGlobal('phet.preloads.phetio.queryParameters');
logGlobal('phet.vectorAddition.VectorAdditionQueryParameters');
export default VectorAdditionQueryParameters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dHbG9iYWwiLCJ2ZWN0b3JBZGRpdGlvbiIsIlZlY3RvckFkZGl0aW9uUXVlcnlQYXJhbWV0ZXJzIiwiUXVlcnlTdHJpbmdNYWNoaW5lIiwiZ2V0QWxsIiwidmVjdG9yRHJhZ1RocmVzaG9sZCIsInR5cGUiLCJpc1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsImRlZmF1bHRWYWx1ZSIsInBvbGFyU25hcERpc3RhbmNlIiwiaGVhZFdpZHRoIiwiaGVhZEhlaWdodCIsInRhaWxXaWR0aCIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVmVjdG9yQWRkaXRpb25RdWVyeVBhcmFtZXRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUXVlcnkgcGFyYW1ldGVycyBzdXBwb3J0ZWQgYnkgdGhpcyBzaW11bGF0aW9uLlxyXG4gKiBSdW5uaW5nIHdpdGggP2xvZyB3aWxsIHByaW50IHRoZXNlIHF1ZXJ5IHBhcmFtZXRlcnMgYW5kIHRoZWlyIHZhbHVlcyB0byB0aGUgY29uc29sZSBhdCBzdGFydHVwLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgbG9nR2xvYmFsIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9sb2dHbG9iYWwuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5cclxuY29uc3QgVmVjdG9yQWRkaXRpb25RdWVyeVBhcmFtZXRlcnMgPSBRdWVyeVN0cmluZ01hY2hpbmUuZ2V0QWxsKCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBtYXhpbXVtIGFtb3VudCBvZiBkcmFnZ2luZyBiZWZvcmUgdGhlIHZlY3RvciB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZ3JhcGggd2hlbiBhdHRlbXB0aW5nIHRvIGRyYWcgYSB2ZWN0b3JcclxuICAgKiBvdXRzaWRlIHRoZSBncmFwaC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzQ2XHJcbiAgICogRm9yIGludGVybmFsIHVzZSBvbmx5LlxyXG4gICAqL1xyXG4gIHZlY3RvckRyYWdUaHJlc2hvbGQ6IHtcclxuICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgaXNWYWxpZFZhbHVlOiB2YWx1ZSA9PiAoIHZhbHVlID4gMCApLFxyXG4gICAgZGVmYXVsdFZhbHVlOiAxMFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gYSB2ZWN0b3IncyB0YWlsIHRvIGFub3RoZXIgdmVjdG9yJ3MgdGFpbCBvciB0aXAgdG8gc25hcCB0byB0aGUgb3RoZXIgdmVjdG9yIGluIHBvbGFyXHJcbiAgICogbW9kZS4gU2VlIGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMW9wbkRncUlxSXJvbzhWSzBDYk95UTU2MDhfZzExTVNHWlhuRmxJOGs1RHMvZWRpdD90cz01Y2VkNTFlOSNcclxuICAgKiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXHJcbiAgICovXHJcbiAgcG9sYXJTbmFwRGlzdGFuY2U6IHtcclxuICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgaXNWYWxpZFZhbHVlOiB2YWx1ZSA9PiAoIHZhbHVlID4gMCApLFxyXG4gICAgZGVmYXVsdFZhbHVlOiAxXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogSGVhZCB3aWR0aCBmb3IgYWxsIHZlY3RvcnMgYW5kIHRoZWlyIGNvbXBvbmVudCB2ZWN0b3JzLlxyXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVjdG9yLWFkZGl0aW9uL2lzc3Vlcy8yNDAuXHJcbiAgICogRm9yIGludGVybmFsIHVzZSBvbmx5LlxyXG4gICAqL1xyXG4gIGhlYWRXaWR0aDoge1xyXG4gICAgdHlwZTogJ251bWJlcicsXHJcbiAgICBpc1ZhbGlkVmFsdWU6IHZhbHVlID0+ICggdmFsdWUgPiAwICksXHJcbiAgICBkZWZhdWx0VmFsdWU6IDEyXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogSGVhZCBoZWlnaHQgZm9yIGFsbCB2ZWN0b3JzIGFuZCB0aGVpciBjb21wb25lbnQgdmVjdG9ycy5cclxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMjQwLlxyXG4gICAqIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuICAgKi9cclxuICBoZWFkSGVpZ2h0OiB7XHJcbiAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgIGlzVmFsaWRWYWx1ZTogdmFsdWUgPT4gKCB2YWx1ZSA+IDAgKSxcclxuICAgIGRlZmF1bHRWYWx1ZTogMTRcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUYWlsIHdpZHRoIGZvciBhbGwgdmVjdG9ycyBhbmQgdGhlaXIgY29tcG9uZW50IHZlY3RvcnMuXHJcbiAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzI0MC5cclxuICAgKiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXHJcbiAgICovXHJcbiAgdGFpbFdpZHRoOiB7XHJcbiAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgIGlzVmFsaWRWYWx1ZTogdmFsdWUgPT4gKCB2YWx1ZSA+IDAgKSxcclxuICAgIGRlZmF1bHRWYWx1ZTogMy41XHJcbiAgfVxyXG59ICk7XHJcblxyXG5hc3NlcnQgJiYgYXNzZXJ0KCBWZWN0b3JBZGRpdGlvblF1ZXJ5UGFyYW1ldGVycy50YWlsV2lkdGggPCBWZWN0b3JBZGRpdGlvblF1ZXJ5UGFyYW1ldGVycy5oZWFkV2lkdGgsICd0YWlsV2lkdGggbXVzdCBiZSA8IGhlYWRXaWR0aCcgKTtcclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnVmVjdG9yQWRkaXRpb25RdWVyeVBhcmFtZXRlcnMnLCBWZWN0b3JBZGRpdGlvblF1ZXJ5UGFyYW1ldGVycyApO1xyXG5cclxuLy8gTG9nIHF1ZXJ5IHBhcmFtZXRlcnNcclxubG9nR2xvYmFsKCAncGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycycgKTtcclxubG9nR2xvYmFsKCAncGhldC5wcmVsb2Fkcy5waGV0aW8ucXVlcnlQYXJhbWV0ZXJzJyApO1xyXG5sb2dHbG9iYWwoICdwaGV0LnZlY3RvckFkZGl0aW9uLlZlY3RvckFkZGl0aW9uUXVlcnlQYXJhbWV0ZXJzJyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVmVjdG9yQWRkaXRpb25RdWVyeVBhcmFtZXRlcnM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxjQUFjLE1BQU0sc0JBQXNCO0FBRWpELE1BQU1DLDZCQUE2QixHQUFHQyxrQkFBa0IsQ0FBQ0MsTUFBTSxDQUFFO0VBRS9EO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsbUJBQW1CLEVBQUU7SUFDbkJDLElBQUksRUFBRSxRQUFRO0lBQ2RDLFlBQVksRUFBRUMsS0FBSyxJQUFNQSxLQUFLLEdBQUcsQ0FBRztJQUNwQ0MsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLGlCQUFpQixFQUFFO0lBQ2pCSixJQUFJLEVBQUUsUUFBUTtJQUNkQyxZQUFZLEVBQUVDLEtBQUssSUFBTUEsS0FBSyxHQUFHLENBQUc7SUFDcENDLFlBQVksRUFBRTtFQUNoQixDQUFDO0VBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxTQUFTLEVBQUU7SUFDVEwsSUFBSSxFQUFFLFFBQVE7SUFDZEMsWUFBWSxFQUFFQyxLQUFLLElBQU1BLEtBQUssR0FBRyxDQUFHO0lBQ3BDQyxZQUFZLEVBQUU7RUFDaEIsQ0FBQztFQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsVUFBVSxFQUFFO0lBQ1ZOLElBQUksRUFBRSxRQUFRO0lBQ2RDLFlBQVksRUFBRUMsS0FBSyxJQUFNQSxLQUFLLEdBQUcsQ0FBRztJQUNwQ0MsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFNBQVMsRUFBRTtJQUNUUCxJQUFJLEVBQUUsUUFBUTtJQUNkQyxZQUFZLEVBQUVDLEtBQUssSUFBTUEsS0FBSyxHQUFHLENBQUc7SUFDcENDLFlBQVksRUFBRTtFQUNoQjtBQUNGLENBQUUsQ0FBQztBQUVISyxNQUFNLElBQUlBLE1BQU0sQ0FBRVosNkJBQTZCLENBQUNXLFNBQVMsR0FBR1gsNkJBQTZCLENBQUNTLFNBQVMsRUFBRSwrQkFBZ0MsQ0FBQztBQUV0SVYsY0FBYyxDQUFDYyxRQUFRLENBQUUsK0JBQStCLEVBQUViLDZCQUE4QixDQUFDOztBQUV6RjtBQUNBRixTQUFTLENBQUUsOEJBQStCLENBQUM7QUFDM0NBLFNBQVMsQ0FBRSxzQ0FBdUMsQ0FBQztBQUNuREEsU0FBUyxDQUFFLG1EQUFvRCxDQUFDO0FBRWhFLGVBQWVFLDZCQUE2QiJ9