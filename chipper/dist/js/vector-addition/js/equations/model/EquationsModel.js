// Copyright 2019-2023, University of Colorado Boulder

/**
 * EquationsModel is the model for the 'Equations' screen.
 *
 * @author Brandon Li
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import VectorAdditionModel from '../../common/model/VectorAdditionModel.js';
import VectorAdditionColors from '../../common/VectorAdditionColors.js';
import vectorAddition from '../../vectorAddition.js';
import EquationsGraph from './EquationsGraph.js';
export default class EquationsModel extends VectorAdditionModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    assert && assert(tandem instanceof Tandem, `invalid tandem: ${tandem}`);
    super(tandem);

    // @public
    this.sumVisibleProperty = new BooleanProperty(true);

    // @public (read-only) {VectorColorPalette}
    this.cartesianVectorColorPalette = VectorAdditionColors.EQUATIONS_BLUE_COLOR_PALETTE;
    this.polarVectorColorPalette = VectorAdditionColors.EQUATIONS_PINK_COLOR_PALETTE;

    // @public (read-only) graph for Cartesian snap mode
    this.cartesianGraph = new EquationsGraph(CoordinateSnapModes.CARTESIAN, this.componentStyleProperty, this.sumVisibleProperty, this.cartesianVectorColorPalette);

    // @public (read-only) graph for Polar snap mode
    this.polarGraph = new EquationsGraph(CoordinateSnapModes.POLAR, this.componentStyleProperty, this.sumVisibleProperty, this.polarVectorColorPalette);
  }

  /**
   * Resets the EquationsModel.
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.sumVisibleProperty.reset();
    this.cartesianGraph.reset();
    this.polarGraph.reset();
  }
}
vectorAddition.register('EquationsModel', EquationsModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJUYW5kZW0iLCJDb29yZGluYXRlU25hcE1vZGVzIiwiVmVjdG9yQWRkaXRpb25Nb2RlbCIsIlZlY3RvckFkZGl0aW9uQ29sb3JzIiwidmVjdG9yQWRkaXRpb24iLCJFcXVhdGlvbnNHcmFwaCIsIkVxdWF0aW9uc01vZGVsIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJhc3NlcnQiLCJzdW1WaXNpYmxlUHJvcGVydHkiLCJjYXJ0ZXNpYW5WZWN0b3JDb2xvclBhbGV0dGUiLCJFUVVBVElPTlNfQkxVRV9DT0xPUl9QQUxFVFRFIiwicG9sYXJWZWN0b3JDb2xvclBhbGV0dGUiLCJFUVVBVElPTlNfUElOS19DT0xPUl9QQUxFVFRFIiwiY2FydGVzaWFuR3JhcGgiLCJDQVJURVNJQU4iLCJjb21wb25lbnRTdHlsZVByb3BlcnR5IiwicG9sYXJHcmFwaCIsIlBPTEFSIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVxdWF0aW9uc01vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEVxdWF0aW9uc01vZGVsIGlzIHRoZSBtb2RlbCBmb3IgdGhlICdFcXVhdGlvbnMnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBDb29yZGluYXRlU25hcE1vZGVzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Db29yZGluYXRlU25hcE1vZGVzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uTW9kZWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1ZlY3RvckFkZGl0aW9uTW9kZWwuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db2xvcnMgZnJvbSAnLi4vLi4vY29tbW9uL1ZlY3RvckFkZGl0aW9uQ29sb3JzLmpzJztcclxuaW1wb3J0IHZlY3RvckFkZGl0aW9uIGZyb20gJy4uLy4uL3ZlY3RvckFkZGl0aW9uLmpzJztcclxuaW1wb3J0IEVxdWF0aW9uc0dyYXBoIGZyb20gJy4vRXF1YXRpb25zR3JhcGguanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXF1YXRpb25zTW9kZWwgZXh0ZW5kcyBWZWN0b3JBZGRpdGlvbk1vZGVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGFuZGVtIGluc3RhbmNlb2YgVGFuZGVtLCBgaW52YWxpZCB0YW5kZW06ICR7dGFuZGVtfWAgKTtcclxuXHJcbiAgICBzdXBlciggdGFuZGVtICk7XHJcblxyXG4gICAgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSB7VmVjdG9yQ29sb3JQYWxldHRlfVxyXG4gICAgdGhpcy5jYXJ0ZXNpYW5WZWN0b3JDb2xvclBhbGV0dGUgPSBWZWN0b3JBZGRpdGlvbkNvbG9ycy5FUVVBVElPTlNfQkxVRV9DT0xPUl9QQUxFVFRFO1xyXG4gICAgdGhpcy5wb2xhclZlY3RvckNvbG9yUGFsZXR0ZSA9IFZlY3RvckFkZGl0aW9uQ29sb3JzLkVRVUFUSU9OU19QSU5LX0NPTE9SX1BBTEVUVEU7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSBncmFwaCBmb3IgQ2FydGVzaWFuIHNuYXAgbW9kZVxyXG4gICAgdGhpcy5jYXJ0ZXNpYW5HcmFwaCA9IG5ldyBFcXVhdGlvbnNHcmFwaCggQ29vcmRpbmF0ZVNuYXBNb2Rlcy5DQVJURVNJQU4sXHJcbiAgICAgIHRoaXMuY29tcG9uZW50U3R5bGVQcm9wZXJ0eSxcclxuICAgICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIHRoaXMuY2FydGVzaWFuVmVjdG9yQ29sb3JQYWxldHRlXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgZ3JhcGggZm9yIFBvbGFyIHNuYXAgbW9kZVxyXG4gICAgdGhpcy5wb2xhckdyYXBoID0gbmV3IEVxdWF0aW9uc0dyYXBoKCBDb29yZGluYXRlU25hcE1vZGVzLlBPTEFSLFxyXG4gICAgICB0aGlzLmNvbXBvbmVudFN0eWxlUHJvcGVydHksXHJcbiAgICAgIHRoaXMuc3VtVmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICB0aGlzLnBvbGFyVmVjdG9yQ29sb3JQYWxldHRlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoZSBFcXVhdGlvbnNNb2RlbC5cclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuY2FydGVzaWFuR3JhcGgucmVzZXQoKTtcclxuICAgIHRoaXMucG9sYXJHcmFwaC5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdFcXVhdGlvbnNNb2RlbCcsIEVxdWF0aW9uc01vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxtQkFBbUIsTUFBTSwyQ0FBMkM7QUFDM0UsT0FBT0MsbUJBQW1CLE1BQU0sMkNBQTJDO0FBQzNFLE9BQU9DLG9CQUFvQixNQUFNLHNDQUFzQztBQUN2RSxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLGNBQWMsTUFBTSxxQkFBcUI7QUFFaEQsZUFBZSxNQUFNQyxjQUFjLFNBQVNKLG1CQUFtQixDQUFDO0VBRTlEO0FBQ0Y7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxNQUFNLEVBQUc7SUFFcEJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxNQUFNLFlBQVlSLE1BQU0sRUFBRyxtQkFBa0JRLE1BQU8sRUFBRSxDQUFDO0lBRXpFLEtBQUssQ0FBRUEsTUFBTyxDQUFDOztJQUVmO0lBQ0EsSUFBSSxDQUFDRSxrQkFBa0IsR0FBRyxJQUFJWCxlQUFlLENBQUUsSUFBSyxDQUFDOztJQUVyRDtJQUNBLElBQUksQ0FBQ1ksMkJBQTJCLEdBQUdSLG9CQUFvQixDQUFDUyw0QkFBNEI7SUFDcEYsSUFBSSxDQUFDQyx1QkFBdUIsR0FBR1Ysb0JBQW9CLENBQUNXLDRCQUE0Qjs7SUFFaEY7SUFDQSxJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJVixjQUFjLENBQUVKLG1CQUFtQixDQUFDZSxTQUFTLEVBQ3JFLElBQUksQ0FBQ0Msc0JBQXNCLEVBQzNCLElBQUksQ0FBQ1Asa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQ0MsMkJBQ1AsQ0FBQzs7SUFFRDtJQUNBLElBQUksQ0FBQ08sVUFBVSxHQUFHLElBQUliLGNBQWMsQ0FBRUosbUJBQW1CLENBQUNrQixLQUFLLEVBQzdELElBQUksQ0FBQ0Ysc0JBQXNCLEVBQzNCLElBQUksQ0FBQ1Asa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQ0csdUJBQ1AsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRU8sS0FBS0EsQ0FBQSxFQUFHO0lBQ04sS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ1Ysa0JBQWtCLENBQUNVLEtBQUssQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ0wsY0FBYyxDQUFDSyxLQUFLLENBQUMsQ0FBQztJQUMzQixJQUFJLENBQUNGLFVBQVUsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7RUFDekI7QUFDRjtBQUVBaEIsY0FBYyxDQUFDaUIsUUFBUSxDQUFFLGdCQUFnQixFQUFFZixjQUFlLENBQUMifQ==