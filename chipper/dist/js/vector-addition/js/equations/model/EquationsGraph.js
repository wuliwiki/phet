// Copyright 2019-2023, University of Colorado Boulder

/**
 * Model for a single graph on the 'Equations' screen, which has 2 graphs (Polar and Cartesian).
 *
 * Characteristics of an EquationsGraph (which extends Graph) are:
 *  - have exactly 1 VectorSet
 *  - has a Property to select the equation type (addition/subtraction/negation) per graph
 *
 * @author Brandon Li
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import Graph from '../../common/model/Graph.js';
import VectorColorPalette from '../../common/model/VectorColorPalette.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import vectorAddition from '../../vectorAddition.js';
import EquationsVectorSet from './EquationsVectorSet.js';
import EquationTypes from './EquationTypes.js';

// constants

// graph bounds for EquationsGraphs
const EQUATIONS_GRAPH_BOUNDS = VectorAdditionConstants.DEFAULT_GRAPH_BOUNDS;

// Bottom left corner, in view coordinates.
const BOTTOM_LEFT = new Vector2(Graph.DEFAULT_BOTTOM_LEFT.x, Graph.DEFAULT_BOTTOM_LEFT.y + 40);

// Starting equation type
const STARTING_EQUATION_TYPE = EquationTypes.ADDITION;
export default class EquationsGraph extends Graph {
  /**
   * @param {CoordinateSnapModes} coordinateSnapMode - coordinateSnapMode for the graph
   * @param {EnumerationProperty.<ComponentVectorStyles>} componentStyleProperty
   * @param {BooleanProperty} sumVisibleProperty
   * @param {VectorColorPalette} vectorColorPalette - color palette for vectors on the graph
   */
  constructor(coordinateSnapMode, componentStyleProperty, sumVisibleProperty, vectorColorPalette) {
    assert && assert(CoordinateSnapModes.enumeration.includes(coordinateSnapMode), `invalid coordinateSnapMode: ${coordinateSnapMode}`);
    assert && assert(componentStyleProperty instanceof EnumerationProperty, `invalid componentStyleProperty: ${componentStyleProperty}`);
    assert && assert(sumVisibleProperty instanceof BooleanProperty, `invalid sumVisibleProperty: ${sumVisibleProperty}`);
    assert && assert(vectorColorPalette instanceof VectorColorPalette, `invalid vectorColorPalette: ${vectorColorPalette}`);
    super(EQUATIONS_GRAPH_BOUNDS, coordinateSnapMode, {
      bottomLeft: BOTTOM_LEFT
    });

    // @public (read-only) {EnumerationProperty.<EquationTypes>} equationTypeProperty
    this.equationTypeProperty = new EnumerationProperty(STARTING_EQUATION_TYPE);

    // @public (read-only) {EquationsVectorSet} vectorSet
    this.vectorSet = new EquationsVectorSet(this, componentStyleProperty, sumVisibleProperty, vectorColorPalette, coordinateSnapMode);
    this.vectorSets.push(this.vectorSet);
  }

  /**
   * Resets the graph.
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.equationTypeProperty.reset();
  }
}
vectorAddition.register('EquationsGraph', EquationsGraph);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbnVtZXJhdGlvblByb3BlcnR5IiwiVmVjdG9yMiIsIkNvb3JkaW5hdGVTbmFwTW9kZXMiLCJHcmFwaCIsIlZlY3RvckNvbG9yUGFsZXR0ZSIsIlZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIiwidmVjdG9yQWRkaXRpb24iLCJFcXVhdGlvbnNWZWN0b3JTZXQiLCJFcXVhdGlvblR5cGVzIiwiRVFVQVRJT05TX0dSQVBIX0JPVU5EUyIsIkRFRkFVTFRfR1JBUEhfQk9VTkRTIiwiQk9UVE9NX0xFRlQiLCJERUZBVUxUX0JPVFRPTV9MRUZUIiwieCIsInkiLCJTVEFSVElOR19FUVVBVElPTl9UWVBFIiwiQURESVRJT04iLCJFcXVhdGlvbnNHcmFwaCIsImNvbnN0cnVjdG9yIiwiY29vcmRpbmF0ZVNuYXBNb2RlIiwiY29tcG9uZW50U3R5bGVQcm9wZXJ0eSIsInN1bVZpc2libGVQcm9wZXJ0eSIsInZlY3RvckNvbG9yUGFsZXR0ZSIsImFzc2VydCIsImVudW1lcmF0aW9uIiwiaW5jbHVkZXMiLCJib3R0b21MZWZ0IiwiZXF1YXRpb25UeXBlUHJvcGVydHkiLCJ2ZWN0b3JTZXQiLCJ2ZWN0b3JTZXRzIiwicHVzaCIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFcXVhdGlvbnNHcmFwaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgYSBzaW5nbGUgZ3JhcGggb24gdGhlICdFcXVhdGlvbnMnIHNjcmVlbiwgd2hpY2ggaGFzIDIgZ3JhcGhzIChQb2xhciBhbmQgQ2FydGVzaWFuKS5cclxuICpcclxuICogQ2hhcmFjdGVyaXN0aWNzIG9mIGFuIEVxdWF0aW9uc0dyYXBoICh3aGljaCBleHRlbmRzIEdyYXBoKSBhcmU6XHJcbiAqICAtIGhhdmUgZXhhY3RseSAxIFZlY3RvclNldFxyXG4gKiAgLSBoYXMgYSBQcm9wZXJ0eSB0byBzZWxlY3QgdGhlIGVxdWF0aW9uIHR5cGUgKGFkZGl0aW9uL3N1YnRyYWN0aW9uL25lZ2F0aW9uKSBwZXIgZ3JhcGhcclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IENvb3JkaW5hdGVTbmFwTW9kZXMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5pbXBvcnQgR3JhcGggZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0dyYXBoLmpzJztcclxuaW1wb3J0IFZlY3RvckNvbG9yUGFsZXR0ZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVmVjdG9yQ29sb3JQYWxldHRlLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBFcXVhdGlvbnNWZWN0b3JTZXQgZnJvbSAnLi9FcXVhdGlvbnNWZWN0b3JTZXQuanMnO1xyXG5pbXBvcnQgRXF1YXRpb25UeXBlcyBmcm9tICcuL0VxdWF0aW9uVHlwZXMuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcblxyXG4vLyBncmFwaCBib3VuZHMgZm9yIEVxdWF0aW9uc0dyYXBoc1xyXG5jb25zdCBFUVVBVElPTlNfR1JBUEhfQk9VTkRTID0gVmVjdG9yQWRkaXRpb25Db25zdGFudHMuREVGQVVMVF9HUkFQSF9CT1VORFM7XHJcblxyXG4vLyBCb3R0b20gbGVmdCBjb3JuZXIsIGluIHZpZXcgY29vcmRpbmF0ZXMuXHJcbmNvbnN0IEJPVFRPTV9MRUZUID0gbmV3IFZlY3RvcjIoIEdyYXBoLkRFRkFVTFRfQk9UVE9NX0xFRlQueCwgR3JhcGguREVGQVVMVF9CT1RUT01fTEVGVC55ICsgNDAgKTtcclxuXHJcbi8vIFN0YXJ0aW5nIGVxdWF0aW9uIHR5cGVcclxuY29uc3QgU1RBUlRJTkdfRVFVQVRJT05fVFlQRSA9IEVxdWF0aW9uVHlwZXMuQURESVRJT047XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcXVhdGlvbnNHcmFwaCBleHRlbmRzIEdyYXBoIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDb29yZGluYXRlU25hcE1vZGVzfSBjb29yZGluYXRlU25hcE1vZGUgLSBjb29yZGluYXRlU25hcE1vZGUgZm9yIHRoZSBncmFwaFxyXG4gICAqIEBwYXJhbSB7RW51bWVyYXRpb25Qcm9wZXJ0eS48Q29tcG9uZW50VmVjdG9yU3R5bGVzPn0gY29tcG9uZW50U3R5bGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhblByb3BlcnR5fSBzdW1WaXNpYmxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge1ZlY3RvckNvbG9yUGFsZXR0ZX0gdmVjdG9yQ29sb3JQYWxldHRlIC0gY29sb3IgcGFsZXR0ZSBmb3IgdmVjdG9ycyBvbiB0aGUgZ3JhcGhcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY29vcmRpbmF0ZVNuYXBNb2RlLCBjb21wb25lbnRTdHlsZVByb3BlcnR5LCBzdW1WaXNpYmxlUHJvcGVydHksIHZlY3RvckNvbG9yUGFsZXR0ZSApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBDb29yZGluYXRlU25hcE1vZGVzLmVudW1lcmF0aW9uLmluY2x1ZGVzKCBjb29yZGluYXRlU25hcE1vZGUgKSwgYGludmFsaWQgY29vcmRpbmF0ZVNuYXBNb2RlOiAke2Nvb3JkaW5hdGVTbmFwTW9kZX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBjb21wb25lbnRTdHlsZVByb3BlcnR5IGluc3RhbmNlb2YgRW51bWVyYXRpb25Qcm9wZXJ0eSwgYGludmFsaWQgY29tcG9uZW50U3R5bGVQcm9wZXJ0eTogJHtjb21wb25lbnRTdHlsZVByb3BlcnR5fWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHN1bVZpc2libGVQcm9wZXJ0eSBpbnN0YW5jZW9mIEJvb2xlYW5Qcm9wZXJ0eSwgYGludmFsaWQgc3VtVmlzaWJsZVByb3BlcnR5OiAke3N1bVZpc2libGVQcm9wZXJ0eX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB2ZWN0b3JDb2xvclBhbGV0dGUgaW5zdGFuY2VvZiBWZWN0b3JDb2xvclBhbGV0dGUsIGBpbnZhbGlkIHZlY3RvckNvbG9yUGFsZXR0ZTogJHt2ZWN0b3JDb2xvclBhbGV0dGV9YCApO1xyXG5cclxuICAgIHN1cGVyKCBFUVVBVElPTlNfR1JBUEhfQk9VTkRTLCBjb29yZGluYXRlU25hcE1vZGUsIHtcclxuICAgICAgYm90dG9tTGVmdDogQk9UVE9NX0xFRlRcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtFbnVtZXJhdGlvblByb3BlcnR5LjxFcXVhdGlvblR5cGVzPn0gZXF1YXRpb25UeXBlUHJvcGVydHlcclxuICAgIHRoaXMuZXF1YXRpb25UeXBlUHJvcGVydHkgPSBuZXcgRW51bWVyYXRpb25Qcm9wZXJ0eSggU1RBUlRJTkdfRVFVQVRJT05fVFlQRSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkge0VxdWF0aW9uc1ZlY3RvclNldH0gdmVjdG9yU2V0XHJcbiAgICB0aGlzLnZlY3RvclNldCA9IG5ldyBFcXVhdGlvbnNWZWN0b3JTZXQoIHRoaXMsIGNvbXBvbmVudFN0eWxlUHJvcGVydHksIHN1bVZpc2libGVQcm9wZXJ0eSwgdmVjdG9yQ29sb3JQYWxldHRlLCBjb29yZGluYXRlU25hcE1vZGUgKTtcclxuXHJcbiAgICB0aGlzLnZlY3RvclNldHMucHVzaCggdGhpcy52ZWN0b3JTZXQgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyB0aGUgZ3JhcGguXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICAgIHRoaXMuZXF1YXRpb25UeXBlUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnRXF1YXRpb25zR3JhcGgnLCBFcXVhdGlvbnNHcmFwaCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsbUJBQW1CLE1BQU0sNENBQTRDO0FBQzVFLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsbUJBQW1CLE1BQU0sMkNBQTJDO0FBQzNFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0Msa0JBQWtCLE1BQU0sMENBQTBDO0FBQ3pFLE9BQU9DLHVCQUF1QixNQUFNLHlDQUF5QztBQUM3RSxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLGtCQUFrQixNQUFNLHlCQUF5QjtBQUN4RCxPQUFPQyxhQUFhLE1BQU0sb0JBQW9COztBQUU5Qzs7QUFFQTtBQUNBLE1BQU1DLHNCQUFzQixHQUFHSix1QkFBdUIsQ0FBQ0ssb0JBQW9COztBQUUzRTtBQUNBLE1BQU1DLFdBQVcsR0FBRyxJQUFJVixPQUFPLENBQUVFLEtBQUssQ0FBQ1MsbUJBQW1CLENBQUNDLENBQUMsRUFBRVYsS0FBSyxDQUFDUyxtQkFBbUIsQ0FBQ0UsQ0FBQyxHQUFHLEVBQUcsQ0FBQzs7QUFFaEc7QUFDQSxNQUFNQyxzQkFBc0IsR0FBR1AsYUFBYSxDQUFDUSxRQUFRO0FBRXJELGVBQWUsTUFBTUMsY0FBYyxTQUFTZCxLQUFLLENBQUM7RUFFaEQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VlLFdBQVdBLENBQUVDLGtCQUFrQixFQUFFQyxzQkFBc0IsRUFBRUMsa0JBQWtCLEVBQUVDLGtCQUFrQixFQUFHO0lBRWhHQyxNQUFNLElBQUlBLE1BQU0sQ0FBRXJCLG1CQUFtQixDQUFDc0IsV0FBVyxDQUFDQyxRQUFRLENBQUVOLGtCQUFtQixDQUFDLEVBQUcsK0JBQThCQSxrQkFBbUIsRUFBRSxDQUFDO0lBQ3ZJSSxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsc0JBQXNCLFlBQVlwQixtQkFBbUIsRUFBRyxtQ0FBa0NvQixzQkFBdUIsRUFBRSxDQUFDO0lBQ3RJRyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsa0JBQWtCLFlBQVl0QixlQUFlLEVBQUcsK0JBQThCc0Isa0JBQW1CLEVBQUUsQ0FBQztJQUN0SEUsTUFBTSxJQUFJQSxNQUFNLENBQUVELGtCQUFrQixZQUFZbEIsa0JBQWtCLEVBQUcsK0JBQThCa0Isa0JBQW1CLEVBQUUsQ0FBQztJQUV6SCxLQUFLLENBQUViLHNCQUFzQixFQUFFVSxrQkFBa0IsRUFBRTtNQUNqRE8sVUFBVSxFQUFFZjtJQUNkLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ2dCLG9CQUFvQixHQUFHLElBQUkzQixtQkFBbUIsQ0FBRWUsc0JBQXVCLENBQUM7O0lBRTdFO0lBQ0EsSUFBSSxDQUFDYSxTQUFTLEdBQUcsSUFBSXJCLGtCQUFrQixDQUFFLElBQUksRUFBRWEsc0JBQXNCLEVBQUVDLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRUgsa0JBQW1CLENBQUM7SUFFbkksSUFBSSxDQUFDVSxVQUFVLENBQUNDLElBQUksQ0FBRSxJQUFJLENBQUNGLFNBQVUsQ0FBQztFQUN4Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VHLEtBQUtBLENBQUEsRUFBRztJQUNOLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7SUFDYixJQUFJLENBQUNKLG9CQUFvQixDQUFDSSxLQUFLLENBQUMsQ0FBQztFQUNuQztBQUNGO0FBRUF6QixjQUFjLENBQUMwQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVmLGNBQWUsQ0FBQyJ9