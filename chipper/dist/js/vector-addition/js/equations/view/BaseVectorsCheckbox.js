// Copyright 2019-2023, University of Colorado Boulder

/**
 * BaseVectorsCheckbox is the checkbox used to control visibility of base vectors.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import VectorColorPalette from '../../common/model/VectorColorPalette.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import VectorAdditionCheckbox from '../../common/view/VectorAdditionCheckbox.js';
import VectorAdditionIconFactory from '../../common/view/VectorAdditionIconFactory.js';
import vectorAddition from '../../vectorAddition.js';
export default class BaseVectorsCheckbox extends VectorAdditionCheckbox {
  /**
   * @param {BooleanProperty} baseVectorsVisibleProperty
   * @param {VectorColorPalette} vectorColorPalette
   * @param {Object} [options]
   */
  constructor(baseVectorsVisibleProperty, vectorColorPalette, options) {
    // Type check arguments
    assert && assert(baseVectorsVisibleProperty instanceof BooleanProperty, `invalid baseVectorsVisibleProperty: ${baseVectorsVisibleProperty}`);
    assert && assert(vectorColorPalette instanceof VectorColorPalette, `invalid vectorColorPalette: ${vectorColorPalette}`);
    const icon = VectorAdditionIconFactory.createVectorIcon({
      fill: vectorColorPalette.baseVectorFill,
      stroke: vectorColorPalette.baseVectorStroke,
      lineWidth: VectorAdditionConstants.BASE_VECTOR_ARROW_OPTIONS.lineWidth,
      length: 50
    });
    super(baseVectorsVisibleProperty, icon, options);
  }
}
vectorAddition.register('BaseVectorsCheckbox', BaseVectorsCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJWZWN0b3JDb2xvclBhbGV0dGUiLCJWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyIsIlZlY3RvckFkZGl0aW9uQ2hlY2tib3giLCJWZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5IiwidmVjdG9yQWRkaXRpb24iLCJCYXNlVmVjdG9yc0NoZWNrYm94IiwiY29uc3RydWN0b3IiLCJiYXNlVmVjdG9yc1Zpc2libGVQcm9wZXJ0eSIsInZlY3RvckNvbG9yUGFsZXR0ZSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJpY29uIiwiY3JlYXRlVmVjdG9ySWNvbiIsImZpbGwiLCJiYXNlVmVjdG9yRmlsbCIsInN0cm9rZSIsImJhc2VWZWN0b3JTdHJva2UiLCJsaW5lV2lkdGgiLCJCQVNFX1ZFQ1RPUl9BUlJPV19PUFRJT05TIiwibGVuZ3RoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCYXNlVmVjdG9yc0NoZWNrYm94LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJhc2VWZWN0b3JzQ2hlY2tib3ggaXMgdGhlIGNoZWNrYm94IHVzZWQgdG8gY29udHJvbCB2aXNpYmlsaXR5IG9mIGJhc2UgdmVjdG9ycy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFZlY3RvckNvbG9yUGFsZXR0ZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVmVjdG9yQ29sb3JQYWxldHRlLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbkNoZWNrYm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1ZlY3RvckFkZGl0aW9uQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9WZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IHZlY3RvckFkZGl0aW9uIGZyb20gJy4uLy4uL3ZlY3RvckFkZGl0aW9uLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VWZWN0b3JzQ2hlY2tib3ggZXh0ZW5kcyBWZWN0b3JBZGRpdGlvbkNoZWNrYm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IGJhc2VWZWN0b3JzVmlzaWJsZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtWZWN0b3JDb2xvclBhbGV0dGV9IHZlY3RvckNvbG9yUGFsZXR0ZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYmFzZVZlY3RvcnNWaXNpYmxlUHJvcGVydHksIHZlY3RvckNvbG9yUGFsZXR0ZSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBUeXBlIGNoZWNrIGFyZ3VtZW50c1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYmFzZVZlY3RvcnNWaXNpYmxlUHJvcGVydHkgaW5zdGFuY2VvZiBCb29sZWFuUHJvcGVydHksIGBpbnZhbGlkIGJhc2VWZWN0b3JzVmlzaWJsZVByb3BlcnR5OiAke2Jhc2VWZWN0b3JzVmlzaWJsZVByb3BlcnR5fWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHZlY3RvckNvbG9yUGFsZXR0ZSBpbnN0YW5jZW9mIFZlY3RvckNvbG9yUGFsZXR0ZSwgYGludmFsaWQgdmVjdG9yQ29sb3JQYWxldHRlOiAke3ZlY3RvckNvbG9yUGFsZXR0ZX1gICk7XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkuY3JlYXRlVmVjdG9ySWNvbigge1xyXG4gICAgICBmaWxsOiB2ZWN0b3JDb2xvclBhbGV0dGUuYmFzZVZlY3RvckZpbGwsXHJcbiAgICAgIHN0cm9rZTogdmVjdG9yQ29sb3JQYWxldHRlLmJhc2VWZWN0b3JTdHJva2UsXHJcbiAgICAgIGxpbmVXaWR0aDogVmVjdG9yQWRkaXRpb25Db25zdGFudHMuQkFTRV9WRUNUT1JfQVJST1dfT1BUSU9OUy5saW5lV2lkdGgsXHJcbiAgICAgIGxlbmd0aDogNTBcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggYmFzZVZlY3RvcnNWaXNpYmxlUHJvcGVydHksIGljb24sIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnQmFzZVZlY3RvcnNDaGVja2JveCcsIEJhc2VWZWN0b3JzQ2hlY2tib3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxrQkFBa0IsTUFBTSwwQ0FBMEM7QUFDekUsT0FBT0MsdUJBQXVCLE1BQU0seUNBQXlDO0FBQzdFLE9BQU9DLHNCQUFzQixNQUFNLDZDQUE2QztBQUNoRixPQUFPQyx5QkFBeUIsTUFBTSxnREFBZ0Q7QUFDdEYsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUVwRCxlQUFlLE1BQU1DLG1CQUFtQixTQUFTSCxzQkFBc0IsQ0FBQztFQUV0RTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLDBCQUEwQixFQUFFQyxrQkFBa0IsRUFBRUMsT0FBTyxFQUFHO0lBRXJFO0lBQ0FDLE1BQU0sSUFBSUEsTUFBTSxDQUFFSCwwQkFBMEIsWUFBWVIsZUFBZSxFQUFHLHVDQUFzQ1EsMEJBQTJCLEVBQUUsQ0FBQztJQUM5SUcsTUFBTSxJQUFJQSxNQUFNLENBQUVGLGtCQUFrQixZQUFZUixrQkFBa0IsRUFBRywrQkFBOEJRLGtCQUFtQixFQUFFLENBQUM7SUFFekgsTUFBTUcsSUFBSSxHQUFHUix5QkFBeUIsQ0FBQ1MsZ0JBQWdCLENBQUU7TUFDdkRDLElBQUksRUFBRUwsa0JBQWtCLENBQUNNLGNBQWM7TUFDdkNDLE1BQU0sRUFBRVAsa0JBQWtCLENBQUNRLGdCQUFnQjtNQUMzQ0MsU0FBUyxFQUFFaEIsdUJBQXVCLENBQUNpQix5QkFBeUIsQ0FBQ0QsU0FBUztNQUN0RUUsTUFBTSxFQUFFO0lBQ1YsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFWiwwQkFBMEIsRUFBRUksSUFBSSxFQUFFRixPQUFRLENBQUM7RUFDcEQ7QUFDRjtBQUVBTCxjQUFjLENBQUNnQixRQUFRLENBQUUscUJBQXFCLEVBQUVmLG1CQUFvQixDQUFDIn0=