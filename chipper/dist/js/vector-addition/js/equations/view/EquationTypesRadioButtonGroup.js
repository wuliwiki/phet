// Copyright 2019-2023, University of Colorado Boulder

/**
 * View for the radio button group near the top of the scene that allows the user to select a equation type.
 *
 * See EquationTypes.js
 *
 * 'Is a' relationship with RectangularRadioButtonGroup but adds:
 *    - Radio button for 'ADDITION' => 'a' + 'b' = 'c'
 *    - Radio button for 'SUBTRACTION' => 'a' - 'b' = 'c'
 *    - Radio button for 'NEGATION' => 'a' + 'b' + 'c' = 0
 *
 * Icons created from the VectorAdditionIconFactory.
 *
 * EquationTypesRadioButtonGroup is never disposed and exists for the entire simulation.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import { AlignBox, AlignGroup } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import VectorAdditionIconFactory from '../../common/view/VectorAdditionIconFactory.js';
import vectorAddition from '../../vectorAddition.js';
import EquationTypes from '../model/EquationTypes.js';
export default class EquationTypesRadioButtonGroup extends RectangularRadioButtonGroup {
  /**
   * @param {EnumerationProperty.<EquationTypes>} equationTypeProperty - Property of the possible equation types
   * @param {string[]} vectorSymbols - symbols on the buttons
   * @param {AlignGroup} alignGroup
   * @param {Object} [options]
   */
  constructor(equationTypeProperty, vectorSymbols, alignGroup, options) {
    assert && assert(equationTypeProperty instanceof EnumerationProperty, `invalid equationTypeProperty: ${equationTypeProperty}`);
    assert && assert(alignGroup instanceof AlignGroup, `invalid alignGroup: ${alignGroup}`);
    assert && assert(!options || Object.getPrototypeOf(options) === Object.prototype, `Extra prototype on options: ${options}`);
    options = merge({}, VectorAdditionConstants.RADIO_BUTTON_GROUP_OPTIONS, {
      xMargin: 12
    }, options);

    // Create the description of the buttons
    const content = [];
    EquationTypes.enumeration.values.forEach(equationType => {
      content.push({
        value: equationType,
        createNode: () => new AlignBox(VectorAdditionIconFactory.createEquationTypeIcon(equationType, vectorSymbols), {
          group: alignGroup
        })
      });
    });
    super(equationTypeProperty, content, options);
  }

  /**
   * @public
   * @override
   */
  dispose() {
    assert && assert(false, 'EquationTypesRadioButtonGroup is not intended to be disposed');
  }
}
vectorAddition.register('EquationTypesRadioButtonGroup', EquationTypesRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvblByb3BlcnR5IiwibWVyZ2UiLCJBbGlnbkJveCIsIkFsaWduR3JvdXAiLCJSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAiLCJWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyIsIlZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkiLCJ2ZWN0b3JBZGRpdGlvbiIsIkVxdWF0aW9uVHlwZXMiLCJFcXVhdGlvblR5cGVzUmFkaW9CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwiZXF1YXRpb25UeXBlUHJvcGVydHkiLCJ2ZWN0b3JTeW1ib2xzIiwiYWxpZ25Hcm91cCIsIm9wdGlvbnMiLCJhc3NlcnQiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsIlJBRElPX0JVVFRPTl9HUk9VUF9PUFRJT05TIiwieE1hcmdpbiIsImNvbnRlbnQiLCJlbnVtZXJhdGlvbiIsInZhbHVlcyIsImZvckVhY2giLCJlcXVhdGlvblR5cGUiLCJwdXNoIiwidmFsdWUiLCJjcmVhdGVOb2RlIiwiY3JlYXRlRXF1YXRpb25UeXBlSWNvbiIsImdyb3VwIiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1YXRpb25UeXBlc1JhZGlvQnV0dG9uR3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgdGhlIHJhZGlvIGJ1dHRvbiBncm91cCBuZWFyIHRoZSB0b3Agb2YgdGhlIHNjZW5lIHRoYXQgYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCBhIGVxdWF0aW9uIHR5cGUuXHJcbiAqXHJcbiAqIFNlZSBFcXVhdGlvblR5cGVzLmpzXHJcbiAqXHJcbiAqICdJcyBhJyByZWxhdGlvbnNoaXAgd2l0aCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAgYnV0IGFkZHM6XHJcbiAqICAgIC0gUmFkaW8gYnV0dG9uIGZvciAnQURESVRJT04nID0+ICdhJyArICdiJyA9ICdjJ1xyXG4gKiAgICAtIFJhZGlvIGJ1dHRvbiBmb3IgJ1NVQlRSQUNUSU9OJyA9PiAnYScgLSAnYicgPSAnYydcclxuICogICAgLSBSYWRpbyBidXR0b24gZm9yICdORUdBVElPTicgPT4gJ2EnICsgJ2InICsgJ2MnID0gMFxyXG4gKlxyXG4gKiBJY29ucyBjcmVhdGVkIGZyb20gdGhlIFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkuXHJcbiAqXHJcbiAqIEVxdWF0aW9uVHlwZXNSYWRpb0J1dHRvbkdyb3VwIGlzIG5ldmVyIGRpc3Bvc2VkIGFuZCBleGlzdHMgZm9yIHRoZSBlbnRpcmUgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IEFsaWduQm94LCBBbGlnbkdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBFcXVhdGlvblR5cGVzIGZyb20gJy4uL21vZGVsL0VxdWF0aW9uVHlwZXMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXF1YXRpb25UeXBlc1JhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0VudW1lcmF0aW9uUHJvcGVydHkuPEVxdWF0aW9uVHlwZXM+fSBlcXVhdGlvblR5cGVQcm9wZXJ0eSAtIFByb3BlcnR5IG9mIHRoZSBwb3NzaWJsZSBlcXVhdGlvbiB0eXBlc1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHZlY3RvclN5bWJvbHMgLSBzeW1ib2xzIG9uIHRoZSBidXR0b25zXHJcbiAgICogQHBhcmFtIHtBbGlnbkdyb3VwfSBhbGlnbkdyb3VwXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBlcXVhdGlvblR5cGVQcm9wZXJ0eSwgdmVjdG9yU3ltYm9scywgYWxpZ25Hcm91cCwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBlcXVhdGlvblR5cGVQcm9wZXJ0eSBpbnN0YW5jZW9mIEVudW1lcmF0aW9uUHJvcGVydHksIGBpbnZhbGlkIGVxdWF0aW9uVHlwZVByb3BlcnR5OiAke2VxdWF0aW9uVHlwZVByb3BlcnR5fWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGFsaWduR3JvdXAgaW5zdGFuY2VvZiBBbGlnbkdyb3VwLCBgaW52YWxpZCBhbGlnbkdyb3VwOiAke2FsaWduR3JvdXB9YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKCBvcHRpb25zICkgPT09IE9iamVjdC5wcm90b3R5cGUsIGBFeHRyYSBwcm90b3R5cGUgb24gb3B0aW9uczogJHtvcHRpb25zfWAgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5SQURJT19CVVRUT05fR1JPVVBfT1BUSU9OUywge1xyXG4gICAgICB4TWFyZ2luOiAxMlxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1dHRvbnNcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBbXTtcclxuICAgIEVxdWF0aW9uVHlwZXMuZW51bWVyYXRpb24udmFsdWVzLmZvckVhY2goIGVxdWF0aW9uVHlwZSA9PiB7XHJcbiAgICAgIGNvbnRlbnQucHVzaCgge1xyXG4gICAgICAgIHZhbHVlOiBlcXVhdGlvblR5cGUsXHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IEFsaWduQm94KCBWZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5LmNyZWF0ZUVxdWF0aW9uVHlwZUljb24oIGVxdWF0aW9uVHlwZSwgdmVjdG9yU3ltYm9scyApLCB7XHJcbiAgICAgICAgICBncm91cDogYWxpZ25Hcm91cFxyXG4gICAgICAgIH0gKVxyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGVxdWF0aW9uVHlwZVByb3BlcnR5LCBjb250ZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnRXF1YXRpb25UeXBlc1JhZGlvQnV0dG9uR3JvdXAgaXMgbm90IGludGVuZGVkIHRvIGJlIGRpc3Bvc2VkJyApO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdFcXVhdGlvblR5cGVzUmFkaW9CdXR0b25Hcm91cCcsIEVxdWF0aW9uVHlwZXNSYWRpb0J1dHRvbkdyb3VwICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLG1CQUFtQixNQUFNLDRDQUE0QztBQUM1RSxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELFNBQVNDLFFBQVEsRUFBRUMsVUFBVSxRQUFRLG1DQUFtQztBQUN4RSxPQUFPQywyQkFBMkIsTUFBTSwyREFBMkQ7QUFDbkcsT0FBT0MsdUJBQXVCLE1BQU0seUNBQXlDO0FBQzdFLE9BQU9DLHlCQUF5QixNQUFNLGdEQUFnRDtBQUN0RixPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLGFBQWEsTUFBTSwyQkFBMkI7QUFFckQsZUFBZSxNQUFNQyw2QkFBNkIsU0FBU0wsMkJBQTJCLENBQUM7RUFFckY7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLG9CQUFvQixFQUFFQyxhQUFhLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxFQUFHO0lBRXRFQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUosb0JBQW9CLFlBQVlYLG1CQUFtQixFQUFHLGlDQUFnQ1csb0JBQXFCLEVBQUUsQ0FBQztJQUNoSUksTUFBTSxJQUFJQSxNQUFNLENBQUVGLFVBQVUsWUFBWVYsVUFBVSxFQUFHLHVCQUFzQlUsVUFBVyxFQUFFLENBQUM7SUFDekZFLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUNELE9BQU8sSUFBSUUsTUFBTSxDQUFDQyxjQUFjLENBQUVILE9BQVEsQ0FBQyxLQUFLRSxNQUFNLENBQUNFLFNBQVMsRUFBRywrQkFBOEJKLE9BQVEsRUFBRSxDQUFDO0lBRS9IQSxPQUFPLEdBQUdiLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRUksdUJBQXVCLENBQUNjLDBCQUEwQixFQUFFO01BQ3ZFQyxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQUVOLE9BQVEsQ0FBQzs7SUFFWjtJQUNBLE1BQU1PLE9BQU8sR0FBRyxFQUFFO0lBQ2xCYixhQUFhLENBQUNjLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQUVDLFlBQVksSUFBSTtNQUN4REosT0FBTyxDQUFDSyxJQUFJLENBQUU7UUFDWkMsS0FBSyxFQUFFRixZQUFZO1FBQ25CRyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJMUIsUUFBUSxDQUFFSSx5QkFBeUIsQ0FBQ3VCLHNCQUFzQixDQUFFSixZQUFZLEVBQUViLGFBQWMsQ0FBQyxFQUFFO1VBQy9Ha0IsS0FBSyxFQUFFakI7UUFDVCxDQUFFO01BQ0osQ0FBRSxDQUFDO0lBQ0wsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFRixvQkFBb0IsRUFBRVUsT0FBTyxFQUFFUCxPQUFRLENBQUM7RUFDakQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRWlCLE9BQU9BLENBQUEsRUFBRztJQUNSaEIsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0VBQzNGO0FBQ0Y7QUFFQVIsY0FBYyxDQUFDeUIsUUFBUSxDQUFFLCtCQUErQixFQUFFdkIsNkJBQThCLENBQUMifQ==