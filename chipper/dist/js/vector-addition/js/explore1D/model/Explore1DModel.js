// Copyright 2019-2023, University of Colorado Boulder

/**
 * Explore1DModel is the model for the 'Explore 1D' screen.
 *
 * @author Martin Veillette
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import GraphOrientations from '../../common/model/GraphOrientations.js';
import VectorAdditionModel from '../../common/model/VectorAdditionModel.js';
import VectorAdditionColors from '../../common/VectorAdditionColors.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import vectorAddition from '../../vectorAddition.js';
import Explore1DGraph from './Explore1DGraph.js';
export default class Explore1DModel extends VectorAdditionModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    assert && assert(tandem instanceof Tandem, `invalid tandem: ${tandem}`);
    super(tandem);

    // @public Property controlling the visibility of the sum for both Graph instances
    this.sumVisibleProperty = new BooleanProperty(VectorAdditionConstants.DEFAULT_SUM_VISIBLE);

    // @public (read-only) {VectorColorPalette}
    this.horizontalVectorColorPalette = VectorAdditionColors.BLUE_COLOR_PALETTE;
    this.verticalVectorColorPalette = VectorAdditionColors.BLUE_COLOR_PALETTE;

    // @public (read-only) graph for the horizontal (x-axis) orientation
    this.horizontalGraph = new Explore1DGraph(GraphOrientations.HORIZONTAL, this.componentStyleProperty, this.sumVisibleProperty, this.horizontalVectorColorPalette);

    // @public (read-only) graph for the vertical (y-axis) orientation
    this.verticalGraph = new Explore1DGraph(GraphOrientations.VERTICAL, this.componentStyleProperty, this.sumVisibleProperty, this.verticalVectorColorPalette);
  }

  /**
   * Resets the Explore1DModel.
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.sumVisibleProperty.reset();
    this.horizontalGraph.reset();
    this.verticalGraph.reset();
  }
}
vectorAddition.register('Explore1DModel', Explore1DModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJUYW5kZW0iLCJHcmFwaE9yaWVudGF0aW9ucyIsIlZlY3RvckFkZGl0aW9uTW9kZWwiLCJWZWN0b3JBZGRpdGlvbkNvbG9ycyIsIlZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIiwidmVjdG9yQWRkaXRpb24iLCJFeHBsb3JlMURHcmFwaCIsIkV4cGxvcmUxRE1vZGVsIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJhc3NlcnQiLCJzdW1WaXNpYmxlUHJvcGVydHkiLCJERUZBVUxUX1NVTV9WSVNJQkxFIiwiaG9yaXpvbnRhbFZlY3RvckNvbG9yUGFsZXR0ZSIsIkJMVUVfQ09MT1JfUEFMRVRURSIsInZlcnRpY2FsVmVjdG9yQ29sb3JQYWxldHRlIiwiaG9yaXpvbnRhbEdyYXBoIiwiSE9SSVpPTlRBTCIsImNvbXBvbmVudFN0eWxlUHJvcGVydHkiLCJ2ZXJ0aWNhbEdyYXBoIiwiVkVSVElDQUwiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwbG9yZTFETW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRXhwbG9yZTFETW9kZWwgaXMgdGhlIG1vZGVsIGZvciB0aGUgJ0V4cGxvcmUgMUQnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHcmFwaE9yaWVudGF0aW9ucyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvR3JhcGhPcmllbnRhdGlvbnMuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Nb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVmVjdG9yQWRkaXRpb25Nb2RlbC5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbkNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vVmVjdG9yQWRkaXRpb25Db2xvcnMuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHZlY3RvckFkZGl0aW9uIGZyb20gJy4uLy4uL3ZlY3RvckFkZGl0aW9uLmpzJztcclxuaW1wb3J0IEV4cGxvcmUxREdyYXBoIGZyb20gJy4vRXhwbG9yZTFER3JhcGguanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwbG9yZTFETW9kZWwgZXh0ZW5kcyBWZWN0b3JBZGRpdGlvbk1vZGVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGFuZGVtIGluc3RhbmNlb2YgVGFuZGVtLCBgaW52YWxpZCB0YW5kZW06ICR7dGFuZGVtfWAgKTtcclxuXHJcbiAgICBzdXBlciggdGFuZGVtICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyBQcm9wZXJ0eSBjb250cm9sbGluZyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgc3VtIGZvciBib3RoIEdyYXBoIGluc3RhbmNlc1xyXG4gICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5ERUZBVUxUX1NVTV9WSVNJQkxFICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSB7VmVjdG9yQ29sb3JQYWxldHRlfVxyXG4gICAgdGhpcy5ob3Jpem9udGFsVmVjdG9yQ29sb3JQYWxldHRlID0gVmVjdG9yQWRkaXRpb25Db2xvcnMuQkxVRV9DT0xPUl9QQUxFVFRFO1xyXG4gICAgdGhpcy52ZXJ0aWNhbFZlY3RvckNvbG9yUGFsZXR0ZSA9IFZlY3RvckFkZGl0aW9uQ29sb3JzLkJMVUVfQ09MT1JfUEFMRVRURTtcclxuXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIGdyYXBoIGZvciB0aGUgaG9yaXpvbnRhbCAoeC1heGlzKSBvcmllbnRhdGlvblxyXG4gICAgdGhpcy5ob3Jpem9udGFsR3JhcGggPSBuZXcgRXhwbG9yZTFER3JhcGgoIEdyYXBoT3JpZW50YXRpb25zLkhPUklaT05UQUwsXHJcbiAgICAgIHRoaXMuY29tcG9uZW50U3R5bGVQcm9wZXJ0eSxcclxuICAgICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIHRoaXMuaG9yaXpvbnRhbFZlY3RvckNvbG9yUGFsZXR0ZSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkgZ3JhcGggZm9yIHRoZSB2ZXJ0aWNhbCAoeS1heGlzKSBvcmllbnRhdGlvblxyXG4gICAgdGhpcy52ZXJ0aWNhbEdyYXBoID0gbmV3IEV4cGxvcmUxREdyYXBoKCBHcmFwaE9yaWVudGF0aW9ucy5WRVJUSUNBTCxcclxuICAgICAgdGhpcy5jb21wb25lbnRTdHlsZVByb3BlcnR5LFxyXG4gICAgICB0aGlzLnN1bVZpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdGhpcy52ZXJ0aWNhbFZlY3RvckNvbG9yUGFsZXR0ZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoZSBFeHBsb3JlMURNb2RlbC5cclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy5zdW1WaXNpYmxlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuaG9yaXpvbnRhbEdyYXBoLnJlc2V0KCk7XHJcbiAgICB0aGlzLnZlcnRpY2FsR3JhcGgucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnRXhwbG9yZTFETW9kZWwnLCBFeHBsb3JlMURNb2RlbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsaUJBQWlCLE1BQU0seUNBQXlDO0FBQ3ZFLE9BQU9DLG1CQUFtQixNQUFNLDJDQUEyQztBQUMzRSxPQUFPQyxvQkFBb0IsTUFBTSxzQ0FBc0M7QUFDdkUsT0FBT0MsdUJBQXVCLE1BQU0seUNBQXlDO0FBQzdFLE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjtBQUVoRCxlQUFlLE1BQU1DLGNBQWMsU0FBU0wsbUJBQW1CLENBQUM7RUFFOUQ7QUFDRjtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQkMsTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sWUFBWVQsTUFBTSxFQUFHLG1CQUFrQlMsTUFBTyxFQUFFLENBQUM7SUFFekUsS0FBSyxDQUFFQSxNQUFPLENBQUM7O0lBRWY7SUFDQSxJQUFJLENBQUNFLGtCQUFrQixHQUFHLElBQUlaLGVBQWUsQ0FBRUssdUJBQXVCLENBQUNRLG1CQUFvQixDQUFDOztJQUU1RjtJQUNBLElBQUksQ0FBQ0MsNEJBQTRCLEdBQUdWLG9CQUFvQixDQUFDVyxrQkFBa0I7SUFDM0UsSUFBSSxDQUFDQywwQkFBMEIsR0FBR1osb0JBQW9CLENBQUNXLGtCQUFrQjs7SUFFekU7SUFDQSxJQUFJLENBQUNFLGVBQWUsR0FBRyxJQUFJVixjQUFjLENBQUVMLGlCQUFpQixDQUFDZ0IsVUFBVSxFQUNyRSxJQUFJLENBQUNDLHNCQUFzQixFQUMzQixJQUFJLENBQUNQLGtCQUFrQixFQUN2QixJQUFJLENBQUNFLDRCQUE2QixDQUFDOztJQUVyQztJQUNBLElBQUksQ0FBQ00sYUFBYSxHQUFHLElBQUliLGNBQWMsQ0FBRUwsaUJBQWlCLENBQUNtQixRQUFRLEVBQ2pFLElBQUksQ0FBQ0Ysc0JBQXNCLEVBQzNCLElBQUksQ0FBQ1Asa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQ0ksMEJBQTJCLENBQUM7RUFDckM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxLQUFLQSxDQUFBLEVBQUc7SUFDTixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBQ2IsSUFBSSxDQUFDVixrQkFBa0IsQ0FBQ1UsS0FBSyxDQUFDLENBQUM7SUFDL0IsSUFBSSxDQUFDTCxlQUFlLENBQUNLLEtBQUssQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQ0YsYUFBYSxDQUFDRSxLQUFLLENBQUMsQ0FBQztFQUM1QjtBQUNGO0FBRUFoQixjQUFjLENBQUNpQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVmLGNBQWUsQ0FBQyJ9