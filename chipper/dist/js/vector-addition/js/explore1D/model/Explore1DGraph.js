// Copyright 2019-2023, University of Colorado Boulder

/**
 * Model for a single graph on the 'Explore 1D' screen. 'Explore 1D' has a total of 2 graphs (polar and Cartesian).
 *
 * Characteristics of a Explore 1D Graph (which extends Graph) are:
 *  - Explore 1D graphs have exactly 1 vector sets each
 *  - Have a shared sum visible property across all graphs
 *  - are either Horizontal or Vertical
 *  - Are strictly Cartesian
 *  - Same width/height as default graph bounds, but the origin is in the center
 *
 * @author Brandon Li
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import ComponentVectorStyles from '../../common/model/ComponentVectorStyles.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import Graph from '../../common/model/Graph.js';
import GraphOrientations from '../../common/model/GraphOrientations.js';
import VectorColorPalette from '../../common/model/VectorColorPalette.js';
import VectorSet from '../../common/model/VectorSet.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import vectorAddition from '../../vectorAddition.js';

// constants
const DEFAULT_GRAPH_BOUNDS = VectorAdditionConstants.DEFAULT_GRAPH_BOUNDS;

// See https://github.com/phetsims/vector-addition/issues/127
assert && assert(DEFAULT_GRAPH_BOUNDS.width % 2 === 0, `DEFAULT_GRAPH_BOUNDS.width must be even: ${DEFAULT_GRAPH_BOUNDS.width}`);
assert && assert(DEFAULT_GRAPH_BOUNDS.height % 2 === 0, `DEFAULT_GRAPH_BOUNDS.height must be even: ${DEFAULT_GRAPH_BOUNDS.height}`);

// graph bounds for 'Explore 1D' - origin is at the center
const EXPLORE_1D_GRAPH_BOUNDS = new Bounds2(-DEFAULT_GRAPH_BOUNDS.width / 2, -DEFAULT_GRAPH_BOUNDS.height / 2, DEFAULT_GRAPH_BOUNDS.width / 2, DEFAULT_GRAPH_BOUNDS.height / 2);

// All graphs on 'Explore 1D' are strictly Cartesian
const EXPLORE_1D_COORDINATE_SNAP_MODE = CoordinateSnapModes.CARTESIAN;
export default class Explore1DGraph extends Graph {
  /**
   * @param {GraphOrientations} graphOrientation - orientation of the graph (Must be either Horizontal or Vertical)
   * @param {EnumerationProperty.<ComponentVectorStyles>} componentStyleProperty
   * @param {BooleanProperty} sumVisibleProperty - shared boolean Property that controls the visibility of sum vectors
   * @param {VectorColorPalette} vectorColorPalette - color palette for vectors on this graph
   */
  constructor(graphOrientation, componentStyleProperty, sumVisibleProperty, vectorColorPalette) {
    assert && assert(_.includes([GraphOrientations.HORIZONTAL, GraphOrientations.VERTICAL], graphOrientation));
    assert && assert(componentStyleProperty instanceof EnumerationProperty && ComponentVectorStyles.enumeration.includes(componentStyleProperty.value), `invalid componentStyleProperty: ${componentStyleProperty}`);
    assert && assert(sumVisibleProperty instanceof BooleanProperty, `invalid sumVisibleProperty: ${sumVisibleProperty}`);
    assert && assert(vectorColorPalette instanceof VectorColorPalette, `invalid vectorColorPalette: ${vectorColorPalette}`);
    super(EXPLORE_1D_GRAPH_BOUNDS, EXPLORE_1D_COORDINATE_SNAP_MODE, {
      orientation: graphOrientation
    });

    // @public (read-only) {VectorSet} vectorSet - Graphs on 'Explore 1D' have exactly one vector set
    this.vectorSet = new VectorSet(this, componentStyleProperty, sumVisibleProperty, vectorColorPalette);

    // Add the one and only vector set
    this.vectorSets.push(this.vectorSet);
  }
}
vectorAddition.register('Explore1DGraph', Explore1DGraph);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbnVtZXJhdGlvblByb3BlcnR5IiwiQm91bmRzMiIsIkNvbXBvbmVudFZlY3RvclN0eWxlcyIsIkNvb3JkaW5hdGVTbmFwTW9kZXMiLCJHcmFwaCIsIkdyYXBoT3JpZW50YXRpb25zIiwiVmVjdG9yQ29sb3JQYWxldHRlIiwiVmVjdG9yU2V0IiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJ2ZWN0b3JBZGRpdGlvbiIsIkRFRkFVTFRfR1JBUEhfQk9VTkRTIiwiYXNzZXJ0Iiwid2lkdGgiLCJoZWlnaHQiLCJFWFBMT1JFXzFEX0dSQVBIX0JPVU5EUyIsIkVYUExPUkVfMURfQ09PUkRJTkFURV9TTkFQX01PREUiLCJDQVJURVNJQU4iLCJFeHBsb3JlMURHcmFwaCIsImNvbnN0cnVjdG9yIiwiZ3JhcGhPcmllbnRhdGlvbiIsImNvbXBvbmVudFN0eWxlUHJvcGVydHkiLCJzdW1WaXNpYmxlUHJvcGVydHkiLCJ2ZWN0b3JDb2xvclBhbGV0dGUiLCJfIiwiaW5jbHVkZXMiLCJIT1JJWk9OVEFMIiwiVkVSVElDQUwiLCJlbnVtZXJhdGlvbiIsInZhbHVlIiwib3JpZW50YXRpb24iLCJ2ZWN0b3JTZXQiLCJ2ZWN0b3JTZXRzIiwicHVzaCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwbG9yZTFER3JhcGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIGEgc2luZ2xlIGdyYXBoIG9uIHRoZSAnRXhwbG9yZSAxRCcgc2NyZWVuLiAnRXhwbG9yZSAxRCcgaGFzIGEgdG90YWwgb2YgMiBncmFwaHMgKHBvbGFyIGFuZCBDYXJ0ZXNpYW4pLlxyXG4gKlxyXG4gKiBDaGFyYWN0ZXJpc3RpY3Mgb2YgYSBFeHBsb3JlIDFEIEdyYXBoICh3aGljaCBleHRlbmRzIEdyYXBoKSBhcmU6XHJcbiAqICAtIEV4cGxvcmUgMUQgZ3JhcGhzIGhhdmUgZXhhY3RseSAxIHZlY3RvciBzZXRzIGVhY2hcclxuICogIC0gSGF2ZSBhIHNoYXJlZCBzdW0gdmlzaWJsZSBwcm9wZXJ0eSBhY3Jvc3MgYWxsIGdyYXBoc1xyXG4gKiAgLSBhcmUgZWl0aGVyIEhvcml6b250YWwgb3IgVmVydGljYWxcclxuICogIC0gQXJlIHN0cmljdGx5IENhcnRlc2lhblxyXG4gKiAgLSBTYW1lIHdpZHRoL2hlaWdodCBhcyBkZWZhdWx0IGdyYXBoIGJvdW5kcywgYnV0IHRoZSBvcmlnaW4gaXMgaW4gdGhlIGNlbnRlclxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgQ29tcG9uZW50VmVjdG9yU3R5bGVzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Db21wb25lbnRWZWN0b3JTdHlsZXMuanMnO1xyXG5pbXBvcnQgQ29vcmRpbmF0ZVNuYXBNb2RlcyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ29vcmRpbmF0ZVNuYXBNb2Rlcy5qcyc7XHJcbmltcG9ydCBHcmFwaCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvR3JhcGguanMnO1xyXG5pbXBvcnQgR3JhcGhPcmllbnRhdGlvbnMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0dyYXBoT3JpZW50YXRpb25zLmpzJztcclxuaW1wb3J0IFZlY3RvckNvbG9yUGFsZXR0ZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVmVjdG9yQ29sb3JQYWxldHRlLmpzJztcclxuaW1wb3J0IFZlY3RvclNldCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVmVjdG9yU2V0LmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgREVGQVVMVF9HUkFQSF9CT1VORFMgPSBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5ERUZBVUxUX0dSQVBIX0JPVU5EUztcclxuXHJcbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVjdG9yLWFkZGl0aW9uL2lzc3Vlcy8xMjdcclxuYXNzZXJ0ICYmIGFzc2VydCggREVGQVVMVF9HUkFQSF9CT1VORFMud2lkdGggJSAyID09PSAwLCBgREVGQVVMVF9HUkFQSF9CT1VORFMud2lkdGggbXVzdCBiZSBldmVuOiAke0RFRkFVTFRfR1JBUEhfQk9VTkRTLndpZHRofWAgKTtcclxuYXNzZXJ0ICYmIGFzc2VydCggREVGQVVMVF9HUkFQSF9CT1VORFMuaGVpZ2h0ICUgMiA9PT0gMCwgYERFRkFVTFRfR1JBUEhfQk9VTkRTLmhlaWdodCBtdXN0IGJlIGV2ZW46ICR7REVGQVVMVF9HUkFQSF9CT1VORFMuaGVpZ2h0fWAgKTtcclxuXHJcbi8vIGdyYXBoIGJvdW5kcyBmb3IgJ0V4cGxvcmUgMUQnIC0gb3JpZ2luIGlzIGF0IHRoZSBjZW50ZXJcclxuY29uc3QgRVhQTE9SRV8xRF9HUkFQSF9CT1VORFMgPSBuZXcgQm91bmRzMiggLURFRkFVTFRfR1JBUEhfQk9VTkRTLndpZHRoIC8gMixcclxuICAtREVGQVVMVF9HUkFQSF9CT1VORFMuaGVpZ2h0IC8gMixcclxuICBERUZBVUxUX0dSQVBIX0JPVU5EUy53aWR0aCAvIDIsXHJcbiAgREVGQVVMVF9HUkFQSF9CT1VORFMuaGVpZ2h0IC8gMiApO1xyXG5cclxuLy8gQWxsIGdyYXBocyBvbiAnRXhwbG9yZSAxRCcgYXJlIHN0cmljdGx5IENhcnRlc2lhblxyXG5jb25zdCBFWFBMT1JFXzFEX0NPT1JESU5BVEVfU05BUF9NT0RFID0gQ29vcmRpbmF0ZVNuYXBNb2Rlcy5DQVJURVNJQU47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHBsb3JlMURHcmFwaCBleHRlbmRzIEdyYXBoIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtHcmFwaE9yaWVudGF0aW9uc30gZ3JhcGhPcmllbnRhdGlvbiAtIG9yaWVudGF0aW9uIG9mIHRoZSBncmFwaCAoTXVzdCBiZSBlaXRoZXIgSG9yaXpvbnRhbCBvciBWZXJ0aWNhbClcclxuICAgKiBAcGFyYW0ge0VudW1lcmF0aW9uUHJvcGVydHkuPENvbXBvbmVudFZlY3RvclN0eWxlcz59IGNvbXBvbmVudFN0eWxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW5Qcm9wZXJ0eX0gc3VtVmlzaWJsZVByb3BlcnR5IC0gc2hhcmVkIGJvb2xlYW4gUHJvcGVydHkgdGhhdCBjb250cm9scyB0aGUgdmlzaWJpbGl0eSBvZiBzdW0gdmVjdG9yc1xyXG4gICAqIEBwYXJhbSB7VmVjdG9yQ29sb3JQYWxldHRlfSB2ZWN0b3JDb2xvclBhbGV0dGUgLSBjb2xvciBwYWxldHRlIGZvciB2ZWN0b3JzIG9uIHRoaXMgZ3JhcGhcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggZ3JhcGhPcmllbnRhdGlvbiwgY29tcG9uZW50U3R5bGVQcm9wZXJ0eSwgc3VtVmlzaWJsZVByb3BlcnR5LCB2ZWN0b3JDb2xvclBhbGV0dGUgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggXy5pbmNsdWRlcyggWyBHcmFwaE9yaWVudGF0aW9ucy5IT1JJWk9OVEFMLCBHcmFwaE9yaWVudGF0aW9ucy5WRVJUSUNBTCBdLCBncmFwaE9yaWVudGF0aW9uICkgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvbXBvbmVudFN0eWxlUHJvcGVydHkgaW5zdGFuY2VvZiBFbnVtZXJhdGlvblByb3BlcnR5ICYmIENvbXBvbmVudFZlY3RvclN0eWxlcy5lbnVtZXJhdGlvbi5pbmNsdWRlcyggY29tcG9uZW50U3R5bGVQcm9wZXJ0eS52YWx1ZSApLFxyXG4gICAgICBgaW52YWxpZCBjb21wb25lbnRTdHlsZVByb3BlcnR5OiAke2NvbXBvbmVudFN0eWxlUHJvcGVydHl9YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc3VtVmlzaWJsZVByb3BlcnR5IGluc3RhbmNlb2YgQm9vbGVhblByb3BlcnR5LCBgaW52YWxpZCBzdW1WaXNpYmxlUHJvcGVydHk6ICR7c3VtVmlzaWJsZVByb3BlcnR5fWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHZlY3RvckNvbG9yUGFsZXR0ZSBpbnN0YW5jZW9mIFZlY3RvckNvbG9yUGFsZXR0ZSwgYGludmFsaWQgdmVjdG9yQ29sb3JQYWxldHRlOiAke3ZlY3RvckNvbG9yUGFsZXR0ZX1gICk7XHJcblxyXG4gICAgc3VwZXIoIEVYUExPUkVfMURfR1JBUEhfQk9VTkRTLCBFWFBMT1JFXzFEX0NPT1JESU5BVEVfU05BUF9NT0RFLCB7XHJcbiAgICAgIG9yaWVudGF0aW9uOiBncmFwaE9yaWVudGF0aW9uXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSB7VmVjdG9yU2V0fSB2ZWN0b3JTZXQgLSBHcmFwaHMgb24gJ0V4cGxvcmUgMUQnIGhhdmUgZXhhY3RseSBvbmUgdmVjdG9yIHNldFxyXG4gICAgdGhpcy52ZWN0b3JTZXQgPSBuZXcgVmVjdG9yU2V0KCB0aGlzLCBjb21wb25lbnRTdHlsZVByb3BlcnR5LCBzdW1WaXNpYmxlUHJvcGVydHksIHZlY3RvckNvbG9yUGFsZXR0ZSApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgb25lIGFuZCBvbmx5IHZlY3RvciBzZXRcclxuICAgIHRoaXMudmVjdG9yU2V0cy5wdXNoKCB0aGlzLnZlY3RvclNldCApO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdFeHBsb3JlMURHcmFwaCcsIEV4cGxvcmUxREdyYXBoICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxtQkFBbUIsTUFBTSw0Q0FBNEM7QUFDNUUsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxxQkFBcUIsTUFBTSw2Q0FBNkM7QUFDL0UsT0FBT0MsbUJBQW1CLE1BQU0sMkNBQTJDO0FBQzNFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsaUJBQWlCLE1BQU0seUNBQXlDO0FBQ3ZFLE9BQU9DLGtCQUFrQixNQUFNLDBDQUEwQztBQUN6RSxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELE9BQU9DLHVCQUF1QixNQUFNLHlDQUF5QztBQUM3RSxPQUFPQyxjQUFjLE1BQU0seUJBQXlCOztBQUVwRDtBQUNBLE1BQU1DLG9CQUFvQixHQUFHRix1QkFBdUIsQ0FBQ0Usb0JBQW9COztBQUV6RTtBQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsb0JBQW9CLENBQUNFLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFHLDRDQUEyQ0Ysb0JBQW9CLENBQUNFLEtBQU0sRUFBRSxDQUFDO0FBQ2xJRCxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsb0JBQW9CLENBQUNHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFHLDZDQUE0Q0gsb0JBQW9CLENBQUNHLE1BQU8sRUFBRSxDQUFDOztBQUVySTtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLElBQUliLE9BQU8sQ0FBRSxDQUFDUyxvQkFBb0IsQ0FBQ0UsS0FBSyxHQUFHLENBQUMsRUFDMUUsQ0FBQ0Ysb0JBQW9CLENBQUNHLE1BQU0sR0FBRyxDQUFDLEVBQ2hDSCxvQkFBb0IsQ0FBQ0UsS0FBSyxHQUFHLENBQUMsRUFDOUJGLG9CQUFvQixDQUFDRyxNQUFNLEdBQUcsQ0FBRSxDQUFDOztBQUVuQztBQUNBLE1BQU1FLCtCQUErQixHQUFHWixtQkFBbUIsQ0FBQ2EsU0FBUztBQUVyRSxlQUFlLE1BQU1DLGNBQWMsU0FBU2IsS0FBSyxDQUFDO0VBRWhEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFYyxXQUFXQSxDQUFFQyxnQkFBZ0IsRUFBRUMsc0JBQXNCLEVBQUVDLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRztJQUU5RlgsTUFBTSxJQUFJQSxNQUFNLENBQUVZLENBQUMsQ0FBQ0MsUUFBUSxDQUFFLENBQUVuQixpQkFBaUIsQ0FBQ29CLFVBQVUsRUFBRXBCLGlCQUFpQixDQUFDcUIsUUFBUSxDQUFFLEVBQUVQLGdCQUFpQixDQUFFLENBQUM7SUFDaEhSLE1BQU0sSUFBSUEsTUFBTSxDQUFFUyxzQkFBc0IsWUFBWXBCLG1CQUFtQixJQUFJRSxxQkFBcUIsQ0FBQ3lCLFdBQVcsQ0FBQ0gsUUFBUSxDQUFFSixzQkFBc0IsQ0FBQ1EsS0FBTSxDQUFDLEVBQ2xKLG1DQUFrQ1Isc0JBQXVCLEVBQUUsQ0FBQztJQUMvRFQsTUFBTSxJQUFJQSxNQUFNLENBQUVVLGtCQUFrQixZQUFZdEIsZUFBZSxFQUFHLCtCQUE4QnNCLGtCQUFtQixFQUFFLENBQUM7SUFDdEhWLE1BQU0sSUFBSUEsTUFBTSxDQUFFVyxrQkFBa0IsWUFBWWhCLGtCQUFrQixFQUFHLCtCQUE4QmdCLGtCQUFtQixFQUFFLENBQUM7SUFFekgsS0FBSyxDQUFFUix1QkFBdUIsRUFBRUMsK0JBQStCLEVBQUU7TUFDL0RjLFdBQVcsRUFBRVY7SUFDZixDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNXLFNBQVMsR0FBRyxJQUFJdkIsU0FBUyxDQUFFLElBQUksRUFBRWEsc0JBQXNCLEVBQUVDLGtCQUFrQixFQUFFQyxrQkFBbUIsQ0FBQzs7SUFFdEc7SUFDQSxJQUFJLENBQUNTLFVBQVUsQ0FBQ0MsSUFBSSxDQUFFLElBQUksQ0FBQ0YsU0FBVSxDQUFDO0VBQ3hDO0FBQ0Y7QUFFQXJCLGNBQWMsQ0FBQ3dCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWhCLGNBQWUsQ0FBQyJ9