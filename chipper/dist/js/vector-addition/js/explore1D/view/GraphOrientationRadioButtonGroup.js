// Copyright 2019-2023, University of Colorado Boulder

/**
 * Radio button group for switching between the Vertical and Horizontal graph.
 *
 * @author Brandon Li
 */

import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import GraphOrientations from '../../common/model/GraphOrientations.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import VectorAdditionIconFactory from '../../common/view/VectorAdditionIconFactory.js';
import vectorAddition from '../../vectorAddition.js';
export default class GraphOrientationRadioButtonGroup extends RectangularRadioButtonGroup {
  /**
   * @param {EnumerationProperty.<GraphOrientations>} graphOrientationProperty
   * @param {Object} [options]
   */
  constructor(graphOrientationProperty, options) {
    assert && assert(graphOrientationProperty instanceof EnumerationProperty && GraphOrientations.enumeration.includes(graphOrientationProperty.value), `invalid graphOrientationProperty: ${graphOrientationProperty}`);
    assert && assert(!options || Object.getPrototypeOf(options) === Object.prototype, `Extra prototype on options: ${options}`);
    options = merge({}, VectorAdditionConstants.RADIO_BUTTON_GROUP_OPTIONS, options);

    // Create the description of the buttons
    const content = [];
    [GraphOrientations.HORIZONTAL, GraphOrientations.VERTICAL].forEach(graphOrientation => {
      content.push({
        value: graphOrientation,
        createNode: () => VectorAdditionIconFactory.createGraphOrientationIcon(graphOrientation)
      });
    });
    super(graphOrientationProperty, content, options);
  }
}
vectorAddition.register('GraphOrientationRadioButtonGroup', GraphOrientationRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvblByb3BlcnR5IiwibWVyZ2UiLCJSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAiLCJHcmFwaE9yaWVudGF0aW9ucyIsIlZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIiwiVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeSIsInZlY3RvckFkZGl0aW9uIiwiR3JhcGhPcmllbnRhdGlvblJhZGlvQnV0dG9uR3JvdXAiLCJjb25zdHJ1Y3RvciIsImdyYXBoT3JpZW50YXRpb25Qcm9wZXJ0eSIsIm9wdGlvbnMiLCJhc3NlcnQiLCJlbnVtZXJhdGlvbiIsImluY2x1ZGVzIiwidmFsdWUiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsIlJBRElPX0JVVFRPTl9HUk9VUF9PUFRJT05TIiwiY29udGVudCIsIkhPUklaT05UQUwiLCJWRVJUSUNBTCIsImZvckVhY2giLCJncmFwaE9yaWVudGF0aW9uIiwicHVzaCIsImNyZWF0ZU5vZGUiLCJjcmVhdGVHcmFwaE9yaWVudGF0aW9uSWNvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR3JhcGhPcmllbnRhdGlvblJhZGlvQnV0dG9uR3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmFkaW8gYnV0dG9uIGdyb3VwIGZvciBzd2l0Y2hpbmcgYmV0d2VlbiB0aGUgVmVydGljYWwgYW5kIEhvcml6b250YWwgZ3JhcGguXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBHcmFwaE9yaWVudGF0aW9ucyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvR3JhcGhPcmllbnRhdGlvbnMuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFwaE9yaWVudGF0aW9uUmFkaW9CdXR0b25Hcm91cCBleHRlbmRzIFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RW51bWVyYXRpb25Qcm9wZXJ0eS48R3JhcGhPcmllbnRhdGlvbnM+fSBncmFwaE9yaWVudGF0aW9uUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGdyYXBoT3JpZW50YXRpb25Qcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBncmFwaE9yaWVudGF0aW9uUHJvcGVydHkgaW5zdGFuY2VvZiBFbnVtZXJhdGlvblByb3BlcnR5ICYmIEdyYXBoT3JpZW50YXRpb25zLmVudW1lcmF0aW9uLmluY2x1ZGVzKCBncmFwaE9yaWVudGF0aW9uUHJvcGVydHkudmFsdWUgKSxcclxuICAgICAgYGludmFsaWQgZ3JhcGhPcmllbnRhdGlvblByb3BlcnR5OiAke2dyYXBoT3JpZW50YXRpb25Qcm9wZXJ0eX1gICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhb3B0aW9ucyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoIG9wdGlvbnMgKSA9PT0gT2JqZWN0LnByb3RvdHlwZSwgYEV4dHJhIHByb3RvdHlwZSBvbiBvcHRpb25zOiAke29wdGlvbnN9YCApO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge30sIFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLlJBRElPX0JVVFRPTl9HUk9VUF9PUFRJT05TLCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnV0dG9uc1xyXG4gICAgY29uc3QgY29udGVudCA9IFtdO1xyXG4gICAgWyBHcmFwaE9yaWVudGF0aW9ucy5IT1JJWk9OVEFMLCBHcmFwaE9yaWVudGF0aW9ucy5WRVJUSUNBTCBdLmZvckVhY2goIGdyYXBoT3JpZW50YXRpb24gPT4ge1xyXG4gICAgICBjb250ZW50LnB1c2goIHtcclxuICAgICAgICB2YWx1ZTogZ3JhcGhPcmllbnRhdGlvbixcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBWZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5LmNyZWF0ZUdyYXBoT3JpZW50YXRpb25JY29uKCBncmFwaE9yaWVudGF0aW9uIClcclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBncmFwaE9yaWVudGF0aW9uUHJvcGVydHksIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnR3JhcGhPcmllbnRhdGlvblJhZGlvQnV0dG9uR3JvdXAnLCBHcmFwaE9yaWVudGF0aW9uUmFkaW9CdXR0b25Hcm91cCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxtQkFBbUIsTUFBTSw0Q0FBNEM7QUFDNUUsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQywyQkFBMkIsTUFBTSwyREFBMkQ7QUFDbkcsT0FBT0MsaUJBQWlCLE1BQU0seUNBQXlDO0FBQ3ZFLE9BQU9DLHVCQUF1QixNQUFNLHlDQUF5QztBQUM3RSxPQUFPQyx5QkFBeUIsTUFBTSxnREFBZ0Q7QUFDdEYsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUVwRCxlQUFlLE1BQU1DLGdDQUFnQyxTQUFTTCwyQkFBMkIsQ0FBQztFQUV4RjtBQUNGO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyx3QkFBd0IsRUFBRUMsT0FBTyxFQUFHO0lBRS9DQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsd0JBQXdCLFlBQVlULG1CQUFtQixJQUFJRyxpQkFBaUIsQ0FBQ1MsV0FBVyxDQUFDQyxRQUFRLENBQUVKLHdCQUF3QixDQUFDSyxLQUFNLENBQUMsRUFDbEoscUNBQW9DTCx3QkFBeUIsRUFBRSxDQUFDO0lBQ25FRSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDRCxPQUFPLElBQUlLLE1BQU0sQ0FBQ0MsY0FBYyxDQUFFTixPQUFRLENBQUMsS0FBS0ssTUFBTSxDQUFDRSxTQUFTLEVBQUcsK0JBQThCUCxPQUFRLEVBQUUsQ0FBQztJQUUvSEEsT0FBTyxHQUFHVCxLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUVHLHVCQUF1QixDQUFDYywwQkFBMEIsRUFBRVIsT0FBUSxDQUFDOztJQUVsRjtJQUNBLE1BQU1TLE9BQU8sR0FBRyxFQUFFO0lBQ2xCLENBQUVoQixpQkFBaUIsQ0FBQ2lCLFVBQVUsRUFBRWpCLGlCQUFpQixDQUFDa0IsUUFBUSxDQUFFLENBQUNDLE9BQU8sQ0FBRUMsZ0JBQWdCLElBQUk7TUFDeEZKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFFO1FBQ1pWLEtBQUssRUFBRVMsZ0JBQWdCO1FBQ3ZCRSxVQUFVLEVBQUVBLENBQUEsS0FBTXBCLHlCQUF5QixDQUFDcUIsMEJBQTBCLENBQUVILGdCQUFpQjtNQUMzRixDQUFFLENBQUM7SUFDTCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVkLHdCQUF3QixFQUFFVSxPQUFPLEVBQUVULE9BQVEsQ0FBQztFQUNyRDtBQUNGO0FBRUFKLGNBQWMsQ0FBQ3FCLFFBQVEsQ0FBRSxrQ0FBa0MsRUFBRXBCLGdDQUFpQyxDQUFDIn0=