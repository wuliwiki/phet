// Copyright 2019-2023, University of Colorado Boulder

/**
 * Explore1DVectorCreatorPanel is a specialization of VectorCreatorPanel (the vector 'toolbox') for the 'Explore 1D' screen.
 *
 * @author Brandon Li
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import GraphOrientations from '../../common/model/GraphOrientations.js';
import SceneNode from '../../common/view/SceneNode.js';
import VectorCreatorPanel from '../../common/view/VectorCreatorPanel.js';
import VectorCreatorPanelSlot from '../../common/view/VectorCreatorPanelSlot.js';
import vectorAddition from '../../vectorAddition.js';
import Explore1DGraph from '../model/Explore1DGraph.js';
export default class Explore1DVectorCreatorPanel extends VectorCreatorPanel {
  /**
   * @param {Explore1DGraph} graph
   * @param {SceneNode} sceneNode
   * @param {string[]} symbols - the symbols corresponding to each slot
   * @param {Object} [options]
   */
  constructor(graph, sceneNode, symbols, options) {
    assert && assert(graph instanceof Explore1DGraph, `invalid graph: ${graph}`);
    assert && assert(sceneNode instanceof SceneNode, `invalid sceneNode: ${sceneNode}`);
    assert && assert(_.every(symbols, symbol => typeof symbol === 'string'), `invalid symbols: ${symbols}`);
    assert && assert(!options || Object.getPrototypeOf(options) === Object.prototype, `Extra prototype on options: ${options}`);
    options = merge({
      slotSpacing: graph.orientation === GraphOrientations.VERTICAL ? 18 : 32
    }, options);

    // Create the initial vector components, they are the same for every symbol.
    // See https://github.com/phetsims/vector-addition/issues/227
    const isHorizontal = graph.orientation === GraphOrientations.HORIZONTAL;
    const initialVectorComponents = isHorizontal ? new Vector2(5, 0) : new Vector2(0, 5);

    // Create a slot for each symbol
    const panelSlots = [];
    symbols.forEach(symbol => {
      panelSlots.push(new VectorCreatorPanelSlot(graph, graph.vectorSet, sceneNode, initialVectorComponents, {
        symbol: symbol,
        iconArrowMagnitude: 35,
        // pointer area dilation for icons, identical for mouseArea and touchArea,
        // see https://github.com/phetsims/vector-addition/issues/250
        iconPointerAreaXDilation: isHorizontal ? 10 : 20,
        iconPointerAreaYDilation: isHorizontal ? 15 : 5
      }));
    });
    super(panelSlots, options);
  }
}
vectorAddition.register('Explore1DVectorCreatorPanel', Explore1DVectorCreatorPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwibWVyZ2UiLCJHcmFwaE9yaWVudGF0aW9ucyIsIlNjZW5lTm9kZSIsIlZlY3RvckNyZWF0b3JQYW5lbCIsIlZlY3RvckNyZWF0b3JQYW5lbFNsb3QiLCJ2ZWN0b3JBZGRpdGlvbiIsIkV4cGxvcmUxREdyYXBoIiwiRXhwbG9yZTFEVmVjdG9yQ3JlYXRvclBhbmVsIiwiY29uc3RydWN0b3IiLCJncmFwaCIsInNjZW5lTm9kZSIsInN5bWJvbHMiLCJvcHRpb25zIiwiYXNzZXJ0IiwiXyIsImV2ZXJ5Iiwic3ltYm9sIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJzbG90U3BhY2luZyIsIm9yaWVudGF0aW9uIiwiVkVSVElDQUwiLCJpc0hvcml6b250YWwiLCJIT1JJWk9OVEFMIiwiaW5pdGlhbFZlY3RvckNvbXBvbmVudHMiLCJwYW5lbFNsb3RzIiwiZm9yRWFjaCIsInB1c2giLCJ2ZWN0b3JTZXQiLCJpY29uQXJyb3dNYWduaXR1ZGUiLCJpY29uUG9pbnRlckFyZWFYRGlsYXRpb24iLCJpY29uUG9pbnRlckFyZWFZRGlsYXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkV4cGxvcmUxRFZlY3RvckNyZWF0b3JQYW5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFeHBsb3JlMURWZWN0b3JDcmVhdG9yUGFuZWwgaXMgYSBzcGVjaWFsaXphdGlvbiBvZiBWZWN0b3JDcmVhdG9yUGFuZWwgKHRoZSB2ZWN0b3IgJ3Rvb2xib3gnKSBmb3IgdGhlICdFeHBsb3JlIDFEJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBHcmFwaE9yaWVudGF0aW9ucyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvR3JhcGhPcmllbnRhdGlvbnMuanMnO1xyXG5pbXBvcnQgU2NlbmVOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1NjZW5lTm9kZS5qcyc7XHJcbmltcG9ydCBWZWN0b3JDcmVhdG9yUGFuZWwgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsU2xvdC5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBFeHBsb3JlMURHcmFwaCBmcm9tICcuLi9tb2RlbC9FeHBsb3JlMURHcmFwaC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHBsb3JlMURWZWN0b3JDcmVhdG9yUGFuZWwgZXh0ZW5kcyBWZWN0b3JDcmVhdG9yUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0V4cGxvcmUxREdyYXBofSBncmFwaFxyXG4gICAqIEBwYXJhbSB7U2NlbmVOb2RlfSBzY2VuZU5vZGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBzeW1ib2xzIC0gdGhlIHN5bWJvbHMgY29ycmVzcG9uZGluZyB0byBlYWNoIHNsb3RcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGdyYXBoLCBzY2VuZU5vZGUsIHN5bWJvbHMsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZ3JhcGggaW5zdGFuY2VvZiBFeHBsb3JlMURHcmFwaCwgYGludmFsaWQgZ3JhcGg6ICR7Z3JhcGh9YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc2NlbmVOb2RlIGluc3RhbmNlb2YgU2NlbmVOb2RlLCBgaW52YWxpZCBzY2VuZU5vZGU6ICR7c2NlbmVOb2RlfWAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uZXZlcnkoIHN5bWJvbHMsIHN5bWJvbCA9PiB0eXBlb2Ygc3ltYm9sID09PSAnc3RyaW5nJyApLCBgaW52YWxpZCBzeW1ib2xzOiAke3N5bWJvbHN9YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKCBvcHRpb25zICkgPT09IE9iamVjdC5wcm90b3R5cGUsIGBFeHRyYSBwcm90b3R5cGUgb24gb3B0aW9uczogJHtvcHRpb25zfWAgKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgc2xvdFNwYWNpbmc6ICggZ3JhcGgub3JpZW50YXRpb24gPT09IEdyYXBoT3JpZW50YXRpb25zLlZFUlRJQ0FMICkgPyAxOCA6IDMyXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBpbml0aWFsIHZlY3RvciBjb21wb25lbnRzLCB0aGV5IGFyZSB0aGUgc2FtZSBmb3IgZXZlcnkgc3ltYm9sLlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzIyN1xyXG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gKCBncmFwaC5vcmllbnRhdGlvbiA9PT0gR3JhcGhPcmllbnRhdGlvbnMuSE9SSVpPTlRBTCApO1xyXG4gICAgY29uc3QgaW5pdGlhbFZlY3RvckNvbXBvbmVudHMgPSBpc0hvcml6b250YWwgPyBuZXcgVmVjdG9yMiggNSwgMCApIDogbmV3IFZlY3RvcjIoIDAsIDUgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBzbG90IGZvciBlYWNoIHN5bWJvbFxyXG4gICAgY29uc3QgcGFuZWxTbG90cyA9IFtdO1xyXG4gICAgc3ltYm9scy5mb3JFYWNoKCBzeW1ib2wgPT4ge1xyXG4gICAgICBwYW5lbFNsb3RzLnB1c2goIG5ldyBWZWN0b3JDcmVhdG9yUGFuZWxTbG90KCBncmFwaCwgZ3JhcGgudmVjdG9yU2V0LCBzY2VuZU5vZGUsIGluaXRpYWxWZWN0b3JDb21wb25lbnRzLCB7XHJcbiAgICAgICAgc3ltYm9sOiBzeW1ib2wsXHJcbiAgICAgICAgaWNvbkFycm93TWFnbml0dWRlOiAzNSxcclxuXHJcbiAgICAgICAgLy8gcG9pbnRlciBhcmVhIGRpbGF0aW9uIGZvciBpY29ucywgaWRlbnRpY2FsIGZvciBtb3VzZUFyZWEgYW5kIHRvdWNoQXJlYSxcclxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMjUwXHJcbiAgICAgICAgaWNvblBvaW50ZXJBcmVhWERpbGF0aW9uOiBpc0hvcml6b250YWwgPyAxMCA6IDIwLFxyXG4gICAgICAgIGljb25Qb2ludGVyQXJlYVlEaWxhdGlvbjogaXNIb3Jpem9udGFsID8gMTUgOiA1XHJcbiAgICAgIH0gKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBwYW5lbFNsb3RzLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ0V4cGxvcmUxRFZlY3RvckNyZWF0b3JQYW5lbCcsIEV4cGxvcmUxRFZlY3RvckNyZWF0b3JQYW5lbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsaUJBQWlCLE1BQU0seUNBQXlDO0FBQ3ZFLE9BQU9DLFNBQVMsTUFBTSxnQ0FBZ0M7QUFDdEQsT0FBT0Msa0JBQWtCLE1BQU0seUNBQXlDO0FBQ3hFLE9BQU9DLHNCQUFzQixNQUFNLDZDQUE2QztBQUNoRixPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLGNBQWMsTUFBTSw0QkFBNEI7QUFFdkQsZUFBZSxNQUFNQywyQkFBMkIsU0FBU0osa0JBQWtCLENBQUM7RUFFMUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRztJQUVoREMsTUFBTSxJQUFJQSxNQUFNLENBQUVKLEtBQUssWUFBWUgsY0FBYyxFQUFHLGtCQUFpQkcsS0FBTSxFQUFFLENBQUM7SUFDOUVJLE1BQU0sSUFBSUEsTUFBTSxDQUFFSCxTQUFTLFlBQVlSLFNBQVMsRUFBRyxzQkFBcUJRLFNBQVUsRUFBRSxDQUFDO0lBQ3JGRyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsQ0FBQyxDQUFDQyxLQUFLLENBQUVKLE9BQU8sRUFBRUssTUFBTSxJQUFJLE9BQU9BLE1BQU0sS0FBSyxRQUFTLENBQUMsRUFBRyxvQkFBbUJMLE9BQVEsRUFBRSxDQUFDO0lBQzNHRSxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDRCxPQUFPLElBQUlLLE1BQU0sQ0FBQ0MsY0FBYyxDQUFFTixPQUFRLENBQUMsS0FBS0ssTUFBTSxDQUFDRSxTQUFTLEVBQUcsK0JBQThCUCxPQUFRLEVBQUUsQ0FBQztJQUUvSEEsT0FBTyxHQUFHWixLQUFLLENBQUU7TUFDZm9CLFdBQVcsRUFBSVgsS0FBSyxDQUFDWSxXQUFXLEtBQUtwQixpQkFBaUIsQ0FBQ3FCLFFBQVEsR0FBSyxFQUFFLEdBQUc7SUFDM0UsQ0FBQyxFQUFFVixPQUFRLENBQUM7O0lBRVo7SUFDQTtJQUNBLE1BQU1XLFlBQVksR0FBS2QsS0FBSyxDQUFDWSxXQUFXLEtBQUtwQixpQkFBaUIsQ0FBQ3VCLFVBQVk7SUFDM0UsTUFBTUMsdUJBQXVCLEdBQUdGLFlBQVksR0FBRyxJQUFJeEIsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsR0FBRyxJQUFJQSxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQzs7SUFFeEY7SUFDQSxNQUFNMkIsVUFBVSxHQUFHLEVBQUU7SUFDckJmLE9BQU8sQ0FBQ2dCLE9BQU8sQ0FBRVgsTUFBTSxJQUFJO01BQ3pCVSxVQUFVLENBQUNFLElBQUksQ0FBRSxJQUFJeEIsc0JBQXNCLENBQUVLLEtBQUssRUFBRUEsS0FBSyxDQUFDb0IsU0FBUyxFQUFFbkIsU0FBUyxFQUFFZSx1QkFBdUIsRUFBRTtRQUN2R1QsTUFBTSxFQUFFQSxNQUFNO1FBQ2RjLGtCQUFrQixFQUFFLEVBQUU7UUFFdEI7UUFDQTtRQUNBQyx3QkFBd0IsRUFBRVIsWUFBWSxHQUFHLEVBQUUsR0FBRyxFQUFFO1FBQ2hEUyx3QkFBd0IsRUFBRVQsWUFBWSxHQUFHLEVBQUUsR0FBRztNQUNoRCxDQUFFLENBQUUsQ0FBQztJQUNQLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRUcsVUFBVSxFQUFFZCxPQUFRLENBQUM7RUFDOUI7QUFDRjtBQUVBUCxjQUFjLENBQUM0QixRQUFRLENBQUUsNkJBQTZCLEVBQUUxQiwyQkFBNEIsQ0FBQyJ9