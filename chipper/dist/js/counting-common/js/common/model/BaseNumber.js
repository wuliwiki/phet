// Copyright 2021-2023, University of Colorado Boulder

/**
 * A number like 120 is composed of 2 number images in this simulation. The baseNumber object represents the "parts"
 * In case of 120, we will have 2 base number one for 100 and another for 20.
 * Each base number is placed at a position within its composite (ex:120).
 *
 * @author Sharfudeen Ashraf
 */

import countingCommon from '../../countingCommon.js';
import CountingCommonUtils from '../CountingCommonUtils.js';
import BaseNumberNode from '../view/BaseNumberNode.js';
// Precompute bounds for each digit
const DIGIT_BOUNDS = [0, 1, 2, 3].map(place => {
  const dimension = BaseNumberNode.PAPER_NUMBER_DIMENSIONS[place];
  const offset = BaseNumberNode.IMAGE_OFFSETS[place];
  return dimension.toBounds(offset.x, offset.y);
});
class BaseNumber {
  // The numeric value, e.g. 200 if digit is 2 and place is 2

  // Number of digits in our numeric value

  // The place in the number (power of 10) that our digit would be multiplied by to sum, e.g. place 2 with a digit 3
  // has a numberValue = 300, i.e. 3 * 10^2.
  // The offset (relative to the number origin) for the placement of the upper-left corner of the image representing
  // this place value.
  // The bounds that this digit place will take up relative to the digit origin, see BaseNumberNode.PAPER_NUMBER_DIMENSIONS.
  // The leading digit of the number, e.g. 2 for 200.
  /**
   * @param digit - The digit (1 to 9, won't create for a 0).
   * @param place - The decimal exponent for the number digit * 10^place.
   */
  constructor(digit, place) {
    assert && assert(digit % 10 === digit, 'must be a single digit number');
    this.numberValue = digit * Math.pow(10, place);
    this.digitLength = CountingCommonUtils.digitsInNumber(this.numberValue);
    this.place = place;
    this.offset = BaseNumberNode.IMAGE_OFFSETS[this.place];
    this.bounds = DIGIT_BOUNDS[this.place];
    this.digit = digit;
  }
}
countingCommon.register('BaseNumber', BaseNumber);
export default BaseNumber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3VudGluZ0NvbW1vbiIsIkNvdW50aW5nQ29tbW9uVXRpbHMiLCJCYXNlTnVtYmVyTm9kZSIsIkRJR0lUX0JPVU5EUyIsIm1hcCIsInBsYWNlIiwiZGltZW5zaW9uIiwiUEFQRVJfTlVNQkVSX0RJTUVOU0lPTlMiLCJvZmZzZXQiLCJJTUFHRV9PRkZTRVRTIiwidG9Cb3VuZHMiLCJ4IiwieSIsIkJhc2VOdW1iZXIiLCJjb25zdHJ1Y3RvciIsImRpZ2l0IiwiYXNzZXJ0IiwibnVtYmVyVmFsdWUiLCJNYXRoIiwicG93IiwiZGlnaXRMZW5ndGgiLCJkaWdpdHNJbk51bWJlciIsImJvdW5kcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFzZU51bWJlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIG51bWJlciBsaWtlIDEyMCBpcyBjb21wb3NlZCBvZiAyIG51bWJlciBpbWFnZXMgaW4gdGhpcyBzaW11bGF0aW9uLiBUaGUgYmFzZU51bWJlciBvYmplY3QgcmVwcmVzZW50cyB0aGUgXCJwYXJ0c1wiXHJcbiAqIEluIGNhc2Ugb2YgMTIwLCB3ZSB3aWxsIGhhdmUgMiBiYXNlIG51bWJlciBvbmUgZm9yIDEwMCBhbmQgYW5vdGhlciBmb3IgMjAuXHJcbiAqIEVhY2ggYmFzZSBudW1iZXIgaXMgcGxhY2VkIGF0IGEgcG9zaXRpb24gd2l0aGluIGl0cyBjb21wb3NpdGUgKGV4OjEyMCkuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2hhcmZ1ZGVlbiBBc2hyYWZcclxuICovXHJcblxyXG5pbXBvcnQgY291bnRpbmdDb21tb24gZnJvbSAnLi4vLi4vY291bnRpbmdDb21tb24uanMnO1xyXG5pbXBvcnQgQ291bnRpbmdDb21tb25VdGlscyBmcm9tICcuLi9Db3VudGluZ0NvbW1vblV0aWxzLmpzJztcclxuaW1wb3J0IEJhc2VOdW1iZXJOb2RlIGZyb20gJy4uL3ZpZXcvQmFzZU51bWJlck5vZGUuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuXHJcbi8vIFByZWNvbXB1dGUgYm91bmRzIGZvciBlYWNoIGRpZ2l0XHJcbmNvbnN0IERJR0lUX0JPVU5EUyA9IFsgMCwgMSwgMiwgMyBdLm1hcCggcGxhY2UgPT4ge1xyXG4gIGNvbnN0IGRpbWVuc2lvbiA9IEJhc2VOdW1iZXJOb2RlLlBBUEVSX05VTUJFUl9ESU1FTlNJT05TWyBwbGFjZSBdO1xyXG4gIGNvbnN0IG9mZnNldCA9IEJhc2VOdW1iZXJOb2RlLklNQUdFX09GRlNFVFNbIHBsYWNlIF07XHJcbiAgcmV0dXJuIGRpbWVuc2lvbi50b0JvdW5kcyggb2Zmc2V0LngsIG9mZnNldC55ICk7XHJcbn0gKTtcclxuXHJcbmV4cG9ydCB0eXBlIFNpbmdsZURpZ2l0ID0gMCB8IDEgfCAyIHwgMyB8IDQgfCA1IHwgNiB8IDcgfCA4IHwgOTtcclxuXHJcbmNsYXNzIEJhc2VOdW1iZXIge1xyXG5cclxuICAvLyBUaGUgbnVtZXJpYyB2YWx1ZSwgZS5nLiAyMDAgaWYgZGlnaXQgaXMgMiBhbmQgcGxhY2UgaXMgMlxyXG4gIHB1YmxpYyByZWFkb25seSBudW1iZXJWYWx1ZTogbnVtYmVyO1xyXG5cclxuICAvLyBOdW1iZXIgb2YgZGlnaXRzIGluIG91ciBudW1lcmljIHZhbHVlXHJcbiAgcHVibGljIGRpZ2l0TGVuZ3RoOiBudW1iZXI7XHJcblxyXG4gIC8vIFRoZSBwbGFjZSBpbiB0aGUgbnVtYmVyIChwb3dlciBvZiAxMCkgdGhhdCBvdXIgZGlnaXQgd291bGQgYmUgbXVsdGlwbGllZCBieSB0byBzdW0sIGUuZy4gcGxhY2UgMiB3aXRoIGEgZGlnaXQgM1xyXG4gIC8vIGhhcyBhIG51bWJlclZhbHVlID0gMzAwLCBpLmUuIDMgKiAxMF4yLlxyXG4gIHB1YmxpYyByZWFkb25seSBwbGFjZTogbnVtYmVyO1xyXG5cclxuICAvLyBUaGUgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgbnVtYmVyIG9yaWdpbikgZm9yIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBpbWFnZSByZXByZXNlbnRpbmdcclxuICAvLyB0aGlzIHBsYWNlIHZhbHVlLlxyXG4gIHB1YmxpYyBvZmZzZXQ6IFZlY3RvcjI7XHJcblxyXG4gIC8vIFRoZSBib3VuZHMgdGhhdCB0aGlzIGRpZ2l0IHBsYWNlIHdpbGwgdGFrZSB1cCByZWxhdGl2ZSB0byB0aGUgZGlnaXQgb3JpZ2luLCBzZWUgQmFzZU51bWJlck5vZGUuUEFQRVJfTlVNQkVSX0RJTUVOU0lPTlMuXHJcbiAgcHVibGljIGJvdW5kczogQm91bmRzMjtcclxuXHJcbiAgLy8gVGhlIGxlYWRpbmcgZGlnaXQgb2YgdGhlIG51bWJlciwgZS5nLiAyIGZvciAyMDAuXHJcbiAgcHVibGljIGRpZ2l0OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBkaWdpdCAtIFRoZSBkaWdpdCAoMSB0byA5LCB3b24ndCBjcmVhdGUgZm9yIGEgMCkuXHJcbiAgICogQHBhcmFtIHBsYWNlIC0gVGhlIGRlY2ltYWwgZXhwb25lbnQgZm9yIHRoZSBudW1iZXIgZGlnaXQgKiAxMF5wbGFjZS5cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGRpZ2l0OiBTaW5nbGVEaWdpdCwgcGxhY2U6IG51bWJlciApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGRpZ2l0ICUgMTAgPT09IGRpZ2l0LCAnbXVzdCBiZSBhIHNpbmdsZSBkaWdpdCBudW1iZXInICk7XHJcblxyXG4gICAgdGhpcy5udW1iZXJWYWx1ZSA9IGRpZ2l0ICogTWF0aC5wb3coIDEwLCBwbGFjZSApO1xyXG4gICAgdGhpcy5kaWdpdExlbmd0aCA9IENvdW50aW5nQ29tbW9uVXRpbHMuZGlnaXRzSW5OdW1iZXIoIHRoaXMubnVtYmVyVmFsdWUgKTtcclxuICAgIHRoaXMucGxhY2UgPSBwbGFjZTtcclxuICAgIHRoaXMub2Zmc2V0ID0gQmFzZU51bWJlck5vZGUuSU1BR0VfT0ZGU0VUU1sgdGhpcy5wbGFjZSBdO1xyXG4gICAgdGhpcy5ib3VuZHMgPSBESUdJVF9CT1VORFNbIHRoaXMucGxhY2UgXTtcclxuICAgIHRoaXMuZGlnaXQgPSBkaWdpdDtcclxuICB9XHJcbn1cclxuXHJcbmNvdW50aW5nQ29tbW9uLnJlZ2lzdGVyKCAnQmFzZU51bWJlcicsIEJhc2VOdW1iZXIgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJhc2VOdW1iZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLG1CQUFtQixNQUFNLDJCQUEyQjtBQUMzRCxPQUFPQyxjQUFjLE1BQU0sMkJBQTJCO0FBSXREO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUNDLEdBQUcsQ0FBRUMsS0FBSyxJQUFJO0VBQ2hELE1BQU1DLFNBQVMsR0FBR0osY0FBYyxDQUFDSyx1QkFBdUIsQ0FBRUYsS0FBSyxDQUFFO0VBQ2pFLE1BQU1HLE1BQU0sR0FBR04sY0FBYyxDQUFDTyxhQUFhLENBQUVKLEtBQUssQ0FBRTtFQUNwRCxPQUFPQyxTQUFTLENBQUNJLFFBQVEsQ0FBRUYsTUFBTSxDQUFDRyxDQUFDLEVBQUVILE1BQU0sQ0FBQ0ksQ0FBRSxDQUFDO0FBQ2pELENBQUUsQ0FBQztBQUlILE1BQU1DLFVBQVUsQ0FBQztFQUVmOztFQUdBOztFQUdBO0VBQ0E7RUFHQTtFQUNBO0VBR0E7RUFHQTtFQUdBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NDLFdBQVdBLENBQUVDLEtBQWtCLEVBQUVWLEtBQWEsRUFBRztJQUN0RFcsTUFBTSxJQUFJQSxNQUFNLENBQUVELEtBQUssR0FBRyxFQUFFLEtBQUtBLEtBQUssRUFBRSwrQkFBZ0MsQ0FBQztJQUV6RSxJQUFJLENBQUNFLFdBQVcsR0FBR0YsS0FBSyxHQUFHRyxJQUFJLENBQUNDLEdBQUcsQ0FBRSxFQUFFLEVBQUVkLEtBQU0sQ0FBQztJQUNoRCxJQUFJLENBQUNlLFdBQVcsR0FBR25CLG1CQUFtQixDQUFDb0IsY0FBYyxDQUFFLElBQUksQ0FBQ0osV0FBWSxDQUFDO0lBQ3pFLElBQUksQ0FBQ1osS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0csTUFBTSxHQUFHTixjQUFjLENBQUNPLGFBQWEsQ0FBRSxJQUFJLENBQUNKLEtBQUssQ0FBRTtJQUN4RCxJQUFJLENBQUNpQixNQUFNLEdBQUduQixZQUFZLENBQUUsSUFBSSxDQUFDRSxLQUFLLENBQUU7SUFDeEMsSUFBSSxDQUFDVSxLQUFLLEdBQUdBLEtBQUs7RUFDcEI7QUFDRjtBQUVBZixjQUFjLENBQUN1QixRQUFRLENBQUUsWUFBWSxFQUFFVixVQUFXLENBQUM7QUFFbkQsZUFBZUEsVUFBVSJ9