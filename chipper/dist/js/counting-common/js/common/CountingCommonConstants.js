// Copyright 2021-2023, University of Colorado Boulder

/**
 * Constants that are shared between the various portions of Counting Common code
 *
 * @author Sharfudeen Ashraf
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Dimension2 from '../../../dot/js/Dimension2.js';
import countingCommon from '../countingCommon.js';
import apple_png from '../../images/apple_png.js';
import ball_png from '../../images/ball_png.js';
import dog_png from '../../images/dog_png.js';
import CountingObjectType from './model/CountingObjectType.js';
import butterfly_png from '../../images/butterfly_png.js';
import Bounds2 from '../../../dot/js/Bounds2.js';
import Range from '../../../dot/js/Range.js';

// convenience map that links counting object types to their corresponding images
const COUNTING_OBJECT_TYPE_TO_IMAGE = new Map();
COUNTING_OBJECT_TYPE_TO_IMAGE.set(CountingObjectType.DOG, dog_png);
COUNTING_OBJECT_TYPE_TO_IMAGE.set(CountingObjectType.APPLE, apple_png);
COUNTING_OBJECT_TYPE_TO_IMAGE.set(CountingObjectType.BUTTERFLY, butterfly_png);
COUNTING_OBJECT_TYPE_TO_IMAGE.set(CountingObjectType.BALL, ball_png);
const MOVE_AWAY_DISTANCE = {
  1: 50,
  2: 100,
  3: 150,
  4: 160
};
const CountingCommonConstants = {
  ONE: 1,
  // Non-paper-number countingObjects can only fit 20 on a single CountingObject layout.
  MAX_IMAGES_PER_COUNTING_OBJECT: 20,
  // Common colors
  CUE_FILL: 'rgb(63,63,183)',
  /**
   * {number} - Where is the boundary between paper number "move" targets and "split" targets, where 0 would be the
   * bottom of the paper number and 1 would be the top. TODO: should be removed with the completion of https://github.com/phetsims/counting-common/issues/13
   */
  SPLIT_BOUNDARY_HEIGHT_PROPORTION: 0.78,
  ANIMATION_SPEED: 300,
  // in screen coordinates per second
  ANIMATION_TIME_RANGE: new Range(0.2, 1),
  // in seconds

  /**
   * {Object} - A map from digit length => how far away a number should be separated when it repels from another.
   */
  MOVE_AWAY_DISTANCE: MOVE_AWAY_DISTANCE,
  COUNTING_AREA_MARGIN: 10,
  SINGLE_COUNTING_OBJECT_BOUNDS: new Bounds2(-21, 0, 33.6, 87.78),
  // from rendered images
  COUNTING_OBJECT_TYPE_TO_IMAGE: COUNTING_OBJECT_TYPE_TO_IMAGE,
  COUNTING_OBJECT_SIZE: new Dimension2(44, 44),
  // in screen coordinates
  BREAK_APART_Y_OFFSET: 6 // y-offset for individual CountingObjects, used when breaking apart a group
};

assert && assert(CountingCommonConstants.MAX_IMAGES_PER_COUNTING_OBJECT % 10 === 0, 'Max is pretty hard coded to be a multiple of 10');
countingCommon.register('CountingCommonConstants', CountingCommonConstants);
export default CountingCommonConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiY291bnRpbmdDb21tb24iLCJhcHBsZV9wbmciLCJiYWxsX3BuZyIsImRvZ19wbmciLCJDb3VudGluZ09iamVjdFR5cGUiLCJidXR0ZXJmbHlfcG5nIiwiQm91bmRzMiIsIlJhbmdlIiwiQ09VTlRJTkdfT0JKRUNUX1RZUEVfVE9fSU1BR0UiLCJNYXAiLCJzZXQiLCJET0ciLCJBUFBMRSIsIkJVVFRFUkZMWSIsIkJBTEwiLCJNT1ZFX0FXQVlfRElTVEFOQ0UiLCJDb3VudGluZ0NvbW1vbkNvbnN0YW50cyIsIk9ORSIsIk1BWF9JTUFHRVNfUEVSX0NPVU5USU5HX09CSkVDVCIsIkNVRV9GSUxMIiwiU1BMSVRfQk9VTkRBUllfSEVJR0hUX1BST1BPUlRJT04iLCJBTklNQVRJT05fU1BFRUQiLCJBTklNQVRJT05fVElNRV9SQU5HRSIsIkNPVU5USU5HX0FSRUFfTUFSR0lOIiwiU0lOR0xFX0NPVU5USU5HX09CSkVDVF9CT1VORFMiLCJDT1VOVElOR19PQkpFQ1RfU0laRSIsIkJSRUFLX0FQQVJUX1lfT0ZGU0VUIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb3VudGluZ0NvbW1vbkNvbnN0YW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb25zdGFudHMgdGhhdCBhcmUgc2hhcmVkIGJldHdlZW4gdGhlIHZhcmlvdXMgcG9ydGlvbnMgb2YgQ291bnRpbmcgQ29tbW9uIGNvZGVcclxuICpcclxuICogQGF1dGhvciBTaGFyZnVkZWVuIEFzaHJhZlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgY291bnRpbmdDb21tb24gZnJvbSAnLi4vY291bnRpbmdDb21tb24uanMnO1xyXG5pbXBvcnQgYXBwbGVfcG5nIGZyb20gJy4uLy4uL2ltYWdlcy9hcHBsZV9wbmcuanMnO1xyXG5pbXBvcnQgYmFsbF9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2JhbGxfcG5nLmpzJztcclxuaW1wb3J0IGRvZ19wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2RvZ19wbmcuanMnO1xyXG5pbXBvcnQgQ291bnRpbmdPYmplY3RUeXBlIGZyb20gJy4vbW9kZWwvQ291bnRpbmdPYmplY3RUeXBlLmpzJztcclxuaW1wb3J0IGJ1dHRlcmZseV9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2J1dHRlcmZseV9wbmcuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5cclxuLy8gY29udmVuaWVuY2UgbWFwIHRoYXQgbGlua3MgY291bnRpbmcgb2JqZWN0IHR5cGVzIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgaW1hZ2VzXHJcbmNvbnN0IENPVU5USU5HX09CSkVDVF9UWVBFX1RPX0lNQUdFID0gbmV3IE1hcCgpO1xyXG5DT1VOVElOR19PQkpFQ1RfVFlQRV9UT19JTUFHRS5zZXQoIENvdW50aW5nT2JqZWN0VHlwZS5ET0csIGRvZ19wbmcgKTtcclxuQ09VTlRJTkdfT0JKRUNUX1RZUEVfVE9fSU1BR0Uuc2V0KCBDb3VudGluZ09iamVjdFR5cGUuQVBQTEUsIGFwcGxlX3BuZyApO1xyXG5DT1VOVElOR19PQkpFQ1RfVFlQRV9UT19JTUFHRS5zZXQoIENvdW50aW5nT2JqZWN0VHlwZS5CVVRURVJGTFksIGJ1dHRlcmZseV9wbmcgKTtcclxuQ09VTlRJTkdfT0JKRUNUX1RZUEVfVE9fSU1BR0Uuc2V0KCBDb3VudGluZ09iamVjdFR5cGUuQkFMTCwgYmFsbF9wbmcgKTtcclxuXHJcbmNvbnN0IE1PVkVfQVdBWV9ESVNUQU5DRTogUmVjb3JkPG51bWJlciwgbnVtYmVyPiA9IHsgMTogNTAsIDI6IDEwMCwgMzogMTUwLCA0OiAxNjAgfTtcclxuXHJcbmNvbnN0IENvdW50aW5nQ29tbW9uQ29uc3RhbnRzID0ge1xyXG4gIE9ORTogMSxcclxuXHJcbiAgLy8gTm9uLXBhcGVyLW51bWJlciBjb3VudGluZ09iamVjdHMgY2FuIG9ubHkgZml0IDIwIG9uIGEgc2luZ2xlIENvdW50aW5nT2JqZWN0IGxheW91dC5cclxuICBNQVhfSU1BR0VTX1BFUl9DT1VOVElOR19PQkpFQ1Q6IDIwLFxyXG5cclxuICAvLyBDb21tb24gY29sb3JzXHJcbiAgQ1VFX0ZJTEw6ICdyZ2IoNjMsNjMsMTgzKScsXHJcblxyXG4gIC8qKlxyXG4gICAqIHtudW1iZXJ9IC0gV2hlcmUgaXMgdGhlIGJvdW5kYXJ5IGJldHdlZW4gcGFwZXIgbnVtYmVyIFwibW92ZVwiIHRhcmdldHMgYW5kIFwic3BsaXRcIiB0YXJnZXRzLCB3aGVyZSAwIHdvdWxkIGJlIHRoZVxyXG4gICAqIGJvdHRvbSBvZiB0aGUgcGFwZXIgbnVtYmVyIGFuZCAxIHdvdWxkIGJlIHRoZSB0b3AuIFRPRE86IHNob3VsZCBiZSByZW1vdmVkIHdpdGggdGhlIGNvbXBsZXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NvdW50aW5nLWNvbW1vbi9pc3N1ZXMvMTNcclxuICAgKi9cclxuICBTUExJVF9CT1VOREFSWV9IRUlHSFRfUFJPUE9SVElPTjogMC43OCxcclxuXHJcbiAgQU5JTUFUSU9OX1NQRUVEOiAzMDAsIC8vIGluIHNjcmVlbiBjb29yZGluYXRlcyBwZXIgc2Vjb25kXHJcbiAgQU5JTUFUSU9OX1RJTUVfUkFOR0U6IG5ldyBSYW5nZSggMC4yLCAxICksIC8vIGluIHNlY29uZHNcclxuXHJcbiAgLyoqXHJcbiAgICoge09iamVjdH0gLSBBIG1hcCBmcm9tIGRpZ2l0IGxlbmd0aCA9PiBob3cgZmFyIGF3YXkgYSBudW1iZXIgc2hvdWxkIGJlIHNlcGFyYXRlZCB3aGVuIGl0IHJlcGVscyBmcm9tIGFub3RoZXIuXHJcbiAgICovXHJcbiAgTU9WRV9BV0FZX0RJU1RBTkNFOiBNT1ZFX0FXQVlfRElTVEFOQ0UsXHJcblxyXG4gIENPVU5USU5HX0FSRUFfTUFSR0lOOiAxMCxcclxuICBTSU5HTEVfQ09VTlRJTkdfT0JKRUNUX0JPVU5EUzogbmV3IEJvdW5kczIoIC0yMSwgMCwgMzMuNiwgODcuNzggKSwgLy8gZnJvbSByZW5kZXJlZCBpbWFnZXNcclxuICBDT1VOVElOR19PQkpFQ1RfVFlQRV9UT19JTUFHRTogQ09VTlRJTkdfT0JKRUNUX1RZUEVfVE9fSU1BR0UsXHJcbiAgQ09VTlRJTkdfT0JKRUNUX1NJWkU6IG5ldyBEaW1lbnNpb24yKCA0NCwgNDQgKSwgLy8gaW4gc2NyZWVuIGNvb3JkaW5hdGVzXHJcbiAgQlJFQUtfQVBBUlRfWV9PRkZTRVQ6IDYgLy8geS1vZmZzZXQgZm9yIGluZGl2aWR1YWwgQ291bnRpbmdPYmplY3RzLCB1c2VkIHdoZW4gYnJlYWtpbmcgYXBhcnQgYSBncm91cFxyXG59O1xyXG5cclxuYXNzZXJ0ICYmIGFzc2VydCggQ291bnRpbmdDb21tb25Db25zdGFudHMuTUFYX0lNQUdFU19QRVJfQ09VTlRJTkdfT0JKRUNUICUgMTAgPT09IDAsXHJcbiAgJ01heCBpcyBwcmV0dHkgaGFyZCBjb2RlZCB0byBiZSBhIG11bHRpcGxlIG9mIDEwJyApO1xyXG5cclxuY291bnRpbmdDb21tb24ucmVnaXN0ZXIoICdDb3VudGluZ0NvbW1vbkNvbnN0YW50cycsIENvdW50aW5nQ29tbW9uQ29uc3RhbnRzICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb3VudGluZ0NvbW1vbkNvbnN0YW50czsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sK0JBQStCO0FBQ3RELE9BQU9DLGNBQWMsTUFBTSxzQkFBc0I7QUFDakQsT0FBT0MsU0FBUyxNQUFNLDJCQUEyQjtBQUNqRCxPQUFPQyxRQUFRLE1BQU0sMEJBQTBCO0FBQy9DLE9BQU9DLE9BQU8sTUFBTSx5QkFBeUI7QUFDN0MsT0FBT0Msa0JBQWtCLE1BQU0sK0JBQStCO0FBQzlELE9BQU9DLGFBQWEsTUFBTSwrQkFBK0I7QUFDekQsT0FBT0MsT0FBTyxNQUFNLDRCQUE0QjtBQUNoRCxPQUFPQyxLQUFLLE1BQU0sMEJBQTBCOztBQUU1QztBQUNBLE1BQU1DLDZCQUE2QixHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0FBQy9DRCw2QkFBNkIsQ0FBQ0UsR0FBRyxDQUFFTixrQkFBa0IsQ0FBQ08sR0FBRyxFQUFFUixPQUFRLENBQUM7QUFDcEVLLDZCQUE2QixDQUFDRSxHQUFHLENBQUVOLGtCQUFrQixDQUFDUSxLQUFLLEVBQUVYLFNBQVUsQ0FBQztBQUN4RU8sNkJBQTZCLENBQUNFLEdBQUcsQ0FBRU4sa0JBQWtCLENBQUNTLFNBQVMsRUFBRVIsYUFBYyxDQUFDO0FBQ2hGRyw2QkFBNkIsQ0FBQ0UsR0FBRyxDQUFFTixrQkFBa0IsQ0FBQ1UsSUFBSSxFQUFFWixRQUFTLENBQUM7QUFFdEUsTUFBTWEsa0JBQTBDLEdBQUc7RUFBRSxDQUFDLEVBQUUsRUFBRTtFQUFFLENBQUMsRUFBRSxHQUFHO0VBQUUsQ0FBQyxFQUFFLEdBQUc7RUFBRSxDQUFDLEVBQUU7QUFBSSxDQUFDO0FBRXBGLE1BQU1DLHVCQUF1QixHQUFHO0VBQzlCQyxHQUFHLEVBQUUsQ0FBQztFQUVOO0VBQ0FDLDhCQUE4QixFQUFFLEVBQUU7RUFFbEM7RUFDQUMsUUFBUSxFQUFFLGdCQUFnQjtFQUUxQjtBQUNGO0FBQ0E7QUFDQTtFQUNFQyxnQ0FBZ0MsRUFBRSxJQUFJO0VBRXRDQyxlQUFlLEVBQUUsR0FBRztFQUFFO0VBQ3RCQyxvQkFBb0IsRUFBRSxJQUFJZixLQUFLLENBQUUsR0FBRyxFQUFFLENBQUUsQ0FBQztFQUFFOztFQUUzQztBQUNGO0FBQ0E7RUFDRVEsa0JBQWtCLEVBQUVBLGtCQUFrQjtFQUV0Q1Esb0JBQW9CLEVBQUUsRUFBRTtFQUN4QkMsNkJBQTZCLEVBQUUsSUFBSWxCLE9BQU8sQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQU0sQ0FBQztFQUFFO0VBQ25FRSw2QkFBNkIsRUFBRUEsNkJBQTZCO0VBQzVEaUIsb0JBQW9CLEVBQUUsSUFBSTFCLFVBQVUsQ0FBRSxFQUFFLEVBQUUsRUFBRyxDQUFDO0VBQUU7RUFDaEQyQixvQkFBb0IsRUFBRSxDQUFDLENBQUM7QUFDMUIsQ0FBQzs7QUFFREMsTUFBTSxJQUFJQSxNQUFNLENBQUVYLHVCQUF1QixDQUFDRSw4QkFBOEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUNqRixpREFBa0QsQ0FBQztBQUVyRGxCLGNBQWMsQ0FBQzRCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRVosdUJBQXdCLENBQUM7QUFFN0UsZUFBZUEsdUJBQXVCIn0=