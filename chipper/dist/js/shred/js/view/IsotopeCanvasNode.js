// Copyright 2016-2021, University of Colorado Boulder

/**
 * A isotope layer rendered on canvas.  This exists for performance reasons.
 *
 * @author Aadish Gupta
 */

import { CanvasNode } from '../../../scenery/js/imports.js';
import shred from '../shred.js';
class IsotopeCanvasNode extends CanvasNode {
  /**
   * A particle layer rendered on canvas
   * @param {Array.<MovableAtom>} isotopes that need to be rendered on the canvas
   * @param {ModelViewTransform2} modelViewTransform to convert between model and view coordinate frames
   * @param {Object} [options] that can be passed on to the underlying node
   */
  constructor(isotopes, modelViewTransform, options) {
    super(options);
    this.isotopes = isotopes;
    this.modelViewTransform = modelViewTransform;
  }

  /**
   * Paints the particles on the canvas node.
   * @param {CanvasRenderingContext2D} context
   * @public
   * @override
   */
  paintCanvas(context) {
    let isotope;
    let i;
    const numIsotopes = this.isotopes.length;
    if (numIsotopes > 0) {
      // only calculate the radius once to save time, assumes they are all the same
      const radius = this.modelViewTransform.modelToViewDeltaX(this.isotopes.get(0).radiusProperty.get());
      context.strokeStyle = 'black';
      for (i = 0; i < this.isotopes.length; i++) {
        isotope = this.isotopes.get(i);
        const position = isotope.positionProperty.get();
        const x = this.modelViewTransform.modelToViewX(position.x);
        const y = this.modelViewTransform.modelToViewY(position.y);
        context.fillStyle = isotope.color.toCSS();
        context.beginPath();
        context.arc(x, y, radius, 0, 2 * Math.PI, true);
        context.fill();
        context.stroke();
      }
    }
  }

  // @public
  setIsotopes(isotopes) {
    this.isotopes = isotopes;
    this.invalidatePaint();
  }

  // @public
  step() {
    this.invalidatePaint();
  }
}
shred.register('IsotopeCanvasNode', IsotopeCanvasNode);
export default IsotopeCanvasNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYW52YXNOb2RlIiwic2hyZWQiLCJJc290b3BlQ2FudmFzTm9kZSIsImNvbnN0cnVjdG9yIiwiaXNvdG9wZXMiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJvcHRpb25zIiwicGFpbnRDYW52YXMiLCJjb250ZXh0IiwiaXNvdG9wZSIsImkiLCJudW1Jc290b3BlcyIsImxlbmd0aCIsInJhZGl1cyIsIm1vZGVsVG9WaWV3RGVsdGFYIiwiZ2V0IiwicmFkaXVzUHJvcGVydHkiLCJzdHJva2VTdHlsZSIsInBvc2l0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsIngiLCJtb2RlbFRvVmlld1giLCJ5IiwibW9kZWxUb1ZpZXdZIiwiZmlsbFN0eWxlIiwiY29sb3IiLCJ0b0NTUyIsImJlZ2luUGF0aCIsImFyYyIsIk1hdGgiLCJQSSIsImZpbGwiLCJzdHJva2UiLCJzZXRJc290b3BlcyIsImludmFsaWRhdGVQYWludCIsInN0ZXAiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIklzb3RvcGVDYW52YXNOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgaXNvdG9wZSBsYXllciByZW5kZXJlZCBvbiBjYW52YXMuICBUaGlzIGV4aXN0cyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cclxuICpcclxuICogQGF1dGhvciBBYWRpc2ggR3VwdGFcclxuICovXHJcblxyXG5pbXBvcnQgeyBDYW52YXNOb2RlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHNocmVkIGZyb20gJy4uL3NocmVkLmpzJztcclxuXHJcbmNsYXNzIElzb3RvcGVDYW52YXNOb2RlIGV4dGVuZHMgQ2FudmFzTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgcGFydGljbGUgbGF5ZXIgcmVuZGVyZWQgb24gY2FudmFzXHJcbiAgICogQHBhcmFtIHtBcnJheS48TW92YWJsZUF0b20+fSBpc290b3BlcyB0aGF0IG5lZWQgdG8gYmUgcmVuZGVyZWQgb24gdGhlIGNhbnZhc1xyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtIHRvIGNvbnZlcnQgYmV0d2VlbiBtb2RlbCBhbmQgdmlldyBjb29yZGluYXRlIGZyYW1lc1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gdGhhdCBjYW4gYmUgcGFzc2VkIG9uIHRvIHRoZSB1bmRlcmx5aW5nIG5vZGVcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaXNvdG9wZXMsIG1vZGVsVmlld1RyYW5zZm9ybSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgICB0aGlzLmlzb3RvcGVzID0gaXNvdG9wZXM7XHJcbiAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSA9IG1vZGVsVmlld1RyYW5zZm9ybTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhaW50cyB0aGUgcGFydGljbGVzIG9uIHRoZSBjYW52YXMgbm9kZS5cclxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBwYWludENhbnZhcyggY29udGV4dCApIHtcclxuICAgIGxldCBpc290b3BlO1xyXG4gICAgbGV0IGk7XHJcbiAgICBjb25zdCBudW1Jc290b3BlcyA9IHRoaXMuaXNvdG9wZXMubGVuZ3RoO1xyXG4gICAgaWYgKCBudW1Jc290b3BlcyA+IDAgKSB7XHJcblxyXG4gICAgICAvLyBvbmx5IGNhbGN1bGF0ZSB0aGUgcmFkaXVzIG9uY2UgdG8gc2F2ZSB0aW1lLCBhc3N1bWVzIHRoZXkgYXJlIGFsbCB0aGUgc2FtZVxyXG4gICAgICBjb25zdCByYWRpdXMgPSB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggdGhpcy5pc290b3Blcy5nZXQoIDAgKS5yYWRpdXNQcm9wZXJ0eS5nZXQoKSApO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcclxuXHJcbiAgICAgIGZvciAoIGkgPSAwOyBpIDwgdGhpcy5pc290b3Blcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICBpc290b3BlID0gdGhpcy5pc290b3Blcy5nZXQoIGkgKTtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGlzb3RvcGUucG9zaXRpb25Qcm9wZXJ0eS5nZXQoKTtcclxuICAgICAgICBjb25zdCB4ID0gdGhpcy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCBwb3NpdGlvbi54ICk7XHJcbiAgICAgICAgY29uc3QgeSA9IHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggcG9zaXRpb24ueSApO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gaXNvdG9wZS5jb2xvci50b0NTUygpO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoIHgsIHksIHJhZGl1cywgMCwgMiAqIE1hdGguUEksIHRydWUgKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgc2V0SXNvdG9wZXMoIGlzb3RvcGVzICkge1xyXG4gICAgdGhpcy5pc290b3BlcyA9IGlzb3RvcGVzO1xyXG4gICAgdGhpcy5pbnZhbGlkYXRlUGFpbnQoKTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBzdGVwKCkge1xyXG4gICAgdGhpcy5pbnZhbGlkYXRlUGFpbnQoKTtcclxuICB9XHJcbn1cclxuXHJcbnNocmVkLnJlZ2lzdGVyKCAnSXNvdG9wZUNhbnZhc05vZGUnLCBJc290b3BlQ2FudmFzTm9kZSAp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