// Copyright 2015-2022, University of Colorado Boulder

/**
 * Particle, represented as a circle with a gradient.  This type does not
 * track a particle, use ParticleView for that.
 */

import merge from '../../../phet-core/js/merge.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import { Circle, Node, RadialGradient, RichText } from '../../../scenery/js/imports.js';
import AtomIdentifier from '../AtomIdentifier.js';
import shred from '../shred.js';

/**
 * @param {Particle} isotope
 * @param {number} radius
 * @param {Object} [options]
 * @constructor
 */
class IsotopeNode extends Node {
  constructor(isotope, radius, options) {
    options = merge({
      showLabel: true
    }, options);

    // Call super constructor.
    super(options);
    let baseColor = isotope.color;
    if (baseColor === undefined) {
      assert && assert(false, 'Unrecognized Isotope');
      baseColor = 'black';
    }

    // Create the node a circle with a gradient.
    const isotopeSphere = new Circle(radius, {
      fill: baseColor,
      cursor: 'pointer'
    });
    this.addChild(isotopeSphere);
    if (options.showLabel) {
      const symbol = AtomIdentifier.getSymbol(isotope.protonCount);
      const label = new RichText(` <sup>${isotope.massNumber}</sup>${symbol}`, {
        font: new PhetFont(10),
        // making sure that text doesn't goes beyond the sphere boundaries, -2 is empirically determined
        maxWidth: 2 * radius - 2
      });
      label.centerX = isotopeSphere.centerX - 1; // empirically determined -1 to make it appear centered
      label.centerY = isotopeSphere.centerY;
      isotopeSphere.addChild(label);
      isotopeSphere.fill = new RadialGradient(-radius * 0.4, -radius * 0.4, 0, -radius * 0.4, -radius * 0.4, radius * 1.6).addColorStop(0, 'white').addColorStop(1, baseColor);
    } else {
      isotopeSphere.stroke = 'black';
    }
  }
}
shred.register('IsotopeNode', IsotopeNode);
export default IsotopeNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiQ2lyY2xlIiwiTm9kZSIsIlJhZGlhbEdyYWRpZW50IiwiUmljaFRleHQiLCJBdG9tSWRlbnRpZmllciIsInNocmVkIiwiSXNvdG9wZU5vZGUiLCJjb25zdHJ1Y3RvciIsImlzb3RvcGUiLCJyYWRpdXMiLCJvcHRpb25zIiwic2hvd0xhYmVsIiwiYmFzZUNvbG9yIiwiY29sb3IiLCJ1bmRlZmluZWQiLCJhc3NlcnQiLCJpc290b3BlU3BoZXJlIiwiZmlsbCIsImN1cnNvciIsImFkZENoaWxkIiwic3ltYm9sIiwiZ2V0U3ltYm9sIiwicHJvdG9uQ291bnQiLCJsYWJlbCIsIm1hc3NOdW1iZXIiLCJmb250IiwibWF4V2lkdGgiLCJjZW50ZXJYIiwiY2VudGVyWSIsImFkZENvbG9yU3RvcCIsInN0cm9rZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSXNvdG9wZU5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGFydGljbGUsIHJlcHJlc2VudGVkIGFzIGEgY2lyY2xlIHdpdGggYSBncmFkaWVudC4gIFRoaXMgdHlwZSBkb2VzIG5vdFxyXG4gKiB0cmFjayBhIHBhcnRpY2xlLCB1c2UgUGFydGljbGVWaWV3IGZvciB0aGF0LlxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBOb2RlLCBSYWRpYWxHcmFkaWVudCwgUmljaFRleHQgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQXRvbUlkZW50aWZpZXIgZnJvbSAnLi4vQXRvbUlkZW50aWZpZXIuanMnO1xyXG5pbXBvcnQgc2hyZWQgZnJvbSAnLi4vc2hyZWQuanMnO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7UGFydGljbGV9IGlzb3RvcGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuY2xhc3MgSXNvdG9wZU5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuICBjb25zdHJ1Y3RvciggaXNvdG9wZSwgcmFkaXVzLCBvcHRpb25zICkge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHNob3dMYWJlbDogdHJ1ZVxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENhbGwgc3VwZXIgY29uc3RydWN0b3IuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIGxldCBiYXNlQ29sb3IgPSBpc290b3BlLmNvbG9yO1xyXG4gICAgaWYgKCBiYXNlQ29sb3IgPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdVbnJlY29nbml6ZWQgSXNvdG9wZScgKTtcclxuICAgICAgYmFzZUNvbG9yID0gJ2JsYWNrJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIG5vZGUgYSBjaXJjbGUgd2l0aCBhIGdyYWRpZW50LlxyXG4gICAgY29uc3QgaXNvdG9wZVNwaGVyZSA9IG5ldyBDaXJjbGUoIHJhZGl1cywge1xyXG4gICAgICBmaWxsOiBiYXNlQ29sb3IsXHJcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBpc290b3BlU3BoZXJlICk7XHJcblxyXG4gICAgaWYgKCBvcHRpb25zLnNob3dMYWJlbCApIHtcclxuICAgICAgY29uc3Qgc3ltYm9sID0gQXRvbUlkZW50aWZpZXIuZ2V0U3ltYm9sKCBpc290b3BlLnByb3RvbkNvdW50ICk7XHJcbiAgICAgIGNvbnN0IGxhYmVsID0gbmV3IFJpY2hUZXh0KCBgIDxzdXA+JHtpc290b3BlLm1hc3NOdW1iZXJ9PC9zdXA+JHtzeW1ib2x9YCwge1xyXG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTAgKSxcclxuICAgICAgICAvLyBtYWtpbmcgc3VyZSB0aGF0IHRleHQgZG9lc24ndCBnb2VzIGJleW9uZCB0aGUgc3BoZXJlIGJvdW5kYXJpZXMsIC0yIGlzIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuICAgICAgICBtYXhXaWR0aDogMiAqIHJhZGl1cyAtIDJcclxuICAgICAgfSApO1xyXG4gICAgICBsYWJlbC5jZW50ZXJYID0gaXNvdG9wZVNwaGVyZS5jZW50ZXJYIC0gMTsgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZCAtMSB0byBtYWtlIGl0IGFwcGVhciBjZW50ZXJlZFxyXG4gICAgICBsYWJlbC5jZW50ZXJZID0gaXNvdG9wZVNwaGVyZS5jZW50ZXJZO1xyXG4gICAgICBpc290b3BlU3BoZXJlLmFkZENoaWxkKCBsYWJlbCApO1xyXG4gICAgICBpc290b3BlU3BoZXJlLmZpbGwgPSBuZXcgUmFkaWFsR3JhZGllbnQoXHJcbiAgICAgICAgLXJhZGl1cyAqIDAuNCxcclxuICAgICAgICAtcmFkaXVzICogMC40LFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgLXJhZGl1cyAqIDAuNCxcclxuICAgICAgICAtcmFkaXVzICogMC40LFxyXG4gICAgICAgIHJhZGl1cyAqIDEuNlxyXG4gICAgICApXHJcbiAgICAgICAgLmFkZENvbG9yU3RvcCggMCwgJ3doaXRlJyApXHJcbiAgICAgICAgLmFkZENvbG9yU3RvcCggMSwgYmFzZUNvbG9yICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaXNvdG9wZVNwaGVyZS5zdHJva2UgPSAnYmxhY2snO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuc2hyZWQucmVnaXN0ZXIoICdJc290b3BlTm9kZScsIElzb3RvcGVOb2RlICk7XHJc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