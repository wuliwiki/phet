// Copyright 2015-2022, University of Colorado Boulder

/**
 * TODO document
 * @author Aadish Gupta (PhET Interactive Simulations)
 */

import Vector2 from '../../../dot/js/Vector2.js';
import merge from '../../../phet-core/js/merge.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import { Line, Node, Text } from '../../../scenery/js/imports.js';
import TextPushButton from '../../../sun/js/buttons/TextPushButton.js';
import Tandem from '../../../tandem/js/Tandem.js';
import AtomIdentifier from '../AtomIdentifier.js';
import shred from '../shred.js';
import ShredConstants from '../ShredConstants.js';
import ShredStrings from '../ShredStrings.js';
import PeriodicTableNode from './PeriodicTableNode.js';

// constants
// 2D array that defines the table structure.
const POPULATED_CELLS = [[0, 8], [0, 1, 3, 4, 5, 6, 7, 8], [0, 1, 3, 4, 5, 6, 7, 8]];
const ENABLED_CELL_COLOR = ShredConstants.DISPLAY_PANEL_BACKGROUND_COLOR;
const SELECTED_CELL_COLOR = '#FA8072'; //salmon
const BUTTON_SIZE = 50;
class ExpandedPeriodicTableNode extends Node {
  /**
   * @param {NumberAtom} numberAtom
   * @param {number} interactiveMax
   * @param {Object} [options]
   */
  constructor(numberAtom, interactiveMax, options) {
    options = merge({
      tandem: Tandem.REQUIRED
    }, options);
    super();

    // A scaled down periodic table with element labels hidden
    const periodicTableNode = new PeriodicTableNode(numberAtom, {
      tandem: options.tandem && options.tandem.createTandem('periodicTable'),
      interactiveMax: interactiveMax,
      showLabels: false
    });
    periodicTableNode.scale(0.5);
    this.addChild(periodicTableNode);

    // Larger cells for the elements that we want to emphasize
    const cells = [];
    const expandedRowsNode = new Node();
    let elementIndex = 1;
    let rows = 1;
    if (interactiveMax > 2 && interactiveMax <= 10) {
      rows = 2;
    } else if (interactiveMax > 10) {
      rows = 3;
    }
    for (let i = 0; i < rows; i++) {
      const populatedCellsInRow = POPULATED_CELLS[i];
      let j = 0;
      _.times(populatedCellsInRow.length, () => {
        const atomicNumber = elementIndex;
        const button = new TextPushButton(AtomIdentifier.getSymbol(elementIndex), {
          listener: () => numberAtom.setSubAtomicParticleCount(atomicNumber, AtomIdentifier.getNumNeutronsInMostCommonIsotope(atomicNumber), atomicNumber),
          baseColor: ENABLED_CELL_COLOR,
          cornerRadius: 0,
          minWidth: BUTTON_SIZE,
          maxWidth: BUTTON_SIZE,
          minHeight: BUTTON_SIZE,
          maxHeight: BUTTON_SIZE,
          font: new PhetFont(24)
        });
        button.translation = new Vector2(populatedCellsInRow[j] * BUTTON_SIZE, i * BUTTON_SIZE);
        cells.push(button);
        expandedRowsNode.addChild(button);
        j++;
        elementIndex++;
      });
    }
    expandedRowsNode.top = periodicTableNode.bottom - 30;
    periodicTableNode.centerX = expandedRowsNode.centerX;
    this.addChild(expandedRowsNode);
    const connectingLineOptions = {
      stroke: 'gray',
      lineDash: [9, 6]
    };
    const leftConnectingLine = new Line(periodicTableNode.left, periodicTableNode.top, expandedRowsNode.left, expandedRowsNode.top, connectingLineOptions);
    this.addChild(leftConnectingLine);
    const rightConnectingLine = new Line(periodicTableNode.right, periodicTableNode.top, expandedRowsNode.right, expandedRowsNode.top, connectingLineOptions);
    this.addChild(rightConnectingLine);
    const periodicTableTitle = new Text(ShredStrings.periodicTable, {
      font: new PhetFont({
        size: 16,
        weight: 'bold'
      })
    });
    periodicTableTitle.bottom = periodicTableNode.top - 5;
    periodicTableTitle.centerX = periodicTableNode.centerX;
    this.addChild(periodicTableTitle);

    // Highlight the cell that corresponds to the atom.
    let highlightedCell = null;
    numberAtom.protonCountProperty.link(protonCount => {
      if (highlightedCell !== null) {
        highlightedCell.baseColor = ENABLED_CELL_COLOR;
      }
      if (protonCount > 0 && protonCount <= cells.length) {
        highlightedCell = cells[protonCount - 1];
        highlightedCell.baseColor = SELECTED_CELL_COLOR;
      }
    });
  }
}
shred.register('ExpandedPeriodicTableNode', ExpandedPeriodicTableNode);
export default ExpandedPeriodicTableNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwibWVyZ2UiLCJQaGV0Rm9udCIsIkxpbmUiLCJOb2RlIiwiVGV4dCIsIlRleHRQdXNoQnV0dG9uIiwiVGFuZGVtIiwiQXRvbUlkZW50aWZpZXIiLCJzaHJlZCIsIlNocmVkQ29uc3RhbnRzIiwiU2hyZWRTdHJpbmdzIiwiUGVyaW9kaWNUYWJsZU5vZGUiLCJQT1BVTEFURURfQ0VMTFMiLCJFTkFCTEVEX0NFTExfQ09MT1IiLCJESVNQTEFZX1BBTkVMX0JBQ0tHUk9VTkRfQ09MT1IiLCJTRUxFQ1RFRF9DRUxMX0NPTE9SIiwiQlVUVE9OX1NJWkUiLCJFeHBhbmRlZFBlcmlvZGljVGFibGVOb2RlIiwiY29uc3RydWN0b3IiLCJudW1iZXJBdG9tIiwiaW50ZXJhY3RpdmVNYXgiLCJvcHRpb25zIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJwZXJpb2RpY1RhYmxlTm9kZSIsImNyZWF0ZVRhbmRlbSIsInNob3dMYWJlbHMiLCJzY2FsZSIsImFkZENoaWxkIiwiY2VsbHMiLCJleHBhbmRlZFJvd3NOb2RlIiwiZWxlbWVudEluZGV4Iiwicm93cyIsImkiLCJwb3B1bGF0ZWRDZWxsc0luUm93IiwiaiIsIl8iLCJ0aW1lcyIsImxlbmd0aCIsImF0b21pY051bWJlciIsImJ1dHRvbiIsImdldFN5bWJvbCIsImxpc3RlbmVyIiwic2V0U3ViQXRvbWljUGFydGljbGVDb3VudCIsImdldE51bU5ldXRyb25zSW5Nb3N0Q29tbW9uSXNvdG9wZSIsImJhc2VDb2xvciIsImNvcm5lclJhZGl1cyIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJmb250IiwidHJhbnNsYXRpb24iLCJwdXNoIiwidG9wIiwiYm90dG9tIiwiY2VudGVyWCIsImNvbm5lY3RpbmdMaW5lT3B0aW9ucyIsInN0cm9rZSIsImxpbmVEYXNoIiwibGVmdENvbm5lY3RpbmdMaW5lIiwibGVmdCIsInJpZ2h0Q29ubmVjdGluZ0xpbmUiLCJyaWdodCIsInBlcmlvZGljVGFibGVUaXRsZSIsInBlcmlvZGljVGFibGUiLCJzaXplIiwid2VpZ2h0IiwiaGlnaGxpZ2h0ZWRDZWxsIiwicHJvdG9uQ291bnRQcm9wZXJ0eSIsImxpbmsiLCJwcm90b25Db3VudCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwYW5kZWRQZXJpb2RpY1RhYmxlTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUT0RPIGRvY3VtZW50XHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBMaW5lLCBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRleHRQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1RleHRQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEF0b21JZGVudGlmaWVyIGZyb20gJy4uL0F0b21JZGVudGlmaWVyLmpzJztcclxuaW1wb3J0IHNocmVkIGZyb20gJy4uL3NocmVkLmpzJztcclxuaW1wb3J0IFNocmVkQ29uc3RhbnRzIGZyb20gJy4uL1NocmVkQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFNocmVkU3RyaW5ncyBmcm9tICcuLi9TaHJlZFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUGVyaW9kaWNUYWJsZU5vZGUgZnJvbSAnLi9QZXJpb2RpY1RhYmxlTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuLy8gMkQgYXJyYXkgdGhhdCBkZWZpbmVzIHRoZSB0YWJsZSBzdHJ1Y3R1cmUuXHJcbmNvbnN0IFBPUFVMQVRFRF9DRUxMUyA9IFtcclxuICBbIDAsIDggXSxcclxuICBbIDAsIDEsIDMsIDQsIDUsIDYsIDcsIDggXSxcclxuICBbIDAsIDEsIDMsIDQsIDUsIDYsIDcsIDggXVxyXG5dO1xyXG5cclxuY29uc3QgRU5BQkxFRF9DRUxMX0NPTE9SID0gU2hyZWRDb25zdGFudHMuRElTUExBWV9QQU5FTF9CQUNLR1JPVU5EX0NPTE9SO1xyXG5jb25zdCBTRUxFQ1RFRF9DRUxMX0NPTE9SID0gJyNGQTgwNzInOyAvL3NhbG1vblxyXG5jb25zdCBCVVRUT05fU0laRSA9IDUwO1xyXG5cclxuY2xhc3MgRXhwYW5kZWRQZXJpb2RpY1RhYmxlTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge051bWJlckF0b219IG51bWJlckF0b21cclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJhY3RpdmVNYXhcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG51bWJlckF0b20sIGludGVyYWN0aXZlTWF4LCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gQSBzY2FsZWQgZG93biBwZXJpb2RpYyB0YWJsZSB3aXRoIGVsZW1lbnQgbGFiZWxzIGhpZGRlblxyXG4gICAgY29uc3QgcGVyaW9kaWNUYWJsZU5vZGUgPSBuZXcgUGVyaW9kaWNUYWJsZU5vZGUoIG51bWJlckF0b20sIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbSAmJiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwZXJpb2RpY1RhYmxlJyApLFxyXG4gICAgICBpbnRlcmFjdGl2ZU1heDogaW50ZXJhY3RpdmVNYXgsXHJcbiAgICAgIHNob3dMYWJlbHM6IGZhbHNlXHJcbiAgICB9ICk7XHJcbiAgICBwZXJpb2RpY1RhYmxlTm9kZS5zY2FsZSggMC41ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwZXJpb2RpY1RhYmxlTm9kZSApO1xyXG5cclxuICAgIC8vIExhcmdlciBjZWxscyBmb3IgdGhlIGVsZW1lbnRzIHRoYXQgd2Ugd2FudCB0byBlbXBoYXNpemVcclxuICAgIGNvbnN0IGNlbGxzID0gW107XHJcbiAgICBjb25zdCBleHBhbmRlZFJvd3NOb2RlID0gbmV3IE5vZGUoKTtcclxuICAgIGxldCBlbGVtZW50SW5kZXggPSAxO1xyXG4gICAgbGV0IHJvd3MgPSAxO1xyXG4gICAgaWYgKCBpbnRlcmFjdGl2ZU1heCA+IDIgJiYgaW50ZXJhY3RpdmVNYXggPD0gMTAgKSB7XHJcbiAgICAgIHJvd3MgPSAyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIGludGVyYWN0aXZlTWF4ID4gMTAgKSB7XHJcbiAgICAgIHJvd3MgPSAzO1xyXG4gICAgfVxyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgcm93czsgaSsrICkge1xyXG4gICAgICBjb25zdCBwb3B1bGF0ZWRDZWxsc0luUm93ID0gUE9QVUxBVEVEX0NFTExTWyBpIF07XHJcbiAgICAgIGxldCBqID0gMDtcclxuICAgICAgXy50aW1lcyggcG9wdWxhdGVkQ2VsbHNJblJvdy5sZW5ndGgsICgpID0+IHtcclxuICAgICAgICBjb25zdCBhdG9taWNOdW1iZXIgPSBlbGVtZW50SW5kZXg7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IFRleHRQdXNoQnV0dG9uKCBBdG9tSWRlbnRpZmllci5nZXRTeW1ib2woIGVsZW1lbnRJbmRleCApLCB7XHJcbiAgICAgICAgICBsaXN0ZW5lcjogKCkgPT4gbnVtYmVyQXRvbS5zZXRTdWJBdG9taWNQYXJ0aWNsZUNvdW50KCBhdG9taWNOdW1iZXIsXHJcbiAgICAgICAgICAgIEF0b21JZGVudGlmaWVyLmdldE51bU5ldXRyb25zSW5Nb3N0Q29tbW9uSXNvdG9wZSggYXRvbWljTnVtYmVyICksIGF0b21pY051bWJlciApLFxyXG4gICAgICAgICAgYmFzZUNvbG9yOiBFTkFCTEVEX0NFTExfQ09MT1IsXHJcbiAgICAgICAgICBjb3JuZXJSYWRpdXM6IDAsXHJcbiAgICAgICAgICBtaW5XaWR0aDogQlVUVE9OX1NJWkUsXHJcbiAgICAgICAgICBtYXhXaWR0aDogQlVUVE9OX1NJWkUsXHJcbiAgICAgICAgICBtaW5IZWlnaHQ6IEJVVFRPTl9TSVpFLFxyXG4gICAgICAgICAgbWF4SGVpZ2h0OiBCVVRUT05fU0laRSxcclxuICAgICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjQgKVxyXG4gICAgICAgIH0gKTtcclxuICAgICAgICBidXR0b24udHJhbnNsYXRpb24gPSBuZXcgVmVjdG9yMiggcG9wdWxhdGVkQ2VsbHNJblJvd1sgaiBdICogQlVUVE9OX1NJWkUsIGkgKiBCVVRUT05fU0laRSApO1xyXG4gICAgICAgIGNlbGxzLnB1c2goIGJ1dHRvbiApO1xyXG4gICAgICAgIGV4cGFuZGVkUm93c05vZGUuYWRkQ2hpbGQoIGJ1dHRvbiApO1xyXG4gICAgICAgIGorKztcclxuICAgICAgICBlbGVtZW50SW5kZXgrKztcclxuXHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICAgIGV4cGFuZGVkUm93c05vZGUudG9wID0gcGVyaW9kaWNUYWJsZU5vZGUuYm90dG9tIC0gMzA7XHJcbiAgICBwZXJpb2RpY1RhYmxlTm9kZS5jZW50ZXJYID0gZXhwYW5kZWRSb3dzTm9kZS5jZW50ZXJYO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggZXhwYW5kZWRSb3dzTm9kZSApO1xyXG5cclxuICAgIGNvbnN0IGNvbm5lY3RpbmdMaW5lT3B0aW9ucyA9IHsgc3Ryb2tlOiAnZ3JheScsIGxpbmVEYXNoOiBbIDksIDYgXSB9O1xyXG4gICAgY29uc3QgbGVmdENvbm5lY3RpbmdMaW5lID0gbmV3IExpbmUoIHBlcmlvZGljVGFibGVOb2RlLmxlZnQsIHBlcmlvZGljVGFibGVOb2RlLnRvcCxcclxuICAgICAgZXhwYW5kZWRSb3dzTm9kZS5sZWZ0LCBleHBhbmRlZFJvd3NOb2RlLnRvcCwgY29ubmVjdGluZ0xpbmVPcHRpb25zICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBsZWZ0Q29ubmVjdGluZ0xpbmUgKTtcclxuXHJcbiAgICBjb25zdCByaWdodENvbm5lY3RpbmdMaW5lID0gbmV3IExpbmUoIHBlcmlvZGljVGFibGVOb2RlLnJpZ2h0LCBwZXJpb2RpY1RhYmxlTm9kZS50b3AsXHJcbiAgICAgIGV4cGFuZGVkUm93c05vZGUucmlnaHQsIGV4cGFuZGVkUm93c05vZGUudG9wLCBjb25uZWN0aW5nTGluZU9wdGlvbnMgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHJpZ2h0Q29ubmVjdGluZ0xpbmUgKTtcclxuXHJcbiAgICBjb25zdCBwZXJpb2RpY1RhYmxlVGl0bGUgPSBuZXcgVGV4dCggU2hyZWRTdHJpbmdzLnBlcmlvZGljVGFibGUsIHsgZm9udDogbmV3IFBoZXRGb250KCB7IHNpemU6IDE2LCB3ZWlnaHQ6ICdib2xkJyB9ICkgfSApO1xyXG4gICAgcGVyaW9kaWNUYWJsZVRpdGxlLmJvdHRvbSA9IHBlcmlvZGljVGFibGVOb2RlLnRvcCAtIDU7XHJcbiAgICBwZXJpb2RpY1RhYmxlVGl0bGUuY2VudGVyWCA9IHBlcmlvZGljVGFibGVOb2RlLmNlbnRlclg7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwZXJpb2RpY1RhYmxlVGl0bGUgKTtcclxuXHJcbiAgICAvLyBIaWdobGlnaHQgdGhlIGNlbGwgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgYXRvbS5cclxuICAgIGxldCBoaWdobGlnaHRlZENlbGwgPSBudWxsO1xyXG4gICAgbnVtYmVyQXRvbS5wcm90b25Db3VudFByb3BlcnR5LmxpbmsoIHByb3RvbkNvdW50ID0+IHtcclxuICAgICAgaWYgKCBoaWdobGlnaHRlZENlbGwgIT09IG51bGwgKSB7XHJcbiAgICAgICAgaGlnaGxpZ2h0ZWRDZWxsLmJhc2VDb2xvciA9IEVOQUJMRURfQ0VMTF9DT0xPUjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIHByb3RvbkNvdW50ID4gMCAmJiBwcm90b25Db3VudCA8PSBjZWxscy5sZW5ndGggKSB7XHJcbiAgICAgICAgaGlnaGxpZ2h0ZWRDZWxsID0gY2VsbHNbIHByb3RvbkNvdW50IC0gMSBdO1xyXG4gICAgICAgIGhpZ2hsaWdodGVkQ2VsbC5iYXNlQ29sb3IgPSBTRUxFQ1RFRF9DRUxMX0NPTE9SO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5zaHJlZC5yZWdpc3RlciggJ0V4cGFuZGVkUGVyaW9kaWNUYWJsZU5vZGUnLCBFeHBhbmRlZFBlcmlvZGljVGFibGVOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IEV4cGFuZGVkUGVyaW9kaWNUYWJsZU5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsUUFBUSxNQUFNLHNDQUFzQztBQUMzRCxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLGdDQUFnQztBQUNqRSxPQUFPQyxjQUFjLE1BQU0sMkNBQTJDO0FBQ3RFLE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsY0FBYyxNQUFNLHNCQUFzQjtBQUNqRCxPQUFPQyxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxjQUFjLE1BQU0sc0JBQXNCO0FBQ2pELE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFDN0MsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCOztBQUV0RDtBQUNBO0FBQ0EsTUFBTUMs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