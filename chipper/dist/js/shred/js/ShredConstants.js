// Copyright 2014-2020, University of Colorado Boulder

/**
 * Shared constants used in various places in both 'Build an Atom' and 'Isotopes and Atomic Mass'.
 *
 * @author John Blanco
 */

import Bounds2 from '../../dot/js/Bounds2.js';
import PhetColorScheme from '../../scenery-phet/js/PhetColorScheme.js';
import PhetFont from '../../scenery-phet/js/PhetFont.js';
import shred from './shred.js';
const ShredConstants = {
  LAYOUT_BOUNDS: new Bounds2(0, 0, 768, 464),
  // Sizes of the various particles.
  NUCLEON_RADIUS: 10,
  // In screen coordinates, which are roughly pixels.
  ELECTRON_RADIUS: 8,
  // In screen coordinates, which are roughly pixels.

  // Placing this variable here will remove dependency on BuildAnAtom in shred repository. Max number of electrons
  // for ElectronCloudView.
  MAX_ELECTRONS: 10,
  // Background color used on several displays.
  DISPLAY_PANEL_BACKGROUND_COLOR: 'rgb( 254, 255, 153 )',
  // Font used in accordion box titles throughout the sim.
  ACCORDION_BOX_TITLE_FONT: new PhetFont(16),
  ACCORDION_BOX_TITLE_MAX_WIDTH: 225,
  // empirically determined

  // Function for choosing text color based on charge value.
  CHARGE_TEXT_COLOR: function (charge) {
    return charge > 0 ? PhetColorScheme.RED_COLORBLIND : charge < 0 ? 'blue' : 'black';
  },
  // Names of the various game levels.
  LEVEL_NAMES: ['periodic-table-game', 'mass-and-charge-game', 'symbol-game', 'advanced-symbol-game'],
  // Level name to level number converter.
  MAP_LEVEL_NAME_TO_NUMBER: function (levelName) {
    return this.LEVEL_NAMES.indexOf(levelName);
  }
};
shred.register('ShredConstants', ShredConstants);
export default ShredConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiUGhldENvbG9yU2NoZW1lIiwiUGhldEZvbnQiLCJzaHJlZCIsIlNocmVkQ29uc3RhbnRzIiwiTEFZT1VUX0JPVU5EUyIsIk5VQ0xFT05fUkFESVVTIiwiRUxFQ1RST05fUkFESVVTIiwiTUFYX0VMRUNUUk9OUyIsIkRJU1BMQVlfUEFORUxfQkFDS0dST1VORF9DT0xPUiIsIkFDQ09SRElPTl9CT1hfVElUTEVfRk9OVCIsIkFDQ09SRElPTl9CT1hfVElUTEVfTUFYX1dJRFRIIiwiQ0hBUkdFX1RFWFRfQ09MT1IiLCJjaGFyZ2UiLCJSRURfQ09MT1JCTElORCIsIkxFVkVMX05BTUVTIiwiTUFQX0xFVkVMX05BTUVfVE9fTlVNQkVSIiwibGV2ZWxOYW1lIiwiaW5kZXhPZiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2hyZWRDb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2hhcmVkIGNvbnN0YW50cyB1c2VkIGluIHZhcmlvdXMgcGxhY2VzIGluIGJvdGggJ0J1aWxkIGFuIEF0b20nIGFuZCAnSXNvdG9wZXMgYW5kIEF0b21pYyBNYXNzJy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFBoZXRDb2xvclNjaGVtZSBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldENvbG9yU2NoZW1lLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBzaHJlZCBmcm9tICcuL3NocmVkLmpzJztcclxuXHJcbmNvbnN0IFNocmVkQ29uc3RhbnRzID0ge1xyXG5cclxuICBMQVlPVVRfQk9VTkRTOiBuZXcgQm91bmRzMiggMCwgMCwgNzY4LCA0NjQgKSxcclxuXHJcbiAgLy8gU2l6ZXMgb2YgdGhlIHZhcmlvdXMgcGFydGljbGVzLlxyXG4gIE5VQ0xFT05fUkFESVVTOiAxMCwgLy8gSW4gc2NyZWVuIGNvb3JkaW5hdGVzLCB3aGljaCBhcmUgcm91Z2hseSBwaXhlbHMuXHJcbiAgRUxFQ1RST05fUkFESVVTOiA4LCAvLyBJbiBzY3JlZW4gY29vcmRpbmF0ZXMsIHdoaWNoIGFyZSByb3VnaGx5IHBpeGVscy5cclxuXHJcbiAgLy8gUGxhY2luZyB0aGlzIHZhcmlhYmxlIGhlcmUgd2lsbCByZW1vdmUgZGVwZW5kZW5jeSBvbiBCdWlsZEFuQXRvbSBpbiBzaHJlZCByZXBvc2l0b3J5LiBNYXggbnVtYmVyIG9mIGVsZWN0cm9uc1xyXG4gIC8vIGZvciBFbGVjdHJvbkNsb3VkVmlldy5cclxuICBNQVhfRUxFQ1RST05TOiAxMCxcclxuXHJcbiAgLy8gQmFja2dyb3VuZCBjb2xvciB1c2VkIG9uIHNldmVyYWwgZGlzcGxheXMuXHJcbiAgRElTUExBWV9QQU5FTF9CQUNLR1JPVU5EX0NPTE9SOiAncmdiKCAyNTQsIDI1NSwgMTUzICknLFxyXG5cclxuICAvLyBGb250IHVzZWQgaW4gYWNjb3JkaW9uIGJveCB0aXRsZXMgdGhyb3VnaG91dCB0aGUgc2ltLlxyXG4gIEFDQ09SRElPTl9CT1hfVElUTEVfRk9OVDogbmV3IFBoZXRGb250KCAxNiApLFxyXG5cclxuICBBQ0NPUkRJT05fQk9YX1RJVExFX01BWF9XSURUSDogMjI1LCAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcblxyXG4gIC8vIEZ1bmN0aW9uIGZvciBjaG9vc2luZyB0ZXh0IGNvbG9yIGJhc2VkIG9uIGNoYXJnZSB2YWx1ZS5cclxuICBDSEFSR0VfVEVYVF9DT0xPUjogZnVuY3Rpb24oIGNoYXJnZSApIHtcclxuICAgIHJldHVybiBjaGFyZ2UgPiAwID8gUGhldENvbG9yU2NoZW1lLlJFRF9DT0xPUkJMSU5EIDogY2hhcmdlIDwgMCA/ICdibHVlJyA6ICdibGFjayc7XHJcbiAgfSxcclxuXHJcbiAgLy8gTmFtZXMgb2YgdGhlIHZhcmlvdXMgZ2FtZSBsZXZlbHMuXHJcbiAgTEVWRUxfTkFNRVM6IFsgJ3BlcmlvZGljLXRhYmxlLWdhbWUnLCAnbWFzcy1hbmQtY2hhcmdlLWdhbWUnLCAnc3ltYm9sLWdhbWUnLCAnYWR2YW5jZWQtc3ltYm9sLWdhbWUnIF0sXHJcblxyXG4gIC8vIExldmVsIG5hbWUgdG8gbGV2ZWwgbnVtYmVyIGNvbnZlcnRlci5cclxuICBNQVBfTEVWRUxfTkFNRV9UT19OVU1CRVI6IGZ1bmN0aW9uKCBsZXZlbE5hbWUgKSB7IHJldHVybiB0aGlzLkxFVkVMX05BTUVTLmluZGV4T2YoIGxldmVsTmFtZSApOyB9XHJcbn07XHJcbnNocmVkLnJlZ2lzdGVyKCAnU2hyZWRDb25zdGFudHMnLCBTaHJlZENvbnN0YW50cyApO1xyXG5leHBvcnQgZGVmYXVsdCBTaHJlZENvbnN0YW50czsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLHlCQUF5QjtBQUM3QyxPQUFPQyxlQUFlLE1BQU0sMENBQTBDO0FBQ3RFLE9BQU9DLFFBQVEsTUFBTSxtQ0FBbUM7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFFOUIsTUFBTUMsY0FBYyxHQUFHO0VBRXJCQyxhQUFhLEVBQUUsSUFBSUwsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUksQ0FBQztFQUU1QztFQUNBTSxjQUFjLEVBQUUsRUFBRTtFQUFFO0VBQ3BCQyxlQUFlLEVBQUUsQ0FBQztFQUFFOztFQUVwQjtFQUNBO0VBQ0FDLGFBQWEsRUFBRSxFQUFFO0VBRWpCO0VBQ0FDLDhCQUE4QixFQUFFLHNCQUFzQjtFQUV0RDtFQUNBQyx3QkFBd0IsRUFBRSxJQUFJUixRQUFRLENBQUUsRUFBRyxDQUFDO0VBRTVDUyw2QkFBNkIsRUFBRSxHQUFHO0VBQUU7O0VBRXBDO0VBQ0FDLGlCQUFpQixFQUFFLFNBQUFBLENBQVVDLE1BQU0sRUFBRztJQUNwQyxPQUFPQSxNQUFNLEdBQUcsQ0FBQyxHQUFHWixlQUFlLENBQUNhLGNBQWMsR0FBR0QsTUFBTSxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsT0FBTztFQUNwRixDQUFDO0VBRUQ7RUFDQUUsV0FBVyxFQUFFLENBQUUscUJBQXFCLEVBQUUsc0JBQXNCLEVBQUUsYUFBYSxFQUFFLHNCQUFzQixDQUFFO0VBRXJHO0VBQ0FDLHdCQUF3QixFQUFFLFNBQUFBLENBQVVDLFNBQVMsRUFBRztJQUFFLE9BQU8sSUFBSSxDQUFDRixXQUFXLENBQUNHLE9BQU8sQ0FBRUQsU0FBVSxDQUFDO0VBQUU7QUFDbEcsQ0FBQztBQUNEZCxLQUFLLENBQUNnQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVmLGNBQWUsQ0FBQztBQUNsRCxlQUFlQSxjQUFjIn0=