// Copyright 2014-2022, University of Colorado Boulder

/**
 * Model of an atom that represents the atom as a set of numbers which represent the quantity of the various subatomic
 * particles (i.e. protons, neutrons and electrons).
 *
 * @author John Blanco
 */

import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import Emitter from '../../../axon/js/Emitter.js';
import NumberProperty from '../../../axon/js/NumberProperty.js';
import merge from '../../../phet-core/js/merge.js';
import Tandem from '../../../tandem/js/Tandem.js';
import IOType from '../../../tandem/js/types/IOType.js';
import NumberIO from '../../../tandem/js/types/NumberIO.js';
import AtomIdentifier from '../AtomIdentifier.js';
import shred from '../shred.js';
class NumberAtom {
  /**
   * @param {Object} [options]
   */
  constructor(options) {
    // Default configuration.
    options = merge({
      protonCount: 0,
      neutronCount: 0,
      electronCount: 0,
      tandem: Tandem.OPTIONAL // Tandem must be supplied when running in PhET-iO
    }, options);

    // @public
    this.protonCountProperty = new NumberProperty(options.protonCount, {
      tandem: options.tandem.createTandem('protonCountProperty'),
      documentation: 'this property is updated by the model and should not be set by users',
      numberType: 'Integer'
    });
    this.neutronCountProperty = new NumberProperty(options.neutronCount, {
      tandem: options.tandem.createTandem('neutronCountProperty'),
      numberType: 'Integer',
      documentation: 'this property is updated by the model and should not be set by users'
    });
    this.electronCountProperty = new NumberProperty(options.electronCount, {
      tandem: options.tandem.createTandem('electronCountProperty'),
      numberType: 'Integer',
      documentation: 'this property is updated by the model and should not be set by users'
    });
    this.chargeProperty = new DerivedProperty([this.protonCountProperty, this.electronCountProperty], (protonCount, electronCount) => {
      return protonCount - electronCount;
    }, {
      tandem: options.tandem.createTandem('chargeProperty'),
      numberType: 'Integer',
      phetioValueType: NumberIO
    });
    this.massNumberProperty = new DerivedProperty([this.protonCountProperty, this.neutronCountProperty], (protonCount, neutronCount) => {
      return protonCount + neutronCount;
    }, {
      tandem: options.tandem.createTandem('massNumberProperty'),
      numberType: 'Integer',
      phetioValueType: NumberIO
    });
    this.particleCountProperty = new DerivedProperty([this.protonCountProperty, this.neutronCountProperty, this.electronCountProperty], (protonCount, neutronCount, electronCount) => {
      return protonCount + neutronCount + electronCount;
    }, {
      tandem: options.tandem.createTandem('particleCountProperty'),
      numberType: 'Integer',
      phetioValueType: NumberIO
    });

    // @public - events emitted by instances of this type
    this.atomUpdated = new Emitter({
      tandem: options.tandem.createTandem('atomUpdatedEmitter')
    });
  }

  // @public - ES5 getters for particle counts
  get protonCount() {
    return this.protonCountProperty.value;
  }
  get neutronCount() {
    return this.neutronCountProperty.value;
  }
  get electronCount() {
    return this.electronCountProperty.value;
  }

  /**
   * compare with another atom
   * @param {NumberAtom|ImmutableAtomConfig} otherAtom
   * @public
   */
  equals(otherAtom) {
    return this.protonCount === otherAtom.protonCount && this.neutronCount === otherAtom.neutronCount && this.electronCount === otherAtom.electronCount;
  }

  // @public
  getStandardAtomicMass() {
    return AtomIdentifier.getStandardAtomicMass(this.protonCountProperty.get() + this.neutronCountProperty.get());
  }

  // @public
  getIsotopeAtomicMass() {
    return AtomIdentifier.getIsotopeAtomicMass(this.protonCountProperty.get(), this.neutronCountProperty.get());
  }

  /**
   * @param {number} protonCount
   * @param {number} neutronCount
   * @param {number} electronCount
   * @public
   */
  setSubAtomicParticleCount(protonCount, neutronCount, electronCount) {
    this.protonCountProperty.set(protonCount);
    this.electronCountProperty.set(electronCount);
    this.neutronCountProperty.set(neutronCount);
    this.atomUpdated.emit();
  }

  /**
   * @public
   */
  dispose() {
    this.chargeProperty.dispose();
    this.massNumberProperty.dispose();
    this.particleCountProperty.dispose();

    // Dispose these afterwards since they are dependencies to the above DerivedProperties
    this.protonCountProperty.dispose();
    this.neutronCountProperty.dispose();
    this.electronCountProperty.dispose();
    this.atomUpdated.dispose();
  }
}
NumberAtom.NumberAtomIO = new IOType('NumberAtomIO', {
  valueType: NumberAtom,
  documentation: 'A value type that contains quantities of electrons, protons, and neutrons',
  toStateObject: numberAtom => ({
    protonCount: numberAtom.protonCountProperty.get(),
    electronCount: numberAtom.electronCountProperty.get(),
    neutronCount: numberAtom.neutronCountProperty.get()
  }),
  fromStateObject(stateObject) {} // TODO: Should this be implemented?
});

shred.register('NumberAtom', NumberAtom);
export default NumberAtom;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJFbWl0dGVyIiwiTnVtYmVyUHJvcGVydHkiLCJtZXJnZSIsIlRhbmRlbSIsIklPVHlwZSIsIk51bWJlcklPIiwiQXRvbUlkZW50aWZpZXIiLCJzaHJlZCIsIk51bWJlckF0b20iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJwcm90b25Db3VudCIsIm5ldXRyb25Db3VudCIsImVsZWN0cm9uQ291bnQiLCJ0YW5kZW0iLCJPUFRJT05BTCIsInByb3RvbkNvdW50UHJvcGVydHkiLCJjcmVhdGVUYW5kZW0iLCJkb2N1bWVudGF0aW9uIiwibnVtYmVyVHlwZSIsIm5ldXRyb25Db3VudFByb3BlcnR5IiwiZWxlY3Ryb25Db3VudFByb3BlcnR5IiwiY2hhcmdlUHJvcGVydHkiLCJwaGV0aW9WYWx1ZVR5cGUiLCJtYXNzTnVtYmVyUHJvcGVydHkiLCJwYXJ0aWNsZUNvdW50UHJvcGVydHkiLCJhdG9tVXBkYXRlZCIsInZhbHVlIiwiZXF1YWxzIiwib3RoZXJBdG9tIiwiZ2V0U3RhbmRhcmRBdG9taWNNYXNzIiwiZ2V0IiwiZ2V0SXNvdG9wZUF0b21pY01hc3MiLCJzZXRTdWJBdG9taWNQYXJ0aWNsZUNvdW50Iiwic2V0IiwiZW1pdCIsImRpc3Bvc2UiLCJOdW1iZXJBdG9tSU8iLCJ2YWx1ZVR5cGUiLCJ0b1N0YXRlT2JqZWN0IiwibnVtYmVyQXRvbSIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOdW1iZXJBdG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIG9mIGFuIGF0b20gdGhhdCByZXByZXNlbnRzIHRoZSBhdG9tIGFzIGEgc2V0IG9mIG51bWJlcnMgd2hpY2ggcmVwcmVzZW50IHRoZSBxdWFudGl0eSBvZiB0aGUgdmFyaW91cyBzdWJhdG9taWNcclxuICogcGFydGljbGVzIChpLmUuIHByb3RvbnMsIG5ldXRyb25zIGFuZCBlbGVjdHJvbnMpLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uLy4uLy4uL2F4b24vanMvRW1pdHRlci5qcyc7XHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBOdW1iZXJJTyBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvTnVtYmVySU8uanMnO1xyXG5pbXBvcnQgQXRvbUlkZW50aWZpZXIgZnJvbSAnLi4vQXRvbUlkZW50aWZpZXIuanMnO1xyXG5pbXBvcnQgc2hyZWQgZnJvbSAnLi4vc2hyZWQuanMnO1xyXG5cclxuY2xhc3MgTnVtYmVyQXRvbSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb24uXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgcHJvdG9uQ291bnQ6IDAsXHJcbiAgICAgIG5ldXRyb25Db3VudDogMCxcclxuICAgICAgZWxlY3Ryb25Db3VudDogMCxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUSU9OQUwgLy8gVGFuZGVtIG11c3QgYmUgc3VwcGxpZWQgd2hlbiBydW5uaW5nIGluIFBoRVQtaU9cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLnByb3RvbkNvdW50UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMucHJvdG9uQ291bnQsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwcm90b25Db3VudFByb3BlcnR5JyApLFxyXG4gICAgICBkb2N1bWVudGF0aW9uOiAndGhpcyBwcm9wZXJ0eSBpcyB1cGRhdGVkIGJ5IHRoZSBtb2RlbCBhbmQgc2hvdWxkIG5vdCBiZSBzZXQgYnkgdXNlcnMnLFxyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcidcclxuICAgIH0gKTtcclxuICAgIHRoaXMubmV1dHJvbkNvdW50UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMubmV1dHJvbkNvdW50LCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbmV1dHJvbkNvdW50UHJvcGVydHknICksXHJcbiAgICAgIG51bWJlclR5cGU6ICdJbnRlZ2VyJyxcclxuICAgICAgZG9jdW1lbnRhdGlvbjogJ3RoaXMgcHJvcGVydHkgaXMgdXBkYXRlZCBieSB0aGUgbW9kZWwgYW5kIHNob3VsZCBub3QgYmUgc2V0IGJ5IHVzZXJzJ1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5lbGVjdHJvbkNvdW50UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMuZWxlY3Ryb25Db3VudCwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2VsZWN0cm9uQ291bnRQcm9wZXJ0eScgKSxcclxuICAgICAgbnVtYmVyVHlwZTogJ0ludGVnZXInLFxyXG4gICAgICBkb2N1bWVudGF0aW9uOiAndGhpcyBwcm9wZXJ0eSBpcyB1cGRhdGVkIGJ5IHRoZSBtb2RlbCBhbmQgc2hvdWxkIG5vdCBiZSBzZXQgYnkgdXNlcnMnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5jaGFyZ2VQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy5wcm90b25Db3VudFByb3BlcnR5LCB0aGlzLmVsZWN0cm9uQ291bnRQcm9wZXJ0eSBdLFxyXG4gICAgICAoICggcHJvdG9uQ291bnQsIGVsZWN0cm9uQ291bnQgKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHByb3RvbkNvdW50IC0gZWxlY3Ryb25Db3VudDtcclxuICAgICAgfSApLCB7XHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdjaGFyZ2VQcm9wZXJ0eScgKSxcclxuICAgICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBOdW1iZXJJT1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMubWFzc051bWJlclByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB0aGlzLnByb3RvbkNvdW50UHJvcGVydHksIHRoaXMubmV1dHJvbkNvdW50UHJvcGVydHkgXSxcclxuICAgICAgKCAoIHByb3RvbkNvdW50LCBuZXV0cm9uQ291bnQgKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHByb3RvbkNvdW50ICsgbmV1dHJvbkNvdW50O1xyXG4gICAgICB9ICksIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21hc3NOdW1iZXJQcm9wZXJ0eScgKSxcclxuICAgICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBOdW1iZXJJT1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMucGFydGljbGVDb3VudFByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyB0aGlzLnByb3RvbkNvdW50UHJvcGVydHksIHRoaXMubmV1dHJvbkNvdW50UHJvcGVydHksIHRoaXMuZWxlY3Ryb25Db3VudFByb3BlcnR5IF0sXHJcbiAgICAgICggKCBwcm90b25Db3VudCwgbmV1dHJvbkNvdW50LCBlbGVjdHJvbkNvdW50ICkgPT4ge1xyXG4gICAgICAgIHJldHVybiBwcm90b25Db3VudCArIG5ldXRyb25Db3VudCArIGVsZWN0cm9uQ291bnQ7XHJcbiAgICAgIH0gKSwge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncGFydGljbGVDb3VudFByb3BlcnR5JyApLFxyXG4gICAgICAgIG51bWJlclR5cGU6ICdJbnRlZ2VyJyxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bWJlcklPXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAtIGV2ZW50cyBlbWl0dGVkIGJ5IGluc3RhbmNlcyBvZiB0aGlzIHR5cGVcclxuICAgIHRoaXMuYXRvbVVwZGF0ZWQgPSBuZXcgRW1pdHRlcigge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2F0b21VcGRhdGVkRW1pdHRlcicgKVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLy8gQHB1YmxpYyAtIEVTNSBnZXR0ZXJzIGZvciBwYXJ0aWNsZSBjb3VudHNcclxuICBnZXQgcHJvdG9uQ291bnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm90b25Db3VudFByb3BlcnR5LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG5ldXRyb25Db3VudCgpIHtcclxuICAgIHJldHVybiB0aGlzLm5ldXRyb25Db3VudFByb3BlcnR5LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGVsZWN0cm9uQ291bnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVjdHJvbkNvdW50UHJvcGVydHkudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBjb21wYXJlIHdpdGggYW5vdGhlciBhdG9tXHJcbiAgICogQHBhcmFtIHtOdW1iZXJBdG9tfEltbXV0YWJsZUF0b21Db25maWd9IG90aGVyQXRvbVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBlcXVhbHMoIG90aGVyQXRvbSApIHtcclxuICAgIHJldHVybiB0aGlzLnByb3RvbkNvdW50ID09PSBvdGhlckF0b20ucHJvdG9uQ291bnQgJiZcclxuICAgICAgICAgICB0aGlzLm5ldXRyb25Db3VudCA9PT0gb3RoZXJBdG9tLm5ldXRyb25Db3VudCAmJlxyXG4gICAgICAgICAgIHRoaXMuZWxlY3Ryb25Db3VudCA9PT0gb3RoZXJBdG9tLmVsZWN0cm9uQ291bnQ7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgZ2V0U3RhbmRhcmRBdG9taWNNYXNzKCkge1xyXG4gICAgcmV0dXJuIEF0b21JZGVudGlmaWVyLmdldFN0YW5kYXJkQXRvbWljTWFzcyggdGhpcy5wcm90b25Db3VudFByb3BlcnR5LmdldCgpICsgdGhpcy5uZXV0cm9uQ291bnRQcm9wZXJ0eS5nZXQoKSApO1xyXG4gIH1cclxuXHJcbiAgLy8gQHB1YmxpY1xyXG4gIGdldElzb3RvcGVBdG9taWNNYXNzKCkge1xyXG4gICAgcmV0dXJuIEF0b21JZGVudGlmaWVyLmdldElzb3RvcGVBdG9taWNNYXNzKCB0aGlzLnByb3RvbkNvdW50UHJvcGVydHkuZ2V0KCksIHRoaXMubmV1dHJvbkNvdW50UHJvcGVydHkuZ2V0KCkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcm90b25Db3VudFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXV0cm9uQ291bnRcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZWxlY3Ryb25Db3VudFxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzZXRTdWJBdG9taWNQYXJ0aWNsZUNvdW50KCBwcm90b25Db3VudCwgbmV1dHJvbkNvdW50LCBlbGVjdHJvbkNvdW50ICkge1xyXG4gICAgdGhpcy5wcm90b25Db3VudFByb3BlcnR5LnNldCggcHJvdG9uQ291bnQgKTtcclxuICAgIHRoaXMuZWxlY3Ryb25Db3VudFByb3BlcnR5LnNldCggZWxlY3Ryb25Db3VudCApO1xyXG4gICAgdGhpcy5uZXV0cm9uQ291bnRQcm9wZXJ0eS5zZXQoIG5ldXRyb25Db3VudCApO1xyXG4gICAgdGhpcy5hdG9tVXBkYXRlZC5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuY2hhcmdlUHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5tYXNzTnVtYmVyUHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5wYXJ0aWNsZUNvdW50UHJvcGVydHkuZGlzcG9zZSgpO1xyXG5cclxuICAgIC8vIERpc3Bvc2UgdGhlc2UgYWZ0ZXJ3YXJkcyBzaW5jZSB0aGV5IGFyZSBkZXBlbmRlbmNpZXMgdG8gdGhlIGFib3ZlIERlcml2ZWRQcm9wZXJ0aWVzXHJcbiAgICB0aGlzLnByb3RvbkNvdW50UHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5uZXV0cm9uQ291bnRQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmVsZWN0cm9uQ291bnRQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcblxyXG4gICAgdGhpcy5hdG9tVXBkYXRlZC5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5OdW1iZXJBdG9tLk51bWJlckF0b21JTyA9IG5ldyBJT1R5cGUoICdOdW1iZXJBdG9tSU8nLCB7XHJcbiAgdmFsdWVUeXBlOiBOdW1iZXJBdG9tLFxyXG4gIGRvY3VtZW50YXRpb246ICdBIHZhbHVlIHR5cGUgdGhhdCBjb250YWlucyBxdWFudGl0aWVzIG9mIGVsZWN0cm9ucywgcHJvdG9ucywgYW5kIG5ldXRyb25zJyxcclxuICB0b1N0YXRlT2JqZWN0OiBudW1iZXJBdG9tID0+ICgge1xyXG4gICAgcHJvdG9uQ291bnQ6IG51bWJlckF0b20ucHJvdG9uQ291bnRQcm9wZXJ0eS5nZXQoKSxcclxuICAgIGVsZWN0cm9uQ291bnQ6IG51bWJlckF0b20uZWxlY3Ryb25Db3VudFByb3BlcnR5LmdldCgpLFxyXG4gICAgbmV1dHJvbkNvdW50OiBudW1iZXJBdG9tLm5ldXRyb25Db3VudFByb3BlcnR5LmdldCgpXHJcbiAgfSApLFxyXG4gIGZyb21TdGF0ZU9iamVjdCggc3RhdGVPYmplY3QgKSB7IH0gLy8gVE9ETzogU2hvdWxkIHRoaXMgYmUgaW1wbGVtZW50ZWQ/XHJcbn0gKTtcclxuXHJcbnNocmVkLnJlZ2lzdGVyKCAnTnVtYmVyQXRvbScsIE51bWJlckF0b20gKTtcclxuZXhwb3J0IGRlZmF1bHQgTnVtYmVyQXRvbTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0scUNBQXFDO0FBQ2pFLE9BQU9DLE9BQU8sTUFBTSw2QkFBNkI7QUFDakQsT0FBT0MsY0FBYyxNQUFNLG9DQUFvQztBQUMvRCxPQUFPQyxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFDakQsT0FBT0MsTUFBTSxNQUFNLG9DQUFvQztBQUN2RCxPQUFPQyxRQUFRLE1BQU0sc0NBQXNDO0FBQzNELE9BQU9DLGNBQWMsTUFBTSxzQkFBc0I7QUFDakQsT0FBT0MsS0FBSyxNQUFNLGFBQWE7QUFFL0IsTUFBTUMsVUFBVSxDQUFDO0VBRWY7QUFDRjtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUVyQjtJQUNBQSxPQUFPLEdBQUdSLEtBQUssQ0FBRTtNQUNmUyxXQUFXLEVBQUUsQ0FBQztNQUNkQyxZQUFZLEVBQUUsQ0FBQztNQUNmQyxhQUFhLEVBQUUsQ0FBQztNQUNoQkMsTUFBTSxFQUFFWCxNQUFNLENBQUNZLFFBQVEsQ0FBQztJQUMxQixDQUFDLEVBQUVMLE9BQVEsQ0FBQzs7SUFFWjtJ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