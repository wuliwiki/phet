// Copyright 2013-2022, University of Colorado Boulder

/**
 * BarMagnetNode is the view for the bar magnet. It is responsible for the visual representation of a bar magnet,
 * and keeping that visual representation synchronized with a BarMagnet instance.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Steele Dalton (PhET Interactive Simulations)
 */

import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import { DragListener, Image, Node } from '../../../../scenery/js/imports.js';
import barMagnet_png from '../../../images/barMagnet_png.js';
import exampleSim from '../../exampleSim.js';
import BarMagnet from '../model/BarMagnet.js';
class BarMagnetNode extends Node {
  /**
   * @param {BarMagnet} barMagnet - the model of the bar magnet
   * @param {ModelViewTransform2} modelViewTransform - the transform between model coordinates and view coordinates
   */
  constructor(barMagnet, modelViewTransform) {
    // This is an example of using assertions to check for potential programming errors. In this case, we are verifying
    // that the arguments have the expected type.  Run the simulation with query parameter ?ea to enable assertions.
    assert && assert(barMagnet instanceof BarMagnet, 'invalid barMagnet');
    assert && assert(modelViewTransform instanceof ModelViewTransform2, 'invalid modelViewTransform');
    super({
      // Show a cursor hand over the bar magnet
      cursor: 'pointer'
    });

    // The bar magnet is rendered using an image file. This creates the scenery Node that will render that image
    // file, and moves the origin (0,0) to the center of the Node.
    this.addChild(new Image(barMagnet_png, {
      centerX: 0,
      centerY: 0
    }));

    // Scale this Node, so that it matches the model width and height.
    const scaleX = modelViewTransform.modelToViewDeltaX(barMagnet.size.width) / this.width;
    const scaleY = modelViewTransform.modelToViewDeltaY(barMagnet.size.height) / this.height;
    this.scale(scaleX, scaleY);

    // Move the magnet by dragging it.
    this.addInputListener(new DragListener({
      //allowTouchSnag: true, // When dragging across it on a touch device, pick it up
      positionProperty: barMagnet.positionProperty,
      transform: modelViewTransform
    }));

    // Observe changes in model position, and move this Node to the new position in the view.
    // This Property exists for the lifetime of the simulation, so this listener does not need to be unlinked.
    barMagnet.positionProperty.link(position => {
      this.translation = modelViewTransform.modelToViewPosition(position);
    });

    // Observe changes in model orientation, and update the orientation in the view.
    // This Property exists for the lifetime of the simulation, so this listener does not need to be unlinked.
    barMagnet.orientationProperty.link(orientation => {
      this.rotation = orientation;
    });
  }
}
exampleSim.register('BarMagnetNode', BarMagnetNode);
export default BarMagnetNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiRHJhZ0xpc3RlbmVyIiwiSW1hZ2UiLCJOb2RlIiwiYmFyTWFnbmV0X3BuZyIsImV4YW1wbGVTaW0iLCJCYXJNYWduZXQiLCJCYXJNYWduZXROb2RlIiwiY29uc3RydWN0b3IiLCJiYXJNYWduZXQiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJhc3NlcnQiLCJjdXJzb3IiLCJhZGRDaGlsZCIsImNlbnRlclgiLCJjZW50ZXJZIiwic2NhbGVYIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJzaXplIiwid2lkdGgiLCJzY2FsZVkiLCJtb2RlbFRvVmlld0RlbHRhWSIsImhlaWdodCIsInNjYWxlIiwiYWRkSW5wdXRMaXN0ZW5lciIsInBvc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2Zvcm0iLCJsaW5rIiwicG9zaXRpb24iLCJ0cmFuc2xhdGlvbiIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJvcmllbnRhdGlvblByb3BlcnR5Iiwib3JpZW50YXRpb24iLCJyb3RhdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFyTWFnbmV0Tm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCYXJNYWduZXROb2RlIGlzIHRoZSB2aWV3IGZvciB0aGUgYmFyIG1hZ25ldC4gSXQgaXMgcmVzcG9uc2libGUgZm9yIHRoZSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb2YgYSBiYXIgbWFnbmV0LFxyXG4gKiBhbmQga2VlcGluZyB0aGF0IHZpc3VhbCByZXByZXNlbnRhdGlvbiBzeW5jaHJvbml6ZWQgd2l0aCBhIEJhck1hZ25ldCBpbnN0YW5jZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTdGVlbGUgRGFsdG9uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyLCBJbWFnZSwgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBiYXJNYWduZXRfcG5nIGZyb20gJy4uLy4uLy4uL2ltYWdlcy9iYXJNYWduZXRfcG5nLmpzJztcclxuaW1wb3J0IGV4YW1wbGVTaW0gZnJvbSAnLi4vLi4vZXhhbXBsZVNpbS5qcyc7XHJcbmltcG9ydCBCYXJNYWduZXQgZnJvbSAnLi4vbW9kZWwvQmFyTWFnbmV0LmpzJztcclxuXHJcbmNsYXNzIEJhck1hZ25ldE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCYXJNYWduZXR9IGJhck1hZ25ldCAtIHRoZSBtb2RlbCBvZiB0aGUgYmFyIG1hZ25ldFxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtIC0gdGhlIHRyYW5zZm9ybSBiZXR3ZWVuIG1vZGVsIGNvb3JkaW5hdGVzIGFuZCB2aWV3IGNvb3JkaW5hdGVzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGJhck1hZ25ldCwgbW9kZWxWaWV3VHJhbnNmb3JtICkge1xyXG5cclxuICAgIC8vIFRoaXMgaXMgYW4gZXhhbXBsZSBvZiB1c2luZyBhc3NlcnRpb25zIHRvIGNoZWNrIGZvciBwb3RlbnRpYWwgcHJvZ3JhbW1pbmcgZXJyb3JzLiBJbiB0aGlzIGNhc2UsIHdlIGFyZSB2ZXJpZnlpbmdcclxuICAgIC8vIHRoYXQgdGhlIGFyZ3VtZW50cyBoYXZlIHRoZSBleHBlY3RlZCB0eXBlLiAgUnVuIHRoZSBzaW11bGF0aW9uIHdpdGggcXVlcnkgcGFyYW1ldGVyID9lYSB0byBlbmFibGUgYXNzZXJ0aW9ucy5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGJhck1hZ25ldCBpbnN0YW5jZW9mIEJhck1hZ25ldCwgJ2ludmFsaWQgYmFyTWFnbmV0JyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggbW9kZWxWaWV3VHJhbnNmb3JtIGluc3RhbmNlb2YgTW9kZWxWaWV3VHJhbnNmb3JtMiwgJ2ludmFsaWQgbW9kZWxWaWV3VHJhbnNmb3JtJyApO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIC8vIFNob3cgYSBjdXJzb3IgaGFuZCBvdmVyIHRoZSBiYXIgbWFnbmV0XHJcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVGhlIGJhciBtYWduZXQgaXMgcmVuZGVyZWQgdXNpbmcgYW4gaW1hZ2UgZmlsZS4gVGhpcyBjcmVhdGVzIHRoZSBzY2VuZXJ5IE5vZGUgdGhhdCB3aWxsIHJlbmRlciB0aGF0IGltYWdlXHJcbiAgICAvLyBmaWxlLCBhbmQgbW92ZXMgdGhlIG9yaWdpbiAoMCwwKSB0byB0aGUgY2VudGVyIG9mIHRoZSBOb2RlLlxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IEltYWdlKCBiYXJNYWduZXRfcG5nLCB7XHJcbiAgICAgIGNlbnRlclg6IDAsXHJcbiAgICAgIGNlbnRlclk6IDBcclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIFNjYWxlIHRoaXMgTm9kZSwgc28gdGhhdCBpdCBtYXRjaGVzIHRoZSBtb2RlbCB3aWR0aCBhbmQgaGVpZ2h0LlxyXG4gICAgY29uc3Qgc2NhbGVYID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBiYXJNYWduZXQuc2l6ZS53aWR0aCApIC8gdGhpcy53aWR0aDtcclxuICAgIGNvbnN0IHNjYWxlWSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggYmFyTWFnbmV0LnNpemUuaGVpZ2h0ICkgLyB0aGlzLmhlaWdodDtcclxuICAgIHRoaXMuc2NhbGUoIHNjYWxlWCwgc2NhbGVZICk7XHJcblxyXG4gICAgLy8gTW92ZSB0aGUgbWFnbmV0IGJ5IGRyYWdnaW5nIGl0LlxyXG4gICAgdGhpcy5hZGRJbnB1dExpc3RlbmVyKCBuZXcgRHJhZ0xpc3RlbmVyKCB7XHJcbiAgICAgIC8vYWxsb3dUb3VjaFNuYWc6IHRydWUsIC8vIFdoZW4gZHJhZ2dpbmcgYWNyb3NzIGl0IG9uIGEgdG91Y2ggZGV2aWNlLCBwaWNrIGl0IHVwXHJcbiAgICAgIHBvc2l0aW9uUHJvcGVydHk6IGJhck1hZ25ldC5wb3NpdGlvblByb3BlcnR5LFxyXG4gICAgICB0cmFuc2Zvcm06IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gT2JzZXJ2ZSBjaGFuZ2VzIGluIG1vZGVsIHBvc2l0aW9uLCBhbmQgbW92ZSB0aGlzIE5vZGUgdG8gdGhlIG5ldyBwb3NpdGlvbiBpbiB0aGUgdmlldy5cclxuICAgIC8vIFRoaXMgUHJvcGVydHkgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbXVsYXRpb24sIHNvIHRoaXMgbGlzdGVuZXIgZG9lcyBub3QgbmVlZCB0byBiZSB1bmxpbmtlZC5cclxuICAgIGJhck1hZ25ldC5wb3NpdGlvblByb3BlcnR5LmxpbmsoIHBvc2l0aW9uID0+IHtcclxuICAgICAgdGhpcy50cmFuc2xhdGlvbiA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBwb3NpdGlvbiApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIE9ic2VydmUgY2hhbmdlcyBpbiBtb2RlbCBvcmllbnRhdGlvbiwgYW5kIHVwZGF0ZSB0aGUgb3JpZW50YXRpb24gaW4gdGhlIHZpZXcuXHJcbiAgICAvLyBUaGlzIFByb3BlcnR5IGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW11bGF0aW9uLCBzbyB0aGlzIGxpc3RlbmVyIGRvZXMgbm90IG5lZWQgdG8gYmUgdW5saW5rZWQuXHJcbiAgICBiYXJNYWduZXQub3JpZW50YXRpb25Qcm9wZXJ0eS5saW5rKCBvcmllbnRhdGlvbiA9PiB7XHJcbiAgICAgIHRoaXMucm90YXRpb24gPSBvcmllbnRhdGlvbjtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmV4YW1wbGVTaW0ucmVnaXN0ZXIoICdCYXJNYWduZXROb2RlJywgQmFyTWFnbmV0Tm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBCYXJNYWduZXROb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxtQkFBbUIsTUFBTSx1REFBdUQ7QUFDdkYsU0FBU0MsWUFBWSxFQUFFQyxLQUFLLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDN0UsT0FBT0MsYUFBYSxNQUFNLGtDQUFrQztBQUM1RCxPQUFPQyxVQUFVLE1BQU0scUJBQXFCO0FBQzVDLE9BQU9DLFNBQVMsTUFBTSx1QkFBdUI7QUFFN0MsTUFBTUMsYUFBYSxTQUFTSixJQUFJLENBQUM7RUFFL0I7QUFDRjtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsU0FBUyxFQUFFQyxrQkFBa0IsRUFBRztJQUUzQztJQUNBO0lBQ0FDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixTQUFTLFlBQVlILFNBQVMsRUFBRSxtQkFBb0IsQ0FBQztJQUN2RUssTUFBTSxJQUFJQSxNQUFNLENBQUVELGtCQUFrQixZQUFZVixtQkFBbUIsRUFBRSw0QkFBNkIsQ0FBQztJQUVuRyxLQUFLLENBQUU7TUFDTDtNQUNBWSxNQUFNLEVBQUU7SUFDVixDQUFFLENBQUM7O0lBRUg7SUFDQTtJQUNBLElBQUksQ0FBQ0MsUUFBUSxDQUFFLElBQUlYLEtBQUssQ0FBRUUsYUFBYSxFQUFFO01BQ3ZDVSxPQUFPLEVBQUUsQ0FBQztNQUNWQyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUUsQ0FBQzs7SUFFTDtJQUNBLE1BQU1DLE1BQU0sR0FBR04sa0JBQWtCLENBQUNPLGlCQUFpQixDQUFFUixTQUFTLENBQUNTLElBQUksQ0FBQ0MsS0FBTSxDQUFDLEdBQUcsSUFBSSxDQUFDQSxLQUFLO0lBQ3hGLE1BQU1DLE1BQU0sR0FBR1Ysa0JBQWtCLENBQUNXLGlCQUFpQixDQUFFWixTQUFTLENBQUNTLElBQUksQ0FBQ0ksTUFBTyxDQUFDLEdBQUcsSUFBSSxDQUFDQSxNQUFNO0lBQzFGLElBQUksQ0FBQ0MsS0FBSyxDQUFFUCxNQUFNLEVBQUVJLE1BQU8sQ0FBQzs7SUFFNUI7SUFDQSxJQUFJLENBQUNJLGdCQUFnQixDQUFFLElBQUl2QixZQUFZLENBQUU7TUFDdkM7TUFDQXdCLGdCQUFnQixFQUFFaEIsU0FBUyxDQUFDZ0IsZ0JBQWdCO01BQzVDQyxTQUFTLEVBQUVoQjtJQUNiLENBQUUsQ0FBRSxDQUFDOztJQUVMO0lBQ0E7SUFDQUQsU0FBUyxDQUFDZ0IsZ0JBQWdCLENBQUNFLElBQUksQ0FBRUMsUUFBUSxJQUFJO01BQzNDLElBQUksQ0FBQ0MsV0FBVyxHQUFHbkIsa0JBQWtCLENBQUNvQixtQkFBbUIsQ0FBRUYsUUFBUyxDQUFDO0lBQ3ZFLENBQUUsQ0FBQzs7SUFFSDtJQUNBO0lBQ0FuQixTQUFTLENBQUNzQixtQkFBbUIsQ0FBQ0osSUFBSSxDQUFFSyxXQUFXLElBQUk7TUFDakQsSUFBSSxDQUFDQyxRQUFRLEdBQUdELFdBQVc7SUFDN0IsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBM0IsVUFBVSxDQUFDNkIsUUFBUSxDQUFFLGVBQWUsRUFBRTNCLGFBQWMsQ0FBQztBQUNyRCxlQUFlQSxhQUFhIn0=