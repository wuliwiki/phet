// Copyright 2021, University of Colorado Boulder

/**
 * MagnetsScreenView is the top-level view component for the 'Magnets' screen. All of the components that make up
 * the screen's view are added here.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Steele Dalton (PhET Interactive Simulations)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import ScreenView from '../../../../joist/js/ScreenView.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import ExampleSimConstants from '../../common/ExampleSimConstants.js';
import exampleSim from '../../exampleSim.js';
import BarMagnetNode from './BarMagnetNode.js';
import MagnetsControlPanel from './MagnetsControlPanel.js';
class MagnetsScreenView extends ScreenView {
  /**
   * @param {MagnetsModel} model - the top-level model for this screen
   */
  constructor(model) {
    super();

    // transform between model coordinates and view coordinates
    const center = new Vector2(this.layoutBounds.width / 2, this.layoutBounds.height / 2);
    const modelViewTransform = ModelViewTransform2.createOffsetScaleMapping(center, 1);

    // Add a magnet. The model determines its position.
    this.addChild(new BarMagnetNode(model.barMagnet, modelViewTransform));
    this.addChild(new BarMagnetNode(model.barMagnet2, modelViewTransform));

    // Add the control panel for magnets, positioned at the top-right of the screen.
    this.addChild(new MagnetsControlPanel(model, {
      right: this.layoutBounds.right - ExampleSimConstants.SCREEN_VIEW_X_MARGIN,
      top: this.layoutBounds.top + ExampleSimConstants.SCREEN_VIEW_Y_MARGIN
    }));

    // Add the 'Reset All' button. This resets the simulation to its initial state. By PhET convention, this
    // button is positioned at the lower-right of the screen.
    this.addChild(new ResetAllButton({
      listener: () => {
        // Interrupt any other user interactions that may be in progress, needed for multi-touch.
        // To demonstrate, press the Reset All button while dragging the magent.
        this.interruptSubtreeInput();

        // Reset the model
        model.reset();
      },
      right: this.layoutBounds.right - ExampleSimConstants.SCREEN_VIEW_X_MARGIN,
      bottom: this.layoutBounds.bottom - ExampleSimConstants.SCREEN_VIEW_Y_MARGIN
    }));
  }
}
exampleSim.register('MagnetsScreenView', MagnetsScreenView);
export default MagnetsScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2NyZWVuVmlldyIsIk1vZGVsVmlld1RyYW5zZm9ybTIiLCJSZXNldEFsbEJ1dHRvbiIsIkV4YW1wbGVTaW1Db25zdGFudHMiLCJleGFtcGxlU2ltIiwiQmFyTWFnbmV0Tm9kZSIsIk1hZ25ldHNDb250cm9sUGFuZWwiLCJNYWduZXRzU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJjZW50ZXIiLCJsYXlvdXRCb3VuZHMiLCJ3aWR0aCIsImhlaWdodCIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImNyZWF0ZU9mZnNldFNjYWxlTWFwcGluZyIsImFkZENoaWxkIiwiYmFyTWFnbmV0IiwiYmFyTWFnbmV0MiIsInJpZ2h0IiwiU0NSRUVOX1ZJRVdfWF9NQVJHSU4iLCJ0b3AiLCJTQ1JFRU5fVklFV19ZX01BUkdJTiIsImxpc3RlbmVyIiwiaW50ZXJydXB0U3VidHJlZUlucHV0IiwicmVzZXQiLCJib3R0b20iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1hZ25ldHNTY3JlZW5WaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWduZXRzU2NyZWVuVmlldyBpcyB0aGUgdG9wLWxldmVsIHZpZXcgY29tcG9uZW50IGZvciB0aGUgJ01hZ25ldHMnIHNjcmVlbi4gQWxsIG9mIHRoZSBjb21wb25lbnRzIHRoYXQgbWFrZSB1cFxyXG4gKiB0aGUgc2NyZWVuJ3MgdmlldyBhcmUgYWRkZWQgaGVyZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTdGVlbGUgRGFsdG9uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFNjcmVlblZpZXcgZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IFJlc2V0QWxsQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9idXR0b25zL1Jlc2V0QWxsQnV0dG9uLmpzJztcclxuaW1wb3J0IEV4YW1wbGVTaW1Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0V4YW1wbGVTaW1Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgZXhhbXBsZVNpbSBmcm9tICcuLi8uLi9leGFtcGxlU2ltLmpzJztcclxuaW1wb3J0IEJhck1hZ25ldE5vZGUgZnJvbSAnLi9CYXJNYWduZXROb2RlLmpzJztcclxuaW1wb3J0IE1hZ25ldHNDb250cm9sUGFuZWwgZnJvbSAnLi9NYWduZXRzQ29udHJvbFBhbmVsLmpzJztcclxuXHJcbmNsYXNzIE1hZ25ldHNTY3JlZW5WaWV3IGV4dGVuZHMgU2NyZWVuVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TWFnbmV0c01vZGVsfSBtb2RlbCAtIHRoZSB0b3AtbGV2ZWwgbW9kZWwgZm9yIHRoaXMgc2NyZWVuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsICkge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gdHJhbnNmb3JtIGJldHdlZW4gbW9kZWwgY29vcmRpbmF0ZXMgYW5kIHZpZXcgY29vcmRpbmF0ZXNcclxuICAgIGNvbnN0IGNlbnRlciA9IG5ldyBWZWN0b3IyKCB0aGlzLmxheW91dEJvdW5kcy53aWR0aCAvIDIsIHRoaXMubGF5b3V0Qm91bmRzLmhlaWdodCAvIDIgKTtcclxuICAgIGNvbnN0IG1vZGVsVmlld1RyYW5zZm9ybSA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlT2Zmc2V0U2NhbGVNYXBwaW5nKCBjZW50ZXIsIDEgKTtcclxuXHJcbiAgICAvLyBBZGQgYSBtYWduZXQuIFRoZSBtb2RlbCBkZXRlcm1pbmVzIGl0cyBwb3NpdGlvbi5cclxuICAgIHRoaXMuYWRkQ2hpbGQobmV3IEJhck1hZ25ldE5vZGUoIG1vZGVsLmJhck1hZ25ldCwgbW9kZWxWaWV3VHJhbnNmb3JtICkgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQobmV3IEJhck1hZ25ldE5vZGUoIG1vZGVsLmJhck1hZ25ldDIsIG1vZGVsVmlld1RyYW5zZm9ybSApICk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBjb250cm9sIHBhbmVsIGZvciBtYWduZXRzLCBwb3NpdGlvbmVkIGF0IHRoZSB0b3AtcmlnaHQgb2YgdGhlIHNjcmVlbi5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBNYWduZXRzQ29udHJvbFBhbmVsKCBtb2RlbCwge1xyXG4gICAgICByaWdodDogdGhpcy5sYXlvdXRCb3VuZHMucmlnaHQgLSBFeGFtcGxlU2ltQ29uc3RhbnRzLlNDUkVFTl9WSUVXX1hfTUFSR0lOLFxyXG4gICAgICB0b3A6IHRoaXMubGF5b3V0Qm91bmRzLnRvcCArIEV4YW1wbGVTaW1Db25zdGFudHMuU0NSRUVOX1ZJRVdfWV9NQVJHSU5cclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgJ1Jlc2V0IEFsbCcgYnV0dG9uLiBUaGlzIHJlc2V0cyB0aGUgc2ltdWxhdGlvbiB0byBpdHMgaW5pdGlhbCBzdGF0ZS4gQnkgUGhFVCBjb252ZW50aW9uLCB0aGlzXHJcbiAgICAvLyBidXR0b24gaXMgcG9zaXRpb25lZCBhdCB0aGUgbG93ZXItcmlnaHQgb2YgdGhlIHNjcmVlbi5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBSZXNldEFsbEJ1dHRvbigge1xyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG5cclxuICAgICAgICAvLyBJbnRlcnJ1cHQgYW55IG90aGVyIHVzZXIgaW50ZXJhY3Rpb25zIHRoYXQgbWF5IGJlIGluIHByb2dyZXNzLCBuZWVkZWQgZm9yIG11bHRpLXRvdWNoLlxyXG4gICAgICAgIC8vIFRvIGRlbW9uc3RyYXRlLCBwcmVzcyB0aGUgUmVzZXQgQWxsIGJ1dHRvbiB3aGlsZSBkcmFnZ2luZyB0aGUgbWFnZW50LlxyXG4gICAgICAgIHRoaXMuaW50ZXJydXB0U3VidHJlZUlucHV0KCk7XHJcblxyXG4gICAgICAgIC8vIFJlc2V0IHRoZSBtb2RlbFxyXG4gICAgICAgIG1vZGVsLnJlc2V0KCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJpZ2h0OiB0aGlzLmxheW91dEJvdW5kcy5yaWdodCAtIEV4YW1wbGVTaW1Db25zdGFudHMuU0NSRUVOX1ZJRVdfWF9NQVJHSU4sXHJcbiAgICAgIGJvdHRvbTogdGhpcy5sYXlvdXRCb3VuZHMuYm90dG9tIC0gRXhhbXBsZVNpbUNvbnN0YW50cy5TQ1JFRU5fVklFV19ZX01BUkdJTlxyXG4gICAgfSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5leGFtcGxlU2ltLnJlZ2lzdGVyKCAnTWFnbmV0c1NjcmVlblZpZXcnLCBNYWduZXRzU2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBNYWduZXRzU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxVQUFVLE1BQU0sb0NBQW9DO0FBQzNELE9BQU9DLG1CQUFtQixNQUFNLHVEQUF1RDtBQUN2RixPQUFPQyxjQUFjLE1BQU0sdURBQXVEO0FBQ2xGLE9BQU9DLG1CQUFtQixNQUFNLHFDQUFxQztBQUNyRSxPQUFPQyxVQUFVLE1BQU0scUJBQXFCO0FBQzVDLE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFDOUMsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBRTFELE1BQU1DLGlCQUFpQixTQUFTUCxVQUFVLENBQUM7RUFFekM7QUFDRjtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLEtBQUssRUFBRztJQUVuQixLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBLE1BQU1DLE1BQU0sR0FBRyxJQUFJWCxPQUFPLENBQUUsSUFBSSxDQUFDWSxZQUFZLENBQUNDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDRCxZQUFZLENBQUNFLE1BQU0sR0FBRyxDQUFFLENBQUM7SUFDdkYsTUFBTUMsa0JBQWtCLEdBQUdiLG1CQUFtQixDQUFDYyx3QkFBd0IsQ0FBRUwsTUFBTSxFQUFFLENBQUUsQ0FBQzs7SUFFcEY7SUFDQSxJQUFJLENBQUNNLFFBQVEsQ0FBQyxJQUFJWCxhQUFhLENBQUVJLEtBQUssQ0FBQ1EsU0FBUyxFQUFFSCxrQkFBbUIsQ0FBRSxDQUFDO0lBQ3hFLElBQUksQ0FBQ0UsUUFBUSxDQUFDLElBQUlYLGFBQWEsQ0FBRUksS0FBSyxDQUFDUyxVQUFVLEVBQUVKLGtCQUFtQixDQUFFLENBQUM7O0lBRXpFO0lBQ0EsSUFBSSxDQUFDRSxRQUFRLENBQUUsSUFBSVYsbUJBQW1CLENBQUVHLEtBQUssRUFBRTtNQUM3Q1UsS0FBSyxFQUFFLElBQUksQ0FBQ1IsWUFBWSxDQUFDUSxLQUFLLEdBQUdoQixtQkFBbUIsQ0FBQ2lCLG9CQUFvQjtNQUN6RUMsR0FBRyxFQUFFLElBQUksQ0FBQ1YsWUFBWSxDQUFDVSxHQUFHLEdBQUdsQixtQkFBbUIsQ0FBQ21CO0lBQ25ELENBQUUsQ0FBRSxDQUFDOztJQUVMO0lBQ0E7SUFDQSxJQUFJLENBQUNOLFFBQVEsQ0FBRSxJQUFJZCxjQUFjLENBQUU7TUFDakNxQixRQUFRLEVBQUVBLENBQUEsS0FBTTtRQUVkO1FBQ0E7UUFDQSxJQUFJLENBQUNDLHFCQUFxQixDQUFDLENBQUM7O1FBRTVCO1FBQ0FmLEtBQUssQ0FBQ2dCLEtBQUssQ0FBQyxDQUFDO01BQ2YsQ0FBQztNQUNETixLQUFLLEVBQUUsSUFBSSxDQUFDUixZQUFZLENBQUNRLEtBQUssR0FBR2hCLG1CQUFtQixDQUFDaUIsb0JBQW9CO01BQ3pFTSxNQUFNLEVBQUUsSUFBSSxDQUFDZixZQUFZLENBQUNlLE1BQU0sR0FBR3ZCLG1CQUFtQixDQUFDbUI7SUFDekQsQ0FBRSxDQUFFLENBQUM7RUFDUDtBQUNGO0FBRUFsQixVQUFVLENBQUN1QixRQUFRLENBQUUsbUJBQW1CLEVBQUVwQixpQkFBa0IsQ0FBQztBQUM3RCxlQUFlQSxpQkFBaUIifQ==