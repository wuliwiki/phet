// Copyright 2013-2022, University of Colorado Boulder

/**
 * MagnetsScreen is the top-level component for the 'Magnets' screen.  It creates the model and view.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import merge from '../../../phet-core/js/merge.js';
import { Image } from '../../../scenery/js/imports.js';
import barMagnet_png from '../../images/barMagnet_png.js';
import ExampleSimConstants from '../common/ExampleSimConstants.js';
import exampleSim from '../exampleSim.js';
import ExampleSimStrings from '../ExampleSimStrings.js';
import MagnetsModel from './model/MagnetsModel.js';
import MagnetsScreenView from './view/MagnetsScreenView.js';

// constants
const BACKGROUND_COLOR_PROPERTY = new Property('black');
class MagnetsScreen extends Screen {
  constructor() {
    const options = merge({
      name: ExampleSimStrings.screen.magnetsStringProperty,
      homeScreenIcon: createScreenIcon()
    }, ExampleSimConstants.SCREEN_OPTIONS);
    super(() => new MagnetsModel(), model => new MagnetsScreenView(model), options);
  }
}

/**
 * Creates the icon for this screen. This will be used for the home screen and navigation bar.
 * Always use ScreenIcon for screen icons.
 * @returns {ScreenIcon}
 */
function createScreenIcon() {
  const iconNode = new Image(barMagnet_png);
  return new ScreenIcon(iconNode, {
    fill: BACKGROUND_COLOR_PROPERTY
  });
}
exampleSim.register('MagnetsScreen', MagnetsScreen);
export default MagnetsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJtZXJnZSIsIkltYWdlIiwiYmFyTWFnbmV0X3BuZyIsIkV4YW1wbGVTaW1Db25zdGFudHMiLCJleGFtcGxlU2ltIiwiRXhhbXBsZVNpbVN0cmluZ3MiLCJNYWduZXRzTW9kZWwiLCJNYWduZXRzU2NyZWVuVmlldyIsIkJBQ0tHUk9VTkRfQ09MT1JfUFJPUEVSVFkiLCJNYWduZXRzU2NyZWVuIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibmFtZSIsInNjcmVlbiIsIm1hZ25ldHNTdHJpbmdQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlU2NyZWVuSWNvbiIsIlNDUkVFTl9PUFRJT05TIiwibW9kZWwiLCJpY29uTm9kZSIsImZpbGwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1hZ25ldHNTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFnbmV0c1NjcmVlbiBpcyB0aGUgdG9wLWxldmVsIGNvbXBvbmVudCBmb3IgdGhlICdNYWduZXRzJyBzY3JlZW4uICBJdCBjcmVhdGVzIHRoZSBtb2RlbCBhbmQgdmlldy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBiYXJNYWduZXRfcG5nIGZyb20gJy4uLy4uL2ltYWdlcy9iYXJNYWduZXRfcG5nLmpzJztcclxuaW1wb3J0IEV4YW1wbGVTaW1Db25zdGFudHMgZnJvbSAnLi4vY29tbW9uL0V4YW1wbGVTaW1Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgZXhhbXBsZVNpbSBmcm9tICcuLi9leGFtcGxlU2ltLmpzJztcclxuaW1wb3J0IEV4YW1wbGVTaW1TdHJpbmdzIGZyb20gJy4uL0V4YW1wbGVTaW1TdHJpbmdzLmpzJztcclxuaW1wb3J0IE1hZ25ldHNNb2RlbCBmcm9tICcuL21vZGVsL01hZ25ldHNNb2RlbC5qcyc7XHJcbmltcG9ydCBNYWduZXRzU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvTWFnbmV0c1NjcmVlblZpZXcuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEJBQ0tHUk9VTkRfQ09MT1JfUFJPUEVSVFkgPSBuZXcgUHJvcGVydHkoICdibGFjaycgKTtcclxuXHJcbmNsYXNzIE1hZ25ldHNTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgbmFtZTogRXhhbXBsZVNpbVN0cmluZ3Muc2NyZWVuLm1hZ25ldHNTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IGNyZWF0ZVNjcmVlbkljb24oKVxyXG4gICAgfSwgRXhhbXBsZVNpbUNvbnN0YW50cy5TQ1JFRU5fT1BUSU9OUyApO1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgTWFnbmV0c01vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBNYWduZXRzU2NyZWVuVmlldyggbW9kZWwgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIHRoZSBpY29uIGZvciB0aGlzIHNjcmVlbi4gVGhpcyB3aWxsIGJlIHVzZWQgZm9yIHRoZSBob21lIHNjcmVlbiBhbmQgbmF2aWdhdGlvbiBiYXIuXHJcbiAqIEFsd2F5cyB1c2UgU2NyZWVuSWNvbiBmb3Igc2NyZWVuIGljb25zLlxyXG4gKiBAcmV0dXJucyB7U2NyZWVuSWNvbn1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVNjcmVlbkljb24oKSB7XHJcbiAgY29uc3QgaWNvbk5vZGUgPSBuZXcgSW1hZ2UoIGJhck1hZ25ldF9wbmcgKTtcclxuICByZXR1cm4gbmV3IFNjcmVlbkljb24oIGljb25Ob2RlLCB7XHJcbiAgICBmaWxsOiBCQUNLR1JPVU5EX0NPTE9SX1BST1BFUlRZXHJcbiAgfSApO1xyXG59XHJcblxyXG5leGFtcGxlU2ltLnJlZ2lzdGVyKCAnTWFnbmV0c1NjcmVlbicsIE1hZ25ldHNTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgTWFnbmV0c1NjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxTQUFTQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLGFBQWEsTUFBTSwrQkFBK0I7QUFDekQsT0FBT0MsbUJBQW1CLE1BQU0sa0NBQWtDO0FBQ2xFLE9BQU9DLFVBQVUsTUFBTSxrQkFBa0I7QUFDekMsT0FBT0MsaUJBQWlCLE1BQU0seUJBQXlCO0FBQ3ZELE9BQU9DLFlBQVksTUFBTSx5QkFBeUI7QUFDbEQsT0FBT0MsaUJBQWlCLE1BQU0sNkJBQTZCOztBQUUzRDtBQUNBLE1BQU1DLHlCQUF5QixHQUFHLElBQUlYLFFBQVEsQ0FBRSxPQUFRLENBQUM7QUFFekQsTUFBTVksYUFBYSxTQUFTWCxNQUFNLENBQUM7RUFFakNZLFdBQVdBLENBQUEsRUFBRztJQUVaLE1BQU1DLE9BQU8sR0FBR1gsS0FBSyxDQUFFO01BQ3JCWSxJQUFJLEVBQUVQLGlCQUFpQixDQUFDUSxNQUFNLENBQUNDLHFCQUFxQjtNQUNwREMsY0FBYyxFQUFFQyxnQkFBZ0IsQ0FBQztJQUNuQyxDQUFDLEVBQUViLG1CQUFtQixDQUFDYyxjQUFlLENBQUM7SUFFdkMsS0FBSyxDQUNILE1BQU0sSUFBSVgsWUFBWSxDQUFDLENBQUMsRUFDeEJZLEtBQUssSUFBSSxJQUFJWCxpQkFBaUIsQ0FBRVcsS0FBTSxDQUFDLEVBQ3ZDUCxPQUNGLENBQUM7RUFDSDtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSyxnQkFBZ0JBLENBQUEsRUFBRztFQUMxQixNQUFNRyxRQUFRLEdBQUcsSUFBSWxCLEtBQUssQ0FBRUMsYUFBYyxDQUFDO0VBQzNDLE9BQU8sSUFBSUgsVUFBVSxDQUFFb0IsUUFBUSxFQUFFO0lBQy9CQyxJQUFJLEVBQUVaO0VBQ1IsQ0FBRSxDQUFDO0FBQ0w7QUFFQUosVUFBVSxDQUFDaUIsUUFBUSxDQUFFLGVBQWUsRUFBRVosYUFBYyxDQUFDO0FBQ3JELGVBQWVBLGFBQWEifQ==