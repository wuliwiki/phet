// Copyright 2019-2022, University of Colorado Boulder

/**
 * Allows turning a Node into an updatable three.js texture.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { Display, Node } from '../../scenery/js/imports.js';
import mobius from './mobius.js';
export default class NodeTexture extends THREE.Texture {
  constructor(node, width, height) {
    const scene = new Node({
      renderer: 'canvas',
      preventFit: true
    });
    scene.addChild(node);
    const display = new Display(scene, {
      width: width,
      height: height,
      accessibility: false
    });
    display.updateDisplay();
    const canvas = display.rootBackbone.blocks[0].canvas;
    super(canvas);
    this._display = display;
    this._scene = scene;
    this._width = width;
    this._height = height;

    // tells three.js that the texture needs an update
    this.needsUpdate = true;
  }

  /**
   * Updates the node's appearance in the texture.
   */
  update() {
    this._display.updateDisplay();
    this.needsUpdate = true;
  }

  /**
   * Releases references.
   */
  dispose() {
    this._display.dispose();
    this._scene.dispose();
    super.dispose();
  }
}
mobius.register('NodeTexture', NodeTexture);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaXNwbGF5IiwiTm9kZSIsIm1vYml1cyIsIk5vZGVUZXh0dXJlIiwiVEhSRUUiLCJUZXh0dXJlIiwiY29uc3RydWN0b3IiLCJub2RlIiwid2lkdGgiLCJoZWlnaHQiLCJzY2VuZSIsInJlbmRlcmVyIiwicHJldmVudEZpdCIsImFkZENoaWxkIiwiZGlzcGxheSIsImFjY2Vzc2liaWxpdHkiLCJ1cGRhdGVEaXNwbGF5IiwiY2FudmFzIiwicm9vdEJhY2tib25lIiwiYmxvY2tzIiwiX2Rpc3BsYXkiLCJfc2NlbmUiLCJfd2lkdGgiLCJfaGVpZ2h0IiwibmVlZHNVcGRhdGUiLCJ1cGRhdGUiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOb2RlVGV4dHVyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBbGxvd3MgdHVybmluZyBhIE5vZGUgaW50byBhbiB1cGRhdGFibGUgdGhyZWUuanMgdGV4dHVyZS5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IERpc3BsYXksIE5vZGUgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbW9iaXVzIGZyb20gJy4vbW9iaXVzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vZGVUZXh0dXJlIGV4dGVuZHMgVEhSRUUuVGV4dHVyZSB7XHJcblxyXG4gIHByaXZhdGUgX2Rpc3BsYXk6IERpc3BsYXk7XHJcbiAgcHJpdmF0ZSBfc2NlbmU6IE5vZGU7XHJcblxyXG4gIHB1YmxpYyBfd2lkdGg6IG51bWJlcjtcclxuICBwdWJsaWMgX2hlaWdodDogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG5vZGU6IE5vZGUsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyICkge1xyXG4gICAgY29uc3Qgc2NlbmUgPSBuZXcgTm9kZSgge1xyXG4gICAgICByZW5kZXJlcjogJ2NhbnZhcycsXHJcbiAgICAgIHByZXZlbnRGaXQ6IHRydWVcclxuICAgIH0gKTtcclxuICAgIHNjZW5lLmFkZENoaWxkKCBub2RlICk7XHJcbiAgICBjb25zdCBkaXNwbGF5ID0gbmV3IERpc3BsYXkoIHNjZW5lLCB7XHJcbiAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgIGFjY2Vzc2liaWxpdHk6IGZhbHNlXHJcbiAgICB9ICk7XHJcbiAgICBkaXNwbGF5LnVwZGF0ZURpc3BsYXkoKTtcclxuXHJcbiAgICBjb25zdCBjYW52YXMgPSBkaXNwbGF5LnJvb3RCYWNrYm9uZS5ibG9ja3NbIDAgXS5jYW52YXM7XHJcblxyXG4gICAgc3VwZXIoIGNhbnZhcyApO1xyXG5cclxuICAgIHRoaXMuX2Rpc3BsYXkgPSBkaXNwbGF5O1xyXG4gICAgdGhpcy5fc2NlbmUgPSBzY2VuZTtcclxuICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgLy8gdGVsbHMgdGhyZWUuanMgdGhhdCB0aGUgdGV4dHVyZSBuZWVkcyBhbiB1cGRhdGVcclxuICAgIHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyB0aGUgbm9kZSdzIGFwcGVhcmFuY2UgaW4gdGhlIHRleHR1cmUuXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX2Rpc3BsYXkudXBkYXRlRGlzcGxheSgpO1xyXG4gICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxlYXNlcyByZWZlcmVuY2VzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fZGlzcGxheS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLl9zY2VuZS5kaXNwb3NlKCk7XHJcblxyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9iaXVzLnJlZ2lzdGVyKCAnTm9kZVRleHR1cmUnLCBOb2RlVGV4dHVyZSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsT0FBTyxFQUFFQyxJQUFJLFFBQVEsNkJBQTZCO0FBQzNELE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBRWhDLGVBQWUsTUFBTUMsV0FBVyxTQUFTQyxLQUFLLENBQUNDLE9BQU8sQ0FBQztFQVE5Q0MsV0FBV0EsQ0FBRUMsSUFBVSxFQUFFQyxLQUFhLEVBQUVDLE1BQWMsRUFBRztJQUM5RCxNQUFNQyxLQUFLLEdBQUcsSUFBSVQsSUFBSSxDQUFFO01BQ3RCVSxRQUFRLEVBQUUsUUFBUTtNQUNsQkMsVUFBVSxFQUFFO0lBQ2QsQ0FBRSxDQUFDO0lBQ0hGLEtBQUssQ0FBQ0csUUFBUSxDQUFFTixJQUFLLENBQUM7SUFDdEIsTUFBTU8sT0FBTyxHQUFHLElBQUlkLE9BQU8sQ0FBRVUsS0FBSyxFQUFFO01BQ2xDRixLQUFLLEVBQUVBLEtBQUs7TUFDWkMsTUFBTSxFQUFFQSxNQUFNO01BQ2RNLGFBQWEsRUFBRTtJQUNqQixDQUFFLENBQUM7SUFDSEQsT0FBTyxDQUFDRSxhQUFhLENBQUMsQ0FBQztJQUV2QixNQUFNQyxNQUFNLEdBQUdILE9BQU8sQ0FBQ0ksWUFBWSxDQUFDQyxNQUFNLENBQUUsQ0FBQyxDQUFFLENBQUNGLE1BQU07SUFFdEQsS0FBSyxDQUFFQSxNQUFPLENBQUM7SUFFZixJQUFJLENBQUNHLFFBQVEsR0FBR04sT0FBTztJQUN2QixJQUFJLENBQUNPLE1BQU0sR0FBR1gsS0FBSztJQUNuQixJQUFJLENBQUNZLE1BQU0sR0FBR2QsS0FBSztJQUNuQixJQUFJLENBQUNlLE9BQU8sR0FBR2QsTUFBTTs7SUFFckI7SUFDQSxJQUFJLENBQUNlLFdBQVcsR0FBRyxJQUFJO0VBQ3pCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxNQUFNQSxDQUFBLEVBQVM7SUFDcEIsSUFBSSxDQUFDTCxRQUFRLENBQUNKLGFBQWEsQ0FBQyxDQUFDO0lBQzdCLElBQUksQ0FBQ1EsV0FBVyxHQUFHLElBQUk7RUFDekI7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCRSxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDTixRQUFRLENBQUNNLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLElBQUksQ0FBQ0wsTUFBTSxDQUFDSyxPQUFPLENBQUMsQ0FBQztJQUVyQixLQUFLLENBQUNBLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXhCLE1BQU0sQ0FBQ3lCLFFBQVEsQ0FBRSxhQUFhLEVBQUV4QixXQUFZLENBQUMifQ==