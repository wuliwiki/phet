// Copyright 2019-2022, University of Colorado Boulder

/**
 * Creates a quad for a given texture with a specific width and height, in the 3d space
 * with x: [0,width] and y: [0,height].
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import merge from '../../phet-core/js/merge.js';
import mobius from './mobius.js';
import Quad from './Quad.js';
export default class TextureQuad extends THREE.Mesh {
  constructor(texture, width, height, materialOptions) {
    const quadGeometry = new Quad(0, 0, 0, width, 0, 0, width, height, 0, 0, height, 0, 0, 0, 1);
    const basicMaterial = new THREE.MeshBasicMaterial(merge({
      transparent: true,
      depthTest: false,
      map: texture
    }, materialOptions));
    super(quadGeometry, basicMaterial);
    this.quadGeometry = quadGeometry;
    this.basicMaterial = basicMaterial;
    this.textureQuadWidth = width;
    this.textureQuadHeight = height;
  }
  updateTexture(texture, width = this.textureQuadWidth, height = this.textureQuadHeight) {
    this.basicMaterial.map = texture;
    this.basicMaterial.needsUpdate = true;
    if (width !== this.textureQuadWidth || height !== this.textureQuadHeight) {
      this.textureQuadWidth = width;
      this.textureQuadHeight = height;
      this.quadGeometry.set(0, 0, 0, width, 0, 0, width, height, 0, 0, height, 0, 0, 0, 1);
    }
  }

  /**
   * Releases references
   */
  dispose() {
    this.quadGeometry.dispose();
    this.basicMaterial.dispose();

    // @ts-expect-error
    super.dispose && super.dispose();
  }
}
mobius.register('TextureQuad', TextureQuad);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIm1vYml1cyIsIlF1YWQiLCJUZXh0dXJlUXVhZCIsIlRIUkVFIiwiTWVzaCIsImNvbnN0cnVjdG9yIiwidGV4dHVyZSIsIndpZHRoIiwiaGVpZ2h0IiwibWF0ZXJpYWxPcHRpb25zIiwicXVhZEdlb21ldHJ5IiwiYmFzaWNNYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwidHJhbnNwYXJlbnQiLCJkZXB0aFRlc3QiLCJtYXAiLCJ0ZXh0dXJlUXVhZFdpZHRoIiwidGV4dHVyZVF1YWRIZWlnaHQiLCJ1cGRhdGVUZXh0dXJlIiwibmVlZHNVcGRhdGUiLCJzZXQiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUZXh0dXJlUXVhZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcXVhZCBmb3IgYSBnaXZlbiB0ZXh0dXJlIHdpdGggYSBzcGVjaWZpYyB3aWR0aCBhbmQgaGVpZ2h0LCBpbiB0aGUgM2Qgc3BhY2VcclxuICogd2l0aCB4OiBbMCx3aWR0aF0gYW5kIHk6IFswLGhlaWdodF0uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IG1vYml1cyBmcm9tICcuL21vYml1cy5qcyc7XHJcbmltcG9ydCBRdWFkIGZyb20gJy4vUXVhZC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0dXJlUXVhZCBleHRlbmRzIFRIUkVFLk1lc2gge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHF1YWRHZW9tZXRyeTogUXVhZDtcclxuICBwcml2YXRlIHJlYWRvbmx5IGJhc2ljTWF0ZXJpYWw6IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsO1xyXG4gIHByaXZhdGUgdGV4dHVyZVF1YWRXaWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgdGV4dHVyZVF1YWRIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0ZXh0dXJlOiBUSFJFRS5UZXh0dXJlLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgbWF0ZXJpYWxPcHRpb25zPzogVEhSRUUuTWF0ZXJpYWxQYXJhbWV0ZXJzICkge1xyXG5cclxuICAgIGNvbnN0IHF1YWRHZW9tZXRyeSA9IG5ldyBRdWFkKFxyXG4gICAgICAwLCAwLCAwLFxyXG4gICAgICB3aWR0aCwgMCwgMCxcclxuICAgICAgd2lkdGgsIGhlaWdodCwgMCxcclxuICAgICAgMCwgaGVpZ2h0LCAwLFxyXG4gICAgICAwLCAwLCAxXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGJhc2ljTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIG1lcmdlKCB7XHJcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxyXG4gICAgICBkZXB0aFRlc3Q6IGZhbHNlLFxyXG4gICAgICBtYXA6IHRleHR1cmVcclxuICAgIH0sIG1hdGVyaWFsT3B0aW9ucyApICk7XHJcblxyXG4gICAgc3VwZXIoIHF1YWRHZW9tZXRyeSwgYmFzaWNNYXRlcmlhbCApO1xyXG5cclxuICAgIHRoaXMucXVhZEdlb21ldHJ5ID0gcXVhZEdlb21ldHJ5O1xyXG4gICAgdGhpcy5iYXNpY01hdGVyaWFsID0gYmFzaWNNYXRlcmlhbDtcclxuICAgIHRoaXMudGV4dHVyZVF1YWRXaWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy50ZXh0dXJlUXVhZEhlaWdodCA9IGhlaWdodDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVUZXh0dXJlKCB0ZXh0dXJlOiBUSFJFRS5UZXh0dXJlLCB3aWR0aDogbnVtYmVyID0gdGhpcy50ZXh0dXJlUXVhZFdpZHRoLCBoZWlnaHQ6IG51bWJlciA9IHRoaXMudGV4dHVyZVF1YWRIZWlnaHQgKTogdm9pZCB7XHJcbiAgICB0aGlzLmJhc2ljTWF0ZXJpYWwubWFwID0gdGV4dHVyZTtcclxuICAgIHRoaXMuYmFzaWNNYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG4gICAgaWYgKCB3aWR0aCAhPT0gdGhpcy50ZXh0dXJlUXVhZFdpZHRoIHx8IGhlaWdodCAhPT0gdGhpcy50ZXh0dXJlUXVhZEhlaWdodCApIHtcclxuICAgICAgdGhpcy50ZXh0dXJlUXVhZFdpZHRoID0gd2lkdGg7XHJcbiAgICAgIHRoaXMudGV4dHVyZVF1YWRIZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgICB0aGlzLnF1YWRHZW9tZXRyeS5zZXQoXHJcbiAgICAgICAgMCwgMCwgMCxcclxuICAgICAgICB3aWR0aCwgMCwgMCxcclxuICAgICAgICB3aWR0aCwgaGVpZ2h0LCAwLFxyXG4gICAgICAgIDAsIGhlaWdodCwgMCxcclxuICAgICAgICAwLCAwLCAxICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxlYXNlcyByZWZlcmVuY2VzXHJcbiAgICovXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnF1YWRHZW9tZXRyeS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmJhc2ljTWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIHN1cGVyLmRpc3Bvc2UgJiYgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9iaXVzLnJlZ2lzdGVyKCAnVGV4dHVyZVF1YWQnLCBUZXh0dXJlUXVhZCApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLElBQUksTUFBTSxXQUFXO0FBRTVCLGVBQWUsTUFBTUMsV0FBVyxTQUFTQyxLQUFLLENBQUNDLElBQUksQ0FBQztFQU8zQ0MsV0FBV0EsQ0FBRUMsT0FBc0IsRUFBRUMsS0FBYSxFQUFFQyxNQUFjLEVBQUVDLGVBQTBDLEVBQUc7SUFFdEgsTUFBTUMsWUFBWSxHQUFHLElBQUlULElBQUksQ0FDM0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ1BNLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNYQSxLQUFLLEVBQUVDLE1BQU0sRUFBRSxDQUFDLEVBQ2hCLENBQUMsRUFBRUEsTUFBTSxFQUFFLENBQUMsRUFDWixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQ1IsQ0FBQztJQUVELE1BQU1HLGFBQWEsR0FBRyxJQUFJUixLQUFLLENBQUNTLGlCQUFpQixDQUFFYixLQUFLLENBQUU7TUFDeERjLFdBQVcsRUFBRSxJQUFJO01BQ2pCQyxTQUFTLEVBQUUsS0FBSztNQUNoQkMsR0FBRyxFQUFFVDtJQUNQLENBQUMsRUFBRUcsZUFBZ0IsQ0FBRSxDQUFDO0lBRXRCLEtBQUssQ0FBRUMsWUFBWSxFQUFFQyxhQUFjLENBQUM7SUFFcEMsSUFBSSxDQUFDRCxZQUFZLEdBQUdBLFlBQVk7SUFDaEMsSUFBSSxDQUFDQyxhQUFhLEdBQUdBLGFBQWE7SUFDbEMsSUFBSSxDQUFDSyxnQkFBZ0IsR0FBR1QsS0FBSztJQUM3QixJQUFJLENBQUNVLGlCQUFpQixHQUFHVCxNQUFNO0VBQ2pDO0VBRU9VLGFBQWFBLENBQUVaLE9BQXNCLEVBQUVDLEtBQWEsR0FBRyxJQUFJLENBQUNTLGdCQUFnQixFQUFFUixNQUFjLEdBQUcsSUFBSSxDQUFDUyxpQkFBaUIsRUFBUztJQUNuSSxJQUFJLENBQUNOLGFBQWEsQ0FBQ0ksR0FBRyxHQUFHVCxPQUFPO0lBQ2hDLElBQUksQ0FBQ0ssYUFBYSxDQUFDUSxXQUFXLEdBQUcsSUFBSTtJQUVyQyxJQUFLWixLQUFLLEtBQUssSUFBSSxDQUFDUyxnQkFBZ0IsSUFBSVIsTUFBTSxLQUFLLElBQUksQ0FBQ1MsaUJBQWlCLEVBQUc7TUFDMUUsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBR1QsS0FBSztNQUM3QixJQUFJLENBQUNVLGlCQUFpQixHQUFHVCxNQUFNO01BRS9CLElBQUksQ0FBQ0UsWUFBWSxDQUFDVSxHQUFHLENBQ25CLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNQYixLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDWEEsS0FBSyxFQUFFQyxNQUFNLEVBQUUsQ0FBQyxFQUNoQixDQUFDLEVBQUVBLE1BQU0sRUFBRSxDQUFDLEVBQ1osQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFDYjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNTYSxPQUFPQSxDQUFBLEVBQVM7SUFDckIsSUFBSSxDQUFDWCxZQUFZLENBQUNXLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLElBQUksQ0FBQ1YsYUFBYSxDQUFDVSxPQUFPLENBQUMsQ0FBQzs7SUFFNUI7SUFDQSxLQUFLLENBQUNBLE9BQU8sSUFBSSxLQUFLLENBQUNBLE9BQU8sQ0FBQyxDQUFDO0VBQ2xDO0FBQ0Y7QUFFQXJCLE1BQU0sQ0FBQ3NCLFFBQVEsQ0FBRSxhQUFhLEVBQUVwQixXQUFZLENBQUMifQ==