// Copyright 2021-2022, University of Colorado Boulder

/**
 * NumberOfMassesControl is the control for setting number of masses.
 *
 * @author Franco Barpp Gomes {UTFPR}
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import merge from '../../../../phet-core/js/merge.js';
import NumberControl from '../../../../scenery-phet/js/NumberControl.js';
import { HBox, VBox } from '../../../../scenery/js/imports.js';
import normalModes from '../../normalModes.js';
import NormalModesStrings from '../../NormalModesStrings.js';
import NormalModesConstants from '../NormalModesConstants.js';
class NumberOfMassesControl extends NumberControl {
  /**
   * @param {NumberProperty} numberOfMassesProperty
   * @param {Object} [options]
   */
  constructor(numberOfMassesProperty, options) {
    const range = numberOfMassesProperty.range;
    options = merge({
      layoutFunction: createLayoutFunction(),
      includeArrowButtons: false,
      sliderOptions: {
        trackSize: new Dimension2(150, 3),
        thumbSize: new Dimension2(11, 19),
        thumbTouchAreaXDilation: 12,
        thumbTouchAreaYDilation: 15,
        majorTickLength: 10,
        minorTickLength: 5,
        majorTicks: [{
          value: range.min,
          label: ''
        }, {
          value: range.max,
          label: ''
        }],
        minorTickSpacing: range.min
      },
      titleNodeOptions: {
        font: NormalModesConstants.GENERAL_FONT
      },
      numberDisplayOptions: {
        textOptions: {
          font: NormalModesConstants.GENERAL_FONT
        }
      }
    }, options);
    super(NormalModesStrings.numberOfMasses, numberOfMassesProperty, range, options);
  }
}

/**
 * Creates the option.layoutFunction for this NumberOfMassesControl.
 * @param {Object} [options]
 * @returns {function}
 */
function createLayoutFunction(options) {
  options = merge({
    align: 'center',
    // {string} horizontal alignment of rows, 'left'|'right'|'center'
    titleXSpacing: 5,
    // {number} horizontal spacing between title and number
    arrowButtonsXSpacing: 15,
    // {number} horizontal spacing between arrow buttons and slider
    ySpacing: 8 // {number} vertical spacing between rows
  }, options);
  return (titleNode, numberDisplay, slider, leftArrowButton, rightArrowButton) => {
    const includeArrowButtons = !!leftArrowButton; // if there aren't arrow buttons, then exclude them
    return new VBox({
      align: options.align,
      spacing: options.ySpacing,
      excludeInvisibleChildrenFromBounds: false,
      children: [new HBox({
        spacing: options.titleXSpacing,
        children: [titleNode, numberDisplay],
        excludeInvisibleChildrenFromBounds: false
      }), new HBox({
        spacing: options.arrowButtonsXSpacing,
        resize: false,
        // prevent slider from causing a resize when thumb is at min or max
        children: !includeArrowButtons ? [slider] : [leftArrowButton, slider, rightArrowButton],
        excludeInvisibleChildrenFromBounds: false
      })]
    });
  };
}
normalModes.register('NumberOfMassesControl', NumberOfMassesControl);
export default NumberOfMassesControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwibWVyZ2UiLCJOdW1iZXJDb250cm9sIiwiSEJveCIsIlZCb3giLCJub3JtYWxNb2RlcyIsIk5vcm1hbE1vZGVzU3RyaW5ncyIsIk5vcm1hbE1vZGVzQ29uc3RhbnRzIiwiTnVtYmVyT2ZNYXNzZXNDb250cm9sIiwiY29uc3RydWN0b3IiLCJudW1iZXJPZk1hc3Nlc1Byb3BlcnR5Iiwib3B0aW9ucyIsInJhbmdlIiwibGF5b3V0RnVuY3Rpb24iLCJjcmVhdGVMYXlvdXRGdW5jdGlvbiIsImluY2x1ZGVBcnJvd0J1dHRvbnMiLCJzbGlkZXJPcHRpb25zIiwidHJhY2tTaXplIiwidGh1bWJTaXplIiwidGh1bWJUb3VjaEFyZWFYRGlsYXRpb24iLCJ0aHVtYlRvdWNoQXJlYVlEaWxhdGlvbiIsIm1ham9yVGlja0xlbmd0aCIsIm1pbm9yVGlja0xlbmd0aCIsIm1ham9yVGlja3MiLCJ2YWx1ZSIsIm1pbiIsImxhYmVsIiwibWF4IiwibWlub3JUaWNrU3BhY2luZyIsInRpdGxlTm9kZU9wdGlvbnMiLCJmb250IiwiR0VORVJBTF9GT05UIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJ0ZXh0T3B0aW9ucyIsIm51bWJlck9mTWFzc2VzIiwiYWxpZ24iLCJ0aXRsZVhTcGFjaW5nIiwiYXJyb3dCdXR0b25zWFNwYWNpbmciLCJ5U3BhY2luZyIsInRpdGxlTm9kZSIsIm51bWJlckRpc3BsYXkiLCJzbGlkZXIiLCJsZWZ0QXJyb3dCdXR0b24iLCJyaWdodEFycm93QnV0dG9uIiwic3BhY2luZyIsImV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHMiLCJjaGlsZHJlbiIsInJlc2l6ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVtYmVyT2ZNYXNzZXNDb250cm9sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE51bWJlck9mTWFzc2VzQ29udHJvbCBpcyB0aGUgY29udHJvbCBmb3Igc2V0dGluZyBudW1iZXIgb2YgbWFzc2VzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEZyYW5jbyBCYXJwcCBHb21lcyB7VVRGUFJ9XHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL051bWJlckNvbnRyb2wuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG5vcm1hbE1vZGVzIGZyb20gJy4uLy4uL25vcm1hbE1vZGVzLmpzJztcclxuaW1wb3J0IE5vcm1hbE1vZGVzU3RyaW5ncyBmcm9tICcuLi8uLi9Ob3JtYWxNb2Rlc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgTm9ybWFsTW9kZXNDb25zdGFudHMgZnJvbSAnLi4vTm9ybWFsTW9kZXNDb25zdGFudHMuanMnO1xyXG5cclxuY2xhc3MgTnVtYmVyT2ZNYXNzZXNDb250cm9sIGV4dGVuZHMgTnVtYmVyQ29udHJvbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyUHJvcGVydHl9IG51bWJlck9mTWFzc2VzUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG51bWJlck9mTWFzc2VzUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgcmFuZ2UgPSBudW1iZXJPZk1hc3Nlc1Byb3BlcnR5LnJhbmdlO1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBsYXlvdXRGdW5jdGlvbjogY3JlYXRlTGF5b3V0RnVuY3Rpb24oKSxcclxuICAgICAgaW5jbHVkZUFycm93QnV0dG9uczogZmFsc2UsXHJcbiAgICAgIHNsaWRlck9wdGlvbnM6IHtcclxuICAgICAgICB0cmFja1NpemU6IG5ldyBEaW1lbnNpb24yKCAxNTAsIDMgKSxcclxuICAgICAgICB0aHVtYlNpemU6IG5ldyBEaW1lbnNpb24yKCAxMSwgMTkgKSxcclxuICAgICAgICB0aHVtYlRvdWNoQXJlYVhEaWxhdGlvbjogMTIsXHJcbiAgICAgICAgdGh1bWJUb3VjaEFyZWFZRGlsYXRpb246IDE1LFxyXG4gICAgICAgIG1ham9yVGlja0xlbmd0aDogMTAsXHJcbiAgICAgICAgbWlub3JUaWNrTGVuZ3RoOiA1LFxyXG4gICAgICAgIG1ham9yVGlja3M6IFtcclxuICAgICAgICAgIHsgdmFsdWU6IHJhbmdlLm1pbiwgbGFiZWw6ICcnIH0sXHJcbiAgICAgICAgICB7IHZhbHVlOiByYW5nZS5tYXgsIGxhYmVsOiAnJyB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBtaW5vclRpY2tTcGFjaW5nOiByYW5nZS5taW5cclxuICAgICAgfSxcclxuICAgICAgdGl0bGVOb2RlT3B0aW9uczoge1xyXG4gICAgICAgIGZvbnQ6IE5vcm1hbE1vZGVzQ29uc3RhbnRzLkdFTkVSQUxfRk9OVFxyXG4gICAgICB9LFxyXG4gICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgIHRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgICBmb250OiBOb3JtYWxNb2Rlc0NvbnN0YW50cy5HRU5FUkFMX0ZPTlRcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggTm9ybWFsTW9kZXNTdHJpbmdzLm51bWJlck9mTWFzc2VzLCBudW1iZXJPZk1hc3Nlc1Byb3BlcnR5LCByYW5nZSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgdGhlIG9wdGlvbi5sYXlvdXRGdW5jdGlvbiBmb3IgdGhpcyBOdW1iZXJPZk1hc3Nlc0NvbnRyb2wuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICogQHJldHVybnMge2Z1bmN0aW9ufVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlTGF5b3V0RnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblxyXG4gIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgYWxpZ246ICdjZW50ZXInLCAvLyB7c3RyaW5nfSBob3Jpem9udGFsIGFsaWdubWVudCBvZiByb3dzLCAnbGVmdCd8J3JpZ2h0J3wnY2VudGVyJ1xyXG4gICAgdGl0bGVYU3BhY2luZzogNSwgLy8ge251bWJlcn0gaG9yaXpvbnRhbCBzcGFjaW5nIGJldHdlZW4gdGl0bGUgYW5kIG51bWJlclxyXG4gICAgYXJyb3dCdXR0b25zWFNwYWNpbmc6IDE1LCAvLyB7bnVtYmVyfSBob3Jpem9udGFsIHNwYWNpbmcgYmV0d2VlbiBhcnJvdyBidXR0b25zIGFuZCBzbGlkZXJcclxuICAgIHlTcGFjaW5nOiA4IC8vIHtudW1iZXJ9IHZlcnRpY2FsIHNwYWNpbmcgYmV0d2VlbiByb3dzXHJcbiAgfSwgb3B0aW9ucyApO1xyXG5cclxuICByZXR1cm4gKCB0aXRsZU5vZGUsIG51bWJlckRpc3BsYXksIHNsaWRlciwgbGVmdEFycm93QnV0dG9uLCByaWdodEFycm93QnV0dG9uICkgPT4ge1xyXG4gICAgY29uc3QgaW5jbHVkZUFycm93QnV0dG9ucyA9ICEhbGVmdEFycm93QnV0dG9uOyAvLyBpZiB0aGVyZSBhcmVuJ3QgYXJyb3cgYnV0dG9ucywgdGhlbiBleGNsdWRlIHRoZW1cclxuICAgIHJldHVybiBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogb3B0aW9ucy5hbGlnbixcclxuICAgICAgc3BhY2luZzogb3B0aW9ucy55U3BhY2luZyxcclxuICAgICAgZXhjbHVkZUludmlzaWJsZUNoaWxkcmVuRnJvbUJvdW5kczogZmFsc2UsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IEhCb3goIHtcclxuICAgICAgICAgIHNwYWNpbmc6IG9wdGlvbnMudGl0bGVYU3BhY2luZyxcclxuICAgICAgICAgIGNoaWxkcmVuOiBbIHRpdGxlTm9kZSwgbnVtYmVyRGlzcGxheSBdLFxyXG4gICAgICAgICAgZXhjbHVkZUludmlzaWJsZUNoaWxkcmVuRnJvbUJvdW5kczogZmFsc2VcclxuICAgICAgICB9ICksXHJcbiAgICAgICAgbmV3IEhCb3goIHtcclxuICAgICAgICAgIHNwYWNpbmc6IG9wdGlvbnMuYXJyb3dCdXR0b25zWFNwYWNpbmcsXHJcbiAgICAgICAgICByZXNpemU6IGZhbHNlLCAvLyBwcmV2ZW50IHNsaWRlciBmcm9tIGNhdXNpbmcgYSByZXNpemUgd2hlbiB0aHVtYiBpcyBhdCBtaW4gb3IgbWF4XHJcbiAgICAgICAgICBjaGlsZHJlbjogIWluY2x1ZGVBcnJvd0J1dHRvbnMgPyBbIHNsaWRlciBdIDogW1xyXG4gICAgICAgICAgICBsZWZ0QXJyb3dCdXR0b24sXHJcbiAgICAgICAgICAgIHNsaWRlcixcclxuICAgICAgICAgICAgcmlnaHRBcnJvd0J1dHRvblxyXG4gICAgICAgICAgXSxcclxuICAgICAgICAgIGV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHM6IGZhbHNlXHJcbiAgICAgICAgfSApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuICB9O1xyXG59XHJcblxyXG5ub3JtYWxNb2Rlcy5yZWdpc3RlciggJ051bWJlck9mTWFzc2VzQ29udHJvbCcsIE51bWJlck9mTWFzc2VzQ29udHJvbCApO1xyXG5leHBvcnQgZGVmYXVsdCBOdW1iZXJPZk1hc3Nlc0NvbnRyb2w7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyxLQUFLLE1BQU0s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