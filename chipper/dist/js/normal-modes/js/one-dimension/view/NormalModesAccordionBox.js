// Copyright 2020-2022, University of Colorado Boulder

/**
 * NormalModesAccordionBox is the accordion box titled 'Normal Modes'. It shows a plot for each normal mode.
 *
 * @author Franco Barpp Gomes (UTFPR)
 * @author Thiago de Mendon√ßa Mildemberger (UTFPR)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import merge from '../../../../phet-core/js/merge.js';
import { HBox, HStrut, Text, VBox } from '../../../../scenery/js/imports.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import NormalModesConstants from '../../common/NormalModesConstants.js';
import normalModes from '../../normalModes.js';
import NormalModesStrings from '../../NormalModesStrings.js';
import ModeGraphCanvasNode from './ModeGraphCanvasNode.js';
const normalModesTitleString = NormalModesStrings['normal-modes'].title;
class NormalModesAccordionBox extends AccordionBox {
  /**
   * @param {OneDimensionModel} model
   * @param {Object} [options]
   */
  constructor(model, options) {
    // from Vector Addition
    const PANEL_CORNER_RADIUS = 5;
    const PANEL_X_MARGIN = 7;
    const PANEL_Y_MARGIN = 8;
    const titleNode = new Text(normalModesTitleString, {
      font: NormalModesConstants.CONTROL_FONT
    });
    options = merge({
      resize: true,
      cornerRadius: PANEL_CORNER_RADIUS,
      contentXMargin: 15,
      contentYMargin: PANEL_Y_MARGIN,
      contentXSpacing: PANEL_X_MARGIN,
      contentYSpacing: 1,
      buttonXMargin: PANEL_X_MARGIN,
      buttonYMargin: PANEL_Y_MARGIN,
      titleYMargin: PANEL_Y_MARGIN,
      titleXMargin: PANEL_X_MARGIN,
      titleXSpacing: PANEL_X_MARGIN,
      titleAlignX: 'center',
      expandCollapseButtonOptions: {
        sideLength: 18,
        touchAreaXDilation: 6,
        touchAreaYDilation: 6
      },
      titleNode: titleNode,
      showTitleWhenExpanded: true
    }, options);
    const normalModeGraphs = new Array(NormalModesConstants.MAX_MASSES_PER_ROW);
    const normalModeGraphsAndNumbers = new Array(NormalModesConstants.MAX_MASSES_PER_ROW);
    for (let i = 0; i < normalModeGraphs.length; i++) {
      normalModeGraphs[i] = new ModeGraphCanvasNode(model, i);
      const normalModeNumber = new Text(i + 1, {
        font: NormalModesConstants.MODE_NUMBER_FONT
      });
      normalModeGraphsAndNumbers[i] = new HBox({
        spacing: 7,
        children: [normalModeNumber, normalModeGraphs[i]]
      });

      // dispose is unnecessary, exists for the lifetime of the sim
      Multilink.multilink([model.timeProperty, model.modeAmplitudeProperties[i], model.modePhaseProperties[i]], (time, amplitude, phase) => {
        normalModeGraphs[i].update();
      });
    }
    const avoidResize = new HStrut(normalModeGraphsAndNumbers[normalModeGraphsAndNumbers.length - 1].width);
    const graphContainer = new VBox({
      spacing: 9,
      align: 'right',
      children: normalModeGraphsAndNumbers
    });
    super(graphContainer, options);

    // dispose is unnecessary, exists for the lifetime of the sim
    model.numberOfMassesProperty.link(numberOfMasses => {
      graphContainer.children = normalModeGraphsAndNumbers.slice(0, numberOfMasses);
      graphContainer.addChild(avoidResize);
      normalModeGraphs.forEach(graph => graph.update());
      this.layout();
    });
  }
}
normalModes.register('NormalModesAccordionBox', NormalModesAccordionBox);
export default NormalModesAccordionBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJtZXJnZSIsIkhCb3giLCJIU3RydXQiLCJUZXh0IiwiVkJveCIsIkFjY29yZGlvbkJveCIsIk5vcm1hbE1vZGVzQ29uc3RhbnRzIiwibm9ybWFsTW9kZXMiLCJOb3JtYWxNb2Rlc1N0cmluZ3MiLCJNb2RlR3JhcGhDYW52YXNOb2RlIiwibm9ybWFsTW9kZXNUaXRsZVN0cmluZyIsInRpdGxlIiwiTm9ybWFsTW9kZXNBY2NvcmRpb25Cb3giLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwib3B0aW9ucyIsIlBBTkVMX0NPUk5FUl9SQURJVVMiLCJQQU5FTF9YX01BUkdJTiIsIlBBTkVMX1lfTUFSR0lOIiwidGl0bGVOb2RlIiwiZm9udCIsIkNPTlRST0xfRk9OVCIsInJlc2l6ZSIsImNvcm5lclJhZGl1cyIsImNvbnRlbnRYTWFyZ2luIiwiY29udGVudFlNYXJnaW4iLCJjb250ZW50WFNwYWNpbmciLCJjb250ZW50WVNwYWNpbmciLCJidXR0b25YTWFyZ2luIiwiYnV0dG9uWU1hcmdpbiIsInRpdGxlWU1hcmdpbiIsInRpdGxlWE1hcmdpbiIsInRpdGxlWFNwYWNpbmciLCJ0aXRsZUFsaWduWCIsImV4cGFuZENvbGxhcHNlQnV0dG9uT3B0aW9ucyIsInNpZGVMZW5ndGgiLCJ0b3VjaEFyZWFYRGlsYXRpb24iLCJ0b3VjaEFyZWFZRGlsYXRpb24iLCJzaG93VGl0bGVXaGVuRXhwYW5kZWQiLCJub3JtYWxNb2RlR3JhcGhzIiwiQXJyYXkiLCJNQVhfTUFTU0VTX1BFUl9ST1ciLCJub3JtYWxNb2RlR3JhcGhzQW5kTnVtYmVycyIsImkiLCJsZW5ndGgiLCJub3JtYWxNb2RlTnVtYmVyIiwiTU9ERV9OVU1CRVJfRk9OVCIsInNwYWNpbmciLCJjaGlsZHJlbiIsIm11bHRpbGluayIsInRpbWVQcm9wZXJ0eSIsIm1vZGVBbXBsaXR1ZGVQcm9wZXJ0aWVzIiwibW9kZVBoYXNlUHJvcGVydGllcyIsInRpbWUiLCJhbXBsaXR1ZGUiLCJwaGFzZSIsInVwZGF0ZSIsImF2b2lkUmVzaXplIiwid2lkdGgiLCJncmFwaENvbnRhaW5lciIsImFsaWduIiwibnVtYmVyT2ZNYXNzZXNQcm9wZXJ0eSIsImxpbmsiLCJudW1iZXJPZk1hc3NlcyIsInNsaWNlIiwiYWRkQ2hpbGQiLCJmb3JFYWNoIiwiZ3JhcGgiLCJsYXlvdXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk5vcm1hbE1vZGVzQWNjb3JkaW9uQm94LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vcm1hbE1vZGVzQWNjb3JkaW9uQm94IGlzIHRoZSBhY2NvcmRpb24gYm94IHRpdGxlZCAnTm9ybWFsIE1vZGVzJy4gSXQgc2hvd3MgYSBwbG90IGZvciBlYWNoIG5vcm1hbCBtb2RlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEZyYW5jbyBCYXJwcCBHb21lcyAoVVRGUFIpXHJcbiAqIEBhdXRob3IgVGhpYWdvIGRlIE1lbmRvbsOnYSBNaWxkZW1iZXJnZXIgKFVURlBSKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgSEJveCwgSFN0cnV0LCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEFjY29yZGlvbkJveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IE5vcm1hbE1vZGVzQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9Ob3JtYWxNb2Rlc0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBub3JtYWxNb2RlcyBmcm9tICcuLi8uLi9ub3JtYWxNb2Rlcy5qcyc7XHJcbmltcG9ydCBOb3JtYWxNb2Rlc1N0cmluZ3MgZnJvbSAnLi4vLi4vTm9ybWFsTW9kZXNTdHJpbmdzLmpzJztcclxuaW1wb3J0IE1vZGVHcmFwaENhbnZhc05vZGUgZnJvbSAnLi9Nb2RlR3JhcGhDYW52YXNOb2RlLmpzJztcclxuXHJcbmNvbnN0IG5vcm1hbE1vZGVzVGl0bGVTdHJpbmcgPSBOb3JtYWxNb2Rlc1N0cmluZ3NbICdub3JtYWwtbW9kZXMnIF0udGl0bGU7XHJcblxyXG5jbGFzcyBOb3JtYWxNb2Rlc0FjY29yZGlvbkJveCBleHRlbmRzIEFjY29yZGlvbkJveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T25lRGltZW5zaW9uTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgb3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBmcm9tIFZlY3RvciBBZGRpdGlvblxyXG4gICAgY29uc3QgUEFORUxfQ09STkVSX1JBRElVUyA9IDU7XHJcbiAgICBjb25zdCBQQU5FTF9YX01BUkdJTiA9IDc7XHJcbiAgICBjb25zdCBQQU5FTF9ZX01BUkdJTiA9IDg7XHJcblxyXG4gICAgY29uc3QgdGl0bGVOb2RlID0gbmV3IFRleHQoIG5vcm1hbE1vZGVzVGl0bGVTdHJpbmcsIHsgZm9udDogTm9ybWFsTW9kZXNDb25zdGFudHMuQ09OVFJPTF9GT05UIH0gKTtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgcmVzaXplOiB0cnVlLFxyXG5cclxuICAgICAgY29ybmVyUmFkaXVzOiBQQU5FTF9DT1JORVJfUkFESVVTLFxyXG4gICAgICBjb250ZW50WE1hcmdpbjogMTUsXHJcbiAgICAgIGNvbnRlbnRZTWFyZ2luOiBQQU5FTF9ZX01BUkdJTixcclxuICAgICAgY29udGVudFhTcGFjaW5nOiBQQU5FTF9YX01BUkdJTixcclxuICAgICAgY29udGVudFlTcGFjaW5nOiAxLFxyXG4gICAgICBidXR0b25YTWFyZ2luOiBQQU5FTF9YX01BUkdJTixcclxuICAgICAgYnV0dG9uWU1hcmdpbjogUEFORUxfWV9NQVJHSU4sXHJcbiAgICAgIHRpdGxlWU1hcmdpbjogUEFORUxfWV9NQVJHSU4sXHJcbiAgICAgIHRpdGxlWE1hcmdpbjogUEFORUxfWF9NQVJHSU4sXHJcbiAgICAgIHRpdGxlWFNwYWNpbmc6IFBBTkVMX1hfTUFSR0lOLFxyXG4gICAgICB0aXRsZUFsaWduWDogJ2NlbnRlcicsXHJcbiAgICAgIGV4cGFuZENvbGxhcHNlQnV0dG9uT3B0aW9uczoge1xyXG4gICAgICAgIHNpZGVMZW5ndGg6IDE4LFxyXG4gICAgICAgIHRvdWNoQXJlYVhEaWxhdGlvbjogNixcclxuICAgICAgICB0b3VjaEFyZWFZRGlsYXRpb246IDZcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHRpdGxlTm9kZTogdGl0bGVOb2RlLFxyXG4gICAgICBzaG93VGl0bGVXaGVuRXhwYW5kZWQ6IHRydWVcclxuXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3Qgbm9ybWFsTW9kZUdyYXBocyA9IG5ldyBBcnJheSggTm9ybWFsTW9kZXNDb25zdGFudHMuTUFYX01BU1NFU19QRVJfUk9XICk7XHJcbiAgICBjb25zdCBub3JtYWxNb2RlR3JhcGhzQW5kTnVtYmVycyA9IG5ldyBBcnJheSggTm9ybWFsTW9kZXNDb25zdGFudHMuTUFYX01BU1NFU19QRVJfUk9XICk7XHJcblxyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbm9ybWFsTW9kZUdyYXBocy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgbm9ybWFsTW9kZUdyYXBoc1sgaSBdID0gbmV3IE1vZGVHcmFwaENhbnZhc05vZGUoIG1vZGVsLCBpICk7XHJcbiAgICAgIGNvbnN0IG5vcm1hbE1vZGVOdW1iZXIgPSBuZXcgVGV4dCggaSArIDEsIHsgZm9udDogTm9ybWFsTW9kZXNDb25zdGFudHMuTU9ERV9OVU1CRVJfRk9OVCB9ICk7XHJcbiAgICAgIG5vcm1hbE1vZGVHcmFwaHNBbmROdW1iZXJzWyBpIF0gPSBuZXcgSEJveCgge1xyXG4gICAgICAgIHNwYWNpbmc6IDcsXHJcbiAgICAgICAgY2hpbGRyZW46IFsgbm9ybWFsTW9kZU51bWJlciwgbm9ybWFsTW9kZUdyYXBoc1sgaSBdIF1cclxuICAgICAgfSApO1xyXG5cclxuICAgICAgLy8gZGlzcG9zZSBpcyB1bm5lY2Vzc2FyeSwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbVxyXG4gICAgICBNdWx0aWxpbmsubXVsdGlsaW5rKFxyXG4gICAgICAgIFsgbW9kZWwudGltZVByb3BlcnR5LCBtb2RlbC5tb2RlQW1wbGl0dWRlUHJvcGVydGllc1sgaSBdLCBtb2RlbC5tb2RlUGhhc2VQcm9wZXJ0aWVzWyBpIF0gXSxcclxuICAgICAgICAoIHRpbWUsIGFtcGxpdHVkZSwgcGhhc2UgKSA9PiB7XHJcbiAgICAgICAgICBub3JtYWxNb2RlR3JhcGhzWyBpIF0udXBkYXRlKCk7XHJcbiAgICAgICAgfSApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF2b2lkUmVzaXplID0gbmV3IEhTdHJ1dCggbm9ybWFsTW9kZUdyYXBoc0FuZE51bWJlcnNbIG5vcm1hbE1vZGVHcmFwaHNBbmROdW1iZXJzLmxlbmd0aCAtIDEgXS53aWR0aCApO1xyXG5cclxuICAgIGNvbnN0IGdyYXBoQ29udGFpbmVyID0gbmV3IFZCb3goIHtcclxuICAgICAgc3BhY2luZzogOSxcclxuICAgICAgYWxpZ246ICdyaWdodCcsXHJcbiAgICAgIGNoaWxkcmVuOiBub3JtYWxNb2RlR3JhcGhzQW5kTnVtYmVyc1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBncmFwaENvbnRhaW5lciwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGRpc3Bvc2UgaXMgdW5uZWNlc3NhcnksIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW1cclxuICAgIG1vZGVsLm51bWJlck9mTWFzc2VzUHJvcGVydHkubGluayggbnVtYmVyT2ZNYXNzZXMgPT4ge1xyXG4gICAgICBncmFwaENvbnRhaW5lci5jaGlsZHJlbiA9IG5vcm1hbE1vZGVHcmFwaHNBbmROdW1iZXJzLnNsaWNlKCAwLCBudW1iZXJPZk1hc3NlcyApO1xyXG4gICAgICBncmFwaENvbnRhaW5lci5hZGRDaGlsZCggYXZvaWRSZXNpemUgKTtcclxuICAgICAgbm9ybWFsTW9kZUdyYXBocy5mb3JFYWNoKCBncmFwaCA9PiBncmFwaC51cGRhdGUoKSApO1xyXG4gICAgICB0aGlzLmxheW91dCgpO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxubm9ybWFsTW9kZXMucmVnaXN0ZXIoICdOb3JtYWxNb2Rlc0FjY29yZGlvbkJveCcsIE5vcm1hbE1vZGVzQWNjb3JkaW9uQm94ICk7XHJcbmV4cG9ydCBkZWZhdWx0IE5vcm1hbE1vZGVzQWNjb3JkaW9uQm94OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxrQ0FBa0M7QUFDeEQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzVFLE9BQU9DLFlBQVksTUFBTSxvQ0FBb0M7QUFDN0QsT0FBT0Msb0JBQW9CLE1BQU0sc0NBQXNDO0FBQ3ZFLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQUUxRCxNQUFNQyxzQkFBc0IsR0FBR0Ysa0JBQWtCLENBQUUsY0FBYyxDQUFFLENBQUNHLEtBQUs7QUFFekUsTUFBTUMsdUJBQXVCLFNBQVNQLFlBQVksQ0FBQztFQUVqRDtBQUNGO0FBQ0E7QUFDQTtFQUNFUSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRztJQUU1QjtJQUNBLE1BQU1DLG1CQUFtQixHQUFHLENB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