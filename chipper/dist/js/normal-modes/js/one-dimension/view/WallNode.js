// Copyright 2020-2022, University of Colorado Boulder

/**
 * WallNode is the view for the stationary masses at each end in the 'One Dimension' Screen.
 *
 * @author Thiago de MendonÃ§a Mildemberger (UTFPR)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import NormalModesColors from '../../common/NormalModesColors.js';
import normalModes from '../../normalModes.js';
class WallNode extends Node {
  /**
   * @param {Mass} mass
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Tandem} tandem
   */
  constructor(mass, modelViewTransform, tandem) {
    super({
      cursor: 'pointer'
    });
    const rect = new Rectangle(merge({
      boundsMethod: 'unstroked',
      lineWidth: 2,
      rectWidth: 6,
      rectHeight: 80,
      cornerRadius: 2
    }, NormalModesColors.WALL_COLORS));
    this.addChild(rect);

    // dispose is unnecessary, the WallNode and the dependencies exist for the lifetime of the sim
    Multilink.multilink([mass.equilibriumPositionProperty, mass.displacementProperty], (massPosition, massDisplacement) => {
      this.translation = modelViewTransform.modelToViewPosition(massPosition.plus(massDisplacement)).subtract(new Vector2(rect.rectWidth / 2, rect.rectHeight / 2));
    });
  }
}
normalModes.register('WallNode', WallNode);
export default WallNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJWZWN0b3IyIiwibWVyZ2UiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiTm9ybWFsTW9kZXNDb2xvcnMiLCJub3JtYWxNb2RlcyIsIldhbGxOb2RlIiwiY29uc3RydWN0b3IiLCJtYXNzIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwidGFuZGVtIiwiY3Vyc29yIiwicmVjdCIsImJvdW5kc01ldGhvZCIsImxpbmVXaWR0aCIsInJlY3RXaWR0aCIsInJlY3RIZWlnaHQiLCJjb3JuZXJSYWRpdXMiLCJXQUxMX0NPTE9SUyIsImFkZENoaWxkIiwibXVsdGlsaW5rIiwiZXF1aWxpYnJpdW1Qb3NpdGlvblByb3BlcnR5IiwiZGlzcGxhY2VtZW50UHJvcGVydHkiLCJtYXNzUG9zaXRpb24iLCJtYXNzRGlzcGxhY2VtZW50IiwidHJhbnNsYXRpb24iLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwicGx1cyIsInN1YnRyYWN0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXYWxsTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXYWxsTm9kZSBpcyB0aGUgdmlldyBmb3IgdGhlIHN0YXRpb25hcnkgbWFzc2VzIGF0IGVhY2ggZW5kIGluIHRoZSAnT25lIERpbWVuc2lvbicgU2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFRoaWFnbyBkZSBNZW5kb27Dp2EgTWlsZGVtYmVyZ2VyIChVVEZQUilcclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IE5vcm1hbE1vZGVzQ29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9Ob3JtYWxNb2Rlc0NvbG9ycy5qcyc7XHJcbmltcG9ydCBub3JtYWxNb2RlcyBmcm9tICcuLi8uLi9ub3JtYWxNb2Rlcy5qcyc7XHJcblxyXG5jbGFzcyBXYWxsTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge01hc3N9IG1hc3NcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbWFzcywgbW9kZWxWaWV3VHJhbnNmb3JtLCB0YW5kZW0gKSB7XHJcbiAgICBzdXBlciggeyBjdXJzb3I6ICdwb2ludGVyJyB9ICk7XHJcblxyXG4gICAgY29uc3QgcmVjdCA9IG5ldyBSZWN0YW5nbGUoIG1lcmdlKCB7XHJcbiAgICAgIGJvdW5kc01ldGhvZDogJ3Vuc3Ryb2tlZCcsXHJcbiAgICAgIGxpbmVXaWR0aDogMixcclxuICAgICAgcmVjdFdpZHRoOiA2LFxyXG4gICAgICByZWN0SGVpZ2h0OiA4MCxcclxuICAgICAgY29ybmVyUmFkaXVzOiAyXHJcbiAgICB9LCBOb3JtYWxNb2Rlc0NvbG9ycy5XQUxMX0NPTE9SUyApICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCByZWN0ICk7XHJcblxyXG4gICAgLy8gZGlzcG9zZSBpcyB1bm5lY2Vzc2FyeSwgdGhlIFdhbGxOb2RlIGFuZCB0aGUgZGVwZW5kZW5jaWVzIGV4aXN0IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbVxyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayhcclxuICAgICAgWyBtYXNzLmVxdWlsaWJyaXVtUG9zaXRpb25Qcm9wZXJ0eSwgbWFzcy5kaXNwbGFjZW1lbnRQcm9wZXJ0eSBdLFxyXG4gICAgICAoIG1hc3NQb3NpdGlvbiwgbWFzc0Rpc3BsYWNlbWVudCApID0+IHtcclxuICAgICAgICB0aGlzLnRyYW5zbGF0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIG1hc3NQb3NpdGlvbi5wbHVzKCBtYXNzRGlzcGxhY2VtZW50ICkgKVxyXG4gICAgICAgICAgLnN1YnRyYWN0KCBuZXcgVmVjdG9yMiggcmVjdC5yZWN0V2lkdGggLyAyLCByZWN0LnJlY3RIZWlnaHQgLyAyICkgKTtcclxuICAgICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxubm9ybWFsTW9kZXMucmVnaXN0ZXIoICdXYWxsTm9kZScsIFdhbGxOb2RlICk7XHJcbmV4cG9ydCBkZWZhdWx0IFdhbGxOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sa0NBQWtDO0FBQ3hELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLEVBQUVDLFNBQVMsUUFBUSxtQ0FBbUM7QUFDbkUsT0FBT0MsaUJBQWlCLE1BQU0sbUNBQW1DO0FBQ2pFLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFFOUMsTUFBTUMsUUFBUSxTQUFTSixJQUFJLENBQUM7RUFFMUI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxJQUFJLEVBQUVDLGtCQUFrQixFQUFFQyxNQUFNLEVBQUc7SUFDOUMsS0FBSyxDQUFFO01BQUVDLE1BQU0sRUFBRTtJQUFVLENBQUUsQ0FBQztJQUU5QixNQUFNQyxJQUFJLEdBQUcsSUFBSVQsU0FBUyxDQUFFRixLQUFLLENBQUU7TUFDakNZLFlBQVksRUFBRSxXQUFXO01BQ3pCQyxTQUFTLEVBQUUsQ0FBQztNQUNaQyxTQUFTLEVBQUUsQ0FBQztNQUNaQyxVQUFVLEVBQUUsRUFBRTtNQUNkQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxFQUFFYixpQkFBaUIsQ0FBQ2MsV0FBWSxDQUFFLENBQUM7SUFDcEMsSUFBSSxDQUFDQyxRQUFRLENBQUVQLElBQUssQ0FBQzs7SUFFckI7SUFDQWIsU0FBUyxDQUFDcUIsU0FBUyxDQUNqQixDQUFFWixJQUFJLENBQUNhLDJCQUEyQixFQUFFYixJQUFJLENBQUNjLG9CQUFvQixDQUFFLEVBQy9ELENBQUVDLFlBQVksRUFBRUMsZ0JBQWdCLEtBQU07TUFDcEMsSUFBSSxDQUFDQyxXQUFXLEdBQUdoQixrQkFBa0IsQ0FBQ2lCLG1CQUFtQixDQUFFSCxZQUFZLENBQUNJLElBQUksQ0FBRUgsZ0JBQWlCLENBQUUsQ0FBQyxDQUMvRkksUUFBUSxDQUFFLElBQUk1QixPQUFPLENBQUVZLElBQUksQ0FBQ0csU0FBUyxHQUFHLENBQUMsRUFBRUgsSUFBSSxDQUFDSSxVQUFVLEdBQUcsQ0FBRSxDQUFFLENBQUM7SUFDdkUsQ0FBRSxDQUFDO0VBQ1A7QUFDRjtBQUVBWCxXQUFXLENBQUN3QixRQUFRLENBQUUsVUFBVSxFQUFFdkIsUUFBUyxDQUFDO0FBQzVDLGVBQWVBLFFBQVEifQ==