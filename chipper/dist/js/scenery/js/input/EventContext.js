// Copyright 2023, University of Colorado Boulder

/**
 * A collection of information about an event and the environment when it was fired
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import IOType from '../../../tandem/js/types/IOType.js';
import { scenery, EventIO, Input } from '../imports.js';
export default class EventContext {
  // Raw DOM InputEvent (TouchEvent, PointerEvent, MouseEvent,...)

  // The document.activeElement when the event was fired

  constructor(domEvent) {
    this.domEvent = domEvent;
    this.activeElement = document.activeElement;
  }
  static createSynthetic() {
    return new EventContext(new window.Event('synthetic'));
  }
}
export const EventContextIO = new IOType('EventContextIO', {
  valueType: EventContext,
  documentation: 'A DOM event and its context',
  toStateObject: eventContext => {
    return {
      domEvent: Input.serializeDomEvent(eventContext.domEvent)

      // Ignores the activeElement, since we don't have a good way of serializing that at this point?
    };
  },

  fromStateObject: stateObject => {
    return new EventContext(Input.deserializeDomEvent(stateObject.domEvent));
  },
  // This should remain the same as Input.domEventPropertiesToSerialize (local var). Each key can be null depending on
  // what Event interface is being serialized (which depends on what DOM Event the instance is).
  stateSchema: () => ({
    domEvent: EventIO

    // Ignores the activeElement, since we don't have a good way of serializing that at this point?
  })
});

scenery.register('EventContext', EventContext);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJzY2VuZXJ5IiwiRXZlbnRJTyIsIklucHV0IiwiRXZlbnRDb250ZXh0IiwiY29uc3RydWN0b3IiLCJkb21FdmVudCIsImFjdGl2ZUVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZVN5bnRoZXRpYyIsIndpbmRvdyIsIkV2ZW50IiwiRXZlbnRDb250ZXh0SU8iLCJ2YWx1ZVR5cGUiLCJkb2N1bWVudGF0aW9uIiwidG9TdGF0ZU9iamVjdCIsImV2ZW50Q29udGV4dCIsInNlcmlhbGl6ZURvbUV2ZW50IiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJkZXNlcmlhbGl6ZURvbUV2ZW50Iiwic3RhdGVTY2hlbWEiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkV2ZW50Q29udGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBjb2xsZWN0aW9uIG9mIGluZm9ybWF0aW9uIGFib3V0IGFuIGV2ZW50IGFuZCB0aGUgZW52aXJvbm1lbnQgd2hlbiBpdCB3YXMgZmlyZWRcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCB7IHNjZW5lcnksIEV2ZW50SU8sIElucHV0IH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudENvbnRleHQ8b3V0IERPTUV2ZW50IGV4dGVuZHMgRXZlbnQgPSBFdmVudD4ge1xyXG5cclxuICAvLyBSYXcgRE9NIElucHV0RXZlbnQgKFRvdWNoRXZlbnQsIFBvaW50ZXJFdmVudCwgTW91c2VFdmVudCwuLi4pXHJcbiAgcHVibGljIHJlYWRvbmx5IGRvbUV2ZW50OiBET01FdmVudDtcclxuXHJcbiAgLy8gVGhlIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgd2hlbiB0aGUgZXZlbnQgd2FzIGZpcmVkXHJcbiAgcHVibGljIHJlYWRvbmx5IGFjdGl2ZUVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGRvbUV2ZW50OiBET01FdmVudCApIHtcclxuICAgIHRoaXMuZG9tRXZlbnQgPSBkb21FdmVudDtcclxuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZVN5bnRoZXRpYygpOiBFdmVudENvbnRleHQge1xyXG4gICAgcmV0dXJuIG5ldyBFdmVudENvbnRleHQoIG5ldyB3aW5kb3cuRXZlbnQoICdzeW50aGV0aWMnICkgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBFdmVudENvbnRleHRJTyA9IG5ldyBJT1R5cGUoICdFdmVudENvbnRleHRJTycsIHtcclxuICB2YWx1ZVR5cGU6IEV2ZW50Q29udGV4dCxcclxuICBkb2N1bWVudGF0aW9uOiAnQSBET00gZXZlbnQgYW5kIGl0cyBjb250ZXh0JyxcclxuICB0b1N0YXRlT2JqZWN0OiBldmVudENvbnRleHQgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZG9tRXZlbnQ6IElucHV0LnNlcmlhbGl6ZURvbUV2ZW50KCBldmVudENvbnRleHQuZG9tRXZlbnQgKVxyXG5cclxuICAgICAgLy8gSWdub3JlcyB0aGUgYWN0aXZlRWxlbWVudCwgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBhIGdvb2Qgd2F5IG9mIHNlcmlhbGl6aW5nIHRoYXQgYXQgdGhpcyBwb2ludD9cclxuICAgIH07XHJcbiAgfSxcclxuICBmcm9tU3RhdGVPYmplY3Q6IHN0YXRlT2JqZWN0ID0+IHtcclxuICAgIHJldHVybiBuZXcgRXZlbnRDb250ZXh0KCBJbnB1dC5kZXNlcmlhbGl6ZURvbUV2ZW50KCBzdGF0ZU9iamVjdC5kb21FdmVudCApICk7XHJcbiAgfSxcclxuXHJcbiAgLy8gVGhpcyBzaG91bGQgcmVtYWluIHRoZSBzYW1lIGFzIElucHV0LmRvbUV2ZW50UHJvcGVydGllc1RvU2VyaWFsaXplIChsb2NhbCB2YXIpLiBFYWNoIGtleSBjYW4gYmUgbnVsbCBkZXBlbmRpbmcgb25cclxuICAvLyB3aGF0IEV2ZW50IGludGVyZmFjZSBpcyBiZWluZyBzZXJpYWxpemVkICh3aGljaCBkZXBlbmRzIG9uIHdoYXQgRE9NIEV2ZW50IHRoZSBpbnN0YW5jZSBpcykuXHJcbiAgc3RhdGVTY2hlbWE6ICgpID0+ICgge1xyXG4gICAgZG9tRXZlbnQ6IEV2ZW50SU9cclxuXHJcbiAgICAvLyBJZ25vcmVzIHRoZSBhY3RpdmVFbGVtZW50LCBzaW5jZSB3ZSBkb24ndCBoYXZlIGEgZ29vZCB3YXkgb2Ygc2VyaWFsaXppbmcgdGhhdCBhdCB0aGlzIHBvaW50P1xyXG4gIH0gKVxyXG59ICk7XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnRXZlbnRDb250ZXh0JywgRXZlbnRDb250ZXh0ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0sb0NBQW9DO0FBQ3ZELFNBQVNDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLFFBQVEsZUFBZTtBQUV2RCxlQUFlLE1BQU1DLFlBQVksQ0FBcUM7RUFFcEU7O0VBR0E7O0VBR09DLFdBQVdBLENBQUVDLFFBQWtCLEVBQUc7SUFDdkMsSUFBSSxDQUFDQSxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDQyxhQUFhLEdBQUdDLFFBQVEsQ0FBQ0QsYUFBYTtFQUM3QztFQUVBLE9BQWNFLGVBQWVBLENBQUEsRUFBaUI7SUFDNUMsT0FBTyxJQUFJTCxZQUFZLENBQUUsSUFBSU0sTUFBTSxDQUFDQyxLQUFLLENBQUUsV0FBWSxDQUFFLENBQUM7RUFDNUQ7QUFDRjtBQUVBLE9BQU8sTUFBTUMsY0FBYyxHQUFHLElBQUlaLE1BQU0sQ0FBRSxnQkFBZ0IsRUFBRTtFQUMxRGEsU0FBUyxFQUFFVCxZQUFZO0VBQ3ZCVSxhQUFhLEVBQUUsNkJBQTZCO0VBQzVDQyxhQUFhLEVBQUVDLFlBQVksSUFBSTtJQUM3QixPQUFPO01BQ0xWLFFBQVEsRUFBRUgsS0FBSyxDQUFDYyxpQkFBaUIsQ0FBRUQsWUFBWSxDQUFDVixRQUFTOztNQUV6RDtJQUNGLENBQUM7RUFDSCxDQUFDOztFQUNEWSxlQUFlLEVBQUVDLFdBQVcsSUFBSTtJQUM5QixPQUFPLElBQUlmLFlBQVksQ0FBRUQsS0FBSyxDQUFDaUIsbUJBQW1CLENBQUVELFdBQVcsQ0FBQ2IsUUFBUyxDQUFFLENBQUM7RUFDOUUsQ0FBQztFQUVEO0VBQ0E7RUFDQWUsV0FBVyxFQUFFQSxDQUFBLE1BQVE7SUFDbkJmLFFBQVEsRUFBRUo7O0lBRVY7RUFDRixDQUFDO0FBQ0gsQ0FBRSxDQUFDOztBQUVIRCxPQUFPLENBQUNxQixRQUFRLENBQUUsY0FBYyxFQUFFbEIsWUFBYSxDQUFDIn0=