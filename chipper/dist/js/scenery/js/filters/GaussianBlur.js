// Copyright 2020-2022, University of Colorado Boulder

/**
 * GaussianBlur filter
 *
 * EXPERIMENTAL! DO not use in production code yet
 *
 * TODO: preventFit OR handle bounds increase (or both)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import toSVGNumber from '../../../dot/js/toSVGNumber.js';
import { Filter, scenery, svgns } from '../imports.js';
export default class GaussianBlur extends Filter {
  /**
   * @param standardDeviation
   * @param [filterRegionPercentage]
   */
  constructor(standardDeviation, filterRegionPercentage = 15) {
    assert && assert(isFinite(standardDeviation), 'GaussianBlur standardDeviation should be finite');
    assert && assert(standardDeviation >= 0, 'GaussianBlur standardDeviation should be non-negative');
    super();
    this.standardDeviation = standardDeviation;
    this.filterRegionPercentageIncrease = filterRegionPercentage;
  }

  /**
   * Returns the CSS-style filter substring specific to this single filter, e.g. `grayscale(1)`. This should be used for
   * both DOM elements (https://developer.mozilla.org/en-US/docs/Web/CSS/filter) and when supported, Canvas
   * (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter).
   */
  getCSSFilterString() {
    return `blur(${toSVGNumber(this.standardDeviation)}px)`;
  }

  /**
   * Appends filter sub-elements into the SVG filter element provided. Should include an in=${inName} for all inputs,
   * and should either output using the resultName (or if not provided, the last element appended should be the output).
   * This effectively mutates the provided filter object, and will be successively called on all Filters to build an
   * SVG filter object.
   */
  applySVGFilter(svgFilter, inName, resultName) {
    // e.g. <feGaussianBlur stdDeviation="[radius radius]" edgeMode="[edge mode]" >
    const feGaussianBlur = document.createElementNS(svgns, 'feGaussianBlur');
    feGaussianBlur.setAttribute('stdDeviation', toSVGNumber(this.standardDeviation));
    feGaussianBlur.setAttribute('edgeMode', 'none'); // Don't pad things!
    svgFilter.appendChild(feGaussianBlur);
    feGaussianBlur.setAttribute('in', inName);
    if (resultName) {
      feGaussianBlur.setAttribute('result', resultName);
    }
    svgFilter.appendChild(feGaussianBlur);
  }
  isDOMCompatible() {
    return true;
  }
  isSVGCompatible() {
    return true;
  }
  applyCanvasFilter(wrapper) {
    throw new Error('unimplemented');
  }
}
scenery.register('GaussianBlur', GaussianBlur);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b1NWR051bWJlciIsIkZpbHRlciIsInNjZW5lcnkiLCJzdmducyIsIkdhdXNzaWFuQmx1ciIsImNvbnN0cnVjdG9yIiwic3RhbmRhcmREZXZpYXRpb24iLCJmaWx0ZXJSZWdpb25QZXJjZW50YWdlIiwiYXNzZXJ0IiwiaXNGaW5pdGUiLCJmaWx0ZXJSZWdpb25QZXJjZW50YWdlSW5jcmVhc2UiLCJnZXRDU1NGaWx0ZXJTdHJpbmciLCJhcHBseVNWR0ZpbHRlciIsInN2Z0ZpbHRlciIsImluTmFtZSIsInJlc3VsdE5hbWUiLCJmZUdhdXNzaWFuQmx1ciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJpc0RPTUNvbXBhdGlibGUiLCJpc1NWR0NvbXBhdGlibGUiLCJhcHBseUNhbnZhc0ZpbHRlciIsIndyYXBwZXIiLCJFcnJvciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR2F1c3NpYW5CbHVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdhdXNzaWFuQmx1ciBmaWx0ZXJcclxuICpcclxuICogRVhQRVJJTUVOVEFMISBETyBub3QgdXNlIGluIHByb2R1Y3Rpb24gY29kZSB5ZXRcclxuICpcclxuICogVE9ETzogcHJldmVudEZpdCBPUiBoYW5kbGUgYm91bmRzIGluY3JlYXNlIChvciBib3RoKVxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHRvU1ZHTnVtYmVyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy90b1NWR051bWJlci5qcyc7XHJcbmltcG9ydCB7IENhbnZhc0NvbnRleHRXcmFwcGVyLCBGaWx0ZXIsIHNjZW5lcnksIHN2Z25zIH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYXVzc2lhbkJsdXIgZXh0ZW5kcyBGaWx0ZXIge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHN0YW5kYXJkRGV2aWF0aW9uOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzdGFuZGFyZERldmlhdGlvblxyXG4gICAqIEBwYXJhbSBbZmlsdGVyUmVnaW9uUGVyY2VudGFnZV1cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN0YW5kYXJkRGV2aWF0aW9uOiBudW1iZXIsIGZpbHRlclJlZ2lvblBlcmNlbnRhZ2UgPSAxNSApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGlzRmluaXRlKCBzdGFuZGFyZERldmlhdGlvbiApLCAnR2F1c3NpYW5CbHVyIHN0YW5kYXJkRGV2aWF0aW9uIHNob3VsZCBiZSBmaW5pdGUnICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzdGFuZGFyZERldmlhdGlvbiA+PSAwLCAnR2F1c3NpYW5CbHVyIHN0YW5kYXJkRGV2aWF0aW9uIHNob3VsZCBiZSBub24tbmVnYXRpdmUnICk7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnN0YW5kYXJkRGV2aWF0aW9uID0gc3RhbmRhcmREZXZpYXRpb247XHJcblxyXG4gICAgdGhpcy5maWx0ZXJSZWdpb25QZXJjZW50YWdlSW5jcmVhc2UgPSBmaWx0ZXJSZWdpb25QZXJjZW50YWdlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgQ1NTLXN0eWxlIGZpbHRlciBzdWJzdHJpbmcgc3BlY2lmaWMgdG8gdGhpcyBzaW5nbGUgZmlsdGVyLCBlLmcuIGBncmF5c2NhbGUoMSlgLiBUaGlzIHNob3VsZCBiZSB1c2VkIGZvclxyXG4gICAqIGJvdGggRE9NIGVsZW1lbnRzIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZmlsdGVyKSBhbmQgd2hlbiBzdXBwb3J0ZWQsIENhbnZhc1xyXG4gICAqIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2ZpbHRlcikuXHJcbiAgICovXHJcbiAgcHVibGljIGdldENTU0ZpbHRlclN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBibHVyKCR7dG9TVkdOdW1iZXIoIHRoaXMuc3RhbmRhcmREZXZpYXRpb24gKX1weClgO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXBwZW5kcyBmaWx0ZXIgc3ViLWVsZW1lbnRzIGludG8gdGhlIFNWRyBmaWx0ZXIgZWxlbWVudCBwcm92aWRlZC4gU2hvdWxkIGluY2x1ZGUgYW4gaW49JHtpbk5hbWV9IGZvciBhbGwgaW5wdXRzLFxyXG4gICAqIGFuZCBzaG91bGQgZWl0aGVyIG91dHB1dCB1c2luZyB0aGUgcmVzdWx0TmFtZSAob3IgaWYgbm90IHByb3ZpZGVkLCB0aGUgbGFzdCBlbGVtZW50IGFwcGVuZGVkIHNob3VsZCBiZSB0aGUgb3V0cHV0KS5cclxuICAgKiBUaGlzIGVmZmVjdGl2ZWx5IG11dGF0ZXMgdGhlIHByb3ZpZGVkIGZpbHRlciBvYmplY3QsIGFuZCB3aWxsIGJlIHN1Y2Nlc3NpdmVseSBjYWxsZWQgb24gYWxsIEZpbHRlcnMgdG8gYnVpbGQgYW5cclxuICAgKiBTVkcgZmlsdGVyIG9iamVjdC5cclxuICAgKi9cclxuICBwdWJsaWMgYXBwbHlTVkdGaWx0ZXIoIHN2Z0ZpbHRlcjogU1ZHRmlsdGVyRWxlbWVudCwgaW5OYW1lOiBzdHJpbmcsIHJlc3VsdE5hbWU/OiBzdHJpbmcgKTogdm9pZCB7XHJcbiAgICAvLyBlLmcuIDxmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249XCJbcmFkaXVzIHJhZGl1c11cIiBlZGdlTW9kZT1cIltlZGdlIG1vZGVdXCIgPlxyXG4gICAgY29uc3QgZmVHYXVzc2lhbkJsdXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z25zLCAnZmVHYXVzc2lhbkJsdXInICk7XHJcbiAgICBmZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoICdzdGREZXZpYXRpb24nLCB0b1NWR051bWJlciggdGhpcy5zdGFuZGFyZERldmlhdGlvbiApICk7XHJcbiAgICBmZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoICdlZGdlTW9kZScsICdub25lJyApOyAvLyBEb24ndCBwYWQgdGhpbmdzIVxyXG4gICAgc3ZnRmlsdGVyLmFwcGVuZENoaWxkKCBmZUdhdXNzaWFuQmx1ciApO1xyXG5cclxuICAgIGZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSggJ2luJywgaW5OYW1lICk7XHJcbiAgICBpZiAoIHJlc3VsdE5hbWUgKSB7XHJcbiAgICAgIGZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSggJ3Jlc3VsdCcsIHJlc3VsdE5hbWUgKTtcclxuICAgIH1cclxuICAgIHN2Z0ZpbHRlci5hcHBlbmRDaGlsZCggZmVHYXVzc2lhbkJsdXIgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBpc0RPTUNvbXBhdGlibGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBpc1NWR0NvbXBhdGlibGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhcHBseUNhbnZhc0ZpbHRlciggd3JhcHBlcjogQ2FudmFzQ29udGV4dFdyYXBwZXIgKTogdm9pZCB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoICd1bmltcGxlbWVudGVkJyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ0dhdXNzaWFuQmx1cicsIEdhdXNzaWFuQmx1ciApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sZ0NBQWdDO0FBQ3hELFNBQStCQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxRQUFRLGVBQWU7QUFFNUUsZUFBZSxNQUFNQyxZQUFZLFNBQVNILE1BQU0sQ0FBQztFQUkvQztBQUNGO0FBQ0E7QUFDQTtFQUNTSSxXQUFXQSxDQUFFQyxpQkFBeUIsRUFBRUMsc0JBQXNCLEdBQUcsRUFBRSxFQUFHO0lBQzNFQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsUUFBUSxDQUFFSCxpQkFBa0IsQ0FBQyxFQUFFLGlEQUFrRCxDQUFDO0lBQ3BHRSxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsaUJBQWlCLElBQUksQ0FBQyxFQUFFLHVEQUF3RCxDQUFDO0lBRW5HLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDQSxpQkFBaUIsR0FBR0EsaUJBQWlCO0lBRTFDLElBQUksQ0FBQ0ksOEJBQThCLEdBQUdILHNCQUFzQjtFQUM5RDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NJLGtCQUFrQkEsQ0FBQSxFQUFXO0lBQ2xDLE9BQVEsUUFBT1gsV0FBVyxDQUFFLElBQUksQ0FBQ00saUJBQWtCLENBQUUsS0FBSTtFQUMzRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU00sY0FBY0EsQ0FBRUMsU0FBMkIsRUFBRUMsTUFBYyxFQUFFQyxVQUFtQixFQUFTO0lBQzlGO0lBQ0EsTUFBTUMsY0FBYyxHQUFHQyxRQUFRLENBQUNDLGVBQWUsQ0FBRWYsS0FBSyxFQUFFLGdCQUFpQixDQUFDO0lBQzFFYSxjQUFjLENBQUNHLFlBQVksQ0FBRSxjQUFjLEVBQUVuQixXQUFXLENBQUUsSUFBSSxDQUFDTSxpQkFBa0IsQ0FBRSxDQUFDO0lBQ3BGVSxjQUFjLENBQUNHLFlBQVksQ0FBRSxVQUFVLEVBQUUsTUFBTyxDQUFDLENBQUMsQ0FBQztJQUNuRE4sU0FBUyxDQUFDTyxXQUFXLENBQUVKLGNBQWUsQ0FBQztJQUV2Q0EsY0FBYyxDQUFDRyxZQUFZLENBQUUsSUFBSSxFQUFFTCxNQUFPLENBQUM7SUFDM0MsSUFBS0MsVUFBVSxFQUFHO01BQ2hCQyxjQUFjLENBQUNHLFlBQVksQ0FBRSxRQUFRLEVBQUVKLFVBQVcsQ0FBQztJQUNyRDtJQUNBRixTQUFTLENBQUNPLFdBQVcsQ0FBRUosY0FBZSxDQUFDO0VBQ3pDO0VBRWdCSyxlQUFlQSxDQUFBLEVBQVk7SUFDekMsT0FBTyxJQUFJO0VBQ2I7RUFFZ0JDLGVBQWVBLENBQUEsRUFBWTtJQUN6QyxPQUFPLElBQUk7RUFDYjtFQUVPQyxpQkFBaUJBLENBQUVDLE9BQTZCLEVBQVM7SUFDOUQsTUFBTSxJQUFJQyxLQUFLLENBQUUsZUFBZ0IsQ0FBQztFQUNwQztBQUNGO0FBRUF2QixPQUFPLENBQUN3QixRQUFRLENBQUUsY0FBYyxFQUFFdEIsWUFBYSxDQUFDIn0=