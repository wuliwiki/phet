// Copyright 2020-2022, University of Colorado Boulder

/**
 * HueRotate filter
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import toSVGNumber from '../../../dot/js/toSVGNumber.js';
import Utils from '../../../dot/js/Utils.js';
import { ColorMatrixFilter, scenery } from '../imports.js';
export default class HueRotate extends ColorMatrixFilter {
  /**
   * @param amount - In radians, the amount of hue to color-shift
   */
  constructor(amount) {
    assert && assert(isFinite(amount), 'HueRotate amount should be finite');
    assert && assert(amount >= 0, 'HueRotate amount should be non-negative');
    const cos = Math.cos(amount);
    const sin = Math.sin(amount);

    // https://drafts.fxtf.org/filter-effects/#attr-valuedef-type-huerotate
    super(0.213 + 0.787 * cos - 0.213 * sin, 0.715 - 0.715 * cos - 0.715 * sin, 0.072 - 0.072 * cos + 0.928 * sin, 0, 0, 0.213 - 0.213 * cos + 0.143 * sin, 0.715 + 0.285 * cos + 0.140 * sin, 0.072 - 0.072 * cos - 0.283 * sin, 0, 0, 0.213 - 0.213 * cos - 0.787 * sin, 0.715 - 0.715 * cos + 0.715 * sin, 0.072 + 0.928 * cos + 0.072 * sin, 0, 0, 0, 0, 0, 1, 0);
    this.amount = amount;
  }

  /**
   * Returns the CSS-style filter substring specific to this single filter, e.g. `grayscale(1)`. This should be used for
   * both DOM elements (https://developer.mozilla.org/en-US/docs/Web/CSS/filter) and when supported, Canvas
   * (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter).
   */
  getCSSFilterString() {
    return `hue-rotate(${toSVGNumber(Utils.toDegrees(this.amount))}deg)`;
  }
  isDOMCompatible() {
    return true;
  }
}
scenery.register('HueRotate', HueRotate);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b1NWR051bWJlciIsIlV0aWxzIiwiQ29sb3JNYXRyaXhGaWx0ZXIiLCJzY2VuZXJ5IiwiSHVlUm90YXRlIiwiY29uc3RydWN0b3IiLCJhbW91bnQiLCJhc3NlcnQiLCJpc0Zpbml0ZSIsImNvcyIsIk1hdGgiLCJzaW4iLCJnZXRDU1NGaWx0ZXJTdHJpbmciLCJ0b0RlZ3JlZXMiLCJpc0RPTUNvbXBhdGlibGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkh1ZVJvdGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBIdWVSb3RhdGUgZmlsdGVyXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgdG9TVkdOdW1iZXIgZnJvbSAnLi4vLi4vLi4vZG90L2pzL3RvU1ZHTnVtYmVyLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IENvbG9yTWF0cml4RmlsdGVyLCBzY2VuZXJ5IH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdWVSb3RhdGUgZXh0ZW5kcyBDb2xvck1hdHJpeEZpbHRlciB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgYW1vdW50OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBhbW91bnQgLSBJbiByYWRpYW5zLCB0aGUgYW1vdW50IG9mIGh1ZSB0byBjb2xvci1zaGlmdFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYW1vdW50OiBudW1iZXIgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpc0Zpbml0ZSggYW1vdW50ICksICdIdWVSb3RhdGUgYW1vdW50IHNob3VsZCBiZSBmaW5pdGUnICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBhbW91bnQgPj0gMCwgJ0h1ZVJvdGF0ZSBhbW91bnQgc2hvdWxkIGJlIG5vbi1uZWdhdGl2ZScgKTtcclxuXHJcbiAgICBjb25zdCBjb3MgPSBNYXRoLmNvcyggYW1vdW50ICk7XHJcbiAgICBjb25zdCBzaW4gPSBNYXRoLnNpbiggYW1vdW50ICk7XHJcblxyXG4gICAgLy8gaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvZmlsdGVyLWVmZmVjdHMvI2F0dHItdmFsdWVkZWYtdHlwZS1odWVyb3RhdGVcclxuICAgIHN1cGVyKFxyXG4gICAgICAwLjIxMyArIDAuNzg3ICogY29zIC0gMC4yMTMgKiBzaW4sXHJcbiAgICAgIDAuNzE1IC0gMC43MTUgKiBjb3MgLSAwLjcxNSAqIHNpbixcclxuICAgICAgMC4wNzIgLSAwLjA3MiAqIGNvcyArIDAuOTI4ICogc2luLFxyXG4gICAgICAwLCAwLFxyXG4gICAgICAwLjIxMyAtIDAuMjEzICogY29zICsgMC4xNDMgKiBzaW4sXHJcbiAgICAgIDAuNzE1ICsgMC4yODUgKiBjb3MgKyAwLjE0MCAqIHNpbixcclxuICAgICAgMC4wNzIgLSAwLjA3MiAqIGNvcyAtIDAuMjgzICogc2luLFxyXG4gICAgICAwLCAwLFxyXG4gICAgICAwLjIxMyAtIDAuMjEzICogY29zIC0gMC43ODcgKiBzaW4sXHJcbiAgICAgIDAuNzE1IC0gMC43MTUgKiBjb3MgKyAwLjcxNSAqIHNpbixcclxuICAgICAgMC4wNzIgKyAwLjkyOCAqIGNvcyArIDAuMDcyICogc2luLFxyXG4gICAgICAwLCAwLFxyXG4gICAgICAwLCAwLCAwLCAxLCAwXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuYW1vdW50ID0gYW1vdW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgQ1NTLXN0eWxlIGZpbHRlciBzdWJzdHJpbmcgc3BlY2lmaWMgdG8gdGhpcyBzaW5nbGUgZmlsdGVyLCBlLmcuIGBncmF5c2NhbGUoMSlgLiBUaGlzIHNob3VsZCBiZSB1c2VkIGZvclxyXG4gICAqIGJvdGggRE9NIGVsZW1lbnRzIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZmlsdGVyKSBhbmQgd2hlbiBzdXBwb3J0ZWQsIENhbnZhc1xyXG4gICAqIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2ZpbHRlcikuXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGdldENTU0ZpbHRlclN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBodWUtcm90YXRlKCR7dG9TVkdOdW1iZXIoIFV0aWxzLnRvRGVncmVlcyggdGhpcy5hbW91bnQgKSApfWRlZylgO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGlzRE9NQ29tcGF0aWJsZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ0h1ZVJvdGF0ZScsIEh1ZVJvdGF0ZSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLGdDQUFnQztBQUN4RCxPQUFPQyxLQUFLLE1BQU0sMEJBQTBCO0FBQzVDLFNBQVNDLGlCQUFpQixFQUFFQyxPQUFPLFFBQVEsZUFBZTtBQUUxRCxlQUFlLE1BQU1DLFNBQVMsU0FBU0YsaUJBQWlCLENBQUM7RUFJdkQ7QUFDRjtBQUNBO0VBQ1NHLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUNuQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVDLFFBQVEsQ0FBRUYsTUFBTyxDQUFDLEVBQUUsbUNBQW9DLENBQUM7SUFDM0VDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxNQUFNLElBQUksQ0FBQyxFQUFFLHlDQUEwQyxDQUFDO0lBRTFFLE1BQU1HLEdBQUcsR0FBR0MsSUFBSSxDQUFDRCxHQUFHLENBQUVILE1BQU8sQ0FBQztJQUM5QixNQUFNSyxHQUFHLEdBQUdELElBQUksQ0FBQ0MsR0FBRyxDQUFFTCxNQUFPLENBQUM7O0lBRTlCO0lBQ0EsS0FBSyxDQUNILEtBQUssR0FBRyxLQUFLLEdBQUdHLEdBQUcsR0FBRyxLQUFLLEdBQUdFLEdBQUcsRUFDakMsS0FBSyxHQUFHLEtBQUssR0FBR0YsR0FBRyxHQUFHLEtBQUssR0FBR0UsR0FBRyxFQUNqQyxLQUFLLEdBQUcsS0FBSyxHQUFHRixHQUFHLEdBQUcsS0FBSyxHQUFHRSxHQUFHLEVBQ2pDLENBQUMsRUFBRSxDQUFDLEVBQ0osS0FBSyxHQUFHLEtBQUssR0FBR0YsR0FBRyxHQUFHLEtBQUssR0FBR0UsR0FBRyxFQUNqQyxLQUFLLEdBQUcsS0FBSyxHQUFHRixHQUFHLEdBQUcsS0FBSyxHQUFHRSxHQUFHLEVBQ2pDLEtBQUssR0FBRyxLQUFLLEdBQUdGLEdBQUcsR0FBRyxLQUFLLEdBQUdFLEdBQUcsRUFDakMsQ0FBQyxFQUFFLENBQUMsRUFDSixLQUFLLEdBQUcsS0FBSyxHQUFHRixHQUFHLEdBQUcsS0FBSyxHQUFHRSxHQUFHLEVBQ2pDLEtBQUssR0FBRyxLQUFLLEdBQUdGLEdBQUcsR0FBRyxLQUFLLEdBQUdFLEdBQUcsRUFDakMsS0FBSyxHQUFHLEtBQUssR0FBR0YsR0FBRyxHQUFHLEtBQUssR0FBR0UsR0FBRyxFQUNqQyxDQUFDLEVBQUUsQ0FBQyxFQUNKLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUNkLENBQUM7SUFFRCxJQUFJLENBQUNMLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ2tCTSxrQkFBa0JBLENBQUEsRUFBVztJQUMzQyxPQUFRLGNBQWFaLFdBQVcsQ0FBRUMsS0FBSyxDQUFDWSxTQUFTLENBQUUsSUFBSSxDQUFDUCxNQUFPLENBQUUsQ0FBRSxNQUFLO0VBQzFFO0VBRWdCUSxlQUFlQSxDQUFBLEVBQVk7SUFDekMsT0FBTyxJQUFJO0VBQ2I7QUFDRjtBQUVBWCxPQUFPLENBQUNZLFFBQVEsQ0FBRSxXQUFXLEVBQUVYLFNBQVUsQ0FBQyJ9