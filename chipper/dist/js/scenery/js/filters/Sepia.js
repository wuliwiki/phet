// Copyright 2020-2022, University of Colorado Boulder

/**
 * Sepia filter
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import toSVGNumber from '../../../dot/js/toSVGNumber.js';
import { ColorMatrixFilter, scenery } from '../imports.js';
export default class Sepia extends ColorMatrixFilter {
  /**
   * @param [amount] - The amount of the effect, from 0 (none) to 1 (full sepia)
   */
  constructor(amount = 1) {
    assert && assert(isFinite(amount), 'Sepia amount should be finite');
    assert && assert(amount >= 0, 'Sepia amount should be non-negative');
    assert && assert(amount <= 1, 'Sepia amount should be at most 1');
    super(0.393 + 0.607 * (1 - amount), 0.769 - 0.769 * (1 - amount), 0.189 - 0.189 * (1 - amount), 0, 0, 0.349 - 0.349 * (1 - amount), 0.686 + 0.314 * (1 - amount), 0.168 - 0.168 * (1 - amount), 0, 0, 0.272 - 0.272 * (1 - amount), 0.534 - 0.534 * (1 - amount), 0.131 + 0.869 * (1 - amount), 0, 0, 0, 0, 0, 1, 0);
    this.amount = amount;
  }

  /**
   * Returns the CSS-style filter substring specific to this single filter, e.g. `grayscale(1)`. This should be used for
   * both DOM elements (https://developer.mozilla.org/en-US/docs/Web/CSS/filter) and when supported, Canvas
   * (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter).
   */
  getCSSFilterString() {
    return `sepia(${toSVGNumber(this.amount)})`;
  }
  isDOMCompatible() {
    return true;
  }
  static FULL = new Sepia(1);
}
scenery.register('Sepia', Sepia);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b1NWR051bWJlciIsIkNvbG9yTWF0cml4RmlsdGVyIiwic2NlbmVyeSIsIlNlcGlhIiwiY29uc3RydWN0b3IiLCJhbW91bnQiLCJhc3NlcnQiLCJpc0Zpbml0ZSIsImdldENTU0ZpbHRlclN0cmluZyIsImlzRE9NQ29tcGF0aWJsZSIsIkZVTEwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNlcGlhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNlcGlhIGZpbHRlclxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHRvU1ZHTnVtYmVyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy90b1NWR051bWJlci5qcyc7XHJcbmltcG9ydCB7IENvbG9yTWF0cml4RmlsdGVyLCBzY2VuZXJ5IH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXBpYSBleHRlbmRzIENvbG9yTWF0cml4RmlsdGVyIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBhbW91bnQ6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIFthbW91bnRdIC0gVGhlIGFtb3VudCBvZiB0aGUgZWZmZWN0LCBmcm9tIDAgKG5vbmUpIHRvIDEgKGZ1bGwgc2VwaWEpXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBhbW91bnQgPSAxICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggaXNGaW5pdGUoIGFtb3VudCApLCAnU2VwaWEgYW1vdW50IHNob3VsZCBiZSBmaW5pdGUnICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBhbW91bnQgPj0gMCwgJ1NlcGlhIGFtb3VudCBzaG91bGQgYmUgbm9uLW5lZ2F0aXZlJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYW1vdW50IDw9IDEsICdTZXBpYSBhbW91bnQgc2hvdWxkIGJlIGF0IG1vc3QgMScgKTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgMC4zOTMgKyAwLjYwNyAqICggMSAtIGFtb3VudCApLCAwLjc2OSAtIDAuNzY5ICogKCAxIC0gYW1vdW50ICksIDAuMTg5IC0gMC4xODkgKiAoIDEgLSBhbW91bnQgKSwgMCwgMCxcclxuICAgICAgMC4zNDkgLSAwLjM0OSAqICggMSAtIGFtb3VudCApLCAwLjY4NiArIDAuMzE0ICogKCAxIC0gYW1vdW50ICksIDAuMTY4IC0gMC4xNjggKiAoIDEgLSBhbW91bnQgKSwgMCwgMCxcclxuICAgICAgMC4yNzIgLSAwLjI3MiAqICggMSAtIGFtb3VudCApLCAwLjUzNCAtIDAuNTM0ICogKCAxIC0gYW1vdW50ICksIDAuMTMxICsgMC44NjkgKiAoIDEgLSBhbW91bnQgKSwgMCwgMCxcclxuICAgICAgMCwgMCwgMCwgMSwgMFxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmFtb3VudCA9IGFtb3VudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIENTUy1zdHlsZSBmaWx0ZXIgc3Vic3RyaW5nIHNwZWNpZmljIHRvIHRoaXMgc2luZ2xlIGZpbHRlciwgZS5nLiBgZ3JheXNjYWxlKDEpYC4gVGhpcyBzaG91bGQgYmUgdXNlZCBmb3JcclxuICAgKiBib3RoIERPTSBlbGVtZW50cyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZpbHRlcikgYW5kIHdoZW4gc3VwcG9ydGVkLCBDYW52YXNcclxuICAgKiAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9maWx0ZXIpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBnZXRDU1NGaWx0ZXJTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgc2VwaWEoJHt0b1NWR051bWJlciggdGhpcy5hbW91bnQgKX0pYDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBpc0RPTUNvbXBhdGlibGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRlVMTCA9IG5ldyBTZXBpYSggMSApO1xyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnU2VwaWEnLCBTZXBpYSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLGdDQUFnQztBQUN4RCxTQUFTQyxpQkFBaUIsRUFBRUMsT0FBTyxRQUFRLGVBQWU7QUFFMUQsZUFBZSxNQUFNQyxLQUFLLFNBQVNGLGlCQUFpQixDQUFDO0VBSW5EO0FBQ0Y7QUFDQTtFQUNTRyxXQUFXQSxDQUFFQyxNQUFNLEdBQUcsQ0FBQyxFQUFHO0lBQy9CQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsUUFBUSxDQUFFRixNQUFPLENBQUMsRUFBRSwrQkFBZ0MsQ0FBQztJQUN2RUMsTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sSUFBSSxDQUFDLEVBQUUscUNBQXNDLENBQUM7SUFDdEVDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxNQUFNLElBQUksQ0FBQyxFQUFFLGtDQUFtQyxDQUFDO0lBRW5FLEtBQUssQ0FDSCxLQUFLLEdBQUcsS0FBSyxJQUFLLENBQUMsR0FBR0EsTUFBTSxDQUFFLEVBQUUsS0FBSyxHQUFHLEtBQUssSUFBSyxDQUFDLEdBQUdBLE1BQU0sQ0FBRSxFQUFFLEtBQUssR0FBRyxLQUFLLElBQUssQ0FBQyxHQUFHQSxNQUFNLENBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNwRyxLQUFLLEdBQUcsS0FBSyxJQUFLLENBQUMsR0FBR0EsTUFBTSxDQUFFLEVBQUUsS0FBSyxHQUFHLEtBQUssSUFBSyxDQUFDLEdBQUdBLE1BQU0sQ0FBRSxFQUFFLEtBQUssR0FBRyxLQUFLLElBQUssQ0FBQyxHQUFHQSxNQUFNLENBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNwRyxLQUFLLEdBQUcsS0FBSyxJQUFLLENBQUMsR0FBR0EsTUFBTSxDQUFFLEVBQUUsS0FBSyxHQUFHLEtBQUssSUFBSyxDQUFDLEdBQUdBLE1BQU0sQ0FBRSxFQUFFLEtBQUssR0FBRyxLQUFLLElBQUssQ0FBQyxHQUFHQSxNQUFNLENBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNwRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FDZCxDQUFDO0lBRUQsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNrQkcsa0JBQWtCQSxDQUFBLEVBQVc7SUFDM0MsT0FBUSxTQUFRUixXQUFXLENBQUUsSUFBSSxDQUFDSyxNQUFPLENBQUUsR0FBRTtFQUMvQztFQUVnQkksZUFBZUEsQ0FBQSxFQUFZO0lBQ3pDLE9BQU8sSUFBSTtFQUNiO0VBRUEsT0FBdUJDLElBQUksR0FBRyxJQUFJUCxLQUFLLENBQUUsQ0FBRSxDQUFDO0FBQzlDO0FBRUFELE9BQU8sQ0FBQ1MsUUFBUSxDQUFFLE9BQU8sRUFBRVIsS0FBTSxDQUFDIn0=