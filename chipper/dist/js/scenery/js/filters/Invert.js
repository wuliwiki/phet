// Copyright 2020-2022, University of Colorado Boulder

/**
 * Invert filter
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import toSVGNumber from '../../../dot/js/toSVGNumber.js';
import { Filter, scenery } from '../imports.js';
export default class Invert extends Filter {
  /**
   * @param [amount] - The amount of the effect, from 0 (none) to 1 (full)
   */
  constructor(amount = 1) {
    assert && assert(isFinite(amount), 'Invert amount should be finite');
    assert && assert(amount >= 0, 'Invert amount should be non-negative');
    assert && assert(amount <= 1, 'Invert amount should be no greater than 1');
    super();
    this.amount = amount;
  }

  /**
   * Returns the CSS-style filter substring specific to this single filter, e.g. `grayscale(1)`. This should be used for
   * both DOM elements (https://developer.mozilla.org/en-US/docs/Web/CSS/filter) and when supported, Canvas
   * (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter).
   */
  getCSSFilterString() {
    return `invert(${toSVGNumber(this.amount)})`;
  }
  isDOMCompatible() {
    return true;
  }
  static FULL = new Invert(1);
  applyCanvasFilter(wrapper) {
    throw new Error('unimplemented');
  }
  applySVGFilter(svgFilter, inName, resultName) {
    throw new Error('unimplemented');
  }
}
scenery.register('Invert', Invert);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b1NWR051bWJlciIsIkZpbHRlciIsInNjZW5lcnkiLCJJbnZlcnQiLCJjb25zdHJ1Y3RvciIsImFtb3VudCIsImFzc2VydCIsImlzRmluaXRlIiwiZ2V0Q1NTRmlsdGVyU3RyaW5nIiwiaXNET01Db21wYXRpYmxlIiwiRlVMTCIsImFwcGx5Q2FudmFzRmlsdGVyIiwid3JhcHBlciIsIkVycm9yIiwiYXBwbHlTVkdGaWx0ZXIiLCJzdmdGaWx0ZXIiLCJpbk5hbWUiLCJyZXN1bHROYW1lIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnZlcnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSW52ZXJ0IGZpbHRlclxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHRvU1ZHTnVtYmVyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy90b1NWR051bWJlci5qcyc7XHJcbmltcG9ydCB7IENhbnZhc0NvbnRleHRXcmFwcGVyLCBGaWx0ZXIsIHNjZW5lcnkgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmVydCBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgYW1vdW50OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBbYW1vdW50XSAtIFRoZSBhbW91bnQgb2YgdGhlIGVmZmVjdCwgZnJvbSAwIChub25lKSB0byAxIChmdWxsKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYW1vdW50ID0gMSApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGlzRmluaXRlKCBhbW91bnQgKSwgJ0ludmVydCBhbW91bnQgc2hvdWxkIGJlIGZpbml0ZScgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGFtb3VudCA+PSAwLCAnSW52ZXJ0IGFtb3VudCBzaG91bGQgYmUgbm9uLW5lZ2F0aXZlJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYW1vdW50IDw9IDEsICdJbnZlcnQgYW1vdW50IHNob3VsZCBiZSBubyBncmVhdGVyIHRoYW4gMScgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuYW1vdW50ID0gYW1vdW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgQ1NTLXN0eWxlIGZpbHRlciBzdWJzdHJpbmcgc3BlY2lmaWMgdG8gdGhpcyBzaW5nbGUgZmlsdGVyLCBlLmcuIGBncmF5c2NhbGUoMSlgLiBUaGlzIHNob3VsZCBiZSB1c2VkIGZvclxyXG4gICAqIGJvdGggRE9NIGVsZW1lbnRzIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZmlsdGVyKSBhbmQgd2hlbiBzdXBwb3J0ZWQsIENhbnZhc1xyXG4gICAqIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2ZpbHRlcikuXHJcbiAgICovXHJcbiAgcHVibGljIGdldENTU0ZpbHRlclN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBpbnZlcnQoJHt0b1NWR051bWJlciggdGhpcy5hbW91bnQgKX0pYDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBpc0RPTUNvbXBhdGlibGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRlVMTCA9IG5ldyBJbnZlcnQoIDEgKTtcclxuXHJcbiAgcHVibGljIGFwcGx5Q2FudmFzRmlsdGVyKCB3cmFwcGVyOiBDYW52YXNDb250ZXh0V3JhcHBlciApOiB2b2lkIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggJ3VuaW1wbGVtZW50ZWQnICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXBwbHlTVkdGaWx0ZXIoIHN2Z0ZpbHRlcjogU1ZHRmlsdGVyRWxlbWVudCwgaW5OYW1lOiBzdHJpbmcsIHJlc3VsdE5hbWU/OiBzdHJpbmcgKTogdm9pZCB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoICd1bmltcGxlbWVudGVkJyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ0ludmVydCcsIEludmVydCApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLGdDQUFnQztBQUN4RCxTQUErQkMsTUFBTSxFQUFFQyxPQUFPLFFBQVEsZUFBZTtBQUVyRSxlQUFlLE1BQU1DLE1BQU0sU0FBU0YsTUFBTSxDQUFDO0VBSXpDO0FBQ0Y7QUFDQTtFQUNTRyxXQUFXQSxDQUFFQyxNQUFNLEdBQUcsQ0FBQyxFQUFHO0lBQy9CQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsUUFBUSxDQUFFRixNQUFPLENBQUMsRUFBRSxnQ0FBaUMsQ0FBQztJQUN4RUMsTUFBTSxJQUFJQSxNQUFNLENBQUVELE1BQU0sSUFBSSxDQUFDLEVBQUUsc0NBQXVDLENBQUM7SUFDdkVDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxNQUFNLElBQUksQ0FBQyxFQUFFLDJDQUE0QyxDQUFDO0lBRTVFLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNTRyxrQkFBa0JBLENBQUEsRUFBVztJQUNsQyxPQUFRLFVBQVNSLFdBQVcsQ0FBRSxJQUFJLENBQUNLLE1BQU8sQ0FBRSxHQUFFO0VBQ2hEO0VBRWdCSSxlQUFlQSxDQUFBLEVBQVk7SUFDekMsT0FBTyxJQUFJO0VBQ2I7RUFFQSxPQUF1QkMsSUFBSSxHQUFHLElBQUlQLE1BQU0sQ0FBRSxDQUFFLENBQUM7RUFFdENRLGlCQUFpQkEsQ0FBRUMsT0FBNkIsRUFBUztJQUM5RCxNQUFNLElBQUlDLEtBQUssQ0FBRSxlQUFnQixDQUFDO0VBQ3BDO0VBRU9DLGNBQWNBLENBQUVDLFNBQTJCLEVBQUVDLE1BQWMsRUFBRUMsVUFBbUIsRUFBUztJQUM5RixNQUFNLElBQUlKLEtBQUssQ0FBRSxlQUFnQixDQUFDO0VBQ3BDO0FBQ0Y7QUFFQVgsT0FBTyxDQUFDZ0IsUUFBUSxDQUFFLFFBQVEsRUFBRWYsTUFBTyxDQUFDIn0=