// Copyright 2021, University of Colorado Boulder

/**
 * An enhanced DerivedProperty to be used as a visibilityProperty to a Node when phet-io needs to be able to
 * independently set visibility to false in a way that can't be overridden by the sim.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import merge from '../../../phet-core/js/merge.js';
import Tandem from '../../../tandem/js/Tandem.js';
import { scenery } from '../imports.js';
class PhetioControlledVisibilityProperty extends DerivedProperty {
  /**
   * @param {Array.<Property<boolean>|TinyProperty<boolean>>} dependencies - Properties that this Property's value is derived from
   * @param {(...x:any[])=>boolean} derivation - function that derives this Property's value, expects args in the same order as dependencies
   * @param {Object} [options] - see Property
   */
  constructor(dependencies, derivation, options) {
    options = merge({
      nodeTandem: Tandem.REQUIRED
    }, options);

    // We'll create an instrumented BooleanProperty that, when toggled to false, will hide the node regardless of
    // what the derivation would return.
    const visibleProperty = new BooleanProperty(true, {
      tandem: options.nodeTandem.createTandem('visibleProperty')
    });
    super([visibleProperty, ...dependencies], (visible, ...args) => visible && derivation(...args));
  }
}
scenery.register('PhetioControlledVisibilityProperty', PhetioControlledVisibilityProperty);
export default PhetioControlledVisibilityProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJtZXJnZSIsIlRhbmRlbSIsInNjZW5lcnkiLCJQaGV0aW9Db250cm9sbGVkVmlzaWJpbGl0eVByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJkZXBlbmRlbmNpZXMiLCJkZXJpdmF0aW9uIiwib3B0aW9ucyIsIm5vZGVUYW5kZW0iLCJSRVFVSVJFRCIsInZpc2libGVQcm9wZXJ0eSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInZpc2libGUiLCJhcmdzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQaGV0aW9Db250cm9sbGVkVmlzaWJpbGl0eVByb3BlcnR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBbiBlbmhhbmNlZCBEZXJpdmVkUHJvcGVydHkgdG8gYmUgdXNlZCBhcyBhIHZpc2liaWxpdHlQcm9wZXJ0eSB0byBhIE5vZGUgd2hlbiBwaGV0LWlvIG5lZWRzIHRvIGJlIGFibGUgdG9cclxuICogaW5kZXBlbmRlbnRseSBzZXQgdmlzaWJpbGl0eSB0byBmYWxzZSBpbiBhIHdheSB0aGF0IGNhbid0IGJlIG92ZXJyaWRkZW4gYnkgdGhlIHNpbS5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCB7IHNjZW5lcnkgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcclxuXHJcbmNsYXNzIFBoZXRpb0NvbnRyb2xsZWRWaXNpYmlsaXR5UHJvcGVydHkgZXh0ZW5kcyBEZXJpdmVkUHJvcGVydHkge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QXJyYXkuPFByb3BlcnR5PGJvb2xlYW4+fFRpbnlQcm9wZXJ0eTxib29sZWFuPj59IGRlcGVuZGVuY2llcyAtIFByb3BlcnRpZXMgdGhhdCB0aGlzIFByb3BlcnR5J3MgdmFsdWUgaXMgZGVyaXZlZCBmcm9tXHJcbiAgICogQHBhcmFtIHsoLi4ueDphbnlbXSk9PmJvb2xlYW59IGRlcml2YXRpb24gLSBmdW5jdGlvbiB0aGF0IGRlcml2ZXMgdGhpcyBQcm9wZXJ0eSdzIHZhbHVlLCBleHBlY3RzIGFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIgYXMgZGVwZW5kZW5jaWVzXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIHNlZSBQcm9wZXJ0eVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBkZXBlbmRlbmNpZXMsIGRlcml2YXRpb24sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG5vZGVUYW5kZW06IFRhbmRlbS5SRVFVSVJFRFxyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFdlJ2xsIGNyZWF0ZSBhbiBpbnN0cnVtZW50ZWQgQm9vbGVhblByb3BlcnR5IHRoYXQsIHdoZW4gdG9nZ2xlZCB0byBmYWxzZSwgd2lsbCBoaWRlIHRoZSBub2RlIHJlZ2FyZGxlc3Mgb2ZcclxuICAgIC8vIHdoYXQgdGhlIGRlcml2YXRpb24gd291bGQgcmV0dXJuLlxyXG4gICAgY29uc3QgdmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMubm9kZVRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aXNpYmxlUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggWyB2aXNpYmxlUHJvcGVydHksIC4uLmRlcGVuZGVuY2llcyBdLCAoIHZpc2libGUsIC4uLmFyZ3MgKSA9PiB2aXNpYmxlICYmIGRlcml2YXRpb24oIC4uLmFyZ3MgKSApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ1BoZXRpb0NvbnRyb2xsZWRWaXNpYmlsaXR5UHJvcGVydHknLCBQaGV0aW9Db250cm9sbGVkVmlzaWJpbGl0eVByb3BlcnR5ICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBoZXRpb0NvbnRyb2xsZWRWaXNpYmlsaXR5UHJvcGVydHk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHFDQUFxQztBQUNqRSxPQUFPQyxlQUFlLE1BQU0scUNBQXFDO0FBQ2pFLE9BQU9DLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxTQUFTQyxPQUFPLFFBQVEsZUFBZTtBQUV2QyxNQUFNQyxrQ0FBa0MsU0FBU0osZUFBZSxDQUFDO0VBQy9EO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsWUFBWSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRztJQUUvQ0EsT0FBTyxHQUFHUCxLQUFLLENBQUU7TUFDZlEsVUFBVSxFQUFFUCxNQUFNLENBQUNRO0lBQ3JCLENBQUMsRUFBRUYsT0FBUSxDQUFDOztJQUVaO0lBQ0E7SUFDQSxNQUFNRyxlQUFlLEdBQUcsSUFBSVosZUFBZSxDQUFFLElBQUksRUFBRTtNQUNqRGEsTUFBTSxFQUFFSixPQUFPLENBQUNDLFVBQVUsQ0FBQ0ksWUFBWSxDQUFFLGlCQUFrQjtJQUM3RCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUUsQ0FBRUYsZUFBZSxFQUFFLEdBQUdMLFlBQVksQ0FBRSxFQUFFLENBQUVRLE9BQU8sRUFBRSxHQUFHQyxJQUFJLEtBQU1ELE9BQU8sSUFBSVAsVUFBVSxDQUFFLEdBQUdRLElBQUssQ0FBRSxDQUFDO0VBQ3pHO0FBQ0Y7QUFFQVosT0FBTyxDQUFDYSxRQUFRLENBQUUsb0NBQW9DLEVBQUVaLGtDQUFtQyxDQUFDO0FBQzVGLGVBQWVBLGtDQUFrQyJ9