// Copyright 2022, University of Colorado Boulder

/**
 * Creates a pattern based on a Node.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Matrix3 from '../../../dot/js/Matrix3.js';
import { Node, Pattern, scenery } from '../imports.js';
export default class NodePattern extends Pattern {
  constructor(node, resolution, x, y, width, height, matrix = Matrix3.IDENTITY) {
    assert && assert(resolution > 0 && Number.isInteger(resolution), 'Resolution should be a positive integer');
    assert && assert(Number.isInteger(width));
    assert && assert(Number.isInteger(height));
    const imageElement = document.createElement('img');

    // NOTE: This callback is executed SYNCHRONOUSLY
    function callback(canvas, x, y, width, height) {
      imageElement.src = canvas.toDataURL();
    }
    const tmpNode = new Node({
      scale: resolution,
      children: [node]
    });
    tmpNode.toCanvas(callback, -x * resolution, -y * resolution, width * resolution, height * resolution);
    super(imageElement);
    this.setTransformMatrix(matrix.timesMatrix(Matrix3.scaling(1 / resolution)));
  }
}
scenery.register('NodePattern', NodePattern);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiTm9kZSIsIlBhdHRlcm4iLCJzY2VuZXJ5IiwiTm9kZVBhdHRlcm4iLCJjb25zdHJ1Y3RvciIsIm5vZGUiLCJyZXNvbHV0aW9uIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsIm1hdHJpeCIsIklERU5USVRZIiwiYXNzZXJ0IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaW1hZ2VFbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2FsbGJhY2siLCJjYW52YXMiLCJzcmMiLCJ0b0RhdGFVUkwiLCJ0bXBOb2RlIiwic2NhbGUiLCJjaGlsZHJlbiIsInRvQ2FudmFzIiwic2V0VHJhbnNmb3JtTWF0cml4IiwidGltZXNNYXRyaXgiLCJzY2FsaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOb2RlUGF0dGVybi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHBhdHRlcm4gYmFzZWQgb24gYSBOb2RlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBQYXR0ZXJuLCBzY2VuZXJ5IH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb2RlUGF0dGVybiBleHRlbmRzIFBhdHRlcm4ge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggbm9kZTogTm9kZSwgcmVzb2x1dGlvbjogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG1hdHJpeCA9IE1hdHJpeDMuSURFTlRJVFkgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCByZXNvbHV0aW9uID4gMCAmJiBOdW1iZXIuaXNJbnRlZ2VyKCByZXNvbHV0aW9uICksICdSZXNvbHV0aW9uIHNob3VsZCBiZSBhIHBvc2l0aXZlIGludGVnZXInICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBOdW1iZXIuaXNJbnRlZ2VyKCB3aWR0aCApICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBOdW1iZXIuaXNJbnRlZ2VyKCBoZWlnaHQgKSApO1xyXG5cclxuICAgIGNvbnN0IGltYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdpbWcnICk7XHJcblxyXG4gICAgLy8gTk9URTogVGhpcyBjYWxsYmFjayBpcyBleGVjdXRlZCBTWU5DSFJPTk9VU0xZXHJcbiAgICBmdW5jdGlvbiBjYWxsYmFjayggY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgICBpbWFnZUVsZW1lbnQuc3JjID0gY2FudmFzLnRvRGF0YVVSTCgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdG1wTm9kZSA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIHNjYWxlOiByZXNvbHV0aW9uLFxyXG4gICAgICBjaGlsZHJlbjogWyBub2RlIF1cclxuICAgIH0gKTtcclxuICAgIHRtcE5vZGUudG9DYW52YXMoIGNhbGxiYWNrLCAteCAqIHJlc29sdXRpb24sIC15ICogcmVzb2x1dGlvbiwgd2lkdGggKiByZXNvbHV0aW9uLCBoZWlnaHQgKiByZXNvbHV0aW9uICk7XHJcblxyXG4gICAgc3VwZXIoIGltYWdlRWxlbWVudCApO1xyXG5cclxuICAgIHRoaXMuc2V0VHJhbnNmb3JtTWF0cml4KCBtYXRyaXgudGltZXNNYXRyaXgoIE1hdHJpeDMuc2NhbGluZyggMSAvIHJlc29sdXRpb24gKSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnTm9kZVBhdHRlcm4nLCBOb2RlUGF0dGVybiApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLDRCQUE0QjtBQUNoRCxTQUFTQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxRQUFRLGVBQWU7QUFFdEQsZUFBZSxNQUFNQyxXQUFXLFNBQVNGLE9BQU8sQ0FBQztFQUN4Q0csV0FBV0EsQ0FBRUMsSUFBVSxFQUFFQyxVQUFrQixFQUFFQyxDQUFTLEVBQUVDLENBQVMsRUFBRUMsS0FBYSxFQUFFQyxNQUFjLEVBQUVDLE1BQU0sR0FBR1osT0FBTyxDQUFDYSxRQUFRLEVBQUc7SUFDbklDLE1BQU0sSUFBSUEsTUFBTSxDQUFFUCxVQUFVLEdBQUcsQ0FBQyxJQUFJUSxNQUFNLENBQUNDLFNBQVMsQ0FBRVQsVUFBVyxDQUFDLEVBQUUseUNBQTBDLENBQUM7SUFDL0dPLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxNQUFNLENBQUNDLFNBQVMsQ0FBRU4sS0FBTSxDQUFFLENBQUM7SUFDN0NJLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxNQUFNLENBQUNDLFNBQVMsQ0FBRUwsTUFBTyxDQUFFLENBQUM7SUFFOUMsTUFBTU0sWUFBWSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBRSxLQUFNLENBQUM7O0lBRXBEO0lBQ0EsU0FBU0MsUUFBUUEsQ0FBRUMsTUFBeUIsRUFBRWIsQ0FBUyxFQUFFQyxDQUFTLEVBQUVDLEtBQWEsRUFBRUMsTUFBYyxFQUFTO01BQ3hHTSxZQUFZLENBQUNLLEdBQUcsR0FBR0QsTUFBTSxDQUFDRSxTQUFTLENBQUMsQ0FBQztJQUN2QztJQUNBLE1BQU1DLE9BQU8sR0FBRyxJQUFJdkIsSUFBSSxDQUFFO01BQ3hCd0IsS0FBSyxFQUFFbEIsVUFBVTtNQUNqQm1CLFFBQVEsRUFBRSxDQUFFcEIsSUFBSTtJQUNsQixDQUFFLENBQUM7SUFDSGtCLE9BQU8sQ0FBQ0csUUFBUSxDQUFFUCxRQUFRLEVBQUUsQ0FBQ1osQ0FBQyxHQUFHRCxVQUFVLEVBQUUsQ0FBQ0UsQ0FBQyxHQUFHRixVQUFVLEVBQUVHLEtBQUssR0FBR0gsVUFBVSxFQUFFSSxNQUFNLEdBQUdKLFVBQVcsQ0FBQztJQUV2RyxLQUFLLENBQUVVLFlBQWEsQ0FBQztJQUVyQixJQUFJLENBQUNXLGtCQUFrQixDQUFFaEIsTUFBTSxDQUFDaUIsV0FBVyxDQUFFN0IsT0FBTyxDQUFDOEIsT0FBTyxDQUFFLENBQUMsR0FBR3ZCLFVBQVcsQ0FBRSxDQUFFLENBQUM7RUFDcEY7QUFDRjtBQUVBSixPQUFPLENBQUM0QixRQUFRLENBQUUsYUFBYSxFQUFFM0IsV0FBWSxDQUFDIn0=