// Copyright 2023, University of Colorado Boulder

/**
 * Mixin for RichText elements in the hierarchy that should be pooled with a clean() method.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */
import Matrix3 from '../../../../dot/js/Matrix3.js';
import inheritance from '../../../../phet-core/js/inheritance.js';
import memoize from '../../../../phet-core/js/memoize.js';
import { Node, scenery } from '../../imports.js';
const RichTextCleanable = memoize(type => {
  assert && assert(_.includes(inheritance(type), Node), 'Only Node subtypes should mix Paintable');
  return class RichTextCleanableMixin extends type {
    get isCleanable() {
      return true;
    }

    /**
     * Releases references
     */
    clean() {
      const thisNode = this;

      // Remove all children (and recursively clean)
      for (let i = thisNode._children.length - 1; i >= 0; i--) {
        const child = thisNode._children[i];
        if (child.isCleanable) {
          thisNode.removeChild(child);
          child.clean();
        }
      }
      thisNode.matrix = Matrix3.IDENTITY;
      thisNode.freeToPool();
    }
  };
});
scenery.register('RichTextCleanable', RichTextCleanable);
export default RichTextCleanable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiaW5oZXJpdGFuY2UiLCJtZW1vaXplIiwiTm9kZSIsInNjZW5lcnkiLCJSaWNoVGV4dENsZWFuYWJsZSIsInR5cGUiLCJhc3NlcnQiLCJfIiwiaW5jbHVkZXMiLCJSaWNoVGV4dENsZWFuYWJsZU1peGluIiwiaXNDbGVhbmFibGUiLCJjbGVhbiIsInRoaXNOb2RlIiwiaSIsIl9jaGlsZHJlbiIsImxlbmd0aCIsImNoaWxkIiwicmVtb3ZlQ2hpbGQiLCJtYXRyaXgiLCJJREVOVElUWSIsImZyZWVUb1Bvb2wiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJpY2hUZXh0Q2xlYW5hYmxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiBmb3IgUmljaFRleHQgZWxlbWVudHMgaW4gdGhlIGhpZXJhcmNoeSB0aGF0IHNob3VsZCBiZSBwb29sZWQgd2l0aCBhIGNsZWFuKCkgbWV0aG9kLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvTWF0cml4My5qcyc7XHJcbmltcG9ydCBpbmhlcml0YW5jZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvaW5oZXJpdGFuY2UuanMnO1xyXG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVtb2l6ZS5qcyc7XHJcbmltcG9ydCBDb25zdHJ1Y3RvciBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvQ29uc3RydWN0b3IuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBzY2VuZXJ5IH0gZnJvbSAnLi4vLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5jb25zdCBSaWNoVGV4dENsZWFuYWJsZSA9IG1lbW9pemUoIDxTdXBlclR5cGUgZXh0ZW5kcyBDb25zdHJ1Y3Rvcj4oIHR5cGU6IFN1cGVyVHlwZSApID0+IHtcclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBfLmluY2x1ZGVzKCBpbmhlcml0YW5jZSggdHlwZSApLCBOb2RlICksICdPbmx5IE5vZGUgc3VidHlwZXMgc2hvdWxkIG1peCBQYWludGFibGUnICk7XHJcblxyXG4gIHJldHVybiBjbGFzcyBSaWNoVGV4dENsZWFuYWJsZU1peGluIGV4dGVuZHMgdHlwZSB7XHJcbiAgICBwdWJsaWMgZ2V0IGlzQ2xlYW5hYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbGVhc2VzIHJlZmVyZW5jZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNsZWFuKCk6IHZvaWQge1xyXG4gICAgICBjb25zdCB0aGlzTm9kZSA9IHRoaXMgYXMgdW5rbm93biBhcyBSaWNoVGV4dENsZWFuYWJsZU5vZGU7XHJcblxyXG4gICAgICAvLyBSZW1vdmUgYWxsIGNoaWxkcmVuIChhbmQgcmVjdXJzaXZlbHkgY2xlYW4pXHJcbiAgICAgIGZvciAoIGxldCBpID0gdGhpc05vZGUuX2NoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gdGhpc05vZGUuX2NoaWxkcmVuWyBpIF0gYXMgUmljaFRleHRDbGVhbmFibGVOb2RlO1xyXG5cclxuICAgICAgICBpZiAoIGNoaWxkLmlzQ2xlYW5hYmxlICkge1xyXG4gICAgICAgICAgdGhpc05vZGUucmVtb3ZlQ2hpbGQoIGNoaWxkICk7XHJcbiAgICAgICAgICBjaGlsZC5jbGVhbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpc05vZGUubWF0cml4ID0gTWF0cml4My5JREVOVElUWTtcclxuXHJcbiAgICAgIHRoaXNOb2RlLmZyZWVUb1Bvb2woKTtcclxuICAgIH1cclxuICB9O1xyXG59ICk7XHJcbmV4cG9ydCB0eXBlIFJpY2hUZXh0Q2xlYW5hYmxlTm9kZSA9IE5vZGUgJiB7IGNsZWFuOiAoKSA9PiB2b2lkOyBpc0NsZWFuYWJsZTogYm9vbGVhbjsgZnJlZVRvUG9vbDogKCkgPT4gdm9pZCB9O1xyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ1JpY2hUZXh0Q2xlYW5hYmxlJywgUmljaFRleHRDbGVhbmFibGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJpY2hUZXh0Q2xlYW5hYmxlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0MsT0FBTyxNQUFNLHFDQUFxQztBQUV6RCxTQUFTQyxJQUFJLEVBQUVDLE9BQU8sUUFBUSxrQkFBa0I7QUFFaEQsTUFBTUMsaUJBQWlCLEdBQUdILE9BQU8sQ0FBbUNJLElBQWUsSUFBTTtFQUN2RkMsTUFBTSxJQUFJQSxNQUFNLENBQUVDLENBQUMsQ0FBQ0MsUUFBUSxDQUFFUixXQUFXLENBQUVLLElBQUssQ0FBQyxFQUFFSCxJQUFLLENBQUMsRUFBRSx5Q0FBMEMsQ0FBQztFQUV0RyxPQUFPLE1BQU1PLHNCQUFzQixTQUFTSixJQUFJLENBQUM7SUFDL0MsSUFBV0ssV0FBV0EsQ0FBQSxFQUFZO01BQ2hDLE9BQU8sSUFBSTtJQUNiOztJQUVBO0FBQ0o7QUFDQTtJQUNXQyxLQUFLQSxDQUFBLEVBQVM7TUFDbkIsTUFBTUMsUUFBUSxHQUFHLElBQXdDOztNQUV6RDtNQUNBLEtBQU0sSUFBSUMsQ0FBQyxHQUFHRCxRQUFRLENBQUNFLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsRUFBRUYsQ0FBQyxJQUFJLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUc7UUFDekQsTUFBTUcsS0FBSyxHQUFHSixRQUFRLENBQUNFLFNBQVMsQ0FBRUQsQ0FBQyxDQUEyQjtRQUU5RCxJQUFLRyxLQUFLLENBQUNOLFdBQVcsRUFBRztVQUN2QkUsUUFBUSxDQUFDSyxXQUFXLENBQUVELEtBQU0sQ0FBQztVQUM3QkEsS0FBSyxDQUFDTCxLQUFLLENBQUMsQ0FBQztRQUNmO01BQ0Y7TUFFQUMsUUFBUSxDQUFDTSxNQUFNLEdBQUduQixPQUFPLENBQUNvQixRQUFRO01BRWxDUCxRQUFRLENBQUNRLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZCO0VBQ0YsQ0FBQztBQUNILENBQUUsQ0FBQztBQUdIakIsT0FBTyxDQUFDa0IsUUFBUSxDQUFFLG1CQUFtQixFQUFFakIsaUJBQWtCLENBQUM7QUFFMUQsZUFBZUEsaUJBQWlCIn0=