// Copyright 2023, University of Colorado Boulder

/**
 * Utilities and globals to support RichText
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */
import { scenery, Text } from '../../imports.js';

// Types for Himalaya

export const isHimalayaElementNode = node => node.type.toLowerCase() === 'element';
export const isHimalayaTextNode = node => node.type.toLowerCase() === 'text';
const RichTextUtils = {
  // We need to do some font-size tests, so we have a Text for that.
  scratchText: new Text(''),
  // Get the attribute value from an element. Return null if that attribute isn't on the element.
  himalayaGetAttribute(attribute, element) {
    if (!element) {
      return null;
    }
    const attributeObject = _.find(element.attributes, x => x.key === attribute);
    if (!attributeObject) {
      return null;
    }
    return attributeObject.value || null;
  },
  // Turn a string of style like "font-sie:6; font-weight:6; favorite-number:6" into a may of style key/values (trimmed of whitespace)
  himalayaStyleStringToMap(styleString) {
    const styleElements = styleString.split(';');
    const styleMap = {};
    styleElements.forEach(styleKeyValue => {
      if (styleKeyValue.length > 0) {
        const keyValueTuple = styleKeyValue.split(':');
        assert && assert(keyValueTuple.length === 2, 'too many colons');
        styleMap[keyValueTuple[0].trim()] = keyValueTuple[1].trim();
      }
    });
    return styleMap;
  }
};
export default RichTextUtils;
scenery.register('RichTextUtils', RichTextUtils);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzY2VuZXJ5IiwiVGV4dCIsImlzSGltYWxheWFFbGVtZW50Tm9kZSIsIm5vZGUiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJpc0hpbWFsYXlhVGV4dE5vZGUiLCJSaWNoVGV4dFV0aWxzIiwic2NyYXRjaFRleHQiLCJoaW1hbGF5YUdldEF0dHJpYnV0ZSIsImF0dHJpYnV0ZSIsImVsZW1lbnQiLCJhdHRyaWJ1dGVPYmplY3QiLCJfIiwiZmluZCIsImF0dHJpYnV0ZXMiLCJ4Iiwia2V5IiwidmFsdWUiLCJoaW1hbGF5YVN0eWxlU3RyaW5nVG9NYXAiLCJzdHlsZVN0cmluZyIsInN0eWxlRWxlbWVudHMiLCJzcGxpdCIsInN0eWxlTWFwIiwiZm9yRWFjaCIsInN0eWxlS2V5VmFsdWUiLCJsZW5ndGgiLCJrZXlWYWx1ZVR1cGxlIiwiYXNzZXJ0IiwidHJpbSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmljaFRleHRVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVXRpbGl0aWVzIGFuZCBnbG9iYWxzIHRvIHN1cHBvcnQgUmljaFRleHRcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuaW1wb3J0IHsgc2NlbmVyeSwgVGV4dCB9IGZyb20gJy4uLy4uL2ltcG9ydHMuanMnO1xyXG5cclxuLy8gVHlwZXMgZm9yIEhpbWFsYXlhXHJcbmV4cG9ydCB0eXBlIEhpbWFsYXlhQXR0cmlidXRlID0ge1xyXG4gIGtleTogc3RyaW5nO1xyXG4gIHZhbHVlPzogc3RyaW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgSGltYWxheWFOb2RlID0ge1xyXG4gIHR5cGU6ICdlbGVtZW50JyB8ICdjb21tZW50JyB8ICd0ZXh0JztcclxuICBpbm5lckNvbnRlbnQ6IHN0cmluZztcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEhpbWFsYXlhRWxlbWVudE5vZGUgPSB7XHJcbiAgdHlwZTogJ2VsZW1lbnQnO1xyXG4gIHRhZ05hbWU6IHN0cmluZztcclxuICBjaGlsZHJlbjogSGltYWxheWFOb2RlW107XHJcbiAgYXR0cmlidXRlczogSGltYWxheWFBdHRyaWJ1dGVbXTtcclxuICBpbm5lckNvbnRlbnQ/OiBzdHJpbmc7IC8vIElzIHRoaXMgaW4gdGhlIGdlbmVyYXRlZCBzdHVmZj8gRG8gd2UganVzdCBvdmVycmlkZSB0aGlzPyBVbmNsZWFyXHJcbn0gJiBIaW1hbGF5YU5vZGU7XHJcblxyXG5leHBvcnQgY29uc3QgaXNIaW1hbGF5YUVsZW1lbnROb2RlID0gKCBub2RlOiBIaW1hbGF5YU5vZGUgKTogbm9kZSBpcyBIaW1hbGF5YUVsZW1lbnROb2RlID0+IG5vZGUudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZWxlbWVudCc7XHJcblxyXG5leHBvcnQgdHlwZSBIaW1hbGF5YVRleHROb2RlID0ge1xyXG4gIHR5cGU6ICd0ZXh0JztcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbn0gJiBIaW1hbGF5YU5vZGU7XHJcblxyXG5leHBvcnQgY29uc3QgaXNIaW1hbGF5YVRleHROb2RlID0gKCBub2RlOiBIaW1hbGF5YU5vZGUgKTogbm9kZSBpcyBIaW1hbGF5YVRleHROb2RlID0+IG5vZGUudHlwZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dCc7XHJcblxyXG5jb25zdCBSaWNoVGV4dFV0aWxzID0ge1xyXG4gIC8vIFdlIG5lZWQgdG8gZG8gc29tZSBmb250LXNpemUgdGVzdHMsIHNvIHdlIGhhdmUgYSBUZXh0IGZvciB0aGF0LlxyXG4gIHNjcmF0Y2hUZXh0OiBuZXcgVGV4dCggJycgKSxcclxuXHJcbiAgLy8gR2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgZnJvbSBhbiBlbGVtZW50LiBSZXR1cm4gbnVsbCBpZiB0aGF0IGF0dHJpYnV0ZSBpc24ndCBvbiB0aGUgZWxlbWVudC5cclxuICBoaW1hbGF5YUdldEF0dHJpYnV0ZSggYXR0cmlidXRlOiBzdHJpbmcsIGVsZW1lbnQ6IEhpbWFsYXlhRWxlbWVudE5vZGUgfCBudWxsICk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhdHRyaWJ1dGVPYmplY3QgPSBfLmZpbmQoIGVsZW1lbnQuYXR0cmlidXRlcywgeCA9PiB4LmtleSA9PT0gYXR0cmlidXRlICk7XHJcbiAgICBpZiAoICFhdHRyaWJ1dGVPYmplY3QgKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGF0dHJpYnV0ZU9iamVjdC52YWx1ZSB8fCBudWxsO1xyXG4gIH0sXHJcblxyXG4gIC8vIFR1cm4gYSBzdHJpbmcgb2Ygc3R5bGUgbGlrZSBcImZvbnQtc2llOjY7IGZvbnQtd2VpZ2h0OjY7IGZhdm9yaXRlLW51bWJlcjo2XCIgaW50byBhIG1heSBvZiBzdHlsZSBrZXkvdmFsdWVzICh0cmltbWVkIG9mIHdoaXRlc3BhY2UpXHJcbiAgaGltYWxheWFTdHlsZVN0cmluZ1RvTWFwKCBzdHlsZVN0cmluZzogc3RyaW5nICk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xyXG4gICAgY29uc3Qgc3R5bGVFbGVtZW50cyA9IHN0eWxlU3RyaW5nLnNwbGl0KCAnOycgKTtcclxuICAgIGNvbnN0IHN0eWxlTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XHJcbiAgICBzdHlsZUVsZW1lbnRzLmZvckVhY2goIHN0eWxlS2V5VmFsdWUgPT4ge1xyXG4gICAgICBpZiAoIHN0eWxlS2V5VmFsdWUubGVuZ3RoID4gMCApIHtcclxuICAgICAgICBjb25zdCBrZXlWYWx1ZVR1cGxlID0gc3R5bGVLZXlWYWx1ZS5zcGxpdCggJzonICk7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCgga2V5VmFsdWVUdXBsZS5sZW5ndGggPT09IDIsICd0b28gbWFueSBjb2xvbnMnICk7XHJcbiAgICAgICAgc3R5bGVNYXBbIGtleVZhbHVlVHVwbGVbIDAgXS50cmltKCkgXSA9IGtleVZhbHVlVHVwbGVbIDEgXS50cmltKCk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICAgIHJldHVybiBzdHlsZU1hcDtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSaWNoVGV4dFV0aWxzO1xyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ1JpY2hUZXh0VXRpbHMnLCBSaWNoVGV4dFV0aWxzICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLE9BQU8sRUFBRUMsSUFBSSxRQUFRLGtCQUFrQjs7QUFFaEQ7O0FBbUJBLE9BQU8sTUFBTUMscUJBQXFCLEdBQUtDLElBQWtCLElBQW1DQSxJQUFJLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxDQUFDLENBQUMsS0FBSyxTQUFTO0FBT2pJLE9BQU8sTUFBTUMsa0JBQWtCLEdBQUtILElBQWtCLElBQWdDQSxJQUFJLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxDQUFDLENBQUMsS0FBSyxNQUFNO0FBRXhILE1BQU1FLGFBQWEsR0FBRztFQUNwQjtFQUNBQyxXQUFXLEVBQUUsSUFBSVAsSUFBSSxDQUFFLEVBQUcsQ0FBQztFQUUzQjtFQUNBUSxvQkFBb0JBLENBQUVDLFNBQWlCLEVBQUVDLE9BQW1DLEVBQWtCO0lBQzVGLElBQUssQ0FBQ0EsT0FBTyxFQUFHO01BQ2QsT0FBTyxJQUFJO0lBQ2I7SUFDQSxNQUFNQyxlQUFlLEdBQUdDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFSCxPQUFPLENBQUNJLFVBQVUsRUFBRUMsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLEdBQUcsS0FBS1AsU0FBVSxDQUFDO0lBQzlFLElBQUssQ0FBQ0UsZUFBZSxFQUFHO01BQ3RCLE9BQU8sSUFBSTtJQUNiO0lBQ0EsT0FBT0EsZUFBZSxDQUFDTSxLQUFLLElBQUksSUFBSTtFQUN0QyxDQUFDO0VBRUQ7RUFDQUMsd0JBQXdCQSxDQUFFQyxXQUFtQixFQUEyQjtJQUN0RSxNQUFNQyxhQUFhLEdBQUdELFdBQVcsQ0FBQ0UsS0FBSyxDQUFFLEdBQUksQ0FBQztJQUM5QyxNQUFNQyxRQUFnQyxHQUFHLENBQUMsQ0FBQztJQUMzQ0YsYUFBYSxDQUFDRyxPQUFPLENBQUVDLGFBQWEsSUFBSTtNQUN0QyxJQUFLQSxhQUFhLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUc7UUFDOUIsTUFBTUMsYUFBYSxHQUFHRixhQUFhLENBQUNILEtBQUssQ0FBRSxHQUFJLENBQUM7UUFDaERNLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxhQUFhLENBQUNELE1BQU0sS0FBSyxDQUFDLEVBQUUsaUJBQWtCLENBQUM7UUFDakVILFFBQVEsQ0FBRUksYUFBYSxDQUFFLENBQUMsQ0FBRSxDQUFDRSxJQUFJLENBQUMsQ0FBQyxDQUFFLEdBQUdGLGFBQWEsQ0FBRSxDQUFDLENBQUUsQ0FBQ0UsSUFBSSxDQUFDLENBQUM7TUFDbkU7SUFDRixDQUFFLENBQUM7SUFDSCxPQUFPTixRQUFRO0VBQ2pCO0FBQ0YsQ0FBQztBQUVELGVBQWVoQixhQUFhO0FBRTVCUCxPQUFPLENBQUM4QixRQUFRLENBQUUsZUFBZSxFQUFFdkIsYUFBYyxDQUFDIn0=