// Copyright 2023, University of Colorado Boulder

/**
 * A leaf (text) element in the RichText, which will display a snippet of Text.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */
import Pool from '../../../../phet-core/js/Pool.js';
import { RichText, RichTextCleanable, RichTextUtils, scenery, Text } from '../../imports.js';
export default class RichTextLeaf extends RichTextCleanable(Text) {
  constructor(content, isLTR, font, boundsMethod, fill, stroke, lineWidth) {
    super('');
    this.initialize(content, isLTR, font, boundsMethod, fill, stroke, lineWidth);
  }
  initialize(content, isLTR, font, boundsMethod, fill, stroke, lineWidth) {
    // Grab all spaces at the (logical) start
    let whitespaceBefore = '';
    while (content.startsWith(' ')) {
      whitespaceBefore += ' ';
      content = content.slice(1);
    }

    // Grab all spaces at the (logical) end
    let whitespaceAfter = '';
    while (content.endsWith(' ')) {
      whitespaceAfter = ' ';
      content = content.slice(0, content.length - 1);
    }
    this.string = RichText.contentToString(content, isLTR);
    this.boundsMethod = boundsMethod;
    this.font = font;
    this.fill = fill;
    this.stroke = stroke;
    this.lineWidth = lineWidth;
    const spacingBefore = whitespaceBefore.length ? RichTextUtils.scratchText.setString(whitespaceBefore).setFont(font).width : 0;
    const spacingAfter = whitespaceAfter.length ? RichTextUtils.scratchText.setString(whitespaceAfter).setFont(font).width : 0;

    // Turn logical spacing into directional
    this.leftSpacing = isLTR ? spacingBefore : spacingAfter;
    this.rightSpacing = isLTR ? spacingAfter : spacingBefore;
    return this;
  }

  /**
   * Cleans references that could cause memory leaks (as those things may contain other references).
   */
  clean() {
    super.clean();
    this.fill = null;
    this.stroke = null;
  }

  /**
   * Whether this leaf will fit in the specified amount of space (including, if required, the amount of spacing on
   * the side).
   */
  fitsIn(widthAvailable, hasAddedLeafToLine, isContainerLTR) {
    return this.width + (hasAddedLeafToLine ? isContainerLTR ? this.leftSpacing : this.rightSpacing : 0) <= widthAvailable;
  }
  freeToPool() {
    RichTextLeaf.pool.freeToPool(this);
  }
  static pool = new Pool(RichTextLeaf);
}
scenery.register('RichTextLeaf', RichTextLeaf);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb29sIiwiUmljaFRleHQiLCJSaWNoVGV4dENsZWFuYWJsZSIsIlJpY2hUZXh0VXRpbHMiLCJzY2VuZXJ5IiwiVGV4dCIsIlJpY2hUZXh0TGVhZiIsImNvbnN0cnVjdG9yIiwiY29udGVudCIsImlzTFRSIiwiZm9udCIsImJvdW5kc01ldGhvZCIsImZpbGwiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJpbml0aWFsaXplIiwid2hpdGVzcGFjZUJlZm9yZSIsInN0YXJ0c1dpdGgiLCJzbGljZSIsIndoaXRlc3BhY2VBZnRlciIsImVuZHNXaXRoIiwibGVuZ3RoIiwic3RyaW5nIiwiY29udGVudFRvU3RyaW5nIiwic3BhY2luZ0JlZm9yZSIsInNjcmF0Y2hUZXh0Iiwic2V0U3RyaW5nIiwic2V0Rm9udCIsIndpZHRoIiwic3BhY2luZ0FmdGVyIiwibGVmdFNwYWNpbmciLCJyaWdodFNwYWNpbmciLCJjbGVhbiIsImZpdHNJbiIsIndpZHRoQXZhaWxhYmxlIiwiaGFzQWRkZWRMZWFmVG9MaW5lIiwiaXNDb250YWluZXJMVFIiLCJmcmVlVG9Qb29sIiwicG9vbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmljaFRleHRMZWFmLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGxlYWYgKHRleHQpIGVsZW1lbnQgaW4gdGhlIFJpY2hUZXh0LCB3aGljaCB3aWxsIGRpc3BsYXkgYSBzbmlwcGV0IG9mIFRleHQuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcbmltcG9ydCBQb29sLCB7IFRQb29sYWJsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9Qb29sLmpzJztcclxuaW1wb3J0IHsgRm9udCwgUmljaFRleHQsIFJpY2hUZXh0Q2xlYW5hYmxlLCBSaWNoVGV4dFV0aWxzLCBzY2VuZXJ5LCBUZXh0LCBUZXh0Qm91bmRzTWV0aG9kLCBUUGFpbnQgfSBmcm9tICcuLi8uLi9pbXBvcnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJpY2hUZXh0TGVhZiBleHRlbmRzIFJpY2hUZXh0Q2xlYW5hYmxlKCBUZXh0ICkgaW1wbGVtZW50cyBUUG9vbGFibGUge1xyXG5cclxuICBwdWJsaWMgbGVmdFNwYWNpbmchOiBudW1iZXI7XHJcbiAgcHVibGljIHJpZ2h0U3BhY2luZyE6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjb250ZW50OiBzdHJpbmcsIGlzTFRSOiBib29sZWFuLCBmb250OiBGb250IHwgc3RyaW5nLCBib3VuZHNNZXRob2Q6IFRleHRCb3VuZHNNZXRob2QsIGZpbGw6IFRQYWludCwgc3Ryb2tlOiBUUGFpbnQsIGxpbmVXaWR0aDogbnVtYmVyICkge1xyXG4gICAgc3VwZXIoICcnICk7XHJcblxyXG4gICAgdGhpcy5pbml0aWFsaXplKCBjb250ZW50LCBpc0xUUiwgZm9udCwgYm91bmRzTWV0aG9kLCBmaWxsLCBzdHJva2UsIGxpbmVXaWR0aCApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGluaXRpYWxpemUoIGNvbnRlbnQ6IHN0cmluZywgaXNMVFI6IGJvb2xlYW4sIGZvbnQ6IEZvbnQgfCBzdHJpbmcsIGJvdW5kc01ldGhvZDogVGV4dEJvdW5kc01ldGhvZCwgZmlsbDogVFBhaW50LCBzdHJva2U6IFRQYWludCwgbGluZVdpZHRoOiBudW1iZXIgKTogdGhpcyB7XHJcblxyXG4gICAgLy8gR3JhYiBhbGwgc3BhY2VzIGF0IHRoZSAobG9naWNhbCkgc3RhcnRcclxuICAgIGxldCB3aGl0ZXNwYWNlQmVmb3JlID0gJyc7XHJcbiAgICB3aGlsZSAoIGNvbnRlbnQuc3RhcnRzV2l0aCggJyAnICkgKSB7XHJcbiAgICAgIHdoaXRlc3BhY2VCZWZvcmUgKz0gJyAnO1xyXG4gICAgICBjb250ZW50ID0gY29udGVudC5zbGljZSggMSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdyYWIgYWxsIHNwYWNlcyBhdCB0aGUgKGxvZ2ljYWwpIGVuZFxyXG4gICAgbGV0IHdoaXRlc3BhY2VBZnRlciA9ICcnO1xyXG4gICAgd2hpbGUgKCBjb250ZW50LmVuZHNXaXRoKCAnICcgKSApIHtcclxuICAgICAgd2hpdGVzcGFjZUFmdGVyID0gJyAnO1xyXG4gICAgICBjb250ZW50ID0gY29udGVudC5zbGljZSggMCwgY29udGVudC5sZW5ndGggLSAxICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zdHJpbmcgPSBSaWNoVGV4dC5jb250ZW50VG9TdHJpbmcoIGNvbnRlbnQsIGlzTFRSICk7XHJcbiAgICB0aGlzLmJvdW5kc01ldGhvZCA9IGJvdW5kc01ldGhvZDtcclxuICAgIHRoaXMuZm9udCA9IGZvbnQ7XHJcbiAgICB0aGlzLmZpbGwgPSBmaWxsO1xyXG4gICAgdGhpcy5zdHJva2UgPSBzdHJva2U7XHJcbiAgICB0aGlzLmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcclxuXHJcbiAgICBjb25zdCBzcGFjaW5nQmVmb3JlID0gd2hpdGVzcGFjZUJlZm9yZS5sZW5ndGggPyBSaWNoVGV4dFV0aWxzLnNjcmF0Y2hUZXh0LnNldFN0cmluZyggd2hpdGVzcGFjZUJlZm9yZSApLnNldEZvbnQoIGZvbnQgKS53aWR0aCA6IDA7XHJcbiAgICBjb25zdCBzcGFjaW5nQWZ0ZXIgPSB3aGl0ZXNwYWNlQWZ0ZXIubGVuZ3RoID8gUmljaFRleHRVdGlscy5zY3JhdGNoVGV4dC5zZXRTdHJpbmcoIHdoaXRlc3BhY2VBZnRlciApLnNldEZvbnQoIGZvbnQgKS53aWR0aCA6IDA7XHJcblxyXG4gICAgLy8gVHVybiBsb2dpY2FsIHNwYWNpbmcgaW50byBkaXJlY3Rpb25hbFxyXG4gICAgdGhpcy5sZWZ0U3BhY2luZyA9IGlzTFRSID8gc3BhY2luZ0JlZm9yZSA6IHNwYWNpbmdBZnRlcjtcclxuICAgIHRoaXMucmlnaHRTcGFjaW5nID0gaXNMVFIgPyBzcGFjaW5nQWZ0ZXIgOiBzcGFjaW5nQmVmb3JlO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYW5zIHJlZmVyZW5jZXMgdGhhdCBjb3VsZCBjYXVzZSBtZW1vcnkgbGVha3MgKGFzIHRob3NlIHRoaW5ncyBtYXkgY29udGFpbiBvdGhlciByZWZlcmVuY2VzKS5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgY2xlYW4oKTogdm9pZCB7XHJcbiAgICBzdXBlci5jbGVhbigpO1xyXG5cclxuICAgIHRoaXMuZmlsbCA9IG51bGw7XHJcbiAgICB0aGlzLnN0cm9rZSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoaXMgbGVhZiB3aWxsIGZpdCBpbiB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiBzcGFjZSAoaW5jbHVkaW5nLCBpZiByZXF1aXJlZCwgdGhlIGFtb3VudCBvZiBzcGFjaW5nIG9uXHJcbiAgICogdGhlIHNpZGUpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaXRzSW4oIHdpZHRoQXZhaWxhYmxlOiBudW1iZXIsIGhhc0FkZGVkTGVhZlRvTGluZTogYm9vbGVhbiwgaXNDb250YWluZXJMVFI6IGJvb2xlYW4gKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy53aWR0aCArICggaGFzQWRkZWRMZWFmVG9MaW5lID8gKCBpc0NvbnRhaW5lckxUUiA/IHRoaXMubGVmdFNwYWNpbmcgOiB0aGlzLnJpZ2h0U3BhY2luZyApIDogMCApIDw9IHdpZHRoQXZhaWxhYmxlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZyZWVUb1Bvb2woKTogdm9pZCB7XHJcbiAgICBSaWNoVGV4dExlYWYucG9vbC5mcmVlVG9Qb29sKCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHBvb2wgPSBuZXcgUG9vbCggUmljaFRleHRMZWFmICk7XHJcbn1cclxuXHJcbnNjZW5lcnkucmVnaXN0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