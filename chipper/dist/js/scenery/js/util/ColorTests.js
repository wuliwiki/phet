// Copyright 2017-2021, University of Colorado Boulder

/**
 * Color tests
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Color } from '../imports.js';
QUnit.module('Color');
QUnit.test('RGB Hex', assert => {
  const ff00cc = new Color('#ff00cc');
  assert.equal(ff00cc.r, 0xff, 'ff00cc red');
  assert.equal(ff00cc.g, 0, 'ff00cc green');
  assert.equal(ff00cc.b, 0xcc, 'ff00cc blue');
  assert.equal(ff00cc.a, 1, 'ff00cc alpha');
  assert.equal(ff00cc.toCSS(), 'rgb(255,0,204)', 'ff00cc css');
  const f0c = new Color('#f0c');
  assert.equal(f0c.r, 0xff, 'f0c red');
  assert.equal(f0c.g, 0, 'f0c green');
  assert.equal(f0c.b, 0xcc, 'f0c blue');
  assert.equal(f0c.a, 1, 'f0c alpha');
  assert.equal(f0c.toCSS(), 'rgb(255,0,204)', 'f0c css');
});
QUnit.test('RGB Hex direct', assert => {
  const ff00cc = new Color(0xff00cc);
  assert.equal(ff00cc.r, 0xff, 'ff00cc red');
  assert.equal(ff00cc.g, 0, 'ff00cc green');
  assert.equal(ff00cc.b, 0xcc, 'ff00cc blue');
  assert.equal(ff00cc.a, 1, 'ff00cc alpha');
  assert.equal(ff00cc.toCSS(), 'rgb(255,0,204)', 'ff00cc css');
  const ff00ccHalf = new Color(0xff00cc, 0.5);
  assert.equal(ff00ccHalf.r, 0xff, 'ff00ccHalf red');
  assert.equal(ff00ccHalf.g, 0, 'ff00ccHalf green');
  assert.equal(ff00ccHalf.b, 0xcc, 'ff00ccHalf blue');
  assert.equal(ff00ccHalf.a, 0.5, 'ff00ccHalf alpha');
  assert.equal(ff00ccHalf.toCSS(), 'rgba(255,0,204,0.5)', 'ff00ccHalf css');
});
QUnit.test('RGB/A direct', assert => {
  const ff00cc = new Color(0xff, 0x00, 0xcc);
  assert.equal(ff00cc.r, 0xff, 'ff00cc red');
  assert.equal(ff00cc.g, 0, 'ff00cc green');
  assert.equal(ff00cc.b, 0xcc, 'ff00cc blue');
  assert.equal(ff00cc.a, 1, 'ff00cc alpha');
  assert.equal(ff00cc.toCSS(), 'rgb(255,0,204)', 'ff00cc css');
  const ff00ccHalf = new Color(0xff, 0x00, 0xcc, 0.5);
  assert.equal(ff00ccHalf.r, 0xff, 'ff00ccHalf red');
  assert.equal(ff00ccHalf.g, 0, 'ff00ccHalf green');
  assert.equal(ff00ccHalf.b, 0xcc, 'ff00ccHalf blue');
  assert.equal(ff00ccHalf.a, 0.5, 'ff00ccHalf alpha');
  assert.equal(ff00ccHalf.toCSS(), 'rgba(255,0,204,0.5)', 'ff00ccHalf css');
});
QUnit.test('Copy Constructor', assert => {
  const ff00cc = new Color(0xff, 0x00, 0xcc);
  const copy = new Color(ff00cc);
  assert.equal(ff00cc.r, copy.r);
  assert.equal(ff00cc.g, copy.g);
  assert.equal(ff00cc.b, copy.b);
  assert.equal(ff00cc.a, copy.a);
});
QUnit.test('Keywords', assert => {
  const yellow = new Color('yellow');
  assert.equal(yellow.r, 0xff, 'yellow red');
  assert.equal(yellow.g, 0xff, 'yellow green');
  assert.equal(yellow.b, 0x00, 'yellow blue');
  assert.equal(yellow.a, 1, 'yellow alpha');
  const transparent = new Color('transparent');
  assert.equal(transparent.r + transparent.g + transparent.b + transparent.a, 0, 'transparent sum');
});
QUnit.test('rgb', assert => {
  const rgb = new Color('rgb(100,250,10)');
  assert.equal(rgb.r, 100, 'rgb red');
  assert.equal(rgb.g, 250, 'rgb green');
  assert.equal(rgb.b, 10, 'rgb blue');
  assert.equal(rgb.a, 1, 'rgb alpha');
  assert.equal(rgb.toCSS(), 'rgb(100,250,10)', 'rgb css');
  const clamped = new Color('rgb(-50,120%,999)');
  assert.equal(clamped.r, 0, 'clamped rgb red');
  assert.equal(clamped.g, 255, 'clamped rgb green');
  assert.equal(clamped.b, 255, 'clamped rgb blue');
});
QUnit.test('rgba', assert => {
  const rgba = new Color('rgba(100,100%,0%,0)');
  assert.equal(rgba.r, 100, 'rgba red');
  assert.equal(rgba.g, 255, 'rgba green');
  assert.equal(rgba.b, 0, 'rgba blue');
  assert.equal(rgba.a, 0, 'rgba alpha');
  assert.equal(rgba.toCSS(), 'rgba(100,255,0,0)', 'rgba css');
  const clamped = new Color('rgba(-50,120%,999,255)');
  assert.equal(clamped.r, 0, 'clamped rgba red');
  assert.equal(clamped.g, 255, 'clamped rgba green');
  assert.equal(clamped.b, 255, 'clamped rgba blue');
  assert.equal(clamped.a, 1, 'clamped rgba alpha');
});
QUnit.test('hsl', assert => {
  let hsl = new Color('hsl(0,100%,50%)');
  assert.equal(hsl.r, 255, 'hsl 1 red');
  assert.equal(hsl.g, 0, 'hsl 1 green');
  assert.equal(hsl.b, 0, 'hsl 1 blue');
  hsl = new Color('hsl(0,0%,50%)');
  assert.equal(hsl.r, 128, 'hsl 2 red');
  assert.equal(hsl.g, 128, 'hsl 2 green');
  assert.equal(hsl.b, 128, 'hsl 2 blue');
  hsl = new Color('hsl(180,100%,50%)');
  assert.equal(hsl.r, 0, 'hsl 3 red');
  assert.equal(hsl.g, 255, 'hsl 3 green');
  assert.equal(hsl.b, 255, 'hsl 3 blue');
  hsl = new Color('hsl(90,25%,75%)');
  assert.equal(hsl.r, 191, 'hsl 4 red');
  assert.equal(hsl.g, 207, 'hsl 4 green');
  assert.equal(hsl.b, 175, 'hsl 4 blue');
});
QUnit.test('hsla', assert => {
  let hsl = new Color('hsla(90,25%,75%,0.25)');
  assert.equal(hsl.r, 191, 'hsla red');
  assert.equal(hsl.g, 207, 'hsla green');
  assert.equal(hsl.b, 175, 'hsla blue');
  assert.equal(hsl.a, 0.25, 'hsla alpha 0.25');
  hsl = new Color('hsla(90,25%,75%,.25)'); // without leading 0
  assert.equal(hsl.a, 0.25, 'hsla alpha .25');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb2xvciIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsImZmMDBjYyIsImVxdWFsIiwiciIsImciLCJiIiwiYSIsInRvQ1NTIiwiZjBjIiwiZmYwMGNjSGFsZiIsImNvcHkiLCJ5ZWxsb3ciLCJ0cmFuc3BhcmVudCIsInJnYiIsImNsYW1wZWQiLCJyZ2JhIiwiaHNsIl0sInNvdXJjZXMiOlsiQ29sb3JUZXN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb2xvciB0ZXN0c1xyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdDb2xvcicgKTtcclxuXHJcblFVbml0LnRlc3QoICdSR0IgSGV4JywgYXNzZXJ0ID0+IHtcclxuICBjb25zdCBmZjAwY2MgPSBuZXcgQ29sb3IoICcjZmYwMGNjJyApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjLnIsIDB4ZmYsICdmZjAwY2MgcmVkJyApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjLmcsIDAsICdmZjAwY2MgZ3JlZW4nICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2MuYiwgMHhjYywgJ2ZmMDBjYyBibHVlJyApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjLmEsIDEsICdmZjAwY2MgYWxwaGEnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2MudG9DU1MoKSwgJ3JnYigyNTUsMCwyMDQpJywgJ2ZmMDBjYyBjc3MnICk7XHJcblxyXG4gIGNvbnN0IGYwYyA9IG5ldyBDb2xvciggJyNmMGMnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmMGMuciwgMHhmZiwgJ2YwYyByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmMGMuZywgMCwgJ2YwYyBncmVlbicgKTtcclxuICBhc3NlcnQuZXF1YWwoIGYwYy5iLCAweGNjLCAnZjBjIGJsdWUnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmMGMuYSwgMSwgJ2YwYyBhbHBoYScgKTtcclxuICBhc3NlcnQuZXF1YWwoIGYwYy50b0NTUygpLCAncmdiKDI1NSwwLDIwNCknLCAnZjBjIGNzcycgKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJ1JHQiBIZXggZGlyZWN0JywgYXNzZXJ0ID0+IHtcclxuICBjb25zdCBmZjAwY2MgPSBuZXcgQ29sb3IoIDB4ZmYwMGNjICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2MuciwgMHhmZiwgJ2ZmMDBjYyByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2MuZywgMCwgJ2ZmMDBjYyBncmVlbicgKTtcclxuICBhc3NlcnQuZXF1YWwoIGZmMDBjYy5iLCAweGNjLCAnZmYwMGNjIGJsdWUnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2MuYSwgMSwgJ2ZmMDBjYyBhbHBoYScgKTtcclxuICBhc3NlcnQuZXF1YWwoIGZmMDBjYy50b0NTUygpLCAncmdiKDI1NSwwLDIwNCknLCAnZmYwMGNjIGNzcycgKTtcclxuXHJcbiAgY29uc3QgZmYwMGNjSGFsZiA9IG5ldyBDb2xvciggMHhmZjAwY2MsIDAuNSApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjSGFsZi5yLCAweGZmLCAnZmYwMGNjSGFsZiByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2NIYWxmLmcsIDAsICdmZjAwY2NIYWxmIGdyZWVuJyApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjSGFsZi5iLCAweGNjLCAnZmYwMGNjSGFsZiBibHVlJyApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjSGFsZi5hLCAwLjUsICdmZjAwY2NIYWxmIGFscGhhJyApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjSGFsZi50b0NTUygpLCAncmdiYSgyNTUsMCwyMDQsMC41KScsICdmZjAwY2NIYWxmIGNzcycgKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJ1JHQi9BIGRpcmVjdCcsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgZmYwMGNjID0gbmV3IENvbG9yKCAweGZmLCAweDAwLCAweGNjICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2MuciwgMHhmZiwgJ2ZmMDBjYyByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2MuZywgMCwgJ2ZmMDBjYyBncmVlbicgKTtcclxuICBhc3NlcnQuZXF1YWwoIGZmMDBjYy5iLCAweGNjLCAnZmYwMGNjIGJsdWUnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2MuYSwgMSwgJ2ZmMDBjYyBhbHBoYScgKTtcclxuICBhc3NlcnQuZXF1YWwoIGZmMDBjYy50b0NTUygpLCAncmdiKDI1NSwwLDIwNCknLCAnZmYwMGNjIGNzcycgKTtcclxuXHJcbiAgY29uc3QgZmYwMGNjSGFsZiA9IG5ldyBDb2xvciggMHhmZiwgMHgwMCwgMHhjYywgMC41ICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2NIYWxmLnIsIDB4ZmYsICdmZjAwY2NIYWxmIHJlZCcgKTtcclxuICBhc3NlcnQuZXF1YWwoIGZmMDBjY0hhbGYuZywgMCwgJ2ZmMDBjY0hhbGYgZ3JlZW4nICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2NIYWxmLmIsIDB4Y2MsICdmZjAwY2NIYWxmIGJsdWUnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2NIYWxmLmEsIDAuNSwgJ2ZmMDBjY0hhbGYgYWxwaGEnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBmZjAwY2NIYWxmLnRvQ1NTKCksICdyZ2JhKDI1NSwwLDIwNCwwLjUpJywgJ2ZmMDBjY0hhbGYgY3NzJyApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnQ29weSBDb25zdHJ1Y3RvcicsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgZmYwMGNjID0gbmV3IENvbG9yKCAweGZmLCAweDAwLCAweGNjICk7XHJcbiAgY29uc3QgY29weSA9IG5ldyBDb2xvciggZmYwMGNjICk7XHJcblxyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjLnIsIGNvcHkuciApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjLmcsIGNvcHkuZyApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjLmIsIGNvcHkuYiApO1xyXG4gIGFzc2VydC5lcXVhbCggZmYwMGNjLmEsIGNvcHkuYSApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnS2V5d29yZHMnLCBhc3NlcnQgPT4ge1xyXG4gIGNvbnN0IHllbGxvdyA9IG5ldyBDb2xvciggJ3llbGxvdycgKTtcclxuICBhc3NlcnQuZXF1YWwoIHllbGxvdy5yLCAweGZmLCAneWVsbG93IHJlZCcgKTtcclxuICBhc3NlcnQuZXF1YWwoIHllbGxvdy5nLCAweGZmLCAneWVsbG93IGdyZWVuJyApO1xyXG4gIGFzc2VydC5lcXVhbCggeWVsbG93LmIsIDB4MDAsICd5ZWxsb3cgYmx1ZScgKTtcclxuICBhc3NlcnQuZXF1YWwoIHllbGxvdy5hLCAxLCAneWVsbG93IGFscGhhJyApO1xyXG5cclxuICBjb25zdCB0cmFuc3BhcmVudCA9IG5ldyBDb2xvciggJ3RyYW5zcGFyZW50JyApO1xyXG4gIGFzc2VydC5lcXVhbCggdHJhbnNwYXJlbnQuciArIHRyYW5zcGFyZW50LmcgKyB0cmFuc3BhcmVudC5iICsgdHJhbnNwYXJlbnQuYSwgMCwgJ3RyYW5zcGFyZW50IHN1bScgKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJ3JnYicsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgcmdiID0gbmV3IENvbG9yKCAncmdiKDEwMCwyNTAsMTApJyApO1xyXG4gIGFzc2VydC5lcXVhbCggcmdiLnIsIDEwMCwgJ3JnYiByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCByZ2IuZywgMjUwLCAncmdiIGdyZWVuJyApO1xyXG4gIGFzc2VydC5lcXVhbCggcmdiLmIsIDEwLCAncmdiIGJsdWUnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCByZ2IuYSwgMSwgJ3JnYiBhbHBoYScgKTtcclxuICBhc3NlcnQuZXF1YWwoIHJnYi50b0NTUygpLCAncmdiKDEwMCwyNTAsMTApJywgJ3JnYiBjc3MnICk7XHJcblxyXG4gIGNvbnN0IGNsYW1wZWQgPSBuZXcgQ29sb3IoICdyZ2IoLTUwLDEyMCUsOTk5KScgKTtcclxuICBhc3NlcnQuZXF1YWwoIGNsYW1wZWQuciwgMCwgJ2NsYW1wZWQgcmdiIHJlZCcgKTtcclxuICBhc3NlcnQuZXF1YWwoIGNsYW1wZWQuZywgMjU1LCAnY2xhbXBlZCByZ2IgZ3JlZW4nICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBjbGFtcGVkLmIsIDI1NSwgJ2NsYW1wZWQgcmdiIGJsdWUnICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICdyZ2JhJywgYXNzZXJ0ID0+IHtcclxuICBjb25zdCByZ2JhID0gbmV3IENvbG9yKCAncmdiYSgxMDAsMTAwJSwwJSwwKScgKTtcclxuICBhc3NlcnQuZXF1YWwoIHJnYmEuciwgMTAwLCAncmdiYSByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCByZ2JhLmcsIDI1NSwgJ3JnYmEgZ3JlZW4nICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCByZ2JhLmIsIDAsICdyZ2JhIGJsdWUnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCByZ2JhLmEsIDAsICdyZ2JhIGFscGhhJyApO1xyXG4gIGFzc2VydC5lcXVhbCggcmdiYS50b0NTUygpLCAncmdiYSgxMDAsMjU1LDAsMCknLCAncmdiYSBjc3MnICk7XHJcblxyXG4gIGNvbnN0IGNsYW1wZWQgPSBuZXcgQ29sb3IoICdyZ2JhKC01MCwxMjAlLDk5OSwyNTUpJyApO1xyXG4gIGFzc2VydC5lcXVhbCggY2xhbXBlZC5yLCAwLCAnY2xhbXBlZCByZ2JhIHJlZCcgKTtcclxuICBhc3NlcnQuZXF1YWwoIGNsYW1wZWQuZywgMjU1LCAnY2xhbXBlZCByZ2JhIGdyZWVuJyApO1xyXG4gIGFzc2VydC5lcXVhbCggY2xhbXBlZC5iLCAyNTUsICdjbGFtcGVkIHJnYmEgYmx1ZScgKTtcclxuICBhc3NlcnQuZXF1YWwoIGNsYW1wZWQuYSwgMSwgJ2NsYW1wZWQgcmdiYSBhbHBoYScgKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJ2hzbCcsIGFzc2VydCA9PiB7XHJcbiAgbGV0IGhzbCA9IG5ldyBDb2xvciggJ2hzbCgwLDEwMCUsNTAlKScgKTtcclxuICBhc3NlcnQuZXF1YWwoIGhzbC5yLCAyNTUsICdoc2wgMSByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBoc2wuZywgMCwgJ2hzbCAxIGdyZWVuJyApO1xyXG4gIGFzc2VydC5lcXVhbCggaHNsLmIsIDAsICdoc2wgMSBibHVlJyApO1xyXG5cclxuICBoc2wgPSBuZXcgQ29sb3IoICdoc2woMCwwJSw1MCUpJyApO1xyXG4gIGFzc2VydC5lcXVhbCggaHNsLnIsIDEyOCwgJ2hzbCAyIHJlZCcgKTtcclxuICBhc3NlcnQuZXF1YWwoIGhzbC5nLCAxMjgsICdoc2wgMiBncmVlbicgKTtcclxuICBhc3NlcnQuZXF1YWwoIGhzbC5iLCAxMjgsICdoc2wgMiBibHVlJyApO1xyXG5cclxuICBoc2wgPSBuZXcgQ29sb3IoICdoc2woMTgwLDEwMCUsNTAlKScgKTtcclxuICBhc3NlcnQuZXF1YWwoIGhzbC5yLCAwLCAnaHNsIDMgcmVkJyApO1xyXG4gIGFzc2VydC5lcXVhbCggaHNsLmcsIDI1NSwgJ2hzbCAzIGdyZWVuJyApO1xyXG4gIGFzc2VydC5lcXVhbCggaHNsLmIsIDI1NSwgJ2hzbCAzIGJsdWUnICk7XHJcblxyXG4gIGhzbCA9IG5ldyBDb2xvciggJ2hzbCg5MCwyNSUsNzUlKScgKTtcclxuICBhc3NlcnQuZXF1YWwoIGhzbC5yLCAxOTEsICdoc2wgNCByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBoc2wuZywgMjA3LCAnaHNsIDQgZ3JlZW4nICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBoc2wuYiwgMTc1LCAnaHNsIDQgYmx1ZScgKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJ2hzbGEnLCBhc3NlcnQgPT4ge1xyXG4gIGxldCBoc2wgPSBuZXcgQ29sb3IoICdoc2xhKDkwLDI1JSw3NSUsMC4yNSknICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBoc2wuciwgMTkxLCAnaHNsYSByZWQnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBoc2wuZywgMjA3LCAnaHNsYSBncmVlbicgKTtcclxuICBhc3NlcnQuZXF1YWwoIGhzbC5iLCAxNzUsICdoc2xhIGJsdWUnICk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBoc2wuYSwgMC4yNSwgJ2hzbGEgYWxwaGEgMC4yNScgKTtcclxuXHJcbiAgaHNsID0gbmV3IENvbG9yKCAnaHNsYSg5MCwyNSUsNzUlLC4yNSknICk7IC8vIHdpdGhvdXQgbGVhZGluZyAwXHJcbiAgYXNzZXJ0LmVxdWFsKCBoc2wuYSwgMC4yNSwgJ2hzbGEgYWxwaGEgLjI1JyApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEtBQUssUUFBUSxlQUFlO0FBRXJDQyxLQUFLLENBQUNDLE1BQU0sQ0FBRSxPQUFRLENBQUM7QUFFdkJELEtBQUssQ0FBQ0UsSUFBSSxDQUFFLFNBQVMsRUFBRUMsTUFBTSxJQUFJO0VBQy9CLE1BQU1DLE1BQU0sR0FBRyxJQUFJTCxLQUFLLENBQUUsU0FBVSxDQUFDO0VBQ3JDSSxNQUFNLENBQUNFLEtBQUssQ0FBRUQsTUFBTSxDQUFDRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQWEsQ0FBQztFQUM1Q0gsTUFBTSxDQUFDRSxLQUFLLENBQUVELE1BQU0sQ0FBQ0csQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFlLENBQUM7RUFDM0NKLE1BQU0sQ0FBQ0UsS0FBSyxDQUFFRCxNQUFNLENBQUNJLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYyxDQUFDO0VBQzdDTCxNQUFNLENBQUNFLEtBQUssQ0FBRUQsTUFBTSxDQUFDSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQWUsQ0FBQztFQUMz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