// Copyright 2018-2023, University of Colorado Boulder

/**
 * "definition" type for generalized color paints (anything that can be given to a fill/stroke that represents just a
 * solid color). Does NOT include any type of gradient or pattern.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../axon/js/Property.js';
import ReadOnlyProperty from '../../../axon/js/ReadOnlyProperty.js';
import IOType from '../../../tandem/js/types/IOType.js';
import NullableIO from '../../../tandem/js/types/NullableIO.js';
import OrIO from '../../../tandem/js/types/OrIO.js';
import ReferenceIO from '../../../tandem/js/types/ReferenceIO.js';
import StringIO from '../../../tandem/js/types/StringIO.js';
import { Color, scenery } from '../imports.js';
const ColorDef = {
  /**
   * Returns whether the parameter is considered to be a ColorDef.
   */
  isColorDef(color) {
    return color === null || typeof color === 'string' || color instanceof Color || color instanceof ReadOnlyProperty && (color.value === null || typeof color.value === 'string' || color.value instanceof Color);
  },
  scenerySerialize(color) {
    if (color === null) {
      return 'null';
    } else if (color instanceof Color) {
      return `'${color.toCSS()}'`;
    } else if (typeof color === 'string') {
      return `'${color}'`;
    } else {
      // Property fallback
      return ColorDef.scenerySerialize(color.value);
    }
  },
  // phet-io IOType for serialization and documentation
  ColorDefIO: null // Defined below, typed here
};

ColorDef.ColorDefIO = new IOType('ColorDefIO', {
  isValidValue: ColorDef.isColorDef,
  supertype: NullableIO(OrIO([StringIO, Color.ColorIO, ReferenceIO(Property.PropertyIO(NullableIO(OrIO([StringIO, Color.ColorIO]))))]))
});
scenery.register('ColorDef', ColorDef);
export default ColorDef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlJlYWRPbmx5UHJvcGVydHkiLCJJT1R5cGUiLCJOdWxsYWJsZUlPIiwiT3JJTyIsIlJlZmVyZW5jZUlPIiwiU3RyaW5nSU8iLCJDb2xvciIsInNjZW5lcnkiLCJDb2xvckRlZiIsImlzQ29sb3JEZWYiLCJjb2xvciIsInZhbHVlIiwic2NlbmVyeVNlcmlhbGl6ZSIsInRvQ1NTIiwiQ29sb3JEZWZJTyIsImlzVmFsaWRWYWx1ZSIsInN1cGVydHlwZSIsIkNvbG9ySU8iLCJQcm9wZXJ0eUlPIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb2xvckRlZi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBcImRlZmluaXRpb25cIiB0eXBlIGZvciBnZW5lcmFsaXplZCBjb2xvciBwYWludHMgKGFueXRoaW5nIHRoYXQgY2FuIGJlIGdpdmVuIHRvIGEgZmlsbC9zdHJva2UgdGhhdCByZXByZXNlbnRzIGp1c3QgYVxyXG4gKiBzb2xpZCBjb2xvcikuIERvZXMgTk9UIGluY2x1ZGUgYW55IHR5cGUgb2YgZ3JhZGllbnQgb3IgcGF0dGVybi5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9SZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bGxhYmxlSU8gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bGxhYmxlSU8uanMnO1xyXG5pbXBvcnQgT3JJTyBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvT3JJTy5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJTyBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvUmVmZXJlbmNlSU8uanMnO1xyXG5pbXBvcnQgU3RyaW5nSU8gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0cmluZ0lPLmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIFRDb2xvciwgc2NlbmVyeSB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xyXG5cclxuY29uc3QgQ29sb3JEZWYgPSB7XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXJhbWV0ZXIgaXMgY29uc2lkZXJlZCB0byBiZSBhIENvbG9yRGVmLlxyXG4gICAqL1xyXG4gIGlzQ29sb3JEZWYoIGNvbG9yOiB1bmtub3duICk6IGNvbG9yIGlzIFRDb2xvciB7XHJcbiAgICByZXR1cm4gY29sb3IgPT09IG51bGwgfHxcclxuICAgICAgICAgICB0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgY29sb3IgaW5zdGFuY2VvZiBDb2xvciB8fFxyXG4gICAgICAgICAgICggY29sb3IgaW5zdGFuY2VvZiBSZWFkT25seVByb3BlcnR5ICYmIChcclxuICAgICAgICAgICAgIGNvbG9yLnZhbHVlID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICB0eXBlb2YgY29sb3IudmFsdWUgPT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgICBjb2xvci52YWx1ZSBpbnN0YW5jZW9mIENvbG9yXHJcbiAgICAgICAgICAgKSApO1xyXG4gIH0sXHJcblxyXG4gIHNjZW5lcnlTZXJpYWxpemUoIGNvbG9yOiBUQ29sb3IgKTogc3RyaW5nIHtcclxuICAgIGlmICggY29sb3IgPT09IG51bGwgKSB7XHJcbiAgICAgIHJldHVybiAnbnVsbCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggY29sb3IgaW5zdGFuY2VvZiBDb2xvciApIHtcclxuICAgICAgcmV0dXJuIGAnJHtjb2xvci50b0NTUygpfSdgO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIHJldHVybiBgJyR7Y29sb3J9J2A7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gUHJvcGVydHkgZmFsbGJhY2tcclxuICAgICAgcmV0dXJuIENvbG9yRGVmLnNjZW5lcnlTZXJpYWxpemUoIGNvbG9yLnZhbHVlICk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gcGhldC1pbyBJT1R5cGUgZm9yIHNlcmlhbGl6YXRpb24gYW5kIGRvY3VtZW50YXRpb25cclxuICBDb2xvckRlZklPOiBudWxsIGFzIHVua25vd24gYXMgSU9UeXBlIC8vIERlZmluZWQgYmVsb3csIHR5cGVkIGhlcmVcclxufTtcclxuXHJcbkNvbG9yRGVmLkNvbG9yRGVmSU8gPSBuZXcgSU9UeXBlKCAnQ29sb3JEZWZJTycsIHtcclxuICBpc1ZhbGlkVmFsdWU6IENvbG9yRGVmLmlzQ29sb3JEZWYsXHJcbiAgc3VwZXJ0eXBlOiBOdWxsYWJsZUlPKCBPcklPKCBbIFN0cmluZ0lPLCBDb2xvci5Db2xvcklPLCBSZWZlcmVuY2VJTyggUHJvcGVydHkuUHJvcGVydHlJTyggTnVsbGFibGVJTyggT3JJTyggWyBTdHJpbmdJTywgQ29sb3IuQ29sb3JJTyBdICkgKSApICkgXSApIClcclxufSApO1xyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ0NvbG9yRGVmJywgQ29sb3JEZWYgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbG9yRGVmOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsZ0JBQWdCLE1BQU0sc0NBQXNDO0FBQ25FLE9BQU9DLE1BQU0sTUFBTSxvQ0FBb0M7QUFDdkQsT0FBT0MsVUFBVSxNQUFNLHdDQUF3QztBQUMvRCxPQUFPQyxJQUFJLE1BQU0sa0NBQWtDO0FBQ25ELE9BQU9DLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0MsUUFBUSxNQUFNLHNDQUFzQztBQUMzRCxTQUFTQyxLQUFLLEVBQVVDLE9BQU8sUUFBUSxlQUFlO0FBRXRELE1BQU1DLFFBQVEsR0FBRztFQUNmO0FBQ0Y7QUFDQTtFQUNFQyxVQUFVQSxDQUFFQyxLQUFjLEVBQW9CO0lBQzVDLE9BQU9BLEtBQUssS0FBSyxJQUFJLElBQ2QsT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFDekJBLEtBQUssWUFBWUosS0FBSyxJQUNwQkksS0FBSyxZQUFZVixnQkFBZ0IsS0FDakNVLEtBQUssQ0FBQ0MsS0FBSyxLQUFLLElBQUksSUFDcEIsT0FBT0QsS0FBSyxDQUFDQyxLQUFLLEtBQUssUUFBUSxJQUMvQkQsS0FBSyxDQUFDQyxLQUFLLFlBQVlMLEtBQUssQ0FDM0I7RUFDWixDQUFDO0VBRURNLGdCQUFnQkEsQ0FBRUYsS0FBYSxFQUFXO0lBQ3hDLElBQUtBLEtBQUssS0FBSyxJQUFJLEVBQUc7TUFDcEIsT0FBTyxNQUFNO0lBQ2YsQ0FBQyxNQUNJLElBQUtBLEtBQUssWUFBWUosS0FBSyxFQUFHO01BQ2pDLE9BQVEsSUFBR0ksS0FBSyxDQUFDRyxLQUFLLENBQUMsQ0FBRSxHQUFFO0lBQzdCLENBQUMsTUFDSSxJQUFLLE9BQU9ILEtBQUssS0FBSyxRQUFRLEVBQUc7TUFDcEMsT0FBUSxJQUFHQSxLQUFNLEdBQUU7SUFDckIsQ0FBQyxNQUNJO01BQ0g7TUFDQSxPQUFPRixRQUFRLENBQUNJLGdCQUFnQixDQUFFRixLQUFLLENBQUNDLEtBQU0sQ0FBQztJQUNqRDtFQUNGLENBQUM7RUFFRDtFQUNBRyxVQUFVLEVBQUUsSUFBeUIsQ0FBQztBQUN4QyxDQUFDOztBQUVETixRQUFRLENBQUNNLFVBQVUsR0FBRyxJQUFJYixNQUFNLENBQUUsWUFBWSxFQUFFO0VBQzlDYyxZQUFZLEVBQUVQLFFBQVEsQ0FBQ0MsVUFBVTtFQUNqQ08sU0FBUyxFQUFFZCxVQUFVLENBQUVDLElBQUksQ0FBRSxDQUFFRSxRQUFRLEVBQUVDLEtBQUssQ0FBQ1csT0FBTyxFQUFFYixXQUFXLENBQUVMLFFBQVEsQ0FBQ21CLFVBQVUsQ0FBRWhCLFVBQVUsQ0FBRUMsSUFBSSxDQUFFLENBQUVFLFFBQVEsRUFBRUMsS0FBSyxDQUFDVyxPQUFPLENBQUcsQ0FBRSxDQUFFLENBQUUsQ0FBQyxDQUFHLENBQUU7QUFDdEosQ0FBRSxDQUFDO0FBRUhWLE9BQU8sQ0FBQ1ksUUFBUSxDQUFFLFVBQVUsRUFBRVgsUUFBUyxDQUFDO0FBRXhDLGVBQWVBLFFBQVEifQ==