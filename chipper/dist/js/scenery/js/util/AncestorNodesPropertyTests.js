// Copyright 2023, University of Colorado Boulder

/**
 * QUnit tests for AncestorNodesPropertyTests
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { AncestorNodesProperty, Node } from '../imports.js';
QUnit.module('AncestorNodesProperty');
QUnit.test('AncestorNodesProperty', assert => {
  const a = new Node();
  const b = new Node();
  const c = new Node();
  const d = new Node();
  b.addChild(a);
  const ancestorNodesProperty = new AncestorNodesProperty(a);
  const checkAncestors = (nodes, message) => {
    assert.ok(ancestorNodesProperty.value.size === nodes.length, message);
    nodes.forEach(node => {
      assert.ok(ancestorNodesProperty.value.has(node), message);
    });
  };

  // b -> a
  checkAncestors([b], 'initial');

  // a
  b.removeChild(a);
  checkAncestors([], 'removed from b');

  // c -> b -> a
  c.addChild(b);
  b.addChild(a);
  checkAncestors([b, c], 'added two at a time');

  //    b
  //  /   \
  // c ->  a
  c.addChild(a);
  checkAncestors([b, c], 'DAG, still the same');

  //    b
  //  /
  // c ->  a
  b.removeChild(a);
  checkAncestors([c], 'only c directly');

  //         b
  //       /
  // d -> c ->  a
  d.addChild(c);
  checkAncestors([c, d], 'added ancestor!');

  //    b
  //     \
  // d -> c ->  a
  c.removeChild(b);
  b.addChild(c);
  checkAncestors([b, c, d], 'moved b to ancestor');

  // a
  c.removeChild(a);
  checkAncestors([], 'nothing');

  //    b
  //     \
  // d -> c ->  a
  c.addChild(a);
  checkAncestors([b, c, d], 'back');
  ancestorNodesProperty.dispose();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmNlc3Rvck5vZGVzUHJvcGVydHkiLCJOb2RlIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwiYSIsImIiLCJjIiwiZCIsImFkZENoaWxkIiwiYW5jZXN0b3JOb2Rlc1Byb3BlcnR5IiwiY2hlY2tBbmNlc3RvcnMiLCJub2RlcyIsIm1lc3NhZ2UiLCJvayIsInZhbHVlIiwic2l6ZSIsImxlbmd0aCIsImZvckVhY2giLCJub2RlIiwiaGFzIiwicmVtb3ZlQ2hpbGQiLCJkaXNwb3NlIl0sInNvdXJjZXMiOlsiQW5jZXN0b3JOb2Rlc1Byb3BlcnR5VGVzdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFFVbml0IHRlc3RzIGZvciBBbmNlc3Rvck5vZGVzUHJvcGVydHlUZXN0c1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQW5jZXN0b3JOb2Rlc1Byb3BlcnR5LCBOb2RlIH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdBbmNlc3Rvck5vZGVzUHJvcGVydHknICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnQW5jZXN0b3JOb2Rlc1Byb3BlcnR5JywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgY29uc3QgYSA9IG5ldyBOb2RlKCk7XHJcbiAgY29uc3QgYiA9IG5ldyBOb2RlKCk7XHJcbiAgY29uc3QgYyA9IG5ldyBOb2RlKCk7XHJcbiAgY29uc3QgZCA9IG5ldyBOb2RlKCk7XHJcblxyXG4gIGIuYWRkQ2hpbGQoIGEgKTtcclxuXHJcbiAgY29uc3QgYW5jZXN0b3JOb2Rlc1Byb3BlcnR5ID0gbmV3IEFuY2VzdG9yTm9kZXNQcm9wZXJ0eSggYSApO1xyXG5cclxuICBjb25zdCBjaGVja0FuY2VzdG9ycyA9ICggbm9kZXM6IE5vZGVbXSwgbWVzc2FnZTogc3RyaW5nICkgPT4ge1xyXG4gICAgYXNzZXJ0Lm9rKCBhbmNlc3Rvck5vZGVzUHJvcGVydHkudmFsdWUuc2l6ZSA9PT0gbm9kZXMubGVuZ3RoLCBtZXNzYWdlICk7XHJcblxyXG4gICAgbm9kZXMuZm9yRWFjaCggbm9kZSA9PiB7XHJcbiAgICAgIGFzc2VydC5vayggYW5jZXN0b3JOb2Rlc1Byb3BlcnR5LnZhbHVlLmhhcyggbm9kZSApLCBtZXNzYWdlICk7XHJcbiAgICB9ICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gYiAtPiBhXHJcbiAgY2hlY2tBbmNlc3RvcnMoIFsgYiBdLCAnaW5pdGlhbCcgKTtcclxuXHJcbiAgLy8gYVxyXG4gIGIucmVtb3ZlQ2hpbGQoIGEgKTtcclxuICBjaGVja0FuY2VzdG9ycyggW10sICdyZW1vdmVkIGZyb20gYicgKTtcclxuXHJcbiAgLy8gYyAtPiBiIC0+IGFcclxuICBjLmFkZENoaWxkKCBiICk7XHJcbiAgYi5hZGRDaGlsZCggYSApO1xyXG4gIGNoZWNrQW5jZXN0b3JzKCBbIGIsIGMgXSwgJ2FkZGVkIHR3byBhdCBhIHRpbWUnICk7XHJcblxyXG4gIC8vICAgIGJcclxuICAvLyAgLyAgIFxcXHJcbiAgLy8gYyAtPiAgYVxyXG4gIGMuYWRkQ2hpbGQoIGEgKTtcclxuICBjaGVja0FuY2VzdG9ycyggWyBiLCBjIF0sICdEQUcsIHN0aWxsIHRoZSBzYW1lJyApO1xyXG5cclxuICAvLyAgICBiXHJcbiAgLy8gIC9cclxuICAvLyBjIC0+ICBhXHJcbiAgYi5yZW1vdmVDaGlsZCggYSApO1xyXG4gIGNoZWNrQW5jZXN0b3JzKCBbIGMgXSwgJ29ubHkgYyBkaXJlY3RseScgKTtcclxuXHJcbiAgLy8gICAgICAgICBiXHJcbiAgLy8gICAgICAgL1xyXG4gIC8vIGQgLT4gYyAtPiAgYVxyXG4gIGQuYWRkQ2hpbGQoIGMgKTtcclxuICBjaGVja0FuY2VzdG9ycyggWyBjLCBkIF0sICdhZGRlZCBhbmNlc3RvciEnICk7XHJcblxyXG4gIC8vICAgIGJcclxuICAvLyAgICAgXFxcclxuICAvLyBkIC0+IGMgLT4gIGFcclxuICBjLnJlbW92ZUNoaWxkKCBiICk7XHJcbiAgYi5hZGRDaGlsZCggYyApO1xyXG4gIGNoZWNrQW5jZXN0b3JzKCBbIGIsIGMsIGQgXSwgJ21vdmVkIGIgdG8gYW5jZXN0b3InICk7XHJcblxyXG4gIC8vIGFcclxuICBjLnJlbW92ZUNoaWxkKCBhICk7XHJcbiAgY2hlY2tBbmNlc3RvcnMoIFtdLCAnbm90aGluZycgKTtcclxuXHJcbiAgLy8gICAgYlxyXG4gIC8vICAgICBcXFxyXG4gIC8vIGQgLT4gYyAtPiAgYVxyXG4gIGMuYWRkQ2hpbGQoIGEgKTtcclxuICBjaGVja0FuY2VzdG9ycyggWyBiLCBjLCBkIF0sICdiYWNrJyApO1xyXG5cclxuICBhbmNlc3Rvck5vZGVzUHJvcGVydHkuZGlzcG9zZSgpO1xyXG59ICk7XHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EscUJBQXFCLEVBQUVDLElBQUksUUFBUSxlQUFlO0FBRTNEQyxLQUFLLENBQUNDLE1BQU0sQ0FBRSx1QkFBd0IsQ0FBQztBQUV2Q0QsS0FBSyxDQUFDRSxJQUFJLENBQUUsdUJBQXVCLEVBQUVDLE1BQU0sSUFBSTtFQUU3QyxNQUFNQyxDQUFDLEdBQUcsSUFBSUwsSUFBSSxDQUFDLENBQUM7RUFDcEIsTUFBTU0sQ0FBQyxHQUFHLElBQUlOLElBQUksQ0FBQyxDQUFDO0VBQ3BCLE1BQU1PLENBQUMsR0FBRyxJQUFJUCxJQUFJLENBQUMsQ0FBQztFQUNwQixNQUFNUSxDQUFDLEdBQUcsSUFBSVIsSUFBSSxDQUFDLENBQUM7RUFFcEJNLENBQUMsQ0FBQ0csUUFBUSxDQUFFSixDQUFFLENBQUM7RUFFZixNQUFNSyxxQkFBcUIsR0FBRyxJQUFJWCxxQkFBcUIsQ0FBRU0sQ0FBRSxDQUFDO0VBRTVELE1BQU1NLGNBQWMsR0FBR0EsQ0FBRUMsS0FBYSxFQUFFQyxPQUFlLEtBQU07SUFDM0RULE1BQU0sQ0FBQ1UsRUFBRSxDQUFFSixxQkFBcUIsQ0FBQ0ssS0FBSyxDQUFDQyxJQUFJLEtBQUtKLEtBQUssQ0FBQ0ssTUFBTSxFQUFFSixPQUFRLENBQUM7SUFFdkVELEtBQUssQ0FBQ00sT0FBTyxDQUFFQyxJQUFJLElBQUk7TUFDckJmLE1BQU0sQ0FBQ1UsRUFBRSxDQUFFSixxQkFBcUIsQ0FBQ0ssS0FBSyxDQUFDSyxHQUFHLENBQUVELElBQUssQ0FBQyxFQUFFTixPQUFRLENBQUM7SUFDL0QsQ0FBRSxDQUFDO0VBQ0wsQ0FBQzs7RUFFRDtFQUNBRixjQUFjLENBQUUsQ0FBRUwsQ0FBQyxDQUFFLEVBQUUsU0FBVSxDQUFDOztFQUVsQztFQUNBQSxDQUFDLENBQUNlLFdBQVcsQ0FBRWhCLENBQUUsQ0FBQztFQUNsQk0sY0FBYyxDQUFFLEVBQUUsRUFBRSxnQkFBaUIsQ0FBQzs7RUFFdEM7RUFDQUosQ0FBQyxDQUFDRSxRQUFRLENBQUVILENBQUUsQ0FBQztFQUNmQSxDQUFDLENBQUNHLFFBQVEsQ0FBRUosQ0FBRSxDQUFDO0VBQ2ZNLGNBQWMsQ0FBRSxDQUFFTCxDQUFDLEVBQUVDLENBQUMsQ0FBRSxFQUFFLHFCQUFzQixDQUFDOztFQUVqRDtFQUNBO0VBQ0E7RUFDQUEsQ0FBQyxDQUFDRSxRQUFRLENBQUVKLENBQUUsQ0FBQztFQUNmTSxjQUFjLENBQUUsQ0FBRUwsQ0FBQyxFQUFFQyxDQUFDLENBQUUsRUFBRSxxQkFBc0IsQ0FBQzs7RUFFakQ7RUFDQTtFQUNBO0VBQ0FELENBQUMsQ0FBQ2UsV0FBVyxDQUFFaEIsQ0FBRSxDQUFDO0VBQ2xCTSxjQUFjLENBQUUsQ0FBRUosQ0FBQyxDQUFFLEVBQUUsaUJBQWtCLENBQUM7O0VBRTFDO0VBQ0E7RUFDQTtFQUNBQyxDQUFDLENBQUNDLFFBQVEsQ0FBRUYsQ0FBRSxDQUFDO0VBQ2ZJLGNBQWMsQ0FBRSxDQUFFSixDQUFDLEVBQUVDLENBQUMsQ0FBRSxFQUFFLGlCQUFrQixDQUFDOztFQUU3QztFQUNBO0VBQ0E7RUFDQUQsQ0FBQyxDQUFDYyxXQUFXLENBQUVmLENBQUUsQ0FBQztFQUNsQkEsQ0FBQyxDQUFDRyxRQUFRLENBQUVGLENBQUUsQ0FBQztFQUNmSSxjQUFjLENBQUUsQ0FBRUwsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsQ0FBRSxFQUFFLHFCQUFzQixDQUFDOztFQUVwRDtFQUNBRCxDQUFDLENBQUNjLFdBQVcsQ0FBRWhCLENBQUUsQ0FBQztFQUNsQk0sY0FBYyxDQUFFLEVBQUUsRUFBRSxTQUFVLENBQUM7O0VBRS9CO0VBQ0E7RUFDQTtFQUNBSixDQUFDLENBQUNFLFFBQVEsQ0FBRUosQ0FBRSxDQUFDO0VBQ2ZNLGNBQWMsQ0FBRSxDQUFFTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxDQUFFLEVBQUUsTUFBTyxDQUFDO0VBRXJDRSxxQkFBcUIsQ0FBQ1ksT0FBTyxDQUFDLENBQUM7QUFDakMsQ0FBRSxDQUFDIn0=