// Copyright 2013-2023, University of Colorado Boulder

/**
 * A pattern that will deliver a fill or stroke that will repeat an image in both directions (x and y).
 *
 * TODO: future support for repeat-x, repeat-y or no-repeat (needs SVG support)
 * TODO: support scene or other various content (SVG is flexible, can backport to canvas)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { Paint, scenery, SVGPattern } from '../imports.js';
export default class Pattern extends Paint {
  /**
   * @param image - The image to use as a repeated pattern.
   */
  constructor(image) {
    super();
    this.image = image;

    // Use the global scratch canvas instead of creating a new Canvas
    // @ts-expect-error TODO: scenery namespace
    this.canvasPattern = scenery.scratchContext.createPattern(image, 'repeat');
  }

  /**
   * Returns an object that can be passed to a Canvas context's fillStyle or strokeStyle.
   */
  getCanvasStyle() {
    return this.canvasPattern;
  }

  /**
   * Creates an SVG paint object for creating/updating the SVG equivalent definition.
   */
  createSVGPaint(svgBlock) {
    return SVGPattern.pool.create(this);
  }

  /**
   * Returns a string form of this object
   */
  toString() {
    return `new phet.scenery.Pattern( $( '<img src="${this.image.src}"/>' )[0] )`;
  }
}
Pattern.prototype.isPattern = true;
scenery.register('Pattern', Pattern);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYWludCIsInNjZW5lcnkiLCJTVkdQYXR0ZXJuIiwiUGF0dGVybiIsImNvbnN0cnVjdG9yIiwiaW1hZ2UiLCJjYW52YXNQYXR0ZXJuIiwic2NyYXRjaENvbnRleHQiLCJjcmVhdGVQYXR0ZXJuIiwiZ2V0Q2FudmFzU3R5bGUiLCJjcmVhdGVTVkdQYWludCIsInN2Z0Jsb2NrIiwicG9vbCIsImNyZWF0ZSIsInRvU3RyaW5nIiwic3JjIiwicHJvdG90eXBlIiwiaXNQYXR0ZXJuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQYXR0ZXJuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgcGF0dGVybiB0aGF0IHdpbGwgZGVsaXZlciBhIGZpbGwgb3Igc3Ryb2tlIHRoYXQgd2lsbCByZXBlYXQgYW4gaW1hZ2UgaW4gYm90aCBkaXJlY3Rpb25zICh4IGFuZCB5KS5cclxuICpcclxuICogVE9ETzogZnV0dXJlIHN1cHBvcnQgZm9yIHJlcGVhdC14LCByZXBlYXQteSBvciBuby1yZXBlYXQgKG5lZWRzIFNWRyBzdXBwb3J0KVxyXG4gKiBUT0RPOiBzdXBwb3J0IHNjZW5lIG9yIG90aGVyIHZhcmlvdXMgY29udGVudCAoU1ZHIGlzIGZsZXhpYmxlLCBjYW4gYmFja3BvcnQgdG8gY2FudmFzKVxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgUGFpbnQsIHNjZW5lcnksIFNWR0Jsb2NrLCBTVkdQYXR0ZXJuIH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXR0ZXJuIGV4dGVuZHMgUGFpbnQge1xyXG5cclxuICBwdWJsaWMgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgcHVibGljIGNhbnZhc1BhdHRlcm46IENhbnZhc1BhdHRlcm47XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBpbWFnZSAtIFRoZSBpbWFnZSB0byB1c2UgYXMgYSByZXBlYXRlZCBwYXR0ZXJuLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcclxuXHJcbiAgICAvLyBVc2UgdGhlIGdsb2JhbCBzY3JhdGNoIGNhbnZhcyBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IENhbnZhc1xyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBzY2VuZXJ5IG5hbWVzcGFjZVxyXG4gICAgdGhpcy5jYW52YXNQYXR0ZXJuID0gc2NlbmVyeS5zY3JhdGNoQ29udGV4dC5jcmVhdGVQYXR0ZXJuKCBpbWFnZSwgJ3JlcGVhdCcgKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBDYW52YXMgY29udGV4dCdzIGZpbGxTdHlsZSBvciBzdHJva2VTdHlsZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2FudmFzU3R5bGUoKTogQ2FudmFzUGF0dGVybiB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW52YXNQYXR0ZXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbiBTVkcgcGFpbnQgb2JqZWN0IGZvciBjcmVhdGluZy91cGRhdGluZyB0aGUgU1ZHIGVxdWl2YWxlbnQgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlU1ZHUGFpbnQoIHN2Z0Jsb2NrOiBTVkdCbG9jayApOiBTVkdQYXR0ZXJuIHtcclxuICAgIHJldHVybiBTVkdQYXR0ZXJuLnBvb2wuY3JlYXRlKCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIGZvcm0gb2YgdGhpcyBvYmplY3RcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgbmV3IHBoZXQuc2NlbmVyeS5QYXR0ZXJuKCAkKCAnPGltZyBzcmM9XCIke3RoaXMuaW1hZ2Uuc3JjfVwiLz4nIClbMF0gKWA7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaXNQYXR0ZXJuITogYm9vbGVhbjtcclxufVxyXG5cclxuUGF0dGVybi5wcm90b3R5cGUuaXNQYXR0ZXJuID0gdHJ1ZTtcclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdQYXR0ZXJuJywgUGF0dGVybiApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxFQUFFQyxPQUFPLEVBQVlDLFVBQVUsUUFBUSxlQUFlO0FBRXBFLGVBQWUsTUFBTUMsT0FBTyxTQUFTSCxLQUFLLENBQUM7RUFLekM7QUFDRjtBQUNBO0VBQ1NJLFdBQVdBLENBQUVDLEtBQXVCLEVBQUc7SUFDNUMsS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJLENBQUNBLEtBQUssR0FBR0EsS0FBSzs7SUFFbEI7SUFDQTtJQUNBLElBQUksQ0FBQ0MsYUFBYSxHQUFHTCxPQUFPLENBQUNNLGNBQWMsQ0FBQ0MsYUFBYSxDQUFFSCxLQUFLLEVBQUUsUUFBUyxDQUFDO0VBQzlFOztFQUdBO0FBQ0Y7QUFDQTtFQUNTSSxjQUFjQSxDQUFBLEVBQWtCO0lBQ3JDLE9BQU8sSUFBSSxDQUFDSCxhQUFhO0VBQzNCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTSSxjQUFjQSxDQUFFQyxRQUFrQixFQUFlO0lBQ3RELE9BQU9ULFVBQVUsQ0FBQ1UsSUFBSSxDQUFDQyxNQUFNLENBQUUsSUFBSyxDQUFDO0VBQ3ZDOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsUUFBUUEsQ0FBQSxFQUFXO0lBQ2pDLE9BQVEsMkNBQTBDLElBQUksQ0FBQ1QsS0FBSyxDQUFDVSxHQUFJLGFBQVk7RUFDL0U7QUFHRjtBQUVBWixPQUFPLENBQUNhLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLElBQUk7QUFFbENoQixPQUFPLENBQUNpQixRQUFRLENBQUUsU0FBUyxFQUFFZixPQUFRLENBQUMifQ==