// Copyright 2018-2021, University of Colorado Boulder

/**
 * Utilities for full-screen support
 * Used to live at '/joist/js/FullScreen'. Moved to '/scenery/js/util/FullScreen' on 4/10/2018
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../axon/js/Property.js';
import detectPrefix from '../../../phet-core/js/detectPrefix.js';
import detectPrefixEvent from '../../../phet-core/js/detectPrefixEvent.js';
import platform from '../../../phet-core/js/platform.js';
import { scenery } from '../imports.js';

// get prefixed (and properly capitalized) property names
const exitFullscreenPropertyName = detectPrefix(document, 'exitFullscreen') || detectPrefix(document, 'cancelFullScreen'); // Firefox
const fullscreenElementPropertyName = detectPrefix(document, 'fullscreenElement') || detectPrefix(document, 'fullScreenElement'); // Firefox capitalization
const fullscreenEnabledPropertyName = detectPrefix(document, 'fullscreenEnabled') || detectPrefix(document, 'fullScreenEnabled'); // Firefox capitalization
let fullscreenChangeEvent = detectPrefixEvent(document, 'fullscreenchange');

// required capitalization workaround for now
if (fullscreenChangeEvent === 'msfullscreenchange') {
  fullscreenChangeEvent = 'MSFullscreenChange';
}
const FullScreen = {
  // @public
  isFullScreen() {
    return !!document[fullscreenElementPropertyName];
  },
  // @public
  isFullScreenEnabled() {
    return document[fullscreenEnabledPropertyName] && !platform.safari7;
  },
  /**
   * @public
   * @param {Display} display
   */
  enterFullScreen(display) {
    const requestFullscreenPropertyName = detectPrefix(document.body, 'requestFullscreen') || detectPrefix(document.body, 'requestFullScreen'); // Firefox capitalization

    display.domElement[requestFullscreenPropertyName] && display.domElement[requestFullscreenPropertyName]();
  },
  // @public
  exitFullScreen() {
    document[exitFullscreenPropertyName] && document[exitFullscreenPropertyName]();
  },
  /**
   * @public
   * @param {Display} display
   */
  toggleFullScreen(display) {
    if (FullScreen.isFullScreen()) {
      FullScreen.exitFullScreen();
    } else {
      FullScreen.enterFullScreen(display);
    }
  },
  isFullScreenProperty: new Property(false)
};

// update isFullScreenProperty on potential changes
document.addEventListener(fullscreenChangeEvent, evt => {
  FullScreen.isFullScreenProperty.set(FullScreen.isFullScreen());
});
scenery.register('FullScreen', FullScreen);
export default FullScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsImRldGVjdFByZWZpeCIsImRldGVjdFByZWZpeEV2ZW50IiwicGxhdGZvcm0iLCJzY2VuZXJ5IiwiZXhpdEZ1bGxzY3JlZW5Qcm9wZXJ0eU5hbWUiLCJkb2N1bWVudCIsImZ1bGxzY3JlZW5FbGVtZW50UHJvcGVydHlOYW1lIiwiZnVsbHNjcmVlbkVuYWJsZWRQcm9wZXJ0eU5hbWUiLCJmdWxsc2NyZWVuQ2hhbmdlRXZlbnQiLCJGdWxsU2NyZWVuIiwiaXNGdWxsU2NyZWVuIiwiaXNGdWxsU2NyZWVuRW5hYmxlZCIsInNhZmFyaTciLCJlbnRlckZ1bGxTY3JlZW4iLCJkaXNwbGF5IiwicmVxdWVzdEZ1bGxzY3JlZW5Qcm9wZXJ0eU5hbWUiLCJib2R5IiwiZG9tRWxlbWVudCIsImV4aXRGdWxsU2NyZWVuIiwidG9nZ2xlRnVsbFNjcmVlbiIsImlzRnVsbFNjcmVlblByb3BlcnR5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsInNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRnVsbFNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXRpZXMgZm9yIGZ1bGwtc2NyZWVuIHN1cHBvcnRcclxuICogVXNlZCB0byBsaXZlIGF0ICcvam9pc3QvanMvRnVsbFNjcmVlbicuIE1vdmVkIHRvICcvc2NlbmVyeS9qcy91dGlsL0Z1bGxTY3JlZW4nIG9uIDQvMTAvMjAxOFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgZGV0ZWN0UHJlZml4IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9kZXRlY3RQcmVmaXguanMnO1xyXG5pbXBvcnQgZGV0ZWN0UHJlZml4RXZlbnQgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RldGVjdFByZWZpeEV2ZW50LmpzJztcclxuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9wbGF0Zm9ybS5qcyc7XHJcbmltcG9ydCB7IHNjZW5lcnkgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcclxuXHJcbi8vIGdldCBwcmVmaXhlZCAoYW5kIHByb3Blcmx5IGNhcGl0YWxpemVkKSBwcm9wZXJ0eSBuYW1lc1xyXG5jb25zdCBleGl0RnVsbHNjcmVlblByb3BlcnR5TmFtZSA9IGRldGVjdFByZWZpeCggZG9jdW1lbnQsICdleGl0RnVsbHNjcmVlbicgKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdFByZWZpeCggZG9jdW1lbnQsICdjYW5jZWxGdWxsU2NyZWVuJyApOyAvLyBGaXJlZm94XHJcbmNvbnN0IGZ1bGxzY3JlZW5FbGVtZW50UHJvcGVydHlOYW1lID0gZGV0ZWN0UHJlZml4KCBkb2N1bWVudCwgJ2Z1bGxzY3JlZW5FbGVtZW50JyApIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0UHJlZml4KCBkb2N1bWVudCwgJ2Z1bGxTY3JlZW5FbGVtZW50JyApOyAvLyBGaXJlZm94IGNhcGl0YWxpemF0aW9uXHJcbmNvbnN0IGZ1bGxzY3JlZW5FbmFibGVkUHJvcGVydHlOYW1lID0gZGV0ZWN0UHJlZml4KCBkb2N1bWVudCwgJ2Z1bGxzY3JlZW5FbmFibGVkJyApIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0UHJlZml4KCBkb2N1bWVudCwgJ2Z1bGxTY3JlZW5FbmFibGVkJyApOyAvLyBGaXJlZm94IGNhcGl0YWxpemF0aW9uXHJcbmxldCBmdWxsc2NyZWVuQ2hhbmdlRXZlbnQgPSBkZXRlY3RQcmVmaXhFdmVudCggZG9jdW1lbnQsICdmdWxsc2NyZWVuY2hhbmdlJyApO1xyXG5cclxuLy8gcmVxdWlyZWQgY2FwaXRhbGl6YXRpb24gd29ya2Fyb3VuZCBmb3Igbm93XHJcbmlmICggZnVsbHNjcmVlbkNoYW5nZUV2ZW50ID09PSAnbXNmdWxsc2NyZWVuY2hhbmdlJyApIHtcclxuICBmdWxsc2NyZWVuQ2hhbmdlRXZlbnQgPSAnTVNGdWxsc2NyZWVuQ2hhbmdlJztcclxufVxyXG5cclxuY29uc3QgRnVsbFNjcmVlbiA9IHtcclxuXHJcbiAgLy8gQHB1YmxpY1xyXG4gIGlzRnVsbFNjcmVlbigpIHtcclxuICAgIHJldHVybiAhIWRvY3VtZW50WyBmdWxsc2NyZWVuRWxlbWVudFByb3BlcnR5TmFtZSBdO1xyXG4gIH0sXHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBpc0Z1bGxTY3JlZW5FbmFibGVkKCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50WyBmdWxsc2NyZWVuRW5hYmxlZFByb3BlcnR5TmFtZSBdICYmICFwbGF0Zm9ybS5zYWZhcmk3O1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAcGFyYW0ge0Rpc3BsYXl9IGRpc3BsYXlcclxuICAgKi9cclxuICBlbnRlckZ1bGxTY3JlZW4oIGRpc3BsYXkgKSB7XHJcbiAgICBjb25zdCByZXF1ZXN0RnVsbHNjcmVlblByb3BlcnR5TmFtZSA9IGRldGVjdFByZWZpeCggZG9jdW1lbnQuYm9keSwgJ3JlcXVlc3RGdWxsc2NyZWVuJyApIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdFByZWZpeCggZG9jdW1lbnQuYm9keSwgJ3JlcXVlc3RGdWxsU2NyZWVuJyApOyAvLyBGaXJlZm94IGNhcGl0YWxpemF0aW9uXHJcblxyXG4gICAgZGlzcGxheS5kb21FbGVtZW50WyByZXF1ZXN0RnVsbHNjcmVlblByb3BlcnR5TmFtZSBdICYmIGRpc3BsYXkuZG9tRWxlbWVudFsgcmVxdWVzdEZ1bGxzY3JlZW5Qcm9wZXJ0eU5hbWUgXSgpO1xyXG4gIH0sXHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBleGl0RnVsbFNjcmVlbigpIHtcclxuICAgIGRvY3VtZW50WyBleGl0RnVsbHNjcmVlblByb3BlcnR5TmFtZSBdICYmIGRvY3VtZW50WyBleGl0RnVsbHNjcmVlblByb3BlcnR5TmFtZSBdKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBwYXJhbSB7RGlzcGxheX0gZGlzcGxheVxyXG4gICAqL1xyXG4gIHRvZ2dsZUZ1bGxTY3JlZW4oIGRpc3BsYXkgKSB7XHJcbiAgICBpZiAoIEZ1bGxTY3JlZW4uaXNGdWxsU2NyZWVuKCkgKSB7XHJcbiAgICAgIEZ1bGxTY3JlZW4uZXhpdEZ1bGxTY3JlZW4oKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBGdWxsU2NyZWVuLmVudGVyRnVsbFNjcmVlbiggZGlzcGxheSApO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGlzRnVsbFNjcmVlblByb3BlcnR5OiBuZXcgUHJvcGVydHkoIGZhbHNlIClcclxufTtcclxuXHJcbi8vIHVwZGF0ZSBpc0Z1bGxTY3JlZW5Qcm9wZXJ0eSBvbiBwb3RlbnRpYWwgY2hhbmdlc1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBmdWxsc2NyZWVuQ2hhbmdlRXZlbnQsIGV2dCA9PiB7XHJcbiAgRnVsbFNjcmVlbi5pc0Z1bGxTY3JlZW5Qcm9wZXJ0eS5zZXQoIEZ1bGxTY3JlZW4uaXNGdWxsU2NyZWVuKCkgKTtcclxufSApO1xyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ0Z1bGxTY3JlZW4nLCBGdWxsU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IEZ1bGxTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDhCQUE4QjtBQUNuRCxPQUFPQyxZQUFZLE1BQU0sdUNBQXVDO0FBQ2hFLE9B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