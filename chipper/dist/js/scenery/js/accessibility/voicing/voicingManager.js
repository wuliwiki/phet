// Copyright 2020-2023, University of Colorado Boulder

/**
 * Uses the Web Speech API to produce speech from the browser. This is a prototype, DO NOT USE IN PRODUCTION CODE.
 * There is no speech output until the voicingManager has been initialized. Supported voices will depend on platform.
 * For each voice, you can customize the rate and pitch. Only one voicingManager should be active at a time and so this
 * type is a singleton.
 *
 * @author Jesse Greenberg
 */

import SpeechSynthesisAnnouncer from '../../../../utterance-queue/js/SpeechSynthesisAnnouncer.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import { globalKeyStateTracker, KeyboardUtils, scenery } from '../../imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
class VoicingManager extends SpeechSynthesisAnnouncer {
  constructor(providedOptions) {
    const options = optionize()({
      // All VoicingManager instances should respect responseCollector's current state.
      respectResponseCollectorProperties: true,
      // phet-io
      tandem: Tandem.OPTIONAL,
      phetioDocumentation: 'Announcer that manages the voicing feature, providing audio responses via WebAudio.'
    }, providedOptions);
    super(options);
  }

  /**
   * The initialization with some additional scenery-specific work for voicingManager.
   */
  initialize(userGestureEmitter, options) {
    super.initialize(userGestureEmitter, options);

    // The control key will stop the synth from speaking if there is an active utterance. This key was decided because
    // most major screen readers will stop speech when this key is pressed
    globalKeyStateTracker.keyupEmitter.addListener(domEvent => {
      if (KeyboardUtils.isControlKey(domEvent)) {
        this.cancel();
      }
    });
  }
}
const voicingManager = new VoicingManager();
scenery.register('voicingManager', voicingManager);
export default voicingManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIiLCJUYW5kZW0iLCJnbG9iYWxLZXlTdGF0ZVRyYWNrZXIiLCJLZXlib2FyZFV0aWxzIiwic2NlbmVyeSIsIm9wdGlvbml6ZSIsIlZvaWNpbmdNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicmVzcGVjdFJlc3BvbnNlQ29sbGVjdG9yUHJvcGVydGllcyIsInRhbmRlbSIsIk9QVElPTkFMIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsImluaXRpYWxpemUiLCJ1c2VyR2VzdHVyZUVtaXR0ZXIiLCJrZXl1cEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImRvbUV2ZW50IiwiaXNDb250cm9sS2V5IiwiY2FuY2VsIiwidm9pY2luZ01hbmFnZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbInZvaWNpbmdNYW5hZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFVzZXMgdGhlIFdlYiBTcGVlY2ggQVBJIHRvIHByb2R1Y2Ugc3BlZWNoIGZyb20gdGhlIGJyb3dzZXIuIFRoaXMgaXMgYSBwcm90b3R5cGUsIERPIE5PVCBVU0UgSU4gUFJPRFVDVElPTiBDT0RFLlxyXG4gKiBUaGVyZSBpcyBubyBzcGVlY2ggb3V0cHV0IHVudGlsIHRoZSB2b2ljaW5nTWFuYWdlciBoYXMgYmVlbiBpbml0aWFsaXplZC4gU3VwcG9ydGVkIHZvaWNlcyB3aWxsIGRlcGVuZCBvbiBwbGF0Zm9ybS5cclxuICogRm9yIGVhY2ggdm9pY2UsIHlvdSBjYW4gY3VzdG9taXplIHRoZSByYXRlIGFuZCBwaXRjaC4gT25seSBvbmUgdm9pY2luZ01hbmFnZXIgc2hvdWxkIGJlIGFjdGl2ZSBhdCBhIHRpbWUgYW5kIHNvIHRoaXNcclxuICogdHlwZSBpcyBhIHNpbmdsZXRvbi5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgU3BlZWNoU3ludGhlc2lzQW5ub3VuY2VyLCB7IFNwZWVjaFN5bnRoZXNpc0Fubm91bmNlck9wdGlvbnMsIFNwZWVjaFN5bnRoZXNpc0luaXRpYWxpemVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXR0ZXJhbmNlLXF1ZXVlL2pzL1NwZWVjaFN5bnRoZXNpc0Fubm91bmNlci5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCB7IGdsb2JhbEtleVN0YXRlVHJhY2tlciwgS2V5Ym9hcmRVdGlscywgc2NlbmVyeSB9IGZyb20gJy4uLy4uL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFRFbWl0dGVyIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVEVtaXR0ZXIuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbnR5cGUgVm9pY2luZ01hbmFnZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXJPcHRpb25zO1xyXG5cclxuXHJcbmNsYXNzIFZvaWNpbmdNYW5hZ2VyIGV4dGVuZHMgU3BlZWNoU3ludGhlc2lzQW5ub3VuY2VyIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IFZvaWNpbmdNYW5hZ2VyT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFZvaWNpbmdNYW5hZ2VyT3B0aW9ucywgU2VsZk9wdGlvbnMsIFNwZWVjaFN5bnRoZXNpc0Fubm91bmNlck9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIEFsbCBWb2ljaW5nTWFuYWdlciBpbnN0YW5jZXMgc2hvdWxkIHJlc3BlY3QgcmVzcG9uc2VDb2xsZWN0b3IncyBjdXJyZW50IHN0YXRlLlxyXG4gICAgICByZXNwZWN0UmVzcG9uc2VDb2xsZWN0b3JQcm9wZXJ0aWVzOiB0cnVlLFxyXG5cclxuICAgICAgLy8gcGhldC1pb1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRJT05BTCxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ0Fubm91bmNlciB0aGF0IG1hbmFnZXMgdGhlIHZvaWNpbmcgZmVhdHVyZSwgcHJvdmlkaW5nIGF1ZGlvIHJlc3BvbnNlcyB2aWEgV2ViQXVkaW8uJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBpbml0aWFsaXphdGlvbiB3aXRoIHNvbWUgYWRkaXRpb25hbCBzY2VuZXJ5LXNwZWNpZmljIHdvcmsgZm9yIHZvaWNpbmdNYW5hZ2VyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBpbml0aWFsaXplKCB1c2VyR2VzdHVyZUVtaXR0ZXI6IFRFbWl0dGVyLCBvcHRpb25zPzogU3BlZWNoU3ludGhlc2lzSW5pdGlhbGl6ZU9wdGlvbnMgKTogdm9pZCB7XHJcbiAgICBzdXBlci5pbml0aWFsaXplKCB1c2VyR2VzdHVyZUVtaXR0ZXIsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBUaGUgY29udHJvbCBrZXkgd2lsbCBzdG9wIHRoZSBzeW50aCBmcm9tIHNwZWFraW5nIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSB1dHRlcmFuY2UuIFRoaXMga2V5IHdhcyBkZWNpZGVkIGJlY2F1c2VcclxuICAgIC8vIG1vc3QgbWFqb3Igc2NyZWVuIHJlYWRlcnMgd2lsbCBzdG9wIHNwZWVjaCB3aGVuIHRoaXMga2V5IGlzIHByZXNzZWRcclxuICAgIGdsb2JhbEtleVN0YXRlVHJhY2tlci5rZXl1cEVtaXR0ZXIuYWRkTGlzdGVuZXIoIGRvbUV2ZW50ID0+IHtcclxuICAgICAgaWYgKCBLZXlib2FyZFV0aWxzLmlzQ29udHJvbEtleSggZG9tRXZlbnQgKSApIHtcclxuICAgICAgICB0aGlzLmNhbmNlbCgpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCB2b2ljaW5nTWFuYWdlciA9IG5ldyBWb2ljaW5nTWFuYWdlcigpO1xyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ3ZvaWNpbmdNYW5hZ2VyJywgdm9pY2luZ01hbmFnZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgdm9pY2luZ01hbmFnZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHdCQUF3QixNQUE2RSw0REFBNEQ7QUFDeEssT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxTQUFTQyxxQkFBcUIsRUFBRUMsYUFBYSxFQUFFQyxPQUFPLFFBQVEsa0JBQWtCO0FBQ2hGLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBT25GLE1BQU1DLGNBQWMsU0FBU04sd0JBQXdCLENBQUM7RUFDN0NPLFdBQVdBLENBQUVDLGVBQXVDLEVBQUc7SUFFNUQsTUFBTUMsT0FBTyxHQUFHSixTQUFTLENBQXNFLENBQUMsQ0FBRTtNQUVoRztNQUNBSyxrQ0FBa0MsRUFBRSxJQUFJO01BRXhDO01BQ0FDLE1BQU0sRUFBRVYsTUFBTSxDQUFDVyxRQUFRO01BQ3ZCQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFDLEVBQUVMLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFQyxPQUFRLENBQUM7RUFDbEI7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCSyxVQUFVQSxDQUFFQyxrQkFBNEIsRUFBRU4sT0FBMEMsRUFBUztJQUMzRyxLQUFLLENBQUNLLFVBQVUsQ0FBRUMsa0JBQWtCLEVBQUVOLE9BQVEsQ0FBQzs7SUFFL0M7SUFDQTtJQUNBUCxxQkFBcUIsQ0FBQ2MsWUFBWSxDQUFDQyxXQUFXLENBQUVDLFFBQVEsSUFBSTtNQUMxRCxJQUFLZixhQUFhLENBQUNnQixZQUFZLENBQUVELFFBQVMsQ0FBQyxFQUFHO1FBQzVDLElBQUksQ0FBQ0UsTUFBTSxDQUFDLENBQUM7TUFDZjtJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQSxNQUFNQyxjQUFjLEdBQUcsSUFBSWYsY0FBYyxDQUFDLENBQUM7QUFFM0NGLE9BQU8sQ0FBQ2tCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRUQsY0FBZSxDQUFDO0FBQ3BELGVBQWVBLGNBQWMifQ==