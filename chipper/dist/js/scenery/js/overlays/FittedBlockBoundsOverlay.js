// Copyright 2015-2022, University of Colorado Boulder

/**
 * Shows the bounds of current fitted blocks.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Matrix3 from '../../../dot/js/Matrix3.js';
import { Shape } from '../../../kite/js/imports.js';
import { BackboneDrawable, FittedBlock, scenery, ShapeBasedOverlay } from '../imports.js';
export default class FittedBlockBoundsOverlay extends ShapeBasedOverlay {
  constructor(display, rootNode) {
    super(display, rootNode, 'canvasNodeBoundsOverlay');
  }
  addShapes() {
    const self = this; // eslint-disable-line @typescript-eslint/no-this-alias

    function processBackbone(backbone, matrix) {
      if (backbone.willApplyTransform) {
        matrix = matrix.timesMatrix(backbone.backboneInstance.relativeTransform.matrix);
      }
      backbone.blocks.forEach(block => {
        processBlock(block, matrix);
      });
    }
    function processBlock(block, matrix) {
      if (block instanceof FittedBlock && !block.fitBounds.isEmpty()) {
        self.addShape(Shape.bounds(block.fitBounds).transformed(matrix), 'rgba(255,0,0,0.8)', true);
      }
      if (block.firstDrawable && block.lastDrawable) {
        for (let childDrawable = block.firstDrawable; childDrawable !== block.lastDrawable; childDrawable = childDrawable.nextDrawable) {
          processDrawable(childDrawable, matrix);
        }
        processDrawable(block.lastDrawable, matrix);
      }
    }
    function processDrawable(drawable, matrix) {
      // How we detect backbones (for now)
      if (drawable instanceof BackboneDrawable) {
        processBackbone(drawable, matrix);
      }
    }
    processBackbone(this.display.rootBackbone, Matrix3.IDENTITY);
  }
}
scenery.register('FittedBlockBoundsOverlay', FittedBlockBoundsOverlay);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiU2hhcGUiLCJCYWNrYm9uZURyYXdhYmxlIiwiRml0dGVkQmxvY2siLCJzY2VuZXJ5IiwiU2hhcGVCYXNlZE92ZXJsYXkiLCJGaXR0ZWRCbG9ja0JvdW5kc092ZXJsYXkiLCJjb25zdHJ1Y3RvciIsImRpc3BsYXkiLCJyb290Tm9kZSIsImFkZFNoYXBlcyIsInNlbGYiLCJwcm9jZXNzQmFja2JvbmUiLCJiYWNrYm9uZSIsIm1hdHJpeCIsIndpbGxBcHBseVRyYW5zZm9ybSIsInRpbWVzTWF0cml4IiwiYmFja2JvbmVJbnN0YW5jZSIsInJlbGF0aXZlVHJhbnNmb3JtIiwiYmxvY2tzIiwiZm9yRWFjaCIsImJsb2NrIiwicHJvY2Vzc0Jsb2NrIiwiZml0Qm91bmRzIiwiaXNFbXB0eSIsImFkZFNoYXBlIiwiYm91bmRzIiwidHJhbnNmb3JtZWQiLCJmaXJzdERyYXdhYmxlIiwibGFzdERyYXdhYmxlIiwiY2hpbGREcmF3YWJsZSIsIm5leHREcmF3YWJsZSIsInByb2Nlc3NEcmF3YWJsZSIsImRyYXdhYmxlIiwicm9vdEJhY2tib25lIiwiSURFTlRJVFkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZpdHRlZEJsb2NrQm91bmRzT3ZlcmxheS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaG93cyB0aGUgYm91bmRzIG9mIGN1cnJlbnQgZml0dGVkIGJsb2Nrcy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBNYXRyaXgzIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9NYXRyaXgzLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBCYWNrYm9uZURyYXdhYmxlLCBCbG9jaywgRGlzcGxheSwgRHJhd2FibGUsIEZpdHRlZEJsb2NrLCBUT3ZlcmxheSwgTm9kZSwgc2NlbmVyeSwgU2hhcGVCYXNlZE92ZXJsYXkgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpdHRlZEJsb2NrQm91bmRzT3ZlcmxheSBleHRlbmRzIFNoYXBlQmFzZWRPdmVybGF5IGltcGxlbWVudHMgVE92ZXJsYXkge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZGlzcGxheTogRGlzcGxheSwgcm9vdE5vZGU6IE5vZGUgKSB7XHJcbiAgICBzdXBlciggZGlzcGxheSwgcm9vdE5vZGUsICdjYW52YXNOb2RlQm91bmRzT3ZlcmxheScgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRTaGFwZXMoKTogdm9pZCB7XHJcbiAgICAgXHJcbiAgICBjb25zdCBzZWxmID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xyXG5cclxuICAgIGZ1bmN0aW9uIHByb2Nlc3NCYWNrYm9uZSggYmFja2JvbmU6IEJhY2tib25lRHJhd2FibGUsIG1hdHJpeDogTWF0cml4MyApOiB2b2lkIHtcclxuICAgICAgaWYgKCBiYWNrYm9uZS53aWxsQXBwbHlUcmFuc2Zvcm0gKSB7XHJcbiAgICAgICAgbWF0cml4ID0gbWF0cml4LnRpbWVzTWF0cml4KCBiYWNrYm9uZS5iYWNrYm9uZUluc3RhbmNlLnJlbGF0aXZlVHJhbnNmb3JtLm1hdHJpeCApO1xyXG4gICAgICB9XHJcbiAgICAgIGJhY2tib25lLmJsb2Nrcy5mb3JFYWNoKCAoIGJsb2NrOiBCbG9jayApID0+IHtcclxuICAgICAgICBwcm9jZXNzQmxvY2soIGJsb2NrLCBtYXRyaXggKTtcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByb2Nlc3NCbG9jayggYmxvY2s6IEJsb2NrLCBtYXRyaXg6IE1hdHJpeDMgKTogdm9pZCB7XHJcbiAgICAgIGlmICggYmxvY2sgaW5zdGFuY2VvZiBGaXR0ZWRCbG9jayAmJiAhYmxvY2suZml0Qm91bmRzIS5pc0VtcHR5KCkgKSB7XHJcbiAgICAgICAgc2VsZi5hZGRTaGFwZSggU2hhcGUuYm91bmRzKCBibG9jay5maXRCb3VuZHMhICkudHJhbnNmb3JtZWQoIG1hdHJpeCApLCAncmdiYSgyNTUsMCwwLDAuOCknLCB0cnVlICk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCBibG9jay5maXJzdERyYXdhYmxlICYmIGJsb2NrLmxhc3REcmF3YWJsZSApIHtcclxuICAgICAgICBmb3IgKCBsZXQgY2hpbGREcmF3YWJsZSA9IGJsb2NrLmZpcnN0RHJhd2FibGU7IGNoaWxkRHJhd2FibGUgIT09IGJsb2NrLmxhc3REcmF3YWJsZTsgY2hpbGREcmF3YWJsZSA9IGNoaWxkRHJhd2FibGUubmV4dERyYXdhYmxlICkge1xyXG4gICAgICAgICAgcHJvY2Vzc0RyYXdhYmxlKCBjaGlsZERyYXdhYmxlLCBtYXRyaXggKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvY2Vzc0RyYXdhYmxlKCBibG9jay5sYXN0RHJhd2FibGUsIG1hdHJpeCApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0RyYXdhYmxlKCBkcmF3YWJsZTogRHJhd2FibGUsIG1hdHJpeDogTWF0cml4MyApOiB2b2lkIHtcclxuICAgICAgLy8gSG93IHdlIGRldGVjdCBiYWNrYm9uZXMgKGZvciBub3cpXHJcbiAgICAgIGlmICggZHJhd2FibGUgaW5zdGFuY2VvZiBCYWNrYm9uZURyYXdhYmxlICkge1xyXG4gICAgICAgIHByb2Nlc3NCYWNrYm9uZSggZHJhd2FibGUsIG1hdHJpeCApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvY2Vzc0JhY2tib25lKCB0aGlzLmRpc3BsYXkucm9vdEJhY2tib25lLCBNYXRyaXgzLklERU5USVRZICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnRml0dGVkQmxvY2tCb3VuZHNPdmVybGF5JywgRml0dGVkQmxvY2tCb3VuZHNPdmVybGF5ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELFNBQVNDLEtBQUssUUFBUSw2QkFBNkI7QUFDbkQsU0FBU0MsZ0JBQWdCLEVBQTRCQyxXQUFXLEVBQWtCQyxPQUFPLEVBQUVDLGlCQUFpQixRQUFRLGVBQWU7QUFFbkksZUFBZSxNQUFNQyx3QkFBd0IsU0FBU0QsaUJBQWlCLENBQXFCO0VBQ25GRSxXQUFXQSxDQUFFQyxPQUFnQixFQUFFQyxRQUFjLEVBQUc7SUFDckQsS0FBSyxDQUFFRCxPQUFPLEVBQUVDLFFBQVEsRUFBRSx5QkFBMEIsQ0FBQztFQUN2RDtFQUVPQyxTQUFTQSxDQUFBLEVBQVM7SUFFdkIsTUFBTUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDOztJQUVuQixTQUFTQyxlQUFlQSxDQUFFQyxRQUEwQixFQUFFQyxNQUFlLEVBQVM7TUFDNUUsSUFBS0QsUUFBUSxDQUFDRSxrQkFBa0IsRUFBRztRQUNqQ0QsTUFBTSxHQUFHQSxNQUFNLENBQUNFLFdBQVcsQ0FBRUgsUUFBUSxDQUFDSSxnQkFBZ0IsQ0FBQ0MsaUJBQWlCLENBQUNKLE1BQU8sQ0FBQztNQUNuRjtNQUNBRCxRQUFRLENBQUNNLE1BQU0sQ0FBQ0MsT0FBTyxDQUFJQyxLQUFZLElBQU07UUFDM0NDLFlBQVksQ0FBRUQsS0FBSyxFQUFFUCxNQUFPLENBQUM7TUFDL0IsQ0FBRSxDQUFDO0lBQ0w7SUFFQSxTQUFTUSxZQUFZQSxDQUFFRCxLQUFZLEVBQUVQLE1BQWUsRUFBUztNQUMzRCxJQUFLTyxLQUFLLFlBQVlsQixXQUFXLElBQUksQ0FBQ2tCLEtBQUssQ0FBQ0UsU0FBUyxDQUFFQyxPQUFPLENBQUMsQ0FBQyxFQUFHO1FBQ2pFYixJQUFJLENBQUNjLFFBQVEsQ0FBRXhCLEtBQUssQ0FBQ3lCLE1BQU0sQ0FBRUwsS0FBSyxDQUFDRSxTQUFXLENBQUMsQ0FBQ0ksV0FBVyxDQUFFYixNQUFPLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxJQUFLLENBQUM7TUFDcEc7TUFDQSxJQUFLTyxLQUFLLENBQUNPLGFBQWEsSUFBSVAsS0FBSyxDQUFDUSxZQUFZLEVBQUc7UUFDL0MsS0FBTSxJQUFJQyxhQUFhLEdBQUdULEtBQUssQ0FBQ08sYUFBYSxFQUFFRSxhQUFhLEtBQUtULEtBQUssQ0FBQ1EsWUFBWSxFQUFFQyxhQUFhLEdBQUdBLGFBQWEsQ0FBQ0MsWUFBWSxFQUFHO1VBQ2hJQyxlQUFlLENBQUVGLGFBQWEsRUFBRWhCLE1BQU8sQ0FBQztRQUMxQztRQUNBa0IsZUFBZSxDQUFFWCxLQUFLLENBQUNRLFlBQVksRUFBRWYsTUFBTyxDQUFDO01BQy9DO0lBQ0Y7SUFFQSxTQUFTa0IsZUFBZUEsQ0FBRUMsUUFBa0IsRUFBRW5CLE1BQWUsRUFBUztNQUNwRTtNQUNBLElBQUttQixRQUFRLFlBQVkvQixnQkFBZ0IsRUFBRztRQUMxQ1UsZUFBZSxDQUFFcUIsUUFBUSxFQUFFbkIsTUFBTyxDQUFDO01BQ3JDO0lBQ0Y7SUFFQUYsZUFBZSxDQUFFLElBQUksQ0FBQ0osT0FBTyxDQUFDMEIsWUFBWSxFQUFFbEMsT0FBTyxDQUFDbUMsUUFBUyxDQUFDO0VBQ2hFO0FBQ0Y7QUFFQS9CLE9BQU8sQ0FBQ2dDLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRTlCLHdCQUF5QixDQUFDIn0=