// Copyright 2019-2022, University of Colorado Boulder

/**
 * Displays the "hittable" mouse/touch regions for items with input listeners.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { Shape } from '../../../kite/js/imports.js';
import { scenery, ShapeBasedOverlay, Trail } from '../imports.js';
export default class HitAreaOverlay extends ShapeBasedOverlay {
  constructor(display, rootNode) {
    super(display, rootNode, 'hitAreaOverlay');
  }
  addShapes() {
    new Trail(this.rootNode).eachTrailUnder(trail => {
      const node = trail.lastNode();
      if (!node.isVisible() || node.pickable === false) {
        // skip this subtree if the node is invisible
        return true;
      }
      if (node.inputListeners.length && trail.isVisible()) {
        const mouseShape = HitAreaOverlay.getLocalMouseShape(node);
        const touchShape = HitAreaOverlay.getLocalTouchShape(node);
        const matrix = trail.getMatrix();
        if (!mouseShape.bounds.isEmpty()) {
          this.addShape(mouseShape.transformed(matrix), 'rgba(0,0,255,0.8)', true);
        }
        if (!touchShape.bounds.isEmpty()) {
          this.addShape(touchShape.transformed(matrix), 'rgba(255,0,0,0.8)', false);
        }
      }
      return false;
    });
  }
  static getLocalMouseShape(node) {
    let shape = Shape.union([node.mouseArea ? node.mouseArea instanceof Shape ? node.mouseArea : Shape.bounds(node.mouseArea) : node.getSelfShape(), ...node.children.filter(child => {
      return node.visible && node.pickable !== false;
    }).map(child => {
      return HitAreaOverlay.getLocalMouseShape(child).transformed(child.matrix);
    })]);
    if (node.hasClipArea()) {
      shape = shape.shapeIntersection(node.clipArea);
    }
    return shape;
  }
  static getLocalTouchShape(node) {
    let shape = Shape.union([node.touchArea ? node.touchArea instanceof Shape ? node.touchArea : Shape.bounds(node.touchArea) : node.getSelfShape(), ...node.children.filter(child => {
      return node.visible && node.pickable !== false;
    }).map(child => {
      return HitAreaOverlay.getLocalTouchShape(child).transformed(child.matrix);
    })]);
    if (node.hasClipArea()) {
      shape = shape.shapeIntersection(node.clipArea);
    }
    return shape;
  }
}
scenery.register('HitAreaOverlay', HitAreaOverlay);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsInNjZW5lcnkiLCJTaGFwZUJhc2VkT3ZlcmxheSIsIlRyYWlsIiwiSGl0QXJlYU92ZXJsYXkiLCJjb25zdHJ1Y3RvciIsImRpc3BsYXkiLCJyb290Tm9kZSIsImFkZFNoYXBlcyIsImVhY2hUcmFpbFVuZGVyIiwidHJhaWwiLCJub2RlIiwibGFzdE5vZGUiLCJpc1Zpc2libGUiLCJwaWNrYWJsZSIsImlucHV0TGlzdGVuZXJzIiwibGVuZ3RoIiwibW91c2VTaGFwZSIsImdldExvY2FsTW91c2VTaGFwZSIsInRvdWNoU2hhcGUiLCJnZXRMb2NhbFRvdWNoU2hhcGUiLCJtYXRyaXgiLCJnZXRNYXRyaXgiLCJib3VuZHMiLCJpc0VtcHR5IiwiYWRkU2hhcGUiLCJ0cmFuc2Zvcm1lZCIsInNoYXBlIiwidW5pb24iLCJtb3VzZUFyZWEiLCJnZXRTZWxmU2hhcGUiLCJjaGlsZHJlbiIsImZpbHRlciIsImNoaWxkIiwidmlzaWJsZSIsIm1hcCIsImhhc0NsaXBBcmVhIiwic2hhcGVJbnRlcnNlY3Rpb24iLCJjbGlwQXJlYSIsInRvdWNoQXJlYSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSGl0QXJlYU92ZXJsYXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlzcGxheXMgdGhlIFwiaGl0dGFibGVcIiBtb3VzZS90b3VjaCByZWdpb25zIGZvciBpdGVtcyB3aXRoIGlucHV0IGxpc3RlbmVycy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgRGlzcGxheSwgVE92ZXJsYXksIE5vZGUsIHNjZW5lcnksIFNoYXBlQmFzZWRPdmVybGF5LCBUcmFpbCB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGl0QXJlYU92ZXJsYXkgZXh0ZW5kcyBTaGFwZUJhc2VkT3ZlcmxheSBpbXBsZW1lbnRzIFRPdmVybGF5IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGRpc3BsYXk6IERpc3BsYXksIHJvb3ROb2RlOiBOb2RlICkge1xyXG4gICAgc3VwZXIoIGRpc3BsYXksIHJvb3ROb2RlLCAnaGl0QXJlYU92ZXJsYXknICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkU2hhcGVzKCk6IHZvaWQge1xyXG4gICAgbmV3IFRyYWlsKCB0aGlzLnJvb3ROb2RlICkuZWFjaFRyYWlsVW5kZXIoIHRyYWlsID0+IHtcclxuICAgICAgY29uc3Qgbm9kZSA9IHRyYWlsLmxhc3ROb2RlKCk7XHJcblxyXG4gICAgICBpZiAoICFub2RlLmlzVmlzaWJsZSgpIHx8IG5vZGUucGlja2FibGUgPT09IGZhbHNlICkge1xyXG4gICAgICAgIC8vIHNraXAgdGhpcyBzdWJ0cmVlIGlmIHRoZSBub2RlIGlzIGludmlzaWJsZVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIG5vZGUuaW5wdXRMaXN0ZW5lcnMubGVuZ3RoICYmIHRyYWlsLmlzVmlzaWJsZSgpICkge1xyXG4gICAgICAgIGNvbnN0IG1vdXNlU2hhcGUgPSBIaXRBcmVhT3ZlcmxheS5nZXRMb2NhbE1vdXNlU2hhcGUoIG5vZGUgKTtcclxuICAgICAgICBjb25zdCB0b3VjaFNoYXBlID0gSGl0QXJlYU92ZXJsYXkuZ2V0TG9jYWxUb3VjaFNoYXBlKCBub2RlICk7XHJcbiAgICAgICAgY29uc3QgbWF0cml4ID0gdHJhaWwuZ2V0TWF0cml4KCk7XHJcblxyXG4gICAgICAgIGlmICggIW1vdXNlU2hhcGUuYm91bmRzLmlzRW1wdHkoKSApIHtcclxuICAgICAgICAgIHRoaXMuYWRkU2hhcGUoIG1vdXNlU2hhcGUudHJhbnNmb3JtZWQoIG1hdHJpeCApLCAncmdiYSgwLDAsMjU1LDAuOCknLCB0cnVlICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggIXRvdWNoU2hhcGUuYm91bmRzLmlzRW1wdHkoKSApIHtcclxuICAgICAgICAgIHRoaXMuYWRkU2hhcGUoIHRvdWNoU2hhcGUudHJhbnNmb3JtZWQoIG1hdHJpeCApLCAncmdiYSgyNTUsMCwwLDAuOCknLCBmYWxzZSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0TG9jYWxNb3VzZVNoYXBlKCBub2RlOiBOb2RlICk6IFNoYXBlIHtcclxuICAgIGxldCBzaGFwZSA9IFNoYXBlLnVuaW9uKCBbXHJcbiAgICAgIG5vZGUubW91c2VBcmVhID8gKCBub2RlLm1vdXNlQXJlYSBpbnN0YW5jZW9mIFNoYXBlID8gbm9kZS5tb3VzZUFyZWEgOiBTaGFwZS5ib3VuZHMoIG5vZGUubW91c2VBcmVhICkgKSA6IG5vZGUuZ2V0U2VsZlNoYXBlKCksXHJcbiAgICAgIC4uLm5vZGUuY2hpbGRyZW4uZmlsdGVyKCAoIGNoaWxkOiBOb2RlICkgPT4ge1xyXG4gICAgICAgIHJldHVybiBub2RlLnZpc2libGUgJiYgbm9kZS5waWNrYWJsZSAhPT0gZmFsc2U7XHJcbiAgICAgIH0gKS5tYXAoIGNoaWxkID0+IHtcclxuICAgICAgICByZXR1cm4gSGl0QXJlYU92ZXJsYXkuZ2V0TG9jYWxNb3VzZVNoYXBlKCBjaGlsZCApLnRyYW5zZm9ybWVkKCBjaGlsZC5tYXRyaXggKTtcclxuICAgICAgfSApXHJcbiAgICBdICk7XHJcbiAgICBpZiAoIG5vZGUuaGFzQ2xpcEFyZWEoKSApIHtcclxuICAgICAgc2hhcGUgPSBzaGFwZS5zaGFwZUludGVyc2VjdGlvbiggbm9kZS5jbGlwQXJlYSEgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzaGFwZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGdldExvY2FsVG91Y2hTaGFwZSggbm9kZTogTm9kZSApOiBTaGFwZSB7XHJcbiAgICBsZXQgc2hhcGUgPSBTaGFwZS51bmlvbiggW1xyXG4gICAgICBub2RlLnRvdWNoQXJlYSA/ICggbm9kZS50b3VjaEFyZWEgaW5zdGFuY2VvZiBTaGFwZSA/IG5vZGUudG91Y2hBcmVhIDogU2hhcGUuYm91bmRzKCBub2RlLnRvdWNoQXJlYSApICkgOiBub2RlLmdldFNlbGZTaGFwZSgpLFxyXG4gICAgICAuLi5ub2RlLmNoaWxkcmVuLmZpbHRlciggKCBjaGlsZDogTm9kZSApID0+IHtcclxuICAgICAgICByZXR1cm4gbm9kZS52aXNpYmxlICYmIG5vZGUucGlja2FibGUgIT09IGZhbHNlO1xyXG4gICAgICB9ICkubWFwKCBjaGlsZCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIEhpdEFyZWFPdmVybGF5LmdldExvY2FsVG91Y2hTaGFwZSggY2hpbGQgKS50cmFuc2Zvcm1lZCggY2hpbGQubWF0cml4ICk7XHJcbiAgICAgIH0gKVxyXG4gICAgXSApO1xyXG4gICAgaWYgKCBub2RlLmhhc0NsaXBBcmVhKCkgKSB7XHJcbiAgICAgIHNoYXBlID0gc2hhcGUuc2hhcGVJbnRlcnNlY3Rpb24oIG5vZGUuY2xpcEFyZWEhICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2hhcGU7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnSGl0QXJlYU92ZXJsYXknLCBIaXRBcmVhT3ZlcmxheSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLDZCQUE2QjtBQUNuRCxTQUFrQ0MsT0FBTyxFQUFFQyxpQkFBaUIsRUFBRUMsS0FBSyxRQUFRLGVBQWU7QUFFMUYsZUFBZSxNQUFNQyxjQUFjLFNBQVNGLGlCQUFpQixDQUFxQjtFQUN6RUcsV0FBV0EsQ0FBRUMsT0FBZ0IsRUFBRUMsUUFB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