// Copyright 2013-2021, University of Colorado Boulder

/**
 * Supertype for WebGL drawables that display a specific Node.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { scenery, SelfDrawable } from '../imports.js';
class WebGLSelfDrawable extends SelfDrawable {
  /**
   * @public
   * @override
   *
   * @param {number} renderer
   * @param {Instance} instance
   * @returns {WebGLSelfDrawable}
   */
  initialize(renderer, instance) {
    super.initialize(renderer, instance);

    // @private {function} - this is the same across lifecycles
    this.transformListener = this.transformListener || this.markTransformDirty.bind(this);

    // when our relative transform changes, notify us in the pre-repaint phase
    instance.relativeTransform.addListener(this.transformListener);

    // trigger precomputation of the relative transform, since we will always need it when it is updated
    instance.relativeTransform.addPrecompute();
    return this;
  }

  /**
   * @public
   */
  markTransformDirty() {
    this.markDirty();
  }

  /**
   * @public
   * @override
   */
  updateSelfVisibility() {
    super.updateSelfVisibility();

    // mark us as dirty when our self visibility changes
    this.markDirty();
  }

  /**
   * Releases references
   * @public
   * @override
   */
  dispose() {
    this.instance.relativeTransform.removeListener(this.transformListener);
    this.instance.relativeTransform.removePrecompute();
    super.dispose();
  }
}
scenery.register('WebGLSelfDrawable', WebGLSelfDrawable);
export default WebGLSelfDrawable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzY2VuZXJ5IiwiU2VsZkRyYXdhYmxlIiwiV2ViR0xTZWxmRHJhd2FibGUiLCJpbml0aWFsaXplIiwicmVuZGVyZXIiLCJpbnN0YW5jZSIsInRyYW5zZm9ybUxpc3RlbmVyIiwibWFya1RyYW5zZm9ybURpcnR5IiwiYmluZCIsInJlbGF0aXZlVHJhbnNmb3JtIiwiYWRkTGlzdGVuZXIiLCJhZGRQcmVjb21wdXRlIiwibWFya0RpcnR5IiwidXBkYXRlU2VsZlZpc2liaWxpdHkiLCJkaXNwb3NlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVQcmVjb21wdXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXZWJHTFNlbGZEcmF3YWJsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTdXBlcnR5cGUgZm9yIFdlYkdMIGRyYXdhYmxlcyB0aGF0IGRpc3BsYXkgYSBzcGVjaWZpYyBOb2RlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgc2NlbmVyeSwgU2VsZkRyYXdhYmxlIH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5jbGFzcyBXZWJHTFNlbGZEcmF3YWJsZSBleHRlbmRzIFNlbGZEcmF3YWJsZSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJlbmRlcmVyXHJcbiAgICogQHBhcmFtIHtJbnN0YW5jZX0gaW5zdGFuY2VcclxuICAgKiBAcmV0dXJucyB7V2ViR0xTZWxmRHJhd2FibGV9XHJcbiAgICovXHJcbiAgaW5pdGlhbGl6ZSggcmVuZGVyZXIsIGluc3RhbmNlICkge1xyXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSggcmVuZGVyZXIsIGluc3RhbmNlICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge2Z1bmN0aW9ufSAtIHRoaXMgaXMgdGhlIHNhbWUgYWNyb3NzIGxpZmVjeWNsZXNcclxuICAgIHRoaXMudHJhbnNmb3JtTGlzdGVuZXIgPSB0aGlzLnRyYW5zZm9ybUxpc3RlbmVyIHx8IHRoaXMubWFya1RyYW5zZm9ybURpcnR5LmJpbmQoIHRoaXMgKTtcclxuXHJcbiAgICAvLyB3aGVuIG91ciByZWxhdGl2ZSB0cmFuc2Zvcm0gY2hhbmdlcywgbm90aWZ5IHVzIGluIHRoZSBwcmUtcmVwYWludCBwaGFzZVxyXG4gICAgaW5zdGFuY2UucmVsYXRpdmVUcmFuc2Zvcm0uYWRkTGlzdGVuZXIoIHRoaXMudHJhbnNmb3JtTGlzdGVuZXIgKTtcclxuXHJcbiAgICAvLyB0cmlnZ2VyIHByZWNvbXB1dGF0aW9uIG9mIHRoZSByZWxhdGl2ZSB0cmFuc2Zvcm0sIHNpbmNlIHdlIHdpbGwgYWx3YXlzIG5lZWQgaXQgd2hlbiBpdCBpcyB1cGRhdGVkXHJcbiAgICBpbnN0YW5jZS5yZWxhdGl2ZVRyYW5zZm9ybS5hZGRQcmVjb21wdXRlKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgbWFya1RyYW5zZm9ybURpcnR5KCkge1xyXG4gICAgdGhpcy5tYXJrRGlydHkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICB1cGRhdGVTZWxmVmlzaWJpbGl0eSgpIHtcclxuICAgIHN1cGVyLnVwZGF0ZVNlbGZWaXNpYmlsaXR5KCk7XHJcblxyXG4gICAgLy8gbWFyayB1cyBhcyBkaXJ0eSB3aGVuIG91ciBzZWxmIHZpc2liaWxpdHkgY2hhbmdlc1xyXG4gICAgdGhpcy5tYXJrRGlydHkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbGVhc2VzIHJlZmVyZW5jZXNcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuaW5zdGFuY2UucmVsYXRpdmVUcmFuc2Zvcm0ucmVtb3ZlTGlzdGVuZXIoIHRoaXMudHJhbnNmb3JtTGlzdGVuZXIgKTtcclxuICAgIHRoaXMuaW5zdGFuY2UucmVsYXRpdmVUcmFuc2Zvcm0ucmVtb3ZlUHJlY29tcHV0ZSgpO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdXZWJHTFNlbGZEcmF3YWJsZScsIFdlYkdMU2VsZkRyYXdhYmxlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBXZWJHTFNlbGZEcmF3YWJsZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxPQUFPLEVBQUVDLFlBQVksUUFBUSxlQUFlO0FBRXJELE1BQU1DLGlCQUFpQixTQUFTRCxZQUFZLENBQUM7RUFDM0M7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxVQUFVQSxDQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRztJQUMvQixLQUFLLENBQUNGLFVBQVUsQ0FBRUMsUUFBUSxFQUFFQyxRQUFTLENBQUM7O0lBRXRDO0lBQ0EsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJLENBQUNBLGlCQUFpQixJQUFJLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBRSxJQUFLLENBQUM7O0lBRXZGO0lBQ0FILFFBQVEsQ0FBQ0ksaUJBQWlCLENBQUNDLFdBQVcsQ0FBRSxJQUFJLENBQUNKLGlCQUFrQixDQUFDOztJQUVoRTtJQUNBRCxRQUFRLENBQUNJLGlCQUFpQixDQUFDRSxhQUFhLENBQUMsQ0FBQztJQUUxQyxPQUFPLElBQUk7RUFDYjs7RUFFQTtBQUNGO0FBQ0E7RUFDRUosa0JBQWtCQSxDQUFBLEVBQUc7SUFDbkIsSUFBSSxDQUFDSyxTQUFTLENBQUMsQ0FBQztFQUNsQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFQyxvQkFBb0JBLENBQUEsRUFBRztJQUNyQixLQUFLLENBQUNBLG9CQUFvQixDQUFDLENBQUM7O0lBRTVCO0lBQ0EsSUFBSSxDQUFDRCxTQUFTLENBQUMsQ0FBQztFQUNsQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLE9BQU9BLENBQUEsRUFBRztJQUNSLElBQUksQ0FBQ1QsUUFBUSxDQUFDSSxpQkFBaUIsQ0FBQ00sY0FBYyxDQUFFLElBQUksQ0FBQ1QsaUJBQWtCLENBQUM7SUFDeEUsSUFBSSxDQUFDRCxRQUFRLENBQUNJLGlCQUFpQixDQUFDTyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWxELEtBQUssQ0FBQ0YsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBZCxPQUFPLENBQUNpQixRQUFRLENBQUUsbUJBQW1CLEVBQUVmLGlCQUFrQixDQUFDO0FBRTFELGVBQWVBLGlCQUFpQiJ9