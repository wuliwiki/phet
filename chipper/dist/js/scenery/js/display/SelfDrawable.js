// Copyright 2014-2022, University of Colorado Boulder

/**
 * A drawable that will paint a single instance.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { Drawable, scenery } from '../imports.js';
class SelfDrawable extends Drawable {
  /**
   * We have enough concrete types that want a fallback constructor to this, so we'll provide it for convenience.
   *
   * @param {number} renderer
   * @param {Instance} instance
   */
  constructor(renderer, instance) {
    assert && assert(typeof renderer === 'number');
    assert && assert(instance);
    super();
    this.initialize(renderer, instance);
  }

  /**
   * @public
   *
   * @param {number} renderer
   * @param {Instance} instance
   * @returns {SelfDrawable}
   */
  initialize(renderer, instance) {
    super.initialize(renderer);

    // @private {function}
    this.drawableVisibilityListener = this.drawableVisibilityListener || this.updateSelfVisibility.bind(this);

    // @public {Instance}
    this.instance = instance;

    // @public {Node}
    this.node = instance.trail.lastNode();
    this.node.attachDrawable(this);
    this.instance.selfVisibleEmitter.addListener(this.drawableVisibilityListener);
    this.updateSelfVisibility();
    return this;
  }

  /**
   * Releases references
   * @public
   * @override
   */
  dispose() {
    this.instance.selfVisibleEmitter.removeListener(this.drawableVisibilityListener);
    this.node.detachDrawable(this);

    // free references
    this.instance = null;
    this.node = null;
    super.dispose();
  }

  /**
   * @public
   */
  updateSelfVisibility() {
    // hide our drawable if it is not relatively visible
    this.visible = this.instance.selfVisible;
  }

  /**
   * Returns a more-informative string form of this object.
   * @public
   * @override
   *
   * @returns {string}
   */
  toDetailedString() {
    return `${this.toString()} (${this.instance.trail.toPathString()})`;
  }
}
scenery.register('SelfDrawable', SelfDrawable);
export default SelfDrawable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEcmF3YWJsZSIsInNjZW5lcnkiLCJTZWxmRHJhd2FibGUiLCJjb25zdHJ1Y3RvciIsInJlbmRlcmVyIiwiaW5zdGFuY2UiLCJhc3NlcnQiLCJpbml0aWFsaXplIiwiZHJhd2FibGVWaXNpYmlsaXR5TGlzdGVuZXIiLCJ1cGRhdGVTZWxmVmlzaWJpbGl0eSIsImJpbmQiLCJub2RlIiwidHJhaWwiLCJsYXN0Tm9kZSIsImF0dGFjaERyYXdhYmxlIiwic2VsZlZpc2libGVFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJkaXNwb3NlIiwicmVtb3ZlTGlzdGVuZXIiLCJkZXRhY2hEcmF3YWJsZSIsInZpc2libGUiLCJzZWxmVmlzaWJsZSIsInRvRGV0YWlsZWRTdHJpbmciLCJ0b1N0cmluZyIsInRvUGF0aFN0cmluZyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2VsZkRyYXdhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuXHJcbi8qKlxyXG4gKiBBIGRyYXdhYmxlIHRoYXQgd2lsbCBwYWludCBhIHNpbmdsZSBpbnN0YW5jZS5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IERyYXdhYmxlLCBzY2VuZXJ5IH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5jbGFzcyBTZWxmRHJhd2FibGUgZXh0ZW5kcyBEcmF3YWJsZSB7XHJcbiAgLyoqXHJcbiAgICogV2UgaGF2ZSBlbm91Z2ggY29uY3JldGUgdHlwZXMgdGhhdCB3YW50IGEgZmFsbGJhY2sgY29uc3RydWN0b3IgdG8gdGhpcywgc28gd2UnbGwgcHJvdmlkZSBpdCBmb3IgY29udmVuaWVuY2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gcmVuZGVyZXJcclxuICAgKiBAcGFyYW0ge0luc3RhbmNlfSBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCByZW5kZXJlciwgaW5zdGFuY2UgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0eXBlb2YgcmVuZGVyZXIgPT09ICdudW1iZXInICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpbnN0YW5jZSApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5pbml0aWFsaXplKCByZW5kZXJlciwgaW5zdGFuY2UgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByZW5kZXJlclxyXG4gICAqIEBwYXJhbSB7SW5zdGFuY2V9IGluc3RhbmNlXHJcbiAgICogQHJldHVybnMge1NlbGZEcmF3YWJsZX1cclxuICAgKi9cclxuICBpbml0aWFsaXplKCByZW5kZXJlciwgaW5zdGFuY2UgKSB7XHJcbiAgICBzdXBlci5pbml0aWFsaXplKCByZW5kZXJlciApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtmdW5jdGlvbn1cclxuICAgIHRoaXMuZHJhd2FibGVWaXNpYmlsaXR5TGlzdGVuZXIgPSB0aGlzLmRyYXdhYmxlVmlzaWJpbGl0eUxpc3RlbmVyIHx8IHRoaXMudXBkYXRlU2VsZlZpc2liaWxpdHkuYmluZCggdGhpcyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge0luc3RhbmNlfVxyXG4gICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge05vZGV9XHJcbiAgICB0aGlzLm5vZGUgPSBpbnN0YW5jZS50cmFpbC5sYXN0Tm9kZSgpO1xyXG4gICAgdGhpcy5ub2RlLmF0dGFjaERyYXdhYmxlKCB0aGlzICk7XHJcblxyXG4gICAgdGhpcy5pbnN0YW5jZS5zZWxmVmlzaWJsZUVtaXR0ZXIuYWRkTGlzdGVuZXIoIHRoaXMuZHJhd2FibGVWaXNpYmlsaXR5TGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVNlbGZWaXNpYmlsaXR5KCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxlYXNlcyByZWZlcmVuY2VzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmluc3RhbmNlLnNlbGZWaXNpYmxlRW1pdHRlci5yZW1vdmVMaXN0ZW5lciggdGhpcy5kcmF3YWJsZVZpc2liaWxpdHlMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMubm9kZS5kZXRhY2hEcmF3YWJsZSggdGhpcyApO1xyXG5cclxuICAgIC8vIGZyZWUgcmVmZXJlbmNlc1xyXG4gICAgdGhpcy5pbnN0YW5jZSA9IG51bGw7XHJcbiAgICB0aGlzLm5vZGUgPSBudWxsO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICB1cGRhdGVTZWxmVmlzaWJpbGl0eSgpIHtcclxuICAgIC8vIGhpZGUgb3VyIGRyYXdhYmxlIGlmIGl0IGlzIG5vdCByZWxhdGl2ZWx5IHZpc2libGVcclxuICAgIHRoaXMudmlzaWJsZSA9IHRoaXMuaW5zdGFuY2Uuc2VsZlZpc2libGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgbW9yZS1pbmZvcm1hdGl2ZSBzdHJpbmcgZm9ybSBvZiB0aGlzIG9iamVjdC5cclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAqL1xyXG4gIHRvRGV0YWlsZWRTdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy50b1N0cmluZygpfSAoJHt0aGlzLmluc3RhbmNlLnRyYWlsLnRvUGF0aFN0cmluZygpfSlgO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ1NlbGZEcmF3YWJsZScsIFNlbGZEcmF3YWJsZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VsZkRyYXdhYmxlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxRQUFRLEVBQUVDLE9BQU8sUUFBUSxlQUFlO0FBRWpELE1BQU1DLFlBQVksU0FBU0YsUUFBUSxDQUFDO0VBQ2xDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxXQUFXQSxDQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRztJQUNoQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUUsT0FBT0YsUUFBUSxLQUFLLFFBQVMsQ0FBQztJQUNoREUsTUFBTSxJQUFJQSxNQUFNLENBQUVELFFBQVMsQ0FBQztJQUU1QixLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0UsVUFBVSxDQUFFSCxRQUFRLEVBQUVDLFFBQVMsQ0FBQztFQUN2Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxVQUFVQSxDQUFFSCxRQUFRLEVBQUVDLFFBQVEsRUFBRztJQUMvQixLQUFLLENBQUNFLFVBQVUsQ0FBRUgsUUFBUyxDQUFDOztJQUU1QjtJQUNBLElBQUksQ0FBQ0ksMEJBQTBCLEdBQUcsSUFBSSxDQUFDQSwwQkFBMEIsSUFBSSxJQUFJLENBQUNDLG9CQUFvQixDQUFDQyxJQUFJLENBQUUsSUFBSyxDQUFDOztJQUUzRztJQUNBLElBQUksQ0FBQ0wsUUFBUSxHQUFHQSxRQUFROztJQUV4QjtJQUNBLElBQUksQ0FBQ00sSUFBSSxHQUFHTixRQUFRLENBQUNPLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDRixJQUFJLENBQUNHLGNBQWMsQ0FBRSxJQUFLLENBQUM7SUFFaEMsSUFBSSxDQUFDVCxRQUFRLENBQUNVLGtCQUFrQixDQUFDQyxXQUFXLENBQUUsSUFBSSxDQUFDUiwwQkFBMkIsQ0FBQztJQUUvRSxJQUFJLENBQUNDLG9CQUFvQixDQUFDLENBQUM7SUFFM0IsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFUSxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNaLFFBQVEsQ0FBQ1Usa0JBQWtCLENBQUNHLGNBQWMsQ0FBRSxJQUFJLENBQUNWLDBCQUEyQixDQUFDO0lBRWxGLElBQUksQ0FBQ0csSUFBSSxDQUFDUSxjQUFjLENBQUUsSUFBSyxDQUFDOztJQUVoQztJQUNBLElBQUksQ0FBQ2QsUUFBUSxHQUFHLElBQUk7SUFDcEIsSUFBSSxDQUFDTSxJQUFJLEdBQUcsSUFBSTtJQUVoQixLQUFLLENBQUNNLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFUixvQkFBb0JBLENBQUEsRUFBRztJQUNyQjtJQUNBLElBQUksQ0FBQ1csT0FBTyxHQUFHLElBQUksQ0FBQ2YsUUFBUSxDQUFDZ0IsV0FBVztFQUMxQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxnQkFBZ0JBLENBQUEsRUFBRztJQUNqQixPQUFRLEdBQUUsSUFBSSxDQUFDQyxRQUFRLENBQUMsQ0FBRSxLQUFJLElBQUksQ0FBQ2xCLFFBQVEsQ0FBQ08sS0FBSyxDQUFDWSxZQUFZLENBQUMsQ0FBRSxHQUFFO0VBQ3JFO0FBQ0Y7QUFFQXZCLE9BQU8sQ0FBQ3dCLFFBQVEsQ0FBRSxjQUFjLEVBQUV2QixZQUFhLENBQUM7QUFFaEQsZUFBZUEsWUFBWSJ9