// Copyright 2017-2023, University of Colorado Boulder

/**
 * Controller that creates and keeps an SVG linear gradient up-to-date with a Scenery LinearGradient
 *
 * SVG gradients, see http://www.w3.org/TR/SVG/pservers.html
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Pool from '../../../phet-core/js/Pool.js';
import { scenery, SVGGradient, svgns } from '../imports.js';
export default class SVGLinearGradient extends SVGGradient {
  constructor(svgBlock, gradient) {
    super(svgBlock, gradient);
  }
  initialize(svgBlock, gradient) {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints(`[SVGLinearGradient] initialize ${gradient.id}`);
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    super.initialize(svgBlock, gradient);

    // seems we need the defs: http://stackoverflow.com/questions/7614209/linear-gradients-in-svg-without-defs
    // SVG: spreadMethod 'pad' 'reflect' 'repeat' - find Canvas usage

    /* Approximate example of what we are creating:
     <linearGradient id="grad2" x1="0" y1="0" x2="100" y2="0" gradientUnits="userSpaceOnUse">
     <stop offset="0" style="stop-color:rgb(255,255,0);stop-opacity:1" />
     <stop offset="0.5" style="stop-color:rgba(255,255,0,0);stop-opacity:0" />
     <stop offset="1" style="stop-color:rgb(255,0,0);stop-opacity:1" />
     </linearGradient>
     */

    // Linear-specific setup
    const linearGradient = gradient;
    this.definition.setAttribute('x1', '' + linearGradient.start.x);
    this.definition.setAttribute('y1', '' + linearGradient.start.y);
    this.definition.setAttribute('x2', '' + linearGradient.end.x);
    this.definition.setAttribute('y2', '' + linearGradient.end.y);
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
    return this;
  }

  /**
   * Creates the gradient-type-specific definition.
   */
  createDefinition() {
    return document.createElementNS(svgns, 'linearGradient');
  }
  freeToPool() {
    SVGLinearGradient.pool.freeToPool(this);
  }
  static pool = new Pool(SVGLinearGradient);
}
scenery.register('SVGLinearGradient', SVGLinearGradient);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb29sIiwic2NlbmVyeSIsIlNWR0dyYWRpZW50Iiwic3ZnbnMiLCJTVkdMaW5lYXJHcmFkaWVudCIsImNvbnN0cnVjdG9yIiwic3ZnQmxvY2siLCJncmFkaWVudCIsImluaXRpYWxpemUiLCJzY2VuZXJ5TG9nIiwiUGFpbnRzIiwiaWQiLCJwdXNoIiwibGluZWFyR3JhZGllbnQiLCJkZWZpbml0aW9uIiwic2V0QXR0cmlidXRlIiwic3RhcnQiLCJ4IiwieSIsImVuZCIsInBvcCIsImNyZWF0ZURlZmluaXRpb24iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImZyZWVUb1Bvb2wiLCJwb29sIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTVkdMaW5lYXJHcmFkaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb250cm9sbGVyIHRoYXQgY3JlYXRlcyBhbmQga2VlcHMgYW4gU1ZHIGxpbmVhciBncmFkaWVudCB1cC10by1kYXRlIHdpdGggYSBTY2VuZXJ5IExpbmVhckdyYWRpZW50XHJcbiAqXHJcbiAqIFNWRyBncmFkaWVudHMsIHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvcHNlcnZlcnMuaHRtbFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFBvb2wsIHsgVFBvb2xhYmxlIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL1Bvb2wuanMnO1xyXG5pbXBvcnQgeyBMaW5lYXJHcmFkaWVudCwgc2NlbmVyeSwgU1ZHQmxvY2ssIFNWR0dyYWRpZW50LCBzdmducyB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU1ZHTGluZWFyR3JhZGllbnQgZXh0ZW5kcyBTVkdHcmFkaWVudCBpbXBsZW1lbnRzIFRQb29sYWJsZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3ZnQmxvY2s6IFNWR0Jsb2NrLCBncmFkaWVudDogTGluZWFyR3JhZGllbnQgKSB7XHJcbiAgICBzdXBlciggc3ZnQmxvY2ssIGdyYWRpZW50ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgaW5pdGlhbGl6ZSggc3ZnQmxvY2s6IFNWR0Jsb2NrLCBncmFkaWVudDogTGluZWFyR3JhZGllbnQgKTogdGhpcyB7XHJcbiAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cuUGFpbnRzKCBgW1NWR0xpbmVhckdyYWRpZW50XSBpbml0aWFsaXplICR7Z3JhZGllbnQuaWR9YCApO1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnB1c2goKTtcclxuXHJcbiAgICBzdXBlci5pbml0aWFsaXplKCBzdmdCbG9jaywgZ3JhZGllbnQgKTtcclxuXHJcbiAgICAvLyBzZWVtcyB3ZSBuZWVkIHRoZSBkZWZzOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc2MTQyMDkvbGluZWFyLWdyYWRpZW50cy1pbi1zdmctd2l0aG91dC1kZWZzXHJcbiAgICAvLyBTVkc6IHNwcmVhZE1ldGhvZCAncGFkJyAncmVmbGVjdCcgJ3JlcGVhdCcgLSBmaW5kIENhbnZhcyB1c2FnZVxyXG5cclxuICAgIC8qIEFwcHJveGltYXRlIGV4YW1wbGUgb2Ygd2hhdCB3ZSBhcmUgY3JlYXRpbmc6XHJcbiAgICAgPGxpbmVhckdyYWRpZW50IGlkPVwiZ3JhZDJcIiB4MT1cIjBcIiB5MT1cIjBcIiB4Mj1cIjEwMFwiIHkyPVwiMFwiIGdyYWRpZW50VW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiPlxyXG4gICAgIDxzdG9wIG9mZnNldD1cIjBcIiBzdHlsZT1cInN0b3AtY29sb3I6cmdiKDI1NSwyNTUsMCk7c3RvcC1vcGFjaXR5OjFcIiAvPlxyXG4gICAgIDxzdG9wIG9mZnNldD1cIjAuNVwiIHN0eWxlPVwic3RvcC1jb2xvcjpyZ2JhKDI1NSwyNTUsMCwwKTtzdG9wLW9wYWNpdHk6MFwiIC8+XHJcbiAgICAgPHN0b3Agb2Zmc2V0PVwiMVwiIHN0eWxlPVwic3RvcC1jb2xvcjpyZ2IoMjU1LDAsMCk7c3RvcC1vcGFjaXR5OjFcIiAvPlxyXG4gICAgIDwvbGluZWFyR3JhZGllbnQ+XHJcbiAgICAgKi9cclxuXHJcbiAgICAvLyBMaW5lYXItc3BlY2lmaWMgc2V0dXBcclxuICAgIGNvbnN0IGxpbmVhckdyYWRpZW50ID0gZ3JhZGllbnQgYXMgdW5rbm93biBhcyBMaW5lYXJHcmFkaWVudDtcclxuICAgIHRoaXMuZGVmaW5pdGlvbi5zZXRBdHRyaWJ1dGUoICd4MScsICcnICsgbGluZWFyR3JhZGllbnQuc3RhcnQueCApO1xyXG4gICAgdGhpcy5kZWZpbml0aW9uLnNldEF0dHJpYnV0ZSggJ3kxJywgJycgKyBsaW5lYXJHcmFkaWVudC5zdGFydC55ICk7XHJcbiAgICB0aGlzLmRlZmluaXRpb24uc2V0QXR0cmlidXRlKCAneDInLCAnJyArIGxpbmVhckdyYWRpZW50LmVuZC54ICk7XHJcbiAgICB0aGlzLmRlZmluaXRpb24uc2V0QXR0cmlidXRlKCAneTInLCAnJyArIGxpbmVhckdyYWRpZW50LmVuZC55ICk7XHJcblxyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnBvcCgpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgZ3JhZGllbnQtdHlwZS1zcGVjaWZpYyBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjcmVhdGVEZWZpbml0aW9uKCk6IFNWR0xpbmVhckdyYWRpZW50RWxlbWVudCB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmducywgJ2xpbmVhckdyYWRpZW50JyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZyZWVUb1Bvb2woKTogdm9pZCB7XHJcbiAgICBTVkdMaW5lYXJHcmFkaWVudC5wb29sLmZyZWVUb1Bvb2woIHRoaXMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcG9vbCA9IG5ldyBQb29sKCBTVkdMaW5lYXJHcmFkaWVudCApO1xyXG59XHJcbnNjZW5lcnkucmVnaXN0ZXIoICdTVkdMaW5lYXJHcmFkaWVudCcsIFNWR0xpbmVhckdyYWRpZW50ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsSUFBSSxNQUFxQiwrQkFBK0I7QUFDL0QsU0FBeUJDLE9BQU8sRUFBWUMsV0FBVyxFQUFFQyxLQUFLLFFBQVEsZUFBZTtBQUVyRixlQUFlLE1BQU1DLGlCQUFpQixTQUFTRixXQUFXLENBQXNCO0VBRXZFRyxXQUFXQSxDQUFFQyxRQUFrQixFQUFFQyxRQUF3QixFQUFHO0lBQ2pFLEtBQUssQ0FBRUQsUUFBUSxFQUFFQyxRQUFTLENBQUM7RUFDN0I7RUFFZ0JDLFVBQVVBLENBQUVGLFFBQWtCLEVBQUVDLFFBQXdCLEVBQVM7SUFDL0VFLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxNQUFNLElBQUlELFVBQVUsQ0FBQ0MsTUFBTSxDQUFHLGtDQUFpQ0gsUUFBUSxDQUFDSSxFQUFHLEVBQUUsQ0FBQztJQUN2R0YsVUFBVSxJQUFJQSxVQUFVLENBQUNDLE1BQU0sSUFBSUQsVUFBVSxDQUFDRyxJQUFJLENBQUMsQ0FBQztJQUVwRCxLQUFLLENBQUNKLFVBQVUsQ0FBRUYsUUFBUSxFQUFFQyxRQUFTLENBQUM7O0lBRXRDO0lBQ0E7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRUk7SUFDQSxNQUFNTSxjQUFjLEdBQUdOLFFBQXFDO0lBQzVELElBQUksQ0FBQ08sVUFBVSxDQUFDQyxZQUFZLENBQUUsSUFBSSxFQUFFLEVBQUUsR0FBR0YsY0FBYyxDQUFDRyxLQUFLLENBQUNDLENBQUUsQ0FBQztJQUNqRSxJQUFJLENBQUNILFVBQVUsQ0FBQ0MsWUFBWSxDQUFFLElBQUksRUFBRSxFQUFFLEdBQUdGLGNBQWMsQ0FBQ0csS0FBSyxDQUFDRSxDQUFFLENBQUM7SUFDakUsSUFBSSxDQUFDSixVQUFVLENBQUNDLFlBQVksQ0FBRSxJQUFJLEVBQUUsRUFBRSxHQUFHRixjQUFjLENBQUNNLEdBQUcsQ0FBQ0YsQ0FBRSxDQUFDO0lBQy9ELElBQUksQ0FBQ0gsVUFBVSxDQUFDQyxZQUFZLENBQUUsSUFBSSxFQUFFLEVBQUUsR0FBR0YsY0FBYyxDQUFDTSxHQUFHLENBQUNELENBQUUsQ0FBQztJQUUvRFQsVUFBVSxJQUFJQSxVQUFVLENBQUNDLE1BQU0sSUFBSUQsVUFBVSxDQUFDVyxHQUFHLENBQUMsQ0FBQztJQUVuRCxPQUFPLElBQUk7RUFDYjs7RUFFQTtBQUNGO0FBQ0E7RUFDWUMsZ0JBQWdCQSxDQUFBLEVBQTZCO0lBQ3JELE9BQU9DLFFBQVEsQ0FBQ0MsZUFBZSxDQUFFcEIsS0FBSyxFQUFFLGdCQUFpQixDQUFDO0VBQzVEO0VBRU9xQixVQUFVQSxDQUFBLEVBQVM7SUFDeEJwQixpQkFBaUIsQ0FBQ3FCLElBQUksQ0FBQ0QsVUFBVSxDQUFFLElBQUssQ0FBQztFQUMzQztFQUVBLE9BQXVCQyxJQUFJLEdBQUcsSUFBSXpCLElBQUksQ0FBRUksaUJBQWtCLENBQUM7QUFDN0Q7QUFDQUgsT0FBTyxDQUFDeUIsUUFBUSxDQUFFLG1CQUFtQixFQUFFdEIsaUJBQWtCLENBQUMifQ==