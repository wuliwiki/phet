// Copyright 2016-2022, University of Colorado Boulder

/**
 * Canvas drawable for Image nodes.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Poolable from '../../../../phet-core/js/Poolable.js';
import { CanvasSelfDrawable, Imageable, scenery } from '../../imports.js';
class ImageCanvasDrawable extends CanvasSelfDrawable {
  /**
   * Paints this drawable to a Canvas (the wrapper contains both a Canvas reference and its drawing context).
   * @public
   *
   * Assumes that the Canvas's context is already in the proper local coordinate frame for the node, and that any
   * other required effects (opacity, clipping, etc.) have already been prepared.
   *
   * This is part of the CanvasSelfDrawable API required to be implemented for subtypes.
   *
   * @param {CanvasContextWrapper} wrapper - Contains the Canvas and its drawing context
   * @param {scenery.Node} node - Our node that is being drawn
   * @param {Matrix3} matrix - The transformation matrix applied for this node's coordinate system.
   */
  paintCanvas(wrapper, node, matrix) {
    const hasImageOpacity = node._imageOpacity !== 1;

    // Ensure that the image has been loaded by checking whether it has a width or height of 0.
    // See https://github.com/phetsims/scenery/issues/536
    if (node._image && node._image.width !== 0 && node._image.height !== 0) {
      // If we have image opacity, we need to apply the opacity on top of whatever globalAlpha may exist
      if (hasImageOpacity) {
        wrapper.context.save();
        wrapper.context.globalAlpha *= node._imageOpacity;
      }
      if (node._mipmap && node.hasMipmaps()) {
        const level = node.getMipmapLevel(matrix, Imageable.CANVAS_MIPMAP_BIAS_ADJUSTMENT);
        const canvas = node.getMipmapCanvas(level);
        const multiplier = Math.pow(2, level);
        wrapper.context.drawImage(canvas, 0, 0, canvas.width * multiplier, canvas.height * multiplier);
      } else {
        wrapper.context.drawImage(node._image, 0, 0);
      }
      if (hasImageOpacity) {
        wrapper.context.restore();
      }
    }
  }

  /**
   * @public
   */
  markDirtyImage() {
    this.markPaintDirty();
  }

  /**
   * @public
   */
  markDirtyMipmap() {
    this.markPaintDirty();
  }

  /**
   * @public
   */
  markDirtyImageOpacity() {
    this.markPaintDirty();
  }
}
scenery.register('ImageCanvasDrawable', ImageCanvasDrawable);
Poolable.mixInto(ImageCanvasDrawable);
export default ImageCanvasDrawable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb29sYWJsZSIsIkNhbnZhc1NlbGZEcmF3YWJsZSIsIkltYWdlYWJsZSIsInNjZW5lcnkiLCJJbWFnZUNhbnZhc0RyYXdhYmxlIiwicGFpbnRDYW52YXMiLCJ3cmFwcGVyIiwibm9kZSIsIm1hdHJpeCIsImhhc0ltYWdlT3BhY2l0eSIsIl9pbWFnZU9wYWNpdHkiLCJfaW1hZ2UiLCJ3aWR0aCIsImhlaWdodCIsImNvbnRleHQiLCJzYXZlIiwiZ2xvYmFsQWxwaGEiLCJfbWlwbWFwIiwiaGFzTWlwbWFwcyIsImxldmVsIiwiZ2V0TWlwbWFwTGV2ZWwiLCJDQU5WQVNfTUlQTUFQX0JJQVNfQURKVVNUTUVOVCIsImNhbnZhcyIsImdldE1pcG1hcENhbnZhcyIsIm11bHRpcGxpZXIiLCJNYXRoIiwicG93IiwiZHJhd0ltYWdlIiwicmVzdG9yZSIsIm1hcmtEaXJ0eUltYWdlIiwibWFya1BhaW50RGlydHkiLCJtYXJrRGlydHlNaXBtYXAiLCJtYXJrRGlydHlJbWFnZU9wYWNpdHkiLCJyZWdpc3RlciIsIm1peEludG8iXSwic291cmNlcyI6WyJJbWFnZUNhbnZhc0RyYXdhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENhbnZhcyBkcmF3YWJsZSBmb3IgSW1hZ2Ugbm9kZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgUG9vbGFibGUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL1Bvb2xhYmxlLmpzJztcclxuaW1wb3J0IHsgQ2FudmFzU2VsZkRyYXdhYmxlLCBJbWFnZWFibGUsIHNjZW5lcnkgfSBmcm9tICcuLi8uLi9pbXBvcnRzLmpzJztcclxuXHJcbmNsYXNzIEltYWdlQ2FudmFzRHJhd2FibGUgZXh0ZW5kcyBDYW52YXNTZWxmRHJhd2FibGUge1xyXG4gIC8qKlxyXG4gICAqIFBhaW50cyB0aGlzIGRyYXdhYmxlIHRvIGEgQ2FudmFzICh0aGUgd3JhcHBlciBjb250YWlucyBib3RoIGEgQ2FudmFzIHJlZmVyZW5jZSBhbmQgaXRzIGRyYXdpbmcgY29udGV4dCkuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQXNzdW1lcyB0aGF0IHRoZSBDYW52YXMncyBjb250ZXh0IGlzIGFscmVhZHkgaW4gdGhlIHByb3BlciBsb2NhbCBjb29yZGluYXRlIGZyYW1lIGZvciB0aGUgbm9kZSwgYW5kIHRoYXQgYW55XHJcbiAgICogb3RoZXIgcmVxdWlyZWQgZWZmZWN0cyAob3BhY2l0eSwgY2xpcHBpbmcsIGV0Yy4pIGhhdmUgYWxyZWFkeSBiZWVuIHByZXBhcmVkLlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyBwYXJ0IG9mIHRoZSBDYW52YXNTZWxmRHJhd2FibGUgQVBJIHJlcXVpcmVkIHRvIGJlIGltcGxlbWVudGVkIGZvciBzdWJ0eXBlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2FudmFzQ29udGV4dFdyYXBwZXJ9IHdyYXBwZXIgLSBDb250YWlucyB0aGUgQ2FudmFzIGFuZCBpdHMgZHJhd2luZyBjb250ZXh0XHJcbiAgICogQHBhcmFtIHtzY2VuZXJ5Lk5vZGV9IG5vZGUgLSBPdXIgbm9kZSB0aGF0IGlzIGJlaW5nIGRyYXduXHJcbiAgICogQHBhcmFtIHtNYXRyaXgzfSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4IGFwcGxpZWQgZm9yIHRoaXMgbm9kZSdzIGNvb3JkaW5hdGUgc3lzdGVtLlxyXG4gICAqL1xyXG4gIHBhaW50Q2FudmFzKCB3cmFwcGVyLCBub2RlLCBtYXRyaXggKSB7XHJcbiAgICBjb25zdCBoYXNJbWFnZU9wYWNpdHkgPSBub2RlLl9pbWFnZU9wYWNpdHkgIT09IDE7XHJcblxyXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIGltYWdlIGhhcyBiZWVuIGxvYWRlZCBieSBjaGVja2luZyB3aGV0aGVyIGl0IGhhcyBhIHdpZHRoIG9yIGhlaWdodCBvZiAwLlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5L2lzc3Vlcy81MzZcclxuICAgIGlmICggbm9kZS5faW1hZ2UgJiYgbm9kZS5faW1hZ2Uud2lkdGggIT09IDAgJiYgbm9kZS5faW1hZ2UuaGVpZ2h0ICE9PSAwICkge1xyXG4gICAgICAvLyBJZiB3ZSBoYXZlIGltYWdlIG9wYWNpdHksIHdlIG5lZWQgdG8gYXBwbHkgdGhlIG9wYWNpdHkgb24gdG9wIG9mIHdoYXRldmVyIGdsb2JhbEFscGhhIG1heSBleGlzdFxyXG4gICAgICBpZiAoIGhhc0ltYWdlT3BhY2l0eSApIHtcclxuICAgICAgICB3cmFwcGVyLmNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgIHdyYXBwZXIuY29udGV4dC5nbG9iYWxBbHBoYSAqPSBub2RlLl9pbWFnZU9wYWNpdHk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICggbm9kZS5fbWlwbWFwICYmIG5vZGUuaGFzTWlwbWFwcygpICkge1xyXG4gICAgICAgIGNvbnN0IGxldmVsID0gbm9kZS5nZXRNaXBtYXBMZXZlbCggbWF0cml4LCBJbWFnZWFibGUuQ0FOVkFTX01JUE1BUF9CSUFTX0FESlVTVE1FTlQgKTtcclxuICAgICAgICBjb25zdCBjYW52YXMgPSBub2RlLmdldE1pcG1hcENhbnZhcyggbGV2ZWwgKTtcclxuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gTWF0aC5wb3coIDIsIGxldmVsICk7XHJcbiAgICAgICAgd3JhcHBlci5jb250ZXh0LmRyYXdJbWFnZSggY2FudmFzLCAwLCAwLCBjYW52YXMud2lkdGggKiBtdWx0aXBsaWVyLCBjYW52YXMuaGVpZ2h0ICogbXVsdGlwbGllciApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHdyYXBwZXIuY29udGV4dC5kcmF3SW1hZ2UoIG5vZGUuX2ltYWdlLCAwLCAwICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICggaGFzSW1hZ2VPcGFjaXR5ICkge1xyXG4gICAgICAgIHdyYXBwZXIuY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBtYXJrRGlydHlJbWFnZSgpIHtcclxuICAgIHRoaXMubWFya1BhaW50RGlydHkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBtYXJrRGlydHlNaXBtYXAoKSB7XHJcbiAgICB0aGlzLm1hcmtQYWludERpcnR5KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgbWFya0RpcnR5SW1hZ2VPcGFjaXR5KCkge1xyXG4gICAgdGhpcy5tYXJrUGFpbnREaXJ0eSgpO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ0ltYWdlQ2FudmFzRHJhd2FibGUnLCBJbWFnZUNhbnZhc0RyYXdhYmxlICk7XHJcblxyXG5Qb29sYWJsZS5taXhJbnRvKCBJbWFnZUNhbnZhc0RyYXdhYmxlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbWFnZUNhbnZhc0RyYXdhYmxlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sc0NBQXNDO0FBQzNELFNBQVNDLGtCQUFrQixFQUFFQyxTQUFTLEVBQUVDLE9BQU8sUUFBUSxrQkFBa0I7QUFFekUsTUFBTUMsbUJBQW1CLFNBQVNILGtCQUFrQixDQUFDO0VBQ25EO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUc7SUFDbkMsTUFBTUMsZUFBZSxHQUFHRixJQUFJLENBQUNHLGFBQWEsS0FBSyxDQUFDOztJQUVoRDtJQUNBO0lBQ0EsSUFBS0gsSUFBSSxDQUFDSSxNQUFNLElBQUlKLElBQUksQ0FBQ0ksTUFBTSxDQUFDQyxLQUFLLEtBQUssQ0FBQyxJQUFJTCxJQUFJLENBQUNJLE1BQU0sQ0FBQ0UsTUFBTSxLQUFLLENBQUMsRUFBRztNQUN4RTtNQUNBLElBQUtKLGVBQWUsRUFBRztRQUNyQkgsT0FBTyxDQUFDUSxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDO1FBQ3RCVCxPQUFPLENBQUNRLE9BQU8sQ0FBQ0UsV0FBVyxJQUFJVCxJQUFJLENBQUNHLGFBQWE7TUFDbkQ7TUFFQSxJQUFLSCxJQUFJLENBQUNVLE9BQU8sSUFBSVYsSUFBSSxDQUFDVyxVQUFVLENBQUMsQ0FBQyxFQUFHO1FBQ3ZDLE1BQU1DLEtBQUssR0FBR1osSUFBSSxDQUFDYSxjQUFjLENBQUVaLE1BQU0sRUFBRU4sU0FBUyxDQUFDbUIsNkJBQThCLENBQUM7UUFDcEYsTUFBTUMsTUFBTSxHQUFHZixJQUFJLENBQUNnQixlQUFlLENBQUVKLEtBQU0sQ0FBQztRQUM1QyxNQUFNSyxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFFLENBQUMsRUFBRVAsS0FBTSxDQUFDO1FBQ3ZDYixPQUFPLENBQUNRLE9BQU8sQ0FBQ2EsU0FBUyxDQUFFTCxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRUEsTUFBTSxDQUFDVixLQUFLLEdBQUdZLFVBQVUsRUFBRUYsTUFBTSxDQUFDVCxNQUFNLEdBQUdXLFVBQVcsQ0FBQztNQUNsRyxDQUFDLE1BQ0k7UUFDSGxCLE9BQU8sQ0FBQ1EsT0FBTyxDQUFDYSxTQUFTLENBQUVwQixJQUFJLENBQUNJLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO01BQ2hEO01BRUEsSUFBS0YsZUFBZSxFQUFHO1FBQ3JCSCxPQUFPLENBQUNRLE9BQU8sQ0FBQ2MsT0FBTyxDQUFDLENBQUM7TUFDM0I7SUFDRjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNFQyxjQUFjQSxDQUFBLEVBQUc7SUFDZixJQUFJLENBQUNDLGNBQWMsQ0FBQyxDQUFDO0VBQ3ZCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFQyxlQUFlQSxDQUFBLEVBQUc7SUFDaEIsSUFBSSxDQUFDRCxjQUFjLENBQUMsQ0FBQztFQUN2Qjs7RUFFQTtBQUNGO0FBQ0E7RUFDRUUscUJBQXFCQSxDQUFBLEVBQUc7SUFDdEIsSUFBSSxDQUFDRixjQUFjLENBQUMsQ0FBQztFQUN2QjtBQUNGO0FBRUEzQixPQUFPLENBQUM4QixRQUFRLENBQUUscUJBQXFCLEVBQUU3QixtQkFBb0IsQ0FBQztBQUU5REosUUFBUSxDQUFDa0MsT0FBTyxDQUFFOUIsbUJBQW9CLENBQUM7QUFFdkMsZUFBZUEsbUJBQW1CIn0=