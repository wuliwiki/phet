// Copyright 2019-2022, University of Colorado Boulder

/**
 * WebGL drawable for Sprites.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import animationFrameTimer from '../../../../axon/js/animationFrameTimer.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import platform from '../../../../phet-core/js/platform.js';
import Poolable from '../../../../phet-core/js/Poolable.js';
import { Renderer, scenery, ShaderProgram, SpriteSheet, WebGLSelfDrawable } from '../../imports.js';

// constants
const COMPONENTS = 5; // { X Y U V A }
const FLOAT_QUANTITY = COMPONENTS * 6; // 6 vertices

// scratch values - corner vertices in the relative transform root coordinate space
const upperLeft = new Vector2(0, 0);
const lowerLeft = new Vector2(0, 0);
const upperRight = new Vector2(0, 0);
const lowerRight = new Vector2(0, 0);
class SpritesWebGLDrawable extends WebGLSelfDrawable {
  /**
   * @public
   * @override
   *
   * @param {number} renderer
   * @param {Instance} instance
   */
  initialize(renderer, instance) {
    super.initialize(renderer, instance);

    // @private {function}
    this.contextChangeListener = this.onWebGLContextChange.bind(this);

    // @private {SpriteSheet}
    this.spriteSheet = new SpriteSheet(true);

    // @private {Object} - Maps {number} SpriteImage.id => {Bounds2} UV bounds
    this.spriteImageUVMap = {};

    // @private {Float32Array}
    this.vertexArray = new Float32Array(128 * FLOAT_QUANTITY);

    // @private {Float32Array}
    this.transformMatrixArray = new Float32Array(9);

    // @private {function}
    this.spriteChangeListener = this.onSpriteChange.bind(this);
    this.node._sprites.forEach(sprite => {
      sprite.imageProperty.lazyLink(this.spriteChangeListener);
      this.addSpriteImage(sprite.imageProperty.value);
    });

    // @private {boolean} - See https://github.com/phetsims/natural-selection/issues/243
    this.hasDrawn = false;
  }

  /**
   * Adds a SpriteImage to our SpriteSheet.
   * @private
   *
   * @param {SpriteImage} spriteImage
   */
  addSpriteImage(spriteImage) {
    this.spriteImageUVMap[spriteImage.id] = this.spriteSheet.addImage(spriteImage.image, spriteImage.image.width, spriteImage.image.height).uvBounds;
  }

  /**
   * Removes a SpriteImage from our SpriteSheet.
   * @private
   *
   * @param {SpriteImage} spriteImage
   */
  removeSpriteImage(spriteImage) {
    this.spriteSheet.removeImage(spriteImage.image);
    delete this.spriteImageUVMap[spriteImage.id];
  }

  /**
   * Called when a Sprite's SpriteImage changes.
   * @private
   *
   * @param {SpriteImage} newSpriteImage
   * @param {SpriteImage} oldSpriteImage
   */
  onSpriteChange(newSpriteImage, oldSpriteImage) {
    this.removeSpriteImage(oldSpriteImage);
    this.addSpriteImage(newSpriteImage);
  }

  /**
   * Sets up everything with a new WebGL context
   *
   * @private
   */
  setup() {
    const gl = this.webGLBlock.gl;
    this.spriteSheet.initializeContext(gl);

    // @private {ShaderProgram}
    this.shaderProgram = new ShaderProgram(gl, [
    // vertex shader
    'attribute vec2 aVertex;', 'attribute vec2 aTextureCoord;', 'attribute float aAlpha;', 'varying vec2 vTextureCoord;', 'varying float vAlpha;', 'uniform mat3 uProjectionMatrix;', 'uniform mat3 uTransformMatrix;', 'void main() {', '  vTextureCoord = aTextureCoord;', '  vAlpha = aAlpha;', '  vec3 ndc = uProjectionMatrix * ( uTransformMatrix * vec3( aVertex, 1.0 ) );',
    // homogeneous map to to normalized device coordinates
    '  gl_Position = vec4( ndc.xy, 0.0, 1.0 );', '}'].join('\n'), [
    // fragment shader
    'precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float vAlpha;', 'uniform sampler2D uTexture;', 'void main() {', '  vec4 color = texture2D( uTexture, vTextureCoord, -0.7 );',
    // mipmap LOD bias of -0.7 (for now)
    '  color.a *= vAlpha;', '  gl_FragColor = color;',
    // don't premultiply alpha (we are loading the textures as premultiplied already)
    '}'].join('\n'), {
      attributes: ['aVertex', 'aTextureCoord', 'aAlpha'],
      uniforms: ['uTexture', 'uProjectionMatrix', 'uTransformMatrix']
    });

    // @private {WebGLBuffer}
    this.vertexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, this.vertexArray, gl.DYNAMIC_DRAW); // fully buffer at the start
  }

  /**
   * Callback for when the WebGL context changes. We'll reconstruct the painter.
   * @public
   */
  onWebGLContextChange() {
    this.setup();
  }

  /**
   * Called when this drawable is added to a block.
   * @public
   *
   * @param {WebGLBlock} webGLBlock
   */
  onAddToBlock(webGLBlock) {
    // @private {WebGLBlock}
    this.webGLBlock = webGLBlock;
    this.setup();
    webGLBlock.glChangedEmitter.addListener(this.contextChangeListener);
  }

  /**
   * Called when this drawable is removed from a block.
   * @public
   *
   * @param {WebGLBlock} webGLBlock
   */
  onRemoveFromBlock(webGLBlock) {
    webGLBlock.glChangedEmitter.removeListener(this.contextChangeListener);
  }

  /**
   * Draws the WebGL content.
   * @public
   */
  draw() {
    const length = this.node._spriteInstances.length;

    // Don't render anything if we have nothing
    if (length === 0) {
      return 0;
    }
    this.spriteSheet.updateTexture();
    this.shaderProgram.use();
    let vertexArrayIndex = 0;
    let changedLength = false;

    // if our vertex data won't fit, keep doubling the size until it fits
    while (FLOAT_QUANTITY * length > this.vertexArray.length) {
      this.vertexArray = new Float32Array(this.vertexArray.length * 2);
      changedLength = true;
    }
    for (let i = 0; i < length; i++) {
      const spriteInstance = this.node._spriteInstances[i];
      const spriteImage = spriteInstance.sprite.imageProperty.value;
      const alpha = spriteInstance.alpha * spriteImage.imageOpacity;
      const uvBounds = this.spriteImageUVMap[spriteImage.id];
      const matrix = spriteInstance.matrix;
      const offset = spriteImage.offset;
      const width = spriteImage.image.width;
      const height = spriteImage.image.height;

      // Compute our vertices
      matrix.multiplyVector2(upperLeft.setXY(-offset.x, -offset.y));
      matrix.multiplyVector2(lowerLeft.setXY(-offset.x, height - offset.y));
      matrix.multiplyVector2(upperRight.setXY(width - offset.x, -offset.y));
      matrix.multiplyVector2(lowerRight.setXY(width - offset.x, height - offset.y));

      // copy our vertex data into the main array (consensus was that this is the fastest way to fill in data)
      this.vertexArray[vertexArrayIndex + 0] = upperLeft.x;
      this.vertexArray[vertexArrayIndex + 1] = upperLeft.y;
      this.vertexArray[vertexArrayIndex + 2] = uvBounds.minX;
      this.vertexArray[vertexArrayIndex + 3] = uvBounds.minY;
      this.vertexArray[vertexArrayIndex + 4] = alpha;
      this.vertexArray[vertexArrayIndex + 5] = lowerLeft.x;
      this.vertexArray[vertexArrayIndex + 6] = lowerLeft.y;
      this.vertexArray[vertexArrayIndex + 7] = uvBounds.minX;
      this.vertexArray[vertexArrayIndex + 8] = uvBounds.maxY;
      this.vertexArray[vertexArrayIndex + 9] = alpha;
      this.vertexArray[vertexArrayIndex + 10] = upperRight.x;
      this.vertexArray[vertexArrayIndex + 11] = upperRight.y;
      this.vertexArray[vertexArrayIndex + 12] = uvBounds.maxX;
      this.vertexArray[vertexArrayIndex + 13] = uvBounds.minY;
      this.vertexArray[vertexArrayIndex + 14] = alpha;
      this.vertexArray[vertexArrayIndex + 15] = upperRight.x;
      this.vertexArray[vertexArrayIndex + 16] = upperRight.y;
      this.vertexArray[vertexArrayIndex + 17] = uvBounds.maxX;
      this.vertexArray[vertexArrayIndex + 18] = uvBounds.minY;
      this.vertexArray[vertexArrayIndex + 19] = alpha;
      this.vertexArray[vertexArrayIndex + 20] = lowerLeft.x;
      this.vertexArray[vertexArrayIndex + 21] = lowerLeft.y;
      this.vertexArray[vertexArrayIndex + 22] = uvBounds.minX;
      this.vertexArray[vertexArrayIndex + 23] = uvBounds.maxY;
      this.vertexArray[vertexArrayIndex + 24] = alpha;
      this.vertexArray[vertexArrayIndex + 25] = lowerRight.x;
      this.vertexArray[vertexArrayIndex + 26] = lowerRight.y;
      this.vertexArray[vertexArrayIndex + 27] = uvBounds.maxX;
      this.vertexArray[vertexArrayIndex + 28] = uvBounds.maxY;
      this.vertexArray[vertexArrayIndex + 29] = alpha;
      vertexArrayIndex += FLOAT_QUANTITY;
    }
    const gl = this.webGLBlock.gl;

    // (uniform) projection transform into normalized device coordinates
    gl.uniformMatrix3fv(this.shaderProgram.uniformLocations.uProjectionMatrix, false, this.webGLBlock.projectionMatrixArray);

    // (uniform) transformation matrix that is common to all sprites
    this.instance.relativeTransform.matrix.copyToArray(this.transformMatrixArray);
    gl.uniformMatrix3fv(this.shaderProgram.uniformLocations.uTransformMatrix, false, this.transformMatrixArray);
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
    // if we increased in length, we need to do a full bufferData to resize it on the GPU side
    if (changedLength) {
      gl.bufferData(gl.ARRAY_BUFFER, this.vertexArray, gl.DYNAMIC_DRAW); // fully buffer at the start
    }
    // otherwise do a more efficient update that only sends part of the array over
    else {
      gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertexArray.subarray(0, vertexArrayIndex));
    }
    const sizeOfFloat = Float32Array.BYTES_PER_ELEMENT;
    const stride = COMPONENTS * sizeOfFloat;
    gl.vertexAttribPointer(this.shaderProgram.attributeLocations.aVertex, 2, gl.FLOAT, false, stride, 0 * sizeOfFloat);
    gl.vertexAttribPointer(this.shaderProgram.attributeLocations.aTextureCoord, 2, gl.FLOAT, false, stride, 2 * sizeOfFloat);
    gl.vertexAttribPointer(this.shaderProgram.attributeLocations.aAlpha, 1, gl.FLOAT, false, stride, 4 * sizeOfFloat);
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, this.spriteSheet.texture);
    gl.uniform1i(this.shaderProgram.uniformLocations.uTexture, 0);
    gl.drawArrays(gl.TRIANGLES, 0, vertexArrayIndex / COMPONENTS);
    gl.bindTexture(gl.TEXTURE_2D, null);
    this.shaderProgram.unuse();

    // See https://github.com/phetsims/natural-selection/issues/243
    if (!this.hasDrawn && platform.safari) {
      // Redraw once more if we're in Safari, since it's undetermined why an initial draw isn't working.
      // Everything seems to otherwise be in place.
      animationFrameTimer.setTimeout(() => this.markDirty(), 0);
    }
    this.hasDrawn = true;
    return 1;
  }

  /**
   * Disposes the drawable.
   * @public
   * @override
   */
  dispose() {
    this.node._sprites.forEach(sprite => {
      sprite.imageProperty.unlink(this.spriteChangeListener);
    });
    if (this.webGLBlock) {
      this.webGLBlock = null;
    }

    // super
    super.dispose();
  }

  /**
   * A "catch-all" dirty method that directly marks the paintDirty flag and triggers propagation of dirty
   * information. This can be used by other mark* methods, or directly itself if the paintDirty flag is checked.
   * @public
   *
   * It should be fired (indirectly or directly) for anything besides transforms that needs to make a drawable
   * dirty.
   */
  markPaintDirty() {
    this.markDirty();
  }
}

// We use a custom renderer for the needed flexibility
SpritesWebGLDrawable.prototype.webglRenderer = Renderer.webglCustom;
scenery.register('SpritesWebGLDrawable', SpritesWebGLDrawable);
Poolable.mixInto(SpritesWebGLDrawable);
export default SpritesWebGLDrawable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhbmltYXRpb25GcmFtZVRpbWVyIiwiVmVjdG9yMiIsInBsYXRmb3JtIiwiUG9vbGFibGUiLCJSZW5kZXJlciIsInNjZW5lcnkiLCJTaGFkZXJQcm9ncmFtIiwiU3ByaXRlU2hlZXQiLCJXZWJHTFNlbGZEcmF3YWJsZSIsIkNPTVBPTkVOVFMiLCJGTE9BVF9RVUFOVElUWSIsInVwcGVyTGVmdCIsImxvd2VyTGVmdCIsInVwcGVyUmlnaHQiLCJsb3dlclJpZ2h0IiwiU3ByaXRlc1dlYkdMRHJhd2FibGUiLCJpbml0aWFsaXplIiwicmVuZGVyZXIiLCJpbnN0YW5jZSIsImNvbnRleHRDaGFuZ2VMaXN0ZW5lciIsIm9uV2ViR0xDb250ZXh0Q2hhbmdlIiwiYmluZCIsInNwcml0ZVNoZWV0Iiwic3ByaXRlSW1hZ2VVVk1hcCIsInZlcnRleEFycmF5IiwiRmxvYXQzMkFycmF5IiwidHJhbnNmb3JtTWF0cml4QXJyYXkiLCJzcHJpdGVDaGFuZ2VMaXN0ZW5lciIsIm9uU3ByaXRlQ2hhbmdlIiwibm9kZSIsIl9zcHJpdGVzIiwiZm9yRWFjaCIsInNwcml0ZSIsImltYWdlUHJvcGVydHkiLCJsYXp5TGluayIsImFkZFNwcml0ZUltYWdlIiwidmFsdWUiLCJoYXNEcmF3biIsInNwcml0ZUltYWdlIiwiaWQiLCJhZGRJbWFnZSIsImltYWdlIiwid2lkdGgiLCJoZWlnaHQiLCJ1dkJvdW5kcyIsInJlbW92ZVNwcml0ZUltYWdlIiwicmVtb3ZlSW1hZ2UiLCJuZXdTcHJpdGVJbWFnZSIsIm9sZFNwcml0ZUltYWdlIiwic2V0dXAiLCJnbCIsIndlYkdMQmxvY2siLCJpbml0aWFsaXplQ29udGV4dCIsInNoYWRlclByb2dyYW0iLCJqb2luIiwiYXR0cmlidXRlcyIsInVuaWZvcm1zIiwidmVydGV4QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJEWU5BTUlDX0RSQVciLCJvbkFkZFRvQmxvY2siLCJnbENoYW5nZWRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJvblJlbW92ZUZyb21CbG9jayIsInJlbW92ZUxpc3RlbmVyIiwiZHJhdyIsImxlbmd0aCIsIl9zcHJpdGVJbnN0YW5jZXMiLCJ1cGRhdGVUZXh0dXJlIiwidXNlIiwidmVydGV4QXJyYXlJbmRleCIsImNoYW5nZWRMZW5ndGgiLCJpIiwic3ByaXRlSW5zdGFuY2UiLCJhbHBoYSIsImltYWdlT3BhY2l0eSIsIm1hdHJpeCIsIm9mZnNldCIsIm11bHRpcGx5VmVjdG9yMiIsInNldFhZIiwieCIsInkiLCJtaW5YIiwibWluWSIsIm1heFkiLCJtYXhYIiwidW5pZm9ybU1hdHJpeDNmdiIsInVuaWZvcm1Mb2NhdGlvbnMiLCJ1UHJvamVjdGlvbk1hdHJpeCIsInByb2plY3Rpb25NYXRyaXhBcnJheSIsInJlbGF0aXZlVHJhbnNmb3JtIiwiY29weVRvQXJyYXkiLCJ1VHJhbnNmb3JtTWF0cml4IiwiYnVmZmVyU3ViRGF0YSIsInN1YmFycmF5Iiwic2l6ZU9mRmxvYXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsInN0cmlkZSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJhVmVydGV4IiwiRkxPQVQiLCJhVGV4dHVyZUNvb3JkIiwiYUFscGhhIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4dHVyZSIsInVuaWZvcm0xaSIsInVUZXh0dXJlIiwiZHJhd0FycmF5cyIsIlRSSUFOR0xFUyIsInVudXNlIiwic2FmYXJpIiwic2V0VGltZW91dCIsIm1hcmtEaXJ0eSIsImRpc3Bvc2UiLCJ1bmxpbmsiLCJtYXJrUGFpbnREaXJ0eSIsInByb3RvdHlwZSIsIndlYmdsUmVuZGVyZXIiLCJ3ZWJnbEN1c3RvbSIsInJlZ2lzdGVyIiwibWl4SW50byJdLCJzb3VyY2VzIjpbIlNwcml0ZXNXZWJHTERyYXdhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFdlYkdMIGRyYXdhYmxlIGZvciBTcHJpdGVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IGFuaW1hdGlvbkZyYW1lVGltZXIgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9hbmltYXRpb25GcmFtZVRpbWVyLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3BsYXRmb3JtLmpzJztcclxuaW1wb3J0IFBvb2xhYmxlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9Qb29sYWJsZS5qcyc7XHJcbmltcG9ydCB7IFJlbmRlcmVyLCBzY2VuZXJ5LCBTaGFkZXJQcm9ncmFtLCBTcHJpdGVTaGVldCwgV2ViR0xTZWxmRHJhd2FibGUgfSBmcm9tICcuLi8uLi9pbXBvcnRzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBDT01QT05FTlRTID0gNTsgLy8geyBYIFkgVSBWIEEgfVxyXG5jb25zdCBGTE9BVF9RVUFOVElUWSA9IENPTVBPTkVOVFMgKiA2OyAvLyA2IHZlcnRpY2VzXHJcblxyXG4vLyBzY3JhdGNoIHZhbHVlcyAtIGNvcm5lciB2ZXJ0aWNlcyBpbiB0aGUgcmVsYXRpdmUgdHJhbnNmb3JtIHJvb3QgY29vcmRpbmF0ZSBzcGFjZVxyXG5jb25zdCB1cHBlckxlZnQgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xyXG5jb25zdCBsb3dlckxlZnQgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xyXG5jb25zdCB1cHBlclJpZ2h0ID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcclxuY29uc3QgbG93ZXJSaWdodCA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XHJcblxyXG5jbGFzcyBTcHJpdGVzV2ViR0xEcmF3YWJsZSBleHRlbmRzIFdlYkdMU2VsZkRyYXdhYmxlIHtcclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gcmVuZGVyZXJcclxuICAgKiBAcGFyYW0ge0luc3RhbmNlfSBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIGluaXRpYWxpemUoIHJlbmRlcmVyLCBpbnN0YW5jZSApIHtcclxuICAgIHN1cGVyLmluaXRpYWxpemUoIHJlbmRlcmVyLCBpbnN0YW5jZSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtmdW5jdGlvbn1cclxuICAgIHRoaXMuY29udGV4dENoYW5nZUxpc3RlbmVyID0gdGhpcy5vbldlYkdMQ29udGV4dENoYW5nZS5iaW5kKCB0aGlzICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge1Nwcml0ZVNoZWV0fVxyXG4gICAgdGhpcy5zcHJpdGVTaGVldCA9IG5ldyBTcHJpdGVTaGVldCggdHJ1ZSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtPYmplY3R9IC0gTWFwcyB7bnVtYmVyfSBTcHJpdGVJbWFnZS5pZCA9PiB7Qm91bmRzMn0gVVYgYm91bmRzXHJcbiAgICB0aGlzLnNwcml0ZUltYWdlVVZNYXAgPSB7fTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7RmxvYXQzMkFycmF5fVxyXG4gICAgdGhpcy52ZXJ0ZXhBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDEyOCAqIEZMT0FUX1FVQU5USVRZICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge0Zsb2F0MzJBcnJheX1cclxuICAgIHRoaXMudHJhbnNmb3JtTWF0cml4QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCA5ICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge2Z1bmN0aW9ufVxyXG4gICAgdGhpcy5zcHJpdGVDaGFuZ2VMaXN0ZW5lciA9IHRoaXMub25TcHJpdGVDaGFuZ2UuYmluZCggdGhpcyApO1xyXG5cclxuICAgIHRoaXMubm9kZS5fc3ByaXRlcy5mb3JFYWNoKCBzcHJpdGUgPT4ge1xyXG4gICAgICBzcHJpdGUuaW1hZ2VQcm9wZXJ0eS5sYXp5TGluayggdGhpcy5zcHJpdGVDaGFuZ2VMaXN0ZW5lciApO1xyXG4gICAgICB0aGlzLmFkZFNwcml0ZUltYWdlKCBzcHJpdGUuaW1hZ2VQcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtib29sZWFufSAtIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvbmF0dXJhbC1zZWxlY3Rpb24vaXNzdWVzLzI0M1xyXG4gICAgdGhpcy5oYXNEcmF3biA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhIFNwcml0ZUltYWdlIHRvIG91ciBTcHJpdGVTaGVldC5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTcHJpdGVJbWFnZX0gc3ByaXRlSW1hZ2VcclxuICAgKi9cclxuICBhZGRTcHJpdGVJbWFnZSggc3ByaXRlSW1hZ2UgKSB7XHJcbiAgICB0aGlzLnNwcml0ZUltYWdlVVZNYXBbIHNwcml0ZUltYWdlLmlkIF0gPSB0aGlzLnNwcml0ZVNoZWV0LmFkZEltYWdlKCBzcHJpdGVJbWFnZS5pbWFnZSwgc3ByaXRlSW1hZ2UuaW1hZ2Uud2lkdGgsIHNwcml0ZUltYWdlLmltYWdlLmhlaWdodCApLnV2Qm91bmRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhIFNwcml0ZUltYWdlIGZyb20gb3VyIFNwcml0ZVNoZWV0LlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1Nwcml0ZUltYWdlfSBzcHJpdGVJbWFnZVxyXG4gICAqL1xyXG4gIHJlbW92ZVNwcml0ZUltYWdlKCBzcHJpdGVJbWFnZSApIHtcclxuICAgIHRoaXMuc3ByaXRlU2hlZXQucmVtb3ZlSW1hZ2UoIHNwcml0ZUltYWdlLmltYWdlICk7XHJcblxyXG4gICAgZGVsZXRlIHRoaXMuc3ByaXRlSW1hZ2VVVk1hcFsgc3ByaXRlSW1hZ2UuaWQgXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIGEgU3ByaXRlJ3MgU3ByaXRlSW1hZ2UgY2hhbmdlcy5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTcHJpdGVJbWFnZX0gbmV3U3ByaXRlSW1hZ2VcclxuICAgKiBAcGFyYW0ge1Nwcml0ZUltYWdlfSBvbGRTcHJpdGVJbWFnZVxyXG4gICAqL1xyXG4gIG9uU3ByaXRlQ2hhbmdlKCBuZXdTcHJpdGVJbWFnZSwgb2xkU3ByaXRlSW1hZ2UgKSB7XHJcbiAgICB0aGlzLnJlbW92ZVNwcml0ZUltYWdlKCBvbGRTcHJpdGVJbWFnZSApO1xyXG4gICAgdGhpcy5hZGRTcHJpdGVJbWFnZSggbmV3U3ByaXRlSW1hZ2UgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdXAgZXZlcnl0aGluZyB3aXRoIGEgbmV3IFdlYkdMIGNvbnRleHRcclxuICAgKlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgc2V0dXAoKSB7XHJcbiAgICBjb25zdCBnbCA9IHRoaXMud2ViR0xCbG9jay5nbDtcclxuXHJcbiAgICB0aGlzLnNwcml0ZVNoZWV0LmluaXRpYWxpemVDb250ZXh0KCBnbCApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtTaGFkZXJQcm9ncmFtfVxyXG4gICAgdGhpcy5zaGFkZXJQcm9ncmFtID0gbmV3IFNoYWRlclByb2dyYW0oIGdsLCBbXHJcbiAgICAgIC8vIHZlcnRleCBzaGFkZXJcclxuICAgICAgJ2F0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXg7JyxcclxuICAgICAgJ2F0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7JyxcclxuICAgICAgJ2F0dHJpYnV0ZSBmbG9hdCBhQWxwaGE7JyxcclxuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkOycsXHJcbiAgICAgICd2YXJ5aW5nIGZsb2F0IHZBbHBoYTsnLFxyXG4gICAgICAndW5pZm9ybSBtYXQzIHVQcm9qZWN0aW9uTWF0cml4OycsXHJcbiAgICAgICd1bmlmb3JtIG1hdDMgdVRyYW5zZm9ybU1hdHJpeDsnLFxyXG5cclxuICAgICAgJ3ZvaWQgbWFpbigpIHsnLFxyXG4gICAgICAnICB2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDsnLFxyXG4gICAgICAnICB2QWxwaGEgPSBhQWxwaGE7JyxcclxuICAgICAgJyAgdmVjMyBuZGMgPSB1UHJvamVjdGlvbk1hdHJpeCAqICggdVRyYW5zZm9ybU1hdHJpeCAqIHZlYzMoIGFWZXJ0ZXgsIDEuMCApICk7JywgLy8gaG9tb2dlbmVvdXMgbWFwIHRvIHRvIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzXHJcbiAgICAgICcgIGdsX1Bvc2l0aW9uID0gdmVjNCggbmRjLnh5LCAwLjAsIDEuMCApOycsXHJcbiAgICAgICd9J1xyXG4gICAgXS5qb2luKCAnXFxuJyApLCBbXHJcbiAgICAgIC8vIGZyYWdtZW50IHNoYWRlclxyXG4gICAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyxcclxuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkOycsXHJcbiAgICAgICd2YXJ5aW5nIGZsb2F0IHZBbHBoYTsnLFxyXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7JyxcclxuXHJcbiAgICAgICd2b2lkIG1haW4oKSB7JyxcclxuICAgICAgJyAgdmVjNCBjb2xvciA9IHRleHR1cmUyRCggdVRleHR1cmUsIHZUZXh0dXJlQ29vcmQsIC0wLjcgKTsnLCAvLyBtaXBtYXAgTE9EIGJpYXMgb2YgLTAuNyAoZm9yIG5vdylcclxuICAgICAgJyAgY29sb3IuYSAqPSB2QWxwaGE7JyxcclxuICAgICAgJyAgZ2xfRnJhZ0NvbG9yID0gY29sb3I7JywgLy8gZG9uJ3QgcHJlbXVsdGlwbHkgYWxwaGEgKHdlIGFyZSBsb2FkaW5nIHRoZSB0ZXh0dXJlcyBhcyBwcmVtdWx0aXBsaWVkIGFscmVhZHkpXHJcbiAgICAgICd9J1xyXG4gICAgXS5qb2luKCAnXFxuJyApLCB7XHJcbiAgICAgIGF0dHJpYnV0ZXM6IFsgJ2FWZXJ0ZXgnLCAnYVRleHR1cmVDb29yZCcsICdhQWxwaGEnIF0sXHJcbiAgICAgIHVuaWZvcm1zOiBbICd1VGV4dHVyZScsICd1UHJvamVjdGlvbk1hdHJpeCcsICd1VHJhbnNmb3JtTWF0cml4JyBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge1dlYkdMQnVmZmVyfVxyXG4gICAgdGhpcy52ZXJ0ZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuXHJcbiAgICBnbC5iaW5kQnVmZmVyKCBnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4QnVmZmVyICk7XHJcbiAgICBnbC5idWZmZXJEYXRhKCBnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4QXJyYXksIGdsLkRZTkFNSUNfRFJBVyApOyAvLyBmdWxseSBidWZmZXIgYXQgdGhlIHN0YXJ0XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsYmFjayBmb3Igd2hlbiB0aGUgV2ViR0wgY29udGV4dCBjaGFuZ2VzLiBXZSdsbCByZWNvbnN0cnVjdCB0aGUgcGFpbnRlci5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgb25XZWJHTENvbnRleHRDaGFuZ2UoKSB7XHJcbiAgICB0aGlzLnNldHVwKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiB0aGlzIGRyYXdhYmxlIGlzIGFkZGVkIHRvIGEgYmxvY2suXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtXZWJHTEJsb2NrfSB3ZWJHTEJsb2NrXHJcbiAgICovXHJcbiAgb25BZGRUb0Jsb2NrKCB3ZWJHTEJsb2NrICkge1xyXG4gICAgLy8gQHByaXZhdGUge1dlYkdMQmxvY2t9XHJcbiAgICB0aGlzLndlYkdMQmxvY2sgPSB3ZWJHTEJsb2NrO1xyXG5cclxuICAgIHRoaXMuc2V0dXAoKTtcclxuXHJcbiAgICB3ZWJHTEJsb2NrLmdsQ2hhbmdlZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIHRoaXMuY29udGV4dENoYW5nZUxpc3RlbmVyICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiB0aGlzIGRyYXdhYmxlIGlzIHJlbW92ZWQgZnJvbSBhIGJsb2NrLlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7V2ViR0xCbG9ja30gd2ViR0xCbG9ja1xyXG4gICAqL1xyXG4gIG9uUmVtb3ZlRnJvbUJsb2NrKCB3ZWJHTEJsb2NrICkge1xyXG4gICAgd2ViR0xCbG9jay5nbENoYW5nZWRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCB0aGlzLmNvbnRleHRDaGFuZ2VMaXN0ZW5lciApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRHJhd3MgdGhlIFdlYkdMIGNvbnRlbnQuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGRyYXcoKSB7XHJcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLm5vZGUuX3Nwcml0ZUluc3RhbmNlcy5sZW5ndGg7XHJcblxyXG4gICAgLy8gRG9uJ3QgcmVuZGVyIGFueXRoaW5nIGlmIHdlIGhhdmUgbm90aGluZ1xyXG4gICAgaWYgKCBsZW5ndGggPT09IDAgKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc3ByaXRlU2hlZXQudXBkYXRlVGV4dHVyZSgpO1xyXG5cclxuICAgIHRoaXMuc2hhZGVyUHJvZ3JhbS51c2UoKTtcclxuXHJcbiAgICBsZXQgdmVydGV4QXJyYXlJbmRleCA9IDA7XHJcbiAgICBsZXQgY2hhbmdlZExlbmd0aCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIGlmIG91ciB2ZXJ0ZXggZGF0YSB3b24ndCBmaXQsIGtlZXAgZG91YmxpbmcgdGhlIHNpemUgdW50aWwgaXQgZml0c1xyXG4gICAgd2hpbGUgKCBGTE9BVF9RVUFOVElUWSAqIGxlbmd0aCA+IHRoaXMudmVydGV4QXJyYXkubGVuZ3RoICkge1xyXG4gICAgICB0aGlzLnZlcnRleEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggdGhpcy52ZXJ0ZXhBcnJheS5sZW5ndGggKiAyICk7XHJcbiAgICAgIGNoYW5nZWRMZW5ndGggPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG4gICAgICBjb25zdCBzcHJpdGVJbnN0YW5jZSA9IHRoaXMubm9kZS5fc3ByaXRlSW5zdGFuY2VzWyBpIF07XHJcbiAgICAgIGNvbnN0IHNwcml0ZUltYWdlID0gc3ByaXRlSW5zdGFuY2Uuc3ByaXRlLmltYWdlUHJvcGVydHkudmFsdWU7XHJcbiAgICAgIGNvbnN0IGFscGhhID0gc3ByaXRlSW5zdGFuY2UuYWxwaGEgKiBzcHJpdGVJbWFnZS5pbWFnZU9wYWNpdHk7XHJcbiAgICAgIGNvbnN0IHV2Qm91bmRzID0gdGhpcy5zcHJpdGVJbWFnZVVWTWFwWyBzcHJpdGVJbWFnZS5pZCBdO1xyXG4gICAgICBjb25zdCBtYXRyaXggPSBzcHJpdGVJbnN0YW5jZS5tYXRyaXg7XHJcbiAgICAgIGNvbnN0IG9mZnNldCA9IHNwcml0ZUltYWdlLm9mZnNldDtcclxuXHJcbiAgICAgIGNvbnN0IHdpZHRoID0gc3ByaXRlSW1hZ2UuaW1hZ2Uud2lkdGg7XHJcbiAgICAgIGNvbnN0IGhlaWdodCA9IHNwcml0ZUltYWdlLmltYWdlLmhlaWdodDtcclxuXHJcbiAgICAgIC8vIENvbXB1dGUgb3VyIHZlcnRpY2VzXHJcbiAgICAgIG1hdHJpeC5tdWx0aXBseVZlY3RvcjIoIHVwcGVyTGVmdC5zZXRYWSggLW9mZnNldC54LCAtb2Zmc2V0LnkgKSApO1xyXG4gICAgICBtYXRyaXgubXVsdGlwbHlWZWN0b3IyKCBsb3dlckxlZnQuc2V0WFkoIC1vZmZzZXQueCwgaGVpZ2h0IC0gb2Zmc2V0LnkgKSApO1xyXG4gICAgICBtYXRyaXgubXVsdGlwbHlWZWN0b3IyKCB1cHBlclJpZ2h0LnNldFhZKCB3aWR0aCAtIG9mZnNldC54LCAtb2Zmc2V0LnkgKSApO1xyXG4gICAgICBtYXRyaXgubXVsdGlwbHlWZWN0b3IyKCBsb3dlclJpZ2h0LnNldFhZKCB3aWR0aCAtIG9mZnNldC54LCBoZWlnaHQgLSBvZmZzZXQueSApICk7XHJcblxyXG4gICAgICAvLyBjb3B5IG91ciB2ZXJ0ZXggZGF0YSBpbnRvIHRoZSBtYWluIGFycmF5IChjb25zZW5zdXMgd2FzIHRoYXQgdGhpcyBpcyB0aGUgZmFzdGVzdCB3YXkgdG8gZmlsbCBpbiBkYXRhKVxyXG4gICAgICB0aGlzLnZlcnRleEFycmF5WyB2ZXJ0ZXhBcnJheUluZGV4ICsgMCBdID0gdXBwZXJMZWZ0Lng7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAxIF0gPSB1cHBlckxlZnQueTtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDIgXSA9IHV2Qm91bmRzLm1pblg7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAzIF0gPSB1dkJvdW5kcy5taW5ZO1xyXG4gICAgICB0aGlzLnZlcnRleEFycmF5WyB2ZXJ0ZXhBcnJheUluZGV4ICsgNCBdID0gYWxwaGE7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyA1IF0gPSBsb3dlckxlZnQueDtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDYgXSA9IGxvd2VyTGVmdC55O1xyXG4gICAgICB0aGlzLnZlcnRleEFycmF5WyB2ZXJ0ZXhBcnJheUluZGV4ICsgNyBdID0gdXZCb3VuZHMubWluWDtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDggXSA9IHV2Qm91bmRzLm1heFk7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyA5IF0gPSBhbHBoYTtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDEwIF0gPSB1cHBlclJpZ2h0Lng7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAxMSBdID0gdXBwZXJSaWdodC55O1xyXG4gICAgICB0aGlzLnZlcnRleEFycmF5WyB2ZXJ0ZXhBcnJheUluZGV4ICsgMTIgXSA9IHV2Qm91bmRzLm1heFg7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAxMyBdID0gdXZCb3VuZHMubWluWTtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDE0IF0gPSBhbHBoYTtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDE1IF0gPSB1cHBlclJpZ2h0Lng7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAxNiBdID0gdXBwZXJSaWdodC55O1xyXG4gICAgICB0aGlzLnZlcnRleEFycmF5WyB2ZXJ0ZXhBcnJheUluZGV4ICsgMTcgXSA9IHV2Qm91bmRzLm1heFg7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAxOCBdID0gdXZCb3VuZHMubWluWTtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDE5IF0gPSBhbHBoYTtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDIwIF0gPSBsb3dlckxlZnQueDtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDIxIF0gPSBsb3dlckxlZnQueTtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDIyIF0gPSB1dkJvdW5kcy5taW5YO1xyXG4gICAgICB0aGlzLnZlcnRleEFycmF5WyB2ZXJ0ZXhBcnJheUluZGV4ICsgMjMgXSA9IHV2Qm91bmRzLm1heFk7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAyNCBdID0gYWxwaGE7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAyNSBdID0gbG93ZXJSaWdodC54O1xyXG4gICAgICB0aGlzLnZlcnRleEFycmF5WyB2ZXJ0ZXhBcnJheUluZGV4ICsgMjYgXSA9IGxvd2VyUmlnaHQueTtcclxuICAgICAgdGhpcy52ZXJ0ZXhBcnJheVsgdmVydGV4QXJyYXlJbmRleCArIDI3IF0gPSB1dkJvdW5kcy5tYXhYO1xyXG4gICAgICB0aGlzLnZlcnRleEFycmF5WyB2ZXJ0ZXhBcnJheUluZGV4ICsgMjggXSA9IHV2Qm91bmRzLm1heFk7XHJcbiAgICAgIHRoaXMudmVydGV4QXJyYXlbIHZlcnRleEFycmF5SW5kZXggKyAyOSBdID0gYWxwaGE7XHJcblxyXG4gICAgICB2ZXJ0ZXhBcnJheUluZGV4ICs9IEZMT0FUX1FVQU5USVRZO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdsID0gdGhpcy53ZWJHTEJsb2NrLmdsO1xyXG5cclxuICAgIC8vICh1bmlmb3JtKSBwcm9qZWN0aW9uIHRyYW5zZm9ybSBpbnRvIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzXHJcbiAgICBnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLnNoYWRlclByb2dyYW0udW5pZm9ybUxvY2F0aW9ucy51UHJvamVjdGlvbk1hdHJpeCwgZmFsc2UsIHRoaXMud2ViR0xCbG9jay5wcm9qZWN0aW9uTWF0cml4QXJyYXkgKTtcclxuXHJcbiAgICAvLyAodW5pZm9ybSkgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRoYXQgaXMgY29tbW9uIHRvIGFsbCBzcHJpdGVzXHJcbiAgICB0aGlzLmluc3RhbmNlLnJlbGF0aXZlVHJhbnNmb3JtLm1hdHJpeC5jb3B5VG9BcnJheSggdGhpcy50cmFuc2Zvcm1NYXRyaXhBcnJheSApO1xyXG4gICAgZ2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5zaGFkZXJQcm9ncmFtLnVuaWZvcm1Mb2NhdGlvbnMudVRyYW5zZm9ybU1hdHJpeCwgZmFsc2UsIHRoaXMudHJhbnNmb3JtTWF0cml4QXJyYXkgKTtcclxuXHJcbiAgICBnbC5iaW5kQnVmZmVyKCBnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4QnVmZmVyICk7XHJcbiAgICAvLyBpZiB3ZSBpbmNyZWFzZWQgaW4gbGVuZ3RoLCB3ZSBuZWVkIHRvIGRvIGEgZnVsbCBidWZmZXJEYXRhIHRvIHJlc2l6ZSBpdCBvbiB0aGUgR1BVIHNpZGVcclxuICAgIGlmICggY2hhbmdlZExlbmd0aCApIHtcclxuICAgICAgZ2wuYnVmZmVyRGF0YSggZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleEFycmF5LCBnbC5EWU5BTUlDX0RSQVcgKTsgLy8gZnVsbHkgYnVmZmVyIGF0IHRoZSBzdGFydFxyXG4gICAgfVxyXG4gICAgLy8gb3RoZXJ3aXNlIGRvIGEgbW9yZSBlZmZpY2llbnQgdXBkYXRlIHRoYXQgb25seSBzZW5kcyBwYXJ0IG9mIHRoZSBhcnJheSBvdmVyXHJcbiAgICBlbHNlIHtcclxuICAgICAgZ2wuYnVmZmVyU3ViRGF0YSggZ2wuQVJSQVlfQlVGRkVSLCAwLCB0aGlzLnZlcnRleEFycmF5LnN1YmFycmF5KCAwLCB2ZXJ0ZXhBcnJheUluZGV4ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzaXplT2ZGbG9hdCA9IEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcclxuICAgIGNvbnN0IHN0cmlkZSA9IENPTVBPTkVOVFMgKiBzaXplT2ZGbG9hdDtcclxuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHRoaXMuc2hhZGVyUHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuYVZlcnRleCwgMiwgZ2wuRkxPQVQsIGZhbHNlLCBzdHJpZGUsIDAgKiBzaXplT2ZGbG9hdCApO1xyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlciggdGhpcy5zaGFkZXJQcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucy5hVGV4dHVyZUNvb3JkLCAyLCBnbC5GTE9BVCwgZmFsc2UsIHN0cmlkZSwgMiAqIHNpemVPZkZsb2F0ICk7XHJcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCB0aGlzLnNoYWRlclByb2dyYW0uYXR0cmlidXRlTG9jYXRpb25zLmFBbHBoYSwgMSwgZ2wuRkxPQVQsIGZhbHNlLCBzdHJpZGUsIDQgKiBzaXplT2ZGbG9hdCApO1xyXG5cclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoIGdsLlRFWFRVUkUwICk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZSggZ2wuVEVYVFVSRV8yRCwgdGhpcy5zcHJpdGVTaGVldC50ZXh0dXJlICk7XHJcbiAgICBnbC51bmlmb3JtMWkoIHRoaXMuc2hhZGVyUHJvZ3JhbS51bmlmb3JtTG9jYXRpb25zLnVUZXh0dXJlLCAwICk7XHJcblxyXG4gICAgZ2wuZHJhd0FycmF5cyggZ2wuVFJJQU5HTEVTLCAwLCB2ZXJ0ZXhBcnJheUluZGV4IC8gQ09NUE9ORU5UUyApO1xyXG5cclxuICAgIGdsLmJpbmRUZXh0dXJlKCBnbC5URVhUVVJFXzJELCBudWxsICk7XHJcblxyXG4gICAgdGhpcy5zaGFkZXJQcm9ncmFtLnVudXNlKCk7XHJcblxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9uYXR1cmFsLXNlbGVjdGlvbi9pc3N1ZXMvMjQzXHJcbiAgICBpZiAoICF0aGlzLmhhc0RyYXduICYmIHBsYXRmb3JtLnNhZmFyaSApIHtcclxuICAgICAgLy8gUmVkcmF3IG9uY2UgbW9yZSBpZiB3ZSdyZSBpbiBTYWZhcmksIHNpbmNlIGl0J3MgdW5kZXRlcm1pbmVkIHdoeSBhbiBpbml0aWFsIGRyYXcgaXNuJ3Qgd29ya2luZy5cclxuICAgICAgLy8gRXZlcnl0aGluZyBzZWVtcyB0byBvdGhlcndpc2UgYmUgaW4gcGxhY2UuXHJcbiAgICAgIGFuaW1hdGlvbkZyYW1lVGltZXIuc2V0VGltZW91dCggKCkgPT4gdGhpcy5tYXJrRGlydHkoKSwgMCApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5oYXNEcmF3biA9IHRydWU7XHJcblxyXG4gICAgcmV0dXJuIDE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwb3NlcyB0aGUgZHJhd2FibGUuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLm5vZGUuX3Nwcml0ZXMuZm9yRWFjaCggc3ByaXRlID0+IHtcclxuICAgICAgc3ByaXRlLmltYWdlUHJvcGVydHkudW5saW5rKCB0aGlzLnNwcml0ZUNoYW5nZUxpc3RlbmVyICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgaWYgKCB0aGlzLndlYkdMQmxvY2sgKSB7XHJcbiAgICAgIHRoaXMud2ViR0xCbG9jayA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc3VwZXJcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgXCJjYXRjaC1hbGxcIiBkaXJ0eSBtZXRob2QgdGhhdCBkaXJlY3RseSBtYXJrcyB0aGUgcGFpbnREaXJ0eSBmbGFnIGFuZCB0cmlnZ2VycyBwcm9wYWdhdGlvbiBvZiBkaXJ0eVxyXG4gICAqIGluZm9ybWF0aW9uLiBUaGlzIGNhbiBiZSB1c2VkIGJ5IG90aGVyIG1hcmsqIG1ldGhvZHMsIG9yIGRpcmVjdGx5IGl0c2VsZiBpZiB0aGUgcGFpbnREaXJ0eSBmbGFnIGlzIGNoZWNrZWQuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqXHJcbiAgICogSXQgc2hvdWxkIGJlIGZpcmVkIChpbmRpcmVjdGx5IG9yIGRpcmVjdGx5KSBmb3IgYW55dGhpbmcgYmVzaWRlcyB0cmFuc2Zvcm1zIHRoYXQgbmVlZHMgdG8gbWFrZSBhIGRyYXdhYmxlXHJcbiAgICogZGlydHkuXHJcbiAgICovXHJcbiAgbWFya1BhaW50RGlydHkoKSB7XHJcbiAgICB0aGlzLm1hcmtEaXJ0eSgpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gV2UgdXNlIGEgY3VzdG9tIHJlbmRlcmVyIGZvciB0aGUgbmVlZGVkIGZsZXhpYmlsaXR5XHJcblNwcml0ZXNXZWJHTERyYXdhYmxlLnByb3RvdHlwZS53ZWJnbFJlbmRlcmVyID0gUmVuZGVyZXIud2ViZ2xDdXN0b207XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnU3ByaXRlc1dlYkdMRHJhd2FibGUnLCBTcHJpdGVzV2ViR0xEcmF3YWJsZSApO1xyXG5cclxuUG9vbGFibGUubWl4SW50byggU3ByaXRlc1dlYkdMRHJhd2FibGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNwcml0ZXNXZWJHTERyYXdhYmxlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxtQkFBbUIsTUFBTSw0Q0FBNEM7QUFDNUUsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxRQUFRLE1BQU0sc0NBQXNDO0FBQzNELE9BQU9DLFFBQVEsTUFBTSxzQ0FBc0M7QUFDM0QsU0FBU0MsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLGFBQWEsRUFBRUMsV0FBVyxFQUFFQyxpQkFBaUIsUUFBUSxrQkFBa0I7O0FBRW5HO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLE1BQU1DLGNBQWMsR0FBR0QsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDOztBQUV2QztBQUNBLE1BQU1FLFNBQVMsR0FBRyxJQUFJVixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztBQUNyQyxNQUFNVyxTQUFTLEdBQUcsSUFBSVgsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7QUFDckMsTUFBTVksVUFBVSxHQUFHLElBQUlaLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0FBQ3RDLE1BQU1hLFVBQVUsR0FBRyxJQUFJYixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztBQUV0QyxNQUFNYyxv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