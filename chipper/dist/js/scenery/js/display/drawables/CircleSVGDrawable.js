// Copyright 2016-2022, University of Colorado Boulder

/**
 * SVG drawable for Circle nodes.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Poolable from '../../../../phet-core/js/Poolable.js';
import { CircleStatefulDrawable, scenery, svgns, SVGSelfDrawable } from '../../imports.js';

// TODO: change this based on memory and performance characteristics of the platform
const keepSVGCircleElements = true; // whether we should pool SVG elements for the SVG rendering states, or whether we should free them when possible for memory

class CircleSVGDrawable extends CircleStatefulDrawable(SVGSelfDrawable) {
  /**
   * @public
   * @override
   *
   * @param {number} renderer
   * @param {Instance} instance
   */
  initialize(renderer, instance) {
    super.initialize(renderer, instance, true, keepSVGCircleElements); // usesPaint: true

    // @protected {SVGCircleElement} - Sole SVG element for this drawable, implementing API for SVGSelfDrawable
    this.svgElement = this.svgElement || document.createElementNS(svgns, 'circle');
  }

  /**
   * Updates the SVG elements so that they will appear like the current node's representation.
   * @protected
   *
   * Implements the interface for SVGSelfDrawable (and is called from the SVGSelfDrawable's update).
   */
  updateSVGSelf() {
    const circle = this.svgElement;
    if (this.dirtyRadius) {
      circle.setAttribute('r', this.node._radius);
    }

    // Apply any fill/stroke changes to our element.
    this.updateFillStrokeStyle(circle);
  }
}
scenery.register('CircleSVGDrawable', CircleSVGDrawable);
Poolable.mixInto(CircleSVGDrawable);
export default CircleSVGDrawable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb29sYWJsZSIsIkNpcmNsZVN0YXRlZnVsRHJhd2FibGUiLCJzY2VuZXJ5Iiwic3ZnbnMiLCJTVkdTZWxmRHJhd2FibGUiLCJrZWVwU1ZHQ2lyY2xlRWxlbWVudHMiLCJDaXJjbGVTVkdEcmF3YWJsZSIsImluaXRpYWxpemUiLCJyZW5kZXJlciIsImluc3RhbmNlIiwic3ZnRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwidXBkYXRlU1ZHU2VsZiIsImNpcmNsZSIsImRpcnR5UmFkaXVzIiwic2V0QXR0cmlidXRlIiwibm9kZSIsIl9yYWRpdXMiLCJ1cGRhdGVGaWxsU3Ryb2tlU3R5bGUiLCJyZWdpc3RlciIsIm1peEludG8iXSwic291cmNlcyI6WyJDaXJjbGVTVkdEcmF3YWJsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTVkcgZHJhd2FibGUgZm9yIENpcmNsZSBub2Rlcy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBQb29sYWJsZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvUG9vbGFibGUuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGVTdGF0ZWZ1bERyYXdhYmxlLCBzY2VuZXJ5LCBzdmducywgU1ZHU2VsZkRyYXdhYmxlIH0gZnJvbSAnLi4vLi4vaW1wb3J0cy5qcyc7XHJcblxyXG4vLyBUT0RPOiBjaGFuZ2UgdGhpcyBiYXNlZCBvbiBtZW1vcnkgYW5kIHBlcmZvcm1hbmNlIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgcGxhdGZvcm1cclxuY29uc3Qga2VlcFNWR0NpcmNsZUVsZW1lbnRzID0gdHJ1ZTsgLy8gd2hldGhlciB3ZSBzaG91bGQgcG9vbCBTVkcgZWxlbWVudHMgZm9yIHRoZSBTVkcgcmVuZGVyaW5nIHN0YXRlcywgb3Igd2hldGhlciB3ZSBzaG91bGQgZnJlZSB0aGVtIHdoZW4gcG9zc2libGUgZm9yIG1lbW9yeVxyXG5cclxuY2xhc3MgQ2lyY2xlU1ZHRHJhd2FibGUgZXh0ZW5kcyBDaXJjbGVTdGF0ZWZ1bERyYXdhYmxlKCBTVkdTZWxmRHJhd2FibGUgKSB7XHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJlbmRlcmVyXHJcbiAgICogQHBhcmFtIHtJbnN0YW5jZX0gaW5zdGFuY2VcclxuICAgKi9cclxuICBpbml0aWFsaXplKCByZW5kZXJlciwgaW5zdGFuY2UgKSB7XHJcbiAgICBzdXBlci5pbml0aWFsaXplKCByZW5kZXJlciwgaW5zdGFuY2UsIHRydWUsIGtlZXBTVkdDaXJjbGVFbGVtZW50cyApOyAvLyB1c2VzUGFpbnQ6IHRydWVcclxuXHJcbiAgICAvLyBAcHJvdGVjdGVkIHtTVkdDaXJjbGVFbGVtZW50fSAtIFNvbGUgU1ZHIGVsZW1lbnQgZm9yIHRoaXMgZHJhd2FibGUsIGltcGxlbWVudGluZyBBUEkgZm9yIFNWR1NlbGZEcmF3YWJsZVxyXG4gICAgdGhpcy5zdmdFbGVtZW50ID0gdGhpcy5zdmdFbGVtZW50IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnbnMsICdjaXJjbGUnICk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyB0aGUgU1ZHIGVsZW1lbnRzIHNvIHRoYXQgdGhleSB3aWxsIGFwcGVhciBsaWtlIHRoZSBjdXJyZW50IG5vZGUncyByZXByZXNlbnRhdGlvbi5cclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICpcclxuICAgKiBJbXBsZW1lbnRzIHRoZSBpbnRlcmZhY2UgZm9yIFNWR1NlbGZEcmF3YWJsZSAoYW5kIGlzIGNhbGxlZCBmcm9tIHRoZSBTVkdTZWxmRHJhd2FibGUncyB1cGRhdGUpLlxyXG4gICAqL1xyXG4gIHVwZGF0ZVNWR1NlbGYoKSB7XHJcbiAgICBjb25zdCBjaXJjbGUgPSB0aGlzLnN2Z0VsZW1lbnQ7XHJcblxyXG4gICAgaWYgKCB0aGlzLmRpcnR5UmFkaXVzICkge1xyXG4gICAgICBjaXJjbGUuc2V0QXR0cmlidXRlKCAncicsIHRoaXMubm9kZS5fcmFkaXVzICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXBwbHkgYW55IGZpbGwvc3Ryb2tlIGNoYW5nZXMgdG8gb3VyIGVsZW1lbnQuXHJcbiAgICB0aGlzLnVwZGF0ZUZpbGxTdHJva2VTdHlsZSggY2lyY2xlICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnQ2lyY2xlU1ZHRHJhd2FibGUnLCBDaXJjbGVTVkdEcmF3YWJsZSApO1xyXG5cclxuUG9vbGFibGUubWl4SW50byggQ2lyY2xlU1ZHRHJhd2FibGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENpcmNsZVNWR0RyYXdhYmxlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sc0NBQXNDO0FBQzNELFNBQVNDLHNCQUFzQixFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsZUFBZSxRQUFRLGtCQUFrQjs7QUFFMUY7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsQ0FBQzs7QUFFcEMsTUFBTUMsaUJBQWlCLFNBQVNMLHNCQUFzQixDQUFFRyxlQUFnQixDQUFDLENBQUM7RUFDeEU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUcsVUFBVUEsQ0FBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUc7SUFDL0IsS0FBSyxDQUFDRixVQUFVLENBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFLElBQUksRUFBRUoscUJBQXNCLENBQUMsQ0FBQyxDQUFDOztJQUVyRTtJQUNBLElBQUksQ0FBQ0ssVUFBVSxHQUFHLElBQUksQ0FBQ0EsVUFBVSxJQUFJQyxRQUFRLENBQUNDLGVBQWUsQ0FBRVQsS0FBSyxFQUFFLFFBQVMsQ0FBQztFQUNsRjs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRVUsYUFBYUEsQ0FBQSxFQUFHO0lBQ2QsTUFBTUMsTUFBTSxHQUFHLElBQUksQ0FBQ0osVUFBVTtJQUU5QixJQUFLLElBQUksQ0FBQ0ssV0FBVyxFQUFHO01BQ3RCRCxNQUFNLENBQUNFLFlBQVksQ0FBRSxHQUFHLEVBQUUsSUFBSSxDQUFDQyxJQUFJLENBQUNDLE9BQVEsQ0FBQztJQUMvQzs7SUFFQTtJQUNBLElBQUksQ0FBQ0MscUJBQXFCLENBQUVMLE1BQU8sQ0FBQztFQUN0QztBQUNGO0FBRUFaLE9BQU8sQ0FBQ2tCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRWQsaUJBQWtCLENBQUM7QUFFMUROLFFBQVEsQ0FBQ3FCLE9BQU8sQ0FBRWYsaUJBQWtCLENBQUM7QUFFckMsZUFBZUEsaUJBQWlCIn0=