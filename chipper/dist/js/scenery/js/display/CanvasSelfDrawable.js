// Copyright 2013-2021, University of Colorado Boulder

/**
 * TODO docs
 *   note paintCanvas() required, and other implementation-specific details
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { scenery, SelfDrawable } from '../imports.js';
class CanvasSelfDrawable extends SelfDrawable {
  /**
   * @public
   *
   * @param {number} renderer
   * @param {Instance} instance
   */
  initialize(renderer, instance) {
    super.initialize(renderer, instance);

    // @private {function} - this is the same across lifecycles
    this.transformListener = this.transformListener || this.markTransformDirty.bind(this);
    instance.relativeTransform.addListener(this.transformListener); // when our relative tranform changes, notify us in the pre-repaint phase
    instance.relativeTransform.addPrecompute(); // trigger precomputation of the relative transform, since we will always need it when it is updated
  }

  /**
   * @public
   */
  markTransformDirty() {
    this.markDirty();
  }

  /**
   * General flag set on the state, which we forward directly to the drawable's paint flag
   * @public
   */
  markPaintDirty() {
    this.markDirty();
  }

  /**
   * @public
   * @override
   */
  updateSelfVisibility() {
    super.updateSelfVisibility();

    // mark us as dirty when our self visibility changes
    this.markDirty();
  }

  /**
   * Releases references
   * @public
   * @override
   */
  dispose() {
    this.instance.relativeTransform.removeListener(this.transformListener);
    this.instance.relativeTransform.removePrecompute();
    super.dispose();
  }
}
scenery.register('CanvasSelfDrawable', CanvasSelfDrawable);
export default CanvasSelfDrawable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzY2VuZXJ5IiwiU2VsZkRyYXdhYmxlIiwiQ2FudmFzU2VsZkRyYXdhYmxlIiwiaW5pdGlhbGl6ZSIsInJlbmRlcmVyIiwiaW5zdGFuY2UiLCJ0cmFuc2Zvcm1MaXN0ZW5lciIsIm1hcmtUcmFuc2Zvcm1EaXJ0eSIsImJpbmQiLCJyZWxhdGl2ZVRyYW5zZm9ybSIsImFkZExpc3RlbmVyIiwiYWRkUHJlY29tcHV0ZSIsIm1hcmtEaXJ0eSIsIm1hcmtQYWludERpcnR5IiwidXBkYXRlU2VsZlZpc2liaWxpdHkiLCJkaXNwb3NlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVQcmVjb21wdXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDYW52YXNTZWxmRHJhd2FibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVE9ETyBkb2NzXHJcbiAqICAgbm90ZSBwYWludENhbnZhcygpIHJlcXVpcmVkLCBhbmQgb3RoZXIgaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgZGV0YWlsc1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgc2NlbmVyeSwgU2VsZkRyYXdhYmxlIH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5jbGFzcyBDYW52YXNTZWxmRHJhd2FibGUgZXh0ZW5kcyBTZWxmRHJhd2FibGUge1xyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByZW5kZXJlclxyXG4gICAqIEBwYXJhbSB7SW5zdGFuY2V9IGluc3RhbmNlXHJcbiAgICovXHJcbiAgaW5pdGlhbGl6ZSggcmVuZGVyZXIsIGluc3RhbmNlICkge1xyXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSggcmVuZGVyZXIsIGluc3RhbmNlICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge2Z1bmN0aW9ufSAtIHRoaXMgaXMgdGhlIHNhbWUgYWNyb3NzIGxpZmVjeWNsZXNcclxuICAgIHRoaXMudHJhbnNmb3JtTGlzdGVuZXIgPSB0aGlzLnRyYW5zZm9ybUxpc3RlbmVyIHx8IHRoaXMubWFya1RyYW5zZm9ybURpcnR5LmJpbmQoIHRoaXMgKTtcclxuXHJcbiAgICBpbnN0YW5jZS5yZWxhdGl2ZVRyYW5zZm9ybS5hZGRMaXN0ZW5lciggdGhpcy50cmFuc2Zvcm1MaXN0ZW5lciApOyAvLyB3aGVuIG91ciByZWxhdGl2ZSB0cmFuZm9ybSBjaGFuZ2VzLCBub3RpZnkgdXMgaW4gdGhlIHByZS1yZXBhaW50IHBoYXNlXHJcbiAgICBpbnN0YW5jZS5yZWxhdGl2ZVRyYW5zZm9ybS5hZGRQcmVjb21wdXRlKCk7IC8vIHRyaWdnZXIgcHJlY29tcHV0YXRpb24gb2YgdGhlIHJlbGF0aXZlIHRyYW5zZm9ybSwgc2luY2Ugd2Ugd2lsbCBhbHdheXMgbmVlZCBpdCB3aGVuIGl0IGlzIHVwZGF0ZWRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBtYXJrVHJhbnNmb3JtRGlydHkoKSB7XHJcbiAgICB0aGlzLm1hcmtEaXJ0eSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhbCBmbGFnIHNldCBvbiB0aGUgc3RhdGUsIHdoaWNoIHdlIGZvcndhcmQgZGlyZWN0bHkgdG8gdGhlIGRyYXdhYmxlJ3MgcGFpbnQgZmxhZ1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBtYXJrUGFpbnREaXJ0eSgpIHtcclxuICAgIHRoaXMubWFya0RpcnR5KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgdXBkYXRlU2VsZlZpc2liaWxpdHkoKSB7XHJcbiAgICBzdXBlci51cGRhdGVTZWxmVmlzaWJpbGl0eSgpO1xyXG5cclxuICAgIC8vIG1hcmsgdXMgYXMgZGlydHkgd2hlbiBvdXIgc2VsZiB2aXNpYmlsaXR5IGNoYW5nZXNcclxuICAgIHRoaXMubWFya0RpcnR5KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxlYXNlcyByZWZlcmVuY2VzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmluc3RhbmNlLnJlbGF0aXZlVHJhbnNmb3JtLnJlbW92ZUxpc3RlbmVyKCB0aGlzLnRyYW5zZm9ybUxpc3RlbmVyICk7XHJcbiAgICB0aGlzLmluc3RhbmNlLnJlbGF0aXZlVHJhbnNmb3JtLnJlbW92ZVByZWNvbXB1dGUoKTtcclxuXHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnQ2FudmFzU2VsZkRyYXdhYmxlJywgQ2FudmFzU2VsZkRyYXdhYmxlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYW52YXNTZWxmRHJhd2FibGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsT0FBTyxFQUFFQyxZQUFZLFFBQVEsZUFBZTtBQUVyRCxNQUFNQyxrQkFBa0IsU0FBU0QsWUFBWSxDQUFDO0VBQzVDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxVQUFVQSxDQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRztJQUMvQixLQUFLLENBQUNGLFVBQVUsQ0FBRUMsUUFBUSxFQUFFQyxRQUFTLENBQUM7O0lBRXRDO0lBQ0EsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJLENBQUNBLGlCQUFpQixJQUFJLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBRSxJQUFLLENBQUM7SUFFdkZILFFBQVEsQ0FBQ0ksaUJBQWlCLENBQUNDLFdBQVcsQ0FBRSxJQUFJLENBQUNKLGlCQUFrQixDQUFDLENBQUMsQ0FBQztJQUNsRUQsUUFBUSxDQUFDSSxpQkFBaUIsQ0FBQ0UsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzlDOztFQUVBO0FBQ0Y7QUFDQTtFQUNFSixrQkFBa0JBLENBQUEsRUFBRztJQUNuQixJQUFJLENBQUNLLFNBQVMsQ0FBQyxDQUFDO0VBQ2xCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLGNBQWNBLENBQUEsRUFBRztJQUNmLElBQUksQ0FBQ0QsU0FBUyxDQUFDLENBQUM7RUFDbEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRUUsb0JBQW9CQSxDQUFBLEVBQUc7SUFDckIsS0FBSyxDQUFDQSxvQkFBb0IsQ0FBQyxDQUFDOztJQUU1QjtJQUNBLElBQUksQ0FBQ0YsU0FBUyxDQUFDLENBQUM7RUFDbEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRyxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNWLFFBQVEsQ0FBQ0ksaUJBQWlCLENBQUNPLGNBQWMsQ0FBRSxJQUFJLENBQUNWLGlCQUFrQixDQUFDO0lBQ3hFLElBQUksQ0FBQ0QsUUFBUSxDQUFDSSxpQkFBaUIsQ0FBQ1EsZ0JBQWdCLENBQUMsQ0FBQztJQUVsRCxLQUFLLENBQUNGLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWYsT0FBTyxDQUFDa0IsUUFBUSxDQUFFLG9CQUFvQixFQUFFaEIsa0JBQW1CLENBQUM7QUFFNUQsZUFBZUEsa0JBQWtCIn0=