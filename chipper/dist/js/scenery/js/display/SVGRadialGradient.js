// Copyright 2022-2023, University of Colorado Boulder

/**
 * Controller that creates and keeps an SVG radial gradient up-to-date with a Scenery RadialGradient
 *
 * SVG gradients, see http://www.w3.org/TR/SVG/pservers.html
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Pool from '../../../phet-core/js/Pool.js';
import { scenery, SVGGradient, svgns } from '../imports.js';
export default class SVGRadialGradient extends SVGGradient {
  constructor(svgBlock, gradient) {
    super(svgBlock, gradient);
  }
  initialize(svgBlock, radialGradient) {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints(`[SVGRadialGradient] initialize ${radialGradient.id}`);
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    super.initialize(svgBlock, radialGradient);

    // Radial-specific setup
    this.definition.setAttribute('cx', '' + radialGradient.largePoint.x);
    this.definition.setAttribute('cy', '' + radialGradient.largePoint.y);
    this.definition.setAttribute('r', '' + radialGradient.maxRadius);
    this.definition.setAttribute('fx', '' + radialGradient.focalPoint.x);
    this.definition.setAttribute('fy', '' + radialGradient.focalPoint.y);
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
    return this;
  }

  /**
   * Creates the gradient-type-specific definition.
   */
  createDefinition() {
    return document.createElementNS(svgns, 'radialGradient');
  }
  freeToPool() {
    SVGRadialGradient.pool.freeToPool(this);
  }
  static pool = new Pool(SVGRadialGradient);
}
scenery.register('SVGRadialGradient', SVGRadialGradient);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb29sIiwic2NlbmVyeSIsIlNWR0dyYWRpZW50Iiwic3ZnbnMiLCJTVkdSYWRpYWxHcmFkaWVudCIsImNvbnN0cnVjdG9yIiwic3ZnQmxvY2siLCJncmFkaWVudCIsImluaXRpYWxpemUiLCJyYWRpYWxHcmFkaWVudCIsInNjZW5lcnlMb2ciLCJQYWludHMiLCJpZCIsInB1c2giLCJkZWZpbml0aW9uIiwic2V0QXR0cmlidXRlIiwibGFyZ2VQb2ludCIsIngiLCJ5IiwibWF4UmFkaXVzIiwiZm9jYWxQb2ludCIsInBvcCIsImNyZWF0ZURlZmluaXRpb24iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImZyZWVUb1Bvb2wiLCJwb29sIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTVkdSYWRpYWxHcmFkaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb250cm9sbGVyIHRoYXQgY3JlYXRlcyBhbmQga2VlcHMgYW4gU1ZHIHJhZGlhbCBncmFkaWVudCB1cC10by1kYXRlIHdpdGggYSBTY2VuZXJ5IFJhZGlhbEdyYWRpZW50XHJcbiAqXHJcbiAqIFNWRyBncmFkaWVudHMsIHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvcHNlcnZlcnMuaHRtbFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFBvb2wsIHsgVFBvb2xhYmxlIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL1Bvb2wuanMnO1xyXG5pbXBvcnQgeyBSYWRpYWxHcmFkaWVudCwgc2NlbmVyeSwgU1ZHQmxvY2ssIFNWR0dyYWRpZW50LCBzdmducyB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU1ZHUmFkaWFsR3JhZGllbnQgZXh0ZW5kcyBTVkdHcmFkaWVudCBpbXBsZW1lbnRzIFRQb29sYWJsZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3ZnQmxvY2s6IFNWR0Jsb2NrLCBncmFkaWVudDogUmFkaWFsR3JhZGllbnQgKSB7XHJcbiAgICBzdXBlciggc3ZnQmxvY2ssIGdyYWRpZW50ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgaW5pdGlhbGl6ZSggc3ZnQmxvY2s6IFNWR0Jsb2NrLCByYWRpYWxHcmFkaWVudDogUmFkaWFsR3JhZGllbnQgKTogdGhpcyB7XHJcbiAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cuUGFpbnRzKCBgW1NWR1JhZGlhbEdyYWRpZW50XSBpbml0aWFsaXplICR7cmFkaWFsR3JhZGllbnQuaWR9YCApO1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnB1c2goKTtcclxuXHJcbiAgICBzdXBlci5pbml0aWFsaXplKCBzdmdCbG9jaywgcmFkaWFsR3JhZGllbnQgKTtcclxuXHJcbiAgICAvLyBSYWRpYWwtc3BlY2lmaWMgc2V0dXBcclxuICAgIHRoaXMuZGVmaW5pdGlvbi5zZXRBdHRyaWJ1dGUoICdjeCcsICcnICsgcmFkaWFsR3JhZGllbnQubGFyZ2VQb2ludC54ICk7XHJcbiAgICB0aGlzLmRlZmluaXRpb24uc2V0QXR0cmlidXRlKCAnY3knLCAnJyArIHJhZGlhbEdyYWRpZW50LmxhcmdlUG9pbnQueSApO1xyXG4gICAgdGhpcy5kZWZpbml0aW9uLnNldEF0dHJpYnV0ZSggJ3InLCAnJyArIHJhZGlhbEdyYWRpZW50Lm1heFJhZGl1cyApO1xyXG4gICAgdGhpcy5kZWZpbml0aW9uLnNldEF0dHJpYnV0ZSggJ2Z4JywgJycgKyByYWRpYWxHcmFkaWVudC5mb2NhbFBvaW50LnggKTtcclxuICAgIHRoaXMuZGVmaW5pdGlvbi5zZXRBdHRyaWJ1dGUoICdmeScsICcnICsgcmFkaWFsR3JhZGllbnQuZm9jYWxQb2ludC55ICk7XHJcblxyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnBvcCgpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgZ3JhZGllbnQtdHlwZS1zcGVjaWZpYyBkZWZpbml0aW9uLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjcmVhdGVEZWZpbml0aW9uKCk6IFNWR1JhZGlhbEdyYWRpZW50RWxlbWVudCB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmducywgJ3JhZGlhbEdyYWRpZW50JyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZyZWVUb1Bvb2woKTogdm9pZCB7XHJcbiAgICBTVkdSYWRpYWxHcmFkaWVudC5wb29sLmZyZWVUb1Bvb2woIHRoaXMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcG9vbCA9IG5ldyBQb29sKCBTVkdSYWRpYWxHcmFkaWVudCApO1xyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnU1ZHUmFkaWFsR3JhZGllbnQnLCBTVkdSYWRpYWxHcmFkaWVudCApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLElBQUksTUFBcUIsK0JBQStCO0FBQy9ELFNBQXlCQyxPQUFPLEVBQVlDLFdBQVcsRUFBRUMsS0FBSyxRQUFRLGVBQWU7QUFFckYsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU0YsV0FBVyxDQUFzQjtFQUV2RUcsV0FBV0EsQ0FBRUMsUUFBa0IsRUFBRUMsUUFBd0IsRUFBRztJQUNqRSxLQUFLLENBQUVELFFBQVEsRUFBRUMsUUFBUyxDQUFDO0VBQzdCO0VBRWdCQyxVQUFVQSxDQUFFRixRQUFrQixFQUFFRyxjQUE4QixFQUFTO0lBQ3JGQyxVQUFVLElBQUlBLFVBQVUsQ0FBQ0MsTUFBTSxJQUFJRCxVQUFVLENBQUNDLE1BQU0sQ0FBRyxrQ0FBaUNGLGNBQWMsQ0FBQ0csRUFBRyxFQUFFLENBQUM7SUFDN0dGLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxNQUFNLElBQUlELFVBQVUsQ0FBQ0csSUFBSSxDQUFDLENBQUM7SUFFcEQsS0FBSyxDQUFDTCxVQUFVLENBQUVGLFFBQVEsRUFBRUcsY0FBZSxDQUFDOztJQUU1QztJQUNBLElBQUksQ0FBQ0ssVUFBVSxDQUFDQyxZQUFZLENBQUUsSUFBSSxFQUFFLEVBQUUsR0FBR04sY0FBYyxDQUFDTyxVQUFVLENBQUNDLENBQUUsQ0FBQztJQUN0RSxJQUFJLENBQUNILFVBQVUsQ0FBQ0MsWUFBWSxDQUFFLElBQUksRUFBRSxFQUFFLEdBQUdOLGNBQWMsQ0FBQ08sVUFBVSxDQUFDRSxDQUFFLENBQUM7SUFDdEUsSUFBSSxDQUFDSixVQUFVLENBQUNDLFlBQVksQ0FBRSxHQUFHLEVBQUUsRUFBRSxHQUFHTixjQUFjLENBQUNVLFNBQVUsQ0FBQztJQUNsRSxJQUFJLENBQUNMLFVBQVUsQ0FBQ0MsWUFBWSxDQUFFLElBQUksRUFBRSxFQUFFLEdBQUdOLGNBQWMsQ0FBQ1csVUFBVSxDQUFDSCxDQUFFLENBQUM7SUFDdEUsSUFBSSxDQUFDSCxVQUFVLENBQUNDLFlBQVksQ0FBRSxJQUFJLEVBQUUsRUFBRSxHQUFHTixjQUFjLENBQUNXLFVBQVUsQ0FBQ0YsQ0FBRSxDQUFDO0lBRXRFUixVQUFVLElBQUlBLFVBQVUsQ0FBQ0MsTUFBTSxJQUFJRCxVQUFVLENBQUNXLEdBQUcsQ0FBQyxDQUFDO0lBRW5ELE9BQU8sSUFBSTtFQUNiOztFQUVBO0FBQ0Y7QUFDQTtFQUNZQyxnQkFBZ0JBLENBQUEsRUFBNkI7SUFDckQsT0FBT0MsUUFBUSxDQUFDQyxlQUFlLENBQUVyQixLQUFLLEVBQUUsZ0JBQWlCLENBQUM7RUFDNUQ7RUFFT3NCLFVBQVVBLENBQUEsRUFBUztJQUN4QnJCLGlCQUFpQixDQUFDc0IsSUFBSSxDQUFDRCxVQUFVLENBQUUsSUFBSyxDQUFDO0VBQzNDO0VBRUEsT0FBdUJDLElBQUksR0FBRyxJQUFJMUIsSUFBSSxDQUFFSSxpQkFBa0IsQ0FBQztBQUM3RDtBQUVBSCxPQUFPLENBQUMwQixRQUFRLENBQUUsbUJBQW1CLEVBQUV2QixpQkFBa0IsQ0FBQyJ9