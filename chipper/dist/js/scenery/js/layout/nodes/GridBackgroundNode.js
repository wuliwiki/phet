// Copyright 2021-2022, University of Colorado Boulder

/**
 * Displays a background for a given GridConstraint.
 *
 * NOTE: If there are "holes" in the GridBox/GridConstraint (where there is no cell content for an x/y position), then
 * there will be no background for where those cells (if added) would have been.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import assertMutuallyExclusiveOptions from '../../../../phet-core/js/assertMutuallyExclusiveOptions.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Node, Rectangle, scenery } from '../../imports.js';
export default class GridBackgroundNode extends Node {
  constructor(constraint, providedOptions) {
    // Don't permit fill/stroke when createCellBackground is provided
    assertMutuallyExclusiveOptions(providedOptions, ['createCellBackground'], ['fill', 'stroke']);
    const defaultCreateCellBackground = cell => {
      return Rectangle.bounds(cell.lastAvailableBounds, {
        fill: options.fill,
        stroke: options.stroke
      });
    };
    const options = optionize()({
      fill: 'white',
      stroke: 'black',
      createCellBackground: defaultCreateCellBackground
    }, providedOptions);
    super();
    this.constraint = constraint;
    this.createCellBackground = options.createCellBackground;
    this.layoutListener = this.update.bind(this);
    this.constraint.finishedLayoutEmitter.addListener(this.layoutListener);
    this.update();
    this.mutate(options);
  }
  update() {
    this.children = this.constraint.displayedCells.map(this.createCellBackground).filter(_.identity);
  }

  /**
   * Releases references
   */
  dispose() {
    this.constraint.finishedLayoutEmitter.removeListener(this.layoutListener);
    super.dispose();
  }
}
scenery.register('GridBackgroundNode', GridBackgroundNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnRNdXR1YWxseUV4Y2x1c2l2ZU9wdGlvbnMiLCJvcHRpb25pemUiLCJOb2RlIiwiUmVjdGFuZ2xlIiwic2NlbmVyeSIsIkdyaWRCYWNrZ3JvdW5kTm9kZSIsImNvbnN0cnVjdG9yIiwiY29uc3RyYWludCIsInByb3ZpZGVkT3B0aW9ucyIsImRlZmF1bHRDcmVhdGVDZWxsQmFja2dyb3VuZCIsImNlbGwiLCJib3VuZHMiLCJsYXN0QXZhaWxhYmxlQm91bmRzIiwiZmlsbCIsIm9wdGlvbnMiLCJzdHJva2UiLCJjcmVhdGVDZWxsQmFja2dyb3VuZCIsImxheW91dExpc3RlbmVyIiwidXBkYXRlIiwiYmluZCIsImZpbmlzaGVkTGF5b3V0RW1pdHRlciIsImFkZExpc3RlbmVyIiwibXV0YXRlIiwiY2hpbGRyZW4iLCJkaXNwbGF5ZWRDZWxscyIsIm1hcCIsImZpbHRlciIsIl8iLCJpZGVudGl0eSIsImRpc3Bvc2UiLCJyZW1vdmVMaXN0ZW5lciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR3JpZEJhY2tncm91bmROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIGEgYmFja2dyb3VuZCBmb3IgYSBnaXZlbiBHcmlkQ29uc3RyYWludC5cclxuICpcclxuICogTk9URTogSWYgdGhlcmUgYXJlIFwiaG9sZXNcIiBpbiB0aGUgR3JpZEJveC9HcmlkQ29uc3RyYWludCAod2hlcmUgdGhlcmUgaXMgbm8gY2VsbCBjb250ZW50IGZvciBhbiB4L3kgcG9zaXRpb24pLCB0aGVuXHJcbiAqIHRoZXJlIHdpbGwgYmUgbm8gYmFja2dyb3VuZCBmb3Igd2hlcmUgdGhvc2UgY2VsbHMgKGlmIGFkZGVkKSB3b3VsZCBoYXZlIGJlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgYXNzZXJ0TXV0dWFsbHlFeGNsdXNpdmVPcHRpb25zIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9hc3NlcnRNdXR1YWxseUV4Y2x1c2l2ZU9wdGlvbnMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBHcmlkQ2VsbCwgR3JpZENvbnN0cmFpbnQsIE5vZGUsIE5vZGVPcHRpb25zLCBSZWN0YW5nbGUsIHNjZW5lcnksIFRQYWludCB9IGZyb20gJy4uLy4uL2ltcG9ydHMuanMnO1xyXG5cclxudHlwZSBDcmVhdGVDZWxsQmFja2dyb3VuZCA9ICggZ3JpZENlbGw6IEdyaWRDZWxsICkgPT4gTm9kZSB8IG51bGw7XHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgLy8gQWxsb3dzIGZ1bGwgY3VzdG9taXphdGlvbiBvZiB0aGUgYmFja2dyb3VuZCBmb3IgZWFjaCBjZWxsLiBUaGUgY2VsbCBpcyBwYXNzZWQgaW4sIGFuZCBjYW4gYmUgdXNlZCBpbiBhbnkgd2F5IHRvXHJcbiAgLy8gZ2VuZXJhdGUgdGhlIGJhY2tncm91bmQuIGBjZWxsLmxhc3RBdmFpbGFibGVCb3VuZHNgIGlzIHRoZSBib3VuZHMgdG8gcHJvdmlkZS4gYGNlbGwucG9zaXRpb24uaG9yaXpvbnRhbGAgYW5kXHJcbiAgLy8gYGNlbGwucG9zaXRpb24udmVydGljYWxgIGFyZSB0aGUgcm93IGFuZCBjb2x1bW4gaW5kaWNlcyBvZiB0aGUgY2VsbC4gYGNlbGwuc2l6ZWAgY2FuIGFsc28gYmUgdXNlZC5cclxuICBjcmVhdGVDZWxsQmFja2dyb3VuZD86IENyZWF0ZUNlbGxCYWNrZ3JvdW5kO1xyXG5cclxuICAvLyBJZiBubyBjcmVhdGVDZWxsQmFja2dyb3VuZCBpcyBwcm92aWRlZCwgdGhlc2Ugd2lsbCBiZSB1c2VkIGZvciB0aGUgZmlsbC9zdHJva2Ugb2YgdGhlIFJlY3RhbmdsZSBjcmVhdGVkIGZvciB0aGVcclxuICAvLyBjZWxscy5cclxuICBmaWxsPzogVFBhaW50O1xyXG4gIHN0cm9rZT86IFRQYWludDtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEdyaWRCYWNrZ3JvdW5kTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JpZEJhY2tncm91bmROb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgY29uc3RyYWludDogR3JpZENvbnN0cmFpbnQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjcmVhdGVDZWxsQmFja2dyb3VuZDogQ3JlYXRlQ2VsbEJhY2tncm91bmQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBsYXlvdXRMaXN0ZW5lcjogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjb25zdHJhaW50OiBHcmlkQ29uc3RyYWludCwgcHJvdmlkZWRPcHRpb25zPzogR3JpZEJhY2tncm91bmROb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBEb24ndCBwZXJtaXQgZmlsbC9zdHJva2Ugd2hlbiBjcmVhdGVDZWxsQmFja2dyb3VuZCBpcyBwcm92aWRlZFxyXG4gICAgYXNzZXJ0TXV0dWFsbHlFeGNsdXNpdmVPcHRpb25zKCBwcm92aWRlZE9wdGlvbnMsIFsgJ2NyZWF0ZUNlbGxCYWNrZ3JvdW5kJyBdLCBbICdmaWxsJywgJ3N0cm9rZScgXSApO1xyXG5cclxuICAgIGNvbnN0IGRlZmF1bHRDcmVhdGVDZWxsQmFja2dyb3VuZCA9ICggY2VsbDogR3JpZENlbGwgKTogUmVjdGFuZ2xlID0+IHtcclxuICAgICAgcmV0dXJuIFJlY3RhbmdsZS5ib3VuZHMoIGNlbGwubGFzdEF2YWlsYWJsZUJvdW5kcywge1xyXG4gICAgICAgIGZpbGw6IG9wdGlvbnMuZmlsbCxcclxuICAgICAgICBzdHJva2U6IG9wdGlvbnMuc3Ryb2tlXHJcbiAgICAgIH0gKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxHcmlkQmFja2dyb3VuZE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBjcmVhdGVDZWxsQmFja2dyb3VuZDogZGVmYXVsdENyZWF0ZUNlbGxCYWNrZ3JvdW5kXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuY29uc3RyYWludCA9IGNvbnN0cmFpbnQ7XHJcbiAgICB0aGlzLmNyZWF0ZUNlbGxCYWNrZ3JvdW5kID0gb3B0aW9ucy5jcmVhdGVDZWxsQmFja2dyb3VuZDtcclxuICAgIHRoaXMubGF5b3V0TGlzdGVuZXIgPSB0aGlzLnVwZGF0ZS5iaW5kKCB0aGlzICk7XHJcbiAgICB0aGlzLmNvbnN0cmFpbnQuZmluaXNoZWRMYXlvdXRFbWl0dGVyLmFkZExpc3RlbmVyKCB0aGlzLmxheW91dExpc3RlbmVyICk7XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLmNvbnN0cmFpbnQuZGlzcGxheWVkQ2VsbHMubWFwKCB0aGlzLmNyZWF0ZUNlbGxCYWNrZ3JvdW5kICkuZmlsdGVyKCBfLmlkZW50aXR5ICkgYXMgTm9kZVtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVsZWFzZXMgcmVmZXJlbmNlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb25zdHJhaW50LmZpbmlzaGVkTGF5b3V0RW1pdHRlci5yZW1vdmVMaXN0ZW5lciggdGhpcy5sYXlvdXRMaXN0ZW5lciApO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdHcmlkQmFja2dyb3VuZE5vZGUnLCBHcmlkQmFja2dyb3VuZE5vZGUgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLDhCQUE4QixNQUFNLDREQUE0RDtBQUN2RyxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBQzdELFNBQW1DQyxJQUFJLEVBQWVDLFNBQVMsRUFBRUMsT0FBTyxRQUFnQixrQkFBa0I7QUFpQjFHLGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNILElBQUksQ0FBQztFQU01Q0ksV0FBV0EsQ0FBRUMsVUFBMEIsRUFBRUMsZUFBMkMsRUFBRztJQUU1RjtJQUNBUiw4QkFBOEIsQ0FBRVEsZUFBZSxFQUFFLENBQUUsc0JBQXNCLENBQUUsRUFBRSxDQUFFLE1BQU0sRUFBRSxRQUFRLENBQUcsQ0FBQztJQUVuRyxNQUFNQywyQkFBMkIsR0FBS0MsSUFBYyxJQUFpQjtNQUNuRSxPQUFPUCxTQUFTLENBQUNRLE1BQU0sQ0FBRUQsSUFBSSxDQUFDRSxtQkFBbUIsRUFBRTtRQUNqREMsSUFBSSxFQUFFQyxPQUFPLENBQUNELElBQUk7UUFDbEJFLE1BQU0sRUFBRUQsT0FBTyxDQUFDQztNQUNsQixDQUFFLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTUQsT0FBTyxHQUFHYixTQUFTLENBQXNELENBQUMsQ0FBRTtNQUNoRlksSUFBSSxFQUFFLE9BQU87TUFDYkUsTUFBTSxFQUFFLE9BQU87TUFDZkMsb0JBQW9CLEVBQUVQO0lBQ3hCLENBQUMsRUFBRUQsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0QsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ1Msb0JBQW9CLEdBQUdGLE9BQU8sQ0FBQ0Usb0JBQW9CO0lBQ3hELElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUUsSUFBSyxDQUFDO0lBQzlDLElBQUksQ0FBQ1osVUFBVSxDQUFDYSxxQkFBcUIsQ0FBQ0MsV0FBVyxDQUFFLElBQUksQ0FBQ0osY0FBZSxDQUFDO0lBQ3hFLElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUM7SUFFYixJQUFJLENBQUNJLE1BQU0sQ0FBRVIsT0FBUSxDQUFDO0VBQ3hCO0VBRVFJLE1BQU1BLENBQUEsRUFBUztJQUNyQixJQUFJLENBQUNLLFFBQVEsR0FBRyxJQUFJLENBQUNoQixVQUFVLENBQUNpQixjQUFjLENBQUNDLEdBQUcsQ0FBRSxJQUFJLENBQUNULG9CQUFxQixDQUFDLENBQUNVLE1BQU0sQ0FBRUMsQ0FBQyxDQUFDQyxRQUFTLENBQVc7RUFDaEg7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDdEIsVUFBVSxDQUFDYSxxQkFBcUIsQ0FBQ1UsY0FBYyxDQUFFLElBQUksQ0FBQ2IsY0FBZSxDQUFDO0lBRTNFLEtBQUssQ0FBQ1ksT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBekIsT0FBTyxDQUFDMkIsUUFBUSxDQUFFLG9CQUFvQixFQUFFMUIsa0JBQW1CLENBQUMifQ==