// Copyright 2021-2022, University of Colorado Boulder

/**
 * ManualConstraint tests
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Node from '../../nodes/Node.js';
import Rectangle from '../../nodes/Rectangle.js';
import ManualConstraint from './ManualConstraint.js';
QUnit.module('ManualConstraint');
QUnit.test('Identity', assert => {
  const a = new Rectangle(0, 0, 100, 50, {
    fill: 'red'
  });
  const b = new Rectangle(0, 0, 100, 50, {
    fill: 'blue'
  });
  const aContainer = new Node({
    children: [a]
  });
  const bContainer = new Node({
    children: [b]
  });
  const root = new Node({
    children: [aContainer, bContainer]
  });
  ManualConstraint.create(root, [a, b], (aProxy, bProxy) => {
    bProxy.left = aProxy.right;
  });
  root.validateBounds();
  assert.equal(b.x, 100, 'x');
  a.x = 100;
  root.validateBounds();
  assert.equal(b.x, 200, 'x after 100');
});
QUnit.test('Translation', assert => {
  const a = new Rectangle(0, 0, 100, 50, {
    fill: 'red'
  });
  const b = new Rectangle(0, 0, 100, 50, {
    fill: 'blue'
  });
  const aContainer = new Node({
    children: [a]
  });
  const bContainer = new Node({
    children: [b],
    x: 50
  });
  const root = new Node({
    children: [aContainer, bContainer]
  });
  ManualConstraint.create(root, [a, b], (aProxy, bProxy) => {
    bProxy.left = aProxy.right;
  });
  root.validateBounds();
  assert.equal(b.x, 50, 'x');
  a.x = 100;
  root.validateBounds();
  assert.equal(b.x, 150, 'x after 100');
});
QUnit.test('Scale', assert => {
  const a = new Rectangle(0, 0, 100, 50, {
    fill: 'red'
  });
  const b = new Rectangle(0, 0, 100, 50, {
    fill: 'blue'
  });
  const aContainer = new Node({
    children: [a],
    scale: 2
  });
  const bContainer = new Node({
    children: [b]
  });
  const root = new Node({
    children: [aContainer, bContainer]
  });
  ManualConstraint.create(root, [a, b], (aProxy, bProxy) => {
    bProxy.left = aProxy.right;
  });
  root.validateBounds();
  assert.equal(b.x, 200, 'x');
  a.x = 100;
  root.validateBounds();
  assert.equal(b.x, 400, 'x after 100');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiUmVjdGFuZ2xlIiwiTWFudWFsQ29uc3RyYWludCIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsImEiLCJmaWxsIiwiYiIsImFDb250YWluZXIiLCJjaGlsZHJlbiIsImJDb250YWluZXIiLCJyb290IiwiY3JlYXRlIiwiYVByb3h5IiwiYlByb3h5IiwibGVmdCIsInJpZ2h0IiwidmFsaWRhdGVCb3VuZHMiLCJlcXVhbCIsIngiLCJzY2FsZSJdLCJzb3VyY2VzIjpbIk1hbnVhbENvbnN0cmFpbnRUZXN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYW51YWxDb25zdHJhaW50IHRlc3RzXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgTm9kZSBmcm9tICcuLi8uLi9ub2Rlcy9Ob2RlLmpzJztcclxuaW1wb3J0IFJlY3RhbmdsZSBmcm9tICcuLi8uLi9ub2Rlcy9SZWN0YW5nbGUuanMnO1xyXG5pbXBvcnQgTWFudWFsQ29uc3RyYWludCBmcm9tICcuL01hbnVhbENvbnN0cmFpbnQuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnTWFudWFsQ29uc3RyYWludCcgKTtcclxuXHJcblFVbml0LnRlc3QoICdJZGVudGl0eScsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgYSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDEwMCwgNTAsIHsgZmlsbDogJ3JlZCcgfSApO1xyXG4gIGNvbnN0IGIgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAxMDAsIDUwLCB7IGZpbGw6ICdibHVlJyB9ICk7XHJcbiAgY29uc3QgYUNvbnRhaW5lciA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGEgXSB9ICk7XHJcbiAgY29uc3QgYkNvbnRhaW5lciA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGIgXSB9ICk7XHJcbiAgY29uc3Qgcm9vdCA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGFDb250YWluZXIsIGJDb250YWluZXIgXSB9ICk7XHJcblxyXG4gIE1hbnVhbENvbnN0cmFpbnQuY3JlYXRlKCByb290LCBbIGEsIGIgXSwgKCBhUHJveHksIGJQcm94eSApID0+IHtcclxuICAgIGJQcm94eS5sZWZ0ID0gYVByb3h5LnJpZ2h0O1xyXG4gIH0gKTtcclxuXHJcbiAgcm9vdC52YWxpZGF0ZUJvdW5kcygpO1xyXG4gIGFzc2VydC5lcXVhbCggYi54LCAxMDAsICd4JyApO1xyXG5cclxuICBhLnggPSAxMDA7XHJcblxyXG4gIHJvb3QudmFsaWRhdGVCb3VuZHMoKTtcclxuICBhc3NlcnQuZXF1YWwoIGIueCwgMjAwLCAneCBhZnRlciAxMDAnICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICdUcmFuc2xhdGlvbicsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgYSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDEwMCwgNTAsIHsgZmlsbDogJ3JlZCcgfSApO1xyXG4gIGNvbnN0IGIgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAxMDAsIDUwLCB7IGZpbGw6ICdibHVlJyB9ICk7XHJcbiAgY29uc3QgYUNvbnRhaW5lciA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGEgXSB9ICk7XHJcbiAgY29uc3QgYkNvbnRhaW5lciA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGIgXSwgeDogNTAgfSApO1xyXG4gIGNvbnN0IHJvb3QgPSBuZXcgTm9kZSggeyBjaGlsZHJlbjogWyBhQ29udGFpbmVyLCBiQ29udGFpbmVyIF0gfSApO1xyXG5cclxuICBNYW51YWxDb25zdHJhaW50LmNyZWF0ZSggcm9vdCwgWyBhLCBiIF0sICggYVByb3h5LCBiUHJveHkgKSA9PiB7XHJcbiAgICBiUHJveHkubGVmdCA9IGFQcm94eS5yaWdodDtcclxuICB9ICk7XHJcblxyXG4gIHJvb3QudmFsaWRhdGVCb3VuZHMoKTtcclxuICBhc3NlcnQuZXF1YWwoIGIueCwgNTAsICd4JyApO1xyXG5cclxuICBhLnggPSAxMDA7XHJcblxyXG4gIHJvb3QudmFsaWRhdGVCb3VuZHMoKTtcclxuICBhc3NlcnQuZXF1YWwoIGIueCwgMTUwLCAneCBhZnRlciAxMDAnICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICdTY2FsZScsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgYSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDEwMCwgNTAsIHsgZmlsbDogJ3JlZCcgfSApO1xyXG4gIGNvbnN0IGIgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAxMDAsIDUwLCB7IGZpbGw6ICdibHVlJyB9ICk7XHJcbiAgY29uc3QgYUNvbnRhaW5lciA9IG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIGEgXSwgc2NhbGU6IDIgfSApO1xyXG4gIGNvbnN0IGJDb250YWluZXIgPSBuZXcgTm9kZSggeyBjaGlsZHJlbjogWyBiIF0gfSApO1xyXG4gIGNvbnN0IHJvb3QgPSBuZXcgTm9kZSggeyBjaGlsZHJlbjogWyBhQ29udGFpbmVyLCBiQ29udGFpbmVyIF0gfSApO1xyXG5cclxuICBNYW51YWxDb25zdHJhaW50LmNyZWF0ZSggcm9vdCwgWyBhLCBiIF0sICggYVByb3h5LCBiUHJveHkgKSA9PiB7XHJcbiAgICBiUHJveHkubGVmdCA9IGFQcm94eS5yaWdodDtcclxuICB9ICk7XHJcblxyXG4gIHJvb3QudmFsaWRhdGVCb3VuZHMoKTtcclxuICBhc3NlcnQuZXF1YWwoIGIueCwgMjAwLCAneCcgKTtcclxuXHJcbiAgYS54ID0gMTAwO1xyXG5cclxuICByb290LnZhbGlkYXRlQm91bmRzKCk7XHJcbiAgYXNzZXJ0LmVxdWFsKCBiLngsIDQwMCwgJ3ggYWZ0ZXIgMTAwJyApO1xyXG59ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxJQUFJLE1BQU0scUJB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