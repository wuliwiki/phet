// Copyright 2021-2023, University of Colorado Boulder

/**
 * ManualConstraint exists for cases where imperative-based positioning code (e.g. `node.left = otherNode.right + 5`)
 * is best for a case, and should be rerun whenever one of the nodes changes bounds.
 *
 * ManualConstraint also can handle cases where the nodes do not live in the same coordinate frame (but instead with
 * some common ancestor).
 *
 * For example:
 *
 * new ManualConstraint( ancestorNode, [ firstNode, secondNode ], ( firstProxy, secondProxy ) => {
 *   firstProxy.left = secondProxy.right + 5;
 *   secondProxy.centerY = firstProxy.centerY;
 * } );
 *
 * Notably in the callback, it uses LayoutProxy (which has the positional getters/setters of an object, and handles
 * coordinate transforms).
 *
 * See https://phetsims.github.io/scenery/doc/layout#ManualConstraint for details
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { LayoutCell, LayoutConstraint, Node, scenery } from '../../imports.js';

// Turns a tuple of things into a tuple of LayoutProxies

export default class ManualConstraint extends LayoutConstraint {
  // Cells provide us LayoutProxy and connection tracking

  // The user-supplied callback that should be called to do layout

  constructor(ancestorNode, nodes, layoutCallback) {
    assert && assert(Array.isArray(nodes) && _.every(nodes, node => node instanceof Node));
    super(ancestorNode);

    // Don't churn updates during construction
    this.lock();
    this.nodes = nodes;

    // Having cells will give us proxy Properties and listening for when it's added for free
    this.cells = nodes.map(node => new LayoutCell(this, node, null));
    this.layoutCallback = layoutCallback;

    // Hook up to listen to these nodes (will be handled by LayoutConstraint disposal)
    this.nodes.forEach(node => this.addNode(node, false));

    // Run the layout manually at the start
    this.unlock();
    this.updateLayout();
  }

  /**
   * (scenery-internal)
   */
  layout() {
    super.layout();
    assert && assert(_.every(this.nodes, node => !node.isDisposed));

    // Don't do layout if something is missing
    const isMissingProxy = _.some(this.cells, cell => !cell.isConnected());
    if (!isMissingProxy) {
      const proxies = this.cells.map(cell => cell.proxy);
      this.layoutCallback.apply(null, proxies);
      this.finishedLayoutEmitter.emit();
    }
  }

  /**
   * Releases references
   */
  dispose() {
    this.cells.forEach(cell => cell.dispose());
    super.dispose();
  }
  static create(ancestorNode, nodes, layoutCallback) {
    return new ManualConstraint(ancestorNode, nodes, layoutCallback);
  }
}
scenery.register('ManualConstraint', ManualConstraint);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMYXlvdXRDZWxsIiwiTGF5b3V0Q29uc3RyYWludCIsIk5vZGUiLCJzY2VuZXJ5IiwiTWFudWFsQ29uc3RyYWludCIsImNvbnN0cnVjdG9yIiwiYW5jZXN0b3JOb2RlIiwibm9kZXMiLCJsYXlvdXRDYWxsYmFjayIsImFzc2VydCIsIkFycmF5IiwiaXNBcnJheSIsIl8iLCJldmVyeSIsIm5vZGUiLCJsb2NrIiwiY2VsbHMiLCJtYXAiLCJmb3JFYWNoIiwiYWRkTm9kZSIsInVubG9jayIsInVwZGF0ZUxheW91dCIsImxheW91dCIsImlzRGlzcG9zZWQiLCJpc01pc3NpbmdQcm94eSIsInNvbWUiLCJjZWxsIiwiaXNDb25uZWN0ZWQiLCJwcm94aWVzIiwicHJveHkiLCJhcHBseSIsImZpbmlzaGVkTGF5b3V0RW1pdHRlciIsImVtaXQiLCJkaXNwb3NlIiwiY3JlYXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYW51YWxDb25zdHJhaW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1hbnVhbENvbnN0cmFpbnQgZXhpc3RzIGZvciBjYXNlcyB3aGVyZSBpbXBlcmF0aXZlLWJhc2VkIHBvc2l0aW9uaW5nIGNvZGUgKGUuZy4gYG5vZGUubGVmdCA9IG90aGVyTm9kZS5yaWdodCArIDVgKVxyXG4gKiBpcyBiZXN0IGZvciBhIGNhc2UsIGFuZCBzaG91bGQgYmUgcmVydW4gd2hlbmV2ZXIgb25lIG9mIHRoZSBub2RlcyBjaGFuZ2VzIGJvdW5kcy5cclxuICpcclxuICogTWFudWFsQ29uc3RyYWludCBhbHNvIGNhbiBoYW5kbGUgY2FzZXMgd2hlcmUgdGhlIG5vZGVzIGRvIG5vdCBsaXZlIGluIHRoZSBzYW1lIGNvb3JkaW5hdGUgZnJhbWUgKGJ1dCBpbnN0ZWFkIHdpdGhcclxuICogc29tZSBjb21tb24gYW5jZXN0b3IpLlxyXG4gKlxyXG4gKiBGb3IgZXhhbXBsZTpcclxuICpcclxuICogbmV3IE1hbnVhbENvbnN0cmFpbnQoIGFuY2VzdG9yTm9kZSwgWyBmaXJzdE5vZGUsIHNlY29uZE5vZGUgXSwgKCBmaXJzdFByb3h5LCBzZWNvbmRQcm94eSApID0+IHtcclxuICogICBmaXJzdFByb3h5LmxlZnQgPSBzZWNvbmRQcm94eS5yaWdodCArIDU7XHJcbiAqICAgc2Vjb25kUHJveHkuY2VudGVyWSA9IGZpcnN0UHJveHkuY2VudGVyWTtcclxuICogfSApO1xyXG4gKlxyXG4gKiBOb3RhYmx5IGluIHRoZSBjYWxsYmFjaywgaXQgdXNlcyBMYXlvdXRQcm94eSAod2hpY2ggaGFzIHRoZSBwb3NpdGlvbmFsIGdldHRlcnMvc2V0dGVycyBvZiBhbiBvYmplY3QsIGFuZCBoYW5kbGVzXHJcbiAqIGNvb3JkaW5hdGUgdHJhbnNmb3JtcykuXHJcbiAqXHJcbiAqIFNlZSBodHRwczovL3BoZXRzaW1zLmdpdGh1Yi5pby9zY2VuZXJ5L2RvYy9sYXlvdXQjTWFudWFsQ29uc3RyYWludCBmb3IgZGV0YWlsc1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcbmltcG9ydCB7IExheW91dENlbGwsIExheW91dENvbnN0cmFpbnQsIExheW91dFByb3h5LCBOb2RlLCBzY2VuZXJ5IH0gZnJvbSAnLi4vLi4vaW1wb3J0cy5qcyc7XHJcblxyXG4vLyBUdXJucyBhIHR1cGxlIG9mIHRoaW5ncyBpbnRvIGEgdHVwbGUgb2YgTGF5b3V0UHJveGllc1xyXG50eXBlIExheW91dFByb3h5TWFwPFQ+ID0ge1xyXG4gIFtQcm9wZXJ0eSBpbiBrZXlvZiBUXTogTGF5b3V0UHJveHlcclxufTtcclxudHlwZSBMYXlvdXRDYWxsYmFjazxUIGV4dGVuZHMgSW50ZW50aW9uYWxBbnlbXT4gPSAoIC4uLmFyZ3M6IExheW91dFByb3h5TWFwPFQ+ICkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hbnVhbENvbnN0cmFpbnQ8VCBleHRlbmRzIE5vZGVbXT4gZXh0ZW5kcyBMYXlvdXRDb25zdHJhaW50IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBub2RlczogVDtcclxuXHJcbiAgLy8gQ2VsbHMgcHJvdmlkZSB1cyBMYXlvdXRQcm94eSBhbmQgY29ubmVjdGlvbiB0cmFja2luZ1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgY2VsbHM6IExheW91dENlbGxbXTtcclxuXHJcbiAgLy8gVGhlIHVzZXItc3VwcGxpZWQgY2FsbGJhY2sgdGhhdCBzaG91bGQgYmUgY2FsbGVkIHRvIGRvIGxheW91dFxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGF5b3V0Q2FsbGJhY2s6IExheW91dENhbGxiYWNrPFQ+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGFuY2VzdG9yTm9kZTogTm9kZSwgbm9kZXM6IFQsIGxheW91dENhbGxiYWNrOiBMYXlvdXRDYWxsYmFjazxUPiApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBBcnJheS5pc0FycmF5KCBub2RlcyApICYmIF8uZXZlcnkoIG5vZGVzLCBub2RlID0+IG5vZGUgaW5zdGFuY2VvZiBOb2RlICkgKTtcclxuXHJcbiAgICBzdXBlciggYW5jZXN0b3JOb2RlICk7XHJcblxyXG4gICAgLy8gRG9uJ3QgY2h1cm4gdXBkYXRlcyBkdXJpbmcgY29uc3RydWN0aW9uXHJcbiAgICB0aGlzLmxvY2soKTtcclxuXHJcbiAgICB0aGlzLm5vZGVzID0gbm9kZXM7XHJcblxyXG4gICAgLy8gSGF2aW5nIGNlbGxzIHdpbGwgZ2l2ZSB1cyBwcm94eSBQcm9wZXJ0aWVzIGFuZCBsaXN0ZW5pbmcgZm9yIHdoZW4gaXQncyBhZGRlZCBmb3IgZnJlZVxyXG4gICAgdGhpcy5jZWxscyA9IG5vZGVzLm1hcCggbm9kZSA9PiBuZXcgTGF5b3V0Q2VsbCggdGhpcywgbm9kZSwgbnVsbCApICk7XHJcblxyXG4gICAgdGhpcy5sYXlvdXRDYWxsYmFjayA9IGxheW91dENhbGxiYWNrO1xyXG5cclxuICAgIC8vIEhvb2sgdXAgdG8gbGlzdGVuIHRvIHRoZXNlIG5vZGVzICh3aWxsIGJlIGhhbmRsZWQgYnkgTGF5b3V0Q29uc3RyYWludCBkaXNwb3NhbClcclxuICAgIHRoaXMubm9kZXMuZm9yRWFjaCggbm9kZSA9PiB0aGlzLmFkZE5vZGUoIG5vZGUsIGZhbHNlICkgKTtcclxuXHJcbiAgICAvLyBSdW4gdGhlIGxheW91dCBtYW51YWxseSBhdCB0aGUgc3RhcnRcclxuICAgIHRoaXMudW5sb2NrKCk7XHJcbiAgICB0aGlzLnVwZGF0ZUxheW91dCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogKHNjZW5lcnktaW50ZXJuYWwpXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGxheW91dCgpOiB2b2lkIHtcclxuICAgIHN1cGVyLmxheW91dCgpO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uZXZlcnkoIHRoaXMubm9kZXMsIG5vZGUgPT4gIW5vZGUuaXNEaXNwb3NlZCApICk7XHJcblxyXG4gICAgLy8gRG9uJ3QgZG8gbGF5b3V0IGlmIHNvbWV0aGluZyBpcyBtaXNzaW5nXHJcbiAgICBjb25zdCBpc01pc3NpbmdQcm94eSA9IF8uc29tZSggdGhpcy5jZWxscywgY2VsbCA9PiAhY2VsbC5pc0Nvbm5lY3RlZCgpICk7XHJcbiAgICBpZiAoICFpc01pc3NpbmdQcm94eSApIHtcclxuICAgICAgY29uc3QgcHJveGllcyA9IHRoaXMuY2VsbHMubWFwKCBjZWxsID0+IGNlbGwucHJveHkgKTtcclxuXHJcbiAgICAgIHRoaXMubGF5b3V0Q2FsbGJhY2suYXBwbHkoIG51bGwsIHByb3hpZXMgYXMgTGF5b3V0UHJveHlNYXA8VD4gKTtcclxuXHJcbiAgICAgIHRoaXMuZmluaXNoZWRMYXlvdXRFbWl0dGVyLmVtaXQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbGVhc2VzIHJlZmVyZW5jZXNcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY2VsbHMuZm9yRWFjaCggY2VsbCA9PiBjZWxsLmRpc3Bvc2UoKSApO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlPFQgZXh0ZW5kcyBOb2RlW10+KCBhbmNlc3Rvck5vZGU6IE5vZGUsIG5vZGVzOiBULCBsYXlvdXRDYWxsYmFjazogTGF5b3V0Q2FsbGJhY2s8VD4gKTogTWFudWFsQ29uc3RyYWludDxUPiB7XHJcbiAgICByZXR1cm4gbmV3IE1hbnVhbENvbnN0cmFpbnQoIGFuY2VzdG9yTm9kZSwgbm9kZXMsIGxheW91dENhbGxiYWNrICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnTWFudWFsQ29uc3RyYWludCcsIE1hbnVhbENvbnN0cmFpbnQgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsU0FBU0EsVUFBVSxFQUFFQyxnQkFBZ0IsRUFBZUMsSUFBSSxFQUFFQyxPQUFPLFFBQVEsa0JBQWtCOztBQUUzRjs7QUFNQSxlQUFlLE1BQU1DLGdCQUFnQixTQUEyQkgsZ0JBQWdCLENBQUM7RUFJL0U7O0VBR0E7O0VBR09JLFdBQVdBLENBQUVDLFlBQWtCLEVBQUVDLEtBQVEsRUFBRUMsY0FBaUMsRUFBRztJQUVwRkMsTUFBTSxJQUFJQSxNQUFNLENBQUVDLEtBQUssQ0FBQ0MsT0FBTyxDQUFFSixLQUFNLENBQUMsSUFBSUssQ0FBQyxDQUFDQyxLQUFLLENBQUVOLEtBQUssRUFBRU8sSUFBSSxJQUFJQSxJQUFJLFlBQVlaLElBQUssQ0FBRSxDQUFDO0lBRTVGLEtBQUssQ0FBRUksWUFBYSxDQUFDOztJQUVyQjtJQUNBLElBQUksQ0FBQ1MsSUFBSSxDQUFDLENBQUM7SUFFWCxJQUFJLENBQUNSLEtBQUssR0FBR0EsS0FBSzs7SUFFbEI7SUFDQSxJQUFJLENBQUNTLEtBQUssR0FBR1QsS0FBSyxDQUFDVSxHQUFHLENBQUVILElBQUksSUFBSSxJQUFJZCxVQUFVLENBQUUsSUFBSSxFQUFFYyxJQUFJLEVBQUUsSUFBSyxDQUFFLENBQUM7SUFFcEUsSUFBSSxDQUFDTixjQUFjLEdBQUdBLGNBQWM7O0lBRXBDO0lBQ0EsSUFBSSxDQUFDRCxLQUFLLENBQUNXLE9BQU8sQ0FBRUosSUFBSSxJQUFJLElBQUksQ0FBQ0ssT0FBTyxDQUFFTCxJQUFJLEVBQUUsS0FBTSxDQUFFLENBQUM7O0lBRXpEO0lBQ0EsSUFBSSxDQUFDTSxNQUFNLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ0MsWUFBWSxDQUFDLENBQUM7RUFDckI7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCQyxNQUFNQSxDQUFBLEVBQVM7SUFDN0IsS0FBSyxDQUFDQSxNQUFNLENBQUMsQ0FBQztJQUVkYixNQUFNLElBQUlBLE1BQU0sQ0FBRUcsQ0FBQyxDQUFDQyxLQUFLLENBQUUsSUFBSSxDQUFDTixLQUFLLEVBQUVPLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNTLFVBQVcsQ0FBRSxDQUFDOztJQUVuRTtJQUNBLE1BQU1DLGNBQWMsR0FBR1osQ0FBQyxDQUFDYSxJQUFJLENBQUUsSUFBSSxDQUFDVCxLQUFLLEVBQUVVLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUFFLENBQUM7SUFDeEUsSUFBSyxDQUFDSCxjQUFjLEVBQUc7TUFDckIsTUFBTUksT0FBTyxHQUFHLElBQUksQ0FBQ1osS0FBSyxDQUFDQyxHQUFHLENBQUVTLElBQUksSUFBSUEsSUFBSSxDQUFDRyxLQUFNLENBQUM7TUFFcEQsSUFBSSxDQUFDckIsY0FBYyxDQUFDc0IsS0FBSyxDQUFFLElBQUksRUFBRUYsT0FBNkIsQ0FBQztNQUUvRCxJQUFJLENBQUNHLHFCQUFxQixDQUFDQyxJQUFJLENBQUMsQ0FBQztJQUNuQztFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNrQkMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ2pCLEtBQUssQ0FBQ0UsT0FBTyxDQUFFUSxJQUFJLElBQUlBLElBQUksQ0FBQ08sT0FBTyxDQUFDLENBQUUsQ0FBQztJQUU1QyxLQUFLLENBQUNBLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0VBRUEsT0FBY0MsTUFBTUEsQ0FBb0I1QixZQUFrQixFQUFFQyxLQUFRLEVBQUVDLGNBQWlDLEVBQXdCO0lBQzdILE9BQU8sSUFBSUosZ0JBQWdCLENBQUVFLFlBQVksRUFBRUMsS0FBSyxFQUFFQyxjQUFlLENBQUM7RUFDcEU7QUFDRjtBQUVBTCxPQUFPLENBQUNnQyxRQUFRLENBQUUsa0JBQWtCLEVBQUUvQixnQkFBaUIsQ0FBQyJ9