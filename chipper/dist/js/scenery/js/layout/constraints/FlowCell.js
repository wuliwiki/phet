// Copyright 2021-2022, University of Colorado Boulder

/**
 * A configurable cell containing a Node used for FlowConstraint layout
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { FlowConfigurable, FLOW_CONFIGURABLE_OPTION_KEYS, MarginLayoutCell, scenery } from '../../imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
const FLOW_CELL_KEYS = [...FLOW_CONFIGURABLE_OPTION_KEYS, 'isSeparator'];
export default class FlowCell extends FlowConfigurable(MarginLayoutCell) {
  // (scenery-internal) Set during FlowConstraint layout
  size = 0;

  // (scenery-internal)
  _isSeparator = false;
  constructor(constraint, node, proxy) {
    super(constraint, node, proxy);
    this.flowConstraint = constraint;
    this.orientation = constraint.orientation;
    this.onLayoutOptionsChange();
  }

  // The used value, with this cell's value taking precedence over the constraint's default
  get effectiveAlign() {
    return this._align !== null ? this._align : this.flowConstraint._align;
  }

  // The used value, with this cell's value taking precedence over the constraint's default
  get effectiveStretch() {
    return this._stretch !== null ? this._stretch : this.flowConstraint._stretch;
  }

  // The used value, with this cell's value taking precedence over the constraint's default
  get effectiveGrow() {
    return this._grow !== null ? this._grow : this.flowConstraint._grow;
  }
  onLayoutOptionsChange() {
    if (this.node.layoutOptions) {
      this.setOptions(this.node.layoutOptions);
    }
    super.onLayoutOptionsChange();
  }
  setOptions(providedOptions) {
    const options = optionize()({
      isSeparator: false
    }, providedOptions);
    assert && Object.keys(options).forEach(key => {
      assert && assert(FLOW_CELL_KEYS.includes(key), `Cannot provide key ${key} to a FlowCell's layoutOptions. Perhaps this is a Grid-style layout option?`);
    });
    this._isSeparator = options.isSeparator;
    this.setConfigToInherit();
    this.mutateConfigurable(options);
  }
}
scenery.register('FlowCell', FlowCell);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbG93Q29uZmlndXJhYmxlIiwiRkxPV19DT05GSUdVUkFCTEVfT1BUSU9OX0tFWVMiLCJNYXJnaW5MYXlvdXRDZWxsIiwic2NlbmVyeSIsIm9wdGlvbml6ZSIsIkZMT1dfQ0VMTF9LRVlTIiwiRmxvd0NlbGwiLCJzaXplIiwiX2lzU2VwYXJhdG9yIiwiY29uc3RydWN0b3IiLCJjb25zdHJhaW50Iiwibm9kZSIsInByb3h5IiwiZmxvd0NvbnN0cmFpbnQiLCJvcmllbnRhdGlvbiIsIm9uTGF5b3V0T3B0aW9uc0NoYW5nZSIsImVmZmVjdGl2ZUFsaWduIiwiX2FsaWduIiwiZWZmZWN0aXZlU3RyZXRjaCIsIl9zdHJldGNoIiwiZWZmZWN0aXZlR3JvdyIsIl9ncm93IiwibGF5b3V0T3B0aW9ucyIsInNldE9wdGlvbnMiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaXNTZXBhcmF0b3IiLCJhc3NlcnQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImluY2x1ZGVzIiwic2V0Q29uZmlnVG9Jbmhlcml0IiwibXV0YXRlQ29uZmlndXJhYmxlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGbG93Q2VsbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGNvbmZpZ3VyYWJsZSBjZWxsIGNvbnRhaW5pbmcgYSBOb2RlIHVzZWQgZm9yIEZsb3dDb25zdHJhaW50IGxheW91dFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRXh0ZXJuYWxGbG93Q29uZmlndXJhYmxlT3B0aW9ucywgRmxvd0NvbmZpZ3VyYWJsZSwgRmxvd0NvbnN0cmFpbnQsIEZMT1dfQ09ORklHVVJBQkxFX09QVElPTl9LRVlTLCBMYXlvdXRBbGlnbiwgTGF5b3V0UHJveHksIE1hcmdpbkxheW91dENlbGwsIE5vZGUsIHNjZW5lcnkgfSBmcm9tICcuLi8uLi9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxuY29uc3QgRkxPV19DRUxMX0tFWVMgPSBbXHJcbiAgLi4uRkxPV19DT05GSUdVUkFCTEVfT1BUSU9OX0tFWVMsXHJcbiAgJ2lzU2VwYXJhdG9yJ1xyXG5dO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICAvLyBBbGxvd3MgbWFya2luZyBhIGNlbGwgYXMgYSBcInNlcGFyYXRvclwiLCBzdWNoIHRoYXQgbXVsdGlwbGUgYWRqYWNlbnQgc2VwYXJhdG9ycyAoYW5kIHRob3NlIGF0IHRoZSBzdGFydC9lbmQpIGdldFxyXG4gIC8vIGNvbGxhcHNlZCAoYWxsIGJ1dCB0aGUgZmlyc3QgYXJlIG5vdCBpbmNsdWRlZCBpbiBsYXlvdXQgQU5EIG1hZGUgaW52aXNpYmxlKVxyXG4gIGlzU2VwYXJhdG9yPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEZsb3dDZWxsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxFeHRlcm5hbEZsb3dDb25maWd1cmFibGVPcHRpb25zLCAnb3JpZW50YXRpb24nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsb3dDZWxsIGV4dGVuZHMgRmxvd0NvbmZpZ3VyYWJsZSggTWFyZ2luTGF5b3V0Q2VsbCApIHtcclxuXHJcbiAgLy8gKHNjZW5lcnktaW50ZXJuYWwpIFNldCBkdXJpbmcgRmxvd0NvbnN0cmFpbnQgbGF5b3V0XHJcbiAgcHVibGljIHNpemUgPSAwO1xyXG5cclxuICAvLyAoc2NlbmVyeS1pbnRlcm5hbClcclxuICBwdWJsaWMgX2lzU2VwYXJhdG9yID0gZmFsc2U7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZmxvd0NvbnN0cmFpbnQ6IEZsb3dDb25zdHJhaW50O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvbnN0cmFpbnQ6IEZsb3dDb25zdHJhaW50LCBub2RlOiBOb2RlLCBwcm94eTogTGF5b3V0UHJveHkgfCBudWxsICkge1xyXG4gICAgc3VwZXIoIGNvbnN0cmFpbnQsIG5vZGUsIHByb3h5ICk7XHJcblxyXG4gICAgdGhpcy5mbG93Q29uc3RyYWludCA9IGNvbnN0cmFpbnQ7XHJcblxyXG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IGNvbnN0cmFpbnQub3JpZW50YXRpb247XHJcbiAgICB0aGlzLm9uTGF5b3V0T3B0aW9uc0NoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhlIHVzZWQgdmFsdWUsIHdpdGggdGhpcyBjZWxsJ3MgdmFsdWUgdGFraW5nIHByZWNlZGVuY2Ugb3ZlciB0aGUgY29uc3RyYWludCdzIGRlZmF1bHRcclxuICBwdWJsaWMgZ2V0IGVmZmVjdGl2ZUFsaWduKCk6IExheW91dEFsaWduIHtcclxuICAgIHJldHVybiB0aGlzLl9hbGlnbiAhPT0gbnVsbCA/IHRoaXMuX2FsaWduIDogdGhpcy5mbG93Q29uc3RyYWludC5fYWxpZ24hO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhlIHVzZWQgdmFsdWUsIHdpdGggdGhpcyBjZWxsJ3MgdmFsdWUgdGFraW5nIHByZWNlZGVuY2Ugb3ZlciB0aGUgY29uc3RyYWludCdzIGRlZmF1bHRcclxuICBwdWJsaWMgZ2V0IGVmZmVjdGl2ZVN0cmV0Y2goKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RyZXRjaCAhPT0gbnVsbCA/IHRoaXMuX3N0cmV0Y2ggOiB0aGlzLmZsb3dDb25zdHJhaW50Ll9zdHJldGNoITtcclxuICB9XHJcblxyXG4gIC8vIFRoZSB1c2VkIHZhbHVlLCB3aXRoIHRoaXMgY2VsbCdzIHZhbHVlIHRha2luZyBwcmVjZWRlbmNlIG92ZXIgdGhlIGNvbnN0cmFpbnQncyBkZWZhdWx0XHJcbiAgcHVibGljIGdldCBlZmZlY3RpdmVHcm93KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZ3JvdyAhPT0gbnVsbCA/IHRoaXMuX2dyb3cgOiB0aGlzLmZsb3dDb25zdHJhaW50Ll9ncm93ITtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBvdmVycmlkZSBvbkxheW91dE9wdGlvbnNDaGFuZ2UoKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMubm9kZS5sYXlvdXRPcHRpb25zICkge1xyXG4gICAgICB0aGlzLnNldE9wdGlvbnMoIHRoaXMubm9kZS5sYXlvdXRPcHRpb25zIGFzIEV4dGVybmFsRmxvd0NvbmZpZ3VyYWJsZU9wdGlvbnMgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlci5vbkxheW91dE9wdGlvbnNDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0T3B0aW9ucyggcHJvdmlkZWRPcHRpb25zPzogRXh0ZXJuYWxGbG93Q29uZmlndXJhYmxlT3B0aW9ucyApOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEZsb3dDZWxsT3B0aW9ucywgU2VsZk9wdGlvbnMsIEV4dGVybmFsRmxvd0NvbmZpZ3VyYWJsZU9wdGlvbnM+KCkoIHtcclxuICAgICAgaXNTZXBhcmF0b3I6IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgT2JqZWN0LmtleXMoIG9wdGlvbnMgKS5mb3JFYWNoKCBrZXkgPT4ge1xyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBGTE9XX0NFTExfS0VZUy5pbmNsdWRlcygga2V5ICksIGBDYW5ub3QgcHJvdmlkZSBrZXkgJHtrZXl9IHRvIGEgRmxvd0NlbGwncyBsYXlvdXRPcHRpb25zLiBQZXJoYXBzIHRoaXMgaXMgYSBHcmlkLXN0eWxlIGxheW91dCBvcHRpb24/YCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuX2lzU2VwYXJhdG9yID0gb3B0aW9ucy5pc1NlcGFyYXRvcjtcclxuXHJcbiAgICB0aGlzLnNldENvbmZpZ1RvSW5oZXJpdCgpO1xyXG4gICAgdGhpcy5tdXRhdGVDb25maWd1cmFibGUoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdGbG93Q2VsbCcsIEZsb3dDZWxsICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUEwQ0EsZ0JBQWdCLEVBQWtCQyw2QkFBNkIsRUFBNEJDLGdCQUFnQixFQUFRQyxPQUFPLFFBQVEsa0JBQWtCO0FBRTlMLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsTUFBTUMsY0FBYyxHQUFHLENBQ3JCLEdBQUdKLDZCQUE2QixFQUNoQyxhQUFhLENBQ2Q7QUFVRCxlQUFlLE1BQU1LLFFBQVEsU0FBU04sZ0JBQWdCLENBQUVFLGdCQUFpQixDQUFDLENBQUM7RUFFekU7RUFDT0ssSUFBSSxHQUFHLENBQUM7O0VBRWY7RUFDT0MsWUFBWSxHQUFHLEtBQUs7RUFJcEJDLFdBQVdBLENBQUVDLFVBQTBCLEVBQUVDLElBQVUsRUFBRUMsS0FBeUIsRUFBRztJQUN0RixLQUFLLENBQUVGLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxLQUFNLENBQUM7SUFFaEMsSUFBSSxDQUFDQyxjQUFjLEdBQUdILFVBQVU7SUFFaEMsSUFBSSxDQUFDSSxXQUFXLEdBQUdKLFVBQVUsQ0FBQ0ksV0FBVztJQUN6QyxJQUFJLENBQUNDLHFCQUFxQixDQUFDLENBQUM7RUFDOUI7O0VBRUE7RUFDQSxJQUFXQyxjQUFjQSxDQUFBLEVBQWdCO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDQyxNQUFNLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxHQUFHLElBQUksQ0FBQ0osY0FBYyxDQUFDSSxNQUFPO0VBQ3pFOztFQUVBO0VBQ0EsSUFBV0MsZ0JBQWdCQSxDQUFBLEVBQVk7SUFDckMsT0FBTyxJQUFJLENBQUNDLFFBQVEsS0FBSyxJQUFJLEdBQUcsSUFBSSxDQUFDQSxRQUFRLEdBQUcsSUFBSSxDQUFDTixjQUFjLENBQUNNLFFBQVM7RUFDL0U7O0VBRUE7RUFDQSxJQUFXQyxhQUFhQSxDQUFBLEVBQVc7SUFDakMsT0FBTyxJQUFJLENBQUNDLEtBQUssS0FBSyxJQUFJLEdBQUcsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSSxDQUFDUixjQUFjLENBQUNRLEtBQU07RUFDdEU7RUFFbUJOLHFCQUFxQkEsQ0FBQSxFQUFTO0lBQy9DLElBQUssSUFBSSxDQUFDSixJQUFJLENBQUNXLGFBQWEsRUFBRztNQUM3QixJQUFJLENBQUNDLFVBQVUsQ0FBRSxJQUFJLENBQUNaLElBQUksQ0FBQ1csYUFBaUQsQ0FBQztJQUMvRTtJQUVBLEtBQUssQ0FBQ1AscUJBQXFCLENBQUMsQ0FBQztFQUMvQjtFQUVRUSxVQUFVQSxDQUFFQyxlQUFpRCxFQUFTO0lBRTVFLE1BQU1DLE9BQU8sR0FBR3JCLFNBQVMsQ0FBZ0UsQ0FBQyxDQUFFO01BQzFGc0IsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxFQUFFRixlQUFnQixDQUFDO0lBRXBCRyxNQUFNLElBQUlDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFFSixPQUFRLENBQUMsQ0FBQ0ssT0FBTyxDQUFFQyxHQUFHLElBQUk7TUFDL0NKLE1BQU0sSUFBSUEsTUFBTSxDQUFFdEIsY0FBYyxDQUFDMkIsUUFBUSxDQUFFRCxHQUFJLENBQUMsRUFBRyxzQkFBcUJBLEdBQUksNkVBQTZFLENBQUM7SUFDNUosQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDdkIsWUFBWSxHQUFHaUIsT0FBTyxDQUFDQyxXQUFXO0lBRXZDLElBQUksQ0FBQ08sa0JBQWtCLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUNDLGtCQUFrQixDQUFFVCxPQUFRLENBQUM7RUFDcEM7QUFDRjtBQUVBdEIsT0FBTyxDQUFDZ0MsUUFBUSxDQUFFLFVBQVUsRUFBRTdCLFFBQVMsQ0FBQyJ9