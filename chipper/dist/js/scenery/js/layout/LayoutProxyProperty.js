// Copyright 2022, University of Colorado Boulder

/**
 * A Property that takes the value of:
 * - a LayoutProxy with the single connected Trail (if it exists)
 * - null if there are zero or 2+ connected Trails between the two Nodes
 *
 * When defined, this will provide a LayoutProxy for the leafNode within the rootNode's local coordinate frame. This
 * will allow positioning the leafNode within the rootNode's coordinate frame (which is ONLY well-defined when there
 * is exactly one trail between the two).
 *
 * Thus, it will only be defined as a proxy if there is a unique trail between the two Nodes. This is needed for layout
 * work, where often we'll need to provide a proxy IF this condition is true, and NO proxy if it's not (since layout
 * would be ambiguous). E.g. for ManualConstraint, if a Node isn't connected to the root, there's nothing the constraint
 * can do.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { DerivedProperty1 } from '../../../axon/js/DerivedProperty.js';
import { LayoutProxy, scenery, TrailsBetweenProperty, TransformTracker } from '../imports.js';
export default class LayoutProxyProperty extends DerivedProperty1 {
  // This will contain the number of trails connecting our rootNode and leafNode. Our value will be solely based off of
  // this Property's value, and is thus created as a DerivedProperty.

  // Should be set if we provide an onTransformChange callback
  transformTracker = null;

  /**
   * @param rootNode - The root whose local coordinate frame we'll want the proxy to be in
   * @param leafNode - The leaf that we'll create the proxy for
   * @param providedOptions
   */
  constructor(rootNode, leafNode, providedOptions) {
    const trailsBetweenProperty = new TrailsBetweenProperty(rootNode, leafNode);
    super([trailsBetweenProperty], trails => {
      return trails.length === 1 ? LayoutProxy.pool.create(trails[0].copy().removeAncestor()) : null;
    });
    this.trailsBetweenProperty = trailsBetweenProperty;
    this.lazyLink((value, oldValue) => {
      oldValue && oldValue.dispose();
    });
    const onTransformChange = providedOptions?.onTransformChange;
    if (onTransformChange) {
      this.link(proxy => {
        if (this.transformTracker) {
          this.transformTracker.dispose();
          this.transformTracker = null;
        }
        if (proxy) {
          this.transformTracker = new TransformTracker(proxy.trail.copy().addAncestor(rootNode));
          this.transformTracker.addListener(onTransformChange);
        }
      });
    }
  }
  dispose() {
    this.trailsBetweenProperty.dispose();
    this.transformTracker && this.transformTracker.dispose();
    super.dispose();
  }
}
scenery.register('LayoutProxyProperty', LayoutProxyProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkxIiwiTGF5b3V0UHJveHkiLCJzY2VuZXJ5IiwiVHJhaWxzQmV0d2VlblByb3BlcnR5IiwiVHJhbnNmb3JtVHJhY2tlciIsIkxheW91dFByb3h5UHJvcGVydHkiLCJ0cmFuc2Zvcm1UcmFja2VyIiwiY29uc3RydWN0b3IiLCJyb290Tm9kZSIsImxlYWZOb2RlIiwicHJvdmlkZWRPcHRpb25zIiwidHJhaWxzQmV0d2VlblByb3BlcnR5IiwidHJhaWxzIiwibGVuZ3RoIiwicG9vbCIsImNyZWF0ZSIsImNvcHkiLCJyZW1vdmVBbmNlc3RvciIsImxhenlMaW5rIiwidmFsdWUiLCJvbGRWYWx1ZSIsImRpc3Bvc2UiLCJvblRyYW5zZm9ybUNoYW5nZSIsImxpbmsiLCJwcm94eSIsInRyYWlsIiwiYWRkQW5jZXN0b3IiLCJhZGRMaXN0ZW5lciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGF5b3V0UHJveHlQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBQcm9wZXJ0eSB0aGF0IHRha2VzIHRoZSB2YWx1ZSBvZjpcclxuICogLSBhIExheW91dFByb3h5IHdpdGggdGhlIHNpbmdsZSBjb25uZWN0ZWQgVHJhaWwgKGlmIGl0IGV4aXN0cylcclxuICogLSBudWxsIGlmIHRoZXJlIGFyZSB6ZXJvIG9yIDIrIGNvbm5lY3RlZCBUcmFpbHMgYmV0d2VlbiB0aGUgdHdvIE5vZGVzXHJcbiAqXHJcbiAqIFdoZW4gZGVmaW5lZCwgdGhpcyB3aWxsIHByb3ZpZGUgYSBMYXlvdXRQcm94eSBmb3IgdGhlIGxlYWZOb2RlIHdpdGhpbiB0aGUgcm9vdE5vZGUncyBsb2NhbCBjb29yZGluYXRlIGZyYW1lLiBUaGlzXHJcbiAqIHdpbGwgYWxsb3cgcG9zaXRpb25pbmcgdGhlIGxlYWZOb2RlIHdpdGhpbiB0aGUgcm9vdE5vZGUncyBjb29yZGluYXRlIGZyYW1lICh3aGljaCBpcyBPTkxZIHdlbGwtZGVmaW5lZCB3aGVuIHRoZXJlXHJcbiAqIGlzIGV4YWN0bHkgb25lIHRyYWlsIGJldHdlZW4gdGhlIHR3bykuXHJcbiAqXHJcbiAqIFRodXMsIGl0IHdpbGwgb25seSBiZSBkZWZpbmVkIGFzIGEgcHJveHkgaWYgdGhlcmUgaXMgYSB1bmlxdWUgdHJhaWwgYmV0d2VlbiB0aGUgdHdvIE5vZGVzLiBUaGlzIGlzIG5lZWRlZCBmb3IgbGF5b3V0XHJcbiAqIHdvcmssIHdoZXJlIG9mdGVuIHdlJ2xsIG5lZWQgdG8gcHJvdmlkZSBhIHByb3h5IElGIHRoaXMgY29uZGl0aW9uIGlzIHRydWUsIGFuZCBOTyBwcm94eSBpZiBpdCdzIG5vdCAoc2luY2UgbGF5b3V0XHJcbiAqIHdvdWxkIGJlIGFtYmlndW91cykuIEUuZy4gZm9yIE1hbnVhbENvbnN0cmFpbnQsIGlmIGEgTm9kZSBpc24ndCBjb25uZWN0ZWQgdG8gdGhlIHJvb3QsIHRoZXJlJ3Mgbm90aGluZyB0aGUgY29uc3RyYWludFxyXG4gKiBjYW4gZG8uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBEZXJpdmVkUHJvcGVydHkxIH0gZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBMYXlvdXRQcm94eSwgTm9kZSwgc2NlbmVyeSwgVHJhaWwsIFRyYWlsc0JldHdlZW5Qcm9wZXJ0eSwgVHJhbnNmb3JtVHJhY2tlciB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICAvLyBJZiBwcm92aWRlZCwgdGhpcyB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSB0cmFuc2Zvcm0gb2YgdGhlIHByb3h5IGNoYW5nZXNcclxuICBvblRyYW5zZm9ybUNoYW5nZT86ICgpID0+IHZvaWQ7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBMYXlvdXRQcm94eVByb3BlcnR5T3B0aW9ucyA9IFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGF5b3V0UHJveHlQcm9wZXJ0eSBleHRlbmRzIERlcml2ZWRQcm9wZXJ0eTE8TGF5b3V0UHJveHkgfCBudWxsLCBUcmFpbFtdPiB7XHJcblxyXG4gIC8vIFRoaXMgd2lsbCBjb250YWluIHRoZSBudW1iZXIgb2YgdHJhaWxzIGNvbm5lY3Rpbmcgb3VyIHJvb3ROb2RlIGFuZCBsZWFmTm9kZS4gT3VyIHZhbHVlIHdpbGwgYmUgc29sZWx5IGJhc2VkIG9mZiBvZlxyXG4gIC8vIHRoaXMgUHJvcGVydHkncyB2YWx1ZSwgYW5kIGlzIHRodXMgY3JlYXRlZCBhcyBhIERlcml2ZWRQcm9wZXJ0eS5cclxuICBwcml2YXRlIHJlYWRvbmx5IHRyYWlsc0JldHdlZW5Qcm9wZXJ0eTogVHJhaWxzQmV0d2VlblByb3BlcnR5O1xyXG5cclxuICAvLyBTaG91bGQgYmUgc2V0IGlmIHdlIHByb3ZpZGUgYW4gb25UcmFuc2Zvcm1DaGFuZ2UgY2FsbGJhY2tcclxuICBwcml2YXRlIHRyYW5zZm9ybVRyYWNrZXI6IFRyYW5zZm9ybVRyYWNrZXIgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHJvb3ROb2RlIC0gVGhlIHJvb3Qgd2hvc2UgbG9jYWwgY29vcmRpbmF0ZSBmcmFtZSB3ZSdsbCB3YW50IHRoZSBwcm94eSB0byBiZSBpblxyXG4gICAqIEBwYXJhbSBsZWFmTm9kZSAtIFRoZSBsZWFmIHRoYXQgd2UnbGwgY3JlYXRlIHRoZSBwcm94eSBmb3JcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCByb290Tm9kZTogTm9kZSwgbGVhZk5vZGU6IE5vZGUsIHByb3ZpZGVkT3B0aW9ucz86IExheW91dFByb3h5UHJvcGVydHlPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IHRyYWlsc0JldHdlZW5Qcm9wZXJ0eSA9IG5ldyBUcmFpbHNCZXR3ZWVuUHJvcGVydHkoIHJvb3ROb2RlLCBsZWFmTm9kZSApO1xyXG5cclxuICAgIHN1cGVyKCBbIHRyYWlsc0JldHdlZW5Qcm9wZXJ0eSBdLCB0cmFpbHMgPT4ge1xyXG4gICAgICByZXR1cm4gdHJhaWxzLmxlbmd0aCA9PT0gMSA/IExheW91dFByb3h5LnBvb2wuY3JlYXRlKCB0cmFpbHNbIDAgXS5jb3B5KCkucmVtb3ZlQW5jZXN0b3IoKSApIDogbnVsbDtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnRyYWlsc0JldHdlZW5Qcm9wZXJ0eSA9IHRyYWlsc0JldHdlZW5Qcm9wZXJ0eTtcclxuICAgIHRoaXMubGF6eUxpbmsoICggdmFsdWUsIG9sZFZhbHVlICkgPT4ge1xyXG4gICAgICBvbGRWYWx1ZSAmJiBvbGRWYWx1ZS5kaXNwb3NlKCk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgb25UcmFuc2Zvcm1DaGFuZ2UgPSBwcm92aWRlZE9wdGlvbnM/Lm9uVHJhbnNmb3JtQ2hhbmdlO1xyXG4gICAgaWYgKCBvblRyYW5zZm9ybUNoYW5nZSApIHtcclxuICAgICAgdGhpcy5saW5rKCBwcm94eSA9PiB7XHJcbiAgICAgICAgaWYgKCB0aGlzLnRyYW5zZm9ybVRyYWNrZXIgKSB7XHJcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybVRyYWNrZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm1UcmFja2VyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCBwcm94eSApIHtcclxuICAgICAgICAgIHRoaXMudHJhbnNmb3JtVHJhY2tlciA9IG5ldyBUcmFuc2Zvcm1UcmFja2VyKCBwcm94eS50cmFpbCEuY29weSgpLmFkZEFuY2VzdG9yKCByb290Tm9kZSApICk7XHJcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybVRyYWNrZXIuYWRkTGlzdGVuZXIoIG9uVHJhbnNmb3JtQ2hhbmdlICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMudHJhaWxzQmV0d2VlblByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgIHRoaXMudHJhbnNmb3JtVHJhY2tlciAmJiB0aGlzLnRyYW5zZm9ybVRyYWNrZXIuZGlzcG9zZSgpO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdMYXlvdXRQcm94eVByb3BlcnR5JywgTGF5b3V0UHJveHlQcm9wZXJ0eSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLGdCQUFnQixRQUFRLHFDQUFxQztBQUN0RSxTQUFTQyxXQUFXLEVBQVFDLE9BQU8sRUFBU0MscUJBQXFCLEVBQUVDLGdCQUFnQixRQUFRLGVBQWU7QUFTMUcsZUFBZSxNQUFNQyxtQkFBbUIsU0FBU0wsZ0JBQWdCLENBQThCO0VBRTdGO0VBQ0E7O0VBR0E7RUFDUU0sZ0JBQWdCLEdBQTRCLElBQUk7O0VBRXhEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsUUFBYyxFQUFFQyxRQUFjLEVBQUVDLGVBQTRDLEVBQUc7SUFFakcsTUFBTUMscUJBQXFCLEdBQUcsSUFBSVIscUJBQXFCLENBQUVLLFFBQVEsRUFBRUMsUUFBUyxDQUFDO0lBRTdFLEtBQUssQ0FBRSxDQUFFRSxxQkFBcUIsQ0FBRSxFQUFFQyxNQUFNLElBQUk7TUFDMUMsT0FBT0EsTUFBTSxDQUFDQyxNQUFNLEtBQUssQ0FBQyxHQUFHWixXQUFXLENBQUNhLElBQUksQ0FBQ0MsTUFBTSxDQUFFSCxNQUFNLENBQUUsQ0FBQyxDQUFFLENBQUNJLElBQUksQ0FBQyxDQUFDLENBQUNDLGNBQWMsQ0FBQyxDQUFFLENBQUMsR0FBRyxJQUFJO0lBQ3BHLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ04scUJBQXFCLEdBQUdBLHFCQUFxQjtJQUNsRCxJQUFJLENBQUNPLFFBQVEsQ0FBRSxDQUFFQyxLQUFLLEVBQUVDLFFBQVEsS0FBTTtNQUNwQ0EsUUFBUSxJQUFJQSxRQUFRLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUUsQ0FBQztJQUVILE1BQU1DLGlCQUFpQixHQUFHWixlQUFlLEVBQUVZLGlCQUFpQjtJQUM1RCxJQUFLQSxpQkFBaUIsRUFBRztNQUN2QixJQUFJLENBQUNDLElBQUksQ0FBRUMsS0FBSyxJQUFJO1FBQ2xCLElBQUssSUFBSSxDQUFDbEIsZ0JBQWdCLEVBQUc7VUFDM0IsSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQ2UsT0FBTyxDQUFDLENBQUM7VUFDL0IsSUFBSSxDQUFDZixnQkFBZ0IsR0FBRyxJQUFJO1FBQzlCO1FBQ0EsSUFBS2tCLEtBQUssRUFBRztVQUNYLElBQUksQ0FBQ2xCLGdCQUFnQixHQUFHLElBQUlGLGdCQUFnQixDQUFFb0IsS0FBSyxDQUFDQyxLQUFLLENBQUVULElBQUksQ0FBQyxDQUFDLENBQUNVLFdBQVcsQ0FBRWxCLFFBQVMsQ0FBRSxDQUFDO1VBQzNGLElBQUksQ0FBQ0YsZ0JBQWdCLENBQUNxQixXQUFXLENBQUVMLGlCQUFrQixDQUFDO1FBQ3hEO01BQ0YsQ0FBRSxDQUFDO0lBQ0w7RUFDRjtFQUVnQkQsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ1YscUJBQXFCLENBQUNVLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLElBQUksQ0FBQ2YsZ0JBQWdCLElBQUksSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQ2UsT0FBTyxDQUFDLENBQUM7SUFFeEQsS0FBSyxDQUFDQSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFuQixPQUFPLENBQUMwQixRQUFRLENBQUUscUJBQXFCLEVBQUV2QixtQkFBb0IsQ0FBQyJ9