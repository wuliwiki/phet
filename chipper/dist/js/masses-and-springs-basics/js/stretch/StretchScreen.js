// Copyright 2018-2022, University of Colorado Boulder

/**
 * The Stretch screen for Masses and Springs: Basics.
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import MassesAndSpringsModel from '../../../masses-and-springs/js/common/model/MassesAndSpringsModel.js';
import MassesAndSpringsColors from '../../../masses-and-springs/js/common/view/MassesAndSpringsColors.js';
import merge from '../../../phet-core/js/merge.js';
import { Image } from '../../../scenery/js/imports.js';
import stretchScreenIcon_png from '../../images/stretchScreenIcon_png.js';
import massesAndSpringsBasics from '../massesAndSpringsBasics.js';
import MassesAndSpringsBasicsStrings from '../MassesAndSpringsBasicsStrings.js';
import StretchScreenView from './view/StretchScreenView.js';

// image
class StretchScreen extends Screen {
  /**
   * @param {Tandem} tandem
   * @param {Object} [options]
   *
   */
  constructor(tandem, options) {
    options = merge({
      name: MassesAndSpringsBasicsStrings.screen.stretchStringProperty,
      backgroundColorProperty: MassesAndSpringsColors.backgroundProperty,
      homeScreenIcon: new ScreenIcon(new Image(stretchScreenIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    }, options);
    super(() => {
      // Reference for model tandem
      const modelTandem = tandem.createTandem('model');

      // Reference for model used in spring and mass creation
      const model = new MassesAndSpringsModel(modelTandem, options);
      model.addDefaultSprings(modelTandem);
      model.addDefaultMasses(modelTandem);

      // It is intended that the stretch screen have a specific damping
      model.dampingProperty.set(0.7);
      return model;
    }, model => new StretchScreenView(model, tandem.createTandem('view')), options);
  }
}
massesAndSpringsBasics.register('StretchScreen', StretchScreen);
export default StretchScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiTWFzc2VzQW5kU3ByaW5nc01vZGVsIiwiTWFzc2VzQW5kU3ByaW5nc0NvbG9ycyIsIm1lcmdlIiwiSW1hZ2UiLCJzdHJldGNoU2NyZWVuSWNvbl9wbmciLCJtYXNzZXNBbmRTcHJpbmdzQmFzaWNzIiwiTWFzc2VzQW5kU3ByaW5nc0Jhc2ljc1N0cmluZ3MiLCJTdHJldGNoU2NyZWVuVmlldyIsIlN0cmV0Y2hTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwic3RyZXRjaFN0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJiYWNrZ3JvdW5kUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsIm1vZGVsVGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJhZGREZWZhdWx0U3ByaW5ncyIsImFkZERlZmF1bHRNYXNzZXMiLCJkYW1waW5nUHJvcGVydHkiLCJzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN0cmV0Y2hTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIFN0cmV0Y2ggc2NyZWVuIGZvciBNYXNzZXMgYW5kIFNwcmluZ3M6IEJhc2ljcy5cclxuICpcclxuICogQGF1dGhvciBEZW56ZWxsIEJhcm5ldHQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IE1hc3Nlc0FuZFNwcmluZ3NNb2RlbCBmcm9tICcuLi8uLi8uLi9tYXNzZXMtYW5kLXNwcmluZ3MvanMvY29tbW9uL21vZGVsL01hc3Nlc0FuZFNwcmluZ3NNb2RlbC5qcyc7XHJcbmltcG9ydCBNYXNzZXNBbmRTcHJpbmdzQ29sb3JzIGZyb20gJy4uLy4uLy4uL21hc3Nlcy1hbmQtc3ByaW5ncy9qcy9jb21tb24vdmlldy9NYXNzZXNBbmRTcHJpbmdzQ29sb3JzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHN0cmV0Y2hTY3JlZW5JY29uX3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvc3RyZXRjaFNjcmVlbkljb25fcG5nLmpzJztcclxuaW1wb3J0IG1hc3Nlc0FuZFNwcmluZ3NCYXNpY3MgZnJvbSAnLi4vbWFzc2VzQW5kU3ByaW5nc0Jhc2ljcy5qcyc7XHJcbmltcG9ydCBNYXNzZXNBbmRTcHJpbmdzQmFzaWNzU3RyaW5ncyBmcm9tICcuLi9NYXNzZXNBbmRTcHJpbmdzQmFzaWNzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBTdHJldGNoU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvU3RyZXRjaFNjcmVlblZpZXcuanMnO1xyXG5cclxuLy8gaW1hZ2VcclxuY2xhc3MgU3RyZXRjaFNjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0sIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG5hbWU6IE1hc3Nlc0FuZFNwcmluZ3NCYXNpY3NTdHJpbmdzLnNjcmVlbi5zdHJldGNoU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBNYXNzZXNBbmRTcHJpbmdzQ29sb3JzLmJhY2tncm91bmRQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgSW1hZ2UoIHN0cmV0Y2hTY3JlZW5JY29uX3BuZyApLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9ICksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoICgpID0+IHtcclxuXHJcbiAgICAgICAgLy8gUmVmZXJlbmNlIGZvciBtb2RlbCB0YW5kZW1cclxuICAgICAgICBjb25zdCBtb2RlbFRhbmRlbSA9IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKTtcclxuXHJcbiAgICAgICAgLy8gUmVmZXJlbmNlIGZvciBtb2RlbCB1c2VkIGluIHNwcmluZyBhbmQgbWFzcyBjcmVhdGlvblxyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IE1hc3Nlc0FuZFNwcmluZ3NNb2RlbCggbW9kZWxUYW5kZW0sIG9wdGlvbnMgKTtcclxuICAgICAgICBtb2RlbC5hZGREZWZhdWx0U3ByaW5ncyggbW9kZWxUYW5kZW0gKTtcclxuICAgICAgICBtb2RlbC5hZGREZWZhdWx0TWFzc2VzKCBtb2RlbFRhbmRlbSApO1xyXG5cclxuICAgICAgICAvLyBJdCBpcyBpbnRlbmRlZCB0aGF0IHRoZSBzdHJldGNoIHNjcmVlbiBoYXZlIGEgc3BlY2lmaWMgZGFtcGluZ1xyXG4gICAgICAgIG1vZGVsLmRhbXBpbmdQcm9wZXJ0eS5zZXQoIDAuNyApO1xyXG4gICAgICAgIHJldHVybiBtb2RlbDtcclxuICAgICAgfSxcclxuICAgICAgbW9kZWwgPT4gbmV3IFN0cmV0Y2hTY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbm1hc3Nlc0FuZFNwcmluZ3NCYXNpY3MucmVnaXN0ZXIoICdTdHJldGNoU2NyZWVuJywgU3RyZXRjaFNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBTdHJldGNoU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsT0FBT0MscUJBQXFCLE1BQU0sc0VBQXNFO0FBQ3hHLE9BQU9DLHNCQUFzQixNQUFNLHNFQUFzRTtBQUN6RyxPQUFPQyxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MscUJBQXFCLE1BQU0sdUNBQXVDO0FBQ3pFLE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyw2QkFBNkIsTUFBTSxxQ0FBcUM7QUFDL0UsT0FBT0MsaUJBQWlCLE1BQU0sNkJBQTZCOztBQUUzRDtBQUNBLE1BQU1DLGFBQWEsU0FBU1YsTUFBTSxDQUFDO0VBQ2pDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRVcsV0FBV0EsQ0FBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUc7SUFFN0JBLE9BQU8sR0FBR1QsS0FBSyxDQUFFO01BQ2ZVLElBQUksRUFBRU4sNkJBQTZCLENBQUNPLE1BQU0sQ0FBQ0MscUJBQXFCO01BQ2hFQyx1QkFBdUIsRUFBRWQsc0JBQXNCLENBQUNlLGtCQUFrQjtNQUNsRUMsY0FBYyxFQUFFLElBQUlsQixVQUFVLENBQUUsSUFBSUksS0FBSyxDQUFFQyxxQkFBc0IsQ0FBQyxFQUFFO1FBQ2xFYyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSFQsTUFBTSxFQUFFQTtJQUNWLENBQUMsRUFBRUMsT0FBUSxDQUFDO0lBRVosS0FBSyxDQUFFLE1BQU07TUFFVDtNQUNBLE1BQU1TLFdBQVcsR0FBR1YsTUFBTSxDQUFDVyxZQUFZLENBQUUsT0FBUSxDQUFDOztNQUVsRDtNQUNBLE1BQU1DLEtBQUssR0FBRyxJQUFJdEIscUJBQXFCLENBQUVvQixXQUFXLEVBQUVULE9BQVEsQ0FBQztNQUMvRFcsS0FBSyxDQUFDQyxpQkFBaUIsQ0FBRUgsV0FBWSxDQUFDO01BQ3RDRSxLQUFLLENBQUNFLGdCQUFnQixDQUFFSixXQUFZLENBQUM7O01BRXJDO01BQ0FFLEtBQUssQ0FBQ0csZUFBZSxDQUFDQyxHQUFHLENBQUUsR0FBSSxDQUFDO01BQ2hDLE9BQU9KLEtBQUs7SUFDZCxDQUFDLEVBQ0RBLEtBQUssSUFBSSxJQUFJZixpQkFBaUIsQ0FBRWUsS0FBSyxFQUFFWixNQUFNLENBQUNXLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUN0RVYsT0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBTixzQkFBc0IsQ0FBQ3NCLFFBQVEsQ0FBRSxlQUFlLEVBQUVuQixhQUFjLENBQUM7QUFDakUsZUFBZUEsYUFBYSJ9