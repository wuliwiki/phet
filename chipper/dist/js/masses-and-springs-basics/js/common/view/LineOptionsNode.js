// Copyright 2018-2023, University of Colorado Boulder

/**
 * Panel that manages the visibility of reference lines.
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 */

import MassesAndSpringsConstants from '../../../../masses-and-springs/js/common/MassesAndSpringsConstants.js';
import MassesAndSpringsStrings from '../../../../masses-and-springs/js/MassesAndSpringsStrings.js';
import merge from '../../../../phet-core/js/merge.js';
import { AlignBox, AlignGroup, HBox, Node, Text, VBox } from '../../../../scenery/js/imports.js';
import VerticalCheckboxGroup from '../../../../sun/js/VerticalCheckboxGroup.js';
import massesAndSpringsBasics from '../../massesAndSpringsBasics.js';
import MassesAndSpringsBasicsStrings from '../../MassesAndSpringsBasicsStrings.js';
const movableLineString = MassesAndSpringsStrings.movableLine;
const restingPositionString = MassesAndSpringsBasicsStrings.restingPosition;
const unstretchedLengthString = MassesAndSpringsBasicsStrings.unstretchedLength;

// constants
const CONTENT_MAX_WIDTH = 122;
const DEFAULT_CONTENT_SPACING = 155;
class LineOptionsNode extends Node {
  /**
   * @param {MassesAndSpringsModel} model
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(model, tandem, options) {
    options = merge({
      fill: MassesAndSpringsConstants.PANEL_FILL,
      tandem: tandem.createTandem('lineOptionsPanel'),
      minWidth: MassesAndSpringsConstants.PANEL_MIN_WIDTH + 10,
      enablePeriodTrace: false
    }, options);
    super(options);

    // Lines added for reference in panel
    const greenLine = MassesAndSpringsConstants.CREATE_LINE_ICON('rgb(0, 180, 0)');
    const blueLine = MassesAndSpringsConstants.CREATE_LINE_ICON('rgb( 65, 66, 232 )');
    const redLine = MassesAndSpringsConstants.CREATE_LINE_ICON('rgb( 255, 0, 0 )');

    // Used for checkbox texts
    const alignGroup = new AlignGroup({
      matchVertical: false
    });

    // Alignbox for unstretched length line Text
    const unstretchedLengthAlignBox = new AlignBox(new Text(unstretchedLengthString, {
      font: MassesAndSpringsConstants.TITLE_FONT,
      maxWidth: CONTENT_MAX_WIDTH,
      tandem: tandem.createTandem('unstretchedLengthText')
    }), {
      xAlign: 'left',
      group: alignGroup
    });

    // Alignbox for movable line Text
    const movableLineAlignBox = new AlignBox(new Text(movableLineString, {
      font: MassesAndSpringsConstants.TITLE_FONT,
      maxWidth: CONTENT_MAX_WIDTH,
      tandem: tandem.createTandem('movableLineText')
    }), {
      xAlign: 'left',
      group: alignGroup
    });

    // Alignbox for resting position line  Text
    const restingPositionAlignBox = new AlignBox(new Text(restingPositionString, {
      font: MassesAndSpringsConstants.TITLE_FONT,
      maxWidth: CONTENT_MAX_WIDTH,
      tandem: tandem.createTandem('restingPositionText')
    }), {
      xAlign: 'left',
      group: alignGroup
    });

    // Max width must be set to the maxWidth of the alignGroup based on its content.
    const contentSpacing = DEFAULT_CONTENT_SPACING - alignGroup.getMaxWidth();

    // Checkbox group for line options
    const lineOptionsCheckboxGroup = new VerticalCheckboxGroup([{
      createNode: () => new HBox({
        children: [unstretchedLengthAlignBox, blueLine],
        spacing: contentSpacing
      }),
      property: model.naturalLengthVisibleProperty
    }, {
      createNode: () => new HBox({
        children: [restingPositionAlignBox, greenLine],
        spacing: contentSpacing
      }),
      property: model.equilibriumPositionVisibleProperty
    }, {
      createNode: () => new HBox({
        children: [movableLineAlignBox, redLine],
        spacing: contentSpacing
      }),
      property: model.movableLineVisibleProperty
    }], {
      checkboxOptions: {
        boxWidth: 16,
        spacing: 8
      },
      tandem: tandem.createTandem('lineOptionsCheckboxGroup')
    });
    const lineOptionsControlsVBox = new VBox({
      children: [lineOptionsCheckboxGroup],
      align: 'left',
      tandem: tandem.createTandem('lineOptionsControlsVBox')
    });
    this.addChild(lineOptionsControlsVBox);
  }
}
massesAndSpringsBasics.register('LineOptionsNode', LineOptionsNode);
export default LineOptionsNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzIiwiTWFzc2VzQW5kU3ByaW5nc1N0cmluZ3MiLCJtZXJnZSIsIkFsaWduQm94IiwiQWxpZ25Hcm91cCIsIkhCb3giLCJOb2RlIiwiVGV4dCIsIlZCb3giLCJWZXJ0aWNhbENoZWNrYm94R3JvdXAiLCJtYXNzZXNBbmRTcHJpbmdzQmFzaWNzIiwiTWFzc2VzQW5kU3ByaW5nc0Jhc2ljc1N0cmluZ3MiLCJtb3ZhYmxlTGluZVN0cmluZyIsIm1vdmFibGVMaW5lIiwicmVzdGluZ1Bvc2l0aW9uU3RyaW5nIiwicmVzdGluZ1Bvc2l0aW9uIiwidW5zdHJldGNoZWRMZW5ndGhTdHJpbmciLCJ1bnN0cmV0Y2hlZExlbmd0aCIsIkNPTlRFTlRfTUFYX1dJRFRIIiwiREVGQVVMVF9DT05URU5UX1NQQUNJTkciLCJMaW5lT3B0aW9uc05vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidGFuZGVtIiwib3B0aW9ucyIsImZpbGwiLCJQQU5FTF9GSUxMIiwiY3JlYXRlVGFuZGVtIiwibWluV2lkdGgiLCJQQU5FTF9NSU5fV0lEVEgiLCJlbmFibGVQZXJpb2RUcmFjZSIsImdyZWVuTGluZSIsIkNSRUFURV9MSU5FX0lDT04iLCJibHVlTGluZSIsInJlZExpbmUiLCJhbGlnbkdyb3VwIiwibWF0Y2hWZXJ0aWNhbCIsInVuc3RyZXRjaGVkTGVuZ3RoQWxpZ25Cb3giLCJmb250IiwiVElUTEVfRk9OVCIsIm1heFdpZHRoIiwieEFsaWduIiwiZ3JvdXAiLCJtb3ZhYmxlTGluZUFsaWduQm94IiwicmVzdGluZ1Bvc2l0aW9uQWxpZ25Cb3giLCJjb250ZW50U3BhY2luZyIsImdldE1heFdpZHRoIiwibGluZU9wdGlvbnNDaGVja2JveEdyb3VwIiwiY3JlYXRlTm9kZSIsImNoaWxkcmVuIiwic3BhY2luZyIsInByb3BlcnR5IiwibmF0dXJhbExlbmd0aFZpc2libGVQcm9wZXJ0eSIsImVxdWlsaWJyaXVtUG9zaXRpb25WaXNpYmxlUHJvcGVydHkiLCJtb3ZhYmxlTGluZVZpc2libGVQcm9wZXJ0eSIsImNoZWNrYm94T3B0aW9ucyIsImJveFdpZHRoIiwibGluZU9wdGlvbnNDb250cm9sc1ZCb3giLCJhbGlnbiIsImFkZENoaWxkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMaW5lT3B0aW9uc05vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGFuZWwgdGhhdCBtYW5hZ2VzIHRoZSB2aXNpYmlsaXR5IG9mIHJlZmVyZW5jZSBsaW5lcy5cclxuICpcclxuICogQGF1dGhvciBEZW56ZWxsIEJhcm5ldHQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vLi4vbWFzc2VzLWFuZC1zcHJpbmdzL2pzL2NvbW1vbi9NYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IE1hc3Nlc0FuZFNwcmluZ3NTdHJpbmdzIGZyb20gJy4uLy4uLy4uLy4uL21hc3Nlcy1hbmQtc3ByaW5ncy9qcy9NYXNzZXNBbmRTcHJpbmdzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBBbGlnbkJveCwgQWxpZ25Hcm91cCwgSEJveCwgTm9kZSwgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBWZXJ0aWNhbENoZWNrYm94R3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1ZlcnRpY2FsQ2hlY2tib3hHcm91cC5qcyc7XHJcbmltcG9ydCBtYXNzZXNBbmRTcHJpbmdzQmFzaWNzIGZyb20gJy4uLy4uL21hc3Nlc0FuZFNwcmluZ3NCYXNpY3MuanMnO1xyXG5pbXBvcnQgTWFzc2VzQW5kU3ByaW5nc0Jhc2ljc1N0cmluZ3MgZnJvbSAnLi4vLi4vTWFzc2VzQW5kU3ByaW5nc0Jhc2ljc1N0cmluZ3MuanMnO1xyXG5cclxuY29uc3QgbW92YWJsZUxpbmVTdHJpbmcgPSBNYXNzZXNBbmRTcHJpbmdzU3RyaW5ncy5tb3ZhYmxlTGluZTtcclxuY29uc3QgcmVzdGluZ1Bvc2l0aW9uU3RyaW5nID0gTWFzc2VzQW5kU3ByaW5nc0Jhc2ljc1N0cmluZ3MucmVzdGluZ1Bvc2l0aW9uO1xyXG5jb25zdCB1bnN0cmV0Y2hlZExlbmd0aFN0cmluZyA9IE1hc3Nlc0FuZFNwcmluZ3NCYXNpY3NTdHJpbmdzLnVuc3RyZXRjaGVkTGVuZ3RoO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IENPTlRFTlRfTUFYX1dJRFRIID0gMTIyO1xyXG5jb25zdCBERUZBVUxUX0NPTlRFTlRfU1BBQ0lORyA9IDE1NTtcclxuXHJcbmNsYXNzIExpbmVPcHRpb25zTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge01hc3Nlc0FuZFNwcmluZ3NNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgdGFuZGVtLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBmaWxsOiBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLlBBTkVMX0ZJTEwsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xpbmVPcHRpb25zUGFuZWwnICksXHJcbiAgICAgIG1pbldpZHRoOiBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLlBBTkVMX01JTl9XSURUSCArIDEwLFxyXG4gICAgICBlbmFibGVQZXJpb2RUcmFjZTogZmFsc2VcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIExpbmVzIGFkZGVkIGZvciByZWZlcmVuY2UgaW4gcGFuZWxcclxuICAgIGNvbnN0IGdyZWVuTGluZSA9IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMuQ1JFQVRFX0xJTkVfSUNPTiggJ3JnYigwLCAxODAsIDApJyApO1xyXG4gICAgY29uc3QgYmx1ZUxpbmUgPSBNYXNzZXNBbmRTcHJpbmdzQ29uc3RhbnRzLkNSRUFURV9MSU5FX0lDT04oICdyZ2IoIDY1LCA2NiwgMjMyICknICk7XHJcbiAgICBjb25zdCByZWRMaW5lID0gTWFzc2VzQW5kU3ByaW5nc0NvbnN0YW50cy5DUkVBVEVfTElORV9JQ09OKCAncmdiKCAyNTUsIDAsIDAgKScgKTtcclxuXHJcbiAgICAvLyBVc2VkIGZvciBjaGVja2JveCB0ZXh0c1xyXG4gICAgY29uc3QgYWxpZ25Hcm91cCA9IG5ldyBBbGlnbkdyb3VwKCB7IG1hdGNoVmVydGljYWw6IGZhbHNlIH0gKTtcclxuXHJcbiAgICAvLyBBbGlnbmJveCBmb3IgdW5zdHJldGNoZWQgbGVuZ3RoIGxpbmUgVGV4dFxyXG4gICAgY29uc3QgdW5zdHJldGNoZWRMZW5ndGhBbGlnbkJveCA9IG5ldyBBbGlnbkJveCggbmV3IFRleHQoIHVuc3RyZXRjaGVkTGVuZ3RoU3RyaW5nLCB7XHJcbiAgICAgIGZvbnQ6IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMuVElUTEVfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IENPTlRFTlRfTUFYX1dJRFRILFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd1bnN0cmV0Y2hlZExlbmd0aFRleHQnIClcclxuICAgIH0gKSwgeyB4QWxpZ246ICdsZWZ0JywgZ3JvdXA6IGFsaWduR3JvdXAgfSApO1xyXG5cclxuICAgIC8vIEFsaWduYm94IGZvciBtb3ZhYmxlIGxpbmUgVGV4dFxyXG4gICAgY29uc3QgbW92YWJsZUxpbmVBbGlnbkJveCA9IG5ldyBBbGlnbkJveCggbmV3IFRleHQoIG1vdmFibGVMaW5lU3RyaW5nLCB7XHJcbiAgICAgIGZvbnQ6IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMuVElUTEVfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IENPTlRFTlRfTUFYX1dJRFRILFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb3ZhYmxlTGluZVRleHQnIClcclxuICAgIH0gKSwgeyB4QWxpZ246ICdsZWZ0JywgZ3JvdXA6IGFsaWduR3JvdXAgfSApO1xyXG5cclxuICAgIC8vIEFsaWduYm94IGZvciByZXN0aW5nIHBvc2l0aW9uIGxpbmUgIFRleHRcclxuICAgIGNvbnN0IHJlc3RpbmdQb3NpdGlvbkFsaWduQm94ID0gbmV3IEFsaWduQm94KCBuZXcgVGV4dCggcmVzdGluZ1Bvc2l0aW9uU3RyaW5nLCB7XHJcbiAgICAgIGZvbnQ6IE1hc3Nlc0FuZFNwcmluZ3NDb25zdGFudHMuVElUTEVfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IENPTlRFTlRfTUFYX1dJRFRILFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdyZXN0aW5nUG9zaXRpb25UZXh0JyApXHJcbiAgICB9ICksIHsgeEFsaWduOiAnbGVmdCcsIGdyb3VwOiBhbGlnbkdyb3VwIH0gKTtcclxuXHJcbiAgICAvLyBNYXggd2lkdGggbXVzdCBiZSBzZXQgdG8gdGhlIG1heFdpZHRoIG9mIHRoZSBhbGlnbkdyb3VwIGJhc2VkIG9uIGl0cyBjb250ZW50LlxyXG4gICAgY29uc3QgY29udGVudFNwYWNpbmcgPSBERUZBVUxUX0NPTlRFTlRfU1BBQ0lORyAtIGFsaWduR3JvdXAuZ2V0TWF4V2lkdGgoKTtcclxuXHJcbiAgICAvLyBDaGVja2JveCBncm91cCBmb3IgbGluZSBvcHRpb25zXHJcbiAgICBjb25zdCBsaW5lT3B0aW9uc0NoZWNrYm94R3JvdXAgPSBuZXcgVmVydGljYWxDaGVja2JveEdyb3VwKCBbIHtcclxuICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IEhCb3goIHsgY2hpbGRyZW46IFsgdW5zdHJldGNoZWRMZW5ndGhBbGlnbkJveCwgYmx1ZUxpbmUgXSwgc3BhY2luZzogY29udGVudFNwYWNpbmcgfSApLFxyXG4gICAgICBwcm9wZXJ0eTogbW9kZWwubmF0dXJhbExlbmd0aFZpc2libGVQcm9wZXJ0eVxyXG4gICAgfSwge1xyXG4gICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgSEJveCggeyBjaGlsZHJlbjogWyByZXN0aW5nUG9zaXRpb25BbGlnbkJveCwgZ3JlZW5MaW5lIF0sIHNwYWNpbmc6IGNvbnRlbnRTcGFjaW5nIH0gKSxcclxuICAgICAgcHJvcGVydHk6IG1vZGVsLmVxdWlsaWJyaXVtUG9zaXRpb25WaXNpYmxlUHJvcGVydHlcclxuICAgIH0sIHtcclxuICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IEhCb3goIHsgY2hpbGRyZW46IFsgbW92YWJsZUxpbmVBbGlnbkJveCwgcmVkTGluZSBdLCBzcGFjaW5nOiBjb250ZW50U3BhY2luZyB9ICksXHJcbiAgICAgIHByb3BlcnR5OiBtb2RlbC5tb3ZhYmxlTGluZVZpc2libGVQcm9wZXJ0eVxyXG4gICAgfSBdLCB7XHJcbiAgICAgIGNoZWNrYm94T3B0aW9uczoge1xyXG4gICAgICAgIGJveFdpZHRoOiAxNixcclxuICAgICAgICBzcGFjaW5nOiA4XHJcbiAgICAgIH0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xpbmVPcHRpb25zQ2hlY2tib3hHcm91cCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGxpbmVPcHRpb25zQ29udHJvbHNWQm94ID0gbmV3IFZCb3goIHtcclxuICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgbGluZU9wdGlvbnNDaGVja2JveEdyb3VwXHJcbiAgICAgICAgXSxcclxuICAgICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xpbmVPcHRpb25zQ29udHJvbHNWQm94JyApXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBsaW5lT3B0aW9uc0NvbnRyb2xzVkJveCApO1xyXG4gIH1cclxufVxyXG5cclxubWFzc2VzQW5kU3ByaW5nc0Jhc2ljcy5yZWdpc3RlciggJ0xpbmVPcHRpb25zTm9kZScsIExpbmVPcHRpb25zTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBMaW5lT3B0aW9uc05vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHlCQUF5QixNQUFNLHVFQUF1RTtBQUM3RyxPQUFPQyx1QkFBdUIsTUFBTSw4REFBOEQ7QUFDbEcsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNoRyxPQUFPQyxxQkFBcUIsTUFBTSw2Q0FBNkM7QUFDL0UsT0FBT0Msc0JBQXNCLE1BQU0saUNBQWlDO0FBQ3BFLE9BQU9DLDZCQUE2QixNQUFNLHdDQUF3QztBQUVsRixNQUFNQyxpQkFBaUIsR0FBR1gsdUJBQXVCLENBQUNZLFdBQVc7QUFDN0QsTUFBTUMscUJBQXFCLEdBQUdILDZCQUE2QixDQUFDSSxlQUFlO0FBQzNFLE1BQU1DLHVCQUF1QixHQUFHTCw2QkFBNkIsQ0FBQ00saUJBQWlCOztBQUUvRTtBQUNBLE1BQU1DLGlCQUFpQixHQUFHLEdBQUc7QUFDN0IsTUFBTUMsdUJBQXVCLEdBQUcsR0FBRztBQUVuQyxNQUFNQyxlQUFlLFNBQVNkLElBQUksQ0FBQztFQUVqQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VlLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUc7SUFFcENBLE9BQU8sR0FBR3RCLEtBQUssQ0FBRTtNQUNmdUIsSUFBSSxFQUFFekIseUJBQXlCLENBQUMwQixVQUFVO01BQzFDSCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0ksWUFBWSxDQUFFLGtCQUFtQixDQUFDO01BQ2pEQyxRQUFRLEVBQUU1Qix5QkFBeUIsQ0FBQzZCLGVBQWUsR0FBRyxFQUFFO01BQ3hEQyxpQkFBaUIsRUFBRTtJQUNyQixDQUFDLEVBQUVOLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUEsT0FBUSxDQUFDOztJQUVoQjtJQUNBLE1BQU1PLFNBQVMsR0FBRy9CLHlCQUF5QixDQUFDZ0MsZ0JBQWdCLENBQUUsZ0JBQWlCLENBQUM7SUFDaEYsTUFBTUMsUUFBUSxHQUFHakMseUJBQXlCLENBQUNnQyxnQkFBZ0IsQ0FBRSxvQkFBcUIsQ0FBQztJQUNuRixNQUFNRSxPQUFPLEdBQUdsQyx5QkFBeUIsQ0FBQ2dDLGdCQUFnQixDQUFFLGtCQUFtQixDQUFDOztJQUVoRjtJQUNBLE1BQU1HLFVBQVUsR0FBRyxJQUFJL0IsVUFBVSxDQUFFO01BQUVnQyxhQUFhLEVBQUU7SUFBTSxDQUFFLENBQUM7O0lBRTdEO0lBQ0EsTUFBTUMseUJBQXlCLEdBQUcsSUFBSWxDLFFBQVEsQ0FBRSxJQUFJSSxJQUFJLENBQUVTLHVCQUF1QixFQUFFO01BQ2pGc0IsSUFBSSxFQUFFdEMseUJBQXlCLENBQUN1QyxVQUFVO01BQzFDQyxRQUFRLEVBQUV0QixpQkFBaUI7TUFDM0JLLE1BQU0sRUFBRUEsTUFBTSxDQUFDSSxZQUFZLENBQUUsdUJBQXdCO0lBQ3ZELENBQUUsQ0FBQyxFQUFFO01BQUVjLE1BQU0sRUFBRSxNQUFNO01BQUVDLEtBQUssRUFBRVA7SUFBVyxDQUFFLENBQUM7O0lBRTVDO0lBQ0EsTUFBTVEsbUJBQW1CLEdBQUcsSUFBSXhDLFFBQVEsQ0FBRSxJQUFJSSxJQUFJLENBQUVLLGlCQUFpQixFQUFFO01BQ3JFMEIsSUFBSSxFQUFFdEMseUJBQXlCLENBQUN1QyxVQUFVO01BQzFDQyxRQUFRLEVBQUV0QixpQkFBaUI7TUFDM0JLLE1BQU0sRUFBRUEsTUFBTSxDQUFDSSxZQUFZLENBQUUsaUJBQWtCO0lBQ2pELENBQUUsQ0FBQyxFQUFFO01BQUVjLE1BQU0sRUFBRSxNQUFNO01BQUVDLEtBQUssRUFBRVA7SUFBVyxDQUFFLENBQUM7O0lBRTVDO0lBQ0EsTUFBTVMsdUJBQXVCLEdBQUcsSUFBSXpDLFFBQVEsQ0FBRSxJQUFJSSxJQUFJLENBQUVPLHFCQUFxQixFQUFFO01BQzdFd0IsSUFBSSxFQUFFdEMseUJBQXlCLENBQUN1QyxVQUFVO01BQzFDQyxRQUFRLEVBQUV0QixpQkFBaUI7TUFDM0JLLE1BQU0sRUFBRUEsTUFBTSxDQUFDSSxZQUFZLENBQUUscUJBQXNCO0lBQ3JELENBQUUsQ0FBQyxFQUFFO01BQUVjLE1BQU0sRUFBRSxNQUFNO01BQUVDLEtBQUssRUFBRVA7SUFBVyxDQUFFLENBQUM7O0lBRTVDO0lBQ0EsTUFBTVUsY0FBYyxHQUFHMUIsdUJBQXVCLEdBQUdnQixVQUFVLENBQUNXLFdBQVcsQ0FBQyxDQUFDOztJQUV6RTtJQUNBLE1BQU1DLHdCQUF3QixHQUFHLElBQUl0QyxxQkFBcUIsQ0FBRSxDQUFFO01BQzVEdUMsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSTNDLElBQUksQ0FBRTtRQUFFNEMsUUFBUSxFQUFFLENBQUVaLHlCQUF5QixFQUFFSixRQUFRLENBQUU7UUFBRWlCLE9BQU8sRUFBRUw7TUFBZSxDQUFFLENBQUM7TUFDNUdNLFFBQVEsRUFBRTdCLEtBQUssQ0FBQzhCO0lBQ2xCLENBQUMsRUFBRTtNQUNESixVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJM0MsSUFBSSxDQUFFO1FBQUU0QyxRQUFRLEVBQUUsQ0FBRUwsdUJBQXVCLEVBQUViLFNBQVMsQ0FBRTtRQUFFbUIsT0FBTyxFQUFFTDtNQUFlLENBQUUsQ0FBQztNQUMzR00sUUFBUSxFQUFFN0IsS0FBSyxDQUFDK0I7SUFDbEIsQ0FBQyxFQUFFO01BQ0RMLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUkzQyxJQUFJLENBQUU7UUFBRTRDLFFBQVEsRUFBRSxDQUFFTixtQkFBbUIsRUFBRVQsT0FBTyxDQUFFO1FBQUVnQixPQUFPLEVBQUVMO01BQWUsQ0FBRSxDQUFDO01BQ3JHTSxRQUFRLEVBQUU3QixLQUFLLENBQUNnQztJQUNsQixDQUFDLENBQUUsRUFBRTtNQUNIQyxlQUFlLEVBQUU7UUFDZkMsUUFBUSxFQUFFLEVBQUU7UUFDWk4sT0FBTyxFQUFFO01BQ1gsQ0FBQztNQUNEM0IsTUFBTSxFQUFFQSxNQUFNLENBQUNJLFlBQVksQ0FBRSwwQkFBMkI7SUFDMUQsQ0FBRSxDQUFDO0lBRUgsTUFBTThCLHVCQUF1QixHQUFHLElBQUlqRCxJQUFJLENBQUU7TUFDdEN5QyxRQUFRLEVBQUUsQ0FDUkYsd0JBQXdCLENBQ3pCO01BQ0RXLEtBQUssRUFBRSxNQUFNO01BQ2JuQyxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0ksWUFBWSxDQUFFLHlCQUEwQjtJQUN6RCxDQUNGLENBQUM7SUFDRCxJQUFJLENBQUNnQyxRQUFRLENBQUVGLHVCQUF3QixDQUFDO0VBQzFDO0FBQ0Y7QUFFQS9DLHNCQUFzQixDQUFDa0QsUUFBUSxDQUFFLGlCQUFpQixFQUFFeEMsZUFBZ0IsQ0FBQztBQUNyRSxlQUFlQSxlQUFlIn0=