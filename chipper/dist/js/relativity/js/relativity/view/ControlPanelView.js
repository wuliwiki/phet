// Copyright 2019-2023, University of Colorado Boulder

/**
 * GraphControlPanel is the base class for graph control panels. These panels contain controls that affect the graph.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import { HBox, Text, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import BooleanProperty from "../../../../axon/js/BooleanProperty.js";
import ABSwitch from "../../../../sun/js/ABSwitch.js";
import HSlider from "../../../../sun/js/HSlider.js";
import NumberProperty from "../../../../axon/js/NumberProperty.js";
import Range from "../../../../dot/js/Range.js";
import PlayPauseButton from "../../../../scenery-phet/js/buttons/PlayPauseButton.js";
export default class ControlPanelView extends Panel {
  isPlaying = false;
  velocity = 0;
  aChecked = true;

  /**
   * @param {Node[]} children
   * @param {Object} [options]
   */
  constructor(options) {
    options = merge({
      cornerRadius: 5,
      xMargin: 9,
      yMargin: 10,
      stroke: 'rgb( 190, 190, 190 )',
      fill: 'rgb( 240, 240, 240 )'
    }, options);
    const textA = new Text("在A参考系观察", {
      fontSize: 22
    });
    const textB = new Text("在B参考系观察", {
      fontSize: 22
    });
    const textC = new Text("B相对A速度（-0.99c~0.99c）", {
      fontSize: 22
    });
    const aChecked = new BooleanProperty(true);
    const abSwitch = new ABSwitch(aChecked, true, textA, false, textB);
    const v = new NumberProperty(0);
    const slider = new HSlider(v, new Range(-0.99, 0.99), {});
    const vBox = new VBox({
      children: [textC, slider]
    });
    const isPlaying = new BooleanProperty(false);
    const btn3 = new PlayPauseButton(isPlaying);
    const content = new HBox({
      spacing: 50,
      children: [abSwitch, vBox, btn3]
    });
    super(content, options);
    aChecked.link(property => {
      this.aChecked = property;
    });
    isPlaying.link(property => {
      this.isPlaying = property;
    });
    v.link(property => {
      this.velocity = property;
      textC.setString("B相对A速度: " + property.toFixed(2) + "c");
    });
  }

  /**
   * @public
   * @override
   */
  /*dispose() {
    assert && assert( false, 'GraphControlPanel is not intended to be disposed' );
  }*/
}

//relativity.register( 'ControlPanelView', ControlPanelView );
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkhCb3giLCJUZXh0IiwiVkJveCIsIlBhbmVsIiwiQm9vbGVhblByb3BlcnR5IiwiQUJTd2l0Y2giLCJIU2xpZGVyIiwiTnVtYmVyUHJvcGVydHkiLCJSYW5nZSIsIlBsYXlQYXVzZUJ1dHRvbiIsIkNvbnRyb2xQYW5lbFZpZXciLCJpc1BsYXlpbmciLCJ2ZWxvY2l0eSIsImFDaGVja2VkIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiY29ybmVyUmFkaXVzIiwieE1hcmdpbiIsInlNYXJnaW4iLCJzdHJva2UiLCJmaWxsIiwidGV4dEEiLCJmb250U2l6ZSIsInRleHRCIiwidGV4dEMiLCJhYlN3aXRjaCIsInYiLCJzbGlkZXIiLCJ2Qm94IiwiY2hpbGRyZW4iLCJidG4zIiwiY29udGVudCIsInNwYWNpbmciLCJsaW5rIiwicHJvcGVydHkiLCJzZXRTdHJpbmciLCJ0b0ZpeGVkIl0sInNvdXJjZXMiOlsiQ29udHJvbFBhbmVsVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHcmFwaENvbnRyb2xQYW5lbCBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgZ3JhcGggY29udHJvbCBwYW5lbHMuIFRoZXNlIHBhbmVscyBjb250YWluIGNvbnRyb2xzIHRoYXQgYWZmZWN0IHRoZSBncmFwaC5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7QWxpZ25Cb3gsIEhCb3gsIE5vZGUsIFRleHQsIFZCb3h9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgcmVsYXRpdml0eSBmcm9tIFwiLi4vLi4vcmVsYXRpdml0eS5qc1wiO1xyXG5pbXBvcnQgWEF4aXNWaWV3IGZyb20gXCIuL1hBeGlzVmlldy5qc1wiO1xyXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSBcIi4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qc1wiO1xyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gXCIuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qc1wiO1xyXG5pbXBvcnQgTWF0aFN5bWJvbEZvbnQgZnJvbSBcIi4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9NYXRoU3ltYm9sRm9udC5qc1wiO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSBcIi4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qc1wiO1xyXG5pbXBvcnQgQUJTd2l0Y2ggZnJvbSBcIi4uLy4uLy4uLy4uL3N1bi9qcy9BQlN3aXRjaC5qc1wiO1xyXG5pbXBvcnQgSFNsaWRlciBmcm9tIFwiLi4vLi4vLi4vLi4vc3VuL2pzL0hTbGlkZXIuanNcIjtcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gXCIuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzXCI7XHJcbmltcG9ydCBSYW5nZSBmcm9tIFwiLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzXCI7XHJcbmltcG9ydCBSb3VuZFB1c2hCdXR0b24gZnJvbSBcIi4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JvdW5kUHVzaEJ1dHRvbi5qc1wiO1xyXG5pbXBvcnQgQnV0dG9uTm9kZSBmcm9tIFwiLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvQnV0dG9uTm9kZVwiO1xyXG5pbXBvcnQgQXJyb3dCdXR0b24sIHtBcnJvd0J1dHRvbkRpcmVjdGlvbn0gZnJvbSBcIi4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL0Fycm93QnV0dG9uLmpzXCI7XHJcbmltcG9ydCBQbGF5UGF1c2VCdXR0b24gZnJvbSBcIi4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9idXR0b25zL1BsYXlQYXVzZUJ1dHRvbi5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbFBhbmVsVmlldyBleHRlbmRzIFBhbmVsIHtcclxuICBwdWJsaWMgaXNQbGF5aW5nOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHVibGljIHZlbG9jaXR5OiBudW1iZXI9MDtcclxuICBwdWJsaWMgYUNoZWNrZWQ6IGJvb2xlYW49dHJ1ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtOb2RlW119IGNoaWxkcmVuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xyXG5cclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgY29ybmVyUmFkaXVzOiA1LFxyXG4gICAgICB4TWFyZ2luOiA5LFxyXG4gICAgICB5TWFyZ2luOiAxMCxcclxuICAgICAgc3Ryb2tlOiAncmdiKCAxOTAsIDE5MCwgMTkwICknLFxyXG4gICAgICBmaWxsOiAncmdiKCAyNDAsIDI0MCwgMjQwICknXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgdGV4dEEgPSBuZXcgVGV4dCggXCLlnKhB5Y+C6ICD57O76KeC5a+fXCIsIHtcclxuICAgICAgZm9udFNpemU6MjIsXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCB0ZXh0QiA9IG5ldyBUZXh0KCBcIuWcqELlj4LogIPns7vop4Llr59cIiwge1xyXG4gICAgICBmb250U2l6ZToyMixcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHRleHRDID0gbmV3IFRleHQoIFwiQuebuOWvuUHpgJ/luqbvvIgtMC45OWN+MC45OWPvvIlcIiwge1xyXG4gICAgICBmb250U2l6ZToyMixcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBhQ2hlY2tlZCA9IG5ldyBCb29sZWFuUHJvcGVydHkodHJ1ZSk7XHJcbiAgICBjb25zdCBhYlN3aXRjaCA9IG5ldyBBQlN3aXRjaChhQ2hlY2tlZCwgdHJ1ZSwgdGV4dEEsIGZhbHNlLCB0ZXh0Qik7XHJcblxyXG4gICAgY29uc3QgdiA9IG5ldyBOdW1iZXJQcm9wZXJ0eSgwKTtcclxuICAgIGNvbnN0IHNsaWRlciA9IG5ldyBIU2xpZGVyKHYsIG5ldyBSYW5nZSgtMC45OSwwLjk5KSx7ICB9KVxyXG5cclxuXHJcbiAgICBjb25zdCB2Qm94ID0gbmV3IFZCb3goe1xyXG4gICAgICBjaGlsZHJlbjogWyB0ZXh0Qywgc2xpZGVyIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBpc1BsYXlpbmc9IG5ldyBCb29sZWFuUHJvcGVydHkoZmFsc2UpO1xyXG5cclxuICAgIGNvbnN0IGJ0bjM9IG5ldyBQbGF5UGF1c2VCdXR0b24oaXNQbGF5aW5nKVxyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiA1MCxcclxuICAgICAgY2hpbGRyZW46IFsgYWJTd2l0Y2gsIHZCb3gsIGJ0bjMsXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKGNvbnRlbnQsIG9wdGlvbnMpO1xyXG5cclxuICAgIGFDaGVja2VkLmxpbmsocHJvcGVydHk9PntcclxuICAgICAgdGhpcy5hQ2hlY2tlZCA9IHByb3BlcnR5O1xyXG4gICAgfSk7XHJcbiAgICBpc1BsYXlpbmcubGluayhwcm9wZXJ0eT0+e1xyXG4gICAgICB0aGlzLmlzUGxheWluZyA9IHByb3BlcnR5O1xyXG4gICAgfSk7XHJcbiAgICB2LmxpbmsocHJvcGVydHk9PntcclxuICAgICAgdGhpcy52ZWxvY2l0eSA9IHByb3BlcnR5O1xyXG4gICAgICB0ZXh0Qy5zZXRTdHJpbmcoXCJC55u45a+5QemAn+W6pjogXCIgKyBwcm9wZXJ0eS50b0ZpeGVkKDIpICsgXCJjXCIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICovXHJcbiAgLypkaXNwb3NlKCkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdHcmFwaENvbnRyb2xQYW5lbCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgZGlzcG9zZWQnICk7XHJcbiAgfSovXHJcbn1cclxuXHJcbi8vcmVsYXRpdml0eS5yZWdpc3RlciggJ0NvbnRyb2xQYW5lbFZpZXcnLCBDb250cm9sUGFuZWxWaWV3ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFrQkMsSUFBSSxFQUFRQyxJQUFJLEVBQUVDLElBQUksUUFBTyxtQ0FBbUM7QUFDbEYsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUkvQyxPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBR3BFLE9BQU9DLFFBQVEsTUFBTSxnQ0FBZ0M7QUFDckQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFJL0MsT0FBT0MsZUFBZSxNQUFNLHdEQUF3RDtBQUVwRixlQUFlLE1BQU1DLGdCQUFnQixTQUFTUCxLQUFLLENBQUM7RUFDM0NRLFNBQVMsR0FBWSxLQUFLO0VBQzFCQyxRQUFRLEdBQVMsQ0FBQztFQUNsQkMsUUFBUSxHQUFVLElBQUk7O0VBRTdCO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLE9BQU8sRUFBRztJQUdyQkEsT0FBTyxHQUFHaEIsS0FBSyxDQUFFO01BQ2ZpQixZQUFZLEVBQUUsQ0FBQztNQUNmQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxNQUFNLEVBQUUsc0JBQXNCO01BQzlCQyxJQUFJLEVBQUU7SUFDUixDQUFDLEVBQUVMLE9BQVEsQ0FBQztJQUVaLE1BQU1NLEtBQUssR0FBRyxJQUFJcEIsSUFBSSxDQUFFLFNBQVMsRUFBRTtNQUNqQ3FCLFFBQVEsRUFBQztJQUNYLENBQUUsQ0FBQztJQUNILE1BQU1DLEtBQUssR0FBRyxJQUFJdEIsSUFBSSxDQUFFLFNBQVMsRUFBRTtNQUNqQ3FCLFFBQVEsRUFBQztJQUNYLENBQUUsQ0FBQztJQUNILE1BQU1FLEtBQUssR0FBRyxJQUFJdkIsSUFBSSxDQUFFLHNCQUFzQixFQUFFO01BQzlDcUIsUUFBUSxFQUFDO0lBQ1gsQ0FBRSxDQUFDO0lBRUgsTUFBTVQsUUFBUSxHQUFHLElBQUlULGVBQWUsQ0FBQyxJQUFJLENBQUM7SUFDMUMsTUFBTXFCLFFBQVEsR0FBRyxJQUFJcEIsUUFBUSxDQUFDUSxRQUFRLEVBQUUsSUFBSSxFQUFFUSxLQUFLLEVBQUUsS0FBSyxFQUFFRSxLQUFLLENBQUM7SUFFbEUsTUFBTUcsQ0FBQyxHQUFHLElBQUluQixjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQy9CLE1BQU1vQixNQUFNLEdBQUcsSUFBSXJCLE9BQU8sQ0FBQ29CLENBQUMsRUFBRSxJQUFJbEIsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxFQUFDLENBQUcsQ0FBQyxDQUFDO0lBR3pELE1BQU1vQixJQUFJLEdBQUcsSUFBSTFCLElBQUksQ0FBQztNQUNwQjJCLFFBQVEsRUFBRSxDQUFFTCxLQUFLLEVBQUVHLE1BQU07SUFDM0IsQ0FBRSxDQUFDO0lBRUgsTUFBTWhCLFNBQVMsR0FBRSxJQUFJUCxlQUFlLENBQUMsS0FBSyxDQUFDO0lBRTNDLE1BQU0wQixJQUFJLEdBQUUsSUFBSXJCLGVBQWUsQ0FBQ0UsU0FBUyxDQUFDO0lBRTFDLE1BQU1vQixPQUFPLEdBQUcsSUFBSS9CLElBQUksQ0FBRTtNQUN4QmdDLE9BQU8sRUFBRSxFQUFFO01BQ1hILFFBQVEsRUFBRSxDQUFFSixRQUFRLEVBQUVHLElBQUksRUFBRUUsSUFBSTtJQUNsQyxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUNDLE9BQU8sRUFBRWhCLE9BQU8sQ0FBQztJQUV2QkYsUUFBUSxDQUFDb0IsSUFBSSxDQUFDQyxRQUFRLElBQUU7TUFDdEIsSUFBSSxDQUFDckIsUUFBUSxHQUFHcUIsUUFBUTtJQUMxQixDQUFDLENBQUM7SUFDRnZCLFNBQVMsQ0FBQ3NCLElBQUksQ0FBQ0MsUUFBUSxJQUFFO01BQ3ZCLElBQUksQ0FBQ3ZCLFNBQVMsR0FBR3VCLFFBQVE7SUFDM0IsQ0FBQyxDQUFDO0lBQ0ZSLENBQUMsQ0FBQ08sSUFBSSxDQUFDQyxRQUFRLElBQUU7TUFDZixJQUFJLENBQUN0QixRQUFRLEdBQUdzQixRQUFRO01BQ3hCVixLQUFLLENBQUNXLFNBQVMsQ0FBQyxVQUFVLEdBQUdELFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN6RCxDQUFDLENBQUM7RUFDSjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBIn0=