// Copyright 2023, University of Colorado Boulder

/**
 * TODO Describe this class and its responsibilities.
 *
 * @author Zijian Wang
 */

import { Line, Node, Text } from '../../../../scenery/js/imports.js';
import relativity from '../../relativity.js';
import ArrowNode from "../../../../scenery-phet/js/ArrowNode.js";
import MathSymbolFont from "../../../../scenery-phet/js/MathSymbolFont.js";
export default class XAxisView extends Node {
  /**
   * @param {Graph} graph
   * @param {Bounds2} graphViewBounds
   */
  constructor(xlabel, ylabel, xMin, xMax, yMin, yMax, unit = 100) {
    const arrowX = new ArrowNode(xMin * unit - 40, 0, xMax * unit + 40, 0, {
      tailWidth: 1.5,
      headWidth: 10,
      headHeight: 10,
      //fill: Color.BLACK,
      stroke: null
    });
    const arrowY = new ArrowNode(0, yMin * unit, 0, -yMax * unit, {
      tailWidth: 1.5,
      headWidth: 10,
      headHeight: 10,
      //fill: Color.BLACK,
      stroke: null
    });
    const majorLine = [];
    const minorLine = [];
    for (let i = xMin; i <= xMax; i++) {
      majorLine.push(new Line(i * unit, -unit / 8, i * unit, unit / 8, {
        stroke: "black",
        lineWidth: 1
      }));
      if (i < xMax) {
        for (let j = 1; j <= 4; j++) {
          minorLine.push(new Line((i + j / 5) * unit, -unit / 16, (i + j / 5) * unit, unit / 16, {
            stroke: "rgb( 160, 160, 160 )",
            lineWidth: 0.8
          }));
        }
      }
    }
    const xLabel = new Text(xlabel, {
      font: new MathSymbolFont(24),
      //maxWidth: 22,
      //fontSize: 20,
      left: arrowX.right + 6,
      centerY: arrowX.centerY
    });
    const yLabel = new Text(ylabel, {
      font: new MathSymbolFont(24),
      //maxWidth: 22,
      //fontSize: 20,
      right: arrowY.left,
      centerY: arrowY.top
    });
    super({
      children: [arrowX, arrowY, xLabel, yLabel].concat(majorLine).concat(minorLine)
    });
  }
}
relativity.register('XAxisView', XAxisView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lIiwiTm9kZSIsIlRleHQiLCJyZWxhdGl2aXR5IiwiQXJyb3dOb2RlIiwiTWF0aFN5bWJvbEZvbnQiLCJYQXhpc1ZpZXciLCJjb25zdHJ1Y3RvciIsInhsYWJlbCIsInlsYWJlbCIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJ1bml0IiwiYXJyb3dYIiwidGFpbFdpZHRoIiwiaGVhZFdpZHRoIiwiaGVhZEhlaWdodCIsInN0cm9rZSIsImFycm93WSIsIm1ham9yTGluZSIsIm1pbm9yTGluZSIsImkiLCJwdXNoIiwibGluZVdpZHRoIiwiaiIsInhMYWJlbCIsImZvbnQiLCJsZWZ0IiwicmlnaHQiLCJjZW50ZXJZIiwieUxhYmVsIiwidG9wIiwiY2hpbGRyZW4iLCJjb25jYXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlhBeGlzVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVE9ETyBEZXNjcmliZSB0aGlzIGNsYXNzIGFuZCBpdHMgcmVzcG9uc2liaWxpdGllcy5cclxuICpcclxuICogQGF1dGhvciBaaWppYW4gV2FuZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHtDb2xvciwgRHJhZ0xpc3RlbmVyLCBJbWFnZSwgTGluZSwgTm9kZSwgVGV4dH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHJlbGF0aXZpdHkgZnJvbSAnLi4vLi4vcmVsYXRpdml0eS5qcyc7XHJcbmltcG9ydCBBcnJvd05vZGUgZnJvbSBcIi4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanNcIjtcclxuaW1wb3J0IE1hdGhTeW1ib2xGb250IGZyb20gXCIuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTWF0aFN5bWJvbEZvbnQuanNcIjtcclxuaW1wb3J0IExpbmVBcnJvd05vZGUgZnJvbSBcIi4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9MaW5lQXJyb3dOb2RlLmpzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhBeGlzVmlldyBleHRlbmRzIE5vZGUge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtHcmFwaH0gZ3JhcGhcclxuICAgICAqIEBwYXJhbSB7Qm91bmRzMn0gZ3JhcGhWaWV3Qm91bmRzXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHhsYWJlbDpzdHJpbmcsIHlsYWJlbDpzdHJpbmcsIHhNaW46bnVtYmVyLCB4TWF4Om51bWJlciwgeU1pbjpudW1iZXIsIHlNYXg6bnVtYmVyLCB1bml0PTEwMCkge1xyXG4gICAgICAgIGNvbnN0IGFycm93WCA9IG5ldyBBcnJvd05vZGUoXHJcbiAgICAgICAgICAgIHhNaW4qdW5pdC00MCwgMCwgeE1heCp1bml0KzQwLCAwLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWlsV2lkdGg6IDEuNSxcclxuICAgICAgICAgICAgICAgIGhlYWRXaWR0aDogMTAsXHJcbiAgICAgICAgICAgICAgICBoZWFkSGVpZ2h0OiAxMCxcclxuICAgICAgICAgICAgICAgIC8vZmlsbDogQ29sb3IuQkxBQ0ssXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IG51bGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgYXJyb3dZID0gbmV3IEFycm93Tm9kZShcclxuICAgICAgICAgICAgMCwgeU1pbip1bml0LCAwLCAteU1heCp1bml0LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWlsV2lkdGg6IDEuNSxcclxuICAgICAgICAgICAgICAgIGhlYWRXaWR0aDogMTAsXHJcbiAgICAgICAgICAgICAgICBoZWFkSGVpZ2h0OiAxMCxcclxuICAgICAgICAgICAgICAgIC8vZmlsbDogQ29sb3IuQkxBQ0ssXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IG51bGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1ham9yTGluZTpOb2RlW109W11cclxuICAgICAgICBjb25zdCBtaW5vckxpbmU6Tm9kZVtdPVtdXHJcbiAgICAgICAgZm9yKGxldCBpID0geE1pbjsgaTw9eE1heDsgaSsrICl7XHJcbiAgICAgICAgICAgIG1ham9yTGluZS5wdXNoKG5ldyBMaW5lKGkqdW5pdCwgLXVuaXQvOCwgaSp1bml0LHVuaXQvOCwge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiBcImJsYWNrXCIsIGxpbmVXaWR0aDogMSxcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBpZihpPHhNYXgpe1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMTsgajw9NDsgaisrICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbm9yTGluZS5wdXNoKG5ldyBMaW5lKChpK2ovNSkqdW5pdCwgLXVuaXQvMTYsIChpK2ovNSkqdW5pdCx1bml0LzE2LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogXCJyZ2IoIDE2MCwgMTYwLCAxNjAgKVwiLCBsaW5lV2lkdGg6IDAuOCxcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeExhYmVsID0gbmV3IFRleHQoIHhsYWJlbCwge1xyXG4gICAgICAgICAgICBmb250OiBuZXcgTWF0aFN5bWJvbEZvbnQoIDI0ICksXHJcbiAgICAgICAgICAgIC8vbWF4V2lkdGg6IDIyLFxyXG4gICAgICAgICAgICAvL2ZvbnRTaXplOiAyMCxcclxuICAgICAgICAgICAgbGVmdDogYXJyb3dYLnJpZ2h0ICsgNixcclxuICAgICAgICAgICAgY2VudGVyWTogYXJyb3dYLmNlbnRlcllcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgIGNvbnN0IHlMYWJlbCA9IG5ldyBUZXh0KCB5bGFiZWwsIHtcclxuICAgICAgICAgICAgZm9udDogbmV3IE1hdGhTeW1ib2xGb250KCAyNCApLFxyXG4gICAgICAgICAgICAvL21heFdpZHRoOiAyMixcclxuICAgICAgICAgICAgLy9mb250U2l6ZTogMjAsXHJcbiAgICAgICAgICAgIHJpZ2h0OiBhcnJvd1kubGVmdCxcclxuICAgICAgICAgICAgY2VudGVyWTogYXJyb3dZLnRvcFxyXG4gICAgICAgIH0gKTtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiAgWyBhcnJvd1gsIGFycm93WSwgeExhYmVsLCB5TGFiZWwgXS5jb25jYXQobWFqb3JMaW5lKS5jb25jYXQobWlub3JMaW5lKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5yZWxhdGl2aXR5LnJlZ2lzdGVyKCdYQXhpc1ZpZXcnLCBYQXhpc1ZpZXcpOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxTQUFvQ0EsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksUUFBTyxtQ0FBbUM7QUFDOUYsT0FBT0MsVUFBVSxNQUFNLHFCQUFxQjtBQUM1QyxPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBQ2hFLE9BQU9DLGNBQWMsTUFBTSwrQ0FBK0M7QUFFMUUsZUFBZSxNQUFNQyxTQUFTLFNBQVNMLElBQUksQ0FBQztFQUV4QztBQUNKO0FBQ0E7QUFDQTtFQUNJTSxXQUFXQSxDQUFDQyxNQUFhLEVBQUVDLE1BQWEsRUFBRUMsSUFBVyxFQUFFQyxJQUFXLEVBQUVDLElBQVcsRUFBRUMsSUFBVyxFQUFFQyxJQUFJLEdBQUMsR0FBRyxFQUFFO0lBQ3BHLE1BQU1DLE1BQU0sR0FBRyxJQUFJWCxTQUFTLENBQ3hCTSxJQUFJLEdBQUNJLElBQUksR0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFSCxJQUFJLEdBQUNHLElBQUksR0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUNoQztNQUNJRSxTQUFTLEVBQUUsR0FBRztNQUNkQyxTQUFTLEVBQUUsRUFBRTtNQUNiQyxVQUFVLEVBQUUsRUFBRTtNQUNkO01BQ0FDLE1BQU0sRUFBRTtJQUNaLENBQ0osQ0FBQztJQUNELE1BQU1DLE1BQU0sR0FBRyxJQUFJaEIsU0FBUyxDQUN4QixDQUFDLEVBQUVRLElBQUksR0FBQ0UsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDRCxJQUFJLEdBQUNDLElBQUksRUFDM0I7TUFDSUUsU0FBUyxFQUFFLEdBQUc7TUFDZEMsU0FBUyxFQUFFLEVBQUU7TUFDYkMsVUFBVSxFQUFFLEVBQUU7TUFDZDtNQUNBQyxNQUFNLEVBQUU7SUFDWixDQUNKLENBQUM7SUFFRCxNQUFNRSxTQUFnQixHQUFDLEVBQUU7SUFDekIsTUFBTUMsU0FBZ0IsR0FBQyxFQUFFO0lBQ3pCLEtBQUksSUFBSUMsQ0FBQyxHQUFHYixJQUFJLEVBQUVhLENBQUMsSUFBRVosSUFBSSxFQUFFWSxDQUFDLEVBQUUsRUFBRTtNQUM1QkYsU0FBUyxDQUFDRyxJQUFJLENBQUMsSUFBSXhCLElBQUksQ0FBQ3VCLENBQUMsR0FBQ1QsSUFBSSxFQUFFLENBQUNBLElBQUksR0FBQyxDQUFDLEVBQUVTLENBQUMsR0FBQ1QsSUFBSSxFQUFDQSxJQUFJLEdBQUMsQ0FBQyxFQUFFO1FBQ3BESyxNQUFNLEVBQUUsT0FBTztRQUFFTSxTQUFTLEVBQUU7TUFDaEMsQ0FBQyxDQUFDLENBQUM7TUFDSCxJQUFHRixDQUFDLEdBQUNaLElBQUksRUFBQztRQUNOLEtBQUksSUFBSWUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxJQUFFLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUc7VUFDdkJKLFNBQVMsQ0FBQ0UsSUFBSSxDQUFDLElBQUl4QixJQUFJLENBQUMsQ0FBQ3VCLENBQUMsR0FBQ0csQ0FBQyxHQUFDLENBQUMsSUFBRVosSUFBSSxFQUFFLENBQUNBLElBQUksR0FBQyxFQUFFLEVBQUUsQ0FBQ1MsQ0FBQyxHQUFDRyxDQUFDLEdBQUMsQ0FBQyxJQUFFWixJQUFJLEVBQUNBLElBQUksR0FBQyxFQUFFLEVBQUU7WUFDbEVLLE1BQU0sRUFBRSxzQkFBc0I7WUFBRU0sU0FBUyxFQUFFO1VBQy9DLENBQUMsQ0FBQyxDQUFDO1FBQ1A7TUFDSjtJQUNKO0lBQ0EsTUFBTUUsTUFBTSxHQUFHLElBQUl6QixJQUFJLENBQUVNLE1BQU0sRUFBRTtNQUM3Qm9CLElBQUksRUFBRSxJQUFJdkIsY0FBYyxDQUFFLEVBQUcsQ0FBQztNQUM5QjtNQUNBO01BQ0F3QixJQUFJLEVBQUVkLE1BQU0sQ0FBQ2UsS0FBSyxHQUFHLENBQUM7TUFDdEJDLE9BQU8sRUFBRWhCLE1BQU0sQ0FBQ2dCO0lBQ3BCLENBQUUsQ0FBQztJQUVILE1BQU1DLE1BQU0sR0FBRyxJQUFJOUIsSUFBSSxDQUFFTyxNQUFNLEVBQUU7TUFDN0JtQixJQUFJLEVBQUUsSUFBSXZCLGNBQWMsQ0FBRSxFQUFHLENBQUM7TUFDOUI7TUFDQTtNQUNBeUIsS0FBSyxFQUFFVixNQUFNLENBQUNTLElBQUk7TUFDbEJFLE9BQU8sRUFBRVgsTUFBTSxDQUFDYTtJQUNwQixDQUFFLENBQUM7SUFDSCxLQUFLLENBQUM7TUFDRkMsUUFBUSxFQUFHLENBQUVuQixNQUFNLEVBQUVLLE1BQU0sRUFBRU8sTUFBTSxFQUFFSyxNQUFNLENBQUUsQ0FBQ0csTUFBTSxDQUFDZCxTQUFTLENBQUMsQ0FBQ2MsTUFBTSxDQUFDYixTQUFTO0lBQ3BGLENBQUMsQ0FBQztFQUNOO0FBQ0o7QUFFQW5CLFVBQVUsQ0FBQ2lDLFFBQVEsQ0FBQyxXQUFXLEVBQUU5QixTQUFTLENBQUMifQ==