// Copyright 2022, University of Colorado Boulder
/**
 * Model for the reflection screen.
 *
 * @author Piet Goris (University of Leuven)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import Property from '../../../axon/js/Property.js';
import Range from '../../../dot/js/Range.js';
import SoundConstants from '../common/SoundConstants.js';
import sound from '../sound.js';
import SoundModel from '../common/model/SoundModel.js';
export default class ReflectionModel extends SoundModel {
  // x coordinate of the wall origin position

  // angle of the wall in radians

  // indicates the user selection for the sound mode control setting

  constructor() {
    super({
      hasReflection: true
    });
    this.wallPositionXProperty = new NumberProperty(1 / 3 * SoundConstants.WAVE_AREA_WIDTH, {
      range: new Range(1 / 3 * SoundConstants.WAVE_AREA_WIDTH, 2 / 3 * SoundConstants.WAVE_AREA_WIDTH)
    });
    this.wallAngleProperty = new NumberProperty(Math.PI / 4, {
      range: new Range(1 / 10 * Math.PI, 1 / 2 * Math.PI)
    });
    this.soundModeProperty = new Property('CONTINUOUS', {
      validValues: ['CONTINUOUS', 'PULSE']
    });
  }
  reset() {
    this.wallPositionXProperty.reset();
    this.wallAngleProperty.reset();
    this.soundModeProperty.reset();
    super.reset();
  }
}
sound.register('ReflectionModel', ReflectionModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlByb3BlcnR5IiwiUmFuZ2UiLCJTb3VuZENvbnN0YW50cyIsInNvdW5kIiwiU291bmRNb2RlbCIsIlJlZmxlY3Rpb25Nb2RlbCIsImNvbnN0cnVjdG9yIiwiaGFzUmVmbGVjdGlvbiIsIndhbGxQb3NpdGlvblhQcm9wZXJ0eSIsIldBVkVfQVJFQV9XSURUSCIsInJhbmdlIiwid2FsbEFuZ2xlUHJvcGVydHkiLCJNYXRoIiwiUEkiLCJzb3VuZE1vZGVQcm9wZXJ0eSIsInZhbGlkVmFsdWVzIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJlZmxlY3Rpb25Nb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlIHJlZmxlY3Rpb24gc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFBpZXQgR29yaXMgKFVuaXZlcnNpdHkgb2YgTGV1dmVuKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFNvdW5kQ29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbi9Tb3VuZENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBzb3VuZCBmcm9tICcuLi9zb3VuZC5qcyc7XHJcbmltcG9ydCBTb3VuZE1vZGVsIGZyb20gJy4uL2NvbW1vbi9tb2RlbC9Tb3VuZE1vZGVsLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZmxlY3Rpb25Nb2RlbCBleHRlbmRzIFNvdW5kTW9kZWwge1xyXG5cclxuICAvLyB4IGNvb3JkaW5hdGUgb2YgdGhlIHdhbGwgb3JpZ2luIHBvc2l0aW9uXHJcbiAgcHVibGljIHJlYWRvbmx5IHdhbGxQb3NpdGlvblhQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcblxyXG4gIC8vIGFuZ2xlIG9mIHRoZSB3YWxsIGluIHJhZGlhbnNcclxuICBwdWJsaWMgcmVhZG9ubHkgd2FsbEFuZ2xlUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICAvLyBpbmRpY2F0ZXMgdGhlIHVzZXIgc2VsZWN0aW9uIGZvciB0aGUgc291bmQgbW9kZSBjb250cm9sIHNldHRpbmdcclxuICBwdWJsaWMgcmVhZG9ubHkgc291bmRNb2RlUHJvcGVydHk6IFByb3BlcnR5PCdDT05USU5VT1VTJyB8ICdQVUxTRSc+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigge1xyXG4gICAgICBoYXNSZWZsZWN0aW9uOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy53YWxsUG9zaXRpb25YUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDEgLyAzICogU291bmRDb25zdGFudHMuV0FWRV9BUkVBX1dJRFRILCB7XHJcbiAgICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDEgLyAzICogU291bmRDb25zdGFudHMuV0FWRV9BUkVBX1dJRFRILCAyIC8gMyAqIFNvdW5kQ29uc3RhbnRzLldBVkVfQVJFQV9XSURUSCApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy53YWxsQW5nbGVQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggTWF0aC5QSSAvIDQsIHtcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMSAvIDEwICogTWF0aC5QSSwgMSAvIDIgKiBNYXRoLlBJIClcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnNvdW5kTW9kZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5PCdDT05USU5VT1VTJyB8ICdQVUxTRSc+KCAnQ09OVElOVU9VUycsIHtcclxuICAgICAgdmFsaWRWYWx1ZXM6IFsgJ0NPTlRJTlVPVVMnLCAnUFVMU0UnIF1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMud2FsbFBvc2l0aW9uWFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLndhbGxBbmdsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnNvdW5kTW9kZVByb3BlcnR5LnJlc2V0KCk7XHJcblxyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnNvdW5kLnJlZ2lzdGVyKCAnUmVmbGVjdGlvbk1vZGVsJywgUmVmbGVjdGlvbk1vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sb0NBQW9DO0FBQy9ELE9BQU9DLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLDBCQUEwQjtBQUM1QyxPQUFPQyxjQUFjLE1BQU0sNkJBQTZCO0FBQ3hELE9BQU9DLEtBQUssTUFBTSxhQUFhO0FBQy9CLE9BQU9DLFVBQVUsTUFBTSwrQkFBK0I7QUFFdEQsZUFBZSxNQUFNQyxlQUFlLFNBQVNELFVBQVUsQ0FBQztFQUV0RDs7RUFHQTs7RUFHQTs7RUFHT0UsV0FBV0EsQ0FBQSxFQUFHO0lBQ25CLEtBQUssQ0FBRTtNQUNMQyxhQUFhLEVBQUU7SUFDakIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxxQkFBcUIsR0FBRyxJQUFJVCxjQUFjLENBQUUsQ0FBQyxHQUFHLENBQUMsR0FBR0csY0FBYyxDQUFDTyxlQUFlLEVBQUU7TUFDdkZDLEtBQUssRUFBRSxJQUFJVCxLQUFLLENBQUUsQ0FBQyxHQUFHLENBQUMsR0FBR0MsY0FBYyxDQUFDTyxlQUFlLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBR1AsY0FBYyxDQUFDTyxlQUFnQjtJQUNuRyxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNFLGlCQUFpQixHQUFHLElBQUlaLGNBQWMsQ0FBRWEsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO01BQ3hESCxLQUFLLEVBQUUsSUFBSVQsS0FBSyxDQUFFLENBQUMsR0FBRyxFQUFFLEdBQUdXLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUdELElBQUksQ0FBQ0MsRUFBRztJQUN0RCxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUlkLFFBQVEsQ0FBMEIsWUFBWSxFQUFFO01BQzNFZSxXQUFXLEVBQUUsQ0FBRSxZQUFZLEVBQUUsT0FBTztJQUN0QyxDQUFFLENBQUM7RUFDTDtFQUVnQkMsS0FBS0EsQ0FBQSxFQUFTO0lBQzVCLElBQUksQ0FBQ1IscUJBQXFCLENBQUNRLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQ0wsaUJBQWlCLENBQUNLLEtBQUssQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQ0YsaUJBQWlCLENBQUNFLEtBQUssQ0FBQyxDQUFDO0lBRTlCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7RUFDZjtBQUNGO0FBRUFiLEtBQUssQ0FBQ2MsUUFBUSxDQUFFLGlCQUFpQixFQUFFWixlQUFnQixDQUFDIn0=