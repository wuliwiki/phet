// Copyright 2022, University of Colorado Boulder
/**
 * Constants used throughout this simulation.
 *
 * @author Piet Goris (University of Leuven)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Range from '../../../dot/js/Range.js';
import Dimension2 from '../../../dot/js/Dimension2.js';
import Bounds2 from '../../../dot/js/Bounds2.js';
import Utils from '../../../dot/js/Utils.js';
import sound from '../sound.js';
const LATTICE_DIMENSION = 151;
const LATTICE_PADDING = 20;
const AMPLITUDE_CALIBRATION_SCALE = (LATTICE_DIMENSION - LATTICE_PADDING * 2) / (101 - 20 * 2);
const EVENT_RATE = 20 * AMPLITUDE_CALIBRATION_SCALE;
const WAVE_AREA_WIDTH = 1000;
const CELL_WIDTH = 5;
const SoundConstants = {
  SCREEN_VIEW_X_MARGIN: 15,
  SCREEN_VIEW_Y_MARGIN: 15,
  CONTROL_PANEL_MARGIN: 8,
  CONTROL_PANEL_SPACING: 6,
  LATTICE_DIMENSION: LATTICE_DIMENSION,
  LATTICE_PADDING: LATTICE_PADDING,
  SOURCE_POSITION_X: LATTICE_PADDING + 20,
  WAVE_AREA_WIDTH: WAVE_AREA_WIDTH,
  LISTENER_BOUNDS_X: new Range(WAVE_AREA_WIDTH / 3, 4 / 5 * WAVE_AREA_WIDTH),
  SPEAKER_OFFSET: 55,
  AMPLITUDE_RANGE: new Range(0, 10),
  MAX_SOUND_DISTANCE: 85,
  EVENT_RATE: EVENT_RATE,
  AMPLITUDE_CALIBRATION_SCALE: AMPLITUDE_CALIBRATION_SCALE,
  CONE_ANGLE: Math.PI / 3,
  // Checkboxes and radio buttons in the control panel need extended maxWidth, see https://github.com/phetsims/wave-interference/issues/440
  CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS: {
    maxWidth: 140
  },
  MAJOR_TICK_LENGTH: 12,
  THUMB_SIZE: new Dimension2(13, 22),
  CELL_WIDTH: CELL_WIDTH,
  PANEL_MAX_WIDTH: 200,
  /**
   * At the default size, the text should "nestle" into the slider.  But when the text is too small, it must be spaced
   * further away.  See https://github.com/phetsims/wave-interference/issues/194
   */
  getSliderTitleSpacing(titleNode) {
    const tallTextHeight = 17;
    const shortTextHeight = 4;
    const tallTextSpacing = -2;
    const shortTextSpacing = 5;
    return Utils.linear(tallTextHeight, shortTextHeight, tallTextSpacing, shortTextSpacing, titleNode.height);
  },
  /**
   * Gets the bounds to use for a canvas, in view coordinates
   */
  getCanvasBounds(lattice) {
    return new Bounds2(0, 0, (lattice.width - lattice.dampX * 2) * CELL_WIDTH, (lattice.height - lattice.dampY * 2) * CELL_WIDTH);
  }
};
sound.register('SoundConstants', SoundConstants);
export default SoundConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIkRpbWVuc2lvbjIiLCJCb3VuZHMyIiwiVXRpbHMiLCJzb3VuZCIsIkxBVFRJQ0VfRElNRU5TSU9OIiwiTEFUVElDRV9QQURESU5HIiwiQU1QTElUVURFX0NBTElCUkFUSU9OX1NDQUxFIiwiRVZFTlRfUkFURSIsIldBVkVfQVJFQV9XSURUSCIsIkNFTExfV0lEVEgiLCJTb3VuZENvbnN0YW50cyIsIlNDUkVFTl9WSUVXX1hfTUFSR0lOIiwiU0NSRUVOX1ZJRVdfWV9NQVJHSU4iLCJDT05UUk9MX1BBTkVMX01BUkdJTiIsIkNPTlRST0xfUEFORUxfU1BBQ0lORyIsIlNPVVJDRV9QT1NJVElPTl9YIiwiTElTVEVORVJfQk9VTkRTX1giLCJTUEVBS0VSX09GRlNFVCIsIkFNUExJVFVERV9SQU5HRSIsIk1BWF9TT1VORF9ESVNUQU5DRSIsIkNPTkVfQU5HTEUiLCJNYXRoIiwiUEkiLCJDT05UUk9MX1BBTkVMX1RFWFRfTUFYX1dJRFRIX09QVElPTlMiLCJtYXhXaWR0aCIsIk1BSk9SX1RJQ0tfTEVOR1RIIiwiVEhVTUJfU0laRSIsIlBBTkVMX01BWF9XSURUSCIsImdldFNsaWRlclRpdGxlU3BhY2luZyIsInRpdGxlTm9kZSIsInRhbGxUZXh0SGVpZ2h0Iiwic2hvcnRUZXh0SGVpZ2h0IiwidGFsbFRleHRTcGFjaW5nIiwic2hvcnRUZXh0U3BhY2luZyIsImxpbmVhciIsImhlaWdodCIsImdldENhbnZhc0JvdW5kcyIsImxhdHRpY2UiLCJ3aWR0aCIsImRhbXBYIiwiZGFtcFkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNvdW5kQ29uc3RhbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLyoqXHJcbiAqIENvbnN0YW50cyB1c2VkIHRocm91Z2hvdXQgdGhpcyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFBpZXQgR29yaXMgKFVuaXZlcnNpdHkgb2YgTGV1dmVuKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBzb3VuZCBmcm9tICcuLi9zb3VuZC5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTGF0dGljZSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTGF0dGljZS5qcyc7XHJcblxyXG5jb25zdCBMQVRUSUNFX0RJTUVOU0lPTiA9IDE1MTtcclxuY29uc3QgTEFUVElDRV9QQURESU5HID0gMjA7XHJcbmNvbnN0IEFNUExJVFVERV9DQUxJQlJBVElPTl9TQ0FMRSA9ICggTEFUVElDRV9ESU1FTlNJT04gLSBMQVRUSUNFX1BBRERJTkcgKiAyICkgLyAoIDEwMSAtIDIwICogMiApO1xyXG5jb25zdCBFVkVOVF9SQVRFID0gMjAgKiBBTVBMSVRVREVfQ0FMSUJSQVRJT05fU0NBTEU7XHJcbmNvbnN0IFdBVkVfQVJFQV9XSURUSCA9IDEwMDA7XHJcbmNvbnN0IENFTExfV0lEVEggPSA1O1xyXG5cclxuY29uc3QgU291bmRDb25zdGFudHMgPSB7XHJcbiAgU0NSRUVOX1ZJRVdfWF9NQVJHSU46IDE1LFxyXG4gIFNDUkVFTl9WSUVXX1lfTUFSR0lOOiAxNSxcclxuICBDT05UUk9MX1BBTkVMX01BUkdJTjogOCxcclxuICBDT05UUk9MX1BBTkVMX1NQQUNJTkc6IDYsXHJcbiAgTEFUVElDRV9ESU1FTlNJT046IExBVFRJQ0VfRElNRU5TSU9OLFxyXG4gIExBVFRJQ0VfUEFERElORzogTEFUVElDRV9QQURESU5HLFxyXG4gIFNPVVJDRV9QT1NJVElPTl9YOiBMQVRUSUNFX1BBRERJTkcgKyAyMCxcclxuICBXQVZFX0FSRUFfV0lEVEg6IFdBVkVfQVJFQV9XSURUSCxcclxuICBMSVNURU5FUl9CT1VORFNfWDogbmV3IFJhbmdlKCBXQVZFX0FSRUFfV0lEVEggLyAzLCA0IC8gNSAqIFdBVkVfQVJFQV9XSURUSCApLFxyXG4gIFNQRUFLRVJfT0ZGU0VUOiA1NSxcclxuICBBTVBMSVRVREVfUkFOR0U6IG5ldyBSYW5nZSggMCwgMTAgKSxcclxuICBNQVhfU09VTkRfRElTVEFOQ0U6IDg1LFxyXG4gIEVWRU5UX1JBVEU6IEVWRU5UX1JBVEUsXHJcbiAgQU1QTElUVURFX0NBTElCUkFUSU9OX1NDQUxFOiBBTVBMSVRVREVfQ0FMSUJSQVRJT05fU0NBTEUsXHJcbiAgQ09ORV9BTkdMRTogTWF0aC5QSSAvIDMsXHJcblxyXG4gIC8vIENoZWNrYm94ZXMgYW5kIHJhZGlvIGJ1dHRvbnMgaW4gdGhlIGNvbnRyb2wgcGFuZWwgbmVlZCBleHRlbmRlZCBtYXhXaWR0aCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy93YXZlLWludGVyZmVyZW5jZS9pc3N1ZXMvNDQwXHJcbiAgQ09OVFJPTF9QQU5FTF9URVhUX01BWF9XSURUSF9PUFRJT05TOiB7IG1heFdpZHRoOiAxNDAgfSxcclxuXHJcbiAgTUFKT1JfVElDS19MRU5HVEg6IDEyLFxyXG4gIFRIVU1CX1NJWkU6IG5ldyBEaW1lbnNpb24yKCAxMywgMjIgKSxcclxuICBDRUxMX1dJRFRIOiBDRUxMX1dJRFRILFxyXG4gIFBBTkVMX01BWF9XSURUSDogMjAwLFxyXG5cclxuICAvKipcclxuICAgKiBBdCB0aGUgZGVmYXVsdCBzaXplLCB0aGUgdGV4dCBzaG91bGQgXCJuZXN0bGVcIiBpbnRvIHRoZSBzbGlkZXIuICBCdXQgd2hlbiB0aGUgdGV4dCBpcyB0b28gc21hbGwsIGl0IG11c3QgYmUgc3BhY2VkXHJcbiAgICogZnVydGhlciBhd2F5LiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy93YXZlLWludGVyZmVyZW5jZS9pc3N1ZXMvMTk0XHJcbiAgICovXHJcbiAgZ2V0U2xpZGVyVGl0bGVTcGFjaW5nKCB0aXRsZU5vZGU6IE5vZGUgKTogbnVtYmVyIHtcclxuXHJcbiAgICBjb25zdCB0YWxsVGV4dEhlaWdodCA9IDE3O1xyXG4gICAgY29uc3Qgc2hvcnRUZXh0SGVpZ2h0ID0gNDtcclxuXHJcbiAgICBjb25zdCB0YWxsVGV4dFNwYWNpbmcgPSAtMjtcclxuICAgIGNvbnN0IHNob3J0VGV4dFNwYWNpbmcgPSA1O1xyXG5cclxuICAgIHJldHVybiBVdGlscy5saW5lYXIoIHRhbGxUZXh0SGVpZ2h0LCBzaG9ydFRleHRIZWlnaHQsIHRhbGxUZXh0U3BhY2luZywgc2hvcnRUZXh0U3BhY2luZywgdGl0bGVOb2RlLmhlaWdodCApO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGJvdW5kcyB0byB1c2UgZm9yIGEgY2FudmFzLCBpbiB2aWV3IGNvb3JkaW5hdGVzXHJcbiAgICovXHJcbiAgZ2V0Q2FudmFzQm91bmRzKCBsYXR0aWNlOiBMYXR0aWNlICk6IEJvdW5kczIge1xyXG4gICAgcmV0dXJuIG5ldyBCb3VuZHMyKFxyXG4gICAgICAwLCAwLFxyXG4gICAgICAoIGxhdHRpY2Uud2lkdGggLSBsYXR0aWNlLmRhbXBYICogMiApICogQ0VMTF9XSURUSCwgKCBsYXR0aWNlLmhlaWdodCAtIGxhdHRpY2UuZGFtcFkgKiAyICkgKiBDRUxMX1dJRFRIXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcbnNvdW5kLnJlZ2lzdGVyKCAnU291bmRDb25zdGFudHMnLCBTb3VuZENvbnN0YW50cyApO1xyXG5leHBvcnQgZGVmYXVsdCBTb3VuZENvbnN0YW50czsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FB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