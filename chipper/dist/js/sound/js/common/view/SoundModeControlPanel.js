// Copyright 2022-2023, University of Colorado Boulder
/**
 * Controls for the sound mode, whether the speaker emits waves contiously or pulse on button press.
 *
 * @author Piet Goris (University of Leuven)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Node, Text } from '../../../../scenery/js/imports.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import SoundConstants from '../../common/SoundConstants.js';
import sound from '../../sound.js';
import SoundStrings from '../../SoundStrings.js';
import SoundPanel from './SoundPanel.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class SoundModeControlPanel extends SoundPanel {
  constructor(model, alignGroup, providedOptions) {
    const options = optionize()({
      maxWidth: SoundConstants.PANEL_MAX_WIDTH,
      yMargin: 4
    }, providedOptions);
    const boxText = new Text(SoundStrings.soundModeControlPanel.titleStringProperty);
    const radioButtons = new VerticalAquaRadioButtonGroup(model.soundModeProperty, [{
      createNode: () => new Text(SoundStrings.soundModeControlPanel.continuousStringProperty, SoundConstants.CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS),
      value: 'CONTINUOUS'
    }, {
      createNode: () => new Text(SoundStrings.soundModeControlPanel.pulseStringProperty, SoundConstants.CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS),
      value: 'PULSE'
    }], {
      spacing: options.yMargin
    });
    const container = new Node();
    radioButtons.top = boxText.bottom + SoundConstants.CONTROL_PANEL_SPACING;
    const firePulseButton = new RectangularPushButton({
      content: new Text(SoundStrings.soundModeControlPanel.firePulseStringProperty),
      listener: () => model.startPulse()
    });
    firePulseButton.top = radioButtons.bottom + SoundConstants.CONTROL_PANEL_SPACING;
    container.children = [boxText, radioButtons, firePulseButton];
    firePulseButton.centerX = container.centerX;
    const updateEnabled = () => {
      firePulseButton.setEnabled(model.soundModeProperty.value !== 'CONTINUOUS' && !model.isPulseFiringProperty.value);
    };
    model.soundModeProperty.link(updateEnabled);
    model.isPulseFiringProperty.link(updateEnabled);
    const content = alignGroup.createBox(container);
    content.setXAlign('center');
    super(content, options);
  }
}
sound.register('SoundModeControlPanel', SoundModeControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiVGV4dCIsIlJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiIsIlZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAiLCJTb3VuZENvbnN0YW50cyIsInNvdW5kIiwiU291bmRTdHJpbmdzIiwiU291bmRQYW5lbCIsIm9wdGlvbml6ZSIsIlNvdW5kTW9kZUNvbnRyb2xQYW5lbCIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJhbGlnbkdyb3VwIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIm1heFdpZHRoIiwiUEFORUxfTUFYX1dJRFRIIiwieU1hcmdpbiIsImJveFRleHQiLCJzb3VuZE1vZGVDb250cm9sUGFuZWwiLCJ0aXRsZVN0cmluZ1Byb3BlcnR5IiwicmFkaW9CdXR0b25zIiwic291bmRNb2RlUHJvcGVydHkiLCJjcmVhdGVOb2RlIiwiY29udGludW91c1N0cmluZ1Byb3BlcnR5IiwiQ09OVFJPTF9QQU5FTF9URVhUX01BWF9XSURUSF9PUFRJT05TIiwidmFsdWUiLCJwdWxzZVN0cmluZ1Byb3BlcnR5Iiwic3BhY2luZyIsImNvbnRhaW5lciIsInRvcCIsImJvdHRvbSIsIkNPTlRST0xfUEFORUxfU1BBQ0lORyIsImZpcmVQdWxzZUJ1dHRvbiIsImNvbnRlbnQiLCJmaXJlUHVsc2VTdHJpbmdQcm9wZXJ0eSIsImxpc3RlbmVyIiwic3RhcnRQdWxzZSIsImNoaWxkcmVuIiwiY2VudGVyWCIsInVwZGF0ZUVuYWJsZWQiLCJzZXRFbmFibGVkIiwiaXNQdWxzZUZpcmluZ1Byb3BlcnR5IiwibGluayIsImNyZWF0ZUJveCIsInNldFhBbGlnbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU291bmRNb2RlQ29udHJvbFBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG4vKipcclxuICogQ29udHJvbHMgZm9yIHRoZSBzb3VuZCBtb2RlLCB3aGV0aGVyIHRoZSBzcGVha2VyIGVtaXRzIHdhdmVzIGNvbnRpb3VzbHkgb3IgcHVsc2Ugb24gYnV0dG9uIHByZXNzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFBpZXQgR29yaXMgKFVuaXZlcnNpdHkgb2YgTGV1dmVuKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFsaWduR3JvdXAsIE5vZGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9WZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IFNvdW5kQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9Tb3VuZENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBzb3VuZCBmcm9tICcuLi8uLi9zb3VuZC5qcyc7XHJcbmltcG9ydCBTb3VuZFN0cmluZ3MgZnJvbSAnLi4vLi4vU291bmRTdHJpbmdzLmpzJztcclxuaW1wb3J0IFNvdW5kUGFuZWwsIHsgU291bmRQYW5lbE9wdGlvbnMgfSBmcm9tICcuL1NvdW5kUGFuZWwuanMnO1xyXG5pbXBvcnQgUmVmbGVjdGlvbk1vZGVsIGZyb20gJy4uLy4uL3JlZmxlY3Rpb24vUmVmbGVjdGlvbk1vZGVsLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgeU1hcmdpbj86IG51bWJlcjtcclxufTtcclxudHlwZSBTb3VuZE1vZGVDb250cm9sUGFuZWxPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTb3VuZFBhbmVsT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdW5kTW9kZUNvbnRyb2xQYW5lbCBleHRlbmRzIFNvdW5kUGFuZWwge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBSZWZsZWN0aW9uTW9kZWwsIGFsaWduR3JvdXA6IEFsaWduR3JvdXAsIHByb3ZpZGVkT3B0aW9ucz86IFNvdW5kTW9kZUNvbnRyb2xQYW5lbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxTb3VuZE1vZGVDb250cm9sUGFuZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgU291bmRQYW5lbE9wdGlvbnM+KCkoIHtcclxuICAgICAgbWF4V2lkdGg6IFNvdW5kQ29uc3RhbnRzLlBBTkVMX01BWF9XSURUSCxcclxuICAgICAgeU1hcmdpbjogNFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgYm94VGV4dCA9IG5ldyBUZXh0KCBTb3VuZFN0cmluZ3Muc291bmRNb2RlQ29udHJvbFBhbmVsLnRpdGxlU3RyaW5nUHJvcGVydHkgKTtcclxuXHJcbiAgICBjb25zdCByYWRpb0J1dHRvbnMgPSBuZXcgVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cDwnQ09OVElOVU9VUycgfCAnUFVMU0UnPiggbW9kZWwuc291bmRNb2RlUHJvcGVydHksIFsge1xyXG4gICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggU291bmRTdHJpbmdzLnNvdW5kTW9kZUNvbnRyb2xQYW5lbC5jb250aW51b3VzU3RyaW5nUHJvcGVydHksIFNvdW5kQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfVEVYVF9NQVhfV0lEVEhfT1BUSU9OUyApLFxyXG4gICAgICB2YWx1ZTogJ0NPTlRJTlVPVVMnXHJcbiAgICB9LCB7XHJcbiAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IG5ldyBUZXh0KCBTb3VuZFN0cmluZ3Muc291bmRNb2RlQ29udHJvbFBhbmVsLnB1bHNlU3RyaW5nUHJvcGVydHksIFNvdW5kQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfVEVYVF9NQVhfV0lEVEhfT1BUSU9OUyApLFxyXG4gICAgICB2YWx1ZTogJ1BVTFNFJ1xyXG4gICAgfSBdLCB7XHJcbiAgICAgIHNwYWNpbmc6IG9wdGlvbnMueU1hcmdpblxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5ldyBOb2RlKCk7XHJcbiAgICByYWRpb0J1dHRvbnMudG9wID0gYm94VGV4dC5ib3R0b20gKyBTb3VuZENvbnN0YW50cy5DT05UUk9MX1BBTkVMX1NQQUNJTkc7XHJcblxyXG4gICAgY29uc3QgZmlyZVB1bHNlQnV0dG9uID0gbmV3IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbigge1xyXG4gICAgICBjb250ZW50OiBuZXcgVGV4dCggU291bmRTdHJpbmdzLnNvdW5kTW9kZUNvbnRyb2xQYW5lbC5maXJlUHVsc2VTdHJpbmdQcm9wZXJ0eSApLFxyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4gbW9kZWwuc3RhcnRQdWxzZSgpXHJcbiAgICB9ICk7XHJcblxyXG4gICAgZmlyZVB1bHNlQnV0dG9uLnRvcCA9IHJhZGlvQnV0dG9ucy5ib3R0b20gKyBTb3VuZENvbnN0YW50cy5DT05UUk9MX1BBTkVMX1NQQUNJTkc7XHJcblxyXG4gICAgY29udGFpbmVyLmNoaWxkcmVuID0gW1xyXG4gICAgICBib3hUZXh0LFxyXG4gICAgICByYWRpb0J1dHRvbnMsXHJcbiAgICAgIGZpcmVQdWxzZUJ1dHRvblxyXG4gICAgXTtcclxuXHJcbiAgICBmaXJlUHVsc2VCdXR0b24uY2VudGVyWCA9IGNvbnRhaW5lci5jZW50ZXJYO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZUVuYWJsZWQgPSAoKSA9PiB7XHJcbiAgICAgIGZpcmVQdWxzZUJ1dHRvbi5zZXRFbmFibGVkKCBtb2RlbC5zb3VuZE1vZGVQcm9wZXJ0eS52YWx1ZSAhPT0gJ0NPTlRJTlVPVVMnICYmICFtb2RlbC5pc1B1bHNlRmlyaW5nUHJvcGVydHkudmFsdWUgKTtcclxuICAgIH07XHJcblxyXG4gICAgbW9kZWwuc291bmRNb2RlUHJvcGVydHkubGluayggdXBkYXRlRW5hYmxlZCApO1xyXG4gICAgbW9kZWwuaXNQdWxzZUZpcmluZ1Byb3BlcnR5LmxpbmsoIHVwZGF0ZUVuYWJsZWQgKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gYWxpZ25Hcm91cC5jcmVhdGVCb3goIGNvbnRhaW5lciApO1xyXG4gICAgY29udGVudC5zZXRYQWxpZ24oICdjZW50ZXInICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNvdW5kLnJlZ2lzdGVyKCAnU291bmRNb2RlQ29udHJvbFBhbmVsJywgU291bmRNb2RlQ29udHJvbFBhbmVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFxQkEsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzFFLE9BQU9DLHFCQUFxQixNQUFNLHFEQUFxRDtBQUN2RixPQUFPQyw0QkFBNEIsTUFBTSxvREFBb0Q7QUFDN0YsT0FBT0MsY0FBYyxNQUFNLGdDQUFnQztBQUMzRCxPQUFPQyxLQUFLLE1BQU0sZ0JBQWdCO0FBQ2xDLE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsVUFBVSxNQUE2QixpQkFBaUI7QUFFL0QsT0FBT0MsU0FBUyxNQUFNLHVDQUF1QztBQU83RCxlQUFlLE1BQU1DLHFCQUFxQixTQUFTRixVQUFVLENBQUM7RUFFckRHLFdBQVdBLENBQUVDLEtBQXNCLEVBQUVDLFVBQXNCLEVBQUVDLGVBQThDLEVBQUc7SUFFbkgsTUFBTUMsT0FBTyxHQUFHTixTQUFTLENBQStELENBQUMsQ0FBRTtNQUN6Rk8sUUFBUSxFQUFFWCxjQUFjLENBQUNZLGVBQWU7TUFDeENDLE9BQU8sRUFBRTtJQUNYLENBQUMsRUFBRUosZUFBZ0IsQ0FBQztJQUVwQixNQUFNSyxPQUFPLEdBQUcsSUFBSWpCLElBQUksQ0FBRUssWUFBWSxDQUFDYSxxQkFBcUIsQ0FBQ0MsbUJBQW9CLENBQUM7SUFFbEYsTUFBTUMsWUFBWSxHQUFHLElBQUlsQiw0QkFBNEIsQ0FBMEJRLEtBQUssQ0FBQ1csaUJBQWlCLEVBQUUsQ0FBRTtNQUN4R0MsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSXRCLElBQUksQ0FBRUssWUFBWSxDQUFDYSxxQkFBcUIsQ0FBQ0ssd0JBQXdCLEVBQUVwQixjQUFjLENBQUNxQixvQ0FBcUMsQ0FBQztNQUM5SUMsS0FBSyxFQUFFO0lBQ1QsQ0FBQyxFQUFFO01BQ0RILFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUl0QixJQUFJLENBQUVLLFlBQVksQ0FBQ2EscUJBQXFCLENBQUNRLG1CQUFtQixFQUFFdkIsY0FBYyxDQUFDcUIsb0NBQXFDLENBQUM7TUFDeklDLEtBQUssRUFBRTtJQUNULENBQUMsQ0FBRSxFQUFFO01BQ0hFLE9BQU8sRUFBRWQsT0FBTyxDQUFDRztJQUNuQixDQUFFLENBQUM7SUFFSCxNQUFNWSxTQUFTLEdBQUcsSUFBSTdCLElBQUksQ0FBQyxDQUFDO0lBQzVCcUIsWUFBWSxDQUFDUyxHQUFHLEdBQUdaLE9BQU8sQ0FBQ2EsTUFBTSxHQUFHM0IsY0FBYyxDQUFDNEIscUJBQXFCO0lBRXhFLE1BQU1DLGVBQWUsR0FBRyxJQUFJL0IscUJBQXFCLENBQUU7TUFDakRnQyxPQUFPLEVBQUUsSUFBSWpDLElBQUksQ0FBRUssWUFBWSxDQUFDYSxxQkFBcUIsQ0FBQ2dCLHVCQUF3QixDQUFDO01BQy9FQyxRQUFRLEVBQUVBLENBQUEsS0FBTXpCLEtBQUssQ0FBQzBCLFVBQVUsQ0FBQztJQUNuQyxDQUFFLENBQUM7SUFFSEosZUFBZSxDQUFDSCxHQUFHLEdBQUdULFlBQVksQ0FBQ1UsTUFBTSxHQUFHM0IsY0FBYyxDQUFDNEIscUJBQXFCO0lBRWhGSCxTQUFTLENBQUNTLFFBQVEsR0FBRyxDQUNuQnBCLE9BQU8sRUFDUEcsWUFBWSxFQUNaWSxlQUFlLENBQ2hCO0lBRURBLGVBQWUsQ0FBQ00sT0FBTyxHQUFHVixTQUFTLENBQUNVLE9BQU87SUFFM0MsTUFBTUMsYUFBYSxHQUFHQSxDQUFBLEtBQU07TUFDMUJQLGVBQWUsQ0FBQ1EsVUFBVSxDQUFFOUIsS0FBSyxDQUFDVyxpQkFBaUIsQ0FBQ0ksS0FBSyxLQUFLLFlBQVksSUFBSSxDQUFDZixLQUFLLENBQUMrQixxQkFBcUIsQ0FBQ2hCLEtBQU0sQ0FBQztJQUNwSCxDQUFDO0lBRURmLEtBQUssQ0FBQ1csaUJBQWlCLENBQUNxQixJQUFJLENBQUVILGFBQWMsQ0FBQztJQUM3QzdCLEtBQUssQ0FBQytCLHFCQUFxQixDQUFDQyxJQUFJLENBQUVILGFBQWMsQ0FBQztJQUVqRCxNQUFNTixPQUFPLEdBQUd0QixVQUFVLENBQUNnQyxTQUFTLENBQUVmLFNBQVUsQ0FBQztJQUNqREssT0FBTyxDQUFDVyxTQUFTLENBQUUsUUFBUyxDQUFDO0lBRTdCLEtBQUssQ0FBRVgsT0FBTyxFQUFFcEIsT0FBUSxDQUFDO0VBQzNCO0FBQ0Y7QUFFQVQsS0FBSyxDQUFDeUMsUUFBUSxDQUFFLHVCQUF1QixFQUFFckMscUJBQXNCLENBQUMifQ==