// Copyright 2022, University of Colorado Boulder
/**
 * Shows the controls for the reflection wall, its position and rotation.
 *
 * @author Piet Goris (University of Leuven)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Node } from '../../../../scenery/js/imports.js';
import SoundConstants from '../../common/SoundConstants.js';
import sound from '../../sound.js';
import SoundStrings from '../../SoundStrings.js';
import PropertyControlSlider from './PropertyControlSlider.js';
import SoundPanel from './SoundPanel.js';
export default class ReflectionControlPanel extends SoundPanel {
  constructor(model, alignGroup, providedOptions) {
    const options = optionize()({
      maxWidth: SoundConstants.PANEL_MAX_WIDTH,
      yMargin: 4
    }, providedOptions);
    const wallPositionXControl = new PropertyControlSlider(SoundStrings.reflectionControlPanel.positionSliderStringProperty, model.wallPositionXProperty);
    const wallAngleControl = new PropertyControlSlider(SoundStrings.reflectionControlPanel.rotationSliderStringProperty, model.wallAngleProperty);
    const centerX = wallPositionXControl.centerX;
    wallAngleControl.centerX = centerX;

    // Vertical layout
    wallAngleControl.top = wallPositionXControl.bottom + options.yMargin;
    const container = new Node();
    container.children = [wallPositionXControl, wallAngleControl];
    const content = alignGroup.createBox(container);
    super(content, options);
  }
}
sound.register('ReflectionControlPanel', ReflectionControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwiU291bmRDb25zdGFudHMiLCJzb3VuZCIsIlNvdW5kU3RyaW5ncyIsIlByb3BlcnR5Q29udHJvbFNsaWRlciIsIlNvdW5kUGFuZWwiLCJSZWZsZWN0aW9uQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsImFsaWduR3JvdXAiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibWF4V2lkdGgiLCJQQU5FTF9NQVhfV0lEVEgiLCJ5TWFyZ2luIiwid2FsbFBvc2l0aW9uWENvbnRyb2wiLCJyZWZsZWN0aW9uQ29udHJvbFBhbmVsIiwicG9zaXRpb25TbGlkZXJTdHJpbmdQcm9wZXJ0eSIsIndhbGxQb3NpdGlvblhQcm9wZXJ0eSIsIndhbGxBbmdsZUNvbnRyb2wiLCJyb3RhdGlvblNsaWRlclN0cmluZ1Byb3BlcnR5Iiwid2FsbEFuZ2xlUHJvcGVydHkiLCJjZW50ZXJYIiwidG9wIiwiYm90dG9tIiwiY29udGFpbmVyIiwiY2hpbGRyZW4iLCJjb250ZW50IiwiY3JlYXRlQm94IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWZsZWN0aW9uQ29udHJvbFBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLyoqXHJcbiAqIFNob3dzIHRoZSBjb250cm9scyBmb3IgdGhlIHJlZmxlY3Rpb24gd2FsbCwgaXRzIHBvc2l0aW9uIGFuZCByb3RhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBQaWV0IEdvcmlzIChVbml2ZXJzaXR5IG9mIExldXZlbilcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgQWxpZ25Hcm91cCwgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTb3VuZENvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vU291bmRDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgc291bmQgZnJvbSAnLi4vLi4vc291bmQuanMnO1xyXG5pbXBvcnQgUmVmbGVjdGlvbk1vZGVsIGZyb20gJy4uLy4uL3JlZmxlY3Rpb24vUmVmbGVjdGlvbk1vZGVsLmpzJztcclxuaW1wb3J0IFNvdW5kU3RyaW5ncyBmcm9tICcuLi8uLi9Tb3VuZFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUHJvcGVydHlDb250cm9sU2xpZGVyIGZyb20gJy4vUHJvcGVydHlDb250cm9sU2xpZGVyLmpzJztcclxuaW1wb3J0IFNvdW5kUGFuZWwsIHsgU291bmRQYW5lbE9wdGlvbnMgfSBmcm9tICcuL1NvdW5kUGFuZWwuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbnR5cGUgUmVmbGVjdGlvbkNvbnRyb2xQYW5lbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFNvdW5kUGFuZWxPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmbGVjdGlvbkNvbnRyb2xQYW5lbCBleHRlbmRzIFNvdW5kUGFuZWwge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBSZWZsZWN0aW9uTW9kZWwsIGFsaWduR3JvdXA6IEFsaWduR3JvdXAsIHByb3ZpZGVkT3B0aW9ucz86IFJlZmxlY3Rpb25Db250cm9sUGFuZWxPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UmVmbGVjdGlvbkNvbnRyb2xQYW5lbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBTb3VuZFBhbmVsT3B0aW9ucz4oKSgge1xyXG4gICAgICBtYXhXaWR0aDogU291bmRDb25zdGFudHMuUEFORUxfTUFYX1dJRFRILFxyXG4gICAgICB5TWFyZ2luOiA0XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB3YWxsUG9zaXRpb25YQ29udHJvbCA9IG5ldyBQcm9wZXJ0eUNvbnRyb2xTbGlkZXIoIFNvdW5kU3RyaW5ncy5yZWZsZWN0aW9uQ29udHJvbFBhbmVsLnBvc2l0aW9uU2xpZGVyU3RyaW5nUHJvcGVydHksIG1vZGVsLndhbGxQb3NpdGlvblhQcm9wZXJ0eSApO1xyXG4gICAgY29uc3Qgd2FsbEFuZ2xlQ29udHJvbCA9IG5ldyBQcm9wZXJ0eUNvbnRyb2xTbGlkZXIoIFNvdW5kU3RyaW5ncy5yZWZsZWN0aW9uQ29udHJvbFBhbmVsLnJvdGF0aW9uU2xpZGVyU3RyaW5nUHJvcGVydHksIG1vZGVsLndhbGxBbmdsZVByb3BlcnR5ICk7XHJcblxyXG4gICAgY29uc3QgY2VudGVyWCA9IHdhbGxQb3NpdGlvblhDb250cm9sLmNlbnRlclg7XHJcbiAgICB3YWxsQW5nbGVDb250cm9sLmNlbnRlclggPSBjZW50ZXJYO1xyXG5cclxuICAgIC8vIFZlcnRpY2FsIGxheW91dFxyXG4gICAgd2FsbEFuZ2xlQ29udHJvbC50b3AgPSB3YWxsUG9zaXRpb25YQ29udHJvbC5ib3R0b20gKyBvcHRpb25zLnlNYXJnaW47XHJcblxyXG4gICAgY29uc3QgY29udGFpbmVyID0gbmV3IE5vZGUoKTtcclxuXHJcbiAgICBjb250YWluZXIuY2hpbGRyZW4gPSBbXHJcbiAgICAgIHdhbGxQb3NpdGlvblhDb250cm9sLFxyXG4gICAgICB3YWxsQW5nbGVDb250cm9sXHJcbiAgICBdO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBhbGlnbkdyb3VwLmNyZWF0ZUJveCggY29udGFpbmVyICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNvdW5kLnJlZ2lzdGVyKCAnUmVmbGVjdGlvbkNvbnRyb2xQYW5lbCcsIFJlZmxlY3Rpb25Db250cm9sUGFuZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLFNBQXFCQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3BFLE9BQU9DLGNBQWMsTUFBTSxnQ0FBZ0M7QUFDM0QsT0FBT0MsS0FBSyxNQUFNLGdCQUFnQjtBQUVsQyxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLHFCQUFxQixNQUFNLDRCQUE0QjtBQUM5RCxPQUFPQyxVQUFVLE1BQTZCLGlCQUFpQjtBQUsvRCxlQUFlLE1BQU1DLHNCQUFzQixTQUFTRCxVQUFVLENBQUM7RUFFdERFLFdBQVdBLENBQUVDLEtBQXNCLEVBQUVDLFVBQXNCLEVBQUVDLGVBQStDLEVBQUc7SUFFcEgsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQWdFLENBQUMsQ0FBRTtNQUMxRmEsUUFBUSxFQUFFWCxjQUFjLENBQUNZLGVBQWU7TUFDeENDLE9BQU8sRUFBRTtJQUNYLENBQUMsRUFBRUosZUFBZ0IsQ0FBQztJQUVwQixNQUFNSyxvQkFBb0IsR0FBRyxJQUFJWCxxQkFBcUIsQ0FBRUQsWUFBWSxDQUFDYSxzQkFBc0IsQ0FBQ0MsNEJBQTRCLEVBQUVULEtBQUssQ0FBQ1UscUJBQXNCLENBQUM7SUFDdkosTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSWYscUJBQXFCLENBQUVELFlBQVksQ0FBQ2Esc0JBQXNCLENBQUNJLDRCQUE0QixFQUFFWixLQUFLLENBQUNhLGlCQUFrQixDQUFDO0lBRS9JLE1BQU1DLE9BQU8sR0FBR1Asb0JBQW9CLENBQUNPLE9BQU87SUFDNUNILGdCQUFnQixDQUFDRyxPQUFPLEdBQUdBLE9BQU87O0lBRWxDO0lBQ0FILGdCQUFnQixDQUFDSSxHQUFHLEdBQUdSLG9CQUFvQixDQUFDUyxNQUFNLEdBQUdiLE9BQU8sQ0FBQ0csT0FBTztJQUVwRSxNQUFNVyxTQUFTLEdBQUcsSUFBSXpCLElBQUksQ0FBQyxDQUFDO0lBRTVCeUIsU0FBUyxDQUFDQyxRQUFRLEdBQUcsQ0FDbkJYLG9CQUFvQixFQUNwQkksZ0JBQWdCLENBQ2pCO0lBRUQsTUFBTVEsT0FBTyxHQUFHbEIsVUFBVSxDQUFDbUIsU0FBUyxDQUFFSCxTQUFVLENBQUM7SUFFakQsS0FBSyxDQUFFRSxPQUFPLEVBQUVoQixPQUFRLENBQUM7RUFDM0I7QUFDRjtBQUVBVCxLQUFLLENBQUMyQixRQUFRLENBQUUsd0JBQXdCLEVBQUV2QixzQkFBdUIsQ0FBQyJ9