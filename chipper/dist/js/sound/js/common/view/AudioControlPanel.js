// Copyright 2022-2023, University of Colorado Boulder
/**
 * Shows the controls of the audio, wheter the audio is enabled and if the source is sampled at the source or at the listener.
 *
 * @author Piet Goris (University of Leuven)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import SoundConstants from '../../common/SoundConstants.js';
import sound from '../../sound.js';
import SoundStrings from '../../SoundStrings.js';
import SoundPanel from './SoundPanel.js';
export default class AudioControlPanel extends SoundPanel {
  constructor(model, alignGroup, providedOptions) {
    const options = optionize()({
      maxWidth: SoundConstants.PANEL_MAX_WIDTH,
      yMargin: 4
    }, providedOptions);
    const boxText = new Text(SoundStrings.audioControlPanel.titleStringProperty);
    const graphCheckbox = new Checkbox(model.isAudioEnabledProperty, new Text(SoundStrings.audioControlPanel.audioEnabledStringProperty, SoundConstants.CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS), {
      boxWidth: 15
    });
    graphCheckbox.top = boxText.bottom + SoundConstants.CONTROL_PANEL_SPACING;
    const children = [boxText, graphCheckbox];
    let radioButtons;
    if (model.audioControlSettingProperty) {
      radioButtons = new VerticalAquaRadioButtonGroup(model.audioControlSettingProperty, [{
        createNode: () => new Text(SoundStrings.audioControlPanel.speakerStringProperty, SoundConstants.CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS),
        value: 'SPEAKER'
      }, {
        createNode: () => new Text(SoundStrings.audioControlPanel.listenerStringProperty, SoundConstants.CONTROL_PANEL_TEXT_MAX_WIDTH_OPTIONS),
        value: 'LISTENER'
      }], {
        spacing: options.yMargin
      });
      radioButtons.top = graphCheckbox.bottom + SoundConstants.CONTROL_PANEL_SPACING;
      children.push(radioButtons);
    }
    const container = new Node({
      children: children
    });
    const content = alignGroup.createBox(container);
    content.setXAlign('left');
    super(content, options);
  }
}
sound.register('AudioControlPanel', AudioControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwiVGV4dCIsIkNoZWNrYm94IiwiVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cCIsIlNvdW5kQ29uc3RhbnRzIiwic291bmQiLCJTb3VuZFN0cmluZ3MiLCJTb3VuZFBhbmVsIiwiQXVkaW9Db250cm9sUGFuZWwiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwiYWxpZ25Hcm91cCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJtYXhXaWR0aCIsIlBBTkVMX01BWF9XSURUSCIsInlNYXJnaW4iLCJib3hUZXh0IiwiYXVkaW9Db250cm9sUGFuZWwiLCJ0aXRsZVN0cmluZ1Byb3BlcnR5IiwiZ3JhcGhDaGVja2JveCIsImlzQXVkaW9FbmFibGVkUHJvcGVydHkiLCJhdWRpb0VuYWJsZWRTdHJpbmdQcm9wZXJ0eSIsIkNPTlRST0xfUEFORUxfVEVYVF9NQVhfV0lEVEhfT1BUSU9OUyIsImJveFdpZHRoIiwidG9wIiwiYm90dG9tIiwiQ09OVFJPTF9QQU5FTF9TUEFDSU5HIiwiY2hpbGRyZW4iLCJyYWRpb0J1dHRvbnMiLCJhdWRpb0NvbnRyb2xTZXR0aW5nUHJvcGVydHkiLCJjcmVhdGVOb2RlIiwic3BlYWtlclN0cmluZ1Byb3BlcnR5IiwidmFsdWUiLCJsaXN0ZW5lclN0cmluZ1Byb3BlcnR5Iiwic3BhY2luZyIsInB1c2giLCJjb250YWluZXIiLCJjb250ZW50IiwiY3JlYXRlQm94Iiwic2V0WEFsaWduIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBdWRpb0NvbnRyb2xQYW5lbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLyoqXHJcbiAqIFNob3dzIHRoZSBjb250cm9scyBvZiB0aGUgYXVkaW8sIHdoZXRlciB0aGUgYXVkaW8gaXMgZW5hYmxlZCBhbmQgaWYgdGhlIHNvdXJjZSBpcyBzYW1wbGVkIGF0IHRoZSBzb3VyY2Ugb3IgYXQgdGhlIGxpc3RlbmVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFBpZXQgR29yaXMgKFVuaXZlcnNpdHkgb2YgTGV1dmVuKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IEFsaWduR3JvdXAsIE5vZGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0NoZWNrYm94LmpzJztcclxuaW1wb3J0IFZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1ZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgU291bmRDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1NvdW5kQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHNvdW5kIGZyb20gJy4uLy4uL3NvdW5kLmpzJztcclxuaW1wb3J0IFNvdW5kTW9kZWwgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1NvdW5kTW9kZWwuanMnO1xyXG5pbXBvcnQgU291bmRTdHJpbmdzIGZyb20gJy4uLy4uL1NvdW5kU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBTb3VuZFBhbmVsLCB7IFNvdW5kUGFuZWxPcHRpb25zIH0gZnJvbSAnLi9Tb3VuZFBhbmVsLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG50eXBlIEF1ZGlvQ29udHJvbFBhbmVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU291bmRQYW5lbE9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdWRpb0NvbnRyb2xQYW5lbCBleHRlbmRzIFNvdW5kUGFuZWwge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBTb3VuZE1vZGVsICYgeyBhdWRpb0NvbnRyb2xTZXR0aW5nUHJvcGVydHk/OiBQcm9wZXJ0eTwnU1BFQUtFUicgfCAnTElTVEVORVInPiB9LCBhbGlnbkdyb3VwOiBBbGlnbkdyb3VwLCBwcm92aWRlZE9wdGlvbnM/OiBBdWRpb0NvbnRyb2xQYW5lbE9wdGlvbnMgKSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEF1ZGlvQ29udHJvbFBhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIFNvdW5kUGFuZWxPcHRpb25zPigpKCB7XHJcbiAgICAgIG1heFdpZHRoOiBTb3VuZENvbnN0YW50cy5QQU5FTF9NQVhfV0lEVEgsXHJcbiAgICAgIHlNYXJnaW46IDRcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGJveFRleHQgPSBuZXcgVGV4dCggU291bmRTdHJpbmdzLmF1ZGlvQ29udHJvbFBhbmVsLnRpdGxlU3RyaW5nUHJvcGVydHkgKTtcclxuICAgIGNvbnN0IGdyYXBoQ2hlY2tib3ggPSBuZXcgQ2hlY2tib3goXHJcbiAgICAgIG1vZGVsLmlzQXVkaW9FbmFibGVkUHJvcGVydHksXHJcbiAgICAgIG5ldyBUZXh0KCBTb3VuZFN0cmluZ3MuYXVkaW9Db250cm9sUGFuZWwuYXVkaW9FbmFibGVkU3RyaW5nUHJvcGVydHksIFNvdW5kQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfVEVYVF9NQVhfV0lEVEhfT1BUSU9OUyApLFxyXG4gICAgICB7XHJcbiAgICAgICAgYm94V2lkdGg6IDE1XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICBncmFwaENoZWNrYm94LnRvcCA9IGJveFRleHQuYm90dG9tICsgU291bmRDb25zdGFudHMuQ09OVFJPTF9QQU5FTF9TUEFDSU5HO1xyXG5cclxuXHJcbiAgICBjb25zdCBjaGlsZHJlbjogTm9kZVtdID0gWyBib3hUZXh0LCBncmFwaENoZWNrYm94IF07XHJcbiAgICBsZXQgcmFkaW9CdXR0b25zO1xyXG4gICAgaWYgKCBtb2RlbC5hdWRpb0NvbnRyb2xTZXR0aW5nUHJvcGVydHkgKSB7XHJcbiAgICAgIHJhZGlvQnV0dG9ucyA9IG5ldyBWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwPCdTUEVBS0VSJyB8ICdMSVNURU5FUic+KCBtb2RlbC5hdWRpb0NvbnRyb2xTZXR0aW5nUHJvcGVydHksIFsge1xyXG4gICAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IG5ldyBUZXh0KCBTb3VuZFN0cmluZ3MuYXVkaW9Db250cm9sUGFuZWwuc3BlYWtlclN0cmluZ1Byb3BlcnR5LCBTb3VuZENvbnN0YW50cy5DT05UUk9MX1BBTkVMX1RFWFRfTUFYX1dJRFRIX09QVElPTlMgKSxcclxuICAgICAgICB2YWx1ZTogJ1NQRUFLRVInXHJcbiAgICAgIH0sIHtcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggU291bmRTdHJpbmdzLmF1ZGlvQ29udHJvbFBhbmVsLmxpc3RlbmVyU3RyaW5nUHJvcGVydHksIFNvdW5kQ29uc3RhbnRzLkNPTlRST0xfUEFORUxfVEVYVF9NQVhfV0lEVEhfT1BUSU9OUyApLFxyXG4gICAgICAgIHZhbHVlOiAnTElTVEVORVInXHJcbiAgICAgIH0gXSwge1xyXG4gICAgICAgIHNwYWNpbmc6IG9wdGlvbnMueU1hcmdpblxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICByYWRpb0J1dHRvbnMudG9wID0gZ3JhcGhDaGVja2JveC5ib3R0b20gKyBTb3VuZENvbnN0YW50cy5DT05UUk9MX1BBTkVMX1NQQUNJTkc7XHJcblxyXG4gICAgICBjaGlsZHJlbi5wdXNoKCByYWRpb0J1dHRvbnMgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250YWluZXIgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gYWxpZ25Hcm91cC5jcmVhdGVCb3goIGNvbnRhaW5lciApO1xyXG4gICAgY29udGVudC5zZXRYQWxpZ24oICdsZWZ0JyApO1xyXG5cclxuICAgIHN1cGVyKCBjb250ZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5zb3VuZC5yZWdpc3RlciggJ0F1ZGlvQ29udHJvbFBhbmVsJywgQXVkaW9Db250cm9sUGFuZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLFNBQXFCQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDMUUsT0FBT0MsUUFBUSxNQUFNLGdDQUFnQztBQUNyRCxPQUFPQyw0QkFBNEIsTUFBTSxvREFBb0Q7QUFDN0YsT0FBT0MsY0FBYyxNQUFNLGdDQUFnQztBQUMzRCxPQUFPQyxLQUFLLE1BQU0sZ0JBQWdCO0FBRWxDLE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsVUFBVSxNQUE2QixpQkFBaUI7QUFLL0QsZUFBZSxNQUFNQyxpQkFBaUIsU0FBU0QsVUFBVSxDQUFDO0VBRWpERSxXQUFXQSxDQUFFQyxLQUFzRixFQUFFQyxVQUFzQixFQUFFQyxlQUEwQyxFQUFHO0lBQy9LLE1BQU1DLE9BQU8sR0FBR2QsU0FBUyxDQUEyRCxDQUFDLENBQUU7TUFDckZlLFFBQVEsRUFBRVYsY0FBYyxDQUFDVyxlQUFlO01BQ3hDQyxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsTUFBTUssT0FBTyxHQUFHLElBQUloQixJQUFJLENBQUVLLFlBQVksQ0FBQ1ksaUJBQWlCLENBQUNDLG1CQUFvQixDQUFDO0lBQzlFLE1BQU1DLGFBQWEsR0FBRyxJQUFJbEIsUUFBUSxDQUNoQ1EsS0FBSyxDQUFDVyxzQkFBc0IsRUFDNUIsSUFBSXBCLElBQUksQ0FBRUssWUFBWSxDQUFDWSxpQkFBaUIsQ0FBQ0ksMEJBQTBCLEVBQUVsQixjQUFjLENBQUNtQixvQ0FBcUMsQ0FBQyxFQUMxSDtNQUNFQyxRQUFRLEVBQUU7SUFDWixDQUFFLENBQUM7SUFFTEosYUFBYSxDQUFDSyxHQUFHLEdBQUdSLE9BQU8sQ0FBQ1MsTUFBTSxHQUFHdEIsY0FBYyxDQUFDdUIscUJBQXFCO0lBR3pFLE1BQU1DLFFBQWdCLEdBQUcsQ0FBRVgsT0FBTyxFQUFFRyxhQUFhLENBQUU7SUFDbkQsSUFBSVMsWUFBWTtJQUNoQixJQUFLbkIsS0FBSyxDQUFDb0IsMkJBQTJCLEVBQUc7TUFDdkNELFlBQVksR0FBRyxJQUFJMUIsNEJBQTRCLENBQTBCTyxLQUFLLENBQUNvQiwyQkFBMkIsRUFBRSxDQUFFO1FBQzVHQyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJOUIsSUFBSSxDQUFFSyxZQUFZLENBQUNZLGlCQUFpQixDQUFDYyxxQkFBcUIsRUFBRTVCLGNBQWMsQ0FBQ21CLG9DQUFxQyxDQUFDO1FBQ3ZJVSxLQUFLLEVBQUU7TUFDVCxDQUFDLEVBQUU7UUFDREYsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSTlCLElBQUksQ0FBRUssWUFBWSxDQUFDWSxpQkFBaUIsQ0FBQ2dCLHNCQUFzQixFQUFFOUIsY0FBYyxDQUFDbUIsb0NBQXFDLENBQUM7UUFDeElVLEtBQUssRUFBRTtNQUNULENBQUMsQ0FBRSxFQUFFO1FBQ0hFLE9BQU8sRUFBRXRCLE9BQU8sQ0FBQ0c7TUFDbkIsQ0FBRSxDQUFDO01BRUhhLFlBQVksQ0FBQ0osR0FBRyxHQUFHTCxhQUFhLENBQUNNLE1BQU0sR0FBR3RCLGNBQWMsQ0FBQ3VCLHFCQUFxQjtNQUU5RUMsUUFBUSxDQUFDUSxJQUFJLENBQUVQLFlBQWEsQ0FBQztJQUMvQjtJQUVBLE1BQU1RLFNBQVMsR0FBRyxJQUFJckMsSUFBSSxDQUFFO01BQzFCNEIsUUFBUSxFQUFFQTtJQUNaLENBQUUsQ0FBQztJQUVILE1BQU1VLE9BQU8sR0FBRzNCLFVBQVUsQ0FBQzRCLFNBQVMsQ0FBRUYsU0FBVSxDQUFDO0lBQ2pEQyxPQUFPLENBQUNFLFNBQVMsQ0FBRSxNQUFPLENBQUM7SUFFM0IsS0FBSyxDQUFFRixPQUFPLEVBQUV6QixPQUFRLENBQUM7RUFDM0I7QUFDRjtBQUVBUixLQUFLLENBQUNvQyxRQUFRLENBQUUsbUJBQW1CLEVBQUVqQyxpQkFBa0IsQ0FBQyJ9