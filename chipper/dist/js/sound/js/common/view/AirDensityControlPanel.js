// Copyright 2022, University of Colorado Boulder

/**
 * Shows the controls for the pressure box.
 *
 * @author Piet Goris (University of Leuven)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Text, VBox } from '../../../../scenery/js/imports.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import SoundConstants from '../../common/SoundConstants.js';
import sound from '../../sound.js';
import SoundStrings from '../../SoundStrings.js';
import PropertyControlSlider from './PropertyControlSlider.js';
import SoundPanel from './SoundPanel.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class AirDensityControlPanel extends SoundPanel {
  constructor(model, alignGroup, providedOptions) {
    const options = optionize()({
      maxWidth: SoundConstants.PANEL_MAX_WIDTH,
      yMargin: 4
    }, providedOptions);
    const resetButton = new RectangularPushButton({
      content: new Text(SoundStrings.airDensityControlPanel.resetStringProperty),
      listener: () => {
        model.pressureProperty.set(1);
      }
    });
    const airPressureContol = new PropertyControlSlider(SoundStrings.airDensityControlPanel.titleStringProperty, model.pressureProperty);
    const container = new VBox({
      spacing: 6,
      children: [airPressureContol, resetButton]
    });
    const content = alignGroup.createBox(container);
    content.setXAlign('center');
    super(content, options);
  }
}
sound.register('AirDensityControlPanel', AirDensityControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwiVkJveCIsIlJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiIsIlNvdW5kQ29uc3RhbnRzIiwic291bmQiLCJTb3VuZFN0cmluZ3MiLCJQcm9wZXJ0eUNvbnRyb2xTbGlkZXIiLCJTb3VuZFBhbmVsIiwib3B0aW9uaXplIiwiQWlyRGVuc2l0eUNvbnRyb2xQYW5lbCIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJhbGlnbkdyb3VwIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIm1heFdpZHRoIiwiUEFORUxfTUFYX1dJRFRIIiwieU1hcmdpbiIsInJlc2V0QnV0dG9uIiwiY29udGVudCIsImFpckRlbnNpdHlDb250cm9sUGFuZWwiLCJyZXNldFN0cmluZ1Byb3BlcnR5IiwibGlzdGVuZXIiLCJwcmVzc3VyZVByb3BlcnR5Iiwic2V0IiwiYWlyUHJlc3N1cmVDb250b2wiLCJ0aXRsZVN0cmluZ1Byb3BlcnR5IiwiY29udGFpbmVyIiwic3BhY2luZyIsImNoaWxkcmVuIiwiY3JlYXRlQm94Iiwic2V0WEFsaWduIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBaXJEZW5zaXR5Q29udHJvbFBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaG93cyB0aGUgY29udHJvbHMgZm9yIHRoZSBwcmVzc3VyZSBib3guXHJcbiAqXHJcbiAqIEBhdXRob3IgUGlldCBHb3JpcyAoVW5pdmVyc2l0eSBvZiBMZXV2ZW4pXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQWxpZ25Hcm91cCwgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclB1c2hCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IFNvdW5kQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9Tb3VuZENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBzb3VuZCBmcm9tICcuLi8uLi9zb3VuZC5qcyc7XHJcbmltcG9ydCBTb3VuZFN0cmluZ3MgZnJvbSAnLi4vLi4vU291bmRTdHJpbmdzLmpzJztcclxuaW1wb3J0IFByb3BlcnR5Q29udHJvbFNsaWRlciBmcm9tICcuL1Byb3BlcnR5Q29udHJvbFNsaWRlci5qcyc7XHJcbmltcG9ydCBTb3VuZFBhbmVsLCB7IFNvdW5kUGFuZWxPcHRpb25zIH0gZnJvbSAnLi9Tb3VuZFBhbmVsLmpzJztcclxuaW1wb3J0IFByZXNzdXJlTW9kZWwgZnJvbSAnLi4vLi4vYWlyLXByZXNzdXJlL1ByZXNzdXJlTW9kZWwuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5leHBvcnQgdHlwZSBBaXJEZW5zaXR5Q29udHJvbFBhbmVsT3B0aW9ucyA9IFNvdW5kUGFuZWxPcHRpb25zICYgU2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBaXJEZW5zaXR5Q29udHJvbFBhbmVsIGV4dGVuZHMgU291bmRQYW5lbCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IFByZXNzdXJlTW9kZWwsIGFsaWduR3JvdXA6IEFsaWduR3JvdXAsIHByb3ZpZGVkT3B0aW9ucz86IEFpckRlbnNpdHlDb250cm9sUGFuZWxPcHRpb25zICkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxBaXJEZW5zaXR5Q29udHJvbFBhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIFNvdW5kUGFuZWxPcHRpb25zPigpKCB7XHJcbiAgICAgIG1heFdpZHRoOiBTb3VuZENvbnN0YW50cy5QQU5FTF9NQVhfV0lEVEgsXHJcbiAgICAgIHlNYXJnaW46IDRcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IHJlc2V0QnV0dG9uID0gbmV3IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbigge1xyXG4gICAgICBjb250ZW50OiBuZXcgVGV4dCggU291bmRTdHJpbmdzLmFpckRlbnNpdHlDb250cm9sUGFuZWwucmVzZXRTdHJpbmdQcm9wZXJ0eSApLFxyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG4gICAgICAgIG1vZGVsLnByZXNzdXJlUHJvcGVydHkuc2V0KCAxICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBhaXJQcmVzc3VyZUNvbnRvbCA9IG5ldyBQcm9wZXJ0eUNvbnRyb2xTbGlkZXIoIFNvdW5kU3RyaW5ncy5haXJEZW5zaXR5Q29udHJvbFBhbmVsLnRpdGxlU3RyaW5nUHJvcGVydHksIG1vZGVsLnByZXNzdXJlUHJvcGVydHkgKTtcclxuXHJcbiAgICBjb25zdCBjb250YWluZXIgPSBuZXcgVkJveCgge1xyXG4gICAgICBzcGFjaW5nOiA2LFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIGFpclByZXNzdXJlQ29udG9sLFxyXG4gICAgICAgIHJlc2V0QnV0dG9uXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gYWxpZ25Hcm91cC5jcmVhdGVCb3goIGNvbnRhaW5lciApO1xyXG4gICAgY29udGVudC5zZXRYQWxpZ24oICdjZW50ZXInICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnQsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNvdW5kLnJlZ2lzdGVyKCAnQWlyRGVuc2l0eUNvbnRyb2xQYW5lbCcsIEFpckRlbnNpdHlDb250cm9sUGFuZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFxQkEsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzFFLE9BQU9DLHFCQUFxQixNQUFNLHFEQUFxRDtBQUN2RixPQUFPQyxjQUFjLE1BQU0sZ0NBQWdDO0FBQzNELE9BQU9DLEtBQUssTUFBTSxnQkFBZ0I7QUFDbEMsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxxQkFBcUIsTUFBTSw0QkFBNEI7QUFDOUQsT0FBT0MsVUFBVSxNQUE2QixpQkFBaUI7QUFFL0QsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFLbkYsZUFBZSxNQUFNQyxzQkFBc0IsU0FBU0YsVUFBVSxDQUFDO0VBRXRERyxXQUFXQSxDQUFFQyxLQUFvQixFQUFFQyxVQUFzQixFQUFFQyxlQUErQyxFQUFHO0lBQ2xILE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUFnRSxDQUFDLENBQUU7TUFDMUZPLFFBQVEsRUFBRVosY0FBYyxDQUFDYSxlQUFlO01BQ3hDQyxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsTUFBTUssV0FBVyxHQUFHLElBQUloQixxQkFBcUIsQ0FBRTtNQUM3Q2lCLE9BQU8sRUFBRSxJQUFJbkIsSUFBSSxDQUFFSyxZQUFZLENBQUNlLHNCQUFzQixDQUFDQyxtQkFBb0IsQ0FBQztNQUM1RUMsUUFBUSxFQUFFQSxDQUFBLEtBQU07UUFDZFgsS0FBSyxDQUFDWSxnQkFBZ0IsQ0FBQ0MsR0FBRyxDQUFFLENBQUUsQ0FBQztNQUNqQztJQUNGLENBQUUsQ0FBQztJQUVILE1BQU1DLGlCQUFpQixHQUFHLElBQUluQixxQkFBcUIsQ0FBRUQsWUFBWSxDQUFDZSxzQkFBc0IsQ0FBQ00sbUJBQW1CLEVBQUVmLEtBQUssQ0FBQ1ksZ0JBQWlCLENBQUM7SUFFdEksTUFBTUksU0FBUyxHQUFHLElBQUkxQixJQUFJLENBQUU7TUFDMUIyQixPQUFPLEVBQUUsQ0FBQztNQUNWQyxRQUFRLEVBQUUsQ0FDUkosaUJBQWlCLEVBQ2pCUCxXQUFXO0lBRWYsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsT0FBTyxHQUFHUCxVQUFVLENBQUNrQixTQUFTLENBQUVILFNBQVUsQ0FBQztJQUNqRFIsT0FBTyxDQUFDWSxTQUFTLENBQUUsUUFBUyxDQUFDO0lBRTdCLEtBQUssQ0FBRVosT0FBTyxFQUFFTCxPQUFRLENBQUM7RUFDM0I7QUFDRjtBQUVBVixLQUFLLENBQUM0QixRQUFRLENBQUUsd0JBQXdCLEVBQUV2QixzQkFBdUIsQ0FBQyJ9