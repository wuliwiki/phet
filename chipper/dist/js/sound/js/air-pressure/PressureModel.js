// Copyright 2022, University of Colorado Boulder
/**
 * Model for the pressure screen.
 *
 * @author Piet Goris (University of Leuven)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../axon/js/NumberProperty.js';
import Property from '../../../axon/js/Property.js';
import Range from '../../../dot/js/Range.js';
import Vector2 from '../../../dot/js/Vector2.js';
import Vector2Property from '../../../dot/js/Vector2Property.js';
import SoundConstants from '../common/SoundConstants.js';
import sound from '../sound.js';
import SoundModel from '../common/model/SoundModel.js';
export default class PressureModel extends SoundModel {
  // controls the air pressure in the box.

  // indicates the user selection for the audio control setting

  constructor() {
    super();
    this.pressureProperty = new NumberProperty(1, {
      range: new Range(0, 1)
    });
    this.audioControlSettingProperty = new Property('SPEAKER', {
      validValues: ['SPEAKER', 'LISTENER']
    });
    this.listenerPositionProperty = new Vector2Property(new Vector2(SoundConstants.WAVE_AREA_WIDTH / 2, SoundConstants.WAVE_AREA_WIDTH / 2));
  }

  /**
   * Resets the model.
   */
  reset() {
    super.reset();
    this.pressureProperty.reset();
    this.audioControlSettingProperty.reset();
    this.listenerPositionProperty.reset();
  }
}
sound.register('PressureModel', PressureModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlByb3BlcnR5IiwiUmFuZ2UiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwiU291bmRDb25zdGFudHMiLCJzb3VuZCIsIlNvdW5kTW9kZWwiLCJQcmVzc3VyZU1vZGVsIiwiY29uc3RydWN0b3IiLCJwcmVzc3VyZVByb3BlcnR5IiwicmFuZ2UiLCJhdWRpb0NvbnRyb2xTZXR0aW5nUHJvcGVydHkiLCJ2YWxpZFZhbHVlcyIsImxpc3RlbmVyUG9zaXRpb25Qcm9wZXJ0eSIsIldBVkVfQVJFQV9XSURUSCIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcmVzc3VyZU1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLyoqXHJcbiAqIE1vZGVsIGZvciB0aGUgcHJlc3N1cmUgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFBpZXQgR29yaXMgKFVuaXZlcnNpdHkgb2YgTGV1dmVuKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMlByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU291bmRDb25zdGFudHMgZnJvbSAnLi4vY29tbW9uL1NvdW5kQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHNvdW5kIGZyb20gJy4uL3NvdW5kLmpzJztcclxuaW1wb3J0IFNvdW5kTW9kZWwgZnJvbSAnLi4vY29tbW9uL21vZGVsL1NvdW5kTW9kZWwuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlc3N1cmVNb2RlbCBleHRlbmRzIFNvdW5kTW9kZWwge1xyXG5cclxuICAvLyBjb250cm9scyB0aGUgYWlyIHByZXNzdXJlIGluIHRoZSBib3guXHJcbiAgcHVibGljIHJlYWRvbmx5IHByZXNzdXJlUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICAvLyBpbmRpY2F0ZXMgdGhlIHVzZXIgc2VsZWN0aW9uIGZvciB0aGUgYXVkaW8gY29udHJvbCBzZXR0aW5nXHJcbiAgcHVibGljIHJlYWRvbmx5IGF1ZGlvQ29udHJvbFNldHRpbmdQcm9wZXJ0eTogUHJvcGVydHk8J1NQRUFLRVInIHwgJ0xJU1RFTkVSJz47XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBsaXN0ZW5lclBvc2l0aW9uUHJvcGVydHk6IFZlY3RvcjJQcm9wZXJ0eTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnByZXNzdXJlUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDEsIHtcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMCwgMSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xTZXR0aW5nUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoICdTUEVBS0VSJywge1xyXG4gICAgICB2YWxpZFZhbHVlczogWyAnU1BFQUtFUicsICdMSVNURU5FUicgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMubGlzdGVuZXJQb3NpdGlvblByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggbmV3IFZlY3RvcjIoIFNvdW5kQ29uc3RhbnRzLldBVkVfQVJFQV9XSURUSCAvIDIsIFNvdW5kQ29uc3RhbnRzLldBVkVfQVJFQV9XSURUSCAvIDIgKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoZSBtb2RlbC5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG5cclxuICAgIHRoaXMucHJlc3N1cmVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xTZXR0aW5nUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubGlzdGVuZXJQb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5zb3VuZC5yZWdpc3RlciggJ1ByZXNzdXJlTW9kZWwnLCBQcmVzc3VyZU1vZGVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sb0NBQW9DO0FBQy9ELE9BQU9DLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLDBCQUEwQjtBQUM1QyxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELE9BQU9DLGVBQWUsTUFBTSxvQ0FBb0M7QUFDaEUsT0FBT0MsY0FBYyxNQUFNLDZCQUE2QjtBQUN4RCxPQUFPQyxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxVQUFVLE1BQU0sK0JBQStCO0FBRXRELGVBQWUsTUFBTUMsYUFBYSxTQUFTRCxVQUFVLENBQUM7RUFFcEQ7O0VBR0E7O0VBS09FLFdBQVdBLENBQUEsRUFBRztJQUNuQixLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsSUFBSVYsY0FBYyxDQUFFLENBQUMsRUFBRTtNQUM3Q1csS0FBSyxFQUFFLElBQUlULEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBRTtJQUN6QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNVLDJCQUEyQixHQUFHLElBQUlYLFFBQVEsQ0FBRSxTQUFTLEVBQUU7TUFDMURZLFdBQVcsRUFBRSxDQUFFLFNBQVMsRUFBRSxVQUFVO0lBQ3RDLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0Msd0JBQXdCLEdBQUcsSUFBSVYsZUFBZSxDQUFFLElBQUlELE9BQU8sQ0FBRUUsY0FBYyxDQUFDVSxlQUFlLEdBQUcsQ0FBQyxFQUFFVixjQUFjLENBQUNVLGVBQWUsR0FBRyxDQUFFLENBQUUsQ0FBQztFQUM5STs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JDLEtBQUtBLENBQUEsRUFBUztJQUM1QixLQUFLLENBQUNBLEtBQUssQ0FBQyxDQUFDO0lBRWIsSUFBSSxDQUFDTixnQkFBZ0IsQ0FBQ00sS0FBSyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDSiwyQkFBMkIsQ0FBQ0ksS0FBSyxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDRix3QkFBd0IsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7RUFDdkM7QUFDRjtBQUVBVixLQUFLLENBQUNXLFFBQVEsQ0FBRSxlQUFlLEVBQUVULGFBQWMsQ0FBQyJ9