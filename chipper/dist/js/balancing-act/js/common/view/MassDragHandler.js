// Copyright 2013-2021, University of Colorado Boulder

/**
 * Common drag handler for mass nodes.  Positions the corresponding model element based on the movement of the mouse or
 * finger, and also sets and clears the property that indicates whether or not the mass is being controlled by the user.
 *
 * @author John Blanco
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { DragListener } from '../../../../scenery/js/imports.js';
import balancingAct from '../../balancingAct.js';
class MassDragHandler extends DragListener {
  /**
   * @param {Mass} mass
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(mass, modelViewTransform) {
    // {Vector2} - offset for dragging, in model coordinate frame
    let dragOffset = Vector2.ZERO;
    super({
      // Allow moving a finger (touch) across a node to pick it up.
      allowTouchSnag: true,
      start: event => {
        mass.userControlledProperty.set(true);
        const parentPoint = this.globalToParentPoint(event.pointer.point);
        const positionInModelSpace = modelViewTransform.viewToModelPosition(parentPoint);
        dragOffset = mass.positionProperty.value.minus(positionInModelSpace);
      },
      drag: event => {
        const parentPoint = this.globalToParentPoint(event.pointer.point);
        mass.positionProperty.set(modelViewTransform.viewToModelPosition(parentPoint).plus(dragOffset));
      },
      end: () => {
        // There is a rare multi-touch case where userControlled may already be updated, and we need to handle it by
        // cycling the userControlled state, see https://github.com/phetsims/balancing-act/issues/95.
        if (mass.userControlledProperty.get() === false) {
          mass.userControlledProperty.set(true);
        }
        mass.userControlledProperty.set(false);
      }
    });
  }
}
balancingAct.register('MassDragHandler', MassDragHandler);
export default MassDragHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiRHJhZ0xpc3RlbmVyIiwiYmFsYW5jaW5nQWN0IiwiTWFzc0RyYWdIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJtYXNzIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwiZHJhZ09mZnNldCIsIlpFUk8iLCJhbGxvd1RvdWNoU25hZyIsInN0YXJ0IiwiZXZlbnQiLCJ1c2VyQ29udHJvbGxlZFByb3BlcnR5Iiwic2V0IiwicGFyZW50UG9pbnQiLCJnbG9iYWxUb1BhcmVudFBvaW50IiwicG9pbnRlciIsInBvaW50IiwicG9zaXRpb25Jbk1vZGVsU3BhY2UiLCJ2aWV3VG9Nb2RlbFBvc2l0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsInZhbHVlIiwibWludXMiLCJkcmFnIiwicGx1cyIsImVuZCIsImdldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWFzc0RyYWdIYW5kbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbW1vbiBkcmFnIGhhbmRsZXIgZm9yIG1hc3Mgbm9kZXMuICBQb3NpdGlvbnMgdGhlIGNvcnJlc3BvbmRpbmcgbW9kZWwgZWxlbWVudCBiYXNlZCBvbiB0aGUgbW92ZW1lbnQgb2YgdGhlIG1vdXNlIG9yXHJcbiAqIGZpbmdlciwgYW5kIGFsc28gc2V0cyBhbmQgY2xlYXJzIHRoZSBwcm9wZXJ0eSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0aGUgbWFzcyBpcyBiZWluZyBjb250cm9sbGVkIGJ5IHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcblxyXG5jbGFzcyBNYXNzRHJhZ0hhbmRsZXIgZXh0ZW5kcyBEcmFnTGlzdGVuZXIge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge01hc3N9IG1hc3NcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtYXNzLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcblxyXG4gICAgLy8ge1ZlY3RvcjJ9IC0gb2Zmc2V0IGZvciBkcmFnZ2luZywgaW4gbW9kZWwgY29vcmRpbmF0ZSBmcmFtZVxyXG4gICAgbGV0IGRyYWdPZmZzZXQgPSBWZWN0b3IyLlpFUk87XHJcblxyXG4gICAgc3VwZXIoIHtcclxuXHJcbiAgICAgIC8vIEFsbG93IG1vdmluZyBhIGZpbmdlciAodG91Y2gpIGFjcm9zcyBhIG5vZGUgdG8gcGljayBpdCB1cC5cclxuICAgICAgYWxsb3dUb3VjaFNuYWc6IHRydWUsXHJcblxyXG4gICAgICBzdGFydDogZXZlbnQgPT4ge1xyXG4gICAgICAgIG1hc3MudXNlckNvbnRyb2xsZWRQcm9wZXJ0eS5zZXQoIHRydWUgKTtcclxuICAgICAgICBjb25zdCBwYXJlbnRQb2ludCA9IHRoaXMuZ2xvYmFsVG9QYXJlbnRQb2ludCggZXZlbnQucG9pbnRlci5wb2ludCApO1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uSW5Nb2RlbFNwYWNlID0gbW9kZWxWaWV3VHJhbnNmb3JtLnZpZXdUb01vZGVsUG9zaXRpb24oIHBhcmVudFBvaW50ICk7XHJcbiAgICAgICAgZHJhZ09mZnNldCA9IG1hc3MucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS5taW51cyggcG9zaXRpb25Jbk1vZGVsU3BhY2UgKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGRyYWc6IGV2ZW50ID0+IHtcclxuICAgICAgICBjb25zdCBwYXJlbnRQb2ludCA9IHRoaXMuZ2xvYmFsVG9QYXJlbnRQb2ludCggZXZlbnQucG9pbnRlci5wb2ludCApO1xyXG4gICAgICAgIG1hc3MucG9zaXRpb25Qcm9wZXJ0eS5zZXQoIG1vZGVsVmlld1RyYW5zZm9ybS52aWV3VG9Nb2RlbFBvc2l0aW9uKCBwYXJlbnRQb2ludCApLnBsdXMoIGRyYWdPZmZzZXQgKSApO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZW5kOiAoKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIFRoZXJlIGlzIGEgcmFyZSBtdWx0aS10b3VjaCBjYXNlIHdoZXJlIHVzZXJDb250cm9sbGVkIG1heSBhbHJlYWR5IGJlIHVwZGF0ZWQsIGFuZCB3ZSBuZWVkIHRvIGhhbmRsZSBpdCBieVxyXG4gICAgICAgIC8vIGN5Y2xpbmcgdGhlIHVzZXJDb250cm9sbGVkIHN0YXRlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2JhbGFuY2luZy1hY3QvaXNzdWVzLzk1LlxyXG4gICAgICAgIGlmICggbWFzcy51c2VyQ29udHJvbGxlZFByb3BlcnR5LmdldCgpID09PSBmYWxzZSApIHtcclxuICAgICAgICAgIG1hc3MudXNlckNvbnRyb2xsZWRQcm9wZXJ0eS5zZXQoIHRydWUgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1hc3MudXNlckNvbnRyb2xsZWRQcm9wZXJ0eS5zZXQoIGZhbHNlICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0FjdC5yZWdpc3RlciggJ01hc3NEcmFnSGFuZGxlcicsIE1hc3NEcmFnSGFuZGxlciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWFzc0RyYWdIYW5kbGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsWUFBWSxRQUFRLG1DQUFtQztBQUNoRSxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBRWhELE1BQU1DLGVBQWUsU0FBU0YsWUFBWSxDQUFDO0VBRXpDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VHLFdBQVdBLENBQUVDLElBQUksRUFBRUMsa0JBQWtCLEVBQUc7SUFFdEM7SUFDQSxJQUFJQyxVQUFVLEdBQUdQLE9BQU8sQ0FBQ1EsSUFBSTtJQUU3QixLQUFLLENBQUU7TUFFTDtNQUNBQyxjQUFjLEVBQUUsSUFBSTtNQUVwQkMsS0FBSyxFQUFFQyxLQUFLLElBQUk7UUFDZE4sSUFBSSxDQUFDTyxzQkFBc0IsQ0FBQ0MsR0FBRyxDQUFFLElBQUssQ0FBQztRQUN2QyxNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBRUosS0FBSyxDQUFDSyxPQUFPLENBQUNDLEtBQU0sQ0FBQztRQUNuRSxNQUFNQyxvQkFBb0IsR0FBR1osa0JBQWtCLENBQUNhLG1CQUFtQixDQUFFTCxXQUFZLENBQUM7UUFDbEZQLFVBQVUsR0FBR0YsSUFBSSxDQUFDZSxnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLENBQUVKLG9CQUFxQixDQUFDO01BQ3hFLENBQUM7TUFFREssSUFBSSxFQUFFWixLQUFLLElBQUk7UUFDYixNQUFNRyxXQUFXLEdBQUcsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBRUosS0FBSyxDQUFDSyxPQUFPLENBQUNDLEtBQU0sQ0FBQztRQUNuRVosSUFBSSxDQUFDZSxnQkFBZ0IsQ0FBQ1AsR0FBRyxDQUFFUCxrQkFBa0IsQ0FBQ2EsbUJBQW1CLENBQUVMLFdBQVksQ0FBQyxDQUFDVSxJQUFJLENBQUVqQixVQUFXLENBQUUsQ0FBQztNQUN2RyxDQUFDO01BRURrQixHQUFHLEVBQUVBLENBQUEsS0FBTTtRQUVUO1FBQ0E7UUFDQSxJQUFLcEIsSUFBSSxDQUFDTyxzQkFBc0IsQ0FBQ2MsR0FBRyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUc7VUFDakRyQixJQUFJLENBQUNPLHNCQUFzQixDQUFDQyxHQUFHLENBQUUsSUFBSyxDQUFDO1FBQ3pDO1FBRUFSLElBQUksQ0FBQ08sc0JBQXNCLENBQUNDLEdBQUcsQ0FBRSxLQUFNLENBQUM7TUFDMUM7SUFDRixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFYLFlBQVksQ0FBQ3lCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRXhCLGVBQWdCLENBQUM7QUFFM0QsZUFBZUEsZUFBZSJ9