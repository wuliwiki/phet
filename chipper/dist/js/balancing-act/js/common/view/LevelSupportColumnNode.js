// Copyright 2013-2022, University of Colorado Boulder

/**
 * Node that represents a support column with a flat top in the view.
 *
 * @author John Blanco
 */

import { LinearGradient, Node, Path, Rectangle } from '../../../../scenery/js/imports.js';
import balancingAct from '../../balancingAct.js';
import ColumnState from '../model/ColumnState.js';
class LevelSupportColumnNode extends Node {
  /**
   * @param modelViewTransform
   * @param levelSupportColumn
   * @param columnState
   */
  constructor(modelViewTransform, levelSupportColumn, columnState) {
    super();

    // Create and add the main body of the column.
    const transformedColumnShape = modelViewTransform.modelToViewShape(levelSupportColumn.shape);
    const mainBodyGradient = new LinearGradient(transformedColumnShape.bounds.minX, 0, transformedColumnShape.bounds.maxX, 0).addColorStop(0, 'rgb( 150, 150, 150 )').addColorStop(0.25, 'rgb( 230, 230, 230 )').addColorStop(0.65, 'rgb( 150, 150, 150 )').addColorStop(1, 'rgb( 200, 200, 200 )');
    const columnNode = new Path(transformedColumnShape, {
      fill: mainBodyGradient,
      stroke: 'black',
      lineWidth: 1
    });
    this.addChild(columnNode);

    // Create and add the column support.
    const supportWidth = transformedColumnShape.bounds.width * 1.3; // Empirically determined.
    const supportHeight = transformedColumnShape.bounds.height * 0.15; // Empirically determined.
    const supportGradient = new LinearGradient(transformedColumnShape.bounds.centerX - supportWidth / 2, 0, transformedColumnShape.bounds.centerX + supportWidth / 2, 0).addColorStop(0, 'rgb( 150, 150, 150 )').addColorStop(0.25, 'rgb( 210, 210, 210 )').addColorStop(0.65, 'rgb( 150, 150, 150 )').addColorStop(1, 'rgb( 170, 170, 170 )');
    const columnSupportNode = new Rectangle(transformedColumnShape.bounds.centerX - supportWidth / 2, transformedColumnShape.bounds.maxY - supportHeight, supportWidth, supportHeight, 3, 3, {
      fill: supportGradient,
      stroke: 'black',
      lineWidth: 1
    });
    this.addChild(columnSupportNode);
    columnState.link(state => {
      this.visible = state === ColumnState.DOUBLE_COLUMNS;
    });
  }
}
balancingAct.register('LevelSupportColumnNode', LevelSupportColumnNode);
export default LevelSupportColumnNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaW5lYXJHcmFkaWVudCIsIk5vZGUiLCJQYXRoIiwiUmVjdGFuZ2xlIiwiYmFsYW5jaW5nQWN0IiwiQ29sdW1uU3RhdGUiLCJMZXZlbFN1cHBvcnRDb2x1bW5Ob2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJsZXZlbFN1cHBvcnRDb2x1bW4iLCJjb2x1bW5TdGF0ZSIsInRyYW5zZm9ybWVkQ29sdW1uU2hhcGUiLCJtb2RlbFRvVmlld1NoYXBlIiwic2hhcGUiLCJtYWluQm9keUdyYWRpZW50IiwiYm91bmRzIiwibWluWCIsIm1heFgiLCJhZGRDb2xvclN0b3AiLCJjb2x1bW5Ob2RlIiwiZmlsbCIsInN0cm9rZSIsImxpbmVXaWR0aCIsImFkZENoaWxkIiwic3VwcG9ydFdpZHRoIiwid2lkdGgiLCJzdXBwb3J0SGVpZ2h0IiwiaGVpZ2h0Iiwic3VwcG9ydEdyYWRpZW50IiwiY2VudGVyWCIsImNvbHVtblN1cHBvcnROb2RlIiwibWF4WSIsImxpbmsiLCJzdGF0ZSIsInZpc2libGUiLCJET1VCTEVfQ09MVU1OUyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGV2ZWxTdXBwb3J0Q29sdW1uTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOb2RlIHRoYXQgcmVwcmVzZW50cyBhIHN1cHBvcnQgY29sdW1uIHdpdGggYSBmbGF0IHRvcCBpbiB0aGUgdmlldy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IExpbmVhckdyYWRpZW50LCBOb2RlLCBQYXRoLCBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcbmltcG9ydCBDb2x1bW5TdGF0ZSBmcm9tICcuLi9tb2RlbC9Db2x1bW5TdGF0ZS5qcyc7XHJcblxyXG5jbGFzcyBMZXZlbFN1cHBvcnRDb2x1bW5Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0gbGV2ZWxTdXBwb3J0Q29sdW1uXHJcbiAgICogQHBhcmFtIGNvbHVtblN0YXRlXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsVmlld1RyYW5zZm9ybSwgbGV2ZWxTdXBwb3J0Q29sdW1uLCBjb2x1bW5TdGF0ZSApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuZCBhZGQgdGhlIG1haW4gYm9keSBvZiB0aGUgY29sdW1uLlxyXG4gICAgY29uc3QgdHJhbnNmb3JtZWRDb2x1bW5TaGFwZSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1NoYXBlKCBsZXZlbFN1cHBvcnRDb2x1bW4uc2hhcGUgKTtcclxuICAgIGNvbnN0IG1haW5Cb2R5R3JhZGllbnQgPSBuZXcgTGluZWFyR3JhZGllbnQoIHRyYW5zZm9ybWVkQ29sdW1uU2hhcGUuYm91bmRzLm1pblgsIDAsIHRyYW5zZm9ybWVkQ29sdW1uU2hhcGUuYm91bmRzLm1heFgsIDAgKS5hZGRDb2xvclN0b3AoIDAsICdyZ2IoIDE1MCwgMTUwLCAxNTAgKScgKS5hZGRDb2xvclN0b3AoIDAuMjUsICdyZ2IoIDIzMCwgMjMwLCAyMzAgKScgKS5hZGRDb2xvclN0b3AoIDAuNjUsICdyZ2IoIDE1MCwgMTUwLCAxNTAgKScgKS5hZGRDb2xvclN0b3AoIDEsICdyZ2IoIDIwMCwgMjAwLCAyMDAgKScgKTtcclxuXHJcbiAgICBjb25zdCBjb2x1bW5Ob2RlID0gbmV3IFBhdGgoIHRyYW5zZm9ybWVkQ29sdW1uU2hhcGUsXHJcbiAgICAgIHtcclxuICAgICAgICBmaWxsOiBtYWluQm9keUdyYWRpZW50LFxyXG4gICAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgICBsaW5lV2lkdGg6IDFcclxuICAgICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggY29sdW1uTm9kZSApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhbmQgYWRkIHRoZSBjb2x1bW4gc3VwcG9ydC5cclxuICAgIGNvbnN0IHN1cHBvcnRXaWR0aCA9IHRyYW5zZm9ybWVkQ29sdW1uU2hhcGUuYm91bmRzLndpZHRoICogMS4zOyAvLyBFbXBpcmljYWxseSBkZXRlcm1pbmVkLlxyXG4gICAgY29uc3Qgc3VwcG9ydEhlaWdodCA9IHRyYW5zZm9ybWVkQ29sdW1uU2hhcGUuYm91bmRzLmhlaWdodCAqIDAuMTU7IC8vIEVtcGlyaWNhbGx5IGRldGVybWluZWQuXHJcbiAgICBjb25zdCBzdXBwb3J0R3JhZGllbnQgPSBuZXcgTGluZWFyR3JhZGllbnQoIHRyYW5zZm9ybWVkQ29sdW1uU2hhcGUuYm91bmRzLmNlbnRlclggLSBzdXBwb3J0V2lkdGggLyAyLCAwLCB0cmFuc2Zvcm1lZENvbHVtblNoYXBlLmJvdW5kcy5jZW50ZXJYICsgc3VwcG9ydFdpZHRoIC8gMiwgMCApLmFkZENvbG9yU3RvcCggMCwgJ3JnYiggMTUwLCAxNTAsIDE1MCApJyApLmFkZENvbG9yU3RvcCggMC4yNSwgJ3JnYiggMjEwLCAyMTAsIDIxMCApJyApLmFkZENvbG9yU3RvcCggMC42NSwgJ3JnYiggMTUwLCAxNTAsIDE1MCApJyApLmFkZENvbG9yU3RvcCggMSwgJ3JnYiggMTcwLCAxNzAsIDE3MCApJyApO1xyXG4gICAgY29uc3QgY29sdW1uU3VwcG9ydE5vZGUgPSBuZXcgUmVjdGFuZ2xlKFxyXG4gICAgICB0cmFuc2Zvcm1lZENvbHVtblNoYXBlLmJvdW5kcy5jZW50ZXJYIC0gc3VwcG9ydFdpZHRoIC8gMixcclxuICAgICAgdHJhbnNmb3JtZWRDb2x1bW5TaGFwZS5ib3VuZHMubWF4WSAtIHN1cHBvcnRIZWlnaHQsXHJcbiAgICAgIHN1cHBvcnRXaWR0aCxcclxuICAgICAgc3VwcG9ydEhlaWdodCxcclxuICAgICAgMyxcclxuICAgICAgMyxcclxuICAgICAge1xyXG4gICAgICAgIGZpbGw6IHN1cHBvcnRHcmFkaWVudCxcclxuICAgICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgICAgbGluZVdpZHRoOiAxXHJcbiAgICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGNvbHVtblN1cHBvcnROb2RlICk7XHJcblxyXG4gICAgY29sdW1uU3RhdGUubGluayggc3RhdGUgPT4ge1xyXG4gICAgICB0aGlzLnZpc2libGUgPSBzdGF0ZSA9PT0gQ29sdW1uU3RhdGUuRE9VQkxFX0NPTFVNTlM7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5iYWxhbmNpbmdBY3QucmVnaXN0ZXIoICdMZXZlbFN1cHBvcnRDb2x1bW5Ob2RlJywgTGV2ZWxTdXBwb3J0Q29sdW1uTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGV2ZWxTdXBwb3J0Q29sdW1uTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsY0FBYyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsU0FBUyxRQUFRLG1DQUFtQztBQUN6RixPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLFdBQVcsTUFBTSx5QkFBeUI7QUFFakQsTUFBTUMsc0JBQXNCLFNBQVNMLElBQUksQ0FBQztFQUV4QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VNLFdBQVdBLENBQUVDLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRUMsV0FBVyxFQUFHO0lBQ2pFLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsTUFBTUMsc0JBQXNCLEdBQUdILGtCQUFrQixDQUFDSSxnQkFBZ0IsQ0FBRUgsa0JBQWtCLENBQUNJLEtBQU0sQ0FBQztJQUM5RixNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJZCxjQUFjLENBQUVXLHNCQUFzQixDQUFDSSxNQUFNLENBQUNDLElBQUksRUFBRSxDQUFDLEVBQUVMLHNCQUFzQixDQUFDSSxNQUFNLENBQUNFLElBQUksRUFBRSxDQUFFLENBQUMsQ0FBQ0MsWUFBWSxDQUFFLENBQUMsRUFBRSxzQkFBdUIsQ0FBQyxDQUFDQSxZQUFZLENBQUUsSUFBSSxFQUFFLHNCQUF1QixDQUFDLENBQUNBLFlBQVksQ0FBRSxJQUFJLEVBQUUsc0JBQXVCLENBQUMsQ0FBQ0EsWUFBWSxDQUFFLENBQUMsRUFBRSxzQkFBdUIsQ0FBQztJQUV6UyxNQUFNQyxVQUFVLEdBQUcsSUFBSWpCLElBQUksQ0FBRVMsc0JBQXNCLEVBQ2pEO01BQ0VTLElBQUksRUFBRU4sZ0JBQWdCO01BQ3RCTyxNQUFNLEVBQUUsT0FBTztNQUNmQyxTQUFTLEVBQUU7SUFDYixDQUFFLENBQUM7SUFDTCxJQUFJLENBQUNDLFFBQVEsQ0FBRUosVUFBVyxDQUFDOztJQUUzQjtJQUNBLE1BQU1LLFlBQVksR0FBR2Isc0JBQXNCLENBQUNJLE1BQU0sQ0FBQ1UsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2hFLE1BQU1DLGFBQWEsR0FBR2Ysc0JBQXNCLENBQUNJLE1BQU0sQ0FBQ1ksTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ25FLE1BQU1DLGVBQWUsR0FBRyxJQUFJNUIsY0FBYyxDQUFFVyxzQkFBc0IsQ0FBQ0ksTUFBTSxDQUFDYyxPQUFPLEdBQUdMLFlBQVksR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFYixzQkFBc0IsQ0FBQ0ksTUFBTSxDQUFDYyxPQUFPLEdBQUdMLFlBQVksR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUNOLFlBQVksQ0FBRSxDQUFDLEVBQUUsc0JBQXVCLENBQUMsQ0FBQ0EsWUFBWSxDQUFFLElBQUksRUFBRSxzQkFBdUIsQ0FBQyxDQUFDQSxZQUFZLENBQUUsSUFBSSxFQUFFLHNCQUF1QixDQUFDLENBQUNBLFlBQVksQ0FBRSxDQUFDLEVBQUUsc0JBQXVCLENBQUM7SUFDcFYsTUFBTVksaUJBQWlCLEdBQUcsSUFBSTNCLFNBQVMsQ0FDckNRLHNCQUFzQixDQUFDSSxNQUFNLENBQUNjLE9BQU8sR0FBR0wsWUFBWSxHQUFHLENBQUMsRUFDeERiLHNCQUFzQixDQUFDSSxNQUFNLENBQUNnQixJQUFJLEdBQUdMLGFBQWEsRUFDbERGLFlBQVksRUFDWkUsYUFBYSxFQUNiLENBQUMsRUFDRCxDQUFDLEVBQ0Q7TUFDRU4sSUFBSSxFQUFFUSxlQUFlO01BQ3JCUCxNQUFNLEVBQUUsT0FBTztNQUNmQyxTQUFTLEVBQUU7SUFDYixDQUFFLENBQUM7SUFDTCxJQUFJLENBQUNDLFFBQVEsQ0FBRU8saUJBQWtCLENBQUM7SUFFbENwQixXQUFXLENBQUNzQixJQUFJLENBQUVDLEtBQUssSUFBSTtNQUN6QixJQUFJLENBQUNDLE9BQU8sR0FBR0QsS0FBSyxLQUFLNUIsV0FBVyxDQUFDOEIsY0FBYztJQUNyRCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUEvQixZQUFZLENBQUNnQyxRQUFRLENBQUUsd0JBQXdCLEVBQUU5QixzQkFBdUIsQ0FBQztBQUV6RSxlQUFlQSxzQkFBc0IifQ==