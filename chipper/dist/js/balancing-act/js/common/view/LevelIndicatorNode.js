// Copyright 2013-2022, University of Colorado Boulder

/**
 * The level indicator shows triangles to the left and right of the plank to
 * help indicate whether the plank is at exactly 0 degrees.
 *
 * @author John Blanco
 */

import Matrix3 from '../../../../dot/js/Matrix3.js';
import Transform3 from '../../../../dot/js/Transform3.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import balancingAct from '../../balancingAct.js';
import Plank from '../model/Plank.js';

// constants
const PLANK_TO_INDICATOR_SPACING = 5;
const LEVEL_FILL_COLOR = 'rgb( 173, 255, 47 )';
const NON_LEVEL_FILL_COLOR = 'rgb( 230, 230, 230 )';
class LevelIndicatorNode extends Node {
  /**
   * @param {ModelViewTransform2} modelViewTransform
   * @param {Plank} plank
   */
  constructor(modelViewTransform, plank) {
    super();

    // Positions for left and right edge
    const leftEdgeOfPlank = modelViewTransform.modelToViewPosition(new Vector2(plank.pivotPoint.x - Plank.LENGTH / 2, plank.getPlankSurfaceCenter().y));
    const rightEdgeOfPlank = modelViewTransform.modelToViewPosition(new Vector2(plank.pivotPoint.x + Plank.LENGTH / 2, plank.getPlankSurfaceCenter().y));

    // Draw a sort of arrow head shape.
    const leftIndicatorShape = new Shape().moveTo(0, 0).lineTo(-25, -10).lineTo(-20, 0).lineTo(-25, 10).close();

    //Create paths for left and right side
    const leftLevelIndicatorNode = new Path(leftIndicatorShape, {
      stroke: 'black',
      right: leftEdgeOfPlank.x - PLANK_TO_INDICATOR_SPACING,
      centerY: leftEdgeOfPlank.y
    });
    this.addChild(leftLevelIndicatorNode);
    const reflectTransform = new Transform3(Matrix3.scaling(-1, 1));
    const rightIndicatorShape = reflectTransform.transformShape(leftIndicatorShape);
    const rightLevelIndicatorNode = new Path(rightIndicatorShape, {
      stroke: 'black',
      left: rightEdgeOfPlank.x + PLANK_TO_INDICATOR_SPACING,
      centerY: rightEdgeOfPlank.y
    });
    this.addChild(rightLevelIndicatorNode);

    //Highlight if the plank is level
    plank.tiltAngleProperty.link(tiltAngle => {
      if (Math.abs(tiltAngle) < Math.PI / 1000) {
        leftLevelIndicatorNode.fill = LEVEL_FILL_COLOR;
        rightLevelIndicatorNode.fill = LEVEL_FILL_COLOR;
      } else {
        leftLevelIndicatorNode.fill = NON_LEVEL_FILL_COLOR;
        rightLevelIndicatorNode.fill = NON_LEVEL_FILL_COLOR;
      }
    });
  }
}
balancingAct.register('LevelIndicatorNode', LevelIndicatorNode);
export default LevelIndicatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiVHJhbnNmb3JtMyIsIlZlY3RvcjIiLCJTaGFwZSIsIk5vZGUiLCJQYXRoIiwiYmFsYW5jaW5nQWN0IiwiUGxhbmsiLCJQTEFOS19UT19JTkRJQ0FUT1JfU1BBQ0lORyIsIkxFVkVMX0ZJTExfQ09MT1IiLCJOT05fTEVWRUxfRklMTF9DT0xPUiIsIkxldmVsSW5kaWNhdG9yTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicGxhbmsiLCJsZWZ0RWRnZU9mUGxhbmsiLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwicGl2b3RQb2ludCIsIngiLCJMRU5HVEgiLCJnZXRQbGFua1N1cmZhY2VDZW50ZXIiLCJ5IiwicmlnaHRFZGdlT2ZQbGFuayIsImxlZnRJbmRpY2F0b3JTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlIiwibGVmdExldmVsSW5kaWNhdG9yTm9kZSIsInN0cm9rZSIsInJpZ2h0IiwiY2VudGVyWSIsImFkZENoaWxkIiwicmVmbGVjdFRyYW5zZm9ybSIsInNjYWxpbmciLCJyaWdodEluZGljYXRvclNoYXBlIiwidHJhbnNmb3JtU2hhcGUiLCJyaWdodExldmVsSW5kaWNhdG9yTm9kZSIsImxlZnQiLCJ0aWx0QW5nbGVQcm9wZXJ0eSIsImxpbmsiLCJ0aWx0QW5nbGUiLCJNYXRoIiwiYWJzIiwiUEkiLCJmaWxsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMZXZlbEluZGljYXRvck5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIGxldmVsIGluZGljYXRvciBzaG93cyB0cmlhbmdsZXMgdG8gdGhlIGxlZnQgYW5kIHJpZ2h0IG9mIHRoZSBwbGFuayB0b1xyXG4gKiBoZWxwIGluZGljYXRlIHdoZXRoZXIgdGhlIHBsYW5rIGlzIGF0IGV4YWN0bHkgMCBkZWdyZWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xyXG5pbXBvcnQgVHJhbnNmb3JtMyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVHJhbnNmb3JtMy5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJhbGFuY2luZ0FjdCBmcm9tICcuLi8uLi9iYWxhbmNpbmdBY3QuanMnO1xyXG5pbXBvcnQgUGxhbmsgZnJvbSAnLi4vbW9kZWwvUGxhbmsuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFBMQU5LX1RPX0lORElDQVRPUl9TUEFDSU5HID0gNTtcclxuY29uc3QgTEVWRUxfRklMTF9DT0xPUiA9ICdyZ2IoIDE3MywgMjU1LCA0NyApJztcclxuY29uc3QgTk9OX0xFVkVMX0ZJTExfQ09MT1IgPSAncmdiKCAyMzAsIDIzMCwgMjMwICknO1xyXG5cclxuY2xhc3MgTGV2ZWxJbmRpY2F0b3JOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICogQHBhcmFtIHtQbGFua30gcGxhbmtcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWxWaWV3VHJhbnNmb3JtLCBwbGFuayApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gUG9zaXRpb25zIGZvciBsZWZ0IGFuZCByaWdodCBlZGdlXHJcbiAgICBjb25zdCBsZWZ0RWRnZU9mUGxhbmsgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggbmV3IFZlY3RvcjIoXHJcbiAgICAgIHBsYW5rLnBpdm90UG9pbnQueCAtIFBsYW5rLkxFTkdUSCAvIDIsXHJcbiAgICAgIHBsYW5rLmdldFBsYW5rU3VyZmFjZUNlbnRlcigpLnlcclxuICAgICkgKTtcclxuICAgIGNvbnN0IHJpZ2h0RWRnZU9mUGxhbmsgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggbmV3IFZlY3RvcjIoXHJcbiAgICAgIHBsYW5rLnBpdm90UG9pbnQueCArIFBsYW5rLkxFTkdUSCAvIDIsXHJcbiAgICAgIHBsYW5rLmdldFBsYW5rU3VyZmFjZUNlbnRlcigpLnlcclxuICAgICkgKTtcclxuXHJcbiAgICAvLyBEcmF3IGEgc29ydCBvZiBhcnJvdyBoZWFkIHNoYXBlLlxyXG4gICAgY29uc3QgbGVmdEluZGljYXRvclNoYXBlID0gbmV3IFNoYXBlKCkubW92ZVRvKCAwLCAwICkubGluZVRvKCAtMjUsIC0xMCApLmxpbmVUbyggLTIwLCAwICkubGluZVRvKCAtMjUsIDEwICkuY2xvc2UoKTtcclxuXHJcbiAgICAvL0NyZWF0ZSBwYXRocyBmb3IgbGVmdCBhbmQgcmlnaHQgc2lkZVxyXG4gICAgY29uc3QgbGVmdExldmVsSW5kaWNhdG9yTm9kZSA9IG5ldyBQYXRoKCBsZWZ0SW5kaWNhdG9yU2hhcGUsXHJcbiAgICAgIHtcclxuICAgICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgICAgcmlnaHQ6IGxlZnRFZGdlT2ZQbGFuay54IC0gUExBTktfVE9fSU5ESUNBVE9SX1NQQUNJTkcsXHJcbiAgICAgICAgY2VudGVyWTogbGVmdEVkZ2VPZlBsYW5rLnlcclxuICAgICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbGVmdExldmVsSW5kaWNhdG9yTm9kZSApO1xyXG5cclxuICAgIGNvbnN0IHJlZmxlY3RUcmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtMyggTWF0cml4My5zY2FsaW5nKCAtMSwgMSApICk7XHJcbiAgICBjb25zdCByaWdodEluZGljYXRvclNoYXBlID0gcmVmbGVjdFRyYW5zZm9ybS50cmFuc2Zvcm1TaGFwZSggbGVmdEluZGljYXRvclNoYXBlICk7XHJcbiAgICBjb25zdCByaWdodExldmVsSW5kaWNhdG9yTm9kZSA9IG5ldyBQYXRoKCByaWdodEluZGljYXRvclNoYXBlLFxyXG4gICAgICB7XHJcbiAgICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICAgIGxlZnQ6IHJpZ2h0RWRnZU9mUGxhbmsueCArIFBMQU5LX1RPX0lORElDQVRPUl9TUEFDSU5HLFxyXG4gICAgICAgIGNlbnRlclk6IHJpZ2h0RWRnZU9mUGxhbmsueVxyXG4gICAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCByaWdodExldmVsSW5kaWNhdG9yTm9kZSApO1xyXG5cclxuICAgIC8vSGlnaGxpZ2h0IGlmIHRoZSBwbGFuayBpcyBsZXZlbFxyXG4gICAgcGxhbmsudGlsdEFuZ2xlUHJvcGVydHkubGluayggdGlsdEFuZ2xlID0+IHtcclxuICAgICAgaWYgKCBNYXRoLmFicyggdGlsdEFuZ2xlICkgPCBNYXRoLlBJIC8gMTAwMCApIHtcclxuICAgICAgICBsZWZ0TGV2ZWxJbmRpY2F0b3JOb2RlLmZpbGwgPSBMRVZFTF9GSUxMX0NPTE9SO1xyXG4gICAgICAgIHJpZ2h0TGV2ZWxJbmRpY2F0b3JOb2RlLmZpbGwgPSBMRVZFTF9GSUxMX0NPTE9SO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGxlZnRMZXZlbEluZGljYXRvck5vZGUuZmlsbCA9IE5PTl9MRVZFTF9GSUxMX0NPTE9SO1xyXG4gICAgICAgIHJpZ2h0TGV2ZWxJbmRpY2F0b3JOb2RlLmZpbGwgPSBOT05fTEVWRUxfRklMTF9DT0xPUjtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuYmFsYW5jaW5nQWN0LnJlZ2lzdGVyKCAnTGV2ZWxJbmRpY2F0b3JOb2RlJywgTGV2ZWxJbmRpY2F0b3JOb2RlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMZXZlbEluZGljYXRvck5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsVUFBVSxNQUFNLGtDQUFrQztBQUN6RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsS0FBSyxNQUFNLG1CQUFtQjs7QUFFckM7QUFDQSxNQUFNQywwQkFBMEIsR0FBRyxDQUFDO0FBQ3BDLE1BQU1DLGdCQUFnQixHQUFHLHFCQUFxQjtBQUM5QyxNQUFNQyxvQkFBb0IsR0FBRyxzQkFBc0I7QUFFbkQsTUFBTUMsa0JBQWtCLFNBQVNQLElBQUksQ0FBQztFQUVwQztBQUNGO0FBQ0E7QUFDQTtFQUNFUSxXQUFXQSxDQUFFQyxrQkFBa0IsRUFBRUMsS0FBSyxFQUFHO0lBQ3ZDLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsTUFBTUMsZUFBZSxHQUFHRixrQkFBa0IsQ0FBQ0csbUJBQW1CLENBQUUsSUFBSWQsT0FBTyxDQUN6RVksS0FBSyxDQUFDRyxVQUFVLENBQUNDLENBQUMsR0FBR1gsS0FBSyxDQUFDWSxNQUFNLEdBQUcsQ0FBQyxFQUNyQ0wsS0FBSyxDQUFDTSxxQkFBcUIsQ0FBQyxDQUFDLENBQUNDLENBQ2hDLENBQUUsQ0FBQztJQUNILE1BQU1DLGdCQUFnQixHQUFHVCxrQkFBa0IsQ0FBQ0csbUJBQW1CLENBQUUsSUFBSWQsT0FBTyxDQUMxRVksS0FBSyxDQUFDRyxVQUFVLENBQUNDLENBQUMsR0FBR1gsS0FBSyxDQUFDWSxNQUFNLEdBQUcsQ0FBQyxFQUNyQ0wsS0FBSyxDQUFDTSxxQkFBcUIsQ0FBQyxDQUFDLENBQUNDLENBQ2hDLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1FLGtCQUFrQixHQUFHLElBQUlwQixLQUFLLENBQUMsQ0FBQyxDQUFDcUIsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQ0MsTUFBTSxDQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRyxDQUFDLENBQUNBLE1BQU0sQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUFFLENBQUMsQ0FBQ0EsTUFBTSxDQUFFLENBQUMsRUFBRSxFQUFFLEVBQUcsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQzs7SUFFbkg7SUFDQSxNQUFNQyxzQkFBc0IsR0FBRyxJQUFJdEIsSUFBSSxDQUFFa0Isa0JBQWtCLEVBQ3pEO01BQ0VLLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLEtBQUssRUFBRWQsZUFBZSxDQUFDRyxDQUFDLEdBQUdWLDBCQUEwQjtNQUNyRHNCLE9BQU8sRUFBRWYsZUFBZSxDQUFDTTtJQUMzQixDQUFFLENBQUM7SUFDTCxJQUFJLENBQUNVLFFBQVEsQ0FBRUosc0JBQXVCLENBQUM7SUFFdkMsTUFBTUssZ0JBQWdCLEdBQUcsSUFBSS9CLFVBQVUsQ0FBRUQsT0FBTyxDQUFDaUMsT0FBTyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQ25FLE1BQU1DLG1CQUFtQixHQUFHRixnQkFBZ0IsQ0FBQ0csY0FBYyxDQUFFWixrQkFBbUIsQ0FBQztJQUNqRixNQUFNYSx1QkFBdUIsR0FBRyxJQUFJL0IsSUFBSSxDQUFFNkIsbUJBQW1CLEVBQzNEO01BQ0VOLE1BQU0sRUFBRSxPQUFPO01BQ2ZTLElBQUksRUFBRWYsZ0JBQWdCLENBQUNKLENBQUMsR0FBR1YsMEJBQTBCO01BQ3JEc0IsT0FBTyxFQUFFUixnQkFBZ0IsQ0FBQ0Q7SUFDNUIsQ0FBRSxDQUFDO0lBQ0wsSUFBSSxDQUFDVSxRQUFRLENBQUVLLHVCQUF3QixDQUFDOztJQUV4QztJQUNBdEIsS0FBSyxDQUFDd0IsaUJBQWlCLENBQUNDLElBQUksQ0FBRUMsU0FBUyxJQUFJO01BQ3pDLElBQUtDLElBQUksQ0FBQ0MsR0FBRyxDQUFFRixTQUFVLENBQUMsR0FBR0MsSUFBSSxDQUFDRSxFQUFFLEdBQUcsSUFBSSxFQUFHO1FBQzVDaEIsc0JBQXNCLENBQUNpQixJQUFJLEdBQUduQyxnQkFBZ0I7UUFDOUMyQix1QkFBdUIsQ0FBQ1EsSUFBSSxHQUFHbkMsZ0JBQWdCO01BQ2pELENBQUMsTUFDSTtRQUNIa0Isc0JBQXNCLENBQUNpQixJQUFJLEdBQUdsQyxvQkFBb0I7UUFDbEQwQix1QkFBdUIsQ0FBQ1EsSUFBSSxHQUFHbEMsb0JBQW9CO01BQ3JEO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBSixZQUFZLENBQUN1QyxRQUFRLENBQUUsb0JBQW9CLEVBQUVsQyxrQkFBbUIsQ0FBQztBQUVqRSxlQUFlQSxrQkFBa0IifQ==