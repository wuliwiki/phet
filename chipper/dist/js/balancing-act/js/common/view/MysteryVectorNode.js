// Copyright 2013-2022, University of Colorado Boulder

/**
 * Class that depicts a "mystery vector", which is a vector that is presented to
 * the user in the appropriate position but that has a fixed size and is labeled
 * with a question mark (or some other symbol).
 *
 * @author John Blanco
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import balancingAct from '../../balancingAct.js';
import BalancingActStrings from '../../BalancingActStrings.js';
const unknownMassLabelString = BalancingActStrings.unknownMassLabel;

// constants
const FONT = new PhetFont({
  size: 36
});
const Y_DIST_FROM_POSITION = 3; // In screen units.

class MysteryVectorNode extends Node {
  /**
   * @param positionedVectorProperty
   * @param visibilityProperty
   * @param modelViewTransform Model-view transform
   */
  constructor(positionedVectorProperty, visibilityProperty, modelViewTransform) {
    super();

    // Create the 'mystery vector' node and add it as a child.
    this.addChild(new Text(unknownMassLabelString, {
      font: FONT,
      fill: 'white',
      stroke: 'black',
      lineWidth: 1
    }));

    // Follow the position as it changes
    positionedVectorProperty.link(positionedVector => {
      this.centerX = modelViewTransform.modelToViewX(positionedVector.origin.x);
      this.top = modelViewTransform.modelToViewY(positionedVector.origin.y) + Y_DIST_FROM_POSITION;
    });

    // Control visibility
    visibilityProperty.link(visible => {
      this.visible = visible;
    });
  }
}
balancingAct.register('MysteryVectorNode', MysteryVectorNode);
export default MysteryVectorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIk5vZGUiLCJUZXh0IiwiYmFsYW5jaW5nQWN0IiwiQmFsYW5jaW5nQWN0U3RyaW5ncyIsInVua25vd25NYXNzTGFiZWxTdHJpbmciLCJ1bmtub3duTWFzc0xhYmVsIiwiRk9OVCIsInNpemUiLCJZX0RJU1RfRlJPTV9QT1NJVElPTiIsIk15c3RlcnlWZWN0b3JOb2RlIiwiY29uc3RydWN0b3IiLCJwb3NpdGlvbmVkVmVjdG9yUHJvcGVydHkiLCJ2aXNpYmlsaXR5UHJvcGVydHkiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJhZGRDaGlsZCIsImZvbnQiLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwibGluayIsInBvc2l0aW9uZWRWZWN0b3IiLCJjZW50ZXJYIiwibW9kZWxUb1ZpZXdYIiwib3JpZ2luIiwieCIsInRvcCIsIm1vZGVsVG9WaWV3WSIsInkiLCJ2aXNpYmxlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNeXN0ZXJ5VmVjdG9yTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB0aGF0IGRlcGljdHMgYSBcIm15c3RlcnkgdmVjdG9yXCIsIHdoaWNoIGlzIGEgdmVjdG9yIHRoYXQgaXMgcHJlc2VudGVkIHRvXHJcbiAqIHRoZSB1c2VyIGluIHRoZSBhcHByb3ByaWF0ZSBwb3NpdGlvbiBidXQgdGhhdCBoYXMgYSBmaXhlZCBzaXplIGFuZCBpcyBsYWJlbGVkXHJcbiAqIHdpdGggYSBxdWVzdGlvbiBtYXJrIChvciBzb21lIG90aGVyIHN5bWJvbCkuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBiYWxhbmNpbmdBY3QgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQWN0LmpzJztcclxuaW1wb3J0IEJhbGFuY2luZ0FjdFN0cmluZ3MgZnJvbSAnLi4vLi4vQmFsYW5jaW5nQWN0U3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCB1bmtub3duTWFzc0xhYmVsU3RyaW5nID0gQmFsYW5jaW5nQWN0U3RyaW5ncy51bmtub3duTWFzc0xhYmVsO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEZPTlQgPSBuZXcgUGhldEZvbnQoIHsgc2l6ZTogMzYgfSApO1xyXG5jb25zdCBZX0RJU1RfRlJPTV9QT1NJVElPTiA9IDM7IC8vIEluIHNjcmVlbiB1bml0cy5cclxuXHJcbmNsYXNzIE15c3RlcnlWZWN0b3JOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwb3NpdGlvbmVkVmVjdG9yUHJvcGVydHlcclxuICAgKiBAcGFyYW0gdmlzaWJpbGl0eVByb3BlcnR5XHJcbiAgICogQHBhcmFtIG1vZGVsVmlld1RyYW5zZm9ybSBNb2RlbC12aWV3IHRyYW5zZm9ybVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwb3NpdGlvbmVkVmVjdG9yUHJvcGVydHksIHZpc2liaWxpdHlQcm9wZXJ0eSwgbW9kZWxWaWV3VHJhbnNmb3JtICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlICdteXN0ZXJ5IHZlY3Rvcicgbm9kZSBhbmQgYWRkIGl0IGFzIGEgY2hpbGQuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgVGV4dCggdW5rbm93bk1hc3NMYWJlbFN0cmluZywgeyBmb250OiBGT05ULCBmaWxsOiAnd2hpdGUnLCBzdHJva2U6ICdibGFjaycsIGxpbmVXaWR0aDogMSB9ICkgKTtcclxuXHJcbiAgICAvLyBGb2xsb3cgdGhlIHBvc2l0aW9uIGFzIGl0IGNoYW5nZXNcclxuICAgIHBvc2l0aW9uZWRWZWN0b3JQcm9wZXJ0eS5saW5rKCBwb3NpdGlvbmVkVmVjdG9yID0+IHtcclxuICAgICAgdGhpcy5jZW50ZXJYID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3WCggcG9zaXRpb25lZFZlY3Rvci5vcmlnaW4ueCApO1xyXG4gICAgICB0aGlzLnRvcCA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1koIHBvc2l0aW9uZWRWZWN0b3Iub3JpZ2luLnkgKSArIFlfRElTVF9GUk9NX1BPU0lUSU9OO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENvbnRyb2wgdmlzaWJpbGl0eVxyXG4gICAgdmlzaWJpbGl0eVByb3BlcnR5LmxpbmsoIHZpc2libGUgPT4ge1xyXG4gICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuYmFsYW5jaW5nQWN0LnJlZ2lzdGVyKCAnTXlzdGVyeVZlY3Rvck5vZGUnLCBNeXN0ZXJ5VmVjdG9yTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTXlzdGVyeVZlY3Rvck5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxtQkFBbUIsTUFBTSw4QkFBOEI7QUFFOUQsTUFBTUMsc0JBQXNCLEdBQUdELG1CQUFtQixDQUFDRSxnQkFBZ0I7O0FBRW5FO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQUlQLFFBQVEsQ0FBRTtFQUFFUSxJQUFJLEVBQUU7QUFBRyxDQUFFLENBQUM7QUFDekMsTUFBTUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0FBRWhDLE1BQU1DLGlCQUFpQixTQUFTVCxJQUFJLENBQUM7RUFFbkM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFVSxXQUFXQSxDQUFFQyx3QkFBd0IsRUFBRUMsa0JBQWtCLEVBQUVDLGtCQUFrQixFQUFHO0lBQzlFLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSWIsSUFBSSxDQUFFRyxzQkFBc0IsRUFBRTtNQUFFVyxJQUFJLEVBQUVULElBQUk7TUFBRVUsSUFBSSxFQUFFLE9BQU87TUFBRUMsTUFBTSxFQUFFLE9BQU87TUFBRUMsU0FBUyxFQUFFO0lBQUUsQ0FBRSxDQUFFLENBQUM7O0lBRWpIO0lBQ0FQLHdCQUF3QixDQUFDUSxJQUFJLENBQUVDLGdCQUFnQixJQUFJO01BQ2pELElBQUksQ0FBQ0MsT0FBTyxHQUFHUixrQkFBa0IsQ0FBQ1MsWUFBWSxDQUFFRixnQkFBZ0IsQ0FBQ0csTUFBTSxDQUFDQyxDQUFFLENBQUM7TUFDM0UsSUFBSSxDQUFDQyxHQUFHLEdBQUdaLGtCQUFrQixDQUFDYSxZQUFZLENBQUVOLGdCQUFnQixDQUFDRyxNQUFNLENBQUNJLENBQUUsQ0FBQyxHQUFHbkIsb0JBQW9CO0lBQ2hHLENBQUUsQ0FBQzs7SUFFSDtJQUNBSSxrQkFBa0IsQ0FBQ08sSUFBSSxDQUFFUyxPQUFPLElBQUk7TUFDbEMsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLE9BQU87SUFDeEIsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBMUIsWUFBWSxDQUFDMkIsUUFBUSxDQUFFLG1CQUFtQixFQUFFcEIsaUJBQWtCLENBQUM7QUFFL0QsZUFBZUEsaUJBQWlCIn0=