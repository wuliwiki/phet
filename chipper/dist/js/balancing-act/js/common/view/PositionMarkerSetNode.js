// Copyright 2013-2021, University of Colorado Boulder

/**
 * Node that represents a set of position markers that collectively enumerate
 * the various snap-to positions on the plank.
 */

import { Node } from '../../../../scenery/js/imports.js';
import balancingAct from '../../balancingAct.js';
import Plank from '../model/Plank.js';
import PositionMarkerNode from './PositionMarkerNode.js';
class PositionMarkerSetNode extends Node {
  /**
   * @param {Plank} plank
   * @param {ModelViewTransform2} modelViewTransform
   * @param {BooleanProperty} visibleProperty
   */
  constructor(plank, modelViewTransform, visibleProperty) {
    super();

    // Add the individual position markers.
    const numTickMarks = Plank.LENGTH / Plank.INTER_SNAP_TO_MARKER_DISTANCE - 1;
    const interMarkerDistance = modelViewTransform.modelToViewDeltaX(Plank.INTER_SNAP_TO_MARKER_DISTANCE);
    for (let i = 0; i < numTickMarks; i++) {
      const label = Math.abs(i - Math.floor(numTickMarks / 2));
      if (label !== 0) {
        this.addChild(new PositionMarkerNode(label, {
          centerX: i * interMarkerDistance
        }));
      }
    }

    // Observe visibility.
    visibleProperty.link(visible => {
      this.visible = visible;
    });

    // Set initial position.
    const topCenter = modelViewTransform.modelToViewPosition(plank.bottomCenterPositionProperty.get());
    this.top = topCenter.y;
    this.centerX = topCenter.x;

    // Rotate with the plank.
    let rotationAngle = 0;
    const rotationPoint = modelViewTransform.modelToViewPosition(plank.pivotPoint);
    plank.tiltAngleProperty.link(angle => {
      const deltaAngle = rotationAngle - angle;
      rotationAngle = angle;
      this.rotateAround(rotationPoint, deltaAngle);
    });
  }
}
balancingAct.register('PositionMarkerSetNode', PositionMarkerSetNode);
export default PositionMarkerSetNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiYmFsYW5jaW5nQWN0IiwiUGxhbmsiLCJQb3NpdGlvbk1hcmtlck5vZGUiLCJQb3NpdGlvbk1hcmtlclNldE5vZGUiLCJjb25zdHJ1Y3RvciIsInBsYW5rIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwidmlzaWJsZVByb3BlcnR5IiwibnVtVGlja01hcmtzIiwiTEVOR1RIIiwiSU5URVJfU05BUF9UT19NQVJLRVJfRElTVEFOQ0UiLCJpbnRlck1hcmtlckRpc3RhbmNlIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJpIiwibGFiZWwiLCJNYXRoIiwiYWJzIiwiZmxvb3IiLCJhZGRDaGlsZCIsImNlbnRlclgiLCJsaW5rIiwidmlzaWJsZSIsInRvcENlbnRlciIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJib3R0b21DZW50ZXJQb3NpdGlvblByb3BlcnR5IiwiZ2V0IiwidG9wIiwieSIsIngiLCJyb3RhdGlvbkFuZ2xlIiwicm90YXRpb25Qb2ludCIsInBpdm90UG9pbnQiLCJ0aWx0QW5nbGVQcm9wZXJ0eSIsImFuZ2xlIiwiZGVsdGFBbmdsZSIsInJvdGF0ZUFyb3VuZCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUG9zaXRpb25NYXJrZXJTZXROb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vZGUgdGhhdCByZXByZXNlbnRzIGEgc2V0IG9mIHBvc2l0aW9uIG1hcmtlcnMgdGhhdCBjb2xsZWN0aXZlbHkgZW51bWVyYXRlXHJcbiAqIHRoZSB2YXJpb3VzIHNuYXAtdG8gcG9zaXRpb25zIG9uIHRoZSBwbGFuay5cclxuICovXHJcblxyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJhbGFuY2luZ0FjdCBmcm9tICcuLi8uLi9iYWxhbmNpbmdBY3QuanMnO1xyXG5pbXBvcnQgUGxhbmsgZnJvbSAnLi4vbW9kZWwvUGxhbmsuanMnO1xyXG5pbXBvcnQgUG9zaXRpb25NYXJrZXJOb2RlIGZyb20gJy4vUG9zaXRpb25NYXJrZXJOb2RlLmpzJztcclxuXHJcbmNsYXNzIFBvc2l0aW9uTWFya2VyU2V0Tm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1BsYW5rfSBwbGFua1xyXG4gICAqIEBwYXJhbSB7TW9kZWxWaWV3VHJhbnNmb3JtMn0gbW9kZWxWaWV3VHJhbnNmb3JtXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IHZpc2libGVQcm9wZXJ0eVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwbGFuaywgbW9kZWxWaWV3VHJhbnNmb3JtLCB2aXNpYmxlUHJvcGVydHkgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgaW5kaXZpZHVhbCBwb3NpdGlvbiBtYXJrZXJzLlxyXG4gICAgY29uc3QgbnVtVGlja01hcmtzID0gUGxhbmsuTEVOR1RIIC8gUGxhbmsuSU5URVJfU05BUF9UT19NQVJLRVJfRElTVEFOQ0UgLSAxO1xyXG4gICAgY29uc3QgaW50ZXJNYXJrZXJEaXN0YW5jZSA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWCggUGxhbmsuSU5URVJfU05BUF9UT19NQVJLRVJfRElTVEFOQ0UgKTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG51bVRpY2tNYXJrczsgaSsrICkge1xyXG4gICAgICBjb25zdCBsYWJlbCA9IE1hdGguYWJzKCBpIC0gTWF0aC5mbG9vciggbnVtVGlja01hcmtzIC8gMiApICk7XHJcbiAgICAgIGlmICggbGFiZWwgIT09IDAgKSB7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZCggbmV3IFBvc2l0aW9uTWFya2VyTm9kZSggbGFiZWwsIHsgY2VudGVyWDogaSAqIGludGVyTWFya2VyRGlzdGFuY2UgfSApICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBPYnNlcnZlIHZpc2liaWxpdHkuXHJcbiAgICB2aXNpYmxlUHJvcGVydHkubGluayggdmlzaWJsZSA9PiB7XHJcbiAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gU2V0IGluaXRpYWwgcG9zaXRpb24uXHJcbiAgICBjb25zdCB0b3BDZW50ZXIgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggcGxhbmsuYm90dG9tQ2VudGVyUG9zaXRpb25Qcm9wZXJ0eS5nZXQoKSApO1xyXG4gICAgdGhpcy50b3AgPSB0b3BDZW50ZXIueTtcclxuICAgIHRoaXMuY2VudGVyWCA9IHRvcENlbnRlci54O1xyXG5cclxuICAgIC8vIFJvdGF0ZSB3aXRoIHRoZSBwbGFuay5cclxuICAgIGxldCByb3RhdGlvbkFuZ2xlID0gMDtcclxuICAgIGNvbnN0IHJvdGF0aW9uUG9pbnQgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggcGxhbmsucGl2b3RQb2ludCApO1xyXG4gICAgcGxhbmsudGlsdEFuZ2xlUHJvcGVydHkubGluayggYW5nbGUgPT4ge1xyXG4gICAgICBjb25zdCBkZWx0YUFuZ2xlID0gcm90YXRpb25BbmdsZSAtIGFuZ2xlO1xyXG4gICAgICByb3RhdGlvbkFuZ2xlID0gYW5nbGU7XHJcbiAgICAgIHRoaXMucm90YXRlQXJvdW5kKCByb3RhdGlvblBvaW50LCBkZWx0YUFuZ2xlICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5iYWxhbmNpbmdBY3QucmVnaXN0ZXIoICdQb3NpdGlvbk1hcmtlclNldE5vZGUnLCBQb3NpdGlvbk1hcmtlclNldE5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvc2l0aW9uTWFya2VyU2V0Tm9kZTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsS0FBSyxNQUFNLG1CQUFtQjtBQUNyQyxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFFeEQsTUFBTUMscUJBQXFCLFNBQVNKLElBQUksQ0FBQztFQUV2QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsa0JBQWtCLEVBQUVDLGVBQWUsRUFBRztJQUN4RCxLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBLE1BQU1DLFlBQVksR0FBR1AsS0FBSyxDQUFDUSxNQUFNLEdBQUdSLEtBQUssQ0FBQ1MsNkJBQTZCLEdBQUcsQ0FBQztJQUMzRSxNQUFNQyxtQkFBbUIsR0FBR0wsa0JBQWtCLENBQUNNLGlCQUFpQixDQUFFWCxLQUFLLENBQUNTLDZCQUE4QixDQUFDO0lBQ3ZHLEtBQU0sSUFBSUcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTCxZQUFZLEVBQUVLLENBQUMsRUFBRSxFQUFHO01BQ3ZDLE1BQU1DLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUVILENBQUMsR0FBR0UsSUFBSSxDQUFDRSxLQUFLLENBQUVULFlBQVksR0FBRyxDQUFFLENBQUUsQ0FBQztNQUM1RCxJQUFLTSxLQUFLLEtBQUssQ0FBQyxFQUFHO1FBQ2pCLElBQUksQ0FBQ0ksUUFBUSxDQUFFLElBQUloQixrQkFBa0IsQ0FBRVksS0FBSyxFQUFFO1VBQUVLLE9BQU8sRUFBRU4sQ0FBQyxHQUFHRjtRQUFvQixDQUFFLENBQUUsQ0FBQztNQUN4RjtJQUNGOztJQUVBO0lBQ0FKLGVBQWUsQ0FBQ2EsSUFBSSxDQUFFQyxPQUFPLElBQUk7TUFDL0IsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLE9BQU87SUFDeEIsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsU0FBUyxHQUFHaEIsa0JBQWtCLENBQUNpQixtQkFBbUIsQ0FBRWxCLEtBQUssQ0FBQ21CLDRCQUE0QixDQUFDQyxHQUFHLENBQUMsQ0FBRSxDQUFDO0lBQ3BHLElBQUksQ0FBQ0MsR0FBRyxHQUFHSixTQUFTLENBQUNLLENBQUM7SUFDdEIsSUFBSSxDQUFDUixPQUFPLEdBQUdHLFNBQVMsQ0FBQ00sQ0FBQzs7SUFFMUI7SUFDQSxJQUFJQyxhQUFhLEdBQUcsQ0FBQztJQUNyQixNQUFNQyxhQUFhLEdBQUd4QixrQkFBa0IsQ0FBQ2lCLG1CQUFtQixDQUFFbEIsS0FBSyxDQUFDMEIsVUFBVyxDQUFDO0lBQ2hGMUIsS0FBSyxDQUFDMkIsaUJBQWlCLENBQUNaLElBQUksQ0FBRWEsS0FBSyxJQUFJO01BQ3JDLE1BQU1DLFVBQVUsR0FBR0wsYUFBYSxHQUFHSSxLQUFLO01BQ3hDSixhQUFhLEdBQUdJLEtBQUs7TUFDckIsSUFBSSxDQUFDRSxZQUFZLENBQUVMLGFBQWEsRUFBRUksVUFBVyxDQUFDO0lBQ2hELENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWxDLFlBQVksQ0FBQ29DLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRWpDLHFCQUFzQixDQUFDO0FBRXZFLGVBQWVBLHFCQUFxQiJ9