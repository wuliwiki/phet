// Copyright 2013-2023, University of Colorado Boulder

/**
 * This type defines a control panel that selects between the various types of
 * position markers, i.e. ruler, position markers, or nothing.
 *
 * @author John Blanco
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { HBox, HStrut, Text, VBox, VStrut } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import VerticalAquaRadioButtonGroup from '../../../../sun/js/VerticalAquaRadioButtonGroup.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import balancingAct from '../../balancingAct.js';
import BalancingActStrings from '../../BalancingActStrings.js';
import PositionIndicatorChoice from '../model/PositionIndicatorChoice.js';
const marksString = BalancingActStrings.marks;
const noneString = BalancingActStrings.none;
const positionString = BalancingActStrings.position;
const rulersString = BalancingActStrings.rulers;

// constants
const RADIO_BUTTON_TEXT_OPTIONS = {
  font: new PhetFont(14)
};
const TITLE_TEXT_OPTIONS = {
  font: new PhetFont(16)
};
class PositionIndicatorControlPanel extends Panel {
  /**
   * @param {Property} positionIndicatorStateProperty
   * @param {Object} [options]
   */
  constructor(positionIndicatorStateProperty, options) {
    options = merge({
      titleToControlsVerticalSpace: 5,
      fill: 'rgb( 240, 240, 240 )',
      xMargin: 5,
      align: 'left',
      tandem: Tandem.REQUIRED
    }, options);
    const positionRadioButtonGroup = new VerticalAquaRadioButtonGroup(positionIndicatorStateProperty, [{
      createNode: () => new Text(noneString, RADIO_BUTTON_TEXT_OPTIONS),
      value: PositionIndicatorChoice.NONE,
      tandemName: 'noneRadioButton'
    }, {
      createNode: () => new Text(rulersString, RADIO_BUTTON_TEXT_OPTIONS),
      value: PositionIndicatorChoice.RULERS,
      tandemName: 'rulerRadioButton'
    }, {
      createNode: () => new Text(marksString, RADIO_BUTTON_TEXT_OPTIONS),
      value: PositionIndicatorChoice.MARKS,
      tandemName: 'marksRadioButton'
    }], {
      radioButtonOptions: {
        radius: 6
      },
      touchAreaDilation: 5,
      tandem: options.tandem.createTandem('positionRadioButtonGroup')
    });
    const positionMarkerVBox = new VBox({
      children: [new Text(positionString, TITLE_TEXT_OPTIONS), new VStrut(options.titleToControlsVerticalSpace), new HBox({
        children: [new HStrut(10), positionRadioButtonGroup]
      })],
      align: 'left'
    });
    super(positionMarkerVBox, options);
  }
}
balancingAct.register('PositionIndicatorControlPanel', PositionIndicatorControlPanel);
export default PositionIndicatorControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRGb250IiwiSEJveCIsIkhTdHJ1dCIsIlRleHQiLCJWQm94IiwiVlN0cnV0IiwiUGFuZWwiLCJWZXJ0aWNhbEFxdWFSYWRpb0J1dHRvbkdyb3VwIiwiVGFuZGVtIiwiYmFsYW5jaW5nQWN0IiwiQmFsYW5jaW5nQWN0U3RyaW5ncyIsIlBvc2l0aW9uSW5kaWNhdG9yQ2hvaWNlIiwibWFya3NTdHJpbmciLCJtYXJrcyIsIm5vbmVTdHJpbmciLCJub25lIiwicG9zaXRpb25TdHJpbmciLCJwb3NpdGlvbiIsInJ1bGVyc1N0cmluZyIsInJ1bGVycyIsIlJBRElPX0JVVFRPTl9URVhUX09QVElPTlMiLCJmb250IiwiVElUTEVfVEVYVF9PUFRJT05TIiwiUG9zaXRpb25JbmRpY2F0b3JDb250cm9sUGFuZWwiLCJjb25zdHJ1Y3RvciIsInBvc2l0aW9uSW5kaWNhdG9yU3RhdGVQcm9wZXJ0eSIsIm9wdGlvbnMiLCJ0aXRsZVRvQ29udHJvbHNWZXJ0aWNhbFNwYWNlIiwiZmlsbCIsInhNYXJnaW4iLCJhbGlnbiIsInRhbmRlbSIsIlJFUVVJUkVEIiwicG9zaXRpb25SYWRpb0J1dHRvbkdyb3VwIiwiY3JlYXRlTm9kZSIsInZhbHVlIiwiTk9ORSIsInRhbmRlbU5hbWUiLCJSVUxFUlMiLCJNQVJLUyIsInJhZGlvQnV0dG9uT3B0aW9ucyIsInJhZGl1cyIsInRvdWNoQXJlYURpbGF0aW9uIiwiY3JlYXRlVGFuZGVtIiwicG9zaXRpb25NYXJrZXJWQm94IiwiY2hpbGRyZW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBvc2l0aW9uSW5kaWNhdG9yQ29udHJvbFBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgdHlwZSBkZWZpbmVzIGEgY29udHJvbCBwYW5lbCB0aGF0IHNlbGVjdHMgYmV0d2VlbiB0aGUgdmFyaW91cyB0eXBlcyBvZlxyXG4gKiBwb3NpdGlvbiBtYXJrZXJzLCBpLmUuIHJ1bGVyLCBwb3NpdGlvbiBtYXJrZXJzLCBvciBub3RoaW5nLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBIU3RydXQsIFRleHQsIFZCb3gsIFZTdHJ1dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvVmVydGljYWxBcXVhUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBiYWxhbmNpbmdBY3QgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQWN0LmpzJztcclxuaW1wb3J0IEJhbGFuY2luZ0FjdFN0cmluZ3MgZnJvbSAnLi4vLi4vQmFsYW5jaW5nQWN0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBQb3NpdGlvbkluZGljYXRvckNob2ljZSBmcm9tICcuLi9tb2RlbC9Qb3NpdGlvbkluZGljYXRvckNob2ljZS5qcyc7XHJcblxyXG5jb25zdCBtYXJrc1N0cmluZyA9IEJhbGFuY2luZ0FjdFN0cmluZ3MubWFya3M7XHJcbmNvbnN0IG5vbmVTdHJpbmcgPSBCYWxhbmNpbmdBY3RTdHJpbmdzLm5vbmU7XHJcbmNvbnN0IHBvc2l0aW9uU3RyaW5nID0gQmFsYW5jaW5nQWN0U3RyaW5ncy5wb3NpdGlvbjtcclxuY29uc3QgcnVsZXJzU3RyaW5nID0gQmFsYW5jaW5nQWN0U3RyaW5ncy5ydWxlcnM7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgUkFESU9fQlVUVE9OX1RFWFRfT1BUSU9OUyA9IHsgZm9udDogbmV3IFBoZXRGb250KCAxNCApIH07XHJcbmNvbnN0IFRJVExFX1RFWFRfT1BUSU9OUyA9IHsgZm9udDogbmV3IFBoZXRGb250KCAxNiApIH07XHJcblxyXG5jbGFzcyBQb3NpdGlvbkluZGljYXRvckNvbnRyb2xQYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eX0gcG9zaXRpb25JbmRpY2F0b3JTdGF0ZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwb3NpdGlvbkluZGljYXRvclN0YXRlUHJvcGVydHksIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIHRpdGxlVG9Db250cm9sc1ZlcnRpY2FsU3BhY2U6IDUsXHJcbiAgICAgIGZpbGw6ICdyZ2IoIDI0MCwgMjQwLCAyNDAgKScsXHJcbiAgICAgIHhNYXJnaW46IDUsXHJcbiAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVEXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgcG9zaXRpb25SYWRpb0J1dHRvbkdyb3VwID0gbmV3IFZlcnRpY2FsQXF1YVJhZGlvQnV0dG9uR3JvdXAoIHBvc2l0aW9uSW5kaWNhdG9yU3RhdGVQcm9wZXJ0eSwgW1xyXG4gICAgICB7XHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFRleHQoIG5vbmVTdHJpbmcsIFJBRElPX0JVVFRPTl9URVhUX09QVElPTlMgKSxcclxuICAgICAgICB2YWx1ZTogUG9zaXRpb25JbmRpY2F0b3JDaG9pY2UuTk9ORSxcclxuICAgICAgICB0YW5kZW1OYW1lOiAnbm9uZVJhZGlvQnV0dG9uJ1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFRleHQoIHJ1bGVyc1N0cmluZywgUkFESU9fQlVUVE9OX1RFWFRfT1BUSU9OUyApLFxyXG4gICAgICAgIHZhbHVlOiBQb3NpdGlvbkluZGljYXRvckNob2ljZS5SVUxFUlMsXHJcbiAgICAgICAgdGFuZGVtTmFtZTogJ3J1bGVyUmFkaW9CdXR0b24nXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggbWFya3NTdHJpbmcsIFJBRElPX0JVVFRPTl9URVhUX09QVElPTlMgKSxcclxuICAgICAgICB2YWx1ZTogUG9zaXRpb25JbmRpY2F0b3JDaG9pY2UuTUFSS1MsXHJcbiAgICAgICAgdGFuZGVtTmFtZTogJ21hcmtzUmFkaW9CdXR0b24nXHJcbiAgICAgIH1cclxuICAgIF0sIHtcclxuICAgICAgcmFkaW9CdXR0b25PcHRpb25zOiB7IHJhZGl1czogNiB9LFxyXG4gICAgICB0b3VjaEFyZWFEaWxhdGlvbjogNSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdwb3NpdGlvblJhZGlvQnV0dG9uR3JvdXAnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvbk1hcmtlclZCb3ggPSBuZXcgVkJveCgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBUZXh0KCBwb3NpdGlvblN0cmluZywgVElUTEVfVEVYVF9PUFRJT05TICksXHJcbiAgICAgICAgbmV3IFZTdHJ1dCggb3B0aW9ucy50aXRsZVRvQ29udHJvbHNWZXJ0aWNhbFNwYWNlICksXHJcbiAgICAgICAgbmV3IEhCb3goIHsgY2hpbGRyZW46IFsgbmV3IEhTdHJ1dCggMTAgKSwgcG9zaXRpb25SYWRpb0J1dHRvbkdyb3VwIF0gfSApXHJcbiAgICAgIF0sXHJcbiAgICAgIGFsaWduOiAnbGVmdCdcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggcG9zaXRpb25NYXJrZXJWQm94LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5iYWxhbmNpbmdBY3QucmVnaXN0ZXIoICdQb3NpdGlvbkluZGljYXRvckNvbnRyb2xQYW5lbCcsIFBvc2l0aW9uSW5kaWNhdG9yQ29udHJvbFBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBvc2l0aW9uSW5kaWNhdG9yQ29udHJvbFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sUUFBUSxtQ0FBbUM7QUFDcEYsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyw0QkFBNEIsTUFBTSxvREFBb0Q7QUFDN0YsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLG1CQUFtQixNQUFNLDhCQUE4QjtBQUM5RCxPQUFPQyx1QkFBdUIsTUFBTSxxQ0FBcUM7QUFFekUsTUFBTUMsV0FBVyxHQUFHRixtQkFBbUIsQ0FBQ0csS0FBSztBQUM3QyxNQUFNQyxVQUFVLEdBQUdKLG1CQUFtQixDQUFDSyxJQUFJO0FBQzNDLE1BQU1DLGNBQWMsR0FBR04sbUJBQW1CLENBQUNPLFFBQVE7QUFDbkQsTUFBTUMsWUFBWSxHQUFHUixtQkFBbUIsQ0FBQ1MsTUFBTTs7QUFFL0M7QUFDQSxNQUFNQyx5QkFBeUIsR0FBRztFQUFFQyxJQUFJLEVBQUUsSUFBSXJCLFFBQVEsQ0FBRSxFQUFHO0FBQUUsQ0FBQztBQUM5RCxNQUFNc0Isa0JBQWtCLEdBQUc7RUFBRUQsSUFBSSxFQUFFLElBQUlyQixRQUFRLENBQUUsRUFBRztBQUFFLENBQUM7QUFFdkQsTUFBTXVCLDZCQUE2QixTQUFTakIsS0FBSyxDQUFDO0VBRWhEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VrQixXQUFXQSxDQUFFQyw4QkFBOEIsRUFBRUMsT0FBTyxFQUFHO0lBRXJEQSxPQUFPLEdBQUczQixLQUFLLENBQUU7TUFDZjRCLDRCQUE0QixFQUFFLENBQUM7TUFDL0JDLElBQUksRUFBRSxzQkFBc0I7TUFDNUJDLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLEtBQUssRUFBRSxNQUFNO01BQ2JDLE1BQU0sRUFBRXZCLE1BQU0sQ0FBQ3dCO0lBQ2pCLENBQUMsRUFBRU4sT0FBUSxDQUFDO0lBRVosTUFBTU8sd0JBQXdCLEdBQUcsSUFBSTFCLDRCQUE0QixDQUFFa0IsOEJBQThCLEVBQUUsQ0FDakc7TUFDRVMsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSS9CLElBQUksQ0FBRVcsVUFBVSxFQUFFTSx5QkFBMEIsQ0FBQztNQUNuRWUsS0FBSyxFQUFFeEIsdUJBQXVCLENBQUN5QixJQUFJO01BQ25DQyxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRUgsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSS9CLElBQUksQ0FBRWUsWUFBWSxFQUFFRSx5QkFBMEIsQ0FBQztNQUNyRWUsS0FBSyxFQUFFeEIsdUJBQXVCLENBQUMyQixNQUFNO01BQ3JDRCxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRUgsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSS9CLElBQUksQ0FBRVMsV0FBVyxFQUFFUSx5QkFBMEIsQ0FBQztNQUNwRWUsS0FBSyxFQUFFeEIsdUJBQXVCLENBQUM0QixLQUFLO01BQ3BDRixVQUFVLEVBQUU7SUFDZCxDQUFDLENBQ0YsRUFBRTtNQUNERyxrQkFBa0IsRUFBRTtRQUFFQyxNQUFNLEVBQUU7TUFBRSxDQUFDO01BQ2pDQyxpQkFBaUIsRUFBRSxDQUFDO01BQ3BCWCxNQUFNLEVBQUVMLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDWSxZQUFZLENBQUUsMEJBQTJCO0lBQ2xFLENBQUUsQ0FBQztJQUVILE1BQU1DLGtCQUFrQixHQUFHLElBQUl4QyxJQUFJLENBQUU7TUFDbkN5QyxRQUFRLEVBQUUsQ0FDUixJQUFJMUMsSUFBSSxDQUFFYSxjQUFjLEVBQUVNLGtCQUFtQixDQUFDLEVBQzlDLElBQUlqQixNQUFNLENBQUVxQixPQUFPLENBQUNDLDRCQUE2QixDQUFDLEVBQ2xELElBQUkxQixJQUFJLENBQUU7UUFBRTRDLFFBQVEsRUFBRSxDQUFFLElBQUkzQyxNQUFNLENBQUUsRUFBRyxDQUFDLEVBQUUrQix3QkFBd0I7TUFBRyxDQUFFLENBQUMsQ0FDekU7TUFDREgsS0FBSyxFQUFFO0lBQ1QsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFYyxrQkFBa0IsRUFBRWxCLE9BQVEsQ0FBQztFQUN0QztBQUNGO0FBRUFqQixZQUFZLENBQUNxQyxRQUFRLENBQUUsK0JBQStCLEVBQUV2Qiw2QkFBOEIsQ0FBQztBQUN2RixlQUFlQSw2QkFBNkIifQ==