// Copyright 2013-2021, University of Colorado Boulder

/**
 * Base type for a model element that represents a person, a.k.a. a human, in
 * the model.  The human can be grabbed from a toolbox and placed on a
 * balance, so there needs to be a standing and sitting image representation.
 *
 * @author John Blanco
 */

import balancingAct from '../../../balancingAct.js';
import ImageMass from '../ImageMass.js';
class HumanMass extends ImageMass {
  /**
   * @param {number} massValue
   * @param {image} standingImage
   * @param {number} standingHeight
   * @param {image} sittingImage
   * @param {number} sittingHeight
   * @param {Vector2} initialPosition
   * @param {number} sittingCenterOfMassXOffset
   * @param {boolean} isMystery
   */
  constructor(massValue, standingImage, standingHeight, sittingImage, sittingHeight, initialPosition, sittingCenterOfMassXOffset, isMystery) {
    super(massValue, standingImage, standingHeight, initialPosition, isMystery);

    // Monitor the 'onPlank' property and update the image as changes occur.
    this.onPlankProperty.link(onPlank => {
      if (onPlank) {
        const xPosition = this.positionProperty.get().x;
        this.centerOfMassXOffset = sittingCenterOfMassXOffset * (xPosition < 0 ? -1 : 1);
        this.heightProperty.set(sittingHeight);
        this.reverseImage = xPosition < 0;
        this.imageProperty.set(sittingImage);
      } else {
        this.centerOfMassXOffset = 0;
        this.heightProperty.set(standingHeight);
        this.reverseImage = false;
        this.imageProperty.set(standingImage);
      }
    });
  }
}
balancingAct.register('HumanMass', HumanMass);
export default HumanMass;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYWxhbmNpbmdBY3QiLCJJbWFnZU1hc3MiLCJIdW1hbk1hc3MiLCJjb25zdHJ1Y3RvciIsIm1hc3NWYWx1ZSIsInN0YW5kaW5nSW1hZ2UiLCJzdGFuZGluZ0hlaWdodCIsInNpdHRpbmdJbWFnZSIsInNpdHRpbmdIZWlnaHQiLCJpbml0aWFsUG9zaXRpb24iLCJzaXR0aW5nQ2VudGVyT2ZNYXNzWE9mZnNldCIsImlzTXlzdGVyeSIsIm9uUGxhbmtQcm9wZXJ0eSIsImxpbmsiLCJvblBsYW5rIiwieFBvc2l0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsImdldCIsIngiLCJjZW50ZXJPZk1hc3NYT2Zmc2V0IiwiaGVpZ2h0UHJvcGVydHkiLCJzZXQiLCJyZXZlcnNlSW1hZ2UiLCJpbWFnZVByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJIdW1hbk1hc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmFzZSB0eXBlIGZvciBhIG1vZGVsIGVsZW1lbnQgdGhhdCByZXByZXNlbnRzIGEgcGVyc29uLCBhLmsuYS4gYSBodW1hbiwgaW5cclxuICogdGhlIG1vZGVsLiAgVGhlIGh1bWFuIGNhbiBiZSBncmFiYmVkIGZyb20gYSB0b29sYm94IGFuZCBwbGFjZWQgb24gYVxyXG4gKiBiYWxhbmNlLCBzbyB0aGVyZSBuZWVkcyB0byBiZSBhIHN0YW5kaW5nIGFuZCBzaXR0aW5nIGltYWdlIHJlcHJlc2VudGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IGJhbGFuY2luZ0FjdCBmcm9tICcuLi8uLi8uLi9iYWxhbmNpbmdBY3QuanMnO1xyXG5pbXBvcnQgSW1hZ2VNYXNzIGZyb20gJy4uL0ltYWdlTWFzcy5qcyc7XHJcblxyXG5jbGFzcyBIdW1hbk1hc3MgZXh0ZW5kcyBJbWFnZU1hc3Mge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFzc1ZhbHVlXHJcbiAgICogQHBhcmFtIHtpbWFnZX0gc3RhbmRpbmdJbWFnZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFuZGluZ0hlaWdodFxyXG4gICAqIEBwYXJhbSB7aW1hZ2V9IHNpdHRpbmdJbWFnZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXR0aW5nSGVpZ2h0XHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBpbml0aWFsUG9zaXRpb25cclxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l0dGluZ0NlbnRlck9mTWFzc1hPZmZzZXRcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTXlzdGVyeVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtYXNzVmFsdWUsIHN0YW5kaW5nSW1hZ2UsIHN0YW5kaW5nSGVpZ2h0LCBzaXR0aW5nSW1hZ2UsIHNpdHRpbmdIZWlnaHQsIGluaXRpYWxQb3NpdGlvbiwgc2l0dGluZ0NlbnRlck9mTWFzc1hPZmZzZXQsIGlzTXlzdGVyeSApIHtcclxuICAgIHN1cGVyKCBtYXNzVmFsdWUsIHN0YW5kaW5nSW1hZ2UsIHN0YW5kaW5nSGVpZ2h0LCBpbml0aWFsUG9zaXRpb24sIGlzTXlzdGVyeSApO1xyXG5cclxuICAgIC8vIE1vbml0b3IgdGhlICdvblBsYW5rJyBwcm9wZXJ0eSBhbmQgdXBkYXRlIHRoZSBpbWFnZSBhcyBjaGFuZ2VzIG9jY3VyLlxyXG4gICAgdGhpcy5vblBsYW5rUHJvcGVydHkubGluayggb25QbGFuayA9PiB7XHJcbiAgICAgIGlmICggb25QbGFuayApIHtcclxuICAgICAgICBjb25zdCB4UG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkueDtcclxuICAgICAgICB0aGlzLmNlbnRlck9mTWFzc1hPZmZzZXQgPSBzaXR0aW5nQ2VudGVyT2ZNYXNzWE9mZnNldCAqICggeFBvc2l0aW9uIDwgMCA/IC0xIDogMSApO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0UHJvcGVydHkuc2V0KCBzaXR0aW5nSGVpZ2h0ICk7XHJcbiAgICAgICAgdGhpcy5yZXZlcnNlSW1hZ2UgPSB4UG9zaXRpb24gPCAwO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VQcm9wZXJ0eS5zZXQoIHNpdHRpbmdJbWFnZSApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY2VudGVyT2ZNYXNzWE9mZnNldCA9IDA7XHJcbiAgICAgICAgdGhpcy5oZWlnaHRQcm9wZXJ0eS5zZXQoIHN0YW5kaW5nSGVpZ2h0ICk7XHJcbiAgICAgICAgdGhpcy5yZXZlcnNlSW1hZ2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmltYWdlUHJvcGVydHkuc2V0KCBzdGFuZGluZ0ltYWdlICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0FjdC5yZWdpc3RlciggJ0h1bWFuTWFzcycsIEh1bWFuTWFzcyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSHVtYW5NYXNzOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsWUFBWSxNQUFNLDBCQUEwQjtBQUNuRCxPQUFPQyxTQUFTLE1BQU0saUJBQWlCO0FBRXZDLE1BQU1DLFNBQVMsU0FBU0QsU0FBUyxDQUFDO0VBRWhDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLFNBQVMsRUFBRUMsYUFBYSxFQUFFQyxjQUFjLEVBQUVDLFlBQVksRUFBRUMsYUFBYSxFQUFFQyxlQUFlLEVBQUVDLDBCQUEwQixFQUFFQyxTQUFTLEVBQUc7SUFDM0ksS0FBSyxDQUFFUCxTQUFTLEVBQUVDLGFBQWEsRUFBRUMsY0FBYyxFQUFFRyxlQUFlLEVBQUVFLFNBQVUsQ0FBQzs7SUFFN0U7SUFDQSxJQUFJLENBQUNDLGVBQWUsQ0FBQ0MsSUFBSSxDQUFFQyxPQUFPLElBQUk7TUFDcEMsSUFBS0EsT0FBTyxFQUFHO1FBQ2IsTUFBTUMsU0FBUyxHQUFHLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUNDLENBQUM7UUFDL0MsSUFBSSxDQUFDQyxtQkFBbUIsR0FBR1QsMEJBQTBCLElBQUtLLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFFO1FBQ2xGLElBQUksQ0FBQ0ssY0FBYyxDQUFDQyxHQUFHLENBQUViLGFBQWMsQ0FBQztRQUN4QyxJQUFJLENBQUNjLFlBQVksR0FBR1AsU0FBUyxHQUFHLENBQUM7UUFDakMsSUFBSSxDQUFDUSxhQUFhLENBQUNGLEdBQUcsQ0FBRWQsWUFBYSxDQUFDO01BQ3hDLENBQUMsTUFDSTtRQUNILElBQUksQ0FBQ1ksbUJBQW1CLEdBQUcsQ0FBQztRQUM1QixJQUFJLENBQUNDLGNBQWMsQ0FBQ0MsR0FBRyxDQUFFZixjQUFlLENBQUM7UUFDekMsSUFBSSxDQUFDZ0IsWUFBWSxHQUFHLEtBQUs7UUFDekIsSUFBSSxDQUFDQyxhQUFhLENBQUNGLEdBQUcsQ0FBRWhCLGFBQWMsQ0FBQztNQUN6QztJQUNGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQUwsWUFBWSxDQUFDd0IsUUFBUSxDQUFFLFdBQVcsRUFBRXRCLFNBQVUsQ0FBQztBQUUvQyxlQUFlQSxTQUFTIn0=