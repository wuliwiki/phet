// Copyright 2013-2022, University of Colorado Boulder

/**
 * Class that represents a stack of bricks in the model.  Note that a single brick is represented as a stack of size 1.
 *
 * @author John Blanco
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import { Shape } from '../../../../../kite/js/imports.js';
import balancingAct from '../../../balancingAct.js';
import Mass from '../Mass.js';

// constants
const BRICK_WIDTH = 0.2; // In meters.
const BRICK_HEIGHT = BRICK_WIDTH / 3;
const BRICK_MASS = 5; // In kg.

class BrickStack extends Mass {
  /**
   * @param {number} numBricks
   * @param {Vector2} initialPosition
   * @param {Object} [options]
   */
  constructor(numBricks, initialPosition, options) {
    if (numBricks <= 0) {
      throw new Error('Must have at least one brick in stack');
    }
    initialPosition = initialPosition || Vector2.ZERO; // Default initial position.
    super(numBricks * BRICK_MASS, initialPosition, false, options);
    this.numBricks = numBricks;

    // Generate the shape of the brick stack.
    const brickStackShape = new Shape();
    let brickOriginY = 0;
    for (let i = 0; i < numBricks; i++) {
      brickStackShape.rect(0, brickOriginY, BRICK_WIDTH, BRICK_HEIGHT);
      brickOriginY += BRICK_HEIGHT;
    }
    this.shape = brickStackShape;
  }

  /**
   * @public
   */
  createCopy() {
    return new BrickStack(this.numBricks, this.positionProperty.get());
  }

  /**
   * @public
   */
  getMiddlePoint() {
    return this.shape.bounds.center.rotated(this.rotationAngleProperty.get()).plus(this.positionProperty.get());
  }
}

// static constants
BrickStack.BRICK_MASS = BRICK_MASS;
BrickStack.BRICK_HEIGHT = BRICK_HEIGHT;
balancingAct.register('BrickStack', BrickStack);
export default BrickStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2hhcGUiLCJiYWxhbmNpbmdBY3QiLCJNYXNzIiwiQlJJQ0tfV0lEVEgiLCJCUklDS19IRUlHSFQiLCJCUklDS19NQVNTIiwiQnJpY2tTdGFjayIsImNvbnN0cnVjdG9yIiwibnVtQnJpY2tzIiwiaW5pdGlhbFBvc2l0aW9uIiwib3B0aW9ucyIsIkVycm9yIiwiWkVSTyIsImJyaWNrU3RhY2tTaGFwZSIsImJyaWNrT3JpZ2luWSIsImkiLCJyZWN0Iiwic2hhcGUiLCJjcmVhdGVDb3B5IiwicG9zaXRpb25Qcm9wZXJ0eSIsImdldCIsImdldE1pZGRsZVBvaW50IiwiYm91bmRzIiwiY2VudGVyIiwicm90YXRlZCIsInJvdGF0aW9uQW5nbGVQcm9wZXJ0eSIsInBsdXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJyaWNrU3RhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2xhc3MgdGhhdCByZXByZXNlbnRzIGEgc3RhY2sgb2YgYnJpY2tzIGluIHRoZSBtb2RlbC4gIE5vdGUgdGhhdCBhIHNpbmdsZSBicmljayBpcyByZXByZXNlbnRlZCBhcyBhIHN0YWNrIG9mIHNpemUgMS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcbmltcG9ydCBNYXNzIGZyb20gJy4uL01hc3MuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEJSSUNLX1dJRFRIID0gMC4yOyAvLyBJbiBtZXRlcnMuXHJcbmNvbnN0IEJSSUNLX0hFSUdIVCA9IEJSSUNLX1dJRFRIIC8gMztcclxuY29uc3QgQlJJQ0tfTUFTUyA9IDU7IC8vIEluIGtnLlxyXG5cclxuY2xhc3MgQnJpY2tTdGFjayBleHRlbmRzIE1hc3Mge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtQnJpY2tzXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBpbml0aWFsUG9zaXRpb25cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG51bUJyaWNrcywgaW5pdGlhbFBvc2l0aW9uLCBvcHRpb25zICkge1xyXG5cclxuICAgIGlmICggbnVtQnJpY2tzIDw9IDAgKSB7IHRocm93IG5ldyBFcnJvciggJ011c3QgaGF2ZSBhdCBsZWFzdCBvbmUgYnJpY2sgaW4gc3RhY2snICk7IH1cclxuXHJcbiAgICBpbml0aWFsUG9zaXRpb24gPSBpbml0aWFsUG9zaXRpb24gfHwgVmVjdG9yMi5aRVJPOyAvLyBEZWZhdWx0IGluaXRpYWwgcG9zaXRpb24uXHJcbiAgICBzdXBlciggbnVtQnJpY2tzICogQlJJQ0tfTUFTUywgaW5pdGlhbFBvc2l0aW9uLCBmYWxzZSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubnVtQnJpY2tzID0gbnVtQnJpY2tzO1xyXG5cclxuICAgIC8vIEdlbmVyYXRlIHRoZSBzaGFwZSBvZiB0aGUgYnJpY2sgc3RhY2suXHJcbiAgICBjb25zdCBicmlja1N0YWNrU2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuICAgIGxldCBicmlja09yaWdpblkgPSAwO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbnVtQnJpY2tzOyBpKysgKSB7XHJcbiAgICAgIGJyaWNrU3RhY2tTaGFwZS5yZWN0KCAwLCBicmlja09yaWdpblksIEJSSUNLX1dJRFRILCBCUklDS19IRUlHSFQgKTtcclxuICAgICAgYnJpY2tPcmlnaW5ZICs9IEJSSUNLX0hFSUdIVDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNoYXBlID0gYnJpY2tTdGFja1NoYXBlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNyZWF0ZUNvcHkoKSB7XHJcbiAgICByZXR1cm4gbmV3IEJyaWNrU3RhY2soIHRoaXMubnVtQnJpY2tzLCB0aGlzLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBnZXRNaWRkbGVQb2ludCgpIHtcclxuICAgIHJldHVybiB0aGlzLnNoYXBlLmJvdW5kcy5jZW50ZXIucm90YXRlZCggdGhpcy5yb3RhdGlvbkFuZ2xlUHJvcGVydHkuZ2V0KCkgKS5wbHVzKCB0aGlzLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIHN0YXRpYyBjb25zdGFudHNcclxuQnJpY2tTdGFjay5CUklDS19NQVNTID0gQlJJQ0tfTUFTUztcclxuQnJpY2tTdGFjay5CUklDS19IRUlHSFQgPSBCUklDS19IRUlHSFQ7XHJcblxyXG5iYWxhbmNpbmdBY3QucmVnaXN0ZXIoICdCcmlja1N0YWNrJywgQnJpY2tTdGFjayApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnJpY2tTdGFjazsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLGtDQUFrQztBQUN0RCxTQUFTQyxLQUFLLFFBQVEsbUNBQW1DO0FBQ3pELE9BQU9DLFlBQVksTUFBTSwwQkFBMEI7QUFDbkQsT0FBT0MsSUFBSSxNQUFNLFlBQVk7O0FBRTdCO0FBQ0EsTUFBTUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLE1BQU1DLFlBQVksR0FBR0QsV0FBVyxHQUFHLENBQUM7QUFDcEMsTUFBTUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDOztBQUV0QixNQUFNQyxVQUFVLFNBQVNKLElBQUksQ0FBQztFQUU1QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLFNBQVMsRUFBRUMsZUFBZSxFQUFFQyxPQUFPLEVBQUc7SUFFakQsSUFBS0YsU0FBUyxJQUFJLENBQUMsRUFBRztNQUFFLE1BQU0sSUFBSUcsS0FBSyxDQUFFLHVDQUF3QyxDQUFDO0lBQUU7SUFFcEZGLGVBQWUsR0FBR0EsZUFBZSxJQUFJVixPQUFPLENBQUNhLElBQUksQ0FBQyxDQUFDO0lBQ25ELEtBQUssQ0FBRUosU0FBUyxHQUFHSCxVQUFVLEVBQUVJLGVBQWUsRUFBRSxLQUFLLEVBQUVDLE9BQVEsQ0FBQztJQUVoRSxJQUFJLENBQUNGLFNBQVMsR0FBR0EsU0FBUzs7SUFFMUI7SUFDQSxNQUFNSyxlQUFlLEdBQUcsSUFBSWIsS0FBSyxDQUFDLENBQUM7SUFDbkMsSUFBSWMsWUFBWSxHQUFHLENBQUM7SUFDcEIsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdQLFNBQVMsRUFBRU8sQ0FBQyxFQUFFLEVBQUc7TUFDcENGLGVBQWUsQ0FBQ0csSUFBSSxDQUFFLENBQUMsRUFBRUYsWUFBWSxFQUFFWCxXQUFXLEVBQUVDLFlBQWEsQ0FBQztNQUNsRVUsWUFBWSxJQUFJVixZQUFZO0lBQzlCO0lBRUEsSUFBSSxDQUFDYSxLQUFLLEdBQUdKLGVBQWU7RUFDOUI7O0VBRUE7QUFDRjtBQUNBO0VBQ0VLLFVBQVVBLENBQUEsRUFBRztJQUNYLE9BQU8sSUFBSVosVUFBVSxDQUFFLElBQUksQ0FBQ0UsU0FBUyxFQUFFLElBQUksQ0FBQ1csZ0JBQWdCLENBQUNDLEdBQUcsQ0FBQyxDQUFFLENBQUM7RUFDdEU7O0VBRUE7QUFDRjtBQUNBO0VBQ0VDLGNBQWNBLENBQUEsRUFBRztJQUNmLE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUNLLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQUUsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQ0wsR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDTSxJQUFJLENBQUUsSUFBSSxDQUFDUCxnQkFBZ0IsQ0FBQ0MsR0FBRyxDQUFDLENBQUUsQ0FBQztFQUNqSDtBQUNGOztBQUVBO0FBQ0FkLFVBQVUsQ0FBQ0QsVUFBVSxHQUFHQSxVQUFVO0FBQ2xDQyxVQUFVLENBQUNGLFlBQVksR0FBR0EsWUFBWTtBQUV0Q0gsWUFBWSxDQUFDMEIsUUFBUSxDQUFFLFlBQVksRUFBRXJCLFVBQVcsQ0FBQztBQUVqRCxlQUFlQSxVQUFVIn0=