// Copyright 2013-2021, University of Colorado Boulder

/**
 * Base class for all objects that can be placed on the balance.
 *
 * @author John Blanco
 */

import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import balancingAct from '../../balancingAct.js';

// constants
const MIN_ANIMATION_VELOCITY = 3; // In meters/sec.
const MAX_REMOVAL_ANIMATION_DURATION = 0.75; // In seconds.

// TODO: JSDoc is missing in many places, see https://github.com/phetsims/balancing-act/issues/96
class Mass extends PhetioObject {
  constructor(massValue, initialPosition, isMystery, options) {
    options = merge({
      tandem: Tandem.REQUIRED,
      phetioType: ReferenceIO(IOType.ObjectIO),
      phetioState: false
    }, options);

    // instrumented so it can be phetioDynamicElement: true for PhetioGroups
    super(options);

    // Property that indicates whether this mass is currently user controlled, i.e. being moved around by the user.
    this.userControlledProperty = new Property(false);

    // Property that contains the position in model space.  By convention for this simulation, the position of a mass is
    // the center bottom of the model object.
    this.positionProperty = new Property(initialPosition);

    // Property that contains the rotation angle, in radians, of the model element.  By convention for this simulation,
    // the point of rotation is considered to be the center bottom of the model element.
    this.rotationAngleProperty = new Property(0);

    // Property that tracks whether this mass is on the plank, changes to which may initiate changes in the visual
    // depiction of the mass.
    this.onPlankProperty = new Property(false);

    // Boolean property that indicates whether this model element is currently animating.  At the time of this writing,
    // the only animation supported is a simple linear motion to a preset point.
    this.animatingProperty = new Property(false);

    //------------------------------------------------------------------------
    // Externally used (i.e. public) attributes that don't need to be properties.
    //------------------------------------------------------------------------
    this.massValue = massValue;
    this.animationDestination = null;
    this.animationMotionVector = null;
    this.animationScale = 1;
    this.expectedAnimationTime = 0;
    this.isMystery = isMystery;

    // This property is used to keep track of a function that is used to to
    // add/remove this mass from a list of user-controlled masses.
    this.userControlledMassesUpdater = null;

    // Since not all objects are symmetrical, some may need to have an offset
    // that indicates where their center of mass is when placed on a balance.
    // This is the horizontal offset from the center of the shape or image.
    this.centerOfMassXOffset = 0;
  }

  /**
   * @public
   */
  reset() {
    this.userControlledProperty.reset();
    this.positionProperty.reset();
    this.rotationAngleProperty.reset();
    this.onPlankProperty.reset();
    this.animatingProperty.reset();
  }

  /**
   * @public
   */
  translate(translationVector) {
    this.positionProperty.set(this.positionProperty.get().plus(translationVector));
  }

  /**
   * @public
   */
  getMiddlePoint() {
    throw new Error('getMiddlePoint should be implemented in descendant types.');
  }

  /**
   * @public
   */
  initiateAnimation() {
    // Calculate velocity.  A higher velocity is used if the model element has a long way to travel, otherwise it
    // takes too long.
    const position = this.positionProperty.get();
    const velocity = Math.max(position.distance(this.animationDestination) / MAX_REMOVAL_ANIMATION_DURATION, MIN_ANIMATION_VELOCITY);
    this.expectedAnimationTime = position.distance(this.animationDestination) / velocity; // In seconds.

    // Calculate the animation motion vector.
    this.animationMotionVector = new Vector2(velocity, 0);
    const animationAngle = Math.atan2(this.animationDestination.y - position.y, this.animationDestination.x - position.x);
    this.animationMotionVector = this.animationMotionVector.rotated(animationAngle);

    // Update the property that tracks the animation state.
    this.animatingProperty.set(true);
  }

  /**
   * @public
   */
  step(dt) {
    if (this.animatingProperty.get()) {
      // Do a step of the linear animation towards the destination.
      if (this.positionProperty.get().distance(this.animationDestination) >= this.animationMotionVector.magnitude * dt) {
        // Perform next step of animation.
        this.translate(this.animationMotionVector.times(dt));
        this.animationScale = Math.max(this.animationScale - dt / this.expectedAnimationTime * 0.9, 0.1);
      } else {
        // Close enough - animation is complete.
        this.positionProperty.set(this.animationDestination);
        this.animatingProperty.set(false);
        this.animationScale = 1;
      }
    }
  }

  /**
   * @public
   */
  createCopy() {
    throw new Error('createCopy should be implemented in descendant types.');
  }
}
balancingAct.register('Mass', Mass);
export default Mass;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJtZXJnZSIsIlBoZXRpb09iamVjdCIsIlRhbmRlbSIsIklPVHlwZSIsIlJlZmVyZW5jZUlPIiwiYmFsYW5jaW5nQWN0IiwiTUlOX0FOSU1BVElPTl9WRUxPQ0lUWSIsIk1BWF9SRU1PVkFMX0FOSU1BVElPTl9EVVJBVElPTiIsIk1hc3MiLCJjb25zdHJ1Y3RvciIsIm1hc3NWYWx1ZSIsImluaXRpYWxQb3NpdGlvbiIsImlzTXlzdGVyeSIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsInBoZXRpb1R5cGUiLCJPYmplY3RJTyIsInBoZXRpb1N0YXRlIiwidXNlckNvbnRyb2xsZWRQcm9wZXJ0eSIsInBvc2l0aW9uUHJvcGVydHkiLCJyb3RhdGlvbkFuZ2xlUHJvcGVydHkiLCJvblBsYW5rUHJvcGVydHkiLCJhbmltYXRpbmdQcm9wZXJ0eSIsImFuaW1hdGlvbkRlc3RpbmF0aW9uIiwiYW5pbWF0aW9uTW90aW9uVmVjdG9yIiwiYW5pbWF0aW9uU2NhbGUiLCJleHBlY3RlZEFuaW1hdGlvblRpbWUiLCJ1c2VyQ29udHJvbGxlZE1hc3Nlc1VwZGF0ZXIiLCJjZW50ZXJPZk1hc3NYT2Zmc2V0IiwicmVzZXQiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGlvblZlY3RvciIsInNldCIsImdldCIsInBsdXMiLCJnZXRNaWRkbGVQb2ludCIsIkVycm9yIiwiaW5pdGlhdGVBbmltYXRpb24iLCJwb3NpdGlvbiIsInZlbG9jaXR5IiwiTWF0aCIsIm1heCIsImRpc3RhbmNlIiwiYW5pbWF0aW9uQW5nbGUiLCJhdGFuMiIsInkiLCJ4Iiwicm90YXRlZCIsInN0ZXAiLCJkdCIsIm1hZ25pdHVkZSIsInRpbWVzIiwiY3JlYXRlQ29weSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWFzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgb2JqZWN0cyB0aGF0IGNhbiBiZSBwbGFjZWQgb24gdGhlIGJhbGFuY2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb09iamVjdC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvUmVmZXJlbmNlSU8uanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTUlOX0FOSU1BVElPTl9WRUxPQ0lUWSA9IDM7IC8vIEluIG1ldGVycy9zZWMuXHJcbmNvbnN0IE1BWF9SRU1PVkFMX0FOSU1BVElPTl9EVVJBVElPTiA9IDAuNzU7IC8vIEluIHNlY29uZHMuXHJcblxyXG4vLyBUT0RPOiBKU0RvYyBpcyBtaXNzaW5nIGluIG1hbnkgcGxhY2VzLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2JhbGFuY2luZy1hY3QvaXNzdWVzLzk2XHJcbmNsYXNzIE1hc3MgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG5cclxuICBjb25zdHJ1Y3RvciggbWFzc1ZhbHVlLCBpbml0aWFsUG9zaXRpb24sIGlzTXlzdGVyeSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHBoZXRpb1R5cGU6IFJlZmVyZW5jZUlPKCBJT1R5cGUuT2JqZWN0SU8gKSxcclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gaW5zdHJ1bWVudGVkIHNvIGl0IGNhbiBiZSBwaGV0aW9EeW5hbWljRWxlbWVudDogdHJ1ZSBmb3IgUGhldGlvR3JvdXBzXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFByb3BlcnR5IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBtYXNzIGlzIGN1cnJlbnRseSB1c2VyIGNvbnRyb2xsZWQsIGkuZS4gYmVpbmcgbW92ZWQgYXJvdW5kIGJ5IHRoZSB1c2VyLlxyXG4gICAgdGhpcy51c2VyQ29udHJvbGxlZFByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBmYWxzZSApO1xyXG5cclxuICAgIC8vIFByb3BlcnR5IHRoYXQgY29udGFpbnMgdGhlIHBvc2l0aW9uIGluIG1vZGVsIHNwYWNlLiAgQnkgY29udmVudGlvbiBmb3IgdGhpcyBzaW11bGF0aW9uLCB0aGUgcG9zaXRpb24gb2YgYSBtYXNzIGlzXHJcbiAgICAvLyB0aGUgY2VudGVyIGJvdHRvbSBvZiB0aGUgbW9kZWwgb2JqZWN0LlxyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBpbml0aWFsUG9zaXRpb24gKTtcclxuXHJcbiAgICAvLyBQcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZSByb3RhdGlvbiBhbmdsZSwgaW4gcmFkaWFucywgb2YgdGhlIG1vZGVsIGVsZW1lbnQuICBCeSBjb252ZW50aW9uIGZvciB0aGlzIHNpbXVsYXRpb24sXHJcbiAgICAvLyB0aGUgcG9pbnQgb2Ygcm90YXRpb24gaXMgY29uc2lkZXJlZCB0byBiZSB0aGUgY2VudGVyIGJvdHRvbSBvZiB0aGUgbW9kZWwgZWxlbWVudC5cclxuICAgIHRoaXMucm90YXRpb25BbmdsZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCAwICk7XHJcblxyXG4gICAgLy8gUHJvcGVydHkgdGhhdCB0cmFja3Mgd2hldGhlciB0aGlzIG1hc3MgaXMgb24gdGhlIHBsYW5rLCBjaGFuZ2VzIHRvIHdoaWNoIG1heSBpbml0aWF0ZSBjaGFuZ2VzIGluIHRoZSB2aXN1YWxcclxuICAgIC8vIGRlcGljdGlvbiBvZiB0aGUgbWFzcy5cclxuICAgIHRoaXMub25QbGFua1Byb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBmYWxzZSApO1xyXG5cclxuICAgIC8vIEJvb2xlYW4gcHJvcGVydHkgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIG1vZGVsIGVsZW1lbnQgaXMgY3VycmVudGx5IGFuaW1hdGluZy4gIEF0IHRoZSB0aW1lIG9mIHRoaXMgd3JpdGluZyxcclxuICAgIC8vIHRoZSBvbmx5IGFuaW1hdGlvbiBzdXBwb3J0ZWQgaXMgYSBzaW1wbGUgbGluZWFyIG1vdGlvbiB0byBhIHByZXNldCBwb2ludC5cclxuICAgIHRoaXMuYW5pbWF0aW5nUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIEV4dGVybmFsbHkgdXNlZCAoaS5lLiBwdWJsaWMpIGF0dHJpYnV0ZXMgdGhhdCBkb24ndCBuZWVkIHRvIGJlIHByb3BlcnRpZXMuXHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgdGhpcy5tYXNzVmFsdWUgPSBtYXNzVmFsdWU7XHJcbiAgICB0aGlzLmFuaW1hdGlvbkRlc3RpbmF0aW9uID0gbnVsbDtcclxuICAgIHRoaXMuYW5pbWF0aW9uTW90aW9uVmVjdG9yID0gbnVsbDtcclxuICAgIHRoaXMuYW5pbWF0aW9uU2NhbGUgPSAxO1xyXG4gICAgdGhpcy5leHBlY3RlZEFuaW1hdGlvblRpbWUgPSAwO1xyXG4gICAgdGhpcy5pc015c3RlcnkgPSBpc015c3Rlcnk7XHJcblxyXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIGtlZXAgdHJhY2sgb2YgYSBmdW5jdGlvbiB0aGF0IGlzIHVzZWQgdG8gdG9cclxuICAgIC8vIGFkZC9yZW1vdmUgdGhpcyBtYXNzIGZyb20gYSBsaXN0IG9mIHVzZXItY29udHJvbGxlZCBtYXNzZXMuXHJcbiAgICB0aGlzLnVzZXJDb250cm9sbGVkTWFzc2VzVXBkYXRlciA9IG51bGw7XHJcblxyXG4gICAgLy8gU2luY2Ugbm90IGFsbCBvYmplY3RzIGFyZSBzeW1tZXRyaWNhbCwgc29tZSBtYXkgbmVlZCB0byBoYXZlIGFuIG9mZnNldFxyXG4gICAgLy8gdGhhdCBpbmRpY2F0ZXMgd2hlcmUgdGhlaXIgY2VudGVyIG9mIG1hc3MgaXMgd2hlbiBwbGFjZWQgb24gYSBiYWxhbmNlLlxyXG4gICAgLy8gVGhpcyBpcyB0aGUgaG9yaXpvbnRhbCBvZmZzZXQgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBzaGFwZSBvciBpbWFnZS5cclxuICAgIHRoaXMuY2VudGVyT2ZNYXNzWE9mZnNldCA9IDA7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy51c2VyQ29udHJvbGxlZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMucm90YXRpb25BbmdsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLm9uUGxhbmtQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5hbmltYXRpbmdQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHRyYW5zbGF0ZSggdHJhbnNsYXRpb25WZWN0b3IgKSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkuc2V0KCB0aGlzLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkucGx1cyggdHJhbnNsYXRpb25WZWN0b3IgKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldE1pZGRsZVBvaW50KCkgeyB0aHJvdyBuZXcgRXJyb3IoICdnZXRNaWRkbGVQb2ludCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgaW4gZGVzY2VuZGFudCB0eXBlcy4nICk7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGluaXRpYXRlQW5pbWF0aW9uKCkge1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB2ZWxvY2l0eS4gIEEgaGlnaGVyIHZlbG9jaXR5IGlzIHVzZWQgaWYgdGhlIG1vZGVsIGVsZW1lbnQgaGFzIGEgbG9uZyB3YXkgdG8gdHJhdmVsLCBvdGhlcndpc2UgaXRcclxuICAgIC8vIHRha2VzIHRvbyBsb25nLlxyXG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCk7XHJcbiAgICBjb25zdCB2ZWxvY2l0eSA9IE1hdGgubWF4KFxyXG4gICAgICBwb3NpdGlvbi5kaXN0YW5jZSggdGhpcy5hbmltYXRpb25EZXN0aW5hdGlvbiApIC8gTUFYX1JFTU9WQUxfQU5JTUFUSU9OX0RVUkFUSU9OLFxyXG4gICAgICBNSU5fQU5JTUFUSU9OX1ZFTE9DSVRZXHJcbiAgICApO1xyXG4gICAgdGhpcy5leHBlY3RlZEFuaW1hdGlvblRpbWUgPSBwb3NpdGlvbi5kaXN0YW5jZSggdGhpcy5hbmltYXRpb25EZXN0aW5hdGlvbiApIC8gdmVsb2NpdHk7IC8vIEluIHNlY29uZHMuXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBhbmltYXRpb24gbW90aW9uIHZlY3Rvci5cclxuICAgIHRoaXMuYW5pbWF0aW9uTW90aW9uVmVjdG9yID0gbmV3IFZlY3RvcjIoIHZlbG9jaXR5LCAwICk7XHJcbiAgICBjb25zdCBhbmltYXRpb25BbmdsZSA9IE1hdGguYXRhbjIoXHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uRGVzdGluYXRpb24ueSAtIHBvc2l0aW9uLnksXHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uRGVzdGluYXRpb24ueCAtIHBvc2l0aW9uLnhcclxuICAgICk7XHJcbiAgICB0aGlzLmFuaW1hdGlvbk1vdGlvblZlY3RvciA9IHRoaXMuYW5pbWF0aW9uTW90aW9uVmVjdG9yLnJvdGF0ZWQoIGFuaW1hdGlvbkFuZ2xlICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBwcm9wZXJ0eSB0aGF0IHRyYWNrcyB0aGUgYW5pbWF0aW9uIHN0YXRlLlxyXG4gICAgdGhpcy5hbmltYXRpbmdQcm9wZXJ0eS5zZXQoIHRydWUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzdGVwKCBkdCApIHtcclxuICAgIGlmICggdGhpcy5hbmltYXRpbmdQcm9wZXJ0eS5nZXQoKSApIHtcclxuXHJcbiAgICAgIC8vIERvIGEgc3RlcCBvZiB0aGUgbGluZWFyIGFuaW1hdGlvbiB0b3dhcmRzIHRoZSBkZXN0aW5hdGlvbi5cclxuICAgICAgaWYgKCB0aGlzLnBvc2l0aW9uUHJvcGVydHkuZ2V0KCkuZGlzdGFuY2UoIHRoaXMuYW5pbWF0aW9uRGVzdGluYXRpb24gKSA+PSB0aGlzLmFuaW1hdGlvbk1vdGlvblZlY3Rvci5tYWduaXR1ZGUgKiBkdCApIHtcclxuXHJcbiAgICAgICAgLy8gUGVyZm9ybSBuZXh0IHN0ZXAgb2YgYW5pbWF0aW9uLlxyXG4gICAgICAgIHRoaXMudHJhbnNsYXRlKCB0aGlzLmFuaW1hdGlvbk1vdGlvblZlY3Rvci50aW1lcyggZHQgKSApO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uU2NhbGUgPSBNYXRoLm1heCggdGhpcy5hbmltYXRpb25TY2FsZSAtICggZHQgLyB0aGlzLmV4cGVjdGVkQW5pbWF0aW9uVGltZSApICogMC45LCAwLjEgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgLy8gQ2xvc2UgZW5vdWdoIC0gYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxyXG4gICAgICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5zZXQoIHRoaXMuYW5pbWF0aW9uRGVzdGluYXRpb24gKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGluZ1Byb3BlcnR5LnNldCggZmFsc2UgKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvblNjYWxlID0gMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNyZWF0ZUNvcHkoKSB7IHRocm93IG5ldyBFcnJvciggJ2NyZWF0ZUNvcHkgc2hvdWxkIGJlIGltcGxlbWVudGVkIGluIGRlc2NlbmRhbnQgdHlwZXMuJyApOyB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0FjdC5yZWdpc3RlciggJ01hc3MnLCBNYXNzICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNYXNzOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxZQUFZLE1BQU0sdUNBQXVDO0FBQ2hFLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsTUFBTSxNQUFNLHVDQUF1QztBQUMxRCxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7O0FBRWhEO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsQ0FBQyxD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