// Copyright 2014-2022, University of Colorado Boulder

/**
 * A challenge, used in the balance game, in which the user attempts to
 * deduce the mass of a "mystery mass" using another mass of a known value.
 *
 * @author John Blanco
 */

import balancingAct from '../../balancingAct.js';
import BalancingActStrings from '../../BalancingActStrings.js';
import ColumnState from '../../common/model/ColumnState.js';
import BalanceGameChallenge from './BalanceGameChallenge.js';
const whatIsTheMassString = BalancingActStrings.whatIsTheMass;
class MassDeductionChallenge extends BalanceGameChallenge {
  /**
   * @param fixedMassDistancePair
   * @param movableMass
   * @param solutionToDisplay
   */
  constructor(fixedMassDistancePair, movableMass, solutionToDisplay) {
    super(ColumnState.NO_COLUMNS);
    this.fixedMassDistancePairs.push(fixedMassDistancePair);
    this.movableMasses.push(movableMass);
    this.balancedConfiguration.push(solutionToDisplay);

    // Set up the challenge view configuration, which provides information to the view about how this challenge should
    // be displayed.
    this.viewConfig = {
      title: whatIsTheMassString,
      showMassEntryDialog: true,
      showTiltPredictionSelector: false
    };
  }

  // statics

  /**
   * convenience factory method for creating a mass deduction challenge
   * @returns {MassDeductionChallenge}
   * @public
   */
  static create(mysteryMass, mysteryMassDistanceFromCenter, knownMass) {
    // Create the mass-distance pair for the mystery mass.
    const mysteryMassDistancePair = {
      mass: mysteryMass,
      distance: mysteryMassDistanceFromCenter
    };

    // Create a valid solution for the challenge.
    const solution = {
      mass: knownMass,
      distance: -mysteryMass.massValue * mysteryMassDistanceFromCenter / knownMass.massValue
    };

    // Combine into challenge.
    return new MassDeductionChallenge(mysteryMassDistancePair, knownMass, solution);
  }
}
balancingAct.register('MassDeductionChallenge', MassDeductionChallenge);
export default MassDeductionChallenge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYWxhbmNpbmdBY3QiLCJCYWxhbmNpbmdBY3RTdHJpbmdzIiwiQ29sdW1uU3RhdGUiLCJCYWxhbmNlR2FtZUNoYWxsZW5nZSIsIndoYXRJc1RoZU1hc3NTdHJpbmciLCJ3aGF0SXNUaGVNYXNzIiwiTWFzc0RlZHVjdGlvbkNoYWxsZW5nZSIsImNvbnN0cnVjdG9yIiwiZml4ZWRNYXNzRGlzdGFuY2VQYWlyIiwibW92YWJsZU1hc3MiLCJzb2x1dGlvblRvRGlzcGxheSIsIk5PX0NPTFVNTlMiLCJmaXhlZE1hc3NEaXN0YW5jZVBhaXJzIiwicHVzaCIsIm1vdmFibGVNYXNzZXMiLCJiYWxhbmNlZENvbmZpZ3VyYXRpb24iLCJ2aWV3Q29uZmlnIiwidGl0bGUiLCJzaG93TWFzc0VudHJ5RGlhbG9nIiwic2hvd1RpbHRQcmVkaWN0aW9uU2VsZWN0b3IiLCJjcmVhdGUiLCJteXN0ZXJ5TWFzcyIsIm15c3RlcnlNYXNzRGlzdGFuY2VGcm9tQ2VudGVyIiwia25vd25NYXNzIiwibXlzdGVyeU1hc3NEaXN0YW5jZVBhaXIiLCJtYXNzIiwiZGlzdGFuY2UiLCJzb2x1dGlvbiIsIm1hc3NWYWx1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWFzc0RlZHVjdGlvbkNoYWxsZW5nZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGNoYWxsZW5nZSwgdXNlZCBpbiB0aGUgYmFsYW5jZSBnYW1lLCBpbiB3aGljaCB0aGUgdXNlciBhdHRlbXB0cyB0b1xyXG4gKiBkZWR1Y2UgdGhlIG1hc3Mgb2YgYSBcIm15c3RlcnkgbWFzc1wiIHVzaW5nIGFub3RoZXIgbWFzcyBvZiBhIGtub3duIHZhbHVlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IGJhbGFuY2luZ0FjdCBmcm9tICcuLi8uLi9iYWxhbmNpbmdBY3QuanMnO1xyXG5pbXBvcnQgQmFsYW5jaW5nQWN0U3RyaW5ncyBmcm9tICcuLi8uLi9CYWxhbmNpbmdBY3RTdHJpbmdzLmpzJztcclxuaW1wb3J0IENvbHVtblN0YXRlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Db2x1bW5TdGF0ZS5qcyc7XHJcbmltcG9ydCBCYWxhbmNlR2FtZUNoYWxsZW5nZSBmcm9tICcuL0JhbGFuY2VHYW1lQ2hhbGxlbmdlLmpzJztcclxuXHJcbmNvbnN0IHdoYXRJc1RoZU1hc3NTdHJpbmcgPSBCYWxhbmNpbmdBY3RTdHJpbmdzLndoYXRJc1RoZU1hc3M7XHJcblxyXG5jbGFzcyBNYXNzRGVkdWN0aW9uQ2hhbGxlbmdlIGV4dGVuZHMgQmFsYW5jZUdhbWVDaGFsbGVuZ2Uge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gZml4ZWRNYXNzRGlzdGFuY2VQYWlyXHJcbiAgICogQHBhcmFtIG1vdmFibGVNYXNzXHJcbiAgICogQHBhcmFtIHNvbHV0aW9uVG9EaXNwbGF5XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGZpeGVkTWFzc0Rpc3RhbmNlUGFpciwgbW92YWJsZU1hc3MsIHNvbHV0aW9uVG9EaXNwbGF5ICkge1xyXG4gICAgc3VwZXIoIENvbHVtblN0YXRlLk5PX0NPTFVNTlMgKTtcclxuXHJcbiAgICB0aGlzLmZpeGVkTWFzc0Rpc3RhbmNlUGFpcnMucHVzaCggZml4ZWRNYXNzRGlzdGFuY2VQYWlyICk7XHJcbiAgICB0aGlzLm1vdmFibGVNYXNzZXMucHVzaCggbW92YWJsZU1hc3MgKTtcclxuICAgIHRoaXMuYmFsYW5jZWRDb25maWd1cmF0aW9uLnB1c2goIHNvbHV0aW9uVG9EaXNwbGF5ICk7XHJcblxyXG4gICAgLy8gU2V0IHVwIHRoZSBjaGFsbGVuZ2UgdmlldyBjb25maWd1cmF0aW9uLCB3aGljaCBwcm92aWRlcyBpbmZvcm1hdGlvbiB0byB0aGUgdmlldyBhYm91dCBob3cgdGhpcyBjaGFsbGVuZ2Ugc2hvdWxkXHJcbiAgICAvLyBiZSBkaXNwbGF5ZWQuXHJcbiAgICB0aGlzLnZpZXdDb25maWcgPSB7XHJcbiAgICAgIHRpdGxlOiB3aGF0SXNUaGVNYXNzU3RyaW5nLFxyXG4gICAgICBzaG93TWFzc0VudHJ5RGlhbG9nOiB0cnVlLFxyXG4gICAgICBzaG93VGlsdFByZWRpY3Rpb25TZWxlY3RvcjogZmFsc2VcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBzdGF0aWNzXHJcblxyXG4gIC8qKlxyXG4gICAqIGNvbnZlbmllbmNlIGZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhIG1hc3MgZGVkdWN0aW9uIGNoYWxsZW5nZVxyXG4gICAqIEByZXR1cm5zIHtNYXNzRGVkdWN0aW9uQ2hhbGxlbmdlfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBzdGF0aWMgY3JlYXRlKCBteXN0ZXJ5TWFzcywgbXlzdGVyeU1hc3NEaXN0YW5jZUZyb21DZW50ZXIsIGtub3duTWFzcyApIHtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIG1hc3MtZGlzdGFuY2UgcGFpciBmb3IgdGhlIG15c3RlcnkgbWFzcy5cclxuICAgIGNvbnN0IG15c3RlcnlNYXNzRGlzdGFuY2VQYWlyID0geyBtYXNzOiBteXN0ZXJ5TWFzcywgZGlzdGFuY2U6IG15c3RlcnlNYXNzRGlzdGFuY2VGcm9tQ2VudGVyIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgdmFsaWQgc29sdXRpb24gZm9yIHRoZSBjaGFsbGVuZ2UuXHJcbiAgICBjb25zdCBzb2x1dGlvbiA9IHtcclxuICAgICAgbWFzczoga25vd25NYXNzLFxyXG4gICAgICBkaXN0YW5jZTogLW15c3RlcnlNYXNzLm1hc3NWYWx1ZSAqIG15c3RlcnlNYXNzRGlzdGFuY2VGcm9tQ2VudGVyIC8ga25vd25NYXNzLm1hc3NWYWx1ZVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDb21iaW5lIGludG8gY2hhbGxlbmdlLlxyXG4gICAgcmV0dXJuIG5ldyBNYXNzRGVkdWN0aW9uQ2hhbGxlbmdlKCBteXN0ZXJ5TWFzc0Rpc3RhbmNlUGFpciwga25vd25NYXNzLCBzb2x1dGlvbiApO1xyXG4gIH1cclxufVxyXG5cclxuYmFsYW5jaW5nQWN0LnJlZ2lzdGVyKCAnTWFzc0RlZHVjdGlvbkNoYWxsZW5nZScsIE1hc3NEZWR1Y3Rpb25DaGFsbGVuZ2UgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1hc3NEZWR1Y3Rpb25DaGFsbGVuZ2U7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxtQkFBbUIsTUFBTSw4QkFBOEI7QUFDOUQsT0FBT0MsV0FBVyxNQUFNLG1DQUFtQztBQUMzRCxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFFNUQsTUFBTUMsbUJBQW1CLEdBQUdILG1CQUFtQixDQUFDSSxhQUFhO0FBRTdELE1BQU1DLHNCQUFzQixTQUFTSCxvQkFBb0IsQ0FBQztFQUV4RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLHFCQUFxQixFQUFFQyxXQUFXLEVBQUVDLGlCQUFpQixFQUFHO0lBQ25FLEtBQUssQ0FBRVIsV0FBVyxDQUFDUyxVQUFXLENBQUM7SUFFL0IsSUFBSSxDQUFDQyxzQkFBc0IsQ0FBQ0MsSUFBSSxDQUFFTCxxQkFBc0IsQ0FBQztJQUN6RCxJQUFJLENBQUNNLGFBQWEsQ0FBQ0QsSUFBSSxDQUFFSixXQUFZLENBQUM7SUFDdEMsSUFBSSxDQUFDTSxxQkFBcUIsQ0FBQ0YsSUFBSSxDQUFFSCxpQkFBa0IsQ0FBQzs7SUFFcEQ7SUFDQTtJQUNBLElBQUksQ0FBQ00sVUFBVSxHQUFHO01BQ2hCQyxLQUFLLEVBQUViLG1CQUFtQjtNQUMxQmMsbUJBQW1CLEVBQUUsSUFBSTtNQUN6QkMsMEJBQTBCLEVBQUU7SUFDOUIsQ0FBQztFQUNIOztFQUVBOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFPQyxNQUFNQSxDQUFFQyxXQUFXLEVBQUVDLDZCQUE2QixFQUFFQyxTQUFTLEVBQUc7SUFFckU7SUFDQSxNQUFNQyx1QkFBdUIsR0FBRztNQUFFQyxJQUFJLEVBQUVKLFdBQVc7TUFBRUssUUFBUSxFQUFFSjtJQUE4QixDQUFDOztJQUU5RjtJQUNBLE1BQU1LLFFBQVEsR0FBRztNQUNmRixJQUFJLEVBQUVGLFNBQVM7TUFDZkcsUUFBUSxFQUFFLENBQUNMLFdBQVcsQ0FBQ08sU0FBUyxHQUFHTiw2QkFBNkIsR0FBR0MsU0FBUyxDQUFDSztJQUMvRSxDQUFDOztJQUVEO0lBQ0EsT0FBTyxJQUFJdEIsc0JBQXNCLENBQUVrQix1QkFBdUIsRUFBRUQsU0FBUyxFQUFFSSxRQUFTLENBQUM7RUFDbkY7QUFDRjtBQUVBM0IsWUFBWSxDQUFDNkIsUUFBUSxDQUFFLHdCQUF3QixFQUFFdkIsc0JBQXVCLENBQUM7QUFFekUsZUFBZUEsc0JBQXNCIn0=