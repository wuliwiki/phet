// Copyright 2014-2022, University of Colorado Boulder

/**
 * A challenge, used in the balance game, in which the user must predict which
 * way the plank will tilt when the supports are removed.
 *
 * @author John Blanco
 */

import balancingAct from '../../balancingAct.js';
import BalancingActStrings from '../../BalancingActStrings.js';
import ColumnState from '../../common/model/ColumnState.js';
import BalanceGameChallenge from './BalanceGameChallenge.js';
const whatWillHappenString = BalancingActStrings.whatWillHappen;
class TiltPredictionChallenge extends BalanceGameChallenge {
  /**
   * @param fixedMasses
   */
  constructor(fixedMasses) {
    super(ColumnState.DOUBLE_COLUMNS);
    Array.prototype.push.apply(this.fixedMassDistancePairs, fixedMasses);

    // Set up the challenge view configuration, which provides information to
    // the view about how this challenge should be displayed.
    this.viewConfig = {
      title: whatWillHappenString,
      showMassEntryDialog: false,
      showTiltPredictionSelector: true
    };
  }

  // statics

  /**
   * convenience factory method for creating a mass deduction challenge
   * @returns {MassDeductionChallenge}
   * @public
   */
  static create(fixedMass1, fixedMass1DistanceFromCenter, fixedMass2, fixedMass2DistanceFromCenter) {
    // Add the fixed masses and their distances from the center of the balance.
    const fixedMassesList = [];
    fixedMassesList.push({
      mass: fixedMass1,
      distance: fixedMass1DistanceFromCenter
    });
    fixedMassesList.push({
      mass: fixedMass2,
      distance: fixedMass2DistanceFromCenter
    });

    // Create the actual challenge.
    return new TiltPredictionChallenge(fixedMassesList);
  }
}
balancingAct.register('TiltPredictionChallenge', TiltPredictionChallenge);
export default TiltPredictionChallenge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYWxhbmNpbmdBY3QiLCJCYWxhbmNpbmdBY3RTdHJpbmdzIiwiQ29sdW1uU3RhdGUiLCJCYWxhbmNlR2FtZUNoYWxsZW5nZSIsIndoYXRXaWxsSGFwcGVuU3RyaW5nIiwid2hhdFdpbGxIYXBwZW4iLCJUaWx0UHJlZGljdGlvbkNoYWxsZW5nZSIsImNvbnN0cnVjdG9yIiwiZml4ZWRNYXNzZXMiLCJET1VCTEVfQ09MVU1OUyIsIkFycmF5IiwicHJvdG90eXBlIiwicHVzaCIsImFwcGx5IiwiZml4ZWRNYXNzRGlzdGFuY2VQYWlycyIsInZpZXdDb25maWciLCJ0aXRsZSIsInNob3dNYXNzRW50cnlEaWFsb2ciLCJzaG93VGlsdFByZWRpY3Rpb25TZWxlY3RvciIsImNyZWF0ZSIsImZpeGVkTWFzczEiLCJmaXhlZE1hc3MxRGlzdGFuY2VGcm9tQ2VudGVyIiwiZml4ZWRNYXNzMiIsImZpeGVkTWFzczJEaXN0YW5jZUZyb21DZW50ZXIiLCJmaXhlZE1hc3Nlc0xpc3QiLCJtYXNzIiwiZGlzdGFuY2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlRpbHRQcmVkaWN0aW9uQ2hhbGxlbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgY2hhbGxlbmdlLCB1c2VkIGluIHRoZSBiYWxhbmNlIGdhbWUsIGluIHdoaWNoIHRoZSB1c2VyIG11c3QgcHJlZGljdCB3aGljaFxyXG4gKiB3YXkgdGhlIHBsYW5rIHdpbGwgdGlsdCB3aGVuIHRoZSBzdXBwb3J0cyBhcmUgcmVtb3ZlZC5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBiYWxhbmNpbmdBY3QgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQWN0LmpzJztcclxuaW1wb3J0IEJhbGFuY2luZ0FjdFN0cmluZ3MgZnJvbSAnLi4vLi4vQmFsYW5jaW5nQWN0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBDb2x1bW5TdGF0ZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ29sdW1uU3RhdGUuanMnO1xyXG5pbXBvcnQgQmFsYW5jZUdhbWVDaGFsbGVuZ2UgZnJvbSAnLi9CYWxhbmNlR2FtZUNoYWxsZW5nZS5qcyc7XHJcblxyXG5jb25zdCB3aGF0V2lsbEhhcHBlblN0cmluZyA9IEJhbGFuY2luZ0FjdFN0cmluZ3Mud2hhdFdpbGxIYXBwZW47XHJcblxyXG5jbGFzcyBUaWx0UHJlZGljdGlvbkNoYWxsZW5nZSBleHRlbmRzIEJhbGFuY2VHYW1lQ2hhbGxlbmdlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGZpeGVkTWFzc2VzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGZpeGVkTWFzc2VzICkge1xyXG4gICAgc3VwZXIoIENvbHVtblN0YXRlLkRPVUJMRV9DT0xVTU5TICk7XHJcbiAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSggdGhpcy5maXhlZE1hc3NEaXN0YW5jZVBhaXJzLCBmaXhlZE1hc3NlcyApO1xyXG5cclxuICAgIC8vIFNldCB1cCB0aGUgY2hhbGxlbmdlIHZpZXcgY29uZmlndXJhdGlvbiwgd2hpY2ggcHJvdmlkZXMgaW5mb3JtYXRpb24gdG9cclxuICAgIC8vIHRoZSB2aWV3IGFib3V0IGhvdyB0aGlzIGNoYWxsZW5nZSBzaG91bGQgYmUgZGlzcGxheWVkLlxyXG4gICAgdGhpcy52aWV3Q29uZmlnID0ge1xyXG4gICAgICB0aXRsZTogd2hhdFdpbGxIYXBwZW5TdHJpbmcsXHJcbiAgICAgIHNob3dNYXNzRW50cnlEaWFsb2c6IGZhbHNlLFxyXG4gICAgICBzaG93VGlsdFByZWRpY3Rpb25TZWxlY3RvcjogdHJ1ZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIHN0YXRpY3NcclxuXHJcbiAgLyoqXHJcbiAgICogY29udmVuaWVuY2UgZmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGEgbWFzcyBkZWR1Y3Rpb24gY2hhbGxlbmdlXHJcbiAgICogQHJldHVybnMge01hc3NEZWR1Y3Rpb25DaGFsbGVuZ2V9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHN0YXRpYyBjcmVhdGUoIGZpeGVkTWFzczEsIGZpeGVkTWFzczFEaXN0YW5jZUZyb21DZW50ZXIsIGZpeGVkTWFzczIsIGZpeGVkTWFzczJEaXN0YW5jZUZyb21DZW50ZXIgKSB7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBmaXhlZCBtYXNzZXMgYW5kIHRoZWlyIGRpc3RhbmNlcyBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGJhbGFuY2UuXHJcbiAgICBjb25zdCBmaXhlZE1hc3Nlc0xpc3QgPSBbXTtcclxuICAgIGZpeGVkTWFzc2VzTGlzdC5wdXNoKCB7IG1hc3M6IGZpeGVkTWFzczEsIGRpc3RhbmNlOiBmaXhlZE1hc3MxRGlzdGFuY2VGcm9tQ2VudGVyIH0gKTtcclxuICAgIGZpeGVkTWFzc2VzTGlzdC5wdXNoKCB7IG1hc3M6IGZpeGVkTWFzczIsIGRpc3RhbmNlOiBmaXhlZE1hc3MyRGlzdGFuY2VGcm9tQ2VudGVyIH0gKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGFjdHVhbCBjaGFsbGVuZ2UuXHJcbiAgICByZXR1cm4gbmV3IFRpbHRQcmVkaWN0aW9uQ2hhbGxlbmdlKCBmaXhlZE1hc3Nlc0xpc3QgKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0FjdC5yZWdpc3RlciggJ1RpbHRQcmVkaWN0aW9uQ2hhbGxlbmdlJywgVGlsdFByZWRpY3Rpb25DaGFsbGVuZ2UgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRpbHRQcmVkaWN0aW9uQ2hhbGxlbmdlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsbUJBQW1CLE1BQU0sOEJBQThCO0FBQzlELE9BQU9DLFdBQVcsTUFBTSxtQ0FBbUM7QUFDM0QsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBRTVELE1BQU1DLG9CQUFvQixHQUFHSCxtQkFBbUIsQ0FBQ0ksY0FBYztBQUUvRCxNQUFNQyx1QkFBdUIsU0FBU0gsb0JBQW9CLENBQUM7RUFFekQ7QUFDRjtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLFdBQVcsRUFBRztJQUN6QixLQUFLLENBQUVOLFdBQVcsQ0FBQ08sY0FBZSxDQUFDO0lBQ25DQyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUUsSUFBSSxDQUFDQyxzQkFBc0IsRUFBRU4sV0FBWSxDQUFDOztJQUV0RTtJQUNBO0lBQ0EsSUFBSSxDQUFDTyxVQUFVLEdBQUc7TUFDaEJDLEtBQUssRUFBRVosb0JBQW9CO01BQzNCYSxtQkFBbUIsRUFBRSxLQUFLO01BQzFCQywwQkFBMEIsRUFBRTtJQUM5QixDQUFDO0VBQ0g7O0VBRUE7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFLE9BQU9DLE1BQU1BLENBQUVDLFVBQVUsRUFBRUMsNEJBQTRCLEVBQUVDLFVBQVUsRUFBRUMsNEJBQTRCLEVBQUc7SUFFbEc7SUFDQSxNQUFNQyxlQUFlLEdBQUcsRUFBRTtJQUMxQkEsZUFBZSxDQUFDWixJQUFJLENBQUU7TUFBRWEsSUFBSSxFQUFFTCxVQUFVO01BQUVNLFFBQVEsRUFBRUw7SUFBNkIsQ0FBRSxDQUFDO0lBQ3BGRyxlQUFlLENBQUNaLElBQUksQ0FBRTtNQUFFYSxJQUFJLEVBQUVILFVBQVU7TUFBRUksUUFBUSxFQUFFSDtJQUE2QixDQUFFLENBQUM7O0lBRXBGO0lBQ0EsT0FBTyxJQUFJakIsdUJBQXVCLENBQUVrQixlQUFnQixDQUFDO0VBQ3ZEO0FBQ0Y7QUFFQXhCLFlBQVksQ0FBQzJCLFFBQVEsQ0FBRSx5QkFBeUIsRUFBRXJCLHVCQUF3QixDQUFDO0FBRTNFLGVBQWVBLHVCQUF1QiJ9