// Copyright 2013-2021, University of Colorado Boulder

/**
 * Primary model class for the 'balance lab' tab in the balancing act simulation. This model depicts a plank on a
 * fulcrum with a collection of masses that the user can put on and remove from the plank.
 *
 * @author John Blanco
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import PhetioGroup from '../../../../tandem/js/PhetioGroup.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import balancingAct from '../../balancingAct.js';
import BalanceModel from '../../common/model/BalanceModel.js';
import BrickStack from '../../common/model/masses/BrickStack.js';
import MysteryMass from '../../common/model/masses/MysteryMass.js';
class BalanceLabModel extends BalanceModel {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    super(tandem);

    // @public {PhetioGroup.<BrickStack>}
    this.brickStackGroup = new PhetioGroup((tandem, numberOfBricks, position) => {
      const brickStack = new BrickStack(numberOfBricks, position, {
        tandem: tandem,
        phetioDynamicElement: true
      });
      brickStack.userControlledProperty.set(true);
      brickStack.animationDestination = position;
      return brickStack;
    }, [1, Vector2.ZERO], {
      tandem: tandem.createTandem('brickStackGroup'),
      phetioType: PhetioGroup.PhetioGroupIO(ReferenceIO(IOType.ObjectIO))
    });

    // @public {PhetioGroup.<MysteryMass>}
    this.mysteryMassGroup = new PhetioGroup((tandem, position, mysteryMassId) => {
      const mysteryMassModelElement = new MysteryMass(position, mysteryMassId, {
        tandem: tandem,
        phetioDynamicElement: true
      });
      mysteryMassModelElement.animationDestination = position;
      mysteryMassModelElement.userControlledProperty.set(true);
      return mysteryMassModelElement;
    }, [Vector2.ZERO, 0], {
      tandem: tandem.createTandem('mysteryMassGroup'),
      phetioType: PhetioGroup.PhetioGroupIO(ReferenceIO(IOType.ObjectIO))
    });

    // TODO: Add person group here too, see https://github.com/phetsims/balancing-act/issues/99
  }

  /**
   * @public
   */
  reset() {
    this.massList.clear();
    super.reset();
  }

  /**
   * @param {Mass} mass
   * @public
   */
  addMass(mass) {
    BalanceModel.prototype.addMass.call(this, mass);
    mass.userControlledProperty.lazyLink(isUserControlled => {
      if (!isUserControlled) {
        // The user has dropped this mass.
        if (!this.plank.addMassToSurface(mass)) {
          // The attempt to add mass to surface of plank failed, probably because the area below the mass is full, or
          // because the mass wasn't over the plank.
          this.removeMassAnimated(mass);
        }
      }
    });
  }

  /**
   * @param {Mass} mass
   * @public
   */
  removeMassAnimated(mass) {
    const self = this;

    // Register a listener for the completion of the removal animation sequence.
    function removeMass(isAnimating, wasAnimating) {
      if (wasAnimating && !isAnimating) {
        // Animation sequence has completed.
        mass.animatingProperty.unlink(removeMass);
        BalanceModel.prototype.removeMass.call(self, mass);
      }
    }
    mass.animatingProperty.link(removeMass);

    // Kick off the animation back to the toolbox.
    mass.initiateAnimation();
  }
}
balancingAct.register('BalanceLabModel', BalanceLabModel);
export default BalanceLabModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiUGhldGlvR3JvdXAiLCJJT1R5cGUiLCJSZWZlcmVuY2VJTyIsImJhbGFuY2luZ0FjdCIsIkJhbGFuY2VNb2RlbCIsIkJyaWNrU3RhY2siLCJNeXN0ZXJ5TWFzcyIsIkJhbGFuY2VMYWJNb2RlbCIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiYnJpY2tTdGFja0dyb3VwIiwibnVtYmVyT2ZCcmlja3MiLCJwb3NpdGlvbiIsImJyaWNrU3RhY2siLCJwaGV0aW9EeW5hbWljRWxlbWVudCIsInVzZXJDb250cm9sbGVkUHJvcGVydHkiLCJzZXQiLCJhbmltYXRpb25EZXN0aW5hdGlvbiIsIlpFUk8iLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9UeXBlIiwiUGhldGlvR3JvdXBJTyIsIk9iamVjdElPIiwibXlzdGVyeU1hc3NHcm91cCIsIm15c3RlcnlNYXNzSWQiLCJteXN0ZXJ5TWFzc01vZGVsRWxlbWVudCIsInJlc2V0IiwibWFzc0xpc3QiLCJjbGVhciIsImFkZE1hc3MiLCJtYXNzIiwicHJvdG90eXBlIiwiY2FsbCIsImxhenlMaW5rIiwiaXNVc2VyQ29udHJvbGxlZCIsInBsYW5rIiwiYWRkTWFzc1RvU3VyZmFjZSIsInJlbW92ZU1hc3NBbmltYXRlZCIsInNlbGYiLCJyZW1vdmVNYXNzIiwiaXNBbmltYXRpbmciLCJ3YXNBbmltYXRpbmciLCJhbmltYXRpbmdQcm9wZXJ0eSIsInVubGluayIsImxpbmsiLCJpbml0aWF0ZUFuaW1hdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmFsYW5jZUxhYk1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFByaW1hcnkgbW9kZWwgY2xhc3MgZm9yIHRoZSAnYmFsYW5jZSBsYWInIHRhYiBpbiB0aGUgYmFsYW5jaW5nIGFjdCBzaW11bGF0aW9uLiBUaGlzIG1vZGVsIGRlcGljdHMgYSBwbGFuayBvbiBhXHJcbiAqIGZ1bGNydW0gd2l0aCBhIGNvbGxlY3Rpb24gb2YgbWFzc2VzIHRoYXQgdGhlIHVzZXIgY2FuIHB1dCBvbiBhbmQgcmVtb3ZlIGZyb20gdGhlIHBsYW5rLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgUGhldGlvR3JvdXAgZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb0dyb3VwLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUlPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9SZWZlcmVuY2VJTy5qcyc7XHJcbmltcG9ydCBiYWxhbmNpbmdBY3QgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQWN0LmpzJztcclxuaW1wb3J0IEJhbGFuY2VNb2RlbCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQmFsYW5jZU1vZGVsLmpzJztcclxuaW1wb3J0IEJyaWNrU3RhY2sgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL21hc3Nlcy9Ccmlja1N0YWNrLmpzJztcclxuaW1wb3J0IE15c3RlcnlNYXNzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9tYXNzZXMvTXlzdGVyeU1hc3MuanMnO1xyXG5cclxuY2xhc3MgQmFsYW5jZUxhYk1vZGVsIGV4dGVuZHMgQmFsYW5jZU1vZGVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcbiAgICBzdXBlciggdGFuZGVtICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UGhldGlvR3JvdXAuPEJyaWNrU3RhY2s+fVxyXG4gICAgdGhpcy5icmlja1N0YWNrR3JvdXAgPSBuZXcgUGhldGlvR3JvdXAoICggdGFuZGVtLCBudW1iZXJPZkJyaWNrcywgcG9zaXRpb24gKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYnJpY2tTdGFjayA9IG5ldyBCcmlja1N0YWNrKCBudW1iZXJPZkJyaWNrcywgcG9zaXRpb24sIHtcclxuICAgICAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICAgICAgcGhldGlvRHluYW1pY0VsZW1lbnQ6IHRydWVcclxuICAgICAgICB9ICk7XHJcbiAgICAgICAgYnJpY2tTdGFjay51c2VyQ29udHJvbGxlZFByb3BlcnR5LnNldCggdHJ1ZSApO1xyXG4gICAgICAgIGJyaWNrU3RhY2suYW5pbWF0aW9uRGVzdGluYXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICByZXR1cm4gYnJpY2tTdGFjaztcclxuICAgICAgfSxcclxuICAgICAgWyAxLCBWZWN0b3IyLlpFUk8gXSwge1xyXG4gICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2JyaWNrU3RhY2tHcm91cCcgKSxcclxuICAgICAgICBwaGV0aW9UeXBlOiBQaGV0aW9Hcm91cC5QaGV0aW9Hcm91cElPKCBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPICkgKVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UGhldGlvR3JvdXAuPE15c3RlcnlNYXNzPn1cclxuICAgIHRoaXMubXlzdGVyeU1hc3NHcm91cCA9IG5ldyBQaGV0aW9Hcm91cCggKCB0YW5kZW0sIHBvc2l0aW9uLCBteXN0ZXJ5TWFzc0lkICkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG15c3RlcnlNYXNzTW9kZWxFbGVtZW50ID0gbmV3IE15c3RlcnlNYXNzKCBwb3NpdGlvbiwgbXlzdGVyeU1hc3NJZCwge1xyXG4gICAgICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgICAgICBwaGV0aW9EeW5hbWljRWxlbWVudDogdHJ1ZVxyXG4gICAgICAgIH0gKTtcclxuICAgICAgICBteXN0ZXJ5TWFzc01vZGVsRWxlbWVudC5hbmltYXRpb25EZXN0aW5hdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgICAgIG15c3RlcnlNYXNzTW9kZWxFbGVtZW50LnVzZXJDb250cm9sbGVkUHJvcGVydHkuc2V0KCB0cnVlICk7XHJcbiAgICAgICAgcmV0dXJuIG15c3RlcnlNYXNzTW9kZWxFbGVtZW50O1xyXG4gICAgICB9LFxyXG4gICAgICBbIFZlY3RvcjIuWkVSTywgMCBdLCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbXlzdGVyeU1hc3NHcm91cCcgKSxcclxuICAgICAgICBwaGV0aW9UeXBlOiBQaGV0aW9Hcm91cC5QaGV0aW9Hcm91cElPKCBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPICkgKVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gVE9ETzogQWRkIHBlcnNvbiBncm91cCBoZXJlIHRvbywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9iYWxhbmNpbmctYWN0L2lzc3Vlcy85OVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5tYXNzTGlzdC5jbGVhcigpO1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TWFzc30gbWFzc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBhZGRNYXNzKCBtYXNzICkge1xyXG4gICAgQmFsYW5jZU1vZGVsLnByb3RvdHlwZS5hZGRNYXNzLmNhbGwoIHRoaXMsIG1hc3MgKTtcclxuICAgIG1hc3MudXNlckNvbnRyb2xsZWRQcm9wZXJ0eS5sYXp5TGluayggaXNVc2VyQ29udHJvbGxlZCA9PiB7XHJcbiAgICAgIGlmICggIWlzVXNlckNvbnRyb2xsZWQgKSB7XHJcbiAgICAgICAgLy8gVGhlIHVzZXIgaGFzIGRyb3BwZWQgdGhpcyBtYXNzLlxyXG4gICAgICAgIGlmICggIXRoaXMucGxhbmsuYWRkTWFzc1RvU3VyZmFjZSggbWFzcyApICkge1xyXG4gICAgICAgICAgLy8gVGhlIGF0dGVtcHQgdG8gYWRkIG1hc3MgdG8gc3VyZmFjZSBvZiBwbGFuayBmYWlsZWQsIHByb2JhYmx5IGJlY2F1c2UgdGhlIGFyZWEgYmVsb3cgdGhlIG1hc3MgaXMgZnVsbCwgb3JcclxuICAgICAgICAgIC8vIGJlY2F1c2UgdGhlIG1hc3Mgd2Fzbid0IG92ZXIgdGhlIHBsYW5rLlxyXG4gICAgICAgICAgdGhpcy5yZW1vdmVNYXNzQW5pbWF0ZWQoIG1hc3MgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TWFzc30gbWFzc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICByZW1vdmVNYXNzQW5pbWF0ZWQoIG1hc3MgKSB7XHJcblxyXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgLy8gUmVnaXN0ZXIgYSBsaXN0ZW5lciBmb3IgdGhlIGNvbXBsZXRpb24gb2YgdGhlIHJlbW92YWwgYW5pbWF0aW9uIHNlcXVlbmNlLlxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTWFzcyggaXNBbmltYXRpbmcsIHdhc0FuaW1hdGluZyApIHtcclxuICAgICAgaWYgKCB3YXNBbmltYXRpbmcgJiYgIWlzQW5pbWF0aW5nICkge1xyXG4gICAgICAgIC8vIEFuaW1hdGlvbiBzZXF1ZW5jZSBoYXMgY29tcGxldGVkLlxyXG4gICAgICAgIG1hc3MuYW5pbWF0aW5nUHJvcGVydHkudW5saW5rKCByZW1vdmVNYXNzICk7XHJcbiAgICAgICAgQmFsYW5jZU1vZGVsLnByb3RvdHlwZS5yZW1vdmVNYXNzLmNhbGwoIHNlbGYsIG1hc3MgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1hc3MuYW5pbWF0aW5nUHJvcGVydHkubGluayggcmVtb3ZlTWFzcyApO1xyXG5cclxuICAgIC8vIEtpY2sgb2ZmIHRoZSBhbmltYXRpb24gYmFjayB0byB0aGUgdG9vbGJveC5cclxuICAgIG1hc3MuaW5pdGlhdGVBbmltYXRpb24oKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0FjdC5yZWdpc3RlciggJ0JhbGFuY2VMYWJNb2RlbCcsIEJhbGFuY2VMYWJNb2RlbCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmFsYW5jZUxhYk1vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsV0FBVyxNQUFNLHNDQUFzQztBQUM5RCxPQUFPQyxNQUFNLE1BQU0sdUNBQXVDO0FBQzFELE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFDcEUsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxZQUFZLE1BQU0sb0NBQW9DO0FBQzdELE9BQU9DLFVBQVUsTUFBTSx5Q0FBeUM7QUFDaEUsT0FBT0MsV0FBVyxNQUFNLDBDQUEwQztBQUVsRSxNQUFNQyxlQUFlLFNBQVNILFlBQVksQ0FBQztFQUV6QztBQUNGO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBQ3BCLEtBQUssQ0FBRUEsTUFBTyxDQUFDOztJQUVmO0lBQ0EsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSVYsV0FBVyxDQUFFLENBQUVTLE1BQU0sRUFBRUUsY0FBYyxFQUFFQyxRQUFRLEtBQU07TUFDNUUsTUFBTUMsVUFBVSxHQUFHLElBQUlSLFVBQVUsQ0FBRU0sY0FBYyxFQUFFQyxRQUFRLEVBQUU7UUFDM0RILE1BQU0sRUFBRUEsTUFBTTtRQUNkSyxvQkFBb0IsRUFBRTtNQUN4QixDQUFFLENBQUM7TUFDSEQsVUFBVSxDQUFDRSxzQkFBc0IsQ0FBQ0MsR0FBRyxDQUFFLElBQUssQ0FBQztNQUM3Q0gsVUFBVSxDQUFDSSxvQkFBb0IsR0FBR0wsUUFBUTtNQUMxQyxPQUFPQyxVQUFVO0lBQ25CLENBQUMsRUFDRCxDQUFFLENB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