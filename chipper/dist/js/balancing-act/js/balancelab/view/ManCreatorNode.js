// Copyright 2013-2021, University of Colorado Boulder

/**
 * This class represents an adult male human in a toolbox.  When the user
 * clicks on this node, the corresponding model element is added to the model at
 * the user's mouse position.
 *
 * @author John Blanco
 */

import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import balancingAct from '../../balancingAct.js';
import Man from '../../common/model/masses/Man.js';
import ImageMassNode from '../../common/view/ImageMassNode.js';
import ImageMassCreatorNode from './ImageMassCreatorNode.js';

// Model-view transform for scaling the node used in the toolbox.  This may scale the node differently than what is used
// in the model so that items in the toolbox can be sized differently (generally smaller).
const SCALING_MVT = ModelViewTransform2.createOffsetScaleMapping(Vector2.ZERO, 80);
class ManCreatorNode extends ImageMassCreatorNode {
  /**
   * @param {BalanceLabModel} model
   * @param {BasicBalanceScreenView} screenView
   */
  constructor(model, screenView) {
    super(model, screenView, new Man(), true);
    this.setSelectionNode(new ImageMassNode(this.prototypeImageMass, SCALING_MVT, false, new Property(false), false, model.columnStateProperty));
    this.positioningOffset = new Vector2(0, -screenView.modelViewTransform.modelToViewDeltaY(this.prototypeImageMass.heightProperty.get() / 2));
  }
}
balancingAct.register('ManCreatorNode', ManCreatorNode);
export default ManCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiYmFsYW5jaW5nQWN0IiwiTWFuIiwiSW1hZ2VNYXNzTm9kZSIsIkltYWdlTWFzc0NyZWF0b3JOb2RlIiwiU0NBTElOR19NVlQiLCJjcmVhdGVPZmZzZXRTY2FsZU1hcHBpbmciLCJaRVJPIiwiTWFuQ3JlYXRvck5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwic2NyZWVuVmlldyIsInNldFNlbGVjdGlvbk5vZGUiLCJwcm90b3R5cGVJbWFnZU1hc3MiLCJjb2x1bW5TdGF0ZVByb3BlcnR5IiwicG9zaXRpb25pbmdPZmZzZXQiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJtb2RlbFRvVmlld0RlbHRhWSIsImhlaWdodFByb3BlcnR5IiwiZ2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYW5DcmVhdG9yTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYW4gYWR1bHQgbWFsZSBodW1hbiBpbiBhIHRvb2xib3guICBXaGVuIHRoZSB1c2VyXHJcbiAqIGNsaWNrcyBvbiB0aGlzIG5vZGUsIHRoZSBjb3JyZXNwb25kaW5nIG1vZGVsIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsIGF0XHJcbiAqIHRoZSB1c2VyJ3MgbW91c2UgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcbmltcG9ydCBNYW4gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL21hc3Nlcy9NYW4uanMnO1xyXG5pbXBvcnQgSW1hZ2VNYXNzTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9JbWFnZU1hc3NOb2RlLmpzJztcclxuaW1wb3J0IEltYWdlTWFzc0NyZWF0b3JOb2RlIGZyb20gJy4vSW1hZ2VNYXNzQ3JlYXRvck5vZGUuanMnO1xyXG5cclxuLy8gTW9kZWwtdmlldyB0cmFuc2Zvcm0gZm9yIHNjYWxpbmcgdGhlIG5vZGUgdXNlZCBpbiB0aGUgdG9vbGJveC4gIFRoaXMgbWF5IHNjYWxlIHRoZSBub2RlIGRpZmZlcmVudGx5IHRoYW4gd2hhdCBpcyB1c2VkXHJcbi8vIGluIHRoZSBtb2RlbCBzbyB0aGF0IGl0ZW1zIGluIHRoZSB0b29sYm94IGNhbiBiZSBzaXplZCBkaWZmZXJlbnRseSAoZ2VuZXJhbGx5IHNtYWxsZXIpLlxyXG5jb25zdCBTQ0FMSU5HX01WVCA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlT2Zmc2V0U2NhbGVNYXBwaW5nKCBWZWN0b3IyLlpFUk8sIDgwICk7XHJcblxyXG5jbGFzcyBNYW5DcmVhdG9yTm9kZSBleHRlbmRzIEltYWdlTWFzc0NyZWF0b3JOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCYWxhbmNlTGFiTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtCYXNpY0JhbGFuY2VTY3JlZW5WaWV3fSBzY3JlZW5WaWV3XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBzY3JlZW5WaWV3ICkge1xyXG4gICAgc3VwZXIoIG1vZGVsLCBzY3JlZW5WaWV3LCBuZXcgTWFuKCksIHRydWUgKTtcclxuICAgIHRoaXMuc2V0U2VsZWN0aW9uTm9kZShcclxuICAgICAgbmV3IEltYWdlTWFzc05vZGUoXHJcbiAgICAgICAgdGhpcy5wcm90b3R5cGVJbWFnZU1hc3MsXHJcbiAgICAgICAgU0NBTElOR19NVlQsXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgbmV3IFByb3BlcnR5KCBmYWxzZSApLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIG1vZGVsLmNvbHVtblN0YXRlUHJvcGVydHlcclxuICAgICAgKVxyXG4gICAgKTtcclxuICAgIHRoaXMucG9zaXRpb25pbmdPZmZzZXQgPSBuZXcgVmVjdG9yMihcclxuICAgICAgMCxcclxuICAgICAgLXNjcmVlblZpZXcubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCB0aGlzLnByb3RvdHlwZUltYWdlTWFzcy5oZWlnaHRQcm9wZXJ0eS5nZXQoKSAvIDIgKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0FjdC5yZWdpc3RlciggJ01hbkNyZWF0b3JOb2RlJywgTWFuQ3JlYXRvck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1hbkNyZWF0b3JOb2RlO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxtQkFBbUIsTUFBTSx1REFBdUQ7QUFDdkYsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxHQUFHLE1BQU0sa0NBQWtDO0FBQ2xELE9BQU9DLGFBQWEsTUFBTSxvQ0FBb0M7QUFDOUQsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCOztBQUU1RDtBQUNBO0FBQ0EsTUFBTUMsV0FBVyxHQUFHTCxtQkFBbUIsQ0FBQ00sd0JBQXdCLENBQUVQLE9BQU8sQ0FBQ1EsSUFBSSxFQUFFLEVBQUcsQ0FBQztBQUVwRixNQUFNQyxjQUFjLFNBQVNKLG9CQUFvQixDQUFDO0VBRWhEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFHO0lBQy9CLEtBQUssQ0FBRUQsS0FBSyxFQUFFQyxVQUFVLEVBQUUsSUFBSVQsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFLLENBQUM7SUFDM0MsSUFBSSxDQUFDVSxnQkFBZ0IsQ0FDbkIsSUFBSVQsYUFBYSxDQUNmLElBQUksQ0FBQ1Usa0JBQWtCLEVBQ3ZCUixXQUFXLEVBQ1gsS0FBSyxFQUNMLElBQUlQLFFBQVEsQ0FBRSxLQUFNLENBQUMsRUFDckIsS0FBSyxFQUNMWSxLQUFLLENBQUNJLG1CQUNSLENBQ0YsQ0FBQztJQUNELElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsSUFBSWhCLE9BQU8sQ0FDbEMsQ0FBQyxFQUNELENBQUNZLFVBQVUsQ0FBQ0ssa0JBQWtCLENBQUNDLGlCQUFpQixDQUFFLElBQUksQ0FBQ0osa0JBQWtCLENBQUNLLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFFLENBQ3JHLENBQUM7RUFDSDtBQUNGO0FBRUFsQixZQUFZLENBQUNtQixRQUFRLENBQUUsZ0JBQWdCLEVBQUVaLGNBQWUsQ0FBQztBQUV6RCxlQUFlQSxjQUFjIn0=