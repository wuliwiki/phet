// Copyright 2013-2021, University of Colorado Boulder

/**
 * This class represents an young girl in a toolbox.  When the user clicks on
 * this node, the corresponding model element is added to the model at the
 * user's mouse position.
 *
 * @author John Blanco
 */

import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import balancingAct from '../../balancingAct.js';
import Girl from '../../common/model/masses/Girl.js';
import ImageMassNode from '../../common/view/ImageMassNode.js';
import ImageMassCreatorNode from './ImageMassCreatorNode.js';

// Model-view transform for scaling the node used in the toolbox.  This may scale the node differently than what is used
// in the model so that items in the toolbox can be sized differently (generally smaller).
const SCALING_MVT = ModelViewTransform2.createOffsetScaleMapping(Vector2.ZERO, 80);
class GirlCreatorNode extends ImageMassCreatorNode {
  /**
   * @param {BalanceLabModel} model
   * @param {BasicBalanceScreenView} screenView
   */
  constructor(model, screenView) {
    super(model, screenView, new Girl(), true);
    this.setSelectionNode(new ImageMassNode(this.prototypeImageMass, SCALING_MVT, false, new Property(false), false, model.columnStateProperty));
    this.positioningOffset = new Vector2(0, -screenView.modelViewTransform.modelToViewDeltaY(this.prototypeImageMass.heightProperty.get() / 2));
  }
}
balancingAct.register('GirlCreatorNode', GirlCreatorNode);
export default GirlCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiYmFsYW5jaW5nQWN0IiwiR2lybCIsIkltYWdlTWFzc05vZGUiLCJJbWFnZU1hc3NDcmVhdG9yTm9kZSIsIlNDQUxJTkdfTVZUIiwiY3JlYXRlT2Zmc2V0U2NhbGVNYXBwaW5nIiwiWkVSTyIsIkdpcmxDcmVhdG9yTm9kZSIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJzY3JlZW5WaWV3Iiwic2V0U2VsZWN0aW9uTm9kZSIsInByb3RvdHlwZUltYWdlTWFzcyIsImNvbHVtblN0YXRlUHJvcGVydHkiLCJwb3NpdGlvbmluZ09mZnNldCIsIm1vZGVsVmlld1RyYW5zZm9ybSIsIm1vZGVsVG9WaWV3RGVsdGFZIiwiaGVpZ2h0UHJvcGVydHkiLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdpcmxDcmVhdG9yTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYW4geW91bmcgZ2lybCBpbiBhIHRvb2xib3guICBXaGVuIHRoZSB1c2VyIGNsaWNrcyBvblxyXG4gKiB0aGlzIG5vZGUsIHRoZSBjb3JyZXNwb25kaW5nIG1vZGVsIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsIGF0IHRoZVxyXG4gKiB1c2VyJ3MgbW91c2UgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcbmltcG9ydCBHaXJsIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9tYXNzZXMvR2lybC5qcyc7XHJcbmltcG9ydCBJbWFnZU1hc3NOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0ltYWdlTWFzc05vZGUuanMnO1xyXG5pbXBvcnQgSW1hZ2VNYXNzQ3JlYXRvck5vZGUgZnJvbSAnLi9JbWFnZU1hc3NDcmVhdG9yTm9kZS5qcyc7XHJcblxyXG4vLyBNb2RlbC12aWV3IHRyYW5zZm9ybSBmb3Igc2NhbGluZyB0aGUgbm9kZSB1c2VkIGluIHRoZSB0b29sYm94LiAgVGhpcyBtYXkgc2NhbGUgdGhlIG5vZGUgZGlmZmVyZW50bHkgdGhhbiB3aGF0IGlzIHVzZWRcclxuLy8gaW4gdGhlIG1vZGVsIHNvIHRoYXQgaXRlbXMgaW4gdGhlIHRvb2xib3ggY2FuIGJlIHNpemVkIGRpZmZlcmVudGx5IChnZW5lcmFsbHkgc21hbGxlcikuXHJcbmNvbnN0IFNDQUxJTkdfTVZUID0gTW9kZWxWaWV3VHJhbnNmb3JtMi5jcmVhdGVPZmZzZXRTY2FsZU1hcHBpbmcoIFZlY3RvcjIuWkVSTywgODAgKTtcclxuXHJcbmNsYXNzIEdpcmxDcmVhdG9yTm9kZSBleHRlbmRzIEltYWdlTWFzc0NyZWF0b3JOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCYWxhbmNlTGFiTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtCYXNpY0JhbGFuY2VTY3JlZW5WaWV3fSBzY3JlZW5WaWV3XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBzY3JlZW5WaWV3ICkge1xyXG4gICAgc3VwZXIoIG1vZGVsLCBzY3JlZW5WaWV3LCBuZXcgR2lybCgpLCB0cnVlICk7XHJcbiAgICB0aGlzLnNldFNlbGVjdGlvbk5vZGUoXHJcbiAgICAgIG5ldyBJbWFnZU1hc3NOb2RlKFxyXG4gICAgICAgIHRoaXMucHJvdG90eXBlSW1hZ2VNYXNzLFxyXG4gICAgICAgIFNDQUxJTkdfTVZULFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIG5ldyBQcm9wZXJ0eSggZmFsc2UgKSxcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICBtb2RlbC5jb2x1bW5TdGF0ZVByb3BlcnR5XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICB0aGlzLnBvc2l0aW9uaW5nT2Zmc2V0ID0gbmV3IFZlY3RvcjIoXHJcbiAgICAgIDAsXHJcbiAgICAgIC1zY3JlZW5WaWV3Lm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggdGhpcy5wcm90b3R5cGVJbWFnZU1hc3MuaGVpZ2h0UHJvcGVydHkuZ2V0KCkgLyAyIClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5iYWxhbmNpbmdBY3QucmVnaXN0ZXIoICdHaXJsQ3JlYXRvck5vZGUnLCBHaXJsQ3JlYXRvck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdpcmxDcmVhdG9yTm9kZTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsbUJBQW1CLE1BQU0sdURBQXVEO0FBQ3ZGLE9BQU9DLFlBQVksTUFBTSx1QkFBdUI7QUFDaEQsT0FBT0MsSUFBSSxNQUFNLG1DQUFtQztBQUNwRCxPQUFPQyxhQUFhLE1BQU0sb0NBQW9DO0FBQzlELE9BQU9DLG9CQUFvQixNQUFNLDJCQUEyQjs7QUFFNUQ7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBR0wsbUJBQW1CLENBQUNNLHdCQUF3QixDQUFFUCxPQUFPLENBQUNRLElBQUksRUFBRSxFQUFHLENBQUM7QUFFcEYsTUFBTUMsZUFBZSxTQUFTSixvQkFBb0IsQ0FBQztFQUVqRDtBQUNGO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLFVBQVUsRUFBRztJQUMvQixLQUFLLENBQUVELEtBQUssRUFBRUMsVUFBVSxFQUFFLElBQUlULElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSyxDQUFDO0lBQzVDLElBQUksQ0FBQ1UsZ0JBQWdCLENBQ25CLElBQUlULGFBQWEsQ0FDZixJQUFJLENBQUNVLGtCQUFrQixFQUN2QlIsV0FBVyxFQUNYLEtBQUssRUFDTCxJQUFJUCxRQUFRLENBQUUsS0FBTSxDQUFDLEVBQ3JCLEtBQUssRUFDTFksS0FBSyxDQUFDSSxtQkFDUixDQUNGLENBQUM7SUFDRCxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUloQixPQUFPLENBQ2xDLENBQUMsRUFDRCxDQUFDWSxVQUFVLENBQUNLLGtCQUFrQixDQUFDQyxpQkFBaUIsQ0FBRSxJQUFJLENBQUNKLGtCQUFrQixDQUFDSyxjQUFjLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBRSxDQUNyRyxDQUFDO0VBQ0g7QUFDRjtBQUVBbEIsWUFBWSxDQUFDbUIsUUFBUSxDQUFFLGlCQUFpQixFQUFFWixlQUFnQixDQUFDO0FBRTNELGVBQWVBLGVBQWUifQ==