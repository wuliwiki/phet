// Copyright 2013-2021, University of Colorado Boulder

/**
 * A node that can be used to add an image-based mass element to the model by
 * clicking on it.
 *
 * @author John Blanco
 */

// module
import balancingAct from '../../balancingAct.js';
import BAQueryParameters from '../../common/BAQueryParameters.js';
import ColumnState from '../../common/model/ColumnState.js';
import MassCreatorNode from './MassCreatorNode.js';
class ImageMassCreatorNode extends MassCreatorNode {
  /**
   * @param {BalanceLabModel} model
   * @param {BasicBalanceScreenView} screenView
   * @param {ImageMass} prototypeImageMass
   * @param {boolean} showMassLabel
   * @param {Object} [options]
   */
  constructor(model, screenView, prototypeImageMass, showMassLabel, options) {
    super(screenView, prototypeImageMass.massValue, showMassLabel, options);
    this.prototypeImageMass = prototypeImageMass;
    this.model = model;

    // TODO: move this into ModelElementCreatorNode, see https://github.com/phetsims/balancing-act/issues/96
    BAQueryParameters.stanford && model.columnStateProperty.link(columnState => {
      this.cursor = columnState === ColumnState.DOUBLE_COLUMNS ? 'pointer' : 'default';
      this.pickable = columnState === ColumnState.DOUBLE_COLUMNS;
    });
  }

  /**
   * @param position
   * @returns {*}
   * @public
   */
  addElementToModel(position) {
    const imageMassModelElement = this.createImageMassInstance();
    imageMassModelElement.positionProperty.set(position.copy());
    imageMassModelElement.animationDestination = imageMassModelElement.positionProperty.get();
    imageMassModelElement.userControlledProperty.set(true);
    this.model.addMass(imageMassModelElement);
    return imageMassModelElement;
  }

  /**
   * Create an instance of the image mass that corresponds to this creator node.  Overridden by subclasses to create the
   * appropriate type.
   * @protected
   */
  createImageMassInstance() {
    return this.prototypeImageMass.createCopy();
  }
}
balancingAct.register('ImageMassCreatorNode', ImageMassCreatorNode);
export default ImageMassCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYWxhbmNpbmdBY3QiLCJCQVF1ZXJ5UGFyYW1ldGVycyIsIkNvbHVtblN0YXRlIiwiTWFzc0NyZWF0b3JOb2RlIiwiSW1hZ2VNYXNzQ3JlYXRvck5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwic2NyZWVuVmlldyIsInByb3RvdHlwZUltYWdlTWFzcyIsInNob3dNYXNzTGFiZWwiLCJvcHRpb25zIiwibWFzc1ZhbHVlIiwic3RhbmZvcmQiLCJjb2x1bW5TdGF0ZVByb3BlcnR5IiwibGluayIsImNvbHVtblN0YXRlIiwiY3Vyc29yIiwiRE9VQkxFX0NPTFVNTlMiLCJwaWNrYWJsZSIsImFkZEVsZW1lbnRUb01vZGVsIiwicG9zaXRpb24iLCJpbWFnZU1hc3NNb2RlbEVsZW1lbnQiLCJjcmVhdGVJbWFnZU1hc3NJbnN0YW5jZSIsInBvc2l0aW9uUHJvcGVydHkiLCJzZXQiLCJjb3B5IiwiYW5pbWF0aW9uRGVzdGluYXRpb24iLCJnZXQiLCJ1c2VyQ29udHJvbGxlZFByb3BlcnR5IiwiYWRkTWFzcyIsImNyZWF0ZUNvcHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkltYWdlTWFzc0NyZWF0b3JOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgbm9kZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGFkZCBhbiBpbWFnZS1iYXNlZCBtYXNzIGVsZW1lbnQgdG8gdGhlIG1vZGVsIGJ5XHJcbiAqIGNsaWNraW5nIG9uIGl0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuXHJcbi8vIG1vZHVsZVxyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcbmltcG9ydCBCQVF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vQkFRdWVyeVBhcmFtZXRlcnMuanMnO1xyXG5pbXBvcnQgQ29sdW1uU3RhdGUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0NvbHVtblN0YXRlLmpzJztcclxuaW1wb3J0IE1hc3NDcmVhdG9yTm9kZSBmcm9tICcuL01hc3NDcmVhdG9yTm9kZS5qcyc7XHJcblxyXG5jbGFzcyBJbWFnZU1hc3NDcmVhdG9yTm9kZSBleHRlbmRzIE1hc3NDcmVhdG9yTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QmFsYW5jZUxhYk1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7QmFzaWNCYWxhbmNlU2NyZWVuVmlld30gc2NyZWVuVmlld1xyXG4gICAqIEBwYXJhbSB7SW1hZ2VNYXNzfSBwcm90b3R5cGVJbWFnZU1hc3NcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3dNYXNzTGFiZWxcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBzY3JlZW5WaWV3LCBwcm90b3R5cGVJbWFnZU1hc3MsIHNob3dNYXNzTGFiZWwsIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggc2NyZWVuVmlldywgcHJvdG90eXBlSW1hZ2VNYXNzLm1hc3NWYWx1ZSwgc2hvd01hc3NMYWJlbCwgb3B0aW9ucyApO1xyXG4gICAgdGhpcy5wcm90b3R5cGVJbWFnZU1hc3MgPSBwcm90b3R5cGVJbWFnZU1hc3M7XHJcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcblxyXG4gICAgLy8gVE9ETzogbW92ZSB0aGlzIGludG8gTW9kZWxFbGVtZW50Q3JlYXRvck5vZGUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvYmFsYW5jaW5nLWFjdC9pc3N1ZXMvOTZcclxuICAgIEJBUXVlcnlQYXJhbWV0ZXJzLnN0YW5mb3JkICYmIG1vZGVsLmNvbHVtblN0YXRlUHJvcGVydHkubGluayggY29sdW1uU3RhdGUgPT4ge1xyXG4gICAgICB0aGlzLmN1cnNvciA9IGNvbHVtblN0YXRlID09PSBDb2x1bW5TdGF0ZS5ET1VCTEVfQ09MVU1OUyA/ICdwb2ludGVyJyA6ICdkZWZhdWx0JztcclxuICAgICAgdGhpcy5waWNrYWJsZSA9IGNvbHVtblN0YXRlID09PSBDb2x1bW5TdGF0ZS5ET1VCTEVfQ09MVU1OUztcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwb3NpdGlvblxyXG4gICAqIEByZXR1cm5zIHsqfVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBhZGRFbGVtZW50VG9Nb2RlbCggcG9zaXRpb24gKSB7XHJcbiAgICBjb25zdCBpbWFnZU1hc3NNb2RlbEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUltYWdlTWFzc0luc3RhbmNlKCk7XHJcbiAgICBpbWFnZU1hc3NNb2RlbEVsZW1lbnQucG9zaXRpb25Qcm9wZXJ0eS5zZXQoIHBvc2l0aW9uLmNvcHkoKSApO1xyXG4gICAgaW1hZ2VNYXNzTW9kZWxFbGVtZW50LmFuaW1hdGlvbkRlc3RpbmF0aW9uID0gaW1hZ2VNYXNzTW9kZWxFbGVtZW50LnBvc2l0aW9uUHJvcGVydHkuZ2V0KCk7XHJcbiAgICBpbWFnZU1hc3NNb2RlbEVsZW1lbnQudXNlckNvbnRyb2xsZWRQcm9wZXJ0eS5zZXQoIHRydWUgKTtcclxuICAgIHRoaXMubW9kZWwuYWRkTWFzcyggaW1hZ2VNYXNzTW9kZWxFbGVtZW50ICk7XHJcbiAgICByZXR1cm4gaW1hZ2VNYXNzTW9kZWxFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBpbWFnZSBtYXNzIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhpcyBjcmVhdG9yIG5vZGUuICBPdmVycmlkZGVuIGJ5IHN1YmNsYXNzZXMgdG8gY3JlYXRlIHRoZVxyXG4gICAqIGFwcHJvcHJpYXRlIHR5cGUuXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqL1xyXG4gIGNyZWF0ZUltYWdlTWFzc0luc3RhbmNlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvdG90eXBlSW1hZ2VNYXNzLmNyZWF0ZUNvcHkoKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0FjdC5yZWdpc3RlciggJ0ltYWdlTWFzc0NyZWF0b3JOb2RlJywgSW1hZ2VNYXNzQ3JlYXRvck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEltYWdlTWFzc0NyZWF0b3JOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0EsT0FBT0EsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFDakUsT0FBT0MsV0FBVyxNQUFNLG1DQUFtQztBQUMzRCxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBRWxELE1BQU1DLG9CQUFvQixTQUFTRCxlQUFlLENBQUM7RUFFakQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLGtCQUFrQixFQUFFQyxhQUFhLEVBQUVDLE9BQU8sRUFBRztJQUMzRSxLQUFLLENBQUVILFVBQVUsRUFBRUMsa0JBQWtCLENBQUNHLFNBQVMsRUFBRUYsYUFBYSxFQUFFQyxPQUFRLENBQUM7SUFDekUsSUFBSSxDQUFDRixrQkFBa0IsR0FBR0Esa0JBQWtCO0lBQzVDLElBQUksQ0FBQ0YsS0FBSyxHQUFHQSxLQUFLOztJQUVsQjtJQUNBTCxpQkFBaUIsQ0FBQ1csUUFBUSxJQUFJTixLQUFLLENBQUNPLG1CQUFtQixDQUFDQyxJQUFJLENBQUVDLFdBQVcsSUFBSTtNQUMzRSxJQUFJLENBQUNDLE1BQU0sR0FBR0QsV0FBVyxLQUFLYixXQUFXLENBQUNlLGNBQWMsR0FBRyxTQUFTLEdBQUcsU0FBUztNQUNoRixJQUFJLENBQUNDLFFBQVEsR0FBR0gsV0FBVyxLQUFLYixXQUFXLENBQUNlLGNBQWM7SUFDNUQsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxpQkFBaUJBLENBQUVDLFFBQVEsRUFBRztJQUM1QixNQUFNQyxxQkFBcUIsR0FBRyxJQUFJLENBQUNDLHVCQUF1QixDQUFDLENBQUM7SUFDNURELHFCQUFxQixDQUFDRSxnQkFBZ0IsQ0FBQ0MsR0FBRyxDQUFFSixRQUFRLENBQUNLLElBQUksQ0FBQyxDQUFFLENBQUM7SUFDN0RKLHFCQUFxQixDQUFDSyxvQkFBb0IsR0FBR0wscUJBQXFCLENBQUNFLGdCQUFnQixDQUFDSSxHQUFHLENBQUMsQ0FBQztJQUN6Rk4scUJBQXFCLENBQUNPLHNCQUFzQixDQUFDSixHQUFHLENBQUUsSUFBSyxDQUFDO0lBQ3hELElBQUksQ0FBQ2xCLEtBQUssQ0FBQ3VCLE9BQU8sQ0FBRVIscUJBQXNCLENBQUM7SUFDM0MsT0FBT0EscUJBQXFCO0VBQzlCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsdUJBQXVCQSxDQUFBLEVBQUc7SUFDeEIsT0FBTyxJQUFJLENBQUNkLGtCQUFrQixDQUFDc0IsVUFBVSxDQUFDLENBQUM7RUFDN0M7QUFDRjtBQUVBOUIsWUFBWSxDQUFDK0IsUUFBUSxDQUFFLHNCQUFzQixFQUFFM0Isb0JBQXFCLENBQUM7QUFFckUsZUFBZUEsb0JBQW9CIn0=