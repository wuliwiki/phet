// Copyright 2013-2022, University of Colorado Boulder

/**
 * This object type represents a stack of bricks in a toolbox.  When the user clicks on this node, the corresponding
 * model element is added to the model at the user's mouse position.
 *
 * @author John Blanco
 */

import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import balancingAct from '../../balancingAct.js';
import BAQueryParameters from '../../common/BAQueryParameters.js';
import ColumnState from '../../common/model/ColumnState.js';
import BrickStack from '../../common/model/masses/BrickStack.js';
import BrickStackNode from '../../common/view/BrickStackNode.js';
import MassCreatorNode from './MassCreatorNode.js';

// Model-view transform for scaling the node used in the toolbox.  This
// may scale the node differently than what is used in the model so that
// items in the toolbox can be sized differently (generally smaller).
const SCALING_MVT = ModelViewTransform2.createOffsetScaleMapping(Vector2.ZERO, 150);
class BrickStackCreatorNode extends MassCreatorNode {
  /**
   * @param {number} numBricks
   * @param {BalanceLabModel} model
   * @param {BasicBalanceScreenView} screenView
   * @param {Object} [options]
   */
  constructor(numBricks, model, screenView, options) {
    super(screenView, numBricks * BrickStack.BRICK_MASS, true, options);
    this.numBricks = numBricks;
    this.model = model;

    // TODO: move this into ModelElementCreatorNode, see https://github.com/phetsims/balancing-act/issues/96
    BAQueryParameters.stanford && model.columnStateProperty.link(columnState => {
      this.cursor = columnState === ColumnState.DOUBLE_COLUMNS ? 'pointer' : 'default';
      this.pickable = columnState === ColumnState.DOUBLE_COLUMNS;
    });
    const selectionNode = new BrickStackNode(new BrickStack(numBricks, Vector2.ZERO, {
      tandem: Tandem.OPT_OUT
    }), SCALING_MVT, false, new Property(false), false, model.columnStateProperty);

    // Make a larger touch area.  The diameter of the circle was determined empirically.
    selectionNode.touchArea = Shape.circle(selectionNode.bounds.width / 2, selectionNode.bounds.height / 2, selectionNode.bounds.width * 0.8);
    this.setSelectionNode(selectionNode);
    this.positioningOffset = new Vector2(0, -screenView.modelViewTransform.modelToViewDeltaY(BrickStack.BRICK_HEIGHT * numBricks / 2));
  }

  /**
   *
   * @param {Vector2} position
   * @returns {Mass}
   * @public
   */
  addElementToModel(position) {
    const mass = this.model.brickStackGroup.createNextElement(this.numBricks, position);
    this.model.addMass(mass);
    return mass;
  }
}
balancingAct.register('BrickStackCreatorNode', BrickStackCreatorNode);
export default BrickStackCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJTaGFwZSIsIk1vZGVsVmlld1RyYW5zZm9ybTIiLCJUYW5kZW0iLCJiYWxhbmNpbmdBY3QiLCJCQVF1ZXJ5UGFyYW1ldGVycyIsIkNvbHVtblN0YXRlIiwiQnJpY2tTdGFjayIsIkJyaWNrU3RhY2tOb2RlIiwiTWFzc0NyZWF0b3JOb2RlIiwiU0NBTElOR19NVlQiLCJjcmVhdGVPZmZzZXRTY2FsZU1hcHBpbmciLCJaRVJPIiwiQnJpY2tTdGFja0NyZWF0b3JOb2RlIiwiY29uc3RydWN0b3IiLCJudW1Ccmlja3MiLCJtb2RlbCIsInNjcmVlblZpZXciLCJvcHRpb25zIiwiQlJJQ0tfTUFTUyIsInN0YW5mb3JkIiwiY29sdW1uU3RhdGVQcm9wZXJ0eSIsImxpbmsiLCJjb2x1bW5TdGF0ZSIsImN1cnNvciIsIkRPVUJMRV9DT0xVTU5TIiwicGlja2FibGUiLCJzZWxlY3Rpb25Ob2RlIiwidGFuZGVtIiwiT1BUX09VVCIsInRvdWNoQXJlYSIsImNpcmNsZSIsImJvdW5kcyIsIndpZHRoIiwiaGVpZ2h0Iiwic2V0U2VsZWN0aW9uTm9kZSIsInBvc2l0aW9uaW5nT2Zmc2V0IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibW9kZWxUb1ZpZXdEZWx0YVkiLCJCUklDS19IRUlHSFQiLCJhZGRFbGVtZW50VG9Nb2RlbCIsInBvc2l0aW9uIiwibWFzcyIsImJyaWNrU3RhY2tHcm91cCIsImNyZWF0ZU5leHRFbGVtZW50IiwiYWRkTWFzcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQnJpY2tTdGFja0NyZWF0b3JOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgb2JqZWN0IHR5cGUgcmVwcmVzZW50cyBhIHN0YWNrIG9mIGJyaWNrcyBpbiBhIHRvb2xib3guICBXaGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGlzIG5vZGUsIHRoZSBjb3JyZXNwb25kaW5nXHJcbiAqIG1vZGVsIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsIGF0IHRoZSB1c2VyJ3MgbW91c2UgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBiYWxhbmNpbmdBY3QgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQWN0LmpzJztcclxuaW1wb3J0IEJBUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL2NvbW1vbi9CQVF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCBDb2x1bW5TdGF0ZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ29sdW1uU3RhdGUuanMnO1xyXG5pbXBvcnQgQnJpY2tTdGFjayBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvbWFzc2VzL0JyaWNrU3RhY2suanMnO1xyXG5pbXBvcnQgQnJpY2tTdGFja05vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQnJpY2tTdGFja05vZGUuanMnO1xyXG5pbXBvcnQgTWFzc0NyZWF0b3JOb2RlIGZyb20gJy4vTWFzc0NyZWF0b3JOb2RlLmpzJztcclxuXHJcbi8vIE1vZGVsLXZpZXcgdHJhbnNmb3JtIGZvciBzY2FsaW5nIHRoZSBub2RlIHVzZWQgaW4gdGhlIHRvb2xib3guICBUaGlzXHJcbi8vIG1heSBzY2FsZSB0aGUgbm9kZSBkaWZmZXJlbnRseSB0aGFuIHdoYXQgaXMgdXNlZCBpbiB0aGUgbW9kZWwgc28gdGhhdFxyXG4vLyBpdGVtcyBpbiB0aGUgdG9vbGJveCBjYW4gYmUgc2l6ZWQgZGlmZmVyZW50bHkgKGdlbmVyYWxseSBzbWFsbGVyKS5cclxuY29uc3QgU0NBTElOR19NVlQgPSBNb2RlbFZpZXdUcmFuc2Zvcm0yLmNyZWF0ZU9mZnNldFNjYWxlTWFwcGluZyggVmVjdG9yMi5aRVJPLCAxNTAgKTtcclxuXHJcbmNsYXNzIEJyaWNrU3RhY2tDcmVhdG9yTm9kZSBleHRlbmRzIE1hc3NDcmVhdG9yTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1Ccmlja3NcclxuICAgKiBAcGFyYW0ge0JhbGFuY2VMYWJNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge0Jhc2ljQmFsYW5jZVNjcmVlblZpZXd9IHNjcmVlblZpZXdcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG51bUJyaWNrcywgbW9kZWwsIHNjcmVlblZpZXcsIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlciggc2NyZWVuVmlldywgbnVtQnJpY2tzICogQnJpY2tTdGFjay5CUklDS19NQVNTLCB0cnVlLCBvcHRpb25zICk7XHJcbiAgICB0aGlzLm51bUJyaWNrcyA9IG51bUJyaWNrcztcclxuICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuXHJcbiAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgaW50byBNb2RlbEVsZW1lbnRDcmVhdG9yTm9kZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9iYWxhbmNpbmctYWN0L2lzc3Vlcy85NlxyXG4gICAgQkFRdWVyeVBhcmFtZXRlcnMuc3RhbmZvcmQgJiYgbW9kZWwuY29sdW1uU3RhdGVQcm9wZXJ0eS5saW5rKCBjb2x1bW5TdGF0ZSA9PiB7XHJcbiAgICAgIHRoaXMuY3Vyc29yID0gY29sdW1uU3RhdGUgPT09IENvbHVtblN0YXRlLkRPVUJMRV9DT0xVTU5TID8gJ3BvaW50ZXInIDogJ2RlZmF1bHQnO1xyXG4gICAgICB0aGlzLnBpY2thYmxlID0gY29sdW1uU3RhdGUgPT09IENvbHVtblN0YXRlLkRPVUJMRV9DT0xVTU5TO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHNlbGVjdGlvbk5vZGUgPSBuZXcgQnJpY2tTdGFja05vZGUoXHJcbiAgICAgIG5ldyBCcmlja1N0YWNrKCBudW1Ccmlja3MsIFZlY3RvcjIuWkVSTywgeyB0YW5kZW06IFRhbmRlbS5PUFRfT1VUIH0gKSxcclxuICAgICAgU0NBTElOR19NVlQsXHJcbiAgICAgIGZhbHNlLFxyXG4gICAgICBuZXcgUHJvcGVydHkoIGZhbHNlICksXHJcbiAgICAgIGZhbHNlLFxyXG4gICAgICBtb2RlbC5jb2x1bW5TdGF0ZVByb3BlcnR5XHJcbiAgICApO1xyXG5cclxuICAgIC8vIE1ha2UgYSBsYXJnZXIgdG91Y2ggYXJlYS4gIFRoZSBkaWFtZXRlciBvZiB0aGUgY2lyY2xlIHdhcyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5LlxyXG4gICAgc2VsZWN0aW9uTm9kZS50b3VjaEFyZWEgPSBTaGFwZS5jaXJjbGUoXHJcbiAgICAgIHNlbGVjdGlvbk5vZGUuYm91bmRzLndpZHRoIC8gMixcclxuICAgICAgc2VsZWN0aW9uTm9kZS5ib3VuZHMuaGVpZ2h0IC8gMixcclxuICAgICAgc2VsZWN0aW9uTm9kZS5ib3VuZHMud2lkdGggKiAwLjhcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5zZXRTZWxlY3Rpb25Ob2RlKCBzZWxlY3Rpb25Ob2RlICk7XHJcbiAgICB0aGlzLnBvc2l0aW9uaW5nT2Zmc2V0ID0gbmV3IFZlY3RvcjIoXHJcbiAgICAgIDAsXHJcbiAgICAgIC1zY3JlZW5WaWV3Lm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWSggQnJpY2tTdGFjay5CUklDS19IRUlHSFQgKiBudW1Ccmlja3MgLyAyIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gcG9zaXRpb25cclxuICAgKiBAcmV0dXJucyB7TWFzc31cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgYWRkRWxlbWVudFRvTW9kZWwoIHBvc2l0aW9uICkge1xyXG4gICAgY29uc3QgbWFzcyA9IHRoaXMubW9kZWwuYnJpY2tTdGFja0dyb3VwLmNyZWF0ZU5leHRFbGVtZW50KCB0aGlzLm51bUJyaWNrcywgcG9zaXRpb24gKTtcclxuICAgIHRoaXMubW9kZWwuYWRkTWFzcyggbWFzcyApO1xyXG4gICAgcmV0dXJuIG1hc3M7XHJcbiAgfVxyXG59XHJcblxyXG5iYWxhbmNpbmdBY3QucmVnaXN0ZXIoICdCcmlja1N0YWNrQ3JlYXRvck5vZGUnLCBCcmlja1N0YWNrQ3JlYXRvck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJyaWNrU3RhY2tDcmVhdG9yTm9kZTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsbUJBQW1CLE1BQU0sdURBQXVEO0FBQ3ZGLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsWUFBWSxNQUFNLHVCQUF1QjtBQUNoRCxPQUFPQyxpQkFBaUIsTUFBTSxtQ0FBbUM7QUFDakUsT0FBT0MsV0FBVyxNQUFNLG1DQUFtQztBQUMzRCxPQUFPQyxVQUFVLE1BQU0seUNBQXlDO0FBQ2hFLE9BQU9DLGNBQWMsTUFBTSxxQ0FBcUM7QUFDaEUsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsV0FBVyxHQUFHUixtQkFBbUIsQ0FBQ1Msd0JBQXdCLENBQUVYLE9BQU8sQ0FBQ1ksSUFBSSxFQUFFLEdBQUksQ0FBQztBQUVyRixNQUFNQyxxQkFBcUIsU0FBU0osZUFBZSxDQUFDO0VBRWxEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSyxXQUFXQSxDQUFFQyxTQUFTLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUc7SUFDbkQsS0FBSyxDQUFFRCxVQUFVLEVBQUVGLFNBQVMsR0FBR1IsVUFBVSxDQUFDWSxVQUFVLEVBQUUsSUFBSSxFQUFFRCxPQUFRLENBQUM7SUFDckUsSUFBSSxDQUFDSCxTQUFTLEdBQUdBLFNBQVM7SUFDMUIsSUFBSSxDQUFDQyxLQUFLLEdBQUdBLEtBQUs7O0lBRWxCO0lBQ0FYLGlCQUFpQixDQUFDZSxRQUFRLElBQUlKLEtBQUssQ0FBQ0ssbUJBQW1CLENBQUNDLElBQUksQ0FBRUMsV0FBVyxJQUFJO01BQzNFLElBQUksQ0FBQ0MsTUFBTSxHQUFHRCxXQUFXLEtBQUtqQixXQUFXLENBQUNtQixjQUFjLEdBQUcsU0FBUyxHQUFHLFNBQVM7TUFDaEYsSUFBSSxDQUFDQyxRQUFRLEdBQUdILFdBQVcsS0FBS2pCLFdBQVcsQ0FBQ21CLGNBQWM7SUFDNUQsQ0FBRSxDQUFDO0lBRUgsTUFBTUUsYUFBYSxHQUFHLElBQUluQixjQUFjLENBQ3RDLElBQUlELFVBQVUsQ0FBRVEsU0FBUyxFQUFFZixPQUFPLENBQUNZLElBQUksRUFBRTtNQUFFZ0IsTUFBTSxFQUFFekIsTUFBTSxDQUFDMEI7SUFBUSxDQUFFLENBQUMsRUFDckVuQixXQUFXLEVBQ1gsS0FBSyxFQUNMLElBQUlYLFFBQVEsQ0FBRSxLQUFNLENBQUMsRUFDckIsS0FBSyxFQUNMaUIsS0FBSyxDQUFDSyxtQkFDUixDQUFDOztJQUVEO0lBQ0FNLGFBQWEsQ0FBQ0csU0FBUyxHQUFHN0IsS0FBSyxDQUFDOEIsTUFBTSxDQUNwQ0osYUFBYSxDQUFDSyxNQUFNLENBQUNDLEtBQUssR0FBRyxDQUFDLEVBQzlCTixhQUFhLENBQUNLLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHLENBQUMsRUFDL0JQLGFBQWEsQ0FBQ0ssTUFBTSxDQUFDQyxLQUFLLEdBQUcsR0FDL0IsQ0FBQztJQUVELElBQUksQ0FBQ0UsZ0JBQWdCLENBQUVSLGFBQWMsQ0FBQztJQUN0QyxJQUFJLENBQUNTLGlCQUFpQixHQUFHLElBQUlwQyxPQUFPLENBQ2xDLENBQUMsRUFDRCxDQUFDaUIsVUFBVSxDQUFDb0Isa0JBQWtCLENBQUNDLGlCQUFpQixDQUFFL0IsVUFBVSxDQUFDZ0MsWUFBWSxHQUFHeEIsU0FBUyxHQUFHLENBQUUsQ0FDNUYsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFeUIsaUJBQWlCQSxDQUFFQyxRQUFRLEVBQUc7SUFDNUIsTUFBTUMsSUFBSSxHQUFHLElBQUksQ0FBQzFCLEtBQUssQ0FBQzJCLGVBQWUsQ0FBQ0MsaUJBQWlCLENBQUUsSUFBSSxDQUFDN0IsU0FBUyxFQUFFMEIsUUFBUyxDQUFDO0lBQ3JGLElBQUksQ0FBQ3pCLEtBQUssQ0FBQzZCLE9BQU8sQ0FBRUgsSUFBSyxDQUFDO0lBQzFCLE9BQU9BLElBQUk7RUFDYjtBQUNGO0FBRUF0QyxZQUFZLENBQUMwQyxRQUFRLENBQUUsdUJBQXVCLEVBQUVqQyxxQkFBc0IsQ0FBQztBQUV2RSxlQUFlQSxxQkFBcUIifQ==