// Copyright 2013-2021, University of Colorado Boulder

/**
 * This type represents an adult woman in a toolbox.  When the user clicks
 * on this node, the corresponding model element is added to the model at the
 * user's mouse position.
 *
 * @author John Blanco
 */

import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import balancingAct from '../../balancingAct.js';
import Woman from '../../common/model/masses/Woman.js';
import ImageMassNode from '../../common/view/ImageMassNode.js';
import ImageMassCreatorNode from './ImageMassCreatorNode.js';

// Model-view transform for scaling the node used in the toolbox.  This
// may scale the node differently than what is used in the model so that
// items in the toolbox can be sized differently (generally smaller).
const SCALING_MVT = ModelViewTransform2.createOffsetScaleMapping(Vector2.ZERO, 80);
class WomanCreatorNode extends ImageMassCreatorNode {
  /**
   * @param {BalanceLabModel} model
   * @param {BasicBalanceScreenView} screenView
   */
  constructor(model, screenView) {
    super(model, screenView, new Woman(), true);
    this.setSelectionNode(new ImageMassNode(this.prototypeImageMass, SCALING_MVT, false, new Property(false), false, model.columnStateProperty));
    this.positioningOffset = new Vector2(0, -screenView.modelViewTransform.modelToViewDeltaY(this.prototypeImageMass.heightProperty.get() / 2));
  }
}
balancingAct.register('WomanCreatorNode', WomanCreatorNode);
export default WomanCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiYmFsYW5jaW5nQWN0IiwiV29tYW4iLCJJbWFnZU1hc3NOb2RlIiwiSW1hZ2VNYXNzQ3JlYXRvck5vZGUiLCJTQ0FMSU5HX01WVCIsImNyZWF0ZU9mZnNldFNjYWxlTWFwcGluZyIsIlpFUk8iLCJXb21hbkNyZWF0b3JOb2RlIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInNjcmVlblZpZXciLCJzZXRTZWxlY3Rpb25Ob2RlIiwicHJvdG90eXBlSW1hZ2VNYXNzIiwiY29sdW1uU3RhdGVQcm9wZXJ0eSIsInBvc2l0aW9uaW5nT2Zmc2V0IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwibW9kZWxUb1ZpZXdEZWx0YVkiLCJoZWlnaHRQcm9wZXJ0eSIsImdldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV29tYW5DcmVhdG9yTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHR5cGUgcmVwcmVzZW50cyBhbiBhZHVsdCB3b21hbiBpbiBhIHRvb2xib3guICBXaGVuIHRoZSB1c2VyIGNsaWNrc1xyXG4gKiBvbiB0aGlzIG5vZGUsIHRoZSBjb3JyZXNwb25kaW5nIG1vZGVsIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsIGF0IHRoZVxyXG4gKiB1c2VyJ3MgbW91c2UgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcbmltcG9ydCBXb21hbiBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvbWFzc2VzL1dvbWFuLmpzJztcclxuaW1wb3J0IEltYWdlTWFzc05vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvSW1hZ2VNYXNzTm9kZS5qcyc7XHJcbmltcG9ydCBJbWFnZU1hc3NDcmVhdG9yTm9kZSBmcm9tICcuL0ltYWdlTWFzc0NyZWF0b3JOb2RlLmpzJztcclxuXHJcbi8vIE1vZGVsLXZpZXcgdHJhbnNmb3JtIGZvciBzY2FsaW5nIHRoZSBub2RlIHVzZWQgaW4gdGhlIHRvb2xib3guICBUaGlzXHJcbi8vIG1heSBzY2FsZSB0aGUgbm9kZSBkaWZmZXJlbnRseSB0aGFuIHdoYXQgaXMgdXNlZCBpbiB0aGUgbW9kZWwgc28gdGhhdFxyXG4vLyBpdGVtcyBpbiB0aGUgdG9vbGJveCBjYW4gYmUgc2l6ZWQgZGlmZmVyZW50bHkgKGdlbmVyYWxseSBzbWFsbGVyKS5cclxuY29uc3QgU0NBTElOR19NVlQgPSBNb2RlbFZpZXdUcmFuc2Zvcm0yLmNyZWF0ZU9mZnNldFNjYWxlTWFwcGluZyggVmVjdG9yMi5aRVJPLCA4MCApO1xyXG5cclxuY2xhc3MgV29tYW5DcmVhdG9yTm9kZSBleHRlbmRzIEltYWdlTWFzc0NyZWF0b3JOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCYWxhbmNlTGFiTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtCYXNpY0JhbGFuY2VTY3JlZW5WaWV3fSBzY3JlZW5WaWV3XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBzY3JlZW5WaWV3ICkge1xyXG4gICAgc3VwZXIoIG1vZGVsLCBzY3JlZW5WaWV3LCBuZXcgV29tYW4oKSwgdHJ1ZSApO1xyXG4gICAgdGhpcy5zZXRTZWxlY3Rpb25Ob2RlKFxyXG4gICAgICBuZXcgSW1hZ2VNYXNzTm9kZShcclxuICAgICAgICB0aGlzLnByb3RvdHlwZUltYWdlTWFzcyxcclxuICAgICAgICBTQ0FMSU5HX01WVCxcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICBuZXcgUHJvcGVydHkoIGZhbHNlICksXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgbW9kZWwuY29sdW1uU3RhdGVQcm9wZXJ0eVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gICAgdGhpcy5wb3NpdGlvbmluZ09mZnNldCA9IG5ldyBWZWN0b3IyKFxyXG4gICAgICAwLFxyXG4gICAgICAtc2NyZWVuVmlldy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVkoIHRoaXMucHJvdG90eXBlSW1hZ2VNYXNzLmhlaWdodFByb3BlcnR5LmdldCgpIC8gMiApXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuYmFsYW5jaW5nQWN0LnJlZ2lzdGVyKCAnV29tYW5DcmVhdG9yTm9kZScsIFdvbWFuQ3JlYXRvck5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFdvbWFuQ3JlYXRvck5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLG1CQUFtQixNQUFNLHVEQUF1RDtBQUN2RixPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLEtBQUssTUFBTSxvQ0FBb0M7QUFDdEQsT0FBT0MsYUFBYSxNQUFNLG9DQUFvQztBQUM5RCxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBR0wsbUJBQW1CLENBQUNNLHdCQUF3QixDQUFFUCxPQUFPLENBQUNRLElBQUksRUFBRSxFQUFHLENBQUM7QUFFcEYsTUFBTUMsZ0JBQWdCLFNBQVNKLG9CQUFvQixDQUFDO0VBRWxEO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFHO0lBQy9CLEtBQUssQ0FBRUQsS0FBSyxFQUFFQyxVQUFVLEVBQUUsSUFBSVQsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFLLENBQUM7SUFDN0MsSUFBSSxDQUFDVSxnQkFBZ0IsQ0FDbkIsSUFBSVQsYUFBYSxDQUNmLElBQUksQ0FBQ1Usa0JBQWtCLEVBQ3ZCUixXQUFXLEVBQ1gsS0FBSyxFQUNMLElBQUlQLFFBQVEsQ0FBRSxLQUFNLENBQUMsRUFDckIsS0FBSyxFQUNMWSxLQUFLLENBQUNJLG1CQUNSLENBQ0YsQ0FBQztJQUNELElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsSUFBSWhCLE9BQU8sQ0FDbEMsQ0FBQyxFQUNELENBQUNZLFVBQVUsQ0FBQ0ssa0JBQWtCLENBQUNDLGlCQUFpQixDQUFFLElBQUksQ0FBQ0osa0JBQWtCLENBQUNLLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFFLENBQ3JHLENBQUM7RUFDSDtBQUNGO0FBRUFsQixZQUFZLENBQUNtQixRQUFRLENBQUUsa0JBQWtCLEVBQUVaLGdCQUFpQixDQUFDO0FBRTdELGVBQWVBLGdCQUFnQiJ9