// Copyright 2013-2021, University of Colorado Boulder

/**
 * This type represents an adolescent boy in a toolbox.  When the user clicks
 * on this node, the corresponding model element is added to the model at the
 * user's mouse position.
 *
 * @author John Blanco
 */

import Property from '../../../../axon/js/Property.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import balancingAct from '../../balancingAct.js';
import Boy from '../../common/model/masses/Boy.js';
import ImageMassNode from '../../common/view/ImageMassNode.js';
import ImageMassCreatorNode from './ImageMassCreatorNode.js';

// Model-view transform for scaling the node used in the toolbox.  This may scale the node differently than what is
// used in the model so that items in the toolbox can be sized differently (generally smaller).
const SCALING_MVT = ModelViewTransform2.createOffsetScaleMapping(Vector2.ZERO, 80);
class BoyCreatorNode extends ImageMassCreatorNode {
  /**
   * @param {BalanceLabModel} model
   * @param {BasicBalanceScreenView} screenView
   */
  constructor(model, screenView) {
    super(model, screenView, new Boy(), true);
    this.setSelectionNode(new ImageMassNode(this.prototypeImageMass, SCALING_MVT, false, new Property(false), false, model.columnStateProperty));
    this.positioningOffset = new Vector2(0, -screenView.modelViewTransform.modelToViewDeltaY(this.prototypeImageMass.heightProperty.get() / 2));
  }
}
balancingAct.register('BoyCreatorNode', BoyCreatorNode);
export default BoyCreatorNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwiYmFsYW5jaW5nQWN0IiwiQm95IiwiSW1hZ2VNYXNzTm9kZSIsIkltYWdlTWFzc0NyZWF0b3JOb2RlIiwiU0NBTElOR19NVlQiLCJjcmVhdGVPZmZzZXRTY2FsZU1hcHBpbmciLCJaRVJPIiwiQm95Q3JlYXRvck5vZGUiLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwic2NyZWVuVmlldyIsInNldFNlbGVjdGlvbk5vZGUiLCJwcm90b3R5cGVJbWFnZU1hc3MiLCJjb2x1bW5TdGF0ZVByb3BlcnR5IiwicG9zaXRpb25pbmdPZmZzZXQiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJtb2RlbFRvVmlld0RlbHRhWSIsImhlaWdodFByb3BlcnR5IiwiZ2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCb3lDcmVhdG9yTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHR5cGUgcmVwcmVzZW50cyBhbiBhZG9sZXNjZW50IGJveSBpbiBhIHRvb2xib3guICBXaGVuIHRoZSB1c2VyIGNsaWNrc1xyXG4gKiBvbiB0aGlzIG5vZGUsIHRoZSBjb3JyZXNwb25kaW5nIG1vZGVsIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsIGF0IHRoZVxyXG4gKiB1c2VyJ3MgbW91c2UgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQWN0IGZyb20gJy4uLy4uL2JhbGFuY2luZ0FjdC5qcyc7XHJcbmltcG9ydCBCb3kgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL21hc3Nlcy9Cb3kuanMnO1xyXG5pbXBvcnQgSW1hZ2VNYXNzTm9kZSBmcm9tICcuLi8uLi9jb21tb24vdmlldy9JbWFnZU1hc3NOb2RlLmpzJztcclxuaW1wb3J0IEltYWdlTWFzc0NyZWF0b3JOb2RlIGZyb20gJy4vSW1hZ2VNYXNzQ3JlYXRvck5vZGUuanMnO1xyXG5cclxuLy8gTW9kZWwtdmlldyB0cmFuc2Zvcm0gZm9yIHNjYWxpbmcgdGhlIG5vZGUgdXNlZCBpbiB0aGUgdG9vbGJveC4gIFRoaXMgbWF5IHNjYWxlIHRoZSBub2RlIGRpZmZlcmVudGx5IHRoYW4gd2hhdCBpc1xyXG4vLyB1c2VkIGluIHRoZSBtb2RlbCBzbyB0aGF0IGl0ZW1zIGluIHRoZSB0b29sYm94IGNhbiBiZSBzaXplZCBkaWZmZXJlbnRseSAoZ2VuZXJhbGx5IHNtYWxsZXIpLlxyXG5jb25zdCBTQ0FMSU5HX01WVCA9IE1vZGVsVmlld1RyYW5zZm9ybTIuY3JlYXRlT2Zmc2V0U2NhbGVNYXBwaW5nKCBWZWN0b3IyLlpFUk8sIDgwICk7XHJcblxyXG5jbGFzcyBCb3lDcmVhdG9yTm9kZSBleHRlbmRzIEltYWdlTWFzc0NyZWF0b3JOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCYWxhbmNlTGFiTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtCYXNpY0JhbGFuY2VTY3JlZW5WaWV3fSBzY3JlZW5WaWV3XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBzY3JlZW5WaWV3ICkge1xyXG4gICAgc3VwZXIoIG1vZGVsLCBzY3JlZW5WaWV3LCBuZXcgQm95KCksIHRydWUgKTtcclxuICAgIHRoaXMuc2V0U2VsZWN0aW9uTm9kZSggbmV3IEltYWdlTWFzc05vZGUoIHRoaXMucHJvdG90eXBlSW1hZ2VNYXNzLCBTQ0FMSU5HX01WVCwgZmFsc2UsIG5ldyBQcm9wZXJ0eSggZmFsc2UgKSwgZmFsc2UsIG1vZGVsLmNvbHVtblN0YXRlUHJvcGVydHkgKSApO1xyXG4gICAgdGhpcy5wb3NpdGlvbmluZ09mZnNldCA9IG5ldyBWZWN0b3IyKFxyXG4gICAgICAwLFxyXG4gICAgICAtc2NyZWVuVmlldy5tb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVkoIHRoaXMucHJvdG90eXBlSW1hZ2VNYXNzLmhlaWdodFByb3BlcnR5LmdldCgpIC8gMiApXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuYmFsYW5jaW5nQWN0LnJlZ2lzdGVyKCAnQm95Q3JlYXRvck5vZGUnLCBCb3lDcmVhdG9yTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQm95Q3JlYXRvck5vZGU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLG1CQUFtQixNQUFNLHVEQUF1RDtBQUN2RixPQUFPQyxZQUFZLE1BQU0sdUJBQXVCO0FBQ2hELE9BQU9DLEdBQUcsTUFBTSxrQ0FBa0M7QUFDbEQsT0FBT0MsYUFBYSxNQUFNLG9DQUFvQztBQUM5RCxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7O0FBRTVEO0FBQ0E7QUFDQSxNQUFNQyxXQUFXLEdBQUdMLG1CQUFtQixDQUFDTSx3QkFBd0IsQ0FBRVAsT0FBTyxDQUFDUSxJQUFJLEVBQUUsRUFBRyxDQUFDO0FBRXBGLE1BQU1DLGNBQWMsU0FBU0osb0JBQW9CLENBQUM7RUFFaEQ7QUFDRjtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxVQUFVLEVBQUc7SUFDL0IsS0FBSyxDQUFFRCxLQUFLLEVBQUVDLFVBQVUsRUFBRSxJQUFJVCxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUssQ0FBQztJQUMzQyxJQUFJLENBQUNVLGdCQUFnQixDQUFFLElBQUlULGFBQWEsQ0FBRSxJQUFJLENBQUNVLGtCQUFrQixFQUFFUixXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUlQLFFBQVEsQ0FBRSxLQUFNLENBQUMsRUFBRSxLQUFLLEVBQUVZLEtBQUssQ0FBQ0ksbUJBQW9CLENBQUUsQ0FBQztJQUNsSixJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUloQixPQUFPLENBQ2xDLENBQUMsRUFDRCxDQUFDWSxVQUFVLENBQUNLLGtCQUFrQixDQUFDQyxpQkFBaUIsQ0FBRSxJQUFJLENBQUNKLGtCQUFrQixDQUFDSyxjQUFjLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBRSxDQUNyRyxDQUFDO0VBQ0g7QUFDRjtBQUVBbEIsWUFBWSxDQUFDbUIsUUFBUSxDQUFFLGdCQUFnQixFQUFFWixjQUFlLENBQUM7QUFFekQsZUFBZUEsY0FBYyJ9