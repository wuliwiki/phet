// Copyright 2022, University of Colorado Boulder

/**
 * The tsc type checker outputs type errors using relative paths only, which are not hyperlinked in WebStorm and IntelliJ.
 * This thin wrapper uses a heuristic to convert the relative paths to absolute paths.  Combined with an "output filter",
 * this makes the type errors clickable in the tool output panel.
 *
 * To support CacheLayer, this must be run from chipper/
 *
 * Usage from command line:
 * cd chipper/
 * node js/scripts/absolute-tsc.js {{TS_CONFIG_DIRECTORY}}
 * node js/scripts/absolute-tsc.js ../chipper/tsconfig/all
 *
 * Configure WebStorm with the following external tool:
 * program: node
 * arguments: js/scripts/absolute-tsc.js ${dir with a tsconfig, like ../chipper/tsconfig/all}
 * working dir: ${chipper/, like /Users/samreid/apache-document-root/main/chipper}
 *
 * To share a cache with pre-commit-hooks use: ../chipper/tsconfig/all
 *
 * IMPORTANT!!! This makes the files paths clickable in Webstorm:
 * output filters: $FILE_PATH$\($LINE$\,$COLUMN$\)
 *
 * If you run into a memory error, consider setting the environment variable like so:
 * export NODE_OPTIONS=--max_old_space_size=4096
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
const start = Date.now();
const execute = require('../../../perennial-alias/js/common/execute');
const CacheLayer = require('../common/CacheLayer');
const os = require('os');
const path = require('path');
const {
  resolve
} = require('path'); // eslint-disable-line require-statement-match

const args = process.argv.slice(2);
if (!args || args.length === 0) {
  console.log('usage: path to dir with a tsconfig file');
}
(async () => {
  const cacheKey = 'absolute-tsc#' + args[0];
  if (CacheLayer.isCacheSafe(cacheKey)) {
    // console.log( 'cache safe for: ' + cacheKey );
    return;
  }

  // console.log( 'changes detected...' );

  const results = await execute('node', [`${__dirname}/../../../chipper/node_modules/typescript/bin/tsc`], args[0], {
    errors: 'resolve'
  });

  // If there was a problem running tsc, report it here.  The type errors are reported on stdout below.
  if (results.stderr.length > 0) {
    console.log(results);
  }
  const end = Date.now();
  const elapsed = end - start;
  if (results.stdout.trim().length === 0) {
    console.log(`0 errors in ${elapsed}ms`);
    CacheLayer.onSuccess(cacheKey);
  } else {
    const lines = results.stdout.trim().split(os.EOL);
    const mapped = lines.map(line => {
      if (line.includes('): error TS')) {
        const parenthesesIndex = line.indexOf('(');
        const linePath = line.substring(0, parenthesesIndex);
        const resolved = resolve(process.cwd() + path.sep + args[0] + path.sep + linePath);
        return resolved + line.substring(parenthesesIndex);
      } else {
        return line;
      }
    });

    // If a line starts without whitespace, it begins a new error
    const errorCount = mapped.filter(line => line === line.trim()).length;
    console.log(mapped.join('\n'));
    console.log(`${errorCount} ${errorCount === 1 ? 'error' : 'errors'} in ${elapsed}ms`);
    process.exit(1);
  }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGFydCIsIkRhdGUiLCJub3ciLCJleGVjdXRlIiwicmVxdWlyZSIsIkNhY2hlTGF5ZXIiLCJvcyIsInBhdGgiLCJyZXNvbHZlIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwiY2FjaGVLZXkiLCJpc0NhY2hlU2FmZSIsInJlc3VsdHMiLCJfX2Rpcm5hbWUiLCJlcnJvcnMiLCJzdGRlcnIiLCJlbmQiLCJlbGFwc2VkIiwic3Rkb3V0IiwidHJpbSIsIm9uU3VjY2VzcyIsImxpbmVzIiwic3BsaXQiLCJFT0wiLCJtYXBwZWQiLCJtYXAiLCJsaW5lIiwiaW5jbHVkZXMiLCJwYXJlbnRoZXNlc0luZGV4IiwiaW5kZXhPZiIsImxpbmVQYXRoIiwic3Vic3RyaW5nIiwicmVzb2x2ZWQiLCJjd2QiLCJzZXAiLCJlcnJvckNvdW50IiwiZmlsdGVyIiwiam9pbiIsImV4aXQiXSwic291cmNlcyI6WyJhYnNvbHV0ZS10c2MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSB0c2MgdHlwZSBjaGVja2VyIG91dHB1dHMgdHlwZSBlcnJvcnMgdXNpbmcgcmVsYXRpdmUgcGF0aHMgb25seSwgd2hpY2ggYXJlIG5vdCBoeXBlcmxpbmtlZCBpbiBXZWJTdG9ybSBhbmQgSW50ZWxsaUouXHJcbiAqIFRoaXMgdGhpbiB3cmFwcGVyIHVzZXMgYSBoZXVyaXN0aWMgdG8gY29udmVydCB0aGUgcmVsYXRpdmUgcGF0aHMgdG8gYWJzb2x1dGUgcGF0aHMuICBDb21iaW5lZCB3aXRoIGFuIFwib3V0cHV0IGZpbHRlclwiLFxyXG4gKiB0aGlzIG1ha2VzIHRoZSB0eXBlIGVycm9ycyBjbGlja2FibGUgaW4gdGhlIHRvb2wgb3V0cHV0IHBhbmVsLlxyXG4gKlxyXG4gKiBUbyBzdXBwb3J0IENhY2hlTGF5ZXIsIHRoaXMgbXVzdCBiZSBydW4gZnJvbSBjaGlwcGVyL1xyXG4gKlxyXG4gKiBVc2FnZSBmcm9tIGNvbW1hbmQgbGluZTpcclxuICogY2QgY2hpcHBlci9cclxuICogbm9kZSBqcy9zY3JpcHRzL2Fic29sdXRlLXRzYy5qcyB7e1RTX0NPTkZJR19ESVJFQ1RPUll9fVxyXG4gKiBub2RlIGpzL3NjcmlwdHMvYWJzb2x1dGUtdHNjLmpzIC4uL2NoaXBwZXIvdHNjb25maWcvYWxsXHJcbiAqXHJcbiAqIENvbmZpZ3VyZSBXZWJTdG9ybSB3aXRoIHRoZSBmb2xsb3dpbmcgZXh0ZXJuYWwgdG9vbDpcclxuICogcHJvZ3JhbTogbm9kZVxyXG4gKiBhcmd1bWVudHM6IGpzL3NjcmlwdHMvYWJzb2x1dGUtdHNjLmpzICR7ZGlyIHdpdGggYSB0c2NvbmZpZywgbGlrZSAuLi9jaGlwcGVyL3RzY29uZmlnL2FsbH1cclxuICogd29ya2luZyBkaXI6ICR7Y2hpcHBlci8sIGxpa2UgL1VzZXJzL3NhbXJlaWQvYXBhY2hlLWRvY3VtZW50LXJvb3QvbWFpbi9jaGlwcGVyfVxyXG4gKlxyXG4gKiBUbyBzaGFyZSBhIGNhY2hlIHdpdGggcHJlLWNvbW1pdC1ob29rcyB1c2U6IC4uL2NoaXBwZXIvdHNjb25maWcvYWxsXHJcbiAqXHJcbiAqIElNUE9SVEFOVCEhISBUaGlzIG1ha2VzIHRoZSBmaWxlcyBwYXRocyBjbGlja2FibGUgaW4gV2Vic3Rvcm06XHJcbiAqIG91dHB1dCBmaWx0ZXJzOiAkRklMRV9QQVRIJFxcKCRMSU5FJFxcLCRDT0xVTU4kXFwpXHJcbiAqXHJcbiAqIElmIHlvdSBydW4gaW50byBhIG1lbW9yeSBlcnJvciwgY29uc2lkZXIgc2V0dGluZyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgbGlrZSBzbzpcclxuICogZXhwb3J0IE5PREVfT1BUSU9OUz0tLW1heF9vbGRfc3BhY2Vfc2l6ZT00MDk2XHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5jb25zdCBzdGFydCA9IERhdGUubm93KCk7XHJcbmNvbnN0IGV4ZWN1dGUgPSByZXF1aXJlKCAnLi4vLi4vLi4vcGVyZW5uaWFsLWFsaWFzL2pzL2NvbW1vbi9leGVjdXRlJyApO1xyXG5jb25zdCBDYWNoZUxheWVyID0gcmVxdWlyZSggJy4uL2NvbW1vbi9DYWNoZUxheWVyJyApO1xyXG5jb25zdCBvcyA9IHJlcXVpcmUoICdvcycgKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoICdwYXRoJyApO1xyXG5jb25zdCB7IHJlc29sdmUgfSA9IHJlcXVpcmUoICdwYXRoJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtc3RhdGVtZW50LW1hdGNoXHJcblxyXG5jb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKCAyICk7XHJcbmlmICggIWFyZ3MgfHwgYXJncy5sZW5ndGggPT09IDAgKSB7XHJcbiAgY29uc29sZS5sb2coICd1c2FnZTogcGF0aCB0byBkaXIgd2l0aCBhIHRzY29uZmlnIGZpbGUnICk7XHJcbn1cclxuXHJcbiggYXN5bmMgKCkgPT4ge1xyXG5cclxuICBjb25zdCBjYWNoZUtleSA9ICdhYnNvbHV0ZS10c2MjJyArIGFyZ3NbIDAgXTtcclxuICBpZiAoIENhY2hlTGF5ZXIuaXNDYWNoZVNhZmUoIGNhY2hlS2V5ICkgKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyggJ2NhY2hlIHNhZmUgZm9yOiAnICsgY2FjaGVLZXkgKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIGNvbnNvbGUubG9nKCAnY2hhbmdlcyBkZXRlY3RlZC4uLicgKTtcclxuXHJcbiAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGV4ZWN1dGUoICdub2RlJywgWyBgJHtfX2Rpcm5hbWV9Ly4uLy4uLy4uL2NoaXBwZXIvbm9kZV9tb2R1bGVzL3R5cGVzY3JpcHQvYmluL3RzY2AgXSwgYXJnc1sgMCBdLCB7XHJcbiAgICBlcnJvcnM6ICdyZXNvbHZlJ1xyXG4gIH0gKTtcclxuXHJcbiAgLy8gSWYgdGhlcmUgd2FzIGEgcHJvYmxlbSBydW5uaW5nIHRzYywgcmVwb3J0IGl0IGhlcmUuICBUaGUgdHlwZSBlcnJvcnMgYXJlIHJlcG9ydGVkIG9uIHN0ZG91dCBiZWxvdy5cclxuICBpZiAoIHJlc3VsdHMuc3RkZXJyLmxlbmd0aCA+IDAgKSB7XHJcbiAgICBjb25zb2xlLmxvZyggcmVzdWx0cyApO1xyXG4gIH1cclxuICBjb25zdCBlbmQgPSBEYXRlLm5vdygpO1xyXG4gIGNvbnN0IGVsYXBzZWQgPSBlbmQgLSBzdGFydDtcclxuXHJcbiAgaWYgKCByZXN1bHRzLnN0ZG91dC50cmltKCkubGVuZ3RoID09PSAwICkge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCBgMCBlcnJvcnMgaW4gJHtlbGFwc2VkfW1zYCApO1xyXG4gICAgQ2FjaGVMYXllci5vblN1Y2Nlc3MoIGNhY2hlS2V5ICk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgY29uc3QgbGluZXMgPSByZXN1bHRzLnN0ZG91dC50cmltKCkuc3BsaXQoIG9zLkVPTCApO1xyXG4gICAgY29uc3QgbWFwcGVkID0gbGluZXMubWFwKCBsaW5lID0+IHtcclxuXHJcbiAgICAgIGlmICggbGluZS5pbmNsdWRlcyggJyk6IGVycm9yIFRTJyApICkge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudGhlc2VzSW5kZXggPSBsaW5lLmluZGV4T2YoICcoJyApO1xyXG5cclxuICAgICAgICBjb25zdCBsaW5lUGF0aCA9IGxpbmUuc3Vic3RyaW5nKCAwLCBwYXJlbnRoZXNlc0luZGV4ICk7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlKCBwcm9jZXNzLmN3ZCgpICsgcGF0aC5zZXAgKyBhcmdzWyAwIF0gKyBwYXRoLnNlcCArIGxpbmVQYXRoICk7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkICsgbGluZS5zdWJzdHJpbmcoIHBhcmVudGhlc2VzSW5kZXggKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbGluZTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIElmIGEgbGluZSBzdGFydHMgd2l0aG91dCB3aGl0ZXNwYWNlLCBpdCBiZWdpbnMgYSBuZXcgZXJyb3JcclxuICAgIGNvbnN0IGVycm9yQ291bnQgPSBtYXBwZWQuZmlsdGVyKCBsaW5lID0+IGxpbmUgPT09IGxpbmUudHJpbSgpICkubGVuZ3RoO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCBtYXBwZWQuam9pbiggJ1xcbicgKSApO1xyXG4gICAgY29uc29sZS5sb2coIGAke2Vycm9yQ291bnR9ICR7ZXJyb3JDb3VudCA9PT0gMSA/ICdlcnJvcicgOiAnZXJyb3JzJ30gaW4gJHtlbGFwc2VkfW1zYCApO1xyXG4gICAgcHJvY2Vzcy5leGl0KCAxICk7XHJcbiAgfVxyXG59ICkoKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTUMsT0FBTyxHQUFHQyxPQUFPLENBQUUsNENBQTZDLENBQUM7QUFDdkUsTUFBTUMsVUFBVSxHQUFHRCxPQUFPLENBQUUsc0JBQXVCLENBQUM7QUFDcEQsTUFBTUUsRUFBRSxHQUFHRixPQUFPLENBQUUsSUFBSyxDQUFDO0FBQzFCLE1BQU1HLElBQUksR0FBR0gsT0FBTyxDQUFFLE1BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVJO0FBQVEsQ0FBQyxHQUFHSixPQUFPLENBQUUsTUFBTyxDQUFDLENBQUMsQ0FBQzs7QUFFdkMsTUFBTUssSUFBSSxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFFLENBQUUsQ0FBQztBQUNwQyxJQUFLLENBQUNI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