// Copyright 2018-2021, University of Colorado Boulder

/**
 * Grunt task that updates copyright statements based on git history, see #403
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const getCopyrightLine = require('./getCopyrightLine');
const fs = require('fs');

/**
 * @public
 * @param {string} repo - The repository of the file to update (should be a git root)
 * @param {string} relativeFile - The filename relative to the repository root.
 * @param {boolean} silent - if true, no console logging will occur
 * @returns {Promise}
 */
module.exports = async (repo, relativeFile, silent = false) => {
  const absPath = `../${repo}/${relativeFile}`;
  const fileText = fs.readFileSync(absPath, 'utf8');

  // Infer the line separator for the platform
  const firstR = fileText.indexOf('\r');
  const firstN = fileText.indexOf('\n');
  const lineSeparator = firstR >= 0 && firstR < firstN ? '\r' : '\n';

  // Parse by line separator
  const fileLines = fileText.split(lineSeparator); // splits using both unix and windows newlines

  // Check if the first line is already correct
  const firstLine = fileLines[0];
  const copyrightLine = await getCopyrightLine(repo, relativeFile);

  // Update the line
  if (firstLine !== copyrightLine) {
    if (firstLine.indexOf('// Copyright') === 0) {
      const concatted = [copyrightLine].concat(fileLines.slice(1));
      const newFileContents = concatted.join(lineSeparator);
      fs.writeFileSync(absPath, newFileContents);
      !silent && console.log(`${absPath}, updated with ${copyrightLine}`);
    } else {
      !silent && console.log(`${absPath} FIRST LINE WAS NOT COPYRIGHT: ${firstLine}`);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRDb3B5cmlnaHRMaW5lIiwicmVxdWlyZSIsImZzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcG8iLCJyZWxhdGl2ZUZpbGUiLCJzaWxlbnQiLCJhYnNQYXRoIiwiZmlsZVRleHQiLCJyZWFkRmlsZVN5bmMiLCJmaXJzdFIiLCJpbmRleE9mIiwiZmlyc3ROIiwibGluZVNlcGFyYXRvciIsImZpbGVMaW5lcyIsInNwbGl0IiwiZmlyc3RMaW5lIiwiY29weXJpZ2h0TGluZSIsImNvbmNhdHRlZCIsImNvbmNhdCIsInNsaWNlIiwibmV3RmlsZUNvbnRlbnRzIiwiam9pbiIsIndyaXRlRmlsZVN5bmMiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsidXBkYXRlQ29weXJpZ2h0RGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHcnVudCB0YXNrIHRoYXQgdXBkYXRlcyBjb3B5cmlnaHQgc3RhdGVtZW50cyBiYXNlZCBvbiBnaXQgaGlzdG9yeSwgc2VlICM0MDNcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcblxyXG5jb25zdCBnZXRDb3B5cmlnaHRMaW5lID0gcmVxdWlyZSggJy4vZ2V0Q29weXJpZ2h0TGluZScgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZnMnICk7XHJcblxyXG4vKipcclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbyAtIFRoZSByZXBvc2l0b3J5IG9mIHRoZSBmaWxlIHRvIHVwZGF0ZSAoc2hvdWxkIGJlIGEgZ2l0IHJvb3QpXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZUZpbGUgLSBUaGUgZmlsZW5hbWUgcmVsYXRpdmUgdG8gdGhlIHJlcG9zaXRvcnkgcm9vdC5cclxuICogQHBhcmFtIHtib29sZWFufSBzaWxlbnQgLSBpZiB0cnVlLCBubyBjb25zb2xlIGxvZ2dpbmcgd2lsbCBvY2N1clxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKCByZXBvLCByZWxhdGl2ZUZpbGUsIHNpbGVudCA9IGZhbHNlICkgPT4ge1xyXG4gIGNvbnN0IGFic1BhdGggPSBgLi4vJHtyZXBvfS8ke3JlbGF0aXZlRmlsZX1gO1xyXG4gIGNvbnN0IGZpbGVUZXh0ID0gZnMucmVhZEZpbGVTeW5jKCBhYnNQYXRoLCAndXRmOCcgKTtcclxuXHJcbiAgLy8gSW5mZXIgdGhlIGxpbmUgc2VwYXJhdG9yIGZvciB0aGUgcGxhdGZvcm1cclxuICBjb25zdCBmaXJzdFIgPSBmaWxlVGV4dC5pbmRleE9mKCAnXFxyJyApO1xyXG4gIGNvbnN0IGZpcnN0TiA9IGZpbGVUZXh0LmluZGV4T2YoICdcXG4nICk7XHJcbiAgY29uc3QgbGluZVNlcGFyYXRvciA9IGZpcnN0UiA+PSAwICYmIGZpcnN0UiA8IGZpcnN0TiA/ICdcXHInIDogJ1xcbic7XHJcblxyXG4gIC8vIFBhcnNlIGJ5IGxpbmUgc2VwYXJhdG9yXHJcbiAgY29uc3QgZmlsZUxpbmVzID0gZmlsZVRleHQuc3BsaXQoIGxpbmVTZXBhcmF0b3IgKTsgLy8gc3BsaXRzIHVzaW5nIGJvdGggdW5peCBhbmQgd2luZG93cyBuZXdsaW5lc1xyXG5cclxuICAvLyBDaGVjayBpZiB0aGUgZmlyc3QgbGluZSBpcyBhbHJlYWR5IGNvcnJlY3RcclxuICBjb25zdCBmaXJzdExpbmUgPSBmaWxlTGluZXNbIDAgXTtcclxuICBjb25zdCBjb3B5cmlnaHRMaW5lID0gYXdhaXQgZ2V0Q29weXJpZ2h0TGluZSggcmVwbywgcmVsYXRpdmVGaWxlICk7XHJcblxyXG4gIC8vIFVwZGF0ZSB0aGUgbGluZVxyXG4gIGlmICggZmlyc3RMaW5lICE9PSBjb3B5cmlnaHRMaW5lICkge1xyXG4gICAgaWYgKCBmaXJzdExpbmUuaW5kZXhPZiggJy8vIENvcHlyaWdodCcgKSA9PT0gMCApIHtcclxuICAgICAgY29uc3QgY29uY2F0dGVkID0gWyBjb3B5cmlnaHRMaW5lIF0uY29uY2F0KCBmaWxlTGluZXMuc2xpY2UoIDEgKSApO1xyXG4gICAgICBjb25zdCBuZXdGaWxlQ29udGVudHMgPSBjb25jYXR0ZWQuam9pbiggbGluZVNlcGFyYXRvciApO1xyXG4gICAgICBmcy53cml0ZUZpbGVTeW5jKCBhYnNQYXRoLCBuZXdGaWxlQ29udGVudHMgKTtcclxuICAgICAgIXNpbGVudCAmJiBjb25zb2xlLmxvZyggYCR7YWJzUGF0aH0sIHVwZGF0ZWQgd2l0aCAke2NvcHlyaWdodExpbmV9YCApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICFzaWxlbnQgJiYgY29uc29sZS5sb2coIGAke2Fic1BhdGh9IEZJUlNUIExJTkUgV0FTIE5PVCBDT1BZUklHSFQ6ICR7Zmlyc3RMaW5lfWAgKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE1BQU1BLGdCQUFnQixHQUFHQyxPQUFPLENBQUUsb0JBQXFCLENBQUM7QUFDeEQsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUUsSUFBSyxDQUFDOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxPQUFRQyxJQUFJLEVBQUVDLFlBQVksRUFBRUMsTUFBTSxHQUFHLEtBQUssS0FBTTtFQUMvRCxNQUFNQyxPQUFPLEdBQUksTUFBS0gsSUFBSyxJQUFHQyxZQUFhLEVBQUM7RUFDNUMsTUFBTUcsUUFBUSxHQUFHUCxFQUFFLENBQUNRLFlBQVksQ0FBRUYsT0FBTyxFQUFFLE1BQU8sQ0FBQzs7RUFFbkQ7RUFDQSxNQUFNRyxNQUFNLEdBQUdGLFFBQVEsQ0FBQ0csT0FBTyxDQUFFLElBQUssQ0FBQztFQUN2QyxNQUFNQyxNQUFNLEdBQUdKLFFBQVEsQ0FBQ0csT0FBTyxDQUFFLElBQUssQ0FBQztFQUN2QyxNQUFNRSxhQUFhLEdBQUdILE1BQU0sSUFBSSxDQUFDLElBQUlBLE1BQU0sR0FBR0UsTUFBTSxHQUFHLElBQUksR0FBRyxJQUFJOztFQUVsRTtFQUNBLE1BQU1FLFNBQVMsR0FBR04sUUFBUSxDQUFDTyxLQUFLLENBQUVGLGFBQWMsQ0FBQyxDQUFDLENBQUM7O0VBRW5EO0VBQ0EsTUFBTUcsU0FBUyxHQUFHRixTQUFTLENBQUUsQ0FBQyxDQUFFO0VBQ2hDLE1BQU1HLGFBQWEsR0FBRyxNQUFNbEIsZ0JBQWdCLENBQUVLLElBQUksRUFBRUMsWUFBYSxDQUFDOztFQUVsRTtFQUNBLElBQUtXLFNBQVMsS0FBS0MsYUFBYSxFQUFHO0lBQ2pDLElBQUtELFNBQVMsQ0FBQ0wsT0FBTyxDQUFFLGNBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRztNQUMvQyxNQUFNTyxTQUFTLEdBQUcsQ0FBRUQsYUFBYSxDQUFFLENBQUNFLE1BQU0sQ0FBRUwsU0FBUyxDQUFDTSxLQUFLLENBQUUsQ0FBRSxDQUFFLENBQUM7TUFDbEUsTUFBTUMsZUFBZSxHQUFHSCxTQUFTLENBQUNJLElBQUksQ0FBRVQsYUFBYyxDQUFDO01BQ3ZEWixFQUFFLENBQUNzQixhQUFhLENBQUVoQixPQUFPLEVBQUVjLGVBQWdCLENBQUM7TUFDNUMsQ0FBQ2YsTUFBTSxJQUFJa0IsT0FBTyxDQUFDQyxHQUFHLENBQUcsR0FBRWxCLE9BQVEsa0JBQWlCVSxhQUFjLEVBQUUsQ0FBQztJQUN2RSxDQUFDLE1BQ0k7TUFDSCxDQUFDWCxNQUFNLElBQUlrQixPQUFPLENBQUNDLEdBQUcsQ0FBRyxHQUFFbEIsT0FBUSxrQ0FBaUNTLFNBQVUsRUFBRSxDQUFDO0lBQ25GO0VBQ0Y7QUFDRixDQUFDIn0=