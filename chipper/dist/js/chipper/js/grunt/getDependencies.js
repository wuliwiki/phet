// Copyright 2017-2021, University of Colorado Boulder

/**
 * Creates an object that stores information about all dependencies (including their SHAs and current branches)
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const assert = require('assert');
const ChipperStringUtils = require('../common/ChipperStringUtils');
const execute = require('../../../perennial-alias/js/common/execute');
const getPhetLibs = require('./getPhetLibs');
const grunt = require('grunt');

/**
 * Returns an object in the dependencies.json format. Keys are repo names (or 'comment'). Repo keys have 'sha' and 'branch' fields.
 * @public
 *
 * @param {string} repo
 * @returns {Promise.<Object>} - In the dependencies.json format. JSON.stringify if you want to output to a file
 */
module.exports = async function (repo) {
  const packageObject = grunt.file.readJSON(`../${repo}/package.json`);
  const version = packageObject.version;

  // Accumulate dependencies for all brands
  const dependencies = getPhetLibs(repo).filter(dependency => dependency !== 'babel'); // Remove babel since it should be kept at master

  // We need to check dependencies for the main brand, so we can know what is guaranteed to be public
  const mainDependencies = getPhetLibs(repo, 'phet').filter(dependency => dependency !== 'babel');
  grunt.log.debug(`Scanning dependencies from:\n${dependencies.toString()}`);
  const dependenciesInfo = {
    comment: `# ${repo} ${version} ${new Date().toString()}`
  };
  for (const dependency of dependencies) {
    assert(!dependenciesInfo.dependency, `there was already a dependency named ${dependency}`);
    if (!grunt.file.exists(`../${dependency}`)) {
      if (mainDependencies.includes(dependency)) {
        throw new Error(`Dependency not found: ${dependency}`);
      }

      // NOTE NOTE NOTE: This error message is checked for on the perennial build side (it will fail the build). Do NOT change this without changing that.
      grunt.log.warn(`WARNING404: Skipping potentially non-public dependency ${dependency}`);
      continue;
    }
    let sha = null;
    let branch = null;
    try {
      sha = (await execute('git', ['rev-parse', 'HEAD'], `../${dependency}`)).trim();
      branch = (await execute('git', ['rev-parse', '--abbrev-ref', 'HEAD'], `../${dependency}`)).trim();
    } catch (e) {
      // We support repos that are not git repositories, see https://github.com/phetsims/chipper/issues/1011
      console.log(`Did not find git information for ${dependency}`);
    }
    grunt.log.debug(`${ChipperStringUtils.padString(dependency, 20) + branch} ${sha}`);
    dependenciesInfo[dependency] = {
      sha: sha,
      branch: branch
    };
  }
  return dependenciesInfo;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiQ2hpcHBlclN0cmluZ1V0aWxzIiwiZXhlY3V0ZSIsImdldFBoZXRMaWJzIiwiZ3J1bnQiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVwbyIsInBhY2thZ2VPYmplY3QiLCJmaWxlIiwicmVhZEpTT04iLCJ2ZXJzaW9uIiwiZGVwZW5kZW5jaWVzIiwiZmlsdGVyIiwiZGVwZW5kZW5jeSIsIm1haW5EZXBlbmRlbmNpZXMiLCJsb2ciLCJkZWJ1ZyIsInRvU3RyaW5nIiwiZGVwZW5kZW5jaWVzSW5mbyIsImNvbW1lbnQiLCJEYXRlIiwiZXhpc3RzIiwiaW5jbHVkZXMiLCJFcnJvciIsIndhcm4iLCJzaGEiLCJicmFuY2giLCJ0cmltIiwiZSIsImNvbnNvbGUiLCJwYWRTdHJpbmciXSwic291cmNlcyI6WyJnZXREZXBlbmRlbmNpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgYWxsIGRlcGVuZGVuY2llcyAoaW5jbHVkaW5nIHRoZWlyIFNIQXMgYW5kIGN1cnJlbnQgYnJhbmNoZXMpXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5cclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuY29uc3QgQ2hpcHBlclN0cmluZ1V0aWxzID0gcmVxdWlyZSggJy4uL2NvbW1vbi9DaGlwcGVyU3RyaW5nVXRpbHMnICk7XHJcbmNvbnN0IGV4ZWN1dGUgPSByZXF1aXJlKCAnLi4vLi4vLi4vcGVyZW5uaWFsLWFsaWFzL2pzL2NvbW1vbi9leGVjdXRlJyApO1xyXG5jb25zdCBnZXRQaGV0TGlicyA9IHJlcXVpcmUoICcuL2dldFBoZXRMaWJzJyApO1xyXG5jb25zdCBncnVudCA9IHJlcXVpcmUoICdncnVudCcgKTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBpbiB0aGUgZGVwZW5kZW5jaWVzLmpzb24gZm9ybWF0LiBLZXlzIGFyZSByZXBvIG5hbWVzIChvciAnY29tbWVudCcpLiBSZXBvIGtleXMgaGF2ZSAnc2hhJyBhbmQgJ2JyYW5jaCcgZmllbGRzLlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBvXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlLjxPYmplY3Q+fSAtIEluIHRoZSBkZXBlbmRlbmNpZXMuanNvbiBmb3JtYXQuIEpTT04uc3RyaW5naWZ5IGlmIHlvdSB3YW50IHRvIG91dHB1dCB0byBhIGZpbGVcclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgZnVuY3Rpb24oIHJlcG8gKSB7XHJcblxyXG4gIGNvbnN0IHBhY2thZ2VPYmplY3QgPSBncnVudC5maWxlLnJlYWRKU09OKCBgLi4vJHtyZXBvfS9wYWNrYWdlLmpzb25gICk7XHJcbiAgY29uc3QgdmVyc2lvbiA9IHBhY2thZ2VPYmplY3QudmVyc2lvbjtcclxuXHJcbiAgLy8gQWNjdW11bGF0ZSBkZXBlbmRlbmNpZXMgZm9yIGFsbCBicmFuZHNcclxuICBjb25zdCBkZXBlbmRlbmNpZXMgPSBnZXRQaGV0TGlicyggcmVwbyApLmZpbHRlciggZGVwZW5kZW5jeSA9PiBkZXBlbmRlbmN5ICE9PSAnYmFiZWwnICk7IC8vIFJlbW92ZSBiYWJlbCBzaW5jZSBpdCBzaG91bGQgYmUga2VwdCBhdCBtYXN0ZXJcclxuXHJcbiAgLy8gV2UgbmVlZCB0byBjaGVjayBkZXBlbmRlbmNpZXMgZm9yIHRoZSBtYWluIGJyYW5kLCBzbyB3ZSBjYW4ga25vdyB3aGF0IGlzIGd1YXJhbnRlZWQgdG8gYmUgcHVibGljXHJcbiAgY29uc3QgbWFpbkRlcGVuZGVuY2llcyA9IGdldFBoZXRMaWJzKCByZXBvLCAncGhldCcgKS5maWx0ZXIoIGRlcGVuZGVuY3kgPT4gZGVwZW5kZW5jeSAhPT0gJ2JhYmVsJyApO1xyXG5cclxuICBncnVudC5sb2cuZGVidWcoIGBTY2FubmluZyBkZXBlbmRlbmNpZXMgZnJvbTpcXG4ke2RlcGVuZGVuY2llcy50b1N0cmluZygpfWAgKTtcclxuXHJcbiAgY29uc3QgZGVwZW5kZW5jaWVzSW5mbyA9IHtcclxuICAgIGNvbW1lbnQ6IGAjICR7cmVwb30gJHt2ZXJzaW9ufSAke25ldyBEYXRlKCkudG9TdHJpbmcoKX1gXHJcbiAgfTtcclxuXHJcbiAgZm9yICggY29uc3QgZGVwZW5kZW5jeSBvZiBkZXBlbmRlbmNpZXMgKSB7XHJcbiAgICBhc3NlcnQoICFkZXBlbmRlbmNpZXNJbmZvLmRlcGVuZGVuY3ksIGB0aGVyZSB3YXMgYWxyZWFkeSBhIGRlcGVuZGVuY3kgbmFtZWQgJHtkZXBlbmRlbmN5fWAgKTtcclxuXHJcbiAgICBpZiAoICFncnVudC5maWxlLmV4aXN0cyggYC4uLyR7ZGVwZW5kZW5jeX1gICkgKSB7XHJcbiAgICAgIGlmICggbWFpbkRlcGVuZGVuY2llcy5pbmNsdWRlcyggZGVwZW5kZW5jeSApICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvciggYERlcGVuZGVuY3kgbm90IGZvdW5kOiAke2RlcGVuZGVuY3l9YCApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBOT1RFIE5PVEUgTk9URTogVGhpcyBlcnJvciBtZXNzYWdlIGlzIGNoZWNrZWQgZm9yIG9uIHRoZSBwZXJlbm5pYWwgYnVpbGQgc2lkZSAoaXQgd2lsbCBmYWlsIHRoZSBidWlsZCkuIERvIE5PVCBjaGFuZ2UgdGhpcyB3aXRob3V0IGNoYW5naW5nIHRoYXQuXHJcbiAgICAgIGdydW50LmxvZy53YXJuKCBgV0FSTklORzQwNDogU2tpcHBpbmcgcG90ZW50aWFsbHkgbm9uLXB1YmxpYyBkZXBlbmRlbmN5ICR7ZGVwZW5kZW5jeX1gICk7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzaGEgPSBudWxsO1xyXG4gICAgbGV0IGJyYW5jaCA9IG51bGw7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgc2hhID0gKCBhd2FpdCBleGVjdXRlKCAnZ2l0JywgWyAncmV2LXBhcnNlJywgJ0hFQUQnIF0sIGAuLi8ke2RlcGVuZGVuY3l9YCApICkudHJpbSgpO1xyXG4gICAgICBicmFuY2ggPSAoIGF3YWl0IGV4ZWN1dGUoICdnaXQnLCBbICdyZXYtcGFyc2UnLCAnLS1hYmJyZXYtcmVmJywgJ0hFQUQnIF0sIGAuLi8ke2RlcGVuZGVuY3l9YCApICkudHJpbSgpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2goIGUgKSB7XHJcbiAgICAgIC8vIFdlIHN1cHBvcnQgcmVwb3MgdGhhdCBhcmUgbm90IGdpdCByZXBvc2l0b3JpZXMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2hpcHBlci9pc3N1ZXMvMTAxMVxyXG4gICAgICBjb25zb2xlLmxvZyggYERpZCBub3QgZmluZCBnaXQgaW5mb3JtYXRpb24gZm9yICR7ZGVwZW5kZW5jeX1gICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ3J1bnQubG9nLmRlYnVnKCBgJHtDaGlwcGVyU3RyaW5nVXRpbHMucGFkU3RyaW5nKCBkZXBlbmRlbmN5LCAyMCApICsgYnJhbmNofSAke3NoYX1gICk7XHJcbiAgICBkZXBlbmRlbmNpZXNJbmZvWyBkZXBlbmRlbmN5IF0gPSB7IHNoYTogc2hhLCBicmFuY2g6IGJyYW5jaCB9O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRlcGVuZGVuY2llc0luZm87XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFFLFFBQVMsQ0FBQztBQUNsQyxNQUFNQyxrQkFBa0IsR0FBR0QsT0FBTyxDQUFFLDhCQUErQixDQUFDO0FBQ3BF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