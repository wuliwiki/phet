// Copyright 2017-2021, University of Colorado Boulder

/**
 * Combines all parts of a runnable's built file into one HTML file.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

// modules
const assert = require('assert');
const ChipperStringUtils = require('../common/ChipperStringUtils');
const getTitleStringKey = require('./getTitleStringKey');
const grunt = require('grunt');
const nodeHTMLEncoder = require('node-html-encoder'); // eslint-disable-line require-statement-match

/**
 * From a given set of config (including the JS and other required things), it creates an HTML file for a runnable.
 * @public
 *
 * @param {Object} config
 * @returns {string} - The HTML for the file.
 */
module.exports = function (config) {
  const encoder = new nodeHTMLEncoder.Encoder('entity');
  const {
    repo,
    // {string}
    stringMap,
    // {Object}, map[ locale ][ stringKey ] => {string}
    scripts,
    // {Array.<string>}
    locale,
    // {string}
    htmlHeader // {string}
  } = config;
  assert(typeof repo === 'string', 'Requires repo');
  assert(stringMap, 'Requires stringMap');
  assert(scripts, 'Requires scripts');
  assert(typeof locale === 'string', 'Requires locale');
  assert(typeof htmlHeader === 'string', 'Requires htmlHeader');
  const localizedTitle = stringMap[locale][getTitleStringKey(repo)];

  // Directory on the PhET website where the latest version of the sim lives
  const latestDir = `https://phet.colorado.edu/sims/html/${repo}/latest/`;
  return ChipperStringUtils.replacePlaceholders(grunt.file.read('../chipper/templates/sim.html'), {
    PHET_CARRIAGE_RETURN: '\r',
    PHET_SIM_TITLE: encoder.htmlEncode(localizedTitle),
    PHET_HTML_HEADER: htmlHeader,
    // wrap scripts in global check for IE
    PHET_SIM_SCRIPTS: scripts.map(script => `<script type="text/javascript">${script}</script>`).join('\n'),
    // metadata for Open Graph protocol, see phet-edmodo#2
    OG_TITLE: encoder.htmlEncode(localizedTitle),
    OG_URL: `${latestDir}${repo}_${locale}.html`,
    OG_IMAGE: `${latestDir}${repo}-600.png`
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiQ2hpcHBlclN0cmluZ1V0aWxzIiwiZ2V0VGl0bGVTdHJpbmdLZXkiLCJncnVudCIsIm5vZGVIVE1MRW5jb2RlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25maWciLCJlbmNvZGVyIiwiRW5jb2RlciIsInJlcG8iLCJzdHJpbmdNYXAiLCJzY3JpcHRzIiwibG9jYWxlIiwiaHRtbEhlYWRlciIsImxvY2FsaXplZFRpdGxlIiwibGF0ZXN0RGlyIiwicmVwbGFjZVBsYWNlaG9sZGVycyIsImZpbGUiLCJyZWFkIiwiUEhFVF9DQVJSSUFHRV9SRVRVUk4iLCJQSEVUX1NJTV9USVRMRSIsImh0bWxFbmNvZGUiLCJQSEVUX0hUTUxfSEVBREVSIiwiUEhFVF9TSU1fU0NSSVBUUyIsIm1hcCIsInNjcmlwdCIsImpvaW4iLCJPR19USVRMRSIsIk9HX1VSTCIsIk9HX0lNQUdFIl0sInNvdXJjZXMiOlsicGFja2FnZVJ1bm5hYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbWJpbmVzIGFsbCBwYXJ0cyBvZiBhIHJ1bm5hYmxlJ3MgYnVpbHQgZmlsZSBpbnRvIG9uZSBIVE1MIGZpbGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5cclxuLy8gbW9kdWxlc1xyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCAnYXNzZXJ0JyApO1xyXG5jb25zdCBDaGlwcGVyU3RyaW5nVXRpbHMgPSByZXF1aXJlKCAnLi4vY29tbW9uL0NoaXBwZXJTdHJpbmdVdGlscycgKTtcclxuY29uc3QgZ2V0VGl0bGVTdHJpbmdLZXkgPSByZXF1aXJlKCAnLi9nZXRUaXRsZVN0cmluZ0tleScgKTtcclxuY29uc3QgZ3J1bnQgPSByZXF1aXJlKCAnZ3J1bnQnICk7XHJcbmNvbnN0IG5vZGVIVE1MRW5jb2RlciA9IHJlcXVpcmUoICdub2RlLWh0bWwtZW5jb2RlcicgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLXN0YXRlbWVudC1tYXRjaFxyXG5cclxuLyoqXHJcbiAqIEZyb20gYSBnaXZlbiBzZXQgb2YgY29uZmlnIChpbmNsdWRpbmcgdGhlIEpTIGFuZCBvdGhlciByZXF1aXJlZCB0aGluZ3MpLCBpdCBjcmVhdGVzIGFuIEhUTUwgZmlsZSBmb3IgYSBydW5uYWJsZS5cclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIEhUTUwgZm9yIHRoZSBmaWxlLlxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggY29uZmlnICkge1xyXG5cclxuICBjb25zdCBlbmNvZGVyID0gbmV3IG5vZGVIVE1MRW5jb2Rlci5FbmNvZGVyKCAnZW50aXR5JyApO1xyXG5cclxuICBjb25zdCB7XHJcbiAgICByZXBvLCAvLyB7c3RyaW5nfVxyXG4gICAgc3RyaW5nTWFwLCAvLyB7T2JqZWN0fSwgbWFwWyBsb2NhbGUgXVsgc3RyaW5nS2V5IF0gPT4ge3N0cmluZ31cclxuICAgIHNjcmlwdHMsIC8vIHtBcnJheS48c3RyaW5nPn1cclxuICAgIGxvY2FsZSwgLy8ge3N0cmluZ31cclxuICAgIGh0bWxIZWFkZXIgLy8ge3N0cmluZ31cclxuICB9ID0gY29uZmlnO1xyXG4gIGFzc2VydCggdHlwZW9mIHJlcG8gPT09ICdzdHJpbmcnLCAnUmVxdWlyZXMgcmVwbycgKTtcclxuICBhc3NlcnQoIHN0cmluZ01hcCwgJ1JlcXVpcmVzIHN0cmluZ01hcCcgKTtcclxuICBhc3NlcnQoIHNjcmlwdHMsICdSZXF1aXJlcyBzY3JpcHRzJyApO1xyXG4gIGFzc2VydCggdHlwZW9mIGxvY2FsZSA9PT0gJ3N0cmluZycsICdSZXF1aXJlcyBsb2NhbGUnICk7XHJcbiAgYXNzZXJ0KCB0eXBlb2YgaHRtbEhlYWRlciA9PT0gJ3N0cmluZycsICdSZXF1aXJlcyBodG1sSGVhZGVyJyApO1xyXG5cclxuICBjb25zdCBsb2NhbGl6ZWRUaXRsZSA9IHN0cmluZ01hcFsgbG9jYWxlIF1bIGdldFRpdGxlU3RyaW5nS2V5KCByZXBvICkgXTtcclxuXHJcbiAgLy8gRGlyZWN0b3J5IG9uIHRoZSBQaEVUIHdlYnNpdGUgd2hlcmUgdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIHRoZSBzaW0gbGl2ZXNcclxuICBjb25zdCBsYXRlc3REaXIgPSBgaHR0cHM6Ly9waGV0LmNvbG9yYWRvLmVkdS9zaW1zL2h0bWwvJHtyZXBvfS9sYXRlc3QvYDtcclxuXHJcbiAgcmV0dXJuIENoaXBwZXJTdHJpbmdVdGlscy5yZXBsYWNlUGxhY2Vob2xkZXJzKCBncnVudC5maWxlLnJlYWQoICcuLi9jaGlwcGVyL3RlbXBsYXRlcy9zaW0uaHRtbCcgKSwge1xyXG4gICAgUEhFVF9DQVJSSUFHRV9SRVRVUk46ICdcXHInLFxyXG4gICAgUEhFVF9TSU1fVElUTEU6IGVuY29kZXIuaHRtbEVuY29kZSggbG9jYWxpemVkVGl0bGUgKSxcclxuICAgIFBIRVRfSFRNTF9IRUFERVI6IGh0bWxIZWFkZXIsXHJcblxyXG4gICAgLy8gd3JhcCBzY3JpcHRzIGluIGdsb2JhbCBjaGVjayBmb3IgSUVcclxuICAgIFBIRVRfU0lNX1NDUklQVFM6IHNjcmlwdHMubWFwKCBzY3JpcHQgPT4gYDxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPiR7c2NyaXB0fTwvc2NyaXB0PmAgKS5qb2luKCAnXFxuJyApLFxyXG5cclxuICAgIC8vIG1ldGFkYXRhIGZvciBPcGVuIEdyYXBoIHByb3RvY29sLCBzZWUgcGhldC1lZG1vZG8jMlxyXG4gICAgT0dfVElUTEU6IGVuY29kZXIuaHRtbEVuY29kZSggbG9jYWxpemVkVGl0bGUgKSxcclxuICAgIE9HX1VSTDogYCR7bGF0ZXN0RGlyfSR7cmVwb31fJHtsb2NhbGV9Lmh0bWxgLFxyXG4gICAgT0dfSU1BR0U6IGAke2xhdGVzdERpcn0ke3JlcG99LTYwMC5wbmdgXHJcbiAgfSApO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDbEMsTUFBTUMsa0JBQWtCLEdBQUdELE9BQU8sQ0FBRSw4QkFBK0IsQ0FBQztBQUNwRSxNQUFNRSxpQkFBaUIsR0FBR0YsT0FBTyxDQUFFLHFCQUFzQixDQUFDO0FBQzFELE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFFLE9BQVEsQ0FBQztBQUNoQyxNQUFNSSxlQUFlLEdBQUdKLE9BQU8sQ0FBRSxtQkFBb0IsQ0FBQyxDQUFDLENBQUM7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQVVDLE1BQU0sRUFBRztFQUVsQyxNQUFNQyxPQUFPLEdBQUcsSUFBSUosZUFBZSxDQUFDSyxPQUFPLENBQUUsUUFBUyxDQUFDO0VBRXZELE1BQU07SUFDSkMsSUFBSTtJQUFFO0lBQ05DLFNBQVM7SUFBRTtJQUNYQyxPQUFPO0lBQUU7SUFDVEMsTUFBTTtJQUFFO0lBQ1JDLFVBQVUsQ0FBQztFQUNiLENBQUMsR0FBR1AsTUFBTTtFQUNWUixNQUFNLENBQUUsT0FBT1csSUFBSSxLQUFLLFFBQVEsRUFBRSxlQUFnQixDQUFDO0VBQ25EWCxNQUFNLENBQUVZLFNBQVMsRUFBRSxvQkFBcUIsQ0FBQztFQUN6Q1osTUFBTSxDQUFFYSxPQUFPLEVBQUUsa0JBQW1CLENBQUM7RUFDckNiLE1BQU0sQ0FBRSxPQUFPYyxNQUFNLEtBQUssUUFBUSxFQUFFLGlCQUFrQixDQUFDO0VBQ3ZEZCxNQUFNLENBQUUsT0FBT2UsVUFBVSxLQUFLLFFBQVEsRUFBRSxxQkFBc0IsQ0FBQztFQUUvRCxNQUFNQyxjQUFjLEdBQUdKLFNBQVMsQ0FBRUUsTUFBTSxDQUFFLENBQUVYLGlCQUFpQixDQUFFUSxJQUFLLENBQUMsQ0FBRTs7RUFFdkU7RUFDQSxNQUFNTSxTQUFTLEdBQUksdUNBQXNDTixJQUFLLFVBQVM7RUFFdkUsT0FBT1Qsa0JBQWtCLENBQUNnQixtQkFBbUIsQ0FBRWQsS0FBSyxDQUFDZSxJQUFJLENBQUNDLElBQUksQ0FBRSwrQkFBZ0MsQ0FBQyxFQUFFO0lBQ2pHQyxvQkFBb0IsRUFBRSxJQUFJO0lBQzFCQyxjQUFjLEVBQUViLE9BQU8sQ0FBQ2MsVUFBVSxDQUFFUCxjQUFlLENBQUM7SUFDcERRLGdCQUFnQixFQUFFVCxVQUFVO0lBRTVCO0lBQ0FVLGdCQUFnQixFQUFFWixPQUFPLENBQUNhLEdBQUcsQ0FBRUMsTUFBTSxJQUFLLGtDQUFpQ0EsTUFBTyxXQUFXLENBQUMsQ0FBQ0MsSUFBSSxDQUFFLElBQUssQ0FBQztJQUUzRztJQUNBQyxRQUFRLEVBQUVwQixPQUFPLENBQUNjLFVBQVUsQ0FBRVAsY0FBZSxDQUFDO0lBQzlDYyxNQUFNLEVBQUcsR0FBRWIsU0FBVSxHQUFFTixJQUFLLElBQUdHLE1BQU8sT0FBTTtJQUM1Q2lCLFFBQVEsRUFBRyxHQUFFZCxTQUFVLEdBQUVOLElBQUs7RUFDaEMsQ0FBRSxDQUFDO0FBQ0wsQ0FBQyJ9