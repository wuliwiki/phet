// Copyright 2018-2021, University of Colorado Boulder

/**
 * Combines all parts of a runnable's built file into an XHTML structure (with separate files)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

// modules
const assert = require('assert');
const ChipperConstants = require('../common/ChipperConstants');
const ChipperStringUtils = require('../common/ChipperStringUtils');
const getTitleStringKey = require('./getTitleStringKey');
const grunt = require('grunt');
const nodeHTMLEncoder = require('node-html-encoder'); // eslint-disable-line require-statement-match

/**
 * From a given set of config (including the JS and other required things), it creates an XHTML structure.
 * @public
 *
 * @param {string} xhtmlDir
 * @param {Object} config
 * @returns {string} - The HTML for the file.
 */
module.exports = function (xhtmlDir, config) {
  const encoder = new nodeHTMLEncoder.Encoder('entity');
  const {
    repo,
    // {string}
    brand,
    // {string}
    stringMap,
    // {Object}, map[ locale ][ stringKey ] => {string}
    initializationScript,
    // {string} - separate from the rest of the scripts since it needs to be able to run in IE.
    scripts,
    // {Array.<string>}
    htmlHeader // {string}
  } = config;
  assert(typeof repo === 'string', 'Requires repo');
  assert(stringMap, 'Requires stringMap');
  assert(scripts, 'Requires scripts');
  assert(typeof htmlHeader === 'string', 'Requires htmlHeader');
  const localizedTitle = stringMap[ChipperConstants.FALLBACK_LOCALE][getTitleStringKey(repo)];
  const initializationScriptFilename = `${repo}_initialization_${brand}.js`;
  const script = scripts.join('\n');
  const scriptFilename = `${repo}_${brand}.js`;
  const xhtml = ChipperStringUtils.replacePlaceholders(grunt.file.read('../chipper/templates/sim.xhtml'), {
    PHET_SIM_TITLE: encoder.htmlEncode(localizedTitle),
    PHET_HTML_HEADER: htmlHeader,
    PHET_INITIALIZATION_SCRIPT: `<script type="text/javascript" src="${initializationScriptFilename}" charset="utf-8"></script>`,
    PHET_SIM_SCRIPTS: `<script type="text/javascript" src="${scriptFilename}" charset="utf-8"></script>`
  });
  grunt.file.write(`${xhtmlDir}/${repo}_all${brand === 'phet' ? '' : `_${brand}`}.xhtml`, xhtml);
  grunt.file.write(`${xhtmlDir}/${initializationScriptFilename}`, initializationScript);
  grunt.file.write(`${xhtmlDir}/${scriptFilename}`, script);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiQ2hpcHBlckNvbnN0YW50cyIsIkNoaXBwZXJTdHJpbmdVdGlscyIsImdldFRpdGxlU3RyaW5nS2V5IiwiZ3J1bnQiLCJub2RlSFRNTEVuY29kZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwieGh0bWxEaXIiLCJjb25maWciLCJlbmNvZGVyIiwiRW5jb2RlciIsInJlcG8iLCJicmFuZCIsInN0cmluZ01hcCIsImluaXRpYWxpemF0aW9uU2NyaXB0Iiwic2NyaXB0cyIsImh0bWxIZWFkZXIiLCJsb2NhbGl6ZWRUaXRsZSIsIkZBTExCQUNLX0xPQ0FMRSIsImluaXRpYWxpemF0aW9uU2NyaXB0RmlsZW5hbWUiLCJzY3JpcHQiLCJqb2luIiwic2NyaXB0RmlsZW5hbWUiLCJ4aHRtbCIsInJlcGxhY2VQbGFjZWhvbGRlcnMiLCJmaWxlIiwicmVhZCIsIlBIRVRfU0lNX1RJVExFIiwiaHRtbEVuY29kZSIsIlBIRVRfSFRNTF9IRUFERVIiLCJQSEVUX0lOSVRJQUxJWkFUSU9OX1NDUklQVCIsIlBIRVRfU0lNX1NDUklQVFMiLCJ3cml0ZSJdLCJzb3VyY2VzIjpbInBhY2thZ2VYSFRNTC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb21iaW5lcyBhbGwgcGFydHMgb2YgYSBydW5uYWJsZSdzIGJ1aWx0IGZpbGUgaW50byBhbiBYSFRNTCBzdHJ1Y3R1cmUgKHdpdGggc2VwYXJhdGUgZmlsZXMpXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5cclxuLy8gbW9kdWxlc1xyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCAnYXNzZXJ0JyApO1xyXG5jb25zdCBDaGlwcGVyQ29uc3RhbnRzID0gcmVxdWlyZSggJy4uL2NvbW1vbi9DaGlwcGVyQ29uc3RhbnRzJyApO1xyXG5jb25zdCBDaGlwcGVyU3RyaW5nVXRpbHMgPSByZXF1aXJlKCAnLi4vY29tbW9uL0NoaXBwZXJTdHJpbmdVdGlscycgKTtcclxuY29uc3QgZ2V0VGl0bGVTdHJpbmdLZXkgPSByZXF1aXJlKCAnLi9nZXRUaXRsZVN0cmluZ0tleScgKTtcclxuY29uc3QgZ3J1bnQgPSByZXF1aXJlKCAnZ3J1bnQnICk7XHJcbmNvbnN0IG5vZGVIVE1MRW5jb2RlciA9IHJlcXVpcmUoICdub2RlLWh0bWwtZW5jb2RlcicgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLXN0YXRlbWVudC1tYXRjaFxyXG5cclxuLyoqXHJcbiAqIEZyb20gYSBnaXZlbiBzZXQgb2YgY29uZmlnIChpbmNsdWRpbmcgdGhlIEpTIGFuZCBvdGhlciByZXF1aXJlZCB0aGluZ3MpLCBpdCBjcmVhdGVzIGFuIFhIVE1MIHN0cnVjdHVyZS5cclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30geGh0bWxEaXJcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIFRoZSBIVE1MIGZvciB0aGUgZmlsZS5cclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHhodG1sRGlyLCBjb25maWcgKSB7XHJcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBub2RlSFRNTEVuY29kZXIuRW5jb2RlciggJ2VudGl0eScgKTtcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgcmVwbywgLy8ge3N0cmluZ31cclxuICAgIGJyYW5kLCAvLyB7c3RyaW5nfVxyXG4gICAgc3RyaW5nTWFwLCAvLyB7T2JqZWN0fSwgbWFwWyBsb2NhbGUgXVsgc3RyaW5nS2V5IF0gPT4ge3N0cmluZ31cclxuICAgIGluaXRpYWxpemF0aW9uU2NyaXB0LCAvLyB7c3RyaW5nfSAtIHNlcGFyYXRlIGZyb20gdGhlIHJlc3Qgb2YgdGhlIHNjcmlwdHMgc2luY2UgaXQgbmVlZHMgdG8gYmUgYWJsZSB0byBydW4gaW4gSUUuXHJcbiAgICBzY3JpcHRzLCAvLyB7QXJyYXkuPHN0cmluZz59XHJcbiAgICBodG1sSGVhZGVyIC8vIHtzdHJpbmd9XHJcbiAgfSA9IGNvbmZpZztcclxuICBhc3NlcnQoIHR5cGVvZiByZXBvID09PSAnc3RyaW5nJywgJ1JlcXVpcmVzIHJlcG8nICk7XHJcbiAgYXNzZXJ0KCBzdHJpbmdNYXAsICdSZXF1aXJlcyBzdHJpbmdNYXAnICk7XHJcbiAgYXNzZXJ0KCBzY3JpcHRzLCAnUmVxdWlyZXMgc2NyaXB0cycgKTtcclxuICBhc3NlcnQoIHR5cGVvZiBodG1sSGVhZGVyID09PSAnc3RyaW5nJywgJ1JlcXVpcmVzIGh0bWxIZWFkZXInICk7XHJcblxyXG4gIGNvbnN0IGxvY2FsaXplZFRpdGxlID0gc3RyaW5nTWFwWyBDaGlwcGVyQ29uc3RhbnRzLkZBTExCQUNLX0xPQ0FMRSBdWyBnZXRUaXRsZVN0cmluZ0tleSggcmVwbyApIF07XHJcblxyXG4gIGNvbnN0IGluaXRpYWxpemF0aW9uU2NyaXB0RmlsZW5hbWUgPSBgJHtyZXBvfV9pbml0aWFsaXphdGlvbl8ke2JyYW5kfS5qc2A7XHJcblxyXG4gIGNvbnN0IHNjcmlwdCA9IHNjcmlwdHMuam9pbiggJ1xcbicgKTtcclxuICBjb25zdCBzY3JpcHRGaWxlbmFtZSA9IGAke3JlcG99XyR7YnJhbmR9LmpzYDtcclxuXHJcbiAgY29uc3QgeGh0bWwgPSBDaGlwcGVyU3RyaW5nVXRpbHMucmVwbGFjZVBsYWNlaG9sZGVycyggZ3J1bnQuZmlsZS5yZWFkKCAnLi4vY2hpcHBlci90ZW1wbGF0ZXMvc2ltLnhodG1sJyApLCB7XHJcbiAgICBQSEVUX1NJTV9USVRMRTogZW5jb2Rlci5odG1sRW5jb2RlKCBsb2NhbGl6ZWRUaXRsZSApLFxyXG4gICAgUEhFVF9IVE1MX0hFQURFUjogaHRtbEhlYWRlcixcclxuICAgIFBIRVRfSU5JVElBTElaQVRJT05fU0NSSVBUOiBgPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgc3JjPVwiJHtpbml0aWFsaXphdGlvblNjcmlwdEZpbGVuYW1lfVwiIGNoYXJzZXQ9XCJ1dGYtOFwiPjwvc2NyaXB0PmAsXHJcbiAgICBQSEVUX1NJTV9TQ1JJUFRTOiBgPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgc3JjPVwiJHtzY3JpcHRGaWxlbmFtZX1cIiBjaGFyc2V0PVwidXRmLThcIj48L3NjcmlwdD5gXHJcbiAgfSApO1xyXG4gIGdydW50LmZpbGUud3JpdGUoIGAke3hodG1sRGlyfS8ke3JlcG99X2FsbCR7YnJhbmQgPT09ICdwaGV0JyA/ICcnIDogYF8ke2JyYW5kfWB9LnhodG1sYCwgeGh0bWwgKTtcclxuICBncnVudC5maWxlLndyaXRlKCBgJHt4aHRtbERpcn0vJHtpbml0aWFsaXphdGlvblNjcmlwdEZpbGVuYW1lfWAsIGluaXRpYWxpemF0aW9uU2NyaXB0ICk7XHJcbiAgZ3J1bnQuZmlsZS53cml0ZSggYCR7eGh0bWxEaXJ9LyR7c2NyaXB0RmlsZW5hbWV9YCwgc2NyaXB0ICk7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFFLFFBQVMsQ0FBQztBQUNsQyxNQUFNQyxnQkFBZ0IsR0FBR0QsT0FBTyxDQUFFLDRCQUE2QixDQUFDO0FBQ2hFLE1BQU1FLGtCQUFrQixHQUFHRixPQUFPLENBQUUsOEJBQStCLENBQUM7QUFDcEUsTUFBTUcsaUJBQWlCLEdBQUdILE9BQU8sQ0FBRSxxQkFBc0IsQ0FBQztBQUMxRCxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBRSxPQUFRLENBQUM7QUFDaEMsTUFBTUssZUFBZSxHQUFHTCxPQUFPLENBQUUsbUJBQW9CLENBQUMsQ0FBQyxDQUFDOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FNLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQVVDLFFBQVEsRUFBRUMsTUFBTSxFQUFHO0VBQzVDLE1BQU1DLE9BQU8sR0FBRyxJQUFJTCxlQUFlLENBQUNNLE9BQU8sQ0FBRSxRQUFTLENBQUM7RUFFdkQsTUFBTTtJQUNKQyxJQUFJO0lBQUU7SUFDTkMsS0FBSztJQUFFO0lBQ1BDLFNBQVM7SUFBRTtJQUNYQyxvQkFBb0I7SUFBRTtJQUN0QkMsT0FBTztJQUFFO0lBQ1RDLFVBQVUsQ0FBQztFQUNiLENBQUMsR0FBR1IsTUFBTTtFQUNWVixNQUFNLENBQUUsT0FBT2EsSUFBSSxLQUFLLFFBQVEsRUFBRSxlQUFnQixDQUFDO0VBQ25EYixNQUFNLENBQUVlLFNBQVMsRUFBRSxvQkFBcUIsQ0FBQztFQUN6Q2YsTUFBTSxDQUFFaUIsT0FBTyxFQUFFLGtCQUFtQixDQUFDO0VBQ3JDakIsTUFBTSxDQUFFLE9BQU9rQixVQUFVLEtBQUssUUFBUSxFQUFFLHFCQUFzQixDQUFDO0VBRS9ELE1BQU1DLGNBQWMsR0FBR0osU0FBUyxDQUFFYixnQkFBZ0IsQ0FBQ2tCLGVBQWUsQ0FBRSxDQUFFaEIsaUJBQWlCLENBQUVTLElBQUssQ0FBQyxDQUFFO0VBRWpHLE1BQU1RLDRCQUE0QixHQUFJLEdBQUVSLElBQUssbUJBQWtCQyxLQUFNLEtBQUk7RUFFekUsTUFBTVEsTUFBTSxHQUFHTCxPQUFPLENBQUNNLElBQUksQ0FBRSxJQUFLLENBQUM7RUFDbkMsTUFBTUMsY0FBYyxHQUFJLEdBQUVYLElBQUssSUFBR0MsS0FBTSxLQUFJO0VBRTVDLE1BQU1XLEtBQUssR0FBR3RCLGtCQUFrQixDQUFDdUIsbUJBQW1CLENBQUVyQixLQUFLLENBQUNzQixJQUFJLENBQUNDLElBQUksQ0FBRSxnQ0FBaUMsQ0FBQyxFQUFFO0lBQ3pHQyxjQUFjLEVBQUVsQixPQUFPLENBQUNtQixVQUFVLENBQUVYLGNBQWUsQ0FBQztJQUNwRFksZ0JBQWdCLEVBQUViLFVBQVU7SUFDNUJjLDBCQUEwQixFQUFHLHVDQUFzQ1gsNEJBQTZCLDZCQUE0QjtJQUM1SFksZ0JBQWdCLEVBQUcsdUNBQXNDVCxjQUFlO0VBQzFFLENBQUUsQ0FBQztFQUNIbkIsS0FBSyxDQUFDc0IsSUFBSSxDQUFDTyxLQUFLLENBQUcsR0FBRXpCLFFBQVMsSUFBR0ksSUFBSyxPQUFNQyxLQUFLLEtBQUssTUFBTSxHQUFHLEVBQUUsR0FBSSxJQUFHQSxLQUFNLEVBQUUsUUFBTyxFQUFFVyxLQUFNLENBQUM7RUFDaEdwQixLQUFLLENBQUNzQixJQUFJLENBQUNPLEtBQUssQ0FBRyxHQUFFekIsUUFBUyxJQUFHWSw0QkFBNkIsRUFBQyxFQUFFTCxvQkFBcUIsQ0FBQztFQUN2RlgsS0FBSyxDQUFDc0IsSUFBSSxDQUFDTyxLQUFLLENBQUcsR0FBRXpCLFFBQVMsSUFBR2UsY0FBZSxFQUFDLEVBQUVGLE1BQU8sQ0FBQztBQUM3RCxDQUFDIn0=