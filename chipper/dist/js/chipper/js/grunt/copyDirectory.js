// Copyright 2016-2023, University of Colorado Boulder

/**
 * Copy a directory and all of its contents recursively
 * @author Sam Reid (PhET Interactive Simulations)
 */

const _ = require('lodash');
const assert = require('assert');
const grunt = require('grunt');
const minify = require('./minify');

/**
 * @param {string} src - the source directory
 * @param {string} dst - the destination directory
 * @param {function} [filter] - rules for filtering files.  If returns falsy, then the file will be copied directly (helps with images)
 * @param {Object} [options]
 */
module.exports = function (src, dst, filter, options) {
  options = _.assignIn({
    failOnExistingFiles: false,
    exclude: [],
    // list to exclude
    minifyJS: false,
    minifyOptions: {},
    licenseToPrepend: ''
  }, options);

  // Copy built sim files (assuming they exist from a prior grunt command)
  grunt.file.recurse(src, (abspath, rootdir, subdir, filename) => {
    let isExcludedDir = false;
    subdir && subdir.split('/').forEach(pathPart => {
      // Exclude all directories that are in the excluded list
      if (options.exclude.indexOf(pathPart) >= 0) {
        isExcludedDir = true;
      }
    });

    // Exit out if the file is excluded or if it is in a excluded dir.
    if (isExcludedDir || options.exclude.indexOf(filename) >= 0) {
      return;
    }
    const contents = grunt.file.read(abspath);
    const dstPath = subdir ? `${dst}/${subdir}/${filename}` : `${dst}/${filename}`;
    if (options.failOnExistingFiles && grunt.file.exists(dstPath)) {
      assert && assert(false, 'file existed already');
    }
    let filteredContents = filter && filter(abspath, contents);

    // Minify the file if it is javascript code
    if (options.minifyJS && filename.endsWith('.js') && abspath.indexOf('chipper/templates/') < 0) {
      const toBeMinified = filteredContents ? filteredContents : contents;
      filteredContents = minify(toBeMinified, options.minifyOptions);

      // Only add the license to the javascript code
      filteredContents = options.licenseToPrepend + filteredContents;
    }
    if (filteredContents) {
      grunt.file.write(dstPath, filteredContents);
    } else {
      grunt.file.copy(abspath, dstPath);
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImFzc2VydCIsImdydW50IiwibWluaWZ5IiwibW9kdWxlIiwiZXhwb3J0cyIsInNyYyIsImRzdCIsImZpbHRlciIsIm9wdGlvbnMiLCJhc3NpZ25JbiIsImZhaWxPbkV4aXN0aW5nRmlsZXMiLCJleGNsdWRlIiwibWluaWZ5SlMiLCJtaW5pZnlPcHRpb25zIiwibGljZW5zZVRvUHJlcGVuZCIsImZpbGUiLCJyZWN1cnNlIiwiYWJzcGF0aCIsInJvb3RkaXIiLCJzdWJkaXIiLCJmaWxlbmFtZSIsImlzRXhjbHVkZWREaXIiLCJzcGxpdCIsImZvckVhY2giLCJwYXRoUGFydCIsImluZGV4T2YiLCJjb250ZW50cyIsInJlYWQiLCJkc3RQYXRoIiwiZXhpc3RzIiwiZmlsdGVyZWRDb250ZW50cyIsImVuZHNXaXRoIiwidG9CZU1pbmlmaWVkIiwid3JpdGUiLCJjb3B5Il0sInNvdXJjZXMiOlsiY29weURpcmVjdG9yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb3B5IGEgZGlyZWN0b3J5IGFuZCBhbGwgb2YgaXRzIGNvbnRlbnRzIHJlY3Vyc2l2ZWx5XHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuXHJcbmNvbnN0IF8gPSByZXF1aXJlKCAnbG9kYXNoJyApO1xyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCAnYXNzZXJ0JyApO1xyXG5jb25zdCBncnVudCA9IHJlcXVpcmUoICdncnVudCcgKTtcclxuY29uc3QgbWluaWZ5ID0gcmVxdWlyZSggJy4vbWluaWZ5JyApO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgLSB0aGUgc291cmNlIGRpcmVjdG9yeVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZHN0IC0gdGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZmlsdGVyXSAtIHJ1bGVzIGZvciBmaWx0ZXJpbmcgZmlsZXMuICBJZiByZXR1cm5zIGZhbHN5LCB0aGVuIHRoZSBmaWxlIHdpbGwgYmUgY29waWVkIGRpcmVjdGx5IChoZWxwcyB3aXRoIGltYWdlcylcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggc3JjLCBkc3QsIGZpbHRlciwgb3B0aW9ucyApIHtcclxuXHJcbiAgb3B0aW9ucyA9IF8uYXNzaWduSW4oIHtcclxuICAgIGZhaWxPbkV4aXN0aW5nRmlsZXM6IGZhbHNlLFxyXG4gICAgZXhjbHVkZTogW10sIC8vIGxpc3QgdG8gZXhjbHVkZVxyXG4gICAgbWluaWZ5SlM6IGZhbHNlLFxyXG4gICAgbWluaWZ5T3B0aW9uczoge30sXHJcbiAgICBsaWNlbnNlVG9QcmVwZW5kOiAnJ1xyXG4gIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgLy8gQ29weSBidWlsdCBzaW0gZmlsZXMgKGFzc3VtaW5nIHRoZXkgZXhpc3QgZnJvbSBhIHByaW9yIGdydW50IGNvbW1hbmQpXHJcbiAgZ3J1bnQuZmlsZS5yZWN1cnNlKCBzcmMsICggYWJzcGF0aCwgcm9vdGRpciwgc3ViZGlyLCBmaWxlbmFtZSApID0+IHtcclxuXHJcblxyXG4gICAgbGV0IGlzRXhjbHVkZWREaXIgPSBmYWxzZTtcclxuICAgIHN1YmRpciAmJiBzdWJkaXIuc3BsaXQoICcvJyApLmZvckVhY2goIHBhdGhQYXJ0ID0+IHtcclxuXHJcbiAgICAgIC8vIEV4Y2x1ZGUgYWxsIGRpcmVjdG9yaWVzIHRoYXQgYXJlIGluIHRoZSBleGNsdWRlZCBsaXN0XHJcbiAgICAgIGlmICggb3B0aW9ucy5leGNsdWRlLmluZGV4T2YoIHBhdGhQYXJ0ICkgPj0gMCApIHtcclxuICAgICAgICBpc0V4Y2x1ZGVkRGlyID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEV4aXQgb3V0IGlmIHRoZSBmaWxlIGlzIGV4Y2x1ZGVkIG9yIGlmIGl0IGlzIGluIGEgZXhjbHVkZWQgZGlyLlxyXG4gICAgaWYgKCBpc0V4Y2x1ZGVkRGlyIHx8IG9wdGlvbnMuZXhjbHVkZS5pbmRleE9mKCBmaWxlbmFtZSApID49IDAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250ZW50cyA9IGdydW50LmZpbGUucmVhZCggYWJzcGF0aCApO1xyXG5cclxuICAgIGNvbnN0IGRzdFBhdGggPSBzdWJkaXIgPyAoIGAke2RzdH0vJHtzdWJkaXJ9LyR7ZmlsZW5hbWV9YCApIDogKCBgJHtkc3R9LyR7ZmlsZW5hbWV9YCApO1xyXG5cclxuICAgIGlmICggb3B0aW9ucy5mYWlsT25FeGlzdGluZ0ZpbGVzICYmIGdydW50LmZpbGUuZXhpc3RzKCBkc3RQYXRoICkgKSB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZmlsZSBleGlzdGVkIGFscmVhZHknICk7XHJcbiAgICB9XHJcbiAgICBsZXQgZmlsdGVyZWRDb250ZW50cyA9IGZpbHRlciAmJiBmaWx0ZXIoIGFic3BhdGgsIGNvbnRlbnRzICk7XHJcblxyXG4gICAgLy8gTWluaWZ5IHRoZSBmaWxlIGlmIGl0IGlzIGphdmFzY3JpcHQgY29kZVxyXG4gICAgaWYgKCBvcHRpb25zLm1pbmlmeUpTICYmIGZpbGVuYW1lLmVuZHNXaXRoKCAnLmpzJyApICYmIGFic3BhdGguaW5kZXhPZiggJ2NoaXBwZXIvdGVtcGxhdGVzLycgKSA8IDAgKSB7XHJcbiAgICAgIGNvbnN0IHRvQmVNaW5pZmllZCA9IGZpbHRlcmVkQ29udGVudHMgPyBmaWx0ZXJlZENvbnRlbnRzIDogY29udGVudHM7XHJcbiAgICAgIGZpbHRlcmVkQ29udGVudHMgPSBtaW5pZnkoIHRvQmVNaW5pZmllZCwgb3B0aW9ucy5taW5pZnlPcHRpb25zICk7XHJcblxyXG4gICAgICAvLyBPbmx5IGFkZCB0aGUgbGljZW5zZSB0byB0aGUgamF2YXNjcmlwdCBjb2RlXHJcbiAgICAgIGZpbHRlcmVkQ29udGVudHMgPSBvcHRpb25zLmxpY2Vuc2VUb1ByZXBlbmQgKyBmaWx0ZXJlZENvbnRlbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggZmlsdGVyZWRDb250ZW50cyApIHtcclxuICAgICAgZ3J1bnQuZmlsZS53cml0ZSggZHN0UGF0aCwgZmlsdGVyZWRDb250ZW50cyApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGdydW50LmZpbGUuY29weSggYWJzcGF0aCwgZHN0UGF0aCApO1xyXG4gICAgfVxyXG4gIH0gKTtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDN0IsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUUsUUFBUyxDQUFDO0FBQ2xDLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFFLE9BQVEsQ0FBQztBQUNoQyxNQUFNRyxNQUFNLEdBQUdILE9BQU8sQ0FBRSxVQUFXLENBQUM7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUc7RUFFckRBLE9BQU8sR0FBR1YsQ0FBQyxDQUFDVyxRQUFRLENBQUU7SUFDcEJDLG1CQUFtQixFQUFFLEtBQUs7SUFDMUJDLE9BQU8sRUFBRSxFQUFFO0lBQUU7SUFDYkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUNqQkMsZ0JBQWdCLEVBQUU7RUFDcEIsQ0FBQyxFQUFFTixPQUFRLENBQUM7O0VBRVo7RUFDQVAsS0FBSyxDQUFDYyxJQUFJLENBQUNDLE9BQU8sQ0FBRVgsR0FBRyxFQUFFLENBQUVZLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsS0FBTTtJQUdqRSxJQUFJQyxhQUFhLEdBQUcsS0FBSztJQUN6QkYsTUFBTSxJQUFJQSxNQUFNLENBQUNHLEtBQUssQ0FBRSxHQUFJLENBQUMsQ0FBQ0MsT0FBTyxDQUFFQyxRQUFRLElBQUk7TUFFakQ7TUFDQSxJQUFLaEIsT0FBTyxDQUFDRyxPQUFPLENBQUNjLE9BQU8sQ0FBRUQsUUFBUyxDQUFDLElBQUksQ0FBQyxFQUFHO1FBQzlDSCxhQUFhLEdBQUcsSUFBSTtNQUN0QjtJQUNGLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUtBLGFBQWEsSUFBSWIsT0FBTyxDQUFDRyxPQUFPLENBQUNjLE9BQU8sQ0FBRUwsUUFBUyxDQUFDLElBQUksQ0FBQyxFQUFHO01BQy9EO0lBQ0Y7SUFFQSxNQUFNTSxRQUFRLEdBQUd6QixLQUFLLENBQUNjLElBQUksQ0FBQ1ksSUFBSSxDQUFFVixPQUFRLENBQUM7SUFFM0MsTUFBTVcsT0FBTyxHQUFHVCxNQUFNLEdBQU0sR0FBRWIsR0FBSSxJQUFHYSxNQUFPLElBQUdDLFFBQVMsRUFBQyxHQUFRLEdBQUVkLEdBQUksSUFBR2MsUUFBUyxFQUFHO0lBRXRGLElBQUtaLE9BQU8sQ0FBQ0UsbUJBQW1CLElBQUlULEtBQUssQ0FBQ2MsSUFBSSxDQUFDYyxNQUFNLENBQUVELE9BQVEsQ0FBQyxFQUFHO01BQ2pFNUIsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLHNCQUF1QixDQUFDO0lBQ25EO0lBQ0EsSUFBSThCLGdCQUFnQixHQUFHdkIsTUFBTSxJQUFJQSxNQUFNLENBQUVVLE9BQU8sRUFBRVMsUUFBUyxDQUFDOztJQUU1RDtJQUNBLElBQUtsQixPQUFPLENBQUNJLFFBQVEsSUFBSVEsUUFBUSxDQUFDVyxRQUFRLENBQUUsS0FBTSxDQUFDLElBQUlkLE9BQU8sQ0FBQ1EsT0FBTyxDQUFFLG9CQUFxQixDQUFDLEdBQUcsQ0FBQyxFQUFHO01BQ25HLE1BQU1PLFlBQVksR0FBR0YsZ0JBQWdCLEdBQUdBLGdCQUFnQixHQUFHSixRQUFRO01BQ25FSSxnQkFBZ0IsR0FBRzVCLE1BQU0sQ0FBRThCLFlBQVksRUFBRXhCLE9BQU8sQ0FBQ0ssYUFBYyxDQUFDOztNQUVoRTtNQUNBaUIsZ0JBQWdCLEdBQUd0QixPQUFPLENBQUNNLGdCQUFnQixHQUFHZ0IsZ0JBQWdCO0lBQ2hFO0lBRUEsSUFBS0EsZ0JBQWdCLEVBQUc7TUFDdEI3QixLQUFLLENBQUNjLElBQUksQ0FBQ2tCLEtBQUssQ0FBRUwsT0FBTyxFQUFFRSxnQkFBaUIsQ0FBQztJQUMvQyxDQUFDLE1BQ0k7TUFDSDdCLEtBQUssQ0FBQ2MsSUFBSSxDQUFDbUIsSUFBSSxDQUFFakIsT0FBTyxFQUFFVyxPQUFRLENBQUM7SUFDckM7RUFDRixDQUFFLENBQUM7QUFDTCxDQUFDIn0=