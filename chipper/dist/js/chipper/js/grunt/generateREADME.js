// Copyright 2015-2022, University of Colorado Boulder

/**
 * This grunt task generates the README.md file for a simulation.
 * Placeholders in a template file are replaced with values specific to the simulation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

const ChipperStringUtils = require('../common/ChipperStringUtils');
const fixEOL = require('./fixEOL');
const getPhetLibs = require('./getPhetLibs');
const getTitleStringKey = require('./getTitleStringKey');
const writeFileAndGitAdd = require('../../../perennial-alias/js/common/writeFileAndGitAdd');
const grunt = require('grunt');

/**
 * @param {string} repo - name of the repository
 * @param {boolean} published - has the sim been published?
 */
module.exports = async function (repo, published) {
  // Read the title from the English strings file.
  const simTitleStringKey = getTitleStringKey(repo);
  const strings = grunt.file.readJSON(`../${repo}/${repo}-strings_en.json`);
  const titleKey = simTitleStringKey.split('/').pop(); // eg. 'EXAMPLE_SIM/example-sim.title' -> 'example-sim.title'
  const title = strings[titleKey].value;
  const phetLibs = getPhetLibs(repo, 'phet');
  phetLibs.sort();

  // Commands for cloning all required repositories
  const cloneCommands = phetLibs.map(phetLib => {
    return phetLib === 'perennial-alias' ? 'git clone https://github.com/phetsims/perennial.git perennial-alias' : `git clone https://github.com/phetsims/${phetLib}.git`;
  }).join('\n');

  // Read the template.
  const templateFile = published ? 'README-published.md' : 'README-unpublished.md';
  let readme = grunt.file.read(`../chipper/templates/${templateFile}`);

  // Replace placeholders in the template.
  readme = ChipperStringUtils.replaceAll(readme, '{{REPOSITORY}}', repo);
  readme = ChipperStringUtils.replaceAll(readme, '{{TITLE}}', title);
  readme = ChipperStringUtils.replaceAll(readme, '{{CLONE_COMMANDS}}', cloneCommands);

  // Write to the repository's root directory.
  await writeFileAndGitAdd(repo, 'README.md', fixEOL(readme));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGlwcGVyU3RyaW5nVXRpbHMiLCJyZXF1aXJlIiwiZml4RU9MIiwiZ2V0UGhldExpYnMiLCJnZXRUaXRsZVN0cmluZ0tleSIsIndyaXRlRmlsZUFuZEdpdEFkZCIsImdydW50IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcG8iLCJwdWJsaXNoZWQiLCJzaW1UaXRsZVN0cmluZ0tleSIsInN0cmluZ3MiLCJmaWxlIiwicmVhZEpTT04iLCJ0aXRsZUtleSIsInNwbGl0IiwicG9wIiwidGl0bGUiLCJ2YWx1ZSIsInBoZXRMaWJzIiwic29ydCIsImNsb25lQ29tbWFuZHMiLCJtYXAiLCJwaGV0TGliIiwiam9pbiIsInRlbXBsYXRlRmlsZSIsInJlYWRtZSIsInJlYWQiLCJyZXBsYWNlQWxsIl0sInNvdXJjZXMiOlsiZ2VuZXJhdGVSRUFETUUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBncnVudCB0YXNrIGdlbmVyYXRlcyB0aGUgUkVBRE1FLm1kIGZpbGUgZm9yIGEgc2ltdWxhdGlvbi5cclxuICogUGxhY2Vob2xkZXJzIGluIGEgdGVtcGxhdGUgZmlsZSBhcmUgcmVwbGFjZWQgd2l0aCB2YWx1ZXMgc3BlY2lmaWMgdG8gdGhlIHNpbXVsYXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuXHJcbmNvbnN0IENoaXBwZXJTdHJpbmdVdGlscyA9IHJlcXVpcmUoICcuLi9jb21tb24vQ2hpcHBlclN0cmluZ1V0aWxzJyApO1xyXG5jb25zdCBmaXhFT0wgPSByZXF1aXJlKCAnLi9maXhFT0wnICk7XHJcbmNvbnN0IGdldFBoZXRMaWJzID0gcmVxdWlyZSggJy4vZ2V0UGhldExpYnMnICk7XHJcbmNvbnN0IGdldFRpdGxlU3RyaW5nS2V5ID0gcmVxdWlyZSggJy4vZ2V0VGl0bGVTdHJpbmdLZXknICk7XHJcbmNvbnN0IHdyaXRlRmlsZUFuZEdpdEFkZCA9IHJlcXVpcmUoICcuLi8uLi8uLi9wZXJlbm5pYWwtYWxpYXMvanMvY29tbW9uL3dyaXRlRmlsZUFuZEdpdEFkZCcgKTtcclxuY29uc3QgZ3J1bnQgPSByZXF1aXJlKCAnZ3J1bnQnICk7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcG8gLSBuYW1lIG9mIHRoZSByZXBvc2l0b3J5XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcHVibGlzaGVkIC0gaGFzIHRoZSBzaW0gYmVlbiBwdWJsaXNoZWQ/XHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uKCByZXBvLCBwdWJsaXNoZWQgKSB7XHJcblxyXG4gIC8vIFJlYWQgdGhlIHRpdGxlIGZyb20gdGhlIEVuZ2xpc2ggc3RyaW5ncyBmaWxlLlxyXG4gIGNvbnN0IHNpbVRpdGxlU3RyaW5nS2V5ID0gZ2V0VGl0bGVTdHJpbmdLZXkoIHJlcG8gKTtcclxuICBjb25zdCBzdHJpbmdzID0gZ3J1bnQuZmlsZS5yZWFkSlNPTiggYC4uLyR7cmVwb30vJHtyZXBvfS1zdHJpbmdzX2VuLmpzb25gICk7XHJcbiAgY29uc3QgdGl0bGVLZXkgPSBzaW1UaXRsZVN0cmluZ0tleS5zcGxpdCggJy8nICkucG9wKCk7IC8vIGVnLiAnRVhBTVBMRV9TSU0vZXhhbXBsZS1zaW0udGl0bGUnIC0+ICdleGFtcGxlLXNpbS50aXRsZSdcclxuICBjb25zdCB0aXRsZSA9IHN0cmluZ3NbIHRpdGxlS2V5IF0udmFsdWU7XHJcbiAgY29uc3QgcGhldExpYnMgPSBnZXRQaGV0TGlicyggcmVwbywgJ3BoZXQnICk7XHJcblxyXG4gIHBoZXRMaWJzLnNvcnQoKTtcclxuXHJcbiAgLy8gQ29tbWFuZHMgZm9yIGNsb25pbmcgYWxsIHJlcXVpcmVkIHJlcG9zaXRvcmllc1xyXG4gIGNvbnN0IGNsb25lQ29tbWFuZHMgPSBwaGV0TGlicy5tYXAoIHBoZXRMaWIgPT4ge1xyXG5cclxuICAgIHJldHVybiBwaGV0TGliID09PSAncGVyZW5uaWFsLWFsaWFzJyA/XHJcbiAgICAgICAgICAgJ2dpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsLmdpdCBwZXJlbm5pYWwtYWxpYXMnIDpcclxuICAgICAgICAgICBgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy8ke3BoZXRMaWJ9LmdpdGA7XHJcbiAgfSApLmpvaW4oICdcXG4nICk7XHJcblxyXG4gIC8vIFJlYWQgdGhlIHRlbXBsYXRlLlxyXG4gIGNvbnN0IHRlbXBsYXRlRmlsZSA9IHB1Ymxpc2hlZCA/ICdSRUFETUUtcHVibGlzaGVkLm1kJyA6ICdSRUFETUUtdW5wdWJsaXNoZWQubWQnO1xyXG4gIGxldCByZWFkbWUgPSBncnVudC5maWxlLnJlYWQoIGAuLi9jaGlwcGVyL3RlbXBsYXRlcy8ke3RlbXBsYXRlRmlsZX1gICk7XHJcblxyXG4gIC8vIFJlcGxhY2UgcGxhY2Vob2xkZXJzIGluIHRoZSB0ZW1wbGF0ZS5cclxuICByZWFkbWUgPSBDaGlwcGVyU3RyaW5nVXRpbHMucmVwbGFjZUFsbCggcmVhZG1lLCAne3tSRVBPU0lUT1JZfX0nLCByZXBvICk7XHJcbiAgcmVhZG1lID0gQ2hpcHBlclN0cmluZ1V0aWxzLnJlcGxhY2VBbGwoIHJlYWRtZSwgJ3t7VElUTEV9fScsIHRpdGxlICk7XHJcbiAgcmVhZG1lID0gQ2hpcHBlclN0cmluZ1V0aWxzLnJlcGxhY2VBbGwoIHJlYWRtZSwgJ3t7Q0xPTkVfQ09NTUFORFN9fScsIGNsb25lQ29tbWFuZHMgKTtcclxuXHJcbiAgLy8gV3JpdGUgdG8gdGhlIHJlcG9zaXRvcnkncyByb290IGRpcmVjdG9yeS5cclxuICBhd2FpdCB3cml0ZUZpbGVBbmRHaXRBZGQoIHJlcG8sICdSRUFETUUubWQnLCBmaXhFT0woIHJlYWRtZSApICk7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsTUFBTUEsa0JBQWtCLEdBQUdDLE9BQU8sQ0FBRSw4QkFBK0IsQ0FBQztBQUNwRSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBRSxVQUFXLENBQUM7QUFDcEMsTUFBTUUsV0FBVyxHQUFHRixPQUFPLENBQUUsZUFBZ0IsQ0FBQztBQUM5QyxNQUFNRyxpQkFBaUIsR0FBR0gsT0FBTyxDQUFFLHFCQUFzQixDQUFDO0FBQzFELE1BQU1JLGtCQUFrQixHQUFHSixPQUFPLENBQUUsdURBQXdELENBQUM7QUFDN0YsTUFBTUssS0FBSyxHQUFHTCxPQUFPLENBQUUsT0FBUSxDQUFDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBTSxNQUFNLENBQUNDLE9BQU8sR0FBRyxnQkFBZ0JDLElBQUksRUFBRUMsU0FBUyxFQUFHO0VBRWpEO0VBQ0EsTUFBTUMsaUJBQWlCLEdBQUdQLGlCQUFpQixDQUFFSyxJQUFLLENBQUM7RUFDbkQsTUFBTUcsT0FBTyxHQUFHTixLQUFLLENBQUNPLElBQUksQ0FBQ0MsUUFBUSxDQUFHLE1BQUtMLElBQUssSUFBR0EsSUFBSyxrQkFBa0IsQ0FBQztFQUMzRSxNQUFNTSxRQUFRLEdBQUdKLGlCQUFpQixDQUFDSyxLQUFLLENBQUUsR0FBSSxDQUFDLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN2RCxNQUFNQyxLQUFLLEdBQUdOLE9BQU8sQ0FBRUcsUUFBUSxDQUFFLENBQUNJLEtBQUs7RUFDdkMsTUFBTUMsUUFBUSxHQUFHakIsV0FBVyxDQUFFTSxJQUFJLEVBQUUsTUFBTyxDQUFDO0VBRTVDVyxRQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDOztFQUVmO0VBQ0EsTUFBTUMsYUFBYSxHQUFHRixRQUFRLENBQUNHLEdBQUcsQ0FBRUMsT0FBTyxJQUFJO0lBRTdDLE9BQU9BLE9BQU8sS0FBSyxpQkFBaUIsR0FDN0IscUVBQXFFLEdBQ3BFLHlDQUF3Q0EsT0FBUSxNQUFLO0VBQy9ELENBQUUsQ0FBQyxDQUFDQyxJQUFJLENBQUUsSUFBSyxDQUFDOztFQUVoQjtFQUNBLE1BQU1DLFlBQVksR0FBR2hCLFNBQVMsR0FBRyxxQkFBcUIsR0FBRyx1QkFBdUI7RUFDaEYsSUFBSWlCLE1BQU0sR0FBR3JCLEtBQUssQ0FBQ08sSUFBSSxDQUFDZSxJQUFJLENBQUcsd0JBQXVCRixZQUFhLEVBQUUsQ0FBQzs7RUFFdEU7RUFDQUMsTUFBTSxHQUFHM0Isa0JBQWtCLENBQUM2QixVQUFVLENBQUVGLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRWxCLElBQUssQ0FBQztFQUN4RWtCLE1BQU0sR0FBRzNCLGtCQUFrQixDQUFDNkIsVUFBVSxDQUFFRixNQUFNLEVBQUUsV0FBVyxFQUFFVCxLQUFNLENBQUM7RUFDcEVTLE1BQU0sR0FBRzNCLGtCQUFrQixDQUFDNkIsVUFBVSxDQUFFRixNQUFNLEVBQUUsb0JBQW9CLEVBQUVMLGFBQWMsQ0FBQzs7RUFFckY7RUFDQSxNQUFNakIsa0JBQWtCLENBQUVJLElBQUksRUFBRSxXQUFXLEVBQUVQLE1BQU0sQ0FBRXlCLE1BQU8sQ0FBRSxDQUFDO0FBQ2pFLENBQUMifQ==