// Copyright 2022-2023, University of Colorado Boulder

/**
 * Helper function to show a progress bar on the command line.
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

/* eslint-env node */
const _ = require('lodash');

/**
 * See https://jagascript.com/how-to-build-a-textual-progress-bar-for-cli-and-terminal-apps/
 * @param {number} progress - decimal between 0 and 1
 * @param {boolean} newline - if each new progress should give a new line, should be false during progress, and true when finally completed
 * @param {Object} [options]
 */
module.exports = function showCommandLineProgress(progress, newline, options) {
  options = _.extend({
    progressBarLength: 40 // in characters
  }, options);
  const dots = '.'.repeat(Math.round(progress * options.progressBarLength));
  const empty = ' '.repeat(Math.round((1 - progress) * options.progressBarLength));
  const newlineString = newline ? '\n' : '';
  process.stdout.write(`\r[${dots}${empty}] ${(progress * 100).toFixed(2)}%${newlineString}`);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzaG93Q29tbWFuZExpbmVQcm9ncmVzcyIsInByb2dyZXNzIiwibmV3bGluZSIsIm9wdGlvbnMiLCJleHRlbmQiLCJwcm9ncmVzc0Jhckxlbmd0aCIsImRvdHMiLCJyZXBlYXQiLCJNYXRoIiwicm91bmQiLCJlbXB0eSIsIm5ld2xpbmVTdHJpbmciLCJwcm9jZXNzIiwic3Rkb3V0Iiwid3JpdGUiLCJ0b0ZpeGVkIl0sInNvdXJjZXMiOlsic2hvd0NvbW1hbmRMaW5lUHJvZ3Jlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHNob3cgYSBwcm9ncmVzcyBiYXIgb24gdGhlIGNvbW1hbmQgbGluZS5cclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbi8qIGVzbGludC1lbnYgbm9kZSAqL1xyXG5jb25zdCBfID0gcmVxdWlyZSggJ2xvZGFzaCcgKTtcclxuXHJcbi8qKlxyXG4gKiBTZWUgaHR0cHM6Ly9qYWdhc2NyaXB0LmNvbS9ob3ctdG8tYnVpbGQtYS10ZXh0dWFsLXByb2dyZXNzLWJhci1mb3ItY2xpLWFuZC10ZXJtaW5hbC1hcHBzL1xyXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvZ3Jlc3MgLSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG5ld2xpbmUgLSBpZiBlYWNoIG5ldyBwcm9ncmVzcyBzaG91bGQgZ2l2ZSBhIG5ldyBsaW5lLCBzaG91bGQgYmUgZmFsc2UgZHVyaW5nIHByb2dyZXNzLCBhbmQgdHJ1ZSB3aGVuIGZpbmFsbHkgY29tcGxldGVkXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hvd0NvbW1hbmRMaW5lUHJvZ3Jlc3MoIHByb2dyZXNzLCBuZXdsaW5lLCBvcHRpb25zICkge1xyXG4gIG9wdGlvbnMgPSBfLmV4dGVuZCgge1xyXG4gICAgcHJvZ3Jlc3NCYXJMZW5ndGg6IDQwIC8vIGluIGNoYXJhY3RlcnNcclxuICB9LCBvcHRpb25zICk7XHJcblxyXG4gIGNvbnN0IGRvdHMgPSAnLicucmVwZWF0KCBNYXRoLnJvdW5kKCBwcm9ncmVzcyAqIG9wdGlvbnMucHJvZ3Jlc3NCYXJMZW5ndGggKSApO1xyXG4gIGNvbnN0IGVtcHR5ID0gJyAnLnJlcGVhdCggTWF0aC5yb3VuZCggKCAxIC0gcHJvZ3Jlc3MgKSAqIG9wdGlvbnMucHJvZ3Jlc3NCYXJMZW5ndGggKSApO1xyXG4gIGNvbnN0IG5ld2xpbmVTdHJpbmcgPSBuZXdsaW5lID8gJ1xcbicgOiAnJztcclxuICBwcm9jZXNzLnN0ZG91dC53cml0ZSggYFxcclske2RvdHN9JHtlbXB0eX1dICR7KCBwcm9ncmVzcyAqIDEwMCApLnRvRml4ZWQoIDIgKX0lJHtuZXdsaW5lU3RyaW5nfWAgKTtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBRSxRQUFTLENBQUM7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyx1QkFBdUJBLENBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUc7RUFDOUVBLE9BQU8sR0FBR1AsQ0FBQyxDQUFDUSxNQUFNLENBQUU7SUFDbEJDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQztFQUN4QixDQUFDLEVBQUVGLE9BQVEsQ0FBQztFQUVaLE1BQU1HLElBQUksR0FBRyxHQUFHLENBQUNDLE1BQU0sQ0FBRUMsSUFBSSxDQUFDQyxLQUFLLENBQUVSLFFBQVEsR0FBR0UsT0FBTyxDQUFDRSxpQkFBa0IsQ0FBRSxDQUFDO0VBQzdFLE1BQU1LLEtBQUssR0FBRyxHQUFHLENBQUNILE1BQU0sQ0FBRUMsSUFBSSxDQUFDQyxLQUFLLENBQUUsQ0FBRSxDQUFDLEdBQUdSLFFBQVEsSUFBS0UsT0FBTyxDQUFDRSxpQkFBa0IsQ0FBRSxDQUFDO0VBQ3RGLE1BQU1NLGFBQWEsR0FBR1QsT0FBTyxHQUFHLElBQUksR0FBRyxFQUFFO0VBQ3pDVSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFHLE1BQUtSLElBQUssR0FBRUksS0FBTSxLQUFJLENBQUVULFFBQVEsR0FBRyxHQUFHLEVBQUdjLE9BQU8sQ0FBRSxDQUFFLENBQUUsSUFBR0osYUFBYyxFQUFFLENBQUM7QUFDbkcsQ0FBQyJ9