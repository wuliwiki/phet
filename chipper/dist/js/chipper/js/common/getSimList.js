// Copyright 2021-2022, University of Colorado Boulder

/**
 * Parses command line arguments--sims=sim1,sim2,... or --simList=path/to/filename to get a list of sims.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

const fs = require('fs');
'use strict';
module.exports = () => {
  const args = process.argv.slice(2);

  // if the arg is just a flag, then the callback will be called with a null parameter
  const processKey = (key, callback) => {
    const prefix = `--${key}`;
    const values = args.filter(arg => arg.startsWith(prefix));
    if (values.length === 1) {
      if (values[0].startsWith(`${prefix}=`)) {
        callback(values[0].substring(prefix.length + 1));
      } else {
        callback(null);
      }
    } else if (values.length > 1) {
      console.log(`Too many --${prefix}... specified`);
      process.exit(1);
    }
  };
  let repos = [];
  processKey('simList', value => {
    const contents = fs.readFileSync(value, 'utf8').trim();
    repos = contents.split('\n').map(sim => sim.trim());
  });
  processKey('stable', () => {
    const contents = fs.readFileSync('../perennial-alias/data/phet-io-api-stable', 'utf8').trim();
    repos = contents.split('\n').map(sim => sim.trim());
  });
  processKey('sims', value => {
    repos = value.split(',');
  });
  return repos;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJwcm9jZXNzS2V5Iiwia2V5IiwiY2FsbGJhY2siLCJwcmVmaXgiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJhcmciLCJzdGFydHNXaXRoIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwiY29uc29sZSIsImxvZyIsImV4aXQiLCJyZXBvcyIsInZhbHVlIiwiY29udGVudHMiLCJyZWFkRmlsZVN5bmMiLCJ0cmltIiwic3BsaXQiLCJtYXAiLCJzaW0iXSwic291cmNlcyI6WyJnZXRTaW1MaXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBjb21tYW5kIGxpbmUgYXJndW1lbnRzLS1zaW1zPXNpbTEsc2ltMiwuLi4gb3IgLS1zaW1MaXN0PXBhdGgvdG8vZmlsZW5hbWUgdG8gZ2V0IGEgbGlzdCBvZiBzaW1zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmNvbnN0IGZzID0gcmVxdWlyZSggJ2ZzJyApO1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSggMiApO1xyXG5cclxuICAvLyBpZiB0aGUgYXJnIGlzIGp1c3QgYSBmbGFnLCB0aGVuIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB3aXRoIGEgbnVsbCBwYXJhbWV0ZXJcclxuICBjb25zdCBwcm9jZXNzS2V5ID0gKCBrZXksIGNhbGxiYWNrICkgPT4ge1xyXG4gICAgY29uc3QgcHJlZml4ID0gYC0tJHtrZXl9YDtcclxuICAgIGNvbnN0IHZhbHVlcyA9IGFyZ3MuZmlsdGVyKCBhcmcgPT4gYXJnLnN0YXJ0c1dpdGgoIHByZWZpeCApICk7XHJcbiAgICBpZiAoIHZhbHVlcy5sZW5ndGggPT09IDEgKSB7XHJcbiAgICAgIGlmICggdmFsdWVzWyAwIF0uc3RhcnRzV2l0aCggYCR7cHJlZml4fT1gICkgKSB7XHJcbiAgICAgICAgY2FsbGJhY2soIHZhbHVlc1sgMCBdLnN1YnN0cmluZyggcHJlZml4Lmxlbmd0aCArIDEgKSApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGNhbGxiYWNrKCBudWxsICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB2YWx1ZXMubGVuZ3RoID4gMSApIHtcclxuICAgICAgY29uc29sZS5sb2coIGBUb28gbWFueSAtLSR7cHJlZml4fS4uLiBzcGVjaWZpZWRgICk7XHJcbiAgICAgIHByb2Nlc3MuZXhpdCggMSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGxldCByZXBvcyA9IFtdO1xyXG4gIHByb2Nlc3NLZXkoICdzaW1MaXN0JywgdmFsdWUgPT4ge1xyXG4gICAgY29uc3QgY29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMoIHZhbHVlLCAndXRmOCcgKS50cmltKCk7XHJcbiAgICByZXBvcyA9IGNvbnRlbnRzLnNwbGl0KCAnXFxuJyApLm1hcCggc2ltID0+IHNpbS50cmltKCkgKTtcclxuICB9ICk7XHJcbiAgcHJvY2Vzc0tleSggJ3N0YWJsZScsICgpID0+IHtcclxuICAgIGNvbnN0IGNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKCAnLi4vcGVyZW5uaWFsLWFsaWFzL2RhdGEvcGhldC1pby1hcGktc3RhYmxlJywgJ3V0ZjgnICkudHJpbSgpO1xyXG4gICAgcmVwb3MgPSBjb250ZW50cy5zcGxpdCggJ1xcbicgKS5tYXAoIHNpbSA9PiBzaW0udHJpbSgpICk7XHJcbiAgfSApO1xyXG4gIHByb2Nlc3NLZXkoICdzaW1zJywgdmFsdWUgPT4ge1xyXG4gICAgcmVwb3MgPSB2YWx1ZS5zcGxpdCggJywnICk7XHJcbiAgfSApO1xyXG5cclxuICByZXR1cm4gcmVwb3M7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFFLElBQUssQ0FBQztBQUUxQixZQUFZO0FBRVpDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLE1BQU07RUFDckIsTUFBTUMsSUFBSSxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFFLENBQUUsQ0FBQzs7RUFFcEM7RUFDQSxNQUFNQyxVQUFVLEdBQUdBLENBQUVDLEdBQUcsRUFBRUMsUUFBUSxLQUFNO0lBQ3RDLE1BQU1DLE1BQU0sR0FBSSxLQUFJRixHQUFJLEVBQUM7SUFDekIsTUFBTUcsTUFBTSxHQUFHUixJQUFJLENBQUNTLE1BQU0sQ0FBRUMsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVUsQ0FBRUosTUFBTyxDQUFFLENBQUM7SUFDN0QsSUFBS0MsTUFBTSxDQUFDSSxNQUFNLEtBQUssQ0FBQyxFQUFHO01BQ3pCLElBQUtKLE1BQU0sQ0FBRSxDQUFDLENBQUUsQ0FBQ0csVUFBVSxDQUFHLEdBQUVKLE1BQU8sR0FBRyxDQUFDLEVBQUc7UUFDNUNELFFBQVEsQ0FBRUUsTUFBTSxDQUFFLENBQUMsQ0FBRSxDQUFDSyxTQUFTLENBQUVOLE1BQU0sQ0FBQ0ssTUFBTSxHQUFHLENBQUUsQ0FBRSxDQUFDO01BQ3hELENBQUMsTUFDSTtRQUNITixRQUFRLENBQUUsSUFBSyxDQUFDO01BQ2xCO0lBQ0YsQ0FBQyxNQUNJLElBQUtFLE1BQU0sQ0FBQ0ksTUFBTSxHQUFHLENBQUMsRUFBRztNQUM1QkUsT0FBTyxDQUFDQyxHQUFHLENBQUcsY0FBYVIsTUFBTyxlQUFlLENBQUM7TUFDbEROLE9BQU8sQ0FBQ2UsSUFBSSxDQUFFLENBQUUsQ0FBQztJQUNuQjtFQUNGLENBQUM7RUFFRCxJQUFJQyxLQUFLLEdBQUcsRUFBRTtFQUNkYixVQUFVLENBQUUsU0FBUyxFQUFFYyxLQUFLLElBQUk7SUFDOUIsTUFBTUMsUUFBUSxHQUFHdkIsRUFBRSxDQUFDd0IsWUFBWSxDQUFFRixLQUFLLEVBQUUsTUFBTyxDQUFDLENBQUNHLElBQUksQ0FBQyxDQUFDO0lBQ3hESixLQUFLLEdBQUdFLFFBQVEsQ0FBQ0csS0FBSyxDQUFFLElBQUssQ0FBQyxDQUFDQyxHQUFHLENBQUVDLEdBQUcsSUFBSUEsR0FBRyxDQUFDSCxJQUFJLENBQUMsQ0FBRSxDQUFDO0VBQ3pELENBQUUsQ0FBQztFQUNIakIsVUFBVSxDQUFFLFFBQVEsRUFBRSxNQUFNO0lBQzFCLE1BQU1lLFFBQVEsR0FBR3ZCLEVBQUUsQ0FBQ3dCLFlBQVksQ0FBRSw0Q0FBNEMsRUFBRSxNQUFPLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDL0ZKLEtBQUssR0FBR0UsUUFBUSxDQUFDRyxLQUFLLENBQUUsSUFBSyxDQUFDLENBQUNDLEdBQUcsQ0FBRUMsR0FBRyxJQUFJQSxHQUFHLENBQUNILElBQUksQ0FBQyxDQUFFLENBQUM7RUFDekQsQ0FBRSxDQUFDO0VBQ0hqQixVQUFVLENBQUUsTUFBTSxFQUFFYyxLQUFLLElBQUk7SUFDM0JELEtBQUssR0FBR0MsS0FBSyxDQUFDSSxLQUFLLENBQUUsR0FBSSxDQUFDO0VBQzVCLENBQUUsQ0FBQztFQUVILE9BQU9MLEtBQUs7QUFDZCxDQUFDIn0=