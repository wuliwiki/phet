// Copyright 2021-2023, University of Colorado Boulder

/**
 * Format a PhET-iO API file for printing.
 *
 * NOTE: Please be mindful of the copy in copyWithSortedKeys, see https://github.com/phetsims/phet-io/issues/1733
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

const assert = require('assert');
const fixEOL = require('../grunt/fixEOL');

/**
 * Creates a new object, recursively, by sorting the keys at each level.
 * @param {Object} unordered - jsonifiable object to be sorted by key name.  Sorting is recursive.
 */
const copyWithSortedKeys = unordered => {
  if (Array.isArray(unordered)) {
    return unordered.map(copyWithSortedKeys);
  } else if (typeof unordered !== 'object' || unordered === null) {
    return unordered;
  }
  const ordered = {};
  Object.keys(unordered).sort().forEach(key => {
    const value = unordered[key];
    ordered[key] = copyWithSortedKeys(value);
  });
  return ordered;
};

/**
 * @param {Object} api
 */
module.exports = api => {
  assert(api, 'api expected');
  const objectString = JSON.stringify(copyWithSortedKeys(api), null, 2);
  return fixEOL(objectString);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiZml4RU9MIiwiY29weVdpdGhTb3J0ZWRLZXlzIiwidW5vcmRlcmVkIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwib3JkZXJlZCIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiZm9yRWFjaCIsImtleSIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9iamVjdFN0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlcyI6WyJmb3JtYXRQaGV0aW9BUEkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRm9ybWF0IGEgUGhFVC1pTyBBUEkgZmlsZSBmb3IgcHJpbnRpbmcuXHJcbiAqXHJcbiAqIE5PVEU6IFBsZWFzZSBiZSBtaW5kZnVsIG9mIHRoZSBjb3B5IGluIGNvcHlXaXRoU29ydGVkS2V5cywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9waGV0LWlvL2lzc3Vlcy8xNzMzXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcblxyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCAnYXNzZXJ0JyApO1xyXG5jb25zdCBmaXhFT0wgPSByZXF1aXJlKCAnLi4vZ3J1bnQvZml4RU9MJyApO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0LCByZWN1cnNpdmVseSwgYnkgc29ydGluZyB0aGUga2V5cyBhdCBlYWNoIGxldmVsLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gdW5vcmRlcmVkIC0ganNvbmlmaWFibGUgb2JqZWN0IHRvIGJlIHNvcnRlZCBieSBrZXkgbmFtZS4gIFNvcnRpbmcgaXMgcmVjdXJzaXZlLlxyXG4gKi9cclxuY29uc3QgY29weVdpdGhTb3J0ZWRLZXlzID0gdW5vcmRlcmVkID0+IHtcclxuICBpZiAoIEFycmF5LmlzQXJyYXkoIHVub3JkZXJlZCApICkge1xyXG4gICAgcmV0dXJuIHVub3JkZXJlZC5tYXAoIGNvcHlXaXRoU29ydGVkS2V5cyApO1xyXG4gIH1cclxuICBlbHNlIGlmICggdHlwZW9mIHVub3JkZXJlZCAhPT0gJ29iamVjdCcgfHwgdW5vcmRlcmVkID09PSBudWxsICkge1xyXG4gICAgcmV0dXJuIHVub3JkZXJlZDtcclxuICB9XHJcblxyXG4gIGNvbnN0IG9yZGVyZWQgPSB7fTtcclxuICBPYmplY3Qua2V5cyggdW5vcmRlcmVkICkuc29ydCgpLmZvckVhY2goIGtleSA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IHVub3JkZXJlZFsga2V5IF07XHJcbiAgICBvcmRlcmVkWyBrZXkgXSA9IGNvcHlXaXRoU29ydGVkS2V5cyggdmFsdWUgKTtcclxuICB9ICk7XHJcbiAgcmV0dXJuIG9yZGVyZWQ7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtPYmplY3R9IGFwaVxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhcGkgPT4ge1xyXG4gIGFzc2VydCggYXBpLCAnYXBpIGV4cGVjdGVkJyApO1xyXG4gIGNvbnN0IG9iamVjdFN0cmluZyA9IEpTT04uc3RyaW5naWZ5KCBjb3B5V2l0aFNvcnRlZEtleXMoIGFwaSApLCBudWxsLCAyICk7XHJcbiAgcmV0dXJuIGZpeEVPTCggb2JqZWN0U3RyaW5nICk7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUUsUUFBUyxDQUFDO0FBQ2xDLE1BQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFFLGlCQUFrQixDQUFDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1FLGtCQUFrQixHQUFHQyxTQUFTLElBQUk7RUFDdEMsSUFBS0MsS0FBSyxDQUFDQyxPQUFPLENBQUVGLFNBQVUsQ0FBQyxFQUFHO0lBQ2hDLE9BQU9BLFNBQVMsQ0FBQ0csR0FBRyxDQUFFSixrQkFBbUIsQ0FBQztFQUM1QyxDQUFDLE1BQ0ksSUFBSyxPQUFPQyxTQUFTLEtBQUssUUFBUSxJQUFJQSxTQUFTLEtBQUssSUFBSSxFQUFHO0lBQzlELE9BQU9BLFNBQVM7RUFDbEI7RUFFQSxNQUFNSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0VBQ2xCQyxNQUFNLENBQUNDLElBQUksQ0FBRU4sU0FBVSxDQUFDLENBQUNPLElBQUksQ0FBQyxDQUFDLENBQUNDLE9BQU8sQ0FBRUMsR0FBRyxJQUFJO0lBQzlDLE1BQU1DLEtBQUssR0FBR1YsU0FBUyxDQUFFUyxHQUFHLENBQUU7SUFDOUJMLE9BQU8sQ0FBRUssR0FBRyxDQUFFLEdBQUdWLGtCQUFrQixDQUFFVyxLQUFNLENBQUM7RUFDOUMsQ0FBRSxDQUFDO0VBQ0gsT0FBT04sT0FBTztBQUNoQixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBTyxNQUFNLENBQUNDLE9BQU8sR0FBR0MsR0FBRyxJQUFJO0VBQ3RCakIsTUFBTSxDQUFFaUIsR0FBRyxFQUFFLGNBQWUsQ0FBQztFQUM3QixNQUFNQyxZQUFZLEdBQUdDLElBQUksQ0FBQ0MsU0FBUyxDQUFFakIsa0JBQWtCLENBQUVjLEdBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFFLENBQUM7RUFDekUsT0FBT2YsTUFBTSxDQUFFZ0IsWUFBYSxDQUFDO0FBQy9CLENBQUMifQ==