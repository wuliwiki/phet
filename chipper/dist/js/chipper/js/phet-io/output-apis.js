// Copyright 2021-2022, University of Colorado Boulder

const fs = require('fs');
const generatePhetioMacroAPI = require('./generatePhetioMacroAPI');
const formatPhetioAPI = require('./formatPhetioAPI');
const getSimList = require('../common/getSimList');

/**
 * Runs generate-phet-io-api for the specified simulations, or all phet-io sims if not specified. This may take a couple
 * of minutes to run fully, depending on how many sims are being run.
 *
 * USAGE:
 * cd chipper
 * node js/phet-io/output-apis.js [--simList=path] [--sims=sim1,sim2,...] [--temporary]
 *
 * e.g.,
 * node js/phet-io/output-apis.js --simList=../perennial-alias/data/phet-io
 *
 * OPTIONS:
 * It will default to include all phet-io sims unless you specify a subset
 * --sims=sim1,sim2: a listed subset of sims
 * --simList=path/to/list
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
(async () => {
  const repos = getSimList();
  const args = process.argv.slice(2);
  const chunkSize = 4;
  const results = await generatePhetioMacroAPI(repos, {
    showProgressBar: true,
    // Interferes with file output
    chunkSize: chunkSize,
    showMessagesFromSim: false // must be pure JSON
  });

  repos.forEach(repo => fs.writeFileSync(`../phet-io-sim-specific/repos/${repo}/${repo}-phet-io-api${args.includes('--temporary') ? '-temporary' : ''}.json`, formatPhetioAPI(results[repo])));
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJnZW5lcmF0ZVBoZXRpb01hY3JvQVBJIiwiZm9ybWF0UGhldGlvQVBJIiwiZ2V0U2ltTGlzdCIsInJlcG9zIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJjaHVua1NpemUiLCJyZXN1bHRzIiwic2hvd1Byb2dyZXNzQmFyIiwic2hvd01lc3NhZ2VzRnJvbVNpbSIsImZvckVhY2giLCJyZXBvIiwid3JpdGVGaWxlU3luYyIsImluY2x1ZGVzIl0sInNvdXJjZXMiOlsib3V0cHV0LWFwaXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuY29uc3QgZ2VuZXJhdGVQaGV0aW9NYWNyb0FQSSA9IHJlcXVpcmUoICcuL2dlbmVyYXRlUGhldGlvTWFjcm9BUEknICk7XHJcbmNvbnN0IGZvcm1hdFBoZXRpb0FQSSA9IHJlcXVpcmUoICcuL2Zvcm1hdFBoZXRpb0FQSScgKTtcclxuY29uc3QgZ2V0U2ltTGlzdCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2V0U2ltTGlzdCcgKTtcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGdlbmVyYXRlLXBoZXQtaW8tYXBpIGZvciB0aGUgc3BlY2lmaWVkIHNpbXVsYXRpb25zLCBvciBhbGwgcGhldC1pbyBzaW1zIGlmIG5vdCBzcGVjaWZpZWQuIFRoaXMgbWF5IHRha2UgYSBjb3VwbGVcclxuICogb2YgbWludXRlcyB0byBydW4gZnVsbHksIGRlcGVuZGluZyBvbiBob3cgbWFueSBzaW1zIGFyZSBiZWluZyBydW4uXHJcbiAqXHJcbiAqIFVTQUdFOlxyXG4gKiBjZCBjaGlwcGVyXHJcbiAqIG5vZGUganMvcGhldC1pby9vdXRwdXQtYXBpcy5qcyBbLS1zaW1MaXN0PXBhdGhdIFstLXNpbXM9c2ltMSxzaW0yLC4uLl0gWy0tdGVtcG9yYXJ5XVxyXG4gKlxyXG4gKiBlLmcuLFxyXG4gKiBub2RlIGpzL3BoZXQtaW8vb3V0cHV0LWFwaXMuanMgLS1zaW1MaXN0PS4uL3BlcmVubmlhbC1hbGlhcy9kYXRhL3BoZXQtaW9cclxuICpcclxuICogT1BUSU9OUzpcclxuICogSXQgd2lsbCBkZWZhdWx0IHRvIGluY2x1ZGUgYWxsIHBoZXQtaW8gc2ltcyB1bmxlc3MgeW91IHNwZWNpZnkgYSBzdWJzZXRcclxuICogLS1zaW1zPXNpbTEsc2ltMjogYSBsaXN0ZWQgc3Vic2V0IG9mIHNpbXNcclxuICogLS1zaW1MaXN0PXBhdGgvdG8vbGlzdFxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuKCBhc3luYyAoKSA9PiB7XHJcblxyXG4gIGNvbnN0IHJlcG9zID0gZ2V0U2ltTGlzdCgpO1xyXG4gIGNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoIDIgKTtcclxuXHJcbiAgY29uc3QgY2h1bmtTaXplID0gNDtcclxuICBjb25zdCByZXN1bHRzID0gYXdhaXQgZ2VuZXJhdGVQaGV0aW9NYWNyb0FQSSggcmVwb3MsIHtcclxuICAgIHNob3dQcm9ncmVzc0JhcjogdHJ1ZSwgLy8gSW50ZXJmZXJlcyB3aXRoIGZpbGUgb3V0cHV0XHJcbiAgICBjaHVua1NpemU6IGNodW5rU2l6ZSxcclxuICAgIHNob3dNZXNzYWdlc0Zyb21TaW06IGZhbHNlIC8vIG11c3QgYmUgcHVyZSBKU09OXHJcbiAgfSApO1xyXG5cclxuICByZXBvcy5mb3JFYWNoKCByZXBvID0+XHJcbiAgICBmcy53cml0ZUZpbGVTeW5jKFxyXG4gICAgICBgLi4vcGhldC1pby1zaW0tc3BlY2lmaWMvcmVwb3MvJHtyZXBvfS8ke3JlcG99LXBoZXQtaW8tYXBpJHthcmdzLmluY2x1ZGVzKCAnLS10ZW1wb3JhcnknICkgPyAnLXRlbXBvcmFyeScgOiAnJ30uanNvbmAsXHJcbiAgICAgIGZvcm1hdFBoZXRpb0FQSSggcmVzdWx0c1sgcmVwbyBdIClcclxuICAgICkgKTtcclxufSApKCk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBRSxJQUFLLENBQUM7QUFDMUIsTUFBTUMsc0JBQXNCLEdBQUdELE9BQU8sQ0FBRSwwQkFBMkIsQ0FBQztBQUNwRSxNQUFNRSxlQUFlLEdBQUdGLE9BQU8sQ0FBRSxtQkFBb0IsQ0FBQztBQUN0RCxNQUFNRyxVQUFVLEdBQUdILE9BQU8sQ0FBRSxzQkFBdUIsQ0FBQzs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBRSxZQUFZO0VBRVosTUFBTUksS0FBSyxHQUFHRCxVQUFVLENBQUMsQ0FBQztFQUMxQixNQUFNRSxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUUsQ0FBRSxDQUFDO0VBRXBDLE1BQU1DLFNBQVMsR0FBRyxDQUFDO0VBQ25CLE1BQU1DLE9BQU8sR0FBRyxNQUFNVCxzQkFBc0IsQ0FBRUcsS0FBSyxFQUFFO0lBQ25ETyxlQUFlLEVBQUUsSUFBSTtJQUFFO0lBQ3ZCRixTQUFTLEVBQUVBLFNBQVM7SUFDcEJHLG1CQUFtQixFQUFFLEtBQUssQ0FBQztFQUM3QixDQUFFLENBQUM7O0VBRUhSLEtBQUssQ0FBQ1MsT0FBTyxDQUFFQyxJQUFJLElBQ2pCZixFQUFFLENBQUNnQixhQUFhLENBQ2IsaUNBQWdDRCxJQUFLLElBQUdBLElBQUssZUFBY1QsSUFBSSxDQUFDVyxRQUFRLENBQUUsYUFBYyxDQUFDLEdBQUcsWUFBWSxHQUFHLEVBQUcsT0FBTSxFQUNySGQsZUFBZSxDQUFFUSxPQUFPLENBQUVJLElBQUksQ0FBRyxDQUNuQyxDQUFFLENBQUM7QUFDUCxDQUFDLEVBQUcsQ0FBQyJ9