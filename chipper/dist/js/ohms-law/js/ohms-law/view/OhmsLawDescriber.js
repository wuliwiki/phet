// Copyright 2020-2021, University of Colorado Boulder

/**
 * Describer for the sim, responsible for formulating descriptions used throughout the sim.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import ohmsLaw from '../../ohmsLaw.js';
import CurrentUnit from '../model/CurrentUnit.js';
import OhmsLawA11yStrings from '../OhmsLawA11yStrings.js';
const currentMilliampsString = OhmsLawA11yStrings.currentMilliamps.value;
const currentAmpsString = OhmsLawA11yStrings.currentAmps.value;
const sliderChangeAlertPatternString = OhmsLawA11yStrings.sliderChangeAlertPattern.value;
class OhmsLawDescriber {
  /**
   * @param {OhmsLawModel} model
   */
  constructor(model) {
    // @private
    this.model = model;
  }

  /**
   * Generate an alert from strings and values that describes a change in the model. Something like
   * "As letter V grows, letter I grows. Current now 10.0 milliamps with voltage at 5.0 volts."
   * Used for a11y.
   *
   * @param  {string} initLetter - letter representing the model property that was changed
   * @param  {string} initSizeChange - string describing change in size of letter representing changed model Property
   * @param  {string} iSizeChange - string describing size change of letter I
   * @param  {number} currentVal - value of model current Property
   * @returns {string} string
   * @public
   */
  getValueChangeAlertString(initLetter, initSizeChange, iSizeChange) {
    const currentVal = this.model.getFixedCurrent();
    return StringUtils.fillIn(sliderChangeAlertPatternString, {
      initLetter: initLetter,
      initSizeChange: initSizeChange,
      iSizeChange: iSizeChange,
      currentVal: currentVal,
      unit: this.getUnitForCurrent()
    });
  }

  /**
   * Get the current current unit
   * @returns {string}
   * @public
   */
  getUnitForCurrent() {
    switch (this.model.currentUnitsProperty.value) {
      case CurrentUnit.AMPS:
        return currentAmpsString;
      case CurrentUnit.MILLIAMPS:
        return currentMilliampsString;
      default:
        break;
    }
    throw new Error('unexpected value for currentUnitsProperty');
  }
}
ohmsLaw.register('OhmsLawDescriber', OhmsLawDescriber);
export default OhmsLawDescriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIm9obXNMYXciLCJDdXJyZW50VW5pdCIsIk9obXNMYXdBMTF5U3RyaW5ncyIsImN1cnJlbnRNaWxsaWFtcHNTdHJpbmciLCJjdXJyZW50TWlsbGlhbXBzIiwidmFsdWUiLCJjdXJyZW50QW1wc1N0cmluZyIsImN1cnJlbnRBbXBzIiwic2xpZGVyQ2hhbmdlQWxlcnRQYXR0ZXJuU3RyaW5nIiwic2xpZGVyQ2hhbmdlQWxlcnRQYXR0ZXJuIiwiT2htc0xhd0Rlc2NyaWJlciIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJnZXRWYWx1ZUNoYW5nZUFsZXJ0U3RyaW5nIiwiaW5pdExldHRlciIsImluaXRTaXplQ2hhbmdlIiwiaVNpemVDaGFuZ2UiLCJjdXJyZW50VmFsIiwiZ2V0Rml4ZWRDdXJyZW50IiwiZmlsbEluIiwidW5pdCIsImdldFVuaXRGb3JDdXJyZW50IiwiY3VycmVudFVuaXRzUHJvcGVydHkiLCJBTVBTIiwiTUlMTElBTVBTIiwiRXJyb3IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk9obXNMYXdEZXNjcmliZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVzY3JpYmVyIGZvciB0aGUgc2ltLCByZXNwb25zaWJsZSBmb3IgZm9ybXVsYXRpbmcgZGVzY3JpcHRpb25zIHVzZWQgdGhyb3VnaG91dCB0aGUgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBvaG1zTGF3IGZyb20gJy4uLy4uL29obXNMYXcuanMnO1xyXG5pbXBvcnQgQ3VycmVudFVuaXQgZnJvbSAnLi4vbW9kZWwvQ3VycmVudFVuaXQuanMnO1xyXG5pbXBvcnQgT2htc0xhd0ExMXlTdHJpbmdzIGZyb20gJy4uL09obXNMYXdBMTF5U3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBjdXJyZW50TWlsbGlhbXBzU3RyaW5nID0gT2htc0xhd0ExMXlTdHJpbmdzLmN1cnJlbnRNaWxsaWFtcHMudmFsdWU7XHJcbmNvbnN0IGN1cnJlbnRBbXBzU3RyaW5nID0gT2htc0xhd0ExMXlTdHJpbmdzLmN1cnJlbnRBbXBzLnZhbHVlO1xyXG5jb25zdCBzbGlkZXJDaGFuZ2VBbGVydFBhdHRlcm5TdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3Muc2xpZGVyQ2hhbmdlQWxlcnRQYXR0ZXJuLnZhbHVlO1xyXG5cclxuY2xhc3MgT2htc0xhd0Rlc2NyaWJlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7T2htc0xhd01vZGVsfSBtb2RlbFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCApIHtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGUgYW4gYWxlcnQgZnJvbSBzdHJpbmdzIGFuZCB2YWx1ZXMgdGhhdCBkZXNjcmliZXMgYSBjaGFuZ2UgaW4gdGhlIG1vZGVsLiBTb21ldGhpbmcgbGlrZVxyXG4gICAqIFwiQXMgbGV0dGVyIFYgZ3Jvd3MsIGxldHRlciBJIGdyb3dzLiBDdXJyZW50IG5vdyAxMC4wIG1pbGxpYW1wcyB3aXRoIHZvbHRhZ2UgYXQgNS4wIHZvbHRzLlwiXHJcbiAgICogVXNlZCBmb3IgYTExeS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gaW5pdExldHRlciAtIGxldHRlciByZXByZXNlbnRpbmcgdGhlIG1vZGVsIHByb3BlcnR5IHRoYXQgd2FzIGNoYW5nZWRcclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGluaXRTaXplQ2hhbmdlIC0gc3RyaW5nIGRlc2NyaWJpbmcgY2hhbmdlIGluIHNpemUgb2YgbGV0dGVyIHJlcHJlc2VudGluZyBjaGFuZ2VkIG1vZGVsIFByb3BlcnR5XHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBpU2l6ZUNoYW5nZSAtIHN0cmluZyBkZXNjcmliaW5nIHNpemUgY2hhbmdlIG9mIGxldHRlciBJXHJcbiAgICogQHBhcmFtICB7bnVtYmVyfSBjdXJyZW50VmFsIC0gdmFsdWUgb2YgbW9kZWwgY3VycmVudCBQcm9wZXJ0eVxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHN0cmluZ1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBnZXRWYWx1ZUNoYW5nZUFsZXJ0U3RyaW5nKCBpbml0TGV0dGVyLCBpbml0U2l6ZUNoYW5nZSwgaVNpemVDaGFuZ2UgKSB7XHJcbiAgICBjb25zdCBjdXJyZW50VmFsID0gdGhpcy5tb2RlbC5nZXRGaXhlZEN1cnJlbnQoKTtcclxuICAgIHJldHVybiBTdHJpbmdVdGlscy5maWxsSW4oIHNsaWRlckNoYW5nZUFsZXJ0UGF0dGVyblN0cmluZywge1xyXG4gICAgICBpbml0TGV0dGVyOiBpbml0TGV0dGVyLFxyXG4gICAgICBpbml0U2l6ZUNoYW5nZTogaW5pdFNpemVDaGFuZ2UsXHJcbiAgICAgIGlTaXplQ2hhbmdlOiBpU2l6ZUNoYW5nZSxcclxuICAgICAgY3VycmVudFZhbDogY3VycmVudFZhbCxcclxuICAgICAgdW5pdDogdGhpcy5nZXRVbml0Rm9yQ3VycmVudCgpXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBjdXJyZW50IGN1cnJlbnQgdW5pdFxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldFVuaXRGb3JDdXJyZW50KCkge1xyXG4gICAgc3dpdGNoKCB0aGlzLm1vZGVsLmN1cnJlbnRVbml0c1Byb3BlcnR5LnZhbHVlICkge1xyXG4gICAgICBjYXNlIEN1cnJlbnRVbml0LkFNUFM6XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRBbXBzU3RyaW5nO1xyXG4gICAgICBjYXNlIEN1cnJlbnRVbml0Lk1JTExJQU1QUzpcclxuICAgICAgICByZXR1cm4gY3VycmVudE1pbGxpYW1wc1N0cmluZztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvciggJ3VuZXhwZWN0ZWQgdmFsdWUgZm9yIGN1cnJlbnRVbml0c1Byb3BlcnR5JyApO1xyXG4gIH1cclxufVxyXG5cclxub2htc0xhdy5yZWdpc3RlciggJ09obXNMYXdEZXNjcmliZXInLCBPaG1zTGF3RGVzY3JpYmVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IE9obXNMYXdEZXNjcmliZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsT0FBT0MsT0FBTyxNQUFNLGtCQUFrQjtBQUN0QyxPQUFPQyxXQUFXLE1BQU0seUJBQXlCO0FBQ2pELE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQUV6RCxNQUFNQyxzQkFBc0IsR0FBR0Qsa0JBQWtCLENBQUNFLGdCQUFnQixDQUFDQyxLQUFLO0FBQ3hFLE1BQU1DLGlCQUFpQixHQUFHSixrQkFBa0IsQ0FBQ0ssV0FBVyxDQUFDRixLQUFLO0FBQzlELE1BQU1HLDhCQUE4QixHQUFHTixrQkFBa0IsQ0FBQ08sd0JBQXdCLENBQUNKLEtBQUs7QUFFeEYsTUFBTUssZ0JBQWdCLENBQUM7RUFFckI7QUFDRjtBQUNBO0VBQ0VDLFdBQVdBLENBQUVDLEtBQUssRUFBRztJQUVuQjtJQUNBLElBQUksQ0FBQ0EsS0FBSyxHQUFHQSxLQUFLO0VBQ3BCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyx5QkFBeUJBLENBQUVDLFVBQVUsRUFBRUMsY0FBYyxFQUFFQyxXQUFXLEVBQUc7SUFDbkUsTUFBTUMsVUFBVSxHQUFHLElBQUksQ0FBQ0wsS0FBSyxDQUFDTSxlQUFlLENBQUMsQ0FBQztJQUMvQyxPQUFPbkIsV0FBVyxDQUFDb0IsTUFBTSxDQUFFWCw4QkFBOEIsRUFBRTtNQUN6RE0sVUFBVSxFQUFFQSxVQUFVO01BQ3RCQyxjQUFjLEVBQUVBLGNBQWM7TUFDOUJDLFdBQVcsRUFBRUEsV0FBVztNQUN4QkMsVUFBVSxFQUFFQSxVQUFVO01BQ3RCRyxJQUFJLEVBQUUsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQztJQUMvQixDQUFFLENBQUM7RUFDTDs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VBLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCLFFBQVEsSUFBSSxDQUFDVCxLQUFLLENBQUNVLG9CQUFvQixDQUFDakIsS0FBSztNQUMzQyxLQUFLSixXQUFXLENBQUNzQixJQUFJO1FBQ25CLE9BQU9qQixpQkFBaUI7TUFDMUIsS0FBS0wsV0FBVyxDQUFDdUIsU0FBUztRQUN4QixPQUFPckIsc0JBQXNCO01BQy9CO1FBQ0U7SUFDSjtJQUNBLE1BQU0sSUFBSXNCLEtBQUssQ0FBRSwyQ0FBNEMsQ0FBQztFQUNoRTtBQUNGO0FBRUF6QixPQUFPLENBQUMwQixRQUFRLENBQUUsa0JBQWtCLEVBQUVoQixnQkFBaUIsQ0FBQztBQUN4RCxlQUFlQSxnQkFBZ0IifQ==