// Copyright 2017-2022, University of Colorado Boulder

/**
 * Container for sliders and adjacent text
 * @author Vasily Shakhov (Mlearner)
 * @author Anton Ulyanov (Mlearner)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import merge from '../../../../phet-core/js/merge.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import SceneryPhetStrings from '../../../../scenery-phet/js/SceneryPhetStrings.js';
import { HBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import ValueChangeUtterance from '../../../../utterance-queue/js/ValueChangeUtterance.js';
import ohmsLaw from '../../ohmsLaw.js';
import OhmsLawStrings from '../../OhmsLawStrings.js';
import OhmsLawModel from '../model/OhmsLawModel.js';
import OhmsLawA11yStrings from '../OhmsLawA11yStrings.js';
import OhmsLawConstants from '../OhmsLawConstants.js';
import SliderUnit from './SliderUnit.js';
const resistanceString = OhmsLawStrings.resistance;
const resistanceSymbolString = OhmsLawStrings.resistanceSymbol;
const voltageString = OhmsLawStrings.voltage;
const voltageSymbolString = OhmsLawStrings.voltageSymbol;
const voltageUnitsString = OhmsLawStrings.voltageUnits;

// can provide translators with context
const resistanceUnitsPatternString = OhmsLawA11yStrings.resistanceUnitsPattern.value;
const voltageUnitsPatternString = OhmsLawA11yStrings.voltageUnitsPattern.value;
const resistanceSliderLabelString = OhmsLawA11yStrings.resistanceSliderLabel.value;
const voltageSliderLabelString = OhmsLawA11yStrings.voltageSliderLabel.value;
const sliderControlsString = OhmsLawA11yStrings.sliderControls.value;
const slidersDescriptionString = OhmsLawA11yStrings.slidersDescription.value;
const letterRString = OhmsLawA11yStrings.letterR.value;
const letterVString = OhmsLawA11yStrings.letterV.value;
const shrinksString = OhmsLawA11yStrings.shrinks.value;
const growsString = OhmsLawA11yStrings.grows.value;
const aLotString = OhmsLawA11yStrings.aLot.value;

// constants
const NUMBER_OF_LETTER_SIZES = OhmsLawA11yStrings.numberOfSizes.value; // pdom - the number of sizes that letters can be described as.

class ControlPanel extends Panel {
  /**
   * @param {OhmsLawModel} model
   * @param {OhmsLawDescriber} ohmsLawDescriber
   * @param {Object} [options]
   */
  constructor(model, ohmsLawDescriber, options) {
    options = merge({
      xMargin: 30,
      yMargin: 10,
      lineWidth: 3,
      resize: false,
      preventFit: true,
      // used to avoid jostling in the control panel when the resistance changes quickly, see https://github.com/phetsims/ohms-law/issues/68
      tandem: Tandem.REQUIRED
    }, options);
    const voltageProperty = model.voltageProperty;
    const resistanceProperty = model.resistanceProperty;
    const currentProperty = model.currentProperty;

    // pdom - to alert changes to assistive devices
    const resistanceUtterance = new ValueChangeUtterance();
    const voltageUtterance = new ValueChangeUtterance();

    // Create the voltage slider with readout and labels
    let oldVoltage; // stored on startDrag;
    let newVoltage; // stored on endDrag;
    const voltageSlider = new SliderUnit(voltageProperty, OhmsLawConstants.VOLTAGE_RANGE, voltageSymbolString, voltageString, voltageUnitsString, voltageSliderLabelString, {
      sliderOptions: {
        // pdom
        keyboardStep: 0.5,
        // volts
        a11yCreateAriaValueText: value => StringUtils.fillIn(voltageUnitsPatternString, {
          value: value
        }),
        startDrag: () => {
          oldVoltage = voltageProperty.get();
        },
        endDrag: () => {
          newVoltage = voltageProperty.get();
          if (oldVoltage !== newVoltage) {
            // pdom - when V changes, announce an alert that describes the change
            const sizeChange = newVoltage - oldVoltage > 0 ? growsString : shrinksString;
            voltageUtterance.alert = ohmsLawDescriber.getValueChangeAlertString(letterVString, sizeChange, sizeChange);
            voltageSlider.alertDescriptionUtterance(voltageUtterance);
          }
        }
      },
      decimalPlaces: OhmsLawConstants.VOLTAGE_SIG_FIGS,
      tandem: options.tandem.createTandem('voltageSlider')
    });
    let oldResistance; // stored on startDrag
    let newResistance; // stored on endDrag
    let oldCurrent;
    let newCurrent;

    // based on the number of sizes for the formula letters
    const currentRangePerSize = (OhmsLawModel.getCurrentRange().max - OhmsLawModel.getCurrentRange().min) / NUMBER_OF_LETTER_SIZES;
    const twoSizeCurrentThreshhold = currentRangePerSize * 2; // amount of current that must change to adjust change the current 2 a11y sizes.

    // pdom - This function will create the string alert to notify the resistance slider has been changed.
    const endResistanceDrag = () => {
      newResistance = resistanceProperty.get();
      newCurrent = currentProperty.get();
      if (newResistance !== oldResistance) {
        const resistanceChange = newResistance - oldResistance;
        const currentChange = newCurrent - oldCurrent;
        const rSizeChange = resistanceChange > 0 ? growsString : shrinksString;
        let iSizeChange = resistanceChange < 0 ? growsString : shrinksString;
        iSizeChange += Math.abs(currentChange) > twoSizeCurrentThreshhold ? ` ${aLotString}` : '';
        resistanceUtterance.alert = ohmsLawDescriber.getValueChangeAlertString(letterRString, rSizeChange, iSizeChange);
        resistanceSlider.alertDescriptionUtterance(resistanceUtterance);
      }
    };

    // Create the resistance slider with readout and labels
    const resistanceSlider = new SliderUnit(resistanceProperty, OhmsLawConstants.RESISTANCE_RANGE, resistanceSymbolString, resistanceString, SceneryPhetStrings.symbol.ohmsStringProperty, resistanceSliderLabelString, {
      sliderOptions: {
        // pdom
        keyboardStep: 20,
        // ohms
        shiftKeyboardStep: 1,
        // ohms
        a11yCreateAriaValueText: value => StringUtils.fillIn(resistanceUnitsPatternString, {
          value: value
        }),
        startDrag: () => {
          oldResistance = resistanceProperty.get();
          oldCurrent = currentProperty.get();
        },
        endDrag: endResistanceDrag
      },
      decimalPlaces: OhmsLawConstants.RESISTANCE_SIG_FIGS,
      tandem: options.tandem.createTandem('resistanceSlider')
    });

    // Use a content node so that the Panel can surround it fully
    const content = new HBox({
      spacing: 30,
      // empirically determined
      children: [voltageSlider, resistanceSlider],
      // pdom - contain the sliders in a list
      labelTagName: 'h3',
      tagName: 'div',
      labelContent: sliderControlsString,
      descriptionContent: slidersDescriptionString
    });
    super(content, options);

    // @public (read-only) {DerivedProperty.<boolean>} - a property that indicates whether either slider is being
    // dragged via keyboard interaction
    this.sliderBeingDraggedByKeyboardProperty = new DerivedProperty([voltageSlider.sliderDraggingByKeyboardProperty, resistanceSlider.sliderDraggingByKeyboardProperty], (voltageSliderDraggedByKeyboard, resistanceSliderDraggedByKeyboard) => voltageSliderDraggedByKeyboard || resistanceSliderDraggedByKeyboard);
  }
}
ohmsLaw.register('ControlPanel', ControlPanel);
export default ControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJtZXJnZSIsIlN0cmluZ1V0aWxzIiwiU2NlbmVyeVBoZXRTdHJpbmdzIiwiSEJveCIsIlBhbmVsIiwiVGFuZGVtIiwiVmFsdWVDaGFuZ2VVdHRlcmFuY2UiLCJvaG1zTGF3IiwiT2htc0xhd1N0cmluZ3MiLCJPaG1zTGF3TW9kZWwiLCJPaG1zTGF3QTExeVN0cmluZ3MiLCJPaG1zTGF3Q29uc3RhbnRzIiwiU2xpZGVyVW5pdCIsInJlc2lzdGFuY2VTdHJpbmciLCJyZXNpc3RhbmNlIiwicmVzaXN0YW5jZVN5bWJvbFN0cmluZyIsInJlc2lzdGFuY2VTeW1ib2wiLCJ2b2x0YWdlU3RyaW5nIiwidm9sdGFnZSIsInZvbHRhZ2VTeW1ib2xTdHJpbmciLCJ2b2x0YWdlU3ltYm9sIiwidm9sdGFnZVVuaXRzU3RyaW5nIiwidm9sdGFnZVVuaXRzIiwicmVzaXN0YW5jZVVuaXRzUGF0dGVyblN0cmluZyIsInJlc2lzdGFuY2VVbml0c1BhdHRlcm4iLCJ2YWx1ZSIsInZvbHRhZ2VVbml0c1BhdHRlcm5TdHJpbmciLCJ2b2x0YWdlVW5pdHNQYXR0ZXJuIiwicmVzaXN0YW5jZVNsaWRlckxhYmVsU3RyaW5nIiwicmVzaXN0YW5jZVNsaWRlckxhYmVsIiwidm9sdGFnZVNsaWRlckxhYmVsU3RyaW5nIiwidm9sdGFnZVNsaWRlckxhYmVsIiwic2xpZGVyQ29udHJvbHNTdHJpbmciLCJzbGlkZXJDb250cm9scyIsInNsaWRlcnNEZXNjcmlwdGlvblN0cmluZyIsInNsaWRlcnNEZXNjcmlwdGlvbiIsImxldHRlclJTdHJpbmciLCJsZXR0ZXJSIiwibGV0dGVyVlN0cmluZyIsImxldHRlclYiLCJzaHJpbmtzU3RyaW5nIiwic2hyaW5rcyIsImdyb3dzU3RyaW5nIiwiZ3Jvd3MiLCJhTG90U3RyaW5nIiwiYUxvdCIsIk5VTUJFUl9PRl9MRVRURVJfU0laRVMiLCJudW1iZXJPZlNpemVzIiwiQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJtb2RlbCIsIm9obXNMYXdEZXNjcmliZXIiLCJvcHRpb25zIiwieE1hcmdpbiIsInlNYXJnaW4iLCJsaW5lV2lkdGgiLCJyZXNpemUiLCJwcmV2ZW50Rml0IiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ2b2x0YWdlUHJvcGVydHkiLCJyZXNpc3RhbmNlUHJvcGVydHkiLCJjdXJyZW50UHJvcGVydHkiLCJyZXNpc3RhbmNlVXR0ZXJhbmNlIiwidm9sdGFnZVV0dGVyYW5jZSIsIm9sZFZvbHRhZ2UiLCJuZXdWb2x0YWdlIiwidm9sdGFnZVNsaWRlciIsIlZPTFRBR0VfUkFOR0UiLCJzbGlkZXJPcHRpb25zIiwia2V5Ym9hcmRTdGVwIiwiYTExeUNyZWF0ZUFyaWFWYWx1ZVRleHQiLCJmaWxsSW4iLCJzdGFydERyYWciLCJnZXQiLCJlbmREcmFnIiwic2l6ZUNoYW5nZSIsImFsZXJ0IiwiZ2V0VmFsdWVDaGFuZ2VBbGVydFN0cmluZyIsImFsZXJ0RGVzY3JpcHRpb25VdHRlcmFuY2UiLCJkZWNpbWFsUGxhY2VzIiwiVk9MVEFHRV9TSUdfRklHUyIsImNyZWF0ZVRhbmRlbSIsIm9sZFJlc2lzdGFuY2UiLCJuZXdSZXNpc3RhbmNlIiwib2xkQ3VycmVudCIsIm5ld0N1cnJlbnQiLCJjdXJyZW50UmFuZ2VQZXJTaXplIiwiZ2V0Q3VycmVudFJhbmdlIiwibWF4IiwibWluIiwidHdvU2l6ZUN1cnJlbnRUaHJlc2hob2xkIiwiZW5kUmVzaXN0YW5jZURyYWciLCJyZXNpc3RhbmNlQ2hhbmdlIiwiY3VycmVudENoYW5nZSIsInJTaXplQ2hhbmdlIiwiaVNpemVDaGFuZ2UiLCJNYXRoIiwiYWJzIiwicmVzaXN0YW5jZVNsaWRlciIsIlJFU0lTVEFOQ0VfUkFOR0UiLCJzeW1ib2wiLCJvaG1zU3RyaW5nUHJvcGVydHkiLCJzaGlmdEtleWJvYXJkU3RlcCIsIlJFU0lTVEFOQ0VfU0lHX0ZJR1MiLCJjb250ZW50Iiwic3BhY2luZyIsImNoaWxkcmVuIiwibGFiZWxUYWdOYW1lIiwidGFnTmFtZSIsImxhYmVsQ29udGVudCIsImRlc2NyaXB0aW9uQ29udGVudCIsInNsaWRlckJlaW5nRHJhZ2dlZEJ5S2V5Ym9hcmRQcm9wZXJ0eSIsInNsaWRlckRyYWdnaW5nQnlLZXlib2FyZFByb3BlcnR5Iiwidm9sdGFnZVNsaWRlckRyYWdnZWRCeUtleWJvYXJkIiwicmVzaXN0YW5jZVNsaWRlckRyYWdnZWRCeUtleWJvYXJkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb250cm9sUGFuZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udGFpbmVyIGZvciBzbGlkZXJzIGFuZCBhZGphY2VudCB0ZXh0XHJcbiAqIEBhdXRob3IgVmFzaWx5IFNoYWtob3YgKE1sZWFybmVyKVxyXG4gKiBAYXV0aG9yIEFudG9uIFVseWFub3YgKE1sZWFybmVyKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBTY2VuZXJ5UGhldFN0cmluZ3MgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1NjZW5lcnlQaGV0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCB7IEhCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFZhbHVlQ2hhbmdlVXR0ZXJhbmNlIGZyb20gJy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9WYWx1ZUNoYW5nZVV0dGVyYW5jZS5qcyc7XHJcbmltcG9ydCBvaG1zTGF3IGZyb20gJy4uLy4uL29obXNMYXcuanMnO1xyXG5pbXBvcnQgT2htc0xhd1N0cmluZ3MgZnJvbSAnLi4vLi4vT2htc0xhd1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgT2htc0xhd01vZGVsIGZyb20gJy4uL21vZGVsL09obXNMYXdNb2RlbC5qcyc7XHJcbmltcG9ydCBPaG1zTGF3QTExeVN0cmluZ3MgZnJvbSAnLi4vT2htc0xhd0ExMXlTdHJpbmdzLmpzJztcclxuaW1wb3J0IE9obXNMYXdDb25zdGFudHMgZnJvbSAnLi4vT2htc0xhd0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBTbGlkZXJVbml0IGZyb20gJy4vU2xpZGVyVW5pdC5qcyc7XHJcblxyXG5jb25zdCByZXNpc3RhbmNlU3RyaW5nID0gT2htc0xhd1N0cmluZ3MucmVzaXN0YW5jZTtcclxuY29uc3QgcmVzaXN0YW5jZVN5bWJvbFN0cmluZyA9IE9obXNMYXdTdHJpbmdzLnJlc2lzdGFuY2VTeW1ib2w7XHJcbmNvbnN0IHZvbHRhZ2VTdHJpbmcgPSBPaG1zTGF3U3RyaW5ncy52b2x0YWdlO1xyXG5jb25zdCB2b2x0YWdlU3ltYm9sU3RyaW5nID0gT2htc0xhd1N0cmluZ3Mudm9sdGFnZVN5bWJvbDtcclxuY29uc3Qgdm9sdGFnZVVuaXRzU3RyaW5nID0gT2htc0xhd1N0cmluZ3Mudm9sdGFnZVVuaXRzO1xyXG5cclxuLy8gY2FuIHByb3ZpZGUgdHJhbnNsYXRvcnMgd2l0aCBjb250ZXh0XHJcbmNvbnN0IHJlc2lzdGFuY2VVbml0c1BhdHRlcm5TdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3MucmVzaXN0YW5jZVVuaXRzUGF0dGVybi52YWx1ZTtcclxuY29uc3Qgdm9sdGFnZVVuaXRzUGF0dGVyblN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy52b2x0YWdlVW5pdHNQYXR0ZXJuLnZhbHVlO1xyXG5jb25zdCByZXNpc3RhbmNlU2xpZGVyTGFiZWxTdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3MucmVzaXN0YW5jZVNsaWRlckxhYmVsLnZhbHVlO1xyXG5jb25zdCB2b2x0YWdlU2xpZGVyTGFiZWxTdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3Mudm9sdGFnZVNsaWRlckxhYmVsLnZhbHVlO1xyXG5jb25zdCBzbGlkZXJDb250cm9sc1N0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy5zbGlkZXJDb250cm9scy52YWx1ZTtcclxuY29uc3Qgc2xpZGVyc0Rlc2NyaXB0aW9uU3RyaW5nID0gT2htc0xhd0ExMXlTdHJpbmdzLnNsaWRlcnNEZXNjcmlwdGlvbi52YWx1ZTtcclxuY29uc3QgbGV0dGVyUlN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy5sZXR0ZXJSLnZhbHVlO1xyXG5jb25zdCBsZXR0ZXJWU3RyaW5nID0gT2htc0xhd0ExMXlTdHJpbmdzLmxldHRlclYudmFsdWU7XHJcbmNvbnN0IHNocmlua3NTdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3Muc2hyaW5rcy52YWx1ZTtcclxuY29uc3QgZ3Jvd3NTdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3MuZ3Jvd3MudmFsdWU7XHJcbmNvbnN0IGFMb3RTdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3MuYUxvdC52YWx1ZTtcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBOVU1CRVJfT0ZfTEVUVEVSX1NJWkVTID0gT2htc0xhd0ExMXlTdHJpbmdzLm51bWJlck9mU2l6ZXMudmFsdWU7IC8vIHBkb20gLSB0aGUgbnVtYmVyIG9mIHNpemVzIHRoYXQgbGV0dGVycyBjYW4gYmUgZGVzY3JpYmVkIGFzLlxyXG5cclxuY2xhc3MgQ29udHJvbFBhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge09obXNMYXdNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge09obXNMYXdEZXNjcmliZXJ9IG9obXNMYXdEZXNjcmliZXJcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBvaG1zTGF3RGVzY3JpYmVyLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICB4TWFyZ2luOiAzMCxcclxuICAgICAgeU1hcmdpbjogMTAsXHJcbiAgICAgIGxpbmVXaWR0aDogMyxcclxuICAgICAgcmVzaXplOiBmYWxzZSxcclxuICAgICAgcHJldmVudEZpdDogdHJ1ZSwgLy8gdXNlZCB0byBhdm9pZCBqb3N0bGluZyBpbiB0aGUgY29udHJvbCBwYW5lbCB3aGVuIHRoZSByZXNpc3RhbmNlIGNoYW5nZXMgcXVpY2tseSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9vaG1zLWxhdy9pc3N1ZXMvNjhcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB2b2x0YWdlUHJvcGVydHkgPSBtb2RlbC52b2x0YWdlUHJvcGVydHk7XHJcbiAgICBjb25zdCByZXNpc3RhbmNlUHJvcGVydHkgPSBtb2RlbC5yZXNpc3RhbmNlUHJvcGVydHk7XHJcbiAgICBjb25zdCBjdXJyZW50UHJvcGVydHkgPSBtb2RlbC5jdXJyZW50UHJvcGVydHk7XHJcblxyXG4gICAgLy8gcGRvbSAtIHRvIGFsZXJ0IGNoYW5nZXMgdG8gYXNzaXN0aXZlIGRldmljZXNcclxuICAgIGNvbnN0IHJlc2lzdGFuY2VVdHRlcmFuY2UgPSBuZXcgVmFsdWVDaGFuZ2VVdHRlcmFuY2UoKTtcclxuICAgIGNvbnN0IHZvbHRhZ2VVdHRlcmFuY2UgPSBuZXcgVmFsdWVDaGFuZ2VVdHRlcmFuY2UoKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIHZvbHRhZ2Ugc2xpZGVyIHdpdGggcmVhZG91dCBhbmQgbGFiZWxzXHJcbiAgICBsZXQgb2xkVm9sdGFnZTsgLy8gc3RvcmVkIG9uIHN0YXJ0RHJhZztcclxuICAgIGxldCBuZXdWb2x0YWdlOyAvLyBzdG9yZWQgb24gZW5kRHJhZztcclxuICAgIGNvbnN0IHZvbHRhZ2VTbGlkZXIgPSBuZXcgU2xpZGVyVW5pdChcclxuICAgICAgdm9sdGFnZVByb3BlcnR5LFxyXG4gICAgICBPaG1zTGF3Q29uc3RhbnRzLlZPTFRBR0VfUkFOR0UsXHJcbiAgICAgIHZvbHRhZ2VTeW1ib2xTdHJpbmcsXHJcbiAgICAgIHZvbHRhZ2VTdHJpbmcsXHJcbiAgICAgIHZvbHRhZ2VVbml0c1N0cmluZyxcclxuICAgICAgdm9sdGFnZVNsaWRlckxhYmVsU3RyaW5nLFxyXG4gICAgICB7XHJcbiAgICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG5cclxuICAgICAgICAgIC8vIHBkb21cclxuICAgICAgICAgIGtleWJvYXJkU3RlcDogMC41LCAvLyB2b2x0c1xyXG4gICAgICAgICAgYTExeUNyZWF0ZUFyaWFWYWx1ZVRleHQ6IHZhbHVlID0+IFN0cmluZ1V0aWxzLmZpbGxJbiggdm9sdGFnZVVuaXRzUGF0dGVyblN0cmluZywgeyB2YWx1ZTogdmFsdWUgfSApLFxyXG4gICAgICAgICAgc3RhcnREcmFnOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIG9sZFZvbHRhZ2UgPSB2b2x0YWdlUHJvcGVydHkuZ2V0KCk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZW5kRHJhZzogKCkgPT4ge1xyXG4gICAgICAgICAgICBuZXdWb2x0YWdlID0gdm9sdGFnZVByb3BlcnR5LmdldCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBvbGRWb2x0YWdlICE9PSBuZXdWb2x0YWdlICkge1xyXG4gICAgICAgICAgICAgIC8vIHBkb20gLSB3aGVuIFYgY2hhbmdlcywgYW5ub3VuY2UgYW4gYWxlcnQgdGhhdCBkZXNjcmliZXMgdGhlIGNoYW5nZVxyXG4gICAgICAgICAgICAgIGNvbnN0IHNpemVDaGFuZ2UgPSBuZXdWb2x0YWdlIC0gb2xkVm9sdGFnZSA+IDAgPyBncm93c1N0cmluZyA6IHNocmlua3NTdHJpbmc7XHJcbiAgICAgICAgICAgICAgdm9sdGFnZVV0dGVyYW5jZS5hbGVydCA9IG9obXNMYXdEZXNjcmliZXIuZ2V0VmFsdWVDaGFuZ2VBbGVydFN0cmluZyggbGV0dGVyVlN0cmluZywgc2l6ZUNoYW5nZSwgc2l6ZUNoYW5nZSApO1xyXG4gICAgICAgICAgICAgIHZvbHRhZ2VTbGlkZXIuYWxlcnREZXNjcmlwdGlvblV0dGVyYW5jZSggdm9sdGFnZVV0dGVyYW5jZSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVjaW1hbFBsYWNlczogT2htc0xhd0NvbnN0YW50cy5WT0xUQUdFX1NJR19GSUdTLFxyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndm9sdGFnZVNsaWRlcicgKVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGxldCBvbGRSZXNpc3RhbmNlOyAvLyBzdG9yZWQgb24gc3RhcnREcmFnXHJcbiAgICBsZXQgbmV3UmVzaXN0YW5jZTsgLy8gc3RvcmVkIG9uIGVuZERyYWdcclxuICAgIGxldCBvbGRDdXJyZW50O1xyXG4gICAgbGV0IG5ld0N1cnJlbnQ7XHJcblxyXG4gICAgLy8gYmFzZWQgb24gdGhlIG51bWJlciBvZiBzaXplcyBmb3IgdGhlIGZvcm11bGEgbGV0dGVyc1xyXG4gICAgY29uc3QgY3VycmVudFJhbmdlUGVyU2l6ZSA9ICggT2htc0xhd01vZGVsLmdldEN1cnJlbnRSYW5nZSgpLm1heCAtIE9obXNMYXdNb2RlbC5nZXRDdXJyZW50UmFuZ2UoKS5taW4gKSAvIE5VTUJFUl9PRl9MRVRURVJfU0laRVM7XHJcbiAgICBjb25zdCB0d29TaXplQ3VycmVudFRocmVzaGhvbGQgPSBjdXJyZW50UmFuZ2VQZXJTaXplICogMjsgLy8gYW1vdW50IG9mIGN1cnJlbnQgdGhhdCBtdXN0IGNoYW5nZSB0byBhZGp1c3QgY2hhbmdlIHRoZSBjdXJyZW50IDIgYTExeSBzaXplcy5cclxuXHJcbiAgICAvLyBwZG9tIC0gVGhpcyBmdW5jdGlvbiB3aWxsIGNyZWF0ZSB0aGUgc3RyaW5nIGFsZXJ0IHRvIG5vdGlmeSB0aGUgcmVzaXN0YW5jZSBzbGlkZXIgaGFzIGJlZW4gY2hhbmdlZC5cclxuICAgIGNvbnN0IGVuZFJlc2lzdGFuY2VEcmFnID0gKCkgPT4ge1xyXG4gICAgICBuZXdSZXNpc3RhbmNlID0gcmVzaXN0YW5jZVByb3BlcnR5LmdldCgpO1xyXG4gICAgICBuZXdDdXJyZW50ID0gY3VycmVudFByb3BlcnR5LmdldCgpO1xyXG5cclxuICAgICAgaWYgKCBuZXdSZXNpc3RhbmNlICE9PSBvbGRSZXNpc3RhbmNlICkge1xyXG4gICAgICAgIGNvbnN0IHJlc2lzdGFuY2VDaGFuZ2UgPSBuZXdSZXNpc3RhbmNlIC0gb2xkUmVzaXN0YW5jZTtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q2hhbmdlID0gbmV3Q3VycmVudCAtIG9sZEN1cnJlbnQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHJTaXplQ2hhbmdlID0gcmVzaXN0YW5jZUNoYW5nZSA+IDAgPyBncm93c1N0cmluZyA6IHNocmlua3NTdHJpbmc7XHJcbiAgICAgICAgbGV0IGlTaXplQ2hhbmdlID0gcmVzaXN0YW5jZUNoYW5nZSA8IDAgPyBncm93c1N0cmluZyA6IHNocmlua3NTdHJpbmc7XHJcbiAgICAgICAgaVNpemVDaGFuZ2UgKz0gTWF0aC5hYnMoIGN1cnJlbnRDaGFuZ2UgKSA+IHR3b1NpemVDdXJyZW50VGhyZXNoaG9sZCA/IGAgJHthTG90U3RyaW5nfWAgOiAnJztcclxuXHJcbiAgICAgICAgcmVzaXN0YW5jZVV0dGVyYW5jZS5hbGVydCA9IG9obXNMYXdEZXNjcmliZXIuZ2V0VmFsdWVDaGFuZ2VBbGVydFN0cmluZyggbGV0dGVyUlN0cmluZywgclNpemVDaGFuZ2UsIGlTaXplQ2hhbmdlICk7XHJcbiAgICAgICAgcmVzaXN0YW5jZVNsaWRlci5hbGVydERlc2NyaXB0aW9uVXR0ZXJhbmNlKCByZXNpc3RhbmNlVXR0ZXJhbmNlICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSByZXNpc3RhbmNlIHNsaWRlciB3aXRoIHJlYWRvdXQgYW5kIGxhYmVsc1xyXG4gICAgY29uc3QgcmVzaXN0YW5jZVNsaWRlciA9IG5ldyBTbGlkZXJVbml0KFxyXG4gICAgICByZXNpc3RhbmNlUHJvcGVydHksXHJcbiAgICAgIE9obXNMYXdDb25zdGFudHMuUkVTSVNUQU5DRV9SQU5HRSxcclxuICAgICAgcmVzaXN0YW5jZVN5bWJvbFN0cmluZyxcclxuICAgICAgcmVzaXN0YW5jZVN0cmluZyxcclxuICAgICAgU2NlbmVyeVBoZXRTdHJpbmdzLnN5bWJvbC5vaG1zU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIHJlc2lzdGFuY2VTbGlkZXJMYWJlbFN0cmluZyxcclxuICAgICAge1xyXG4gICAgICAgIHNsaWRlck9wdGlvbnM6IHtcclxuXHJcbiAgICAgICAgICAvLyBwZG9tXHJcbiAgICAgICAgICBrZXlib2FyZFN0ZXA6IDIwLCAvLyBvaG1zXHJcbiAgICAgICAgICBzaGlmdEtleWJvYXJkU3RlcDogMSwgLy8gb2htc1xyXG4gICAgICAgICAgYTExeUNyZWF0ZUFyaWFWYWx1ZVRleHQ6IHZhbHVlID0+IFN0cmluZ1V0aWxzLmZpbGxJbiggcmVzaXN0YW5jZVVuaXRzUGF0dGVyblN0cmluZywgeyB2YWx1ZTogdmFsdWUgfSApLFxyXG4gICAgICAgICAgc3RhcnREcmFnOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIG9sZFJlc2lzdGFuY2UgPSByZXNpc3RhbmNlUHJvcGVydHkuZ2V0KCk7XHJcbiAgICAgICAgICAgIG9sZEN1cnJlbnQgPSBjdXJyZW50UHJvcGVydHkuZ2V0KCk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZW5kRHJhZzogZW5kUmVzaXN0YW5jZURyYWdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlY2ltYWxQbGFjZXM6IE9obXNMYXdDb25zdGFudHMuUkVTSVNUQU5DRV9TSUdfRklHUyxcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Jlc2lzdGFuY2VTbGlkZXInIClcclxuICAgICAgfSApO1xyXG5cclxuICAgIC8vIFVzZSBhIGNvbnRlbnQgbm9kZSBzbyB0aGF0IHRoZSBQYW5lbCBjYW4gc3Vycm91bmQgaXQgZnVsbHlcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiAzMCwgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxyXG4gICAgICBjaGlsZHJlbjogWyB2b2x0YWdlU2xpZGVyLCByZXNpc3RhbmNlU2xpZGVyIF0sXHJcblxyXG4gICAgICAvLyBwZG9tIC0gY29udGFpbiB0aGUgc2xpZGVycyBpbiBhIGxpc3RcclxuICAgICAgbGFiZWxUYWdOYW1lOiAnaDMnLFxyXG4gICAgICB0YWdOYW1lOiAnZGl2JyxcclxuICAgICAgbGFiZWxDb250ZW50OiBzbGlkZXJDb250cm9sc1N0cmluZyxcclxuICAgICAgZGVzY3JpcHRpb25Db250ZW50OiBzbGlkZXJzRGVzY3JpcHRpb25TdHJpbmdcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgKHJlYWQtb25seSkge0Rlcml2ZWRQcm9wZXJ0eS48Ym9vbGVhbj59IC0gYSBwcm9wZXJ0eSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGVpdGhlciBzbGlkZXIgaXMgYmVpbmdcclxuICAgIC8vIGRyYWdnZWQgdmlhIGtleWJvYXJkIGludGVyYWN0aW9uXHJcbiAgICB0aGlzLnNsaWRlckJlaW5nRHJhZ2dlZEJ5S2V5Ym9hcmRQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgdm9sdGFnZVNsaWRlci5zbGlkZXJEcmFnZ2luZ0J5S2V5Ym9hcmRQcm9wZXJ0eSwgcmVzaXN0YW5jZVNsaWRlci5zbGlkZXJEcmFnZ2luZ0J5S2V5Ym9hcmRQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHZvbHRhZ2VTbGlkZXJEcmFnZ2VkQnlLZXlib2FyZCwgcmVzaXN0YW5jZVNsaWRlckRyYWdnZWRCeUtleWJvYXJkICkgPT4gdm9sdGFnZVNsaWRlckRyYWdnZWRCeUtleWJvYXJkIHx8IHJlc2lzdGFuY2VTbGlkZXJEcmFnZ2VkQnlLZXlib2FyZFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbm9obXNMYXcucmVnaXN0ZXIoICdDb250cm9sUGFuZWwnLCBDb250cm9sUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyxrQkFBa0IsTUFBTSxtREFBbUQ7QUFDbEYsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0Msb0JBQW9CLE1BQU0sd0RBQXdEO0FBQ3pGLE9BQU9DLE9BQU8sTUFBTSxrQkFBa0I7QUFDdEMsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxZQUFZLE1BQU0sMEJBQTBCO0FBQ25ELE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQUN6RCxPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFDckQsT0FBT0MsVUFBVSxNQUFNLGlCQUFpQjtBQUV4QyxNQUFNQyxnQkFBZ0IsR0FBR0wsY0FBYyxDQUFDTSxVQUFVO0FBQ2xELE1BQU1DLHNCQUFzQixHQUFHUCxjQUFjLENBQUNRLGdCQUFnQjtBQUM5RCxNQUFNQyxhQUFhLEdBQUdULGNBQWMsQ0FBQ1UsT0FBTztBQUM1QyxNQUFNQyxtQkFB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