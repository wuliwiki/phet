// Copyright 2013-2021, University of Colorado Boulder

/**
 * View of the battery pack at the top of the wire
 * @author Vasily Shakhov (Mlearner)
 * @author Anton Ulyanov (Mlearner)
 */

import Utils from '../../../../dot/js/Utils.js';
import merge from '../../../../phet-core/js/merge.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import { Node } from '../../../../scenery/js/imports.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import ohmsLaw from '../../ohmsLaw.js';
import OhmsLawA11yStrings from '../OhmsLawA11yStrings.js';
import OhmsLawConstants from '../OhmsLawConstants.js';
import BatteryView from './BatteryView.js';
const batteriesSupplyPatternString = OhmsLawA11yStrings.batteriesSupplyPattern.value;
class BatteriesView extends Node {
  /**
   * @param {Property.<number>} voltageProperty
   * @param {Object} [options]
   */
  constructor(voltageProperty, options) {
    options = merge({
      tandem: Tandem.REQUIRED,
      // pdom
      tagName: 'li' // this assumes that it is a child of a 'ul'
    }, options);
    super();

    // Store battery nodes in an array
    const batteries = [];
    const batteriesGroupTandem = options.tandem.createGroupTandem('battery');

    // Create an array of batteries; enough to fill the entire wire.
    for (let i = 0; i < OhmsLawConstants.MAX_NUMBER_OF_BATTERIES; i++) {
      const leftPosition = i * OhmsLawConstants.BATTERY_WIDTH;
      const battery = new BatteryView({
        x: leftPosition,
        y: 0,
        tandem: batteriesGroupTandem.createNextTandem()
      });

      // Add them as children to this node, and to the array for manipulation
      this.addChild(battery);
      batteries.push(battery);
    }

    // Present for the lifetime of the simulation; no need to unlink.
    voltageProperty.link(voltage => {
      batteries.forEach((battery, index) => {
        // Determine associated with a particular battery
        let voltageBattery = Math.min(OhmsLawConstants.AA_VOLTAGE, voltage - index * OhmsLawConstants.AA_VOLTAGE);
        voltageBattery = Utils.roundToInterval(voltageBattery, Math.pow(10, -OhmsLawConstants.VOLTAGE_SIG_FIGS));

        // Battery is only visible if it has a voltage.
        battery.visible = voltageBattery > 0;
        if (battery.visible) {
          battery.setVoltage(voltageBattery);
        }
      });

      // pdom - update the description for the number of batteries
      this.innerContent = StringUtils.fillIn(batteriesSupplyPatternString, {
        voltage: Utils.toFixed(voltage, OhmsLawConstants.VOLTAGE_SIG_FIGS)
      });
    });
    this.mutate(options);
  }
}
ohmsLaw.register('BatteriesView', BatteriesView);
export default BatteriesView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIm1lcmdlIiwiU3RyaW5nVXRpbHMiLCJOb2RlIiwiVGFuZGVtIiwib2htc0xhdyIsIk9obXNMYXdBMTF5U3RyaW5ncyIsIk9obXNMYXdDb25zdGFudHMiLCJCYXR0ZXJ5VmlldyIsImJhdHRlcmllc1N1cHBseVBhdHRlcm5TdHJpbmciLCJiYXR0ZXJpZXNTdXBwbHlQYXR0ZXJuIiwidmFsdWUiLCJCYXR0ZXJpZXNWaWV3IiwiY29uc3RydWN0b3IiLCJ2b2x0YWdlUHJvcGVydHkiLCJvcHRpb25zIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YWdOYW1lIiwiYmF0dGVyaWVzIiwiYmF0dGVyaWVzR3JvdXBUYW5kZW0iLCJjcmVhdGVHcm91cFRhbmRlbSIsImkiLCJNQVhfTlVNQkVSX09GX0JBVFRFUklFUyIsImxlZnRQb3NpdGlvbiIsIkJBVFRFUllfV0lEVEgiLCJiYXR0ZXJ5IiwieCIsInkiLCJjcmVhdGVOZXh0VGFuZGVtIiwiYWRkQ2hpbGQiLCJwdXNoIiwibGluayIsInZvbHRhZ2UiLCJmb3JFYWNoIiwiaW5kZXgiLCJ2b2x0YWdlQmF0dGVyeSIsIk1hdGgiLCJtaW4iLCJBQV9WT0xUQUdFIiwicm91bmRUb0ludGVydmFsIiwicG93IiwiVk9MVEFHRV9TSUdfRklHUyIsInZpc2libGUiLCJzZXRWb2x0YWdlIiwiaW5uZXJDb250ZW50IiwiZmlsbEluIiwidG9GaXhlZCIsIm11dGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmF0dGVyaWVzVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IG9mIHRoZSBiYXR0ZXJ5IHBhY2sgYXQgdGhlIHRvcCBvZiB0aGUgd2lyZVxyXG4gKiBAYXV0aG9yIFZhc2lseSBTaGFraG92IChNbGVhcm5lcilcclxuICogQGF1dGhvciBBbnRvbiBVbHlhbm92IChNbGVhcm5lcilcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IG9obXNMYXcgZnJvbSAnLi4vLi4vb2htc0xhdy5qcyc7XHJcbmltcG9ydCBPaG1zTGF3QTExeVN0cmluZ3MgZnJvbSAnLi4vT2htc0xhd0ExMXlTdHJpbmdzLmpzJztcclxuaW1wb3J0IE9obXNMYXdDb25zdGFudHMgZnJvbSAnLi4vT2htc0xhd0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBCYXR0ZXJ5VmlldyBmcm9tICcuL0JhdHRlcnlWaWV3LmpzJztcclxuXHJcbmNvbnN0IGJhdHRlcmllc1N1cHBseVBhdHRlcm5TdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3MuYmF0dGVyaWVzU3VwcGx5UGF0dGVybi52YWx1ZTtcclxuXHJcbmNsYXNzIEJhdHRlcmllc1ZpZXcgZXh0ZW5kcyBOb2RlIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjxudW1iZXI+fSB2b2x0YWdlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHZvbHRhZ2VQcm9wZXJ0eSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIHRhZ05hbWU6ICdsaScgLy8gdGhpcyBhc3N1bWVzIHRoYXQgaXQgaXMgYSBjaGlsZCBvZiBhICd1bCdcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIFN0b3JlIGJhdHRlcnkgbm9kZXMgaW4gYW4gYXJyYXlcclxuICAgIGNvbnN0IGJhdHRlcmllcyA9IFtdO1xyXG5cclxuICAgIGNvbnN0IGJhdHRlcmllc0dyb3VwVGFuZGVtID0gb3B0aW9ucy50YW5kZW0uY3JlYXRlR3JvdXBUYW5kZW0oICdiYXR0ZXJ5JyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhbiBhcnJheSBvZiBiYXR0ZXJpZXM7IGVub3VnaCB0byBmaWxsIHRoZSBlbnRpcmUgd2lyZS5cclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IE9obXNMYXdDb25zdGFudHMuTUFYX05VTUJFUl9PRl9CQVRURVJJRVM7IGkrKyApIHtcclxuICAgICAgY29uc3QgbGVmdFBvc2l0aW9uID0gaSAqIE9obXNMYXdDb25zdGFudHMuQkFUVEVSWV9XSURUSDtcclxuICAgICAgY29uc3QgYmF0dGVyeSA9IG5ldyBCYXR0ZXJ5VmlldyggeyB4OiBsZWZ0UG9zaXRpb24sIHk6IDAsIHRhbmRlbTogYmF0dGVyaWVzR3JvdXBUYW5kZW0uY3JlYXRlTmV4dFRhbmRlbSgpIH0gKTtcclxuXHJcbiAgICAgIC8vIEFkZCB0aGVtIGFzIGNoaWxkcmVuIHRvIHRoaXMgbm9kZSwgYW5kIHRvIHRoZSBhcnJheSBmb3IgbWFuaXB1bGF0aW9uXHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIGJhdHRlcnkgKTtcclxuICAgICAgYmF0dGVyaWVzLnB1c2goIGJhdHRlcnkgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcmVzZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbXVsYXRpb247IG5vIG5lZWQgdG8gdW5saW5rLlxyXG4gICAgdm9sdGFnZVByb3BlcnR5LmxpbmsoIHZvbHRhZ2UgPT4ge1xyXG5cclxuICAgICAgYmF0dGVyaWVzLmZvckVhY2goICggYmF0dGVyeSwgaW5kZXggKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIERldGVybWluZSBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0aWN1bGFyIGJhdHRlcnlcclxuICAgICAgICBsZXQgdm9sdGFnZUJhdHRlcnkgPSBNYXRoLm1pbiggT2htc0xhd0NvbnN0YW50cy5BQV9WT0xUQUdFLCB2b2x0YWdlIC0gaW5kZXggKiBPaG1zTGF3Q29uc3RhbnRzLkFBX1ZPTFRBR0UgKTtcclxuICAgICAgICB2b2x0YWdlQmF0dGVyeSA9IFV0aWxzLnJvdW5kVG9JbnRlcnZhbCggdm9sdGFnZUJhdHRlcnksIE1hdGgucG93KCAxMCwgLU9obXNMYXdDb25zdGFudHMuVk9MVEFHRV9TSUdfRklHUyApICk7XHJcblxyXG4gICAgICAgIC8vIEJhdHRlcnkgaXMgb25seSB2aXNpYmxlIGlmIGl0IGhhcyBhIHZvbHRhZ2UuXHJcbiAgICAgICAgYmF0dGVyeS52aXNpYmxlID0gKCB2b2x0YWdlQmF0dGVyeSA+IDAgKTtcclxuXHJcbiAgICAgICAgaWYgKCBiYXR0ZXJ5LnZpc2libGUgKSB7XHJcbiAgICAgICAgICBiYXR0ZXJ5LnNldFZvbHRhZ2UoIHZvbHRhZ2VCYXR0ZXJ5ICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICAvLyBwZG9tIC0gdXBkYXRlIHRoZSBkZXNjcmlwdGlvbiBmb3IgdGhlIG51bWJlciBvZiBiYXR0ZXJpZXNcclxuICAgICAgdGhpcy5pbm5lckNvbnRlbnQgPSBTdHJpbmdVdGlscy5maWxsSW4oIGJhdHRlcmllc1N1cHBseVBhdHRlcm5TdHJpbmcsIHtcclxuICAgICAgICB2b2x0YWdlOiBVdGlscy50b0ZpeGVkKCB2b2x0YWdlLCBPaG1zTGF3Q29uc3RhbnRzLlZPTFRBR0VfU0lHX0ZJR1MgKVxyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxub2htc0xhdy5yZWdpc3RlciggJ0JhdHRlcmllc1ZpZXcnLCBCYXR0ZXJpZXNWaWV3ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCYXR0ZXJpZXNWaWV3OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsT0FBTyxNQUFNLGtCQUFrQjtBQUN0QyxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MsZ0JBQWdCLE1BQU0sd0JBQXdCO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFFMUMsTUFBTUMsNEJBQTRCLEdBQUdILGtCQUFrQixDQUFDSSxzQkFBc0IsQ0FBQ0MsS0FBSztBQUVwRixNQUFNQyxhQUFhLFNBQVNULElBQUksQ0FBQztFQUMvQjtBQUNGO0FBQ0E7QUFDQTtFQUNFVSxXQUFXQSxDQUFFQyxlQUFlLEVBQUVDLE9BQU8sRUFBRztJQUV0Q0EsT0FBTyxHQUFHZCxLQUFLLENBQUU7TUFDZmUsTUFBTSxFQUFFWixNQUFNLENBQUNhLFFBQVE7TUFFdkI7TUFDQUMsT0FBTyxFQUFFLElBQUksQ0FBQztJQUNoQixDQUFDLEVBQUVILE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsTUFBTUksU0FBUyxHQUFHLEVBQUU7SUFFcEIsTUFBTUMsb0JBQW9CLEdBQUdMLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDSyxpQkFBaUIsQ0FBRSxTQUFVLENBQUM7O0lBRTFFO0lBQ0EsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdmLGdCQUFnQixDQUFDZ0IsdUJBQXVCLEVBQUVELENBQUMsRUFBRSxFQUFHO01BQ25FLE1BQU1FLFlBQVksR0FBR0YsQ0FBQyxHQUFHZixnQkFBZ0IsQ0FBQ2tCLGFBQWE7TUFDdkQsTUFBTUMsT0FBTyxHQUFHLElBQUlsQixXQUFXLENBQUU7UUFBRW1CLENBQUMsRUFBRUgsWUFBWTtRQUFFSSxDQUFDLEVBQUUsQ0FBQztRQUFFWixNQUFNLEVBQUVJLG9CQUFvQixDQUFDUyxnQkFBZ0IsQ0FBQztNQUFFLENBQUUsQ0FBQzs7TUFFN0c7TUFDQSxJQUFJLENBQUNDLFFBQVEsQ0FBRUosT0FBUSxDQUFDO01BQ3hCUCxTQUFTLENBQUNZLElBQUksQ0FBRUwsT0FBUSxDQUFDO0lBQzNCOztJQUVBO0lBQ0FaLGVBQWUsQ0FBQ2tCLElBQUksQ0FBRUMsT0FBTyxJQUFJO01BRS9CZCxTQUFTLENBQUNlLE9BQU8sQ0FBRSxDQUFFUixPQUFPLEVBQUVTLEtBQUssS0FBTTtRQUV2QztRQUNBLElBQUlDLGNBQWMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUUvQixnQkFBZ0IsQ0FBQ2dDLFVBQVUsRUFBRU4sT0FBTyxHQUFHRSxLQUFLLEdBQUc1QixnQkFBZ0IsQ0FBQ2dDLFVBQVcsQ0FBQztRQUMzR0gsY0FBYyxHQUFHcEMsS0FBSyxDQUFDd0MsZUFBZSxDQUFFSixjQUFjLEVBQUVDLElBQUksQ0FBQ0ksR0FBRyxDQUFFLEVBQUUsRUFBRSxDQUFDbEMsZ0JBQWdCLENBQUNtQyxnQkFBaUIsQ0FBRSxDQUFDOztRQUU1RztRQUNBaEIsT0FBTyxDQUFDaUIsT0FBTyxHQUFLUCxjQUFjLEdBQUcsQ0FBRztRQUV4QyxJQUFLVixPQUFPLENBQUNpQixPQUFPLEVBQUc7VUFDckJqQixPQUFPLENBQUNrQixVQUFVLENBQUVSLGNBQWUsQ0FBQztRQUN0QztNQUNGLENBQUUsQ0FBQzs7TUFFSDtNQUNBLElBQUksQ0FBQ1MsWUFBWSxHQUFHM0MsV0FBVyxDQUFDNEMsTUFBTSxDQUFFckMsNEJBQTRCLEVBQUU7UUFDcEV3QixPQUFPLEVBQUVqQyxLQUFLLENBQUMrQyxPQUFPLENBQUVkLE9BQU8sRUFBRTFCLGdCQUFnQixDQUFDbUMsZ0JBQWlCO01BQ3JFLENBQUUsQ0FBQztJQUNMLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ00sTUFBTSxDQUFFakMsT0FBUSxDQUFDO0VBQ3hCO0FBQ0Y7QUFFQVYsT0FBTyxDQUFDNEMsUUFBUSxDQUFFLGVBQWUsRUFBRXJDLGFBQWMsQ0FBQztBQUVsRCxlQUFlQSxhQUFhIn0=