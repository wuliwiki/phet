// Copyright 2017-2021, University of Colorado Boulder

/**
 * Constants used in multiple locations within the 'Ohms Law' simulation.
 *
 * @author Martin Veillette (Berea College)
 */

import Range from '../../../dot/js/Range.js';
import RangeWithValue from '../../../dot/js/RangeWithValue.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import ohmsLaw from '../ohmsLaw.js';
import OhmsLawA11yStrings from './OhmsLawA11yStrings.js';
const tinyString = OhmsLawA11yStrings.tiny.value;
const verySmallString = OhmsLawA11yStrings.verySmall.value;
const smallString = OhmsLawA11yStrings.small.value;
const mediumSizeString = OhmsLawA11yStrings.mediumSize.value;
const largeString = OhmsLawA11yStrings.large.value;
const veryLargeString = OhmsLawA11yStrings.veryLarge.value;
const hugeString = OhmsLawA11yStrings.huge.value;
const muchMuchSmallerThanString = OhmsLawA11yStrings.muchMuchSmallerThan.value;
const muchSmallerThanString = OhmsLawA11yStrings.muchSmallerThan.value;
const slightlySmallerThanString = OhmsLawA11yStrings.slightlySmallerThan.value;
const comparableToString = OhmsLawA11yStrings.comparableTo.value;
const slightlyLargerThanString = OhmsLawA11yStrings.slightlyLargerThan.value;
const muchLargerThanString = OhmsLawA11yStrings.muchLargerThan.value;
const muchMuchLargerThanString = OhmsLawA11yStrings.muchMuchLargerThan.value;

// constants used by other constants
const RESISTANCE_RANGE = new RangeWithValue(10, 1000, 500); // in ohms
const VOLTAGE_RANGE = new RangeWithValue(0.1, 9, 4.5); // in volts

const WIRE_WIDTH = 505;
const BATTERIES_OFFSET = 30;
const AA_VOLTAGE = 1.5; // in volts
const MAX_NUMBER_OF_BATTERIES = Math.ceil(VOLTAGE_RANGE.max / AA_VOLTAGE);

// map for relative size of variables to their accessible description - ranges values are the ratio of sizes
// for instance, a value 0.25 means that the letter is 1/4 the size of the other
const COMPARATIVE_DESCRIPTION_RANGES = {
  MUCH_MUCH_SMALLER: {
    range: new Range(0, 0.25),
    description: muchMuchSmallerThanString
  },
  MUCH_SMALLER: {
    range: new Range(0.25, 0.50),
    description: muchSmallerThanString
  },
  SLIGHTLY_SMALLER: {
    range: new Range(0.50, 0.9),
    description: slightlySmallerThanString
  },
  COMPARABLE: {
    range: new Range(0.9, 1.10),
    description: comparableToString
  },
  SLIGHTLY_LARGER: {
    range: new Range(1.10, 2.0),
    description: slightlyLargerThanString
  },
  MUCH_LARGER: {
    range: new Range(2.0, 4.0),
    description: muchLargerThanString
  },
  MUCH_MUCH_LARGER: {
    range: new Range(4.0, Number.MAX_VALUE),
    description: muchMuchLargerThanString
  }
};
const OhmsLawConstants = {
  // colors
  BLUE_COLOR: '#0f0ffb',
  BLACK_COLOR: '#000',
  // range for sliders with default values
  RESISTANCE_RANGE: RESISTANCE_RANGE,
  VOLTAGE_RANGE: VOLTAGE_RANGE,
  // range of current values that can occur
  CURRENT_RANGE: new Range(VOLTAGE_RANGE.min / RESISTANCE_RANGE.max, VOLTAGE_RANGE.max / RESISTANCE_RANGE.min),
  // formula
  FONT_FAMILY: 'Times New Roman',
  // control panel
  SLIDER_WIDTH: 89,
  // slider unit
  SLIDER_HEIGHT: 210,
  SYMBOL_FONT: new PhetFont({
    family: 'Times New Roman',
    size: 60
  }),
  NAME_FONT: new PhetFont(16),
  READOUT_FONT: new PhetFont(28),
  UNIT_FONT: new PhetFont(28),
  UNIT_MAX_WIDTH: 45,
  // i18n

  // precision for each of the physical quantities in this sim
  VOLTAGE_SIG_FIGS: 1,
  RESISTANCE_SIG_FIGS: 0,
  CURRENT_MILLIAMPS_SIG_FIGS: 1,
  CURRENT_AMPS_SIG_FIGS: 3,
  // wire circuit
  WIRE_WIDTH: WIRE_WIDTH,
  WIRE_HEIGHT: 165,
  // battery
  MAX_NUMBER_OF_BATTERIES: MAX_NUMBER_OF_BATTERIES,
  BATTERIES_OFFSET: BATTERIES_OFFSET,
  BATTERY_HEIGHT: 38,
  AA_VOLTAGE: AA_VOLTAGE,
  BATTERY_WIDTH: (WIRE_WIDTH - BATTERIES_OFFSET * 2) / MAX_NUMBER_OF_BATTERIES,
  RELATIVE_SIZE_STRINGS: [tinyString, verySmallString, smallString, mediumSizeString, largeString, veryLargeString, hugeString],
  COMPARISON_SIZE_STRINGS: [muchMuchSmallerThanString, muchSmallerThanString, slightlySmallerThanString, comparableToString, slightlyLargerThanString, muchLargerThanString, muchMuchLargerThanString],
  COMPARATIVE_DESCRIPTION_RANGES: COMPARATIVE_DESCRIPTION_RANGES
};
ohmsLaw.register('OhmsLawConstants', OhmsLawConstants);
export default OhmsLawConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlJhbmdlV2l0aFZhbHVlIiwiUGhldEZvbnQiLCJvaG1zTGF3IiwiT2htc0xhd0ExMXlTdHJpbmdzIiwidGlueVN0cmluZyIsInRpbnkiLCJ2YWx1ZSIsInZlcnlTbWFsbFN0cmluZyIsInZlcnlTbWFsbCIsInNtYWxsU3RyaW5nIiwic21hbGwiLCJtZWRpdW1TaXplU3RyaW5nIiwibWVkaXVtU2l6ZSIsImxhcmdlU3RyaW5nIiwibGFyZ2UiLCJ2ZXJ5TGFyZ2VTdHJpbmciLCJ2ZXJ5TGFyZ2UiLCJodWdlU3RyaW5nIiwiaHVnZSIsIm11Y2hNdWNoU21hbGxlclRoYW5TdHJpbmciLCJtdWNoTXVjaFNtYWxsZXJUaGFuIiwibXVjaFNtYWxsZXJUaGFuU3RyaW5nIiwibXVjaFNtYWxsZXJUaGFuIiwic2xpZ2h0bHlTbWFsbGVyVGhhblN0cmluZyIsInNsaWdodGx5U21hbGxlclRoYW4iLCJjb21wYXJhYmxlVG9TdHJpbmciLCJjb21wYXJhYmxlVG8iLCJzbGlnaHRseUxhcmdlclRoYW5TdHJpbmciLCJzbGlnaHRseUxhcmdlclRoYW4iLCJtdWNoTGFyZ2VyVGhhblN0cmluZyIsIm11Y2hMYXJnZXJUaGFuIiwibXVjaE11Y2hMYXJnZXJUaGFuU3RyaW5nIiwibXVjaE11Y2hMYXJnZXJUaGFuIiwiUkVTSVNUQU5DRV9SQU5HRSIsIlZPTFRBR0VfUkFOR0UiLCJXSVJFX1dJRFRIIiwiQkFUVEVSSUVTX09GRlNFVCIsIkFBX1ZPTFRBR0UiLCJNQVhfTlVNQkVSX09GX0JBVFRFUklFUyIsIk1hdGgiLCJjZWlsIiwibWF4IiwiQ09NUEFSQVRJVkVfREVTQ1JJUFRJT05fUkFOR0VTIiwiTVVDSF9NVUNIX1NNQUxMRVIiLCJyYW5nZSIsImRlc2NyaXB0aW9uIiwiTVVDSF9TTUFMTEVSIiwiU0xJR0hUTFlfU01BTExFUiIsIkNPTVBBUkFCTEUiLCJTTElHSFRMWV9MQVJHRVIiLCJNVUNIX0xBUkdFUiIsIk1VQ0hfTVVDSF9MQVJHRVIiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJPaG1zTGF3Q29uc3RhbnRzIiwiQkxVRV9DT0xPUiIsIkJMQUNLX0NPTE9SIiwiQ1VSUkVOVF9SQU5HRSIsIm1pbiIsIkZPTlRfRkFNSUxZIiwiU0xJREVSX1dJRFRIIiwiU0xJREVSX0hFSUdIVCIsIlNZTUJPTF9GT05UIiwiZmFtaWx5Iiwic2l6ZSIsIk5BTUVfRk9OVCIsIlJFQURPVVRfRk9OVCIsIlVOSVRfRk9OVCIsIlVOSVRfTUFYX1dJRFRIIiwiVk9MVEFHRV9TSUdfRklHUyIsIlJFU0lTVEFOQ0VfU0lHX0ZJR1MiLCJDVVJSRU5UX01JTExJQU1QU19TSUdfRklHUyIsIkNVUlJFTlRfQU1QU19TSUdfRklHUyIsIldJUkVfSEVJR0hUIiwiQkFUVEVSWV9IRUlHSFQiLCJCQVRURVJZX1dJRFRIIiwiUkVMQVRJVkVfU0laRV9TVFJJTkdTIiwiQ09NUEFSSVNPTl9TSVpFX1NUUklOR1MiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk9obXNMYXdDb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29uc3RhbnRzIHVzZWQgaW4gbXVsdGlwbGUgbG9jYXRpb25zIHdpdGhpbiB0aGUgJ09obXMgTGF3JyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGUgKEJlcmVhIENvbGxlZ2UpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBSYW5nZVdpdGhWYWx1ZSBmcm9tICcuLi8uLi8uLi9kb3QvanMvUmFuZ2VXaXRoVmFsdWUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IG9obXNMYXcgZnJvbSAnLi4vb2htc0xhdy5qcyc7XHJcbmltcG9ydCBPaG1zTGF3QTExeVN0cmluZ3MgZnJvbSAnLi9PaG1zTGF3QTExeVN0cmluZ3MuanMnO1xyXG5cclxuY29uc3QgdGlueVN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy50aW55LnZhbHVlO1xyXG5jb25zdCB2ZXJ5U21hbGxTdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3MudmVyeVNtYWxsLnZhbHVlO1xyXG5jb25zdCBzbWFsbFN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy5zbWFsbC52YWx1ZTtcclxuY29uc3QgbWVkaXVtU2l6ZVN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy5tZWRpdW1TaXplLnZhbHVlO1xyXG5jb25zdCBsYXJnZVN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy5sYXJnZS52YWx1ZTtcclxuY29uc3QgdmVyeUxhcmdlU3RyaW5nID0gT2htc0xhd0ExMXlTdHJpbmdzLnZlcnlMYXJnZS52YWx1ZTtcclxuY29uc3QgaHVnZVN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy5odWdlLnZhbHVlO1xyXG5jb25zdCBtdWNoTXVjaFNtYWxsZXJUaGFuU3RyaW5nID0gT2htc0xhd0ExMXlTdHJpbmdzLm11Y2hNdWNoU21hbGxlclRoYW4udmFsdWU7XHJcbmNvbnN0IG11Y2hTbWFsbGVyVGhhblN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy5tdWNoU21hbGxlclRoYW4udmFsdWU7XHJcbmNvbnN0IHNsaWdodGx5U21hbGxlclRoYW5TdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3Muc2xpZ2h0bHlTbWFsbGVyVGhhbi52YWx1ZTtcclxuY29uc3QgY29tcGFyYWJsZVRvU3RyaW5nID0gT2htc0xhd0ExMXlTdHJpbmdzLmNvbXBhcmFibGVUby52YWx1ZTtcclxuY29uc3Qgc2xpZ2h0bHlMYXJnZXJUaGFuU3RyaW5nID0gT2htc0xhd0ExMXlTdHJpbmdzLnNsaWdodGx5TGFyZ2VyVGhhbi52YWx1ZTtcclxuY29uc3QgbXVjaExhcmdlclRoYW5TdHJpbmcgPSBPaG1zTGF3QTExeVN0cmluZ3MubXVjaExhcmdlclRoYW4udmFsdWU7XHJcbmNvbnN0IG11Y2hNdWNoTGFyZ2VyVGhhblN0cmluZyA9IE9obXNMYXdBMTF5U3RyaW5ncy5tdWNoTXVjaExhcmdlclRoYW4udmFsdWU7XHJcblxyXG4vLyBjb25zdGFudHMgdXNlZCBieSBvdGhlciBjb25zdGFudHNcclxuY29uc3QgUkVTSVNUQU5DRV9SQU5HRSA9IG5ldyBSYW5nZVdpdGhWYWx1ZSggMTAsIDEwMDAsIDUwMCApOyAvLyBpbiBvaG1zXHJcbmNvbnN0IFZPTFRBR0VfUkFOR0UgPSBuZXcgUmFuZ2VXaXRoVmFsdWUoIDAuMSwgOSwgNC41ICk7IC8vIGluIHZvbHRzXHJcblxyXG5jb25zdCBXSVJFX1dJRFRIID0gNTA1O1xyXG5jb25zdCBCQVRURVJJRVNfT0ZGU0VUID0gMzA7XHJcbmNvbnN0IEFBX1ZPTFRBR0UgPSAxLjU7IC8vIGluIHZvbHRzXHJcbmNvbnN0IE1BWF9OVU1CRVJfT0ZfQkFUVEVSSUVTID0gTWF0aC5jZWlsKCBWT0xUQUdFX1JBTkdFLm1heCAvIEFBX1ZPTFRBR0UgKTtcclxuXHJcbi8vIG1hcCBmb3IgcmVsYXRpdmUgc2l6ZSBvZiB2YXJpYWJsZXMgdG8gdGhlaXIgYWNjZXNzaWJsZSBkZXNjcmlwdGlvbiAtIHJhbmdlcyB2YWx1ZXMgYXJlIHRoZSByYXRpbyBvZiBzaXplc1xyXG4vLyBmb3IgaW5zdGFuY2UsIGEgdmFsdWUgMC4yNSBtZWFucyB0aGF0IHRoZSBsZXR0ZXIgaXMgMS80IHRoZSBzaXplIG9mIHRoZSBvdGhlclxyXG5jb25zdCBDT01QQVJBVElWRV9ERVNDUklQVElPTl9SQU5HRVMgPSB7XHJcbiAgTVVDSF9NVUNIX1NNQUxMRVI6IHtcclxuICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAsIDAuMjUgKSxcclxuICAgIGRlc2NyaXB0aW9uOiBtdWNoTXVjaFNtYWxsZXJUaGFuU3RyaW5nXHJcbiAgfSxcclxuICBNVUNIX1NNQUxMRVI6IHtcclxuICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAuMjUsIDAuNTAgKSxcclxuICAgIGRlc2NyaXB0aW9uOiBtdWNoU21hbGxlclRoYW5TdHJpbmdcclxuICB9LFxyXG4gIFNMSUdIVExZX1NNQUxMRVI6IHtcclxuICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAuNTAsIDAuOSApLFxyXG4gICAgZGVzY3JpcHRpb246IHNsaWdodGx5U21hbGxlclRoYW5TdHJpbmdcclxuICB9LFxyXG4gIENPTVBBUkFCTEU6IHtcclxuICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAuOSwgMS4xMCApLFxyXG4gICAgZGVzY3JpcHRpb246IGNvbXBhcmFibGVUb1N0cmluZ1xyXG4gIH0sXHJcbiAgU0xJR0hUTFlfTEFSR0VSOiB7XHJcbiAgICByYW5nZTogbmV3IFJhbmdlKCAxLjEwLCAyLjAgKSxcclxuICAgIGRlc2NyaXB0aW9uOiBzbGlnaHRseUxhcmdlclRoYW5TdHJpbmdcclxuICB9LFxyXG4gIE1VQ0hfTEFSR0VSOiB7XHJcbiAgICByYW5nZTogbmV3IFJhbmdlKCAyLjAsIDQuMCApLFxyXG4gICAgZGVzY3JpcHRpb246IG11Y2hMYXJnZXJUaGFuU3RyaW5nXHJcbiAgfSxcclxuICBNVUNIX01VQ0hfTEFSR0VSOiB7XHJcbiAgICByYW5nZTogbmV3IFJhbmdlKCA0LjAsIE51bWJlci5NQVhfVkFMVUUgKSxcclxuICAgIGRlc2NyaXB0aW9uOiBtdWNoTXVjaExhcmdlclRoYW5TdHJpbmdcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBPaG1zTGF3Q29uc3RhbnRzID0ge1xyXG5cclxuICAvLyBjb2xvcnNcclxuICBCTFVFX0NPTE9SOiAnIzBmMGZmYicsXHJcbiAgQkxBQ0tfQ09MT1I6ICcjMDAwJyxcclxuXHJcbiAgLy8gcmFuZ2UgZm9yIHNsaWRlcnMgd2l0aCBkZWZhdWx0IHZhbHVlc1xyXG4gIFJFU0lTVEFOQ0VfUkFOR0U6IFJFU0lTVEFOQ0VfUkFOR0UsXHJcbiAgVk9MVEFHRV9SQU5HRTogVk9MVEFHRV9SQU5HRSxcclxuXHJcbiAgLy8gcmFuZ2Ugb2YgY3VycmVudCB2YWx1ZXMgdGhhdCBjYW4gb2NjdXJcclxuICBDVVJSRU5UX1JBTkdFOiBuZXcgUmFuZ2UoIFZPTFRBR0VfUkFOR0UubWluIC8gUkVTSVNUQU5DRV9SQU5HRS5tYXgsIFZPTFRBR0VfUkFOR0UubWF4IC8gUkVTSVNUQU5DRV9SQU5HRS5taW4gKSxcclxuXHJcbiAgLy8gZm9ybXVsYVxyXG4gIEZPTlRfRkFNSUxZOiAnVGltZXMgTmV3IFJvbWFuJyxcclxuXHJcbiAgLy8gY29udHJvbCBwYW5lbFxyXG4gIFNMSURFUl9XSURUSDogODksXHJcblxyXG4gIC8vIHNsaWRlciB1bml0XHJcbiAgU0xJREVSX0hFSUdIVDogMjEwLFxyXG4gIFNZTUJPTF9GT05UOiBuZXcgUGhldEZvbnQoIHsgZmFtaWx5OiAnVGltZXMgTmV3IFJvbWFuJywgc2l6ZTogNjAgfSApLFxyXG4gIE5BTUVfRk9OVDogbmV3IFBoZXRGb250KCAxNiApLFxyXG4gIFJFQURPVVRfRk9OVDogbmV3IFBoZXRGb250KCAyOCApLFxyXG4gIFVOSVRfRk9OVDogbmV3IFBoZXRGb250KCAyOCApLFxyXG4gIFVOSVRfTUFYX1dJRFRIOiA0NSwgLy8gaTE4blxyXG5cclxuICAvLyBwcmVjaXNpb24gZm9yIGVhY2ggb2YgdGhlIHBoeXNpY2FsIHF1YW50aXRpZXMgaW4gdGhpcyBzaW1cclxuICBWT0xUQUdFX1NJR19GSUdTOiAxLFxyXG4gIFJFU0lTVEFOQ0VfU0lHX0ZJR1M6IDAsXHJcbiAgQ1VSUkVOVF9NSUxMSUFNUFNfU0lHX0ZJR1M6IDEsXHJcbiAgQ1VSUkVOVF9BTVBTX1NJR19GSUdTOiAzLFxyXG5cclxuICAvLyB3aXJlIGNpcmN1aXRcclxuICBXSVJFX1dJRFRIOiBXSVJFX1dJRFRILFxyXG4gIFdJUkVfSEVJR0hUOiAxNjUsXHJcblxyXG4gIC8vIGJhdHRlcnlcclxuICBNQVhfTlVNQkVSX09GX0JBVFRFUklFUzogTUFYX05VTUJFUl9PRl9CQVRURVJJRVMsXHJcbiAgQkFUVEVSSUVTX09GRlNFVDogQkFUVEVSSUVTX09GRlNFVCxcclxuICBCQVRURVJZX0hFSUdIVDogMzgsXHJcbiAgQUFfVk9MVEFHRTogQUFfVk9MVEFHRSxcclxuICBCQVRURVJZX1dJRFRIOiAoIFdJUkVfV0lEVEggLSBCQVRURVJJRVNfT0ZGU0VUICogMiApIC8gTUFYX05VTUJFUl9PRl9CQVRURVJJRVMsXHJcblxyXG4gIFJFTEFUSVZFX1NJWkVfU1RSSU5HUzogWyB0aW55U3RyaW5nLCB2ZXJ5U21hbGxTdHJpbmcsIHNtYWxsU3RyaW5nLCBtZWRpdW1TaXplU3RyaW5nLFxyXG4gICAgbGFyZ2VTdHJpbmcsIHZlcnlMYXJnZVN0cmluZywgaHVnZVN0cmluZyBdLFxyXG5cclxuICBDT01QQVJJU09OX1NJWkVfU1RSSU5HUzogWyBtdWNoTXVjaFNtYWxsZXJUaGFuU3RyaW5nLCBtdWNoU21hbGxlclRoYW5TdHJpbmcsIHNsaWdodGx5U21hbGxlclRoYW5TdHJpbmcsXHJcbiAgICBjb21wYXJhYmxlVG9TdHJpbmcsIHNsaWdodGx5TGFyZ2VyVGhhblN0cmluZywgbXVjaExhcmdlclRoYW5TdHJpbmcsIG11Y2hNdWNoTGFyZ2VyVGhhblN0cmluZyBdLFxyXG5cclxuICBDT01QQVJBVElWRV9ERVNDUklQVElPTl9SQU5HRVM6IENPTVBBUkFUSVZFX0RFU0NSSVBUSU9OX1JBTkdFU1xyXG59O1xyXG5cclxub2htc0xhdy5yZWdpc3RlciggJ09obXNMYXdDb25zdGFudHMnLCBPaG1zTGF3Q29uc3RhbnRzICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBPaG1zTGF3Q29uc3RhbnRzOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sMEJBQTBCO0FBQzVDLE9BQU9DLGNBQWMsTUFBTSxtQ0FBbUM7QUFDOUQsT0FBT0MsUUFBUSxNQUFNLHNDQUFzQztBQUMzRCxPQUFPQyxPQUFPLE1BQU0sZUFBZTtBQUNuQyxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFFeEQsTUFBTUMsVUFBVSxHQUFHRCxrQkFBa0IsQ0FBQ0UsSUFBSSxD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