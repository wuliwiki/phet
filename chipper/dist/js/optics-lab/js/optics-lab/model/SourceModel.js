// Copyright 2015-2020, University of Colorado Boulder

/**
 * Model of source of light = array of rays
 * Rays are either a fan (point source) or a beam (parallel rays)
 *
 * @author Michael Dubson (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Property from '../../../../axon/js/Property.js';
import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import opticsLab from '../../opticsLab.js';
import RayPath from './RayPath.js';
import Type from './Type.js';
class SourceModel {
  /**
   *
   * @param {OpticsLabModel} mainModel for this sim
   * @param {Type} type = Type.FAN_SOURCE|Type.BEAM_SOURCE = fan of diverging rays or beam of parallel rays
   * @param {number} nbrOfRays
   * @param {Vector2} position
   * @param {number} spread = for fan source, range of angles in degrees; for beam, spread is zero
   * @param {number} height = for beam source, range of y-position in cm; for fan, height is zero
   */
  constructor(mainModel, type, nbrOfRays, position, spread, height) {
    // @private position of source on stage
    this.positionProperty = new Vector2Property(position);

    // @private, {Property.<number>} number of rays
    this.nbrOfRaysProperty = new NumberProperty(nbrOfRays);

    // @public {Property.<number>} spread of point source (fan source) in degrees
    this.spreadProperty = new NumberProperty(spread);

    // @public {Property.<number>} width of source, if beam
    this.widthProperty = new NumberProperty(height);

    // @private {Property.<number>} angle in rads of beam source, 0 = horizontal. + = CCW, - = CW
    this.angleProperty = new NumberProperty(0);

    //@private {Property.<string|Color>} color of ray in the view (not really part of the model, but it
    //is convenient to put all the Properties of a Source in one place)
    this.colorProperty = new Property('#FFF');
    this.mainModel = mainModel;
    this.type = type; // {Type.FAN_SOURCE|Type.BEAM_SOURCE}

    if (type === Type.FAN_SOURCE) {
      this.spreadProperty.value = spread;
      this.height = 0;
    } else if (type === Type.BEAM_SOURCE) {
      this.spreadProperty.value = 0;
      this.height = height;
    }
    this.nbrOfRaysProperty.lazyLink(() => {
      this.createRays();
      this.mainModel.processRays();
    });
    this.spreadProperty.lazyLink(() => {
      this.createRays();
      this.mainModel.processRays();
    });
    this.widthProperty.lazyLink(() => {
      this.createRays();
      this.mainModel.processRays();
    });
    this.angleProperty.lazyLink(() => {
      this.createRays();
      this.mainModel.processRays();
    });
    this.rayPaths = []; //an array of RayPaths

    this.createRays();
  }

  /**
   * @public
   */
  reset() {
    this.positionProperty.reset();
    this.nbrOfRaysProperty.reset();
    this.spreadProperty.reset();
    this.widthProperty.reset();
    this.angleProperty.reset();
    this.colorProperty.reset();
  }

  /**
   * Adds rays
   * @private
   */
  createRays() {
    this.rayPaths = []; //clear any current rays
    this.nbrOfRaysProperty.value = Utils.roundSymmetric(this.nbrOfRaysProperty.value); //slider may produce non-integer number of rays
    //for fan source
    let lowestAngle = -this.spreadProperty.value / 2; //in degrees
    let deltaAngle;
    if (this.nbrOfRaysProperty.value === 1) {
      deltaAngle = 0;
      lowestAngle = 0; //if only one ray, ray is horizontal
    } else {
      deltaAngle = this.spreadProperty.value / (this.nbrOfRaysProperty.value - 1); //in degrees
    }

    let theta = lowestAngle * Math.PI / 180; //in radians
    let dir = new Vector2(Math.cos(theta), Math.sin(theta));
    let relativeStartPos = new Vector2(0, 0);

    //for beam source
    let lowestPos; //in cm
    let startPos;
    let deltaPos;
    const sinAngle = Math.sin(-this.angleProperty.value); //in screen coords, + angle is CW
    const cosAngle = Math.cos(-this.angleProperty.value);
    const h = this.widthProperty.value;
    if (this.nbrOfRaysProperty.value === 1) {
      lowestPos = new Vector2(0, 0);
      deltaPos = new Vector2(0, 0);
    } else {
      lowestPos = new Vector2(h * sinAngle / 2, h * cosAngle / 2);
      deltaPos = new Vector2(-h * sinAngle / (this.nbrOfRaysProperty.value - 1), -h * cosAngle / (this.nbrOfRaysProperty.value - 1));
    }
    startPos = lowestPos;

    //loop through and initialize all rayPaths of the source
    for (let i = 0; i < this.nbrOfRaysProperty.value; i++) {
      if (this.type === Type.FAN_SOURCE) {
        theta = (lowestAngle + i * deltaAngle) * Math.PI / 180; //in radians
        relativeStartPos = new Vector2(0, 0);
        dir = new Vector2(Math.cos(theta), Math.sin(theta));
        //endPosition = this.position.plus( dir.timesScalar( this.maxLength ));

        this.rayPaths[i] = new RayPath(relativeStartPos, dir);
        this.rayPaths[i].startPos = this.positionProperty.value;
        //this.rayPaths[i].addSegment( this.position, endPosition );
      } else if (this.type === Type.BEAM_SOURCE) {
        dir = new Vector2(cosAngle, -sinAngle);
        relativeStartPos = lowestPos.plus(deltaPos.timesScalar(i));
        startPos = this.positionProperty.value.plus(lowestPos).plus(deltaPos.timesScalar(i));
        this.rayPaths[i] = new RayPath(relativeStartPos, dir);
        this.rayPaths[i].startPos = startPos;
      }
    }
  }

  /**
   *
   * @param {number} nbrOfRays
   * @private
   */
  setNbrOfRays(nbrOfRays) {
    this.nbrOfRaysProperty.value = nbrOfRays;
    this.createRays();
    this.mainModel.processRays();
  }

  /**
   *
   * @param {number} angleInDegrees
   * @private
   */
  setSpreadOfFan(angleInDegrees) {
    if (this.type === Type.FAN_SOURCE) {
      this.spreadProperty.value = angleInDegrees;
      this.createRays();
      this.mainModel.processRays();
    }
  }

  /**
   *
   * @param {number} widthInCm
   * @private
   */
  setWidthOfBeam(widthInCm) {
    if (this.type === Type.BEAM_SOURCE) {
      this.widthProperty.value = widthInCm;
      this.createRays();
      this.mainModel.processRays();
    }
  }

  /**
   * Sets the position of the source
   * @param {Vector2} position
   * @public
   */
  setPosition(position) {
    //position = Vector2

    this.positionProperty.value = position;
    for (let i = 0; i < this.rayPaths.length; i++) {
      if (this.type === Type.FAN_SOURCE) {
        this.rayPaths[i].startPos = position;
      } else if (this.type === Type.BEAM_SOURCE) {
        let lowestPos;
        let deltaPos;
        const sinAngle = Math.sin(-this.angleProperty.value); //in screen coords, + angle is CW
        const cosAngle = Math.cos(-this.angleProperty.value);
        const h = this.widthProperty.value;
        if (this.nbrOfRaysProperty.value === 1) {
          lowestPos = new Vector2(0, 0);
          deltaPos = new Vector2(0, 0);
        } else {
          lowestPos = new Vector2(h * sinAngle / 2, h * cosAngle / 2);
          deltaPos = new Vector2(-h * sinAngle / (this.nbrOfRaysProperty.value - 1), -h * cosAngle / (this.nbrOfRaysProperty.value - 1));
        }
        const relativePos = lowestPos.plus(deltaPos.timesScalar(i));
        const pos = position.plus(relativePos);
        this.rayPaths[i].relativeStartPos = relativePos;
        this.rayPaths[i].startPos = pos;
        this.rayPaths[i].startDir.x = cosAngle;
        this.rayPaths[i].startDir.y = -sinAngle;
      }
    }
    if (!this.mainModel.processingRays) {
      this.mainModel.processRays();
    }
  }

  /**
   * Sets the rotation angle of the source of light
   * @param {number} angleInRads - angle in radians
   * @public
   */
  setAngle(angleInRads) {
    this.angleProperty.value = angleInRads;
    if (this.type === Type.BEAM_SOURCE) {
      this.setPosition(this.positionProperty.value);
    }
  }
}
opticsLab.register('SourceModel', SourceModel);
export default SourceModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlByb3BlcnR5IiwiVXRpbHMiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5Iiwib3B0aWNzTGFiIiwiUmF5UGF0aCIsIlR5cGUiLCJTb3VyY2VNb2RlbCIsImNvbnN0cnVjdG9yIiwibWFpbk1vZGVsIiwidHlwZSIsIm5ick9mUmF5cyIsInBvc2l0aW9uIiwic3ByZWFkIiwiaGVpZ2h0IiwicG9zaXRpb25Qcm9wZXJ0eSIsIm5ick9mUmF5c1Byb3BlcnR5Iiwic3ByZWFkUHJvcGVydHkiLCJ3aWR0aFByb3BlcnR5IiwiYW5nbGVQcm9wZXJ0eSIsImNvbG9yUHJvcGVydHkiLCJGQU5fU09VUkNFIiwidmFsdWUiLCJCRUFNX1NPVVJDRSIsImxhenlMaW5rIiwiY3JlYXRlUmF5cyIsInByb2Nlc3NSYXlzIiwicmF5UGF0aHMiLCJyZXNldCIsInJvdW5kU3ltbWV0cmljIiwibG93ZXN0QW5nbGUiLCJkZWx0YUFuZ2xlIiwidGhldGEiLCJNYXRoIiwiUEkiLCJkaXIiLCJjb3MiLCJzaW4iLCJyZWxhdGl2ZVN0YXJ0UG9zIiwibG93ZXN0UG9zIiwic3RhcnRQb3MiLCJkZWx0YVBvcyIsInNpbkFuZ2xlIiwiY29zQW5nbGUiLCJoIiwiaSIsInBsdXMiLCJ0aW1lc1NjYWxhciIsInNldE5ick9mUmF5cyIsInNldFNwcmVhZE9mRmFuIiwiYW5nbGVJbkRlZ3JlZXMiLCJzZXRXaWR0aE9mQmVhbSIsIndpZHRoSW5DbSIsInNldFBvc2l0aW9uIiwibGVuZ3RoIiwicmVsYXRpdmVQb3MiLCJwb3MiLCJzdGFydERpciIsIngiLCJ5IiwicHJvY2Vzc2luZ1JheXMiLCJzZXRBbmdsZSIsImFuZ2xlSW5SYWRzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTb3VyY2VNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBvZiBzb3VyY2Ugb2YgbGlnaHQgPSBhcnJheSBvZiByYXlzXHJcbiAqIFJheXMgYXJlIGVpdGhlciBhIGZhbiAocG9pbnQgc291cmNlKSBvciBhIGJlYW0gKHBhcmFsbGVsIHJheXMpXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBEdWJzb24gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBWZWN0b3IyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpY3NMYWIgZnJvbSAnLi4vLi4vb3B0aWNzTGFiLmpzJztcclxuaW1wb3J0IFJheVBhdGggZnJvbSAnLi9SYXlQYXRoLmpzJztcclxuaW1wb3J0IFR5cGUgZnJvbSAnLi9UeXBlLmpzJztcclxuXHJcbmNsYXNzIFNvdXJjZU1vZGVsIHtcclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7T3B0aWNzTGFiTW9kZWx9IG1haW5Nb2RlbCBmb3IgdGhpcyBzaW1cclxuICAgKiBAcGFyYW0ge1R5cGV9IHR5cGUgPSBUeXBlLkZBTl9TT1VSQ0V8VHlwZS5CRUFNX1NPVVJDRSA9IGZhbiBvZiBkaXZlcmdpbmcgcmF5cyBvciBiZWFtIG9mIHBhcmFsbGVsIHJheXNcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbmJyT2ZSYXlzXHJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBwb3NpdGlvblxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzcHJlYWQgPSBmb3IgZmFuIHNvdXJjZSwgcmFuZ2Ugb2YgYW5nbGVzIGluIGRlZ3JlZXM7IGZvciBiZWFtLCBzcHJlYWQgaXMgemVyb1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgPSBmb3IgYmVhbSBzb3VyY2UsIHJhbmdlIG9mIHktcG9zaXRpb24gaW4gY207IGZvciBmYW4sIGhlaWdodCBpcyB6ZXJvXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1haW5Nb2RlbCwgdHlwZSwgbmJyT2ZSYXlzLCBwb3NpdGlvbiwgc3ByZWFkLCBoZWlnaHQgKSB7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgcG9zaXRpb24gb2Ygc291cmNlIG9uIHN0YWdlXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBwb3NpdGlvbiApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlLCB7UHJvcGVydHkuPG51bWJlcj59IG51bWJlciBvZiByYXlzXHJcbiAgICB0aGlzLm5ick9mUmF5c1Byb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCBuYnJPZlJheXMgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48bnVtYmVyPn0gc3ByZWFkIG9mIHBvaW50IHNvdXJjZSAoZmFuIHNvdXJjZSkgaW4gZGVncmVlc1xyXG4gICAgdGhpcy5zcHJlYWRQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggc3ByZWFkICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPG51bWJlcj59IHdpZHRoIG9mIHNvdXJjZSwgaWYgYmVhbVxyXG4gICAgdGhpcy53aWR0aFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCBoZWlnaHQgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7UHJvcGVydHkuPG51bWJlcj59IGFuZ2xlIGluIHJhZHMgb2YgYmVhbSBzb3VyY2UsIDAgPSBob3Jpem9udGFsLiArID0gQ0NXLCAtID0gQ1dcclxuICAgIHRoaXMuYW5nbGVQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMCApO1xyXG5cclxuICAgIC8vQHByaXZhdGUge1Byb3BlcnR5LjxzdHJpbmd8Q29sb3I+fSBjb2xvciBvZiByYXkgaW4gdGhlIHZpZXcgKG5vdCByZWFsbHkgcGFydCBvZiB0aGUgbW9kZWwsIGJ1dCBpdFxyXG4gICAgLy9pcyBjb252ZW5pZW50IHRvIHB1dCBhbGwgdGhlIFByb3BlcnRpZXMgb2YgYSBTb3VyY2UgaW4gb25lIHBsYWNlKVxyXG4gICAgdGhpcy5jb2xvclByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCAnI0ZGRicgKTtcclxuXHJcbiAgICB0aGlzLm1haW5Nb2RlbCA9IG1haW5Nb2RlbDtcclxuXHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlOyAvLyB7VHlwZS5GQU5fU09VUkNFfFR5cGUuQkVBTV9TT1VSQ0V9XHJcblxyXG4gICAgaWYgKCB0eXBlID09PSBUeXBlLkZBTl9TT1VSQ0UgKSB7XHJcbiAgICAgIHRoaXMuc3ByZWFkUHJvcGVydHkudmFsdWUgPSBzcHJlYWQ7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gMDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0eXBlID09PSBUeXBlLkJFQU1fU09VUkNFICkge1xyXG4gICAgICB0aGlzLnNwcmVhZFByb3BlcnR5LnZhbHVlID0gMDtcclxuICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5uYnJPZlJheXNQcm9wZXJ0eS5sYXp5TGluayggKCkgPT4ge1xyXG4gICAgICB0aGlzLmNyZWF0ZVJheXMoKTtcclxuICAgICAgdGhpcy5tYWluTW9kZWwucHJvY2Vzc1JheXMoKTtcclxuICAgIH0gKTtcclxuICAgIHRoaXMuc3ByZWFkUHJvcGVydHkubGF6eUxpbmsoICgpID0+IHtcclxuICAgICAgdGhpcy5jcmVhdGVSYXlzKCk7XHJcbiAgICAgIHRoaXMubWFpbk1vZGVsLnByb2Nlc3NSYXlzKCk7XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLndpZHRoUHJvcGVydHkubGF6eUxpbmsoICgpID0+IHtcclxuICAgICAgdGhpcy5jcmVhdGVSYXlzKCk7XHJcbiAgICAgIHRoaXMubWFpbk1vZGVsLnByb2Nlc3NSYXlzKCk7XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFuZ2xlUHJvcGVydHkubGF6eUxpbmsoICgpID0+IHtcclxuICAgICAgdGhpcy5jcmVhdGVSYXlzKCk7XHJcbiAgICAgIHRoaXMubWFpbk1vZGVsLnByb2Nlc3NSYXlzKCk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5yYXlQYXRocyA9IFtdOyAgICAvL2FuIGFycmF5IG9mIFJheVBhdGhzXHJcblxyXG4gICAgdGhpcy5jcmVhdGVSYXlzKCk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLm5ick9mUmF5c1Byb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnNwcmVhZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLndpZHRoUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuYW5nbGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5jb2xvclByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIHJheXNcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGNyZWF0ZVJheXMoKSB7XHJcbiAgICB0aGlzLnJheVBhdGhzID0gW107ICAvL2NsZWFyIGFueSBjdXJyZW50IHJheXNcclxuICAgIHRoaXMubmJyT2ZSYXlzUHJvcGVydHkudmFsdWUgPSBVdGlscy5yb3VuZFN5bW1ldHJpYyggdGhpcy5uYnJPZlJheXNQcm9wZXJ0eS52YWx1ZSApOyAgLy9zbGlkZXIgbWF5IHByb2R1Y2Ugbm9uLWludGVnZXIgbnVtYmVyIG9mIHJheXNcclxuICAgIC8vZm9yIGZhbiBzb3VyY2VcclxuICAgIGxldCBsb3dlc3RBbmdsZSA9IC10aGlzLnNwcmVhZFByb3BlcnR5LnZhbHVlIC8gMjsgIC8vaW4gZGVncmVlc1xyXG4gICAgbGV0IGRlbHRhQW5nbGU7XHJcbiAgICBpZiAoIHRoaXMubmJyT2ZSYXlzUHJvcGVydHkudmFsdWUgPT09IDEgKSB7XHJcbiAgICAgIGRlbHRhQW5nbGUgPSAwO1xyXG4gICAgICBsb3dlc3RBbmdsZSA9IDA7ICAvL2lmIG9ubHkgb25lIHJheSwgcmF5IGlzIGhvcml6b250YWxcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBkZWx0YUFuZ2xlID0gdGhpcy5zcHJlYWRQcm9wZXJ0eS52YWx1ZSAvICggdGhpcy5uYnJPZlJheXNQcm9wZXJ0eS52YWx1ZSAtIDEgKTsgICAgLy9pbiBkZWdyZWVzXHJcbiAgICB9XHJcbiAgICBsZXQgdGhldGEgPSAoIGxvd2VzdEFuZ2xlICkgKiBNYXRoLlBJIC8gMTgwOyAvL2luIHJhZGlhbnNcclxuICAgIGxldCBkaXIgPSBuZXcgVmVjdG9yMiggTWF0aC5jb3MoIHRoZXRhICksIE1hdGguc2luKCB0aGV0YSApICk7XHJcbiAgICBsZXQgcmVsYXRpdmVTdGFydFBvcyA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XHJcblxyXG4gICAgLy9mb3IgYmVhbSBzb3VyY2VcclxuICAgIGxldCBsb3dlc3RQb3M7ICAgLy9pbiBjbVxyXG4gICAgbGV0IHN0YXJ0UG9zO1xyXG4gICAgbGV0IGRlbHRhUG9zO1xyXG4gICAgY29uc3Qgc2luQW5nbGUgPSBNYXRoLnNpbiggLXRoaXMuYW5nbGVQcm9wZXJ0eS52YWx1ZSApOyAgIC8vaW4gc2NyZWVuIGNvb3JkcywgKyBhbmdsZSBpcyBDV1xyXG4gICAgY29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyggLXRoaXMuYW5nbGVQcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgY29uc3QgaCA9IHRoaXMud2lkdGhQcm9wZXJ0eS52YWx1ZTtcclxuICAgIGlmICggdGhpcy5uYnJPZlJheXNQcm9wZXJ0eS52YWx1ZSA9PT0gMSApIHtcclxuICAgICAgbG93ZXN0UG9zID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcclxuICAgICAgZGVsdGFQb3MgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGxvd2VzdFBvcyA9IG5ldyBWZWN0b3IyKCBoICogc2luQW5nbGUgLyAyLCBoICogY29zQW5nbGUgLyAyICk7XHJcbiAgICAgIGRlbHRhUG9zID0gbmV3IFZlY3RvcjIoIC1oICogc2luQW5nbGUgLyAoIHRoaXMubmJyT2ZSYXlzUHJvcGVydHkudmFsdWUgLSAxICksXHJcbiAgICAgICAgLWggKiBjb3NBbmdsZSAvICggdGhpcy5uYnJPZlJheXNQcm9wZXJ0eS52YWx1ZSAtIDEgKSApO1xyXG5cclxuICAgIH1cclxuICAgIHN0YXJ0UG9zID0gbG93ZXN0UG9zO1xyXG5cclxuICAgIC8vbG9vcCB0aHJvdWdoIGFuZCBpbml0aWFsaXplIGFsbCByYXlQYXRocyBvZiB0aGUgc291cmNlXHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLm5ick9mUmF5c1Byb3BlcnR5LnZhbHVlOyBpKysgKSB7XHJcbiAgICAgIGlmICggdGhpcy50eXBlID09PSBUeXBlLkZBTl9TT1VSQ0UgKSB7XHJcbiAgICAgICAgdGhldGEgPSAoIGxvd2VzdEFuZ2xlICsgaSAqIGRlbHRhQW5nbGUgKSAqIE1hdGguUEkgLyAxODA7ICAvL2luIHJhZGlhbnNcclxuICAgICAgICByZWxhdGl2ZVN0YXJ0UG9zID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcclxuICAgICAgICBkaXIgPSBuZXcgVmVjdG9yMiggTWF0aC5jb3MoIHRoZXRhICksIE1hdGguc2luKCB0aGV0YSApICk7XHJcbiAgICAgICAgLy9lbmRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb24ucGx1cyggZGlyLnRpbWVzU2NhbGFyKCB0aGlzLm1heExlbmd0aCApKTtcclxuXHJcbiAgICAgICAgdGhpcy5yYXlQYXRoc1sgaSBdID0gbmV3IFJheVBhdGgoIHJlbGF0aXZlU3RhcnRQb3MsIGRpciApO1xyXG4gICAgICAgIHRoaXMucmF5UGF0aHNbIGkgXS5zdGFydFBvcyA9IHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgICAvL3RoaXMucmF5UGF0aHNbaV0uYWRkU2VnbWVudCggdGhpcy5wb3NpdGlvbiwgZW5kUG9zaXRpb24gKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggdGhpcy50eXBlID09PSBUeXBlLkJFQU1fU09VUkNFICkge1xyXG4gICAgICAgIGRpciA9IG5ldyBWZWN0b3IyKCBjb3NBbmdsZSwgLXNpbkFuZ2xlICk7XHJcbiAgICAgICAgcmVsYXRpdmVTdGFydFBvcyA9IGxvd2VzdFBvcy5wbHVzKCBkZWx0YVBvcy50aW1lc1NjYWxhciggaSApICk7XHJcbiAgICAgICAgc3RhcnRQb3MgPSB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUucGx1cyggbG93ZXN0UG9zICkucGx1cyggZGVsdGFQb3MudGltZXNTY2FsYXIoIGkgKSApO1xyXG4gICAgICAgIHRoaXMucmF5UGF0aHNbIGkgXSA9IG5ldyBSYXlQYXRoKCByZWxhdGl2ZVN0YXJ0UG9zLCBkaXIgKTtcclxuICAgICAgICB0aGlzLnJheVBhdGhzWyBpIF0uc3RhcnRQb3MgPSBzdGFydFBvcztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbmJyT2ZSYXlzXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBzZXROYnJPZlJheXMoIG5ick9mUmF5cyApIHtcclxuICAgIHRoaXMubmJyT2ZSYXlzUHJvcGVydHkudmFsdWUgPSBuYnJPZlJheXM7XHJcbiAgICB0aGlzLmNyZWF0ZVJheXMoKTtcclxuICAgIHRoaXMubWFpbk1vZGVsLnByb2Nlc3NSYXlzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZUluRGVncmVlc1xyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgc2V0U3ByZWFkT2ZGYW4oIGFuZ2xlSW5EZWdyZWVzICkge1xyXG4gICAgaWYgKCB0aGlzLnR5cGUgPT09IFR5cGUuRkFOX1NPVVJDRSApIHtcclxuICAgICAgdGhpcy5zcHJlYWRQcm9wZXJ0eS52YWx1ZSA9IGFuZ2xlSW5EZWdyZWVzO1xyXG4gICAgICB0aGlzLmNyZWF0ZVJheXMoKTtcclxuICAgICAgdGhpcy5tYWluTW9kZWwucHJvY2Vzc1JheXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoSW5DbVxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgc2V0V2lkdGhPZkJlYW0oIHdpZHRoSW5DbSApIHtcclxuICAgIGlmICggdGhpcy50eXBlID09PSBUeXBlLkJFQU1fU09VUkNFICkge1xyXG4gICAgICB0aGlzLndpZHRoUHJvcGVydHkudmFsdWUgPSB3aWR0aEluQ207XHJcbiAgICAgIHRoaXMuY3JlYXRlUmF5cygpO1xyXG4gICAgICB0aGlzLm1haW5Nb2RlbC5wcm9jZXNzUmF5cygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBzb3VyY2VcclxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IHBvc2l0aW9uXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHNldFBvc2l0aW9uKCBwb3NpdGlvbiApIHsgICAvL3Bvc2l0aW9uID0gVmVjdG9yMlxyXG5cclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSA9IHBvc2l0aW9uO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5yYXlQYXRocy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgaWYgKCB0aGlzLnR5cGUgPT09IFR5cGUuRkFOX1NPVVJDRSApIHtcclxuICAgICAgICB0aGlzLnJheVBhdGhzWyBpIF0uc3RhcnRQb3MgPSBwb3NpdGlvbjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggdGhpcy50eXBlID09PSBUeXBlLkJFQU1fU09VUkNFICkge1xyXG4gICAgICAgIGxldCBsb3dlc3RQb3M7XHJcbiAgICAgICAgbGV0IGRlbHRhUG9zO1xyXG4gICAgICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oIC10aGlzLmFuZ2xlUHJvcGVydHkudmFsdWUgKTsgICAvL2luIHNjcmVlbiBjb29yZHMsICsgYW5nbGUgaXMgQ1dcclxuICAgICAgICBjb25zdCBjb3NBbmdsZSA9IE1hdGguY29zKCAtdGhpcy5hbmdsZVByb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgICAgY29uc3QgaCA9IHRoaXMud2lkdGhQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgICBpZiAoIHRoaXMubmJyT2ZSYXlzUHJvcGVydHkudmFsdWUgPT09IDEgKSB7XHJcbiAgICAgICAgICBsb3dlc3RQb3MgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xyXG4gICAgICAgICAgZGVsdGFQb3MgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGxvd2VzdFBvcyA9IG5ldyBWZWN0b3IyKCBoICogc2luQW5nbGUgLyAyLCBoICogY29zQW5nbGUgLyAyICk7XHJcbiAgICAgICAgICBkZWx0YVBvcyA9IG5ldyBWZWN0b3IyKCAtaCAqIHNpbkFuZ2xlIC8gKCB0aGlzLm5ick9mUmF5c1Byb3BlcnR5LnZhbHVlIC0gMSApLFxyXG4gICAgICAgICAgICAtaCAqIGNvc0FuZ2xlIC8gKCB0aGlzLm5ick9mUmF5c1Byb3BlcnR5LnZhbHVlIC0gMSApICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUG9zID0gbG93ZXN0UG9zLnBsdXMoIGRlbHRhUG9zLnRpbWVzU2NhbGFyKCBpICkgKTtcclxuICAgICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbi5wbHVzKCByZWxhdGl2ZVBvcyApO1xyXG4gICAgICAgIHRoaXMucmF5UGF0aHNbIGkgXS5yZWxhdGl2ZVN0YXJ0UG9zID0gcmVsYXRpdmVQb3M7XHJcbiAgICAgICAgdGhpcy5yYXlQYXRoc1sgaSBdLnN0YXJ0UG9zID0gcG9zO1xyXG4gICAgICAgIHRoaXMucmF5UGF0aHNbIGkgXS5zdGFydERpci54ID0gY29zQW5nbGU7XHJcbiAgICAgICAgdGhpcy5yYXlQYXRoc1sgaSBdLnN0YXJ0RGlyLnkgPSAtc2luQW5nbGU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICggIXRoaXMubWFpbk1vZGVsLnByb2Nlc3NpbmdSYXlzICkge1xyXG4gICAgICB0aGlzLm1haW5Nb2RlbC5wcm9jZXNzUmF5cygpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBzb3VyY2Ugb2YgbGlnaHRcclxuICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVJblJhZHMgLSBhbmdsZSBpbiByYWRpYW5zXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHNldEFuZ2xlKCBhbmdsZUluUmFkcyApIHtcclxuICAgIHRoaXMuYW5nbGVQcm9wZXJ0eS52YWx1ZSA9IGFuZ2xlSW5SYWRzO1xyXG4gICAgaWYgKCB0aGlzLnR5cGUgPT09IFR5cGUuQkVBTV9TT1VSQ0UgKSB7XHJcbiAgICAgIHRoaXMuc2V0UG9zaXRpb24oIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxub3B0aWNzTGFiLnJlZ2lzdGVyKCAnU291cmNlTW9kZWwnLCBTb3VyY2VNb2RlbCApO1xyXG5leHBvcnQgZGVmYXVsdCBTb3VyY2VNb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FB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