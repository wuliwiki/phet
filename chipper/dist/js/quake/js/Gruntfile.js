// Copyright 2022, University of Colorado Boulder

/**
 * quake-specific grunt configuration, builds the Haptics Playground app
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

// modules
const Gruntfile = require('../../chipper/js/grunt/Gruntfile');
const child_process = require('child_process');

// constants
const CUSTOM_VIBRATION_PLUGIN_NAME = 'cordova-plugin-native-vibration';
module.exports = grunt => {
  Gruntfile(grunt);

  // function to indent the results of a command-line operation
  const logIndentedMessage = (commandResult, indentation) => {
    let indentationString = '';
    for (let i = 0; i < indentation; i++) {
      indentationString += ' ';
    }

    // For platform independence, replace any CR-LF occurrences with a simple LF.
    const modifiedCommandResult = commandResult.toString().replace('\r\n', '\n');
    const lines = modifiedCommandResult.split('\n');
    lines.forEach(line => {
      grunt.log.writeln(`${indentationString}${line}`);
    });
  };

  // Register the task that installs or updates the custom native vibration plugin.
  grunt.registerTask('install-plugin', 'Install or update the custom native vibration plugin', () => {
    // Note to future maintainers: This task removes a previous installation of the plugin and then adds it back in
    // order to make sure that the most recent version is installed. I (jbphet) tried using the `update` command,
    // which exists, but didn't seem to work, at least not as of early January 2022.

    grunt.log.writeln(`Checking whether ${CUSTOM_VIBRATION_PLUGIN_NAME} plugin is present...`);
    let commandResult = child_process.execSync('cordova plugin list');
    if (commandResult.includes(CUSTOM_VIBRATION_PLUGIN_NAME)) {
      grunt.log.writeln('  Removing previous version of plugin...');
      const removePluginCommand = `cordova plugin remove ${CUSTOM_VIBRATION_PLUGIN_NAME}`;
      grunt.log.writeln(`  command = ${removePluginCommand}`);
      commandResult = child_process.execSync(removePluginCommand);
      grunt.log.writeln('  result:');
      logIndentedMessage(commandResult, 4);
    }
    grunt.log.writeln('  Adding current version of plugin...');
    const addPluginCommand = `cordova plugin add ./${CUSTOM_VIBRATION_PLUGIN_NAME}/`;
    grunt.log.writeln(`  command = ${addPluginCommand}`);
    commandResult = child_process.execSync(addPluginCommand);
    grunt.log.writeln('  result:');
    logIndentedMessage(commandResult, 4);
  });
  grunt.registerTask('build', 'Build the Haptics Playground app for all supported platforms', () => {
    // Build the app for all supported platforms.
    grunt.log.writeln('Building app for all supported platforms...');
    const commandResult = child_process.execSync('cordova build');
    grunt.log.writeln(`${commandResult}`);
  });

  // register default task
  grunt.registerTask('default', ['lint', 'install-plugin', 'build']);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHcnVudGZpbGUiLCJyZXF1aXJlIiwiY2hpbGRfcHJvY2VzcyIsIkNVU1RPTV9WSUJSQVRJT05fUExVR0lOX05BTUUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ3J1bnQiLCJsb2dJbmRlbnRlZE1lc3NhZ2UiLCJjb21tYW5kUmVzdWx0IiwiaW5kZW50YXRpb24iLCJpbmRlbnRhdGlvblN0cmluZyIsImkiLCJtb2RpZmllZENvbW1hbmRSZXN1bHQiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJsaW5lcyIsInNwbGl0IiwiZm9yRWFjaCIsImxpbmUiLCJsb2ciLCJ3cml0ZWxuIiwicmVnaXN0ZXJUYXNrIiwiZXhlY1N5bmMiLCJpbmNsdWRlcyIsInJlbW92ZVBsdWdpbkNvbW1hbmQiLCJhZGRQbHVnaW5Db21tYW5kIl0sInNvdXJjZXMiOlsiR3J1bnRmaWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBxdWFrZS1zcGVjaWZpYyBncnVudCBjb25maWd1cmF0aW9uLCBidWlsZHMgdGhlIEhhcHRpY3MgUGxheWdyb3VuZCBhcHBcclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG4vLyBtb2R1bGVzXHJcbmNvbnN0IEdydW50ZmlsZSA9IHJlcXVpcmUoICcuLi8uLi9jaGlwcGVyL2pzL2dydW50L0dydW50ZmlsZScgKTtcclxuY29uc3QgY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUoICdjaGlsZF9wcm9jZXNzJyApO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IENVU1RPTV9WSUJSQVRJT05fUExVR0lOX05BTUUgPSAnY29yZG92YS1wbHVnaW4tbmF0aXZlLXZpYnJhdGlvbic7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGdydW50ID0+IHtcclxuICBHcnVudGZpbGUoIGdydW50ICk7XHJcblxyXG4vLyBmdW5jdGlvbiB0byBpbmRlbnQgdGhlIHJlc3VsdHMgb2YgYSBjb21tYW5kLWxpbmUgb3BlcmF0aW9uXHJcbiAgY29uc3QgbG9nSW5kZW50ZWRNZXNzYWdlID0gKCBjb21tYW5kUmVzdWx0LCBpbmRlbnRhdGlvbiApID0+IHtcclxuICAgIGxldCBpbmRlbnRhdGlvblN0cmluZyA9ICcnO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgaW5kZW50YXRpb247IGkrKyApIHtcclxuICAgICAgaW5kZW50YXRpb25TdHJpbmcgKz0gJyAnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZvciBwbGF0Zm9ybSBpbmRlcGVuZGVuY2UsIHJlcGxhY2UgYW55IENSLUxGIG9jY3VycmVuY2VzIHdpdGggYSBzaW1wbGUgTEYuXHJcbiAgICBjb25zdCBtb2RpZmllZENvbW1hbmRSZXN1bHQgPSBjb21tYW5kUmVzdWx0LnRvU3RyaW5nKCkucmVwbGFjZSggJ1xcclxcbicsICdcXG4nICk7XHJcbiAgICBjb25zdCBsaW5lcyA9IG1vZGlmaWVkQ29tbWFuZFJlc3VsdC5zcGxpdCggJ1xcbicgKTtcclxuICAgIGxpbmVzLmZvckVhY2goIGxpbmUgPT4ge1xyXG4gICAgICBncnVudC5sb2cud3JpdGVsbiggYCR7aW5kZW50YXRpb25TdHJpbmd9JHtsaW5lfWAgKTtcclxuICAgIH0gKTtcclxuICB9O1xyXG5cclxuICAvLyBSZWdpc3RlciB0aGUgdGFzayB0aGF0IGluc3RhbGxzIG9yIHVwZGF0ZXMgdGhlIGN1c3RvbSBuYXRpdmUgdmlicmF0aW9uIHBsdWdpbi5cclxuICBncnVudC5yZWdpc3RlclRhc2soXHJcbiAgICAnaW5zdGFsbC1wbHVnaW4nLFxyXG4gICAgJ0luc3RhbGwgb3IgdXBkYXRlIHRoZSBjdXN0b20gbmF0aXZlIHZpYnJhdGlvbiBwbHVnaW4nLFxyXG4gICAgKCkgPT4ge1xyXG5cclxuICAgICAgLy8gTm90ZSB0byBmdXR1cmUgbWFpbnRhaW5lcnM6IFRoaXMgdGFzayByZW1vdmVzIGEgcHJldmlvdXMgaW5zdGFsbGF0aW9uIG9mIHRoZSBwbHVnaW4gYW5kIHRoZW4gYWRkcyBpdCBiYWNrIGluXHJcbiAgICAgIC8vIG9yZGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBtb3N0IHJlY2VudCB2ZXJzaW9uIGlzIGluc3RhbGxlZC4gSSAoamJwaGV0KSB0cmllZCB1c2luZyB0aGUgYHVwZGF0ZWAgY29tbWFuZCxcclxuICAgICAgLy8gd2hpY2ggZXhpc3RzLCBidXQgZGlkbid0IHNlZW0gdG8gd29yaywgYXQgbGVhc3Qgbm90IGFzIG9mIGVhcmx5IEphbnVhcnkgMjAyMi5cclxuXHJcbiAgICAgIGdydW50LmxvZy53cml0ZWxuKCBgQ2hlY2tpbmcgd2hldGhlciAke0NVU1RPTV9WSUJSQVRJT05fUExVR0lOX05BTUV9IHBsdWdpbiBpcyBwcmVzZW50Li4uYCApO1xyXG4gICAgICBsZXQgY29tbWFuZFJlc3VsdCA9IGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmMoICdjb3Jkb3ZhIHBsdWdpbiBsaXN0JyApO1xyXG4gICAgICBpZiAoIGNvbW1hbmRSZXN1bHQuaW5jbHVkZXMoIENVU1RPTV9WSUJSQVRJT05fUExVR0lOX05BTUUgKSApIHtcclxuICAgICAgICBncnVudC5sb2cud3JpdGVsbiggJyAgUmVtb3ZpbmcgcHJldmlvdXMgdmVyc2lvbiBvZiBwbHVnaW4uLi4nICk7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlUGx1Z2luQ29tbWFuZCA9IGBjb3Jkb3ZhIHBsdWdpbiByZW1vdmUgJHtDVVNUT01fVklCUkFUSU9OX1BMVUdJTl9OQU1FfWA7XHJcbiAgICAgICAgZ3J1bnQubG9nLndyaXRlbG4oIGAgIGNvbW1hbmQgPSAke3JlbW92ZVBsdWdpbkNvbW1hbmR9YCApO1xyXG4gICAgICAgIGNvbW1hbmRSZXN1bHQgPSBjaGlsZF9wcm9jZXNzLmV4ZWNTeW5jKCByZW1vdmVQbHVnaW5Db21tYW5kICk7XHJcbiAgICAgICAgZ3J1bnQubG9nLndyaXRlbG4oICcgIHJlc3VsdDonICk7XHJcbiAgICAgICAgbG9nSW5kZW50ZWRNZXNzYWdlKCBjb21tYW5kUmVzdWx0LCA0ICk7XHJcbiAgICAgIH1cclxuICAgICAgZ3J1bnQubG9nLndyaXRlbG4oICcgIEFkZGluZyBjdXJyZW50IHZlcnNpb24gb2YgcGx1Z2luLi4uJyApO1xyXG4gICAgICBjb25zdCBhZGRQbHVnaW5Db21tYW5kID0gYGNvcmRvdmEgcGx1Z2luIGFkZCAuLyR7Q1VTVE9NX1ZJQlJBVElPTl9QTFVHSU5fTkFNRX0vYDtcclxuICAgICAgZ3J1bnQubG9nLndyaXRlbG4oIGAgIGNvbW1hbmQgPSAke2FkZFBsdWdpbkNvbW1hbmR9YCApO1xyXG4gICAgICBjb21tYW5kUmVzdWx0ID0gY2hpbGRfcHJvY2Vzcy5leGVjU3luYyggYWRkUGx1Z2luQ29tbWFuZCApO1xyXG4gICAgICBncnVudC5sb2cud3JpdGVsbiggJyAgcmVzdWx0OicgKTtcclxuICAgICAgbG9nSW5kZW50ZWRNZXNzYWdlKCBjb21tYW5kUmVzdWx0LCA0ICk7XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgZ3J1bnQucmVnaXN0ZXJUYXNrKFxyXG4gICAgJ2J1aWxkJyxcclxuICAgICdCdWlsZCB0aGUgSGFwdGljcyBQbGF5Z3JvdW5kIGFwcCBmb3IgYWxsIHN1cHBvcnRlZCBwbGF0Zm9ybXMnLFxyXG4gICAgKCkgPT4ge1xyXG5cclxuICAgICAgLy8gQnVpbGQgdGhlIGFwcCBmb3IgYWxsIHN1cHBvcnRlZCBwbGF0Zm9ybXMuXHJcbiAgICAgIGdydW50LmxvZy53cml0ZWxuKCAnQnVpbGRpbmcgYXBwIGZvciBhbGwgc3VwcG9ydGVkIHBsYXRmb3Jtcy4uLicgKTtcclxuICAgICAgY29uc3QgY29tbWFuZFJlc3VsdCA9IGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmMoICdjb3Jkb3ZhIGJ1aWxkJyApO1xyXG4gICAgICBncnVudC5sb2cud3JpdGVsbiggYCR7Y29tbWFuZFJlc3VsdH1gICk7XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgLy8gcmVnaXN0ZXIgZGVmYXVsdCB0YXNrXHJcbiAgZ3J1bnQucmVnaXN0ZXJUYXNrKCAnZGVmYXVsdCcsIFsgJ2xpbnQnLCAnaW5zdGFsbC1wbHVnaW4nLCAnYnVpbGQnIF0gKTtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBRSxrQ0FBbUMsQ0FBQztBQUMvRCxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBRSxlQUFnQixDQUFDOztBQUVoRDtBQUNBLE1BQU1FLDRCQUE0QixHQUFHLGlDQUFpQztBQUV0RUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLEtBQUssSUFBSTtFQUN4Qk4sU0FBUyxDQUFFTSxLQUFNLENBQUM7O0VBRXBCO0VBQ0UsTUFBTUMsa0JBQWtCLEdBQUdBLENBQUVDLGFBQWEsRUFBRUMsV0FBVyxLQUFNO0lBQzNELElBQUlDLGlCQUFpQixHQUFHLEVBQUU7SUFDMUIsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdGLFdBQVcsRUFBRUUsQ0FBQyxFQUFFLEVBQUc7TUFDdENELGlCQUFpQixJQUFJLEdBQUc7SUFDMUI7O0lBRUE7SUFDQSxNQUFNRSxxQkFBcUIsR0FBR0osYUFBYSxDQUFDSyxRQUFRLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUUsTUFBTSxFQUFFLElBQUssQ0FBQztJQUM5RSxNQUFNQyxLQUFLLEdBQUdILHFCQUFxQixDQUFDSSxLQUFLLENBQUUsSUFBSyxDQUFDO0lBQ2pERCxLQUFLLENBQUNFLE9BQU8sQ0FBRUMsSUFBSSxJQUFJO01BQ3JCWixLQUFLLENBQUNhLEdBQUcsQ0FBQ0MsT0FBTyxDQUFHLEdBQUVWLGlCQUFrQixHQUFFUSxJQUFLLEVBQUUsQ0FBQztJQUNwRCxDQUFFLENBQUM7RUFDTCxDQUFDOztFQUVEO0VBQ0FaLEtBQUssQ0FBQ2UsWUFBWSxDQUNoQixnQkFBZ0IsRUFDaEIsc0RBQXNELEVBQ3RELE1BQU07SUFFSjtJQUNBO0lBQ0E7O0lBRUFmLEtBQUssQ0FBQ2EsR0FBRyxDQUFDQyxPQUFPLENBQUcsb0JBQW1CakIsNEJBQTZCLHVCQUF1QixDQUFDO0lBQzVGLElBQUlLLGFBQWEsR0FBR04sYUFBYSxDQUFDb0IsUUFBUSxDQUFFLHFCQUFzQixDQUFDO0lBQ25FLElBQUtkLGFBQWEsQ0FBQ2UsUUFBUSxDQUFFcEIsNEJBQTZCLENBQUMsRUFBRztNQUM1REcsS0FBSyxDQUFDYSxHQUFHLENBQUNDLE9BQU8sQ0FBRSwwQ0FBMkMsQ0FBQztNQUMvRCxNQUFNSSxtQkFBbUIsR0FBSSx5QkFBd0JyQiw0QkFBNkIsRUFBQztNQUNuRkcsS0FBSyxDQUFDYSxHQUFHLENBQUNDLE9BQU8sQ0FBRyxlQUFjSSxtQkFBb0IsRUFBRSxDQUFDO01BQ3pEaEIsYUFBYSxHQUFHTixhQUFhLENBQUNvQixRQUFRLENBQUVFLG1CQUFvQixDQUFDO01BQzdEbEIsS0FBSyxDQUFDYSxHQUFHLENBQUNDLE9BQU8sQ0FBRSxXQUFZLENBQUM7TUFDaENiLGtCQUFrQixDQUFFQyxhQUFhLEVBQUUsQ0FBRSxDQUFDO0lBQ3hDO0lBQ0FGLEtBQUssQ0FBQ2EsR0FBRyxDQUFDQyxPQUFPLENBQUUsdUNBQXdDLENBQUM7SUFDNUQsTUFBTUssZ0JBQWdCLEdBQUksd0JBQXVCdEIsNEJBQTZCLEdBQUU7SUFDaEZHLEtBQUssQ0FBQ2EsR0FBRyxDQUFDQyxPQUFPLENBQUcsZUFBY0ssZ0JBQWlCLEVBQUUsQ0FBQztJQUN0RGpCLGFBQWEsR0FBR04sYUFBYSxDQUFDb0IsUUFBUSxDQUFFRyxnQkFBaUIsQ0FBQztJQUMxRG5CLEtBQUssQ0FBQ2EsR0FBRyxDQUFDQyxPQUFPLENBQUUsV0FBWSxDQUFDO0lBQ2hDYixrQkFBa0IsQ0FBRUMsYUFBYSxFQUFFLENBQUUsQ0FBQztFQUN4QyxDQUNGLENBQUM7RUFFREYsS0FBSyxDQUFDZSxZQUFZLENBQ2hCLE9BQU8sRUFDUCw4REFBOEQsRUFDOUQsTUFBTTtJQUVKO0lBQ0FmLEtBQUssQ0FBQ2EsR0FBRyxDQUFDQyxPQUFPLENBQUUsNkNBQThDLENBQUM7SUFDbEUsTUFBTVosYUFBYSxHQUFHTixhQUFhLENBQUNvQixRQUFRLENBQUUsZUFBZ0IsQ0FBQztJQUMvRGhCLEtBQUssQ0FBQ2EsR0FBRyxDQUFDQyxPQUFPLENBQUcsR0FBRVosYUFBYyxFQUFFLENBQUM7RUFDekMsQ0FDRixDQUFDOztFQUVEO0VBQ0FGLEtBQUssQ0FBQ2UsWUFBWSxDQUFFLFNBQVMsRUFBRSxDQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLENBQUcsQ0FBQztBQUN4RSxDQUFDIn0=