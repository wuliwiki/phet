// Copyright 2014-2022, University of Colorado Boulder

/**
 * View representation of the back portion of a cube, which is to say the
 * dotted lines that represent the back edges that are obscured by the front
 * surfaces.
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import estimation from '../../estimation.js';
import EstimationConstants from '../EstimationConstants.js';
class CubeBackView extends Node {
  /**
   * @param {CubeModel} cubeModel
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(cubeModel, modelViewTransform) {
    super();
    const dottedLineBack = new Path(null, {
      stroke: '#8b7d6b',
      lineDash: [4, 5]
    });
    this.addChild(dottedLineBack);
    const updatePosition = () => {
      const transformedPosition = modelViewTransform.modelToViewPosition(cubeModel.positionProperty.value);
      // Position is defined as the bottom left in this sim.
      this.left = transformedPosition.x;
      this.bottom = transformedPosition.y;
    };

    // Hook up the update functions
    cubeModel.sizeProperty.link(() => {
      const faceWidth = modelViewTransform.modelToViewDeltaX(cubeModel.sizeProperty.value.width);
      const projectedDepth = modelViewTransform.modelToViewDeltaX(cubeModel.sizeProperty.value.depth) * EstimationConstants.DEPTH_PROJECTION_PROPORTION; // Assumes x & y scales are the same.
      const projectionVector = Vector2.createPolar(projectedDepth, -EstimationConstants.CUBE_PROJECTION_ANGLE);
      const height = -modelViewTransform.modelToViewDeltaY(cubeModel.sizeProperty.value.height);
      const origin = new Vector2(projectionVector.x, height + projectionVector.y);
      dottedLineBack.setShape(new Shape().moveTo(origin.x, origin.y).lineToRelative(0, -height).moveTo(origin.x, origin.y).lineToRelative(-projectionVector.x, -projectionVector.y).moveTo(origin.x, origin.y).lineToRelative(faceWidth, 0));
      updatePosition();
    });
    cubeModel.positionProperty.link(updatePosition);
    cubeModel.visibleProperty.link(visible => {
      this.visible = visible;
    });
  }
}
estimation.register('CubeBackView', CubeBackView);
export default CubeBackView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiU2hhcGUiLCJOb2RlIiwiUGF0aCIsImVzdGltYXRpb24iLCJFc3RpbWF0aW9uQ29uc3RhbnRzIiwiQ3ViZUJhY2tWaWV3IiwiY29uc3RydWN0b3IiLCJjdWJlTW9kZWwiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJkb3R0ZWRMaW5lQmFjayIsInN0cm9rZSIsImxpbmVEYXNoIiwiYWRkQ2hpbGQiLCJ1cGRhdGVQb3NpdGlvbiIsInRyYW5zZm9ybWVkUG9zaXRpb24iLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsInZhbHVlIiwibGVmdCIsIngiLCJib3R0b20iLCJ5Iiwic2l6ZVByb3BlcnR5IiwibGluayIsImZhY2VXaWR0aCIsIm1vZGVsVG9WaWV3RGVsdGFYIiwid2lkdGgiLCJwcm9qZWN0ZWREZXB0aCIsImRlcHRoIiwiREVQVEhfUFJPSkVDVElPTl9QUk9QT1JUSU9OIiwicHJvamVjdGlvblZlY3RvciIsImNyZWF0ZVBvbGFyIiwiQ1VCRV9QUk9KRUNUSU9OX0FOR0xFIiwiaGVpZ2h0IiwibW9kZWxUb1ZpZXdEZWx0YVkiLCJvcmlnaW4iLCJzZXRTaGFwZSIsIm1vdmVUbyIsImxpbmVUb1JlbGF0aXZlIiwidmlzaWJsZVByb3BlcnR5IiwidmlzaWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ3ViZUJhY2tWaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJhY2sgcG9ydGlvbiBvZiBhIGN1YmUsIHdoaWNoIGlzIHRvIHNheSB0aGVcclxuICogZG90dGVkIGxpbmVzIHRoYXQgcmVwcmVzZW50IHRoZSBiYWNrIGVkZ2VzIHRoYXQgYXJlIG9ic2N1cmVkIGJ5IHRoZSBmcm9udFxyXG4gKiBzdXJmYWNlcy5cclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBlc3RpbWF0aW9uIGZyb20gJy4uLy4uL2VzdGltYXRpb24uanMnO1xyXG5pbXBvcnQgRXN0aW1hdGlvbkNvbnN0YW50cyBmcm9tICcuLi9Fc3RpbWF0aW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbmNsYXNzIEN1YmVCYWNrVmlldyBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0N1YmVNb2RlbH0gY3ViZU1vZGVsXHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY3ViZU1vZGVsLCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGNvbnN0IGRvdHRlZExpbmVCYWNrID0gbmV3IFBhdGgoIG51bGwsIHsgc3Ryb2tlOiAnIzhiN2Q2YicsIGxpbmVEYXNoOiBbIDQsIDUgXSB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBkb3R0ZWRMaW5lQmFjayApO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZVBvc2l0aW9uID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZFBvc2l0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGN1YmVNb2RlbC5wb3NpdGlvblByb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgIC8vIFBvc2l0aW9uIGlzIGRlZmluZWQgYXMgdGhlIGJvdHRvbSBsZWZ0IGluIHRoaXMgc2ltLlxyXG4gICAgICB0aGlzLmxlZnQgPSB0cmFuc2Zvcm1lZFBvc2l0aW9uLng7XHJcbiAgICAgIHRoaXMuYm90dG9tID0gdHJhbnNmb3JtZWRQb3NpdGlvbi55O1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBIb29rIHVwIHRoZSB1cGRhdGUgZnVuY3Rpb25zXHJcbiAgICBjdWJlTW9kZWwuc2l6ZVByb3BlcnR5LmxpbmsoICgpID0+IHtcclxuICAgICAgY29uc3QgZmFjZVdpZHRoID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBjdWJlTW9kZWwuc2l6ZVByb3BlcnR5LnZhbHVlLndpZHRoICk7XHJcbiAgICAgIGNvbnN0IHByb2plY3RlZERlcHRoID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCBjdWJlTW9kZWwuc2l6ZVByb3BlcnR5LnZhbHVlLmRlcHRoICkgKiBFc3RpbWF0aW9uQ29uc3RhbnRzLkRFUFRIX1BST0pFQ1RJT05fUFJPUE9SVElPTjsgLy8gQXNzdW1lcyB4ICYgeSBzY2FsZXMgYXJlIHRoZSBzYW1lLlxyXG4gICAgICBjb25zdCBwcm9qZWN0aW9uVmVjdG9yID0gVmVjdG9yMi5jcmVhdGVQb2xhciggcHJvamVjdGVkRGVwdGgsIC1Fc3RpbWF0aW9uQ29uc3RhbnRzLkNVQkVfUFJPSkVDVElPTl9BTkdMRSApO1xyXG4gICAgICBjb25zdCBoZWlnaHQgPSAtbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCBjdWJlTW9kZWwuc2l6ZVByb3BlcnR5LnZhbHVlLmhlaWdodCApO1xyXG4gICAgICBjb25zdCBvcmlnaW4gPSBuZXcgVmVjdG9yMiggcHJvamVjdGlvblZlY3Rvci54LCBoZWlnaHQgKyBwcm9qZWN0aW9uVmVjdG9yLnkgKTtcclxuICAgICAgZG90dGVkTGluZUJhY2suc2V0U2hhcGUoIG5ldyBTaGFwZSgpXHJcbiAgICAgICAgLm1vdmVUbyggb3JpZ2luLngsIG9yaWdpbi55IClcclxuICAgICAgICAubGluZVRvUmVsYXRpdmUoIDAsIC1oZWlnaHQgKVxyXG4gICAgICAgIC5tb3ZlVG8oIG9yaWdpbi54LCBvcmlnaW4ueSApXHJcbiAgICAgICAgLmxpbmVUb1JlbGF0aXZlKCAtcHJvamVjdGlvblZlY3Rvci54LCAtcHJvamVjdGlvblZlY3Rvci55IClcclxuICAgICAgICAubW92ZVRvKCBvcmlnaW4ueCwgb3JpZ2luLnkgKVxyXG4gICAgICAgIC5saW5lVG9SZWxhdGl2ZSggZmFjZVdpZHRoLCAwIClcclxuICAgICAgKTtcclxuICAgICAgdXBkYXRlUG9zaXRpb24oKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBjdWJlTW9kZWwucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCB1cGRhdGVQb3NpdGlvbiApO1xyXG5cclxuICAgIGN1YmVNb2RlbC52aXNpYmxlUHJvcGVydHkubGluayggdmlzaWJsZSA9PiB7XHJcbiAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5lc3RpbWF0aW9uLnJlZ2lzdGVyKCAnQ3ViZUJhY2tWaWV3JywgQ3ViZUJhY2tWaWV3ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDdWJlQmFja1ZpZXc7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsVUFBVSxNQUFNLHFCQUFxQjtBQUM1QyxPQUFPQyxtQkFBbUIsTUFBTSwyQkFBMkI7QUFFM0QsTUFBTUMsWUFBWSxTQUFTSixJQUFJLENBQUM7RUFFOUI7QUFDRjtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsU0FBUyxFQUFFQyxrQkFBa0IsRUFBRztJQUMzQyxLQUFLLENBQUMsQ0FBQztJQUVQLE1BQU1DLGNBQWMsR0FBRyxJQUFJUCxJQUFJLENBQUUsSUFBSSxFQUFFO01BQUVRLE1BQU0sRUFBRSxTQUFTO01B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