// Copyright 2014-2022, University of Colorado Boulder

/**
 * View representation of a rectangle used within the Estimation simulation.
 * The rectangle is defined by a position, size, and color.  Some of these
 * attributes may change.
 */

import { Shape } from '../../../../kite/js/imports.js';
import { Node, Path } from '../../../../scenery/js/imports.js';
import estimation from '../../estimation.js';
class RectangleView extends Node {
  /**
   * @param {RectangleModel} rectangleModel
   * @param {ModelViewTransform2} modelViewTransform
   */
  constructor(rectangleModel, modelViewTransform) {
    super();
    const path = new Path(null, {
      fill: rectangleModel.color,
      stroke: rectangleModel.showOutline ? 'white' : null
    });
    this.addChild(path);
    const updatePosition = () => {
      const transformedPosition = modelViewTransform.modelToViewPosition(rectangleModel.positionProperty.value);
      // Position is defined as the bottom left in this sim.
      this.left = transformedPosition.x;
      this.bottom = transformedPosition.y;
    };

    // Hook up the update functions
    rectangleModel.sizeProperty.link(() => {
      path.setShape(Shape.rectangle(0, 0, modelViewTransform.modelToViewDeltaX(rectangleModel.sizeProperty.value.width), -modelViewTransform.modelToViewDeltaY(rectangleModel.sizeProperty.value.height)));
      updatePosition();
    });
    rectangleModel.positionProperty.link(updatePosition);
    rectangleModel.visibleProperty.link(visible => {
      this.visible = visible;
    });
  }
}
estimation.register('RectangleView', RectangleView);
export default RectangleView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIk5vZGUiLCJQYXRoIiwiZXN0aW1hdGlvbiIsIlJlY3RhbmdsZVZpZXciLCJjb25zdHJ1Y3RvciIsInJlY3RhbmdsZU1vZGVsIiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicGF0aCIsImZpbGwiLCJjb2xvciIsInN0cm9rZSIsInNob3dPdXRsaW5lIiwiYWRkQ2hpbGQiLCJ1cGRhdGVQb3NpdGlvbiIsInRyYW5zZm9ybWVkUG9zaXRpb24iLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwicG9zaXRpb25Qcm9wZXJ0eSIsInZhbHVlIiwibGVmdCIsIngiLCJib3R0b20iLCJ5Iiwic2l6ZVByb3BlcnR5IiwibGluayIsInNldFNoYXBlIiwicmVjdGFuZ2xlIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJ3aWR0aCIsIm1vZGVsVG9WaWV3RGVsdGFZIiwiaGVpZ2h0IiwidmlzaWJsZVByb3BlcnR5IiwidmlzaWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVjdGFuZ2xlVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IHJlcHJlc2VudGF0aW9uIG9mIGEgcmVjdGFuZ2xlIHVzZWQgd2l0aGluIHRoZSBFc3RpbWF0aW9uIHNpbXVsYXRpb24uXHJcbiAqIFRoZSByZWN0YW5nbGUgaXMgZGVmaW5lZCBieSBhIHBvc2l0aW9uLCBzaXplLCBhbmQgY29sb3IuICBTb21lIG9mIHRoZXNlXHJcbiAqIGF0dHJpYnV0ZXMgbWF5IGNoYW5nZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFBhdGggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgZXN0aW1hdGlvbiBmcm9tICcuLi8uLi9lc3RpbWF0aW9uLmpzJztcclxuXHJcbmNsYXNzIFJlY3RhbmdsZVZpZXcgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtSZWN0YW5nbGVNb2RlbH0gcmVjdGFuZ2xlTW9kZWxcclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCByZWN0YW5nbGVNb2RlbCwgbW9kZWxWaWV3VHJhbnNmb3JtICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIGNvbnN0IHBhdGggPSBuZXcgUGF0aCggbnVsbCwge1xyXG4gICAgICBmaWxsOiByZWN0YW5nbGVNb2RlbC5jb2xvcixcclxuICAgICAgc3Ryb2tlOiAoIHJlY3RhbmdsZU1vZGVsLnNob3dPdXRsaW5lID8gJ3doaXRlJyA6IG51bGwgKVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcGF0aCApO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZVBvc2l0aW9uID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZFBvc2l0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIHJlY3RhbmdsZU1vZGVsLnBvc2l0aW9uUHJvcGVydHkudmFsdWUgKTtcclxuICAgICAgLy8gUG9zaXRpb24gaXMgZGVmaW5lZCBhcyB0aGUgYm90dG9tIGxlZnQgaW4gdGhpcyBzaW0uXHJcbiAgICAgIHRoaXMubGVmdCA9IHRyYW5zZm9ybWVkUG9zaXRpb24ueDtcclxuICAgICAgdGhpcy5ib3R0b20gPSB0cmFuc2Zvcm1lZFBvc2l0aW9uLnk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEhvb2sgdXAgdGhlIHVwZGF0ZSBmdW5jdGlvbnNcclxuICAgIHJlY3RhbmdsZU1vZGVsLnNpemVQcm9wZXJ0eS5saW5rKCAoKSA9PiB7XHJcbiAgICAgIHBhdGguc2V0U2hhcGUoIFNoYXBlLnJlY3RhbmdsZSggMCwgMCwgbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFYKCByZWN0YW5nbGVNb2RlbC5zaXplUHJvcGVydHkudmFsdWUud2lkdGggKSxcclxuICAgICAgICAtbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3RGVsdGFZKCByZWN0YW5nbGVNb2RlbC5zaXplUHJvcGVydHkudmFsdWUuaGVpZ2h0ICkgKSApO1xyXG4gICAgICB1cGRhdGVQb3NpdGlvbigpO1xyXG4gICAgfSApO1xyXG4gICAgcmVjdGFuZ2xlTW9kZWwucG9zaXRpb25Qcm9wZXJ0eS5saW5rKCB1cGRhdGVQb3NpdGlvbiApO1xyXG4gICAgcmVjdGFuZ2xlTW9kZWwudmlzaWJsZVByb3BlcnR5LmxpbmsoIHZpc2libGUgPT4ge1xyXG4gICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuZXN0aW1hdGlvbi5yZWdpc3RlciggJ1JlY3RhbmdsZVZpZXcnLCBSZWN0YW5nbGVWaWV3ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSZWN0YW5nbGVWaWV3OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxVQUFVLE1BQU0scUJBQXFCO0FBRTVDLE1BQU1DLGFBQWEsU0FBU0gsSUFBSSxDQUFDO0VBRS9CO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLGNBQWMsRUFBRUMsa0JBQWtCLEVBQUc7SUFDaEQsS0FBSyxDQUFDLENBQUM7SUFDUCxNQUFNQyxJQUFJLEdBQUcsSUFBSU4sSUFBSSxDQUFFLElBQUksRUFBRTtNQUMzQk8sSUFBSSxFQUFFSCxjQUFjLENBQUNJLEtBQUs7TUFDMUJDLE1BQU0sRUFBSUwsY0FBYyxDQUFDTSxXQUFXLEdBQUcsT0FBTyxHQUFHO0lBQ25ELENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0MsUUFBUSxDQUFFTCxJQUFLLENBQUM7SUFFckIsTUFBTU0sY0FBYyxHQUFHQSxDQUFBLEtBQU07TUFDM0IsTUFBTUMsbUJBQW1CLEdBQUdSLGtCQUFrQixDQUFDUyxtQkFBbUIsQ0FBRVYsY0FBYyxDQUFDVyxnQkFBZ0IsQ0FBQ0MsS0FBTSxDQUFDO01BQzNHO01BQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUdKLG1CQUFtQixDQUFDSyxDQUFDO01BQ2pDLElBQUksQ0FBQ0MsTUFBTSxHQUFHTixtQkFBbUIsQ0FBQ08sQ0FBQztJQUNyQyxDQUFDOztJQUVEO0lBQ0FoQixjQUFjLENBQUNpQixZQUFZLENBQUNDLElBQUksQ0FBRSxNQUFNO01BQ3RDaEIsSUFBSSxDQUFDaUIsUUFBUSxDQUFFekIsS0FBSyxDQUFDMEIsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVuQixrQkFBa0IsQ0FBQ29CLGlCQUFpQixDQUFFckIsY0FBYyxDQUFDaUIsWUFBWSxDQUFDTCxLQUFLLENBQUNVLEtBQU0sQ0FBQyxFQUNuSCxDQUFDckIsa0JBQWtCLENBQUNzQixpQkFBaUIsQ0FBRXZCLGNBQWMsQ0FBQ2lCLFlBQVksQ0FBQ0wsS0FBSyxDQUFDWSxNQUFPLENBQUUsQ0FBRSxDQUFDO01BQ3ZGaEIsY0FBYyxDQUFDLENBQUM7SUFDbEIsQ0FBRSxDQUFDO0lBQ0hSLGNBQWMsQ0FBQ1csZ0JBQWdCLENBQUNPLElBQUksQ0FBRVYsY0FBZSxDQUFDO0lBQ3REUixjQUFjLENBQUN5QixlQUFlLENBQUNQLElBQUksQ0FBRVEsT0FBTyxJQUFJO01BQzlDLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxPQUFPO0lBQ3hCLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQTdCLFVBQVUsQ0FBQzhCLFFBQVEsQ0FBRSxlQUFlLEVBQUU3QixhQUFjLENBQUM7QUFFckQsZUFBZUEsYUFBYSJ9