// Copyright 2015-2023, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author Brandon Li
 */

import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import Tandem from '../../tandem/js/Tandem.js';
import CalculusGrapherStrings from './CalculusGrapherStrings.js';
import DerivativeScreen from './derivative/DerivativeScreen.js';
import IntegralScreen from './integral/IntegralScreen.js';
import LabScreen from './lab/LabScreen.js';
import AdvancedScreen from './advanced/AdvancedScreen.js';
import CalculusGrapherSimulationPreferencesNode from './common/view/preferences/CalculusGrapherSimulationPreferencesNode.js';
import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import CalculusGrapherPreferences from './common/model/CalculusGrapherPreferences.js';
const credits = {
  leadDesign: 'Amanda McGarry',
  softwareDevelopment: 'Martin Veillette, Chris Malley (PixelZoom, Inc.), Brandon Li',
  team: 'Catherine Carter, Michael Dubson, Ariel Paul, Kathy Perkins',
  qualityAssurance: 'Jaron Droder, Emily Miller, Liam Mulhall, Nancy Salpepi, Kathryn Woessner'
};

// Launch the 'Calculus Grapher' simulation.
simLauncher.launch(() => {
  const screens = [new DerivativeScreen(Tandem.ROOT.createTandem('derivativeScreen')), new IntegralScreen(Tandem.ROOT.createTandem('integralScreen')), new AdvancedScreen(Tandem.ROOT.createTandem('advancedScreen')), new LabScreen(Tandem.ROOT.createTandem('labScreen'))];
  const preferencesModel = new PreferencesModel({
    simulationOptions: {
      customPreferences: [{
        createContent: tandem => new CalculusGrapherSimulationPreferencesNode(tandem.createTandem('content')),
        modelLinkables: [{
          property: CalculusGrapherPreferences.valuesVisibleProperty
        }, {
          property: CalculusGrapherPreferences.connectDiscontinuitiesProperty
        }, {
          property: CalculusGrapherPreferences.derivativeNotationProperty
        }, {
          property: CalculusGrapherPreferences.functionVariableProperty
        }]
      }]
    }
  });
  const sim = new Sim(CalculusGrapherStrings['calculus-grapher'].titleStringProperty, screens, {
    credits: credits,
    preferencesModel: preferencesModel,
    phetioDesigned: true
  });
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW0iLCJzaW1MYXVuY2hlciIsIlRhbmRlbSIsIkNhbGN1bHVzR3JhcGhlclN0cmluZ3MiLCJEZXJpdmF0aXZlU2NyZWVuIiwiSW50ZWdyYWxTY3JlZW4iLCJMYWJTY3JlZW4iLCJBZHZhbmNlZFNjcmVlbiIsIkNhbGN1bHVzR3JhcGhlclNpbXVsYXRpb25QcmVmZXJlbmNlc05vZGUiLCJQcmVmZXJlbmNlc01vZGVsIiwiQ2FsY3VsdXNHcmFwaGVyUHJlZmVyZW5jZXMiLCJjcmVkaXRzIiwibGVhZERlc2lnbiIsInNvZnR3YXJlRGV2ZWxvcG1lbnQiLCJ0ZWFtIiwicXVhbGl0eUFzc3VyYW5jZSIsImxhdW5jaCIsInNjcmVlbnMiLCJST09UIiwiY3JlYXRlVGFuZGVtIiwicHJlZmVyZW5jZXNNb2RlbCIsInNpbXVsYXRpb25PcHRpb25zIiwiY3VzdG9tUHJlZmVyZW5jZXMiLCJjcmVhdGVDb250ZW50IiwidGFuZGVtIiwibW9kZWxMaW5rYWJsZXMiLCJwcm9wZXJ0eSIsInZhbHVlc1Zpc2libGVQcm9wZXJ0eSIsImNvbm5lY3REaXNjb250aW51aXRpZXNQcm9wZXJ0eSIsImRlcml2YXRpdmVOb3RhdGlvblByb3BlcnR5IiwiZnVuY3Rpb25WYXJpYWJsZVByb3BlcnR5Iiwic2ltIiwidGl0bGVTdHJpbmdQcm9wZXJ0eSIsInBoZXRpb0Rlc2lnbmVkIiwic3RhcnQiXSwic291cmNlcyI6WyJjYWxjdWx1cy1ncmFwaGVyLW1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlIHNpbS5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNpbSBmcm9tICcuLi8uLi9qb2lzdC9qcy9TaW0uanMnO1xyXG5pbXBvcnQgc2ltTGF1bmNoZXIgZnJvbSAnLi4vLi4vam9pc3QvanMvc2ltTGF1bmNoZXIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncyBmcm9tICcuL0NhbGN1bHVzR3JhcGhlclN0cmluZ3MuanMnO1xyXG5pbXBvcnQgRGVyaXZhdGl2ZVNjcmVlbiBmcm9tICcuL2Rlcml2YXRpdmUvRGVyaXZhdGl2ZVNjcmVlbi5qcyc7XHJcbmltcG9ydCBJbnRlZ3JhbFNjcmVlbiBmcm9tICcuL2ludGVncmFsL0ludGVncmFsU2NyZWVuLmpzJztcclxuaW1wb3J0IExhYlNjcmVlbiBmcm9tICcuL2xhYi9MYWJTY3JlZW4uanMnO1xyXG5pbXBvcnQgQWR2YW5jZWRTY3JlZW4gZnJvbSAnLi9hZHZhbmNlZC9BZHZhbmNlZFNjcmVlbi5qcyc7XHJcbmltcG9ydCB7IENyZWRpdHNEYXRhIH0gZnJvbSAnLi4vLi4vam9pc3QvanMvQ3JlZGl0c05vZGUuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU2ltdWxhdGlvblByZWZlcmVuY2VzTm9kZSBmcm9tICcuL2NvbW1vbi92aWV3L3ByZWZlcmVuY2VzL0NhbGN1bHVzR3JhcGhlclNpbXVsYXRpb25QcmVmZXJlbmNlc05vZGUuanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNNb2RlbCBmcm9tICcuLi8uLi9qb2lzdC9qcy9wcmVmZXJlbmNlcy9QcmVmZXJlbmNlc01vZGVsLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzIGZyb20gJy4vY29tbW9uL21vZGVsL0NhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzLmpzJztcclxuXHJcbmNvbnN0IGNyZWRpdHM6IENyZWRpdHNEYXRhID0ge1xyXG4gIGxlYWREZXNpZ246ICdBbWFuZGEgTWNHYXJyeScsXHJcbiAgc29mdHdhcmVEZXZlbG9wbWVudDogJ01hcnRpbiBWZWlsbGV0dGUsIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKSwgQnJhbmRvbiBMaScsXHJcbiAgdGVhbTogJ0NhdGhlcmluZSBDYXJ0ZXIsIE1pY2hhZWwgRHVic29uLCBBcmllbCBQYXVsLCBLYXRoeSBQZXJraW5zJyxcclxuICBxdWFsaXR5QXNzdXJhbmNlOiAnSmFyb24gRHJvZGVyLCBFbWlseSBNaWxsZXIsIExpYW0gTXVsaGFsbCwgTmFuY3kgU2FscGVwaSwgS2F0aHJ5biBXb2Vzc25lcidcclxufTtcclxuXHJcbi8vIExhdW5jaCB0aGUgJ0NhbGN1bHVzIEdyYXBoZXInIHNpbXVsYXRpb24uXHJcbnNpbUxhdW5jaGVyLmxhdW5jaCggKCkgPT4ge1xyXG5cclxuICBjb25zdCBzY3JlZW5zID0gW1xyXG4gICAgbmV3IERlcml2YXRpdmVTY3JlZW4oIFRhbmRlbS5ST09ULmNyZWF0ZVRhbmRlbSggJ2Rlcml2YXRpdmVTY3JlZW4nICkgKSxcclxuICAgIG5ldyBJbnRlZ3JhbFNjcmVlbiggVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAnaW50ZWdyYWxTY3JlZW4nICkgKSxcclxuICAgIG5ldyBBZHZhbmNlZFNjcmVlbiggVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAnYWR2YW5jZWRTY3JlZW4nICkgKSxcclxuICAgIG5ldyBMYWJTY3JlZW4oIFRhbmRlbS5ST09ULmNyZWF0ZVRhbmRlbSggJ2xhYlNjcmVlbicgKSApXHJcbiAgXTtcclxuXHJcbiAgY29uc3QgcHJlZmVyZW5jZXNNb2RlbCA9IG5ldyBQcmVmZXJlbmNlc01vZGVsKCB7XHJcbiAgICBzaW11bGF0aW9uT3B0aW9uczoge1xyXG4gICAgICBjdXN0b21QcmVmZXJlbmNlczogWyB7XHJcbiAgICAgICAgY3JlYXRlQ29udGVudDogdGFuZGVtID0+IG5ldyBDYWxjdWx1c0dyYXBoZXJTaW11bGF0aW9uUHJlZmVyZW5jZXNOb2RlKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY29udGVudCcgKSApLFxyXG4gICAgICAgIG1vZGVsTGlua2FibGVzOiBbXHJcbiAgICAgICAgICB7IHByb3BlcnR5OiBDYWxjdWx1c0dyYXBoZXJQcmVmZXJlbmNlcy52YWx1ZXNWaXNpYmxlUHJvcGVydHkgfSxcclxuICAgICAgICAgIHsgcHJvcGVydHk6IENhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzLmNvbm5lY3REaXNjb250aW51aXRpZXNQcm9wZXJ0eSB9LFxyXG4gICAgICAgICAgeyBwcm9wZXJ0eTogQ2FsY3VsdXNHcmFwaGVyUHJlZmVyZW5jZXMuZGVyaXZhdGl2ZU5vdGF0aW9uUHJvcGVydHkgfSxcclxuICAgICAgICAgIHsgcHJvcGVydHk6IENhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzLmZ1bmN0aW9uVmFyaWFibGVQcm9wZXJ0eSB9XHJcbiAgICAgICAgXVxyXG4gICAgICB9IF1cclxuICAgIH1cclxuICB9ICk7XHJcblxyXG4gIGNvbnN0IHNpbSA9IG5ldyBTaW0oIENhbGN1bHVzR3JhcGhlclN0cmluZ3NbICdjYWxjdWx1cy1ncmFwaGVyJyBdLnRpdGxlU3RyaW5nUHJvcGVydHksIHNjcmVlbnMsIHtcclxuICAgIGNyZWRpdHM6IGNyZWRpdHMsXHJcbiAgICBwcmVmZXJlbmNlc01vZGVsOiBwcmVmZXJlbmNlc01vZGVsLFxyXG4gICAgcGhldGlvRGVzaWduZWQ6IHRydWVcclxuICB9ICk7XHJcblxyXG4gIHNpbS5zdGFydCgpO1xyXG59ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxHQUFHLE1BQU0sdUJBQXVCO0FBQ3ZDLE9BQU9DLFdBQVcsTUFBTSwrQkFBK0I7QUFDdkQsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUM5QyxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFDaEUsT0FBT0MsZ0JBQWdCLE1BQU0sa0NBQWtDO0FBQy9ELE9BQU9DLGNBQWMsTUFBTSw4QkFBOEI7QUFDekQsT0FBT0MsU0FBUyxNQUFNLG9CQUFvQjtBQUMxQyxPQUFPQyxjQUFjLE1BQU0sOEJBQThCO0FBRXpELE9BQU9DLHdDQUF3QyxNQUFNLHVFQUF1RTtBQUM1SCxPQUFPQyxnQkFBZ0IsTUFBTSxnREFBZ0Q7QUFDN0UsT0FBT0MsMEJBQTBCLE1BQU0sOENBQThDO0FBRXJGLE1BQU1DLE9BQW9CLEdBQUc7RUFDM0JDLFVBQVUsRUFBRSxnQkFBZ0I7RUFDNUJDLG1CQUFtQixFQUFFLDhEQUE4RDtFQUNuRkMsSUFBSSxFQUFFLDZEQUE2RDtFQUNuRUMsZ0JBQWdCLEVBQUU7QUFDcEIsQ0FBQzs7QUFFRDtBQUNBZCxXQUFXLENBQUNlLE1BQU0sQ0FBRSxNQUFNO0VBRXhCLE1BQU1DLE9BQU8sR0FBRyxDQUNkLElBQUliLGdCQUFnQixDQUFFRixNQUFNLENBQUNnQixJQUFJLENBQUNDLFlBQVksQ0FBRSxrQkFBbUIsQ0FBRSxDQUFDLEVBQ3RFLElBQUlkLGNBQWMsQ0FBRUgsTUFBTSxDQUFDZ0IsSUFBSSxDQUFDQyxZQUFZLENBQUUsZ0JBQWlCLENBQUUsQ0FBQyxFQUNsRSxJQUFJWixjQUFjLENBQUVMLE1BQU0sQ0FBQ2dCLElBQUksQ0FBQ0MsWUFBWSxDQUFFLGdCQUFpQixDQUFFLENBQUMsRUFDbEUsSUFBSWIsU0FBUyxDQUFFSixNQUFNLENBQUNnQixJQUFJLENBQUNDLFlBQVksQ0FBRSxXQUFZLENBQUUsQ0FBQyxDQUN6RDtFQUVELE1BQU1DLGdCQUFnQixHQUFHLElBQUlYLGdCQUFnQixDQUFFO0lBQzdDWSxpQkFBaUIsRUFBRTtNQUNqQkMsaUJBQWlCLEVBQUUsQ0FBRTtRQUNuQkMsYUFBYSxFQUFFQyxNQUFNLElBQUksSUFBSWhCLHdDQUF3QyxDQUFFZ0IsTUFBTSxDQUFDTCxZQUFZLENBQUUsU0FBVSxDQUFFLENBQUM7UUFDekdNLGNBQWMsRUFBRSxDQUNkO1VBQUVDLFFBQVEsRUFBRWhCLDBCQUEwQixDQUFDaUI7UUFBc0IsQ0FBQyxFQUM5RDtVQUFFRCxRQUFRLEVBQUVoQiwwQkFBMEIsQ0FBQ2tCO1FBQStCLENBQUMsRUFDdkU7VUFBRUYsUUFBUSxFQUFFaEIsMEJBQTBCLENBQUNtQjtRQUEyQixDQUFDLEVBQ25FO1VBQUVILFFBQVEsRUFBRWhCLDBCQUEwQixDQUFDb0I7UUFBeUIsQ0FBQztNQUVyRSxDQUFDO0lBQ0g7RUFDRixDQUFFLENBQUM7RUFFSCxNQUFNQyxHQUFHLEdBQUcsSUFBSS9CLEdBQUcsQ0FBRUcsc0JBQXNCLENBQUUsa0JBQWtCLENBQUUsQ0FBQzZCLG1CQUFtQixFQUFFZixPQUFPLEVBQUU7SUFDOUZOLE9BQU8sRUFBRUEsT0FBTztJQUNoQlMsZ0JBQWdCLEVBQUVBLGdCQUFnQjtJQUNsQ2EsY0FBYyxFQUFFO0VBQ2xCLENBQUUsQ0FBQztFQUVIRixHQUFHLENBQUNHLEtBQUssQ0FBQyxDQUFDO0FBQ2IsQ0FBRSxDQUFDIn0=