// Copyright 2020-2023, University of Colorado Boulder

/**
 * IntegralScreenView is the top-level view for the 'Integral' screen.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherScreenView from '../../common/view/CalculusGrapherScreenView.js';
import NetSignedAreaAccordionBox from '../../common/view/NetSignedAreaAccordionBox.js';
import AreaUnderCurveCheckbox from '../../common/view/AreaUnderCurveCheckbox.js';
import Multilink from '../../../../axon/js/Multilink.js';
export default class IntegralScreenView extends CalculusGrapherScreenView {
  constructor(model, providedOptions) {
    const options = optionize()({
      // CalculusGrapherScreenViewOptions
      controlPanelOptions: {
        hasSmoothButton: false
      }
    }, providedOptions);
    super(model, options);

    // Add decorations to the graphs for the AreaUnderCurveScrubber.
    this.graphsNode.addAreaUnderCurveView(model.areaUnderCurveScrubber, model.predictEnabledProperty);

    // The accordion box titled 'Net Signed Area'
    const netSignedAreaAccordionBox = new NetSignedAreaAccordionBox(model.areaUnderCurveScrubber, model.predictEnabledProperty, {
      tandem: options.tandem.createTandem('netSignedAreaAccordionBox')
    });
    this.screenViewRootNode.addChild(netSignedAreaAccordionBox);

    // Center netSignedAreaAccordionBox in the negative space to the left of graphNode, top-aligned with graphNode.y.
    Multilink.multilink([this.graphsNode.boundsProperty, netSignedAreaAccordionBox.boundsProperty], () => {
      const eyeToggleButtonLeft = this.graphsNode.x + this.graphsNode.getEyeToggleButtonXOffset();
      netSignedAreaAccordionBox.centerX = this.layoutBounds.left + (eyeToggleButtonLeft - this.layoutBounds.left) / 2;
      netSignedAreaAccordionBox.top = this.graphsNode.y + this.graphsNode.originalGraphNode.y;
    });

    // Add 'Area Under Curve' checkbox to the top of the checkbox group.
    const areaUnderCurveCheckbox = new AreaUnderCurveCheckbox(model.areaUnderCurveScrubber.visibleProperty, model.predictEnabledProperty, this.checkboxGroup.tandem.createTandem('areaUnderCurveCheckbox'));
    this.checkboxGroup.insertChild(0, areaUnderCurveCheckbox);
    this.resetIntegralScreenView = () => {
      netSignedAreaAccordionBox.reset();
    };
  }
  reset() {
    this.resetIntegralScreenView();
    super.reset();
  }
}
calculusGrapher.register('IntegralScreenView', IntegralScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJTY3JlZW5WaWV3IiwiTmV0U2lnbmVkQXJlYUFjY29yZGlvbkJveCIsIkFyZWFVbmRlckN1cnZlQ2hlY2tib3giLCJNdWx0aWxpbmsiLCJJbnRlZ3JhbFNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImNvbnRyb2xQYW5lbE9wdGlvbnMiLCJoYXNTbW9vdGhCdXR0b24iLCJncmFwaHNOb2RlIiwiYWRkQXJlYVVuZGVyQ3VydmVWaWV3IiwiYXJlYVVuZGVyQ3VydmVTY3J1YmJlciIsInByZWRpY3RFbmFibGVkUHJvcGVydHkiLCJuZXRTaWduZWRBcmVhQWNjb3JkaW9uQm94IiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwic2NyZWVuVmlld1Jvb3ROb2RlIiwiYWRkQ2hpbGQiLCJtdWx0aWxpbmsiLCJib3VuZHNQcm9wZXJ0eSIsImV5ZVRvZ2dsZUJ1dHRvbkxlZnQiLCJ4IiwiZ2V0RXllVG9nZ2xlQnV0dG9uWE9mZnNldCIsImNlbnRlclgiLCJsYXlvdXRCb3VuZHMiLCJsZWZ0IiwidG9wIiwieSIsIm9yaWdpbmFsR3JhcGhOb2RlIiwiYXJlYVVuZGVyQ3VydmVDaGVja2JveCIsInZpc2libGVQcm9wZXJ0eSIsImNoZWNrYm94R3JvdXAiLCJpbnNlcnRDaGlsZCIsInJlc2V0SW50ZWdyYWxTY3JlZW5WaWV3IiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkludGVncmFsU2NyZWVuVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJbnRlZ3JhbFNjcmVlblZpZXcgaXMgdGhlIHRvcC1sZXZlbCB2aWV3IGZvciB0aGUgJ0ludGVncmFsJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU2NyZWVuVmlldywgeyBDYWxjdWx1c0dyYXBoZXJTY3JlZW5WaWV3T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0NhbGN1bHVzR3JhcGhlclNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgSW50ZWdyYWxNb2RlbCBmcm9tICcuLi9tb2RlbC9JbnRlZ3JhbE1vZGVsLmpzJztcclxuaW1wb3J0IE5ldFNpZ25lZEFyZWFBY2NvcmRpb25Cb3ggZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvTmV0U2lnbmVkQXJlYUFjY29yZGlvbkJveC5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBBcmVhVW5kZXJDdXJ2ZUNoZWNrYm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0FyZWFVbmRlckN1cnZlQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBJbnRyb1NjcmVlblZpZXdPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Q2FsY3VsdXNHcmFwaGVyU2NyZWVuVmlld09wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludGVncmFsU2NyZWVuVmlldyBleHRlbmRzIENhbGN1bHVzR3JhcGhlclNjcmVlblZpZXcge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHJlc2V0SW50ZWdyYWxTY3JlZW5WaWV3OiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBJbnRlZ3JhbE1vZGVsLCBwcm92aWRlZE9wdGlvbnM6IEludHJvU2NyZWVuVmlld09wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxJbnRyb1NjcmVlblZpZXdPcHRpb25zLCBTZWxmT3B0aW9ucywgQ2FsY3VsdXNHcmFwaGVyU2NyZWVuVmlld09wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIENhbGN1bHVzR3JhcGhlclNjcmVlblZpZXdPcHRpb25zXHJcbiAgICAgIGNvbnRyb2xQYW5lbE9wdGlvbnM6IHtcclxuICAgICAgICBoYXNTbW9vdGhCdXR0b246IGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEFkZCBkZWNvcmF0aW9ucyB0byB0aGUgZ3JhcGhzIGZvciB0aGUgQXJlYVVuZGVyQ3VydmVTY3J1YmJlci5cclxuICAgIHRoaXMuZ3JhcGhzTm9kZS5hZGRBcmVhVW5kZXJDdXJ2ZVZpZXcoIG1vZGVsLmFyZWFVbmRlckN1cnZlU2NydWJiZXIsIG1vZGVsLnByZWRpY3RFbmFibGVkUHJvcGVydHkgKTtcclxuXHJcbiAgICAvLyBUaGUgYWNjb3JkaW9uIGJveCB0aXRsZWQgJ05ldCBTaWduZWQgQXJlYSdcclxuICAgIGNvbnN0IG5ldFNpZ25lZEFyZWFBY2NvcmRpb25Cb3ggPSBuZXcgTmV0U2lnbmVkQXJlYUFjY29yZGlvbkJveCggbW9kZWwuYXJlYVVuZGVyQ3VydmVTY3J1YmJlcixcclxuICAgICAgbW9kZWwucHJlZGljdEVuYWJsZWRQcm9wZXJ0eSwge1xyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbmV0U2lnbmVkQXJlYUFjY29yZGlvbkJveCcgKVxyXG4gICAgICB9ICk7XHJcbiAgICB0aGlzLnNjcmVlblZpZXdSb290Tm9kZS5hZGRDaGlsZCggbmV0U2lnbmVkQXJlYUFjY29yZGlvbkJveCApO1xyXG5cclxuICAgIC8vIENlbnRlciBuZXRTaWduZWRBcmVhQWNjb3JkaW9uQm94IGluIHRoZSBuZWdhdGl2ZSBzcGFjZSB0byB0aGUgbGVmdCBvZiBncmFwaE5vZGUsIHRvcC1hbGlnbmVkIHdpdGggZ3JhcGhOb2RlLnkuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHRoaXMuZ3JhcGhzTm9kZS5ib3VuZHNQcm9wZXJ0eSwgbmV0U2lnbmVkQXJlYUFjY29yZGlvbkJveC5ib3VuZHNQcm9wZXJ0eSBdLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXllVG9nZ2xlQnV0dG9uTGVmdCA9IHRoaXMuZ3JhcGhzTm9kZS54ICsgdGhpcy5ncmFwaHNOb2RlLmdldEV5ZVRvZ2dsZUJ1dHRvblhPZmZzZXQoKTtcclxuICAgICAgICBuZXRTaWduZWRBcmVhQWNjb3JkaW9uQm94LmNlbnRlclggPSB0aGlzLmxheW91dEJvdW5kcy5sZWZ0ICsgKCBleWVUb2dnbGVCdXR0b25MZWZ0IC0gdGhpcy5sYXlvdXRCb3VuZHMubGVmdCApIC8gMjtcclxuICAgICAgICBuZXRTaWduZWRBcmVhQWNjb3JkaW9uQm94LnRvcCA9IHRoaXMuZ3JhcGhzTm9kZS55ICsgdGhpcy5ncmFwaHNOb2RlLm9yaWdpbmFsR3JhcGhOb2RlLnk7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAvLyBBZGQgJ0FyZWEgVW5kZXIgQ3VydmUnIGNoZWNrYm94IHRvIHRoZSB0b3Agb2YgdGhlIGNoZWNrYm94IGdyb3VwLlxyXG4gICAgY29uc3QgYXJlYVVuZGVyQ3VydmVDaGVja2JveCA9IG5ldyBBcmVhVW5kZXJDdXJ2ZUNoZWNrYm94KCBtb2RlbC5hcmVhVW5kZXJDdXJ2ZVNjcnViYmVyLnZpc2libGVQcm9wZXJ0eSxcclxuICAgICAgbW9kZWwucHJlZGljdEVuYWJsZWRQcm9wZXJ0eSwgdGhpcy5jaGVja2JveEdyb3VwLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhcmVhVW5kZXJDdXJ2ZUNoZWNrYm94JyApICk7XHJcbiAgICB0aGlzLmNoZWNrYm94R3JvdXAuaW5zZXJ0Q2hpbGQoIDAsIGFyZWFVbmRlckN1cnZlQ2hlY2tib3ggKTtcclxuXHJcbiAgICB0aGlzLnJlc2V0SW50ZWdyYWxTY3JlZW5WaWV3ID0gKCkgPT4ge1xyXG4gICAgICBuZXRTaWduZWRBcmVhQWNjb3JkaW9uQm94LnJlc2V0KCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5yZXNldEludGVncmFsU2NyZWVuVmlldygpO1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0ludGVncmFsU2NyZWVuVmlldycsIEludGVncmFsU2NyZWVuVmlldyApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsT0FBT0MseUJBQXlCLE1BQTRDLGdEQUFnRDtBQUU1SCxPQUFPQyx5QkFBeUIsTUFBTSxnREFBZ0Q7QUFFdEYsT0FBT0Msc0JBQXNCLE1BQU0sNkNBQTZDO0FBQ2hGLE9BQU9DLFNBQVMsTUFBTSxrQ0FBa0M7QUFNeEQsZUFBZSxNQUFNQyxrQkFBa0IsU0FBU0oseUJBQXlCLENBQUM7RUFJakVLLFdBQVdBLENBQUVDLEtBQW9CLEVBQUVDLGVBQXVDLEVBQUc7SUFFbEYsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQXdFLENBQUMsQ0FBRTtNQUVsRztNQUNBVyxtQkFBbUIsRUFBRTtRQUNuQkMsZUFBZSxFQUFFO01BQ25CO0lBQ0YsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUQsS0FBSyxFQUFFRSxPQUFRLENBQUM7O0lBRXZCO0lBQ0EsSUFBSSxDQUFDRyxVQUFVLENBQUNDLHFCQUFxQixDQUFFTixLQUFLLENBQUNPLHNCQUFzQixFQUFFUCxLQUFLLENBQUNRLHNCQUF1QixDQUFDOztJQUVuRztJQUNBLE1BQU1DLHlCQUF5QixHQUFHLElBQUlkLHlCQUF5QixDQUFFSyxLQUFLLENBQUNPLHNCQUFzQixFQUMzRlAsS0FBSyxDQUFDUSxzQkFBc0IsRUFBRTtNQUM1QkUsTUFBTSxFQUFFUixPQUFPLENBQUNRLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLDJCQUE0QjtJQUNuRSxDQUFFLENBQUM7SUFDTCxJQUFJLENBQUNDLGtCQUFrQixDQUFDQyxRQUFRLENBQUVKLHlCQUEwQixDQUFDOztJQUU3RDtJQUNBWixTQUFTLENBQUNpQixTQUFTLENBQUUsQ0FBRSxJQUFJLENBQUNULFVBQVUsQ0FBQ1UsY0FBYyxFQUFFTix5QkFBeUIsQ0FBQ00sY0FBYyxDQUFFLEVBQy9GLE1BQU07TUFDSixNQUFNQyxtQkFBbUIsR0FBRyxJQUFJLENBQUNYLFVBQVUsQ0FBQ1ksQ0FBQyxHQUFHLElBQUksQ0FBQ1osVUFBVSxDQUFDYSx5QkFBeUIsQ0FBQyxDQUFDO01BQzNGVCx5QkFBeUIsQ0FBQ1UsT0FBTyxHQUFHLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxJQUFJLEdBQUcsQ0FBRUwsbUJBQW1CLEdBQUcsSUFBSSxDQUFDSSxZQUFZLENBQUNDLElBQUksSUFBSyxDQUFDO01BQ2pIWix5QkFBeUIsQ0FBQ2EsR0FBRyxHQUFHLElBQUksQ0FBQ2pCLFVBQVUsQ0FBQ2tCLENBQUMsR0FBRyxJQUFJLENBQUNsQixVQUFVLENBQUNtQixpQkFBaUIsQ0FBQ0QsQ0FBQztJQUN6RixDQUFFLENBQUM7O0lBRUw7SUFDQSxNQUFNRSxzQkFBc0IsR0FBRyxJQUFJN0Isc0JBQXNCLENBQUVJLEtBQUssQ0FBQ08sc0JBQXNCLENBQUNtQixlQUFlLEVBQ3JHMUIsS0FBSyxDQUFDUSxzQkFBc0IsRUFBRSxJQUFJLENBQUNtQixhQUFhLENBQUNqQixNQUFNLENBQUNDLFlBQVksQ0FBRSx3QkFBeUIsQ0FBRSxDQUFDO0lBQ3BHLElBQUksQ0FBQ2dCLGFBQWEsQ0FBQ0MsV0FBVyxDQUFFLENBQUMsRUFBRUgsc0JBQXVCLENBQUM7SUFFM0QsSUFBSSxDQUFDSSx1QkFBdUIsR0FBRyxNQUFNO01BQ25DcEIseUJBQXlCLENBQUNxQixLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0VBQ0g7RUFFZ0JBLEtBQUtBLENBQUEsRUFBUztJQUM1QixJQUFJLENBQUNELHVCQUF1QixDQUFDLENBQUM7SUFDOUIsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNmO0FBQ0Y7QUFFQXJDLGVBQWUsQ0FBQ3NDLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRWpDLGtCQUFtQixDQUFDIn0=