// Copyright 2020-2023, University of Colorado Boulder

/**
 * The 'Integral' screen.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Screen from '../../../joist/js/Screen.js';
import calculusGrapher from '../calculusGrapher.js';
import CalculusGrapherStrings from '../CalculusGrapherStrings.js';
import CalculusGrapherColors from '../common/CalculusGrapherColors.js';
import IntegralModel from './model/IntegralModel.js';
import IntegralScreenView from './view/IntegralScreenView.js';
import GraphType from '../common/model/GraphType.js';
import GraphSet from '../common/model/GraphSet.js';
import CalculusGrapherScreenIconFactory from '../common/view/CalculusGrapherScreenIconFactory.js';
export default class IntegralScreen extends Screen {
  constructor(tandem) {
    const graphSets = [new GraphSet([GraphType.INTEGRAL, GraphType.ORIGINAL])];
    const createModel = () => new IntegralModel({
      graphSets: graphSets,
      tandem: tandem.createTandem('model')
    });
    const createView = model => new IntegralScreenView(model, {
      tandem: tandem.createTandem('view')
    });
    super(createModel, createView, {
      name: CalculusGrapherStrings.screen.integralStringProperty,
      backgroundColorProperty: CalculusGrapherColors.screenBackgroundColorProperty,
      homeScreenIcon: CalculusGrapherScreenIconFactory.createIntegralScreenIcon(),
      tandem: tandem
    });
  }
}
calculusGrapher.register('IntegralScreen', IntegralScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJTdHJpbmdzIiwiQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIiwiSW50ZWdyYWxNb2RlbCIsIkludGVncmFsU2NyZWVuVmlldyIsIkdyYXBoVHlwZSIsIkdyYXBoU2V0IiwiQ2FsY3VsdXNHcmFwaGVyU2NyZWVuSWNvbkZhY3RvcnkiLCJJbnRlZ3JhbFNjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiZ3JhcGhTZXRzIiwiSU5URUdSQUwiLCJPUklHSU5BTCIsImNyZWF0ZU1vZGVsIiwiY3JlYXRlVGFuZGVtIiwiY3JlYXRlVmlldyIsIm1vZGVsIiwibmFtZSIsInNjcmVlbiIsImludGVncmFsU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsInNjcmVlbkJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJjcmVhdGVJbnRlZ3JhbFNjcmVlbkljb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkludGVncmFsU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSAnSW50ZWdyYWwnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbG9ycyBmcm9tICcuLi9jb21tb24vQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLmpzJztcclxuaW1wb3J0IEludGVncmFsTW9kZWwgZnJvbSAnLi9tb2RlbC9JbnRlZ3JhbE1vZGVsLmpzJztcclxuaW1wb3J0IEludGVncmFsU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvSW50ZWdyYWxTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IEdyYXBoVHlwZSBmcm9tICcuLi9jb21tb24vbW9kZWwvR3JhcGhUeXBlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEdyYXBoU2V0IGZyb20gJy4uL2NvbW1vbi9tb2RlbC9HcmFwaFNldC5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJTY3JlZW5JY29uRmFjdG9yeSBmcm9tICcuLi9jb21tb24vdmlldy9DYWxjdWx1c0dyYXBoZXJTY3JlZW5JY29uRmFjdG9yeS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnRlZ3JhbFNjcmVlbiBleHRlbmRzIFNjcmVlbjxJbnRlZ3JhbE1vZGVsLCBJbnRlZ3JhbFNjcmVlblZpZXc+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCBncmFwaFNldHM6IEdyYXBoU2V0W10gPSBbXHJcbiAgICAgIG5ldyBHcmFwaFNldCggWyBHcmFwaFR5cGUuSU5URUdSQUwsIEdyYXBoVHlwZS5PUklHSU5BTCBdIClcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgY3JlYXRlTW9kZWwgPSAoKSA9PiBuZXcgSW50ZWdyYWxNb2RlbCgge1xyXG4gICAgICBncmFwaFNldHM6IGdyYXBoU2V0cyxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjcmVhdGVWaWV3ID0gKCBtb2RlbDogSW50ZWdyYWxNb2RlbCApID0+IG5ldyBJbnRlZ3JhbFNjcmVlblZpZXcoIG1vZGVsLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY3JlYXRlTW9kZWwsIGNyZWF0ZVZpZXcsIHtcclxuICAgICAgbmFtZTogQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncy5zY3JlZW4uaW50ZWdyYWxTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IENhbGN1bHVzR3JhcGhlckNvbG9ycy5zY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IENhbGN1bHVzR3JhcGhlclNjcmVlbkljb25GYWN0b3J5LmNyZWF0ZUludGVncmFsU2NyZWVuSWNvbigpLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnSW50ZWdyYWxTY3JlZW4nLCBJbnRlZ3JhbFNjcmVlbiApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxzQkFBc0IsTUFBTSw4QkFBOEI7QUFDakUsT0FBT0MscUJBQXFCLE1BQU0sb0NBQW9DO0FBQ3RFLE9BQU9DLGFBQWEsTUFBTSwwQkFBMEI7QUFDcEQsT0FBT0Msa0JBQWtCLE1BQU0sOEJBQThCO0FBQzdELE9BQU9DLFNBQVMsTUFBTSw4QkFBOEI7QUFFcEQsT0FBT0MsUUFBUSxNQUFNLDZCQUE2QjtBQUNsRCxPQUFPQyxnQ0FBZ0MsTUFBTSxvREFBb0Q7QUFFakcsZUFBZSxNQUFNQyxjQUFjLFNBQVNULE1BQU0sQ0FBb0M7RUFFN0VVLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxTQUFxQixHQUFHLENBQzVCLElBQUlMLFFBQVEsQ0FBRSxDQUFFRCxTQUFTLENBQUNPLFFBQVEsRUFBRVAsU0FBUyxDQUFDUSxRQUFRLENBQUcsQ0FBQyxDQUMzRDtJQUVELE1BQU1DLFdBQVcsR0FBR0EsQ0FBQSxLQUFNLElBQUlYLGFBQWEsQ0FBRTtNQUMzQ1EsU0FBUyxFQUFFQSxTQUFTO01BQ3BCRCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0ssWUFBWSxDQUFFLE9BQVE7SUFDdkMsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsVUFBVSxHQUFLQyxLQUFvQixJQUFNLElBQUliLGtCQUFrQixDQUFFYSxLQUFLLEVBQUU7TUFDNUVQLE1BQU0sRUFBRUEsTUFBTSxDQUFDSyxZQUFZLENBQUUsTUFBTztJQUN0QyxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVELFdBQVcsRUFBRUUsVUFBVSxFQUFFO01BQzlCRSxJQUFJLEVBQUVqQixzQkFBc0IsQ0FBQ2tCLE1BQU0sQ0FBQ0Msc0JBQXNCO01BQzFEQyx1QkFBdUIsRUFBRW5CLHFCQUFxQixDQUFDb0IsNkJBQTZCO01BQzVFQyxjQUFjLEVBQUVoQixnQ0FBZ0MsQ0FBQ2lCLHdCQUF3QixDQUFDLENBQUM7TUFDM0VkLE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFWLGVBQWUsQ0FBQ3lCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWpCLGNBQWUsQ0FBQyJ9