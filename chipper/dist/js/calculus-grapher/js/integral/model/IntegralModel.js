// Copyright 2020-2023, University of Colorado Boulder

/**
 * IntegralModel is the top-level model for the 'Integral' screen.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherModel from '../../common/model/CalculusGrapherModel.js';
import optionize from '../../../../phet-core/js/optionize.js';
import CurveManipulationMode from '../../common/model/CurveManipulationMode.js';
import AreaUnderCurveScrubber from '../../common/model/AreaUnderCurveScrubber.js';
export default class IntegralModel extends CalculusGrapherModel {
  constructor(providedOptions) {
    const options = optionize()({
      // CalculusGrapherModelOptions
      curveManipulationModeChoices: [CurveManipulationMode.HILL, CurveManipulationMode.PEDESTAL, CurveManipulationMode.TILT, CurveManipulationMode.SHIFT],
      hasAreaUnderCurveScrubber: true
    }, providedOptions);
    super(options);
    this.areaUnderCurveScrubber = new AreaUnderCurveScrubber(this.integralCurve, this.originalCurve, this.derivativeCurve, this.secondDerivativeCurve, this.toolsTandem.createTandem('areaUnderCurveScrubber'));
  }
  reset() {
    this.areaUnderCurveScrubber.reset();
    super.reset();
  }
}
calculusGrapher.register('IntegralModel', IntegralModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJNb2RlbCIsIm9wdGlvbml6ZSIsIkN1cnZlTWFuaXB1bGF0aW9uTW9kZSIsIkFyZWFVbmRlckN1cnZlU2NydWJiZXIiLCJJbnRlZ3JhbE1vZGVsIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiY3VydmVNYW5pcHVsYXRpb25Nb2RlQ2hvaWNlcyIsIkhJTEwiLCJQRURFU1RBTCIsIlRJTFQiLCJTSElGVCIsImhhc0FyZWFVbmRlckN1cnZlU2NydWJiZXIiLCJhcmVhVW5kZXJDdXJ2ZVNjcnViYmVyIiwiaW50ZWdyYWxDdXJ2ZSIsIm9yaWdpbmFsQ3VydmUiLCJkZXJpdmF0aXZlQ3VydmUiLCJzZWNvbmREZXJpdmF0aXZlQ3VydmUiLCJ0b29sc1RhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnRlZ3JhbE1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEludGVncmFsTW9kZWwgaXMgdGhlIHRvcC1sZXZlbCBtb2RlbCBmb3IgdGhlICdJbnRlZ3JhbCcgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyTW9kZWwsIHsgQ2FsY3VsdXNHcmFwaGVyTW9kZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0NhbGN1bHVzR3JhcGhlck1vZGVsLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0N1cnZlTWFuaXB1bGF0aW9uTW9kZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBBcmVhVW5kZXJDdXJ2ZVNjcnViYmVyIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9BcmVhVW5kZXJDdXJ2ZVNjcnViYmVyLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBJbnRlZ3JhbE1vZGVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPENhbGN1bHVzR3JhcGhlck1vZGVsT3B0aW9ucywgJ2dyYXBoU2V0cycgfCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnRlZ3JhbE1vZGVsIGV4dGVuZHMgQ2FsY3VsdXNHcmFwaGVyTW9kZWwge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgYXJlYVVuZGVyQ3VydmVTY3J1YmJlcjogQXJlYVVuZGVyQ3VydmVTY3J1YmJlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IEludGVncmFsTW9kZWxPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8SW50ZWdyYWxNb2RlbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBDYWxjdWx1c0dyYXBoZXJNb2RlbE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIENhbGN1bHVzR3JhcGhlck1vZGVsT3B0aW9uc1xyXG4gICAgICBjdXJ2ZU1hbmlwdWxhdGlvbk1vZGVDaG9pY2VzOiBbXHJcbiAgICAgICAgQ3VydmVNYW5pcHVsYXRpb25Nb2RlLkhJTEwsXHJcbiAgICAgICAgQ3VydmVNYW5pcHVsYXRpb25Nb2RlLlBFREVTVEFMLFxyXG4gICAgICAgIEN1cnZlTWFuaXB1bGF0aW9uTW9kZS5USUxULFxyXG4gICAgICAgIEN1cnZlTWFuaXB1bGF0aW9uTW9kZS5TSElGVFxyXG4gICAgICBdLFxyXG4gICAgICBoYXNBcmVhVW5kZXJDdXJ2ZVNjcnViYmVyOiB0cnVlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuYXJlYVVuZGVyQ3VydmVTY3J1YmJlciA9IG5ldyBBcmVhVW5kZXJDdXJ2ZVNjcnViYmVyKCB0aGlzLmludGVncmFsQ3VydmUsIHRoaXMub3JpZ2luYWxDdXJ2ZSxcclxuICAgICAgdGhpcy5kZXJpdmF0aXZlQ3VydmUsIHRoaXMuc2Vjb25kRGVyaXZhdGl2ZUN1cnZlLCB0aGlzLnRvb2xzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2FyZWFVbmRlckN1cnZlU2NydWJiZXInICkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuYXJlYVVuZGVyQ3VydmVTY3J1YmJlci5yZXNldCgpO1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0ludGVncmFsTW9kZWwnLCBJbnRlZ3JhbE1vZGVsICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxvQkFBb0IsTUFBdUMsNENBQTRDO0FBQzlHLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLHFCQUFxQixNQUFNLDZDQUE2QztBQUUvRSxPQUFPQyxzQkFBc0IsTUFBTSw4Q0FBOEM7QUFNakYsZUFBZSxNQUFNQyxhQUFhLFNBQVNKLG9CQUFvQixDQUFDO0VBSXZESyxXQUFXQSxDQUFFQyxlQUFxQyxFQUFHO0lBRTFELE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUFpRSxDQUFDLENBQUU7TUFFM0Y7TUFDQU8sNEJBQTRCLEVBQUUsQ0FDNUJOLHFCQUFxQixDQUFDTyxJQUFJLEVBQzFCUCxxQkFBcUIsQ0FBQ1EsUUFBUSxFQUM5QlIscUJBQXFCLENBQUNTLElBQUksRUFDMUJULHFCQUFxQixDQUFDVSxLQUFLLENBQzVCO01BQ0RDLHlCQUF5QixFQUFFO0lBQzdCLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNPLHNCQUFzQixHQUFHLElBQUlYLHNCQUFzQixDQUFFLElBQUksQ0FBQ1ksYUFBYSxFQUFFLElBQUksQ0FBQ0MsYUFBYSxFQUM5RixJQUFJLENBQUNDLGVBQWUsRUFBRSxJQUFJLENBQUNDLHFCQUFxQixFQUFFLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxZQUFZLENBQUUsd0JBQXlCLENBQUUsQ0FBQztFQUNqSDtFQUVnQkMsS0FBS0EsQ0FBQSxFQUFTO0lBQzVCLElBQUksQ0FBQ1Asc0JBQXNCLENBQUNPLEtBQUssQ0FBQyxDQUFDO0lBQ25DLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7RUFDZjtBQUNGO0FBRUF0QixlQUFlLENBQUN1QixRQUFRLENBQUUsZUFBZSxFQUFFbEIsYUFBYyxDQUFDIn0=