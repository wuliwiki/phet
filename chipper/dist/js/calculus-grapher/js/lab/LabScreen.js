// Copyright 2020-2023, University of Colorado Boulder

/**
 * The 'Lab' screen.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Screen from '../../../joist/js/Screen.js';
import calculusGrapher from '../calculusGrapher.js';
import CalculusGrapherStrings from '../CalculusGrapherStrings.js';
import CalculusGrapherColors from '../common/CalculusGrapherColors.js';
import LabModel from './model/LabModel.js';
import LabScreenView from './view/LabScreenView.js';
import GraphType from '../common/model/GraphType.js';
import GraphSetRadioButtonGroup from '../common/view/GraphSetRadioButtonGroup.js';
import { AlignGroup } from '../../../scenery/js/imports.js';
import GraphSet from '../common/model/GraphSet.js';
import CalculusGrapherScreenIconFactory from '../common/view/CalculusGrapherScreenIconFactory.js';
export default class LabScreen extends Screen {
  constructor(tandem) {
    const modelTandem = tandem.createTandem('model');

    // In the order that they will appear in radio buttons
    const graphSets = [new GraphSet([GraphType.INTEGRAL, GraphType.ORIGINAL, GraphType.DERIVATIVE], {
      tandem: modelTandem.createTandem('graphSet0'),
      phetioDocumentation: 'Choosing this GraphSet shows the integral, original, and derivative graphs.'
    }), new GraphSet([GraphType.ORIGINAL, GraphType.DERIVATIVE, GraphType.SECOND_DERIVATIVE], {
      tandem: modelTandem.createTandem('graphSet1'),
      phetioDocumentation: 'Choosing this GraphSet shows the original, derivative, and second derivative graphs.'
    })];
    const labelAlignGroup = new AlignGroup(); // to give radio-button labels the same effective size
    const graphSetRadioButtonGroupItems = [GraphSetRadioButtonGroup.createItem(graphSets[0], GraphType.INTEGRAL, labelAlignGroup), GraphSetRadioButtonGroup.createItem(graphSets[1], GraphType.SECOND_DERIVATIVE, labelAlignGroup)];
    const createModel = () => new LabModel({
      graphSets: graphSets,
      tandem: modelTandem
    });
    const createView = model => new LabScreenView(model, {
      graphSetRadioButtonGroupItems: graphSetRadioButtonGroupItems,
      tandem: tandem.createTandem('view')
    });
    super(createModel, createView, {
      name: CalculusGrapherStrings.screen.labStringProperty,
      backgroundColorProperty: CalculusGrapherColors.screenBackgroundColorProperty,
      homeScreenIcon: CalculusGrapherScreenIconFactory.createLabScreenIcon(),
      tandem: tandem
    });
  }
}
calculusGrapher.register('LabScreen', LabScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJTdHJpbmdzIiwiQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIiwiTGFiTW9kZWwiLCJMYWJTY3JlZW5WaWV3IiwiR3JhcGhUeXBlIiwiR3JhcGhTZXRSYWRpb0J1dHRvbkdyb3VwIiwiQWxpZ25Hcm91cCIsIkdyYXBoU2V0IiwiQ2FsY3VsdXNHcmFwaGVyU2NyZWVuSWNvbkZhY3RvcnkiLCJMYWJTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm1vZGVsVGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiZ3JhcGhTZXRzIiwiSU5URUdSQUwiLCJPUklHSU5BTCIsIkRFUklWQVRJVkUiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwiU0VDT05EX0RFUklWQVRJVkUiLCJsYWJlbEFsaWduR3JvdXAiLCJncmFwaFNldFJhZGlvQnV0dG9uR3JvdXBJdGVtcyIsImNyZWF0ZUl0ZW0iLCJjcmVhdGVNb2RlbCIsImNyZWF0ZVZpZXciLCJtb2RlbCIsIm5hbWUiLCJzY3JlZW4iLCJsYWJTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5Iiwic2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsImNyZWF0ZUxhYlNjcmVlbkljb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxhYlNjcmVlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgJ0xhYicgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBjYWxjdWx1c0dyYXBoZXIgZnJvbSAnLi4vY2FsY3VsdXNHcmFwaGVyLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlclN0cmluZ3MgZnJvbSAnLi4vQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJDb2xvcnMgZnJvbSAnLi4vY29tbW9uL0NhbGN1bHVzR3JhcGhlckNvbG9ycy5qcyc7XHJcbmltcG9ydCBMYWJNb2RlbCBmcm9tICcuL21vZGVsL0xhYk1vZGVsLmpzJztcclxuaW1wb3J0IExhYlNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0xhYlNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgR3JhcGhUeXBlIGZyb20gJy4uL2NvbW1vbi9tb2RlbC9HcmFwaFR5cGUuanMnO1xyXG5pbXBvcnQgR3JhcGhTZXRSYWRpb0J1dHRvbkdyb3VwIGZyb20gJy4uL2NvbW1vbi92aWV3L0dyYXBoU2V0UmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCB7IEFsaWduR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgR3JhcGhTZXQgZnJvbSAnLi4vY29tbW9uL21vZGVsL0dyYXBoU2V0LmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlclNjcmVlbkljb25GYWN0b3J5IGZyb20gJy4uL2NvbW1vbi92aWV3L0NhbGN1bHVzR3JhcGhlclNjcmVlbkljb25GYWN0b3J5LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYlNjcmVlbiBleHRlbmRzIFNjcmVlbjxMYWJNb2RlbCwgTGFiU2NyZWVuVmlldz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG1vZGVsVGFuZGVtID0gdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVsJyApO1xyXG5cclxuICAgIC8vIEluIHRoZSBvcmRlciB0aGF0IHRoZXkgd2lsbCBhcHBlYXIgaW4gcmFkaW8gYnV0dG9uc1xyXG4gICAgY29uc3QgZ3JhcGhTZXRzOiBHcmFwaFNldFtdID0gW1xyXG4gICAgICBuZXcgR3JhcGhTZXQoIFsgR3JhcGhUeXBlLklOVEVHUkFMLCBHcmFwaFR5cGUuT1JJR0lOQUwsIEdyYXBoVHlwZS5ERVJJVkFUSVZFIF0sIHtcclxuICAgICAgICB0YW5kZW06IG1vZGVsVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2dyYXBoU2V0MCcgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnQ2hvb3NpbmcgdGhpcyBHcmFwaFNldCBzaG93cyB0aGUgaW50ZWdyYWwsIG9yaWdpbmFsLCBhbmQgZGVyaXZhdGl2ZSBncmFwaHMuJ1xyXG4gICAgICB9ICksXHJcbiAgICAgIG5ldyBHcmFwaFNldCggWyBHcmFwaFR5cGUuT1JJR0lOQUwsIEdyYXBoVHlwZS5ERVJJVkFUSVZFLCBHcmFwaFR5cGUuU0VDT05EX0RFUklWQVRJVkUgXSwge1xyXG4gICAgICAgIHRhbmRlbTogbW9kZWxUYW5kZW0uY3JlYXRlVGFuZGVtKCAnZ3JhcGhTZXQxJyApLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdDaG9vc2luZyB0aGlzIEdyYXBoU2V0IHNob3dzIHRoZSBvcmlnaW5hbCwgZGVyaXZhdGl2ZSwgYW5kIHNlY29uZCBkZXJpdmF0aXZlIGdyYXBocy4nXHJcbiAgICAgIH0gKVxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBsYWJlbEFsaWduR3JvdXAgPSBuZXcgQWxpZ25Hcm91cCgpOyAvLyB0byBnaXZlIHJhZGlvLWJ1dHRvbiBsYWJlbHMgdGhlIHNhbWUgZWZmZWN0aXZlIHNpemVcclxuICAgIGNvbnN0IGdyYXBoU2V0UmFkaW9CdXR0b25Hcm91cEl0ZW1zID0gW1xyXG4gICAgICBHcmFwaFNldFJhZGlvQnV0dG9uR3JvdXAuY3JlYXRlSXRlbSggZ3JhcGhTZXRzWyAwIF0sIEdyYXBoVHlwZS5JTlRFR1JBTCwgbGFiZWxBbGlnbkdyb3VwICksXHJcbiAgICAgIEdyYXBoU2V0UmFkaW9CdXR0b25Hcm91cC5jcmVhdGVJdGVtKCBncmFwaFNldHNbIDEgXSwgR3JhcGhUeXBlLlNFQ09ORF9ERVJJVkFUSVZFLCBsYWJlbEFsaWduR3JvdXAgKVxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBjcmVhdGVNb2RlbCA9ICgpID0+IG5ldyBMYWJNb2RlbCgge1xyXG4gICAgICBncmFwaFNldHM6IGdyYXBoU2V0cyxcclxuICAgICAgdGFuZGVtOiBtb2RlbFRhbmRlbVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZVZpZXcgPSAoIG1vZGVsOiBMYWJNb2RlbCApID0+IG5ldyBMYWJTY3JlZW5WaWV3KCBtb2RlbCwge1xyXG4gICAgICBncmFwaFNldFJhZGlvQnV0dG9uR3JvdXBJdGVtczogZ3JhcGhTZXRSYWRpb0J1dHRvbkdyb3VwSXRlbXMsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY3JlYXRlTW9kZWwsIGNyZWF0ZVZpZXcsIHtcclxuICAgICAgbmFtZTogQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncy5zY3JlZW4ubGFiU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBDYWxjdWx1c0dyYXBoZXJDb2xvcnMuc2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHksXHJcbiAgICAgIGhvbWVTY3JlZW5JY29uOiBDYWxjdWx1c0dyYXBoZXJTY3JlZW5JY29uRmFjdG9yeS5jcmVhdGVMYWJTY3JlZW5JY29uKCksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdMYWJTY3JlZW4nLCBMYWJTY3JlZW4gKTtcclxuIl0sIm1h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