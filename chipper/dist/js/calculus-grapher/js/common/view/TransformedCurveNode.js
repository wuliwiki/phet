// Copyright 2020-2023, University of Colorado Boulder

/**
 * TransformedCurveNode is a CurveNode subclass for the main curve that the user interacts with and manipulates,
 * which then triggers a change in the model TransformedCurve's points.
 *
 * It is responsible for creating a cueing arrow that disappears after the user interacts with the curve
 *
 * Like CurveNode, TransformedCurveNode is created at the start and persists for the lifetime of the simulation. Links
 * are left as-is and TransformedCurves are never disposed.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import calculusGrapher from '../../calculusGrapher.js';
import CurveNode from './CurveNode.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
import CueingArrowsNode from './CueingArrowsNode.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
export default class TransformedCurveNode extends CurveNode {
  constructor(transformedCurve, curveManipulationProperties, chartTransform, providedOptions) {
    const options = providedOptions;
    super(transformedCurve, chartTransform, options);
    this.transformedCurve = transformedCurve;

    // Creates cueing arrows at the middle of the curve, centered at y=0.
    const cueingArrowsNodeTandem = options.tandem.createTandem('cueingArrowsNode');
    const cueingArrowsNode = new CueingArrowsNode({
      center: chartTransform.modelToViewXY(CalculusGrapherConstants.CURVE_X_RANGE.getCenter(), 0),
      // Cueing arrows should not be visible if this node is not interactive.
      // Do not instrument, see https://github.com/phetsims/calculus-grapher/issues/240#issuecomment-1452498549.
      visibleProperty: new DerivedProperty([transformedCurve.wasManipulatedProperty, options.isInteractiveProperty, this.inputEnabledProperty], (wasManipulated, isInteractive, inputEnabled) => !wasManipulated && isInteractive && inputEnabled),
      tandem: cueingArrowsNodeTandem,
      phetioDocumentation: 'Cueing arrows on curve, visible prior to curve being interacted with.'
    });
    this.addChild(cueingArrowsNode);
  }
}
calculusGrapher.register('TransformedCurveNode', TransformedCurveNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWx1c0dyYXBoZXIiLCJDdXJ2ZU5vZGUiLCJDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMiLCJDdWVpbmdBcnJvd3NOb2RlIiwiRGVyaXZlZFByb3BlcnR5IiwiVHJhbnNmb3JtZWRDdXJ2ZU5vZGUiLCJjb25zdHJ1Y3RvciIsInRyYW5zZm9ybWVkQ3VydmUiLCJjdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMiLCJjaGFydFRyYW5zZm9ybSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjdWVpbmdBcnJvd3NOb2RlVGFuZGVtIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiY3VlaW5nQXJyb3dzTm9kZSIsImNlbnRlciIsIm1vZGVsVG9WaWV3WFkiLCJDVVJWRV9YX1JBTkdFIiwiZ2V0Q2VudGVyIiwidmlzaWJsZVByb3BlcnR5Iiwid2FzTWFuaXB1bGF0ZWRQcm9wZXJ0eSIsImlzSW50ZXJhY3RpdmVQcm9wZXJ0eSIsImlucHV0RW5hYmxlZFByb3BlcnR5Iiwid2FzTWFuaXB1bGF0ZWQiLCJpc0ludGVyYWN0aXZlIiwiaW5wdXRFbmFibGVkIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsImFkZENoaWxkIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUcmFuc2Zvcm1lZEN1cnZlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUcmFuc2Zvcm1lZEN1cnZlTm9kZSBpcyBhIEN1cnZlTm9kZSBzdWJjbGFzcyBmb3IgdGhlIG1haW4gY3VydmUgdGhhdCB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCBhbmQgbWFuaXB1bGF0ZXMsXHJcbiAqIHdoaWNoIHRoZW4gdHJpZ2dlcnMgYSBjaGFuZ2UgaW4gdGhlIG1vZGVsIFRyYW5zZm9ybWVkQ3VydmUncyBwb2ludHMuXHJcbiAqXHJcbiAqIEl0IGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBhIGN1ZWluZyBhcnJvdyB0aGF0IGRpc2FwcGVhcnMgYWZ0ZXIgdGhlIHVzZXIgaW50ZXJhY3RzIHdpdGggdGhlIGN1cnZlXHJcbiAqXHJcbiAqIExpa2UgQ3VydmVOb2RlLCBUcmFuc2Zvcm1lZEN1cnZlTm9kZSBpcyBjcmVhdGVkIGF0IHRoZSBzdGFydCBhbmQgcGVyc2lzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltdWxhdGlvbi4gTGlua3NcclxuICogYXJlIGxlZnQgYXMtaXMgYW5kIFRyYW5zZm9ybWVkQ3VydmVzIGFyZSBuZXZlciBkaXNwb3NlZC5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBjYWxjdWx1c0dyYXBoZXIgZnJvbSAnLi4vLi4vY2FsY3VsdXNHcmFwaGVyLmpzJztcclxuaW1wb3J0IFRyYW5zZm9ybWVkQ3VydmUgZnJvbSAnLi4vbW9kZWwvVHJhbnNmb3JtZWRDdXJ2ZS5qcyc7XHJcbmltcG9ydCBDdXJ2ZU5vZGUsIHsgQ3VydmVOb2RlT3B0aW9ucyB9IGZyb20gJy4vQ3VydmVOb2RlLmpzJztcclxuaW1wb3J0IENoYXJ0VHJhbnNmb3JtIGZyb20gJy4uLy4uLy4uLy4uL2JhbWJvby9qcy9DaGFydFRyYW5zZm9ybS5qcyc7XHJcbmltcG9ydCBDdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMgZnJvbSAnLi4vbW9kZWwvQ3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ3VlaW5nQXJyb3dzTm9kZSBmcm9tICcuL0N1ZWluZ0Fycm93c05vZGUuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gV2hldGhlciB0aGlzIFRyYW5zZm9ybWVkQ3VydmVOb2RlIGlzIGN1cnJlbnRseSBpbnRlcmFjdGl2ZS5cclxuICBpc0ludGVyYWN0aXZlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG59O1xyXG5cclxudHlwZSBUcmFuc2Zvcm1lZEN1cnZlTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIEN1cnZlTm9kZU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2Zvcm1lZEN1cnZlTm9kZSBleHRlbmRzIEN1cnZlTm9kZSB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSB0cmFuc2Zvcm1lZEN1cnZlOiBUcmFuc2Zvcm1lZEN1cnZlO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRyYW5zZm9ybWVkQ3VydmU6IFRyYW5zZm9ybWVkQ3VydmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXM6IEN1cnZlTWFuaXB1bGF0aW9uUHJvcGVydGllcyxcclxuICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0VHJhbnNmb3JtOiBDaGFydFRyYW5zZm9ybSxcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogVHJhbnNmb3JtZWRDdXJ2ZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBwcm92aWRlZE9wdGlvbnM7XHJcblxyXG4gICAgc3VwZXIoIHRyYW5zZm9ybWVkQ3VydmUsIGNoYXJ0VHJhbnNmb3JtLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy50cmFuc2Zvcm1lZEN1cnZlID0gdHJhbnNmb3JtZWRDdXJ2ZTtcclxuXHJcbiAgICAvLyBDcmVhdGVzIGN1ZWluZyBhcnJvd3MgYXQgdGhlIG1pZGRsZSBvZiB0aGUgY3VydmUsIGNlbnRlcmVkIGF0IHk9MC5cclxuICAgIGNvbnN0IGN1ZWluZ0Fycm93c05vZGVUYW5kZW0gPSBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdjdWVpbmdBcnJvd3NOb2RlJyApO1xyXG4gICAgY29uc3QgY3VlaW5nQXJyb3dzTm9kZSA9IG5ldyBDdWVpbmdBcnJvd3NOb2RlKCB7XHJcbiAgICAgIGNlbnRlcjogY2hhcnRUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYWSggQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLkNVUlZFX1hfUkFOR0UuZ2V0Q2VudGVyKCksIDAgKSxcclxuXHJcbiAgICAgIC8vIEN1ZWluZyBhcnJvd3Mgc2hvdWxkIG5vdCBiZSB2aXNpYmxlIGlmIHRoaXMgbm9kZSBpcyBub3QgaW50ZXJhY3RpdmUuXHJcbiAgICAgIC8vIERvIG5vdCBpbnN0cnVtZW50LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzI0MCNpc3N1ZWNvbW1lbnQtMTQ1MjQ5ODU0OS5cclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICAgIFsgdHJhbnNmb3JtZWRDdXJ2ZS53YXNNYW5pcHVsYXRlZFByb3BlcnR5LCBvcHRpb25zLmlzSW50ZXJhY3RpdmVQcm9wZXJ0eSwgdGhpcy5pbnB1dEVuYWJsZWRQcm9wZXJ0eSBdLFxyXG4gICAgICAgICggd2FzTWFuaXB1bGF0ZWQsIGlzSW50ZXJhY3RpdmUsIGlucHV0RW5hYmxlZCApID0+ICF3YXNNYW5pcHVsYXRlZCAmJiBpc0ludGVyYWN0aXZlICYmIGlucHV0RW5hYmxlZCApLFxyXG4gICAgICB0YW5kZW06IGN1ZWluZ0Fycm93c05vZGVUYW5kZW0sXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdDdWVpbmcgYXJyb3dzIG9uIGN1cnZlLCB2aXNpYmxlIHByaW9yIHRvIGN1cnZlIGJlaW5nIGludGVyYWN0ZWQgd2l0aC4nXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggY3VlaW5nQXJyb3dzTm9kZSApO1xyXG4gIH1cclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnVHJhbnNmb3JtZWRDdXJ2ZU5vZGUnLCBUcmFuc2Zvcm1lZEN1cnZlTm9kZSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSwwQkFBMEI7QUFFdEQsT0FBT0MsU0FBUyxNQUE0QixnQkFBZ0I7QUFHNUQsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUNwRCxPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBV3BFLGVBQWUsTUFBTUMsb0JBQW9CLFNBQVNKLFNBQVMsQ0FBQztFQUluREssV0FBV0EsQ0FBRUMsZ0JBQWtDLEVBQ2xDQywyQkFBd0QsRUFDeERDLGNBQThCLEVBQzlCQyxlQUE0QyxFQUFHO0lBRWpFLE1BQU1DLE9BQU8sR0FBR0QsZUFBZTtJQUUvQixLQUFLLENBQUVILGdCQUFnQixFQUFFRSxjQUFjLEVBQUVFLE9BQVEsQ0FBQztJQUVsRCxJQUFJLENBQUNKLGdCQUFnQixHQUFHQSxnQkFBZ0I7O0lBRXhDO0lBQ0EsTUFBTUssc0JBQXNCLEdBQUdELE9BQU8sQ0FBQ0UsTUFBTSxDQUFDQyxZQUFZLENBQUUsa0JBQW1CLENBQUM7SUFDaEYsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSVosZ0JBQWdCLENBQUU7TUFDN0NhLE1BQU0sRUFBRVAsY0FBYyxDQUFDUSxhQUFhLENBQUVmLHdCQUF3QixDQUFDZ0IsYUFBYSxDQUFDQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQztNQUU3RjtNQUNBO01BQ0FDLGVBQWUsRUFBRSxJQUFJaEIsZUFBZSxDQUNsQyxDQUFFRyxnQkFBZ0IsQ0FBQ2Msc0JBQXNCLEVBQUVWLE9BQU8sQ0FBQ1cscUJBQXFCLEVBQUUsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBRSxFQUNyRyxDQUFFQyxjQUFjLEVBQUVDLGFBQWEsRUFBRUMsWUFBWSxLQUFNLENBQUNGLGNBQWMsSUFBSUMsYUFBYSxJQUFJQyxZQUFhLENBQUM7TUFDdkdiLE1BQU0sRUFBRUQsc0JBQXNCO01BQzlCZSxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLFFBQVEsQ0FBRWIsZ0JBQWlCLENBQUM7RUFDbkM7QUFDRjtBQUVBZixlQUFlLENBQUM2QixRQUFRLENBQUUsc0JBQXNCLEVBQUV4QixvQkFBcUIsQ0FBQyJ9