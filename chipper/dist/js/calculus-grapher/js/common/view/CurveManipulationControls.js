// Copyright 2022-2023, University of Colorado Boulder

/**
 * Curve Manipulation controls that allow the user to manipulate the curve
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import calculusGrapher from '../../calculusGrapher.js';
import { VBox } from '../../../../scenery/js/imports.js';
import CurveManipulationModeRadioButtonGroup from './CurveManipulationModeRadioButtonGroup.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
import CurveManipulationWidthControl from './CurveManipulationWidthControl.js';
export default class CurveManipulationControls extends VBox {
  constructor(curveManipulationProperties, predictEnabledProperty, tandem) {
    const curveManipulationStrokeProperty = new DerivedProperty([predictEnabledProperty, CalculusGrapherColors.predictCurveStrokeProperty, CalculusGrapherColors.originalCurveStrokeProperty], (predictEnabled, predictCurveStroke, originalCurveStroke) => predictEnabled ? predictCurveStroke : originalCurveStroke);

    // Control that shows the width, with slider for modes that support adjustable width.
    const widthControl = new CurveManipulationWidthControl(curveManipulationProperties, curveManipulationStrokeProperty, tandem.createTandem('widthControl'));

    // Radio Buttons for choosing the manipulation mode
    const radioButtonGroup = new CurveManipulationModeRadioButtonGroup(curveManipulationProperties.modeProperty, curveManipulationStrokeProperty, tandem.createTandem('radioButtonGroup'));
    super({
      children: [widthControl, radioButtonGroup],
      spacing: 15,
      tandem: tandem,
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    });
  }
}
calculusGrapher.register('CurveManipulationControls', CurveManipulationControls);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWx1c0dyYXBoZXIiLCJWQm94IiwiQ3VydmVNYW5pcHVsYXRpb25Nb2RlUmFkaW9CdXR0b25Hcm91cCIsIkRlcml2ZWRQcm9wZXJ0eSIsIkNhbGN1bHVzR3JhcGhlckNvbG9ycyIsIkN1cnZlTWFuaXB1bGF0aW9uV2lkdGhDb250cm9sIiwiQ3VydmVNYW5pcHVsYXRpb25Db250cm9scyIsImNvbnN0cnVjdG9yIiwiY3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzIiwicHJlZGljdEVuYWJsZWRQcm9wZXJ0eSIsInRhbmRlbSIsImN1cnZlTWFuaXB1bGF0aW9uU3Ryb2tlUHJvcGVydHkiLCJwcmVkaWN0Q3VydmVTdHJva2VQcm9wZXJ0eSIsIm9yaWdpbmFsQ3VydmVTdHJva2VQcm9wZXJ0eSIsInByZWRpY3RFbmFibGVkIiwicHJlZGljdEN1cnZlU3Ryb2tlIiwib3JpZ2luYWxDdXJ2ZVN0cm9rZSIsIndpZHRoQ29udHJvbCIsImNyZWF0ZVRhbmRlbSIsInJhZGlvQnV0dG9uR3JvdXAiLCJtb2RlUHJvcGVydHkiLCJjaGlsZHJlbiIsInNwYWNpbmciLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvRmVhdHVyZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1cnZlTWFuaXB1bGF0aW9uQ29udHJvbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3VydmUgTWFuaXB1bGF0aW9uIGNvbnRyb2xzIHRoYXQgYWxsb3cgdGhlIHVzZXIgdG8gbWFuaXB1bGF0ZSB0aGUgY3VydmVcclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgeyBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEN1cnZlTWFuaXB1bGF0aW9uTW9kZVJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi9DdXJ2ZU1hbmlwdWxhdGlvbk1vZGVSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBDdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMgZnJvbSAnLi4vbW9kZWwvQ3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbG9ycyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb2xvcnMuanMnO1xyXG5pbXBvcnQgQ3VydmVNYW5pcHVsYXRpb25XaWR0aENvbnRyb2wgZnJvbSAnLi9DdXJ2ZU1hbmlwdWxhdGlvbldpZHRoQ29udHJvbC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1cnZlTWFuaXB1bGF0aW9uQ29udHJvbHMgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXM6IEN1cnZlTWFuaXB1bGF0aW9uUHJvcGVydGllcyxcclxuICAgICAgICAgICAgICAgICAgICAgIHByZWRpY3RFbmFibGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgY3VydmVNYW5pcHVsYXRpb25TdHJva2VQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFtcclxuICAgICAgICBwcmVkaWN0RW5hYmxlZFByb3BlcnR5LFxyXG4gICAgICAgIENhbGN1bHVzR3JhcGhlckNvbG9ycy5wcmVkaWN0Q3VydmVTdHJva2VQcm9wZXJ0eSxcclxuICAgICAgICBDYWxjdWx1c0dyYXBoZXJDb2xvcnMub3JpZ2luYWxDdXJ2ZVN0cm9rZVByb3BlcnR5XHJcbiAgICAgIF0sXHJcbiAgICAgICggcHJlZGljdEVuYWJsZWQsIHByZWRpY3RDdXJ2ZVN0cm9rZSwgb3JpZ2luYWxDdXJ2ZVN0cm9rZSApID0+XHJcbiAgICAgICAgcHJlZGljdEVuYWJsZWQgPyBwcmVkaWN0Q3VydmVTdHJva2UgOiBvcmlnaW5hbEN1cnZlU3Ryb2tlICk7XHJcblxyXG4gICAgLy8gQ29udHJvbCB0aGF0IHNob3dzIHRoZSB3aWR0aCwgd2l0aCBzbGlkZXIgZm9yIG1vZGVzIHRoYXQgc3VwcG9ydCBhZGp1c3RhYmxlIHdpZHRoLlxyXG4gICAgY29uc3Qgd2lkdGhDb250cm9sID0gbmV3IEN1cnZlTWFuaXB1bGF0aW9uV2lkdGhDb250cm9sKCBjdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMsXHJcbiAgICAgIGN1cnZlTWFuaXB1bGF0aW9uU3Ryb2tlUHJvcGVydHksIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd3aWR0aENvbnRyb2wnICkgKTtcclxuXHJcbiAgICAvLyBSYWRpbyBCdXR0b25zIGZvciBjaG9vc2luZyB0aGUgbWFuaXB1bGF0aW9uIG1vZGVcclxuICAgIGNvbnN0IHJhZGlvQnV0dG9uR3JvdXAgPSBuZXcgQ3VydmVNYW5pcHVsYXRpb25Nb2RlUmFkaW9CdXR0b25Hcm91cCggY3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzLm1vZGVQcm9wZXJ0eSxcclxuICAgICAgY3VydmVNYW5pcHVsYXRpb25TdHJva2VQcm9wZXJ0eSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3JhZGlvQnV0dG9uR3JvdXAnICkgKTtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBjaGlsZHJlbjogWyB3aWR0aENvbnRyb2wsIHJhZGlvQnV0dG9uR3JvdXAgXSxcclxuICAgICAgc3BhY2luZzogMTUsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICB2aXNpYmxlUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnQ3VydmVNYW5pcHVsYXRpb25Db250cm9scycsIEN1cnZlTWFuaXB1bGF0aW9uQ29udHJvbHMgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLHFDQUFxQyxNQUFNLDRDQUE0QztBQUM5RixPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBRXBFLE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUMvRCxPQUFPQyw2QkFBNkIsTUFBTSxvQ0FBb0M7QUFJOUUsZUFBZSxNQUFNQyx5QkFBeUIsU0FBU0wsSUFBSSxDQUFDO0VBRW5ETSxXQUFXQSxDQUFFQywyQkFBd0QsRUFDeERDLHNCQUFrRCxFQUNsREMsTUFBYyxFQUFHO0lBRW5DLE1BQU1DLCtCQUErQixHQUFHLElBQUlSLGVBQWUsQ0FBRSxDQUN6RE0sc0JBQXNCLEVBQ3RCTCxxQkFBcUIsQ0FBQ1EsMEJBQTBCLEVBQ2hEUixxQkFBcUIsQ0FBQ1MsMkJBQTJCLENBQ2xELEVBQ0QsQ0FBRUMsY0FBYyxFQUFFQyxrQkFBa0IsRUFBRUMsbUJBQW1CLEtBQ3ZERixjQUFjLEdBQUdDLGtCQUFrQixHQUFHQyxtQkFBb0IsQ0FBQzs7SUFFL0Q7SUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBSVosNkJBQTZCLENBQUVHLDJCQUEyQixFQUNqRkcsK0JBQStCLEVBQUVELE1BQU0sQ0FBQ1EsWUFBWSxDQUFFLGNBQWUsQ0FBRSxDQUFDOztJQUUxRTtJQUNBLE1BQU1DLGdCQUFnQixHQUFHLElBQUlqQixxQ0FBcUMsQ0FBRU0sMkJBQTJCLENBQUNZLFlBQVksRUFDMUdULCtCQUErQixFQUFFRCxNQUFNLENBQUNRLFlBQVksQ0FBRSxrQkFBbUIsQ0FBRSxDQUFDO0lBRTlFLEtBQUssQ0FBRTtNQUNMRyxRQUFRLEVBQUUsQ0FBRUosWUFBWSxFQUFFRSxnQkFBZ0IsQ0FBRTtNQUM1Q0csT0FBTyxFQUFFLEVBQUU7TUFDWFosTUFBTSxFQUFFQSxNQUFNO01BQ2RhLHNCQUFzQixFQUFFO1FBQ3RCQyxjQUFjLEVBQUU7TUFDbEI7SUFDRixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUF4QixlQUFlLENBQUN5QixRQUFRLENBQUUsMkJBQTJCLEVBQUVuQix5QkFBMEIsQ0FBQyJ9