// Copyright 2023, University of Colorado Boulder

/**
 * LabeledLinesNode is the set of LabeledLineNode instances. Those instances are not instrumented for PhET-iO,
 * because everything that the PhET-iO client can change is in the model. So this class also provides a link to
 * the collection of LabeledLine instances in the model.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node } from '../../../../scenery/js/imports.js';
import calculusGrapher from '../../calculusGrapher.js';
import LabeledLineNode from './LabeledLineNode.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class LabeledLinesNode extends Node {
  constructor(labeledLines, labeledLinesLinkableElement, chartTransform, providedOptions) {
    const options = optionize()({
      // NodeOptions
      pickable: false,
      // optimization, see https://github.com/phetsims/calculus-grapher/issues/210
      phetioVisiblePropertyInstrumented: false
    }, providedOptions);

    // LabeledLineNode instances are not instrumented. The entire PhET-iO API lives in the model.
    // See model.tools.labeledLines and https://github.com/phetsims/calculus-grapher/issues/198
    const labeledLineNodes = labeledLines.map(labeledLine => new LabeledLineNode(labeledLine, chartTransform, options.labeledLineOptions));
    options.children = labeledLineNodes;
    super(options);
    this.labeledLineNodes = labeledLineNodes;

    // Link to model.tools.labeledLines
    this.addLinkedElement(labeledLinesLinkableElement, {
      tandem: options.tandem.createTandem('labeledLines')
    });
  }
}
calculusGrapher.register('LabeledLinesNode', LabeledLinesNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiY2FsY3VsdXNHcmFwaGVyIiwiTGFiZWxlZExpbmVOb2RlIiwib3B0aW9uaXplIiwiTGFiZWxlZExpbmVzTm9kZSIsImNvbnN0cnVjdG9yIiwibGFiZWxlZExpbmVzIiwibGFiZWxlZExpbmVzTGlua2FibGVFbGVtZW50IiwiY2hhcnRUcmFuc2Zvcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicGlja2FibGUiLCJwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQiLCJsYWJlbGVkTGluZU5vZGVzIiwibWFwIiwibGFiZWxlZExpbmUiLCJsYWJlbGVkTGluZU9wdGlvbnMiLCJjaGlsZHJlbiIsImFkZExpbmtlZEVsZW1lbnQiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxhYmVsZWRMaW5lc05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExhYmVsZWRMaW5lc05vZGUgaXMgdGhlIHNldCBvZiBMYWJlbGVkTGluZU5vZGUgaW5zdGFuY2VzLiBUaG9zZSBpbnN0YW5jZXMgYXJlIG5vdCBpbnN0cnVtZW50ZWQgZm9yIFBoRVQtaU8sXHJcbiAqIGJlY2F1c2UgZXZlcnl0aGluZyB0aGF0IHRoZSBQaEVULWlPIGNsaWVudCBjYW4gY2hhbmdlIGlzIGluIHRoZSBtb2RlbC4gU28gdGhpcyBjbGFzcyBhbHNvIHByb3ZpZGVzIGEgbGluayB0b1xyXG4gKiB0aGUgY29sbGVjdGlvbiBvZiBMYWJlbGVkTGluZSBpbnN0YW5jZXMgaW4gdGhlIG1vZGVsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vZGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgTGFiZWxlZExpbmUgZnJvbSAnLi4vbW9kZWwvTGFiZWxlZExpbmUuanMnO1xyXG5pbXBvcnQgTGFiZWxlZExpbmVOb2RlLCB7IExhYmVsZWRMaW5lTm9kZU9wdGlvbnMgfSBmcm9tICcuL0xhYmVsZWRMaW5lTm9kZS5qcyc7XHJcbmltcG9ydCBDaGFydFRyYW5zZm9ybSBmcm9tICcuLi8uLi8uLi8uLi9iYW1ib28vanMvQ2hhcnRUcmFuc2Zvcm0uanMnO1xyXG5pbXBvcnQgTGlua2FibGVFbGVtZW50IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9MaW5rYWJsZUVsZW1lbnQuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGxhYmVsZWRMaW5lT3B0aW9ucz86IExhYmVsZWRMaW5lTm9kZU9wdGlvbnM7IC8vIHByb3BhZ2F0ZWQgdG8gTGFiZWxlZExpbmVOb2RlXHJcbn07XHJcblxyXG50eXBlIExhYmVsZWRMaW5lc05vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYmVsZWRMaW5lc05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGxhYmVsZWRMaW5lTm9kZXM6IExhYmVsZWRMaW5lTm9kZVtdO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGxhYmVsZWRMaW5lczogTGFiZWxlZExpbmVbXSwgbGFiZWxlZExpbmVzTGlua2FibGVFbGVtZW50OiBMaW5rYWJsZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjaGFydFRyYW5zZm9ybTogQ2hhcnRUcmFuc2Zvcm0sIHByb3ZpZGVkT3B0aW9uczogTGFiZWxlZExpbmVzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxMYWJlbGVkTGluZXNOb2RlT3B0aW9ucywgU3RyaWN0T21pdDxTZWxmT3B0aW9ucywgJ2xhYmVsZWRMaW5lT3B0aW9ucyc+LCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gTm9kZU9wdGlvbnNcclxuICAgICAgcGlja2FibGU6IGZhbHNlLCAvLyBvcHRpbWl6YXRpb24sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2FsY3VsdXMtZ3JhcGhlci9pc3N1ZXMvMjEwXHJcbiAgICAgIHBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZDogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIExhYmVsZWRMaW5lTm9kZSBpbnN0YW5jZXMgYXJlIG5vdCBpbnN0cnVtZW50ZWQuIFRoZSBlbnRpcmUgUGhFVC1pTyBBUEkgbGl2ZXMgaW4gdGhlIG1vZGVsLlxyXG4gICAgLy8gU2VlIG1vZGVsLnRvb2xzLmxhYmVsZWRMaW5lcyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzE5OFxyXG4gICAgY29uc3QgbGFiZWxlZExpbmVOb2RlcyA9IGxhYmVsZWRMaW5lcy5tYXAoIGxhYmVsZWRMaW5lID0+XHJcbiAgICAgIG5ldyBMYWJlbGVkTGluZU5vZGUoIGxhYmVsZWRMaW5lLCBjaGFydFRyYW5zZm9ybSwgb3B0aW9ucy5sYWJlbGVkTGluZU9wdGlvbnMgKSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBsYWJlbGVkTGluZU5vZGVzO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5sYWJlbGVkTGluZU5vZGVzID0gbGFiZWxlZExpbmVOb2RlcztcclxuXHJcbiAgICAvLyBMaW5rIHRvIG1vZGVsLnRvb2xzLmxhYmVsZWRMaW5lc1xyXG4gICAgdGhpcy5hZGRMaW5rZWRFbGVtZW50KCBsYWJlbGVkTGluZXNMaW5rYWJsZUVsZW1lbnQsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbGVkTGluZXMnIClcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0xhYmVsZWRMaW5lc05vZGUnLCBMYWJlbGVkTGluZXNOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLFFBQXFCLG1DQUFtQztBQUNyRSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBRXRELE9BQU9DLGVBQWUsTUFBa0Msc0JBQXNCO0FBSTlFLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFTN0QsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU0osSUFBSSxDQUFDO0VBSTFDSyxXQUFXQSxDQUFFQyxZQUEyQixFQUFFQywyQkFBNEMsRUFDekVDLGNBQThCLEVBQUVDLGVBQXdDLEVBQUc7SUFFN0YsTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQXNGLENBQUMsQ0FBRTtNQUVoSDtNQUNBUSxRQUFRLEVBQUUsS0FBSztNQUFFO01BQ2pCQyxpQ0FBaUMsRUFBRTtJQUNyQyxDQUFDLEVBQUVILGVBQWdCLENBQUM7O0lBRXBCO0lBQ0E7SUFDQSxNQUFNSSxnQkFBZ0IsR0FBR1AsWUFBWSxDQUFDUSxHQUFHLENBQUVDLFdBQVcsSUFDcEQsSUFBSWIsZUFBZSxDQUFFYSxXQUFXLEVBQUVQLGNBQWMsRUFBRUUsT0FBTyxDQUFDTSxrQkFBbUIsQ0FBRSxDQUFDO0lBRWxGTixPQUFPLENBQUNPLFFBQVEsR0FBR0osZ0JBQWdCO0lBRW5DLEtBQUssQ0FBRUgsT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ0csZ0JBQWdCLEdBQUdBLGdCQUFnQjs7SUFFeEM7SUFDQSxJQUFJLENBQUNLLGdCQUFnQixDQUFFWCwyQkFBMkIsRUFBRTtNQUNsRFksTUFBTSxFQUFFVCxPQUFPLENBQUNTLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLGNBQWU7SUFDdEQsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBbkIsZUFBZSxDQUFDb0IsUUFBUSxDQUFFLGtCQUFrQixFQUFFakIsZ0JBQWlCLENBQUMifQ==