// Copyright 2022-2023, University of Colorado Boulder

/**
 * CurveManipulationModeRadioButtonGroup is the radio button group for choosing a curve manipulation model.
 * The buttons are arranged in a 2-column grid. Hiding buttons via PhET-iO will automatically cause the
 * layout to update so that there are no 'holes' in the grid.
 *
 * @author Martin Veillette (Berea College)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import RectangularRadioButton from '../../../../sun/js/buttons/RectangularRadioButton.js';
import calculusGrapher from '../../calculusGrapher.js';
import CurveManipulationIconNode from './CurveManipulationIconNode.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
import { AlignBox, AlignGroup, GridBox } from '../../../../scenery/js/imports.js';
export default class CurveManipulationModeRadioButtonGroup extends GridBox {
  constructor(curveManipulationModeProperty, curveManipulationStroke, tandem) {
    const validModes = curveManipulationModeProperty.validValues;
    assert && assert(validModes);

    // So that all icons have the same effective size
    const alignBoxOptions = {
      group: new AlignGroup()
    };

    // Create a radio button for each mode
    const buttons = validModes.map(mode => new RectangularRadioButton(curveManipulationModeProperty, mode, {
      content: new AlignBox(new CurveManipulationIconNode(mode, curveManipulationStroke), alignBoxOptions),
      baseColor: CalculusGrapherColors.panelFillProperty,
      xMargin: 10,
      yMargin: 7,
      buttonAppearanceStrategyOptions: {
        selectedLineWidth: 2
      },
      tandem: tandem.createTandem(`${mode.tandemPrefix}${RectangularRadioButton.TANDEM_NAME_SUFFIX}`)
    }));
    super({
      children: buttons,
      autoColumns: 2,
      xSpacing: 4,
      ySpacing: 4,
      tandem: tandem
    });
  }
}
calculusGrapher.register('CurveManipulationModeRadioButtonGroup', CurveManipulationModeRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWN0YW5ndWxhclJhZGlvQnV0dG9uIiwiY2FsY3VsdXNHcmFwaGVyIiwiQ3VydmVNYW5pcHVsYXRpb25JY29uTm9kZSIsIkNhbGN1bHVzR3JhcGhlckNvbG9ycyIsIkFsaWduQm94IiwiQWxpZ25Hcm91cCIsIkdyaWRCb3giLCJDdXJ2ZU1hbmlwdWxhdGlvbk1vZGVSYWRpb0J1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJjdXJ2ZU1hbmlwdWxhdGlvbk1vZGVQcm9wZXJ0eSIsImN1cnZlTWFuaXB1bGF0aW9uU3Ryb2tlIiwidGFuZGVtIiwidmFsaWRNb2RlcyIsInZhbGlkVmFsdWVzIiwiYXNzZXJ0IiwiYWxpZ25Cb3hPcHRpb25zIiwiZ3JvdXAiLCJidXR0b25zIiwibWFwIiwibW9kZSIsImNvbnRlbnQiLCJiYXNlQ29sb3IiLCJwYW5lbEZpbGxQcm9wZXJ0eSIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9ucyIsInNlbGVjdGVkTGluZVdpZHRoIiwiY3JlYXRlVGFuZGVtIiwidGFuZGVtUHJlZml4IiwiVEFOREVNX05BTUVfU1VGRklYIiwiY2hpbGRyZW4iLCJhdXRvQ29sdW1ucyIsInhTcGFjaW5nIiwieVNwYWNpbmciLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1cnZlTWFuaXB1bGF0aW9uTW9kZVJhZGlvQnV0dG9uR3JvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3VydmVNYW5pcHVsYXRpb25Nb2RlUmFkaW9CdXR0b25Hcm91cCBpcyB0aGUgcmFkaW8gYnV0dG9uIGdyb3VwIGZvciBjaG9vc2luZyBhIGN1cnZlIG1hbmlwdWxhdGlvbiBtb2RlbC5cclxuICogVGhlIGJ1dHRvbnMgYXJlIGFycmFuZ2VkIGluIGEgMi1jb2x1bW4gZ3JpZC4gSGlkaW5nIGJ1dHRvbnMgdmlhIFBoRVQtaU8gd2lsbCBhdXRvbWF0aWNhbGx5IGNhdXNlIHRoZVxyXG4gKiBsYXlvdXQgdG8gdXBkYXRlIHNvIHRoYXQgdGhlcmUgYXJlIG5vICdob2xlcycgaW4gdGhlIGdyaWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZSAoQmVyZWEgQ29sbGVnZSlcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUgZnJvbSAnLi4vbW9kZWwvQ3VydmVNYW5pcHVsYXRpb25Nb2RlLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbi5qcyc7XHJcbmltcG9ydCBjYWxjdWx1c0dyYXBoZXIgZnJvbSAnLi4vLi4vY2FsY3VsdXNHcmFwaGVyLmpzJztcclxuaW1wb3J0IEN1cnZlTWFuaXB1bGF0aW9uSWNvbk5vZGUgZnJvbSAnLi9DdXJ2ZU1hbmlwdWxhdGlvbkljb25Ob2RlLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbG9ycyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb2xvcnMuanMnO1xyXG5pbXBvcnQgeyBBbGlnbkJveCwgQWxpZ25Hcm91cCwgR3JpZEJveCwgVENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1cnZlTWFuaXB1bGF0aW9uTW9kZVJhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBHcmlkQm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjdXJ2ZU1hbmlwdWxhdGlvbk1vZGVQcm9wZXJ0eTogUHJvcGVydHk8Q3VydmVNYW5pcHVsYXRpb25Nb2RlPixcclxuICAgICAgICAgICAgICAgICAgICAgIGN1cnZlTWFuaXB1bGF0aW9uU3Ryb2tlOiBUQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCB2YWxpZE1vZGVzID0gY3VydmVNYW5pcHVsYXRpb25Nb2RlUHJvcGVydHkudmFsaWRWYWx1ZXMhO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdmFsaWRNb2RlcyApO1xyXG5cclxuICAgIC8vIFNvIHRoYXQgYWxsIGljb25zIGhhdmUgdGhlIHNhbWUgZWZmZWN0aXZlIHNpemVcclxuICAgIGNvbnN0IGFsaWduQm94T3B0aW9ucyA9IHtcclxuICAgICAgZ3JvdXA6IG5ldyBBbGlnbkdyb3VwKClcclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgcmFkaW8gYnV0dG9uIGZvciBlYWNoIG1vZGVcclxuICAgIGNvbnN0IGJ1dHRvbnMgPSB2YWxpZE1vZGVzLm1hcCggbW9kZSA9PiBuZXcgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbiggY3VydmVNYW5pcHVsYXRpb25Nb2RlUHJvcGVydHksIG1vZGUsIHtcclxuICAgICAgY29udGVudDogbmV3IEFsaWduQm94KCBuZXcgQ3VydmVNYW5pcHVsYXRpb25JY29uTm9kZSggbW9kZSwgY3VydmVNYW5pcHVsYXRpb25TdHJva2UgKSwgYWxpZ25Cb3hPcHRpb25zICksXHJcbiAgICAgIGJhc2VDb2xvcjogQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLnBhbmVsRmlsbFByb3BlcnR5LFxyXG4gICAgICB4TWFyZ2luOiAxMCxcclxuICAgICAgeU1hcmdpbjogNyxcclxuICAgICAgYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9uczoge1xyXG4gICAgICAgIHNlbGVjdGVkTGluZVdpZHRoOiAyXHJcbiAgICAgIH0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggYCR7bW9kZS50YW5kZW1QcmVmaXh9JHtSZWN0YW5ndWxhclJhZGlvQnV0dG9uLlRBTkRFTV9OQU1FX1NVRkZJWH1gIClcclxuICAgIH0gKSApO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBidXR0b25zLFxyXG4gICAgICBhdXRvQ29sdW1uczogMixcclxuICAgICAgeFNwYWNpbmc6IDQsXHJcbiAgICAgIHlTcGFjaW5nOiA0LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnQ3VydmVNYW5pcHVsYXRpb25Nb2RlUmFkaW9CdXR0b25Hcm91cCcsIEN1cnZlTWFuaXB1bGF0aW9uTW9kZVJhZGlvQnV0dG9uR3JvdXAgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLE9BQU9BLHNCQUFzQixNQUFNLHNEQUFzRDtBQUN6RixPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHlCQUF5QixNQUFNLGdDQUFnQztBQUN0RSxPQUFPQyxxQkFBcUIsTUFBTSw2QkFBNkI7QUFDL0QsU0FBU0MsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sUUFBZ0IsbUNBQW1DO0FBR3pGLGVBQWUsTUFBTUMscUNBQXFDLFNBQVNELE9BQU8sQ0FBQztFQUVsRUUsV0FBV0EsQ0FBRUMsNkJBQThELEVBQzlEQyx1QkFBK0IsRUFDL0JDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxVQUFVLEdBQUdILDZCQUE2QixDQUFDSSxXQUFZO0lBQzdEQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsVUFBVyxDQUFDOztJQUU5QjtJQUNBLE1BQU1HLGVBQWUsR0FBRztNQUN0QkMsS0FBSyxFQUFFLElBQUlYLFVBQVUsQ0FBQztJQUN4QixDQUFDOztJQUVEO0lBQ0EsTUFBTVksT0FBTyxHQUFHTCxVQUFVLENBQUNNLEdBQUcsQ0FBRUMsSUFBSSxJQUFJLElBQUluQixzQkFBc0IsQ0FBRVMsNkJBQTZCLEVBQUVVLElBQUksRUFBRTtNQUN2R0MsT0FBTyxFQUFFLElBQUloQixRQUFRLENBQUUsSUFBSUYseUJBQXlCLENBQUVpQixJQUFJLEVBQUVULHVCQUF3QixDQUFDLEVBQUVLLGVBQWdCLENBQUM7TUFDeEdNLFNBQVMsRUFBRWxCLHFCQUFxQixDQUFDbUIsaUJBQWlCO01BQ2xEQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxPQUFPLEVBQUUsQ0FBQztNQUNWQywrQkFBK0IsRUFBRTtRQUMvQkMsaUJBQWlCLEVBQUU7TUFDckIsQ0FBQztNQUNEZixNQUFNLEVBQUVBLE1BQU0sQ0FBQ2dCLFlBQVksQ0FBRyxHQUFFUixJQUFJLENBQUNTLFlBQWEsR0FBRTVCLHNCQUFzQixDQUFDNkIsa0JBQW1CLEVBQUU7SUFDbEcsQ0FBRSxDQUFFLENBQUM7SUFFTCxLQUFLLENBQUU7TUFDTEMsUUFBUSxFQUFFYixPQUFPO01BQ2pCYyxXQUFXLEVBQUUsQ0FBQztNQUNkQyxRQUFRLEVBQUUsQ0FBQztNQUNYQyxRQUFRLEVBQUUsQ0FBQztNQUNYdEIsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQVYsZUFBZSxDQUFDaUMsUUFBUSxDQUFFLHVDQUF1QyxFQUFFM0IscUNBQXNDLENBQUMifQ==