// Copyright 2023, University of Colorado Boulder

/**
 * LabeledPointsNode is the set of LabeledPointNode instances. Those instances are not instrumented for PhET-iO,
 * because everything that the PhET-iO client can change is in the model. So this class also provides a link to
 * the collection of LabeledPoint instances in the model.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node } from '../../../../scenery/js/imports.js';
import calculusGrapher from '../../calculusGrapher.js';
import LabeledPointNode from './LabeledPointNode.js';
import Tandem from '../../../../tandem/js/Tandem.js';
export default class LabeledPointsNode extends Node {
  constructor(labeledPoints, linkableElement, chartTransform, predictEnabledProperty, curveLayerVisibleProperty, tandem) {
    // LabeledPointNode instances
    const labeledPointNodes = labeledPoints.map(labeledPoint => new LabeledPointNode(labeledPoint, chartTransform, predictEnabledProperty, curveLayerVisibleProperty, {
      // LabeledPointNode instances are not instrumented. The entire PhET-iO API lives in the model.
      // See model.tools.labeledPoints and https://github.com/phetsims/calculus-grapher/issues/198
      tandem: Tandem.OPT_OUT
    }));
    super({
      children: labeledPointNodes,
      tandem: tandem,
      phetioVisiblePropertyInstrumented: false
    });

    // Link to model.tools.labeledPoints
    this.addLinkedElement(linkableElement, {
      tandem: tandem.createTandem('labeledPoints')
    });
  }
}
calculusGrapher.register('LabeledPointsNode', LabeledPointsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiY2FsY3VsdXNHcmFwaGVyIiwiTGFiZWxlZFBvaW50Tm9kZSIsIlRhbmRlbSIsIkxhYmVsZWRQb2ludHNOb2RlIiwiY29uc3RydWN0b3IiLCJsYWJlbGVkUG9pbnRzIiwibGlua2FibGVFbGVtZW50IiwiY2hhcnRUcmFuc2Zvcm0iLCJwcmVkaWN0RW5hYmxlZFByb3BlcnR5IiwiY3VydmVMYXllclZpc2libGVQcm9wZXJ0eSIsInRhbmRlbSIsImxhYmVsZWRQb2ludE5vZGVzIiwibWFwIiwibGFiZWxlZFBvaW50IiwiT1BUX09VVCIsImNoaWxkcmVuIiwicGhldGlvVmlzaWJsZVByb3BlcnR5SW5zdHJ1bWVudGVkIiwiYWRkTGlua2VkRWxlbWVudCIsImNyZWF0ZVRhbmRlbSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGFiZWxlZFBvaW50c05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExhYmVsZWRQb2ludHNOb2RlIGlzIHRoZSBzZXQgb2YgTGFiZWxlZFBvaW50Tm9kZSBpbnN0YW5jZXMuIFRob3NlIGluc3RhbmNlcyBhcmUgbm90IGluc3RydW1lbnRlZCBmb3IgUGhFVC1pTyxcclxuICogYmVjYXVzZSBldmVyeXRoaW5nIHRoYXQgdGhlIFBoRVQtaU8gY2xpZW50IGNhbiBjaGFuZ2UgaXMgaW4gdGhlIG1vZGVsLiBTbyB0aGlzIGNsYXNzIGFsc28gcHJvdmlkZXMgYSBsaW5rIHRvXHJcbiAqIHRoZSBjb2xsZWN0aW9uIG9mIExhYmVsZWRQb2ludCBpbnN0YW5jZXMgaW4gdGhlIG1vZGVsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCBMYWJlbGVkUG9pbnQgZnJvbSAnLi4vbW9kZWwvTGFiZWxlZFBvaW50LmpzJztcclxuaW1wb3J0IExhYmVsZWRQb2ludE5vZGUgZnJvbSAnLi9MYWJlbGVkUG9pbnROb2RlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IENoYXJ0VHJhbnNmb3JtIGZyb20gJy4uLy4uLy4uLy4uL2JhbWJvby9qcy9DaGFydFRyYW5zZm9ybS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IExpbmthYmxlRWxlbWVudCBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvTGlua2FibGVFbGVtZW50LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYmVsZWRQb2ludHNOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbGFiZWxlZFBvaW50czogTGFiZWxlZFBvaW50W10sXHJcbiAgICAgICAgICAgICAgICAgICAgICBsaW5rYWJsZUVsZW1lbnQ6IExpbmthYmxlRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0VHJhbnNmb3JtOiBDaGFydFRyYW5zZm9ybSxcclxuICAgICAgICAgICAgICAgICAgICAgIHByZWRpY3RFbmFibGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgY3VydmVMYXllclZpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICAvLyBMYWJlbGVkUG9pbnROb2RlIGluc3RhbmNlc1xyXG4gICAgY29uc3QgbGFiZWxlZFBvaW50Tm9kZXMgPSBsYWJlbGVkUG9pbnRzLm1hcCggbGFiZWxlZFBvaW50ID0+XHJcbiAgICAgIG5ldyBMYWJlbGVkUG9pbnROb2RlKCBsYWJlbGVkUG9pbnQsIGNoYXJ0VHJhbnNmb3JtLCBwcmVkaWN0RW5hYmxlZFByb3BlcnR5LCBjdXJ2ZUxheWVyVmlzaWJsZVByb3BlcnR5LCB7XHJcblxyXG4gICAgICAgIC8vIExhYmVsZWRQb2ludE5vZGUgaW5zdGFuY2VzIGFyZSBub3QgaW5zdHJ1bWVudGVkLiBUaGUgZW50aXJlIFBoRVQtaU8gQVBJIGxpdmVzIGluIHRoZSBtb2RlbC5cclxuICAgICAgICAvLyBTZWUgbW9kZWwudG9vbHMubGFiZWxlZFBvaW50cyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzE5OFxyXG4gICAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgICAgfSApICk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgY2hpbGRyZW46IGxhYmVsZWRQb2ludE5vZGVzLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgcGhldGlvVmlzaWJsZVByb3BlcnR5SW5zdHJ1bWVudGVkOiBmYWxzZVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIExpbmsgdG8gbW9kZWwudG9vbHMubGFiZWxlZFBvaW50c1xyXG4gICAgdGhpcy5hZGRMaW5rZWRFbGVtZW50KCBsaW5rYWJsZUVsZW1lbnQsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGFiZWxlZFBvaW50cycgKVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnTGFiZWxlZFBvaW50c05vZGUnLCBMYWJlbGVkUG9pbnRzTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBRXRELE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUNwRCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBS3BELGVBQWUsTUFBTUMsaUJBQWlCLFNBQVNKLElBQUksQ0FBQztFQUUzQ0ssV0FBV0EsQ0FBRUMsYUFBNkIsRUFDN0JDLGVBQWdDLEVBQ2hDQyxjQUE4QixFQUM5QkMsc0JBQWtELEVBQ2xEQyx5QkFBcUQsRUFDckRDLE1BQWMsRUFBRztJQUVuQztJQUNBLE1BQU1DLGlCQUFpQixHQUFHTixhQUFhLENBQUNPLEdBQUcsQ0FBRUMsWUFBWSxJQUN2RCxJQUFJWixnQkFBZ0IsQ0FBRVksWUFBWSxFQUFFTixjQUFjLEVBQUVDLHNCQUFzQixFQUFFQyx5QkFBeUIsRUFBRTtNQUVyRztNQUNBO01BQ0FDLE1BQU0sRUFBRVIsTUFBTSxDQUFDWTtJQUNqQixDQUFFLENBQUUsQ0FBQztJQUVQLEtBQUssQ0FBRTtNQUNMQyxRQUFRLEVBQUVKLGlCQUFpQjtNQUMzQkQsTUFBTSxFQUFFQSxNQUFNO01BQ2RNLGlDQUFpQyxFQUFFO0lBQ3JDLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUVYLGVBQWUsRUFBRTtNQUN0Q0ksTUFBTSxFQUFFQSxNQUFNLENBQUNRLFlBQVksQ0FBRSxlQUFnQjtJQUMvQyxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFsQixlQUFlLENBQUNtQixRQUFRLENBQUUsbUJBQW1CLEVBQUVoQixpQkFBa0IsQ0FBQyJ9