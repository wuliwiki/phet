// Copyright 2022-2023, University of Colorado Boulder

/**
 * LabeledLineNode is the view representation of a labeled line that spans multiple graphs.
 * The line has a label node located at the top of its vertical line.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import calculusGrapher from '../../calculusGrapher.js';
import { Color, Line, Node, Text } from '../../../../scenery/js/imports.js';
import BackgroundNode from '../../../../scenery-phet/js/BackgroundNode.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
import Multilink from '../../../../axon/js/Multilink.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class LabeledLineNode extends Node {
  constructor(labeledLine, chartTransform, providedOptions) {
    const options = optionize()({
      // SelfOptions
      lineTop: 0,
      lineBottom: 100,
      // NodeOptions
      pickable: false,
      // optimization, see https://github.com/phetsims/calculus-grapher/issues/210
      visibleProperty: labeledLine.visibleProperty
      // No PhET-iO instrumentation is desired, see https://github.com/phetsims/calculus-grapher/issues/198
    }, providedOptions);
    super(options);

    // vertical line
    const line = new Line(0, options.lineTop, 0, options.lineBottom, {
      stroke: labeledLine.lineColorProperty,
      lineDash: [4, 2],
      pickable: false // optimization, see https://github.com/phetsims/calculus-grapher/issues/210
    });

    this.addChild(line);
    this.line = line;
    const text = new Text(labeledLine.stringProperty, {
      font: CalculusGrapherConstants.LABELED_LINE_FONT,
      maxWidth: 50,
      centerX: 0
    });
    const labelNode = new BackgroundNode(text, {
      xMargin: 4,
      yMargin: 2,
      rectangleOptions: {
        fill: 'white',
        stroke: Color.grayColor(210),
        lineWidth: 0.5,
        cornerRadius: 3
      }
    });
    this.addChild(labelNode);
    labeledLine.xProperty.link(x => {
      line.x = chartTransform.modelToViewX(x);
    });
    Multilink.multilink([line.boundsProperty, labelNode.boundsProperty], () => {
      labelNode.centerBottom = line.centerTop;
    });
  }
}
calculusGrapher.register('LabeledLineNode', LabeledLineNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWx1c0dyYXBoZXIiLCJDb2xvciIsIkxpbmUiLCJOb2RlIiwiVGV4dCIsIkJhY2tncm91bmROb2RlIiwiQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIiwiTXVsdGlsaW5rIiwib3B0aW9uaXplIiwiTGFiZWxlZExpbmVOb2RlIiwiY29uc3RydWN0b3IiLCJsYWJlbGVkTGluZSIsImNoYXJ0VHJhbnNmb3JtIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImxpbmVUb3AiLCJsaW5lQm90dG9tIiwicGlja2FibGUiLCJ2aXNpYmxlUHJvcGVydHkiLCJsaW5lIiwic3Ryb2tlIiwibGluZUNvbG9yUHJvcGVydHkiLCJsaW5lRGFzaCIsImFkZENoaWxkIiwidGV4dCIsInN0cmluZ1Byb3BlcnR5IiwiZm9udCIsIkxBQkVMRURfTElORV9GT05UIiwibWF4V2lkdGgiLCJjZW50ZXJYIiwibGFiZWxOb2RlIiwieE1hcmdpbiIsInlNYXJnaW4iLCJyZWN0YW5nbGVPcHRpb25zIiwiZmlsbCIsImdyYXlDb2xvciIsImxpbmVXaWR0aCIsImNvcm5lclJhZGl1cyIsInhQcm9wZXJ0eSIsImxpbmsiLCJ4IiwibW9kZWxUb1ZpZXdYIiwibXVsdGlsaW5rIiwiYm91bmRzUHJvcGVydHkiLCJjZW50ZXJCb3R0b20iLCJjZW50ZXJUb3AiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxhYmVsZWRMaW5lTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMYWJlbGVkTGluZU5vZGUgaXMgdGhlIHZpZXcgcmVwcmVzZW50YXRpb24gb2YgYSBsYWJlbGVkIGxpbmUgdGhhdCBzcGFucyBtdWx0aXBsZSBncmFwaHMuXHJcbiAqIFRoZSBsaW5lIGhhcyBhIGxhYmVsIG5vZGUgbG9jYXRlZCBhdCB0aGUgdG9wIG9mIGl0cyB2ZXJ0aWNhbCBsaW5lLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBMaW5lLCBOb2RlLCBOb2RlT3B0aW9ucywgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBCYWNrZ3JvdW5kTm9kZSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQmFja2dyb3VuZE5vZGUuanMnO1xyXG5pbXBvcnQgQ2hhcnRUcmFuc2Zvcm0gZnJvbSAnLi4vLi4vLi4vLi4vYmFtYm9vL2pzL0NoYXJ0VHJhbnNmb3JtLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgTGFiZWxlZExpbmUgZnJvbSAnLi4vbW9kZWwvTGFiZWxlZExpbmUuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4vLyBUaGUgdG9wIGFuZCBib3R0b20geS1jb29yZGluYXRlcyBvZiB0aGUgdmVydGljYWwgbGluZSwgaW4gR3JhcGhzTm9kZSB2aWV3IGNvb3JkaW5hdGUgZnJhbWUuXHJcbiAgbGluZVRvcD86IG51bWJlcjtcclxuICBsaW5lQm90dG9tPzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgTGFiZWxlZExpbmVOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGFiZWxlZExpbmVOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGluZTogTGluZTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsYWJlbGVkTGluZTogTGFiZWxlZExpbmUsIGNoYXJ0VHJhbnNmb3JtOiBDaGFydFRyYW5zZm9ybSwgcHJvdmlkZWRPcHRpb25zPzogTGFiZWxlZExpbmVOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPExhYmVsZWRMaW5lTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgbGluZVRvcDogMCxcclxuICAgICAgbGluZUJvdHRvbTogMTAwLFxyXG5cclxuICAgICAgLy8gTm9kZU9wdGlvbnNcclxuICAgICAgcGlja2FibGU6IGZhbHNlLCAvLyBvcHRpbWl6YXRpb24sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2FsY3VsdXMtZ3JhcGhlci9pc3N1ZXMvMjEwXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogbGFiZWxlZExpbmUudmlzaWJsZVByb3BlcnR5XHJcbiAgICAgIC8vIE5vIFBoRVQtaU8gaW5zdHJ1bWVudGF0aW9uIGlzIGRlc2lyZWQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2FsY3VsdXMtZ3JhcGhlci9pc3N1ZXMvMTk4XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHZlcnRpY2FsIGxpbmVcclxuICAgIGNvbnN0IGxpbmUgPSBuZXcgTGluZSggMCwgb3B0aW9ucy5saW5lVG9wLCAwLCBvcHRpb25zLmxpbmVCb3R0b20sIHtcclxuICAgICAgc3Ryb2tlOiBsYWJlbGVkTGluZS5saW5lQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgbGluZURhc2g6IFsgNCwgMiBdLFxyXG4gICAgICBwaWNrYWJsZTogZmFsc2UgLy8gb3B0aW1pemF0aW9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzIxMFxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbGluZSApO1xyXG4gICAgdGhpcy5saW5lID0gbGluZTtcclxuXHJcbiAgICBjb25zdCB0ZXh0ID0gbmV3IFRleHQoIGxhYmVsZWRMaW5lLnN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5MQUJFTEVEX0xJTkVfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDUwLFxyXG4gICAgICBjZW50ZXJYOiAwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxOb2RlID0gbmV3IEJhY2tncm91bmROb2RlKCB0ZXh0LCB7XHJcbiAgICAgIHhNYXJnaW46IDQsXHJcbiAgICAgIHlNYXJnaW46IDIsXHJcbiAgICAgIHJlY3RhbmdsZU9wdGlvbnM6IHtcclxuICAgICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICAgIHN0cm9rZTogQ29sb3IuZ3JheUNvbG9yKCAyMTAgKSxcclxuICAgICAgICBsaW5lV2lkdGg6IDAuNSxcclxuICAgICAgICBjb3JuZXJSYWRpdXM6IDNcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbGFiZWxOb2RlICk7XHJcblxyXG4gICAgbGFiZWxlZExpbmUueFByb3BlcnR5LmxpbmsoIHggPT4ge1xyXG4gICAgICBsaW5lLnggPSBjaGFydFRyYW5zZm9ybS5tb2RlbFRvVmlld1goIHggKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIGxpbmUuYm91bmRzUHJvcGVydHksIGxhYmVsTm9kZS5ib3VuZHNQcm9wZXJ0eSBdLCAoKSA9PiB7XHJcbiAgICAgIGxhYmVsTm9kZS5jZW50ZXJCb3R0b20gPSBsaW5lLmNlbnRlclRvcDtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0xhYmVsZWRMaW5lTm9kZScsIExhYmVsZWRMaW5lTm9kZSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsU0FBU0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBZUMsSUFBSSxRQUFRLG1DQUFtQztBQUN4RixPQUFPQyxjQUFjLE1BQU0sK0NBQStDO0FBRTFFLE9BQU9DLHdCQUF3QixNQUFNLGdDQUFnQztBQUVyRSxPQUFPQyxTQUFTLE1BQU0sa0NBQWtDO0FBQ3hELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFXN0QsZUFBZSxNQUFNQyxlQUFlLFNBQVNOLElBQUksQ0FBQztFQUl6Q08sV0FBV0EsQ0FBRUMsV0FBd0IsRUFBRUMsY0FBOEIsRUFBRUMsZUFBd0MsRUFBRztJQUV2SCxNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBbUQsQ0FBQyxDQUFFO01BRTdFO01BQ0FPLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLFVBQVUsRUFBRSxHQUFHO01BRWY7TUFDQUMsUUFBUSxFQUFFLEtBQUs7TUFBRTtNQUNqQkMsZUFBZSxFQUFFUCxXQUFXLENBQUNPO01BQzdCO0lBQ0YsQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUMsT0FBUSxDQUFDOztJQUVoQjtJQUNBLE1BQU1LLElBQUksR0FBRyxJQUFJakIsSUFBSSxDQUFFLENBQUMsRUFBRVksT0FBTyxDQUFDQyxPQUFPLEVBQUUsQ0FBQyxFQUFFRCxPQUFPLENBQUNFLFVBQVUsRUFBRTtNQUNoRUksTUFBTSxFQUFFVCxXQUFXLENBQUNVLGlCQUFpQjtNQUNyQ0MsUUFBUSxFQUFFLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRTtNQUNsQkwsUUFBUSxFQUFFLEtBQUssQ0FBQztJQUNsQixDQUFFLENBQUM7O0lBQ0gsSUFBSSxDQUFDTSxRQUFRLENBQUVKLElBQUssQ0FBQztJQUNyQixJQUFJLENBQUNBLElBQUksR0FBR0EsSUFBSTtJQUVoQixNQUFNSyxJQUFJLEdBQUcsSUFBSXBCLElBQUksQ0FBRU8sV0FBVyxDQUFDYyxjQUFjLEVBQUU7TUFDakRDLElBQUksRUFBRXBCLHdCQUF3QixDQUFDcUIsaUJBQWlCO01BQ2hEQyxRQUFRLEVBQUUsRUFBRTtNQUNaQyxPQUFPLEVBQUU7SUFDWCxDQUFFLENBQUM7SUFFSCxNQUFNQyxTQUFTLEdBQUcsSUFBSXpCLGNBQWMsQ0FBRW1CLElBQUksRUFBRTtNQUMxQ08sT0FBTyxFQUFFLENBQUM7TUFDVkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsZ0JBQWdCLEVBQUU7UUFDaEJDLElBQUksRUFBRSxPQUFPO1FBQ2JkLE1BQU0sRUFBRW5CLEtBQUssQ0FBQ2tDLFNBQVMsQ0FBRSxHQUFJLENBQUM7UUFDOUJDLFNBQVMsRUFBRSxHQUFHO1FBQ2RDLFlBQVksRUFBRTtNQUNoQjtJQUNGLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ2QsUUFBUSxDQUFFTyxTQUFVLENBQUM7SUFFMUJuQixXQUFXLENBQUMyQixTQUFTLENBQUNDLElBQUksQ0FBRUMsQ0FBQyxJQUFJO01BQy9CckIsSUFBSSxDQUFDcUIsQ0FBQyxHQUFHNUIsY0FBYyxDQUFDNkIsWUFBWSxDQUFFRCxDQUFFLENBQUM7SUFDM0MsQ0FBRSxDQUFDO0lBRUhqQyxTQUFTLENBQUNtQyxTQUFTLENBQUUsQ0FBRXZCLElBQUksQ0FBQ3dCLGNBQWMsRUFBRWIsU0FBUyxDQUFDYSxjQUFjLENBQUUsRUFBRSxNQUFNO01BQzVFYixTQUFTLENBQUNjLFlBQVksR0FBR3pCLElBQUksQ0FBQzBCLFNBQVM7SUFDekMsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBN0MsZUFBZSxDQUFDOEMsUUFBUSxDQUFFLGlCQUFpQixFQUFFckMsZUFBZ0IsQ0FBQyJ9