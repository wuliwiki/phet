// Copyright 2022-2023, University of Colorado Boulder

/**
 * CueingArrowsNode is a representation of two arrows pointing in opposite direction, often used to provide a cue
 * to the user that a nearby object is draggable
 *
 * @author Martin Veillette
 */

import optionize from '../../../../phet-core/js/optionize.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import { VBox } from '../../../../scenery/js/imports.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
const ARROW_LENGTH = 50;
const ARROW_NODE_OPTIONS = {
  fill: CalculusGrapherColors.cueingArrowsFillProperty,
  stroke: null,
  headWidth: 25,
  headHeight: 21,
  tailWidth: 12,
  fractionalHeadHeight: 0.5
};
export default class CueingArrowsNode extends VBox {
  constructor(providedOptions) {
    const upArrow = new ArrowNode(0, 0, 0, -ARROW_LENGTH, ARROW_NODE_OPTIONS);
    const downArrow = new ArrowNode(0, 0, 0, ARROW_LENGTH, ARROW_NODE_OPTIONS);
    const options = optionize()({
      // VBox Options
      spacing: 15,
      children: [upArrow, downArrow],
      pickable: false // performance optimization
    }, providedOptions);
    super(options);
  }
}
calculusGrapher.register('CueingArrowsNode', CueingArrowsNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJBcnJvd05vZGUiLCJWQm94IiwiY2FsY3VsdXNHcmFwaGVyIiwiQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIiwiQVJST1dfTEVOR1RIIiwiQVJST1dfTk9ERV9PUFRJT05TIiwiZmlsbCIsImN1ZWluZ0Fycm93c0ZpbGxQcm9wZXJ0eSIsInN0cm9rZSIsImhlYWRXaWR0aCIsImhlYWRIZWlnaHQiLCJ0YWlsV2lkdGgiLCJmcmFjdGlvbmFsSGVhZEhlaWdodCIsIkN1ZWluZ0Fycm93c05vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsInVwQXJyb3ciLCJkb3duQXJyb3ciLCJvcHRpb25zIiwic3BhY2luZyIsImNoaWxkcmVuIiwicGlja2FibGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1ZWluZ0Fycm93c05vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3VlaW5nQXJyb3dzTm9kZSBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIHR3byBhcnJvd3MgcG9pbnRpbmcgaW4gb3Bwb3NpdGUgZGlyZWN0aW9uLCBvZnRlbiB1c2VkIHRvIHByb3ZpZGUgYSBjdWVcclxuICogdG8gdGhlIHVzZXIgdGhhdCBhIG5lYXJieSBvYmplY3QgaXMgZHJhZ2dhYmxlXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zLCBWQm94LCBWQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBjYWxjdWx1c0dyYXBoZXIgZnJvbSAnLi4vLi4vY2FsY3VsdXNHcmFwaGVyLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbG9ycyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb2xvcnMuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5cclxuY29uc3QgQVJST1dfTEVOR1RIID0gNTA7XHJcbmNvbnN0IEFSUk9XX05PREVfT1BUSU9OUyA9IHtcclxuICBmaWxsOiBDYWxjdWx1c0dyYXBoZXJDb2xvcnMuY3VlaW5nQXJyb3dzRmlsbFByb3BlcnR5LFxyXG4gIHN0cm9rZTogbnVsbCxcclxuICBoZWFkV2lkdGg6IDI1LFxyXG4gIGhlYWRIZWlnaHQ6IDIxLFxyXG4gIHRhaWxXaWR0aDogMTIsXHJcbiAgZnJhY3Rpb25hbEhlYWRIZWlnaHQ6IDAuNVxyXG59O1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEN1ZWluZ0Fycm93c05vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zICZcclxuICBQaWNrUmVxdWlyZWQ8VkJveE9wdGlvbnMsICd0YW5kZW0nIHwgJ3BoZXRpb0RvY3VtZW50YXRpb24nIHwgJ3Zpc2libGVQcm9wZXJ0eSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VlaW5nQXJyb3dzTm9kZSBleHRlbmRzIFZCb3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogQ3VlaW5nQXJyb3dzTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgdXBBcnJvdyA9IG5ldyBBcnJvd05vZGUoIDAsIDAsIDAsIC1BUlJPV19MRU5HVEgsIEFSUk9XX05PREVfT1BUSU9OUyApO1xyXG4gICAgY29uc3QgZG93bkFycm93ID0gbmV3IEFycm93Tm9kZSggMCwgMCwgMCwgQVJST1dfTEVOR1RILCBBUlJPV19OT0RFX09QVElPTlMgKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEN1ZWluZ0Fycm93c05vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgVkJveE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFZCb3ggT3B0aW9uc1xyXG4gICAgICBzcGFjaW5nOiAxNSxcclxuICAgICAgY2hpbGRyZW46IFsgdXBBcnJvdywgZG93bkFycm93IF0sXHJcbiAgICAgIHBpY2thYmxlOiBmYWxzZSAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdDdWVpbmdBcnJvd3NOb2RlJywgQ3VlaW5nQXJyb3dzTm9kZSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUNuRixPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBQ2hFLFNBQWlDQyxJQUFJLFFBQXFCLG1DQUFtQztBQUM3RixPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUcvRCxNQUFNQyxZQUFZLEdBQUcsRUFBRTtBQUN2QixNQUFNQyxrQkFBa0IsR0FBRztFQUN6QkMsSUFBSSxFQUFFSCxxQkFBcUIsQ0FBQ0ksd0JBQXdCO0VBQ3BEQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxTQUFTLEVBQUUsRUFBRTtFQUNiQyxVQUFVLEVBQUUsRUFBRTtFQUNkQyxTQUFTLEVBQUUsRUFBRTtFQUNiQyxvQkFBb0IsRUFBRTtBQUN4QixDQUFDO0FBT0QsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU1osSUFBSSxDQUFDO0VBRTFDYSxXQUFXQSxDQUFFQyxlQUF3QyxFQUFHO0lBRTdELE1BQU1DLE9BQU8sR0FBRyxJQUFJaEIsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUNJLFlBQVksRUFBRUMsa0JBQW1CLENBQUM7SUFDM0UsTUFBTVksU0FBUyxHQUFHLElBQUlqQixTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVJLFlBQVksRUFBRUMsa0JBQW1CLENBQUM7SUFFNUUsTUFBTWEsT0FBTyxHQUFHbkIsU0FBUyxDQUFvRCxDQUFDLENBQUU7TUFFOUU7TUFDQW9CLE9BQU8sRUFBRSxFQUFFO01BQ1hDLFFBQVEsRUFBRSxDQUFFSixPQUFPLEVBQUVDLFNBQVMsQ0FBRTtNQUNoQ0ksUUFBUSxFQUFFLEtBQUssQ0FBQztJQUNsQixDQUFDLEVBQUVOLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFRyxPQUFRLENBQUM7RUFDbEI7QUFDRjtBQUVBaEIsZUFBZSxDQUFDb0IsUUFBUSxDQUFFLGtCQUFrQixFQUFFVCxnQkFBaUIsQ0FBQyJ9