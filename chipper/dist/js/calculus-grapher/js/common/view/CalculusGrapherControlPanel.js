// Copyright 2020-2023, University of Colorado Boulder

/**
 * Control Panel at the middle-right of each screen that allows the user to manipulate certain Properties of
 * the simulation.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
import optionize from '../../../../phet-core/js/optionize.js';
import CurveManipulationControls from './CurveManipulationControls.js';
import CurvePushButtonGroup from './CurvePushButtonGroup.js';
import PredictRadioButtonGroup from './PredictRadioButtonGroup.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
export default class CalculusGrapherControlPanel extends Panel {
  // the Node contained inside this Panel

  constructor(curveManipulationProperties, predictSelectedProperty, predictEnabledProperty, interactiveCurveProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      hasSmoothButton: true,
      // PanelOptions
      stroke: CalculusGrapherColors.panelStrokeProperty,
      fill: CalculusGrapherColors.panelFillProperty,
      cornerRadius: CalculusGrapherConstants.CORNER_RADIUS,
      xMargin: CalculusGrapherConstants.PANEL_X_MARGIN,
      yMargin: CalculusGrapherConstants.PANEL_Y_MARGIN,
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    }, providedOptions);
    const predictRadioButtonGroup = new PredictRadioButtonGroup(predictSelectedProperty, options.tandem.createTandem('predictRadioButtonGroup'));

    // create controls associated with curve manipulation (slider and display) as well as curve mode buttons
    const curveManipulationControls = new CurveManipulationControls(curveManipulationProperties, predictEnabledProperty, options.tandem.createTandem('curveManipulationControls'));

    // create yellow curve buttons associated with undo, erase and (optionally) smoothing the curve
    const pushButtonGroup = new CurvePushButtonGroup(interactiveCurveProperty, options.hasSmoothButton, options.tandem.createTandem('pushButtonGroup'));

    // assemble all the scenery nodes
    const contentNode = new VBox({
      spacing: 12,
      children: [predictRadioButtonGroup, curveManipulationControls, pushButtonGroup]
    });
    super(contentNode, options);
    this.contentNode = contentNode;
  }
}
calculusGrapher.register('CalculusGrapherControlPanel', CalculusGrapherControlPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,