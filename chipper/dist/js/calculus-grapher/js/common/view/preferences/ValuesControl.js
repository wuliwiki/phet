// Copyright 2022-2023, University of Colorado Boulder

/**
 * ValuesControl is the control in the Preferences dialog for setting whether numerical values are displayed
 * throughout the simulations. It is a labeled on/off switch.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PreferencesControl from '../../../../../joist/js/preferences/PreferencesControl.js';
import { combineOptions } from '../../../../../phet-core/js/optionize.js';
import { RichText, Text } from '../../../../../scenery/js/imports.js';
import calculusGrapher from '../../../calculusGrapher.js';
import CalculusGrapherStrings from '../../../CalculusGrapherStrings.js';
import ToggleSwitch from '../../../../../sun/js/ToggleSwitch.js';
import PreferencesDialogConstants from '../../../../../joist/js/preferences/PreferencesDialogConstants.js';
import CalculusGrapherConstants from '../../CalculusGrapherConstants.js';
export default class ValuesControl extends PreferencesControl {
  constructor(valuesVisibleProperty, tandem) {
    const labelText = new Text(CalculusGrapherStrings.valuesStringProperty, {
      font: CalculusGrapherConstants.PREFERENCES_LABEL_FONT,
      maxWidth: CalculusGrapherConstants.PREFERENCES_LABEL_MAX_WIDTH,
      tandem: tandem.createTandem('labelText')
    });
    const toggleSwitch = new ToggleSwitch(valuesVisibleProperty, false, true, combineOptions({}, PreferencesDialogConstants.TOGGLE_SWITCH_OPTIONS, {
      tandem: tandem.createTandem('toggleSwitch'),
      phetioVisiblePropertyInstrumented: false
    }));
    const descriptionText = new RichText(CalculusGrapherStrings.valuesPreferenceDescriptionStringProperty, {
      lineWrap: CalculusGrapherConstants.PREFERENCES_DESCRIPTION_LINE_WRAP,
      maxHeight: 50,
      font: CalculusGrapherConstants.PREFERENCES_DESCRIPTION_FONT,
      tandem: tandem.createTandem('descriptionText')
    });
    super({
      labelNode: labelText,
      controlNode: toggleSwitch,
      descriptionNode: descriptionText,
      labelSpacing: 20,
      tandem: tandem,
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    });
    this.disposeValuesControl = () => {
      labelText.dispose();
      toggleSwitch.dispose();
      descriptionText.dispose();
    };
  }
  dispose() {
    this.disposeValuesControl();
    super.dispose();
  }
}
calculusGrapher.register('ValuesControl', ValuesControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc0NvbnRyb2wiLCJjb21iaW5lT3B0aW9ucyIsIlJpY2hUZXh0IiwiVGV4dCIsImNhbGN1bHVzR3JhcGhlciIsIkNhbGN1bHVzR3JhcGhlclN0cmluZ3MiLCJUb2dnbGVTd2l0Y2giLCJQcmVmZXJlbmNlc0RpYWxvZ0NvbnN0YW50cyIsIkNhbGN1bHVzR3JhcGhlckNvbnN0YW50cyIsIlZhbHVlc0NvbnRyb2wiLCJjb25zdHJ1Y3RvciIsInZhbHVlc1Zpc2libGVQcm9wZXJ0eSIsInRhbmRlbSIsImxhYmVsVGV4dCIsInZhbHVlc1N0cmluZ1Byb3BlcnR5IiwiZm9udCIsIlBSRUZFUkVOQ0VTX0xBQkVMX0ZPTlQiLCJtYXhXaWR0aCIsIlBSRUZFUkVOQ0VTX0xBQkVMX01BWF9XSURUSCIsImNyZWF0ZVRhbmRlbSIsInRvZ2dsZVN3aXRjaCIsIlRPR0dMRV9TV0lUQ0hfT1BUSU9OUyIsInBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZCIsImRlc2NyaXB0aW9uVGV4dCIsInZhbHVlc1ByZWZlcmVuY2VEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5IiwibGluZVdyYXAiLCJQUkVGRVJFTkNFU19ERVNDUklQVElPTl9MSU5FX1dSQVAiLCJtYXhIZWlnaHQiLCJQUkVGRVJFTkNFU19ERVNDUklQVElPTl9GT05UIiwibGFiZWxOb2RlIiwiY29udHJvbE5vZGUiLCJkZXNjcmlwdGlvbk5vZGUiLCJsYWJlbFNwYWNpbmciLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvRmVhdHVyZWQiLCJkaXNwb3NlVmFsdWVzQ29udHJvbCIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZhbHVlc0NvbnRyb2wudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmFsdWVzQ29udHJvbCBpcyB0aGUgY29udHJvbCBpbiB0aGUgUHJlZmVyZW5jZXMgZGlhbG9nIGZvciBzZXR0aW5nIHdoZXRoZXIgbnVtZXJpY2FsIHZhbHVlcyBhcmUgZGlzcGxheWVkXHJcbiAqIHRocm91Z2hvdXQgdGhlIHNpbXVsYXRpb25zLiBJdCBpcyBhIGxhYmVsZWQgb24vb2ZmIHN3aXRjaC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc0NvbnRyb2wgZnJvbSAnLi4vLi4vLi4vLi4vLi4vam9pc3QvanMvcHJlZmVyZW5jZXMvUHJlZmVyZW5jZXNDb250cm9sLmpzJztcclxuaW1wb3J0IHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgUmljaFRleHQsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJTdHJpbmdzIGZyb20gJy4uLy4uLy4uL0NhbGN1bHVzR3JhcGhlclN0cmluZ3MuanMnO1xyXG5pbXBvcnQgVG9nZ2xlU3dpdGNoLCB7IFRvZ2dsZVN3aXRjaE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zdW4vanMvVG9nZ2xlU3dpdGNoLmpzJztcclxuaW1wb3J0IFByZWZlcmVuY2VzRGlhbG9nQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzRGlhbG9nQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cyBmcm9tICcuLi8uLi9DYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmFsdWVzQ29udHJvbCBleHRlbmRzIFByZWZlcmVuY2VzQ29udHJvbCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVZhbHVlc0NvbnRyb2w6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdmFsdWVzVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFRleHQoIENhbGN1bHVzR3JhcGhlclN0cmluZ3MudmFsdWVzU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLlBSRUZFUkVOQ0VTX0xBQkVMX0ZPTlQsXHJcbiAgICAgIG1heFdpZHRoOiBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuUFJFRkVSRU5DRVNfTEFCRUxfTUFYX1dJRFRILFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB0b2dnbGVTd2l0Y2ggPSBuZXcgVG9nZ2xlU3dpdGNoKCB2YWx1ZXNWaXNpYmxlUHJvcGVydHksIGZhbHNlLCB0cnVlLFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxUb2dnbGVTd2l0Y2hPcHRpb25zPigge30sIFByZWZlcmVuY2VzRGlhbG9nQ29uc3RhbnRzLlRPR0dMRV9TV0lUQ0hfT1BUSU9OUywge1xyXG4gICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RvZ2dsZVN3aXRjaCcgKSxcclxuICAgICAgICBwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQ6IGZhbHNlXHJcbiAgICAgIH0gKSApO1xyXG5cclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uVGV4dCA9IG5ldyBSaWNoVGV4dCggQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncy52YWx1ZXNQcmVmZXJlbmNlRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBsaW5lV3JhcDogQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLlBSRUZFUkVOQ0VTX0RFU0NSSVBUSU9OX0xJTkVfV1JBUCxcclxuICAgICAgbWF4SGVpZ2h0OiA1MCxcclxuICAgICAgZm9udDogQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLlBSRUZFUkVOQ0VTX0RFU0NSSVBUSU9OX0ZPTlQsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Rlc2NyaXB0aW9uVGV4dCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGxhYmVsTm9kZTogbGFiZWxUZXh0LFxyXG4gICAgICBjb250cm9sTm9kZTogdG9nZ2xlU3dpdGNoLFxyXG4gICAgICBkZXNjcmlwdGlvbk5vZGU6IGRlc2NyaXB0aW9uVGV4dCxcclxuICAgICAgbGFiZWxTcGFjaW5nOiAyMCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHtcclxuICAgICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlVmFsdWVzQ29udHJvbCA9ICgpID0+IHtcclxuICAgICAgbGFiZWxUZXh0LmRpc3Bvc2UoKTtcclxuICAgICAgdG9nZ2xlU3dpdGNoLmRpc3Bvc2UoKTtcclxuICAgICAgZGVzY3JpcHRpb25UZXh0LmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVZhbHVlc0NvbnRyb2woKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ1ZhbHVlc0NvbnRyb2wnLCBWYWx1ZXNDb250cm9sICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLGtCQUFrQixNQUFNLDJEQUEyRDtBQUMxRixTQUFTQyxjQUFjLFFBQVEsMENBQTBDO0FBQ3pFLFNBQVNDLFFBQVEsRUFBRUMsSUFBSSxRQUFRLHNDQUFzQztBQUNyRSxPQUFPQyxlQUFlLE1BQU0sNkJBQTZCO0FBQ3pELE9BQU9DLHNCQUFzQixNQUFNLG9DQUFvQztBQUN2RSxPQUFPQyxZQUFZLE1BQStCLHVDQUF1QztBQUN6RixPQUFPQywwQkFBMEIsTUFBTSxtRUFBbUU7QUFFMUcsT0FBT0Msd0JBQXdCLE1BQU0sbUNBQW1DO0FBRXhFLGVBQWUsTUFBTUMsYUFBYSxTQUFTVCxrQkFBa0IsQ0FBQztFQUlyRFUsV0FBV0EsQ0FBRUMscUJBQXdDLEVBQUVDLE1BQWMsRUFBRztJQUU3RSxNQUFNQyxTQUFTLEdBQUcsSUFBSVYsSUFBSSxDQUFFRSxzQkFBc0IsQ0FBQ1Msb0JBQW9CLEVBQUU7TUFDdkVDLElBQUksRUFBRVAsd0JBQXdCLENBQUNRLHNCQUFzQjtNQUNyREMsUUFBUSxFQUFFVCx3QkFBd0IsQ0FBQ1UsMkJBQTJCO01BQzlETixNQUFNLEVBQUVBLE1BQU0sQ0FBQ08sWUFBWSxDQUFFLFdBQVk7SUFDM0MsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsWUFBWSxHQUFHLElBQUlkLFlBQVksQ0FBRUsscUJBQXFCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFDdkVWLGNBQWMsQ0FBdUIsQ0FBQyxDQUFDLEVBQUVNLDBCQUEwQixDQUFDYyxxQkFBcUIsRUFBRTtNQUN6RlQsTUFBTSxFQUFFQSxNQUFNLENBQUNPLFlBQVksQ0FBRSxjQUFlLENBQUM7TUFDN0NHLGlDQUFpQyxFQUFFO0lBQ3JDLENBQUUsQ0FBRSxDQUFDO0lBRVAsTUFBTUMsZUFBZSxHQUFHLElBQUlyQixRQUFRLENBQUVHLHNCQUFzQixDQUFDbUIseUNBQXlDLEVBQUU7TUFDdEdDLFFBQVEsRUFBRWpCLHdCQUF3QixDQUFDa0IsaUNBQWlDO01BQ3BFQyxTQUFTLEVBQUUsRUFBRTtNQUNiWixJQUFJLEVBQUVQLHdCQUF3QixDQUFDb0IsNEJBQTRCO01BQzNEaEIsTUFBTSxFQUFFQSxNQUFNLENBQUNPLFlBQVksQ0FBRSxpQkFBa0I7SUFDakQsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFO01BQ0xVLFNBQVMsRUFBRWhCLFNBQVM7TUFDcEJpQixXQUFXLEVBQUVWLFlBQVk7TUFDekJXLGVBQWUsRUFBRVIsZUFBZTtNQUNoQ1MsWUFBWSxFQUFFLEVBQUU7TUFDaEJwQixNQUFNLEVBQUVBLE1BQU07TUFDZHFCLHNCQUFzQixFQUFFO1FBQ3RCQyxjQUFjLEVBQUU7TUFDbEI7SUFDRixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLG9CQUFvQixHQUFHLE1BQU07TUFDaEN0QixTQUFTLENBQUN1QixPQUFPLENBQUMsQ0FBQztNQUNuQmhCLFlBQVksQ0FBQ2dCLE9BQU8sQ0FBQyxDQUFDO01BQ3RCYixlQUFlLENBQUNhLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0Qsb0JBQW9CLENBQUMsQ0FBQztJQUMzQixLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWhDLGVBQWUsQ0FBQ2lDLFFBQVEsQ0FBRSxlQUFlLEVBQUU1QixhQUFjLENBQUMifQ==