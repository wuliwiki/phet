// Copyright 2023, University of Colorado Boulder

/**
 * CurveManipulationWidthControl is display the width as a curve, with a slider to control the width for
 * manipulation modes that have an adjustable width.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { VBox } from '../../../../scenery/js/imports.js';
import calculusGrapher from '../../calculusGrapher.js';
import CurveManipulationDisplayNode from './CurveManipulationDisplayNode.js';
import CurveManipulationWidthSlider from './CurveManipulationWidthSlider.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
export default class CurveManipulationWidthControl extends VBox {
  constructor(curveManipulationProperties, curveManipulationStrokeProperty, tandem) {
    const curveDisplayNode = new CurveManipulationDisplayNode(curveManipulationProperties, curveManipulationStrokeProperty, tandem.createTandem('curveDisplayNode'));
    const slider = new CurveManipulationWidthSlider(curveManipulationProperties.widthProperty, {
      visibleProperty: new DerivedProperty([curveManipulationProperties.modeProperty], mode => mode.hasAdjustableWidth),
      tandem: tandem.createTandem('slider')
    });
    super({
      children: [curveDisplayNode, slider],
      spacing: 10,
      excludeInvisibleChildrenFromBounds: false,
      tandem: tandem,
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    });
  }
}
calculusGrapher.register('CurveManipulationWidthControl', CurveManipulationWidthControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWQm94IiwiY2FsY3VsdXNHcmFwaGVyIiwiQ3VydmVNYW5pcHVsYXRpb25EaXNwbGF5Tm9kZSIsIkN1cnZlTWFuaXB1bGF0aW9uV2lkdGhTbGlkZXIiLCJEZXJpdmVkUHJvcGVydHkiLCJDdXJ2ZU1hbmlwdWxhdGlvbldpZHRoQ29udHJvbCIsImNvbnN0cnVjdG9yIiwiY3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzIiwiY3VydmVNYW5pcHVsYXRpb25TdHJva2VQcm9wZXJ0eSIsInRhbmRlbSIsImN1cnZlRGlzcGxheU5vZGUiLCJjcmVhdGVUYW5kZW0iLCJzbGlkZXIiLCJ3aWR0aFByb3BlcnR5IiwidmlzaWJsZVByb3BlcnR5IiwibW9kZVByb3BlcnR5IiwibW9kZSIsImhhc0FkanVzdGFibGVXaWR0aCIsImNoaWxkcmVuIiwic3BhY2luZyIsImV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHMiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvRmVhdHVyZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1cnZlTWFuaXB1bGF0aW9uV2lkdGhDb250cm9sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDdXJ2ZU1hbmlwdWxhdGlvbldpZHRoQ29udHJvbCBpcyBkaXNwbGF5IHRoZSB3aWR0aCBhcyBhIGN1cnZlLCB3aXRoIGEgc2xpZGVyIHRvIGNvbnRyb2wgdGhlIHdpZHRoIGZvclxyXG4gKiBtYW5pcHVsYXRpb24gbW9kZXMgdGhhdCBoYXZlIGFuIGFkanVzdGFibGUgd2lkdGguXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENvbG9yLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ3VydmVNYW5pcHVsYXRpb25EaXNwbGF5Tm9kZSBmcm9tICcuL0N1cnZlTWFuaXB1bGF0aW9uRGlzcGxheU5vZGUuanMnO1xyXG5pbXBvcnQgQ3VydmVNYW5pcHVsYXRpb25XaWR0aFNsaWRlciBmcm9tICcuL0N1cnZlTWFuaXB1bGF0aW9uV2lkdGhTbGlkZXIuanMnO1xyXG5pbXBvcnQgQ3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzIGZyb20gJy4uL21vZGVsL0N1cnZlTWFuaXB1bGF0aW9uUHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXJ2ZU1hbmlwdWxhdGlvbldpZHRoQ29udHJvbCBleHRlbmRzIFZCb3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGN1cnZlTWFuaXB1bGF0aW9uUHJvcGVydGllczogQ3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgY3VydmVNYW5pcHVsYXRpb25TdHJva2VQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Q29sb3I+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgY3VydmVEaXNwbGF5Tm9kZSA9IG5ldyBDdXJ2ZU1hbmlwdWxhdGlvbkRpc3BsYXlOb2RlKCBjdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMsXHJcbiAgICAgIGN1cnZlTWFuaXB1bGF0aW9uU3Ryb2tlUHJvcGVydHksIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjdXJ2ZURpc3BsYXlOb2RlJyApICk7XHJcblxyXG4gICAgY29uc3Qgc2xpZGVyID0gbmV3IEN1cnZlTWFuaXB1bGF0aW9uV2lkdGhTbGlkZXIoIGN1cnZlTWFuaXB1bGF0aW9uUHJvcGVydGllcy53aWR0aFByb3BlcnR5LCB7XHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBjdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMubW9kZVByb3BlcnR5IF0sXHJcbiAgICAgICAgbW9kZSA9PiBtb2RlLmhhc0FkanVzdGFibGVXaWR0aCApLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzbGlkZXInIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBjaGlsZHJlbjogWyBjdXJ2ZURpc3BsYXlOb2RlLCBzbGlkZXIgXSxcclxuICAgICAgc3BhY2luZzogMTAsXHJcbiAgICAgIGV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHM6IGZhbHNlLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbSxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5T3B0aW9uczoge1xyXG4gICAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0N1cnZlTWFuaXB1bGF0aW9uV2lkdGhDb250cm9sJywgQ3VydmVNYW5pcHVsYXRpb25XaWR0aENvbnRyb2wgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFnQkEsSUFBSSxRQUFRLG1DQUFtQztBQUMvRCxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLDRCQUE0QixNQUFNLG1DQUFtQztBQUM1RSxPQUFPQyw0QkFBNEIsTUFBTSxtQ0FBbUM7QUFFNUUsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUlwRSxlQUFlLE1BQU1DLDZCQUE2QixTQUFTTCxJQUFJLENBQUM7RUFFdkRNLFdBQVdBLENBQUVDLDJCQUF3RCxFQUN4REMsK0JBQXlELEVBQ3pEQyxNQUFjLEVBQUc7SUFFbkMsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSVIsNEJBQTRCLENBQUVLLDJCQUEyQixFQUNwRkMsK0JBQStCLEVBQUVDLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLGtCQUFtQixDQUFFLENBQUM7SUFFOUUsTUFBTUMsTUFBTSxHQUFHLElBQUlULDRCQUE0QixDQUFFSSwyQkFBMkIsQ0FBQ00sYUFBYSxFQUFFO01BQzFGQyxlQUFlLEVBQUUsSUFBSVYsZUFBZSxDQUFFLENBQUVHLDJCQUEyQixDQUFDUSxZQUFZLENBQUUsRUFDaEZDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxrQkFBbUIsQ0FBQztNQUNuQ1IsTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSxRQUFTO0lBQ3hDLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRTtNQUNMTyxRQUFRLEVBQUUsQ0FBRVIsZ0JBQWdCLEVBQUVFLE1BQU0sQ0FBRTtNQUN0Q08sT0FBTyxFQUFFLEVBQUU7TUFDWEMsa0NBQWtDLEVBQUUsS0FBSztNQUN6Q1gsTUFBTSxFQUFFQSxNQUFNO01BQ2RZLHNCQUFzQixFQUFFO1FBQ3RCQyxjQUFjLEVBQUU7TUFDbEI7SUFDRixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFyQixlQUFlLENBQUNzQixRQUFRLENBQUUsK0JBQStCLEVBQUVsQiw2QkFBOEIsQ0FBQyJ9