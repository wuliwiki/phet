// Copyright 2022-2023, University of Colorado Boulder

/**
 * PredictRadioButtonGroup is the radio button group for choosing either the original or predict curve.
 * The group is visible only if the Predict preference is turned on, which shows UI features related to Predict.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { AlignGroup, Text } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import RectangularRadioButton from '../../../../sun/js/buttons/RectangularRadioButton.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
import GraphTypeLabelNode from './GraphTypeLabelNode.js';
import CalculusGrapherStrings from '../../CalculusGrapherStrings.js';
import { LabelColorIcon } from './LabelColorIcon.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
import GraphType from '../model/GraphType.js';
import CalculusGrapherPreferences from '../model/CalculusGrapherPreferences.js';
export default class PredictRadioButtonGroup extends RectangularRadioButtonGroup {
  constructor(predictSelectedProperty, tandem) {
    const originalCurveLabelNode = new GraphTypeLabelNode(GraphType.ORIGINAL);

    // To give the labels the same effective size
    const alignGroup = new AlignGroup();
    const rectangularRadioButtonGroupItems = [{
      value: false,
      createNode: () => new LabelColorIcon(originalCurveLabelNode, alignGroup, CalculusGrapherColors.originalCurveStrokeProperty),
      tandemName: `originalCurve${RectangularRadioButton.TANDEM_NAME_SUFFIX}`
    }, {
      value: true,
      createNode: tandem => {
        const text = new Text(CalculusGrapherStrings.predictStringProperty, {
          font: CalculusGrapherConstants.CONTROL_FONT,
          maxWidth: 50,
          tandem: tandem.createTandem('text')
        });
        return new LabelColorIcon(text, alignGroup, CalculusGrapherColors.predictCurveStrokeProperty);
      },
      tandemName: `predictCurve${RectangularRadioButton.TANDEM_NAME_SUFFIX}`
    }];
    super(predictSelectedProperty, rectangularRadioButtonGroupItems, {
      visibleProperty: CalculusGrapherPreferences.predictPreferenceEnabledProperty,
      orientation: 'horizontal',
      spacing: 5,
      radioButtonOptions: {
        baseColor: CalculusGrapherColors.panelFillProperty,
        xMargin: 10,
        yMargin: 10,
        phetioVisiblePropertyInstrumented: false
      },
      tandem: tandem
    });
  }
}
calculusGrapher.register('PredictRadioButtonGroup', PredictRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbGlnbkdyb3VwIiwiVGV4dCIsIlJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCIsIlJlY3Rhbmd1bGFyUmFkaW9CdXR0b24iLCJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJDb2xvcnMiLCJHcmFwaFR5cGVMYWJlbE5vZGUiLCJDYWxjdWx1c0dyYXBoZXJTdHJpbmdzIiwiTGFiZWxDb2xvckljb24iLCJDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMiLCJHcmFwaFR5cGUiLCJDYWxjdWx1c0dyYXBoZXJQcmVmZXJlbmNlcyIsIlByZWRpY3RSYWRpb0J1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJwcmVkaWN0U2VsZWN0ZWRQcm9wZXJ0eSIsInRhbmRlbSIsIm9yaWdpbmFsQ3VydmVMYWJlbE5vZGUiLCJPUklHSU5BTCIsImFsaWduR3JvdXAiLCJyZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBJdGVtcyIsInZhbHVlIiwiY3JlYXRlTm9kZSIsIm9yaWdpbmFsQ3VydmVTdHJva2VQcm9wZXJ0eSIsInRhbmRlbU5hbWUiLCJUQU5ERU1fTkFNRV9TVUZGSVgiLCJ0ZXh0IiwicHJlZGljdFN0cmluZ1Byb3BlcnR5IiwiZm9udCIsIkNPTlRST0xfRk9OVCIsIm1heFdpZHRoIiwiY3JlYXRlVGFuZGVtIiwicHJlZGljdEN1cnZlU3Ryb2tlUHJvcGVydHkiLCJ2aXNpYmxlUHJvcGVydHkiLCJwcmVkaWN0UHJlZmVyZW5jZUVuYWJsZWRQcm9wZXJ0eSIsIm9yaWVudGF0aW9uIiwic3BhY2luZyIsInJhZGlvQnV0dG9uT3B0aW9ucyIsImJhc2VDb2xvciIsInBhbmVsRmlsbFByb3BlcnR5IiwieE1hcmdpbiIsInlNYXJnaW4iLCJwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByZWRpY3RSYWRpb0J1dHRvbkdyb3VwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFByZWRpY3RSYWRpb0J1dHRvbkdyb3VwIGlzIHRoZSByYWRpbyBidXR0b24gZ3JvdXAgZm9yIGNob29zaW5nIGVpdGhlciB0aGUgb3JpZ2luYWwgb3IgcHJlZGljdCBjdXJ2ZS5cclxuICogVGhlIGdyb3VwIGlzIHZpc2libGUgb25seSBpZiB0aGUgUHJlZGljdCBwcmVmZXJlbmNlIGlzIHR1cm5lZCBvbiwgd2hpY2ggc2hvd3MgVUkgZmVhdHVyZXMgcmVsYXRlZCB0byBQcmVkaWN0LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFsaWduR3JvdXAsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwLCB7IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclJhZGlvQnV0dG9uLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIGZyb20gJy4uL0NhbGN1bHVzR3JhcGhlckNvbG9ycy5qcyc7XHJcbmltcG9ydCBHcmFwaFR5cGVMYWJlbE5vZGUgZnJvbSAnLi9HcmFwaFR5cGVMYWJlbE5vZGUuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncyBmcm9tICcuLi8uLi9DYWxjdWx1c0dyYXBoZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IHsgTGFiZWxDb2xvckljb24gfSBmcm9tICcuL0xhYmVsQ29sb3JJY29uLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIGZyb20gJy4uL0NhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBHcmFwaFR5cGUgZnJvbSAnLi4vbW9kZWwvR3JhcGhUeXBlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzIGZyb20gJy4uL21vZGVsL0NhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWRpY3RSYWRpb0J1dHRvbkdyb3VwIGV4dGVuZHMgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwPGJvb2xlYW4+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcmVkaWN0U2VsZWN0ZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IG9yaWdpbmFsQ3VydmVMYWJlbE5vZGUgPSBuZXcgR3JhcGhUeXBlTGFiZWxOb2RlKCBHcmFwaFR5cGUuT1JJR0lOQUwgKTtcclxuXHJcbiAgICAvLyBUbyBnaXZlIHRoZSBsYWJlbHMgdGhlIHNhbWUgZWZmZWN0aXZlIHNpemVcclxuICAgIGNvbnN0IGFsaWduR3JvdXAgPSBuZXcgQWxpZ25Hcm91cCgpO1xyXG5cclxuICAgIGNvbnN0IHJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cEl0ZW1zOiBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBJdGVtPGJvb2xlYW4+W10gPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IExhYmVsQ29sb3JJY29uKCBvcmlnaW5hbEN1cnZlTGFiZWxOb2RlLCBhbGlnbkdyb3VwLCBDYWxjdWx1c0dyYXBoZXJDb2xvcnMub3JpZ2luYWxDdXJ2ZVN0cm9rZVByb3BlcnR5ICksXHJcbiAgICAgICAgdGFuZGVtTmFtZTogYG9yaWdpbmFsQ3VydmUke1JlY3Rhbmd1bGFyUmFkaW9CdXR0b24uVEFOREVNX05BTUVfU1VGRklYfWBcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgICAgIGNyZWF0ZU5vZGU6IHRhbmRlbSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB0ZXh0ID0gbmV3IFRleHQoIENhbGN1bHVzR3JhcGhlclN0cmluZ3MucHJlZGljdFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgICAgIGZvbnQ6IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5DT05UUk9MX0ZPTlQsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiA1MCxcclxuICAgICAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndGV4dCcgKVxyXG4gICAgICAgICAgfSApO1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBMYWJlbENvbG9ySWNvbiggdGV4dCwgYWxpZ25Hcm91cCwgQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLnByZWRpY3RDdXJ2ZVN0cm9rZVByb3BlcnR5ICk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0YW5kZW1OYW1lOiBgcHJlZGljdEN1cnZlJHtSZWN0YW5ndWxhclJhZGlvQnV0dG9uLlRBTkRFTV9OQU1FX1NVRkZJWH1gXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIHByZWRpY3RTZWxlY3RlZFByb3BlcnR5LCByZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBJdGVtcywge1xyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IENhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzLnByZWRpY3RQcmVmZXJlbmNlRW5hYmxlZFByb3BlcnR5LFxyXG4gICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICBzcGFjaW5nOiA1LFxyXG4gICAgICByYWRpb0J1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBiYXNlQ29sb3I6IENhbGN1bHVzR3JhcGhlckNvbG9ycy5wYW5lbEZpbGxQcm9wZXJ0eSxcclxuICAgICAgICB4TWFyZ2luOiAxMCxcclxuICAgICAgICB5TWFyZ2luOiAxMCxcclxuICAgICAgICBwaGV0aW9WaXNpYmxlUHJvcGVydHlJbnN0cnVtZW50ZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdQcmVkaWN0UmFkaW9CdXR0b25Hcm91cCcsIFByZWRpY3RSYWRpb0J1dHRvbkdyb3VwICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLFVBQVUsRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNwRSxPQUFPQywyQkFBMkIsTUFBMkMsMkRBQTJEO0FBQ3hJLE9BQU9DLHNCQUFzQixNQUFNLHNEQUFzRDtBQUN6RixPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUMvRCxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFDeEQsT0FBT0Msc0JBQXNCLE1BQU0saUNBQWlDO0FBQ3BFLFNBQVNDLGNBQWMsUUFBUSxxQkFBcUI7QUFFcEQsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLFNBQVMsTUFBTSx1QkFBdUI7QUFFN0MsT0FBT0MsMEJBQTBCLE1BQU0sd0NBQXdDO0FBRS9FLGVBQWUsTUFBTUMsdUJBQXVCLFNBQVNWLDJCQUEyQixDQUFVO0VBRWpGVyxXQUFXQSxDQUFFQyx1QkFBMEMsRUFBRUMsTUFBYyxFQUFHO0lBRS9FLE1BQU1DLHNCQUFzQixHQUFHLElBQUlWLGtCQUFrQixDQUFFSSxTQUFTLENBQUNPLFFBQVMsQ0FBQzs7SUFFM0U7SUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSWxCLFVBQVUsQ0FBQyxDQUFDO0lBRW5DLE1BQU1tQixnQ0FBNEUsR0FBRyxDQUNuRjtNQUNFQyxLQUFLLEVBQUUsS0FBSztNQUNaQyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJYixjQUFjLENBQUVRLHNCQUFzQixFQUFFRSxVQUFVLEVBQUViLHFCQUFxQixDQUFDaUIsMkJBQTRCLENBQUM7TUFDN0hDLFVBQVUsRUFBRyxnQkFBZXBCLHNCQUFzQixDQUFDcUIsa0JBQW1CO0lBQ3hFLENBQUMsRUFDRDtNQUNFSixLQUFLLEVBQUUsSUFBSTtNQUNYQyxVQUFVLEVBQUVOLE1BQU0sSUFBSTtRQUNwQixNQUFNVSxJQUFJLEdBQUcsSUFBSXhCLElBQUksQ0FBRU0sc0JBQXNCLENBQUNtQixxQkFBcUIsRUFBRTtVQUNuRUMsSUFBSSxFQUFFbEIsd0JBQXdCLENBQUNtQixZQUFZO1VBQzNDQyxRQUFRLEVBQUUsRUFBRTtVQUNaZCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ2UsWUFBWSxDQUFFLE1BQU87UUFDdEMsQ0FBRSxDQUFDO1FBQ0gsT0FBTyxJQUFJdEIsY0FBYyxDQUFFaUIsSUFBSSxFQUFFUCxVQUFVLEVBQUViLHFCQUFxQixDQUFDMEIsMEJBQTJCLENBQUM7TUFDakcsQ0FBQztNQUNEUixVQUFVLEVBQUcsZUFBY3BCLHNCQUFzQixDQUFDcUIsa0JBQW1CO0lBQ3ZFLENBQUMsQ0FDRjtJQUVELEtBQUssQ0FBRVYsdUJBQXVCLEVBQUVLLGdDQUFnQyxFQUFFO01BQ2hFYSxlQUFlLEVBQUVyQiwwQkFBMEIsQ0FBQ3NCLGdDQUFnQztNQUM1RUMsV0FBVyxFQUFFLFlBQVk7TUFDekJDLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLGtCQUFrQixFQUFFO1FBQ2xCQyxTQUFTLEVBQUVoQyxxQkFBcUIsQ0FBQ2lDLGlCQUFpQjtRQUNsREMsT0FBTyxFQUFFLEVBQUU7UUFDWEMsT0FBTyxFQUFFLEVBQUU7UUFDWEMsaUNBQWlDLEVBQUU7TUFDckMsQ0FBQztNQUNEMUIsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQVgsZUFBZSxDQUFDc0MsUUFBUSxDQUFFLHlCQUF5QixFQUFFOUIsdUJBQXdCLENBQUMifQ==