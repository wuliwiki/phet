// Copyright 2020-2023, University of Colorado Boulder

/**
 * Base class for the top-level view of every screen in the 'Calculus Grapher' simulation.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import ScreenView from '../../../../joist/js/ScreenView.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherControlPanel from './CalculusGrapherControlPanel.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import GraphsNode from './GraphsNode.js';
import CalculusGrapherCheckboxGroup from './CalculusGrapherCheckboxGroup.js';
import GraphSetRadioButtonGroup from './GraphSetRadioButtonGroup.js';
import { Node, VBox } from '../../../../scenery/js/imports.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
export default class CalculusGrapherScreenView extends ScreenView {
  // Node responsible for displaying all graphs and their decorations

  // The checkbox group that appears below the control panel

  // Instead of adding children directly to the ScreenView, add them to this parent Node, so that keyboard traversal
  // can be supported by setting pdomOrder on this Node.  See https://github.com/phetsims/calculus-grapher/issues/123
  constructor(model, providedOptions) {
    const options = optionize()({
      // SelfOptions
      graphSetRadioButtonGroupItems: []
    }, providedOptions);
    assert && assert(model.graphSets.length === 1 && options.graphSetRadioButtonGroupItems.length === 0 || model.graphSets.length === options.graphSetRadioButtonGroupItems.length, 'If > 1 graphSets, then there must be a radio button for each graphSet');
    super(options);
    this.model = model;
    const resetAllButton = new ResetAllButton({
      right: this.layoutBounds.right - CalculusGrapherConstants.SCREEN_VIEW_X_MARGIN,
      bottom: this.layoutBounds.bottom - CalculusGrapherConstants.SCREEN_VIEW_Y_MARGIN,
      listener: () => this.reset(),
      tandem: options.tandem.createTandem('resetAllButton')
    });
    const controlPanel = new CalculusGrapherControlPanel(model.curveManipulationProperties, model.predictSelectedProperty, model.predictEnabledProperty, model.interactiveCurveProperty, combineOptions({
      tandem: options.tandem.createTandem('controlPanel')
    }, options.controlPanelOptions));
    this.checkboxGroup = new CalculusGrapherCheckboxGroup(model.gridVisibleProperty, model.referenceLine.visibleProperty, options.tandem.createTandem('checkboxGroup'));
    const rightVBox = new VBox({
      children: [controlPanel, this.checkboxGroup],
      spacing: 20,
      align: 'left'
    });
    this.graphsNode = new GraphsNode(model, {
      centerX: this.layoutBounds.centerX - 25,
      y: this.layoutBounds.top + 40,
      tandem: options.tandem.createTandem('graphsNode')
    });

    // Put control panel in the negative space to the right of the ChartRectangles, top-aligned with graphsNode.y.
    rightVBox.boundsProperty.link(() => {
      const chartRectangleRight = this.graphsNode.x + CalculusGrapherConstants.CHART_RECTANGLE_WIDTH;
      rightVBox.centerX = this.layoutBounds.right - (this.layoutBounds.right - chartRectangleRight) / 2;
      rightVBox.top = this.graphsNode.y;
    });
    const children = [this.graphsNode, rightVBox, resetAllButton];
    if (options.graphSetRadioButtonGroupItems.length > 0) {
      const graphSetRadioButtonGroup = new GraphSetRadioButtonGroup(model.graphSetProperty, options.graphSetRadioButtonGroupItems, options.tandem.createTandem('graphSetRadioButtonGroup'));
      children.push(graphSetRadioButtonGroup);

      // Center graphSetRadioButtonGroup in the negative space to the left of graphNode. We're only adjusting centerX
      // dynamically so that GraphSetsAnimation doesn't cause tiny shifts in y.
      graphSetRadioButtonGroup.centerY = this.graphsNode.centerY;
      this.graphsNode.boundsProperty.link(() => {
        const eyeToggleButtonLeft = this.graphsNode.x + this.graphsNode.getEyeToggleButtonXOffset();
        graphSetRadioButtonGroup.centerX = this.layoutBounds.left + (eyeToggleButtonLeft - this.layoutBounds.left) / 2;
      });
    }
    this.screenViewRootNode = new Node({
      children: children
    });
    this.addChild(this.screenViewRootNode);
  }

  /**
   * Reset all
   */
  reset() {
    this.model.reset();
    this.graphsNode.reset();
  }
  step(dt) {
    this.graphsNode.step(dt);
    super.step(dt);
  }
}
calculusGrapher.register('CalculusGrapherScreenView', CalculusGrapherScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,