// Copyright 2023, University of Colorado Boulder

/**
 * XDragHandleNode is a spherical drag handle for controlling the x coordinate of something's position.
 * It's used by ReferenceLineNode and ScrubberNode for adjusting the x coordinate of those ancillary tools.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../../../kite/js/imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
import ShadedSphereNode from '../../../../scenery-phet/js/ShadedSphereNode.js';
import { DragListener } from '../../../../scenery/js/imports.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
export default class XDragHandleNode extends ShadedSphereNode {
  constructor(xProperty, chartTransform, providedOptions) {
    const options = optionize()({
      // SelfOptions
      radius: CalculusGrapherConstants.SCRUBBER_RADIUS,
      yModel: 0,
      // ShadedSphereNodeOptions
      cursor: 'ew-resize'
    }, providedOptions);

    // If we have instrumented the handle's visibleProperty, we also want to feature it in Studio.
    // See https://github.com/phetsims/calculus-grapher/issues/281#event-8769439973
    if (options.phetioVisiblePropertyInstrumented) {
      options.visiblePropertyOptions = {
        phetioFeatured: true
      };
    }

    // y coordinate position is fixed.
    options.y = chartTransform.modelToViewY(options.yModel);

    // Dilate the pointer areas a bit. See https://github.com/phetsims/calculus-grapher/issues/230
    options.touchArea = Shape.circle(0, 0, options.radius + 5);
    options.mouseArea = Shape.circle(0, 0, options.radius + 2);
    super(options.radius, options);

    // As the handle is dragged, change xProperty.
    this.addInputListener(new DragListener({
      drag: (event, listener) => {
        const xModel = chartTransform.viewToModelX(listener.modelPoint.x);
        xProperty.value = chartTransform.modelXRange.constrainValue(xModel);
      },
      tandem: options.tandem.createTandem('dragListener')
    }));

    // As xProperty changes, translate this Node.
    xProperty.link(x => {
      this.x = chartTransform.modelToViewX(x);
    });
  }

  /**
   * Creates an icon for the drag handle.
   */
  static createIcon(color, radius = CalculusGrapherConstants.SCRUBBER_RADIUS) {
    return new ShadedSphereNode(2 * radius, {
      mainColor: color
    });
  }
}
calculusGrapher.register('XDragHandleNode', XDragHandleNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIlNoYWRlZFNwaGVyZU5vZGUiLCJEcmFnTGlzdGVuZXIiLCJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMiLCJYRHJhZ0hhbmRsZU5vZGUiLCJjb25zdHJ1Y3RvciIsInhQcm9wZXJ0eSIsImNoYXJ0VHJhbnNmb3JtIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInJhZGl1cyIsIlNDUlVCQkVSX1JBRElVUyIsInlNb2RlbCIsImN1cnNvciIsInBoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZCIsInZpc2libGVQcm9wZXJ0eU9wdGlvbnMiLCJwaGV0aW9GZWF0dXJlZCIsInkiLCJtb2RlbFRvVmlld1kiLCJ0b3VjaEFyZWEiLCJjaXJjbGUiLCJtb3VzZUFyZWEiLCJhZGRJbnB1dExpc3RlbmVyIiwiZHJhZyIsImV2ZW50IiwibGlzdGVuZXIiLCJ4TW9kZWwiLCJ2aWV3VG9Nb2RlbFgiLCJtb2RlbFBvaW50IiwieCIsInZhbHVlIiwibW9kZWxYUmFuZ2UiLCJjb25zdHJhaW5WYWx1ZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsImxpbmsiLCJtb2RlbFRvVmlld1giLCJjcmVhdGVJY29uIiwiY29sb3IiLCJtYWluQ29sb3IiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlhEcmFnSGFuZGxlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogWERyYWdIYW5kbGVOb2RlIGlzIGEgc3BoZXJpY2FsIGRyYWcgaGFuZGxlIGZvciBjb250cm9sbGluZyB0aGUgeCBjb29yZGluYXRlIG9mIHNvbWV0aGluZydzIHBvc2l0aW9uLlxyXG4gKiBJdCdzIHVzZWQgYnkgUmVmZXJlbmNlTGluZU5vZGUgYW5kIFNjcnViYmVyTm9kZSBmb3IgYWRqdXN0aW5nIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhvc2UgYW5jaWxsYXJ5IHRvb2xzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IENoYXJ0VHJhbnNmb3JtIGZyb20gJy4uLy4uLy4uLy4uL2JhbWJvby9qcy9DaGFydFRyYW5zZm9ybS5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFNoYWRlZFNwaGVyZU5vZGUsIHsgU2hhZGVkU3BoZXJlTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvU2hhZGVkU3BoZXJlTm9kZS5qcyc7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciwgTm9kZSwgVENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIGZyb20gJy4uL0NhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG5cclxuICAvLyBSYWRpdXMgb2YgdGhlIGhhbmRsZSwgaW4gdmlldyBjb29yZGluYXRlc1xyXG4gIHJhZGl1cz86IG51bWJlcjtcclxuXHJcbiAgLy8geS1jb29yZGluYXRlIG9mIHRoZSBoYW5kbGUsIGluIG1vZGVsIGNvb3JkaW5hdGUgZnJhbWVcclxuICB5TW9kZWw/OiBudW1iZXI7XHJcbn07XHJcblxyXG50eXBlIFhEcmFnSGFuZGxlTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmXHJcbiAgUGlja1JlcXVpcmVkPFNoYWRlZFNwaGVyZU5vZGVPcHRpb25zLCAnbWFpbkNvbG9yJyB8ICd0YW5kZW0nIHwgJ3BoZXRpb1Zpc2libGVQcm9wZXJ0eUluc3RydW1lbnRlZCc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWERyYWdIYW5kbGVOb2RlIGV4dGVuZHMgU2hhZGVkU3BoZXJlTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggeFByb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXI+LCBjaGFydFRyYW5zZm9ybTogQ2hhcnRUcmFuc2Zvcm0sIHByb3ZpZGVkT3B0aW9uczogWERyYWdIYW5kbGVOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFhEcmFnSGFuZGxlTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgcmFkaXVzOiBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuU0NSVUJCRVJfUkFESVVTLFxyXG4gICAgICB5TW9kZWw6IDAsXHJcblxyXG4gICAgICAvLyBTaGFkZWRTcGhlcmVOb2RlT3B0aW9uc1xyXG4gICAgICBjdXJzb3I6ICdldy1yZXNpemUnXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBJZiB3ZSBoYXZlIGluc3RydW1lbnRlZCB0aGUgaGFuZGxlJ3MgdmlzaWJsZVByb3BlcnR5LCB3ZSBhbHNvIHdhbnQgdG8gZmVhdHVyZSBpdCBpbiBTdHVkaW8uXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzI4MSNldmVudC04NzY5NDM5OTczXHJcbiAgICBpZiAoIG9wdGlvbnMucGhldGlvVmlzaWJsZVByb3BlcnR5SW5zdHJ1bWVudGVkICkge1xyXG4gICAgICBvcHRpb25zLnZpc2libGVQcm9wZXJ0eU9wdGlvbnMgPSB7XHJcbiAgICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB5IGNvb3JkaW5hdGUgcG9zaXRpb24gaXMgZml4ZWQuXHJcbiAgICBvcHRpb25zLnkgPSBjaGFydFRyYW5zZm9ybS5tb2RlbFRvVmlld1koIG9wdGlvbnMueU1vZGVsICk7XHJcblxyXG4gICAgLy8gRGlsYXRlIHRoZSBwb2ludGVyIGFyZWFzIGEgYml0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzIzMFxyXG4gICAgb3B0aW9ucy50b3VjaEFyZWEgPSBTaGFwZS5jaXJjbGUoIDAsIDAsIG9wdGlvbnMucmFkaXVzICsgNSApO1xyXG4gICAgb3B0aW9ucy5tb3VzZUFyZWEgPSBTaGFwZS5jaXJjbGUoIDAsIDAsIG9wdGlvbnMucmFkaXVzICsgMiApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zLnJhZGl1cywgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEFzIHRoZSBoYW5kbGUgaXMgZHJhZ2dlZCwgY2hhbmdlIHhQcm9wZXJ0eS5cclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggbmV3IERyYWdMaXN0ZW5lcigge1xyXG4gICAgICBkcmFnOiAoIGV2ZW50LCBsaXN0ZW5lciApID0+IHtcclxuICAgICAgICBjb25zdCB4TW9kZWwgPSBjaGFydFRyYW5zZm9ybS52aWV3VG9Nb2RlbFgoIGxpc3RlbmVyLm1vZGVsUG9pbnQueCApO1xyXG4gICAgICAgIHhQcm9wZXJ0eS52YWx1ZSA9IGNoYXJ0VHJhbnNmb3JtLm1vZGVsWFJhbmdlLmNvbnN0cmFpblZhbHVlKCB4TW9kZWwgKTtcclxuICAgICAgfSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdkcmFnTGlzdGVuZXInIClcclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIEFzIHhQcm9wZXJ0eSBjaGFuZ2VzLCB0cmFuc2xhdGUgdGhpcyBOb2RlLlxyXG4gICAgeFByb3BlcnR5LmxpbmsoIHggPT4ge1xyXG4gICAgICB0aGlzLnggPSBjaGFydFRyYW5zZm9ybS5tb2RlbFRvVmlld1goIHggKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW4gaWNvbiBmb3IgdGhlIGRyYWcgaGFuZGxlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlSWNvbiggY29sb3I6IFRDb2xvciwgcmFkaXVzID0gQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLlNDUlVCQkVSX1JBRElVUyApOiBOb2RlIHtcclxuICAgIHJldHVybiBuZXcgU2hhZGVkU3BoZXJlTm9kZSggMiAqIHJhZGl1cywge1xyXG4gICAgICBtYWluQ29sb3I6IGNvbG9yXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdYRHJhZ0hhbmRsZU5vZGUnLCBYRHJhZ0hhbmRsZU5vZGUgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsU0FBU0EsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBRTdELE9BQU9DLGdCQUFnQixNQUFtQyxpREFBaUQ7QUFDM0csU0FBU0MsWUFBWSxRQUFzQixtQ0FBbUM7QUFDOUUsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyx3QkFBd0IsTUFBTSxnQ0FBZ0M7QUFjckUsZUFBZSxNQUFNQyxlQUFlLFNBQVNKLGdCQUFnQixDQUFDO0VBRXJESyxXQUFXQSxDQUFFQyxTQUEyQixFQUFFQyxjQUE4QixFQUFFQyxlQUF1QyxFQUFHO0lBRXpILE1BQU1DLE9BQU8sR0FBR1YsU0FBUyxDQUErRCxDQUFDLENBQUU7TUFFekY7TUFDQVcsTUFBTSxFQUFFUCx3QkFBd0IsQ0FBQ1EsZUFBZTtNQUNoREMsTUFBTSxFQUFFLENBQUM7TUFFVDtNQUNBQyxNQUFNLEVBQUU7SUFDVixDQUFDLEVBQUVMLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0E7SUFDQSxJQUFLQyxPQUFPLENBQUNLLGlDQUFpQyxFQUFHO01BQy9DTCxPQUFPLENBQUNNLHNCQUFzQixHQUFHO1FBQy9CQyxjQUFjLEVBQUU7TUFDbEIsQ0FBQztJQUNIOztJQUVBO0lBQ0FQLE9BQU8sQ0FBQ1EsQ0FBQyxHQUFHVixjQUFjLENBQUNXLFlBQVksQ0FBRVQsT0FBTyxDQUFDRyxNQUFPLENBQUM7O0lBRXpEO0lBQ0FILE9BQU8sQ0FBQ1UsU0FBUyxHQUFHckIsS0FBSyxDQUFDc0IsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVYLE9BQU8sQ0FBQ0MsTUFBTSxHQUFHLENBQUUsQ0FBQztJQUM1REQsT0FBTyxDQUFDWSxTQUFTLEdBQUd2QixLQUFLLENBQUNzQixNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVgsT0FBTyxDQUFDQyxNQUFNLEdBQUcsQ0FBRSxDQUFDO0lBRTVELEtBQUssQ0FBRUQsT0FBTyxDQUFDQyxNQUFNLEVBQUVELE9BQVEsQ0FBQzs7SUFFaEM7SUFDQSxJQUFJLENBQUNhLGdCQUFnQixDQUFFLElBQUlyQixZQUFZLENBQUU7TUFDdkNzQixJQUFJLEVBQUVBLENBQUVDLEtBQUssRUFBRUMsUUFBUSxLQUFNO1FBQzNCLE1BQU1DLE1BQU0sR0FBR25CLGNBQWMsQ0FBQ29CLFlBQVksQ0FBRUYsUUFBUSxDQUFDRyxVQUFVLENBQUNDLENBQUUsQ0FBQztRQUNuRXZCLFNBQVMsQ0FBQ3dCLEtBQUssR0FBR3ZCLGNBQWMsQ0FBQ3dCLFdBQVcsQ0FBQ0MsY0FBYyxDQUFFTixNQUFPLENBQUM7TUFDdkUsQ0FBQztNQUNETyxNQUFNLEVBQUV4QixPQUFPLENBQUN3QixNQUFNLENBQUNDLFlBQVksQ0FBRSxjQUFlO0lBQ3RELENBQUUsQ0FBRSxDQUFDOztJQUVMO0lBQ0E1QixTQUFTLENBQUM2QixJQUFJLENBQUVOLENBQUMsSUFBSTtNQUNuQixJQUFJLENBQUNBLENBQUMsR0FBR3RCLGNBQWMsQ0FBQzZCLFlBQVksQ0FBRVAsQ0FBRSxDQUFDO0lBQzNDLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE9BQWNRLFVBQVVBLENBQUVDLEtBQWEsRUFBRTVCLE1BQU0sR0FBR1Asd0JBQXdCLENBQUNRLGVBQWUsRUFBUztJQUNqRyxPQUFPLElBQUlYLGdCQUFnQixDQUFFLENBQUMsR0FBR1UsTUFBTSxFQUFFO01BQ3ZDNkIsU0FBUyxFQUFFRDtJQUNiLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXBDLGVBQWUsQ0FBQ3NDLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRXBDLGVBQWdCLENBQUMifQ==