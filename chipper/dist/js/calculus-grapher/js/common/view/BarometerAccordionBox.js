// Copyright 2022-2023, University of Colorado Boulder

/**
 * BarometerAccordionBox is the base class accordion box that shows a vertical axis with a barometer indicator
 * The barometer ticks and labels can toggle between a quantitative or a qualitative layer
 * depending on the state of valuesVisibleProperty
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import calculusGrapher from '../../calculusGrapher.js';
import { Line, Node, RichText, Text } from '../../../../scenery/js/imports.js';
import ChartTransform from '../../../../bamboo/js/ChartTransform.js';
import AxisLine from '../../../../bamboo/js/AxisLine.js';
import TickMarkSet from '../../../../bamboo/js/TickMarkSet.js';
import TickLabelSet from '../../../../bamboo/js/TickLabelSet.js';
import Orientation from '../../../../phet-core/js/Orientation.js';
import Utils from '../../../../dot/js/Utils.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
import CalculusGrapherPreferences from '../model/CalculusGrapherPreferences.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
const BAR_WIDTH = 10;
const NUMBER_OF_TICKS = 5;
const TICK_MARK_EXTENT = 20;
export default class BarometerAccordionBox extends AccordionBox {
  constructor(curvePointProperty, labelStringProperty, ancillaryToolVisibleProperty, predictEnabledProperty, providedOptions) {
    // PhET-iO only Property, for permanently hiding this BarometerAccordionBox.
    // See https://github.com/phetsims/calculus-grapher/issues/239
    const featureVisibleProperty = new BooleanProperty(true, {
      tandem: providedOptions.tandem.createTandem('featureVisibleProperty'),
      phetioFeatured: true,
      phetioDocumentation: 'Setting this to false will permanently hide this accordion box, ' + 'regardless of other simulation settings.'
    });
    const options = optionize()({
      // SelfOptions
      chartTransformOptions: {
        viewHeight: 172
      },
      // AccordionBoxOptions
      stroke: CalculusGrapherColors.panelStrokeProperty,
      fill: CalculusGrapherColors.panelFillProperty,
      resize: true,
      titleAlignX: 'left',
      cornerRadius: CalculusGrapherConstants.CORNER_RADIUS,
      contentXMargin: CalculusGrapherConstants.PANEL_X_MARGIN,
      contentYMargin: 3,
      contentYSpacing: 0,
      buttonXMargin: CalculusGrapherConstants.PANEL_X_MARGIN,
      buttonYMargin: CalculusGrapherConstants.PANEL_Y_MARGIN,
      titleXMargin: CalculusGrapherConstants.PANEL_X_MARGIN,
      titleYMargin: CalculusGrapherConstants.PANEL_Y_MARGIN,
      titleXSpacing: 10,
      // visible if the associate tool is visible and the 'Predict' radio button is not selected
      visibleProperty: new DerivedProperty([featureVisibleProperty, ancillaryToolVisibleProperty, predictEnabledProperty], (featureVisible, ancillaryToolVisible, predictEnabled) => featureVisible && ancillaryToolVisible && !predictEnabled, {
        tandem: providedOptions.tandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO
      })
    }, providedOptions);
    const orientation = Orientation.VERTICAL;
    const chartTransform = new ChartTransform(options.chartTransformOptions);
    options.titleNode = new RichText(labelStringProperty, {
      font: CalculusGrapherConstants.ACCORDION_BOX_FONT,
      maxWidth: 80,
      maxHeight: 40,
      tandem: options.tandem.createTandem('titleText')
    });
    const axisLine = new AxisLine(chartTransform, orientation);

    // Quantitative mode, with numerical tick labels --------------------------------------

    const tickSpacing = Utils.toFixedNumber(options.chartTransformOptions.modelYRange.getLength() / (NUMBER_OF_TICKS - 1), 0);
    const majorTickMarkSet = new TickMarkSet(chartTransform, orientation, tickSpacing, {
      extent: TICK_MARK_EXTENT
    });
    const minorTickMarkSet = new TickMarkSet(chartTransform, orientation, tickSpacing / 4, {
      extent: TICK_MARK_EXTENT / 2,
      stroke: 'gray',
      lineWidth: 0.5
    });
    const tickLabelSet = new TickLabelSet(chartTransform, orientation, tickSpacing, {
      createLabel: value => new Text(value, {
        font: CalculusGrapherConstants.ACCORDION_BOX_VALUE_FONT
        // No PhET-iO instrumentation is desired.
      }),

      extent: TICK_MARK_EXTENT
    });

    // Creates a layer for all the quantitative components, with appropriate visibility
    const quantitativeLayer = new Node({
      children: [tickLabelSet, minorTickMarkSet, majorTickMarkSet],
      visibleProperty: CalculusGrapherPreferences.valuesVisibleProperty
    });

    // Qualitative mode, with plus and minus symbols ---------------------------------

    // Convenience variables for the position of zeros
    const zeroX = chartTransform.modelToViewX(0);
    const zeroY = chartTransform.modelToViewY(0);
    const qualitativeLabels = new Node({
      children: [createLabelText('+', zeroX, 10), createLabelText('0', zeroX, zeroY), createLabelText('-', zeroX, chartTransform.viewHeight - 10)]
    });
    const zeroTickMark = new Line(zeroX - TICK_MARK_EXTENT / 2, zeroY, zeroX + TICK_MARK_EXTENT / 2, zeroY, {
      stroke: 'black',
      lineWidth: 1
    });

    // Creates a layer for all the qualitative components, with appropriate visibility
    const qualitativeLayer = new Node({
      children: [qualitativeLabels, zeroTickMark],
      visibleProperty: DerivedProperty.not(CalculusGrapherPreferences.valuesVisibleProperty)
    });

    // Both modes --------------------------------------------------------

    // The bar is a very wide line
    const barLine = new Line({
      y1: zeroY,
      y2: chartTransform.modelToViewY(curvePointProperty.value.y),
      left: axisLine.right,
      stroke: options.barColorProperty,
      lineWidth: BAR_WIDTH
    });
    const yRange = options.chartTransformOptions.modelYRange;

    // Arrows, used to indicate when the value exceeds the scale of the barometer.
    const arrowHeight = 10;
    const arrowYOffset = 2;
    const arrowNodeOptions = {
      fill: options.barColorProperty,
      stroke: null,
      tailWidth: BAR_WIDTH,
      headHeight: arrowHeight,
      // no tail, see https://github.com/phetsims/calculus-grapher/issues/300
      headWidth: 2 * BAR_WIDTH,
      centerX: barLine.centerX
    };
    const positiveScaleExceededIndicator = new ArrowNode(0, 0, 0, -arrowHeight, combineOptions({
      bottom: axisLine.top - arrowYOffset,
      visibleProperty: new DerivedProperty([curvePointProperty], curvePoint => curvePoint.y > yRange.max)
    }, arrowNodeOptions));
    const negativeScaleExceededIndicator = new ArrowNode(0, 0, 0, arrowHeight, combineOptions({
      top: axisLine.bottom + arrowYOffset,
      visibleProperty: new DerivedProperty([curvePointProperty], curvePoint => curvePoint.y < yRange.min)
    }, arrowNodeOptions));
    const barometerNode = new Node({
      children: [axisLine, quantitativeLayer, qualitativeLayer, barLine, positiveScaleExceededIndicator, negativeScaleExceededIndicator]
    });
    super(barometerNode, options);

    // The height of the bar is clamped to prevent the bar from exceeding the scale of the barometer.
    curvePointProperty.link(curvePoint => {
      const clampedValue = Utils.clamp(curvePoint.y, yRange.min, yRange.max);
      barLine.y2 = chartTransform.modelToViewY(clampedValue);
    });
  }
}
function createLabelText(string, zeroX, yPosition) {
  return new Text(string, {
    font: CalculusGrapherConstants.ACCORDION_BOX_FONT,
    maxWidth: 50,
    // determined empirically
    right: zeroX - TICK_MARK_EXTENT / 2 - 5,
    centerY: yPosition
    // No PhET-iO instrumentation is desired.
  });
}

calculusGrapher.register('BarometerAccordionBox', BarometerAccordionBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkFjY29yZGlvbkJveCIsImNhbGN1bHVzR3JhcGhlciIsIkxpbmUiLCJOb2RlIiwiUmljaFRleHQiLCJUZXh0IiwiQ2hhcnRUcmFuc2Zvcm0iLCJBeGlzTGluZSIsIlRpY2tNYXJrU2V0IiwiVGlja0xhYmVsU2V0IiwiT3JpZW50YXRpb24iLCJVdGlscyIsIkNhbGN1bHVzR3JhcGhlckNvbG9ycyIsIkNhbGN1bHVzR3JhcGhlckNvbnN0YW50cyIsIkNhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzIiwiRGVyaXZlZFByb3BlcnR5IiwiQm9vbGVhbklPIiwiQm9vbGVhblByb3BlcnR5IiwiQXJyb3dOb2RlIiwiQkFSX1dJRFRIIiwiTlVNQkVSX09GX1RJQ0tTIiwiVElDS19NQVJLX0VYVEVOVCIsIkJhcm9tZXRlckFjY29yZGlvbkJveCIsImNvbnN0cnVjdG9yIiwiY3VydmVQb2ludFByb3BlcnR5IiwibGFiZWxTdHJpbmdQcm9wZXJ0eSIsImFuY2lsbGFyeVRvb2xWaXNpYmxlUHJvcGVydHkiLCJwcmVkaWN0RW5hYmxlZFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwiZmVhdHVyZVZpc2libGVQcm9wZXJ0eSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0ZlYXR1cmVkIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsIm9wdGlvbnMiLCJjaGFydFRyYW5zZm9ybU9wdGlvbnMiLCJ2aWV3SGVpZ2h0Iiwic3Ryb2tlIiwicGFuZWxTdHJva2VQcm9wZXJ0eSIsImZpbGwiLCJwYW5lbEZpbGxQcm9wZXJ0eSIsInJlc2l6ZSIsInRpdGxlQWxpZ25YIiwiY29ybmVyUmFkaXVzIiwiQ09STkVSX1JBRElVUyIsImNvbnRlbnRYTWFyZ2luIiwiUEFORUxfWF9NQVJHSU4iLCJjb250ZW50WU1hcmdpbiIsImNvbnRlbnRZU3BhY2luZyIsImJ1dHRvblhNYXJnaW4iLCJidXR0b25ZTWFyZ2luIiwiUEFORUxfWV9NQVJHSU4iLCJ0aXRsZVhNYXJnaW4iLCJ0aXRsZVlNYXJnaW4iLCJ0aXRsZVhTcGFjaW5nIiwidmlzaWJsZVByb3BlcnR5IiwiZmVhdHVyZVZpc2libGUiLCJhbmNpbGxhcnlUb29sVmlzaWJsZSIsInByZWRpY3RFbmFibGVkIiwicGhldGlvVmFsdWVUeXBlIiwib3JpZW50YXRpb24iLCJWRVJUSUNBTCIsImNoYXJ0VHJhbnNmb3JtIiwidGl0bGVOb2RlIiwiZm9udCIsIkFDQ09SRElPTl9CT1hfRk9OVCIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwiYXhpc0xpbmUiLCJ0aWNrU3BhY2luZyIsInRvRml4ZWROdW1iZXIiLCJtb2RlbFlSYW5nZSIsImdldExlbmd0aCIsIm1ham9yVGlja01hcmtTZXQiLCJleHRlbnQiLCJtaW5vclRpY2tNYXJrU2V0IiwibGluZVdpZHRoIiwidGlja0xhYmVsU2V0IiwiY3JlYXRlTGFiZWwiLCJ2YWx1ZSIsIkFDQ09SRElPTl9CT1hfVkFMVUVfRk9OVCIsInF1YW50aXRhdGl2ZUxheWVyIiwiY2hpbGRyZW4iLCJ2YWx1ZXNWaXNpYmxlUHJvcGVydHkiLCJ6ZXJvWCIsIm1vZGVsVG9WaWV3WCIsInplcm9ZIiwibW9kZWxUb1ZpZXdZIiwicXVhbGl0YXRpdmVMYWJlbHMiLCJjcmVhdGVMYWJlbFRleHQiLCJ6ZXJvVGlja01hcmsiLCJxdWFsaXRhdGl2ZUxheWVyIiwibm90IiwiYmFyTGluZSIsInkxIiwieTIiLCJ5IiwibGVmdCIsInJpZ2h0IiwiYmFyQ29sb3JQcm9wZXJ0eSIsInlSYW5nZSIsImFycm93SGVpZ2h0IiwiYXJyb3dZT2Zmc2V0IiwiYXJyb3dOb2RlT3B0aW9ucyIsInRhaWxXaWR0aCIsImhlYWRIZWlnaHQiLCJoZWFkV2lkdGgiLCJjZW50ZXJYIiwicG9zaXRpdmVTY2FsZUV4Y2VlZGVkSW5kaWNhdG9yIiwiYm90dG9tIiwidG9wIiwiY3VydmVQb2ludCIsIm1heCIsIm5lZ2F0aXZlU2NhbGVFeGNlZWRlZEluZGljYXRvciIsIm1pbiIsImJhcm9tZXRlck5vZGUiLCJsaW5rIiwiY2xhbXBlZFZhbHVlIiwiY2xhbXAiLCJzdHJpbmciLCJ5UG9zaXRpb24iLCJjZW50ZXJZIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCYXJvbWV0ZXJBY2NvcmRpb25Cb3gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmFyb21ldGVyQWNjb3JkaW9uQm94IGlzIHRoZSBiYXNlIGNsYXNzIGFjY29yZGlvbiBib3ggdGhhdCBzaG93cyBhIHZlcnRpY2FsIGF4aXMgd2l0aCBhIGJhcm9tZXRlciBpbmRpY2F0b3JcclxuICogVGhlIGJhcm9tZXRlciB0aWNrcyBhbmQgbGFiZWxzIGNhbiB0b2dnbGUgYmV0d2VlbiBhIHF1YW50aXRhdGl2ZSBvciBhIHF1YWxpdGF0aXZlIGxheWVyXHJcbiAqIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgdmFsdWVzVmlzaWJsZVByb3BlcnR5XHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEFjY29yZGlvbkJveCwgeyBBY2NvcmRpb25Cb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FjY29yZGlvbkJveC5qcyc7XHJcbmltcG9ydCBjYWxjdWx1c0dyYXBoZXIgZnJvbSAnLi4vLi4vY2FsY3VsdXNHcmFwaGVyLmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIExpbmUsIE5vZGUsIFJpY2hUZXh0LCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQ2hhcnRUcmFuc2Zvcm0sIHsgQ2hhcnRUcmFuc2Zvcm1PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vYmFtYm9vL2pzL0NoYXJ0VHJhbnNmb3JtLmpzJztcclxuaW1wb3J0IEF4aXNMaW5lIGZyb20gJy4uLy4uLy4uLy4uL2JhbWJvby9qcy9BeGlzTGluZS5qcyc7XHJcbmltcG9ydCBUaWNrTWFya1NldCBmcm9tICcuLi8uLi8uLi8uLi9iYW1ib28vanMvVGlja01hcmtTZXQuanMnO1xyXG5pbXBvcnQgVGlja0xhYmVsU2V0IGZyb20gJy4uLy4uLy4uLy4uL2JhbWJvby9qcy9UaWNrTGFiZWxTZXQuanMnO1xyXG5pbXBvcnQgT3JpZW50YXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL09yaWVudGF0aW9uLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJDb2xvcnMgZnJvbSAnLi4vQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIGZyb20gJy4uL0NhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJQcmVmZXJlbmNlcyBmcm9tICcuLi9tb2RlbC9DYWxjdWx1c0dyYXBoZXJQcmVmZXJlbmNlcy5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm9vbGVhbklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9Cb29sZWFuSU8uanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEN1cnZlUG9pbnQgZnJvbSAnLi4vbW9kZWwvQ3VydmVQb2ludC5qcyc7XHJcbmltcG9ydCBBcnJvd05vZGUsIHsgQXJyb3dOb2RlT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5cclxuY29uc3QgQkFSX1dJRFRIID0gMTA7XHJcbmNvbnN0IE5VTUJFUl9PRl9USUNLUyA9IDU7XHJcbmNvbnN0IFRJQ0tfTUFSS19FWFRFTlQgPSAyMDtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIENvbG9yIG9mIHRoZSB2ZXJ0aWNhbCBiYXIgaW4gdGhlIGJhcm9tZXRlclxyXG4gIGJhckNvbG9yUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PENvbG9yPjtcclxuXHJcbiAgLy8gYmFtYm9vIENoYXJ0VHJhbnNmb3JtXHJcbiAgY2hhcnRUcmFuc2Zvcm1PcHRpb25zPzogQ2hhcnRUcmFuc2Zvcm1PcHRpb25zO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQmFyb21ldGVyQWNjb3JkaW9uQm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxBY2NvcmRpb25Cb3hPcHRpb25zLCAndGl0bGVOb2RlJz4gJlxyXG4gIFBpY2tSZXF1aXJlZDxBY2NvcmRpb25Cb3hPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXJvbWV0ZXJBY2NvcmRpb25Cb3ggZXh0ZW5kcyBBY2NvcmRpb25Cb3gge1xyXG5cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoIGN1cnZlUG9pbnRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Q3VydmVQb2ludD4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFN0cmluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgYW5jaWxsYXJ5VG9vbFZpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWN0RW5hYmxlZFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9uczogQmFyb21ldGVyQWNjb3JkaW9uQm94T3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBQaEVULWlPIG9ubHkgUHJvcGVydHksIGZvciBwZXJtYW5lbnRseSBoaWRpbmcgdGhpcyBCYXJvbWV0ZXJBY2NvcmRpb25Cb3guXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzIzOVxyXG4gICAgY29uc3QgZmVhdHVyZVZpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUsIHtcclxuICAgICAgdGFuZGVtOiBwcm92aWRlZE9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2ZlYXR1cmVWaXNpYmxlUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnU2V0dGluZyB0aGlzIHRvIGZhbHNlIHdpbGwgcGVybWFuZW50bHkgaGlkZSB0aGlzIGFjY29yZGlvbiBib3gsICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAncmVnYXJkbGVzcyBvZiBvdGhlciBzaW11bGF0aW9uIHNldHRpbmdzLidcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJhcm9tZXRlckFjY29yZGlvbkJveE9wdGlvbnMsIFNlbGZPcHRpb25zLCBBY2NvcmRpb25Cb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBjaGFydFRyYW5zZm9ybU9wdGlvbnM6IHtcclxuICAgICAgICB2aWV3SGVpZ2h0OiAxNzJcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIEFjY29yZGlvbkJveE9wdGlvbnNcclxuICAgICAgc3Ryb2tlOiBDYWxjdWx1c0dyYXBoZXJDb2xvcnMucGFuZWxTdHJva2VQcm9wZXJ0eSxcclxuICAgICAgZmlsbDogQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLnBhbmVsRmlsbFByb3BlcnR5LFxyXG4gICAgICByZXNpemU6IHRydWUsXHJcbiAgICAgIHRpdGxlQWxpZ25YOiAnbGVmdCcsXHJcbiAgICAgIGNvcm5lclJhZGl1czogQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLkNPUk5FUl9SQURJVVMsXHJcbiAgICAgIGNvbnRlbnRYTWFyZ2luOiBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuUEFORUxfWF9NQVJHSU4sXHJcbiAgICAgIGNvbnRlbnRZTWFyZ2luOiAzLFxyXG4gICAgICBjb250ZW50WVNwYWNpbmc6IDAsXHJcbiAgICAgIGJ1dHRvblhNYXJnaW46IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5QQU5FTF9YX01BUkdJTixcclxuICAgICAgYnV0dG9uWU1hcmdpbjogQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLlBBTkVMX1lfTUFSR0lOLFxyXG4gICAgICB0aXRsZVhNYXJnaW46IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5QQU5FTF9YX01BUkdJTixcclxuICAgICAgdGl0bGVZTWFyZ2luOiBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuUEFORUxfWV9NQVJHSU4sXHJcbiAgICAgIHRpdGxlWFNwYWNpbmc6IDEwLFxyXG5cclxuICAgICAgLy8gdmlzaWJsZSBpZiB0aGUgYXNzb2NpYXRlIHRvb2wgaXMgdmlzaWJsZSBhbmQgdGhlICdQcmVkaWN0JyByYWRpbyBidXR0b24gaXMgbm90IHNlbGVjdGVkXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgICBbIGZlYXR1cmVWaXNpYmxlUHJvcGVydHksIGFuY2lsbGFyeVRvb2xWaXNpYmxlUHJvcGVydHksIHByZWRpY3RFbmFibGVkUHJvcGVydHkgXSxcclxuICAgICAgICAoIGZlYXR1cmVWaXNpYmxlLCBhbmNpbGxhcnlUb29sVmlzaWJsZSwgcHJlZGljdEVuYWJsZWQgKSA9PiAoIGZlYXR1cmVWaXNpYmxlICYmIGFuY2lsbGFyeVRvb2xWaXNpYmxlICYmICFwcmVkaWN0RW5hYmxlZCApLCB7XHJcbiAgICAgICAgICB0YW5kZW06IHByb3ZpZGVkT3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAndmlzaWJsZVByb3BlcnR5JyApLFxyXG4gICAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBCb29sZWFuSU9cclxuICAgICAgICB9IClcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IG9yaWVudGF0aW9uID0gT3JpZW50YXRpb24uVkVSVElDQUw7XHJcblxyXG4gICAgY29uc3QgY2hhcnRUcmFuc2Zvcm0gPSBuZXcgQ2hhcnRUcmFuc2Zvcm0oIG9wdGlvbnMuY2hhcnRUcmFuc2Zvcm1PcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucy50aXRsZU5vZGUgPSBuZXcgUmljaFRleHQoIGxhYmVsU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLkFDQ09SRElPTl9CT1hfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDgwLFxyXG4gICAgICBtYXhIZWlnaHQ6IDQwLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RpdGxlVGV4dCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGF4aXNMaW5lID0gbmV3IEF4aXNMaW5lKCBjaGFydFRyYW5zZm9ybSwgb3JpZW50YXRpb24gKTtcclxuXHJcbiAgICAvLyBRdWFudGl0YXRpdmUgbW9kZSwgd2l0aCBudW1lcmljYWwgdGljayBsYWJlbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBjb25zdCB0aWNrU3BhY2luZyA9IFV0aWxzLnRvRml4ZWROdW1iZXIoXHJcbiAgICAgIG9wdGlvbnMuY2hhcnRUcmFuc2Zvcm1PcHRpb25zLm1vZGVsWVJhbmdlIS5nZXRMZW5ndGgoKSAvICggTlVNQkVSX09GX1RJQ0tTIC0gMSApLCAwICk7XHJcblxyXG4gICAgY29uc3QgbWFqb3JUaWNrTWFya1NldCA9IG5ldyBUaWNrTWFya1NldCggY2hhcnRUcmFuc2Zvcm0sIG9yaWVudGF0aW9uLCB0aWNrU3BhY2luZywge1xyXG4gICAgICBleHRlbnQ6IFRJQ0tfTUFSS19FWFRFTlRcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBtaW5vclRpY2tNYXJrU2V0ID0gbmV3IFRpY2tNYXJrU2V0KCBjaGFydFRyYW5zZm9ybSwgb3JpZW50YXRpb24sIHRpY2tTcGFjaW5nIC8gNCwge1xyXG4gICAgICBleHRlbnQ6IFRJQ0tfTUFSS19FWFRFTlQgLyAyLFxyXG4gICAgICBzdHJva2U6ICdncmF5JyxcclxuICAgICAgbGluZVdpZHRoOiAwLjVcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB0aWNrTGFiZWxTZXQgPSBuZXcgVGlja0xhYmVsU2V0KCBjaGFydFRyYW5zZm9ybSwgb3JpZW50YXRpb24sIHRpY2tTcGFjaW5nLCB7XHJcbiAgICAgIGNyZWF0ZUxhYmVsOiB2YWx1ZSA9PiBuZXcgVGV4dCggdmFsdWUsIHtcclxuICAgICAgICBmb250OiBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuQUNDT1JESU9OX0JPWF9WQUxVRV9GT05UXHJcbiAgICAgICAgLy8gTm8gUGhFVC1pTyBpbnN0cnVtZW50YXRpb24gaXMgZGVzaXJlZC5cclxuICAgICAgfSApLFxyXG4gICAgICBleHRlbnQ6IFRJQ0tfTUFSS19FWFRFTlRcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBDcmVhdGVzIGEgbGF5ZXIgZm9yIGFsbCB0aGUgcXVhbnRpdGF0aXZlIGNvbXBvbmVudHMsIHdpdGggYXBwcm9wcmlhdGUgdmlzaWJpbGl0eVxyXG4gICAgY29uc3QgcXVhbnRpdGF0aXZlTGF5ZXIgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyB0aWNrTGFiZWxTZXQsIG1pbm9yVGlja01hcmtTZXQsIG1ham9yVGlja01hcmtTZXQgXSxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBDYWxjdWx1c0dyYXBoZXJQcmVmZXJlbmNlcy52YWx1ZXNWaXNpYmxlUHJvcGVydHlcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBRdWFsaXRhdGl2ZSBtb2RlLCB3aXRoIHBsdXMgYW5kIG1pbnVzIHN5bWJvbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLy8gQ29udmVuaWVuY2UgdmFyaWFibGVzIGZvciB0aGUgcG9zaXRpb24gb2YgemVyb3NcclxuICAgIGNvbnN0IHplcm9YID0gY2hhcnRUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdYKCAwICk7XHJcbiAgICBjb25zdCB6ZXJvWSA9IGNoYXJ0VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggMCApO1xyXG5cclxuICAgIGNvbnN0IHF1YWxpdGF0aXZlTGFiZWxzID0gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBjcmVhdGVMYWJlbFRleHQoICcrJywgemVyb1gsIDEwICksXHJcbiAgICAgICAgY3JlYXRlTGFiZWxUZXh0KCAnMCcsIHplcm9YLCB6ZXJvWSApLFxyXG4gICAgICAgIGNyZWF0ZUxhYmVsVGV4dCggJy0nLCB6ZXJvWCwgY2hhcnRUcmFuc2Zvcm0udmlld0hlaWdodCAtIDEwIClcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHplcm9UaWNrTWFyayA9IG5ldyBMaW5lKCB6ZXJvWCAtIFRJQ0tfTUFSS19FWFRFTlQgLyAyLCB6ZXJvWSwgemVyb1ggKyBUSUNLX01BUktfRVhURU5UIC8gMiwgemVyb1ksIHtcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDFcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBDcmVhdGVzIGEgbGF5ZXIgZm9yIGFsbCB0aGUgcXVhbGl0YXRpdmUgY29tcG9uZW50cywgd2l0aCBhcHByb3ByaWF0ZSB2aXNpYmlsaXR5XHJcbiAgICBjb25zdCBxdWFsaXRhdGl2ZUxheWVyID0gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgcXVhbGl0YXRpdmVMYWJlbHMsIHplcm9UaWNrTWFyayBdLFxyXG4gICAgICB2aXNpYmxlUHJvcGVydHk6IERlcml2ZWRQcm9wZXJ0eS5ub3QoIENhbGN1bHVzR3JhcGhlclByZWZlcmVuY2VzLnZhbHVlc1Zpc2libGVQcm9wZXJ0eSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQm90aCBtb2RlcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8vIFRoZSBiYXIgaXMgYSB2ZXJ5IHdpZGUgbGluZVxyXG4gICAgY29uc3QgYmFyTGluZSA9IG5ldyBMaW5lKCB7XHJcbiAgICAgIHkxOiB6ZXJvWSxcclxuICAgICAgeTI6IGNoYXJ0VHJhbnNmb3JtLm1vZGVsVG9WaWV3WSggY3VydmVQb2ludFByb3BlcnR5LnZhbHVlLnkgKSxcclxuICAgICAgbGVmdDogYXhpc0xpbmUucmlnaHQsXHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5iYXJDb2xvclByb3BlcnR5LFxyXG4gICAgICBsaW5lV2lkdGg6IEJBUl9XSURUSFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHlSYW5nZSA9IG9wdGlvbnMuY2hhcnRUcmFuc2Zvcm1PcHRpb25zLm1vZGVsWVJhbmdlITtcclxuXHJcbiAgICAvLyBBcnJvd3MsIHVzZWQgdG8gaW5kaWNhdGUgd2hlbiB0aGUgdmFsdWUgZXhjZWVkcyB0aGUgc2NhbGUgb2YgdGhlIGJhcm9tZXRlci5cclxuICAgIGNvbnN0IGFycm93SGVpZ2h0ID0gMTA7XHJcbiAgICBjb25zdCBhcnJvd1lPZmZzZXQgPSAyO1xyXG4gICAgY29uc3QgYXJyb3dOb2RlT3B0aW9ucyA9IHtcclxuICAgICAgZmlsbDogb3B0aW9ucy5iYXJDb2xvclByb3BlcnR5LFxyXG4gICAgICBzdHJva2U6IG51bGwsXHJcbiAgICAgIHRhaWxXaWR0aDogQkFSX1dJRFRILFxyXG4gICAgICBoZWFkSGVpZ2h0OiBhcnJvd0hlaWdodCwgLy8gbm8gdGFpbCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jYWxjdWx1cy1ncmFwaGVyL2lzc3Vlcy8zMDBcclxuICAgICAgaGVhZFdpZHRoOiAyICogQkFSX1dJRFRILFxyXG4gICAgICBjZW50ZXJYOiBiYXJMaW5lLmNlbnRlclhcclxuICAgIH07XHJcbiAgICBjb25zdCBwb3NpdGl2ZVNjYWxlRXhjZWVkZWRJbmRpY2F0b3IgPSBuZXcgQXJyb3dOb2RlKCAwLCAwLCAwLCAtYXJyb3dIZWlnaHQsXHJcbiAgICAgIGNvbWJpbmVPcHRpb25zPEFycm93Tm9kZU9wdGlvbnM+KCB7XHJcbiAgICAgICAgYm90dG9tOiBheGlzTGluZS50b3AgLSBhcnJvd1lPZmZzZXQsXHJcbiAgICAgICAgdmlzaWJsZVByb3BlcnR5OiBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIGN1cnZlUG9pbnRQcm9wZXJ0eSBdLCBjdXJ2ZVBvaW50ID0+IGN1cnZlUG9pbnQueSA+IHlSYW5nZS5tYXggKVxyXG4gICAgICB9LCBhcnJvd05vZGVPcHRpb25zICkgKTtcclxuICAgIGNvbnN0IG5lZ2F0aXZlU2NhbGVFeGNlZWRlZEluZGljYXRvciA9IG5ldyBBcnJvd05vZGUoIDAsIDAsIDAsIGFycm93SGVpZ2h0LFxyXG4gICAgICBjb21iaW5lT3B0aW9uczxBcnJvd05vZGVPcHRpb25zPigge1xyXG4gICAgICAgIHRvcDogYXhpc0xpbmUuYm90dG9tICsgYXJyb3dZT2Zmc2V0LFxyXG4gICAgICAgIHZpc2libGVQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBjdXJ2ZVBvaW50UHJvcGVydHkgXSwgY3VydmVQb2ludCA9PiBjdXJ2ZVBvaW50LnkgPCB5UmFuZ2UubWluIClcclxuICAgICAgfSwgYXJyb3dOb2RlT3B0aW9ucyApICk7XHJcblxyXG4gICAgY29uc3QgYmFyb21ldGVyTm9kZSA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgYXhpc0xpbmUsIHF1YW50aXRhdGl2ZUxheWVyLCBxdWFsaXRhdGl2ZUxheWVyLFxyXG4gICAgICAgIGJhckxpbmUsIHBvc2l0aXZlU2NhbGVFeGNlZWRlZEluZGljYXRvciwgbmVnYXRpdmVTY2FsZUV4Y2VlZGVkSW5kaWNhdG9yXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggYmFyb21ldGVyTm9kZSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFRoZSBoZWlnaHQgb2YgdGhlIGJhciBpcyBjbGFtcGVkIHRvIHByZXZlbnQgdGhlIGJhciBmcm9tIGV4Y2VlZGluZyB0aGUgc2NhbGUgb2YgdGhlIGJhcm9tZXRlci5cclxuICAgIGN1cnZlUG9pbnRQcm9wZXJ0eS5saW5rKCBjdXJ2ZVBvaW50ID0+IHtcclxuICAgICAgY29uc3QgY2xhbXBlZFZhbHVlID0gVXRpbHMuY2xhbXAoIGN1cnZlUG9pbnQueSwgeVJhbmdlLm1pbiwgeVJhbmdlLm1heCApO1xyXG4gICAgICBiYXJMaW5lLnkyID0gY2hhcnRUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdZKCBjbGFtcGVkVmFsdWUgKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUxhYmVsVGV4dCggc3RyaW5nOiBzdHJpbmcsIHplcm9YOiBudW1iZXIsIHlQb3NpdGlvbjogbnVtYmVyICk6IE5vZGUge1xyXG4gIHJldHVybiBuZXcgVGV4dCggc3RyaW5nLCB7XHJcbiAgICBmb250OiBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuQUNDT1JESU9OX0JPWF9GT05ULFxyXG4gICAgbWF4V2lkdGg6IDUwLCAvLyBkZXRlcm1pbmVkIGVtcGlyaWNhbGx5XHJcbiAgICByaWdodDogemVyb1ggLSAoIFRJQ0tfTUFSS19FWFRFTlQgLyAyICkgLSA1LFxyXG4gICAgY2VudGVyWTogeVBvc2l0aW9uXHJcbiAgICAvLyBObyBQaEVULWlPIGluc3RydW1lbnRhdGlvbiBpcyBkZXNpcmVkLlxyXG4gIH0gKTtcclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnQmFyb21ldGVyQWNjb3JkaW9uQm94JywgQmFyb21ldGVyQWNjb3JkaW9uQm94ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxJQUFJQyxjQUFjLFFBQVEsdUNBQXVDO0FBQ2pGLE9BQU9DLFlBQVksTUFBK0Isb0NBQW9DO0FBQ3RGLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFDdEQsU0FBZ0JDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFFckYsT0FBT0MsY0FBYyxNQUFpQyx5Q0FBeUM7QUFDL0YsT0FBT0MsUUFBUSxNQUFNLG1DQUFtQztBQUN4RCxPQUFPQyxXQUFXLE1BQU0sc0NBQXNDO0FBQzlELE9BQU9DLFlBQVksTUFBTSx1Q0FBdUM7QUFDaEUsT0FBT0MsV0FBVyxNQUFNLHlDQUF5QztBQUNqRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUUvRCxPQUFPQyx3QkFBd0IsTUFBTSxnQ0FBZ0M7QUFDckUsT0FBT0MsMEJBQTBCLE1BQU0sd0NBQXdDO0FBQy9FLE9B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