// Copyright 2023, University of Colorado Boulder

/**
 * ReferenceLineCheckbox is the checkbox labeled 'Reference Line', for making the reference line scrubber visible.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HBox, RichText } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherStrings from '../../CalculusGrapherStrings.js';
import CalculusGrapherConstants from '../../common/CalculusGrapherConstants.js';
import ReferenceLineNode from './ReferenceLineNode.js';
import CalculusGrapherCheckboxGroup from './CalculusGrapherCheckboxGroup.js';
export default class ReferenceLineCheckbox extends Checkbox {
  constructor(scrubberVisibleProperty, tandem) {
    const icon = ReferenceLineNode.createIcon();
    const text = new RichText(CalculusGrapherStrings.referenceLineStringProperty, {
      font: CalculusGrapherConstants.CONTROL_FONT,
      maxWidth: CalculusGrapherCheckboxGroup.RICH_TEXT_MAX_WIDTH,
      maxHeight: CalculusGrapherCheckboxGroup.RICH_TEXT_MAX_HEIGHT,
      tandem: tandem.createTandem('text')
    });
    const box = new HBox({
      children: [icon, text],
      spacing: 8
    });
    super(scrubberVisibleProperty, box, combineOptions({}, CalculusGrapherConstants.CHECKBOX_OPTIONS, {
      tandem: tandem
    }));
  }
}
calculusGrapher.register('ReferenceLineCheckbox', ReferenceLineCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21iaW5lT3B0aW9ucyIsIkhCb3giLCJSaWNoVGV4dCIsIkNoZWNrYm94IiwiY2FsY3VsdXNHcmFwaGVyIiwiQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncyIsIkNhbGN1bHVzR3JhcGhlckNvbnN0YW50cyIsIlJlZmVyZW5jZUxpbmVOb2RlIiwiQ2FsY3VsdXNHcmFwaGVyQ2hlY2tib3hHcm91cCIsIlJlZmVyZW5jZUxpbmVDaGVja2JveCIsImNvbnN0cnVjdG9yIiwic2NydWJiZXJWaXNpYmxlUHJvcGVydHkiLCJ0YW5kZW0iLCJpY29uIiwiY3JlYXRlSWNvbiIsInRleHQiLCJyZWZlcmVuY2VMaW5lU3RyaW5nUHJvcGVydHkiLCJmb250IiwiQ09OVFJPTF9GT05UIiwibWF4V2lkdGgiLCJSSUNIX1RFWFRfTUFYX1dJRFRIIiwibWF4SGVpZ2h0IiwiUklDSF9URVhUX01BWF9IRUlHSFQiLCJjcmVhdGVUYW5kZW0iLCJib3giLCJjaGlsZHJlbiIsInNwYWNpbmciLCJDSEVDS0JPWF9PUFRJT05TIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWZlcmVuY2VMaW5lQ2hlY2tib3gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJlZmVyZW5jZUxpbmVDaGVja2JveCBpcyB0aGUgY2hlY2tib3ggbGFiZWxlZCAnUmVmZXJlbmNlIExpbmUnLCBmb3IgbWFraW5nIHRoZSByZWZlcmVuY2UgbGluZSBzY3J1YmJlciB2aXNpYmxlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgSEJveCwgUmljaFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQ2hlY2tib3gsIHsgQ2hlY2tib3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0NoZWNrYm94LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncyBmcm9tICcuLi8uLi9DYWxjdWx1c0dyYXBoZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUxpbmVOb2RlIGZyb20gJy4vUmVmZXJlbmNlTGluZU5vZGUuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyQ2hlY2tib3hHcm91cCBmcm9tICcuL0NhbGN1bHVzR3JhcGhlckNoZWNrYm94R3JvdXAuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlTGluZUNoZWNrYm94IGV4dGVuZHMgQ2hlY2tib3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNjcnViYmVyVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgaWNvbiA9IFJlZmVyZW5jZUxpbmVOb2RlLmNyZWF0ZUljb24oKTtcclxuXHJcbiAgICBjb25zdCB0ZXh0ID0gbmV3IFJpY2hUZXh0KCBDYWxjdWx1c0dyYXBoZXJTdHJpbmdzLnJlZmVyZW5jZUxpbmVTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuQ09OVFJPTF9GT05ULFxyXG4gICAgICBtYXhXaWR0aDogQ2FsY3VsdXNHcmFwaGVyQ2hlY2tib3hHcm91cC5SSUNIX1RFWFRfTUFYX1dJRFRILFxyXG4gICAgICBtYXhIZWlnaHQ6IENhbGN1bHVzR3JhcGhlckNoZWNrYm94R3JvdXAuUklDSF9URVhUX01BWF9IRUlHSFQsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RleHQnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBib3ggPSBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogWyBpY29uLCB0ZXh0IF0sXHJcbiAgICAgIHNwYWNpbmc6IDhcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggc2NydWJiZXJWaXNpYmxlUHJvcGVydHksIGJveCwgY29tYmluZU9wdGlvbnM8Q2hlY2tib3hPcHRpb25zPihcclxuICAgICAge30sIENhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5DSEVDS0JPWF9PUFRJT05TLCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgICAgfSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdSZWZlcmVuY2VMaW5lQ2hlY2tib3gnLCBSZWZlcmVuY2VMaW5lQ2hlY2tib3ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsU0FBU0EsY0FBYyxRQUFRLHVDQUF1QztBQUN0RSxTQUFTQyxJQUFJLEVBQUVDLFFBQVEsUUFBUSxtQ0FBbUM7QUFDbEUsT0FBT0MsUUFBUSxNQUEyQixnQ0FBZ0M7QUFFMUUsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFDcEUsT0FBT0Msd0JBQXdCLE1BQU0sMENBQTBDO0FBQy9FLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyw0QkFBNEIsTUFBTSxtQ0FBbUM7QUFFNUUsZUFBZSxNQUFNQyxxQkFBcUIsU0FBU04sUUFBUSxDQUFDO0VBRW5ETyxXQUFXQSxDQUFFQyx1QkFBMEMsRUFBRUMsTUFBYyxFQUFHO0lBRS9FLE1BQU1DLElBQUksR0FBR04saUJBQWlCLENBQUNPLFVBQVUsQ0FBQyxDQUFDO0lBRTNDLE1BQU1DLElBQUksR0FBRyxJQUFJYixRQUFRLENBQUVHLHNCQUFzQixDQUFDVywyQkFBMkIsRUFBRTtNQUM3RUMsSUFBSSxFQUFFWCx3QkFBd0IsQ0FBQ1ksWUFBWTtNQUMzQ0MsUUFBUSxFQUFFWCw0QkFBNEIsQ0FBQ1ksbUJBQW1CO01BQzFEQyxTQUFTLEVBQUViLDRCQUE0QixDQUFDYyxvQkFBb0I7TUFDNURWLE1BQU0sRUFBRUEsTUFBTSxDQUFDVyxZQUFZLENBQUUsTUFBTztJQUN0QyxDQUFFLENBQUM7SUFFSCxNQUFNQyxHQUFHLEdBQUcsSUFBSXZCLElBQUksQ0FBRTtNQUNwQndCLFFBQVEsRUFBRSxDQUFFWixJQUFJLEVBQUVFLElBQUksQ0FBRTtNQUN4QlcsT0FBTyxFQUFFO0lBQ1gsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFZix1QkFBdUIsRUFBRWEsR0FBRyxFQUFFeEIsY0FBYyxDQUNqRCxDQUFDLENBQUMsRUFBRU0sd0JBQXdCLENBQUNxQixnQkFBZ0IsRUFBRTtNQUM3Q2YsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBRSxDQUFDO0VBQ1Q7QUFDRjtBQUVBUixlQUFlLENBQUN3QixRQUFRLENBQUUsdUJBQXVCLEVBQUVuQixxQkFBc0IsQ0FBQyJ9