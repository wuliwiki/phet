// Copyright 2022-2023, University of Colorado Boulder

/**
 * CurveManipulationWidthSlider extends the HSlider class from the Sun library.
 * The purpose of this class is to create a slider that allows the user to adjust
 * the width of a curve in a graph. It creates a slider with major and minor ticks
 * that snap to the closest tick when the user interacts with it.
 *
 * @author Martin Veillette
 */

import HSlider from '../../../../sun/js/HSlider.js';
import calculusGrapher from '../../calculusGrapher.js';
import optionize from '../../../../phet-core/js/optionize.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
const WIDTH_RANGE = CalculusGrapherConstants.CURVE_MANIPULATION_WIDTH_RANGE;
const NUMBER_OF_TICKS = 9;
assert && assert(NUMBER_OF_TICKS % 2 === 1, 'must have an odd number of ticks for there to be a center tick');
export default class CurveManipulationWidthSlider extends HSlider {
  constructor(curveManipulationWidthProperty, providedOptions) {
    // an array of numbers corresponding to the positions of the ticks (in model coordinate)
    const tickValues = [...Array(NUMBER_OF_TICKS)].map((x, i) => WIDTH_RANGE.expandNormalizedValue(i / (NUMBER_OF_TICKS - 1)));
    const options = optionize()({
      // HSliderOptions
      trackSize: new Dimension2(100, 1),
      majorTickLength: 20,
      minorTickLength: 15,
      minorTickLineWidth: 0.5,
      thumbSize: new Dimension2(15, 30),
      // snap to ticks
      constrainValue: value => findClosestTick(tickValues, value)
    }, providedOptions);
    super(curveManipulationWidthProperty, WIDTH_RANGE, options);

    // Major ticks at min, max, and center
    const majorTickValues = [tickValues[0], tickValues[tickValues.length - 1], tickValues[(tickValues.length - 1) / 2]];

    // Add minor ticks, skipping the major ticks.
    tickValues.forEach(tickValue => {
      if (!majorTickValues.includes(tickValue)) {
        this.addMinorTick(tickValue);
      }
    });

    // Add major ticks.
    majorTickValues.forEach(majorTickValue => this.addMajorTick(majorTickValue));
  }
}

// Given a value, will return the tick (in model coordinates) that is the closest to the value.
function findClosestTick(tickValues, value) {
  tickValues.sort((a, b) => Math.abs(value - a) - Math.abs(value - b));
  return tickValues[0];
}
calculusGrapher.register('CurveManipulationWidthSlider', CurveManipulationWidthSlider);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIU2xpZGVyIiwiY2FsY3VsdXNHcmFwaGVyIiwib3B0aW9uaXplIiwiQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIiwiRGltZW5zaW9uMiIsIldJRFRIX1JBTkdFIiwiQ1VSVkVfTUFOSVBVTEFUSU9OX1dJRFRIX1JBTkdFIiwiTlVNQkVSX09GX1RJQ0tTIiwiYXNzZXJ0IiwiQ3VydmVNYW5pcHVsYXRpb25XaWR0aFNsaWRlciIsImNvbnN0cnVjdG9yIiwiY3VydmVNYW5pcHVsYXRpb25XaWR0aFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwidGlja1ZhbHVlcyIsIkFycmF5IiwibWFwIiwieCIsImkiLCJleHBhbmROb3JtYWxpemVkVmFsdWUiLCJvcHRpb25zIiwidHJhY2tTaXplIiwibWFqb3JUaWNrTGVuZ3RoIiwibWlub3JUaWNrTGVuZ3RoIiwibWlub3JUaWNrTGluZVdpZHRoIiwidGh1bWJTaXplIiwiY29uc3RyYWluVmFsdWUiLCJ2YWx1ZSIsImZpbmRDbG9zZXN0VGljayIsIm1ham9yVGlja1ZhbHVlcyIsImxlbmd0aCIsImZvckVhY2giLCJ0aWNrVmFsdWUiLCJpbmNsdWRlcyIsImFkZE1pbm9yVGljayIsIm1ham9yVGlja1ZhbHVlIiwiYWRkTWFqb3JUaWNrIiwic29ydCIsImEiLCJiIiwiTWF0aCIsImFicyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ3VydmVNYW5pcHVsYXRpb25XaWR0aFNsaWRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDdXJ2ZU1hbmlwdWxhdGlvbldpZHRoU2xpZGVyIGV4dGVuZHMgdGhlIEhTbGlkZXIgY2xhc3MgZnJvbSB0aGUgU3VuIGxpYnJhcnkuXHJcbiAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgY2xhc3MgaXMgdG8gY3JlYXRlIGEgc2xpZGVyIHRoYXQgYWxsb3dzIHRoZSB1c2VyIHRvIGFkanVzdFxyXG4gKiB0aGUgd2lkdGggb2YgYSBjdXJ2ZSBpbiBhIGdyYXBoLiBJdCBjcmVhdGVzIGEgc2xpZGVyIHdpdGggbWFqb3IgYW5kIG1pbm9yIHRpY2tzXHJcbiAqIHRoYXQgc25hcCB0byB0aGUgY2xvc2VzdCB0aWNrIHdoZW4gdGhlIHVzZXIgaW50ZXJhY3RzIHdpdGggaXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKi9cclxuXHJcbmltcG9ydCBIU2xpZGVyLCB7IEhTbGlkZXJPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0hTbGlkZXIuanMnO1xyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIGZyb20gJy4uL0NhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5cclxuY29uc3QgV0lEVEhfUkFOR0UgPSBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuQ1VSVkVfTUFOSVBVTEFUSU9OX1dJRFRIX1JBTkdFO1xyXG5jb25zdCBOVU1CRVJfT0ZfVElDS1MgPSA5O1xyXG5hc3NlcnQgJiYgYXNzZXJ0KCBOVU1CRVJfT0ZfVElDS1MgJSAyID09PSAxLCAnbXVzdCBoYXZlIGFuIG9kZCBudW1iZXIgb2YgdGlja3MgZm9yIHRoZXJlIHRvIGJlIGEgY2VudGVyIHRpY2snICk7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgQ3VydmVNYW5pcHVsYXRpb25XaWR0aFNsaWRlck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxIU2xpZGVyT3B0aW9ucywgJ3RhbmRlbScgfCAndmlzaWJsZVByb3BlcnR5Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXJ2ZU1hbmlwdWxhdGlvbldpZHRoU2xpZGVyIGV4dGVuZHMgSFNsaWRlciB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY3VydmVNYW5pcHVsYXRpb25XaWR0aFByb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBDdXJ2ZU1hbmlwdWxhdGlvbldpZHRoU2xpZGVyT3B0aW9ucyApIHtcclxuXHJcbiAgICAvLyBhbiBhcnJheSBvZiBudW1iZXJzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHBvc2l0aW9ucyBvZiB0aGUgdGlja3MgKGluIG1vZGVsIGNvb3JkaW5hdGUpXHJcbiAgICBjb25zdCB0aWNrVmFsdWVzID0gWyAuLi5BcnJheSggTlVNQkVSX09GX1RJQ0tTICkgXS5tYXAoICggeCwgaSApID0+XHJcbiAgICAgIFdJRFRIX1JBTkdFLmV4cGFuZE5vcm1hbGl6ZWRWYWx1ZSggaSAvICggTlVNQkVSX09GX1RJQ0tTIC0gMSApICkgKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEN1cnZlTWFuaXB1bGF0aW9uV2lkdGhTbGlkZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgSFNsaWRlck9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIEhTbGlkZXJPcHRpb25zXHJcbiAgICAgIHRyYWNrU2l6ZTogbmV3IERpbWVuc2lvbjIoIDEwMCwgMSApLFxyXG4gICAgICBtYWpvclRpY2tMZW5ndGg6IDIwLFxyXG4gICAgICBtaW5vclRpY2tMZW5ndGg6IDE1LFxyXG4gICAgICBtaW5vclRpY2tMaW5lV2lkdGg6IDAuNSxcclxuICAgICAgdGh1bWJTaXplOiBuZXcgRGltZW5zaW9uMiggMTUsIDMwICksXHJcblxyXG4gICAgICAvLyBzbmFwIHRvIHRpY2tzXHJcbiAgICAgIGNvbnN0cmFpblZhbHVlOiAoIHZhbHVlOiBudW1iZXIgKSA9PiBmaW5kQ2xvc2VzdFRpY2soIHRpY2tWYWx1ZXMsIHZhbHVlIClcclxuXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggY3VydmVNYW5pcHVsYXRpb25XaWR0aFByb3BlcnR5LCBXSURUSF9SQU5HRSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIE1ham9yIHRpY2tzIGF0IG1pbiwgbWF4LCBhbmQgY2VudGVyXHJcbiAgICBjb25zdCBtYWpvclRpY2tWYWx1ZXMgPSBbIHRpY2tWYWx1ZXNbIDAgXSwgdGlja1ZhbHVlc1sgdGlja1ZhbHVlcy5sZW5ndGggLSAxIF0sIHRpY2tWYWx1ZXNbICggdGlja1ZhbHVlcy5sZW5ndGggLSAxICkgLyAyIF0gXTtcclxuXHJcbiAgICAvLyBBZGQgbWlub3IgdGlja3MsIHNraXBwaW5nIHRoZSBtYWpvciB0aWNrcy5cclxuICAgIHRpY2tWYWx1ZXMuZm9yRWFjaCggdGlja1ZhbHVlID0+IHtcclxuICAgICAgaWYgKCAhbWFqb3JUaWNrVmFsdWVzLmluY2x1ZGVzKCB0aWNrVmFsdWUgKSApIHtcclxuICAgICAgICB0aGlzLmFkZE1pbm9yVGljayggdGlja1ZhbHVlICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBBZGQgbWFqb3IgdGlja3MuXHJcbiAgICBtYWpvclRpY2tWYWx1ZXMuZm9yRWFjaCggbWFqb3JUaWNrVmFsdWUgPT4gdGhpcy5hZGRNYWpvclRpY2soIG1ham9yVGlja1ZhbHVlICkgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIEdpdmVuIGEgdmFsdWUsIHdpbGwgcmV0dXJuIHRoZSB0aWNrIChpbiBtb2RlbCBjb29yZGluYXRlcykgdGhhdCBpcyB0aGUgY2xvc2VzdCB0byB0aGUgdmFsdWUuXHJcbmZ1bmN0aW9uIGZpbmRDbG9zZXN0VGljayggdGlja1ZhbHVlczogbnVtYmVyW10sIHZhbHVlOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICB0aWNrVmFsdWVzLnNvcnQoICggYSwgYiApID0+IE1hdGguYWJzKCB2YWx1ZSAtIGEgKSAtIE1hdGguYWJzKCB2YWx1ZSAtIGIgKSApO1xyXG4gIHJldHVybiB0aWNrVmFsdWVzWyAwIF07XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0N1cnZlTWFuaXB1bGF0aW9uV2lkdGhTbGlkZXInLCBDdXJ2ZU1hbmlwdWxhdGlvbldpZHRoU2xpZGVyICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQTBCLCtCQUErQjtBQUN2RSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBQ25GLE9BQU9DLHdCQUF3QixNQUFNLGdDQUFnQztBQUNyRSxPQUFPQyxVQUFVLE1BQU0sa0NBQWtDO0FBSXpELE1BQU1DLFdBQVcsR0FBR0Ysd0JBQXdCLENBQUNHLDhCQUE4QjtBQUMzRSxNQUFNQyxlQUFlLEdBQUcsQ0FBQztBQUN6QkMsTUFBTSxJQUFJQSxNQUFNLENBQUVELGVBQWUsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLGdFQUFpRSxDQUFDO0FBTS9HLGVBQWUsTUFBTUUsNEJBQTRCLFNBQVNULE9BQU8sQ0FBQztFQUV6RFUsV0FBV0EsQ0FBRUMsOEJBQWdELEVBQ2hEQyxlQUFvRCxFQUFHO0lBRXpFO0lBQ0EsTUFBTUMsVUFBVSxHQUFHLENBQUUsR0FBR0MsS0FBSyxDQUFFUCxlQUFnQixDQUFDLENBQUUsQ0FBQ1EsR0FBRyxDQUFFLENBQUVDLENBQUMsRUFBRUMsQ0FBQyxLQUM1RFosV0FBVyxDQUFDYSxxQkFBcUIsQ0FBRUQsQ0FBQyxJQUFLVixlQUFlLEdBQUcsQ0FBQyxDQUFHLENBQUUsQ0FBQztJQUVwRSxNQUFNWSxPQUFPLEdBQUdqQixTQUFTLENBQW1FLENBQUMsQ0FBRTtNQUU3RjtNQUNBa0IsU0FBUyxFQUFFLElBQUloQixVQUFVLENBQUUsR0FBRyxFQUFFLENBQUUsQ0FBQztNQUNuQ2lCLGVBQWUsRUFBRSxFQUFFO01BQ25CQyxlQUFlLEVBQUUsRUFBRTtNQUNuQkMsa0JBQWtCLEVBQUUsR0FBRztNQUN2QkMsU0FBUyxFQUFFLElBQUlwQixVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztNQUVuQztNQUNBcUIsY0FBYyxFQUFJQyxLQUFhLElBQU1DLGVBQWUsQ0FBRWQsVUFBVSxFQUFFYSxLQUFNO0lBRTFFLENBQUMsRUFBRWQsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVELDhCQUE4QixFQUFFTixXQUFXLEVBQUVjLE9BQVEsQ0FBQzs7SUFFN0Q7SUFDQSxNQUFNUyxlQUFlLEdBQUcsQ0FBRWYsVUFBVSxDQUFFLENBQUMsQ0FBRSxFQUFFQSxVQUFVLENBQUVBLFVBQVUsQ0FBQ2dCLE1BQU0sR0FBRyxDQUFDLENBQUUsRUFBRWhCLFVBQVUsQ0FBRSxDQUFFQSxVQUFVLENBQUNnQixNQUFNLEdBQUcsQ0FBQyxJQUFLLENBQUMsQ0FBRSxDQUFFOztJQUU3SDtJQUNBaEIsVUFBVSxDQUFDaUIsT0FBTyxDQUFFQyxTQUFTLElBQUk7TUFDL0IsSUFBSyxDQUFDSCxlQUFlLENBQUNJLFFBQVEsQ0FBRUQsU0FBVSxDQUFDLEVBQUc7UUFDNUMsSUFBSSxDQUFDRSxZQUFZLENBQUVGLFNBQVUsQ0FBQztNQUNoQztJQUNGLENBQUUsQ0FBQzs7SUFFSDtJQUNBSCxlQUFlLENBQUNFLE9BQU8sQ0FBRUksY0FBYyxJQUFJLElBQUksQ0FBQ0MsWUFBWSxDQUFFRCxjQUFlLENBQUUsQ0FBQztFQUNsRjtBQUNGOztBQUVBO0FBQ0EsU0FBU1AsZUFBZUEsQ0FBRWQsVUFBb0IsRUFBRWEsS0FBYSxFQUFXO0VBQ3RFYixVQUFVLENBQUN1QixJQUFJLENBQUUsQ0FBRUMsQ0FBQyxFQUFFQyxDQUFDLEtBQU1DLElBQUksQ0FBQ0MsR0FBRyxDQUFFZCxLQUFLLEdBQUdXLENBQUUsQ0FBQyxHQUFHRSxJQUFJLENBQUNDLEdBQUcsQ0FBRWQsS0FBSyxHQUFHWSxDQUFFLENBQUUsQ0FBQztFQUM1RSxPQUFPekIsVUFBVSxDQUFFLENBQUMsQ0FBRTtBQUN4QjtBQUVBWixlQUFlLENBQUN3QyxRQUFRLENBQUUsOEJBQThCLEVBQUVoQyw0QkFBNkIsQ0FBQyJ9