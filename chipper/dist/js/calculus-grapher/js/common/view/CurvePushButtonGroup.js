// Copyright 2022-2023, University of Colorado Boulder

/**
 * CurvePushButtonGroup allow the user to manipulate the curve pressing buttons that
 * smooth, erase and undo the original curve
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import calculusGrapher from '../../calculusGrapher.js';
import { HBox, VBox } from '../../../../scenery/js/imports.js';
import CalculusGrapherStrings from '../../CalculusGrapherStrings.js';
import TextPushButton from '../../../../sun/js/buttons/TextPushButton.js';
import EraserButton from '../../../../scenery-phet/js/buttons/EraserButton.js';
import UndoButton from '../../../../scenery-phet/js/buttons/UndoButton.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
import PhetColorScheme from '../../../../scenery-phet/js/PhetColorScheme.js';
export default class CurvePushButtonGroup extends VBox {
  constructor(interactiveCurveProperty, hasSmoothButton, tandem) {
    // Create an undo Button. Disabling this button when there's nothing to undo is NOT a requirement.
    // See https://github.com/phetsims/calculus-grapher/issues/219
    const undoButton = new UndoButton({
      listener: () => interactiveCurveProperty.value.undo(),
      yMargin: 6,
      iconOptions: {
        height: 13
      },
      tandem: tandem.createTandem('undoButton')
    });

    // Create an eraser Button. Disabling this button when there's nothing to erase is NOT a requirement.
    // See https://github.com/phetsims/calculus-grapher/issues/219
    const eraserButton = new EraserButton({
      listener: () => interactiveCurveProperty.value.erase(),
      iconWidth: 16,
      xMargin: 10,
      tandem: tandem.createTandem('eraserButton')
    });

    // Put the eraser and undo buttons side by side
    const hBox = new HBox({
      spacing: 8,
      stretch: true,
      children: [undoButton, eraserButton]
    });
    const children = [];

    // Create a Smooth button, with width matching the HBox.
    if (hasSmoothButton) {
      const smoothButton = new TextPushButton(CalculusGrapherStrings.smoothStringProperty, {
        listener: () => interactiveCurveProperty.value.smooth(),
        textNodeOptions: {
          font: CalculusGrapherConstants.CONTROL_FONT,
          fontWeight: 'bold',
          maxWidth: 55
        },
        baseColor: PhetColorScheme.BUTTON_YELLOW,
        layoutOptions: {
          stretch: true
        },
        tandem: tandem.createTandem('smoothButton')
      });
      children.push(smoothButton);
    }
    children.push(hBox);
    super({
      children: children,
      spacing: 8,
      tandem: tandem
    });
  }
}
calculusGrapher.register('CurvePushButtonGroup', CurvePushButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWx1c0dyYXBoZXIiLCJIQm94IiwiVkJveCIsIkNhbGN1bHVzR3JhcGhlclN0cmluZ3MiLCJUZXh0UHVzaEJ1dHRvbiIsIkVyYXNlckJ1dHRvbiIsIlVuZG9CdXR0b24iLCJDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMiLCJQaGV0Q29sb3JTY2hlbWUiLCJDdXJ2ZVB1c2hCdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwiaW50ZXJhY3RpdmVDdXJ2ZVByb3BlcnR5IiwiaGFzU21vb3RoQnV0dG9uIiwidGFuZGVtIiwidW5kb0J1dHRvbiIsImxpc3RlbmVyIiwidmFsdWUiLCJ1bmRvIiwieU1hcmdpbiIsImljb25PcHRpb25zIiwiaGVpZ2h0IiwiY3JlYXRlVGFuZGVtIiwiZXJhc2VyQnV0dG9uIiwiZXJhc2UiLCJpY29uV2lkdGgiLCJ4TWFyZ2luIiwiaEJveCIsInNwYWNpbmciLCJzdHJldGNoIiwiY2hpbGRyZW4iLCJzbW9vdGhCdXR0b24iLCJzbW9vdGhTdHJpbmdQcm9wZXJ0eSIsInNtb290aCIsInRleHROb2RlT3B0aW9ucyIsImZvbnQiLCJDT05UUk9MX0ZPTlQiLCJmb250V2VpZ2h0IiwibWF4V2lkdGgiLCJiYXNlQ29sb3IiLCJCVVRUT05fWUVMTE9XIiwibGF5b3V0T3B0aW9ucyIsInB1c2giLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1cnZlUHVzaEJ1dHRvbkdyb3VwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEN1cnZlUHVzaEJ1dHRvbkdyb3VwIGFsbG93IHRoZSB1c2VyIHRvIG1hbmlwdWxhdGUgdGhlIGN1cnZlIHByZXNzaW5nIGJ1dHRvbnMgdGhhdFxyXG4gKiBzbW9vdGgsIGVyYXNlIGFuZCB1bmRvIHRoZSBvcmlnaW5hbCBjdXJ2ZVxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncyBmcm9tICcuLi8uLi9DYWxjdWx1c0dyYXBoZXJTdHJpbmdzLmpzJztcclxuaW1wb3J0IFRleHRQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1RleHRQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IEVyYXNlckJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvYnV0dG9ucy9FcmFzZXJCdXR0b24uanMnO1xyXG5pbXBvcnQgVW5kb0J1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvYnV0dG9ucy9VbmRvQnV0dG9uLmpzJztcclxuaW1wb3J0IFRyYW5zZm9ybWVkQ3VydmUgZnJvbSAnLi4vbW9kZWwvVHJhbnNmb3JtZWRDdXJ2ZS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUGhldENvbG9yU2NoZW1lIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Q29sb3JTY2hlbWUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VydmVQdXNoQnV0dG9uR3JvdXAgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBpbnRlcmFjdGl2ZUN1cnZlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFRyYW5zZm9ybWVkQ3VydmU+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgaGFzU21vb3RoQnV0dG9uOiBib29sZWFuLCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICAvLyBDcmVhdGUgYW4gdW5kbyBCdXR0b24uIERpc2FibGluZyB0aGlzIGJ1dHRvbiB3aGVuIHRoZXJlJ3Mgbm90aGluZyB0byB1bmRvIGlzIE5PVCBhIHJlcXVpcmVtZW50LlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jYWxjdWx1cy1ncmFwaGVyL2lzc3Vlcy8yMTlcclxuICAgIGNvbnN0IHVuZG9CdXR0b24gPSBuZXcgVW5kb0J1dHRvbigge1xyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4gaW50ZXJhY3RpdmVDdXJ2ZVByb3BlcnR5LnZhbHVlLnVuZG8oKSxcclxuICAgICAgeU1hcmdpbjogNixcclxuICAgICAgaWNvbk9wdGlvbnM6IHsgaGVpZ2h0OiAxMyB9LFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd1bmRvQnV0dG9uJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuIGVyYXNlciBCdXR0b24uIERpc2FibGluZyB0aGlzIGJ1dHRvbiB3aGVuIHRoZXJlJ3Mgbm90aGluZyB0byBlcmFzZSBpcyBOT1QgYSByZXF1aXJlbWVudC5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2FsY3VsdXMtZ3JhcGhlci9pc3N1ZXMvMjE5XHJcbiAgICBjb25zdCBlcmFzZXJCdXR0b24gPSBuZXcgRXJhc2VyQnV0dG9uKCB7XHJcbiAgICAgIGxpc3RlbmVyOiAoKSA9PiBpbnRlcmFjdGl2ZUN1cnZlUHJvcGVydHkudmFsdWUuZXJhc2UoKSxcclxuICAgICAgaWNvbldpZHRoOiAxNixcclxuICAgICAgeE1hcmdpbjogMTAsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2VyYXNlckJ1dHRvbicgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFB1dCB0aGUgZXJhc2VyIGFuZCB1bmRvIGJ1dHRvbnMgc2lkZSBieSBzaWRlXHJcbiAgICBjb25zdCBoQm94ID0gbmV3IEhCb3goIHtcclxuICAgICAgc3BhY2luZzogOCxcclxuICAgICAgc3RyZXRjaDogdHJ1ZSxcclxuICAgICAgY2hpbGRyZW46IFsgdW5kb0J1dHRvbiwgZXJhc2VyQnV0dG9uIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIFNtb290aCBidXR0b24sIHdpdGggd2lkdGggbWF0Y2hpbmcgdGhlIEhCb3guXHJcbiAgICBpZiAoIGhhc1Ntb290aEJ1dHRvbiApIHtcclxuICAgICAgY29uc3Qgc21vb3RoQnV0dG9uID0gbmV3IFRleHRQdXNoQnV0dG9uKCBDYWxjdWx1c0dyYXBoZXJTdHJpbmdzLnNtb290aFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgbGlzdGVuZXI6ICgpID0+IGludGVyYWN0aXZlQ3VydmVQcm9wZXJ0eS52YWx1ZS5zbW9vdGgoKSxcclxuICAgICAgICB0ZXh0Tm9kZU9wdGlvbnM6IHtcclxuICAgICAgICAgIGZvbnQ6IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5DT05UUk9MX0ZPTlQsXHJcbiAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgICAgICBtYXhXaWR0aDogNTVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJhc2VDb2xvcjogUGhldENvbG9yU2NoZW1lLkJVVFRPTl9ZRUxMT1csXHJcbiAgICAgICAgbGF5b3V0T3B0aW9uczoge1xyXG4gICAgICAgICAgc3RyZXRjaDogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc21vb3RoQnV0dG9uJyApXHJcbiAgICAgIH0gKTtcclxuICAgICAgY2hpbGRyZW4ucHVzaCggc21vb3RoQnV0dG9uICk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hpbGRyZW4ucHVzaCggaEJveCApO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcclxuICAgICAgc3BhY2luZzogOCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0N1cnZlUHVzaEJ1dHRvbkdyb3VwJywgQ3VydmVQdXNoQnV0dG9uR3JvdXAgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLDhDQUE4QztBQUN6RSxPQUFPQyxZQUFZLE1BQU0scURBQXFEO0FBQzlFLE9BQU9DLFVBQVUsTUFBTSxtREFBbUQ7QUFHMUUsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBQ3JFLE9BQU9DLGVBQWUsTUFBTSxnREFBZ0Q7QUFHNUUsZUFBZSxNQUFNQyxvQkFBb0IsU0FBU1AsSUFBSSxDQUFDO0VBRTlDUSxXQUFXQSxDQUFFQyx3QkFBNkQsRUFDN0RDLGVBQXdCLEVBQUVDLE1BQWMsRUFBRztJQUU3RDtJQUNBO0lBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUlSLFVBQVUsQ0FBRTtNQUNqQ1MsUUFBUSxFQUFFQSxDQUFBLEtBQU1KLHdCQUF3QixDQUFDSyxLQUFLLENBQUNDLElBQUksQ0FBQyxDQUFDO01BQ3JEQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxXQUFXLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQUcsQ0FBQztNQUMzQlAsTUFBTSxFQUFFQSxNQUFNLENBQUNRLFlBQVksQ0FBRSxZQUFhO0lBQzVDLENBQUUsQ0FBQzs7SUFFSDtJQUNBO0lBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUlqQixZQUFZLENBQUU7TUFDckNVLFFBQVEsRUFBRUEsQ0FBQSxLQUFNSix3QkFBd0IsQ0FBQ0ssS0FBSyxDQUFDTyxLQUFLLENBQUMsQ0FBQztNQUN0REMsU0FBUyxFQUFFLEVBQUU7TUFDYkMsT0FBTyxFQUFFLEVBQUU7TUFDWFosTUFBTSxFQUFFQSxNQUFNLENBQUNRLFlBQVksQ0FBRSxjQUFlO0lBQzlDLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1LLElBQUksR0FBRyxJQUFJekIsSUFBSSxDQUFFO01BQ3JCMEIsT0FBTyxFQUFFLENBQUM7TUFDVkMsT0FBTyxFQUFFLElBQUk7TUFDYkMsUUFBUSxFQUFFLENBQUVmLFVBQVUsRUFBRVEsWUFBWTtJQUN0QyxDQUFFLENBQUM7SUFFSCxNQUFNTyxRQUFRLEdBQUcsRUFBRTs7SUFFbkI7SUFDQSxJQUFLakIsZUFBZSxFQUFHO01BQ3JCLE1BQU1rQixZQUFZLEdBQUcsSUFBSTFCLGNBQWMsQ0FBRUQsc0JBQXNCLENBQUM0QixvQkFBb0IsRUFBRTtRQUNwRmhCLFFBQVEsRUFBRUEsQ0FBQSxLQUFNSix3QkFBd0IsQ0FBQ0ssS0FBSyxDQUFDZ0IsTUFBTSxDQUFDLENBQUM7UUFDdkRDLGVBQWUsRUFBRTtVQUNmQyxJQUFJLEVBQUUzQix3QkFBd0IsQ0FBQzRCLFlBQVk7VUFDM0NDLFVBQVUsRUFBRSxNQUFNO1VBQ2xCQyxRQUFRLEVBQUU7UUFDWixDQUFDO1FBQ0RDLFNBQVMsRUFBRTlCLGVBQWUsQ0FBQytCLGFBQWE7UUFDeENDLGFBQWEsRUFBRTtVQUNiWixPQUFPLEVBQUU7UUFDWCxDQUFDO1FBQ0RmLE1BQU0sRUFBRUEsTUFBTSxDQUFDUSxZQUFZLENBQUUsY0FBZTtNQUM5QyxDQUFFLENBQUM7TUFDSFEsUUFBUSxDQUFDWSxJQUFJLENBQUVYLFlBQWEsQ0FBQztJQUMvQjtJQUVBRCxRQUFRLENBQUNZLElBQUksQ0FBRWYsSUFBSyxDQUFDO0lBRXJCLEtBQUssQ0FBRTtNQUNMRyxRQUFRLEVBQUVBLFFBQVE7TUFDbEJGLE9BQU8sRUFBRSxDQUFDO01BQ1ZkLE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFiLGVBQWUsQ0FBQzBDLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRWpDLG9CQUFxQixDQUFDIn0=