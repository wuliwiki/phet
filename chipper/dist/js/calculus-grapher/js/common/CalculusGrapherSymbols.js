// Copyright 2022-2023, University of Colorado Boulder

/**
 * Symbols used throughout this simulation.
 *
 * This is also where MathSymbolFont is applied to symbols. By adding RichText markup to a symbol with
 * MathSymbolFont.getRichTextMarkup, all occurrences of that symbol will be rendered using MathSymbolFont.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import MathSymbolFont from '../../../scenery-phet/js/MathSymbolFont.js';
import calculusGrapher from '../calculusGrapher.js';
import CalculusGrapherStrings from '../CalculusGrapherStrings.js';
const CalculusGrapherSymbols = {
  // No PhET-iO instrumentation is desired, because the associated string Properties are already instrumented.
  // Showing the additional markup that is created around those strings provides no additional value.
  // See https://github.com/phetsims/calculus-grapher/issues/213
  dStringProperty: MathSymbolFont.createDerivedProperty(CalculusGrapherStrings.symbol.dStringProperty),
  // d
  xStringProperty: MathSymbolFont.createDerivedProperty(CalculusGrapherStrings.symbol.xStringProperty),
  // x
  fStringProperty: MathSymbolFont.createDerivedProperty(CalculusGrapherStrings.symbol.fStringProperty),
  // f
  tStringProperty: MathSymbolFont.createDerivedProperty(CalculusGrapherStrings.symbol.tStringProperty),
  // t

  integral: MathSymbolFont.getRichTextMarkup('\u222B', 'normal'),
  prime: MathSymbolFont.getRichTextMarkup('\''),
  doublePrime: MathSymbolFont.getRichTextMarkup('"')
};
calculusGrapher.register('CalculusGrapherSymbols', CalculusGrapherSymbols);
export default CalculusGrapherSymbols;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRoU3ltYm9sRm9udCIsImNhbGN1bHVzR3JhcGhlciIsIkNhbGN1bHVzR3JhcGhlclN0cmluZ3MiLCJDYWxjdWx1c0dyYXBoZXJTeW1ib2xzIiwiZFN0cmluZ1Byb3BlcnR5IiwiY3JlYXRlRGVyaXZlZFByb3BlcnR5Iiwic3ltYm9sIiwieFN0cmluZ1Byb3BlcnR5IiwiZlN0cmluZ1Byb3BlcnR5IiwidFN0cmluZ1Byb3BlcnR5IiwiaW50ZWdyYWwiLCJnZXRSaWNoVGV4dE1hcmt1cCIsInByaW1lIiwiZG91YmxlUHJpbWUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNhbGN1bHVzR3JhcGhlclN5bWJvbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3ltYm9scyB1c2VkIHRocm91Z2hvdXQgdGhpcyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBUaGlzIGlzIGFsc28gd2hlcmUgTWF0aFN5bWJvbEZvbnQgaXMgYXBwbGllZCB0byBzeW1ib2xzLiBCeSBhZGRpbmcgUmljaFRleHQgbWFya3VwIHRvIGEgc3ltYm9sIHdpdGhcclxuICogTWF0aFN5bWJvbEZvbnQuZ2V0UmljaFRleHRNYXJrdXAsIGFsbCBvY2N1cnJlbmNlcyBvZiB0aGF0IHN5bWJvbCB3aWxsIGJlIHJlbmRlcmVkIHVzaW5nIE1hdGhTeW1ib2xGb250LlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgTWF0aFN5bWJvbEZvbnQgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL01hdGhTeW1ib2xGb250LmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJTdHJpbmdzLmpzJztcclxuXHJcbmNvbnN0IENhbGN1bHVzR3JhcGhlclN5bWJvbHMgPSB7XHJcblxyXG4gIC8vIE5vIFBoRVQtaU8gaW5zdHJ1bWVudGF0aW9uIGlzIGRlc2lyZWQsIGJlY2F1c2UgdGhlIGFzc29jaWF0ZWQgc3RyaW5nIFByb3BlcnRpZXMgYXJlIGFscmVhZHkgaW5zdHJ1bWVudGVkLlxyXG4gIC8vIFNob3dpbmcgdGhlIGFkZGl0aW9uYWwgbWFya3VwIHRoYXQgaXMgY3JlYXRlZCBhcm91bmQgdGhvc2Ugc3RyaW5ncyBwcm92aWRlcyBubyBhZGRpdGlvbmFsIHZhbHVlLlxyXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2FsY3VsdXMtZ3JhcGhlci9pc3N1ZXMvMjEzXHJcbiAgZFN0cmluZ1Byb3BlcnR5OiBNYXRoU3ltYm9sRm9udC5jcmVhdGVEZXJpdmVkUHJvcGVydHkoIENhbGN1bHVzR3JhcGhlclN0cmluZ3Muc3ltYm9sLmRTdHJpbmdQcm9wZXJ0eSApLCAvLyBkXHJcbiAgeFN0cmluZ1Byb3BlcnR5OiBNYXRoU3ltYm9sRm9udC5jcmVhdGVEZXJpdmVkUHJvcGVydHkoIENhbGN1bHVzR3JhcGhlclN0cmluZ3Muc3ltYm9sLnhTdHJpbmdQcm9wZXJ0eSApLCAvLyB4XHJcbiAgZlN0cmluZ1Byb3BlcnR5OiBNYXRoU3ltYm9sRm9udC5jcmVhdGVEZXJpdmVkUHJvcGVydHkoIENhbGN1bHVzR3JhcGhlclN0cmluZ3Muc3ltYm9sLmZTdHJpbmdQcm9wZXJ0eSApLCAvLyBmXHJcbiAgdFN0cmluZ1Byb3BlcnR5OiBNYXRoU3ltYm9sRm9udC5jcmVhdGVEZXJpdmVkUHJvcGVydHkoIENhbGN1bHVzR3JhcGhlclN0cmluZ3Muc3ltYm9sLnRTdHJpbmdQcm9wZXJ0eSApLCAvLyB0XHJcblxyXG4gIGludGVncmFsOiBNYXRoU3ltYm9sRm9udC5nZXRSaWNoVGV4dE1hcmt1cCggJ1xcdTIyMkInLCAnbm9ybWFsJyApLFxyXG4gIHByaW1lOiBNYXRoU3ltYm9sRm9udC5nZXRSaWNoVGV4dE1hcmt1cCggJ1xcJycgKSxcclxuICBkb3VibGVQcmltZTogTWF0aFN5bWJvbEZvbnQuZ2V0UmljaFRleHRNYXJrdXAoICdcIicgKVxyXG59O1xyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnQ2FsY3VsdXNHcmFwaGVyU3ltYm9scycsIENhbGN1bHVzR3JhcGhlclN5bWJvbHMgKTtcclxuZXhwb3J0IGRlZmF1bHQgQ2FsY3VsdXNHcmFwaGVyU3ltYm9scztcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLDRDQUE0QztBQUN2RSxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUVqRSxNQUFNQyxzQkFBc0IsR0FBRztFQUU3QjtFQUNBO0VBQ0E7RUFDQUMsZUFBZSxFQUFFSixjQUFjLENBQUNLLHFCQUFxQixDQUFFSCxzQkFBc0IsQ0FBQ0ksTUFBTSxDQUFDRixlQUFnQixDQUFDO0VBQUU7RUFDeEdHLGVBQWUsRUFBRVAsY0FBYyxDQUFDSyxxQkFBcUIsQ0FBRUgsc0JBQXNCLENBQUNJLE1BQU0sQ0FBQ0MsZUFBZ0IsQ0FBQztFQUFFO0VBQ3hHQyxlQUFlLEVBQUVSLGNBQWMsQ0FBQ0sscUJBQXFCLENBQUVILHNCQUFzQixDQUFDSSxNQUFNLENBQUNFLGVBQWdCLENBQUM7RUFBRTtFQUN4R0MsZUFBZSxFQUFFVCxjQUFjLENBQUNLLHFCQUFxQixDQUFFSCxzQkFBc0IsQ0FBQ0ksTUFBTSxDQUFDRyxlQUFnQixDQUFDO0VBQUU7O0VBRXhHQyxRQUFRLEVBQUVWLGNBQWMsQ0FBQ1csaUJBQWlCLENBQUUsUUFBUSxFQUFFLFFBQVMsQ0FBQztFQUNoRUMsS0FBSyxFQUFFWixjQUFjLENBQUNXLGlCQUFpQixDQUFFLElBQUssQ0FBQztFQUMvQ0UsV0FBVyxFQUFFYixjQUFjLENBQUNXLGlCQUFpQixDQUFFLEdBQUk7QUFDckQsQ0FBQztBQUVEVixlQUFlLENBQUNhLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRVgsc0JBQXVCLENBQUM7QUFDNUUsZUFBZUEsc0JBQXNCIn0=