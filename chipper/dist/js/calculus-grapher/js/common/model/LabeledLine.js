// Copyright 2023, University of Colorado Boulder

/**
 * LabeledLine is the model element for a labeled line tool. This is tool consists of a vertical line with a label
 * positioned at the top of the line.  These elements can only be made visible via PhET-iO, or via the (developer)
 * query parameter 'labeledLinesVisible'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import calculusGrapher from '../../calculusGrapher.js';
import { Color, ColorProperty } from '../../../../scenery/js/imports.js';
import LabeledAncillaryTool from './LabeledAncillaryTool.js';
import CalculusGrapherQueryParameters from '../CalculusGrapherQueryParameters.js';
export default class LabeledLine extends LabeledAncillaryTool {
  // Color for displaying the vertical line

  constructor(integralCurve, originalCurve, derivativeCurve, secondDerivativeCurve, providedOptions) {
    const options = optionize()({
      // LabeledAncillaryToolOptions
      visible: CalculusGrapherQueryParameters.labeledLinesVisible
    }, providedOptions);
    super(integralCurve, originalCurve, derivativeCurve, secondDerivativeCurve, options);
    this.lineColorProperty = new ColorProperty(Color.black, {
      tandem: options.tandem.createTandem('lineColorProperty')
    });
  }

  /**
   * Creates a specified number of LabeledLine instances, with evenly spaced initialCoordinates,
   * and alphabetically-ordered tandem names.
   */
  static createLabeledLines(numberOfTools, integralCurve, originalCurve, derivativeCurve, secondDerivativeCurve, parentTandem) {
    return LabeledAncillaryTool.createLabeledAncillaryTools(numberOfTools, (x, label) => new LabeledLine(integralCurve, originalCurve, derivativeCurve, secondDerivativeCurve, {
      x: x,
      label: label,
      tandem: parentTandem.createTandem(`${label}Line`)
    }));
  }
}
calculusGrapher.register('LabeledLine', LabeledLine);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjYWxjdWx1c0dyYXBoZXIiLCJDb2xvciIsIkNvbG9yUHJvcGVydHkiLCJMYWJlbGVkQW5jaWxsYXJ5VG9vbCIsIkNhbGN1bHVzR3JhcGhlclF1ZXJ5UGFyYW1ldGVycyIsIkxhYmVsZWRMaW5lIiwiY29uc3RydWN0b3IiLCJpbnRlZ3JhbEN1cnZlIiwib3JpZ2luYWxDdXJ2ZSIsImRlcml2YXRpdmVDdXJ2ZSIsInNlY29uZERlcml2YXRpdmVDdXJ2ZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2aXNpYmxlIiwibGFiZWxlZExpbmVzVmlzaWJsZSIsImxpbmVDb2xvclByb3BlcnR5IiwiYmxhY2siLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJjcmVhdGVMYWJlbGVkTGluZXMiLCJudW1iZXJPZlRvb2xzIiwicGFyZW50VGFuZGVtIiwiY3JlYXRlTGFiZWxlZEFuY2lsbGFyeVRvb2xzIiwieCIsImxhYmVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMYWJlbGVkTGluZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTGFiZWxlZExpbmUgaXMgdGhlIG1vZGVsIGVsZW1lbnQgZm9yIGEgbGFiZWxlZCBsaW5lIHRvb2wuIFRoaXMgaXMgdG9vbCBjb25zaXN0cyBvZiBhIHZlcnRpY2FsIGxpbmUgd2l0aCBhIGxhYmVsXHJcbiAqIHBvc2l0aW9uZWQgYXQgdGhlIHRvcCBvZiB0aGUgbGluZS4gIFRoZXNlIGVsZW1lbnRzIGNhbiBvbmx5IGJlIG1hZGUgdmlzaWJsZSB2aWEgUGhFVC1pTywgb3IgdmlhIHRoZSAoZGV2ZWxvcGVyKVxyXG4gKiBxdWVyeSBwYXJhbWV0ZXIgJ2xhYmVsZWRMaW5lc1Zpc2libGUnLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBDdXJ2ZSBmcm9tICcuL0N1cnZlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBjYWxjdWx1c0dyYXBoZXIgZnJvbSAnLi4vLi4vY2FsY3VsdXNHcmFwaGVyLmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIENvbG9yUHJvcGVydHkgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTGFiZWxlZEFuY2lsbGFyeVRvb2wsIHsgTGFiZWxlZEFuY2lsbGFyeVRvb2xPcHRpb25zIH0gZnJvbSAnLi9MYWJlbGVkQW5jaWxsYXJ5VG9vbC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vQ2FsY3VsdXNHcmFwaGVyUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBMYWJlbGVkTGluZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxMYWJlbGVkQW5jaWxsYXJ5VG9vbE9wdGlvbnMsICd4JyB8ICdsYWJlbCcgfCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYWJlbGVkTGluZSBleHRlbmRzIExhYmVsZWRBbmNpbGxhcnlUb29sIHtcclxuXHJcbiAgLy8gQ29sb3IgZm9yIGRpc3BsYXlpbmcgdGhlIHZlcnRpY2FsIGxpbmVcclxuICBwdWJsaWMgcmVhZG9ubHkgbGluZUNvbG9yUHJvcGVydHk6IENvbG9yUHJvcGVydHk7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaW50ZWdyYWxDdXJ2ZTogQ3VydmUsIG9yaWdpbmFsQ3VydmU6IEN1cnZlLCBkZXJpdmF0aXZlQ3VydmU6IEN1cnZlLCBzZWNvbmREZXJpdmF0aXZlQ3VydmU6IEN1cnZlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zOiBMYWJlbGVkTGluZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxMYWJlbGVkTGluZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBMYWJlbGVkQW5jaWxsYXJ5VG9vbE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIExhYmVsZWRBbmNpbGxhcnlUb29sT3B0aW9uc1xyXG4gICAgICB2aXNpYmxlOiBDYWxjdWx1c0dyYXBoZXJRdWVyeVBhcmFtZXRlcnMubGFiZWxlZExpbmVzVmlzaWJsZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGludGVncmFsQ3VydmUsIG9yaWdpbmFsQ3VydmUsIGRlcml2YXRpdmVDdXJ2ZSwgc2Vjb25kRGVyaXZhdGl2ZUN1cnZlLCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5saW5lQ29sb3JQcm9wZXJ0eSA9IG5ldyBDb2xvclByb3BlcnR5KCBDb2xvci5ibGFjaywge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xpbmVDb2xvclByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgc3BlY2lmaWVkIG51bWJlciBvZiBMYWJlbGVkTGluZSBpbnN0YW5jZXMsIHdpdGggZXZlbmx5IHNwYWNlZCBpbml0aWFsQ29vcmRpbmF0ZXMsXHJcbiAgICogYW5kIGFscGhhYmV0aWNhbGx5LW9yZGVyZWQgdGFuZGVtIG5hbWVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlTGFiZWxlZExpbmVzKCBudW1iZXJPZlRvb2xzOiBudW1iZXIsIGludGVncmFsQ3VydmU6IEN1cnZlLCBvcmlnaW5hbEN1cnZlOiBDdXJ2ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpdmVDdXJ2ZTogQ3VydmUsIHNlY29uZERlcml2YXRpdmVDdXJ2ZTogQ3VydmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRUYW5kZW06IFRhbmRlbSApOiBMYWJlbGVkTGluZVtdIHtcclxuICAgIHJldHVybiBMYWJlbGVkQW5jaWxsYXJ5VG9vbC5jcmVhdGVMYWJlbGVkQW5jaWxsYXJ5VG9vbHMoIG51bWJlck9mVG9vbHMsXHJcbiAgICAgICggeDogbnVtYmVyLCBsYWJlbDogc3RyaW5nICkgPT5cclxuICAgICAgICBuZXcgTGFiZWxlZExpbmUoIGludGVncmFsQ3VydmUsIG9yaWdpbmFsQ3VydmUsIGRlcml2YXRpdmVDdXJ2ZSwgc2Vjb25kRGVyaXZhdGl2ZUN1cnZlLCB7XHJcbiAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgdGFuZGVtOiBwYXJlbnRUYW5kZW0uY3JlYXRlVGFuZGVtKCBgJHtsYWJlbH1MaW5lYCApXHJcbiAgICAgICAgfSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdMYWJlbGVkTGluZScsIExhYmVsZWRMaW5lICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFDbkYsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxTQUFTQyxLQUFLLEVBQUVDLGFBQWEsUUFBUSxtQ0FBbUM7QUFDeEUsT0FBT0Msb0JBQW9CLE1BQXVDLDJCQUEyQjtBQUU3RixPQUFPQyw4QkFBOEIsTUFBTSxzQ0FBc0M7QUFPakYsZUFBZSxNQUFNQyxXQUFXLFNBQVNGLG9CQUFvQixDQUFDO0VBRTVEOztFQUdPRyxXQUFXQSxDQUFFQyxhQUFvQixFQUFFQyxhQUFvQixFQUFFQyxlQUFzQixFQUFFQyxxQkFBNEIsRUFDaEdDLGVBQW1DLEVBQUc7SUFFeEQsTUFBTUMsT0FBTyxHQUFHYixTQUFTLENBQStELENBQUMsQ0FBRTtNQUV6RjtNQUNBYyxPQUFPLEVBQUVULDhCQUE4QixDQUFDVTtJQUMxQyxDQUFDLEVBQUVILGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFSixhQUFhLEVBQUVDLGFBQWEsRUFBRUMsZUFBZSxFQUFFQyxxQkFBcUIsRUFBRUUsT0FBUSxDQUFDO0lBRXRGLElBQUksQ0FBQ0csaUJBQWlCLEdBQUcsSUFBSWIsYUFBYSxDQUFFRCxLQUFLLENBQUNlLEtBQUssRUFBRTtNQUN2REMsTUFBTSxFQUFFTCxPQUFPLENBQUNLLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLG1CQUFvQjtJQUMzRCxDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFLE9BQWNDLGtCQUFrQkEsQ0FBRUMsYUFBcUIsRUFBRWIsYUFBb0IsRUFBRUMsYUFBb0IsRUFDaEVDLGVBQXNCLEVBQUVDLHFCQUE0QixFQUNwRFcsWUFBb0IsRUFBa0I7SUFDdkUsT0FBT2xCLG9CQUFvQixDQUFDbUIsMkJBQTJCLENBQUVGLGFBQWEsRUFDcEUsQ0FBRUcsQ0FBUyxFQUFFQyxLQUFhLEtBQ3hCLElBQUluQixXQUFXLENBQUVFLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxlQUFlLEVBQUVDLHFCQUFxQixFQUFFO01BQ3JGYSxDQUFDLEVBQUVBLENBQUM7TUFDSkMsS0FBSyxFQUFFQSxLQUFLO01BQ1pQLE1BQU0sRUFBRUksWUFBWSxDQUFDSCxZQUFZLENBQUcsR0FBRU0sS0FBTSxNQUFNO0lBQ3BELENBQUUsQ0FBRSxDQUFDO0VBQ1g7QUFDRjtBQUVBeEIsZUFBZSxDQUFDeUIsUUFBUSxDQUFFLGFBQWEsRUFBRXBCLFdBQVksQ0FBQyJ9