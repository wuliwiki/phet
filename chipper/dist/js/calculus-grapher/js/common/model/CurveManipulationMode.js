// Copyright 2020-2023, University of Colorado Boulder

/**
 * CurveManipulationMode is an enumeration of the possible 'modes' for manipulating curves.
 *
 * When the user drags on a TransformedCurve, the curve is manipulated based on the current CurveManipulationMode,
 * allowing the user to create custom curves. The documentation in this file is not exhaustive and does not describe
 * the algorithms for responses to curve user-manipulation. Please also see TransformedCurve.js
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Enumeration from '../../../../phet-core/js/Enumeration.js';
import EnumerationValue from '../../../../phet-core/js/EnumerationValue.js';
import calculusGrapher from '../../calculusGrapher.js';
export default class CurveManipulationMode extends EnumerationValue {
  // Prefix used for tandems related to a CurveManipulationMode

  // Determines visibility of the width slider

  // Enumeration values
  static HILL = new CurveManipulationMode('hill');
  static TRIANGLE = new CurveManipulationMode('triangle');
  static PEDESTAL = new CurveManipulationMode('pedestal');
  static PARABOLA = new CurveManipulationMode('parabola');
  static SINUSOID = new CurveManipulationMode('sinusoid');
  static FREEFORM = new CurveManipulationMode('freeform', false);
  static TILT = new CurveManipulationMode('tilt', false);
  static SHIFT = new CurveManipulationMode('shift', false);
  static enumeration = new Enumeration(CurveManipulationMode);
  constructor(tandemPrefix, hasAdjustableWidth = true) {
    super();
    this.tandemPrefix = tandemPrefix;
    this.hasAdjustableWidth = hasAdjustableWidth;
  }
}
calculusGrapher.register('CurveManipulationMode', CurveManipulationMode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJjYWxjdWx1c0dyYXBoZXIiLCJDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUiLCJISUxMIiwiVFJJQU5HTEUiLCJQRURFU1RBTCIsIlBBUkFCT0xBIiwiU0lOVVNPSUQiLCJGUkVFRk9STSIsIlRJTFQiLCJTSElGVCIsImVudW1lcmF0aW9uIiwiY29uc3RydWN0b3IiLCJ0YW5kZW1QcmVmaXgiLCJoYXNBZGp1c3RhYmxlV2lkdGgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkN1cnZlTWFuaXB1bGF0aW9uTW9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUgaXMgYW4gZW51bWVyYXRpb24gb2YgdGhlIHBvc3NpYmxlICdtb2RlcycgZm9yIG1hbmlwdWxhdGluZyBjdXJ2ZXMuXHJcbiAqXHJcbiAqIFdoZW4gdGhlIHVzZXIgZHJhZ3Mgb24gYSBUcmFuc2Zvcm1lZEN1cnZlLCB0aGUgY3VydmUgaXMgbWFuaXB1bGF0ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnQgQ3VydmVNYW5pcHVsYXRpb25Nb2RlLFxyXG4gKiBhbGxvd2luZyB0aGUgdXNlciB0byBjcmVhdGUgY3VzdG9tIGN1cnZlcy4gVGhlIGRvY3VtZW50YXRpb24gaW4gdGhpcyBmaWxlIGlzIG5vdCBleGhhdXN0aXZlIGFuZCBkb2VzIG5vdCBkZXNjcmliZVxyXG4gKiB0aGUgYWxnb3JpdGhtcyBmb3IgcmVzcG9uc2VzIHRvIGN1cnZlIHVzZXItbWFuaXB1bGF0aW9uLiBQbGVhc2UgYWxzbyBzZWUgVHJhbnNmb3JtZWRDdXJ2ZS5qc1xyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVudW1lcmF0aW9uIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvbi5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblZhbHVlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvblZhbHVlLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VydmVNYW5pcHVsYXRpb25Nb2RlIGV4dGVuZHMgRW51bWVyYXRpb25WYWx1ZSB7XHJcblxyXG4gIC8vIFByZWZpeCB1c2VkIGZvciB0YW5kZW1zIHJlbGF0ZWQgdG8gYSBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGVcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFuZGVtUHJlZml4OiBzdHJpbmc7XHJcblxyXG4gIC8vIERldGVybWluZXMgdmlzaWJpbGl0eSBvZiB0aGUgd2lkdGggc2xpZGVyXHJcbiAgcHVibGljIHJlYWRvbmx5IGhhc0FkanVzdGFibGVXaWR0aDogYm9vbGVhbjtcclxuXHJcbiAgLy8gRW51bWVyYXRpb24gdmFsdWVzXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBISUxMID0gbmV3IEN1cnZlTWFuaXB1bGF0aW9uTW9kZSggJ2hpbGwnICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBUUklBTkdMRSA9IG5ldyBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUoICd0cmlhbmdsZScgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBFREVTVEFMID0gbmV3IEN1cnZlTWFuaXB1bGF0aW9uTW9kZSggJ3BlZGVzdGFsJyApO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUEFSQUJPTEEgPSBuZXcgQ3VydmVNYW5pcHVsYXRpb25Nb2RlKCAncGFyYWJvbGEnICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBTSU5VU09JRCA9IG5ldyBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUoICdzaW51c29pZCcgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEZSRUVGT1JNID0gbmV3IEN1cnZlTWFuaXB1bGF0aW9uTW9kZSggJ2ZyZWVmb3JtJywgZmFsc2UgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRJTFQgPSBuZXcgQ3VydmVNYW5pcHVsYXRpb25Nb2RlKCAndGlsdCcsIGZhbHNlICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBTSElGVCA9IG5ldyBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUoICdzaGlmdCcsIGZhbHNlICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIEN1cnZlTWFuaXB1bGF0aW9uTW9kZSApO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbVByZWZpeDogc3RyaW5nLCBoYXNBZGp1c3RhYmxlV2lkdGggPSB0cnVlICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMudGFuZGVtUHJlZml4ID0gdGFuZGVtUHJlZml4O1xyXG4gICAgdGhpcy5oYXNBZGp1c3RhYmxlV2lkdGggPSBoYXNBZGp1c3RhYmxlV2lkdGg7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUnLCBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0MsZ0JBQWdCLE1BQU0sOENBQThDO0FBQzNFLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFFdEQsZUFBZSxNQUFNQyxxQkFBcUIsU0FBU0YsZ0JBQWdCLENBQUM7RUFFbEU7O0VBR0E7O0VBR0E7RUFDQSxPQUF1QkcsSUFBSSxHQUFHLElBQUlELHFCQUFxQixDQUFFLE1BQU8sQ0FBQztFQUNqRSxPQUF1QkUsUUFBUSxHQUFHLElBQUlGLHFCQUFxQixDQUFFLFVBQVcsQ0FBQztFQUN6RSxPQUF1QkcsUUFBUSxHQUFHLElBQUlILHFCQUFxQixDQUFFLFVBQVcsQ0FBQztFQUN6RSxPQUF1QkksUUFBUSxHQUFHLElBQUlKLHFCQUFxQixDQUFFLFVBQVcsQ0FBQztFQUN6RSxPQUF1QkssUUFBUSxHQUFHLElBQUlMLHFCQUFxQixDQUFFLFVBQVcsQ0FBQztFQUN6RSxPQUF1Qk0sUUFBUSxHQUFHLElBQUlOLHFCQUFxQixDQUFFLFVBQVUsRUFBRSxLQUFNLENBQUM7RUFDaEYsT0FBdUJPLElBQUksR0FBRyxJQUFJUCxxQkFBcUIsQ0FBRSxNQUFNLEVBQUUsS0FBTSxDQUFDO0VBQ3hFLE9BQXVCUSxLQUFLLEdBQUcsSUFBSVIscUJBQXFCLENBQUUsT0FBTyxFQUFFLEtBQU0sQ0FBQztFQUUxRSxPQUF1QlMsV0FBVyxHQUFHLElBQUlaLFdBQVcsQ0FBRUcscUJBQXNCLENBQUM7RUFFdEVVLFdBQVdBLENBQUVDLFlBQW9CLEVBQUVDLGtCQUFrQixHQUFHLElBQUksRUFBRztJQUNwRSxLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQ0QsWUFBWSxHQUFHQSxZQUFZO0lBQ2hDLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUdBLGtCQUFrQjtFQUM5QztBQUNGO0FBRUFiLGVBQWUsQ0FBQ2MsUUFBUSxDQUFFLHVCQUF1QixFQUFFYixxQkFBc0IsQ0FBQyJ9