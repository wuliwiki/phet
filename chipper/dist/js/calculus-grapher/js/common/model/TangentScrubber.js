// Copyright 2023, University of Colorado Boulder

/**
 * TangentScrubber is the model element for the tangent scrubber. It can be moved horizontally to position the
 * tangent line on the original curve.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import AncillaryTool from './AncillaryTool.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
export default class TangentScrubber extends AncillaryTool {
  // See phetioDocumentation for addLinkedElement( this.colorProperty ) below

  constructor(integralCurve, originalCurve, derivativeCurve, secondDerivativeCurve, tandem) {
    super(integralCurve, originalCurve, derivativeCurve, secondDerivativeCurve, {
      x: Math.floor(CalculusGrapherConstants.CURVE_X_RANGE.min + CalculusGrapherConstants.CURVE_X_RANGE.getLength() / 3),
      // Do not feature integral and second derivative in Studio, because they are not relevant for tangent,
      // see https://github.com/phetsims/calculus-grapher/issues/225
      yIntegralPropertyFeatured: false,
      ySecondDerivativePropertyFeatured: false,
      tandem: tandem
    });
    this.colorProperty = CalculusGrapherColors.derivativeCurveStrokeProperty;
    this.addLinkedElement(this.colorProperty, {
      tandem: tandem.createTandem('colorProperty'),
      phetioDocumentation: 'Color for the tangent scrubber handle, vertical line, and the bar in the "Slope of Tangent" accordion box.'
    });
    this.addLinkedElement(this.yDerivativeProperty, {
      tandem: tandem.createTandem('slopeProperty'),
      phetioDocumentation: 'The slope of the tangent line, with is the same as yDerivativeProperty.'
    });
  }
}
calculusGrapher.register('TangentScrubber', TangentScrubber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmNpbGxhcnlUb29sIiwiQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIiwiY2FsY3VsdXNHcmFwaGVyIiwiQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIiwiVGFuZ2VudFNjcnViYmVyIiwiY29uc3RydWN0b3IiLCJpbnRlZ3JhbEN1cnZlIiwib3JpZ2luYWxDdXJ2ZSIsImRlcml2YXRpdmVDdXJ2ZSIsInNlY29uZERlcml2YXRpdmVDdXJ2ZSIsInRhbmRlbSIsIngiLCJNYXRoIiwiZmxvb3IiLCJDVVJWRV9YX1JBTkdFIiwibWluIiwiZ2V0TGVuZ3RoIiwieUludGVncmFsUHJvcGVydHlGZWF0dXJlZCIsInlTZWNvbmREZXJpdmF0aXZlUHJvcGVydHlGZWF0dXJlZCIsImNvbG9yUHJvcGVydHkiLCJkZXJpdmF0aXZlQ3VydmVTdHJva2VQcm9wZXJ0eSIsImFkZExpbmtlZEVsZW1lbnQiLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwieURlcml2YXRpdmVQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGFuZ2VudFNjcnViYmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUYW5nZW50U2NydWJiZXIgaXMgdGhlIG1vZGVsIGVsZW1lbnQgZm9yIHRoZSB0YW5nZW50IHNjcnViYmVyLiBJdCBjYW4gYmUgbW92ZWQgaG9yaXpvbnRhbGx5IHRvIHBvc2l0aW9uIHRoZVxyXG4gKiB0YW5nZW50IGxpbmUgb24gdGhlIG9yaWdpbmFsIGN1cnZlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBBbmNpbGxhcnlUb29sIGZyb20gJy4vQW5jaWxsYXJ5VG9vbC5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMgZnJvbSAnLi4vQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEN1cnZlIGZyb20gJy4vQ3VydmUuanMnO1xyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCB7IFByb2ZpbGVDb2xvclByb3BlcnR5IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbG9ycyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb2xvcnMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFuZ2VudFNjcnViYmVyIGV4dGVuZHMgQW5jaWxsYXJ5VG9vbCB7XHJcblxyXG4gIC8vIFNlZSBwaGV0aW9Eb2N1bWVudGF0aW9uIGZvciBhZGRMaW5rZWRFbGVtZW50KCB0aGlzLmNvbG9yUHJvcGVydHkgKSBiZWxvd1xyXG4gIHB1YmxpYyByZWFkb25seSBjb2xvclByb3BlcnR5OiBQcm9maWxlQ29sb3JQcm9wZXJ0eTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBpbnRlZ3JhbEN1cnZlOiBDdXJ2ZSwgb3JpZ2luYWxDdXJ2ZTogQ3VydmUsIGRlcml2YXRpdmVDdXJ2ZTogQ3VydmUsIHNlY29uZERlcml2YXRpdmVDdXJ2ZTogQ3VydmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggaW50ZWdyYWxDdXJ2ZSwgb3JpZ2luYWxDdXJ2ZSwgZGVyaXZhdGl2ZUN1cnZlLCBzZWNvbmREZXJpdmF0aXZlQ3VydmUsIHtcclxuICAgICAgeDogTWF0aC5mbG9vciggQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLkNVUlZFX1hfUkFOR0UubWluICsgQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLkNVUlZFX1hfUkFOR0UuZ2V0TGVuZ3RoKCkgLyAzICksXHJcblxyXG4gICAgICAvLyBEbyBub3QgZmVhdHVyZSBpbnRlZ3JhbCBhbmQgc2Vjb25kIGRlcml2YXRpdmUgaW4gU3R1ZGlvLCBiZWNhdXNlIHRoZXkgYXJlIG5vdCByZWxldmFudCBmb3IgdGFuZ2VudCxcclxuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jYWxjdWx1cy1ncmFwaGVyL2lzc3Vlcy8yMjVcclxuICAgICAgeUludGVncmFsUHJvcGVydHlGZWF0dXJlZDogZmFsc2UsXHJcbiAgICAgIHlTZWNvbmREZXJpdmF0aXZlUHJvcGVydHlGZWF0dXJlZDogZmFsc2UsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5jb2xvclByb3BlcnR5ID0gQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLmRlcml2YXRpdmVDdXJ2ZVN0cm9rZVByb3BlcnR5O1xyXG5cclxuICAgIHRoaXMuYWRkTGlua2VkRWxlbWVudCggdGhpcy5jb2xvclByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvbG9yUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdDb2xvciBmb3IgdGhlIHRhbmdlbnQgc2NydWJiZXIgaGFuZGxlLCB2ZXJ0aWNhbCBsaW5lLCBhbmQgdGhlIGJhciBpbiB0aGUgXCJTbG9wZSBvZiBUYW5nZW50XCIgYWNjb3JkaW9uIGJveC4nXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRMaW5rZWRFbGVtZW50KCB0aGlzLnlEZXJpdmF0aXZlUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2xvcGVQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1RoZSBzbG9wZSBvZiB0aGUgdGFuZ2VudCBsaW5lLCB3aXRoIGlzIHRoZSBzYW1lIGFzIHlEZXJpdmF0aXZlUHJvcGVydHkuJ1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnVGFuZ2VudFNjcnViYmVyJywgVGFuZ2VudFNjcnViYmVyICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBTSxvQkFBb0I7QUFDOUMsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBRXJFLE9BQU9DLGVBQWUsTUFBTSwwQkFBMEI7QUFFdEQsT0FBT0MscUJBQXFCLE1BQU0sNkJBQTZCO0FBRy9ELGVBQWUsTUFBTUMsZUFBZSxTQUFTSixhQUFhLENBQUM7RUFFekQ7O0VBR09LLFdBQVdBLENBQUVDLGFBQW9CLEVBQUVDLGFBQW9CLEVBQUVDLGVBQXNCLEVBQUVDLHFCQUE0QixFQUNoR0MsTUFBYyxFQUFHO0lBRW5DLEtBQUssQ0FBRUosYUFBYSxFQUFFQyxhQUFhLEVBQUVDLGVBQWUsRUFBRUMscUJBQXFCLEVBQUU7TUFDM0VFLENBQUMsRUFBRUMsSUFBSSxDQUFDQyxLQUFLLENBQUVaLHdCQUF3QixDQUFDYSxhQUFhLENBQUNDLEdBQUcsR0FBR2Qsd0JBQXdCLENBQUNhLGFBQWEsQ0FBQ0UsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFFLENBQUM7TUFFcEg7TUFDQTtNQUNBQyx5QkFBeUIsRUFBRSxLQUFLO01BQ2hDQyxpQ0FBaUMsRUFBRSxLQUFLO01BQ3hDUixNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDUyxhQUFhLEdBQUdoQixxQkFBcUIsQ0FBQ2lCLDZCQUE2QjtJQUV4RSxJQUFJLENBQUNDLGdCQUFnQixDQUFFLElBQUksQ0FBQ0YsYUFBYSxFQUFFO01BQ3pDVCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ1ksWUFBWSxDQUFFLGVBQWdCLENBQUM7TUFDOUNDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0YsZ0JBQWdCLENBQUUsSUFBSSxDQUFDRyxtQkFBbUIsRUFBRTtNQUMvQ2QsTUFBTSxFQUFFQSxNQUFNLENBQUNZLFlBQVksQ0FBRSxlQUFnQixDQUFDO01BQzlDQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFyQixlQUFlLENBQUN1QixRQUFRLENBQUUsaUJBQWlCLEVBQUVyQixlQUFnQixDQUFDIn0=