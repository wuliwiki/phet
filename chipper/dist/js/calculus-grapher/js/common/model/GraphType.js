// Copyright 2022-2023, University of Colorado Boulder

/**
 * GraphType identifies the types of graphs available in this simulation.
 * The class also has four static readonly properties that represent the four types of graphs available.
 * These properties are named ORIGINAL, INTEGRAL, DERIVATIVE, and SECOND_DERIVATIVE.
 * The class has two properties:
 *  - strokeProperty - represents the color of the curve stroke for the graph.
 * - tandemNamePrefix - represents the prefix used for tandems related to the graph of this type.
 *
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Enumeration from '../../../../phet-core/js/Enumeration.js';
import EnumerationValue from '../../../../phet-core/js/EnumerationValue.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
import calculusGrapher from '../../calculusGrapher.js';
export default class GraphType extends EnumerationValue {
  // Stroke for the graph's curve

  // Tandem name prefix used for tandems related to the graph of this type.

  // Enumeration values
  static ORIGINAL = new GraphType(CalculusGrapherColors.originalCurveStrokeProperty, 'original');
  static INTEGRAL = new GraphType(CalculusGrapherColors.integralCurveStrokeProperty, 'integral');
  static DERIVATIVE = new GraphType(CalculusGrapherColors.derivativeCurveStrokeProperty, 'derivative');
  static SECOND_DERIVATIVE = new GraphType(CalculusGrapherColors.secondDerivativeCurveStrokeProperty, 'secondDerivative');
  static enumeration = new Enumeration(GraphType);
  constructor(strokeProperty, tandemNamePrefix) {
    super();
    this.strokeProperty = strokeProperty;
    this.tandemNamePrefix = tandemNamePrefix;
  }
}
calculusGrapher.register('GraphType', GraphType);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJDYWxjdWx1c0dyYXBoZXJDb2xvcnMiLCJjYWxjdWx1c0dyYXBoZXIiLCJHcmFwaFR5cGUiLCJPUklHSU5BTCIsIm9yaWdpbmFsQ3VydmVTdHJva2VQcm9wZXJ0eSIsIklOVEVHUkFMIiwiaW50ZWdyYWxDdXJ2ZVN0cm9rZVByb3BlcnR5IiwiREVSSVZBVElWRSIsImRlcml2YXRpdmVDdXJ2ZVN0cm9rZVByb3BlcnR5IiwiU0VDT05EX0RFUklWQVRJVkUiLCJzZWNvbmREZXJpdmF0aXZlQ3VydmVTdHJva2VQcm9wZXJ0eSIsImVudW1lcmF0aW9uIiwiY29uc3RydWN0b3IiLCJzdHJva2VQcm9wZXJ0eSIsInRhbmRlbU5hbWVQcmVmaXgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyYXBoVHlwZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHcmFwaFR5cGUgaWRlbnRpZmllcyB0aGUgdHlwZXMgb2YgZ3JhcGhzIGF2YWlsYWJsZSBpbiB0aGlzIHNpbXVsYXRpb24uXHJcbiAqIFRoZSBjbGFzcyBhbHNvIGhhcyBmb3VyIHN0YXRpYyByZWFkb25seSBwcm9wZXJ0aWVzIHRoYXQgcmVwcmVzZW50IHRoZSBmb3VyIHR5cGVzIG9mIGdyYXBocyBhdmFpbGFibGUuXHJcbiAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIG5hbWVkIE9SSUdJTkFMLCBJTlRFR1JBTCwgREVSSVZBVElWRSwgYW5kIFNFQ09ORF9ERVJJVkFUSVZFLlxyXG4gKiBUaGUgY2xhc3MgaGFzIHR3byBwcm9wZXJ0aWVzOlxyXG4gKiAgLSBzdHJva2VQcm9wZXJ0eSAtIHJlcHJlc2VudHMgdGhlIGNvbG9yIG9mIHRoZSBjdXJ2ZSBzdHJva2UgZm9yIHRoZSBncmFwaC5cclxuICogLSB0YW5kZW1OYW1lUHJlZml4IC0gcmVwcmVzZW50cyB0aGUgcHJlZml4IHVzZWQgZm9yIHRhbmRlbXMgcmVsYXRlZCB0byB0aGUgZ3JhcGggb2YgdGhpcyB0eXBlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uVmFsdWUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uVmFsdWUuanMnO1xyXG5pbXBvcnQgeyBQcm9maWxlQ29sb3JQcm9wZXJ0eSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJDb2xvcnMgZnJvbSAnLi4vQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhUeXBlIGV4dGVuZHMgRW51bWVyYXRpb25WYWx1ZSB7XHJcblxyXG4gIC8vIFN0cm9rZSBmb3IgdGhlIGdyYXBoJ3MgY3VydmVcclxuICBwdWJsaWMgcmVhZG9ubHkgc3Ryb2tlUHJvcGVydHk6IFByb2ZpbGVDb2xvclByb3BlcnR5O1xyXG5cclxuICAvLyBUYW5kZW0gbmFtZSBwcmVmaXggdXNlZCBmb3IgdGFuZGVtcyByZWxhdGVkIHRvIHRoZSBncmFwaCBvZiB0aGlzIHR5cGUuXHJcbiAgcHVibGljIHJlYWRvbmx5IHRhbmRlbU5hbWVQcmVmaXg6IHN0cmluZztcclxuXHJcbiAgLy8gRW51bWVyYXRpb24gdmFsdWVzXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBPUklHSU5BTCA9IG5ldyBHcmFwaFR5cGUoIENhbGN1bHVzR3JhcGhlckNvbG9ycy5vcmlnaW5hbEN1cnZlU3Ryb2tlUHJvcGVydHksICdvcmlnaW5hbCcgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElOVEVHUkFMID0gbmV3IEdyYXBoVHlwZSggQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLmludGVncmFsQ3VydmVTdHJva2VQcm9wZXJ0eSwgJ2ludGVncmFsJyApO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgREVSSVZBVElWRSA9IG5ldyBHcmFwaFR5cGUoIENhbGN1bHVzR3JhcGhlckNvbG9ycy5kZXJpdmF0aXZlQ3VydmVTdHJva2VQcm9wZXJ0eSwgJ2Rlcml2YXRpdmUnICk7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBTRUNPTkRfREVSSVZBVElWRSA9IG5ldyBHcmFwaFR5cGUoIENhbGN1bHVzR3JhcGhlckNvbG9ycy5zZWNvbmREZXJpdmF0aXZlQ3VydmVTdHJva2VQcm9wZXJ0eSwgJ3NlY29uZERlcml2YXRpdmUnICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIEdyYXBoVHlwZSApO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN0cm9rZVByb3BlcnR5OiBQcm9maWxlQ29sb3JQcm9wZXJ0eSwgdGFuZGVtTmFtZVByZWZpeDogc3RyaW5nICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuc3Ryb2tlUHJvcGVydHkgPSBzdHJva2VQcm9wZXJ0eTtcclxuICAgIHRoaXMudGFuZGVtTmFtZVByZWZpeCA9IHRhbmRlbU5hbWVQcmVmaXg7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdHcmFwaFR5cGUnLCBHcmFwaFR5cGUgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0MsZ0JBQWdCLE1BQU0sOENBQThDO0FBRTNFLE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUMvRCxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBRXRELGVBQWUsTUFBTUMsU0FBUyxTQUFTSCxnQkFBZ0IsQ0FBQztFQUV0RDs7RUFHQTs7RUFHQTtFQUNBLE9BQXVCSSxRQUFRLEdBQUcsSUFBSUQsU0FBUyxDQUFFRixxQkFBcUIsQ0FBQ0ksMkJBQTJCLEVBQUUsVUFBVyxDQUFDO0VBQ2hILE9BQXVCQyxRQUFRLEdBQUcsSUFBSUgsU0FBUyxDQUFFRixxQkFBcUIsQ0FBQ00sMkJBQTJCLEVBQUUsVUFBVyxDQUFDO0VBQ2hILE9BQXVCQyxVQUFVLEdBQUcsSUFBSUwsU0FBUyxDQUFFRixxQkFBcUIsQ0FBQ1EsNkJBQTZCLEVBQUUsWUFBYSxDQUFDO0VBQ3RILE9BQXVCQyxpQkFBaUIsR0FBRyxJQUFJUCxTQUFTLENBQUVGLHFCQUFxQixDQUFDVSxtQ0FBbUMsRUFBRSxrQkFBbUIsQ0FBQztFQUV6SSxPQUF1QkMsV0FBVyxHQUFHLElBQUliLFdBQVcsQ0FBRUksU0FBVSxDQUFDO0VBRTFEVSxXQUFXQSxDQUFFQyxjQUFvQyxFQUFFQyxnQkFBd0IsRUFBRztJQUNuRixLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQ0QsY0FBYyxHQUFHQSxjQUFjO0lBQ3BDLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUdBLGdCQUFnQjtFQUMxQztBQUNGO0FBRUFiLGVBQWUsQ0FBQ2MsUUFBUSxDQUFFLFdBQVcsRUFBRWIsU0FBVSxDQUFDIn0=