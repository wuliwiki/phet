// Copyright 2023, University of Colorado Boulder

/**
 * GraphSet is an ordered set of GraphType. We need a serializable type for this so that we can maintain references
 * to specific instances when state is saved and restored.
 * See https://github.com/phetsims/calculus-grapher/issues/196
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import calculusGrapher from '../../calculusGrapher.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Tandem from '../../../../tandem/js/Tandem.js';
export default class GraphSet extends PhetioObject {
  // The unique set of GraphTypes that are part of this set, in the top-to-bottom order that they will be displayed.

  constructor(graphTypes, providedOptions) {
    assert && assert(graphTypes.length === _.uniq(graphTypes).length, 'elements in the set must be unique');
    super(optionize()({
      // PhetioObjectOptions
      tandem: Tandem.OPT_OUT,
      phetioState: false,
      phetioType: GraphSet.GraphSetIO
    }, providedOptions));
    this.graphTypes = graphTypes;
  }

  /**
   * Gets the number of GraphTypes in this GraphSet.
   */
  get length() {
    return this.graphTypes.length;
  }

  /**
   * Determines whether this GraphSet includes a specific GraphType.
   */
  includes(graphType) {
    return this.graphTypes.includes(graphType);
  }

  /**
   * Given an array of GraphSet, does it include a specific GraphType.
   */
  static includes(graphSets, graphType) {
    return !!_.find(graphSets, graphSet => graphSet.includes(graphType));
  }

  /**
   * GraphSetIO handles PhET-iO serialization of GraphSet.
   * It implements 'Reference type serialization', as described in the Serialization section of
   * https://github.com/phetsims/phet-io/blob/master/doc/phet-io-instrumentation-technical-guide.md#serialization
   */
  static GraphSetIO = new IOType('GraphSetIO', {
    valueType: GraphSet,
    supertype: ReferenceIO(IOType.ObjectIO),
    documentation: 'An ordered set of graphs, to be displayed together in the user interface'
  });
}
calculusGrapher.register('GraphSet', GraphSet);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0aW9PYmplY3QiLCJjYWxjdWx1c0dyYXBoZXIiLCJSZWZlcmVuY2VJTyIsIklPVHlwZSIsIm9wdGlvbml6ZSIsIlRhbmRlbSIsIkdyYXBoU2V0IiwiY29uc3RydWN0b3IiLCJncmFwaFR5cGVzIiwicHJvdmlkZWRPcHRpb25zIiwiYXNzZXJ0IiwibGVuZ3RoIiwiXyIsInVuaXEiLCJ0YW5kZW0iLCJPUFRfT1VUIiwicGhldGlvU3RhdGUiLCJwaGV0aW9UeXBlIiwiR3JhcGhTZXRJTyIsImluY2x1ZGVzIiwiZ3JhcGhUeXBlIiwiZ3JhcGhTZXRzIiwiZmluZCIsImdyYXBoU2V0IiwidmFsdWVUeXBlIiwic3VwZXJ0eXBlIiwiT2JqZWN0SU8iLCJkb2N1bWVudGF0aW9uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHcmFwaFNldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR3JhcGhTZXQgaXMgYW4gb3JkZXJlZCBzZXQgb2YgR3JhcGhUeXBlLiBXZSBuZWVkIGEgc2VyaWFsaXphYmxlIHR5cGUgZm9yIHRoaXMgc28gdGhhdCB3ZSBjYW4gbWFpbnRhaW4gcmVmZXJlbmNlc1xyXG4gKiB0byBzcGVjaWZpYyBpbnN0YW5jZXMgd2hlbiBzdGF0ZSBpcyBzYXZlZCBhbmQgcmVzdG9yZWQuXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2FsY3VsdXMtZ3JhcGhlci9pc3N1ZXMvMTk2XHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBoZXRpb09iamVjdCwgeyBQaGV0aW9PYmplY3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1BoZXRpb09iamVjdC5qcyc7XHJcbmltcG9ydCBHcmFwaFR5cGUgZnJvbSAnLi9HcmFwaFR5cGUuanMnO1xyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvUmVmZXJlbmNlSU8uanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9JT1R5cGUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBHcmFwaFNldE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tPcHRpb25hbDxQaGV0aW9PYmplY3QsICdwaGV0aW9Eb2N1bWVudGF0aW9uJyB8ICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYXBoU2V0IGV4dGVuZHMgUGhldGlvT2JqZWN0IHtcclxuXHJcbiAgLy8gVGhlIHVuaXF1ZSBzZXQgb2YgR3JhcGhUeXBlcyB0aGF0IGFyZSBwYXJ0IG9mIHRoaXMgc2V0LCBpbiB0aGUgdG9wLXRvLWJvdHRvbSBvcmRlciB0aGF0IHRoZXkgd2lsbCBiZSBkaXNwbGF5ZWQuXHJcbiAgcHVibGljIHJlYWRvbmx5IGdyYXBoVHlwZXM6IEdyYXBoVHlwZVtdO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdyYXBoVHlwZXM6IEdyYXBoVHlwZVtdLCBwcm92aWRlZE9wdGlvbnM/OiBHcmFwaFNldE9wdGlvbnMgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBncmFwaFR5cGVzLmxlbmd0aCA9PT0gXy51bmlxKCBncmFwaFR5cGVzICkubGVuZ3RoLCAnZWxlbWVudHMgaW4gdGhlIHNldCBtdXN0IGJlIHVuaXF1ZScgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9uaXplPEdyYXBoU2V0T3B0aW9ucywgU2VsZk9wdGlvbnMsIFBoZXRpb09iamVjdE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFBoZXRpb09iamVjdE9wdGlvbnNcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVCxcclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlLFxyXG4gICAgICBwaGV0aW9UeXBlOiBHcmFwaFNldC5HcmFwaFNldElPXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKSApO1xyXG5cclxuICAgIHRoaXMuZ3JhcGhUeXBlcyA9IGdyYXBoVHlwZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgR3JhcGhUeXBlcyBpbiB0aGlzIEdyYXBoU2V0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgbGVuZ3RoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmdyYXBoVHlwZXMubGVuZ3RoOyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGlzIEdyYXBoU2V0IGluY2x1ZGVzIGEgc3BlY2lmaWMgR3JhcGhUeXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmNsdWRlcyggZ3JhcGhUeXBlOiBHcmFwaFR5cGUgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5ncmFwaFR5cGVzLmluY2x1ZGVzKCBncmFwaFR5cGUgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdpdmVuIGFuIGFycmF5IG9mIEdyYXBoU2V0LCBkb2VzIGl0IGluY2x1ZGUgYSBzcGVjaWZpYyBHcmFwaFR5cGUuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBpbmNsdWRlcyggZ3JhcGhTZXRzOiBHcmFwaFNldFtdLCBncmFwaFR5cGU6IEdyYXBoVHlwZSApOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIV8uZmluZCggZ3JhcGhTZXRzLCBncmFwaFNldCA9PiBncmFwaFNldC5pbmNsdWRlcyggZ3JhcGhUeXBlICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdyYXBoU2V0SU8gaGFuZGxlcyBQaEVULWlPIHNlcmlhbGl6YXRpb24gb2YgR3JhcGhTZXQuXHJcbiAgICogSXQgaW1wbGVtZW50cyAnUmVmZXJlbmNlIHR5cGUgc2VyaWFsaXphdGlvbicsIGFzIGRlc2NyaWJlZCBpbiB0aGUgU2VyaWFsaXphdGlvbiBzZWN0aW9uIG9mXHJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtaW8vYmxvYi9tYXN0ZXIvZG9jL3BoZXQtaW8taW5zdHJ1bWVudGF0aW9uLXRlY2huaWNhbC1ndWlkZS5tZCNzZXJpYWxpemF0aW9uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBHcmFwaFNldElPID0gbmV3IElPVHlwZSggJ0dyYXBoU2V0SU8nLCB7XHJcbiAgICB2YWx1ZVR5cGU6IEdyYXBoU2V0LFxyXG4gICAgc3VwZXJ0eXBlOiBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPICksXHJcbiAgICBkb2N1bWVudGF0aW9uOiAnQW4gb3JkZXJlZCBzZXQgb2YgZ3JhcGhzLCB0byBiZSBkaXNwbGF5ZWQgdG9nZXRoZXIgaW4gdGhlIHVzZXIgaW50ZXJmYWNlJ1xyXG4gIH0gKTtcclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnR3JhcGhTZXQnLCBHcmFwaFNldCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsWUFBWSxNQUErQix1Q0FBdUM7QUFFekYsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLE9BQU9DLE1BQU0sTUFBTSx1Q0FBdUM7QUFFMUQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFDbkYsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQU1wRCxlQUFlLE1BQU1DLFFBQVEsU0FBU04sWUFBWSxDQUFDO0VBRWpEOztFQUdPTyxXQUFXQSxDQUFFQyxVQUF1QixFQUFFQyxlQUFpQyxFQUFHO0lBQy9FQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsVUFBVSxDQUFDRyxNQUFNLEtBQUtDLENBQUMsQ0FBQ0MsSUFBSSxDQUFFTCxVQUFXLENBQUMsQ0FBQ0csTUFBTSxFQUFFLG9DQUFxQyxDQUFDO0lBRTNHLEtBQUssQ0FBRVAsU0FBUyxDQUFvRCxDQUFDLENBQUU7TUFFckU7TUFDQVUsTUFBTSxFQUFFVCxNQUFNLENBQUNVLE9BQU87TUFDdEJDLFdBQVcsRUFBRSxLQUFLO01BQ2xCQyxVQUFVLEVBQUVYLFFBQVEsQ0FBQ1k7SUFDdkIsQ0FBQyxFQUFFVCxlQUFnQixDQUFFLENBQUM7SUFFdEIsSUFBSSxDQUFDRCxVQUFVLEdBQUdBLFVBQVU7RUFDOUI7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsSUFBV0csTUFBTUEsQ0FBQSxFQUFXO0lBQUUsT0FBTyxJQUFJLENBQUNILFVBQVUsQ0FBQ0csTUFBTTtFQUFFOztFQUU3RDtBQUNGO0FBQ0E7RUFDU1EsUUFBUUEsQ0FBRUMsU0FBb0IsRUFBWTtJQUMvQyxPQUFPLElBQUksQ0FBQ1osVUFBVSxDQUFDVyxRQUFRLENBQUVDLFNBQVUsQ0FBQztFQUM5Qzs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjRCxRQUFRQSxDQUFFRSxTQUFxQixFQUFFRCxTQUFvQixFQUFZO0lBQzdFLE9BQU8sQ0FBQyxDQUFDUixDQUFDLENBQUNVLElBQUksQ0FBRUQsU0FBUyxFQUFFRSxRQUFRLElBQUlBLFFBQVEsQ0FBQ0osUUFBUSxDQUFFQyxTQUFVLENBQUUsQ0FBQztFQUMxRTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBdUJGLFVBQVUsR0FBRyxJQUFJZixNQUFNLENBQUUsWUFBWSxFQUFFO0lBQzVEcUIsU0FBUyxFQUFFbEIsUUFBUTtJQUNuQm1CLFNBQVMsRUFBRXZCLFdBQVcsQ0FBRUMsTUFBTSxDQUFDdUIsUUFBUyxDQUFDO0lBQ3pDQyxhQUFhLEVBQUU7RUFDakIsQ0FBRSxDQUFDO0FBQ0w7QUFFQTFCLGVBQWUsQ0FBQzJCLFFBQVEsQ0FBRSxVQUFVLEVBQUV0QixRQUFTLENBQUMifQ==