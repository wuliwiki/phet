// Copyright 2022-2023, University of Colorado Boulder

/**
 * CurveManipulationProperties is responsible for
 *  - Keeping track of the (shared) current mode associated with curves. When the user drags a TransformedCurve, the curve is
 *    manipulated based on the current CurveManipulationMode, allowing the user to create custom curves.
 *  - Keeping track of the 'width' of the curve-manipulation. This only applies to HILL, TRIANGLE, PEDESTAL, PARABOLA,
 *     and SINUSOID, and the value is interpreted differently for each response algorithm to curve user-manipulation.
 *
 * @author Martin Veillette
 */

import calculusGrapher from '../../calculusGrapher.js';
import CurveManipulationMode from './CurveManipulationMode.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
// Constants
const CURVE_MANIPULATION_WIDTH_RANGE = CalculusGrapherConstants.CURVE_MANIPULATION_WIDTH_RANGE;
export default class CurveManipulationProperties {
  // The 'mode' that user is in for manipulating curves.

  // The width of the curve-manipulation. This only applies to some CurveManipulationModes
  // and the value is interpreted differently for each response algorithm to curve
  // user-manipulation.
  constructor(curveManipulationModeChoices, providedOptions) {
    const options = providedOptions;

    // Initial mode of the simulation
    const initialMode = CurveManipulationMode.HILL;
    assert && assert(curveManipulationModeChoices.includes(initialMode), `curveManipulationModeChoices must include initial value: ${initialMode}`);
    this.modeProperty = new EnumerationProperty(initialMode, {
      validValues: curveManipulationModeChoices,
      tandem: options.tandem.createTandem('modeProperty'),
      phetioDocumentation: 'Determines how the curve will be modified (manipulated) when the student interacts with it. ' + 'Applies to the interactive (original and predict) curves only.'
    });
    this.widthProperty = new NumberProperty(CURVE_MANIPULATION_WIDTH_RANGE.defaultValue, {
      range: CURVE_MANIPULATION_WIDTH_RANGE,
      tandem: options.tandem.createTandem('widthProperty'),
      phetioDocumentation: 'Determines how wide the change is when modifying (manipulating) a curve.' + 'Note that is not applicable to all manipulation modes. ' + 'If a width slider is not shown for the selected manipulation mode, ' + 'then width is irrelevant for that mode.'
    });
  }

  /**
   * Gets the current CurveManipulationMode.
   */
  get mode() {
    return this.modeProperty.value;
  }

  /**
   * Gets the current curve-manipulation width.
   */
  get width() {
    return this.widthProperty.value;
  }
  reset() {
    this.modeProperty.reset();
    this.widthProperty.reset();
  }
}
calculusGrapher.register('CurveManipulationProperties', CurveManipulationProperties);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWx1c0dyYXBoZXIiLCJDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUiLCJFbnVtZXJhdGlvblByb3BlcnR5IiwiTnVtYmVyUHJvcGVydHkiLCJDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMiLCJDVVJWRV9NQU5JUFVMQVRJT05fV0lEVEhfUkFOR0UiLCJDdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMiLCJjb25zdHJ1Y3RvciIsImN1cnZlTWFuaXB1bGF0aW9uTW9kZUNob2ljZXMiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaW5pdGlhbE1vZGUiLCJISUxMIiwiYXNzZXJ0IiwiaW5jbHVkZXMiLCJtb2RlUHJvcGVydHkiLCJ2YWxpZFZhbHVlcyIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJ3aWR0aFByb3BlcnR5IiwiZGVmYXVsdFZhbHVlIiwicmFuZ2UiLCJtb2RlIiwidmFsdWUiLCJ3aWR0aCIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzIGlzIHJlc3BvbnNpYmxlIGZvclxyXG4gKiAgLSBLZWVwaW5nIHRyYWNrIG9mIHRoZSAoc2hhcmVkKSBjdXJyZW50IG1vZGUgYXNzb2NpYXRlZCB3aXRoIGN1cnZlcy4gV2hlbiB0aGUgdXNlciBkcmFncyBhIFRyYW5zZm9ybWVkQ3VydmUsIHRoZSBjdXJ2ZSBpc1xyXG4gKiAgICBtYW5pcHVsYXRlZCBiYXNlZCBvbiB0aGUgY3VycmVudCBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGUsIGFsbG93aW5nIHRoZSB1c2VyIHRvIGNyZWF0ZSBjdXN0b20gY3VydmVzLlxyXG4gKiAgLSBLZWVwaW5nIHRyYWNrIG9mIHRoZSAnd2lkdGgnIG9mIHRoZSBjdXJ2ZS1tYW5pcHVsYXRpb24uIFRoaXMgb25seSBhcHBsaWVzIHRvIEhJTEwsIFRSSUFOR0xFLCBQRURFU1RBTCwgUEFSQUJPTEEsXHJcbiAqICAgICBhbmQgU0lOVVNPSUQsIGFuZCB0aGUgdmFsdWUgaXMgaW50ZXJwcmV0ZWQgZGlmZmVyZW50bHkgZm9yIGVhY2ggcmVzcG9uc2UgYWxnb3JpdGhtIHRvIGN1cnZlIHVzZXItbWFuaXB1bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICovXHJcblxyXG5pbXBvcnQgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IGNhbGN1bHVzR3JhcGhlciBmcm9tICcuLi8uLi9jYWxjdWx1c0dyYXBoZXIuanMnO1xyXG5pbXBvcnQgQ3VydmVNYW5pcHVsYXRpb25Nb2RlIGZyb20gJy4vQ3VydmVNYW5pcHVsYXRpb25Nb2RlLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIGZyb20gJy4uL0NhbGN1bHVzR3JhcGhlckNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcblxyXG4vLyBDb25zdGFudHNcclxuY29uc3QgQ1VSVkVfTUFOSVBVTEFUSU9OX1dJRFRIX1JBTkdFID0gQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzLkNVUlZFX01BTklQVUxBVElPTl9XSURUSF9SQU5HRTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBDdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXNPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VydmVNYW5pcHVsYXRpb25Qcm9wZXJ0aWVzIHtcclxuXHJcbiAgLy8gVGhlICdtb2RlJyB0aGF0IHVzZXIgaXMgaW4gZm9yIG1hbmlwdWxhdGluZyBjdXJ2ZXMuXHJcbiAgcHVibGljIHJlYWRvbmx5IG1vZGVQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxDdXJ2ZU1hbmlwdWxhdGlvbk1vZGU+O1xyXG5cclxuICAvLyBUaGUgd2lkdGggb2YgdGhlIGN1cnZlLW1hbmlwdWxhdGlvbi4gVGhpcyBvbmx5IGFwcGxpZXMgdG8gc29tZSBDdXJ2ZU1hbmlwdWxhdGlvbk1vZGVzXHJcbiAgLy8gYW5kIHRoZSB2YWx1ZSBpcyBpbnRlcnByZXRlZCBkaWZmZXJlbnRseSBmb3IgZWFjaCByZXNwb25zZSBhbGdvcml0aG0gdG8gY3VydmVcclxuICAvLyB1c2VyLW1hbmlwdWxhdGlvbi5cclxuICBwdWJsaWMgcmVhZG9ubHkgd2lkdGhQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY3VydmVNYW5pcHVsYXRpb25Nb2RlQ2hvaWNlczogQ3VydmVNYW5pcHVsYXRpb25Nb2RlW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IEN1cnZlTWFuaXB1bGF0aW9uUHJvcGVydGllc09wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHByb3ZpZGVkT3B0aW9ucztcclxuXHJcbiAgICAvLyBJbml0aWFsIG1vZGUgb2YgdGhlIHNpbXVsYXRpb25cclxuICAgIGNvbnN0IGluaXRpYWxNb2RlID0gQ3VydmVNYW5pcHVsYXRpb25Nb2RlLkhJTEw7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggY3VydmVNYW5pcHVsYXRpb25Nb2RlQ2hvaWNlcy5pbmNsdWRlcyggaW5pdGlhbE1vZGUgKSxcclxuICAgICAgYGN1cnZlTWFuaXB1bGF0aW9uTW9kZUNob2ljZXMgbXVzdCBpbmNsdWRlIGluaXRpYWwgdmFsdWU6ICR7aW5pdGlhbE1vZGV9YCApO1xyXG5cclxuICAgIHRoaXMubW9kZVByb3BlcnR5ID0gbmV3IEVudW1lcmF0aW9uUHJvcGVydHkoIGluaXRpYWxNb2RlLCB7XHJcbiAgICAgIHZhbGlkVmFsdWVzOiBjdXJ2ZU1hbmlwdWxhdGlvbk1vZGVDaG9pY2VzLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ0RldGVybWluZXMgaG93IHRoZSBjdXJ2ZSB3aWxsIGJlIG1vZGlmaWVkIChtYW5pcHVsYXRlZCkgd2hlbiB0aGUgc3R1ZGVudCBpbnRlcmFjdHMgd2l0aCBpdC4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdBcHBsaWVzIHRvIHRoZSBpbnRlcmFjdGl2ZSAob3JpZ2luYWwgYW5kIHByZWRpY3QpIGN1cnZlcyBvbmx5LidcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLndpZHRoUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIENVUlZFX01BTklQVUxBVElPTl9XSURUSF9SQU5HRS5kZWZhdWx0VmFsdWUsIHtcclxuICAgICAgcmFuZ2U6IENVUlZFX01BTklQVUxBVElPTl9XSURUSF9SQU5HRSxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd3aWR0aFByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnRGV0ZXJtaW5lcyBob3cgd2lkZSB0aGUgY2hhbmdlIGlzIHdoZW4gbW9kaWZ5aW5nIChtYW5pcHVsYXRpbmcpIGEgY3VydmUuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdOb3RlIHRoYXQgaXMgbm90IGFwcGxpY2FibGUgdG8gYWxsIG1hbmlwdWxhdGlvbiBtb2Rlcy4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdJZiBhIHdpZHRoIHNsaWRlciBpcyBub3Qgc2hvd24gZm9yIHRoZSBzZWxlY3RlZCBtYW5pcHVsYXRpb24gbW9kZSwgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aGVuIHdpZHRoIGlzIGlycmVsZXZhbnQgZm9yIHRoYXQgbW9kZS4nXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBjdXJyZW50IEN1cnZlTWFuaXB1bGF0aW9uTW9kZS5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IG1vZGUoKTogQ3VydmVNYW5pcHVsYXRpb25Nb2RlIHtcclxuICAgIHJldHVybiB0aGlzLm1vZGVQcm9wZXJ0eS52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgY3VydmUtbWFuaXB1bGF0aW9uIHdpZHRoLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgd2lkdGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLndpZHRoUHJvcGVydHkudmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLm1vZGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy53aWR0aFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG5cclxufVxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdDdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMnLCBDdXJ2ZU1hbmlwdWxhdGlvblByb3BlcnRpZXMgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsT0FBT0EsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxxQkFBcUIsTUFBTSw0QkFBNEI7QUFDOUQsT0FBT0MsbUJBQW1CLE1BQU0sNENBQTRDO0FBQzVFLE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0Msd0JBQXdCLE1BQU0sZ0NBQWdDO0FBR3JFO0FBQ0EsTUFBTUMsOEJBQThCLEdBQUdELHdCQUF3QixDQUFDQyw4QkFBOEI7QUFNOUYsZUFBZSxNQUFNQywyQkFBMkIsQ0FBQztFQUUvQzs7RUFHQTtFQUNBO0VBQ0E7RUFHT0MsV0FBV0EsQ0FBRUMsNEJBQXFELEVBQ3JEQyxlQUFtRCxFQUFHO0lBRXhFLE1BQU1DLE9BQU8sR0FBR0QsZUFBZTs7SUFFL0I7SUFDQSxNQUFNRSxXQUFXLEdBQUdWLHFCQUFxQixDQUFDVyxJQUFJO0lBRTlDQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUwsNEJBQTRCLENBQUNNLFFBQVEsQ0FBRUgsV0FBWSxDQUFDLEVBQ25FLDREQUEyREEsV0FBWSxFQUFFLENBQUM7SUFFN0UsSUFBSSxDQUFDSSxZQUFZLEdBQUcsSUFBSWIsbUJBQW1CLENBQUVTLFdBQVcsRUFBRTtNQUN4REssV0FBVyxFQUFFUiw0QkFBNEI7TUFDekNTLE1BQU0sRUFBRVAsT0FBTyxDQUFDTyxNQUFNLENBQUNDLFlBQVksQ0FBRSxjQUFlLENBQUM7TUFDckRDLG1CQUFtQixFQUFFLDhGQUE4RixHQUM5RjtJQUN2QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFJakIsY0FBYyxDQUFFRSw4QkFBOEIsQ0FBQ2dCLFlBQVksRUFBRTtNQUNwRkMsS0FBSyxFQUFFakIsOEJBQThCO01BQ3JDWSxNQUFNLEVBQUVQLE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxZQUFZLENBQUUsZUFBZ0IsQ0FBQztNQUN0REMsbUJBQW1CLEVBQUUsMEVBQTBFLEdBQzFFLHlEQUF5RCxHQUN6RCxxRUFBcUUsR0FDckU7SUFDdkIsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsSUFBV0ksSUFBSUEsQ0FBQSxFQUEwQjtJQUN2QyxPQUFPLElBQUksQ0FBQ1IsWUFBWSxDQUFDUyxLQUFLO0VBQ2hDOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLElBQVdDLEtBQUtBLENBQUEsRUFBVztJQUN6QixPQUFPLElBQUksQ0FBQ0wsYUFBYSxDQUFDSSxLQUFLO0VBQ2pDO0VBRU9FLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNYLFlBQVksQ0FBQ1csS0FBSyxDQUFDLENBQUM7SUFDekIsSUFBSSxDQUFDTixhQUFhLENBQUNNLEtBQUssQ0FBQyxDQUFDO0VBQzVCO0FBRUY7QUFDQTFCLGVBQWUsQ0FBQzJCLFFBQVEsQ0FBRSw2QkFBNkIsRUFBRXJCLDJCQUE0QixDQUFDIn0=