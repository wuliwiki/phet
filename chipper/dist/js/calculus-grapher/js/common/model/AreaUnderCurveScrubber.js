// Copyright 2023, University of Colorado Boulder

/**
 * AreaUnderCurveScrubber is the model element for the area-under-curve scrubber. It can be moved horizontally,
 * and the accumulated area (or 'net signed area') is the area between x=0 and the scrubber's x position.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import AncillaryTool from './AncillaryTool.js';
import CalculusGrapherConstants from '../CalculusGrapherConstants.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherColors from '../CalculusGrapherColors.js';
export default class AreaUnderCurveScrubber extends AncillaryTool {
  // Color for the scrubber handle, vertical line, and 'accumulation line'

  // Color used to fill the area that is above x=0

  // Color used to fill the area that is below x=0

  constructor(integralCurve, originalCurve, derivativeCurve, secondDerivativeCurve, tandem) {
    super(integralCurve, originalCurve, derivativeCurve, secondDerivativeCurve, {
      // Close to zero, but not at zero, so that the scrubber is noticeable.
      // See https://github.com/phetsims/calculus-grapher/issues/207#issuecomment-1434759100
      x: CalculusGrapherConstants.CURVE_X_RANGE.min + CalculusGrapherConstants.CURVE_X_RANGE.getLength() / 50,
      // Do not feature derivatives in Studio, because they are not relevant for area-under-curve,
      // see https://github.com/phetsims/calculus-grapher/issues/225
      yDerivativePropertyFeatured: false,
      ySecondDerivativePropertyFeatured: false,
      tandem: tandem
    });
    this.colorProperty = CalculusGrapherColors.integralCurveStrokeProperty;
    this.positiveFillProperty = CalculusGrapherColors.integralPositiveFillProperty;
    this.negativeFillProperty = CalculusGrapherColors.integralNegativeFillProperty;
    this.addLinkedElement(this.colorProperty, {
      tandem: tandem.createTandem('colorProperty'),
      phetioDocumentation: 'Color for the scrubber handle, vertical line, and accumulation line.'
    });
    this.addLinkedElement(this.positiveFillProperty, {
      tandem: tandem.createTandem('positiveFillProperty'),
      phetioDocumentation: 'Color for positive area in the area plot, and in the "Net Signed Area" accordion box.'
    });
    this.addLinkedElement(this.negativeFillProperty, {
      tandem: tandem.createTandem('negativeFillProperty'),
      phetioDocumentation: 'Color for negative area in the area plot, and in the "Net Signed Area" accordion box.'
    });
    this.addLinkedElement(this.yIntegralProperty, {
      tandem: tandem.createTandem('areaUnderCurveProperty'),
      phetioDocumentation: 'The area under the curve, which is the same as yIntegralProperty.'
    });
  }
}
calculusGrapher.register('AreaUnderCurveScrubber', AreaUnderCurveScrubber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmNpbGxhcnlUb29sIiwiQ2FsY3VsdXNHcmFwaGVyQ29uc3RhbnRzIiwiY2FsY3VsdXNHcmFwaGVyIiwiQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIiwiQXJlYVVuZGVyQ3VydmVTY3J1YmJlciIsImNvbnN0cnVjdG9yIiwiaW50ZWdyYWxDdXJ2ZSIsIm9yaWdpbmFsQ3VydmUiLCJkZXJpdmF0aXZlQ3VydmUiLCJzZWNvbmREZXJpdmF0aXZlQ3VydmUiLCJ0YW5kZW0iLCJ4IiwiQ1VSVkVfWF9SQU5HRSIsIm1pbiIsImdldExlbmd0aCIsInlEZXJpdmF0aXZlUHJvcGVydHlGZWF0dXJlZCIsInlTZWNvbmREZXJpdmF0aXZlUHJvcGVydHlGZWF0dXJlZCIsImNvbG9yUHJvcGVydHkiLCJpbnRlZ3JhbEN1cnZlU3Ryb2tlUHJvcGVydHkiLCJwb3NpdGl2ZUZpbGxQcm9wZXJ0eSIsImludGVncmFsUG9zaXRpdmVGaWxsUHJvcGVydHkiLCJuZWdhdGl2ZUZpbGxQcm9wZXJ0eSIsImludGVncmFsTmVnYXRpdmVGaWxsUHJvcGVydHkiLCJhZGRMaW5rZWRFbGVtZW50IiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInlJbnRlZ3JhbFByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBcmVhVW5kZXJDdXJ2ZVNjcnViYmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBcmVhVW5kZXJDdXJ2ZVNjcnViYmVyIGlzIHRoZSBtb2RlbCBlbGVtZW50IGZvciB0aGUgYXJlYS11bmRlci1jdXJ2ZSBzY3J1YmJlci4gSXQgY2FuIGJlIG1vdmVkIGhvcml6b250YWxseSxcclxuICogYW5kIHRoZSBhY2N1bXVsYXRlZCBhcmVhIChvciAnbmV0IHNpZ25lZCBhcmVhJykgaXMgdGhlIGFyZWEgYmV0d2VlbiB4PTAgYW5kIHRoZSBzY3J1YmJlcidzIHggcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEFuY2lsbGFyeVRvb2wgZnJvbSAnLi9BbmNpbGxhcnlUb29sLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbnN0YW50cyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ3VydmUgZnJvbSAnLi9DdXJ2ZS5qcyc7XHJcbmltcG9ydCBjYWxjdWx1c0dyYXBoZXIgZnJvbSAnLi4vLi4vY2FsY3VsdXNHcmFwaGVyLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlckNvbG9ycyBmcm9tICcuLi9DYWxjdWx1c0dyYXBoZXJDb2xvcnMuanMnO1xyXG5pbXBvcnQgeyBDb2xvciwgUHJvZmlsZUNvbG9yUHJvcGVydHkgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1JlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJlYVVuZGVyQ3VydmVTY3J1YmJlciBleHRlbmRzIEFuY2lsbGFyeVRvb2wge1xyXG5cclxuICAvLyBDb2xvciBmb3IgdGhlIHNjcnViYmVyIGhhbmRsZSwgdmVydGljYWwgbGluZSwgYW5kICdhY2N1bXVsYXRpb24gbGluZSdcclxuICBwdWJsaWMgcmVhZG9ubHkgY29sb3JQcm9wZXJ0eTogUHJvZmlsZUNvbG9yUHJvcGVydHk7XHJcblxyXG4gIC8vIENvbG9yIHVzZWQgdG8gZmlsbCB0aGUgYXJlYSB0aGF0IGlzIGFib3ZlIHg9MFxyXG4gIHB1YmxpYyByZWFkb25seSBwb3NpdGl2ZUZpbGxQcm9wZXJ0eTogUmVhZE9ubHlQcm9wZXJ0eTxDb2xvcj47XHJcblxyXG4gIC8vIENvbG9yIHVzZWQgdG8gZmlsbCB0aGUgYXJlYSB0aGF0IGlzIGJlbG93IHg9MFxyXG4gIHB1YmxpYyByZWFkb25seSBuZWdhdGl2ZUZpbGxQcm9wZXJ0eTogUmVhZE9ubHlQcm9wZXJ0eTxDb2xvcj47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIGludGVncmFsQ3VydmU6IEN1cnZlLFxyXG4gICAgb3JpZ2luYWxDdXJ2ZTogQ3VydmUsXHJcbiAgICBkZXJpdmF0aXZlQ3VydmU6IEN1cnZlLFxyXG4gICAgc2Vjb25kRGVyaXZhdGl2ZUN1cnZlOiBDdXJ2ZSxcclxuICAgIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCBpbnRlZ3JhbEN1cnZlLCBvcmlnaW5hbEN1cnZlLCBkZXJpdmF0aXZlQ3VydmUsIHNlY29uZERlcml2YXRpdmVDdXJ2ZSwge1xyXG5cclxuICAgICAgLy8gQ2xvc2UgdG8gemVybywgYnV0IG5vdCBhdCB6ZXJvLCBzbyB0aGF0IHRoZSBzY3J1YmJlciBpcyBub3RpY2VhYmxlLlxyXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzIwNyNpc3N1ZWNvbW1lbnQtMTQzNDc1OTEwMFxyXG4gICAgICB4OiBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuQ1VSVkVfWF9SQU5HRS5taW4gKyBDYWxjdWx1c0dyYXBoZXJDb25zdGFudHMuQ1VSVkVfWF9SQU5HRS5nZXRMZW5ndGgoKSAvIDUwLFxyXG5cclxuICAgICAgLy8gRG8gbm90IGZlYXR1cmUgZGVyaXZhdGl2ZXMgaW4gU3R1ZGlvLCBiZWNhdXNlIHRoZXkgYXJlIG5vdCByZWxldmFudCBmb3IgYXJlYS11bmRlci1jdXJ2ZSxcclxuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jYWxjdWx1cy1ncmFwaGVyL2lzc3Vlcy8yMjVcclxuICAgICAgeURlcml2YXRpdmVQcm9wZXJ0eUZlYXR1cmVkOiBmYWxzZSxcclxuICAgICAgeVNlY29uZERlcml2YXRpdmVQcm9wZXJ0eUZlYXR1cmVkOiBmYWxzZSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmNvbG9yUHJvcGVydHkgPSBDYWxjdWx1c0dyYXBoZXJDb2xvcnMuaW50ZWdyYWxDdXJ2ZVN0cm9rZVByb3BlcnR5O1xyXG4gICAgdGhpcy5wb3NpdGl2ZUZpbGxQcm9wZXJ0eSA9IENhbGN1bHVzR3JhcGhlckNvbG9ycy5pbnRlZ3JhbFBvc2l0aXZlRmlsbFByb3BlcnR5O1xyXG4gICAgdGhpcy5uZWdhdGl2ZUZpbGxQcm9wZXJ0eSA9IENhbGN1bHVzR3JhcGhlckNvbG9ycy5pbnRlZ3JhbE5lZ2F0aXZlRmlsbFByb3BlcnR5O1xyXG5cclxuICAgIHRoaXMuYWRkTGlua2VkRWxlbWVudCggdGhpcy5jb2xvclByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvbG9yUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdDb2xvciBmb3IgdGhlIHNjcnViYmVyIGhhbmRsZSwgdmVydGljYWwgbGluZSwgYW5kIGFjY3VtdWxhdGlvbiBsaW5lLidcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIHRoaXMucG9zaXRpdmVGaWxsUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncG9zaXRpdmVGaWxsUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdDb2xvciBmb3IgcG9zaXRpdmUgYXJlYSBpbiB0aGUgYXJlYSBwbG90LCBhbmQgaW4gdGhlIFwiTmV0IFNpZ25lZCBBcmVhXCIgYWNjb3JkaW9uIGJveC4nXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRMaW5rZWRFbGVtZW50KCB0aGlzLm5lZ2F0aXZlRmlsbFByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ25lZ2F0aXZlRmlsbFByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnQ29sb3IgZm9yIG5lZ2F0aXZlIGFyZWEgaW4gdGhlIGFyZWEgcGxvdCwgYW5kIGluIHRoZSBcIk5ldCBTaWduZWQgQXJlYVwiIGFjY29yZGlvbiBib3guJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYWRkTGlua2VkRWxlbWVudCggdGhpcy55SW50ZWdyYWxQcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdhcmVhVW5kZXJDdXJ2ZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVGhlIGFyZWEgdW5kZXIgdGhlIGN1cnZlLCB3aGljaCBpcyB0aGUgc2FtZSBhcyB5SW50ZWdyYWxQcm9wZXJ0eS4nXHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdBcmVhVW5kZXJDdXJ2ZVNjcnViYmVyJywgQXJlYVVuZGVyQ3VydmVTY3J1YmJlciApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxhQUFhLE1BQU0sb0JBQW9CO0FBQzlDLE9BQU9DLHdCQUF3QixNQUFNLGdDQUFnQztBQUVyRSxPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHFCQUFxQixNQUFNLDZCQUE2QjtBQUsvRCxlQUFlLE1BQU1DLHNCQUFzQixTQUFTSixhQUFhLENBQUM7RUFFaEU7O0VBR0E7O0VBR0E7O0VBR09LLFdBQVdBLENBQ2hCQyxhQUFvQixFQUNwQkMsYUFBb0IsRUFDcEJDLGVBQXNCLEVBQ3RCQyxxQkFBNEIsRUFDNUJDLE1BQWMsRUFBRztJQUVqQixLQUFLLENBQUVKLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxlQUFlLEVBQUVDLHFCQUFxQixFQUFFO01BRTNFO01BQ0E7TUFDQUUsQ0FBQyxFQUFFVix3QkFBd0IsQ0FBQ1csYUFBYSxDQUFDQyxHQUFHLEdBQUdaLHdCQUF3QixDQUFDVyxhQUFhLENBQUNFLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtNQUV2RztNQUNBO01BQ0FDLDJCQUEyQixFQUFFLEtBQUs7TUFDbENDLGlDQUFpQyxFQUFFLEtBQUs7TUFDeENOLE1BQU0sRUFBRUE7SUFDVixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNPLGFBQWEsR0FBR2QscUJBQXFCLENBQUNlLDJCQUEyQjtJQUN0RSxJQUFJLENBQUNDLG9CQUFvQixHQUFHaEIscUJBQXFCLENBQUNpQiw0QkFBNEI7SUFDOUUsSUFBSSxDQUFDQyxvQkFBb0IsR0FBR2xCLHFCQUFxQixDQUFDbUIsNEJBQTRCO0lBRTlFLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUUsSUFBSSxDQUFDTixhQUFhLEVBQUU7TUFDekNQLE1BQU0sRUFBRUEsTUFBTSxDQUFDYyxZQUFZLENBQUUsZUFBZ0IsQ0FBQztNQUM5Q0MsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDRixnQkFBZ0IsQ0FBRSxJQUFJLENBQUNKLG9CQUFvQixFQUFFO01BQ2hEVCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ2MsWUFBWSxDQUFFLHNCQUF1QixDQUFDO01BQ3JEQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNGLGdCQUFnQixDQUFFLElBQUksQ0FBQ0Ysb0JBQW9CLEVBQUU7TUFDaERYLE1BQU0sRUFBRUEsTUFBTSxDQUFDYyxZQUFZLENBQUUsc0JBQXVCLENBQUM7TUFDckRDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0YsZ0JBQWdCLENBQUUsSUFBSSxDQUFDRyxpQkFBaUIsRUFBRTtNQUM3Q2hCLE1BQU0sRUFBRUEsTUFBTSxDQUFDYyxZQUFZLENBQUUsd0JBQXlCLENBQUM7TUFDdkRDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXZCLGVBQWUsQ0FBQ3lCLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRXZCLHNCQUF1QixDQUFDIn0=