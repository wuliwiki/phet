// Copyright 2020-2023, University of Colorado Boulder

/**
 * DerivativeModel is the top-level model for the 'Derivative' screen.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherModel from '../../common/model/CalculusGrapherModel.js';
import optionize from '../../../../phet-core/js/optionize.js';
import CurveManipulationMode from '../../common/model/CurveManipulationMode.js';
import TangentScrubber from '../../common/model/TangentScrubber.js';
export default class DerivativeModel extends CalculusGrapherModel {
  constructor(providedOptions) {
    const options = optionize()({
      // CalculusGrapherModelOptions
      curveManipulationModeChoices: [CurveManipulationMode.HILL, CurveManipulationMode.PEDESTAL, CurveManipulationMode.TILT, CurveManipulationMode.SHIFT],
      hasTangentScrubber: true
    }, providedOptions);
    super(options);
    this.tangentScrubber = new TangentScrubber(this.integralCurve, this.originalCurve, this.derivativeCurve, this.secondDerivativeCurve, this.toolsTandem.createTandem('tangentScrubber'));
  }
  reset() {
    this.tangentScrubber.reset();
    super.reset();
  }
}
calculusGrapher.register('DerivativeModel', DerivativeModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJNb2RlbCIsIm9wdGlvbml6ZSIsIkN1cnZlTWFuaXB1bGF0aW9uTW9kZSIsIlRhbmdlbnRTY3J1YmJlciIsIkRlcml2YXRpdmVNb2RlbCIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImN1cnZlTWFuaXB1bGF0aW9uTW9kZUNob2ljZXMiLCJISUxMIiwiUEVERVNUQUwiLCJUSUxUIiwiU0hJRlQiLCJoYXNUYW5nZW50U2NydWJiZXIiLCJ0YW5nZW50U2NydWJiZXIiLCJpbnRlZ3JhbEN1cnZlIiwib3JpZ2luYWxDdXJ2ZSIsImRlcml2YXRpdmVDdXJ2ZSIsInNlY29uZERlcml2YXRpdmVDdXJ2ZSIsInRvb2xzVGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRlcml2YXRpdmVNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEZXJpdmF0aXZlTW9kZWwgaXMgdGhlIHRvcC1sZXZlbCBtb2RlbCBmb3IgdGhlICdEZXJpdmF0aXZlJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJNb2RlbCwgeyBDYWxjdWx1c0dyYXBoZXJNb2RlbE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ2FsY3VsdXNHcmFwaGVyTW9kZWwuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEN1cnZlTWFuaXB1bGF0aW9uTW9kZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ3VydmVNYW5pcHVsYXRpb25Nb2RlLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFRhbmdlbnRTY3J1YmJlciBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVGFuZ2VudFNjcnViYmVyLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBEZXJpdmF0aXZlTW9kZWxPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Q2FsY3VsdXNHcmFwaGVyTW9kZWxPcHRpb25zLCAnZ3JhcGhTZXRzJyB8ICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlcml2YXRpdmVNb2RlbCBleHRlbmRzIENhbGN1bHVzR3JhcGhlck1vZGVsIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHRhbmdlbnRTY3J1YmJlcjogVGFuZ2VudFNjcnViYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogRGVyaXZhdGl2ZU1vZGVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPERlcml2YXRpdmVNb2RlbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBDYWxjdWx1c0dyYXBoZXJNb2RlbE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIENhbGN1bHVzR3JhcGhlck1vZGVsT3B0aW9uc1xyXG4gICAgICBjdXJ2ZU1hbmlwdWxhdGlvbk1vZGVDaG9pY2VzOiBbXHJcbiAgICAgICAgQ3VydmVNYW5pcHVsYXRpb25Nb2RlLkhJTEwsXHJcbiAgICAgICAgQ3VydmVNYW5pcHVsYXRpb25Nb2RlLlBFREVTVEFMLFxyXG4gICAgICAgIEN1cnZlTWFuaXB1bGF0aW9uTW9kZS5USUxULFxyXG4gICAgICAgIEN1cnZlTWFuaXB1bGF0aW9uTW9kZS5TSElGVFxyXG4gICAgICBdLFxyXG4gICAgICBoYXNUYW5nZW50U2NydWJiZXI6IHRydWVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy50YW5nZW50U2NydWJiZXIgPSBuZXcgVGFuZ2VudFNjcnViYmVyKCB0aGlzLmludGVncmFsQ3VydmUsIHRoaXMub3JpZ2luYWxDdXJ2ZSwgdGhpcy5kZXJpdmF0aXZlQ3VydmUsXHJcbiAgICAgIHRoaXMuc2Vjb25kRGVyaXZhdGl2ZUN1cnZlLCB0aGlzLnRvb2xzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RhbmdlbnRTY3J1YmJlcicgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMudGFuZ2VudFNjcnViYmVyLnJlc2V0KCk7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5jYWxjdWx1c0dyYXBoZXIucmVnaXN0ZXIoICdEZXJpdmF0aXZlTW9kZWwnLCBEZXJpdmF0aXZlTW9kZWwgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLG9CQUFvQixNQUF1Qyw0Q0FBNEM7QUFDOUcsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFDbkYsT0FBT0MscUJBQXFCLE1BQU0sNkNBQTZDO0FBRS9FLE9BQU9DLGVBQWUsTUFBTSx1Q0FBdUM7QUFNbkUsZUFBZSxNQUFNQyxlQUFlLFNBQVNKLG9CQUFvQixDQUFDO0VBSXpESyxXQUFXQSxDQUFFQyxlQUF1QyxFQUFHO0lBRTVELE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUFtRSxDQUFDLENBQUU7TUFFN0Y7TUFDQU8sNEJBQTRCLEVBQUUsQ0FDNUJOLHFCQUFxQixDQUFDTyxJQUFJLEVBQzFCUCxxQkFBcUIsQ0FBQ1EsUUFBUSxFQUM5QlIscUJBQXFCLENBQUNTLElBQUksRUFDMUJULHFCQUFxQixDQUFDVSxLQUFLLENBQzVCO01BQ0RDLGtCQUFrQixFQUFFO0lBQ3RCLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNPLGVBQWUsR0FBRyxJQUFJWCxlQUFlLENBQUUsSUFBSSxDQUFDWSxhQUFhLEVBQUUsSUFBSSxDQUFDQyxhQUFhLEVBQUUsSUFBSSxDQUFDQyxlQUFlLEVBQ3RHLElBQUksQ0FBQ0MscUJBQXFCLEVBQUUsSUFBSSxDQUFDQyxXQUFXLENBQUNDLFlBQVksQ0FBRSxpQkFBa0IsQ0FDL0UsQ0FBQztFQUNIO0VBRWdCQyxLQUFLQSxDQUFBLEVBQVM7SUFDNUIsSUFBSSxDQUFDUCxlQUFlLENBQUNPLEtBQUssQ0FBQyxDQUFDO0lBQzVCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUM7RUFDZjtBQUNGO0FBQ0F0QixlQUFlLENBQUN1QixRQUFRLENBQUUsaUJBQWlCLEVBQUVsQixlQUFnQixDQUFDIn0=